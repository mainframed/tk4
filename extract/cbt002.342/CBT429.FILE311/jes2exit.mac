./ ADD NAME=$$README 0100-98016-98016-1800-00019-00019-00000-DALCOCK
 The contents of this file are FREEWARE. Use at your own risk. It
 is provided for your enjoyment and neither David Alcock or his
 employer provides any warranty for their use.  I'd like to hear how
 they work on your system:

    David Alcock
    dalcock@csw.com ...... Internet email (work)
    davea@ticnet.com ..... Internet email (home)

    http://www.ticnet.com/davea/mvs

 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 This is collection of my JES2 exits. I have attempted to remove all
 the installation code and have changed our company prefix for messages
 and such to "XYZ".  Please run on your test machine first.  It is quite
 possible that during my edit I could have deleted something useful.

 Probably the only one worth your while is my JES2 Exit 6.
./ ADD NAME=XYZJ2#02 0100-98016-98016-1800-00056-00056-00000-DALCOCK
 MACRO
 XYZJ2#02
.**********************************************************************
.***                                                                ***
.**  Name: XYZJ2#02                                                  **
.**                                                                  **
.**  Purpose: External mappings for XYZ JES2 exit 2, XYZJ2X02, for   **
.**           data in the XYZJ2#02 module.                           **
.**                                                                  **
.**  Note: The XYZJ2#02 module is a part of the XYZJ2X02 load module **
.**        that is available to other programs via the alias to      **
.**        CSECT XYZJ2#02.                                           **
.***                                                                ***
.**********************************************************************
.**********************************************************************
.***                                                                ***
.**           M o d i f i c a t i o n   H i s t o r y                **
.**                                                                  **
.** Person     Date        Description                               **
.** ---------- ----------- ----------------------------------------- **
.** DGAlcock   24-AUG-1995 Created this mapping macro to be used by  **
.**                        JES2 exit XYZJ2X02 and external programs  **
.**                        that read the XYZJ2#02 module;            **
.***                                                                ***
.**********************************************************************
*
** External data (XYZJ2#02) mappings
*
J2X02ED        DSECT ,
J2X02EDH       EQU   *                 Module header
J2X02EDH_J2VS  DS    X'00,04,02,00'    ..JES2 version (short)
J2X02EDH_J2VER DS    CL8'SP 4.2.0'     ..JES2 version
J2X02EDH_ID    DS    CL8'XYZJ2#02'     ..Module name
J2X02EDH_ASMD  DS    CL10'1962/03/06'  ..Assembly date
J2X02EDH_ASMT  DS    CL6'21:00'        ..Assembly time
J2X02EDH_DBJOB DS    CL8'jobname'      ..debugging jobname
J2X02EDHL      EQU   *-J2X02EDH
*
J2X02EDE       EQU   *                 Data area entry
J2X02EDE_TYPE  DS    CL2               ..Data area Type
$J2X02EDE_TSS  EQU   C'SS'             ..Job Name table
J2X02EDE_OFF   DS    XL2               ..Offset to data area
J2X02EDEL      EQU   *-J2X02EDE        Data area entry
#J2X02EDE_END  EQU   X'FF'             End of table
*
** Jobname Table
*
J2X02SS        DSECT ,
J2X02SS_JNAMEL DS    X                 Jobname length
J2X02SS_JNAME  DS    CL8               Jobname value
J2X02SS_CLASS  DS    C                 Class to be assigned
J2X02SSL       EQU   *-J2X02SS
.*
.** End of macro
.*
 MEND ,
./ ADD NAME=XYZJ2#06 0100-98016-98016-1800-00090-00090-00000-DALCOCK
 MACRO
 XYZJ2#06
.**********************************************************************
.***                                                                ***
.**  Name: XYZJ2#06                                                  **
.**                                                                  **
.**  Purpose: External mappings for XYZ JES2 exit 6, XYZJ2X06, for   **
.**           data in the XYZJ2#06 module.                           **
.**                                                                  **
.**  Note: The XYZJ2#06 module is a part of the XYZJ2X06 load module **
.**        that is available to other programs via the alias to      **
.**        CSECT XYZJ2#06.                                           **
.***                                                                ***
.**********************************************************************
.**********************************************************************
.***                                                                ***
.**           M o d i f i c a t i o n   H i s t o r y                **
.**                                                                  **
.** Person     Date        Description                               **
.** ---------- ----------- ----------------------------------------- **
.** DGAlcock   16-SEP-1994 Created this mapping macro to be used by  **
.**                        JES2 exit XYZJ2X06 and external programs  **
.**                        that read the XYZJ2#06 module;            **
.***                                                                ***
.**********************************************************************
*
** External data (XYZJ2#06) mappings
*
J2X06ED        DSECT ,
J2X06EDH       EQU   *                 Module header
J2X06EDH_J2VS  DS    X'00,04,02,00'    ..JES2 version (short)
J2X06EDH_J2VER DS    CL8'SP 4.2.0'     ..JES2 version
J2X06EDH_ID    DS    CL8'XYZJ2#06'     ..Module name
J2X06EDH_ASMD  DS    CL10'1962/03/06'  ..Assembly date
J2X06EDH_ASMT  DS    CL6'21:00'        ..Assembly time
J2X06EDH_DBJOB DS    CL8'jobname'      ..debugging jobname
J2X06EDHL      EQU   *-J2X06EDH
*
J2X06EDE       EQU   *                 Data area entry
J2X06EDE_TYPE  DS    CL2               ..Data area Type
$J2X06EDE_TJC  EQU   C'JC'             ..Job Class rules (T_RULES)
$J2X06EDE_TFQ  EQU   C'FQ'             ..Frequency (T_FREQ)
$J2X06EDE_TNP  EQU   C'NP'             ..Non-Production jobname
$J2X06EDE_TTU  EQU   C'TU'             ..Table unit table
J2X06EDE_OFF   DS    XL2               ..Offset to data area
J2X06EDEL      EQU   *-J2X06EDE        Data area entry
#J2X06EDE_END  EQU   X'FF'             End of table
*
** Frequency
*
J2X06FQ        DSECT ,
J2X06FQ_VALUE  DS    C                 Frequency value
J2X06FQ_DESC   DS    XL2               Description string offset
J2X06FQL       EQU   *-J2X06FQ
*
** Tape unit names
*
J2X06TU        DSECT ,
J2X06TU_VALUE  DS    CL8'tape'         Tape unit name
J2X06TUL       EQU   *-J2X06TU
*
** Non-production jobname
*
J2X06NP        DSECT ,
J2X06NP_VALUE  DS    CL6
J2X06NP_LENGTH DS    X
J2X06NP_START  DS    X
J2X06NP_DESC   DS    XL2
J2X06NPL       EQU   *-J2X06NP
*
** JCL rules (by job class)
*
J2X06JC        DSECT ,
J2X06JC_CLASS  DS    CL1                Job class
J2X06JC_TIME   DS    0CL8               Time
J2X06JC_TIMEM  DS    CL6'000000'        ..Minutes
J2X06JC_TIMES  DS    CL2'00'            ..Seconds
$J2X06JC_TIMEUT1 EQU C' '               ..Time is Unlimited - test 1
$J2X06JC_TIMEUT2 EQU C'*'               ..Time is Unlimited - test 2
J2X06JC_TAPE   DS    C' '                Allow Tapes?
$J2X06JC_TAPEY EQU   C'Y'                ..Yes
$J2X06JC_TAPEN EQU   C'N'                ..No
J2X06JC_DESC   DS    XL2                 Offset to description string
J2X06JCL       EQU   *-J2X06JC           Length of entry
#J2X06JC_DTL   EQU   10                  Length of Turnaround part
#J2X06JC_DDO   EQU   3  ' × '            Offset past ' × '
.*
.** End of macro
.*
 MEND ,
./ ADD NAME=XYZJ2X02 0100-98016-98016-1800-00325-00325-00000-DALCOCK
XYZJ2X02 TITLE 'JES2 EXIT 2 - JOB statement scan'
***********************************************************************
***                                                                 ***
**                                                                   **
** Name: XYZJ2X02                                                    **
**                                                                   **
** Author: David Alcock                                              **
**         1616 Woodall Rodgers Freeway                              **
**         Dallas, Tx 75266                                          **
**         (214) 777-1816                                            **
**                                                                   **
**         Modified from earlier XYZ source                          **
**                                                                   **
** Purpose: Change some started task default output class.           **
**                                                                   **
** Non-standard macros:                                              **
** - XYZJ2X02....Mapping macro for DSECTs that we make available in  **
**               CSECT/module XYZJ2#02.                              **
***                                                                 ***
***********************************************************************
         SPACE 2
***********************************************************************
***                                                                 ***
**           M o d i f i c a t i o n   H i s t o r y                 **
**                                                                   **
** Person     Date        Description                                **
** ---------- ----------- ------------------------------------------ **
** DGAlcock   14-APR-1996 JES2 4.3 changes;                          **
** DGAlcock   17-JAN-1996 Add ES01DDEL to class=Z;                   **
** DGAlcock   24-AUG-1995 Add EDMMGR* to class F; Change to use      **
**                        external table XYZJX#02                    **
** DGAlcock   15-DEC-1994 Add NSITE* to class F; IDMS to class N;    **
** DGAlcock   01-APR-1993 Added DMSAR started task to null;          **
** DGAlcock   08-FEB-1993 Added IDMS STCs to Class F (Infopac);      **
** DGAlcock   15-SEP-1992 Coverted to JES2 SP4.2;                    **
***                                                                 ***
***********************************************************************
         EJECT
*
** XYZ macros
*
         PRINT GEN
         XYZJ2#02 ,                       Get our mapping DSECTs
*
** Global stuff
*
         GBLC  &DBGJNME                Generate global variable
&DBGJNME SETC  'ibmuserZ'              ..Jobname for debugging info
         EJECT ,
         COPY  $HASPGBL
XYZJ2X02 $MODULE ENVIRON=JES2,                                         @
               RMODE=ANY,                                              @
               IBMJES2=SAMPLE,                                         @
               TITLE='JES2 EXIT 2 - JOB statement scan',               @
               $HASPEQU,                                               X
               $BUFFER,                                                X
               $CAT,                                                   X
               $COMWORK,                                               X
               $HCT,                                                   X
               $PADDR,                                                 X
               $JCT,                                                   X
               $JOE,                                                   X
               $JQE,                                                   X
               $MIT,                                                   X
               $PCE,                                                   X
               $RDRWORK,                                               X
               RPL,                                                    X
               RESPA
         PRINT ON
***********************************************************************
*                                                                     *
* OVERVIEW:                                                           *
*                                                                     *
*        THIS EXIT IS TAKEN FROM HASPRDR AFTER JES2 HAS OBTAINED      *
*        AND INITIALIZED THE JCT BUT BEFORE PERFORMING THE            *
*        STANDARD JOB STATEMENT PROCESSING.  ANY CHANGES TO THE       *
*        JCT WILL BE CHANGED LATER BY THE JOB STATEMENT SCAN IF       *
*        JOB STATEMENT HAS A PARAMETER CODED THAT OVERRIDES THE       *
*        DEFAULT.                                                     *
*                                                                     *
*        THE STATEMENT ITSELF IS LOCATED IN THE IMAGE BUFFER          *
*        (ADDRESS AT R1 + 0) AND CAN BE ALTERED BY EXIT2 BEFORE       *
*        RETURNING TO HASPRDR FOR JOB STATEMENT PROCESSING.           *
*                                                                     *
* LINKAGE:                                                            *
*                                                                     *
*        BRANCH ENTERED FROM THE JES2 EXIT EFFECTOR                   *
*                                                                     *
* ENVIRONMENT:                                                        *
*                                                                     *
*        JES2 MAINTASK                                                *
*                                                                     *
* RECOVERY:                                                           *
*                                                                     *
*        NONE                                                         *
*                                                                     *
* REGISTER USAGE:                                                     *
*                                                                     *
* INPUT   R0  = A CODE INDICATING THE TYPE OF JOB STATEMENT BEING     *
*               SCANNED                                               *
*               0  INDICATES AN INITIAL JOB STATEMENT IMAGE           *
*               4  INDICATES A SUBSEQUENT JOB CONTINUATION STATEMENT  *
*                                                                     *
*         R1  = ADDRESS OF A 3-WORD PARAMETER LIST WITH THE FOLLOWING *
*               STRUCTURE:                                            *
*               WORD 1 (+0) POINTS TO THE JOB STATEMENT IMAGE BUFFER  *
*               WORD 2 (+4) POINTS TO THE EXIT FLAG BYTE,             *
*                           RDWFLAGX, IN THE PCE                      *
*               WORD 3 (+8) POINTS TO THE JCTXWRK FIELD IN THE JCT    *
*                                                                     *
*         R2-R9 = N/A                                                 *
*         R10 = ADDRESS OF JCT                                        *
*         R11 = ADDRESS OF HCT                                        *
*         R12 = N/A                                                   *
*         R13 = ADDRESS OF PCE                                        *
*         R14 = RETURN ADDRESS                                        *
*         R15 = ADDRESS OF ENTRY POINT                                *
*                                                                     *
* OUTPUT  R15 = RETURN CODE                                           *
*         (ALL OTHERS UNCHANGED)                                      *
*                                                                     *
*                                                                     *
* REGISTER USAGE (INTERNAL): R0-R7   = WORK REGISTERS                 *
*                            R8      = JOB STATEMENT IMAGE BUFFER     *
*                            R9      = NOT USED                       *
*                            R10     = ADDRESS OF THE JCT             *
*                            R11     = ADDRESS OF THE HCT             *
*                            R12     = EXIT2 ADDRESSABILITY           *
*                            R13     = ADDRESS OF PCE                 *
*                            R14-R15 = WORK AND LINKAGE REGISTER      *
*                                                                     *
* RETURN CODES (R15 ON EXIT):                                         *
*                                                                     *
*        0  -  TELLS JES2 THAT IF THERE ARE ANY OTHER ROUTINES        *
*              ASSOCIATED WITH THIS EXIT, CALL THE NEXT EXIT.         *
*              IF THERE ARE NO OTHER ROUTINES, CONTINUE WITH          *
*              NORMAL HASPRDR PROCESSING.                             *
*                                                                     *
*        4  -  TELLS JES2 TO IGNORE ANY ADDITIONAL EXITS ASSOCIATED   *
*              WITH THIS EXIT AND CONTINUE WITH NORMAL HASPRDR        *
*              PROCESSING.                                            *
*                                                                     *
*        8  -  TELLS JES2 TO CANCEL THE JOB; ANY OUTPUT (THE JCL      *
*              IMAGE LISTING) IS PRODUCED.                            *
*                                                                     *
*        12 -  TELLS JES2 TO PURGE JOB; NO OUTPUT IS PRODUCED.        *
*                                                                     *
*                                                                     *
* OTHER CONSIDERATIONS:                                               *
*                                                                     *
*        SEE NOTES.                                                   *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*      THIS EXIT2 ROUTINE WILL BE ENTERED FOR FOR JOBS FROM THE       *
*      FOLLOWING SOURCES:                                             *
*                                                                     *
*        - LOCAL CARD READER                                          *
*        - REMOTE (RJE) CARD READER                                   *
*        - TSO LOGONS                                                 *
*        - STARTED TASKS                                              *
*        - INTERNAL READERS ALLOCATED TO BATCH JOBS                   *
*        - INTERNAL READERS ALLOCATED TO STARTED TASKS                *
*        - INTERNAL READERS ALLOCATED TO TSO USER (TSO SUBMIT)        *
*        - NJE JOB RECEIVERS                                          *
*        - SPOOL OFFLOAD JOB RECEIVERS                                *
*        - EXECUTION BATCH MONITOR (XBM) JOBLET                       *
*                                                                     *
*      UPON ENTERING WE WILL:                                         *
*                                                                     *
*        1.  TURN OFF THE EXIT2 BIT POSITION OF THE JOB EXIT MASK     *
*            SO THAT WE DO NOT ENTER FOR SUBSEQUENT JOB CONTINUATION  *
*            STATEMENTS.                                              *
*                                                                     *
*        2.  For started tasks: we will search thru a table and       *
*            if found, change the default sysout class to the value   *
*                                                                     *
***********************************************************************
         EJECT ,
EXIT02   $ENTRY BASE=R12
         $SAVE ,                          Save caller's registers
         LR    R12,R15                    Load our base register
         USING JCT,R10                    Get addressibility to JCT
         LTR   R10,R10                    JCT available?
         BZ    EXIT0                      No, leave
*
** Set it so we don't get called again for this job
*
*->      NI    JCTXMASK,B'11011111'    TURN OFF JOB'S EXIT2 EXIT MASK
*                         ××××××××       SO WE DO NOT ENTER THIS EXIT
*                 EXITS = 01234567         AGAIN FOR CONTINUATION
*                                            STATEMENTS
         SPACE 2
*
** Search thru table of started tasks that we change the default
** SYSOUT class for.
*
         CLI   JCTJOBID,C'S'              Started task?
         BNE   EXIT0                      Yes, continue
         LA    R0,TABLE#SS                Number in table
         L     R1,=V(XYZJ2#02)            Locate CSECT
         LA    R1,TABLE_SS-XYZJ2#02(R1)   Locate table in CSECT
PST$L    EQU   *
         CLI   J2X02SS_JNAMEL-J2X02SS(R1),#J2X02EDE_END
         BE    EXIT0                      Yes, continue
         SLR   R14,R14                    Clear register
         IC    R14,J2X02SS_JNAMEL-J2X02SS(R1) Get length to compare
         EX    R14,PST$C                  Compare jobnames
         BE    PST$F                      Yes, continue
         LA    R1,J2X02SSL(R1)            Bump to next entry
         BCT   R0,PST$L                   And process it
         B     EXIT0                      Leave, not found in table
PST$C    CLC   JCTJNAME(0),J2X02SS_JNAME-J2X02SS(R1)
PST$F    EQU   *
         MVC   JCTMCLAS(1),J2X02SS_CLASS-J2X02SS(R1)
*
** Termination from EXIT02 processing
*
EXIT0    EQU   *
         $RETURN RC=0                     Return to JES2
         EJECT
***********************************************************************
***                                                                 ***
**       Constants                                                   **
***                                                                 ***
***********************************************************************
         SPACE 2
         LTORG ,                          Literals used in EXIT02
APARNUM  DC    CL8'NONE'                  APAR Number
         EJECT
***********************************************************************
***                                                                 ***
**       Tables and data that we will let be externally referenced   **
**                                                                   **
**   Note: The H_J2VS/J2X02EDH_J2VS at offset 0 is done to simulate  **
**         the ADRRELVL and ICKRELVL modules.                        **
**                                                                   **
**   Note: You *must* keep the format of this CSECT in sync with the **
**         XYZJ2X#02 macro or other program that process this module **
**         will faile.                                               **
***                                                                 ***
***********************************************************************
         SPACE 2
         LCLC  &ASMDATE
* In High-Level-Assembler, &SYSDATC is "YYYYMMDD"
&ASMDATE SETC  '&SYSDATC'(1,4).'/'.'&SYSDATC'(5,2).'/'.'&SYSDATC'(7,2)
*&ASMDATE SETC  '&SYSDATE'                                        ASM-H
*
** Start of CSECT
*
XYZJ2#02 CSECT ,
XYZJ2#02 AMODE 31
XYZJ2#02 RMODE ANY
*
HEADER   EQU   *
H_J2VS   DC    X'00,04,02,00'                 JES2 short version: 420
H_J2VER  DC    CL8'&VERSION'                  JES2 version long
H_ID     DC    CL8'XYZJ2#02'                  Module name
H_ASMD   DC    CL10'&ASMDATE'                 ASM date: "1994/03/06"
H_ASMT   DC    CL6'&SYSTIME'                  ASM time: "hh:mm"
H_DBJOB  DC    CL8'&DBGJNME'                  Debugging jobname
HEADERL  EQU   *-HEADER                       Must match J2X02EDHL
HEADERT  EQU   J2X02EDHL                      Match?  !!!!
*
** Offsets for external programs (mapped by J2X02EDE)
*
ENTRIES  EQU   *
         DC    AL2($J2X02EDE_TSS,TABLE_SS-XYZJ2#02)   Job table
         DC    AL1(#J2X02EDE_END)                     End of table
         SPACE 2
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
**                                                                   **
***      Jobname table for started task output class changes        ***
**                                                                   **
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         SPACE 2
TABLE_SS DS    0H
         DC    AL1(4-1),CL8'IDMS    ',C'N'
         DC    AL1(5-1),CL8'NSITE   ',C'F'
         DC    AL1(6-1),CL8'EDMMGR  ',C'F'
*
         DC    AL1(5-1),CL8'TCPIP   ',C'X'
         DC    AL1(8-1),CL8'FTPSERVE',C'X'
         DC    AL1(4-1),CL8'SNMP    ',C'X'
         DC    AL1(7-1),CL8'LPSERVE ',C'X'
         DC    AL1(7-1),CL8'PORTMAP ',C'X'
         DC    AL1(7-1),CL8'WEB3270 ',C'X'
         DC    AL1(6-1),CL8'GOPHER  ',C'X'
*
         DC    AL1(8-1),CL8'ES01DDEL',C'Z'    Eyespy dump processor
         DC    AL1(5-1),CL8'INIT    ',C'Z'
         DC    AL1(6-1),CL8'DCCRDR  ',C'Z'
         DC    AL1(5-1),CL8'DMSAR   ',C'Z'
         DC    AL1(8-1),CL8'RECALLO ',C'Z'
         DC    AL1(2-1),CL8'X       ',C'Z'
         DC    AL1(#J2X02EDE_END),CL8'????????',C'Z'  End of table
*
         DC    AL1(8-1),CL8'UNUSED1 ',C'Z'            Zap to use
         DC    AL1(8-1),CL8'UNUSED2 ',C'Z'            Zap to use
         DC    AL1(8-1),CL8'UNUSED3 ',C'Z'            Zap to use
TABLE#SS EQU   (*-TABLE_SS)/J2X02SSL
         DC    AL1(#J2X02EDE_END),CL8'????????',C'Z'  End of table
         SPACE 2
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
**                                                                   **
***      End of XYZJ2#02 CSECT                                      ***
**                                                                   **
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         SPACE 2
         DC    C'ENDOFXYZJ2#02'           Eyecatcher
         DS    0D
XYZJ2L02 EQU   *-XYZJ2#02                 Length (for trivia)
         EJECT
***********************************************************************
***                                                                 ***
**       End of XYZJ2X02 module                                      **
***                                                                 ***
***********************************************************************
         SPACE 2
        $MODEND ,                         Generate end of module
EXIT02L  EQU   *-EXIT02                   Length of EXIT02
EXIT02F  EQU   8192-EXIT02L               Bytes free under base regs
         END   ,
./ ADD NAME=XYZJ2X04 0100-98016-98016-1800-00239-00239-00000-DALCOCK
XYZJ2X04 TITLE 'JES2 USER EXIT 4 -- PROLOG (MODULE COMMENT BLOCK)'
***********************************************************************
*                                                                     *
* MODULE NAME : XYZJ2X04                                              *
*                                                                     *
* DESCRIPTIVE NAME : JES2 USER EXIT 4  -  JCL/JECL SCAN ROUTINE       *
*                                                                     *
* FUNCTION : This exit allows JES2 4.2 to act like previous releases  *
*            of JES2 and comments out /*ROUTE PRINT njenode for       *
*            jobs with MSGCLASS=X.                                    *
*                                                                     *
* ENVIRONMENT : JES2 MAIN TASK                                        *
*                                                                     *
*    ATTRIBUTES = NON-REENTRANT, RMODE(24), AMODE(24/31)              *
*                                                                     *
* ENTRY POINTS : EXIT04                                               *
*                                                                     *
* REGISTER USAGE (ENTRY/EXIT) :                                       *
*                                                                     *
*    REG       VALUE ON ENTRY             VALUE ON EXIT               *
*                                                                     *
*    R0        A CODE PASSED TO THE       UNCHANGED                   *
*              ROUTINE BY JES2:                                       *
*                0  INDICATES JECL                                    *
*                4  INDICATES JCL                                     *
*    R1        ADDRESS OF 3-WORD          UNCHANGED                   *
*              PARAMETER LIST:                                        *
*               +0  ADDRESS OF IMAGE BUFFER                           *
*               +4  ADDRESS OF RDWFLAGX                               *
*               +8  ADDRESS OF JCTXWRK                                *
*    R2-R9     N/A                        UNCHANGED                   *
*    R10       ADDRESS OF THE JCT OR ZERO UNCHANGED                   *
*    R11       ADDRESS OF THE HCT         UNCHANGED                   *
*    R12       N/A                        UNCHANGED                   *
*    R13       ADDRESS OF THE PCE         UNCHANGED                   *
*    R14       RETURN ADDRESS             UNCHANGED                   *
*    R15       ENTRY ADDRESS              RETURN CODE                 *
*                                                                     *
* RETURN CODES (R15 ON EXIT)                                          *
*                                                                     *
*       0  TELLS JES2 THAT IF THERE ARE ANY ADDITIONAL EXIT ROUTINES  *
*          ASSOCIATED WITH THIS EXIT, CALL THE NEXT CONSECUTIVE       *
*          EXIT ROUTINE.  IF THERE ARE NO OTHER EXIT ROUTINES ASSO-   *
*          CIATED WITH THIS EXIT, CONTINUE WITH NORMAL PROCESSING.    *
*                                                                     *
*       4  TELLS JES2 THAT EVEN IF THERE ARE ADDITIONAL EXIT ROUTINES *
*          ASSOCIATED WITH THIS EXIT, IGNORE THEM.  CONTINUE WITH     *
*          NORMAL PROCESSING.                                         *
*                                                                     *
*       8  FOR JES2 CONTROL STATEMENTS, TELLS JES2 NOT TO PERFORM     *
*          STANDARD HASPRCCS PROCESSING; INSTEAD, IMMEDIATELY         *
*          CONVERT THE STATEMENT TO A COMMENT (//*) WITH THE NULL-    *
*          ON-INPUT FLAG SET TO ONE AND WRITE THE STATEMENT TO THE    *
*          JCL DATA SET.  FOR JCL STATEMENTS, TELLS JES2 TO PERFORM   *
*          STANDARD HASPRDR PROCESSING.                               *
*                                                                     *
*      12  TELLS JES2 TO CANCEL THE JOB BECAUSE AN ILLEGAL CONTROL    *
*          STATEMENT HAS BEEN DETECTED; OUTPUT IS PRODUCED.           *
*                                                                     *
*      16  TELLS JES2 TO PURGE THE JOB; NO OUTPUT IS PRODUCED.        *
*                                                                     *
***********************************************************************
*
         TITLE 'JES2 USER EXIT 4 -- PROLOG ($HASPGBL)'
         COPY  $HASPGBL
         TITLE 'JES2 USER EXIT 4 -- PROLOG ($MODULE)'
XYZJ2X04 $MODULE ENVIRON=JES2,                                         @
               RMODE=ANY,                                              @
               IBMJES2=SAMPLE,                                         @
               TITLE='JES2 EXIT 4 - JCL/JECL scan',                    @
               $BUFFER,            GENERATE HASP I/O BUFFER DSECT      C
               $CADDR,             GENERATE HASP CADDR DSECT           C
               $CAT,               GENERATE HASP CAT DSECT             C
               $CMB,               GENERATE HASP CMB DSECT             C
               $DCT,               GENERATE HASP DCT DSECT             C
               $DTE,               GENERATE HASP DTE DSECT             C
               $ERA,               GENERATE HASP ERA DSECT             C
               $HASPEQU,           GENERATE HASP EQUATES DSECT         C
               $HCT,               GENERATE HASP HCT DSECT             C
               $JCT,               GENERATE HASP JCT DSECT             C
               $JQE,               GENERATE HASP JQE DSECT             C
               $KIT,               GENERATE HASP KIT DSECT             C
               $MIT,               GENERATE HASP MIT DSECT             C
               $PADDR,             GENERATE HASP PADDR DSECT           C
               $PARMLST,           GENERATE HASP PARMLST DSECT         C
               $PCE,               GENERATE HASP PCE DSECT             C
               $PIT,               GENERATE HASP PIT DSECT             C
               $PSV,               GENERATE HASP PSV DSECT             C
               $RDRWORK,           GENERATE HASP RDRWORK DSECT         C
               $TQE,               GENERATE HASP TQE DSECT             C
               $USERCBS,           GENERATE HASP USERCBS DSECT         C
               $XECB,              GENERATE HASP XECB DSECT            C
               $XIT                GENERATE HASP XIT DSECT
         TITLE 'JES2 USER EXIT 4 -- JCL/JECL SCAN'
***********************************************************************
*                                                                     *
*        EXIT4 - INSTALLATION EXIT 4 ROUTINE                          *
*                                                                     *
*                                                                     *
* REGISTER USAGE (INTERNAL)                                           *
*                                                                     *
*    REG       VALUE                                                  *
*                                                                     *
*    R0        PARAMETER FROM JES2                                    *
*    R1-R9     WORK REGISTERS                                         *
*    R10       JCT ADDRESSABILITY                                     *
*    R11       HCT ADDRESSABILITY                                     *
*    R12       EXIT4 ADDRESSABILITY                                   *
*    R13       PCE ADDRESSABILITY                                     *
*    R14       LINK/WORK REGISTER                                     *
*    R15       LINK/WORK REGISTER                                     *
*                                                                     *
***********************************************************************
         SPACE 1
EXIT04  $ENTRY  BASE=R12           Provice exit routine entry point
        $SAVE                      Save caller's registers
         USING JCT,R10             Establish JCT addressability
         LR    R12,R15             Establish base register for exit
*
         LTR   R10,R10             Check for JCT
         BZ    X4RC00              None, leave right now
         LR    R6,R0               Save R0 on entry
         LR    R7,R1               Save R1 on entry
*
** Are we being invoked for a JECL with MSGCLASS=X?
*
         CLI   JCTMCLAS,C'X'       MSGCLASS=X?
         BNE   X4RC00              No, leave
*
         LTR   R6,R6               JECL?
         BNZ   X4RC00              No, leave
         SPACE 1
***********************************************************************
*                                                                     *
*        Look for /*ROUTE PRINT nodename                              *
*                                                                     *
***********************************************************************
         SPACE 1
ROUTE_NODE EQU *
         L     R5,0(R7)            Locate JECL image
*
** Debugging information for debugging job
*
RN$DEBUG EQU   *
         CLC   JCTJNAME(8),=CL8'ibmuserZ'  Debugging jobname?
         BNE   RN$DEBUGX                   No, continue
        $WTO   JMSG1,L'JMSG1,JOB=YES,ROUTE=$LOG+$TP+$MAIN,             C
               CLASS=$ALWAYS,PRI=$ST
RN$DEBUGX EQU  *
*
** /*ROUTE processing
*
         CLC   0(8,R5),=C'/*ROUTE '       Route?
         BNE   RN$ROUTEX                  No, continue
         LA    R1,8(R5)                   bump past "/*ROUTE"
         LA    R0,71-5-1
RN$PRTL  EQU   *
         CLC   0(6,R1),=C'PRINT '         Found the print operand
         BE    RN$PRTLX                   Yes, continue
         LA    R1,1(R1)                   No, bump to next byte
         BCT   R0,RN$PRTL
         B     RN$ROUTEX                  Give up
RN$PRTLX EQU   *
         LA    R1,6(R1)                   Bump past "PRINT "
         SH    R0,=H'6'                   Take 6 off the total scan
RN$NSPL  EQU   *
         CLI   0(R1),C' '                 Space?
         BNE   RN$NSPLX                   No, found destination
         LA    R1,1(R1)                   Yes, search for destination
         BCT   R0,RN$NSPL                      and try it out
         B     RN$ROUTEX                  Opps, no Destination found
RN$NSPLX EQU   *
         LA    R14,T_NODES                Locate node table
         LA    R15,T_NODESN               Get number in table
RN$NODEL EQU   *
         CLC   0(8,R1),0(R14)             Routing to PSO in MSGCLASS=X?
         BE    RN$SUPIT                   Nope, continue
         LA    R1,8(R1)                   Bump to next node in table
         CLI   0(R1),X'FF'                End of table?
         BE    RN$ROUTEX                  Yes, continue
         BCT   R15,RN$NODEL               Continue with node search
         B     RN$ROUTEX                  Leave - destination not found
RN$SUPIT EQU   *
         MVI   JCTUSERB,C'X'              Set flag for XYZJ2X06
         B     X4RC08                     and ignore this puppy
RN$ROUTEX EQU  *
*
** Exit from Route_Node processing
*
RN$X     EQU   *
         SPACE 1
***********************************************************************
*                                                                     *
*    EXIT4 COMMON RETURN ROUTINE                                      *
*                                                                     *
***********************************************************************
         SPACE 1
X4RC00   LA    R15,0               SET RC=0
         B     RRET                BRANCH TO RETURN WITH RC SET
         SPACE 1
X4RC04   LA    R15,4               SET RC=4
         B     RRET                BRANCH TO RETURN WITH RC SET
         SPACE 1
X4RC08   LA    R15,8               SET RC=8
         B     RRET                BRANCH TO RETURN WITH RC SET
         SPACE 1
X4RC12   LA    R15,12              SET RC=12
         SPACE 1
RRET    $RETURN RC=(R15)           SAVE RETURN CODE
         EJECT
***********************************************************************
*                                                                     *
*       EXIT2 Constants                                               *
*                                                                     *
***********************************************************************
         SPACE 2
*
** Exit messages
*
T_NODES  EQU   *
         DC    CL8'TULSA1'
         DC    8X'FF'             Entry to zap
         DC    8X'FF'             Entry to zap
         DC    8X'FF'             Entry to zap
T_NODESN EQU   (*-T_NODES)/8
         DC    X'FF',C'END'
*
** Exit messages
*
JMSG1   $MSG   999,' XYZJ2X04 Processing JECL card - Last assembled on @
               &SYSDATE at &SYSTIME'
         ORG   ,
*
** Literals and module end
*
         LTORG ,
        $MODEND
APARNUM  DC    CL8'NONE'           APAR NUMBER
         END   ,                   END OF XYZJ2X04
./ ADD NAME=XYZJ2X06 0100-98016-98016-1800-01797-01797-00000-DALCOCK
XYZJ2X06 TITLE 'XYZ - JES2 Exit 6'
***********************************************************************
***                                                                 ***
** Module name = XYZJ2X06                                            **
**                                                                   **
** Author = David Alcock                                             **
**                                                                   **
** Descriptive Name = HASP Exit 6 Converter/Interpreter (C/I) text   **
**                    module                                         **
**                                                                   **
** Function = This JES2 exit scans C/I text as generated by the MVS  **
**            Converter subtask and performs XYZ JCL standards       **
**            verification.                                          **
**                                                                   **
**            The XYZ manual, Information Services Reference Manual, **
**            is the "bible" for installation JCL standards.         **
**                                                                   **
** Non-standard macros:                                              **
** - XYZJ2X06....Mapping macro for DSECTs that we make available in  **
**               CSECT/module XYZJ2#06.                              **
** - STR.........Build a Pascal-like string with a length byte       **
**               followed by a text value.                           **
**                                                                   **
** Reference manuals:                                                **
** - LY28-1029 JES2 Customization                                    **
** - GC28-1637 Installation Exits (Section 4: MVS C/I Text Format)   **
**                                                                   **
** Undocumented Interfaces:                                          **
** - This exit uses the field names from mapping DSECT $DTECNV:      **
**   DCNVPARM, DCNVUWAA, DCNVP2A, DCNVDTEA, DCNJCTA and DCNVCNMB     **
**   to map the 5-word parameter list passed to us in register 1.    **
**                                                                   **
***                                                                 ***
***********************************************************************
         SPACE 2
***********************************************************************
*                                                                     *
* REGISTER USAGE:                                                     *
*                                                                     *
* INPUT   R0  = A CODE INDICATING THE STATUS OF CONVERSION PROCESSING *
*               0  INDICATES THAT A JCL STATEMENT HAS BEEN CONVERTED  *
*                  TO AN C/I TEXT IMAGE                               *
*               4  INDICATES THAT ALL OF THE JCL FOR A PARTICULAR     *
*                  JOB HAS BEEN CONVERTED TO C/I TEXT.                *
*                                                                     *
*         R1  = ADDRESS OF A 4-WORD PARAMETER LIST WITH THE           *
*               FOLLOWING STRUCTURE:                                  *
*               WORD 1 (+0) = ADDR OF 16-BYTE WORK AREA               *
*                             Word 1 (+0) Address of 16 byte wrk area *
*                             Word 2 (+4) Passed field                *
*                             Word 3 (+8) Address of the $DTE         *
*                             Word 4 (+12) Address of the $JCT        *
*                             Word 5 (+16) Zero pointer (CNMB)        *
*               WORD 2 (+4) = If the code passed in R0 is:            *
*                             0 - This word points to the address of  *
*                                 a 8192 byte buffer that contains the*
*                                 C/I text of the converted JCL       *
*                                 statement                           *
*                             4 - This word contains the address of   *
*                                 converter's return code             *
*               WORD 3 (+8) = ADDRESS OF THE DTE                      *
*               WORD 4 (+12) = ADDRESS OF THE JCT                     *
*               WORD 4 (+16) = N/A on entry; used to store the        *
*                              IEFCNMB if gotten in exit              *
*         R2-R10 = N/A                                                *
*         R11 = ADDRESS OF HCT                                        *
*         R12 = N/A                                                   *
*         R13 = ADDRESS OF AN 18-WORD OS-STYLE SAVE AREA              *
*         R14 = RETURN ADDRESS                                        *
*         R15 = ADDRESS OF ENTRY POINT                                *
*                                                                     *
* OUTPUT  R15 = RETURN CODE                                           *
*         (ALL OTHERS UNCHANGED)                                      *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
***                                                                 ***
**           M o d i f i c a t i o n   H i s t o r y                 **
**                                                                   **
** Person     Date        Description                                **
** ---------- ----------- ------------------------------------------ **
** DGAlcock   03-NOV-1996 Added check for SYSMDUMP;                  **
** DGAlcock   09-MAY-1996 Changed GETMAIN in SAVE_MESSAGE routine to **
**                        use the MVS GETMAIN macro instead of the   **
**                        JES2 $GETMAIN macro - refer to OY56218;    **
** DGAlcock   07-NOV-1995 Added classes 0, 7, 8 to TABLE_JC;         **
** DGAlcock   17-OCT-1994 Add description string to TABLE_JC;        **
** DGAlcock   16-SEP-1994 Allow SCIS* jobs to use numeric job class; **
**                        Move tables to CSECT that will have an     **
**                        external reference (via ALIAS) which will  **
**                        allow us to see actual processing rules;   **
** DGAlcock   04-JAN-1994 Check for DISP=MOD and DCB override;       **
**                        Correct Time logic for class; Add check    **
**                        for label=(,NL/BLP) and DCB override;      **
** DGAlcock   30-NOV-1993 Added "xCISxxxx" as valid userid jobname;  **
** DGAlcock   11-NOV-1993 Moved JCL standards validation from SMF    **
**                        exit IEFUJV to XYZJ2X06:                   **
**                        - Jobname validation                       **
**                          - Valid company id           D           **
**                          - Valid Application code     SYS         **
**                          - Valid series               000         **
**                          - Valid Frequency            A           **
**                        - Account code validation                  **
**                          - Valid company              D,D,D       **
**                          - Valid application code     SYS         **
** DGAlcock   29-SEP-1993 Add //STEPCAT & JOBCAT Detection; Added    **
**                        detection of using DCB info after create;  **
**                        Detect use of DSN=AS./ in production job;  **
**                        Change selection of "production" jobname;  **
** DGAlcock   09-JUN-1993 Add full CPU time enforcement (JOB Card);  **
** DGAlcock   04-AUG-1992 Added check for JCTUSERB set in XYZJ2X04   **
**                        to print about /*ROUTE PRINT nodename for  **
**                        MSGCLASS=X jobs;                           **
** DGAlcock   28-JUL-1992 Created new source based on earlier XYZ    **
**                        functions and IBM sample SP4.2 exit; This  **
**                        Exit is at the JES2 4.2 level;             **
***                                                                 ***
***********************************************************************
         EJECT ,
***********************************************************************
***                                                                 ***
**       Internal DSECTs                                             **
***                                                                 ***
***********************************************************************
         SPACE 2
*
** Life of Convert Area
*
LCA      DSECT ,
LCAEYEC  DS    CL8                        Eyecatcher for dumps
LCAJNAME DS    CL8                        Jobname for dumps
LCAJOBID DS    CL8                        JOBID for dumps
         DS    0D
DOUBLE   DS    D                          Double word work area
LCAPARM  DS    XL(C_LOCATEL)              Locate Parameter list
WORKDSNL DS    F                          Length of DSNAME
WORKDSN  DS    CL56                       Build DSNAME here
         ORG   WORKDSN                    Reuse WORKDSN area
PJC_TM   DS    C'000000'                  CPU minutes on job card
PJC_TS   DS    C'00'                      CPU seconds on job card
         DS    0F
PJC_ACCT DS    4F                         Account field pointers
PJC_TBL  DS    F                          Address of APPLTBL
         ORG   ,
         DS    0D
W_CAMLST DS    XL265                      CAMLST Locate area
         ORG   W_CAMLST                   Reuse W_CAMLST area
WORKMSG  DS    XL(CNMBMAXL)               Work CNMB message area
         ORG   ,
*
LCAI     DS    0F                         Start of area to initialize
LCA_CLS  DS    C                          Job class
LCA_CLSR DS    XL(J2X06JCL)               TABLE_JC entry for Class
MAXCC    DS    X                          Maximum Condition Code
FLAG1    DS    B'00000000'                Flag 1
$F1_FLCA EQU   B'10000000'                ..Free LCA
$F1_DBUG EQU   B'01000000'                ..Debugging job?
$F1_ASMP EQU   B'00100000'                ..Automated Storage problem?
$F1_PROD EQU   B'00010000'                ..Production jobname?
$F1_STND EQU   B'00001000'                ..Violates standards?
LCAIL    EQU   (*-LCAI)                   Length of area to initialize
         DS    0F                         Stuff set for each invocation
A_PARM   DS    A                          Address of parm list on entry
A_CNMB   DS    A                          Last CNMB
LASTCC   DS    X                          Last Condition Code
FLAGI1   DS    B'00000000'                Invocation flag 1
$FLAGI1_G EQU  B'10000000'                ..GDG?
$FLAGI1_T EQU  B'01000000'                ..Found TIME= on jobcard?
$FLAGI1_D EQU  B'00100000'                ..DCB info with DISP <> NEW
$FLAGI1_C EQU  B'00010000'                ..Invalid company on jobname
$FLAGI1_J EQU  B'00001000'                ..No jobname on jobcard
         DS    0D                         Alignment for FREEMAIN
LCAL     EQU   *-LCA                      Length of area
*
** User Work Area (Pointed to by first word (DCNVUWAA) in the 5-word
** parameter list passed to this exit).
*
UWA      DSECT ,
UWALCA   DS    F                          Pointer to LCA work area
         DS    3F                         Not used yet
UWAL     EQU   *-UWA                      Must be 16-dec or 10-hex
*
** CAMLST Locate Area maping
*
CLA      DSECT ,
CLA_NUM  DS    XL2                        Number of units
CLA_ENT  DS    0H                         Entry
CLA_UNIT DS    0XL4                       ..Unit type
CLA_UT1  DS    X                            ..Type byte 1
CLA_UT2  DS    X                            ..Type byte 2
CLA_UT3  DS    X                            ..Type byte 3
CLA_UT4  DS    X                            ..Type byte 4
CLA_VOL  DS    CL6                        ..Volume serial
CLA_SEQ  DS    XL2                        ..Sequence number
CLA_ENTL EQU   *-CLA_ENT                  Entry length='12'd or '0C'x
*
         PRINT GEN
         XYZJ2#06 ,                    Get external mapping
*
** Global stuff
*
         GBLC  &DBGJNME                Generate global variable
&DBGJNME SETC  'ibmuserZ'              ..Jobname for debugging info
         EJECT
***********************************************************************
***                                                                 ***
**       Ask JES2 for some mapping DSECTs and equates                **
***                                                                 ***
***********************************************************************
         SPACE 2
         COPY  $HASPGBL            Copy HASP globals
XYZJ2X06 $MODULE ENVIRON=SUBTASK,                                      @
               RMODE=ANY,                                              @
               IBMJES2=SAMPLE,                                         @
               TITLE='JES2 EXIT 6 - JCL standards enforcement',        @
               CNMB,               IEFCNMB - Converter message buffer  C
               DEB,                Generate MVS IEZDEB                 C
               (KEYS,GEN),         Generate MVS IEFVKEYS and list them C
               RPL,                GENERATE MVS IFGRPL                 C
               SAFP,               ICHSAFP - SAF PARAMETER LIST        C
               (TEXT,GEN),         GENERATE MVS IEFTXTFT AND LIST THEM C
               TOKEN,              ICHRUTKN - SAF TOKEN MAPPING        C
               WPL,                GENERATE MVS IEXWPL                 C
               $BUFFER,            BUFFER DSECT                        C
               $CADDR,             COMMON STORAGE ADDRESS LIST         C
               $CMB,               CONSOLE MESSAGE BUFFER              C
               $DTE,               DAUGHTER TASK ELEMENT               C
               $DTECNV,            DTE EXTENSION FOR CONVERSION        C
               $ERA,               ERROR RECOVERY AREA                 C
               $HASPEQU,           GENERAL EQUATES                     C
               $HCCT,              COMMON STORAGE CONTROL TABLE        C
               $HCT,               PRIVATE STORAGE CONTROL TABLE       C
               $HFAME,             FILE ALLOCATION MAP ELEMENT         C
               $JCT,               JOB CONTROL TABLE                   C
               $JQE,               JOB QUEUE ELEMENT                   C
               $MIT,               MODULE INFORMATION TABLE            C
               $MITETBL,           $MIT TABLE ENTRY                    C
               $PADDR,             PRIVATE STORAGE ADDRESS LIST        C
               $PARMLST,           PARAMETER LIST MAPPING              C
               $PCE,               PROCESSOR CONTROL ELEMENT           C
               $PDDB,              DATA SET DEFINITION BLOCK           C
               $PSV,               PROCESSOR SAVE AREA                 C
               $SCAT,              SYSOUT CLASS ATTRIBUTE TABLE        C
               $TQE,               TIMER QUEUE ELEMENT                 C
               $USERCBS,           USER CONTROL BLOCKS                 C
               $XECB,              EXTENDED ECB                        C
               $XIT                EXIT INFORMATION TABLE
         TITLE 'XYZ - JES2 Exit 6'
***********************************************************************
***                                                                 ***
**       Entry Housekeeping                                          **
***                                                                 ***
***********************************************************************
         SPACE 2
         PRINT GEN
EXIT06  $ENTRY BASE=(R12,R10)             Entry point to module
        $SAVE  NAME=EXIT06                Save registers
         LR    R12,R15                    Load base register
         LA    R10,4095                   Get 4096-1
         LA    R10,1(R10,R12)             Addressability: 2nd base reg
*
** Are we to process this job type?
*
         SLR   R15,R15                    Clear return code
         L     R14,DCNVJCTA-DCNVPARM(R1)  Locate JCT for this job
         TM    JCTJOBFL-JCT(R14),JCTSTCJB Started Task?
         BO    X$RETURN                   Yes, leave
         TM    JCTJOBFL-JCT(R14),JCTTSUJB TSO user?
         BO    X$RETURN                   Yes, leave
*
** Obtain life-of-convert Work Area (if first time)
*
         L     R4,DCNVUWAA-DCNVPARM(R1)   Locate 16-byte Work area
         ICM   R5,B'1111',UWALCA-UWA(R4)  Already have LCA storage?
         BNZ   I$LCAX                     Yes, continue
*
         LR    R2,R0                      Save R0 (type) upon entry
         LR    R3,R1                      Save R1 (parm) upon entry
       GETMAIN R,                         Obtain storage for LCA       @
               LV=LCAL,                   ..Length                     @
               SP=251                     ..Subpool (^freed on abend)
         LR    R5,R1                      Get address of LCA
         USING LCA,R5                     Get addressibility to it
         ST    R5,UWALCA-UWA(R4)          Save LCA address...
*
         LA    R15,LCAI                   Locate to initialization area
         XC    0(LCAIL,R15),0(R15)        Initialize area to zero
         MVC   LCAEYEC(8),=CL8'XYZJ2X06'  Diagnostic info for dumps
         L     R15,DCNVJCTA-DCNVPARM(R3)  Locate JCT from parmlist
         MVC   LCAJNAME(8),JCTJNAME-JCT(R15) Diagnostic info for dumps
         MVC   LCAJOBID(8),JCTJOBID-JCT(R15) Diagnostic info for dumps
*
         CLC   LCAJNAME(8),=CL8'&DBGJNME' Debugging job?
         BNE   I$LCADX                    No, continue
         OI    FLAG1,$F1_DBUG             Turn on flag
         WTO   ,MF=(E,MSG475)             Issue message
I$LCADX  DS    0H
*
         L     R1,=V(XYZJ2#06)            Locate CSECT
         CLC   LCAJNAME(4),NPTE1-XYZJ2#06(R1)    CIS-type jobname?
         BE    I$PRODJX                          Yes, not production?
         CLC   LCAJNAME+1(3),NPTE2-XYZJ2#06(R1)  Contractor jobname?
         BE    I$PRODJX                          Yes, not production?
         CLC   LCAJNAME+1(3),NPTE3-XYZJ2#06(R1)  TSO user?
         BE    I$PRODJX                          Yes, not production
         CLC   LCAJNAME+1(4),NPTE4-XYZJ2#06(R1)  Firecall?
         BE    I$PRODJX                          Yes, not production
         CLI   LCAJNAME+1,C'Z'            Has a numeric not alpha?
         BH    I$PRODJX                   Yes, an employee number type
I$PRODJ  DS    0H
         OI    FLAG1,$F1_PROD             This is a production jobname
I$PRODJX DS    0H
*
         LR    R0,R2                      Restore Exit type
         LR    R1,R3                      Restore Exit parameter list
I$LCAX   DS    0H
*
         ST    R1,A_PARM                  Save address of exit parm
         MVI   LASTCC,0                   Initialize lastcc
         MVI   FLAGI1,0                   Initialize invocation flag 1
         XC    A_CNMB(4),A_CNMB           New list needed for messages
         EJECT
***********************************************************************
***                                                                 ***
**    Test for type of invocation and branch to routine              **
***                                                                 ***
***********************************************************************
         SPACE 2
         LTR   R0,R0                      What type of call?
         BNZ   END_OF_CONVERT             End of the JCL convert
*
         L     R2,4(R1)                   Locate TEXT location
         USING TEXT,R2                    Get addressibility to it
*
** Invoke routine based on JCL type
*
         TM    STRINDCS,JOBSTR            JOB?
         BO    PROCESS_JOB_CARD
         TM    STRINDCS,DDSTR             DD?
         BO    PROCESS_DD_STATEMENT
*        TM    STRINDCS,EXECSTR           EXEC?
*        BO    PROCESS_EXEC_STATEMENT
         EJECT
***********************************************************************
***                                                                 ***
**       Exit housekeeping - restore registers, free work area       **
**       and return to the MVS converter                             **
***                                                                 ***
***********************************************************************
         SPACE 2
*
** Return to C/I
*
EXIT     DS    0H
         SLR   R15,R15                    Clear return code to zero
         IC    R15,LASTCC                 Get condition code for exit
*
         CLC   LASTCC(1),MAXCC            Need to update max cc?
         BNH   X$CCX                      No, continue
         MVC   MAXCC(1),LASTCC            Save max cc
X$CCX    DS    0H
*
** Free the LCA if last call
*
         TM    FLAG1,$F1_FLCA             Free LCA?
         BNO   X$FMX                      No, leave
      FREEMAIN R,                         Free LCA storage             @
               LV=LCAL,                   ..Length                     @
               A=(5),                     ..Address                    @
               SP=251                     ..Subpool
         SLR   R15,R15                    Get return code
X$FMX    DS    0H
*
** Return to caller
*
X$RETURN DS    0H
        $RETURN RC=(15)                   Return
         EJECT
***********************************************************************
***                                                                 ***
**       The job has completed conversion                            **
***                                                                 ***
***********************************************************************
         SPACE 2
END_OF_CONVERT DS 0H
         OI    FLAG1,$F1_FLCA             Free the LCA!
*
** Print WTO message if XYZJ2X04 JES2 exit found a special /*ROUTE card
*
         L     R1,A_PARM                  Locate parameter list
         L     R14,DCNVJCTA-DCNVPARM(R1)  Locate JCT for this job
         CLI   JCTUSERB-JCT(R14),C'X'     XYZJ2X04 found node /*ROUTE?
         BNE   EOC$EZPX                   No, continue
         MVC   WORKMSG(MSG499L),MSG499       Initialize message area
         MVC   WORKMSG+MSG499A(8),LCAJNAME   Get jobname (for SYSLOG)
         WTO   ,MF=(E,WORKMSG)            Issue message
EOC$EZPX DS    0H
*
** Print WTO message if we found some ASM violations, but okay
*
         TM    FLAG1,$F1_ASMP             Found problems?
         BNO   EOC$ASMPX                  No, continue
         MVC   WORKMSG(MSG498L),MSG498       Initialize message area
         MVC   WORKMSG+MSG498A(8),LCAJNAME   Get jobname (for SYSLOG)
         WTO   ,MF=(E,WORKMSG)            Issue message
         WTO   ,MF=(E,MSG497)             Issue message
EOC$ASMPX EQU  *
*
** Print WTO message if we found some standards Violations, but okay
*
         TM    FLAG1,$F1_STND             Found problems?
         BNO   EOC$STNDX                  No, continue
         MVC   WORKMSG(MSG496L),MSG496       Initialize message area
         MVC   WORKMSG+MSG496A(8),LCAJNAME   Get jobname (for SYSLOG)
         WTO   ,MF=(E,WORKMSG)            Issue message
         WTO   ,MF=(E,MSG497)             Issue message
EOC$STNDX EQU  *
*
** Issue message if there was a problem, else leave quietly
*
         CLI   MAXCC,0                    Did we have any problems
         BE    EXIT                       No, just leave
         WTO   ,MF=(E,MSG460)             Issue WTO message
         B     EXIT                       Leave
         EJECT
***********************************************************************
***                                                                 ***
**       Process the Job card                                        **
***                                                                 ***
***********************************************************************
         SPACE 2
PROCESS_JOB_CARD EQU *
         XC    PJC_TBL(4),PJC_TBL         Clear table address
*
** Load Job account table into memory
*
         LA    R6,=CL8'APPLTBL'           Get Application Table name
         LOAD  EPLOC=(6),ERRET=PJC$LATE   Load table into storage
         ST    R0,PJC_TBL                 Save address of table
         B     PJC$LATX
PJC$LATE DS    0H
         LA    R0,MSG478L                 Get message length
         LA    R1,MSG478                  Get message address
         BAS   R9,SAVE_MESSAGE            Save message
PJC$LATX DS    0H
*
** Process the positional items on the jobcard:
** //jobname JOB account,programer-name
**
** //A JOB (D,D,D,SYS),'?'
** Translates to: B4 03 01 C1 84 01 C4 01 C4 01 C4 03 E2E8E2 14 6F40...
**
**                B4 = JOBK
**                03 = Number of parameters: JOBNAME, ACCOUNT, PROGN
**                01 = Length of jobname
**                C1 = jobname
**                84 = First nibble is account Second is # of accts
**                01 = Length of account field 1
**                C4 = Value of account field 1
**                01 = Length of account field 2
**                C4 = Value of account field 2
**                01 = Length of account field 3
**                C4 = Value of account field 3
**                03 = Length of account field 4
**                E2E8E2 = Value of account field 4
**                14 = Length of programmer name
**                6F = Value of Programmer name
**
** //A JOB ,'??'
** Translates to: B4 03 01 C1 00 14 CF4040404040404040...
**
**                B4 = JOBK
**                03 = Number of parameters: JOBNAME, ACCOUNT, PROGN
**                07 = Length of jobname
**                C1 = jobname
**                00 = No Account fields!
**                14 = Length of programmer name
**                6F = Value of Programmer name
*
PJC$ACCT  EQU *
         LA    R0,JOBK                    Setup to find JOB string
         LA    R1,STRJKEY                 First key sequence
        $CALL  XINTKEY,ERRET=PJC$ACCTX    Find keyword
         LR    R7,R1                      Save start of original unit
*
         CLI   1(R7),X'03'                Looks like something we know?
         BNE   PJC$A$IJS                  No, internal error
         SLR   R1,R1                      Clear register
         ICM   R1,B'0001',2(R7)           Get length of jobname
         BZ    PJC$A$NJN                  None, no jobname...
         LA    R7,3(R1,R7)                Bump past jobname
         CLI   0(R7),X'00'                Any account fields
         BE    PJC$A$NAF                  No account fields found
         CLI   0(R7),X'84'                Right number of fields?
         BNE   PJC$A$WNF                  No account fields found
         LA    R7,1(R7)                   Bump past field number byte
*
         XC    PJC_ACCT(16),PJC_ACCT      Clear area
*
         SLR   R14,R14                    Clear register
         IC    R14,0(R7)                  Get length of 1st field
         LA    R7,1(R7)                   Bump to 1st field
         ST    R7,PJC_ACCT+0              Save address of 1st field
         AR    R7,R14                     Locate to next one
*
         IC    R14,0(R7)                  Get length of 2nd field
         LA    R7,1(R7)                   Bump to 2nd field
         ST    R7,PJC_ACCT+4              Save address of 2nd field
         AR    R7,R14                     Locate to next one
*
         IC    R14,0(R7)                  Get length of 3rd field
         LA    R7,1(R7)                   Bump to 3rd field value
         ST    R7,PJC_ACCT+8              Save address of 3rd field
         AR    R7,R14                     Locate to next one
*
         CLI   0(R7),X'03'                Application code length 3?
         BE    PJC$AALX                   Yes, continue
         BL    PJC$AALL                   No, less...
         LA    R0,MSG483L                 Get message length
         LA    R1,MSG483                  Get message address
         BAS   R9,SAVE_MESSAGE            Save message
         B     PJC$AALX
PJC$AALL DS    0H
         MVI   LASTCC,8                   Cancel this job...
         LA    R0,MSG488L                 Get message length
         LA    R1,MSG488                  Get message address
         BAS   R9,SAVE_MESSAGE            Save message
PJC$AALX DS    0H
*
         LA    R7,1(R7)                   Bump to 4th field value
         ST    R7,PJC_ACCT+12             Save address of 4th field
*
         LA    R3,PJC_ACCT                Locate account field pointers
         LA    R4,3                       Number of company codes
         LA    R6,=C'123'                 Locate Account field number
PJC$A$FL DS    0H
         L     R15,0(R3)                  Get address of company code
         BAS   R9,PJC$CHECK_CC            Verify company code
         LTR   R15,R15                    Valid?
         BNZ   PJC$A$FLB                  Yes, continue
         MVI   LASTCC,8                   Cancel this job...
         LA    R1,WORKMSG                 Locate work area
         MVC   0(MSG476L,R1),MSG476       Move in message
         L     R15,0(R3)                  Get address of company code
         MVC   MSG476CC-MSG476(1,R1),0(R15) Get company code
         MVC   MSG476FN-MSG476(1,R1),0(R6)  Get field number
         LA    R0,MSG476L                 Get message length
         BAS   R9,SAVE_MESSAGE            Save message
PJC$A$FLB EQU  *
         LA    R3,4(R3)                   Locate to next pointer
         LA    R6,1(R6)                   Bump to next field value
         BCT   R4,PJC$A$FL                Process next company code
         TM    FLAGI1,$FLAGI1_C           Invalid company code?
         BO    PJC$ACCTX                  Forget about app code...
         L     R15,0(R3)                  Locate Application code
         BAS   R9,PJC$CHECK_APCODE        Check Application code
         LTR   R15,R15                    Okay?
         BNZ   PJC$ACCTX                  Yes, continue
         L     R15,0(R3)                  Locate Application code
         MVI   LASTCC,8                   Cancel this job...
         LA    R1,WORKMSG                 Locate work area
         MVC   0(MSG477L,R1),MSG477       Move in message
         MVC   MSG477AP-MSG477(3,R1),0(R15) Get application code
         MVC   MSG477CC-MSG477(1,R1),LCAJNAME Get company code
         LA    R0,MSG477L                 Get message length
         BAS   R9,SAVE_MESSAGE            Save message
         B     PJC$ACCTX                  Continue
PJC$A$NAF EQU  *
         LA    R0,MSG479L                 Get message length
         LA    R1,MSG479                  Get message address
         BAS   R9,SAVE_MESSAGE            Save message
         MVI   LASTCC,8                   Fail job because of it
         B     PJC$ACCTX
PJC$A$WNF EQU  *
         LA    R1,WORKMSG                 Locate work area
         MVC   0(MSG480L,R1),MSG480       Move in message
         MVC   MSG480F1-MSG480(1,R1),LCAJNAME Get company code
         MVC   MSG480F2-MSG480(1,R1),LCAJNAME Get company code
         MVC   MSG480F3-MSG480(1,R1),LCAJNAME Get company code
         LA    R0,MSG480L                 Get message length
         BAS   R9,SAVE_MESSAGE            Save message
         MVI   LASTCC,8                   Fail job because of it
         B     PJC$ACCTX
PJC$A$NJN EQU  *
         OI    FLAGI1,$FLAGI1_J           No jobname
         LA    R0,MSG481L                 Get message length
         LA    R1,MSG481                  Get message address
         BAS   R9,SAVE_MESSAGE            Save message
         MVI   LASTCC,8                   Fail job because of it
         B     PJC$ACCTX
PJC$A$IJS EQU *
         LA    R0,MSG482L                 Get message length
         LA    R1,MSG482                  Get message address
         BAS   R9,SAVE_MESSAGE            Save message
         B     PJC$ACCTX
*
PJC$ACCTX EQU *
*
** Validate the jobname
*
**
*B PJC$JNZX          TEMP CODE FOR EASY ZAPING !!!!!!!!!!!!!!!!
*DC CL8'JOBNAME '    TEMP CODE FOR EASY ZAPING !!!!!!!!!!!!!!!!
PJC$JNZX EQU *       TEMP CODE FOR EASY ZAPING !!!!!!!!!!!!!!!!
*NOP PJC$JNX         TEMP CODE FOR EASY ZAPING !!!!!!!!!!!!!!!!
**
         TM    FLAG1,$F1_PROD             Production jobname?
         BNO   PJC$JNX                    No, continue
         TM    FLAGI1,$FLAGI1_J           Have a jobname?
         BO    PJC$JNX                    No, continue
*
         LA    R15,LCAJNAME               Locate company code in jname
         BAS   R9,PJC$CHECK_CC            Verify company code
         LTR   R15,R15                    Valid?
         BNZ   PJC$JNCCX                  Yes, continue
         OI    FLAGI1,$FLAGI1_C           Invalid company code...
         MVI   LASTCC,8                   Cancel this job...
         LA    R1,WORKMSG                 Locate work area
         MVC   0(MSG484L,R1),MSG484       Move in message
         MVC   MSG484CC-MSG484(1,R1),LCAJNAME Get company code
         LA    R0,MSG484L                 Get message length
         BAS   R9,SAVE_MESSAGE            Save message
PJC$JNCCX EQU  *
*
         TM    FLAGI1,$FLAGI1_C           Invalid company code?
         BO    PJC$JNAPX                  Forget about app code...
         LA    R15,LCAJNAME+1             Locate Application code
         BAS   R9,PJC$CHECK_APCODE        Check Application code
         LTR   R15,R15                    Okay?
         BNZ   PJC$JNAPX                  Yes, continue
*->      MVI   LASTCC,8                   Cancel this job...
         OI    FLAG1,$F1_STND             Turn on flag
         LA    R1,WORKMSG                 Locate work area
         MVC   0(MSG485L,R1),MSG485       Move in message
         MVC   MSG485AP-MSG485(3,R1),LCAJNAME+1 Get application code
         MVC   MSG485CC-MSG485(1,R1),LCAJNAME Get company code
         LA    R0,MSG485L                 Get message length
         BAS   R9,SAVE_MESSAGE            Save message
PJC$JNAPX EQU  *
*
* Note: I *ASSUME* that the user can't submit a job with a character
*       that is above X'F9' with the following logic...
         CLI   LCAJNAME+4,C'0'            Valid number?
         BL    PJC$JNNE                   No, continue
         CLI   LCAJNAME+5,C'0'            Valid number?
         BL    PJC$JNNE                   No, continue
         CLI   LCAJNAME+6,C'0'            Valid number?
         BNL   PJC$JNNX                   No, continue
PJC$JNNE DS    0H
*->      MVI   LASTCC,8                   Cancel this job...
         OI    FLAG1,$F1_STND             Turn on flag
         LA    R1,WORKMSG                 Locate work area
         MVC   0(MSG486L,R1),MSG486       Move in message
         MVC   MSG486AN-MSG486(3,R1),LCAJNAME+4 Get app number
         LA    R0,MSG486L                 Get message length
         BAS   R9,SAVE_MESSAGE            Save message
PJC$JNNX DS    0H
*
         LA    R0,TABLE#FQ                Number in table
         L     R1,=V(XYZJ2#06)            Locate CSECT
         LA    R1,TABLE_FQ-XYZJ2#06(R1)   Locate table in CSECT
PJC$JNFL DS    0H
         CLC   LCAJNAME+7(1),J2X06FQ_VALUE-J2X06FQ(R1)
         BE    PJC$JNX                    Yes, continue
         LA    R1,J2X06FQL(R1)            Bump to next entry
         BCT   R0,PJC$JNFL                And process it
         OI    FLAG1,$F1_STND             Turn on flag
*->      MVI   LASTCC,8                   Cancel this job...
         LA    R1,WORKMSG                 Locate work area
         MVC   0(MSG487L,R1),MSG487       Move in message
         MVC   MSG487F-MSG487(1,R1),LCAJNAME+7 Get frequency
         L     R14,=V(XYZJ2#06)           Locate CSECT
         LA    R14,TABLE_FQ-XYZJ2#06(R14) Locate to table
         LA    R15,MSG487L+1(R1)          Locate to output area
         LA    R0,TABLE#FQ                Get number to move
PJC$JNML DS    0H
         MVC   0(1,R15),J2X06FQ_VALUE-J2X06FQ(R14)  Get frequency
         MVI   L'J2X06FQ_VALUE(R15),C','  Get delimiter
         LA    R15,L'J2X06FQ_VALUE+1(R15) Bump to next output location
         LA    R14,J2X06FQL(R14)          Bump to next input table ent.
         BCT   R0,PJC$JNML                Process next table entry
         BCTR  R15,0                      Backup one on output
         MVI   0(R15),C' '                Rub out trailing comma
         LA    R0,MSG487L+1+(TABLE#FQ*2)  Get message length
         BAS   R9,SAVE_MESSAGE            Save message
PJC$JNX  DS    0H
*
** Obtain JOB execution class
*
PJC$CLS  DS    0H
         LA    R0,CLASSJK                 Setup to find "CLASS="
         LA    R1,STRJKEY                 First key sequence
        $CALL  XINTKEY,ERRET=PJC$CLSE     Find keyword
         SLR   R15,R15                    Clear register
         ICM   R15,B'0001',2(R1)          Get length of job class
         BZ    PJC$CLSE                   None, continue
         MVC   LCA_CLS(1),3(R1)           Save job class for later
         CLI   LCA_CLS,0                  Specified?
         BE    PJC$CLSE                   No, continue
*
         L     R14,=V(XYZJ2#06)           Locate to table CSECT
         LA    R14,TABLE_JC-XYZJ2#06(R14) Locate rules table
         LA    R15,TABLE#JC               Set number in table
PJC$CLSL DS    0H
         CLC   J2X06JC_CLASS-J2X06JC(1,R14),LCA_CLS Class Match?
         BE    PJC$CLSM                   Yes, continue
         LA    R14,J2X06JCL(R14)          Bump to next table entry
         BCT   R15,PJC$CLSL               Continue HIS ENTRY
*
         LA    R0,MSG464L                 Get message length
         LA    R1,WORKMSG                 Get message address
         MVC   0(MSG464L,R1),MSG464       Initialize message area
         MVC   MSG464C-MSG464(1,R1),LCA_CLS Get offending job class
         BAS   R9,SAVE_MESSAGE            Save message
         MVI   LASTCC,8                   Set maximum condition code
         XC    LCA_CLSR(J2X06JCL),LCA_CLSR Ensure entry is zeroed out
         B     PJC$CLSX
*
PJC$CLSM DS    0H
         MVC   LCA_CLSR(J2X06JCL),0(R14)  Save winning entry
*
         CLI   LCA_CLS,C'0'               Non-numeric?
         BL    PJC$CLSN                   Yes, continue
         CLC   LCAJNAME(4),=C'SCIS'       CIS-type jobname?
         BE    PJC$CLSN                   Yes, continue
         TM    FLAG1,$F1_PROD             Production jobname?
         BO    PJC$CLSN                   Yes, continue
PJC$CLSP DS    0H
         LA    R0,MSG463L                 Get message length
         LA    R1,MSG463                  Get message address
         BAS   R9,SAVE_MESSAGE            Save message
         MVI   LASTCC,8                   Set maximum condition code
PJC$CLSN DS    0H
         TM    FLAG1,$F1_DBUG             Debugging information?
         BNO   PJC$CLSX                   No, bump past message
         LA    R1,WORKMSG                 Locate work message
         MVC   0(MSG467L,R1),MSG467       Move in message prefix
         LA    R15,LCA_CLSR               Locate class rules
         MVC   MSG467C-MSG467(1,R1),J2X06JC_CLASS-J2X06JC(R15)
         MVC   MSG467T-MSG467(1,R1),J2X06JC_TAPE-J2X06JC(R15)
         MVC   MSG467TM-MSG467(6,R1),J2X06JC_TIMEM-J2X06JC(R15)
         MVC   MSG467TS-MSG467(2,R1),J2X06JC_TIMES-J2X06JC(R15)
         LA    R0,MSG467L                 Get length
         BAS   R9,SAVE_MESSAGE            Move message out to CNMB
         B     PJC$CLSX                   Continue
*
PJC$CLSE DS    0H
         LA    R0,MSG462L                 Get message length
         LA    R1,MSG462                  Get message address
         BAS   R9,SAVE_MESSAGE            Save message
         MVI   LASTCC,8                   Set maximum condition code
         XC    LCA_CLSR(J2X06JCL),LCA_CLSR Ensure entry is zeroed out
PJC$CLSX DS    0H
*
** Locate TIME= (if on jobcard)
**
** TIME=(1,30)  translates to: A90201F102F3F0
** TIME=(,30)   translates to: A9020002F3F0
** TIME=1439    translates to: A90104F1F4F3F9
** TIME=1440    translates to: A90104F1F4F3F9
** TIME=NOLIMIT translates to: A90107D5D6D3C9D4C9E3
** TIME=MAXIMUM translates to: A90107D4C1E7C9D4E4D4
*
PJC$TIME DS    0H
         LA    R0,TIMEJK                  Setup to find "TIME="
         LA    R1,STRJKEY                 First key sequence
        $CALL  XINTKEY,ERRET=PJC$TIMEX    Find keyword
         LR    R7,R1                      Save start of original unit
         OI    FLAGI1,$FLAGI1_T           We have a TIME= on job card
*
         CLI   1(R7),X'01'                One parm?
         BNE   PJC$TIME_MAXX              No, continue
         CLI   2(R7),X'07'                Length is 7?
         BNE   PJC$TIME_MAXX              No, continue
         CLC   3(7,R7),=C'MAXIMUM'        Is it "TIME=MAXIMUM"?
         BE    PJC$TIME_MAXF              Yep
         CLC   3(7,R7),=C'NOLIMIT'        Is it "TIME=NOLIMIT"?
         BNE   PJC$TIME_MAXX              No, continue
PJC$TIME_MAXF  EQU *
         MVI   LASTCC,8                   Set CC to cancel job
         LA    R0,MSG469L                 Get message length
         LA    R1,MSG469                  Get message address
         MVC   MSG469V-MSG469(7,R1),3(R7) Move in value
         BAS   R9,SAVE_MESSAGE            Save message
         B     PJC$TIMEX                  Bump past numeric checks
PJC$TIME_MAXX  EQU *
*
         MVC   PJC_TM(6),=C'000000'       Initialize minutes
         MVC   PJC_TS(2),=C'00'           Initialize seconds
         CLC   1(2,R7),=X'02,00'          Only seconds, no minutes?
         BE    PJC$TCSS                   Yes, skip to seconds
         CLI   2(R7),X'06'                Length of minutes = 4?
         BNE   PJC$TCM5                   No, continue
         MVC   PJC_TM(6),3(R7)            Get minutes
         B     PJC$TCSS                   and then get seconds
PJC$TCM5 DS    0H
         CLI   2(R7),X'05'                Length of minutes = 4?
         BNE   PJC$TCM4                   No, continue
         MVC   PJC_TM+1(5),3(R7)          Get minutes
         B     PJC$TCSS                   and then get seconds
PJC$TCM4 DS    0H
         CLI   2(R7),X'04'                Length of minutes = 4?
         BNE   PJC$TCM3                   No, continue
         MVC   PJC_TM+2(4),3(R7)          Get minutes
         B     PJC$TCSS                   and then get seconds
PJC$TCM3 DS    0H
         CLI   2(R7),X'03'                Length of minutes = 3?
         BNE   PJC$TCM2                   No, continue
         MVC   PJC_TM+3(3),3(R7)          Get minutes
         B     PJC$TCSS                   and then get seconds
PJC$TCM2 DS    0H
         CLI   2(R7),X'02'                Length of minutes = 2?
         BNE   PJC$TCM1                   No, continue
         MVC   PJC_TM+4(2),3(R7)          Get minutes
         B     PJC$TCSS                   and then get seconds
PJC$TCM1 DS    0H
         CLI   2(R7),X'01'                Length of minute = 1?
         BNE   PJC$TCSS                   No, continue
         MVC   PJC_TM+5(1),3(R7)          Get minute
*
PJC$TCSS DS    0H
         CLI   1(R7),X'01'                Any seconds? (One subparm)
         BE    PJC$TCSX                   No, skip
         CLI   1(R7),X'02'                Looks right? (Two Subparms)
         BNE   PJC$TCSX                   No, skip
         SLR   R1,R1                      Clear register
         IC    R1,2(R7)                   Get length of hours
         LA    R15,3(R7)                  Locate to start of hours
         AR    R15,R1                     Locate past hours
         CLI   0(R15),X'02'               Length of seconds is 2?
         BNE   PJC$TCS1                   No, continue
         MVC   PJC_TS(2),1(R15)           Get seconds
         B     PJC$TCSX
PJC$TCS1 DS    0H
         CLI   0(R15),X'01'               Length of seconds is 2?
         BNE   PJC$TCSX                   No, continue
         MVC   PJC_TS+1(1),1(R15)         Get second
PJC$TCSX DS    0H
**
*B PJC$TCZAPX        TEMP CODE FOR EASY ZAPING !!!!!!!!!!!!!!!!
*DC CL8'TIMECHK '    TEMP CODE FOR EASY ZAPING !!!!!!!!!!!!!!!!
PJC$TCZAPX EQU *     TEMP CODE FOR EASY ZAPING !!!!!!!!!!!!!!!!
*NOP PJC$TCX         TEMP CODE FOR EASY ZAPING !!!!!!!!!!!!!!!!
**
* Note: We grab minutes and seconds on everybody (regardless of CPU
*       checking for class) to detect TIME=1440 usage
         CLC   LCA_CLSR+J2X06JC_TIMEM-J2X06JC(6),=6C'*' Unlimited CPU?
         BE    PJC$TCX                    Yes, don'd need to verify
         CLC   LCA_CLSR+J2X06JC_TIMEM-J2X06JC(6),=6C' ' Production?
         BE    PJC$TCX                    No, continue
         CLC   PJC_TM(6),LCA_CLSR+J2X06JC_TIMEM-J2X06JC Minutes okay?
         BE    PJC$TCS                             Yes, check seconds
         CLC   PJC_TM(6),LCA_CLSR+J2X06JC_TIMEM-J2X06JC Minutes okay?
         BL    PJC$TCX                             No, error
*
PJC$TCE  DS    0H
         MVI   LASTCC,8                   Cancel this job...
         LA    R1,WORKMSG                 Locate work area
         MVC   0(MSG470L,R1),MSG470       Move in message
         MVC   MSG470JM-MSG470(6,R1),PJC_TM Get minutes
         MVC   MSG470JS-MSG470(2,R1),PJC_TS Get seconds
         LA    R15,LCA_CLSR               Locate class entry
         MVC   MSG470CM-MSG470(6,R1),J2X06JC_TIMEM-J2X06JC(R15)
         MVC   MSG470CS-MSG470(2,R1),J2X06JC_TIMES-J2X06JC(R15)
         MVC   MSG470C-MSG470(1,R1),J2X06JC_CLASS-J2X06JC(R15)
         LA    R0,MSG470L                 Get message length
         BAS   R9,SAVE_MESSAGE            Save message
         B     PJC$ITIMEX
*
PJC$TCS  DS    0H
         CLC   PJC_TS(2),LCA_CLSR+J2X06JC_TIMES-J2X06JC Seconds okay?
         BH    PJC$TCE
*
PJC$TCX  DS    0H
         CLC   PJC_TM(6),=C'001440'       Special not-timed value?
         BNE   PJC$TIME_1440X             No, continue
         CLC   PJC_TS(2),=C'00'           Still special?
         BNE   PJC$TIME_1440X             No, continue
         CLI   2(R7),X'06'                Length is 6?
         BNE   PJC$TIME_1440$6X           No, continue
         MVC   3+4(2,R7),=C'39'           Yes, make "001440" "001439"
         B     PJC$TIME_1440M             And issue message
PJC$TIME_1440$6X EQU *
         CLI   2(R7),X'05'                Length is 5?
         BNE   PJC$TIME_1440$5X           No, continue
         MVC   3+3(2,R7),=C'39'           Yes, make "01440" "01439"
         B     PJC$TIME_1440M             And issue message
PJC$TIME_1440$5X EQU *
         CLI   2(R7),X'04'                Length is 4?
         BNE   PJC$TIME_1440X             No, continue
         MVC   3+2(2,R7),=C'39'           Yes, make "1440" "1439"
PJC$TIME_1440M EQU *
         LA    R0,MSG461L                 Get message length
         LA    R1,MSG461                  Get message address
         BAS   R9,SAVE_MESSAGE            Save message
PJC$TIME_1440X EQU *
PJC$TIMEX EQU  *
*
** Insert TIME parameter into Text unit area for jobs which do not
** specify it on the jobcard
*
         TM    FLAGI1,$FLAGI1_T           We had a TIME= on job card?
         BO    PJC$ITIMEX                 Yes, leave
         CLC   LCA_CLSR+J2X06JC_TIMEM-J2X06JC(6),=6C' ' Production?
         BE    PJC$ITIMEX                 Yes, don't fill it in
         SLR   R1,R1                      Clear register
         ICM   R1,B'0011',STRLTH          Get length of text
         LR    R15,R2                     Locate beginning of text
         AR    R15,R1                     Locate end of text area
         BCTR  R15,0                      Backup to locate ENDK
         CLI   0(R15),ENDK                Did we find it?
         BE    PJC$IT_ES                  Yes, continue
         LA    R0,MSG471L                 Get message length
         LA    R1,MSG471                  Get message address
         BAS   R9,SAVE_MESSAGE            Save message
         B     PJC$ITIMEX                 Leave
PJC$IT_ES EQU *
         MVC   0(C_TIMEL,R15),C_TIME      Move in model time text unit
         CLC   LCA_CLSR+J2X06JC_TIMEM-J2X06JC(6),=6C'*' Unlimited CPU?
         BE    PJC$IT_FX                  Yes, use default time
         LA    R14,LCA_CLSR               Locate class entry
         MVC   C_TIMEM-C_TIME(6,R15),J2X06JC_TIMEM-J2X06JC(R14)
         MVC   C_TIMES-C_TIME(2,R15),J2X06JC_TIMES-J2X06JC(R14)
PJC$IT_FX EQU *
         MVI   C_TIMEL(R15),ENDK          Move in new ENDK
         AH    R1,=AL2(C_TIMEL)           Add new text unit length
         STCM  R1,B'0011',STRLTH          Save new length
PJC$ITIMEX EQU *
*
** Normal Exit from Process_Job_Card processing
*
PJC$X    DS    0H
         ICM   R1,B'1111',PJC_TBL         Get address of table
         BZ    PJC$XX                     Didn't loaded it...
         LA    R6,=CL8'APPLTBL'           Locate module name
         DELETE EPLOC=(6)                 Delete the module
PJC$XX   DS    0H
         B     EXIT
*
** Validate Application code passed in register 15
** -> Return 0 in R15 if the Application code isn't valid
*
PJC$CHECK_APCODE EQU *
         ICM   R1,B'1111',PJC_TBL         Get address of appl table
         BZ    PJC$CAX                    None, have to think its good
         SLR   R14,R14                    Clear register
         IC    R14,LCAJNAME               Get company code from field
         SLL   R14,2                      Multiply by 4
         LA    R14,0(R14,R1)              Locate to company appl ptr
         ICM   R1,B'1111',0(R14)          Get appl list address
         BZ    PJC$CAE                    Okay, valid company
PJC$CAL  DS    0H
         CLC   0(3,R15),0(R1)             Code correct?
         BE    PJC$CAX                    Yes, leave
         LA    R1,3(R1)                   No, bump to next one
         CLI   0(R1),X'FF'                End of table yet?
         BNE   PJC$CAL                    Yes, leave
PJC$CAE  DS    0H
         SLR   R15,R15                    Set return code to error
PJC$CAX  DS    0H
         BSM   0,R9                       Return to caller
*
** Validate Company Code passed in register 15
** -> Return 0 in R15 if the company code isn't valid
*
PJC$CHECK_CC EQU *
         ICM   R1,B'1111',PJC_TBL         Get address of appl table
         BZ    PJC$CCCX                   None, have to say its good
         SLR   R14,R14                    Clear register
         IC    R14,0(R15)                 Get company code from field
         SLL   R14,2                      Multiply by 4
         LA    R14,0(R14,R1)              Locate to company appl ptr
         ICM   R1,B'1111',0(R14)          Get appl list address
         BNZ   PJC$CCCX                   Okay, valid company
         SLR   R15,R15                    Set return code to error
PJC$CCCX DS    0H
         BSM   0,R9                       Return to caller
         EJECT
***********************************************************************
***                                                                 ***
**       Process a DD Statement                                      **
**                                                                   **
**       Note: Put all code that is used for determining if a        **
**             tape is used in a non-tape class between labels       **
**             PDS$TAPE and PDS$TAPEX.                               **
***                                                                 ***
***********************************************************************
         SPACE 2
PROCESS_DD_STATEMENT EQU *
*
** Look at the DDNAME:
**
** - Detect usage of SYSMDUMP to SYSOUT.  Sometimes users mistakenly
**   use SYSMDUMP when they mean SYSUDUMP.  Putting SYSMDUMP to SYSOUT
**   puts a meaningless string of garbage to SYSOUT.  SYSMDUMP should
**   be put to a disk dataset.  It is only useful when read by IPCS.
**
** - Detect usage of obsolete DDNAMEs
**
**                           0 1 2 3 4 5 6 7 8 9
**                           TU##llS T E P C A T
** //STEPCAT translates into 6E0107E2E3C5D7C3C1E3
*
         LA    R0,DDK                     Get DD value
         LA    R1,STRDKEY                 Locate text
        $CALL  XINTKEY,ERRET=PDS$DDX      Locate key
         LR    R3,R1                      Save address of text unit
*
         CLI   1(R3),1                    Number of DDNAMES looks ok?
         BNE   PDS$DDX                    Nope, move on
*
         CLI   2(R3),8                    Length for our value?
         BNE   PDS$DD8X                   No, continue
         CLC   3(8,R3),=C'SYSMDUMP'       DD=SYSMDUMP?
         BNE   PDS$DD8X                   No, continue
         TM    STRDINDC,DTXSYOUT          SYSOUT?
         BNO   PDS$DDX                    No, continue
         LA    R0,MSG489L                 Get message length
         LA    R1,MSG489                  Get message address
         BAS   R9,SAVE_MESSAGE            Save message
         MVI   3+3(R3),C'U'               Change SYSMDUMP to SYSUDUMP
         B     PDS$X                      Leave
PDS$DD8X DS    0H
*
         CLI   2(R3),6                    Length for our value?
         BNE   PDS$DD6X                   No, continue
         CLC   3(6,R3),=C'JOBCAT'         Using Stepcat?
         BE    PDS$DDE                    Yes, gripe about it
PDS$DD6X DS    0H
         CLI   2(R3),7                    Length for our value?
         BNE   PDS$DD7X                   No, continue
         CLC   3(7,R3),=C'STEPCAT'        Using Stepcat?
         BE    PDS$DDE                    Yes, gripe about it
PDS$DD7X DS    0H
         B     PDS$DDX                    Continue
PDS$DDEM MVC   MSG472L(0,R1),3(R3)        Executed: move ddname to msg
PDS$DDE  EQU *
         OI    FLAG1,$F1_ASMP             Turn on flag
         LA    R1,WORKMSG                 Locate work area
         LA    R0,MSG472L                 Get message length
         MVC   0(MSG472L,R1),MSG472       Move in message
         SLR   R15,R15                    Clear register
         IC    R15,2(R3)                  Get length of DDNAME
         AR    R0,R15                     Set new message length
         SH    R15,=H'1'                  Decrement for EX
         EX    R15,PDS$DDEM               Move DDNAME to message
         LR    R14,R1                     Locate start of message
         AR    R14,R0                     Locate end of message
         MVC   0(L'MSG472PR,R14),MSG472PR Tack on ", Please Remove"
         AH    R0,=AL2(L'MSG472PR)        Add length of tacked on stuff
         BAS   R9,SAVE_MESSAGE            Save message
PDS$DDX  DS    0H
*
** Leave if the DD card is for SYSIN/SYSOUT and we are not debugging
*
         TM    FLAG1,$F1_DBUG             Debugging information?
         BO    PDS$DBCX                   Yes, process to get DSName
         TM    STRDINDC,DTXSYSIN          SYSIN?
         BO    PDS$X                      Yes, Skip this DD card
         TM    STRDINDC,DTXSYOUT          SYSOUT?
         BO    PDS$X                      Yes, Skip this DD card
PDS$DBCX DS    0H
*
** Locate the Dataset name
*
         MVI   WORKDSN,0                  Zero DSNAME for checks
         LA    R0,DSNAMEK                 Get DSN= value
         LA    R1,STRDKEY                 Locate text
        $CALL  XINTKEY,ERRET=PDS$DSNE     Locate key
         MVI   WORKDSN,C' '               Get space
         MVC   WORKDSN+1(L'WORKDSN-1),WORKDSN Propagate it
         LR    R3,R1                      Save address of text unit
         SLR   R15,R15                    Clear register
         ICM   R15,B'0001',2(R3)          Get DSN length
         BZ    PDS$DSNX                   None?
         BNM   PDS$DSN$STD                Standard Dataset?
         CLI   4(R3),C'*'                 Refer back?
         BE    PDS$X                      Yes, skip this Dataset...
*
         LA    R3,3(R3)                   Bump past part stuff
         SLR   R14,R14                    Clear register
         IC    R14,0(R3)                  Get length of first part
         LA    R0,44                      Check for maximum
         CR    R14,R0                     In guide lines?
         BL    PDS$DSN$NSM                Yes, use actual length
         LR    R14,R0                     No, truncate to 44
PDS$DSN$NSM EQU *
         BCTR  R14,0                      Decrement by 1
         EX    R14,PDS$DSNN               Move dataset name out
         LA    R14,1(R14)                 Increment for real length
         ST    R14,WORKDSNL               Save length
         LA    R15,WORKDSN                Locate work dataset name
         AR    R15,R14                    Locate to end
         MVI   0(R15),C'('                Insert open paren.
         LA    R15,1(R15)                 Bump past it
*
         LA    R3,1(R14,R3)               Point to start of 2nd part
         SLR   R14,R14                    Clear register
         ICM   R14,B'0001',0(R3)          Get length of part
         LA    R0,8                       Check for maximum
         CR    R14,R0                     In guide lines?
         BL    PDS$DSN2                   Yes, use actual length
         LR    R14,R0                     No, truncate to 44
PDS$DSN2 DS    0H
         BCTR  R14,0                      Decrement by 1
         EX    R14,PDS$DSNO               Move gdg/member out
         LA    R15,1(R14,R15)             Bump past it
         MVI   0(R15),C')'                Move in ending paren.
         LA    R15,1(R15)                 bump past it
         LA    R1,WORKDSN                 Locate start
         SR    R15,R1                     Calculate length: end-start
         ST    R15,WORKDSNL               Save new length of DSN
         B     PDS$DSNK
*
PDS$DSN$STD EQU *                         << Standard (1 part) dsn >>
         CLC   3(8,R3),=CL8'NULLFILE'     Nullfile?
         BE    PDS$DSNX                   Yes, skip...
         LA    R0,44                      Check for maximum
         CR    R15,R0                     In guide lines?
         BL    PDS$DSN$STDM               Yes, use actual length
         LR    R15,R0                     No, truncate to 44
PDS$DSN$STDM EQU *
         BCTR  R15,0                      Decrement by 1
         EX    R15,PDS$DSNM               Move dataset name out
         LA    R15,1(R15)                 Increment for real length
         ST    R15,WORKDSNL               Save length
*
PDS$DSNK DS    0H                         << Print DSNAME for Debug >>
         TM    FLAG1,$F1_DBUG             Debugging information?
         BNO   PDS$DSNX                   No, bump past message
         LA    R1,WORKMSG                 Locate work message
         MVC   0(MSG466L,R1),MSG466       Move in message prefix
         L     R14,WORKDSNL               Get length of DSNAME
         BCTR  R14,0                      Decrement for EX
         EX    R14,PDS$DSNP               Move dsn to message area
         LA    R14,MSG466L+1(R14)         Add length of message
         LR    R0,R14                     Get length
         BAS   R9,SAVE_MESSAGE            Move message out to CNMB
         B     PDS$DSNX                   Continue
*
PDS$DSNE DS    0H                         << No dataset found >>
         TM    FLAG1,$F1_DBUG             Debugging information?
         BNO   PDS$DSNX                   No, bump past message
         LA    R0,MSG465L                 Get message length
         LA    R1,MSG465                  Get message address
         BAS   R9,SAVE_MESSAGE            Save message
PDS$DSNX DS    0H
*
** Detect usage of DCB after create of dataset.  This is done to alert
** the user that he could destroy his dataset by writting over it with
** different DCB values than when he/she created it.
**
**                               0 1 2 3 4 5
**                               TU##llS H R
** DISP=SHR      translates into 460103E2C8D9
** DISP=(,CATLG) translates into 46020005C3C1E3D3C7
*
**
*B PDS$DCBCZX        TEMP CODE FOR EASY ZAPING !!!!!!!!!!!!!!!!
*DC CL8'DCBCHK  '    TEMP CODE FOR EASY ZAPING !!!!!!!!!!!!!!!!
PDS$DCBCZX EQU *     TEMP CODE FOR EASY ZAPING !!!!!!!!!!!!!!!!
*NOP PDS$DCBCX       TEMP CODE FOR EASY ZAPING !!!!!!!!!!!!!!!!
**
         LA    R0,DISPK                   Get DISP= value
         LA    R1,STRDKEY                 Locate text
        $CALL  XINTKEY,ERRET=PDS$DCBCX    Locate key
         LR    R3,R1                      Save address of text unit
*
         CLI   2(R3),3                    Length of Status ok?
         BNE   PDS$DCBCX                  No, probably not coded
         CLC   3(3,R3),=C'NEW'            DISP=NEW?
         BE    PDS$DCBCX                  Yes, skip checks
         CLC   3(3,R3),=C'MOD'            DISP=MOD?
         BNE   PDS$DCBMODX                Yes, skip checks
         CLI   WORKDSN,C'&&'              Temporary Dataset?
         BE    PDS$DCBCX                  Yes, let him do anything!
         MVC   LCAPARM(C_LOCATEL),C_LOCATE Initialize parm list
         LA    R1,WORKDSN                 Locate the Data Set Name
         ST    R1,LCAPARM+4               Save into parmeter list
         LA    R1,W_CAMLST                Locate the work area
         ST    R1,LCAPARM+12              Save into parmeter list
         LOCATE LCAPARM                   Get catalog information
         LTR   R15,R15                    Catalogued?
         BNZ   PDS$DCBCX                  No, not found, okay to mod
PDS$DCBMODX EQU *
*
         LA    R0,LRECLMK                 Get LRECL= value
         LA    R1,STRDKEY                 Locate text
        $CALL  XINTKEY,ERRET=PDS$DCBC$LX  Locate key
         OI    FLAGI1,$FLAGI1_D           We have a DCB field!
PDS$DCBC$LX EQU *
         LA    R0,BLKSIZMK                Get BLKSIZE= value
         LA    R1,STRDKEY                 Locate text
        $CALL  XINTKEY,ERRET=PDS$DCBC$BX  Locate key
         OI    FLAGI1,$FLAGI1_D           We have a DCB field!
PDS$DCBC$BX EQU *
         LA    R0,RECFMMK                 Get RECFM= value
         LA    R1,STRDKEY                 Locate text
        $CALL  XINTKEY,ERRET=PDS$DCBC$RX  Locate key
         OI    FLAGI1,$FLAGI1_D           We have a DCB field!
PDS$DCBC$RX EQU *
*
         TM    FLAGI1,$FLAGI1_D           We have a DCB field?
         BNO   PDS$DCBCX                  No continue...
         LA    R0,LABELK                  Get Label= value
         LA    R1,STRDKEY                 Locate text
        $CALL  XINTKEY,ERRET=PDS$DCBC$LTX Locate key
         LR    R3,R1                      Save address of text unit
         CLI   1(R3),X'02'                Enough operands there?
         BL    PDS$DCBC$LTX               No, assume standard labels
         SLR   R1,R1                      Clear register
         IC    R1,2(R3)                   Get length of file number
         LA    R14,3(R3)                  Bump to start of file number
         AR    R14,R1                     Bump past file number
         CLC   1(2,R14),=C'NL'            Non-Labeled tape?
         BE    PDS$DCBCX                  Yes, we NEED DCB info!!!!
         CLC   1(3,R14),=C'BLP'           Bypass Labels?
         BE    PDS$DCBCX                  Yes, foriegn tape...
PDS$DCBC$LTX EQU *
         LA    R0,MSG473L                 Get message length
         LA    R1,MSG473                  Get message address
         BAS   R9,SAVE_MESSAGE            Save message
PDS$DCBCX EQU  *
*
** Detect usage of AS./ datasets in production job class
*
**
*B PDS$ASDSNZX       TEMP CODE FOR EASY ZAPING !!!!!!!!!!!!!!!!
*DC CL8'ASDSN   '    TEMP CODE FOR EASY ZAPING !!!!!!!!!!!!!!!!
PDS$ASDSNZX EQU *    TEMP CODE FOR EASY ZAPING !!!!!!!!!!!!!!!!
*NOP PDS$ASDSNX      TEMP CODE FOR EASY ZAPING !!!!!!!!!!!!!!!!
**
         TM    FLAG1,$F1_PROD             Production jobname?
         BNO   PDS$ASDSNX                 No continue...
         CLC   WORKDSN(3),=C'AS.'         Is this an DSN=AS./
         BNE   PDS$ASDSNX                 No, continue
         OI    FLAG1,$F1_ASMP             Turn on flag
         LA    R0,MSG474L                 Get message length
         LA    R1,MSG474                  Get message address
         BAS   R9,SAVE_MESSAGE            Save message
PDS$ASDSNX EQU *
*
** Only need tape checking if the job class forbids it's usage
*
         CLI   LCA_CLSR+J2X06JC_TAPE-J2X06JC,$J2X06JC_TAPEY Tapes ok?
         BE    PDS$TAPEX                  Yes, skip tape checking
PDS$TAPE EQU  *                           << Start of tape checking >>
*
** See if the unit name is for a tape device
*
         LA    R0,UNITK                   Get UNIT= value
         LA    R1,STRDKEY                 Locate text
        $CALL  XINTKEY,ERRET=PDS$UNITX    Locate key
         LR    R3,R1                      Save address of text unit
*
         SLR   R15,R15                    Clear register
         ICM   R15,B'0001',2(R3)          Get length of unitname
         BZ    PDS$UNITX                  None?
         BCTR  R15,0                      Decrement for EX
         MVC   DOUBLE(8),=CL8' '          Get some trailing blanks
         EX    R15,PDS$UM                 Move unit name to work area
*
         L     R1,=V(XYZJ2#06)            Locate CSECT
         LA    R1,TABLE_TU-XYZJ2#06(R1)   Locate tape table
         LA    R0,TABLE#TU                Get number in table
PDS$UNITL EQU  *
         CLC   DOUBLE(8),0(R1)            Unit name match?
         BE    PDS$UNITE                  Mr Bill says "Oh Noooooo"
         LA    R1,8(R1)                   Bump to next entry
         BCT   R0,PDS$UNITL               ..and process it
         B     PDS$UNITX                  Passed the UNIT check
*
PDS$UNITE EQU *
         MVI   LASTCC,8                   Set CC to cancel job
         LA    R1,WORKMSG                 Locate work message
         MVC   0(MSG468L,R1),MSG468       Move in message prefix
         MVC   MSG468C-MSG468(1,R1),LCA_CLS Get job class
         MVC   MSG468L(5,R1),=C'UNIT='    Move in reason type
         MVC   MSG468L+5(8,R1),DOUBLE     Move offending unit name
         LA    R0,MSG468L+5+8             Get length
         BAS   R9,SAVE_MESSAGE            Move message out to CNMB
PDS$UNITX EQU *
*
** Perform locate on Tape dataset
*
PDS$DSNV DS    0H                         << Locate in tape DSNs >>
         MVC   LCAPARM(C_LOCATEL),C_LOCATE Initialize parm list
         LA    R1,WORKDSN                 Locate the Data Set Name
         ST    R1,LCAPARM+4               Save into parmeter list
         LA    R1,W_CAMLST                Locate the work area
         ST    R1,LCAPARM+12              Save into parmeter list
         LOCATE LCAPARM                   Get catalog information
         LTR   R15,R15                    Catalogued?
         BZ    PDS$DSNV$CHK               Yes, check it out
         TM    FLAGI1,$FLAGI1_G           Already did GDG test?
         BO    PDS$DSNV$CHKX              Yes, give up
         CH    R15,=H'8'                  Possible GDG?
         BNE   PDS$DSNV$CHKX              No, continue
         LTR   R0,R0                      Still think so?
         BNZ   PDS$DSNV$CHKX              No, continue
         OI    FLAGI1,$FLAGI1_G           Let's try for a GDG
         LA    R15,WORKDSN                Locate DSNAME
         A     R15,WORKDSNL               Locate end of DSNAME
         MVC   0(3,R15),=C'(0)'           Create a GDG name
         B     PDS$DSNV                   Retry LOCATE with GDG
PDS$DSNV$CHK EQU *
         CLI   W_CAMLST+CLA_UT3-CLA,X'80' TAPE dataset?
         BNE   PDS$DSNV$CHKX              No, continue
         MVI   LASTCC,8                   Set CC to cancel job
         LA    R1,WORKMSG                 Locate work message
         MVC   0(MSG468L,R1),MSG468       Move in message prefix
         MVC   MSG468C-MSG468(1,R1),LCA_CLS Get job class
         MVC   MSG468L(11,R1),=C'DSN OPERAND' Get reason type
         LA    R0,MSG468L+11              Get length
         BAS   R9,SAVE_MESSAGE            Move message out to CNMB
PDS$DSNV$CHKX  EQU *
PDS$TAPEX EQU  *                          << End of tape checking >>
*
** Normal Exit from Process_DD_Statement processing
*
PDS$X    DS    0H
         B     EXIT
*
** Executed instructions
*
PDS$DSNM MVC   WORKDSN(0),3(R3)
PDS$DSNN MVC   WORKDSN(0),1(R3)
PDS$DSNO MVC   0(0,R15),1(R3)
PDS$DSNP MVC   MSG466L(0,R1),WORKDSN
PDS$UM   MVC   DOUBLE(0),3(R3)            Move in truncated unit
         EJECT
***********************************************************************
***                                                                 ***
**       Process a EXEC statement                                    **
***                                                                 ***
***********************************************************************
         SPACE 2
PROCESS_EXEC_STATEMENT EQU *
*
** Normal Exit from Process_EXEC_Statement processing
*
PES$X    DS    0H
         B     EXIT
         EJECT
***********************************************************************
***                                                                 ***
** Pass message back to the C/I to be placed into the JCLMSG dataset **
** via the CNMB control block. The CNMB will be freed by C/I.        **
**                                                                   **
** Input: R0 has length of the message                               **
**        R1 has address of the message                              **
***                                                                 ***
***********************************************************************
         SPACE 2
SAVE_MESSAGE EQU *
         STM   R0,R1,DOUBLE               Save msg length and address
*
       GETMAIN RU,                        Obtain storage for CNMB      @
               SP=SM$SUBP,                ..SubPool                    @
               LV=SM$CNMBL,               ..Length                     @
               LOC=BELOW                  ..Must be below the line
*
         XC    0(SM$CNMBL,R1),0(R1)       Clear CNMB to binary zeros
         MVC   CNMBID-CNMB(4,R1),=AL4(CNMBCID)  Move in "CNMB"
         MVI   CNMBVER-CNMB(R1),CNMBCVER  Get the version
         MVI   CNMBSUBP-CNMB(R1),SM$SUBP  Set subpool
         LA    R0,SM$CNMBL                Get CNMB buffer length
         STH   R0,CNMBLEN-CNMB(R1)        Set length and save
         LM    R14,R15,DOUBLE             Get length and address
         STC   R14,CNMBMLEN-CNMB(R1)      Set length
         BCTR  R14,0                      Decrement by 1
         EX    R14,SM$MOVE                Move message out
*
         ICM   R15,B'1111',A_CNMB         First time?
         BNZ   SM$SFX                     No, continue
         L     R14,A_PARM                 Locate parameter list
         ST    R1,DCNVCNMB-DCNVPARM(R14)  Save pointer to first
         B     SM$X
SM$SFX   DS    0H
         ST    R1,CNMBNPTR-CNMB(R15)     Save pointer to last one
SM$X     DS    0H
         ST    R1,A_CNMB                  Save CNMB pointer
         BSM   0,R9                       Return to C/I
*
SM$MOVE  MVC   CNMBMSG-CNMB(0,R1),0(R15)  EXecuted instruction
SM$CNMBL EQU   CNMBSIZE+CNMBMAXL          Get length of CNMB
SM$SUBP  EQU   230                        Subpool of CNMB area
         EJECT
***********************************************************************
***                                                                 ***
**       Constants                                                   **
***                                                                 ***
***********************************************************************
         SPACE 2
C_LOCATE CAMLST NAME,*-*,,*-*
C_LOCATEL EQU  *-C_LOCATE
*
C_TIME   DS    0H
         DC    AL1(TIMEJK)               Verb type is JOB Card Time
         DC    X'02'                     Number of subparms
         DC    X'06'                     Length of subparm 1
C_TIMEM  DC    CL6'000005'               Subparm 1 = CPU minutes
         DC    X'02'                     Length of subparm 2
C_TIMES  DC    CL2'00'                   Subparm 2 = CPU seconds
C_TIMEL  EQU   *-C_TIME
*
** Messages
*
MSG460   WTO   'XYZ460E JCL standards not followed, job terminated',   @
               MF=L
*
MSG461   DC    C'XYZ461I '
         DC    C'TIME=1440 was internally changed to TIME=1439, '
         DC    C'this job will be timed'
MSG461L  EQU   *-MSG461
MSG462   DC    C'XYZ462E '
         DC    C'Job class must be specified on the job card'
MSG462L  EQU   *-MSG462
MSG463   DC    C'XYZ463E '
         DC    C'Numeric job classes can only be used by '
         DC    C'production job names'
MSG463L  EQU   *-MSG463
MSG464   DC    C'XYZ464E '
         DC    C'Job class "'
MSG464C  DC    C'?" is not valid'
MSG464L  EQU   *-MSG464
MSG465   DC    C'XYZ465W Dataset name could not be determined'
MSG465L  EQU   *-MSG465
MSG466   DC    C'XYZ466I '
         DC    C'Using DSN='
MSG466L  EQU   *-MSG466
MSG467   DC    C'XYZ467I '
         DC    C'Job class='
MSG467C  DC    C'C'
         DC    C' tapes='
MSG467T  DC    C'C'
         DC    C' Time=('
MSG467TM DC    C'123456'
         DC    C','
MSG467TS DC    C'12'
         DC    C')'
MSG467L  EQU   *-MSG467
MSG468   DC    C'XYZ468E '
         DC    C'Tape usage not authorized for job class='
MSG468C  DC    C'?'
         DC    C' - '
MSG468L  EQU   *-MSG468
MSG469   DC    C'XYZ469E '
         DC    C'TIME='
MSG469V  DC    C'NOLIMIT'
         DC    C' is not allowed'
MSG469L  EQU   *-MSG469
*
MSG470   DC    C'XYZ470E TIME=('
MSG470JM DC    C'123456'
         DC    C','
MSG470JS DC    C'12'
         DC    C') is over limit of Time=('
MSG470CM DC    C'123456'
         DC    C','
MSG470CS DC    C'12'
         DC    C') for job class='
MSG470C  DC    C'a'
MSG470L  EQU   *-MSG470
*
MSG471   DC    C'XYZ471W Internal error in '
         DC    C'JES2 exit XYZJ2X06 (&SYSTIME &SYSDATE) - '
         DC    C'ENDK not found'
MSG471L  EQU   *-MSG471
*
MSG472   DC    C'XYZ472E Using obsolete DDNAME='
MSG472L  EQU   *-MSG472
MSG472PR DC    C', Please remove!'
*
MSG473   DC    C'XYZ473W DCB values found on existing dataset, '
         DC    C'data corruption or unpredictable results may occur'
MSG473L  EQU   *-MSG473
*
MSG474   DC    C'XYZ474E Use of DSN=AS.* is not allowed in production '
         DC    C'jobs'
MSG474L  EQU   *-MSG474
*
MSG475   WTO   'XYZ475I XYZJ2X06 assembled on &SYSDATE at &SYSTIME',   @
               MF=L
*
MSG476   DC    C'XYZ476E First character of accounting field '
MSG476FN DC    C' '
         DC    C' has "'
MSG476CC DC    C' '
         DC    C'" (not a valid company code)'
MSG476L  EQU   *-MSG476
*
MSG477   DC    C'XYZ477E Application code "'
MSG477AP DC    C'xyz'
         DC    C'" in accounting field 4 is not valid for company '
MSG477CC DC    C' '
         DC    C'"'
MSG477L  EQU   *-MSG477
*
MSG478   DC    C'XYZ478W Load of application table failed, call the '
         DC    C'Help desk at 8 + 594-2797 (XYZ Net)'
MSG478L  EQU   *-MSG478
*
MSG479   DC    C'XYZ479E No accounting fields found, job terminated'
MSG479L  EQU   *-MSG479
*
MSG480   DC    C'XYZ480E Job has wrong number of accounting fields, '
         DC    C'must be 4, for example: ('
MSG480F1 DC    C'D,'
MSG480F2 DC    C'D,'
MSG480F3 DC    C'D,'
         DC    C'AAA)'
MSG480L  EQU   *-MSG480
*
MSG481   DC    C'XYZ481E Jobname is missing, job terminated'
MSG481L  EQU   *-MSG481
*
MSG482   DC    C'XYZ482W Not prepared for system created job string, '
         DC    C'call the help desk'
MSG482L  EQU   *-MSG482
*
MSG483   DC    C'XYZ483W Application code longer than 3 Characters in '
         DC    C'accounting field 4, only first 3 used'
MSG483L  EQU   *-MSG483
*
MSG484   DC    C'XYZ484E First character of the jobname '
         DC    C'is not a valid company code: "'
MSG484CC DC    C'x'
         DC    C'"'
MSG484L  EQU   *-MSG484
*
MSG485   DC    C'XYZ485E Application code "'
MSG485AP DC    C'xyz'
         DC    C'" in the jobname is not valid for company '
MSG485CC DC    C' '
MSG485L  EQU   *-MSG485
*
MSG486   DC    C'XYZ486E Application number "'
MSG486AN DC    C'000'
         DC    C'" in the jobname has non-numeric characters'
MSG486L  EQU   *-MSG486
*
MSG487   DC    C'XYZ487E Frequency "'
MSG487F  DC    C'f'
         DC    C'" in the jobname is invalid, should be one of the'
         DC    C' following: '
MSG487L  EQU   *-MSG487
*
MSG488   DC    C'XYZ488E Application code in accounting field 4 must '
         DC    C'be at least 3 characters in length'
MSG488L  EQU   *-MSG488
*
MSG489   DC    C'XYZ489I DD=SYSMDUMP detected going to SYSOUT, it was '
         DC    C'changed to DD=SYSUDUMP'
MSG489L  EQU   *-MSG489
*
MSG496   WTO   'XYZ496W JOB XXXXXXXX has JCL that violates ISRM standar@
               ds',                                                    @
               MF=L
MSG496L  EQU   *-MSG496
MSG496A  EQU   4+12                       LOCATE "XXXXXXXX" IN MSG498
*
MSG497   WTO   'XYZ497W This job may not be allowed to run in the futur@
               e if the JCL is not corrected',                         @
               MF=L
*
MSG498   WTO   'XYZ498W JOB XXXXXXXX has JCL that violates automated st@
               orage management project directives',                   @
               MF=L
MSG498L  EQU   *-MSG498
MSG498A  EQU   4+12                       LOCATE "XXXXXXXX" IN MSG498
*               0....+....1....+....2....+....3
MSG499   WTO   'XYZ499I JOB XXXXXXXX using /*ROUTE PRINT <NODE> FOR MSG@
               CLASS=X - route to node was ignored',                   @
               MF=L
MSG499L  EQU   *-MSG499
MSG499A  EQU   4+12                       LOCATE "XXXXXXXX" IN MSG499
*
** Literals used in program
*
         LTORG ,
APARNUM  DC    CL8'NONE'                  APAR Number
         DS    0D                         End of EXIT06
         EJECT
***********************************************************************
***                                                                 ***
**       Tables and data that we will let be externally referenced   **
**                                                                   **
**   Note: The H_J2VS/J2X06EDH_J2VS at offset 0 is done to simulate  **
**         the ADRRELVL and ICKRELVL modules.                        **
**                                                                   **
**   Note: You *must* keep the format of this CSECT in sync with the **
**         XYZJ2X#06 macro or other program that process this module **
**         will faile.                                               **
***                                                                 ***
***********************************************************************
         SPACE 2
         LCLC  &ASMDATE
* In High-Level-Assembler, &SYSDATC is "YYYYMMDD"
&ASMDATE SETC  '&SYSDATC'(1,4).'/'.'&SYSDATC'(5,2).'/'.'&SYSDATC'(7,2)
*&ASMDATE SETC  '&SYSDATE'                                        ASM-H
*
** Start of CSECT
*
XYZJ2#06 CSECT ,
XYZJ2#06 AMODE 31
XYZJ2#06 RMODE ANY
*
HEADER   EQU   *
H_J2VS   DC    X'00,04,02,00'                 JES2 short version: 420
H_J2VER  DC    CL8'&VERSION'                  JES2 version long
H_ID     DC    CL8'XYZJ2#06'                  Module name
H_ASMD   DC    CL10'&ASMDATE'                 ASM date: "1994/03/06"
H_ASMT   DC    CL6'&SYSTIME'                  ASM time: "hh:mm"
H_DBJOB  DC    CL8'&DBGJNME'                  Debugging jobname
HEADERL  EQU   *-HEADER                       Must match J2X06EDHL
HEADERT  EQU   J2X06EDHL                      Match?  !!!!
*
** Offsets for external programs (mapped by J2X06EDE)
*
ENTRIES  EQU   *
         DC    AL2($J2X06EDE_TJC,TABLE_JC-XYZJ2#06)   Job class
         DC    AL2($J2X06EDE_TFQ,TABLE_FQ-XYZJ2#06)   Frequency
         DC    AL2($J2X06EDE_TNP,TABLE_NP-XYZJ2#06)   Non-production
         DC    AL2($J2X06EDE_TTU,TABLE_TU-XYZJ2#06)   Tape unit
         DC    AL1(#J2X06EDE_END)                     End of table
         SPACE 2
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
**                                                                   **
***      Non-Prodution jobnames                                     ***
**                                                                   **
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         SPACE 2
TABLE_NP DS    0H
NPTE1    DC    CL6'SCIS  ',AL1(4,0),AL2(D_NPTE1-XYZJ2#06)
NPTE2    DC    CL6'CON   ',AL1(3,1),AL2(D_NPTE2-XYZJ2#06)
NPTE3    DC    CL6'TSO   ',AL1(3,1),AL2(D_NPTE3-XYZJ2#06)
NPTE4    DC    CL6'FIRE  ',AL1(4,1),AL2(D_NPTE4-XYZJ2#06)
NPTE5    DC    CL6'######',AL1(6,1),AL2(D_NPTE5-XYZJ2#06)
         DC    AL1(#J2X06EDE_END)         End of table
*
** Description strings for non-production job types
*
D_NPTE1  STR   'Swepco CIS jobs'
D_NPTE2  STR   'Contractor'
D_NPTE3  STR   'TSO user'
D_NPTE4  STR   'Firecall'
D_NPTE5  STR   'Employee number'
         SPACE 2
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
**                                                                   **
***      Job run frequency                                          ***
**                                                                   **
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         SPACE 2
         DC    CL8'JOB FREQ'
TABLE_FQ DS    0H
         DC    C'A',AL2(TFQ_DA-XYZJ2#06)
         DC    C'B',AL2(TFQ_DB-XYZJ2#06)
         DC    C'D',AL2(TFQ_DD-XYZJ2#06)
         DC    C'M',AL2(TFQ_DM-XYZJ2#06)
         DC    C'Q',AL2(TFQ_DQ-XYZJ2#06)
         DC    C'R',AL2(TFQ_DR-XYZJ2#06)
         DC    C'S',AL2(TFQ_DS-XYZJ2#06)
         DC    C'T',AL2(TFQ_DT-XYZJ2#06)
         DC    C'W',AL2(TFQ_DW-XYZJ2#06)
         DC    C'X',AL2(TFQ_DX-XYZJ2#06)
TABLE#FQ EQU   (*-TABLE_FQ)/(J2X06FQL)
         DC    AL1(#J2X06EDE_END)         End of table
*
TFQ_DA   STR   'Annual'
TFQ_DB   STR   'Bi-weekly'
TFQ_DD   STR   'Daily'
TFQ_DM   STR   'Monthly'
TFQ_DQ   STR   'Quarterly'
TFQ_DR   STR   'Request'
TFQ_DS   STR   'Semi-annual'
TFQ_DT   STR   'Test/development'
TFQ_DW   STR   'Weekly'
TFQ_DX   STR   'System'
         SPACE 2
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
**       JCL rules table - mapped by the J2X06JC DSECT               **
***                                                                 ***
** Job-Class, Time-Minutes, Time-Seconds, Tapes-Allowed?, Desc Str   **
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         SPACE 2
         DC    CL8'JOB CLASS'
TABLE_JC DS    0H
         DC    CL1'A',CL6'000000',CL2'15',C'N',AL2(0)
         DC    CL1'B',CL6'000000',CL2'15',C'Y',AL2(0)
         DC    CL1'C',CL6'000000',CL2'45',C'Y',AL2(0)
         DC    CL1'D',CL6'******',CL2'**',C'Y',AL2(0)
         DC    CL1'E',CL6'000000',CL2'15',C'N',AL2(0)
         DC    CL1'F',CL6'      ',CL2'  ',C'Y',AL2(0)
         DC    CL1'G',CL6'      ',CL2'  ',C'Y',AL2(0)
         DC    CL1'H',CL6'******',CL2'**',C'Y',AL2(TJC_DH-XYZJ2#06)
         DC    CL1'I',CL6'******',CL2'**',C'Y',AL2(TJC_DI-XYZJ2#06)
         DC    CL1'J',CL6'000000',CL2'45',C'Y',AL2(TJC_DJ-XYZJ2#06)
         DC    CL1'K',CL6'******',CL2'**',C'Y',AL2(TJC_DK-XYZJ2#06)
         DC    CL1'L',CL6'      ',CL2'  ',C'Y',AL2(0)
         DC    CL1'M',CL6'******',CL2'**',C'Y',AL2(0)
         DC    CL1'N',CL6'******',CL2'**',C'Y',AL2(TJC_DN-XYZJ2#06)
         DC    CL1'O',CL6'******',CL2'**',C'Y',AL2(0)
         DC    CL1'P',CL6'000000',CL2'05',C'N',AL2(TJC_DP-XYZJ2#06)
         DC    CL1'Q',CL6'000000',CL2'15',C'N',AL2(0)
         DC    CL1'R',CL6'      ',CL2'  ',C'Y',AL2(0)
         DC    CL1'S',CL6'000000',CL2'15',C'Y',AL2(TJC_DS-XYZJ2#06)
         DC    CL1'T',CL6'000002',CL2'00',C'Y',AL2(TJC_DT-XYZJ2#06)
         DC    CL1'U',CL6'******',CL2'**',C'Y',AL2(0)
         DC    CL1'V',CL6'      ',CL2'  ',C'Y',AL2(0)
         DC    CL1'W',CL6'      ',CL2'  ',C'Y',AL2(0)
         DC    CL1'X',CL6'      ',CL2'  ',C'Y',AL2(TJC_DX-XYZJ2#06)
         DC    CL1'Y',CL6'      ',CL2'  ',C'Y',AL2(0)
         DC    CL1'Z',CL6'      ',CL2'  ',C'Y',AL2(0)
         DC    CL1'0',CL6'      ',CL2'  ',C'Y',AL2(0) Added: Nov95
         DC    CL1'1',CL6'      ',CL2'  ',C'Y',AL2(0)
         DC    CL1'2',CL6'      ',CL2'  ',C'Y',AL2(0)
         DC    CL1'3',CL6'      ',CL2'  ',C'Y',AL2(0)
         DC    CL1'4',CL6'      ',CL2'  ',C'Y',AL2(0)
         DC    CL1'5',CL6'      ',CL2'  ',C'Y',AL2(0)
         DC    CL1'6',CL6'      ',CL2'  ',C'Y',AL2(0)
         DC    CL1'7',CL6'      ',CL2'  ',C'Y',AL2(0) Added: Nov95
         DC    CL1'8',CL6'      ',CL2'  ',C'Y',AL2(TJC_D8-XYZJ2#06)
         DC    CL1'9',CL6'      ',CL2'  ',C'Y',AL2(TJC_D9-XYZJ2#06)
TABLE#JC EQU   (*-TABLE_JC)/J2X06JCL
         DC    AL1(#J2X06EDE_END)         End of table
*
** Description strings
**
** Note: This exit doesn't use this description string, it is used
**       by external users of this table.
*
*               Turnaround   Description
TJC_DH   STR   'By 7:00am  × Production IDMS - night'
TJC_DI   STR   '           × Test IDMS'
TJC_DJ   STR   '2 hours    ×  '
TJC_DK   STR   '           × Single threaded'
TJC_DN   STR   'By 7:00am  × Night only'
TJC_DO   STR   '           × Special Assignment'
TJC_DP   STR   '10 minutes ×  '
TJC_DQ   STR   '15 minutes ×  '
TJC_DS   STR   '1 hour     ×  '
TJC_DT   STR   '2 hours    ×  '
TJC_DU   STR   '24 hours   × Unlimited CPU'
TJC_DX   STR   '           × Reserved for Automated Scheduler'
TJC_D8   STR   '           × Reserved for EDI'
TJC_D9   STR   '           × Reserved for Indus'
TJC_DTTL EQU 10 1234567890
TJC_DTLT EQU   #J2X06JC_DTL                  <-- Match with TJC_DTL?
TJC_DDO  EQU   3                             Length of " × "
         SPACE 2
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
**                                                                   **
***      Table units                                                ***
**                                                                   **
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         SPACE 2
*
** Tape unit names (As determined by Omegamon on 05-NOV-1996)
*
TABLE_TU EQU   *
         DC    CL8'3480X   '
         DC    CL8'3400-6  '
         DC    CL8'TAPE    '
         DC    CL8'TAPE1   '
         DC    CL8'3480    '
         DC    CL8'3400-9  '
         DC    CL8'3400-5  '
         DC    CL8'3400-3  '
         DC    CL8'2400-3  '
         DC    CL8'SYS3480R'
         DC    CL8'SYS348XR'
TABLE#TU EQU   (*-TABLE_TU)/8
         DC    AL1(#J2X06EDE_END)         End of table
         SPACE 2
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
**                                                                   **
***      End of XYZJ2#06 CSECT                                      ***
**                                                                   **
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         SPACE 2
         DC    C'ENDOFXYZJ2#06'           Eyecatcher
         DS    0D
XYZJ2L06 EQU   *-XYZJ2#06                 Length (for trivia)
         EJECT
***********************************************************************
***                                                                 ***
**       End of XYZJ2X06 module                                      **
***                                                                 ***
***********************************************************************
         SPACE 2
        $MODEND ,                         Generate end of module
EXIT06L  EQU   *-EXIT06                   Length of EXIT06
EXIT06F  EQU   8192-EXIT06L               Bytes free under base regs
         END   ,
./ ADD NAME=XYZJ2X13 0100-98016-98016-1800-00195-00195-00000-DALCOCK
XYZJ2X13 TITLE 'JES2 Exit 13 -- Netmail screening and notification'
***********************************************************************
***                                                                 ***
**  Name = XYZJ2X13                                                  **
**                                                                   **
**  Author = David Alcock                                            **
**                                                                   **
**  Title = IDTF Interactive Data Transmit Faclity Screening and     **
**          notification JES2 exit                                   **
**                                                                   **
**  Purpose = This exit sets RC=8 so JES2 will issue $HASP549 every  **
**            time a user has a file waiting to be received.         **
**                                                                   **
**  Entry Points = Exit 13 - EXIT13 (IDTF Notify)                    **
**                                                                   **
**  Register contents upon entry to EXIT13:                          **
**                                                                   **
**  - R0 Not applicable                                              **
**                                                                   **
**  - R1 Pointer to a 5 word parameter list                          **
**       - Word 1 (+0)  - Address of the Network Job header          **
**       - Word 2 (+4)  - Address of the Network Data Set header     **
**       - Word 3 (+8)  - Address of the Peripheral Data definition  **
**                        block ($PDDB) built for the received file  **
**       - Word 4 (+12) - Address of a 1-byte binary field containing**
**                        the SYSID value of the MAS member the user **
**                        is currently logged onto.                  **
**       - Word 5 (+16) - Address of a 70-byte message area for      **
**                        $HASP598;                                  **
**                                                                   **
**  - R10 Address of the $JCT                                        **
**  - R11 Address of the $HCT                                        **
**  - R13 Address of the $PCE                                        **
**  - R14 Return address                                             **
**                                                                   **
***                                                                 ***
***********************************************************************
         SPACE 2
***********************************************************************
***                                                                 ***
**           M o d i f i c a t i o n   H i s t o r y                 **
**                                                                   **
** Person     Date        Description                                **
** ---------- ----------- ------------------------------------------ **
** DGAlcock   08-SEP-1996 Check for Zeke mail and reroute to credit  **
**                        card administrator;                        **
** DGAlcock   18-MAY-1993 Use the Network Data Header for RSCS info; **
**                        Added debugging message for assemble info; **
** DGAlcock   15-MAR-1993 Change RSCS ZEKE output to Z;              **
** DGAlcock   30-JUL-1992 Converted to JES2 SP4.2; Changed to class  **
**                        B, a good ole punch class;                 **
** DGAlcock   08-NOV-1991 Initial exit created;                      **
***                                                                 ***
***********************************************************************
         EJECT
         GBLC  &DBJOBN
         GBLC  &CCAUSER
         GBLC  &VMNODEI
*
** Set the global assembly options
*
&DBJOBN  SETC  'ibmuserZ'                 Debugging job name
&CCAUSER SETC  'ibmuser'                  Userid on VMPROFS
&VMNODEI SETC  '9'                        VM node ID
         EJECT
***********************************************************************
***                                                                 ***
**       JES2 Macros                                                 **
***                                                                 ***
***********************************************************************
         SPACE 2
         COPY $HASPGBL                    Copy HASP Globals
         EJECT
XYZJ2X13 $MODULE ENVIRON=JES2,                                         @
               RMODE=ANY,                                              @
               SYSP=(GEN,GEN,DATA,GEN,GEN),                            @
               IBMJES2=SAMPLE,                                         @
               TITLE='JES2 Exit13 TSO/E Notify Exit -- Prologue',      @
               $CADDR,                    Common address routine table @
               $DTE,                      Daughter task element        @
               $ERA,                      Error recovery area          @
               $HASPEQU,                  JES2 Equates                 @
               $HCT,                      Communication table          @
               $JCT,                      Job Control table            @
               $MIT,                      Module information table     @
               $NHD,                      Network Headers              @
               $PADDR,                    Private Area routine table   @
               $PARMLST,                  Inline parameter list        @
               $PCE,                      Processor control element    @
               $PDDB,                     Peripheral Data Def. Block   @
               $PSV,                      Process save Area            @
               $TQE,                      Termination/Recovery Cntrl   @
               $USERCBS,                  User Control Block           @
               $XECB                      Extended ECB element
         EJECT
***********************************************************************
***                                                                 ***
**       Exit 13 processing                                          **
***                                                                 ***
***********************************************************************
         SPACE 2
*
** Entry housekeeping
*
EXIT13  $ENTRY BASE=R12                   Exit routine entry point
        $SAVE  ,                          Save Caller's registers
         LR    R12,R15                    Get CSECT address
         LR    R4,R1                      Save parameter address
         L     R3,8(,R4)                  Locate Netmail PDDB
         L     R5,0(,R4)                  Locate Network Job Header
         L     R6,4(,R4)                  Locate Network DataSet Header
*
** Debugging jobname?
*
         CLC   NDHGRMT-NDH(8,R6),=CL8'&DBJOBN.'  Debugging userid?
         BNE   DBMSGX                            No, skip
        $WTO   MSGDB,L'MSGDB,JOB=YES,CLASS=$TRIVIA Issue message
DBMSGX   DS    0H
         SPACE 2
** - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - **
** RSCS checking for Zeke returns and those to simply purge          **
** - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - **
         SPACE 2
         CLC   NJHGJNAM-NJH(4,R5),=CL4'RSCS'      Came from RSCS?
         BNE   RSCS$X                             No, skip this & next
*
** Set junk coming back from RSCS to bogus userids to the null class
*
RSCS$CHK DS    0H
         CLC   NDHGRMT-NDH(8,R6),=CL8'DROS001'    Bogus ID?
         BNE   RSCS$X
RSCS$P   DS    0H
         MVI   PDBCLASS-PDB(R3),C'Z'      Set to NULL (Trash) sysout
        $WTO   MSGRSCS,L'MSGRSCS,JOB=YES,CLASS=$TRIVIA Issue message
         B     RETURN0
RSCS$X   DS    0H
         SPACE 2
** - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - **
** Ensure that NETMAIL goes into class B                             **
** Our RSCS (XYZ) sends in CLASS A resulting in mail being lost      **
**                                                                   **
** - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - **
         SPACE 2
         CLI   PDBCLASS-PDB(R3),C'B'      NETMAIL in class B?
         BE    NETMAILX                   Yes, continue
         MVI   PDBCLASS-PDB(R3),C'B'      Set NETMAIL to class B
        $WTO   MSGNETM,L'MSGNETM,JOB=YES,CLASS=$TRIVIA Issue message
NETMAILX DS    0H
*
** Is the user Logged on?
*
         L     R3,12(R4)                  -> SYSID value for MAS
         TM    0(R3),B'00000111'          User logged on?
         BNZ   LOGON                      Yes, continue
         MVC   0(1,R3),$SIDBUSY           No, use this member's SID
LOGON    DS    0H
         SPACE 2
** - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - **
** Termination                                                       **
** - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - **
         SPACE 2
*
** Exit housekeeping
*
RETURN8  DS    0H
        $RETURN RC=8                      Return to caller w/notify
*
RETURN0  DS    0H
        $RETURN RC=0                      Return to caller
         EJECT
***********************************************************************
***                                                                 ***
**       Constants                                                   **
***                                                                 ***
***********************************************************************
         SPACE 2
MSGDB   $MSG   900,'XYZJ2X13 last assembled on &SYSDATE at &SYSTIME '
MSGNETM $MSG   901,'NETMAIL changed to class B by exit XYZJ2X13'
MSGRSCS $MSG   902,'NETMAIL from RSCS for invalid userid changed to SYS@
               OUT CLASS=Z by exit XYZJ2X13'
*
** Literals
*
         LTORG ,                          Literals used in EXIT13
*
         DS    0D                         End of EXIT13
         EJECT
***********************************************************************
***                                                                 ***
**       XYZJ2X13 End                                                **
***                                                                 ***
***********************************************************************
         SPACE 2
        $MODEND ,
         END
./ ADD NAME=XYZJ2X20 0100-98016-98016-1800-00106-00106-00000-DALCOCK
XYZJ2X20 TITLE 'JES2 Exit 20 -- End of Input'
***********************************************************************
***                                                                 ***
**  Name = XYZJ2X20                                                  **
**                                                                   **
**  Author = David Alcock                                            **
**                                                                   **
**  Title = End of input                                             **
**                                                                   **
**  Purpose = This exit sets the input priority for batch jobs       **
**                                                                   **
**  Entry Points = Exit 20 - EXIT20 (End of Input)                   **
**                                                                   **
**  Register contents upon entry to EXIT20:                          **
**                                                                   **
**  - R0 A code:                                                     **
**       - 0 = Normal end of input                                   **
**       - 4 = Job has a JES2 control statement error                **
**                                                                   **
**  - R10 Address of the $JCT                                        **
**  - R11 Address of the $HCT                                        **
**  - R13 Address of the HASPRDR PCE                                 **
**  - R14 Return address                                             **
**                                                                   **
***                                                                 ***
***********************************************************************
         SPACE 2
***********************************************************************
***                                                                 ***
**           M o d i f i c a t i o n   H i s t o r y                 **
**                                                                   **
** Person     Date        Description                                **
** ---------- ----------- ------------------------------------------ **
** DGAlcock   09-NOV-1996 JES2 4.3;                                  **
** DGAlcock   11-NOV-1993 Change *ALL* input PRTY to 3;              **
** DGAlcock   06-OCT-1993 Don't change input prty for job classes    **
**                        W and K (single threaded) per W. Dunn;     **
** DGAlcock   01-APR-1993 Corrected priority changing in SP4.2;      **
** DGAlcock   04-AUG-1992 Converted to JES2 SP4.2;                   **
***                                                                 ***
***********************************************************************
         EJECT
         COPY $HASPGBL                    Copy HASP Globals
         EJECT
XYZJ2X20 $MODULE ENVIRON=JES2,                                         @
               RMODE=ANY,                                              @
               IBMJES2=SAMPLE,                                         @
               TITLE='JES2 EXIT 20 - End of input',                    @
               $BUFFER,                   ..Buffers                    @
               $CAT,                      ..Class Attribute Table      @
               $HASPEQU,                  ..JES2 Equates               @
               $HCT,                      ..HASP Communications Table  @
               $JCT,                      ..Job Control Table          @
               $JQE,                      ..Job Queue Element          @
               $MIT,                      ..Module Information Table   @
               $PADDR,                    ..Private Address Storage Tb @
               $PCE,                      ..Processor Control Element  @
               $RDRWORK,                  ..HASP Input PCE             @
               RPL                        ..Request Parameter list
         TITLE 'XYZ JES2 exit 20 - End of Input'
***********************************************************************
***                                                                 ***
**       Priority                                                    **
***                                                                 ***
***********************************************************************
         SPACE 2
         USING HCT,R11                    Addressibility to HCT
         USING JCT,R10                    Addressibility to JCT
*
** Entry housekeeping
*
EXIT20  $ENTRY BASE=R12,CSECT=YES         Entry mon frair
        $SAVE ,                           Save registers
         LR    R12,R15                    Load base register
*
** Processing this one?
*
         TM    JCTJOBFL,JCTBATCH          Batch Job?
         BNO   EXIT0                      No, leave right now
*
** Set input priority
*
         MVI   JCTIPRIO,X'30'             Set priority
*
** Exit housekeeping
*
EXIT0    DS    0H
        $RETURN RC=0                      Return to JES2
         EJECT
***********************************************************************
***                                                                 ***
**       Data constants                                              **
***                                                                 ***
***********************************************************************
         SPACE 2
         LTORG ,                          Literals for XYZJ2X20
APARNUM  DC    CL8'NONE'                  APAR Number
         EJECT ,
***********************************************************************
***                                                                 ***
**       Generate end of module                                      **
***                                                                 ***
***********************************************************************
         SPACE 2
        $MODEND ,
         END
./ ADD NAME=XYZJ2X36 0100-98016-98016-1800-00204-00204-00000-DALCOCK
XYZJ2X36 TITLE 'JES2 Exit 36 -- Pre-Security Authorization Call'
***********************************************************************
***                                                                 ***
**  Name = XYZJ2X36                                                  **
**                                                                   **
**  Author = David Alcock                                            **
**                                                                   **
**  Title = Pre-Security Authorization call - JES2 exit 36           **
**                                                                   **
**  Purpose = Provide performance improvement in the JES2 address    **
**            space.  This exit implements a suggestion by Computer  **
**            Associates to reduce JESSPOOL overhead by eliminating  **
**            a call to ACF2 for system datasets.  This suggestion   **
**            was made in PIB# GI21127 issued in Fall 1993.          **
**                                                                   **
**  Entry Points = Exit 36 - EXIT36                                  **
**                                                                   **
***                                                                 ***
***********************************************************************
         SPACE 2
***********************************************************************
***                                                                 ***
**           M o d i f i c a t i o n   H i s t o r y                 **
**                                                                   **
** Person     Date        Description                                **
** ---------- ----------- ------------------------------------------ **
** DGAlcock   09-NOV-1996 JES2 4.3;                                  **
** DGAlcock   01-FEB-1994 Initial exit created;                      **
***                                                                 ***
***********************************************************************
         EJECT
         TITLE 'JES2 Exit 36 (PRE SAF CALL) -- PROLOG ($HASPGBL)'
         COPY  $HASPGBL
         TITLE 'RACHECK MAPPING MACRO DSECT'
         ICHACHKL DSECT=YES
         TITLE 'RACINIT MAPPING MACRO DSECT'
         IRRPRIPL
         TITLE 'JES2 Exit 36 (PRE SAF CALL) -- PROLOG ($MODULE)'
XYZJ2X36 $MODULE ENVIRON=USER,                                         @
               RMODE=ANY,                                              @
               IBMJES2=SAMPLE,                                         @
               TITLE='JES2 EXIT 36 - SAF stuff',                       @
               SAFP,               SAF ICHSAFP - parm list mapping     C
               TOKEN,              SAF ICHRUTKN - TOKEN mapping        C
               $CADDR,             Common storage address list         C
               $DTE,               Daughter task element               C
               $ERA,               Erorr recovery area                 C
               $HASPEQU,           General EQUATES                     C
               $HCCT,              Common storage control table        C
               $HCT,               Private storage control table       C
               $HFAME,             HASP file allocation map element    C
               $MIT,               Module information table            C
               $PADDR,             Private storage address list        C
               $PARMLST,           Parameter list values/equates       C
               $PCE,               Processor control element           C
               $PSV,               Processor save area                 C
               $SCAT,              SYSOUT class attribute table        C
               $XECB,              Extended ECB                        C
               $WAVE,              Work access verification element    C
               $XIT,               Exit information table              C
               ($XPL,GEN)          Exit parameter list
         TITLE 'BYPASS CREATE/DELETE SAF CALLS -- (ROUTINE NOCREDEL)'
***********************************************************************
*                                                                     *
*        NOCREDEL - Bypass SAF calls for create/delete of spool       *
*                   data set authorization checking.                  *
*                                                                     *
* FUNCTION :                                                          *
*                                                                     *
*        This routine checks the function code (FUNCODE) for          *
*        SYSIN data set create ($SEASIC), SYSOUT data set create      *
*        ($SEASOC), or SYSIN/SYSOUT data set deleteion ($SEADEL).     *
*        For these function codes, the SAF call will be bypassed.     *
*        A zero return cdoe will be set so that any other exit 36     *
*        routines will be taken.                                      *
*                                                                     *
*        One reason for taking this exit is to cut down on the        *
*        overhead of the implied RACINITs for these JESSPOOL checks.  *
*        This should be a performance boost while still controlling   *
*        the TSO OUTPUT command through the JESSPOOL class.           *
*                                                                     *
* LINKAGE :                                                           *
*                                                                     *
*        This routine is entered via a BASR R14,R15 from the USERSUB  *
*        routine in the HASCSIRQ CSECT of the HASPSSSM load module.   *
*        Control is returned via BSM.                                 *
*                                                                     *
* OPERATION :                                                         *
*                                                                     *
*        LOADMOD(XYZJ2X36) STORAGE=CSA                                *
*        EXIT(36)  ROUTINES=EXIT36,STATUS=ENABLED                     *
*                                                                     *
* ENVIRONMENT :                                                       *
*                                                                     *
*        Either subtask or user address space                         *
*                                                                     *
* RECOVERY :                                                          *
*                                                                     *
*        Default recovery provided by caller.                         *
*                                                                     *
* REGISTER USAGE (ENTRY/EXIT) :                                       *
*                                                                     *
*    REG       VALUE ON ENTRY             VALUE ON EXIT               *
*                                                                     *
*    R0        N/A                        Unchanged                   *
*    R1        Address of parm list       Unchanged                   *
*    R2-R10    N/A                        Unchanged                   *
*    R11       HCCT address               Unchanged                   *
*    R12       N/A                        Unchanged                   *
*    R13       Save area                  Unchanged                   *
*    R14       Return address             Unchanged                   *
*    R15       Routine address            Return code                 *
*                                                                     *
* PARAMETER LIST :                                                    *
*                                                                     *
*        See $XPL expansion                                           *
*                                                                     *
* REGISTER USAGE (INTERNAL) :                                         *
*                                                                     *
*    REG       VALUE                                                  *
*                                                                     *
*    R0        N/A                                                    *
*    R1        XPL (parameter list addr)                              *
*    R2-R10    N/A                                                    *
*    R11       HCCT address                                           *
*    R12       Routine base address                                   *
*    R13       Available save area                                    *
*    R14       Linkage                                                *
*    R15       Return code                                            *
*                                                                     *
* DATA AREA USAGE (INTERNAL) :                                        *
*                                                                     *
*    NAME          VALUE                                              *
*                                                                     *
*    $SEADEL       The FUNCODE for a spool data set delete            *
*    $SEASIC       The FUNCODE for a SYSIN spool data set create      *
*    $SEASOC       The FUNCODE for a SYSOUT spool data set create     *
*                                                                     *
*    XPLIND        Exit parameter list indicator byte - FUNCODE value *
*    XPLRESP       Exit parameter list response byte - exit decision  *
*    X036BYPS      Response byte value to bypass SAF call             *
*    X036NORC      Response byte value to use exit supplied ret code  *
*    X036RETC      User exit supplied return code                     *
*    X036RSNC      User exit supplied reason code                     *
*                                                                     *
* RETURN CODES (R15 ON EXIT) :                                        *
*                                                                     *
*         0 - NORMAL PROCESSING                                       *
*         4 - DO NOT INVOKE NEXT ROUTINE                              *
*                                                                     *
* OTHER CONSIDERATIONS :                                              *
*                                                                     *
*         N/A                                                         *
*                                                                     *
***********************************************************************
         TITLE 'BYPASS CREATE/DELETE SAF CALLS -- NOCREDEL'
         USING XPL,R1              XPL  addressability
         USING HCCT,R11            HCCT addressability
         SPACE 1
EXIT36   $ENTRY BASE=R15
         SPACE 1
         CLI   XPLIND,$SEASSOC     Was the call for system data set cr?
         BE    BYPASS              Yes, then bypass
         CLI   XPLIND,$SEADEL      Was the call for delete?
         BE    BYPASS              Yes, then bypass
         CLI   XPLIND,$SEASIC      Was the call for SYSIN create?
         BE    BYPASS              Yes, then bypass
         CLI   XPLIND,$SEASOC      Was the call for SYSOUT create?
         BNE   EXIT                No, then exit
         EJECT
***********************************************************************
*                                                                     *
*        Bypass the SAF call, and indicate to use the exit supplied   *
*        return code as the return code from SAF.                     *
*                                                                     *
***********************************************************************
         SPACE 1
BYPASS   OI     XPLRESP,X036BYPS   Indicate to bypass SAF call
         OI     XPLRESP,X036NORC   Indicate to use exit 36 return codes
         XC     X036RETC,X036RETC  Simulate zero return code from SAF
         XC     X036RSNC,X036RSNC  Simulate zero reason code from SAF
         SPACE 1
***********************************************************************
*                                                                     *
*        Return to caller with a zero return code.                    *
*                                                                     *
***********************************************************************
         SPACE 1
EXIT     SLR    R15,R15            Always return zero return code
         BSM    0,R14              Return
         SPACE 1
         DROP   R1,R11,R15         Drop addressability
         SPACE 1
         LTORG
APARNUM  DC    CL8'NONE'           APAR NUMBER
         EJECT
***********************************************************************
***                                                                 ***
**       Module end                                                  **
***                                                                 ***
***********************************************************************
         SPACE 2
        $MODEND ,
         END   ,                   END OF XYZJ2X36
./ ENDUP       "REVIEW" PDS MEMBER OFFLOAD AT 18:01 ON 98/01/16
