./ ADD NAME=$$README 1000-97137-97137-1812-00038-00038-00000-DALCOCK
 SHOWSYM edit macro v1.0 - 22-MAR-1997

 This package contains an edit macro that can be used to show the
 symbol substitutions that are in MVS v5 and higher.  You will
 need to assemble program RYSYMBM *BEFORE* executing SHOWSYM.

 File contents:

 $$README ... This member
 SHOWSYM  ... Edit macro - place in your SYSPROC or SYSEXEC
 RYSYMBM  ... Assembler program that invokes IBM's ASASYMBM program
 SAMPLE   ... A sample member that has some symbols that can be used
              to test SHOWSYM
 Z$EXAMP1 ... Sample assembler program that is based on example 1
              ASASYMBM program found in the MVS 5.2.2 Assembler guide
              manual.

 I *MAY* convert program RYSYMBM to a REXX function. At that time it
 will be renamed to RXSYMBM.

 =====================================================================

 The contents of this file are FREEWARE.  Use at your own risk.  It
 is provided for your enjoyment and neither David Alcock or his
 employer provides any warranty for their use.  I'd like to hear
 feedback on how they work on your system:

    David Alcock
    dalcock@csw.com  (work)
    davea@ticnet.com (home)

 =====================================================================
./ ADD NAME=RYSYMBM  1000-97137-97137-1812-00180-00180-00000-DALCOCK
*
* Name: RySYMBM
*
* Author: David Alcock
*         dalcock@csw.com
*         davea@ticnet.com
*
* Date Written: 22-MAR-1997 - (a Saturday, get a life Dave)
*
* Purpose: Invokes IBM's ASASYMBM, symbol substitution routine
*
*          Temp: Get value from parm list and return to var RYSYMBM
*          Perm: REXX function (and rename this to RXSYMBM)
*
*
         ASASYMBP   ,                     Mapping of SYMBP area
         PRINT NOGEN
         CVT DSECT=YES,LIST=NO            Commuications Vector Table
         IKJCPPL ,                        IBM: Cmd Processor Parm List
         IKJTSVT ,                        TSO Vector Table
         YREGS ,
         PRINT GEN
*
** Standard housekeeping (ESA and higher)
*
RYSYMBM  CSECT ,
RYSYMBM  AMODE 31
RYSYMBM  RMODE ANY
         BAKR R14,R0
         LR   R12,R15
         USING RYSYMBM,R12
         SAC  0
         SYSSTATE ASCENV=P
         STORAGE OBTAIN,LENGTH=DSAL,LOC=BELOW Obtain storage
         LR   R13,R1                    Point to Save Area
         MVC  4(4,R13),=C'F1SA'         Indicate stack SA
         USING DSA,R13
*
** Get the input text
*
PROCESS_PARAMETER DS 0H
 EREG  R0,R1                            Restore regs 0 and 1
 TM    CPPLCBUF-CPPL(R1),X'80'            Was this command called?
 BNO   PP$NC                              No, need to look at CBUF
*-We were called, it has a Batch type (EXEC) parameter
 L     R2,0(R1)                           Get address of parm
 SLR   R3,R3                              Clear register
 ICM   R3,B'0011',0(R2)                   Get length of parm
 BZ    NOINPUT                            None, leave
 LA    R2,2(R2)                           Bump past parm length HW
 B     PP$PARSE                           Parse the input
*-We are a TSO command processor
PP$NC EQU   *
 L     R2,CPPLCBUF-CPPL(R1)               Locate Command Buffer
 SLR   R3,R3                              Clear register
 ICM   R3,B'0011',0(R2)                   Get total CBUF length
 SLR   R0,R0                              Clear register
 ICM   R0,B'0011',2(R2)                   Get total Command name length
 LA    R15,4                              Length of header
 AR    R2,R15                             Bump past header
 SR    R3,R15                             Decrement for header length
 AR    R2,R0                              Bump past Command length
 SR    R3,R0                              Length of data
*-R2 - Address of command-buffer/Parameter
*-R3 - Length of command-buffer/Parameter
PP$PARSE EQU *
 LTR   R3,R3                              Check out length
 BZ    NOINPUT                            Length = Zero: Leave
 BM    NOINPUT                            Length < Zero: Leave
*
** Load in the routine
*
         LOAD EPLOC==CL8'ASASYMBM',ERRET=LOADERR Load routine
         ST   R0,EP_ASASYMBM            Save entry point
*
** Setup parameter list and call ASASYMBM
*
         LA    R1,MYSYMBP
         USING SYMBP,R1
         XC    SYMBP(SYMBP_LEN),SYMBP   Initialize to zero
         ST    R2,SYMBPPATTERN@         Save input text address
         ST    R3,SYMBPPATTERNLENGTH    Save input text length
         LA    R14,TARGET               Address of target
         MVI   0(R14),C' '
         MVC   1(L'TARGET-1,R14),0(R14)
         ST    R14,SYMBPTARGET@         Save in SYMBP area
         LA    R14,L'TARGET             Get length of target area
         ST    R14,TARGETLENGTH        Save it
         LA    R14,TARGETLENGTH         Address of target length
         ST    R14,SYMBPTARGETLENGTH@   Save in SYMBP area
         LA    R14,RETURNCODE           Address of return code
         ST    R14,SYMBPRETURNCODE@     Save in SYMBP area
         DROP  R1
         L     R15,EP_ASASYMBM          Get EPA of routine
         BASR  R14,R15                  Call it
*
** If everything looks okay, update the target REXX variable
*
         ICM   R15,B'1111',RETURNCODE   Get ASASYMBM return code
         BNZ   EXIT                     Oops...
*
         LA    R14,TARGET+L'TARGET-1      Locate last byte
SUBL     DS    0H
         CLI   0(R14),C' '                Blank?
         BNE   SUBLX                      No, end of the line
         BCTR  R14,0                      Yes, backup one more
         B     SUBL                       ..and try next byte
SUBLX    DS    0H
         LA    R15,TARGET                 Locate start
         LA    R14,1(R14)                 Don't make relative to 0
         SR    R14,R15                    Length = end - start
*
         LA    R1,PV_NAMEV                Locate varable name
         MVC   0(7,R1),=C'RYSYMBM'        Get value
         ST    R1,PV_NAMEP                Save pointer
         MVC   PV_NAMEL(4),=F'7'          Set variable name length
         LA    R1,TARGET                  Locate value
         ST    R1,PV_VALUEP               Save value pointer
         ST    R14,PV_VALUEL              Save value length
         L     R15,CVTPTR                 -> CVT
         L     R15,CVTTVT-CVTMAP(R15)     -> TSVT
         L     R15,TSVTVACC-TSVT(,R15)    -> CLIST Variable routine
         CALL  (15),(=A(TSVEUPDT),        Call IKJCT441: Variable updt @
               PV_NAMEP,                  ..Pointer to name            @
               PV_NAMEL,                  ..Length of name             @
               PV_VALUEP,                 ..Pointer to variable value  @
               PV_VALUEL,                 ..Length of variable         @
               PV_TOKEN),                 ..Token (not used by us)     @
               VL,MF=(E,PARMLIST)
         LTR   R15,R15
         BZ    EXIT
         MVC   RETURNCODE(4),=F'1001'     Set RC that var create failed
*
** Termination
*
EXIT     DS    0H
         DELETE EPLOC==CL8'ASASYMBM'
X$NMOD   DS    0H
         LR    R2,R13                     Get storage address
         L     R3,RETURNCODE            Get ASASYMBM return code
         STORAGE RELEASE,LENGTH=DSAL,ADDR=(R2) Release storage
         LR    R15,R3                     Get Return code of ASASYMBM
         PR    ,                          Return to caller
*
** Error: Could not find the routine, should not happen in MVS 5.2.2
**        and higher
*
LOADERR  DS    0H
         MVC   RETURNCODE(4),=F'1000'
         B     X$NMOD
*
** Error: No input to program
*
NOINPUT  DS    0H
         MVC   RETURNCODE(4),=F'1002'
         B     X$NMOD
*
** Literals
*
         LTORG ,
*
** Dynamic Save Area
*
DSA          DSECT
             DS    18F
EP_ASASYMBM  DS    F
PARMLIST     DS    10F
** CLIST Variable Set/Create routine
PV_TOKEN     DS    F                      Return code
PV_VALUEP    DS    F                      Value pointer
PV_VALUEL    DS    F                      Value length
PV_NAMEP     DS    F                      Pointer to CLIST Var name
PV_NAMEL     DS    F                      Name length
PV_NAMEV     DS    CL8'RXSYMBM'           Name value
*
MYSYMBP      DS    CL(SYMBP_LEN)       SYMBP area
RETURNCODE   DS    F                   Return code
TARGETLENGTH DS    F                   Length of target
TARGET       DS    CL256
DSAL         EQU   *-DSA
         END   ,
./ ADD NAME=SAMPLE   1000-97137-97137-1812-00022-00022-00000-DALCOCK
This is a sample member that you can use to test SHOWSYM.

The sysplex name is &SYSPLEX
The sysclone is &SYSCLONE
The sysname is &SYSNAME

&DAY.       &LDAY.
&HHMMSS.    &LHHMMSS.
&HR.        &LHR.
&JDAY.      &LJDAY.
&MIN.       &LMIN.
&MON.       &LMON
&SEC.       &LSEC.
&WDAY.      &LWDAY.
&YR2.       &LYR2.
&YR4.       &LYR4.
&YYMMDD.    &LYYMMDD.

&JOBNAME.
&SEQ.

This line has some 'Single quotes' which we can't insert &SYSPLEX
./ ADD NAME=SHOWSYM  1000-97137-97137-1812-00121-00121-00000-DALCOCK
/* REXX
 ×
 × Name: SHOWSYM
 ×
 × Author: David Alcock
 ×         dalcock@csw.com
 ×
 × Purpose: This edit macro processes line input which is selected by
 ×          a single "s", range "ss" or the whole dataset and calls
 ×          IBM's symbol substitution routine ASASYMBP.
 ×
 ×          The results of the substitution (if it was done) will be
 ×          shown in the edit/view dataset as message lines.
 */

/**********************************************************************
***                                                                 ***
**           M o d i f i c a t i o n   H i s t o r y                 **
**                                                                   **
** Person     Date        Ver  Description                           **
** ---------- ----------- ---- ------------------------------------- **
** DGAlcock   22-MAR-1997 v1.0 Initial REXX exec created             **
***                                                                 ***
**********************************************************************/

debug = 0

address ISREDIT
'MACRO (PARMS) NOPROCESS'
parms = translate(parms)
if parms == '?' × parms = "HELP" then do
   say "SHOWSYM shows symbol substition for ISPF edit lines"
   exit
   end

/*---------------------------------------------------------------------
 × Process line commands for S/SS/S99999
 ------------------------------------------------------------------- */

'PROCESS RANGE S'
select
  when rc = 0 then do
       '(CMD) = RANGE_CMD'          /* Get the command    */
       '(LINE1) = LINENUM .ZFRANGE' /* Get first in range */
       '(LINE2) = LINENUM .ZLRANGE' /* Get last in range  */
       end
  when rc <= 4 then do /* No S or SS entered, use entire file     */
       '(CMD) = RANGE_CMD'          /* Get the command    */
       '(LINE1) = LINENUM .ZFIRST'  /* Get first in range */
       '(LINE2) = LINENUM .ZLAST'   /* Get last in range  */
       end
  otherwise  /* Line command conflict - Edit will create message  */
       exit 12
end /* of "select" */

/*---------------------------------------------------------------------
 × Process the selected lines for apf entries
 ------------------------------------------------------------------- */

address ISREDIT
"(ICAPS) = CAPS"  /* save caps type upon entry */
"CAPS = OFF"      /* Ensure mixed case for note/msg lines */

firstone = 0
sub_number = 0
squote = "'"
dquote = '"'

do i = line1 to line2
   '(LINEVAL) = LINE' i   /* Get edit line */

   lineval = strip(lineval)
   if lineval == "" then iterate   /* Don't bother if nothing there */

   address TSO "RYSYMBM "lineval
   asasymbm_rc = rc

   if asasymbm_rc <> 0 then do
      say "Call to RYSYMBM had an error on line "i
      if asasymbm_rc < 1000 then say "> ASASYMBM rc="asasymbm_rc
      else select
              when asasymbm_rc == 1000 then ,
                   say "> ASASYMBM routine could not be loaded"
              when asasymbm_rc == 1001 then ,
                   say ">RYSYMBM pgm could not create variable RYSYMBM"
              when asasymbm_rc == 1002 then ,
                   say "> You didn't give any input to pgm RYSYMBM"
              otherwise
                   say "> Unknown RYSYMBM rc="asasymbm_rc
            end
      iterate
      end

  if rysymbm <> lineval then do
     if firstone = 0 then firstone = i
     sub_number = sub_number + 1
     if lastpos(squote,rysymbm) <> 0 then do
        say "here"
        rysymbm = translate(rysymbm,dquote,squote)
        "LINE_AFTER "i" = NOTELINE " ,
        "'The input line had a single quote which was " ,
        "changed to a double quote.'"
        end
     "LINE_AFTER "i" = MSGLINE '"rysymbm"'"
     end

   end /* of "do i = line1 to line 2" - - - - - - - - - - - - - - - */

"CAPS = "icaps /* Restore CAPS state upon entry */
if sub_number <> 0 then do
   zedsmsg = ""
   zedlmsg = "Symbols were substituted on "sub_number" lines"
   address ISPEXEC 'SETMSG MSG(ISRZ001)'
   "LOCATE" firstone  /* locate to first substition line */
   end
else do
     zedsmsg = ""
     zedlmsg = "None of the input lines had any substitions"
     address ISPEXEC 'SETMSG MSG(ISRZ001)'
     end
exit
./ ADD NAME=Z$EXAMP1 1000-97137-97137-1812-00124-00124-00000-DALCOCK
*
* Name: #SYMBM1
*
* Purpose: Sample invocation of IBM's ASASYMBM, symbol substitution.
*          Based on Example 1 in GC28-1466 (MVS 5.2.2 assembler guide)
*
*          This program is meant to be executed on TSO
*
*
         ASASYMBP   ,              Mapping of SYMBP area
         YREGS ,
*
** Standard housekeeping (ESA and higher)
*
#SYMBM1  CSECT ,
#SYMBM1  AMODE 31
#SYMBM1  RMODE ANY
         BAKR R14,R0
         LR   R12,R15
         USING #SYMBM1,R12
         SAC  0
         SYSSTATE ASCENV=P
         STORAGE OBTAIN,LENGTH=DSAL,LOC=BELOW Obtain storage
         LR   R13,R1                    Point to Save Area
         MVC  4(4,R13),=C'F1SA'         Indicate stack SA
         USING DSA,R13
*
** Load in the routine
*
         LOAD EPLOC==CL8'ASASYMBM',ERRET=LOADERR Load routine
         ST   R0,EP_ASASYMBM            Save entry point
*
** Setup parameter list and call ASASYMBM
*
         LA    3,MYSYMBP
         USING SYMBP,3
         XC    SYMBP(SYMBP_LEN),SYMBP   Initialize to zero
         LA    4,PATTERN                Address of pattern
         ST    4,SYMBPPATTERN@          Save in SYMBP area
         LA    4,L'PATTERN              Length of pattern
         ST    4,SYMBPPATTERNLENGTH     Save in SYMBP area
         LA    4,TARGET                 Address of target
         ST    4,SYMBPTARGET@           Save in SYMBP area
         MVC   TARGETLENGTH,=A(L'TARGET)  Set length of target
         LA    4,TARGETLENGTH           Address of target length
         ST    4,SYMBPTARGETLENGTH@     Save in SYMBP area
         LA    4,RETURNCODE             Address of return code
         ST    4,SYMBPRETURNCODE@       Save in SYMBP area
         DROP  3
         LA    1,MYSYMBP                Locate area
         L     R15,EP_ASASYMBM          Get EPA of routine
         BASR  R14,R15                  Call it
*
** Print ASASYMBM return code
*
         LA    R15,MSGAREA
         MVC   0(MSG3L,R15),MSG3
         LA    R15,MSG3L(R15)
         UNPK  0(9,R15),RETURNCODE(5)
         MVZ   0(8,R15),=8X'00'
         TR    0(8,R15),=C'0123456789ABCDEF'
         TPUT  MSGAREA,MSG3L+8
*
** If everything looks okay, print the before and after messsages
*
         ICM   R15,B'1111',RETURNCODE   Get ASASYMBM return code
         BNZ   EXIT                     Oops...
         MVC   MSGAREA(MSG1L),MSG1
         TPUT  MSGAREA,MSG1L
         MVC   MSGAREA(L'MSG2),MSG2
         MVC   MSGAREA+L'MSG2(L'PATTERN),TARGET
         TPUT  MSGAREA,MSG2L
*
** Termination
*
EXIT     DS    0H
         DELETE EPLOC==CL8'ASASYMBM'
X$NMOD   DS    0H
         LR    R2,R13                     Get storage address
         STORAGE RELEASE,LENGTH=DSAL,ADDR=(R2) Release storage
         PR                               Return to caller
*
** Error: Could not find the routine, should not happen in MVS 5.2.2
**        and higher
*
LOADERR  DS    0H
         MVC   MSGAREA(MSG4L),MSG4
         TPUT  MSGAREA,MSG4L
         B     X$NMOD
*
** Literals
*
         LTORG ,
*
* Note that to avoid the assembler substituting
* for &SYSNAME, &YYMMDD, &HHMMSS, two ampersands are specified.
* The resulting pattern, then, is actually
*      USERID.&SYSNAME..D&YYMMDD..T&HHMMSS
*
MSG1         DC    C'Before: '
PATTERN      DC    C'USERID.&&SYSNAME..D&&YYMMDD..T&&HHMMSS'
MSG1L        EQU   *-MSG1
MSG2         DC    C'After:  '
MSG2L        EQU   L'MSG2+L'PATTERN
MSG3         DC    C'#SYMBM1 - Call to ASASYMBM RC='
MSG3L        EQU   *-MSG3
MSG4         DC    C'#SYMBM1 - Could not load ASASYMBM'
MSG4L        EQU   *-MSG4
*
** Dynamic Save Area
*
DSA          DSECT
             DS    18F
EP_ASASYMBM  DS    F
MYSYMBP      DS    CL(SYMBP_LEN)       SYMBP area
RETURNCODE   DS    F                   Return code
TARGETLENGTH DS    F                   Length of target
TARGET       DS    CL80 An area big enough to hold the target no
*                       matter what is substituted. Since &DATE
*                       and &TIME are not used, it need be no
*                       longer than the pattern area.
MSGAREA      DS    CL79
DSAL         EQU   *-DSA
         END   ,
./ ENDUP       "REVIEW" PDS MEMBER OFFLOAD AT 14:32 ON 98/01/16
