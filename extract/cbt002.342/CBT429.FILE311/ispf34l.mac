/* REXX
 ×
 × Name: ISPF34L
 ×
 × Author: David Alcock
 ×         dalcock@csw.com
 ×         davea@ticnet.com
 ×
 × Purpose: Read the dataset list from the ISPF 3.4 SPFx.LIST and
 ×          create utility control cards and other functions.
 ×
 ×          This is a "Quick and dirty" utility designed to quickly
 ×          create control cards and perform other functions on
 ×          datasets found in a ISPF 3.4 listing.  It doesn't look
 ×          pretty but it is handy.
 ×
 × Note: Some of the oldest code uses "PUSH" and does things backwards.
 ×       Please do all new code with "QUEUE" so we have clear logic.
 ×
 ×
 × Disclaimer: This REXX exec is FREEWARE.  Use at your own risk.  It
 ×             is provided for your enjoyment and neither David
 ×             Alcock or his employer provides any warranty for it's
 ×             use.  I'd like to hear how it works on your system.
 ×
 ×             This software is not in the public domain but is
 ×             available free of charge and with source code provided.
 ×             It is copyright 1998 by David Alcock.  All rights
 ×             reserved.
 */

/**********************************************************************
***                                                                 ***
**           M o d i f i c a t i o n   H i s t o r y                 **
**                                                                   **
** Person     Date        Description                                **
** ---------- ----------- ------------------------------------------ **
** DGAlcock   16-MAY-1998 1.1 - Two of the IDCAMS functions were NOT **
**                        generating the IDCAMS step JCL;            **
** DGAlcock   21-APR-1998 1.0 - released on the Internet;            **
** DGAlcock   15-MAR-1998 Added IEHPROGM deletes (scratches);        **
**                        Made IEHPROGM renames use queue; Redesign  **
**                        of main menu;                              **
** DGAlcock   04-MAR-1998 Added SYSLIBxx DDNAME create;              **
** DGAlcock   05-FEB-1998 Added JOBINFO on comment after jobcard;    **
**                        Added creating DSAT output command         **
** DGAlcock   21-JAN-1998 Strip out non-dataset lines from input;    **
**                        Add better checking for FDR move and copy; **
**                        Add edit of sysut2 file at the end;        **
** DGAlcock   28-OCT-1997 Add jobstep for IEHPROGM_rename;           **
** DGAlcock   10-OCT-1997 Enhanced FDR_RENAMEs and added jobcard;    **
**                        Generate_IDCAMS_step was added;            **
** DGAlcock   26-SEP-1997 Added Write_out_Volser function and        **
**                        enhanced the DSAT function; Added sysut2_> **
**                        _dsn on the command line;                  **
** DGAlcock   25-SEP-1997 Added FDR Copy function;                   **
** DGAlcock   03-JUL-1995 Initial exec created;                      **
***                                                                 ***
**********************************************************************/

arg sysut1_dsn sysut2_dsn

user = sysvar(sysuid)

if sysut2_dsn == "" then sysut2_dsn = "@CNTLCRD"
jobinfo = ""
jctype = "q"
userid = sysvar(sysuid)

vrm = '1.0'

mtype = address()

if mtype == "TSO" × mtype == "MVS" then ,
   if sysvar(systsoe) > "2040" then systemid = mvsvar(syssmfid)
   else do
        cvt    = storage(10,4)
        dcvt   = c2d(cvt)
        smca   = storage(c2x(d2c(dcvt+x2d(c5))),3)
        dsmca  = c2d(smca)
        systemid = storage(c2x(d2c(dsmca+x2d(10))),4)
        end
else do
     say "This exec is intended for use on an IBM mainframe running "
         "MVS (but OS/390 is okay)"
     exit 12
     end

/***********************************************************************
* Installation dependant code:
*
* 1) Set the comand to clear screen: Use the command for your site!!!!!
*
* 2) Generate a job card.  This code uses the SHOWTSO installation
*    command to obtain ACF2 information: "programmer name", UID
*    string and default sysout destination.
*
*    There is a version of SHOWTSO on the CBT tape from Rockwell
*    International - I think it's on the overflow tape now.
*
*    If you don't have a SHOWTSO or another way of getting these
*    values, you could prompt for them.
*
* 3) Set the Migration volume name as set by your installation's disk
*    management system.  In ISPF v4, the volume will have a migration
*    level appended, but we will only check the first 6 bytes
***********************************************************************/

cmd_cls = "CLS"     /* TSO command to clear the screen */

"SHOWTSO NAME UID DEST"
acct = substr(uid,1,1)","substr(uid,1,1)","substr(uid,1,1)
acct = acct","substr(uid,2,3)

jc.1 = "//"userid"I JOB  ("acct"),"
jc.2 = "//          '"name"',"
jc.3 = "//          NOTIFY="userid",REGION=8M,MSGCLASS=X,"
jc.4 = "//          CLASS=U,TIME=1439"
jc.5 = "//BANNER    OUTPUT DEFAULT=YES,JESDS=ALL,DEST="dest
jc.0 = 5

/*
 × Set values for IBM's HSM
 */
migvol  = "MIGRAT"              /* migration volume name */
migtype = "migrated"            /* migration type for this product */
migprod = "HSM"                 /* migration product name */

/*
 × Set values for DMS (SAMS:Disk)
 */
migvol  = "ARCIVE"              /* migration volume name */
migtype = "archived"            /* migration type for this product */
migprod = "DMS (SAMS:Allocate)" /* migration product name */

 /* Note: last one of the migvol/migtype/migprod will be used */

/***********************************************************************
 × Verify that the input dataset exists
 ×
 × The SPF*.LIST file is a 3.4 dataset list.
 **********************************************************************/

if sysut1_dsn == "" then do
   say "Input SPF*.LIST dataset was not given, terminating"
   exit 12
   end

x = LISTDSI(sysut1_dsn)
if x <> 0 then do
   say "Error accessing DSN:" sysut1_dsn
   say "> "sysmsglvl1
   say "> "sysmsglvl2
   say "> SYSREASON: "sysreason
   exit
   end

sysut1_pdsn = sysdsname
parse value sysut1_dsn with . "(" member ")" .
if member <> "" then do
   sysut1_pdsn = sysut1_pdsn"("strip(member)")"
   end
sysut1_num = "*"

sysut1_dd = "I34L"random()
address TSO "ALLOCATE FILE("sysut1_dd") DA('"sysut1_pdsn"') SHR REUSE"
arc = rc
if arc <> 0 then do
   say "Error allocating input file: '"sysut1_pdsn"', RC="arc
   exit 12
   end

"EXECIO "sysut1_num" DISKR "sysut1_dd" (FINIS STEM sysut1_file."
erc = rc

if erc <> 0 then do
   say "Error reading input file: '"sysut1_pdsn"', RC="arc
   exit 12
   end
address TSO "FREE FILE("sysut1_dd")"

/***********************************************************************
* Weed out the non-dataset lines from the input file                   *
***********************************************************************/

listver = 0
weeded = 0
migcnt = 0

do i = 1 to sysut1_file.0

   if substr(sysut1_file.i,1,22) == "1 LISTING OF DATA SETS" then do
      sysut1_file.i = ""
      listver = 3
      weeded = weeded + 1
      iterate
      end
   if substr(sysut1_file.i,1,22) == "1 Listing of Data Sets" then do
      sysut1_file.i = ""
      listver = 4
      weeded = weeded + 1
      iterate
      end
   if substr(sysut1_file.i,1,18) == "     DATA SET NAME" then do
      sysut1_file.i = ""
      weeded = weeded + 1
      iterate
      end
   if substr(sysut1_file.i,1,18) == "  ----------------" then do
      sysut1_file.i = ""
      weeded = weeded + 1
      iterate
      end

   if strip(sysut1_file.i) == "" then do
      sysut1_file.i = ""
      weeded = weeded + 1
      iterate
      end

   if word(sysut1_file.i,1) == "PAGE:" then do
      sysut1_file.i = ""
      weeded = weeded + 1
      iterate
      end
   if word(sysut1_file.i,1) == "TIME:" then do
      sysut1_file.i = ""
      weeded = weeded + 1
      iterate
      end

   volume = word(sysut1_file.i,2)
   if substr(volume,1,6) == migvol then migcnt = migcnt + 1
   end

/***********************************************************************
* Show the menu
***********************************************************************/

address TSO cmd_cls

say "ISPF34L - version "vrm "- Freeware - ISPF 3.4 list processor"
/* Please keep the next line in the code but it's okay to leave it
   commented out: */
/* say "Copyright 1995-1998 by David Alcock. All rights reserved." */
say " "

if weeded == 0 then say "No input lines were weeded out"
else say weeded "lines were weeded out of "sysut1_file.0" input lines"

if migcnt == 0 then say "No "migtype" datasets found in input"
else say "Found "migcnt" files "migtype" to "migprod

say " "
say "Select one of the following:               System ID: "systemid
say " "
say "I1 - IDCAMS alias             M1 - Show PDS directory info"
say "I2 - IDCAMS catalogs_SYSRES   M2 - Invoke DSAT Command    "
say "I3 - IDCAMS catalogs          M3 - Write out volser       "
say "I4 - IDCAMS renames           M4 - //DDnames cards        "
say "I5 - IDCAMS deletes           M5 - RESTORE JCL cards      "
say " "
say "D1 - DMS Archive                                          "
say " "
say "F1 - FDR Renames             PM1 - IEHPROGM renames       "
say "F2 - FDR moves               PM2 - IEHPROGM deletes       "
say "F3 - FDR Copies"
say " "
pull option
select
  when option = "I1"  then call Generate_IDCAMS_alias
  when option = "I2"  then call Generate_IDCAMS_catalogs_SYSRES
  when option = "I3"  then call Generate_IDCAMS_catalogs
  when option = "I4"  then call Generate_IDCAMS_renames
  when option = "I5"  then call Generate_IDCAMS_deletes

  when option = "M1"  then call Show_directory_information
  when option = "M2"  then call Invoke_DSAT
  when option = "M3"  then call Write_out_Volser
  when option = "M4"  then call Generate_DDNAMES
  when option = "M5"  then call Generate_RESTORE_JCL_cards
  when option = "D1"  then call Generate_DMS_archives
  when option = "F1"  then call Generate_FDR_Renames
  when option = "F2"  then call Generate_FDR_MOVEs
  when option = "F3"  then call Generate_FDR_COPIES
  when option = "PM1" then call Generate_IEHPROGM_renames
  when option = "PM2" then call Generate_IEHPROGM_deletes
  otherwise
       say "Invalid option, terminating"
       exit
       end

exit

/*********************************************************************
* Insert the jobcard - either queue it or push it...
*********************************************************************/

Generate_jobcard:

if jctype == "q" then do
   do j = 1 to jc.0
      queue jc.j
      end
   queue '//*'
   queue '//** This job was generated by the %ISPF34L exec on' ,
         translate(date(),'-',' ') 'at' time()
   queue '//**'
   if jobinfo <> "" then do
      queue '//**' jobinfo
      queue '//*'
      end
   end
else do
     push '//*'
     push '//**' jobinfo
     if jobinfo <> "" then do
        push '//**'
        push '//** This job was generated by the %ISPF34L exec on' ,
             translate(date(),'-',' ') 'at' time()
        end
     push '//*'
     do j = jc.0 to 1 by -1
        push jc.j
        end
     end
return

/*********************************************************************
* Generate IDCAMS job step
*********************************************************************/

Generate_IDCAMS_step:

if jctype == "q" then do
   queue "//JUSTDOIT EXEC PGM=IDCAMS"
   queue "//SYSPRINT DD SYSOUT=*"
   queue "//SYSIN    DD *"
   end
else do
     push "//SYSIN    DD *"
     push "//SYSPRINT DD SYSOUT=*"
     push "//JUSTDOIT EXEC PGM=IDCAMS"
     end
return

/*********************************************************************
* Initialize for control card library output
*********************************************************************/

init_control_card:

if substr(sysut2_dsn,1,1) <> "'" then ,
   sysut2_dsn = sysvar(sysuid)"."sysut2_dsn

say "Writing to DSN="sysut2_dsn
call "OUTTRAP" "dummy.","*"
address TSO "DELETE '"sysut2_dsn"'"
call "OUTTRAP" "OFF"
address TSO "ALLOCATE FILE(SYSUT2) DA('"sysut2_dsn"')",
            "UNIT(SYSDA) NEW REUSE SPACE(5 5) TRACKS",
            "LRECL(80) BLKSIZE(6320) RECFM(F B)"

address TSO "NEWSTACK"   /* Place to put SYSUT2 output */
return

/*********************************************************************
* Terminate control card processing
*********************************************************************/

term_control_card:

QUEUE ''      /* add null line to indicate End-Of-File */
address TSO "EXECIO * DISKW SYSUT2 (FINIS"
erc = rc
if erc <> 0 then ,
   say "%ISPF34L - Terminating, EXECIO rc="erc
address TSO "FREE FILE(SYSUT2)"
address TSO "DELSTACK"

if sysvar(sysispf) == "ACTIVE" then do
   sysut2_dsn = strip(sysut2_dsn)
   address ISPEXEC
   "CONTROL ERRORS RETURN"
   "EDIT DATASET('"sysut2_dsn"')"
   erc = rc
   if erc > 4 then ,
      say "%ISPF34L - Could not edit "sysut2_dsn "rc="erc
   "CONTROL ERRORS CANCEL"
   end
return

/***********************************************************************
* FDR copy with rename
*
*    COPY TYPE=DSF,DSNENQ=NONE
*    SELECT DSN=SYS3.SYS.ACF2.CLIST,
*           NEWNAME=SYS2.SYS.ACF2.CLIST
*
*    MOVE TYPE=DSF
*    SELECT DSN=SYS3.SYS.ACF2.CLIST,
*           NEWNAME=SYS2.SYS.ACF2.CLIST
*
***********************************************************************/
Generate_FDR_Renames:

say "Executing: Generate_FDRDSF_Renames"

say "Please enter new volume:"
pull newvol
if newvol == "" then newvol = "bozo01"
newvol = translate(newvol)

call init_control_card
call generate_jobcard

lastvol = ""
num = 0

do i = 1 to sysut1_file.0
   if sysut1_file.i == "" then iterate /* skip null lines */

   parse value sysut1_file.i with dsname volume .

   if volume == newvol then do
      say "Skipping dataset="dsname
      say "           (already on "newvol")"
      iterate
      end

   if volume <> lastvol then do

      lastvol = volume
      num = num + 1
      queue '//* ==============================================='
      queue '//COPY'num' EXEC PGM=FDRCOPY,REGION=9M,TIME=1439'
      queue '//SYSPRINT  DD SYSOUT=*'
      queue '//SYSPRIN1  DD SYSOUT=*'
      queue '//SYSUDUMP  DD SYSOUT=*'
      queue '//ABNLDUMP  DD DUMMY'
      queue '//DISK1     DD DISP=SHR,UNIT=SYSALLDA,VOL=SER='volume
      queue '//TAPE1     DD DISP=SHR,UNIT=SYSALLDA,VOL=SER='newvol
      queue '//SYSIN     DD *'
      queue ' COPY TYPE=DSF,DSNENQ=NONE'
      end

   dsname = strip(dsname)
   ndsname = translate(dsname,' ','.')
   ndsname = delword(ndsname,1,1)
   ndsname = "SYS2."ndsname             /* Change new prefix ! */
   ndsname = translate(ndsname,'.',' ')

   queue '      SELECT DSN='dsname","
   queue '             NEWNAME='ndsname
   end

call term_control_card

return /* from Generate_FDR_Renames */


/***********************************************************************
* Write the FDR move JCL and select statements
***********************************************************************/
Generate_FDR_MOVEs:

say "Executing: Generate_FDRDSF_Moves"

say "Please enter new volume:"
pull newvol
if newvol == "" then newvol = "bozo01"
newvol = translate(newvol)
if words(newvol) > 1 then do
   say "%ISPF34L - You entered a more words than expected for volume"
   say "%ISPF34L - Using first one: "word(newvol,1)
   newvol = word(newvol,1)
   end

call init_control_card
call generate_jobcard

lastvol = ""
num = 0

do i = 1 to sysut1_file.0
   if sysut1_file.i == "" then iterate /* skip null lines */

   parse value sysut1_file.i with dsname volume .

   if volume == "??????" then do
      say "Skipping DSN="left(dsname,44) "(volume=??????)"
      iterate
      end

   fq_dsname = "'"strip(dsname)"'"
   rc = LISTDSI(fq_dsname)
   select
     when rc == 0 then do
          say "Select:  DSN="left(dsname,44) "Unit="sysunit
          end
     when sysreason == "0008" then do
          say "Skipping DSN="left(dsname,44) "(tape)"
          iterate
          end
     when sysreason == "0012" then do
          ndsn = translate(dsname,' ','.')
          last_node = word(ndsn,words(ndsn))
          if last_node == "DATA" × last_node == "INDEX" then do
             say "Skipping DSN="left(dsname,44) "(VSAM Comp)"
             iterate
             end
          say "Select:  DSN="left(dsname,44) sysdsorg
          end
     otherwise
          say "Error:   DSN="dsname
          say "           > "sysmsglvl1
          say "           > "sysmsglvl2
          say "           > SYSREASON: "sysreason
          iterate
          end


   if volume == newvol then do
      say "Skipping DSN="left(dsname,44) ,
          "(already on "newvol")"
      iterate
      end

   if volume <> lastvol then do

      lastvol = volume
      num = num + 1
      queue '//* ==============================================='
      queue '//MOVE'num' EXEC PGM=FDRCOPY,REGION=9M,TIME=1439'
      queue '//SYSPRINT  DD SYSOUT=*'
      queue '//SYSPRIN1  DD SYSOUT=*'
      queue '//SYSUDUMP  DD SYSOUT=*'
      queue '//ABNLDUMP  DD DUMMY'
      queue '//DISK1     DD DISP=SHR,UNIT=SYSALLDA,VOL=SER='volume
      queue '//TAPE1     DD DISP=SHR,UNIT=SYSALLDA,VOL=SER='newvol
      queue '//SYSIN     DD *'
      queue ' MOVE TYPE=DSF,DSNENQ=NONE'
      end
   queue '      SELECT DSN='dsname
   end

call term_control_card
return /* from Generate_FDR_Moves */

/***********************************************************************
* Write the FDR Copy JCL and select statements
***********************************************************************/
Generate_FDR_COPIES:

say "Executing: Generate_FDRDSF_Copies"

say "Please enter new volume:"
pull newvol
if newvol == "" then newvol = "bozo01"
newvol = translate(newvol)
if words(newvol) > 1 then do
   say "%ISPF34L - You entered a more words than expected for volume"
   say "%ISPF34L - Using first one: "word(newvol,1)
   newvol = word(newvol,1)
   end

call init_control_card
call generate_jobcard

lastvol = ""
num = 0

do i = 1 to sysut1_file.0
   if sysut1_file.i == "" then iterate /* skip null lines */

   parse value sysut1_file.i with dsname volume .

   if volume == "??????" then do
      say "Skipping DSN="left(dsname,44) "(volume=??????)"
      iterate
      end

   fq_dsname = "'"strip(dsname)"'"
   rc = LISTDSI(fq_dsname)
   select
     when rc == 0 then do
          say "Select:  DSN="left(dsname,44) "Unit="sysunit
          end
     when sysreason == "0008" then do
          say "Skipping DSN="left(dsname,44) "(tape)"
          iterate
          end
     when sysreason == "0012" then do
          ndsn = translate(dsname,' ','.')
          last_node = word(ndsn,words(ndsn))
          if last_node == "DATA" × last_node == "INDEX" then do
             say "Skipping DSN="left(dsname,44) "(VSAM Comp)"
             iterate
             end
          say "Select:  DSN="left(dsname,44) sysdsorg
          end
     otherwise
          say "Error:   DSN="dsname
          say "           > "sysmsglvl1
          say "           > "sysmsglvl2
          say "           > SYSREASON: "sysreason
          iterate
          end


   if volume == newvol then do
      say "Skipping DSN="left(dsname,44) ,
          "(already on "newvol")"
      iterate
      end

   if volume <> lastvol then do

      lastvol = volume
      num = num + 1
      queue '//* ==============================================='
      queue '//COPY'num' EXEC PGM=FDRCOPY,REGION=9M,TIME=1439'
      queue '//SYSPRINT  DD SYSOUT=*'
      queue '//SYSPRIN1  DD SYSOUT=*'
      queue '//SYSUDUMP  DD SYSOUT=*'
      queue '//ABNLDUMP  DD DUMMY'
      queue '//DISK1     DD DISP=SHR,UNIT=SYSALLDA,VOL=SER='volume
      queue '//TAPE1     DD DISP=SHR,UNIT=SYSALLDA,VOL=SER='newvol
      queue '//SYSIN     DD *'
      queue ' COPY TYPE=DSF,DSNENQ=NONE,NOCAT'
      end
   queue '      SELECT DSN='dsname
   end

call term_control_card
return /* from Generate_FDR_COPIES */

/***********************************************************************
* IEHPROGM renameds
*
*   RENAME DSNAME=datasetname,
*                 NEWNAME=prefix.suffix,
*                 VOL=3390=SYSTRS
*
***********************************************************************/
Generate_IEHPROGM_renames:

say "Executing: Generate_IEHPROGM_renames"
say " "
say "Enter device type: 3380 or 3390"
pull dtype
dtype = strip(dtype)
select
  when dtype == "3380" then nop
  when dtype == "3390" then nop
  when dtype == ""     then do
       dtype = "3390"
       say "Device type not given, using 3390"
       end
  otherwise
     say "Unknown device type accepted:" dtype
  end

call init_control_card
call generate_jobcard

queue "//PROGM   EXEC PGM=IEHPROGM"

lvol = ""
do i = 1 to sysut1_file.0
   if sysut1_file.i == "" then iterate /* skip null lines */

   parse value sysut1_file.i with dsname volume .
   if volume == "" then iterate
   if volume == "*VSAM*" then iterate
   if lvol <> volume then do
      queue "//"left(volume,8)" DD" ,
            "DISP=SHR,VOL=SER="volume",UNIT="dtype
      lvol = volume
      end

   end

queue "//VDSBYPAS DD DUMMY"
queue "//SYSPRINT DD SYSOUT=*"
queue "//SYSIN    DD *"


do i = 1 to sysut1_file.0
   if sysut1_file.i == "" then iterate /* skip null lines */

   parse value sysut1_file.i with dsname volume .
   if volume == "" then volume == "<volume>"
   if volume == "*VSAM*" then do
      say "Skipping VSAM dataset: "dsname
      iterate
      end

   dsname = strip(dsname)
   ndsname = translate(dsname,' ','.')
   ndsname = delword(ndsname,1,1)
   ndsname = "SYS2."ndsname","
   ndsname = translate(ndsname,'.',' ')
   dsname = dsname","

            /*....+....1....+....2....+....3 */
   lineout = " RENAME DSNAME=oldname,
   lineout = overlay(dsname,lineout,16)
   queue lineout

            /*....+....1....+....2....+....3 */
   lineout = "               NEWNAME=newname,
   lineout = overlay(ndsname,lineout,24)
   queue lineout

   lineout = "               VOL="dtype"="volume
   queue lineout

   end


call term_control_card

return /* from Generate_IEHPROGM_renames */

/***********************************************************************
 × IEHPROGM deletes
 ×
 × SCRATCH DSNAME=dsname,VOL=dtype=volume,PURGE
 ×
 × SCRATCH DSNAME=BOZO.CLOWNLIB,VOL=3390=CIRCUS,PURGE
 ×
 **********************************************************************/
Generate_IEHPROGM_deletes:

say "Executing: Generate_IEHPROGM_deletes"
say " "
say "Enter device type: 3380 or 3390"
pull dtype
dtype = strip(dtype)
select
  when dtype == "3380" then nop
  when dtype == "3390" then nop
  when dtype == ""     then do
       dtype = "3390"
       say "Device type not given, using 3390"
       end
  otherwise
     say "Unknown device type accepted:" dtype
  end

call init_control_card
call generate_jobcard

queue "//PROGM   EXEC PGM=IEHPROGM"

lvol = ""
do i = 1 to sysut1_file.0
   if sysut1_file.i == "" then iterate /* skip null lines */

   parse value sysut1_file.i with dsname volume .
   if volume == "" then iterate
   if volume == "*VSAM*" then iterate
   if lvol <> volume then do
      queue "//"left(volume,8)" DD" ,
            "DISP=SHR,VOL=SER="volume",UNIT="dtype
      lvol = volume
      end

   end

queue "//VDSBYPAS DD DUMMY"
queue "//SYSPRINT DD SYSOUT=*"
queue "//SYSIN    DD *"


do i = 1 to sysut1_file.0
   if sysut1_file.i == "" then iterate /* skip null lines */

   parse value sysut1_file.i with dsname volume .

   if volume == "" then volume == "<volume>"
   if volume == "*VSAM*" then do
      say "Skipping VSAM dataset: "dsname
      iterate
      end

   dsname = strip(dsname)
   queue  " SCRATCH DSNAME="dsname",VOL="dtype"="volume",PURGE"

   end


call term_control_card

return /* from Generate_IEHPROGM_deletes */

/***********************************************************************
* IDCAMS deletes                                                       *
***********************************************************************/

Generate_IDCAMS_deletes:

say "Executing: Generate_IDCAMS_deletes"

call init_control_card
jctype = "q"
call generate_jobcard
call generate_IDCAMS_step

do i = 1 to sysut1_file.0
   if sysut1_file.i == "" then iterate /* skip null lines */

   parse value sysut1_file.i with dsname .

   queue " DELETE '"dsname"'"

   end

call term_control_card

return /* from Generate_IDCAMS_renames */

/***********************************************************************
* IDCAMS catalogs
*
*   DEFINE NONVSAM( -
*                   NAME(ndsname) -
*                   VOLUMES(volume) -
*                   DEVICETYPES(3380) -
*                 )
***********************************************************************/

Generate_IDCAMS_catalogs:

say "Executing: Generate_IDCAMS_catalogs"

call init_control_card

do i = 1 to sysut1_file.0
   if sysut1_file.i == "" then iterate /* skip null lines */

   parse value sysut1_file.i with dsname volume .

   dsname = strip(dsname)
   ndsname = translate(dsname,' ','.')
   ndsname = delword(ndsname,1,1)
   ndsname = "HPS."ndsname
   ndsname = translate(ndsname,'.',' ')

   lineout = " "
   PUSH lineout
   lineout = "               ) CATALOG(CATALOG.MASTER5)"
   PUSH lineout
            /*....+....1....+....2....+....3 */
   lineout = "                DEVICETYPES(3390) - "
   PUSH lineout
            /*....+....1....+....2....+....3 */
   lineout = "                VOLUMES("volume") - "
   PUSH lineout
   lineout = "                NAME("dsname") - "
   PUSH lineout
   lineout = " DEFINE NONVSAM( - "
   PUSH lineout
   lineout = "        CATALOG(CATALOG.MASTER5)"
   PUSH lineout
   lineout = " DELETE "dsname " NOSCRATCH - "
   PUSH lineout

   end

jctype = "p"
call generate_jobcard
call generate_IDCAMS_step
call term_control_card

return /* from Generate_IDCAMS_catalogs */

/***********************************************************************
* IDCAMS catalogs for datasets on the SYSRES
*
*   DEFINE NONVSAM( -
*                   NAME(ndsname) -
*                   VOLUMES(******) -
*                   DEVICETYPES(3380) -
*                 )
***********************************************************************/

Generate_IDCAMS_catalogs_SYSRES:

say "Executing: Generate_IDCAMS_catalogs for SYSRES"

call init_control_card

do i = 1 to sysut1_file.0
   if sysut1_file.i == "" then iterate /* skip null lines */

   parse value sysut1_file.i with dsname .

   lineout = "               CATALOG(CATALOG.MASTER5)"
   PUSH lineout
   lineout = "               ) -"
   PUSH lineout
            /*....+....1....+....2....+....3 */
   lineout = "                DEVICETYPES(3380) - "
   PUSH lineout
            /*....+....1....+....2....+....3 */
   lineout = "                VOLUMES(******) - "
   PUSH lineout
   lineout = "                NAME("dsname") - "
   PUSH lineout
   lineout = " DEFINE NONVSAM( - "
   PUSH lineout

   end

jctype = "p"
call generate_IDCAMS_step
call generate_jobcard
call term_control_card

return /* from Generate_IDCAMS_catalogs_SYSRES */

/***********************************************************************
* IDCAMS dataset renames
*
* ALTER datasetname -
*       NEWNAME(newdatasetname)
***********************************************************************/

Generate_IDCAMS_renames:

say "Executing: Generate_IDCAMS_renames"

call init_control_card

do i = 1 to sysut1_file.0
   if sysut1_file.i == "" then iterate /* skip null lines */

   parse value sysut1_file.i with dsname volume .

   dsname = strip(dsname)
   ndsname = translate(dsname,' ','.')
   ndsname = delword(ndsname,1,1)
   ndsname = "HPS."ndsname
   ndsname = translate(ndsname,'.',' ')

   lineout = "       NEWNAME("ndsname")"
   PUSH lineout
   lineout = " ALTER "dsname" - "
   PUSH lineout

   end

jctype = "p"
call generate_IDCAMS_step
call generate_jobcard
call term_control_card

return /* from Generate_IDCAMS_renames */

/***********************************************************************
 ×    Create IDCAMS alias control cards
 ×
 ×    DEFINE ALIAS ( -
 ×                   NAME(newname) -
 ×                   RELATE(current.name ) -
 ×                 ) -
 ×                 CATALOG(CATALOG.MASTER5)
 **********************************************************************/

Generate_IDCAMS_alias:

say "Executing: Generate_IDCAMS_alias"
say "--> It is assumed that the input has the current name and" ,
    "and new.names as the first and second 'words' of the file"

call init_control_card

do i = 1 to sysut1_file.0
   if sysut1_file.i == "" then iterate /* skip null lines */

   parse value sysut1_file.i with cname nname .

   cname = translate(strip(cname)) /* uppercase + strip */
   nname = translate(strip(nname))

   push "             CATALOG(CATALOG.MASTER5)"
   push "             ) -"
   push "               RELATE("cname") -"
   push "               NAME("nname") -"
   push "DEFINE ALIAS ( -"

   end

jctype = "p"
call generate_IDCAMS_step
call generate_jobcard
call term_control_card

return /* from Generate_IDCAMS_alias */

/***********************************************************************
* Generate DMS (SAMS:DISK) archive control cards out
*
* ARCHIVE DSN=dsname,RETPD=700,SCRATCH
***********************************************************************/

Generate_DMS_archives:

call init_control_card

say "Executing: Generate_DMS_archives"

do i = 1 to sysut1_file.0
   if sysut1_file.i == "" then iterate /* skip null lines */

   parse value sysut1_file.i with dsname volume .

   dsname = strip(dsname)
   ndsname = translate(dsname,' ','.')
   ndsname = delword(ndsname,1,1)
   ndsname = "HPS."ndsname
   ndsname = translate(ndsname,'.',' ')

   lineout = " ARCHIVE DSN="dsname",SCRATCH,RECATALOG"
   PUSH lineout

   end

   lineout = "//SYSIN  DD  *"
   PUSH lineout
   lineout = "//           S='*'"
   PUSH lineout
   lineout = "//         EXEC  ARCHIVE,"
   PUSH lineout
   lineout = "//jobname JOB card,TIME=1439,CLASS=U"
   PUSH lineout

call term_control_card

return /* from Generate_DMS_archives */

/***********************************************************************
* Generate Restore job stream
*
* This can be used to get all datasets recalled back on DASD
***********************************************************************/

Generate_RESTORE_JCL_cards:

say "Executing: Generate_Restore-JCL-Cards"

call init_control_card
call generate_jobcard

queue '//****************************************************'
queue '//**   ACCESS A DATASET IN BATCH TO RECALL IT'
queue '//****************************************************'
queue '//RESTORE  PROC DSN='
queue '//PDS      EXEC PGM=IEBGENER,COND=EVEN'
queue '//SYSIN    DD DUMMY'
queue '//SYSPRINT DD SYSOUT=*'
queue '//SYSUDUMP DD SYSOUT=*'
queue '//ABNLDUMP DD DUMMY'
queue '//SYSUT1   DD DISP=SHR,DSN=&DSN'
queue '//SYSUT2   DD DISP=(,DELETE),UNIT=SYSDA,SPACE=(CYL,10)'
queue '// PEND'
queue '//* --------------------------------------------------'

do i = 1 to sysut1_file.0
   if sysut1_file.i == "" then iterate /* skip null lines */

   parse value sysut1_file.i with dsname .

   dsname = strip(dsname)

   queue "//#"i" EXEC RESTORE,DSN='"dsname"'"
   end

call term_control_card

return /* from Generate_RESTORE_JCL_cards */

/***********************************************************************
* Show PDS directory information
***********************************************************************/

Show_directory_information:

say "Directory information:"

do i = 1 to sysut1_file.0
   if sysut1_file.i == "" then iterate /* skip null lines */

   parse value sysut1_file.i with dsname volume .

   fq_dsname = "'"strip(dsname)"'"
   say "Processing dsn="fq_dsname

   x = LISTDSI(fq_dsname)
   if x <> 0 then do
      say "> Could not find DSN:" fq_dsname
      say "  > "sysmsglvl1
      say "  > "sysmsglvl2
      say "  > SYSREASON: "sysreason
      iterate
      end

    if sysdsorg == "PO" then do
       x = LISTDSI(fq_dsname "DIRECTORY") /* get directory bl   ks */
       say   "> Directory used...."sysudirblk
       say   "> Directory alloc..."sysadirblk
       end
    else say "> Skipping dataset, Not a PDS"
   end /* of select */

return /* from Show_Directory_information */

/***********************************************************************
* Invoke DSAT to show information on cataloged version of these datasets
* The volume field is ignored
*
* In case the user wants the "DSAT" command generated for use elsewhere
* (like to rerun in batch to get the output), we put the command out.
***********************************************************************/

Invoke_DSAT:

address TSO "CLS"
say "Showing Dataset information for cataloged versions:"

call init_control_card
jobinfo = "Invoke the DSAT command"
call generate_jobcard
queue '//DSATING EXEC PGM=IKJEFT01,TIME=1439,DYNAMNBR=100'
queue '//SYSTSPRT DD SYSOUT=*'
queue '//SYSTSIN  DD *'

d = 0

fdsn = ""
do i = 1 to sysut1_file.0
   if sysut1_file.i == "" then iterate /* skip null lines */

   parse value sysut1_file.i with dsname .

   fdsn = fdsn ××" '"strip(dsname)"'"

   d = d + 1
   select
     when d == 1 then queue " DSAT ('"strip(dsname)"' +"
     when i == sysut1_file.0 then queue "       '"strip(dsname)"')"
     otherwise
        queue "       '"strip(dsname)"' +"
        end

   end

call "OUTTRAP" "dsat.","*"
address TSO "DSAT ("fdsn")"
call "OUTTRAP" "OFF"

queue '//'
queue '//* Output from DSAT:'
queue '//* '
do i = 1 to dsat.0
   queue left('//* 'dsat.i,71)
   say strip(dsat.i)
   end

call term_control_card

return /* from Invoke_DSAT */

/***********************************************************************
* Write out volser
***********************************************************************/

Write_out_Volser:

say "Writing out volser information:"

call init_control_card

do i = 1 to sysut1_file.0
   if sysut1_file.i == "" then iterate /* skip null lines */

   parse value sysut1_file.i with dsname .

   fq_dsname = "'"strip(dsname)"'"
   say "Processing dsn="fq_dsname

   x = LISTDSI(fq_dsname)
   if x <> 0 then do
      say "          > Could not find DSN:" fq_dsname
      say "            > "sysmsglvl1
      say "            > "sysmsglvl2
      say "            > SYSREASON: "sysreason
      sysvolume = "??????"
      end
   queue dsname sysvolume

   end

call term_control_card
return /* from Write_out_Volser */

/***********************************************************************
* Generate DDNAMEs - good for use with the DA$PDSR utility
***********************************************************************/

Generate_DDNAMEs:

say "Writing out //DDNAMEs:"

call init_control_card

n = 0

do i = 1 to sysut1_file.0
   if sysut1_file.i == "" then iterate /* skip null lines */

   parse value sysut1_file.i with dsname .

   dsname = translate(strip(dsname))

   if n < 100 then ,
      queue "//SYSLIB"right(n,2,'0')" DD DISP=SHR,DSN="dsname
   else queue "//SYSLI"right(n,3,'0')" DD DISP=SHR,DSN="dsname

   n = n + 1
   end

call term_control_card
return /* from Generate_DDNAMEs */

/***********************************************************************
* The end of ISPF34L exec
***********************************************************************/

/* × ---------EEEEEEEE---------NN-----NN---------DDDDDDD--------- ×
   × ---------EE---------------NNNN---NN---------DD----DD-------- ×
   × ---------EEEEE------------NN-NN--NN---------DD----DD-------- ×
   × ---------EE---------------NN---NNNN---------DD----DD-------- ×
   × ---------EEEEEEEE---------NN----NNN---------DDDDDDD--------- × */
