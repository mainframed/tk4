./ ADD NAME=$README  0102-98240-98240-1449-00042-00018-00000-IBMUSER

 The contents of this file are FREEWARE. Use at your own risk. It
 is provided for your enjoyment and neither David Alcock or his
 employer provides any warranty for their use.  I'd like to hear how
 they work on your system:

    David Alcock
    dalcock@csw.com ...... Internet email (work)
    davea@ticnet.com ..... Internet email (home)

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Short description of the MPF exits I use at my shop:

DA$MPF01 - Append the current date to the message passed
DA$MPF02 - Answer WTOR with "W"
DA$MPF03 - Makes message IEF450I IEF451I IEF452I
           and IEF453I desc=2 for production jobs.
           this prevents 'job abend' and 'jcl
           error' messages from rolling off
           the console for production jobs.
DA$MPF04 - Reply "M" to IEC709I
DA$MPF05 - Suppress WTO from JES2 JOB LOG - It will still go to the
           SYSLOG
DA$MPF06 - Answer "U" to a WTOR
DA$MPF07 - Answer "BYPASS" to a WTOR
DA$MPF08 - Notify user in real time of a critical WTO message from a
           batch job that he submitted.
DA$MPF09 - Put a message in the JOB LOG when message CSV019I is for
           an ABENDAID module.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
3 of the MPF exits use Enter and Exit housekeeping macros: DA#ENTER
and DA#LEAVE.  Either obtain them from:

   . File 311 on the CBT tape version 418 or higher in the DASRC member
   . http://www.ticnet.com/davea/mvs/freeware/dasrc.zip

or replace with your favorite macro that does this or with straight
assembler.  DA$MPF08 is a newer MPF exit that uses ESA housekeeping
entry and exit assembler code (no macro) that you could insert into
the ones that use the macro.
./ ADD NAME=DA$MPF01 0102-97056-98240-1033-00270-00259-00000-IBMUSER
DA$MPF01 TITLE '                     Append the date to some messages'
***********************************************************************
***                                                                 ***
**                                                                   **
**    Module Name       = DA$MPF01                                   **
**                                                                   **
**    Descriptive Name  = Append the current date to some messages.  **
**                                                                   **
**    Reference         = GC28-1147 MVS-XA SPL: User Exits           **
**                                                                   **
**    Activated by      = Specifed in active MPF member of Parmlib:  **
**                        - SET MPF=XX                               **
**                        - WHERE XX IS A MEMBER IN PARMLIB:         **
**                          'SYS1.PARMLIB(MPFLSTXX)'                 **
**                        - REFERENCE IN MPFLSTXX:                   **
**                       IEF403I,SUP(NO),USEREXIT(DA$MPF01)          **
**                       IEF404I,SUP(NO),USEREXIT(DA$MPF01)          **
**                      $HASP373,SUP(NO),USEREXIT(DA$MPF01)          **
**                      $HASP395,SUP(NO),USEREXIT(DA$MPF01)          **
**                                                                   **
** - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - **
**                                                                   **
**    Change:                                                        **
**                                                                   **
**      IEF403I IBMUSERP - STARTED - TIME=16.38.17                   **
**      IEF404I IBMUSERP - ENDED - TIME=16.38.23                     **
**                                                                   **
**    To:                                                            **
**                                                                   **
**      IEF403I IBMUSERP - STARTED - TIME=16.38.17 - 25-FEB-1997     **
**      IEF404I IBMUSERP - ENDED - TIME=16.38.23 - 25-FEB-1997       **
**                                                                   **
** - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - **
**                                                                   **
**  If "MONITOR JOBNAMES" is not active, then we update these as     **
**  well:                                                            **
**                                                                   **
**      $HASP373 DTSO626Z STARTED - INIT    1 - CLASS U - SYS DA$5   **
**      $HASP395 DTSO626Z ENDED                                      **
**                                                                   **
***                                                                 ***
***********************************************************************
         EJECT
         IEZVX100 ,                       WTO exit parameter list
         PRINT NOGEN
         IHAPSA ,                         Prefixed Save Area
         IHAASCB ,                        Address Space Control Block
         IHAASSB ,                        ASCB Secondard block
         IAZJSAB ,                        Job Schedular Address spc
         YREGS ,                          Equate registers to R0-R15
         PRINT GEN
*
** Using the official ASMH/HLASM distinction trick, simulate the
** SYSVER and SYSDATEC variables of HLASM when assembled under
** ASMH...Taken from Gilbert Saint-flour's SHOWMVS.
*
         LCLA  &ASMH_HLASM
         AIF   (T'&ASMH_HLASM EQ 'N').ASMH1X
&SYSVER  SETC  'ASMH'
&SYSDATC SETC  '20'.'&SYSDATE'(7,2)'&SYSDATE'(1,2)'&SYSDATE'(4,2)
         AIF   ('&SYSDATC' LT '20500000').ASMH1X
&SYSDATC SETC  '19'.'&SYSDATE'(7,2)'&SYSDATE'(1,2)'&SYSDATE'(4,2)
.ASMH1X  ANOP
*-Convert assembly date from SYSDATC format "YYYYMMDD" to "YYYY/MM/DD"
         LCLC  &ASMDATE
&ASMDATE SETC  '&SYSDATC'(1,4).'/'.'&SYSDATC'(5,2).'/'.'&SYSDATC'(7,2)
         EJECT
***********************************************************************
***                                                                 ***
**       Intialization                                               **
***                                                                 ***
***********************************************************************
         SPACE 2
DA$MPF01 CSECT ,
DA$MPF01 AMODE 31
DA$MPF01 RMODE ANY
*
** Create a standard O/S eyecatcher
*
EC       B     ECL(0,R15)               Bump past Eyecatcher
         DC    AL1(L'ECLIT)             Length of eyecatcher
ECLIT    DC    C'DA$MPF01 &ASMDATE &SYSTIME - Echo message to TSO user'
         DS    0H                       Ensure halfword alignment
ECL      EQU   *-EC
*
** Standard ESA entry housekeeping
*
         BAKR R14,0                     Save regs
         LAE   R12,0(R15,0)             Get base register
         USING DA$MPF01,R12             Get addressibility
         SAC  0
         SYSSTATE ASCENV=P
         STORAGE OBTAIN,LENGTH=WORKDSL,LOC=BELOW Obtain storage
         LR   R13,R1                    Point to Save Area
         MVC  4(4,R13),=C'F1SA'         Indicate stack SA
         USING WORKDS,R13               Get addressibility to area
*
** Locate MPF exit parameter list and message area
*
         EREG  R0,R1                    Restore regs 0 and 1
         L     R2,0(R1)                 Get CTXT Address
         ICM   R3,B'1111',CTXTTXPJ-CTXT(R2) Locate Major
         BZ    EXIT                     Shouldn't happen, but leave
*
** See we want to touch these guys
*
         TM    CTXTMTY1-CTXT(R2),CTXTMTYA  Monitor jobnames active?
         BNO   TEST$X                   No, hit the JES2 start/stop
         CLC   CTXTTMSG-CTXTATTR(7,R3),=C'$HASP373'
         BE    EXIT
         CLC   CTXTTMSG-CTXTATTR(7,R3),=C'$HASP395'
         BE    EXIT
TEST$X   DS    0H
*
** Append the current date onto the end of the message
*
         TIME  BIN                      Get current time and date
         STM   R0,R1,DOUBLE             Save time and date
         LA    R15,CTXTTMSG-CTXTATTR(R3) Locate to start of message
         SLR   R14,R14                  Clear register
         ICM   R14,B'0011',CTXTTLEN-CTXTATTR(R3) Get length
         AR    R15,R14
         MVC   0(3,R15),=C' - '
         LA    R15,3(R15)
         LM    R0,R1,DOUBLE             Save time and date
         BAS   R14,CONVERT_TO_TODSTRING Convert the time and date
         LA    R14,CTXTTMSG-CTXTATTR(R3) Locate to start of message
         SR    R15,R14
         STCM  R15,B'0011',CTXTTLEN-CTXTATTR(R3) Set new length
         OI    CTXTRFB1-CTXT(R2),CTXTRCMT  Say we changed it
*
** Release resources and return to caller
*
EXIT     DS    0H
         LR    R2,R13                     Get storage address
         STORAGE RELEASE,LENGTH=WORKDSL,ADDR=(R2) Release storage
         SLR   R15,R15                    Set return code
         PR                               Return to caller
         EJECT
***********************************************************************
***                                                                 ***
** Convert input binary time and packed decimal julian date to a     **
** fancy output string of "dd-mmm-ccyy hh:mm:ss pm"                  **
**                                                                   **
** Input: R0 - Time in binary                                        **
**        R1 - Date in packed decimal                                **
**        R15 - points to the output area                            **
**                                                                   **
** Output: the area in R15 will be filled in and R15 updated with    **
**         address just past the filled in area.                     **
***                                                                 ***
***********************************************************************
         SPACE 2
CONVERT_TO_TODSTRING DS 0H
         ST    R15,CTT_OUT                Save output area address
         ST    R14,CTT_RA                 Save return address
*
** Get the input time (binary) and date (packed decimal) and convert
** it to a STCK TOD format
*
         LA    R14,CTT_CIN                Locate routine Time/Date area
         XC    0(CTAREAL,R14),0(R14)      Clear to binary zeros
         STCM  R0,B'1111',CTAREA_TIME-CTAREA(R14) Save Time
         STCM  R1,B'1111',CTAREA_DATE-CTAREA(R14) Save Date
*
         CONVTOD CONVVAL=CTT_CIN,         Convert this Time/Date       @
               TODVAL=CTT_TOD,            ..To TOD format              @
               TIMETYPE=BIN,              ..Time is binary format      @
               DATETYPE=YYDDD,            ..Date is julian 0CYYDDDf    @
               MF=(E,PARMLIST)
         LTR   R15,R15                    CONVTOD worked?
         BNZ   CTT$JUL                    Failed, do primitive way
*
** Convert the TOD stamp into time and date formats
*
         STCKCONV STCKVAL=CTT_TOD,        Convert this TOD Stamp       @
               CONVVAL=CTT_SOUT,          ..Into these date/time areas @
               TIMETYPE=DEC,              ..Output time format         @
               DATETYPE=DDMMYYYY,         ..Output Date format         @
               MF=(E,PARMLIST)
         LTR   R15,R15                    CONVTOD worked?
         BNZ   CTT$JUL                    Failed, do primitive way
*
** Format the date
*
         L     R15,CTT_OUT                Locate output area
*                               D  D  -  M  M  -  C  C  Y  Y
         MVC   0(11,R15),=X'40,20,20,60,20,20,60,20,20,20,20'
         ED    0(11,R15),CTT_SOUT+8       Edit it to " dd-mm-ccyy"
         MVC   0(3,R15),1(R15)            Move "dd-" over "dd-...-ccyy"
         PACK  DOUBLE(8),4(2,R15)         Get month in decimal
         CVB   R14,DOUBLE                 Convert to binary
         BCTR  R14,0                      Make relative to zero
         MH    R14,=H'3'                  Multiply for month offset
         LA    R1,=C'JanFebMarAprMayJunJulAugSepOctNovDec'
         AR    R1,R14                     Locate month entry
         MVC   3(3,R15),0(R1)             Move "mmm" to "dd-mmm-ccyy"
         OI    0(R15),X'F0'               Ensure leading zero
         LA    R15,11(R15)                Bump past date
*
         MVC   0(3,R15),=C' - '
         LA    R15,3(R15)
CTT$JUL  DS    0H
         UNPK  DOUBLE2(9),#CTTPMD(5)           *
         MVZ   DOUBLE2(8),=8X'00'              ** Hex convert
         TR    DOUBLE2(8),=C'0123456789ABCDEF' *
*
         CLI   #CTTPMD,0                  Century = 19xx?
         BE    CTT$Y19
         CLI   #CTTPMD,1                  Century = 20xx?
         BE    CTT$Y20
         CLI   #CTTPMD,2                  Century = 21xx?
         BNE   CTT$YX
         MVC   0(2,R15),=C'22'
         LA    R15,2(R15)
         B     CTT$YX
CTT$Y19  DS    0H
         MVC   0(2,R15),=C'19'
         LA    R15,2(R15)
         B     CTT$YX
CTT$Y20  DS    0H
         MVC   0(2,R15),=C'20'
         LA    R15,2(R15)
CTT$YX   DS    0H
         MVC   0(2,R15),DOUBLE2+2         Get yy from "0cyydddf"
         MVI   2(R15),C'.'                Insert dot
         MVC   3(3,R15),DOUBLE2+4         Get ddd from "0cyydddf"
         LA    R15,6(R15)                 Locate past "yy.ddd'
         L     R14,CTT_RA                 Get return address
         BSM   0,R14                      Return to caller
#CTTPMD  EQU   CTT_CIN+(CTAREA_DATE-CTAREA)    Generate offset
         EJECT
***********************************************************************
***                                                                 ***
**       Constants                                                   **
***                                                                 ***
***********************************************************************
         SPACE 2
         LTORG ,
         EJECT
***********************************************************************
***                                                                 ***
**       GETMAINed work area                                         **
***                                                                 ***
***********************************************************************
         SPACE 2
         DS    0D
WORKDS   DSECT ,
         DS    18F                    Register Save Area
DOUBLE   DS    D
DOUBLE2  DS    2D
PARMLIST DS    10F
         DS    0D
CTT_TOD  DS    D                        ..TOD (STCK) area
CTT_OUT  DS    F                        ..Output area address
CTT_RA   DS    F                        ..Return address
CTT_CIN  DS    XL(CTAREAL)              ..CONVTOD input area
CTT_SOUT DS    XL16                     ..STCKCON output area
         DS    0D
WORKDSL  EQU   *-WORKDS
*
** Map CONVTOD area
*
CTAREA          DSECT ,
CTAREA_TIME     DS    XL4
                DS    XL4
CTAREA_DATE     DS    XL4
                DS    XL4
CTAREAL         EQU   *-CTAREA
         END
./ ADD NAME=DA$MPF02 0104-91360-98240-1443-00119-00119-00000-IBMUSER
DA$MPF02 TITLE '                  Answer WTOR with "W" '
***********************************************************************
***                                                                 ***
**                                                                   **
**    Module Name       = DA$MPF02                                   **
**                                                                   **
**    Descriptive Name  = Communications task user exit to answer    **
**                        WTORs with "W"                             **
**                                                                   **
**    Reference         = GC28-1147 MVS-XA SPL: User Exits           **
**                                                                   **
**    Activated by      = SET MFP=XX  (MVS operator command)         **
**                        - Where XX is a member in 'SYS1.PARMLIB':  **
**                          'SYS1.PARMLIB(MPFLSTXX)'                 **
**                        - REFERENCE IN MPFLSTXX:                   **
**                       ERB306D,SUP(NO),USEREXIT(DA$MPF02)          **
**                       CICS...,SUP(NO),USEREXIT(DA$MPF02)          **
***                                                                 ***
***********************************************************************
         EJECT
DA$MPF02 DA#ENTER 'WTO EXIT: REPLY W TO A WTOR',                       @
               AMODE=31,RMODE=ANY,                                     @
               RENT=YES,LV=WORKDSL,SP=230,GMTYPE=RU,LOC=BELOW
         USING WORKDS,R13
*
         L     R2,0(R1)                   Get CTXT Address
         L     R3,CTXTTXPJ-CTXT(R2)       Find Message attributes
         TM    CTXTTFB1-CTXTATTR(R3),CTXTTFWR  WTOR?
         BNO   EXIT                       No, ignore it
         EJECT
***********************************************************************
***                                                                 ***
**       Reply to the WTOR with a "W"                                **
***                                                                 ***
***********************************************************************
         SPACE 2
*
** Issue WTO message for an Audit Trail
*
         LA    R15,WTO                    Locate WTO work area
         MVC   0(C_WTOL,R15),C_WTO        Copy in WTO
         LA    R15,4(R15)                 Bump past header
         MVC   0(MSG1L,R15),MSG1          Move in message
         LA    R15,MSG1L(R15)             Bump past it
         MVC   0(2,R15),CTXTRPID-CTXT(R2) Get reply number
         WTO   ,MF=(E,WTO)                Issue the WTO
*
** Answer the WTOR: "R xx,W"
*
         LA    R14,REPLY                 Locate reply area
         XC    0(MGCRLTH,R14),0(R14)     Clear it to binary zeros
*
         LA    R15,MGCRTEXT-MGCRPL(R14)  Locate reply area
         MVC   0(2,R15),=C'R '           Move in Text
         LA    R15,2(R15)                Bump past it
         MVC   0(2,R15),CTXTRPID-CTXT(R2) Get reply number
         LA    R15,2(R15)                Bump past the number
         MVC   0(2,R15),=C',W'           Complete the message
         LA    R15,2(R15)                Bump past the suffix
*
         SR    R15,R14                   Length = end - Beginning
         STC   R15,MGCRLGTH-MGCRPL(R14)  Save length
*
         SLR   R0,R0                     Clear register
         MGCR  REPLY                     Issue reply
         EJECT
***********************************************************************
***                                                                 ***
**       Termination section                                         **
***                                                                 ***
***********************************************************************
         SPACE 2
EXIT     EQU   *
         DA#LEAVE SP=230,FMTYPE=RU
         EJECT
***********************************************************************
***                                                                 ***
**       Constants                                                   **
***                                                                 ***
***********************************************************************
         SPACE 2
MSG1     DC    C'DA$202I WTOR Answered with W, Reply='
MSG1L    EQU   *-MSG1
         DS    0D
C_WTO    WTO   '                                                       @
                                                                       @
                       ',                                              @
               ROUTCDE=(11,14),DESC=7,MCSFLAG=HRDCPY,MF=L
C_WTOL   EQU   *-C_WTO
*
** Literals
*
         LTORG ,
         DS    0D
         EJECT
***********************************************************************
***                                                                 ***
**       Getmained work area                                         **
***                                                                 ***
***********************************************************************
         SPACE 2
         DS    0D
WORKDS   DSECT ,
         DS    18F                    Register Save Area
REPLY    DS    XL(MGCRLTH)            Reply (operator command)
WTO      DS    XL(C_WTOL)             Write to operator
         DS    0D
WORKDSL  EQU   *-WORKDS
         EJECT
***********************************************************************
***                                                                 ***
**       Equates and DSECTs                                          **
***                                                                 ***
***********************************************************************
         SPACE 2
         REQUATE ,                    Equate our registers
         IEZVX100 ,                   WTO User WTO exit parm list
         IEZMGCR  DSECT=NO            SVC 34 Parameter List
         END
./ ADD NAME=DA$MPF03 0103-92113-98240-1440-00096-00093-00000-DTSO626
DA$MPF03 TITLE 'Change selected message route codes'
***********************************************************************
***                                                                 ***
**                                                                   **
**    Module Name       = DA$MPF03                                   **
**                                                                   **
**    Descriptive Name  = Change route codes                         **
**                                                                   **
**    Functions         = To Wit:                                    **
**                        - MAKES MESSAGE IEF450I IEF451I IEF452I    **
**                          AND IEF453I DESC=2 FOR PRODUCTION JOBS.  **
**                          THIS PREVENTS 'JOB ABEND' AND 'JCL       **
**                          ERROR' MESSAGES FROM ROLLING OFF THE FOR **
**                          A PRODUCTION JOB.  A PRODUCTION JOB IS   **
**                          ANY JOB THAT DOES NOT HAVE 'TSO' IN      **
**                          POSITIONS 2 TO 4 OF THE JOB NAME AND     **
**                          DOES HAVE A 'D' IN POSITION 1 OF THE JOB **
**                          NAME MEANING DALLAS JOBS.  IT ALSO       **
**                          CHANGES THE ROUTE CODE TO (1,2,3,4).     **
**                          IEF451I IS A CONDTION CODE MESSAGE.  THE **
**                          CONDTION CODE HAS TO BE IN THE JOBCARD   **
**                          FOR THIS MESSAGE TO BE PRODUCED.  IF A   **
**                          CONDITION CODE IS SATISFIED ON AN EXEC   **
**                          CARD, FLUSH MESSAGES WILL BE ISSUED AND  **
**                          NOT IEF451I, PREVENTING THIS EXIT FROM   **
**                          CHANGING ROUTE AND DESCRIPTOR.           **
**                                                                   **
**                        - IT ALSO CHANGES THE SPOOL OFFLOAD        **
**                          WRITER WAITING FOR MESSAGE 'IEF176I'     **
**                          TO BE HIGH-LIGHTED.                      **
**                                                                   **
**                                                                   **
**    Reference         = GC28-1147 MVS-XA SPL: User Exits           **
**                                                                   **
**    Activated by      = SET MFP=XX  (MVS operator command)         **
**                        - Where XX is a member in 'SYS1.PARMLIB':  **
**                          'SYS1.PARMLIB(MPFLSTXX)'                 **
**                        - REFERENCE IN MPFLSTXX:                   **
**                          IEF176I,SUP(NO),USEREXIT(DA$MPF03)       **
**                          IEF450I,SUP(NO),USEREXIT(DA$MPF03)       **
**                          IEF451I,SUP(NO),USEREXIT(DA$MPF03)       **
**                          IEF452I,SUP(NO),USEREXIT(DA$MPF03)       **
**                          IEF453I,SUP(NO),USEREXIT(DA$MPF03)       **
***                                                                 ***
***********************************************************************
         SPACE 2
***********************************************************************
***
**           M o d i f i c a t i o n   H i s t o r y
**
** Person     Date        Description
** ---------- ----------- ------------------------------------------
** DGAlcock   28-AUG-1998 For CBT tape and Internet distribution,
**                        our installation checks were disabled,
**                        See the lines marked "*Check->";
** DGAlcock   22-APR-1992 Changed from IEAVMXT1 to new DA$MPF03 name;
***
***********************************************************************
DA$MPF03 CSECT
DA$MPF03 RMODE ANY
DA$MPF03 AMODE 31
         SAVE  (14,12),,DA$MPF03_&SYSDATE._&SYSTIME
         LR    R10,R15          R10 = BASE REG
         USING DA$MPF03,R10
*
** Locate control blocks
*
         L     R1,0(,R1)        R1 ---> ADDRESS OF CTXT PARAMETER LIST
         L     R2,8(,R1)        R2 ---> ADDRESS OF TEXT OF MESSAGE
         L     R3,36(,R1)       R3 ---> ADDRESS OF DESCRIPTOR CODES
         L     R4,32(,R1)       R4 ---> ADDRESS OF ROUTE CODES
IEAVM020 DS    0H
*Check-> CLC   15(3,R2),=C'TSO'     IS THIS A TEST JOB ?
*Check-> BE    IEAVM100             YES DO NOT PROCESS.
*Check-> CLC   14(3,R2),=C'WTR'     IS THIS A SPOOL OFFLOAD MSG?
*Check-> BE    IEAVM030             YES PROCESS.
*Check-> CLC   14(1,R2),=C'D'       IS THIS A DALLAS JOB ?
*Check-> BNE   IEAVM100             NO - DO NOT PROCESS.
         MVI   48(R1),B'01100000'   NOTIFY TO CHANGE DESCRIPTOR & ROUTE
         OI    0(R4),X'F0'          SET ALL ROUTE CODES (1,2,3,4)
         MVI   0(R3),B'01000000'    SET DESC=2
         B     IEAVM100             YES DO NOT PROCESS.
IEAVM030 MVI   48(R1),B'01100000'   NOTIFY TO CHANGE DESCRIPTOR & ROUTE
         OI    0(R4),X'F0'          SET ALL ROUTE CODES (1,2,3,4)
         MVI   0(R3),B'01000000'    SET DESC=2
IEAVM100 DS    0H
*
** Return to caller
*
         RETURN (14,12)             SET UP RETURN
*
** Data constants
*
         LTORG ,
         YREGS ,                    Register Equates
         END
./ ADD NAME=DA$MPF04 0103-92123-98240-1034-00136-00096-00000-IBMUSER
*   DATA SET DA$ IEAVMSIT AT LEVEL 001 AS OF 05/16/86
   TITLE '  *** DA$MPF04   OS/VS2 MVS TAPE INIT WTOR RESPONSE EXIT '
***********************************************************************
*   DA$MPF04                                                          *
*                                                                     *
*       THIS EXIT SCANS ALL WTO THAT GO THROUGH MPF.  MPFLST00        *
*       IN SYS1.PARMLIB CONTAINES THE MESSAGES TO BE SCANNED AND      *
*       THE EXIT TO TAKE.                                             *
*                                                                     *
*       THIS ROUTINE:                                                 *
*                                                                     *
*         1.  REPLYS TO MESSAGE IEC709I WTOR FOR A TMS TAPE INIT.     *
*             IT WILL REPLY 'M' TO ALL IEC709I MESSAGES ISSUED        *
*             BY INIT JOB.                                            *
*                                                                     *
*         2.  MVS/XA SPL USER EXITS GC28-1147-3  P49-54               *
*                                                                     *
*                                                                     *
***********************************************************************
DA$MPF04 CSECT
DA$MPF04 RMODE ANY
DA$MPF04 AMODE 31
REG0     EQU   0
REG1     EQU   1
REG2     EQU   2
REG3     EQU   3
REG4     EQU   4
CTXTPTR  EQU   5
REG11    EQU   11
REG12    EQU   12
REG13    EQU   13
REG14    EQU   14
REG15    EQU   15
SPINPRVT EQU   230
         STM   REG14,REG12,12(REG13)
         BALR  REG12,REG0       ESTABLISH MODULE BASE
         USING *,REG12          REGISTER
         L     CTXTPTR,0(REG1) EXTABLISH ADDRESSABILITY
         USING CTXT,CTXTPTR    TO THE CTXT
***************************************************************
*        DYNAMIC STORAGE FOR THIS MODULE IS BEING OBTAINED BELOW
*        THE 16-MEG LINE BECAUSE SVC 34 REQUIRES THE MGCR PARAMETER
*        LIST TO BE IN 24-BIT ADDRESSABLE STORAGE.
***************************************************************
         GETMAIN  RU,LV=DATAEND,SP=SPINPRVT,LOC=BELOW  OBTAIN DYNAMIC
*                                                      STORAGE
         LR    REG11,REG1       ADDRESS RETURNED IN REG1
         USING DATAAREA,REG11  ADDRESSABILITY TO DYNAMIC STORAGE
         ST    REG13,SAVEAREA+4 SET BACKWARD PTR
         LA    REG15,SAVEAREA   GET ADDRESS OF SAVE AREA
         ST    REG15,8(REG13)   SET FORWARD PTR
         LR    REG13,REG15      SET REG13 TO POINT TO STANDARD
*                               SAVE AREA
*
***************************************************************
*        PICK OUT MESSAGE IEC701D
***************************************************************
*
         L     REG2,CTXTTXPJ    EXTABLISH ADDRESSABILITY
         USING CTXTATTR,REG2    TO THE MSG ATTRIBUTES
         LA    REG4,CTXTTMSG    ADDRESS OF TEXT AREA
         USING MSGTEXT,REG4     BASE TEST MAPPING
         CLC   MSGID,IEC701D    MESSAGE IEC701D
         BNE   FINISHED         NOT IEC701D
*
***************************************************************
*        WORKING WITH MESSAGE IEC701D THEREFORE REPLY TO THE
*        MESSAGE.
***************************************************************
*
MSG701D  EQU   *
         BAL   REG14,ISSUMGCR   REPLY TO IEC701D 'XX,M'
*
***************************************************************
*        STANDARD EXIT LINKAGE
***************************************************************
*
FINISHED EQU   *
         L     REG13,4(REG13)   RESTORE REG13
         FREEMAIN  RU,LV=DATAEND,A=(REG11),SP=SPINPRVT FREE THE STORAGE
         LM    REG14,REG12,12(REG13)   RESTORE CALLER'S REGISTERS
         BR    REG14             RETURN TO CALLER
*
***************************************************************
*        PROCEDURE: ISSUMSGCR
*        FUNCTION:  REPLIES TO MESSAGE IEC701D WITH 'M'
*        INPUT:     NONE
*        OUTPUT:    A REPLY COMMAND IS ISSUED VIA SVC 34
*        NOTES:     THE MGCR MACRO CAN BE USED TO ISSUE A REPLY CMD.
***************************************************************
*
ISSUMGCR EQU   *
         XC    MGCRPL(MGCRLTH),MGCRPL  CLEAR THE PARAMETER LIST
         MVC   MGCRTEXT(L'TXTINSRT),TXTINSRT  MOVE IN THE REPLY BUFFER
         MVC   REPLY,CTXTRPID          INSERT THE REPLY ID
         LA    REG1,(MGCRTEXT-MGCRPL)+L'TXTINSRT    GET MGCRPL LENGTH
         STC   REG1,MGCRLGTH          SAVE LENGTH IN THE MGCRPL
         SR    REG0,REG0              CLEAR REGISTER ZERO
         MGCR  MGCRPL                 ISSUE THE COMMAND
         BR    REG14                  RETURN TO CALLER
*
***************************************************************
*        CHARACTER CONSTANTS
***************************************************************
*
IEC701D  DC    CL8'IEC701D '          MESSAGE IEC701D
TXTINSRT DC    CL10'REPLY XX,M'      WROR REPLY
*
***************************************************************
*        STORAGE DEFINITIONS
***************************************************************
*
DATAAREA DSECT
         DS    0F
SAVEAREA DS    18F              STANDARD SAVE AREA
         DS    0F
MGCR     IEZMGCR  DSECT=NO
         ORG   MGCRTEXT
COMMAND  DS    CL6              THE REPLY COMMAND
REPLY    DS    CL2              REPLY ID
REPLYMSG DS    CL1              WTOR RESPONSE
         ORG
DATAEND  EQU   *-DATAAREA
*
***************************************************************
*        MAPPING OF THE MESSAGE TEXT
***************************************************************
*
MSGTEXT  DSECT
MSGID    DS    CL8              MESSAGE ID
JOBDATA  DS    CL8              JOB DATA(ID AND NAME)
         ORG   MSGTEXT
         DS    CL4
WTORID   DS    CL8
         IEZVX100
         END   DA$MPF04
./ ADD NAME=DA$MPF05 0102-92267-92284-1329-00057-00071-00000-IBMUSER
CSWMPF05 TITLE 'Suppress WTO on the JES2 JOB LOG'
***********************************************************************
***                                                                 ***
**                                                                   **
**    Module Name       = CSWMPF05                                   **
**                                                                   **
**    Descriptive Name  = Suppress WTO from JES2 JOB LOG             **
**                                                                   **
**                        The message will still go to the SYSLOG.   **
**                                                                   **
**                        ** You must be at JES2 3.1.3 or higher **  **
**                                                                   **
**    Reference         = GC28-1147 MVS-XA SPL: User Exits           **
**                                                                   **
**    Activated by      = Specifed in active MPF member of Parmlib:  **
**                        - SET MPF=XX                               **
**                        - Where XX is a member in SYS1.PARMLIB as  **
**                          in 'SYS1.PARMLIB(MPFLSTXX)'              **
**                        - Reference IN MPFLSTXX:                   **
**                       CSW106I,SUP(NO),USEREXIT(CSWMPF05)          **
**                       CSW107I,SUP(NO),USEREXIT(CSWMPF05)          **
**                                                                   **
***                                                                 ***
***********************************************************************
         EJECT
CSWMPF05 CSECT ,
CSWMPF05 AMODE 31
CSWMPF05 RMODE ANY
*
** Entry Housekeeping
*
         SAVE  (14,12),,CSWMPF05_WTOEXIT_SUPJESLOG_&SYSDATE._&SYSTIME
         LR    R12,R15                    Load Base register
         USING CSWMPF05,R12               Get CSECT addressability
         L     R2,0(R1)                   Get CTXT Address
*
** Check for any exceptions
*
         CLC   CTXTJBNM-CTXT(8,R2),=CL8'IBMUSERZ' Special job?
         BE    EXIT                       Yes, skip suppression
*
** Set flag to suppress the message from the JES JOB Log
*
         OI    CTXTERF3-CTXT(R2),CTXTESJL Suppress that puppy
*
** Exit Housekeeping
*
EXIT     EQU   *
         RETURN (14,12),RC=0              Return to caller
*
** Literals and DSECTs
*
         LTORG ,                          Literals used in CSWMPF05
         DS    0D                         End of CSWMPF05 WTO exit
         YREGS ,                          Generate register equates
         IEZVX100 ,                       Commun. Task User exit parms
         END   ,
./ ADD NAME=DA$MPF06 0103-92137-98240-1442-00118-00118-00000-IBMUSER
DA$MPF06 TITLE '                  Answer WTOR with "U" '
***********************************************************************
***                                                                 ***
**                                                                   **
**    Module Name       = DA$MPF06                                   **
**                                                                   **
**    Descriptive Name  = Communications task user exit to answer    **
**                        WTORs with "U"                             **
**                                                                   **
**    Reference         = GC28-1147 MVS-XA SPL: User Exits           **
**                                                                   **
**    Activated by      = SET MFP=XX  (MVS operator command)         **
**                        - Where XX is a member in 'SYS1.PARMLIB':  **
**                          'SYS1.PARMLIB(MPFLSTXX)'                 **
**                        - REFERENCE IN MPFLSTXX:                   **
**                       ICK003D,SUP(NO),USEREXIT(DA$MPF06)          **
***                                                                 ***
***********************************************************************
         EJECT
DA$MPF06 DA#ENTER 'WTO EXIT: REPLY U TO A WTOR',                       @
               AMODE=31,RMODE=ANY,                                     @
               RENT=YES,LV=WORKDSL,SP=230,GMTYPE=RU,LOC=BELOW
         USING WORKDS,R13
*
         L     R2,0(R1)                   Get CTXT Address
         L     R3,CTXTTXPJ-CTXT(R2)       Find Message attributes
         TM    CTXTTFB1-CTXTATTR(R3),CTXTTFWR  WTOR?
         BNO   EXIT                       No, ignore it
         EJECT
***********************************************************************
***                                                                 ***
**       Reply to the WTOR with a "W"                                **
***                                                                 ***
***********************************************************************
         SPACE 2
*
** Issue WTO message for an Audit Trail
*
         LA    R15,WTO                    Locate WTO work area
         MVC   0(C_WTOL,R15),C_WTO        Copy in WTO
         LA    R15,4(R15)                 Bump past header
         MVC   0(MSG1L,R15),MSG1          Move in message
         LA    R15,MSG1L(R15)             Bump past it
         MVC   0(2,R15),CTXTRPID-CTXT(R2) Get reply number
         WTO   ,MF=(E,WTO)                Issue the WTO
*
** Answer the WTOR: "R xx,U"
*
         LA    R14,REPLY                 Locate reply area
         XC    0(MGCRLTH,R14),0(R14)     Clear it to binary zeros
*
         LA    R15,MGCRTEXT-MGCRPL(R14)  Locate reply area
         MVC   0(2,R15),=C'R '           Move in Text
         LA    R15,2(R15)                Bump past it
         MVC   0(2,R15),CTXTRPID-CTXT(R2) Get reply number
         LA    R15,2(R15)                Bump past the number
         MVC   0(2,R15),=C',U'           Complete the message
         LA    R15,2(R15)                Bump past the suffix
*
         SR    R15,R14                   Length = end - Beginning
         STC   R15,MGCRLGTH-MGCRPL(R14)  Save length
*
         SLR   R0,R0                     Clear register
         MGCR  REPLY                     Issue reply
         EJECT
***********************************************************************
***                                                                 ***
**       Termination section                                         **
***                                                                 ***
***********************************************************************
         SPACE 2
EXIT     EQU   *
         DA#LEAVE SP=230,FMTYPE=RU
         EJECT
***********************************************************************
***                                                                 ***
**       Constants                                                   **
***                                                                 ***
***********************************************************************
         SPACE 2
MSG1     DC    C'DA$2XXI WTOR Answered with U, Reply='
MSG1L    EQU   *-MSG1
         DS    0D
C_WTO    WTO   '                                                       @
                                                                       @
                       ',                                              @
               ROUTCDE=(11,14),DESC=7,MCSFLAG=HRDCPY,MF=L
C_WTOL   EQU   *-C_WTO
*
** Literals
*
         LTORG ,
         DS    0D
         EJECT
***********************************************************************
***                                                                 ***
**       Getmained work area                                         **
***                                                                 ***
***********************************************************************
         SPACE 2
         DS    0D
WORKDS   DSECT ,
         DS    18F                    Register Save Area
REPLY    DS    XL(MGCRLTH)            Reply (operator command)
WTO      DS    XL(C_WTOL)             Write to operator
         DS    0D
WORKDSL  EQU   *-WORKDS
         EJECT
***********************************************************************
***                                                                 ***
**       Equates and DSECTs                                          **
***                                                                 ***
***********************************************************************
         SPACE 2
         REQUATE ,                    Equate our registers
         IEZVX100 ,                   WTO User WTO exit parm list
         IEZMGCR  DSECT=NO            SVC 34 Parameter List
         END
./ ADD NAME=DA$MPF07 0103-96032-98240-1443-00118-00118-00000-DTSO626
DA$MPF07 TITLE '                  Answer WTOR with "BYPASS" '
***********************************************************************
***                                                                 ***
**                                                                   **
**    Module Name       = DA$MPF07                                   **
**                                                                   **
**    Descriptive Name  = Communications task user exit to answer    **
**                        WTORs with "BYPASS"                        **
**                                                                   **
**    Reference         = GC28-1147 MVS-XA SPL: User Exits           **
**                                                                   **
**    Activated by      = SET MFP=XX  (MVS operator command)         **
**                        - Where XX is a member in 'SYS1.PARMLIB':  **
**                          'SYS1.PARMLIB(MPFLSTXX)'                 **
**                        - REFERENCE IN MPFLSTXX:                   **
**                       IECTMS0,SUP(NO),USEREXIT(DA$MPF07)          **
***                                                                 ***
***********************************************************************
         EJECT
DA$MPF07 DA#ENTER 'WTO EXIT: REPLY U TO A WTOR',                       @
               AMODE=31,RMODE=ANY,                                     @
               RENT=YES,LV=WORKDSL,SP=230,GMTYPE=RU,LOC=BELOW
         USING WORKDS,R13
*
         L     R2,0(R1)                   Get CTXT Address
         L     R3,CTXTTXPJ-CTXT(R2)       Find Message attributes
         TM    CTXTTFB1-CTXTATTR(R3),CTXTTFWR  WTOR?
         BNO   EXIT                       No, ignore it
         EJECT
***********************************************************************
***                                                                 ***
**       Reply to the WTOR with a "BYPASS"                           **
***                                                                 ***
***********************************************************************
         SPACE 2
*
** Issue WTO message for an Audit Trail
*
         LA    R15,WTO                    Locate WTO work area
         MVC   0(C_WTOL,R15),C_WTO        Copy in WTO
         LA    R15,4(R15)                 Bump past header
         MVC   0(MSG1L,R15),MSG1          Move in message
         LA    R15,MSG1L(R15)             Bump past it
         MVC   0(2,R15),CTXTRPID-CTXT(R2) Get reply number
         WTO   ,MF=(E,WTO)                Issue the WTO
*
** Answer the WTOR: "R xx,BYPASS"
*
         LA    R14,REPLY                 Locate reply area
         XC    0(MGCRLTH,R14),0(R14)     Clear it to binary zeros
*
         LA    R15,MGCRTEXT-MGCRPL(R14)  Locate reply area
         MVC   0(2,R15),=C'R '           Move in Text
         LA    R15,2(R15)                Bump past it
         MVC   0(2,R15),CTXTRPID-CTXT(R2) Get reply number
         LA    R15,2(R15)                Bump past the number
         MVC   0(7,R15),=C',BYPASS'      Complete the message
         LA    R15,7(R15)                Bump past the suffix
*
         SR    R15,R14                   Length = end - Beginning
         STC   R15,MGCRLGTH-MGCRPL(R14)  Save length
*
         SLR   R0,R0                     Clear register
         MGCR  REPLY                     Issue reply
         EJECT
***********************************************************************
***                                                                 ***
**       Termination section                                         **
***                                                                 ***
***********************************************************************
         SPACE 2
EXIT     EQU   *
         DA#LEAVE SP=230,FMTYPE=RU
         EJECT
***********************************************************************
***                                                                 ***
**       Constants                                                   **
***                                                                 ***
***********************************************************************
         SPACE 2
MSG1     DC    C'DA$2XXI MPF EXIT 07 answered with BYPASS, Reply='
MSG1L    EQU   *-MSG1
         DS    0D
C_WTO    WTO   '                                                       @
                                                                       @
                       ',                                              @
               ROUTCDE=(11,14),DESC=7,MCSFLAG=HRDCPY,MF=L
C_WTOL   EQU   *-C_WTO
*
** Literals
*
         LTORG ,
         DS    0D
         EJECT
***********************************************************************
***                                                                 ***
**       Getmained work area                                         **
***                                                                 ***
***********************************************************************
         SPACE 2
         DS    0D
WORKDS   DSECT ,
         DS    18F                    Register Save Area
REPLY    DS    XL(MGCRLTH)            Reply (operator command)
WTO      DS    XL(C_WTOL)             Write to operator
         DS    0D
WORKDSL  EQU   *-WORKDS
         EJECT
***********************************************************************
***                                                                 ***
**       Equates and DSECTs                                          **
***                                                                 ***
***********************************************************************
         SPACE 2
         REQUATE ,                    Equate our registers
         IEZVX100 ,                   WTO User WTO exit parm list
         IEZMGCR  DSECT=NO            SVC 34 Parameter List
         END
./ ADD NAME=DA$MPF08 0107-97055-98240-1035-00214-00179-00000-IBMUSER
DA$MPF08 TITLE '                   Real time User notification of WTO'
***********************************************************************
***                                                                 ***
**                                                                   **
**    Module Name       = DA$MPF08                                   **
**                                                                   **
**    Descriptive Name  = Notify user in real time of a critical     **
**                        WTO message from a batch job that he       **
**                        submitted.                                 **
**                                                                   **
**    Reference         = GC28-1147 MVS-XA SPL: User Exits           **
**                                                                   **
**    Activated by      = Specifed in active MPF member of Parmlib:  **
**                        - SET MPF=XX                               **
**                        - WHERE XX IS A MEMBER IN PARMLIB:         **
**                          'SYS1.PARMLIB(MPFLSTXX)'                 **
**                        - REFERENCE IN MPFLSTXX:                   **
**                       IEF861I,SUP(NO),USEREXIT(DA$MPF08)          **
**                       IEF863I,SUP(NO),USEREXIT(DA$MPF08)          **
**                       IEF099I,SUP(NO),USEREXIT(DA$MPF08)          **
***                                                                 ***
***********************************************************************
         EJECT
         IEZVX100 ,                       WTO exit parameter list
         PRINT NOGEN
         IHAPSA ,                         Prefixed Save Area
         IHAASCB ,                        Address Space Control Block
         IHAASSB ,                        ASCB Secondard block
         IAZJSAB ,                        Job Schedular Address spc
         YREGS ,                          Equate registers to R0-R15
         PRINT GEN
*
** Using the official ASMH/HLASM distinction trick, simulate the
** SYSVER and SYSDATEC variables of HLASM when assembled under
** ASMH...Taken from Gilbert Saint-flour's SHOWMVS.
*
         LCLA  &ASMH_HLASM
         AIF   (T'&ASMH_HLASM EQ 'N').ASMH1X
&SYSVER  SETC  'ASMH'
&SYSDATC SETC  '20'.'&SYSDATE'(7,2)'&SYSDATE'(1,2)'&SYSDATE'(4,2)
         AIF   ('&SYSDATC' LT '20500000').ASMH1X
&SYSDATC SETC  '19'.'&SYSDATE'(7,2)'&SYSDATE'(1,2)'&SYSDATE'(4,2)
.ASMH1X  ANOP
*-Convert assembly date from SYSDATC format "YYYYMMDD" to "YYYY/MM/DD"
         LCLC  &ASMDATE
&ASMDATE SETC  '&SYSDATC'(1,4).'/'.'&SYSDATC'(5,2).'/'.'&SYSDATC'(7,2)
         EJECT
***********************************************************************
***                                                                 ***
**       Intialization                                               **
***                                                                 ***
***********************************************************************
         SPACE 2
DA$MPF08 CSECT ,
DA$MPF08 AMODE 31
DA$MPF08 RMODE ANY
*
** Create a standard O/S eyecatcher
*
EC       B     ECL(0,R15)               Bump past Eyecatcher
         DC    AL1(L'ECLIT)             Length of eyecatcher
ECLIT    DC    C'DA$MPF08 &ASMDATE &SYSTIME - Echo message to TSO user'
         DS    0H                       Ensure halfword alignment
ECL      EQU   *-EC
*
** Standard ESA entry housekeeping
*
         BAKR R14,0                     Save regs
         LAE   R12,0(R15,0)             Get base register
         USING DA$MPF08,R12             Get addressibility
         SAC  0
         SYSSTATE ASCENV=P
         STORAGE OBTAIN,LENGTH=WORKDSL,LOC=BELOW Obtain storage
         LR   R13,R1                    Point to Save Area
         MVC  4(4,R13),=C'F1SA'         Indicate stack SA
         USING WORKDS,R13               Get addressibility to area
*
** Locate MPF exit parameter list and message area
*
         EREG  R0,R1                    Restore regs 0 and 1
         L     R2,0(R1)                 Get CTXT Address
         ICM   R3,B'1111',CTXTTXPJ-CTXT(R2) Locate Major
         BZ    EXIT                     Shouldn't happen, but leave
*
** Determine if we should be trying to echo the message to the TSO
** user:
**
** - Find the JSAB, there will be none for non-JES managed addr spaces
** - Ensure that we are being invoked for a batch job
** - If we have a userid, save it for later else leave
*
         L     R4,PSAAOLD-PSA           -> ASCB
         ICM   R4,B'1111',ASCBASSB-ASCB(R4) -> ASSB
         BZ    EXIT
         ICM   R4,B'1111',ASSBJSAB-ASSB(R4) -> JSAB
         BZ    EXIT
*
         CLC   JSABJBID-JSAB(3,R4),=C'JOB' Is this a batch job?
         BNE   EXIT
         CLI   JSABUSID-JSAB(R4),C' '   Looks valid?
         BE    EXIT
         CLI   JSABUSID-JSAB(R4),0      Looks valid?
         BE    EXIT
*
         MVC   USERID(8),JSABUSID-JSAB(R4) Get notify user
*
** For some messages, skip the warning and blank line
**
** For example, I've always seen these three messages come together,
** so we will only print our warning message and blank line for IEF861I
**
**  IEF861I FOLLOWING RESERVED DATA SET NAMES UNAVAILABLE TO IBMUSERZ
**  IEF863I DSN = IBMUSER.DAVE.LOAD DTSO626Z
** *IEF099I JOB IBMUSERZ WAITING FOR DATA SETS
*
         CLC   CTXTTMSG-CTXTATTR(7,R3),=C'IEF863I'
         BE    ECHO
         CLC   CTXTTMSG-CTXTATTR(7,R3),=C'IEF099I'
         BE    ECHO
*
** Tell user whats comming
*
         LA    R15,MESSAGE              Locate message start
         MVC   0(MSG1L,R15),MSG1        Get message start
         MVC   MSG1NAME-MSG1(L'JSABJBNM,R15),JSABJBNM-JSAB(R4)
         MVC   MSG1ID-MSG1(L'JSABJBID,R15),JSABJBID-JSAB(R4)
         LA    R0,MSG1L                 Set message length
         TPUT  MESSAGE,                 Issue message to user          @
               (0),                       ..Length of message          @
               EDIT,                      ..Remove extra stuff         @
               NOWAIT,                    ..Return control immed.      @
               NOHOLD,                    ..Return control immed.      @
               NOBREAK,                   ..No precedence over input   @
               HIGHP,                     ..This guy must get through  @
               USERIDL=USERID             ..To this userid
         LTR   R15,R15                    Maybe not logged on...
         BNZ   EXIT
*
** Print a blank line, Remember that ALL parameters to TPUT must reside
** below the line or your WILL get a S15D ABEND.
*
         LA    R0,1                     Set message length
         MVI   MESSAGE,C' '             Insert a blank
         TPUT  MESSAGE,                 Issue message to user          @
               (0),                       ..Length of message          @
               EDIT,                      ..Remove extra stuff         @
               NOWAIT,                    ..Return control immed.      @
               NOHOLD,                    ..Return control immed.      @
               NOBREAK,                   ..No precedence over input   @
               HIGHP,                     ..This guy must get through  @
               USERIDL=USERID             ..To this userid
*
** Now echo the actual message
*
ECHO     DS    0H
         LA    R15,MESSAGE                Locate message start
         SLR   R14,R14                    Clear register
         ICM   R14,B'0011',CTXTTLEN-CTXTATTR(R3) Get length
         CH    R14,=H'128'                Larger than we want?
         BL    ECHO$LX                    No, continue
         LA    R14,128                    Yes, truncate to 128
ECHO$LX  DS    0H
         BCTR  R14,0                      Decrement for EX
         EX    R14,X$MSGM                 Move message to TPUT area
         LA    R15,1(R14,R15)             Locate end
         LA    R1,MESSAGE                 Locate message start
         LR    R0,R15                     Locate message end
         SR    R0,R1                      Length = End - Begin
*
         TPUT  MESSAGE,                   Send message                 @
               (0),                       ..Length of message          @
               EDIT,                      ..Remove extra stuff         @
               NOWAIT,                    ..Return control immed.      @
               NOHOLD,                    ..Return control immed.      @
               NOBREAK,                   ..No precedence over input   @
               HIGHP,                     ..This guy must get through  @
               USERIDL=USERID             ..To this userid
*
** Release resources and return to caller
*
EXIT     DS    0H
         LR    R2,R13                     Get storage address
         STORAGE RELEASE,LENGTH=WORKDSL,ADDR=(R2) Release storage
         SLR   R15,R15                    Set return code
         PR                               Return to caller
         EJECT
***********************************************************************
***                                                                 ***
**       Constants and executed instructions                         **
***                                                                 ***
***********************************************************************
         SPACE 2
X$MSGM   MVC   0(0,R15),CTXTTMSG-CTXTATTR(R3)
*
MSG1     DC    C'DA$M81I Batch job '
MSG1NAME DC    CL8'jobname ',C' '
MSG1ID   DC    CL8'JOBxxxxx',C' has the following action message:'
MSG1L    EQU   *-MSG1
         LTORG ,
         EJECT
***********************************************************************
***                                                                 ***
**       GETMAINed work area                                         **
***                                                                 ***
***********************************************************************
         SPACE 2
         DS    0D
WORKDS   DSECT ,
         DS    18F                    Register Save Area
USERID   DS    CL8                    Userid to send message to
MESSAGE  DS    CL256                  Message to issue
         DS    0D
WORKDSL  EQU   *-WORKDS
         END
./ ADD NAME=DA$MPF09 0107-97124-98240-1035-00205-00160-00000-IBMUSER
DA$MPF09 TITLE '                   Enhance CSV019I error for ABENDAID'
***********************************************************************
***                                                                 ***
** Name: DA$MPF09                                                    **
**                                                                   **
** Author: David Alcock                                              **
**         dalcock@csw.com                                           **
**                                                                   **
** Purpose: MPF exit -- Enhance CSV019I message if for ABENDAID      **
**          module.  This message looks like:                        **
**                                                                   **
**            CSV019I REQUESTED MODULE #XAAINTR NOT ACCESSED, IS IN  **
**                    NON-APF LIBRARY/CONCATENATION                  **
**                                                                   **
**          This is a normal message if an authorized program ABENDs **
**          and ABENDAID gets control.  If you have ABENDAID         **
**          installed correctly, it will get this error when an APF  **
**          authorized program ABENDs and you have not turned off    **
**          ABENDAID for that step.                                  **
**                                                                   **
** Attributes: Reentrant, Reusable, must be in LNKLST.               **
**                                                                   **
** Requirements:                                                     **
** - Assembler H or higher                                           **
** - MVS 4.1 and higher (for WTO TEXT= (I think))                    **
**                                                                   **
** Activated by:                                                     **
** - SET MPF=xx                                                      **
**   (Where xx is a member in parmlib, MPFLSTxx)                     **
** - Reference in MPFLSTXX:                                          **
**  CSV019I,SUP(NO),USEREXIT(DA$MPF09)                               **
***                                                                 ***
***********************************************************************
         EJECT
         IEZVX100 ,                       WTO exit parameter list
         PRINT NOGEN
         YREGS ,                          Equate registers to R0-R15
         PRINT GEN
*
** Using the official ASMH/HLASM distinction trick, simulate the
** SYSVER and SYSDATEC variables of HLASM when assembled under
** ASMH...Taken from Gilbert Saint-flour's SHOWMVS.
*
         LCLA  &ASMH_HLASM
         AIF   (T'&ASMH_HLASM EQ 'N').ASMH1X
&SYSVER  SETC  'ASMH'
&SYSDATC SETC  '20'.'&SYSDATE'(7,2)'&SYSDATE'(1,2)'&SYSDATE'(4,2)
         AIF   ('&SYSDATC' LT '20500000').ASMH1X
&SYSDATC SETC  '19'.'&SYSDATE'(7,2)'&SYSDATE'(1,2)'&SYSDATE'(4,2)
.ASMH1X  ANOP
*-Convert assembly date from SYSDATC format "YYYYMMDD" to "YYYY/MM/DD"
         LCLC  &ASMDATE
&ASMDATE SETC  '&SYSDATC'(1,4).'/'.'&SYSDATC'(5,2).'/'.'&SYSDATC'(7,2)
         EJECT
***********************************************************************
***                                                                 ***
**       Intialization                                               **
***                                                                 ***
***********************************************************************
         SPACE 2
DA$MPF09 CSECT ,
DA$MPF09 AMODE 31
DA$MPF09 RMODE ANY
*
** Create a standard O/S eyecatcher
*
EC       B     ECL(0,R15)               Bump past Eyecatcher
         DC    AL1(ECLITL)              Length of eyecatcher
ECLIT    DC    C'DA$MPF09 &ASMDATE &SYSTIME'
         DC    C'- MPF EXIT: Enhance message CSV019I'
ECLITL   EQU   *-ECLIT
         DS    0H                       Ensure halfword alignment
ECL      EQU   *-EC
*
** Standard ESA entry housekeeping
*
         BAKR R14,0                     Save regs
         LAE   R12,0(R15,0)             Get base register
         USING DA$MPF09,R12             Get addressibility
         SAC  0
         SYSSTATE ASCENV=P
*
** Locate input parms
*
         EREG  R0,R1                    Restore regs 0 and 1
         L     R2,0(R1)                 Get CTXT Address
         ICM   R3,B'1111',CTXTTXPJ-CTXT(R2) Locate Major
         BZ    QUICKOUT                 Shouldn't happen, but leave
*
** Ensure that the message is the right one and for ABENDAID module:
**
** 0....+....1....+....2....+....
** CSV019I REQUESTED MODULE #XAAINTR NOT ACCESSED, IS IN
**         NON-APF LIBRARY/CONCATENATION
*
         CLC   CTXTTMSG-CTXTATTR(7,R3),=C'CSV019I'
         BNE   QUICKOUT
         CLC   CTXTTMSG+25-CTXTATTR(8,R3),=C'#XAAINTR'
         BNE   QUICKOUT
*
** We need a valid RSA since we are about to issue some WTOs
*
         STORAGE OBTAIN,LENGTH=WORKDSL,LOC=BELOW Obtain storage
         LR    R13,R1                   Point to Save Area
         MVC   4(4,R13),=C'F1SA'        Indicate stack SA
         USING WORKDS,R13               Get addressibility to area
*
** Leave some messages in the joblog regarding the CSV message. This is
** a multi-line WTO.
*
         XR    R0,R0                    Clear reg 0 before multiline
         MVC   PARMLIST(C_WTO1L),C_WTO1
         WTO   TEXT=((MSG1,D),(MSGB,D),(MSG2,D),(MSG3,D),(MSG4,D),     @
               (MSG5,D),(MSG6,D),(MSG7,D),(MSG8,D),(MSGB,DE)),         @
               MF=(E,PARMLIST)
*
         XR    R0,R0                    Clear reg 0 before multiline
         MVC   PARMLIST(C_WTO2L),C_WTO2
         WTO   TEXT=((MSG9,D),(MSGB,D),(MSG10,D),(MSG11,D),            @
               (MSGB,DE)),                                             @
               MF=(E,PARMLIST)
*
** Release resources and return to caller
*
EXIT     DS    0H
         LR    R2,R13                     Get storage address
         STORAGE RELEASE,LENGTH=WORKDSL,ADDR=(R2) Release storage
QUICKOUT DS    0H
         SLR   R15,R15                    Set return code
         PR                               Return to caller
         EJECT
***********************************************************************
***                                                                 ***
**       Constants                                                   **
***                                                                 ***
***********************************************************************
         SPACE 2
C_WTO1   WTO   TEXT=((MSG1,D),(MSGB,D),(MSG2,D),(MSG3,D),(MSG4,D),     @
               (MSG5,D),(MSG6,D),(MSG7,D),(MSG8,D),(MSGB,DE)),MF=L
C_WTO1L  EQU   *-C_WTO1
*
C_WTO2   WTO   TEXT=((MSG9,D),(MSGB,D),(MSG10,D),(MSG11,D),            @
               (MSGB,DE)),MF=L
C_WTO2L  EQU   *-C_WTO2
*
MSGB     DC    AL2(1),C' '
MSG1     DC    AL2(60),60C' '
MSG2     DC    AL2(60),60C' '
MSG3     DC    AL2(60),60C' '
MSG4     DC    AL2(60),60C' '
MSG5     DC    AL2(60),60C' '
MSG6     DC    AL2(60),60C' '
MSG7     DC    AL2(60),60C' '
MSG8     DC    AL2(60),60C' '
MSG9     DC    AL2(60),60C' '
MSG10    DC    AL2(60),60C' '
MSG11    DC    AL2(60),60C' '
*
*
* Note: This is pretty goofy but it makes the text easier to read
*       when composing the text.
*
*        ....+....1....+....2....+....3....+....4....+....5....+.....6
 ORG   MSG1+2
 DC    C'DA$MPF09-01I '
 ORG   MSG2+2
 DC    C'The CSV019I message below was issued because'
 ORG   MSG3+2
 DC    C'ABENDAID was invoked for an APF-authorized program.'
 ORG   MSG4+2
 DC    C'ABENDAID can''t handle APF-authorized programs.  Please add'
 ORG   MSG5+2
 DC    C'a "//ABNLIGNR DD DUMMY" line to the JCL to prevent this'
 ORG   MSG6+2
 DC    C'error.  Your ABEND did not occur because of problems with'
 ORG   MSG7+2
 DC    C'#XAAINTR, this program is an ABENDAID program that got'
 ORG   MSG8+2
 DC    C'invoked to process the original ABEND.'
*
 ORG   MSG9+2
 DC    C'DA$MPF09-02I '
 ORG   MSG10+2
 DC    C'Please consult the ABENDAID install manual for more details'
 ORG   MSG11+2
 DC    C'on this problem if needed.'
 ORG   ,
*
** Literals
*
         LTORG ,
         EJECT
***********************************************************************
***                                                                 ***
**       GETMAINed work area                                         **
***                                                                 ***
***********************************************************************
         SPACE 2
         DS    0D
WORKDS   DSECT ,
         DS    18F                    Register Save Area
PARMLIST DS    XL(C_WTO1L)
         DS    0D
WORKDSL  EQU   *-WORKDS
         END
./ ENDUP       "REVIEW" PDS MEMBER OFFLOAD AT 15:37 ON 98/08/28
