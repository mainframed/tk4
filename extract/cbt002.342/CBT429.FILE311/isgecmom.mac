./ ADD NAME=$$README 1000-97157-97157-1412-00062-00062-00000-DAVE
 ISGECMOM - an enhancement to IBM's sample program ISGECMON - June 1997

 This package contains directions to modify your copy of IBM's
 ISGECMON, a program that comes with MVS v4.3 and higher that informs
 TSO users about enqueue problems in real time.  ISGECMON is no
 where as nice as the MIM product from Legent (oops CA).

 IBM's version of ISGECMON isn't too fancy so this enhancer was
 written (which only adds modest functions). Some of the things it adds:

   - Stopping of the ISGECMON via "P ISGECMON" and "F ISGECMON,STOP"
     I think that ALL started tasks should have this capability.

   - Show some statistics about errors number of notifies sent via
     command: "F ISGECMON,STAT"

 Other functions could be added to this never ending task.  Remember
 that modify and stop commands will not be immediate since ISGECMON
 has an user specified interval where "he" is asleep.

 File contents:

 $$README ... This member
 $ASM     ... Sample JCL to assemble ISGECMON and ISGECMOM
 $CHANGES ... Changes needed to ISGECMON
 ISGECMOM ... Program called by the modifed verision of ISGECMON

 Installation directions:

 1) Copy 'SYS1.SAMPLIB(ISGECMON)' into this library as member ISGECMON.

 2) Make the changes to ISGECMON as shown in the $CHANGES member. I
    don't distribute a modified ISGECMON since it is IBM software.

 3) Assemble and link ISGECMON and ISGECMOM into a LNKLST dataset
    using the $ASMLINK member.

 4) Create the started task JCL proc as described in the comments in
    IBM's ISGECMON.  I would suggest adding ",TIME=1440" to the EXEC
    card.

 5) Start the ISGECMON started task and issue commands to it as needed.

 =====================================================================

 The contents of this file are FREEWARE.  Use at your own risk.  It
 is provided for your enjoyment and neither David Alcock or his
 employer provides any warranty for their use.  I'd like to hear
 feedback on how they work on your system:

    David Alcock
    dalcock@csw.com ...... Internet email (work)
    davea@ticnet.com ..... Internet email (home)

 =====================================================================
./ ADD NAME=$ASMLINK 1000-97157-97157-1412-00040-00040-00000-DAVE
  -- PUT JOBCARD HERE --
//*********************************************************************
//***                                                               ***
//**  ASSEMBLE AND LINK THE ISGECMON/ISGECMOM PACKAGE                **
//***                                                               ***
//*********************************************************************
//*
//** ASSEMBLE ISGECMOM
//*
//ISGECMOM EXEC HLASMC
//C.SYSLIB DD
//         DD DISP=SHR,DSN=SYS1.MODGEN
//C.SYSLIN DD DSN=&&MOM,SPACE=(TRK,(5,5)),
//            DISP=(MOD,PASS),UNIT=SYSDA,
//            DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1)
//C.SYSIN  DD DISP=SHR,DSN=IBMUSER.PACKAGE.ISGECMOM.V10(ISGECMOM)
//*
//** ASSEMBLE ISGECMON
//*
//ISGECMON EXEC HLASMC
//C.SYSLIB DD
//         DD DISP=SHR,DSN=SYS1.MODGEN
//C.SYSIN  DD DISP=SHR,DSN=IBMUSER.PACKAGE.ISGECMOM.V10(ISGECMON)
//*
//** LINK IT ALL TOGETHER
//*
// IF (RC < 8) THEN
//LINKEDIT EXEC  PGM=IEWL,REGION=5000K,
//         PARM='XREF,LET,NCAL,RENT,REUS,AC=1'
//SYSPRINT  DD SYSOUT=*
//SYSUT1    DD UNIT=SYSDA,SPACE=(CYL,(5,2))
//SYSLMOD   DD DISP=SHR,DSN=YOUR.LINKLIB,      <- CHANGE THIS!!!!!
//             UNIT=3390,VOL=SER=XXXXXX        <- CHANGE THIS!!!!!
//SYSLIN    DD DISP=SHR,DSN=&&OBJ  (ISGECMON)
//          DD DISP=SHR,DSN=&&MOM  (ISGECMOM)
//          DD *
  ENTRY ISGECMON
  ORDER ISGECMON,ISGECMOM
  NAME ISGECMON(R)
// ENDIF
./ ADD NAME=$CHANGES 1000-97157-97157-1412-00061-00061-00000-DAVE
 !!! Here are the changes that are needed to the ISGECMON program !!!


 !!! -> Right after the INIT label, add this code:

*-INIT-start - - - - - - - - - - - - - - - - - - - - - - - - - - - -MOM
#MOMPARM EQU   72                         ISGECMOM's field I_PARM   MOM
#MOMERR  EQU   72+4                       ISGECMOM's field W_COUNT  MOM
#MOMNOT  EQU   72+8                       ISGECMOM's field W_NOTIFY MOM
#MOMOPT  EQU   72+12                      ISGECMOM's field I_OPTION MOM
         ICM   R15,B'1111',=V(ISGECMOM)   Locate MOM                MOM
         BZ    MOM$IX                     Not found, leave          MOM
         MVC   MOM_EC(8),=CL8'MOMWA'      Set eyecatcher            MOM
         MVI   MOM_WA+#MOMOPT,C'I'        Set entry code: INIT      MOM
         LA    R1,SAVE1                   Locate parmlist for call  MOM
         ST    R1,MOM_WA+#MOMPARM         Save input parm list addr MOM
         LA    R14,INTERVAL               Locate interval           MOM
         ST    R14,SAVE1                  Save address              MOM
         LA    R14,=AL4(MAXMSGS,MAXOWNER,AREASIZE) Locate parms     MOM
         ST    R14,SAVE1+4                Save address              MOM
         LA    R1,MOM_WA                  Point to work area        MOM
         BALR  R14,R15                    Call ISGEC-MOM            MOM
MOM$IX   DS    0H                                                   MOM
*-INIT-end - - - - - - - - - - - - - - - - - - - - - - - - - - - - -MOM

 !!! -> Right after the ERROR label, add this code:

*-ERROR-start- - - - - - - - - - - - - - - - - - - - - - - - - - - -MOM
         L     R1,MOM_WA+#MOMERR       Get current count            MOM
         LA    R1,1(R1)                Increase by one              MOM
         ST    R1,MOM_WA+#MOMERR       Save new count               MOM
*-ERROR-end- - - - - - - - - - - - - - - - - - - - - - - - - - - - -MOM

 !!! -> Right after the WAIT label, add this code:

WAIT     EQU    *
*-WAIT-start - - - - - - - - - - - - - - - - - - - - - - - - - - - -MOM
         ICM   R15,B'1111',=V(ISGECMOM)   Locate MOM                MOM
         BZ    MOM$WX                     Not found, leave          MOM
         MVI   MOM_WA+#MOMOPT,C'W'        Set entry code: INIT      MOM
         LA    R1,MOM_WA                  Point to work area        MOM
         BALR  R14,R15                    Call ISGEC-MOM            MOM
         CLI   MOM_WA+#MOMOPT,X'FF'       Time to go?               MOM
         BE    COMPLETE
MOM$WX   DS    0H                                                   MOM
*-WAIT-end - - - - - - - - - - - - - - - - - - - - - - - - - - - - -MOM

 !!! -> Right _before_ the NOSEND label, add this code:

*-SENDMSG-start- - - - - - - - - - - - - - - - - - - - - - - - - - -MOM
         L     R1,MOM_WA+#MOMNOT       Get current count            MOM
         LA    R1,1(R1)                Increase by one              MOM
         ST    R1,MOM_WA+#MOMNOT       Save new count               MOM
*-SENDMSG-end- - - - - - - - - - - - - - - - - - - - - - - - - - - -MOM

 !!! -> Right after the SAVEAREA field/label, add this code:

*-DYNA-start - - - - - - - - - - - - - - - - - - - - - - - - - - - -MOM
MOM_EC   DS     CL8'MOMWA'             Eyecatcher for dumps         MOM
MOM_WA   DS     18F,XL512              Work area for ISGECMOM       MOM
*-DYNA-end - - - - - - - - - - - - - - - - - - - - - - - - - - - - -MOM
./ ADD NAME=ISGECMOM 1000-97157-97157-1412-00418-00418-00000-DAVE
***********************************************************************
***                                                                 ***
** Name: ISGECMOM                                                    **
**                                                                   **
** Purpose: Enhancement to IBM's bare bones ISGECMON, this code      **
**          will act as ISGECMON's MOM and run it's life.  This      **
**          program is called at various points from the slightly    **
**          modified ISGECMON that comes from IBM.                   **
**                                                                   **
**          This program adds these features:                        **
**          - Allow operator communication for modifies and stops    **
**          - Show errors and the number of notifies                 **
**                                                                   **
** Input: R0 has the input code: I=INIT W=WAIT                       **
**        R1 points to a RSA and work area                           **
***                                                                 ***
***********************************************************************
         SPACE 2
***********************************************************************
***                                                                 ***
**           M o d i f i c a t i o n   H i s t o r y                 **
**                                                                   **
** Person     Date        Description                                **
** ---------- ----------- ------------------------------------------ **
** DGAlcock   06-JUN-1997 Made statistics a subroutine that is also  **
**                        called at termination;                     **
** DGAlcock   25-FEB-1997 Initial program created;                   **
***                                                                 ***
***********************************************************************
         SPACE 2
         PRINT NOGEN
         IEFJESCT ,                       JES Communications Table
         CVT DSECT=YES,LIST=NO,PREFIX=YES Communications Vector Tbl
         DSECT ,
         IEZCOM ,                         Communications parameter list
         DSECT ,
         IEZBITS ,                        Generate Bit settings
         IEZCIB ,                         Command Input Buffer
         YREGS ,
         PRINT GEN
*
** Using the official ASMH/HLASM distinction trick, simulate the
** SYSVER and SYSDATEC variables of HLASM when assembled under
** ASMH...Taken from Gilbert Saint-flour's SHOWMVS.
*
         LCLA  &ASMH_HLASM
         AIF   (T'&ASMH_HLASM EQ 'N').ASMH1X
&SYSVER  SETC  'ASMH'
&SYSDATC SETC  '20'.'&SYSDATE'(7,2)'&SYSDATE'(1,2)'&SYSDATE'(4,2)
         AIF   ('&SYSDATC' LT '20500000').ASMH1X
&SYSDATC SETC  '19'.'&SYSDATE'(7,2)'&SYSDATE'(1,2)'&SYSDATE'(4,2)
.ASMH1X  ANOP
*-Convert assembly date from SYSDATC format "YYYYMMDD" to "YYYY/MM/DD"
         LCLC  &ASMDATE
&ASMDATE SETC  '&SYSDATC'(1,4).'/'.'&SYSDATC'(5,2).'/'.'&SYSDATC'(7,2)
         EJECT
***********************************************************************
***                                                                 ***
**       Initialization, control passing and termination             **
***                                                                 ***
***********************************************************************
         SPACE 2
ISGECMOM CSECT ,
ISGECMOM AMODE 31
ISGECMOM RMODE ANY
*
** Create a standard O/S eyecatcher
*
EC       B     ECL(0,R15)               Bump past Eyecatcher
         DC    AL1(L'ECLIT)             Length of eyecatcher
ECLIT    DC    C'ISGECMOM &ASMDATE &SYSTIME - Enhancement to ISGECMON'
         DS    0H                       Ensure halfword alignment
ECL      EQU   *-EC
*
** Entry housekeeping
*
         BAKR  R14,0                    Save registers
         LAE   R12,0(R15,0)             Get base register
         LAE   R11,2048(,R12)           Set up for second base reg
         LA    R11,2048(,R11)           Locate 4096 past R12
         USING ISGECMOM,R12,R11         Set module base
         SAC   0
         SYSSTATE ASCENV=P
         LR    R13,R1                   Locate input area
         USING DSA,R13                  Get addressability to it
         MVC   4(4,R13),=C'F1SA'        Set up Register Save Area
*
** Why are we here?
*
         CLI   I_OPTION,C'I'            Initialization?
         BE    MOM$INIT                 Yes, do it
         CLI   I_OPTION,C'W'            Before ISGECMON's wait?
         BE    MOM$WAIT                 Yes, do it
*
** Exit
*
EXIT     DS    0H
         PR    ,                        Return to caller
         EJECT
***********************************************************************
***                                                                 ***
**       Call is for INIT option                                     **
**                                                                   **
** I_PARM points to a parmlist:                                      **
** - Fullword 1 - Address of interval (fullword)                     **
** - Fullword 2 - Address of:                                        **
**   - MAXMSGS (fullword)
**   - MAXOWNER (fullword)
**   - AREASIZE (fullword)
***                                                                 ***
***********************************************************************
 SPACE 2
MOM$INIT DS 0H
         BAS   R14,FORMAT_MSG           Format message prefix
         MVC   0(MSG01L,R15),MSG01      Get message
         WTO   ,MF=(E,WTOAREA)
*
** Print Interval value
*
         L     R2,I_PARM                Get input parameter list addr
         BAS   R14,FORMAT_MSG           Format message prefix
         MVC   0(MSG02L,R15),MSG02      Get message
         LA    R15,MSG02L+1(R15)
         L     R1,0(R2)                 Get address of Interval
         L     R1,0(R1)                 Get interval
         SLR   R0,R0                    Clear for divide
         D     R0,=F'100'               Convert to normal
         BAS   R14,EDITFWF              Edit number
         MVC   1(7,R15),=C'seconds'
         WTO   ,MF=(E,WTOAREA)
*
** Print some of the variable information that ISGECMON was assembled
*
         BAS   R14,FORMAT_MSG           Format message prefix
         MVC   0(MSG03L,R15),MSG03      Get message
         WTO   ,MF=(E,WTOAREA)
*
         L     R2,4(R2)                 Locate to assemble fullwords
         BAS   R14,FORMAT_MSG           Format message prefix
         MVC   0(3,R15),MSG03           Get "03I"
         LA    R15,4(R15)               Bump past "03I "
         MVC   0(8,R15),=C'MAXMSGS='    Insert text
         LA    R15,8(R15)               Bump past text
         L     R1,0(R2)                 Get value
         BAS   R14,EDITFWF              Edit it out
         MVC   0(11,R15),=C', MAXOWNER=' Insert text
         LA    R15,11(R15)              Bump past text
         L     R1,4(R2)                 Get value
         BAS   R14,EDITFWF              Edit it out
         MVC   0(11,R15),=C', AREASIZE=' Insert text
         LA    R15,11(R15)              Bump past text
         L     R1,8(R2)                 Get value
         BAS   R14,EDITFWF              Edit it out
         WTO   ,MF=(E,WTOAREA)
*
** Set up to receive "P jobname" and "F jobname,command"
*
         LA    R9,WR_COMMA              Locate return area
         MVC   DOUBLE(C_EXTL),C_EXT     Initialize parm list
         EXTRACT (9),FIELDS=COMM,       Locate communication field     @
               MF=(E,DOUBLE)            Will overflow from DOUBLE-...
         L     R9,WR_COMMA              Locate return area
*
         L     R1,COMCIBPT-COMLIST(R9)  Locate first CIB
         MVC   WR_CONID(1),CIBCONID-CIBNEXT(R1)   Save console ID
*
         LA    R0,COMCIBPT-COMLIST(R9)  Locate first CIB
         QEDIT ORIGIN=(0),CIBCTR=7      Accept 7 modifies
*
         BAS   R14,FORMAT_MSG           Format message prefix
         MVC   0(MSG04L,R15),MSG04      Get message
         WTO   ,MF=(E,WTOAREA)          Issue message
         B     EXIT
         EJECT
***********************************************************************
***                                                                 ***
** This code gets invoked when ISGECMON goes to its Wait routine     **
***                                                                 ***
***********************************************************************
         SPACE 2
MOM$WAIT DS    0H
*
** See if the operator wants us to stop or has something he wants us
** to do
*
WR$OPR   DS    0H
         L     R8,WR_COMMA              -> Communications area
         ICM   R9,B'1111',COMCIBPT-COMLIST(R8) Obtain address of CIB
         BZ    WR$OPRX                  None, continue
WR$OL    DS    0H
         CLI   CIBVERB-CIBNEXT(R9),CIBSTOP Operator stopped us?
         BNE   WR$OLSX                  No, continue
         MVC   WR_CONID(1),CIBCONID-CIBNEXT(R9)   Save console ID
WR$OSTP  DS    0H
         BAS   R7,PRINT_STATS           Print stats
         MVI   I_OPTION,X'FF'           Indicate STOP
         BAS   R14,FORMAT_MSG           Format message prefix
         MVC   0(MSG99L,R15),MSG99      Get message
         LA    R15,MSG99L(R15)          Bump past it
         SLR   R1,R1                    Clear register
         IC    R1,WR_CONID              Get console ID
         BAS   R14,EDITFWF              Edit it
         BAS   R14,APPEND_CONSOLE_NAME  Append console name
         WTO   ,MF=(E,WTOAREA)          Issue message
         B     EXIT
WR$OLM   MVC   0(0,R15),0(R1)           Move field out
WR$OLSX  DS    0H
*
         CLI   CIBVERB-CIBNEXT(R9),CIBMODFY Modify?
         BNE   WR$OMX                   No, continue
         MVC   WR_CONID(1),CIBCONID-CIBNEXT(R9)   Save console ID
         LH    R14,CIBDATLN-CIBNEXT(R9) Get length of cmd
         LA    R1,CIBDATA-CIBNEXT(R9)   Locate the command
*
         CH    R14,=H'4'                Length for "STOP"
         BL    WR$OMSX                  Not enough room
         CLC   0(4,R1),=C'STOP'         Operator asked for stop?
         BE    WR$OSTP                  Yes, do it
WR$OMSX  DS    0H
*
         CH    R14,=H'2'                Minimum length of "ABEND"
         BL    WR$OMABX                 No, move on
         CLC   0(2,R1),=C'AB'           ABEND?
         BNE   WR$OMABX                 No, continue
         BAS   R14,FORMAT_MSG           Format message prefix
         MVC   0(MSG96L,R15),MSG96      Get message
         WTO   ,MF=(E,WTOAREA)          Issue message
         DC    A(0)                     Cause S0C1 ABEND
WR$OMABX DS    0H
*
         CH    R14,=H'3'                Minimum length of "STATUS"
         BL    WR$OMSTX                 No, move on
         CLC   0(3,R1),=C'STA'          Is it status?
         BNE   WR$OMSTX                 No, continue
*
         BAS   R7,PRINT_STATS           Print stats
         B     WR$OML                   Continue
WR$OMSTX DS    0H
*
         ST    R14,DOUBLE2              Save length
         BAS   R14,FORMAT_MSG           Format message prefix
         MVC   0(MSG98L,R15),MSG98      Get message
         LA    R15,MSG98L(R15)          Bump past it
         L     R14,DOUBLE2              Restore length
         CH    R14,=H'9'                More than max to display?
         BL    WR$M98                   No, it's okay
         LA    R14,9                    Truncate to 8 characters
WR$M98   DS    0H
         BCTR  R14,0                    Decrement for EX
         EX    R14,WR$OLM               Move out bad command
         LA    R15,1(R14,R15)           Bump past it
         MVC   0(24,R15),=C'" received from console=' Insert text
         LA    R15,24(R15)              Bump past text
         SLR   R1,R1                    Clear register
         IC    R1,WR_CONID              Get console ID
         BAS   R14,EDITFWF              Edit it
         BAS   R14,APPEND_CONSOLE_NAME  Append console name
         WTO   ,MF=(E,WTOAREA)          Issue message
*
WR$OML   DS    0H
         LA    R0,COMCIBPT-COMLIST(R8)  Locate it
         QEDIT ORIGIN=(0),BLOCK=(9)     Free CIB in R9
WR$OMX   DS    0H
*
         ICM   R9,B'1111',CIBNEXT-CIBNEXT(R9)  Any more CIBs?
         BNZ   WR$OL                    Yes, continue
WR$OPRX  DS    0H
         B     EXIT                     Leave
         EJECT
***********************************************************************
***                                                                 ***
**     Misc subroutines                                              **
***                                                                 ***
***********************************************************************
         SPACE 2
*
** Print stats
*
PRINT_STATS DS 0H
         BAS   R14,FORMAT_MSG           Format message prefix
         MVC   0(MSG97L,R15),MSG97      Get message
         LA    R15,MSG97L(R15)          Bump past it
*
         MVC   1(7,R15),=C'Notify='     Move in text
         LA    R15,1+7(R15)             Bump past it
         L     R1,W_NOTIFY              Get number
         BAS   R14,EDITFWF              Edit it
         MVC   0(9,R15),=C', Errors='   Move in text
         LA    R15,9(R15)               Bump past it
         L     R1,W_ERROR               Get number
         BAS   R14,EDITFWF              Edit it
         WTO   ,MF=(E,WTOAREA)          Issue message
         BSM   0,R7
*
** Format the message area for a WTO
*
FORMAT_MSG DS 0H
         LA    R15,WTOAREA              Locate area
         MVC   0(C_WTOL,R15),C_WTO      Initialize area
         MVC   4(9,R15),=C'ISGEC-MOM'   Get ID
         LA    R15,4+9(R15)             Bump past area
         BSM   0,R14
*
** Edit register 1 flush
** Input: R1 - Value to edit
**        R15 - Where edited value is to be put
*
EDITFWF  EQU   *
         LTR   R1,R1                    CHECK FOR 0
         BZ    EDITFWF0                 YES, PUT ZERO
         ST    R14,EF_RA                Save return address
         CVD   R1,DOUBLE                NO, CONVERT TO PACKEC
         LA    R1,DOUBLE2+14            LOCATE SIG DIGIT
         MVC   DOUBLE2(15),EDITP15
EF$EDMK  EQU   *
         EDMK  DOUBLE2(15),DOUBLE+2     EDIT AND SAVE PLACE
         LA    R14,DOUBLE2+16           LOCATE LAST POSSIBLE BYTE + 1
         SR    R14,R1                   LENGTH = END - START
         BCTR  R14,0                    DECREMENT FOR EX
         EX    R14,EDITFWFM             MOVE EDIT NUMBER TO OUTPUT
         LA    R15,0(R14,R15)           BUMP POINTER PAST NUMBER
         MVI   0(R15),C' '              Fix unprintable character
         L     R14,EF_RA                Get return address
         BSM   0,R14                    RETURN TO CALLER
EDITFWFM MVC   0(0,R15),0(R1)
EDITP15  DC    X'40,20,20,6B,20,20,20,6B,20,20,20,6B,20,20,20'
EDITFWF0 DS    0H
         MVI   0(R15),C'0'              PUT IN ZERO
         LA    R15,1(R15)               BUMP POINTER PAST ZERO
         BSM   0,R14                    RETURN TO CALLER
*
** Append console name to message if there is a CIB extension
*
APPEND_CONSOLE_NAME EQU *
         ST    R14,DOUBLE
         L     R1,WR_COMMA              -> Communications area
         ICM   R1,B'1111',COMCIBPT-COMLIST(R1) Obtain address of CIB
         SLR   R14,R14                  Clear register
         ICM   R14,B'0011',CIBXOFF-CIBNEXT(R1)  Locate offset
         BZ    ACN$X                    No offset, not at SP4
         AR    R1,R14                   Locate to Extension
         MVI   0(R15),C'/'              Insert text
         MVC   1(8,R15),CIBXCNNM-CIBX(R1) Move in console name
         LA    R15,1+8(R15)             Bump past "/consname"
ACN$X    EQU   *
         L     R14,DOUBLE
         BSM   0,R14
         EJECT
***********************************************************************
***                                                                 ***
**       Constants                                                   **
***                                                                 ***
***********************************************************************
 SPACE 2
MSG01    DC    C'01I Starting - ISGECMOM last asembled on '
         DC    C'&ASMDATE at &SYSTIME'
MSG01L   EQU   *-MSG01
MSG02    DC    C'02I ISGECMON was invoked using an interval of'
MSG02L   EQU   *-MSG02
MSG03    DC    C'03I ISGECMON was assembled using these values:'
MSG03L   EQU   *-MSG03
MSG04    DC    C'04I Accepting operator commands'
MSG04L   EQU   *-MSG04
MSG96    DC    C'96I Scheduling S0C1 ABEND as requested'
MSG96L   EQU   *-MSG96
MSG97    DC    C'97I Status:'
MSG97L   EQU   *-MSG97
MSG98    DC    C'98W Unknown command "'
MSG98L   EQU   *-MSG98
MSG99    DC    C'99I Operator has stopped us, console='
MSG99L   EQU   *-MSG99
*
C_WTO    WTO   '                                                       @
                                         ',MF=L
C_WTOL   EQU   *-C_WTO
*
C_EXT    EXTRACT *-*,'S',FIELDS=COMM,MF=L
C_EXTL   EQU   *-C_EXT
*
** Literals
*
LTORG    EQU   *
         LTORG ,
LTORGL   EQU   *-LTORG
         DS    0D
*
** Determine length left addressible in ISGECMOM CSECT
*
#ISGECMOM EQU  *-ISGECMOM               Bytes used
#ISGECMOM_LEFT EQU (4096*2)-#ISGECMOM   Bytes left
         EJECT
***********************************************************************
***                                                                 ***
**       Area passed to us in R1                                     **
***                                                                 ***
***********************************************************************
         SPACE 2
DSA      DSECT ,
         DS    18F                      Register Save Area
I_PARM   DS    F                        Parmlist on entry
W_ERROR  DS    F                        Number of errors
W_NOTIFY DS    F                        Number of notifies
I_OPTION DS    X                        Call option
X_FLAG1  DS    B'00000000'              Flags
         DS    0F
* - - - - - - - - - - - - - - - - - - - End of ISGECMON static areas
EF_RA    DS    F                        EDITFWF return address
         DS    0D
DOUBLE   DS    D                        Double word work area
DOUBLE2  DS    2D                       Double word work area * 2
WTOAREA  DS    XL(C_WTOL)               Reserve area
         DS    0F                       Wait routine
WR_COMMA DS    F                        ..Communication field
WR_CONID DS    X                        ..Console ID
*
DSAL     EQU   *-DSA
#DSAL    EQU   512
         END   ,
./ ADD NAME=ISGECMON 1000-97157-97157-1412-00002-00002-00000-DAVE
--> You must copy 'SYS1.SAMPLIB(ISGECMON)' here and then modify it
    via the comments in the $CHANGES member.
./ ENDUP       "REVIEW" PDS MEMBER OFFLOAD AT 15:12 ON 98/01/16
