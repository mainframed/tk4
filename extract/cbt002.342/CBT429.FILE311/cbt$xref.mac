/* REXX
 ×
 × Name: CBT$XREF
 ×
 × Author: David Alcock
 ×         dalcock@csw.com  (work)
 ×         davea@ticnet.com (home)
 ×
 × Purpose: Process a new CBT "tape" (on DASD) and perform various
 ×          Cross Reference functions.
 ×
 ×          This utility creates MVS/Quickref user database items in
 ×          MVS/Quickref version 5.1 format.
 ×
 × Assumptions:
 × - The format of the FILE001 and FILE003 CBT tapes remain unchanged.
 × - The CBT tape is layed down with standard names:
 ×   index.FILExxx.DATA or index.FILExxx.PDS
 ×
 × Sample job stream:
 ×
 ×  //*
 ×  //** PROCESS THE FILE001 AND FILE003 MEMBERS AND CREATE XREFS
 ×  //*
 ×  //CBT$XREF EXEC PGM=IKJEFT01,PARM='%CBT$XREF',
 ×  //         TIME=1439,DYNAMNBR=100
 ×  //SYSEXEC  DD DISP=SHR,DSN=ibmuser.EXEC <- Home of CBT$XREF
 ×  //SYSTSPRT DD SYSOUT=*
 ×  //SYSTSIN  DD DUMMY
 ×  //*
 ×  //FILE001  DD DISP=SHR,DSN=CBT.V415.FILE001.DATA
 ×  //FILE003  DD DISP=SHR,DSN=CBT.V415.FILE003.DATA
 ×  //QWUSERDB DD DSN=&&QWUSERDB,
 ×  //            DISP=(,CATLG),UNIT=SYSDA,
 ×  //            DCB=(LRECL=80,BLKSIZE=8800,RECFM=FB),
 ×  //            SPACE=(CYL,(60,60))
 ×  //SORTIN   DD DSN=&&SORTIN,
 ×  //            DISP=(,CATLG),UNIT=SYSDA,
 ×  //            DCB=(LRECL=12,BLKSIZE=1200,RECFM=FB),
 ×  //            SPACE=(CYL,(15,15))
 ×  //SORTOUT  DD DSN=&&SORTOUT,
 ×  //            DISP=(,CATLG),UNIT=SYSDA,
 ×  //            DCB=(LRECL=12,BLKSIZE=1200,RECFM=FB),
 ×  //            SPACE=(CYL,(15,15))
 ×  //SYSIN    DD DSN=&&SYSIN,
 ×  //            DISP=(,CATLG),UNIT=SYSDA,
 ×  //            DCB=(LRECL=80,BLKSIZE=800,RECFM=FB),
 ×  //            SPACE=(TRK,(1,1))
 ×  //SORTWK01 DD UNIT=SYSDA,SPACE=(CYL,(10),,CONTIG)
 ×  //SORTWK02 DD UNIT=SYSDA,SPACE=(CYL,(10),,CONTIG)
 ×  //SORTWK03 DD UNIT=SYSDA,SPACE=(CYL,(10),,CONTIG)
 ×  //SYSOUT   DD SYSOUT=*
 ×  //*
 ×  //** SEE WHAT THE USER DATABASE CONTROL CARDS LOOK LIKE
 ×  //*
 ×  //SAVEIT   EXEC PGM=IEBGENER
 ×  //SYSIN    DD DUMMY
 ×  //SYSPRINT DD SYSOUT=*
 ×  //SYSUT1   DD DISP=SHR,DSN=&&QWUSERDB
 ×  //SYSUT2   DD SYSOUT=*
 ×  //*
 ×  //** DELETE USER LIBRARY
 ×  //*
 ×  //DELOLD EXEC PGM=IDCAMS
 ×  //SYSPRINT DD SYSOUT=*
 ×  //SYSIN    DD *
 ×    DELETE 'SYS3.QUICKREF.USERDB'
 ×  //*
 ×  //** CREATE MVS/QUICKREF USER DATABASE
 ×  //*
 ×  //USERDB EXEC PGM=QWIKREF2,REGION=8M,PARM='OLDKEYS=N'
 ×  //STEPLIB  DD DISP=SHR,DSN=SYS3.QUICKREF.LOAD
 ×  //SYSPRINT DD SYSOUT=*
 ×  //DATAIN   DD DISP=OLD,DSN=&&QWUSERDB
 ×  //QWREFDD  DD DSN=SYS3.QUICKREF.USERDB,
 ×  //            DISP=(,CATLG,DELETE),
 ×  //            UNIT=3390,VOL=SER=PPXA20,
 ×  //            DCB=(RECFM=F,BLKSIZE=6160,LRECL=6160), <-DO NOT CHANGE
 ×  //            SPACE=(TRK,(90,30),RLSE)
 ×  //SYSIN    DD DUMMY
 ×  //SYSOUT    DD SYSOUT=*
 ×  //SORTIN   DD UNIT=SYSDA,SPACE=(CYL,(20),,CONTIG)
 ×  //SORTOUT  DD UNIT=SYSDA,SPACE=(CYL,(20),,CONTIG)
 ×  //SORTWK01 DD UNIT=SYSDA,SPACE=(CYL,(20),,CONTIG)
 ×  //SORTWK02 DD UNIT=SYSDA,SPACE=(CYL,(20),,CONTIG)
 ×  //SORTWK03 DD UNIT=SYSDA,SPACE=(CYL,(20),,CONTIG)
 ×
 ×
 × Disclaimer: This REXX exec is FREEWARE.  Use at your own risk.  It
 ×             is provided for your enjoyment and neither David
 ×             Alcock or his employer provides any warranty for it's
 ×             use.  I'd like to hear how it works on your system.
 ×
 ×             This software is not in the public domain but is
 ×             available free of charge and with source code provided.
 ×             It is copyright 1998 by David Alcock.  All rights
 ×             reserved.
 */

/**********************************************************************
*           M o d i f i c a t i o n   H i s t o r y
*
* Person     Date        Description
* ---------- ----------- ---------------------------------------------
* DGAlcock   05-MAY-1998 v1.0 Initial exec written
**********************************************************************/

/*---------------------------------------------------------------------
 × Installation dependant code
 ------------------------------------------------------------------- */

vnew_max = 10 /* Max Number of "New for Vxxx" to create */

/*---------------------------------------------------------------------
 × Dave's standard starting messages
 ------------------------------------------------------------------- */

vrm = '1.0'

mtype = address()
PARSE SOURCE s1 s2 s3 s4 s5 s6 s7 s8 s9

if mtype == "TSO" × mtype == "MVS" then ,
   if sysvar(systsoe) > "2040" then systemid = mvsvar(syssmfid)
   else do
        cvt    = storage(10,4)
        dcvt   = c2d(cvt)
        smca   = storage(c2x(d2c(dcvt+x2d(c5))),3)
        dsmca  = c2d(smca)
        systemid = storage(c2x(d2c(dsmca+x2d(10))),4)
        end
else systemid = ""

say "CBT$XREF - version "vrm "- Freeware - CBT tape XREF utility"
say "Copyright 1998 by David Alcock. All rights reserved."
say " "
say ". Executing in Environment: "s1 "-" mtype
if systemid <> "" then say ". Executing on system: "systemid
else do
     say "This exec is meant to be executed on a MVS (OS/390)" ,
         "system only, terminating"
     signal quickout
     end
say " "

/*---------------------------------------------------------------------
 × Misc initializations
 ------------------------------------------------------------------- */

address TSO "NEWSTACK"        /* output to DDNAME=QWUSERDB */

queue "KCAD C=CBT-TAPE" ,
      "D='MVS Freeware and Public Domain software'"
/*        ....+....1....+....2....+....3....+....4....+... */

cbtver = "???"
cbtdate = ""

/*---------------------------------------------------------------------
 × Process CBT file 001
 ------------------------------------------------------------------- */

say "File 001 processing begins"

x = LISTDSI("FILE001" "FILE")
if x <> 0 then do
   say "Error accessing DD=FILE001"
   say "> "sysmsglvl1
   say "> "sysmsglvl2
   say "> SYSREASON: "sysreason
   exit
   end
file1_dsn = sysdsname
parse value file1_dsn with cbtindex "FILE001.DATA"
if cbtindex == "" then do
   say " "
   say "Non-Standard CBT File001 file found"
   cbtindex = "<unknown>"
   end
say "Reading file: '"file1_dsn"'"

"EXECIO * DISKR FILE001 (FINIS STEM file1."

in_header = 1
in_vnew = 0
in_doc = 0
in_file = 0
filenum = ""
filecnt = 0
curv = ""
vnew_cur = 0

do i = 1 to file1.0

   if in_header == 1 then do
      if word(file1.i,3) == "VERSION" then ,
         if word(file1.i,4) == "#" then ,
            cbtver = word(file1.i,5)
         else cbtdate = word(file1.i,4)
      if substr(file1.i,1,8) == "//***CBT" then in_header = 0

      end

   if substr(file1.i,1,13) == "//***SECTION " then do
      in_header = 0
      in_vnew = 0
      in_doc = 0
      in_file = 0

      if substr(file1.i,14,2) == "V-" then do
         vnew_cur = vnew_cur + 1


         if vnew_cur > vnew_max then iterate

         in_vnew = 1
         vnum = substr(file1.i,16,3)
         say "Created _NEW"vnum" MVS/Quickref item"
         queue "K V='CBT' P='CBTINDEX' R='"cbtver"' I=_NEW"vnum
         end
      if substr(file1.i,14,3) == "DOC" then do
         in_doc = 1
         say "Processing file section"
         end

      end

   if in_vnew then queue " "substr(file1.i,6,63)
   if in_doc  then do
      if substr(file1.i,1,9) == "//***FILE" then do
         in_file = 1
         filecnt = filecnt + 1
         filenum = substr(file1.i,11,3)
         queue "K V='CBT' P='CBTINDEX' R='"cbtver"' I=FILE"filenum
         end
      if filenum == "" then iterate
      end
   if in_file then queue " "substr(file1.i,6,63)

   end


say "Created "filecnt" FILExxx MVS/Quickref items"
say "File 001 processing ends"

/*---------------------------------------------------------------------
 × Now that we have the CBT version and creation date, lets create
 × the category association and create the $$README entry in CBTINDEX
 ------------------------------------------------------------------- */

queue "KCAP V='CBT' P='CBTINDEX' R='"cbtver"' C=CBT-TAPE"

/*
 × create the $$README entry for the CBTINDEX
 */

queue "K V='CBT' P='CBTINDEX' R='"cbtver"' I=$$README"
queue " The CBT tape is comprised of MVS freeware (copyrighted) and "
queue " public domain (non-copyrighted) software that has been made "
queue " available free of charge."
queue " "
queue "    CBT tape version: "cbtver" - created on "cbtdate
queue " "

/* Put installation information here */

if substr(systemid,1,3) == "CSW" then do
   queue " At CSW, the CBT tape has been saved into a FDR backup."
   queue " Here is a sample jobstream to restore a CBT file:"
   queue " "
   queue "   //RESTORE EXEC PGM=FDRDSF,REGION=4096K,TIME=1439   "
   queue "   //SYSPRINT DD SYSOUT=*                             "
   queue "   //SYSUDUMP DD SYSOUT=*                             "
   queue "   //DISK1    DD UNIT=3380,VOL=SER=WRK205,DISP=SHR    "
   queue "   //TAPE1    DD DISP=SHR,DSN=ibmuser.XBACKUP.CBT"cbtver
   queue "   //SYSIN    DD *                                    "
   queue "       RESTORE TYPE=DSF,DSNENQ=TEST                   "
   queue "       EXCLUDE DSG=SYS1.VVDS                          "
   queue "       SELECT  DSG=SYS9.SYS.CBT.V"cbtver".FILE183"
   end


/*---------------------------------------------------------------------
 × Process CBT file 3 to get datasets with PDS members
 ------------------------------------------------------------------- */

say " "
say "File 003 processing begins"

/*
 ×   Ensure the file looks good, allocate it and read it in
 */

x = LISTDSI("FILE003" "FILE")
if x <> 0 then do
   say "Error accessing DD=FILE003"
   say "> "sysmsglvl1
   say "> "sysmsglvl2
   say "> SYSREASON: "sysreason
   signal file3x
   end
file3_dsn = sysdsname
/* If file1 had non-standard name, try file3 */
if cbtindex == "<unknown>" then do
   parse value file3_dsn with cbtindex "FILE003.DATA"
   if cbtindex == "" then do
      say " "
      say "Non-Standard CBT File003 file found"
      cbtindex = "<unknown>"
      end
   end
say "Reading file: '"file3_dsn"'"

"EXECIO * DISKR FILE003 (FINIS STEM file3."

/*
 ×  Process file 3 contents, pick out PDSs and process them
 */

address TSO "NEWSTACK"   /* output to DDNAME=SORTIN */

memtot = 0
p = 0

do i = 1 to file3.0
   if substr(file3.i,1,9) == "//STEPLIB" then iterate
   if substr(file3.i,1,6) == "//STEP" then do
      parse value file3.i with . "EXEC" util ",LAB=" num .
      if num == "" then iterate
      num = substr(num,1,3)   /* strip off any trailing stuff */
      util = strip(util)
      if substr(util,1,5) <> "GENER" then do
         p = p + 1

         x = outtrap("filemem.","*")
         "LISTD '"cbtindex"FILE"num".PDS' MEMBERS"
         lrc = rc
         x = outtrap("off")

         do m = 1 to filemem.0
            if filemem.m = "--MEMBERS--" then leave
            end

         if m == filemem.0 then do
            say "No members found for '"cbtindex"FILE"num".PDS'" ,
                "LISTD RC="lrc
            end
         else do
              k = filemem.0 - m
              say "Processing '"cbtindex"FILE"num".PDS'," ,
                  "number of members: "k
              do j = m to filemem.0
                 queue substr(filemem.j,3,8) num
                 memtot = memtot + 1
                 end
              end
         end
      end
   end

say "Processed "p" PDS datasets - total members: "memtot

queue ''      /* add null line to indicate End-Of-File */
address TSO "EXECIO * DISKW SORTIN (FINIS"
address TSO "DELSTACK"

/*
 ×  Create the sort control card
 ×
 ×                          123456789012
 ×  File records look like "MMMMMMMM NNN"
 */

address TSO "NEWSTACK"
queue ' SORT  FIELDS=(1,8,CH,A,10,3,CH,A)'
queue ''      /* add null line to indicate End-Of-File */
address TSO "EXECIO * DISKW SYSIN    (FINIS"
address TSO "DELSTACK"

/*
 × Invoke the system sort - sort by member name
 */

"TSOEXEC SORT"
sortrc = rc
say "Completed sort of members, SORT RC="sortrc

/*
 × If the sort was successful, create new MVS/Quickref items.
 */

memcnt = 0

if sortrc == 0 then do
   "EXECIO * DISKR SORTOUT (FINIS STEM sortout."
   lastmem = ""
   lastpre = ""
   do i = 1 to sortout.0
      parse value sortout.i with member num
      num = strip(num)
      member = strip(member)

      if member <> lastmem then do
         lastmem = member
         memcnt = memcnt + 1

         f = substr(member,1,1)
         queue "K V='CBT' P='CBTMEM"f"' R='"cbtver"' I="member

         if lastpre <> f then do
            say   "New member prefix:" f
            queue "KCAP V='CBT' P='CBTMEM"f"' R='"cbtver"' C=CBT-TAPE"
            lastpre = f
            end

         end

      queue " Member="member" found in DSN="cbtindex"FILE"num".PDS"
      end

   end

say " "
say "Created "memcnt" MVS/Quickref items for members"


/*
 × End of processing of file 003
 */

file3x:
say "File 003 processing ends"

/*---------------------------------------------------------------------
 × Terminate: Write out the user database and leave
 ------------------------------------------------------------------- */

queue ''      /* add null line to indicate End-Of-File */
address TSO "EXECIO * DISKW QWUSERDB (FINIS"
address TSO "DELSTACK"

quickout:
say " "
say "End of processing"
exit
