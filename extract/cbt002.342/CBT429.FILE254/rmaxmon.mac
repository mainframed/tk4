/* ******************* REXX XBM monitor ************************** */
true = "1"; false = "0";
address "TSO"; /* map environment */
dsname = "'SYS1.PRODSYSI.MASTER(TRC00D00)'"; /* parmlib */
ddname = LIBALLOC(dsname); /* allocate parmlib even if librarian */
"EXECIO * DISKR" ddname "(FINIS STEM TBLINPUT."; /* acquire job */
psaaold = storage("00000224",4); /* locate current ascb from psa */
ascbasxb = storage(d2x(c2d(psaaold)+108),4); /* mapping asxb */
asxbuser = storage(d2x(c2d(ascbasxb)+192),7); /* locate userid */
match = false; /* Assume error */
do index = 1 to tblinput.0; /* Scan for name translation */
    parse var tblinput.index origname newname . ;
    origname=strip(origname); newname=strip(newname);
    if origname^=asxbuser then iterate;
         else do;
            match=true;
            jcl_member_name = newname;
            leave index;
            end;
end;
if ^match then exit 20; /* Leave as no table match */
dsname = "'SYS1.PRODJCL.MASTER("jcl_member_name")'"; /* parmlib */
ddname = LIBALLOC(dsname); /* allocate parmlib even if librarian */
if rc^=0 then do;
   dsname = "'SYS1.TESTJCL.MASTER("jcl_member_name")'"; /* parmlib */
   ddname = LIBALLOC(dsname); /* allocate parmlib even if librarian */
   if rc^=0 then exit 16;
   end;
"EXECIO * DISKR" ddname "(FINIS STEM JCLINPUT."; /* acquire job */
genuser = false; /* Generated job must have USER= */
do index = 1 to jclinput.0; /* scan */
     if substr(jclinput.index,1,3)="//*" then iterate; /* ignore */
     if pos("USER=",jclinput.index)^=0 then do;
              /* Dont let job sub with USER=RMAX; will cause loop */
              /* Must be USER=ZEKE                                */
/*            if pos("USER=ZEKE",jclinput.index)=0 then exit 16;  */
              genuser=true; /* Valid job */
              leave index; /* exit loop */
              end;
end;
if ^genuser then exit 16; /* Leave as invalid JCL found */
counter = jclinput.0+1; /* number of base jcl statements */
jclinput.counter = "//SYSUT1 DD DATA,DCB=BLKSIZE=80"; /* xbm in */
counter = counter+1; /* prep for sysin datastream loop */
"EXECIO * DISKR SYSIN (FINIS STEM STREAM."; /* process xbm input */
do index = 1 to stream.0;
     jclstate = substr(stream.index,1,2); /* ignore jcl */
     if jclstate="//" × jclstate="/*" then iterate; /*...*/
     jclinput.counter = stream.index; /* add to output jcl */
     counter = counter + 1; /* next */
end;
jclinput.counter = "/*"; /* xbm sysin eof */
counter = counter+1; /* last time */
jclinput.counter = "//"; /* xbm sysin eof */
"EXECIO * DISKW INTRDR (FINIS STEM JCLINPUT."; /* write job */
exit 0;
