//JEFFKZ   JOB (530000000000),'TECH.JEFF.KAPLAN',
// CLASS=S,MSGCLASS=G,MSGLEVEL=(1,1),NOTIFY=JEFFK,REGION=6M
//S EXEC ASMHCL,PARM.L='LIST,LET,XREF,MAP,AC=1'
//C.SYSLIB DD DSN=SYS1.MACLIB,DISP=SHR
//         DD DSN=SYS1.AMODGEN,DISP=SHR
//C.SYSIN  DD *
PLB      TITLE 'STORE POLL DOWNLOAD DATA BREAKOUT'
POLLDOWN CSECT , /* STORE POLL DOWNLOAD DATA FILE BREAKOUT'
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
RA       EQU   10
RB       EQU   11
RC       EQU   12
RD       EQU   13
RE       EQU   14
RF       EQU   15
K0       EQU   0
K1       EQU   1
K2       EQU   2
K3       EQU   3
K4       EQU   4
K5       EQU   5
K6       EQU   6
K7       EQU   7
K8       EQU   8
K9       EQU   9
K10      EQU   10
K11      EQU   11
K12      EQU   12
K13      EQU   13
K14      EQU   14
K15      EQU   15
K16      EQU   16
K17      EQU   17
K18      EQU   18
K19      EQU   19
K20      EQU   20
K21      EQU   21
K23      EQU   23
K24      EQU   24
K27      EQU   27
K28      EQU   28
K32      EQU   32
K34      EQU   34
K36      EQU   36
K38      EQU   38
K40      EQU   40
K43      EQU   43
K44      EQU   44
K48      EQU   48
K52      EQU   52
K56      EQU   56
K57      EQU   57
K60      EQU   60
K64      EQU   64
K68      EQU   68
K72      EQU   72
K76      EQU   76
K80      EQU   80
K84      EQU   84
K88      EQU   88
K92      EQU   92
K96      EQU   96
K136     EQU   136
K144     EQU   144
K152     EQU   152
K176     EQU   176
K196     EQU   196
K208     EQU   208
K212     EQU   212
K255     EQU   255
K256     EQU   256
K272     EQU   272
K320     EQU   320
K550     EQU   550
K2047    EQU   2047
K4095    EQU   4095
K32760   EQU   32760
X80      EQU   X'80'
X40      EQU   X'40'
X20      EQU   X'20'
X10      EQU   X'10'
X08      EQU   X'08'
X04      EQU   X'04'
X02      EQU   X'02'
X01      EQU   X'01'
X7F      EQU   X'7F'
XFF      EQU   X'FF'
POLLDOWN AMODE 24
POLLDOWN RMODE 24
         SAVE  (14,12),,POLLDOWN*&SYSDATE*&SYSTIME
         LR    RA,RF /*ADDRESSABILITY*/
         USING POLLDOWN,RA,RB,RC
         LA    RB,K4095(,RA)
         LA    RB,K1(,RB)
         LA    RC,K4095(,RB)
         LA    RC,K1(,RC)
         LR    RF,RD /*SAVEAREA HOUSEKEEPING*/
         CNOP  K0,K4
         BAL   RD,*+K76
         DC    (K18)AL4(K0)
         ST    RD,K8(,RF)
         ST    RF,K4(,RD)
         SPLEVEL SET=2 , /* MVS/XA EXPANSION */
         TESTAUTH FCTN=1 , /* APF AUTHORIZED */
         LTR   RF,RF
         BNZ   FAUTH
         MODESET KEY=ZERO,MODE=SUP,RELATED=('STATE SWITCH')
         LR    R6,RD /* SAVE REGULAR SAVEAREA PTR */
         LA    RD,SAVEAREA ...
         SYSEVENT DONTSWAP,ENTRY=BRANCH , /* NOSWAP SHORT-TERM */
         LR    RD,R6 /* RESTORE */
         CLM   R1,K1,=AL1(K0)
         BNE   FSWAP
         LR    R6,RD /* SAVE REGULAR SAVEAREA PTR */
         LA    RD,SAVEAREA ...
         L     R1,=A(POLLDOWN) /* PAGEFIX */
         L     R2,=A(ENDFIX) ...
         PGSER R,FIX,A=(1),EA=(2),RELEASE=N,LONG=Y,BACKOUT=Y,          X
               BRANCH=Y,ECB=FIXECB
         LR    RD,R6 /* RESTORE */
         LTR   RF,RF
         BNZ   FPGSER
         USING PSA,R0
         L     RF,PSATOLD /* MAP TCB PROPER */
         DROP  R0
         USING TCB,RF
         MODESET EXTKEY=TCB,WORKREG=2,RELATED=('TCB KEY')
         DROP  RF
         RDJFCB BREAKER , /* ACQUIRE OUTPUT FILE JFCB */
         LTR   RF,RF
         BNZ   FRDJFCB
         LA    RF,JFCB
         USING INFMJFCB,RF
         TM    JFCDSRG1,JFCORGPO /* DSORG=PO */
         BZ    FNOTPO /* NO */
         TM    JFCBIND2,JFCNEW /* DISP=NEW */
         BNO   FNOTNEW /* NO */
         DROP  RF
OPENLIST OPEN  (DMASTER,(INPUT),BREAKER,(OUTPUT),REPORT,(OUTPUT),      X
               EMASTER,(INPUT))
         LTR   RF,RF /* OPEN OKAY */
         BNZ   FOPEN /*NO*/
         LM    R6,R9,OPENLIST+K4 /* PICKUP DCB PTRS */
         USING IHADCB,R6
         TM    DCBOFLGS,DCBOFOPN
         BZ    FOPEN
         DROP  R6
         USING IHADCB,R7
         TM    DCBOFLGS,DCBOFOPN
         BZ    FOPEN
         DROP  R7
         USING IHADCB,R8
         TM    DCBOFLGS,DCBOFOPN
         BZ    FOPEN
         DROP  R8
         USING IHADCB,R9
         TM    DCBOFLGS,DCBOFOPN
         BZ    FOPEN
         DROP  R9
         L     R3,CURAREAP /* CURRENT OUTPUT AREA ADDRESS */
         SLR   R5,R5 /* OUTSTAND NCP WRITE COUNTER */
PGETLOOP LA    R6,INAREA /* DOWNLOAD FILE HAS SETS OF 4 RCDS*/
         GET   DMASTER,(R6)    /* FIRST INPUT RECORD FOR PRIMING */
         NI    FLAGS,XFF-X40 /* SET NEW MEMBER FLAG OFF */
         OI    FLAGS,X80 /* SET UNEXPECTED EOF; MUST HAVE SETS OF 4*/
         TM    FLAGS,X08 /* MID TYPE 30 FILE */
         BO    MIDTYP30 /* YES */
         CLC   =C'30',INAREA+K7 /* NEW TYPE 30 SET */
         BE    SET30MOD /* YES */
         LA    R6,K80(,R6) /* NEXT SAVE AREA */
         LA    R7,K3 /* CTR FOR NEXT 3 RECORDS */
GETLOOP  GET   DMASTER,(R6)    /* FIRST INPUT RECORD FOR PRIMING */
         LA    R6,K80(,R6) /* NEXT SAVE AREA */
         BCT   R7,GETLOOP  ...
         MVC   INAREA+K80(K64),INAREA+K96 /*BUILD */
         MVC   INAREA+K144(K64),INAREA+K176 /* SHIFT RECORD AREAS */
         MVC   INAREA+K208(K64),INAREA+K256
LAST30SG MVC   SEQFIELD(K1),INAREA+K16 /* INPUT RECORD SEQ # */
PROCE0   NI    FLAGS,XFF-X80 /* RESET EXPECTED EOF BIT */
         NI    SEQFIELD,XFF-X80 /* SHUT DOWN HI SET END BIT */
         TM    FLAGS,X20 /* EXPECTED WRAPAROUND MODE */
         BO    DOWRAP /* YES */
         CLC   EXPSEQ,SEQFIELD /* MATCH ON EXPECTED SEQ # */
         BNE   SEQERR /* ERROR */
         CLI   SEQFIELD,X01 /* FIRST OF SET */
         BNE   BUILDRCD /* NO, ELSE SAVE MEMBER NAME */
         CLC   STOWLIST+K1(K4),INAREA+K2 /* COMPARE STORE ID */
         BNE   RESETSEQ /* MEMBER BREAK */
         TM    FLAGS,X04 /* E0 UP */
         BZ    CHKDFID NO
         CLC   STOWLIST+K5(K3),INAREA+K9 /* E0 FID */
         BNE   RESETSEQ /* BREAK */
         B     SEQERR /* OUT OF SEQ */
CHKDFID  CLC   STOWLIST+K5(K2),INAREA+K7 /* FILEID VAL DOWN CMPR*/
         BNE   RESETSEQ /* MEMBER BREAK */
         CLC   =C'50',INAREA+K7  /* FILEID WITH SUBGROUP */
         BE    BUILDMEM /* YES */
         CLC   =C'60',INAREA+K7 /* THIS ONE TOO */
         BE    BUILDMEM /* CONTINUE */
         B     SEQERR /* OUT OF SEQ */
RESETSEQ MVI   DUPLSEQ,C'0' /* RESET MEMBER NAME SUFFIX */
BUILDMEM MVC   STOWLIST+K1(K4),INAREA+K2 /* SAVE STORE ID */
         CLC   STOWLIST+K1(K4),=C'0000' /* INVALID VALUE STOREID*/
         BE    INVSTID /* BAD*/
         TRT   STOWLIST+K1(K4),NUMSONLY /* NUMERICS ONLY */
         BNZ   INVSTID /* BAD*/
         TM    FLAGS,X04 /* E0 CODE */
         BZ    MOVDFID /* NO */
         MVC   STOWLIST+K5(K3),INAREA+K9 /* FID FOR E0 */
         SLR   RF,RF /* INCR EXPECTED SEQ # */
         IC    RF,EXPSEQ ...
         LA    RF,K1(,RF) ...
         STC   RF,EXPSEQ /* DONE */
         XC    K0(K8,R3),K0(R3)    /* RESET BDW AND RDW */
         MVC   K0(K2,R3),=AL2(K8) /* BDW SIZE INCL ITSELF */
         MVC   K4(K2,R3),=AL2(K4) /* RDW SIZE INCL ITSELF */
         LA    R4,K8(,R3) /* POSITION OF FIRST RECORD */
         OI    FLAGS,X80 /* SET SNO EOF */
         GET   EMASTER,INAREA /* GET FIRST REAL RCD OF SET */
         MVC   SEQFIELD(K1),INAREA+K18 /* SET SEQ# */
         B     PROCE0 /* CONTINUE */
MOVDFID  MVC   STOWLIST+K5(K2),INAREA+K7 /* FILEID VALUE DOWNDATA*/
         CLC   STOWLIST+K5(K2),=C'50'   /* VALID VALUE */
         BE    VALIDFT /* OK */
         CLC   STOWLIST+K5(K2),=C'60'   /* VALID VALUE */
         BE    VALIDFT /* OK */
         CLC   STOWLIST+K5(K2),=C'30'   /* VALID VALUE */
         BE    VALIDFT /* OK */
         CLC   STOWLIST+K5(K2),=C'25'   /* VALID VALUE */
         BE    VALIDFT /* OK */
         CLC   STOWLIST+K5(K2),=C'27'   /* VALID VALUE */
         BNE   INVFT /* ERROR */
VALIDFT  SLR   RF,RF /* BUILD UNIQUE SUFFIX */
         IC    RF,DUPLSEQ /* INCR BY 1 FOR UNIQUE MEMBER NAME */
         LA    RF,K1(,RF)
         CLM   RF,K1,=C'9'    /* EXCEEDED SUFFIX MAX */
         BH    HISUBEOF /* YES */
         STC   RF,DUPLSEQ /* SAVE NEW UNIQUE MEMBER NAME SUFFIX */
         STC   RF,STOWLIST+K7 ...
PRIMCOMM XC    K0(K8,R3),K0(R3)    /* RESET BDW AND RDW */
         MVC   K0(K2,R3),=AL2(K8) /* BDW SIZE INCL ITSELF */
         MVC   K4(K2,R3),=AL2(K4) /* RDW SIZE INCL ITSELF */
         LA    R4,K8(,R3) /* POSITION OF FIRST RECORD */
BUILDRCD LH    RF,K0(,R3) /* CURRENT VAR BLOCK SIZE */
         SLR   R0,R0 /* PICKUP RECORD SET LEN */
         TM    FLAGS,X04 /* E0 */
         BZ    RCDLD /* NO */
         ICM   R0,3,INAREA+K19  /* ADD RCD LEN */
         LTR   R7,R0 /* SAVE FOR POSSIBLE RCD MOVE */
         BZ    INVRCDLN /* INVALID RECORD LEN */
         CLM   R0,K3,=AL2(K255) /* MUST NOT EXCEED THIS LEN */
         BH    INVRCDLN /* BAD RECORD */
         B     RCDLE
RCDLD    ICM   R0,3,INAREA+17  /* ADD RCD LEN */
         LTR   R7,R0 /* SAVE FOR POSSIBLE RCD MOVE */
         BZ    INVRCDLN /* INVALID RECORD LEN */
         AL    R0,=A(K3) /* FACTOR IN 1BYTE SEQ#AND 2BYTELEN*/
         CLM   R0,K3,=AL2(K256) /* MUST NOT EXCEED THIS LEN */
         BH    INVRCDLN /* BAD RECORD */
RCDLE    AR    RF,R0 /* SUM FOR NEW LEN USING FULLWORD INSTR */
         C     RF,=A(K32760) /* MAX BLOCKSIZE */
         BH    DONTFIT /* THIS RECORD CANT BE ADDED */
         STH   RF,K0(,R3) /* UPDATE BDW */
         LH    RF,K4(,R3) /* CURRENT VAR RCD SIZE */
         AR    RF,R0 /* SUM FOR NEW LEN USING FULLWORD INSTR */
         STH   RF,K4(,R3) /* UPDATE RDW */
         L     R6,TCHAR# /* INCR # OF TRANSMITTED CHARS */
         AR    R6,R0 /* DONT INCL BDW, RDW, ETC */
         ST    R6,TCHAR# ...
         L     R6,XBUILDEM /* INCR # OF TRANSMITTED CHARS */
         AR    R6,R0 /* DONT INCL BDW, RDW, ETC */
         ST    R6,XBUILDEM ...
         SLR   RF,RF /* INCR EXPECTED SEQ # */
         IC    RF,EXPSEQ ...
         LA    RF,K1(,RF) ...
         STC   RF,EXPSEQ /* DONE */
         TM    FLAGS,X04 /* E0 */
         BZ    PROPD /* MOVE D0 */
         LA    R8,INAREA+K21 /* SOURCE AREA */
         B     PROPE /* CONTINUE */
PROPD    MVC   0(K3,R4),INAREA+K16 /* MOVE 3BYTE HDR FIELD */
         LA    R4,K3(,R4) /* + */
         LA    R8,INAREA+K19 /* SOURCE AREA */
PROPE    LR    R6,R4 /* TARGET FOR RCD MOVE */
         LR    R9,R7  /* AS PER MVCL MAX PER RCD */
         MVCL  R6,R8 /* MOVE RECORD INTO OUTPUT BUFFER */
         LR    R4,R6 /* SAVE POSITION OF NEXT RCD TO BE BUILT */
         TM    FLAGS,X04 /* E0 */
         BZ    LRCDD /* NO */
         TM    INAREA+K18,X80 /* SET END */
         BO    E0SETEND /* YES */
         CLI   SEQFIELD,X7F /* LAST RCD BEFORE WRAP */
         BNE   PGETE /* NO, CONTINUE */
         OI    FLAGS,X20 /* SET WRAP MODE; 7F TO 01 AGAIN */
         B     PGETE /* CONTINUE */
E0SETEND LH    RF,K0(,R3) /* STRIP 2 FROM SIZE..E0 CONTROL STUFF*/
         S     RF,=A(K2) /* BDW -2 */
         STH   RF,K0(,R3)
         LH    RF,K4(,R3) /* STRIP 2 FROM SIZE..E0 CONTROL STUFF*/
         S     RF,=A(K2) /* RDW -2 */
         STH   RF,K4(,R3)
         L     RF,TCHAR#
         S     RF,=A(K2) /* CHARS TRANSMITTED */
         ST    RF,TCHAR#
         L     RF,XBUILDEM
         S     RF,=A(K2) /* CHARS TRANSMITTED */
         ST    RF,XBUILDEM
         B     BREAKIT /* CONTINUE */
LRCDD    TM    INAREA+K16,X80 /* LAST RECORD IN SET */
         BO    BREAKIT /* YES */
         CLI   SEQFIELD,X7F /* LAST RCD BEFORE POLL */
         BNE   PGETLOOP /* NO, CONTINUE */
         OI    FLAGS,X20 /* SET WRAP MODE; 7F TO 01 AGAIN */
         B     PGETLOOP /* CONTINUE */
DOWRAP   NI    FLAGS,XFF-X20 /* SET WRAP MODE OFF */
         MVI   EXPSEQ,X01 /* NEXT RCD EXPECTED SEQ# OF 01 */
         CLI   SEQFIELD,X01 /* EXPECTED WRAP; MUST BE 01 */
         BE    BUILDRCD /* OK */
         B     WRAPERR /* FAILURE IN INPUT */
SET30MOD OI    FLAGS,X08 /* TYPE 30 FILE PROCESS ACTIVE */
         GET   DMASTER,(R6) /*IGNORE SET HDR - MAJOR SEQ# 001*/
MIDTYP30 GET   DMASTER,(R6) /* FIRST OF SET */
         SLR   R6,R6 /* WORK */
         ICM   R6,K3,INAREA+K17 /* RCD LEN */
         LA    R7,K57 /* MAX DATA LEN ON FIRST RCD-INCL $$A$ TRLR*/
         CLR   R6,R7 /* MINOR SET COMPLETED */
         BNH   LAST30SG /* YES, LENGTH EXHAUSTED */
         SLR   R6,R7 /* DECREMENT COUNT */
         LA    R7,K60 /* SECONDARY RCD MAX */
         GET   DMASTER,INAREA+K76 /* RCD SEG# 2*/
         MVC   INAREA+K76(K60),INAREA+K92 /* SHIFT IGN HDR/TRLR */
         CLR   R6,R7 /* MINOR SET COMPLETED */
         BNH   LAST30SG /* YES, LENGTH EXHAUSTED */
         SLR   R6,R7 /* DECREMENT COUNT */
         GET   DMASTER,INAREA+K136 /* RCD SEG# 3*/
         MVC   INAREA+K136(K60),INAREA+K152 /* SHIFT IGN HDR/TRLR */
         CLR   R6,R7 /* MINOR SET COMPLETED */
         BNH   LAST30SG /* YES, LENGTH EXHAUSTED */
         SLR   R6,R7 /* DECREMENT COUNT */
         GET   DMASTER,INAREA+K196 /* RCD SEG# 4*/
         MVC   INAREA+K196(K60),INAREA+K212 /* SHIFT IGN HDR/TRLR */
         CLR   R6,R7 /* MINOR SET COMPLETED */
         BNH   LAST30SG /* YES, LENGTH EXHAUSTED */
         SLR   R6,R7 /* DECREMENT COUNT */
         GET   DMASTER,INAREA+K256 /* RCD SEG# 5*/
         MVC   INAREA+K256(K60),INAREA+K272 /* SHIFT IGN HDR/TRLR */
         B     LAST30SG /* LENGTH EXHAUSTED */
DONTFIT  CL    R5,=A(K5) /* AT MAX COUNT OF WRITES */
         BL    DONTFIT2 /* DO MORE */
         CHECK DECB /* WAIT AND CHECK PREVIOUS WRITE */
         SLR   R5,R5 /* RESET CHAINED BUFF COUNTER */
DONTFIT2 WRITE DECB,SF,,(R3),MF=E /* OUTPUT A BLOCK */
         LA    R5,K1(,R5) /* INCR WRITE OUTSTAND COUNT */
         L     RF,CURAREAP /* ROLL OUTPUT PTRS */
         MVC   CURAREAP(K20),CURAREAP+K4 ...
         ST    RF,CURAREAP+K20 ...
         L     R3,CURAREAP /* CURRENT OUTPUT AREA ADDRESS */
         B     PRIMCOMM /* CONTINUE */
BREAKIT  CL    R5,=A(K5) /* AT MAX COUNT OF WRITES */
         BL    BREAKIT2 /* DO MORE */
         CHECK DECB /* WAIT AND CHECK PREVIOUS WRITE */
BREAKIT2 WRITE DECB,SF,,(R3),MF=E /* OUTPUT A BLOCK */
         SLR   R5,R5 /* RESET CHAINED BUFF COUNTER */
         L     RF,CURAREAP /* ROLL OUTPUT PTRS */
         MVC   CURAREAP(K20),CURAREAP+K4 ...
         ST    RF,CURAREAP+K20 ...
         L     R3,CURAREAP /* CURRENT OUTPUT AREA ADDRESS */
         CHECK DECB /* WAIT AND CHECK PREVIOUS WRITE BEFORE STOW */
         STOW  BREAKER,STOWLIST,A /* DIRECTORY UPDATE */
         LTR   RF,RF /* CHECK */
         BNZ   FSTOW /* ADD PDS DIR ENTRY FAILURE */
         MVI   EXPSEQ,X01 /* NEXT RCD EXPECTED SEQ# OF 01 */
         OI    FLAGS,X40 /* SET STOW DOWN; MEMBER CREATED */
         NI    FLAGS,XFF-X08 /* RESET TYP30 PROCESS OFF */
         L     RF,MEMLISTP /* UPDATE DIRECTORY MEMBER */
         MVC   K0(K8,RF),STOWLIST /* MEMBER NAME */
         L     R0,XBUILDEM /* MEMBER BYTE COUNT */
         CVD   R0,WORK ...
         UNPK  K8(K9,RF),WORK+K3(K5)
         MVC   K8(K8,RF),K9(RF) ...
         OI    K15(RF),C'0' ....
         TR    K0(K16,RF),EBCASCII /* CHANGE TO ASCII */
         LA    RF,K16(,RF) /* SET NEXT DIR ENTRY PTR */
         ST    RF,MEMLISTP /* UPDATE PTR */
         L     RF,MEMBER# /* INCR MEMBER COUNTER */
         LA    RF,K1(,RF)
         ST    RF,MEMBER# ...
         CLC   XBUILDEM,MBUILDEM /* IS THIS LARGEST MEM */
         BNH   RESETIND /* NO */
         MVC   MBUILDEM,XBUILDEM /* RESET MAX FOUND */
         MVC   MNAMEMEM,STOWLIST /* MEMBER NAME */
RESETIND XC    XBUILDEM,XBUILDEM /* RESET INDIV TOTAL */
         TM    FLAGS,X04 /* E0 */
         BZ    PGETLOOP /* CONTINUE */
         B     PGETE /* CONTINUE E0 */
EOD      TM    FLAGS,X80 /* UNEXPECTED */
         BO    SNOEOF /* YES */
         TM    FLAGS,X40 /* SEE IF STOW FLAG ON */
         BZ    SNOEOF /* YES */
         NI    FLAGS,XFF-X40 /* SET NEW MEM OFF */
         OI    FLAGS,X04 /* INDICATE E0 PROCESSING ACTIVE */
         MVC   STOWLIST(K8),=C'E???????' /* PREP FOR E0 MEMBERS */
PGETE    OI    FLAGS,X80 /* SET SNO EOF */
         GET   EMASTER,INAREA /* RETRIEVE E0 RCD */
         MVC   SEQFIELD(K1),INAREA+K18 /* SET SEQ# */
         B     PROCE0 /* CONTINUE */
EOE      MVC   STOWLIST(K8),=C'DIRECTRY' /* INTERNAL DIRNAME */
         SLR   R5,R5 /* CURRENT WRITE CHECK CTR */
         L     R3,CURAREAP /* PREP DIR HDR */
         XC    K0(K8,R3),K0(R3)    /* RESET BDW AND RDW */
         MVC   K4(K2,R3),=AL2(K84) /* RDW */
         MVC   K0(K2,R3),=AL2(K88) /* BDW */
         LA    R4,K8(,R3) /* POSITION OF FIRST RECORD */
         MVC   K32(K4,R4),=C'DSN=' /* HARD CODE */
         L     RF,MEMBER# /* MEMBER ENTRY CTR */
         CVD   RF,WORK ...
         UNPK  K16(K8,R4),WORK+K4(K4)
         OI    K23(R4),C'0'
         MVC   K24(K8,R4),=C'00000000' /* RESERVED */
         MVC   K0(K16,R4),=C'19YY.DDDHH:MM:SS' /* LITERAL */
         TIME  DEC
         STCM  R1,K7,WORK+K5 /* DATE */
         UNPK  WORK(K5),WORK+K5(K3) ...
         OI    WORK+4,C'0'
         MVC   K2(K2,R4),WORK /* YY */
         MVC   K5(K3,R4),WORK+K2 /* DDD */
         CLM   R1,K8,=AL1(K0) /* CENTURY 19 OR 20 */
         BE    DOTIME /* 19 */
         MVC   K0(K2,R4),=C'20' /* ELSE */
DOTIME   ST    R0,WORK /* PACKED TIME */
         MVI   WORK+K3,K15 /* MAKE LIKE PACKED */
         UNPK  K36(K7,R4),WORK(K4) /* USE TEMP WORK */
         MVC   K8(K2,R4),K36(R4) HH
         MVC   K11(K2,R4),K38(R4) MM
         MVC   K14(K2,R4),K40(R4) SS
         LA    RF,JFCB
         USING INFMJFCB,RF
         MVC   K36(K44,R4),JFCBDSNM /* GET SAVED DSN */
         DROP  RF
         TR    K0(K80,R4),EBCASCII /* CHANGE TO ASCII */
         WRITE DECB,SF,,(R3),MF=E /* OUTPUT A BLOCK */
         LA    R5,K1(,R5) /* INCR WRITE OUTSTAND COUNT */
         L     RF,CURAREAP /* ROLL OUTPUT PTRS */
         MVC   CURAREAP(K20),CURAREAP+K4 ...
         ST    RF,CURAREAP+K20 ...
         L     R6,MEMBER# /* PRODUCE OUR DIRECTORY MEMBER */
         L     R7,=A(MEMLIST) /* TABLE START */
DODIR0   LA    R8,K2047 /* MAX # DIR ENTRY IN 1 VAR LEN BLK */
         SLR   R9,R9 /* CURRENT BLK ENTRY COUNT */
         L     R3,CURAREAP /* CURRENT OUTPUT AREA ADDRESS */
         XC    K0(K8,R3),K0(R3)    /* RESET BDW AND RDW */
         LA    R4,K8(,R3) /* POSITION OF FIRST RECORD */
DODIR1   MVC   K0(K16,R4),K0(R7) /* POSITION 1 MEMBER ENTRY */
         LA    R9,K1(,R9) /* INCR ENTRY COUNT */
         LA    R4,K16(,R4) /* NEXT OUTPUT SPOT */
         LA    R7,K16(,R7) /* NEXT INPUT SPOT */
         BCT   R8,DODIR3 /* COUNT FOR # ENTRIES IN BLK */
         SLL   R9,4 /* ENTRY COUNT TIMES 16 */
         LA    R9,K4(,R9) /* PLUS RDW */
         STH   R9,K4(,R3) /* INTO RDW */
         LA    R9,K4(,R9) /* PLUS BDW */
         STH   R9,K0(,R3) /* INTO BDW */
         CL    R5,=A(K5) /* AT MAX COUNT OF WRITES */
         BL    DODIR2   /* DO MORE */
         CHECK DECB /* WAIT AND CHECK PREVIOUS WRITE */
         SLR   R5,R5 /* RESET CHAINED BUFF COUNTER */
DODIR2   WRITE DECB,SF,,(R3),MF=E /* OUTPUT A BLOCK */
         LA    R5,K1(,R5) /* INCR WRITE OUTSTAND COUNT */
         L     RF,CURAREAP /* ROLL OUTPUT PTRS */
         MVC   CURAREAP(K20),CURAREAP+K4 ...
         ST    RF,CURAREAP+K20 ...
         B     DODIR0   /* CONTINUE */
DODIR3   BCT   R6,DODIR1 /* MEMBER COUNT */
         SLL   R9,4 /* ENTRY COUNT TIMES 16 */
         LA    R9,K4(,R9) /* PLUS RDW */
         STH   R9,K4(,R3) /* INTO RDW */
         LA    R9,K4(,R9) /* PLUS BDW */
         STH   R9,K0(,R3) /* INTO BDW */
         CL    R5,=A(K5) /* AT MAX COUNT OF WRITES */
         BL    DODIR5   /* DO MORE */
         CHECK DECB /* WAIT AND CHECK PREVIOUS WRITE */
DODIR5   WRITE DECB,SF,,(R3),MF=E /* OUTPUT A BLOCK */
         CHECK DECB /* WAIT AND CHECK PREVIOUS WRITE */
         STOW  BREAKER,STOWLIST,A /* DIRECTORY UPDATE */
         LTR   RF,RF /* CHECK */
         BNZ   FSTOW /* ADD PDS DIR ENTRY FAILURE */
         CLOSE (BREAKER) /* MAKE AVAIL FOR XCOMM */
         LA    RF,JFCB
         USING INFMJFCB,RF
         MVC   SDSNAME+K6(L'JFCBDSNM),JFCBDSNM /* GET SAVED DSN */
         DROP  RF
         LA    R1,SVC99PRM /* DYNALLOC PARM */
         DYNALLOC
         LTR   RF,RF
         BNZ   FSVC99
         LOAD  EPLOC=XCOMMEP
         LR    RF,R0 /* EP */
         LA    R1,=A(XCOMMPRM) /* EXEC PARM */
         BALR  RE,RF /* GO SCHEDULE */
         LTR   RF,RF /* RC */
         BNZ   FXCOMM /* SCHEDULE FAILURE */
         DELETE EPLOC=XCOMMEP
ERREXIT  MVC   OUTMSG(L'HEADER),HEADER
         PUT   REPORT,OUTMSG
         L     RF,MEMBER# /* STATISTICS */
         CVD   RF,WORK ...
         MVC   OUTMSG(L'MSGMEM#),MSGMEM#
         MVC   OUTMSG+L'MSGMEM#(L'MSGPAT),MSGPAT
         ED    OUTMSG+L'MSGMEM#(L'MSGPAT),WORK+K3
         PUT   REPORT,OUTMSG
         L     RF,TCHAR# /* STATISTICS */
         CVD   RF,WORK ...
         MVC   OUTMSG(L'MSGTCH#),MSGTCH#
         MVC   OUTMSG+L'MSGTCH#(L'MSGPAT),MSGPAT
         ED    OUTMSG+L'MSGTCH#(L'MSGPAT),WORK+K3
         PUT   REPORT,OUTMSG
         SLR   R6,R6
         L     R7,TCHAR#
         L     R8,MEMBER#
         LTR   R8,R8 /* DONT GET ERROR FOR DIVIDE BY 0 */
         BNZ   CALCAVGC  /* ELSE FORCE THIS MESSAGE */
         SLR   R7,R7
         B     CALCAVG2
CALCAVGC DR    R6,R8
CALCAVG2 ST    R7,TAVCH#
         L     RF,TAVCH# /* STATISTICS */
         CVD   RF,WORK ...
         MVC   OUTMSG(L'MSGACH#),MSGACH#
         MVC   OUTMSG+L'MSGACH#(L'MSGPAT),MSGPAT
         ED    OUTMSG+L'MSGACH#(L'MSGPAT),WORK+K3
         PUT   REPORT,OUTMSG
         L     RF,MBUILDEM /* STATISTICS */
         CVD   RF,WORK ...
         MVC   OUTMSG(L'MSGMCH#1),MSGMCH#1
         MVC   OUTMSG+L'MSGMCH#1(L'MSGPAT),MSGPAT
         ED    OUTMSG+L'MSGMCH#1(L'MSGPAT),WORK+K3
         PUT   REPORT,OUTMSG
         MVC   OUTMSG(L'MSGMCH#2),MSGMCH#2
         MVC   OUTMSG+K17(K8),MNAMEMEM
         PUT   REPORT,OUTMSG
         TM    FLAGS,X10 /* SEVERE ERROR OCCURED */
         BZ    DOCLOSE /* NO */
         MVC   OUTMSG(L'MERRMSG),MERRMSG
         PUT   REPORT,OUTMSG
DOCLOSE  CLOSE (DMASTER,,REPORT,,EMASTER)
         FREEPOOL DMASTER , /*NO FREEPOOL FOR BREAKER;DYNBUFF USED*/
         FREEPOOL EMASTER ,
         FREEPOOL REPORT  ,
         MODESET EXTKEY=ZERO,WORKREG=2,RELATED=('SUPVR KEY')
         LR    R6,RD /* SAVE REGULAR SAVEAREA PTR */
         LA    RD,SAVEAREA ...
         L     R1,=A(POLLDOWN) /* PAGEFREE*/
         L     R2,=A(ENDFIX) ...
         PGSER R,FREE,A=(1),EA=(2),RELEASE=N,ANYWHER=Y,                X
               BRANCH=Y,ECB=FIXECB
         LR    RD,R6 /* RESTORE */
         LTR   RF,RF
         BNZ   FPGSER
         LR    R6,RD /* SAVE REGULAR SAVEAREA PTR */
         LA    RD,SAVEAREA ...
         SYSEVENT OKSWAP,ENTRY=BRANCH , /* SWAP AGAIN */
         LR    RD,R6 /* RESTORE */
         CLM   R1,K1,=AL1(K0)
         BNE   FSWAP
         USING PSA,R0
         L     RF,PSATOLD /* MAP TCB PROPER */
         DROP  R0
         USING TCB,RF
         MODESET EXTKEY=TCB,WORKREG=2,RELATED=('TCB KEY')
         DROP  RF
XEXIT    L     RF,SYSTEMRC /* SET OS RC */
MAINEXIT L     RD,K4(,RD)
         RETURN (14,12),RC=(15)
FOPEN    LA    RF,K24 /* GENERAL OPEN FAILURE */
         B     MAINEXIT
SNOEOF   LA    RF,K28 /* UNEXPECTED EOF ON INPUT */
         B     DUMPEXIT
WRAPERR  LA    RF,K32 /* X7F NOT FOLLOWED BY X01 */
         B     DUMPEXIT
SEQERR   LA    RF,K36 /* SEQUENCE NUMBER OUT OF ORDER */
         B     DUMPEXIT
INVRCDLN LA    RF,K40 /* INDIV RCD LEN=0 OR GT>253 */
         B     DUMPEXIT
HISUBEOF LA    RF,K44 /* TOO MANY >9 MULTIPLE 50/60 SUBFILES */
         B     DUMPEXIT
INVFT    LA    RF,K48 /* INVALID INPUT RCD FILETYPE(25,27,30,50,60)
         B     DUMPEXIT
INVSTID  LA    RF,K52 /* INVALID STOR ID=0 OR NOT NUMERIC */
         B     DUMPEXIT
FRDJFCB  LA    RF,K56 /* READ JFCB FAILURE */
         B     MAINEXIT
FNOTPO   LA    RF,K60 /* BREAKER NOT PO */
         B     MAINEXIT
FNOTNEW  LA    RF,K64 /* DISP=NEW MUST BE FOR BREAKER */
         B     MAINEXIT
FAUTH    LA    RF,K68 /* NOT AUTH */
         B     MAINEXIT
FSWAP    LA    RF,K72 /* DONTSWAP FAIL */
         B     MAINEXIT
FPGSER   LA    RF,K76 /* PAGEFIX FAIL  */
         B     MAINEXIT
FSVC99   LA    RF,K80 /* SVC99 ALLOC FAIL */
         B     DUMPEXIT
FXCOMM   LA    RF,200(,RF) /* 200+XCOM FAILURE */
         B     DUMPEXIT
FSTOW    LA    RF,100(,RF) /* 100+STOW FAILURE CODE+REASON CODE*/
         ALR   RF,R0 /* ADD IN REASON CODE */
DUMPEXIT OI    FLAGS,X10 /* SEVERE ERROR BIT */
         ST    RF,SYSTEMRC /* BINARY RC */
         CVD   RF,WORK /* PREP ERROR MSG */
         UNPK  WORK(K3),WORK+K6(K2)
         OI    WORK+K2,C'0'
         MVC   MERRMSG+K13(K3),WORK
         MVC   MERRMSG+K27(K8),STOWLIST
         B     ERREXIT
         LTORG
         PRINT NOGEN
         WRITE DECB,SF,BREAKER,MF=L    /* OUTPUT A BLOCK */
WORK     DC    D'0'
JFCBEXIT DC    0F'0',X'87',AL3(JFCB)
JFCB     DC    CL176' ' /* A JFCB AREA */
SAVEAREA DC    (K18)A(K0) /* SPECIAL SAVE AREA */
FIXECB   DC    A(K0) /* PGSER ECB */
BREAKER  DCB   DDNAME=BREAKER,DSORG=PO,MACRF=(R,W),NCP=5,RECFM=VB,     X
               LRECL=32756,BLKSIZE=32760,BUFNO=11,EXLST=JFCBEXIT
DMASTER  DCB   DDNAME=DMASTER,DSORG=PS,EODAD=EOD,MACRF=(GM,PM),        X
               RECFM=FB,LRECL=80
EMASTER  DCB   DDNAME=EMASTER,DSORG=PS,EODAD=EOE,MACRF=(GM,PM),        X
               RECFM=FB,LRECL=550
REPORT   DCB   DDNAME=REPORT,DSORG=PS,MACRF=(GM,PM),                   X
               RECFM=FBA,LRECL=133,BLKSIZE=133
SVC99PRM DC    X'80',AL3(SVC99RB)
SVC99RB  DC    X'14014000'
         DC    X'00000000'
         DC    A(S99TXTPR)
         DC    X'00000000'
         DC    X'40000000' /* WAIT ON DSN */
S99TXTPR DC    X'00',AL3(SDDNAME)
         DC    X'00',AL3(SDSNAME)
         DC    X'00',AL3(SMEMBER)
         DC    X'80',AL3(SDISP)
SDDNAME  DC    X'000100010008',CL8'LCLDS01'
SDSNAME  DC    X'00020001002C',CL44' '
SMEMBER  DC    X'000300010008',CL8'DIRECTRY'
SDISP    DC    X'000400010001',X'01' /* OLD */
XCOMMEP  DC    0F'0',CL8'XCOMJOB'
XCOMMPRM DC    AL2(L'XCOMMPRL)
XCOMMPRL DC    C'TYPE=SCHEDULE'
STOWLIST DC    (K0)A(K0),C'D???????',A(K0) /* TTRC OF ZERO */
CURAREAP DC    A(OUTAREA1) /* CURRENT WORKING ON OUTPUT PTR */
         DC    A(OUTAREA2) /* CURRENT WORKING ON OUTPUT PTR */
         DC    A(OUTAREA3) /* CURRENT WORKING ON OUTPUT PTR */
         DC    A(OUTAREA4) /* CURRENT WORKING ON OUTPUT PTR */
         DC    A(OUTAREA5) /* CURRENT WORKING ON OUTPUT PTR */
         DC    A(OUTAREA6) /* CURRENT WORKING ON OUTPUT PTR */
MEMBER#  DC    A(K0) /* NUMBER OF PROCESSED MEMBERS */
TCHAR#   DC    A(K0) /* TOTAL NUMBER OF DATA CHARACTERS TO BE SENT*/
TAVCH#   DC    A(K0) /* APPROX AVG NUMBER CHARS PER MEMBER */
XBUILDEM DC    A(K0) /* MAX CHARS IN INDIV MEMBER */
MBUILDEM DC    A(K0) /* MAX CHARS IN INDIV MEMBER */
MEMLISTP DC    A(MEMLIST) /* PTR TO INTERNAL DIRECTORY */
SYSTEMRC DC    A(K0) /* RC */
MNAMEMEM DC    CL8' ' ...
DUPLSEQ  DC    C'0' /* MEMBER NAME SUFFIX FOR ID50/60 SUBGROUPS */
FLAGS    DC    AL1(K0)
* X80 UNEXPECTED EOF; SHOULD NOT OCCUR
* X40 LAST RECORD WAS SUBEOF - MEMBER CREATED
* X20 MEMBER RCD WRAPAROUND FROM X7F TO X01 ...
* X10 SEVERE ERROR FLAG USED BY EOJ ROUTINE
* X08 TYPE 30 PROCESSING ACTIVE
* X04 D0 PROCESSING COMPLETE; E0 PROCESSING ACTIVE
SEQFIELD DC    AL1(K0) /* USED TO HOLD SEQUENCE NUMBER */
EXPSEQ   DC    AL1(K1) /* EXPECTED SEQ # NEXT - MAKE SURE ORDER */
MSGPAT   DC    X'4B2020206B2020206B202120'
OUTMSG   DC    CL133' '
HEADER   DC    C'1POLLDOWN BREAKOUT REPORT'
MSGMEM#  DC    CL40'0# OF PDS MEMBERS CREATED................'
MSGTCH#  DC    CL40'0TOTAL # DOWNLOADED CHARACTERS...........'
MSGACH#  DC    CL40'0APPROX. AVG. # CHARACTERS PER MEMBER....'
MSGMCH#1 DC    CL40'0MAX. # CHARS. PER INDIVIDUAL MEMBER.....'
MSGMCH#2 DC    CL52' MEMBER NAME IS: XXXXXXXX'
MERRMSG  DC    CL52'0** ERROR RC:??? ** MEMBER:????????'
EBCASCII DC    (K256)AL1(K32) /* DEFAULT TO ASCII BLANK */
         ORG   EBCASCII+C' '
         DC    X'20'
         ORG   EBCASCII+C'.'
         DC    X'2E'
         ORG   EBCASCII+C':'
         DC    X'3A'
         ORG   EBCASCII+C'='
         DC    X'3D'
         ORG   EBCASCII+C'A'
         DC    X'414243444546474849'
         ORG   EBCASCII+C'J'
         DC    X'4A4B4C4D4E4F505152'
         ORG   EBCASCII+C'S'
         DC    X'535455565758595A'
         ORG   EBCASCII+C'0'
         DC    X'30313233343536373839'
         ORG
NUMSONLY DC    (K256)AL1(XFF) /* CHECK FOR DIGITS ONLY */
         ORG   NUMSONLY+C'0'
         DC    (K10)AL1(K0)
         ORG
INAREA   DC    (K550)AL1(K0) /* INPUT WORKAREA */
OUTAREA1 DS    (K32760)AL1(K0) /* LARGE OUTPUT WORKAREA */
OUTAREA2 DS    (K32760)AL1(K0) /* LARGE OUTPUT WORKAREA */
OUTAREA3 DS    (K32760)AL1(K0) /* LARGE OUTPUT WORKAREA */
OUTAREA4 DS    (K32760)AL1(K0) /* LARGE OUTPUT WORKAREA */
OUTAREA5 DS    (K32760)AL1(K0) /* LARGE OUTPUT WORKAREA */
OUTAREA6 DS    (K32760)AL1(K0) /* LARGE OUTPUT WORKAREA */
MEMLIST  DS    (K32760)CL16' ' /* INCORE DIRECTORY */
ENDFIX   EQU   *-K1
* 8 BYTE ASCII MEMBER NAME; 8 BYTE ASCII MEMBER CHAR COUNT
         DCBD  DSORG=(PO,QS),DEVD=DA
         DSECT
         IEFJFCBN
         CVT   DSECT=YES
         IKJTCB
         IHAPSA
         END
/*
//L.SYSLMOD DD DSN=SYS1.TECH.LPALIB(POLLDOWN),DISP=SHR,
// UNIT=,SPACE=
//*G.WORK DD DSN=JEFFK.VTOC.DATA,DISP=SHR
//*G.SYSUDUMP DD SYSOUT=*
