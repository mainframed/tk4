/* REXX EXEC to refresh a target system from a maintenance system */
parse upper arg product_name; /* passed parm */
if product_name="" × product_name="ESABASE" then lvl="SYS1";
    else if product_name="TECHCOMM" then lvl="SYS1.TECH.COMMON";
    else lvl = "SYS1."product_name;
dummy = outtrap("dsnlist.");
"LISTC LEVEL('"lvl"') NAMES CAT('SYS1.MCATSYSM.CLUSTER')";
dummy = outtrap("OFF");
if product_name="" then do;
   products = "ESABASE TECHCOMM"; /* init product list */
   prodlist.ESABASE = ""; /* init ESABASE dsname list */
   prodlist.TECHCOMM = ""; /* init TECHCOMM dsname list */
   end;
else do; /* reinit */
   products=product_name; /* reinit */
   prodlist.product_name = "";
   end;
do index =1 to dsnlist.0;
   parse upper var dsnlist.index enttype . dsname;
   if enttype^="NONVSAM" then iterate index;
   dsname=strip(dsname);
   quoted_dsname="'"dsname"'";
   funcrc = LISTDSI(quoted_dsname);
   if funcrc>4 then iterate index; /* tape entry or gdg etc. */
   if SYSDSORG^="PO" then iterate index;
   parse var dsname hlq "." mlq "." llq1 "." llqs;
   if llq1="" then do; /* dsn w/only 2 quals= part of ESA base */
        prodlist.ESABASE = prodlist.ESABASE dsname;
        end;
   else if mlq="TECH" & llq1="COMMON" then do;
        prodlist.TECHCOMM = prodlist.TECHCOMM dsname;
        end;
   else do; /* product */
        parse var llq1 "V" vers "R" rel "M" mod;
        if mod="" then iterate index; /* non-conform dsname */
        if wordpos(mlq,products)=0 then do;/* first time product*/
                products=products mlq;
                prodlist.mlq = dsname;
                end;
            else do;
                prodlist.mlq = prodlist.mlq dsname;
                end;
        end;
end;
if product_name^="" & prodlist.product_name="" then do;
     say "No datasets found!";
     exit 0;
     end;
"VMFCLEAR";
if product_name^="" then do;
     say "Processing product" product_name;
     say "";
     say "The following datasets will be refreshed";
     ctr = words(prodlist.product_name);
     do index = 1 to ctr;
         say "      "word(prodlist.product_name,index);
     end;
end;
else do;
     say "Processing ALL products";
     say "";
     say "The following products will be refreshed";
     say "";
     ctr = words(products);
     do index = 1 to ctr;
         say "      "word(products,index);
     end;
end;
say "";
say "Enter to save REFRJOB in" userid()".USER.CNTLLIB";
say "Type and enter 'QUIT' to exit";
parse upper pull status;
if status^="" then exit 0;
"ALLOC F(REFROUT) DA('"userid()".USER.CNTLLIB(REFRJOB)') SHR";
stepctr=1;
fdrddn = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
line.1="//REFRJOB JOB (5304010530000000),'TECH.SUPPORT',";
line.2="// NOTIFY="userid()",CLASS=S,MSGCLASS=G,MSGLEVEL=(1,1)";
linectr=3;
product_ctr = words(products);
do index=1 to product_ctr;
      pname=word(products,index);
      line.linectr="//STEP"stepctr "EXEC PGM=FDRCOPY,REGION=8M";
      stepctr=stepctr+1; linectr=linectr+1;
      line.linectr="//SYSPRINT DD SYSOUT=*";
      linectr=linectr+1;
      fdrptr = 1;
      dctr=words(prodlist.pname);
      do dindex=1 to dctr;
          pdsn=word(prodlist.pname,dindex);
          parse var pdsn . "." pdsn; /* strip hlq */
          ddn=substr(fdrddn,fdrptr,1);fdrptr=fdrptr+1;
          line.linectr="//SYSPRIN"ddn "DD SYSOUT=*";
          linectr=linectr+1;
          line.linectr="//DISK"ddn "DD DSN=SYSM."pdsn",DISP=SHR";
          linectr=linectr+1;
          line.linectr="//TAPE"ddn "DD DSN=SYSA."pdsn",DISP=SHR";
          linectr=linectr+1;
      end;
      line.linectr="//SYSIN DD *";
      linectr=linectr+1;
      line.linectr="  COPY TYPE=DSF,ENQERR=PROCESS,DSNENQ=NONE";
      linectr=linectr+1;
      fdrptr = 1;
      do dindex=1 to dctr;
          pdsn=word(prodlist.pname,dindex);
          parse var pdsn . "." pdsn; /* strip hlq */
          ddn=substr(fdrddn,fdrptr,1);fdrptr=fdrptr+1;
          line.linectr="  SELECT DSN=SYS1."pdsn",TAPEDD="ddn;
          linectr=linectr+1;
      end;
      line.linectr="/*";
      linectr=linectr+1;
end;
line.linectr="//";
"EXECIO * DISKW REFROUT (FINIS STEM LINE.";
"FREE F(REFROUT)";
exit 0;
