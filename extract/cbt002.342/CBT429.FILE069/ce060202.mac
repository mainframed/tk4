*
* CODING EXAMPLE 6.2.2
*
*
ESTAE01  CSECT
*
*
***********************************************************************
*    INITIALIZATION
***********************************************************************
*
	 INITL 3,EQU=R		   INITIALIZE PROGRAM
*
*
***********************************************************************
*    MAINSTREAM OF PROGRAM
***********************************************************************
*
	 BAL   R6,SETESTAE	   SETUP ESTAE ENVIRONMENT
	 BAL   R6,ALLOCSA	   ALLOCATE STORAGE FROM CSA
	 BAL   R6,BLDTBL	   BUILD SECURITY TABLE
	 BAL   R6,ALLOBUFF	   ALLO STOR FOR BUFF POOL & CNTL REC
	 BAL   R6,OPEN		   OPEN DATASETS
NXGROUP  BAL   R6,GETRECS	   READ A GROUP OF RECS INTO BUF POOL
	 BAL   R6,PROCESS	   PROCESS RECORDS IN BUFFER POOL
	 BAL   R6,PUTRECS	   WRITE BUFFER POOL RECS INTO DATASET
	 B     NXGROUP		   READ NEXT GROUP OF RECORDS
DATAEND  BAL   R6,PUTCNTL	   WRITE CONTROL RECORD
	 BAL   R6,CLOSE 	   CLOSE DATASETS
	 B     RETURN		   RETURN TO MVS OR CALLING PROGRAM
*
*
***********************************************************************
*    THIS ROUTINE ESTABLISHES THE ESTAE RECOVERY ENVIRONMENT. WHEN A
*    SYSTEM OR A USER ABEND IS ENCOUNTERED, THE RECOVERY EXIT ROUTINE
*    RECVEXIT RECEIVES CONTROL AND THE ADDRESSES OF THE PARAMETERS
*    POINTED TO BY PARMLIST ARE PASSED TO THE RECOVERY EXIT ROUTINE.
***********************************************************************
*
SETESTAE ESTAE RECVEXIT,CT,TERM=YES,PARAM=PARMLIST
	 BR    R6		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS ROUTINE ALLOCATES VIRTUAL STORAGE FROM THE CSA FOR THE
*    SECURITY TABLE. WHEN THE CSA STORAGE IS SUCCESSFULLY ALLOCATED,
*    AN INDICATOR BIT IS SET IN THE STATUS BYTE.
***********************************************************************
*
ALLOCSA  L     R10,CSALEN	   LOAD LEN OF REQD CSA STOR
	 GETMAIN EC,LV=(R10),SP=241,A=CSAADR
	 OI    STATUS,INDCSA	   INDICATE CSA ALLOCATED
	 BR    R6		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS ROUTINE CREATES THE SECURITY TABLE IN THE CSA. WHEN THE
*    CREATION OF THE TABLE IS SUCCESSFULLY COMPLETED, AN INDICATOR BIT
*    IS SET IN THE STATUS BYTE.
***********************************************************************
*
BLDTBL	 ...
	 OI    STATUS,INDTBLOK	   INDICATE TABLE CREATED OK
	 BR    R6		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS ROUTINE ALLOCATES VIRTUAL STORAGE FOR THE BUFFER POOL AND THE
*    CONTROL RECORD. THE LENGTH OF THE GETMAIN IS GOVERNED BY THE EQU
*    SYMBOL GMLEN WHICH IS CALCULATED (BY THE ASSEMBLER) BY MULTIPLYING
*    THE DESIRED NUMBER OF RECORDS (RECGROUP) IN THE BUFFER POOL BY THE
*    RECORD LENGTH PLUS THE LENGTH OF THE CONTROL RECORD.
***********************************************************************
*
ALLOBUFF GETMAIN RC,LV=GMLEN	   ALLOC STOR FOR BUFF POOL + CNTL REC
	 ...			   CHK IF GM OK
	 ST    R1,BUFFADR	   SAVE ADR OF BG OF BUFF POOL
	 LA    R1,BUFFLEN(0,R1)    INCR PASS BUFF POOL TO CNTL REC
	 ST    R1,CNTLADR	   SAVE ADR OF CNTL REC
	 BR    R6		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS ROUTINE OPENS ALL THE DCBS. AN INDICATOR BIT IS SET IN THE
*    STATUS BYTE WHEN THE OUTPUT DCB IS SUCCESSFULLY OPENED.
***********************************************************************
*
OPEN	 OPEN  (DCB1,,DCB,(OUTPUT))
	 ...			   CHECK IF OPEN OK
	 OI    STATUS,INDDCB2	   INDICATE THAT OUTPUT DCB OPENED
	 BR    R6		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS ROUTINE READS RECGROUP NUMBER OF RECORDS FROM THE INPUT
*    DATASET AND CALLS THE SUBROUTINE PUTBUFF AFTER EACH READ TO MOVE
*    THE RECORD INTO THE BUFFER POOL.
***********************************************************************
*
GETRECS  LA    R10,RECGROUP	   SET NUMB OF RECS IN BUFF POOL
NEXTREC  GET   DCB1		   READ A LOGICAL REC
	 LR    R2,R1		   SAVE ADR OF LOGICAL RECORD
	 BAL   R7,PUTBUFF	   MOVE REC INTO A BUFF OF THE POOL
	 BCT   R10,NEXTREC	   IF BUFF POOL NOT FILLED, READ REC
	 BR    R6		   IF FILLED, RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS ROUTINE PROCESSES THE RECORDS IN THE BUFFER POOL. IN ORDER TO
*    PERFORM THAT TASK, THIS ROUTINE BRANCHES AND LINKS TO THE SUBRTNS
*    WHICH HAVE THE FOLLOWING FUNCTIONS:
*	 * VALIDATE EACH RECORD IN THE BUFFER POOL;
*	 * UPDATE THE RECORDS IN THE BUFFER POOL;
*	 * UPDATE THE CONTROL RECORD WHEN ALL THE RECORDS IN THE BUFFER
*	   POOL ARE PROCESSED.
*    WHEN PROCESSING IS SUCCESSFULLY COMPLETED, THEN TWO INDICATOR BITS
*    ARE SET IN THE STATUS BYTE: ONE BIT TO INDICATE THAT THE RECORDS
*    WERE UPDATED AND THE OTHER BIT TO INDICATE THAT THE CONTROL RECORD
*    WAS UPDATED.
***********************************************************************
*
PROCESS  BAL   R7,VALIDATE	   VALIDATE RECS IN BUFF POOL
	 BAL   R7,UPDRECS	   UPDATE RECS IN BUFF POOL
	 BAL   R7,UPDCNTL	   UPDATE CNTL REC IN VIR STOR
	 OI    STATUS,INDBUF	   IND THAT ALL BUFF RECS UPDATED
	 OI    STATUS,INDCNTL	   IND THAT CNTL REC UPDATED
	 BR    R6		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS ROUTINE WRITES THE UPDATED RERCORDS FROM THE BUFFER POOL INTO
*    THE OUTPUT DATASET. WHEN ALL THE RECORDS FROM THE BUFFER POOL HAVE
*    BEEN SUCCESSFULLY WRITTEN, THEN THE INDICATOR BIT IS RESET IN THE
*    STATUS BYTE.
***********************************************************************
*
PUTRECS  ...			   WRITE UPDATED RECORDS INTO DATASET
	 NI    STATUS,INDXBUF	   IND THAT RECS IN BUFF POOL WRITTEN
	 BR    R6		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS ROUTINE WRITES THE CONTROL RECORD INTO THE OUTPUT DATASET
*    WHEN ALL THE INPUT RECORDS ARE PROCESSED.
***********************************************************************
*
PUTCNTL  L     R10,CNTLADR	   LOAD ADR OF CNTL REC
	 PUT   DCB2,(R10)	   WRITE CNTL REC
	 OI    STATUS,INDXCNTL	   IND THAT CNTL REC WRITTEN
	 BR    R6		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS ROUTINE CLOSES ALL THE DCBS. THE INDICATOR BIT IS RESET IN
*    THE STATUS BYTE WHEN THE OUTPUT DCB IS SUCCESSFULLY CLOSED.
***********************************************************************
*
CLOSE	 CLOSE (DCB1,,DCB2)
	 NI    STATUS,INDXDCB2	   INDICATE THAT OUTPUT DCB CLOSED
	 BR    R6		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS ROUTINE RESTORES THE REGISTERS AND RETURNS CONTROL.
***********************************************************************
*
RETURN	 RCNTL RC=0		   RETURN TO MVS OR CALLING PROG
*
*
***********************************************************************
*   THIS IS THE PARMLIST WHICH IS PASSED BY THE ESTAE SERVICE ROUTINE
*   TO THE RECOVERY EXIT ROUTINE.
***********************************************************************
*
PARMLIST DC    A(STATUS)	   ADR OF STATUS BYTE
	 DC    A(CSAADR)	   ADR OF FWD CONTAINING CSA STOR ADR
	 DC    A(CSALEN)	   ADR OF FWD CONTAINING CSA STOR LEN
	 DC    A(DCB2)		   ADR OF OUTPUT DCB ADR
BUFFADR  DS    F		   ADR OF BG OF BUFFER POOL
CNTLADR  DS    F		   ADR OF CONTROL RECORD
*
*** END OF PARMLIST ***
*
CSAADR	 DS    F		   ADR OF ALLO CSA STOR
CSALEN	 DC    A(4096)		   LENGTH OF ALLO CSA STOR
*
*
***********************************************************************
*    EQUS FOR STATUS INDICATOR BIT SETTINGS.
***********************************************************************
*
STATUS   DC    X'00'               STATUS BYTE CONTAINING INDICATORS
INDCSA   EQU   X'80'               CSA ALLOCATED
INDTBLOK EQU   X'40'               TABLE SUCCESSFULLY CREATED
INDDCB2  EQU   X'20'               OUTPUT DCB OPENED
INDXDCB2 EQU   X'DF'               OUTPUT DCB CLOSED
INDBUFF  EQU   X'10'               BUFFER POOL CONTAINS RECS TO WRITE
INDXBUFF EQU   X'EF'               RECS IN BUFFER POOL WRITTEN
INDCNTL  EQU   X'01'               CONTROL RECORD NOT WRITTEN YET
INDXCNTL EQU   X'FE'               CONTROL RECORD WRITTEN
*
*
***********************************************************************
*    EQUS USED TO CALCULATE GETMAIN LENGTH FOR BUFFER POOL AND CONTROL
*    RECORD.
***********************************************************************
*
LRECL	 EQU   80		   LENGTH OF DATA RECS AND CNTL REC
RECGROUP EQU   10		   DESIRED NUMBER OF RECS IN BUFF POOL
BUFFLEN  EQU   LRECL*RECGROUP	   LENGTH OF BUFF REQD FOR DATA RECS
GMLEN	 EQU   BUFFLEN+LRECL	   GM LEN = BUFFLEN + CNTLREC LEN
*
*
***********************************************************************
*    THE DCBS
***********************************************************************
*
DCB1	 DCB   ...
DCB2	 DCB   ...
*
*
*
*
***********************************************************************
*    THE FOLLOWING CSECT IS THE ESTAE RECOVERY EXIT REFERENCED IN THE
*    ESTAE MACRO IN THE MAIN PROGRAM.
***********************************************************************
*
RECVEXIT CSECT
*
*
***********************************************************************
*    INITIALIZATION
***********************************************************************
*
	 USING *,R3		   DEFINE BASE REG
	 USING SDWA,R12 	   DEFINE REG FOR SDWA DSECT
	 LR    R3,R15		   SET ADRBLTY FOR REVC EXIT RTN
	 ST    R14,SAVR14	   SAVE RETURN ADR TO RTM
*
*
***********************************************************************
*    THE FOLLOWING CODE DETERMINES IF AN SDWA HAS BEEN PROVIDED.
***********************************************************************
*
	 C     R0,BIN12 	   CHK IF SDWA CREATED
	 BE    NOSDWA		   PROCESS WITHOUT SDWA
	 B     YESSDWA		   PROCESS USING SDWA
*
*
***********************************************************************
*    THIS ROUTINE RECEIVES CONTROL IF AN SDWA WAS NOT PROVIDED. THIS
*    ROUTINE LOADS THE PARAMTER-LIST ADDRESS INTO THE REGISTER EXPECTED
*    BY THE RECOVERY ROUTINE; BRANCHES AND LINKS TO THE RECOVERY
*    ROUTINE; INDICATES THAT A SDWA WAS NOT PROVIDED; AND PASSES
*    CONTROL TO THE RECOVERY-EXIT RETURN ROUTINE.
***********************************************************************
*
NOSDWA	 LR    R10,R2		   LOAD ADR OF PARM-LIST
	 BAL   R6,RECVYRTN	   DO RECOVERY
	 LA    R15,0		   IND NO SDWA
	 B     EXITRET		   EXIT RECOVERY-EXIT
*
*
***********************************************************************
*    THIS ROUTINE RECEIVES CONTROL IF AN SDWA WAS PROVIDED. THIS
*    ROUTINE SAVES THE ADDRESS OF THE SDWA, LOADS THE PARAMTER-LIST
*    ADDRESS INTO THE REGISTER EXPECTED BY THE RECOVERY ROUTINE,
*    BRANCHES AND LINKS TO THE RECOVERY ROUTINE, INDICATES THAT AN
*    SDWA WAS PROVIDED, AND PASSES CONTROL TO THE RECOVERY-EXIT
*    RETURN ROUTINE.
***********************************************************************
*
YESSDWA  LR    R12,R1		   SET ADRBLTY FOR SDWA DSECT
	 L     R10,SDWAPARM	   LOAD ADR OF PARM-LIST
	 BAL   R6,RECVYRTN	   DO RECOVERY
	 LA    R15,4		   IND SDWA PROVIDED
	 B     EXITRET		   EXIT RECOVERY-EXIT
*
*
***********************************************************************
*    THE MAINSTREAM OF THE RECOVERY EXIT ROUTINE
***********************************************************************
*
RECVYRTN BAL   R7,GETPARMS	   GET PARM ADRS
	 BAL   R7,FREEMAIN	   CHK IF CSA FREEMAIN REQUIRED
	 BAL   R7,PUTRECX	   CHK IF BUFF WRITE REQUIRED
	 BAL   R7,PUTCNTLX	   CHK IF CNTL-REC WRITE REQUIRED
	 BAL   R7,CLOSEX	   CHK IF CLOSE REQUIRED
	 BR    R6		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS ROUTINE OBTAINS THE ADDRESSES OF THE PARAMETERS SPECIFIED BY
*    THE ESTAE MACRO AND PASSED TO THE RECOVERY ROUTINE BY RTM.
***********************************************************************
*
GETPARMS L     R11,0(0,R10)	   LD ADR OF PARM STATUS
	 ST    R11,STATADRX	   STORE ADR OF STATUS
	 L     R11,4(0,R10)	   LD ADR OF PARM CSAADR
	 ST    R11,GMADRX	   STORE ADR OF ADR OF CSA STOR
	 L     R11,8(0,R10)	   LD ADR OF PARM CSALEN
	 ST    R11,GMLENX	   STORE ADR OF CSALEN
	 L     R11,12(0,R10)	   LD ADR OF PARM DCB2
	 ST    R11,DCB2ADRX	   STORE ADR OF DCB2
	 L     R11,16(0,R10)	   LD ADR OF PARM BUFFADR
	 ST    R11,BUFFADRX	   STORE ADR OF BG OF BUFF POOL
	 L     R11,20(0,R10)	   LD ADR OF PARM CNTLADR
	 ST    R11,CNTLADRX	   STORE ADR OF CNTL REC
	 BR    R7		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS ROUTINE CHECKS THE STATUS BYTE TO DETERMINE IF THE ALLOCATED
*    CSA STORAGE IS TO BE RELEASED. THIS DECISION IS MADE BY VERIFYING
*    IF THE SECURITY TABLE WAS CREATED OK. IF THE TBL WAS SUCCESSFULLY
*    CREATED, THEN THE CSA STORAGE REMAINS ALLOCATED.
***********************************************************************
*
FREEMAIN L     R11,STATADRX	   LOAD ADR OF STATUS FIELD
	 TM    0(R11),INDCSA	   WAS CSA ALLO
	 BZR   R7		   IF NO, RETURN TO CALLING RTN
	 TM    0(R11),INDTBLOK	   IF YES, CHK IF TBL CREATED OK
	 BOR   R7		   IF YES, RETURN TO CALLING RTN
	 L     R10,GMLENX	   IF NO, RELEASE IT --- LOAD CSA LEN
	 LA    R11,GMADRX	   LOAD ADR OF FWD WHICH HAS CSA ADR
	 FREEMAIN EU,LV=(R10),SP=241,A=(R11)
	 BR    R7		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS ROUTINE CHECKS THE STATUS BYTE TO DETERMINE IF THE BUFF POOL
*    CONTAINS RECORDS WHICH ARE TO BE WRITTEN INTO THE OUTPUT DATASET.
***********************************************************************
*
PUTRECSX L     R11,STATADRX	   LOAD ADR OF STATUS FIELD
	 TM    0(R11),INDBUFF	   CHK IF BUFF HAS RECS TO WRITE
	 BZR   R7		   IF NO, RETURN TO CALLING RTN
	 ...			   IF YES, WRITE THEM
	 BR    R7		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS ROUTINE CHECKS THE STATUS BYTE TO DETERMINE IF THE CONTROL
*    RECORD, WHICH IS IN VIRTUAL SRORAGE, IS TO BE WRITTEN INTO THE
*    OUTPUT DATASET.
***********************************************************************
*
PUTCNTLX L     R11,STATADRX	   LOAD ADR OF STATUS FIELD
	 TM    0(R11),INDCNTL	   CHK IF CNTL REC HAS TO BE WRITTEN
	 BZR   R7		   IF NO, RETURN TO CALLING RTN
	 L     R11,DCB2ADRX	   IF YES, LOAD DCB2 ADR
	 L     R12,CNTLADRX	   LOAD CNTL REC ADR
	 PUT   (R11),(R12)	   WRITE CNTL REC
	 BR    R7		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS ROUTINE CHECKS THE STATUS BYTE TO DETERMINE IF THE OUTPUT DCB
*    IS REQUIRED TO BE CLOSED.
***********************************************************************
*
CLOSEX	 L     R11,STATADRX	   LOAD ADR OF STATUS FIELD
	 TM    0(R11),INDDCB2	   CHK IF DCB2 OPENED
	 BZR   R7		   IF NO, RETURN TO CALLING RTN
	 L     R11,DCB2ADRX	   IF YES, LOAD DCB2 ADR
	 CLOSE (R11)		   CLOSE DCB2
	 BR    R7		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS ROUTINE RECEIVES CONTROL WHEN THE RECOVERY EXIT ROUTINE IS TO
*    RETURN CONTROL TO RTM. THIS ROUTINE CHECKS WHETHER OR NOT AN SDWA
*    WAS PROVIDED AND CAUSES CONTROL TO BE RETURNED ACCORDINGLY.
***********************************************************************
*
EXITRET  LTR   R15,R15		   CHK IF SDWA PROVIDED
	 BZ    RETXSDWA 	   IF NO, RETURN WITHOUT SDWA
	 B     RETSDWA		   IF YES, RETURN WITH SDWA
*
*
***********************************************************************
*    THIS ROUTINE RETURNS CONTROL WHEN AN SDWA WAS NOT PROVIDED.
***********************************************************************
*
RETXSDWA LA    R15,0		   INDICATE --- CONTINUE WITH ABEND
	 L     R14,SAVR14	   RESTORE RETURN ADR
	 BR    R14		   RETURN TO RTM
*
*
***********************************************************************
*    THIS ROUTINE RETURNS CONTROL WHEN AN SDWA WAS PROVIDED.
***********************************************************************
*
RETSDWA  SETRP WKAREA=(R12),RC=0,DUMP=NO   RC=0 --- CONTIN WITH ABEND
	 L     R14,SAVR14	   RESTORE RETURN ADR
	 BR    R14		   RETURN TO RTM
*
*
***********************************************************************
*    THE FOLLOWING ARE THE FULLWORDS USED TO STORE THE PARAMETER
*    ADDRESSES RECEIVED FROM THE ESTAE SERVICE ROUTINE AND THE
*    FULLWORD TO SAVE THE RETURN ADDRESS TO RTM.
***********************************************************************
*
STATADRX DS    F		   ADR OF THE STATUS BYTE
GMADRX	 DS    F		   ADR OF THE ADR OF THE ALLO CSA STOR
GMLENX	 DS    F		   ADR OF THE LEN OF THE ALLO CSA STOR
DCB2ADRX DS    F		   ADR OF THE OUTPUT DCB
BUFFADRX DS    F		   ADR OF THE BG OF THE BUFFER POOL
CNTLADRX DS    F		   ADR OF THE CONTROL RECORD
*
SAVR14	 DS    F		   RETURN ADR TO RTM
*
*
***********************************************************************
*    CONSTANTS USED BY EXIT ROUTINE
***********************************************************************
*
BIN12    DC    F'12'
*
*
***********************************************************************
*    THE DSECTS
***********************************************************************
*
	 PRINT NOGEN
	 IHASDWA		   GENERATES SDWA DSECT
*
*
***********************************************************************
*    END OF PROGRAM
***********************************************************************
*
	 END
