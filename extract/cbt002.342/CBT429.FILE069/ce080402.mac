*
* CODING EXAMPLE 8.4.2
*
*
READPDSB CSECT
*
*
***********************************************************************
*    INITIALIZATION
***********************************************************************
*
	 INITL 3,EQU=R		   INITIALIZE PROGRAM
	 USING IHADCB,R10	   DEFINE REG FOR DCB DSECT
	 USING LRECMAP,R11	   DEFINE REG FOR LREC DSECT
*
*
***********************************************************************
*    MAINSTREAM OF PROGRAM
***********************************************************************
*
	 BAL   R6,OPEN		   OPEN DATASETS
	 BAL   R6,GETMAIN	   ALLO STOR FOR PDS BLOCK I/O AREA
	 BAL   R6,GETLRINF	   CALC NUMB OF LRECS PER BLOCK
NEXTMEMB BAL   R6,LOCMEMB	   LOCATE SPEC MEMBER IN PDS
NEXTLREC BAL   R6,GETLREC	   GET A LOGICAL RECORD OF MEMBER
	 BAL   R6,PROCMEMB	   PROCESS LOGICAL RECORD
	 B     NEXTLREC 	   GET NEXT LOGICAL RECORD OF MEMBER
MEMBEND  B     NEXTMEMB 	   END-OF-MEMB, GET NEXT MEMBER
MEMBENDX BAL   R6,CLOSE 	   ALL MEMBERS READ, CLOSE DATASETS
	 B     RETURN		   RETURN TO MVS OR CALLING PROG
*
*
***********************************************************************
*    THIS ROUTINE OPENS ALL THE DCBS.
***********************************************************************
*
OPEN	 OPEN  (SYSIN,,PDSBDCB)
	 ...			   CHECK FOR GOOD OPEN
	 BR    R6		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS ROUTINE OBTAINS THE BLKSIZE FROM THE PDS DCB AND ALLOCATES
*    VIRTUAL STORAGE FOR THE PDS BLOCK I/O AREA.
***********************************************************************
*
GETMAIN  LA    R10,PDSBDCB	   SET ADRBLTY FOR PDS DCB DSECT
	 LH    R11,DCBBLKSI	   LD PDS BLOCK SIZE
	 GETMAIN EC,LV=(R11),A=BLKADR
	 ...			   CHECK IF GM OK
	 BR    R6		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS ROUTINE CALCULATES THE NUMBER OF LOGICAL RECORDS IN A FULL
*    PHYSICAL BLOCK. THIS INFORMATION IS USED BY THE DEBLOCKING RTN.
***********************************************************************
*
GETLRINF LA    R10,PDSBDCB	   SET ADRBLTY FOR PDS DCB DSECT
	 LH    R12,DCBLRECL	   LOAD PDS LRECL
	 ST    R12,LRECLEN	   SAVE PDS LRECL
	 LA    R14,0		   CLEAR REG 14 FOR DR INSTR
	 LH    R15,DCBBLKSI	   LOAD PDS BLKSZ
	 DR    R14,R12		   DIVIDE BLKSZ BY LRECL
	 ST    R15,LRECMAX	   SAVE NUMB OF LRECS PER BLOCK
	 BR    R6		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS ROUTINE LOCATES THE NEXT MEMBER TO BE PROCESSED. IN ORDER
*    TO PERFORM THAT TASK, THIS ROUTINE BRANCHES AND LINKS TO THE
*    SUBROUTINES WHICH PERFORM THE FOLLOWING FUNCTIONS:
*	 * READ THE NEXT MEMBER NAME FROM THE SYSIN DATASET;
*	 * SET THE DASD LOCATION IN THE PDS DCB TO THE BEGINNING OF THE
*	   MEMBER WHICH IS TO PROCESSED.
***********************************************************************
*
LOCMEMB  BAL   R7,GETNAME	   GET A SPECIFIED MEMBER NAME
	 BAL   R7,FINDMEMB	   SET MEMB PTR IN PDS DCB
	 LTR   R15,R15		   CHK IF MEMB FOUND
	 BNZ   LOCMEMB		   IF NO, TRY NEXT SPEC MEMB
	 BR    R6		   IF YES, RET TO CALLING RET
*
*
***********************************************************************
*    THIS SUBROUTINE READS THE NAME OF THE NEXT MEMBER, WHICH IS TO BE
*    PROCESSED, FROM THE SYSIN DATASET.
***********************************************************************
*
GETNAME  GET   SYSIN,MEMBNAME	   GET A SPEC MEMB NAME FROM SEQ DS
	 BR    R7		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS SUBROUTINE CAUSES THE LOCATION OF THE BEGINNING OF THE
*    SPECIFIED MEMBER TO BE PLACED INTO THE PDS DCB.
***********************************************************************
*
FINDMEMB FIND  PDSBDCB,MEMBNAME,D  FIND MEMB WITH NAME SPECIFIED
	 LTR   R15,R15		   CHK IF SPEC MEMB FOUND
	 BNZ   NOMEMB		   IF NO, IND MEMB NOT FOUND
	 BR    R7		   IF YES, RET TO CALLING RET
NOMEMB	 ...
	 BR    R7		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS ROUTINE READS THE NEXT LOGICAL RECORD OF THE MEMBER. IN ORDER
*    TO PERFORM THAT TASK, THIS ROUTINE BRANCHES AND LINKS TO THE
*    SUBROUTINES WHICH PERFORM THE FOLLOWING FUNCTIONS:
*	 * READ THE NEXT PHYSICAL BLOCK OF THE MEMBER;
*	 * DEBLOCK THE PHYSICAL BLOCK INTO LOGICAL RECORDS.
***********************************************************************
*
GETLREC  BAL   R7,READBLOK	   READ A MEMB BLOCK FROM PDS
	 BAL   R7,DEBLOCK	   GET A LREC FROM BLOCK
	 BR    R6		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS SUBROUTINE READS AN ENTIRE PHYSICAL BLOCK OF THE MEMBER AND
*    SETS THE LOGICAL RECORD POINTER TO THE BEGINNING OF THE BLOCK AND
*    SETS THE LOGICAL RECORD NUMBER COUNTER TO ONE.
***********************************************************************
*
READBLOK CLI   READSW,C'1'         CHK IF NEXT BLOCK READ REQUIRED
	 BNER  R7		   IF NOT, RET TO CALLING RET
         MVI   READSW,C'0'
	 L     R11,BLKADR	   LD ADR OF BLOCK I/O AREA
	 ST    R11,LRECPTR	   INIT LREC PTR TO BG OF BLOCK
	 MVC   LRECCTR,ONE	   INIT LREC CTR TO ONE
	 READ  RDDECB,SF,PDSBDCB,(R11)
	 CHECK RDRECB		   CHECK IF READ OK
	 BR    R7		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS SUBROUTINE DEBLOCKS A PHYSICAL BLOCK OF THE PDS INTO LOGICAL
*    RECORDS. IT USES THE INFORMATION IN LRECPTR (POINTER TO NEXT
*    LOGICAL RECORD) AND LRECCTR (NUMBER OF THE NEXT LOGICAL RECORD IN
*    THE BLOCK). THIS ROUTINE DOES THE FOLLOWING:
*	 * UPDATES THE VALUES IN LRECPTR AND LRECCTR;
*	 * CHECKS FOR END-OF-BLOCK (BY COMPARING THE NUMBER OF THE
*	   LOGICAL RECORD TO THE TOTAL LOGICAL RECORDS IN A BLOCK);
*	 * LOADS REGISTER 2 WITH THE ADDRESS OF THE CURRENT LOGICAL
*	   RECORD.
*    THE INITIAL VALUES OF LRECPTR AND LRECCTR ARE SET BY THE READBLOK
*    ROUTINE.
***********************************************************************
*
DEBLOCK  L     R10,LRECCTR	   LOAD CURR LREC CTR
	 L     R11,LRECPTR	   LOAD CURR LREC PTR
	 LR    R2,R11		   SAVE CURR LREC PTR IN REG 2
	 C     R10,LRECMAX	   CHECK IF LAST LREC OF BLOCK
	 BE    LRECEND		   IF YES, IND IT
	 LA    R10,1(0,R10)	   INCR LREC COUNT
	 ST    R10,LRECCTR	   SAVE LREC COUNT
	 L     R12,LRECLEN	   LOAD PDS LRECL
	 LA    R11,0(R12,R11)	   INCR TO NEXT LREC ADR
	 ST    R11,LRECPTR	   SAVE NEXT LREC ADR
	 BR    R7		   RETURN TO CALLING RTN
LRECEND  MVI   READSW,C'1'         IND THAT NEXT BLOCK READ REQUIRED
	 BR    R7		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS ROUTINE PROCESSES EACH LOGICAL RECORD OF THE MEMBER.
***********************************************************************
*
PROCMEMB LR    R11,R2		   LD ADR OF LREC, SET DSECT ADRBLTY
	 ...
	 BR    R6		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS ROUTINE CLOSES ALL THE DCBS.
***********************************************************************
*
CLOSE	 CLOSE (SYSIN,,PDSBDCB)    CLOSE ALL DCBS
	 BR    R6		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS ROUTINE RESTORES THE REGISTERS AND RETURNS CONTROL.
***********************************************************************
*
RETURN	 RCNTL RC=0		   RETURN TO MVS OR CALLING PROG
*
*
***********************************************************************
*    DC/DS STATEMENTS
***********************************************************************
*
READSW   DC    C'1'
ONE      DC    F'1'
BLKADR	 DS    F
LRECLEN  DS    F
LRECPTR  DS    F
LRECCTR  DS    F
LRECMAX  DS    F
MEMBNAME DS    D
*
*
***********************************************************************
*    THE DCBS
***********************************************************************
*
SYSIN	 DCB   DSORG=PS,MACRF=GM,EODAD=MEMBENDX,DDNAME=SYSIN
PDSBDCB  DCB   DSORG=PO,MACRF=R,EODAD=MEMBEND,DDNAME=PDSDD
*
*
***********************************************************************
*    THE DSECTS
***********************************************************************
*
	 PRINT NOGEN
	 DCBD  DSORG=PO 	   GENERATES PO-DCB DSECT
	 PRINT GEN
*
	 DSECT
	 LRECMAP
	 ...			   FIELDS OF LOGICAL RECORD
*
*
***********************************************************************
*    END OF PROGRAM
***********************************************************************
*
	 END
