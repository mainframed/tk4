*
* CODING EXAMPLE 11.3.2
*
*
WRTDASD  CSECT
*
*
***********************************************************************
*    INITIALIZATION
***********************************************************************
*
	 INITL 3,EQU=R		   INITIALIZE PROGRAM
	 USING DEBBASIC,R9	   DEFINE REG FOR BASIC-DEB DSECT
	 USING DEBDASD,R10	   DEFINE REG FOR DASD-DEB DSECT
	 USING IHADCB,R11	   DEFINE REG FOR DCB DSECT
	 USING IOBSTDRD,R12	   DEFINE REG FOR IOB DSECT
*
*
***********************************************************************
*    MAINSTREAM OF PROGRAM
***********************************************************************
*
	 BAL   R6,SETDSCTS	   LOAD DSECT REGS
	 BAL   R6,SETIOB	   SET REQUIRED IOB FIELDS
	 BAL   R6,GTRKINFO	   GET CYL/TRK CAPAC INFO
	 BAL   R6,OPEN		   OPEN DCBS
	 BAL   R6,GET1EXTN	   GET 1ST EXTENT OF DATASET
NEXTREC  BAL   R6,GETREC	   READ A CARD-IMAGE RECORD
	 BAL   R6,WRTREC	   WRITE THE RECORD TO DASD
	 B     NEXTREC		   READ NEXT RECORD
ENDDATA  BAL   R6,WRTEND	   END-OF-DATA, WRITE ZERO-CT REC
	 BAL   R6,CLOSE 	   CLOSE DCBS
	 B     RETURN		   RETURN TO MVS OR CALLING PROG
*
*
***********************************************************************
*    THIS ROUTINE LOADS THE REGISTERS FOR THE DCB AND THE IOB DSECTS.
***********************************************************************
*
SETDSCTS LA    R11,WRTDCB	   LOAD DCB ADR FOR DSECT ADRBLTY
	 LA    R12,WRTIOB	   LOAD IOB ADR FOR DSECT ADRBLTY
	 BR    R6		   RET TO CALLING RTN
*
*
***********************************************************************
*    THIS ROUTINE SETS THE REQUIRED FIELDS OF THE IOB
***********************************************************************
*
SETIOB   MVI   IOBFLAG1,X'42'      IND CCW-CHAINING, NOT RELATED
	 MVC   IOBSTART,CCWADR	   LOAD BG ADR OF CCW-LIST
	 MVC   IOBDCBPT,DCBADR	   LOAD DCB ADR
	 MVC   IOBECBPT,ECBADR	   LOAD ECB ADR
	 BR    R6		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS ROUTINE USES THE DEVTYPE MACRO TO OBTAIN THE NUMBER OF TRACKS
*    PER CYLINDER AND THE TRACK CAPACITY FOR THE DASD DEVICE WHICH IS
*    TO CONTAIN THE DATASET WHICH IS TO BE WRITTEN; AND USES THE
*    TRKCALC MACRO TO DETERMINE THE NUMBER OF 80-BYTE RECORDS WHICH CAN
*    BE WRITTEN ON A TRACK OF THE SAME DEVICE TYPE.
***********************************************************************
*
GTRKINFO MVC   DDNAME,DCBDDNAM	   EXTRACT DDNAME FROM DCB
	 DEVTYPE DDNAME,DEVTAREA,DEVTAB
	 LH    R10,CYLTRKS	   LD NUMB OF TRKS PER CYL
	 BCTR  R10,0		   DECR TO GET HI-TRK ADR
	 STH   R10,HITRKADR	   SAVE HI-TRK ADR (REL TO 0)
	 MVC   TRKBAL,TRKSIZE	   SAVE TRK CAPAC
	 TRKCALC FUNCTN=TRKCAP,TYPE=UCBTBYT4,RKDD=RKDD,REGSAVE=YES
	 STC   R0,TRKRECS	   SAVE NUMB OF 80-BYTE RECS/TRK
	 BR    R6		   RETURN TO CALLING RTN
*
*
************************************************************************
*    THIS ROUTINE OPENS ALL THE DCBS.
************************************************************************
*
OPEN	 OPEN  (INRECS,,WRTDCB,(OUTPUT))
	 BR    R6		   RETURN TO CALLIN RTN
*
*
***********************************************************************
*    THIS ROUTINE OBTAINS THE ADDRESS OF THE FIRST EXTENT FIELD IN THE
*    DEB AND THEN BRANCHES AND LINKS TO THE GETNXEXT SUBROUTINE WHICH
*    EXTRACTS THE BEGINNING CCHH OF THE EXTENT.
***********************************************************************
*
GET1EXTN L     R9,DCBDEBAD	   LD DEB ADR FROM DCB, DSECT ADRBLTY
	 MVC   TOTEXTN,DEBNMEXT    EXTRACT TOTAL NUMB OF EXTENTS
	 LA    R10,32(0,R9)	   INCR TO BG OF EXTENTS AREA IN DEB
	 ST    R10,EXTNADR	   SAVE 1ST EXTENT ADR FOR GETNXEXT RTN
	 XC    EXTNCTR,EXTNCTR	   INIT EXTENT CTR TO ZERO
	 BAL   R8,GETNXEXT	   GET CC AND HH OF NEXT EXTENT
	 BR    R6		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS SUBROUTINE EXTRACTS THE BEGINNING CCHH OF THE NEXT EXTENT FOR
*    THE CALLING ROUTINE. IT ALSO CHECKS FOR LAST-EXTENT, INCREMENTS
*    TO THE NEXT EXTENT FIELD IN THE DEB AND SAVES THE EXTENT FIELD
*    ADDRESS IN THE FULLWORD EXTNADR. IF THERE ARE NO MORE EXTENTS,
*    THIS SUBROUTINE ATTEMPTS TO ALLOCATE ANOTHER ONE VIA THE EOV
*    MACRO. THIS SUBROUTINE RECEIVES THE ADDRESS OF THE FIRST EXTENT
*    FIELD IN THE DEB FROM THE ROUTINE GET1EXTN.
***********************************************************************
*
GETNXEXT IC    R10,EXTNCTR	   LD PREV EXTENT NUMB
	 LA    R10,1(0,R10)	   INCR TO IND THIS EXTENT
	 STC   R10,EXTNCTR	   SAVE THIS EXTENT NUMB
	 CLC   EXTNCTR,TOTEXTN	   COMP THIS EXT NUMB TO TOT EXTENTS
	 BH    DOEOV		   IF ALL ALLO EXTENTS USED, TRY TO
*				   ALLO ANOTHER EXTENT
LDNXEXT  L     R10,EXTNADR	   LD ADR OF NEXT EXTENT FIELD IN DEB
	 MVC   CC,DEBSTRCC	   PUT CC OF NEXT EXTENT INTO RECPTR
	 MVC   HH,DEBSTRHH	   PUT HH OF NEXT EXTENT INTO RECPTR
	 MVC   RCNTCCHH,CCHH	   PUT CCHH INTO COUNT AREA
	 LA    R10,16(0,R10)	   INCR TO NEXT EXTENT FIELD IN DEB
	 ST    R10,EXTNADR	   SAVE ADR OF NEXT EXTENT FIELD
	 BR    R8		   RETURN TO CALLING RTN
DOEOV	 EOV   WRTDCB		   ALLO ANOTHER EXTENT
	 L     R9,DCBDEBAD	   LD ADR OF DEB
	 MVC   TOTEXTN,DEBNMEXT    EXTRACT TOTAL NUMB OF EXTENTS
	 LA    R14,0		   ZERO REG 14 FOR IC INSTR
	 IC    R14,TOTEXTN	   LD NEW TOT EXTENT NUMB
	 BCTR  R14,0		   DECR TOT EXTENT NUMB FOR SLL INSTR
	 SLL   R14,4		   MULT TOT-EXTENT-NUMB MINUS 1 BY
*				   16 (EXTENT ENTRY LEN) TO GET
*				   NEW EXTENT OFFSET
	 LA    R10,32(R14,R9)	   LD ADR OF NEW EXTENT ALLOCATED
	 ST    R10,EXTNADR	   SAVE ADR OF NEW EXTENT FIELD
	 B     LDNXEXT		   PROCESS EXTENT
*
*
***********************************************************************
*    THIS ROUTINE READS THE RECORDS USED TO CREATE THE DASD DATASET.
***********************************************************************
*
GETREC	 GET   INRECS,RECDATA	   READ A CARD-IMAGE RECORD
	 BR    R6		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS ROUTINE WRITES A NEW RECORD INTO THE DASD DATASET. IN ORDER
*    TO PERFORM THAT TASK, THIS ROUTINE BRANCHES AND LINKS TO THE
*    SUBROUTINES WHICH PERFORM THE FOLLOWING FUNCTIONS:
*      * INCREMENT THE RECORD POINTER TO POINT TO THE NEXT RECORD
*	 LOCATION FOR WHICH THE NEW RECORD IS TO BE WRITTEN;
*      * CHECK IF THE NEW RECORD FITS IN THE SPACE REMAINING ON THE
*	 TRACK;
*      * OBTAIN THE NEW TRACK BALANCE AFTER THE NEW RECORD IS WRITTEN;
*      * ISSUE THE EXCP MACRO TO WRITE THE NEXT PHYSICAL RECORD OF THE
*	 DASD DATASET.
***********************************************************************
*
WRTREC	 BAL   R7,SETRCPTR	   SET RECPTR TO PREV RECORD
	 BAL   R7,CHKFIT	   CHK IF NEW REC WILL FIT ON TRK
	 BAL   R7,GETRKBAL	   GET TRK BAL AFTER REC WRITTEN
	 BAL   R7,DOEXCP	   ISSUE EXCP MACRO TO WRITE RECORD
	 BR    R6		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS SUBROUTINE INCREMENTS THE RECORD POINTER TO POINT TO THE NEXT
*    RECORD LOCATION FOR WHICH THE NEW RECORD IS TO BE WRITTEN AND
*    MOVES THE NEW RECORD POINTER INTO THE IOB. SINCE A WHOLE (COUNT,
*    KEY, AND DATA) NEW RECORD IS TO BE WRITTEN (FORMATTED), THE RECORD
*    POINTER ACTUALLY POINTS TO THE PREVIOUS RECORD.
***********************************************************************
*
SETRCPTR IC    R10,R		   LOAD OLD PREV REC NUMB
	 LA    R10,1(0,R10)	   INCR REC NUMB TO NEW PREV REC NUMB
	 STC   R10,R		   SAVE NEW PREV REC NUMB
	 MVC   IOBSEEK,RECPTR	   MOVE BMMCCHHR OF PREV REC INTO IOB
	 LA    R10,1(0,R10)	   INCR TO CURRENT REC NUMB
	 STC   R10,RCNTR	   PUT CUR REC NUMB INTO COUNT AREA
	 BR    R7		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS SUBROUTINE CHECKS IF THE NEW RECORD FITS IN THE SPACE
*    REMAINING ON THE TRACK. IF THE NEW RECORD WILL NOT FIT IN THE
*    REMAINING SPACE ON THE TRACK, THEN THE RECORD POINTER IS
*    INCREMENTED TO THE NEXT TRACK.
***********************************************************************
*
CHKFIT	 CLC   RCNTR,TRKRECS	   COMP CUR REC NUMB WITH MAX RECS/TRK
	 BNHR  R7		   IF EQUAL/LOW, RET TO CALLING RTN
	 BAL   R8,SETNXTRK	   IF HIGH, GET NEXT TRK ADR
	 B     WRTREC		   WRITE RECORD TO NEXT TRK
*
*
***********************************************************************
*    THIS SUBROUTINE SETS THE RECORD POINTER TO POINT TO THE BEGINNING
*    OF THE NEXT TRACK FOR THE NEXT NEW RECORD TO BE WRITTEN; BRANCHES
*    AND LINKS TO THE CHKNXTRK ROUTINE TO VALIDATE THE TRACK NUMBER;
*    AND RESETS THE RECORD NUMBER AND TRACK BALANCE FOR THE NEW TRACK.
***********************************************************************
*
SETNXTRK DS    0H
         WTO   '*** NEXT TRACK ***',ROUTCDE=11  *** FOR TESTING ONLY
         MVI   SECTOR,X'00'        SET SECTOR NUMB TO BG OF TRK
         MVI   R,X'FF'             INIT REC NUMB FOR NEW TRK
	 LH    R10,HH		   LOAD CUR TRK NUMB
	 LA    R10,1(0,R10)	   INCR TRK NUMB
	 STH   R10,HH		   PUT NEW TRK NUMB INTO RECPTR
	 BAL   R9,CHKNXTRK	   VAL TRK NUMB, INCR CYL NUMB IF NEC
	 MVC   TRKBAL,TRKSIZE	   INIT TRK BALANCE FOR NEW TRK
	 MVC   RCNTCCHH,CCHH	   PUT CUR CYL/TRK NUMB INTO COUNT AREA
	 BR    R8		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS SUBROUTINE VALIDATES THE NEW TRACK NUMBER AFTER THE TRACK
*    NUMBER IS INCREMENTED TO DETERMINE IF IT EXCEEDS THE HI-TRACK
*    ADDRESS OF A CYLINDER. IF IT DOES, THEN THE CYLINDER NUMBER IS
*    INCREMENTED AND THE TRACK NUMBER IS SET TO ZERO.
***********************************************************************
*
CHKNXTRK CLC   HH,HITRKADR	   COMP NEW TRK NUMB TO HI-TRK ADR
	 BH    SETNXCYL 	   IF HIGH, INCR CYL NUMB
	 BR    R9		   IF NOT HIGH, RET TO CALLING RTN
SETNXCYL XC    HH,HH		   SET TRK NUMB TO ZERO (BG OF CYL)
	 LH    R10,CC		   LOAD CUR CYL NUMB
	 LA    R10,1(0,R10)	   INCR CYL NUMB
	 STH   R10,CC		   PUT NEW CYL NUMB INTO RECPTR
	 BR    R9		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS SUBROUTINE USES THE TRKCALC MACRO TO OBTAIN WHAT THE TRACK
*    BALANCE WILL BE AFTER THE RECORD IS WRITTEN. THIS VALUE IS USED TO
*    UPDATE THE DCBTRBAL FIELD OF THE DCB, WHICH IS USED TO UPDATE THE
*    FORMAT-1 DSCB, WHEN THE DATASET IS CLOSED.
***********************************************************************
*
GETRKBAL MVC   RKDD(1),RCNTR	   SET CUR REC NUMB FOR TRKCALC MACRO
	 TRKCALC FUNCTN=TRKBAL,TYPE=UCBTBYT4,RKDD=RKDD,REGSAVE=YES,    -
	       BALANCE=TRKBAL
	 STH   R0,TRKBAL	   SAVE TRK BALANCE AFTER REC WRITTEN
	 BR    R7		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS SUBROUTINE ISSUES THE EXCP MACRO TO WRITE THE NEXT PHYSICAL
*    RECORD OF THE DASD DATASET, CHECKS THE ECB COMPLETION CODE AND
*    PERFORMS THE APPROPRIATE ACTION INDICATED BY THE COMPLETION CODE.
***********************************************************************
*
DOEXCP	 XC    WRTECB,WRTECB	   CLEAR ECB FOR EXCP MACRO
	 EXCP  WRTIOB		   ISSUE EXCP
	 WAIT  1,ECB=WRTECB	   WAIT FOR I/O COMPLETION
         TM    WRTECB,X'7F'        CHK FOR GOOD I/O
	 BNO   CHKECB		   IF NO, EXAM ECB
	 BR    R7		   IF I/O GOOD, RET TO CALLING RTN
*
CHKECB   TM    WRTECB,X'41'        CHK FOR EXCEPTION COND
	 BO    CHKEND		   IF YES, CHK FOR INPUT END-OF-DATA
         TM    WRTECB,X'42'        CHK FOR END-OF-EXTENT
	 BO    SETNXEXT 	   IF YES, ALLO NEW EXTENT
	 B     EXCPERR		   IF NO, I/O ERROR, DUMP DIAG INFO
*
CHKEND   CLI   WRTENDSW,C'1'       CHK IF END-OF-DATA ON INPUT
	 BER   R7		   IF YES, RET TO CALLING RTN
	 B     EXCPERR		   IF NO, I/O ERROR, DUMP DIAG INFO
*
SETNXEXT DS    0H
         WTO   '*** NEXT EXTENT ***',ROUTCDE=11   *** FOR TESTING ONLY
	 IC    R10,M		   LOAD CUR EXTENT NUMB
	 LA    R10,1(0,R10)	   INCR EXTENT NUMB
	 STC   R10,M		   PUT NEW EXTENT NUMB INTO RECPTR
	 BAL   R8,GETNXEXT	   GET CCHH OF NEXT EXTENT
         MVI   SECTOR,X'00'        SET SECTOR TO ZERO (BG OF TRK)
         MVI   R,X'00'             SET REC NUMB OF RECPTR TO REC PREV
*				   OF 1ST REC TO WRITE
         MVI   RCNTR,X'01'         SET COUNT REC NUMB TO 1ST TO WRITE
	 MVC   IOBSEEK,RECPTR	   PUT NEW MBBCCHHR INTO IOB
	 B     DOEXCP		   RE-ISSUE EXCP MACRO
*
*
***********************************************************************
*    THIS ROUTINE RECEIVES CONTROL WHEN ALL THE NEW DASD RECORDS ARE
*    WRITTEN. THIS ROUTINE BRANCHES AND LINKS TO THE SUBROUTINES WHICH
*    PERFORM THE FOLLOWING FUNCTIONS:
*      * INCREMENT THE RECORD POINTER TO POINT TO THE LAST RECORD
*	 WRITTEN;
*      * WRITE A ZERO-COUNT-RECORD AFTER THE LAST RECORD TO INDICATE
*	 END-OF-DATA;
*      * UPDATE THE DCB WITH THE DASD LOCATION OF THE LAST RECORD AND
*	 THE TRACK BALANCE (NUMBER OF BYTES REMAINING ON THE TRACK
*	 INCLUDING THE SPACE OCCUPIED BY THE ZERO-COUNT-RECORD).
***********************************************************************
*
WRTEND	 BAL   R7,SETRCPTR	   SET RECPTR TO LAST RECORD WRITTEN
	 XC    RCNTDLEN,RCNTDLEN   SET COUNT DATA-LEN TO ZERO
	 MVC   IOBSTART,CCWXADR    PUT ADR OF ZERO-CT-RECORD CCW-LIST
*				   INTO IOB
         MVI   WRTENDSW,C'1'       IND INPUT END-OF-DATA
	 BAL   R7,DOEXCP	   WRITE ZERO-CT-RECORD
	 BAL   R7,UPDTDCB	   UPDATE DCB
	 BR    R6		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS SUBROUTINE UPDATES THE DCB FIELDS DCBFDAD (POINTER TO LAST
*    RECORD WRITTEN) AND DCBTRBAL (TRACK BALANCE) BEFORE THE DATASET
*    IS CLOSED.
***********************************************************************
*
UPDTDCB  MVC   DCBFDAD,IOBSEEK	   MOVE DASD ADR (MBBCCHHR) OF LAST
*				   NON-ZERO CT RECORD WRITTEN INTO DCB
	 MVC   DCBTRBAL,TRKBAL	   MOVE BYTES REMAINING ON TRACK INTO
*				   DCB
	 BR    R7		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS ROUTINE CLOSES ALL THE DCBS. FOR THE DASD DATASET JUST
*    CREATED, THIS CLOSE CAUSES THE FIELDS DS1LSTAR AND DS1TRBAL OF
*    THE FORMAT-1 DSCB TO BE UPDATED FROM THE CONTENTS OF THE
*    CORRESPONDING FIELDS DCBFDAD AND DCBTRBAL, RESPECTIVELY, OF THE
*    DCB.
***********************************************************************
*
CLOSE	 CLOSE (INRECS,,WRTDCB)
	 BR    R6		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS ROUTINE RECEIVES CONTROL IF THE ATTEMPTED I/O IS
*    UNSUCCESSFUL. THIS ROUTINE LOADS VARIOUS DIAGNOSTIC INFORMATION
*    INTO REGISTERS 8, 9, 10, 11, AND 12 AND THEN CAUSES AN ABEND WITH
*    A DUMP.
***********************************************************************
*
EXCPERR  L     R8,WRTECB	   LOAD CONTENTS OF ECB INTO A REG
	 MVC   ERRINFO(1),EXTNCTR	EXTENT NUMBER
	 MVC   ERRINFO+1(1),IOBUSTAT	UNIT STATUS FIELD OF CSW
	 MVC   ERRINFO+2(1),IOBSENS0	BYTE-1 OF HARDWARE SENSE CODE
	 MVC   ERRINFO+3(1),IOBSENS1	BYTE-2 OF HARDWARE SENSE CODE
	 L     R9,ERRINFO	   LOAD ERROR INFO WORD INTO A REG
	 L     R10,RECPTR	   LOAD 1ST 4 BYTES OF REC-PTR
	 L     R11,RECPTR+4	   LOAD 2ND 4 BYTES OF REC-PTR
	 L     R12,ERRID	   LOAD ERR-ID TO FIND REGS IN DUMP
	 IC    R12,RCNTR	   INSERT REC-ID FROM COUNT AREA
	 ABEND 900,DUMP 	   ISSUE ABEND MACRO AND REQ A DUMP
*
*
***********************************************************************
*    THIS ROUTINE RESTORES THE REGISTERS AND RETURNS CONTROL.
***********************************************************************
*
RETURN	 RCNTL RC=0		   RETURN TO MVS OR CALLING RTN
*
*
***********************************************************************
*    THIS LIST REQUIRED FOR THE DEVTYPE MACRO.
***********************************************************************
*
DEVTAREA DS    0CL24
UCBTYP	 DS    0CL4
	 DS    CL3
UCBTBYT4 DS    CL1
	 DS    CL4
	 DS    CL2
CYLTRKS  DS    CL2		   NUMBER OF TRACKS PER CYLINDER
TRKSIZE  DS    CL2		   TRACK CAPACITY IN BYTES
	 DS    CL2
	 DS    CL8
*
*
***********************************************************************
*    THIS AREA MAPS OUT THE RECORD-POINTER WHICH IS USED TO POINT TO
*    THE RECORD AFTER WHICH THE NEW RECORD IS TO BE WRITTEN.
***********************************************************************
*
	 DS    0F		   FOR ALIGNMENT FOR THE EXCPERR RTN
RECPTR	 DS    0CL8
M        DC    X'00'               EXTENT NUMBER (STARTING WITH ZERO)
BB       DC    XL2'00'             BIN NUMBER (NO LONGER USED)
CCHHR	 DS    0CL5
CCHH	 DS    0CL4
CC	 DS    CL2		   CYLINDER NUMBER
HH	 DS    CL2		   HEAD (TRACK) NUMBER
R        DC    X'FF'               RECORD NUMBER
*
*
***********************************************************************
*    THIS AREA MAPS OUT A COMPLETE (COUNT, KEY, AND DATA) DASD RECORD
*    AND IS USED TO WRITE (FORMAT) THE NEW DASD RECORDS.
***********************************************************************
*
RECORD	 DS    0CL88		   WHOLE RECORD (COUNT-KEY-DATA)
RECCOUNT DS    0CL8		   COUNT AREA OF RECORD
RCNTCCHH DS    CL4		   CCHH OF RECORD
RCNTR	 DS    CL1		   RECORD NUMBER OF RECORD
RCNTKLEN DC    X'00'               KEY LENGTH
RCNTDLEN DC    X'0050'             DATA LENGTH
RECDATA  DS    CL80		   DATA AREA OF RECORD
*
*
***********************************************************************
*    OTHER DC/DS STATEMENTS
***********************************************************************
*
WRTENDSW DC    C'0'
DDNAME	 DS    CL8
SECTOR   DC    X'00'
HITRKADR DS    H
TRKBAL	 DS    H
TRKRECS  DS    CL1
CYLNUM   DC    F'0'
TRKNUM   DC    F'0'
RKDD     DC    X'01000050'         USED BY TRKCALC MACRO
TOTEXTN  DS    CL1
EXTNCTR  DS    CL1
EXTNADR  DS    F
ERRINFO  DS    F
ERRID    DC    4XL1'FF'
*
CCWADR	 DC    A(WRTCCWS)
CCWXADR  DC    A(WRTXCCWS)
DCBADR	 DC    A(WRTDCB)
ECBADR	 DC    A(WRTECB)
*
*
***********************************************************************
*    THE CCW-LISTS, IOB, AND ECB
***********************************************************************
*
WRTCCWS  CCW   X'23',SECTOR,X'40',1      SET SECTOR CCW
SEARCH   CCW   X'31',CCHHR,X'60',5       SEARCH ID EQUAL CCW
         CCW   X'08',SEARCH,X'00',0      TIC CCW
         CCW   X'1D',RECORD,X'60',88     WRITE CKD CCW
         CCW   X'22',SECTOR,X'00',1      READ SECTOR CCW
*
WRTXCCWS CCW   X'23',SECTOR,X'40',1      SET SECTOR CCW
SEARCHX  CCW   X'31',CCHHR,X'60',5       SEARCH ID EQUAL CCW
         CCW   X'08',SEARCHX,X'00',0     TIC CCW
         CCW   X'1D',RECORD,X'20',8      WRITE CKD (ZERO-CT) CCW
*
WRTIOB   DC    10F'0'                    AREA FOR IOB
WRTECB   DC    F'0'                      FULLWORD FOR ECB
*
*
***********************************************************************
*    THE DCBS
***********************************************************************
*
INRECS	 DCB   DSORG=PS,MACRF=GM,LRECL=80,RECFM=FB,EODAD=ENDDATA,      -
	       DDNAME=INRECS
WRTDCB	 DCB   MACRF=E,DDNAME=TESTFILE,DSORG=PS
*
*
***********************************************************************
*    THE DSECTS
***********************************************************************
*
	 PRINT NOGEN
	 DCBD  DSORG=XE 	   GENERATES EXCP-DCB DSECT
	 IEZDEB 		   GENERATES DEB DSECT
	 IEZIOB 		   GENERATES IOB DSECT
	 ORG   IOBCSTAT+1	   POS TO RESIDUAL COUNT FIELD OF CSW
IOBCSWCT DS    CL2		   PROVIDE LABEL FOR RES CT FIELD
*
*
***********************************************************************
*    END OF PROGRAM
***********************************************************************
*
	  END
