*
* CODING EXAMPLE 15.4.11
*
*
SRVPROV2 CSECT
*
*
***********************************************************************
*    INITIALIZATION
***********************************************************************
*
	 INITL 3,EQU=R		   INITIALIZE PROGRAM
	 USING CVT,R10		   DEFINE REG FOR CVT DSECT
*
*
***********************************************************************
*    MAINSTREAM OF PROGRAM
***********************************************************************
*
	 BAL   R6,SETMODE	   SET PROG INTO SUPV STATE, KEY ZERO
	 BAL   R6,GETCSA	   ALLO CSA FOR STORING CONTROL INFO
	 BAL   R6,SETUPXM	   SET UP CROSS MEMORY ENVIR
	 BAL   R6,PUTCSA	   PUT CONTROL INFO INTO CSA FOR U-AS
	 BAL   R6,PROCESS	   PERFORM MAIN PROCESSING OF PROG
	 BAL   R6,REMOVEXM	   REMOVE CROSS MEMORY ENVIR
	 B     RETURN		   RETURN TO MVS OR CALLING PROG
*
*
***********************************************************************
*    THIS ROUTINE PUTS THE PROGRAM INTO SUPERVISOR STATE AND PSW
*    KEY ZERO VIA THE MODESET MACRO. THIS IS REQUIRED TO ISSUE THE
*    CROSS-MEMORY MACROS AND TO MODIFY THE CVTUSER FIELD OF THE CVT.
***********************************************************************
*
SETMODE  MODESET MODE=SUP,KEY=ZERO
	 BR    R6		   RETURN TO CALLING ROUTINE
*
*
***********************************************************************
*    THIS ROUTINE ALLOCATES FIXED, FETCH-PROTECTED CSA STORAGE AND
*    PLACES THE ADDRESS IN CVTUSER. THIS STORAGE IS USED TO CONTAIN A
*    COPY OF THE AX-LIST, LX-LIST, ENTRY TABLE TOKEN-LIST AND TO
*    CONTAIN THE CREATION OF THE SERVICE-ID/PC NUMBER CROSS-REFERENCE
*    TABLE.
***********************************************************************
*
GETCSA	 GETMAIN EU,LV=CSALEN,SP=227,A=CSAADR
	 L     R10,16		   LOAD ADR OF CVT
	 MVC   CVTUSER,CSAADR	   PUT CSA ADR IN CVTUSER
	 BR    R6		   RETURN TO CALLING ROUTINE
*
*
***********************************************************************
*    THIS ROUTINE SETS UP THE CROSS-MEMORY ENVIRONMENT.
***********************************************************************
*
SETUPXM  BAL   R7,SETAUTH	    RESERVE AN AX AND ASSIGN IT TO SELF
	 BAL   R7,GETLX 	    RESERVE AN LX
	 BAL   R7,BLDETBL	    CREATE ENTRY TABLE
	 BR    R6		    RETURN TO CALLING ROUTINE
*
*
***********************************************************************
*    THIS SUBROUTINE RESERVES AN AX VALUE AND ASSIGNS IT TO THIS A.S.
***********************************************************************
*
SETAUTH  AXRES AXLIST=AXLIST	   RESERVE AN AX VALUE
	 AXSET AX=AXVALUE	   ASSIGN THAT AX TO SELF
	 BR    R7		   RETURN TO CALLING ROUTINE
*
*
***********************************************************************
*    THIS SUBROUTINE RESERVES AN LX VALUE FROM A NON-SYSTEM LINKAGE
*    TABLE.
***********************************************************************
*
GETLX	 LXRES LXLIST=LXLIST	   RESERVE AN LX VALUE
	 BR    R7		   RETURN TO CALLING ROUTINE
*
*
***********************************************************************
*    THIS SUBROUTINE CREATES THE ENTRY TABLE TO DESCRIBE THE PC ROUTINE
*    CONTAINED IN THIS PROGRAM.
***********************************************************************
*
BLDETBL  BAL   R8,SETETBL	   BUILD PARM-LIST FOR ETCRE MACRO
	 ETCRE ENTRIES=PCRTNS	   CREATE ENTRY TABLE
	 ST    R0,ETTOKEN	   SAVE TOKEN OF ENTRY TABLE
	 BR    R7		   RETURN TO CALLING ROUTINE
*
*
***********************************************************************
*    THIS SUBROUTINE SETS UP THE PARAMETER-LIST USED BY THE ETCRE MACRO
*    TO CREATE THE ENTRY TABLE.
***********************************************************************
*
	 DROP  R10		   RELEASE REG FOR REUSE
	 USING ETD,R10		   DEFINE REG FOR ENT-TBL HDR DSECT
*
*
* ENTRY TABLE HEADER
*
SETETBL  LA    R10,ETDHDR	   POINT TO AREA FOR ENT-TBL HDR
         MVC   ETDNUM,=H'1'        INDICATE ONE PC ROUTINE IS DEFINED
	 DROP  R10		   REL REG FOR REUSE
	 USING ETDELE,R10	   DEFINE REG FOR E.T. ELEMENT DSECT
*
*
* DEFINITION FOR SERVICE PROGRAM
*
	 LA    R10,ETDSERV1	   POINT TO PARM AREA FOR SERV-PROG
         MVI   ETDEX,X'00'         INDICATE EX=0
	 OI    ETDFLG,ETDSUP+ETDXM    IND SUPV MODE AND ADR SPACE SWITCH
         MVC   ETDAKM,=X'FFFF'     IND CALLING PROG CAN HAVE ANY KEY
         MVC   ETDEKM,=X'8000'     IND PC RTN CAN ACCESS STORAGE WHICH
*				   HAS KEY 0 OR CALLING PROG KEYS
	 XC    ETDPRO1,ETDPRO1	   ZERO FIELD TO IND EPA SPECIFIED
	 MVC   ETDPRO2,=A(PCSERV03)	LOAD EPA OF PC ROUTINE
	 BR    R8		   RETURN TO CALLING PROG
*
*
***********************************************************************
*    THIS ROUTINE PUTS CONTROL INFORMATION INTO THE CSA FOR USE BY THE
*    USER ADDRESS SPACES WHICH ARE REQUIRED TO CALL THE PC ROUTINE
*    CONTAINED IN THIS PROGRAM.
***********************************************************************
*
	 DROP  R10		   RELEASE REG FOR REUSE
	 USING CSAMAP,R10	   DEFINE REG FOR CSAMAP DSECT
PUTCSA	 L     R10,CSAADR	   LD ADR OF ALLO CSA
	 BAL   R7,PUTLISTS	   COPY CONTROL LISTS INTO CSA
	 BAL   R7,PUTXTBL	   CREATE CROSS-REF TBL IN CSA
	 BR    R6		   RETURN TO CALLING ROUTINE
*
*
***********************************************************************
*    THIS SUBROUTINE COPIES THE AX-LIST, LX-LIST AND THE ENTRY TABLE
*    TOKEN-LIST INTO THE CSA FOR USE BY THE USER ADDRESS SPACES WHICH
*    ARE REQUIRED TO CALL THE PC ROUTINE.
***********************************************************************
*
PUTLISTS MVC   $AXCOUNT,AXCOUNT
	 MVC   $AXVALUE,AXVALUE
	 MVC   $LXCOUNT,LXCOUNT
	 MVC   $LXVALUE,LXVALUE
	 MVC   $ETCOUNT,ETCOUNT
	 MVC   $ETTOKEN,ETTOKEN
	 BR    R7		   RETURN TO CALLING ROUTINE
*
*
***********************************************************************
*    THIS SUBROUTINE CREATES IN THE CSA THE CROSS-REFERENCE TABLE
*    EQUATING THE SERVICE-IDS TO THE CORRESPONDING PC NUMBERS OF THE PC
*    ROUTINES. THIS TABLE IS USED BY THE USER ADDRESS SPACES WHICH
*    ARE REQUIRED TO CALL THE PC ROUTINE.
***********************************************************************
*
PUTXTBL  XC    $SRV01ID,$SRV01ID   ZERO SERVICE ID
         MVI   $SRV01ID+3,X'03'    SET SERVICE ID=3
	 MVC   $PCNUM01,LXVALUE    SET LX VALUE PART OF PC NUMB
         MVI   $PCNUM01+3,X'00'    SET EX VALUE PART OF PC NUMB
	 MVC   $XREFEND,BINONES    INDICATE END OF CROSS-REF TBL
	 BR    R7		   RETURN TO CALLING ROUTINE
*
*
***********************************************************************
*    THIS ROUTINE IS USED FOR TESTING ONLY. IT SIMULATES ADDRESS SPACE
*    PROCESSING UNTIL THE ACTUAL PROCESSING ROUTINE IS WRITTEN.
***********************************************************************
*
PROCESS  OPEN  (DCB,(OUTPUT))
	 PUT   DCB,RECORD
	 CLOSE DCB
	 B     PROCESS
*
*
***********************************************************************
*    THIS ROUTINE REMOVES THE CROSS-MEMORY ENVIRONMENT.
***********************************************************************
*
	 DROP  R10		   RELEASE REG FOR REUSE
	 USING CVT,R10		   DEFINE REG FOR CVT DSECT
REMOVEXM L     R10,16		   LOAD ADR OF CVT
	 XC    CVTUSER,CVTUSER	   CLEAR CVTUSER
	 BAL   R7,DESTRYET	   DESTROY/PURGE ENTRY TABLE
	 BAL   R7,FREELX	   RELEASE RESERVED LX VALUE
	 BAL   R7,RSETAUTH	   RESET ORIG AX VALUE AND REL RESV AX
	 BAL   R7,FREECSA	   RELEASE ALLOC CSA
	 BR    R6		   RETURN TO CALLING ROUTINE
*
*
***********************************************************************
*    THIS SUBROUTINE DESTROYS THE ENTRY TABLE AND USES THE PURGE OPTION
*    IN CASE THE USER ADDRESS SPACE HAS NOT DISCONNECTED IT FROM ITS
*    LINKAGE TABLE.
***********************************************************************
*
DESTRYET ETDES TOKEN=ETTOKEN,PURGE=YES	  DESTROY/PURGE ENTRY TABLE
	 BR    R7		   RETURN TO CALLING ROUTINE
*
*
***********************************************************************
*    THIS SUBROUTINE RELEASES THE RESERVED LX VALUE.
***********************************************************************
*
FREELX	 LXFRE LXLIST=LXLIST	   RELEASE RESERVED LX VALUE
	 BR    R7		   RETURN TO CALLING ROUTINE
*
*
***********************************************************************
*    THIS SUBROUTINE RESETS THE AX VALUE OF THE ADDRESS SPACE BACK TO
*    ITS ORIGINAL VALUE AND RELEASES THE RESERVED AX VALUE.
***********************************************************************
*
RSETAUTH LA    R10,0
	 AXSET AX=(R10)
	 AXFRE AXLIST=AXLIST
	 BR    R7
*
*
***********************************************************************
*    THIS SUBROUTINE RELEASES THE CSA STORAGE.
***********************************************************************
*
FREECSA  FREEMAIN EU,LV=CSALEN,SP=227,A=CSAADR
	 BR    R7
*
*
***********************************************************************
*    THIS ROUTINE RESTORES THE REGISTERS AND RETURNS CONTROL TO MVS OR
*    THE CALLING PROGRAM.
***********************************************************************
*
RETURN	 RCNTL RC=0		   RETURN TO MVS OR CALLING PROG
*
*
***********************************************************************
*    THE DC/DS STATEMENTS
***********************************************************************
*
BINONES  DC    4XL1'FF'
CSAADR	 DS    F
*
*
***********************************************************************
*    THE AUTHORIZATION-VALUE (AX) LIST
***********************************************************************
*
AXLIST	 DS    0F
AXCOUNT  DC    H'1'
AXVALUE  DS    H
*
*
***********************************************************************
*    THE LINKAGE-VALUE (LX) LIST
***********************************************************************
*
LXLIST	 DS    0F
LXCOUNT  DC    F'1'
LXVALUE  DS    F
*
*
***********************************************************************
*    THE ENTRY-TABLE TOKEN LIST
***********************************************************************
*
ETLIST	 DS    0F
ETCOUNT  DC    F'1'
ETTOKEN  DS    F
*
*
***********************************************************************
*    THE AREAS USED TO CREATE THE ENTRY TABLE PARAMETER-LIST
***********************************************************************
*
PCRTNS	 DS    0F
ETDHDR	 DS    CL(ETDLEN)
ETDSERV1 DS    CL(ETDELEN)
*
*
***********************************************************************
*    THE RECORD AND DCB USED FOR THE I/O LOOP FOR TESTING
***********************************************************************
*
RECORD   DC    80CL1'A'
DCB	 DCB   DSORG=PS,MACRF=PM,BLKSIZE=80,LRECL=80,RECFM=F,	       -
	       DDNAME=WORK
*
*
*
*
***********************************************************************
***********************************************************************
*    THE CODE FOR THE PCSERV03 PC ROUTINE
***********************************************************************
***********************************************************************
*
*
***********************************************************************
*    INITIALIZATION
***********************************************************************
*
	 DROP R3		   RELEASE REG FOR REUSE
PCSERV03 PCLINK STACK,SAVE=NO	   SAVE STATUS OF CALLING PROG
	 BALR  R3,0		   LOAD BASE REGISTER
	 USING *,R3		   DEFINE BASE REGISTER
*
*
***********************************************************************
*    MAINSTREAM OF PC ROUTINE
***********************************************************************
*
	 BAL   R6,SAVEREGS	   SAVE CONTENTS OF CONTROL REGS
	 BAL   R6,GETPASCB	   GET ADR OF ASCB OF PASID
	 BAL   R6,SETCMLOK	   OBTAIN CML LOCK
	 BAL   R6,GETKEY	   GET KEY FROM U-AS
	 BAL   R6,FINDDATA	   GET CORRESPD DATA FROM TBL IN SP-AS
	 BAL   R6,MOVEDATA	   MOVE DATA TO U-AS
	 BAL   R6,RELCMLOK	   RELEASE CML LOCK
	 B     RETCALL		   RETURN TO CALLING PROG IN U-AS
*
*
***********************************************************************
*    THIS ROUTINE SAVES THE CONTENTS OF ALL REGISTERS WHICH CONTAIN
*    CONTROL INFORMATION.
***********************************************************************
*
SAVEREGS ST    R14,SAVR14	   SAVE STACK-ENTRY ADR
	 ST    R1,SKEYADR	   SAVE ADR OF KEY IN U-AS
	 ST    R15,SBUFFADR	   SAVE ADR OF REVC BUFF IN U-AS
	 BR    R6		   RETURN TO CALLING ROUTINE
*
*
***********************************************************************
*    THIS ROUTINE OBTAINS THE ADDRESS OF THE ASCB FOR THE PRIMARY
*    ADDRESS SPACE.
***********************************************************************
*
GETPASCB EPAR  R1		   LD REG 1 WITH PASID
	 LOCASCB ASID=(R1)	   GET ASCB ADR OF PASID
	 ST    R1,PASCBADR	   SAVE ADR OF ASCB OF PRIM A.S.
	 BR    R6		   RETURN TO CALLING ROUTINE
*
*
***********************************************************************
*    THIS ROUTINE OBTAINS THE CML LOCK TO MAKE THE U-AS NONSWAPPABLE
*    DURING THE SYNCHRONOUS COMMUNICATION AND TO SERIALIZE THE USE OF
*    THE PC ROUTINES IN THIS ADDRESS SPACE.
***********************************************************************
*
SETCMLOK LA    R1,0		   LD ZERO FOR SPKA INSTR
	 SPKA  0(R1)		   SET PSW KEY TO ZERO
	 L     R11,PASCBADR	   LD ADR OF ASCB OF PASID
	 SETLOCK OBTAIN,TYPE=CML,ASCB=(11),RELATED=(RELCMLOK),MODE=COND
	 BR    R6		   RETURN TO CALLING ROUTINE
*
*
***********************************************************************
*    THIS ROUTINE COPIES THE SPECIFIED TABLE KEY FROM THE SECONDARY
*    A.S. (THE INVOKING A.S.) TO THE PRIMARY A.S. (THIS A.S.).
***********************************************************************
*
GETKEY	 LA    R9,KEYLEN	   LD LENGTH OF KEY AREA IN SP-AS
	 LA    R10,KEY		   LD ADR OF KEY AREA IN SP-AS
	 L     R11,SKEYADR	   LD ADR OF KEY AREA IN U-AS
         LA    R12,X'80'           LD ACCESS PSW KEY
	 MVCP  0(R9,R10),0(R11),R12   MOVE KEY FROM U-AS TO SP-AS
	 BR    R6		   RETURN TO CALLING ROUTINE
*
*
***********************************************************************
*    THIS ROUTINE SCANS THE TABLE LOCATED IN THE SP-AS TO LOCATE THE
*    TABLE DATA ENTRY WHICH CORRESPONDS TO THE KEY SPECIFIED BY THE
*    U-AS. IF THE KEY IS NOT LOCATED IN THE TABLE, THEN RC=4 IS SET IN
*    REGISTER 15 AND CONTROL IS RETURNED TO THE CALLING PROGRAM. IF THE
*    SPECIFIED KEY IS FOUND IN THE TABLE, THEN RC=0 IS SET IN REGISTER
*    15 AND REGISTER 11 POINTS TO THE CORRESPONDING DATA ENTRY OF THE
*    TABLE.
***********************************************************************
*
FINDDATA LA    R11,TABLE	   LOAD ADR OF TABLE
NEXTENTY CLI   0(R11),X'FF'        CHECK FOR END-OF-TABLE
	 BE    INVKEY		   IF YES, IND INVALID KEY
	 CLC   0(KEYLEN,R11),KEY      COMP SPEC KEY TO KEY IN TBL
	 BE    KEYOK		      IF EQUAL, LD ADR OF DATA
	 LA    R11,ENTRYLEN(0,R11)    IF NOT, INCR TO NEXT TBL ENTRY
	 B     NEXTENTY 	      CHECK NEXT TBL ENTRY
KEYOK	 LA    R11,KEYLEN(0,R11)   LD ADR OF CORRESPD DATA
	 LA    R15,0		   IND KEY OK, DATA ADR LOADED
	 BR    R6		   RETURN TO CALLING ROUTINE
INVKEY	 LA    R15,4		   IND INVALID KEY
	 BR    R6		   RETURN TO CALLING ROUTINE
*
*
***********************************************************************
*    THIS ROUTINE COPIES THE DATA ENTRY FROM THE TABLE, WHICH
*    CORRESPONDS TO THE SPECIFIED KEY, TO THE SECONDARY A.S. (THE
*    INVOKING A.S.). THE TABLE IS LOCATED IN THE PRIMARY A.S.
*    (THIS A.S.). WHEN THIS ROUTINE RECEIVES CONTROL, IT FIRST EXAMINES
*    THE RC IN REGISTER 15. IF THE RC IS NONZERO, NO DATA IS COPIED TO
*    THE U-AS. IF THE RC IN REGISTER 15 IS ZERO, THEN REGISTER 11
*    POINTS TO THE DATA WHICH IS TO BE COPIED TO THE U-AS.
***********************************************************************
*
MOVEDATA LTR   R15,R15		   CHECK IF DATA FOUND
	 BNZR  R6		   IF NO, RET TO CALLING ROUTINE
	 LA    R9,DATALEN	   LD LENGTH OF DATA ENTRY IN TBL
	 L     R10,SBUFFADR	   LD ADR OF RECV BUFF IN U-AS
         LA    R12,X'80'           LD ACCESS PSW KEY
	 MVCS  0(R9,R10),0(R11),R12   MOVE DATA FROM SP-AS TO U-AS
	 BR    R6		   RETURN TO CALLING ROUTINE
*
*
***********************************************************************
*    THIS ROUTINE RELEASES THE CML LOCK.
***********************************************************************
*
RELCMLOK L     R11,PASCBADR	   LD ADR OF ASCB OF PASID
	 ST    R15,SAVR15	   SAVE RC
	 SETLOCK RELEASE,TYPE=CML,ASCB=(11),RELATED=(SETCMLOK)
	 L     R15,SAVR15	   RESTORE RC
	 BR    R6		   RETURN TO CALLING ROUTINE
*
*
***********************************************************************
*    THIS ROUTINE RESTORES THE STATUS OF THE CALLING PROGRAM AND
*    RETURNS CONTROL.
***********************************************************************
*
RETCALL  L     R14,SAVR14	   RESTORE ADR OF STACK ENTRY
	 PCLINK UNSTACK,THRU=(R14),SAVE=NO     RESTORE STATUS
	 PT    R3,R14		   RETURN CONTROL TO CALLING PROG
*
*
***********************************************************************
*    DC/DS STATEMENTS
***********************************************************************
*
SAVR14	 DS    F
SAVR15	 DS    F
SKEYADR  DS    F
SBUFFADR DS    F
PASCBADR DS    F
*
*
***********************************************************************
*    INFORMATION TABLE
***********************************************************************
*
TABLE    DC    C'CODE01'
KEYX	 EQU   *
         DC    CL20'INFO-01'
ENTRYX	 EQU   *
         DC    C'CODE02',CL20'INFO-02'
         DC    C'CODE03',CL20'INFO-03'
         DC    C'CODE04',CL20'INFO-04'
	 ...			   ADDITIONAL DATA ENTRIES
         DC    X'FF'
KEYLEN	 EQU   KEYX-TABLE
DATALEN  EQU   ENTRYLEN-KEYLEN
ENTRYLEN EQU   ENTRYX-TABLE
*
KEY	 DS    CL(KEYLEN)
*
*
***********************************************************************
*    THE DSECTS
***********************************************************************
*
CSAMAP	 DSECT
$AXLIST  DS    0F
$AXCOUNT DS    H
$AXVALUE DS    H
*
$LXLIST  DS    0F
$LXCOUNT DS    F
$LXVALUE DS    F
*
$ETLIST  DS    0F
$ETCOUNT DS    F
$ETTOKEN DS    F
*
$XREFTBL DS    0F
$SRV01ID DS    F
$PCNUM01 DS    F
$SRV02ID DS    F
$PCNUM02 DS    F
$XREFEND DS    F
*
CSALEN	 EQU   *-CSAMAP
*
	 CVT  DSECT=YES 	  GENERATES CVT DSECT
	 IHAETD 		  GENERATES ENTRY TABLE DSECTS
	 IHAPSA 		  GENERATES PSA DSECT (REQD BY SETLOCK)
*
*
***********************************************************************
*    END OF PROGRAM
***********************************************************************
*
	 END
