*
* CODING EXAMPLE 5.13.6
*
*
* THE CODE FOR ABNDNOTE:
*
*
ABNDNOTE CSECT
ABNDNOTE AMODE 31		   SPEC ADR MODE IS 31 BITS
ABNDNOTE RMODE ANY		   SPEC RES MODE IS ANYWHERE
*
*
***********************************************************************
*    INITIALIZATION
***********************************************************************
*
	 INITL 3,EQU=R		   INITIALIZE PROGRAM
	 USING CTXT,R10 	   DEFINE REG FOR CTXT DSECT
	 USING CTXTATTR,R11	   DEFINE REG FOR CTXTATTR DSECT
	 USING CSAWORK,R12	   DEFINE REG FOR CSAWORK DSECT
*
*
***********************************************************************
*    MAINSTREAM OF PROGRAM
***********************************************************************
*
	 BAL   R6,GETMSG	   GET ADR OF MSG IEF450I
	 BAL   R6,CKJOBPFX	   CHK IF PROD JOB
	 BAL   R6,GETCSA	   ALLO CSA FOR PARM-LIST ADR
	 BAL   R6,BLDPARM	   BUILD PARM-LIST IN CSA
	 BAL   R6,DOSTART	   ISSUE START CMD VIA SVC 34
	 B     RETURN		   RETURN TO MVS
*
*
***********************************************************************
*    THIS ROUTINE OBTAINS THE ADDRESS OF THE BEGINNING OF MESSAGE
*    IEF450I.
***********************************************************************
*
GETMSG	 L     R10,0(0,R1)	   SET ADRBLTY FOR CTXT DSECT
	 L     R11,CTXTTXPJ	   SET ADRBLTY FOR CTXTATTR DSECT
	 LA    R11,CTXTTMSG	   LD ADR OF BG OF MESSAGE IEF450I
	 BR    R6		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS ROUTINE CHECKS THE FIRST CHARACTER OF THE JOBNAME LOCATED IN
*    MESSAGE IEF450I FOR THE PRODUCTION PREFIX ("P" IN FIRST POSITION).
*    IF THE JOB IS NOT A PRODUCTION JOB, NO OTHER PROCESSING IS
*    PERFORMED.
***********************************************************************
*
CKJOBPFX CLI   8(R11),C'P'         CHK 1ST CHAR OF JOBNM FOR PROD JOB
	 BER   R6		   IF PROD JOB, RET TO CALLING RTN
	 B     RETURN		   IF NOT PROD JOB, RETURN TO MVS
*
*
***********************************************************************
*    THIS ROUTINE ALLOCATES VIRTUAL STORAGE FROM THE CSA WHICH IS USED
*    TO STORE THE PARAMETERS PASSED TO THE PROGRAM INITIATED VIA THE
*    INTERNAL START COMMAND.
***********************************************************************
*
GETCSA	 GETMAIN RC,LV=CSAGMLEN,SP=241,LOC=BELOW
	 LTR   R15,R15		   CHK IF CSA ALLOC OK
	 BNZ   RETURN		   IF CSA UNAVAIL, RETURN TO MVS
	 LR    R12,R1		   SET ADRBLTY FOR CSAWORK DSECT
	 ST    R1,CSATOKEN	   STORE ALLO CSA ADR IN TOKEN FIELD
	 MVC   CSAJOBNM,BLANKS	   BLANK OUT CSA JOBNAME FIELD
	 MVC   CSASTEPN,BLANKS	   BLANK OUT CSA STEPNAME FIELD
	 BR    R6		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS ROUTINE OBTAINS THE JOBNAME AND THE STEPNAME OF THE ABENDING
*    PRODUCTION JOB FROM MESSAGE IEF450I AND INSERTS THEM INTO THE
*    PARAMETER-LIST.
***********************************************************************
*
BLDPARM  LA    R0,8		   SET MAX JOBNAME COUNT
	 LA    R11,8(0,R11)	   LD ADR OF BG OF JOBNM IN MSG IEF450I
	 LA    R10,CSAJOBNM	   LD ADR OF JOBNAME PARM IN CSA
NEXTJPOS CLI   0(R11),C' '         CHK FOR END OF JOBNAME
	 BE    GETSTEP		   AT END, START TO EXTR STEPNAME
	 MVC   0(1,R10),0(R11)	   MOVE A CHAR OF JOBNM TO PARM IN CSA
	 LA    R11,1(0,R11)	   INCR JOBNAME IN MSG IEF450I
	 LA    R10,1(0,R10)	   INCR JOBNAME PARM IN CSA
	 BCT   R0,NEXTJPOS	   MOVE NEXT JOBNAME CHAR
GETSTEP  LA    R0,8		   AT JOBNAME END, SET MAX STEPNAME
*				   COUNT
	 LA    R11,1(0,R11)	   INCR PAST BLANK BETW JBNM AND STEPNM
	 LA    R10,CSASTEPN	   LD ADR OF STEPNAME PARM IN CSA
NEXTSPOS CLI   0(R11),C' '         CHK FOR END OF STEPNAME
	 BER   R6		   AT END, RETURN TO CALLING RTN
	 MVC   0(1,R10),0(R11)	   MOVE A CHAR OF STEPNM TO PARM IN CSA
	 LA    R11,1(0,R11)	   INCR STEPNAME IN MSG IEF450I
	 LA    R10,1(0,R10)	   INCR STEPNAME PARM IN CSA
	 BCT   R0,NEXTSPOS	   MOVE NEXT STEPNAME CHAR
	 BR    R6		   AT STEPNAME END, RET TO CALLING RTN
*
*
***********************************************************************
*    THIS ROUTINE ISSUES THE INTERNAL START COMMAND VIA THE MGCR MACRO
*    (SVC 34).
***********************************************************************
*
DOSTART  MVC   CSABUF34,MGCRBUFF   MOVE MSGBUF INTO CSA
	 LA    R0,0		   ZERO REG 0 FOR SVC 34
	 LA    R10,CSABUF34	   LD ADR OF MSGBUF IN CSA
	 MGCR  (R10)		   ISSUE SVC 34
	 BR    R6		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS ROUTINE RESTORES THE REGISTERS AND RETURNS CONTROL.
***********************************************************************
*
RETURN	 RCNTL RC=0		   RETURN TO MVS
*
*
***********************************************************************
*    CONSTANTS
***********************************************************************
*
BLANKS   DC    CL8' '
*
*
***********************************************************************
*    PARAMETER-LIST FOR SVC 34
***********************************************************************
*
MGCRBUFF DC    X'80'
	 DC    AL1(BUFFLEN)
         DC    X'8000'             INDICATE TOKEN PRESENT
         DC    C'S OPERALRT'
MGCRBUFX EQU   *
BUFFLEN  EQU   (MGCRBUFX-MGCRBUFF)
*
*
***********************************************************************
*    THE DSECTS
***********************************************************************
*
	 PRINT NOGEN
	 IEZVX100		   GENERATES CTXT, CTXTATTR DSECTS
*
CSAWORK  DSECT
CSAJOBNM DS    CL8
CSASTEPN DS    CL8
CSABUF34 DS    CL(BUFFLEN)
CSATOKEN DS    CL4
CSAGMLEN ORG   *-CSAWORK
*
*
***********************************************************************
*    END OF PROGRAM
***********************************************************************
*
	 END
*
*
*
*
* THE CODE FOR OPERALRT:
*
*
OPERALRT CSECT
*
*
***********************************************************************
*    INITIALIZATION
***********************************************************************
*
	 INITL 3,EQU=R		   INITIALIZE PROGRAM
	 USING CSCL,R10 	   DEFINE REG FOR CSCL DSECT
	 USING CSAPARM,R11	   DEFINE REG FOR CSAPARM DSECT
*
*
***********************************************************************
*    MAINSTREAM OF PROGRAM
***********************************************************************
*
	 BAL   R6,EXTRACT	   GET ADR OF C.S.C.L.
	 BAL   R6,GETPARM	   GET CSA ADR FROM TOKEN FIELD
	 BAL   R6,DOWTOR	   NOTIFY OPER OF ABEND VIA WTOR
	 BAL   R6,RELCSA	   RELEASE CSA ALLO BY WTO/WTOR EXIT
	 B     RETURN		   RETURN TO MVS
*
*
***********************************************************************
*    THIS ROUTINE OBTAINS THE ADDRESS OF THE COMMAND SCHEDULER
*    COMMUNICATIONS LIST (CSCL) WHICH CONTAINS THE TOKEN (PARAMETER-
*    LIST ADDRESS) PASSED BY THE INTERNAL START COMMAND ISSUED BY THE
*    WTO/WTOR EXIT.
***********************************************************************
*
EXTRACT  EXTRACT CSCLADDR,FIELDS=(COMM)
	 BR    R6		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS ROUTINE OBTAINS THE TOKEN CONTAINED IN THE CSCL. THE TOKEN
*    CONTAINS THE ADDRESS OF THE VIRTUAL STORAGE ALLOCATED FROM THE CSA
*    WHICH CONTAINS THE PARAMETER-LIST PASSED BY THE WTO/WTOR EXIT.
***********************************************************************
*
GETPARM  L     R10,CSCLADDR	   SET ADRBLTY FOR CSCL DSECT
	 TM    COMTOKEN,COMTOKHR   CHK IF TOKEN PRESENT
	 BNO   NOTOKEN		   IF NO, ERROR
	 MVC   CSAADR,COMTOKEN	   MOVE ADR OF ALLO CSA (CSAPARM)
	 BR    R6		   RETURN TO CALLING RTN
NOTOKEN  WTO   '*** NO PARM SPECIFIED---PROGRAM TERMINATED ***'
         WTO   '*** NOTIFY SYSTEMS PROGRAMMING DEPARTMENT ***'
	 ABEND 901
*
*
***********************************************************************
*    THIS ROUTINE INSERTS THE JOBNAME AND STEPNAME OF THE PRODUCTION
*    JOB WHICH ABENDED INTO THE WTO-LIST. IT THEN ISSUES THE WTO/WTOR
*    MACRO TO INFORM THE OPERATOR THAT A PRODUCTION JOB HAS ABENDED AND
*    WAITS FOR A REPLY FROM THE OPERATOR WHICH INDICATES THAT THE
*    OPERATOR SAW THE MESSEAGE AND IS PREPARING A TROUBLE REPORT.
***********************************************************************
*
DOWTOR	 L     R11,CSAADR	   SET ADRBLTY FOR CSAPARM DSECT
	 MVC   WTO1JBNM,CSAJOBNM   MOVE JOBNAME INTO WTO-LIST
	 MVC   WTO1STEP,CSASTEPN   MOVE STEPNAME INTO WTO-LIST
WTOR	 LA    R1,WTOLST1	   LOAD ADR OF WTO-LIST
	 WTO   MF=(E,(R1))	   ISSUE EXEC-FORM OF WTO
	 XC    ECB,ECB		   CLEAR ECB FOR WTOR
         WTOR  '*** REPLY "A" TO ACKNOWLEDGE AND ISSUE TR ***',        -
	       REPLY,1,ECB
	 WAIT  1,ECB=ECB	   WAIT FOR REPLY
         CLI   REPLY,C'A'          CHK FOR PROPER REPLY
	 BER   R6		   IF REPLY OK, RET TO CALLING RTN
         WTO   '*** INVALID REPLY ***'
	 B     WTOR		   REISSUE WTOR
*
*
***********************************************************************
*    THIS ROUTINE RELEASES THE CSA STORAGE ALLOCATED BY THE WTO/WTOR
*    EXIT.
***********************************************************************
*
RELCSA	 LA    R11,CSAADR	   LOAD ADR OF CSAPARM ADR
	 FREEMAIN,EC,LV=100,SP=241,A(R11)
	 BR    R6		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS ROUTINE RESTORES THE REGISTERS AND RETURNS CONTROL.
***********************************************************************
*
RETURN	 RCNTL RC=0		   RETURN TO MVS
*
*
***********************************************************************
*    DC/DS STATEMENTS
***********************************************************************
*
CSCLADDR DS    F
CSAADR	 DS    F
ECB	 DS    F
REPLY	 DS    CL1
*
*
***********************************************************************
*    THE WTO-LIST USED FOR INSERTING THE JOBNAME AND THE STEPNAME OF
*    THE ABENDING JOB.
***********************************************************************
*
	 DS    0F
WTOLST1  DC    AL2(WTOLST1X-WTOLST1)
         DC    X'8000'
         DC    C'*** OPERATIONS: JOB '
WTO1JBNM DS    CL8
         DC    C' HAS ABENDED AT STEP '
WTO1STEP DS    CL8
         DC    C' ***'
WTOLST1X EQU   *
         DC    X'4000'              DESC=2
         DC    X'4000'              ROUT=2
*
*
***********************************************************************
*    THE DSECTS
***********************************************************************
*
	 PRINT NOGEN
CSCL	 DSECT
	 IEZCOM 		    GENERATES CSCL DSECT
*
CSAPARM  DSECT
CSAJOBNM DS    CL8
CSASTEPN DS    CL8
*
*
***********************************************************************
*    END OF PROGRAM
***********************************************************************
*
	 END
