*
* CODING EXAMPLE 16.5.4
*
*
//-------- JOB	 ----
//STEP	   EXEC  ASMACLG
//C.SYSLIB DD	 DSN=SYS1.MACLIB,DISP=SHR
//	   DD	 DSN=USER.MACLIB,DISP=SHR
//C.SYSIN DD *
*
*
HIPRTEST CSECT
*
*
**********************************************************************
* INITIALIZATION
**********************************************************************
*
HIPRTEST AMODE 31		   \ INDICATE 31-BIT ADDRESSING
HIPRTEST RMODE ANY		   /
	 INITL 3,4,5,EQU=R	   SET UP BASE REGS AND SAVEAREA
*
*
**********************************************************************
* MAINSTREAM OF PROGRAM
**********************************************************************
*
	 BAL   R6,MAKEHS	   CREATE THE HIPERSPACE
	 BAL   R6,GETMAIN	   OBTAIN 4K-BYTE WORK AREA
NEXTREC  BAL   R6,GETREC	   BUILD A 4K BLOCK OF DATA
	 BAL   R6,PUTHS 	   WRITE THE 4K DATA BLOCK INTO HIPSPC
	 B     NEXTREC		   GET NEXT REC AND BUILD 4K BLOCK
RECEND	 BAL   R6,SETBGADR	   SET HIPERSPACE BLOCK PTR TO BEG
NXTHSBLK BAL   R6,GETHS 	   READ A 4K DATA BLOCK FROM HIPSPC
	 BAL   R6,DUMPREC	   DUMP SPECIFIC HIPSPC BLOCK, ABEND PGM
	 B     NXTHSBLK 	   READ NEXT 4K BLOCK FROM HIPSPC
HSEND	 B     RETURN		   RETURN TO MVS OR CALLING PROGRAM
*
*
**********************************************************************
* THIS ROUTINE CREATES THE HIPERSPACE.
**********************************************************************
*
MAKEHS	 DSPSERV CREATE,TYPE=HIPERSPACE,STOKEN=HS01TOK,NAME=HS01NAME,  -
	       GENNAME=YES,OUTNAME=HS01GNAM,BLOCKS=(MAXBLKS,INITBLKS), -
	       NUMBLKS=CURRBLKS,ORIGIN=HSBGADDR
	 MVC   HSBLKPTR,HSBGADDR   INIT BLOCK PTR TO BG OF HIPERSPACE
	 LTR   R15,R15		   CHECK IF CREATE WAS OK
	 BZR   R6		   IF YES, RETURN TO CALLING ROUTINE
	 LA    R10,901		   IF NO, LOAD ABEND CODE
	 B     ABEND		   ABEND PROGRAM WITH A DUMP
*
*
**********************************************************************
* THIS ROUTINE OBTAINS A 4K-BYTE WORKAREA. THIS AREA IS USED TO
* BUILD A BLOCK OF DATA THAT IS WRITTEN INTO THE HIPERSPACE.
**********************************************************************
*
GETMAIN  GETMAIN EU,LV=4096,BNDRY=PAGE,A=GMADDR
	 LA    R10,RECORDS	   LOAD ADDR OF BEG OF RECORDS
	 ST    R10,RECPTR	   STORE PTR TO CURRENT RECORD
	 BR    R6		   RETURN TO CALLING ROUTINE
*
*
**********************************************************************
* THIS ROUTINE OBTAINS THE NEXT 1024-BYTE RECORD FROM A TABLE AND
* EXTENDS THE RECORD TO A 4K BLOCK OF DATA BY PROPAGATING THE
* LETTER "Z" INTO THE LAST 3K BYTES OF THE BLOCK.
**********************************************************************
*
GETREC	 L     R10,GMADDR	   LOAD ADDR OF WORK AREA
	 L     R11,RECPTR	   LOAD ADDR OF NEXT RECORD
         CLI   0(R11),X'FF'        CHECK FOR END-OF-TABLE OF RECORDS
	 BE    RECEND		   IF YES, GO TO END OF RECS ROUTINE
	 MOVE  (R10),(R11),1024    IF NO, MOVE RECORD INTO WORK AREA
	 LA    R11,1024(0,R11)	   INCR TO ADDR OF NEXT RECORD
	 ST    R11,RECPTR	   SAVE ADDR OF NEXT RECORD
	 LA    R10,1024(0,R10)	   INCR TO PAD AREA OF BLOCK
         MOVE  (R10),C'Z',3072     PROP "Z" INTO LAST 3K OF BLOCK
	 AP    ASRECCTR,ONE	   INCR RECORD COUNTER
	 BR    R6		   RETURN TO CALLING ROUTINE
*
*
**********************************************************************
* THIS ROUTINE WRITES THE 4K BLOCK OF DATA INTO THE HIPERSPACE.
**********************************************************************
*
PUTHS	 L     R10,GMADDR	   LOAD ADDR OF WORK AREA (DATA BLOCK)
	 ST    R10,ASBUFADR	   STORE THAT ADDR INTO HS-ADDR-LIST
	 L     R10,HSBLKPTR	   LOAD ADDR OF NEXT HIPERSPACE BLOCK
	 ST    R10,HSBLKADR	   STORE THAT ADDR INTO HS-ADDR-LIST
	 LA    R10,4095(0,R10)	   \   INCR HIPERSPACE BLOCK PTR TO
	 LA    R10,1(0,R10)	    ×  NEXT HIPERSPACE BLOCK ADDR
	 ST    R10,HSBLKPTR	   /   AND SAVE THE NEW ADDR
	 LA    R10,HSADRLST	   LOAD ADDR OF HIPERSPACE-ADDR-LIST
	 ST    R10,HSRNGADR	   PROVIDE THAT ADDR TO HSPSERV MACRO
	 HSPSERV SWRITE,STOKEN=HS01TOK,RANGLIST=HSRNGADR
	 LTR   R15,R15		   CHECK IF WRITE IS OK
	 BZR   R6		   IF YES, RETURN TO CALLING ROUTINE
	 LA    R10,902		   IF NO, LOAD ABEND CODE
	 B     ABEND		   ABEND PROGRAM WITH A DUMP
*
*
**********************************************************************
* THIS ROUTINE RESETS THE CURRENT HIPERSPACE BLOCK POINTER TO THE
* BEGINNING.
**********************************************************************
*
SETBGADR MVC   HSBLKPTR,HSBGADDR   SET HIPSPC BLOCK PTR TO BEG
	 BR    R6		   RETURN TO CLLING ROUTINE
*
*
**********************************************************************
* THIS ROUTINE SEQUENTIALLY READS A 4K BLOCK OF DATA FROM THE
* HIPERSPACE STARTING WITH THE FIRST BLOCK.
**********************************************************************
*
GETHS	 CP    HSBLKCTR,ASRECCTR   CHECK IF ALL HIPSPC BOCKS READ
	 BE    HSEND		   IF YES, GO TO END-OF-HS-DATA RTN
	 L     R10,GMADDR	   IF NO, LOAD ADDR OF 4K RECV AREA
	 ST    R10,ASBUFADR	   STORE THAT ADDR INTO HS-ADDR-LIST
	 L     R10,HSBLKPTR	   LOAD ADDR OF NEXT HIPERSPACE BLOCK
	 ST    R10,HSBLKADR	   STORE THAT ADDR INTO HS-ADDR-LIST
	 LA    R10,4095(0,R10)	   \   INCR HIPERSPACE BLOCK PTR TO
	 LA    R10,1(0,R10)	    ×  NEXT HIPERSPACE BLOCK ADDR
	 ST    R10,HSBLKPTR	   /   AND SAVE THE NEW ADDR
	 LA    R10,HSADRLST	   LOAD ADDR OF HIPERSPACE-ADDR-LIST
	 ST    R10,HSRNGADR	   PROVIDE THAT ADDR TO HSPSERV MACRO
	 AP    HSBLKCTR,ONE	   INCR HIPSPC BLOCK COUNTER
	 HSPSERV SREAD,STOKEN=HS01TOK,RANGLIST=HSRNGADR
	 LTR   R15,R15		   CHECK IF READ IS OK
	 BZR   R6		   IF YES, RETURN TO CALLING ROUTINE
	 LA    R10,903		   IF NO, LOAD ABEND CODE
	 B     ABEND		   ABEND PROGRAM WITH A DUMP
*
*
**********************************************************************
* THIS ROUTINE CHECKS FOR A SPECIFIC HIPERSPACE BLOCK NUMBER AFTER IT
* IS READ FROM THE HIPERSPACE. WHEN FOUND, DUMPS RECORD AND ABENDS
* THE PROGRAM.
**********************************************************************
*
DUMPREC  DS    0H
	 L     R8,GMADDR	   LOAD BG ADDR OF HS BLOCK INTO R8
	 LA    R9,4095(0,R8)	   LOAD END ADDR OF HS BLOCK INTO R9
         CP    HSBLKCTR,=P'2'      CHECK FOR SPECIFIC BLOCK NUMBER
	 BNER  R6		   IF NO, RETURN TO CALLING ROUTINE
	 LA    R10,999		   IF YES, LOAD ABEND CODE
	 B     ABEND		   ABEND PROGRAM WITH A DUMP
*
*
**********************************************************************
* THIS ROUTINE ABENDS THE PROGRAM WITH A DUMP AND USES THE ABEND
* CODE THAT WAS PRELOADED INTO REGISTER 10.
**********************************************************************
*
ABEND	 ABEND (R10),DUMP
*
*
**********************************************************************
* THIS ROUTINE RESTORES THE REGISTERS AND RETURNS CONTROL.
**********************************************************************
*
RETURN	 RCNTL RC=0
*
*
**********************************************************************
* WORKING STORAGE AND CONSTANTS
**********************************************************************
*
HS01TOK  DS    D
HS01NAME DC    C'H01'
HS01GNAM DS    CL8
MAXBYTES EQU   1000000
INITBYTS EQU   250000
MAXBLKS  DC    A((MAXBYTES+4095)/4096)
INITBLKS DC    A((INITBYTS+4095)/4096)
CURRBLKS DS    CL4
GMADDR	 DS    F
RECPTR	 DS    F
HSRNGADR DS    F
HSBGADDR DS    F
HSBLKPTR DS    F
ONE      DC    P'1'
ASRECCTR DC    PL4'0'
HSBLKCTR DC    PL4'0'
*
RECORDS  DC    1024CL1'A'
RECLEN	 EQU   *-RECORDS
         DC    1024CL1'B'
         DC    1024CL1'C'
         DC    1024CL1'D'
         DC    X'FF'
*
HSADRLST DS    0F
ASBUFADR DS    F
HSBLKADR DS    F
HSBLOCKS DC    A(1)
*
*
**********************************************************************
* END OF PROGRAM
**********************************************************************
*
	 END
//*
//*
//G.SYSUDUMP DD SYSOUT=*
//
