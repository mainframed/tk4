*
CODING EXAMPLE 15.4.9
*
*
SRVPROV1 CSECT
*
*
***********************************************************************
*    INITIALIZATION
***********************************************************************
*
	 INITL 3,EQU=R		   INITIALIZE PROGRAM
	 USING CVT,R10		   DEFINE REG FOR CVT DESCT
*
*
***********************************************************************
*    MAINSTREAM OF PROGRAM
***********************************************************************
*
	 BAL   R6,SETMODE	   SET PROG INTO SUPV STATE, KEY ZERO
	 BAL   R6,GETCSA	   ALLO CSA FOR STORING CONTROL INFO
	 BAL   R6,SETUPXM	   SET UP CROSS MEMORY ENVIR
	 BAL   R6,PUTCSA	   PUT CONTROL INFO INTO CSA FOR U-AS
	 BAL   R6,PROCESS	   PERFORM MAIN PROC OF PROG
	 BAL   R6,REMOVEXM	   REMOVE CROSS MEMORY ENVIR
	 B     RETURN		   RETURN TO MVS OR CALLING PROG
*
*
***********************************************************************
*    THIS ROUTINE PUTS THE PROGRAM INTO SUPERVISOR STATE AND PSW
*    STORAGE PROTECTION KEY ZERO VIA THE MODESET MACRO. THIS IS
*    REQUIRED TO ISSUE THE CROSS-MEMORY MACROS AND TO MODIFY THE
*    CVTUSER FIELD OF THE CVT.
***********************************************************************
*
SETMODE  MODESET MODE=SUP,KEY=ZERO
	 BR    R6		   RETURN TO CALLING PROG
*
*
***********************************************************************
*    THIS ROUTINE ALLOCATES FIXED, FETCH-PROTECTED CSA VIRTUAL STORAGE
*    AND PLACES THE ADDRESS IN CVTUSER. THIS STORAGE IS USED TO CONTAIN
*    A COPY OF THE AX-LIST, LX-LIST, ENTRY TABLE TOKEN-LIST AND TO
*    CONTAIN THE CREATION OF THE SERVICE-ID/PC NUMBER CROSS-REFERENCE
*    TABLE.
***********************************************************************
*
GETCSA	 GETMAIN EU,LV=CSALEN,SP=227,A=CSAADR
	 L     R10,16		   LOAD ADR OF CVT
	 MVC   CVTUSER,CSAADR	   PUT CSA ADR INTO CVTUSER
	 BR    R6		   RETURN TO CALLING ROUTINE
*
*
***********************************************************************
*    THIS ROUTINE SETS UP THE CROSS-MEMORY ENVIRONMENT.
***********************************************************************
*
SETUPXM  BAL   R7,SETAUTH	   RESERVE AN AX AND ASSIGN IT TO SELF
	 BAL   R7,GETLX 	   RESERVE AN LX
	 BAL   R7,BLDETBL	   CREATE ENTRY TABLE
	 BR    R6		   RETURN TO CALLING ROUTINE
*
*
***********************************************************************
*    THIS SUBROUTINE RESERVES AN AX VALUE AND ASSIGNS IT TO THIS A.S.
***********************************************************************
*
SETAUTH  AXRES AXLIST=AXLIST	   RESERVE AN AX VALUE
	 AXSET AX=AXVALUE	   ASSIGN AX VALUE TO SELF
	 BR    R7		   RETURN TO CALLING ROUTINE
*
*
***********************************************************************
*    THIS SUBROUTINE RESERVES AN LX VALUE FROM A NONSYSTEM LINKAGE
*    TABLE.
***********************************************************************
*
GETLX	 LXRES LXLIST=LXLIST	   RESERVE AN LX VALUE
	 BR    R7		   RETURN TO CALLING ROUTINE
*
*
***********************************************************************
*    THIS SUBROUTINE CREATES THE ENTRY TABLE TO DESCRIBE THE PC
*    ROUTINES CONTAINED IN THIS PROGRAM.
***********************************************************************
*
BLDETBL  BAL   R8,SETETBL	   BUILT PARM-LIST FOR ETCRE MACRO
	 ETCRE ENTRIES=PCRTNS	   CREATE ENTRY TABLE
	 ST    R0,ETTOKEN	   SAVE TOKEN OF ENTRY TABLE
	 BR    R7		   RETURN TO CALLING ROUTINE
*
*
***********************************************************************
*    THIS SUBROUTINE SETS UP THE PARAMETER-LIST USED BY THE ETCRE MACRO
*    TO CREATE THE ENTRY TABLE.
***********************************************************************
*
	 DROP  R10		   REL REG FOR REUSE
	 USING ETD,R10		   DEFINE REG FOR ENT-TBL HDR DSECT
*
*
* ENTRY TABLE HEADER
*
SETETBL  LA    R10,ETDHDR	   POINT TO AREA FOR ENT-TBL HDR
         MVC   ETDNUM,=H'2'        IND 2 PGMS ARE DEFINED IN PARM-LIST
	 DROP  R10		   REL REG FOR REUSE
	 USING ETDELE,R10	   DEFINE REG FOR E.T. ELEMENT DSECT
*
*
* DEFINITION FOR SERVICE-1
*
	 LA    R10,ETDSERV1	   POINT TO PARM AREA FOR SERV-PROG-1
         MVI   ETDEX,X'00'         INDICATE EX=0
	 OI    ETDFLG,ETDSUP+ETDXM   IND SUPV MODE AND ADR SPACE SWITCH
         MVC   ETDAKM,=X'FFFF'     IND CALLING PROG CAN HAVE ANY KEY
         MVC   ETDEKM,=X'8000'     IND PC RTN CAN ACCESS STORAGE WHICH
*				   HAS KEY 0 OR CALLING PROG KEYS
         MVC   ETDPAR,=4XL1'11'    ENTRY PARM
	 XC    ETDPRO1,ETDPRO1	   ZERO FIELD TO IND EPA SPECIFIED
	 MVC   ETDPRO2,=A(PCSERV01)	LOAD EPA OF PC ROUTINE
*
*
* DEFINITION FOR SERVICE-2
*
	 LA    R10,ETDSERV2	   POINT TO PARM AREA FOR SERV-PROG-2
         MVI   ETDEX,X'01'         INDICATE EX=1
	 OI    ETDFLG,ETDSUP+ETDXM   IND SUPV MODE AND ADR SPACE SWITCH
         MVC   ETDAKM,=X'8080'    IND CALLING PROG CAN HAVE KEY 0 AND 8
         MVC   ETDEKM,=X'FFFF'     IND PC RTN CAN ACCESS STORAGE WHICH
*				   HAS ANY KEY
         MVC   ETDPAR,=4XL1'22'    ENTRY PARM
	 XC    ETDPRO1,ETDPRO1	   ZERO FIELD TO IND EPA SPECIFIED
	 MVC   ETDPRO2,=A(PCSERV02)	LOAD EPA OF PC ROUTINE
	 BR    R8		   RETURN TO CALLING ROUTINE
*
*
***********************************************************************
*    THIS ROUTINE PUTS CONTROL INFORMATION INTO THE CSA FOR USE BY THE
*    USER ADDRESS SPACES WHICH ARE REQUIRED TO CALL THE PC ROUTINES
*    CONTAINED IN THIS PROGRAM.
***********************************************************************
*
	 DROP  R10		   REL REG FOR REUSE
	 USING CSAMAP,R10	   DEFINE REG FOR CSAMAP DSECT
PUTCSA	 L     R10,CSAADR	   LD ADR OF ALLO CSA
	 BAL   R7,PUTLISTS	   COPY CONTROL LISTS INTO CSA
	 BAL   R7,PUTXTBL	   CREATE CROSS-REF TBL IN CSA
	 BR    R6		   RETURN TO CALLING ROUTINE
*
*
***********************************************************************
*    THIS SUBROUTINE COPIES THE AX-LIST, LX-LIST AND THE ENTRY TABLE
*    TOKEN-LIST INTO THE CSA FOR USE BY THE USER ADDRESS SPACES WHICH
*    ARE REQUIRED TO CALL THE PC ROUTINES.
***********************************************************************
*
PUTLISTS MVC   $AXCOUNT,AXCOUNT
	 MVC   $AXVALUE,AXVALUE
	 MVC   $LXCOUNT,LXCOUNT
	 MVC   $LXVALUE,LXVALUE
	 MVC   $ETCOUNT,ETCOUNT
	 MVC   $ETTOKEN,ETTOKEN
	 BR    R7		   RETURN TO CALLING ROUTINE
*
*
***********************************************************************
*    THIS SUBROUTINE CREATES IN THE CSA THE CROSS-REFERENCE TABLE
*    EQUATING THE SERVICE-IDS TO THE CORRESPONDING PC NUMBERS OF THE
*    PC ROUTINES. THIS TABLE IS USED BY THE USER ADDRESS SPACES WHICH
*    ARE REQUIRED TO CALL THE PC ROUTINES.
***********************************************************************
*
*
* FOR SERVICE ID=1
*
PUTXTBL  XC    $SRV01ID,$SRV01ID   ZERO SERVICE ID
         MVI   $SRV01ID+3,X'01'    SET SERVICE ID=1
	 MVC   $PCNUM01,LXVALUE    SET LX VALUE PART OF PC NUMB
         MVI   $PCNUM01+3,X'00'    SET EX VALUE PART OF PC NUMB
*
*
* FOR SERVICE ID=2
*
	 XC    $SRV02ID,$SRV02ID   ZERO SERVICE ID
         MVI   $SRV02ID+3,X'02'    SET SERVICE ID=2
	 MVC   $PCNUM02,LXVALUE    SET LX VALUE PART OF PC NUMB
         MVI   $PCNUM02+3,X'01'    SET EX VALUE PART OF PC NUMB
*
*
* END-OF-TABLE
*
*
	 MVC   $XREFEND,BINONES    INDICATE END OF CROSS-REF TBL
	 BR    R7		   RETURN TO CALLING ROUTINE
*
*
***********************************************************************
*    THIS ROUTINE IS USED FOR TESTING ONLY. IT SIMULATES ADDRESS SPACE
*    PROCESSING UNTIL THE ACTUAL PROCESSING ROUTINE IS WRITTEN.
***********************************************************************
*
PROCESS  OPEN  (DCB,(OUTPUT))
	 PUT   DCB,RECORD
	 CLOSE DCB
	 B     PROCESS
*
*
***********************************************************************
*    THIS ROUTINE REMOVES THE CROSS-MEMORY ENVIRONMENT.
***********************************************************************
*
	 DROP  R10		   REL REG FOR REUSE
	 USING CVT,R10		   DEFINE REG FOR CVT DSECT
REMOVEXM L     R10,16		   LOAD ADR OF CVT
	 XC    CVTUSER,CVTUSER	   CLEAR CVTUSER
	 BAL   R7,DESTRYET	   DESTROY/PURGE ENTRY TABLE
	 BAL   R7,FREELX	   RELEASE RESERVED LX VALUE
	 BAL   R7,RSETAUTH	   RESET ORIG AX VALUE AND REL RESV AX
	 BAL   R7,FREECSA	   RELEASE ALLO CSA
	 BR    R6		   RETURN TO CALLING ROUTINE
*
*
***********************************************************************
*    THIS SUBROUTINE DESTROYS THE ENTRY TABLE AND USES THE PURGE OPTION
*    IN CASE THE USER ADDRESS SPACE HAS NOT DISCONNECTED IT FROM ITS
*    LINKAGE TABLE.
***********************************************************************
*
DESTRYET ETDES TOKEN=ETTOKEN,PURGE=YES	  DESTROY/PURGE ENTRY TABLE
	 BR    R7		   RETURN TO CALLING ROUTINE
*
*
***********************************************************************
*    THIS SUBROUTINE RELEASES THE RESERVED LX VALUE.
***********************************************************************
*
FREELX	 LXFRE LXLIST=LXLIST	   RELEASE RESERVED LX VALUE
	 BR    R7		   RETURN TO CALLING ROUTINE
*
*
***********************************************************************
*    THIS SUBROUTINE RESETS THE AX VALUE OF THE ADDRESS SPACE BACK TO
*    ITS ORIGINAL VALUE AND RELEASES THE RESERVED AX VALUE.
***********************************************************************
*
RSETAUTH LA    R10,0		   LD ZERO FOR AXSET MACRO
	 AXSET AX=(R10) 	   RESET AX VALUE BACK TO ORIG ZERO
	 AXFRE AXLIST=AXLIST	   RELEASE RESERVED AX VALUE
	 BR   R7		   RETURN TO CALLING ROUTINE
*
*
***********************************************************************
*    THIS SUBROUTINE RELEASES THE CSA STORAGE.
***********************************************************************
*
FREECSA  FREEMAIN EU,LV=CSALEN,SP=227,A=CSAADR
	 BR    R7
*
*
***********************************************************************
*    THIS ROUTINE RESTORES THE REGISTERS AND RETURNS CONTROL TO MVS
*    OR THE CALLING PROGRAM
***********************************************************************
*
RETURN	 RCNTL RC=0		   RETURN TO MVS OR CALLING PROG
*
*
***********************************************************************
*    THE DC/DS STATEMENTS
***********************************************************************
*
CSAADR	 DS    F
BINONES  DC    4XL1'FF'
*
***********************************************************************
*    THE AUTHORIZATION-VALUE (AX) LIST
***********************************************************************
*
AXLIST	 DS    0F
AXCOUNT  DC    H'1'
AXVALUE  DS    H
*
*
***********************************************************************
*    THE LINKAGE-VALUE (LX) LIST
***********************************************************************
*
LXLIST	 DS    0F
LXCOUNT  DC    F'1'
LXVALUE  DS    F
*
*
***********************************************************************
*    THE ENTRY-TABLE TOKEN LIST
***********************************************************************
*
ETLIST	 DS    0F
ETCOUNT  DC    F'1'
ETTOKEN  DS    F
*
*
***********************************************************************
*    THE AREAS USED TO CREATE THE ENTRY TABLE PARAMETER-LIST
***********************************************************************
*
PCRTNS	 DS    0F
ETDHDR	 DS    CL(ETDLEN)
ETDSERV1 DS    CL(ETDELEN)
ETDSERV2 DS    CL(ETDELEN)
*
*
***********************************************************************
*    THE RECORD AND THE DCB USED FOR THE I/O LOOP FOR TESTING
***********************************************************************
*
RECORD   DC    80CL1'A'
DCB	 DCB   DSORG=PS,MACRF=PM,BLKSIZE=80,LRECL=80,RECFM=F,	       -
	       DDNAME=WORK
*
*
*
*
***********************************************************************
***********************************************************************
*    THE CODE FOR THE PCSERV01 PC ROUTINE
***********************************************************************
***********************************************************************
*
*
PCSERV01 PCLINK STACK,SAVE=NO	   SAVE STATUS
	 L     R1,0(0,R4)	   LD PARM FROM E.T. INTO REG 1
	 PCLINK UNSTACK,THRU=(R14),SAVE=NO	RESTORE STATUS
	 PT    R3,R14		   RETURN TO CALLER AND RESTORE STATE
*
*
*
*
***********************************************************************
***********************************************************************
*    THE CODE FOR THE PCSERV02 PC ROUTINE
***********************************************************************
***********************************************************************
*
*
PCSERV02 PCLINK STACK,SAVE=NO	   SAVE STATUS
	 L     R1,0(0,R4)	   LD PARM FROM E.T. INTO REG 1
	 PCLINK UNSTACK,THRU=(R14),SAVE=NO	RESTORE STATUS
	 PT    R3,R14		   RETURN TO CALLER AND RESTORE STATE
*
*
*
*
***********************************************************************
*    THE DSECTS
***********************************************************************
*
CSAMAP	 DSECT
*
* AX-LIST IN CSA
*
$AXLIST  DS    0F
$AXCOUNT DS    H
$AXVALUE DS    H
*
* LX-LIST IN CSA
*
$LXLIST  DS    0F
$LXCOUNT DS    F
$LXVALUE DS    F
*
* ENTRY TABLE TOKEN-LIST IN CSA
*
$ETLIST  DS    0F
$ETCOUNT DS    F
$ETTOKEN DS    F
*
* SERVICE ID/PC NUMBER CROSS-REFERENCE TABLE IN CSA
*
$XREFTBL DS    0F
$SRV01ID DS    F
$PCNUM01 DS    F
$SRV02ID DS    F
$PCNUM02 DS    F
$XREFEND DS    F
*
CSALEN	 EQU   *-CSAMAP
*
	 CVT  DSECT=YES        GENERATES THE CVT DSECT
*
	 IHAETD 	       GENERATES THE ENTRY TABLE DSECTS
*
*
***********************************************************************
*    END OF PROGRAM
***********************************************************************
*
	 END
