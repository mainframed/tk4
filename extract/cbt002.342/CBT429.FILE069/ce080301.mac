*
* CODING EXAMPLE 8.3.1
*
*
	 ...
	 BAL   R6,OPENDIR	   OPEN PDS DIRECTORY
NXTENTRY BAL   R6,GETDRBLK	   READ A PDS DIR BLOCK
	 BAL   R6,GETENTRY	   GET INDIV PDS DIR ENTRY
	 ...			   PROCESS
	 B     NXTENTRY 	   GET NEXT PDS DIR ENTRY
DIREND	 BAL   R6,CLOSEDIR	   DIR END, CLOSE PDS DIR
	 ...
*
*
***********************************************************************
*    THIS ROUTINE OPENS THE DCB FOR THE PDS DIRECTORY.
***********************************************************************
*
OPENDIR  OPEN  PODIRDCB 	   OPEN PDS DIR
	 ...			   CHK FOR GOOD OPEN
	 BR    R6		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS ROUTINE USES QSAM TO READ AN ENTIRE PDS DIRECTORY BLOCK. WHEN
*    THIS ROUTINE RETURNS CONTROL TO THE CALLING ROUTINE REGISTERS 14,
*    15, 0 AND 1 ARE SAVED IN THE AREA SAVEREGS AND REGISTERS 1, 14 AND
*    15 CONTAIN THE FOLLOWING CONTROL INFORMATION:
*	 * REGISTER  1 --- ADDRESS OF THE FIRST ENTRY OF THE PDS DIR
*			   BLOCK;
*	 * REGISTER 14 --- NUMBER OF USED BYTES IN THE DIRECTORY BLOCK;
*	 * REGISTER 15 --- NUMBER OF BYTES OF DIR BLOCK PROCESSED,
*			   INITIALLY SET TO 2 FOR DIR BLK COUNT FIELD.
***********************************************************************
*
GETDRBLK CLI   GETDBSW,C'0'        CHK IF GET REQUIRED
	 BER   R6		   IF NO, RET TO CALLING RTN
	 GET   PODIRDCB,DIRBLOCK   GET A DIR BLOCK
         MVI   GETDBSW,C'0'        INDICATE GET DONE
	 LA    R15,2		   START RUNNING DIR BLK COUNT,
*				   2 BYTES FOR DIR COUNT FIELD
	 LH    R14,DIRBLOCK	   LOAD REG14 WITH DIR BLK COUNT
	 LA    R1,DIRBLOCK+2	   LOAD REG1 WITH FIRST ENTRY ADR
	 STM   R14,R1,SAVEREGS	   SAVE REGS FOR GETENTRY RTN
	 BR    R6		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS ROUTINE GETS THE NEXT PDS DIRECTORY ENTRY. WHEN THIS ROUTINE
*    RECEIVES CONTROL, REGISTERS 14 THROUGH 1 ARE SAVED IN THE AREA
*    SAVEREGS. THE REGISTERS IN SAVEREGS CONTAIN THE FOLLOWING CONTROL
*    INFORMATION:
*	 * REGISTER 14 --- NUMBER OF USED BYTES IN THE DIRECTORY BLOCK;
*	 * REGISTER 15 --- NUMBER OF BYTES OF DIRECTORY BLOCK PROCESSED
*			   SO FAR;
*	 * REGISTER  1 --- ADDRESS OF THE PREVIOUS ENTRY OF THE PDS
*			   DIRECTORY BLOCK;
*    WHEN THIS ROUTINE RETURNS CONTROL TO THE CALLING ROUTINE, THE
*    FOLLOWING AREAS CONTAIN THE FOLLOWING INFORMATION:
*	 MEMBNAME --- THE MEMBER NAME OR ALIAS;
*	 TTRC	  --- THE TTRC FIELD OF THE PDS DIR ENTRY;
*	 USERDATA --- ANY USERDATA CONTAINED IN THE PDS DIR ENTRY OR
*		      BINARY ZEROS IF THERE IS NO USER-DATA.
*    IN ADDITION, THE CONTROL INFORMATION IN REGISTERS 1 AND 15 IS
*    UPDATED AND REGISTERS 14 THROUGH 1 ARE SAVED IN THE AREA SAVEREGS.
***********************************************************************
*
GETENTRY LM    R14,R1,SAVEREGS	   RESTORE REGS
	 CLC   0(8,R1),BINONES	   CHK FOR LOGICAL END OF DIR
	 BE    DIREND		   IF YES, END OF DIR
	 MVC   MEMBNAME,0(R1)	   MOVE MEMBER NAME
	 MVC   TTRC,8(R1)	   MOVE TTRC
	 XC    USERDATA,USERDATA      CLEAR USERDATA AREA FOR EX INSTR
	 MVC   UDATALEN+3(1),TTRC+3   MOVE ENTRY CONTROL FIELD
         NI    UDATALEN+3(1),X'1F'    ZERO HIGH ORDER 3 BITS TO
*				      ISOLATE USERDATA LENGTH
	 L     R2,UDATALEN	   LOAD REG2 WITH USERDATA LENGTH
*				   IN HALFWORDS
	 SLL   R2,1		   CONVERT HALFWORDS TO BYTES
	 BAL   R7,GETUDATA	   GET USERDATA
	 LA    R2,12(0,R2)	   LOAD REG2 WITH ENTRY LENGTH,
*				   (MINIMUM 12 + USERDATA)
	 AR    R15,R2		   ADD ENTRY LEN TO RUNNING DIR BLK CT
	 CR    R15,R14		   COMPARE RUNNING DIR BLK COUNT TO
*				   DIR BLK COUNT
	 BNL   DRBLKEND 	   IF NOT LOW, ENTIRE DIR BLK PROCESSED
	 B     SETNXENT 	   IF MORE DIR, INCR REG1 TO NEXT ENTRY
DRBLKEND MVI   GETDBSW,C'1'        IND THAT GET NEXT DIR BLK REQUIRED
	 BR    R6		   RETURN TO CALLING RTN
SETNXENT LA    R1,0(R2,R1)	   INCR REG1 TO NEXT DIR ENTRY ADR
	 STM   R14,R1,SAVEREGS	   SAVE REGS FOR NEXT GETENTRY EXEC
	 BR    R6		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS SUBROUTINE GETS THE USERDATA OF THE PDS DIRECTORY. WHEN THIS
*    SUBROUTINE RECEIVES CONTROL, REGISTER 2 CONTAINS THE LENGTH OF THE
*    USERDATA IN BYTES AND REGISTER 1 CONTAINS THE ADDRESS OF THE
*    BEGINNING OF THE PDS DIRECTORY ENTRY. WHEN THIS SUBROUTINE RETURNS
*    CONTROL TO THE CALLING ROUTINE, THE AREA USERDATA CONTAINS THE
*    USERDATA OF THE PDS DIRECTORY ENTRY OR BINARY ZEROS IF THE ENTRY
*    CONTAINS NO USERDATA.
***********************************************************************
*
GETUDATA LTR   R2,R2		   CHK IF USERDATA PRESENT
	 BZR   R7		   IF NO, BACK TO CALLER
	 BCTR  R2,0		   DECR REG2 LEN FOR EX INSTR
	 EX    R2,MOVUDATA	   MOVE USER DATA
	 LA    R2,1(0,R2)	   RESTORE REG2 LEN
	 BR    R7		   RETURN TO CALLING RTN
MOVUDATA MVC   USERDATA(0),12(R1)  MOVE ONLY SPECIFIED USERDATA
*
*
***********************************************************************
*    THIS ROUTINE CLOSES THE DCB FOR THE PDS DIRECTORY.
***********************************************************************
*
CLOSEDIR CLOSE PODIRDCB 	   CLOSE PDS DIR
	 BR    R6		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    DC/DS STATEMENTS
***********************************************************************
*
GETDBSW  DC    C'1'
BINONES  DC    8XL1'FF'
DIRBLOCK DS    CL256
MEMBNAME DS    CL8
TTRC	 DS    CL4
USERDATA DS    CL62
UDATALEN DC    F'0'
SAVEREGS DS    4F
*
*
***********************************************************************
*    THE DCB FOR THE PDS DIRECTORY
***********************************************************************
*
PODIRDCB DCB   DSORG=PS,MACRF=GM,BLKSIZE=256,LRECL=256,RECFM=F,        -
	       EODAD=DIREND,DDNAME=LIBDD
	 ...
