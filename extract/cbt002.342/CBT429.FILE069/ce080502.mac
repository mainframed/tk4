*
* CODING EXAMPLE 8.5.2
*
*
WRTPDSB  CSECT
*
*
***********************************************************************
*    INITIALIZATION
***********************************************************************
*
	 INITL 3,EQU=R		   INITIALIZE PROGRAM
	 USING IHADCB,R10	   DEFINE REG FOR DCB DSECT
*
*
***********************************************************************
*    MAINSTREAM OF PROGRAM
***********************************************************************
*
	 BAL   R6,OPEN		   OPEN DATASETS
	 BAL   R6,GETMAIN	   ALLOC STOR FOR I/O BLOCK AREA
	 BAL   R6,CALCRECS	   FIND NUMB OF LRECS IN BLOCK
	 BAL   R6,GETNAME1	   GET AND SAVE FIRST MEMBER NAME
NEXTREC  BAL   R6,GETDATA	   READ MEMB RECS, BLD BLOCK
	 BAL   R6,WRTPDS	   WRITE WHOLE BLOCK INTO PDS
	 B     NEXTREC		   GET NEXT MEMB REC
MEMBEND  BAL   R6,LASTBLK	   MEMB-RECS-END, WRITE LAST INCOMP
*				     BLOCK INTO PDS
	 BAL   R6,STOW		   UPDATE PDS DIR
	 B     NEXTREC		   GET NEXT MEMB RECORDS
DATAEND  BAL   R6,LASTBLK	   END-OF-MEMBS, WRITE LAST INCOMP
*				     BLOCK INTO PDS
	 BAL   R6,STOW		   UPDATE PDS DIR FOR LAST MEMB
	 BAL   R6,CLOSE 	   CLOSE DATASETS
	 B     RETURN		   RETURN TO MVS OR CALLING PROG
*
*
***********************************************************************
*    THIS ROUTINE OPENS ALL THE DCBS.
***********************************************************************
*
OPEN	 OPEN  (SEQDCB,,PDSDCB,(OUTPUT))
	 ...			   CHECK FOR GOOD OPEN
	 BR    R6		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS ROUTINE OBTAINS THE BLKSIZE FROM THE PDS DCB AND ALLOCATES
*    VIRTUAL STORAGE FOR THE PDS BLOCK I/O AREA.
***********************************************************************
*
GETMAIN  LA    R10,PDSDCB	   SET ADRBLTY FOR PDS DCB DSECT
	 LH    R11,DCBBLKSI	   LD PDS BLKSZ FOR GETMAIN
	 GETMAIN EU,LV=(R11),A=BLKADR
	 BR    R6		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS ROUTINE CALCULATES THE NUMBER OF LOGICAL RECORDS IN A FULL
*    PHYSICAL BLOCK. THIS INFORMATION IS USED BY THE BLOCKING ROUTINE.
***********************************************************************
*
CALCRECS LA    R10,PDSDCB	   SET ADRBLTY FOR PDS DCB DSECT
	 LA    R14,0		   CLEAR REG 14 FOR DR INSTR
	 LH    R15,DCBBLKSI	   LD PDS BLKSZ
	 LH    R12,DCBLRECL	   LD PDS LRECL
	 DR    R14,R12		   DIVIDE LRECL INTO BLKSZ
	 ST    R15,BLKRECS	   SAVE NUMB OF LRECS PER BLOCK
	 BR    R6		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS ROUTINE READS THE FIRST RECORD OF THE SEQUENTIAL DATASET AND
*    VERIFIES THAT IT CONTAINS A MEMBER NAME.
***********************************************************************
*
GETNAME1 BAL   R7,GETSEQ	   READ FIRST REC FROM SEQ DS
	 CLC   0(2,R2),ID	   CHK FOR MEMB NAME ID
	 BNE   NONAME1		   IF NO, NO MEMB NAME
	 MVC   SAVENAME,2(R2)	   IF YES, SAVE MEMB NAME
	 BR    R6		   RETURN TO CALLING RTN
NONAME1  WTO   '*** FIRST DATA RECORD DOES NOT CONTAIN MEMBER NAME ***'
	 ABEND 901
*
*
***********************************************************************
*    THIS SUBROUTINE READS A RECORD FROM THE SEQUENTIAL DATASET AND
*    LOADS THE ADDRESS OF THAT RECORD INTO REGISTER 2.
***********************************************************************
*
GETSEQ	 GET   SEQDCB		   GET A LREC OF MEMB FROM SEQ DS
	 LR    R2,R1		   SAVE ADR OF LREC IN REG2
	 BR    R7		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS ROUTINE BUILDS A BLOCK OF DATA FOR THE PDS DATASET. IT
*    CONTINUALLY BRANCHES AND LINKS TO THE GETSEQ SUBROUTINE TO READ A
*    RECORD OF THE MEMBER FROM THE SEQUENTIAL DATASET UNTIL A WHOLE
*    BLOCK IS BUILT.
***********************************************************************
*
GETDATA  LA    R10,PDSDCB	   SET ADRBLTY FOR PDS DCB DSECT
	 L     R11,BLKRECS	   LD NUMB OF LRECS PER BLOCK
	 L     R12,BLKADR	   LD ADR OF I/O BLOCK AREA
	 LA    R9,0		   CLEAR REG 9 FOR LREC CTR
NEXTGET  BAL   R7,GETSEQ	   GET A LREC OF MEMB FROM SEQ DS
	 CLC   0(2,R2),ID	   CHK FOR MEMB NAME ID
	 BE    SETNAME		   IF YES, BG OF NEW MEMB, DO STOW
         MVI   FULBLKSW,C'0'       IND BLOCK NOT WRITTEN YET
	 LA    R9,1(0,R9)	   INCR LREC CTR
	 ST    R9,LRECCTR	   SAVE LREC CTR
	 MVC   0(80,R12),0(R2)	   MOVE LREC INTO BLOCK AREA
	 LA    R12,80(0,R12)	   INCR TO NEXT LREC SLOT IN BLOCK
	 BCT   R11,NEXTGET	   CHK IF BLOCK FULL
         MVI   FULBLKSW,C'1'       IF FULL, IND IT
	 BR    R6		   RETURN TO CALLING RTN
SETNAME  MVC   STOWNAME,SAVENAME   PUT CURR MEMB NAME INTO STOW-LIST
	 MVC   SAVENAME,2(R1)	   RESTORE NEXT MEMB NAME
	 B     MEMBEND		   BRANCH TO MEMB-END RTN
*
*
***********************************************************************
*    THIS ROUTINE WRITES A PHYSICAL BLOCK INTO THE PDS. THE SIZE OF THE
*    BLOCK IS SPECIFIED IN THE PDS DCB.
***********************************************************************
*
WRTPDS	 L     R12,BLKADR	   LD ADR OF I/O BLOCK AREA
	 WRITE WDECB,SF,PDSDCB,(R12)
	 CHECK WDECB		   CHECK IF WRITE OK
	 BR    R6		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS ROUTINE RECEIVES CONTROL EACH TIME WHEN ALL THE RECORDS OF A
*    MEMBER HAVE BEEN READ FROM THE SEQUENTIAL DATASET. THIS ROUTINE
*    CHECKS IF THE LAST BLOCK IS INCOMPLETE AND IS REQUIRED TO BE
*    WRITTEN INTO THE PDS. THE PDS DCB BLKSIZE IS SET TO THE SHORT
*    BLKSIZE BEFORE THE WRITE AND THEN THE DCB BLKSIZE IS RESTORED TO
*    THE NORMAL BLKSIZE.
***********************************************************************
*
LASTBLK  CLI   FULBLKSW,C'1'       CHK IF LAST BLOCK WRITTEN
	 BER   R6		   IF YES, RETURN
	 LA    R10,PDSDCB	   IF NO, SET ADRBLTY FOR PDS DSECT
	 LA    R14,0		   CLEAR REG 14 FOR MR INSTR
	 LH    R15,DCBLRECL	   LD PDS LRECL
	 L     R12,LRECCTR	   LD NUMB OF LRECS IN LAST BLOCK
	 LTR   R12,R12		   CHK IF NO LRECS IN LAST BLOCK
	 BZ    NORECS		   IF NO LRECS, ERROR
	 MR    R14,R12		   CALC HOW MUCH OF BLOCK FULL
	 MVC   SAVBLKSZ,DCBBLKSI   SAVE PDS NORMAL BLKSZ
	 STH   R15,DCBBLKSI	   PUT LEN OF LAST BLOCK INTO PDS DCB
	 ST    R6,SAVREG6	   SAVE REG 6 FOR BAL INSTR
	 BAL   R6,WRTPDS	   WRITE LAST BLOCK OF MEMB
	 L     R6,SAVREGS	   RESTORE REG 6 AFTER BAL DONE
	 MVC   DCBBLKSI,SAVBLKSZ   RESTORE NORMAL PDS BLKSZ
	 BR    R6		   RETURN TO CALLING RTN
NORECS   WTO   '*** NO DATA RECORDS IN SEQDD ***'
	 ABEND 902
*
*
***********************************************************************
*    THIS ROUTINE ISSUES THE STOW MACRO TO UPDATE THE DIRECTORY OF
*    THE PDS.
***********************************************************************
*
STOW	 STOW  PDSDCB,STOWLST,A    UPDATE PDS DIR
	 LTR   R15,R15		   CHK RC
	 BZR   R6		   IF OK, RET TO CALLING RET
	 C     R15,BIN4 	   CHK IF DUP MEMB NAME
	 BE    DUPNAME		   IF YES, NO UPDT, DSPLY WARN MSG
	 C     R15,BIN12	   CHK FOR NO MORE DIR SPC
	 BE    NODIRSPC 	   NO MORE ROOM IN DIR, DSPLY MSG
	 ...			   CHECK OTHER RETURN CODES
DUPNAME  MVC   WTO1NAME,STOWNAME   PUT DUPL NAME INTO WTO MSG
	 LA    R1,WTO1LST	   LD LIST ADR FOR EXEC-FORM WTO
	 WTO   MF=(E,(R1))	   ISSUE EXEC-FORM OF WTO
	 BR    R6		   RETURN TO CALLING RTN
NODIRSPC WTO   '*** NO MORE DIRECTORY SPACE FOR NEW MEMBER ***',       -
	       ROUTCDE=11
	 ABEND 903
*
*
***********************************************************************
*    THIS ROUTINE CLOSES ALL THE DCBS.
***********************************************************************
*
CLOSE	 CLOSE (SEQDCB,,PDSDCB)    CLOSE ALL DCBS
	 BR    R6		   RETURN TO CALLING RTN
*
*
***********************************************************************
*    THIS ROUTINE RESTORES THE REGISTERS AND RETURNS CONTROL.
***********************************************************************
*
RETURN	 RCNTL RC=0
*
*
***********************************************************************
*    DC/DS STATEMENTS
***********************************************************************
*
FULBLKSW DC    C'0'
ID       DC    C'$$'
BIN4     DC    F'4'
BIN12    DC    F'12'
BLKADR	 DS    F
BLKRECS  DS    F
LRECCTR  DC    F'0'
SAVREG6  DS    F
SAVENAME DS    CL8
SAVBLKSZ DS    CL2
*
*
***********************************************************************
*    THE WTO-LIST
***********************************************************************
*
	 CNOP  0,4
WTO1LST  DC    AL2(WTO1LSTX-WTO1LST)
         DC    H'0'
         DC    C'*** SPECIFIED MEMBER NAME: '
WTO1NAME DS    CL8
         DC    C' ALREADY EXISTS IN LIBRARY---MEMBER NOT ADDED ***'
WTO1LSTX EQU   *
*
*
***********************************************************************
*    THE STOW-LIST
***********************************************************************
*
STOWLST  DS    0CL12
STOWNAME DS    CL8
STOWTTR  DS    CL3
STOWC    DC    X'00'
*
*
***********************************************************************
*    THE DCBS
***********************************************************************
*
SEQDCB	 DCB   DSORG=PS,MACRF=GL,LRECL=80,RECFM=FB,EODAD=DATAEND,      -
	       DDNAME=SEQDD
PDSDCB	 DCB   DSORG=PO,MACRF=W,LRECL=80,DDNAME=PDSDD
*
*
***********************************************************************
*    THE DSECTS
***********************************************************************
*
	 DSECT
	 DCBD  DSORG=PO 	   GENERATES PO-DCB DSECT
*
*
***********************************************************************
*    END OF PROGRAM
***********************************************************************
*
	 END
