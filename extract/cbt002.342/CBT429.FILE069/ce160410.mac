*
* CODING EXAMPLE 16.4.10
*
*
//-------- JOB	----
//STEP     EXEC ASMACL,PARM.L='AC(1)'
//SYSLIB   DD	DSN=SYS1.MACLIB,DISP=SHR
//	   DD	DSN=SYS1.MODGEN,DISP=SHR
//	   DD	DSN=USER.MACLIB,DISP=SHR
//C.SYSIN  DD	*
*
*
**********************************************************************
* INITIALIZATION
**********************************************************************
*
PUTINLPA CSECT
	 INITL 3,EQU=R		   SET UP BASE REGS AND SAVEAREA
	 USING CVT,R10		   DEFINE REG FOR CVT DSECT
	 USING CDENTRY,R11	   DEFINE REG FOR CDE DSECT
	 USING XTLST,R12	   DEFINE REG FOR XL DSECT
*
*
**********************************************************************
* MAINSTREAM OF PROGRAM
**********************************************************************
*
	 BAL   R6,SVDSINFO	   SAVE DS INFO FROM CALLING PGM
	 BAL   R6,SETMODE	   SET SUPV STATE, PROT KEY ZERO
	 BAL   R6,CHKEXIST	   CHECK IF LOADMOD ALREADY IN LPA
	 LTR   R15,R15		   CHK RC TO DETRM IF LOADMOD PRESENT
	 BZ    RETURN		   IF YES, RETURN TO MVS
	 BAL   R6,PUTLPA	   IF NO, PUT NEW LOADMOD INTO LPA
**TEST	 BAL   R6,CHKLMOD	   CHK NEW LMOD BY LOADING/DUMPING IT
	 B     RETURN		   RETURN TO MVS OR CALLER
*
*
**********************************************************************
* THIS ROUTINE SAVES THE DATA RECEIVED FROM THE CALLING PROGRAM. THE
* CALLING PROGRAM USES THE FOLLOWING GENERAL PURPOSE REGISTERS TO
* PASS THE FOLLOWING DATA:
*   GPR  8: ALET
*   GPR  9: BEG ADDR OF DATA SPACE
*   GRP 10: FIRST 4 BYTES OF STOKEN
*   GRP 11: LAST 4 BYTES OF STOKEN.
**********************************************************************
*
SVDSINFO  ST	R8,ALET 	   \
	  ST	R9,DSORGIN	    \ RETRIEVE PASSED DATA FROM
	  ST	R10,STOKEN	    / CALLING PROGRAM
	  ST	R11,STOKEN+4	   /
	  BR	R6		   RETURN TO CALLING ROUTINE
*
*
**********************************************************************
* THIS ROUTINE PUTS THIS PROGRAM INTO SUPERVISOR STATE AND PSW KEY 0.
* THIS IS NECESSARY TO MODIFY THE LPA CDE CHAIN. A PROGRAM MUST BE
* APF-AUTHORIZED IN ORDER TO ISSUE THE MODESET MACRO INSTRUCTION.
**********************************************************************
*
SETMODE  MODESET KEY=ZERO,MODE=SUP
	 BR    R6		   RETURN TO CALLING ROUTINE
*
*
**********************************************************************
* THIS ROUTINE USES THE IBM SERVICE PROGRAM IEAQCDSR TO SCAN THE LPA
* CDE QUEUE TO DETERMINE IF THE LOAD MODULE THAT IS TO BE ADDED TO
* THE LPA IS ALREADY PRESENT.
**********************************************************************
*
CHKEXIST L     R10,16		   LOAD ADDRESS OF CVT
	 L     R8,CVTQLPAQ	   LOAD ADR OF BG OF LPA CDE QUEUE
	 LA    R9,LMODNAME	   LOAD ADDR OF NAME OF LOADMOD
	 L     R15,CVTQCDSR	   LOAD ADDR OF IEAQCDSR
	 BALR  R14,R15		   CALL IEAQCDSR
	 B     CDEFND		   BRANCH TO CDE FOUND RTN
	 B     CDEXFND		   BRANCH TO CDE NOT FOUND RTN
CDEFND   WTO   '*** LOAD MODULE ALREADY IN LPA ***'
	 LA    R15,0		   INDICATE LOADMOD PRESENT
	 BR    R6		   RETURN TO CALLING ROUTINE
CDEXFND  WTO   '*** LOAD MODULE NOT IN LPA ***'
	 LA    R15,4		   INDICATE LOADMOD NOT PRESENT
	 BR    R6		   RETURN TO CALLING ROUTINE
*
*
**********************************************************************
* THIS ROUTINE PASSES CONTROL TO ALL THE SUBROUTINES THAT PERFORM
* THE REQUIRED FUNCTIONS NECESSARY TO INSERT A NEW LOAD MODULE INTO
* THE LPA.
**********************************************************************
*
PUTLPA	 BAL   R7,GETMAIN	   ALLOCATE STORAGE FROM CSA
	 BAL   R7,BLDCDE	   BUILD NEW CDE
	 BAL   R7,BLDXL 	   BUILD NEW XL
	 BAL   R7,MAKELMOD	   CREATE NEW LOADMOD FOR LPA
	 BAL   R7,SETLOCKS	   OBTAIN LOCK FOR CDE CHAIN
	 BAL   R7,LINKCDE	   INSERT NEW CDE INTO LPA CDE CHAIN
	 BAL   R7,RELLOCKS	   RELEASE LOCK FOR CDE CHAIN
         WTO   '*** LOAD MODULE PUT INTO LPA ***'
	 BR    R6		   RETURN TO CALLING ROUTINE
*
*
**********************************************************************
* THIS ROUTINE ALLOCATES VIRTUAL STORAGE FROM THE CSA. THE STORAGE IS
* USED TO BUILD THE CDE, XL, AND THE ACTUAL LOAD MODULE. THE STORGAE
* IS ALLOCATED FROM NONFETCH-PROTECTED, PAGEABLE STORAGE. A PROGRAM
* MUST BE APF-AUTHORIZED OR EXECUTING IN SUPERVISOR STATE OR IN
* PSW KEY 0 THOUGH 7 TO ALLOCATE VIRTUAL STORAGE FROM THE CSA.
**********************************************************************
*
GETMAIN  GETMAIN EU,LV=GMLEN,SP=CSASPN,A=CSAADDR
	 LTR   R15,R15
	 BNZ   NOCSA
	 BR    R7		   RETURN TO CALLING ROUTINE
NOCSA    WTO   '*** CSA STORAGE NOT AVAILABLE ***'
	 ABEND 901
*
*
**********************************************************************
* THIS ROUTINE CREATES THE CDE THAT POINTS TO THE NEW LOAD MODULE.
**********************************************************************
*
BLDCDE	 L     R11,CSAADDR	   LD ADR OF ALLO CSA (BG OF NEW CDE)
	 LA    R12,CDELEN(0,R11)   LOAD ADDR OF BG OF NEW XL
	 ST    R12,CDXLMJP	   INSERT ADDR OF NEW XL INTO NEW CDE
	 MVC   CDNAME,LMODNAME	   INSERT NEW LOADMOD NAME INTO CDE
	 LA    R14,CDELEN+XLLEN(0,R11)	  LOAD ADDR OF NEW LOADMOD
	 ST    R14,LMODADDR	   SAVE ADDR OF NEW LOADMOD LOC IN CSA
	 ST    R14,CDENTPT	   INSERT ADDR OF NEW LOADMOD INTO CDE
*	 OI    CDENTPT,CDEMODE	   LOADMOD IN AMODE 31, IF REQUIRED
	 MVI   CDSP,CSASPN	   INSERT CSA SUBPOOL NUMB INTO CDE
	 OI    CDATTRB,CDGLOBAL    LOADMOD LOADED TO GLOBAL
	 OI    CDATTR,CDNIP	   MODIFIED LPA LOADMOD
	 OI    CDATTR2,CDXLE	   XL BUILT FOR LOADMOD
	 BR    R7		   RETURN TO CALLING ROUTINE
*
*
**********************************************************************
* THIS ROUTINE CREATES THE XL (EXTENT LIST) USED WITH THE CDE OF THE
* NEW LOAD MODULE.
**********************************************************************
*
BLDXL	 LA    R14,XLLEN	   LOAD LENGTH OF XL
	 ST    R14,XTLLNTH	   INSERT LENGTH OF XL INTO NEW XL
	 LA    R14,1		   SET NUMB OF RELO FACTORS, MUST BE 1
	 ST    R14,XTLNRFAC	   STORE NUMB OF RELOCATION FACTORS
	 L     R14,LMODLEN	   LOAD LEN OF NEW LOADMOD
         STCM  R14,B'0111',XTLMSBLN     INSERT LEN OF LOADMOD INTO XL
	 LA    R14,CDELEN+XLLEN(0,R11)	LOAD ADDR OF BG OF NEW LOADMOD
	 ST    R14,XTLMSBAD	   INSERT ADDR OF NEW LOADMOD INTO XL
         MVI   XTLMSBLA,X'80'      FIELD REQUIRES X'80'
	 BR    R7		   RETURN TO CALLING ROUTINE
*
*
**********************************************************************
* THIS ROUTINE CREATES THE ACTUAL LOAD MODULE USING THE INFORMATION
* THAT WAS PASSED FROM THE CALLING PROGRAM.
**********************************************************************
*
MAKELMOD L     R14,LMODADDR	   LOAD BEG ADDR OF NEW LOAD MOD
	 MVC   0(80,R14),PRGMBEG   INSERT DATA FROM CALLING PROGRAM
	 BR    R7		   RETURN TO CALLING ROUTINE
*
*
**********************************************************************
* THIS ROUTINE OBTAINS THE LOCAL AND THE CMS LOCKS. THIS IS NECESSARY
* FOR SERIALIZATION WHILE THE LPA CDE CHAIN IS BEING MODIFIED.
**********************************************************************
*
SETLOCKS SETLOCK OBTAIN,MODE=UNCOND,TYPE=LOCAL,REGS=USE,	       -
	       RELATED=(RELLOCKS)
	 SETLOCK OBTAIN,MODE=UNCOND,TYPE=CMS,REGS=USE,		       -
	       RELATED=(RELLOCLS)
	 BR    R7		   RETURN TO CALLING ROUTINE
*
*
**********************************************************************
* THIS ROUTINE INSERTS THE NEW CDE INTO THE ACTIVE LPA CDE CHAIN,
* WHICH, IN EFFECT, ADDS THE NEW LOAD MODULE INTO THE LPA.
**********************************************************************
*
LINKCDE  L     R1,CVTQLPAQ	   LOAD ADDR OF BG OF LPA CDE Q
	 L     R14,CDCHAIN-CDENTRY(0,R1)     SAVE ADDR OF NEXT CDE
*				   CONTAINED IN FIRST CDE ON QUEUE
	 ST    R11,CDCHAIN-CDENTRY(0,R1)     INSERT ADDR OF NEW CDE
*				   INTO FIRST CDE ON QUEUE
	 ST    R14,CDCHAIN	   INSERT ADDR OF NEXT CDE INTO
*				   NEW CDE
	 BR    R7		   RETURN TO CALLING ROUTINE
*
*
**********************************************************************
* THIS ROUTINE RELEASES THE LOCAL AND THE CMS LOCKS.
**********************************************************************
*
RELLOCKS SETLOCK RELEASE,TYPE=ALL,REGS=USE,RELATED=(SETLOCKS)
	 BR    R7		   RETURN TO CALLING ROUTINE
*
*
**********************************************************************
* THIS ROUTINE LOADS THE LOAD MODULE THAT WAS JUST CREATED AND ADDED
* TO THE LPA AREA, THEN ABENDS WITH A VIRTUAL STORAGE DUMP. GRP 8
* POINTS TO THE BEGINNING OF THE LOAD MODULE AND GPR 9 POINTS TO THE
* LAST BYTE +1 OF THE LOAD MODULE. THIS ROUTINE SHOULD BE USED FOR
* TESTING ONLY.
**********************************************************************
*
CHKLMOD  LOAD  EPLOC=LMODNAME
	 LR    R8,R0
	 LR    R9,R8
	 A     R9,LMODLEN
	 ABEND 999,DUMP
	 BR    R6
*
*
**********************************************************************
* THIS ROUTINE RESTORES THE REGISTERS AND RETURNS TO MVS OR THE
* CALLING PROGRAM.
**********************************************************************
*
RETURN	 RCNTL RC=0
*
*
**********************************************************************
* CONSTANTS AND WORKING STORAGE
**********************************************************************
*
CSASPN	 EQU   241
GMLEN	 EQU   CDELEN+XLLEN+LMODLEN
CSAADDR  DS    F
LMODADDR DS    F
LMODNAME DC    CL8'DSCNTL99'
PRGMBEG  EQU   *
ALET	 DS    F
DSORGIN  DS    F
STOKEN	 DS    CL8
         DC    64CL1'A'
LMODLEN  DC    A(*-PRGMBEG)
*
*
**********************************************************************
* DSECTS
**********************************************************************
*
	 IHAPSA
*
	 CVT   DSECT=YES
*
	 IHACDE
CDELEN	 EQU   *-CDENTRY
*
	 IHAXTLST
XLLEN	 EQU   *-XTLST
*
*
**********************************************************************
* END OF PROGRAM
**********************************************************************
*
	 END
//*
//*
//L.SYSLMOD DD DSN=SYS1.AUTHLIB(PUTINLPA),DISP=SHR
//
