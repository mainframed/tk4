WIN3270 - TSO 3270 full screen dialog construction tool
=======================================================


Overview of WIN3270
-------------------

The WIN3270 environment is allows users of the TSO Clist language
or TSO REXX language facilities to create full screen
applications on the 3270 display station.  Six types of widgets
are supported, and any displayed text can be treated s HOT or
selectable allowing context sensitive text dialogs to be created.
The widgets supported are LABEL, INPUT, OUTPUT, BUTTON, RADIO,
and CECKBOX. The following window shows the style of widgets that
can be created:

                (picture not shown)


This simple tool set for the 3270 should allow powerfull
applications to be created with the CLIST language or REXX
language on TSO.

It is not the intention that this code should remove the need for
similar ISPF code. ISPF is much more powerfull and feature rich
compared to the WIN3270 subcommand environment. Though these
functions can be used with those of ISPF, or before ISPF is
started. The WIN3270 tools may a simpler way to create a dialog
in some instances.

The WIN3270 environmant has benn created as a training exercise
to allow the author to become more familiar with 3270 data stream
programming and C language programming. And so its future is
undetermined. The code is being enhanced as time permits,
therefore it would be wise to copy the load module if you want to
use it and ensure repeatability of opperation.



Running the WIN3270 subcommand environment.
-------------------------------------------

Running WIN3270 from a clist
----------------------------

From a clist program use the following command to start the
environment. Once this has executed WIN3270 subcommands will be
interpreted.

CALL 'SASDDF.A.LOADLIB(WIN3270)'

This program can not be called directly from the TSO READY
prompt. However, if the clist program fails during execution and
the subcommand environment is stil active a line command prompt
will be displayed like "WIN3270:". If this appears simply type
the WX subcommand to terminate the WIN3270 environment.

If there are problems with starting WIN3270 or with subsequent
subcommands then the following parameter will provide a lot of
information that may help solve the problem.  For more
information see the ML subcommand below. If an error

CALL 'SASDDF.A.LOADLIB(WIN3270)' '-ML 9'

For example the TSO clist:

PROC 0
CONTROL NOCAPS
CALL 'SASDDF.A.LOADLIB(WIN3270)'    /* start environment */
/* create attributes */
WA value=\ type=label color=cyan hilite=none
WA value=# type=label color=red hilite=none
WA value=! type=label color=blue hilite=reverse
WA value=_ type=output color=yellow hilite=none
/* name the window */
WC name=main
/* define the window layout */
WS 08 !                                                          \
WS 09 ! \                                                      ! \
WS 10 ! \  This is a very simple test box.   User:_SYSUID      ! \
WS 11 ! \                                                      ! \
WS 12 ! \  Second and last line of the test. #Use PF3 to end   ! \
WS 13 ! \                                                      ! \
WS 14 !                                                          \
DO WHILE(&STR(&WINSYSK)^=&STR(PF3))
  /* display the window until PF3 is pressed */
  WD name=main row=1 col=1
END
/* tidy up, stop win3270, and exit */
WE name=main
WX
EXIT

The clist above shows how simple it is to display this message box.

            (picture not shown)


Running WIN3270 from a REXX exec
--------------------------------

To do a similar thing using the TSO REXX language requires a
slightly different approach. You must have two REXX execs in your
SYSPROC library. The first one establishes the WIN3270
environment and specifies the name of the second exec.  For
example:

/* REXX */
"CALL 'SASDDF.A.LOADLIB(WIN3270)' '-REXX TREXX2'"
exit

The second REXX exec (called TREXX2) can then issue WIN3270
subcommands after first addressing the WIN3270 environment using
the ADDRESS statement. For example:


/* REXX */
address WIN3270
/* define attributes */
"WA value=\ type=label color=cyan hilite=none"
"WA value=# type=label color=red hilite=none"
"WA value=! type=label color=blue hilite=reverse"
"WA value=_ type=output color=yellow hilite=none"
usr = sysvar(SYSUID)
/* define window */
"WC name=main"
"WS 08 !                                            \"
"WS 09 ! \                                        ! \"
"WS 10 ! \ This is a very simple test box.        ! \"
"WS 11 ! \ User:_USR                              ! \"
"WS 12 ! \ Second and last line of the test.      ! \"
"WS 13 ! # Use PF3 to end                         ! \"
"WS 14 ! \                                        ! \"
"WS 15 !                                            \"
/* display window */
do until(winsysk = 'PF3')
  "WD name=main"
end
/* clean up */
"WE name=main"
"WX"



WIN3270 environment feedback variables.
---------------------------------------

The following TSO variables are set after the WIN3270 subcommand
environment has been established. These variables provide
feedback about the 3270 device that the clist application may
need before it uses the WIN3270 subcommands:

   WINSYSDC = Display colors list.
   WINSYSNR = Number of display lines (rows).
   WINSYSNC = Number of display columns.
   WINSYSAP = APL support either Y or N.
   WINSYSGR = Vector graphic support either Y or N.
   WINSYSPS = Programmed symbols either Y or N.
   WINSYSDH = Display hilights list.

For example win3270a command displays a screen that shows the
built in WIN3270 feedback variables.


WIN3270 sub-commands.
---------------------

The following is a list of WIN3270 subcommands and their operands:

   WA subcommand - set field attributes used by all windows.

      value= Single character used to define field
      start. Value is required.

      type= Type of the widget. Default type is LABEL. Type can
      be one of:  LABEL, INPUT, OUTPUT, BUTTON, RADIO or
      CHECKBOX.

         type=label is used for a protected text label field. The
         value= character is replaced by an attribute character.
         The text for the field will follow the value= char.

         type=output is used for a protected text field. The
         value= character is replaced by an attribute character.
         The name of the CLIST variable will follow the value=
         character. The variable contents will be displayed in
         the field after the window has been displayed.

         type=input is used for an unprotected input field. The
         value= character is replaced by an attribute character.
         The name of the CLIST variable will follow the value=
         character. The variable contents will be displayed in
         the field as the window is displayed, and the variable
         will receive the contents of the field after the window
         has been displayed.

         type=button is used for an unprotected input field, that
         has a button border to it. The name of the CLIST
         variable will follow the value= character. The variable
         will be set to X if the cursor is on the field when the
         window has been displayed.  Otherwise the variable will
         be set to blank.

         type=radio is used for an unprotected input field, that
         has small button indicator on the left of it.  The name
         of the CLIST variable will follow the value= character
         of the first radio button field. The variable name is
         the first word of the text and is not displayed. (see
         below) The variable will contain the second word if this
         station is the selected radio box station.  Otherwise
         the variable will be set to blank. The x and o in the
         following diagram will be replaced with PS symbols on
         devices that support these, otherwise the O and star(*)
         characters will be used.

                This:
                WS 02   @A1 Red apples
                WS 03   @A1 Green apples
                WS 04   @A1 Yellow apples
                WS 05
                WS 06   @A2 Orange oranges
                WS 07   @A2 Blue oranges - yuck

                Will generate:
                        .O.Red apples
                        .*.Green apples
                        .O.Yellow apples

                        .O.Orange oranges
                        .*.Blue oranges - yuck


         Here variable names are A1 and A2.  The variable A1 will
         contain "Green" and the variable A2 will contain "Blue".
         You will note that the first 3 and the last two fields
         are respectively linked to their own variables, whose
         name is the first word in the field definition. Only one
         of the linked fields can be on (displaying a *), if the
         variable is set to an invalid value then the value will
         be replaced by the name of the first field.

         type=checkbox is used for an unprotected input field,
         that has a small box indicator on the left of it. The
         name of the CLIST variable will follow the value=
         character.

         The variable name and displayed text are the same until
         the first blank character. (see below) The variable will
         be set to contain "X" if the cursor is on the field when
         the window has been displayed.  Otherwise the variable
         will be set to blank. The X and _ in the following
         diagram will be replaced with PS symbols on devices that
         support these, otherwise the X and underscore(_)
         characters will be used.

                This:
                WS 02   #Bird feathers
                WS 03   #Dog hair
                WS 04   #Cat fur
                WS 05   #Fish scales

                Will generate:
                        .X.Bird feathers
                        ._.Dog hair
                        .X.Cat fur
                        ._.Fish scales


         Here variable names are BIRD, DOG, CAT and FISH.
         Variable BIRD will contain "X", variable DOG will
         contain blank, variable CAT will contain "X", and
         variable FISH will contain blank.

      color= The color name used for the widget. Color can be one
      of: RED, BLUE, GREEN, WHITE, PINK, YELLOW, CYAN, NONE, or
      BLACK. The default is GREEN.

      hilite= The hilight to use for some widgets. Hilite can be
      one of: NONE, REVERSE, ULINE, BLINK. The default is NONE.
      Not all widget types support hilites.

      symbol= Symbol set to use. Can be one of: NONE, APL, PS.
      The default is NONE. Not all widget types support APL or
      PS, and not all devices will display these symbol sets.

      The PS symbol set is comprised of the standard english
      alphabet and some special drawing characters. All of the
      alpha numeric and some symbols characters have a fixed
      underline and overline. Not all device cell sizes are
      supported for PS. An example of the PS font definition is
      in sym9x16u.sym This results in a symbol set that looks
      like:

            (picture not shown)


      just= The justification to use. Can be either of: NONE,
      LEFT, CENTER, RIGHT. The default is NONE. Not all widget
      types support justification.

      NOTE: Just is not implemented yet.

   WE subcommand - erase named window.

      name= The name of the window to erase.  This is required.
      If name= is not specified LASTCC will be set to 4 and a
      window will not be deleted. If name already exists and is
      deleted LASTCC will be 0 and if the window was the
      currently active window there will no longer be a currently
      active window.

   WC subcommand - create named window.

      name= The name of the window to create. This is required.
      If name= is not specified LASTCC will be set to 4 and a
      window will not be created. If name already exists LASTCC
      will be set to 8, and the currently active window will not
      be changed, and no new window will be defined.

      WC must be followed by at least one WS sub command.

   WS subcommand - define row on currently named window.
      nn NN defines the row to define.  Characters following the
      single blank following NN are assumed to be part of the
      window for row NN of the window named by the last WC sub
      command. This parameter is required.  If nn is larger than
      the screen will allow the LASTCC will be set to 4 and the
      row will not be defined. If nn is not a valid integer
      greater than 0 LASTCC will be set to 8 and the row will not
      be defined. If nn has already been defined then LASTCC will
      be set to 12 and the row will not be defined. WS must be
      preceeded by one WC sub command.

      Warning Do not use characters that the CLIST language
      processor likes to eat, as attribute characters. Such
      errors are hard to find. In particular avoid plus,minus,
      ampersand, and colon.

   WD subcommand - display the named window.

      name= Name of an existing window to display. If the window
      named by name= does not exist the LASTCC will be set to 4
      and the window will not be displayed. This parameter is
      required.

      row=nn Row position of top left window corner. The default
      for nn is 1. If row= is not a valid number LASTCC is set to
      8. If the number is too large for the window to the LASTCC
      is set to 12 and the window is not displayed.

      col=nn Column position of top left window corner. The
      default for nn is 1.  If col= is not a valid number LASTCC
      is set to 8. If the number is too large for the window to
      the LASTCC is set to 12 and the window is not displayed.

      input=Y Flag indicating if input will be accepted from the
      window. The default is "Y", meaning input will be accepted.
      Alternatively "N" can be specified, meaning that the user
      will only see the window for the delay time (see below). If
      "N" is specified delay= should be set greater than 0, else
      the display may not be perceptable.

      delay=0 The time that the window is displayed for before
      the user can enter input if input=Y is specified.  Or, the
      time the window is displayed for before control is returned
      to the clist if input=N is specified. The time is specified
      as an integer number of seconds. The default os 0 seconds.

   The following feedback variables are set after the WD sub
   command has executed with a LASTCC of 0. If the LASTCC is not
   0 these variables will remain unchanged.

      WINSYSR = The current cursor row.

      WINSYSC = The current cursor column.

      WINSYSK = The name of the last key pressed.

         May be one of:
         ENTER, PF1, ... PF24, PA2, PA3 OPID, MAGRDR, SELPEN.

         The following keys will not be returned:  ATTN, PA1 -
         TSO causes an attention interupt that the clist can
         handle itself.  CLEAR, SYSREQ, TESTREQ - Not supported
         by read modified request to the device.

      WINSYSV = The name of the selected variable or blank if no
      variable is selected.

      WINSYST = The word of text that is selected or blank if no
      test is selected.

   For example win3270a command displays a screen that shows the
   built in WIN3270 feedback variables.

   WX subcommand - exit the WIN3270 subcommand environment. WX
   has no parameters. This subcommand will free any resources,
   clear the screen, and exit from the WIN3270 sub command
   environment.

   WXDEB subcommand - The debug level setting sub command..

      nn The debug level number is an integer value that
      determines how much debug info to display. 0 indicates
      debug is off. 1 through 9 indicate a level, 1 being terse 9
      being verbose. Numbers above 9 mean display specific info.



Examples of the WIN3270 subcommand environment.
-----------------------------------------------

The following examples can be found in the PDS 'SASDDF.A.CLIST'.

   t32 command - Displays a test window that has a reverse video
   box surrounding it. It requires PF3 to end the display.  This
   is a very simple clist that illustrates the order that WIN3270
   subcommands should be executed in.

   win3270a command - Displays a screen that shows the built in
   WIN3270 feedback variables.  This is a simple clist that
   illustrates how to get the WIN3270 feedback variables.

   win3270t command - Displays a crazy little application that
   does nothing, except demonstrate use of some widgets. In
   particular push buttons, check boxes and radio buttons. It
   also demonstrates the ability to define more than 1 window,
   and swap between them. win3270alc

   lc command - Lists a tso users catalog, displaying the
   contents on a full screen.  Illustrates the use of input and
   output fields and function keys for scrolling.

   xhelp command - Displays help for the keyword entered, and
   allows the user to drill down within the displayed help in
   order to display further help.  Illustrates the use of input
   and output fields, function keys for scrolling, and the
   WINSYST variable to access the selected text. Also uses the
   screen size variable WINSYSNR to set the number of lines to
   display.



References Used.
----------------

The following publications have been used in the developement of
this program:

   SC28-1875 TSO/E v2 programming Services
   GA23-0059 3270 Info. Display Sys. Data Stream Programmers Reference.
   GA27-3831 3174 Establishment Controller Character Set Reference.
   GA27-2837 3270 Character Set Reference.
   HUR 9058 IBM3270 Personal Computer
     Graphics Control Program Data Stream
     Reference.
   GA18-2589 IBM 3179-G/3192-G Color
     Graphics Display Station Description.
   GG27-6999 Introduction to Programming the IBM 3270.
   SC28-1882 MVS/REXX Users Guide.
   SC28-1883 Procedure Language MVS/REXX Reference.
   56117 SAS/C Library Reference - Volume 1
   56118 SAS/C Library Reference - Volume 2
   56123 SAS/C Compiler and Library Users Guide
   59014 SAS Technical report C-109 Changes
     and Enhancements to the C Library
     Reference Release 5.00

