PROC 0 DEB
/*==================================================================*/
/* Program:   WIN3270D                                              */
/* Support:   DAF                                                   */
/* Language:  CLIST                                                 */
/*                                                                  */
/* Purpose:   A test clist for the WIN3270 sub command environment. */
/*            This clist also contains large amounts of comments    */
/*            that explain what each subcommand and their           */
/*            attributes do. Also explained are the feeback         */
/*            variables and their contents.                         */
/*                                                                  */
/*            The WIN3270 environment allows users of the           */
/*            TSO Clist language and the REXX language on TSO       */
/*            facilities to create full screen applications on the  */
/*            3270 display station. Six types of widgets are        */
/*            supported, and any displayed text can be treated      */
/*            as HOT or selectable allowing context sensitive       */
/*            text dialogs to be created. The widgets supported     */
/*            are LABEL, INPUT, OUTPUT, BUTTON, RADIO, and          */
/*            CHECKBOX. This simple tool set for the 3270 should    */
/*            allow powerfull applications to be created with       */
/*            CLIST and REXX for TSO.                               */
/*                                                                  */
/*            It is NOT the intention that this code should         */
/*            remove the need for similar ISPF code. ISPF is        */
/*            greatly more powerfull and feature rich than          */
/*            the WIN3270 subcommand environment. Though            */
/*            these functions can be used with those of ISPF,       */
/*            or before ISPF is started.                            */
/*                                                                  */
/*            This code has been created as a training exercise     */
/*            to allow the author to become more familiar with      */
/*            3270 data stream programming and C language           */
/*            programming. And so its future is undetermined.       */
/*                                                                  */
/* History:   25Aug95  Initial coding                           DAF */
/*            25Aug95  Added message level parm                 DAF */
/* End.                                                             */
/*==================================================================*/

CONTROL NOCAPS

/* initialize the WIN3270 environment */
IF &STR(&DEB) = DEB THEN +
  DO
    ALLOC FI(DBGLIB) DA(A.DBGLIB) SHR
    CALL 'SASDDF.A.LOADLIB(WIN3270)' '-ML 9 =DEBUG'
  END
ELSE +
  CALL 'SASDDF.A.LOADLIB(WIN3270)'
/* WH */         /* information only - prints the help text */
/* WM 10 */      /* debug subcommand - prints term stat information */

/* The following WIN3270 feedback variables are set after the */
/* WIN3270 sub command environment has been established:      */
/*   WINSYSDC = Display colors list.                          */
/*   WINSYSNR = Number of display lines (rows).               */
/*   WINSYSNC = Number of display columns.                    */
/*   WINSYSAP = APL support either Y or N.                    */
/*   WINSYSGR = Vector graphic support either Y or N.         */
/*   WINSYSPS = Programmed symbols either Y or N.             */
/*   WINSYSDH = Display hilights list.                        */
/* These variables should not be altered as their content is  */
/* not refreshed after the sub command environment has been   */
/* started.                                                   */
/*                                                            */
/* WIN3270 subcommands and operands:                          */
/*   WA - set field attributes used by all windows.           */
/*     value=   Single character used to define field start.  */
/*              Value is required.                            */
/*     type=    Type of the widget. Default type is LABEL.    */
/*              Type can be one of:                           */
/*                LABEL, INPUT, OUTPUT, BUTTON, RADIO or      */
/*                CHECKBOX.                                   */
/*     color=   The color name used for the widget.           */
/*              Color can be one of:                          */
/*                RED, BLUE, GREEN, WHITE, PINK, YELLOW,      */
/*                CYAN, NONE, or BLACK.                       */
/*              The default is GREEN.                         */
/*     hilite=  The hilight to use for some widgets.          */
/*              Hilite can be one of:                         */
/*                NONE, REVERSE, ULINE, BLINK.                */
/*              The default is NONE.                          */
/*              Not all widget types support hilites.         */
/*     symbol=  Symbol set to use. Can be one of:             */
/*                NONE, APL.                                  */
/*              The default is NONE.                          */
/*              Not all widget types support APL.             */
/*     just=    The justification to use. Can be either of:   */
/*                NONE, LEFT, CENTER, RIGHT.                  */
/*              The default is NONE.                          */
/*              Not all widget types support justification.   */
/*                                                            */
/*   WE - erase named window.                                 */
/*     name=    The name of the window to erase. This is      */
/*              required. If name= is not specified LASTCC    */
/*              will be set to 4 and a window will not be     */
/*              deleted. If name already exists and is        */
/*              deleted LASTCC will be 0 and if the window    */
/*              was the currently active window there will    */
/*              no longer be a currently active window.       */
/*                                                            */
/*   WC - create named window.                                */
/*     name=    The name of the window to create. This is     */
/*              required. If name= is not specified LASTCC    */
/*              will be set to 4 and a window will not be     */
/*              created. If name already exists LASTCC will   */
/*              be set to 8, and the currently active window  */
/*              will not be changed, and no new window will   */
/*              be defined.                                   */
/*              WC must be followed by at least one WS        */
/*              sub command.                                  */
/*                                                            */
/*   WS - define row on currently named window.               */
/*     nn       NN defines the row to define. Characters      */
/*              following the single blank following NN are   */
/*              assumed to be part of the window for row NN   */
/*              of the window named by the last WC sub        */
/*              command.                                      */
/*              This parameter is required.                   */
/*              If nn is larger than the screen will allow    */
/*              the LASTCC will be set to 4 and the row       */
/*              will not be defined.                          */
/*              If nn is not a valid integer greater          */
/*              than 0 LASTCC will be set to 8 and            */
/*              the row will not be defined.                  */
/*              If nn has already been defined then LASTCC    */
/*              will be set to 12 and the row will not be     */
/*              defined.                                      */
/*              WS must be preceeded by one WC sub command.   */
/*                                                            */
/*   WD - display the named window.                           */
/*     name=    Name of an existing window to display.        */
/*              If the window named by name= does not exist   */
/*              the LASTCC will be set to 4 and the window    */
/*              will not be displayed. This parameter is      */
/*              required.                                     */
/*     row=nn   Row position of top left window corner.       */
/*              The default for nn is 1. If row= is not a     */
/*              valid number LASTCC is set to 8.              */
/*              If the number is too large for the window     */
/*              to the LASTCC is set to 12 and the window     */
/*              is not displayed.                             */
/*     col=nn   Column position of top left window corner.    */
/*              The default for nn is 1. If col= is not a     */
/*              valid number LASTCC is set to 8.              */
/*              If the number is too large for the window     */
/*              to the LASTCC is set to 12 and the window     */
/*              is not displayed.                             */
/*     input=Y  Flag indicating if input will be accepted     */
/*              from the window. The default is "Y", meaning  */
/*              input will be accepted. Alternatively "N"     */
/*              can be specified, meaning that the user will  */
/*              only see the window for the delay time (see   */
/*              below). If "N" is specified delay= should be  */
/*              set greater than 0, else the display may not  */
/*              be perceptable.                               */
/*     delay=0  The time that the window is displayed for     */
/*              before the user can enter input if input=Y    */
/*              is specified. Or, the time the window is      */
/*              displayed for before control is returned to   */
/*              the clist if input=N is specified.            */
/*              The time is specified as an integer number    */
/*              of seconds. The default os 0 seconds.         */
/*                                                            */
/*     The following feedback variables are set after the WD  */
/*     sub command has executed with a LASTCC of 0. If the    */
/*     LASTCC is not 0 these variables will remain unchanged. */
/*       WINSYSR = The current cursor row.                    */
/*       WINSYSC = The current cursor column.                 */
/*       WINSYSK = The name of the last key pressed.          */
/*         May be one of:                                     */
/*           ENTER, PF1, ... PF24, PA2, PA3                   */
/*           OPID, MAGRDR, SELPEN.                            */
/*         The following keys will not be returned:           */
/*           ATTN, PA1 - TSO causes an attention interupt     */
/*                       that the clist can handle itself.    */
/*           CLEAR, SYSREQ, TESTREQ - Not supported by read   */
/*                       modified request to the device.      */
/*       WINSYSV = The name of the selected variable          */
/*         or blank if no variable is selected.               */
/*       WINSYST = The word of text that is selected          */
/*         or blank if no test is selected.                   */
/*                                                            */
/*   WX - exit the WIN3270 subcommand environment.            */
/*              WX has no parameters.                         */
/*              This subcommand will free any resources,      */
/*              clear the screen, and exit from the WIN3270   */
/*              sub command environment.                      */
/*                                                            */
/*   WXDEB - The debug level setting sub command..            */
/*     nn       The debug level number is an integer value    */
/*              that determines how much debug info to        */
/*              display. 0 indicates debug is off.            */
/*              1 through 9 indicate a level, 1 being terse   */
/*              9 being verbose.                              */
/*              numbers above 9 mean display specific info.   */

/* subcommands to set up the attribute values to use */

WA value=\ type=label color=white hilite=none
WA value={ type=label color=yellow hilite=none
  /* type=label is used for a protected text label field. The */
  /* value= character is replaced by an attribute character.  */
  /* The text for the field will follow the value= char.      */

WA value=% type=output color=red hilite=none
WA value=! type=output color=blue hilite=none
  /* type=output is used for a protected text field. The      */
  /* value= character is replaced by an attribute character.  */
  /* The name of the CLIST variable will follow the value=    */
  /* character. The variable contents will be displayed in the*/
  /* field after the window has been displayed.               */

WA value=$ type=input color=green hilite=uline
  /* type=input is used for an unprotected input field. The   */
  /* value= character is replaced by an attribute character.  */
  /* The name of the CLIST variable will follow the value=    */
  /* character. The variable contents will be displayed in the*/
  /* field as the window is displayed, and the variable will  */
  /* receive the contents of the field after the window has   */
  /* been displayed.                                          */

WA value=_ type=button color=cyan just=center
  /* type=button is used for an unprotected input field, that */
  /* has a button border to it.                               */
  /* The name of the CLIST variable will follow the value=    */
  /* character. The variable will be set to X if the cursor   */
  /* is on the field when the window has been displayed.      */
  /* Otherwise the variable will be set to blank.             */

WA value=@ type=radio color=cyan just=left
  /* type=radio is used for an unprotected input field, that  */
  /* has small button indicator on the left of it.            */
  /* The name of the CLIST variable will follow the value=    */
  /* character of the first radio button field.               */
  /* The variable name is the first word of the text and      */
  /* is not displayed. (see below)                            */
  /* The variable will contain the second word if this station*/
  /* is the selected radio box station.                       */
  /* Otherwise the variable will be set to blank.             */
  /* The x and o in the following diagram will be replaced    */
  /* with PS symbols on devices that support these, otherwise */
  /* the O and star(*) characters will be used.               */
  /*                                                          */
  /*   This:                                                  */
  /*   WS 02   @A1 Red apples                                 */
  /*   WS 03   @A1 Green apples                               */
  /*   WS 04   @A1 Yellow apples                              */
  /*   WS 05                                                  */
  /*   WS 06   @A2 Orange oranges                             */
  /*   WS 07   @A2 Blue oranges - yuck                        */
  /*                                                          */
  /*   Will generate:                                         */
  /*           .O.Red apples                                  */
  /*           .*.Green apples                                */
  /*           .O.Yellow apples                               */
  /*                                                          */
  /*           .O.Orange oranges                              */
  /*           .*.Blue oranges - yuck                         */
  /*                                                          */
  /* Here variable names are A1 and A2. The variable          */
  /* A1 will contain "Green" and the variable A2              */
  /* will contain "Blue". You will note that the first 3      */
  /* and the last two fields are respectively linked to       */
  /* their own variables, whose name is the                   */
  /* first word in the field definition. Only one of the      */
  /* linked fields can be on (displaying a *), if the         */
  /* variable is set to an invalid value then the value will  */
  /* be replaced by the name of the first field.              */

WA value=# type=checkbox color=cyan just=left
  /* type=checkbox is used for an unprotected input field,    */
  /* that has a small box indicator on the left of it.        */
  /* The name of the CLIST variable will follow the value=    */
  /* character.                                               */
  /* The variable name and displayed text are the             */
  /* same until the first blank character. (see below)        */
  /* The variable will be set to contain "X" if the cursor    */
  /* is on the field when the window has been displayed.      */
  /* Otherwise the variable will be set to blank.             */
  /* The X and _ in the following diagram will be replaced    */
  /* with PS symbols on devices that support these, otherwise */
  /* the X and underscore(_) characters will be used.         */
  /*                                                          */
  /*   This:                                                  */
  /*   WS 02   #Bird feathers                                 */
  /*   WS 03   #Dog hair                                      */
  /*   WS 04   #Cat fur                                       */
  /*   WS 05   #Fish scales                                   */
  /*                                                          */
  /*   Will generate:                                         */
  /*           .X.Bird feathers                               */
  /*           ._.Dog hair                                    */
  /*           .X.Cat fur                                     */
  /*           ._.Fish scales                                 */
  /*                                                          */
  /* Here variable names are BIRD, DOG, CAT and FISH. Variable*/
  /* BIRD will contain "X", variable DOG will contain blank,  */
  /* variable CAT will contain "X", and variable FISH will    */
  /* contain blank.                                           */

/* subcommand to erase the screen */
WE name=main
/* subcommand to create the screen, defines the current window */
WC name=main

/* define all the variables in the window(s) */
SET ZCMD = &STR()
SET MSG = &STR(Initial message)
SET OT = &STR(Red)
SET BLUE = &STR()
SET GREEN = &STR()
SET FRIED = &STR()
SET POACHED = &STR()
SET OVER = &STR()
SET GRILLED = &STR()
SET OK = &STR()
SET CANCEL = &STR()
SET HELP = &STR()

/* subcommands define the format of the screen */
/*=============================================*/
/* Warning  Do not use characters that the     */
/*          CLIST language processor likes to  */
/*          eat, to build windows, or use as   */
/*          attributes, etc. Such errors are   */
/*          hard to find.                      */
/*          Avoid plus,minus,ampersand,colon   */
/*=============================================*/
WS 01 \Miliways Menu                                             +
{User:!SYSUID
WS 02 \Command ===>$zcmd                                         +
{Time:!XTIME
WS 03 %msg
WS 04 \Todays menu is from Mars a small red planet in the Teran system.
WS 05 \
WS 06 \
WS 07 \   Pick one of these
WS 08 \        @OT Blue rats with a red dog sauce.
WS 09 \        @OT Red fish in a white wino sauce.
WS 10 \        @OT White cats stuffed with marsh mellow.
WS 11 \
WS 12 \   Pick many of these strange things
WS 13 \        #Blue birds.                   #Green eggs and ham.
WS 14 \        #Fried green potatoes.         #Poached turkey.
WS 15 \        #Over fried beans.             #Grilled pumpkin.
WS 16 \
WS 17 \             _OK  \      _Cancel  \     _Help  \.

/* WM 11       dump field list */

/* subcommand to erase the screen */
WE name=help
/* subcommand to create the screen */
WC name=help
/* subcommands define the format of the screen */
WS 01 \Miliways Help
WS 02 \Command ===>$zcmd
WS 03 %msg
WS 04 \
WS 05 \            Sorry mate there is no help for the menu. You
WS 06 \            just have to take pot luck with this stuff.
WS 07 \            There is no free lunch to be found here.
WS 08 \
WS 09 \
WS 10 \                               _OK  \.
WS 11 \

  DO WHILE(&SYSCAPS(&STR(&ZCMD))^=&STR(END))
    /* subcommand to display the defined screen */
    SET XTIME = &SYSTIME
    SET ZCMD = &STR( )
    WD name=main row=1 col=1

    /* process the selection */
    IF &CANCEL = X THEN GOTO FIN
    ELSE IF &HELP = X THEN +
      DO
        SET ZCMD = &STR()
        WD name=help row=1 col=1
        SET WINSYSK = &STR()
        SET OK = &STR()
        SET ZCMD = &STR()
      END
    ELSE IF &OK = X THEN +
      DO
        IF &OT = Red THEN +
          SET MSG = &STR(You ordered: Red fish in a white wino sauce.)
        ELSE IF &OT = Blue THEN +
          SET MSG = &STR(You ordered: Blue rats with a red dog sauce.)
        ELSE IF &OT = White THEN +
          SET MSG = &STR(You ordered: White cats stuffed with marsh ...)
      /* ... and other truely strange tastes ! */
      END

    IF &STR(&ZCMD) = HELP THEN +
      DO
        SET ZCMD = &STR()
        WD name=help row=1 col=1 delay=8
        SET WINSYSK = &STR()
        SET ZCMD = &STR()
        SET OK = &STR() /* turn button off to indicate it is processed*/
      END

    IF &STR(&WINSYSK) = PF3 THEN +
      SET ZCMD = &STR(END)
    IF &STR(&WINSYSK) = PF15 THEN +
      SET ZCMD = &STR(END)
  END

  /* subcommand to erase the screen */
FIN:  +
  WE name=help
  WE name=main
  /* subcommand end WIN3270 */
  WX

EXIT
