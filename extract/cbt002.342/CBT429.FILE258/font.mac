#pragma eject
#pragma title font.c - program to create a 3270 program symbol set

/*+-----------------------------------------------------------------+
  × Program:   font.c                                               ×
  × Language:  c                                                    ×
  × Support:   DAF                                                  ×
  × Purpose:   Convert a fontlayout file into a C language structure×
  ×            that is the bit image format for the type 1 3270     ×
  ×            program symbol set.                                  ×
  × Files:     DDNAME=IN  Input font definition.                    ×
  ×              Font layout file format:                           ×
  ×                Column one is a record identifier where dot(.)   ×
  ×                indicates a comment at plus(+) indicates the hex ×
  ×                character code for the following bit map, and a  ×
  ×                colon(:) indicates a character cell pattern.     ×
  ×                Character cells are all 9 by 16, so 16 colon     ×
  ×                lines are required for each character. The       ×
  ×                format of colon and plus lines is fixed.         ×
  ×                                                                 ×
  ×                1. A comment line can only appear any where.     ×
  ×                                                                 ×
  ×                2. A plus line must be followed with 2           ×
  ×                   characters that are the hex representation of ×
  ×                   a character that the symbol defined after it  ×
  ×                   wil use. The range allowed is 0x41 to 0xFE    ×
  ×                   inclusive.                                    ×
  ×                                                                 ×
  ×                3. A colon line has the following format:        ×
  ×                     : . . . . . . . . .                         ×
  ×                   This indicates 9 pel positions accross the    ×
  ×                   character, here all are turned off. An X is   ×
  ×                   used to indicate that the pel is turned on.   ×
  ×                   for example:                                  ×
  ×                     : x x x x . . . . .                         ×
  ×                                                                 ×
  ×                   Here the first four pels atr turned on, and   ×
  ×                   the last five are off. there must be one, and ×
  ×                   only one blank character between each pel     ×
  ×                   indicator, and also one blank following the   ×
  ×                   colon.                                        ×
  ×                                                                 ×
  ×                4. Characters that are not specified             ×
  ×                   are stored as if all pels were off.           ×
  ×                                                                 ×
  ×                The letter "A" would be sent to                  ×
  ×                the PS device as a type 1 symbol                 ×
  ×                with the bit string:                             ×
  ×                  x'00000000102844828282fe82828282000000'        ×
  ×                                                                 ×
  ×                The following shows how the letter "A" would be  ×
  ×                defined:                                         ×
  ×                  +C1                                            ×
  ×                  : . . . . . . . . .                            ×
  ×                  : . . . . . . . . .                            ×
  ×                  : . . . . X . . . .                            ×
  ×                  : . . . X . X . . .                            ×
  ×                  : . . X . . . X . .                            ×
  ×                  : . X . . . . . X .                            ×
  ×                  : . X . . . . . X .                            ×
  ×                  : . X . . . . . X .                            ×
  ×                  : . X X X X X X X .                            ×
  ×                  : . X . . . . . X .                            ×
  ×                  : . X . . . . . X .                            ×
  ×                  : . X . . . . . X .                            ×
  ×                  : . X . . . . . X .                            ×
  ×                  : . . . . . . . . .                            ×
  ×                  : . . . . . . . . .                            ×
  ×                  : . . . . . . . . .                            ×
  ×                                                                 ×
  ×                                                                 ×
  ×            DDNAME=OUT Output C language program symbol          ×
  ×                   definition as a two dimensional character     ×
  ×                   array.                                        ×
  × Notes:     None.                                                ×
  × End.                                                            ×
  +-----------------------------------------------------------------+*/

#include <stdio.h>
#include <ctype.h>
#include <stdlib.h>

void main(int argc, char **argv, char **envp)
  {
    long s ;
    int reclen = 82 ;       /* record length of input plus 2 */
    int i, j ;              /* counters */
    int exists ;            /* test flag for testing if char defined */
    int cno = 0 ;           /* current character(symbol) number */
    int row = 0 ;           /* current colon(:) row after plus(+) */
    int rec = 0 ;           /* current record number being processed */
    int error = 0 ;         /* error flag for colon record */
    char *a ;               /* string pointer */
    char aname[9] ;         /* input file buffer */
    char str[82] ;          /* input file buffer */
    char symset[256][18] ;  /* symbol set definition array */
    char *stopchar ;        /* hex string to long stop character */
    FILE *in, *out ;        /* files */

    printf("Font to 3270 Program Symbol conversion program, Ver 2\n") ;

    /* decode parameter = name of the output array */
    if (argc!=2)
      {
        printf("Invalid number of parameters.\n") ;
        exit(1) ;
      }

    i = strlen(argv[1]) ;
    if ((i > 0) && (i <= 8))
      {
        strcpy(aname,argv[1]) ;
        a = aname ;
        while(*a)
          {
            *a = tolower(*a) ;
            a++ ;
          }
      }
    else
      strcpy(aname,"symset") ;
    printf("Output array name is: %s\n",aname) ;

    /* process the input file into the symset array */
    in = fopen("IN","r") ;
    if (in)
      {
        fgets(str,reclen,in) ;
        rec++ ;
        while (!feof(in))
          {
            if (str[0]=='+' ×× str[0]==':')  /* valid + or : line */
              {
                if (str[0]=='+')    /* valid + line */
                  {
                    if (! ((row==16) ×× (row==0)))
                      {
                        printf("Error before line %d \n",rec) ;
                        printf("Symbol 0x%.2X has invalid size.\n",
                          cno);
                      }
                    s = strtol(str+1,&stopchar,16) ;
                    if ((s>=65) && (s<=254))
                      {
                        cno = s ;
                        exists = 0 ;
                        for (i=0;i<18;i++)
                          if (symset[cno][i] != 0x00) exists = 1 ;
                        if (exists)
                          {
                            printf("Warning at line %d \n",rec) ;
                            printf("Symbol 0x%.2X being re-defined.\n",
                              cno);
                          }
                      }
                    else cno = 0 ;
                    row = 0 ;
                  }
                else if ((str[0]==':') && (cno!=0))  /* valid : line */
                  {
                    row++ ;
                    if (row<=16)
                      {
                        error = 0 ;
                        if (str[2]=='X')
                          {
                            if (row==1)
                              symset[cno][0] = symset[cno][0] × 0x80 ;
                            else if (row==2)
                              symset[cno][0] = symset[cno][0] × 0x40 ;
                            else if (row==3)
                              symset[cno][0] = symset[cno][0] × 0x20 ;
                            else if (row==4)
                              symset[cno][0] = symset[cno][0] × 0x10 ;
                            else if (row==5)
                              symset[cno][0] = symset[cno][0] × 0x08 ;
                            else if (row==6)
                              symset[cno][0] = symset[cno][0] × 0x04 ;
                            else if (row==7)
                              symset[cno][0] = symset[cno][0] × 0x02 ;
                            else if (row==8)
                              symset[cno][0] = symset[cno][0] × 0x01 ;
                            else if (row==9)
                              symset[cno][1] = symset[cno][1] × 0x80 ;
                            else if (row==10)
                              symset[cno][1] = symset[cno][1] × 0x40 ;
                            else if (row==11)
                              symset[cno][1] = symset[cno][1] × 0x20 ;
                            else if (row==12)
                              symset[cno][1] = symset[cno][1] × 0x10 ;
                            else if (row==13)
                              symset[cno][1] = symset[cno][1] × 0x08 ;
                            else if (row==14)
                              symset[cno][1] = symset[cno][1] × 0x04 ;
                            else if (row==15)
                              symset[cno][1] = symset[cno][1] × 0x02 ;
                            else if (row==16)
                              symset[cno][1] = symset[cno][1] × 0x01 ;
                          }
                        else if (str[2]=='.') ;
                        else error = 1 ;

                        if (str[4]=='X')
                          symset[cno][row+1] = symset[cno][row+1] ×0x80;
                        else if (str[4]=='.') ;
                        else error = 1 ;

                        if (str[6]=='X')
                          symset[cno][row+1] = symset[cno][row+1] ×0x40;
                        else if (str[6]=='.') ;
                        else error = 1 ;

                        if (str[8]=='X')
                          symset[cno][row+1] = symset[cno][row+1] ×0x20;
                        else if (str[8]=='.') ;
                        else error = 1 ;

                        if (str[10]=='X')
                          symset[cno][row+1] = symset[cno][row+1] ×0x10;
                        else if (str[10]=='.') ;
                        else error = 1 ;

                        if (str[12]=='X')
                          symset[cno][row+1] = symset[cno][row+1] ×0x08;
                        else if (str[12]=='.') ;
                        else error = 1 ;

                        if (str[14]=='X')
                          symset[cno][row+1] = symset[cno][row+1] ×0x04;
                        else if (str[14]=='.') ;
                        else error = 1 ;

                        if (str[16]=='X')
                          symset[cno][row+1] = symset[cno][row+1] ×0x02;
                        else if (str[16]=='.') ;
                        else error = 1 ;

                        if (str[18]=='X')
                          symset[cno][row+1] = symset[cno][row+1] ×0x01;
                        else if (str[18]=='.') ;
                        else error = 1 ;

                        if (error)
                          printf("Format error in line %d, %s",rec,str);
                     }
                  }  /* of valid : line */
                else
                  printf("No valid char# for line %d, %s",rec,str) ;
              }  /* of valid + or : line */
            fgets(str,reclen,in) ;
            rec++ ;
          }  /* of while */
        fclose(in) ;

        /* spit out the C language structure */
        out = fopen("OUT","w") ;
        if (out)
          {
            sprintf(str,"#pragma eject \n") ;
            fputs(str,out) ;
            sprintf(str,"/* 3270 Program Symbol Definition array */\n");
            fputs(str,out) ;
            sprintf(str,"char %s[256][18] = { \n",aname) ;
            fputs(str,out) ;
            for (i=0;i<256;i++)
              {
                exists = 0 ;
                for (j=0;j<18;j++)
                  {
                    if (symset[i][j] != 0x00)
                      exists = 1 ;
                  }
                if ((i==64) ××
                    ((i>=74) && (i<=80)) ××
                    ((i>=90) && (i<=97)) ××
                    ((i>=106) && (i<=111)) ××
                    ((i>=122) && (i<=127)) ××
                    ((i>=129) && (i<=137)) ××
                    ((i>=145) && (i<=153)) ××
                    ((i>=161) && (i<=169)) ××
                    ((i>=193) && (i<=201)) ××
                    ((i>=209) && (i<=217)) ××
                    ((i>=226) && (i<=233)) ××
                    ((i>=240) && (i<=249))
                   )
                  {
                    if (exists)
                      sprintf(str,"  /* Symbol %c='%.2X'x defined */",
                        (char)i,(char)i) ;
                    else
                      sprintf(str,"  /* No symbol '%.2X'x defined */",
                         (char)i) ;
                  }
                else
                  {
                    if (exists)
                      sprintf(str,"  /* Symbol '%.2X'x defined */",
                        (char)i) ;
                    else
                      sprintf(str,"  /* No symbol '%.2X'x defined */",
                        (char)i) ;
                  }
                fputs(str,out) ;
                for (j=0;j<18;j++)
                  {
                    if ((j%10) == 0)  /* insert new line after 10 */
                      {
                        sprintf(str,"\n    ") ;
                        fputs(str,out) ;
                      }
                    if ((i==255) && (j==17))  /* last one - no comma */
                      sprintf(str,"0x%.2x",symset[i][j]) ;
                    else
                      sprintf(str,"0x%.2x,",symset[i][j]) ;
                    fputs(str,out) ;
                  }
                sprintf(str,"\n") ;
                fputs(str,out) ;
              }
            sprintf(str,"  } ; \n") ;
            fputs(str,out) ;
            fclose(out) ;
          }
        else
          printf("Error: Failed to open output file.\n") ;
      }
    else
      printf("Error: Failed to open input file.\n") ;
    printf("Font program ended.\n") ;
  }
