WPC     TITLE 'DISPLAY WHAT PROFILE COVERS A DATASET'
*---------------------------------------------------------------------*
*
*  PROGRAM     WPC
*
*  ABSTRACT    THE WPC COMMAND WILL DISPLAY THE NAME OF THE PROFILE
*              THAT 'COVERS' THE DATASET GIVEN ON THE COMMAND. THIS
*              IS DONE USING AN UNDOCUMENTED FUNCTION OF RACHECK.
*
*  INPUTS:
*      PARAMETERS  R1 -> STANDARD CPPL REPRESENTING COMMAND:
*                           "WPC FILE.NAME"
*      FILES       NONE
*      OTHER       NONE
*
*  OUTPUTS:
*      MESSAGES    "ENTITY(....) IS PROTECTED BY PROFILE(....)"
*                  VARIOUS ERROR MSGS IF THINGS GO WRONG
*      FILES       NONE
*      OTHER       NONE
*
*  PROGRAM     REENTRANT, PROBLEM KEY AND STATE EXCEPT AS REQUIRED,
*  ATTRIBUTES  STD. LINKAGE, APF-AUTHORIZED, AMODE(24), RMODE(24)
*
*  SPECIAL
*  NOTES       WPC MUST BE AUTHORIZED. INCLUDE ITS NAME IN TMP TABLE
*              IKJEFTE2 IF IT IS TO BE USED AS A STD. TSO COMMAND.
*
*              BECAUSE WPC USES TAGS > 8 CHARACTERS, ASSEMBLER H IS
*              REQUIRED TO ASSEMBLE IT AS PROVIDED.  CHANGE THE TAG
*              NAMES TO <= 8 CHARACTERS IF YOU MUST USE ASSEMBLER F.
*
*              ASSEMBLY OF WPC REQUIRES SYS1.AMODGEN.
*
*  CHANGE
*  HISTORY     10/23/86 JCB - NEW
*              01/19/89 JCB - CONVERTED AWAY FROM CLEMSON STRUCTURED
*                             MACROS TO ALLOW DIST. ON RACF MODS TAPE
*              __/__/__ ___
*
*  METHOD OF   PARSE COMMAND FOR DATASET NAME
*  OPERATION   GET DATASET'S VOLSER FROM CATALOG
*              ISSUE RACHECK FOR ALTER WITH MAGIC OPTION
*              TELL USER WHAT WE FOUND
*
*
*---------------------------------------------------------------------*
         EJECT                        ×
         MACRO                        ×
&TAG     MESSAGE  &MSGID,&PRINT='NO'  ×
         AIF   ('&TAG' EQ '').NOTAG   ×
&TAG     DS    0H                     ×
.NOTAG   ANOP                         ×
         AIF   ('&PRINT' EQ 'YES').GO ×
         PRINT NOGEN                  ×
.GO      ANOP                         ×
         SPACE 1                      ×
         LA    R1,&MSGID              × POINT TO MESSAGE TO ISSUE
         LA    R15,PWAPUTL            × FIND OUR PTPB
         USING PTPB,R15               ×
         ST    R1,PTPBOPUT            ×  AND POINT IT AT THE MESSAGE.
         DROP  R15                    ×
         LA    R1,PWAIOPL             × POINT R1 AT IOPL
         LA    R15,PWAPUTL            ×
         ST    R15,IOPLIOPB-IOPL(,R1) ×
         L     R15,PWAAPUTL         GET ADDRESS OF PUTLINE
         PUTLINE  MF=(E,(1)),ENTRY=(15)   AND ISSUE THE MESSAGE.
         SPACE 1                      ×
         AIF   ('&PRINT' EQ 'YES').QUIT
         PRINT GEN                    ×
.QUIT    ANOP                         ×
         MEND                         ×
         EJECT                        ×
*BLOCK NAME=WPC,TYPE=PROGRAM,OPTIONS=*PWA,R1SAVE=R7
WPC      CSECT ,                      ×
         STM   R14,R12,12(R13)        ×
         LR    R12,R15                ×
         USING WPC,R12                ×
         LR    R7,R1                  ×
         GETMAIN R,LV=PWAPLLEN        ×
         ST    R13,4(R1)              ×
         ST    R1,8(R13)              ×
         LR    R13,R1                 ×
         USING PWA,R13                ×
R0       EQU   0                      ×
R1       EQU   1                      ×
R2       EQU   2                      ×
R3       EQU   3                      ×
R4       EQU   4                      ×
R5       EQU   5                      ×
R6       EQU   6                      ×
R7       EQU   7                      ×
R8       EQU   8                      ×
R9       EQU   9                      ×
R10      EQU   10                     ×
R11      EQU   11                     ×
R12      EQU   12                     ×
R13      EQU   13                     ×
R14      EQU   14                     ×
R15      EQU   15                     ×
  SPACE 1                             ×
  USING CPPL,R7                       ×
*---------------------------------------------------------------------*
*     SET UP TO ISSUE PUTLINES
*---------------------------------------------------------------------*
  MVC   PWAPUTL(12),STCPUTL           ×   SET WORKING PTPB TO MF=L COPY
  LA    R1,PWAIOPL                    ×   BUILD THE IOPL FOR MESSAGES
  USING IOPL,R1                       ×
  MVC   IOPLUPT,CPPLUPT               ×   COPY UPT ADDRESS INTO IOPL
  MVC   IOPLECT,CPPLECT               ×   COPY ECT ADDRESS INTO IOPL
  LA    R2,PWACPECB                   ×   COPY ECB ADDRESS
  ST    R2,IOPLECB                    ×    INTO IOPL
  DROP  R1                            ×
         SPACE 1                      ×
*---------------------------------------------------------------------*
*     SET UP TO CALL IKJPARS
*---------------------------------------------------------------------*
  LA    R2,PWAPPL                     ×
  USING PPL,R2                        ×
  MVC   PPLUPT,CPPLUPT                ×   COPY UPT POINTER
  MVC   PPLECT,CPPLECT                ×   COPY ECT POINTER
  MVC   PPLCBUF,CPPLCBUF              ×   COPY COMMAND BUFFER POINTER
  LA    R1,PWACPECB                   ×   SET ECB POINTER
  ST    R1,PPLECB                     ×
  LA    R1,PWAPDLP                    ×   SET ANSWER-AREA POINTER
  ST    R1,PPLANS                     ×
  MVC   PPLPCL,=V(PARSBASE)           ×   SET UP PARSE CONTROL LIST PTR
  DROP  R2                            ×
*---------------------------------------------------------------------*
*    PULL ADDRESSES OF PUTLINE, IKJPARS; CALL IKJPARS
*---------------------------------------------------------------------*
  L     R1,CVTPTR                     ×
  USING CVT,R1                        ×
  MVC   PWAAPUTL,CVTPUTL              ×   SAVE ADDRESS OF PUTLINE AND
  MVC   PWAAPARS,CVTPARS              ×    IKJPARS SERVICE ROUTINES
  DROP  R1                            ×
        SPACE 1                       ×
  LA    R1,PWAPPL                     ×
  L     R15,PWAAPARS                  ×
  BALR  R14,R15                       ×   CALL IKJPARS
* ERREXIT      NAME=IKJPARS_ERROR,    ×   ERREXIT IF PARS HAD TROUBLE
*              (TREG,R15,NZ)          ×
        LTR   R15,R15                 ×
        BNZ   IKJPARS_ERROR           ×
* *-------------------------------------------------------------------*
* * LOOK AT RESULTS FROM IKJPARS; CONSTRUCT DSNAME TO DO RACHECK FOR
* *-------------------------------------------------------------------*
  L     R9,PWAPPL+(PPLANS-PPL)        × POINT TO PARS ANSWER AREA ...
  L     R9,0(R9)                      ×
  USING IKJPARMD,R9                   × ... AND BASE ON IT
* FILL  PWADSN,C' '                   ×
        MVI   PWADSN,C' '             ×
        MVC   PWADSN+1(L'PWADSN-1),PWADSN
  L     R1,PDEDSN                     × POINT TO PARSED DSNAME
  BCTR  R1,0                          × BACK UP ONE CHAR
* IF    (CLI,0(R1),NE,C'''')          × IF DSNAME DOESN'T START W/QUOTE
          CLI   0(R1),C''''           ×
          BE    ELSE_1                ×
   L     R2,CPPLUPT                   ×  BUILD DSNAME IN PWA BY
   USING UPT,R2                       ×   PREFIXING W/UPT PREFIX.
   MVC   PWADSN+1(L'UPTPREFX),UPTPREFX    A LENGTH BYTE GOES IN
*  L8    R3,UPTPREFL                  ×   FRONT OF DSNAME, TOO.
          XR    R3,R3                 ×
          ICM   R3,B'0001',UPTPREFL   ×
   LA    R15,PWADSN+1(R3)             ×
   MVI   0(R15),C'.'                  ×
   LH    R14,PDEDSN+4                 ×
   LA    R3,1(R3,R14)                 ×
   STC   R3,PWADSN                    ×
   BCTR  R14,0                        ×
*  EXI   R14,(MVC,1(0,R15),1(R1))     ×
         EX    R14,EXMVC1             ×
   DROP  R2                           ×
* ELSE                                × OTHERWISE
         B     ENDIF_1                ×
ELSE_1   DS    0H                     ×
   LH    R15,PDEDSN+4                 ×   MOVE STRAIGHT DSNAME. PUT
   STC   R15,PWADSN                   ×   LENGTH BYTE ON FRONT, TOO
   BCTR  R15,0                        ×
*  EXI   R15,(MVC,PWADSN+1(0),1(R1))  ×
          EX    R15,EXMVC2            ×
* ENDIF                               ×
ENDIF_1   DS    0H                    ×
* *-------------------------------------------------------------------*
* *  SEE IF DATASET IS CATALOGUED, AND WHAT VOLUME IT'S ON.  NOTE THAT
* *  WPC DOES NOT SUPPORT UNCATALOGUED DATASETS.
* *-------------------------------------------------------------------*
  MVC   PWACML(LENCML),STCCML         × COPY LOCATE PARMS
  LA    R1,PWADSN+1                   ×
  ST    R1,CMLDSNAM                   × SET A(DSNAME) FOR LOCATE
  LA    R1,PWACAMWA                   ×
  ST    R1,CMLWORK                    × SET A(WORKAREA) FOR LOCATE
  XC    CMLCVOL,CMLCVOL               × NO CVOL.
  LOCATE PWACML                       × SEE IF CATLG'D TO GET VOLUME
* IF    (TREG,R15,NZ)                 × LOCATE RC NONZERO?
         LTR   R15,R15                ×
         BZ    ENDIF_2                ×
   MESSAGE STCNCATM                   ×  ASSUME IT'S UNCATALOGUED
*  LEAVE BLOCK=WPC                    ×   AND EXIT WPC COMMAND.
         B     ENDWPC0                ×
* ENDIF                               ×
ENDIF_2  DS    0H                     ×
         SPACE 1                      ×
* *-------------------------------------------------------------------*
* *  RACHECK THE DATASET NAME PROVIDED WITH THE MAGIC OPTION.
* *-------------------------------------------------------------------*
  MVC   PWARCHK(LENRCHK),STCRCHK      × RACHECK PARMS -> PWA
  LA    R1,PWARCHK                    × BASE ON RACHECK PARMS
  USING ACHKLIST,R1                   ×
* SBIT  ACHKFLG3,ACHKPRI              × <<< SET THE BIT >>>
          OI    ACHKFLG3,ACHKPRI      ×
  DROP  R1                            ×
  MODESET KEY=ZERO                    × MAGIC PARM REQUIRES KEY ZERO
  LA    R3,PWACAMWA+6                 × GET POINTER TO VOLSER
  RACHECK ENTITY=(PWADSN+1),          × ISSUE RACHECK                  *
               VOLSER=(R3),           ×                                *
               MF=(E,PWARCHK)         ×
* ERREXIT NAME=RACHECK_ERROR,(TREG,R15,NZ)  ERREXIT IF RACHECK RC NZ
         LTR   R15,R15                ×
         BNZ   RACHECK_ERROR          ×
* *-------------------------------------------------------------------*
* *  BUILD AND ISSUE RESULTS MESSAGE
* *-------------------------------------------------------------------*
  MVC   PWAGEN+1(L'PWAGEN-1),4(R1)    ×   R1 POINTS TO RETURN AREA:
*                                         PROFILE NAME IS AT +4
  MODESET KEY=NZERO                   ×   GET NORMAL AGAIN
  LA    R1,PWAGEN+1                   ×   SEE HOW LONG PROFILE NAME IS
* LOOP  WHILE,(CLI,0(R1),NE,C' ')     ×    BY SCANNONG FOR A BLANK
LOOP1    DS    0H                     ×
         CLI   0(R1),C' '             ×
         BE    ENDLOOP1               ×
   LA    R1,1(R1)                     ×
* ENDLOOP WHILE                       ×
         B     LOOP1                  ×
ENDLOOP1 DS    0H                     ×
  LA    R15,PWAGEN+1                  ×   GET START OF NAME
  SR    R1,R15                        ×   GET DIFFERENCE AND
  STC   R1,PWAGEN                     ×    SET LENGTH.
* FILL  PWAMSG,C' '                   ×   BUILD MESSAGE
          MVI   PWAMSG,C' '           ×
          MVC   PWAMSG+1(L'PWAMSG-1),PWAMSG
  XC    PWAMSG+2(2),PWAMSG+2          ×
  MVC   PWAMSG+4(L'STCRM1),STCRM1     × MESSAGE SEGMENT 1
* L8    R1,PWADSN                     × INCLUDE DATASET NAME
          XR    R1,R1                 ×
          ICM   R1,B'0001',PWADSN     ×
  BCTR  R1,0                          ×
* EXI   R1,(MVC,PWAMSG+4+L'STCRM1(0),PWADSN+1)
         EX    R1,EXMVC3              ×
  LA    R1,1+PWAMSG+4+L'STCRM1(R1)    × POINT PAST DSNAME
  MVC   0(L'STCRM2,R1),STCRM2         × MESSAGE SEGMENT 2
  LA    R1,L'STCRM2(R1)               × POINT PAST MSGSEG 2
* L8    R15,PWAGEN                    ×
         XR    R15,R15                ×
         ICM   R15,B'0001',PWAGEN     ×
  BCTR  R15,0                         ×
* EXI   R15,(MVC,0(0,R1),PWAGEN+1)    × INCLUDE PROFILE NAME
         EX    R15,EXMVC4             ×
  LA    R1,1(R1,R15)                  ×
  MVI   0(R1),C')'                    × APPEND CLOSING PAREN
  LA    R1,1(R1)                      × POINT TO END OF MESSAGE
  LA    R15,PWAMSG                    × POINT TO START
  SR    R1,R15                        × GET DIFFERENCE
  STH   R1,PWAMSG                     ×  AND SET LENGTH FOR PUTLINE.
*
  MESSAGE PWAMSG                      × SAY WHAT WE FOUND
         SPACE 1                      ×
* *-------------------------------------------------------------------*
* *  TERMINATE.
* *-------------------------------------------------------------------*
*ENDBLK BLOCK=WPC,RC=0                ×
ENDWPC0  DS    0H                     ×
         XR    R15,R15                ×
ENDWPC   DS    0H                     ×
         LR    R1,R13                 ×
         L     R13,4(,R13)            ×
         FREEMAIN R,A=(1),LV=PWAPLLEN ×
         L     R14,12(,R13)           ×
         LM    R0,R12,20(R13)         ×
         BR    R14                    ×
         SPACE ,                      ×
*BLOCK NAME=IKJPARS_ERROR,TYPE=ERREXIT
IKJPARS_ERROR DS    0H                ×
  MESSAGE STCPARSM                    × IKJPARS ERROR MESSAGE
*ENDBLK BLOCK=IKJPARS_ERROR,RC=12     ×
         LA    R15,12                 ×
         B     ENDWPC                 ×
         SPACE ,                      ×
*BLOCK NAME=RACHECK_ERROR,TYPE=ERREXIT
RACHECK_ERROR DS    0H                ×
  LR    R3,R15                        × SAVE RACHECK RETURNCODE
  MODESET KEY=NZERO                   × WE GOT CALLED IN KEY ZERO
  CH    R3,=H'4'                      ×
  BE    RE_NO_PROFILE                 ×
  MESSAGE STCRCKIA                    × RC=8+: INSUFFICIENT ACCESS
  B     RACHECK_ERROR_END             ×
RE_NO_PROFILE DS  0H                  ×
  MESSAGE STCRCKNP                    × RC=4: NO PROFILE
* DC    H'0'
*ENDBLK BLOCK=RACHECK_ERROR,RC=8      ×
RACHECK_ERROR_END DS 0H               ×
         LA    R15,8                  ×
         B     ENDWPC                 ×
         EJECT ,                      ×
EXMVC1   MVC    1(0,R15),1(R1)        ×
EXMVC2   MVC    PWADSN+1(0),1(R1)     ×
EXMVC3   MVC    PWAMSG+4+L'STCRM1(0),PWADSN+1
EXMVC4   MVC    0(0,R1),PWAGEN+1      ×
         SPACE  1                     ×
STCCML   CAMLST NAME,*,,*           CAMLST NAME FOR GETTING VOLSERS
LENCML   EQU   *-STCCML               ×
         SPACE 1                      ×
STCPARSM DC    AL2(L'STCPARST+4),AL2(0)
STCPARST DC    C'IKJPARS SERVICE ROUTINE ERROR'
         SPACE 1                      ×
STCRCKIA DC    AL2(L'STCRCKIT+4),AL2(0)
STCRCKIT DC    C'INSUFFICIENT ACCESS TO DATASET.'
         SPACE 1                      ×
STCRCKNP DC    AL2(L'STCRCPNT+4),AL2(0)
STCRCPNT DC    C'DATASET IS NOT COVERED BY A RACF PROFILE.'
         SPACE 1                      ×
STCNCATM DC    AL2(L'STCNCATT+4),AL2(0)
STCNCATT DC    C'DATASET IS NOT CATALOGUED.'
         SPACE 1                      ×
STCRM1   DC    C'ENTITY('             ×
STCRM2   DC    C') IS PROTECTED BY PROFILE('
         SPACE 1                      ×
STCRCHK  RACHECK CLASS='DATASET',ATTR=ALTER,MF=L
LENRCHK  EQU   *-STCRCHK              ×
         SPACE 1                      ×
STCPUTL  PUTLINE OUTPUT=(0,DATA),MF=L ×
LENPUTL  EQU   *-STCPUTL              ×
         EJECT                        ×
         TITLE 'WPC -- IKJPARS MACROS'
         PRINT NOGEN                  ×
PARSBASE IKJPARM  ,                   ×
         SPACE 2                      ×
PDEDSN   IKJPOSIT DSNAME,             ×                                *
               PROMPT='DATASET NAME TO LOCATE PROFILE FOR'
         SPACE 2                      ×
         IKJENDP  ,                   ×
         PRINT GEN                    ×
PWA      DSECT ,                      ×
PWASAVE  DS    18F                    ×
PWARCHK  DS    0F,CL(LENRCHK)         × RACHECK PARMS
PWAPUTL  DS    0F,CL(LENPUTL)         × PUTLINE PARMS
PWAAPUTL DS    A                      × ADDRESS OF PUTLINE
PWAAPARS DS    A                      × ADDRESS OF IKJPARS
PWACPECB DS    F                      × ECB FOR PARS, PUTLINE
PWAPDLP  DS    F                      × POINTER TO PARS PDE'S
PWAIOPL  DS    4F                     × IOPL FOR PUTLINE
PWAPPL   DS    7F                     × PARMS FOR IKJPARS
         DS    0F                     ×
PWACML   DS    CL(LENCML)             × LOCATE DSNAMES IN CATALOG
         ORG   PWACML                 ×
CMLFLAGS DS    F                      × FLAGS FOR LOCATE
CMLDSNAM DS    F                      × A(DATASETNAME)
CMLCVOL  DS    F                      × CVOL POINTER OR ZERO
CMLWORK  DS    F                      × A(LOCATE'S PWA)
         ORG   ,                      ×
PWAMSG   DS    CL100                  ×
PWADSN   DS    CL45                   ×
PWAGEN   DS    CL45                   ×
PWACAMWA DS    0D,CL265               ×
PWAPLLEN EQU   *-PWA                  ×
         IKJCPPL  ,                   ×
         IKJPTPB  ,                   ×
         IKJPPL   ,                   ×
         IKJUPT   ,                   ×
         IKJIOPL  ,                   ×
         ICHACHKL ,                   × << MAPPING MACRO FOR RACHECK PL
         CVT   DSECT=YES              ×
         END   ,                      ×
