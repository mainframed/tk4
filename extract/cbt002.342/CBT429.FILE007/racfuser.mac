//UCCCEDR1 JOB (1310,0001),'CHUCK / ADM 1-101',
//             CLASS=Z,
//             NOTIFY=UCCCED,
//             REGION=1024K,
//             MSGCLASS=S
/*JOBPARM   L=9999
//********************************************************************
//* BEFORE SUBMITTING THIS JOB, CHANGE THE DATA SET NAME FROM        *
//*    MVS.SYSTEMS.LINKLIB                                           *
//* TO AN APPROPRIATE LOAD MODULE LIBRARY.                           *
//********************************************************************
//PROC01    EXEC ASMFCL,PARM.LKED='XREF,LET,LIST'
//ASM.SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR
//ASM.SYSPRINT DD SYSOUT=*
//ASM.SYSIN    DD *
RACFUSER TITLE 'ROUTINE TO READ THE RACF MASTER FILE'
***********************************************************************
*                                                                     *
*        MODULE NAME = RACFUSER                                       *
*                                                                     *
*        DESCRIPTIVE NAME = LISTS USERIDS IN THE RACF MASTER FILE     *
*                                                                     *
*        AUTHOR = CHUCK DAVIS         DATE = 03/21/86                 *
*                                                                     *
*        FUNCTION =                                                   *
*                                                                     *
*        RACFUSER IS AN ASSEMBER SOURCE PROGRAM WHICH WILL READ THE   *
*        RACF MASTER DATA SET, PRINT THE PASSWORD EXPIRATION DATE,    *
*        AND CLASSIFY A USERID INTO ONE OF THE FOLLOWING CATEGORIES:  *
*          A. PASSWORD WILL EXPIRE BEFORE A SPECIFIED THRUDATE (WHICH *
*             IS SPECIFIED ON A PARM OR ALLOWED TO DEFAULT TO SEVEN   *
*             DAYS FROM TODAY).                                       *
*          B. PASSWORD WILL REMAIN ACTIVE AFTER THE THRUDATE,         *
*          C. PASSWORD CURRENTLY EXPIRED,           OR                *
*          D. USERID HAS NEVER BEEN USED,                             *
*        THIS INFORMATION CAN BE USED BY A SECURITY ADMINISTRATOR TO  *
*        CONTROL THE CONTENTS OF THE RACF MASTER DATA SET WHICH       *
*        INCLUDES ELIMINATING UNUSED OR OBSOLETE USERIDS AND NOTIFING *
*        DATA CONTROL ABOUT UPCOMING PASSWORD EXPIRATIONS IN SELDOM   *
*        RUN BATCH JOBS.  THIS HELP PREVENT JCL ERRORS DUE TO AN      *
*        EXPIRED PASSWORD.                                            *
*                                                                     *
*        OPERATION =                                                  *
*                                                                     *
*           RACFUSER IS USES BSAM PROCESSING TO DIRECTLY ACCESS THE   *
*        RACF MASTER DATA SET.  A POINT MACRO FOLLOWED BY A READ      *
*        MACRO OBTAINS THE CORRECT PHYSICAL BLOCK.                    *
*                                                                     *
*        THE LOGIC OVERVIEW IS AS FOLLOWS:                            *
*          1.  PROCESS THE PARM FIELD.                                *
*          2.  PROCESS THE RACF MASTER DATA SET HEADER (ICB).         *
*          3.  FROM THE ICB, DETERMINE THE RBA OF THE SEQUENCE SET    *
*              INDEX.                                                 *
*          4.  READ THE FIRST SEQUENCE SET INDEX BLOCK AND DETERMINE  *
*              THE RBA OF THE ASSOCIATED PROFILE.                     *
*          5.  READ THE PROFILE, DETERMINE THE EXPIRATION DATE AND    *
*              OPTIONALLY PRINT THE INFORMATION.                      *
*          6.  CONTINUE WITH THE NEXT ELEMENT IN THE INDEX BLOCKS     *
*              SEQUENTIALLY UNTIL THE END.                            *
*          7.  USE DATA IN COLUMNS 1-8 OF THE DATA SET SPECIFIED BY   *
*              RACFEXCL TO EXCLUDE LISTING OF VARIOUS USERIDS.  THIS  *
*              COULD BE USED TO PREVENT THE PRINTING OF TSO USERIDS.  *
*          8.  FINALLY, STATISTICS INCLUDE THE NUMBER OF USERIDS      *
*              IN THE RACF DATA SET.                                  *
*                                                                     *
*        THE EXTERNAL ROUTINE, XDATEDIT, IS USED TO CONVERT A JULIAN  *
*        DATE TO MM/DD/YY FORMAT.                                     *
*                                                                     *
*        THE EXTERNAL ROUTINE, YDATEDIT, IS USED TO CONVERT A DATE IN *
*        MM/DD/YY FORMAT TO JULIAN.                                   *
*                                                                     *
*       REGISTER ASSIGNMENTS                                          *
*        R0  - WORK                                                   *
*        R1  - WORK                                                   *
*        R2  - WORK                                                   *
*        R3  - WORK                                                   *
*        R4  - WORK                                                   *
*        R5  - WORK                                                   *
*        R6  - FREE                                                   *
*        R7  - ADDRESS OF THE CURRENT SEQ SET ITEM BEING PROCESSED    *
*        R8  - ADDRESS OF THE CURRENT PROFILE BEING PROCESSED         *
*        R9  - DCB ADDRESS FOR RACFMAST                               *
*        R10 - REGISTER USED IN PROGRAM CONTROL (BAL)                 *
*        R11 - PROGRAM BASE REGISTER                                  *
*        R12 - PROGRAM BASE REGISTER                                  *
*        R13 - WORK/SAVE AREA BASE REGISTER                           *
*        R14 - WORK/RETURN ADDRESS                                    *
*        R15 - WORK/RETURN CODE                                       *
*                                                                     *
*        PROGRAM TYPE = MAINLINE                                      *
*                                                                     *
*               PROCESSOR = ASM                                       *
*                                                                     *
*               MODULE SIZE = LESS THAN 8K BYTES                      *
*                                                                     *
*               ATTRIBUTES = PROBLEM PROGRAM STATE                    *
*                                                                     *
*        ENTRY POINTS = RACFUSER                                      *
*                                                                     *
*               LINKAGE FROM = JCL OR CALLABLE FROM TSO               *
*                                                                     *
*        INPUT =                                                      *
*                                                                     *
*               REGISTER 1 - ADDRESS OF AN OPTIONAL PARAMETER WHICH   *
*                            DETERMINES WHICH USERIDS ARE TO BE       *
*                            PRINTED.                                 *
*                                                                     *
*        OUTPUT =                                                     *
*                                                                     *
*               A LIST OF USERIDS ON DDNAME, SYSPRINT                 *
*                                                                     *
*        EXIT - NORMAL = RETURN                                       *
*               OUTPUT = LIST OF USERIDS                              *
*               RETURN CODE = RC = 0                                  *
*                                                                     *
*        EXIT - ERROR =  NONE                                         *
*               OUTPUT = UNPREDICTABLE                                *
*               RETURN CODE = RC = 16                                 *
*                                                                     *
*        EXTERNAL REFERENCES =                                        *
*                                                                     *
*               ROUTINES     A. XDATEDIT - CONVERT YYDDD TO MM/DD/YY  *
*                            B. YDATEDIT - CONVERT MM/DD/YY TO YYDDD  *
*               DATA AREAS   A. RACFMAST - THE RACF MASTER FILE       *
*                            B. RACFEXCL - THE USERID EXCLUDE FILE    *
*                            C. SYSPRINT - THE OUTPUT DATA SET        *
*               CONTROL BLOCKS  NONE                                  *
*               TABLES          EXCLUDE TABLE IS READ FROM RACFEXCL   *
*                                                                     *
*        MACROS USED =                                                *
*                  MACRO           DSNAME                             *
*                  --------        --------------------               *
*                   SAVE            SYS1.MACLIB                       *
*                   RETURN          SYS1.MACLIB                       *
*                   GETMAIN         SYS1.MACLIB                       *
*                   FREEMAIN        SYS1.MACLIB                       *
*                   GET             SYS1.MACLIB                       *
*                   PUT             SYS1.MACLIB                       *
*                   READ            SYS1.MACLIB                       *
*                   CHECK           SYS1.MACLIB                       *
*                   POINT           SYS1.MACLIB                       *
*                   OPEN            SYS1.MACLIB                       *
*                   CLOSE           SYS1.MACLIB                       *
*                   FREEPOOL        SYS1.MACLIB                       *
*                   TIME            SYS1.MACLIB                       *
*                   DCB             SYS1.MACLIB                       *
*                   DCBD            SYS1.MACLIB                       *
*                   REGISTER        IN STREAM                         *
*                                                                     *
*        CHANGE ACTIVITY =                                            *
*   DATE    USERID              ACTIVITY                              *
* 03/21/86 UCCCED   CUTOFF FROM THE DEVELOPMENT                       *
* 04/03/86 UCCCED   ADD CODE TO PRINT THE THRU DATE BEGIN USED.       *
*                                                                     *
*        MESSAGES = SEE MESSAGES AT MSG1... AND ERR1...               *
*                                                                     *
*        ABEND CODES = NONE                                           *
*                                                                     *
*        EXAMPLE 1                                                    *
*                                                                     *
*    //UCCCEDR1 JOB (1310,0001),'CHUCK /  RM 1-101',                  *
*    //             CLASS=A,                                          *
*    //             NOTIFY=UCCCED,                                    *
*    //             REGION=64K                                        *
*    //             MSGCLASS=A                                        *
*    //* REFER TO UCCCED.TEST.JCLLIB(RACFUSER)                        *
*    /*JOBPARM  L=2                                                   *
*    //EXAMPLE1 EXEC PGM=RACFUSER,PARM='F,THRU=04/30/86'              *
*    //***********************************************************    *
*    //* THE PARM FIELDS FOR RACFUSER ARE USED TO CONTROL THE    *    *
*    //* OUTPUT AS FOLLOWS:                                      *    *
*    //*  F - LIST USERIDS WHICH WILL EXPIRE BEFORE THE THRUDATE *    *
*    //*  THRU= KEYWORD PARAMETER WHICH FOLLOWS THE LIST         *    *
*    //*        PARAMETERS AND IS OF THE FORMAT MM/DD/YY.  IT    *    *
*    //*        CORRESPONDS WITH THE "F" LIST PARAMETER.         *    *
*    //*        IF THRU IS NOT SPECIFIED, IT DEFAULTS TO THE     *    *
*    //*        CURRENT DATE + 7.                                *    *
*    //* FOR EXAMPLE, ALL USERIDS WHICH EXPIRE BEFORE 04/30/86   *    *
*    //*   WILL BE LISTED.                                       *    *
*    //***********************************************************    *
*    //STEPLIB  DD DSN=MVS.SYSTEMS.LINKLIB,DISP=SHR                   *
*    //RACFMAST DD DSN=SYS1.RACF.MASTER,DISP=SHR                      *
*    //RACFEXCL DD DUMMY                                              *
*    //SYSPRINT DD SYSOUT=*                                           *
*                                                                     *
*        SAMPLE OUTPUT FROM EXAMPLE 1 - RUN DATE IS 04/04/86          *
*                                                                     *
***********************************************************************
*                                                                     *
* LISTING OF USERIDS FROM THE RACF DATA SET            PAGE 001       *
*     USERID    EXPDATE      PERTINENT INFORMATION                    *
*                                                                     *
* THE FOLLOWING CLASSIFICATIONS OF USERIDS ARE BEING LISTED:          *
* F (PASSWORD WILL EXPIRE BEFORE THE FUTURE THRU DATE)                *
*                                                                     *
* THE ACTUAL THRU DATE BEING USED IS     04/30/86     (86120)         *
*                                                                     *
* THE FOLLOWING USERIDS ARE BEING EXCLUDED:                           *
*                                                                     *
* NO USERIDS ARE BEING EXCLUDED                                       *
*                                                                     *
*   ** BIODWP    04/13/86   PASSWORD WILL EXPIRE BEFORE THE THRU DATE *
*  +++ DBTBTCH   04/29/86   PASSWORD WILL EXPIRE BEFORE THE THRU DATE *
*   ** ECOHLW    04/14/86   PASSWORD WILL EXPIRE BEFORE THE THRU DATE *
*  +++ FRSBTCH   04/26/86   PASSWORD WILL EXPIRE BEFORE THE THRU DATE *
*                                                                     *
***********************************************************************
*                                                                     *
*                                                                     *
*        EXAMPLE 2                                                    *
*                                                                     *
*                                                                     *
*    //UCCCEDR2 JOB (1310,0001),'CHUCK /  RM 1-101',                  *
*    //             CLASS=A,                                          *
*    //             NOTIFY=UCCCED,                                    *
*    //             REGION=64K                                        *
*    //             MSGCLASS=A                                        *
*    //* REFER TO UCCCED.TEST.JCLLIB(RACFUSER)                        *
*    /*JOBPARM  L=2                                                   *
*    //EXAMPLE2 EXEC PGM=RACFUSER,PARM='AEN'                          *
*    //***********************************************************    *
*    //* THE PARM FIELDS FOR RACFUSER ARE USED TO CONTROL THE    *    *
*    //* OUTPUT AS FOLLOWS:                                      *    *
*    //*  A - LIST ACTIVE USERS                                  *    *
*    //*  E - LIST EXPIRED USERS                                 *    *
*    //*  N - LIST USERIDS WHICH HAVE NEVER BEEN USED            *    *
*    //***********************************************************    *
*    //STEPLIB  DD DSN=MVS.SYSTEMS.LINKLIB,DISP=SHR                   *
*    //RACFMAST DD DSN=SYS1.RACF.MASTER,DISP=SHR                      *
*    //RACFEXCL DD DSN=MVS.SYSTEMS.PARMLIB(RACFEXCL),DISP=SHR  *****  *
*    //SYSPRINT DD SYSOUT=*                                           *
*    //                                                               *
*                                                                     *
*        CONTENTS OF MVS.SYSTEMS.PARMLIB(RACFEXCL)                    *
*                                                                     *
*    * THIS IS A COMMENT                                              *
*    * THE FOLLOWING LOGONIDS WILL NOT BE LISTED                      *
*    TSO001                                                           *
*    TSO002                                                           *
*    CSC099                                                           *
*    CIS001                                                           *
*    * END OF THE EXCLUDE LIST                                        *
*                                                                     *
*        SAMPLE OUTPUT FROM EXAMPLE 2 - DATE OF RUN IS 04/04/86       *
*                                                                     *
***********************************************************************
* LISTING OF USERIDS FROM THE RACF DATA SET           PAGE 001        *
*     USERID    EXPDATE      PERTINENT INFORMATION                    *
*                                                                     *
* THE FOLLOWING CLASSIFICATIONS OF USERIDS ARE BEING LISTED:          *
* A (CURRENTLY ACTIVE)                                                *
* E (PASSWORD CURRENTLY EXPIRED)                                      *
* N (NEVER USED AS A LOGON ID)                                        *
*                                                                     *
* *****                                                               *
*                                                                     *
* THE FOLLOWING USERIDS ARE BEING EXCLUDED:                           *
* * THIS IS A COMMENT                                                 *
* * THE FOLLOWING LOGONIDS WILL NOT BE LISTED                         *
* TSO001                                                              *
* TSO002                                                              *
* CSC099                                                              *
* CIS001                                                              *
* * END OF THE EXCLUDE LIST                                           *
*                                                                     *
*    * ASFRRK    03/11/86   PASSWORD IS CURRENTLY EXPIRED.            *
*      CISWHH    08/20/86   USERID WILL REMAIN ACTIVE AFTER THRUDATE. *
*    * CIS002     - NA -    USERID HAS NEVER BEEN USED.               *
*    * CIS003     - NA -    USERID HAS NEVER BEEN USED.               *
***********************************************************************
*                                                                     *
***********************************************************************
*   THE FOLLOWING COMMAND PROCEDURE MAY BE USED UNDER TSO TO LIST     *
*   THE USERIDS WHOSE PASSWORD WILL EXPIRE BEFORE THE THRU DATE.      *
*                                                                     *
*        PROC 1 THRUDATE  DEBUG                                       *
*        /* THRUDATE MUST BE SPECIFIED AS "MM/DD/YY".    */           *
*        IF &DEBUG = DEBUG                  -                         *
*             THEN DO                                                 *
*                  CONTROL LIST   MSG                                 *
*                  END                                                *
*             ELSE DO                                                 *
*                  CONTROL NOLIST NOMSG                               *
*                  END                                                *
*        FREE F(RACFMAST SYSPRINT RACFEXCL)                           *
*        ALLOC F(RACFMAST) DS('SYS1.RACF.MASTER') SHR                 *
*        ALLOC F(RACFEXCL) DUMMY                                      *
*        ALLOC F(SYSPRINT) DS(*)                                      *
*        CALL 'MVS.SYSTEMS.LINKLIB(RACFUSER)' 'F,THRU=&THRUDATE.'     *
*                                                                     *
***********************************************************************
* END OF DOCUMENTATION SECTION.                                       *
***********************************************************************
         SPACE 3
         MACRO
         REGISTER
         LCLA  &NUM
&NUM     SETA  0
         SPACE 2
.LOOP    ANOP
R&NUM    EQU   &NUM
&NUM     SETA  &NUM+1
         AIF   (&NUM LE 15).LOOP
         SPACE  2
         MEND
         TITLE 'HOUSEKEEPING'
         PRINT GEN
RACFUSER CSECT
         SAVE  (14,12),,RACFUSER.&SYSDATE..&SYSTIME
         LR    R11,R15            LOAD THE FIRST BASE REGISTER
         USING RACFUSER,R11,R12   TELL ASM
         LR    R3,R1              SAVE PARM ADDRESS
         LR    R12,R11            SET UP THE SECOND BASE REGISTER
         LA    R12,4095(R12)       REGISTER AT 4096 PAST THE
         LA    R12,1(R12)          FIRST BASE REGISTER.
         LA    R0,SAVEALEN        GET THE LENGTH FOR THE GETMAIN
         GETMAIN R,LV=(R0)        GETMAIN THE WORK/SAVE AREA
         USING SAVEAREA,R1        TEMPORARILY ADDRESS IT
         ST    R13,REGSAVE+4      SET UP BACKWARD POINTER
         LR    R2,R13             DUP OLD SAVEAREA
         LA    R13,SAVEAREA       POINT TO NEW AREA
         ST    R13,8(R2)          SET UP FORWARD POINTER IN OLD AREA
         DROP  R1
         USING SAVEAREA,R13       PERMANENT WORK/SAVE AREA
         ST    R3,PARMADDR        STORE THE ADDRESS OF THE INPUT PARM
* -ESTABLISH DSECT ADDRESSABILITY ----------------------------------*
         USING IHADCB,R9          ADDRESS THE RACFMAST DSECT
         TITLE 'MAIN PROGRAM BODY'
        BAL   R10,PROLOGUE       INITIALIZE ROUTINE
          LTR   R15,R15            TEST THE RETURN CODE
          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW
        BAL   R10,OPENALL        OPEN THE FILES
          LTR   R15,R15            TEST THE RETURN CODE
          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW
        BAL   R10,PRTHEAD        PRODUCE THE HEADER
          LTR   R15,R15            TEST THE RETURN CODE
          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW
        BAL   R10,PROCPARM       PROCESS THE INPUT PARM
          LTR   R15,R15            TEST THE RETURN CODE
          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW
        BAL   R10,PROCEXC1       PROCESS THE EXCLUDE TABLE
          LTR   R15,R15            TEST THE RETURN CODE
          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW
         LA    R7,RACFINDX        ADDRESS OF THE RACF ICB BUFFER
         LR    R3,R7              R3 IS USED BY READNEXT
        BAL   R10,READNEXT       READ THE RACF HEADER BLOCK (ICB)
          LTR   R15,R15            TEST THE RETURN CODE
          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW
        BAL   R10,PROCICB        PROCESS THE DATA IN THE ICB
          LTR   R15,R15            TEST THE RETURN CODE
          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW
         MVC   RBA(6),CEDSSRBA    SET RBA FOR INDEX SEQUENCE SET
         MVC   RBAINDEX(6),RBA    SAVE RBA OF INDEX SEQUENCE SET
        BAL   R10,POINT          POINT TO AN RBA
          LTR   R15,R15            TEST THE RETURN CODE
          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW
         LA    R7,RACFINDX        ADDRESS OF THE RACF INDEX BUFFER
         LR    R3,R7              R3 IS USED BY READNEXT
        BAL   R10,READNEXT       READ THE INDEX SEQUENCE SET
          LTR   R15,R15            TEST THE RETURN CODE
          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW
        BAL   R10,PROCINDX       PROCESS THE DATA IN THE SEQ SET INDEX
          LTR   R15,R15            TEST THE RETURN CODE
          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW
        BAL   R10,PROCSTAT       TELL THE NUMBER OF USERS
          LTR   R15,R15            TEST THE RETURN CODE
          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW
        BAL   R10,CLOSEALL       CLOSE THE FILES
          LTR   R15,R15            TEST THE RETURN CODE
          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW
        BAL   R10,EPILOGUE       PREPARE FOR THE SHUTDOWN
          LTR   R15,R15            TEST THE RETURN CODE
          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW
         XR    R15,R15            CLEAR THE RETURN CODE
         B     ENDJOB             WE ARE FINISHED.
         TITLE 'ERROR HANDLERS'
ERRGENRL DS    0H
         MVC   LINE(LINELEN),=CL80' ' CLEAR THE OUTPUT LINE
         BAL   R10,PRTLINE        PRINT IT
         MVC   LINE(LINELEN),=CL80' ' CLEAR THE OUTPUT LINE
         MVC   LINE(ERR1L),ERR1   MOVE IN THE MESSAGE
         BAL   R10,PRTLINE        PRINT IT
         LA    R15,16             SET A NONZERO RETURN CODE
         B     ENDJOB
ERRINDEX DS    0H
         MVC   LINE(LINELEN),=CL80' ' CLEAR THE OUTPUT LINE
         BAL   R10,PRTLINE        PRINT IT
         MVC   LINE(LINELEN),=CL80' ' CLEAR THE OUTPUT LINE
         MVC   LINE(ERR2L),ERR2   MOVE IN THE MESSAGE
         BAL   R10,PRTLINE        PRINT IT
         LA    R15,16             SET A NONZERO RETURN CODE
         B     ENDJOB
ERR3PROF DS    0H
         MVC   LINE(LINELEN),=CL80' ' CLEAR THE OUTPUT LINE
         BAL   R10,PRTLINE        PRINT IT
         MVC   LINE(LINELEN),=CL80' ' CLEAR THE OUTPUT LINE
         MVC   LINE(ERR3L),ERR3   MOVE IN THE MESSAGE
         BAL   R10,PRTLINE        PRINT IT
         LA    R15,16             SET A NONZERO RETURN CODE
         B     ENDJOB
ERR4PROF DS    0H
         MVC   LINE(LINELEN),=CL80' ' CLEAR THE OUTPUT LINE
         BAL   R10,PRTLINE        PRINT IT
         MVC   LINE(LINELEN),=CL80' ' CLEAR THE OUTPUT LINE
         MVC   LINE(ERR3L),ERR4   MOVE IN THE MESSAGE
         BAL   R10,PRTLINE        PRINT IT
         LA    R15,16             SET A NONZERO RETURN CODE
         B     ENDJOB
ENDJOB   DS    0H
         LA    R0,SAVEALEN        GET THE LENGTH FOR FREEMAIN
         LR    R1,R13             GET THE ADDRESS FOR FREEMAIN
         L     R13,REGSAVE+4      REESTABLISH PREVIOUS SAVE AREA
         FREEMAIN R,LV=(R0),A=(R1)     FREE THE STORAGE
         RETURN (14,12),,RC=(15)  RETURN TO YOUR SENDER
         TITLE 'INITIALIZE KEY VARIABLES'
PROLOGUE DS    0H                 INITIALIZE KEY VARIABLES
         SPACE
         LA    R0,0               LOAD BINARY ZEROES
         ST    R0,DECB            INITIALIZE THE ECB FOR DASD READ
         ST    R0,LINECNTR        INITIALIZE THE LINECNTR
         ZAP   PAGECNTR(4),=PL3'+1'  INITIALIZE THE PAGE COUNTER
         ZAP   USERCNTR(4),=PL3'+0'  INITIALIZE THE USER COUNTER
         SPACE
         LOAD  EPLOC=XDATEDIT     LOAD THE LOAD MODULE
         ST    R0,XDATADDR        STORE THE ADDRESS OF THE MODULE
         SPACE
         TIME  DEC                GET 00YYDDDF DATE IN R1
         MVC   CRNTPDAT(8),=XL8'0000000000000000'  ZERO FIELD OUT
         ST    R1,CRNTPDAT+4      STORE IN LAST 4 BYTES
         XR    R2,R2              CLEAR FOR THE DIVIDE
         CVB   R3,CRNTPDAT        CONVERT FOR BINARY OPERATIONS
         ST    R3,CRNTBDAT        SAVE AS BINARY
         D     R2,=F'1000'        BREAK INTO DAY AND YEAR
         ST    R3,CRNTYR          STORE THE QUOTIENT - THE CURRENT YEAR
         ST    R2,CRNTDAY         STORE THE REMAINDER - THE CURRENT DAY
* REGULAR LEAP YEAR - IS THE YEAR EVENLY DIVISIBLE BY 4 ?
*  IF SO, IT IS A LEAP YEAR IN THAT YEAR.
LPYR1    XR    R2,R2              CLEAR FOR THE DIVIDE
         D     R2,=F'4'           DETERMINE IF THIS A LEAP YEAR
         LTR   R2,R2              Q. IS THE REMAINDER 0 ?
         BNE   LPYR1NO            A. NO
LPYR1YES MVC   CRNTDPY(4),=F'366' SET DAYS PER YEAR AT 366
         B     LPYR2
LPYR1NO  MVC   CRNTDPY(4),=F'365' SET DAYS PER YEAR AT 365
         B     LPYR2
* CENTURY LEAP YEAR - IS THE YEAR EVENLY DIVISIBLE BY 100 ?
*  IF SO, OMIT THE LEAP YEAR IN THAT YEAR.
LPYR2    DS    0H
         XR    R2,R2              CLEAR FOR THE DIVIDE
         L     R3,CRNTYR          RELOAD THE CURRENT YEAR
         D     R2,=F'100'         DETERMINE IF THIS A CENTURY END
         LTR   R2,R2              Q. IS THE REMAINDER 0 ?
         BNE   LPYR3              A. NO
LPYR2NO  MVC   CRNTDPY(4),=F'365' SET DAYS PER YEAR AT 365
         B     LPYR3
* SPECIAL CENTURY LEAP YEAR - IS THE YEAR EVENLY DIVISIBLE BY 400 ?
*  IF SO, LEAVE THE LEAP YEAR IN THAT YEAR.
LPYR3    DS    0H
         XR    R2,R2              CLEAR FOR THE DIVIDE
         L     R3,CRNTYR          RELOAD THE CURRENT YEAR
         D     R2,=F'400'         DETERMINE IF THIS A SPC CENTURY END
         LTR   R2,R2              Q. IS THE REMAINDER 0 ?
         BNE   PTHRUDF1           A. NO
LPYR3NO  MVC   CRNTDPY(4),=F'366' SET DAYS PER YEAR AT 366
PTHRUDF1 L     R2,CRNTDAY         RELOAD THE CURRENT DAY
         L     R3,CRNTYR          RELOAD THE CURRENT YR
*      ADD 7 TO CURRENT DATE FOR DEFAULT TARGET DATE
         LA    R2,7(R2)           FIND DAY+7
         CL    R2,CRNTDPY         Q. DID WE OVERFLOW THE YEAR ?
         BNH   PTHRUDF2           A. NO
         S     R2,CRNTDPY         DETERMINE THE OVERFLOW
         LA    R3,1(R3)           INCREMENT THE YEAR
PTHRUDF2 ST    R3,TRGTYR          STORE THE QUOTIENT - THE TARGET YEAR
         ST    R2,TRGTDAY         STORE THE REMAINDER - THE TARGET DAY
         XR    R2,R2              CLEAR FOR THE MULTIPLY
         M     R2,=F'1000'        MOVE THE YEAR OVER
         A     R3,TRGTDAY         ADD THE DAYS BACK IN
         CVD   R3,TRGTPDAT        STORE AS THE TARGET DATE
         SPACE
         OI    TRGTPDAT+7,X'0F'   MAKE TARGET     DATE UNSIGNED
         OI    CRNTPDAT+7,X'0F'   MAKE CURRENT    DATE UNSIGNED
         SPACE
         XR    R15,R15            SET THE RETURN CODE
         BR    R10                RETURN
         TITLE 'OPEN ALL FILES'
OPENALL  DS    0H                 OPEN THE PROCESSING FILES
         LA    R9,RACFMAST        LOAD DCB ADDRESS
         SPACE
         OPEN  ((R9),INPUT)       OPEN RACF MASTER DATA SET
         SPACE 3
         OPEN  (RACFEXCL,INPUT)   OPEN EXCLUDE TABLE FILE
         SPACE 3
         OPEN  (SYSPRINT,OUTPUT)  OPEN OUTPUT TO THE PRINTER
         SPACE 3
         XR    R15,R15            SET THE RETURN CODE
         BR    R10                RETURN
         TITLE 'PROCESS THE PARM'
PROCPARM DS    0H                 PROCESS THE PARM FIELDS
         SPACE 1
         ST    R10,SAVEPARM       SAVE R10
         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER
         BAL   R10,PRTLINE        PRINT A BLANK LINE
         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER
         MVC   LINE(MSG7L),MSG7   MOVE TO PRINT RECORD
         BAL   R10,PRTLINE        PRINT IT
         MVI   PARMFLAG,X'00'     INITIALIZE THE PARM FLAGS
         L     R2,PARMADDR        LOAD ADDRESS PARM FIELD ADDRESS
         L     R2,0(R2)           LOAD ADDRESS OF THE PARM FIELD
         USING PARMREC,R2         ADDRESS THE PARM FIELD
         LH    R3,PARMCNT         GET THE PARM COUNT
         LTR   R3,R3              Q. DOES IT EXIST ?
         BE    PPARMDFT           A. NO, SET THE DEFAULTS
         LA    R4,PARMDATA        FIND THE PARM BEGINNING
PPARML0  DS    0H
         CLI   0(R4),C','         Q. DOES THIS START THE SECOND PART ?
         BE    PTHRU              A. YES, PROCESS THE ",THRU=MM/DD/YY"
         CLC   0(5,R4),=C'THRU='  Q. DOES THIS START THE SECOND PART ?
         BE    PTHRU1             A. YES, PROCESS THE "THRU=MM/DD/YY"
PPARML1  DS    0H
         CLI   0(R4),C'A'         Q. LIST ACTIVE USERS ?
         BNE   PPARML2            A. NO, SKIP NEXT COMMAND
         OI    PARMFLAG,PARMA     SET THE FLAG
         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER
         MVC   LINE(MSG8L),MSG8   MOVE TO PRINT RECORD
         BAL   R10,PRTLINE        PRINT IT
         B     PPARML5            JUMP TO END OF LOOP
PPARML2  DS    0H
         CLI   0(R4),C'E'         Q. LIST EXPIRED USERS ?
         BNE   PPARML3            A. NO, SKIP NEXT COMMAND
         OI    PARMFLAG,PARME     SET THE FLAG
         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER
         MVC   LINE(MSG9L),MSG9   MOVE TO PRINT RECORD
         BAL   R10,PRTLINE        PRINT IT
         B     PPARML5            JUMP TO END OF LOOP
PPARML3  DS    0H
         CLI   0(R4),C'F'         Q. LIST FUTURE EXPIREES ?
         BNE   PPARML4            A. NO, SKIP NEXT COMMAND
         OI    PARMFLAG,PARMF     SET THE FLAG
         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER
         MVC   LINE(MSG10L),MSG10 MOVE TO PRINT RECORD
         BAL   R10,PRTLINE        PRINT IT
         B     PPARML5            JUMP TO END OF LOOP
PPARML4  DS    0H
         CLI   0(R4),C'N'         Q. LIST NEVER ACTIVE ?
         BNE   PPARML5            A. NO, SKIP NEXT COMMAND
         OI    PARMFLAG,PARMN     SET THE FLAG
         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER
         MVC   LINE(MSG11L),MSG11 MOVE TO PRINT RECORD
         BAL   R10,PRTLINE        PRINT IT
         B     PPARML5            JUMP TO END OF LOOP
PPARML5  LA    R4,1(R4)           INCREMENT POINTER
         BCT   R3,PPARML0         LOOP UNTIL NO MORE DATA
         B     PPARMEND
         SPACE
PTHRU    DS    0H                 PROCESS THE ",THRU=MM/DD/YY" KEYWORD
         CL    R3,=F'14'          Q. ARE THERE ENOUGH CHARACTERS ?
         BL    PTHRUDFT           A. NO, USE THE DEFAULT
         LA    R4,1(R4)           INCREMENT PAST THE COMMA
         B     PTHRU2             LET HIM THRU
PTHRU1   DS    0H                 PROCESS THE "THRU=MM/DD/YY" KEYWORD
         CL    R3,=F'13'          Q. ARE THERE ENOUGH CHARACTERS ?
         BL    PTHRUDFT           A. NO, USE THE DEFAULT
PTHRU2   CLC   0(5,R4),=C'THRU='  Q. DOES IT FIT THE SYNTAX ?
         BNE   PTHRUDFT           A. NO, USE THE DEFAULT
         CLI   7(R4),C'/'         Q. DOES IT FIT THE SYNTAX ?
         BNE   PTHRUDFT           A. NO, USE THE DEFAULT
         CLI   10(R4),C'/'        Q. DOES IT FIT THE SYNTAX ?
         BNE   PTHRUDFT           A. NO, USE THE DEFAULT
         MVC   YDATEWRK(8),5(R4)  MOVE IT TO THE WORK AREA
* CONVERT THE PARM DATE TO JULIAN
         LA    R1,YDATEWRK        ADDRESS OF THE YDATEDIT WORK AREA
         ST    R1,YDATEPRM        STORE THE ADDRESS FOR THE PARM AREA
         OI    YDATEPRM,X'80'     SET END OF PARMETER FLAG
         LA    R1,YDATEPRM        LOAD ADDRESS OF THE PARMETER AREA
         LINK  EP=YDATEDIT        LINK TO YDATEDIT
         LTR   R15,R15            Q. WAS RETURN CODE GOOD?
         BE    PTHRU01            A. YES, DATE WAS CONVERTED
         B     PTHRUDFT           USE THRU DEFAULTS
         SPACE
PTHRU01  DS    0H                 SET UP THE RESULTS
         MVC   TRGTPDAT(8),YDATEWRK MOVE IN RETURNED VALUE
         TM    PARMFLAG,PARMF     Q. DID USER WANT THE FUTURE DATE ?
         BO    PPARMEND           A. YES, CONTINUE
         OI    PARMFLAG,PARMF     NO, BUT HE GOT IT ANYHOW
         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER
         MVC   LINE(MSG15L),MSG15 MOVE TO PRINT RECORD
         BAL   R10,PRTLINE        PRINT IT
         B     PPARMEND
         SPACE 2
PPARMDFT MVI   PARMFLAG,PARMF     DEFAULT IS TO LIST FUTURE EXPIREES
         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER
         MVC   LINE(MSG10L),MSG10 MOVE TO PRINT RECORD
         BAL   R10,PRTLINE        PRINT IT
         B     PPARMEND
         SPACE
PTHRUDFT DS    0H                 USE THRU DEFAULTS
         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER
         MVC   LINE(MSG16L),MSG16 MOVE TO PRINT RECORD
         BAL   R10,PRTLINE        PRINT IT
         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER
         MVC   LINE(MSG17L),MSG17 MOVE TO PRINT RECORD
         BAL   R10,PRTLINE        PRINT IT
         B     PPARMEND
         SPACE
PPARMEND DS    0H
         CLI   PARMFLAG,X'00'     Q. ANY PARM SET ?
         BE    PPARMDFT           A. NO, FORCE THE DEFAULTS
         TM    PARMFLAG,PARMF     Q. DID USER WANT THE FUTURE DATE ?
         BNO   PPARMEN2           A. NO, SKIP THE CHECK
         CLC   TRGTPDAT(8),=XL8'0000000000000000' Q. TRGTPDAT SET ?
         BNE   PPARMEN1           A. YES, CONTINUE
         B     PTHRUDFT           SET UP THE DEFAULT TRGTPDAT
PPARMEN1 DS    0H               CONVERT THRU DATE AND TELL THE USER
         MVC   XDATEWRK(8),TRGTPDAT  MOVE THE THRU DATE
         LA    R1,XDATEWRK        LOAD ADDRESS OF THE WORK AREA
         ST    R1,XDATEPRM        STORE THE ADDRESS FOR THE PARM AREA
         OI    XDATEPRM,X'80'     SET END OF PARMETER FLAG
         LA    R1,XDATEPRM        LOAD ADDRESS OF THE PARMETER AREA
         L     R15,XDATADDR       LOAD ADDRESS OF THE LOAD MODULE
         BALR  R14,R15            XDATEDIT WILL CONVERT TO MM/DD/YY
         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER
         BAL   R10,PRTLINE        PRINT A BLANK LINE
         SPACE 1
         MVC   DATA6(DATA6LEN),=CL80' '  CLEAR THE BUFFER
         MVC   DATA6MSG(MSG18L),MSG18    MOVE IN THE MESSAGE
         MVC   DATA6MDY(8),XDATEWRK      MOVE IN THE MM/DD/YY
         MVI   DATA6BP,C'('              MOVE BEGINNING PARENTHESIS
         UNPK  DATA6JOU(5),TRGTPDAT+5(3) MOVE IN THE YYDDD
         OI    DATA6JOU+4,X'F0'          MAKE IT EBCDIC
         MVI   DATA6EP,C')'              MOVE ENDING PARENTHESIS
         MVC   LINE(LINELEN),DATA6       MOVE IT TO THE PRINT RECORD
         BAL   R10,PRTLINE               PRINT A BLANK LINE
         SPACE 1
PPARMEN2 DS    0H
         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER
         BAL   R10,PRTLINE        PRINT A BLANK LINE
         XR    R15,R15            SET THE RETURN CODE
         L     R10,SAVEPARM       RELOAD R10
         BR    R10                RETURN
         TITLE 'LOAD THE EXCLUDE TABLE'
PROCEXC1 DS    0H                 LOAD THE EXCLUDE TABLE
         SPACE 3
         ST    R10,SAVEEXC1       SAVE R10
         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER
         MVC   LINE(MSG12L),MSG12 MOVE TO PRINT RECORD
         BAL   R10,PRTLINE        PRINT IT
         XR    R4,R4              CLEAR FOR A DIVIDE
         LA    R5,EXCTABLN        GET TABLE SIZE
         D     R4,=F'8'           FIND NUMBER OF ENTRIES
         ST    R5,EXCTBMAX        STORE IT
         LA    R2,8               LENGTH OF EACH TABLE ENTRY
         LA    R3,EXCTABLE+EXCTABLN-8   END OF THE TABLE LESS 8
         LA    R4,0               EXCLUDE TABLE ENTRY COUNTER
         LA    R5,EXCTABLE        ADDRESS OF THE EXCLUDE TABLE
         SPACE
PEXC101  DS    0H
         GET   RACFEXCL,DATA3     INPUT AN EXCLUDE RECORD
         MVC   LINE+1(LINELEN-1),DATA3   MOVE TO AN OUTPUT BUFFER
         BAL   R10,PRTLINE        PRINT IT
         CLI   DATA4STR,C'*'      Q. IS THIS A COMMENT ?
         BE    PEXC101            Q. YES, SKIP IT
         MVC   0(8,R5),DATA3UID   MOVE IN THE USERID TO BE EXCLUDED
         SPACE
PEXC102  DS    0H                 ADD THE ENTRY
         LA    R4,1(R4)           ENCREMENT THE COUNTER
         CL    R4,EXCTBMAX        Q. HAS MAX SIZE BEEN EXCLUDED ?
         BH    PEXC103            A. YES, TELL THE USER
         BXLE  R5,R2,PEXC101      R3 IS THE COMPARE VALUE
         B     PEXC104            THAT'S ALL FOLKS.
         SPACE
PEXC103  DS    0H                 ERROR ENDING
         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER
         BAL   R10,PRTLINE        PRINT A BLANK LINE
         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER
         MVC   LINE(ERR5L),ERR5   MOVE TO PRINT RECORD
         BAL   R10,PRTLINE        PRINT IT
         L     R10,SAVEPARM       RESTORE IT
         LA    R15,8              SET A BAD RETURN CODE
         BR    R10                RETURN
         SPACE
PEXC104  DS    0H                 NORMAL RETURN
         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER
         BAL   R10,PRTLINE        PRINT IT
         ST    R4,EXCTBCNT        STORE THE ENTRY COUNT
         CL    R4,=F'0'           Q. ANY ENTRIES ?
         BNE   PEXC105            A. AT LEAST ONE.
         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER
         MVC   LINE(MSG13L),MSG13 MOVE TO PRINT RECORD
         BAL   R10,PRTLINE        PRINT IT
         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER
         BAL   R10,PRTLINE        PRINT IT
PEXC105  DS    0H                 NORMAL RETURN
         L     R10,SAVEEXC1       RESTORE IT
         XR    R15,R15            SET THE RETURN CODE
         BR    R10                RETURN
         SPACE 3
         TITLE 'SEARCH THE EXCLUDE TABLE'
* THIS LOGIC SEARCHES THE EXCLUDE TABLE TO SEE IF THE USERID IS THERE.
* IF USERID IS NOT TO BE EXCLUDED, RC=0 IS RETURNED.
* IF USERID IS     TO BE EXCLUDED, RC=8 IS RETURNED.
PROCEXC2 DS    0H                 SEARCH THE EXCLUDE TABLE
         LA    R1,EXCTABLE        LOAD TABLE ADDRESS
         L     R2,EXCTBCNT        GET THE NUMBER OF ENTRIES
         LTR   R2,R2              Q. DO WE HAVE ZERO ENTRIES ?
         BE    PEXC203            A. YES, BYPASS SEARCH
PEXC201  DS    0H                 BEGIN LOOP
         CLC   0(8,R1),PRFNAME    Q. IS USERID IN THE TABLE
         BE    PEXC204            A. YES THIS IS IT
         LA    R1,8(R1)           INCREMENT TO THE NEXT ENTRY
         BCT   R2,PEXC201         CONTINUE SEARCH
         SPACE
PEXC203  DS    0H                 DO NOT EXCLUDE THE USERID
         LA    R15,0              SET THE RETURN CODE
         BR    R10                RETURN
         SPACE
PEXC204  DS    0H                 DO     EXCLUDE THE USERID
         LA    R15,8              SET THE RETURN CODE
         BR    R10                RETURN
         TITLE 'CODE TO READ THE NEXT RACF MASTER BLOCK'
READNEXT DS    0H
         SPACE
* R3 CONTAINS ADDRESS OF INPUT BUFFER
* R9 CONTAINS ADDRESS OF DCB
         SPACE
         MVI   DECB,X'00'         CLEAR THE ECB
         LA    R4,1024            LENGTH OF LOGICAL RECORD
         SPACE
         READ  DECB,SF,(R9),(R3),(R4)
         SPACE 3
         CHECK DECB
         SPACE 3
         XR    R15,R15            SET THE RETURN CODE
         BR    R10                RETURN
         TITLE 'PROCESS THE SEQUENCE SET INDEX'
PROCINDX DS    0H
         SPACE
         ST    R10,SAVEINDX       SAVE R10
* R7 POINTS TO THE BEGINNING OF THE PHYSICAL BLOCK
         SPACE
         USING INDXHREC,R7        ADDRESS THE INDEX HEADER FIELDS
PINDX01  XR    R2,R2              CLEAR FOR THE DIVIDE
         LH    R3,DCBLRECL        LOAD THE LRECL
         MH    R3,RECNO+2         RECNO SHOULD BE ZERO, BUT...
         AR    R7,R3              ADD THE OFFSET TO THE BEGINNING
         A     R7,RBAOFF          ADD ANY OFFSET TO THE RBA BEGINNING
         SPACE
         CLI   INDXHID,HEX8A      Q. IS THIS  THE INDEX BLOCK ID
         BNE   ERRINDEX           A. NO, PUNT
         SPACE
         CLI   INDXHI2,HEX4E      Q. IS THIS  THE INDEX BLOCK ID
         BNE   ERRINDEX           A. NO, PUNT
         SPACE
         CLI   INDXHILN,HEX01     Q. IS THIS  INDEX LEVEL 1
         BNE   ERRINDEX           A. NO, PUNT
         SPACE
         LA    R1,RACFINDX        LOAD ADDRESS OF INDEX BUFFER
         AH    R1,INDXHO1         ADD OFFSET TO INDEX CHAIN
         ST    R1,ENDADRIX        ADDRESS OF SEQ SET CHAIN POINTER
         SPACE
         LA    R7,10(R7)          INCREMENT PAST SEQ SET HEADER
         DROP  R7
         USING INDXEREC,R7        ADDRESS THE INDEX ENTRY FIELDS
         SPACE
PINDX02  DS    0H
         CL    R7,ENDADRIX        Q. IS THIS  THE END OF THE INDEX?
         BH    PINDX05            A. NO, CONTINUE AS BEFORE
         SPACE
         CLI   INDXEID,HEX21      Q. IS THIS  A X'21' ?
         BE    PINDX03            A. YES, LET IT PASS
         SPACE
         CLI   INDXEID,HEX22      Q. IS THIS  A X'22' ?
         BE    PINDX03            A. YES, LET IT PASS
         SPACE
         CLI   INDXEID,HEX20      Q. IS THIS  A X'20' (CHAIN POINTER) ?
         BE    PINDX05            A. YES, TREAT AS THE INDEX END
         B     ERRINDEX           A. NO, PUNT
         SPACE
PINDX03  DS    0H                 GET AND PROCESS PROFILE
         XR    R1,R1              CLEAR FOR THE IC
         IC    R1,INDXELN         GET THE INDEX NAME LENGTH+3
         LA    R1,1(R1)           INCREMENT PAST THE POINTER ID
         AR    R7,R1              ADJUST R7 PAST THE VARIABLE NAME
         DROP  R7
         SPACE
         MVC   RBA(6),0(R7)       GET THE PROFILE RBA
         CLC   RBA(6),=XL6'000000000000' Q. IS THIS THE END ?
         BE    PINDX09                   A. YES, QUIT INDEX
         SPACE
        BAL   R10,POINT          POINT TO AN RBA
          LTR   R15,R15            TEST THE RETURN CODE
          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW
         SPACE
         LA    R8,RACFPROF        ADDRESS OF THE RACF PROFILE BUFFER
         LR    R3,R8              R3 IS USED BY READNEXT
        BAL   R10,READNEXT       READ THE PROFILE RECORD
          LTR   R15,R15            TEST THE RETURN CODE
          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW
         SPACE
        BAL   R10,PROCPROF       PROCESS THE PROFILE RECORD
          LTR   R15,R15            TEST THE RETURN CODE
          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW
         LA    R7,6(R7)           INCREMENT PAST THE RBA
         SPACE
         B     PINDX02            RETURN TO THE TOP OF THE LOOP
         SPACE
PINDX05  DS    0H                 PROCESS INDEX CHAIN
         USING INDXCREC,R7        ADDRESS THE INDEX CHAIN FIELDS
         SPACE
         CLI   INDXCPID,HEX20     Q. IS THIS  A X'20' ?
         BNE   ERRINDEX           A. NO, WE ARE IN TROUBLE
         SPACE
         MVC   RBA(6),INDXCRBA    MOVE RBA OF NEXT LEVEL 1 INDX SEQ SET
         CLC   RBA(6),=XL6'000000000000' Q. IS THIS THE END ?
         BE    PINDX09                   A. YES, QUIT INDEX
        BAL   R10,POINT          POINT TO AN RBA
          LTR   R15,R15            TEST THE RETURN CODE
          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW
         LA    R7,RACFINDX        ADDRESS OF THE RACF INDEX BUFFER
         LR    R3,R7              R3 IS USED BY READNEXT
         CLC   RBA(6),RBAINDEX    Q. DO WE WANT THE CURRENT SEQ SET ?
         BE    PINDX01            A. YES, LETS SAVE AN I/O
        BAL   R10,READNEXT       READ THE INDEX SEQUENCE SET
          LTR   R15,R15            TEST THE RETURN CODE
          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW
         MVC   RBAINDEX(6),RBA    SAVE RBA OF INDEX SEQUENCE SET
         B     PINDX01
PINDX09  DS    0H                 RETURN TO MASTER LOOP
         SPACE
         L     R10,SAVEINDX       RELOAD
         XR    R15,R15            SET THE RETURN CODE
         BR    R10                RETURN
         TITLE 'PROCESS THE PROFILE'
PROCPROF DS    0H
         SPACE
         ST    R10,SAVEPROF       SAVEPROF IS USED BY PROFILE PROCESS
* R8 POINTS TO THE BEGINNING OF THE PHYSICAL BLOCK
         SPACE
         USING PROFHREC,R8        ADDRESS THE PROFILE HEADER FIELDS
         XR    R2,R2              CLEAR FOR THE DIVIDE
         LH    R3,DCBLRECL        LOAD THE LRECL
         MH    R3,RECNO+2         RECNO SHOULD BE ZERO, BUT...
         AR    R8,R3              ADD THE OFFSET TO THE BEGINNING
         A     R8,RBAOFF          ADD ANY OFFSET TO THE RBA BEGINNING
         SPACE
         CLI   PROFRID,HEX82      Q. IS THIS  THE PROFILE HEADER
         BNE   ERR3PROF           A. NO, PUNT
         SPACE
         XR    R1,R1              CLEAR FOR THE IC
         IC    R1,PROFNLEN        GET THE PROFILE NAME LENGTH
         BCTR  R1,0               DECREMENT THE LENGTH FOR EX
         LTR   R1,R1              Q. IS THE LENGTH POSITIVE ?
         BNH   ERR4PROF           A. NO, PUNT
         CL    R1,=F'8'           Q. IS THE LENGTH TOO LONG
         BL    PPROF01            A. NO, CONTINUE
         LA    R1,7               SET LENGTH TO (MAX-1)
PPROF01  MVC   PRFNAME(8),=CL8' ' CLEAR THE RECEIVING FIELD
         EX    R1,MOVEPFN         MOVE THE PROFILE NAME
         SPACE
         LA    R2,7(R1)           ADJUST PAST THE NAME - KEEP R1
         AR    R8,R2              ADJUST THE BASE REGISTER
         SPACE
         USING PROFEREC,R8        USE GOOD CODING TECHNIQUES
         CLI   PROFENT,HEX02      Q. IS THIS A USER ENTITY
         BNE   PPROF10            A. NO, SKIP IT
         SPACE 3
         AP    USERCNTR(4),=PL3'+1'   INCREMENT NUMBER OF USERS
         SPACE 3
        BAL   R10,PROCEXC2        CHECK THE EXCLUSION TABLE
          LTR   R15,R15           Q. IS THIS A USERID TO BE EXCLUDED ?
          BNE   PPROF10           A. YES, SKIP IT
         SPACE
         ZAP   PSWDPDAT(8),PROFPDAT(3)  MOVE IN THE LAST CHANGED FIELD
         CLC   PSWDPDAT+5(3),=XL3'00000C' Q. HAS PW EVER BEEN UPDATED ?
         BE    PPROF09                    A. NO, TELL DATA CONTROL
         CLC   PSWDPDAT+5(3),=XL3'00000F' Q. HAS PW EVER BEEN UPDATED ?
         BE    PPROF09                    A. NO, TELL DATA CONTROL
         XR    R2,R2              CLEAR FOR THE DIVIDE
         CVB   R3,PSWDPDAT        CONVERT FOR BINARY OPERATIONS
         ST    R3,PSWDBDAT        SAVE AS BINARY
         D     R2,=F'1000'        BREAK INTO DAY AND YEAR
         ST    R3,PSWDYR          STORE THE QUOTIENT - THE YEAR
         ST    R2,PSWDDAY         STORE THE REMAINDER - THE DAY
* REGULAR LEAP YEAR - IS THE YEAR EVENLY DIVISIBLE BY 4 ?
*  IF SO, IT IS A LEAP YEAR IN THAT YEAR.
LEAP1    XR    R2,R2              CLEAR FOR THE DIVIDE
         D     R2,=F'4'           DETERMINE IF THIS A LEAP YEAR
         LTR   R2,R2              Q. IS THE REMAINDER 0 ?
         BNE   LEAP1NO            A. NO
LEAP1YES MVC   PSWDDPY(4),=F'366' SET DAYS PER YEAR AT 366
         B     LEAP2
LEAP1NO  MVC   PSWDDPY(4),=F'365' SET DAYS PER YEAR AT 365
         B     LEAP2
* CENTURY LEAP YEAR - IS THE YEAR EVENLY DIVISIBLE BY 100 ?
*  IF SO, OMIT THE LEAP YEAR IN THAT YEAR.
LEAP2    DS    0H
         XR    R2,R2              CLEAR FOR THE DIVIDE
         L     R3,PSWDYR          RELOAD THE YEAR
         D     R2,=F'100'         DETERMINE IF THIS A CENTURY END
         LTR   R2,R2              Q. IS THE REMAINDER 0 ?
         BNE   LEAP3              A. NO
LEAP2NO  MVC   PSWDDPY(4),=F'365' SET DAYS PER YEAR AT 365
         B     LEAP3
* SPECIAL CENTURY LEAP YEAR - IS THE YEAR EVENLY DIVISIBLE BY 400 ?
*  IF SO, LEAVE THE LEAP YEAR IN THAT YEAR.
LEAP3    DS    0H
         XR    R2,R2              CLEAR FOR THE DIVIDE
         L     R3,PSWDYR          RELOAD THE YEAR
         D     R2,=F'400'         DETERMINE IF THIS A SPC CENTURY END
         LTR   R2,R2              Q. IS THE REMAINDER 0 ?
         BNE   PPROF02            A. NO
LEAP3NO  MVC   PSWDDPY(4),=F'366' SET DAYS PER YEAR AT 366
         B     PPROF02
PPROF02  DS    0H
* BEGIN DATE CALCULATIONS
*   1. ADD PSWD INTERVAL TO DATE LAST CHANGED FOR EXPIRATION DATE
*   2. CONVERT DATES BACK TO PACKED DECIMAL
         SPACE
         XR    R1,R1              CLEAR FOR IC
         IC    R1,PROFPINT        LOAD THE PASSWORD INTERVAL
         L     R2,PSWDDAY         FIND DAY  PSWD LAST CHANGED
         L     R3,PSWDYR          FIND YEAR PSWD LAST CHANGED
         AR    R2,R1              ADD THE PASSWORD INTERVAL
         CL    R2,PSWDDPY         Q. DID WE OVERFLOW THE YEAR ?
         BNH   EXPDOKAY           A. NO
         S     R2,PSWDDPY         DETERMINE THE OVERFLOW
         LA    R3,1(R3)           INCREMENT THE YEAR
EXPDOKAY ST    R3,EXPDYR          STORE THE QUOTIENT - THE EXPIRED YEAR
         ST    R2,EXPDDAY         STORE THE REMAINDER - THE EXPIRE  DAY
         XR    R2,R2              CLEAR FOR THE MULTIPLY
         M     R2,=F'1000'        MOVE THE YEAR OVER
         A     R3,EXPDDAY         ADD THE DAYS BACK IN
         CVD   R3,EXPDPDAT        STORE AS THE EXPIRED DATE
* ENSURE THE SIGNS ARE ALL THE SAME
         OI    EXPDPDAT+7,X'0F'   MAKE EXPIRATION DATE UNSIGNED
* CONVERT THE DATES
         MVC   XDATEWRK(8),EXPDPDAT  MOVE THE EXP DATE
         LA    R1,XDATEWRK        LOAD ADDRESS OF THE WORK AREA
         ST    R1,XDATEPRM        STORE THE ADDRESS FOR THE PARM AREA
         OI    XDATEPRM,X'80'     SET END OF PARMETER FLAG
         LA    R1,XDATEPRM        LOAD ADDRESS OF THE PARMETER AREA
         L     R15,XDATADDR       LOAD ADDRESS OF THE LOAD MODULE
         BALR  R14,R15            XDATEDIT WILL CONVERT TO MM/DD/YY
         LTR   R15,R15            Q. WAS RETURN CODE GOOD?
         BE    XDATGOOD           A. YES, DATE WAS CONVERTED
XDATBAD  DS    0H         ACTUALLY THIS IS A BRANCH POINT FOR TEST
* COMPARE THE DATES
XDATGOOD CLC   EXPDPDAT(8),TRGTPDAT  Q. IS USER ALIVE AND ACTIVE
         BH    PPROF06            A. LOOK LIKE IT - IGNORE IT
         CLC   EXPDPDAT(8),CRNTPDAT  Q. WILL USER EXPIRE THIS WEEK ?
         BH    PPROF07            A. LOOKS LIKE IT - TELL DATA CONTROL
         B     PPROF08            USER ALREADY HAS EXPIRED
         SPACE
PPROF06  DS    0H                 ACTIVE USERS
         TM    PARMFLAG,PARMA     Q. LIST ACTIVE USERS ?
         BNO   PPROF10            A. NO, SKIP
         MVC   DATA1(DATA1LEN),=CL80' '    CLEAR THE I/O AREA
         MVC   DATA1FLG(DATA1FLL),IDGOOD    SET EXPIRED FLAG
         MVC   DATA1USR(DATA1USL),PRFNAME   SET THE USER ID
         MVC   DATA1MSG(DATA1MSL),=CL80' '  CLEAR THE BUFFER
         MVC   DATA1MSG(MSG6L),MSG6   ADD A MESSAGE
         MVC   DATA1EXP(DATA1EXL),XDATEWRK   MOVE IN THE EXP DATE
         MVC   LINE(LINELEN),DATA1 MOVE TO PRINT RECORD
         BAL   R10,PRTLINE        PRINT IT
         B     PPROF10            GOBACK
         SPACE
PPROF07  DS    0H                 FUTURE EXPIREES
         TM    PARMFLAG,PARMF     Q. LIST FUTURE EXPIREES ?
         BNO   PPROF10            A. NO, SKIP
         MVC   DATA1(DATA1LEN),=CL80' '    CLEAR THE I/O AREA
         MVC   DATA1FLG(DATA1FLL),ID2EXP    SET EXPIRED FLAG
         MVC   DATA1USR(DATA1USL),PRFNAME   SET THE USER ID
         MVC   DATA1MSG(DATA1MSL),=CL80' '  CLEAR THE BUFFER
         MVC   DATA1MSG(MSG5L),MSG5   ADD A MESSAGE
         MVC   DATA1EXP(DATA1EXL),XDATEWRK   MOVE IN THE EXP DATE
* AT NLU, ALL BATCH PRODUCTION JOBS HAVE A USER OF XXXBTCH WHERE
* XXX IS THE SYSTEM CODE SUCH AS REG (REGISTRAR'S OFFICE) OR
* PYR (FOR PAYROLL).  AS A SPECIAL FAVOR TO THE PRODUCTION
* DATA CONTROL SECTION, I FLAG THEIR JOBS SEPARATELY.
         CLC   DATA1USR+3(4),=CL4'BTCH'  Q. IS THIS NLU PRODUCTION ?
         BNE   PPROF07A                  A. NO, NO SPECIAL FLAG
         MVC   DATA1FLG(DATA1FLL),IDBTCH    SET EXPIRED FLAG
PPROF07A MVC   LINE(LINELEN),DATA1 MOVE TO PRINT RECORD
         BAL   R10,PRTLINE        PRINT IT
         B     PPROF10            GOBACK
         SPACE
PPROF08  DS    0H                 CURRENTLY EXPIRED
         TM    PARMFLAG,PARME     Q. LIST CURRENTLY EXPIRED ?
         BNO   PPROF10            A. NO, SKIP
         MVC   DATA1(DATA1LEN),=CL80' '    CLEAR THE I/O AREA
         MVC   DATA1FLG(DATA1FLL),IDEXPD    SET EXPIRED FLAG
         MVC   DATA1USR(DATA1USL),PRFNAME   SET THE USER ID
         MVC   DATA1MSG(DATA1MSL),=CL80' '  CLEAR THE BUFFER
         MVC   DATA1MSG(MSG4L),MSG4  ADD A MESSAGE
         MVC   DATA1EXP(DATA1EXL),XDATEWRK   MOVE IN THE EXP DATE
* AT NLU, ALL BATCH PRODUCTION JOBS HAVE A USER OF XXXBTCH WHERE
* XXX IS THE SYSTEM CODE SUCH AS REG (REGISTRAR'S OFFICE) OR
* PYR (FOR PAYROLL).  AS A SPECIAL FAVOR TO THE PRODUCTION
* DATA CONTROL SECTION, I FLAG THEIR JOBS SEPARATELY.
         CLC   DATA1USR+3(4),=CL4'BTCH'  Q. IS THIS NLU PRODUCTION ?
         BNE   PPROF08A                  A. NO, NO SPECIAL FLAG
         MVC   DATA1FLG(DATA1FLL),IDEBTCH   SET EXPIRED FLAG
PPROF08A MVC   LINE(LINELEN),DATA1 MOVE TO PRINT RECORD
         BAL   R10,PRTLINE        PRINT IT
         B     PPROF10            GOBACK
         SPACE
PPROF09  DS    0H                 NEVER USED
         TM    PARMFLAG,PARMN     Q. LIST NEVER USED ?
         BNO   PPROF10            A. NO, SKIP
         MVC   DATA1(DATA1LEN),=CL80' '    CLEAR THE I/O AREA
         MVC   DATA1FLG(DATA1FLL),IDEXPD    SET EXPIRED FLAG
         MVC   DATA1USR(DATA1USL),PRFNAME   SET THE USER ID
         MVC   DATA1MSG(DATA1MSL),=CL80' '  CLEAR THE BUFFER
         MVC   DATA1MSG(MSG3L),MSG3 ADD A MESSAGE
         MVC   DATA1EXP(DATA1EXL),=CL8' - NA - ' MOVE IN NOT APPLICABLE
         MVC   LINE(LINELEN),DATA1 MOVE TO PRINT RECORD
         BAL   R10,PRTLINE        PRINT IT
         B     PPROF10            GOBACK
         SPACE
PPROF10  DS    0H
         L     R10,SAVEPROF       RELOAD R10
         XR    R15,R15            SET THE RETURN CODE
         BR    R10                RETURN
         SPACE
         USING PROFHREC,R8
MOVEPFN  MVC   PRFNAME(*-*),PROFNAME  MOVE THE PROFILE NAME IN
         DROP  R8
         TITLE 'PROCESS THE RACF DATA SET HEADER'
PROCICB  DS    0H                 PROCESS THE ICB
         SPACE
* R7 CONTAINS FIRST THE ADDRESS OF THE ICB AND THEN THE SEQ SET ADDR
         SPACE
         USING ICBREC,R7          ADDRESS THE ICB FIELDS
         MVC   CEDSSRBA(6),ICISSRBA  MOVE THE INDEX SEQ SET    RBA
         SPACE
         DROP  R7
         SPACE
         XR    R15,R15            SET THE RETURN CODE
         BR    R10                RETURN
         TITLE 'CLOSE ALL OPEN DATA SETS'
CLOSEALL DS    0H                 CLOSE ALL FILES
         SPACE
         CLOSE ((R9))             CLOSE RACF MASTER DATA SET
         SPACE 3
         FREEPOOL  (R9)           FREE THE FILE BUFFERS
         SPACE 3
         CLOSE (RACFEXCL)         CLOSE EXCLUDE TABLE FIEL
         SPACE 3
         FREEPOOL  RACFEXCL       FREE THE EXCLUDE BUFFERS
         SPACE 3
         CLOSE (SYSPRINT)         CLOSE PRINT FILE
         SPACE 3
         FREEPOOL  SYSPRINT       FREE THE PRINTER BUFFERS
         SPACE 3
         XR    R15,R15            SET THE RETURN CODE
         BR    R10                RETURN
         TITLE 'PRINT RACF DATA SET STATISTICS'
PROCSTAT DS    0H                 PRINT THE STATISTICS
         ST    R10,SAVESTAT       SAVE RETURN ADDRESS
         SPACE
         MVC   LINE(LINELEN),=CL80' ' SPACE OUT THE BUFFER
         BAL   R10,PRTLINE        PRINT IT
         SPACE
         MVC   DATA5(DATA5LEN),=CL80' ' SPACE OUT THE BUFFER
         MVC   DATA5MSG(MSG14L),MSG14    MOVE IN A MESSAGE
         UNPK  DATA5CNT+1(4),USERCNTR+2(2) UNPK THE USER COUNTER
         OI    DATA5CNT+4,X'F0'   MAKE IT EBCDIC
         MVC   LINE(LINELEN),=CL80' ' SPACE OUT THE BUFFER
         MVC   LINE(LINELEN),DATA5 MOVE IN THE TEXT
         BAL   R10,PRTLINE        PRINT IT
         SPACE
         MVC   LINE(LINELEN),=CL80' ' SPACE OUT THE BUFFER
         BAL   R10,PRTLINE        PRINT IT
         L     R10,SAVESTAT       RESTORE THE RETURN ADDRESS
         XR    R15,R15            SET THE RETURN CODE
         BR    R10                RETURN
         SPACE
         TITLE 'PRINT THE CONTENTS OF LINE'
PRTLINE  DS    0H                 WRITE A NEW DETAIL LINE
         ST    R10,SAVEPRT        SAVE RETURN ADDRESS
         SPACE
PRTLINE1 L     R0,LINECNTR        LOAD THE LINE COUNTER
         A     R0,=F'1'           INCREMENT
         ST    R0,LINECNTR        STORE IT
         CL    R0,LPP             Q. HAVE WE EXCEEDED LINES PER PAGE
         BL    PRTLINE3           A. NO
PRTLINE2 DS    0H
         BAL   R10,PRTHEAD        PRODUCE THE HEADER
         SPACE 3
PRTLINE3 PUT   SYSPRINT,LINE      WRITE NEXT LINE
         SPACE 3
         L     R10,SAVEPRT        RESTORE THE RETURN ADDRESS
         XR    R15,R15            SET THE RETURN CODE
         BR    R10                RETURN
         TITLE 'PRINT A NEW HEADER'
PRTHEAD  DS    0H                 WRITE THE PAGE HEADING
         SPACE
         LA    R0,2               LOAD A BINARY ZERO
         ST    R0,LINECNTR        CLEAR THE LINE COUNTER
         SPACE
         MVC   DATA1(DATA1LEN),=CL80' ' CLEAR THE BUFFER
         UNPK  DATA2PAG(3),PAGECNTR+2(2) UNPK THE PAGE COUNTER
         OI    DATA2PAG+2,X'F0'   MAKE IT EBCDIC
         MVC   DATA2TTL(6),=C' PAGE ' GIVE IT A HEADER
         SPACE
         MVC   DATA2MSG(MSG1L),MSG1  MOVE THE MESSAGE IN
         PUT   SYSPRINT,DATA2     WRITE THE MESSAGE
         SPACE
         MVC   DATA1(DATA1LEN),=CL80' ' CLEAR THE BUFFER
         MVC   DATA2MSG(MSG2L),MSG2  MOVE THE MESSAGE IN
         PUT   SYSPRINT,DATA2     WRITE THE MESSAGE
         SPACE 3
         AP    PAGECNTR(4),=PL3'+1'   INCREMENT IT
         SPACE 3
         XR    R15,R15            SET THE RETURN CODE
         BR    R10                RETURN
         TITLE 'PREPARE FOR THE SHUTDOWN'
EPILOGUE DS    0H                 INITIALIZE KEY VARIABLES
         SPACE
         DELETE EPLOC=XDATEDIT    DELETE THE LOAD MODULE
         SPACE
         XR    R15,R15            SET THE RETURN CODE
         BR    R10                RETURN
         SPACE
         TITLE 'LOGIC TO CONVERT AN RBA TO TTR AND ISSUE POINT'
POINT    DS    0H
**********************************************************************
* THIS ROUTINE IS A GENERAL PURPOSE ROUTINE WHICH HAS BEEN USED HERE *
* IN THIS PROGRAM.  FOR INSTANCE, THE NEXT SECTION OF CODE COMPUTES  *
* THE NUMBER OF LOGICAL RECORDS PER BLOCK; HOWEVER IN OUR READING OF *
* THE RACF MASTER FILE, WE KNOW THE FILE IS BLOCKED 1 RECORD PER     *
* BLOCK. STILL I FEEL THAT A GENERAL PURPOSE ROUTINE IS BETTER IN    *
* THE LONG RUN.                                                      *
**********************************************************************
*--------------------------------------------------------------------*
* ---------COMPUTE A= RECORDS PER BLOCK-------------------------------*
*--------------------------------------------------------------------*
         XR    R2,R2              CLEAR FOR DIVIDE
         LH    R3,DCBBLKSI        LOAD THE BLOCKSIZE
         LH    R4,DCBLRECL        LOAD THE LRECL
         DR    R2,R4              GET NUM OF RECORDS PER BLOCK
         LTR   R2,R2              WAS REMAINDER ZERO
         BNE   ERRGENRL           IF NOT, TELL USER
         ST    R3,RECBLK          STORE FOR LATER USE
* ---------COMPUTE B = Q--RELATIVE BLOCK FROM BEGINNING OF DS---------*
* ---------            R--RELATIVE RECORD WITHIN THAT BLOCK-----------*
         LH    R2,RBA             R2 WILL CONTAIN THE FULL
         L     R3,RBA+2             SIX BYTE RELATIVE BYTE ADDRESS
         LH    R4,DCBLRECL        LOAD THE LRECL
         DR    R2,R4              COMPUTE THE RELATIVE RECORD NUMBER
         ST    R2,RBAOFF          SAVE OFFSET FROM BEGINNING OF RECORD
         XR    R2,R2              CLEAR FOR DIVIDE
         D     R2,RECBLK          COMPUTE WHICH BLOCK/RECORD
         ST    R3,BLOCKNO         SAVE THE BLOCK NUMBER
         ST    R2,RECNO           SAVE THE RECORD-1 NUMBER
         TITLE 'THE DEVICE DEPENDENT BLOCK / TRACK CALCULATION'
* ---------COMPUTE C = Q--BLOCKS PER TRACK ON THE DEVICE--------------*
* ---------            R--NEGLIGIBLE----------------------------------*
         SPACE 1
         TM    DCBDEVT,DCBDV375   DEVICE=3375
         BO    D3375              YEP
         TM    DCBDEVT,DCBDV340   DEVICE=3340
         BO    D3340              YEP
         TM    DCBDEVT,DCBDV380   DEVICE=3380
         BO    D3380              YEP
         TM    DCBDEVT,DCBDV350   DEVICE=3350
         BO    D3350              YEP
         TM    DCBDEVT,DCBDV331   DEVICE=3330-1
         BO    D3330              YEP
         TM    DCBDEVT,DCBDV330   DEVICE=3330
         BO    D3330              YEP
         TM    DCBDEVT,DCBDV314   DEVICE=2314
         BO    D2314              YEP
         TM    DCBDEVT,DCBDV305   DEVICE=2305-2
         BO    D23052             YEP
         TM    DCBDEVT,DCBD1305   DEVICE=2305-1
         BO    D23051             YEP
         B     ERRGENRL           PROBABLY NOT FOR DASD
D23051   XR    R2,R2              CLEAR FOR DIVIDE
         L     R3,=F'14568'       LOAD 2305-1 TRACK CAPACITY
         L     R4,=F'432'         LOAD 2305-1 BLOCK OVERHEAD
         AH    R4,DCBBLKSI        ADD THE BLOCK SIZE
         DR    R2,R4              COMPUTE BLOCKS PER TRACK
         ST    R3,BLKTRACK        SAVE BLOCKS/TRACK
         B     DEVEND             FINISH THE ROUTINE
D23052   XR    R2,R2              CLEAR FOR DIVIDE
         L     R3,=F'14858'       LOAD 2305-2 TRACK CAPACITY
         L     R4,=F'198'         LOAD 2305-2 BLOCK OVERHEAD
         AH    R4,DCBBLKSI        ADD THE BLOCK SIZE
         DR    R2,R4              COMPUTE BLOCKS PER TRACK
         ST    R3,BLKTRACK        SAVE BLOCKS/TRACK
         B     DEVEND             FINISH THE ROUTINE
D2314    XR    R2,R2              CLEAR FOR DIVIDE
         LH    R3,DCBBLKSI        INITIALIZE W/ BLOCKSIZE
         MH    R3,=H'534'         FIGURE SOME MULTIPLE
         D     R2,=F'512'         FIGURE SOME QUOTIENT
         LR    R4,R3              MOVE TO SECOND HALF
         AH    R4,=H'101'         ADD IN SOME OVERHEAD BYTES
         XR    R2,R2              CLEAR FOR DIVIDE
         L     R3,=F'7294'        LOAD THE TRACK CAPACITY
         DR    R2,R4              COMPUTE BLOCKS/TRACK
         ST    R3,BLKTRACK        SAVE FOR LATER USE
         B     DEVEND             FINISH THE ROUTINE
D3330    XR    R2,R2              CLEAR FOR DIVIDE
         L     R3,=F'13165'       LOAD 3330 TRACK CAPACITY
         L     R4,=F'135'         LOAD 3330 BLOCK OVERHEAD
         AH    R4,DCBBLKSI        ADD THE BLOCK SIZE
         DR    R2,R4              COMPUTE BLOCKS PER TRACK
         ST    R3,BLKTRACK        SAVE BLOCKS/TRACK
         B     DEVEND             FINISH THE ROUTINE
D3340    XR    R2,R2              CLEAR FOR DIVIDE
         L     R3,=F'8535'        LOAD 3340 TRACK CAPACITY
         L     R4,=F'167'         LOAD 3340 BLOCK OVERHEAD
         AH    R4,DCBBLKSI        ADD THE BLOCK SIZE
         DR    R2,R4              COMPUTE BLOCKS PER TRACK
         ST    R3,BLKTRACK        SAVE BLOCKS/TRACK
         B     DEVEND             FINISH THE ROUTINE
D3350    XR    R2,R2              CLEAR FOR DIVIDE
         L     R3,=F'19254'       LOAD 3350 TRACK CAPACITY
         L     R4,=F'185'         LOAD 3350 BLOCK OVERHEAD
         AH    R4,DCBBLKSI        ADD THE BLOCK SIZE
         DR    R2,R4              COMPUTE BLOCKS PER TRACK
         ST    R3,BLKTRACK        SAVE BLOCKS/TRACK
         B     DEVEND             FINISH THE ROUTINE
D3375    XR    R2,R2              CLEAR FOR DIVIDE
         L     R3,=F'36000'       LOAD 3375 TRACK CAPACITY
         L     R4,=F'415'         LOAD 3375 BLOCK OVERHEAD
         AH    R4,DCBBLKSI        ADD THE BLOCK SIZE
         DR    R2,R4              COMPUTE BLOCKS PER TRACK
         ST    R3,BLKTRACK        SAVE BLOCKS/TRACK
         B     DEVEND             FINISH THE ROUTINE
D3380    XR    R2,R2              CLEAR FOR DIVIDE
         L     R3,=F'47968'       LOAD 3380 TRACK CAPACITY
         L     R4,=F'523'         LOAD 3380 BLOCK OVERHEAD
         AH    R4,DCBBLKSI        ADD THE BLOCK SIZE
         DR    R2,R4              COMPUTE BLOCKS PER TRACK
         ST    R3,BLKTRACK        SAVE BLOCKS/TRACK
         B     DEVEND             FINISH THE ROUTINE
DEVEND   DS    0H
         TITLE 'COMPUTE THE TTR AND ISSUE THE POINT'
* ---------COMPUTE D = Q--BLOCKS PER TRACK ON THE DEVICE--------------*
* ---------            R--NEGLIGIBLE----------------------------------*
COMPTTR  XR    R2,R2              CLEAR FOR DIVIDE
         L     R3,BLOCKNO         RELOAD BLOCK NUMBER
         D     R2,BLKTRACK        COMPUTE WHICH TRACK
         LR    R0,R3              SAVE RELATIVE TRACK(BASE 0)
         A     R2,=F'1'           INCREMENT FOR BASE 1
         LR    R1,R2              COPY THE RELATIVE RECORD(BASE 1)
         SLL   R1,24              LEFT JUSTIFY IN R1
         SLDL  R0,8               SHIFT THE BYTE IN
         SLL   R0,8               LEFT JUSTIFY IN R0
         ST    R0,POINTTTR        STORE FOR THE POINT
         SPACE 3
         POINT (R9),POINTTTR      ISSUE THE MACRO
         SPACE 3
         XR    R15,R15            SET THE RETURN CODE
         BR    R10                RETURN
         SPACE 3
         TITLE 'CONSTANT AREA'
MSG1     DC    C'1LISTING OF USERIDS FROM THE RACF DATA SET'
MSG1L    EQU   *-MSG1
MSG2     DC  C'     USERID    EXPDATE      PERTINENT INFORMATION'
MSG2L    EQU   *-MSG2
MSG3     DC  C' USERID HAS NEVER BEEN USED.'
MSG3L    EQU   *-MSG3
MSG4     DC  C' PASSWORD IS CURRENTLY EXPIRED.'
MSG4L    EQU   *-MSG4
MSG5     DC  C' PASSWORD WILL EXPIRE BEFORE THE THRU DATE'
MSG5L    EQU   *-MSG5
MSG6     DC    C' USERID WILL REMAIN ACTIVE AFTER THE THRU DATE.'
MSG6L    EQU   *-MSG6
MSG7     DC    C' THE FOLLOWING CLASSIFICATIONS OF USERIDS ARE BEING LIX
               STED:'
MSG7L    EQU   *-MSG7
MSG8     DC    C' A (PASSWORD WILL REMAIN ACTIVE AFTER THE THRU DATE)'
MSG8L    EQU   *-MSG8
MSG9     DC    C' E (PASSWORD IS CURRENTLY EXPIRED)'
MSG9L    EQU   *-MSG9
MSG10    DC    C' F (PASSWORD WILL EXPIRE BEFORE THE FUTURE THRU DATE)'
MSG10L   EQU   *-MSG10
MSG11    DC    C' N (NEVER USED AS A LOGON ID)'
MSG11L   EQU   *-MSG11
MSG12    DC    C' THE FOLLOWING USERIDS ARE BEING EXCLUDED:'
MSG12L   EQU   *-MSG12
MSG13    DC    C' NO USERIDS ARE BEING EXCLUDED'
MSG13L   EQU   *-MSG13
MSG14    DC    C' THE TOTAL NUMBER OF RACF USERIDS READ WAS  '
MSG14L   EQU   *-MSG14
MSG15    DC    C' F (FUTURE EXPIRATIONS NOT REQUESTED BUT WAS FORCED)'
MSG15L   EQU   *-MSG15
MSG16    DC    C' AN ERROR WAS DETECTED IN THE SYNTAX OF THE THRU DATE'
MSG16L   EQU   *-MSG16
MSG17    DC    C' PROCESSING WILL CONTINUE WITH THE DEFAULT OF TODAY"S X
               DATE + 7'
MSG17L   EQU   *-MSG17
MSG18    DC    C' THE ACTUAL THRU DATE BEING USED IS '
MSG18L   EQU   *-MSG18
         SPACE
ERR1     DC    C' *** RACFUSER ABORTED - AN ERROR HAS BEEN DETECTED'
ERR1L    EQU   *-ERR1
ERR2     DC    C' *** AN ERROR OCCURRED IN THE INDEX RECORDS'
ERR2L    EQU   *-ERR2
ERR3     DC    C' *** AN INVALID PROFILE HEADER HAS BEEN DETECTED'
ERR3L    EQU   *-ERR3
ERR4     DC    C' *** AN INVALID PROFILE NAME LENGTH HAS BEEN DETECTED'
ERR4L    EQU   *-ERR4
ERR5     DC    C' *** EXCLUDE TABLE HAS BEEN EXCEEDED - PLEASE EXPAND'
ERR5L    EQU   *-ERR5
         SPACE
LPP      DC    F'60'              PRODUCE 60 LINES PER PAGE
XDATEDIT DC    CL8'XDATEDIT'      CONSTANT FOR THE LOAD FOR XDATEDIT
         SPACE
IDGOOD   DC    CL3'   '           USERID IS CURRENTLY ACTIVE
IDEXPD   DC    CL3'  *'           USERID IS CURRENTLY EXPIRED
ID2EXP   DC    CL3' **'           USERID WILL EXPIRE IN THE FUTURE
IDBTCH   DC    CL3'+++'           USERID WILL EXPIRE AND IS PRODUCTION
IDEBTCH  DC    CL3'  +'           USERID IS EXPIRED AND IS PRODUCTION
         TITLE 'DCB FOR RACF MASTER FILE'
RACFMAST DCB   BUFNO=1,MACRF=(RP),DSORG=PS,DEVD=DA,DDNAME=RACFMAST
         TITLE 'DCB FOR EXCLUDE TABLE'
RACFEXCL DCB   BUFNO=3,MACRF=(GM),DSORG=PS,DEVD=DA,DDNAME=RACFEXCL,    X
               EODAD=PEXC104
         TITLE 'DCB FOR LISTING OF USERS'
SYSPRINT DCB   LRECL=80,BLKSIZE=17520,BUFNO=1,RECFM=FBA,MACRF=(PM),    X
               DSORG=PS,DEVD=DA,DDNAME=SYSPRINT
         TITLE 'WORK/SAVE AREA'
SAVEAREA DSECT
REGSAVE  DS    18F                AREA FOR REGS
SAVEINDX DS    F                  AREA FOR R10 TEMPORARILY
SAVEPROF DS    F                  AREA FOR R10 TEMPORARILY
SAVEPRT  DS    F                  AREA FOR R10 TEMPORARILY
SAVEPARM DS    F                  AREA FOR R10 TEMPORARILY
SAVEEXC1 DS    F                  AREA FOR R10 TEMPORARILY
SAVESTAT DS    F                  AREA FOR R10 TEMPORARILY
PARMADDR DS    F                  ADDRESS OF PARM AREA
         SPACE
XDATADDR DS    F                  ADDRESS OF THE LOAD MODULE
XDATEPRM DS    F                  ADDRESS OF THE XDATEDIT WORK AREA
XDATEWRK DS    D                  WORK AREA FOR XDATEDIT
YDATEPRM DS    F                  ADDRESS OF THE YDATEDIT WORK AREA
YDATEWRK DS    D                  WORK AREA FOR YDATEDIT
         SPACE
PSWDPDAT DS    D                  DATE PASSWORD LAST CHANGED - PACKED
EXPDPDAT DS    D                  DATE PASSWORD EXPIRED - PACKED
CRNTPDAT DS    D                  CURRENT DATE - PACKED
TRGTPDAT DS    D                  TARGET EXPIRATION DATE - PACKED
         SPACE
PSWDBDAT DS    F                  DATE PASSWORD LAST CHANGED - BINARY
EXPDBDAT DS    F                  DATE PASSWORD EXPIRED - BINARY
CRNTBDAT DS    F                  CURRENT DATE - BINARY
TRGTBDAT DS    F                  TARGET EXPIRATION DATE - BINARY
         SPACE
PSWDDAY  DS    F                  DAY  PORTION IN BINARY OF PSWDBDAT
EXPDDAY  DS    F                  DAY  PORTION IN BINARY OF EXPDBDAT
CRNTDAY  DS    F                  DAY  PORTION IN BINARY OF CRNTBDAT
TRGTDAY  DS    F                  DAY  PORTION IN BINARY OF TRGTBDAT
         SPACE
PSWDYR   DS    F                  YEAR PORTION IN BINARY OF PSWDBDAT
EXPDYR   DS    F                  YEAR PORTION IN BINARY OF EXPDBDAT
CRNTYR   DS    F                  YEAR PORTION IN BINARY OF CRNTBDAT
TRGTYR   DS    F                  YEAR PORTION IN BINARY OF TRGTBDAT
         SPACE
CRNTDPY  DS    F                  DAYS PER YEAR IN CURRENT YEAR
PSWDDPY  DS    F                  DAYS PER YEAR WHEN PASSWORD LAST SET
CEDSSRBA DS    CL6                RBA OF INDEX SEQUENCE SET
         CNOP  6,8
RBA      DS    CL6                RBA FOR THE POINT MACRO
         CNOP  6,8
RBAINDEX DS    CL6                RBA FOR THE CURRENT INDEX
RBAPROF  DS    CL6                RBA FOR THE CURRENT PROFILE
ENDADRIX DS    F                  ADDRESS OF THE END OF SEQ SET INDEX
RBAOFF   DS    F                  OFFSET TO WHERE ACTUAL DATA BEGINS
RECBLK   DS    F                  COMPUTED NUMBER OF RECORDS/BLOCK
BLOCKNO  DS    F                  RELATIVE BLOCK WHICH CONTAINS RBA
RECNO    DS    F                  RELATIVE REC IN BLOCK WITH DATA
BLKTRACK DS    F                  DEVICE DEPENDENT BLOCKS/TRACK
POINTTTR DS    F                  CALCULATED TTR INFO FOR POINT
PRFNAME  DS    CL8                NAME OF THE PROFILE
         DS    CL8                FILLER
         SPACE 2
*-  SYSPRINT LOGICAL RECORD-----------------------------------------*
LINE     DS    CL80               SYSPRINT LOGICAL RECORD
LINELEN  EQU   *-LINE             LENGTH OF LOGICAL RECORD
LINECNTR DS    F                  LINE COUNTER
PAGECNTR DS    PL4                PAGE COUNTER
USERCNTR DS    PL4                USER COUNTER
         SPACE 2
*-  DATA RECORD 1---------------------------------------------------*
DATA1    DS    0CL80
         DS    CL2                FILLER
DATA1FLG DS    CL3                FLAG
DATA1FLL EQU   *-DATA1FLG         LENGTH OF DATA1FLG
         DS    CL1                FILLER
DATA1USR DS    CL8                USERID
DATA1USL EQU   *-DATA1USR         LENGTH OF DATA1USR
         DS    CL2                FILLER
DATA1EXP DS    CL8                EXPIRATION DATE
DATA1EXL EQU   *-DATA1EXP         LENGTH OF DATA1EXP
         DS    CL2                FILLER
DATA1MSG DS    CL54               INFORMATIVE MESSAGE
DATA1MSL EQU   *-DATA1MSG         LENGTH OF DATA1MSG
         SPACE 2
         ORG   DATA1    BEGIN THE REDEFINES FOR A SECOND MESSAGE
DATA2    DS    0CL80
DATA2MSG DS    CL70               INFORMATIVE MESSAGE
DATA2TTL DS    CL6                FIELD TITLE
DATA2PAG DS    CL3                PAGE NUMBER
         DS    CL1                FILLER
         SPACE 2
         ORG   DATA1    BEGIN THE REDEFINES FOR EXCLUDE TABLE USERID
DATA3    DS    0CL80
DATA3UID DS    CL8                USERID
         DS    CL72               FILLER
         SPACE 2
         ORG   DATA1    BEGIN THE REDEFINES FOR EXCLUDE TABLE COMMENT
DATA4    DS    0CL80
DATA4STR DS    CL1                COMMENT
         DS    CL79               FILLER
         SPACE 2
         ORG   DATA1    BEGIN THE REDEFINES FOR EXCLUDE TABLE COMMENT
DATA5    DS    0CL80
DATA5MSG DS    CL45               MESSAGE AREA
DATA5CNT DS    CL5                NUMBER OF USERIDS
         DS    CL30               FILLER
DATA5LEN EQU   *-DATA5            LENGTH OF DATA1
         ORG   DATA1    BEGIN THE REDEFINES FOR THRU DATE MESSAGE
DATA6    DS    0CL80
DATA6MSG DS    CL40               MESSAGE AREA
DATA6MDY DS    CL8                DATE IN MM/DD/YY FORMAT
         DS    CL5                FILLER
DATA6BP  DS    CL1                BEGINNING PARENTHESIS
DATA6JOU DS    CL5                DATE IN YYDDD    FORMAT
DATA6EP  DS    CL1                ENDING PARENTHESIS
         DS    CL30               FILLER
DATA6LEN EQU   *-DATA6            LENGTH OF DATA1
DATA1LEN EQU   *-DATA1            LENGTH OF DATA1
         SPACE 3
PARMFLAG DS    C                  FLAG FROM PARM INFO
PARMA    EQU   X'01'              LIST THE USERS THAT ARE ACTIVE
PARME    EQU   X'02'              LIST THE EXPIRED USERS
PARMF    EQU   X'04'              LIST THE FUTURE EXPIRATIONS
PARMN    EQU   X'08'              LIST THE NEVER USED USERS
         SPACE 3
RACFINDX DS    CL1024             I/O AREA FOR ICB/INDEX BLOCKS
         SPACE
RACFPROF DS    CL1024             I/O AREA FOR PROFILES
         SPACE
EXCTABLE DS    100CL8             TABLE OF EXCLUDED USERIDS
EXCTABLN EQU   *-EXCTABLE         TABLE LENGTH
EXCTBMAX DS    F                  MAXIMUM TABLE SIZE
EXCTBCNT DS    F                  ACTUAL NUMBER OF TABLE ENTRIES
         SPACE
SAVEALEN EQU   *-SAVEAREA         LENGTH OF SAVE AREA
         SPACE 3
         REGISTER                 NAME THE REGISTERS
         TITLE 'RACF ICB - LAYOUT OF KEY FIELDS'
ICBREC   DSECT                    LAYOUT OF KEY FIELDS IN THE ICB
         DS    CL14               FILLER
ICISSRBA DS    CL6                RBA OF INDEX SEQUENCE SET
         DS    CL1004             FILLER
         TITLE 'RACF SEQUENCE SET RECORD - LAYOUT OF KEY FIELDS'
HEX00    EQU   X'00'                X'00'
HEX01    EQU   X'01'                X'01'
HEX02    EQU   X'02'                X'02'
HEX20    EQU   X'20'                X'20'
HEX21    EQU   X'21'                X'21'
HEX22    EQU   X'22'                X'22'
HEX4E    EQU   X'4E'                X'4E'
HEX62    EQU   X'62'                X'62'
HEX66    EQU   X'66'                X'66'
HEX82    EQU   X'82'                X'82'
HEX8A    EQU   X'8A'                X'8A'
         SPACE
INDXHREC DSECT                    LAYOUT OF THE SEQUENCE SET HEADER
INDXHDR  DS    0H              RECORD 1 - THE HEADER
INDXHID  DS    C                  INDEX BLOCK IDENTIFIER (X'8A')
INDXHLN  DS    AL2                INDEX BLOCK LENGTH     (X'0400')
INDXHI2  DS    C                  INDEX BLOCK IDENTIFIER (X'4E')
INDXHFI  DS    C                  FORMAT ID              (X'00')
INDXHILN DS    C                  INDEX LEVEL NUMBER
INDXHO1  DS    AL2                OFFSET TO SEQ SET CHAIN POINTER
INDXHO2  DS    AL2                OFFSET TO FREE SPACE
         SPACE
INDXEREC DSECT                    LAYOUT OF THE INDEX ENTRY
INDXENT  DS    0H              RECORD 2 - THE INDEX ENTRIES
INDXEID  DS    C                  ENTRY IDENTIFIER
INDXELN  DS    C                  ENTRY LENGTH + 3
INDXECMP DS    C                  ENTRY FRONT-END COMPRESSION COUNT
INDXENAM DS    CL8                ENTRY NAME - ***** VARIABLE *****
INDXEPID DS    C                  ENTRY POINTER IDENTIFIER
INDXERBA DS    CL6                RBA OF PROFILE
         SPACE
INDXCREC DSECT                    LAYOUT OF THE INDEX CHAIN POINTER
INDXCHN  DS    0H              RECORD 3 - THE INDEX CHAIN
INDXCPID DS    C                  CHAIN POINTER IDENTIFIER (X'20')
INDXCPI  DS    C                  ENTRY POINTER IDENTIFIER (62 OR 66)
INDXCRBA DS    CL6                RBA OF NEXT LEVEL 1 BLOCK
         TITLE 'RACF PROFILE RECORD - LAYOUT OF KEY FIELDS'
PROFHREC DSECT                    LAYOUT OF THE PROFILE HEADER
PROFHDR  DS    0H              RECORD 1 - THE HEADER
PROFRID  DS    C                  PROFILE RECORD IDENTIFIER
PROFPLR  DS    AL2                PROFILE PHYSICAL RECORD LENGTH
PROFLLR  DS    AL2                PROFILE LOGICAL  RECORD LENGTH
PROFNLEN DS    C                  PROFILE NAME LENGTH
PROFNAME DS    C                  PROFILE NAME
         SPACE
PROFEREC DSECT                    LAYOUT OF THE PROFILE ENTITY RECORD
PROFUSER DS    0H              RECORD 2 - THE USER TEMPLATE
PROFENT  DS    C                  PROFILE ENTYPE FOR USER (X'02')
         DS    CL17               FILLER
PROFPINT DS    C                  PASSWORD INTERVAL
         DS    CL8                FILLER
PROFPDAT DS    CL3                DATE PASSWORD LAST CHANGED
         SPACE 3
PARMREC  DSECT                    LAYOUT OF THE PARMETER RECORD
PARMRECD DS    0H                 PARMETER RECORD
PARMCNT  DS    H                  LENGTH OF THE PARM INFO
PARMDATA DS    CL80               VERBAGE
         SPACE 3
         PRINT NOGEN
         DCBD  DSORG=(BS),DEVD=DA
         SPACE 3
         END
//LKED.SYSLMOD DD DSN=MVS.SYSTEMS.LINKLIB(RACFUSER),DISP=SHR,SPACE=
//PROC02    EXEC ASMFCL,PARM.LKED='XREF,LET,LIST'
//ASM.SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR
//ASM.SYSPRINT DD SYSOUT=*
//ASM.SYSIN    DD *
XDATEDIT TITLE 'DATE CONVERSION SUBROUTINE'
***********************************************************************
*                                                                     *
* XDATEDIT                                                            *
*                                                                     *
* FUNCTION     CONVERT DATE FROM JULIAN DATE (YYDDD) IN PACKED        *
*              DECIMAL FORM TO MM/DD/YY IN EBCDIC.                    *
*                                                                     *
* DESCRIPTION  XDATEDIT IS CALLED TO CONVERT THE DATE FROM            *
*              A PACKED DECIMAL JULIAN DATE TO MONTH, DAY,            *
*              YEAR FORM IN EBCDIC FOR PRINTING.                      *
*                                                                     *
*              IF THE DATE IS VALID, IT WILL BE CONVERTED TO          *
*              MM/DD/YY FORM IN EBCDIC.  IF THE DATE IS INVALID       *
*              IT WILL BE CONVERTED TO BYY.DDDB IN EBCDIC, WHERE      *
*                      B    REPRESENTS A BLANK                        *
*                      YY   REPRESENTS THE YEAR                       *
*                      DDD  REPRESENTS THE DAY OF THE YEAR            *
*                                                                     *
* INPUT        REGISTER 1 POINTS TO THE WORK AREA, AN 8 BYTE          *
*              FIELD.  THE FIELD CONTAINS THE PACKED DECIMAL          *
*              JULIAN DATE IN THE LOW ORDER 3 BYTES OF THE FIELD.     *
*                                                                     *
* OUTPUT       THE WORK AREA CONTAINS THE DATE IN EBCDIC FORM.        *
*                                                                     *
*              REGISTER 15 WILL CONTAIN A RETURN CODE -               *
*                      0 - VALID DATE - WORK AREA CONTAINS MM/DD/YY   *
*                                       IN EBCDIC.                    *
*                      4 - INVALID DATE - WORK AREA CONTAINS          *
*                                       BYY.DDDB IN EBCDIC.           *
*                                                                     *
*          UPDATE HISTORY                                             *
*                                                                     *
*   DATE   USERID  FUNCTION PERFORMED                                 *
*                                                                     *
***********************************************************************
         SPACE 3
         MACRO
         REGISTER
         LCLA  &NUM
&NUM     SETA  0
         SPACE 2
.LOOP    ANOP
R&NUM    EQU   &NUM
&NUM     SETA  &NUM+1
         AIF   (&NUM LE 15).LOOP
         SPACE  2
         MEND
         SPACE 3
XDATEDIT CSECT
         SAVE  (14,12),,XDATEDIT.&SYSDATE..&SYSTIME.
         LR    R12,R15                 R15 MUST HAVE THE ENTRY POINT
         USING XDATEDIT,R12
         SPACE 2
         L     R11,0(R1)               LOAD ADDR OF PARAMETER
         MVI   0(R11),X'00'            ZERO FIRST BYTE
         MVC   1(4,R11),0(R11)         ZERO 4 MORE BYTES
         OI    7(R11),X'0F'            SET SIGN CODE OF LAST BYTE
         SPACE
         L     R2,4(0,R11)             LOAD PACKED JULIAN DATE
         CVB   R5,0(0,R11)             CONVERT TO BINARY
         SR    R4,R4                   CLEAR HIGH REGISTER
         D     R4,F1000                DIVIDE BY 1000 TO GET YEAR
         LA    R7,NORMALYR             LOAD NORMAL YEAR TABLE ADDRESS
         LTR   R6,R5                   COPY QUOTIENT TO R6
         BZ    CHECKDAY
         N     R6,MASK                 SEE IF YEAR DIVISIBLE BY 4
         BNZ   CHECKDAY
         LA    R7,LEAPYEAR             LOAD LEAP YEAR TABLE ADDRESS
         SPACE
CHECKDAY LTR   R4,R4                   TEST DAY AGAINST MINIMUM
         BZ    BADDAY
         CH    R4,0(R7)                TEST DAY AGAINST MAXIMUM
         BH    BADDAY
         LA    R3,1                    INITIALIZE MONTH
         SR    R6,R6                   CLEAR REGISTER 6
         SPACE
FINDMNTH IC    R6,1(R3,R7)             INSERT DAYS IN MONTH
         CR    R4,R6                   COMPARE AGAINST DAYS LEFT
         BNH   GOTMONTH
         SR    R4,R6                   SUBTRACT FROM DAYS LEFT
         LA    R3,1(R3)                INCREMENT MONTH
         B     FINDMNTH                LOOP BACK
         SPACE
GOTMONTH MH    R3,H1000                MULTIPLY MONTH BY 1000      MM00
         AR    R3,R4                   ADD DAY                     MMDD
         MH    R3,H1000                MULTIPLY BY 1000          MMDD00
         AR    R3,R5                   ADD YEAR                  MMDDYY
         CVD   R3,0(0,R11)             CONVERT TO DECIMAL
         MVC   0(5,R11),3(R11)         LEFT JUSTIFY
         UNPK  0(8,R11),0(5,R11)       UNPACK
         OI    7(R11),X'F0'            SET SIGN CODE
         MVI   2(R11),C'/'             ADD /
         MVI   5(R11),C'/'             ADD /
         SPACE
         XR    R15,R15                 CLEAR RETURN CODE
RETURN   RETURN (14,12),,RC=(15)       RETURN
         SPACE 3
BADDAY   ST    R2,0(0,R11)             STORE ORIGINAL DATA
         UNPK  2(5,R11),1(3,R11)       UNPACK
         MVC   1(2,R11),2(R11)         SLIDE YR TO MAKE ROOM FOR .
         MVI   0(R11),C' '             ADD BLANK
         MVI   3(R11),C'.'             ADD .
         MVI   7(R11),C' '             ADD BLANK
         LA    R15,4                   SET RETURN CODE
         B     RETURN                  RETURN
         TITLE 'CONSTANTS AND LITERALS'
NORMALYR DC    H'365'
         DC    FL1'31,28,31,30,31,30,31,31,30,31,30,31'
         SPACE
LEAPYEAR DC    H'366'
         DC    FL1'31,29,31,30,31,30,31,31,30,31,30,31'
         SPACE
F1000    DC    F'1000'
H1000    EQU   F1000+2
         DS    1F
MASK     DC    X'00000003'
         SPACE 3
         LTORG
         TITLE 'REGISTERS'
         REGISTER
         END
//LKED.SYSLMOD DD DSN=MVS.SYSTEMS.LINKLIB(XDATEDIT),DISP=SHR,SPACE=
//PROC03    EXEC ASMFCL,PARM.LKED='XREF,LET,LIST'
//ASM.SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR
//ASM.SYSPRINT DD SYSOUT=*
//ASM.SYSIN    DD *
YDATEDIT TITLE 'DATE CONVERSION SUBROUTINE'
***********************************************************************
*                                                                     *
* YDATEDIT                                                            *
*                                                                     *
* FUNCTION     CONVERT DATE FROM MM/DD/YY IN EBCDIC TO JULIAN DATE    *
*              (YYDDD) IN PACKED DECIMAL FORM.                        *
*                                                                     *
* DESCRIPTION  YDATEDIT IS CALLED TO CONVERT THE DATE FROM MONTH,     *
*              DAY, YEAR FORM IN EBCDIC TO A PACKED DECIMAL JULIAN    *
*              DATE.  THIS IS USEFUL WHEN THE DATE IS READ IN OR      *
*              IS ENTERED VIA A PARM FIELD.                           *
*                                                                     *
*              IF THE DATE IS VALID, IT WILL BE CONVERTED TO          *
*              YYDDDC FORM.  IF THE DATE IS INVALID, IT WILL NOT BE   *
*              MODIFIED.                                              *
*                                                                     *
* INPUT        REGISTER 1 POINTS TO THE WORK AREA, AN 8 BYTE          *
*              FIELD WHICH CONTAINS THE MM/DD/YY FORM OF THE DATE.    *
*                                                                     *
* OUTPUT       THE WORK AREA CONTAINS THE DATE IN PACKED DECIMAL      *
*              JULIAN FORMAT WITH A POSITIVE SIGN.                    *
*                                                                     *
*              REGISTER 15 WILL CONTAIN A RETURN CODE -               *
*                      0 - VALID DATE - WORK AREA CONTAINS YYDDDC     *
*                      4 - INVALID DATE - WORK AREA WAS NOT MODIFIED  *
*                                                                     *
* PROGRAM COMMENTS - NONE                                             *
*                                                                     *
*          UPDATE HISTORY                                             *
*                                                                     *
*   DATE   USERID  FUNCTION PERFORMED                                 *
*                                                                     *
***********************************************************************
         SPACE 3
         MACRO
         REGISTER
         LCLA  &NUM
&NUM     SETA  0
         SPACE 2
.LOOP    ANOP
R&NUM    EQU   &NUM
&NUM     SETA  &NUM+1
         AIF   (&NUM LE 15).LOOP
         SPACE  2
         MEND
         SPACE 3
YDATEDIT CSECT
         SAVE  (14,12),,YDATEDIT.&SYSDATE..&SYSTIME.
         LR    R12,R15                 R15 MUST HAVE THE ENTRY POINT
         USING YDATEDIT,R12
         SPACE 2
         L     R11,0(R1)               LOAD ADDR OF PARAMETER
         SPACE
CHKSLASH DS    0H                      CHECK DATE FORMAT
         CLI   2(R11),C'/'             Q. IS THIS A VALID DATE FORMAT ?
         BNE   BADDATE                 A. NO, MISSING '/'
         CLI   5(R11),C'/'             Q. IS THIS A VALID DATE FORMAT ?
         BNE   BADDATE                 A. NO, MISSING '/'
MOVEDATE DS    0H                      MOVE TO REGISTERS
         XR    R2,R2                   CLEAR THE REGISTER
         XR    R3,R3                   CLEAR THE REGISTER
         ICM   R2,3,0(R11)             PUT THE EBCDIC MONTH IN R2
         ICM   R3,3,3(R11)             PUT THE EBCDIC DAY   IN R3
*
         MVC   0(4,R11),=XL8'0000000000000000'   CLEAR THE WORK AREA
         PACK  0(2,R11),6(2,R11)       MAKE THE YEAR PACKED DECIMAL
         MVC   6(2,R11),0(R11)         MOVE TO A DOUBLE WORD BOUNDARY
         MVC   0(6,R11),=XL8'0000000000000000'   CLEAR THE WORK AREA
         CVB   R4,0(R11)               GET THE BINARY YEAR IN R4
*
         MVC   0(8,R11),=XL8'0000000000000000'   CLEAR THE WORK AREA
         ST    R3,4(R11)               RETURN THE EBCDIC DAY
         PACK  0(2,R11),6(2,R11)       MAKE THE DAY  PACKED DECIMAL
         MVC   6(2,R11),0(R11)         MOVE TO A DOUBLE WORD BOUNDARY
         MVC   0(6,R11),=XL8'0000000000000000'   CLEAR THE WORK AREA
         CVB   R5,0(R11)               GET THE BINARY DAY
*
         MVC   0(8,R11),=XL8'0000000000000000'   CLEAR THE WORK AREA
         ST    R2,4(R11)               RETURN THE EBCDIC MONTH
         PACK  0(2,R11),6(2,R11)       MAKE THE MONTH PACKED DECIMAL
         MVC   6(2,R11),0(R11)         MOVE TO A DOUBLE WORD BOUNDARY
         MVC   0(6,R11),=XL8'0000000000000000'   CLEAR THE WORK AREA
         CVB   R6,0(R11)               GET THE BINARY MONTH
LEAPCHK  DS    0H
         XR    R8,R8                   CLEAR FOR THE DIVIDE
         LR    R9,R4                   MOVE THE YEAR FOR THE DIVIDE
         LA    R10,4                   LOAD A DIVISOR
         DR    R8,R10                  DIVIDE BY 4
         LTR   R8,R8                   Q. IS THE REMAINDER ZERO ?
         BE    LEAPYES                 A. YES, PROBABLY A LEAP YEAR
LEAPNO   DS    0H
         LA    R3,NORMALYR             ADDRESS OF NORMAL YEAR TABLE
         B     ADDMONTH
LEAPYES  DS    0H
         LA    R3,LEAPYEAR             ADDRESS OF LEAP YEAR TABLE
         B     ADDMONTH
ADDMONTH DS    0H
         LR    R2,R6                   USE THE MONTH TO INDEX TABLE
         BCTR  R2,0                    DECREMENT FOR (MONTH-1)
         XR    R9,R9                   CLEAR FOR ACCUMULATING DAYS
         LTR   R2,R2                   Q. SHOULD I GO THRU THE LOOP
         BE    ADDDAYS                 A. NO, JUST ADD THE DAYS
ADDMTHLP DS    0H
         XR    R10,R10                 CLEAR THE REGISTER
         IC    R10,0(R3)               INSERT DAYS PER MONTH
         AR    R9,R10                  ADD THE DAYS PER MONTH
         LA    R3,1(R3)                INCREMENT FOR THE NEXT MONTH
         BCT   R2,ADDMTHLP             CONTINUE
ADDDAYS  DS    0H
         AR    R9,R5                   ADD THE DAYS IN CURRENT MONTH
RECONVRT DS    0H
         CVD   R4,0(R11)               CONVERT YEAR TO PACKED DECIMAL
         L     R8,4(R11)               MOVE TO R8
         CVD   R9,0(R11)               CONVERT DAYS TO PACKED DECIMAL
         L     R9,4(R11)               MOVE TO R9
STUFFIT  DS    0H
         SRL   R8,4                    KILL THE SIGN ON THE YEAR
         SLL   R9,16                   MOVE THE DAYS OVER
         SLDL  R8,12                   MOVE DAYS IN R8
         LA    R9,12                   LOAD THE SIGN
         SLL   R9,28                   MOVE THE SIGN OVER
         SLDL  R8,4                    MOVE THE SIGN INTO POSITION
         MVC   0(8,R11),=XL8'0000000000000000' CLEAR THE WORK AREA
         ST    R8,4(R11)               SAVE THE DATE
GOODDATE DS    0H
         XR    R15,R15                 CLEAR RETURN CODE
         B     RETURN                  RETURN
         SPACE 3
BADDATE  DS    0H
         LA    R15,4                   SET RETURN CODE
         B     RETURN                  RETURN
         SPACE 3
RETURN   RETURN (14,12),,RC=(15)       RETURN
         TITLE 'CONSTANTS AND LITERALS'
NORMALYR DC    FL1'31,28,31,30,31,30,31,31,30,31,30,31'
         SPACE
LEAPYEAR DC    FL1'31,29,31,30,31,30,31,31,30,31,30,31'
         SPACE 3
         LTORG
         TITLE 'REGISTERS'
         REGISTER
         END
//LKED.SYSLMOD DD DSN=MVS.SYSTEMS.LINKLIB(YDATEDIT),DISP=SHR,SPACE=
//
