IBM System/370 MVS/TSO Kermit 4.0 Installation Instructions:
                 (Revised 1988 September)

1. Get the necessary files from the Kermit distribution tape or from
   BITNET KERMSRV or elsewhere into your disk area.  Note that many
   of the files are generic for Kermit-370 and may already be locally
   available to you from a VM/CMS site.  As distributed by Columbia,
   the files are named as follows (all with prefix IKT or IK0).  Files
   that are new or revised for this version of the installation guide
   are noted with asterisks.

 * IKTDYN.ASM  Assembler source for DYNALC subroutine
 * IKTGUP.ASM  Assembler source for TSO-specific part of GUPI
 * IKTGUP.HLP  GUPI help file, TSO HELP format
   IKTKER.ANN  Text of Kermit-TSO 4.0 Announcement
   IKTKER.BWR  A "beware" file, listing known bugs and problems
   IKTKER.DOC  Kermit User Guide chapter for TSO, plain text
   IKTKER.HLP  Kermit-TSO help file, TSO HELP format
 * IKTKER.INS  Kermit-TSO installation instructions (this file)
   IKTKER.MSS  Scribe source for IKTKER.DOC
 * IKTKER.UPD  Updates for TSO version of Kermit-370
 * IKTMAC.ASM  Assembler source for TSO-specific macros
   IKTUTL.ASM  Assembler source for TSO-specific routines
   IK0CMD.ASM  Assembler source for command handler
   IK0COM.ASM  Assembler source for global code
   IK0CON.HLP  Notes on implementing alternate terminal controllers
   IK0DEF.ASM  Assembler source for parameter definitions
   IK0DOC.ASM  Assembler source with brief history
   IK0GUP.ASM  Assembler source for generic update program GUPI
   IK0KER.DOC  Kermit User Guide chapter for Kermit-370, plain text
   IK0KER.MSS  Scribe source for IK0KER.DOC
   IK0KER.UPD  Update history for Kermit-370
   IK0MAC.ASM  Assembler source for generic Kermit macros
   IK0MAI.ASM  Assembler source for storage initialization
   IK0PRO.ASM  Assembler source for generic routines

2. Rename and reformat, if necessary, the source files on disk.  Collect
   all the source files (those with extensions of ".ASM") in your disk
   area with names as shown above, and make sure that each one has
   RECFM=FB,LRECL=80, and that all have the same block size.  You
   will also need IKTKER.UPD.  Allocate datasets to contain the
   assembled and executable code as follows:

   ATTR K1OBJ RECFM(FB) LRECL(80) BLKSIZE(1680) DSORG(PO)
   ALLOC DSN(KERMIT.OBJ) USING(K1OBJ) SPACE(10,20) TRACKS DIR(5)
   ATTR K1LOD RECFM(U) BLKSIZE(6144) DSORG(PO)
   ALLOC DSN(KERMIT.LOAD) USING(K1LOD) SPACE(10,20) TRACKS DIR(10)

   Copy IKTKER.HLP into the system Help library with a member name of
   KERMIT so that the TSO HELP KERMIT command and Kermit-TSO's built-in
   HELP subcommand can find it.  Similarly, copy IKTGUP.HLP into member
   GUPI.

   The Kermit User Guide for TSO is distributed in two parts: IKTKER.DOC
   and IK0KER.DOC; these may be kept wherever you keep online documenta-
   tion files, renamed appropriately.

   Note 1: If you prefer, you may elect to keep the source files in a
   PDS.  If so, be sure to use RECFM=FB,LRECL=80.  Also change the DSN
   references in the following job accordingly.

   Note 2: The procedure given below assumes the availability of sources
   contemporaneous with this file, in particular, IKTDYN, IKTMAC,
   IKTGUP, and IK0GUP.

   Note 3: The procedure given below preserves the sequence numbers in
   columns 73-80 of the source files. If you elect to use an editor to
   merge files, be absolutely sure that you don't inadvertantly lose the
   original sequence numbers (something editors are prone to do).

   Note 4: The resulting load library KERMIT.LOAD must be placed in the
   link list so that the KERMIT load module will be treated as a COMMAND
   PROCESSOR (if not in SYS1.LINKLIST, then either concatenated to the
   STEPLIB for the default LOGON PROC or made known to all potential
   Kermit users, so that they can do the concatenation themselves).  One
   way of testing a newly installed Kermit is to invoke it under TEST
   with the CP option.

3. The Generic Update Program for IBM-370 (GUPI) handles standard update
   information in the format found in IKTKER.UPD.  Like Kermit itself,
   GUPI is composed of a generic part and a TSO-specific part.  The
   former consists of IK0GUP.ASM plus parts of IK0MAC.ASM, and the
   latter similarly consists of IKTGUP.ASM plus parts of IKTMAC.ASM.

   The following batch job creates the executable program GUPI and uses
   it to apply the available updates to Kermit and then creates the
   executable load module KERMIT.  You must tailor the job to your site
   by (1) supplying an appropriate JOB card and (2) changing the string
   "<user>" into the top-level qualifier of your disk area.  The JOB
   card should insure, if necessary, a region of at least 1024K to allow
   execution of the assembler and GUPI.  Although the job is as generic
   as possible, there may be other local variations, such as the choice
   of assembler (along with the DDNAME for the object output).  An
   abbreviated form of the job may be run to apply additional updates
   after the initial installation (simply omit job steps CNVASM through
   GUPLNK).  You will also wish to use a new ALIAS for each new version
   of the load module.

//JOBLIB   DD DSN=<user>.KERMIT.LOAD,DISP=OLD
//* INPUT:  <user>.IK*.ASM, <user>.IKTKER.UPD
//* OUTPUT: <user>.KERMIT.LOAD, <user>.KERMIT.OBJ  (both pre-allocated)
//*
//KASM   PROC PRM=,USRMAC='SYS1.AMODGEN',MEMBER=NULL
//ASM    EXEC PGM=IFOX00,PARM='NORLD,NODECK,OBJECT,&PRM'
//SYSIN    DD DSN=&SOURCE,DISP=(OLD,PASS)
//* SYSGO    DD DDNAME=SYSLIN          (activate if assembler wants it)
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR
//         DD DSN=&USRMAC,DISP=(SHR,PASS)
//SYSLIN   DD DSN=<user>.KERMIT.OBJ(&MEMBER),DISP=(OLD,PASS)
//SYSPRINT DD SYSOUT=*
//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,(5,2))
//SYSUT2   DD UNIT=(SYSDA,SEP=SYSUT1),SPACE=(CYL,(5,2))
//SYSUT3   DD UNIT=(SYSDA,SEP=SYSUT1),SPACE=(CYL,(5,2))
//       PEND
//KLINK  PROC
//LNK    EXEC PGM=IEWL,PARM=LET
//SYSLMOD  DD DSN=<user>.KERMIT.LOAD,DISP=OLD
//SYSPRINT DD SYSOUT=*
//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,(5,2))
//       PEND
//*
//* ---------------- CUT HERE AFTER 1ST SUBMISSION ----------------
//*        Create exit routine for IEBGENER
//CNVASM EXEC KASM
//SYSIN    DD *
UPDCNV0  START
         SAVE  (14,12),,*
         USING UPDCNV0,15
         LM    1,2,0(1)      Get parms
         LH    3,82(2)       LRECL
         LH    4,62(2)       BLKSI
         AR    4,1           End of buffer
         TM    36(2),X'40'   RECFM=V?
         BO    QUIT          Yes, error
CVTLP    CLC   =C'*COPY ',0(1)
         BNE   NOTCOPY
         CLC   5(48,1),6(1)
         BNE   NOTCOPY
         MVC   0(12,1),=C'./ ADD NAME='
         MVC   12(8,1),54(1) Copy name into ADD stmt
NOTCOPY  AR    1,3           Space over record
         CR    1,4
         BL    CVTLP         Finish block
         SR    15,15
QUIT     RETURN (1,12),RC=(15)
         END   UPDCNV0
//SYSLIN   DD DSN=&&UPDC,DISP=(NEW,PASS),UNIT=SYSDA,SPACE=(CYL,(1,1)),
//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=1680)
//*   Link into job library
//CNVLNK EXEC KLINK
//SYSLIN   DD DSN=&&UPDC,DISP=(OLD,DELETE)
//         DD *
         NAME UPDCNV0(R)
//*   Assemble DYNALC
//DYNASM EXEC KASM,SOURCE='<user>.IKTDYN.ASM',MEMBER=DYNALC
//*   Create sequential file for GUPI macro library
//GUPCPY EXEC PGM=IEBGENER
//SYSIN    DD *
     GENERATE
        EXITS DATA=UPDCNV0
//SYSPRINT DD DUMMY
//SYSUT1   DD DSN=<user>.IK0MAC.ASM,DISP=SHR
//         DD DSN=<user>.IKTMAC.ASM,DISP=SHR
//         DD DSN=<user>.IKTGUP.ASM,DISP=SHR
//SYSUT2   DD DSN=&&GUP,DISP=(NEW,PASS),UNIT=SYSDA,SPACE=(CYL,(1,1)),
//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=2400)
//*   Create GUPI macro library
//GUPLIB EXEC PGM=IEBUPDTE,PARM=NEW
//SYSIN    DD DSN=&&GUP,DISP=(OLD,DELETE)
//SYSPRINT DD DUMMY
//SYSUT2   DD DSN=&&GUPMAC,DISP=(NEW,PASS),UNIT=SYSDA,
//            SPACE=(TRK,(1,1,10),RLSE),
//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)
//*   Assemble and link GUPI
//GUPASM EXEC KASM,SOURCE='<user>.IK0GUP.ASM',MEMBER=GUPI,
//            USRMAC='&&GUPMAC'
//GUPLNK EXEC KLINK
//SYSLIN   DD DSN=<user>.KERMIT.OBJ(GUPI),DISP=SHR
//         DD DSN=<user>.KERMIT.OBJ(DYNALC),DISP=SHR
//         DD *
         NAME GUPI(R)
//* ---------------------- END OF CUT ------------------------
//*   Create updated Kermit ...
//KRMUPD EXEC PGM=GUPI
//SYSIN    DD DSN=<user>.IKTKER.UPD,DISP=SHR
//SYSPRINT DD SYSOUT=*
//SYSUT1   DD DSN=<user>.IK0DOC.ASM,DISP=SHR
//         DD DSN=<user>.IK0MAC.ASM,DISP=SHR
//         DD DSN=<user>.IKTMAC.ASM,DISP=SHR
//         DD DSN=<user>.IK0DEF.ASM,DISP=SHR
//         DD DSN=<user>.IK0MAI.ASM,DISP=SHR
//         DD DSN=<user>.IK0COM.ASM,DISP=SHR
//         DD DSN=<user>.IK0CMD.ASM,DISP=SHR
//         DD DSN=<user>.IKTUTL.ASM,DISP=SHR
//         DD DSN=<user>.IK0PRO.ASM,DISP=SHR
//SYSUT2   DD DSN=&&UPDSRC,DISP=(NEW,PASS),SPACE=(CYL,(1,1)),
//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160),UNIT=SYSDA
//*
//KRMASM EXEC KASM,SOURCE='&&UPDSRC',MEMBER=KERMIT
//*            ,USRMAC='SYS1.AMODGEN'   May be needed for STATUS
//KRMLNK EXEC KLINK
//SYSLIN   DD DSN=<user>.KERMIT.OBJ(KERMIT),DISP=SHR
//         DD DSN=<user>.KERMIT.OBJ(DYNALC),DISP=SHR
//         DD *
        ALIAS KERM40
         NAME KERMIT(R)
//

4. To run Kermit-TSO, simply type "KERMIT" to the TSO system prompt.

The IBM mainframe and its communications front end (3705, 7171, etc.)
usually require that parity be used by any asynchronous ASCII device
that wishes to communicate with it.  Exactly which kind of parity is
site-dependent.  At Columbia, the 3705 requires Mark parity, and the
7171 requires Even parity.  Make sure your users know to use the
appropriate parity setting, as well as any other settings required for
IBM mainframe communication (see p.36-39 of the Kermit book).

Kermit-TSO uses an ASCII/EBCDIC translation table which conforms to the
one given in the IBM System/370 Reference Summary.  If your site's
translation table does not conform to the one Kermit uses, then enter
the appropriate SET ATOE/ETOA/TATOE/TETOA commands in the SYSTEM KERMINI
file.  If your system's ASCII/EBCDIC translation is not invertible,
Kermit will not and cannot work unless you change your system's table.
See the DOC files for more information.

When TSO Kermit is to be used with a 7171, make sure the 7171 is set up
with its "keyboard lock delay" parameter set to 0.  Otherwise, the
"terminal" will hang whenever TSO Kermit clears the screen.  This
happens consistently when the parameter is set to 10, and not at all
when set to 0.  For numbers in between, the higher the number, the more
it happens.

When Kermit-370 is to be used with a 3708, some of the terminal ports
will need to be specially configured.  First, each line for Kermit use
must be set up for either "protocol enveloping" or "dynamic" mode.  In
the former, the port is permanently set for line-at-a-time operation,
but the latter permits (requires) the user to specify a mode at logon
time.  In any event, the whole session must be conducted in line mode
for Kermit to work.  Other important details of the terminal configura-
tion are: (1) the terminal must be specified as a TWX device, (2) the
line must be set for 8 data bits and 1 stop bit, (3) there should be no
"read prompt", and (4) the so-called "alternate" translation table
(number 3) should be selected.  Kermit-370 must also be configured
because the normal packet character SOH (code 1, ctrl-A) may not be
passed by the 3708.  A suitable substitute is HT (code 9, ctrl-I).
