*COPY                                                 IK0COM
         TITLE 'COMMON - Kermit-370 common routines/data areas'
COMMON   CSECT
* Translat - translates data.  On entry R2->buffer, R3=length  @SC86202
*   R14 = return address, R15->translate table                 @SC86202
*   R1-R3 are destroyed, R15 is set to 0                       @SC86202
TRANSLAT LTR   3,3           Anything to do?                   @SC86202
         BNP   TRANSRET      No, quit                          @SC86202
         ALR   2,3           End of source                     @SC86202
TRLOOP   LR    1,2                                             @SC86202
         SR    1,3           Ptr to remaining bytes            @SC86202
         BCTR  3,0           Count for EX                      @SC86202
         EX    3,TREX        Translate the input segment       @SC86202
         N     3,=F'-256'    Remove count done                 @SC86202
         BNZ   TRLOOP        Loop thru source                  @SC86202
TRANSRET SR    15,15         Done, set RC=0                    @SC86202
         BR    14                                              @SC86202
TREX     TR    0(,1),0(15)                                     @SC86202
*
* Subroutine to test for undelimited v-binary format           @SC86151
RDWSET   XC    RDWLEN,RDWLEN Usual format                      @SC86151
         LA    0,5           Header length of 5 for D-binary   @SC86262
         CLI   TYPFIL,C'D'   Is it?                            @SC86262
         BE    RDWSOK        Yes, use it                       @SC86262
         LA    0,2           Header length of 2 for V-binary   @SC86262
         CLI   TYPFIL,C'V'   Test for special type             @SC86151
         BNER  14            Not V-binary                      @SC86151
RDWSOK   DS    0H                                              @SC86262
         ST    0,MAXOUT      Init for decoding                 @SC86151
         ST    0,RDWLEN                                        @SC86151
         BR    14                                              @SC86151
*
* Subroutine to increment pkt sequence number
INCRSEQ  IC    3,SEQ                                           @SC86135
         LA    3,1(3)
         N     3,MOD64
         STC   3,SEQ                                           @SC86135
         LA    3,1                                             @SC86295
         AL    3,PAKCNT                                        @SC86295
         ST    3,PAKCNT      Update packet count               @SC86295
         BR    14
*
* Subroutines to interpret RPACK data
INPUTSPK SR    3,3           Clear counter                     @SC86276
         KCALL SPACK,E=INPUTRTY                                @SC86276
INPUT    SR    3,3                   Clear loop counter
INPUTLUP KCALL RPACK         Read data
INPUTINR MVI   ERRNUM,ERRIPT Assume bad packet type            @SC86158
         IC    4,RTYPE       Test byte                         @SC86158
         BAL   2,CLKP        Look up in list                   @SC86158
* Standard packet types for special treatment                  @SC86158
INPUTST  DC    AL1(AE),AL3(INPUTERR) Error packet              @SC86158
         DC    AL1(AN),AL3(INPUTNAK) NAK packet                @SC86158
         DC    AL1(AQ),AL3(INPUTQAB) RPACK error               @SC86158
         DC    AL1(AT),AL3(INPUTTIM) Time out                  @SC86355
         DC    AL1(00),AL3(INPUTCNT) OK so far                 @SC86158
*
INPUTCNT DS    0H                                              @SC86158
         CLC   SEQ,RSN
         BNE   INPUTMIS              Go if pkt num mismatch
INPUTQRT LR    2,8                   Get next-state table address
         LR    14,9          For in-line return                @SC86295
         B     CLKP          Look up in expected list          @SC86158
*
INPUTMIS MVI   ERRNUM,ERRMIS Missing pkt                       @SC86156
         B     INPUTRTY              Retry
*
INPUTQAB CLI   STYPE,AB
         BNE   INPUTRTY              Retry if not a BRK pkt
         MVI   RTYPE,AY              Fake an ACK
         IC    4,RTYPE                                         @SC86158
         B     INPUTQRT              And go handle the ACK
*
INPUTTIM MVI   ERRNUM,ERRTIM Timed out                         @SC86355
         B     INPUTRTY                                        @SC86355
INPUTNAK MVI   ERRNUM,ERRNAK Micro NAK'ed                      @SC86156
INPUTRTY BAL   2,SENDRTY     Resend to the limit               @SC86276
         B     INPUTLUP              And interpret response
*
INPUTERR MVI   ERRNUM,ERRABO Micro aborted                     @SC86156
         LR    2,9           Save return                       @SC86295
         BAL   9,DECODEN     Decode error message              @SC86295
         LR    9,2                                             @SC86295
         L     0,WBUF        Ptr to decoded message            @BS86090
         L     1,WBUFL                                         @BS86090
         L     14,EMSGP      Ptr to msg buffer                 @BS86090
         LA    15,LEMSG                                        @BS86090
         CR    1,15                                            @BS86090
         BNH   *+6                                             @BS86090
         LR    1,15          Truncate msg                      @BS86090
         ST    1,EMSGL       Save effective length             @BS86090
         MVCL  14,0          Save in buffer                    @BS86090
         L     1,EMSGP                                         @BS86090
         TR    0(LEMSG,1),ATOE Convert to EBCDIC               @BS86090
INPUTABR SR    4,4           Look for end of table             @SC86158
         B     INPUTQRT                                        @SC86158
*
* CLKP - Subroutine to dispatch to routine from table lookup   @SC86158
*  R2->table, R4=char, R14->return if null entry in table      @SC86158
*  Each entry has AL1(char),AL3(adr), last char=00             @SC86158
CLKNXT   LA    2,4(2)        Next state                        @SC86158
CLKP     CLM   4,1,0(2)      Match?                            @SC86158
         BE    CLKF          Yes, go do it                     @SC86158
         CLI   0(2),0
         BNE   CLKNXT        Not at the end yet                @SC86158
CLKF     ICM   2,7,1(2)      Pick routine address              @SC86158
         BNZR  2             Go to that routine if any         @SC86295
         BR    14            Or fall down to caller            @SC86158
*
* Retry sending same packet until success or abort             @SC86276
SENDRTY  LA    3,1(3)        Increment retry counter           @SC86276
         CL    3,LIMTRY      Did we retry enough?              @SC86276
         BNL   INPUTABR      Yes, abort if limit reached       @SC86276
         LA    15,1                                            @SC86276
         AL    15,RTRCNT                                       @SC86276
         ST    15,RTRCNT     Update retry count                @SC86276
         TM    FL1,NAK0                                        @SC86276
         BO    SENDNAK       Haven't sent anything yet         @SC86276
         KCALL SIO,E=SENDRTY Resend the same packet            @SC86276
         BR    2             Success, return                   @SC86276
*
* Subroutine to send a NAK
SENDNAK  MVI   STYPE,AN              A NAK pkt
         XC    DATL,DATL             no data
         B     SENDPK        Send the packet                   @SC86276
*
* Subroutine to send an ACK
SENDACK  XC    DATL,DATL             no data length
SENDACKL MVI   STYPE,AY              an ACK pkt
         SR    3,3           Clear counter                     @SC86276
SENDPK   KCALL SPACK,E=SENDRTY Send the packet                 @SC86276
         BR    2                     return
*
* Set up command to foreign server. Trade parms if necessary
IPKSET   KCALL INTINI,4,E=INPUTABR Initialize for sending      @SC87300
         TM    FL3,PXCH                                        @SC86155
         BO    IPKFIN                                          @SC86155
         MVI   SEQ,0                                           @SC86155
         MVC   LIMTRY,MAXTNT Limit for INIT retries            @SC86345
         KCALL RPARSET                                         @SC86155
         KCALL RPAR          Our I packet to send              @SC86155
         ICM   8,8,STYPE     Save packet type                  @SC86295
         MVI   STYPE,AI      Packet type = initialize          @SC86155
         BAL   9,INPUTSPK    Send RPAR and interpret response  @SC86295
         STCM  8,8,STYPE     Restore packet type               @SC86295
         KCALL SPAR          Interpret reply to our I packet   @SC86155
IPKFIN   MVI   SEQ,0         Reset packet number               @SC86155
         MVC   LIMTRY,MAXTRY Nominal retry limit               @SC86295
         B     8(8)          Skip over 2-entry table           @SC86295
*
* Subroutine to skip over white-space
WSP      LM    6,7,LEN               Length and address of input
         LTR   6,6                   Any more data left to scan?
         BNPR  9             Nope, fail                        @SC86135
WSPLUP   CLI   0(7),C' '                                       @SC86115
         BE    WSPNXT                Skip a blank
         CLI   0(7),NL
         BNE   WSPEND                Skip a new-line char
WSPNXT   LA    7,1(7)                next char
         BCT   6,WSPLUP              decrement length
         BR    9
*
WSPEND   STM   6,7,LEN               Save new non-white spot
         B     4(9)                  Skip return
*
* Subroutine to get next token from commands
TOK      LM    6,7,LEN               Length and address of input
         LTR   6,6                   Any more data to tokenize?
         BNPR  9             No, error return                  @SC86135
*
TOKLUP   CLI   0(7),C' '                                       @SC86115
         BE    TOKSKP                Found a blank terminator
         CLI   0(7),NL
         BE    TOKSKP                Found a new-line terminator
         CLI   0(7),C','                                       @SC86115
         BNE   TOKNXT                Not a comma
         C     7,ADR                 Is comma the first char?
         BNE   TOKSKP                No, must be a token itself
TOKNXT   LA    7,1(7)                Next char
         BCT   6,TOKLUP              decrement remaining length
TOKSKP   BCTR  6,0                   remaining length of input
         ST    6,LEN                 Save it for next time
         LA    6,1(7)        Next spot to scan                 @SC86224
         S     7,ADR                 Length of token
         ST    6,ADR         Next spot to scan                 @SC86224
         SR    6,7                                             @SC86224
         BCTR  6,0           Address of token                  @SC86224
         BCTR  7,0                   Token length - 1
         B     4(9)                  Skip return
*
* Subroutine to skip white-space and pick next token
WSPTOK   BAL   9,WSP
          B    0(14)         Ran off the end                   @SC86135
         BAL   9,TOK
          B    0(14)         No more tokens                    @SC86135
         B     4(14)                 Skip return
*
* Interpret decimal number from string at (R6) of length=(R7)
*   Clobber R4,R7,R15.  Return value in R0 and skips if ok.
GETNUM   LR    4,7           Copy length                       @SC86316
         C     4,F           Length must be <16                @SC87012
         BHR   14                                              @SC87012
         BCTR  7,0           Change for EX                     @SC86316
         LR    15,6          Don't lose pointer to input       @SC86316
GETNUML  CLI   0(15),C'0'                                      @SC86316
         BLR   14            Go if not numeric                 @SC86316
         CLI   0(15),C'9'                                      @SC86316
         BHR   14            Go if not numeric                 @SC86316
         LA    15,1(15)      Bump input pointer                @SC86316
         BCT   4,GETNUML     Go if more                        @SC86316
         EX    7,GETNUMPK    Pack the input                    @SC86316
         CVB   0,TMPDW       Convert to binary                 @SC86316
         B     4(14)         Return and skip                   @SC86316
GETNUMPK PACK  TMPDW,0(,6)                                     @SC86316
*
* Test for Ascii char range of 33-62 and 96-126, skip on return if ok
*  Character must be in low byte of R4
CHKQR    CLM   4,1,SPACE+3                                     @SC86120
         BNHR  14            Cannot use control char or blank  @SC86120
         CLM   4,1,MOD64+3                                     @SC86120
         BL    4(14)         OK, 33-62                         @SC86120
         CLM   4,1,LOCASE+96                                   @SC86295
         BLR   14                                              @SC86120
         CLM   4,1,LOCASE+127                                  @SC86295
         BNLR  14                                              @SC86120
         B     4(14)         OK, 96-126                        @SC86120
*
* Subroutine to scan a parse table built by KW macro
SCAN     CLI   0(6),C'?'                                       @SC86115
         BE    HELPKW
         MVC   OPRND,0(6)    Copy token for lookup             @SC87034
         TR    OPRND,UPCASE  And convert to upper case         @SC87034
         SR    15,15
SCANLUP  CLI   0(1),255                                        @SC87117
         BE    4(14)         Return to caller if end           @SC87117
         CLI   3(1),255      Branch to other list?             @SC87117
         BNE   *+12          No                                @SC87117
         ICM   1,7,0(1)      Yes, get ptr to new list          @SC87117
         B     SCANLUP       And resume search                 @SC87117
         CLM   7,1,4(1)      Compare token length vs min abbr
         BL    SCANNO                Go if < min
         CLM   7,B'0001',3(1)        Compare token and kw lengths
         BH    SCANNO                Go if length of token > kw's
         EX    7,SCANCLC
         BE    SCANYES
SCANNO   IC    15,3(1)               KW length - 1
         LA    1,6(15,1)             add 3+1+1+1 to it
         B     SCANLUP       Continue checking
*
SCANYES  CLM   7,8,F0        Flagged just to find entry?       @SC86355
         BNER  14            Yes, got it                       @SC86355
         TR    0(1,6),UPCASE Upcase 1st letter, just in case   @SC87034
         ICM   14,7,0(1)     No, get handler address           @SC86355
         BR    14
*
SCANCLC  CLC   5(,1),OPRND   Compare token to KW               @SC87034
*
* Utility routine to set up linkage
SUBENT   LR    12,15         CSECT addressibility              @SC86295
         L     15,STKPTR     Current end of stack              @SC86295
         AR    0,15          Our needs                         @SC86295
         C     0,STKLIM      Does it fit?                      @SC86295
         BH    SUBDIE        No, (that's incredible)           @SC86295
         ST    0,STKPTR      New end                           @SC86295
         ST    13,4(15)      Link subroutines                  @SC86295
         ST    15,8(13)                                        @SC86295
         LR    13,15                                           @SC86295
         LR    1,0           End of local variables            @SC87012
         LA    0,72(15)      Start=end of save area            @SC87012
         SR    1,0                                             @SC87012
         BNP   *+8           No locals                         @SC87012
         SR    15,15                                           @SC87012
         MVCL  0,14          Zero-fill all locals              @SC87012
         L     15,4(13)                                        @SC87012
         LM    0,1,20(15)    Restore R0,R1                     @SC87012
         BR    14            Go                                @SC86295
SUBDIE   LM    14,12,12(13)                                    @SC86295
         LA    15,1                                            @SC87012
         LCR   15,15         Set return code = -1              @SC87012
         BR    14            Go                                @SC86295
*
* Common exit code
RETSNRC  MVI   BCTU,1        Reset chksum at end of transfer   @SC86295
         KCALL INTINI,0      Close line for transfer           @SC86295
         KCALL SUPFNC,10     Get time                          @SC86295
         S     15,SECTOT     Take elapsed time                 @SC86295
         BNM   *+8           Ok, no wrap                       @SC86345
         A     15,=F'1759218604'  Wraps by 2**44/10000         @SC86345
         ST    15,CSECTOT    Save elapsed time in csec         @SC86345
         SR    14,14                                           @SC86295
         LA    0,100                                           @SC86295
         DR    14,0          Convert to sec                    @SC86295
         AR    14,14         Check remainder                   @SC86295
         CR    14,0                                            @SC86295
         BL    *+8                                             @SC86295
         A     15,F1         Round up                          @SC86295
         ST    15,SECTOT                                       @SC86295
         B     RTRN0                                           @SC86295
RTRNUM   BAL   14,LDERR      Fetch error code                  @SC87117
         B     RTRN                                            @SC87117
RTRN2    LA    15,2          Indicate error                    @SC86295
         B     RTRN                                            @SC86295
RTRNM1   SR    15,15         Error = -1                        @SC86295
         BCTR  15,0                                            @SC86295
         B     RTRN                                            @SC86295
RTRN0    SR    15,15         No errors                         @SC86295
         B     RTRN                                            @SC86295
SUBERR   WTEXT (3),(4)       Print prepared message            @SC86295
RTRN1    LA    15,1          Indicate error                    @SC86295
RTRN     ST    13,STKPTR     Free the storage                  @SC86295
         L     13,4(13)      Unlink                            @SC86295
         L     14,12(13)     Restore registers                 @SC86295
         LM    0,12,20(13)                                     @SC86295
         LTR   15,15         Test return code                  @SC86295
         BR    14                                              @SC86295
*
* Subroutine to fetch error code (but 0 if no transfers yet)
LDERR    SR    15,15
         CLI   ERRNUM,ERRNFT No file transfer isn't an error   @HF86157
         BER   14                                              @HF86157
         IC    15,ERRNUM     Return status code                @HF86157
         BR    14                                              @HF86157
*
* Subroutine to decode without disk-write
DECODEN  NI    FL1,255-EOF           No EOF yet
         XC    WBUFL,WBUFL           No data in WBUF yet
         OI    FL1,NAME              No disk-writes
         KCALL DECODE        Decode data into WBUF             @SC86135
         NI    FL1,255-NAME          Turn this off
         BR    9                                               @SC86295
*
* Subroutine to encode without disk-read
ENCODEN  XC    RBUFP,RBUFP           Start encoding at beg of RBUF
         OI    FL1,NAME              Indicate not to do disk reads
         KCALL ENCODE        Encode it into DATA               @SC86135
         NI    FL1,255-NAME          Turn this off
         BR    9                                               @SC86295
*
* Subroutine to display the contents of the KW tables
HELPKW   SR    7,7                   token length holder
         LA    2,16          Tab width for display             @SC86295
         LA    3,CMD+79      Display buffer limit offset       @SC86295
         LR    4,1                   KW table address
         WTEXT 'One of the following:'
HELPNL   LA    1,CMD+1       Display buffer offset             @SC86295
         MVI   CMD,C' '      Start blanking it                 @SC86115
         MVC   CMD+1(79),CMD         blank 80 chars
HELPNT   CLI   0(4),255
         BE    HELPEND               return if end of tokens
         CLI   3(4),255      Branch to other list?             @SC87117
         BNE   *+12          No                                @SC87117
         ICM   4,7,0(4)      Yes, get ptr to new list          @SC87117
         B     HELPNT        And resume scan                   @SC87117
         IC    7,3(4)                length-1 of current token
         IC    15,4(4)               min abbreviation length - 1
         EX    7,HELPMVC             move it to display buffer
         LA    4,6(4,7)              skip to next token in KW table
         MVI   15(1),C' '    Move a blank separator            @SC86115
         TR    0(15,1),LOCASE Make everthing lower case        @SC86295
         EX    15,TRUPCAS    Upper case the minimum            @SC86295
         BXLE  1,2,HELPNT    Loop if more room on line         @SC86295
         WTEXT CMD,80                display one line of tokens
         B     HELPNL                and continue with next line
*
HELPEND  LA    0,CMD+1                                         @SC86295
         CR    6,0           Is there anything accumulated?    @SC86295
         BER   14            No, display buffer empty          @SC86135
         WTEXT CMD,80
BR14     BR    14
*
HELPMVC  MVC   0(,1),5(4)    Copy KW                           @SC86295
*
* Subroutine to compress a file specification                  @HF86223
PAKFIL   LA    1,PREFIX      Start with prefix                 @HF86223
         L     7,RBUF        Put FN here for encode            @SC86155
         BAL   14,PAKFOR                                       @SC86295
         LA    0,FFENC                                         @SC86295
         KCALL FSPEC,FILNAM  Copy name with possible override  @SC86295
         LR    7,15          New output ptr                    @SC86295
         LA    1,SUFFIX      Finish with suffix                @SC86224
         BAL   14,PAKFOR                                       @SC86295
         S     7,RBUF        Length of buffer                  @SC86155
         ST    7,RBUFL                                         @SC86155
         BR    9                                               @HF86223
*
* Subroutine to append characters to the filespec              @HF86223
PAKFOR   SR    2,2           Number of characters to append    @HF86223
         ICM   2,1,0(1)      Probably none                     @HF86223
         BZR   14                                              @SC86295
         BCTR  2,0           Copy into buffer                  @HF86223
         EX    2,PAKRMV                                        @HF86223
         EX    2,PAKRTR      And ASCII it                      @HF86223
         LA    7,1(2,7)      New end of string                 @HF86223
         BR    14                                              @SC86295
*
PAKRMV   MVC   0(0,7),1(1)                                     @HF86223
PAKRTR   TR    0(0,7),ETOA                                     @HF86223
*
* Routines to add decimal and string arguments to a buffer     @SC86209
* Input: R15->insert point, R4=dec. value, R2->return          @SC86209
EDDEC    CVD   4,TMPDW       Get packed decimal                @SC86209
         MVC   0(10,15),=X'40202020202020202120'               @SC86209
         LA    9,10(15)      End of possible string            @SC86209
         LA    1,9(15)       Last possible start of signif.    @SC86209
         EDMK  0(10,15),TMPDW+3                                @SC86209
         LTR   4,4           Check sign                        @SC86209
         BNM   EDDPOS                                          @SC86209
         BCTR  1,0           Back up and insert minus          @SC86209
         MVI   0(1),C'-'                                       @SC86209
EDDPOS   LR    8,1           Start                             @SC86209
         SR    9,8           Length                            @SC86209
*   R8->argument string, R9=length                             @SC86209
EDCHAR   EX    9,EDCHRMV     Copy string to buffer (1 extra)   @HF86223
         AR    15,9          Update output ptr                 @SC86209
         BR    2                                               @SC86295
EDCHRMV  MVC   0(0,15),0(8)  Copy string to buffer             @HF86223
*
* Enter here with R7->position in CMD, R1->filespec. Return to (R2).
STAFSP   LA    0,FFDSP                                         @SC86295
         KCALL FSPEC         Copy name for display             @SC86295
STAPM15  LR    0,15          Output ptr                        @BS86090
STAPMSG  LA    1,CMD         Start of string                   @SC86295
         SR    0,1           Get length                        @SC86295
         WTEXT (1),(0)                                         @SC86295
         BR    2                                               @SC86295
*
TRATOE   TR    0(,1),ATOE                                      @SC86158
TRUPCAS  TR    0(,1),UPCASE  Upcase                            @SC86158
*
* Return optimum packet size (in R15) based on previous transfer, or 0
*  Uses R2,R3,R4,R5,R14.  Returns via R9.
OPTPKT   SR    15,15         Indicate no good                  @SC86345
         ICM   4,15,RTRCNT   Get error count                   @SC86345
         BZR   9             None, give up                     @SC86345
         LM    2,3,TINTOT    Get byte count                    @SC86345
         AL    3,TOUTOT+4                                      @SC86345
         BNO   *+8                                             @SC86345
         AL    2,F1                                            @SC86345
         AL    2,TOUTOT                                        @SC86345
         SLDL  2,1                                             @SC86345
         CR    2,4           Avoid overflow                    @SC86345
         BL    OPTL1         Ok                                @SC86345
         L     3,=XL4'2D414' No, use max.                      @SC86345
         B     SQRX                                            @SC86345
OPTL1    SRDL  2,1                                             @SC86345
         DR    2,4           Compute mean bytes/error          @SC86345
         SR    2,2                                             @SC86345
         SLDL  2,4           x 16                              @SC86345
*  Compute sq rt of value in (2,3), return in 15.  Uses 2,3,4,5,14.
SQRT     LR    14,2          Copy for sqrt                     @SC86345
         LR    15,3                                            @SC86345
         LA    4,31          Count bits                        @SC86345
SQRL1    CL    2,=XL4'10000000'                                @SC86345
         BNL   SQRL2         Justified now                     @SC86345
         SLDL  2,2           Keep shifting                     @SC86345
         BCT   4,SQRL1                                         @SC86345
SQRL2    LCR   4,4                                             @SC86345
         AL    2,=XL4'10000000'  1st guess at sqrt             @SC86345
         SRDL  2,62(4)       Shift back                        @SC86345
         LTR   3,3                                             @SC86345
         BNP   SQRX          Too small anyway                  @SC86345
         LA    2,3                                             @SC86345
SQRL3    LR    4,14                                            @SC86345
         LR    5,15                                            @SC86345
         DR    4,3           Get next guess                    @SC86345
         AR    3,5                                             @SC86345
         SRA   3,1                                             @SC86345
         BCT   2,SQRL3                                         @SC86345
SQRX     LR    15,3                                            @SC86345
         BR    9                                               @SC86345
*
* Main command loop implementation of TAKE files
         USING SERVERSV,13   Uses locals of caller, e.g. SERVER@SC86295
LOOPS    STM   0,1,RETADR    Initialize for main loop          @SC86295
         BR    14                                              @SC86295
*
LUPERK   BCT   15,LUPBAD     Go if bad operand: try on system  @SC86171
         MVI   ERRNUM,ERRKCE Kermit command error
         OI    FL5,CMERR     Note error                        @SC86295
         B     LOOP                                            @SC86295
LOOP0    CLI   ERRNUM,ERRKCE Stale error?                      @SC86295
         BNE   LOOP          No, keep old error code           @SC86295
         MVI   ERRNUM,ERRNOE Clear old error condition         @SC86295
         B     LOOP                                            @SC86295
LUPFNF   MVI   ERRNUM,ERRFNF File not found                    @SC86295
         B     LUPWRTE                                         @SC86239
LUPINV   MVI   ERRNUM,ERRKCE Invalid command                   @SC86239
LUPWRTE  OI    FL5,CMERR     Note error                        @SC86171
LUPWRT   WTEXT (3),(4)                                         @SC86355
*
LOOP     MVC   OLDERR,ERRNUM                                   @SC86171
         ICM   2,15,TAKLEV   Get current TAKE level            @SC86295
         BZ    LUPEX                                           @SC86295
         BCTR  2,0                                             @SC86295
         SLA   2,2           Get offset into table             @SC86295
         LA    2,TAKTAB(2)   Point into TAKE file table        @SC86295
         TM    FL5,CMERR+TKHLT                                 @SC86239
         BO    LUPREX        Quit reading on error             @SC86239
         NI    FL5,255-CMERR-TKMSG Clear error flag            @SC86239
         READF 0(2),E=LUPRER                                   @SC87034
         LA    1,CMD         Ptr to buffer, R0 = length        @SC86171
         B     LUPPRS        Go parse
*
LUPRER   C     15,F12        EOF code?
         BE    LUPCLO        Yes, close the file
         ERRF  ,             Analyze the error                 @SC87338
LUPREX   OI    FL5,CMERR     Note error                        @SC86171
         TM    FL5,TKMSG     Already issued message?           @SC86239
         BO    LUPCLO        Don't overdo it                   @SC86239
         WTEXT 'Error reading TAKE file'                       @SC86239
         OI    FL5,TKMSG                                       @SC86239
LUPCLO   CLOSF (2)           Close the file                    @SC86135
         L     2,TAKLEV      Get TAKE level
         BCTR  2,0           And decrement it
         ST    2,TAKLEV
         B     LOOP
*
LUPEX    NI    FL5,255-CMERR-TKMSG Clear error flag            @SC86239
         L     14,RETADR                                       @SC86295
         BR    14
*
LUPPRS   DS    0H                                              @SC87034
         STM   0,1,SCANPTR   Save for parser                   @SC86171
         LTR   2,2                                             @SC86171
         BZ    LUPTOK        Not from TAKE                     @SC86171
         TM    FL2,ECHO                                        @SC86171
         BNO   LUPTOK        Not echoing                       @SC86171
         WTEXT (1),(0)       Echo to terminal                  @SC86171
LUPTOK   MVC   SCANSV,SCANPTR Save for system                  @SC86295
         NTOKN N=LOOP
         CLI   0(6),C'*'                                       @SC86115
         BE    LOOP          Go if comment
         L     1,CMDPTR                                        @SC86295
         SCAN  (1),LOOP                                        @SC86295
LUPBAD   PTEXT 'Invalid Kermit command'
         TM    FL2,PASS                                        @SC86295
         BZ    LUPINV        Don't try as system cmd           @SC86295
         MVC   SCANPTR,SCANSV Restore string ptrs              @SC86295
         OI    FL4,UCMD                                        @SC86295
         KCALL SUPFNC,3,E=(LOOP,NM) And execute it             @SC86295
         B     LUPINV                                          @SC86295
*
LUPSET   KCALL SET,E=LUPERK  Call SET routine                  @SC86295
         B     LOOP0                                           @SC86295
*
LUPSHO   KCALL SHOW,E=LUPERK Call SHOW routine                 @SC86295
         B     LOOP0                                           @SC86295
*
LUPCWD   KCALL CWDSET,E=LUPERK                                 @SC86295
         B     LOOP0                                           @SC86295
*
LUPGIV   KCALL GIVTAB,E=LUPERK                                 @SC87117
         B     LOOP0                                           @SC87117
*
LUPTAK   BAL   9,LUPTINS     Look for file                     @SC86295
           B   LUPFNF        Not found                         @SC86295
         MVI   ERRNUM,ERRNOE No error                          @SC86295
         B     LOOP          OK                                @SC86295
*
LUPTIN   STM   1,2,SCANPTR   Set up scan                       @SC86295
LUPTINS  SR    0,0           Flags for TAKE parsing            @SC86295
         KCALL FSPEC,FILNAM  Get filespec                      @SC86295
         BAL   14,LUPCKFN                                      @SC86295
         LR    3,9           Save return                       @SC86295
         BAL   14,LUPCNF     Check for illegal extras          @SC86295
         LR    9,3                                             @SC86295
         PTEXT 'Past maximum nesting level for TAKE command'
         L     5,TAKLEV      Current TAKE level                @SC86295
         LA    14,TAKMAX                                       @SC86295
         CR    5,14                                            @SC86295
         BNL   LUPINV                                          @SC86239
         SLA   5,2           Offset into table                 @SC86295
         LA    5,TAKTAB(5)   Point into table of TAKE files    @SC86295
         PTEXT 'File not found' In case of error
         MVI   ERRNUM,ERRFNF In case of error                  @SC86171
         OPENF I,FILNAM,TAKFDB,0(5),E=0(9)                     @SC86295
         PTEXT 'TAKE file loop'                                @SC86239
         USING FDBD,1                                          @SC86295
         TM    FDBFLGS,FDBACTV Check for file active already   @SC86295
         DROP  1                                               @HF86232
         BZ    LUPTIOK                                         @SC86295
         CLOSF (5)                                             @SC86295
         BR    9                                               @SC86295
LUPTIOK  L     3,TAKLEV      Get current take level
         LA    3,1(3)        And increment
         ST    3,TAKLEV
         B     4(9)                                            @SC86295
*
LUPCKFN  LTR   15,15                                           @SC86295
         BZR   14            No problem, R15=0                 @SC86295
         BCT   15,LUPINV     Error, R15>1                      @SC86295
         B     LUPWRTE       Help requested, R15=1             @SC86295
*
LUPSTA   BAL   14,LUPCNF     Check for illegal extras          @SC86295
         MVC   ERRNUM,OLDERR Restore from last command         @SC86158
         KCALL STATUS        Write error message               @SC86156
         B     LOOP0                                           @SC86295
*
LUPSPA   KCALL DSPACE                                          @SC86164
         B     LOOP0                                           @SC86295
*
LUPDMP   KCALL DUMP,E=LUPERK Dump translation table            @SC86156
         B     LOOP0                                           @SC86295
*
LUPHSTI  DS    0H                                              @SC86295
         AIF   ('&TYPCMD' EQ 'TYPE').TYPOK                     @SC86295
         MVC   0(,6),=CL16'&TYPCMD' Use right name             @SC86295
         EX    7,*-6                                           @SC86295
.TYPOK   A     7,LEN         Add remaining to token length
         LA    5,2(7)        Plus one for separator            @SC86171
         STM   5,6,SCANPTR   Reset for tokenizer               @SC86171
LUPHST   PTEXT 'Specify a &KSYS command to issue'              @SC86295
         FTOKN H=LUPWRTE,N=LUPINV Point to command             @SC86239
         LA    1,3           Execute host command              @SC86316
LUPSYS   OI    FL4,UCMD      User command, check for EXEC's    @SC86316
         PTEXT 'Illegal system command'                        @SC86295
         KCALL SUPFNC,E=(LUPWRTE,M) Execute it                 @SC86295
         B     LOOP
         AIF   ('&KSYS' NE 'CMS').CM1Z                         @SC86355
*
LUPCP    PTEXT 'Specify a CP command to issue'
         FTOKN N=LUPINV,H=LUPWRTE                              @SC86295
         LR    0,7                                             @SC86295
         LA    1,4                                             @SC86295
         B     LUPSYS                                          @SC86295
.CM1Z    ANOP
*
LUPCNF   FTOKN N=0(14),H=LUPCRH                                @SC86295
         PTEXT 'Extra operand'                                 @SC86295
         B     LUPINV                                          @SC86295
LUPCRH   PTEXT 'No operands needed'                            @SC86295
         B     LUPWRTE                                         @SC86295
         DROP  13
XONCHAR  DC    AL1(XON)                                        @SC86121
GRDATA   DC    X'&S1CMD',X'70'                                 @SC87215
GRDL     EQU   *-GRDATA                                        @SC87215
XLFCT    DC    A(KMAXF)      Extended packet size base         @SC86202
AKMIN    DC    A(KMIN)       Packet min size                   @SC86295
AMAXWT   DC    A(MAXWT)      Longest terminal write            @SC86295
AMAXRT   DC    A(MAXRT)      Longest terminal read             @SC86295
F64KP    DC    A(((&MAXLR+7+5+4)/8)*8) Size of disk buffers    @SC87351
F0       DC    F'0'
F1       DC    F'1'
F2       DC    F'2'
F3       DC    F'3'                                            @SC86295
F4       DC    F'4'                                            @SC86295
F5       DC    F'5'
F8       DC    F'8'
F12      DC    F'12'
F64      DC    F'64'
BLANK    EQU   F64+3         EBCDIC blank                      @SC86295
F        DC    F'15'
MOD64    DC    F'63'
F256     DC    F'256'
SPACE    DC    A(ABL)                ASCII SPACE
         ADCON CRCCLC,CWDSET,DECODE,DISKIO,DSPACE,DUMP
         ADCON ENCODE,ERPACK,ERRTAB,FSPEC,GENCMD,GIVTAB,INBUF
         ADCON INTINI,KHELP,NPREAD,OUTBUF,RECEIV
         ADCON RIO,RPACK,RPAR,RPARSET,SCRNIO,SEND
         ADCON SERVER,SET,SETMSG,SHOW
         ADCON SIO,SPACK,SPAR,SPARSET,STATUS,SUPFNC,TERMIO
         ADCON USNTRF
LOBIT    DC    X'0000007F'
* Parameter defaults.  Must map directly into DEFPARM etc.
         KSYSTF ,                                              @SC86295
         DS    0F --------Init for LOG file                    @SC86295
         DC    A(0)          Buffer ptr                        @SC86295
         DC    A(LPKT)       Buffer length                     @SC86295
         DC    C'V',X'00'    RECFM, FLGS                       @SC86295
         DC    Y(LPKT)       LRECL
         FDBPAT ,                                              @SC86316
         DS    0F --------Init for SEND/RECEIVE file           @SC86295
         DC    A(0)          Addr of FSWRITE buffer            @SC86295
MAXLRC   DC    F'&MAXLR'     Max lrecl                         @SC86316
         DC    C'V',X'00'    RECFM,FLGS                        @SC86295
         DC    H'80'         Lrecl for disk write              @SC86295
         FDBPAT ,                                              @SC86316
         DS    0F --------Init for TAKE file (read-only)       @SC86295
         DC    A(0)          Buffer ptr (CMD)                  @SC86295
         DC    F'256'        Max buffer size                   @SC86295
         DC    C'V',X'00'    RECFM, FLGS                       @SC86295
*
IMAXTNT  DC    F'16'         Retry limit during setup          @SC86345
IMAXTRY  DC    F'5'          Retry limit during transfer       @SC86164
ILCLDLY  DC    F'10'         Time to wait before sending       @SC86164
IRPSIZ   DC    A(KMAX)       Max receive size                  @SC86295
AKMAX    EQU   IRPSIZ,4      Normal packet maximum             @SC86295
ISPSIZ   DC    A(KDEF)       Max send size                     @SC86295
IMAXOUT  DC    F'&MAXLR'     Max output buffer                 @SC86268
ITRMLIN  DC    CL8' '        Current data line                 @SC87166
ITYPFIL  DC    C'T'          Type of file (T,B,V,D),see BINF   @SC86151
IDEFPRM  DC    AL1(KDEF+ABL,ABL,ABL,64,CR+ABL,A#,AN,A1,ABL,ABL) SC86149
         DC    AL1(ABL,ABL,ABL,ABL)  Extended size defaults    @TB86196
         DC    X'0'          Capabilities of micro      RCAPA  @SC86295
         DC    X'8'          Capabilities I have        SCAPA  @SC86295
LONGP    EQU   X'02'         LONGP bit in CAPAS flags          @TB86196
MORCAPAS EQU   X'01'         More CAPAS bytes exist            @TB86196
         DC    AL1(CR)       EOL char I need (cr)       REOL   @SC86295
         DC    AL1(CR)       EOL I'll send              SEOL   @SC86295
         DC    AL1(SOH)      Incoming pkt start char    RMARK  @SC86295
         DC    AL1(SOH)      Outbound pkt start char    SMARK  @SC86295
         DC    AL1(A#)       Micro's ctl-quote char     RCTLQ  @SC86295
         DC    AL1(A#)       Ctl-quote char we'll use   SCTLQ  @SC86295
         DC    AL1(AAMP)     Orig 8-bit quote char      EBQC   @SC86295
         DC    AL1(5)        Time limit - micro to wait RTIMO  @SC86295
         DC    AL1(0)        Timeout, if we can do it   TIMOUT @SC86295
         DC    AL1(1)        User requested chk type    BCTC   @SC86295
         DC    AL1(ATIL)     Original repeat prefix     RPTQC  @SC86295
         DC    A(0,S1ORDL+2) For sending prompt         S1XOPL @SC87274
         DC    X'&S1CMD',AL1(SBA),X'5D7F',AL1(SBA),X'0005' ON  @SC87274
         DC    AL1(CR)       In case micro lost one     S1EOL  @SC87274
         DC    AL1(XON)      Handshake for micro        S1HND  @SC87274
MAXBSZ   DC    F'&MAXBS'     Max blksiz                        @SC86268
BUFSIZ   DC    Y(LPKT)       Length of packet buffers          @SC86190
*
* Constants for COMMON
         LTORG
* Translation for conversion to hex notation                   @SC86156
TRHEX    EQU   *-240                                           @SC86156
         DC    C'0123456789ABCDEF'                             @SC86156
* ASCII to EBCDIC translate table
ATOED    DC    X'00,01,02,03,37,2D,2E,2F,16,05,25,0B,0C,0D,0E,0F'
         DC    X'10,11,12,13,3C,3D,32,26,18,19,3F,27,1C,1D,1E,1F'
         DC    X'40,5A,7F,7B,5B,6C,50,7D,4D,5D,5C,4E,6B,60,4B,61'
         DC    X'F0,F1,F2,F3,F4,F5,F6,F7,F8,F9,7A,5E,4C,7E,6E,6F'
         DC    X'7C,C1,C2,C3,C4,C5,C6,C7,C8,C9,D1,D2,D3,D4,D5,D6'
         DC    X'D7,D8,D9,E2,E3,E4,E5,E6,E7,E8,E9,AD,E0,BD,5F,6D'
         DC    X'79,81,82,83,84,85,86,87,88,89,91,92,93,94,95,96'
         DC    X'97,98,99,A2,A3,A4,A5,A6,A7,A8,A9,C0,4F,D0,A1,07'
         DC    X'00,01,02,03,37,2D,2E,2F,16,05,25,0B,0C,0D,0E,0F'
         DC    X'10,11,12,13,3C,3D,32,26,18,19,3F,27,1C,1D,1E,1F'
         DC    X'40,5A,7F,7B,5B,6C,50,7D,4D,5D,5C,4E,6B,60,4B,61'
         DC    X'F0,F1,F2,F3,F4,F5,F6,F7,F8,F9,7A,5E,4C,7E,6E,6F'
         DC    X'7C,C1,C2,C3,C4,C5,C6,C7,C8,C9,D1,D2,D3,D4,D5,D6'
         DC    X'D7,D8,D9,E2,E3,E4,E5,E6,E7,E8,E9,AD,E0,BD,5F,6D'
         DC    X'79,81,82,83,84,85,86,87,88,89,91,92,93,94,95,96'
         DC    X'97,98,99,A2,A3,A4,A5,A6,A7,A8,A9,C0,4F,D0,A1,07'
* EBCDIC to ASCII translate table
ETOAD    DC    X'00,01,02,03,00,09,00,7F,00,00,00,0B,0C,0D,0E,0F'
         DC    X'10,11,12,13,00,00,08,00,18,19,00,00,1C,1D,1E,1F'
         DC    X'00,00,00,00,00,0A,17,1B,00,00,00,00,00,05,06,07'
         DC    X'00,00,16,00,00,00,00,04,00,00,00,00,14,15,00,1A'
         DC    X'20,00,00,00,00,00,00,00,00,00,5C,2E,3C,28,2B,7C'
         DC    X'26,00,00,00,00,00,00,00,00,00,21,24,2A,29,3B,5E'
         DC    X'2D,2F,00,00,00,00,00,00,00,00,7C,2C,25,5F,3E,3F'
         DC    X'00,00,00,00,00,00,00,00,00,60,3A,23,40,27,3D,22'
         DC    X'00,61,62,63,64,65,66,67,68,69,00,7B,00,00,00,00'
         DC    X'00,6A,6B,6C,6D,6E,6F,70,71,72,00,7D,00,00,00,00'
         DC    X'00,7E,73,74,75,76,77,78,79,7A,00,00,00,5B,00,00'
         DC    X'00,00,00,00,00,00,00,00,00,00,00,00,00,5D,00,00'
         DC    X'7B,41,42,43,44,45,46,47,48,49,00,00,00,00,00,00'
         DC    X'7D,4A,4B,4C,4D,4E,4F,50,51,52,00,00,00,00,00,00'
         DC    X'5C,00,53,54,55,56,57,58,59,5A,00,00,00,00,00,00'
         DC    X'30,31,32,33,34,35,36,37,38,39,7C,00,00,00,00,00'
* Table to remove 8th bit (overlaps LOCASE following)          @SC87253
OFF80    DC    128AL1(*-OFF80)                                 @SC87253
* Table to convert EBCDIC text to lower case
LOCASE   DC    192AL1(*-LOCASE)                                @SC86209
         DC    X'C0,81,82,83,84,85,86,87,88,89,CA,CB,CC,CD,CE,CF'
         DC    X'D0,91,92,93,94,95,96,97,98,99,DA,DB,DC,DD,DE,DF'
         DC    X'E0,E1,A2,A3,A4,A5,A6,A7,A8,A9,EA,EB,EC,ED,EE,EF'
         DC    016AL1(*-LOCASE)                                @SC86209
         TITLE 'Variable storage for Kermit-370'
STORAG   DSECT
* - - - Translate tables (user-settable or program-modified)
TRTBL    DS    CL256         For finding blanks                @SC86295
ATOE     DS    CL256         For converting to EBCDIC          @SC86295
ETOA     DS    CL256         For converting to ASCII           @SC86295
TATOE    DS    CL256         For converting packets to EBCDIC  @SC87117
TETOA    DS    CL256         For retrieving input ASCII        @SC87117
UPCASE   DS    CL256         For upcasing EBCDIC               @SC86295
*OFF80    DS    CL256         For removing x'80' bits          @SC87253
* - - - Variables initialized to zeroes
SCANPTR  DS    0D            Len and address of parse buffer
LEN      DS    F
ADR      DS    F
SCANSV   DS    D             Saved len and adr                 @SC86295
CMD      DS    CL256         Buffer                            @SC86121
CBUF     DS    A             Address of CP response buffer     @SC86121
DATL     DS    F             Send packet size                  @SC86121
FDATE    DS    F             Date of current file              @SC86295
KBYTES   DS    F             Size of current file              @SC86158
* Program flags                                                @SC86316
FL1      DS    X                                               @SC86316
TSTF     EQU   X'80'         Special option for debugging      @SC86295
ROVR     EQU   X'40'         Overwrite sent filename
REN      EQU   X'20'         Rename incoming file
NAK0     EQU   X'10'         Send NAK during Resend
NAME     EQU   X'08'         Encoding/decoding a name
BINF     EQU   X'04'         Binary data
EOF      EQU   X'02'         End-of-file
DEBUG    EQU   X'01'         Debug mode ON
FL2      DS    X                                               @SC86316
TABS     EQU   X'40'         Expand tabs
EOFZ     EQU   X'20'         Truncate at ^Z for EOF
SRV      EQU   X'10'         In SERVER mode
PASS     EQU   X'08'         Try 'illegal' cmds on system      @SC86295
ECHO     EQU   X'04'         Echo TAKE files                   @SC86171
PROTO    EQU   X'02'         Line ready for transfers          @SC86295
DAT8     EQU   X'01'         8-bit data line                   @SC86316
FL3      DS    X                                               @SC86316
PXCH     EQU   X'20'         Parameters exchanged              @SC86152
APPN     EQU   X'10'         Append to existing files          @SC86203
FL4      DS    X                                               @SC86316
TTAB     EQU   X'80'         Use separate tables for terminal  @SC87117
SFM      EQU   X'20'         Sending from memory               @SC86158
TXT      EQU   X'10'         Xmitting text to micro            @SC86158
NPS      EQU   X'08'         Xmitting without protocol         @SC86165
UCMD     EQU   X'02'         User command entered              @SC86158
NMOK     EQU   X'01'         Filename collsion already checked @SC87012
FL5      DS    X                                               @SC86316
CMERR    EQU   X'80'         Syntax error on last command      @SC86171
TKHLT    EQU   X'40'         Quit TAKE file on error           @SC86171
TIMF     EQU   X'20'         Enable packet-reception timer     @SC86355
KEEP     EQU   X'10'         Keep incomplete files             @SC86225
SALL     EQU   X'08'         Search all disks for SEND         @SC86209
TKMSG    EQU   X'04'         Already issued TAKE error msg     @SC86239
*
SEQ      DS    X             Current pkt number                @SC86135
RSN      DS    X             Received pkt number               @SC86135
TRMFLG   DS    X             Flag(s) for terminal I/O          @SC87275
TRMTP    DS    C             Type of terminal line             @SC87166
RBUF     DS    A             Addr of FSREAD buffer             @SC86121
CLEN     DS    A             Length of non-tokenized parm      @SC86121
NSENT    DS    F             Number of files sent              @SC86121
TSENT    DS    F             Pointer to sent files table       @SC86121
IOERC    DS    F             Error count to detect loops       @SC86158
TXTPTR   DS    2F            Ptrs to start and end of text     @SC86158
RBUFL    DS    F             Record len (if recfm = V)         @SC86121
RDWLEN   DS    F             Record descriptor length          @SC86151
SNDPKL   DS    F             SNDPKT length for I/O             @SC86295
RCVPKL   DS    F             RCVPKT length after I/O           @SC86295
APKT     DS    A             Ptr to packet buffer              @SC86190
ASPKT    DS    A             Ptr to effective send packet      @SC86190
AASPKT   DS    A             Ptr to send packet                @SC86190
ASDATA   DS    A             Ptr to data to send               @SC86190
ARPKT    DS    A             Ptr to receive packet buffer      @SC86190
ARDATA   DS    A             Ptr to received data              @SC86190
FILPTR   DS    A             Ticket for FILNAM file I/O        @SC86295
LOGPTR   DS    A             Ticket for LOG file I/O           @SC86295
DBGTYP   DS    A             Ptr to translation table          @SC86316
TOUTOT   DS    2F            I*8 count of bytes sent           @SC86295
TINTOT   DS    2F            I*8 count of bytes received       @SC86295
DSKTOT   DS    2F            I*8 count of disk I/O bytes       @SC86295
PAKCNT   DS    F             Number of packets sent/received   @SC86295
RTRCNT   DS    F             Number of retries                 @SC86295
SECTOT   DS    F             Duration of transfer (sec)        @SC86295
CSECTOT  DS    F             Duration of transfer (csec)       @SC86345
RECTRC   DS    F             Count of record truncations       @SC87268
LSTATS   EQU   *-TOUTOT      Size of area to initialize        @SC86295
PREFIX   DS    X,CL(FORMAXL) Prefix count and buffer           @HF86223
SUFFIX   DS    X,CL(FORMAXL) Suffix count and buffer           @HF86223
JFSPEC   DS    X             Length of foreign filespec        @SC86224
JFNAM    DS    CL47          Filespec                          @SC86224
FILNAM   DS    CL(LFID)      SEND/REC filename                 @SC86295
         DS    0F                                              @SC86295
IFILE    DS    CL(LFID)      Name of file(s) to send           @SC86295
LIMTRY   DS    F             Max packet retries
FREEDW   DS    F             Size of aux. storage              @SC86295
FREEPTR  DS    A             Ptr to aux. storage               @SC87286
STKPTR   DS    F             Current stack end                 @SC86295
STKLIM   DS    F             End of stack storage              @SC86295
EVCTR    DS    F             Count of files opened             @SC86295
EMSGP    DS    A             Ptr to micro message              @BS86090
EMSGL    DS    F             Length of msg                     @BS86090
LEMSG    EQU   80            Max msg length kept               @SC87338
LMARG    DS    F             Left margin for SEND (0=>none)    @SC87253
RMARG    DS    F             Right margin (0=>none)            @SC87253
RBUFP    DS    F             RBUF pointer
WBUFL    DS    F             Data length in WBUF
MAXSIZ   DS    2A(KDEF-16)   Max pkt size sent
ORGR0    DS    F             Saved R0 at main entry            @SC87253
ORGR1    DS    F             Saved R1 at main entry            @SC86295
*  Plists for reading and writing in protocol mode
S1WRPL   DS    2F            Address, length of data to send   @SC86295
S1RDPL   DS    A(0,LPKT+3)   For reading data (max length)     @SC86295
*
TYWRPL   DS    2F            Address, length of data to send   @SC86295
TYRDPL   DS    A(0,LPKT)     For reading data (max length)     @SC86295
*
RIOC     DS    F             Saved data length from prev read  @SC86295
PREV     DS    C             Previous char decoded
* - - - Variables initialized via block MVC's
         KSYSTF ,                                              @SC86295
* Specifications for LOG file                                  @SC86295
LOGFDB   DS    0F                                              @SC86295
LOGBUF   DS    A             Buffer ptr                        @SC86295
         DS    A(LPKT)       Buffer size                       @SC86295
         DS    C'V'          RECFM                             @SC86295
LOGFLGS  DS    X'00'                                           @SC86295
         DS    Y(LPKT)       LRECL                             @SC86295
        FDBPAT LOG           Default disk volume, unit, etc.   @SC86316
* Specifications for SEND/RECEIVE file                         @SC86295
FILFDB   DS    0F                                              @SC86295
WBUF     DS    A,F           Adr,length of FSWRITE buffer      @SC86121
RFM      DS    C'V'          Default recfm for disk write
FILFLGS  DS    X'00'                                           @SC86295
LRECL    DS    H'80'         Lrecl for disk write
        FDBPAT FIL           Default disk volume, unit, etc.   @SC86316
* Specifications for TAKE file (read-only)                     @SC86295
TAKFDB   DS    0F                                              @SC86295
TAKBUF   DS    A             Buffer ptr (CMD)                  @SC86295
         DS    F'256'        Max buffer size                   @SC86295
         DS    C'V'          RECFM                             @SC86295
         DS    X'00'                                           @SC86295
*
MAXTNT   DS    F'16'         Retry limit during setup          @SC86345
MAXTRY   DS    F'5'          Retry limit during transfer       @SC86164
LCLDLY   DS    F'10'         Time to wait before sending       @SC86164
RPSIZ    DS    A(KMAX)       Max receive size                  @SC86295
SPSIZ    DS    A(KDEF)       Max send size                     @SC86295
MAXOUT   DS    F'&MAXLR'     Max output buffer                 @SC86268
TRMLIN   DS    CL8' '        Current data line                 @SC87166
TYPFIL   DS    C'T'          Type of file (T,B,V,D),see BINF   @SC86151
*
DEFPARM  DS    AL1(KDEF+ABL,ABL,ABL,64,CR+ABL,A#,AN,A1,ABL,ABL) SC86149
         DS    AL1(ABL,ABL,ABL,ABL)  Extended size defaults    @TB86196
RCAPA    DS    X'0'          Capabilities of micro             @SC86149
SCAPA    DS    X'8'          Capabilities I have (A-packets)   @SC86149
REOL     DS    AL1(CR)       EOL char I need (cr)
SEOL     DS    AL1(CR)       EOL I'll send
RMARK    DS    AL1(SOH)      Incoming pkt start char
SMARK    DS    AL1(SOH)      Outbound pkt start char
RCTLQ    DS    AL1(A#)       Micro's ctl-quote char
SCTLQ    DS    AL1(A#)       Ctl-quote char we'll use
EBQC     DS    AL1(AAMP)     Orig 8-bit quote char
RTIMO    DS    AL1(5)        Time limit - micro to wait for us @SC86164
TIMOUT   DS    AL1(0)        Timeout, if we can implement it   @SC86164
BCTC     DS    AL1(1)        User requested chksum length
RPTQC    DS    AL1(ATIL)     Original repeat prefix
S1XOPL   DS    A(0,S1ORDL+2) For sending prompt                @SC87274
S1XON    DS    X'&S1CMD',AL1(SBA),X'5D7F',AL1(SBA),X'0005'     @SC87274
S1ORDL   EQU   *-S1XON                                         @SC86295
S1EOL    DS    AL1(CR)       In case micro lost one            @SC87274
S1HND    DS    AL1(XON)      Handshake for micro               @SC87274
LDEFS    EQU   *-DEFS                                          @SC86295
*
S1DATA   DS    XL(S1ORDL)    Write or write/read orders        @SC86295
WRRD     EQU   *-1           Zap this to 0 for just write      @SC86295
*                   ... but ONLY if we really won't read again @SC87343
SVHND    DS    X             Saved value of HANDSHAKE char     @SC87343
* - - - Initialized to zeroes
RPTQ     DS    X             Repeat prefix
EBQ      DS    X             8-bit quoting char (off)
BCTU     DS    X             Checksum length in use
BCTR     DS    X             Other Kermit's chksum length
RPADN    DS    X             Receive padding count
SPADN    DS    X             Send pad count                    @SC86164
RPADC    DS    X             Receive pad char
SPADC    DS    X             Send pad char                     @SC86164
TMP      DS    X
TMPDW    DS    D             Work double word
FSIZE    DS    F             Record length                     @SC86203
FRECF    DS    C             Record format flag                @SC86151
STYPE    DS    C             Type of packet sent               @SC86295
RTYPE    DS    C             Type of packet received           @SC86295
ERRNUM   DS    X             Error number                      @SC86156
OLDERR   DS    X             Saved error number in loop        @SC86171
REASON   DS    X             Reason for rejecting A-pkt        @SC86316
OPRND    DS    CL32          Upcased operand for table lookup  @SC87034
TCTLQ    DS    X             XECHO control character escape    @SC86165
TABTBL   DS    XL20          Tab stops                         @SC86355
TABCNT   DS    H             Current number of tabs            @SC86355
         KSYSVAR ,           Specific variables                @SC87012
         DS    0D                                              @SC86295
STODWDS  EQU   (*-STORAG)/8                                    @SC86295
         TITLE 'ERRMSG - List of error messages'               @SC86135
* Table of error messages                                      @SC86156
         MSGDF NOE,'No errors'                    Err #0       @SC86156
         MSGDF NFT,'No file transfers yet'        Err #1       @SC86156
         MSGDF TRC,'Transfer cancelled'           Err #2       @SC86156
         MSGDF USC,'Invalid server command'       Err #3       @SC86156
         MSGDF TIE,'Terminal I/O error'           Err #4       @SC86156
         MSGDF BPC,'Bad packet count or chksum'   Err #5       @SC86156
         MSGDF IPS,'Invalid packet syntax'        Err #6       @SC86158
         MSGDF IPT,'Invalid packet type'          Err #7       @SC86156
         MSGDF MIS,'Lost a packet'                Err #8       @SC86156
         MSGDF NAK,'Micro sent a NAK'             Err #9       @SC86156
         MSGDF ABO,'Micro aborted'                Err #10      @SC86156
         MSGDF FNE,'Invalid file name'            Err #11      @SC86156
         MSGDF FNF,'File not found'               Err #12      @SC86156
         MSGDF FUL,'Disk or file is full'         Err #13      @SC86345
         MSGDF DIE,'Disk I/O error'               Err #14      @SC86345
         MSGDF MOP,'Missing operand'              Err #15      @SC86158
         MSGDF SYS,'Illegal system command'       Err #16      @SC86268
         MSGDF KCE,'Kermit command error'         Err #17      @SC86171
         MSGDF TIM,'No packet received'           Err #18      @SC86355
         MSGDF RTR,'Records truncated'            Err #19      @SC87268
         MSGDF COM,'Bad communication line'       Err #20      @SC87300
