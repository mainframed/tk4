*COPY                                                 KW
         MACRO
&LABEL   KW    &KW,&ADDR,&MIN=1
.* Define a KW for the parser
.*  &1: 'keyword' or GOTO (to define ptr to next keyword item) or nil
.*  (to end a list), &2: address of handler (if &1 is a 'keyword') or
.*  of next item (if &1 is GOTO) (A), &MIN=length of min. abrv
         LCLA  &LEN
         AIF   ('&KW' NE '').KW
&LABEL   DC    X'FF'
         AGO   .DONE
.KW      AIF   ('&KW' NE 'GOTO').KWN
&LABEL   DC    AL3(&ADDR),AL1(255)                             @SC87117
         MEXIT
.KWN     ANOP
&LEN     SETA  K'&KW-3
&LABEL   DC    AL3(&ADDR.),AL1(&LEN.),AL1(&MIN.-1),C&KW
.DONE    MEND
*COPY                                                 SCAN
         MACRO
&LABEL   SCAN  &TABLE,&HELP,&NODISP                            @SC87320
.* Parse input using a KW table. Setup already done via NTOKN or CTOKN.
.* Dispatch to proper handler if found in table, else return.
.*  &1: adr of relevant table (LA/R), &2: handler if '?' (LA),
.*  &3: if 'NODISP', then dispatch to HELP handler with high byte of
.*  R7 not 0 and (R1)-> KW entry (if found)
&LABEL   LREG  1,&TABLE                                        @SC86295
         AIF   ('&NODISP' EQ '').CALL                          @SC87320
         AIF   ('&NODISP' NE 'NODISP').ERR                     @SC87320
         ICM   7,8,*                                           @SC87320
.CALL    BAL   14,SCAN                                         @SC87320
          B    &HELP                                           @SC86135
         MEXIT                                                 @SC87320
.ERR     MNOTE 2,'Invalid positional parameter &NODISP'        @SC87320
         MEND
*COPY                                                 HELP
         MACRO
&LABEL   HELP  &TABLE,&RETURN
.* Display acceptable keywords, then branch
.*  &1: ptr to table (LA/R), &2: place to branch (LA)
&LABEL   LREG  1,&TABLE                                        @SC86295
         BAL   14,HELPKW
          B    &RETURN                                         @SC86135
         MEND
*COPY                                                 NTOKN
         MACRO
&LABEL   NTOKN &H=,&N=
.* Pick next token, optionally test for ?
.*  &H= handler if '?' (LA), &N= handler if none (LA)
&LABEL   BAL   14,WSPTOK
          B    &N                                              @SC86135
         AIF   ('&H' EQ '').H
         CLI   0(6),C'?'                                       @SC86115
         BE    &H
.H       MEND
*COPY                                                 FTOKN
         MACRO
&LABEL   FTOKN &H=,&N=
.* Find start of next token, optionally test for ?
.*  &H= handler if '?' (LA), &N= handler if none (LA)
&LABEL   BAL   9,WSP                                           @SC86295
          B    &N                                              @SC86224
         AIF   ('&H' EQ '').H                                  @SC86224
         CLI   0(7),C'?'
         BE    &H
.H       MEND
*COPY                                                 PTEXT
         MACRO
&LABEL   PTEXT &TEXT,&LEN,&AREG=3,&LREG=4
.* Set up 2 registers to point to some text and contain the length
.*  &1: 'text' (where text has no doubled ' or & characters)  OR
.*  &1: text (LA/R), &2: length of text (LA/R),
.*  &AREG= reg for ptr, &LREG= reg for len
         LCLA  &TEXTL
         AIF   ('&TEXT'(1,1) EQ '''').TEXT                     @SC86355
&LABEL   LREG  &AREG,&TEXT                                     @SC86295
         AGO   .LEN                                            @SC86355
.TEXT    ANOP
&TEXTL   SETA  K'&TEXT-2
&LABEL   LA    &AREG,=C&TEXT
         AIF   ('&LEN' NE '').LEN                              @SC86355
         LA    &LREG,&TEXTL
         MEXIT
.LEN     LREG  &LREG,&LEN                                      @SC86295
         MEND
*COPY                                                 KCALL
         MACRO
&LABEL   KCALL &NAME,&VALUE,&EXT,&E=
* Call a routine, fill R1 with a parm if any, and allow error branch
.*  &1: routine name or (reg), &2: argument (LA/R) (opt),      @SC87275
.*  &3: EXT if non-Kermit,                                     @SC87275
.*  &E= branch if R15 NZ (LA) or (branch,cc) with cc=suffix of B instr
         LCLC  &CC                                             @SC86135
&CC      SETC  'NZ'          Default condition                 @SC86135
&LABEL   LREG  1,&VALUE                                        @SC86295
         AIF   ('&EXT' NE 'EXT').INTRN                         @SC86295
         L     15,=V(&NAME)                                    @SC86295
         AGO   .BAL                                            @SC87012
.INTRN   AIF   ('&NAME'(1,1) NE '(').INTRNL                    @SC87275
         LREG  15,&NAME                                        @SC87275
         AGO   .BAL                                            @SC87275
.INTRNL  L     15,A&NAME                                       @SC86295
.BAL     BALR  14,15                                           @SC87012
         AIF   ('&E' EQ '').NOERR
         AIF   ('&EXT' NE 'EXT').NOLT                          @SC87012
         LTR   15,15                                           @SC87012
.NOLT    AIF   (N'&E LT 2).NCC                                 @SC87012
&CC      SETC  '&E(2)'                                         @SC86135
.NCC      B&CC &E(1)                                           @SC86135
.NOERR   MEND
*COPY                                                 ADCON
         MACRO
         ADCON
.* Define address constants for subroutine calls, etc.  Takes a list.
         LCLA  &N                                              @SC86295
.LUP     AIF   (&N GE N'&SYSLIST).DUN                          @SC86295
&N       SETA  &N+1                                            @SC86295
A&SYSLIST(&N) DC A(&SYSLIST(&N))                               @SC87201
         AGO   .LUP                                            @SC86295
.DUN     MEND
*COPY                                                 LREG
         MACRO
&LABEL   LREG  &R,&VAL                                         @SC86295
.* Load register with parameter
.*  &1: reg, &2: value (LA) or (reg) or omitted
         AIF   ('&VAL' EQ '').OKREG                            @SC86295
         AIF   ('&VAL'(1,1) EQ '(').REG                        @SC86295
&LABEL   LA    &R,&VAL                                         @SC86295
         MEXIT                                                 @SC86295
.REG     AIF   ('&VAL' EQ '(&R)').OKREG                        @SC86295
&LABEL   LR    &R,&VAL(1)                                      @SC86295
         MEXIT                                                 @SC86295
.OKREG   AIF   ('&LABEL' EQ '').Z                              @SC86295
&LABEL   DS    0H                                              @SC86295
.Z       MEND                                                  @SC86295
*COPY                                                 OPENF
         MACRO
&LABEL   OPENF &MODE,&NAME,&FDB,&FID,&E=
.* Open file for input or output or test existence
.*  &1: I|O|T, &2: file name (LA/R), &3: pattern FDB (LA/R),
.*  &4: file ticket (LA) (opt), &E= error branch (see KCALL)
         LCLA  &CODE                                           @SC86295
         AIF   ('&MODE' NE 'I').CKO                            @SC86295
&CODE    SETA  1                                               @SC86295
         AGO   .MOK                                            @SC86295
.CKO     AIF   ('&MODE' NE 'O').CKT                            @SC86295
&CODE    SETA  2                                               @SC86295
         AGO   .MOK                                            @SC86295
.CKT     AIF   ('&MODE' NE 'T').ILLM                           @SC86295
&CODE    SETA  3                                               @SC86295
         AIF   ('&FID' NE '').ILLF                             @SC86295
.MOK     ANOP  ,                                               @SC86295
&LABEL   LA    0,&CODE                                         @SC86295
         LREG  2,&NAME                                         @SC86295
         KCALL DISKIO,&FDB,E=&E                                @SC86295
         AIF   ('&FID' EQ '').Z                                @SC86295
         ST    0,&FID                                          @SC86295
.Z       MEXIT                                                 @SC86295
.ILLM    MNOTE 2,'ILLEGAL MODE ''&MODE'''
         MEXIT                                                 @SC86295
.ILLF    MNOTE 2,'FID NOT ALLOWED WITH MODE ''&MODE'''
         MEND
*COPY                                                 CLOSF
         MACRO
&LABEL   CLOSF &FID,&E=
.* Call DSKIO to close a file and zero ticket.  NOP if already 0.
.*  &1: file ticket (LA) (opt), &E= error branch (see KCALL)
&LABEL   LA    0,4                                             @SC86295
.CAL     KCALL DISKIO,&FID,E=&E                                @SC86295
         MEND
*COPY                                                 ERRF
         MACRO
&LABEL   ERRF
.* Call DISKIO to analyze an error code in R15 (no options)
.* Clobbers TMPDW
&LABEL   LA    0,12                                            @SC87338
         CVD   15,TMPDW      Save error code                   @SC87338
         KCALL DISKIO        Keep registers same               @SC87338
         MEND
*COPY                                                 ERASF
         MACRO
&LABEL   ERASF &NAME,&E=
.* Call DISKIO to erase a file
.*  &1: file name (LA/R), &E= error branch (see KCALL)
&LABEL   LA    0,14                                            @SC86295
         KCALL DISKIO,&NAME,E=&E                               @SC86295
         MEND
*COPY                                                 NXTFSET
         MACRO
&LABEL   NXTFSET &NAME,&TYPE,&E=
.* Call DISKIO to set up search for files
.*  &1: file name (LA/R), &2: CWD => checking validity for CWD,
.*  END => closing file name search,
.*  &E= error branch (see KCALL)
         LCLA  &CODE                                           @SC86295
&CODE    SETA  5             Ordinary setup                    @SC86295
         AIF   ('&TYPE' EQ '').TOK                             @SC86295
&CODE    SETA  7             End of search                     @SC86355
         AIF   ('&TYPE' EQ 'END').TOK                          @SC86355
&CODE    SETA  8             Check CWD string                  @SC86295
.TOK     ANOP
&LABEL   LA    0,&CODE                                         @SC86295
         KCALL DISKIO,&NAME,E=&E  Init for NXTFST call         @SC86295
         MEND
*COPY                                                 NXTF
         MACRO
&LABEL   NXTF  &E=
.* Call DISKIO to get next file name in FILNAM
.*  &E= error branch (see KCALL)
&LABEL   LA    0,6                                             @SC86295
         KCALL DISKIO,E=&E   Find next file                    @SC86295
         MEND
*COPY                                                 RET
         MACRO
&LABEL   RET   &TYPE
.* Generate return from subroutines.
.*  &1: MAIN if return from Kermit main code
         AIF   ('&TYPE' EQ 'MAIN').RMAIN                       @SC86295
&LABEL   B     RTRN                                            @SC86295
         MEXIT
.RMAIN   ANOP
&LABEL   L     13,4(13)      Unlink                            @SC86295
         ST    15,16(13)     Save return code                  @SC86295
         LA    0,STODWDS+STKDWDS                               @SC87012
         LR    1,11                                            @SC86316
       DMSFRET DWORDS=(0),LOC=(1)                              @SC86295
         LM    14,12,12(13)  Restore registers                 @SC86295
         BR    14                                              @SC86295
         MEND
*COPY                                                 ENTER
         MACRO
&LABEL   ENTER &TYPE                                           @SC86295
.* Establish routine entry code
.*  &1: ALT if 2ndary entry or MAIN if main program
         GBLC  &RTN                                            @SC86295
         AIF   ('&TYPE' EQ 'ALT').ALT                          @SC86141
&RTN     SETC  '&LABEL'
&LABEL   CSECT
         USING &RTN.SV,13                                      @SC86295
         USING &LABEL,12                                       @SC86295
         SAVE  (14,12),,&LABEL                                 @SC86141
         AIF   ('&TYPE' NE 'MAIN').ORD                         @SC86295
         LR    12,15                                           @SC86295
         L     10,=A(COMMON) Common code addressibility        @SC86316
         LA    0,STODWDS+STKDWDS                               @SC87012
       DMSFREE DWORDS=(0)    Get storage for vars + stack      @SC86295
         LR    11,1          Get addressibility                @SC86295
         LR    0,1                                             @SC86295
         LA    1,8*STODWDS   Length of storage                 @SC86295
         SR    15,15         Zero fill                         @SC86295
         MVCL  0,14                                            @SC86295
         LR    15,0          Start of stack                    @SC86295
         A     0,=A(8*STKDWDS) End of stack                    @SC87012
         STM   15,0,STKPTR                                     @SC86295
         LM    15,1,16(13)   Restore registers                 @SC86295
         AGO   .ORD                                            @SC86141
.ALT     ENTRY &LABEL                                          @SC86141
&LABEL   SAVE  (14,12),,*                                      @SC86141
         L     15,A&RTN                                        @SC86295
.ORD     LA    0,&RTN.LX                                       @SC86295
         BAL   14,SUBENT                                       @SC86295
         MEND
*COPY                                                 EXIT
         MACRO
         EXIT
.* Assembler stuff for end of routine and end of local temporaries
         GBLC  &RTN                                            @SC86295
         DS    0D                                              @SC86295
&RTN.LX  EQU   *-&RTN.SV                                       @SC86295
         DROP  13,12                                           @SC86295
         MEND
*COPY                                                 LOCALS
         MACRO
         LOCALS
.* Define storage for save area.  Follow with temporaries
         GBLC  &RTN                                            @SC86295
.LT      LTORG                                                 @SC86141
&RTN.SV  DSECT                                                 @SC86295
         DS    18F                                             @SC86295
         MEND
*COPY                                                 ASCSYM
         MACRO
         ASCSYM &LIST
.* Define symbols (of form 'Ax') for ASCII upper-case & digits
         LCLA  &I,&N
         LCLC  &C
&N       SETA  K'&LIST       Number of chars
&I       SETA  0
.LP      AIF   (&I GE &N).DONE
&I       SETA  &I+1
&C       SETC  '&LIST'(&I,1)
         AIF   ('&C' LT 'A').LP
         AIF   ('&C' GT 'I').TRJR
A&C      EQU   C'&C'-128
         AGO   .LP
.TRJR    AIF   ('&C' GT 'R').TRSZ
A&C      EQU   C'&C'-135
         AGO   .LP
.TRSZ    AIF   ('&C' GT 'Z').TRNUM
A&C      EQU   C'&C'-143
         AGO   .LP
.TRNUM   AIF   ('&C' GT '9').LP
A&C      EQU   C'&C'-192
         AGO   .LP
.DONE    MEND
*COPY                                                 NOTQR
         MACRO
&LABEL   NOTQR &BRANCH                                         @SC86120
.* Test for an Ascii char range of 33-62 and 96-126
.*  &1: branch if out of range (LA)
&LABEL   BAL   14,CHKQR                                        @SC86120
          B    &BRANCH                                         @SC86120
         MEND
*COPY                                                 UNCHR
         MACRO
&LABEL   UNCHR &REG,&DATA,&TO
.* UnChr: Subtract an ASCII space.  Set cc=M if too small.
.*  &1: reg for value, &2: source (LA) if not &1, &3: dest (LA) (opt)
&LABEL   CCHAR &REG,&DATA,&TO,S,SPACE
         MEND
*COPY                                                 TOCHR
         MACRO
&LABEL   TOCHR &REG,&DATA,&TO
.* ToChr: Add an ASCII space
.*  &1: reg for value, &2: source (LA) if not &1, &3: dest (LA) (opt)
&LABEL   CCHAR &REG,&DATA,&TO,A,SPACE
         MEND
*COPY                                                 CTL
         MACRO
&LABEL   CTL   &REG,&DATA,&TO
.* CTL: Reverse bit 6 to make a ctl char printable and vice versa
.*  &1: reg for value, &2: source (LA) if not &1, &3: dest (LA) (opt)
&LABEL   CCHAR &REG,&DATA,&TO,X,F64                            @SC86120
         MEND
*COPY                                                 CCHAR
         MACRO
&LABEL   CCHAR &REG,&DATA,&TO,&OP,&VALUE
.* CCHAR: Used by CTL/UNCHR/TOCHR to add/subtract number
.*  &1: reg for value, &2: source (LA) if not &1, &3: dest (LA) (opt),
.*  &4: opcode for change, &5: operand
         AIF   ('&LABEL' EQ '').NOLAB
&LABEL   DS    0H
.NOLAB   AIF   ('&DATA' EQ '').NODATA
         SR    &REG,&REG                                       @SC86120
         IC    &REG,&DATA
.NODATA  &OP   &REG,&VALUE
         AIF   ('&TO' EQ '').TO
         STC   &REG,&TO
.TO      MEND
*COPY                                                 MSGDF
         MACRO
         MSGDF &NM,&TEXT
.* Define error message table entry and pointer
.*  &1: 3-letter error code, &2: 'text of message'
ERRTAB   CSECT
ERR&NM   EQU   (*-ERRTAB)/4  Symbolic error number
         DC    AL1(L'MSG&NM),AL3(MSG&NM)
ERRMSGS  CSECT
MSG&NM   DC    C&TEXT
         MEND
