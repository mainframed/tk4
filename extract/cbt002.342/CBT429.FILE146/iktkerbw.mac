TSO Kermit 4.0 "Beware File" - Known Bugs, Problems, Limitations.

As of: Sat Nov  5 11:08:45 1988

All variants of Kermit-370,  including the TSO version, use ASCII/EBCDIC
translation tables which conform to the ones given in the IBM System/370
Reference Summary.  If your site's translation  tables do not agree with
the ones Kermit uses,  enter  the appropriate  SET ATOE/ETOA/TATOE/TETOA
commands  in  the  SYSTEM  KERMINI  file.   Your  system's  ASCII/EBCDIC
translation  tables need not be mutual inverses,  but if either table is
not invertible  at all, then Kermit will not and cannot  work unless you
change your system's  table.  See the Kermit-TSO  chapter  in the User's
Guide for more information.

When TSO Kermit  is to be used with a 7171, make sure the 7171 is set up
with its "keyboard lock delay" set to 0.  Otherwise, the "terminal" will
hang whenever  TSO Kermit clears the screen.   This happens consistently
when  the  parameter  is set to 10, and not at all  when  set to 0.  For
numbers in between, the higher the number, the more it happens.

------------------------------------------------------------------------

Some updates  have  been received  since  Kermit-TSO 4.0  was originally
designed.   Any updates created later than your source should be applied
before you make the executable  module.  In general, updates received at
Columbia  will  not be applied  to the source  files  in the  TSO Kermit
distribution  until and unless "major" bugs are uncovered,  and then all
accumulated  updates  will be applied at once.  The description  of each
problem  and  a pointer  to its  solution  will  always  be included  in
IKTKER.BWR  (the present file),  but the  updates themselves  are  to be
found in IKTKER.UPD.

Release 4.0  is still a test release,  and there may be  further "major"
updates issued before  the sources are changed.   The problems that have
been fixed are too numerous to mention.

The procedure to update your copy of TSO Kermit is as follows:

1. Obtain  the latest  version  of IKTKER.UPD,  which  contains  all the
   updates as a composite  file punctuated  by comment lines introducing
   each update's name and briefly describing  its purpose.   Please note
   that  some  modes  of file  transport  have  a side effect  of either
   doubling  or removing any periods in the first column -- if your copy
   of IKTKER.UPD  has records beginning with "/", then all instances  of
   "/" in column 1 should be changed to "./".  Similarly,  any instances
   of "../" in columns 1-3 should be changed to just "./".

2. Determine  the date of your  sources.   If you received  them from  a
   secondary supplier,  you  will need  to examine  the source  code  to
   determine  the most recent  update  applied.   Just sort the combined
   source by columns  67-71;  the last  line will be  labelled  with the
   last-applied  update.   Note that  the date of the TSO-specific  code
   (sections  IKTMAC  and  IKTUTL)  may be different  from  that  of the
   generic  code,  so you  should  sort  the  two  parts  of the  source
   separately to determine both dates.

3. Discard all TSO-specific updates through the TSO date and all generic
   updates  through  the generic  date.   Note  that  each  TSO-specific
   update  is marked  as such in  its introductory  comment  line (which
   begins  "./ *").   The  updates  are  in chronological  order  within
   IKTKER.UPD,  so  discarding  updates  can  be done  by a simple  pass
   through the dataset.

4. Apply the  updates to your  composite source by  running GUPI,  which
   will  prompt  for the names  of the relevant  files  (these  must  be
   entered  as fully-qualified  dataset  names)  and for two operational
   flags.  Both flags should be given default values by entering  just a
   carriage return to the corresponding prompt.

   The resulting  file, however  you name it, can then be assembled  and
   tested.   It will be identical  to the current  composite  source  at
   Columbia (including  updates).   You should not, however, discard the
   original because the updating process is simplest if you always start
   from the same base source.

------------------------------------------------------------------------
Date: Mon, 31 Aug 87 11:09:50 CST
From: Mike Sorsen <SORSEN@WUVMD>
Subject: 7171 Causes CMS Kermit Problems When Flow Control Used

There  is a bug in the 7171 that causes  CMS Kermit  file  transfers  to
abort  in the middle  of a SEND after  a large  number  of retries  when
XON/XOFF  flow  control  is used by the receiver  or when XON/XOFF  flow
control is used by hardware  in between the 7171 and the receiver.   The
symptom  of this failure  is that CMS Kermit  attempts  to retransmit  a
packet before other Kermit has responded.

This bug was observed  using CMS KERMIT 3.1 running under VM/SP 3.1 (PUT
8409  SLU 311)  through  a 7171 at EC A31864  to MS-DOS  Kermit  version
2.29b.

The sequence of events is this:

CMS Kermit  sends a packet using transparent  write/read.   The receiver
(or other hardware in between the 7171 and the receiver)  sends a pacing
stop (XOFF)  and then a pacing  start (XON) to the 7171 while the packet
is being sent by the 7171.  The 7171 performs  the pacing, but then ends
the transparent  read prematurely,  returning X'93' (XOFF) to CMS as the
reply to the packet sent out.  CMS Kermit  rejects  this and retransmits
the packet.   The SEND  then breaks  down because  the recieving  Kermit
usually  starts  transmitting  an ACK to CMS while  the packet  is being
retransmitted.

Circumvention:

Set  the  7171  flags  so that  XOFF  is not  a valid  termination  of a
transparent  read.   See page  4-20  of 'IBM 7171 Reference  Manual  and
Programming  Guide',  IBM publication  number GA27-0021.   This has been
tested at our site and found to circumvent the bug even though the XOFFs
are  being  transmitted   during  the  transparent  write  part  of  the
transparent write/read order and this flag concerns the transparent read
part of the order.

------------------------------------------------------------------------
It is now possible to issue a subcommand  to TSO Kermit (SET ATTRIB OFF)
to  suppress  the  exchange  of  attribute  packets.   This  feature  is
implemented in SC88071 (see IKTKER.UPD).

------------------------------------------------------------------------
Kermit-370 now has the feature of leaving protocol mode upon receiving a
"packet" that consists of nothing  but the word STOP.   This  feature is
implemented in SC88074 (see IKTKER.UPD).

------------------------------------------------------------------------
TSO Kermit, in talking  to another Kermit in server mode, would complain
if a "long reply"  to a server command  began with an X-packet,  even if
the current block check type was 1.  Mutually  setting the check to 2 or
3 would, of course, force the other Kermit to begin long replies with an
S-packet.  The fix: SC88074 (see IKTKER.UPD).

------------------------------------------------------------------------
Uploading  a member of an existing PDS would force the DCB attributes of
the PDS to whatever  Kermit-TSO  has  for  FILE  parameters.   The  fix:
SC88083 (see IKTKER.UPD).

------------------------------------------------------------------------
Kermit may hang when entering protocol mode over a protocol emulator  if
the screen is already full.  The fix: SC88083 (see IKTKER.UPD).

------------------------------------------------------------------------
HELP could not be invoked  twice within the same Kermit  session.   More
generally,  TSO commands  might leave datasets  marked  "in use" so that
they were unavailable  for further  processing.   The fix: SC88087  (see
IKTKER.UPD).

------------------------------------------------------------------------
The DIR subcommand  could not be interrupted.   The same was true of any
TSO command  invoked  from Kermit which didn't issue a STAX.  If you hit
BREAK enough times, though, you could get back to the TMP.

------------------------------------------------------------------------
TSO Kermit would perform the file name collision  procedure whenever the
user issued  a RECEIVE  subcommand  with a file name specified,  even if
WARN  was set OFF (the  WARN  setting  was, however,  honored  for names
obtained from the other Kermit).  The fix: SC88089 (see IKTKER.UPD).

------------------------------------------------------------------------
TSO Kermit would ABEND while trying to upload a file if the BLKSIZE  was
larger  than  the  track  size  of the  disk.   The  fix:  SC88090  (see
IKTKER.UPD).

------------------------------------------------------------------------
TSO Kermit would not treat a NAK for packet n+1 as an ACK for packet  n.
Instead,  it would retransmit  packet  n until and unless  the receiving
Kermit sent an explicit ACK.  The fix: SC88092 (see IKTKER.UPD).

------------------------------------------------------------------------
TSO Kermit now allows the user to define a logical  line delimiter  (via
the SET DELIM command)  that applies  to all subsequent  input  from the
terminal  (including  stacked input from CLIST's, etc.) Also, the former
hazard  of 0C4 ABEND from using a CLIST to stack Kermit subcommands  has
been removed.  The fix: SC88095 (see IKTKER.UPD).

------------------------------------------------------------------------
TSO Kermit now allows a freer wildcard  notation  for SEND.  An asterisk
may now stand for any string  of zero or more characters  in either  the
dataset name (for non-partitioned  datasets) or member name (for PDS's).
The fix: SC88096 (see IKTKER.UPD).

------------------------------------------------------------------------
TSO Kermit  would often fail to return  the output from a REMOTE command
while in server mode.  The fixes: SC88100 and SC88106 (see IKTKER.UPD).

------------------------------------------------------------------------
TSO Kermit now allows TAKE files with imbedded  sequence  numbers.   Any
numeric  field in the last 8 columns of a TAKE file (if FB, or the first
8 if VB) is ignored.  The fix: SC88101 (see IKTKER.UPD).

------------------------------------------------------------------------
There  are rumors  that this version  won't  work for TTY lines  through
VTAM.  If this is true, a temporary  workaround  might be to issue a SET
CON FULL by hand (or that might not work either).  In any case, if there
is any truth to the rumors, I'd like to hear the details, and I have two
possible fixes ready, just in case.

------------------------------------------------------------------------
If you invoke a non-existant  TSO command  from Kermit,  there will be a
sub-task  ABEND  and a READY message.   Just type a carriage  return  to
resume Kermit operation.

------------------------------------------------------------------------
Applying  update  SC88106  had  a serious  side-effect:  issuing  a SEND
subcommand  without the wildcard  notation  would result in sending  the
specified file repeatedly.  The fix: SC88106X (see IKTKER.UPD).

------------------------------------------------------------------------
Some terminal emulators attached through VTAM apparently do not respond
correctly without an explicit command to "unlock the keyboard" as part
of the transparent I/O request.  In particular, this behavior has been
seen with a PCI 276.  The following update appears to correct the
problem.

./ * LP88187 - Unlock keybrd for S/1 xparent mode (TSO)
./ R 01158000          $ 1158000 500                  07/06/88 10:39:35
&S1CMD   SETC  'F1C2'        S/1 command prefix                @LP88187

------------------------------------------------------------------------
