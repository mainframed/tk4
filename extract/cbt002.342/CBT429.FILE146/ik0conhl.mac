Notes on implementing terminal controller types in portable IBM/370
Kermit.

1. Many Kermit subroutines, particularly the system-specific ones, are
   called with a command code in register 0 or 1.  The code selects
   which of several possible operations the routine is to perform.
   Routines that require other arguments besides the command code, i.e.,
   FSPEC, DISKIO, TERMIO, and SCRNIO, find the command code in R0, but
   routines SUPFNC and SETMSG find it in R1.  See the comments at the
   beginning of each routine for a description of the parameters and
   the meanings of the command codes.  Any new terminal I/O handlers
   will be expected to have the same calling sequences as TERMIO and
   SCRNIO.

2. The controller names are generic, i.e., common to all operating
   systems, but the corresponding handlers are system-specific.  Thus,
   it may require some coordination among the various versions of
   Kermit-370 to get a new controller type properly implemented.  If,
   for example, a new handler demanded a change in the shared calling
   sequence, all handlers in all versions would probably need to be
   modified accordingly.

3. A new controller name can be implemented by simply adding it to the
   list of names at SETTRKW.  Handling the new controller type requires
   a bit more work.

4. The currently selected controller name is saved internally by Kermit
   as a one-character abbreviation (in TRMTP).  Hence, names must have
   unique first letters.

5. If there exists a means of detecting a particular type of controller
   from within Kermit-370, the test should be made in routine SETMSG
   (called with code 1) in order to initialize TRMTP properly.  At
   present, the tests can distinguish TTY from SERIES1 (by checking if
   the terminal has full screen capability) and SERIES1 from GRAPHICS
   (by issuing a Yale ASCII status request and assuming that only
   SERIES1-type controllers will respond).

6. Routines RIO, SIO, INTINI, and RPAR (all generic) have logic based on
   TRMTP for deciding which system-dependent handler to call at various
   points and for inserting the proper transparent-mode commands, if
   any, into the packet buffer.  The handlers have a shared calling
   sequence.  If a new controller type is similar enough to existing
   ones, it may be able to share an existing handler.  Otherwise, a new
   handler modelled along the lines of TERMIO and SCRNIO should be
   added.  In that case, an ADCON for the new routine must be added to
   the COMMON section.

7. Uses of TRMTP:
   a. selecting I/O handlers in SIO, RIO, INTINI, RPAR
   b. controlling system-specific setup in SETMSG
   c. limiting packet size for TTY terminals
   d. controlling generic I/O operations as needed
   e. initialized in SETMSG, if possible

8. Support for a new controller type must cover all the usual require-
   ments for the Kermit protocol:  there must be some sequence of
   commands to place the controller in transparent mode, such that
   inbound characters are not echoed and are presented to Kermit-370 "as
   is" (or at worst converted to EBCDIC), and outbound characters are
   similarly presented to the terminal.  Such a command sequence might
   be "once-only", but is more likely required for each outbound packet.
   The behavior of the SERIES1 type is illustrative.

9. Once a transfer is started, the succession of calls to the device
   handlers is entirely regimented.  In the absence of I/O errors, the
   transfer consists entirely of pairs of calls to the appropriate
   handler, first with code 4 (write) and then code 5 (read).  Errors
   can interrupt the sequence with other calls as needed for recovery.
   During a transfer, the flag WRRD has the value 5, indicating that
   every Write operation is followed immediately by a Read.  However,
   depending on the type of transfer, the last packet may be either
   inbound or outbound.  In the latter case, WRRD is set to 0 for the
   last 4/5 pair of calls, indicating that the Read call need not return
   any data.

------------------------------------------------------------------------
Kermit-370 has been reported or rumored to work with CONTROLLER set to:
TTY      - IBM 3705; IBM 3725; Comten; IBM 3708.
SERIES1  - Yale ASCII system on IBM Series/1 or IBM 4994; IBM 7171; IBM
           937x ASCII subsystem; Hydra II; Commtex Cx-80.
GRAPHICS - Datastream/Leedata 8010, 8030, or 874; Micom 7400; PCI 1076
           or 276 (see below); Renex TMS-1; KMW.

Failure has been reported for SIM3278 and for Adacom.

Note: The Commtex Cx-80 requires that all ASCII data have the high bit
      set on output and is seen by Kermit as a GRAPHICS device.

Another note: The PCI protocol converters require updates to CMS and TSO
Kermit that were issued in November 1988, and are listed in the .BWR fil
"Some terminal emulators attached through VTAM apparently do not respond
correctly without an explicit command to "unlock the keyboard" as part
of the transparent I/O request.  In particular, this behavior has been
seen with a PCI 276.  The following update appears to correct the
problem (listed in IKTKER.BWR, and included in IKCKER.BWR and IKCKER.UPD


