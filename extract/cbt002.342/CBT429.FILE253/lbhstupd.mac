/*    REXX EXEC : ( LBHSTUPD )
      FUNCTION  : ALLOWS CA-LIBRARIAN HISTORY DATASET MEMBER UPDATE FOR
                  A SPECIFIED WORKORDER NUMBER SELECTED RECORD ENTRIES.
                                                                      */
TRACE O
/*      */
HOUSE_KEEPING:
ADDRESS ISPEXEC
X = MSG("OFF")
LIBNODES = 'HISTCOPY HISTJCL HISTPROC HISTRAMI HISTSRCE HISTSYSI'
ACCTCCF = 5200010520000000
ENDWO = '  CR:  WO'
UTIREP = 'YES'
VPUTSW = 'NO'
COPYSW = 'NO'
MNTSW = 'NO'
EXITSW = 'NO'
TSOID = SYSVAR(SYSUID)
JDATE = DATE(J)
CDATE = DATE(U)
CTIME = TIME()
JMEMBER = 'H'JDATE
SKELJCL = 'LBHSTJCL'
"VGET (ACCTCDE) PROFILE"
IF RC ^= 0 THEN ACCTCDE = ACCTCCF
/* *** "VPUT (UTIREP) PROFILE"
IF RC = 0 THEN VPUTSW = 'YES'     *** */
OUTPDS = 'SYSS.TESTCCF.HISTORY.CNTLLIB'
JOURDSN = 'SYSS.TESTCCF.JOURNAL.CNTLLIB'

/*     M A I N   R O U T I N E   S E C T I O N     */
/*     */
MAIN_ROUTINE:
ADDRESS TSO
CALL WRITE_AUTHPARM
CALL DISPLAY_HISTORY_PARMS_PANEL
IF SRC >= 8 THEN DO
   CALL DELETE_PDS_MEMBER
   EXIT SRC
END
CALL READ_HISTORY_MODULE
CALL EXTRACT_WORKORDER_HISTORY_RECORDS
CALL BUILD_SCREEN_DATA
CALL DISPLAY_HISTORY_DATA_PANEL
IF SRC >= 8 THEN DO
   CALL DELETE_PDS_MEMBER
   EXIT SRC
END
CALL BUILD_HISTORY_UPDATE_RECORDS
IF UPDCNT = DATACNT THEN CALL COMPARE_HISTORY_DATA
IF EXITSW = 'YES' THEN DO
   CALL DELETE_PDS_MEMBER
   EXIT 0
END
CALL QUEUE_ENDING_HISTORY_RECORDS
CALL WRITE_HISTORY_PDS_MEMBER
/*   ***   N O O P
IF VPUTSW = 'YES' THEN CALL COPY_MEMBER_TO_HISTORY_MASTER
IF COPYSW = 'NO' THEN CALL BUILD_SUBMIT_LIBREP_JOB
                                                             *** */
CALL BUILD_SUBMIT_LIBREP_JOB
CALL ALLOC_JOURNAL_DATASET
INTERPRET CALL LABEL
MNTSW = 'YES'
CALL DELETE_PDS_MEMBER
EXIT 0

/*     S U B R O U T I N E   S E C T I O N     */
/*     */
WRITE_AUTHPARM:
ADDRESS TSO
"ALLOC DA('"OUTPDS"("TSOID")') FILE(ECRDD) SHR"
QUEUE TSOID JDATE
"EXECIO 1 DISKW ECRDD (FINIS"
SRC = RC
"FREE FILE(ECRDD)"
IF SRC ^= 0 THEN DO
   SAY '*** EXECIO WRITE ERROR: RETURN CODE: ('SRC'). ***'
   SAY '*** ERROR WRITING ('OUTPDS') PARM MEMBER. ***'
   SAY '*** LHISTORY EXEC SUBTASK CANCELLED. ***'
   EXIT SRC
END
RETURN
/*     */
DISPLAY_HISTORY_PARMS_PANEL:
ADDRESS ISPEXEC
"CONTROL ERRORS RETURN"
"DISPLAY PANEL(LBHSTPN1)"
SRC = RC
IF SRC = 8 THEN RETURN
IF SRC > 8 THEN DO
   SAY '*** ERROR INVOKING ISPF DIALOG PANEL ( LBHSTPN1 ). ***'
   SAY '*** LHISTORY EXEC MAINTASK CANCELLED - RC = 'SRC'. ***'
   RETURN
END
HISTNODE = WORD(LIBNODES,LIB)
FROMDSN = 'SYS1.'HISTNODE'.MASTER'
MASTER = 'SYS1.'HISTNODE'.MASTER'
KEYDATA = '  CR:  'WORKORDR
RETURN
/*     */
READ_HISTORY_MODULE:
ADDRESS TSO
LIBDSN = "'"MASTER"("MEMBER")'"
LIBDD = LIBALLOC(LIBDSN)  /* DYNALLOC LIBMASTER W/LAM; RET DDNAME*/
IF LIBDD = "ERROR" THEN DO
   SRC = 100
   SAY '*** DYNAMIC ALLOCATION ERROR: RETURN CODE ('SRC'). ***'
   SAY '*** ERROR ALLOCATING ('MASTER'('MEMBER'). ***'
   SAY '*** LHISTORY EXEC SUBTASK CANCELLED. ***'
   CALL DELETE_PDS_MEMBER
   EXIT SRC
END
"EXECIO * DISKR" LIBDD "(FINIS STEM DATA."
SRC = RC
IF SRC ^= 0 THEN DO
   SAY '*** EXECIO READ ERROR: RETURN CODE ('SRC'). ***'
   SAY '*** ERROR READING ('MASTER'('MEMBER'). ***'
   SAY '*** LHISTORY EXEC SUBTASK CANCELLED. ***'
   CALL DELETE_PDS_MEMBER
   EXIT SRC
END
RETURN
/*     */
EXTRACT_WORKORDER_HISTORY_RECORDS:
ADDRESS TSO
"FREE DA('"OUTPDS"')"
D = 0
O = 0
DATASW = 'NO'
ENDSW = 'NO'
"DELSTACK"
DO I = 1 TO DATA.0
   UPDATA = SUBSTR(DATA.I,1,15)
   IF DATASW = 'NO' & UPDATA ^= KEYDATA THEN QUEUE DATA.I
   IF UPDATA = KEYDATA THEN DO
      DATAHDR = SUBSTR(DATA.I,1,70)
      DATASW = 'YES'
      QUEUE DATA.I
      ITERATE
   END
   IF DATASW = 'YES' & ENDSW = 'NO' THEN DO
      DATAKEY = SUBSTR(DATA.I,1,61)
      DATAEND = SUBSTR(DATA.I,1,9)
      IF DATAEND = ENDWO THEN DO
         WOEND = SUBSTR(DATA.I,1,15)
         IF WOEND = KEYDATA THEN DO
            QUEUE DATA.I
            ITERATE
         END
         ENDSW = 'YES'
         E = I - 1
         O = O + 1
         ENDDATA.O = DATA.E
         O = O + 1
         ENDDATA.O = DATA.I
         ITERATE
      END
      D = D + 1
      HSTDATA.D = DATAKEY
   END
   IF DATASW = 'YES' & ENDSW = 'YES' THEN DO
      O = O + 1
      ENDDATA.O = DATA.I
   END
END
IF DATASW = 'NO' THEN DO
   SRC = 028
   SAY '*** HISTORY DATA ERROR: RETURN CODE: ('SRC'). ***'
   SAY '*** NO DATA FOUND FOR 'FROMDSN'('MEMBER') ('WORKORDR'). ***'
   SAY '*** LHISTORY EXEC SUBTASK CANCELLED. ***'
   CALL DELETE_PDS_MEMBER
   EXIT 0
END
RETURN
/*     */
BUILD_SCREEN_DATA:
DATACNT = D
DO I = 1 TO DATACNT
   INTERPRET 'D'I '= HSTDATA.'I
END
RETURN
/*     */
DISPLAY_HISTORY_DATA_PANEL:
ADDRESS ISPEXEC
"CONTROL ERRORS RETURN"
"DISPLAY PANEL(LBHSTPN2)"
SRC = RC
IF SRC = 8 THEN RETURN
IF SRC > 8 THEN DO
   SAY '*** ERROR INVOKING ISPF DIALOG PANEL ( LBHSTPN2 ). ***'
   SAY '*** LHISTORY EXEC MAINTASK CANCELLED - RC = 'SRC'. ***'
   RETURN
END
RETURN
/*     */
BUILD_HISTORY_UPDATE_RECORDS:
UPDCNT = 0
DO I = 1 TO 18
   DATAVAL = VALUE('D'I)
   IF DATAVAL = '' THEN ITERATE
   UPDCNT = UPDCNT + 1
   WRTDATA = LEFT(DATAVAL,72)
   QDATA = WRTDATA'UPDATE'
   QUEUE QDATA
END
RETURN
/*     */
COMPARE_HISTORY_DATA:
EQUALCNT = 0
DO I = 1 TO UPDCNT
   DATAVAL = VALUE('D'I)
   IF DATAVAL = HSTDATA.I THEN EQUALCNT = EQUALCNT + 1
END
IF EQUALCNT = UPDCNT THEN EXITSW = 'YES'
RETURN
/*     */
QUEUE_ENDING_HISTORY_RECORDS:
ADDRESS TSO
ENDCNT = O
DO I = 1 TO ENDCNT
   QUEUE ENDDATA.I
END
RETURN
/*     */
WRITE_HISTORY_PDS_MEMBER:
ADDRESS TSO
"ALLOC DA('"OUTPDS"("MEMBER")') FILE(ECRDD) SHR"
NUMRCDS = QUEUED()
"EXECIO" NUMRCDS "DISKW ECRDD (FINIS"
SRC = RC
"FREE FILE(ECRDD)"
IF SRC ^= 0 THEN DO
   SAY '*** EXECIO WRITE ERROR: RETURN CODE: ('SRC'). ***'
   SAY '*** ERROR WRITING 'OUTPDS'('MEMBER') STAGING PDS. ***'
   SAY '*** LHISTORY EXEC SUBTASK CANCELLED. ***'
   CALL DELETE_PDS_MEMBER
   EXIT SRC
END
RETURN
/*     */
COPY_MEMBER_TO_HISTORY_MASTER:
/* ***   N O O P   R O U T I N E   *** */
RETURN
COPYSW = 'NO'
ADDRESS ISPEXEC
"CONTROL ERRORS RETURN"
FROMDSN = 'SYSS.TESTCCF.HISTORY.CNTLLIB'
TODSN = 'SYS1.'HISTNODE'.MASTER'
"SELECT PGM(UTIMAIN) NEWAPPL(LIB@) NEWPOOL PARM(FDSN('"FROMDSN"("MEMBER"
 TDSN('"TODSN"("MEMBER")') CMD(C,OPT(REP)) RETURN"
SRC = RC
IF SRC ^= 0 THEN RETURN
COPYSW = 'YES'
RETURN
/*     */
BUILD_SUBMIT_LIBREP_JOB:
ADDRESS ISPEXEC "FTOPEN TEMP"
SRC = RC
IF SRC ^= 0 THEN DO
   ZERRMSG = $CCFA001
   ADDRESS ISPEXEC "SETMSG MSG($CCFA001)"
   CALL DELETE_PDS_MEMBER
   EXIT SRC
END
ADDRESS ISPEXEC "FTINCL" SKELJCL
SRC = RC
IF SRC ^= 0 THEN DO
   ZERRMSG = $CCFA003
   ADDRESS ISPEXEC "SETMSG MSG($CCFA003)"
   CALL DELETE_PDS_MEMBER
   EXIT SRC
END
ADDRESS ISPEXEC "FTCLOSE"
SRC = RC
IF SRC ^= 0 THEN DO
   ZERRMSG = $CCFA005
   CALL DELETE_PDS_MEMBER
   EXIT SRC
END
ADDRESS ISPEXEC "VGET ZTEMPF"
ADDRESS TSO "SUBMIT '"ZTEMPF"'"
SRC = RC
IF SRC ^= 0 THEN DO
   ZERRMSG = $CCFA006
   CALL DELETE_PDS_MEMBER
   EXIT SRC
END
RETURN
/*     */
ALLOC_JOURNAL_DATASET:
ADDRESS TSO
LABEL = 'NOOP_JOURNAL'
RECORD = MASTER MEMBER 'UPDATED BY:' TSOID CDATE CTIME
"ALLOC DA('"JOURDSN"("JMEMBER")') F(ECRDD) SHR"
DSN = SYSDSN("'"JOURDSN"("JMEMBER")'")
IF DSN = 'OK' THEN DO
   "DELSTACK"
   "EXECIO * DISKR ECRDD (FINIS"
   RCDCNT = QUEUED()
   LABEL = 'REWRITE_JOURNAL'
END
IF DSN = 'MEMBER NOT FOUND' THEN LABEL = WRITE_JOURNAL
RETURN
/*     */
WRITE_JOURNAL:
ADDRESS TSO
"DELSTACK"
QUEUE RECORD
"EXECIO 1 DISKW ECRDD (FINIS"
"FREE F(ECRDD)"
RETURN
/*     */
REWRITE_JOURNAL:
ADDRESS TSO
RCDCNT = RCDCNT + 1
QUEUE RECORD
"EXECIO" RCDCNT "DISKW ECRDD (FINIS"
"FREE F(ECRDD)"
RETURN
/*     */
NOOP_JOURNAL:
RETURN
/*     */
DELETE_PDS_MEMBER:
/* ***
ADDRESS ISPEXEC
"CONTROL ERRORS CANCEL"
"CONTROL NONDISPL END"
IF VPUTSW = 'YES' THEN DO
   UTIREP = 'NO'
   "VPUT (UTIREP) PROFILE"
END
                                          *** */
ADDRESS TSO
"DELSTACK"
PDSMEMB = SYSDSN("'"OUTPDS"("TSOID")'")
IF PDSMEMB = 'OK' THEN DO
   "ALLOC DA('"OUTPDS"("TSOID")') FILE(ECRDD) SHR"
   "DELETE '"OUTPDS"("TSOID")' FILE(ECRDD)"
   "FREE FILE(ECRDD)"
END
IF MNTSW = 'YES' THEN RETURN
IF MEMBER = '' THEN MEMBER = 'XXXXXXXX'
PDSMEMB = SYSDSN("'"OUTPDS"("MEMBER")'")
IF PDSMEMB = 'OK' THEN DO
   "ALLOC DA('"OUTPDS"("MEMBER")') FILE(ECRDD) SHR"
   "DELETE '"OUTPDS"("MEMBER")' FILE(ECRDD)"
   "FREE FILE(ECRDD)"
END
RETURN
