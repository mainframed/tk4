/* REXX */
/*                        >>>  QWSDSF <<<                    Rel 4.1 */
/* > See comments describing this exec at the bottom of this member< */
/*                                                                   */
/* Trace ?R */                       /* For debugging, if needed     */
Address ISPEXEC
INTAB1 = '000102030405060708090A0B0C0D0E0F'X ",=+*/()?"  /*Translate */
INTAB2 = '101112131415161718191A1B1C1D1E1F7D7F'X         /*Tables    */
INTAB3 = '7D7F'X
"VGET (QWCSRP QWCSRN ISFBUF ZSCREENW) SHARED"
If RC > 0
 Then
 Do
 Say 'VGET Return Code = ' RC
 Say 'See "Debugging Cursor-Driven Invocation" in Chapter Four of the'
 Say 'MVS/QuickRef User Guide'
End
If RC = 0                /* If VGET flys, then we can do our thing   */
 Then
 Do
 "VGET (ZAPPLID) SHARED"
 QWSCRENW = ZSCREENW
 If ZAPPLID = "QWRF" THEN QWSCRENW = 78
 IF substr(QWCSRN,1,5) = "PDSLN"  /* Check for PdsTools invocation  */
  THEN
  DO
  "VGET (PDSTNAME PDSCSRRO) SHARED"
  IF substr(PDSTNAME,1,3) >< "PDS"
   THEN
   DO
   SAY '***ERROR: This is not a PDSTOOLS log panel'
   EXIT 12
   END
  "TBTOP " PDSTNAME
  "TBSKIP " PDSTNAME " NUMBER("PDSCSRRO")"
  If QWCSRN = "PDSLN1" Then ISFBUF = pdsln1
  If QWCSRN = "PDSLN2"
   THEN
   DO
   ISFBUF = substr(pdsln1,80,79)
   END
  QWSCRENW = 79
  QWSCRN = 1
  PDSTNAME = "NOTPDS"    /* clear the table name for the next call */
  END                    /* End of PdsTools inserts                */
 CURAREA = Translate(ISFBUF," ",INTAB1)  /* Blank out unwanted bytes */
 CURAREA = Translate(CURAREA," ",INTAB2) /* Blank out unwanted bytes */
 START = Lastpos(" ",CURAREA,QWCSRP)   /* Set bounds for scan        */
 If START = 0 Then START = 1           /* Cursor offset can't be 0   */
 CURSOR_ROW = (QWCSRP-1) % QWSCRENW    /* Get row number cursor is on*/
 START_ROW = START % QWSCRENW          /* Row number field starts on */
 QWCLNE = substr(ISFBUF,((CURSOR_ROW*QWSCRENW)+1),QWSCRENW)
 QWCLNE = Translate(QWCLNE," ",INTAB3)
 /* If field starts on prior row, back-scan just to start of this row*/
 If START_ROW < CURSOR_ROW Then
  START = ((QWCSRP % QWSCRENW) * QWSCRENW) + 1
 LGTH = ((START % QWSCRENW) +1) * QWSCRENW
 LGTH = (LGTH - START) + 1
 curword = Strip(Substr(curarea,start,lgth),"L") /*Strip unneeded*/
 Parse var curword msgid . 1 msgpx +3  /* parse out token & prefix   */
 parm="*="msgid        /* Force cross-topic search technique */
/* Use line below instead of one above for cross-database search    */
/* parm="?="msgid */
 parm = "7D"X ×× parm ×× "FF"X ×× QWCLNE ×× "7D"X
 "SELECT PGM(QWIKREF1) PARM("parm") NEWAPPL(QWRF)"
/* Use line below instead of one above if using QW LIBDEF CLIST */
/* "SELECT CMD(%QW PRM("parm")) NEWAPPL(QWRF)" */
Exit 0
End
/* This exec is used to invoke MVS/QuickRef from within several      */
/* products that are used to view SYSOUT or the SYSLOG.  Supported   */
/* products include SDSF, IOF, SAR, OPS/MVS, $AVRS, FLASHER, and     */
/* any other application that uses a dynamic area to present text    */
/* that contains messages or items stored within MVS/QuickRef.       */
/* This exec parses out the word that the cursor is on and           */
/* invokes MVS/QuickRef with the appropriate fast-path parm to       */
/* immediately display the description of the message or JCL keyword */
/* the cursor is on.                                                 */
/*                                                                   */
/* Instructions on how to install and use this exec can be found in  */
/* chapter four of the MVS/QuickRef user's guide.  You MUST modify   */
/* your main data display panel for SDSF, FLASHER, SAR, IOF, $AVRS,  */
/* OPS/MVS, or any other product for which cursor driven invocation  */
/* of MVS/QuickRef is desired, as documented in chapter four of the  */
/* MVS/QuickRef User's Guide.                                        */
