/*  REXX EXEC : ( NWABEND ).
    ENTRY     : EXECUTED WHENEVER STEP020 OF THE LAN SERVER TO HOST
                BACKUP JOBS TERMINATE WITH A RETURN CODE GREATER THAN 4.
    FUNCTION  : THE SYSOUT LISTING DATASET IS INPUT TO THIS EXEC AND IS
                SCANNED TO FIND ERROR MESSAGE CODES AND TEXT.
              : A SYSIN MEMBER IS CREATED AND WRITTEN TO THE MESSAGE
                CONTROL PDS DATASET AND IS INPUT VIA WTO TO DISPLAY
                THE FORMATTED MESSAGE TEXT TO THE OPERATOR MASTER
                CONSOLE AT THE ABEND030 STEP.
              : A RESTART PARM MEMBER IS WRITTEN TO THE RESTART PDS
                DATASET AND IS INPUT TO THE NWBACKUP ISPF PANEL AND REXX
                RESTART FACILITY.
              : THE CONTAINER AND INDEX GDG DATASETS FROM THE FAILED
                JOB EXECUTION ARE DETERMINED AND DELETED.
    INPUT     : ( PTECH2.NETCA.&&SERVER.SYSPRINT ).
    OUTPUT    : ( SYSS.NETCA.MESSAGE.CNTLLIB(&&SERVER)
                ( SYSS.NETCA.RESTART.PARMLIB(&&SERVER××'RSPRM').
                                                                    */
TRACE O
/*      */
HOUSE_KEEPING:
ADDRESS TSO
ARG SERVER BUTYPE RUNMODE
IF RUNMODE = '' THEN RUNMODE = 'BACKUP'
X = MSG("OFF")
"FREE FILE(NWDD)"
NWLIB.1 = 'SYSS.NETCA.MESSAGE.CNTLLIB'
NWLIB.2 = 'PTECH2.NETCA.'SERVER'.SYSPRINT'
NWLIB.3 = 'SYSS.NETCA.CONTROL.TEXTLIB'
NWLIB.4 = 'SYSS.NETCA.RESTART.PARMLIB'
DO I = 1 TO 4
   NWDSN = SYSDSN("'"NWLIB.I"'")
   IF NWDSN = 'OK' THEN ITERATE
   MCNT = 4
   MSG.1 = '*** LAN BACKUP FOR 'SERVER' FAILED OR IS INCOMPLETE. ***'
   MSG.2 = '*** DATASET ERROR: DATASET NOT FOUND FOR ('NWLIB.I'). ***'
   MSG.3 = '*** NOTIFY THE TECHNICAL SUPPORT CRITICAL CALL LIST PERSON.
   MSG.4 = '*** NWABEND EXEC TASK CANCELLED. ***'
   IF NWLIB.I = 'SYSS.NETCA.MESSAGE.CNTLLIB' THEN DO
      ALLOCATE_MESSAGE_CNTLLIB
      ITERATE
   END
   CALL WRITE_MESSAGE_SYSIN
   EXIT 028
END
T = 0
TAPEVOL = 'XXXXXX'
JULDATE = DATE(J)
HISTKEY = 'CONTAINER INDEX'
LBLNODE = 'CONTAINR INDEX'
STATUS_TEXT = 'SET GLOBAL FINAL_STATUS'
SUSR.1 = 'NOTIFY THE ON-CALL LAN COMMUNICATIONS GROUP PERSON.'
SUSR.2 = 'NOTIFY THE ON-CALL LAN COMMUNICATIONS GROUP PERSON.'
SUSR.3 = 'NOTIFY THE ON-CALL TECHNICAL SUPPORT PERSON.'
SUSR.4 = 'NOTIFY THE ON-CALL TECHNICAL SUPPORT PERSON.'
SUSR.5 = 'NOTIFY THE ON-CALL TECHNICAL SUPPORT PERSON.'
SUSR.6 = 'NOTIFY THE ON-CALL LAN COMMUNICATIONS GROUP PERSON.'
SUSR.7 = 'NOTIFY THE ON-CALL LAN COMMUNICATIONS GROUP PERSON.'
SUSR.8 = 'NOTIFY THE ON-CALL LAN COMMUNICATIONS GROUP PERSON.'
SUSR.9 = 'NOTIFY THE ON-CALL LAN COMMUNICATIONS GROUP PERSON.'
SMSG.1 = 'SERVICE NOT OFFERED FOR 'SERVER' SERVER CONNECTION FAILED.'
SMSG.2 = 'CONNECTION FAILED - RETRY LIMIT EXCEEDED FOR 'SERVER' SERVER.'
SMSG.3 = 'ERROR DURING RECEIVE MODE - DATA TRANSMISSION ERROR.'
SMSG.4 = 'ERROR DURING RECEIVE MODE - INDEX TRANSMISSION ERROR.'
SMSG.5 = 'ERROR DURING UPDATE MODE - HISTORY FILE UPDATE ERROR.'
SMSG.6 = 'ERROR DURING SEND MODE - HISTORY FILE REMOTE ERROR.'
SMSG.7 = 'ERROR DURING UPDATE MODE - REMOTE PURGE/UPDATE ERROR.'
SMSG.8 = 'ERROR DURING NOTIFY MODE - REMOTE NOTIFY ERROR.'
SMSG.9 = 'ERROR OCCURRED ON REMOTE 'SERVER' SERVER ENVIRONMENT.'

/*   S T A R T   O F   M A G I C   A N D   P O S   S E C T I O N   */
/*     */
CHECK_MAGIC_POS_FAILURE_REASON:
IF BUTYPE = 'MAGIC' × BUTYPE = 'POS' THEN DO
   SERVOL = BUTYPE
   VOLKEY = SUBSTR(BUTYPE,1,3)
   TLMSMEMB = VOLKEY'TLMS'
   BUTYPE = 'FULL'
   HISTDSN = 'PTECH2.NETCA.'SERVER'.'SERVOL'.H'
   NWLIB.2 = 'PTECH2.NETCA.'SERVER'.'SERVOL'.SYSPRINT'
   CALL READ_SERVER_LISTING
   DSNKEY.1 = 'PTAP.NETCA.'SERVER'.'VOLKEY'.'BUTYPE'.CONTAINR'
   DSNKEY.2 = 'PTECH2.NETCA.'SERVER'.'VOLKEY'.'BUTYPE'.INDEX'
   DO D = 1 TO 2
      DSNTEXT = DSNKEY.D
      DSNODE = WORD(LBLNODE,D)
      HSTKEY = WORD(HISTKEY,D)
      CALL FIND_DSNAME_IN_LISTING
      CALL CHECK_LISTING_FINAL_STATUS
      IF LSTSW = 'YES' THEN DO
         IF BACKUP_STATUS = 'FAIL' THEN DO
            LABEL = 'LISTCAT_CURRENT_GDG_'DSNODE
            INTERPRET CALL LABEL
            LABEL = 'DELETE_CURRENT_GDG_'DSNODE
            INTERPRET CALL LABEL
         END
      END
   END
   IF T = 0 THEN DO
      TAPECNT = 1
      TLMSRCD.1 = 'UPV XXXXXX,SCRATCH=YES'
   END
   CALL WRITE_TLMS_SYSIN
   OUTMEMB = SERVER××SERVOL
   OUTPDS = NWLIB.1
   CALL CHECK_SUBCHANNEL_ALLOCATION_FAILURE
   IF MSGSW = 'YES' THEN DO
      CALL WRITE_MESSAGE_SYSIN
      EXIT 0
   END
   IF BACKUP_STATUS = 'FAIL' THEN DO E = 1 TO 4
      POSTAT = SUBSTR(BUSTATUS,E,1)
      IF POSTAT = 'S' × POSTAT = 'W' THEN ITERATE
      LEAVE
   END
   CALL CHECK_BACKUP_MESSAGE_STATUS
   CALL WRITE_MESSAGE_SYSIN
   EXIT 0
END

/*   E N D   O F   M A G I C   A N D   P O S   S E C T I O N   */
/*     */
CHECK_LAN_SERVER_FAILURE_REASON:
VOLKEY = 'DAILY'
VOLMEMB = SERVER××'IVOLS'
TLMSMEMB = SERVER'TLMS'
IF BUTYPE = 'FULL' THEN DO
   VOLKEY = 'DAILYF'
   VOLMEMB = SERVER××'FVOLS'
END
F = 0
Q = 0
OUTPDS = NWLIB.1
OUTMEMB = SERVER
TAPECNT = 0
RSMEMB = SERVER××'RSPRM'
CALL READ_SERVER_VOLUMES
CALL READ_SERVER_LISTING
DO V = 1 TO VOLCNT
   SERVOL = VOL.V
   HISTDSN = 'PTECH2.NETCA.'SERVER'.'SERVOL'.H'
   DSNKEY.1 = 'PTAP.NETCA.'SERVER'.'SERVOL'.'BUTYPE'.CONTAINR'
   DSNKEY.2 = 'PTECH2.NETCA.'SERVER'.'SERVOL'.'BUTYPE'.INDEX'
   DO D = 1 TO 2
      DSNTEXT = DSNKEY.D
      DSNODE = WORD(LBLNODE,D)
      HSTKEY = WORD(HISTKEY,D)
      CALL FIND_DSNAME_IN_LISTING
      CALL CHECK_LISTING_FINAL_STATUS
      IF LSTSW = 'YES' THEN DO
         IF BACKUP_STATUS = 'FAIL' THEN DO
            LABEL = 'LISTCAT_CURRENT_GDG_'DSNODE
            INTERPRET CALL LABEL
            LABEL = 'DELETE_CURRENT_GDG_'DSNODE
            INTERPRET CALL LABEL
         END
      END
   END
   IF BACKUP_STATUS = 'OK' THEN ITERATE
   CALL CHECK_SUBCHANNEL_ALLOCATION_FAILURE
   IF MSGSW = 'YES' THEN DO
      CALL WRITE_MESSAGE_SYSIN
      MCNT = 1
      MSG.1 = 'ALL FAIL' BUTYPE
      OUTPDS = NWLIB.4
      OUTMEMB = SERVER××'RSPRM'
      CALL WRITE_MESSAGE_SYSIN
      EXIT 0
   END
   IF BACKUP_STATUS = 'FAIL' THEN DO E = 1 TO 4
      POSTAT = SUBSTR(BUSTATUS,E,1)
      IF POSTAT = 'S' × POSTAT = 'W' THEN ITERATE
      LEAVE
   END
   CALL CHECK_BACKUP_MESSAGE_STATUS
   CALL QUEUE_MESSAGE_TEXT
   IF E < 9 THEN DO
      F = F + 1
      FMSG.F = SERVOL 'FAIL' BUTYPE
   END
END
IF T = 0 THEN DO
   TAPECNT = 1
   TLMSRCD.1 = 'UPV XXXXXX,SCRATCH=YES'
END
CALL WRITE_TLMS_SYSIN

/*     */
CHECK_RESTART_STATUS:
FAILCNT = F
IF FAILCNT = 0 THEN DO
   NWDEL = SYSDSN("'"NWLIB.4"("RSMEMB")'")
   IF NWDEL = 'OK' THEN DO
      "ALLOC DA('"NWLIB.4"("RSMEMB")') FILE(NWDD) SHR"
      "DELETE ('"NWLIB.4"("RSMEMB")') FILE(NWDD)"
      "FREE FILE(NWDD)"
   END
   DO E = 1 TO 8
      POSTAT = SUBSTR(GLOBAL_STATUS,E,1)
      IF POSTAT = 'S' × POSTAT = 'W' THEN ITERATE
      LEAVE
   END
   MCNT = 5
   MSG.1 = 'LAN BACKUP FOR 'SERVER' SERVER VOLUMES IS COMPLETE.'
   MSG.2 = 'THE BACKUP DOES NOT NEED TO BE RESTARTED.'
   MSG.3 = SMSG.E
   MSG.4 = 'BROWSE/CHECK DSN: 'NWLIB.2
   MSG.5 = SUSR.E
   OUTPDS = NWLIB.1
   OUTMEMB = SERVER
   CALL WRITE_MESSAGE_SYSIN
   EXIT 0
END
OUTPDS = NWLIB.4
OUTMEMB = SERVER××'RSPRM'
IF FAILCNT = VOLCNT THEN DO
   MCNT = 1
   MSG.1 = 'ALL FAIL' BUTYPE
END
IF FAILCNT ^= VOLCNT THEN DO
   MCNT = FAILCNT
   DO F = 1 TO FAILCNT
      MSG.F = FMSG.F
   END
END
CALL WRITE_MESSAGE_SYSIN
OUTPDS = NWLIB.1
OUTMEMB = SERVER
CALL WRITE_QUEUE_MESSAGE_SYSIN
EXIT 0

/*     S U B R O U T I N E S   S E C T I O N     */
/*     */
READ_SERVER_VOLUMES:
V = 0
IF RUNMODE = 'RESTART' THEN DO
   VOLMEMB = SERVER××'VOLS'
   NWLIB.3 = NWLIB.4
END
"ALLOC DA('"NWLIB.3"("VOLMEMB")') FILE(NWDD) SHR"
SRC = RC
IF SRC ^= 0 THEN DO
   SAY '*** DATASET ALLOCATE ERROR: ('NWLIB.3'('VOLMEMB'). ***'
   SAY '*** NWABEND EXEC SUBTASK CANCELLED - RETURN CODE: ('SRC'). ***'
   EXIT SRC
END
"EXECIO * DISKR NWDD (FINIS STEM VOLDATA."
SRC = RC
"FREE FILE(NWDD)"
IF SRC ^= 0 THEN DO
   SAY '*** EXECIO READ ERROR: ('NWLIB.3'('VOLMEMB'). ***'
   SAY '*** NWABEND EXEC SUBTASK CANCELLED - RETURN CODE: ('SRC'). ***'
   EXIT SRC
END
DO I = 1 TO VOLDATA.0
   UPPER VOLDATA.I
   SVOL = POS(VOLKEY,VOLDATA.I)
   IF SVOL = 0 THEN ITERATE
   V = V + 1
   VOL.V = WORD(VOLDATA.I,1)
END
VOLCNT = V
RETURN

/*     */
READ_SERVER_LISTING:
"ALLOC DA('"NWLIB.2"') FILE(NWDD) SHR"
SRC = RC
IF SRC ^= 0 THEN DO
   SAY '*** DATASET ALLOCATE ERROR: ('NWLIB.2'). ***'
   SAY '*** NWABEND EXEC SUBTASK CANCELLED - RETURN CODE: ('SRC'). ***'
   EXIT SRC
END
"EXECIO * DISKR NWDD (FINIS STEM LST."
SRC = RC
"FREE FILE(NWDD)"
IF SRC ^= 0 THEN DO
   SAY '*** EXECIO READ ERROR: ('NWLIB.2'). ***'
   SAY '*** NWABEND EXEC SUBTASK CANCELLED - RETURN CODE: ('SRC'). ***'
   EXIT SRC
END
RETURN

/*     */
FIND_DSNAME_IN_LISTING:
LSTSW = 'NO'
DO L = 1 TO LST.0
   KEY = POS(DSNTEXT,LST.L)
   IF KEY ^= 0 THEN DO
      LSTSW = 'YES'
      NUMWORDS = WORDS(LST.L)
      LISTDSN = WORD(LST.L,NUMWORDS)
      LISTDSN = STRIP(LISTDSN,"B","'")
      LEAVE
   END
END
RETURN

/*     */
CHECK_LISTING_FINAL_STATUS:
ENDSW = 'NO'
BACKUP_STATUS = 'FAIL'
END_TEXT = 'BACKUP OF VOLUME 'SERVOL' TERMINATING'
DO L = 1 TO LST.0
   UPPER LST.L
   ENDKEY = POS(END_TEXT,LST.L)
   IF ENDKEY ^= 0 THEN ENDSW = 'YES'
   IF ENDSW = 'YES' THEN DO
      STATKEY = POS(STATUS_TEXT,LST.L)
      IF STATKEY ^= 0 THEN DO
         NUMWORDS = WORDS(LST.L)
         GLOBAL_STATUS = WORD(LST.L,NUMWORDS)
         LEAVE
      END
   END
END
BUSTATUS = SUBSTR(GLOBAL_STATUS,1,4)
IF BUSTATUS = 'SSSS' THEN BACKUP_STATUS = 'OK'
DO E = 1 TO 8
   POSTAT = SUBSTR(GLOBAL_STATUS,E,1)
   IF POSTAT = 'S' × POSTAT = 'W' THEN ITERATE
   LEAVE
END
RETURN

/*     */
LISTCAT_CURRENT_GDG_CONTAINR:
TAPEVOL = 'XXXXXX'
X = OUTTRAP("LSTCAT.","*","CONCAT")
"LISTCAT ENT('"LISTDSN"') ALL"
SRC = RC
IF SRC = 0 THEN DO L = 1 TO LSTCAT.0
   DSNKEY = POS("NONVSAM ------- ",LSTCAT.L)
   IF DSNKEY ^= 0 THEN GDGDSN = WORD(LSTCAT.L,3)
   TAPEKEY = POS("VOLSER------------",LSTCAT.L)
   IF TAPEKEY ^= 0 THEN DO
      VOLDATA = WORD(LSTCAT.L,1)
      TAPEVOL = SUBSTR(VOLDATA,19,6)
      LEAVE
   END
END
RETURN

/*     */
LISTCAT_CURRENT_GDG_INDEX:
/* ***   N O O P   *** */
RETURN

/*     */
DELETE_CURRENT_GDG_CONTAINR:
IF TAPEVOL = 'XXXXXX' & T > 0 THEN RETURN
T = T + 1
TLMSRCD.T = 'UPV 'TAPEVOL',SCRATCH=YES'
TAPECNT = T
RETURN

/*     */
DELETE_CURRENT_GDG_INDEX:
"ALLOC DA('"LISTDSN"') FILE(NWDD) SHR"
"DELETE  ('"LISTDSN"')   NONVSAM SCRATCH PURGE FILE(NWDD)"
"FREE FILE(NWDD)"
RETURN

/*     */
WRITE_TLMS_SYSIN:
"ALLOC DA('"NWLIB.4"("TLMSMEMB")') FILE(NWDD) SHR"
"DELSTACK"
DO T = 1 TO TAPECNT
   QUEUE TLMSRCD.T
END
"EXECIO "TAPECNT" DISKW NWDD (FINIS"
SRC = RC
"FREE FILE(NWDD)"
IF SRC ^= 0 THEN DO
   SAY '*** WRITE ERROR: ('NWLIB.4'('TLMSMEMB'). ***'
   SAY '*** NWABEND EXEC TASK CANCELLED - RETURN CODE: ('SRC'). ***'
   EXIT SRC
END
RETURN

/*     */
QUEUE_MESSAGE_TEXT:
DO M = 1 TO MCNT
   Q = Q + 1
   QMSG.Q = MSG.M
END
QCNT =  Q
RETURN

/*     */
CHECK_SUBCHANNEL_ALLOCATION_FAILURE:
MSGSW = 'NO'
MSGTEXT = 'NETEX-955'
DO L = 1 TO LST.0
   UPPER LST.L
   MTEXT = POS(MSGTEXT,LST.L)
   IF MTEXT ^= 0 THEN DO
      MSGSW = 'YES'
      MCNT = 6
      MSG.1 = 'SUBCHANNEL ALLOCATION FAIURE - EP ADDRESS NOT AVAILABLE.'
      MSG.2 = 'TOO MANY LAN BACKUP JOBS ARE RUNNING CONCURRENTLY.'
      MSG.3 = 'TO DOCUMENT PROBLEM, PLEASE ISSUE COMMAND: D U,,ALLOC,400
      MSG.4 = 'WAIT UNTIL AT LEAST ONE LAN BACKUP JOB COMPLETES.'
      MSG.5 = 'RESTART BACKUP FOR ALL VOLUMES ON SERVER 'SERVER'.'
      MSG.6 = 'USE THE ( %NWBACKUP ) PANEL FACILITY FROM TSOE TO RESTART
      LEAVE
   END
END
RETURN

/*     */
CHECK_BACKUP_MESSAGE_STATUS:
IF BACKUP_STATUS = 'OK' THEN DO
   MCNT = 6
   MSG.1 = 'LAN BACKUP FOR 'SERVER' VOLUME: ('SERVOL') IS COMPLETE.'
   MSG.2 = 'THE BACKUP DOES NOT NEED TO BE RESTARTED.'
   MSG.3 = 'A PROBLEM OCCURRED ON THE REMOTE LAN SERVER.'
   MSG.4 = 'BROWSE/CHECK SYSPRINT DSN: ('NWLIB.2').'
   MSG.5 = 'ERROR TEXT IN SYSPRINT WILL PRECEDE (FINAL_STATUS) FLAG.'
   MSG.6 = 'NOTIFY THE ON-CALL LAN COMMUNICATIONS GROUP PERSON.'
   RETURN
END
IF BACKUP_STATUS = 'FAIL' THEN DO
   MCNT = 7
   MSG.1 = 'LAN BACKUP FOR 'SERVER' VOLUME: ('SERVOL') FAILED.'
   MSG.2 = 'RESTART BACKUP VIA TSOE ( %NWBACKUP ).'
   MSG.3 = SMSG.E
   MSG.4 = 'BROWSE/CHECK SYSPRINT DSN: ('NWLIB.2').'
   MSG.5 = 'ERROR TEXT IN SYSPRINT WILL PRECEDE (FINAL_STATUS) FLAG.'
   MSG.6 = 'CHECK RISC/6000 CONSOLE TO DETERMINE IF SERVICE OFFERED.'
   MSG.7 = SUSR.E
   RETURN
END
IF LSTSW = 'NO' THEN DO
MCNT = 5
MSG.1 = 'LAN BACKUP FAILED FOR SERVER 'SERVER' VOLUME: ('SERVOL').'
MSG.2 = 'RESTART BACKUP VIA TSOE ( %NWBACKUP ).'
MSG.3 = 'CHECK RISC/6000 CONSOLE TO DETERMINE IF SERVICE OFFERED.'
MSG.4 = 'BROWSE/CHECK SYSPRINT DSN: ('NWLIB.2').'
MSG.5 = 'ERROR TEXT IN SYSPRINT WILL PRECEDE (FINAL_STATUS) FLAG.'
RETURN

/*     */
ALLOCATE_MESSAGE_CNTLLIB:
"ATTRIB MSGLIB DSORG(PO) RECFM(F,B) LRECL(80) BLKSIZE(27920)"
"ALLOC DA('"NWLIB.1"') NEW SPACE(3,1) USING(MSGLIB) DIR(1) DATACLAS(CNTL
MGMTCLAS(NOMIG) STORCLAS(SYSSHARE) DSNTYP(LIBRARY)"
SRC = RC
"FREE DA('SYSS.NETCA.MESSAGE.CNTLLIB')"
IF SRC ^= 0 THEN DO
   SAY '*** DATASET ALLOCATE ERROR: ('NWLIB.1'). ***'
   SAY '*** NOTIFY THE TECHNICAL SUPPORT CRITICAL CALL LIST PERSON. ***'
   SAY '*** NWABEND EXEC SUBTASK CANCELLED - RETURN CODE: ('SRC'). ***'
   EXIT 100
END
RETURN

/*     */
WRITE_MESSAGE_SYSIN:
"DELSTACK"
"ALLOC DA('"OUTPDS"("OUTMEMB")') FILE(NWDD) SHR"
SRC = RC
IF SRC ^= 0 THEN DO
   SAY '*** DATASET ALLOCATE ERROR: ('OUTPDS'('OUTMEMB'). ***'
   SAY '*** NWABEND EXEC SUBTASK CANCELLED - RETURN CODE: ('SRC'). ***'
   EXIT SRC
END
DO M = 1 TO MCNT
   QUEUE MSG.M
END
NUMRCDS = QUEUED()
"EXECIO" NUMRCDS "DISKW NWDD (FINIS"
SRC = RC
"FREE FILE(NWDD)"
IF SRC ^= 0 THEN DO
   SAY '*** WRITE ERROR: ERROR WRITING 'OUTPDS'('OUTMEMB'). ***'
   SAY '*** NWABEND EXEC TASK CANCELLED - RETURN CODE: ('SRC'). ***'
   EXIT SRC
END
RETURN

/*     */
WRITE_QUEUE_MESSAGE_SYSIN:
"DELSTACK"
"ALLOC DA('"OUTPDS"("OUTMEMB")') FILE(NWDD) SHR"
SRC = RC
IF SRC ^= 0 THEN DO
   SAY '*** DATASET ALLOCATE ERROR: ('OUTPDS'('OUTMEMB'). ***'
   SAY '*** NWABEND EXEC SUBTASK CANCELLED - RETURN CODE: ('SRC'). ***'
   EXIT SRC
END
DO Q = 1 TO QCNT
   QUEUE QMSG.Q
END
NUMRCDS = QUEUED()
"EXECIO" NUMRCDS "DISKW NWDD (FINIS"
SRC = RC
"FREE FILE(NWDD)"
IF SRC ^= 0 THEN DO
   SAY '*** WRITE ERROR: ERROR WRITING 'OUTPDS'('OUTMEMB'). ***'
   SAY '*** NWABEND EXEC TASK CANCELLED - RETURN CODE: ('SRC'). ***'
   EXIT SRC
END
RETURN
