/* REXX EXEC to compare/match Load Module PDSes              */
parse upper arg dsname1 dsname2 . ;
"VMFCLEAR";
say "Processing...";
if dsname2 = "" then exit 16; /* Missing input */
if substr(dsname1,1,1)^="'" then ,
      dsname1 = "'"dsname1"'";
if substr(dsname2,1,1)^="'" then ,
      dsname2 = "'"dsname2"'";
dummy = listdsi(dsname1 "directory");
if sysreason=5 then do;say "Invalid dsname: "dsname1;exit 16;end;
mem1dir = sysmembers;
dummy = listdsi(dsname2 "directory");
if sysreason=5 then do;say "Invalid dsname: "dsname2;exit 16;end;
mem2dir = sysmembers;
dummy = outtrap("dsn1list.");
"LISTDS" dsname1 "MEMBERS";
dummy = outtrap("OFF");
dummy = outtrap("dsn2list.");
"LISTDS" dsname2 "MEMBERS";
dummy = outtrap("OFF");
in1not2 = "";
in2not1 = "";
inboth = "";
mem1 = 0;
mem2 = 0;
do i = 1 to dsn1list.0;
  if dsn1list.i="--MEMBERS--" then do;
       dsn1ptr = i+1; /* first member name */
       leave i;
       end;
end;
do i = 1 to dsn2list.0;
  if dsn2list.i="--MEMBERS--" then do;
       dsn2ptr = i+1; /* first member name */
       leave i;
       end;
end;
do loop=1 to 99999; /* forever loop */
    dsn1list.dsn1ptr = word(dsn1list.dsn1ptr,1);
    dsn2list.dsn2ptr = word(dsn2list.dsn2ptr,1);
    if dsn1list.dsn1ptr = dsn2list.dsn2ptr then do;
           if pos(",",dsn1list.dsn1ptr)=0 & ,
              pos(")",dsn1list.dsn1ptr)=0 then ,
              inboth = inboth dsn1list.dsn1ptr;
           mem1 = mem1+1; mem2 = mem2+1;
           dsn1ptr = dsn1ptr+1;
           dsn2ptr = dsn2ptr+1;
           end;
    else if dsn1list.dsn1ptr > dsn2list.dsn2ptr then do;
           mem2 = mem2+1;
           in2not1 = in2not1 dsn2list.dsn2ptr;
           dsn2ptr = dsn2ptr+1;
           end;
    else if dsn1list.dsn1ptr < dsn2list.dsn2ptr then do;
           mem1 = mem1+1;
           in1not2 = in1not2 dsn1list.dsn1ptr;
           dsn1ptr = dsn1ptr+1;
           end;
    if dsn1ptr>dsn1list.0 & dsn2ptr>dsn2list.0 then leave loop;
    if dsn1ptr>dsn1list.0 then do;
           do i = dsn2ptr to dsn2list.0;
           dsn2list.i = word(dsn2list.i,1);
           mem2 = mem2+1;
           in2not1 = in2not1 dsn2list.i;
           end;
           leave loop;
           end;
    if dsn2ptr>dsn2list.0 then do;
           do i = dsn1ptr to dsn1list.0;
           dsn1list.i = word(dsn1list.i,1);
           mem1 = mem1+1;
           in1not2 = in1not2 dsn1list.i;
           end;
           leave loop;
           end;
end;
x=msg("OFF");
"FREE ATTRLIST(DIR)";
"ATTR DIR BLKSIZE(256) LRECL(256) RECFM(F)";
"FREE F(SYSUT1 SYSUT2 SYSIN SYSPRINT)";
"ALLOC F(SYSUT1) DA("dsname1") SHR USING(DIR)";
"ALLOC F(SYSUT2) NEW DELETE SPACE(5 2) TRACKS";
"ALLOC F(SYSPRINT) DUMMY";
"ALLOC F(SYSIN) DUMMY";
"CALL 'SYS1.LINKLIB(IEBGENER)'";
"EXECIO * DISKR SYSUT2 (FINIS STEM IN1.";
"FREE F(SYSUT1 SYSUT2)";
"ALLOC F(SYSUT1) DA("dsname2") SHR USING(DIR)";
"ALLOC F(SYSUT2) NEW DELETE SPACE(5 2) TRACKS";
"CALL 'SYS1.LINKLIB(IEBGENER)'";
"EXECIO * DISKR SYSUT2 (FINIS STEM IN2.";
"FREE F(SYSUT1 SYSUT2)";
do i = 1 to in1.0;
blkbytes=c2d(substr(in1.i,1,2));
in1.i=substr(in1.i,3);
blkbytes=blkbytes-2; /* ignore ctr itself */
do j = 1 to 21; /* max entry per blk */
   notelen=0; /* assume no notes */
   name=strip(substr(in1.i,1,8));
   if c2x(name)="FFFFFFFFFFFFFFFF" then leave i;
   ttr =substr(in1.i,9,3);
   c   =substr(in1.i,12,1);
   plen=c2d(c); /* entry len - ignore notes */
   if plen>=128 then plen=plen-128; /* strip alias,ttrn count bits */
   if plen>=96  then do;
        plen=plen-96;
        notelen=12;
        end;
   if plen>=64  then do;
        plen=plen-64;
        notelen=8;
        end;
   if plen>=32  then do;
        plen=plen-32;
        notelen=4;
        end;
   plen=plen*2; /* halfword count */
   len =plen+12; /* entry len */
   blkbytes=blkbytes-len;
   attr=c2x(substr(in1.i,17+notelen,2));
   size=c2x(substr(in1.i,19+notelen,3));
   inl1.name = attr size;
   in1.i=substr(in1.i,len+1);
   if blkbytes=0 then leave j;
end;
end;
do i = 1 to in2.0;
blkbytes=c2d(substr(in2.i,1,2));
in2.i=substr(in2.i,3);
blkbytes=blkbytes-2; /* ignore ctr itself */
do j = 1 to 21; /* max entry per blk */
   notelen=0; /* assume no notes */
   name=strip(substr(in2.i,1,8));
   if c2x(name)="FFFFFFFFFFFFFFFF" then leave i;
   ttr =substr(in2.i,9,3);
   c   =substr(in2.i,12,1);
   plen=c2d(c); /* entry len - ignore notes */
   if plen>=128 then plen=plen-128; /* strip alias,ttrn count bits */
   if plen>=96  then do;
        plen=plen-96;
        notelen=12;
        end;
   if plen>=64  then do;
        plen=plen-64;
        notelen=8;
        end;
   if plen>=32  then do;
        plen=plen-32;
        notelen=4;
        end;
   plen=plen*2; /* halfword count */
   len =plen+12; /* entry len */
   blkbytes=blkbytes-len;
   attr=c2x(substr(in2.i,17+notelen,2));
   size=c2x(substr(in2.i,19+notelen,3));
   inl2.name = attr size;
   in2.i=substr(in2.i,len+1);
   if blkbytes=0 then leave j;
end;
end;
"VMFCLEAR";
alias1 = mem1dir-mem1;
alias2 = mem2dir-mem2;
say "DSNAME: "dsname1";   member count: "mem1;
say "DSNAME: "dsname2";   member count: "mem2;
if in1not2^="" then do;
      say "Members in "dsname1" and NOT in "dsname2;
      ctr = words(in1not2);
      do i = 1 to ctr;
         say "   "word(in1not2,i);
      end;
end;
if in2not1^="" then do;
      say "Members in "dsname2" and NOT in "dsname1;
      ctr = words(in2not1);
      do i = 1 to ctr;
         say "   "word(in2not1,i);
      end;
end;
bctr=words(inboth);
do i =1 to bctr;
   n=word(inboth,i);
   parse var inl1.n attr1 size1;
   parse var inl2.n attr2 size2;
   if attr1^=attr2 × size1^=size2 then ,
       say "Module mismatch (attributes×size):" n;
end;
exit 0;
