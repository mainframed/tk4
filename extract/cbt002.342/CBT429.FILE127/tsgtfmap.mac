TSGTFMAP TITLE 'TSGTFMAP-SHOW DISK USAGE FROM GTF DATA -V2M3- 20SEP84'
***********************************************************************
* DESC: READ GTF DATA AND SUMMARIZE DASD SIO/IO RECORDS.
*        BY DEVICE: CALCULATE NUMBER SIO CC = 0-3,
*              TOTAL CYLINDERS SEEKED,
*              AVERAGE CYLINDERS SEEKED,
*              AVERAGE IO TIME,
*              MAX. IO TIME OVER RUN,
*              BUILD TWO ARRAYS FOR DRIVE/JOB STATS.
*              OPTIONALLY PRODUCE A HISTOGRAM OF SEEKS
*--------------------------------------------------------------------*
*        DRIVE ARRAY:
*        SLOT SIZE(IN CYLINDERS) = ((LINESIZE-OFFSET)/
*              (#DIGITS DISPLAYED PER SLOT))
*        EXAMPLE: ((133-11)/3)=40 SETS OF NUMBERS CAN FIT
*              ON A LINE.
*        THIS ARRAY IS USED AS FOLLOWS:
*         DT(N,M)=DT(N,M)+1 WHERE:
*          N=FROM SLOT #,
*          M=TO   SLOT #.
*         IF HISTOGRAM OPTION IS USED, ARRAY IS NOW A VECTOR.
*          DT(N)=DT(N)+1 WHERE N IS CYL #.
*--------------------------------------------------------------------*
*        JOB ARRAY:
*        JOB TABLE IS AN N BY N MATRIX,
*           WHERE N IS NUMBER OF JOBS IN INCORE TABLE.
*        THIS ARRAY IS USED AS FOLLOWS:
*         JT(N,M)=JT(N,M)+1 WHERE:
*          N=JOB# THAT WAS HELD UP.
*          M=JOB# THAT HELD JOB N UP.
*         HELD UP MEANS JOB N HAD TO SEEK MORE THAN 'SEEKINTF' CYLS.
*--------------------------------------------------------------------*
*        JCL:  //MAP EXEC PGM=TSGTFMAP,REGION=(100K+6K*#DASD),
*              // PARM='XXXX,Y...Y'
*              //*      XXXX=HIST OR MATR, DEFAULT=HIST
*              //*      (MATR=MATRIX OPTION, HIST=HISTOGRAM OPTION.)
*              //* Y...Y=JOBNAME PREFIXES FOR CONTENTION MATRIX20SEP84
*              //*       WITH A SLASH BETWEEN THEM             20SEP84
*              //*EG PARM='HIST,PDB/P/TSO /IMS/JES2'           20SEP84
*              //*       NOTE: TABLE IS SCANNED LEFT TO RIGHT  20SEP84
*              //*              ... SO WATCH COMMON PREFIXES   20SEP84
*              //*             BLANKS ARE ALLOWED FOR EXACT HIT20SEP84
*              //SYSPRINT DD SYSOUT=C
*              //SYSUT1   DD DSN=GTFDATA,DISP=SHR
*--------------------------------------------------------------------*
*        ABEND SUMMARY
*             ABEND 1 - PROGRAM BUG - NO ROOM FOR A DASD IN TABLE
*                       TABLE SIZE CALCULATED FROM SYSTEM, MUST FIT.
*             ABEND 2 - GTF CONTROL RECORD DOESNT SPECIFY TIME=YES
*             ABEND 4 - PROGRAM BUG - CANT FIND STRING ENTRY FOR A
*                       DASD DEV. EVERY DASD BELONGS TO A STRING.
*             ABEND 5 - GTF RECORD FOR A DASD THAT IS NOT ONLINE.
*                       RUN JOB SOON AFTER GTF TRACE RUN.
*             ABEND 6 - BAD F3 DSCB READ
*             ABEND 7 - PROGRAM BUG - UNEXPECTED BLANK DSNAME
*             ABEND 8 - TOO MANY DATASETS ON VOLUME
*                       DSN TABLE OFFSET GREATER THAN 65K
*             ABEND 123-COULDNT LOCATE IOS SCAN ROUTINE        20SEP84
*--------------------------------------------------------------------*
****     SUMMARY OF CHANGES FOR  02MAR94 V2.2
*              FIX LOOP FOR NON DUAL DENSITY DRIVES
*              FIX BUG IN MATRIX OPTION
*              ALLOC CPUID=2 (3083)
*              ADD 3375, 3380 DISK ATTRIBUTES
*              DONT DISPLAY VOLUME IF I/O COUNT < TOTAL IO/256
*              UPDATE MY ADDRESS INFO
****     SUMMARY OF CHANGES FOR  06NOV84
*              CALCULATE IO RATES
*              ALLOW FOR CONCATENATED GTF IN PUTS FROM ANOTHER CPU
*               (NOTE I AM NOT TRYING TO SYNC TWO GTF INPUTS)
*              SUPPORT FOR CDC 33502 DOUBLE DENSITY DISK
****     SUMMARY OF CHANGES FOR  28OCT79
*              WORK WITH MOD TO CCWTRACE TO GET RESERVE/RELEASE TIMES
*              ADD DATA ON RESERVE TIMES ETC.
*              GIVE DEVICE STATUS ON REPORTS (PRIV,PUB,STORAGE)
*              SUPPORT DEFERED CONDITION CODES
****     SUMMARY OF CHANGES FOR  15OCT79
*              ADD EXTRA CHECKING FOR BAD SIO/IO RECORDS
*               CHECK FOR VALID JOBNAME IN RECORDS W/ BAD CTR
*               CHECK FOR SEEK WITHIN PHYSICAL LIMITS OF DEV TYPE
*                                              W/ BAD CTR
*              BYPASS CCWTRACE RECORDS
*               MAX CPUID IS 2
*              ADD DSN TO HISTOGRAM OPTION                     15OCT79
*              RE-ORG BASE REGS FOR EASY EXPANSION             15OCT79
*              ADD NUMBER OF RESERVES                          15OCT79
****     SUMMARY OF CHANGES FOR  20MAY84:
*              CYLINDER SEEK HISTOGRAM
*              CSW BREAKDOWN FOR SIO CC=1
*              DYNAMIC INITIALIZATION OF MAXIMUM # DASD SUPPORTED
*              SOME INITIAL CODE FOR AN I/O CONCURRENCE (NOT WORKING)
*--------------------------------------------------------------------*
****     SUMMARY OF CHANGES FOR 20SEP84 (V2.3)                 20SEP84
*              ADD XA SUPPORT TO UCB LOOKUP ROUTINES           20SEP84
*              ADD SSCH/RSCH RECORD SUPPORT(XA)                20SEP84
*              CHECK THAT TIME=YES SPECIFIED IN CTRL REC       20SEP84
*--------------------------------------------------------------------*
****           CUSTOMIZATION NOTES                             06NOV84
*              CHANGE "DDADRS" FOR LIST OF DUAL DENSITY DISKS  06NOV84
*              CHANGE "STCYLS" FOR MAX CYLS OF DUAL DENSITY    06NOV84
*              SPF/EDIT LOOK FOR ? FOR SPECIAL CODE            06NOV84
*              SET "SEEKINTF"-JOB INTERFERENCE SEEK THRESHOLD  20SEP84
*              COMMENT AREA "NONSEQ"-UNUSUAL CONTITIONS        20SEP84
*--------------------------------------------------------------------*
****           FUTURES                                         15OCT79
*              ADD IO CONCURRENCE TABLE                        15OCT79
*              COMPENSATE FOR FIXED HEAD                       15OCT79
*              SAVE TABLES FOR FUTURE RE-RUNS                  15OCT79
*--------------------------------------------------------------------*
*        QUESTIONS:
*              CLARK HUNTER  PHONE: 313-540-0900
*              COMPUWARE CORPORATION
*              32100 TELEGRAPH ROAD
*              BIRMINGHAM, MICHIGAN  48010
***********************************************************************
         TITLE 'DO SETUP, READ GTF RECORDS, GOTO DEPENDANT ROUTINE   '
TSGTFMAP @ENT  R12,(0,DSASIZE),DSA=YES    SAVE AREAS/CHAIN/BASING
         PRINT NOGEN                SAVE PAPER/TREES
         USING DSA,R13              SAVE AREA / WORKING STORE
         USING DVTAB,R11            DEVICE TABLE POINTER
         USING GTFREC,R10           GTF RECORD POINTER
         ST    R1,PARMSAVE         SAVE PARM LIST PTR
         L     R9,=A(UTSUBS)       SET STATIC AREA/UTILITY SUBS15OCT79
         USING UTSUBS,R9           TELL ASM                    15OCT79
         L     R12,@SETUP          GET SETUP RTN               15OCT79
         BR    R12                 DO SETUP                    15OCT79
         LTORG ,                   LITERAL NEEDED TO SET UP    15OCT79
GETREC   DS    0H                   GET NEXT GTF RECORD
         BAL   R14,GET             GET GTF RECORD
         LR    R10,R1              COPY ADDR PTR
*                                                              20SEP84
         CLI   GTID,0              CONTROL RECORD ID
         BE    CTLREC                  YES
*                                                              20SEP84
         CLC   GTLEN,=H'55'        MIN LENGTH HANDLED
         BL    BYPASS              TOO SHORT
*                                                              20SEP84
**       VALIDATE GTF RECORD ID                                20SEP84
*                                                              20SEP84
         CLI   GTID,X'FF'          TRACE RECORD ID
         BE    GETTRACE            NO-SKIP
         B     BYPASS                  NO-INVALID
GETTRACE DS    0H                      TRACE RECORD            20SEP84
*                                                              15OCT79
**       CHECK  FOR INVALID RECS                               15OCT79
*                                                              15OCT79
         CLI   GTFMT,0             FORMAT IDENTIFIER
         BNE   BYPASS              NO-BYPASS
         CLC   =AL2(2),GTCPUID     MAX CPUID                   15OCT79
         BL    BYPASS                                          15OCT79
         MVC   WD,GTJOB            COPY JOBNAME                15OCT79
         OC    WD,=CL8' '          UPPER CASE IT               15OCT79
         CLC   WD,GTJOB            SAME                        15OCT79
         BNE   BYPASS2             JOBNAME INVALID             15OCT79
         CLC   GTEVNT,=X'5100'     SIO REC
         BE    SIOREC              YES
         CLC   GTEVNT,=X'5105'     SSCH REC                    20SEP84
         BE    SSCHREC             YES                         20SEP84
         CLC   GTEVNT,=X'5106'     RSCH REC                    20SEP84
         BE    RSCHREC             YES                         20SEP84
         CLC   GTEVNT,=X'5200'     I/O W/ VALID UCB
         BE    IOREC               YES
         CLC   GTEVNT,=X'5101'     I/O W/EOS INTERRUPTION
         BE    IOREC               YES
         CLC   GTEVNT,=X'2100'     PCI I/O
         BE    IORECPCI            YES
         CLC   GTEVNT,=X'5201'     I/O W/O VALID UCB
         BE    IORECBAD            YES-BAD
         B     BYPASS              ALL ELSE FAILS TOO
IORECPCI DS    0H                  PCI
         AP    TOTPCI,=P'1'        BUMP
         B     GETREC              LOOP
IORECBAD DS    0H                  I/O W/O VALID UCB
         AP    TOTBAD,=P'1'        BUMP
         B     GETREC              LOOP
SIORECBD DS    0H                  SIO SEEK ADDR BAD           15OCT79
         AP    TOTSIOBD,=P'1'      BUMP                        15OCT79
         B     GETREC              LOOP                        15OCT79
BYPASS   DS    0H                  BYPASSED RECORD(MANY REASONS)
         AP    TOTBYPAS,=P'1'      BUMP CTR
         B     GETREC              LOOP
BYPASS2  DS    0H                  BYPASSED JOBNAME INVALID    15OCT79
         AP    TOTBYP2,=P'1'       BUMP CTR                    15OCT79
         B     GETREC              LOOP                        15OCT79
GETEOD2  DS    0H                  END-OF-FILE                 15OCT79
*                                                              28OCT79
**             SEE IF ANY UNPROCESSED SIO RECORDS              28OCT79
*                                                              28OCT79
         L     R1,DVVROOT          GET DEVICE VECTOR TABLE     28OCT79
         ST    R1,EODCURDV         SET 1ST DEVICE              28OCT79
         LA    R0,GETHSIO1         SET SIO RTN RETURN          28OCT79
         ST    R0,DSSIORET         SET RETURN                  28OCT79
GETHSIO1 DS    0H                  NEXT DEVICE                 28OCT79
         L     R1,EODCURDV         GET DEVICE VECT ENTRY       28OCT79
         L     R11,DVVPTR-DVVTAB(R1) GET DEVICE TABLE ENTRY    28OCT79
         OC    DVVPTR-DVVTAB+1(3,R1),DVVPTR-DVVTAB+1(R1) END   28OCT79
         BZ    GETHSIO2            GO TO END OF DATA RTNS      28OCT79
         LA    R1,DVVSIZ(R1)       BUMP TO NEXT VECTOR         28OCT79
         ST    R1,EODCURDV         SAVE FOR NEXT TIME          28OCT79
         OC    DVLSIO0(2),DVLSIO0  "GTLEN" ^=0 IF REC HELD     28OCT79
         BZ    GETHSIO1            NO-NEXT DEVICE ENTRY        28OCT79
         LA    R10,DVLSIO0         YES-GET HELD RECORD         28OCT79
         B     SIOENT3             PROCESS RECORD              28OCT79
GETHSIO2 DS    0H                  RESET BASE REG, GO TO TOTS  28OCT79
         L     R12,@EODRTN         GET END OF DATA RTN         15OCT79
         BR    R12                 GO TO IT                    15OCT79
         TITLE 'GTF CONTROL RECORD - START OF A TRACE                '
*                                                              20SEP84
**       SAVE START TIME OF GTF RUN
*                                                              20SEP84
CTLREC   DS    0H                  GET ITEM
         CLI   GTFMT,X'01'         FORMAT ID=CONTROL RECORD
         BNE   BYPASS              NO-MAYBE LOST EVENTS, ETC
         TM    GTCROP4,GTC4TIME        IS TIME=YES SPEC'D
         BO    CTLRECTM                Y/CONTINUE
         WTO   'TSGTFMAP-TIME=YES NOT SPECIFIED IN TRACE',             X
               ROUTCDE=(11)
         ABEND 2,DUMP
CTLRECTM DS    0H
         CLI   STRTTM,0                ANY YET                 DDMMM84
         BE    CTLSETTM                NO-SET IT               DDMMM84
         CLC   STRTTM,GTCRTOD      SAVE OLDEST TIME            06NOV84
         BL    CTLSETND                                        06NOV84
CTLSETTM DS    0H                                              DDMMM84
         MVC   STRTTM,GTCRTOD      SAVE TIME
CTLSETND DS    0H                                              DDMMM84
         B     GETREC              GO TO NEXT PHASE
         TITLE '              I / O  R E C O R D '
IOREC    DS    0H
         CLC   =X'5105',DSASIORC+(GTEVNT-GTFREC) SSCH REC      20SEP84
         BE    IORECXA                 XA DATA                 20SEP84
         CLC   =X'5106',DSASIORC+(GTEVNT-GTFREC) RSCH REC      20SEP84
         BE    IORECXA                 XA DATA                 20SEP84
         B     IORECCTN                NOT XA DATA             20SEP84
IORECXA  DS    0H
*        XC    DSAIOREC,DSAIOREC       CLEAR FAKE IO REC AREA  20SEP84
         MVC   DSAIOREC(GTYDEV-GTFREC),GTFREC MOVE COMMON PART 20SEP84
         MVC   DSAIOREC+(GTIDEV-GTFREC)(L'GTIDEV),GTYDEV DEV # 20SEP84
         MVC   DSAIOREC+(GTICSW-GTFREC)(L'GTICSW),GTYCSW CSW # 20SEP84
         MVC   DSAIOREC+(GTISENSE-GTFREC)(L'GTISENSE),GTYSENSE 20SEP84
         LA    R10,DSAIOREC            POINT TO FAKE SIO REC.  20SEP84
IORECCTN DS    0H
         AP    TOTIO,=P'1'          BUMP TOT
         LH    R11,GTIDEV           GET DEV ADDR
         BAL   R14,UTDDTST          SEE IF DOUBLE DENSITY      06NOV84
         B     *+8                  NO                         06NOV84
         N     R11,=X'FFFFFFDF'     TURN OFF X'20' BIT         06NOV84
         BAL   R14,UTGET            LOCATE DEVICE TABLE PTR
         B     GETREC               +0 RETURN = NOT FOUND
*                                                              28OCT79
**       SEE IF UNPROCESSED SIO RECORD PRESENT                 28OCT79
*                                                              28OCT79
         OC    DVLSIO0(2),DVLSIO0   IS GTLEN NOT ZERO IN SAVE  28OCT79
         BZ    IORECE3              YES-NO PENDING SIO REC     28OCT79
         ST    R10,DSSAVR10        SAVE CURR. GTF REC PTR      28OCT79
         LA    R0,IORECE2          SET SIO RTN RETURN POINT    28OCT79
         ST    R0,DSSIORET                                     28OCT79
*                                                              28OCT79
**             COPY SIOCC, STAT    FROM IO REC TO SAVED SIO    28OCT79
*                                                              28OCT79
         IC    R0,GTICSW           GET CC                      28OCT79
         SLL   R0,4                POSITION LIKE SIO CC        28OCT79
         STC   R0,DVLSIO0+GTSIOCC-GTFREC SET SIOF CC           28OCT79
         MVC   DVLSIO0+GTSSTAT-GTFREC(2),GTICSW+4 SET STAT     28OCT79
         LA    R10,DVLSIO0         POINT TO UNPROCESSED REC    28OCT79
         B     SIOENT3             PROCESS SIO REC             28OCT79
IORECE2  DS    0H                  RETURN FROM SIO RTN         28OCT79
         XC    DVLSIO0(2),DVLSIO0  SHOW NO REC THERE           28OCT79
         L     R10,DSSAVR10        RESTORE IO REC PTR          28OCT79
         TM    GTICSW,X'03'        ANY CSW CC                  28OCT79
         BZ    IORECE3             NO-PROCESS AS IO REC        28OCT79
         LH    R15,DVSIOFCC        YES-BUMP SIOF CC NOT ZERO   28OCT79
         AH    R15,=H'1'                                       28OCT79
         ST    R15,DVSIOFCC                                    28OCT79
         B     GETREC              DONT PROCESS IO REC FURTHR  28OCT79
IORECE3  DS    0H                  CONTINUE                    28OCT79
         OC    DVLTIME,DVLTIME      IS THERE A PREV SIO REC.
         BZ    IODEFR               NO - SEE IF ANY IO WAS DEFERED
         ICM   R0,15,GTTIME         GET IO TIME
         ICM   R1,15,GTTIME+4       GET IO TIME
         LM    R2,R3,DVLTIME       GET SIO TIME
         XC    DVLTIME,DVLTIME      SHOW NO SIO TIME
         XC    DVL0TIME,DVL0TIME    SHOW NO SIO TIME
         BAL   R14,UTTIMDIF        CALC TIME DIF IN MILLISEC*10
         C     R1,DVMAXIO           CHECK AGAINST MAX SO FAR
         BL    *+8                  NO - SKIP
         ST    R1,DVMAXIO           YES-SAVE NEW MAX
         LR    R0,R1               SAVE VALUE
         AL    R1,DVAVGIO           ADD IO TIME TO TOTAL
         ST    R1,DVAVGIO           STORE
         LH    R15,DVLJOBI         GET LAST JOB INDEX
         AL    R0,DVJTIOTM(R15)    ADD TO LAST JOBS TIME
         ST    R0,DVJTIOTM(R15)    UPDATE
*        CALC DEFERED I/O TIMES
IODEFR   DS    0H                  CALC HOW LONG LAST SIO.NE.ZERO
         BAL   R14,UTDEFR          CALC DEFER TIME
         B     GETREC              NEXT RECORD
         TITLE '               S I O  R E C O R D'
SSCHREC  DS    0H                  PROCESS SSCH RECORD
         XC    DSASIORC,DSASIORC       CLEAR FAKE SIO REC AREA 20SEP84
         MVC   DSASIORC(GTXDEV-GTFREC),GTFREC MOVE COMMON PART 20SEP84
         MVC   DSASIORC+(GTSDEV-GTFREC)(L'GTSDEV),GTXDEV DEV # 20SEP84
         MVC   DSASIORC+(GTSIOCC-GTFREC)(L'GTSIOCC),GTXIOCC SIO CC
         MVC   DSASIORC+(GTSSEEK-GTFREC)(L'GTSSEEK),GTXSEEK SEEK ADR
         LA    R10,DSASIORC            POINT TO FAKE SIO REC.  20SEP84
         B     SIOREC
RSCHREC  DS    0H                  PROCESS RSCH RECORD
         XC    DSASIORC,DSASIORC       CLEAR FAKE SIO REC AREA 20SEP84
         MVC   DSASIORC(GTRDEV-GTFREC),GTFREC MOVE COMMON PART 20SEP84
         MVC   DSASIORC+(GTSDEV-GTFREC)(L'GTSDEV),GTRDEV DEV # 20SEP84
         MVC   DSASIORC+(GTSIOCC-GTFREC)(L'GTSIOCC),GTRIOCC SIO CC
         MVC   DSASIORC+(GTSSEEK-GTFREC)(L'GTSSEEK),GTRSEEK SEEK ADR
         LA    R10,DSASIORC            POINT TO FAKE SIO REC.  20SEP84
SIOREC   DS    0H                  PROCESS SIO RECORD
         CLC   STOPTM,GTTIME       SAVE OLDEST TIME            06NOV84
         BH    *+10                                            06NOV84
         MVC   STOPTM,GTTIME       SAVE TIME(LAST GTF RECORD@EOD)
         AP    TOTSIO,=P'1'        BUMP TOT
         XR    R11,R11
         ICM   R11,3,GTSDEV        GET ADDR
         BAL   R14,UTDDTST         SEE IF DOUBLE DENSITY       06NOV84
         B     *+8                 NO                          06NOV84
         N     R11,=X'FFFFFFDF'    TURN OFF X'20' BIT          06NOV84
         BAL   R14,UTGET           GET DEVICE TABLE PTR
         B     GETREC              +0=NOT FOUND
         TM    DVFLAG1,DVF1DD      SEE IF DOUBLE DENSITY
         BZ    SIODDEND            NO-NORMAL PROCESS           06NOV84
         LH    R0,DVCYL            GET MAX CYL (CDC33502=1110  06NOV84
         SRL   R0,1                1/2 (CDC33502=555CYL)       06NOV84
         XR    R1,R1               CLEAR                       06NOV84
         ICM   R1,3,GTSSEEK+3      GET CYL#                    06NOV84
         TM    GTSDEV+1,X'20'      UPPER HALF                  06NOV84
         BO    SIODDUP             YES                         06NOV84
         AR    R1,R0                REMAP SEEK TO MIDDLE OF    06NOV84
*                                   PACK (E.G.                 06NOV84
*                                   FOR CDC PACKS:             06NOV84
*              INSIDE         OUTSIDE                          06NOV84
*              CYL------> <-------CYL                          06NOV84
*              554------0 0-------554                          06NOV84
*               ADR=2B0     ADR=290   (X'020' TELLS WHICH ONE  06NOV84
*              MY REMAP:                                       06NOV84
*              0------554 555----1109                          06NOV84
*                                                              28OCT79
         STCM  R1,3,GTSSEEK+3       SAVE (3350:555-1109)       06NOV84
         B     SIODDEND             FINI                       06NOV84
SIODDUP  DS    0H                                              06NOV84
         LCR   R1,R1                GET NEG. (-554 /  -0)      06NOV84
         AR    R1,R0                ADD MAX  (   1 / 555)      06NOV84
         BCTR  R1,0                 ADJUST FOR ZERO 0-554      06NOV84
         STCM  R1,3,GTSSEEK+3       ADJUSTED SEEK ADDR         06NOV84
SIODDEND DS    0H                                              06NOV84
**             SEE IF UNPROCESSED  SIO RECORD                  28OCT79
*                                                              28OCT79
         OC    DVLSIO0(2),DVLSIO0  IF GTLEN NOT = ZERO         28OCT79
         BZ    SIOENT2             NO-NO RECORD PRESENT        28OCT79
         ST    R10,DSSAVR10        YES-SAVE CURRENT REC PTR    28OCT79
         LA    R0,SIOENT1          MAKE SIO RTN RETURN HERE    28OCT79
         ST    R0,DSSIORET                                     28OCT79
         LA    R10,DVLSIO0         PROCESS RECORD NOW          28OCT79
* IDEAL IS TO SAVE SIO CC=0 RECORDS IN HOLD AREA BY DEVICE     28OCT79
* SO IF A IO RECORD WITH DEFERED STATUS COMES IN, IT CAN BE    28OCT79
* MOVE INTO THE HELDSIO RECORD AND PROCESSED WITH VALID STATUS 28OCT79
*IF ANOTHER SIO TO SAVE DEVICE COMES IN, ASSUME SIOF           28OCT79
* WAS NOT ISSUED, AND PROCESS THE HELD RECORD, THEN PROCESS    28OCT79
* THE CURRENT SIO RECORD (SAVE IT IF CC=0, PROCESS IF CC^=0)   28OCT79
         B     SIOENT3             CONTINUE WITH HELD RECORD   28OCT79
SIOENT1  DS    0H                  RETURN FROM HELD REC        28OCT79
         XC    DVLSIO0(2),DVLSIO0  CLEAR "GTLEN" TO SHOW AVAL  28OCT79
         L     R10,DSSAVR10        RESTORE R10 TO CURR REC     28OCT79
         B     SIOENT2             CONTINUE WITH CURR REC      28OCT79
*                                                              28OCT79
**             SAVE RECORD IF CC=0 (MAY GET CC IN IO REC)      28OCT79
*                                                              28OCT79
SIOENT2  DS    0H                                              28OCT79
         LA    R0,GETREC           SET RETURN TO GET NEXT REC  28OCT79
         ST    R0,DSSIORET                                     28OCT79
         TM    GTSIOCC,X'30'       IS SIO CC=0                 28OCT79
         BNZ   SIOENT3             NO-CANT BE SIOF, PROCESS    28OCT79
         LA    R14,DVLSIO0         MAY BE SIOF, SAVE REC       28OCT79
         LA    R15,L'DVLSIO0        WAITING FOR IO REC FOR     28OCT79
         LH    R1,GTLEN              DEVICE                    28OCT79
         LA    R0,GTFREC            IF IOCC=^0 MOVE IOREC      28OCT79
         MVCL  R14,R0                STATUS TO SIO REC         28OCT79
         B     GETREC              GET NEXT                    28OCT79
SIOENT3  DS    0H                  PROCESS A RECORD            28OCT79
         TM    GTSIOCC,X'30'        ANY COND CODES             06NOV84
         BNZ   SIONDEFR             NO                         06NOV84
         BAL   R14,UTDEFR          CALC DEFER TIME IF ANY
SIONDEFR DS    0H                                              06NOV84
         BAL   R14,UTFNDJOB        LOCATE INDEX IN JOB TABLE
         IC    R1,GTSIOCC           GET SIO CC
         N     R1,=X'00000030'      MASK
         SRL   R1,2                 SHIFT R 2 TO GET SIOCC*4
         LA    R15,TOTSIO0(R1)     GET PACKED CTR
         AP    0(L'TOTSIO0,R15),=P'1' BUMP
         L     R15,DVSIO0(R1)       BUMP SIO CTR
         AH    R15,=H'1'            "
         ST    R15,DVSIO0(R1)       "
         CH    R1,=AL2(1*4)        SIO CC=1
         BNE   SIO1END             NO
         LA    R0,(DVSIO1XE-DVSIO1XS)/(DVSIO1XL) # ENTRIES
         LA    R14,DVSIO1XS        START OF STATUS CODES
SIO1LOC  DS    0H                  FIND MATCH OR ADD NEW CODE
         CLC   GTSSTAT,DVSIO1XS-DVSIO1XS(R14)
         BE    SIO1UPD             YES-BUMP COUNTERS
         CLC   DVSIO1XS-DVSIO1XS(L'DVSIO1XS,R14),=H'0' ZERO
         BZ    SIO1UPD             END-OF-TABLE - ADD NEW ENTRY
         LA    R14,DVSIO1XL(R14)   TRY NEXT
         BCT   R0,SIO1LOC          LOOP
         B     SIO1END             NOMATCH AND TABLE FULL - * SKIP *
SIO1UPD  DS    0H                  ADD OR BUMP ENTRY
         MVC   DVSIO1XS-DVSIO1XS(L'DVSIO1XS,R14),GTSSTAT ADD/OVLY DATA
         ICM   R15,15,DVSIO1XC-DVSIO1XS(R14) BUMP COUNTER
         AH    R15,=H'1'
         STCM  R15,15,DVSIO1XC-DVSIO1XS(R14) BUMP COUNTER
SIO1END  DS    0H
         LR    R14,R1              GET SIO CC
         MH    R14,=AL2(JT#)       * ROW SIZE = SIO ROW XX (INDEX)
         AH    R14,DVCJOBI         ADD CURRENT JOB INDEX 0,4,8...
*                                   =SIO(SIOCC,JOB)
         L     R15,DVJTSIO0(R14)   BUMP SIO CC BY 1
         AH    R15,=H'1'           "
         ST    R15,DVJTSIO0(R14)
         LTR   R1,R1                SIO CC = 0
         BNZ   SIO1REC              NO - NEXT PHASE
         MVC   DVL0TIME,GTTIME     REMEMBER LAST SIO0 FOR CONCURRENCE
*                                                              15OCT79
**             PROCESS RESERVE/RLS (REQUIRES CCWTRACE MOD)     15OCT79
*                                                              15OCT79
         OC    GTSSEEK,GTSSEEK     NULL SEEK ADDR              15OCT79
         BNZ   SIONSEK0            NO-REAL SEEK                15OCT79
         MVC   GTSSEEK,DVLSEEK     MAKE SEEK ADDR = LAST SEEK  15OCT79
SIONSEK0 DS    0H                                              15OCT79
         TM    GTSFLB,GTSRESV      CCW MOD COPIES IOQFLB       28OCT79
         BZ    SIONRESV             TO GTSSEEK+1 (UNUSED       28OCT79
*                                    NO DATA CELL ANYMORE)     28OCT79
         L     R15,DVRESV          CURRENT # RESERVES          15OCT79
         AH    R15,=H'1'           BUMP                        15OCT79
         ST    R15,DVRESV                                      15OCT79
         MVC   DVLRESTM,GTTIME     REMEMBER TIME OF RESERVE    28OCT79
SIONRESV DS    0H                  TRY RELEASE                 28OCT79
         TM    GTSFLB,GTSRLSE      RELEASE                     28OCT79
         BZ    SIONRLS             NO                          28OCT79
         L     R15,DVRLS           CURRENT # RESERVES          15OCT79
         AH    R15,=H'1'           BUMP                        15OCT79
         ST    R15,DVRLS                                       15OCT79
         BAL   R14,UTRESV          UPDATE RESERVE TIME         28OCT79
SIONRLS  DS    0H                                              28OCT79
*                                                              28OCT79
**             PROCESS SEEK INFO                               28OCT79
*                                                              28OCT79
         ICM   R1,3,GTSSEEK+3       GET SEEK CYL
**       VALID SEEK ADDR               NONSEQ.                 15OCT79
         CH    R1,DVCYL            CHECK AGAINST DEV LIMITS    15OCT79
         BH    SIORETBD            SKIP RECORD                 02MAR94
         CLI   PRTOPT,C'H'         HISTOGRAM OPTION
         BNE   SIOMATRX            NO-CALC ADDR IN SEEK MATRIX
**       HISTOGRAM - JUST GO DOWN TO CYL ENTRY IN VECTOR
         SLL   R1,2                CYL# * 4 = OFFSET IN VECTOR
         L     R0,DVXREF(R1)       GET CURRENT SEEK COUNT
         AH    R0,=H'1'            BUMP
         ST    R0,DVXREF(R1)       UPDATE
         B     SIOSKPX             GO AROUND MATRIX CODE
SIOMATRX DS    0H
         LH    R15,DVDELTA          GET SLOT SIZE IN CYL
         BAL   R14,DIVIDE           CALC SLOT #
         SLL   R1,2                SLOT# * 4
         L     R15,DVLROW          LAST ROW ADDR IN SEEK ARRAY
         AR    R15,R1              + OFFSET = ENTRY
         L     R0,0(R15)           DT(FROM,TO)=DT(FROM,TO)+1
         AH    R0,=H'1'            "
         ST    R0,0(R15)           "
         MH    R1,DVSLOTS          CALC NEW FROM ROW ADDR
         LA    R1,DVXREF(R1)       "
         ST    R1,DVLROW           SAVE FOR NEXT SIO
SIOSKPX  DS    0H
         XR    R0,R0
         ICM   R0,3,DVLSEEK+3      LAST SEEK CYL
         SH    R0,GTSSEEK+3        CALC DIFFERENCE
         LPR   R0,R0               POSITIVE
         LR    R3,R0               SAVE FOR JOB ARRAY
         A     R0,DVTOTCYL         BUMP TOT CYL SEEKED
         ST    R0,DVTOTCYL         "
         LR    R0,R3               REFRESH
         LH    R1,DVCJOBI          GET CURR INDEX
         A     R0,DVJTSEEK(R1)     BUMP JOB'S CYL SEEKED
         ST    R0,DVJTSEEK(R1)     "
*        UPDATE JT TABLE
         CH    R3,SEEKINTF         CYL SEEKED ENOUGH
         BL    SIONOINT            NO - JOB NOT HELD UP
         LH    R1,DVLJOBI          GET LAST JOB #(CAUSED PROB)
         LH    R14,DVCJOBI         GET CURRENT JOB INDEX
         MH    R14,=AL2(JT#)       *L'=OFFSET TO ARRAY ROW
         LA    R14,DVJTXREF(R14)    + BASE ADDR = ROW ADDR
         L     R2,0(R14,R1)        JT(N,M)=JT(N,M)+1
         AH    R2,=H'1'            "
         ST    R2,0(R14,R1)        "
SIONOINT DS    0H                  UPDATE FILEDS
*        UPDATE HOLD INFO
         MVC   DVLJOBI,DVCJOBI     LAST JOB INDEX
         MVC   DVLSEEK,GTSSEEK     LAST SEEK
         MVC   DVLJOB,GTJOB        LAST JOB
         MVC   DVLTIME,GTTIME      LAST TIME
         B     SIORET              LOOP
*        SIO 1 AND 2 RECORDS
SIO1REC  DS    0H                  SEE IF IO HAD TO BE DEFERED
         MVC   DVLJOBI,DVCJOBI     UPDATE LAST JOB INDEX
         CH    R1,=H'3'            SIO=3 NOT OPERATIONAL
         BE    SIORET              YES-RETURN
         OC    DVDEFRTM,DVDEFRTM    UNHANDLED DEFER            06NOV84
         BNZ   SIORET               YES-USE EARLIEST TIME      06NOV84
         MVC   DVDEFRTM,GTTIME     SAVE TIME
*        I/O INTERRUPT WILL BE STOP OF DEFERED TIME
*        - OR SIO CC=0 WILL BE STOP OF DEFERED TIME
SIORET   DS    0H                  END OF SIO PROCESSING
         L     R14,DSSIORET                                    28OCT79
         BR    R14                                             28OCT79
SIORETBD DS    0H                  END OF SIO PROCESSING       02MAR94
         AP    TOTSIOBD,=P'1'                                  02MAR94
         B     SIORET                                          02MAR94
         TITLE '             S E T U P'
SETUP    DS    0H
         PUSH  USING                                           15OCT79
         USING SETUP,R12           NEW BASE REG                15OCT79
*                                                              15OCT79
**             SEE IF MVS/XA                                   15OCT79
*                                                              15OCT79
         L     R1,CVTPTR               CVT                     20SEP84
         TM    CVTDCB-CVT(R1),CVTMVSE  EXECUTING ON MVS/XA     20SEP84
         BZ    SETNOTXA                NO-SKIP                 20SEP84
         MVI   DSAXA,DSAXAYES          YES-SHOW IT             20SEP84
SETNOTXA DS    0H                                              20SEP84
*                                                              15OCT79
**             SETUP TO GET VTOC INFO                          15OCT79
*                                                              15OCT79
         LOAD  EP=VTOCEXCP,ERRET=SETNVTOC VTOC READER EP       20SEP84
         B     SETVTOCE                SET ENTRY               20SEP84
SETNVTOC DS    0H                      S806                    20SEP84
         WTO   'TSGTFMAP-DATASET NAMES UNAVAILABLE',ROUTCDE=(11)
         LA    R0,0                    ZERO=SKIP               20SEP84
SETVTOCE DS    0H                      S806                    20SEP84
         ST    R0,VADEXCP          SAVE ENTRY POINT            15OCT79
         L     R1,=A(WORKEXCP-DSA) GET OFFSET TO EXCP WORK     15OCT79
         LA    R1,DSA(R1)          GET WORKEXCP ADDR           15OCT79
         ST    R1,VTCWEXCP         SAVE FOR VTOCEXCP           15OCT79
*                                                              15OCT79
**             SCAN DEVICE TABLES LOOKING FOR GREATEST # CYL   15OCT79
*                                                              15OCT79
         LA    R14,STCYLS          GET DEVICE TABLE            15OCT79
         XR    R0,R0               CLEAR                       15OCT79
SETMAXCY DS    0H                                              15OCT79
         CLI   0(R14),X'FF'        END OF TABLE                15OCT79
         BE    SETMAXCX            DONE                        15OCT79
         CH    R0,(STCYLMAX-STCYLS)(R14)  CHECK AGAINST MAX    15OCT79
         BH    *+8                 SMALLER THAN CURRENT        15OCT79
         LH    R0,(STCYLMAX-STCYLS)(R14)  CHECK AGAINST MAX    15OCT79
         LA    R14,(STCYLS1-STCYLS)(R14) NEXT DEV TYPE         15OCT79
         B     SETMAXCY            LOOP                        15OCT79
SETMAXCX DS    0H                  END                         15OCT79
         STH   R0,MAXCYL           SET HIGHEST # CYLS          15OCT79
**       CALC NUMB OF ONLINE DASDS IN SYSTEM
         LA    R4,X'0FF'               START AT CHANNEL 1 (-1) 20SEP84
         MVC   DSADVMAX,=H'1'      ONE SPOT FOR DUMMY ENTRY
SETMXDA  DS    0H
         AH    R4,=H'1'                NET DEVICE ADDR         20SEP84
         CH    R4,=H'4095'         END OF TABLE-SET MAX DASD   20SEP84
         BH    SETMXEND
         LR    R11,R4                  COPY DEV ADR            20SEP84
         BAL   R14,UTGETUCB            GET UCB ADDR            20SEP84
         B     SETMXDA                 +0=NOT FOUND            20SEP84
         LR    R6,R11                  COPY ANSWER             20SEP84
         CLI   UCBDVCLS(R6),X'20'  DASD
         BNE   SETMXDA             NO-SKIP
         TM    UCBSTAT(R6),X'80'   ONLINE
         BNO   SETMXDA             NO-SKIP
         CLI   UCBVOLI(R6),0       VALID VOLSER                06NOV84
         BE    SETMXDA             NO-SKIP                     06NOV84
*              SEE IF DOUBLE DENS                              06NOV84
         ICM   R11,3,UCBCHAN(R6)   PICK UP CUA                 06NOV84
         BAL   R14,UTDDTST         DUAL DENSITY TEST           06NOV84
         B     SETMXDDN            NO-CONTINUE                 06NOV84
         TM    UCBCHAN+1(R6),X'20' PRIMARY VOLUME              06NOV84
         BO    SETMXDA             NO-SKIP IT                  06NOV84
SETMXDDN DS    0H                                              06NOV84
*        NOW SEE IF THIS IS PRIMARY PATH
*        RE-SCAN UCBS, SEE IF UCB FOUND VIA A LOWER ADDR
         CLI   DSAXA,DSAXAYES          EXECUTING ON MVS/XA     20SEP84
         BE    SETMXINC                YES-NO LOOKUP TABLE     20SEP84
*                                      SO NO NEED TO SCAN      20SEP84
         MVC   DSADAADR,=F'255'        START AT CHANNEL 1 (-1) 20SEP84
SETMXDUP DS    0H
         L     R11,DSADAADR            BUMP DEV ADR            20SEP84
         AH    R11,=H'1'                                       20SEP84
         ST    R11,DSADAADR            SAVE IT                 20SEP84
         CH    R11,=H'4095'                                    20SEP84
         BH    SETMXINC                SHOULD FIND DEVICE AGAI
         BAL   R14,UTGETUCB            TRY TO FIND UCB         20SEP84
         B     SETMXDUP                NF - TRY AGAIN          20SEP84
         CR    R11,R6                  SAME UCB
         BNE   SETMXDUP                NO-TRY AGAIN
         C     R4,DSADAADR             SAME DEV ADDR
         BNE   SETMXDA             NO-MUST HAVE HIT 1ST PATH ALREADY
SETMXINC DS    0H
         LH    R0,DSADVMAX                                     20SEP84
         AH    R0,=H'1'            BUMP NUMB OF ONLINE DASDS
         STH   R0,DSADVMAX         SET SYSTEM MAX DASD
         B     SETMXDA             NEXT
SETMXEND DS    0H
         ZAP   PACKS(4),=P'0'      ZERO FIRST PACKED COUNTER
         MVC   PACKS+4(PACKE-PACKS-4),PACKS  ZERO REST (64 MAX)
         MVI   HDR1,C' '           BLANK HDR
         MVC   HDR1+1(L'HDR1-1),HDR1  "
         MVI   HDR1,C'1'           SKIP CHAN 1 ASA
         LA    R1,HDRDATE          GET ANSWER AREA             28OCT79
         ST    R1,WD               MAKE PARM                   28OCT79
         MVI   WD,X'80'                                        28OCT79
         LA    R1,WD               CALL PARM                   28OCT79
         LINK  EP=TSCVDATE,ERRET=SETNDATE
SETNDATE DS    0H                                              28OCT79
         MVC   HDRTITLE,LOGO       MOVE HEADER
         LA    R1,HDR1             GET HDR
         BAL   R14,PUT             1ST WRITE CAUSES OPEN
         MVC   LINESIZE,PUTDCB+X'52' COPY LRECL
*        SET REPORT FORMAT
         MVI   PRTOPT,C'H'         DEFAULT (H=HISTOGRAM,M=MATRIX)
         L     R1,PARMSAVE         GET O/S PARM
         L     R14,0(R1)               GET JCL PARM
         LH    R15,0(R14)              GET L' PARM             20SEP84
         ICM   R15,8,=C'/'             SLASH FILL              20SEP84
         LA    R14,2(R14)              START OF PARM           20SEP84
         LA    R0,DSAPARM              PARM SAVE AREA          20SEP84
         LA    R1,L'DSAPARM            L' "                    20SEP84
         MVCL  R0,R14                  COPY PARM               20SEP84
         MVI   DSAPARM+L'DSAPARM-1,C'/' ENSURE 1"/"            20SEP84
         MVI   PRTOPT,C'M'         SET MATRIX OPTION
         CLC   =C'MATR',DSAPARM    MATRIX
         BE    SETPREND            YES-LEAVE 'M' IN
         MVI   PRTOPT,C'H'         HISTOGRAM
         CLC   =C'HIST',DSAPARM
SETPREND DS    0H
*                                                              20SEP84
**             OVERLAY MY DEFAULT TABLE WITH PARM INFO         20SEP84
*                                                              20SEP84
         LA    R1,DSAPARM+5            OVERRIDE STRING         20SEP84
         LA    R0,JT#                                          20SEP84
         LA    R14,JOBS                MY JOBNAME TABLE        20SEP84
SETJNXT  DS    0H                                              20SEP84
         CLI   0(R1),C'/'              NO MORE INPUT           20SEP84
         BE    SETJEND                 YES-EXIT                20SEP84
         LH    R2,=H'-1'               #CHAR-1 OF JOBNAME      20SEP84
         LA    R15,JOBSNAM-JOBS(R14)   START OF NEXT JOBNAME   20SEP84
SETJNXT2 DS    0H                                              20SEP84
         MVC   0(1,R15),0(R1)          MOVE A BYTE             20SEP84
         AH    R2,=H'1'                CALC L'-1 SO FAR        20SEP84
         LA    R15,1(,R15)             NEXT OUTPUT BYTE        20SEP84
         LA    R1,1(,R1)               NEXT INPUT BYTE         20SEP84
         CH    R2,=H'7'                AT 8-1=7 (JOBSNAME FULL 20SEP84
         BE    SETJLEN                 YES-SET L'-1            20SEP84
         CLI   0(R1),C'/'              SEPERATOR               20SEP84
         BNE   SETJNXT2                NO-CONTINUE MOVE        20SEP84
         LA    R1,1(,R1)               YES-SKIP SEPERATOR      20SEP84
SETJLEN  DS    0H                                              20SEP84
         STC   R2,JOBS#CHR-JOBS(R14)   SET L'-1 OF JOBNAME     20SEP84
         LA    R14,(JOB1-JOBS)(,R14)   NEXT JOBNAME TABLE SLOT 20SEP84
         BCT   R0,SETJNXT              SEE IF MORE INPUT       20SEP84
SETJEND  DS    0H                                              20SEP84
******** ***** *********************** *********************** 20SEP84
         LH    R0,LINESIZE         GET LINE SIZE
         AH    R0,=H'10'           + 10
         GETMAIN R,LV=(0)          GET PRINT LINE
         ST    R1,@PL              SAVE ADDR
         LH    R1,STMAXDSP         DIGITS IN DEVICE ARRAY DISPLAY
         XR    R0,R0               CLEAR
SETOVFLO DS    0H                  CALC LARGEST DISPLAY NUMBER (999)
         MH    R0,=H'10'           SHIFT LEFT 1 DECIMAL
         AH    R0,=H'9'            ADD 9
         BCT   R1,SETOVFLO         LOOP TO GET STMAXDSP 9(S)
         ST    R0,EODOVFLO         SAVE 999
*        SETUP MOVE INSTR FOR SEEK COUNT
         MVC   EXMVC,MVC           MOVE MODEL
         MVC   EXMVC2,MVC2         MOVE MODEL OF *** MOVE
         MVC   EXMVC3,MVC          MOVE MODEL FORM EDIT AREA
         LH    R6,EXMVC+4          GET END OF EDIT AREA
         N     R6,=X'0000FFFF'     CLEAR TO S TYPE CON
         SH    R6,STMAXDSP         BACK UP BY DISPLAY DIGITS
         STCM  R6,3,EXMVC+4        SAVE S-TYPE ADDR OF EDIT AREA
         AH    R6,STMAXDSP         GET BACK TO ORIG. S-TYPE
         SH    R6,STJOBDSP         BACK UP FOR JOB DISPLAY DIGITS
         STCM  R6,3,EXMVC3+4       SAVE S-TYPE
         LH    R0,STMAXDSP         GET # DISPLAY DIGITS
         BCTR  R0,0                -1
         STC   R0,EXMVC+1          PUT IN MVC INSTR
         STC   R0,EXMVC2+1
         LH    R0,STJOBDSP         GET JOB ARRAY DISPLAY DIGITS
         BCTR  R0,0                -1
         STC   R0,EXMVC3+1         SET MVC L'
*        CALC. # OF SLOTS FOR A DRIVE
         LH    R1,LINESIZE         GET LINE SIZE
         SH    R1,LINEOFST         -MARGIN INFO
         LH    R15,STMAXDSP        GET # DISPLAY DIGITS
         BAL   R14,DIVIDE          CALC # SLOTS ON A LINE
         STH   R1,DVSLOTS          SAVE IT
         MH    R1,DVSLOTS          SQUARE FOR DEVICE ARRAY
         CLI   PRTOPT,C'H'         HISTOGRAM
         BNE   SETSIZE             NO
         LH    R1,MAXCYL           YES-4BYTE ENTRIES PER CYL
SETSIZE  DS    0H
         SLL   R1,2                *4BYTES/COUNTER
         LA    R1,DVFIXSIZ(R1)     +FIX PREFIX SIZE
         ST    R1,DVSIZE           =SIZE OF A DEVICE ENTRY(6K)
*        GET DEVICE VECTOR TABLE
         LH    R0,DSADVMAX         GET MAX DEVICES
         MH    R0,=AL2(DVVSIZ)     *SIZE OF VECTOR TABLE ENTRY(6)
         ST    R0,DVVSIZE          SAVE SIZE
         GETMAIN R,LV=(0)          GET TABLE
         ST    R1,DVVROOT          SAVE ADD
         BAL   R14,CLRIT           CLEAR CORE
*        SEARCH FOR DASD UCBS TO FILL VECTOR TABLE
         L     R1,DVVROOT          GET START OF VECTOR TABLE
         A     R1,DVVSIZE          +SIZE=END+1
         SH    R1,=AL2(DVVSIZ)     BACKUP TO LAST
         MVI   0(R1),X'FF'         MARK LAST
*        SEARCH UCB LOOKUP TABLE FOR DASDS
         MVC   STSIZ#,=F'2'            START AT 1 STRING(+FUDG 20DEC84
         LA    R4,X'0FF'               START AT CHANNEL 1 (-1)
         L     R5,DVVROOT          MY LOOKUP TABLE
         USING DVVTAB,R5           TELL ASM
SETDASD  DS    0H                  LOOK FOR DASD
         AH    R4,=H'1'                NEXT ADDR               20SEP84
         CH    R4,=H'4095'                                     20SEP84
         BH    SETDASDE                END-NEXT SECTION        20SEP84
         LR    R11,R4                  COPY                    20SEP84
         BAL   R14,UTGETUCB            GET UCB ADR             20SEP84
         B     SETDASD                 +0=NOT FOUND            20SEP84
         LR    R6,R11                  COPY                    20SEP84
         CLI   UCBDVCLS(R6),X'20'  DASD
         BNE   SETDASD             NO-LOOP
*              SEE IF DOUBLE DENS                              06NOV84
         ICM   R11,3,UCBCHAN(R6)   PICK UP CUA                 06NOV84
         BAL   R14,UTDDTST         DUAL DENSITY TEST           06NOV84
         B     SETDADDN            NO-CONTINUE                 06NOV84
         TM    UCBCHAN+1(R6),X'20' PRIMARY VOLUME              06NOV84
         BO    SETDASD             NO-SKIP IT                  06NOV84
SETDADDN DS    0H                                              06NOV84
*              OTHER CHAN PATH                                 06NOV84
         CLI   DSAXA,DSAXAYES          XA                      20SEP84
         BE    SETDASD2                YES-SKIP ALT PATH TEST  20SEP84
         MVC   DSADAADR,=F'255'        START AT CHANNEL 1 (-1) 20SEP84
SETDASD1 DS    0H                  SEE IF ANOTHER PATH
         L     R11,DSADAADR            BUMP DEV ADR            20SEP84
         AH    R11,=H'1'                                       20SEP84
         ST    R11,DSADAADR            SAVE IT                 20SEP84
         CH    R11,=H'4095'                                    20SEP84
         BH    SETDASD                 AT-END STRANGE NONSEQ.  20SEP84
         BAL   R14,UTGETUCB            GET UCB ADR             20SEP84
         B     SETDASD1                NOT FOUND - LOOP        20SEP84
         CR    R11,R6                  SAME UCB
         BNE   SETDASD1                NO-LOOP
         C     R4,DSADAADR             SAME PTR
         BNE   SETDASD                 NO-ANOTHER PATH
SETDASD2 DS    0H                      CHECK STRING            20SEP84
         TM    UCBCHAN+1(R6),X'07' SEE IF 1ST DRIVE IN STRING
         BNZ   SETNSTR             NO
         L     R0,STSIZ#           GET CURRENT NUMB OF STRINGS
         AH    R0,=H'1'            BUMP
         ST    R0,STSIZ#
SETNSTR  DS    0H                  END-OF-STRING CALC
         TM    UCBSTAT(R6),X'80'   DASD ONLINE
         BNO   SETDASD             NO-SKIP IT
         CLI   UCBVOLI(R6),0       VALID VOLSER                06NOV84
         BE    SETDASD             NO-SKIP                     06NOV84
         LA    R14,STCYLS          GET MY DEVICE CHAR TABLE
SETDEVCK DS    0H                  LOC DEVICE ATTR
         CLC   0(1,R14),UCBUNTYP(R6)  MATCH ON UCB TYPE
         BE    SETDEVOK            YES - GOOD DEV
         LA    R14,STCYLS1-STCYLS(R14)  BUMP
         CLI   0(R14),X'FF'        END OF TABLE
         BE    SETDASD             YES-SKIP HIM
         B     SETDEVCK            LOOP
SETDEVOK DS    0H                  GOOD DASD
         CLI   0(R5),X'FF'         ROOM FOR THIS ONE
         BE    ABEND1              NO-PROGRAM BUG
         ST    R6,DVVUCB         SAVE UCB ADDR
         LA    R5,DVVSIZ(R5)       BUMP PTR
         B     SETDASD
ABEND1   DS    0H                                              15OCT79
         WTO   'TSGTFMAP-BUG-NO ROOM FOR DVTAB',ROUTCDE=(11)   15OCT79
         ABEND 1,DUMP              NO-BLOW
SETDASDE DS    0H                  NOW BUILD DEVICE TABLES
         S     R5,DVVROOT          BACK UP TO LAST BUILT
         LR    R1,R5               PUT IN WORK
         LA    R15,DVVSIZ          SIZE OF VECTOR ENTRY
         BAL   R14,DIVIDE          GET # GOOD DASDS IN SYS
         LR    R0,R1               PUT IN WORK
         MH    R0,DVSIZE+2         *DEVICE ENTRY SIZE(6K)
         GETMAIN R,LV=(0)          GET DEVICE TABLE
         LR    R11,R1              SET PTR TO FIRST
         BAL   R14,CLRIT           CLEAR CORE
         L     R5,DVVROOT          GET VECTOR PTR
SETDT    DS    0H                  BUILD DEVICE ENTRIES
         ICM   R6,15,DVVUCB            GET UCB ADDR
         BZ    SETDTEND            END-OF-TABLE
         ST    R11,DVVPTR          STORE PTR TO DEVICE ENTRY
         MVC   DVCHAN,UCBCHAN(R6)  HEX ADDR (LAST USED PATH)   06NOV84
         MVC   DVUCB,UCBNAME(R6)   MOVE DISPLAY ADDR
         MVC   DVVOLI,UCBVOLI(R6)  MOVE VOLSER
         MVC   DVSTAB,UCBSTAB(R6)  SAVE DEVICE STATUS (PRIV..  28OCT79
         STCM  R6,15,DVUCBPTR      STORE UCB ADDR IN DEV TABLE
*              SEE IF DUAL DENSITY                             06NOV84
         ICM   R11,3,DVCHAN        GET ADDR                    06NOV84
         BAL   R14,UTDDTST         IS IT DUAL DENSITY          06NOV84
         B     SETDDNO             NO                          06NOV84
         L     R11,DVVPTR          REFRESH R11                 06NOV84
         OI    DVFLAG1,DVF1DD      SET DUAL DENSITY FLAG       06NOV84
*              LOCATE SECONDARY VOLSER FOR DOUBLE DENS DISK    06NOV84
         XR    R14,R14                                         06NOV84
         ICM   R14,3,DVCHAN        COPY ADDR                   06NOV84
         O     R14,=X'00000020'    FLIP ON SECONDARY VOLUME    06NOV84
         SRDL  R14,8               PUT CU/DEV ADDR IN R15      06NOV84
         SRL   R15,28              PUT CU/DEV IN LOW END       06NOV84
         LR    R11,R15                 COPY                    20SEP84
         BAL   R14,UTGETUCB            GET UCB ADDR            20SEP84
         B     SETDDNO2                NO-SKIP                 30APR84
         CLI   UCBVOLI(R14),0          VALID VOLSER            20SEP84
         BE    SETDDNO2                NO-SKIP                 30APR84
         MVC   DVVOLI2,UCBVOLI(R14)    MOVE ALT VOLUME         20SEP84
         MVC   DVSTAB2,UCBSTAB(R14)    MOVE ALT VOL STATUS     20SEP84
         B     SETDDNO2                FINI                    30APR84
******** ***** *********************** *********************** 20SEP84
SETDDNO  DS    0H                                              06NOV84
         L     R11,DVVPTR          REFRESH R11                 06NOV84
SETDDNO2 DS    0H                                              06NOV84
*        CALC # OF CYLS IN A SLOT
         LA    R14,STCYLS          DEVICE CHAR TABLE
SETCYLLP DS    0H                  LOOK FOR DEVICE
         CLC   0(1,R14),UCBUNTYP(R6)  MATCH
         BE    SETCYL              YES-LOAD
         LA    R14,STCYLS1-STCYLS(R14) BUMP
         CLI   0(R14),X'FF'        END -
         BNE   SETCYLLP            NO - LOOP
SETCYL   DS    0H                  SET UP DEVICE CHAR
         MVC   DVTYPE,(STCYLNAM-STCYLS)(R14)  NAME (3330)
         MVC   DVTRK,(STCYLTRK-STCYLS)(R14)  TRACKS PER CYL
         MVC   DVCYL,(STCYLMAX-STCYLS)(R14)  CYL PER VOLUME    15OCT79
         LH    R15,DVSLOTS         GET # OF SLOTS
         LH    R1,(STCYLMAX-STCYLS)(R14)   GET # CYLS ON PACK
         BAL   R14,DIVIDE          STRAIGHT DIVIDE
         AH    R1,=H'1'            ROUND UP TO HANDLE PARTIAL
         STH   R1,DVDELTA           ROW
         LA    R15,DVXREF          GET START OF DEVICE ARRAY
         ST    R15,DVLROW          SAVE AS LAST ROW SEEKED
         LA    R5,DVVSIZ(R5)       NEXT DEVICE VECTOR PTR
         A     R11,DVSIZE          NEXT DEVICE ENTRY
         B     SETDT               DO NEXT DEVICE
         DROP  R5                  TELL ASM
MVC2     MVC   0(*-*,R5),=CL10'**********'  OVERFLOW MODEL INSTR
MVC      MVC   0(*-*,R5),WE+L'WE   MODEL FOR MOVE IN REPORT
SETDTEND DS    0H                                              20SEP84
*        GETMAIN CORE FOR STRING TABLE
*        THIS TABLE SHOULD BE GETMAINED/FREEMAINED AT EOJ
*         SINCE IT IS ONLY USED THERE.
SETST    DS    0H                  GETMAIN STRING TABLE
         L     R0,STSIZ#           GET # OF STRINGS
         MH    R0,=AL2(STSIZE)
         GETMAIN R,LV=(0)
         ST    R1,STROOT           SAVE ADDR
         BAL   R14,CLRIT           CLEAR CORE
SETRET   DS    0H                  RETURN FROM SETUP
         L     R12,@BASE           RESTORE MAIN BASE REG
         POP   USING                                           15OCT79
         B     GETREC                                          15OCT79
 TITLE 'E N D  O F  D A T A  -  C A L C  D E P E N D A N T  D A T A'
EODRTN   DS    0H                  END-OF-FILE ON INPUT
         PUSH  USING                                           15OCT79
         USING EODRTN,R12          NEW BASE REG                15OCT79
         LM    R0,R1,STOPTM        GET TIME OF LAST GTF REC
         LM    R2,R3,STRTTM        GET STOP TIME
         BAL   R14,UTTIMDIF        CALC DIF IN MILLISEC*10
         LH    R15,=H'10'          NORMALIZE *10 OUT
         BAL   R14,DIVIDER         CALC GTF RUN TIME IN MILLI-SEC
         LH    R15,=H'1000'        NOW DO IT IN SECONDS        06NOV84
         BAL   R14,DIVIDER         CALC GTF RUN TIME IN SEC    06NOV84
         ST    R1,TOTTM            SAVE ELAPSED TIME
*        CALC  SIO0 RATE                                       06NOV84
         ZAP   WD,TOTSIO0          GET BINARY                  06NOV84
         CVB   R1,WD               GET GOOD SIOS               06NOV84
         MH    R1,=H'10'           TIMES 10 FOR PRECISION      06NOV84
         L     R15,TOTTM           GET RUN TIME                06NOV84
         BAL   R14,DIVIDER         GET RATE IO/SEC *10         06NOV84
         ST    R1,TOTSIO0R         SAVE RATE                   06NOV84
*        CALC SUMMARY DATA BY STRING
         L     R1,DVVROOT          GET DEVICE VECTOR TABLE
         ST    R1,EODCURDV         SET 1ST DEVICE
EODSTNX1 DS    0H                  NEXT DEVICE
         L     R1,EODCURDV         GET DEVICE VECT ENTRY
         L     R11,DVVPTR-DVVTAB(R1) GET DEVICE TABLE ENTRY
         OC    DVVPTR-DVVTAB+1(3,R1),DVVPTR-DVVTAB+1(R1) END OF DEVS
         BZ    EODSTEN1            YES-STRING-CALC-COMPLETE
         LA    R1,DVVSIZ(R1)       BUMP TO NEXT VECTOR
         ST    R1,EODCURDV         SAVE FOR NEXT TIME
         MVC   EODSTUCB,DVUCB      GET EBCDIC ADDR
         MVI   EODSTUCB+2,C'0'     ASSUME ZERO STRING
         XR    R6,R6               CLEAR WORKER
         ICM   R6,15,DVUCBPTR       GET UCB ADDR
         TM    UCBCHAN+1(R6),X'08' HI OR LO STRING
         BZ    *+8                 ZERO STRING-OK
         MVI   EODSTUCB+2,C'8'     MAKE XX8 STRING
         L     R2,STSIZ#           GET NUMB OF STRINGS
         L     R3,STROOT           GET FIRST STRING
         USING STTAB,R3            TELL ASM
EODSTNX2 DS    0H                  CALC STRING STATS
         OC    STUCB,STUCB         END OF STRING TABLE
         BZ    EODSTADD            YES-ADD NEW STRING
         CLC   STUCB,EODSTUCB      FOUND RIGHT STRING
         BE    EODSTHIT            YES
         LA    R3,STSIZE(R3)       BUMP TO NEXT STRING TABLE
         BCT   R2,EODSTNX2         TRY NEXT STRING TABLE ENTRY
ABEND4   DS    0H                                              15OCT79
         WTO   'TSGTFMAP-BUG-NO STRING FOR A DEV',ROUTCDE=(11) 15OCT79
         WTO   'TSGTFMAP-ABEND4 SKIPPED.........',ROUTCDE=(11) 20DEC84
         B     EODSTNX1                                        20DEC84
         ABEND 4,DUMP              RAN OF OF CALCULATED STRING ENTRIES
EODSTADD DS    0H                  ADD A NEW STRING
         MVC   STUCB,EODSTUCB      MOVE EBCDIC NAME
EODSTHIT DS    0H                  UPDATE A STRING ENTRY
         OC    DVSIO0,DVSIO0       ANY DEVICE ACTIVITY
         BZ    EODSTNX1            NO
*
         L     R0,DVSIO0           ADD DEV SIO 0 TO STRING
         A     R0,STSIO0
         ST    R0,STSIO0
*
         L     R0,DVSIO1           SIO 1
         A     R0,STSIO1
         ST    R0,STSIO1
*
         L     R0,DVSIO2           SIO 2
         A     R0,STSIO2
         ST    R0,STSIO2
*
         L     R0,DVSIO3           SIO 3
         A     R0,STSIO3
         ST    R0,STSIO3
*
         L     R0,DVRESV           RESERVES                    28OCT79
         A     R0,STRESV                                       28OCT79
         ST    R0,STRESV                                       28OCT79
*
         L     R0,STNUMB           GET CURR NUMB OF DEV ON STRING
         AH    R0,=H'1'
         ST    R0,STNUMB
*
         L     R0,DVAVGIO          AVG IO TIME
         A     R0,STAVGIO
         ST    R0,STAVGIO
*
         L     R0,DVTOTCYL         CYL SEEKED
         A     R0,STTOTCYL
         ST    R0,STTOTCYL
*
         L     R0,DVDEFRIO         AVG DEFER TIME
         A     R0,STDEFRIO
         ST    R0,STDEFRIO
*
         CLC   DVDEFRMX,STDEFRMX   LOCATE HIGHEST DEFER TIME
         BL    *+10                LOWER THAN CURR. MAX.
         MVC   STDEFRMX,DVDEFRMX   STORE NEW LIMIT
*
         L     R0,DVAVGRES         BUMP STRING RESERVE DATA    28OCT79
         A     R0,STAVGRES                                     28OCT79
         ST    R0,STAVGRES         UPDATE                      28OCT79
         B     EODSTNX1
 TITLE 'E N D  O F  D A T A  -  P R I N T  S T R I N G  S T A T S  '
EODSTEN1 DS    0H                  PRINT GRAND TOTALS
*        PRINT JOB TOTALS
         BAL   R14,CLRPL           CLEAR PRINT LINE
         L     R1,@PL              GET PRINT LINE
         MVI   0(R1),C'0'          DOUBLE SPACE
         MVC   1(10,R1),=C'JOB TOTALS'
         BAL   R14,PUT             PRINT IT
         LA    R2,(PRTCNTE-PRTCNTS)/(PRTCNT1-PRTCNTS)
         LA    R3,PRTCNTS          #OF CTRS/STRT OF TABLE
         BAL   R14,UTEODP          PRINT PACKED DATA
         LA    R2,(PRTBCNTE-PRTBCNTS)/(PRTBCNT1-PRTBCNTS) NUMB OF ENTS
         LA    R3,PRTBCNTS         START OF FORMAT TABLE
         ST    R13,UTEODBAS        SAVE BASE INFO FOR FORMATTER
         BAL   R14,UTEODB          PRINT TABLE
*
**             PRINT GTF RUN START / END
*
         MVC   STCKSTCK,STRTTM         MOVE START TIME         DDMMM84
         BAL   R14,UTSTCK              MAKE PRINTABLE          DDMMM84
         L     R1,@PL                                          DDMMM84
         MVC   11(28,R1),STCK          MOVE ENGLISH START TIME DDMMM84
         MVC   11+L'STCK(15,R1),=C'=GTF START TIME'            DDMMM84
         BAL   R14,PUT                 PRINT IT                DDMMM84
*                                                              DDMMM84
         MVC   STCKSTCK,STOPTM         MOVE STOP  TIME         DDMMM84
         BAL   R14,UTSTCK              MAKE PRINTABLE          DDMMM84
         L     R1,@PL                                          DDMMM84
         MVC   11(28,R1),STCK                                  DDMMM84
         MVC   11+L'STCK(15,R1),=C'=GTF STOP  TIME'            DDMMM84
         BAL   R14,PUT                 PRINT IT                DDMMM84
*
**             CALC STRING DATA AND PRINT
*
         L     R3,STROOT           GET 1ST STRING
EODSTNX3 DS    0H                  NEXT STRING
         L     R0,STSIZ#           NUMB OF STRINGS
         MH    R0,=AL2(STSIZE)     * SIZE = OFFSET TO END+1
         A     R0,STROOT            + BASE = END+1
         CR    R0,R3               OFF END
         BNH   EODSTEND            YES
         OC    STSIO0,STSIO0       ANY SIOS
         BZ    EODSTBM1            NO-SKIP
         L     R1,STAVGIO          GET TOTAL IO TIME * 10MS
         L     R15,STSIO0          GET # GOOD SIOS
         MH    R15,=H'10'          ADJUST FOR *10 FACTOR
         BAL   R14,DIVIDER         GET AVG IO TIME ON STRING MILLISEC
         ST    R1,STAVGIO          SAVE AVERAGE
         L     R1,STTOTCYL         GET TOTAL CYLS SEEKED
         L     R15,STSIO0          GOOD SIO
         BAL   R14,DIVIDER         GET AVG CYL SEEKED
         ST    R1,STTOTCYL         AVG CYL SEEKED
*
**       NORMALIZE STRING AVG DEFER TIME
*
         L     R1,STDEFRIO         GET DEFERED TIME *10MS
         L     R15,STSIO1          GET # OF DEFERED SIOS
         MH    R15,=H'10'          ADJUST FOR *10
         BAL   R14,DIVIDER
         ST    R1,STDEFRIO         SAVE AVG DEFERED TIME
*
**       NORMALIZE STRING MAX DEFER TIME
*
         L     R1,STDEFRMX         GET MAX STRING DEFER *10
         LH    R15,=H'10'          SETUP DIVISOR
         BAL   R14,DIVIDER         DIVIDE AND ROUND
         ST    R1,STDEFRMX         STORE MAX DEFER IN MILLI-SEC
*                                                              28OCT79
**       NORMALIZE STRING AVG DEFER TIME                       28OCT79
*                                                              28OCT79
         L     R1,STAVGRES         GET RESERVE TIME *10MS      28OCT79
         L     R15,STRESV          GET # OF RESERVES           28OCT79
         MH    R15,=H'10'          ADJUST FOR *10              28OCT79
         BAL   R14,DIVIDER                                     28OCT79
         ST    R1,STAVGRES         SAVE AVG DEFERED TIME       28OCT79
*
**       PRINT STRING DATA
*
         BAL   R14,CLRPL           CLR PRINT LINE
         L     R1,@PL              GET PRINT LINE
         MVI   0(R1),C'0'          DBL SPACE
         MVC   1(3,R1),STUCB       MOVE NAME OF STRING
         MVC   5(6,R1),=C'STRING'  STRING IN TITLE
         BAL   R14,PUT
         ST    R3,UTEODBAS         SAVE BASE ADDR FOR FORMATTER
         LA    R2,(EOD2CNTE-EOD2CNTS)/(EOD2CNT1-EOD2CNTS) NUMB OF FLDS
         LA    R3,EOD2CNTS         GET FORMAT DATA
         BAL   R14,UTEODB          PRINT STRING DATA
         L     R3,UTEODBAS         RESTORE R3
EODSTBM1 DS    0H                  NEXT STRING ENTRY
         LA    R3,STSIZE(R3)
         B     EODSTNX3
         DROP  R3                  FINI W/ STRING
EODSTEND DS    0H                  FINI W/ STRING
 TITLE 'E N D  O F  D A T A  -  P R I N T  E A C H  D E V I C E    '
         L     R1,DVVROOT          FIRST VECTOR ENTRY
         ST    R1,EODCURDV         SAVE
EODLOOP  DS    0H             NOW PRINT DATA FOR EACH DASD
         BAL   R14,CLRPL           CLEAR PRT LINE TO BLANKS
         L     R1,EODCURDV         PICK UP CURRENT DEVICE PTR
         OC    DVVPTR+1-DVVTAB(L'DVVPTR-1,R1),DVVPTR+1-DVVTAB(R1)
         BZ    EODJOB              END OF TABLE - DONE
         L     R11,DVVPTR-DVVTAB(R1) GET DEVICE TABLE
         LA    R1,DVVSIZ(R1)       BUMP TO NEXT DEVICE PTR
         ST    R1,EODCURDV         SAVE FOR NEXT TIME
         OC    DVSIO0,DVSIO0       NO-SIOS - SKIP
         BZ    EODLOOP             TRY NEXT DEVICE
         ZAP   WD,TOTSIO           SEE IF I/OS TOO LOW         02MAR94
         CVB   R0,WD                                           02MAR94
         SRL   R0,8                IOS/256(ROUND DOWN)         02MAR94
         C     R0,DVSIO0                                       02MAR94
         BH    EODLOOP             I/O  TOO LOW - SKIP         02MAR94
*                                                              15OCT79
**      MAP VTOC    TRACK TO DSN                               15OCT79
*                                                              15OCT79
         L     R0,=A(DSDSNTL#)     GET DEFAULT BUFFER SIZE     15OCT79
         ST    R0,DSDSNTL          SAVE                        15OCT79
EODDSN0  DS    0H                                              15OCT79
         CLI   PRTOPT,C'H'         ONLY MAP FOR HISTOGRAM      15OCT79
         BNE   EODDSNX             YES-BYPASS SECTION          15OCT79
         ICM   R1,15,DVDSNO        OLD TABLE                   15OCT79
         BZ    EODDSN1             NO-GET 1ST                  15OCT79
         SH    R1,=H'4'            TABLE-4 = LENGTH            15OCT79
         L     R0,0(R1)            LENGTH                      15OCT79
         FREEMAIN R,A=(1),LV=(0)                               15OCT79
         L     R1,DVDSNT           FREE UP DSN TABLE           15OCT79
         SH    R1,=H'4'            BACK UP TO L'               15OCT79
         L     R0,0(R1)                                        15OCT79
         FREEMAIN R,A=(1),LV=(0)                               15OCT79
EODDSN1  DS    0H                                              15OCT79
         LH    R1,DVCYL            CYL/VOLUME                  15OCT79
         MH    R1,DVTRK            TRKS/CYL                    15OCT79
         LA    R1,4(R1,R1)         2BYTES/TRK +4BYTE L'        15OCT79
         LR    R0,R1               COPY                        15OCT79
         GETMAIN R,LV=(0)                                      15OCT79
         ST    R0,0(R1)            SAVE L'                     15OCT79
         LA    R1,4(R1)            SKIP L'                     15OCT79
         ST    R1,DVDSNO           DSN OFFSET TABLE            15OCT79
         LR    R14,R1              START OF CLEAR              15OCT79
         LR    R15,R0              WHOLE TABLE L'              15OCT79
         SH    R15,=H'4'           DONT CLEAR LEN WORD         15OCT79
         XR    R0,R0                                           15OCT79
         XR    R1,R1                                           15OCT79
         MVCL  R14,R0              CLEAR OFFSET TABLE          15OCT79
         L     R0,DSDSNTL          GETMAIN DSNAME TABLE        15OCT79
         GETMAIN R,LV=(0)                                      15OCT79
         ST    R0,0(R1)            SAVE TBL ADDR               15OCT79
         LA    R1,4(R1)            TABLE START                 15OCT79
         ST    R1,DVDSNT           SAVE TBL START PTR          15OCT79
         LA    R1,1(R1)            MAKE SURE NON-ZERO DISPL.   15OCT79
         ST    R1,DSDSNTC          SAVE NXT AVAL BYTE          15OCT79
         SH    R1,=H'100'          BACK UP 100 BYTES           15OCT79
         AR    R1,R0               GET END MINUS 99            15OCT79
         ST    R1,DSDSNTE          SAVE LIMIT                  15OCT79
*                                                              15OCT79
**       MAP   VOLUME                                          15OCT79
*                                                              15OCT79
         MVC   VOLID,DVVOLI        COPY VOLSER                 15OCT79
EODDSNVO DS    0H                  SECONDARY VOLSER EP         06NOV84
*?$?    DUE TO ACF2 SECURITY, FILTER OUT UNALLOWED VOLSERS     02MAR94
         CLC   =C'XPC',DVVOLI      FORBIDDEN VOLSER-X.....     02MAR94
         BE    EODDSNX             YES-SIMULATE EOF            02MAR94
         CLC   =F'0',VADEXCP       VTOCEXCP UNAVAIL?           02MAR94
         BE    EODDSNX             YES-SIMULATE EOF            02MAR94
         VTEXCP OPEN                                           15OCT79
         USING FMT1,R10                                        15OCT79
EODDSNL  DS    0H                  READ VTOC FOR F1 DSCB       15OCT79
         VTEXCP READ                                           15OCT79
         CH    R15,=H'4'           EOF                         15OCT79
         BE    EODDSNX             YES-DONE                    15OCT79
         L     R10,DSCBADDR        GET ADR OF DSCB             15OCT79
         LA    R10,8(R10)          SKIP COUNT FIELD            15OCT79
         CLI   DS1FMTID,C'4'       F4 (VTOC)                   28OCT79
         BE    EODDSNL4            YES-DUMMY UP A DS           28OCT79
         CLI   DS1FMTID,C'1'       F1 DSCB                     15OCT79
         BNE   EODDSNL             NO-READ MORE                15OCT79
         XC    FMT3,FMT3           CLEAR F3 DSCB AREA          15OCT79
         CLI   DS1EXT1,0           ANY EXTENTS                 15OCT79
         BE    EODDSNL             NO-SKIP                     15OCT79
         OC    DS1PTRDS,DS1PTRDS   ANY F3 DSCB                 15OCT79
         BZ    EODDSNL1            NO                          15OCT79
         MVC   DS3PTRDS,DS1PTRDS   MOVE CCHHR ADDR OF F3       15OCT79
         VTEXCP CCHH               READ BY CCHHR               15OCT79
         LTR   R15,R15             ERRORS                      15OCT79
         BZ    EODDSNL1            NO-OK                       15OCT79
ABEND6   DS    0H                                              15OCT79
         ST    R15,WD              SAVE FOR DIAG.              15OCT79
         WTO   'TSGTFMAP-BAD READ FOR F3 DSCB',ROUTCDE=(11)    15OCT79
         ABEND 6,DUMP                                          15OCT79
EODDSNL4 DS    0H                  DUMMY UP FMT4 LIKE D.S.     28OCT79
         MVC   DS1DSNAM,=CL44' *V*T*O*C*'                      28OCT79
*                                  SINCE I KNOW VTOC IS ONE    06NOV84
*                                  EXTENT, I WILL FAKE IT      06NOV84
*                                  TO LOOK LINE 2 EXTENTS      06NOV84
*                                  EXT 1 = VOL LABEL TRK       06NOV84
*                                  EXT 2 = OLD EXT 1           06NOV84
         MVC   DS1EXT2,DS1EXT1     MAKE 2 LOOK LIKE 1          06NOV84
         MVI   DS1EXT2+1,1         SET 2ND EXT                 06NOV84
         MVC   DS1EXT1,=X'00000000000000000001' EXT=1TRK@CYL0  06NOV84
EODDSNL1 DS    0H                                              15OCT79
         L     R2,DSDSNTC          GET CURR DSN AREA           15OCT79
         MVC   2(44,R2),DS1DSNAM   MOVE WHOLE DSNAME           15OCT79
         LA    R1,1+1+43(R2)       GET LAST BYTE OF DSN        15OCT79
         LA    R0,44               MAX NAME                    15OCT79
EODDSNLP DS    0H                                              15OCT79
         CLI   0(R1),C' '          NON-BLANK YET               15OCT79
         BNE   EODDSNMX            YES-SAVE DSN LENGTH         15OCT79
         BCTR  R1,0                BACK UP                     15OCT79
         BCT   R0,EODDSNLP                                     15OCT79
         WTO   'TSGTFMAP-BUG-NULL DSNAME',ROUTCDE=(11)         15OCT79
ABEND7   ABEND 7,DUMP                                          15OCT79
EODDSNMX DS    0H                                              15OCT79
         STC   R0,0(R2)            SAVE TRUE DSN L'            15OCT79
         LA    R5,DS1EXT1          1ST EXTENT PTR              15OCT79
EODDSNNX DS    0H                  NEXT EXTENT                 15OCT79
         LH    R2,2(R5)            CC LOW                      15OCT79
         LH    R3,6(R5)            SAME TRICK FOR HI TRACK     15OCT79
*              IF DUAL DENSITY, REMAP TRACK LIKE SEEK ADDR     06NOV84
*              THE DISCUSSION SHOWN IN SIOREC ROUTINE          06NOV84
         TM    DVFLAG1,DVF1DD      DUAL DENSITY?               06NOV84
         BZ    EODDSNDD            NO                          06NOV84
         LH    R0,DVCYL            GET DUAL VOL #CYL           06NOV84
         SRL   R0,1                GET SINGLE VOLUME CYL       06NOV84
         CLC   VOLID,DVVOLI        PRIMARY VOLSER?             06NOV84
         BNE   EODDSND2            NO-ASSUME SECONDARY         06NOV84
*CDC33502-MAP 0-554    TO 555  -1109                           06NOV84
         AR    R2,R0               ADJUST TO MIDDLE            06NOV84
         AR    R3,R0               "                           06NOV84
         B     EODDSNDD            CONTINUE                    06NOV84
EODDSND2 DS    0H                  SECONDARY VOLUME            06NOV84
*CDC33502-MAP 0-554    TO 554  -0                              06NOV84
         LCR   R2,R2               GET NEG                     06NOV84
         AR    R2,R0                                           06NOV84
         BCTR  R2,0                REMAP                       06NOV84
         LCR   R3,R3               GET NEG                     06NOV84
         AR    R3,R0                                           06NOV84
         BCTR  R3,0                NOTE NOW R2>R3 STRT>END     06NOV84
EODDSNDD DS    0H                  FINI                        06NOV84
         MH    R2,DVTRK            *TRKS/CYL=TRACK             15OCT79
         AH    R2,4(R5)            PLUS TRK LOW=TRACK STRT     15OCT79
         MH    R3,DVTRK                                        15OCT79
         AH    R3,8(R5)            LAST TRACK                  15OCT79
         CR    R2,R3               DID REMAP CAUSE             06NOV84
         BL    EODDSNDE            NO-OK                       06NOV84
         ST    R2,WD               YES-SWAP REGS               06NOV84
         LR    R2,R3                "                          06NOV84
         L     R3,WD                 "                         06NOV84
EODDSNDE DS    0H                                              06NOV84
         L     R0,DSDSNTC          GET DSNAME ENTRY PTR        15OCT79
         S     R0,DVDSNT            -TABLE START = OFFSET      15OCT79
         CL    R0,=X'0000FFFF'     MAX OFFSET                  15OCT79
         BNH   EODDSNOX            OK                          15OCT79
         CLI   DSABEND8,1          HAVE MSG BEEN ISSUED ONCE   06NOV84
         BE    ABEND8              YES-SKIP IT                 06NOV84
         MVI   DSABEND8,1          SHOW ITS BEEN SENT          06NOV84
         WTO   'TSGTFMAP-TOO MANY DATASETS ON VOLUME',ROUTCDE=(11)
ABEND8   DS    0H                                              15OCT79
*        ABEND 8,DUMP                                          15OCT79
         XR    R0,R0               DONT ABEND, MAP TO ZERO     06NOV84
         B     EODDSNOX            NOP IF YOU WANT ABEND       06NOV84
EODDSNOX DS    0H                                              15OCT79
         SLL   R2,1                1ST TRACK * 2               15OCT79
         SLL   R3,1                LAST TRACK * 2              15OCT79
         A     R2,DVDSNO           +BASE = OFFSET TABLE ENTRY  15OCT79
         A     R3,DVDSNO           "                           15OCT79
*
**       MAKE EVERY OFFSET ENTRY CORRESPONDING BETWEEN         15OCT79
**       START AND END TRACK POINT TO DSN TABLE                15OCT79
*                                                              15OCT79
EODDSNTO DS    0H                                              15OCT79
         STCM  R0,3,0(R2)          SAVE DSN OFFSET             15OCT79
         LA    R2,2(R2)            NEXT TRACK SLOT             15OCT79
         CR    R2,R3               OVER LAST TRACK YET         15OCT79
         BNH   EODDSNTO            NO-LOOP                     15OCT79
         L     R2,DSDSNTC          GET CURRENT DSN INFO        15OCT79
         MVI   1(R2),C' '          MAKE EXTENT INFO BLANK      15OCT79
         XR    R1,R1                                           15OCT79
         ICM   R1,1,1(R5)          GET EXTENT # 0-F            15OCT79
         BZ    EODDSNXX            EXTENT ZERO SHOWS BLANK     15OCT79
         N     R1,=F'15'           FORCE EXTENT 0-F            02MAR94
         CLI   1(R5),9             IS EXTENT IN RANGE 1-9      15OCT79
         BH    EODDSNX2            YES - A-F                   15OCT79
         AH    R1,=AL2(C'0')       NO MAKE 01-09 TO F1-F9      15OCT79
         B     EODDSNX3            SKIP                        15OCT79
EODDSNX2 DS    0H                                              15OCT79
         AH    R1,=AL2(C'A'-10)    XLATE A-F TO C1-C6          15OCT79
EODDSNX3 DS    0H                                              15OCT79
         STC   R1,1(R2)            SAVE EXTENT INDICATOR       15OCT79
EODDSNXX DS    0H                                              15OCT79
*                                                              15OCT79
**             BUMP R5 TO NEXT EXTENT FIELD                    15OCT79
*                                                              15OCT79
         XR    R1,R1                                           15OCT79
         IC    R1,1(R5)            PICK UP THIS EXTENT #       15OCT79
         LA    R5,1(R1)            GET NEXT EXTENT #           15OCT79
         SLL   R5,2                *4 0,4,8,...                15OCT79
         EX    0,EODDSNEX(R5)      GET ADDR OF EXTENT          15OCT79
*                                                              15OCT79
**       UPDATE NEXT AVAL. BYTE IN DSN TABLE                   15OCT79
*                                                              15OCT79
EODDSN2  DS    0H                                              15OCT79
         XR    R1,R1                                           15OCT79
         L     R2,DSDSNTC          NEXT AVAL.                  15OCT79
         IC    R1,0(R2)            DSN L'                      15OCT79
         LA    R1,2(R1,R2)         NEXT=L'DSN+1+1              15OCT79
*                                  1 FOR DSNL', 1FOR EXTENTID  15OCT79
         ST    R1,DSDSNTC          NEXT AVAL.                  15OCT79
*       R2==> AL1(L'DSN),CL1'EXTENT#',CL1-44'DSNAME'           02MAR94
         MVC   0(46,R1),0(R2)      COPY L', DSN FOR NEXT EXTNT 27OCT79
*                                   (IF ANY);IF NOT IT WILL BE 27OCT79
*                                   OVERLAID BY NEXT DSN INFO  27OCT79
         C     R1,DSDSNTE          OVER TABLE LIMITS           15OCT79
         BNH   EODDSN3             NO-SEE IF MORE EXTENTS      15OCT79
         TS    DSDSNTSW            ALREADY ISSUED WTO?         02MAR94
         BNZ   EODDSN2S            SKIP WTO                    02MAR94
         WTO   'TSGTFMAP-DSN TABLE TOO SMALL',ROUTCDE=(11)     15OCT79
EODDSN2S DS    0H                                              02MAR94
*       DUE TO SOFTWARE PROBLEMS-DONT TRY TO INCREASE TBL SIZE 02MAR94
*--- FOR DEBUGGING:                                            02MAR94
*         - MAKE FOLLOWING INSTR AN 0C1 TO SEE TABLES          02MAR94
*           (IF YOU DONT, PROG ABENDS W/ 80A AND OLD TABLE     02MAR94
*            IS ALREADY FREEMAINED)                            02MAR94
*         - MAKE FOLLOWING INSTRUCTION A NOOP AND PROG WILL    02MAR94
*           RUN WITH DEFAULT TABLE SIZE. DATASETS OUT OF       02MAR94
*           TABLE SHOW AS BLANKS IN REPORT.                    02MAR94
         B     EODDSN2X            NORMAL PATH                 02MAR94
         MVI   2(R2),C'?'          SHOW ENTRY UNDEPENDABLE     02MAR94
         ST    R2,DSDSNTC          RE-USE LAST ENTRY           02MAR94
         B     EODDSNX             SIMULATE EOF                02MAR94
*       PRECEEDING CODE WILL CAUSE LAST TABLE ENTRY TO BE      02MAR94
*       USED OVER-AND-OVER AGAIN. SO THE DSNS FOR SEEKS WILL   02MAR94
*       BE INCORRECT.                                          02MAR94
EODDSN2X DS    0H                                              02MAR94
         L     R0,DSDSNTL          TRY AGAIN W/ DOUBLE TBL SIZ 15OCT79
         SLL   R0,1                                            15OCT79
         ST    R0,DSDSNTL                                      15OCT79
         B     EODDSN0             START OVER AGAIN            15OCT79
*                                                              15OCT79
**             SEE IF ANOTHER EXTENT                           15OCT79
*                                                              15OCT79
EODDSN3  DS    0H                                              15OCT79
         CLI   0(R5),0             NULL EXTENT?                15OCT79
         BNE   EODDSNNX            DO NEXT EXTENT              15OCT79
         B     EODDSNL             NO-GET NEXT D.S.            15OCT79
EODDSNEX LA    R5,DS1EXT1          EXECUTED INSTRS TO GET EXT  15OCT79
         LA    R5,DS1EXT2          DATASET EXTENT FIELD        15OCT79
         LA    R5,DS1EXT3          DATASET EXTENT FIELD        15OCT79
         LA    R5,DS3EXTNT+00      DATASET EXTENT FIELD        15OCT79
         LA    R5,DS3EXTNT+10      DATASET EXTENT FIELD        15OCT79
         LA    R5,DS3EXTNT+20      DATASET EXTENT FIELD        15OCT79
         LA    R5,DS3EXTNT+30      DATASET EXTENT FIELD        15OCT79
         LA    R5,DS3ADEXT+00      DATASET EXTENT FIELD        15OCT79
         LA    R5,DS3ADEXT+10      DATASET EXTENT FIELD        15OCT79
         LA    R5,DS3ADEXT+20      DATASET EXTENT FIELD        15OCT79
         LA    R5,DS3ADEXT+30      DATASET EXTENT FIELD        15OCT79
         LA    R5,DS3ADEXT+40      DATASET EXTENT FIELD        15OCT79
         LA    R5,DS3ADEXT+50      DATASET EXTENT FIELD        15OCT79
         LA    R5,DS3ADEXT+60      DATASET EXTENT FIELD        15OCT79
         LA    R5,DS3ADEXT+70      DATASET EXTENT FIELD        15OCT79
         LA    R5,DS3ADEXT+80      DATASET EXTENT FIELD        15OCT79
         LA    R5,=X'0000'         DUMMY UP 17TH EXTENT        15OCT79
EODDSNX  DS    0H                                              15OCT79
         CLC   VOLID,DVVOLI2       DONE WITH SECONDARY VOL?    06NOV84
         BE    EODDSNDX            YES-EXIT                    06NOV84
         CLI   DVVOLI2,0           IS THERE A SECONDARY VOL    06NOV84
         BE    EODDSNDX            NO-EXIT                     02MAR94
         MVC   VOLID,DVVOLI2       YES-RERUN W/ SECONDARY      06NOV84
         B     EODDSNVO                                        06NOV84
EODDSNDX DS    0H                                              15OCT79
**       FINISHED MAPPING PACK                                 15OCT79
*------------------------------------------------------------* 15OCT79
*        CALC AVG CYL SEEKED
         L     R1,DVTOTCYL         GET TOTAL CYL SEEKED
         L     R15,DVSIO0          GET GOOD SIOS
         BAL   R14,DIVIDER         TOT CYL / SIO 0
         ST    R1,DVAVGCYL         STORE AVG. CYL SEEKED
*        CALC AVG IO TIME IN MILLI-SEC
         L     R1,DVAVGIO          GET SUM OF IO TIME(TIMES 10)
         L     R15,DVSIO0          GET GOOD SIOS
         MH    R15,=H'10'          (TIMES 10) TO OFFSET IO TIME
         BAL   R14,DIVIDER         GET AVG. I/O TIME (IN MILLISEC)
         ST    R1,DVAVGIO          SAVE
         L     R1,DVMAXIO          GET LONGEST IO TIME
         LH    R15,=H'10'          GET 10 TO NORMALIZE
         BAL   R14,DIVIDER         GET LONGEST IO TIME IN MILLISEC
         ST    R1,DVMAXIO          SAVE IT
*        CALC AVG DEFERED TIME IN MS
         L     R1,DVDEFRIO         GET DEFERED IO TIME
         L     R15,DVSIO1          GET # OF DEFRS
         MH    R15,=H'10'          ADJUST FOR *10 FACTOR
         BAL   R14,DIVIDER         GET AVG DEFR TIME
         ST    R1,DVDEFRIO
*        CALC MAX DEFERED TIME IN MS
         L     R1,DVDEFRMX         GET DEFERED IO TIME
         LH    R15,=H'10'          ADJUST FOR *10 FACTOR
         BAL   R14,DIVIDER         GET AVG DEFR TIME
         ST    R1,DVDEFRMX
*        CALC AVG RESERVED TIME IN MS                          28OCT79
         L     R1,DVAVGRES         GET RESERVED IO TIME        28OCT79
         L     R15,DVRESV          GET # OF RESERVES           28OCT79
         MH    R15,=H'10'          ADJUST FOR *10 FACTOR       28OCT79
         BAL   R14,DIVIDER         GET AVG RESV TIME           28OCT79
         ST    R1,DVAVGRES                                     28OCT79
*        CALC  SIO0 RATE                                       06NOV84
         L     R1,DVSIO0           GET GOOD SIOS               06NOV84
         MH    R1,=H'10'           TIMES 10 FOR PRECISION      06NOV84
         L     R15,TOTTM           GET RUN TIME                06NOV84
         BAL   R14,DIVIDER         GET RATE IO/SEC *10         06NOV84
         ST    R1,DVSIO0R          SAVE RATE                   06NOV84
*        SET UP TO NORMALIZE COUNTS IN XREF ARRAY
         LH    R2,DVSLOTS          GET # OF SLOTS TO MAP PACK
         MH    R2,DVSLOTS          SQUARE IT FOR # OF ARRAY ENTRIES
         CLI   PRTOPT,C'H'         HISTOGRAM
         BNE   EODNHIST            NO
         LH    R2,MAXCYL           YES-1 ENTRY/CYL
EODNHIST DS    0H
         XR    R3,R3               CLEAR
         LA    R4,DVXREF           GET START OF ARRAY
EODMAX   DS    0H                  LOOK FOR HIGHEST ENTRY
         C     R3,0(R4)            COMPARE AGAINST CURRENT
         BH    *+8                 NOT A NEW HIGH
         L     R3,0(R4)            NEW-HIGH - PICK UP
         LA    R4,4(R4)            BUMP TO NEXT ENTRY
         BCT   R2,EODMAX           LOOP
         ST    R3,DVMAXHIT         SAVE HIGHEST HIT PT.
         CLI   PRTOPT,C'H'         HISTOGRAM PRINT
         BE    EODMAXOK            YES-DONT HORMALIZE
         C     R3,EODOVFLO         WOULD MAX OVERFLOW A PRT ENTRY
         BL    EODMAXOK            NO-NO NEED TO NORMALIZE
         LH    R2,DVSLOTS          GET SLOTS AGAIN
         MH    R2,DVSLOTS          SQUARE TO GET ARRAY SIZE
         LA    R4,DVXREF           START OF ARRAY
         LR    R14,R3              SAVE MAX HIT POINT SIZE
         SRL   R14,1               1/2
EODNORM  DS    0H                  NORMALIZE WHOLE ARRAY TO PRT SIZE
         XR    R0,R0               CLEAR
         L     R1,0(R4)            GET ENTRIES NUMBER
         M     R0,EODOVFLO         X 999 - PRT ELEMENT SIZE
         ALR   R1,R14              ADD FOR HALF ADJUST
         BC    8+4,*+8             DID OVERFLOW OCCUR
         AH    R0,=H'1'            YES-BUMP 1ST REG
         DR    R0,R3               GET NORMALIZED SIZE
         ST    R1,0(R4)            STORE NORMALIZED ENTRY
         LA    R4,4(R4)            BUMP TO NEXT ARRAY ELEMENT
         BCT   R2,EODNORM          LOOP
EODMAXOK DS    0H
*        CALC JOB AVGS
         LA    R2,JT#              GET # OF JOBS
EODJTAVG DS    0H
         LA    R3,JT#              GET # OF JOBS
         SR    R3,R2               GET INDEX FROM 0,1,2...
         SLL   R3,2                4 BYTES PER COUNTER
*        AVG DEFER TIME BY JOB
         L     R1,DVJTDFRT(R3)     GET THIS JOB
         L     R15,DVJTSIO1(R3)    GET # OF DEFERS
         MH    R15,=H'10'          ADJUST FOR *10
         BAL   R14,DIVIDER         DIVIDE/ROUND
         ST    R1,DVJTDFRT(R3)     STORE
*        AVG I/O TIME FOR A JOB
         L     R1,DVJTIOTM(R3)     GET THIS JOB
         L     R15,DVJTSIO0(R3)    GET # OF IOS
         MH    R15,=H'10'          ADJUST FOR *10
         BAL   R14,DIVIDER         DIVIDE/ROUND
         ST    R1,DVJTIOTM(R3)     STORE
*        AVG SEEK FOR A JOB
         L     R1,DVJTSEEK(R3)     GET CYLS SEEKED
         L     R15,DVJTSIO0(R3)    GET IOS
         BAL   R14,DIVIDER         DIVIDE
         ST    R1,DVJTSEEK(R3)     STORE AVG CYL
         BCT   R2,EODJTAVG         RE-DO AVGS FOR NEXT JOB
*        SETUP HDR
         LA    R1,HDR1             GET HEADER
         MVC   HDRUCB,DVUCB        SET UCB ADDR IN HDR
         MVC   HDRTYPE,DVTYPE      SET TYPE (3330)
         MVC   HDRVOLI,DVVOLI      SET VOLID
*              XLATE UCBSTAB                                   28OCT79
         MVC   HDRSTAB,=CL4'PRIV'                              28OCT79
         TM    DVSTAB,UCBBPRV      PRIVATE                     28OCT79
         BO    EODPUTDD            YES-TEST DUAL DENS          06NOV84
*                                                              28OCT79
         MVC   HDRSTAB,=CL4'STOR'                              28OCT79
         TM    DVSTAB,UCBBSTR      STORAGE                     28OCT79
         BO    EODPUTDD            YES-TEST DUAL DENS          06NOV84
*                                                              28OCT79
         MVC   HDRSTAB,=CL4'PUB '                              28OCT79
         TM    DVSTAB,UCBBPUB      PUBLIC                      28OCT79
         BO    EODPUTDD            YES-TEST DUAL DENS          06NOV84
EODPUTDD DS    0H                                              06NOV84
         TM    DVFLAG1,DVF1DD      DUAL DENSITY                06NOV84
         BZ    EODPUTHD            NO-PRINT HEADER             06NOV84
         MVC   HDRVOLI2,DVVOLI2    SET VOLID SECONDARY VOLSER  06NOV84
         MVC   HDRVOL2X,=C'(-)'    SHOW MINUS                  06NOV84
*              XLATE UCBSTAB                                   06NOV84
         MVC   HDRSTAB2,=CL4'PRIV'                             06NOV84
         TM    DVSTAB2,UCBBPRV     PRIVATE                     06NOV84
         BO    EODPUTHD            YES-PRINT HDR               06NOV84
*                                                              06NOV84
         MVC   HDRSTAB2,=CL4'STOR'                             06NOV84
         TM    DVSTAB2,UCBBSTR     STORAGE                     06NOV84
         BO    EODPUTHD            YES-PRINT HDR               06NOV84
*                                                              06NOV84
         MVC   HDRSTAB2,=CL4'PUB '                             06NOV84
         TM    DVSTAB2,UCBBPUB     PUBLIC                      06NOV84
         BO    EODPUTHD            YES-PRINT HDR               06NOV84
EODPUTHD DS    0H                                              28OCT79
         BAL   R14,PUT             SKIP TO CH 1
         LA    R0,(DVSIO1XE-DVSIO1XS)/(DVSIO1XL) # ENTRIES
         LA    R14,DVSIO1XS        START
         LA    R15,EODSIO1S        MODIFY HEADERS WITH PRINTABLE HEX
EODXCONV DS    0H
         UNPK  5(5,R15),DVSIO1XS-DVSIO1XS(L'DVSIO1XS+1,R14) 0-F=F0-FF
         MVI   9(R15),C' '         BLANK LAST BYTE
         TR    5(4,R15),TRTAB-240  XLATE TO PRINTABLE
         LA    R14,DVSIO1XL(R14)   NEXT ENTRY
         LA    R15,(EODCNT1-EODCNTS)(R15) NEXT HEADER
         BCT   R0,EODXCONV
         LA    R2,(EODCNTE-EODCNTS)/(EODCNT1-EODCNTS)  GET # TOTS
         LA    R3,EODCNTS          GET START OF DEV. TOTS
         BAL   R14,CLRPL           BLANK PRINT LINE
         L     R1,@PL              GET PRINT LINE
         MVI   0(R1),C'0'          DBL SPACE
         ST    R11,UTEODBAS        STORE BASING FOR TABLE
         BAL   R14,UTEODB          FORMAT DATA
         BAL   R14,CLRPL           CLEAR PRINT LINE
         L     R1,@PL              GET PRINT LINE
         CLI   PRTOPT,C'H'         HISTOGRAM
         BE    EODPRTHS            YES-GOTO SUBROUTINE
         MVC   0(L'HDR2,R1),HDR2   GET 2ND HEADER
         BAL   R14,PUT             PRINT IT
         BAL   R14,CLRPL           CLEAR PRINT
         L     R1,@PL              GET PRINT LINE
         MVC   1(9,R1),=C'    TRACK' SET UP ARRAY LINES
         LH    R2,DVSLOTS          GET # OF PRINT SLOTS
         LR    R5,R1               GET ADDR OF PRINT LINE
         AH    R5,LINEOFST         BUMP TO START OF ARRAY DATA
EODHDR2  DS    0H                  DISPLAY SLOT # IN HDR
         LR    R0,R2               GET COUNT DOWN CTR
         SH    R0,DVSLOTS          SUBTRACT MAX. (0,-1,-2,..MAX)
         CVD   R0,WD               MAKE PACKED
         MVC   WE,MASK             SET MASK
         ED    WE,WD+2             EDIT IT IN (NO SIGN DISPLAYED)
         EX    0,EXMVC             MOVE IT IN PRINT LINE
         AH    R5,STMAXDSP         NEXT SLOT ADDR IN PRT LINE
         BCT   R2,EODHDR2          LOOP
         BAL   R14,PUT             PRINT ARRAY HEADER
         BAL   R14,CLRPL           CLEAR PRINT LINE
         L     R1,@PL              GET PRT LINE ADDR
         BAL   R14,PUT             PRINT A BLANK LINE
         LA    R4,DVXREF           GET START OF ARRAY
         LH    R3,DVSLOTS          GET # OF SLOTS
EODNXT   DS    0H                  PRINT A ROW OF DEV ARRAY
         LR    R0,R3               GET CURRENT DOWN CTR
         SH    R0,DVSLOTS          - MAX = NEG SLOT #
         CVD   R0,WD               PACKED
         L     R1,@PL              GET PRINT LINE
         MVC   PLSLOT(,R1),=X'40212020' SET EDIT MASK
         ED    PLSLOT(,R1),WD+6    SET SLOT # (NO SIGN SHOWN)
         MH    R0,DVDELTA          GET # OF CYLS IN A SLOT
         MH    R0,DVTRK            * # OF TRK IN A CYL
         CVD   R0,WD               MAKE PACKED
         MVC   PLTRACK(6,R1),=X'402021202020' SET EDIT MASK
         ED    PLTRACK(6,R1),WD+5  EDIT STARTING TRACK # IN
         LR    R5,R1               GET START OF PRINT LINE
         AH    R5,LINEOFST         ADD OFFSET TO START OF ARRAY DATA
         LH    R2,DVSLOTS          GET # OF SLOTS ON PRT LINE
EODROW   DS    0H                  RUN THRU ALL COL. IN A ROW
         L     R0,0(R4)            GET COUNTER
         LTR   R0,R0               IS COUNT ZERO
         BZ    EODZERO             YES-SPECIAL CASE
         CVD   R0,WD               NO-MAKE PACKED
         MVC   WE,MASK             SET EDIT MASK
         ED    WE,WD+2             EDIT IT IN
EODMVC   DS    0H                  MOVE COUNT FROM WORK AREA
         EX    0,EXMVC             MOVE SPECIFIED DIGITS IN
EODBUMP  DS    0H                  NEXT COL. IN A ROW
         LA    R4,4(R4)            BUMP TO NEXT CTR
         AH    R5,STMAXDSP         BUMP SLOT ADDR IN PRT LINE
         BCT   R2,EODROW           NEXT COLUMN IN ROW
         L     R1,@PL              GET PRT LINE
         BAL   R14,PUT             PRINT WHOLE ROW
         BCT   R3,EODNXT           LOOP FOR NEXT ROW
         B     EODJPRNT            PRINT JOB INTERFERENCE RPT
**       PRINT SEEK ADDRESSES IN HISTOGRAM FORMAT
EODPRTHS DS    0H
         LH    R3,MAXCYL           SET UP LOOP FOR EACH CYLINDER
         LA    R4,DVXREF           CYL ZERO CTR
         BAL   R14,CLRPL           CLEAR PRINTLINE
         XC    DSCUMIO,DSCUMIO     CLEAR CUMULATIVE IO CTR     06NOV84
         L     R1,@PL
         MVC   0(33,R1),=C'0   TRACK E CUM_I/O  DATASET_NAME'  06NOV84
         MVI   PLEXTNT(R1),C'X'    EXTENT ID                   06NOV84
         BAL   R14,PUT
         BAL   R14,CLRPL           CLEAR LINE                  15OCT79
EODRNXH  DS    0H
         CLC   =F'0',0(R4)         NULL CTR?
         BE    EODRNXCY            YES-NEXT CYLINDER
         L     R1,@PL
         LR    R0,R3               GET COUNT DOWN CTR
         SH    R0,MAXCYL           TURN IT INTO COUNT UP (NEG
         MH    R0,DVTRK            CALC STARTING TRACK #
         LPR   R2,R0               SAVE REL. TRK #  (POSITIVE  15OCT79
         LR    R0,R2               SAVE REL. TRK #  (POSITIVE  06NOV84
         TM    DVFLAG1,DVF1DD      DUAL DENSITY                06NOV84
         BZ    EODRNXT             NO-CONTINUE                 06NOV84
         LH    R14,DVCYL           GET DEV. MAX CYL            06NOV84
         SRL   R14,1               1/2                         06NOV84
         MH    R14,DVTRK           *TRKS/CYL                   06NOV84
         SR    R0,R14              GET (-/+) CYL OFFSET        06NOV84
         BP    EODRNXT             PRIMARY VOLUME              06NOV84
         AH    R0,DVTRK            START SECONDARY AT "0-"     06NOV84
         MVI   PLCYLERR(R1),C'-'   SHOW SECONDARY              06NOV84
         LPR   R0,R0               GET POSITIVE TRK            06NOV84
EODRNXT  DS    0H                                              06NOV84
         CVD   R0,WD               PRINT IT
         MVC   PLTRACK(L'PLTRACK,R1),=X'40202120202020' MASK   06NOV84
         ED    PLTRACK(L'PLTRACK,R1),WD+5 TRACK OFFSET         06NOV84
*                                                              15OCT79
**       GET DSN OF D.S. ON 1ST TRACK OF CYL                   15OCT79
*                                                              15OCT79
         SLL   R2,1                *2 - 2BYTE TABLE ENTRY      15OCT79
         A     R2,DVDSNO           DVDSNO IS A TABLE OF        15OCT79
*                                  OFFSETS -2BYTES FOR EVERY   15OCT79
*                                  TRACK ON PACK.              15OCT79
         XR    R14,R14                                         15OCT79
         ICM   R14,3,0(R2)         GET OFFSET INTO DVDSNT      15OCT79
         BZ    EODRNXH1            NO OFFSET - LEAVE BLANK     15OCT79
         A     R14,DVDSNT          ADD TO BASE TO GET DSN ENT. 15OCT79
*                                  A DSN ENTRY IS:             15OCT79
*                                   1BYTE TRUE LENGTH OF DSN   15OCT79
*                                   VAR. BYTE DSN              15OCT79
         L     R1,@PL              GET PRINTLINE               15OCT79
         MVC   PLEXTNT(1,R1),1(R14) MOVE EXTENT ID BLANK,1-F   15OCT79
         XR    R1,R1                                           15OCT79
         IC    R1,0(R14)           GET DSN LENGTH              15OCT79
         LA    R0,2(R14)           GET DSN ADDR                15OCT79
         L     R14,@PL             GET PRINT LINE              15OCT79
         LA    R14,PLDSN(R14)      SKIP TO DSN ADDR            15OCT79
         LR    R15,R1              COPY LENGTH OF DSN          15OCT79
         MVCL  R14,R0              MOVE DSN IN                 15OCT79
EODRNXH1 DS    0H                                              15OCT79
*                                                              15OCT79
**             SEE IF D.S. TAKES   WHOLE CYLINDER              15OCT79
*                                                              15OCT79
         LH    R0,DVTRK            TRKS/CYL                    15OCT79
         ICM   R1,3,0(R2)          GET OFFSET FOR 1ST TRK D.S  15OCT79
EODRNXCK DS    0H                  MAKE SURE ALL TRKS ON CYL   15OCT79
         CLM   R1,3,0(R2)           HAVE SAME OFFSET OR ZERO   15OCT79
         BNE   EODRNXCB            NO-MARK MULTI-D.S. CYL      15OCT79
EODRNXCL DS    0H                  RESTART POINT IF NO D.S.    15OCT79
         LA    R2,2(R2)            NEXT TRACK DSN OFFSET       15OCT79
         BCT   R0,EODRNXCK         LOOP THRU CYLINDER          15OCT79
         B     EODRNXCX            ALL TRACK HAVE SAME D.S.    15OCT79
EODRNXCB DS    0H                                              15OCT79
         OC    0(2,R2),0(R2)       FREE TRACK?                 15OCT79
         BZ    EODRNXCL            DONT MARK-D.S. IS ONLY USR  15OCT79
         L     R1,@PL              PRINT LINE                  15OCT79
         MVI   PLCYLERR(R1),C'$'   SHOW MULTI-D.S. CYL         15OCT79
EODRNXCX DS    0H                  DONE                        15OCT79
*              SHOW CUMULATIVE IOS                             06NOV84
         L     R1,@PL              GET PRINT LINE              06NOV84
         L     R0,DSCUMIO          GET IO HITS SO FAR          06NOV84
         A     R0,0(R4)             PLUS THIS CYL              06NOV84
         ST    R0,DSCUMIO            SAVE                      06NOV84
         CVD   R0,WD               MAKE PRINTABLE              06NOV84
         MVC   PLCUMIO(L'PLCUMIO,R1),=X'4020202020202120'      06NOV84
         ED    PLCUMIO(L'PLCUMIO,R1),WD+4                      06NOV84
*                                                              06NOV84
         L     R1,0(R4)            GET CYL COUNT
         LH    R0,LINESIZE         CALC # OF AVALIABLE PRINT POS.
         SH    R0,LINEOFST         # = LINESIZE-STARTING OFFSET
         STH   R0,WD
         MH    R1,WD               R1=(SEEK COUNT)*(MAX PRINT POS.)
         L     R15,DVMAXHIT        HIGHEST SEEK COUNT FOR THIS PACK
         BAL   R14,DIVIDER
*        R1=# OF ASTERISKS FOR NORMALIZED COUNTER
**       NOW MOVE ASTERISKS INTO PRINT LINE
         XR    R15,R15             FROM LEN=0
         ICM   R15,8,=C'*'         FILL CHAR=C'*'
         XR    R14,R14             FROM ADDR=0
         L     R0,@PL              TO ADDR
         AH    R0,LINEOFST         "
         MVCL  R0,R14              INSERT ASTERISKS
         L     R1,@PL
         BAL   R14,PUT
         BAL   R14,CLRPL           BLANK PRINT LINE
EODRNXCY DS    0H
         LA    R4,4(R4)            NEXT CYL CTR
         BCT   R3,EODRNXH          LOOP THRU ALL CYLINDERS
EODJPRNT DS    0H
*        PRINT JOB TOTALS FOR A DEVICE
         LA    R6,JTPRT2#          GET NUMBER OF JOB LINES
         LA    R4,DVJTXREF         GET START OF ARRAY
         BAL   R14,CLRPL           CLEAR PRINT LINE
         L     R1,@PL              GET PRT LINE ADDR
         BAL   R14,PUT             PRINT IT
*        PUT   JOBNAMES IN COLUMNS                             06NOV84
         LA    R2,JT#              GET # JOBNAMES              06NOV84
         LA    R14,JOBS            START OF TABLE              06NOV84
         L     R1,@PL              PRINT LINE                  06NOV84
         LA    R5,PLJSTART(R1)     START OF ARRAY IN PRT LINE  06NOV84
EODJTIT  DS    0H                  NEXT TITLE JOBNAME          06NOV84
         MVC   0(L'JOBSNAM,R5),(JOBSNAM-JOBS)(R14) COL TITLES  06NOV84
         LA    R14,JOB1-JOBS(R14)  NEXT JOBNAME                06NOV84
         AH    R5,STJOBDSP         NEXT COLUMN                 06NOV84
         BCT   R2,EODJTIT           DOIT                       06NOV84
         BAL   R14,PUT             PRINT IT                    06NOV84
EODJNXT  DS    0H                  PRT JOB + NAMES WHO HELD HIM UP
         BAL   R14,CLRPL           CLEAR PRINT LINE
         L     R1,@PL              GET PRT LINE ADDR
         LA    R14,JTPRT2#         GET # OF JOB LINES
         SR    R14,R6              GET INDEX TO CURRENT JOB
         MH    R14,=AL2(JOB1-JOBS) GET OFFSET TO ROW LIT.
         LA    R14,JOBS(R14)       + BASE ADDR = START OF LIT.
         MVC   PLJNAM(L'JOBSNAM,R1),(JOBSNAM-JOBS)(R14) NAME   06NOV84
         LA    R5,PLJSTART(R1)     GET START OF ARRAY IN PRT LINE
         LA    R2,JT#              GET # OF JOBS MONITORED
EODJROW  DS    0H                  PRINT A ROW
         L     R0,0(R4)            GET INTERFERENCE COUNT
         CVD   R0,WD               MAKE PACKED
         MVC   WE,MASK             SET EDIT MASK
         ED    WE,WD+2             EDIT IT
         EX    0,EXMVC3            MOVE DATA INTO PRT LINE
         LA    R4,4(R4)            NEXT CTR
         AH    R5,STJOBDSP         NEXT SLOT IN PRT LINE
         BCT   R2,EODJROW          GET NEXT COLUMN
         BAL   R14,PUT             PRINT A ROW
         BCT   R6,EODJNXT          NEXT JOB
         B     EODLOOP             NEXT DASD DEVICE
EODZERO  DS    0H                  SPECIAL CASE OF DASD SIO ZERO
         CR    R2,R3               IS ZERO ON DIAGONAL
         BE    EODPLUS             YES - MARK DIAGONAL W/ +
         MVC   WE,=C'           .' ELSE MARK NULLS W/ PERIODS
*        IDEA IS TO MAKE COLUMNS HAVE PERIODS DOWN THEM
*         AND DIAGONAL TO HAVE PLUSES.
         B     EODMVC              MOVE DATA IN PRT LINE
EODPLUS  DS    0H                  SET DATA TO PLUS
         MVC   WE,=C'           +' SET WORK AREA TO PLUS
         B     EODMVC              MOVE DATA IN PRT LINE
EODJOB   DS    0H                  EOJ
         NOPR  0            TEST   MAKE A DC H'0' FOR DUMP
         LA    R15,0               SET RC
*        SOMEDAY IM GOING TO CLOSE FILES AND FREE GOTTEN CORE
         @RET  EQ,RC=0,FREE=NO     RETURN TO O/S
         POP   USING               GO BACK TO NORMAL           15OCT79
         TITLE 'C O M M O N   U T I L I T I E S '
UTSUBS   DS    0D
*************************************************************
*         LOCATE DEVICE ENTRY FROM CHAN. ADDR
*************************************************************
**INPUT: R11=X'00000CUU' ADDRESS/XA:DEVICE #
**OUTPUT:R11=UCB ADDR IF UTGETUCB ENTRY
**       R11=UCB ADDR IF UTGET    ENTRY
**WORK:  R15,R0-R3
**RETURN:R14+0=NOT FOUND, R14+4=FOUND
*************************************************************
UTGETUCB DS    0H                  ONLY GET UCB ADDR
         MVI   DSAUCBO,C'Y'            Y=ONLY GET UCB ADR      20SEP84
         B     UTGETC                  CONTINUE                20SEP84
UTGET    DS    0H                  ENTRY
         MVI   DSAUCBO,C'N'            N=GET DEVICE ENTRY-R11  20SEP84
UTGETC   DS    0H                  CONTINUE
         ST    R14,UTGETSAV        SAVE RETURN
         LR    R14,R11             COPY ADDR
         SRDL  R14,8               PUT CU/DEV ADDR IN R15
         SRL   R15,28              PUT CU/DEV IN LOW END
         L     R1,CVTPTR           CVT
         CLI   DSAXA,DSAXAYES          XA?                     20SEP84
         BE    UTGETXA                 YES-GOTO XA ROUTINE     20SEP84
*                                                              15OCT79
**       THIS CODE GOTTEN FROM IECIOSCN                        15OCT79
*                                                              15OCT79
         L     R1,CVTILK1(R1)      LOOKUP 1
         XR    R3,R3               CLEAR
         IC    R3,0(R14,R1)        GET CHANNEL INDEX
         ALR   R15,R3              ADD CU/DEV
         ALR   R15,R15             TIMES 2
         LR    R3,R11              GET A FRESH COPY OF ADDR
         N     R3,=F'15'           MASK OFF CHAN/CU
         AH    R3,0(R15,R1)        ADD DEVICE INDEX
         ALR   R3,R3               DOUBLE
         L     R1,CVTPTR           CVT
         L     R1,CVTILK2(R1)      LOOKUP 2
         LH    R14,0(R1,R3)        GET UCB ADDR
         N     R14,=X'0000FFFF'    MASK OFF IF OVER 32K
         LR    R11,R14             COPY TO OUTPUT REG
UTGETXAC DS    0H                      XA-CONTINUE POINT       20SEP84
         L     R1,UTGETSAV         GET RETURN ADDR
         LTR   R11,R11             UCB HOLE ENTRY?
         BZR   R1                  YES-RET +0 - UCB NOT FOUND
         CLI   UCBDVCLS(R11),X'20' DASD DEVICE RECORD          15OCT79
         BNER  R1                  NO-RETURN +0 N.F.           15OCT79
         TM    UCBSTAT(R11),X'80'  DASD ONLINE                 15OCT79
         BO    UTGEND1             YES-CONTINUE                15OCT79
         BR    R1                  LET THRU                    15OCT79
******** ***** *********************** *********************** 20SEP84
******** ***** *********************** *********************** 20SEP84
UTGETXA  DS    0H                      XAXAXAXAXAXAXAXAXAXAXA  20SEP84
*                                                              20SEP84
**             CANT USE MACRO SINCE SUPERVISOR TEST IMBEDDED   20SEP84
*                                                              20SEP84
*        IOSLOOK UCB=(R2),DEV=(R11)     RC=0=OK, 4=INVALID
IECIUPRM EQU   1                   PARM REG - UCB RETURNED
IECIUDEV EQU   6                   DEVICE ADDRESS
IECIUSAV EQU   13                  SAVE AREA PTR
IECIURTN EQU   14                  RETURN ADDRESS
IECIUR15 EQU   15                  BRANCH ADDR AND RETURN CODE
         MVC   DSAPREFX,0(R13)         SAVE SAVEAREA PREFIX    20SEP84
         STM   0,15,0(IECIUSAV)               SAVE REGS
         LR    IECIUDEV,R11                   GET DEVICE ADDR
*                                             *FROM CALLER
         L     IECIUR15,CVTPTR                GET CVTPTR
         L     IECIUR15,CVTIXAVL-CVT(0,IECIUR15) GET IOCM PTR
         L     IECIUR15,IOCGENA-IOCOM(0,IECIUR15) GET IECVGENA PTR
*        BAL   IECIURTN,12(0,IECIUR15)         CALL IECVGENA
         L     R0,12(0,IECIUR15)       GET BRANCH INSTR        20SEP84
         N     R0,=X'00000FFF'         GET OFFSET              20SEP84
         LR    R14,R15                 COPY IECVGENA BASE      20SEP84
         AR    R14,R0                  ADD OFFSET              20SEP84
         XR    R2,R2                   WORK REG                20SEP84
*SOME ASS PUT A SUPERVISOR INSTRUCTION IN THE CODE JUST TO     20SEP84
*        TRIP UP MORTAL CALLERS, SO SKIP IT!                   20SEP84
         LA    R0,8                    TRY TO SKIP SUPVR TEST  20SEP84
UTGETXAS DS    0H                                              20SEP84
         CLI   0(R14),X'18'            LR INSTR AFTER TEST?    20SEP84
         BE    CALLGENA                YES-GO                  20SEP84
         LA    R14,2(R14)              NEXT INSTR SLOT         20SEP84
         BCT   R0,UTGETXAS             TRY AGAIN               20SEP84
         WTO   'IECVGENA CODE BYPASS FAILED',ROUTCDE=(11)      20SEP84
         ABEND 123                     RATS                    20SEP84
CALLGENA BALR  R14,R14                 GO TO IOSVLOOK          20SEP84
         ST    IECIUPRM,(R11)*4(0,IECIUSAV) SET UCB ADDR RETND
*                                       IN SAVEAREA REGISTER
IECIU003 LM    0,14,0(IECIUSAV)               RESTORE REGS
         MVC   0(12,R13),DSAPREFX      RESTORE SAVE PREFIX     20SEP84
         B     UTGETXAC                GOTO COMMON CODE        30APR84
******** ***** *********************** *********************** 20SEP84
ABEND5   DS    0H                                              15OCT79
         WTO   'TSGTFMAP-GTF RECORD FOR OFFLINE DASD',ROUTCDE=(11)
         ABEND 5,DUMP                                          15OCT79
UTGEND1  DS    0H                  UCB LOCATED IN R11
         CLI   DSAUCBO,C'Y'            ONLY GET UCB?           20SEP84
         BE    4(R1)                   YES-EXIT W/ R11=UCB     20SEP84
         L     R14,DVVROOT         GET START OF VECTOR TABLE
         USING DVVTAB,R14          TELL ASM
UTGLOOP  DS    0H                  FIND SAME UCB PTR
         CLI   0(R14),X'FF'        END OF VECTOR TABLE
         BER   R1                  YES-RETURN?????
         C     R11,DVVUCB          FIND SAME UCB PTR
         BE    UTGFND              FOUND
         LA    R14,DVVSIZ(R14)     BUMP TO NEXT VECTOR ENTRY
         B     UTGLOOP             TRY AGAIN
UTGFND   DS    0H                  FOUND IT
         L     R11,DVVPTR          GET PTR TO DEVICE TABLE
         B     4(R1)               RETURN +4 = GOOD DEV
         DROP  R14                     TELL ASM                20SEP84
******** CALC DEFERED TIME
UTDEFR   DS    0H                  CALC DEFER TIME
         ST    R14,UTDEFRSV        SAVE RETURN
         OC    DVDEFRTM,DVDEFRTM   WAS THERE A BUSY BEFORE
         BZ    UTDEFRET            NO-NEXT PHASE
         LM    R2,R3,DVDEFRTM      GET TIME OF SIO-BUSY
         ICM   R0,15,GTTIME        GET I/O INTERRUPT TIME
         ICM   R1,15,GTTIME+4      GET I/O INTERRUPT TIME
         BAL   R14,UTTIMDIF        GO CALC DIF IN MILLISEC*10
         C     R1,DVDEFRMX         COMPARE TO MAX SO FAR
         BL    *+8                 LO-SKIP UPDATE
         ST    R1,DVDEFRMX         STORE NEW LIMIT
         LR    R0,R1               SAVE DEFER
         AL    R1,DVDEFRIO         ADD TO DEFER TIME SO FAR
         ST    R1,DVDEFRIO         STORE
         LH    R15,DVLJOBI         GET INDEX TO LAST SIO JOB
         AL    R0,DVJTDFRT(R15)    ADD TO TOTAL DEFER TIME
         ST    R0,DVJTDFRT(R15)    STORE
         XC    DVDEFRTM,DVDEFRTM   RESET LAST BUSY TIME
UTDEFRET DS    0H                  RETURN
         L     R14,UTDEFRSV        GET RETURN
         BR    R14                 RETURN
******** DEV RESERVE TIME                                      28OCT79
UTRESV   DS    0H                                              28OCT79
         ST    R14,UTDEFRSV        SAVE RETURN                 28OCT79
         OC    DVLRESTM,DVLRESTM   WAS THERE A RESERVE BEFORE  28OCT79
         BZ    UTRESRET            NO-STRANGE (MAYBE STARTUP   28OCT79
         LM    R2,R3,DVLRESTM      GET TIME OF RESERVE         28OCT79
         ICM   R0,15,GTTIME        GET I/O INTERRUPT TIME      28OCT79
         ICM   R1,15,GTTIME+4      GET I/O INTERRUPT TIME      28OCT79
         BAL   R14,UTTIMDIF        GO CALC DIF IN MILLISEC*10  28OCT79
         AL    R1,DVAVGRES         ADD TO RESERVE TIME SO FAR  28OCT79
         ST    R1,DVAVGRES         STORE                       28OCT79
UTRESRET DS    0H                  RETURN                      28OCT79
         L     R14,UTDEFRSV        GET RETURN                  28OCT79
         BR    R14                 RETURN                      28OCT79
*                                                              06NOV84
******** SEE IF ADDR IN R11 IS A DUAL DENSITY DISK             06NOV84
*                                                              06NOV84
UTDDTST  DS    0H                  SEE IF DUAL DENSITY ADDR    06NOV84
         ST    R11,WD              SAVE ADDR                   06NOV84
         STCM  R14,7,WD+5          SAVE RETURN                 06NOV84
         LA    R14,DDMAP           GET LIST OF DUAL VOLUME AD  06NOV84
         SRL   R11,4               GET CHAN,CU ADDR IN A BYTE  06NOV84
         STC   R11,WD+4            SAVE IT                     06NOV84
UTDDLOOP DS    0H                                              06NOV84
         CLC   WD+4(1),0(R14)      HIT?                        06NOV84
         BE    UTDDHIT             YES                         06NOV84
         BL    UTDDMISS            TABLE IN SEQUENCE,NO HIT    06NOV84
         LA    R14,1(R14)          NEXT CHAN,CUA               06NOV84
         B     UTDDLOOP            LOOP                        06NOV84
UTDDHIT  DS    0H                                              06NOV84
         L     R11,WD              RESTORE                     06NOV84
         ICM   R14,7,WD+5                                      06NOV84
         B     4(R14)              RETURN +4 = HIT(DUAL DENS)  06NOV84
UTDDMISS DS    0H                                              06NOV84
         L     R11,WD              RESTORE                     06NOV84
         L     R14,WD+4                                        06NOV84
         BR    R14                 RETURN +0 = NOHIT           06NOV84
*                                                              06NOV84
******** CLEAR PRINT LINE TO BLANKS
*                                                              06NOV84
CLRPL    DS    0H                  CLEAR PRINT LINE
         L     R0,@PL              ADDR OF PRT LINE
         LH    R1,LINESIZE         GET LINE SIZE
         L     R15,=X'40000000'    SET FILL CHAR TO BLANK
         MVCL  R0,R14              MOVE BLANKS IN
         BR    R14                 RETURN
*                                                              06NOV84
******** FIND JOB INDEX FOR A GTF RECORD
*                                                              06NOV84
UTFNDJOB DS    0H                  FIND A JOB INDEX
         LA    R3,JOBS             GET JOB NAME TABLE
         LA    R2,JT#              GET # OF ENTRIES
         XR    R15,R15             CLEAR
UTFNDJB  DS    0H                  LOCATE JOB WHO CAUSED PROBLEM
         IC    R15,JOBS#CHR-JOBS(R3)  GET L'-1 OF JOBNAME
         EX    R15,UTFNDCLC        FOUND JOBNAME?
         BE    UTFNDSIO            YES
         LA    R3,(JOB1-JOBS)(R3)  NO - BUMP TO NEXT
         BCT   R2,UTFNDJB          LOOP
         SH    R3,=AL2(JOB1-JOBS)  NOT FOUND - BACK UP 1 ENTRY
         LA    R2,1                ADJUST LOOP REG
UTFNDSIO DS    0H                  NOW UPDATE ARRAY ENTRY
         LA    R0,JT#              MAX JOBNAMES
         SR    R0,R2                -LOOP REG = JOB #
         SLL   R0,2                EACH COUNTER IS 4 BYTES
         STH   R0,DVCJOBI          STORE AS CURRENT JOB INDEX
         BR    R14                 RETURN
UTFNDCLC CLC   JOBSNAM-JOBS(0,R3),GTJOB
*        DISPLAY BINARY TOTALS FROM TABLE
UTEODB   DS    0H                  PRINT DEVICE TOTS
         ST    R14,UTEODSAV        SAVE RETURN
UTEODB2  DS    0H
         L     R1,@PL              GET ADDR OF PRINT LINE
         LH    R14,L'EODCNTS(R3)   GET OFFSET TO TOT CTR.
         A     R14,UTEODBAS        GET ADDR OF CTR
         L     R14,0(R14)          GET CTR
         CVD   R14,WD              MAKE PACKED
         MVC   1+L'MASK2+1(L'EODCNTS,R1),0(R3) MOVE TOT NAME   06NOV84
         MVC   1(L'MASK2,R1),MASK2 MOVE EDIT MASK
         CLI   1+L'MASK2+1+L'EODCNTS-1(R1),C'$' SPECIAL EDIT   06NOV84
         BNE   UTEODB3             NO                          06NOV84
         MVI   1+L'MASK2+1+L'EODCNTS-1(R1),C' ' CLEAR ID       06NOV84
         MVC   1(L'MASK2,R1),MASK3 MOVE EDIT MASK              06NOV84
UTEODB3  DS    0H                                              06NOV84
         ED    1(L'MASK2,R1),WD+4  EDIT TOT IN
         MVI   1+L'MASK2(R1),C'='  SET =
         BAL   R14,PUT             PRINT DEV TOTAL
         BAL   R14,CLRPL           CLEAR AND SET SINGLE SPACE
         LA    R3,L'EODCNTS+2(R3)  BUMP TO NEXT TOT DESC. SET
         BCT   R2,UTEODB2          LOOP
         L     R14,UTEODSAV        RESTORE SAVE
         BR    R14                 RETURN
*                                                              DDMMM84
******** CLEAR A SECTION OF CORE
*                                                              DDMMM84
CLRIT    DS    0H                  CLEAR
         XR    R0,R1               SWAP REGS 1 AND 0
         XR    R1,R0               "
         XR    R0,R1               "
         XR    R15,R15             CLEAR R15
         MVCL  R0,R14              PAD WHOLE THING W/ ZEROS
         BR    R14                 RETURN
*                                                              DDMMM84
******** DISPLAY PACKED TOTALS FROM TABLE
*                                                              DDMMM84
UTEODP   DS    0H                  DISPLAY TOTALS
         ST    R14,UTEODSAV        SAVE RETURN
UTEODP2  DS    0H
         L     R1,@PL              GET OUTPUT PLINE ADDR
         LH    R14,L'PRTCNTS(R3)   GET OFFSET FROM STRT OF CTRS
         LA    R14,PACKS(R14)      GET ADDR OF CTRS
         MVC   1(L'MASK2,R1),MASK2 MOVE EDIT MASK
         ED    1(L'MASK2,R1),0(R14) EDIT CTR IN
         MVI   1+L'MASK2(R1),C'='  FORMAT CTR COUNTS
         MVC   1+L'MASK2+1(L'PRTCNTS,R1),0(R3) MOVE CTR NAME IN
         BAL   R14,PUT             PUT OUT COUNTER
         BAL   R14,CLRPL           CLEAR AND SINGLE SPACE
         LA    R3,L'PRTCNTS+2(R3)  BUMP TO NEXT LITERAL/OFFSET SET
         BCT   R2,UTEODP2          DO NEXT TOTAL COUNT
         L     R14,UTEODSAV        RESTORE R14
         BR    R14                 RETURN
*                                                              DDMMM84
******** DIVIDE AND ROUND
*                                                              DDMMM84
DIVIDER  DS    0H                  DIVIDE R1 BY R15
         LR    R0,R15              PUT IN R0 FOR HALF ADJUST
         SRL   R0,1                1/2
         AR    R1,R0               ADD TO DIVISOR
*                                                              DDMMM84
******** DIVIDE WITHOUT ROUND
*                                                              DDMMM84
DIVIDE   DS    0H                  DIVIDE W/OUT HALF ADJUST
         XR    R0,R0               CLEAR
         LTR   R15,R15             CK DIVIDE BY ZERO
         BZR   R14                 LEAVE DATA ALONE
         DR    R0,R15              DIVIDE R1 BY R15 REMANDER=R0
         BR    R14                 RETURN
*                                                              DDMMM84
******** CALC TIME DIFFERENCE FROM 2 TOD FIELDS
*                                                              DDMMM84
*        R0,R1 = HIGHER TIME IN TOD FORMAT
*        R2,R3 = LOWER TIME IN TOD FORMAT
UTTIMDIF DS    0H                  TIME DIFFERENCE
         ST    R14,UTTIMSAV        SAVE RETURN ADDR
         SLR   R1,R3                CALC DIFFERENCE
         BC    2+1,*+8              "
         SH    R0,=H'1'             "
         SR    R0,R2                "
         SRDL  R0,12                CONVERT TO MICRO SECS
         L     R15,=F'100'          CONVERT TO MILLISEC*10
         BAL   R14,DIVIDER         DIVIDE AND ROUND
         L     R14,UTTIMSAV        GET RETURN
         BR    R14                 RETURN
*                                                              DDMMM84
**       CONVERT TOD CLOCK FORMAT TO ENGLISH                   DDMMM84
*                                                              DDMMM84
*INPUT:  STCKSTCK = DATA                                       DDMMM84
*OUTOUT: STCK     = ENGLISH                                    DDMMM84
*WORK:   R0,1,14,15                                            DDMMM84
UTSTCK   DS    0H                                              DDMMM84
         ST    R14,UTSTCKSV                                    DDMMM84
         PUSH  PRINT                                           DDMMM84
         PRINT GEN                                             DDMMM84
         @STCK CODE                    CALL MACRO              DDMMM84
         POP   PRINT                                           DDMMM84
         L     R14,UTSTCKSV                                    DDMMM84
         BR    R14                                             DDMMM84
         TITLE '                   S T A T I C  S T O R A G E'
STATIC   DS     0H
@BASE    DC    A(TSGTFMAP)         MAIN BASE ADDR              15OCT79
@SETUP   DC    A(SETUP)            INIT RTN                    15OCT79
@EODRTN  DC    A(EODRTN)           EOD-REPORT                  15OCT79
GET      SYSGET DDNAME=SYSUT1,RECFM=VB,EODAD=GETEOD2,BLKSIZE=4092,     X
               LRECL=4088
PUT      SYSPUT DDNAME=SYSPRINT,RECFM=FBA,BLKSIZE=3990,LRECL=133
*        TABLE FOR COUNTER NAMES AND OFFSETS TO COUNTERS
*        MAKES EASY TO ADD MORE LATER
         DS    0H
EODCNTS  DS    0CL16
         DC    CL16'TOTAL SIO 0',AL2(DVSIO0-DVTAB)
EODCNT1  EQU   *
         DC    CL16'TOTAL SIO 1',AL2(DVSIO1-DVTAB)
*  **  ** BREAKDOWN OF SIO CC=1 BY 1ST 6 CSW STATUS CODES
EODSIO1S DS    0CL16               TYPES OF SIO CC=1
         DC    CL16' CSW-XXXX  ',AL2(DVSIO1XS-DVTAB+2+0*DVSIO1XL)
         DC    CL16' CSW-XXXX  ',AL2(DVSIO1XS-DVTAB+2+1*DVSIO1XL)
         DC    CL16' CSW-XXXX  ',AL2(DVSIO1XS-DVTAB+2+2*DVSIO1XL)
         DC    CL16' CSW-XXXX  ',AL2(DVSIO1XS-DVTAB+2+3*DVSIO1XL)
         DC    CL16' CSW-XXXX  ',AL2(DVSIO1XS-DVTAB+2+4*DVSIO1XL)
         DC    CL16' CSW-XXXX  ',AL2(DVSIO1XS-DVTAB+2+4*DVSIO1XL)
*  **  ** END OF BREAKDOWN
         DC    CL16'TOTAL SIO 2',AL2(DVSIO2-DVTAB)
         DC    CL16'TOTAL SIO 3',AL2(DVSIO3-DVTAB)
         DC    CL16'TOTAL RESERVES',AL2(DVRESV-DVTAB)          15OCT79
         DC    CL16'TOTAL RELEASES',AL2(DVRLS-DVTAB)           28OCT79
         DC    CL16'TOTAL SIOF CC^=0',AL2(DVSIOFCC-DVTAB)      28OCT79
         DC    CL16'CYLINDERS SEEKED',AL2(DVTOTCYL-DVTAB)
         DC    CL16'         AVERAGE',AL2(DVAVGCYL-DVTAB)
         DC    CL16'AVERAGE IO MSEC',AL2(DVAVGIO-DVTAB)
         DC    CL16'MAX     IO MSEC',AL2(DVMAXIO-DVTAB)
         DC    CL16'HIGHEST HIT PT.',AL2(DVMAXHIT-DVTAB)
         DC    CL16'AVG DEFER MSEC.',AL2(DVDEFRIO-DVTAB)
         DC    CL16'MAX DEFER MSEC.',AL2(DVDEFRMX-DVTAB)
         DC    CL16'AVG RESV  MSEC.',AL2(DVAVGRES-DVTAB)       28OCT79
         DC    CL16'SIO0/SEC       $',AL2(DVSIO0R-DVTAB)       06NOV84
*                                  NOTE $ USES EDIT W/ DECIMA  06NOV84
EODCNTE  EQU   *              END OF TABLE
******
EOD2CNTS DS    0CL16               STRING DATA FIELDS
         DC    CL16'TOTAL SIO 0',AL2(STSIO0-STTAB)
EOD2CNT1 EQU   *
         DC    CL16'TOTAL SIO 1',AL2(STSIO1-STTAB)
         DC    CL16'TOTAL SIO 2',AL2(STSIO2-STTAB)
         DC    CL16'TOTAL SIO 3',AL2(STSIO3-STTAB)
         DC    CL16'TOTAL RESERVES',AL2(STRESV-STTAB)          28OCT79
         DC    CL16'AVG IO TIME',AL2(STAVGIO-STTAB)
         DC    CL16'AVG CYL SEEKED',AL2(STTOTCYL-STTAB)
         DC    CL16'AVG DEFR TIME ',AL2(STDEFRIO-STTAB)
         DC    CL16'MAX DEFR TIME ',AL2(STDEFRMX-STTAB)
         DC    CL16'AVG RESV TIME ',AL2(STAVGRES-STTAB)        28OCT79
         DC    CL16'ACTIVE DEVICES',AL2(STNUMB-STTAB)
EOD2CNTE EQU   *
*
*        ANOTHER TABLE TO DISPLAY EOJ TOTS BY DEVICE
         DS    0H
PRTCNTS  DS    0CL16
         DC    CL16'TOTAL REC IN',AL2(TOTRECIN-PACKS)
PRTCNT1  EQU   *
         DC    CL16'TOTAL SIO',AL2(TOTSIO-PACKS)
         DC    CL16'TOTAL SIO 0',AL2(TOTSIO0-PACKS)
         DC    CL16'TOTAL SIO 1',AL2(TOTSIO1-PACKS)
         DC    CL16'TOTAL SIO 2',AL2(TOTSIO2-PACKS)
         DC    CL16'TOTAL SIO 3',AL2(TOTSIO3-PACKS)
         DC    CL16'TOTAL IO ',AL2(TOTIO-PACKS)
         DC    CL16'TOTAL PCI',AL2(TOTPCI-PACKS)
         DC    CL16'TOTAL BAD',AL2(TOTBAD-PACKS)
         DC    CL16'TOTAL BYPASSED',AL2(TOTBYPAS-PACKS)
         DC    CL16'TOTAL BAD JOB ',AL2(TOTBYP2-PACKS)         15OCT79
         DC    CL16'TOTAL BAD SEEK',AL2(TOTSIOBD-PACKS)        15OCT79
PRTCNTE  EQU   *
*
*        BINARY FIELDS FOR WHOLE JOB
PRTBCNTS DS    0CL16
         DC    CL16'GTF RUN (SECS)',AL2(TOTTM-DSA)
PRTBCNT1 EQU   *
         DC    CL16'SIO0/SEC       $',AL2(TOTSIO0R-DSA)
*              NOTE $ CALLS FOR SPECIAL EDIT                   06NOV84
PRTBCNTE EQU   *                   END OF FILEDS
*
*
*?       TABLE OF JOBS TO MONITOR CONTENTION AMONG THEM
JOBS     DS    0H
JOBS#CHR DS    0AL1
         DC    AL1(2)         L' -1 OF NAME
JOBSNAM  DS    0CL8
         DC    CL8'TSO     '
JOB1     EQU   *
         DC    AL1(0),CL8'T'
         DC    AL1(0),CL8'P'
         DC    AL1(3),CL8'JES2'
         DC    AL1(2),CL8'IMS'
         DC    AL1(3),CL8'VTAM'
         DC    AL1(7),CL8'*MASTER*'
         DC    AL1(3),CL8'CICS'
         DC    AL1(4),CL8'OTHER'
JOBE     EQU   *
JT#      EQU   (JOBE-JOBS)/(JOB1-JOBS)  CALC # OF JOBS IN TABLE
         DC    AL1(0),CL8'SIO 0'   EXTENDED TABLE ROW LABELS
         DC    AL1(0),CL8'SIO 1'
         DC    AL1(0),CL8'SIO 2'
         DC    AL1(0),CL8'SIO 3'
         DC    AL1(0),CL8'DEFR TIM'
         DC    AL1(0),CL8'IO TIME '
JOBE2    EQU   *
JTPRT2#  EQU   (JOBE2-JOBS)/(JOB1-JOBS) # OF ENTRIES IN EXTENDED TAB
*
*        DEVICE CHARACTERISTICS TABLE
STCYLS   DS    0H                  TABLE OF DEVICE TYPE TO MAX. CYLS
         DC    X'0900'             DEVICE TYPE
STCYLMAX EQU   *
         DC    H'404'              MAX CYLS
STCYLNAM EQU   *
         DC    CL8'3330'           EBCDIC NAME
STCYLTRK EQU   *
         DC    H'19'               TRACKS PER CYLINDER
STCYLS1  DS    0H                  FOR SIZE OF ENTRY CALC
         DC    X'0D00',H'808',CL8'3330-1',H'19'
         DC    X'0B00',H'1110',CL8'3350  ',H'30' ?CDC33502     06NOV84
         DC    X'0800',H'0200',CL8'2314  ',H'20'               02MAR94
         DC    X'0A00',H'0696',CL8'3340  ',H'12'               02MAR94
         DC    X'0C00',H'0959',CL8'3375  ',H'12'               02MAR94
         DC    X'0E00',H'0885',CL8'3380  ',H'15'               02MAR94
*              USING 1110 (VICE 555) CDC DUAL DENSITY DISK     06NOV84
         DC    H'-1',H'9999',CL8'UNKNOWN',H'19'
*                                                              06NOV84
*        LIST OF CHANNEL AND CONTROL UNIT ADDRESSES OF DUALS   06NOV84
*         KEEP IN ASCENDING ORDER                              06NOV84
*         IF YOU DONT HAVE ANY DUALS, JUST LEAVE FF AT END IN  06NOV84
DDMAP    DS    0X                  LIST OF CHAN,CUA OF DUAL    06NOV84
*                                  DENSITY DISKS               06NOV84
* KEEP    IN   SEQUENCE!!!         INCLUDE ALTERNATES          06NOV84
*        DC    X'4042A0A2'         40X,42X OPTCHAN=A           06NOV84
*        DC    X'C0C2E0E2'         C0X,C2X OPTCHAN=E           06NOV84
*        DC    X'64667476'         64X,66X OPTCHAN=7           06NOV84
*        DC    X'E4E6F4F6'         E4X,E6X OPTCHAN=F           06NOV84
         DC    X'FFFF'             FAIL SAFE FOR END OF TABLE  06NOV84
*****************? S T A T I C  C O N S T A N T S ********************
STMAXDSP DC    H'3'                MAX DIGITS IN DEV ARRAY REPT
STJOBDSP DC    H'8'                DIGITS IN JOB REPORT
LINEOFST DC    H'64'               OFFSET IN PRINTLINE FOR DATA
*                                  +0=CARRIAGE                 15OCT79
*                                  +4=TRACK# L'=6              15OCT79
*                                  +11=CUM I/O L'=8            06NOV84
*                                  +20=DSN L'=44               06NOV84
SEEKINTF DC    H'20'            ???# OF CYLS MOVED FOR SIG. CONTENTION
MASK     DC    X'402020202020202020202120' EDIT MASK
MASK2    DC    X'40206B2020206B202120' EDIT MASK  Z,ZZZ,ZZ9
MASK3    DC    X'402020204B2021204B20' EDIT MASK  ZZZ,ZZ9.9    06NOV84
TRTAB    DC    C'0123456789ABCDEF' XLATE MASK
LOGO     DC    C'D A S D  M A P P E R  V 2.3' HEADER           06NOV84
HDR2     DC    C'0   FROM  /   TO SLOT NUMBER'  HDR FOR DEV ARRAY DISP
         LTORG
*        EQUATES
*        U C B
UCBDVCLS EQU   18,1
UCBCHAN  EQU   4,2
UCBNAME  EQU   13,3
UCBSTAT  EQU   3,1
UCBUNTYP EQU   19,1
UCBVOLI  EQU   28,6
UCBSTAB  EQU   34,1                                            28OCT79
UCBBPRV  EQU   X'10'               PRIVATE                     28OCT79
UCBBPUB  EQU   X'08'               PUBLIC                      28OCT79
UCBBSTR  EQU   X'04'               STORAGE                     28OCT79
*        C V T
CVTPTR   EQU   X'10'
CVT      EQU   0
CVTILK1  EQU   X'24'
CVTILK2  EQU   X'28'
CVTDCB   EQU   X'74'                   OPERATING SYSTEM        20SEP84
CVTMVSE  EQU   X'80'                   CVTDCB BITS - MVS/XA    20SEP84
CVTIXAVL EQU   X'7C'                   IOS COMM AREA IOCOM     20SEP84
*        I O C O M
IOCOM    EQU   0                                               20SEP84
IOCGENA  EQU   X'54'                   IOSGEN SUBR             20SEP84
         TITLE 'D Y N A M I C  S T O R A G E'
DSA      DSECT
DSAPREFX DS    XL12                    IBM "IOSLOOK" USES      20SEP84
*                                      SAVE AREA PREFIX???     20SEP84
DSAPARMS DS    F                   RES
PACKS    EQU   *                   START OF PACKED COUNTERS
TOTRECIN DS    PL4                 TOTAL RECS IN
TOTSIO   DS    PL4                 TOTAL SIO RECS
TOTSIO0  DS    PL4
TOTSIO1  DS    PL4
TOTSIO2  DS    PL4
TOTSIO3  DS    PL4
TOTIO    DS    PL4                 TOTAL IO RECS
TOTPCI   DS    PL4                 TOTAL PCI RECS
TOTBAD   DS    PL4                 TOTAL BAD RECS
TOTBYPAS DS    PL4                 TOTAL BYPASSES RECS
TOTSIOBD DS    PL4                 TOTAL BAD SEEK ADDR RECS    15OCT79
TOTBYP2  DS    PL4                 TOTAL BAD JOBNAME           15OCT79
PACKE    EQU   *                   END OF PACKED COUNTERS
UTTIMSAV DS    F                   TIME UTILITY SAVE
STRTTM   DS    XL8                 START OF GTF RUN
STOPTM   DS    XL8                 STOP OF GTF RUN
TOTTM    DS    XL8                 DELTA TIME
UTSTCKSV DS    F                       TOD CONVERTER SAVE      DDMMM84
UTSTCKDA @STCK DATA                    DO DSECT                DDMMM84
TOTSIO0R DS    F                   SIO 0 RATE
UTEODSAV DS    F                   PRINT FORMAT UTILITY SAVE
PARMSAVE DS    F                   R1 FROM CALLER
STROOT   DS    F                   ADDR OF STRING TABLE
STSIZ#   DS    F                   NUMBER OF STRINGS IN SYS
EODSTUCB DS    CL3                 WORK AREA-HOLDS STRING
LINESIZE DS    H                   REPORT LINE SIZE
DSADVMAX DS    H                   NUMB. DASDS + 1
MAXCYL   DS    H                   MAX # CYL ON ANY PACK
UTEODBAS DS    F                   BASE ADDR FOR FORMAT UTILITY
DVVROOT  DS    F                   PTR TO DEV VECTOR TABLE
DVVSIZE  DS    F                   SIZE OF DVV TABLE
DVSLOTS  DS    H                   # SLOTS FOR A PACK
DVSIZE   DS    F                   SIZE OF A DEVICE TABLE ENTRY
UTDEFRSV DS    F                   DEFR UTILITY SAVE AREA
EODCURDV DS    F                   PLACE HOLDER DURING EOD
UTGETSAV DS    F                   UTILITY ROUTINE SAVE AREA
DVDSNO   DS    F                   ADDR OF TABLE OF OFFSETS    15OCT79
*                                  1/TRACK OF DASD L'=2        15OCT79
DVDSNT   DS    F                   ADDR OF DSN TABLE           15OCT79
DSDSNTL  DS    F                   LEN. OF DSN TABLE           15OCT79
DSDSNTC  DS    F                   NEXT AVAL. BYTE             15OCT79
DSDSNTE  DS    F                   END - 100BYTES              15OCT79
*                                  ENTRY FORMAT:               15OCT79
*                                  +0=L' ONE BYTE TRUE LENGTH  15OCT79
*                                  +1=DSNAME                   15OCT79
*                                  +2=EXTENT I.D.              15OCT79
*                                   BLANK,1-9,A-F              15OCT79
DSDSNTL# EQU   65500               MAX # BYTES OF DSN ON ANY   15OCT79
*                                  DASD                        15OCT79
DSSAVR10 DS    F                   SAVE R10 (CURR REC PTR)     28OCT79
DSSIORET DS    F                   RETURN AFTER SIO REC DONE   28OCT79
WD       DS    D                   DOUBLE WORD WORK AREA
DSABEND8 DS    X                   SWITCH FOR WARNING MSG      06NOV84
DSDSNTSW DS    X                   "DSN TABLE TOO SMALL"WTO-SW 02MAR94
DSAXA    DS    X                       MVS/XA INDICATOR        20SEP84
DSAXAYES EQU   C'Y'                    Y IF EXECUTING ON XA    20SEP84
DSCUMIO  DS    F                   CUMULATIVE IO IN RPT        06NOV84
@PL      DS    F                   PTR TO PRINT LINE
PLCC     EQU   0,1                 PRINTLINE CARRIAGE          15OCT79
PLSLOT   EQU   0,4                 SLOT # FOR MATRIX OPTION    15OCT79
*                                  EDITS TO 1-3 REALLY         15OCT79
PLTRACK  EQU   4,6                 TRACK#                      15OCT79
*                                  EDITS TO 5-9 REALLY         15OCT79
PLCYLERR EQU   10,1                $ IF D.S. DOESNT OWN CYL    15OCT79
PLCUMIO  EQU   11,8                CUMULATIVE IO               06NOV84
PLDSN    EQU   20,44               DSNAME                      06NOV84
PLEXTNT  EQU   20+43,1             EXTENT ID BLANK,1-9,A-F     06NOV84
*              JOB INFO TABLE                                  06NOV84
PLJNAM   EQU   5,L'JOBSNAM         JOBNAME (IN ROW)            06NOV84
PLJSTART EQU   14                  START OF DATA               06NOV84
WF       DS    F                   WORK AREA
WE       DS    CL12                MAX SIZE DISPLAY AREA FOR NUMERICS
         DS    0H                  ALIGN
EXMVC    DS    XL6                 EXECUTED MVC INSTRUCTION
EXMVC2   DS    XL6                 EXECUTED MVC INSTRUCTION
EXMVC3   DS    XL6                 EXECUTED MVC INSTRUCTION
EODOVFLO DS    F                   MAX SIZE FIELD THAT CAN BE PRINTED
HDR1     DS    CL133               HEADER AREA
HDRDATE  EQU   HDR1+L'HDR1-32,32   HEADER DATE/TIME
PRTOPT   DS    C                   REPORT OPTION SWITCH
HDRTITLE EQU   HDR1+(L'HDR1/2)-(L'LOGO/2),L'LOGO  CENTER OF HDR
HDRUCB   EQU   HDR1+1,3            EBCDIC UCB ADDR
HDRTYPE  EQU   HDR1+5,8            EBCDIC DEV TYPE
HDRVOLI2 EQU   HDR1+14,6           VOLSER                      06NOV84
HDRVOL2X EQU   HDR1+20,3           '(-)' REMINDER FOR DUAL DE  06NOV84
HDRSTAB2 EQU   HDR1+23,4           VOL2 STATUS(PRIV,PUB,STOR)  06NOV84
HDRVOLI  EQU   HDR1+28,6           SECONDARY VOLSER FOR DUAL   06NOV84
HDRSTAB  EQU   HDR1+35,4           VOL STATUS (PRIV,PUB,STOR)  06NOV84
HDRCLR   EQU   HDR1+1,19           BLANK AREA
DSAUCBO  DS    X                       Y=ONLY GET UCB ADR
*                                      FOR UTGET/UTGETUCB SUB.
DSADAADR DS    F                       SAVE CURR DEV ADR
DSASIORC DS    XL80                    BUILD FAKE SIO FROM SSCH20SEP84
DSAIOREC DS    XL80                    BUILD FAKE IO FROM XAIO 20SEP84
DSAPARM  DS    CL101               SAVE AREA FOR PARM          20SEP84
         TITLE 'D Y N A M I C  S T O R A G E - VTOC READER'
         VTEXCP EQ                 SET UP EXCP EQUATES         15OCT79
         VTOCOM NODSECT                                        15OCT79
WORKEXCP DS    4XL256              WORK AREA FOR VTOC RDR      15OCT79
DSASIZE  EQU   *-DSA-72            SIZE OF DSA
FMT1     DSECT                                                 15OCT79
         IECSDSL1 1                                            15OCT79
         TITLE 'D E V I C E  T A B L E'
DVTAB    DSECT                     DEVICE TABLE
DVUCB    DS    CL3                 EBCDIC UCB ADDR
DVFLAG1  DS    X                   FLAG                        06NOV84
DVF1DD   EQU   X'80'               DUAL DENSITY DEVICE         06NOV84
DVUCBPTR DS    F                   UCB PTR(ADDR)
DVCHAN   DS    XL2                 0CUU LAST USED HEX ADDR     06NOV84
DVTYPE   DS    CL8                 EBCDIC TYPE
DVVOLI   DS    CL6                 VOLSER
DVSTAB   DS    X                   VOL STATUS B FROM UCBSTAB   28OCT79
DVVOLI2  DS    CL6                 SECONDARY VOLSER IF DUAL D  06NOV84
DVSTAB2  DS    X                   VOL STATUS B FROM UCBSTAB   06NOV84
DVSIO0   DS    F                   SIO ZERO COUNT
DVSIO1   DS    F                   " 1
DVSIO2   DS    F                   " 2
DVSIO3   DS    F                   " 3
DVSIO0R  DS    F                   SIO 0 RATE (*10)            06NOV84
*        FOR SIO CC=1 TABLE FOR 1ST 6 STATUS CODES/COUNTS
DVSIO1XS DS    XL2                 SIO1 STATUS
DVSIO1XC DS    XL4                 SIO1 CTR
DVSIO1XL EQU   *-DVSIO1XS          1 ENTRY SIZE
         DS    (5*DVSIO1XL)X       REST OF TABLE
DVSIO1XE EQU   *
DVRESV   DS    F                   NUMBER OF RESERVES          15OCT79
DVRLS    DS    F                   NUMBER OF RELEASES          28OCT79
DVSIOFCC DS    F                   NUMBER OF SIOF W/ DEFER CC  28OCT79
DVDELTA  DS    H                   CYLINDERS PER PRINT SLOT
DVTRK    DS    H                   TRACKS PER CYLINDER
DVCYL    DS    H                   CYLINDERS PER DEVICE
DVLJOBI  DS    H                   LAST USER OF DEV(JOB TAB INDEX)
DVCJOBI  DS    H                   CURR USER OF DEV(JOB TAB INDEX)
         DS    0D                  ALIGN
DVL0TIME DS    XL8                 TIME OF LAST SIO0(CALC CONCURRENCE)
DVLTIME  DS    XL8                 TIME OF LAST SIO0(CALC I/O TIME)
DVLRESTM DS    XL8                 TIME OF LAST RESERVE        28OCT79
DVLJOB   DS    CL8                 LAST JOB NAME
DVDEFRTM DS    XL8                 TIME OF LAST SIO .NE. 0
DVDEFRIO DS    F                   CUM/AVG DEFR IO TIME
DVDEFRMX DS    F                   MAX DEFR IO TIME
DVAVGRES DS    F                   AVG RESERVE TIME            28OCT79
DVLROW   DS    F                   ROW OF ARRAY WHERE HEAD LEFT
DVTOTCYL DS    F                   TOTAL CYLINDERS SEEKED
DVAVGIO  DS    F                   AVG. I/O TIME
DVMAXIO  DS    F                   MAX. I/O TIME
DVMAXHIT DS    F                   MAX. DEV ARRAY ENTRY
DVAVGCYL DS    F                   AVG. CYL. SEEKED
DVLSEEK  DS    XL8                 MBBCCHHR OF LAST SEEK
DVCURJOB DS    H                   INDEX TO CURRENT JOB USER
DVTOTTIM DS    2F                  RESV.
DVLSIO0  DS    XL100               HOLD AREA FOR SIO CC=0      28OCT79
********* JOB INFO BY DEVICE
DVJTXREF DS    (JT#*JT#)F         JOB INTERFERENCE ARRAY
DVJTSIO0 DS    (JT#)F              SIO CCODE
DVJTSIO1 DS    (JT#)F              SIO CCODE
DVJTSIO2 DS    (JT#)F              SIO CCODE
DVJTSIO3 DS    (JT#)F              SIO CCODE
DVJTDFRT DS    (JT#)F              TOT/AVG DEFER TIME
DVJTIOTM DS    (JT#)F              TOT/AVG I/O TIME
DVJTSEEK DS    (JT#)F              TOT/AVG CYL SEEKED
         DS    0F                  ALIGN
DVFIXSIZ EQU   *-DVTAB             SIZE OF FIXED DEV. TABLE AREA
DVXREF   EQU   *                   START OF SEEK ARRAY
         TITLE 'S T R I N G  T A B L E '
STTAB    DSECT STRING TABLE
STUCB    DS    CL3                 EBCDIC NAME
STSIO0   DS    F                   SIO 0
STSIO1   DS    F                   SIO 1
STSIO2   DS    F                   SIO 2
STSIO3   DS    F                   SIO 3
STRESV   DS    F                   RESERVES                    28OCT79
STAVGIO  DS    F                   AVG IO TIME
STTOTCYL DS    F                   AVG CYL SEEK
STDEFRIO DS    F                   AVG DEFR TIME
STDEFRMX DS    F                   MAX DEFR TIME
STAVGRES DS    F                   AVG RESERVE TIME            28OCT79
STNUMB   DS    F                   NUMBER OF DEVICES ON STRING
STSIZE   EQU   *-STTAB             SIZE OF TABLE
******
******   TITLE 'D E V I C E  V E C T O R  T A B L E '
******
DVVTAB   DSECT                     DEVICE VECTOR TABLE
DVVPTR   DS    F                   PTR TO DEVICE TABLES
DVVUCB   DS    F                   PTR TO UCB
DVVSIZ   EQU   *-DVVTAB            SIZE OF ENTRY
         TITLE 'G T F  R E C O R D S'
GTFREC   DSECT                     GTF RECORDS
GTLEN    DS    H                   LENGTH
         DS    H                   RESV
GTID     DS    X                   RECORD ID
GTFMT    DS    X                   FORMAT ID
GTTIME   DS    XL8                 TIME STAMP IF TIME=YES
GTEVNT   DS    XL2                 EVENT IDENTIFIER
GTASCB   DS    XL4                 PTR TO ACSB
GTCPUID  DS    XL2                 CPU ID
GTJOB    DS    XL8                 JOBNAME
GTSCCWR  DS    XL4                 REAL ADDR OF CCW
GTSCCWV  DS    XL4                 VIRT ADDR OF CCW
GTSPURGE DS    XL4                 CTRL BLK USED BY PURGE
GTSIOCC  DS    XL1                 SIO CONDITION CODE
GTSDEV   DS    XL2                 DEV ADDR
GTSCAW   DS    XL4                 CAW
GTSSTAT  DS    XL2                 STATUS
GTSSEEK  DS    XL8                 SEEK ADDR
GTSFLB   EQU   GTSSEEK+1,1         FROM IOQFLB (RESERVE/RLSE)  27OCT79
*                                  LOCAL MOD TO AHLTSIO FROM   27OCT79
*                                   CCWTRACE GIVES INFO        27OCT79
GTSRESV  EQU   X'80'               RESERVE FLAG                27OCT79
GTSRLSE  EQU   X'40'               RELEASE FLAG                27OCT79
GTSFLAG  DS    XL6                 FLAGS
GTSAFF   EQU   GTSFLAG+0,1         FROM IOSAFF (IOSB FIELD)    15OCT79
GTSPATH  EQU   GTSFLAG+1,2         IOSPATH                     15OCT79
GTSOPT   EQU   GTSFLAG+3,1         IOSOPT                      15OCT79
GTSBYP   EQU   X'80'               BYPASS IOS CHAN PROG PREFX  15OCT79
GTSRELSE EQU   X'01'               STAND ALONE RELEASE ISSUED  15OCT79
GTSFMSK  EQU   GTSFLAG+4,1         IOSFMSK (SET FILE MASK)     15OCT79
GTSDVRID EQU   GTSFLAG+5,1         IOSDVRID (DRIVER ID)        15OCT79
GTSIOSID EQU   X'00'               RSVD FOR IOS                15OCT79
GTSMISID EQU   X'01'               MISC DRIVER                 15OCT79
GTSXCPID EQU   X'02'               EXCP DRIVER                 15OCT79
GTSVSAID EQU   X'03'               VSAM DRIVER                 15OCT79
GTSATMID EQU   X'04'               VTAM DRIVER                 15OCT79
GTSTCMID EQU   X'05'               TCAM DRIVER                 15OCT79
GTSOLTID EQU   X'06'               OLTEP DRIVER                15OCT79
GTSFCHID EQU   X'07'               PCI FETCH DRIVER            15OCT79
GTSJESID EQU   X'08'               JES3 DRIVER                 15OCT79
GTSSS1ID EQU   X'09'               SS1/DSM DRIVER              15OCT79
GTSPRGID EQU   X'0A'               IECVIOPM PURGE DRIVER       15OCT79
GTSVPSID EQU   X'0B'               VPSS DRIVER                 15OCT79
*        SSCH RECORD               *XAXAXA********
         ORG   GTSCCWR             RE-ALIGN                    20SEP84
GTXDEV   DS    XL2                     DEVICE NUMBER           20SEP84
GTXCCWR  DS    XL4                 REAL ADDR OF CCW
GTXCCWV  DS    XL4                 VIRT ADDR OF CCW
GTXDSID  DS    XL4                 IOS DSID
GTXIOCC  DS    XL1                 SSCH CONDITION CODE
GTXORB   DS    XL12                ORB?
GTXSEEK  DS    XL8                 SEEK ADDR
GTXPATH  DS    XL1                     IOSGPMSK
GTXOPT   DS    XL1                     IOSOPT
GTXFMSK  DS    XL1                     IOSFMSK
GTXDVRID DS    XL1                     DRIVER ID
GTXIOSLV DS    XL1                     IOS LEVEL
GTXUCBLV DS    XL1                     UCBLEVEL
*        RSCH RECORD               *XAXAXA********
         ORG   GTSCCWR             RE-ALIGN                    20SEP84
GTRDEV   DS    XL2                     DEVICE NUMBER           20SEP84
GTRCCWR  DS    XL4                 REAL ADDR OF CCW
GTRCCWV  DS    XL4                 VIRT ADDR OF CCW
GTRDSID  DS    XL4                 IOS DSID
GTRIOCC  DS    XL1                 RSCH CONDITION CODE
GTRSEEK  DS    XL8                 SEEK ADDR
GTRPATH  DS    XL1                     IOSGPMSK
GTROPT   DS    XL1                     IOSOPT
GTRFMSK  DS    XL1                     IOSFMSK
GTRDVRID DS    XL1                     DRIVER ID
GTRIOSLV DS    XL1                     IOS LEVEL
GTRUCBLV DS    XL1                     UCBLEVEL
*        I/O RECORD (NON-XA)       ***************
         ORG   GTSCCWR             RE-ALIGN
GTIOPSW  DS    XL8                 I/O OLD PSW
GTIRQTCB DS    XL4                 RQE TCB
GTICSW   DS    XL8                 CSW
GTICCWR  DS    XL4                 REAL ADDR OF CCW
GTICCWV  DS    XL4                 VIRT "
GTISENSE DS    XL2                 SENSE
GTIDEV   DS    XL2                 DEVICE ADDR
GTIPURGE DS    XL4                 PURGE CTRL BLOCK
GTIFLAG  DS    XL9                 FLAGS
*        I/O RECORD (XA)                                       20SEP84
         ORG   GTSCCWR                RE-ALIGN                 20SEP84
GTYDEV   DS    XL2                 DEVICE NUMBER               20SEP84
GTYOPSW  DS    XL8                     I/O OLD PSW             20SEP84
GTYIRB   DS    XL16                    IRB                     20SEP84
GTYCSW   EQU   GTYIRB+4,8              CSW                     20SEP84
GTYRQTCB DS    XL4                     TCB                     20SEP84
GTYSENSE DS    XL2                     SENSE                   20SEP84
GTYFLAG  DS    XL2                     FLAGS                   20SEP84
GTYDVRID DS    XL1                     DRIVER ID               20SEP84
GTYIOSLV DS    XL1                     IOS LEVEL               20SEP84
GTYUCBLV DS    XL1                     UCB LEVEL               20SEP84
*
*        TIME STAMP CONTROL RECORD
         ORG   GTTIME
GTCRTZON DS    XL4                 TIME ZONE
GTCRTOD  DS    XL8                 TOD CLOCK
GTCROP1  DS    X                   OPTION 1
GTC1SYSM EQU   X'80'                                           20SEP84
GTC1SYSP EQU   X'40'                                           20SEP84
GTC1SYS  EQU   X'20'                                           20SEP84
GTC1USR  EQU   X'10'                                           20SEP84
GTC1TRC  EQU   X'08'                                           20SEP84
GTC1DSP  EQU   X'04'                                           20SEP84
*TC1XXX  EQU   X'02'                                           20SEP84
GTC1PCI  EQU   X'01'                                           20SEP84
GTCROP2  DS    X                   OPTION 2
GTC2SVC  EQU   X'80'                                           20SEP84
GTC2SVCP EQU   X'40'                                           20SEP84
GTC2SIO  EQU   X'20'                                           20SEP84
GTC2SIOP EQU   X'10'                                           20SEP84
GTC2PI   EQU   X'08'                                           20SEP84
GTC2PIP  EQU   X'04'                                           20SEP84
GTC2IO   EQU   X'02'                                           20SEP84
GTC2IOP  EQU   X'01'                                           20SEP84
GTCROP3  DS    X                   OPTION 3
GTC3EXT  EQU   X'80'                                           20SEP84
GTC3RNIO EQU   X'40'                                           20SEP84
GTC3SRM  EQU   X'20'                                           20SEP84
GTC3RR   EQU   X'10'                                           20SEP84
GTC3SLIP EQU   X'08'                                           20SEP84
GTC3CCW  EQU   X'04'                                           20SEP84
GTC3CCWP EQU   X'02'                                           20SEP84
GTC3IOEQ EQU   X'01'                   IO=SIO                  20SEP84
GTCROP4  DS    X                   OPTION 4
GTC4CCWI EQU   X'80'                                           20SEP84
GTC4CCWS EQU   X'40'                                           20SEP84
GTC4JOBP EQU   X'20'                                           20SEP84
GTC4ASDP EQU   X'10'                                           20SEP84
GTC4USRP EQU   X'08'                                           20SEP84
*TC4RES  EQU   X'04'                                           20SEP84
*TC4RES  EQU   X'02'                                           20SEP84
GTC4TIME EQU   X'01'                   IO=SIO                  20SEP84
GTCROP5  DS    X                   OPTION 4
GTC5SSCH EQU   X'80'                                           20SEP84
GTC5SSCP EQU   X'40'                                           20SEP84
GTC5MSCH EQU   X'20'                                           20SEP84
GTC5HSCH EQU   X'10'                                           20SEP84
GTC5CSCH EQU   X'08'                                           20SEP84
*TC5RES  EQU   X'04'                                           20SEP84
*TC5RES  EQU   X'02'                                           20SEP84
GTC5SSEQ EQU   X'01'                   IO=SSCH                 20SEP84
GTCROPX  DS    XL3                     RESERVED
         END
