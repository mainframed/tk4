./ ADD NAME=$$DOC
CPCMD    - Enables MVS users running under VM to issue CP commands
           and get the responses back at their TSO terminal. Can also
           executed as a batch program or started task. Link it with
           an alias of CP. On TSO then enter CP Q DASD for example, or
           CP ATT 58A MVS.
DASDSUB  - Get DASD device information from UCB. (Used by SVTOC in PLI.)
DISASM3B - The SVC table from the DISASSEMBLER on the CBT tape. Modified
           for MVSXA and copied into SVCTAB.
DSSLVL   - Display current DF/DSS program level.
JULSUB   - Date conversion subroutine.
LASTCLPA - Command to display date and time of last CLPA. A companion
           program to LASTIPL which is on the CBT tape.
LNKLST   - Display names of LINKLST datasets currently in use.
RACFDS   - Display data about the RACF dataset(s) in use.
SMFDS    - Display data about current SMF dataset usage.
SVCTAB   - Program to display SVCTABLE.
TODCN    - Program to convert timestamps into real dates and times.
VSAMNAME - Convert and display 'real' dataset names assigned by VSAM
           for PAGE, MAN etc.
./        ADD LIST=ALL,NAME=CPCMD
CPCMD    MOWSTART SP=250
*********************************************************************
*                                                                   *
* PROGRAM TO RUN ON MVS TO ISSUE VM/CP COMMAND.                     *
* MAY BE RUN AS A TSO COMMAND, EXECUTED AS A PROGRAM, OR RUN AS A   *
* STARTED TASK.                                                     *
* LINK WITH AC(1). NAME IS CPCMD WITH ALIAS CP.                     *
*                                                                   *
* E.G. (1) // EXEC PGM=CPCMD,PARM='Q CPUID'                         *
*      (2) CP Q CPUID                                               *
*      (3) // EXEC PGM=CPCMD                                        *
*          //SYSIN DD *                                             *
*          Q CPUID                                                  *
*          ATT 76A MVSXA 76A                                        *
*          /*                                                       *
*                                                                   *
* IF IN BATCH, AND A SYSIN DD IS PRESENT, THE PARM IS IGNORED AND   *
* THE COMMANDS ARE READ FROM THE SYSIN FILE.                        *
*                                                                   *
*********************************************************************
MOWWORK  DSECT
TIOT     DC    F'0'           EXTRACT WORK AREA, KEEP    (1)
TSO      DC    F'0'            THESE 3 TOGETHER AND      (2)
ASID     DC    F'0'             IN THIS ORDER.           (3)
*
ACMD     DC    A(0)           THESE FOUR FULL WORDS      (1)
ABUF     DC    A(0)            MUST REMAIN               (2)
CMDL     DC    F'0'             IN THE SAME RELATIVE     (3)
RESPBUFL DC    F'0'              POSITIONS.              (4)
CMDFLG   DC    X'00'          INDIC. COMMAND, PROGRAM OR STARTED TASK
SYSINFLG EQU   X'80'
STCFLG   EQU   X'04'
BATFLG   EQU   X'02'
TSOFLG   EQU   X'01'
         DS    XL7            UNUSED
         SPACE 2
CPCMD    CSECT
         USING CVT,R10
         USING ASVT,R9
         USING ASCB,R8
         LR    R11,R1                   COPY A(PARM)
         L     R10,16                   A(CVT)
         L     R9,CVTASVT               A(ASVT)
         LA    R9,ASVTFRST              -> FIRST ASVT ENTRY
         LA    R7,TIOT                  POINT TO RETURN AREA
         EXTRACT (7),FIELDS=(TSO,ASID,TIOT)  EXTR TO GET STUFF
         MVI   CMDFLG,TSOFLG            INITIALIZE CMD FLAG
         L     R7,TSO                   -> TO TSO INDICATOR
         TM    0(R7),X'80'              ARE WE ON TSO?
         BO    GOTTYPE                  IT WAS
         MVI   CMDFLG,BATFLG            NOW A 1, TEST FOR JOB
         L     R8,ASID                  GET ASID INTO A REG
         SLL   R8,2                     MULTIPLY BY 4
         L     R8,0(R8,R9)              NOW HAS A(OUR ASCB)
         CLC   ASCBJBNI,=F'0'           TEST FOR JOB
         BNE   GOTTYPE                  NOT ZERO, SO ITS A JOB
         MVI   CMDFLG,STCFLG            NOW ITS A 2, STC
GOTTYPE  EQU   *
         TM    CMDFLG,TSOFLG            IN TSO MODE?
         BO    GETPARM                  YES, SO GETPARM
         LA    R3,=CL8'SYSIN'           DDNAME TO LOOK FOR
         BAL   R10,TIOTSCAN             GO SEE IF THERE IS ONE
         BNE   GETPARM                  WASN'T A SYSIN
         OI    CMDFLG,SYSINFLG          SET SYSIN FLAG ON
         OPEN  (SYSIN,(INPUT))          OPEN IT
         B     COMP4                    AND GO GET WORK AREA
*********************************************************************
* DETERMINED WHO WE ARE, PROCESS ACCORDINGLY                        *
*********************************************************************
GETPARM  EQU   *
         LR    R1,R11         RESTORE A(PARM)
         ICM   R2,B'1111',0(R1)  POINT TO PARAMETER
         LH    R1,0(R2)       PICK UP LENGTH
         BL    COMP4          ONLY ONE PARM
         SH    R1,=H'4'       CALL FROM TMP
         SH    R1,2(R2)
         LA    R2,2(,R2)      PREFIX IS 4 BYTES
         AH    R2,0(R2)       SKIP OVER COMMAND NAME
         STH   R1,0(R2)       PUT LENGTH OF CP CMD IN CORRECT PLACE
COMP4    EQU   *
         LH    R5,BUFLEN              LENGTH OF BUFFER AREA
         GETMAIN RU,LV=(R5),SP=250,BNDRY=PAGE  FOR FOR RETURNED DATA
         ST    R1,ABUF                A(RESPBUF) - SAVE IT
         TM    CMDFLG,SYSINFLG+BATFLG READING FROM SYSIN?
         BO    CMDOK                  YES
         LH    R3,0(R2)               GET LENGTH OF COMMAND
         LTR   R3,R3                  IS THERE ANY LENGTH?
         BP    CMDOK                  GO TRY TO DO IT
NOCMDTXT EQU   *
         MVC   0(26,R1),=C'NO CP COMMAND TEXT ENTERED'
         MVI   26(R1),X'15'           NEW LINE CHAR
         MVC   RESPBUFL,=F'27'        LENGTH OF MESSAGE
         B     RESULT         PRETEND WE DID IT, BUT TELL ERROR MSG
CMDOK    EQU   *
         TM    CMDFLG,SYSINFLG+BATFLG PROCESSING A SYSIN FILE?
         BNO   CMDOK1                 NO, USE VALUE IN PARM
         GET   SYSIN                  GET A RECORD FROM SYSIN
         LA    R3,71(,R1)             POINT TO END OF RECORD
SCAN1    EQU   *
         CLI   0(R3),C' '             A BLANK
         BNE   SCAN2                  NO
         BCTR  R3,0                   BACK UP A CHAR
         B     SCAN1                  AND CHECK IT
SCAN2    EQU   *
         SR    R3,R1                  NOW R3 HAS LENGTH OF COMMAND
         LA    R3,1(R3)               ADD 1 BACK TO GET REAL LENGTH
         LR    R2,R1                  COPY POINTER TO COMMAND TEXT
         SH    R2,=H'2'               DO THIS SO MOVCMD INSTR WILL WORK
CMDOK1   EQU   *
         L     R1,ABUF                RESTORE REG 1
         ST    R3,CMDL                SAVE LENGTH
         LH    R5,BUFLEN              RELOAD LENGTH
         LA    R1,0(R1,R5)            GET EOBUFF.....
         SR    R1,R3                  ....MINUS CMD LENGTH AND .....
         N     R1,=F'-8'              .....ROUND BACK TO DOUBLEWORD.
         ST    R1,ACMD                SAVE COMMAND ADDRESS
         BCTR  R3,0                   AND
         EX    R3,MOVCMD              MOVE IT TO IT'S NEW HOME
         LR    R2,R1
         S     R1,ABUF                SUBT START OF RESP. AREA
         ST    R1,RESPBUFL            TO GET LENGTH
         LA    R3,1(,R3)              GET ORIGINAL CMD LENGTH
         LR    R0,R3                  AND COPY ITS VALUE
         BCTR  R2,0
MAKEUP   EQU   *
         LA    R1,0(R2,R3)            ENSURE
         OI    0(R1),X'40'               UPPER
         BCT   R3,MAKEUP                     CASE
         SPACE 3
*********************************************************************
* THE FOLLOWING TESTS FOR COMMANDS WE AREN'T ALLOWED TO ISSUE       *
*********************************************************************
NONBLNK  EQU   *
         CLI   0(R1),X'40'              IS THIS A BLANK?
         BNE   CMDSTRT                  NO, GO TO CHECK COMMAND
         LA    R1,1(R1)                 POINT TO NEXT CHAR
         BCT   R0,NONBLNK               AND CHECK IT
         L     R1,ABUF
         B     NOCMDTXT
CMDSTRT  EQU   *
         CLC   =C'CP ',0(R1)            ADJUC
         BNE   NOCPREFX
         LA    R1,3(,R1)                POINT TO START OF COMMAND
         SH    R0,=H'3'                 ADJUST LENGTH
         B     NONBLNK
NOCPREFX EQU   *
         CH    R0,=H'3'                 LENGTH OF COMMAND
         BL    ALLOWED
         CLC   =C'LOG',0(R1)            LOGOFF
         BE    NOTALOWD
         CLC   =C'I ',0(R1)             IPL
         BE    NOTALOWD
         CLC   =C'IPL',0(R1)            IPL
         BE    NOTALOWD
         CH    R0,=H'4'                 LENGTH OF COMMAND
         BL    ALLOWED
         CLC   =C'DISC',0(R1)           DISCONNECT
         BE    NOTALOWD
         CH    R0,=H'8'                 LENGTH OF COMMAND
         BL    ALLOWED
         CLC   =C'SHUTDOWN',0(R1)       SHUTDOWN
         BE    NOTALOWD
ALLOWED  EQU   *
         MODESET KEY=ZERO,MODE=SUP
         L     R5,ABUF           A(BUF)
         LH    R11,BUFLEN        LENGTH OF TOTAL AREA
         BCTR  R11,0             SUBTRACT ONE
         LA    R7,0(R5,R11)      COMPUTE END ADDRESS OF AREA
         PGSER R,FIX,A=(R5),EA=(R7),ECB=0  FIX PAGES IN STORAGE
         L     R8,ACMD           A(CMD)
         LRA   R8,0(R8)          POINT TO REAL ADDRESS OF CMD
         LRA   R9,0(R5)          POINT TO REAL ADDRESS OF BUF
         L     R10,CMDL          LENGTH OF COMMAND TO EXECUTE
         L     R11,RESPBUFL      LENGTH OF RETURN AREA
         O     R10,=X'40000000'  INDICATE RETURN RESPONSE IN BUFFER
         DC    X'838A0008'       DIAGNOSE INSTR - NO OPCODE
         BNZ   *+8               LEAVE LEN ALONE IF NOT ALL FIT
         ST    R11,RESPBUFL      LENGTH OF RESP
         PGSER R,FREE,A=(R5),EA=(R7)  NOW FREE UP PAGES AGAIN
         MODESET KEY=NZERO,MODE=PROB
         SPACE
RESULT   L     R2,RESPBUFL    LOAD IN LENGTH OF RETURNED TEXT
         LTR   R2,R2          SET COND CODE
         BNP   FIN            NO RESPONSE TO COMMAND
         SPACE
*********************************************************************
* PROCESS RESPONSE FOR CALLER                                       *
*********************************************************************
         L     R3,ABUF        POINT TO START OF RETURNED TEXT
         TM    CMDFLG,BATFLG  IS THIS BATCH EXECUTION?
         BNO   DOPUTS         NO, ITS A COMMAND OR STC
         OPEN  (SYSPRINT,(OUTPUT)) ONLY FOR JOB/BATCH EXECUTION
         TM    SYSPRINT+48,X'10'   DID IT OPEN?
         BNO   FIN            NO, SOME PROBLEM SO JUST END
         SPACE
DOPUTS   EQU   *
         LR    R1,R3          COPY POINTER TO START OF LINE
SCAN     CLI   0(R3),X'15'    NEW LINE CHAR
         BE    GETLEN         YES, SO CALCULATE LEN FOR TPUT
         LA    R3,1(R3)       POINT TO NEXT CHAR
         BCT   R2,SCAN        AND CHECK IT WHILE THERE ARE SOME
         TM    CMDFLG,SYSINFLG+BATFLG   PROCESSING A SYSIN STREAM?
         BO    CMDOK          YES, GET MORE TO DO
         B     FIN            NO MORE BUFFER
GETLEN   EQU   *
         LR    R0,R3          CALCULATE LENGTH OF TEXT TO PUT
         SR    R0,R1          LENGTH TO BE PUT
         STH   R0,SYSPRINT+82 SAVE THE LENGTH
         LR    R5,R0          COPY LENGTH OF TEXT
         LR    R7,R1          COPY POINTER TO DATA
         TPUT  (1),(0),R      ISSUE TPUT (NO-OP IN BATCH)
         TM    CMDFLG,TSOFLG  IS IT TSO?
         BO    NXTLINE        YES, SO DON'T DO PUT TO SYSPRINT
         TM    CMDFLG,BATFLG  IS IT BATCH?
         BO    BATCHPUT       YES, SO DO PUT TO SYSPRINT
         MVI   WTOMSG+4,X'40' MOVE IN A BLANK TO BYTE 1 OF MESSAGE
         MVC   WTOMSG+5(79),WTOMSG+4 AND BLANK ENTIRE FIELD
         BCTR  R5,0           SUBTRACT 1 FOR EXECUTED MOVE
         EX    R5,WTOTEXT     MOVE TEXT TO WTO MESSAGE AREA
         WTO   MF=(E,WTOMSG)  AND DO WTO BECAUSE WE MUST BE STC
         B     NXTLINE        GO TO NEXT LINE
BATCHPUT EQU   *
         PUT   SYSPRINT,(7)   WRITE OUTPUT TO SYSPRINT
NXTLINE  LA    R3,1(R3)       -> TO CHAR FOLLOWING X'15' FOR NEXT PUT
         BCT   R2,DOPUTS      SUBTRACT ONE FOR CHARS LEFT TO DO
         TM    CMDFLG,SYSINFLG+BATFLG   PROCESSING A SYSIN STREAM?
         BO    CMDOK          YES, GET MORE TO DO
         B     FIN            NO MORE BUFFER
NOTALOWD EQU   *
         LA    R8,30                    LENGTH OF RESPONSE + 1
         ST    R8,RESPBUFL              SAVE LENGTH
         L     R15,ABUF                 A(BUFFER)
         MVC   0(29,R15),=CL29'COMMAND NOT ALLOWED:          '
         MVC   21(8,R15),0(R1)          MOVE IN COMMAND NAME
         MVI   29(R15),X'15'            LF
         B     RESULT                   RETURN
         SPACE 2
FIN      EQU   *
         CLOSE (SYSPRINT,,SYSIN)        EVEN IF IT WASN'T OPEN
         L     R1,ABUF                  ADDRESS OF WORK AREA TO FREE
         LH    R5,BUFLEN                AND LENGTH
         FREEMAIN R,LV=(5),A=(1),SP=250 FREE GOTTEN STORAGE
         MOREND SP=250
         EJECT
***********************************************************************
*  CODE FOR TIOTSCAN SUB                                              *
***********************************************************************
TIOTSCAN EQU   *
         L     R2,TIOT          LOAD ADDRESS
         LA    R2,24(R2)        AND AGAIN
         XR    R4,R4            CLEAR A REGISTER
TIOTSC1  IC    R4,0(R2)         PUT A BYTE IN A REGISTER
         LTR   R4,R4            SEE IF IT WAS ZERO
         BZ    NOTIN
         TM    3(R2),B'00010000'   IS IT DD DYNAM?
         BO    *+10             YES, SO SKIP AROUND THIS
         CLC   0(8,R3),4(R2)    IS THIS SAME NAME AS WE ARE SEEKING
         BCR   8,R10            YES IT IS, SO JUST RETURN
         AR    R2,R4            POINT TO NEXT ENTRY
         B     TIOTSC1          GO BACK AND LOOK AT IT
NOTIN    CLI   *,0              SET CONDITION CODE NOT EQUAL
         BR    R10              RETURN WITH NON ZERO CONDITION CODE
         EJECT
         DS    0H
BUFLEN   DC    H'4096'          SIZE OF RESPONSE/COMMAND BUFFER
*                               MAY BE SMALLER, BUT DON'T MAKE BIGGER.
MOVCMD   MVC   0(*-*,R1),2(R2)
WTOTEXT  MVC   WTOMSG+4(*-*),0(R7)      EXECUTED MOVE INSTR
WTOMSG   WTO   '0123456789 123456789 123456789 123456789 123456789 1234*
               56789 123456789 123456789',                             *
               ROUTCDE=(2),MF=L
         PRINT NOGEN
SYSIN    DCB   DDNAME=SYSIN,DSORG=PS,MACRF=(GL),LRECL=80,RECFM=FB,     *
               EODAD=FIN
SYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=(PM),LRECL=80,RECFM=U
         IHAASVT
         IHAASCB
         CVT   DSECT=YES
         END
./        ADD LIST=ALL,NAME=DASDSUB
DASDSUB  MOWSTART
**********************************************************************
* DASD SUB IS A ROUTINE TO GET CERTAIN DETAILS ABOUT A DASD DEVICE   *
* AND RETURN THEM TO THE CALLER. IT IS USED BY SVTOC FOR ONE.        *
* CALL DASDSUB(VOLSER,CYLS,TRKS/CYL,DSCBS,TYPE).                     *
**********************************************************************
         USING CVT,R2
         USING UCBOB,R11
         LR    R10,R1           COPY PARM POINTER
         L     R2,16            LOAD CVT ADDRESS
         L     R3,0(R10)        POINT TO CALLERS VOLSER
         XC    UWORK,UWORK      CLEAR WORK AREA
         MVI   DEVCLASS,X'20'   INDICATE SEARCH FOR DASD DEVICES
         XC    ADDRUCB,ADDRUCB  CLEAR UCB ADDRESS
UCBLOOP  L     R15,CVTUCBSC     A(UCB SCAN ADDRESS)
         CALL  (15),(UWORK,DEVCLASS,ADDRUCB),VL,MF=(E,CALLIST)
         LTR   R15,R15          SUCCESSFUL?
         BNZ   UCBEND           END OF UCBS
         L     R11,ADDRUCB      GET UCB ADDRESS
         CLI   UCBID,UCBSTND    IS UCB ADDRESS VALID
         BNE   UCBLOOP          NO
         TM    UCBSTAT,UCBONLI  IS UCB ONLINE?
         BNO   UCBLOOP          NO  SKIP
         TM    UCBSTAT,UCBCHGS  CHANGING STATUS?
         BO    UCBLOOP          YES SKIP
         CLC   UCBVOLI,0(R3)    IS THIS OUR VOLUME'S UCB?
         BNE   UCBLOOP
         SPACE 1
         L     R9,20(R11)               A(UCB COMMON EXTENSION)
         L     R9,24(R9)                A(DEVICE CLASS EXTENSION)
         USING DCE,R9
         L     R2,4(R10)                A(2ND ARG), CYLS PER VOL
         LH    R3,DCEUDCYL              # CYLS
         BCTR  R3,0                     LESS ONE
         ST    R3,0(R2)                 SAVE IT IN CALLERS AREA
         L     R2,8(R10)                A(3RD ARG), TRKS PER CYL
         LA    R3,15                    WE'LL CHEAT FOR NOW
         ST    R3,0(R2)                 SAVE IT IN CALLERS AREA
         L     R8,DCEVIB                GET ADDR OF VIB
         USING VIB,R8
         L     R2,12(R10)               A(4TH ARG), DSCBS PER TRK
         SR    R3,R3
         IC    R3,VIBDSCB               GET IT FROM VIB
         ST    R3,0(R2)                 SAVE IN CALLERS AREA
         L     R2,16(R10)               A(5TH ARG), DEV TYPE
         MVC   0(5,R2),=C'3380 '        A 3380
         MVI   4(R2),C'D'
         CLI   DCEMDRDT,D3380D          A 'D' ?
         BE    UCBEND
         MVI   4(R2),C'J'
         CLI   DCEMDRDT,D3380J          A 'J' ?
         BE    UCBEND
         MVI   4(R2),C'E'
         CLI   DCEMDRDT,D3380E          AN 'E' ?
         BE    UCBEND
         MVI   4(R2),C'K'
         CLI   DCEMDRDT,D3380K          A 'K'?
         BE    UCBEND
         CLI   DCEMDRDT,D3380           A STANDARD? OR CAN'T TELL
         MVI   4(R2),C' '               BLANK
UCBEND   EQU   *
         MOREND
D3380    EQU  X'14'             MDR TYPE FOR STD MODELS
D3380D   EQU  X'1C'             MDR TYPE FOR 3380-D
D3380E   EQU  X'1B'             MDR TYPE FOR 3380-E
*  UCB LOOKUP WORK AREA AND PARM LIST VARIABLES
UWORK    DS    XL100             WORK AREA, MUST BE ZEROED
DEVCLASS DS    X                 DEVICE CLASS TO SEARCH FOR (DASD)
ADDRUCB  DS    F                 UCB ADDRESS (FULL WORD IN LENGTH)
         SPACE 1
CALLIST  CALL  ,(,,,),MF=L       LIST FORM FOR UCB LOOKUP
         SPACE 1
VIB      DSECT                   VTOC INFO BLOCK
VIBID    DC    CL4'VIB '         EYECATCHER
         DC    CL2' '
         DC    CL2' '
VIBDSCB  DC    X'00'             DSCBS PER TRACK
         DC    X'000000'
         DC    CL4' '
         DC    CL2' '
         DC    CL2' '
         DC    CL2' '
         DC    CL2' '
         DC    CL2' '
VIBSER   DC    CL6' '            VOLSER
         PRINT NOGEN
         CVT   DSECT=YES,LIST=NO
         EJECT
         IEFUCBOB LIST=NO
         IECDDCE
         END
./        ADD LIST=ALL,NAME=DISASM3B
         EJECT
***********************************************************************
* SVC NAME TABLE                                                      *
***********************************************************************
SVCOP    DS    0CL15                          SVC NAME TABLE
         DC    AL1(0),CL14'EXCP/XDAP'
SVCNAML  EQU   *-SVCOP                        LENGTH OF EACH ENTRY
         DC    AL1(1),CL14'WAIT/WAITR/...'
         DC    AL1(2),CL14'POST'
         DC    AL1(3),CL14'EXIT'
         DC    AL1(4),CL14'GETMAIN'
         DC    AL1(5),CL14'FREEMAIN'
         DC    AL1(6),CL14'LINK'
         DC    AL1(7),CL14'XCTL'
         DC    AL1(8),CL14'LOAD'
         DC    AL1(9),CL14'DELETE'
         DC    AL1(10),CL14'GET/FREEMAIN R'
         DC    AL1(11),CL14'TIME'
         DC    AL1(12),CL14'SYNCH'
         DC    AL1(13),CL14'ABEND'
         DC    AL1(14),CL14'SPIE'
         DC    AL1(15),CL14'ERREXCP'
         DC    AL1(16),CL14'PURGE'
         DC    AL1(17),CL14'RESTORE'
         DC    AL1(18),CL14'BLDL/FIND'
         DC    AL1(19),CL14'OPEN'
         DC    AL1(20),CL14'CLOSE'
         DC    AL1(21),CL14'STOW'
         DC    AL1(22),CL14'OPEN TYPE J'
         DC    AL1(23),CL14'CLOSE TYPE T'
         DC    AL1(24),CL14'DEVTYPE'
         DC    AL1(25),CL14'TRKBAL'
         DC    AL1(26),CL14'LOCATE, ETC'
         DC    AL1(27),CL14'OBTAIN'
         DC    AL1(28),CL14'''RESERVED'''
         DC    AL1(29),CL14'SCRATCH'
         DC    AL1(30),CL14'RENAME'
         DC    AL1(31),CL14'FEOV'
         DC    AL1(32),CL14'ALLOC'
         DC    AL1(33),CL14'IOHALT'
         DC    AL1(34),CL14'MGCR/QEDIT'
         DC    AL1(35),CL14'WTO/WTOR'
         DC    AL1(36),CL14'WTL'
         DC    AL1(37),CL14'SEGLD/SEGWT'
         DC    AL1(38),CL14'''RESERVED'''
         DC    AL1(39),CL14'LABEL'
         DC    AL1(40),CL14'EXTRACT'
         DC    AL1(41),CL14'IDENTIFY'
         DC    AL1(42),CL14'ATTACH'
         DC    AL1(43),CL14'CIRB'
         DC    AL1(44),CL14'CHAP'
         DC    AL1(45),CL14'OVLYBRCH'
         DC    AL1(46),CL14'TTIMER'
         DC    AL1(47),CL14'STIMER'
         DC    AL1(48),CL14'DEQ'
         DC    AL1(49),CL14'''RESERVED'''
         DC    AL1(50),CL14'''RESERVED'''
         DC    AL1(51),CL14'SNAP/SDUMP'
         DC    AL1(52),CL14'RESTART'
         DC    AL1(53),CL14'RELEX'
         DC    AL1(54),CL14'DISABLE'
         DC    AL1(55),CL14'EOV'
         DC    AL1(56),CL14'ENQ/RESERVE'
         DC    AL1(57),CL14'FREEDBUF'
         DC    AL1(58),CL14'RELBUF/REQBUF'
         DC    AL1(59),CL14'OLTEP'
         DC    AL1(60),CL14'(E)STAE/STAI'
         DC    AL1(61),CL14'IKJEGS6A'
         DC    AL1(62),CL14'DETACH'
         DC    AL1(63),CL14'CHKPT'
         DC    AL1(64),CL14'RDJFCB'
         DC    AL1(65),CL14'''RESERVED'''
         DC    AL1(66),CL14'BTAMTEST'
         DC    AL1(67),CL14'''RESERVED'''
         DC    AL1(68),CL14'SYNAD...'
         DC    AL1(69),CL14'BSP'
         DC    AL1(70),CL14'GSERV'
         DC    AL1(71),CL14'ASGNBFR, ETC'
         DC    AL1(72),CL14'''NO MACRO'''
         DC    AL1(73),CL14'SPAR'
         DC    AL1(74),CL14'DAR'
         DC    AL1(75),CL14'DQUEUE'
         DC    AL1(76),CL14'IFBSTAT'
         DC    AL1(78),CL14'LSPACE'
         DC    AL1(79),CL14'STATUS'
         DC    AL1(81),CL14'SETPRT'
         DC    AL1(82),CL14'     '
         DC    AL1(83),CL14'SMFWTM'
         DC    AL1(84),CL14'GRAPHICS'
         DC    AL1(85),CL14'DDRSWAP'
         DC    AL1(86),CL14'ATLAS'
         DC    AL1(87),CL14'DOM'
         DC    AL1(88),CL14'     '
         DC    AL1(91),CL14'VOLSTAT'
         DC    AL1(92),CL14'TCBEXCP'
         DC    AL1(93),CL14'TGET/TPUT'
         DC    AL1(94),CL14'STCC'
         DC    AL1(95),CL14'SYSEVENT'
         DC    AL1(96),CL14'STAX'
         DC    AL1(97),CL14'IKJEGS9G'
         DC    AL1(98),CL14'PROTECT'
         DC    AL1(99),CL14'DYNALLOC'
         DC    AL1(100),CL14'IKJEFFIB'
         DC    AL1(101),CL14'QTIP'
         DC    AL1(102),CL14'AQCTL (TCAM)'
         DC    AL1(103),CL14'XLATE'
         DC    AL1(104),CL14'TOPCTL (TCAM)'
         DC    AL1(105),CL14'IMGLIB'
         DC    AL1(107),CL14'MODESET'
         DC    AL1(109),CL14'ESR TYPE 4'
         DC    AL1(110),CL14'DSTATUS'
         DC    AL1(111),CL14'''NO MACRO'''
         DC    AL1(112),CL14'PGRLSE'
         DC    AL1(113),CL14'PGFIX/PGFREE/..'
         DC    AL1(114),CL14'EXCPVR'
         DC    AL1(116),CL14'ESR TYPE 1'
         DC    AL1(117),CL14'DEBCHK'
         DC    AL1(119),CL14'TESTAUTH'
         DC    AL1(120),CL14'GETMAIN/FREEMAIN'
         DC    AL1(121),CL14'VSAM'
         DC    AL1(122),CL14'ESR TYPE 2'
         DC    AL1(123),CL14'PURGEDQ'
         DC    AL1(124),CL14'TPIO'
         DC    AL1(125),CL14'EVENTS'
         DC    AL1(126),CL14'MSS INTERFACE'
         DC    AL1(127),CL14' '
         DC    AL1(128),CL14' '
         DC    AL1(129),CL14' '
         DC    AL1(130),CL14'RACHECK'
         DC    AL1(131),CL14'RACINIT'
         DC    AL1(132),CL14'RACLIST'
         DC    AL1(133),CL14'RACDEF'
         DC    AL1(134),CL14' '
         DC    AL1(135),CL14' '
         DC    AL1(136),CL14' '
         DC    AL1(137),CL14'ESR TYPE 6'
         DC    AL1(138),CL14'PGSER (XA)'
         DC    AL1(139),CL14'CVAF...'
* SVCS BELOW 200 ARE RESERVED FOR IBM
         DC    AL1(215),CL14'CICS(HPSVC)  '
         DC    AL1(216),CL14'CICS(CSVC)   '
         DC    AL1(235),CL14'             '
         DC    AL1(240),CL14'             '
         DC    AL1(241),CL14'VSAMTUNE     '
         DC    AL1(242),CL14'UCC7         '
         DC    AL1(243),CL14'             '
         DC    AL1(244),CL14'             '
         DC    AL1(245),CL14'UCC11        '
         DC    AL1(246),CL14'             '
         DC    AL1(247),CL14'UCC1 (X)     '
         DC    AL1(248),CL14'UCC1 (Y)     '
         DC    AL1(249),CL14'DIAGNOSE     '
         DC    AL1(250),CL14'             '
         DC    AL1(251),CL14'             '
         DC    AL1(252),CL14'             '
         DC    AL1(253),CL14'             '
         DC    AL1(254),CL14'             '
         DC    AL1(255),CL14'JES3 SDF     '
         DC    X'FF'                   END OF TABLE
./        ADD LIST=ALL,NAME=DSSLVL
**********************************************************************
* YOU WILL NEED THE ADRMCLVL MACRO WHICH CAN BE OBTAINED FROM        *
* SYS1.SAMPLIB.                                                      *
**********************************************************************
DSSLVL   MOWSTART
         ADRMCLVL                         GET DFDSS LEVEL
         ST    R1,DSSVMR                  SAVE RESULT
         TM    DSSVMR,X'04'               TEST FOR SUCCESSFUL GET
         BZ    OK                         DFDSS IS THERE
         MVC   MSG+10(11),=C'UNAVAILABLE'
         TPUT  MSG,L'MSG                  UNAVAILABLE MSG
         B     FIN                        RETURN
OK       EQU   *
         SLL   R1,8                       MOVE IT LEFT
         ST    R1,DSSVMR                  SAVE IT AGAIN
         UNPK  DOUBLE(8),DSSVMR           UNPACK NUMBERS
         MVC   MASK(4),DOUBLE+2           MOVE INTO MESSAGE
         TPUT  MSG,LMSG                   TELL RELEASE ETC
FIN      EQU   *
         MOREND
MSG      DC    C'DF/DSS IS VER/REL/MOD '
MASK     DC    C'VMMR'
LMSG     EQU   *-MSG
DOUBLE   DC    D'0'
DSSVMR   DC    F'0'
         END
./        ADD LIST=ALL,NAME=JULSUB
         TITLE '   J U L S U B   '
************************************************************
*                                                          *
*        'JULSUB'                                          *
*                                                          *
************************************************************
         SPACE
*        WRITTEN BY. BILL GODFREY,  PLANNING RESEARCH CORPORATION.
*        INSTALLATION. PRC COMPUTER CENTER, MCLEAN VA.
*        DATE WRITTEN. JUNE 4 1976.
*        DATE UPDATED. APRIL 23 1980.
*        ATTRIBUTES. RE-ENTRANT.
*        REMARKS.
*            THIS SUBPROGRAM CONVERTS A DATE FROM ONE FORMAT
*            TO ANOTHER. THE DIFFERENT FORMATS ARE:
*
*            INPUT
*               1   JULIAN       BINARY    F'YYYYDDD'
*               2   STANDARD     BINARY    F'YYYYMMDD'
*               3   JULIAN       PACKED    PL4'YYYYDDDF'
*
*            OUTPUT
*               1   JULIAN       BINARY    F'YYYYDDD'
*               2   STANDARD     BINARY    F'YYYYMMDD'
*               4   STANDARD     8-CHAR    CL8'MM/DD/YY'
*               8   ALPHA        8-CHAR    CL8'03JUN76 '
*              16   PROSE        20-CHAR   CL20'JUNE 3 1976'
*              32   FRSTLAST     BINARY    F'0' 1 - FIRST OF MONTH
*                                               2 - LAST OF MONTH
*              64   WEEKDAYCODE  BINARY    F'0' (SATURDAY)
*             128   WEEKDAY      12-CHAR   CL12'SATURDAY'
*             256   TIME         BINARY    F'100THS SEC SINCE MIDNITE'
*             512   TIME         8-CHAR    CL8'HH:MM:SS'
*
*            INPUT MUST BE EITHER JULIAN OR STANDARD.
*
*            PASS THE FOLLOWING PARAMETERS VIA A LIST OF ADDRESSES
*            POINTED TO BY REGISTER 1
*               1   THE INPUT DATE
*               2   A FULLWORD CONTAINING THE NUMERIC CODE
*                   WHICH DEFINES THE INPUT FORMAT
*               3   THE RECEIVING FIELD FOR OUTPUT
*               4   A FULLWORD CONTAINING THE NUMERIC CODE
*                   WHICH DEFINES THE OUTPUT FORMAT
*               5   A 256 BYTE WORKAREA (ON DOUBLEWORD BOUNDARY)
*            NOTES.
*               1) MAKE OUTPUT 00YY IF INPUT IS 00YY.
*               2) FOR CURRENT DATE, USE TYPE 1 DATE ZERO.
         SPACE
         MACRO
         STAMP
         LCLC  &ASMTIME
&ASMTIME SETC  '&SYSTIME'(1,5)
         DC    CL16' &SYSDATE &ASMTIME '
         MEND
         SPACE
JULSUB CSECT
         USING *,R12
         B     @PROLOG-*(,15)
         DC    AL1(11),CL11'JULSUB   '
         STAMP
@PROLOG  STM   14,12,12(13)
         LR    R12,15
         LR    R2,R1
*        GETMAIN R,LV=@DATAL       GET SAVEAREA ADDRESS
         L     R1,16(,R1)          GET SAVEAREA ADDRESS
         ST    13,4(,1)
         ST    1,8(,13)
         LR    13,1
         LR    R1,R2
         USING @DATA,13
         SPACE
         LM    R2,R3,0(R1)         GET INPUT AND DESCRIPTOR
         LM    R4,R5,8(R1)         GET OUTPUT AND DESCRIPTOR
         MVC   INPUT(4),0(R2)      COPY INPUT
         XC    DOUBLE,DOUBLE
         SLR   R14,R14             ZERO R14
         ST    R14,FRSTLAST
         ST    R14,TIMEB
         CLI   3(R3),INP003        INPUT JULIAN PACKED?
         BNE   INP01               NO - BRANCH
         SPACE
*              INPUT IS JULIAN PACKED
         SPACE
         MVC   DOUBLE+4(4),INPUT   MOVE INPUT
         CVB   R1,DOUBLE
         ST    R1,JB
JULCOMM  L     R14,DOUBLE+4        SAVE 00YYDDDF
         LH    R1,DOUBLE+4         GET 00YY
         SLL   R1,16               GET 00YY0000
         SRL   R1,12               GET 00000YY0
         ST    R1,DOUBLE+4         STORE BACK 00000YY0
         OI    DOUBLE+7,X'0F'      SET SIGN
         CVB   R1,DOUBLE
         ST    R1,YYYYB
         CH    R1,=H'99'
         BH    *+8
         AH    R1,=H'1900'
         ST    R1,CENTB
         UNPK  YYYYC,DOUBLE+5(3)     SAVE YYYY CHAR
         MVC   YYC,YYYYC+2
*
         ST    R14,DOUBLE+4        RESTORE 00YYDDDF
         XC    DOUBLE(6),DOUBLE      00YYDDDF TO 0000DDDF
         OI    DOUBLE+7,X'0F'      SET SIGN
         UNPK  DDDC,DOUBLE+4(4)    SAVE DDD CHAR
         CVB   R1,DOUBLE           CONVERT DDD TO BINARY
         ST    R1,DDDB             SAVE DDD BINARY
         SPACE
         BAL   R9,TODD
         BAL   R9,TOSB
         BAL   R9,TOMON
         BAL   R9,TOPROSE
         BAL   R9,TOWEEK
         BAL   R9,TOTIME
         BAL   R9,OUTPUT
         B     EXIT0
         SPACE
INP01    CLI   3(R3),INP001        INPUT JULIAN BINARY?
         BNE   INP02               NO - BRANCH
         L     R1,INPUT            GET BINARY YYYYDDD
         LTR   R1,R1               ZERO?
         BNZ   INP01A              NO - BRANCH
         TIME  BIN
         ST    R0,TIMEB            SAVE TIME
         SLR   R0,R0
         STM   R0,R1,DOUBLE
         CVB   R1,DOUBLE
         B     INP01B
INP01A   CVD   R1,DOUBLE           TO DECIMAL
INP01B   ST    R1,JB
         B     JULCOMM             PROCEED AS IF INP003
         SPACE
*              CONVERT JULIAN DATE TO MONTH-DAY-YEAR
*
*                 INPUT  - YYYYB AND DDDB   (ALSO YYC)
*
*                 OUTPUT - MMB AND DDB, MMC AND DDC, FRSTLAST
         SPACE
TODD     MVC   DPM(26),DAYSPMON
         TM    YYYYB+3,B'00000011' IS YEAR A MULTIPLE OF 4?
         BNZ   DPM365              NO - BRANCH
         CLC   YYC,=C'00'          DIVISIBLE BY 100?
         BNE   DPM366              NO - BRANCH
         L     R15,CENTB
         SLR   R14,R14
         D     R14,=F'400'
         LTR   R14,R14             EVENLY DIVISIBLE BY 400?
         BNZ   DPM365              NO - NOT A LEAP YEAR
DPM366   MVI   DPM+3,29            CHANGE FEB TO 29 DAYS
DPM365   EQU   *
         LA    R14,2               INDEX FOR DPM
         LR    R0,R14              INDEX INCREMENT
         L     R1,DDDB             DAY OF YEAR
DPMLOOP  CH    R1,DPM-2(R14)       DAY LESS THAN OR EQ ENTRY?
         BE    DPMEND              EQUAL - BRANCH
         BL    DPMWIN              LESS - BRANCH
         SH    R1,DPM-2(R14)       NO, SUBTRACT ENTRY FROM DAY
         ALR   R14,R0              ADD 2 TO INDEX
         B     DPMLOOP             LOOP
DPMEND   MVI   FRSTLAST+3,2        LAST DAY OF MONTH
         B     DPMCOMM
DPMWIN   CH    R1,=H'1'            FIRST OF MONTH?
         BNE   DPMCOMM             NO - BRANCH
         MVI   FRSTLAST+3,1        FIRST DAY OF MONTH
DPMCOMM  SRL   R14,1               HALVE INDEX TO GET MM
         ST    R1,DDB              SAVE DD BINARY
         CVD   R1,DOUBLE           CONVERT TO PACKED
         OI    DOUBLE+7,X'0F'      SET SIGN
         UNPK  DDC,DOUBLE+6(2)     SAVE DD CHAR
         ST    R14,MMB             SAVE MM BINARY
         CVD   R14,DOUBLE          CONVERT TO PACKED
         OI    DOUBLE+7,X'0F'      SET SIGN
         UNPK  MMC,DOUBLE+6(2)     SAVE MM CHAR
         MVI   SLASH1,C'/'
         MVI   SLASH2,C'/'
         BR    R9
         SPACE
*              CONVERT MONTH NUMBER TO MONTH NAME
*
*                 INPUT  - MMB     (ALSO DDC AND YYC FOR MOVE)
*
*                 OUTPUT - MONTH AND ALPHA
         SPACE
TOMON    L     R15,MMB
         MH    R15,=H'9'           MULT BY 9
         LA    R15,ALPHAMON-9(R15) ADDRESS OF ENTRY
         MVC   MONTH,0(R15)        SAVE PROSE MONTH
         MVC   ALPHA+2(3),0(R15)   SAVE ALPHA MONTH
         MVC   ALPHA(2),DDC
         MVC   ALPHA+5(2),YYC
         MVI   ALPHA+7,C' '
         BR    R9
         SPACE
*              BUILD PROSE DATE
*
*                 INPUT  - MONTH, DDC, YYYYC
         SPACE
TOPROSE  TM    3(R5),OUT016
         BZR   R9
         MVI   PROSE,C' '
         MVC   PROSE+1(L'PROSE-1),PROSE
         MVC   PROSE(9),MONTH
         LA    R1,PROSE+9
PROSE01  CLI   0(R1),C' '          BLANK?
         BNE   PROSE02             NO - FOUND LAST LETTER
         BCT   R1,PROSE01          BACK UP AND BRANCH
PROSE02  MVC   2(2,R1),DDC
         CLI   2(R1),C'0'          LEADING ZERO?
         BNE   PROSE03             NO - BRANCH
         MVC   2(1,R1),3(R1)       YES - SHIFT
         MVI   3(R1),C' '
         BCTR  R1,0
PROSE03  EQU   *
*        MVI   4(R1),C','          COMMA AFTER DAY
*        LA    R1,1(,R1)           ADD 1 FOR COMMA
         MVC   5(4,R1),YYYYC
         CLC   5(2,R1),=C'00'
         BNE   *+10
         MVC   5(2,R1),=C'19'
         BR    R9
         SPACE
*              INPUT IS YYYY/MM/DD BINARY
         SPACE
INP02    L     R1,INPUT
         CVD   R1,DOUBLE           GET 0000000Y YYYMMDDF
         LM    R14,R15,DOUBLE
         NC    DOUBLE,=X'0000000000000FFF' ISOLATE 00000DDF
         CVB   R1,DOUBLE
         ST    R1,DDB
         OI    DOUBLE+7,X'0F'
         UNPK  DDC,DOUBLE+6(2)
*
         STM   R14,R15,DOUBLE
         NC    DOUBLE,=X'00000000000FF00F' ISOLATE 000MM00F
         L     R1,DOUBLE+4
         SRL   R1,8
         ST    R1,DOUBLE+4
         OI    DOUBLE+7,X'0F'
         CVB   R1,DOUBLE
         CH    R1,=H'12'
         BNH   *+8
         LA    R1,13               SET ALL BAD MONTHS TO 13
         ST    R1,MMB
         UNPK  MMC,DOUBLE+6(2)
*
         SRDL  R14,4               GET YYYYMMDD
         SLR   R14,R14             GET 00000000 IN R14
         SRL   R15,12              GET 000YYYYM IN R15
         STM   R14,R15,DOUBLE
         OI    DOUBLE+7,X'0F'
         CVB   R1,DOUBLE
         ST    R1,YYYYB
         CH    R1,=H'99'
         BH    *+8
         AH    R1,=H'1900'
         ST    R1,CENTB
         UNPK  YYYYC,DOUBLE+5(3)
         MVC   YYC,YYYYC+2
         MVI   SLASH1,C'/'
         MVI   SLASH2,C'/'
*
         BAL   R9,TOSB
         BAL   R9,TOJUL
         BAL   R9,TOMON
         BAL   R9,TOPROSE
         BAL   R9,TOWEEK
         BAL   R9,TOTIME
         BAL   R9,OUTPUT
         B     EXIT0
         SPACE
*              CONVERT M/D/Y TO JULIAN
*
*                 INPUT  - MMB, DDB, YYYYB
*
*                 OUTPUT - DDDB, DDDC, JB
         SPACE
TOJUL    MVC   DPM(26),DAYSPMON
         TM    YYYYB+3,B'00000011' IS YEAR A MULTIPLE OF 4?
         BNZ   JUL365              NO - BRANCH
         CLC   YYC,=C'00'          DIVISIBLE BY 100?
         BNE   JUL366              NO - BRANCH
         L     R15,CENTB
         SLR   R14,R14
         D     R14,=F'400'
         LTR   R14,R14             EVENLY DIVISIBLE BY 400?
         BNZ   JUL365              NO - NOT A LEAP YEAR
JUL366   MVI   DPM+3,29             CHANGE FEB TO 29 DAYS
JUL365   EQU   *
         L     R15,DDB              GET DAYS IN CURRENT MONTH
         LR    R0,R15               SAVE IT TO COMPARE FOR LAST DAY
         L     R14,MMB              GET CURRENT MONTH
         BCTR  R14,0                GET NO. OF COMPLETED MONTHS
         LA    R1,DPM
         LTR   R14,R14              JANUARY?
         BNP   JULEND               YES - BRANCH
         B     *+8
JULOOP   LA    R1,2(,R1)            POINT TO NEXT MONTH
         AH    R15,0(,R1)           ADD DAYS IN MONTH TO TOTAL
         BCT   R14,JULOOP
JULEND   CH    R0,0(,R1)            LAST DAY OF MONTH?
         BNE   *+8                  NO
         MVI   FRSTLAST+3,2         YES
         CH    R0,=H'1'             FIRST DAY OF MONTH?
         BNE   *+8                  NO
         MVI   FRSTLAST+3,1         YES
         ST    R15,DDDB             SAVE DDD
         CVD   R15,DOUBLE
         OI    DOUBLE+7,X'0F'       SET SIGN
         UNPK  DDDC,DOUBLE+4(4)     SAVE DDD CHAR
         MVC   JC(2),YYC
         PACK  DOUBLE,JC
         CVB   R1,DOUBLE
         ST    R1,JB
         BR    R9
         SPACE
*
*
*
         SPACE
TOSB     MVC   WORK(4),YYYYC
         MVC   WORK+4(2),MMC
         MVC   WORK+6(2),DDC
         PACK  DOUBLE,WORK(8)
         CVB   R1,DOUBLE
         ST    R1,SB
         BR    R9
         SPACE
*              GET DAY OF WEEK
*
*                 INPUT  - MMB, DDB, YYYYB
*
*                 OUTPUT - WEEKB, WEEKC
*
*              N = D + 2M + 3(M+1)/5 + Y + Y/4 - Y/100 + Y/400 + 2
*
*                 WHERE M = 3-14 (JAN,FEB ARE 13,14 OF Y-1)
*
*                 N/7 LEAVES REMAINDER 0-6, 0 INDICATING SATURDAY
*
TOWEEK   TM    3(R5),OUT064+OUT128
         BZR   R9
         L     R1,DDB              SET N = D
         L     R15,CENTB
         L     R14,MMB
         CH    R14,=H'2'           JAN OR FEB?
         BH    WEEKMMOK
         BE    WEEKFEB
         LA    R14,13              SET M=13
         B     WEEKYMIN
WEEKFEB  LA    R14,14              SET M=14
WEEKYMIN BCTR  R15,0               SET Y = Y-1
WEEKMMOK LR    R0,R14              COPY M
         ALR   R0,R0               GET 2M
         ALR   R1,R0               SET N = N + 2M
         LR    R0,R15              SAVE REDEFINED Y
         SPACE
         LA    R14,1(,R14)         GET M+1
         MH    R14,=H'3'           GET 3(M+1)
         SRDL  R14,32              SHIFT INTO R15, ZERO R14
         D     R14,=F'5'           GET 3(M+1)/5 IN R15
         ALR   R1,R15              SET N = N + 3(M+1)/5
         SPACE
         LR    R15,R0              GET Y
         ALR   R1,R15              SET N = N + Y
         SLR   R14,R14             ZERO R14
         D     R14,=F'4'           GET Y/4
         ALR   R1,R15              SET N = N + Y/4
         SPACE
         LR    R15,R0              GET Y
         SLR   R14,R14             ZERO R14
         D     R14,=F'100'         GET Y/100
         SLR   R1,R15              SET N = N - Y/100
         SPACE
         LR    R15,R0              GET Y
         SLR   R14,R14             ZERO R14
         D     R14,=F'400'         GET Y/400
         ALR   R1,R15              SET N = N + Y/400
         LA    R15,2               GET 2
         ALR   R1,R15              SET N = N + 2
         SLR   R0,R0               ZERO R0
         D     R0,=F'7'            SET N = N/7
         ST    R0,WEEKB            SAVE REMAINDER
         LR    R1,R0
         MH    R1,=H'9'
         LA    R14,WEEKDAYS(R1)    POINT TO NAME
         MVC   WEEKC(9),0(R14)     MOVE NAME
         MVC   WEEKC+9(3),WEEKBLNK PLUS 3 BLANKS
         BR    R9
         SPACE
*
*              CONVERT TIMEB TO TIMEC
*
*                 DIVIDE BY 10,10,10,6,10,6,10,6
*
TOTIME   TM    2(R5),OUT512
         BNOR  R9
         L     R15,TIMEB
         LA    R6,10               INITIAL DIVISOR
         LA    R7,12               SET DIVISOR MASK
         LA    R8,32               SHIFT COUNT
DECLOOP  SR    R14,R14
         DR    R14,R6
         LR    R0,R14              SAVE REMAINDER
         SRDL  R0,4                SHIFT INTO R1
         SH    R8,=H'4'            DECREMENT SHIFT COUNT
         LTR   R15,R15             QUOTIENT ZERO?
         BZ    TOTIMX              YES - BRANCH
         CL    R8,=F'24'           IF COUNT LT 24
         BNL   DECLOOP             NO - BRANCH
         XR    R6,R7               10 TO 6 TO 10 ETC
         B     DECLOOP
TOTIMX   SRL   R1,0(R8)            SHIFT REMAINING BITS
         SRL   R1,4                GET 0HHMMSST
         ST    R1,DOUBLE
         OI    DOUBLE+3,X'0F'
         MVC   DOUBLE+6(10),=X'402120204B20204B2020'
         ED    DOUBLE+6(10),DOUBLE
         MVC   TIMEC,DOUBLE+8
         BR    R9
         SPACE
OUTPUT   LR    R1,R4
         TM    3(R5),OUT001
         BZ    *+14
         MVC   0(4,R1),JB
         LA    R1,4(,R1)
         TM    3(R5),OUT002
         BZ    *+14
         MVC   0(4,R1),SB
         LA    R1,4(,R1)
         TM    3(R5),OUT004
         BZ    *+14
         MVC   0(8,R1),SC
         LA    R1,8(,R1)
         TM    3(R5),OUT008
         BZ    *+14
         MVC   0(8,R1),ALPHA
         LA    R1,8(,R1)
         TM    3(R5),OUT016
         BZ    *+14
         MVC   0(L'PROSE,R1),PROSE
         LA    R1,L'PROSE(,R1)
         TM    3(R5),OUT032
         BZ    *+14
         MVC   0(4,R1),FRSTLAST
         LA    R1,4(,R1)
         TM    3(R5),OUT064
         BZ    *+14
         MVC   0(4,R1),WEEKB
         LA    R1,4(,R1)
         TM    3(R5),OUT128
         BZ    *+14
         MVC   0(12,R1),WEEKC
         LA    R1,12(,R1)
         TM    2(R5),OUT256
         BZ    *+14
         MVC   0(4,R1),TIMEB
         LA    R1,4(,R1)
         TM    2(R5),OUT512
         BZ    *+14
         MVC   0(8,R1),TIMEC
         LA    R1,8(,R1)
         BR    R9
         SPACE
EXIT0    SR    15,15
EXIT     LR    1,13
         L     13,4(,13)
         ST    15,16(,13)
*        FREEMAIN R,A=(1),LV=@DATAL  (COMMENT)
         LM    14,12,12(13)
         BR    14
         SPACE
************************************************************
*                                                          *
*        CONSTANTS                                         *
*                                                          *
************************************************************
         SPACE
DAYSPMON DC    H'31,28,31,30,31,30,31,31,30,31,30,31,999'
ALPHAMON DC    CL36'JANUARY  FEBRUARY MARCH    APRIL    '
         DC    CL36'MAY      JUNE     JULY     AUGUST   '
         DC    CL36'SEPTEMBEROCTOBER  NOVEMBER DECEMBER '
         DC    CL09'UNKNOWN  '
WEEKDAYS DC    CL36'SATURDAY SUNDAY   MONDAY   TUESDAY  '
         DC    CL27'WEDNESDAYTHURSDAY FRIDAY   '
WEEKBLNK EQU   WEEKDAYS+15         3 BLANKS
         LTORG
         SPACE
************************************************************
*                                                          *
*        DSECTS                                            *
*                                                          *
************************************************************
         SPACE
@DATA    DSECT
         DS    18F
INPUT    DS    CL8
DOUBLE   DS    D
WORK     DS    8C
SC       DS    0CL8
MMC      DS    CL2
SLASH1   DS    C
DDC      DS    CL2
SLASH2   DS    C
YYC      DS    CL2
YYYYC    DS    CL4
DDB      DS    F
MMB      DS    F
YYYYB    DS    F
CENTB    DS    F
DDDB     DS    F
JB       DS    F
SB       DS    F
WEEKB    DS    F
FRSTLAST DS    F
TIMEB    DS    F
TIMEC    DS    CL8
JC       DS    0CL5
         DS    CL2
DDDC     DS    CL3
MONTH    DS    CL9
ALPHA    DS    0CL8
         DS    CL2
MON      DS    CL3
         DS    CL2
         DS    CL1                 BLANK FILLER LAST BYTE OF ALPHA
WEEKC    DS    CL12
PROSE    DS    CL20
DPM      DS    13H
@DATAL   EQU   *-@DATA
         SPACE
INP001   EQU   1
INP002   EQU   2
INP003   EQU   3
OUT001   EQU   1
OUT002   EQU   2
OUT004   EQU   4
OUT008   EQU   8
OUT016   EQU   16
OUT032   EQU   32
OUT064   EQU   64
OUT128   EQU   128
OUT256   EQU   1
OUT512   EQU   2
         SPACE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
./        ADD LIST=ALL,NAME=LASTCLPA
LASTCLPA MOWSTART
***********************************************************************
*                                                                     *
* THIS PROGRAM IS USED TO DETERMINE THE DATE AND TIME OF THE MOST     *
* RECENT CLPA. IT CAN BE USED TO VERIFY IF THE OPERATOR REALLY DID    *
* DO A CLPA IN RESPONSE TO IEA101A AT IPL TIME.                       *
*                                                                     *
***********************************************************************
         USING CVTMAP,R11
         L     R11,16                   A(CVT)
         L     R1,0(R1)
         LH    R2,0(R1)                 TEST FOR PARM
         LTR   R2,R2                    TEST FOR NOT ZERO
         BNZ   PARM                     PARM SUPPLIED
* NO PARM, LOOK UP NAME OF PAGING DATASETS
         SETMODE 31                     31-BIT ADDRESSING ON
         L     R2,CVTASMVT              A(ASMVT)
         L     R5,8(R2)                 A(PAGING ART)
         L     R3,24(R5)                A(DSN LIST)
         MVC   PAGEDSN(44),0(R3)      PLPA NAME (ALWAYS FIRST IN LIST)
         SETMODE 24                     BACK TO 24-BIT ADDRESSES
         B     OPEN
PARM     EQU   *
         BCTR  R2,0                     LESS ONE FOR EXECUTE
         EX    R2,MVCDSN1               MOVE NAME TO OUR DATA AREA
OPEN     EQU   *
         USING SHWOUT,R10
         USING SHWASSOC,R9
***********************************************************************
*  USE SHOWCAT FOR STARTERS TO GET CATALOG ACB AND CI FOR DSET        *
***********************************************************************
         LA    R10,AREA                      -> TO RETURN DATA AREA
         SHOWCAT AREA=AREA,NAME=PAGEDSN      ISSUE MACRO TO GET INFO
         BAL   R14,SETPTR                    SET -> TO ASSOC
         MVC   CI(3),SHWACI                  CI OF THE ASSOCIATED ENTRY
         L     R2,SHWACBP                    GET CATALOG ACB POINTER
         ST    R2,ACBA                       AND SAVE IT
         TM    48(R2),X'10'                  IS ACB OPEN?
         BO    SETPL                         YES, SO OK TO GO ON
         TPUT  =C'CATALOG NOT OPEN',16       TELL CALLER
         B     RETURN                        AND EXIT
         SPACE
***********************************************************************
* SET UP CATALOG FIELD PARAMETER LIST                                 *
***********************************************************************
SETPL    EQU   *
         USING CTGFL,R9
         LA    R9,FLD1
         MVI   CTGFLDNO,X'01'                1 ENTRY
         LA    R2,FLDNM1                     A(FIELDNAME)
         MVC   0(08,R2),=C'ENTNAME '         MOVE IN FIELD NAME
         ST    R2,CTGFLDNM                   SAVE IT
         XC    CTGFLCHN(4),CTGFLCHN          ZERO IT OUT
         SPACE
         LA    R9,FLD2
         MVI   CTGFLDNO,X'01'                1 ENTRY
         LA    R2,FLDNM2                     A(FIELDNAME)
         MVC   0(08,R2),=C'DEVTYP  '         MOVE IN FIELD NAME
         ST    R2,CTGFLDNM                   SAVE IT
         XC    CTGFLCHN(4),CTGFLCHN          ZERO IT OUT
         SPACE
         LA    R9,FLD3
         MVI   CTGFLDNO,X'01'                1 ENTRY
         LA    R2,FLDNM3                     A(FIELDNAME)
         MVC   0(08,R2),=C'VOLSER  '         MOVE IN FIELD NAME
         ST    R2,CTGFLDNM                   SAVE IT
         XC    CTGFLCHN(4),CTGFLCHN          ZERO IT OUT
         DROP  R9
         SPACE
***********************************************************************
* SET UP CATALOG PARAMETER LIST                                       *
***********************************************************************
         USING CTGPL,R1
         LA    R1,CATPL            -> CATALOG PARAMETER LIST
         OI    CTGOPTN1,CTGBYPSS
         NI    CTGOPTN1,255-(CTGNAME+CTGCNAME)   CI AND ACB PROVIDED
         XC    CTGOPTN2(1),CTGOPTN2              CLEAR
         OI    CTGOPTN3,CTGLOC+CTGNUM+CTGAM0
         LA    R2,CI               ADDRESS OF CONTROL INTERVAL
         ST    R2,CTGENT           SAVE IT
         LA    R2,ACBA             A(CATALOG ACB)
         ST    R2,CTGCAT           SAVE IT IN PARM LIST
         LA    R2,AREA             -> WORK AREA
         ST    R2,CTGWKA           SAVE IT IN PARM LIST
         MVI   CTGTYPE,C'D'        INDICATE 'DATA' REQD
         MVI   CTGNOFLD,X'03'      NUMBER OF FPLS
         LA    R2,FLD1             POINT TO CTGFIELD
         ST    R2,CTGFIELD         SAVE IT IN PARM LIST
         LA    R2,FLD2             POINT TO CTGFIELD
         ST    R2,CTGFL2           SAVE IT IN PARM LIST
         LA    R2,FLD3             POINT TO CTGFIELD
         ST    R2,CTGFL3           SAVE IT IN PARM LIST
         SPACE
         SVC   26                  ISSUE CATALOG SVC
         LTR   R15,R15             HOW DID WE DO?
         EJECT
         MVC   S99TUKY2+6(44),AREA+4    MOVE PAGEDSN INTO ALLOC LIST
         MVC   S99TUKY4+6(6),AREA+4+44+4  MOVE VOLSER INTO ALLOC LIST
         LA    R4,DTYP            -> TO DEVICE TYPE TABLE
         LA    R1,AREA+4+44       -> TO DEVICE TYPE
TYPLP    EQU   *
         CLC   0(4,R1),0(R4)      FIND MATCHING TYPE IN TABLE
         BE    GOTTYP             GOT IT
         LA    R4,8(R4)           -> NEXT ENTRY IN TABLE
         B     TYPLP              GO AND TEST IT
GOTTYP   EQU   *
         MVC   S99TUKY5+6(4),4(R4)  INDICATE UNIT(XXXX)
         MVI   S99VERB,X'01'      INDICATE ALLOC DSNAME(XXXXXXXX)
         LA    R1,S99RBPTR        ADDR OF PARM LIST FOR DYNALLOC.
         DYNALLOC ,               ALLOCATE DATASET
         LTR   R15,R15            CHECK RETURN CODE, ASSUME OK
         OPEN  PLPA               -> OPEN PLPA PAGE DATASET
         GET   PLPA               GET THE FIRST RECORD
         MVC   TSTAMP(8),32(R1)   MOVE DATA TO OUR DATA AREA
         CLOSE PLPA               CLOSE DATASET
         MVI   S99VERB,X'02'      INDICATE FREE DDNAME(XXXXXXXX)
         LA    R1,S99TUPLF        -> TO FREE TEXT UNITS
         ST    R1,S99TXTPP        AND SAVE IN PARM LIST
         LA    R1,S99RBPTR        ADDR OF PARM LIST FOR DYNALLOC.
         DYNALLOC ,               UNALLOCATE DATASET
         LTR   R15,R15            CHECK RETURN CODE, ASSUME OK
         MVC   TZONE(4),CVTTZ     MOVE TIME ZONE OFFSET INTO OUR LIST
         LA    R1,ARGS            -> TO ARGS FOR TODCN
         L     R15,=V(TODCN)      ADDRESS OF TIMESTAMP CONVERTER
         BALR  R14,R15            AND GO THERE
         MVC   TRET(2),=C'00'
         PACK  DOUBLE+4(4),TRET(7)
         LA    R1,PTRS
         L     R15,=V(JULSUB)
         BALR  R14,R15
         LA    R15,MSGDATA
         MVC   MSGDATA(9),DAYDATE+20 DAY OF WEEK
         LA    R15,MSGDATA+9
BACK1    CLI   0(R15),C' '
         BNE   *+8
         BCT   R15,BACK1
         LA    R15,2(,R15)
         MVC   0(20,R15),DAYDATE   MONTH DAY YEAR
         LA    R15,20(,R15)
BACK2    CLI   0(R15),C' '
         BNE   *+8
         BCT   R15,BACK2
         LA    R15,2(,R15)
         MVI   0(R15),C'('
         MVC   1(2,R15),TRET+2     YY
         MVI   3(R15),C'.'
         MVC   4(3,R15),TRET+4     DDD
         MVI   7(R15),C')'
         LA    R15,9(,R15)
         MVC   0(2,R15),=C'AT'
         LA    R15,3(,R15)         POINT TO WHERE HH.MM WILL GO
         MVC   0(8,R15),TRET+7     MOVE TIME IN
         MVI   2(R15),C':'         MOVE IN A COLON
         MVI   5(R15),C':'         MOVE IN A COLON
         TPUT  MSG,LMSG            TELL CALLER
RETURN   EQU   *
         MOREND
SETPTR   DS    0H
         LA    R9,SHWASS           -> ASSOC PTRS
         CLI   SHWTYPE,C'D'        DATA TYPE?
         BER   R14                 YES, RETURN
         CLI   SHWTYPE,C'I'        INDEX TYPE?
         BER   R14                 RETURN
         LA    R9,SHWASS0          -> TO ASSOC PTRS
         BR    R14                 RETURN
         EJECT
MSG      DC    C'LAST CLPA WAS ON '
MSGDATA  DC    CL60' '
LMSG     EQU   *-MSG
ARGS     DC    A(TZONE)
         DC    A(TSTAMP)
         DC    X'80',AL3(TRET)
TZONE    DC    F'0'
TSTAMP   DC    XL8'FFFFFFFFFFFFFFFF'
TRET     DC    CL24' '             RETURNED IS YYYYDDDHH.MM.SS.MMMMMM
DTYP     EQU   *
         DC    X'3010200E',C'3380'
         DC    X'3010200C',C'3375'
         DC    X'3010200B',C'3350'
         DC    X'30102009',C'3330'
         DC    X'3010200D',C'3330'   3330-1
         DC    X'3010200F',C'????'
PLPA     DCB   DDNAME=PLPA,DSORG=PS,RECFM=U,BLKSIZE=80,MACRF=GL
S99RBPTR DC    X'80',AL3(S99RB)       SVC 99 REQUEST BLOCK PTR
S99RB    DS    0F
S99RBLN  DC    AL1(20)                LENGTH=20 BYTES
S99VERB  DC    X'01'                  VERB CODE=01 (DSNAME ALLOC)
S99FLAG1 DC    X'1000'                DONT USE EXISTING ALLOC
S99ERROR DC    AL2(0)                 ERROR CODE
S99INFO  DC    AL2(0)                 INFO  CODE
S99TXTPP DC    A(S99TUPLA)            POINTER TO TEXT UNIT POINTERS
S99RSVD1 DC    A(0)                   RESERVED
S99FLAG2 DC    A(0)                   FLAGS 2
S99TUPLA DC    A(S99TUKY1)            TEXT UNIT POINTERS
         DC    A(S99TUKY2)
         DC    A(S99TUKY3)
         DC    A(S99TUKY4)
         DC    X'80',AL3(S99TUKY5)    LAST PARM
S99TUPLF DC    X'80',AL3(S99TUKY1)    LAST PARM
S99TUNIT DS    0F
S99TUKY1 DC    X'0001',X'0001',X'0004',C'PLPA'           DDN=PLPA
S99TUKY2 DC    X'0002',X'0001',X'002C',CL44'*    '       DSNAME
S99TUKY3 DC    X'0004',X'0001',X'0001',X'08'             SHR
S99TUKY4 DC    X'0010',X'0001',X'0006',CL6'VOLSER'       VOLSER
S99TUKY5 DC    X'0015',X'0001',X'0004',CL4'3380'         DEVTYP
         DS    0D
S99LENG  EQU   *-S99RBPTR                 LENGTH
* WORK AREAS FOR JULSUB ROUTINE FOR DAY DATE CONVERSION
DOUBLE   DS    D
WORK     DS    32D
DAYDATE  DC    CL48' '
INPARM   DC    F'3'
OUTPARM  DC    AL4(16+128)
PTRS     DC    AL4(DOUBLE+4)
         DC    AL4(INPARM)
         DC    AL4(DAYDATE)
         DC    AL4(OUTPARM)
         DC    X'80',AL3(WORK)
* WORK AREAS ETC FOR DSN LOOKUP
MVCDSN1  MVC   PAGEDSN(*-*),2(R1)       EXECUTED MOVE
PAGEDSN  DC    CL44' '
ACBA     DC    F'0'
CI       DC    CL3' '
FLDNM1   DC    CL8' '
FLDNM2   DC    CL8' '
FLDNM3   DC    CL8' '
AREA     DC    H'512'               WORK AREA FOR
         DC    510C' '              SHOWCAT AND SUBSEQUENTLY
         DC    2C' '                USED BY OTHER PARTS OF PGM
         SPACE
         DS    0F
CATPL    DC    (LCTGPL)X'00'
CTGFL2   DC    F'0'
CTGFL3   DC    F'0'
FLD1     DC    (LCTGFL)X'00'
FLD2     DC    (LCTGFL)X'00'
FLD3     DC    (LCTGFL)X'00'
         EJECT
         IEZCTGPL
         SPACE 5
         IEZCTGFL
         SPACE 5
         IGGSHWPL
         SPACE 5
         CVT   DSECT=YES
         END
./        ADD LIST=ALL,NAME=LNKLST
LNKLST   MOWSTART
***********************************************************************
* PROGRAM LISTS NAMES OF LINKLIST LIBRARIES                           *
***********************************************************************
         USING CVT,R2
         L     R2,16                   A(CVT)
         L     R3,CVTLLTA              A(LINKLIB LIST)
         L     R9,4(R3)                NUMBER OF ENTRIES IN LIST
         LA    R3,8(R3)                PAST FUNNY HEADING GARBAGE
         SR    R4,R4                   CLEAR IT OUT
NEXTNAME EQU   *
         IC    R4,0(R3)                GET LENGTH OF NAME
         LA    R3,1(R3)                POINT TO START OF NAME
         TPUT  (R3),(R4)               DISPLAY NAME OF LIBRARY
         LA    R3,44(R3)               POINT TO NEXT NAME
         BCT   R9,NEXTNAME             GET NEXT NAME
FIN      EQU   *
         MOREND
         CVT   DSECT=YES
         END
./        ADD LIST=ALL,NAME=RACFDS
RACFDS   MOWSTART
MOWWORK  DSECT
MSG1     DC    CL80' '
RACFDS   CSECT
***********************************************************************
* PROGRAM LISTS INFORMATION FROM THE RACF CVT                         *
***********************************************************************
         USING CVT,R2
         L     R2,16                      POINT TO CVT
         USING RCVT,R3
         L     R3,CVTRAC                  POINT TO RACF CVT
         LTR   R3,R3                      CHECK IT
         BZ    FIN                        NOT SET
PUTNAME  EQU   *
         TPUT  RCVTDSN,L'RCVTDSN          DISPLAY RACF DATASET NAME
         MVI   MSG1,X'40'                 A BLANK
         MVC   MSG1+1(79),MSG1            BLANK IT OUT
         LA    R4,MSG1                    POINT TO MESSAGE AREA
         TM    RCVTSTAT,RCVTRNA           IS IT ACTIVE
         BZ    T1
         MVC   0(12,R4),=C'NOT ACTIVE, '  MESSAGE TO SAY ITS NOT ACTIVE
         LA    R4,12(R4)                  NEXT MESSAGE SLOT
T1       EQU   *
         TM    RCVTSTAT,RCVTNLS           BYPASS STATS
         BZ    T2
         MVC   0(14,R4),=C'BYPASS STATS, '
         LA    R4,14(R4)
T2       EQU   *
         BCTR  R4,0
         MVI   0(R4),X'40'
         TPUT  MSG1,L'MSG1
FIN      EQU   *
         MOREND
         ICHPRCVT
         CVT   DSECT=YES
         END
./        ADD LIST=ALL,NAME=SMFDS
SMFDS    MOWSTART
**********************************************************************
* PROGRAM EMULATES THE OPERATOR D SMF COMMAND FOR TSO USERS.         *
**********************************************************************
SMFIDISP L     R4,16                CVT
         L     R4,196(0,R4)         SMCA
         TM    1(R4),X'80'          SMF RECORDING REQUESTED
         BO    SMFIN                YES, SKIP MESSAGE
         TPUT  SMFOFF,80            TELL USE SMF IS INACTIVE
         B     FIN                  AND QUIT
SMFIN    EQU   *
         L     R5,248(R4)           A(END OF RDS). RDS IS DESCRIBED IN
         L     R4,244(R4)           RDS            FICHE FOR IEECB916.
         TPUT  SMFTITLE,80
MORSMFDS EQU   *
         MVC   SMFANS(10),16(R4)    SMF DSN ID
         MVC   SMFANS+12(6),26(R4)  SMF VOLSER
         MVC   SMFANS+19(9),=C'ALTERNATE'
         TM    12(R4),X'04'         DS ACTIVE?
         BO    *+10                 NO
         MVC   SMFANS+19(9),=C'ACTIVE   '
         TM    12(R4),X'08'         DUMP REQD?
         BZ    *+10
         MVC   SMFANS+19(9),=C'DUMP REQD'
         TM    13(R5),X'60'         I/O ERROR
         BZ    *+10                 NO
         MVC   SMFANS+19(9),=C'I/O ERROR'
         SR    R14,R14
         L     R15,44(0,R4)         SMF DS NEXT BLOCK
         BCTR  R15,0
         CVD   R15,DOUBLEB
         M     R14,=F'100'
         L     R1,40(0,R4)          SMF DS CAPACITY
         CVD   R1,DOUBLEA
         DR    R14,R1               PERCENT FULL
         CVD   R15,DOUBLEC
         MVC   SMFANSOA(10),=X'40206B2020206B202120'
         ED    SMFANSOA(10),DOUBLEA+4
         MVC   SMFANSOB(10),=X'40206B2020206B202120'
         ED    SMFANSOB(10),DOUBLEB+4
         MVC   SMFANSOC(4),=X'40202120'
         ED    SMFANSOC(4),DOUBLEC+6
         TPUT  SMFANS,80
         L     R4,4(R4)             NEXT RDS ON CHAIN
         CR    R5,R4                END OF CHAIN YET
         BNE   MORSMFDS
FIN      EQU   *
         MOREND
SMFOFF   DC    CL80'SMF RECORDING INACTIVE'
SMFTITLE DC    CL80'SMF DATASET VOLSER --STATE-- BLKS ALLOC  BLKS USED *
               % FULL'
SMFANS   DS    0CL80' '
         DC    CL20' SYS1.MAN?  VOLSER  '
         DC    CL09'ACTIVE'
SMFANSOA DC    CL11' X,XXX,XXX '       BLKS ALLOCATED'
SMFANSOB DC    CL11' X,XXX,XXX '       BLKS USED
SMFANSOC DC    CL05' XXX '             % FULL
         DC    CL24' '
DOUBLEA  DC    D'0'
DOUBLEB  DC    D'0'
DOUBLEC  DC    D'0'
         END
./        ADD LIST=ALL,NAME=SVCTAB
         MACRO
&NAME    IHASVC
SVC      DSECT
SVCEP    DC    F'0'           SVC ENTRY POINT ADDRERSS
SVCAMODE EQU   X'80'          SVC AMODE INDICATOR
SVCATTR1 DC    0XL2'00'       ATTRIBUTES
SVCTP    DC    XL1'00'        TYPE FIELD
SVCTP1   EQU   X'00'          TYPE 1 SVC
SVCTP2   EQU   X'80'          TYPE 2 SVC
SVCTP34  EQU   X'C0'          TYPE 3 OR 4 SVC
SVCTP6   EQU   X'20'          TYPE 6 SVC
SVCAPF   EQU   X'08'          APF AUTHORIZED 1-AUTHORIZED
SVCESR   EQU   X'04'          SVC IS PART OF THE ESR
SVCNP    EQU   X'02'          NON-PREEMPTIVE SVC
SVCASF   EQU   X'01'          SVC CAN BE ASSISTED
SVCRESV1 DC    XL1'00'        RESERVED BYTE
SVCLOCKS DC    XL2'00'        LOCK ATTRIBUTES
SVCLL    EQU   X'80'          LOCAL LOCK NEEDED
SVCCMS   EQU   X'40'          CMS LOCK NEEDED
SVCOPT   EQU   X'20'          OPT LOCK NEEDED
SVCALLOC EQU   X'10'          SALLOC LOCK NEEDED
SVCDISP  EQU   X'08'          DISPATCHER LOCK NEEDED
*
SVCESRAD EQU   SVCLOCKS+1
SVCLEN   EQU   *-SVC
         MEND
SVCTAB   MOWSTART
SVCTAB   AMODE  31
SVCTAB   RMODE  ANY
***********************************************************************
* THIS PROGRAM LOCATES THE SVC TABLE AND PRINTS OUT THE ATTRIBUTES    *
* OF THE SVCS.                                                        *
***********************************************************************
         USING CVT,R11            CVT
         L     R11,16             CVT ADDR
         L     R11,CVTABEND       -> TO SECONDARY CVT
         DROP  R11
         USING SCVTSECT,R11       SECONDARY CVT
         L     R11,SCVTSVCT       -> TO SVC TABLE (256 ENTRIES)
         DROP  R11
         USING SVC,R11            SVC TABLE
         USING CPPL,R10
         LR    R10,R1
         USING IOPL,R9
         LA    R9,IOPLADS
         L     R3,CPPLUPT
         L     R4,CPPLECT
         SR    R10,R10            LOOP COUNTER FOR 256 SVCS
         LA    R8,SVCOP           -> TO SVC NAME TABLE
*        TPUT  HEAD,L'HEAD
         PUTLINE PARM=PARM,UPT=(R3),ECT=(R4),ECB=ECB1,                 *
               OUTPUT=(MSG1,TERM,SINGLE,DATA),                         *
               MF=(E,IOPLADS)
NEXTENT  EQU   *                  FORMAT SVC TABLE DATA
         MVI   HEAD,X'40'         A BLANK
         MVC   HEAD+1(79),HEAD    AND 79 MORE
         CVD   R10,DOUBLE         MAKE SVC # DECIMAL
         MVC   HEAD(4),=X'40202120' MOVE SVC # INTO MESSAGE
         ED    HEAD(4),DOUBLE+6   EDIT NUMBER INTO IT
         ST    R10,FULL           SAVE SVC NUMBER
         UNPK  OUT(9),FULL(5)     UNPACK
         MVZ   OUT(8),OUT-1       FOOL WITH ZONES
         TR    OUT(8),=C'0123456789ABCDEF'  CONVERT TO CHARACTERS
         MVC   HEAD+6(4),=C'(  )' SPACE FOR SVC # IN HEX
         MVC   HEAD+7(2),OUT+6    MOVE IN HEX SVC NUMBER
         UNPK  OUT(9),SVCEP(5)    UNPACK SVC ADDRESS
         MVZ   OUT(8),OUT-1       FOOL WITH ZONES
         TR    OUT(8),=C'0123456789ABCDEF' CONVERT TO CHARACTERS
         MVC   HEAD+12(8),OUT     MOVE IN CONVERTED ADDRESS
         MVI   HEAD+12,X'40'      BLANK OUT FIRST BYTE OF ADDRESS
         CLI   HEAD+13,C'0'       TEST FOR A ZERO
         BNE   *+8                SKIP ROUND MOVE
         MVI   HEAD+13,X'40'      MAKE IT A BLANK
         MVI   HEAD+40,C'6'       IT MUST BE A TYPE 6
         TM    SVCTP,SVCTP6       IS IT A TYPE 6?
         BO    GETATTR            YES, GO GET ATTRIBUTES
         MVC   HEAD+39(3),=C'3/4' ASSUME TYPE 3 OR 4
         TM    SVCTP,SVCTP34      IS IT A TYPE 3 OR 4?
         BO    GETATTR            YES, GO GET ATTRIBUTES
         MVC   HEAD+39(3),=C' 2 ' ASSUME ITS A TYPE 2
         TM    SVCTP,SVCTP2       IS IT A TYPE 2?
         BO    GETATTR            YES, GO GET ATTRIBUTES
         MVI   HEAD+40,C'1'       ASSUME ITS A TYPE 1
GETATTR  EQU   *
         MVI   HEAD+44,X'40'      ASSUME NOT AUTHORIZED
         TM    SVCTP,SVCAPF       TEST FOR AUTHORIZED
         BZ    GETAMODE           AND FOUND IT ISN'T
         MVI   HEAD+44,C'Y'       SET IT TO AUTHORIZED
GETAMODE EQU   *
         TM    SVCEP,SVCAMODE     TEST FOR AMODE BIT SET
         BZ    GETATTR1           NOT SET
         MVC   HEAD+48(2),=C'31'  INDICATE AMODE IS 31
GETATTR1 EQU   *
         MVI   HEAD+52,X'40'      ASSUME SVC NOT PART OF THE ESR
         TM    SVCTP,SVCESR       TEST FOR PART OF ESR
         BZ    GETATTR2           AND FOUND IT ISN'T
         MVI   HEAD+52,C'Y'       SAY ITS PART OF ESR
GETATTR2 EQU   *
         MVI   HEAD+56,X'40'      ASSUME ITS NON-PREMPTIVE
         TM    SVCTP,SVCNP        AND TEST TO SEE
         BZ    GETATTR3           AND FOUND IT ISN'T
         MVI   HEAD+56,C'Y'       SAY IT IS
GETATTR3 EQU   *
         MVI   HEAD+60,X'40'      ASSUME IT CAN'T BE ASSISTED
         TM    SVCTP,SVCASF       AND TEST TO SEE
         BZ    LOCK0              AND FOUND IT ISN'T
         MVI   HEAD+60,C'Y'       SAY IT IS
LOCK0    EQU   *
         LA    R2,HEAD+63         -> TO LOCK FIELD IN MSG TEXT
         TM    SVCLOCKS,SVCLL     LOCAL LOCK?
         BZ    LOCK1              NOT LOCAL LOCK
         MVC   0(6,R2),=C'LOCAL,' MOVE IN LOCAL
         LA    R2,6(R2)           BUMP POINTER
LOCK1    EQU   *
         TM    SVCLOCKS,SVCCMS    CMS LOCK?
         BZ    LOCK2              NOT CMS LOCK
         MVC   0(4,R2),=C'CMS,'   MOVE IN CMS
         LA    R2,4(R2)           BUMP POINTER
LOCK2    EQU   *
         TM    SVCLOCKS,SVCOPT    OPT LOCK?
         BZ    LOCK3              NOT OPT LOCK
         MVC   0(4,R2),=C'OPT,'   MOVE IN OPT
         LA    R2,4(R2)           BUMP POINTER
LOCK3    EQU   *
         TM    SVCLOCKS,SVCALLOC  ALLOC LOCK?
         BZ    LOCK4              NOT ALLOC LOCK
         MVC   0(6,R2),=C'ALLOC,' MOVE IN ALLOC
         LA    R2,6(R2)           BUMP POINTER
LOCK4    EQU   *
         TM    SVCLOCKS,SVCDISP   DISP LOCK?
         BZ    DONELOCK           NOT DISP LOCK
         MVC   0(5,R2),=C'DISP,'  MOVE IN DISP
         LA    R2,5(R2)           BUMP POINTER
DONELOCK EQU   *
         BCTR  R2,0               BACK POINTER UP ONE BYTE AND
         MVI   0(R2),C' '         BLANK TRAILING COMMA
         CLM   R10,B'0001',0(R8)  IS THIS ENTRY IN TABLE?
         BNE   PUTMSG             NO, SO JUST PUT MESSAGE W/OUT NAME
         MVC   HEAD+22(14),1(R8)  MOVE SVC NAME INTO MESSAGE
         LA    R8,SVCNAML(R8)     BUMP -> TO NEXT SVC NAME ENTRY
PUTMSG   EQU   *
         PUTLINE PARM=PARM,UPT=(R3),ECT=(R4),ECB=ECB1,                 *
               OUTPUT=(MSG1,TERM,SINGLE,DATA),                         *
               MF=(E,IOPLADS)
*        TPUT  HEAD,L'HEAD
         LA    R11,SVCLEN(R11)    -> TO NEXT SVC TABLE ENTRY
         LA    R10,1(R10)         ADD 1 TO COUNT OF SVCS
         CH    R10,=H'256'        AT END YET?
         BL    NEXTENT            NO, MORE SVCS TO TELL ABOUT YET
         MOREND
PARM     PUTLINE MF=L
ECB1     DC    F'0'
IOPLADS  DC    4F'0'
FULL     DC    F'0'
DOUBLE   DC    D'0'
         DC    F'0'               MUST PRECEED OUT
OUT      DS    2F                 WORK AREA FOR UNPK
         DS    CL1                PAD SPACE FOR UNPK
MSG1     DC    H'84'
         DC    H'0'
HEAD     DC    CL80'    SVC       ADDR    ---- NAME ----  TYPE AUT AMD *
               ESR PRE ASS LOCKS'
*                   0123456789 123456789 123456789 123456789 123456789
*                     123  (XX)  AAAAAAAA  SVC_NAME         3   Y   31
*              123456789 123456789
*               N   Y   Y     ....
*
* THE SVCTABLE WAS "BORROWED" DIRECTLY FROM THE DISASSEMBLER.
*
         COPY  DISASM3B
         PRINT NOGEN
         CVT   DSECT=YES,PREFIX=NO
         IKJCPPL
         IKJPTPB
         IKJIOPL
         IHASCVT
         IHASVC
         END
./        ADD LIST=ALL,NAME=TODCN
TODCN    MOWSTART ,           PL/I DOESNT LIKE 8 CHAR NAMES
*TODCNVRT MOWSTART
***********************************************************************
* FUNCTION: CONVERT A 64 BIT TIMESTAMP OBTAINED BY STCK INTO A
*           CHARACTER STRING GIVING YEAR, JULIAN DATE AND TIME OF DAY
*
* REVERSE ENGINEERED FROM AMDPRDMP AMDPRSEG
*         BY ALAN C FIELD, OZARK AIR LINES, ST. LOUIS, MO.
*
* THE ENTRY CONDITIONS TO TODCNVRT ARE:
*   R1 POINTS TO AN ARGUMENT LIST WITH 3 ADCONS
*       THE FIRST ARGUMENT IS A CVTTZ VALUE FOR GMT ADJUSTMENT
*       THE SECOND ARGUMENT IS AN 8 BYTE TOD CLOCK VALUE FROM STCK
*       THE THIRD ARGUMENT IS A 24 CHARACTER RETURN AREA
*           VALUE RETURNED IS YYYYDDDHH.MM.SS.MMMMMM
* THE PROGRAM MASK IS DISABLED FOR FIXED POINT OVERFLOW
***********************************************************************
         LA    R2,1            A F'1' MEANING 'RETURN FULL DATE'
*        LA    R2,2            TO GET TIME IN SSSSS.MMMMMM FORM
         SR    R0,R0                       CLEAR REG
         SPM   R0                          DISABLE FIXED POINT OVFLW
         L     R7,4(,R1)                   POINT TO TIMESTAMP
         MVC   TIMESTMP(8),0(R7)           MOVE IT TO OUR AREA
*        TM    127(R12),X'20'              REQUIRED TO OFFSET FOR GMT?
*        BNO   LAB1                        NO
         L     R7,0(,R1)                   GET CVTTZ, TIME ZONE DIFF
         ICM   R14,15,0(R7)                PUT IT INTO A REGISTER
         AL    R14,TIMESTMP                ADD IT TO THE TIMESTAMP
         ST    R14,TIMESTMP                STORE IT BACK
LAB1     LM    R4,R5,TIMESTMP              GET TIMESTAMP INTO REGS
         SRDL  R4,12                       DIVIDE BY 4096
         D     R4,SIXMILL                  DIVIDE RESULT BY ...
         LR    R7,R2                       COPY
         SLA   R7,2                        MULTIPLY BY 4
         L     R7,ATAB(R7)                 BRANCH TABLE
         BR    R7                          GO TO RIGHT PLACE
         SPACE
RELTVTME L     R7,4(,R1)                   POINT TO TIMESTAMP
         CLC   0(8,R7),TIME2               COMPARE IT WITH ...
         BNE   TOD1A
         L     R7,8(,R1)                   -> TO RETURN AREA
         MVI   12(R7),C' '                 MOVE IN A BLANK
         MVC   13(11,R7),12(R7)            AND BLANK LAST HALF
         MVC   0(12,R7),ZERO1              MOVE IN ....
         LA    R15,4                       SET RETURN CODE
         B     FIN                         RETURN
         SPACE
TOD1A    LA    R7,WORK2
         L     R14,MILLION
         LR    R15,R4                      COPY REGISTER
         ST    R14,WORK1
         SLR   R14,R14                     CLEAR REG
         D     R14,WORK1                   DIVIDE BY ...
         ST    R15,0(,R7)                  STORE RESULT IN
         LR    R14,R4                      COPY REGISTER
         SRDA  R14,32                      DIVIDE
         D     R14,WORK1
         LR    R4,R14                      COPY REG
         L     R2,8(,R1)                   POINT TO RETURN AREA
         LA    R2,6(,R2)                   AND POINT 6 BYTES IN
         CVD   R4,TIMESTMP                 MAKE IT DECIMAL
         UNPK  0(6,R2),TIMESTMP+4(4)       AND PRINTABLE
         OI    5(R2),X'F0'                 INCL LAST CHAR
         L     R7,8(,R1)                   POINT TO RETURN AREA
         MVI   5(R7),X'4B'                 MOVE IN A PERIOD
         LR    R14,R5                      COPY REG
         SRDA  R14,32                      DIVIDE BY ...
         D     R14,MINSPDAY                MINUTES IN A DAY
         MH    R14,=H'60'                  MULTIPLY BY 60
         LA    R15,WORK2                   -> TO ...
         AL    R14,0(,R15)
         LR    R4,R14                      COPY REG
         LR    R2,R7                       COPY REG
         CVD   R4,TIMESTMP                 MAKE IT DECIMAL
         UNPK  0(5,R2),TIMESTMP+5(3)       AND PRINTABLE
         OI    4(R2),X'F0'                 MAKE IT PRINTABLE
         SLR   R15,R15                     SET RC
         B     FIN                         GO BACK
         SPACE
FULLDATE L     R7,4(,R1)                   POINT TO INPUT TIMESTAMP
         CLC   0(8,R7),TIME2               COMPARE WITH ...
         BNE   TOD2A                       NOT EQUAL, GO TO ...
         L     R7,8(,R1)                   POINT TO RETURN AREA
         MVI   22(R7),C' '                 MOVE IN A BLANK
         MVI   23(R7),C' '                 MOVE IN A BLANK
         MVC   0(22,R7),ZERO2              MOVE ....
         LA    R15,4                       SET RC
         B     FIN                         RETURN
         SPACE
TOD2A    LA    R7,WORK2                    POINT TO ...
         L     R14,MILLION                 LOAD IN A MILLION
         LR    R15,R4                      COPY REG
         ST    R14,WORK1                   SAVE IT IN WORK
         SLR   R14,R14                     CLEAR IT
         D     R14,WORK1                   DIVIDE BY 10E6
         ST    R15,0(,R7)                  STORE IT IN WORK
         LR    R14,R4                      COPY AGAIN
         SRDA  R14,32                      MOVE IT DOWN
         D     R14,WORK1                   DIVIDE BY 10E6
         LR    R4,R14                      COPY
         L     R2,8(,R1)                   -> TO 3ND ARG, RETURN AREA
         LA    R2,16(,R2)                  AND POINT 16 BYTES IN
         CVD   R4,TIMESTMP                 CONVERT TO DECIMAL
         UNPK  0(6,R2),TIMESTMP+4(4)       MOVE IN DECIMALS OF SECS
         OI    5(R2),X'F0'                 LAST DIGIT PRINTABLE
         L     R7,8(,R1)                   -> TO 3RD ARG
         MVI   15(R7),X'4B'                MOVE IN A PERIOD
         LA    R14,WORK2                   -> WORK
         L     R4,0(,R14)                  GET DATA PTD TO BY R14
         LA    R2,13(,R7)                  -> TO SS IN RETURN AREA
         CVD   R4,TIMESTMP                 CONVERT SECONDS
         UNPK  0(2,R2),TIMESTMP+6(2)       MOVE IT IN
         OI    1(R2),X'F0'                 PRINTABLE
         L     R7,8(,R1)                   -> TO 3RD ARG
         MVI   12(R7),X'4B'                MOVE IN A PERIOD
         LA    R14,60                      GET A 60
         LR    R15,R5                      COPY REG
         ST    R14,WORK1                   SAVE OUR 60
         SLR   R14,R14                     CLEAR A REG
         D     R14,WORK1                   DIVIDE BY 60
         ST    R15,WORK2                   SAVE RESULT
         LR    R14,R5                      COPY
         SRDA  R14,32                      SHIFT IT DOWN
         D     R14,WORK1                   DIVIDE BY 60
         LR    R4,R14                      COPY
         LA    R2,10(,R7)                  -> TO MM IN RETURN AREA
         CVD   R4,TIMESTMP                 MAKE IT DECIMAL
         UNPK  0(2,R2),TIMESTMP+6(2)       MOVE IT INTO RETURN AREA
         OI    1(R2),X'F0'                 MAKE IT PRINTABLE
         L     R7,8(,R1)                   -> TO 3RD ARG
         MVI   9(R7),X'4B'                 MOVE IN A PERIOD
         L     R5,WORK2                    COPY
         LA    R14,24                      HOURS IN A DAY
         LR    R15,R5                      COPY
         ST    R14,WORK1                   SAVE OUR 24
         SLR   R14,R14                     CLEAR IT
         D     R14,WORK1                   DIVIDE BY 24
         ST    R15,WORK2                   SAVE RESULT
         LR    R14,R5                      COPY
         SRDA  R14,32                      SHIFT IT DOWN
         D     R14,WORK1                   DIVIDE BY 24
         LR    R4,R14                      COPY
         LA    R2,7(,R7)                   -> POINT TO HH IN RESULT
         CVD   R4,TIMESTMP                 MAKE IT DECIMAL
         UNPK  0(2,R2),TIMESTMP+6(2)       AND PRINTABLE
         OI    1(R2),X'F0'                 ..
         L     R7,WORK2                    GET OUR VALUE
         C     R7,FOURYR                   COMPARE WITH DAYS IN 4 YR
         BNL   A3C
         L     R7,WORK2                    GET IT AGAIN
         LA    R14,365                     DAYS IN A YEAR
         ST    R14,WORK1                   SAVE IT
         LR    R14,R7                      COPY
         SRDA  R14,32                      MOVE IT DOWN AGAIN
         D     R14,WORK1                   DIVIDE BY DAYS IN YR
         AL    R14,F1                      ADD ONE
         LR    R3,R14                      COPY
         LR    R14,R7                      COPY
         SRDA  R14,32                      MOVE IT DOWN AGAIN
         D     R14,WORK1                   DIVIDE
         AL    R15,F1900                   ADD IN 1900
         LR    R6,R15                      COPY
         B     AAC
A3C      L     R7,WORK2                    COPY
         SL    R7,FOURYR                   SUBTRACT DAYS IN 4 YEARS
         ST    R7,WORK2                    SAVE IT
         LA    R14,1461                    DAYS IN 4 YRS, INCL LEAP
         ST    R14,WORK1                   SAVE IT
         LR    R14,R7                      COPY
         SRDA  R14,32                      SHIFT IT DOWN
         D     R14,WORK1                   DIVIDE
         LR    R5,R15                      COPY
         LR    R14,R7                      COPY
         SRDA  R14,32                      SHIFT IT
         D     R14,WORK1                   DIVIDE
         LR    R4,R14                      COPY
         LR    R15,R4                      COPY
         SLR   R14,R14                     CLEAR
         D     R14,TWOYEAR                 DAYS IN 2 YEARS
         LR    R14,R15                     COPY
         ALR   R14,R4                      ADD
         LR    R15,R4                      COPY
         ST    R14,WORK1                   SAVE IT
         SLR   R14,R14                     CLEAR
         D     R14,THREEYR                 DAYS IN 3 YEARS
         LR    R14,R15                     COPY
         AL    R14,WORK1                   ADD
         SRDA  R14,32                      MOVE IT DOWN
         D     R14,LEAPYEAR                DAYS IN A LEAP YEAR
         AL    R14,F1                      ADD 1
         LR    R3,R14                      COPY
         LR    R6,R5                       COPY
         SLA   R6,2                        MULTIPLY BY 4
         AL    R6,F1904                    1904
         LR    R14,R4                      COPY
         BCTR  R14,0                       SUBTRACT 1
         SRDA  R14,32                      MOVE IT DOWN
         D     R14,YEAR                    DAYS IN A YEAR
         ALR   R6,R15                      ADD
AAC      L     R2,8(,R1)                   -> 3RD ARG
         LA    R2,4(,R2)                   -> DDD IN RETURN FIELD
         CVD   R3,TIMESTMP                 MAKE IT DECIMAL
         UNPK  0(3,R2),TIMESTMP+6(2)       MOVE IT INTO RETURN AREA
         OI    2(R2),X'F0'                 MAKE IT PRINTABLE
         L     R2,8(,R1)                   -> 3RD ARG
         CVD   R6,TIMESTMP                 MAKE IT DECIMAL
         UNPK  0(4,R2),TIMESTMP+5(3)       MOVE IN YYYY
         OI    3(R2),X'F0'                 MAKE IT PRINTABLE
         SLR   R15,R15                     SET RC
FIN      EQU   *
         SPM   R3                          TURN ON FIXED OVFLW
         MOREND RC=(15)
         DS    0D                          ALIGN ON DOUBLEWORD
TIMESTMP DC    CL8' '
TIME2    DC    CL8' '
WORK1    DC    F'0'
WORK2    DC    F'0'
F1       DC    F'00001'
F4       DC    F'00004'
F5       DC    F'00005'
F8       DC    F'00008'
F9       DC    F'00009'
F12      DC    F'00012'
YEAR     DC    F'00365'
LEAPYEAR DC    F'00366'
TWOYEAR  DC    F'00731'
THREEYR  DC    F'01096'
MINSPDAY DC    F'01440'
FOURYR   DC    F'01460'      DAYS IN 4 YRS, EXCL LEAP YEAR
F1900    DC    F'01900'
F1904    DC    F'01904'
MILLION  DC    F'1000000'
SIXMILL  DC    F'60000000'               SIXTY MILLION
ZERO1    DC    C'00000.000000'           SSSSS.MMMMMM (SINCE MIDNIGHT)
ZERO2    DC    C'000000000.00.00.000000' YYYYDDDHH.MM.SS.MMMMMM
ATAB     DC    A(0)
         DC    A(FULLDATE)
         DC    A(RELTVTME)
         END
./        ADD LIST=ALL,NAME=VSAMNAME
VSAMNAME MOWSTART
***********************************************************************
* THIS PROGRAM IS USED TO LIST THE COMMON NAME AND THE VSAM GENERATED *
* NAME FOR SYSTEM DATASETS SUCH AS SMF DATASETS, PAGE DATASETS ETC.   *
* PASS THE COMMON NAME THROUGHT THE PARM.                             *
* DOC: CATALOG DIAGNOSIS REF.                                         *
***********************************************************************
         USING CVTMAP,R11
         L     R11,16                   A(CVT)
         L     R1,0(R1)                 A(PARM)
         LH    R2,0(R1)                 TEST FOR PARM
         LTR   R2,R2                    TEST FOR NOT ZERO
         BNZ   PARM                     PARM SUPPLIED
         TPUT  =C'NO NAME SUPPLIED IN PARM',24
         B     FIN                      CAN'T CONTINUE WITHOUT NAME
PARM     EQU   *
         BCTR  R2,0                     LESS ONE FOR EXECUTE
         EX    R2,MVCDSN1               MOVE NAME TO OUR DATA AREA
OPEN     EQU   *
         USING SHWOUT,R10
         USING SHWASSOC,R9
***********************************************************************
*  USE SHOWCAT FOR STARTERS TO GET CATALOG ACB AND CI FOR DSET        *
***********************************************************************
         LA    R10,AREA                      -> TO RETURN DATA AREA
         SHOWCAT AREA=AREA,NAME=USERDSN      ISSUE MACRO TO GET INFO
         LTR   R15,R15                       SUCCESSFUL?
         BZ    GETCINUM                      YES, GO GET CI NUMBERS
         MVC   MSG(44),USERDSN               MOVE BAD DSN INTO MESSAGE
         MVC   MSG+46(09),=C'NOT FOUND'      GUESS WHY SHOWCAT FAILED
         TPUT  MSG,80                        TELL USER
         B     FIN                           AND QUIT
GETCINUM EQU   *
         BAL   R14,SETPTR                    SET -> TO ASSOC
         MVC   CID(3),SHWACI                 CI OF THE ASSOCIATED ENTRY
         L     R2,SHWACBP                    GET CATALOG ACB POINTER
         ST    R2,ACBA                       AND SAVE IT
         CLC   SHWASS0,=H'2'                 ANY ASSOCIATED PTRS?
         BNE   CHKOPEN                       NO, SO CHECK IF CAT OPEN
         LA    R9,4(R9)                      BUMP TO NEXT SET PTRS
         MVC   CII(3),SHWACI                 SAVE CI OF INDEX COMPONENT
CHKOPEN  EQU   *
         TM    48(R2),X'10'                  IS ACB OPEN?
         BO    SETPL                         YES, SO OK TO GO ON
         TPUT  =C'CATALOG NOT OPEN',16       TELL CALLER
         B     FIN                           AND EXIT
         SPACE
***********************************************************************
* SET UP CATALOG FIELD PARAMETER LIST                                 *
***********************************************************************
SETPL    EQU   *
         USING CTGFL,R9
         LA    R9,FLD1                       POINT TO FIRST FIELD
         MVI   CTGFLDNO,X'01'                1 ENTRY
         LA    R2,FLDNM1                     A(FIELDNAME)
         MVC   0(08,R2),=C'ENTNAME '         MOVE IN FIELD NAME
         ST    R2,CTGFLDNM                   SAVE IT
         XC    CTGFLCHN(4),CTGFLCHN          ZERO IT OUT
         SPACE
         LA    R9,FLD2                       POINT TO SECOND FIELD
         MVI   CTGFLDNO,X'01'                1 ENTRY
         LA    R2,FLDNM2                     A(FIELDNAME)
         MVC   0(08,R2),=C'DEVTYP  '         MOVE IN FIELD NAME
         ST    R2,CTGFLDNM                   SAVE IT
         XC    CTGFLCHN(4),CTGFLCHN          ZERO IT OUT
         SPACE
         LA    R9,FLD3                       POINT TO THIRD FIELD
         MVI   CTGFLDNO,X'01'                1 ENTRY
         LA    R2,FLDNM3                     A(FIELDNAME)
         MVC   0(08,R2),=C'VOLSER  '         MOVE IN FIELD NAME
         ST    R2,CTGFLDNM                   SAVE IT
         XC    CTGFLCHN(4),CTGFLCHN          ZERO IT OUT
         DROP  R9
         SPACE
***********************************************************************
* SET UP CATALOG PARAMETER LIST                                       *
***********************************************************************
         USING CTGPL,R1
         LA    R1,CATPL            -> CATALOG PARAMETER LIST
         OI    CTGOPTN1,CTGBYPSS
         NI    CTGOPTN1,255-(CTGNAME+CTGCNAME)   CI AND ACB PROVIDED
         XC    CTGOPTN2(1),CTGOPTN2              CLEAR
         OI    CTGOPTN3,CTGLOC+CTGNUM+CTGAM0
         LA    R2,CID              ADDRESS OF CONTROL INTERVAL
         ST    R2,CTGENT           SAVE IT
         LA    R2,ACBA             A(CATALOG ACB)
         ST    R2,CTGCAT           SAVE IT IN PARM LIST
         LA    R2,AREA             -> WORK AREA
         ST    R2,CTGWKA           SAVE IT IN PARM LIST
         MVI   CTGTYPE,C'D'        INDICATE 'DATA' REQD
         MVI   CTGNOFLD,X'03'      NUMBER OF FPLS
         LA    R2,FLD1             POINT TO CTGFIELD
         ST    R2,CTGFIELD         SAVE IT IN PARM LIST
         LA    R2,FLD2             POINT TO CTGFIELD
         ST    R2,CTGFL2           SAVE IT IN PARM LIST
         LA    R2,FLD3             POINT TO CTGFIELD
         ST    R2,CTGFL3           SAVE IT IN PARM LIST
         SPACE
         SVC   26                  ISSUE CATALOG SVC
         LTR   R15,R15             HOW DID WE DO?
         EJECT
         MVC   MSG(6),=C'DATA  '   COMPONENT TYPE
         MVC   MSG+6(44),AREA+4    MOVE VSAM DSN INTO MSG
         MVC   MSG+52(2),=C'ON'    MAKE MESSAGE READ BETTER
         MVC   MSG+55(6),AREA+4+44+4  MOVE VOLSER INTO MSG
         SPACE
         TPUT  USERDSN,44          TELL OUR NAME
         TPUT  MSG,80              AND NOW TELL VSAM NAME AND VOLSER
         SPACE
         CLC   CII,=C'   '         CII HAS DATA?
         BE    FIN
         LA    R1,CATPL            -> CATALOG PARAMETER LIST
         LA    R2,CII              ADDRESS OF CONTROL INTERVAL
         ST    R2,CTGENT           SAVE IT
         MVI   CTGTYPE,C'I'        INDICATE 'INDEX' REQD
         SVC   26                  ISSUE CATALOG SVC
         MVC   MSG(6),=C'INDEX '   COMPONENT NAME
         MVC   MSG+6(44),AREA+4    MOVE VSAM DSN INTO MSG
         MVC   MSG+52(2),=C'ON'    MAKE IT READ BETTER
         MVC   MSG+55(6),AREA+4+44+4  MOVE VOLSER INTO MSG
         TPUT  MSG,80              TELL VSAM NAME
         SPACE
FIN      EQU   *
         MOREND
SETPTR   DS    0H
         LA    R9,SHWASS           -> ASSOC PTRS
         CLI   SHWTYPE,C'D'        DATA TYPE?
         BER   R14                 YES, RETURN
         CLI   SHWTYPE,C'I'        INDEX TYPE?
         BER   R14                 RETURN
         LA    R9,SHWASS0          -> TO ASSOC PTRS
         BR    R14                 RETURN
         EJECT
* WORK AREAS ETC FOR DSN LOOKUP
MVCDSN1  MVC   USERDSN(*-*),2(R1)       EXECUTED MOVE
MSG      DC    CL80' '
USERDSN  DC    CL44' '
ACBA     DC    F'0'
CID      DC    CL3' '               CI FOR DATA COMPONENT
CII      DC    CL3' '               CI FOR INDEX COMPONENT
FLDNM1   DC    CL8' '
FLDNM2   DC    CL8' '
FLDNM3   DC    CL8' '
AREA     DC    H'512'               WORK AREA FOR
         DC    510C' '              SHOWCAT AND SUBSEQUENTLY
         DC    2C' '                USED BY OTHER PARTS OF PGM
         SPACE
         DS    0F
CATPL    DC    (LCTGPL)X'00'
CTGFL2   DC    F'0'
CTGFL3   DC    F'0'
FLD1     DC    (LCTGFL)X'00'
FLD2     DC    (LCTGFL)X'00'
FLD3     DC    (LCTGFL)X'00'
         EJECT
         IEZCTGPL
         SPACE 5
         IEZCTGFL
         SPACE 5
         IGGSHWPL
         SPACE 5
         CVT   DSECT=YES
         END
