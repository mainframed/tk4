//SOSTRJDQ JOB (99999,T),'JOHN SOSTROM',
//         CLASS=I,MSGCLASS=X,NOTIFY=SOSTRJD
//ASM      EXEC PGM=IEV90,PARM='LIST,XREF(SHORT),NOOBJECT,DECK,RENT',
//             REGION=4096K
//SYSPRINT  DD SYSOUT=*
//SYSLIB    DD DSN=SYS1.MACLIB,DISP=SHR
//          DD DSN=SYSPOTST.DATECHCK.SOURCE,DISP=SHR
//SYSUT1    DD UNIT=WORK,SPACE=(1700,(1000,100))
//SYSLIN    DD DUMMY,DCB=BLKSIZE=80
//SYSPUNCH  DD DSN=&&DECK,UNIT=WORK,DISP=(,PASS),
//             SPACE=(CYL,(5,1)),
//             DCB=(LRECL=80,BLKSIZE=3120,RECFM=FB,DSORG=PS)
//SYSIN     DD *
         $HEAD 'DATE CHECK RETURN',TITLE=(DATECHCK,'DATE CHECK PROGRAM X
               DISCRIPTION')
*---------------------------------------------------------------------*
*                                                                     *
*  NAME:      DATECHCK                                                *
*  CREATED:   11/25/86                                                *
*  AUTHOR:    JOHN D. SOSTROM                                         *
*             DAYCO PRODUCTS INC.                                     *
*             333 W. FIRST ST.                                        *
*             DAYTON,  OHIO  45401-1004                               *
*             (513)226-5747                                           *
*                                                                     *
*  FUNCTION:                                                          *
*                                                                     *
*       DATECHCK ALLOWS A DATE IN GREGORIAN OR JULIAN DATE FORMAT     *
*  PASSED BY PARAMETER INPUT, TO BE VARRIFIED AGAINST A CONSTANT      *
*  OF 0, + OR MINUS A NUMBER AGAINST THE CURRENT DATE AND A CONDITION *
*  TO BE SPECIFIED AS TO ACTION TO TAKE IF THE DATE DOES NOT FALL     *
*  WITHIN THE REQUESTED BOUNDRIES.  NO DDS ARE REQUIRED BY THIS       *
*  PROGRAM.  ONLY PARM INPUT IS USED AND A CONDITION CODE OR ABEND    *
*  IS INVOKED BASED ON THE PARMS.                                     *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
*  PARAMETER INPUT:                                                   *
*                                                                     *
*      THE PARM SPECIFICATION FOR THIS PROGRAM IS AS FOLLOWS:         *
*                                                                     *
*                      ×EQ×                                           *
*            ×Jyyddd × ×NE× ×+×           ×ABEND×                     *
*      PARM='×Gmmddyy×,×LT×,×-×vvv,RC=(nn,×bb   ×)'                   *
*                      ×LE×               ×WTOR ×                     *
*                      ×GT×                                           *
*                      ×GE×                                           *
*                                                                     *
*      WHERE:                                                         *
*                                                                     *
*            Jyyddd   =   The date to be varified in julian date      *
*                         format.  Must be proceeded by a J and no    *
*                         space to the seperator.                     *
*                                                                     *
*            Gmmddyy  =   The date in gregorian format.  The          *
*                         date must be proceeded by a G and no        *
*                         seperators are to be placed between the     *
*                         month, date and year values.                *
*                                                                     *
*                                                                     *
*            ×EQ×                                                     *
*            ×NE×                                                     *
*            ×LT×     =   This is a operator that will be applied     *
*            ×LE×         against the date that results from the      *
*            ×GT×         addition or subtraction of the vvv value    *
*            ×GE×         from the current system date to establish   *
*                         a "GOOD" condition match to the parm date.  *
*                                                                     *
*                                                                     *
*                         i.e.                                        *
*                                                                     *
*                         PARM='J86123,EQ,+003........'               *
*                                                                     *
*                         The above example says that the date given  *
*                         in the parm data must equal the current     *
*                         system date plus three.                     *
*                                                                     *
*                                                                     *
*                         PARM='J86123,GT,+003........'               *
*                                                                     *
*                         The above example the date given in the     *
*                         parm should be greater than the system      *
*                         date plus three for a good condition match. *
*                                                                     *
*                                                                     *
*                         PARM='J86123,LE,+039........'               *
*                                                                     *
*                         The above example the date given in the     *
*                         parm should be less than or equal to the    *
*                         system date plus thirty nine.               *
*                                                                     *
*                                                                     *
*                                                                     *
*            ×+×                                                      *
*            ×-×vvv   =   A value that the date shown is to be off    *
*                         by the current system date plus or minus.   *
*                         Must be three numeric characters preceeded  *
*                         by a plus or minus sign(-000 and +000 are   *
*                         the same date of zero days.).  Maximum      *
*                         valuse are +366 and -366 (one leap year).   *
*                                                                     *
*                                                                     *
*                                                                     *
*             ×ABEND×                                                 *
*      RC=(nn,×bb   ×)    This parameter specifies what action is     *
*             ×WTOR ×     to be taken based on the result of the      *
*                         operation and compare specified by the      *
*                         previous parameters.  The first operand     *
*                         nn is the two digit numerical return code   *
*                         to use if the condition test is good.       *
*                         The second operand is ABEND, end with return*
*                         code bb (two digit numeric), or ask the     *
*                         operator what to do (WTOR) if the test      *
*                         fails.                                      *
*                         When WTOR is specified the operator may     *
*                         reply C to take the good return code nn     *
*                         or A to abend.                              *
*                                                                     *
*                         i.e.                                        *
*                                                                     *
*                         PARM='J86123,EQ,+003,RC=(00,ABEND)'         *
*                                                                     *
*                         In the above specification if the system    *
*                         date plus three equals the julian date      *
*                         then the program ends with a return code of *
*                         00.  If on the otherhand they are not equal *
*                         then abend with a user code of 122.         *
*                                                                     *
*                                                                     *
*                                                                     *
*                         PARM='J86123,LT,-030,RC=(04,66)'            *
*                                                                     *
*                         In the above specification if the system    *
*                         date minus thirty is Less Than the parm     *
*                         date then the program ends with a return    *
*                         code of 4.  If it is not less than the      *
*                         parm date then the program ends with a      *
*                         return code of 66.                          *
*                                                                     *
*                                                                     *
*                                                                     *
*                         PARM='G110786,GE,-000,RC=(00,WTOR)'         *
*                                                                     *
*                         In the above specification if the system    *
*                         date is Greater than or Equal to the passed *
*                         date the program end with a condition       *
*                         code of 0.  Otherwise a the operator is     *
*                         asked if the program is to Continue or      *
*                         Abend.  If the operator responds with a     *
*                         C (continue) then the program will end with *
*                         a condition code of zero.  If the operator  *
*                         replies A (abend) then the program ends with*
*                         a user abend of 222.                        *
*                                                                     *
*                                                                     *
*    If an invalid parm input is detected the program abends with     *
*    a user abend 522.                                                *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
*  MACROS USED:                                                       *
*                                                                     *
*       IBM MACROS - GETMAIN, FREEMAIN, WTOR, TIME, WAIT              *
*                                                                     *
*       USER MACROS (SYSPOPRD.TECH.MACLIB) - $PROLOG, $EPILOG,        *
*                    #CONVDAT, $REGS, $DFLAG, $FLAG, $CLEAR,          *
*                    $TEST, $HEAD                                     *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
*    LINKAGE EDITOR ATRIBUTES:  'LIST,LET,XREF,RENT,REUS'             *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
*    REGISTER USAGE                                                   *
*                                                                     *
*           R0 DSECT BASE FOR REENTRANT #CONVDAT                      *
*           R1 INPUT PARAMETER POINTER ADDRESS                        *
*           R1 THROUGH R10 WORK                                       *
*           R11 AND R12 BASE REGISTERS                                *
*           R13 SAVE AREA POINTER AND WORK AREA DSECT POINTER         *
*           R14 BRANCH RETURN ADDRESS                                 *
*           R15 BRANCH ENTRY POINT                                    *
*                                                                     *
*---------------------------------------------------------------------*
         $HEAD 'CHANGE HISTORY',TITLE=(,'PROGRAM CHANGE HISTORY')
*---------------------------------------------------------------------*
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
         $HEAD 'ENTRY LINKAGE',TITLE=(,'PROGRAM ENTRY POINT LINKAGE')
DATECHCK $PROLOG R11,R12,LV=4023
         USING WORKAREA,R13       SET UP ADDRESSABILITY
         $HEAD 'WORK AREA DSECT',TITLE=(,'DSECT DEFINITION FOR WORKAREAX
                FROM REG 13')
WORKAREA DSECT
SAVEAREA DC    18F'0'             REGISTER SAVE AREA
         ORG   SAVEAREA
HSAVE    DC    F'0'               RESERVED
BACKPONT DC    F'0'               BACKWORD CHAIN POINT
FOWARDPT DC    F'0'               FORWARD SAVE AREA CHAIN POINTER
REGS14   DC    F'0'               RETURN ADDRESS
REGS15   DC    F'0'               ENTRY POINT ADDRESS
REGS00   DC    F'0'               REGISTER 00 SAVE AREA
REGS01   DC    F'0'               REGISTER 01 SAVE AREA
REGS02   DC    F'0'               REGISTER 02 SAVE AREA
REGS03   DC    F'0'               REGISTER 03 SAVE AREA
REGS04   DC    F'0'               REGISTER 04 SAVE AREA
REGS05   DC    F'0'               REGISTER 05 SAVE AREA
REGS06   DC    F'0'               REGISTER 06 SAVE AREA
REGS07   DC    F'0'               REGISTER 07 SAVE AREA
REGS08   DC    F'0'               REGISTER 08 SAVE AREA
REGS09   DC    F'0'               REGISTER 09 SAVE AREA
REGS10   DC    F'0'               REGISTER 10 SAVE AREA
REGS11   DC    F'0'               REGISTER 11 SAVE AREA
REGS12   DC    F'0'               REGISTER 12 SAVE AREA
         ORG
         SPACE 3
         DS    0F
DATEWRK1 DC    2CL140' '          DATE WORK AREA #1
         SPACE 3
         DS    0F
DATEWRK2 DC    2CL140' '          DATE WORK AREA #2
         SPACE 3
PARSARE  DS    0F
PARMSTRN DC    CL32' '            INPUT PARM RAW
PARMDATE DC    CL6' '             PASSED DATE
PARMAMNT DC    CL3' '             AMMONT TO BE ADDED OR SUBTRACED
PARMRC1  DC    CL2' '             PASSED RETURN CODE MEETS REQUEST
PARMRC2  DC    CL2' '             PASSED RETURN CODE NOT-MEETS REQUEST
         SPACE 1
PARMFLG1 $DFLAG EQ,NE,LT,LE,GT,GE TEST TYPE PARAMETER FLAGS
         SPACE 1
PARMFLG2 $DFLAG ABEND,WTOR,ADD,SUB  ACTION TYPE PARAMETER FLAGS
         SPACE 1
PARMFLG3 $DFLAG JDATE,GDATE       TYPE OF PRAMETER DATE INPUT
         SPACE 1
PARMFLG4 $DFLAG LEAP1,LEAP2       LEAP YEAR INDICATORS
         SPACE 3
GOODRTRN DC    F'0'               GOOD RETURN CODE SPECIFICATION BINARY
BADRTRN  DC    F'0'               BAD RETURN CODE SPECIFICATION BINARY
WORK4    DC    F'0'               FULL WORD WORK AREA
WORK4A   DC    F'0'               FULL WORD WORK AREA
WORK4B   DC    F'0'               FULL WORD WORK AREA
WORK4C   DC    F'0'               FULL WORD WORK AREA
WORK8    DC    D'0'               DOUBLE WORK WORK AREA
PAKDATEI DC    PL4'+0'            PACKED CONVERTED INPUT DATE
PAKDATES DC    PL4'+0'            PACKED SYSTEM DATE
PAKWORK4 DC    PL4'0'             PACKED DECIMAL WORK AREA 4
PAKWORK3 DC    PL3'0'             PACKED DECIMAL WORK AREA 3
PAKWORK2 DC    PL2'0'             PACKED DECIMAL WORK AREA 2
PAKWORK1 DC    PL1'0'             PACKED DECIMAL WORK AREA 1
         SPACE 3
WTORREP  DC    CL1' '             REPLY AREA
WTORECB  DC    F'0'               ECB FOR WTOR
WTORLST1 WTOR  'PARM DATE OF XX/XX/XX IS NOT ?? TO DATE YY/YY/YY.  REPLX
               Y C TO CONTINUE WITH RETURN CODE NN OR A TO TAKE ABEND.'X
               ,0,1,0,MF=L
         ORG   WTORLST1
         DC    A(0)               REPLY ADDRESS
         DC    A(0)               ECB ADDRESS
         DC    AL1(0)             REPLY LENGTH
         DC    AL1(0)             TEXT LENGTH
         DC    B'0000000000000000' MCS FLAGS
         DC    C'PARM DATE OF '
W1DATE1  DC    C'XX/XX/XX'
         DC    C' IS NOT '
W1CODE   DC    C'??'
         DC    C' TO DATE '
W1DATE2  DC    C'YY/YY/YY'
         DC    C'.  REPLY C TO CONTINUE WITH RETURN CODE '
W1CODE1  DC    C'NN'
         DC    C' OR A TO TAKE ABEND.'
         ORG
         SPACE 1
WTORLST2 WTOR  'PARM DATE OF XXXXX IS NOT ?? TO DATE YYYYY.  REPLY C TOX
                CONTINUE WITH RETURN CODE NN OR A TO TAKE ABEND.',     X
               0,1,0,MF=L
         ORG   WTORLST2
         DC    A(0)               REPLY ADDRESS
         DC    A(0)               ECB ADDRESS
         DC    AL1(0)             REPLY LENGTH
         DC    AL1(0)             TEXT LENGTH
         DC    B'0000000000000000' MCS FLAGS
         DC    C'PARM DATE OF '
W2DATE1  DC    C'XXXXX'
         DC    C' IS NOT '
W2CODE   DC    C'??'
         DC    C' TO DATE '
W2DATE2  DC    C'YYYYY'
         DC    C'.  REPLY C TO CONTINUE WITH RETURN CODE '
W2CODE1  DC    C'NN'
         DC    C' OR A TO TAKE ABEND.'
         ORG
         SPACE 1
WORKLNG  EQU   *-SAVEAREA
         $HEAD 'PARSE PARM DATA',TITLE=(,'PARS AND VERIFY INPUT PARM DAX
               TA')
DATECHCK CSECT
         L     R1,0(R1)           POINT TO PARM INPUT
         LH    R2,0(R1)           GET LENGTH
         LA    R6,*
         CH    R2,=H'29'          LARGER THAN
         BH    ABPARM             ABEND ON PARM ERROR
         LA    R6,*
         CH    R2,=H'25'          TOO SHORT
         BL    ABPARM             ABEND ON PARM ERROR
         BCTR  R2,0               SUBTRACT ONE
         EX    R2,MOVEPARM
         B     PARS001
MOVEPARM MVC   PARMSTRN(0),2(R1)  MOVE PARM INSTRUCTION
ABPARM   ABEND 522
         SPACE 1
PARS001  DS    0H
         MVC   PARMDATE(6),=CL6' ' PRESET DATE AREA
         LA    R2,PARMSTRN        POINT TO PARM
         CLI   0(R2),C'J'         JULIAN DATE ENTERED?
         BNE   PARS002            NO, THEN CHECK FOR GREGORIAN
         $FLAG JDATE              JULIAN DATE FLAG
         MVC   PARMDATE(5),1(R2)
         LA    R2,7(R2)           POINT TO NEXT EXPECTED PARM
         B     PARSA06
         SPACE 1
PARS002  DS    0H
         LA    R6,*
         CLI   PARMSTRN,C'G'      GREGORIAN DATE ENTERD?
         BNE   ABPARM             NO, THEN CHECK FOR GREGORIAN
         $FLAG GDATE              GREGORIAN DATE FLAG
         MVC   PARMDATE(6),1(R2)
         LA    R2,8(R2)           POINT TO NEXT EXPECTED PARM
         B     PARSA06            GO DO OPERATOR
         SPACE 1
PARS003  DS    0H
         CLI   0(R2),C'-'         SUBTRACT?
         BNE   PARS004            NO
         $FLAG SUB
         LA    R2,1(R2)           POINT TO AMOUNT
         B     PARS005
         SPACE 1
PARS004  DS    0H
         LA    R6,*
         CLI   0(R2),C'+'         ADD?
         BNE   ABPARM             NO, THEN ERROR
         $FLAG ADD
         LA    R2,1(R2)
         SPACE 1
PARS005  DS    0H
         MVC   PARMAMNT,0(R2)     SAVE AMOUNT
         XC    WORK4,WORK4        CHECK FOR MAXIMUMS
         PACK  WORK4(4),PARMAMNT(3)
         OI    WORK4+3,X'0F'
         LA    R6,*               GET ABEND REFERENCE
         CP    WORK4+1(3),=PL3'366'
         BH    ABPARM             GREATER THAN 366
         LA    R2,4(R2)           BUMP TO NEXT PARM
         B     PARS011            GO DO RC=(
         SPACE 1
PARSA06  DS    0H
         CLC   0(2,R2),=CL2'EQ'   FIND CONDITION
         BNE   PARS006
         $FLAG EQ
         LA    R2,3(R2)
         B     PARS003  GO DO AMOUNT
         SPACE 1
PARS006  DS    0H
         CLC   0(2,R2),=CL2'NE'   FIND CONDITION
         BNE   PARS007
         $FLAG NE
         LA    R2,3(R2)
         B     PARS003  GO DO AMOUNT
         SPACE 1
PARS007  DS    0H
         CLC   0(2,R2),=CL2'LT'   FIND CONDITION
         BNE   PARS008
         $FLAG LT
         LA    R2,3(R2)
         B     PARS003  GO DO AMOUNT
         SPACE 1
PARS008  DS    0H
         CLC   0(2,R2),=CL2'LE'   FIND CONDITION
         BNE   PARS009
         $FLAG LE
         LA    R2,3(R2)
         B     PARS003  GO DO AMOUNT
         SPACE 1
PARS009  DS    0H
         CLC   0(2,R2),=CL2'GT'   FIND CONDITION
         BNE   PARS010
         $FLAG GT
         LA    R2,3(R2)
         B     PARS003  GO DO AMOUNT
         SPACE 1
PARS010  DS    0H
         LA    R6,*
         CLC   0(2,R2),=CL2'GE'   FIND CONDITION
         BNE   ABPARM             PARM ERROR
         $FLAG GE
         LA    R2,3(R2)
         B     PARS003
         SPACE 1
PARS011  DS    0H
         LA    R6,*
         CLC   0(4,R2),=CL4'RC=(' CORRECT FORMAT?
         BNE   ABPARM             NO, PARM ERROR
         LA    R2,4(R2)           BUMP TO SUB PARM
         MVC   PARMRC1(2),0(R2)   GET MET CODE
         CLI   5(R2),C')'         TWO NUMERIC VERSION?
         BNE   PARS012            NO
         MVC   PARMRC2(2),3(R2)   GET NOMATCH RETURN CODE
         B     PARS014
         SPACE 1
PARS012  DS    0H
         CLC   3(4,R2),=CL4'WTOR' ASK OPERATOR?
         BNE   PARS013            NO CHECK OTHER
         $FLAG WTOR
         B     PARS014            DONE
         SPACE 1
PARS013  DS    0H
         LA    R6,*
         CLC   3(5,R2),=CL5'ABEND' ABEND ON BAD CHECK?
         BNE   ABPARM             NO, THEN PARM ERROR
         $FLAG ABEND
         SPACE 1
PARS014  DS    0H
         TM    PARMDATE,X'F0'     CHECK FOR NUMERIC FIELDS
         BO    PARSA14            IF NOT THEN PARM ERROR
         LA    R6,*
         B     ABPARM             IF NOT THEN PARM ERROR
         SPACE 1
PARSA14  DS    0H
         TM    PARMDATE+1,X'F0'
         BO    PARSB14            IF NOT THEN PARM ERROR
         LA    R6,*
         B     ABPARM             IF NOT THEN PARM ERROR
         SPACE 1
PARSB14  DS    0H
         TM    PARMDATE+2,X'F0'
         BO    PARSC14            IF NOT THEN PARM ERROR
         LA    R6,*
         B     ABPARM             IF NOT THEN PARM ERROR
         SPACE 1
PARSC14  DS    0H
         TM    PARMDATE+3,X'F0'
         BO    PARSD14            IF NOT THEN PARM ERROR
         LA    R6,*
         B     ABPARM             IF NOT THEN PARM ERROR
         SPACE 1
PARSD14  DS    0H
         TM    PARMDATE+4,X'F0'
         BO    PARSE14            IF NOT THEN PARM ERROR
         LA    R6,*
         B     ABPARM             IF NOT THEN PARM ERROR
         SPACE 1
PARSE14  DS    0H
         $TEST JDATE,ONES,BR=PARS015 JULIAN DATE GIVEN
         TM    PARMDATE+5,X'F0'
         BO    PARS015            IF NOT THEN PARM ERROR
         LA    R6,*
         B     ABPARM             IF NOT THEN PARM ERROR
         SPACE 1
PARS015  DS    0H
         TM    PARMAMNT,X'F0'     CHECK AMOUNT FOR NUMERICS
         BO    PARSA15            IF NOT THEN PARM ERROR
         LA    R6,*
         B     ABPARM             IF NOT THEN PARM ERROR
         SPACE 1
PARSA15  DS    0H
         TM    PARMAMNT+1,X'F0'   CHECK AMOUNT FOR NUMERICS
         BO    PARSB15            IF NOT THEN PARM ERROR
         LA    R6,*
         B     ABPARM             IF NOT THEN PARM ERROR
         SPACE 1
PARSB15  DS    0H
         TM    PARMAMNT+2,X'F0'   CHECK AMOUNT FOR NUMERICS
         BO    PARSC15            IF NOT THEN PARM ERROR
         LA    R6,*
         B     ABPARM             IF NOT THEN PARM ERROR
         SPACE 1
PARSC15  DS    0H
         TM    PARMRC1,X'F0'      CHECK RETURN CODE ONE FOR NUMERICS
         BO    PARSD15            IF NOT THEN PARM ERROR
         LA    R6,*
         B     ABPARM             IF NOT THEN PARM ERROR
         SPACE 1
PARSD15  DS    0H
         TM    PARMRC1+1,X'F0'
         BO    PARSE15            IF NOT THEN PARM ERROR
         LA    R6,*
         B     ABPARM             IF NOT THEN PARM ERROR
PARSE15  $TEST ABEND+WTOR,MIXED,BR=PARS999
         TM    PARMRC2,X'F0'      CHECK RETURN CODE TWO FOR NUMERICS
         BO    PARSF15            IF NOT THEN PARM ERROR
         LA    R6,*
         B     ABPARM             IF NOT THEN PARM ERROR
         SPACE 1
PARSF15  DS    0H
         TM    PARMRC2+1,X'F0'
         BO    PARS999            IF NOT THEN PARM ERROR
         LA    R6,*
         B     ABPARM             IF NOT THEN PARM ERROR
         SPACE 1
PARS999  DS    0H
         $HEAD 'CONVERT PARM DATA',TITLE=(,'CONVERT PARMS TO DECIMAL ANX
               D BINARY DATA')
         XC    WORK8,WORK8        CLEAR WORK AREA
         PACK  WORK8+4(4),PARMRC1(2) CONVERT GOOD RETURN CODE
         CVB   R2,WORK8              TO BINARY
         ST    R2,GOODRTRN        AND SAVE IT
         $TEST ABEND+WTOR,ZEROS,BR=CONV0002
         $TEST ABEND,ZEROS,BR=CONV0001
         MVC   BADRTRN(4),=F'222' SET FOR ABEND FROM OPERATOR
         B     CONV0003
         SPACE 1
CONV0001 DS    0H
         MVC   BADRTRN(4),=F'122' SET FOR BAD MATCH ON ABEND REQUEST
         B     CONV0003
         SPACE 1
CONV0002 DS    0H
         XC    WORK8,WORK8        CLEAR WORK AREA
         PACK  WORK8+4(4),PARMRC2(2) CONVERT BAD RETURN CODE
         CVB   R2,WORK8              TO BINARY
         ST    R2,BADRTRN         AND SAVE IT
         SPACE 1
CONV0003 DS    0H
         $TEST JDATE,ONES,BR=CONV0009
         B     CONV0004           BRANCH AROUND TABLES
         SPACE 1
TABLE1   DS    0F
         DC    CL2'01',PL2'31'    JANUARY
         DC    CL2'02',PL2'28'    FEBRUARY (NON-LEAP YEAR)
         DC    CL2'03',PL2'31'    MARCH
         DC    CL2'04',PL2'30'    APRIL
         DC    CL2'05',PL2'31'    MAY
         DC    CL2'06',PL2'30'    JUNE
         DC    CL2'07',PL2'31'    JULY
         DC    CL2'08',PL2'31'    AUGUST
         DC    CL2'09',PL2'30'    SEPTEMBER
         DC    CL2'10',PL2'31'    OCTOBER
         DC    CL2'11',PL2'30'    NOVEMBER
         DC    CL2'12',PL2'31'    DECEMBER
         DC    XL4'FFFFFFFF'      END OF TABLE
         SPACE 1
TABLE2   DS    0F
         DC    CL2'01',PL2'31'    JANUARY
         DC    CL2'02',PL2'29'    FEBRUARY (LEAP YEAR)
         DC    CL2'03',PL2'31'    MARCH
         DC    CL2'04',PL2'30'    APRIL
         DC    CL2'05',PL2'31'    MAY
         DC    CL2'06',PL2'30'    JUNE
         DC    CL2'07',PL2'31'    JULY
         DC    CL2'08',PL2'31'    AUGUST
         DC    CL2'09',PL2'30'    SEPTEMBER
         DC    CL2'10',PL2'31'    OCTOBER
         DC    CL2'11',PL2'30'    NOVEMBER
         DC    CL2'12',PL2'31'    DECEMBER
         DC    XL4'FFFFFFFF'      END OF TABLE
         SPACE 1
CONV0004 DS    0H
         PACK  PAKDATEI(4),PARMDATE+4(2) PACK YEAR
         OI    PAKDATEI+3,X'0F'
         MVC   PAKWORK3,PAKDATEI+1
         XC    WORK8(8),WORK8
         MVC   WORK8+4(4),PAKDATEI
         MP    WORK8(8),=PL3'+1000'
         MVC   PAKDATEI(4),WORK8+4
         OI    PAKDATEI+3,X'0F'
         XC    WORK8(8),WORK8
         MVC   WORK8+5(3),PAKWORK3
         DP    WORK8(8),=PL2'+04'  FIND IF LEAP YEAR
         OI    WORK8+7,X'0F'
         CP    WORK8+6(2),=PL2'+00' ANY REMAINDER:
         BE    CONV0005           NO, THEN LEAP YEAR
         LA    R2,TABLE1          POINT TO CORECT TABLE
         B     CONV0006
         SPACE 1
CONV0005 DS    0H
         LA    R2,TABLE2          POINT TO CORECT TABLE
         SPACE 1
CONV0006 DS    0H
         ZAP   PAKWORK2,=PL2'+00'
         XC    PAKWORK3,PAKWORK3
         MVI   PAKWORK3+2,X'0F'   MAKE IT PAKED +0
         SPACE 1
CONV0007 DS    0H
         LA    R6,*
         CLC   0(4,R2),=XL4'FFFFFFFF' END OF TABLE
         BE    ABPARM             YES
         CLC   0(2,R2),PARMDATE   THIS MONTH?
         BE    CONV0008           YES
         AP    PAKWORK3(3),2(2,R2) ADD THIS NUMBER OF DAYS
         LA    R2,4(R2)           BUMP POINTER
         B     CONV0007
         SPACE 1
CONV0008 DS    0H
         PACK  PAKWORK2(2),PARMDATE+2(2) PACK THE DATE OF MONTH
         AP    PAKWORK3(3),PAKWORK2(2) ADD THIS NUMBER OF DAYS
         AP    PAKDATEI(4),PAKWORK3(3) AND ADD TO YEAR
         OI    PAKDATEI+3,X'0F'   MAKE SURE ITS POSITIVE
         B     CONV0010
         SPACE 1
CONV0009 DS    0H
         PACK  PAKDATEI(4),PARMDATE(5) PACK JULIAN DATE
         OI    PAKDATEI+3,X'0F'   MAKE SURE ITS POSITIVE
         SPACE 1
CONV0010 DS    0H
         TIME  DEC                GET SYS DATE
         ST    R1,WORK4           SAVE RETURNED DATE
         ST    R1,WORK4A          SAVE RETURNED DATE
         MVC   WORK4B+3(1),WORK4+1
         L     R2,WORK4B          ADJUST FOR YEAR CROSS OVER
         SLL   R2,4
         ST    R2,WORK4B
         ST    R2,WORK4C
         XC    WORK8,WORK8
         ST    R2,WORK8+4
         OI    WORK8+7,X'0F'
         DP    WORK8(8),=PL2'04'  IS NEW YEAR LEAP YEAR
         OI    WORK8+7,X'0F'
         CP    WORK8+6(2),=PL2'00'
         BNE   CONV0A10           THIS IS NOT A LEAP YEAR
         SPACE 1
         $FLAG LEAP1
CONV0A10 DS    0H
         PACK  PAKWORK4(4),PARMAMNT(3) PACK PARM AMOUNT
         OI    PAKWORK4+3,X'0F'   MAKE SURE ITS POSITIVE
         $TEST ADD,ONES,BR=CONV0011
         SP    WORK4(4),PAKWORK4+1(3)
         CP    WORK4+2(2),=PL2'00' DECRIMENTED TO XX000
         BE    CONVAB10
         CLC   WORK4+1(1),WORK4A+1 SAME YEAR
         BE    CONV0012            THEN DONT ADJUST
         SPACE 1
CONVAB10 DS    0H
         XC    WORK4B,WORK4B      AND GET YEAR VALUE
         MVC   WORK4B+3(1),WORK4+1
         L     R2,WORK4B          ADJUST FOR YEAR CROSS OVER
         SLL   R2,4
         ST    R2,WORK4B
         XC    WORK8,WORK8
         MVC   WORK8+4(4),WORK4B
         OI    WORK8+7,X'0F'
         DP    WORK8(8),=PL2'04'  IS NEW YEAR LEAP YEAR
         OI    WORK8+7,X'0F'
         CP    WORK8+6(2),=PL2'00'
         BNE   CONV0B10           THIS IS NOT A LEAP YEAR
         $FLAG LEAP2
         SPACE 1
CONV0B10 DS    0H
         CP    WORK4+2(2),=PL2'00' DECRIMENTED TO XX000
         BNE   CONVBB10
         $TEST LEAP1,ONES,BR=CONV0D10 COMMING FROM A LEAP YEAR
         XC    WORK8,WORK8
         MVC   WORK4C(4),WORK4
         SP    WORK4C(4),=PL3'1000' DECRIMENT YEAR
         MVC   WORK8+7(1),WORK4C+1
         L     R2,WORK8+4
         SLL   R2,4
         ST    R2,WORK8+4
         OI    WORK8+7,X'0F'
         DP    WORK8(8),=PL2'04'
         OI    WORK8+7,X'0F'
         CP    WORK8+6(2),=PL2'00'
         BNE   CONV0D10           NON-LEAP YEAR INTO NON-LEAP YEAR
         B     CONV0C10           NON-LEAP YEAR INTO LEAP YEAR
         SPACE 1
CONVBB10 DS    0H
         $TEST LEAP1+LEAP2,ZEROS,BR=CONV0D10 NON-LEAP YEAR TO NON-LEAP
         $TEST LEAP2,ONES,BR=CONV0C10
         SPACE 1
*
** LEAP YEAR INTO NON-LEAP YEAR
*
         SPACE 1
         CP    WORK4A+2(2),=PL2'28'
         BL    CONV0E10           ORIGINAL DATE AFTER FEB 28
         SPACE 1
*
** COMMING INTO A LEAP YEAR
*
         SPACE 1
CONV0C10 DS    0H
         SP    WORK4(4),=PL3'634'
         B     CONV0012            DONE
         SPACE 1
*
** NEITHER YEAR IS A LEAP YEAR
*
         SPACE 1
CONV0D10 DS    0H
         SP    WORK4(4),=PL3'635'
         B     CONV0012            DONE
         SPACE 1
CONV0E10 DS    0H
         SP    WORK4(4),=PL3'636'
         B     CONV0012            DONE
         SPACE 1
CONV0011 DS    0H
         AP    WORK4(4),PAKWORK4+1(3)
         $TEST LEAP1,ONES,BR=CONV0B11
         CP    WORK4+2(2),=PL2'365'
         BH    CONV0A11           MUST BE GREATER THAN XX365
         B     CONV0012            DONE
         SPACE 1
CONV0A11 DS    0H
         AP    WORK4(4),=PL3'635'     ADD CORRECTION FACTOR
         B     CONV0012            DONE
         SPACE 1
CONV0B11 DS    0H
         CP    WORK4+2(2),=PL2'366'
         BH    CONV0C11           MUST BE GREATER THAN XX366
         B     CONV0012            DONE
         SPACE 1
CONV0C11 DS    0H
         AP    WORK4(4),=PL3'634'     ADD CORRECTION FACTOR
         SPACE 1
CONV0012 DS    0H
         MVC   PAKDATES(4),WORK4
         OI    PAKDATES+3,X'0F'   MAKE SURE IT IS POSSITIVE
         $HEAD 'GENNERATE MESSAGE',TITLE=(,'GENNERATE MESSAGE DATA FOR X
               WTOR MESSAGES')
         B     GENR0001           GO AROUND CONSTANTS AREA
WTORDAT1 WTOR  'PARM DATE OF XX/XX/XX IS NOT ?? TO DATE YY/YY/YY.  REPLX
               Y C TO CONTINUE WITH RETURN CODE NN OR A TO TAKE ABEND.'X
               ,0,1,0,MF=L
WTORDT1L EQU   *-WTORDAT1
         SPACE 1
WTORDAT2 WTOR  'PARM DATE OF XXXXX IS NOT ?? TO DATE YYYYY.  REPLY C TOX
                CONTINUE WITH RETURN CODE NN OR A TO TAKE ABEND.',     X
               0,1,0,MF=L
WTORDT2L EQU   *-WTORDAT2
         SPACE 1
GENR0001 DS    0H
         MVC   WTORLST1(WTORDT1L),WTORDAT1 INITIALIZE LIST
         MVC   WTORLST2(WTORDT2L),WTORDAT2 INITIALIZE LIST
         UNPK  WORK8(8),PAKDATES  UNPACK SYSTEM DATE UPDATED
         MVC   W2DATE2(5),WORK8+3 AND STICK IN MESSAGE 2
         OI    W2DATE2+4,C'0'     MAKE NUMERIC
         UNPK  WORK8(8),PAKDATEI  UNPACK PARM DATE UPDATED
         MVC   W2DATE1(5),WORK8+3 AND STICK IN MESSAGE 2
         OI    W2DATE1+4,C'0'     MAKE NUMERIC
         MVC   W1CODE1(2),PARMRC1
         MVC   W2CODE1(2),PARMRC1
         LA    R1,DATEWRK1        POINT TO DATE CONVERSION AREA
         MVC   WORK4,PAKDATES
         L     R5,WORK4           AND GET SYSTEM DATE
GENR0002 #CONVDAT REG=R5,RENT=YES
         MVC   W1DATE2(8),0(R5)   MOVE CONVERTED DATE TO MESSAGE
         LA    R1,DATEWRK2        POINT TO DATE CONVERSION AREA
         MVC   WORK4,PAKDATEI
         L     R5,WORK4           AND GET PARM DATE
GENR0003 #CONVDAT REG=R5
         MVC   W1DATE1(8),0(R5)   MOVE CONVERTED DATE TO MESSAGE
         $TEST EQ,ZEROS,BR=GENR0004
         MVC   W1CODE(2),=CL2'EQ'
         MVC   W2CODE(2),=CL2'EQ'
         B     GENR0999           DONE
         SPACE 1
GENR0004 DS    0H
         $TEST NE,ZEROS,BR=GENR0005
         MVC   W1CODE(2),=CL2'NE'
         MVC   W2CODE(2),=CL2'NE'
         B     GENR0999           DONE
         SPACE 1
GENR0005 DS    0H
         $TEST LT,ZEROS,BR=GENR0006
         MVC   W1CODE(2),=CL2'LT'
         MVC   W2CODE(2),=CL2'LT'
         B     GENR0999           DONE
         SPACE 1
GENR0006 DS    0H
         $TEST LE,ZEROS,BR=GENR0007
         MVC   W1CODE(2),=CL2'LE'
         MVC   W2CODE(2),=CL2'LE'
         B     GENR0999           DONE
         SPACE 1
GENR0007 DS    0H
         $TEST GT,ZEROS,BR=GENR0008
         MVC   W1CODE(2),=CL2'GT'
         MVC   W2CODE(2),=CL2'GT'
         B     GENR0999           DONE
         SPACE 1
GENR0008 DS    0H
         MVC   W1CODE(2),=CL2'GE'
         MVC   W2CODE(2),=CL2'GE'
         SPACE 1
GENR0999 DS    0H
         $HEAD 'TEST FUNCTION',TITLE=(,'TEST FOR MEETING CONDITION')
         $TEST EQ,ZEROS,BR=TEST0001
         CP    PAKDATEI(4),PAKDATES(4)
         BE    GOODRCDE
         B     BADRCDE
         SPACE 1
TEST0001 DS    0H
         $TEST NE,ZEROS,BR=TEST0002
         CP    PAKDATEI(4),PAKDATES(4)
         BNE   GOODRCDE
         B     BADRCDE
         SPACE 1
TEST0002 DS    0H
         $TEST LT,ZEROS,BR=TEST0003
         CP    PAKDATEI(4),PAKDATES(4)
         BL    GOODRCDE
         B     BADRCDE
         SPACE 1
TEST0003 DS    0H
         $TEST LE,ZEROS,BR=TEST0004
         CP    PAKDATEI(4),PAKDATES(4)
         BNH   GOODRCDE
         B     BADRCDE
         SPACE 1
TEST0004 DS    0H
         $TEST GT,ZEROS,BR=TEST0005
         CP    PAKDATEI(4),PAKDATES(4)
         BH    GOODRCDE
         B     BADRCDE
         SPACE 1
TEST0005 DS    0H
         CP    PAKDATEI(4),PAKDATES(4)
         BNL   GOODRCDE
         B     BADRCDE
         SPACE 1
GOODRCDE DS    0H
         L     R15,GOODRTRN       GET RETURN CODE
         B     EXIT               AND LEAVE
         SPACE 1
BADRCDE  DS    0H
         $TEST ABEND+WTOR,MIXED,BR=TEST0006
         L     R15,BADRTRN        GET RETURN CODE
         B     EXIT               AND LEAVE
         SPACE 1
TEST0006 DS    0H
         $TEST WTOR,ONES,BR=TEST0007
         ABEND 122
         SPACE 1
TEST0007 DS    0H
         XC    WTORECB(4),WTORECB CLEAR THE WTOR ECB
         MVI   WTORREP,C' '       CLEAR THE REPLY AREA
         $TEST JDATE,ONES,BR=TEST0008
         WTOR  ,WTORREP,1,WTORECB,MF=(E,WTORLST1)
         WAIT  1,ECB=WTORECB
         OI    WTORREP,C' '       MAKE SURE IT IS CAPS
         CLI   WTORREP,C'C'       END AS IF GOOD?
         BE    GOODRCDE           YES
         CLI   WTORREP,C'A'       VALID RESPONSE?
         BNE   TEST0007           NO, THEN ASK AGAIN
TESTABND ABEND 222
         SPACE 1
TEST0008 DS    0H
         SPACE 1
         WTOR  ,WTORREP,1,WTORECB,MF=(E,WTORLST2)
         WAIT  1,ECB=WTORECB
         OI    WTORREP,C' '       MAKE SURE IT IS CAPS
         CLI   WTORREP,C'C'       END AS IF GOOD?
         BE    GOODRCDE           YES
         CLI   WTORREP,C'A'       VALID RESPONSE?
         BNE   TEST0007           NO, THEN ASK AGAIN
         B     TESTABND
         $HEAD 'EXIT PROGRAM',TITLE=(,'CLEAN UP AND EXIT')
EXIT     $EPILOG
         $HEAD 'LITERAL TABLE',TITLE=(,'PROGRAM LISTERAL TABLE')
         LTORG
         SPACE 3
         END
/*
//*-------------------------------------------------------------------*
//LNKED    EXEC PGM=HEWL,PARM='LIST,LET,XREF,RENT,REUS',REGION=4096K,
//             COND=((0,NE),(0,EQ))
/*        CHANGE COND= PARM TO COND=(0,NE) TO LINK AFTER ASSEMBLY
//SYSPRINT  DD SYSOUT=*
//SYSLIB    DD DSN=SYS1.LINKLIB,DISP=SHR
//* SYSLMOD   DD DSN=SYSPOPRD.TECH.LOADS(DATECHCK),DISP=SHR
//SYSLMOD   DD DSN=SYS1.TEST.INSTALLS(DATECHCK),DISP=SHR
//SYSUT1    DD UNIT=WORK,SPACE=(CYL,(10,5))
//SYSUT2    DD UNIT=WORK,SPACE=(CYL,(10,5))
//SYSLIN    DD DSN=&&DECK,DISP=(OLD,DELETE)
