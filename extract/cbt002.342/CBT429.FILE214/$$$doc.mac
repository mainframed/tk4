





                           The COBOL-II POINTER





                                    by


                                Fred Schuff

                           (Wayne, Pennsylvania)










Pointers, more commonly referred to as addresses (or address constants)
on the mainframe, provide access to data areas and structures which were
previously inaccessable in the predominant, mainframe HLL (High Level
Language), COBOL.  The ability to manipulate data addresses, which is
provided through pointers, is a very powerful feature.  Pointers allow
flexible mapping of data structures which are comprised of multiple,
smaller areas assembled in various configurations.  This type of data
area is becomming more common as multi-platform systems communicate more
and more and they have always existed in system (MVS, JES, etc.) data
areas.  Other HLLs, like PL/I, have supported pointers for a number of
years.  The "C" language is heavily based on pointers and COBOL
implementations on PC platforms support pointers as well.

Composite data areas can be dynamically addressed using standard
fixed-length data layout segments using pointers to map portions of
these data areas to their actual, fixed-length data structure segments.

Fixed-length data structures are no longer the only ones encountered.
Variable length data areas with imbedded offsets and lengths are
becoming more prevalent as systems interact with other systems.  Many
IBM system control blocks are structured to contain both data values and
the addresses of other data structures.  Each of these data types are
often comprised of many component segments which can appear in various
sequences and thus at various locations within the overall structure.

               Structure #1                        Structure #2
   Address+---------------------+     Address+-----------------------+
     500  ×    Section - 1      ×       500  ×                       ×
     600  ×---------------------×            ×     Section - 2       ×
          ×                     ×       700  ×-----------------------×
          ×    Section - 2      ×            ×     Section - 3       ×
     800  ×---------------------×       820  ×-----------------------×
          ×    Section - 3      ×            ×     Section - 1       ×
     920  +---------------------+       920  +-----------------------+

There is a wealth of information available in system data areas.  For
example, under MVS, the JOBNAME and STEPNAME of the executing JOB as
well as the USERID associated with the JOB are all available through
system (MVS) data areas.  File names (DDNAMEs) which have been allocated
in a step along with the dataset names (DSNAMEs) are also available.
This information is very useful when tracking and reporting usage of
programs, systems and resources as well as for logging problem
conditions.


POINTERS and VALUES

It is important to understand pointers.  Data has both a value and a
location where it is stored in memory.  To access data, it must be
possible to obtain either the data value or the data address.

        Memory             Memory
        Address           Contents         Comments/Description

          100                500 >-+        Address of Field "A"
                                   ×
    +------------------------------+
    ×
    +---> 500                  5            Field "A" with a value of 5
          504                800 >-+        Address of Field "B"
                                   ×
    +------------------------------+
    ×
    +---> 800                  7            Field "B" with a value of 7


   +------------------------------------------------------------------+
   ×  Data Element A      ×     Address = 500      ×     Value = 5    ×
   ×----------------------+------------------------+------------------×
   ×  Data Element B      ×     Address = 800      ×     Value = 7    ×
   +------------------------------------------------------------------+

Actually, it is impossible to differentiate data from addresses of data
in memory.  Each value depends upon the context in which that value in
memory is being used.  In the example, the value of 800 at location 504
is an address because the program which stored that value "meant" it to
be an address.  In another program, the value of 800 at location 504
could have meant a data value.


The COBOL-II POINTER

COBOL-II POINTER variables provide the ability to dynamically address
data areas.  POINTER manipulation statements reset the address of the
physical data area location as a program executes.  This simple facility
greatly enhances the power of programming in the COBOL language.

The basic POINTER syntax will establish the address of a data area via
the SET verb and the "ADDRESS OF" clause.  COBOL-II implements the
POINTER type variable as a binary fullword, PIC S9(9) USAGE COMP.  That
is, POINTERs are addresses which occupy a fullword.  This is the
standard MVS address constant.  MVS addresses are either 24-bit or
31-bit binary values which occupy the low-order (rightmost) 24 or 31
bits of a fullword.  This is exactly how the POINTER is treated in
COBOL-II.  Therefore, the POINTER variables can address any data
structure.

   +---------------------------------------------------------------+
   × MEMORY:  WORD=4 BYTES  ×  BYTE-0   BYTE-1   BYTE-2   BYTE-3   ×
   ×          or BITS 0-3   × 00000000 00111111 11112222 22222233  ×
   ×                  0-1   × 01234567 89012345 67890123 45678901  ×
   +------------------------+--------------------------------------+
   × ADDRESS:     24-BIT    × -------- XXXXXXXX XXXXXXXX XXXXXXXX  ×
   ×              31-BIT    × -XXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX  ×
   +---------------------------------------------------------------+

The basic limitation in the COBOL-II implementation is that the value of
a POINTER can not be readily set to any value; it must be set to the
address of a data element (level 01 or 77) named in the LINKAGE Section.
It is often desirable to address an area which is not passed through the
LINKAGE Section.  This includes MVS control blocks and data area in
WORKING-STORAGE.  Similarly, it precludes using WORKING-STORAGE
structures to compute offsets or lengths of data segments.


SOME EXAMPLES

The first use of pointers is to address composite data structures.  This
requires a slightly modified definition of the structure for each part
of the data array.  Referring back to the data structures shown
previously which were comprised of the 3- segments, the coding to
address these areas is shown in the following code segment; assume the
first character of each area is the section number (i.e., "1", "2" or
"3").

The address of the next area is assigned with the SET pointer TO ADDRESS
OF data-field syntax.  This will place the address of the "data-field"
in the pointer variable.  This is done for the first byte of the next
area.  The second part of the process is then to assign that address
(pointer) to the proper data structure.  This is accomplished by using
the type code.  If there is no type code, then the determination of the
proper data section to be addressed must be dependent upon some other
piece of information.

     WORKING-STORAGE SECTION.

     01   PTR            USAGE POINTER.
     01   WS-TYPE        PIC X(1).

     LINKAGE SECTION.
     01   SECTION-0.
          05  SECTION-0-NEXT       PIC X(1).
     01   SECTION-1.
          05  SECTION-1-DATA       PIC X(100).
          05  SECTION-1-NEXT       PIC X(1).
     01   SECTION-2.
          05  SECTION-2-DATA       PIC X(200).
          05  SECTION-2-NEXT       PIC X(1).
     01   SECTION-3.
          05  SECTION-3-DATA       PIC X(120).
          05  SECTION-3-NEXT       PIC X(1).

      PROCEDURE DIVISION USING SECTION-0.

     *    ******************************************************
     *    * GET THE INITIAL SECTION ADDRESS AND ASSIGN IT TO   *
     *    *  THE PROPER AREA STRUCTURE                         *
     *    ******************************************************
          MOVE SECTION-0-NEXT TO WS-TYPE.
          SET PTR TO ADDRESS OF SECTION-0-NEXT.
          PERFORM 8888-SWAP.
     *    ******************************************************
     *    *  PROCESS THE DATA BY SECTION                       *
     *    ******************************************************
      1111-PROCESS.
          EVALUATE WS-TYPE
               WHEN '1'
                    process Section-1 data
                    MOVE SECTION-1-NEXT TO WS-TYPE
                    SET PTR TO ADDRESS OF SECTION-1-NEXT
               WHEN '2'
                    process Section-2 data
                    MOVE SECTION-2-NEXT TO WS-TYPE
                    SET PTR TO ADDRESS OF SECTION-2-NEXT
               WHEN '3'
                    process Section-3 data
                    MOVE SECTION-3-NEXT TO WS-TYPE
                    SET PTR TO ADDRESS OF SECTION-3-NEXT
               WHEN OTHER
                    GOBACK
          END-EVALUATE.
          PERFORM 8888-SWAP.
          GO TO 1111-PROCESS.

     *    ******************************************************
     *    * PICK UP THE NEXT AREA ADDRESS BASED ON 'TYPE' CODE *
     *    ******************************************************
      8888-SWAP.
          EVALUATE WS-TYPE
               WHEN '1'
                    SET ADDRESS OF SECTION-1 TO PTR
               WHEN '2'
                    SET ADDRESS OF SECTION-2 TO PTR
               WHEN '3'
                    SET ADDRESS OF SECTION-3 TO PTR
          END-EVALUATE.

Pointers are also used to address data areas which contain system (MVS,
JES, etc.) information.  Consider a simple requirement to display the
name of the JOB which is being executed as part of the messages the job
displays.  The JOBNAME (8- characters) is available through the
following structure of MVS data areas (or control blocks):

     CVT => TCB-WORDS => CURRENT-TCB => TIOT (contains JOBNAME)

      where:   CVT            = Communications Vector Table
          TCB-WORDS      = Pointers to the previous and current TCBs
          TCB            = Task Control Block
          TIOT                = Task Input Output Table
           =>                 = contains the address of

To access the field JOBNAME, the addressing required is fairly simple to
accomplish in assembler language:

     L    R1,16(R0)           A(CVT) @ Location X'10' (16 decimal)
     L    R1,0(R1)            A(TCB-WORDS) @ CVT+0
     L    R1,4(R1)            A(CURR-TCB) @ TCB-WORDS+4
     L    R1,12(R1)           A(TIOT) @ CURR-TCB+X'C' (12 decimal)
     MVC  JOBNAME(8),0(R1)         JOBNAME @ TIOT+0

IN COBOL-II the same result can be obtained as follows (after defining
the data areas which are required, like the TIOT):

      WORKING-STORAGE SECTION.
      01  WORK-AREA.
          05  PTR                  POINTER.
          05  WORD  REDEFINES PTR       PIC S9(9) COMP.
          05  WS-JOBNAME           PIC X(8).

      LINKAGE SECTION.
      01  WORDS.
          05  W   OCCURS 100 TIMES PIC S9(9) COMP.

      01  TIOT-TIOT.
     *    TIOT (TASK INPUT OUTPUT TABLE) DEFINITION
          05  TIOT-TIOCNJOB             PIC X(08).
          05  TIOT-TIOCSTEP.
              10  TIOT-TIOJSTEP         PIC X(08).
              10  FILLER           PIC X(08).
          05  FILLER  REDEFINES TIOT-TIOCSTEP.
              10  TIOT-TIOPSTEP         PIC X(08).
              10  TIOT-TIOPJSTP         PIC X(08).
          05  TIOT-TIOENTRY-NO-1        PIC X(01).
      01  TIOT-TIOENTRY.
     *    TIOT DD-ENTRY
          05  TIOT-TIOELNGH             PIC X(01).
          05  TIOT-TIOESTTA             PIC X(01).
          05  TIOT-TIOERLOC.
              10  TIOT-TIOEWTCT         PIC X(01).
              10  TIOT-TIOELINK         PIC X(01).
          05  TIOT-TIOEDDNM             PIC X(08).
          05  TIOT-TIOEJFCB             PIC X(03).
          05  TIOT-TIOESTTC             PIC X(01).
          05  TIOT-TIOESTTB             PIC X(01).
          05  TIOT-TIOEFSRT             PIC X(03).
     *    TIOT POOL ENTRY
          05  TIOT-POOLSTAR             PIC X(01).
          05  TIOT-TIOPNSLT             PIC X(01).
          05  FILLER                    PIC X(01).
          05  TIOT-TIOPNSRT             PIC X(01).
          05  TIOT-TIOPPOOL             PIC X(08).
          05  TIOT-TIOPSTTB             PIC X(01).
          05  TIOT-TIOPSLOT             PIC X(03).
          05  TIOT-TIOTFEND             PIC X(04).
     ****************END-OF-TIOT**********************

     PROCEDURE DIVISION.

          MOVE +16 TO WORD.
          SET ADDRESS OF W TO PTR.      (1)
          MOVE W(1) TO WORD.
          SET ADDRESS OF W TO PTR.      (2)
          MOVE W(1) TO WORD.
          SET ADDRESS OF W TO PTR.      (3)
          MOVE W(2) TO WORD.
          SET ADDRESS OF W TO PTR.      (4)
          MOVE W(4) TO WORD.
          SET ADDRESS OF TIOT-TIOT TO PTR.
          MOVE TIOT-TIOCNJOB TO WS-JOBNAME.

The COBOL-II implementation presents two obstacles which the above
example overcomes.  The first is that pointers can not be set to just
any value.  The trick is to REDEFINE a POINTER variable as a fullword
binary value (PIC S9(9) COMP) so that COBOL can MOVE values to/from this
data area which overlays a pointer.  Those data values to be moved are
actually the addresses of other data areas.  In the example above, a
binary fullword field, WORD, REDEFINES the pointer field, PTR.  This
allows values (i.e. +16, W(1), etc.) to be MOVEd to the pointer by
MOVEing them to the binary field.  Additionally, the binary fields can
be used in arithmetic statements and COMPUTEs to change or alter the
value of the POINTER value.

The second point to remember is that each time the value of the pointer
variable is changed by altering the binary field which REDEFINES that
pointer (WORD), the SET statement must be re-executed.  This is required
even when the SET statement is identical (see statements (1), (2), (3)
and (4) in the above example.)  COBOL-II can handle "chained lists of
pointers", if the individual fields in the data areas are defined as
USAGE POINTER.  In some cases, this would still require a REDEFINES for
fullword used as a 24-bit address as both a POINTER and a character
fields to access the high-order byte or where calculations were required
when using the pointer.

     01   PTR-FIELD.
          05   PTR                 POINTER.
          05   FILLER  REDEFINES PTR.
               10   FIRST-BYTE          PIC X(01).
               10   OTHER-BYTES         PIC X(03).

Another example accesses the USERID.  This reqquires a slightly more
complex data chain:

  CVT => TCB-WORDS => CURRENT-ASCB => ASXB => ACEE (contains USERID)

      where:   ASCB                = Address Space Control Block
          ASXB           = Address Space Extension Block
          ACEE           = Accessor Environment Element

In assembler language this is accessed as follows:

     L    R1,16(R0)           A(CVT) @ Location X'10' (16 decimal)
     L    R1,0(R1)            A(TCB-WORDS) @ CVT+0
     L    R1,12(R1)           A(CURR-ASCB) @ TCB-WORDS+X'C' (12 decimal)
     L    R1,108(R1)          A(ASXB) @ CURR-ASCB+X'6C' (108 decimal)
     L    R1,200(R1)          A(ACEE) @ ASXB+X'C8' (200 decimal)
     MVC  USERID(8),21(R1)    USERID @ ACEE+X'15' (21 decimal)

In COBOL-II, the code is as follows:

      WORKING-STORAGE SECTION.
      01  WORK-AREA.
          05  PTR                  POINTER.
          05  WORD  REDEFINES PTR       PIC S9(9) COMP.
          05  WS-USERID            PIC X(8).

      LINKAGE SECTION.
      01  WORDS.
          05   W   OCCURS 100 TIMES     PIC S9(9) COMP.

      01  ACEE.
          05  FILLER                    PIC X(21).
          05  ACEE-USERID               PIC X(8).
          05  FILLER                    PIC X(..).

     PROCEDURE DIVISION.

          MOVE +16 TO WORD.
          SET ADDRESS OF W TO PTR.
          MOVE W(1) TO WORD.
          SET ADDRESS OF W TO PTR.
          MOVE W(1) TO WORD.
          SET ADDRESS OF W TO PTR.
          MOVE W(4) TO WORD.
          SET ADDRESS OF W TO PTR.
          MOVE W(28) TO WORD.
          SET ADDRESS OF W TO PTR.
          MOVE W(51) TO WORD.
          SET ADDRESS OF ACEE TO PTR.
          MOVE ACEE-USERID TO WS-USERID.


ANOTHER EXAMPLE

Another technique using COBOL-II POINTERs demonstrates how to list the
files allocated to a job.  Using the TIOT (Task Input Output Table) from
the first example, the DDNAMEs can be located.   Re-defining the pointer
storage as a binary data item permits the pointer's value to be part of
a calculation.  Within the TIOT data structure, the length of each fixed
format file entry is defined by the length byte (the first byte) of the
entry itself.  The next file entry in the TIOT is located by adding the
length to the pointer value.  Note how the single byte length, a data
type which is not supported in COBOL-II, can be moved into a COBOL-II,
binary format number field and then used is computational statement.

The COBOL-II code fragments are shown below:

     WORKING-STORAGE SECTION.

     05   WS-TIOTDD                USAGE POINTER.
     05   WS-TIODD-ADDR REDEFINES WS-TIOT
                                   PIC S9(9) COMP.
     05   WS-WORD                  PIC S9(9) COMP.
     05   FILLER REDEFINES WS-WORD.
          10  FILLER               PIC X(03).
          10  WS-BYTE              PIC X(01).

     PROCEDURE DIVISION.

          SET ADDRESS OF TIOT-TIOT     TO  WS-TIOT.
          SET WS-TIODD TO ADDRESS      OF  TIOT-TIOENTRY-NO-1.
          SET ADDRESS OF TIOT-TIOENTRY TO  WS-TIODD.

     0999-TIOTDD.
          MOVE ZERO TO WS-WORD
          MOVE TIOT-TIOELNGH TO WS-BYTE.
          IF WS-WORD NOT EQUAL ZERO
               DISPLAY 'DDNAME = ' TIOT-TIOEDDNM
               ADD WS-WORD TO WS-TIODD-ADDR
               SET ADDRESS OF TIOT-TIOENTRY TO WS-TIODD
               GO TO 0999-TIOTDD
          END-IF.


TRYING TO COUNT PARAMETERS IN A PARAMETER-LIST

One thing that the COBOL-II pointer implementation does not provide is
the ability to count the number of parameters passed to a COBOL
subprogram (or subroutine.) This would eliminate many ABENDs which occur
when a parameter list is coded improperly in the CALLing program.  A
standard COBOL-II subprogram CALL is:

   CALL 'program-name' USING parameter-1 parameter-2 ... parameter-j.

Standard program linkage will construct a parameter list containing the
addresses of the parameters and then pass them in one contiguous area
which is pointer to by Register-1.  The last parameter address is
"flagged" with the high-order bit being set to '1' (the X'80000000
value).  Thus, a list would look as follows:

  Register-1 =>     A(parameter-1)           parameter-list + 0
               A(parameter-2)           parameter-list + 4
                    .                        .
               A(parameter-i)           parameter-list + 4*(i-1)
                    .                        .
               A(parameter-j)+X'80000000'    parameter-list + 4*j

A CALL(ed) COBOL-II subprogram references the parameter list to access
the addresses of the parameters which are passed.  The address of
parameter-i is fetched from the list at an offset of +4*(i-1).  There is
no logic in the generated COBOL-II code to determine the end of the
list.  Therefore, parameter addresses are merely fetched from the
4-bytes in the maximum length parameter list which would have contained
the address, if it were passed.  Therefore, using the following sequence
will not work:

     LINKAGE SECTION.
     01  PARAMETER-NUMBER-01       PIC .....
     01  PARAMETER-NUMBER-02       PIC .....
          .
     01  PARAMETER-NUMBER-10       PIC .....

     PROCEDURE DIVISION.

         SET POINTER-10 TO ADDRESS OF PARAMETER-NUMBER-10.
         IF  POINTER-10 IS NULL
             logic if no 10th parameter passed
         END-IF.


A FINAL NOTE

The COBOL-II POINTER provides a powerful method to address data which
was difficult, or impossible, to access previously with COBOL.  POINTERs
are both powerful and dangerous because they can defeat the protections
built into COBOL by having to name all variables to be accessed.

The addition of pointers should be looked upon as a better tool to
assist in providing systems which are more reliable, informative and
self contained.  It merely requires the application of the POINTER
feature of COBOL-II in conjunction with some knowledge of MVS, JES and
data structures, to provide some rather impressive capabilities to the
standard business processing environment.


Note:     COBOL-II structures for a number of MVS control blocks can be
          obtained by sending a self-addressed, stamped envelope with a
          3.5" diskette (720KB or 1.44MB) or a 5.25" diskette (1.2MB)
          to the author.  The control block definitions include the
          ACEE, ASCB, ASVT, ASXB, CDE, CVT, DEB, PDSDE, RB, TCB, TIOT
          (shown above) and UCB.



END
