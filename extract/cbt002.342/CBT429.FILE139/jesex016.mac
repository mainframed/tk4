//*
//*
//* JES2 USER EXITS . . . Have FUN!
//*
//ASM    EXEC ASMXA,LKEDOPT='AC=1',
//     ASMLB1='SYS1.AMODGEN',
//     ASMLB2='SYS1.HASPSRC',
//     SYSCR=VIO,
//*    LINKPDS='SOFT.LOAD(JESEX016)'
//     LINKPDS='SYS2.LINKLIB(JESEX016)'
//ASM.SYSIN  DD  *
*
*
* MODULE NAME: JESEX016
*
* DESCRIPTIVE NAME: JES2 EXIT 016 - MAX COND CODE/ABEND CODE SUPPORT
*
* AUTHOR: Dennis Longnecker
*         Administrator for the Courts
*         1206 South Quince Street, MS EZ-11
*         Olympia, WA  98504
*
* DATE WRITTEN: June 1989
*
* SYSTEM: JES 2.2.0
*
* PURPOSE: This exit obtains the steps condition code(s) that exit 8
*          placed into the JCTUSER area and sends it via a $WTO to
*          the user
*
*          I assume that if exit 8 was not called, the job had a JCL
*          error and I issue such a message.  Otherwise, I send the
*          message in JCTUSER1.
*
*          I was going to have the exit return not send my message
*          and have JES2 issue his message if exit 8 was not called
*          but JES's message did not look as nice as mine and I wanted
*          some consitancy in the message.
*
*
* INVOCATION POINT: JESEX016
*
* ENTRY POINT: UEXIT16
*
* Registers on input:
*     R0: Code passed by JES2
*         =0, Indicates that this is first message
*         =4, Indicates that this is not the first message
*     R1: Address of a three word parameter list
*         Word 1 (+0) address of the message that is to be sent
*         Word 2 (+4) address of the $WTO parameter list
*         Word 4 (+8) address of the JCT
*     R2-R10: N/A
*     R11: Address of the HCT
*     R12: N/A
*     R13: Address of an OS-Style save area
*     R14: Return address
*     R15: Entry address
*
* Registers on return:
*     R0 : N/A
*     R1 : Address of the 3-word parameter list
*     R2-R14: N/A
*     R15: A Return code:
*          =0, Continue normal exit or JES2 processing
*          =4, Ignore other exit routines and to continue notify
*          =8, Tells JES2 not to issue notify message
*
* JES2 macros used:
*     $ENTRY, $MODEND, $SAVE, $RETURN, $WTO, $GETBUF, $FREEBUF
*
         COPY $HASPGBL
*
JESEX016 $MODULE SYSP=(GEN,GEN,DATA,GEN,GEN),                          X
               ENVIRON=JES2,                                           X
               TITLE='JES2 NOTIFY PROCESSOR',                          X
               $HASPEQU,           GENERATE HASP EQUATES               X
               $PCE,               GENERATE HASP PCE DSECT             X
               $JQE,               GENERATE HASP JQE DSECT             X
               $BUFFER,            GENERATE HASP BUFFER DSECT          X
               $HCT,               GENERATE HASP HCT DSECT             X
               $JCT,               GENERATE HASP HCT DSECT             X
               $COMWORK,           GENERATE HASP COMWORK DSECT         X
               $MIT,               GENERATE HASP MIT DSECT             X
               RPL,                                                    X
               RESPA,                                                  X
               $JOE,                                                   X
               $PADDR,                                                 X
               $CMB
*
UEXIT16  $ENTRY BASE=12
*
         $SAVE
*
         LR    R12,R15                       load local base register
         L     R7,4(R1)                             get the $WTO list
         L     R10,8(R1)                             load JCT address
         USING CMBWTOPL,R7                               its ours now
         USING JCT,R10                                   its ours now
*
         $GETBUF TYPE=HASP,FIX=YES,WAIT=YES            get workbuffer
         LR    R5,R1                           load address of buffer
         USING NOTEMSG,R5              set addressability to WTO area
*
         LA    R9,NOTE                    r9 gets the dsect NOTE area
         MVI   NOTE,C' '                            clean up the area
         MVC   NOTE+1(150),NOTE
*
         CLI   JCTUSER0,X'80'                  did exit 8 get called?
         BE    SENDMSG             nope, don't move in message from 8
*
*  Exit 8 was not called, determine if job JCL'ed
*
         MVC   NOTECOMM(56),JCLERROR        load a default message in
         B     NONZMSG                             go put the time in
*
SENDMSG  EQU   *
         MVC   NOTECOMM(56),JCTUSER1            exit 8 put codes here
*
NONZMSG  EQU   *                                         get the time
         TIME  DEC                                                and
         ST    R0,FWORD                                          make
         MVI   FWORD+3,X'0C'                                       it
         UNPK  DWORD(7),FWORD(4)                               pretty
         MVC   TIME(2),DWORD                                       to
         MVC   TIME+3(2),DWORD+2                                 look
         MVC   TIME+6(2),DWORD+4                                   at
         MVC   NOTETIME(8),TIME                    move the time over
*
         MVI   NOTETIM1,C'('
         MVI   NOTETIM2,C')'
*
         LA    R4,NOTEEND                        go to end of message
ADUSR    EQU   *       <---------+
         CLI   0(R4),C' '        |                     is it a blank?
         BNE   ADUSR1    >----+  |                         no, branch
         S     R4,=F'1'       |  |                     adjust pointer
         B     ADUSR   >------|--+                    go do it again!
*                             |
ADUSR1   DS    0H        <----+
         LA    R4,1(R4)                       go forward to the space
         MVC   0(8,R4),TRAILER
         MVC   8(8,R4),CMBUSER              move over planned user id
*
         LA    R4,NOTEEND                       GOT TO END OF MESSAGE
ADUSR2   EQU   *       <---------+
         CLI   0(R4),C' '        |                     is it a blank?
         BNE   ADUSR3    >----+  |                         no, branch
         S     R4,=F'1'       |  |                     adjust pointer
         B     ADUSR2  >------|--+                    go do it again!
*                             |
ADUSR3   DS    0H        <----+
         LA    R4,1(R4)                       go forward to the space
         MVC   0(8,R4),TRAILER2
*
SENDIT   EQU   *
         MVC   NOTESEND(4),SENDCOMM            move SEND command over
         MVC   NOTECOMP,COMPLETE                 "  job has completed
         MVC   NOTEJOB(8),JCTJOBID               "         job number
         MVC   NOTENAME(8),JCTJNAME              "           job name
         LA    R4,127                            "  length of message
         LA    R7,NOTE
         $WTO  (R7),(R4),JOB=NO,TYPE=SVC34,CMB=NO
*
*
EXIT     EQU   *
         $FREEBUF (R5)                         free the buffer we got
         LA    R15,8        set return code so jes does not issue wto
         $RETURN RC=(R15)                                     go home
         EJECT
*
* DATA AREAS
*
SENDCOMM DC    C'SE ',X'7D'
TRAILER  DC    X'7D',C',USER=('
TRAILER2 DC    C'),LOGON '
*
QUOTE    DC    X'7D'
DWORD    DC    D'0'
FWORD    DC    F'0'
JCLERROR DC    CL(NOTEXSIZ)'JCL Error'
COMPLETE DC    C'Has Completed '
*
TIME     DC    CL8'  :  :  '
*
         LTORG
         $MODEND
*
NOTEMSG  DSECT
         DS    CL104                          jes uses this area!!!
NOTE     DS    CL160
         ORG   NOTE                            send us back to doe!
         DS    CL2               blanks
NOTESEND DS    CL4               <se '>
NOTEJOB  DS    CL8               <JOB xxxx>
         DS    CL1
NOTENAME DS    CL8               <jobname >
         DS    CL1
NOTECOMP DS    CL14              <has completed >
NOTETIM1 DS    CL1
NOTETIME DS    CL8               <hh:mm:ss >
NOTETIM2 DS    CL1
         DS    CL1
NOTEXSIZ EQU   128-*+NOTE
NOTESNUM EQU   NOTEXSIZ/18       how many steps?
NOTECOMM DS    CL(NOTEXSIZ)      filler
NOTEEND  EQU   *                          end of the thing
         DS    CL50
*
         END
//*
//* Linkedit control cards for the JES exit(s)
//LKED.SYSIN DD  *
 ORDER JESEX016
 NAME JESEX016(R)
//*
