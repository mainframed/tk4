//*
//*
//* JES2 USER EXITS . . . Have FUN!
//*
//ASM    EXEC ASMXA,LKEDOPT='AC=1',
//     ASMLB1='SYS1.AMODGEN',
//     ASMLB2='SYS1.HASPSRC',
//     ASMLB3='SOFT.PROGRAMS',
//     SYSCR=VIO,
//*    LINKPDS='SOFT.LOAD(JESEX008)'
//     LINKPDS='SYS2.LINKLIB(JESEX008)'
//ASM.SYSIN  DD  *
*
* MODULE NAME: JESEX008
*
* DESCRIPTIVE NAME: JES2 EXIT 008 - MAX COND CODE/ABEND CODE SUPPORT
*
* AUTHOR: Dennis Longnecker
*         Administrator for the Courts
*         1206 South Quince Street, MS EZ-11
*         Olympia, WA  98504
*
* DATE WRITTEN: June 1989
*
* SYSTEM: JES 2.2.0
*
* PURPOSE: This exit obtains the steps condition code(s) and places
*          them in the user area of the JCT.
*
*          If the job abends, the system abend (or user abend), the
*          abend code is placed in the JCT.
*
*          If the job completes normally, all zero condition codes,
*          the message 'Condition Code Zero' is placed in the JCT.
*
*          Otherwise the first three (3) non-zero condition codes
*          are placed in the JCT.
*
*          I was thinking of modifing the program to obtain some
*          storage and place the condition codes in the storage
*          area instead of the JCT.  That way more than 3 condition
*          codes could be used.  But that could be done later.
*
*          I have taken pieces from a couple of programs like this
*          one and have arrived with this one.  The OUTPUT looks like
*          the NOTIFY our WYLBUR users get.
*
*
*
* INVOCATION POINT: JESEX008
*
* ENTRY POINT: UEXIT8
*
* Registers on input:
*     R0: Code passed by JES2
*         =0, Indicates that the JCT has been read from the SPOOL
*         =4, Indicates that the JCT will be written to the SPOOL
*     R1: Address of the JCT
*     R2-R10: N/A
*     R11: Address of the SSVT
*     R12: N/A
*     R13: Address of an OS-Style save area
*     R14: Return address
*     R15: Entry address
*
* Registers on return:
*     R0-R1: N/A
*     R15: A Return code:
*          =0, Continue normal exit or JES2 processing
*          =4, Ignore any other exits and continue with normal
*              processing
*
* JES2 macros used:
*     $ENTRY, $MODEND
*
         EJECT
         COPY $HASPGBL                 COPY HASP GLOBALS
         EJECT
JESEX008 $MODULE ENVIRON=USER,                                         C
               $BUFFER,                                                C
               $HASPEQU,                                               C
               $JCT,                                                   C
               RPL,                                                    C
               $MIT,
*
UEXIT8   $ENTRY BASE=R12                     Exit routine entry point
*
         STM   R14,R12,12(R13)                 save callers registers
         LR    R12,R15                       load local base register
         LR    R10,R1                              get address of JCT
*
*  check to see if there is a jct , if it is for a batch job and
*  if notify was requested.  if not, return.
*
         SPACE 1
         LTR   R0,R0                               is JCT being read?
         BZ    RETURN                                     yes, return
*
         USING JCT,R10
*
         CLI   JCTJOBID,C'J'                     is this a batch job?
         BNE   RETURN                                    nope, return
*
         CLI   JCTTSUID,C' '                    was notify requested?
         BE    RETURN                                    nope, return
*
         TM    JCTJBOPT,JCTXBACH               is this batch monitor?
         BO    RETURN                                     yes, return
*
         MVI   JCTUSER1,C' '
         MVC   JCTUSER1+1(59),JCTUSER1
         MVC   JCTUSER1(20),ZEROMSG                  init the message
*
         MVI   JCTUSER0,X'80'                    set flag for exit 16
*
GETCVT   EQU   *
*
*  Time to chase some pointers . . . .
*     The toe bone is connected to the foot bone . . .
*     The foot bone is connected to the leg bone . . .
*
* -----------------------------------------------------
*                           --->SCT-->STEP CC,STEPNAME
* 16-->CVT-->TCB-->JSCB-->JCT-->ACT-->DEFAULT ACCOUNT ID
*                    --->SSIB-->REAL JOB NUMBER
* -----------------------------------------------------
*
         L     R15,16                                   the beginning
         L     R15,0(R15)                            addr of next TCB
         L     R15,4(R15)                             addr of our TCB
         L     R15,TCBJSCB(R15)                          addr of JSCB
         L     R15,JSCBACT(R15)                          addr of SSIB
         L     R15,JSCBJCT(R15)                       addr of the JCT
*
* These addresses I got from somewhere
TCBJSCB  EQU   X'B4'         OFFSET INTO TCB OF JSCB ADDRESS
JSCBACT  EQU   X'15C'        OFFSET INTO JSCB OF ACTIVE JSCB ADDRESS
JSCBJCT  EQU   X'104'        OFFSET INTO ACTIVE JSCB OF OS JCT ADDRESS
*
*
         USING INJMJCT-16,R15
*
ABENDCHK EQU   *
         TM    JCTJSTAT,JCTABEND                    is this an abend?
         BO    ABENDFMT                                   yes, branch
*
         L     R6,JCTSDKAD                         pointer to 1st SCT
         USING INSMSCT-16,R6
*
         LA    R8,JCTUSER1                    point to next open slot
         LA    R4,3                            enough for x stepnames
*
SCTLOOP  EQU   *
         SRL   R6,8   make it good
         LTR   R6,R6                                anymore pointers?
         BZ    RETURN                                    nope, branch
*
SCTLOOP2 EQU   *                                     skip past prefix
         TM    SCTSTEND,SCTSTPND                   step executed yet?
         BNZ   NOSKIP                                     yes, branch
         B     SKIPSTEP  >-------->+                    skip this sct
*                                  |
NOSKIP   EQU   *                   |
         TM    SCTSTEND,X'80'      |                    step skipped?
         BZ    SKIPSTEP  >-------->+                      yep, branch
         LH    R5,SCTSEXEC         |              step condition code
         LTR   R5,R5               |                       step okay?
         BNZ   SCTFMT  >----->+    |         nope, branch non-zero CC
*                             |    |
SKIPSTEP EQU   *         <--------<+
         L     R6,SCTANSCT    |                         point to next
         B     SCTLOOP        |                         keep looking!
*                             |
*   Okay, this step had a non-zero CC...let's process it
*                             |
SCTFMT   EQU   *       <-----<+
         LA    R7,JCTUSER1                       first place for code
         CR    R7,R8                         are we at the beginning?
         BE    SCTFIRST                                   yes, branch
         MVC   0(2,R8),=C', '                          make it pretty
         LA    R8,2(R8)                              go up two places
         B     SCTGO
SCTFIRST EQU   *
         MVC   JCTUSER1(20),=CL20' '              make it real pretty
*
SCTGO    EQU   *
         MVC   0(8,R8),SCTSNAME                             step name
         CLI   0(R8),C' '                        any step name given?
         BNE   REALSTEP                                   yes, branch
         MVC   0(8,R8),SCTPGMNM                      move in PGM name
*
REALSTEP MH    R5,=H'10'                           multiply CC by ten
         CVD   R5,DWORD                                    convert it
         MVC   9(3,R8),=C'CC='                      move eye readable
         UNPK  12(5,R8),DWORD+5(3)               place CC into output
         MVC   16(2,R8),=C'  '                clean up the pack stuff
*
*  Get ready for next entry
*
         LA    R8,16(R8)                           point to next slot
         L     R6,SCTANSCT                          point to next SCT
*
*  We can only handle so many entries.  If we have reached the limit
*  fall through and put in some elipses so that the user knows there
*  was more that we have not checked.
*
         BCT   R4,SCTLOOP              continue for STEPNUM STEPNAMES
         MVC   0(4,R8),=C' ...'                   may be more elipses
         B     RETURN                                go send message!
*
ABENDFMT EQU   *
*
         L     R5,JCTACODE                          system abend code
         LA    R5,0(R5)
         MVC   JCTUSER1(20),ABENDMSG          move "ABENDED WITH A U"
         LR    R5,R5                            move to temp register
         SRL   R5,12
         LTR   R5,R5                                    system abend?
         BZ    CONVERT                                   nope, branch
*
*  handle system abend here                convert one byte at a time
*
         MVI   JCTUSER1+15,C'S'                  mark as system abend
         LR    R7,R5
         SRL   R7,8                                      make it high
         N     R7,=XL4'F'                                order nibble
         LA    R7,HEXTABLE(R7)                             convert it
         MVC   JCTUSER1+16(1),0(R7)                           move it
*
         LR    R7,R5                   2nd byte        get abend code
         SRL   R7,4                             isolate second nibble
         N     R7,=XL4'F'
         LA    R7,HEXTABLE(R7)                             convert it
         MVC   JCTUSER1+16+1(1),0(R7)                         move it
*
         LR    R7,R5                   3rd byte        get abend code
         N     R7,=XL4'F'
         LA    R7,HEXTABLE(R7)                             convert it
         MVC   JCTUSER1+16+2(1),0(R7)                         move it
         B     SKIPUSAB           >---------+         skip user abend
*                                           |
CONVERT  EQU   *                            |
         CVD   R5,DWORD                     |       user abend in R5
         OI    DWORD+7,X'0F'                |                 sign it
         UNPK  JCTUSER1+16(5),DWORD+5(3)    |    place in output area
         MVC   JCTUSER1+16(4),JCTUSER1+17+1 |
         MVI   JCTUSER1+16+4,C' '           |            clean it up!
*                                           |
SKIPUSAB EQU   *                 <----------+
*
RETURN   EQU   *
         SLR   R15,R15                             set return code
         L     R14,12(R13)             LOAD RETURN ADDRESS
         LM    R0,R12,20(R13)          RESTORE REGISTERS
         BR    R14                     RETURN
         EJECT
         LTORG
HEXTABLE DC    CL16'0123456789ABCDEF'
ABENDMSG DC    CL20'Abended With A U'
ZEROMSG  DC    CL20'Condition Code Zero'
DWORD    DC    D'0'
FWORD    DC    F'0'
        $MODEND
*
*  OACJCT is the same as IEFJCTB but with labels JCTID,
*  JCTJNAME, AND JCTJMR commented out because they are used
*  in the JES JCT.
*
         OACJCT
IEFASCTB DSECT ,
         IEFASCTB
         END
//*
//* Linkedit control cards for the JES exit(s)
//LKED.SYSIN DD  *
 ORDER JESEX008
 NAME JESEX008(R)
//*
