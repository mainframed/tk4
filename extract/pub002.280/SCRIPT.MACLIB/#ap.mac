***********************************************************************
*                                                                     *
*              .APPEND (.AP) --- CONTROL                              *
*                                                                     *
***********************************************************************
         SPACE
AP      $ENTER ,
         XC    APIMFLAG,APIMFLAG   CLEAR FILE FLAGS
        $ON    APIMFLAG,IO$AP      SET APPEND FLAG (CLOSE CURR. FILE)
        $CALL  API                 CHECK FILENAME
        $EXIT  RC=0                AND RETURN TO CALLER
         SPACE
API     $ENTER ,
         MVC   APIMNAME,BLANKS     BLANK OUT NEW FILENAME
         MVC   APIMMEMB,BLANKS     AND BLANK OUT MEMBER NAME
         L     X1,ARGSTART         REMEMBER STARTING POINT
        $CALL  GETNUM              GET A NUMERIC
         BC    BOMIT,APIE003       ERROR IF OMITTED
         BC    BDNO,API01          BRANCH IF NOT NUMERIC
         LTR   COUNT,COUNT         FILE NUMBER TOO SMALL .Q
         BNP   APIE014             ERROR IF YES
         LA    R0,PUMAX            MAX PUT WORK FILE NUMBER
         CR    COUNT,R0            FILE NUMBER TOO BIG .Q
         BH    APIE013             ERROR IF YES
         LR    R1,COUNT            ENTER FILE NUMBER
         SR    R0,R0               NO DATA PTR MEANS CLOSE
        $CALL  PUWORK              CLOSE FILE IF OPEN
         CVD   COUNT,SAVED0        FILE NUMBER TO DECIMAL
         OI    SAVED0+7,X'0F'      FIX THE SIGN
         MVC   APIMNAME,PUDDNAME   ENTER BASIC DDNAME
         UNPK  APIMNAME+6(2),SAVED0+6(2)  ENTER FILE NUMBER
         B     API03               AND CONTINUE
         SPACE
API01    DS    0H
         ST    X1,ARGSTART         RESCAN FROM HERE
        $CALL  GETARG              GET FILE NAME
         LM    X1,X2,OPENPARN      GET POINTERS TO PARENTHESES
         LTR   X1,X1               WAS THERE AN OPEN PARENTHESIS
         BNZ   API02               BRANCH IF YES
         LA    X1,1(TEMP,COUNT)    PRETEND THERE IS ONE
         LR    X2,X1               AT THE END OF THE FILE NAME
         SPACE
API02    DS    0H
         MVC   APIMNAME,BLANKS     BLANK OUT NEW FILE NAME
         MVC   APIMMEMB,BLANKS     SAME FOR MEMBER NAME
         SPACE
         LA    R1,7                MAXIMUM LENGTH(NAME), SS-TYPE
         LR    TEMP,X1             POINT TO OPEN PARENTHESIS
         SR    TEMP,COUNT          GET LENGTH(FILE NAME)
         BNP   APIE005             BRANCH IF NOTHING
         SPACE
         BCTR  TEMP,0              GET SS-TYPE LENGTH
         CLR   TEMP,R1             IF MORE THAN 7, TRUNCATE NAME
         BNH   *+6
         LR    TEMP,R1             TRUNCATE THE NAME
         SPACE
         EX    TEMP,APMVC          MOVE FILE NAME TO CONTROL BLOCK
         SPACE
         SR    X2,X1               COMPUTE LENGTH(MEMBER NAME)+1
         S     X2,F2               SS-TYPE LENGTH OF MEMBER NAME
         BM    API03               IF NOT THERE, IGNORE  THE FACT
         SPACE
         CLR   X2,R1               IF NAME HAS MORE THAN 8 CHARACTERS
         BNH   *+6                 THEN TRUNCATE IT
         LR    X2,R1               TO 8 CHARACTERS
         SPACE
         EX    X2,APMVCB           MOVE MEMBER NAME TO BLOCK
         SPACE
API03    DS    0H
        $CALL  APS                 GET ANY ARGS AND RANGE
         BC    BNEG,API04          BRANCH IF ARGUMENT ERRORS
         LA    R1,APIMBLOK         TO APPEND OR IMBED NEW FILE
        $CALL  RDFILE              CALL THE INPUT COORDINATOR
         SPACE
API04    DS    0H
        $EXIT  RC=0                AND RETURN TO CALLER
         SPACE
APIE003  DS    0H
         MVI   EFLAG003,ERRSET     OMITTED FILENAME
         B     API04               AND GO TO RETURN
APIE005  DS    0H
         MVI   EFLAG005,ERRSET     INVALID OPERAND
         B     API04               AND GO TO RETURN
APIE013  DS    0H
         MVI   EFLAG013,ERRSET     FILE NUMBER TOO LARGE
         B     API04               AND GO TO RETURN
APIE014  DS    0H
         MVI   EFLAG014,ERRSET     FILE NUMBER TOO SMALL
         B     API04               AND GO TO RETURN
         SPACE
APMVC    MVC   APIMNAME(*-*),0(COUNT) EXECUTED INSTRUCTION
APMVCB   MVC   APIMMEMB(*-*),1(X1) EXECUTED INSTRUCTION
         EJECT
***********************************************************************
*                                                                     *
*              SCAN ARGUMENTS AND RANGE                               *
*                                                                     *
***********************************************************************
         SPACE
*        ON EXIT  --  CC = BPOS   IF SUCCESSFUL
*                     CC = BNEG   IF UNSUCCESSFUL
         SPACE
APS     $ENTER ,
         MVC   APIMMIN,F1          DEFAULT MINIMUM RECORD NUMBER
         MVC   APIMMAX,F16MEG      DEFAULT MAXIMUM RECORD NUMBER
         MVC   APIMGOTO,BLANKS     CLEAR GOTO TARGET
         SPACE
         L     X2,ARGSTART         REMEMBER ARGUMENT START ADDR
         LA    X2,1(,X2)           PASS OVER BLANK DELIM
         SR    R0,R0               ZERO A WORK REGISTER
         ST    R0,APIMARGC         ZERO ARGUMENT COUNT
        $IFON  SWITCHS,GBLSWS,APS01     BRANCH IF REF NAMES ALL GLOBAL
         MVC   ASRWORK,ASRLCL      SET TO LOCAL DICTIONARY
         B     APS02               AND CONTINUE
APS01    DS    0H
         MVC   ASRWORK,ASRGBL      SET TO GLOBAL DICTIONARY
         OI    APIMARGC,X'80'      SET HIGH BIT MEANING UNUSED
         SPACE
APS02    DS    0H
         L     X3,ARGSTART         NEXT ARGUMENT START ADDR
        $ON    SWITCHS,FNOCASE     NO CASE CONVERSION FOR ARGS
        $CALL  GETQST              GET AN ARGUMENT
         BC    BOMIT,APS09         BRANCH IF NONE LEFT
         CLC   PERIND(1),0(COUNT)  RECORD NUMBER DELIMITER .Q
         BNE   APS03               BRANCH IF NOT
         CLI   1(COUNT),C' '       AND THAT ALONE .Q
         BNE   APS03               BRANCH IF NOT
         LA    COUNT,1(,COUNT)     BUMP OVER CONTROL WORD IND
         ST    COUNT,ARGSTART      SCAN FROM THERE NEXT TIME
         NI    APIMARGC,X'FF'-X'80'     RESET UNDEFINED FLAG
         B     APS09               QUIT ARGS
APS03    DS    0H
         L     R1,DEFRNLEN+TAB3DEF MAX LENGTH OF CHAR ARGUMENT
         A     R1,QSTRING          PLUS ANY QUOTE DELIMITERS
         CR    TEMP,R1             COMPARE WITH ACTUAL
         BL    APS04               BRANCH IF OK
         MVI   EFLAG008,ERRSET     SET THE ERROR
         B     APS27               AND TAKE ERROR EXIT
         SPACE
APS04    DS    0H
         OC    QSTRING,QSTRING     ANY QUOTES .Q
         BNZ   APS08               BRANCH IF YES
         LR    X1,COUNT            POINT TO FIRST CHAR
APS05    DS    0H
         LA    X1,1(,X1)           POINT TO NEXT CHAR
         C     X1,ARGSTART         PAST THE END .Q
         BNL   APS08               BRANCH IF YES
         CLI   0(X1),C'='          POSSIBLE KEYWORD .Q
         BNE   APS05               BRANCH IF NOT
         NI    APIMARGC,X'FF'-X'80'     RESET UNDEFINED FLAG
         L     R1,ERRSTART         REMEMBER ERROR POINTER
        $SAVE  ,                   SAVE ALL REGISTERS
         LR    R1,COUNT            POINT TO SCAN START
         LA    X1,1(,X1)           POINT PAST EQUAL SIGN
         MVC   ARGTSTAR(8),ARGSTART     SAVE CURRENT SCAN POINTERS
         CLI   0(X1),C' '          EQUAL FOLLOWED BY BLANK .Q
         BNE   APS06               BRANCH IF NOT
         LR    COUNT,X1            SET SCAN END POINTER
         B     APS07               AND GO FORWARD
APS06    DS    0H
         ST    X1,ARGSTART         SCAN OPERAND FROM HERE
        $ON    SWITCHS,FNOCASE     NO CASE CONVERSION PLEASE
        $CALL  GETQST              GET OPERAND
         LA    COUNT,1(COUNT,TEMP) END OF SCANNED ARGUMENT
APS07    DS    0H
         ST    COUNT,ARGSTOP       SAVE END RESULT
         ST    R1,ARGSTART         SAVE START ADDRESS
         SPACE
         L     R1,ASRWORK          RETAIN DICTIONARY POINTER
         MVC   ASRWORK,ASRGBL      KEYWORDS SHALL REMAIN GLOBAL
        $CALL  SR                  TRY TO EVALUATE ASSIGNMENT
         ST    R1,ASRWORK          RESTORE DICTIONARY POINTER
         SPACE
        $RESTOR ,                  RESTORE SAVED REGS
         MVC   ARGSTOP(4),ARGTSTAR+4    RESTORE SCAN END POINTER
         OC    ERRFLGS,ERRFLGS     ANY ERRORS ENCOUNTERED .Q
         BZ    APS02               NO, GET NEXT POSITIONAL
         ST    R1,ERRSTART         RESTORE ERROR POINTER
         MVC   ARGSTART(8),ARGTSTAR     RESTORE SCAN POINTERS
         XC    ERRFLGS,ERRFLGS     CLEAR ALL EVIDENCE OF PROBLEM
         MVI   EFLAG029,ERRWARN    THIS IS A WARNING
        $CALL  ERROUT              AND PRINT THE MESSAGE
         SPACE
APS08    DS    0H
         L     R1,APIMARGC         CURRENT ARGUMENT COUNT
         LA    R1,1(,R1)           CLEAR UNDEF FLAG, BUMP BY ONE
         ST    R1,APIMARGC         RESET WITH NEW VALUE
         CVD   R1,SAVED0           CONVERT ARG NUMBER TO DECIMAL
         MVC   ARGTSTAR(8),ARGSTART  SAVE CURRENT POINTERS
         L     R1,BUFF3AD          POINT TO TEMPORARY BUFFER
         LA    R1,4(,R1)           SKIP RDW AREA
         ST    R1,ARGSTART         START ADDRESS
         MVC   0(B2LG,R1),BLANKS   CLEAR WORKING BUFFER
         MVC   0(8,R1),UREDPAT     INSERT EDIT PATTERN
         ED    0(8,R1),SAVED0+4    UNPACK TO CHARACTER
         LA    R1,9(,R1)           ARGUMENT FIELD GOES HERE
         EX    TEMP,APMVCARG       MOVE ARGUMENT
         LA    R1,1(TEMP,R1)       END OF ARGUMENT
         ST    R1,ARGSTOP          ENDING ADDRESS
         L     X1,ERRSTART         REMEMBER ERROR ADDRESS
        $CALL  SR                  DUMMY UP CALL TO PROCESS RESULT
         MVC   ARGSTART(8),ARGTSTAR     RESET SCANNING ADDRESSES
         OC    ERRFLGS,ERRFLGS     ANY ERRORS FOUND
         BZ    APS02               NO, CONTINUE WITH NEXT ARG
         ST    X1,ERRSTART         RESET ERROR POINT
         CLI   EFLAG015,ERRCLR     WAS IT MISMATCHED DELIMITER .Q
         BE    APS27               NO, QUIT WITH ERROR
         MVI   EFLAG015,ERRWARN    WARNING MESSAGE HERE
        $CALL  ERROUT              DISPLAY RESULT
         B     APS02               AND CONTINUE WITH NEXT ARG
         SPACE
APS09    DS    0H
         L     R1,APIMARGC         GET COUNT OF ARGUMENTS
         LTR   R1,R1               ZERO ARGUMENTS PRESENT .Q
         BM    APS12               YES, DON'T SET '&0'
         L     R1,APIMARGC         GET COUNT OF ARGUMENTS WITHOUT TEXT
         CVD   R1,SAVED0           CONVERT NUMBER TO DECIMAL
         MVC   ARGTSTAR(8),ARGSTART  SAVE CURRENT PTRS
         L     R1,BUFF3AD          POINT TO WORKING BUFFER
         LA    R1,4(,R1)           SKIP RDW AREA
         ST    R1,ARGSTART         START ADDRESS
         MVC   0(B2LG,R1),BLANKS   CLEAR WORKING BUFFER
         MVI   0(R1),C'0'          PARAMETER NUMBER ZERO
         MVC   2(8,R1),UREDPAT     EDIT PATTERN
         ED    2(8,R1),SAVED0+4    EDIT IN NUMBER OF ARGUMENTS
         LA    R1,10(,R1)          THIS IS THE END
         ST    R1,ARGSTOP          SET ENDING ADDRESS
        $CALL  SR                  DUMMY UP CALL TO PROCESS RESULT
         SPACE
        $IFOFF SWITCHS,GBLSWS,APS11     BRANCH IF NOT GLOBAL REF NAMES
         L     X1,ARGCOUNT         COUNT OF ARGS LAST TIME
APS10    DS    0H
         C     X1,APIMARGC         ALL DONE CLEARING .Q
         BNH   APS11               BRANCH OUT IF YES
         L     R1,BUFF3AD          POINT TO WORKING AREA
         LA    R1,4(,R1)           SKIP RDW AREA
         ST    R1,ARGSTART         STARTING ADDRESS
         MVC   0(B2LG,R1),BLANKS   CLEAR WORKING AREA
         CVD   X1,SAVED0           CONVERT ARG NUMBER TO DECIMAL
         MVC   0(8,R1),UREDPAT     INSERT EDIT PATTERN
         ED    0(8,R1),SAVED0+4    UNPACK NUMBER TO CHARACTER
         LA    R1,9(,R1)           NULL ARGUMENT GOES HERE
         MVI   0(R1),C''''         INITIAL QUOTE
         MVI   1(R1),C''''         AND ENDING QUOTE FOR A NULL
         LA    R1,2(,R1)           END OF STRING
         ST    R1,ARGSTOP          ENDING ADDRESS
        $CALL  SR                  DUMMY UP CALL TO PROCESS RESULT
         S     X1,F1               LESS ONE FOR ARG NUMBER
         B     APS10               DO AS REQUIRED
         SPACE
APS11    DS    0H
         L     R1,APIMARGC         CURRENT ARGUMENT COUNT
         ST    R1,ARGCOUNT         SAVE COUNT FOR NEXT TIME
         MVC   ARGSTART(8),ARGTSTAR  RESTORE CURRENT POINTERS
         SPACE
APS12    DS    0H
        $CALL  GETNUM              GET START RECORD NUMBER
         BC    BOMIT,APS20         BRANCH IF NONE ARE LEFT
         BC    15-BDNO,APS15       BRANCH IF VALID NUMERIC
         ST    COUNT,ARGSTART      RESCAN FOR IDENTIFIER
        $CALL  GETARG              GET ARGUMENT STRING
         LTR   TEMP,TEMP           LENGTH-1 ZERO .Q
         BNZ   APS13               BRANCH IF NOT
         CLI   0(COUNT),C'*'       '*' MEANS FROM THE START .Q
         BE    APS17               BRANCH IF YES
APS13    DS    0H
         LA    R0,L'LBNAME-1       MAX-1 LENGTH ALLOWED
         CR    TEMP,R0             TOO LONG .Q
         BNH   APS14               BRANCH IF NOT
         MVI   EFLAG005,ERRSET     ELSE INVALID OPERAND
         B     APS27               AND TAKE ERROR EXIT
APS14    DS    0H
         EX    TEMP,APMVCGO        SET IMPLIED GOTO ARGUMENT
         MVC   COMAGO,COMAREA      REMEMBER SOURCE OF IMPLIED GOTO
         B     APS20               AND TAKE SUCCESSFUL RETURN
         SPACE
APS15    DS    0H
         LTR   COUNT,COUNT         ZERO OR NEGATIVE .Q
         BP    APS16               BRANCH IF NOT
         MVI   EFLAG014,ERRSET     SET THE ERROR
         B     APS27               AND TAKE THE ERROR EXIT
APS16    DS    0H
         ST    COUNT,APIMMIN       AND STORE IN PARM BLOCK
         SPACE
APS17    DS    0H
        $CALL  GETARG              LOCATE SECOND ARGUMENT
         BC    BOMIT,APS20         IF NOT SUPPLIED, READ WHOLE FILE
         SPACE
         CLI   0(COUNT),C'*'       DID HE SAY '*' MEANING ALL
         BE    APS20               IF SO, DEFAULT OK
         ST    COUNT,ARGSTART      ELSE PICK UP NUMBER
        $CALL  GETNUM
         BC    15-BDNO-BNEG,APS18  BRANCH IF NOT INVALID OR NEGATIVE
         MVI   EFLAG005,ERRSET     SET THE ERROR
         B     APS27               AND TAKE THE ERROR EXIT
APS18    DS    0H
         C     COUNT,APIMMIN       MAKE SURE PARAMETERS MAKE SENSE
         BNL   APS19               BRANCH IF OK
         MVI   EFLAG005,ERRSET     SET THE ERROR
         B     APS27               AND TAKE THE ERROR EXIT
APS19    DS    0H
         ST    COUNT,APIMMAX       STORE IN PARM BLOCK
         SPACE
APS20    DS    0H
         MVC   ARGTSTAR(8),ARGSTART     SAVE CURRENT ARG POINTERS
         L     R1,BUFF3AD          POINT TO WORK AREA
         LA    R1,4(,R1)           SKIP RDW AREA
         ST    R1,ARGSTART         STARTING ADDR
         MVC   0(B2LG,R1),BLANKS   CLEAR WORKING AREA
         MVI   0(R1),C'*'          NAME OF TOTAL PARM VARIABLE
         MVI   1(R1),C'='          NORMAL ASSIGNMENT CHAR
         LA    R1,2(,R1)           NEXT STOP
         LR    COUNT,X3            END+1 OF ARGS
         SR    COUNT,X2            LENGTH OF TOTAL ARG
         BNP   APS21               BRANCH IF NOTHING
         BCTR  COUNT,0             LENGTH-1
         MVI   0(R1),C'A'          DUMMY CHARACTER
         S     COUNT,F1            LENGTH-1 OF REMAINDER
         BM    APS22               BRANCH IF BUT ONE LONG
         EX    COUNT,APMVCAAA      EXTEND ARGUMENT
         LA    R1,2(COUNT,R1)      END POINTER
         B     APS22               GO TO ENTER
APS21    DS    0H
         MVI   0(R1),C''''         LEADING QUOTE
         MVI   1(R1),C''''         ENDING QUOTE FOR NULL
         LA    R1,2(,R1)           NEXT STOP
APS22    DS    0H
         ST    R1,ARGSTOP          END OF STRING
        $CALL  SR                  ENTER DUMMY STRING
         MVC   ARGSTART(8),ARGTSTAR     RESET SCAN PTRS
         OC    ERRFLGS,ERRFLGS     ANY ERRORS .Q
         BZ    APS23               BRANCH IF NONE
         ST    X2,ERRSTART         SET ERROR POINT
         B     APS27               AND QUIT WITH ERROR
         SPACE
APS23    DS    0H
         L     R1,ASRWORK          CURRENT DICTIONARY
        $CALL  SYMUSL              LOCATE LAST ENTRY
         BC    BPOS,APS24          BRANCH IF SUCCESSFUL
         MVI   EFLAG008,ERRSET     SET ERROR (SHOULD NOT HAPPEN)
         B     APS27               AND TAKE ERROR EXIT
APS24    DS    0H
         USING RND,COUNT           TELL THE ASSEMBLER
         SR    R1,R1               CLEAR LENGTH REG
         IC    R1,RNCLEN           LENGTH WE CREATED
         S     R1,F1               LENGTH-1
         BM    APS26               IF NULL, WE'RE DONE
         LA    TEMP,RNCVAL         SHORT STRING TARGET
         CLI   RNCLEN,L'RNCVAL     IS IT SHORT STRING .Q
         BNH   APS25               BRANCH IF YES
         L     TEMP,RNCPTR         POINT TO LONG STRING
APS25    DS    0H
         EX    R1,APMVCBBB         ENTER ACTUAL ARGUMENT STRING
         DROP  COUNT
         SPACE
APS26    DS    0H
        $CC    POS                 SET SUCCESSFUL RETURN
         B     APS28               AND GO TO RETURN
         SPACE
APS27    DS    0H
         L     R1,ASRLCL           POINT TO LOCAL DICTIONARY
        $CALL  SYMCLR              DELETE ANY ARGUMENT ENTRIES
        $CC    NEG                 SET UNSUCCESSFUL RETURN
         SPACE
APS28    DS    0H
         MVC   ASRWORK,F0          RESET WORK DICTIONARY PTR
        $EXIT  RC=0                RETURN TO CALLER
         SPACE
APMVCGO  MVC   APIMGOTO(*-*),0(COUNT)   INITIAL GOTO OPERAND
APMVCARG MVC   0(*-*,R1),0(COUNT)  EXECUTED MOVE ARGUMENT
APMVCAAA MVC   1(*-*,R1),0(R1)     EXTEND DUMMY ARGUMENT
APMVCBBB MVC   0(*-*,TEMP),0(X2)   ENTER ACTUAL ARGUMENT
