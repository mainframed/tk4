*                             ********
* *            SOURCE BOOK *** DEUH16 *** SUFFIX ANALYSIS          1-1
*                             ********
         SPACE 3
SUFFIX  $ENTER ,
*        WAS   DEUHYB01
         SPACE
***********************************************************************
*                                                                     *
*    THE SUFFIX ANALYSIS MODULE CONSISTS OF THREE ROUTINES, THE SUFFIX*
*  INIALIZATION ROUTINE (SFXIZ), THE SUFFIX SEARCH ROUTINE (SFXSRCH), *
*  AND THE SUFFIX PROCESSOR ROUTINE (SFXPROC).                        *
*                                                                     *
*    THE FUNCTION OF SFXIZ IS TO GET THE STARTING ADDRESS FOR SFXSRCH.*
*  IT DOES THIS BY USING THE BINARY VALUE OF THE LAST LETTER OF THE   *
*  WORD AS AN INDEX POINTER TO A TABLE OF SUFFIX ENTRY LETTER-GROUP   *
*  ADDRESS VALUES.                                                    *
*                                                                     *
*    SFXSRCH IS THE ROUTINE THAT SEARCHES THROUGH THE TABLE OF SUFFIX *
*  ENTRIES. IT GETS THE LENGTH OF THE SUFFIX FROM THE TABLE ENTRY AND *
*  USES THIS VALUE AS THE LENGTH FOR THE COMPARE INSTRUCTION AND TO   *
*  GET THE ADDRESS OF THE FIRST LETTER OF A POSSIBLE SUFFIX IN THE    *
*  WORD. IF IT GETS A HIT ON THE COMPARE IT BRANCHES TO SFXPROC, IF   *
*  NOT, IT STEPS TO THE NEXT TABLE ENTRY ANDS LOOPS THROUGH SFXSRCH   *
*  UNTIL IT GETS A HIT OR REACHES THE END OF THE TABLE FOR THAT       *
*  LETTER-GROUP.                                                      *
*                                                                     *
*    SFXPROC, BY EXAMINING THE INDICATOR BYTES OF THE SUFFIX TABLE EN-*
*  TRY, DETERMINES  1- THE PLACEMENT OF ANY HYPHENS AND SETS THEM IN  *
*  THE STATUS AREA, 2- WHAT, IF ANY, SEGMENT OF THE SUFFIX IS TO BE   *
*  STRIPPED FROM THE WORD, 3- WHETHER OR NOT ANOTHER SUFFIX SEARCH IS *
*  TO BE INITIATED FOR THE STRIPPED VERSION OF THE WORD.              *
*                                                                     *
*    A BRIEF DESCRIPTION OF THE STRUCTURE OF THE SUFFIX TABLE ENTRIES *
*  CAN BE FOUND AT THE BEGINNING OF THE SUFFIX TABLE SOURCE BOOK.     *
*                                                                     *
***********************************************************************
RGLAST   EQU   2         FOR LAST CHAR OF WORD
RGWDSZ   EQU   3         FOR SIZE OF WORD LESS 1
RGHYF    EQU   4         CHARACTER POINTER IN HYFCOM FOR THE COMPARE
RGSTAT   EQU   5         POINTER IN STATUS AREA
RGNTRY   EQU   6         POINTER TO TABLE ENTRY
RGLEN    EQU   7         FOR LENGTH OF THE SUFFIX (COMPARE LENGTH)
RGWK3    EQU   7         MISC. WORK REGISTER NO. 3
RGWK2    EQU   8         MISC. WORK REGISTER NO. 2
RGWK1    EQU   9         MISC. WORK REGISTER NO. 1
*
E        EQU   X'00'     MASK FOR TEST INSTRUCTION
I        EQU   X'06'     MASK FOR TEST INSTRUCTION
S        EQU   X'07'     MASK FOR TEST INSTRUCTION
Y        EQU   X'10'     MASK FOR TEST INSTRUCTION
SFXYES   EQU   X'B0'     SUFFIX HYPHEN INDICATION
*
***SUFFIX INITIALIZATION ROUTINE***************************************
         LH    RGWDSZ,NUMCHR       GET SIZE OF WORD.
         STH   RGWDSZ,PREVROOT     SAVE FOR ROOT WORD SIZE.
SFXIZ    LA    RGLAST,0            CLEAR THE REGISTER
         IC    RGLAST,HYFCOM(RGWDSZ) GET LAST CHAR OF WORD
         STC   RGLAST,LSTCHR       AND SAVE IT.
         LR    RGWK1,RGLAST        PUT LAST CHAR IN A WORK REGISTER AND
         SLL   RGWK1,1             DOUBLE THE VALUE.
         MVI   GATE+1,X'00'        INITIALIZE BRANCH TO HALGO.
         L     RGNTRY,ASFXTBLS     GET ADDR. OF SUFFIX TABLE.
         L     RGWK2,ASFXTAB       GET ADDR. OF LETTER-GROUP DIS-
*                                  PLACEMENT TABLE.
         STC   RGWK1,*+7           PUT DISPLACEMENT IN NEXT INSTRUCTION
         TM    0(RGWK2),X'80'      IF NO SUFFIX TABLE FOR THIS LETTER,
         BO    RDHLGO                GO TO HALGO.
         AH    RGNTRY,0(RGWK1,RGWK2) TO GET ACTUAL ADDR. OF FIRST
*                                    SUFFIX TABLE ENTRY FOR A
*                                    PARTICULAR LETTER-GROUP.
***SUFFIX SEARCH ROUTINE***********************************************
SFXSRCH  LA    RGLEN,0             CLEAR REGISTER
         IC    RGLEN,0(RGNTRY)     GET FIRST BYTE OF TABLE ENTRY.
         SRL   RGLEN,4             FOR ZONE PORTION OF BYTE.
         LR    RGHYF,RGWDSZ        TO DEVELOP AN INDEX FACTOR,CALCULATE
         SR    RGHYF,RGLEN         SIZE OF WORD MINUS SUFFIX LENGTH
         BNH   TSTLSX              BRANCH IF ENTRY IS LARGER THAN WORD.
         LA    RGHYF,HYFCOM-1(RGHYF)    ADDRESS OF 1ST CHAR OF SUFFIX
*                                       IN THE WORD.
         EX    RGLEN,CMPSFX        COMPARE SUFFIX ENTRY TO END OF WORD.
         BE    SFXPROC             IT'S A HIT - GO PROCESS THIS ENTRY.
         B     TSTLSX              NO HIT,GO SEE IF THIS IS LAST ENTRY.
         SPACE 2
CMPSFX   CLC   1(0,RGNTRY),0(RGHYF)     THIS IS THE ACTUAL COMPARE.
         SPACE 3
TSTLSX   TM    0(RGNTRY),X'0F'     IS THIS THE LAST SUFFIX ENTRY
         BZ    TSTERM              BRANCH IF NO MORE
         MVN   *+9(1),0(RGNTRY)    PLUG ENTRY SIZE INTO NEXT INSTRUCTN
         LA    RGNTRY,0(RGNTRY)    TO GET TO NEXT ENTRY.
         B     SFXSRCH             LOOP THRU SEARCH ROUTINE AGAIN.
         SPACE 6
***SUFFIX PROCESSOR ROUTINE********************************************
SFXPROC  LA    RGNTRY,2(RGLEN,RGNTRY) GET ADDR OF 1ST INDICATOR BYTE.
         MVN   *+9(1),0(RGNTRY)    PLUG INDICATOR VALUE INTO NEXT INSTR
         LA    RGWK1,0             TO GET NO. OF LETTERS IN SEGMENT
         LR    RGWK2,RGWDSZ        LOAD THE WORD SIZE AND
         SR    RGWK2,RGWK1         SUBTRACT SIZE OF SEGMENT FOR POINT
         LR    RGWK1,RGWK2         IN STATUS AREA.
         SH    RGWK2,FIRSTVOW      IS POINT TO THE RIGHT OF FIRST VOWEL
         BM    SFXIT               GET OUT IF NOT
         SPACE
         TM    0(RGNTRY),X'20'     SHOULD SEARCH BE CONTINUED FOR
*                                   STRIPPED WORD
         BZ    *+8                 BRANCH AROUND NEXT INSTRUCTION IF NO
         MVI   GATE+1,X'F0'        TO PREVENT BRANCH TO HALGO
TSTHYF   TM    0(RGNTRY),X'10'     IS HYPHEN INDICATOR ON
         LA    RGSTAT,ASTATUS(RGWK1)  GET ADDR OF POINT IN STATUS AREA
         BO    *+8                 BRANCH AROUND NEXT 2 INSTRCTNS IF ON
         SPACE
         OI    0(RGSTAT),SFXYES    AND PUT A HYPHEN THERE.
         SPACE
         TM    0(RGNTRY),X'40'     IS STRIP INDICATOR ON
         BO    *+14                BRANCH AROUND,IF NO
         SPACE
         STH   RGWDSZ,PREVROOT     SAVE PRESENT WORD SIZE
         LR    RGWDSZ,RGWK1        GET NEW WORD SIZE AND
         STH   RGWK1,NUMCHR        SAVE IT.
         BAL   REGRET,SFXSETNO     SET STRIPPED SEGMENT TO NO
         TM    0(RGNTRY),X'80'     ANY MORE INDICATOR BYTES
         BO    SFXIT               BRANCH IF NO MORE
         LA    RGNTRY,1(RGNTRY)    STEP TO NEXT INDICATOR BYTE AND
         B     SFXPROC+4           LOOP THRU AGAIN.
         SPACE 2
TSTERM   CLI   LSTCHR,I            IS LAST LETTER AN I
         BNE   TSTE                BRANCH IF NOT I
         SPACE
         MVI   LSTCHR,Y            CHANGE I TO Y
         IC    RGLAST,LSTCHR
         STC   RGLAST,HYFCOM(RGWDSZ)
         B     SFXIZ               GO BACK TO SEARCH WITH NEW WORD
         SPACE 3
TSTE     CLI   LSTCHR,E            IS LAST LETTER AN E
         BE    STRP1               BRANCH IF YES
         SPACE
         CLI   LSTCHR,S            IS LAST LETTER AN S
         BNE   RDHLGO              BRANCH IF NO
         SPACE
STRP1    LA    RGWK1,1
         MVI   GATE+1,X'F0'        TO CONTINUE SEARCH
         SR    RGWDSZ,RGWK1        REDUCE WORD SIZE BY ONE
         STH   RGWDSZ,NUMCHR       SAVE NEW SIZE
         LA    RGSTAT,ASTATUS(RGWDSZ) GET ADDR OF POINT IN STATUS AREA
         TM    0(RGSTAT),X'B0'     TEST FOR SUFFIX YES
         BO    SFXIT               BRANCH IF IT IS
         MVZ   0(1,RGSTAT),BINZERO IF NOT, MAKE IT A NO POINT
         B     SFXIT
         SPACE 3
SFXSETNO LH    RGWK2,PREVROOT      FOR LIMIT OF SCAN
         SR    RGWK2,RGWDSZ        CALCULATE NO. OF POSITIONS
         LA    RGWK2,1(RGWK2)
NXTPT    LA    RGSTAT,1(RGSTAT)    MOVE RIGHT TO NEXT POINT
         TM    0(RGSTAT),X'B0'     TEST IT
         BO    *+10                BRANCH AROUND IF SUFFIX YES POINT
         MVZ   0(1,RGSTAT),BINZERO IF POSSIBLE, MAKE IT NO
         BCT   RGWK2,NXTPT         TEST FOR END OF SCAN
         BR    REGRET              SCAN COMPLETE - GET OUT
         SPACE 3
SFXIT    LR    RGWK3,RGWDSZ        SET UP FOR NEGREV ROUTINE.
         BAL   REGRET,NEGREV       GO THERE TO FIND NEW LAST VOWEL
         BC    BNEG,FOUNDRTA       BRANCH IF WORD REJECTED
         STH   RGWK3,LASTVOW       AND SAVE IT.
         LA    REG1,1
         CR    REG1,RGWDSZ         DO NOT GO TO EXCEPT,
         BNL   CLCF2L               IF LESS THAN 2 LETTERS REMAIN
        $CALL  EXCEPT              LOOKUP WORD IN EXCEPTION DICT
         BC    BPOS,FOUNDRT        BRANCH IF FOUND
         BAL   REGRET,SCNLFT       TO TEST FOR POSS LAST-TO-FIT EXIT.
         BC    BPOS,FOUNDRT        BRANCH IF BREAK FOUND
CLCF2L   CLC   FIRSTVOW,LASTVOW    IF ONLY ONE VOWEL,
         BE    FOUNDRT             GET OUT.
*        L     REG1,=V(DEUTSD01)   TO GO TO HYPTEST,
*        LTR   REG1,REG1           IF RUNNING IN TEST MODE.
*        BZ    *+6                 IF NOT IN TEST MODE, BYPASS IT.
*        BALR  REGRET,REG1
         LA    RGLEN,2
         CR    RGLEN,RGWDSZ        IF NEW WORD LESS THAN 2 LETTERS
         BH    FOUNDRT             GO TO FOUND
GATE     BC    0,SFXIZ             IF BRANCH ACTIVE, CONTINUE SEARCH
*                                  IF NOT, GO TO HALGO
         SPACE 3
RDHLGO   DS    0H
        $CALL  HALGO               GO DO PROBABILITY ROUTINE
FOUNDRT  DS    0H
        $CC    POS                 INDICATE FOUND
         B     FOUNDFIN            GO TO FINAL RETURN
FOUNDRTA DS    0H
        $CC    NEG                 INDICATE REJECT
FOUNDFIN DS    0H
        $EXIT  RC=0                AND RETURN TO CALLER
