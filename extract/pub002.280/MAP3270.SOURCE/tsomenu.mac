         TITLE 'TSO Application Menu  VER=1.1'
*********************************************************************
*
*  TSOMENU - MAP3270 program to display a panel for use with
*            C3270 to create a TSO application selection menu.
*
*********************************************************************
TSOMENU  ESTART TYPE=START,DESC='TSO Application Menu',VER='1.0.0',    *
               REGS=YES,BASE=R12
*
*  start MAP3270 system
*
         MVI   IOCB,X'00'
         MVC   IOCB+1(IOCBLN-1),IOCB
         MVC   IOCBFUNC,=C'STRT'
         TCALL T3270ADR,IOCB,TPARM
*
*  prepare the panel
*
         L     R1,CVTPTR               address CVT
         L     R1,CVTSMCA-CVT(,R1)     address SMCA
         LA    R1,SMCASID-SMCABASE(,R1) address SMCASID
         MVC   SYSIDD(4),0(R1)         get SID
         MVC   TERMID(8),=CL8'unknown ' don't know terminal id yet
         GTTERM PRMSZE=PRMSZE,ALTSZE=ALTSZE,TERMID=TERMID
         MVC   TERMIDD(8),TERMID       get termid
         L     R1,PSAAOLD-PSA          address ASCB
         L     R1,ASCBASXB-ASCB(,R1)   address ASXB
         L     R1,ASXBFTCB-ASXB(,R1)   address region control TCB
         L     R1,TCBTCB-TCB(,R1)      address dump TCB
         L     R1,TCBTCB-TCB(,R1)      address initiator TCB
         L     R1,TCBJSCB-TCB(,R1)     address JSCB
         L     R1,JSCBJCT-IEZJSCB(,R1) address JCT prefix
         LA    R1,16(,R1)              address JCT
         LA    R2,JCTJNAME-INJMJCT(,R1) address jobname (=userid)
         MVC   USERIDD(8),0(R2)        get userid
         LA    R2,JCTJTPTN-INJMJCT(,R1) address terminal name
         CLC   TERMIDD(8),=CL8'unknown ' still unknown?
         BNE   *+10                    no, we're done
         MVC   TERMIDD(8),0(R2)        yes, hopefully the JCT has it
*
*  Code to get date and time adapted from Jim Morrison's U370DATE
*
         MVI   SADWD,X'00'
         MVC   SADWD+1(SAL-1),SADWD
         TIME  DEC              get system date and time packed decimal
*----------------------------------------------------------------------
*  Convert HHMMSSth, YYYY to EBCDIC
*----------------------------------------------------------------------
         STM   R0,R1,SAARG             store packed decimal date & time
         AP    SAARG+4(4),P19          Y2K: add S/370 epoch century
         UNPK  SACHR,SAARG             packed to EBCDIC
         OI    SACHRX,X'F0'            repair sign
*----------------------------------------------------------------------
*  Convert year to binary
*----------------------------------------------------------------------
         L     R3,SAARG+4              Y2K: YYYYDDDF
         SRL   R3,16-4                 000YYYY.
         ST    R3,SAPAKY
         OI    SAPAKY+3,X'0F'          packed year
         CVB   R3,SADWD
         ST    R3,SABINY               binary year
*----------------------------------------------------------------------
*  Select month table
*----------------------------------------------------------------------
         LA    R8,NOTLEAP              not a leap year
         TM    SABINY+3,X'03'          divisible by 4?
         BC    5,CALCMON               no, can't be leap year
         SLR   R6,R6
         LA    R10,400                 divisible by 400 is leap year
         LR    R7,R3
         DR    R6,R10
         LTR   R6,R6
         BZ    SETLEAP                 evenly divisible
         XR    R6,R6
         LA    R10,100                 divisible by 100 not leap year
         LR    R7,R3
         DR    R6,R10
         LTR   R6,R6
         BZ    CALCMON                 evenly divisible
SETLEAP  LA    R8,LEAP                 leap year
*----------------------------------------------------------------------
*  Find month & month day, given Julian days DDD in year
*----------------------------------------------------------------------
CALCMON  DS    0H                      R8 @ month table
         LH    R0,SAPAKDDD             DDDF
         STH   R0,SAPAKD
         CVB   R5,SADWD2
         ST    R5,SABIND               binary ddd
*
         LA    R1,1
         SLR   R14,R14                 month minus one
         SLR   R15,R15
SCANMON  IC    R15,0(R14,R8)           # days in month
         CR    R5,R15                  too many?
         BNH   SETMON                  no, br; now know month
         SR    R5,R15                  reduce ddd
         AR    R14,R1                  bump month
         B     SCANMON
SETMON   DS    0H
         LA    R1,100                  decimal shift factor
         SLR   R6,R6
         LA    R7,1(,R14)              month
         MR    R6,R1
         AR    R7,R5                   binary month, day of month
         CVD   R7,SADWD3               decimal: 0000 0000 000M MDDF
         OI    SAPAKMDX,X'0F'          assure reasonable sign
         UNPK  SACHRMD,SAPAKMD         MMDD to EBCDIC
*----------------------------------------------------------------------
*  Move data into panel fields
*----------------------------------------------------------------------
         MVC   DATED(2),SARESULT+14    DD
         MVI   DATED+2,C'.'
         MVC   DATED+3(2),SARESULT+12  MM
         MVI   DATED+5,C'.'
         MVC   DATED+6(2),SARESULT+10  YY
         MVC   TIMED(2),SARESULT+0     HH
         MVI   TIMED+2,C':'
         MVC   TIMED+3(2),SARESULT+2   MM
         MVI   TIMED+5,C':'
         MVC   TIMED+6(2),SARESULT+4   SS
*
*  recompute buffer addresses if screen has more than 80 columns
*
         GTSIZE ,                      get screen dimensions
         C     R1,=F'80'               line length greater 80?
         BNH   DISPLAY                 no, display panel unchanged
         LR    R10,R1                  remember line length
         L     R1,TADDR                address of panel module
         L     R11,4(,R1)              begin of input control blocks
         L     R1,8(,R1)               begin of 3270 data stream
         B     STRTSRCH                search for 3270 buffer addresses
NEXTORDR LR    R7,R1                   remember start of search
         EX    R9,FINDORDR             find order to change
         BZ    NOORDER                 none found
         BP    STRTSRCH                last byte of segment is order
         LA    R1,1(,R1)               increment to 3270 buffer address
         BAL   R14,RECOMP              recompute buffer address
         SR    R7,R1                   negativ offset to address
         AR    R9,R7                   new residual count
         B     NEXTORDR                find next order to change
NOORDER  AR    R1,R9                   increment to end of segment
         LA    R1,1(,R1)               increment to next segment
         CR    R11,R1                  end of data stream reached?
         BE    INPUTADS                yes, change input field addrs
STRTSRCH LR    R9,R11                  search ends at input blocks
         SR    R9,R1                   length of search
         C     R9,=F'256'              more than 256 bytes to go?
         BNH   *+8                     no, this is the last segment
         LA    R9,256                  yes, let's do the next 256 bytes
         BCTR  R9,0                    decrement for execute
         B     NEXTORDR                check 3270 data stream segment
FINDORDR TRT   0(1,R1),SBAEUARA        find order containing address
INPUTADS CLC   0(4,R1),=A(0)           end of input control blocks?
         BE    DISPLAY                 yes, display panel
         BAL   R14,RECOMP              no, recompute buffer address
         LA    R1,8(,R1)               address next input control block
         B     INPUTADS                check next address
*
*  display the panel and exit
*
DISPLAY  MVC   IOCBFUNC,=C'PUT '
         TCALL T3270ADR,IOCB,TPARM
         MVC   IOCBFUNC,=C'END '
         TCALL T3270ADR,IOCB,TPARM
         ERETURN RC=0
*
         TITLE ' Recompute 3270 Buffer Address'
*
*        On entry R1 points to a data stream buffer address which
*        is assumed to be calculated for an 80 column screen and
*        R10 contains the screen width to which is address is to
*        be recomputed.
*
*        On exit the address points to the same row and column then
*        on entry, but recalculated to the new screen width.
*
RECOMP   DS    0H                 recompute 3270 buffer address
         XR    R2,R2              clear R2
         ICM   R2,X'3',0(R1)      get 3270 buffer address into R2
         SRDL  R2,6               shift low-order 6 bits into R3
         SRL   R2,2               drop 2 bits
         SRDL  R2,6               shift high-order 6 bits into R3
         SRL   R3,20              move all 12 bits down to pos. 20-31
         XR    R2,R2              clear R2
         D     R2,=F'80'          divide binary address by 80
         LR    R4,R2              remember column number
         XR    R2,R2              clear R2, line number is in R3
         MR    R2,R10             multiply line number with new width
         AR    R3,R4              add column number to get new address
         CH    R3,=H'4095'        location greater than 4k (12 bits)?
         BH    NEWADDR            yes, no conversion to be done
         STC   R3,DWORD+1         no, do original 3270 addressing
         NI    DWORD+1,B'00111111' get low-order six-bit number
         SRL   R3,6               drop low-order six bits from R3
         STC   R3,DWORD           get high-order six-bit number
         TR    DWORD(2),TABLE     convert to 3270 data stream chars
         ICM   R3,X'3',DWORD      save in bottom two bytes of R3
NEWADDR  STCM  R3,X'3',0(R1)      replace 3270 buffer address
         BR    R14                return to mainline
*
TABLE    DC    X'40C1C2C3C4C5C6C7C8C94A4B4C4D4E4F'   ABCDEFGHIÖ.<(+×
         DC    X'50D1D2D3D4D5D6D7D8D95A5B5C5D5E5F'  &JKLMNOPQR!$*);^
         DC    X'6061E2E3E4E5E6E7E8E96A6B6C6D6E6F'  -/STUVWXYZ|,%_>?
         DC    X'F0F1F2F3F4F5F6F7F8F97A7B7C7D7E7F'  0123456789:#@'="
DWORD    DS    D
SBAEUARA DC    256X'00'
         ORG   SBAEUARA+X'11'
         DC    X'11'                   set buffer address
         DC    X'12'                   erase unprotected to address
         ORG   SBAEUARA+X'3C'
         DC    X'3C'                   repeat to address
         ORG   SBAEUARA+256
*
PRMSZE   DS    H
ALTSZE   DS    H
TERMID   DS    CL16
*
T3270ADR DC    V(T3270IOS)
IOCB     DS    0F
IOCBFUNC DS    CL4                     FUNCTION CODE (STRT/IO/END)
IOCBRC   DS    AL2                     RETURN CODE
IOCBLEN  DS    AL2                     IO BUFFER LENGTH
IOCBADR  DS    A                       IO BUFFER ADDRESS
         DS    XL20                    RESERVED
IOCBLN   EQU   *-IOCB
*
         COPY  TSOMNP
         COPY  AIDCODES
*
*                  J  F  M  A  M  J  J  A  S  O  N  D
NOTLEAP  DC    AL1(31,28,31,30,31,30,31,31,30,31,30,31)
LEAP     DC    AL1(31,29,31,30,31,30,31,31,30,31,30,31)
P19      DC    P'1900000'              packed EPOCH
SADWD    DS    D                       year
SABINY   EQU   SADWD+0,4               binary
SAPAKY   EQU   SADWD+4,4               packed 000Y,YYYF
*
SADWD2   DS    D                       julian day of year
SABIND   EQU   SADWD2+0,4              binary
SAPAKD   EQU   SADWD2+6,2              packed DDDF
*
SADWD3   DS    D                       gregorian month, day of month
SABINMD  EQU   SADWD3+0,4              binary 0000MMDD
SAPAKMD  EQU   SADWD3+5,3              packed   0MMDDF
SAPAKMDX EQU   *-1,1                   sign repair
*
SAARG    DS    D                       HHMMSSth,YYYYDDDF
SAPAKDDD EQU   SAARG+6,2              +0 1 2 3  4 5 6 7
*
SARESULT DS    0CL16                   nearly final result
SACHR    DS    0CL15
SACHRTM  DS    C'HHMMSSth'
SACHRY   DS    C'19YY'
SACHRD   DS    C'DDD'
SACHRX   EQU   *-1,1                   sign repair
         DS    C' '
SAL      EQU   *-SADWD
SACHRMD  EQU   SACHRD,4                C'MMDD'
         LTORG
         CVT   DSECT=YES               map the CVT
         IEESMCA ,                     map the SMCA
         IHAPSA ,                      map the PSA
         IHAASCB ,                     map the ASCB
         IHAASXB ,                     map the ASXB
         IKJTCB ,                      map the TCB
         IEFAJCTB ,                    map the JCT
         IEZJSCB ,                     map the JSCB
         END   TSOMENU
