         COPY  $COPYWRT
PMSCRIPT TITLE '   INITIALIZE AND SCAN PARM FOR SCRIPT PROCESSOR'
        $SCRCVT DSECT=YES,DOC=NOGEN
         SPACE 2
        $NSCDAT DSECT=YES,DOC=NOGEN
         SPACE 2
         COPY  #DSECTS
         EJECT
***********************************************************************
*                                                                     *
*              SCRIPTPM CSECT SUBROUTINE DEFINITION                   *
*                                                                     *
***********************************************************************
         SPACE
         PRINT NOGEN               OVERALL PRINT CONTROL
SCRIPTPM $VERSION ,                IDENTIFY AND INITIALIZE
         EJECT
PARMSCAN $ENTER ,
         L     R1,PASSNO           GET CURRENT PASS NUMBER
         LTR   R1,R1               FIRST TIME .Q
         LA    R1,1(,R1)           BUMP PASS NUMBER BY ONE
         ST    R1,PASSNO           UPDATE CURRENT PASS NUMBER
         BNZ   STADONE             NOT FIRST TIME, SKIP SCAN
         SPACE
         L     R1,CVTPTR           PICK UP CVT POINTER
         S     R1,F8               POINT TO CVT PREFIX
         CLI   CVTRELNO(R1),C'C'   IS THIS CMS .Q
         BNE   PARMSTSO            NO, GO TO CHECK TSO
        $ON    PARMSWCH,CMSWS      TURN ON CMS SWITCH
         B     PARMSREF            AND CONTINUE
         SPACE
PARMSTSO DS    0H
         L     R1,CVTPTR           PICK UP CVT POINTER
         TM    CVTDCB(R1),X'01'    IS THIS MVS .Q
         L     R1,CVTTCBP(,R1)     ADDR NEXT/CURRENT TCB
         BNO   NOTMVS              NO, THEN IT MUST BE OS/SVS
         L     R1,12(,R1)          R1 -> ASCB
         L     R1,60(,R1)          R1 -> TSB
         LTR   R1,R1               IS THIS A TSO USER .Q
         BZ    PARMSREF            NO, DON'T SET SWITCH
         B     SETTSO              YES, SET SWITCH
NOTMVS   DS    0H
         L     R1,4(,R1)           R1 -> TCB
         TM    TCBTSFLG(R1),TCBTSTSK    IN TSO FOREGROUND .Q
         BZ    PARMSREF            BRANCH IF NOT
SETTSO   DS    0H
        $ON    PARMSWCH,TSOWS      TURN ON TSO SWITCH
         SPACE
PARMSREF DS    0H
         L     X1,SRNTBBEG         ADDR OF START OF SYSTEM SYMBOLS
         USING SYSREFS,X1          TELL THE ASSEMBLER
         LA    R0,RNLN             LENGTH OF ONE SYSTEM ENTRY
         LA    R1,@NULL            ADDR OF LAST ENTRY TO BE SEARCHED
         STM   R0,R1,SRNTBLN       SAVE THEM AWAY TOO
        $CALL  SYTIME              GET TIME AND DATE IN DECIMAL
         ST    R0,SAVED0           STORE TIME OF DAY
         UNPK  SAVED0(7),SAVED0(4) CHANGE TIME TO CHARACTER
         MVC   @HOUR+RNCVAL-RND(2),SAVED0    PLACE HOUR
         MVC   @MINUTE+RNCVAL-RND(2),SAVED0+2     PLACE MINUTE
         MVC   @SECOND+RNCVAL-RND(2),SAVED0+4     PLACE SECONDS
         MVC   @TIME+RNCVAL-RND+0(2),SAVED0  HOURS AGAIN
         MVC   @TIME+RNCVAL-RND+3(2),SAVED0+2     MINUTES AGAIN
         MVC   @TIME+RNCVAL-RND+6(2),SAVED0+4     SECONDS AGAIN
         SR    R0,R0               MAKE YEAR.DAY DOUBLE WORD
         STM   R0,R1,SAVED0        PUT YEAR.JULIAN DAY IN CORE
         UNPK  @DAYOFY+RNCVAL-RND(3),SAVED0+6(2)  JULIAN DAY
         UNPK  @YEAR+RNCVAL-RND(3),SAVED0+5(2)    YEAR IN DICTIONARY
         MVC   @PYEAR+RNCVAL-RND+2(2),@YEAR+RNCVAL-RND AGAIN
         CVB   R1,SAVED0           YEAR.DAY TO BINARY
         LA    COUNT,1000          CONSTANT THOUSAND
         DR    R0,COUNT            YEAR IN R1, DAY IN R0
         BCTR  R1,0                (YR-1)
         LR    TEMP,R1             (YR-1)
         SRL   TEMP,2              (YR-1)/4
         N     R1,F3               (YR-1) MOD4
         MH    TEMP,H5             (YR-1)/4*5
         AR    TEMP,R1             (YR-1)/4*5 + ((YR-1) MOD4)
         AR    TEMP,R0             (YR-1)/4*5 + ((YR-1) MOD4) + DAYS
         SR    COUNT,COUNT         DOUBLE WORD LONG
         D     COUNT,F7            DAY OF THE WEEK
         LR    TEMP,COUNT          PREPARE FOR INDEX MULT
         LA    COUNT,L'ZDAYTAB     LENGTH OF ONE DAY ENTRY
         MR    COUNT,COUNT         INDEX DAY NAME TABLE
         LA    COUNT,ZDAYTAB(TEMP) POINT TO THE DAY
         MVC   @DAYOFW+RNCVAL-RND(1),10(COUNT)    SET DAY NUMBER
         MVC   @PDAYOFW+RNCLEN-RND(1),0(COUNT)    SET DAY LENGTH
         MVC   @PDAYOFW+RNCVAL-RND(9),1(COUNT)    SET DAY NAME
         IC    R1,ZFEBTAB(R1)      28 OR 29 DAYS IN FEB
         STC   R1,ZFEB             AND SET IT
         LA    R1,ZMONTAB-L'ZMONTAB     POINT AT MONTH TABLE
         SR    TEMP,TEMP           CLEAR WORK REGISTER
ZLOOP    DS    0H
         LA    R1,L'ZMONTAB(,R1)   POINT TO NEXT MONTH
         IC    TEMP,0(R1)          PICK UP NUMBER OF DAYS IN MONTH
         SR    R0,TEMP             SUBTRACT NUMBER DAYS IN MONTH
         BP    ZLOOP               DONE IF ZERO OR NEGATIVE
         AR    R0,TEMP             ADD BACK LAST MONTH
         CVD   R0,SAVED0           CHANGE DAY OF MONTH TO DECIMAL
         MVO   SAVED0(2),SAVED0+6(2)    ALIGN DAY IN BYTE
         UNPK  @DAYOFM+RNCVAL-RND(3),SAVED0(2)    ENTER DAY OF MONTH
         MVC   @MONTH+RNCVAL-RND(2),11(R1)   MONTH NUMBER
         MVC   @PMONTH+RNCLEN-RND(1),1(R1)   MONTH NAME LENGTH
         MVC   @PMONTH+RNCVAL-RND(9),2(R1)   MONTH NAME
         SPACE
         LA    R1,SDATEWRK         POINT TO DATE WORK AREA
         MVI   0(R1),C' '          BLANK WORK AREA
         MVC   1(L'SDATEWRK-1,R1),0(R1) ALL OF IT
         SR    TEMP,TEMP           ZERO LENGTH REG
         IC    TEMP,@PMONTH+RNCLEN-RND  LENGTH OF MONTH STRING
         MVC   0(9,R1),@PMONTH+RNCVAL-RND    ENTER MONTH NAME
         LA    R1,1(TEMP,R1)       NEXT CHARACTER
         MVC   0(2,R1),@DAYOFM+RNCVAL-RND    ENTER DAY OF MONTH
         CLI   0(R1),C'0'          TEST FOR LEADING ZERO
         BNE   PARMNZDT            BRANCH IF NO LEADING ZERO
         MVC   0(1,R1),1(R1)       MOVE SINGLE DIGIT TO START
         BCTR  R1,0                BACKUP POINTER
PARMNZDT DS    0H
         LA    R1,2(,R1)           BUMP POINTER
         MVI   0(R1),C','          COMMA
         MVC   2(4,R1),@PYEAR+RNCVAL-RND     ENTER YEAR
         DROP  X1
         SPACE
         SR    R0,R0               CLEAR RDW POINTER
        $CALL  PUTTERM             OPEN ERROR FILE
         BC    BPOS,PARMSTRT       BRANCH IF OPEN SUCCESSFUL
         MVI   EFLAG057,ERRINFO    SET INFORMATION FLAG
        $CALL  ERROUT              DISPLAY FIRST LINE TO OPERATOR
         SPACE
PARMSTRT DS    0H
        $ON    PARMSWCH,(FEMPTY,FNOEMPTY)         DEFAULTS
        $ON    PARMSWCH,(AFIRST,FFIRST,BCSWS)     MORE DEFAULTS
         L     R1,PLSTSV           PARM LIST ADDRESS
         L     R1,0(,R1)           GET ADDR OF ACTUAL LIST
         LH    X1,0(,R1)           GET LENGTH OF PARM
         LTR   X1,X1               IS IT NULL .Q
         BZ    ENDSCN              BRANCH IF YES
*                                                                     *
*        INITIALIZE FOR SCAN                                          *
*                                                                     *
         LA    R1,2(,R1)           INITIALIZE FIELD SCAN POINTER
         LA    X3,0(X1,R1)         LAST CHAR +1
         ST    X3,PARMEND          AND SAVE IT
*                                                                     *
*        SCAN OFF ONE WORD                                            *
*                                                                     *
NEXTWORD DS    0H
         LR    X3,R1               SAVE INITIAL ADDRESS
         ST    X3,ERRSTART         IN CASE OF ERROR
        $OFF   ERRSW,(ERRLPRN,ERREQU)   KILL DELIMITER SWITCHES
         CLI   0(R1),C' '          IS A BLANK FIRST .Q
         BNE   WORDSCAN            START SCANNING IF NOT
         C     R1,PARMEND          TEST FOR END OF PARM
         BNL   WORDEND             BRANCH IF THAT'S ALL
         LA    R1,1(,R1)           NEXT CHAR
         B     NEXTWORD            AND TRY AGAIN
WORDSCAN DS    0H
         C     R1,PARMEND          TEST FOR END
         BNL   WORDEND             BRANCH IF AT END
         CLI   0(R1),C','          TEST FOR COMMA
         BE    WORDEND             BRANCH IF COMMA
         CLI   0(R1),C' '          TEST FOR BLANK
         BE    WORDEND             BRANCH IF BLANK
         CLI   0(R1),C'='          TEST FOR EQUALS
         BE    WORDEQU             BRANCH IF EQUAL
         CLI   0(R1),C'('          TEST FOR LEFT PAREN
         BE    WORDLPRN            BRANCH IF LEFT PAREN
         OI    0(R1),C' '          UPPER CASE PARMS
         LA    R1,1(,R1)           POINT AT NEXT CHAR
         B     WORDSCAN            DO IT AGAIN
WORDEQU  DS    0H
        $ON    ERRSW,ERREQU        MARK EQUAL SIGN
         CLI   0(X3),C'+'          KEYWORD START WITH PLUS .Q
         BE    KWAMPL              YES, IT'S EASIER TO ENTER
         CLI   0(X3),C'&&'         KEYWORD START WITH AMPERSAND .Q
         BNE   WORDEND             BRANCH IF NOT
KWAMPL   DS    0H
         LA    R1,1(,R1)           BUMP PTR
         C     R1,PARMEND          TEST FOR END .Q
         BNL   KWFOUND             BRANCH IF YES
         CLI   0(R1),C''''         QUOTED STRING .Q
         BNE   KWNOQ01             BRANCH IF NOT
KWQST01  DS    0H
         LA    R1,1(,R1)           BUMP ONE MORE
         C     R1,PARMEND          AT THE END .Q
         BNL   KWFOUND             BRANCH IF YES
         CLI   0(R1),C''''         ENDING QUOTE .Q
         BNE   KWQST01             BRANCH IF NOT
         LA    R1,1(,R1)           BUMP POINTER
         C     R1,PARMEND          AT THE END .Q
         BNL   KWFOUND             BRANCH IF YES
         CLI   0(R1),C''''         DOUBLE QUOTE .Q
         BNE   KWFOUND             OUT IF NOT
         B     KWQST01             YES, TRY AGAIN
         SPACE
KWNOQ01  DS    0H
         LA    R1,1(,R1)           BUMP ONE MORE
         C     R1,PARMEND          AT THE END .Q
         BNL   KWFOUND             BRANCH IF YES
         CLI   0(R1),C','          COMMA .Q
         BE    KWFOUND             BRANCH IF YES
         CLI   0(R1),C' '          BLANK .Q
         BE    KWFOUND             BRANCH IF YES
         B     KWNOQ01             LOOP BACK OTHERWISE
         SPACE
KWFOUND  DS    0H
         LR    X1,R1               LAST LETTER OF KW+1
         SR    X1,X3               MINUS START
         S     X1,F2               LESS AMPERSAND AND TERM CHAR
         BNP   COMTEST             THAT WAS SHORT
        $SAVE  ,                   SAVE CURRENT REGS
         L     R1,BUFF3AD          POINT TO WORK AREA
         LA    R1,4(,R1)           BUMP OVER RDW
         MVC   0(B2LG,R1),BLANKS   CLEAR WORK AREA
         MVC   0(L'SRCOM,R1),SRCOM ENTER SET CONTROL WORD
         LA    TEMP,L'SRCOM(,R1)   TARGET FOR VALUE
         EX    X1,KWMVCA           MOVE ARGUMENT
         LA    TEMP,L'SRCOM(,X1)   LENGTH OF RESULT
         LNR   R1,R1               ENTER FIFO
        $CALL  HIDBADD             ENTER SAME
        $RESTOR ,                  RESTORE CURRENT REGS
         BC    BNEG,KWHIDBER       BRANCH IF ERROR
         B     COMTEST             TEST FOR COMMAS
KWMVCA   MVC   0(*-*,TEMP),1(X3)   EXECUTED MOVE KEYWORD ARGUMENT
         SPACE
KWHIDBER DS    0H
         MVI   EFLAG024,ERRSET     NO SPACE AVAILABLE
         B     PARMERR             GO TO ERROR RETURN
         SPACE
WORDLPRN DS    0H
        $ON    ERRSW,ERRLPRN       MARK LEFT PAREN
*                                                                     *
*        COMPUTE PARM LENGTH                                          *
*                                                                     *
WORDEND  DS    0H
         LR    X1,R1               LAST LETTER OF WORD+1
         SR    X1,X3               MINUS FIRST LETTER
         BZ    COMTEST             TEST FOR ZERO LENGTH
         C     X1,F12              TEST FOR TOO LONG
         BH    PARMERR             ERROR IF SO
         BCTR  X1,0                LENGTH-1
         LA    X2,OPTEST1          POINT TO START OF PARM TABLE
        $IFNONE ERRSW,(ERREQU,ERRLPRN),NEXTOP BRANCH IF NOT KEYWORD
         LA    X2,OPTEST2          POINT TO KEYWORD TABLE
NEXTOP   DS    0H
         CLI   0(X2),FF            AT THE END .Q
         BE    PARMERR             ERROR IF SO
         IC    COUNT,OPTPLEN(,X2)  GET MIN LENGTH-1 OF PARM
         N     COUNT,F15           AND PURIFY
         CR    X1,COUNT            IS THIS A CANDIDATE
         BL    BXLEOPT             BRANCH IF NOT
         EX    X1,OPTCLC           DO THE COMPARE
         BE    FOUND               BRANCH IF EQUAL
BXLEOPT  DS    0H
         LA    X2,OPTPEND(,X2)     POINT TO NEXT
         B     NEXTOP              AND TRY AGAIN
OPTCLC   CLC   OPTPSTR(*-*,X2),0(X3)    COMPARE PARM NAMES
*                                                                     *
*        A MATCH HAS BEEN FOUND                                       *
*                                                                     *
FOUND    DS    0H
         L     X1,OPTPADDR(X2)     GET ROUTINE ADDRESS
         LA    RETURN,COMTEST      CHECK FOR COMMAS, ETC AFTER
         BR    X1                  GO DO IT
         SPACE
SWTCHNM  DS    0H
        $ON    PARMSWCH,NUSWS      TURN ON NUMBER SWITCH
ADJUST   DS    0H
         MVC   DEFADJ+TAB3DEF,F30  SET ADJUST AMOUNT
         BR    RETURN              AND TERMINATE
         SPACE
SWTCHNNM DS    0H
        $OFF   PARMSWCH,NUSWS      TURN OFF NUMBER SWITCH
UNADJUST DS    0H
         MVC   DEFADJ+TAB3DEF,F0   REMOVE ADJUST AMOUNT
        $OFF   PARMSWCH,NUSWS      TURN OFF NUMBER SWITCH
         BR    RETURN              AND TERMINATE
         SPACE
SWCONT   DS    0H
         MVC   DEFCONT+TAB3DEF,DEFCONT+TAB3MAX  MAXIMUM ERROR COUNT
         BR    RETURN              AND TERMINATE
SWCONTNO DS    0H
         MVC   DEFCONT+TAB3DEF,DEFCONT+TAB3MIN  MINIMUM ERROR COUNT
         BR    RETURN              AND TERMINATE
         SPACE
SWTCHFO  DS    0H
        $OFF   PARMSWCH,(NFSWS,NCSWS)   TURN THEM ALL OFF
         MVI   PARMJUV,JUVPOS      JUSTIFY LEFT AND RIGHT
         BR    RETURN
SWTCHNF  DS    0H
        $ON    PARMSWCH,(NFSWS,NCSWS)   TURN THEM ALL ON
         MVI   PARMJUV,JUVNEG      NO JUSTIFY
         BR    RETURN              AND TERMINATE
         SPACE
SWTCHP6  DS    0H
         LA    X3,3                TOP OF FORM LINE AT SIX LPI
         ST    X3,DEFFFTO+TAB3DEF  SET IT
         LA    X3,66               PAGE LENGTH FOR SIX LINES PER INCH
         ST    X3,DEFPL+TAB3DEF    SET IT
         BR    RETURN              THAT'S IT
SWTCHP8  DS    0H
         LA    X3,4                TOP OF FORM LINE AT EIGHT LPI
         ST    X3,DEFFFTO+TAB3DEF  SET IT
         LA    X3,88               PAGE LENGTH FOR EIGHT LINES PER INCH
         ST    X3,DEFPL+TAB3DEF    SET IT
         BR    RETURN              THAT'S IT
         SPACE
PAGPARM  DS    0H
         BAL   RETURN,SWTCHDGT     ENTER FIRST OPERAND
        $ON    PARMSWCH,NPSWS      SET NO PRINT SWITCH
         CLC   DEFPAGS+TAB3DEF,F1  START ON PAGE ONE .Q
         BNE   PAGPARON            BRANCH IF NOT
        $OFF   PARMSWCH,NPSWS      PRINT FROM THE VERY START
PAGPARON DS    0H
         C     R1,PARMEND          ANY MORE PARM STRING TO CHECK .Q
         BH    COMTEST             BRANCH OUT IF NOT
         CLI   0(R1),C':'          A SECOND OPERAND .Q
         BE    PAGPARML            BRANCH IF YES
        $IFOFF ERRSW,ERRLPRN,COMTEST    CHECK FOR END IF NO PARENS
         CLI   0(R1),C','          OTHERWISE A COMMA IS VALID
         BNE   COMTEST             IF NOT, CHECK ENDING
PAGPARML DS    0H
         LA    X2,OPTPAGEL         POINT TO SECOND OPERAND ENTRY
         BAL   RETURN,SWTCHDGT     ENTER SECOND VALUE
         CLC   DEFPAGS+TAB3DEF,DEFPAGL+TAB3DEF    START GT LAST .Q
         BH    PARMERR             ERROR IF NOT
         B     COMTEST             CHECK THE ENDING
         SPACE
SWTCHEX  DS    0H
         EX    R0,OPTPBITS(X2)     EXECUTE ONE INSTRUCTION
         BR    RETURN              AND GO BACK
         SPACE
NUMDGT   DS    0H
        $ON    PARMSWCH,NUSWS      TURN ON NUMBER SWITCH
         B     SWTCHDGT            HANDLE NUMERIC OPERAND
         SPACE
LEGDGT   DS    0H
        $ON    PARMSWCH,OUSWS      TURN ON LEGAL INTERPRETATION
         B     SWTCHDGT            HANDLE NUMERIC OPERAND
LINDGT   DS    0H
        $OFF   PARMSWCH,OUSWS      SET TO LINENUMBER INTERPRETATION
         B     SWTCHDGT            HANDLE NUMERIC OPERAND
         SPACE
SWTCHDGT DS    0H
         LA    R1,1(,R1)           BUMP PAST DELIMITER
         LR    X3,R1               FIRST DIGIT IN NUMBER
         ST    X3,ERRSTART         IN CASE OF ERROR
NUMSCAN  DS    0H
         C     R1,PARMEND          TEST FOR END OF PARM
         BNL   NUMEND              BRANCH IF WE'RE THERE
         CLI   0(R1),C'0'          TEST FOR NUMERIC LOW
         BL    NUMEND              BRANCH IF LOW
         CLI   0(R1),C'9'          TEST FOR NUMERIC HIGH
         BH    NUMEND              BRANCH IF HIGH
         LA    R1,1(,R1)           POINT NEXT CHARACTER
         B     NUMSCAN             NEXT CHECK
NUMEND   DS    0H
         LR    COUNT,R1            COMPUTE LENGTH OF NUMBER
         SR    COUNT,X3            LESS START POSITION
         BZ    PARMERR             ERROR IF NO DIGITS
         C     COUNT,F7            TEST FOR TOO MANY DIGITS
         BH    PARMERR             ERROR IF LARGER
         BCTR  COUNT,0             LENGTH-1
         EX    COUNT,PARMPACK      PACK INTO SAVED0
         CVB   X3,SAVED0           CONVERT TO BINARY
*                                                                     *
*        TEST FOR NUMBER FOLLOWED BY K                                *
*                                                                     *
         C     R1,PARMEND          TEST FOR END OF PARM
         BE    NOK                 BRANCH IF OK
         CLI   0(R1),C'K'          FOLLOWED BY 'K' .Q
         BNE   NOK                 BRANCH IF NOY
         LA    R1,1(,R1)           POINT AT NEXT CHAR
         SLA   X3,10               MULT BY 1024
         BO    PARMERR             TEST FOR OVERFLOW
NOK      DS    0H
         L     COUNT,OPTPBITS(,X2) OFFSET OF TARGET
         LA    COUNT,DEFAULTS(COUNT)    ADDRESS OF TARGET
         C     X3,TAB3MIN(COUNT)   BIG ENOUGH .Q
         BL    PARMERR             BRANCH IF TOO SMALL
         CL    X3,TAB3MAX(COUNT)   SMALL ENOUGH .Q
         BH    PARMERR             BRANCH IF TOO BIG
         ST    X3,TAB3DEF(COUNT)   SET DEFAULT VALUE
         BR    RETURN              AND GO BACK
*                                                                     *
*        CHECK FOR DELIMITERS AFTER PARM JUST SCANNED                 *
*                                                                     *
COMTEST  DS    0H
        $IFOFF ERRSW,ERRLPRN,COMTEST1   BRANCH IF NO LEFT PAREN
         C     R1,PARMEND          ANY MORE PARM STRING TO CHECK .Q
         BH    PARMERR             BRANCH IF NOT
         CLI   0(R1),C')'          RIGHT PAREN
         BE    BLKTEST             BRANCH IF YES
COMTEST1 DS    0H
         C     R1,PARMEND          AT THE END .Q
         BNL   ENDSCN              BRANCH IF THE END
         CLI   0(R1),C' '          A BLANK TERMINATOR .Q
         BE    BLKTEST             BRANCH IF YES
         CLI   0(R1),C','          A COMMA TERMINATOR .Q
         BNE   PARMERR             THEN HOW CAN THIS BE .Q
BLKTEST  DS    0H
         LA    R1,1(,R1)           POINT TO NEXT CHAR
         B     NEXTWORD            AND GET NEXT PARAM
*                                                                     *
*        AT THE END OF THE LIST                                       *
*                                                                     *
ENDSCN   DS    0H
         MVC   ERCONT,DEFCONT+TAB3DEF   SET USER ERROR COUNT
         SPACE
        $IFOFF PARMSWCH,STATSWS,STADONE BRANCH IF NOT FULLSTATS
         L     X3,VSCRICVT         COMMUNICATION VECTOR TABLE
         USING SCRICVT,X3          AND TELL THE ASSEMBLER
         LA    X1,VFSTATS          START OF ROUTINE ADDRESSES
         LA    X2,L'VFSTATS        ENTRY LENGTH
         LA    X3,VFSTATE          END OF ROUTINE ADDRESSES
         DROP  X3
STALOOP  DS    0H
         L     R1,0(,X1)           NEXT CANDIDATE
         LTR   R1,R1               ANYTHING THERE .Q
         BNP   STAFAIL             BRANCH IF NOT
         USING SCVTDSCT,R1         CANDIDATE AREA
         CLI   SCVTCCNT,X'47'      ENTRY SEQUENCE .Q
         BE    STAFAIL             BRANCH IF YES
         XC    SCVTCCNT,SCVTCCNT   ZERO ROUTINE CALL COUNT
         DROP  R1
STAFAIL  DS    0H
         BXLE  X1,X2,STALOOP       CHECK THEM ALL
         NI    SCVTENY+1,X'0F'     ENABLE ROUTINE COUNTS
         SPACE
STADONE  DS    0H
         MVC   JUVAL,PARMJUV       SET DEFAULT JUSTIFY MODE
         MVC   SWITCHS,PARMSWCH    SET SWITCHES
        $IFOFF PARMSWCH,PROFSW,PARMPROF BRANCH IF PROFILE NOT SPECIFIED
         LA    R1,IMPROF           THIS STRING WILL DO IT
         LNR   R1,R1               INDICATE FIFO
         LA    TEMP,L'IMPROF-1     LENGTH-1 REQUIRED
        $CALL  HIDBADD             ENTER SAME
         BC    BNEG,KWHIDBER       ERROR IF NO SPACE
         SPACE
PARMPROF DS    0H
         XC    IFSTAK,IFSTAK       CLEAR IF STACK SETTINGS
         SPACE
         L     R1,TRINITAD         IDENTITY TRANSLATE TABLE ADDR
         L     COUNT,TRANADI       POINT TO INPUT TRANSLATE TABLE
         MVC   0(256,COUNT),0(R1)  INITIALIZE INPUT TRANSLATE TABLE
         SPACE
         MVC   TRANAD,TRANADO      ADDR OF OUTPUT TRANSLATE TABLE
        $CALL  TRRESET             INITIALIZE OUTPUT TRANSLATE TABLE
         SPACE
         XC    ASRWORK,ASRWORK     CLEAR ANY TEMP LOCAL DICTIONARY
         SPACE
         SR    R0,R0               CLEAR WORK REGISTER
         ST    R0,FLOFFSP          CLEAR BUFFERED SPACES
         MVC   FLOFFCH,DEFFFCH+TAB3DEF  LEADING CHANNEL SKIP IS PENDING
         STH   R0,RMARGIN          CLEAR RIGHT MARGIN
         STH   R0,INDENTR          CLEAR RIGHT INDENT
         STH   R0,PICNT            CLEAR PARAGRAPH INDENT
         STH   R0,HICNT            CLEAR HANGING INDENT
         STH   R0,SFNCNT           ZERO SYSTEM FOOTNOTE COUNT
         STH   R0,FNSEP            ZERO FOOTNOTE MARGIN
         XC    FMTOLD2(LFMTOLD2),FMTOLD2     CLEAR AREA
         MVC   LLZ,DEFLL+TAB3DEF   SET LINE LENGTH
         MVC   CLLZ,DEFLL+TAB3DEF  SET COLUMN LENGTH
         XC    CLLZSAVE,CLLZSAVE   CLEAR COLUMN LENGTH SHADOW
         MVC   PLZ(2),DEFPL+2      SET PAGE LENGTH
         MVC   PLCT(2),DEFPL+2     AND AGAIN
         MVC   TOPMRG,DEFTM+2      SET TOP MARGIN
         MVC   BMMRG,DEFBM+2       BOTTOM MARGIN
         SPACE
         XC    CCAREA(CPFKFNL),CCAREA   QUEUED CONDITIONAL COLUMNS
         XC    CPAREA(CPFKFNL),CPAREA   QUEUED CONDITIONAL KEEPS
         XC    FBAREA(CPFKFNL),FBAREA   QUEUED FLOATING BLOCKS
         XC    FKAREA(CPFKFNL),FKAREA   QUEUED FLOATING KEEPS
         XC    FNAREA(CPFKFNL),FNAREA   QUEUED FOOTNOTES
         XC    HNAREA(CPFKFNL),HNAREA   QUEUED HEADNOTES
         XC    HNEAREA(CPFKFNL),HNEAREA QUEUED EVEN HEADNOTES
         XC    HNOAREA(CPFKFNL),HNOAREA QUEUED ODD HEADNOTES
         XC    SCAREA(CPFKFNL),SCAREA   QUEUED SINGLE COLUMN
         XC    MCAREA(CPFKFNL*CDMAXC),MCAREA QUEUED MULTIPLE COLUMN
         SPACE
         MVI   ICORFLG,ICORNONE    INITIALLY NOT FORMATTING INCORE
         MVI   ICOLFLG,ICOLNONE    INITIALLY NOT MULTI-COLUMN
         XC    SCCOUNT,SCCOUNT     CLEAR NESTED SINGLE COLUMNS
         XC    CDVALC(L'CDVALC),CDVALC  CLEAR MULTI-COLUMN OFFSETS
         MVI   CDVALC+0,CDINIT1    FIRST COLUMN DEFAULT
         MVI   CDVALC+1,CDINIT2    SECOND COLUMN DEFAULT
         MVI   CDVALC+2,CDINIT3    THIRD COLUMN DEFAULT
         SPACE
         SR    R1,R1               CLEAR WORK REG
         IC    R1,TDEVICE          OUTPUT DEVICE
         L     X3,VSCRICVT         COMMUNICATION VECTOR TABLE
         USING SCRICVT,X3          AND TELL THE ASSEMBLER
         L     R1,VFO2741(R1)      OUTPUT DEVICE TABLE
         ST    R1,VDEVICEA         REMEMBER SAME ADDRESS
         DROP  X3
         LTR   R1,R1               DOES IT EXIST .Q
         BZ    PARMTDEV            BRANCH IF NOT
         USING TDEVICEA,R1         AREA LOOKS LIKE THIS
         L     R0,TDEVRESH         HORIZONTAL RESOLUTION
         DROP  R1
         SRDL  R0,32               PREPARE FOR A DIVIDE
         D     R0,DEFCPI+TAB3DEF   DIVIDE BY CHARACTERS PER INCH
         STH   R1,TDEVWID          SET CHARACTER WIDTH
         SPACE
PARMTDEV DS    0H
         LA    R0,HYUSER           USER HYPHENATION INITIALLY
         L     R1,VSCRICVT         COMMUNICATION VECTOR TABLE
         L     R1,VHY-SCRICVT(,R1) HYPHENATION ROUTINE ADDRESS
         LTR   R1,R1               HYPHENATION ROUTINE PRESENT .Q
         BNZ   PARMHYOK            BRANCH IF YES
         LA    R0,HYNONE           ELSE, NO HYPHENATION INITIALLY
PARMHYOK DS    0H
         ST    R0,HYLEVEL          SET INITIAL HYPHENATION LEVEL
         MVC   HYTHRESH,DEFTRSH+TAB3DEF+2    INITIAL HYPHEN THRESHOLD
         MVC   HYMINPT,DEFMNPT+TAB3DEF+2     INITIAL MINIMUM LENGTH
         MVC   HYENDPT,DEFENDPT+TAB3DEF+2    INITIAL END MINIMUM LENGTH
         MVC   HYSUPCNT,DEFHYSUP+TAB3DEF+2   AUTO HYPHENATION SUPPRESS
         MVC   HYSUPWRK,HYSUPCNT   AND WORKING VALUE
         SPACE
         MVC   DARKVAL,DEFDARK+TAB3DEF+2     INIT AND DEFAULT DARK VAL
         MVC   HDMRG,DEFHDMG+2     HEADING MARGIN
         MVC   FTMRG,DEFFTMG+2     FOOTNOTE MARGIN
         SPACE
         L     R1,PACNTII          INITIAL INTEGER PART OF PAGE NUMBER
         ST    R1,PACNTI           SET IT
         L     R1,PACNTDI          INITIAL DECIMAL PART OF PAGE NUMBER
         ST    R1,PACNTD           SET IT
         MVC   PAGECNT,F1          INIT GLOBAL PAGE COUNT
         XC    PNPREF,PNPREF       CLEAR PAGE NUMBER PREFIX
         XC    PNSUFX,PNSUFX       CLEAR PAGE NUMBER SUFFIX
         SPACE
         MVC   PERIND(1),PERIND+1  WORKING CONTROL WORD SEPARATOR
         MVC   PERNBIND(1),PERNBIND+1   WORKING NOBREAK CW INDICATOR
         MVC   BSIND(1),BSIND+1    INITIAL USER BACKSPACE/HEX JOIN
         MVC   BSHJ(1),BSHJ+1      AND ITS HEX JOIN ATTRIBUTE
         MVC   TBIND(1),TBIND+1    INITIAL ADDITIONAL USER TAB
         MVC   OCCHAR(1),OCCHAR+1  WORKING OVERLAY CHARACTER
         XC    OCCNT,OCCNT         CLEAR OVERLAY CHAR LINE COUNT
         SPACE
        $CALL  UDRESET             INITIAL UNDERSCORE DEFINITION
        $CALL  HEADCLR             INITIALIZE TITLE INFORMATION
         LA    R1,HIDBANCH         POINT TO HIDDEN BUFFER ANCHOR
        $CALL  HIDBDEL             INITIALIZE HIDDEN READ BUFFER
        $CALL  DHCLR               INITIALIZE HEAD LEVEL TABLE
         SPACE
         LM    R1,TEMP,INDEXS      GET CONTROL WORD TABLE ADDRESSES
ENDSCN01 DS    0H
         MVC   SPCTLW(2,R1),SPCTLI(R1)  RESET WORKING VALUE TO INITIAL
         BXLE  R1,COUNT,ENDSCN01   GO TILL DONE
         SPACE
         MVC   ADJCNT(2),DEFADJ+2  SET ADJUST VALUE FOR CENTERING
         XC    ADJCEVN,ADJCEVN     CLEAR EVEN PAGE ADJUST
         XC    ADJCODD,ADJCODD     CLEAR ODD PAGE ADJUST
         SPACE
         L     R1,CWTABAD          GET ADDR OF CONTROL WORD SEP TAB
         XC    0(256,R1),0(R1)     ZERO THE TABLE
         MVI   C';'(R1),C';'       DEFAULT CONTROL WORD SEPARATOR
         SPACE
         L     R1,ESTABAD+4        GET ADDR OF INPUT ESCAPE CHAR TABLE
         XC    0(256,R1),0(R1)     ZERO THE TABLE
         XC    ESTABAD(4),ESTABAD  ZERO WORKING TABLE POINTER
         SPACE
         L     R1,CSTABAD          .CS TABLE ADDRESS
         XC    0(L'CSTABLE,R1),0(R1)    ZERO INCLUDE STATUS
         XC    L'CSTABLE(L'CSTABLE,R1),L'CSTABLE(R1)   AND CURRENT STAT
         SPACE
        $CALL  RCAINIT             INITIALIZE REV CODE STACK
         SPACE
         LH    R1,HDMRG            HEADING MARGIN
         AH    R1,HSCNT            PLUS HEADING SPACE
         CH    R1,TOPMRG           COMPARE WITH TOP MARGIN
         BNH   ENDERR01            BRANCH IF OK
         MVI   EFLAG041,ERRSET     ELSE SOMETHING WRONG
ENDERR01 DS    0H
         LH    R1,FTMRG            FOOTING MARGIN
         AH    R1,FSCNT            PLUS FOOTING SPACE
         CH    R1,BMMRG            COMPARE WITH BOTTOM MARGIN
         BNH   ENDERR02            BRANCH IF OK
         MVI   EFLAG042,ERRSET     ELSE SOMETHING WRONG
ENDERR02 DS    0H
         LH    R1,TOPMRG           TOP MARGIN
         AH    R1,BMMRG            PLUS BOTTOM MARGIN
         CH    R1,PLZ              COMPARE WITH PAGE LENGTH
         BL    ENDERR03            BRANCH IF OK
         MVI   EFLAG045,ERRSET     ELSE SET SOMETHING WRONG
         SPACE
ENDERR03 DS    0H
         OC    ERRFLGS,ERRFLGS     ANY ERRORS DETECTED
         BNZ   PARMERR             BRANCH IF YES
         XC    ERRSTART,ERRSTART   CLEAR ERROR POINTER
        $CC    POS                 SET SUCCESS CONDITION CODE
*                                                                     *
*        RETURN FROM WHENCE WE CAME                                   *
*                                                                     *
PARMRET  DS    0H
        $EXIT  RC=0                AND RETURN TO CALLER
         SPACE
PARMERR  DS    0H
         L     R1,PLSTSV           PARM LIST ADDR
         L     R1,0(,R1)           GET ADDR OF ACTUAL LIST
         LH    X1,0(,R1)           GET LENGTH OF PARM
         STH   X1,BUFF2LGZ         SET PARM LENGTH
         BCTR  X1,0                LENGTH-1 OF PARM
         EX    X1,PARMIMVC         MOVE PARM TO BUFFER
         L     X1,ERRSTART         ERROR START ADDRESS
         SR    X1,R1               OFFSET OF ERROR
         BCTR  X1,0                LESS LENGTH OF PARM LENGTH
         BCTR  X1,0                DITTO
         LA    X1,BUFF2(X1)        RELOCATED ERROR START ADDR
         ST    X1,ERRSTART         SAVE AWAY FOR ERROR PROCESSING
        $CC    NEG                 SET ERROR CONDITION CODE
         B     PARMRET             AND GO TERMINATE
         SPACE
PARMIMVC MVC   BUFF2(*-*),2(R1)    EXECUTED MOVE PARM
         EJECT
*                                                                     *
*        DATA AND WORK AREAS                                          *
*                                                                     *
         SPACE
SRCOM    DC    C'.SR '             DUMMY CONTROL WORD
IMPROF   DC    C'.IM PROFILE '     IF PROFILE OPTION SPECIFIED
         SPACE
ERRSW    DC    X'00'               ERROR SWITCH
ERRLPRN  EQU   X'80'               LEFT PAREN SWITCH
ERREQU   EQU   X'40'               EQUAL SIGN SWITCH
PARMEND  DC    A(*-*)              END OF PARM STRING
PARMPACK PACK  SAVED0(8),0(*-*,X3) EXECUTED PACK
         SPACE
PARMJUV  DC    AL1(JUVPOS)         JUSTIFY LEFT AND RIGHT BY DEFAULT
PARMSWCH DC    XL10'00'            WORK SWITCHES
         SPACE
         LTORG
         SPACE
CVTPTR   EQU   X'10'               CVT POINTER ADDRESS
CVTRELNO EQU   4                   RELEASE NUMBER OFFSET FROM PREFIX
CVTTCBP  EQU   X'00'               TCB ADDR PAIR POINTER
CVTDCB   EQU   X'74'               OPERATING SYSTEM FLAGS
TCBTSFLG EQU   X'94'               TIME SHARING FLAGS
TCBTSTSK EQU   X'80'               TSO IS INITIALIZED AND READY
         SPACE
ZDAYTAB  DS    0CL11               DAY CONVERSION TABLE
         DC    AL1(6),C'Monday   2'
         DC    AL1(7),C'Tuesday  3'
         DC    AL1(9),C'Wednesday4'
         DC    AL1(8),C'Thursday 5'
         DC    AL1(6),C'Friday   6'
         DC    AL1(8),C'Saturday 7'
         DC    AL1(6),C'Sunday   1'
         SPACE
ZFEBTAB  DC    AL1(28,28,28,29)
         SPACE
ZMONTAB  DS    0CL13               MONTH CONVERSION TABLE
         DC    AL1(31,7),C'January  01'
ZFEB     DC    AL1(*-*,8),C'February 02'
         DC    AL1(31,5),C'March    03'
         DC    AL1(30,5),C'April    04'
         DC    AL1(31,3),C'May      05'
         DC    AL1(30,4),C'June     06'
         DC    AL1(31,4),C'July     07'
         DC    AL1(31,6),C'August   08'
         DC    AL1(30,9),C'September09'
         DC    AL1(31,7),C'October  10'
         DC    AL1(30,8),C'November 11'
         DC    AL1(255,8),C'December 12'
         EJECT
         COPY  #OPTEST
         SPACE
         DROP  BASE2               DROP BASE REGISTER
         EJECT
         COPY  #SYSREFS
         SPACE 2
         END
