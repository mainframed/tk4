****   THIS IS START OF SPECIFICATIONS ****
*
*01*  MODULE-NAME = IHBRDWRA
*
*01*  DESCRIPTIVE-NAME = INNER MACRO FOR API REQUEST MACROS
*
*01*  COPYRIGHT = NONE
*
*01*  STATUS = RELEASE 1
*
*01*  FUNCTION = GENERATE INLINE CODE FOR THE FOLLOWING REQUEST MACROS
*     THAT USE AN RPL: OPNDST,CLSDST,SIMLOGON,CHANGE,READ,WRITE,RESET,
*     SOLICIT,DO,INQUIRE,INTRPRET, SEND, RECEIVE, RESETSR,SESSIONC.
*     THE GENERATED CODE LOADS THE RPL ADDRESS INTO REGISTER 1,MODIFIES
*     RPL FIELDS AS INDICATED BY RPL MODIFIERS ON THE REQUEST MACRO,
*     LOADS A REQUEST CODE INTO REGISTER ZERO, AND BRANCHES TO THE
*     INTERFACE ROUTINE WHOSE ADDRESS IS IN THE ACB LOCATED VIA THE
*     RPL. ANY CODE MODIFYING THE RPL IS BYPASSED IF THE RPL IS
*     ALREADY ACTIVE.
*
*
*01*  NOTES = COMMON
*
*02*    CHARACTER-CODE-DEPENDENCIES = NONE
*02*    DEPENDENCIES = NONE
*02*    RESTRICTIONS = RPL KEYWORDS LEVENT AND GEVENT ARE VALID FOR
*       OS/VS2 ONLY.
*
*02*    REGISTER-CONVENTIONS = &REG IS THE SYMBOLIC PARAMETER USED TO
*       INDICATE THE REGISTER VALUE SPECIFIED FOR RPL KEYWORDS.
*
*02*    PATCH-LABEL = NONE
*
*01*  MODULE-TYPE = MACRO
*
*02*    PROCESSOR = ASSEMBLER
*
*02*    MACRO-SIZE = 1776 STATEMENTS
*
*02*    ATTRIBUTES = LIST-EXEC
*
*01*  ENTRY-POINT = NA
*
*01*  EXIT-NORMAL = NA
*
*01*  EXIT-ERROR = NA
*
*01*  EXTERNAL-REFERENCES = NONE
*01*  TABLES = WHEN THIS MACRO INVOKES ITSELF WITH 'OPTSCAN' SPECIFIED
*     (TO DO OPTION SCANNING) A TABLE OF INFORMATION
*     IS PASSED CONTAINING THE KEYWORD TO BE SCANNED AND ALL THE VALID
*     SUBPARAMETERS FOR THAT KEYWORD.
*01*  INNER-MACROS = NONE
*01*  SYSTEM-MACROS = INTERNALLY INVOKES ITSELF (IHBRDWRA) WITH
*                      'OPTSCAN' SPECIFIED.
*01*  CHANGE-ACTIVITY = NEW FOR RELEASE 1 OF VTAM
*            APAR OZ32709                                    @ZA32709
*            APAR OZ43509                                    @ZA43509
*
**** END OF SPECIFICATIONS ***/
         MACRO
&NAME    IHBRDWRA  &RPL=,&IHBRW=,&ACB=,&AREA=,&AREALEN=,&RECLEN=,      *
               &AAREA=,&AAREALN=,&ARECLEN=,&ECB=,&EXIT=,&CODESEL=,     *
               &OPTCD=,&ARG=,&NIB=,&BRANCH=,&OBSQVAL=,&SIGDATA=,       *
               &RESPOND=,&CONTROL=,&CHNGDIR=,&SSENSEO=,&STYPE=,        *
               &SEQNO=,&USENSEO=,&IBSQVAL=,&RTYPE=,&IBSQAC=,&SSENSMO=, *
               &OBSQAC=,&POST=,&CHAIN=,&OPTION=,&SCANOPT=,&BRACKET=
.*A-000000-999999                                              @XL03HMV
         GBLB  &IHBRPLY(20)
         GBLC  &IHBTBL(20)
         GBLA  &IHBNUM
         LCLA  &PLARG,&PLNIB,&PLAREA,&PLRLEN,&PLBUFL,&PLACTIV,&PLEXTDS
         LCLA  &PLOPTC1,&PLDACB,&PLECB,&PLAAREA,&PLAARLN,&PLARCLN
         LCLA  &ACBRTN,&SYN,&ASY,&POPTCD2,&POPTCD3,&OPTERR,&PLSSMO
         LCLA  &NUM,&LEN,&CNTINQ,&MSK1CTR,&MSK2CTR,&MSK3CTR,&MSK4CTR
.* *************** VTL ADDITIONS ****************
         LCLA  &NM,&NUM2,&PLRH3,&PLSRTYP,&PLVTFL2,&PLCHN,&PLCNTRL
         LCLA  &PLCNTDF,&PLCNTSC,&PLOBSQV,&PLIBSQV,&PLOBSQ,&PLIBSQ
         LCLA  &PLSEQNO,&PLSSNSO,&PLUSNSO,&PLCNTDC,&PLSSEO,&PLSIGDA
.* ************ END VTL ADDITIONS ***************
         LCLB  &CA,&CS,&PASS,&RELEASE,&NERASE,&EAU,&ERASE
         LCLB  &SPEC,&ANY,&NCONV,&CONV,&LBT,&LBM,&BLK,&COND,&UNCOND
         LCLB  &LOCK,&ACCEPT,&ACQUIRE,&QUIESCE,&START,&STOP
         LCLB  &CONALL,&CONANY,&Q,&NQ,&LGONMSG,&DEVCHAR,&TERMS,&APPSTAT
         LCLB  &COUNTS,&RNNAME,&CIDXLAT,&TOPLGON,&BSCID,&DISPLAY
         LCLB  &RELRQ,&NRELRQ,&UNCONDL,&ACTIVE,&SESSION,&PEND
         LCLB  &BIT0,&BIT01,&SPARM,&SPARM1
.* *************** VTL ADDITIONS ****************
         LCLB  &KEEP,&TRUNC,&NIBTK
         LCLB  &FMHDR,&NFMHDR
         LCLB  &KEEP1,&TRUNC1,&NIBTK1,&FMHDR1
         LCLC  &OPT1,&OPT,&CHAR1,&CHAR2,&CHAR3,&CHAR4
.* ************ END VTL ADDITIONS ***************
  LCLB  &CS1,&PASS1,&NERASE1,&EAU1,&ERASE1
  LCLB  &ANY1,&CONV1,&LBT1,&LBM1,&BLK1,&COND1,&UNCOND1
  LCLB  &LOCK1,&ACCEPT1,&ACQUIR1,&QUIESC1,&START1,&STOP1
  LCLB  &CONALL1,&CONANY1,&NQ1,&LGONMS1,&DEVCHR1,&TERMS1,&APSTAT1
  LCLB  &COUNTS1,&RNNAME1,&CIDXLT1,&TOPLGN1,&BSCID1,&DISPLY1
  LCLB  &NRELRQ1,&UNCNDL1,&ACTIVE1,&SESION1,&PEND1
.* ********** DISPLACEMENT OF RPL FIELDS **********
&PLARG   SETA  36    * THIS IS AN OS VTAM DISPLACEMENT *
&PLAREA  SETA  32    * THIS IS AN OS VTAM DISPLACEMENT *
&PLRLEN  SETA  48    * THIS IS AN OS VTAM DISPLACEMENT *
&PLBUFL  SETA  52 * JAN 12, 73 CODE ADDED AS A RESULT OF PTM____ *
&PLACTIV SETA  69     * THIS IS AN OS VTAM DISPLACEMENT *
&PLEXTDS SETA  68     * THIS IS AN OS VTAM DISPLACEMENT *
&PLOPTC1 SETA  40     * THIS IS AN OS VTAM DISPLACEMENT *
&POPTCD2 SETA  56     * THIS IS AN OS VTAM DISPLACEMENT *
&POPTCD3 SETA  96     * THIS IS AN OS VTAM DISPLACEMENT *
&PLDACB  SETA  24     * THIS IS AN OS VTAM DISPLACEMENT *
&PLECB   SETA  08     * THIS IS AN OS VTAM DISPLACEMENT *
&PLAAREA SETA  76     * THIS IS AN OS VTAM DISPLACEMENT *
&PLAARLN SETA  80     * THIS IS AN OS VTAM DISPLACEMENT *
&PLARCLN SETA  84     * THIS IS AN OS VTAM DISPLACEMENT *
.* *************** VTL ADDITIONS ****************
&PLRH3    SETA  16                       THIRD RH BYTE
&PLSRTYP  SETA  17                       SEND OR RECEIVE TYPE FIELD
&PLVTFL2  SETA  20                       VTAM FLAGS FIELD
&PLCHN    SETA  18                       POSITION IN RU CHAIN FIELD
&PLCNTRL  SETA  21                       RU CONTROL CODE FIELD
&PLCNTDF  SETA  21                       DATA FLOW CONTROL CODES FIELD
&PLCNTDC  SETA  22                       DATA FLOW CONTROL CODES FIELD
&PLCNTSC  SETA  23                       SESSION CONTROL CODES FIELD
&PLOBSQV  SETA  60                       STSN OUTBOUND SEQ. NO. FIELD
&PLIBSQV  SETA  62                       STSN INBOUND SEQ. NO. FIELD
&PLOBSQ   SETA  64                       STSN OUTBOUND ACTION CODES
&PLIBSQ   SETA  65                       STSN INBOUND ACTION CODES
&PLSEQNO  SETA  66                       SEQUENCE NUMBER FIELD
&PLSSNSO  SETA  100                      SYSTEM SENSE OUTPUT FIELD
&PLSSEO   SETA  100                      SYSTEM SENSE ERROR CODES
&PLSSMO   SETA  101                      SYSTEM SENSE ERROR CODES
&PLUSNSO  SETA  102                      USER SENSE OUTPUT FIELD
&PLSIGDA  SETA  108                      SIGNAL DATA FOUR BYTES@ZA32709
.* ************ END VTL ADDITIONS ***************
&ASY     SETA  00
&SYN     SETA  00
&BIT0    SETB  0
&CNTINQ  SETA  0
&MSK1CTR SETA  0
&MSK2CTR SETA  0
&MSK3CTR SETA  0
&MSK4CTR SETA  0
&OPTERR  SETA  0
&CA      SETB  0
&CS      SETB  0
&PASS    SETB  0
&RELEASE SETB  0
&NERASE  SETB  0
&EAU     SETB  0
&ERASE   SETB  0
&SPEC    SETB  0
&ANY     SETB  0
&NCONV   SETB  0
&CONV    SETB  0
&BLK     SETB  0
&LBM     SETB  0
&LBT     SETB  0
&COND    SETB  0
&UNCOND  SETB  0
&LOCK    SETB  0
&ACCEPT  SETB  0
&ACQUIRE SETB  0
&CONALL  SETB  0
&CONANY  SETB  0
&QUIESCE SETB  0
&START   SETB  0
&STOP    SETB  0
&LGONMSG SETB  0
&DEVCHAR SETB  0
&TERMS   SETB  0
&APPSTAT SETB  0
&COUNTS  SETB  0
&RNNAME  SETB  0
&CIDXLAT SETB  0
&TOPLGON SETB  0
&BSCID   SETB  0
&DISPLAY SETB  0
&SPARM   SETB  0
&Q       SETB  0
&NQ      SETB  0
&RELRQ   SETB  0
&NRELRQ  SETB  0
&PEND    SETB  0
&SESSION SETB  0
&ACTIVE  SETB  0
&UNCONDL SETB  0
.* *************** VTL ADDITIONS ****************
&KEEP    SETB  0
&TRUNC   SETB  0
&NIBTK   SETB  0
&FMHDR   SETB  0
&NFMHDR  SETB  0
&KEEP1      SETB  1
&TRUNC1     SETB  1
&NIBTK1     SETB  1
&FMHDR1     SETB  1
.* ************ END VTL ADDITIONS ***************
&BIT01      SETB  1
&CS1        SETB  1
&PASS1      SETB  1
&NERASE1    SETB  1
&EAU1       SETB  1
&ERASE1     SETB  1
&ANY1       SETB  1
&CONV1      SETB  1
&LBT1       SETB  1
&LBM1       SETB  1
&BLK1       SETB  1
&COND1      SETB  1
&UNCOND1    SETB  1
&LOCK1      SETB  1
&ACCEPT1    SETB  1
&ACQUIR1    SETB  1
&CONALL1    SETB  1
&CONANY1    SETB  1
&QUIESC1    SETB  1
&START1     SETB  1
&STOP1      SETB  1
&LGONMS1    SETB  1
&DEVCHR1    SETB  1
&TERMS1     SETB  1
&APSTAT1    SETB  1
&COUNTS1    SETB  1
&RNNAME1    SETB  1
&CIDXLT1    SETB  1
&TOPLGN1    SETB  1
&BSCID1     SETB  1
&DISPLY1    SETB  1
&SPARM1     SETB  1
&NQ1        SETB  1
&NRELRQ1    SETB  1
&PEND1      SETB  1
&SESION1    SETB  1
&ACTIVE1    SETB  1
&UNCNDL1    SETB  1
&ACBRTN  SETA  8   DISPLACEMENT IN ACB OF THE ADDR OF THE INTERFACE RTN
         AIF   ('&SCANOPT' NE '').OPTSCAN  RECURSIVE CALL TO OPTSCAN?
         AIF   ('&RPL' EQ '').NORPL  THIS IS AN ERROR CONDITION
.* ********************************************************************
.*                        GETRPL SUBROUTINE
.* GENERATES CODE TO LOAD THE ADDRESS OF THE RPL INTO REGISTER 1
.* ********************************************************************
.GETRPL  ANOP
         AIF   ('&RPL'(1,1) NE '(').GEN1  THIS BR FOR NON REG FORM
         AIF   ('&RPL' EQ '(1)').ENDRPL   NO LR INSTRUCTION NECESSARY
&NAME    LR    1,&RPL(1)             PUT ADDRESS OF RPL IN REGISTER 1
         CNOP  0,4
         AGO   .ENDRPL1
.GEN1    ANOP
         CNOP  0,4
&NAME    LA    1,&RPL                PUT ADDRESS OF RPL IN REGISTER 1
         AGO   .ENDRPL1
.ENDRPL  ANOP
         CNOP  0,4
         AIF   ('&NAME' EQ '').ENDRPL1
&NAME    EQU   *
.ENDRPL1 ANOP
         AIF   ('&ACB' NE '' OR '&AREA' NE '' OR '&AREALEN' NE '').GEN
         AIF   ('&ECB' NE '' OR '&AAREA' NE '' OR '&RECLEN' NE '').GEN
         AIF   ('&ARG' NE '' OR '&OPTCD' NE '' OR '&AAREALN' NE '').GEN
         AIF   ('&NIB' NE '' OR '&EXIT' NE '').GEN
         AIF   ('&ARECLEN' NE '' OR '&BRANCH' NE '').GEN
         AIF   ('&SIGDATA' NE '' OR '&AREALEN' NE '').GEN
.* *************** VTL ADDITIONS ****************
         AIF   ('&RESPOND' NE '' OR '&CONTROL' NE '').GEN
         AIF   ('&CHNGDIR' NE '' OR '&SSENSEO' NE '').GEN
         AIF   ('&STYPE' NE '' OR '&RTYPE' NE '' ).GEN
         AIF   ('&IBSQAC' NE '' OR '&OBSQAC' NE '').GEN
         AIF   ('&POST' NE '' OR '&CHAIN' NE '').GEN
         AIF   ('&SEQNO' NE '' OR '&USENSEO' NE '').GEN
         AIF   ('&IBSQVAL' NE '' OR '&OBSQVAL' NE '').GEN
         AIF   ('&SSENSMO' NE '' OR '&BRACKET' NE '').GEN
.* ************ END VTL ADDITIONS ***************
         AGO   .GENREQ
.* ********************************************************************
.*                     MDFYRPL SUBROUTINE
.* GENERATES CODE TO MODIFY RPL FIELDS AT EXECUTION TIME.  INVOKES THE
.* FOLLOWING SUBROUTINES: MDFYOPT, GENMSK, MDFYRECD, AND THROUGH MDFY-
.* RECD, MDFYRESP, MDFYCHN, MDFYCTRL, MDFYCDIR, MDFYSSNS, MDFYRTYP,
.*                MDFYIBSQ, MDFYOBSQ, AND OPTSCAN.
.* ********************************************************************
.GEN     ANOP
         TM    &PLACTIV.(1),X'FF'     IS THE RPL ACTIVE?
         BO    IHB&SYSNDX            YES BR AROUND MODIFY CODE
.CKACB   ANOP
         AIF   ('&ACB' EQ '').CKAREA IS THERE AN ACB PARAMETER?
         AIF   ('&ACB'(1,1) NE '(').GEN2  REGISTER NOTATION?
         ST    &ACB(1),&PLDACB.(1)   PUT ACB ADDRESS IN THE RPL
         AGO   .CKAREA
.GEN2    ANOP
         LA    15,&ACB               GET ADDRESS OF NEW ACB
         ST 15,&PLDACB.(1)           AND PUT IT IN THE RPL
.CKAREA  ANOP
         AIF   ('&AREA' EQ '').CKALEN  IS THERE AN AREA PARAMETER?
         AIF   ('&AREA'(1,1) NE '(').GEN3  REGISTER NOTATION?
         ST    &AREA(1),&PLAREA.(1)  PUT ADDRESS OF AREA IN THE RPL
         AGO   .CKALEN
.GEN3    ANOP
         LA    15,&AREA              GET ADDRESS OF NEW AREA
         ST    15,&PLAREA.(1)         AND PUT IT IN THE RPL
.CKALEN  ANOP
         AIF   ('&AREALEN' EQ '').CKRLEN  IS THERE AN AREA LENGTH PARM?
         AIF   ('&AREALEN'(1,1) NE '(').GEN4  REGISTER NOTATION?
         ST    &AREALEN(1),&PLBUFL.(1)     PUT AREA LENGTH IN THE RPL
         AGO   .CKRLEN
.GEN4    ANOP
         B     *+8
         DC    A(&AREALEN)
         L     15,*-4                GET NEW AREA LENGTH
         ST    15,&PLBUFL.(1)        AND PUT IT IN THE RPL
.CKRLEN  ANOP
         AIF   ('&RECLEN' EQ '').CKAAR  IS THERE A RECORD LENGTH PARM?
         AIF   ('&RECLEN'(1,1) NE '(').GEN5  REGISTER NOTATION?
         ST    &RECLEN(1),&PLRLEN.(1)  PUT NEW RECORD LENGTH IN THE RPL
         AGO   .CKAAR
.GEN5    ANOP
         B     *+8
         DC    A(&RECLEN)
         L     15,*-4                GET NEW RECORD LENGTH
         ST    15,&PLRLEN.(1)        AND PUT IT IN THE RPL
.CKAAR   ANOP
         AIF   ('&AAREA' EQ '').CKAALN  IS THERE AN AAREA PARM?
         AIF   ('&AAREA'(1,1) NE '(').GEN6  REGISTER NOTATION?
         ST    &AAREA(1),&PLAAREA.(1)  PUT AAREA ADDRESS IN THE RPL
         AGO   .CKAALN
.GEN6    ANOP
         LA    15,&AAREA             GET ADDRESS OF AAREA
         ST    15,&PLAAREA.(1)       AND PUT IT IN THE RPL
.CKAALN  ANOP
         AIF   ('&AAREALN' EQ '').CKARLN  IS THERE AN AAREALN PARM?
         AIF   ('&AAREALN'(1,1) NE '(').GEN7  REGISTER NOTATION?
         ST    &AAREALN(1),&PLAARLN.(1)   PUT AAREA LENGTH IN THE RPL
         AGO   .CKARLN
.GEN7    ANOP
         B     *+8
         DC    A(&AAREALN)
         L     15,*-4                GET NEW AAREA LENGTH
         ST    15,&PLAARLN.(1)       AND PUT IT IN THE RPL
.CKARLN  ANOP
         AIF   ('&ARECLEN' EQ '').CKARG  IS THERE AN ARECORD LNG PARM?
         AIF   ('&ARECLEN'(1,1) NE '(').GEN8  REGISTER NOTATION?
         ST    &ARECLEN(1),&PLARCLN.(1)  PUT ARECORD LENGTH IN THE RPL
         AGO   .CKARG
.GEN8    ANOP
         B     *+8
         DC    A(&ARECLEN)
         L     15,*-4                GET NEW ARECORD LENGTH
         ST    15,&PLARCLN.(1)       AND PUT IT IN THE RPL
.CKARG   ANOP
         AIF   ('&ARG' NE '' AND '&NIB' NE '').CKARGER  IS THERE AN ARG
         AIF   ('&ARG' EQ '').CKNIB  IS THERE AN ARG PARAMETER?
         AIF   ('&ARG'(1,1) NE '(').GEN9  REGISTER NOTATION?
         ST    &ARG(1),&PLARG.(1)    PUT NEW ARGUMENT IN THE RPL
         NI    &PLEXTDS.(1),X'FB'     SET NIB POINTER OFF
         AGO   .CKECB
.CKNIB   ANOP
         AIF   ('&NIB' EQ '').CKECB  IS THERE AN NIB PARAMETER?
         AIF   ('&NIB'(1,1) NE '(').CKNIB1  REGISTER NOTATION?
         ST    &NIB(1),&PLARG.(1)    PUT NIB POINTER IN THE RPL
         OI    &PLEXTDS.(1),X'04'     SET NIB POINTER ON
         AGO   .CKECB
.CKNIB1  ANOP
         LA    15,&NIB               GET NEW NIB POINTER
         ST    15,&PLARG.(1)         AND PUT IT IN THE RPL
         OI    &PLEXTDS.(1),X'04'     SET NIB POINTER ON
         AGO   .CKECB
.CKARGER ANOP
  MNOTE 0,'PARAMETERS ARG AND NIB CONFLICT - BOTH DISREGARDED'
         AGO   .CKECB
.GEN9    ANOP
  MNOTE 0,'PARAMETER ARG DOES NOT REFLECT REGISTER NOTATION - IGNORED'
.CKECB   ANOP
         AIF   ('&ECB' NE '' AND '&EXIT' NE '').GEN10  BOTH SPECIFIED?
         AIF   ('&ECB' NE '').ECBGEN  NO - IF ECB= WAS SPECIFIED, BR
         AIF   ('&EXIT' EQ '').CKOPTCD  EXIT= SPECIFIED?  NO - BRANCH
         AIF   ('&EXIT'(1,1) EQ '(').GEN10A  YES - REGISTER NOTATION?
         LA    15,&EXIT              GET ADDRESS OF EXIT ROUTINE
         ST    15,&PLECB.(1)         AND PUT IT IN THE RPL
         AGO   .FLGSETA
.GEN10A  ANOP
         ST    &EXIT(1),&PLECB.(1)  PUT EXIT ROUTINE ADDRESS IN THE RPL
.FLGSETA ANOP
         NI    &PLOPTC1.(1),X'FE'        SET ECB FLAG OFF
         NI    &PLEXTDS.(1),X'BF'      SET NOEXIT BIT OFF
         OI    &PLEXTDS.(1),X'20'      SET EXIT BIT ON
         AGO   .CKOPTCD
.ECBGEN  ANOP
         AIF   ('&ECB' EQ 'INTERNAL').FLGSETC    INTERNAL ECB SPECIFIED
         AIF   ('&ECB'(1,1) EQ '(').GEN10B  REGISTER NOTATION? YES - BR
         LA    15,&ECB               GET ADDRESS OF ECB
         ST    15,&PLECB.(1)         AND PUT IT IN THE RPL
         AGO   .FLGSETB
.GEN10B  ANOP
         ST    &ECB(1),&PLECB.(1)    PUT NEW ECB ADDRESS IN THE RPL
.FLGSETB ANOP
         OI    &PLOPTC1.(1),X'01'        SET ECB FLAG ON
         OI    &PLEXTDS.(1),X'40'      SET NOEXIT BIT ON
         NI    &PLEXTDS.(1),X'DF'      SET EXIT BIT OFF
         AGO   .CKOPTCD
.GEN10   ANOP
        MNOTE 4,'ECB AND EXIT MUTUALLY EXCLUSIVE; INTERNAL ECB ASSUMED'
.FLGSETC ANOP
         NI    &PLOPTC1.(1),X'FE'        SET ECB FLAG OFF
         OI    &PLEXTDS.(1),X'40'      SET NOEXIT BIT ON
         NI    &PLEXTDS.(1),X'DF'      SET EXIT BIT OFF
.* ********************************************************************
.*                       MDFYOPT SUBROUTINE
.* VALIDITY CHECKS OPTCD OPTIONS AND SETS SWITCHES IN A MASK.  INVOKES
.* GENMASK TO GENERATE CODE IF REQUIRED.  ISSUES MNOTES FOR INVALID
.*                   OPTIONS THAT ARE SPECIFIED.
.* ********************************************************************
.CKOPTCD ANOP
         AIF   ('&OPTCD' EQ '').CKSEQNO
&NUM     SETA N'&OPTCD
.SETOPT   ANOP
&LEN     SETA K'&OPTCD(&NUM)
         AIF  ('&OPTCD(&NUM)'(1,1) EQ 'N').NOPTS
         AIF  ('&OPTCD(&NUM)'(1,1) EQ 'C').COPTS
         AIF  ('&OPTCD(&NUM)'(1,1) EQ 'E').EOPTS
         AIF  ('&OPTCD(&NUM)'(1,1) EQ 'A').AOPTS
         AIF  ('&OPTCD(&NUM)'(1,1) NE 'S').XOPTS
         AIF ('&OPTCD(&NUM)'(1,&LEN) NE 'SPEC').SOPTS1
&SPEC    SETB 1
&ANY1    SETB 0
&MSK2CTR SETA  &MSK2CTR+1
         AGO  .GETNEXT
.SOPTS1  ANOP
         AIF  ('&OPTCD(&NUM)'(1,&LEN) NE 'SYN').SOPTS2
&SYN     SETA 1
         AGO  .GETNEXT
.SOPTS2  ANOP
         AIF  ('&OPTCD(&NUM)'(1,&LEN) NE 'SESSION').SOPTS3
&SESSION SETB 1
&PEND1   SETB 0
&SESION1 SETB 0
&ACTIVE1 SETB 0
&UNCNDL1 SETB 0
&MSK1CTR SETA  &MSK1CTR+1
&MSK2CTR SETA  &MSK2CTR+1
         AGO  .GETNEXT
.SOPTS3  ANOP
         AIF  ('&OPTCD(&NUM)'(1,&LEN) NE 'START').SOPTS4
&START   SETB 1
&START1  SETB 0
&STOP1   SETB 0
&QUIESC1 SETB 0
&MSK3CTR SETA  &MSK3CTR+1
&MSK4CTR SETA  &MSK4CTR+1
         AGO  .GETNEXT
.SOPTS4  ANOP
         AIF  ('&OPTCD(&NUM)'(1,&LEN) NE 'STOP').SOPTS5
&STOP    SETB 1
&START1  SETB 0
&STOP1   SETB 0
&QUIESC1 SETB 0
&MSK3CTR SETA  &MSK3CTR+1
&MSK4CTR SETA  &MSK4CTR+1
         AGO  .GETNEXT
.SOPTS5  ANOP
         AIF  ('&OPTCD(&NUM)'(1,&LEN) NE 'SESSPARM').SOPTS6
&SPARM   SETB 1
&CNTINQ  SETA &CNTINQ+1
         AGO  .GETNEXT
.SOPTS6  ANOP
         AGO  .INVLDOP
.XOPTS   ANOP
         AIF  ('&OPTCD(&NUM)'(1,&LEN) NE 'UNCONDL').XOPTS1A
&UNCONDL SETB 1
&PEND1   SETB 0
&SESION1 SETB 0
&ACTIVE1 SETB 0
&UNCNDL1 SETB 0
&MSK1CTR SETA  &MSK1CTR+1
&MSK2CTR SETA  &MSK2CTR+1
         AGO  .GETNEXT
.XOPTS1A ANOP
         AIF  ('&OPTCD(&NUM)'(1,&LEN) NE 'UNCOND').XOPTS1
&UNCOND  SETB 1
&UNCOND1 SETB 0
&COND1   SETB 0
&LOCK1   SETB 0
&MSK1CTR SETA  &MSK1CTR+1
&MSK2CTR SETA  &MSK2CTR+1
         AGO  .GETNEXT
.XOPTS1  ANOP
         AIF  ('&OPTCD(&NUM)'(1,&LEN) NE 'PEND').XOPTS2
&PEND    SETB 1
&PEND1   SETB 0
&SESION1 SETB 0
&ACTIVE1 SETB 0
&UNCNDL1 SETB 0
&MSK1CTR SETA  &MSK1CTR+1
&MSK2CTR SETA  &MSK2CTR+1
         AGO  .GETNEXT
.XOPTS2  ANOP
         AIF  ('&OPTCD(&NUM)'(1,&LEN) NE 'PASS').XOPTS3
&PASS    SETB 1
&PASS1   SETB 0
&MSK1CTR SETA  &MSK1CTR+1
&MSK2CTR SETA  &MSK2CTR+1
         AGO  .GETNEXT
.XOPTS3  ANOP
         AIF  ('&OPTCD(&NUM)'(1,&LEN) NE 'LOCK').XOPTS4
&LOCK    SETB 1
&LOCK1   SETB 0
&COND1   SETB 0
&UNCOND1  SETB 0
&MSK1CTR SETA  &MSK1CTR+1
&MSK2CTR SETA  &MSK2CTR+1
         AGO  .GETNEXT
.XOPTS4  ANOP
         AIF  ('&OPTCD(&NUM)'(1,&LEN) NE 'QUIESCE').XOPTS5
&QUIESCE SETB 1
&START1  SETB 0
&STOP1   SETB 0
&QUIESC1 SETB 0
&MSK3CTR SETA  &MSK3CTR+1
&MSK4CTR SETA  &MSK4CTR+1
         AGO  .GETNEXT
.XOPTS5  ANOP
         AIF  ('&OPTCD(&NUM)'(1,1) NE 'Q').XOPTS6
&Q       SETB 1
&NQ1     SETB 0
&MSK1CTR SETA  &MSK1CTR+1
&MSK2CTR SETA  &MSK2CTR+1
         AGO  .GETNEXT
.XOPTS6  ANOP
         AIF  ('&OPTCD(&NUM)'(1,&LEN) NE 'RELRQ').XOPTS7
&RELRQ  SETB 1
&NRELRQ1 SETB 0
&MSK1CTR SETA  &MSK1CTR+1
&MSK2CTR SETA  &MSK2CTR+1
         AGO  .GETNEXT
.XOPTS7  ANOP
         AIF ('&OPTCD(&NUM)'(1,&LEN) NE 'RELEASE').XOPTS8
&RELEASE   SETB 1
&MSK2CTR SETA  &MSK2CTR+1
&PASS1   SETB 0
         AGO  .GETNEXT
.XOPTS8  ANOP
         AIF  ('&OPTCD(&NUM)'(1,&LEN) NE 'BLK').XOPTS9
&BLK     SETB 1
&BLK1    SETB 0
&LBT1    SETB 0
&LBM1    SETB 0
&MSK1CTR SETA  &MSK1CTR+1
&MSK2CTR SETA  &MSK2CTR+1
         AGO  .GETNEXT
.XOPTS9  ANOP
         AIF  ('&OPTCD(&NUM)'(1,&LEN) NE 'LBM').XOPTSA
&LBM     SETB 1
&LBM1    SETB 0
&LBT1    SETB 0
&BLK1    SETB 0
&MSK1CTR SETA  &MSK1CTR+1
&MSK2CTR SETA  &MSK2CTR+1
         AGO  .GETNEXT
.XOPTSA  ANOP
         AIF  ('&OPTCD(&NUM)'(1,&LEN) NE 'LBT').XOPTSB
&LBT     SETB 1
&LBT1    SETB 0
&LBM1    SETB 0
&BLK1    SETB 0
&MSK1CTR SETA  &MSK1CTR+1
&MSK2CTR SETA  &MSK2CTR+1
         AGO  .GETNEXT
.XOPTSB  ANOP
         AIF  ('&OPTCD(&NUM)'(1,&LEN) NE 'LOGONMSG').XOPTSD
&LGONMSG SETB 1
&CNTINQ  SETA &CNTINQ+1
         AGO  .GETNEXT
.XOPTSD  ANOP
         AIF  ('&OPTCD(&NUM)'(1,&LEN) NE 'DEVCHAR').XOPTSE
&DEVCHAR SETB 1
&CNTINQ  SETA &CNTINQ+1
         AGO  .GETNEXT
.XOPTSE  ANOP
         AIF  ('&OPTCD(&NUM)'(1,&LEN) NE 'TERMS').XOPTSF
&TERMS   SETB 1
&CNTINQ  SETA &CNTINQ+1
         AGO  .GETNEXT
.XOPTSF  ANOP
         AIF  ('&OPTCD(&NUM)'(1,&LEN) NE 'RNNAME').XOPTSG
&RNNAME  SETB 1
&CNTINQ  SETA &CNTINQ+1
         AGO  .GETNEXT
.XOPTSG  ANOP
         AIF  ('&OPTCD(&NUM)'(1,&LEN) NE 'TOPLOGON').XOPTSH
&TOPLGON SETB 1
&CNTINQ  SETA &CNTINQ+1
         AGO  .GETNEXT
.XOPTSH  ANOP
         AIF  ('&OPTCD(&NUM)'(1,&LEN) NE 'BSCID').XOPTSI
&BSCID   SETB 1
&CNTINQ  SETA &CNTINQ+1
         AGO  .GETNEXT
.XOPTSI  ANOP
         AIF  ('&OPTCD(&NUM)'(1,&LEN) NE 'DISPLAY').XOPTSJ
&DISPLAY SETB 1
&CNTINQ  SETA &CNTINQ+1
         AGO  .GETNEXT
.XOPTSJ  ANOP
.* *************** VTL ADDITIONS ****************
         AIF  ('&OPTCD(&NUM)'(1,&LEN) NE 'KEEP').XOPTSL
&KEEP    SETB 1
&KEEP1   SETB 0
&TRUNC1  SETB 0
&NIBTK1  SETB 0
&MSK3CTR SETA  &MSK3CTR+1
&MSK4CTR SETA  &MSK4CTR+1
         AGO  .GETNEXT
.XOPTSL  ANOP
         AIF  ('&OPTCD(&NUM)'(1,&LEN) NE 'TRUNC').XOPTSM
&TRUNC   SETB 1
&TRUNC1  SETB 0
&NIBTK1  SETB 0
&KEEP1   SETB 0
&MSK3CTR SETA  &MSK3CTR+1
&MSK4CTR SETA  &MSK4CTR+1
         AGO  .GETNEXT
.XOPTSM  ANOP
         AIF  ('&OPTCD(&NUM)'(1,&LEN) NE 'FMHDR').XOPTSN
&FMHDR   SETB 1
&FMHDR1  SETB 0
&NFMHDR  SETB 0
&MSK3CTR SETA  &MSK3CTR+1
&MSK4CTR SETA  &MSK4CTR+1
         AGO  .GETNEXT
.XOPTSN  ANOP
.* ************ END VTL ADDITIONS ***************
.INVLDOP ANOP
     MNOTE 0,'OPTCD=&OPTCD(&NUM) IS NOT A VALID PARAMETER - IGNORED '
         AGO .GETNEXT
.NOPTS   ANOP
.* *************** VTL ADDITIONS ****************
         AIF  ('&OPTCD(&NUM)'(1,&LEN) NE 'NIBTK').NOPTS2
&NIBTK   SETB 1
&NIBTK1  SETB 0
&KEEP1   SETB 0
&TRUNC1  SETB 0
&MSK3CTR SETA  &MSK3CTR+1
&MSK4CTR SETA  &MSK4CTR+1
         AGO  .GETNEXT
.NOPTS2  ANOP
.* ************ END VTL ADDITIONS ***************
         AIF  ('&OPTCD(&NUM)'(1,&LEN) NE 'NERASE').NOPTS3
&NERASE  SETB 1
&NERASE1 SETB 0
&EAU1    SETB 0
&ERASE1  SETB 0
&MSK1CTR SETA  &MSK1CTR+1
&MSK2CTR SETA  &MSK2CTR+1
         AGO  .GETNEXT
.NOPTS3  ANOP
         AIF  ('&OPTCD(&NUM)'(1,&LEN) NE 'NCONV').NOPTS4
&NCONV   SETB 1
&CONV1   SETB 0
&MSK2CTR SETA  &MSK2CTR+1
         AGO  .GETNEXT
.NOPTS4  ANOP
.* *************** VTL ADDITIONS ****************
         AIF  ('&OPTCD(&NUM)'(1,&LEN) NE 'NFMHDR').NOPTS5
&NFMHDR  SETB 1
&FMHDR1  SETB 0
&MSK4CTR SETA  &MSK4CTR+1
         AGO  .GETNEXT
.NOPTS5  ANOP
.* *********** END VTL ADDITIONS ****************
         AIF  ('&OPTCD(&NUM)'(1,&LEN) NE 'NQ').NOPTS6
&NQ      SETB 1
&NQ1     SETB 0
&MSK2CTR SETA  &MSK2CTR+1
         AGO  .GETNEXT
.NOPTS6  ANOP
         AIF  ('&OPTCD(&NUM)'(1,&LEN) NE 'NRELRQ').NOPTS8
&NRELRQ SETB 1
&NRELRQ1 SETB 0
&MSK2CTR SETA  &MSK2CTR+1
         AGO  .GETNEXT
.NOPTS8  ANOP
         AGO  .INVLDOP
.COPTS   ANOP
         AIF  ('&OPTCD(&NUM)'(1,&LEN) NE 'CS').COPTS2
&CS      SETB 1
&CS1     SETB 0
&MSK1CTR SETA  &MSK1CTR+1
&MSK2CTR SETA  &MSK2CTR+1
         AGO  .GETNEXT
.COPTS2  ANOP
         AIF  ('&OPTCD(&NUM)'(1,&LEN) NE 'COND').COPTS3
&COND    SETB 1
&COND1   SETB 0
&LOCK1   SETB 0
&UNCOND1  SETB 0
&MSK1CTR SETA  &MSK1CTR+1
&MSK2CTR SETA  &MSK2CTR+1
         AGO  .GETNEXT
.COPTS3  ANOP
         AIF  ('&OPTCD(&NUM)'(1,&LEN) NE 'CONV').COPTS4
&CONV    SETB 1
&CONV1   SETB 0
&MSK1CTR SETA  &MSK1CTR+1
&MSK2CTR SETA  &MSK2CTR+1
         AGO  .GETNEXT
.COPTS4  ANOP
         AIF  ('&OPTCD(&NUM)'(1,&LEN) NE 'CONALL').COPTS5
&CONALL  SETB 1
&CONALL1 SETB 0
&CONANY1 SETB 0
&MSK1CTR SETA  &MSK1CTR+1
&MSK2CTR SETA  &MSK2CTR+1
         AGO  .GETNEXT
.COPTS5  ANOP
         AIF  ('&OPTCD(&NUM)'(1,&LEN) NE 'CONANY').COPTS6
&CONANY  SETB 1
&CONANY1 SETB 0
&CONALL1 SETB 0
&MSK1CTR SETA  &MSK1CTR+1
&MSK2CTR SETA  &MSK2CTR+1
         AGO  .GETNEXT
.COPTS6  ANOP
         AIF  ('&OPTCD(&NUM)'(1,&LEN) NE 'CA').COPTS7
&CA      SETB 1
&CS1     SETB 0
&MSK2CTR SETA  &MSK2CTR+1
         AGO  .GETNEXT
.COPTS7  ANOP
         AIF  ('&OPTCD(&NUM)'(1,&LEN) NE 'COUNTS').COPTS8
&COUNTS  SETB 1
&CNTINQ  SETA &CNTINQ+1
         AGO  .GETNEXT
.COPTS8  ANOP
         AIF  ('&OPTCD(&NUM)'(1,&LEN) NE 'CIDXLATE').COPTS9
&CIDXLAT SETB 1
&CNTINQ  SETA &CNTINQ+1
         AGO  .GETNEXT
.COPTS9  ANOP
         AGO  .INVLDOP
.EOPTS   ANOP
         AIF  ('&OPTCD(&NUM)'(1,&LEN) NE 'EAU').EOPTS3
&EAU     SETB 1
&EAU1    SETB 0
&ERASE1  SETB 0
&NERASE1 SETB 0
&MSK1CTR SETA  &MSK1CTR+1
&MSK2CTR SETA  &MSK2CTR+1
         AGO  .GETNEXT
.EOPTS3  ANOP
         AIF  ('&OPTCD(&NUM)'(1,&LEN) NE 'ERASE').EOPTS4
&ERASE   SETB 1
&ERASE1  SETB 0
&EAU1    SETB 0
&NERASE1 SETB 0
&MSK1CTR SETA  &MSK1CTR+1
&MSK2CTR SETA  &MSK2CTR+1
         AGO  .GETNEXT
.EOPTS4  ANOP
         AGO  .INVLDOP
.AOPTS   ANOP
         AIF ('&OPTCD(&NUM)'(1,&LEN) NE 'ANY').AOPTS1
&ANY     SETB 1
&ANY1    SETB 0
&MSK1CTR SETA  &MSK1CTR+1
&MSK2CTR SETA  &MSK2CTR+1
         AGO  .GETNEXT
.AOPTS1  ANOP
         AIF  ('&OPTCD(&NUM)'(1,&LEN) NE 'ACCEPT').AOPTS2
&ACCEPT  SETB 1
&ACCEPT1 SETB 0
&ACQUIR1 SETB 0
&MSK1CTR SETA  &MSK1CTR+1
&MSK2CTR SETA  &MSK2CTR+1
         AGO  .GETNEXT
.AOPTS2  ANOP
         AIF  ('&OPTCD(&NUM)'(1,&LEN) NE 'ACQUIRE').AOPTS3
&ACQUIRE SETB 1
&ACCEPT1 SETB 0
&ACQUIR1 SETB 0
&MSK1CTR SETA  &MSK1CTR+1
&MSK2CTR SETA  &MSK2CTR+1
         AGO  .GETNEXT
.AOPTS3  ANOP
         AIF  ('&OPTCD(&NUM)'(1,&LEN) NE 'ASY').AOPTS4
&ASY     SETA 1
         AGO  .GETNEXT
.AOPTS4  ANOP
         AIF  ('&OPTCD(&NUM)'(1,&LEN) NE 'ACTIVE').AOPTS5
&ACTIVE  SETB 1
&PEND1   SETB 0
&SESION1 SETB 0
&ACTIVE1 SETB 0
&UNCNDL1 SETB 0
&MSK1CTR SETA  &MSK1CTR+1
&MSK2CTR SETA  &MSK2CTR+1
         AGO  .GETNEXT
.AOPTS5  ANOP
         AIF  ('&OPTCD(&NUM)'(1,&LEN) NE 'APPSTAT').AOPTS6
&APPSTAT SETB 1
&CNTINQ  SETA &CNTINQ+1
         AGO  .GETNEXT
.AOPTS6  ANOP
         AGO  .INVLDOP
.GETNEXT ANOP
&NUM     SETA  &NUM-1
         AIF   ('&NUM' NE '0').SETOPT
.* ********************************************************************
.*                      GENMSK SUBROUTINE
.* CHECKS FOR MUTUALLY EXCLUSIVE OPTIONS (OF OPTCD) AND GENERATES CODE
.* TO MODIFY THE OPTION BYTES IN THE RPL.  ISSUES MNOTES FOR MUTUALLY
.*                       EXCLUSIVE OPTIONS.
.* ********************************************************************
.GENMSK  ANOP
         AIF  ('&SYN' EQ '1' AND '&ASY' EQ '1').CNFLCT1
         AIF  ('&SYN' NE '1' AND '&ASY' NE '1').MODOPT
         AIF  ('&ASY' EQ '1').ASYSW
         NI    &PLOPTC1.(1),X'F7'     TURN OFF THE ASY BIT
         AGO   .MODOPT
.ASYSW   ANOP
         OI    &PLOPTC1.(1),X'08'     TURN ON THE ASY BIT
         AGO   .MODOPT
.CNFLCT1 ANOP
     MNOTE 0,'PARAMETERS SYN AND ASY CONFLICT BOTH DISREGARDED'
.MODOPT  ANOP
         AIF  ('&SPEC' EQ '1' AND '&ANY' EQ '1').CNFLCT2
.MODOPT2 ANOP
         AIF  ('&STOP' EQ '1' AND '&START' EQ '1').CNFLCT3
         AIF  ('&STOP' EQ '1' AND '&QUIESCE' EQ '1').CNFLCT3
         AIF  ('&QUIESCE' EQ '1' AND '&START' EQ '1').CNFLCT3
.MODOPT3 ANOP
         AIF  ('&CONV' EQ '1' AND '&NCONV' EQ '1').CNFLCT4
.MODOPT4 ANOP
         AIF  ('&PASS' EQ '1' AND '&RELEASE' EQ '1').CNFLCT5
.MODOPT5 ANOP
         AIF  ('&CA' EQ '1' AND '&CS' EQ '1').CNFLCT6
.MODOPT6 ANOP
         AIF  ('&ACCEPT' EQ '1' AND '&ACQUIRE' EQ '1').CNFLCT7
.MODOPT7 ANOP
         AIF  ('&Q' EQ '1' AND '&NQ' EQ '1').CNFLCT8
.MODOPT8 ANOP
         AIF  ('&RELRQ' EQ '1' AND '&NRELRQ' EQ '1').CNFLCT9
.MODOPT9 ANOP
         AIF  ('&ERASE' EQ '1' AND '&EAU' EQ '1').CNFLCTB
         AIF  ('&ERASE' EQ '1' AND '&NERASE' EQ '1').CNFLCTB
         AIF  ('&EAU' EQ '1' AND '&NERASE' EQ '1').CNFLCTB
.MODOPTB ANOP
         AIF  ('&BLK' EQ '1' AND '&LBM' EQ '1').CNFLCTC
         AIF  ('&BLK' EQ '1' AND '&LBT' EQ '1').CNFLCTC
         AIF  ('&LBM' EQ '1' AND '&LBT' EQ '1').CNFLCTC
.MODOPTC ANOP
         AIF  ('&LOCK' EQ '1' AND '&COND' EQ '1').CNFLCTD
         AIF  ('&LOCK' EQ '1' AND '&UNCOND' EQ '1').CNFLCTD
         AIF  ('&COND' EQ '1' AND '&UNCOND' EQ '1').CNFLCTD
.MODOPTD ANOP
         AIF  ('&CONALL' EQ '1' AND '&CONANY' EQ '1').CNFLCTE
.MODOPTE ANOP
         AIF  ('&PEND' EQ '1' AND '&SESSION' EQ '1').CNFLCTF
         AIF  ('&PEND' EQ '1' AND '&ACTIVE' EQ '1').CNFLCTF
         AIF  ('&PEND' EQ '1' AND '&UNCONDL' EQ '1').CNFLCTF
         AIF  ('&ACTIVE' EQ '1' AND '&SESSION' EQ '1').CNFLCTF
         AIF  ('&ACTIVE' EQ '1' AND '&UNCONDL' EQ '1').CNFLCTF
         AIF  ('&SESSION' EQ '1' AND '&UNCONDL' EQ '1').CNFLCTF
.MODOPTF ANOP
         AIF  ('&CNTINQ' EQ '0' ).MODOPTG
         AIF  ('&CNTINQ' GT '1' ).CNFLCTG
&LGONMS1 SETB  0
&DEVCHR1 SETB  0
&TERMS1  SETB  0
&APSTAT1 SETB  0
&COUNTS1 SETB  0
&RNNAME1 SETB  0
&CIDXLT1 SETB  0
&TOPLGN1 SETB  0
&BSCID1  SETB  0
&DISPLY1 SETB  0
&SPARM1  SETB  0
&MSK3CTR SETA  &MSK3CTR+1
&MSK4CTR SETA  &MSK4CTR+1
.MODOPTG ANOP
.* *************** VTL ADDITIONS ****************
         AIF  ('&KEEP' EQ '1' AND '&TRUNC' EQ '1').CNFLCTI
         AIF  ('&KEEP' EQ '1' AND '&NIBTK' EQ '1').CNFLCTI
         AIF  ('&TRUNC' EQ '1' AND '&NIBTK' EQ '1').CNFLCTI
.MODOPTI ANOP
         AIF  ('&NFMHDR' EQ '1' AND '&FMHDR' EQ '1').CNFLCTK
.MODOPTK ANOP
.* ************ END VTL ADDITIONS ***************
         AGO   .CKDONE
.CNFLCT2 ANOP
&OPTERR  SETA  &OPTERR+1
   MNOTE 0,'PARAMETERS SPEC AND ANY CONFLICT BOTH DISREGARDED'
         AGO   .MODOPT3
.CNFLCT3 ANOP
&OPTERR  SETA  &OPTERR+1
   MNOTE 0,'PARAMETERS STOP AND-OR START AND-OR QUIESCE'
   MNOTE 0,'        CONFLICT, ALL DISREGARDED     '
         AGO   .MODOPT3
.CNFLCT4 ANOP
&OPTERR  SETA  &OPTERR+1
   MNOTE 0,'PARAMETERS CONV AND NCONV CONFLICT BOTH DISREGARDED'
         AGO   .MODOPT4
.CNFLCT5 ANOP
&OPTERR  SETA  &OPTERR+1
   MNOTE 0,'PARAMETERS PASS AND RELEASE CONFLICT BOTH DISREGARDED'
         AGO   .MODOPT5
.CNFLCT6 ANOP
&OPTERR  SETA  &OPTERR+1
   MNOTE 0,'PARAMETERS CA AND CS CONFLICT BOTH DISREGARDED'
         AGO   .MODOPT6
.CNFLCT7 ANOP
&OPTERR  SETA  &OPTERR+1
   MNOTE 0,'PARAMETERS ACCEPT AND-OR ACQUIRE CONFLICT, ALL DISREGARDED'
         AGO   .MODOPT7
.CNFLCT8 ANOP
&OPTERR  SETA  &OPTERR+1
   MNOTE 0,'PARAMETERS Q AND NQ CONFLICT BOTH DISREGARDED'
         AGO   .MODOPT8
.CNFLCT9 ANOP
&OPTERR  SETA  &OPTERR+1
   MNOTE 0,'PARAMETERS RELRQ AND NRELRQ CONFLICT BOTH DISREGARDED'
         AGO   .MODOPT9
.CNFLCTB ANOP
&OPTERR  SETA  &OPTERR+1
   MNOTE 0,'PARAMETERS ERASE AND-OR EAU AND-OR NERASE'
   MNOTE 0,'        CONFLICT, ALL DISREGARDED     '
         AGO   .MODOPTB
.CNFLCTC ANOP
&OPTERR  SETA  &OPTERR+1
   MNOTE 0,'PARAMETERS BLK AND-OR LBM AND-OR LBT'
   MNOTE 0,'        CONFLICT, ALL DISREGARDED     '
         AGO   .MODOPTC
.CNFLCTD ANOP
&OPTERR  SETA  &OPTERR+1
   MNOTE 0,'PARAMETERS LOCK AND-OR COND AND-OR UNCOND'
   MNOTE 0,'        CONFLICT, ALL DISREGARDED     '
         AGO   .MODOPTD
.CNFLCTE ANOP
&OPTERR  SETA  &OPTERR+1
   MNOTE 0,'PARAMETERS CONALL AND CONANY CONFLICT, BOTH DISREGARDED '
         AGO   .MODOPTE
.CNFLCTF ANOP
&OPTERR  SETA  &OPTERR+1
  MNOTE 0,'PARAMETERS PEND AND-OR SESSION AND-OR ACTIVE AND-OR UNCONDL'
  MNOTE 0,'        CONFLICT, ALL DISREGARDED     '
         AGO   .MODOPTF
.CNFLCTG ANOP
&OPTERR  SETA  &OPTERR+1
  MNOTE 0,'TWO OR MORE OF THE FOLLOWING PARAMETERS WERE SPECIFIED'
  MNOTE 0,'LOGONMSG, DEVCHAR, TERMS, APPSTAT, COUNTS, RNNAME, CIDXLATE'
  MNOTE 0,'TOPLOGON, BSCID, DISPLAY, SESSPARM, -   ALL DISREGARDED'
        AGO   .MODOPTG
.* *************** VTL ADDITIONS ****************
.CNFLCTI ANOP
&OPTERR  SETA  &OPTERR+1
   MNOTE 0,'PARAMETERS KEEP AND-OR TRUNC AND-OR NIBTK CONFLICT,'
   MNOTE 0,'       ALL DISREGARDED      '
          AGO  .MODOPTI
.CNFLCTK ANOP
&OPTERR  SETA  &OPTERR+1
   MNOTE 0,'PARAMETERS NFMHDR AND FMHDR CONFLICT, BOTH DISREGARDED'
         AGO  .MODOPTK
.* ************ END VTL ADDITIONS ***************
.CKDONE  ANOP
    AIF  ('&OPTCD' EQ '(SYN)' OR '&OPTCD' EQ '(ASY)').GOSET
    AIF  ('&OPTCD' EQ 'SYN' OR '&OPTCD' EQ 'ASY').GOSET
         AGO  .GOSET1
.GOSET   ANOP
&NUM     SETA N'&OPTCD
         AIF  ('&NUM' EQ '1').CKSEQNO
.GOSET1  ANOP
    AIF  ('&OPTERR' GT '0').SETERR
    AIF  ('&MSK1CTR' GT '0' AND '&MSK2CTR' GT '0').GOSET2
    AIF  ('&MSK1CTR' GT '0').GOSET2A
    AIF  ('&MSK2CTR' GT '0').GOSET2B
.GOSET34 ANOP
    AIF  ('&MSK3CTR' GT '0' AND '&MSK4CTR' GT '0').GOSET3
    AIF  ('&MSK3CTR' GT '0').GOSET3A
    AIF  ('&MSK4CTR' GT '0').GOSET3B
    AGO  .CKSEQNO
.GOSET2  ANOP
         B     *+12
.OPTMSK1 ANOP
         DC    B'&CS&BIT0&PASS&NERASE&EAU&ERASE&ANY&CONV'
         DC    B'&BLK&LBM&LBT&COND&UNCOND&LOCK&BIT0&BIT0'
         DC    B'&CONALL&CONANY&BIT0&Q&BIT0&RELRQ&BIT0&BIT0'
         DC    B'&ACQUIRE&ACCEPT&BIT0&PEND&SESSION&ACTIVE&UNCONDL&BIT0'
.OPTMSK2 ANOP
         DC    B'&CS1&BIT01&PASS1&NERASE1&EAU1&ERASE1&ANY1&CONV1'
         DC    B'&BLK1&LBM1&LBT1&COND1&UNCOND1&LOCK1&BIT01&BIT01'
         DC    B'&CONALL1&CONANY1&BIT01&NQ1&BIT01&NRELRQ1&BIT01&BIT01'
         DC    B'&ACQUIR1&ACCEPT1&BIT01&PEND1&SESION1&ACTIVE1&UNCNDL1&BX
               IT01'
         NC    &POPTCD2.(4,1),*-4   TURN OFF UNNECESSARY OPTCD SWITCHES
         OC    &POPTCD2.(4,1),*-14  TURN ON NEW SET OF OPTCD SWITCHES
         AGO   .GOSET34
.GOSET2A ANOP
         B     *+8
.OPT1MSK ANOP
         DC    B'&CS&BIT0&PASS&NERASE&EAU&ERASE&ANY&CONV'
         DC    B'&BLK&LBM&LBT&COND&UNCOND&LOCK&BIT0&BIT0'
         DC    B'&CONALL&CONANY&BIT0&Q&BIT0&RELRQ&BIT0&BIT0'
         DC    B'&ACQUIRE&ACCEPT&BIT0&PEND&SESSION&ACTIVE&UNCONDL&BIT0'
         OC    &POPTCD2.(4,1),*-4  TURN ON NEW SET OF OPTCD SWITCHES
         AGO   .GOSET34
.GOSET2B ANOP
         B     *+8
.OPT2MSK ANOP
         DC    B'&CS1&BIT01&PASS1&NERASE1&EAU1&ERASE1&ANY1&CONV1'
         DC    B'&BLK1&LBM1&LBT1&COND1&UNCOND1&LOCK1&BIT01&BIT01'
         DC    B'&CONALL1&CONANY1&BIT01&NQ1&BIT01&NRELRQ1&BIT01&BIT01'
         DC    B'&ACQUIR1&ACCEPT1&BIT01&PEND1&SESION1&ACTIVE1&UNCNDL1&BX
               IT01'
         NC    &POPTCD2.(4,1),*-4   TURN OFF UNNECESSARY OPTCD SWITCHES
         AGO   .GOSET34
.GOSET3  ANOP
         B     *+12
.OPTMSK3 ANOP
         DC    B'&LGONMSG&DEVCHAR&TERMS&COUNTS&APPSTAT&RNNAME&CIDXLAT&TX
               OPLGON'
         DC    B'&BSCID&DISPLAY&SPARM&BIT0&BIT0&BIT0&BIT0&BIT0'
         DC    B'&QUIESCE&START&STOP&BIT0&BIT0&BIT0&BIT0&BIT0'
.* *************** VTL ADDITIONS ****************
         DC    B'&BIT0&KEEP&TRUNC&NIBTK&BIT0&BIT0&BIT0&FMHDR'
.* ************ END VTL ADDITIONS ***************
.OPTMSK4 ANOP
         DC    B'&LGONMS1&DEVCHR1&TERMS1&COUNTS1&APSTAT1&RNNAME1&CIDXLTX
               1&TOPLGN1'
         DC    B'&BSCID1&DISPLY1&SPARM1&BIT01&BIT01&BIT01&BIT01&BIT01'
         DC    B'&QUIESC1&START1&STOP1&BIT01&BIT01&BIT01&BIT01&BIT01'
.* *************** VTL ADDITIONS ****************
         DC    B'&BIT01&KEEP1&TRUNC1&NIBTK1&BIT01&BIT01&BIT01&FMHDR1'
.* ************ END VTL ADDITIONS ***************
         NC    &POPTCD3.(4,1),*-4   TURN OFF UNNECESSARY OPTCD SWITCHES
         OC    &POPTCD3.(4,1),*-14  TURN ON NEW SET OF OPTCD SWITCHES
         AGO   .CKSEQNO
.GOSET3A ANOP
         B     *+8
.OPT3MSK ANOP
         DC    B'&LGONMSG&DEVCHAR&TERMS&COUNTS&APPSTAT&RNNAME&CIDXLAT&TX
               OPLGON'
         DC    B'&BSCID&DISPLAY&SPARM&BIT0&BIT0&BIT0&BIT0&BIT0'
         DC    B'&QUIESCE&START&STOP&BIT0&BIT0&BIT0&BIT0&BIT0'
.* *************** VTL ADDITIONS ****************
         DC    B'&BIT0&KEEP&TRUNC&NIBTK&BIT0&BIT0&BIT0&FMHDR'
.* ************ END VTL ADDITIONS ***************
         OC    &POPTCD3.(4,1),*-4  TURN ON NEW SET OF OPTCD SWITCHES
         AGO   .CKSEQNO
.GOSET3B ANOP
         B     *+8
.OPT4MSK ANOP
         DC    B'&LGONMS1&DEVCHR1&TERMS1&COUNTS1&APSTAT1&RNNAME1&CIDXLTX
               1&TOPLGN1'
         DC    B'&BSCID1&DISPLY1&SPARM1&BIT01&BIT01&BIT01&BIT01&BIT01'
         DC    B'&QUIESC1&START1&STOP1&BIT01&BIT01&BIT01&BIT01&BIT01'
.* *************** VTL ADDITIONS ****************
         DC    B'&BIT01&KEEP1&TRUNC1&NIBTK1&BIT01&BIT01&BIT01&FMHDR1'
.* ************ END VTL ADDITIONS ***************
         NC    &POPTCD3.(4,1),*-4   TURN OFF UNNECESSARY OPTCD SWITCHES
         AGO   .CKSEQNO
.* *************** VTL ADDITIONS ****************
.SETERR  ANOP
   MNOTE 0,'**********************************************************'
   MNOTE 0,'**           CONFLICTING OPTCD OPTIONS WERE             **'
   MNOTE 0,'**     SPECIFIED NO RPL OPTCD PARAMETER MANIPULATIVE    **'
   MNOTE 0,'**           INSTRUCTIONS WILL BE PRODUCED              **'
   MNOTE 0,'**********************************************************'
.* ********************************************************************
.*                       MDFYRECD SUBROUTINE
.* VALIDITY CHECKS AND GENERATES CODE FOR RECORD MODE RPL OPTIONS.
.* INVOKES THE FOLLOWING SUBROUTINES: MDFYRESP, MDFYCHN, MDFYCTRL,
.* MDFYRH3, MDFYSSNS, MDFYRTYP, MDFYIBSQ, MDFYOBSQ, AND OPTSCAN.
.* ********************************************************************
.CKSEQNO ANOP
         AIF   ('&SEQNO' EQ '').CKIBSQV IS THERE A SEQ. NO. PARM?
         AIF   ('&SEQNO'(1,1) NE '(').CKSEQN1    REGISTER NOTATION?
         STH   &SEQNO(1),&PLSEQNO.(1)   PUT SEQ. NO. IN THE RPL
         AGO   .CKIBSQV
.CKSEQN1 ANOP
&CHAR1   SETC  '&SEQNO'(1,2)
&LEN     SETA  K'&SEQNO
&CHAR2   SETC  '&SEQNO'(&LEN,1)
         AIF   ('&CHAR1' EQ 'C''').IHBCKQ2
         AIF   ('&CHAR1' EQ 'X''').IHBCKQ2
         AIF   ('&CHAR1' EQ 'H''').IHBCKQ2
         AIF   ('&CHAR1' EQ 'F''').IHBCKQ2
         AIF   ('&CHAR1' EQ 'A(').IHBCKP2
         AIF   ('&CHAR1' EQ 'Y(').IHBCKP2
         AIF   ('&CHAR1' EQ 'S(').IHBCKP2
         AIF   ('&CHAR1' LT '0').IHBERU2
         AIF   ('&CHAR1' LE '9').IHBNUM2
         AIF   ('&CHAR1' LT '00').IHBERU2
.IHBNUM2 ANOP
         B     *+6
         DC    AL2(&SEQNO)         SEQUENCE NUMBER SPECIFIED AS NUMERIC
         AGO   .CKSEQN2
.IHBERU2 MNOTE 0,'SEQNO=&SEQNO INVALID - IGNORED'
         AGO   .CKIBSQV
.IHBCKP2 AIF   ('&CHAR2' EQ ')').IHBGOP2
         AGO   .IHBERQ2
.IHBCKQ2 AIF   ('&CHAR2' EQ '''').IHBGOP2
.IHBERQ2 MNOTE 0,SEQNO=&SEQNO INVALID - IGNORED'
         MNOTE 0,'CHECK FOR UNBALANCED PARENTHESES OR APOSTROPHES'
         AGO   .CKIBSQV
.IHBGOP2  ANOP
&CHAR3   SETC  '&SEQNO'(3,&LEN-3)
&CHAR4   SETC  '&CHAR1'(2,1)
&CHAR1   SETC  '&CHAR1'(1,1)
         B     *+6
         DC    &CHAR1.L2&CHAR4&CHAR3&CHAR2   SEQUENCE NUMBER FIELD
.CKSEQN2 ANOP
         LH    15,*-2                   GET SEQUENCE NUMBER
         STH   15,&PLSEQNO.(1)          PUT SEQUENCE NUMBER IN THE RPL
.CKIBSQV ANOP
         AIF   ('&IBSQVAL' EQ '').CKOBSQV  STSN INBOUND SEQ. NO.?
         AIF   ('&IBSQVAL'(1,1) NE '(').CKIBSV1  REGISTER NOTATION?
         STH   &IBSQVAL(1),&PLIBSQV.(1) PUT STSN INBOUND SEQ NO IN RPL
         AGO   .CKOBSQV
.CKIBSV1 ANOP
&CHAR1   SETC  '&IBSQVAL'(1,2)
&LEN     SETA  K'&IBSQVAL
&CHAR2   SETC  '&IBSQVAL'(&LEN,1)
         AIF   ('&CHAR1' EQ 'C''').IHBCKQ3
         AIF   ('&CHAR1' EQ 'X''').IHBCKQ3
         AIF   ('&CHAR1' EQ 'H''').IHBCKQ3
         AIF   ('&CHAR1' EQ 'F''').IHBCKQ3
         AIF   ('&CHAR1' EQ 'A(').IHBCKP3
         AIF   ('&CHAR1' EQ 'Y(').IHBCKP3
         AIF   ('&CHAR1' EQ 'S(').IHBCKP3
         AIF   ('&CHAR1' LT '0').IHBERU3
         AIF   ('&CHAR1' LE '9').IHBNUM3
         AIF   ('&CHAR1' LT '00').IHBERU3
.IHBNUM3 ANOP
         B     *+6
         DC    AL2(&IBSQVAL)       INBOUND SEQ NO SPECIFIED AS NUMERIC
         AGO   .CKIBSV2
.IHBERU3 MNOTE 0,'IBSQVAL=&IBSQVAL INVALID - IGNORED'
         AGO   .CKOBSQV
.IHBCKP3 AIF   ('&CHAR2' EQ ')').IHBGOP3
         AGO   .IHBERQ3
.IHBCKQ3 AIF   ('&CHAR2' EQ '''').IHBGOP3
.IHBERQ3 MNOTE 0,IBSQVAL=&IBSQVAL INVALID - IGNORED'
         MNOTE 0,'CHECK FOR UNBALANCED PARENTHESES OR APOSTROPHES'
         AGO   .CKOBSQV
.IHBGOP3  ANOP
         B     *+6
&CHAR3   SETC  '&IBSQVAL'(3,&LEN-3)
&CHAR4   SETC  '&CHAR1'(2,1)
&CHAR1   SETC  '&CHAR1'(1,1)
         DC    &CHAR1.L2&CHAR4&CHAR3&CHAR2   INBOUND SEQ NO FIELD
.CKIBSV2 ANOP
         LH    15,*-2                   GET STSN INBOUND SEQ NO
         STH   15,&PLIBSQV.(1)          PUT STSN INBOUND SEQ NO IN RPL
.CKOBSQV ANOP
         AIF   ('&OBSQVAL' EQ '').CKRESPO    STSN OUTBOUND SEQ. NO.?
         AIF   ('&OBSQVAL'(1,1) NE '(').CKOBSV1   REGISTER NOTATION?
         STH   &OBSQVAL(1),&PLOBSQV.(1) PUT STSN OUTBOUND SEQ NO IN RPL
         AGO   .CKRESPO
.CKOBSV1  ANOP
&CHAR1   SETC  '&OBSQVAL'(1,2)
&LEN     SETA  K'&OBSQVAL
&CHAR2   SETC  '&OBSQVAL'(&LEN,1)
         AIF   ('&CHAR1' EQ 'C''').IHBCKQ4
         AIF   ('&CHAR1' EQ 'X''').IHBCKQ4
         AIF   ('&CHAR1' EQ 'H''').IHBCKQ4
         AIF   ('&CHAR1' EQ 'F''').IHBCKQ4
         AIF   ('&CHAR1' EQ 'A(').IHBCKP4
         AIF   ('&CHAR1' EQ 'Y(').IHBCKP4
         AIF   ('&CHAR1' EQ 'S(').IHBCKP4
         AIF   ('&CHAR1' LT '0').IHBERU4
         AIF   ('&CHAR1' LE '9').IHBNUM4
         AIF   ('&CHAR1' LT '00').IHBERU4
.IHBNUM4 ANOP
         B     *+6
         DC    AL2(&OBSQVAL)      OUTBOUND SEQ NO SPECIFIED AS NUMERIC
         AGO   .CKOBSV2
.IHBERU4 MNOTE 0,'OBSQVAL=&OBSQVAL INVALID - IGNORED'
         AGO   .CKRESPO
.IHBCKP4 AIF   ('&CHAR2' EQ ')').IHBGOP4
         AGO   .IHBERQ4
.IHBCKQ4 AIF   ('&CHAR2' EQ '''').IHBGOP4
.IHBERQ4 MNOTE 0,OBSQVAL=&OBSQVAL INVALID - IGNORED'
         MNOTE 0,'CHECK FOR UNBALANCED PARENTHESES OR APOSTROPHES'
         AGO   .CKRESPO
.IHBGOP4  ANOP
&CHAR3   SETC  '&OBSQVAL'(3,&LEN-3)
&CHAR4   SETC  '&CHAR1'(2,1)
&CHAR1   SETC  '&CHAR1'(1,1)
         B     *+6
         DC    &CHAR1.L2&CHAR4&CHAR3&CHAR2   OUTBOUND SEQ NO FIELD
.CKOBSV2 ANOP
         LH    15,*-2                   GET STSN OUTBOUND SEQ NO
         STH   15,&PLOBSQV.(1)         PUT STSN OUTBOUND SEQ NO IN RPL
.* ********************************************************************
.*                      MDFYRESP SUBROUTINE
.* INVOKES OPTSCAN TO CHECK FOR INVALID RESPOND OPTIONS.  GENERATES
.* CODE TO MODIFY THE RESPOND FIELD IN THE RPL AND MNOTES WHEN MUTUALLY
.*                EXCLUSIVE OPTIONS ARE SPECIFIED
.* ********************************************************************
.CKRESPO ANOP
         AIF ('&RESPOND' EQ '').CKPOST  RESPOND OPTION SPECIFIED?
.* SET PARAMETERS FOR OPTSCAN SUBROUTINE
&IHBTBL(1)  SETC  'NEX'
&IHBTBL(2)  SETC  'EX'
&IHBTBL(3)  SETC  'FME'
&IHBTBL(4)  SETC  'NFME'
&IHBTBL(5)  SETC  'NRRN'
&IHBTBL(6)  SETC  'RRN'
&IHBNUM  SETA  6
         IHBRDWRA SCANOPT=&RESPOND,OPTION=RESPOND     GO TO OPTSCAN
.CKRESP1 ANOP                           RETURN FROM OPTSCAN
         AIF   (&IHBRPLY(1) OR &IHBRPLY(2)).CKRESP2     NEX OR EX?
         AIF   (&IHBRPLY(3) OR &IHBRPLY(4)).CKRESP4     FME OR NFME?
         AIF   (&IHBRPLY(5) OR &IHBRPLY(6)).CKRESP6     NRRN OR RRN?
         AGO   .CKPOST                 NO VALID OPTIONS SPECIFIED
.CKRESP2 ANOP
         AIF   (&IHBRPLY(1) AND &IHBRPLY(2)).RSPERR1    NEX AND EX?
         AIF   (&IHBRPLY(1)).CKRESP3    NEX SPECIFIED
         OI    &PLVTFL2.(1),X'04'          SET RPLEX ON (RESPOND=EX)
         AGO   .CKRESP4
.CKRESP3 ANOP
         NI    &PLVTFL2.(1),X'FB'          SET RPLEX OFF (RESPOND=NEX)
.CKRESP4 ANOP
         AIF   (&IHBRPLY(3) AND &IHBRPLY(4)).RSPERR2    FME AND NFME?
         AIF   (&IHBRPLY(3)).CKRESP5    FME SPECIFIED
         AIF   (&IHBRPLY(4) EQ 0).CKRESP6   NFME NOT SPECIFIED
         OI    &PLVTFL2.(1),X'02'         SET RPLNFME ON (RESPOND=NFME)
         AGO   .CKRESP6
.CKRESP5 ANOP
         NI    &PLVTFL2.(1),X'FD'         SET RPLNFME OFF (RESPOND=FME)
.CKRESP6 ANOP
         AIF   (&IHBRPLY(5) AND &IHBRPLY(6)).RSPERR3    RRN AND NRRN?
         AIF   (&IHBRPLY(5)).CKRESP7    NRRN SPECIFIED
         AIF   (&IHBRPLY(6) EQ 0).CKPOST   RRN NOT SPECIFIED
         OI    &PLVTFL2.(1),X'01'         SET RPLRRN ON (RESPOND=RRN)
         AGO   .CKPOST
.CKRESP7 ANOP
         NI    &PLVTFL2.(1),X'FE'         SET RPLRRN OFF (RESPOND=NRRN)
         AGO   .CKPOST
.RSPERR1 MNOTE  0,'EX AND NEX SPECIFIED FOR ''RESPOND'' - BOTH IGNORED'
         AGO   .CKRESP4
.RSPERR2 MNOTE  0,'FME AND NFME SPECIFIED FOR RESPOND - BOTH IGNORED'
         AGO   .CKRESP6
.RSPERR3 MNOTE  0,'RRN AND NRRN SPECIFIED FOR RESPOND - BOTH IGNORED'
.CKPOST  ANOP
         AIF   ('&POST' EQ '').CKCHAIN  IS THERE A POST PARM?
         AIF   ('&POST' EQ 'SCHED').PSTSKED
         AIF   ('&POST' EQ 'RESP').PSTRESP
         MNOTE 0,'POST=&POST INVALID--IGNORED'
         AGO   .CKCHAIN
.PSTSKED ANOP
         OI    &PLVTFL2.(1),X'80'     SET RPLSCHED FLAG ON (POST=SCHED)
         AGO   .CKCHAIN
.PSTRESP ANOP
         NI    &PLVTFL2.(1),X'7F'     SET RPLSCHED FLAG OFF (POST=RESP)
.* ********************************************************************
.*                        MDFYCHN SUBROUTINE
.* GENERATES CODE TO MODIFY THE CHAIN FIELD IN THE RPL.  ISSUES MNOTES
.* FOR BOTH MUTUALLY EXCLUSIVE AND INVALID OPTIONS.
.* ********************************************************************
.CKCHAIN ANOP
         AIF   ('&CHAIN' EQ '').CKCTRL  CHAIN OPTION SPECIFIED?
         AIF   ('&CHAIN' EQ 'FIRST').CKCHN1
         AIF   ('&CHAIN' EQ 'MIDDLE').CKCHN2
         AIF   ('&CHAIN' EQ 'LAST').CKCHN3
         AIF   ('&CHAIN' EQ 'ONLY').CKCHN4
         MNOTE 0,'CHAIN=&CHAIN INVALID - IGNORED'
         AGO   .CKCTRL
.CKCHN1  ANOP
         OI    &PLCHN.(1),X'80'         SET RPLFIRST ON (CHAIN=FIRST)
         NI    &PLCHN.(1),X'8F'         SET OTHER BITS IN FIELD OFF
         AGO   .CKCTRL
.CKCHN2  ANOP
         OI    &PLCHN.(1),X'40'         SET RPLMIDLE ON (CHAIN=MIDDLE)
         NI    &PLCHN.(1),X'4F'         SET OTHER BITS IN FIELD OFF
         AGO   .CKCTRL
.CKCHN3  ANOP
         OI    &PLCHN.(1),X'20'         SET RPLLAST ON (CHAIN=LAST)
         NI    &PLCHN.(1),X'2F'         SET OTHER BITS IN FIELD OFF
         AGO   .CKCTRL
.CKCHN4  ANOP
         OI    &PLCHN.(1),X'10'         SET RPLONLY ON (CHAIN=ONLY)
         NI    &PLCHN.(1),X'1F'         SET OTHER BITS IN FIELD OFF
.* ********************************************************************
.*                       MDFYCTRL SUBROUTINE
.* GENERATES CODE TO MODIFY THE CONTROL FIELD (RPLCNTRL) IN THE RPL.
.* ISSUES MNOTE FOR INVALID OPTION.
.* ********************************************************************
.CKCTRL ANOP
         AIF   ('&CONTROL' EQ '').CKCDIR   CONTROL OPTION SPECIFIED?
         XC    &PLCNTRL.(3,1),&PLCNTRL.(1) SET CONTROL CODES OFF
         AIF   ('&CONTROL' NE 'DATA').CKCTRL1
         OI    &PLCNTDF.(1),X'80'       SET RPLDATA ON (CONTROL=DATA)
         AGO   .CKCDIR
.CKCTRL1 ANOP
         AIF   ('&CONTROL' NE 'CANCEL').CKCTRL2
         OI    &PLCNTDF.(1),X'40'      SET RPLCNCEL ON (CONTROL=CANCEL)
         AGO   .CKCDIR
.CKCTRL2 ANOP
         AIF   ('&CONTROL' NE 'QC').CKCTRL3
         OI    &PLCNTDF.(1),X'20'       SET RPLQC ON (CONTROL=QC)
         AGO   .CKCDIR
.CKCTRL3 ANOP
         AIF   ('&CONTROL' NE 'QEC').CKCTRL4
         OI    &PLCNTDF.(1),X'10'      SET RPLQEC ON (CONTROL=QEC)
         AGO   .CKCDIR
.CKCTRL4 ANOP
         AIF   ('&CONTROL' NE 'CHASE').CKCTRL5
         OI    &PLCNTDF.(1),X'08'      SET RPLCHASE ON (CONTROL=CHASE)
         AGO   .CKCDIR
.CKCTRL5 ANOP
         AIF   ('&CONTROL' NE 'RELQ').CKCTRL7
         OI    &PLCNTDF.(1),X'04'      SET RPLRELQ ON (CONTROL=RELQ)
         AGO   .CKCDIR
.CKCTRL7 ANOP
         AIF   ('&CONTROL' NE 'SDT').CKCTRL8
         OI    &PLCNTSC.(1),X'80'      SET RPLSDT ON (CONTROL=SDT)
         AGO   .CKCDIR
.CKCTRL8 ANOP
         AIF   ('&CONTROL' NE 'CLEAR').CKCTRL9
         OI    &PLCNTSC.(1),X'40'      SET RPLCLEAR ON (CONTROL=CLEAR)
         AGO   .CKCDIR
.CKCTRL9 ANOP
         AIF   ('&CONTROL' NE 'STSN').CKCTRLA
         OI    &PLCNTSC.(1),X'20'      SET RPLSTSN ON (CONTROL=STSN)
         AGO   .CKCDIR
.CKCTRLA ANOP
         AIF   ('&CONTROL' NE 'SHUTD').CKCTRLC
         OI    &PLCNTSC.(1),X'10'      SET RPLSHUTD (CONTROL=SHUTD)
         AGO   .CKCDIR
.CKCTRLC ANOP
         AIF   ('&CONTROL' NE 'RQR').CKCTRLD
         OI    &PLCNTSC.(1),X'04'      SET RPLRQR ON (CONTROL=RQR)
         AGO   .CKCDIR
.CKCTRLD ANOP
         AIF   ('&CONTROL' NE 'BID').CKCTRLE
         OI    &PLCNTDC.(1),X'80'      SET RPLBID ON (CONTROL=BID)
         AGO   .CKCDIR
.CKCTRLE ANOP
         AIF   ('&CONTROL' NE 'LUS').CKCTRLF
         OI    &PLCNTDC.(1),X'20'      SET RPLLUS ON (CONTROL=LUS)
         AGO   .CKCDIR
.CKCTRLF ANOP
         AIF   ('&CONTROL' NE 'SIGNAL').CKCTRLG
         OI    &PLCNTDC.(1),X'10'      SET RPLSIGNL ON (CONTROL=SIGNAL)
         AGO   .CKCDIR
.CKCTRLG ANOP
         MNOTE 0,'CONTROL=&CONTROL INVALID - DATA ASSUMED'
         OI    &PLCNTDF.(1),X'80'       SET RPLDATA ON (DEFAULT)
.* ********************************************************************
.*                     MDFYRH3 SUBROUTINE
.*  INVOKES OPTSCAN SUBROUTINE TO CHECK FOR INVALID CHNGDIR & BRACKET
.*  OPTIONS.  GENERATES CODE TO MODIFY THE CHNGDIR FIELD AND BRACKET
.*             FIELD (RPLRH3) IN THE RPL.
.* ********************************************************************
.CKCDIR  ANOP
         AIF ('&CHNGDIR' EQ '').CKBRCKT  RESPOND OPTION SPECIFIED?
.* SET PARAMETERS FOR OPTSCAN SUBROUTINE
&IHBTBL(1)  SETC  'NCMD'
&IHBTBL(2)  SETC  'CMD'
&IHBTBL(3)  SETC  'NREQ'
&IHBTBL(4)  SETC  'REQ'
&IHBNUM  SETA  4
         IHBRDWRA  SCANOPT=&CHNGDIR,OPTION=CHNGDIR   GO TO OPTSCAN
.CKCDIR1 ANOP                           RETURN FROM OPTSCAN
         AIF   (&IHBRPLY(1) OR &IHBRPLY(2)).CKCDIR2     NCMD OR CMD?
         AIF   (&IHBRPLY(3) OR &IHBRPLY(4)).CKCDIR4     NREQ OR REQ?
         MNOTE  0,'CHANGDIR=&CHNGDIR - INVALID IGNORED'
         AGO   .CKBRCKT                 NO VALID OPTIONS SPECIFIED
.CKCDIR2 ANOP
         AIF   (&IHBRPLY(1) AND &IHBRPLY(2)).CDIRER1   NCMD AND CMD?
         AIF   (&IHBRPLY(1)).CKCDIR3    NCMD SPECIFIED
         OI    &PLRH3.(1),X'20'          SET RPLCMD ON (CHNGDIR=CMD)
         AGO   .CKCDIR4
.CKCDIR3 ANOP
         NI    &PLRH3.(1),X'DF'          SET RPLCMD OFF (CHNGDIR=NCMD)
.CKCDIR4 ANOP
         AIF   (&IHBRPLY(3) AND &IHBRPLY(4)).CDIRER2   NREQ AND REQ?
         AIF   (&IHBRPLY(3)).CKCDIR5    NREQ SPECIFIED
         AIF   (&IHBRPLY(4) EQ 0).CKBRCKT   REQ NOT SPECIFIED
         OI    &PLRH3.(1),X'10'         SET RPLCHREQ ON (CHNGDIR=REQ)
         AGO   .CKBRCKT
.CKCDIR5 ANOP
         NI    &PLRH3.(1),X'EF'         SET RPLCHREQ OFF (CHNGDIR=NREQ)
         AGO   .CKBRCKT
.CDIRER1 MNOTE  0,'CMD AND NCMD SPECIFIED FOR CHNGDIR - BOTH IGNORED'
         AGO   .CKCDIR4
.CDIRER2 MNOTE  0,'REQ AND NREQ SPECIFIED FOR CHNGDIR - BOTH IGNORED'
.CKBRCKT ANOP
         AIF ('&BRACKET' EQ '').CKSSNS  RESPOND OPTION SPECIFIED?
.* SET PARAMETERS FOR OPTSCAN SUBROUTINE
&IHBTBL(1) SETC  'NBB'
&IHBTBL(2) SETC  'BB'
&IHBTBL(3) SETC  'NEB'
&IHBTBL(4) SETC  'EB'
&IHBNUM  SETA  4
         IHBRDWRA  SCANOPT=&BRACKET,OPTION=BRACKET   GO TO OPTSCAN
.CKBRCK1 ANOP                           RETURN FROM OPTSCAN
         AIF   (&IHBRPLY(1) OR &IHBRPLY(2)).CKBRCK2     NBB OR BB?
         AIF   (&IHBRPLY(3) OR &IHBRPLY(4)).CKBRCK4     NEB OR EB?
         MNOTE  0,'BRACKET=&BRACKET - INVALID IGNORED'
         AGO   .CKSSNS                 NO VALID OPTIONS SPECIFIED
.CKBRCK2 ANOP
         AIF   (&IHBRPLY(1) AND &IHBRPLY(2)).CBRKER1   NBB AND BB?
         AIF   (&IHBRPLY(1)).CKBRCK3     NBB SPECIFIED
         OI    &PLRH3.(1),X'80'          SET RPLBB ON (BRACKET=BB)
         AGO   .CKBRCK4
.CKBRCK3 ANOP
         NI    &PLRH3.(1),X'7F'          SET RPLBB OFF (BRACKET=NBB)
.CKBRCK4 ANOP
         AIF   (&IHBRPLY(3) AND &IHBRPLY(4)).CBRKER2   NEB AND EB?
         AIF   (&IHBRPLY(3)).CKBRCK5       NEB SPECIFIED
         AIF   (&IHBRPLY(4) EQ 0).CKSSNS   EB NOT SPECIFIED
         OI    &PLRH3.(1),X'40'         SET RPLEB ON (BRACKET=EB)
         AGO   .CKSSNS
.CKBRCK5 ANOP
         NI    &PLRH3.(1),X'BF'         SET RPLEB OFF (BRACKET=NEB)
         AGO   .CKSSNS
.CBRKER1 MNOTE  0,'BB AND NBB SPECIFIED FOR BRACKET - BOTH IGNORED'
         AGO   .CKBRCK4
.CBRKER2 MNOTE  0,'EB AND NEB SPECIFIED FOR BRACKET - BOTH IGNORED'
.* ********************************************************************
.*                     MDFYSSNS SUBROUTINE
.*      GENERATES CODE TO MODIFY THE SSENSEO FIELD (RPLSSNSO)
.*      FIELD IN THE RPL.  ISSUES MNOTE FOR INVALID OPTIONS.
.* ********************************************************************
.CKSSNS  ANOP
         AIF ('&SSENSEO' EQ '').CKRTYP  SENSE OUTPUT OPTION SPECIFIED?
         AIF ('&SSENSEO' EQ 'CPM').CKSSNS1
         AIF ('&SSENSEO' EQ 'STATE').CKSSNS2
         AIF ('&SSENSEO' EQ 'FI').CKSSNS3
         AIF ('&SSENSEO' EQ 'RR').CKSSNS4
         AIF ('&SSENSEO' EQ '0' ).CKSSNS5                      @ZA43509
         MNOTE 0,'SSENSEO=&SSENSEO INVALID - IGNORED'
         AGO   .CKRTYP
.CKSSNS1 ANOP
         MVI   &PLSSEO.(1),X'40'        SET RPLCPMO ON (SSENSEO=CPM)
         AGO   .CKRTYP
.CKSSNS2 ANOP
         MVI   &PLSSEO.(1),X'20'        SET RPLSTATO ON (SSENSEO=STATE)
         AGO   .CKRTYP
.CKSSNS3 ANOP
         MVI   &PLSSEO.(1),X'10'        SET RPLFIO ON (SSENSEO=FI)
         AGO   .CKRTYP
.CKSSNS4 ANOP
         MVI   &PLSSEO.(1),X'08'        SET RPLRRO ON (SSENSEO=RR)
         AGO   .CKRTYP                                         @ZA43509
.CKSSNS5 ANOP                                                  @ZA43509
         MVI   &PLSSEO.(1),X'00'        SET RPLRRO ON (SSENSEO=0)
.* ********************************************************************
.*                 MDFYRTYP SUBROUTINE
.* INVOKES OPTSCAN SUBROUTINE TO CHECK FOR INVALID RTYPE OPTIONS.
.* GENERATES CODE TO MODIFY THE RTYPE FIELD (RPLRTYPE) FIELD IN THE
.* RPL.  ISSUES MNOTES FOR MUTUALLY EXCLUSIVE OPTIONS.
.* ********************************************************************
.CKRTYP  ANOP
         AIF ('&RTYPE' EQ '').CKIBSQ       RTYPE OPTION SPECIFIED?
.* SET PARAMETERS FOR OPTSCAN SUBROUTINE
&IHBTBL(1)  SETC  'NRESP'
&IHBTBL(2)  SETC  'RESP'
&IHBTBL(3)  SETC  'NDFSYN'
&IHBTBL(4)  SETC  'DFSYN'
&IHBTBL(5)  SETC  'NDFASY'
&IHBTBL(6)  SETC  'DFASY'
&IHBNUM  SETA  6
         IHBRDWRA  OPTION=RTYPE,SCANOPT=&RTYPE   GO TO OPTSCAN
.CKRTYP1 ANOP                           RETURN FROM OPTSCAN
         AIF   (&IHBRPLY(1) OR &IHBRPLY(2)).CKRTYP2    NRESP OR RESP?
         AIF   (&IHBRPLY(3) OR &IHBRPLY(4)).CKRTYP4    NDFSYN OR DFSYN?
         AIF   (&IHBRPLY(5) OR &IHBRPLY(6)).CKRTYP6    DFASY OR NDFASY?
         AGO   .CKIBSQ                 NO VALID OPTIONS SPECIFIED
.CKRTYP2 ANOP
         AIF   (&IHBRPLY(1) AND &IHBRPLY(2)).RTYERR1    NRESP AND RESP?
         AIF   (&IHBRPLY(1)).CKRTYP3    NRESP SPECIFIED
         OI    &PLSRTYP.(1),X'08'        SET RPLRRESP ON (RTYPE=RESP)
         AGO   .CKRTYP4
.CKRTYP3 ANOP
         NI    &PLSRTYP.(1),X'F7'       SET RPLRRESP OFF (RTYPE=NRESP)
.CKRTYP4 ANOP
         AIF   (&IHBRPLY(3) AND &IHBRPLY(4)).RTYERR2  NDFSYN AND DFSYN?
         AIF   (&IHBRPLY(3)).CKRTYP5    NDFSYN SPECIFIED
         AIF   (&IHBRPLY(4) EQ 0).CKRTYP6   DFSYN NOT SPECIFIED
         NI    &PLSRTYP.(1),X'FB'      SET RPLNFSYN OFF (RTYPE=DFSYN)
         AGO   .CKRTYP6
.CKRTYP5 ANOP
         OI    &PLSRTYP.(1),X'04'      SET RPLNFSYN ON (RTYPE=NDFSYN)
.CKRTYP6 ANOP
         AIF   (&IHBRPLY(5) AND &IHBRPLY(6)).RTYERR3  NDFASY AND DFASY?
         AIF   (&IHBRPLY(5)).CKRTYP7    NDFASY SPECIFIED
         AIF   (&IHBRPLY(6) EQ 0).CKIBSQ   DFASY NOT SPECIFIED
         OI    &PLSRTYP.(1),X'02'      SET RPLDFASY ON (RTYPE=DFASY)
         AGO   .CKIBSQ
.CKRTYP7 ANOP
         NI    &PLSRTYP.(1),X'FD'      SET RPLDFASY OFF (RTYPE=NDFASY)
         AGO   .CKIBSQ
.RTYERR1 MNOTE  0,'NRESP AND RESP SPECIFIED FOR RTYPE - BOTH IGNORED'
         AGO   .CKRTYP4
.RTYERR2 MNOTE  0,'NDFSYN AND DFSYN SPECIFIED FOR RTYPE - BOTH IGNORED'
         AGO   .CKRTYP6
.RTYERR3 MNOTE  0,'DFASY AND NDFASY SPECIFIED FOR RTYPE - BOTH IGNORED'
.* *******************************************************************
.*                   MDFYIBSQ SUBROUTINE
.* GENERATES CODE TO MODIFY THE IBSQAC FIELD (RPLIBSQ) IN THE RPL.
.* ISSUES MNOTES FOR INVALID OPTIONS OR IF MORE THAN ONE OPTION IS
.*                        SPECIFIED.
.* *******************************************************************
.CKIBSQ  ANOP
         AIF   ('&IBSQAC' EQ '').CKOBSQ   IBSQAC OPTION SPECIFIED?
         AIF   ('&IBSQAC' EQ 'SET').CKIBSQ2
         AIF   ('&IBSQAC' EQ 'TESTSET').CKIBSQ3
         AIF   ('&IBSQAC' EQ 'RESET').CKIBSQ4
         AIF   ('&IBSQAC' EQ 'IGNORE').CKIBSQ5
         AIF   ('&IBSQAC' EQ 'TESTPOS').CKIBSQ6
         AIF   ('&IBSQAC' EQ 'TESTNEG').CKIBSQ7
         AIF   ('&IBSQAC' EQ 'INVALID').CKIBSQ8
         MNOTE 0,'IBSQAC=&IBSQAC INVALID - IGNORED'
         AGO   .CKOBSQ
.CKIBSQ2 ANOP
         MVI   &PLIBSQ.(1),X'80'        SET RPLISET ON (IBSQAC=SET)
         AGO   .CKOBSQ
.CKIBSQ3 ANOP
         MVI   &PLIBSQ.(1),X'40'        SET RPLITST ON (IBSQAC=TESTSET)
         AGO   .CKOBSQ
.CKIBSQ4 ANOP
         MVI   &PLIBSQ.(1),X'20'        SET RPLIRSET ON (IBSQAC=RESET)
         AGO   .CKOBSQ
.CKIBSQ5 ANOP
         MVI   &PLIBSQ.(1),X'10'        SET RPLIIGN ON (IBSQAC=IGNORE)
         AGO   .CKOBSQ
.CKIBSQ6 ANOP
         MVI   &PLIBSQ.(1),X'08'        SET RPLIPOS ON (IBSQAC=TESTPOS)
         AGO   .CKOBSQ
.CKIBSQ7 ANOP
         MVI   &PLIBSQ.(1),X'04'        SET RPLINEG ON (IBSQAC=TESTNEG)
         AGO   .CKOBSQ
.CKIBSQ8 ANOP
         MVI   &PLIBSQ.(1),X'02'        SET RPLIINV ON (IBSQAC=INVALID)
.* *******************************************************************
.*                   MDFYOBSQ SUBROUTINE
.* GENERATES CODE TO MODIFY THE 0BSQAC FIELD (RPLOBSG) IN THE RPL.
.* ISSUES MNOTES FOR INVALID OPTIONS OR IF MORE THAN ONE OPTION IS
.*                        SPECIFIED.
.* *******************************************************************
.CKOBSQ  ANOP
         AIF   ('&OBSQAC' EQ '').CKUSENS  OBSQAC OPTION SPECIFIED?
         AIF   ('&OBSQAC' EQ 'SET').CKOBSQ2
         AIF   ('&OBSQAC' EQ 'TESTSET').CKOBSQ3
         AIF   ('&OBSQAC' EQ 'RESET').CKOBSQ4
         AIF   ('&OBSQAC' EQ 'IGNORE').CKOBSQ5
         AIF   ('&OBSQAC' EQ 'TESTPOS').CKOBSQ6
         AIF   ('&OBSQAC' EQ 'TESTNEG').CKOBSQ7
         AIF   ('&OBSQAC' EQ 'INVALID').CKOBSQ8
         MNOTE 0,'OBSQAC=&OBSQAC INVALID - IGNORED'
         AGO   .CKUSENS
.CKOBSQ2 ANOP
         MVI   &PLOBSQ.(1),X'80'        SET RPLOSET ON (OBSQAC=SET)
         AGO   .CKUSENS
.CKOBSQ3 ANOP
         MVI   &PLOBSQ.(1),X'40'        SET RPLOTST ON (OBSQAC=TESTSET)
         AGO   .CKUSENS
.CKOBSQ4 ANOP
         MVI   &PLOBSQ.(1),X'20'        SET RPLORSET ON (OBSQAC=RESET)
         AGO   .CKUSENS
.CKOBSQ5 ANOP
         MVI   &PLOBSQ.(1),X'10'        SET RPLOIGN ON (OBSQAC=IGNORE)
         AGO   .CKUSENS
.CKOBSQ6 ANOP
         MVI   &PLOBSQ.(1),X'08'        SET RPLOPOS ON (OBSQAC=TESTPOS)
         AGO   .CKUSENS
.CKOBSQ7 ANOP
         MVI   &PLOBSQ.(1),X'04'        SET RPLONEG ON (OBSQAC=TESTNEG)
         AGO   .CKUSENS
.CKOBSQ8 ANOP
         MVI   &PLOBSQ.(1),X'02'        SET RPLOINV ON (OBSQAC=INVALID)
.* ********************************************************************
.*               CONTINUATION OF MDFYRECD SUBROUTINE
.*              (TO CHECK USENSEO AND STYPE OPERANDS)
.* ********************************************************************
.CKUSENS ANOP
         AIF   ('&USENSEO' EQ '').CKSIGDA IS THERE A USER SENSE PARM?
         AIF   ('&USENSEO'(1,1) NE '(').CKUSEN1    REGISTER NOTATION?
         STH   &USENSEO(1),&PLUSNSO.(1)   PUT USER SENSE IN THE RPL
         AGO   .CKSIGDA
.CKUSEN1 ANOP
&CHAR1   SETC  '&USENSEO'(1,2)
&LEN     SETA  K'&USENSEO
&CHAR2   SETC  '&USENSEO'(&LEN,1)
         AIF   ('&CHAR1' EQ 'C''').IHBCKQ5
         AIF   ('&CHAR1' EQ 'X''').IHBCKQ5
         AIF   ('&CHAR1' EQ 'H''').IHBCKQ5
         AIF   ('&CHAR1' EQ 'F''').IHBCKQ5
         AIF   ('&CHAR1' EQ 'A(').IHBCKP5
         AIF   ('&CHAR1' EQ 'Y(').IHBCKP5
         AIF   ('&CHAR1' EQ 'S(').IHBCKP5
         AIF   ('&CHAR1' LT '0').IHBERU5
         AIF   ('&CHAR1' LE '9').IHBNUM5
         AIF   ('&CHAR1' LT '00').IHBERU5
.IHBNUM5 ANOP
         B     *+6
         DC    AL2(&USENSEO)      USER SENSE BYTE SPECIFIED AS NUMERIC
         AGO   .CKUSEN2
.IHBERU5 MNOTE 0,'USENSEO=&USENSEO INVALID - IGNORED'
         AGO   .CKSIGDA
.IHBCKP5 AIF   ('&CHAR2' EQ ')').IHBGOP5
         AGO   .IHBERQ5
.IHBCKQ5 AIF   ('&CHAR2' EQ '''').IHBGOP5
.IHBERQ5 MNOTE 0,USENSEO=&USENSEO INVALID - IGNORED'
         MNOTE 0,'CHECK FOR UNBALANCED PARENTHESES OR APOSTROPHES'
         AGO   .CKSIGDA
.IHBGOP5  ANOP
&CHAR3   SETC  '&USENSEO'(3,&LEN-3)
&CHAR4   SETC  '&CHAR1'(2,1)
&CHAR1   SETC  '&CHAR1'(1,1)
         B     *+6
         DC    &CHAR1.L2&CHAR4&CHAR3&CHAR2   USER SENSE BYTE FIELD
.CKUSEN2 ANOP
         LH    15,*-2                   GET USER SENSE BYTE
         STH   15,&PLUSNSO.(1)          PUT USER SENSE BYTE IN THE RPL
.CKSIGDA ANOP
         AIF   ('&SIGDATA' EQ '').CKSTYPE IS THERE SIGNAL DATA?
         AIF   ('&SIGDATA'(1,1) NE '(').CKSIGN1    REGISTER NOTATION?
         ST    &SIGDATA(1),&PLSIGDA.(1)   PUT SIGNAL DATA IN THE RPL
         AGO   .CKSTYPE
.CKSIGN1 ANOP
&CHAR1   SETC  '&SIGDATA'(1,2)
&LEN     SETA  K'&SIGDATA
&CHAR2   SETC  '&SIGDATA'(&LEN,1)
         AIF   ('&CHAR1' EQ 'C''').IHBCKQ6
         AIF   ('&CHAR1' EQ 'X''').IHBCKQ6
         AIF   ('&CHAR1' EQ 'H''').IHBCKQ6
         AIF   ('&CHAR1' EQ 'F''').IHBCKQ6
         AIF   ('&CHAR1' EQ 'A(').IHBCKP6
         AIF   ('&CHAR1' EQ 'Y(').IHBCKP6
         AIF   ('&CHAR1' EQ 'S(').IHBCKP6
         AIF   ('&CHAR1' LT '0').IHBERU6
         AIF   ('&CHAR1' LE '9').IHBNUM6
         AIF   ('&CHAR1' LT '00').IHBERU6
.IHBNUM6 ANOP
         B     *+8
         DC    AL4(&SIGDATA)      SIGNAL DATA SPECIFIED AS NUMERIC
         AGO   .CKSIGN2
.IHBERU6 MNOTE 0,'SIGDATA=&SIGDATA INVALID - IGNORED'
         AGO   .CKSTYPE
.IHBCKP6 AIF   ('&CHAR2' EQ ')').IHBGOP6
         AGO   .IHBERQ6
.IHBCKQ6 AIF   ('&CHAR2' EQ '''').IHBGOP6
.IHBERQ6 MNOTE 0,'SIGDATA=&SIGDATA INVALID - IGNORED'
         MNOTE 0,'CHECK FOR UNBALANCED PARENTHESES OR APOSTROPHES'
         AGO   .CKSTYPE
.IHBGOP6  ANOP
&CHAR3   SETC  '&SIGDATA'(3,&LEN-3)
&CHAR4   SETC  '&CHAR1'(2,1)
&CHAR1   SETC  '&CHAR1'(1,1)
         B     *+8
         DC    &CHAR1.L4&CHAR4&CHAR3&CHAR2   SIGNAL DATA FIELD
.CKSIGN2 ANOP
         L     15,*-4                   GET SIGNAL DATA
         ST    15,&PLSIGDA.(1)          PUT SIGNAL DATA IN THE RPL
.CKSTYPE ANOP
         AIF   ('&STYPE' EQ '').CKSENMO IS THERE AN STYPE PARM?
         AIF   ('&STYPE' EQ 'REQ').CKSTYP1
         AIF   ('&STYPE' EQ 'RESP').CKSTYP2
         MNOTE 0,'STYPE=&STYPE INVALID - IGNORED'
         AGO   .CKSENMO
.CKSTYP1 ANOP
         NI    &PLSRTYP.(1),X'7F'       SET RPLSRESP OFF (STYPE=REQ)
         AGO   .CKSENMO
.CKSTYP2 ANOP
         OI    &PLSRTYP.(1),X'80'       SET RPLSRESP ON (STYPE=RESP)
.CKSENMO ANOP
         AIF   ('&SSENSMO' EQ '').CKBRNCH IS THERE A USER SENSE PARM?
         AIF   ('&SSENSMO'(1,1) NE '(').CKSSEM1    REGISTER NOTATION?
         STC   &SSENSMO,&PLSSMO.(1)   PUT USER SENSE IN THE RPL
         AGO   .CKBRNCH
.CKSSEM1 ANOP
         MVI   &PLSSMO.(1),&SSENSMO   PUT USER SENSE IN THE RPL
.* *************** END VTL ADDITIONS **********************
.CKBRNCH ANOP
         AIF   ('&BRANCH' EQ '').GENLBL1 IS THERE AN BRANCH PARAMETER?
         AIF   ('&BRANCH'(1,3) EQ 'YES').BRYES  REGISTER NOTATION?
         AIF   ('&BRANCH'(1,2) EQ 'NO').BRNO  REGISTER NOTATION?
         MNOTE 0,'BRANCH=&BRANCH IS NOT A VALID PARAMETER - IGNORED'
         AGO   .GENLBL1
.BRYES   ANOP
         OI    &PLEXTDS.(1),X'02'     SET BRANCH ENTRY BIT ON
         AGO   .GENLBL1
.BRNO    ANOP
         NI    &PLEXTDS.(1),X'FD'     SET BRANCH ENTRY BIT OFF
.GENLBL1 ANOP
IHB&SYSNDX  EQU   *
.GENREQ  ANOP
         AIF   ('&IHBRW' NE '').OKIBRW  IS THERE AN IHBRW PARAMETER?
         MNOTE 4,'IHBRW= WAS NOT SPECIFIED'
         SR    0,0                   IHBRW NOT SPECIFIED OR INVALID
         AGO   .ENDRTN
.OKIBRW  ANOP
         LA    0,&IHBRW                        LOAD REQUEST CODE
.ENDRTN  ANOP
         L     15,&PLDACB.(1)        GET ADDRESS OF ACB
         L     15,&ACBRTN.(15)       GET ADDRESS OF INTERFACE RTN
         BALR  14,15                 GO TO THE INTERFACE ROUTINE
         MEXIT
.NORPL   ANOP
         MNOTE 12,'RPL= WAS NOT SPECIFIED'
         MEXIT
.* *************** VTL ADDITIONS ****************
.* ********************************************************************
.*                          OPTSCAN SUBROUTINE
.* SCANS ANY SET OF OPTIONS AGAINST A TABLE OF VALID VALUES AND SETS
.* BITS IN A REPLY FIELD FOR EACH VALID OPTION FOUND.  GENERATES AN
.* MNOTE FOR EACH OPTION NOT IN THE TABLE OR SPECIFIED MORE THAN ONCE.
.* THE CALLING SUBROUTINE MUST CHECK TO SEE IF MUTUALLY EXCLUSIVE
.* OPTIONS HAVE BEEN SPECIFIED SINCE OPTSCAN CANNOT.  THE CALLING
.* SUBROUTINE MUST PASS THE VALID VALUES FOR THE OPTION TO BE CHECKED
.* IN THE ORDER IN WHICH THE REPLY BITS ARE TO BE SET (LEFT-TO RIGHT)
.* IN A TABLE UNDER THE NAME '&IHBTBL' AND HAVE EACH ENTRY IN THE
.* TABLE IN AN EIGHT-BYTE FIELD PADDED TO THE RIGHT.  THE NUMBER OF
.* ENTRIES IN THE TABLE MUST BE IN A FIELD CALLED '&IHBNUM'.  THE
.* SUBROUTINE IS CALLED BY INVOKING IHBRDWRA RECURSIVELY USING THE
.* OPERANDS 'SCANOPT' TO PASS THE OPTIONS SPECIFIED BY THE USER AND
.* 'OPTION' TO INDICATE THE NAME OF THE PARAMETER WHOSE OPERANDS ARE
.* BEING VALIDATED.  THE OPTSCAN SUBROUTINE WILL SET THE BITS IN A
.* FIELD CALLED '&IHBRPLY' ON IF AN OPTION IS PRESENT, THE BITS BEING
.* REPRESENTED IN THE SAME LEFT-TO-RIGHT ORDER AS WERE THE ENTRIES
.*                    IN THE FIELD '&IHBTBL'.
.* ********************************************************************
.OPTSCAN ANOP
&NUM2    SETA  &IHBNUM
&NUM     SETA  &IHBNUM
&NM      SETA  N'&SCANOPT
.OPTSCN1 ANOP
&IHBRPLY(&NUM2)  SETB  0                LOOP TO INITIALIZE
&NUM2    SETA  &NUM2-1                    REPLY FIELD
         AIF   (&NUM2 GT 0).OPTSCN1
.OPTSCN2 ANOP
&LEN     SETA  K'&SCANOPT(&NM)      NUMBER OF CHARS IN VALUE
&OPT     SETC  '&SCANOPT(&NM)'
.OPTSCN3 ANOP
         AIF ('&OPT' NE '&IHBTBL(&NUM)'(1,&LEN)).RESCAN
         AIF   (&IHBRPLY(&NUM) EQ 0).SETBIT
         MNOTE 0,'&OPTION=&OPT SPECIFIED MORE THAN ONCE - ACCEPTED'
         AGO   .REINDEX
.SETBIT  ANOP
&IHBRPLY(&NUM)  SETB  1       TURN ON BIT IN REPLY FIELD
         AGO   .REINDEX
.RESCAN  ANOP
&NUM  SETA  &NUM-1    SET POINTER TO PREVIOUS ENTRY IN TABLE
         AIF   (&NUM GT 0).OPTSCN3
         MNOTE 0,'&OPTION=&OPT INVALID - IGNORED'
.REINDEX ANOP
&NUM     SETA  &IHBNUM
         AIF   (&NM EQ 1).OPTSCN4     ALL VALUES CHECKED
&NM      SETA  &NM-1                  DECREMENT VALUE COUNTER
         AGO   .OPTSCN2
.OPTSCN4 ANOP                     RETURN TO CALLING SUBROUTINE:
.* ************ END VTL ADDITIONS ***************
         MEND
