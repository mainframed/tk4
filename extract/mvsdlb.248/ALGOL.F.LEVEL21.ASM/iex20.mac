X20      TITLE 'IEX20 - ITAB MANIPULATION, ALGOL F'
*
*        COMPONENT ID - 360S-AL-531 ALGOL F COMPILER
*
*        FUNCTION/OPERATION -
*        EACH ITAB BLOCK IS SCANNED FOR DUPLICATE IDENTIFIERS
*        RELATIVE DISPLACEMENTS IN DSA IS ALLOCATED FOR ALL
*        IDENTIFIERS, EXCEPT PROCEDURES, LABELS AND SWITCHES
*        THE ITAB BLOCKS ARE WRITTEN IN PROGRAM BLOCK NUMBER
*        ORDER TO SYSUT3
*        THE ITAB BLOCKS ARE PRINTED ON SYSPRINT IN PROGRAM
*        BLOCK NUMBER ORDER AND WITH THE IDENTIFIERS IN
*        ALPHABETIC FORM WITHIN EACH BLOCK, IF THE OPTION
*        SOURCE IS SPECIFIED
*        CREATES PBTAB2
*
*        ENTRY POINT -
*        IEX20000 ITAB MANIPULATION - XCTL EP=IEX20
*
*        INPUT - THE ITAB BLOCKS ARE READ IN FROM SYSUT3
*
*        OUTPUT -
*        THE ITAB BLOCKS ARE WRITTEN TO SYSUT3 AND PRINTED ON
*        SYSPRINT IF THE OPTION SOURCE IS SPECIFIED
*
*        EXTERNAL ROUTINES - THE PRINT ROUTINE IN IEX00 IS USED
*
*        EXITS - NORMAL -
*        CONTROL IS GIVEN TO IEX21 XCTL EP=IEX21
*
*        EXITS - ERROR - N/A
*
*        TABLES/WORKAREA -
*        ATAB     - ADDR IS OF THE ITAB RECORDS IN PROGRAM BLOCK
*                   NUMBER ORDER
*        TRINTEXT - TRANSLATION OF INTERNAL CHARACTERS TO EBCDIC
*                   CHARACTERS
*        TAB      - PRINTING OF HEXADECIMAL DIGITS
*        WORK     - BUILDING THE PRINT ENTRIES
*
*        NOTES -
*        CHARACTER CODE DEPENDENCE
*        THE OUTPUT ON SYSPRINT -
*        THE IDENTIFIER NAME IS TRANSLATED BY MEANS OF TRINTEXT,
*        WHICH IS A CHARACTER TABLE
*        THE HEXADECIMAL PART IS TRANSLATED BY MEANS OF TAB
*        THE REMAINING PARTS DEPEND ON THE INTERNAL
*        REPRESENTATION OF THE EXTERNAL CHARACTER SET WHICH IS
*        EQUIVALENT TO THE ONE USED AT ASSEMBLY TIME
*        THE OPERATION OF THE OTHER PARTS OF THE PHASE DOES NOT
*        DEPEND UPON A PARTICULAR INTERNAL REPRESENTATION OF THE
*        EXTERNAL CHARACTER SET
*
IEX20000 CSECT
*
*        R1                       PBN
*        R2                       CALCULATIONS
*        R3                       PARAMETER FOR CONVERT ROUTINE
*        R3                       DOUBLE WORD POINTER
*        R4                       WORD POINTER
*        R5                       KEEPS TRACK OF WHEN TO PRINT
*        R5                       HALF WORD POINTER
*        R6                       BYTE POINTER
*        R7                       CURRENT IDENTIFIER
*        R8                       CURRENT BLOCKHEAD
*        R9                       SCANS FOR DUPLICATES
*        R10                      ARRAY STORAGE ALLOCATIONS
*        R11                      BASE REGISTER
*        R12                      RETURN FROM CONVERT, PRINT ROUTINE
*        R14                      PBN DURING PRINTING
*        R15
*
*        INITIALIZATION
*
*        GETMAIN FOR ITAB AND ATAB
*        FIRST ENTRY IN ATAB IS MADE ZERO IF NO PBN 0
*        PRINTING OF HEADING LINES IS INITIALIZED IF SOURCE SPECIFIED
*        FPLEN IS MADE 4 IF SHORT SPECIFIED OTHERWISE IT REMAINS 8
*
         IEXENTRY 'IEX20000 LEVEL 2.1 &SYSDATE &SYSTIME'
*
         USING IEX20000,R11
         LR    R11,R15
         USING WORKAREA,R13
         LA    R15,SLUT2               INTERUPT BEFORE GETMAIN
         ST    R15,ERET
         L     R1,ITAB20S              ITAB
         LA    R1,1024(,R1)            ATAB
         LR    R0,R1
*
         GETMAIN R,LV=(0)              GET ITAB ATAB AREAS
*
         LA    R15,SLUT
         ST    R15,ERET                INTERRUPT ADDR AFTER GETMAIN
         ST    R1,AREALOC
         ST    R1,AITAB                ITAB START LOCATION
         A     R1,ITAB20S
         ST    R1,ATABAD               ATAB START LOCATION
         SR    R2,R2                   ZERO REG FOR INIT VALUES
         ST    R2,KF0
         ST    R2,SAVEPB
         TM    COMPFLGS,PROC           A PB0 ?
         BO    INITIAL                 YES, BRANCH
         LA    R15,1                   NO, PROGRAM BLK 1 IS FIRST BLOCK
         ST    R15,SAVEPB
INITIAL  ST    R2,0(,R1)
         ST    R2,SAVE                 INITIALIZE WITH ZEROS
         MVC   SAVE1(16),SAVE
         STC   R2,BITS1                INITIALIZE SWITCHES
         LA    R10,PBTAB2
         ST    R10,APBTAB2             START ADDR OF PBTAB2
         TM    COMPFLGS+1,NSRCE        SOURCE SPECIFIED ?
         BO    INITIALA                NO
         MVI   LINCNT+1,255            FORCE HEADINGS TO BE PRINTED
         MVI   PAGEHD1C+1,C' '         BLANK FIRST HEADING LINE
         MVC   PAGEHD1C+2(109),PAGEHD1C+1
         MVC   PAGEHD2D(L'PAGEHD2D),PAGEHD1D  BLANK 2ND HEADING LINE
         MVC   PAGEHD3D(L'PAGEHD3D),PAGEHD1D  BLANK 3RD HEADING LINE
         MVC   PAGEHD1D+39(L'HEAD1),HEAD1
         MVC   PAGEHD2D(L'HEAD2),HEAD2
         MVC   PAGEHD3D(L'HEAD3),HEAD3
         BAL   R12,PRINTITB            INITIALIZE PRINTING FOR ITAB
INITIALA SR    R1,R1
         TM    COMPFLGS,LNG            LONG OR SHORT PRECISION
         BO    READBLK                 LONG, BRANCH
         MVI   FPLEN+1,4               SET SHORT FPLEN=4
*
*        SCAN FOR DUPLICATES
*
*        READS IN A NEW BLOCK
*        START ADDR IN R8 END ADDR IN AITAB
*        COMPARES EACH IDENTIFIER WITH ALL IDENTIFIERS FOLLOWING
*        IT IN THE BLOCK
*        IF TWO EQUAL FOUND AND IF NOT FIRST ONE IS A FORMAL
*        PARAMETER AND SECOND NOT E45 IS GENERATED
*        WHEN ALL IDENTIFIERS IN THE BLOCK HAVE BEEN CHECK THE
*        EXIT IS TO ALLOSTUR
*
READBLK  L     R12,AITAB               START ADDR OF NEW BLOCK
         L     R2,AUT3DCB              R2 -> SYSUT3 DCB
*
*        READ IN NEW BLOCK
*
         READ  UT3DECB,SF,(R2),(R12),'S'
*
         CHECK UT3DECB
*
         SR    R2,R2
         IC    R2,10(,R12)             GET NEW PBN
         SLA   R2,2
         L     R7,ATABAD
         ST    R12,0(R2,R7)            SAVE ADDR OF BLOCK IN ATAB
         LR    R8,R12
         MVC   LENCOUNT,0(R12)         GET LENTH OF BLOCK
         AH    R12,LENCOUNT
         ST    R12,AITAB               SAVE END ADDR OF BLOCK
         LR    R7,R8
         TM    8(R8),X'80'             BLOCK TYPE PROC ?
         BZ    SCANNXT                 NO
         LA    R7,22(,R8)              YES, SKIP CHECKING AGAINST
         B     SCANNXTA                TYPE PROCEDURE NAME
*
SCANNXT  LA    R7,11(,R7)
SCANNXTA C     R7,AITAB                ALL IDENTIFIERS CHECKED ?
         BE    ALLOSTOR                YES, GO TO ALLOCATE STORAGE
         CLI   5(R7),X'2B'             FOR HEAD OR CONT ENTRY ?
         BE    SCANNXT                 YES, SKIP CHECKING
         CLI   0(R7),0                 INVALID PROCEDURE NAME ?
         BE    SCANNXT                 YES, SKIP CHECKING
         LR    R9,R7
CHECKNXT LA    R9,11(,R9)
         C     R9,AITAB                ALL IDENT CHECKED AGAINST
         BE    SCANNXT                 THE ONE PROCESSED ?
         CLI   5(R9),X'2B'             FOR HEAD OR CONT ENTRY ?
         BE    CHECKNXT
         CLC   0(6,R9),0(R7)           COMPARE EACH IDENTIFIER AGAINST
*                                      ALL FOLLOWING INDENTIFIERS
*                                      IN THE BLOCK
         BNE   CHECKNXT
         TM    7(R7),X'30'             TWO EQUAL FOUND. PROCESSED
         BM    CHECKNAA                ONE FORMAL PARAMETER ?
         B     E43                     NO
*
CHECKNAA TM    7(R9),X'30'             COMPARED ONE IS FORMAL PARAM
         BM    E43                     YES
         B     CHECKNXT                NO
*
*        ALLOSTOR
*
*        ALLOCATES STORAGE FOR THE IDENTIFIERS
*        FOR A TYPE PROC BLOCK ALLOCATION STARTS AT 32 OTHERWISE
*        AT 24.
*        NO BLOCK MAY GET MORE THAN 4K ALLOCATED.
*        IT IS ALSO CHECKED THAT THERE IS NO PROC, STRING OR
*        SWITCH CALLED BY VALUE.
*        WHEN ALL DECLARATIONS IN THE BLOCK ARE PROCESSED R3-FPLEN
*        WILL BE PUT IN PBTAB2.
*        IF THERE ARE MORE BLOCKS TO BE PROCESSED THE EXIT IS TO
*        IDENTIFIER SCAN OTHERWISE TO WRITE ITAB.
*        FOUR POINTERS ARE USED -
*        R3 DOUBLE WORD POINTER
*        R4 WORD
*        R5 HALF WORD R6 BOOLEAN
*        R3 IS INCREASED BY FPLEN WHICH IS 8 FOR LONG, 4 FOR SHORT.
*        FOR LONG PRECISION ALL 4 POINTERS ARE USED
*        FOR SHORT R4 IS NEVER USED, WILL CONTAIN 0 ALL THE
*        TIME
*        REAL WILL BE ALLOCATED TO R3, 4 OR 8 BYTES.
*        INTEGER WILL GET R3 OR R4. R3 ALWAYS IF SHORT R4 IF
*        LONG AND R4 NOT ZERO.
*        OTHERWISE R3, IN WHICH CASE R4 WILL EQUAL R3+4 FOR THE
*        NEXT INTEGER.
*        BOOLEAN WILL GET R3, R4, R5 OR R6 IF LONG R3, R5 OR R6
*        IF SHORT.
*        FIRST BOOLEAN FOUND WILL GET EITHER R4 OR R3.
*        R5 IS THEN INITILIZED TO R4+2 OR R3+2
*        R6                       R4+1    R3+1
*        SECOND BOOLEND WILL GET THE VALUE OF R6 AND R6 WILL BE 0.
*        THIRD BOOLEAN WILL GET R5 AND R5 WILL BE 0 R6=R5+1.
*        FORTH BOOLEAN WILL GET R6 AND R6 WILL BE 0.
*        THIS WILL THEN BE REPEATED FOR EVERY FOUR BOOLEAN
*        IDENTIFIERS. ALL FORMAL PARAMETERS WILL GET THE R3 VALUE
*        AND R3 WILL BE INCREASED BY 8.
*        ARRAYS WILL GET R3 VALUE AND R3 WILL BE INCREASED BY
*        4(DIM+6)+X WHERE X IS 4 WHEN LONG PRECISION AND DIM IS
*        AN UNEVEN NUMBER, OTHERWISE X IS 0.
*        LABEL, SWITCH , PROCEDURE WILL NOT GET ANYTHING
*        EX. OF STORAGE ALLOCATION
*        LONG           SHORT
*        01234567       01234567  FP   FORMAL PARAMETER
*        FP             FP        R    REAL
*        FP             FP        INT  INTEGER
*        R              R   INT   B    BOOLEAN
*        INT INT        INT INT   NU   NOT USED SPACE
*        INT BBB        BBB R
*        R              INT R
*        INT NU
*        R
*
ALLOSTOR TM    8(R8),X'80'             THE BLOCK A TYPE PROCEDURE ?
         BZ    ALLOSTAA                NO
         LA    R3,32                   YES, SET DOUBLE WORD POINTER
         NI    8(R8),X'7F'             CLEAR TYPE PROCEDURE INDICATION
         B     STARTALL
*
ALLOSTAA LA    R3,24                   SET DOUBLE WORD POINTER
STARTALL SR    R4,R4                   SET ALL POINTERS TO ZERO
         SR    R5,R5
         SR    R6,R6
         LR    R7,R8                   GET FIRST VARIABLE
         B     GETNEXT
*
STORALLO AH    R3,FPLEN                INCREASE ALLOCATION POINTER
STORALLA C     R3,KF4095               HAS 4K BEEN ALLOCATED ALREADY ?
         BH    E44
GETNEXT  LA    R7,11(,R7)              GET NEXT VARIABLE
         STM   R3,R6,DPC               STORE ALL POINTERS
         C     R7,AITAB                ALL VARIABLES TAKEN CARE OF ?
         BE    LASTREC                 YES
         CLI   5(R7),X'2B'             FOR HEADING OR CONTINUATION ?
         BE    GETNEXT
         CLI   6(R7),X'91'             ALL PURPOSE IDENTIFIER ?
         BE    GETNEXT
         TM    7(R7),X'30'             FORMPARAM, DEK VAR OR CONST?
         BM    FORMPARM
         BZ    CONST
         TM    7(R7),X'03'             BOOLEAN VARIABLE ?
         BO    BOOLEAN
         TM    COMPFLGS,LNG            SHORT PRECISION ?
         BZ    REAL                    YES, ALLOCATE SAME FOR REAL AND
*                                      INTEGER
         TM    7(R7),X'01'             INTEGER OR REAL ?
         BO    INTEGER
REAL     MVC   9(2,R7),DPC+2           MOVE IN DISPLACEMENT
         B     STORALLO
*
INTEGER  LTR   R4,R4                   EMPTY HOLE LEFT FOR INTEGER ?
         BZ    INTEGERA                NO
         MVC   9(2,R7),WPC+2           YES, FILL THE HOLE AND MAKE
         LA    R4,0                    WORD POINTER= 0
         B     GETNEXT
*
INTEGERA MVC   9(2,R7),DPC+2           MOVE IN DOUBLEWORD PTR AND MAKE
         LA    R4,4(,R3)               WORDPTR POINT TD EMPTY HOLE NEXT
         B     STORALLO                TO IT
*
BOOLEAN  LTR   R6,R6                   SPACE LEFT NEXT TO PREV BOOL ?
         BZ    BOOLEANA                NO
         MVC   9(2,R7),BPC+2           YES, MOVE IN DISPLACEMENT
         SR    R6,R6                   MAKE BYTE POINTER 0
         B     GETNEXT
*
BOOLEANA LTR   R5,R5                   SPACE LEFT NEXT TO 2 PREV BOOL ?
         BZ    TESTWPA                 NO
         MVC   9(2,R7),HPC+2           YES, MOVE IN DISPLACEMENT
         LA    R6,1(,R5)               MAKE BYTE POINTER POINT TO NEXT
         SR    R5,R5                   HALFWORD POINTER 0
         B     GETNEXT                 FREE BYTE
*
TESTWPA  TM    COMPFLGS,LNG            SHORT PRECISION ?
         BZ    TAKEDP                  YES, DO NOT USE R4 POINTER
TESTWP   LTR   R4,R4                   R4 POINTER FREE ?
         BZ    TAKEDP                  NO, TAKE R3 POINTER INSTEAD
         MVC   9(2,R7),WPC+2           YES, USE R4 AS DISPLACEMENT
         LA    R6,1(,R4)               SET R5 AND R6
         LA    R5,2(,R4)               TO FREE BYTES IN WORD
         SR    R4,R4                   SET R4 TO ZERO
         B     GETNEXT
*
TAKEDP   MVC   9(2,R7),DPC+2           USE R3 AS DISPLACEMENT
         LA    R6,1(,R3)               SET R4, R5, R6 TO FREE BYTES
         LA    R5,2(,R3)               WITHIN THE DOUBLE WORD
         LA    R4,4(,R3)
         B     STORALLO
*
CONST    TM    7(R7),X'04'             FOR LABEL, STRING, PROCEDURE
         BZ    GETNEXT
         TM    7(R7),X'08'             DO NOT ALLOCATE ANY STORAGE
         BO    GETNEXT
         SR    R10,R10
         IC    R10,9(R7)
         SRA   R10,4                   FOR AN ARRAY
         LA    R10,6(,R10)             STORAGE NEEDED IS 4(DIM+6)+X
         SLA   R10,2
         OC    9(2,R7),DPC+2           OR IN THE DISP TO SAVE DIMENSION
         TM    COMPFLGS,LNG            X IS 4 IF LONG PRECISION
         BZ    CONSTAA
         TM    9(R7),X'10'             DIM IS AN UNEVEN NUMBER
         BZ    CONSTAA                 INCREASE IF NEEDED TO GET
         LA    R10,4(,R10)             ON DOUBLE WORD BOUNDARY
CONSTAA  LA    R3,0(R10,R3)
         B     STORALLA
*
FORMPARM TM    7(R7),X'03'             TYPE PARAMETER ?
         BZ    NOTTYPE                 NO
FORMPALL MVC   9(2,R7),DPC+2           MOVE IN DISPLACEMENT
         LA    R3,8(,R3)
         B     STORALLA
*
NOTTYPE  TM    7(R7),X'10'             CALL BY NAME ?
         BO    FORMPALL                YES
         TM    7(R7),X'03'             NO, CHECK IF VALUE CALL CORRECT
         BZ    NOTTYPEA
         B     FORMPALL
*
NOTTYPEA CLI   7(R7),X'28'             LABEL CALLED BY VALUE ?
         BE    FORMPALL
         B     E45                     PROC SWITCH OR STRING
*                                      CALLED BY VALUE
LASTREC  SR    R2,R2                   CONSTRUCT ENTRY OF PBTAB2
         IC    R2,10(,R8)              GET PBN
         SLA   R2,1
         L     R14,APBTAB2
         LA    R14,0(R2,R14)
         SH    R3,FPLEN                GET LAST BYTE USED
         STH   R3,0(,R14)
         L     R1,SAVEPB
         CH    R1,PBN                  ALL ITAB REC WRITTEN OUT ?
         LA    R1,1(,R1)
         ST    R1,SAVEPB
         BNE   READBLK                 NO
*
*        WRITITAB
*
*        WRITES THE ITAB RECORD TO SYSUT3 IN PROGRAM BLOCK NUMBER
*        ORDER
*        THE ADDR TO WHERE THE BLOCK IS GOING TO BE WRITTEN
*        IS PICKED UP FROM ATAB
*        IN EACH BLOCK THE LENGTH OF THE NEXT BLOCK IS INSERTED
*
WRITITAB L     R12,ATABAD              START OF ADDR TABLE
         L     R10,AUT3DCB             R10 -> SYSUT3 DCB ADDR
*
         CLOSE ((R10),REREAD),TYPE=T   GET TO START OF SYSUT3
*
         SR    R2,R2
         TM    COMPFLGS,PROC           IS THERE A PB0 ?
         BZ    ITLP2                   NO
ITABLOOP L     R10,0(,R12)             GET ADDR OF BLOCK
         L     R7,AUT3DCB              DCB ADDR
         L     R5,4(,R12)              GET ADDR OF NEXT BLOCK
         CH    R2,PBN                  LAST BLOCK ?
         BE    ITABLOOA                YES
         MVC   2(2,R10),0(R5)          INSERT LENGTH OF NEXT BLOCK
ITABLOOA MVC   LENCOUNT,0(R10)         GET LENGTH OF CURRENT BLOCK
         LH    R15,LENCOUNT
*
         WRITE PRCH4,SF,(R7),(R10),(R15)
*
         CHECK PRCH4
*
ITLP2    LA    R12,4(,R12)             GET ADDR OF NEXT BLOCK
         CH    R2,PBN                  ALL ITAB REC WRITTEN OUT ?
         LA    R2,1(,R2)
         BNE   ITABLOOP                NO
         B     ITABPRNT                YES
*
*        E43
*
*        GENERATES ERROR MESSAGE 45
*        RETURNS TO SCANNING FOR DUPLICATES
*
E43      BAL   R15,ERRNAME
         MVI   1(R10),X'2D'            E45
         B     SCANNXT
*
*        E45
*
*        GENERATER ERROR MESSAGE 47
*        RETURNS TO FORMPALL AS IF VAR WAS CORRECT
*
E45      BAL   R15,ERRNAME
         MVI   1(R10),X'2F'            E47
         B     FORMPALL
*
*        E44
*
*        GENERATES ERROR MESSAGE 214
*        RETURNS TO LASTREC TO TAKE NEXT BLOCK, IF ANY
*
E44      L     R3,SAVEPB
         BAL   R12,CONVERT             CONVERT PBN
         L     R10,NEXTERR
         LA    R12,7(,R10)             SPACE LEFT IN ERROR POOL ?
         C     R12,ENDPOOL
         BH    E0
         ST    R12,NEXTERR
         MVI   0(R10),X'87'            MOVE LENGTH AND BLANK SC INDIC
         MVI   1(R12),X'D6'            E214
         MVC   4(3,R10),SAVE+1         PBN
         B     LASTREC
*
*        ERRNAME
*
*        FINDS THE LENGTH OF THE VARIABLE IN ERROR, CHECKS FOR
*        ERRPOOL OVERFLOW, MOVES IN THE NAME OF THE VAR AND
*        LENGTH OF MESSAGE
*        RETURNS TO CALLING PROGRAM, E43 OR E44
*
ERRNAME  LA    R12,5
ERRNAMEC STC   R12,ERRNAMEA+3          UPDATE NEXT INSTRUCTION
ERRNAMEA CLI   0(R7),0                 FIND LENGTH OF NAME
         BNE   ERRNAMEB
         BCT   R12,ERRNAMEC
ERRNAMEB L     R9,NEXTERR
         LA    R9,5(R12,R9)
         C     R9,ENDPOOL              CHECK SPACE IN ERRORPOOL
         BH    E0
         L     R10,NEXTERR
         ST    R9,NEXTERR
         EX    R12,MOVE                INSERT NAME IN ERROR PATTERN
         LA    R12,5(,R12)
         STC   R12,0(,R10)
         OI    0(R10),X'80'            BLANK SC INDICATOR
         BR    R15
*
E0       LA    R12,NEXTERR
         MVI   0(R12),X'02'
         MVI   1(R12),X'D4'            E212
         ST    R12,NEXTERR
         B     SLUT
*
MOVE     MVC   4(1,R10),0(R7)
*
*        ITABPRNT
*
*        PRINTS ON SYSPRINT, IF SOURCE SPECIFIED, ALL VARIABLES
*        THE BLOCKS IN PBN NUMBER ORDER AND WITH THE VAR SORTED
*        WITHIN EACH BLOCK
*        R5 KEEPS TRACK OF WHEN PRINTING IS NEEDED, THE
*        INFORMATION ABOUT EACH VAR IS BUILT UP IN WORK AND THEN
*        TRANSFERRED TO PRINTAREA. WHEN 3 VAR HAVE BEEN PLACED IN
*        THE PRINTAREA THE LINES IS PRINTED
*        THE ADDR TO THE BLOCK IS TAKEN FROM ATAB
*        THE LENGTH IS TAKEN FROM THE FIRST 2 BYTES IN THE BLOCK
*        THE SURROUNDING PBN FROM PBTAB1
*        THE STARTING SC COUNTER FOR THE BLOCK FROM BYTE 6 AND 7
*        IN THE BLOCK
*        IF THE BLOCK DOES NOT CONTAIN ANY VAR ONLY THE PBN AND
*        SURROUNDING PBN ARE PRINTED
*        ALL HEAD ENTRIES, FOR AND CONT LINES ARE SKIPPED
*        EACH NEW BLOCK IS PRECEEDED BY A BLANK LINE
*        START ADDR OF THE BLOCK IS IN R8
*        END ADDR OF THE BLOCK IS IN AITAB, THIS ADDR WILL BE
*        R8+11 WHEN ALL VAR PROCESSED
*
ITABPRNT TM    COMPFLGS+1,NSRCE        SOURCE SPECIFIED ?
         BO    SLUT                    NO
         SR    R14,R14                 CLEAR REG
         TM    COMPFLGS,PROC           THERE A PB0 ?
         BO    GETPBA                  YES, PROCESS PB0, R14=0
GETPB    LA    R14,1(,R14)             INCREASE PBN
GETPBA   LR    R12,R14
         SLA   R12,2
         L     R8,ATABAD               GET ADDR OF NEW BLOCK
         L     R8,0(R12,R8)            VIA ATAB + 4 TIMES PBN
         MVC   LENCOUNT,0(R8)          GET LENGTH OF THE BLOCK
         LH    R12,LENCOUNT
         LA    R12,0(R12,R8)           GET END OF BLOCK
         ST    R12,AITAB               STORE END OF IT
         BAL   R12,PRINTITB            PRINT A BLANK LINE
         LR    R3,R14                  CONVERT PBN
         BAL   R12,CONVERT
         MVC   0(3,R1),SAVE+1          NEW PBN
         IC    R3,PBTAB1(R14)          CONVERT SURROUNDING PBN
         BAL   R12,CONVERT
         MVC   10(3,R1),SAVE+1         SURROUNDING PBN
         MVC   SCSAVE(2),6(R8)         CONVERT SC COUNTER TO DECIMAL
         LH    R12,SCSAVE
         CVD   R12,DOUBLE              STARTING SC OF BLOCK IS INSERTED
         UNPK  4(5,R1),DOUBLE
         OI    8(R1),X'F0'
         CLC   LENCOUNT,KA11           EMPTY BLOCK ?
         BNE   ITABPRNX                NO
         BAL   R12,PRINTITB            FOR AN EMPTY BLOCK PRINT
         B     ENDBLOCK                ONLY THE BLOCK NUMBERS
*
ITABPRNX SR    R5,R5
*
*        GETNVAR
*
*        LOOPS THROUGH BLOCK TO GET THE CURRENT LOWEST VARIABLE
*        EXITS TO ENDBLOCK WHEN ALL VAR IN THE BLOCK HAVE BEEN
*        PROCESSED, OTHERWISE TO TESTVAR
*
GETNVAR  LA    R7,11(,R8)              GET FIRST VAR AFTER HEADING
         LR    R10,R7
         C     R7,AITAB                ALL VAR PROCESSED ?
         BE    ENDBLOCK                YES
         CLI   5(R7),X'2B'             HEAD OR CONTINUATION LINE ?
         BE    ENDVAR2
TESTNXT  LA    R10,11(,R10)            GET NEXT VAR
         C     R10,AITAB               ALL VAR COMPARED ?
         BE    TESTVAR
         CLI   5(R10),X'2B'            HEAD OR CONTINUATION LINE ?
         BE    TESTNXT                 YES, SKIP THAT LINE
         CLC   0(6,R7),0(R10)          COMPARE CURRENT LOWEST - NEW ?
         BL    TESTNXT                 CURRENT LOWEST STILL LOW
         LR    R7,R10                  NO, SHIFT R7 TO NEW
         B     TESTNXT
*
*        TESTVAR
*
*        CHECKS THE INTERNAL NAME TO FIND TYPE AND MOVES
*        CHARACTERISTICS TO WORKAREA
*
TESTVAR  TM    6(R7),X'91'             ALL PURPOSE IDENTIFIER ?
         BO    ENDVAR                  YES
         TM    7(R7),X'03'             TYPE ?
         BO    BOL                     TYPE=BOOLEAN
         BZ    BOLA                    NOT TYPE
         TM    7(R7),X'01'             INTEGER OR REAL ?
         BZ    TESTVARA
         MVI   WORK+7,C'I'             INTEGER
         B     BOLA
*
TESTVARA MVI   WORK+7,C'R'             REAL
         B     BOLA
*
BOL      MVI   WORK+7,C'B'             BOOLEAN
BOLA     TM    7(R7),X'0C'
         BZ    TESTPROC
         BO    SWITCH
         TM    7(R7),X'08'             ARRAY OR LABEL ?
         BZ    ARRAY
         MVI   WORK+8,C'L'             LABEL
TESTPROC TM    7(R7),X'C0'
         BO    PROCEDUR
         BZ    FORMAL
         TM    7(R7),X'40'
         BZ    FORMAL
         MVI   WORK+11,C'C'            CODE PROCEDURE
         B     PROCEDUR
*
FORMAL   TM    7(R7),X'30'             SPECIFIED IDENTIFIER ?
         BO    ENDVAR
         BZ    ENDVAR
FORMALC  NI    BITS1,PROCOFF           RESET PROCEDURE BIT
         TM    6(R7),X'01'
         BZ    FORMALA
         MVI   WORK+8,C'T'             STRING
FORMALA  TM    7(R7),X'10'             NAME OR VALUE CALL ?
         BZ    FORMALB
         MVI   WORK+10,C'N'            NAME
         B     ENDVAR
*
FORMALB  MVI   WORK+10,C'V'            VALUE
         B     ENDVAR
*
SWITCH   MVI   WORK+8,C'S'             SWITCH
         B     CONVERT2                CONVERT NUMBER OF COMPONENTS
*
PROCEDUR MVI   WORK+9,C'P'             PROCEDURE
         OI    BITS1,PROCBIT           SET PROCEDURE BIT
         B     CONVERT2                CONVERT NUM OF PARAMETERS
*
ARRAY    MVI   WORK+9,C'A'             ARRAY
*
*        CONVERT2
*
*        ENTERED FOR PROCEDURE, ARRAY AND SWITCH CONVERTS THE
*        NUMBER OF PARAMETERS, DIMENSIONS OR COMPONENTS TO
*        DECIMAL FORM AND PUTS IT IN WORK
*        FOR ARRAY OR SWITCH THE COUNTER IS FIRST INCREASED BY
*        ONE TO GET THE REAL VALUE.
*
CONVERT2 TM    7(R7),X'30'
         BM    FORMALC
         IC    R3,9(,R7)
         SRA   R3,4                    SWITCH OR PROCEDURE
         TM    BITS1,PROCBIT           TEST IF PROC PARAMETERS
         BO    *+8                     YES
         LA    R3,1(,R3)               NO, INCREASE DIM COUNTER
         NI    BITS1,PROCOFF           TO GIVE CORRECT VALUE
         BAL   R12,CONVERT             CONVERT IT TO DECIMAL
         MVC   WORK+13(2),SAVE+2       AND MOVE IT OUT
         B     FORMAL
*
*        CONVERT
*
*        CONVERTS FROM HEXADECIMAL TO DECIMAL
*        USED FOR LN, DISP AND PBN TO BE WRITEN OUT
*
CONVERT  CVD   R3,DOUBLE               CONVERT TO DECIMAL
         UNPK  SAVE(4),DOUBLE+5(3)     UNPACK
         OI    SAVE+3,X'F0'            MAKE PRINTABLE
         BR    R12                     RETURN
*
*        PRINTITB
*        PRINTS A LINE, SAVES NEW PRINTAREA ADDR, RESETS R5
*
PRINTITB STM   R14,R15,SAVE1
         L     R15,PRTRTADD            PRINT A RECORD
         BALR  R14,R15
         ST    R1,APRNTAR              SAVE ADDR OF NEXT PRINT AREA
         LM    R14,R15,SAVE1
         SR    R5,R5                   RESET R5
         BR    R12                     RETURN
*
*        ENDVAR
*
*        MOVES EXTERNAL NAME TO WORK, TRANSLATES IT
*        CONVERTS LN OR DISP AND MOVES THAT TO WORK
*        MOVES WORK TO CURRENT PRINTAREA WITH AN EXECUTE MVC
*        INCREASES R5 AND CHECKS IF ONE LINE HAS BEEN FILLED UP
*        IN THAT CASE - PRINTS THAT LINE
*        SHIFTS AWAY THE NOW PROCESSED VAR AND STORES THE NEW
*        ENDING ADDR OF THE BLOCK IN AITAB
*        RETURNS TO PROCESS NEXT VAR
*
ENDVAR   MVC   WORK(6),0(R7)           MOVE EXTERNAL NAME
         TR    WORK(6),TRINTEXT
         MVC   SAVE2(2),9(R7)          MOVE
         UNPK  SAVE3,SAVE2             CONVERT DISP OR LABEL NUMBER
         TR    SAVE3+1(3),TAB-240      TO BE WRITTEN OUT
         MVC   WORK+16(3),SAVE3+1
         EX    R0,MOVEVAR(R5)          MOVE OUT WORK TO PRINT AREA
         MVI   WORK,C' '               CLEAR WORK
         MVC   WORK+1(L'WORK-1),WORK
         LA    R5,8(,R5)
         C     R5,KF24                 TIME TO PRINT ?
         BNE   ENDVAR2                 NO
         BAL   R12,PRINTITB            YES, CALL FOR PRINT ROUTINE
ENDVAR2  L     R10,AITAB
         LA    R12,12(,R7)             LEN TO MOVE ITAB UP TO
         C     R12,AITAB               NOTHING TO MOVE ?
         BNH   ENDVAR3
         ST    R7,AITAB                STORE ADDR OF CURRENT AS ENDADDR
         B     GETNVAR
*
ENDVAR3  SR    R10,R12                 CALCULATE NEW END ADDR OF THE
         LA    R12,1(R10,R7)           BLOCK AND STORE IT IN AITAB
         ST    R12,AITAB
COMPARE  C     R10,KF256
         BNH   EX1
         MVC   0(256,R7),11(R7)        TRANSFER A 256 BYTE SECTION
         LA    R7,256(,R7)             OF THE BLOCK AT THE TIME
         S     R10,KF256
         B     COMPARE
*
EX1      EX    R10,MOVEITAB            MOVE LAST PARTIAL SECTION
         B     GETNVAR
*
*        ENDBLOCK
*
*        PRINTS LAST LINE OF BLOCK, IF NEEDED
*        EXITS TO GETPB IF ANY BLOCK LEFT TO BE PROCESSED
*        OTHERWISE A FREEMAIN IS DONE AND LINK TO IEX21
*
ENDBLOCK C     R5,KF0                  VAR LEFT TO BE WRITTEN OUT ?
         BE    *+8
         BAL   R12,PRINTITB
         LA    R12,1(,R14)
         CH    R12,PBN                 ALL BLOCKS PROCESSED ?
         BNH   GETPB                   NO, TAKE NEXT
SLUT     L     R1,ITAB20S              ITAB AREA
         LA    R1,1024(0,R1)           AND ATAB AREA ARE MADE
         LR    R0,R1                   FREEMAIN FOR
         L     R1,AREALOC
*
         FREEMAIN R,LV=(0),A=(1)
*
SLUT2    XCTL  EP=IEX21000
*
*        HEADING LINES
*
HEAD1    DC    C'IDENTIFIER TABLE'
*
HEAD2    DC    C'PBN SC    PBN      NAME   TYPE  DM DSP       NAME   TYX
               PE  DM DSP       NAME   TYPE  DM DSP'
*
HEAD3    DC    C'          SURR                  PR LN                 X
                   PR LN                     PR LN '
*
SCSAVE   DC    H'0'                    SAVE SEMICOLON COUNTER
KF256    DC    F'256'                  USED BY MOVE LOOP
SAVE2    DC    C'000'                  USED FOR CONVERSION
SAVE3    DC    XL5'00'
DOUBLE   DC    D'0'
MOVEITAB MVC   0(1,R7),11(R7)          USED BY ENDVAR
WORK     DC    CL30' '                 USED TO BUILD PRINT RECORD
KF4095   DC    F'4095'                 STORAGE ALLOCATION MAXIMUM
*
MOVEVAR  MVC   19(27,R1),WORK          USED TO SORT REC TO BE PRINTED
         CNOP  0,4
         MVC   45(27,R1),WORK
         CNOP  0,4
         MVC   71(19,R1),WORK
*
KF24     DC    F'24'                   USED BY ENDVAR
FPLEN    DC    H'8'                    4 = SHORT PREC, 8 = LONG PREC
*                                      INCREASE VALUE DURING
*                                      STORAGE ALLOCATION
*
*        TRANSLATE FOR INTERNAL TO EBCDIC CODE
*
TRINTEXT DS    0CL96
         DC    C' '
         DC    47C')'
         DC    C'0123456789'
         DC    6C')'
         DC    C'ABCDEFGHIJKLMNOPQRSTUVWXYZ$_#@))'
*
*        FOR PRINTABLE HEXADECIMAL
*
TAB      DC    C'0123456789ABCDEF'
KA11     DC    AL2(11)
*
         LTORG
*
WORKAREA DSECT
         COPY  WORKAREA
KF0      DS    F                  ZERO CONSTANT
SAVE     DS    F
SAVE1    DS    4F
APBTAB2  DS    A                  START ADDR OF PBTAB2
ATABAD   DS    A                  START ADDR OF ATAB
DPC      DS    F                  SAVE AREAS FOR R3, R4, R5 AND R6
WPC      DS    F
HPC      DS    F
BPC      DS    F
AITAB    DS    F                  ITAB ADDR
APRNTAR  DS    A                  ADDR OF CURRENT PRINTAREA
AREALOC  DS    A                  ADDR OF GETMAIN POOL
SAVEPB   DS    F                  COUNTS NO OF BLOCKS READ
LENCOUNT DS    H                  SAVES LENGTH OF BLOCK
BITS1    DS    C
PROCBIT  EQU   X'02'              PROCEDURE IS PROCESSED
PROCOFF  EQU   X'FD'
*
*        REGISTER EQUATES
*
         IEZREGS
*
         END   IEX20000
