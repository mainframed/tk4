         TITLE 'IEX50 - COMPILATION PHASE - CP12'
*
*        CP12, CP19, CP20, CP21, CP22, CP23, CP33, CP57, CP61
*        CP64, CP71, CP83, CP84
*
*        DEFINITIONS WITHIN CSECT IEX50004
*
NOASSIGN EQU   X'08'
INREGBIT EQU   X'40'
ENTIER   EQU   X'140'                  OFFSET INTO FSA FOR ENTIER RTN
*
***********************************************************************
*
*        COMPILER PROGRAM - CP12
*
***********************************************************************
*
*        ASSIGNMENT
*        CONTEXT              PROGRAM
*        SOURCE OPERATOR      =
*        STACK OPERATOR       BEGIN, ;, THENS, ELSES, DO
*        OPERAND              LEFT SIDE VARIABLE
*
         USING CP12,R12
CP12     TM    COMPFLGS,OPERAND        OPDT ?
         BZ    AWC2                    NO, BRANCH
*
*        ENTRY FROM CP21
*
AWD1     TM    0(R9),X'08'             ASSIGMENT POSSIBLE ?
         BO    AWD2                    NO, BRANCH TO AWD2
         TM    0(R9),INREGBIT          OPD IN REGISTER ?
         BZ    AWJ1                    YES, BRANCH
         TM    1(R9),X'C0'             OPD TYPE PROCEDURE IDENT ?
         BO    AWF2                    YES, BRANCH
         TM    1(R9),X'20'             OPD CALLED BY NAME ?
         BO    AWJ1                    NO, BRANCH IF NOT
         TM    COMPFLGS,COMPMODE       SYNTAX CHECK MODE ?
         BO    AWJ1                    YES, BRANCH
*
*        GENERATE ASSIGNMENT CONTROL
*
         BAL   R4,ROUTINE1             LOAD VPLACE,WPLACE
         LH    R1,WPLACE
         LA    R1,4(,R1)
         STH   R1,AWE45+2
         MVZ   AWE45+2(1),VPLACE       INSERT REG INTO CODE
         LA    R2,AWE45
         BAL   R14,GENTXTS
         DC    H'8'                    GENERATE 8 BYTES
*
         BAL   R4,OPDREC
         MVC   2(1,R9),SPBNST+1        CURRENT BLOCK, NEVER FCTVA
*                                      ALWAYS ADDR, NEVER VALUE
AWJ1     BAL   R4,MOVEOPTK             OPTH(SOURCE)
         MVC   0(1,R10),0(R8)
         BR    R5
*
AWC2     BAL   R4,SERR3
         DC    H'176'                  ERROR 176
*
*        ENTRY FROM CP21
*
AWC4     BAL   R4,STACKAPI
         B     AWJ1
*
AWD2     BAL   R4,SERR1
         DC    H'190'                  ERROR 190
*
         LA    R9,5(R9)                TO PREPARE STACKAPI
         B     AWC4                    BRANCH
*
*        CHANGE INT NAME TO OBJECT STACK NAME
*
AWF2     MVI   0(R9),X'C0'
         NI    1(R9),X'03'
         OI    1(R9),X'30'
         MVI   3(R9),X'00'
         MVI   4(R9),X'18'             DISPL IS 24
         B     AWJ1
*
AWE45    TM    0(CDSA),X'08'           *** GENERATED CODE ***
         BO    OERR22(FSA)             *** GENERATED CODE ***
*
***********************************************************************
*
*        COMPILER PROGRAM - CP19
*
***********************************************************************
*
*        IF IN ASSIGNMENT STATEMENT
*        CONTEXT              PROGRAM
*        SOURCE OPERATOR      IF
*        STACK OPERATOR        =
*        OPERAND              NONE
*
         USING CP19,R12
CP19     LA    R11,290(,R11)           CSW(STC)
         B     COMP                    COMPARE
*
***********************************************************************
*
*        COMPILER PROGRAM - CP20
*
***********************************************************************
*
*        ASSIGNMENT
*        CONTEXT              PROGRAM
*        SOURCE OPERATOR      ;, EPSILON, ETA, END, ELSE
*        STACK OPERATOR        =
*        OPERAND              RIGHT SIDE OPERAND
*
         USING CP20,R12
CP20     LA    R4,BIG2
         BAL   R3,OPDTEST
         BAL   R4,ARRTEST1
         TM    1(R9),X'03'             OPD BOOL, REAL OR INTEGER ?
         BZ    BIE3                    NO, ERROR
BIC2     TM    1(R9),X'04'
         BO    BIE32
         TM    COMPFLGS,COMPMODE       SYNTAX CHECK MODE ?
         BO    BIE4                    YES, BRANCH
         TM    0(R9),INREGBIT          OPD IN REGISTER ?
         BZ    BID4                    YES, BRANCH
         BAL   R4,OPDREC               OPERAND RECOGNIZER
         B     BID4
*
*        ENTRY FROM CP69
*
BIG2     BCTR  R10,0                   CLEAR OPERATOR
         CLI   0(R10),X'18'            'FOR' ?
         BNE   BIJ2                    NO, BRANCH
         LA    R9,5(,R9)               RELEASE OPERAND
         L     R1,AJMPCP43             R1 -> CP43 ENTRY POINT
         L     R12,SCPTAB+4*6          R12 -> CP6 FOR ADRESSABILITY
         BR    R1                      BRANCH TO CP 43
*
BIJ2     CLI   0(R10),X'2C'            ARRAY BRACKET ?
         BNE   BIK2                    NO, BRANCH
         LA    R9,5(,R9)               CLEAR OPERAND
         L     R1,ADERE2               R1 -> CP51 ENTRY POINT
         L     R12,SCPTAB+4*51         R12 -> CP51
         BR    R1                      BRANCH TO CP51 ENTRY POINT
*
BIK2     CLI   0(R10),XFASSIGN         OPERATOR IS 'ASSIGN' ?
         BE    BIK1                    YES, BRANCH
BIK5     NI    COMPFLGS,255-OPERAND    RESET OPERAND
         LA    R9,10(,R9)              CLEAR OPERAND TWICE
         B     COMP                    BRANCH TO COMP
*
*        RESTORE R7, RII, RIR, CII, CIR
*
BIK1     LH    R7,STRDP
         MVC   CII(8),STRDCIRI
         MVC   5(5,R9),0(R9)           MOVE LAST OPD TO NEXT LAST SPOT
         LA    R9,5(,R9)               CLEAR OPERAND
         TM    RII,RIIADRM             ADR OCCUPIED ?
         BZ    BIK3                    NO
         C     R9,RUTI+32
         BNE   BIK3
         MVI   RII,0                   RELEASE 'ADR' IN REG USE TABLE
BIK3     TM    0(R9),X'20'
         BZ    BIC2
         TM    0(R9),X'40'
         BO    BIC2
         MVI   RII,X'01'
         ST    R9,RUTI+32
         B     BIC2
*
BID4     TM    5(R9),NOASSIGN          TEST NO ASSIGNMENT BIT
         BO    BIE31                   ERROR IF NO ASSIGNMENT BIT
BIE4     TM    1(R9),X'03'             TEST TYPE BITS
         BZ    BIE3                    ERROR IF ZEROES IN TYPE FIELD
         BM    BIAE2                   BRANCH MIXED (=NOT BOOLEAN)
         TM    6(R9),X'03'             NEXT LAST OPD BOOLEAN ?
         BNO   BIE34                   BRANCH IF NOT BOOLEAN
         TM    COMPFLGS,COMPMODE       SYNTAX CHECK MODE ?
         BO    BIG2                    YES, BRANCH
*
*        GENERATE BOOLEAN ASSIGN
*
BIG5     TM    0(R9),X'C0'
         BNO   BIBG1
         TM    1(R9),X'30'             TEST IF RIGHT OPD BOOL CONST
         BNZ   BIBG1                   BRANCH IF NOT A CONSTANT
*
*        GENERATE ASSIGN, RIGHT OPD BOOL CON
*
BIAH16   BAL   R4,SAVECIRI
         LA    R9,5(,R9)
         TM    0(R9),X'20'
         BO    BIAH161
         BAL   R4,ROUTINE1
BIAH162  SH    R9,KH5
         MVC   BIAH18+2(2),WPLACE
         MVZ   BIAH18+2(1),VPLACE
         NI    4(R9),X'01'
         MVC   BIAH18+1(1),4(R9)       INSERT CONSTANT TO CODE
         BAL   R2,GENTXT4              GENERATE 4 BYTES
BIAH18   MVI   0(0),X'00'              *** GENERATED CODE ***
         B     BIG2
*
BIAH161  BAL   R4,ROUTINE3
         B     BIAH162
*
BIAE2    TM    6(R9),X'03'             LAST OPD NONBOOLEAN
         BM    BIBA1                   BR IF MIXED, ERROR OTHERWISE
         TM    5(R9),APIMASK           BLO AN API ?
         BO    BIG2                    YES, BRANCH
BIE33    BAL   R4,SERR1
         DC    H'193'                  ERROR 193
*
         B     BIG2
*
BIE34    TM    0(R9),APIMASK           LO AN API ?
         BO    BIG2                    YES, BRANCH
         B     BIE33
*
BIE31    TM    5(R9),APIMASK           BLO AN API ?
         BO    BIG2                    YES, BRANCH
BIE3     BAL   R4,SERR1
         DC    H'192'                  ERROR 192
*
         B     BIG2
*
BIE32    TM    0(R9),APIMASK           LO AN API ?
         BO    BIG2                    YES, BRANCH
         B     BIE3
*
BIBA1    TM    COMPFLGS,COMPMODE       SYNTAX CHECK MODE ?
         BO    BIG2                    YES, BRANCH
         TM    6(R9),X'02'             NEXT LAST OPD 'REAL' ?
         BZ    BICA1                   NO, BRANCH
         TM    1(R9),X'02'             LAST OPERAND 'REAL' ?
         BO    BIBG1                   YES, BRANCH
         BAL   R4,TRINRE               GENERATE INTEGER REAL CONVERSION
*
*        GENERATE 'ASSIGN REAL'
*
BIBG1    BAL   R4,SAVECIRI
         L     R1,ADHEB2               R1 -> DHEB2 ENTRY IN CP69
         L     R12,SCPTAB+4*69         R12 -> CP69
         BR    R1                      BRANCH TO DHEB2 IN CP69
*
BICA1    TM    1(R9),X'02'             LAST (RIGHT) OPERAND 'REAL'
         BZ    BICF1                   NO, BRANCH
         BAL   R4,TRREIN               GENERATE REAL INTEGER CONVERSION
         BAL   R4,ROUTINE7             GET NEXT FREE REGISTER
         SLA   R14,2
         ST    R9,RUTI(R14)            R9 TO REG USAGE TABLE
         SLA   R14,2
         LA    R14,14(R14)
         STC   R14,BICA15+1            REG NUMBER TO INSTRUCTION
         BAL   R2,GENTXT2              GENERATE 2 BYTES
BICA15   LR    0,0                     *** GENERATED CODE ***
         MVI   0(R9),X'88'
         MVI   1(R9),X'31'
         MVC   2(1,R9),SPBNST+1
         STH   R7,HALFW
         MVC   3(2,R9),HALFW
         MVZ   3(1,R9),BICA15+1
*
*        GENERATE 'ASSIGN INTEGER'
*
BICF1    BAL   R4,SAVECIRI
         L     R1,ADHZB1               R1 -> DHZB1 ENTRY IN CP69
         L     R12,SCPTAB+4*69         R12 -> CP69
         BR    R1                      BRANCH TO DHZB1 ENTRY IN CP69
*
*        RELEASE OBJECT T STACK ENTRY AND REG
*
RELOSREG TM    0(R9),X'C0'
         BOR   R4                      RETURN IF IDENT FROM ITAB
         SH    R7,ONEENTRY             RELEASE ONE OBJ T STACK ENTRY
         TM    0(R9),INREGBIT
         BOR   R4                      RETURN IF OPD NOT 'IN REG'
         NI    RII,X'FE'               RELEASE 'ADR' IN REG USE TABLE
         BR    R4
*
*        SAVE R7, CII, CIR, RII, RIR
*
SAVECIRI STH   R7,STRDP
         MVC   STRDCIRI(8),CII
         BR    R4
*
STRDP    DC    H'0'
STRDCIRI DC    8C' '
*
ADHEB2   DC    A(DHEB2)                ENTRY TO CP69
ADHZB1   DC    A(DHZB1)
ADERE2   DC    A(DERE2)                ENTRY TO CP51, BASE CP51
AJMPCP43 DC    A(DJH1E43)              ENTRY TO CP43, BASE CP6
*
***********************************************************************
*
*        COMPILER PROGRAM - CP21
*
***********************************************************************
*
*        MULTIPLE ASSIGNMENT
*        CONTEXT              PROGRAM
*        SOURCE OPERATOR       =
*        STACK OPERATOR        =
*        OPERAND              LEFT SIDE VARIABLE
*
         USING CP21,R12
CP21     TM    COMPFLGS,OPERAND        OPERAND ON ?
         BZ    BKB2                    NO, BRANCH
         IC    R0,1(,R9)               LOAD R0,R9+1
         IC    R1,6(,R9)               LOAD R1,R9+6
         N     R0,TYPETEST             CLEAR FIRST 3O BITS OF GPR0
         N     R1,TYPETEST             CLEAR FIRST 3O BITS OF GPR1
         L     R12,SCPTAB+4*12         R12 -> CP12
         SR    R0,R1                   SUBTRACT
         BZ    AWD1-CP12(R12)          ZERO, BRANCH TO AWD1 IN CP12
         TM    0(R9),APIMASK           LO AN API ?
         BOR   R5                      YES, BRANCH TO SUBSTART
         TM    5(R9),APIMASK           BLO AN API ?
         BOR   R5                      YES, BRANCH TO SUBSTART
         BAL   R4,SERR1
         DC    H'172'                  ERROR 172
*
         B     AWC4-CP12(R12)          BRANCH TO AWC4 IN CP12
*
BKB2     BAL   R4,SERR4
         DC    H'162'                  ERROR 162
*
         BR    R5                      RETURN TO SUBSTART
*
***********************************************************************
*
*        COMPILER PROGRAM - CP22
*
***********************************************************************
*
*        ARITHM OR BOOL EXPRESSION IN ASSIGNMENT STATEMENT
*        CONTEXT              PROGRAM
*        SOURCE OPERATOR      (, ARITHM OP, BOOL OP, REL OP
*        STACK OPERATOR        =
*        OPERAND              ARRAY OR PROCEDURE IDENTIFIER OR
*                             ARITHMETIC OR BOOLEAN OPERAND OR NONE
*
         USING CP22,R12
CP22     L     R11,EXC                 CSW(EXP)
         B     COMP                    COMPARE
*
***********************************************************************
*
*        COMPILER PROGRAM - CP23
*
***********************************************************************
*
*        PARAMETERLESS PROCEDURE STATEMENT OR STATEMENT END
*        CONTEXT              PROGRAM
*        SOURCE OPERATOR      ;, EPSILON, ETA, END
*        STACK OPERATOR       ;
*        OPERAND              PROCEDURE IDENTIFIER OR NONE
*
         USING CP23,R12
CP23     TM    COMPFLGS,OPERAND        OPDT
         BZ    BOD1                    OFF, BRANCH
         BAL   R4,PLPRST
         LA    R9,5(,R9)
         NI    COMPFLGS,255-OPERAND    RESET OPERAND
BOD1     CLI   0(R8),XFSCOLON          SOURCE SEMICOLON ?
         BNE   BOE1                    NO, BRANCH
         BAL   R4,SCHDL                YES, ENTER SEMICOLON HANDLING
         BR    R5                      RETURN TO SUBSTART
*
BOE1     BCT   R10,COMP                CLOPT AND COMP
*
***********************************************************************
*
*        COMPILER PROGRAM - CP33
*
***********************************************************************
*
*        ARITHMETIC OR BOOLEAN EXPRESSIONS IN STATEMENT CONTEXT
*        CONTEXT              STATEMENT
*        SOURCE OPERATOR      ARITHM OR BOOLEAN OR RELATIONAL OPERATOR
*        STACK OPERATOR       PROCEDURE BRACKET, LEFT BRACKET,
*                             ST PROC BRACKET,FOR =, STEP, UNTIL,
*                             WHILE,  , ARRAY DECL BRACKET
*        OPERAND              ARITHMETIC OR BOOLEAN OPERAND
*
         USING CP33,R12
CP33     LA    R11,324(,R11)           CSW(EXP)
         B     COMP                    COMPARE
*
***********************************************************************
*
*        COMPILER PROGRAM - CP57
*
***********************************************************************
*
*        PROCEDURE CALL
*        CONTEXT              STATEMENT
*        SOURCE OPERATOR      , OR )
*        STACK OPERATOR       PROCEDURE BRACKET
*        OPERANDS             ACTUAL PARAMETER
*                             PARAMETER COUNT AND PRPOINTER AT CALL
*                             PAR CHAR AND PRPOINTER AT NEXT THUNK ADR
*                             LABEL NUMBER
*                             PROCEDURE IDENTIFIER
*
*        COMPUTE FOR LATER REFERENCE (FROM SLPAR IN STACK)
*        STACK ADDR WHICH POINTS TO ENTRY CONTAINING LN
*        (=ONE ENTRY AFTER PROCEDURE IDENTIFIER ENTRY)
*        STORE SLPAR (NUMBER OF PARAMETERS TIMES FIVE)
*
         USING CP57,R12
CP57     TM    COMPFLGS,OPERAND        OPDTEST
         BZ    FGAB2                   FALSE
         MVC   STACKST(2),5(R9)
         LH    R15,STACKST
         LA    R15,10(R15,R9)
         ST    R15,STACKST
         MVC   STSLPAR(2),5(R9)        MOVE SLPAR
         TM    COMPFLGS,COMPMODE       SYNTAX CHECK MODE ?
         BO    FGAG1                   YES, BRANCH
         OI    PROCWPS,X'80'           NO PARAMETERLESS PROC CHECK
         BAL   R4,OPDREC               OPERAND RECOGNIZER
         XI    PROCWPS,X'80'           SWITCH OFF
*
*        LOAD ACTUAL PARAMETER ADDR LAPA
*
FGCA1    TM    0(R9),X'20'             OPD REPRESENTS ADDR ?
         BO    FGCB3                   YES
         BAL   R4,CLEARRG              STORE REGS IN OBJ TIME STACK
         BAL   R4,DECOMP               DECOMPOSE OPERAND
         LH    R15,OPDPBN              GET
         SLA   R15,3                       PBN
         STH   R15,FGCD35+2                   TIMES EIGHT TO GEN CODE
         LH    R15,OPDLN               LN
         STH   R15,FGCD34+2               TO GENERATED
         STH   R15,FGCF34+2                            CODE
         TM    1(R9),X'08'             OPERAND LABEL OR SWITCH ?
         BO    FGCD3                   YES
         TM    1(R9),X'C0'             OPERAND PROCEDURE ?
         BZ    FGCF21                  NO PROCEDURE
         TM    0(R9),X'80'
         BO    FGCE3
FGCF21   BAL   R4,ROUTINE1             FIND DISPL AND REG
         MVC   FGCF25+2(2),WPLACE      INSERT DISPLACEMENT IN CODE
         MVZ   FGCF25+2(1),VPLACE      INSERT REG IN CODE
         BAL   R2,GENTXT4              GENERATE 4 BYTES
FGCF25   LA    ADR,0(0)                *** GENERATED CODE ***
         TM    0(R9),X'C0'             IDENTIFIER FROM ITAB ?
         BO    FGAF1                   YES
         SH    R7,ONEENTRY             RELEASE STACK ENTRY
         B     FGAF1                   EXIT FROM LAPA
*
FGCB3    BAL   R4,ROUTINE3             LOAD REG ADR
         B     FGAF1                   EXIT FROM LAPA
*
*        LABEL OR SWITCH IDENTIFIER
*
FGCD3    BAL   R2,GENTXT4              GENERATE 4 BYTES
FGCD34   L     ADR,0(LAT)              *** GENERATED CODE ***
         BAL   R2,GENTXT4              GENERATE 4 BYTES
FGCD35   L     GDSA,0(PBT)             *** GENERATED CODE ***
         B     FGAF1                   EXIT FROM LAPA
*
*        PROCEDURE IDENTIFIER
*
FGCE3    TM    1(R9),X'40'             STANDARD PROCEDURE ?
         BZ    FGCF4                   YES
         TM    3(R9),X'F0'             PARAMETERLESS PROCEDURE ?
         BZ    FGCF33                  YES
         MVC   FGCF35+1(1),2(R9)
         LA    R2,FGCF34
         BAL   R14,GENTXTS
         DC    H'12'                   GENERATE 12 BYTES
*
         B     FGAF1                   EXIT FROM LAPA
*
FGCF33   TM    1(R9),X'20'             CALLED BY VALUE ?
         BZ    FGAF1                   NO
         B     FGCF21                  YES
*
FGCF34   L     ADR,0(LAT)              *** GENERATED CODE ***
FGCF35   MVI   PROLPBN(FSA),X'00'      *** GENERATED CODE ***
         STM   PBT,LAT,PROLREG(FSA)    *** GENERATED CODE ***
*
*        STANDARD PROCEDURE IDENTIFIER
*
FGCF4    TM    4(R9),X'80'             ABS, SIGN, LENGTH, OR ENT ?
         BO    FGCF41                  YES, NO LAT ENTRY
         IC    R15,4(R9)               GET
         N     R15,FGXFC                   ENTRY
         A     R15,LATAB                         IN LAT
         NI    0(R15),X'7F'            INSERT ZERO BIT
         OI    IOTAB+16,X'01'          ALL DATASETS MAY BE NEEDED
FGCF41   LA    R15,2
         NR    R15,R6                  PRPOINT ON HALFWORD BOUNDARY ?
         BNZ   FGCF42                  YES
         BAL   R2,GENTXT2              GENERATE 2 BYTES
         LR    R1,R1                   *** GENERATED CODE ***
*                                      GENERATED NO OP CODE
FGCF42   MVC   FGCF45(4),1(R9)         INSERT 1ST PART OF STD PROC ID
         LA    R2,FGCF44
         BAL   R14,GENTXTS
         DC    H'22'                   GENERATE 22 BYTES
*
         B     FGAF1                   EXIT FROM LAPA
*
         CNOP  2,4
FGCF44   BALR  BRR,0                   *** GENERATED CODE ***
         L     ADR,8(BRR)              *** GENERATED CODE ***
         B     12(BRR)                 *** GENERATED CODE ***
*
FGCF45   DC    F'0'                    *** GENERATED CODE ***
         MVI   PROLPBN(FSA),X'00'      *** GENERATED CODE ***
         STM   PBT,LAT,PROLREG(FSA)    *** GENERATED CODE ***
*
*        GENERATE CALL OF CAP2
*
FGAF1    BAL   R2,GENTXT4              GENERATE 4 BYTES
         B     CAP2(FSA)               *** GENERATED CODE ***
         MVI   GPBN+1,X'FF'            GDSA IS NOT CONTROLLED
FGAG1    MVC   5(2,R9),0(R9)           PAR CHAR OF LO INTO NEXT L OPD
         ST    R6,WORKPL               NEXT THUNK ADDR
         MVC   2(3,R9),WORKPL+1        TO LAST OPD
         LH    R15,STSLPAR             UPDATE SLPAR
         LA    R15,5(R15)
         STH   R15,STSLPAR
         MVC   0(2,R9),STSLPAR         SLPAR TO LAST OPERAND
*
FGBA1    CLI   0(R8),XFRBRAC           RIGHT BRACKET IN SOURCE ?
         BNER  R5                      NO, BRANCH TO SUBSTART
         L     R15,STACKST             GET ADDR OF PROCED ID - 5
         TM    5(R15),X'10'            PROCEDURE IDENTIFIER API ?
         BO    FGBD1                   YES, NO PARAMETER NR CHECK
         SR    R4,R4
         IC    R4,8(R15)               GET NUMBER OF PARM IN PROC IDENT
         SRL   R4,4
         LH    R0,STSLPAR              GET NUMBER OF PARAMS TIMES FIVE
         SRDA  R0,32
         LH    R2,KH5
         DR    R0,R2                   CALC NUMBER OF PARAMETERS
         STH   R1,FGOUTPAR+6           NUMBER TO GENERATED CODE
         CR    R1,R4                   PARAMETER COUNT COMPARE
         BE    FGBD1                   CORRECT NUMBER
         TM    6(R15),X'30'            PROCEDURE FORMAL PARAMETER ?
         BM    FGBD1                   YES, NO ERROR
         BAL   R4,SERR1
         DC    H'187'                  ERROR 187
*
FGBD1    L     R9,STACKST              CLEAR R9 FROM ALL PARAM ENTRY
         LA    R9,5(R9)
         NI    3(R9),X'0F'             CLEAR PARAMETER COUNT
         TM    COMPFLGS,COMPMODE       SYNTAX CHECK MODE ?
         BO    FGBH1                   YES, BRANCH
         L     R15,STACKST             GET
         MVC   HALFW(2),3(R15)         ADDR OF
         LH    R4,HALFW                            LAT
         A     R4,LATAB                                ENTRY
         ST    R6,0(R4)                VALUE OF PRPOINT TO LAT ENTRY
*
*        GENERATE PROCEDURE CALL
*
FGBD11   TM    1(R9),FORMPM            PROCEDURE FORMAL ?
         BNM   FGBD11A                 NO
         BAL   R2,GENTXT4              GENERATE 4 BYTES
         MVI   PROLPBN-1(FSA),X'FF'    *** GENERATED CODE ***
*
*        SET SW IN FSA TO DETECT WHEN ACT PROCEDURE IS
*        PARAMETERLESS
*
FGBD11A  OI    PROCWPS,X'80'           SET SWITCH IN OPERAND RECOGNIT
         BAL   R4,OPDREC
         XI    PROCWPS,X'80'           SWITCH OFF
         NI    1(R9),X'3F'             CLEAR PROCEDURE BITS
         TM    1(R9),FORMPM            FORMAL PARAMETER ?
         BNM   FGBG1                   NO
         BAL   R2,GENTXT4              GENERATE 4 BYTES
*                                      GENERATE CALL PROCEDURE FORMAL
         BAL   BRR,PROLOGFP(FSA)       *** GENERATED CODE ***
FGBG1    SR    R15,R15
         STH   R15,PARCOUNT            INITIALIZE PARAMETER COUNT
FGBG12   LH    R15,PARCOUNT
         CH    R15,STSLPAR             ALL PARAMS BEEN PROCESSED ?
         BE    FGBH1                   YES, BRANCH
*
*        GENERATE ONE ENTRY IN PARAMETER LIST
*
FGBG13   LA    R15,5(R15)
         STH   R15,PARCOUNT
         L     R4,STACKST              FIND PARAMETERS IN STACK
         SR    R4,R15
         MVC   FGOUTPAR+4(2),0(R4)     CHARACTER BYTES TO GENER CODE
         MVC   FGOUTPAR+1(3),2(R4)     ADDR OF THUNK TO GENER CODE
         ST    R6,THUNKADR             SAVE PRPOINT FOR RLD RECORD
         LA    R2,FGOUTPAR
         BAL   R14,GENTXTS
         DC    H'8'                    GENERATE 8 BYTES
         L     R2,THUNKADR
         BAL   R14,GENRLD              GENERATE RLD RECORD
         DC    H'4'
         DC    H'1'
         DC    H'1'
         MVI   FGOUTPAR+7,0            ZERO TO NEXT PARM NUMBER FIELD
         B     FGBG12
*
*        CHECK FOR THE PRESENCE OF 'FOR', 'IF' OR 'GOTO'
*        IMMEDIATELY AFTER PROCEDURE CALLS
*        CALLED BY CP57 AND CP61
*
         DROP  R12
FGBG20   LR    R0,R12
         BALR  R12,0
         USING *,R12
         ST    R0,FGBG29               SAVE OLD BASE REG
         ST    R4,FGBG28
         CLI   1(R8),XFZETA            SOURCE BUFFER EMPTY?
         BNE   FGBG22                  NO
         BAL   R4,JBUFFER
FGBG22   CLI   1(R8),XFFOR             NEXT OPERATOR 'FOR' ?
         BE    FGBG27                  YES
         CLI   1(R8),XFIF              NEXT OPERATOR 'IF' ?
         BE    FGBG27                  YES
         CLI   1(R8),XFGOTO            NEXT OPERATOR 'GOTO' ?
         BE    FGBG27                  YES
FGBG25   L     R4,FGBG28
         L     R12,FGBG29              RESTORE OLD BASE REG
         BCTR  R10,R4                  CLOPT AND RETURN
FGBG27   LA    R8,1(,R8)               INCREASE SOURCE PTR
         BAL   R4,SERR3
         DC    H'194'                  ERROR 194
*
         BCT   R8,FGBG25               DECREASE SOURCE PTR
*
FGBG28   DC    F'0'
FGBG29   DC    F'0'
         DROP  R12
*
*        RE-ESTABLISH BASE REG FOR CONTINUATION OF CP57
*
         USING CP57,R12
FGBH1    BAL   R4,FGBG20               CHECK NEXT OPERATOR
         CLI   0(R10),X'30'            PROG CONTEXT OP IN STACK ?
         BNE   FGBG4                   NO, BRANCH
         NI    COMPFLGS,255-OPERAND    RESET OPERAND
         L     R11,DECAADD             SWITCH TO PROGRAM CONTEXT
         TM    3(R9),REGADRM           OPERAND IN ADR ?
         BZ    FGBH1A                  NO
         SH    R7,ONEENTRY             RELEASE STACK
         XI    RII,RIIADRM             ADR NOT OCCUPIED
FGBH1A   LA    R9,5(R9)                RELEASE PROCEDURE IDENT
FGBK5    BCT   R10,SPECTEST            CLOPT, BRANCH TO SPECIAL TEST
FGBG4    CLI   0(R10),X'33'            STMT CONTEXT OP IN STACK ?
         BE    FGBK5                   YES
         L     R11,EXC                 SWITCH TO EXPRESSION CONTEXT
         BCT   R10,SPECTEST            CLOPT, BRANCH TO SPECIAL TEST
FGAB2    BAL   R4,SERR3
         DC    H'176'                  ERROR 176
*
         BAL   R4,STACKAPI             INSERT API
         OI    COMPFLGS,OPERAND        SET OPERAND ON
         B     CP57
*
*        CONSTANTS AND WORKAREAS
*
         DC    0F'0'
FGXFC    DC    X'000000FC'             TO EXTRACT LN FROM OPERAND
FGOUTPAR DC    F'0'                    *** GENERATED CODE ***
         DC    F'0'                    *** GENERATED CODE ***
STACKST  DC    F'0'                    PTR TO R9 ENTRY NEXT TO PROC
STSLPAR  DC    H'0'                    NUMBER OF PARAMETERS TIMES FIVE
PARCOUNT DC    H'0'                    TEMPORARY STORAGE TO COUNT PARMS
THUNKADR DC    F'0'                    TEMPORARY STORAGE
*
***********************************************************************
*
*        COMPILER PROGRAM - CP61
*
***********************************************************************
*
*        CALL OF STANDARD PROCEDURES
*        CONTEXT              STATEMENT
*        SOURCE OPERATOR      , OR )
*        STACK OPERATOR       STANDARD PROCEDURE BRACKET
*        OPERANDS             ACTUAL PARAMETER
*                             PARAMETER COUNT AND PRPOINTER AT CALL
*                             PROCEDURE IDENTIFIER
*
         USING CP61,R12
CP61     LA    R4,FOC2                 OPERAND
         BAL   R3,OPDTEST                      TEST
FOC2     BAL   R4,MOVEOPDK
         MVC   0(5,R9),5(R9)           COPY PARAMETER ENTRY
         SR    R1,R1
         IC    R1,10(R9)                            -
         LA    R1,4(R1)                INCR PARAMETER COUNTER
         STC   R1,10(R9)
         TM    15(R9),X'10'            PROCEDURE IDENTIFIER API
         BO    FOF4                    YES, NO CHECKING
         MVC   FOE2PCH(2),17(R9)       GET
         LH    R2,FOE2PCH                  PAR CHAR
         SRL   R2,0(R1)                             FROM
         STC   R2,FOE2PCH                                PROCED IDENT
         BAL   R4,FQA2                 TEST TYPE
FOH2     TM    16(R9),X'03'            STAND FUNCTION HANDLED ?
         BNZ   FTB2                    YES
FOB4     TM    COMPFLGS,COMPMODE       SYNTAX CHECK MODE ?
         BO    FOD4                    YES, BRANCH
         BAL   R4,ADRTRANS             GENERATE ADDR TRANSFER
FOC4     BAL   R4,FRA3                 CONSTRUCT FLAGS
FOD4     TM    18(R9),X'0F'            SPECIAL ACTIONS REQUIRED ?
         BNZ   FSB1                    YES
FOF4     LA    R9,10(R9)               RELEASE TWO ENTRIES IN OPDSTACK
         CLI   0(R8),XFCOMMA           SOURCE A COMMA ?
         BER   R5                      YES, BRANCH TO SUBSTART
FPA21    SR    R1,R1
         IC    R1,0(R9)                GET NUMBER OF PARAMETERS HANDLED
         TM    9(R9),X'03'             HOW MANY INDICATED IN PROC ID ?
         BZ    FPA23                   ONE
         BM    FPA22                   TWO
         SH    R1,KH4                  THREE
FPA22    SH    R1,KH4
FPA23    SH    R1,KH4
         BNZ   FPA1                    ERROR IF NUMBER DOES NOT CHECK
FPB2     TM    COMPFLGS,COMPMODE       SYNTAX CHECK MODE ?
         BO    FPG2                    YES, BRANCH
         BAL   R4,LOADR1               GENERATE CALL OF STAND PROCEDURE
FPG2     L     R3,FGBGADR
         BALR  R4,R3                   CHECK NEXT OPERATOR
         CLI   0(R10),X'30'            CHECK CONTEXT OPERATOR
         BNE   FPC5                    NOT PROGRAM CONTEXT
         L     R11,DECAADD             SWITCH TO PROGRAM CONTEXT
         NI    COMPFLGS,255-OPERAND    RESET OPERAND
         LA    R9,10(R9)               CLEAR TWO OPERANDS
FPG3     BCT   R10,SPECTEST            CLOPT, BRANCH TO SPECIAL TEST
FPC5     TM    6(R9),X'03'             STANDARD FUNCTION HANDLED ?
         BNZ   FPD5                    YES
FPD4     BAL   R4,SERR3                NO, ERROR
         DC    H'168'                  ERROR 168
*
FPD5     CLI   0(R10),X'33'            STATEMENT CONTEXT ?
         BE    FPE4                    YES
         L     R11,EXC                 NO, SWITCH TO EXPR CONTEXT
FPE4     LA    R9,10(R9)               CLOPD TWICE
         BAL   R4,STACKAPI             INTRODUCE API
         B     FPG3
*
*        SUBROUTINE FOR TYPE TEST OF CURR PAR
*
FQA2     ST    R4,LOADR1R
         TM    0(R9),X'10'             CHECK IF OPERAND IS API
         BO    FOH2                    YES
         TM    1(R9),X'08'             PAR LABEL ?
         BO    FQJ1                    YES
         TM    FOE2PCH,X'03'           STRING OR PROCEDURE ?
         BZ    FQD3                    YES
         TM    1(R9),X'04'             PARAMETER ARRAY IDENTIFIER ?
         BO    FQA2A                   YES, BYPASS NEXT TEST
         BAL   R4,ARRTEST1             TEST FOR PROCEDURE IDENTIFIER
FQA2A    XC    FOE2PCH(1),1(R9)        COMP ACT PAR WITH CHAR FROM PRI
         TM    FOE2PCH,X'07'           TEST ARRAY AND TYPE BITS
         L     R4,LOADR1R
         BZR   R4                      RETURN IF ZEROES
         BO    FQJ1                    ERROR IF ONESS
         TM    FOE2PCH,X'08'           CALL BY NAME INDIC IN CHAR
         BO    FQJ1                    YES, BRANCH TO ERROR
         TM    FOE2PCH,X'03'           TEST TYPE BITS
         BNO   FQJ1                    ERROR IF ZEROES OR MIXED
         TM    1(R9),X'03'             TEST TYPE OF PAR
         BNM   FQJ1                    ERROR IF NOT ARITHM TYPE
         BR    R4                      RETURN
*
FQD3     TM    FOE2PCH,X'0C'           STRING INDIC BY PROCEDURE ID ?
         BNZ   FQE3                    NO
         TM    0(R9),X'01'             PAR STRING ?
         BZ    FQJ1                    NO, ERROR
         BR    R4                      RETURN
*
FQE3     TM    1(R9),X'C0'             PAR PROCEDURE  ?
         BZ    FQJ1                    NO, ERROR
         BO    FQF3                    IF PROCEDURE
         TM    1(R9),X'80'             PAR STAND PROCEDURE ?
         BO    FQJ1                    YES, ERROR
FQF3     TM    1(R9),X'30'             PAR FORMAL PARAMETER ?
         BNM   FQG3                    NO
         TM    1(R9),X'20'             YES, IS IT CALLED BY VALUE
         BO    FQJ1                    ERROR IF YES
FQG3     TM    COMPFLGS,COMPMODE       SYNTAX CHECK MODE ?
         BO    FOF4                    YES, BRANCH
         TM    1(R9),X'10'             FORMAL PAR CALLED BY NAME ?
         BO    FQH4                    YES
         TM    3(R9),X'E0'             MORE THAN ONE PARAMETER ?
         BNZ   FQJ1                    YES, ERROR
         TM    3(R9),X'10'             DOES IT HAVE ONE PARAMETER
         BZ    FQJ1                    ERROR IF NOT
         MVC   FQG35+1(1),2(R9)        PBN TO GENERATED CODE
         MVN   FQG36+4(1),8(R9)
         MVC   FQG36+5(1),9(R9)        MOVE LABEL NUMBER
         BAL   R4,GETPARP
         STH   R15,FQG36+2             STORE DISP IN GENERATED CODE
         OI    FQG36+2,X'A0'           REG CDSA TO GENERATED CODE
         LA    R2,FQG35
         BAL   R14,GENTXTS
         DC    H'14'                   GENERATE 14 BYTES
         B     FOF4
*
FQG35    MVI   PROLPBN(FSA),X'0'       *** GENERATED CODE ***
         STM   PBT,LAT,PROLREG(FSA)    *** GENERATED CODE ***
FQG36    MVC   0(4,CDSA),0(LAT)        *** GENERATED CODE ***
*
FQH4     NI    1(R9),X'3F'             REMOVE PROCEDURE BITS FOR OPDREC
         BAL   R4,ADRTRANS             ADDRESS TRANSFER (CALL ACT PAR)
         B     FOF4
*
FPA1     BAL   R4,SERR1                ERROR PATTERN ENTRIES
         DC    H'187'                  ERROR 187
*
         B     FPG2
*
FQJ1     BAL   R4,SERR1
         DC    H'188'                  ERROR 188
*
         B     FOH2
*
*        CONSTRUCT FLAGS
*
FRA3     TM    FOE2PCH,X'08'           PROCEDURE SPECIFY 'NAME' ?
         BZ    FOD4                    NO
         TM    1(R9),X'04'             CURRENT PARAMETER ARRAY ?
         BO    FOD4                    YES
         TM    1(R9),X'30'             FORMAL PAR
         BNM   FRF3                    NO
         TM    1(R9),X'20'             YES, CALLED BY NAME ?
         BO    FRF3                    NO
         LA    R9,5(,R9)               ADJUST R9 FOR ROUT 1
         BAL   R4,ROUTINE1             GET ADDR OF FORMAL PARAMETER
         SH    R9,KH5                  RESTORE R9
         LH    R1,WPLACE               GET ADDR OF
         LA    R1,4(,R1)                           CHAR BYTES
         STH   R1,FRE24+2                                     TO GEN C
         MVZ   FRE24+2(1),VPLACE
         BAL   R2,GENTXT4              GENERATE 4 BYTES
*                                      GENERATE 'NO ASSIGNMENT TEST'
FRE24    TM    0(0),X'08'              *** GENERATED CODE ***
         TM    18(R9),X'02'            PROCEDURE IDENTIFIER SYSACT ?
         BO    FRG2                    YES
         BAL   R2,GENTXT4              NO, GENERATE BR TO OBJ T ERROR
         BO    OERR22(FSA)             *** GENERATED CODE ***
         MVC   2(1,R9),SPBNST+1        CURR PBN TO PARAMETER
         B     FOD4
*
FRG2     BAL   R4,GETPARP              GET DISP IN OBJ TIME STACK
         STH   R15,FRG25+2             STORE IT IN GENERATED CODE
         OI    FRG25+2,X'A0'           INSERT REG NUMBER
         LA    R2,FRG24                GEN INSERTION OF NO-ASS-FLAG
         BAL   R14,GENTXTS             IF PROC ID IS SYSACT
         DC    H'10'                   GENERATE 10 BYTES
*
         B     FOD4
*
FRG24    BALR  R14,0                   *** GENERATED CODE ***
         BZ    8(R14)                  *** GENERATED CODE ***
FRG25    MVI   0(CDSA),X'40'           *** GENERATED CODE ***
*
FRF3     TM    0(R9),X'08'             NO ASSIGNM FLAG IN PARAMETER ?
         BZ    FOD4                    NO
         TM    18(R9),X'02'            PROCEDURE ID SYSACT ?
         BZ    FRH3                    NO, ERROR
         BAL   R4,GETPARP              DISP IN OBJ T ST
         STH   R15,FRG45+2                              TO GENER CODE
         OI    FRG45+2,X'A0'           INSERT REG NUMBER
         BAL   R2,GENTXT4              GENERATE 4 BYTES
*                                      GENER INSERTION OF NO-ASS-FLAG
FRG45    MVI   0(CDSA),X'40'           *** GENERATED CODE ***
         B     FOD4
*
FRH3     BAL   R4,SERR1                ERROR PATTERN ENTRY
         DC    H'188'                  ERROR 188
*
         B     FOF4
*
*        SPECIAL ACTIONS, I/O PROCEDURES
*
FSB1     TM    18(R9),X'0C'            INPUT OR OUTPUT ?
         BZ    FSB3                    NEITHER, BRANCH
         CLI   10(R9),X'04'            CURRENT PARAMETER THE FIRST ?
         BNE   FOF4                    NO
         BAL   R14,FSSUBR              TEST RANGE OF DATASETNR ETC
*
*        MAKE INSERTION IN I/O TAB
*
FSD2     TM    18(R9),X'08'            INPUT ?
         BZ    FSD4                    NO
         TM    1(R9),X'FC'             INTEGER CONST, 1ST TEST ?
         BNZ   FSD3                    NO
         TM    0(R9),X'C0'             INTEGER CONST, 2ND TEST
         BNO   FSD3                    NO
         CLI   9(R9),X'04'             DSN = 1 ?
         BE    FRH3                    YES, ERROR
FSD3     OI    0(R2),X'80'             NO, INDICATE INPUT
FSD4     TM    18(R9),X'04'            OUTPUT ?
         BZ    FSD6                    NO
         TM    1(R9),X'FC'             INTEGER CONST, 1ST TEST ?
         BNZ   FSD5                    NO
         TM    0(R9),X'C0'             INTEGER CONST, 2ND TEST
         BNO   FSD5                    NO
         CLI   9(R9),X'00'             DSN = 0 ?
         BE    FRH3                    YES, ERROR
FSD5     OI    0(R2),X'40'             NO, INDICATE OUTPUT
FSD6     B     FOF4
*
FSB3     TM    18(R9),X'01'            PUT/GET ?
         BZ    FSB3A                   NO
         OI    IOTAB+17,X'FF'          YES
FSB3A    TM    18(R9),X'02'            SYSACT ?
         BZ    FOF4                    NO
*
*        SPECIAL ACTIONS - SYSACT
*
FSF3     CLI   10(R9),X'08'            TEST PARAMETER COUNT
         BH    FOF4                    BRANCH IF THIRD PARAMETER
         BL    FSG4                    BRANCH IF FIRST PARAMETER
         TM    1(R9),X'FC'             INTEGER CONST, 1ST TEST
         BNZ   FSF3A                   NO
         TM    0(R9),X'C0'             INTEGER CONST, 2ND TEST
         BO    FSJ2                    YES
FSF3A    MVI   SYSACTF,X'08'           INDICATE UNDETERMINED FUNCTION
FSFJ35   SR    R15,R15                 GET
         IC    R15,11(R9)                  ENTRY
         SRA   R15,2                              IN
         LA    R15,IOTAB(R15)                        I/O TAB
         OC    0(1,R15),SYSACTF        INSERT SYSACT BIT
         B     FOF4
*
FSJ2     BAL   R14,FSSUBR              INTEGER CONST TEST ETC
         CLI   4(R9),X'00'             SYSACT FUNCTION ZERO?
         BE    FSE1                    YES, ERROR
         MVI   SYSACTF,X'20'
         CLI   4(R9),X'10'             FUNCTION = 4 ?
         BE    FSAA                    YES
         CLI   4(R9),X'34'             NO, FUNCTION = 13 ?
         BNE   FSBB                    NO
*
*        FUNCTION IS 4 OR 13
*
FSAA     CLI   11(R9),X'04'            DSN = 0 OR 1 ?
         BNH   FRH3                    YES, ERROR
         B     FSFJ35                  NO, OK
*
FSBB     CLI   4(R9),X'20'             FUNCTION = 8 ?
         BE    FSBB1                   YES
         MVI   SYSACTF,X'04'           NO, INDICATE OTHER FUNCTION
         B     FSFJ35
*
FSBB1    CLI   11(R9),X'00'            DSN = 0 ?
         BE    FRH3                    YES, ERROR
         MVI   SYSACTF,X'10'           NO, OK
         B     FSFJ35
*
*        HANDLE FIRST SYSACT PARAMETER
*
FSG4     BAL   R14,FSSUBR              CHECK OF INTEGER CONST ETC
         MVC   11(1,R9),OPDADR+1       STORE DATASETNUMBER IN PTR+1
         B     FOF4
*
*        CHECK PARAMETER
*
FSSUBR   TM    1(R9),X'FC'             INTEGER CONST, 1ST TEST
         BNZ   FSSUBR1                 NO, BRANCH
         TM    0(R9),X'C0'             INTEGER CONST, 2ND TEST
         BNO   FSSUBR1                 NO, BRANCH
         TM    2(R9),X'FF'             CONST IN CONST POOL ZERO ?
         BNZ   FSE1                    ERROR IF NOT CONSTPOOL ZERO
         BAL   R4,DECOMP               DECOMPOSE OPERAND
         LH    R15,OPDADR              GET DISP IN CONST POOL ZERO
         SRA   R15,6
         BZ    FSSUBR2                 CONST < 16, BRANCH
FSE1     BAL   R4,SERR1                ERROR IF NOT
         DC    H'189'                  ERROR 189
*
         B     FOF4
*
FSSUBR1  MVI   OPDADR+1,X'40'          4*16 INTO OPDADR+1
FSSUBR2  MVI   OPDADR,0                ZERO TO OPDADR FIRST BYTE
         LH    R15,OPDADR
         SRA   R15,2
         LA    R2,IOTAB(R15)           ADDR OF IOTAB ENTRY
         BR    R14                     RETURN
*
*        PROCESS ACTUAL PARAMETER FOR STANDARD FUNCTION PROCEDURE
*
FTB2     CLI   0(R8),XFRBRAC           SOURCE RIGHT BRACKET ?
         BE    FTC2                    YES, BRANCH
         OI    COMPFLGS,COMPMODE       SET SYNTAX CHECK MODE
         B     FOF4
*
FTC2     TM    COMPFLGS,COMPMODE       SYNTAX CHECK MODE ?
         BO    FOF4                    YES
         BCTR  R10,0                   NO, CLEAR ONE OPERATOR
         CLI   0(R10),X'33'            TEST CONTEXT OPERATOR
         BL    FTD3                    PRC OPT, BRANCH
         BE    FTE1                    STC OPT, BRANCH
         L     R11,EXC                 SWITCH TO EXPR CONTEXT
FTE1     BCTR  R10,0                   CLOPT
         TM    19(R9),X'80'            ABS, SIGN, LENGTH, ENTIER ?
         BZ    FUB2                    NO
         BAL   R4,OPDREC               EXAMINE PARAMETER
         CLI   19(R9),X'E0'            PROCEDURE ID 'LENGTH' ?
         BE    FTG1                    YES
         CLI   19(R9),X'F0'            PROCURE 'ENTIER' ?
         BE    FUD1                    YES
FTH2     TM    1(R9),X'02'             PARAMETER OF TYPE REAL ?
         BO    FUB2                    YES
         BAL   R4,TRINRE               NO, GENERATE INTEGER REAL CONV
         B     FUB2
*
FTD3     L     R11,DECAADD             SWITCH TO PROGRAM CONTEXT
         MVC   HALFW,13(R9)
         LH    R7,HALFW                RESTORE OBJ TIME STACK PTR
         NI    COMPFLGS,255-OPERAND    RESET OPERAND
         LA    R9,20(R9)               CLEAR FOUR OPERANDS
         BCT   R10,SPECTEST            CLOPT, BRANCH TO SPECIAL TEST
*
*        GENERATE CODE FOR 'LENGTH'
*
FTG1     BAL   R4,ROUTIN15             LOAD VW-PLACE
         MVC   FTG12+4(2),WPLACE       ADDR OF STRING TO GEN CODE
         MVZ   FTG12+4(1),VPLACE
         BAL   R4,ROUTINE7             FIND NEXT GPR
         LR    R15,R14
         SLL   R14,4                   STORE
         STC   R14,FTG13+1                   REG NR
         STC   R14,FTG13+5                          IN
         STC   R14,FTG13+7                             GENER CODE
         OR    R15,R14
         STC   R15,FUOTRG              SAVE REG NUMBER USED
         LA    R2,FTG12
         BAL   R14,GENTXTS
         DC    H'14'                   GENERATE 14 BYTES
*
         B     FUF1
*
FTG12    MVC   HW(2,FSA),0(0)          *** GENERATED CODE ***
FTG13    LH    0,HW(0,FSA)             *** GENERATED CODE ***
         BCTR  0,0                     *** GENERATED CODE ***
         BCTR  0,0                     *** GENERATED CODE ***
*
*        GENERATE CODE FOR 'SIGN'
*
FTG3     LA    R3,FTG35                RETURN ADDR IF VALUE IN REG
         BAL   R4,ROUTIN15             LOAD VW-PLACE IF NOT VAL IN REG
         BAL   R4,ROUTIN11             FIND NEXT FPR
         LR    R15,R14                 REG
         SLL   R15,4                       NR
         STC   R15,FTG31+1                    TO
         OR    R15,R14                          GENER
         STC   R15,FTG33+1                             CODE
         BAL   R4,ROUTIN12             REG NOT OCCUPIED
         MVC   FTG31+2(2),WPLACE
         MVZ   FTG31+2(1),VPLACE       ADDR TO GENER CODE
         BAL   R2,GENTXTP4             GENERATE 4 BYTES
FTG31    LD    0,0(0)                  *** GENERATED CODE ***
FTG32    BAL   R2,GENTXTP2             GENERATE 2 BYTES
FTG33    LTDR  0,0                     *** GENERATED CODE ***
         B     FTH4
*
FTG35    MVC   FTG33+1(1),VPLACE       REG NUMBER TO GENER CODE
         BAL   R4,ROUTIN12             REG NOT OCCUPIED
         B     FTG32
*
FTH4     BAL   R4,ROUTINE7             FIND NEXT GPR
         LR    R15,R14
         SLL   R14,4
         OR    R15,R14
         STC   R15,FUOTRG              SAVER REG NUMBER
         STC   R14,FTH42+3             REG
         STC   R14,FTH43+1                 NUMBER TO
         STC   R14,FTH43+7                           GENER CODE
         LA    R2,FTH42
         BAL   R14,GENTXTS
         DC    H'18'                   GENERATE 18 BYTES
*
         B     FUF1
*
FTH42    BALR  BRR,0                   *** GENERATED CODE ***
         LA    0,1                     *** GENERATED CODE ***
         BP    16(,BRR)                *** GENERATED CODE ***
FTH43    BCTR  0,0                     *** GENERATED CODE ***
         BZ    16(,BRR)                *** GENERATED CODE ***
         BCTR  0,0                     *** GENERATED CODE ***
*
FUB2     CLI   19(R9),X'80'            PROCEDURE ID 'ABS' ?
         BE    FUB3                    YES
         CLI   19(R9),X'C0'            'SIGN' ?
         BE    FTG3                    YES
         B     FUD2
*
*        GENERATE CALL OF 'ENTIER'
*
FUD1     TM    1(R9),X'03'             OPERAND INTEGER ?
         BNM   FUD12
         TM    1(R9),X'01'
         BO    FUD14                   YES
FUD12    LA    R3,FUD13                RETURN ADDR IF VALUE IN REG
         BAL   R4,ROUTIN15             LOAD VW-PLACE IF NOT VAL IN REG
         TM    RIR+1,X'01'             FPR0 FREE ?
         BZ    FUD10                   YES
         BAL   R4,ROUTIN14             NO, CLEAR IT
         NI    RIR+1,X'FE'             SET FPR0 NOT OCCUPIED
FUD10    MVC   FUD15+2(2),WPLACE
         MVZ   FUD15+2(1),VPLACE       ADDR OF VALUE TO GEN CODE
         BAL   R2,GENTXTP4             GENERATE 4 BYTES
FUD15    LD    0,0(0,0)                *** GENERATED CODE ***
FUD11    BAL   R4,ROUTINE7             INDICATE NEXT GPR
         LR    R15,R14
         SLL   R14,4
         STC   R14,FUD16+1             REG NUMBER TO GEN CODE
         OI    FUD16+1,X'0E'           REG R14 TO GEN CODE
         OR    R15,R14
         STC   R15,FUOTRG              SAVE REG NUMBER USED
         TM    RII,X'01'               ADR FREE ?
         BZ    FUD17                   YES
         BAL   R4,ROUTIN10             NO, CLEAR IT
FUD17    BAL   R2,GENTXT6              GENERATE 6 BYTES
         BAL   ADR,ENTIER(FSA)         *** GENERATED CODE ***
FUD16    LR    0,R14                   *** GENERATED CODE ***
         B     FUF1
*
FUD13    TM    3(R9),X'F0'             VALUE IN FPR0 ?
         BZ    FUD18                   YES
         TM    RIR+1,X'01'             NO, FPR0 FREE ?
         BZ    *+12                    YES
         BAL   R4,ROUTIN14             NO, CLEAR IT
         NI    RIR+1,X'FE'             SET FPR0 NOT OCCUPIED
         MVN   FUD19+1(1),VPLACE       REG NUMBER TO GENER CODE
         BAL   R2,GENTXTP2
FUD19    LDR   0,0                     *** GENERATED CODE ***
         BAL   R4,ROUTIN12             REG NOT OCCUPIED
         B     FUD11
*
FUD18    NI    RIR+1,X'FE'             SET FPR0 NOT OCCUPIED
         B     FUD11
*
FUD14    MVC   15(5,R9),0(R9)          PARAMETER IS INSERTED AS RESULT
         TM    0(R9),X'40'             VALUE OR ADDR IN REG
         BO    FUG3                    NO
         SR    R4,R4
         IC    R4,3(R9)                GET
         SRL   R4,4                        REG NUMBER
         SLL   R4,2                    4 TIMES REG NUMBER
         LA    R9,15(,R9)              ADJUST R9
         ST    R9,RUTI(R4)             INTRODUCE CORRECT R9 ADDR
         B     SPECTEST                BRANCH TO SPECIAL TEST
*
*        GENERATE CODE FOR 'ABS'
*
FUB3     LA    R3,FUB4                 RETURN ADDR IF VALUE IN REG
         BAL   R4,ROUTIN15             LOAD VW-PLACE IF NOT VAL IN REG
         BAL   R4,ROUTIN11             FIND NEXT FPR
         LR    R15,R14
         SLL   R15,4
         STC   R15,FUB31+1             REG NUMBER TO GEN CODE
         OR    R15,R14                 SAVE REG NUMBER
         STC   R15,FUOTRG              IN TWO HALF BYTES
         MVC   FUB31+2(2),WPLACE       ADDR OF VALUE TO GENER CODE
         MVZ   FUB31+2(1),VPLACE
         BAL   R2,GENTXTP4             GENERATE 4 BYTES
FUB31    LD    0,0(0)                  *** GENERATED CODE ***
         MVC   FUB41+1(1),FUOTRG       REG NUMBER TO NEXT GENER INSTR
         B     FUB42
*
FUB4     IC    R15,VPLACE              REG NUMBER TO GENER CODE
         STC   R15,FUB41+1
         STC   R15,FUOTRG              SAVE BYTE
FUB42    BAL   R2,GENTXTP2             GENERATE 2 BYTES
FUB41    LPDR  0,0                     *** GENERATED CODE ***
         B     FUF2
*
*        GENERATE CALL FOR REMAINING FUNCTIONS
*
FUD2     BAL   R4,ADRTRANS             GENERATE ADDR TRANSFER
         LA    R9,10(R9)               ADJUST R9 FOR SUBROUTINE
         BAL   R4,LOADR1               GEN LOAD OF PARREG AND FNC CALL
         SH    R9,KH10                 RESTORE R9
         MVI   FUOTRG,X'00'            INDICATE FPR0
         OI    RIR+1,X'01'             INDICATE FPR0 OCCUPIED
         MVI   CIR+1,X'00'
*
*        A FLOATING POINT REG IS USED
*
FUF2     SR    R15,R15                 GET
         IC    R15,FUOTRG              GET REG NUMBER USED
         SRL   R15,4
         SLL   R15,1                   MULT BY 2
         LA    R1,15(,R9)              ADDR OF OPERAND
         ST    R1,RUTR(R15)            TO RUTR
*
*        REPLACE PROCEDURE ID BY RESULT
*
FUG2     MVC   HALFW,13(R9)            RESTORE OBJ TIME ST POINTER
         LH    R7,HALFW
         AH    R7,ONEENTRY             ADD SIZE OF ONE ENTRY
         STH   R7,FUOTSC+4             OBJ T STACK DISP TO GEN CODE
         MVZ   FUOTSC+4(1),FUOTRG      INSERT REGISTER NUMBER
         MVC   FUOTSC+3(1),SPBNST+1    CURRENT PBN
         MVC   15(5,R9),FUOTSC+1       INSERT OPERAND INTO STACK
         MVI   FUOTSC+2,X'32'          RESTORE TYPE 'REAL'
FUG3     LA    R9,15(R9)               CLEAR THREE OPERANDS
         B     SPECTEST                BRANCH TO SPECIAL TEST
*
*        A GENERAL REGISTER IS USED
*
FUF1     MVI   FUOTSC+2,X'31'          INSERT TYPE 'INTEGER'
         SR    R15,R15                 GET
         IC    R15,FUOTRG                  REG
         SRL   R15,4                           NR
         SLL   R15,2                   MULTIPLY BY 4
         LA    R1,15(,R9)              GET ADDR OF OPERAND
         ST    R1,RUTI(R15)            STORE ADDR IN RUTI
         B     FUG2
*
*        GEN LOAD PARREG AND STAND PROC CALL
*
LOADR1   ST    R4,LOADR1R              SAVE RETURN ADDR
         TM    FUOTFP,X'80'            FPR0 USED BUT NOT CLEARED ?
         BZ    LOADR2                  NO
         NI    FUOTFP,X'7F'            RESET INDICATOR
         BAL   R4,CLEARRG              SAVE ALL REGS
LOADR2   MVC   HALFW,3(R9)             GET
         LH    R7,HALFW                    ADDR OF
         LH    R15,ONEENTRY                        PARAMETER
         AR    R15,R7                                        LIST
         STH   R15,FPB21+2             ADDR TO GENERATED CODE
         NI    9(R9),X'FC'             LAT DISP TO GENERATED CODE
         MVC   FPB22+3(1),9(R9)
         BAL   R2,GENTXT4              GENERATE 4 BYTES
FPB21    LA    R1,0(CDSA)              *** GENERATED CODE ***
         BAL   R2,GENTXT6              GENERATE 6 BYTES
FPB22    L     ENTRY,0(LAT)            *** GENERATED CODE ***
         BALR  R14,ENTRY               *** GENERATED CODE ***
         L     R4,LOADR1R
         BR    R4
*
*        GENERATE TRANSFER OF PARAM ADDR
*
ADRTRANS ST    R4,LOADR1R              SAVE RETURN ADDR
         BAL   R4,GETPARP              GET DISP IN OBJ T STACK FOR PAR
         STH   R15,ADRTR2+2            DISP
         STH   R15,ADRTR4+2                 TO
         STH   R15,ADRTR6+2                    GENERATED
         STH   R15,ADRTR8+2                              CODE
         TM    16(R9),X'02'            STANDARD FUNCTION HANDLED ?
         BZ    ADRTR0                  NO
         TM    1(R9),X'02'             YES, PARAMETER OF TYPE REAL ?
         BO    ADRTR0                  YES
         BAL   R4,OPDREC               NO, GENERATE CONVERSION
         BAL   R4,TRINRE
ADRTR0   BAL   R4,LDVWPLC              LOAD VWPLACE
         TM    0(R9),X'20'             ADDR OR VALUE ?
         BO    ADRTR3                  ADDR
         MVC   ADRTR1+2(2),WPLACE      MOVE ADDR OF VALUE TO GEN CODE
         MVZ   ADRTR1+2(1),VPLACE
         BAL   R2,GENTXT4              GENERATE 4 BYTES
ADRTR1   LA    R14,0(0)                *** GENERATED CODE ***
         BAL   R2,GENTXT4              GENERATE 4 BYTES
ADRTR2   ST    R14,0(CDSA)             *** GENERATED CODE ***
         B     ADRTR7
*
ADRTR3   OI    FUOTFP,X'80'            INDICATE ADDR FROM ADR
ADRTR31  CLI   VPLACE,X'AA'            ADDR IN STACK ?
         BE    ADRTR5                  YES
         BAL   R2,GENTXT4              GENERATE 4 BYTES
ADRTR4   ST    ADR,0(CDSA)             *** GENERATED CODE ***
         BAL   R4,RELADR               RELEASE REG ADR
         B     ADRTR61
*
ADRTR5   MVC   ADRTR6+4(2),WPLACE      DISP IN STACK TO GENER CODE
         OI    ADRTR6+4,X'A0'          REG CDSA TO GENERATED CODE
         OI    ADRTR6+2,X'A0'
         SH    R7,ONEENTRY             RELEASE STACK
         BAL   R2,GENTXT6              GENERATE 6 BYTES
ADRTR6   MVC   0(4,0),0(0)             *** GENERATED CODE ***
ADRTR61  BAL   R4,CLEARRG              RESTORE ALL REGISTERS USED
ADRTR7   TM    16(R9),X'03'            STAND FUNCTION HANDLED ?
         BNZ   ADRTR9                  YES, CONV ALREADY MADE IF NEC
         TM    FOE2PCH,X'03'           CONVERSION NECESSARY ?
         BZ    ADRTR9                  NO
         OI    ADRTR8+2,X'A0'          REG CDSA TO GENERATED CODE
         BAL   R2,GENTXT4              GENERATE 4 BYTES
ADRTR8   OI    0(0),X'80'              *** GENERATED CODE ***
ADRTR9   L     R4,LOADR1R              LOAD RETURN ADDR
         BR    R4
*
*        RELEASE OF REGISTER ADR
*
RELADR   SH    R7,ONEENTRY             RELEASE STACK
         XI    RII,RIIADRM             ADR NOT OCCUPIED
         BR    R4
*
*        COMPUTE OBJ TIME ST DISP FOR PARAMETER
*
GETPARP  MVC   HALFW,13(R9)            GET STORED P-VALUE
         SR    R15,R15
         IC    R15,10(R9)              GET NR OF PARAMS TIMES FOUR
         AH    R15,HALFW               ADD TO STORED P
         AH    R15,ONEENTRY            ADD SIZE OF ONE ENTRY
         SH    R15,KH4                 SUBTRACT SIZE OF ONE PAR ENTRY
         BR    R4
*
*        CONSTANTS AND AREAS
*
FOE2PCH  DC    H'0'                    SAVE PARAM CHAR FROM PROC ID
SYSACTF  DC    H'0'                    TEMPORARY STORE OF SYSACT FUNCT
FUOTSC   DC    X'0088'                 AREA TO BUILD
         DC    X'3200'                                OPD REPR
         DC    X'0000'                                         RESULT
FUOTRG   DC    X'00'                   REGISTER NUMBER USED
FUOTFP   DC    X'00'                   TO IND ADDR FROM ADR IF ST FUNC
FGBGADR  DC    A(FGBG20)
LOADR1R  DC    F'0'                    TO SAVE RETURN ADDR
*
***********************************************************************
*
*        COMPILER PROGRAM - CP64
*
***********************************************************************
*
*        OPENING BRACKET
*        CONTEXT              PROGRAM, STATEMENT, EXPRESSION
*        SOURCE OPERATOR      (
*        STACK OPERATOR       ANY
*        OPERAND              NONE OR PROCEDURE IDENTIFIER
*
         USING CP64,R12
CP64     TM    COMPFLGS,OPERAND        OPERAND ON ?
         BO    GDAE1                   YES, BRANCH
         C     R11,DECAADD             TEST CONTEXT
         BNE   GDAB3                   NOT PROGRAM CONTEXT, BRANCH
         BAL   R4,SERR3                ERROR
         DC    H'176'                  ERROR 176
*
         BAL   R4,STACKAPI             API TO OPERAND STACK
GDAE1    BAL   R4,MOVEOPTK             CURRENT CONTEXT OPERATOR TO R10
         MVC   0(1,R10),99(R11)
         C     R11,DECAADD             PROGRAM CONTEXT ?
         BE    GDAG1                   YES
         TM    0(R9),X'10'             PROC API ?
         BO    GDAG1                   YES
         TM    1(R9),X'03'             'TYPE' PROCEDURE ?
         BNZ   GDAG1                   YES
         BAL   R4,SERR3                NO, ERROR
         DC    H'168'                  ERROR 168
*
         B     GDAH11
*
GDAG1    L     R11,STC                 SWITCH TO STATEMENT CONTEXT
GDAH1    TM    1(R9),X'C0'             OPERAND PROCEDURE IDENTIFIER ?
         BNZ   GDAJ1                   YES
         BAL   R4,SERR3                NO, ERROR
         DC    H'183'                  ERROR 183
*
GDAH11   BAL   R4,MOVEOPDK             GET ONE R9 ENTRY
         B     GDBC2
*
GDAJ1    BAL   R4,MOVEOPDK             GET ONE R9 ENTRY
         TM    6(R9),X'40'             STANDARD PROCEDURE ?
         BZ    GDCA1                   YES
GDBA1    TM    5(R9),X'10'             PROC API ?
         BO    GDBA3                   YES
         TM    8(R9),X'F0'             NUMBER OF PARAMETERS ZERO ?
         BNZ   GDBA2                   NO
         TM    6(R9),X'30'             IS PROCED FORMAL PARAMETER
         BNM   GDBA1A                  NO, ERROR
         TM    6(R9),X'10'             CALLED BY NAME
         BO    GDBA3                   YES, OK
GDBA1A   BAL   R4,SERR1
         DC    H'187'                  ERROR 187
*
GDBB15   EQU   *
GDBC2    MVC   5(5,R9),API             API REPLACES NEXT LAST ST ENTRY
GDBA3    BAL   R4,MOVEOPDK             INCR OPERAND STACK
GDBA4    BAL   R4,LATRES               RESERVE ONE LAT ENTRY
GDBB4    MVC   8(2,R9),LN              LN TO R9
         MVC   0(2,R9),ZEROHW          SET PARAM NUMBER TO ZERO
         TM    COMPFLGS,COMPMODE       SYNTAX CHECK MODE ?
         BO    GDBH4                   YES, BRANCH
         BAL   R4,CLEARRG              STORE ALL REGS USED
         MVC   GDBG45+2(2),LN          GENERATE BRANCH PAST THUNKS
         BAL   R2,GENTXT4              GENERATE 4 BYTES
GDBG45   L     ADR,0(LAT)              *** GENERATED CODE ***
         BAL   R2,GENTXT2              GENERATE 2 BYTES
         BR    ADR                     *** GENERATED CODE ***
GDBH4    ST    R6,WORKPL
         MVC   2(3,R9),WORKPL+1        PRPOINT TO R9
         MVI   1(R10),XFDELTA          PROCEDURE BRACKET TO R10
GDBH42   BAL   R4,MOVEOPTK             INCREASE R10
         BR    R5                      BRANCH TO SUBSTART
*
GDBA2    TM    5(R9),X'C0'             OPND IN REG OR OBJ TIME ST ?
         BM    GDBA3                   YES (NOT FORMAL PARAMETER)
         TM    6(R9),X'30'             OPND FORMAL PARAMETER ?
         BNM   GDBA3                   NO
         TM    6(R9),X'20'             YES, CALLED BY VALUE ?
         BZ    GDBA3                   NO
GDBB2    BAL   R4,SERR1                YES, ERROR
         DC    H'174'                  ERROR 174
*
         B     GDBB15
*
*        OPERAND IS STANDARD PROCEDURE ID
*
GDCA1    TM    COMPFLGS,COMPMODE       SYNTAX CHECK MODE ?
         BO    GDCG1                   YES, BRANCH
         TM    9(R9),X'80'             ABS, SIGN, LENGTH, ENTIER ?
         BO    GDCC1                   YES
         IC    R15,9(R9)               MOVE 0-BIT
         N     R15,HEXFC                          INTO
         A     R15,LATAB                               CORR
         NI    0(R15),X'7F'                                 LAT ENTRY
GDCC1    STH   R7,HALFW                STORE P-VALUE IN R9
         MVC   3(2,R9),HALFW
         AH    R7,ONEENTRY             RESERVE SPACE FOR PARAM-LIST
         LA    R7,8(R7)
         STH   R7,WORKPL               CHECK FOR P-OVERFLOW
         BAL   R4,MAXCH
GDCG1    MVC   0(2,R9),ZEROHW          ZERO PARAM COUNT FIELD
         MVI   1(R10),X'2A'            STAND PROCEDURE BRACKET TO R10
         B     GDBH42
*
GDAB3    L     R11,EXC                 SWITCH TO EXPR CONTEXT
         BAL   R4,MOVEOPTK             SOURCE OPERATOR TO STACK
         MVC   0(1,R10),0(R8)
         BR    R5                      BRANCH TO SUBSTART
*
*        CONSTANT
*
         DC    0F'0'
HEXFC    DC    X'000000FC'             EXTRACT DISP IN LAT
*
***********************************************************************
*
*        COMPILER PROGRAM - CP71
*
***********************************************************************
*
*        STATEMENT END
*        CONTEXT              STATEMENT
*        SOURCE OPERATOR      EPSILON, ETA, END, ELSE, ;, S.E. STC
*                             (SEE MATRIX)
*        STACK OPERATOR       S.E. STC (SEE MATRIX)
*        OPERAND              NOT DECISIVE
*
         USING CP71,R12
CP71     L     R11,DECAADD             SWITCH TO PROGRAM CONTEXT
         B     COMP                    GOTO COMP
*
***********************************************************************
*
*        COMPILER PROGRAM - CP84
*
***********************************************************************
*
*        NOT PERMITTED OPERATOR PAIR
*        SOURCE AND STACK OPERATOR     SEE MATRIXES
*        OPERAND                       NONE OR ONE
*
         USING CP84,R12
CP84     BAL   R4,SERR1                TERMINATING ERROR
         DC    H'173'                  ERROR 173
*
         B     CPERR1                  BRANCH TO TERMINATION
*
***********************************************************************
*
*        END OF IEX50004
*
***********************************************************************
*
