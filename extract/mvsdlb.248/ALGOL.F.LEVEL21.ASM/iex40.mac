X40 TITLE 'IEX40 - SUBSCRIPT HANDLING AND INITIALIZATION OF COMPILATIONX
                PHASE, ALGOL F'
*
*        COMPONENT ID - 360S-AL-531 ALGOL F COMPILER
*
*        FUNCTION/OPERATION -
*        IEX40000 BUILDS THE OPTIMIZATION TABLE (OPTAB) USING
*        THE SUBSCRIPT TABLE, THE LEFT VARIABLE TABLE AND THE FOR
*        STATEMENT TABLE. AN OPTAB ENTRY CORRESPOND TO AN
*        OPTIMIZABLE SUBSCRIPT EXPRESSION INSIDE A FOR STATEMENT.
*        IF NO OPTAB IS PRODUCED THIS IS INDICATED IN THE
*        COMPILER STATUS BYTES IN COMPFLGS
*        IEX40001 IS THE INITIALIZATION OF NEXT MODULE, IEX50,
*        AND PERFORMS THE FOLLOWING FUNCTIONS -
*        CALCULATION AND RESERVATION OF STORAGE AREAS NEEDED
*        LOADING REGISTERS WITH START ADDRESSES
*        READING THE FIRST RECORDS OF SOURCE PROGRAM AND OPTAB
*        SETTING INITIAL VALUES IN THE PRIVATE PART OF COMMON
*        WORKAREA
*
*        ENTRY POINT - IEX40000
*
*        INPUT -
*        IEX40000 READS TWO TABLES CONSTRUCTED IN IEX30
*        FROM SYSUT3. THE SUBSCRIPT TABLE (SUTAB) CONTAINS
*        ENTRIES FOR LINEAR SUBSCRIPT EXPRESSIONS IN FOR
*        STATEMENTS THAT ARE OPTIMIZABLE IN REGARD TO
*        SUBSCRIPTS.
*        THE LEFT VARIABLE TABLE (LVTAB) CONTAINS ENTRIES FOR
*        INTEGER LEFT VARIABLES IN FOR STATEMENTS THAT ARE
*        OPTIMIZABLE IN REGARD TO SUBSCRIPTS.
*        IEX40001 READS THE FIRST TWO RECORDS OF THE
*        SOURCE PROGRAM FROM SYSUT2 INTO TWO SOURCE BUFFERS.
*        THE FIRST TWO RECORDS OF OPTAB ARE READ IN FROM SYSUT3
*        TO TWO OPTAB BUFFERS
*
*        OUTPUT -
*        THE OPTIMIZATION TABLE (UPTAB)IS WRITTEN OUT ON SYSUT3.
*        OPTAB CONTAINS ONE ENTRY FOR EVERY OPTIMIZABLE
*        SUBSCRIPT EXPRESSION IN A FOR STATEMENT
*
*        EXTERNAL ROUTINES -
*        THE INTERRUPT ROUTINES OF IEX00 ARE USED
*
*        EXIT - NORMAL - CONTROL IS GIVEN TO THE NEXT LOAD
*        MODULE BY MEANS OF XCTL EP=IEX50
*
*        EXITS - ERROR -
*        INPUT/OUTPUT ERRORS AND PROGRAM INTERRUPTS ARE HANDLED
*        BY A DIRECTORY ROUTINE WHICH RETURNS CONTROL TO THE
*        INTERRUPTED MODULE. IF THE ERROR OCCURED BEFORE THE
*        GETMAIN IN IEX40001 CONTROL IS GIVEN TO THE TERMINATING
*        MODULE BY MEANS OF XCTL EP=IEX51ER2
*        IF THE ERROR OCCURED AFTER THE GETMAIN CONTROL IS GIVEN
*        TO THE TERMINATING MODULE BY MEANS OF
*        XCTL EP=IEX51ER1
*
*        TABLES/WORKAREAS -
*        THE FOR STATEMENT TABLE (FSTAB) CONSTRUCTED IN IEX30
*        AND POSSIBLY REVISED BY IEX40000 CONTAINS
*        CLASSIFICATIONS OF THE FOR STATEMENTS
*
*        ATTRIBUTES - NONE
*
*        NOTES -
*        THE OPERATION OF THIS MODULE DOES NOT DEPEND UPON ANY
*        SPECIAL REPRESENTATION OF THE EXTERNAL CHARACTER SET.
*        THIS MODULE IS ONLY INTENDED TO BE EXECUTED IN
*        CONNECTION WITH THE OTHER MODULES OF THE ALGOL COMPILER.
*        IN PARTICULAR IT REQUIRES THE COMMON WORKAREA
*
*
IEX40000 CSECT
*
*        BIT PATTERNS
*
FIRSTM   EQU   X'20'                   FIRST ENTRY IN SUTAB CHAIN
SUCM     EQU   X'10'                   SUCCEDING ENTRY IN SUTAB CHAIN
LASTM    EQU   X'30'                   LAST ENTRY IN SUTAB CHAIN
OFFM     EQU   X'CF'                   TURN OFF SUTAB CHAIN BITS
SUOP     EQU   X'40'                   SUBSCRIPT OPTIMIZATION BIT
*
         IEXENTRY 'IEX40000 LEVEL 2.1 &SYSDATE &SYSTIME'
*
         USING IEX40000,R12
         LR    R12,R15
*
         USING WORKAREA,R13
         TM    COMPFLGS,COMPMODE       SYNTAX CHECK MODE ?
         BO    NOSUTAB                 YES
*
*        INITIALIZE SUTAB
*
         CLC   ZSUTEN(4),KF0           SUTAB EMPTY ?
         BE    NOSUTAB                 YES
*
*        ANY NESTED FOR LOOPS ?
*
         SR    R2,R2
         ST    R2,FOR1
         MVC   FOR1+4(255),FOR1+3      SET FOR STMT COUNT
         MVC   FOR2+2(255),FOR2+1      AREAS TO ZERO
         LH    R0,FSNMAX
         AH    R0,KH1                  NO OF FOR STMT
         LA    R1,GPTAB
GP1      LA    R1,3(,R1)               PTR TO NEXT GPTAB RECORD
         CLC   KF0(1),2(R1)            FOR STATEMENT ?
         BE    GP1                     NO
         SH    R0,KH1                  ALL FOR STMT CHECKED ?
         BM    GP10                    YES
         MVC   FOR4(3),0(R1)           MOVE GPTAB RECORD
         LH    R3,FOR4                 MULTIPLY GPTAB PTR BY 3
         AR    R3,R3                   GIVES CORRECT ADDR
         AH    R3,FOR4                 IN GPTAB
         LA    R3,GPTAB(R3)
         CLC   KF0(1),2(R3)            NESTED ?
         BE    GP1                     NO
         IC    R2,FOR4+2               FOR STMT NO+1
         LA    R4,FOR2-1(R2)
         MVC   0(1,R4),2(R3)           STORE ENCLOSING FSN
         B     GP1
*
GP10     LA    R2,TERMIN2              TERMINATION ADDR
         ST    R2,ERET
         L     R0,SUTAB40S             RESERVE TABLE AREA
         A     R0,OPTABS
         AR    R0,R0
         AH    R0,KH8
         ST    R0,TABSIZE              SAVE LENGTH OF TABLE AREA
*
         GETMAIN R,LV=(0)              ALLOCATE STORAGE TO SUTAB
*
         LA    R2,TERM1                ERROR RETURN ADDR
         ST    R2,ERET
         ST    R1,TSTART               SUTAB START ADDR
*
*        READ SUTAB
*
         LH    R10,SUCOUNT             NUMBER OF SUTAB RECORDS - 1
         L     R9,SUTYPE               SUTAB RECORD IDENTIFICATION
         L     R8,SUTAB30S             LENGTH OF WRITTEN SUTAB RECORDS
         L     R11,TSTART              TABLE START ADDR
         BAL   R7,READ                 READ FULL SUTAB
*
*        R11                           END ADDR OF UNSORTED SUTAB
*        R10                           FOR STATEMENT NUMBER
*        R9                            CURRENT PTR IN UNSORTED SUTAB
*        R8                            PTR FOR CHAINING CHECK
*        R7                            FULL LENGTH OF DELETED ENTRIES
*
*        SCAN SUTAB FOR ENTRY CHAINING AND ENTRY DELETION
*
         L     R9,TSTART               TABLE START ADDR WITH KEY
         LA    R9,4(,R9)               DELETE KEY
         LR    R11,R9                  CLACULATE END ADDR
         A     R11,ZSUTEN
         SR    R10,R10
         SR    R7,R7
*
SUTABS   IC    R10,0(,R9)              ISOLATE ACTUAL FOR STATE NUMBER
         LA    R2,FSTAB(R10)           ADDR ACRUAL FOR ENTRY
         TM    0(R2),SUOP              SUBSCRIPT OPTIMIZATION POSSIBLE?
         BZ    SUTABS2                 YES
         LA    R7,14(,R7)              LENGTH OF DELETED ENTRIES
         MVI   0(R9),X'FF'             NOT OPTIMIZABLE ENTRY
         LA    R9,14(,R9)              GET NEXT ENTRY
         CR    R9,R11                  SUTAB END ?
         BE    SORTSU                  YES
         B     SUTABS
*
SUTABS2  LR    R8,R9                   CHECK ENTRY CHAINING
SUTABS3  LA    R8,14(,R8)              SCAN SUTAB FOWORD FOR CHAINING
         CR    R8,R11                  SUTAB END ?
         BE    SORTSU                  YES
         CLC   10(4,R9),10(R8)         CHAIN ?
         BE    SUTABS4                 YES
         LR    R9,R8                   PROCESS NEW ENTRY AS FIRST
         B     SUTABS
*
SUTABS4  IC    R10,0(,R8)              ISOLATE FSN OF NEW ENTRY
         LA    R2,FSTAB(R10)           ADDR FSTAB ENTRY
         TM    0(R2),SUOP              SUBSCRIPT OPTIMIZABLE ?
         BZ    SUTABS5                 YES
         MVI   0(R8),X'FF'             NO, DELETE ENTRY
         LA    R7,14(,R7)              COUNT LENGTH OF DELETED ENTRIES
         B     SUTABS3                 CHECK NEXT ENTRY
*
SUTABS5  OI    10(R9),FIRSTM           INDICATE FIRST ENTRY IN CHAIN
SUTABS6  LR    R9,R8                   ADDR CURRENT LAST CHAIN ENTRY
SUTABS7  LA    R8,14(,R8)              CHECK NEXT SUTAB ENTRY
         CR    R8,R11                  SUTAB END ?
         BE    SUTABS9                 YES
         CLC   10(4,R9),10(R8)         ANOTHER CHAINED ENTRY ?
         BE    SUTABS8                 YES
         OI    10(R9),LASTM            INDICATE ENTRY IN CHAIN
         LR    R9,R8                   PROCESS NEW ENTRY AS FIRST
         B     SUTABS
*
SUTABS8  IC    R10,0(,R8)              NEW FOR STATEMENT NUMBER
         LA    R2,FSTAB(R10)           ADDR FSTAB ENTRY
         TM    0(R2),SUOP              SUBSCRIPT OPTIMIZATION POSSIBLE?
         BZ    SUTABS10                YES, CHAIN
         MVI   0(R8),X'FF'             DELETE ENTRY
         LA    R7,14(,R7)              CALCULATE DELETED LENGTH
         B     SUTABS7
*
SUTABS9  OI    10(R9),LASTM            INDICATE LAST ENTRY IN CHAIN
         B     SORTSU
*
SUTABS10 OI    10(R9),SUCM             INDICATE BETWEEN ENTRY
         B     SUTABS6
*
SORTSU   L     R3,TSTART
         LA    R2,4(,R3)               START ADDR OF UNSORTED SUTAB
         ST    R2,ZSTAD                START OF UNSORTED TABLE
         L     R9,ZSUTEN               GET END OF UNSORTED SUTAB
         AR    R9,R2
         A     R3,TABSIZE              END ADDR OF SORTED SUTAB
         ST    R3,ZSUDEN
         S     R3,ZSUTEN
         AR    R3,R7                   START OF SORTED SUTAB
         C     R3,ZSUDEN               WHOLE SUTAB DELETED ?
         BE    NOSUTAB1                YES
         ST    R3,ZSUDAD
         ST    R3,ZSORTSTA
         LA    R11,14                  ENTRY LENGTH
         BAL   R15,SORT                SORT SUTAB
*
*        INITIALIZE OPTAB BUFFERS
*
         L     R2,TSTART
         ST    R2,ZOTAWRI              SECOND OPTAB BUFFER
         A     R2,OPTABS
         ST    R2,ZOTAFILL             FIRST OPTAB BUFFER
         A     R2,OPTABS
         ST    R2,ZOTMAX               ACTUAL BUFFER END
         CLC   ZLEVEN(4),KF0           LVTAB EMPTY ?
         BNE   SORTLE                  NO
         MVC   ZLESTA(4),ZOTMAX        SET DUMMY START ADDR
         B     SORTLE1
*
SORTLE   LH    R10,LVCOUNT             NUMBER OF LVTAB RECORDS - 7
         L     R9,LVTYPE               LVTAB RECORD IDENTIFICATION
         L     R8,LVTAB30S             LENGTH OF LVTAB RECORD
         L     R11,TSTART              START ADDR OF TABLE AREA
         BAL   R7,READ                 READ LVTAB INTO CORE
         L     R2,TSTART
         LA    R2,4(,R2)
         ST    R2,ZSTAD                START ADDR OF UNSORTED TABLE
         A     R2,ZLEVEN
         LR    R9,R2                   END OF UNSORTED TABLE
         C     R2,ZOTMAX               LVTAB LONGER THAN OPTAB BUFFER ?
         BH    *+8                     YES
         L     R2,ZOTMAX               NO, START SORTED TAB AFTER OPTAB
         ST    R2,ZSORTSTA             START ADDR OF SORTED TABLE
         ST    R2,ZLESTA
         LA    R11,4                   ENTRY LENGTH
         BAL   R15,SORT                SORT LVTAB
*
SORTLE1  L     R2,ZLESTA
         A     R2,ZLEVEN
         MVI   0(R2),X'FF'             SET LVTAB END
         L     R2,AUT3DCB              R2 -> SYSUT3 DCB
*
         CLOSE ((R2),REREAD),TYPE=T    POINT TO BEGINNING OF DATASET
*
*        R4                            PTR TO START OF LVTAB GROUP
*        R5                            CURRENT PTR IN LVTAB GROUP
*        R6                            CURRENT SUTAB PTR
*        R7                            SUTAB CHAIN SEARCHING PTR
*        R8                            CURRENT OPTAB BUFFER PTR
*        R9
*
OPTAB    L     R4,ZLESTA               START OF LVTAB
         L     R6,ZSUDAD               START OF SUTAB
         L     R8,ZOTAFILL             START OF FIRST OPT AB BUFFER
*
*        DOES LVTAB GROUP CORRESPOND TO THIS SUTAB ENTRY
*
OPT1     CLC   0(1,R6),0(R4)
         BL    OPT3                    NO LVTAB ENTRIES TO THIS FOR ST
         LR    R5,R4                   INITIALIZE CURRENT GROUP PTR
         BH    OPT6                    SCAN FOR NEXT LVTAB GROUP
OPT2     CLC   1(3,R5),4(R6)           CHECK FACTOR
         BE    OPT71                   NO OPTIMIZATION
         CLC   1(3,R5),7(R6)           CHECK ADDEND
         BE    OPT7                    NO OPTIMIZATION
         LA    R5,4(0,R5)              ADDR NEXT LVTAB ENTRY
         CLC   0(1,R5),0(R4)           NEW ENTRY OF SAME GROUP ?
         BE    OPT2                    YES, PROCEED CHECK
OPT3     C     R8,ZOTMAX               END OF OPTAB BUFFER ?
         BNL   OPT10                   YES
OPT4     MVC   0(14,R8),0(R6)          MOVE SUTAB ENTRY TO OPTAB
         SR    R2,R2
         IC    R2,0(0,R8)              FOR STATEMENT NO
         SR    R0,R0
OPT42    IC    R0,FOR1(R2)             FOR STATEMENT COUNT
         AH    R0,KH1                  INCREASE FS COUNT
         CL    R0,KF86                 > 85 ENTRIES IN OPTAB ?
         BL    OPT44                   NO
         LA    R1,FSTAB(R2)
         OI    0(R1),X'80'             SET ELEMENTARY LOOP
OPT44    STC   R0,FOR1(R2)             RESTORE FSN COUNT
         IC    R2,FOR2(R2)
         CL    R2,KF0                  ANY ENCLOSING FOR STMT ?
         BE    OPT46                   NO
         SH    R2,KH1                  GIVES CORRECT FSN
         B     OPT42                   ADD UP ENCLOSING LOOP
*
OPT46    LA    R8,14(,R8)              UPDATE OPTAB PTR
OPT5     LA    R6,14(,R6)              GET NEXT SUTAB ENTRY
         C     R6,ZSUDEN               SUTAB END ?
         BE    TERMIN                  YES
         TM    10(R6),SUCM             ACTIVE ENTRY ?
         BZ    OPT1                    YES
         B     OPT5                    NO, GET NEXT ENTRY
*
*        SCAN FOR NEXT LVTAB GROUP
*
OPT6     LA    R5,4(,R5)               GET NEXT LVTAB ENTRY
         CLC   0(1,R5),0(R4)           SAME GROUP ?
         BE    OPT6                    YES
         LR    R4,R5                   NO, SET LVTAB GROUP PTR
         B     OPT1
*
OPT7     CLC   4(3,R6),KF0             FACTOR ZERO ?
         BE    OPT72                   YES
OPT71    SR    R2,R2                   ADDR FSTAB ENTRY
         IC    R2,0(,R6)
         LA    R2,FSTAB(R2)
         OI    0(R2),X'80'             SET ELEMENTARY LOOP
*
*        HANDLE SUTAB CHAINING
*
OPT72    TM    10(R6),FIRSTM           ANY CHAINING ?
         BZ    OPT5
         LR    R7,R6                   INITIALIZE CHAIN SEARCH
OPT8     LA    R7,14(,R7)              NEXT SUTAB ENTRY
         CLC   11(3,R7),11(R6)         ENTRY IN CHAIN ?
         BNE   OPT8                    NO
         MVN   SUPOS(1),10(R7)         SUBSCRIPT NUMBER
         MVN   *+7(1),10(R6)           SUBSCRIPT NUMBER
         CLI   SUPOS,0                 SUBSCRIPT NUMBER EQUAL ?
         BNE   OPT8                    NO
         TM    10(R7),LASTM            LAST ENTRY IN CHAIN ?
         BO    OPT9                    YES
         NI    10(R7),OFFM             TURN OFF CHAIN BITS
         OI    10(R7),FIRSTM           SET FIRST ENTRY BIT
         B     OPT5
*
OPT9     NI    10(R7),OFFM             TURN OFF CHAIN BITS
         B     OPT5
*
OPT10    BAL   R9,OTACHA               CHANGE OPTAB BUFFER
         B     OPT4
*
TERMIN   C     R8,ZOTAFILL             ANY OPTAB ?
         BNE   TERMINNO                YES
         OI    COMPFLGS+2,NOPT         NO OPTAB PRESENT
         B     TERM1
*
TERMINNO C     R8,ZOTMAX               END OF OPTAB BUFFER ?
         BNE   TERMIN1                 NO
         BAL   R9,OTACHA               CHANGE OUTPUT BUFFER
TERMIN1  MVI   0(R8),X'FF'             INDICATE END OF SUTAB
         BAL   R9,OTACHA               WRITE LAST OPTAB RECORD
*
         CHECK OWRITE                  CHECK LAST OPTAB RECORD
*
         L     R0,AUT3DCB              R0 -> SYSUT3 DCB
*
         CLOSE ((R0),REREAD),TYPE=T    POINT TO BEGINNING OF DATASET
*
TERM1    LH    R4,FSNMAX
         SR    R3,R3
         SR    R1,R1
TERM12   LA    R1,1(,R1)
         CLR   R1,R4                   ALL FOR STMT CHECKED ?
         BH    TERM15                  YES
         LA    R2,FOR2(R1)
         CLC   KF0(1),0(R2)            ANY ENCLOSING LOOP ?
         BE    TERM12                  NO
         IC    R3,0(R2)                GET NO OF OPTAB ENTRIES
         SR    R2,R2
         IC    R2,FOR1-1(R3)           IN ENCLOSING LOOP
         CL    R2,KF86                 > 85 ?
         BL    TERM12                  NO
         LA    R2,255                  MARK FOR SUCCEDING FS
         STC   R2,FOR1(R1)             THAT THIS FS IS ELEMENT
         LA    R2,FSTAB(R1)
         OI    0(R2),X'80'             SET ELEMENTARY LOOP
         B     TERM12
*
TERM15   L     R0,TABSIZE              LENGTH OF TABLE AREA
         L     R1,TSTART
*
         FREEMAIN R,LV=(0),A=(1)
*
TERMIN2  TM    COMPFLGS,ERR            ERROR CONDITION ?
         BO    TERMERR                 YES
         B     IEX40001                SETUP INITIALIZATION FOR IEX50
*
TERMERR  XCTL  EP=IEX51ER2
*
NOSUTAB  OI    COMPFLGS+2,NOPT         SET NO SUBSCRIPT OPTIMIZATION
         B     TERMIN2
*
NOSUTAB1 OI    COMPFLGS+2,NOPT         SET NO SUBSCRIPT OPTIMIZATION
         B     TERM1
*
OTACHA   B     OTACHA2                 FIRST TIME SWITCH
*
         CHECK OWRITE
*
OTACHA1  L     R0,AUT3DCB              R0 -> SYSUT3 DCB
         L     R2,ZOTAFILL             ADDR OF BUFFER TO WRITE
         L     R3,OPTABS               SIZE OF OPTAB BUFFER
*
         WRITE OWRITE,SF,(R0),(R2),(R3)
*
         L     R8,ZOTAWRI              CHANGE OPTAB BUFFERS
         MVC   ZOTAWRI(4),ZOTAFILL
         ST    R8,ZOTAFILL
         LR    R2,R8
         A     R2,OPTABS               BUFFER END ADDR
         ST    R2,ZOTMAX
         BR    R9
*
OTACHA2  MVI   OTACHA+1,X'00'          SET OFF FIRST TIME SWITCH
         B     OTACHA1
*
*        R11                           START ADDR OF INPUT AREA
*        R10                           RECORD COUNT
*        R9                            RECORD IDENTIFICATION
*        R8                            RECORD LENGTH
*        R7                            RETURN REGISTER
*
READ     L     R1,AUT3DCB              R1 -> SYSUT3 DCB
         MVI   SULTSTRT+3,X'01'        ADDR FIRST INPUT RECORD
*
         POINT (1),SULTSTRT
*
READ1    L     R2,AUT3DCB              R2 -> SYSUT3 DCB
*
         READ  READR,SF,(R2),(R11),'S'
*
         CHECK READR
*
         C     R9,0(,R11)
         BNE   READ1
         MVC   0(4,R11),SAVETAB        RESTORE OVERLAYED PART
         BCT   R10,READ2               MORE RECORDS TO READ ?
         BR    R7                      NO
*
READ2    AR    R11,R8                  UPDATE CURRENT PT2
         MVC   SAVETAB(4),0(R11)
         B     READ1
*
*        R11                           LENGTH OF TABLE ENTRY
*        R10                           CURRENT PTR IN UNSORTED TABLE
*        R9                            END OF UNSORTED TABLE
*        R15                           RETURN REGISTER
*        R10                           RELATIVE ADDR IN SORTED TAB
*        R8                            PTR TO ACTUAL ADDR TAB ENTRY
*                                      START ADDR OF SORTED TABLE
*        R7                            PTR TO ACTUAL COUNT TAB ENTRY
*        R3                            ADDR OF LAST COUNT TAB ENTRY
*
SORT     MVC   ZCOSTA(1),KF0           ZERO TABLES
         MVC   ZCOSTA+1(254),ZCOSTA
         MVC   ZCOSTA+255(255),ZCOSTA
         MVC   ZADSTA(255),ZCOSTA
         MVC   ZADSTA+255(255),ZCOSTA
         L     R10,ZSTAD               CURRENT PTR
*
SORT1    CLI   0(R10),X'FF'            DELETED ENTRY ?
         BE    SORT2                   YES
         SR    R2,R2                   ISOLATE ACTUAL FSN
         IC    R2,0(,R10)
         AR    R2,R2                   FSN * 2
         LH    R3,ZCOSTA(R2)           GET OLD COUNTER
         LA    R3,1(,R3)               INCR
         STH   R3,ZCOSTA(R2)           STORE NEW COUNTER
*
SORT2    AR    R10,R11                 ADDR NEXT ENTRY
         CR    R10,R9                  END OF TABLE ?
         BL    SORT1                   NO
*
*        BUILD ADDRESS TABLE
*
         LH    R2,FSNMAX               GET ADDR OF LAST COUNT ENTRY
         AR    R2,R2
         LA    R3,ZCOSTA(R2)           LAST ENTRY
         SR    R10,R10                 RELATIVE ADDR IN NEW TABLE
         LA    R7,ZCOSTA               CURRENT COUNT TABLE PTR
         LA    R8,ZADSTA+2             CURRENT ADDR TABLE PTR
SORT3    CR    R7,R3                   LAST ENTRY ?
         BH    SORT4                   YES
         LH    R1,0(,R7)               NUMBER OF ENTRIES
         MR    R0,R11                  COMPUTE TABLE LENGTH
         AR    R10,R1                  RELATIVE TABLE ADDR
         STH   R10,0(,R8)              MAKE ENTRY IN ADDR TABLE
         LA    R7,2(,R7)               ADDR NEXT ENTRY
         LA    R8,2(,R8)               ADDR NEXT ENTRY
         B     SORT3
*
*        BUILD SORTED TABLE
*
SORT4    L     R10,ZSTAD               START OF UNSORTED TABLE
         L     R8,ZSORTSTA             START OF SORTED TABLE
         LR    R2,R11                  INITIALIZE MOVE OF ENTRY
         BCTR  R2,0
         STC   R2,SORTM+1              STORE LEN IN MVC INSTRUCTION
SORT5    CLI   0(R10),X'FF'            DELETED ENTRY ?
         BE    SORT6                   YES
         SR    R2,R2                   ISOLATE FSN
         IC    R2,0(,R10)
         AR    R2,R2                   FSN * 2
         LH    R3,ZADSTA(R2)           GET RELATIVE ADDR
         LR    R0,R3                   UPDATE RELATIVE ADDR
         AR    R0,R11
         STH   R0,ZADSTA(R2)
         AR    R3,R8                   GET ADDR IN SORTED TABLE
SORTM    MVC   0(0,R3),0(R10)          MOVE ENTRY
SORT6    AR    R10,R11                 GET NEXT ENTRY
         CR    R10,R9                  END OF TABLE ?
         BNE   SORT5                   NO
         BR    R15
*
         DC    0F'0'
SUTYPE   DC    C'SUTB'                 SUTAB IDENTIFICATION
LVTYPE   DC    C'LVTB'                 LVTAB IDENTIFICATION
KF0      DC    F'0'
KH8      DC    H'8'
SUPOS    DC    X'00'
         DC    0F'0'
FOR1     DC    XL256'00'               FOR STMT COUNT AREA
FOR2     DC    XL256'00'               ENCLOSING FS MARK AREA
KF86     DC    F'86'                   MAX ENTRIES IN OPTAB
FOR4     DC    3H'0'                   WORK AREA FOR GPTAB REC
KH1      DC    H'1'
*
        TITLE 'IEX40001 - INITIALIZATION OF COMPILATION PHASE, ALGOL F'
*
*        CALCULATE AND RESERVE SPACE NEEDED
*
IEX40001 LA    R2,INERR1
         ST    R2,ERET                 PROVIDE DIRECTORY RETURN ADDR
         SR    R2,R2                   INIT LENGTH OF RES AREA
         L     R3,SRCE1S               GET LENGTH OF 1ST SOURCE BUFFER
         TM    COMPFLGS+2,SPIC         SOURCE PROGRAM IN STORAGE ?
         BO    IN16                    YES
         LR    R2,R3                   NO, OBTAIN A SECOND BUFFER
IN16     TM    COMPFLGS+2,NOPT         ANY OPTAB ?
         BO    IN17                    NO
         L     R4,OPTABS               OBTAIN LENGTH OF OPTAB BUFFER
         AR    R2,R4                   ADD TO TOTAL LENGTH
         AR    R2,R4                   ADD LENGTH OF 2ND OPTAB BUFFER
IN17     L     R6,OOSTACKS             OBTAIN LENGTH OF OPERATOR STACK
         AR    R2,R6                   ADD TO TOTAL LENGTH
         LH    R7,LLAT                 OBTAIN LENGTH OF LAT
         AR    R2,R7                   ADD TO TOTAL LENGTH
         ST    R2,FREEMSIZ             STORE LENGTH OF RESERVED AREA
*
         GETMAIN R,LV=(R2)             RESERVE AREA
*
         LA    R5,INERR2
         ST    R5,ERET                 PROVIDE NEW DIR RETURN ADDR
         ST    R1,FREEMADR             STORE ADDR OF RESERVED AREA
*
*        LOAD REGISTERS FOR REST OF PHASE
*
         L     R8,IBUF1
         ST    R8,SOURCEB              SET FIRST BUFFER AS CURRENT
         LR    R10,R1                  GET CORRECT REG FOR OPT ST ADDR
         TM    COMPFLGS+2,SPIC         SOURCE PROGRAM IN STORAGE ?
         BO    IN18                    YES
         ST    R10,IBUF2               NO, STORE ADDR OF 2ND INPUT BUF
         ST    R10,RSRCB               SECOND BUFFER = READ BUFFER
         LA    R10,0(R3,R10)           GET ADDR OF NEXT RESERVED AREA
IN18     TM    COMPFLGS+2,NOPT         ANY OPTAB ?
         BO    IN19                    NO
         ST    R10,OPBUF1              YES, STORE ADDR OF FIRST OPTBUF
         ST    R10,AOPTABE             ADDR FIRST OPTAB ENTRY
         ST    R10,OPBUFB              FIRST OPTBUF = CURRENT
         LA    R10,0(R4,R10)           GET ADDR OF SECOND OPTAB BUFFER
         ST    R10,OPBUF2              STORE        -''-
         ST    R10,ROPTB               2ND OPTBUF = READ BUFFER
         LA    R10,0(R4,R10)           GET ADDR OF OPERATOR STACK
IN19     LA    R9,0(R6,R10)            GET ADDR OF LAT
         ST    R9,LATAB                STORE IT
         BCTR  R9,0                    GET ADDR OF OPERAND STACK
         L     R6,PRPT                 PRPOINTER
*
*        INITIALIZE WORKAREA FOR REST OF PHASE
*
         TM    COMPFLGS+2,NOPT         ANY OPTAB ?
         BZ    IN3A                    YES
         LA    R4,MAXFSN
         ST    R4,AOPTABE              NO, STORE ADDR OF MAX FS NUMBER
IN3A     LA    R4,SUTABC-9
         ST    R4,SUTABCA              INIT LAST USED SUTAB ENTRY
         LA    R4,IOTAB
         LA    R3,GPBN                 COMPUTE LENGTH OF AREA WITH 0
         SR    R3,R4
         STC   R3,IN3B+1               STORE IN MOVE INSTRUCTION
         MVI   0(R4),0
IN3B     MVC   1(0,R4),0(R4)           MOVE ZEROES
         MVI   MAXFSN,X'FF'            INSERT MAX FS NUMBER
         MVI   CII+1,X'07'
         MVI   CIR+1,X'06'
         MVI   CLEARDIS,X'F0'
         MVI   ONEENTRY+1,X'08'        INSERT VALUES FOR LONG PREC
         MVC   MAXOVERF(2),LONG
         TM    COMPFLGS,LNG            LONG PRECISION ?
         BO    IN3                     YES, BRANCH
         MVI   ONEENTRY+1,X'04'        SHORT, CHANGE VALUES
         MVI   PRECMASK,X'10'
         MVC   MAXOVERF(2),SHORT
IN3      MVI   GPBN+1,X'FF'
         MVC   SEMCNT,KH0              ZERO SEMICOLON COUNTER
*
*        INITIALIZE OPERATOR STACK
*
         MVI   0(R10),X'25'            INSERT OPERATOR ALPHA
*
*        INITIALIZATION OF LABEL ADDRESS TAB
*
         L     R2,LATAB
         MVI   0(R2),0                 ZERO BEGINNING OF LAT
         MVC   1(LATBEG-1,R2),0(R2)
         LA    1,15                    ZERO
         LA    11,79(,R2)                   REST
TSTZER   MVC   1(256,11),0(11)                   OF
         LA    11,256(,11)                            LAT
         BCT   1,TSTZER                                   FOR
         MVC   1(176,11),0(11)                                 TEST
         LA    R3,LATNR
IN4      MVI   0(R2),X'80'             TURN ON FIRST BIT IN LAT ENTRY
         LA    R2,4(,R2)               STEP ADDR
         BCT   R3,IN4                  HANDLE NEXT ENTRY IF ANY
*
*        START READ IN OF SOURCE PROGRAM, IF NECESSARY
*
         TM    COMPFLGS+2,SPIC         SOURCE PROGRAM IN STORAGE ?
         BZ    IN6                     NO, NO BRANCHES WILL BE TAKEN
         OI    IN6+1,X'F0'             YES, ALL BRANCHES WILL BE TAKEN
         OI    IN9+1,X'F0'
         OI    IN14+1,X'F0'
*
IN6      NOP   IN22                    BRANCH IF SOURCE PROG IN CORE
         L     R3,AUT2DCB              R3 -> SYSUT2 DCB
*
         READ  SRC1,SF,(3),(8)         READ FIRST SOURCE RECORD
*
IN22     BCTR  R8,0                    INIT SOURCE POINTER
*
*        CONSTRUCT PBTAB3
*
         LA    R2,PBTAB2               START ADDR OF PBTAB2 IN WORKAREA
         LA    R5,PBTAB3               START ADDR OF PBTAB3 IN WORKAR
         LH    R4,PBN                  GET NUMBER OF PRG BLOCKS
         LA    R4,1(,R4)
IN8      MVC   0(2,R5),0(R2)           MOVE ONE PBTAB2 ENTRY
         MVC   2(2,R5),KH0             ZERO REST OF ENTRY
         LA    R2,2(,R2)               STEP ADDRS
         LA    R5,4(,R5)
         BCT   R4,IN8                  MOVE NEXT IF NOT ALL MOVED
*
*        CHECK READ OF FIRST SOURCE RECORD IF NECESSARY
*
IN9      NOP   IN10                    BRANCH IF SOURCE PROG IN CORE
*
         CHECK SRC1
*
IN10     LA    R2,1                    INIT RECORD COUNT
         STC   R2,NUMBBL               STORE IT
*
*        START READING OF OPTAB
*
         TM    COMPFLGS+2,NOPT         OPTAB EMPTY ?
         BO    IN14                    YES, BYPASS READING
         LA    R2,IN14
         ST    R2,EODUT3               GIVE ADDR OF EOD RTN TO DIR
         L     R2,OPBUF1               GET ADDR OF FIRST BUFFER
         L     R4,AUT3DCB              R4 -> SYSUT3 DCB
*
IN12     READ  OPTB1,SF,(4),(2),'S'    READ FIRST RECORD
*
         CHECK OPTB1
*
IN13     NOP   IN14                    BRANCH AFTER SECOND CHECK
         L     R2,OPBUF2               GET ADDR OF SECOND BUFFER
         OI    IN13+1,X'F0'
         B     IN12                    READ SECOND RECORD
*
*        READ SECOND SOURCE RECORD IF ANY
*
IN14     NOP   IN15                    BRANCH IF SOURCE PROGRAM IN CORE
         LA    R2,IN15
         ST    R2,EODUT2               GIVE ADDR OF EOD RTN TO DIR
         L     R2,IBUF2                GET ADDR OF 2ND BUFFER
*
         READ  SRC2,SF,(3),(2)         READ 2ND RECORD
*
         CHECK SRC2
*
IN15     NI    COMPFLGS+2,255-NOSC     SET SEMICOLON COUNTER VALID FLAG
*
*        XCTL TO NEXT LOAD MODULE
*
         XCTL  EP=IEX50000
*
*        DIRECTORY RETURN BEFORE GETMAIN
*
INERR1   XCTL  EP=IEX51ER2
*
*        DIRECTORY RETURN AFTER GETMAIN
*
INERR2   XCTL  EP=IEX51ER1
*
*        CONSTANTS
*
LLAT     DC    H'4096'                 LENGTH OF LABEL ADDR TABLE
SHORT    DC    H'4092'                 TO CHECK OBJ TIME STACK OVFLOW
LONG     DC    H'4088'                              -''-
*
         LTORG
*
WORKAREA DSECT
*
         COPY  WORKAREA
*
         ORG   SYSUT1
*
FSNMAX   DS    H
LVCOUNT  DS    H
SUCOUNT  DS    H
ZLEVEN   DS    F
ZSUTEN   DS    F
ZCOSTA   DS    255H                    SORT COUNT TABLE
ZADSTA   DS    255H                    SORT ADDR TABLE
TSTART   DS    F                       START OF TABLE AREA
SAVETAB  DS    F                       AREA TO SAVE TABLE END
ZSTAD    DS    F                       START ADDR OF UNSORTED TABLE
ZSORTSTA DS    F                       START ADDR OF SORTED TABLE
ZSUDAD   DS    F                       START OF SORTED SUTAB
ZSUDEN   DS    F                       END ADDR OF SORTED SUTAB
ZLESTA   DS    F                       START ADDR OF SORTED LUTAB
ZOTAFILL DS    F                       OPTAB WORK BUFFER ADDR
ZOTAWRI  DS    F                       OPTAB WRITE BUFFER ADDR
ZOTMAX   DS    F                       END OF OUTPUT BUFFER IN USE
TABSIZE  DS    F                       SIZE OF TABLE AREA
*
*        AREA USED BY COMPILATION PHASE
*
         ORG   SYSUT1
*
RETADR   DS    17F                     SAVE AREA
PLACE14  DS    F                          -''-
RUTI     DS    9F                      GPR CONTROL
RUTR     DS    4F                      FLREG CONTROL
GPROLN   DS    H                       LABEL NR OF OBJ PRG ENTRY POINT
KONSUM   DS    H                       WORKPLACE
WORKPL   DS    F                       WORKPLACE
IBUF1    EQU   SRCE1ADD                ADDR OF FIRST SOURCE BUFFER
IBUF2    DS    A                         -''  SECOND    -''-
SOURCEB  DS    A                         -''  CURRENT   -''-
RSRCB    DS    A                         -''  READ      -''-
OPBUF1   DS    A                       ADDR OF FIRST OPTAB BUFFER
OPBUF2   DS    A                         -''-  SECOND    -''-
OPBUFB   DS    A                         -''-  CURRENT   -''-
ROPTB    DS    A                         -''-  READ      -''-
AOPTABE  DS    A                       ADDR OF CURRENT OPTAB ENTRY
LATAB    DS    A                       ADDR OF LABEL ADDR TABLE
APBTAB4  EQU   LATAB                   ADDR OF PBTAB4
SUTABCA  DS    A                       ADDR OF LAST USED SUTAB ENTRY
STRETURN DS    F                       RETURN ADDR
FREEMADR DS    A                       ADDR FOR FREEMAIN IN 50000
FREEMSIZ DS    F                       SIZE          -''-
*
PBTAB3   DS    1024C                   PROGRAM BLOCK TABLE, 3RD VERS
*
IOTAB    DC    18X'00'                 LIST OF DATA SETS
CII      DC    H'0'                    REGISTER CONTROL
CIR      DC    H'0'                          -''-
RII      DC    H'0'                          -''-
RIR      DC    H'0'                          -''-
OPDPBN   DC    H'0'                    PROGRAM BLOCK NR (BYTE 2 OF OPD
OPDADR   DC    H'0'                    BYTES 3 AND 4 OF OPERAND
OPDLN    DC    H'0'                    LABEL NUMBER TIMES FOUR
KH0      DC    H'0'                    ZEROES
CFSN     DC    X'00'                   CURRENT FS NUMBER
MAXFSN   DC    X'FF'                   MAX FS NUMBER
CLEARDIS DC    X'F000'                 FOR CLEARING OF DISPLACEM PART
ONEENTRY DC    H'4'                    SHORT, FOR INCR OF OT STACK PTR
         ORG   ONEENTRY
         DC    H'8'                    LONG            -''-
PRECMASK DC    X'10'                   SHORT, TO MODIFY INSTRUCTIONS
         ORG   PRECMASK
         DC    X'00'                   LONG            -''-
NUMBBL   DC    X'00'                   RECORD COUNTER
         DS    H
SPBNST   DC    H'0'                    CURRENT PBN
         DS    H                                   AND DISPLACEMENT
GPBN     DC    H'255'                  GLOBAL DSA CONTROL
MAXOVERF DC    H'4092'                 SHORT, TO CHECK OT STACK OVERFL
         ORG   MAXOVERF
         DC    H'4088'                 LONG            -''-
HALFW    DS    H                       WORKPLACE
USPEI2   DS    H                       FOR ARRAY DECLA-
USPEI4   DS    H                                       RATION HANDLING
WPLACE   DS    H                       FOR INSTRUCTION GENERATION
XPLACE   DS    H
YPLACE   DS    H
UPLACE   DS    H
VPLACE   DS    C                                   -''-
STRDNAME DS    5C                      TO STORE OPERAND
CBVTAB   DS    48C                     CALLED-BY-VALUE TABLE
SUTABC   DS    768C                    FOR SUBSCRIPT OPTIMIZATION
         ORG   SUTABC
DSTAB    DS    608C                    DATA SET TABLE
*
*        CHARACTER EQUATES
*
         IEXCHAR
*
*        REGISTER EQUATES
*
         IEZREGS
*
         END   IEX40000
