         TITLE 'IEX50 - COMPILATION PHASE - CP17'
*
*        CP17, CP18, CP26, CP27, CP28, CP29, CP30, CP31, CP63,
*        CP65, CP66, CP67, CP68, CP70, CP72, CP73, CP74, CP75,
*        CP76, CP77, CP78, CP79, CP80, CP86, CP87
*
***********************************************************************
*
*        COMPILER PROGRAM - CP17
*
***********************************************************************
*
*        IF STATEMENT WITH ALTERNATIVE
*        CONTEXT              PROGRAM
*        SOURCE OPERATOR      ELSE
*        STACK OPERATOR       THENS
*        OPERANDS             CASE I)   LABEL NUMBER
*                             CASE II)  PROCEDURE IDENTIFIER
*                                       LABEL NUMBER
*
         USING CP17,R12
CP17     TM    COMPFLGS,OPERAND        OPERAND ON ?
         BZ    BCB2                    NO, BRANCH
         BAL   R4,PLPRST               BRANCH TO PLPRST HANDLE
         LA    R9,5(,R9)               CLOPD
BCB2     MVI   0(R10),X'28'            STACK 'ELSES'
         MVI   GPBN+1,X'FF'            DESTROY GLOBAL PBN
         TM    COMPFLGS,COMPMODE       SYNTAX CHECK MODE ?
         BOR   R5                      YES, RETURN TO SUBSTART
         BAL   R4,LATRES               RESERVE LABEL
         MVC   BCD2+2(2),LN            INTR LABEL NO AS DISPLACEMENT
         BAL   R2,GENTXT6              GENERATE 6 BYTES
BCD2     L     BRR,0(LAT,0)            *** GENERATED CODE ***
         BR    BRR                     *** GENERATED CODE ***
         L     R1,LATAB                LOAD ADDR OF LAT
         MVC   WORKPL(2),3(R9)         LOAD LABEL NUMBER
         LH    R2,WORKPL
         ST    R6,0(R1,R2)             STORE PRPOINTER INTO LAT
         MVC   3(2,R9),LN              KEEP NEW LABEL
         BR    R5                      RETURN TO SUBSTART
*
***********************************************************************
*
*        COMPILER PROGRAM - CP83
*
***********************************************************************
*
*        CODE PROCEDURE DECLARATION (IN CALLING PROGRAM)
*        CONTEXT              PROGRAM
*        SOURCE OPERATOR      GAMMA
*        STACK OPERATOR       PI, PHI, BETA
*        OPERANDS             LABEL NUMBER
*                             PROCEDURE IDENTIFIER
*
         USING CP83,R12
CP83     BAL   R4,DECOMP               DECOMPOSE OPERAND
         LH    R4,OPDLN                GET ADDR OF LAT ENTRY
         L     R15,LATAB
         ST    R6,0(R4,R15)            STORE PRPOINT IN LAT
         MVC   KOC15,1(R8)             PROCEDURE NAME TO GENER CODE
         LH    R15,SPBNST              GET CURRENT PBN
         SLL   R15,3                   DISP IN PBTAB TO GENER CODE
         STH   R15,KOC16
         LA    R2,KOC14
         BAL   R14,GENTXTS
         DC    H'14'                   GENERATE 14 BYTES
*
         OI    IOTAB+16,X'01'          ALL DATASETS MAY BE NEEDED
KOG1     LA    R8,8(,R8)               INCREASE SOURCE BY 8
         BR    R5                      RETURN TO SUBSTART
*
KOC14    BAL   ADR,LOADPP(FSA)         *** GENERATED CODE ***
KOC15    DC    CL8' '                  *** GENERATED CODE ***
KOC16    DC    H'0'                    *** GENERATED CODE ***
*
***********************************************************************
*
*        COMPILER PROGRAM - CP18
*
***********************************************************************
*
*        END OF CONDITIONAL STATEMENT
*        CONTEXT              PROGRAM
*        SOURCE OPERATOR      SEMICOLON,EPSILON, ETA, END
*        STACK  OPERATOR      ELSES
*        OPERANDS             CASE I)   LABEL NUMBER
*                             CASE II)  PROCEDURE IDENTIFIER
*                                       LABEL NUMBER
         USING CP18,R12
CP18     TM    COMPFLGS,OPERAND        OPERAND ON ?
         BZ    BEB2                    NO, BRANCH
         BAL   R4,PLPRST               BRANCH TO PLPRST HANDLE
         LA    R9,5(,R9)               CLOPD
         NI    COMPFLGS,255-OPERAND    RESET OPERAND
BEB2     TM    COMPFLGS,COMPMODE       SYNTAX CHECK MODE ?
         BO    BEE2                    YES, BRANCH
         MVC   WORKPL(2),3(R9)         LOAD LABEL NUMBER
         LH    R2,WORKPL
         L     R1,LATAB                LOAD ADDR OF LATAB
         ST    R6,0(R1,R2)             STORE PRPOINTER IN TO LAT
BEE2     LA    R9,5(,R9)               CLOPD
         MVI   GPBN+1,X'FF'            DESTROY GLOBAL DSA
         BCT   R10,COMP                CLOPT AND COMPARE
*
***********************************************************************
*
*        COMPILER PROGRAM - CP26
*
***********************************************************************
*
*        ERRONEOUS CASE
*        CONTEXT              PROGRAM
*        SOURCE OPERATOR      ARRAY, SWITCH, PHI, PI
*        STACK OPERATOR       .=, SEMICOLON,THENS, ELSES
*        OPERANDS
*
         USING CP26,R12
CP26     BAL   R4,ERR166               OPDT AND ERR 166/7
BUE2     BCTR  R10,0                   RELEASE ONE OPERATOR
         CLI   1(R10),X'1C'            'DO' ?
         BE    BUE3                    YES, BRANCH
         BL    BUG3                    BRANCH IF '= OR '
BUC3     LA    R9,5(,R9)               RELEASE ONE OPERAND
BUG4     B     COMP                    BRANCH TO COMPARE
*
BUE3     SR    R0,R0                   CLEAR 4 OPERANDS +
         TM    6(R9),X'02'
         LA    R9,20(,R9)
         BZ    COMP
         MVC   WORKPL(2),3(R9)
         LH    R0,WORKPL
         AR    R9,R0
         B     COMP
*
BUG3     CLI   1(R10),XFSCOLON         SEMICOLON ?
         BE    COMP                    YES, BRANCH
         B     BUC3                    ASSIGMENT, BRANCH
*
***********************************************************************
*
*        COMPILER PROGRAM - CP27
*
***********************************************************************
*
*        ERRONEOUS CASE
*        CONTEXT              PROGRAM, STATEMENT
*        SOURCE OPERATOR      SEE MATRICES
*        STACK OPERATOR       SEE MATRICES
*        OPERANDS             VARIABLE NUMBER OF OPERANDS ACCORDING TO
*                             THE OPERATOR
*
         USING CP27,R12
CP27     TM    COMPFLGS,OPERAND        OPERAND ON ?
         BZ    BWB2                    NO, BRANCH
         BAL   R4,SERR3
         DC    H'195'                  ERROR 195
*
         LA    R9,5(,R9)               RELEASE ONE OPERAND
         NI    COMPFLGS,255-OPERAND    RESET OPERAND
BNE2     BCTR  R10,0                   RELEASE ONE OPERATOR
         SR    R1,R1
         IC    R1,1(,R10)              LOAD OPERATOR IN R1
         SLL   R1,2                    MULTIPLY BY FOUR
         B     LISTE-24(R1)
LISTE    B     COMP                    LEFT BRACKET
         B     BWF4C                   COLON
         B     BWH3                    BRACKET
         B     BWJ3                    ARRAY
         B     BWJ41                   SWITCH
         B     BWJ41                   SEMICOLON
         B     BWJ41                   BEGIN
         B     BWJ41                   BETHA
         B     BWJ41                   PHI
         B     BWJ41
         B     BWJ41                   EQUAL
         B     BWJ41                   LESS
         B     BWJ41                   GREATER
         B     BWJ41                   NOTEQUAL
         B     BWJ41                   NOTGREATER
         B     BWJ41                   NOLLESS
         B     BWF4                    ASSIGMENT
         B     COMP                    GOTO
         B     BWK7                    FOR
         B     BWK5                    STEP
         B     BWK4                    UNTIL
         B     BWK5                    WHILE
         B     BWJ41                   DO
         B     COMP                    IF
         B     BWF4                    THEN
         B     BWJ41                   ELSE
         B     BWJ41                   NOT
         B     BWJ41                   IMPLICATION
         B     BWJ41                   OR
         B     BWJ41                   AND
         B     BWJ41                   EQUIVALENT
         B     BWJ41                   ALPHA
         B     COMP                    IFS
         B     BWJ41                   THENS
         B     BWJ41                   ELSES
         B     BWG3                    PARENT IN PROCEDURE
         B     BWG4                    PARENT IN STANDARD FUNCTION
         B     BWJ41                   MONODIC MINUS
         B     BWF4B                   BRACKET  RECL
         B     BWK6                    FOR.=
         B     BWK3                    SWITCH.=
*
BWK4     LA    R9,5(,R9)               CLOPT
BWK5     BCTR  R10,0                   CLOPT
BWK6     BCTR  R10,0                   CLOPT
BWK8     LA    R10,1(R10)              RESERVE ONE PLACE IN STACK
         MVI   0(R10),X'1C'            STACK 'DO'
         B     COMP                    BRANCH TO COMPARE
*
BWK7     BAL   R4,STACKAPI             STACK API
         B     BWK8
*
BWF4     LA    R9,5(,R9)               RELEASE ONE OPERAND
         B     COMP                    BRANCH TO COMPARE
*
BWH3     LA    R9,15(0,R9)             RELEASE THREE OPERANDS
         B     BWG31                   BRANCH
*
BWJ4     CLI   0(R8),XFSCOLON          SEMICOLON IN SOURCE ?
         BE    BWJ41
         B     COMP
*
BWG4     LA    R9,20(,R9)              RELEASE FOUR OPERANDS
         B     BWG31                   BRANCH
*
BWG3     SR    R0,R0                   RELEASE
         IC    R0,0(R9)                        N
         SLL   R0,8                              +
         IC    R0,1(R9)                            2
         LA    R9,10(R0,R9)                          OPERANDS
BWG31    TM    0(R10),X'30'            CHECK IF IN STACK CONT OPT
         BNO   COMP                    NO, BRANCH
         BCTR  R10,0                   RELEASE ONE OPERATOR
         L     R11,DECAADD             LOAD R11 WITH PROG CONT MA
         CLI   1(R10),X'30'            CHECK IF PROG CONT OPT
         BE    COMP                    BRANCH IF PCO TO COMPARE
         L     R11,STC                 LOAD R11 WITH STAT CONT MA
         CLI   1(R10),X'33'            CHECK IF STAT CONT OPT
         BE    COMP                    BRANCH IF STC TO COMPARE
         L     R11,EXC                 LOAD R11 WITH EXP CONT MAT
         B     COMP                    BRANCH TO COMPARE
*
BWK3     SR    R1,R1
         IC    R1,1(R9)                NO OF SWITCH ELEMENT OPERANDS
         LA    R9,20(R9,R1)            CLEAR OPERANDS
         B     COMP                    BRANCH TO COMPARE
*
BWF4C    BCTR  R10,0                   COLON
BWF4B    BCTR  R10,0                   ARRAY BRACKET
         LA    R9,15(R9)               RELEASE 3 OPERANDS
BWJ3     AH    R9,GREGN                CLEAR NUMBER OF ARRAY IDENT
         MVC   GREGN(2),ZEROHW         CLEAR COUNTER
         B     COMP
*
BWB2     BAL   R4,SERR3                ERROR PATTERN ENTRY
         DC    H'194'                  ERROR 194
*
         B     BNE2
*
BWJ41    L     R12,SCPTAB+4*84         R12 -> CP84
         BR    R12                     BRANCH TO CP84
*
***********************************************************************
*
*        COMPILER PROGRAM - CP28
*
***********************************************************************
*
*   ERRONEOUS CASE - DECLARATION IN WRONG  POSITION
*        CONTEXT              PROGRAM
*        SOURCE OPERATOR      S
*        STACK OPERATOR       SEE PROGRAM CONTEXT  MATRIX
*        OPERANDS             VARIABLE NUMBER OF OPERANDS ACCORDING TO
*                             THE OPERATOR
*
         USING CP28,R12
CP28     BAL   R4,ERR166
         BAL   R4,SCHDL                SEMICOLON HANDLING
         CLI   0(R10),XFCOLON          STACK OPERATOR COLON ?
         BE    BYF1                    YES
         CLI   0(R10),X'2C'            ARRAY BRACKET IN STACK
         BE    BYF1+2                  YES
         CLI   0(R10),X'0A'            SWITCH  IN STACK
         BE    BYF2                    YES
         BR    R5                      RETURN TO SUBSTART
*
BYF1     BCTR  R10,0                   RELEASE COLON
         SH    R10,KH2                 RELEASE BRACKET AND ARRAY
         LA    R9,15(R9)               RELEASE 3 OPERANDS
         AH    R9,GREGN                CLEAR NUMBER OF ARRAY IDENT
         MVC   GREGN(2),ZEROHW         CLEAR COUNTER
         BR    R5                      RETURN TO SUBSTART
*
BYF2     LA    R9,10(R9)               CLEAR TWO OPERANDS
         BCTR  R10,R5                  CLEAR SWITCH, SUBSTART
*
***********************************************************************
*
*        COMPILER PROGRAM - CP29
*
***********************************************************************
*
*        ERRONEOUS CASE  - BEGIN OF DECLARATION
*        CONTEXT              PROGRAM
*        SOURCE OPERATOR      ARRAY,SWITCH,PI,PHI
*        STACK OPERATOR       BEGIN, DO
*        OPERANDS             NONE OR ONE
*
         USING CP29,R12
CP29     BAL   R4,ERR166
CAF1     L     R12,SCPTAB+4*4          R12 -> CP4
         BR    R12                     BRANCH TO CP4
*
***********************************************************************
*
*        COMPILER PROGRAM - CP30
*
***********************************************************************
*
*        ERRONEOUS CASE  - LABEL IN INCORRECT POSITION
*        CONTEXT              PROGRAM
*        SOURCE OPERATOR      LABEL OPERATOR
*        STACK OPERATOR       SEE PROGRAM CONTEXT MATRIX
*        OPERANDS             LABEL IDENTIFIER
*
         USING CP30,R12
CP30     TM    COMPFLGS,OPERAND        OPERAND ON ?
         BZ    BKQB1                   NO, BRANCH
         BAL   R4,SERR2
         DC    H'169'                  ERRO 169
*
         LA    R9,5(,R9)               RELEASE ONE OPERAND
         BR    R5                      BRANCH TO SUBSTART
*
BKQB1    L     R12,SCPTAB+4*84         R12 -> CP84
         BR    R12                     BRANCH TO CP84
*
***********************************************************************
*
*        COMPILER PROGRAM - CP31
*
***********************************************************************
*
*        ERRONEOUS CASE  - INCORRECT CONBINATION OF OPERATORS IN
*                          PROGRAM CONTEXT
*        SOURCE OPERATOR      SEE PROGRAM CONTEXT MATRIX
*        STACK  OPERATOR      SEE PROGRAM CONTEXT MATRIX
*        OPERANDS             NONE OR ONE
*
         USING CP31,R12
CP31     LA    R11,614(,R11)           SWITCH TO EXPRESSION CONTEXT
         TM    COMPFLGS,OPERAND        OPERAND ON ?
         BZ    CEB2                    NO, BRANCH
         BAL   R4,SERR4
         DC    H'161'                  ERROR 161
*
         B     COMP                    BRANCH TO COMPARE
*
CEB2     BAL   R4,SERR4
         DC    H'160'                  ERROR 160
*
         B     COMP                    BRANCH TO COMPARE
*
***********************************************************************
*
*        COMPILER PROGRAM - CP63
*
***********************************************************************
*
*        MONADIC MINUS SIGN
*        CONTEXT              EXPRESSION
*        SOURCE OPERATOR      ALL EXCEPT 'NOT',C,1),'IF','POWER'
*        STACK OPERATOR       MONADIC MINUS
*        OPERANDS             ARITHMETIC OPERAND
*
         USING CP63,R12
CP63     LA    R4,GBD4                 LOAD RETURN ADD FOR ERROR
         BAL   R3,OPDTEST              OPDT AND ERROR NUMBER 162
         BAL   R4,ARRTEST1             ARRAY AND PROC TEST
         TM    1(R9),X'03'             OPERAND ARITHMETIC ?
         BM    GAD1                    YES, BRANCH
         TM    0(R9),APIMASK           OPERAND API ?
         BZ    GAC2                    NO, BRANCH
GBD4     BCT   R10,COMP                RELEASE 1 OPT AND COMPARE
GAD1     TM    COMPFLGS,COMPMODE+SUBSCOPT  SYNTAX OR SUBSC OPTIMIZED ?
         BNZ   GBD4                    NO, BRANCH
         BAL   R4,OPDREC               OPERAND RECOGNIZER
         TM    1(R9),X'02'             OPERAND REAL ?
         BZ    GBE1                    NO, INTEGER, BRANCH
         TM    0(R9),X'20'             OPERAND A VALUE ?
         BO    GAH3                    AN ADDR, BRANCH
         TM    0(R9),X'40'             OPERAND IN A REGISTER ?
         BO    GAH2                    NO, IN STORAGE, BRANCH
         IC    R14,3(R9)               INSERT
GBC5     STC   R14,GAJ1+1              REGISTER
         SRL   R14,4                   INTO
         STC   R14,WORKPL              GENERATED
         MVN   GAJ1+1(1),WORKPL
         BAL   R2,GENTXTP2             GENERATE 2 BYTES
GAJ1     LCDR  0,0                     *** GENERATED CODE ***
GAJ11    OI    0(R9),X'08'             INSERT NO ASSIGMENT BIT
         BCT   R10,COMP                DELEASE OPERATOR AND COMP
GAH2     TM    0(R9),X'80'             LO IN A REG BEFORE ?
         BO    GAH3                    NO, BRANCH
         SH    R7,ONEENTRY             RELEASE 1 OBJ STACK ENTRY
GAH3     BAL   R4,ROUTIN11             RESERVE A FLOATING POINT REG
         SH    R9,KH5                  INCREASE OPERAND STACK
         TM    5(R9),X'20'             LO A VALUE ?
         BZ    GBC2                    YES, BRANCH
         BAL   R4,ROUTINE2             CALL ROUTINE NUMBER 2
GBC4     LA    R9,5(,R9)               DECREASE OPERAND STACK
         SLL   R14,4
         B     GBC5                    BRANCH
*
GBC2     BAL   R4,ROUTINE4             GENERATE LOADING INTO FPR
         B     GBC4                    BRANCH
*
GBE1     TM    0(R9),X'20'             OPERAND A VALUE ?
         BO    GBF3                    ADDR, BRANCH
         TM    0(R9),X'40'             OPERAND IN A REGISTER ?
         BO    GBF2                    IN STORAGE, BRANCH
         IC    R14,3(R9)               INSERT
GBG11    STC   R14,GBG1+1              REGISTER
         SRL   R14,4                   INTO
         STC   R14,WORKPL              GENERATED
         MVN   GBG1+1(1),WORKPL        CODE
         BAL   R2,GENTXT2              GENERATE 2 BYTES
GBG1     LCR   0,0                     *** GENERATED CODE ***
         B     GAJ11
*
GBF2     TM    0(R9),X'80'             LO IN A REG BEFORE ?
         BO    GBF3                    DECREASE
         SH    R7,ONEENTRY             RELEASE 1 OBJ STACK ENTRY
GBF3     BAL   R4,ROUTINE7             RESERVE GENERAL PURPOSE REG
         SH    R9,KH5                  INCREASE OPERAND STACK
         TM    5(R9),X'20'             LO A VALUE ?
         BO    GBH5                    AN ADDR, BRANCH
         BAL   R4,ROUTINE5             GENERATE LOADING INTO GPR
GBK4     LA    R9,5(,R9)               DECREASE OPERAND STACK
         SLL   R14,4                   SHIFT REGISTER NUMBER
         B     GBG11                   BRANCH
*
GBH5     BAL   R4,ROUTINE6             GENERATE LOADING INTO GPR
         B     GBK4                    BRANCH
*
GAC2     BAL   R4,SERR2
         DC    H'163'                  ERROR 163
*
GAC4     MVC   0(5,R9),API             MOVE API
         BCT   R10,COMP                RELEASE OPERATOR AND COMP
*
***********************************************************************
*
*        COMPILER PROGRAM - CP65
*
***********************************************************************
*
*        HANDLING OF 'NOT' AND 'IF'
*        CONTEXT              EXPRESSION
*        SOURCE OPERATOR      CASE I 'NOT'
*                             CASE II 'IF'
*
*        STACK OPERATOR       CASE I  ALL EXCEPT  'NOT',ARITHMETICAL
*                                     OPERATORS,RELATIONAL OPERATORS
*        CASE II 'IF','IFS'
*
*        OPERANDS             NONE
*
         USING CP65,R12
CP65     TM    COMPFLGS,OPERAND        OPERAND ON ?
         BZ    GFC2                    NO, BRANCH
         BAL   R4,SERR4
         DC    H'164'                  ERROR 164
*
         LA    R9,5(,R9)               RELEASE ONE OPERAND
GFC2     BAL   R4,MOVEOPTK             INCREASE OPT STACK POINTER
         MVC   0(1,R10),0(R8)          INSERT SOURCE INTO STACK
         BR    R5                      RETURN TO SUBSTART
*
***********************************************************************
*
*        COMPILER PROGRAM - CP66
*
***********************************************************************
*
*        HANDLING OF PLUS AND MINUS
*        CONTEXT              EXPRESSION
*        SOURCE OPERATOR      +,-
*        STACK  OPERATOR      ALL EXCEPT ARITHMETIC  OPERATORS
*        OPERANDS             NONE OR ONE ARITHMETIC OPERAND.
*
         USING CP66,R12
CP66     BAL   R4,MOVEOPTK                   INCREASE OPT STACK POINTER
         TM    COMPFLGS,OPERAND              OPDT
         BZ    GHC2                          BRANCH IF FALSE
         MVC   0(1,R10),0(R8)                INSERT SOURCE INTO STACK
         BR    R5                            BRANCH TO SNOT
GHC2     CLI   0(R8),XFMINUS                 MINUS IN SOURCE ?
         BNE   GHC3                          NO, BRANCH
         MVI   0(R10),X'2B'                  STACK MONADIC MINUS
         BR    R5                            BRANCH TO SUBSTART
*
GHC3     MVI   SWVAL,X'FF'                   SET SWITCH TO ONE
         BCTR  R10,0                         DECREASE OPT STACK POINTER
GHC4     CLI   1(R8),XFZETA                  END OF SOURCE BUFFER ?
         BL    GHC5                          BRANCH IF OPERATOR
         BHR   R5                            OPERAND, BR TO SUBSTART
         BAL   R4,JBUFFER
         B     GHC4
*
GHC5     CLI   1(R8),XFLBRAC                 LEFT BRACKET IN SOURCE ?
         BER   R5                            YES, BRANCH TO SUBSTART
         BAL   R4,SERR4                      ERROR PATTERN ENTRY
         DC    H'160'                        ERROR 160
*
         BR    R5                            BRANCH TO SUBSTART
*
***********************************************************************
*
*        COMPILER PROGRAM - CP67
*
***********************************************************************
*
*        STACKING OF ARITHMETIC, RELATIONAL OR BOOLEAN OPERATORS
*        CONTEXT              EXPRESSION
*        SOURCE OPERATOR      SEE EXPRESSION CONTEXT  MATRIX
*        STACK  OPERATOR      SEE EXPRESSION CONTEXT  MATRIX
*        OPERANDS             ONE OPERAND
*
         USING CP67,R12
CP67     TM    COMPFLGS,OPERAND        OPERAND ON ?
         BZ    GJC2                    NO, BRANCH
         BAL   R4,MOVEOPTK             INCREASE OPT STACK POINTER
         MVC   0(1,R10),0(R8)          INSERT SOURCE INTO STACK
         CLI   0(R10),XFPOWER          OPT POWER ?
         BNER  R5                      NO, RETURN TO SUBSTART
         MVI   SWVAL,0                 SET SWITCH TO ZERO
         BR    R5                      RETURN TO SUBSTART
*
GJC2     BAL   R4,SERR4                ERROR PATTERN ENTRY
         DC    H'162'                  ERROR 162
*
         BR    R5                      RETURN TO SUBSTART
*
***********************************************************************
*
*        COMPILER PROGRAM - CP68
*
***********************************************************************
*
*        OPENING AND CLOSING PARENTHESIS
*        CONTEXT              EXPRESSION
*        SOURCE OPERATOR      )
*        STACK OPERATOR       (
*        OPERANDS             ONE
*
         USING CP68,R12
CP68     LA    R4,GLF2                 LOAD RETURN ADDR
         BAL   R3,OPDTEST              OPDT AND ERROR 162
GLF2     BCT   R10,SPECTEST            RELEASE OPT AND SPECIAL TEST
*
***********************************************************************
*
*        COMPILER PROGRAM - CP70
*
***********************************************************************
*
*        CONTEXT SWITCH,EXPRESSION CONTEXT
*        CONTEXT              EXPRESSION
*        SOURCE OPERATOR      ),'ELSE' ALL OPERATORS NOT SPECIFIED IN
*                             EXPRESSION CONTEXT
*        STACK OPERATOR       ALL OPERATORS NOT SPECIFIED IN
*                             EXPRESSION CONTEXT
*        OPERANDS             NOT TREATED
*
         USING CP70,R12
CP70     SH    R11,KH324               SWITCH TO STMT  CONTEXT
         B     COMP                    BRANCH TO COMPARE
*
***********************************************************************
*
*        COMPILER PROGRAM - CP72
*
***********************************************************************
*
*        NESTED CONDITIONAL EXPRESSIONS
*        CONTEXT              EXPRESSION
*        SOURCE OPERATOR      'ELSE'
*        STACK OPERATOR       'ELSE'
*        OPERANDS             NOT TR
*
         USING CP72,R12
CP72     BCTR  R10,0                   DECREASE OPT STACK POINTER
         CLI   0(R10),XFASSIGN         OPT ASSIGMENT ?
         BE    JAF2                    YES, BRANCH
         CLI   0(R10),XFGOTO           OPT GOTO ?
JAF2     LA    R10,1(,R10)             INCR OPT STACK POINTER
         L     R12,SCPTAB+4*75         R12 -> CP75
         BNE   0(R12)                  NOT ASSIGMENT, BRANCH
         L     R12,SCPTAB+4*79         R12 -> CP79
         BR    R12                     BRANCH TO CP79
*
***********************************************************************
*
*        COMPILER PROGRAM - CP73
*
***********************************************************************
*
*        ERRONEOUS CASE - THE OPENING PARENTHESIS IS MISSING IN
*                         A CONDITIONAL EXPRESSION
*        CONTEXT              EXPRESSION
*        SOURCE OPERATOR      'IF'
*        STACK OPERATOR       SEE EXPRESSION CONTEXT MATRIX
*        OPERANDS             NONE OR ONE
*
         USING CP73,R12
CP73     TM    COMPFLGS,OPERAND        OPERAND ON ?
         BZ    JGB2                    NO, BRANCH
         BAL   R4,SERR4                ERROR PATTERN ENTRY
         DC    H'161'                  ERROR 161
*
         LA    R9,5(,R9)               RELEASE ONE OPERAND
JGE1     BAL   R4,MOVEOPTK             INCR OPT POINTER
         MVI   0(R10),XFLBRAC          INSERT '(' INTO STACK
         BAL   R4,MOVEOPTK             INCR OPT POINTER
         MVC   0(1,R10),0(R8)          INSERT SOURCE INTO STACK
         BR    R5                      BRANCH TO SUBSTART
*
JGB2     BAL   R4,SERR4                ERROR PATTERN ENTRY
         DC    H'160'                  ERROR 160
*
         B     JGE1
*
***********************************************************************
*
*        COMPILER PROGRAM - CP74
*
***********************************************************************
*
*        ERRONEOUS CASE - CONBINATION OF TWO RELATIONAL OPERATORS
*        CONTEXT              EXPRESSION
*        SOURCE OPERATORS     RELATIONAL OPERATOR
*        STACK OPERATORS      RELATIONAL OPERATOR
*        OPERANDS             NONE OR ONE
*
         USING CP74,R12
CP74     TM    COMPFLGS,OPERAND        OPERAND ON ?
         BZ    JIB2                    NO, BRANCH
         BAL   R4,SERR4                ERROR PATTERN ENTRY
         DC    H'161'                  ERROR 161
*
JIF2     BAL   R4,MOVEOPTK             INCR OPT POINTER
         MVI   0(R10),XFASTER          INSERT * INTO STACK
         BR    R5                      BRANCH TO SUBSTART
*
JIB2     BAL   R4,SERR4                ERROR PATTERN ENTRY
         DC    H'160'                  ERROR 160
*
         BAL   R4,STACKAPI             STACK ALL PURPOSE IDENT
         B     JIF2
*
***********************************************************************
*
*        COMPILER PROGRAM - CP74
*
***********************************************************************
*
*        ERRONEOUS CASE - NOT PERMITED OPERATOR PAIR WHERE THE STACK
*                         OPERATOR IS ASSUMED TO BE THE CORRECT ONE
*        CONTEXT              PROGRAM, STATEMENT, EXPRESSION
*        SOURCE OPERATOR      SEE CONTEXT MATRICES
*        STACK OPERATOR       SEE CONTEXT MATRICES
*        OPERANDS             NONE OR ONE
*
         USING CP75,R12
CP75     TM    COMPFLGS,OPERAND        OPERAND ON ?
         BZ    JKB2                    NO, BRANCH
         BAL   R4,SERR3                ERROR PATTERN ENTRY
         DC    H'195'                  ERROR 195
*
         LA    R9,5(,R9)               RELEASE ONE OPERAND
         BR    R5                      BRANCH TO SUBSTART
*
JKB2     BAL   R4,SERR3                ERROR PATTERN ENTRY
         DC    H'194'                  ERROR 194
*
         BR    R5                      BRANCH TO SUBSTART
*
***********************************************************************
*
*        COMPILER PROGRAM - CP76
*
***********************************************************************
*
*        BOOLEAN OPERATIONS
*        CONTEXT              EXPRESSION
*        SOURCE OPERATOR      SEE EXPRESSION CONTEXT MATRIX
*        STACK  OPERATOR      SEE EXPRESSION CONTEXT MATRIX
*        OPERAND              TWO OPERANDS
*
         USING CP76,R12
CP76     LA    R4,JRF41
         BAL   R3,OPDTEST              OPDT AND ERROR 162
         BAL   R4,ARRTEST2
         TM    6(R9),X'03'             BLO BOOLEAN ?
         BNO   JMC2                    NO, BRANCH
         TM    1(R9),X'03'             LO BOOLEAN ?
         BNO   JMC3                    NO, BRANCH
         TM    COMPFLGS,COMPMODE       SYNTAX CHECK MODE ?
         BO    JRF41                   YES, BRANCH
         BAL   R4,OPDREC               OPERAND RECOGNIZER (LO)
         LA    R9,5(,R9)               DECREASE OPERAND POINTER
         BAL   R4,OPDREC               OPERAND RECOGNIZER (BLO)
         SH    R9,KH5                  INCREASE OPERAND POINTER
         TM    5(R9),X'A0'             BLO A VALUE OR IN STACK ?
         BNZ   JOB1                    NO, BRANCH
         MVC   YPLACE(2),8(R9)         Y = DISP(BLO)
         OI    YPLACE,X'A0'            X = CDSA
JNE1     TM    0(R9),X'20'             LO A VALUE ?
         BO    JNE5                    NO, BRANCH
         TM    0(R9),X'80'             LO IN STACK ?
         BO    JNF2                    NO, BRANCH
         MVC   WPLACE(2),3(R9)         W = DISP(LO)
         OI    WPLACE,X'A0'            V = CDSA
JRB3     MVC   JRC3+2(2),YPLACE        PREPARE INSTRUCTION
         MVC   JRC3+4(2),WPLACE
         TM    0(R10),X'02'            OPT 'IMPL' OR 'EQUIV' ?
         BZ    JRC4                    YES, BRANCH
         TM    0(R10),X'01'            OPT AND ?
         BO    JRC2                    YES, BRANCH
JRC22    MVI   JRC3,X'D6'              PREPARE INSTRUCTION
JRC21    BAL   R2,GENTXT6              GENERATE 6 BYTES
JRC3     OC    0(1,0),0(0)             *** GENERATED CODE ***
JRF4     NI    YPLACE,X'0F'            CLEAR REGISTER NUMBER
         LH    R7,YPLACE               LOAD VALUE OF OBJ ST POINT
         OI    5(R9),X'08'             INSERT NO-ASSIGNMENT BIT
JRF41    LA    R9,5(,R9)               CLOPD
JRG4     BCT   R10,COMP                CLOPT AND COMPARE
JRC2     MVI   JRC3,X'D4'              INSERT OPER CODE INTO CODE
         B     JRC21
*
JRC4     MVC   JRC41+2(2),JRC3+2       PREPARE INSTRUCTION
         BAL   R2,GENTXT4              GENERATE 4 BYTES
JRC41    XI    0(0),X'01'              *** GENERATED CODE ***
         CLI   0(R10),X'21'            OPT EQUIV ?
         BE    JRC22                   YES, BRANCH
         MVI   JRC3,X'D7'              INSERT OPER-CODE INTO CODE
         B     JRC21
*
JNF2     TM    2(R9),X'FF'             LO A CONSTANT ?
         BNZ   JNF4                    NO, BRANCH
JSB3     MVC   JSE3+1(1),4(R9)         PREPARE INTRUCTION
         NI    JSE3+1,X'01'
         MVC   JSE3+2(2),YPLACE
         TM    0(R10),X'02'            WHICH OPT
         BZ    JSE4                    EQU OR IMPL, BRANCH
         TM    0(R10),X'01'            OPT AND ?
         BO    JSE2                    YES, BRANCH
JSE22    MVI   JSE3,X'96'              PREPARE INSTRUCTION
JSE21    BAL   R2,GENTXT4              GENERATE 4 BYTES
JSE3     OI    0(0),X'00'              *** GENERATED CODE ***
         B     JRF4
*
JSE2     MVI   JSE3,X'94'              PREPARE INSTRUCTION
         B     JSE21
*
JSE4     MVC   JSE41+2(2),JSE3+2       PREPARE INSTRUCTION
         BAL   R2,GENTXT4              GENERATE 4 BYTES
JSE41    XI    0(0),X'01'              *** GENERATED CODE ***
         CLI   0(R10),X'21'            OPT EQUIV ?
         BE    JSE22                   YES, BRANCH
         MVI   JSE3,X'97'              PREPARE INSTRUCTION
         B     JSE21
*
JNF4     BAL   R4,ROUTINE1             CALL ROUTINE NUMBER 1
JNF41    MVZ   WPLACE(1),VPLACE        PREPARE W-V-PLACE
         B     JRB3
*
JNE5     BAL   R4,ROUTINE3             CALL ROUTINE NUMBER 3
         B     JNF41
*
JOB1     TM    0(R9),X'A0'             LO A VALUE AND IN STACK ?
         BNZ   JOC2                    NO, BRANCH
         MVC   YPLACE(2),3(R9)         Y= DISPL(LO)
         OI    YPLACE,X'A0'            X=CDSA
         CLI   0(R10),X'21'            OPT IMPL ?
         BNE   JOE2                    NO, BRANCH
         AH    R7,ONEENTRY             RESERVE OBJECT STACK ENTRY
         STH   R7,WORKPL               CHECK MAX
         BAL   R4,MAXCH
         MVC   JOG1+4(2),YPLACE        PREPARE INSTRUCTION
         MVC   JOG1+2(2),WORKPL
         OI    JOG1+2,X'A0'
         BAL   R2,GENTXT6              GENERATE 6 BYTES
JOG1     MVC   0(1,CDSA),0(0)          *** GENERATED CODE ***
         MVC   3(2,R9),WORKPL          ADJUST OPERAND
         B     JPB1
*
JOE2     MVC   WORKPL(5),0(R9)         CHANGE LO AND BLO
         MVC   0(5,R9),5(R9)
         MVC   5(5,R9),WORKPL
         B     JNE1
*
JOC2     AH    R7,ONEENTRY             INCREASE P
         STH   R7,WORKPL               CHECK MAX
         BAL   R4,MAXCH
         STH   R7,YPLACE               Y = DISPL
         OI    YPLACE,X'A0'            X = CDSA
JPB1     TM    5(R9),X'20'             BLO A VALUE ?
         BO    JQB2                    AN ADDR, BRANCH
         TM    7(R9),X'FF'             BLO A CONSTANT ?
         BNZ   JQB2                    NO, BRANCH
         MVC   JQE1+1(1),9(R9)         PREPARE INSTRUCTION
         NI    JQE1+1,X'01'
         MVC   JQE1+2(2),YPLACE
         BAL   R2,GENTXT4              GENERATE 4 BYTES
JQE1     MVI   0(CDSA),X'00'           *** GENERATED CODE ***
         OI    6(R9),X'30'             ADJUST R9 ENTRY OF BLO
JQE2     NI    5(R9),X'5F'
         MVC   7(1,R9),SPBNST+1
         MVC   8(2,R9),YPLACE
         NI    8(R9),X'0F'
         B     JNE1
*
JMC2     BCTR  R10,0                   DECR OPT ST POINTER
         BAL   R4,SERR2                ERROR PATTERN ENTRY
         DC    H'182'                  ERROR 182
*
         LA    R10,1(,R10)             INCR OPT ST POINT
JMC31    MVC   5(5,R9),API             INSERT ALL PURPOSE IDENT
         B     JRF41
*
JMC3     BAL   R4,SERR2                ERROR PATTERN ENTRY
         DC    H'182'                  ERROR 182
*
         B     JMC31
*
JQB2     LA    R9,5(,R9)               INCREASE R9
         TM    0(R9),X'20'             BLO A VALUE ?
         BO    JQB4
         BAL   R4,ROUTINE1             LOAD W-V-PLACE FOR VALUE
JQD3     SH    R9,KH5                  INCREASE OPERAND ST POINTER
         MVC   JQE3+2(2),YPLACE        PREPARE INSTRUCTION
         MVC   JQE3+4(2),WPLACE
         MVZ   JQE3+4(1),VPLACE
         BAL   R2,GENTXT6              GENERATE 6 BYTES
JQE3     MVC   0(1,0),0(0)             *** GENERATED CODE ***
         B     JQE2
*
JQB4     BAL   R4,ROUTINE3
         OI    0(R9),X'40'             ADJUST OPERAND
         B     JQD3
*
***********************************************************************
*
*        COMPILER PROGRAM - CP77
*
***********************************************************************
*
*        LOGICAL OPERATION NOT
*        CONTEXT              EXPRESSION
*        SOURCE OPERATOR      ALL EXCEPT 'NOT',(,(/,'IF',ARITHMETIC
*                             AND RELATIONAL OPERATORS
*        STACK OPERATOR       'NOT'
*        OPERANDS             ONE BOOLEAN
*
         USING CP77,R12
CP77     LA    R4,JWB2                 LOAD RETURN ADDR
         BAL   R3,OPDTEST              OPDT AND ERROR 162
         BAL   R4,ARRTEST1             ARRAY AND PROC TEST
         TM    1(R9),X'03'             OPERAND BOOLEAN ?
         BO    JWD1                    YES, BRANCH
         BAL   R4,SERR2                ERROR PATTERN ENTRY
         DC    H'182'                  ERROR 182
*
JWC4     MVC   0(5,R9),API             INTRODUCE API
JWK3     BCT   R10,COMP                RELEASE OPERATOR AND COMP
JWD1     TM    COMPFLGS,COMPMODE       SYNTAX CHECK MODE ?
         BO    JWK3                    YES, BRANCH
         BAL   R4,OPDREC               OPERAND RECOGNIZER
         TM    0(R9),X'20'             OPERAND A VALUE ?
         BO    JWF2                    AN ADDR, BRANCH
         TM    2(R9),X'FF'             OPERAND A VARIABLE ?
         BZ    JWH1                    CONSTANT, BRANCH
         TM    0(R9),X'80'             OPERAND IN OBJ STACK ?
         BO    JWG3                    NO, BRANCH
JWH21    MVC   JWH2+2(2),3(R9)         PREPARE INSTRUCTION
         OI    JWH2+2,X'A0'            INTRODUCE CDSA
         BAL   R2,GENTXT4              GENERATE 4 BYTES
JWH2     XI    0(CDSA),X'01'           *** GENERATED CODE ***
JWH3     OI    0(R9),X'08'             INSERT NO ASSIGMENT BIT
JWB2     BCT   R10,COMP                RELEASE OPERATOR AND COMP
JWG3     BAL   R4,ROUTINE1             LOAD W-V-PLACE FOR VALUE
JWG31    AH    R7,ONEENTRY             RESERVE OBJECT STACK ENTRY
         STH   R7,WORKPL               STORE P INTO WORKPL
         BAL   R4,MAXCH                CHECK MAXIMUM
         NI    0(R9),X'5F'             ADJUST OPERAND
         MVC   3(2,R9),WORKPL          INSERT OBJ STACK DISPLACEMENT
         MVC   2(1,R9),SPBNST+1        INSERT BLOCK NUMBER
         MVC   JWJ3+2(2),WORKPL        PREPARE INSTRUCTION
         OI    JWJ3+2,X'A0'            INSERT CDSA
         MVC   JWJ3+4(2),WPLACE        INSERT W-PLACE
         MVZ   JWJ3+4(1),VPLACE        INSERT V-PLACE
         BAL   R2,GENTXT6              GENERATE 6 BYTES
JWJ3     MVC   0(1,CDSA),0(0)          *** GENERATED CODE ***
         B     JWH21
*
JWH1     AH    R7,ONEENTRY             INCREASE P
         STH   R7,WORKPL               STORE P INTO WORKPL
         BAL   R4,MAXCH                CHECK MAXIMUM
         MVC   JWK1+2(2),WORKPL        PREPARE INSTRUCTION
         OI    JWK1+2,X'A0'            INSERT CDSA
JWK11    MVI   JWK1+1,X'00'            INSERT FALSE
         TM    4(R9),X'01'             CONSTANT TRUE ?
         BO    JWK12                   YES, BRANCH
         MVI   JWK1+1,X'01'            INSERT TRUE
JWK12    BAL   R2,GENTXT4              GENERATE 4 BYTES
JWK1     MVI   0(CDSA),X'00'           *** GENERATED CODE ***
         MVC   3(2,R9),WORKPL          INSERT OBJ DISPLACEMENT
         NI    0(R9),X'5F'             ADJUST OPERAND
         OI    1(R9),X'30'             SET OPERAND AS VARIABLE
         MVC   2(1,R9),SPBNST+1        INSERT BLOCK NUMBER
         B     JWH3
*
JWF2     BAL   R4,ROUTINE3             LOAD V-W-PLACE FOR ADDR
         OI    0(R9),X'40'             ADJUST OPERAND
         B     JWG31
*
***********************************************************************
*
*        COMPILER PROGRAM - CP78
*
***********************************************************************
*
*        IF CLAUSE
*        CONTEXT              EXPRESSION
*        SOURCE OPERATOR      'THEN'
*        STACK OPERATOR       'IF','IFS'
*        OPERANDS             BOOLEAN OPERANDS
*
         USING CP78,R12
CP78     LA    R4,JZB1
         BAL   R3,OPDTEST              OPDT AND ERROR 162
         BAL   R4,ARRTEST1
         TM    1(R9),X'03'             OPERAND BOOLEAN ?
         BO    JYD1                    YES, BRANCH
         BAL   R4,SERR2                ERROR PATTERN ENTRY
         DC    H'182'                  ERROR NR 182
*
JZB1     CLI   0(R10),X'26'            OPERATOR IFS
         MVC   0(1,R10),0(R8)          INSERT SOURCE INTO STACK
         BNER  R5                      NO, BRANCH TO SUBSTART
         MVI   0(R10),X'27'            INSERT THENS INTO STACK
         SH    R11,KH614               SWITCH TO PROGRAM CONTEXT
         BR    R5                      BRANCH TO SUBSTART
*
JYD1     TM    COMPFLGS,COMPMODE       SYNTAX CHECK MODE ?
         BO    JZB1                    YES, BRANCH
         BAL   R4,OPDREC               OPERAND RECOGNIZER
         TM    0(R9),X'20'             OPERAND A VALUE ?
         BO    JYF2                    AN ADDR, BRANCH
         TM    0(R9),X'80'             OPERAND IN OBJECT STACK ?
         BO    JYH12                   NO, BRANCH
         SH    R7,ONEENTRY             RELEASE OBJ STACK ENTRY
JYH12    BAL   R4,ROUTINE1             LOAD V-W-PLACE FOR VALUE
JYH11    MVC   JYH1+2(2),WPLACE        INTRODUCE DISPLACEMENT
         MVZ   JYH1+2(1),VPLACE        INSERT V-PLACE INTO CODE
         BAL   R2,GENTXT4              GENERATE 4 BYTES
JYH1     TM    0(0),X'FF'              *** GENERATED CODE ***
         BAL   R4,LATRES               RESERVE LABEL
         MVC   3(2,R9),LN              INSERT LABEL INTO OPERAND
         MVC   JYJ3+2(2),LN            INSERT LABEL INTO CODE
         BAL   R2,GENTXT6              GENERATE 6 BYTES
JYJ3     L     BRR,0(LAT,0)            *** GENERATED CODE ***
         BZR   BRR                     *** GENERATED CODE ***
         B     JZB1
*
JYF2     BAL   R4,ROUTINE3             LOAD W-V-PLACE FOR ADDR
         B     JYH11
*
***********************************************************************
*
*        COMPILER PROGRAM - CP78
*
***********************************************************************
*
*        END OF CONDITIONAL EXPRESSION
*        CONTEXT              EXPRESSION
*        SOURCE OPERATOR      SEE EXPTESSION CONTEXT  MATRIX
*        STACK OPERATOR       'ELSE'
*        OPERANDS             TWO OPERANDS AND ONE LABEL
*
         USING CP79,R12
CP79     LA    R4,KBB2                 LOAD RETURN ADDR
         BAL   R3,OPDTEST              OPDT AND ERROR 162
         BAL   R4,ARRTEST1
         TM    1(R9),X'03'             LO BOOLEAN ?
         BO    KBD1                    YES, BRANCH
         BM    KCB11
         TM    1(R9),X'08'             LO A LABEL ?
         BZ    KFB2                    NO, BRANCH
         TM    6(R9),X'08'             BLD A LABEL ?
         BZ    KBD2                    NO, BRANCH
         TM    COMPFLGS,COMPMODE       SYNTAX CHECK MODE ?
         BO    KBD31                   YES, BRANCH
         BAL   R4,OPDREC
         TM    1(R9),X'40'
         BO    KBD2
         TM    3(R9),X'80'
         BO    KBH1                    YES, BRANCH
KFE1     MVC   KFE11+2(2),3(R9)        PREPARE INSTRUCTION
         OI    RII,X'01'
         SR    R15,R15                 PREPARE INSTRUCTION
         IC    R15,2(R9)
         SLL   R15,3
         STH   R15,WORKPL
         MVC   KFE12+2(2),WORKPL
         LA    R2,KFE11
         BAL   R14,GENTXTS
         DC    H'8'                    GENERATE 8 BYTES
*
         B     KBH1
*
KFE11    L     ADR,0(LAT,0)            *** GENERATED CODE ***
KFE12    L     GDSA,0(PBT,0)           *** GENERATED CODE ***
*
KFB2     BAL   R4,SERR1
         DC    H'178'                  ERROR 178
*
         B     KBD3
*
KBB2     LA    R9,10(,R9)              CLEAR TWO OPERANDS
KBD4     MVC   0(5,R9),API             INTRODUCE API
KBJ4     BCT   R10,COMP                CLOPT AND COMPARE
KBD1     TM    6(R9),X'03'             BLO BOOLEAN ?
         BO    KBE1                    YES, BRANCH
         TM    0(R9),APIMASK           LO AN API ?
         BO    KBD3                    YES, BRANCH
KBD2     BAL   R4,SERR1
         DC    H'165'                  ERROR 165
*
KBD3     LA    R9,10(,R9)              CLEAR TWO OPERANDS
         B     KBD4
*
KBE1     TM    COMPFLGS,COMPMODE       SYNTAX CHECK MODE ?
         BO    KBD31                   YES, BRANCH
         BAL   R4,OPDREC               OPERAND RECOGNIZER
         TM    0(R9),X'20'
         BO    KBF4
         TM    0(R9),X'80'             LO IN STACK ?
         BO    KBF3                    NO, BRANCH
         CLC   3(2,R9),8(R9)           LO AND BLO IN=PLACE ?
         BNE   KBG2                    NO, BRANCH
KBH1     MVC   WORKPL(2),8(R9)         LOAD LAST P
         NI    WORKPL,X'0F'
         LH    R7,WORKPL
KBH11    MVC   WORKPL(2),13(R9)        TRANSFER PRPOINT TO LAT
         LH    R15,WORKPL              ENTRY INDICATED BY R9+13
         L     R14,LATAB
         ST    R6,0(R14,R15)
KBD31    MVC   10(5,R9),5(R9)          C(R9+10)=C(R9+5)
         LA    R9,10(,R9)              CLEAR TWO OPERANDS
         MVI   GPBN+1,X'FF'
         OI    0(R9),X'08'
         BCT   R10,COMP                CLOPT AND COMPARE
KBG2     MVC   KBG21+4(2),3(R9)        PREPARE INSTRUCTION
         OI    KBG21+4,X'A0'
KBG22    MVC   KBG21+2(2),8(R9)
         OI    KBG21+2,X'A0'
         BAL   R2,GENTXT6              GENERATE 6 BYTES
KBG21    MVC   0(1,CDSA),0(CDSA)       *** GENERATED CODE ***
         B     KBH1
*
KBF3     TM    2(R9),X'FF'             LO A CONSTANT ?
         BZ    KBG3                    YES, BRANCH
         BAL   R4,ROUTINE1             CALL ROUTINE NUMBER 1
KBH3     MVC   KBG21+4(2),WPLACE       PREPARE INSTRUCTION
         MVZ   KBG21+4(1),VPLACE
         B     KBG22
*
KBF4     BAL   R4,ROUTINE3             CALL ROUTINE NUMBER 3
         B     KBH3
*
KBG3     MVC   KBG31+1(1),4(R9)        PREPARE INSTRUCTION
         NI    KBG31+1,X'01'
         MVC   KBG31+2(2),8(R9)
         OI    KBG31+2,X'A0'
         BAL   R2,GENTXT4              GENERATE 4 BYTES
KBG31    MVI   0(CDSA),X'00'           *** GENERATED CODE ***
         B     KBH1
*
KCB11    TM    5(R9),X'40'
         BZ    KCB1
         MVZ   8(1,R9),10(R9)
         SR    R14,R14
         LA    R15,1
         XI    5(R9),X'C0'
         IC    R14,8(R9)
         SRL   R14,4
         TM    6(R9),X'02'
         BZ    KCB12
         STC   R14,CIR+1
         SRL   R14,1
         SLL   R15,0(R14)
         STC   R15,KCE112+1            SET OR MASK
KCE112   OI    RIR+1,X'00'
         B     KCB1
*
KCB12    SLL   R15,0(R14)
         STC   R15,KCB13+1
KCB13    OI    RII+1,X'00'
         STC   R14,CII+1
KCB1     TM    6(R9),X'03'             BLO REAL OR INTEGER ?
         BNM   KBD21                   NO, BRANCH
         TM    COMPFLGS,COMPMODE       SYNTAX CHECK MODE ?
         BO    KBD31                   YES, BRANCH
KCE1     BAL   R4,OPDREC               OPERAND RECOGNIZER
         TM    1(R9),X'02'             LO REAL ?
         BZ    KEB1                    YES, BRANCH
         TM    6(R9),X'02'             BLO REAL ?
         BZ    KDB1                    INTEGER, BRANCH
         LA    R4,KCF4
         BAL   R3,ROUTIN15             CALL ROUTINE NUMBER 15
KCE11    MVC   WORKPL(2),ZEROHW
         MVZ   WORKPL(1),8(R9)         CHECK IF LO AND BLO ARE
         MVZ   WORKPL+1(1),3(R9)       LOADED IN THE SAME FPR
         CLC   WORKPL(1),WORKPL+1
         BNE   KCF2                    NO, BRANCH
         SR    R14,R14                 INTRODUCE R9 ADD IN RUTR
         IC    R14,WORKPL
         SRL   R14,3
KCG11    LA    R9,10(0,R9)
         ST    R9,RUTR(R14)
         SH    R9,KH10
         B     KBH1
*
KCF2     SR    R14,R14                 LOAD FPR NUMBER OF LO
         IC    R14,WORKPL+1
         SRL   R14,5                   PREPARE MASK TO SET RIR
         LA    R15,1
         SLL   R15,0(R14)
         STC   R15,KCF21+1
         XI    KCF21+1,X'FF'
KCF21    NI    RIR+1,X'00'
         SLL   R14,1                         PREPARE INSTRUCTION
         STC   R14,KCG2+1
         OC    KCG2+1(1),WORKPL
         BAL   R2,GENTXTP2             GENERATE 2 BYTES
KCG2     LDR   0,0                     *** GENERATED CODE ***
KCH21    SR    R14,R14
         IC    R14,8(R9)               SET TO ONE RIR
         SRL   R14,5
         LA    R15,1
         SLL   R15,0(R14)
         STC   R15,KCH2+1
KCH2     OI    RIR+1,X'00'
         SLL   R14,1                   SET CIR
         STC   R14,CIR+1
         SLL   R14,1
         B     KCG11
*
KCE4     BAL   R4,ROUTINE1             CALL ROUTINE NUMBER 1
KCF4     MVZ   KCH4+1(1),8(R9)         PREPARE INSTRUCTION
         MVN   KCH4+1(1),VPLACE
         MVC   KCH4+2(2),WPLACE
         BAL   R2,GENTXTP4             GENERATE 4 BYTES
KCH4     LD    0,0(0,0)                *** GENERATED CODE ***
         B     KCH21
*
KDB1     LA    R4,KDC41
         BAL   R3,ROUTIN15
         TM    3(R9),X'F0'             LO IN FPR0 ?
         BNZ   KDE31                   NO, BRANCH
KDG11    BAL   R2,GENTXT6              GENERATE 6 BYTES
         BALR  BRR,0                   *** GENERATED CODE ***
         B     10(,BRR)                *** GENERATED CODE ***
         MVC   WORKPL(2),13(R9)
         LH    R15,WORKPL
         L     R14,LATAB
         ST    R6,0(R14,R15)
         LA    R9,5(,R9)
         NI    RIR+1,X'FE'
         BAL   R4,TRINRE
         LA    R9,5(,R9)
         ST    R9,RUTR
         SH    R9,KH10
         B     KBD31
*
KDE31    SR    R14,R14                 PREPARE INSTRUCTION
         IC    R14,3(R9)
         SRL   R14,4
         STC   R14,KDF3+1
         SRL   R14,1
         LA    R15,1
         SLL   R15,0(R14)
         STC   R15,WORKPL
         XI    WORKPL,X'FF'
         NC    RIR+1(1),WORKPL
         BAL   R2,GENTXTP2             GENERATE 2 BYTES
KDF3     LDR   0,0                     *** GENERATED CODE ***
         B     KDG11
*
KDC41    MVC   KDC4+2(2),WPLACE        PREPARE INSTRUCTION
         MVN   KDC4+1(1),VPLACE
         BAL   R2,GENTXTP4             GENERATE 4 BYTES
KDC4     LD    0,0(0,0)                *** GENERATED CODE ***
         AH    R7,ONEENTRY
         B     KDG11
*
KEB1     TM    6(R9),X'01'             BLO INTEGER ?
         BZ    KEC2                    NO, BRANCH
         LA    R4,KEF31
         BAL   R3,ROUTIN15             CALL ROUTINE NUMBER 15
         MVC   WORKPL(2),ZEROHW
         MVZ   WORKPL(1),8(R9)
         MVZ   WORKPL+1(1),3(R9)
         CLC   WORKPL(1),WORKPL+1      LO AND BLO ARE IN THE SAME GPR ?
         BNE   KEF2                    NO, BRANCH
         SR    R14,R14                 INTRODUCE R9 ADD IN RUTI
         IC    R14,WORKPL
         SRL   R14,2
KEG1     LA    R9,10(0,R9)
         ST    R9,RUTI
         SH    R9,KH10
         B     KBH1
*
KEF2     SR    R14,R14                 LOAD GPR NR OF LO
         IC    R14,WORKPL+1
         SRL   R14,4                   PREPARE MASK TO SET RII
         LA    R15,1                   TO ZERO
         SLL   R15,0(R14)
         STC   R15,KEF21+1
         XI    KEF21+1,X'FF'
KEF21    NI    RII+1,X'00'
         STC   R14,KEG21+1
         OC    KEG21+1(1),WORKPL
         BAL   R2,GENTXT2              GENERATE 2 BYTES
KEG21    LR    0,0                     *** GENERATED CODE ***
KEH21    SR    R14,R14                 SET TO ONE RII
         IC    R14,8(R9)
         SRL   R14,4
         LA    R15,1
         SLL   R15,0(R14)
         STC   R15,KEH2+1
KEH2     OI    RII+1,X'00'
         STC   R14,CII+1               SET CII
         SLL   R14,2
         B     KEG1
*
KEF31    MVZ   KEG3+1(1),8(R9)         PREPARE INSTRUCTION
         MVN   KEG3+1(1),VPLACE
         MVC   KEG3+2(2),WPLACE
         BAL   R2,GENTXT4              GENERATE 4 BYTES
KEG3     L     0,0(0,0)                *** GENERATED CODE ***
         B     KEH21
*
KEC2     NI    RIR+1,X'FE'
         BAL   R4,TRINRE
         B     KCE11
*
KBD21    TM    5(R9),APIMASK           BLO AN API ?
         BO    KBD2+6                  YES, BRANCH
         B     KBD2
*
***********************************************************************
*
*        COMPILER PROGRAM - CP80
*
***********************************************************************
*
*        BEGIN OF CONDITIONAL EXPRESSION
*        CONTEXT              EXPRESSION
*        SOURCE OPERATOR      'IF'
*        STACK OPERATOR       (
*        OPERANDS             NONE
*
         USING CP80,R12
CP80     TM    COMPFLGS,OPERAND        OPERAND ON ?
         BZ    KIB2                    NO, BRANCH
         BAL   R4,SERR4                ERROR PATTERN ENTRY
         DC    H'164'                  ERROR 164
*
         LA    R9,5(,R9)               CLOPD
KIF2     BAL   R4,MOVEOPTK             RESERVE OPERATOR STACK FNT
         MVC   0(1,R10),0(R8)          INSERT SOURCE INTO STACK
         BR    R5                      BRANCH TO SUBSTART
*
KIB2     TM    COMPFLGS,COMPMODE       SYNTAX CHECK MODE ?
         BO    KIF2                    YES, BRANCH
         BAL   R4,CLEARRG              CLEAR REGISTERS
         B     KIF2                    BRANCH
*
***********************************************************************
*
*        COMPILER PROGRAM - CP86
*
***********************************************************************
*
*        ERRONEOUS CASE - WRONG CONDITIONAL EXPRESSION  OR STATEMENT
*        CONTEXT              EXPRESSION
*        SOURCE OPERATOR      'ELSE'
*        STACK OPERATOR       'IF','IFS'
*        OPERANDS             NONE OR ONE
*
         USING CP86,R12
CP86     TM    COMPFLGS,OPERAND        OPERAND ON ?
         BZ    KUB2                    NO, BRANCH
         BAL   R4,SERR4                ERROR PATTERN ENTRY
         DC    H'161'                  ERROR 161
*
KUE1     CLI   0(R10),X'1D'            OPERATOR STACK 'IF' ?
         BNE   KUE2                    NO, BRANCH
         MVC   0(1,R10),0(R8)          INSERT SOURCE INTO STACK
         BAL   R4,STACKAPI
         BR    R5                      BRANCH TO SUBSTART
*
KUB2     BAL   R4,SERR4                ERROR PATTERN ENTRY
         DC    H'160'                  ERROR 160
*
         SH    R9,KH5                  RESERVE OPERAND STACK ENT
         B     KUE1
*
KUE2     SH    R11,KH614               CSW(PC)
         MVI   0(R10),X'27'            INSERT THENS INTO STACK
         BR    R5                      BRANCH TO SUBSTART
*
***********************************************************************
*
*        COMPILER PROGRAM - CP87
*
***********************************************************************
*
*        FIRST ALTERNATIVE IN CONDITIONAL  EXPRESSION
*        CONTEXT              EXPRESSION
*        SOURCE OPERATOR      'ELSE'
*        STACK OPERATOR       'THEN'
*        OPERANDS             ONE OPERAND AND ONE LABEL
*
         USING CP87,R12
CP87     LA    R4,KWJ3                 LOAD RETURN ADDR
         BAL   R3,OPDTEST              OPDT AND ERROR 162
         BAL   R4,ARRTEST1
         TM    COMPFLGS,COMPMODE       SYNTAX CHECK MODE ?
         BO    KWJ3                    YES, BRANCH
         BAL   R4,OPDREC               CALL OPERAND RECOGNITION
         TM    1(R9),X'03'             LO BOOLEAN ?
         BO    KWE1                    YES, BRANCH
         BM    KXB1
         TM    1(R9),X'08'             LO LABEL ?
         BZ    KYB2
         TM    1(R9),X'04'
         BO    KYB2
         TM    3(R9),X'80'
         BO    KWG13
         TM    RII,X'01'               ADR OCCUPIED ?
         BZ    KYF1                    NO, BRANCH
         BAL   R4,ROUTIN10             STADR
KYF1     MVC   KYF11+2(2),3(R9)        PREPARE INSTRUCTION
         SR    R15,R15                 PREPARE INSTRUCTION
         IC    R15,2(,R9)
         SLL   R15,3
         STH   R15,WORKPL
         MVC   KYF12+2(2),WORKPL
         LA    R2,KYF11
         BAL   R14,GENTXTS
         DC    H'8'                    GENERATE 8 BYTES
*
         AH    R7,ONEENTRY
         STH   R7,WORKPL
         MVC   3(2,R9),WORKPL
         OI    3(R9),X'80'
         NI    0(R9),X'0F'
         OI    0(R9),X'A0'
KWG13    MVI   RII,X'00'
         B     KWG12
*
KYF11    L     ADR,0(LAT,0)            *** GENERATED CODE ***
KYF12    L     GDSA,0(PBT,0)           *** GENERATED CODE ***
*
KYB2     BAL   R4,SERR1
         DC    H'178'                  ERROR 178
*
         MVC   0(5,R9),API
         B     KWJ3
*
KWJ3     MVC   0(1,R10),0(R8)          C(R10)=C(R8)
         MVI   GPBN+1,X'FF'
         BR    R5                      RETURN TO SUBSTART
*
KWE1     TM    0(R9),X'20'             LO A VALUE ?
         BO    KWE3                    NO, BRANCH
         TM    0(R9),X'80'             LO IN OBJECT STACK ?
         BO    KWF2                    NO, BRANCH
KWG12    SH    R7,ONEENTRY
KWG1     BAL   R4,LATRES
         MVC   KWH1+2(2),LN            PREPARE INSTRUCTION
         BAL   R2,GENTXT6              GENERATE 6 BYTES
KWH1     L     BRR,0(LAT,0)            *** GENERATED CODE ***
         BR    BRR                     *** GENERATED CODE ***
         MVC   WORKPL(2),8(R9)         TRANSFER PRPOINT TO LAT ENTRY
         LH    R15,WORKPL              INDICATED BY R9+8
         L     R14,LATAB
         ST    R6,0(R15,R14)
         MVC   8(2,R9),LN              TRANSFER LNR TO R9+5 ENTRY
         B     KWJ3
*
KWF2     TM    2(R9),X'FF'             LO A CONSTANT?
         BZ    KWF21                   YES, BRANCH
         BAL   R4,ROUTINE1             CALL ROUTINE NUMBER 1
KWG2     AH    R7,ONEENTRY             INCREASE P
         STH   R7,WORKPL
         BAL   R4,MAXCH                CHECK MAXIMUM
         MVC   KWH2+2(2),WORKPL        PREPARE INSTRUCTION
         OI    KWH2+2,X'A0'
         MVC   KWH2+4(2),WPLACE
         MVZ   KWH2+4(1),VPLACE
         BAL   R2,GENTXT6              GENERATE 6 BYTES
KWH2     MVC   0(1,CDSA),0(0)          *** GENERATED CODE ***
KWF23    MVC   3(2,R9),WORKPL          ADJUST R9 ENTRY
         NI    0(R9),X'5F'
         MVC   2(1,R9),SPBNST+1
         B     KWG12
*
KWF21    AH    R7,ONEENTRY             INCREASE P
         STH   R7,WORKPL
         BAL   R4,MAXCH                CHECK MAX
         NI    4(R9),X'01'
         MVC   KWF22+2(2),WORKPL       PREPARE INSTRUCTION
         OI    KWF22+2,X'A0'
         MVC   KWF22+1(1),4(R9)
         BAL   R2,GENTXT4              GENERATE 4 BYTES
KWF22    MVI   0(CDSA),X'00'           *** GENERATED CODE ***
         OI    1(R9),X'30'             ADJUST R9 ENTRY
         B     KWF23
*
KWE3     BAL   R4,ROUTINE3             CALL ROUTINE NUMBER 3
         XI    0(R9),X'60'
         B     KWG2
*
KXB1     TM    1(R9),X'02'             LO REAL ?
         BZ    KXB3                    INTEGER, BRANCH
         TM    0(R9),X'20'             LO A VALUE ?
         BO    KXC2                    NO, BRANCH
         TM    0(R9),X'40'             LO IN A FPR ?
         BZ    KXH22
         TM    0(R9),X'80'             LO IN A FPR BEFORE ?
         BO    KXC2                    NO, BRANCH
         SH    R7,ONEENTRY             REDUCE O
KXC2     BAL   R4,ROUTIN11             BRANCH TO ROUTINE 11
         SH    R9,KH5                  REDUCE R9
         TM    5(R9),X'20'             LO A VALUE ?
         BZ    KXG2                    YES, BRANCH
         BAL   R4,ROUTINE2             LOAD LO INTO A FPR
KXH2     LA    R9,5(,R9)               INCREACE R9
KXH22    BAL   R4,ROUTIN12             CALL ROUTINE NUMBER 12
KWG11    MVC   5(1,R9),3(R9)
         B     KWG1
*
KXG2     BAL   R4,ROUTINE4             LOAD FOR
         B     KXH2
*
KXB3     TM    0(R9),X'20'             LO A VALUE ?
         BO    KXC4                    NO, BRANCH
         TM    0(R9),X'40'             LO IN A GPR ?
         BZ    KXH21
         TM    0(R9),X'80'             LO IN A GPR ?
         BO    KXC4                    NO, BRANCH
         SH    R7,ONEENTRY             REDUCE P
KXC4     BAL   R4,ROUTINE7             BRANCH TO ROUTINE 11
         SH    R9,KH5                  REDUCE R9
         TM    5(R9),X'20'             LO A VALUE ?
         BZ    KXG4                    YES, BRANCH
         BAL   R4,ROUTINE6             LOAD LO INTO GPR
KXH23    LA    R9,5(,R9)
KXH21    BAL   R4,ROUTINE8
         B     KWG11
*
KXG4     BAL   R4,ROUTINE5             LOAD LO IN GPR
         B     KXH23
*
***********************************************************************
*
*        END OF IEX50005
*
***********************************************************************
*
