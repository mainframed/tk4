    TITLE 'IEX50003 - CP51, CP52, CP54, CP56, CP59, CP62, CP85, CP34'
*
***********************************************************************
*
*        COMPILER PROGRAM - CP51
*
***********************************************************************
*
*   UPPER BOUND HANDLING
*        CONTEXT              STATEMENT
*        SOURCE OPERATOR      COMMA, RIGHT BRACKET
*        STACK OPERATOR
*        OPERANDS             UPPER BOUNDARY
*                             LOWER BOUNDARY IN STACK
*                             ARRAY IDENTIFIER
*
*        BIT PATTERNS
*
BOOTYPEM EQU   X'03'                   BOOLEAN TYPE MASK
REALTYPM EQU   X'02'                   REAL TYPE
*
         USING CP51,R12
CP51     LA    R4,EQD2                 RETURN IF OPERAND MISSING
         BAL   R3,OPDTEST              OPERAND TEST
         BAL   R4,TARITHM              OPERAND ARITHMETIC ?
         B     EQD1                    +00 ARITHMETIC
*
EQD2     LA    R9,5(,R9)               +04 CLOPD
EQD3     CLI   0(R8),XFRSQBR           RIGHT SQUARE BRACKET ?
         BE    EQD4                    YES, BRANCH
         BCTR  R10,R5                  CLOPT SUBSTART
EQD4     LA    R9,10(,R9)              CLEAR TWO OPERANDS
         SH    R10,KH2                 CLEAR TWO OPERATORS
         MVC   KONSUM,0(R9)            R9,= R9+C(R9)
         AH    R9,KONSUM               REMOVE STACKED ARRAY IDENTIFIER
ETB3     LA    R9,5(,R9)               CLOPD
         NI    COMPFLGS,255-OPERAND    RESET OPERAND
ETE3     CLI   1(R8),XFZETA            R8+1 = ZETA ?
         MVC   GREGN(2),ZEROHW         CLEAR COUNTER
         BL    ETF2                    LOW, OPERATOR
         BH    ETF4                    HIGH, OPERAND
         BAL   R4,JBUFFER              ZETA, CHANGE BUFFER
         B     ETE3
*
ETF2     LA    R8,1(,R8)               INCR R8
         CLI   0(R8),XFCOMMA           COMMA ?
         BNE   COMP                    NO, BRANCH
ETH2     BR    R5                      RETURN TO SUBSTART
*
ETF4     BAL   R4,SERR1
         DC    H'191'                  ERROR 191
         BR    R5                      RETURN TO SUBSTART
*
EQD1     TM    COMPFLGS,COMPMODE       SYNTAX CHECK MODE ?
         BO    EQD2                    YES, BRANCH
         BAL   R4,OPDREC               OPERAND RECOGNIZER
         TM    1(R9),X'01'             OPERAND INTEGER
         BO    EQG1                    YES
         BAL   R4,TRREIN               GENERATE A CALL TO CONVERSION
*                                      REAL INTEGER
         AH    R7,ONEENTRY             RESERVE PLACE FOR OPERAND
         STH   R7,WORKPL
         BAL   R4,MAXCH                CHECK MAX
         STH   R7,EQF2+2               INSERT DISPL IN STORE INSTRUCT
         BAL   R2,GENTXT4              GENERATE 4 BYTES
EQF2     ST    R14,0(CDSA,0)           *** GENERATED CODE ***
         MVC   0(2,R9),INTEGTYP        INTERNAL NAME, INTEGER IN STACK
         STH   R7,SPBNST+2
         MVC   2(3,R9),SPBNST+1
EQG1     BAL   R4,MOVEOPDK             RESERVE ONE OPDK ENTRY
         MVC   0(5,R9),10(R9)          MOVE LOWER BOUNDRY
         MVI   10(R9),X'C0'            ITAB IDENTIFIER
         MVI   11(R9),X'31'            INTEGER VARIABLE
         MVC   12(1,R9),SPBNST+1       CURRENT PBN AND LAST
         MVC   13(2,R9),USPEI2         ENTRY IN SMF TO OPERAND
         MVC   0(2,R10),FORMINUS       FOR.= AND - TO OPERATOR STACK
         BAL   R4,MOVEOPTK             RESERVE ONE OPTK ENTRY
         ST    R8,HHSOURCE             SAVE SOURCE POINTER
         LA    R8,HTRICK               SET R8 TO HTRICK
         LA    R11,324(,R11)           SWITCH TO EXPRESSION CONTEXT
         L     R1,ADDHZB1
         L     R12,SCPTAB+4*69         R12 -> CP69
         BR    R1                      BRANCH TO CP 69
*
*        RETURN FROM CP20 AFTER ASSIGNMENT OF UPPER-LOWER
*        BOUNDRY+1 TO SMF
*
DERE2    L     R8,HHSOURCE             RESET R8
         TM    COMPFLGS+2,NOTEST
         BO    ERE2                    NO ARRAY BOUND TEST GENERATED
*                                      TEST FOR ARRAY BOUNDRY ERROR
         BAL   R2,GENTXT4              GENERATE 4 BYTES
         BNH   ARRAYBD(,FSA)           *** GENERATED CODE ***
ERE2     LH    R1,USPEI2               COMPUTE AND
         LA    R1,4(,R1)               STORE NEXT ENTRY IN
         STH   R1,USPEI2               SMF IN USPEI2
         CLI   0(R8),XFCOMMA           MORE BOUND PAIRS LEFT IN ARRAY?
         BNE   ERE3                    NO
         MVC   0(2,R9),INTEGTYP        OPERAND INTEGER VALUE
         AH    R7,ONEENTRY
         STH   R7,SPBNST+2             CURRENT PBN AND NEXT OBJECT
         MVC   2(3,R9),SPBNST+1        TIME STACK DISPLACEMENT TO
         SH    R7,ONEENTRY             OPERAND IN STACK
         BR    R5                      SCAN TO NEXT OPERATOR
*
*        LAST BOUND PAIR IN THIS ARRAY
*
ERE3     LA    R9,5(,R9)               REMOVE ONE OPERAND
         MVI   ERJ4+3,X'01'            DETERMINE AND INSERT
         TM    1(R9),BOOTYPEM          Z=8,4 OR 1 INTO
         BO    ERJ41                   LOAD
         MVC   ERJ4+2(2),ONEENTRY      GPRA
         TM    1(R9),REALTYPM          INSTRUCTION
         BO    ERJ41
         MVI   ERJ4+3,X'04'            UPDATE GENERATED CODE
ERJ41    BAL   R2,GENTXT6              GENERATE 6 BYTES
*                                      *** GENERATED CODE ***
         SR    GPRC,GPRC               CLEAR REG
ERJ4     LA    GPRA,0(0,0)             LOAD GPRA INSTRUCTION
*                                      *** GENERATED CODE ***
         SR    R1,R1                   CALCULATE
         IC    R1,USPEI4+1             LENGTH OF SMF P-PART
         STC   R1,ESE4+1               NUMBER OF SUBSCRIPTS TO CODE
         LA    R1,1(,R1)
         SLL   R1,2                    INSERT
         BCTR  R1,0                    IN CODE FOR COPY OF
         STC   R1,ESF4+1               SMF
ESB1     LH    R1,USPEI2
         STH   R1,ESD1+2               DISP IN SMF TO INSTRUCTION
         SH    R1,KH4                  NEXT ENTRY IN SMF
         STH   R1,USPEI2               CALCULATED DOWNWARDS
         STH   R1,ESK1+2               INSERT IN CODE
         BAL   R2,GENTXT4              GENERATE 4 BYTES
ESD1     ST    GPRA,0(CDSA,0)          *** GEN CODE *** STORE OF P(4)
         LH    R1,USPEI4               REDUCE DIMENSION
         BCTR  R1,0                    COUNT
         LTR   R1,R1                   CODE FOR LAST ENTRY P(1) GEN ?
         BL    ESC2                    YES
         STH   R1,USPEI4               STORE DIMENSION VALUE
         STH   R7,ESH1+2               INSERT DISPL OF LOWER BOUND
         SH    R7,ONEENTRY             RELEASE OBJECT TIME STACK
         LA    R2,ESE1                 GENERATE CODE FOR
         BAL   R14,GENTXTS             DETERMINE OF SMF
         DC    H'12'                   GENERATE 12 BYTES
*
         B     ESB1                    CONTINUE TO NEXT ENTRY IN SMF
*
ESC2     LA    R9,5(,R9)               REMOVE ARRAY IDENTIFIER
         BCTR  R10,0                   REMOVE ARRAY OPERATOR
         MVC   USPEI4(2),0(R9)         NUMBER OF PREVIOUSLY
*                                      STACKED ARRAY IDENT TO WORKAR
ESE21    LH    R14,USPEI2
ESE22    STH   R14,ESE3+2              SMF DISPL FOR LAST ELEMENT+1
         SH    R14,KH4
         STH   R14,ESJ2+2              SMF DISPL FOR FIRST ELEMENT
         SH    R14,KH4
         STH   R14,ESC3+2              SMF DISPL FOR ZERO ELEMENT
         SH    R14,KH4                 SMF DISPL FOR START OF SMF
         STH   R14,ESE5+8              TO CODE
         STH   R14,ESE5+2
         MVZ   ESE5+2(1),ESE5+4
         MVC   ESE4+2(2),ESE5+2
         LA    R2,ESE2                 GENERATE CODE FOR RESERVATION
         BAL   R14,GENTXTS             OF MAIN STORAGE FOR ARRAY
         DC    Y(ESE4-ESE2+4)          LENGTH OF GENERATED CODE
*                                      STACKED ARRAY IDENT TO WORKAREA
         LH    R1,USPEI4               ANY ARRAY IDENT WITH SAME
         SH    R1,KH5                  DIMENSIONS LEFT IN STACK ?
         BM    ETB3                    NO
         STH   R1,USPEI4               SAVE NUMBER OF ARRAYS LEFT
         LA    R9,5(,R9)               CLEAR OPERAND
         NC    ESF4+4(2),CLEARDIS      SMF+16 OF ORIGINAL ARRAY
         OC    ESF4+4(2),ESD1+2        INSERTED AS DISPLACEMENT
         MVC   WORKPL(2),3(R9)
         NI    WORKPL,X'0F'
         LH    R1,WORKPL
         LA    R14,16(,R1)
         STH   R14,ESF4+2              NEW SMF DISP +16
         OI    ESF4+2,CDSA*16          REGISTER CDSA TO CODE
         BAL   R2,GENTXT6              GENERATE 6 BYTES
ESF4     MVC   0(0,CDSA),0(CDSA)       *** GENERATED CODE ***
         SH    R14,KH4                 NEW USPEI4 TO R1=SMF-DISP+12
         B     ESE22
*
*        CODE FOR RESERVATION OF MAIN STORAGE FOR ARRAY
*
ESE2     LR    0,GPRA               *  *** GENERATED CODE ***
         BAL   ADR,GETMSTO(FSA)     ×  CALL GETMAIN ROUTINE IN FSA
ESJ2     ST    1,0(CDSA,0)          ×
         LR    R14,1                ×
         SR    1,GPRC               ×
ESC3     ST    1,0(CDSA,0)          ×
         AR    R14,GPRA             ×
ESE3     ST    R14,0(CDSA,0)        ×
ESE5     MVC   0(4,CDSA),12(CDSA)   ×  MOVE CHAINING ADDR
         LA    ADR,0(0)             ×  STORE DISPL OF LAST SMF
         ST    ADR,12(CDSA)         ×  IN DSA
ESE4     MVI   0(CDSA),0            ×  NUMBER OF SUBSCRIPTS TO SMF
ESE1     LR    GPRB,GPRA            ×  CODE FOR DETERMINE OF
ESH1     M     GPRB-1,0(CDSA,0)     ×  SMF
         AR    GPRC,GPRB            ×
ESK1     M     GPRA-1,0(CDSA,0)     V
*
*        CONSTANTS AND VARIABLES
*
FORMINUS DC    X'2D01'                 FOR := AND - OPERATORS
HTRICK   DC    X'00'                   +
         DC    X'C801000004'           1 AS INTEGER CONSTANT
         DC    X'1C'                   DO
HHSOURCE DC    F'0'                    SAVE AREA FOR R8
ADDHZB1  DC    A(DHZB1)                ADDR IN CP 69
*
***********************************************************************
*
*        COMPILER PROGRAM  - CP52
*
***********************************************************************
*
*   ARRAY DECLARATION, BEGINNING
*        CONTEXT              STATEMENT
*        SOURCE OPERATOR      LEFT BRACKET, COMMA
*        STACK OPERATOR       ARRAY
*        OPERAND              ARRAY IDENTIFIER
*
         USING CP52,R12
CP52     CLI   0(R8),XFCOMMA           COMMA ?
         BNE   EWF1                    NO,LAST ARRAY IDENTIFIER
         LH    R14,GREGN
         LA    R14,5(R14)              COUNT ARRAY IDENTIFIERS
         STH   R14,GREGN
         BR    R5                      RETURN TO SUBSTART
*
EWF1     BAL   R4,MOVEOPTK             RESERVE ONE OPTK ENTRY
         MVI   0(R10),X'2C'            OPTH (SPEC BRACKET)
         SH    R9,KH10                 R9 IS DECREASED BY TEN
         CR    R10,R9                  CHECK OVERFLOW
         BNL   STACKOFL
         MVC   5(5,R9),10(R9)          MOVE ARRAY IDENTIFIER
         MVC   10(2,R9),GREGN          NUMBER OF ARRAY IDENTIFIERS-1
*                                      TO OPERAND STACK
*
*        CALCULATE AND SAVE NUMBER OF SUBSCRIPTS IN USPE14
*
         SR    R1,R1
         IC    R1,8(R9)
         SRL   R1,4
         LA    R1,1(R1)
         STH   R1,USPEI4
*
*        CALCULATE AND SAVE SMF DISPL +16 IN USPE12
*
         MVC   USPEI2(2),8(R9)
         NI    USPEI2,X'0F'
         LH    R1,USPEI2
         LA    R1,16(R1)
         STH   R1,USPEI2
         MVC   0(2,R9),INTEGTYP        OPERAND INTEGER VALUE IN STACK
         AH    R7,ONEENTRY             NEXT OBJECT TIME ENTRY
         STH   R7,SPBNST+2             CURRENT PBN AND
         MVC   2(3,R9),SPBNST+1        DISPL TO OPERAND STACK
         SH    R7,ONEENTRY             RELEASE OBJECT TIME STACK
         BR    R5                      SCAN TO NEXT OPERATOR (SUBSTART)
*
*        CONSTANTS AND VARIABLES
*
INTEGTYP DC    X'4031'                 INTEGER TYPE VARIABLE
*
***********************************************************************
*
*        COMPILER PROGRAM - CP54
*
***********************************************************************
*
*   ARRAY DECLARATION, TERMINATION
*        CONTEXT              STATEMENT
*        SOURCE OPERATOR      DELTA
*        STACK OPERATOR       ARRAY
*        OPERAND              NONE
*
         USING CP54,R12
CP54     TM    COMPFLGS,OPERAND         OPDT
         BO    FAC2                     YES, BRANCH
FAE2     BCTR  R10,0                    CLOPT
         BAL   R4,SCHDL                 SEMICOLON HANDLING
         SH    R11,KH290                SWITCH TO PROGRAM CONTEXT
         BR    R5                       RETURN TO SUBSTART
*
FAC2     BAL   R4,SERR4
         DC    H'164'                   ERROR 164
         LA    R9,5(,R9)                CLOPD
         B     FAE2
*
***********************************************************************
*
*        COMPILER PROGRAM - CP56
*
***********************************************************************
*
*   DESIGNATIONAL EXPRESSIONS
*        CONTEXT              STATEMENT
*        SOURCE OPERATOR      (
*        STACK OPERATOR       GOTO, SWITCH =
*        OPERAND              NONE
*
         USING CP56,R12
CP56     TM    COMPFLGS,OPERAND        OPDT
         BO    FEB2
FEC1     LA    R11,324(,R11)           CSW(EXP)
         BAL   R4,MOVEOPTK             OPTH(SOURCE)
         MVC   0(1,R10),0(R8)
         BR    R5                      RETURN TO SUBSTART
*
FEB2     BAL   R4,SERR4
         DC    H'164'                  ERROR 164
         LA    R9,5(,R9)               CLOPD
         NI    COMPFLGS,255-OPERAND    RESET OPERAND
         B     FEC1
*
***********************************************************************
*
*        COMPILER PROGRAM - CP59
*
***********************************************************************
*
*   SWITCH LIST HANDLING
*        CONTEXT              STATEMENT
*        SOURCE OPERATOR      COMMA, DELTA
*        STACK OPERATOR       SWITCH =
*        OPERANDS             DESIGNATIONAL OPERAND (NTH PARAMETER)
*                             PARAMETERCOUNT AND PRPOINT (N-1 ENTRIES)
*                             SWITCH IDENTIFIER
*                             LABEL OPERAND
*
         USING CP59,R12
CP59     LA    R4,FKJ2                 RETURN IF OPERAND MISSING
         BAL   R3,OPDTEST              OPERAND TEST
         TM    1(R9),X'08'             OPERAND A LABEL ?
         BZ    FKC2                    NO, BRANCH TO ERROR 175
         TM    0(R9),APIMASK
         BO    FKJ2
         TM    1(R9),X'04'             SWITCH IDENTIFIER ?
         BO    FKC2                    YES, ERROR
         TM    COMPFLGS,COMPMODE       SYNTAX CHECK MODE ?
         BO    FKJ2                    YES, BRANCH
         BAL   R4,OPDREC               OPERAND RECOGNIZER
         TM    3(R9),ADR*16            DESIGNATIONAL EXPRESSION ?
         BO    FKH2                    YES, BRANCH
*
*        GENERATE LLC (LOAD LABEL COMMON)
*
         MVN   FKG15+2(1),3(R9)
         MVC   FKG15+3(1),4(R9)
         BAL   R2,GENTXT4              GENERATE 4 BYTES
FKG15    L     ADR,0(LAT)              *** GENERATED CODE ***
         SR    R15,R15
         IC    R15,2(,R9)
         CH    R15,SPBNST              CURRENT BLOCK ?
         BNE   FKG14                   NO
         BAL   R2,GENTXT2              GENERATE 2 BYTES
*                                      LOAD GDSA WITH CDSA
         LR    GDSA,CDSA               *** GENERATED CODE ***
         B     FKH1
*
FKG14    SLL   R15,3
         STH   R15,FKG16+2
         BAL   R2,GENTXT4              GENERATE 4 BYTES
FKG16    L     GDSA,0(PBT)             *** GENERATED CODE ***
FKH1     BAL   R2,GENTXT4              GENERATE 4 BYTES
*                                      GENERATE BRANCH TO CSWE ROUTINE
         B     CSWE2(FSA)              *** GENERATED CODE ***
*
         ST    R6,WORKPL               NEXT THUNK ADDR
         MVC   2(3,R9),WORKPL+1        TO OPERAND STCK
FKJ2     IC    R15,6(,R9)
         LA    R15,5(,R15)             UPDATE SLSWE
         STC   R15,1(,R9)               STORE IN STACK
         MVI   0(R9),0
         CLI   0(R8),XFDELTA           OPERATOR DELTA ?
         BNER  R5                      NO, BRANCH TO SUBSTART
FKF3     SR    R15,R15
         IC    R15,1(,R9)              R15 = NR OF ELEMENTS * 5
         LA    R15,5(R15,R9)           R15 POINTS AT SWITCH ID
         ST    R15,WORKPL
         ST    R15,STENTRY
         MVC   HALFW,3(R15)            GET
         LH    R14,HALFW                   LABEL
         N     R14,HEXFFF                        NUMBER
         A     R14,LATAB               GET LAT ENTRY OF SWITCH
         ST    R6,0(,R14)              STORE PRPOINT IN LAT
FKF41    SR    R1,R1
         IC    R1,3(,R15)              GET
         SRL   R1,4                        ELEMENT
         LA    R1,1(,R1)                            COUNT
         STH   R1,FKF42+2              STORE IN GENERATED CODE
         TM    3(R14),X'02'            LIST ON WORD BOUNDRY ?
         BZ    FKF42A                  YES
         BAL   R2,GENTXT2              GENERATE 2 BYTES
         NOPR  0                       *** GENERATED CODE ***
         ST    R6,0(R14)               ADJUST LAT ENTRY
FKF42A   BAL   R2,GENTXT4              GENERATE 4 BYTES
*                                      GENERATE ELEMENT COUNT
FKF42    DC    H'0',H'0'               *** GENERATED CODE ***
         MVC   HALFW,0(R9)             INITIALIZE PARAM COUNT
*
*        GENERATE ONE THUNK ADDR
*
FKF45    L     R15,STENTRY
         SH    R15,KH5
         ST    R15,STENTRY
         ST    R6,FKF48                SAVE PRPOINT
         MVC   FKF46+1(3),2(R15)
         CNOP  0,4
         BAL   R2,GENTXT4              GENERATE 4 BYTES
FKF46    DC    F'0'                    *** GENERATED CODE ***
         L     R2,FKF48
         BAL   R14,GENRLD              GENERATE RLD RECORD
         DC    H'4'
         DC    H'1'
         DC    H'1'
*
         LH    R15,HALFW               DECREASE
         SH    R15,KH5                          PARAM
         STH   R15,HALFW                              COUNT
         BP    FKF45                   COUNT ^ ZERO, BRANCH
         L     R15,WORKPL
         LA    R9,15(,R15)             CLEAR OPERAND STACK
         MVC   HALFW,8(R15)            GET
         LH    R15,HALFW                   LAT
         A     R15,LATAB                       ENTRY
         ST    R6,0(R15)               STORE PRPOINT IN LAT
         BCTR  R10,0                   CLOPT
         BAL   R4,SCHDL                SEMIC COUNTER HANDLING
         L     R11,DECAADD             SWITCH TO PROGRAM CONTEXT
         BR    R5                      RETURN TO SUBSTART
*
FKH2     SH    R7,ONEENTRY
         MVI   RII,0                   REGISTER ADR FREE
         B     FKH1
*
FKB25    BAL   R4,STACKAPI             INTRODUCE API
         B     FKJ2
*
FKC2     BAL   R4,SERR2
         DC    H'175'                  ERROR 175
         LA    R9,5(R9)                PREPARE FOR INSERTING API
         B     FKB25
*
*        WORKAREAS
*
STENTRY  DC    F'0'                    WORK AREA
FKF48    DC    F'0'
*
***********************************************************************
*
*        COMPILER PROGRAM - CP62
*
***********************************************************************
*
*   GOTO STATEMENT
*        CONTEXT              STATEMENT
*        SOURCE OPERATOR      EPSILON, ETA, ;, END, ELSE
*        STACK OPERATOR       GOTO
*        OPERAND              DESIGNATIONAL OPERAND
*
         USING CP62,R12
CP62     LA    R4,FXJ1                 RETURN IF OPERAND MISSING
         BAL   R3,OPDTEST              OPERAND TEST
         TM    1(R9),X'08'             OPD LABEL ?
         BZ    FXC2                    NO, BRANCH
         TM    1(R9),X'04'
         BO    FXC2
         TM    COMPFLGS,COMPMODE       SYNTAX CHECK MODE ?
         BO    FXJ1                    YES, BRANCH
         BAL   R4,OPDREC
         TM    3(R9),ADR*16            DESIGNATIONAL EXPRESSION ?
         BO    FXE4                    YES, BRANCH
         CLC   SPBNST+1(1),2(R9)       CURRENT PBN ?
         BNE   FXG3                    NO, BRANCH
         MVN   FXH15+2(1),3(R9)
         MVC   FXH15+3(1),4(R9)
         BAL   R2,GENTXT6              GENERATE 6 BYTES
*                                      GENERATE BRANCH TO LABEL
FXH15    L     BRR,0(LAT)              *** GENERATED CODE ***
         BR    BRR                     *** GENERATED CODE ***
         B     FXJ1
*
*        GENERATE LLC (LOAD LABEL COMMON)
*
FXG3     MVN   FXG35+2(1),3(R9)
         MVC   FXG35+3(1),4(R9)
         BAL   R2,GENTXT4              GENERATE 4 BYTES
FXG35    L     ADR,0(LAT)              *** GENERATED CODE ***
         SR    R15,R15
         IC    R15,2(R9)
         SLL   R15,3
         STH   R15,FXG36+2
         BAL   R2,GENTXT4              GENERATE 4 BYTES
FXG36    L     GDSA,0(PBT)             *** GENERATED CODE ***
         B     FXH2
*
FXJ1     LA    R9,5(,R9)               CLOPD
         NI    COMPFLGS,255-OPERAND    RESET OPERAND
         MVI   GPBN+1,X'FF'            GDSA UNDEFINED
         BCT   R10,COMP                CLOPT AND COMP
FXC2     TM    0(R9),APIMASK           ALL PURPOUSE IDENTIFIER
         BO    FXJ1                    YES
         BAL   R4,SERR2
         DC    H'175'                  ERROR 175
*
         B     FXJ1
*
FXE4     SH    R7,ONEENTRY             RELEASE STACK
         XI    RII,RIIADRM             REG ADR FREE
*
*        GENERATE UNCONDITIONAL JUMP TO COMMON LABEL 'UJTCL'
*
FXH2     BAL   R2,GENTXT4              GENERATE 4 BYTES
         B     RETPROG(FSA)            *** GENERATED CODE ***
         B     FXJ1
*
***********************************************************************
*
*        COMPILER PROGRAM - CP85
*
***********************************************************************
*
*   BEGIN OF SWITCH LIST
*        CONTEXT              PROGRAM
*        SOURCE OPERATOR       =
*        STACK OPERATOR       SWITCH
*        OPERANDS             NR OF SWITCH EL * 5 AND PRPOINT
*                             SWITCH IDENTIFIER
*                             LABEL OPERAND
*
         USING CP85,R12
CP85     BAL   R4,MOVEOPDK             RESERVE ONE MORE OPDK ENTRY
         MVC   0(2,R9),ZEROHW          INITIAL ZERO TO SLSWE
         ST    R6,WORKPL
         MVC   2(3,R9),WORKPL+1        FIRST THUNKADDR TO STACK
         L     R11,STC                 SWITCH TO STATEMENT CONTEXT
         MVC   13(2,R9),LN             STORE LN IN R9
         MVI   0(R10),X'2E'            'SWITCH.=' REPLACES 'SWITCH'
         BR    R5                      RETURN TO SUBSTART
*
***********************************************************************
*
*        COMPILER PROGRAM - CP34
*
***********************************************************************
*
*   IF IN STATEMENT CONTEXT
*        CONTEXT              STATEMENT
*        SOURCE OPERATOR      IF
*        STACK OPERATOR       GOTO, SWITCH =, PROCEDURE BRACKET,LEFT
*                             BRACKET  ST PROC BRACKET, FOR =, STEP,
*                             UNTIL, WHILE,  , ARRAY DECL BRACKET,
*                             SE (SEE MATRIX)
*        OPERAND              NONE
*
         USING CP34,R12
CP34     TM    COMPFLGS,OPERAND        OPDT
         BZ    CKD1                    OFF, BRANCH
         BAL   R4,SERR4
         DC    H'164'                  ERROR 164
*
         LA    R9,5(,R9)               CLOPD
CKD1     BAL   R4,MOVEOPTK             OPTH(SOURCE)
         MVC   0(1,R10),0(R8)
         LA    R11,324(,R11)           CSW(EXP)
         CLI   0(R10),X'1D'
         BNER  R5                      NO, RETURN TO SUBSTART
         TM    COMPFLGS,COMPMODE       SYNTAX CHECK MODE ?
         BOR   R5                      YES, RETURN TO SUBSTART
         BAL   R4,CLEARRG
         BR    R5                      RETURN TO SUBSTART
*
***********************************************************************
*
*        END OF IEX50003
*
***********************************************************************
*
