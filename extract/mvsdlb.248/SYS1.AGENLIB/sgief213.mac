         MACRO
         SGIEF213      &ID=SYSGEN                              @G64QPSJ
.* CHANGE LEVEL = 7/18/74                                      @YA00820
.*              = 11/18/74                                     @ZA02137
.*              = 10/16/75                                     @Z40MPSR
.*              = 10/16/75                                     @Z40KPSR
.*              = 10/16/75                                     @Z30RSSR
.*              = 01/14/76                                     @ZA08476
.*              = 04/02/76                                     @ZA08476
.*              = 06/16/76                                     @G29ANSJ
.*              = 09/14/76                                     @G30HNSM
.*              = 11/18/76 - VS2 SU 16 - IN THIS MACRO         @G16APPK
.*                           SUPPORTS MOHAWK (SU 30 - G30HNSM) @G16APPK
.*                           AND VPSS SUPPORT (SU29 -          @G16APPK
.*                                                G29ANSJ)     @G16APPK
.*              = 01/24/77                                     @ZA15722
.*              = 03/01/78   VS2 SYSTEM CONTROL PROGRAM 2      @G64IPSJ
.*              = 08/01/78   VS2 SYSTEM CONTROL PROGRAM 2      @G64QPSJ
.*              = 09/29/80   ALLOW DEVTYPE >7FFFFFFF           @ZA47060
.*              = 05/19/81   CHECK FOR VALID DIT ENTRIES WHEN  @ZA52851
.*                           ASSIGNING DUMMY INDEXES           @ZA52851
.*C075700                                                      @ZA02137
.*C075700                                                      @ZA02137
.*A062820                                                      @Y30OPSF
.*A026600=026900,075708-076800,077700                          @YM08650
.*A062840-062880                                               @Y30LPSF
.*                                                             @YM07827
.*                                                             @YM04968
.*                                                             @YM04743
.*C062500,062900                                               @YM04744
.*A000000-999999                                                 Y02670
.********************************************************************
.* THIS IS THE ROOT MACRO FOR SUPPORT OF SCHEDULER TABLES EDTTAB AND
.* PREFTAB. OTHER STAGE 1 MACROS INVOLVED ARE SGIEF214,215,216,212 AND
.* 211.  THE SGIEF211 MACRO ALSO SUPPORTS OS DEVICE MASK AND NAME
.* TABLES, TO BE PHASED OUT IN AN EARLY RELEASE OF MVM. HOWEVER,
.* CODE MUST BE RETAINED IN 211 TO SUPPORT ALTERNATE PATH AND UCB
.* LOOKUP COMPUTATION.
.*
.* STAGE 2 MACROS SUPPORTING THIS FUNCTION ARE SGIEF010,014,016,
.* 017,018,019 AND STAGE 2 GLOBAL DECLARE PACK SGIEF020.
.*
.* FOR AN OVERALL VIEW OF THE LOGIC OF THESE MACROS, THE READER IS
.* REFERRED TO  CHART 9.1 AND SUBORDINATE CHARTS IN THE MVM DEVICE
.* ALLOCATION  LOGIC CHARTS.
.*
.* BRIEFLY, THIS FUNCTION TRANSFORMS INPUT FROM THE INSTALLATION IN
.* THE FORM OF UNITNAME AND IODEVICE MACROS AND THE DEVPREF PARAMETER
.* OF THE SCHEDULR MACRO INTO OUTPUTS IN THE FORM OF EDTTAB,PREFTAB,
.* AND THE NUCLEUS RESIDENT MODULE IEFAQTOP.
.* (THE LATTER IS IN SUPPORT OF THE ALLOCATION QUEUE MANAGER
.* FUNCTION.)
.*
.* THE KEY PROCESS IN BUILDING THE TABLES IS IN MACRO SGIEF214.
.* THAT MACRO SORTS ALL DEVICES IN THE INSTALLATION INTO GROUPS
.* ACCORDING TO THEIR ASSOCIATION WITH UNITNAMES. EACH 'GROUP' AS
.* DEFINED BY SGIEF214 IS A COLLECTION OF DEVICES, ALL OF WHICH ARE
.* EQUALLY ELIGIBLE TO THE IDENTICAL SET OF NAMES.  INFORMATION
.* DESCRIBING THE GROUPS IS TRANSMITTED TO STAGE 2 AS PARAMETERS
.* OF MACRO CALLS AND THE STAGE 2 MACROS UTILIZE THE INFORMATION TO
.* BUILD THE EDTTAB.
.*
.* IN ADDITION TO THIS PROCESSING,THE DEVICE PRECEDENCE DERIVED FROM
.* USER SPECIFICATION ON DEVPREF, COMBINED WITH IBM DEFAULTS SUPPLIED
.* BY SGIEF216 IS ALSO PASSED TO STAGE 2 AND USED THERE FOR GENERATION
.* OF THE PREFTAB AND ALSO USED IN ORDERING INFORMATION IN EDTTAB.
.*
.* FINALLY, SEVERAL MISCELLANEOUS PROCESSES IN SUPPORT OF THESE
.* TABLES IS PERFORMED BY MACRO SGIEF215.  THESE INCLUDE GENERATION
.* OF MULTIPLE GENERIC NAMES FOR SOME TAPE DEVICES, GENERATION FOR
.* SOME TAPE NAMES OF ELIGIBILITIES TO OTHER TYPES, GENERATION OF THE
.* SYSALLDA NAME AND ITS ELIGIBILITIES, AND PROCESSING OF VAM
.* ELIGIBILITIES.
.*
.* SGIEF212 IS USED AS IN MVT, TO IDENTIFY WHICH GENERIC NAMED TYPES
.* OF DEVICES ARE PRESENT IN THE SYSTEM, ASSIGN TYPE CODES, AND
.* TRANSMIT THE INFORMATION TO STAGE 2 VIA MACRO SGIEF010.
.*
.********************************************************************
         COPY  SGGBLPAK
         LCLA  &A,&B,&I,&J,&Q,&R,&S,&T,&X,&Y,&Z                @YM08650
         LCLA  &RIGHT,&LEFT                                    @YM08650
         LCLC  &MASKCNT,&CONT,&IDTEMP                          @G64QPSJ
         LCLA  &K,&L                                           @ZA15722
         ACTR  10000000                                        @YM08650
 SGIEF211
.*      NOTE -
.*           IF IT IS DESIRED TO ELIMINATE SGIEF211 IN ORDER TO
.*           ELIMINATE OLD NAME AND MASK TABLES,  THE ONLY DEPENDENCE
.*           WE HAVE ON SGIEF211 PRESENCE IS THE  COMPUTATION OF
.*           UCB LOOKUP VALUES DONE THERE.  THAT  COULD BE COPIED INTO
.*           THIS CODE JUST BEFORE  SGIEF214 CALL.  THEN MERELY CHANGE
.*           NAME OF THIS MACRO TO SGIEF211 AND CHANGE IS COMPLETED.
         AIF   (NOT &SGQUITB).A  EXIT IF 211 FAILED SYSGEN
         MEXIT
.A       ANOP
&SGCTRLC(6)  SETC  'IEFEDTTB'
 COPY SGASMPAK
.*                                                             @G64IPSJ
.*  CALL SGIEF212 TO PUNCH MACRO CALL FOR SGIEF010 FOR         @G64IPSJ
.*  DEVICE ID, NAME AND DEVICE TYPE ASSOCIATION.
.*
         SGIEF212
.*                                                             @YM08650
.***********************************************************   @YM08650
.*  PROCESSING FOR DUMMY DEVICES                               @YM08650
.*                                                             @YM08650
&A       SETA  0                  INITIALIZE DUMMY COUNTER     @YM08650
&I       SETA  0                  INITIALIZE DEVICE INDEX      @YM08650
.LOOP1   ANOP                                                  @YM08650
&I       SETA  &I+1               INCREMENT DEVICE INDEX       @YM08650
         AIF   (&I GT &SGCNTRA(3)).ENDDUM   CHECK FOR END      @YM08650
.*                                OF DEVICES                   @YM08650
&K       SETA  &SGDASPA(&I)      GET SUBSCRIPT OF IODEVICE     @ZA15722
.*                                 MACRO SWITCHES              @YA00820
         AIF   (NOT &SGDUMMY(&K)).LOOP1     BRANCH IF THIS IS  @YM08650
.*                                NOT A DUMMY DEVICE           @YM08650
&B       SETA  &SGDADRA(&I)/X'400000'       GET BITS 23-30     @YM08650
.*                                (ID FIELD)                   @YM08650
         AIF    (&B NE 0).LOOP1   A DUMMY DEVICE NOT YET       @YM08650
.*                                PROCESSED WILL HAVE 0        @YM08650
.*                                IN BITS 23-30 OF SGDADRA     @YM08650
.INDEXLP ANOP                                                  @ZA52851
&SGCNTRA(10) SETA &SGCNTRA(10)+1  CREATE NEW GENERIC ID CODE   @YM08650
         AIF ('&SGDTYPC(&SGCNTRA(10))' NE '').INDEXLP          @ZA52851
.*                                ENTRY IS VALID, GET ANOTHER  @ZA52851
&SGDADRA(&I) SETA &SGDADRA(&I)+&SGCNTRA(10)*X'400000'          @YM08650
.*                                INSERT ID IN BITS 23-30      @YM08650
&SGGENDB(&SGCNTRA(10)) SETB 1     ASSIGN NEW TYPE FLAG AND     @G64IPSJ
.*                                FLAG IT PRESENT              @YM08650
&A       SETA    &A+1             INCREMENT DUMMY DEVICE CTR.  @YM08650
&Q       SETA  &SGDEVTP(&K)       CHARS. 1-6 OF DEVTYPE        @YM08650
&R       SETA  &SGETABA(&K)       CHARS. 7-8 OF DEVTYPE ARE    @YM08650
.*                                IN LOW ORDER BYTES           @YM08650
&S       SETA  &R-(&R/256)*256    CHARS. 7-8 WITH ERP INDEX    @ZA47060
.*                                SHIFTED OUT                  @ZA47060
&RIGHT   SETA  (&Q-(&Q/256)*256)*256+&S RIGHT HALF OF DEVTYPE  @ZA47060
&LEFT    SETA  &Q/256             LEFT HALF OF DEVTYPE         @ZA47060
&MASKCNT SETC  '           X'       DETERMINE CONTINUATION     @YM08650
&J       SETA  K'&SGCNTRA(10)+K'&A+K'&LEFT+K'&RIGHT   COLUMN   @YM08650
&CONT    SETC  '&MASKCNT'(&J-4,17-&J)                          @YM08650
 PUNCH '               &SGCNTRA(10),DMY&A,&LEFT,&RIGHT,                X
                                &CONT'
.*       PUNCH CALL TO SGIEF010 FOR THIS DUMMY DEVICE          @YM08650
&T       SETA  &I                 SET COMPARISON DEVICE INDEX  @YM08650
.LOOP2   ANOP                                                  @YM08650
&T       SETA  &T+1               INCREMENT COMPARISON INDEX   @YM08650
         AIF   (&T GT &SGCNTRA(3)).LOOP1  BRANCH IF END OF     @YM08650
.*                                DEVICES                      @YM08650
&L       SETA  &SGDASPA(&T)       GET SUBSCRIPT OF IODEVICE    @ZA15722
.*                                MACRO SWITCHES               @YA00820
         AIF   (NOT &SGDUMMY(&L)).LOOP2   BRANCH IF NOT DUMMY  @YM08650
&B       SETA  &SGDADRA(&T)/X'400000'       GET BITS 23-30     @YM08650
         AIF   (&B NE 0).LOOP2    DUMMY DEVICE NOT YET         @YM08650
.*                                PROCESSED WILL HAVE 0        @YM08650
.*                                IN BITS 23-30                @YM08650
&X       SETA  &SGDEVTP(&L)       CHARS. 1-6 OF DEVTYPE        @YM08650
&Y       SETA  &SGETABA(&L)       CHARS. 7-8 OF DEVTYPE ARE    @YM08650
.*                                IN LOW ORDER BYTES           @YM08650
&Z       SETA  &Y-(&Y/256)*256    CHARS. 7-8 WITH ERP INDEX    @ZA47060
.*                                SHIFTED OUT                  @ZA47060
         AIF   (&X NE &Q OR &Z NE &S).LOOP2  SAME TYPE DUMMY?  @ZA47060
&SGDADRA(&T) SETA &SGDADRA(&T)+&SGCNTRA(10)*X'400000'          @YM08650
.*                                WITH SAME ID                 @YM08650
         AGO   .LOOP2             CHECK FOR MORE OF SAME TYPE  @YM08650
.ENDDUM  ANOP                                                  @YM08650
 PUNCH '               LAST'                                   @YM08650
.*                                                             @YM08650
.********************************************************      @YM08650
    SGIEF214
    SGIEF215   DUMMY=&A                                        @G64IPSJ
 PUNCH ' SGIEF014'
&IDTEMP  SETC  '&ID'                   COPY ID                 @G64QPSJ
         AIF    (NOT &GETB(3)).B       IF NOT IOGEN, USE INPUT @G64QPSJ
.*                                       VALUE FROM CALL       @G64QPSJ
&IDTEMP  SETC  'IOGEN'                 SET IOGEN VALUE         @G64QPSJ
.B       ANOP                                                  @G64QPSJ
 PUNCH ' SGIEF016    &IDTEMP '                                 @G64QPSJ
 PUNCH ' SGIEF017 '
 PUNCH ' END '
 PUNCH '/*'
         MEND
