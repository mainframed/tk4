         MACRO
         SGIEF211
.************************************************************* @G64IPSJ
.*                                                             @G64IPSJ
.* MACRO  -  SGIEF211                                          @G64IPSJ
.*                                                             @G64IPSJ
.* CHANGE LEVEL = 09/11/74                                     @ZM30431
.*              = 07/24/74                                     @Z30ANSF
.*              = 11/14/74                                     @ZA02137
.*              = 10/16/75                                     @Z40MPSR
.*              = 10/16/75                                     @Z40KPSR
.*              = 10/16/75                                     @Z30RSSR
.*              = 01/14/76                                     @ZA08476
.*              = 04/02/76                                     @ZA08476
.*              = 06/16/76                                     @G29ANSJ
.*              = 09/14/76                                     @G30HNSM
.*              = 11/18/76 - VS2 SU 16 - IN THIS MACRO         @G16APPK
.*                           SUPPORTS MOHAWK (SU 30 - G30HNSM) @G16APPK
.*                           AND VPSS SUPPORT (SU 29 -         @G16APPK
.*                                                 G29ANSJ)    @G16APPK
.*              = 01/24/77                                     @ZA15722
.*                          OZ20637, OZ20985, OZ27513, OZ27515 @ZA27515
.*                          OZ28566, OZ28953, OZ28977, OZ29777 @ZA29777
.*              = 03/01/77   VS2 SYSTEM CONTROL PROGRAM 2      @G64IPSJ
.*              = 10/04/79 - PUNCH STMTS FOR SGIEF013 MODIFIED @ZA40929
.*                           TO ALLOW 3 DIGIT PARAMETERS       @ZA40929
.*              = 09/20/82 - ALTER BIT 31 OF DEVMASK TO ALLOW  @ZA58900
.*                           FOR COMPATIBILITY.                @ZA58900
.*              = 03/03/83 - OZ58900 CODE IS MISSING ONE RESET @ZA68957
.*                           OF BIT 31 BEFORE EXITING.         @ZA68957
.*              = 09/30/83 - ADD CODE TO HANDLE MORE THAN      @ZA73813
.*                           999 DEVICES.                      @ZA73813
.*C018784                                                      @ZA02137
.*A016617                                                      @Y30OPSF
.*A016618-016620                                               @Y30LPSF
.*                                                             @YM07827
.*                                                             @YM04968
.*                                                             @YM04743
.*                                                             @YM04744
.*                                                             @YM02527
.*                                                               Y02667
.*A013841,013849                                                 Y01122
.*A01562000,01878421                                             Y01948
.* FUNCTION - THIS MACRO BUILDS THE DEVICE NAME AND MASK       @G64IPSJ
.*            TABLES AND THE DEVICE POINTER TABLE.  IT ALSO    @G64IPSJ
.*            CALCULATES THE UCB LOOK UP TABLE OFFSETS WHICH   @G64IPSJ
.*            IS USED BY THE EDT BUILD ROUTINE SGIEF213.       @G64IPSJ
.*                                                             @G64IPSJ
.* OPERATION -                                                 @G64IPSJ
.*  MAIN SEQUENCE OF EVENTS IN THIS MACRO
.*       COPY SGASMPAK FOR ASSEMBLY OF DEVICE NAME TABLE.
.*       PUNCH    DEVNAMET CSECT
.*       CALL SGIEF212                                         @G64IPSJ
.*       MAKE SGDFXXB SWITCHES REPRESENT SGDAPXB SWITCHES FOR EACH DEV.
.*       SET APCHAN(X) TO NUMBER OF OPTIONAL PATHS ON CHANNEL X.
.*       CALCULATE UCBLOOKUP VALUE FOR EACH DEVICE AND PLACE THE VALUE
.*          IN THE CORRESPONDING &SGDAUPA ARRAY ELEMENT.       @G64IPSJ
.*
.*       ENTRIES=NO. OF SUPPORTED DEVICES SYSGENED +             Y02667
.*               NO. OF SUPPORTED TYPES GENERATED (TAPES) +      Y02667
.*               NO. OF UNITNAMES.                               Y02667
.*       PUNCH             DC   F'ENTRIES'
.*       PUNCH SGIEF011 TYPE,0,ADDRESS FOR EACH SUPPORTED DEVICE.
.*       PUNCH SGIEF011 TYPE,TYPE FOR EACH SUPPORTED TYPE IN SYSTEM.
.*       PUNCH SGIEF013 N,TYPE1,TYPE2,...,TYPEN  FOR EACH UNITNAME
.*       PUNCH SGIEF011 0,0,UNITNAME             FOR EACH UNITNAME
.*       PUNCH      END  AND   /*  CARDS.
.*       COPY SGASMPAK FOR ASSEMBLY OF DEVICE MASK TABLE.
.*       PUNCH    DEVMASKT CSECT
.*       PUNCH    DC H'ENTRIES'  AND   DC  H'ENTRIES+1'
.*       CALL SGIEF212 FOR EACH SUPPORTED DEVICE TYPE.
.*       RETURN=2
.*       PUNCH SGIEF012 TYPE,NUMBER,MASK FOR EACH SUPPORTED DEVICE TYPE
.*       RETURN=3
.*       PUNCH SGIEF013 N,TYPE1,TYPE2,...,TYPEN FOR EACH UNITNAME.
.*       PUNCH SGIEF012 0,NUMBER,MASK           FOR EACH UNITNAME.
.*       RETURN=4
.*       PUNCH SGIEF013 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
.*       PUNCH SGIEF012 0,NUMBER,MASK   MASK OF ALL DIRECT ACCESS DEVCS
.*                                                             @G64IPSJ
.* ENTRY POINT - SGIEF211 FROM SGIEF213                        @G64IPSJ
.*                                                             @G64IPSJ
.* EXIT - TO CALLER                                            @G64IPSJ
.*                                                             @G64IPSJ
.* EXTERNAL REFERENCES - SGGBLPAK  -  GLOBAL DATA AREA         @G64IPSJ
.*                       CONVERT   -  HEX TO EBCDIC CONVERT RTN@G64IPSJ
.*                                                             @G64IPSJ
.* MNOTE - * * * IEIGEN052 ADDRESS VALUE &EBCDIC SPECIFIED     @G64IPSJ
.*         * * *       WITH UNIT NAME &SGUNNMC(&ESNINDX) NOT   @G64IPSJ
.*         * * *       DEFINED ON IODEVICE STATEMENT           @G64IPSJ
.*                                                             @G64IPSJ
.************************************************************* @G64IPSJ
         COPY  SGGBLPAK
         LCLA  &A,&B,&C,&X,&NXF,&NUA,&NCU,&OUA,&OCU,&P         @ZA58900
         LCLA  &INTALPH,&VALUE,&V,&ENTRIES,&ESNINDX,&COUNTER,&TEST1,&XX
         LCLA  &TEST4,&G(16),&RETURN,&U,&W,&DUPLI1,&DUPLI2,&UCBLSTV,&D
         LCLA  &ALTLIST(1917),&AINDX,&ACOUNT,&I,&J,&KK,&MM,&T  @ZA15722
         LCLA  &CUINDX,&OCHAN,&NCHAN                               I237
         LCLB  &EOALTS,&IRSW,&ALTSW,&LSTDEV                        I237
         LCLB  &FH                                             @G64IPSJ
         LCLC  &K(2),&L(128)                                   @ZA15722
         LCLC  &CONT,&COMPATC,&TEMPVAL                         @G64IPSJ
 LCLC  &CONTI,&CONTI1,&CON2,&CON3,&CON4                            000G
 LCLC  &CON5,&CON6,&CON7,&CON8                                 @Z30ANSF
 LCLC  &CON9,&CONA,&CONB,&CONC,&COND,&CONE,&CONF,&CONG,&CONH   @ZA15722
         LCLA  &COUNT
         LCLB  &TBP                                               19022
         LCLA  &EXTRA,&SVEXTRA,&NUMBENT                        @G64IPSJ
         ACTR  2000000                                         @ZA58900
&SGCTRLC(6)    SETC 'IEFWMAS1'
         COPY  SGASMPAK
         PUNCH 'DEVNAMET CSECT'
         SGIEF212                       CALL TO PROCESS ADDR BOXES
.*                                                             @G64IPSJ
 PUNCH '               LAST'
.*
.*   THE FOLLOWING ROUTINE WILL TEST TO SEE IF DEVICE IS SUPPORTED
.*   BY TESTING BIT 31 OF ITS SGDADRA BOX.  IF BIT 31 IS ON TURN IT
.*   OFF.  IF BIT 31 IS OFF, CLEAR BITS 23-30 AS WELL.  BITS 23-30
.*   OF SUPPORTED DEVICES HAVE BEEN SET TO THE UNIQUE DEVICE TYPE
.*   VOLUE IN SGIEF212.
.*
&AINDX   SETA  1                        INITIALIZE ALTERNATE INDEX I237
&A       SETA  1                        INITIALIZE DEVICE POINTER  I237
.ALTLOP  ANOP                                                      I237
         AIF   (&SGDADRA(&A) GE (X'40000'*4096)).BITON         @G64IPSJ
&SGDADRA(&A) SETA &SGDADRA(&A)-&SGDADRA(&A)/X'1000'*X'1000'    @ZA15722
.BITON   ANOP                                                      I237
.*
.*   THE FOLLOWING ROUTINE IS USED TO DETERMINE THE NUMBER OF    Y01029
.*   D.A. DEVICES IN THIS CONFIGURATION.                         Y01029
.*                                                               Y01029
&NXF     SETA  &SGDASPA(&A)                                    @ZA15722
         AIF   (NOT &SGDT03B(&NXF)).ALTLOPA  TEST FOR DA           I237
&SGDASWB(&A)   SETB  1                  SET DA INDICATOR           I237
.ALTLOPA ANOP                                                      I237
.*
.*   THE FOLLOWING ROUTINE WILL BUILD 'A' BOXES FOR ALL ALTERNATE
.*   PATHS IN THE SYSTEM.
.*
&B       SETA  &SGDADRA(&A)-&SGDADRA(&A)/4096*4096     GET         I237
&B       SETA  &B-4096*(&B/4096)        CHANNEL                    I237
&B       SETA  &B/256                   ADDRESS                    I237
         AIF   (NOT &SGCHANB(&B*15+4)).NOSSALT    TEST FOR HSMPX  20062
         AIF   (NOT &SGDAP2B(&NXF)).HSAP3    TEST FOR 'D' ALT      I237
&ALTLIST(&AINDX) SETA (&SGDADRA(&A)-&SGDADRA(&A)/16*16)+&B*256+208 I237
&AINDX   SETA  &AINDX+1                 UPDATE ALTERNATE INDEX     I237
.HSAP3   AIF   (NOT &SGDAP3B(&NXF)).HSAP4    TEST FOR 'E' ALT      I237
&ALTLIST(&AINDX) SETA (&SGDADRA(&A)-&SGDADRA(&A)/16*16)+&B*256+224 I237
&AINDX   SETA  &AINDX+1                 UPDATE ALTERNATE INDEX     I237
.HSAP4   AIF   (NOT &SGDAP4B(&NXF)).LSTALT   TEST FOR 'F' ALT      I237
&ALTLIST(&AINDX) SETA (&SGDADRA(&A)-&SGDADRA(&A)/16*16)+&B*256+240 I237
&AINDX   SETA  &AINDX+1                 UPDATE ALTERNATE INDEX     I237
         AGO   .LSTALT                  BRANCH AROUND              I237
.NOSSALT ANOP                                                      I237
         AIF   (NOT &SGDAP1B(&NXF)).EXAMAP2  CHAN 1 TEST           I237
&ALTLIST(&AINDX) SETA (&SGDADRA(&A)-&SGDADRA(&A)/256*256)+X'100'   I237
&AINDX   SETA  &AINDX+1                 UPDATE ALTERNATE INDEX     I237
.EXAMAP2 AIF   (NOT &SGDAP2B(&NXF)).EXAMAP3  CHANNEL 2 TEST        I237
&ALTLIST(&AINDX) SETA (&SGDADRA(&A)-&SGDADRA(&A)/256*256)+X'200'   I237
&AINDX   SETA  &AINDX+1                 UPDATE ALTERNATE INDEX     I237
.EXAMAP3 AIF   (NOT &SGDAP3B(&NXF)).EXAMAP4  CHANNEL 3 TEST        I237
&ALTLIST(&AINDX) SETA (&SGDADRA(&A)-&SGDADRA(&A)/256*256)+X'300'   I237
&AINDX   SETA  &AINDX+1                 UPDATE ALTERNATE INDEX     I237
.EXAMAP4 AIF   (NOT &SGDAP4B(&NXF)).EXAMAP5  CHANNEL 4 TEST        I237
&ALTLIST(&AINDX) SETA (&SGDADRA(&A)-&SGDADRA(&A)/256*256)+X'400'   I237
&AINDX   SETA  &AINDX+1                 UPDATE ALTERNATE INDEX     I237
.EXAMAP5 AIF   (NOT &SGDAP5B(&NXF)).EXAMAP6  CHANNEL 5 TEST        I237
&ALTLIST(&AINDX) SETA (&SGDADRA(&A)-&SGDADRA(&A)/256*256)+X'500'   I237
&AINDX   SETA  &AINDX+1                 UPDATE ALTERNATE INDEX     I237
.EXAMAP6 AIF   (NOT &SGDAP6B(&NXF)).EXAMAP7  CHANNEL 6 TEST       20063
&ALTLIST(&AINDX) SETA (&SGDADRA(&A)-&SGDADRA(&A)/256*256)+X'600'   I237
&AINDX   SETA  &AINDX+1                UPDATE ALTERNATE INDEX     20063
.EXAMAP7 AIF   (NOT &SGDAP7B(&NXF)).EXAMAP8  CHANNEL 7 TEST       20063
&ALTLIST(&AINDX) SETA (&SGDADRA(&A)-&SGDADRA(&A)/256*256)+X'700'  20063
&AINDX   SETA  &AINDX+1                UPDATE ALTERNATE INDEX     20063
.EXAMAP8 AIF   (NOT &SGDAP8B(&NXF)).EXAMAP9  CHANNEL 8 TEST       20063
&ALTLIST(&AINDX) SETA (&SGDADRA(&A)-&SGDADRA(&A)/256*256)+X'800'  20063
&AINDX   SETA  &AINDX+1                UPDATE ALTERNATE INDEX     20063
.EXAMAP9 AIF   (NOT &SGDAP9B(&NXF)).EXAMAPA  CHANNEL 9 TEST       20063
&ALTLIST(&AINDX) SETA (&SGDADRA(&A)-&SGDADRA(&A)/256*256)+X'900'  20063
&AINDX   SETA  &AINDX+1                UPDATE ALTERNATE INDEX     20063
.EXAMAPA AIF   (NOT &SGDAPAB(&NXF)).EXAMAPB  CHANNEL A TEST       20063
&ALTLIST(&AINDX) SETA (&SGDADRA(&A)-&SGDADRA(&A)/256*256)+X'A00'  20063
&AINDX   SETA  &AINDX+1                UPDATE ALTERNATE INDEX     20063
.EXAMAPB AIF   (NOT &SGDAPBB(&NXF)).EXAMAPC  CHANNEL B TEST       20063
&ALTLIST(&AINDX) SETA (&SGDADRA(&A)-&SGDADRA(&A)/256*256)+X'B00'  20063
&AINDX   SETA  &AINDX+1                UPDATE ALTERNATE INDEX     20063
.EXAMAPC AIF   (NOT &SGDAPCB(&NXF)).EXAMAPD  CHANNEL C TEST       20063
&ALTLIST(&AINDX) SETA (&SGDADRA(&A)-&SGDADRA(&A)/256*256)+X'C00'  20063
&AINDX   SETA  &AINDX+1                UPDATE ALTERNATE INDEX     20063
.EXAMAPD AIF   (NOT &SGDAPDB(&NXF)).EXAMAPE  CHANNEL D TEST       20063
&ALTLIST(&AINDX) SETA (&SGDADRA(&A)-&SGDADRA(&A)/256*256)+X'D00'  20063
&AINDX   SETA  &AINDX+1                UPDATE ALTERNATE INDEX     20063
.EXAMAPE AIF   (NOT &SGDAPEB(&NXF)).EXAMAPF  CHANNEL F TEST       20063
&ALTLIST(&AINDX) SETA (&SGDADRA(&A)-&SGDADRA(&A)/256*256)+X'E00'  20063
&AINDX   SETA  &AINDX+1                UPDATE ALTERNATE INDEX     20063
.EXAMAPF AIF   (NOT &SGDAPFB(&NXF)).LSTALT   CHANNEL F TEST       20063
&ALTLIST(&AINDX) SETA (&SGDADRA(&A)-&SGDADRA(&A)/256*256)+X'F00'  20063
&AINDX   SETA  &AINDX+1                 UPDATE ALTERNATE INDEX     I237
.LSTALT  ANOP                                                      I237
&A       SETA  &A+1                     UPDATE DEVICE INDEX        I237
         AIF   (&A LE &SGCNTRA(3)).ALTLOP    TEST FOR LAST DEVICE  I237
&EOALTS  SETB  (&AINDX EQ 1)            TEST FOR NO ALTERNATES     I237
&ACOUNT  SETA  &AINDX-1                 SET ALTERNATE COUNT        I237
         AIF   (&ACOUNT LT 2).INITIAL   TEST FOR ALTERNATES        I237
.*
.*   THE FOLLOWING SECTION WILL SORT THE ALTERNATES BY ADDRESS
.*
&MM      SETA  &ACOUNT                  GET NUMBER OF ALTERNATES   I237
.L2      AIF   (&MM/2 LE 0).INITIAL     ALL ALTS SORTED?           I237
&MM      SETA  &MM/2                    SET INDEX                  I237
&KK      SETA  &ACOUNT-&MM              SET FOR END PASS CHECK     I237
&J       SETA  1                        SET INDEX VALUE FOR FIRST  I237
.L3      ANOP                                                      I237
&I       SETA  &J                       SET INDEX TO FIRST ADDRESS I237
.L4      AIF   (&ALTLIST(&I) LT &ALTLIST(&I+&MM)).L5    COMPARE    I237
&T       SETA  &ALTLIST(&I)             SAVE ADDRESS OUT OF ORDER  I237
&ALTLIST(&I) SETA &ALTLIST(&I+&MM)      PUT SECOND IN FIRST        I237
&ALTLIST(&I+&MM) SETA  &T               MOVE FIRST TO SECOND       I237
&I       SETA  &I-&MM                   TEST INDEX                 I237
         AIF   (&I GE 1).L4                                        I237
.L5      AIF   (&J+1 GT &KK).L2         TEST FOR END OF LOOP       I237
&J       SETA  &J+1                     UPDATE POINTER             I237
         AGO   .L3                      RETURN                     I237
.*
.*   THE FOLLOWING ROUTINE CALCULATES UCBLOOKUP VALUES FOR EACH
.*   DEVICE AND PLACES THE VALUE IN &SGDAUPA ARRAY ELEMENT.    @G64IPSJ
.*
.INITIAL ANOP                                                      I237
&AINDX   SETA  1                        INITIALIZE ALTERNATE INDEX I237
&A       SETA  1                        INITIALIZE DEVICE NUMBER   I237
.DEVLOOP ANOP                                                      I237
         AIF   (&EOALTS).SKIPCHK        BRANCH IF NO ALTERNATES    I237
         AIF   (&SGDADRA(&A)-&SGDADRA(&A)/4096*4096 GT &ALTLIST(&AINDX)X
               -&ALTLIST(&AINDX)/4096*4096).ALTA  TEST FOR HIGH AD I237
.SKIPCHK ANOP                                                      I237
&INTALPH SETA  &SGDADRA(&A)-&SGDADRA(&A)/4096*4096 SAVE ACTUAL ADD I237
&ALTSW   SETB  0                        CLEAR ALTERNATE SWITCH     I237
         AIF   (&SGDADRA(&A) LT X'80000'*X'800').NOBIT DEV SUPPORT I237
&SGDADRA(&A) SETA &SGDADRA(&A)-X'80000'*X'800'                     I237
         AGO   .BITSET                  BRANCH AROUND              I237
.NOBIT   ANOP                                                      I237
&SGDADRA(&A) SETA &SGDADRA(&A)-&SGDADRA(&A)/X'400000'*X'400000'    I237
.BITSET  ANOP                                                      I237
         AGO   .COMPUTE                 BRANCH AROUND              I237
.ALTA    ANOP                                                      I237
&INTALPH SETA  &ALTLIST(&AINDX)-&ALTLIST(&AINDX)/4096*4096 ALT ADD I237
&ALTSW   SETB  1                        SET ALTERNATE SWITCH       I237
&EOALTS  SETB  (&AINDX EQ &ACOUNT)      TEST FOR LAST ALTERNATE    I237
&AINDX   SETA  &AINDX+1                 UPDATE ALTERNATE INDEX     I237
.COMPUTE ANOP                                                      I237
&NUA     SETA  &INTALPH-&INTALPH/16*16  GET UNIT ADDRESS           I237
&NCU     SETA  &INTALPH/16-&INTALPH/256*16   GET CU ADDRESS        I237
&NCHAN   SETA  &INTALPH/256             GET CHANNEL ADDRESS        I237
         AIF   (&IRSW EQ 1).NCHTST      TEST FOR FIRST PASS        I237
&OCHAN   SETA  &NCHAN                   GET NEW CHAN IN OLD        I237
         AGO   .SETCU                   BRANCH AROUND              I237
.NCHTST  ANOP                                                      I237
         AIF   (&NCHAN EQ &OCHAN).NCUTST     TEST FOR NEW CHANNEL  I237
&OCHAN   SETA  &NCHAN                   GET NEW CHAN IN OLD        I237
         AGO   .SETCU                   BRANCH AROUND ON NEW CHAN  I237
.NCUTST  AIF   (&OCU EQ &NCU).SETVAL    TEST FOR NEW CU            I237
.SETCU   ANOP                                                      I237
&OCU     SETA  &NCU                     GET NEW CU TO OLD CU       I237
&CUINDX  SETA  &CUINDX+2*&OUA+2-2*&NUA  COMPUTE INDEX FOR NEW CU   I237
         AIF   (&IRSW EQ 1).NOTFP       TEST FOR FIRST PASS        I237
         AGO   .FPAS                    YES - BRANCH AROUND        I237
.NOTFP   ANOP                           NOT FIRST PASS             I237
         AIF   (&CUINDX GE 0).SETVAL    TEST FOR NEGATIVE CUINDX   I237
.FPAS    ANOP                           FIRST PASS                 I237
&CUINDX  SETA  0                        YES - SET TO ZERO          I237
.SETVAL  ANOP                                                      I237
&VALUE   SETA  (&CUINDX+2*&NUA)/2+1     COMPUTE VALUE FOR THIS DEV I237
         AIF   (&VALUE GE 1).NOTNEG     TEST FOR VALUE             I237
&VALUE   SETA  1                        NO VALUE-SET TO 1          I237
.NOTNEG  ANOP                                                      I237
&IRSW    SETB  1                        SET INITIALIZATION SW      I237
&OUA     SETA  &NUA                     GET NEW UA TO OLD          I237
         AIF   (&LSTDEV AND &EOALTS).AAA0096 TEST FOR ALL DONE     I237
         AIF   (&LSTDEV).ALTA           TEST FOR NO MORE ACTUALS   I237
         AIF   (&ALTSW).DEVLOOP         TEST FOR ALTERNATE ADDRESS I237
.*
.*   NOW SAVE THE UCBLOOKUP VALUE                              @Z30ANSF
.*
&SGDAUPA(&A) SETA &VALUE                                       @Z30ANSF
&A       SETA  &A+1                     UPDATE DEVICE INDEX        I237
         AIF   (&A LE &SGCNTRA(3)).DEVLOOP   TEST FOR NO MORE ACTS.I237
&LSTDEV  SETB  1                        SET LAST ACTUAL INDICATOR  I237
         AIF   (NOT &EOALTS).ALTA       RETURN IF MORE ALTERNATES  I237
.AAA0096 ANOP                                                      7863
.**********************************************************************
.*
.*
&RETURN  SETA  5                   RETURN FOR TOTAL BIT PATTERN   19022
&TBP     SETB  1
&A       SETA  &VALUE                                             19022
&V       SETA  (&A+31)/32+1        SIZE OF BIT PATTERN IN WORDS  Y01029
          AGO  .DDDB10             INITIALIZE CBOXES              19022
.FFF010  ANOP                                                     19022
&A       SETA  &VALUE
&V       SETA  (&A+31)/32+1        SIZE OF THE BIT PATTERN IN WORDS
&ENTRIES SETA  &SGCNTRA(8)+&SGCNTRA(4)                             000G
.****************************************************************Y02667
.*   THIS SECTION DETERMINES WHICH GENERIC NAMES MUST BE         Y02667
.*   GENERATED, GENERATES THEM, AND ADJUSTS THE NUMBER OF        Y02667
.*   ENTRIES TO INCLUDE THEM.  A NAME MUST BE GENERATED          Y02667
.*   FOR EACH DEVICE, NOT SYSGENED, FOR WHICH A REQUEST          Y02667
.*   MAY BE SATISFIED BY ANOTHER SYSGENED DEVICE.                Y02667
.*                                                             @G64IPSJ
.*   THE DEVICE INFORMATION TABLE(DIT) IS SCANNED FOR          @G64IPSJ
.*   NON-GENERATED DEVICE TYPES. IF THESE TYPES ARE UPWARD     @G64IPSJ
.*   COMPATIBLE WITH DEVICES ALREADY GENERATED, THIS DEVICE    @G64IPSJ
.*   TYPE IS ALSO GENERATED.                                   @G64IPSJ
.*      &EXTRA - CONTAINS NUMBER OF GENERATED ENTRIES          @G64IPSJ
.*      &ALTLIST - CONTAINS GENERATED DEVICE DIT INDICES       @G64IPSJ
.*                                                             @G64IPSJ
.************************************************************* @G64IPSJ
&A       SETA 0                        INITIALIZE INDICES      @G64IPSJ
&EXTRA   SETA 0                          * * *     * * *       @G64IPSJ
.CNTGENR ANOP                          GENERIC COUNT AND       @G64IPSJ
.*                                     SAVE ID LOOP            @G64IPSJ
&A       SETA  &A+1                    INCREMENT DIT INDEX     @G64IPSJ
         AIF   (&A GT &SGDITDA).ENDDIT TEST FOR END OF         @G64IPSJ
.*                                     ENTRIES                 @G64IPSJ
         AIF  (&SGGENDB(&A)).CNTGENR   IF ALREADY GENED, GET   @G64IPSJ
.*                                     NEXT ENTRY              @G64IPSJ
         AIF  (K'&SGGCTXC(&A) LE 0).CNTGENR IF NO UPWARD       @G64IPSJ
.*                                     COMPATIBLE TYPES ARE    @G64IPSJ
.*                                     ELIGIBLE, GET NEXT ENT  @G64IPSJ
&NUMBENT SETA  K'&SGGCTXC(&A)/3        SET NUMBER OF ENTRIES   @G64IPSJ
.*                                     EACH ENT IS 3 DIGITS    @G64IPSJ
&B       SETA  0                       INITIALIZE SCAN INDEX   @G64IPSJ
&COMPATC SETC  '&SGGCTXC(&A)'          MOVE ID TO WORK AREA    @G64IPSJ
.CHKGENR ANOP                          ID SCAN LOOP            @G64IPSJ
&B       SETA  &B+1                    INCREMENT SCAN INDEX    @G64IPSJ
         AIF   (&B GT &NUMBENT).CNTGENR TEST FOR ANOTHER       @G64IPSJ
.*                                      ENTRY AND CONTINUE     @G64IPSJ
&TEMPVAL SETC  '&COMPATC'(&B*3-2,3)    OBTAIN COMPAT ID        @G64IPSJ
&I       SETA  &TEMPVAL                CONVERT ID TO HEX       @G64IPSJ
         AIF   (NOT &SGGENDB(&I)).CHKGENR  IF NOT GENED, TRY   @G64IPSJ
.*                                         NEXT ENTRY          @G64IPSJ
&EXTRA   SETA  &EXTRA+1                UPDATE GENERATED COUNT  @G64IPSJ
&ALTLIST(&EXTRA) SETA &A               SAVE GENERATED ID       @G64IPSJ
         AGO   .CNTGENR                PROCESS NEXT GENERIC    @G64IPSJ
.*                                     ENTRY IN DIT            @G64IPSJ
.ENDDIT  ANOP                          EXIT FOR DIT SCAN       @G64IPSJ
.* EXIT -  &EXTRA = # ENTRIES TO GENERATE                      @G64IPSJ
.*         &LSTLIST = DIT INDIES FOR GENERATED GENERICS        @G64IPSJ
&ENTRIES SETA  &ENTRIES+&EXTRA         INCREMENT BY GENERATED GENERICS
.*                                                               Y02667
         PUNCH '         DC    F''&ENTRIES'''                    Y02667
.*   PUNCH ONE SGIEF011 CARD FOR EACH SUPPORTED DEVICE THPE IN SYSTEM.
&A       SETA  0                       INITIALIZE DIT INDEX    @G64IPSJ
.GENERID ANOP                          GENERIC ID LOOP         @G64IPSJ
&A       SETA  &A+1                    INCREMENT DIT INDEX     @G64IPSJ
         AIF   (&A GT &SGDITDA).PCHEND IF NO MORE ENTRIES,     @G64IPSJ
.*                                       EXIT                  @G64IPSJ
         AIF   (NOT &SGGENDB(&A)).GENERID IF NOT GENED, TRY    @G64IPSJ
.*                                        NEXT GENERIC         @G64IPSJ
         PUNCH ' SGIEF011 &A,&A '      PUNCH HEADER CALL       @G64IPSJ
         AGO   .GENERID                PROCESS NEXT DIT ENTRY  @G64IPSJ
.PCHEND  ANOP                          EXIT FOR PCH LOOP       @G64IPSJ
.*                                                             @G64IPSJ
.*    PUNCH OUT ENTRIES THAT ARE GENERATED GENERICS            @G64IPSJ
.*                                                             @G64IPSJ
&A       SETA  0                       INITIALIZE INDEX        @G64IPSJ
.GENID   ANOP                                                  @G64IPSJ
&A       SETA  &A+1                    INCREMENT INDEX         @G64IPSJ
         AIF   (&A GT &EXTRA).GENDONE  TEST FOR END ENTRY      @G64IPSJ
         PUNCH '         DC    CL8''&SGGNRIC(&ALTLIST(&A))'''  @G64IPSJ
.*                                     PUNCH GENERIC NAME      @G64IPSJ
         PUNCH '         DC    XL4''&SGDTYPC(&ALTLIST(&A))'''  @G64IPSJ
.*                                     PUNCH DEVICE TYPE       @G64IPSJ
         AGO   .GENID                  TRY NEXT ENTRY          @G64IPSJ
.GENDONE ANOP                          END GENERATED GENERICS  @G64IPSJ
.*                                                             @G64IPSJ
.************************************************************* @G64IPSJ
.AAA110  AIF   (&SGCNTRA(4) EQ 0).BBB030                         Y02667
&ESNINDX SETA  0                                                 Y02667
&FH      SETB  0
&COUNTER SETA  1
.AAA112  AIF   (&ESNINDX EQ &SGCNTRA(4)).BBB030
.*   WHEN RETURN EQ 0 PUNCH SGIEF013 CARDS AS NEEDED AND A SGIEF011
.*       CARD FOR EACH UNITNAME SPECIFIED IN THE SYSTEM.
.*   WHEN RETURN EQ 3 PUNCH SGIEF013 CARDS AS NEEDED AND A SGIEF012
.*       CARD FOR EACH UNITNAME SPECIFIED IN THE SYSTEM.
&ESNINDX SETA  &ESNINDX+1
&B       SETA  0
&A       SETA  0
         AIF   (&RETURN EQ 3).DDDB10
.AAA125  AIF   (&FH).AAA126
&TEST1   SETA  &SGUNNMA(&COUNTER)/X'1000'
         AGO   .AAA129
.AAA126  ANOP
&TEST1   SETA  &SGUNNMA(&COUNTER)-&SGUNNMA(&COUNTER)/X'1000'*X'1000'
.AAA129  AIF   (&TEST1 EQ X'FFF').AAA225
.AAA200  AIF   (&A EQ &SGCNTRA(3)).E2
&A       SETA  &A+1      SEARCH FOR DEVICE THIS ADDRESS
 AIF (&SGDADRA(&A)-&SGDADRA(&A)/X'1000'*X'1000' NE &TEST1).AAA200
&TEST4  SETA  &SGDADRA(&A)/X'400000'  GET BITS 23-30
         AIF   (&RETURN EQ 3).DDDB20
.AAA210  AIF   (&B NE 0 AND &TEST4 EQ 0).AAA220
&B       SETA  &B+1
&C       SETA  &B-(&B-1)/16*16
&G(&C)   SETA  &TEST4              G(1-16)
         AIF   (&C NE 16).AAA220
 AIF (&B GT 999).GT999A                                        @ZA73813
 PUNCH ' SGIEF013 &B,&G(1),&G(2),&G(3),                                X
                            XXXXXXXXX'                         @ZA40929
 AGO .LT999A                                                   @ZA73813
.GT999A ANOP                                                   @ZA73813
 PUNCH ' SGIEF013 &B,&G(1),&G(2),&G(3),                        @ZA73813X
                           XXXXXXXXX'                          @ZA73813
.LT999A ANOP                                                   @ZA73813
 PUNCH '               &G(4),&G(5),&G(6),&G(7),                        X
                               XXXXXXXXX'                      @ZA40929
 PUNCH '               &G(8),&G(9),&G(10),&G(11),                      X
                                 XXXXXXXXX'                    @ZA40929
 PUNCH '               &G(12),&G(13),&G(14),&G(15),                    X
                                   XXXXXXXXX'                  @ZA40929
 PUNCH '               &G(16)'                                 @ZA40929
.AAA220  ANOP
&COUNTER SETA  &COUNTER+&FH
&FH      SETB  (NOT &FH)
         AGO   .AAA125
.E2      ANOP
         CONVERT TO=EBCDIC,VALUE=&TEST1,DIGITS=3
    MNOTE 5,'* * * IEIGEN052 ADDRESS VALUE &EBCDIC SPECIFIED'
    MNOTE 5,'* * *       WITH UNIT NAME &SGUNNMC(&ESNINDX) NOT'
    MNOTE 5,'* * *       DEFINED ON IODEVICE STATEMENT'
&SGQUITB SETB  1
         MEXIT
.AAA225  AIF   (&B-&B/16*16 EQ 0).BBB010     A MULTIPLE OF 16 OR 0
 AIF (&B GT 999).GT999B                                        @ZA73813
 PUNCH ' SGIEF013 &B,&G(1),&G(2),&G(3),                                X
                            XXXXXXXXX'                         @ZA40929
 AGO .LT999B                                                   @ZA73813
.GT999B ANOP                                                   @ZA73813
 PUNCH ' SGIEF013 &B,&G(1),&G(2),&G(3),                        @ZA73813X
                           XXXXXXXXX'                          @ZA73813
.LT999B ANOP                                                   @ZA73813
 PUNCH '               &G(4),&G(5),&G(6),&G(7),                        X
                               XXXXXXXXX'                      @ZA40929
 PUNCH '               &G(8),&G(9),&G(10),&G(11),                      X
                                 XXXXXXXXX'                    @ZA40929
 PUNCH '               &G(12),&G(13),&G(14),&G(15),                    X
                                   XXXXXXXXX'                  @ZA40929
 PUNCH '               &G(16)'                                 @ZA40929
.BBB010  ANOP
&COUNTER SETA  &COUNTER+&FH
&FH      SETB  (NOT &FH)
         AIF   (&RETURN EQ 3).EEE040
 PUNCH ' SGIEF011 0,0,&SGUNNMC(&ESNINDX)'
         AGO   .AAA112
.BBB030  AIF   (&RETURN EQ 3).EEE050
 PUNCH ' END'
 PUNCH '/*'
&SGCTRLC(6)  SETC  'IEFDEVPT'                                     19022
         COPY  SGASMPAK                                           19022
 PUNCH 'IEFDEVPT CSECT'                                           19022
&COUNT   SETA  0                                                  19022
         AGO   .CCC005                                            19022
.FFF025  ANOP                                                     19022
&TBP     SETB  0                                                  19022
.FFF0251 ANOP                                                     19022
&A       SETA  &A+1                                               19022
          AIF   (&A GT &SGCNTRA(3)).FFF030                        19022
         AGO   .DDDB201                                           19022
.FFF030  ANOP                                                     19022
&A       SETA  &V-1                                               19022
 PUNCH 'DVPTLEN  DC    H''&A'''                                   19022
 PUNCH 'DVPTSIZE DC    H''&VALUE'''                               19022
 PUNCH 'DVPTDEV  DC    H''&U'''                                   19022
 PUNCH 'DVPT2321 DC    H''0''' 2321 N/S -KEPT IN FOR COMPATABIL. Y01029
 PUNCH 'DVPT     DC    F''0'''                                    19022
 PUNCH '     DC  X''&L(1)&L(2)&L(3)&L(4)&L(5)&L(6)&L(7)'''        19022
         AIF   ('&CONTI' NE 'X').FFF035                           19022
 PUNCH '     DC  X''&L(8)&L(9)&L(10)&L(11)&L(12)&L(13)&L(14)'''   19022
         AIF   ('&CONTI1' NE 'X').FFF035                          19022
 PUNCH '     DC  X''&L(15)&L(16)&L(17)&L(18)&L(19)&L(20)&L(21)''' 19022
         AIF   ('&CON2' NE 'X').FFF035                            19022
 PUNCH '     DC  X''&L(22)&L(23)&L(24)&L(25)&L(26)&L(27)&L(28)''' 19022
         AIF   ('&CON3' NE 'X').FFF035                            19022
 PUNCH '     DC  X''&L(29)&L(30)&L(31)&L(32)&L(33)&L(34)&L(35)''' 19022
         AIF   ('&CON4' NE 'X').FFF035                            19022
 PUNCH '     DC  X''&L(36)&L(37)&L(38)&L(39)&L(40)&L(41)&L(42)''' 19022
         AIF   ('&CON5' NE 'X').FFF035                         @Z30ANSF
 PUNCH '     DC  X''&L(43)&L(44)&L(45)&L(46)&L(47)&L(48)&L(49)'''
         AIF   ('&CON6' NE 'X').FFF035                         @Z30ANSF
 PUNCH '     DC  X''&L(50)&L(51)&L(52)&L(53)&L(54)&L(55)&L(56)'''
         AIF   ('&CON7' NE 'X').FFF035                         @Z30ANSF
 PUNCH '     DC  X''&L(57)&L(58)&L(59)&L(60)&L(61)&L(62)&L(63)'''
         AIF   ('&CON8' NE 'X').FFF035                         @Z30ANSF
 PUNCH '     DC  X''&L(64)&L(65)&L(66)&L(67)&L(68)&L(69)&L(70)'''
         AIF   ('&CON9' NE 'X').FFF035                         @ZA15722
 PUNCH '     DC  X''&L(71)&L(72)&L(73)&L(74)&L(75)&L(76)&L(77)'''
         AIF   ('&CONA' NE 'X').FFF035                         @ZA15722
 PUNCH '     DC  X''&L(78)&L(79)&L(80)&L(81)&L(82)&L(83)&L(84)'''
         AIF   ('&CONB' NE 'X').FFF035                         @ZA15722
 PUNCH '     DC  X''&L(85)&L(86)&L(87)&L(88)&L(89)&L(90)&L(91)'''
         AIF   ('&CONC' NE 'X').FFF035                         @ZA15722
 PUNCH '     DC  X''&L(92)&L(93)&L(94)&L(95)&L(96)&L(97)&L(98)'''
         AIF   ('&COND' NE 'X').FFF035                         @ZA15722
 PUNCH '     DC  X''&L(99)&L(100)&L(101)&L(102)&L(103)&L(104)&L(105)'''
         AIF   ('&CONE' NE 'X').FFF035                         @ZA15722
 PUNCH '     DC  X''&L(106)&L(107)&L(108)&L(109)&L(110)&L(111)&L(112)''X
               '                                               @ZA15722
         AIF   ('&CONF' NE 'X').FFF035                         @ZA15722
 PUNCH '     DC  X''&L(113)&L(114)&L(115)&L(116)&L(117)&L(118)&L(119)''X
               '                                               @ZA15722
         AIF   ('&CONG' NE 'X').FFF035                         @ZA15722
 PUNCH '     DC  X''&L(120)&L(121)&L(122)&L(123)&L(124)&L(125)&L(126)''X
               '                                               @ZA15722
         AIF   ('&CONH' NE 'X').FFF035                         @ZA15722
 PUNCH '     DC  X''&L(127)&L(128)'''                          @ZA15722
.FFF035  ANOP                                                     19022
 PUNCH '     END '                                                19022
 PUNCH '/*'                                                       19022
&SGCTRLC(6)  SETC  'IEFWMSKA'
         COPY  SGASMPAK
 PUNCH 'DEVMASKT CSECT'
 PUNCH '          DC    H''&ENTRIES'''
&ENTRIES SETA  &ENTRIES+1
 PUNCH '         DC    H''&ENTRIES'''
         SGIEF212                       CALL TO PROCESS ADDR BOXES
.*                                                             @G64IPSJ
 PUNCH '               LAST'
.CCC005  ANOP
&CONTI   SETC  ' '
&CONTI1  SETC  ' '                                                 000G
&CON2    SETC  ' '                                                 000G
&CON3    SETC  ' '                                                 000G
&CON4    SETC  ' '                                                 000G
&CON5    SETC  ' '                                             @Z30ANSF
&CON6    SETC  ' '                                             @Z30ANSF
&CON7    SETC  ' '                                             @Z30ANSF
&CON8    SETC  ' '                                             @Z30ANSF
&CON9    SETC  ' '                                             @ZA15722
&CONA    SETC  ' '                                             @ZA15722
&CONB    SETC  ' '                                             @ZA15722
&CONC    SETC  ' '                                             @ZA15722
&COND    SETC  ' '                                             @ZA15722
&CONE    SETC  ' '                                             @ZA15722
&CONF    SETC  ' '                                             @ZA15722
&CONG    SETC  ' '                                             @ZA15722
&CONH    SETC  ' '                                             @ZA15722
         AIF   (&V LE 8).EEE015
&CONTI   SETC  'X'
         AIF (&V LE 15).EEE015                                     000G
&CONTI1 SETC 'X'                                                   000G
         AIF   (&V LE 22).EEE015                                   000G
&CON2    SETC  'X'                                                 000G
         AIF   (&V LE 29).EEE015                                   000G
&CON3    SETC  'X'                                                 000G
         AIF   (&V LE 36).EEE015                                   000G
&CON4    SETC  'X'                                                 000G
         AIF    (&V LE 43).EEE015                              @Z30ANSF
&CON5    SETC   'X'                                            @Z30ANSF
         AIF    (&V LE 50).EEE015                              @Z30ANSF
&CON6    SETC   'X'                                            @Z30ANSF
         AIF    (&V LE 57).EEE015                              @Z30ANSF
&CON7    SETC   'X'                                            @Z30ANSF
         AIF   (&V LE 64).EEE015                               @Z30ANSF
&CON8    SETC  'X'                                             @Z30ANSF
         AIF   (&V LE 71).EEE015                               @ZA15722
&CON9    SETC  'X'                                             @ZA15722
         AIF   (&V LE 78).EEE015                               @ZA15722
&CONA    SETC  'X'                                             @ZA15722
         AIF   (&V LE 85).EEE015                               @ZA15722
&CONB    SETC  'X'                                             @ZA15722
         AIF   (&V LE 92).EEE015                               @ZA15722
&CONC    SETC  'X'                                             @ZA15722
         AIF   (&V LE 99).EEE015                               @ZA15722
&COND    SETC  'X'                                             @ZA15722
         AIF   (&V LE 106).EEE015                              @ZA15722
&CONE    SETC  'X'                                             @ZA15722
         AIF   (&V LE 113).EEE015                              @ZA15722
&CONF    SETC  'X'                                             @ZA15722
         AIF   (&V LE 120).EEE015                              @ZA15722
&CONG    SETC  'X'                                             @ZA15722
         AIF   (&V LE 127).EEE015                              @ZA15722
&CONH    SETC  'X'                                             @ZA15722
         AGO   .EEE015
.DDDB10  ANOP
&U SETA 0  INITIALIZATION REQUIED BEFORE DERIVING EACH MASK.
.*   L(1-7) ARE GIVEN THE HEX.VALUES WHICH PRODUCE THE MASKS.
&X       SETA  1
.DDDB14  ANOP
&L(&X)   SETC  '00000000'
&X       SETA   &X+1
         AIF   (&X LT &V).DDDB14  V=1+ NO. OF NECESSARY CBOXES.
         AIF   (&RETURN EQ 3).AAA125
         AIF   (&RETURN EQ 4).EEE054
         AIF   (&RETURN EQ 5).FFF010                              IORMS
         AIF   (&RETURN EQ 6).EEEA350                            S21048
.*              =2 PUNCH ONE SGIEF012 CARD PER SUPPORTED DEVICE TYPE.
.*              =3 PUNCH SGIEF013 AS NEEDED AND ONE SGIEF012 CARD
.*       FOR EACH UNITNAME SPECIFIED IN THE SYSTEM.
.*   AFTER ALL UNITNAMES PROCESSED PUNCH SGIEF013 1,0,0,0,0... CALD
.*   WHEN RETURN=4 PUNCH A SGIEF012 CARD WITH MASK OF ALL DIRECT ACCESS
.*       DEVICES.
&DUPLI1 SETA &SGDADRA(&A)/X'400000'  GET BITS 23-30(DEV TYPE)
.DDDB20  ANOP
         AIF   (&RETURN NE 2).DDDB201
&W       SETA  0
.*                                                             @G64IPSJ
.* THIS SECTION OF CODE CONSTRUCTS A LIST OF COMPATIBLE DEVICE @G64IPSJ
.* TYPES THAT ARE TO BE INCLUDED IN THE CURRENT GENERIC (ID IN @G64IPSJ
.* &DUPLI1).  THE COMPATIBLE IDS ARE STORED AT THE END OF      @G64IPSJ
.* &ALTLIST AFTER THE GENERICS TO BE GENERATED.                @G64IPSJ
.*                                                             @G64IPSJ
&NUMBENT SETA  0
         AIF   (K'&SGGCTXC(&DUPLI1) LT 3).NOMORE  IF NO COMPAT @G64IPSJ
.*                                                GENERICS  BR @G64IPSJ
&NUMBENT SETA  K'&SGGCTXC(&DUPLI1)/3   SAVE NUMBER OF ENTRIES  @G64IPSJ
&B       SETA  0                       INITIALIZE INDEX        @G64IPSJ
&COMPATC SETC  '&SGGCTXC(&DUPLI1)'     MOVE TO WORK AREA       @G64IPSJ
.TSTNXT  ANOP                          LOOP FOR COMPAT LIST    @G64IPSJ
&B       SETA  &B+1                    INCREMENT INDEX         @G64IPSJ
         AIF   (&B GT &NUMBENT).NOMORE TEST FOR MORE ENTRIES   @G64IPSJ
&TEMPVAL SETC  '&COMPATC'(&B*3-2,3)    OBTAIN COMPAT ID        @G64IPSJ
&I       SETA  &TEMPVAL                CONVERT ID TO HEX       @G64IPSJ
&ALTLIST(&EXTRA+&B) SETA &I            SAVE COMPATIBLE ID IN   @G64IPSJ
.*                                     TEMP WORK AREA END      @G64IPSJ
.*                                     OF GENERATED GENERIC    @G64IPSJ
.*                                     ID LIST                 @G64IPSJ
         AGO   .TSTNXT                 TEST NEXT ENTRY         @G64IPSJ
.NOMORE  ANOP                          EXIT LIST BUILD         @G64IPSJ
         AGO   .EEE020
.DDDB201 ANOP
&W       SETA  &A
.DDDB21  ANOP  OBTAIN UCB LOOKUP VALUE                         @Z30ANSF
&UCBLSTV SETA &SGDAUPA(&W)                                     @Z30ANSF
&U       SETA  &U+1      COUNT OF DEVICES IN CURRENT MASK
.*   GET VALUE OF 1,2,3 OR 4 TO USE IN SUBLIST TO OBTAIN HEX.CHARACTER.
&X SETA &UCBLSTV+1-&UCBLSTV/4*4 1,5,9=2 2,6,10=3 3,7,11=4 4,8,12=1
&K(1)    SETC  '1842'(&X,1)  HEX CHARACTER FOR UCBLOOKUP MASK.
&XX      SETA  (&UCBLSTV+31)/32  GIVES CBOX FOR THIS CHARACTER
&D SETA (&UCBLSTV-1-(&UCBLSTV-1)/32*32+4)/4 POSITION IN CBOX FOR CHAR.
&K(2)    SETC  '&L(&XX)'(&D,1)   GET CHARACTER ALREADY THERE
         AIF   ('&K(2)' LT '0').DDDD IF CHARACTER A-E MUST CONVERT
&HEX     SETA  &K(2)
         AGO   .DDDD10
.DDDD    ANOP
         CONVERT DIGITS=1,VALUE=&K(2),TO=HEX
.DDDD10  ANOP
&X       SETA  &HEX+&K(1)  WHAT WAS THERE PLUS 1,2,4,8.
&K(1)    SETC  '123456789ABCDEF'(&X,1)
.*  SET HEX.CHARACTER K(1) IN POSITION D OF L(XX). OTHER POSITIONS
.*       REMAIN UNCHANGED.
         AIF   (&D EQ 1).DDDE10
         AIF   (&D EQ 8).DDDE15
&L(&XX)  SETC  '&L(&XX)'(1,&D-1).'&K(1)'.'&L(&XX)'(&D+1,8-&D)
         AGO   .DDDE18
.DDDE10  ANOP
&L(&XX)  SETC  '&K(1)'.'&L(&XX)'(2,7)
         AGO   .DDDE18
.DDDE15  ANOP
&L(&XX)  SETC  '&L(&XX)'(1,7).'&K(1)'
.DDDE18  ANOP                                                      000G
         AIF   (&RETURN EQ 6).EEEA350                            S21048
         AIF   (&RETURN EQ 5).FFF0251                             19022
         AIF   (&RETURN EQ 2).EEE020
         AIF   (&RETURN EQ 3).AAA210
         AGO   .EEE055
.**********************************************************************
.EEE015  ANOP
&COUNT   SETA  0
&CONT    SETC  '&CONTI'
&A       SETA  0
         AIF   (&TBP).FFF025                                      19022
&RETURN  SETA  2
.EEE017  AIF   (&A EQ &SGCNTRA(3)).EEE035
.*  SEARCH EVERY DEVICE PUNCHING ONE SGIEF012 PER UNIQUE DEVICE TYPE.
&A       SETA  &A+1
         AIF  (&SGDADRA(&A) LT X'400000').EEE017 NOT SUPPORTED
         AIF   (&SGDADRA(&A) LT X'10000'*X'4000').DDDB10 SAME AS PREV.
&SGDADRA(&A) SETA &SGDADRA(&A)-X'10000'*X'4000'  TYPE, FALL THROUGH
  AGO .EEE017                                AND SET BIT 31 OFF.
.EEE020  AIF   (&SGCNTRA(3) EQ &W).EEE030
&P       SETA  0                       INITIALIZE FLAG         @ZA58900
.* RETURN=2 SEARCH REST OF DEVICES FOR ANY OF SAME TYPE (BITS 23-30)
.*       THEY WILL GO IN SAME MASK AND HAVE BIT 31 TURNED ON.
&W       SETA  &W+1
         AIF (&SGDADRA(&W) LT X'10000'*X'4000').EEE021         @ZA58900
.*       IF BIT 31 WAS PREVIOUSLY SET ON, SET FLAG ON TO       @ZA58900
&P       SETA  1      INDICATE THAT IS SHOULD BE SET BACK ON   OZA58900
&SGDADRA(&W) SETA &SGDADRA(&W)-X'10000'*X'4000'  SET BIT 31 OFF@ZA58900
.EEE021  ANOP                                    BIT 31 OFF    @ZA58900
         AIF (&SGDADRA(&W) LT X'400000').EEE023                @ZA68957
&DUPLI2  SETA  &SGDADRA(&W)/X'400000'
.*                                                             @G64IPSJ
.* THIS SECTION OF CODE SCANS THE LIST OF ELIGIBLE DEVICE      @G64IPSJ
.* TYPES AT THE END OF &ALTLIST.  IF ELIGIBLE IT IS ADDED TO   @G64IPSJ
.* THE DEVICE MASK AS WELL AS THE NATIVE GENERIC TYPES FOUND.  @G64IPSJ
.*                                                             @G64IPSJ
&B       SETA  0                       INITIALIZE INDEX        @G64IPSJ
.EEENXT  ANOP                          LOOP FOR COMPATIBLE     @G64IPSJ
.*                                     ENTRIES                 @G64IPSJ
&B       SETA  &B+1                    INCREMENT INDEX         @G64IPSJ
         AIF   (&B GT &NUMBENT).NOGEN  TEST FOR MORE ENTRIES   @G64IPSJ
         AIF   (&DUPLI2 EQ &ALTLIST(&EXTRA+&B)).EEE022         @ZA58900
.*                                     TEST FOR COMPATIBILITY  @G64IPSJ
.*                                     AND ADD IF COMPATIBLE   @G64IPSJ
         AGO   .EEENXT                 TRY NEXT ENTRY          @G64IPSJ
.EEE022  ANOP  BUILD MASK                                      @ZA58900
         AIF   (&P NE 1).DDDB21 IF BIT 31 SHOULD BE OFF, CONT  @ZA58900
&SGDADRA(&W) SETA &SGDADRA(&W)+X'10000'*X'4000' ELSE, SET 31 ON@ZA58900
 AGO .DDDB21   GO SET THIS DEVICE UCBLOOKUP IN CURRENT MASK.   @ZA58900
.*             AND RETURN TO .EEE020                           @ZA58900
.NOGEN   ANOP                          END OF COMPAT TEST      @G64IPSJ
         AIF   (&DUPLI1 NE &DUPLI2).EEE023                     @ZA68957
&SGDADRA(&W) SETA &SGDADRA(&W)+X'10000'*X'4000'           BIT 31 ON
 AGO .DDDB21   GO SET THIS DEVICE UCBLOOKUP IN CURRENT MASK.
.*             AND RETURN TO .EEE020                           @G64IPSJ
.EEE023  ANOP  BUILD MASK                                      @ZA68957
         AIF   (&P NE 1).EEE020 IF BIT 31 SHOULD BE OFF, CONT  @ZA68957
&SGDADRA(&W) SETA &SGDADRA(&W)+X'10000'*X'4000' ELSE, SET 31 ON@ZA68957
 AGO .EEE020   RETURN TO .EEE020                               @ZA68957
.EEE030 ANOP   RETURN=2  COME HERE ONCE PER DEVICE TYPE.
&SGDADRA(&A)  SETA  &SGDADRA(&A)-X'10000'*X'4000'    SET BIT 31 OFF
 PUNCH ' SGIEF012 &DUPLI1,&U,                                          X
                       XXXXXXXX'
 PUNCH '               &L(1)&L(2)&L(3)&L(4)&L(5)&L(6)&L(7)&CONTI'
 AIF ('&CONTI' NE 'X').EEE017
 PUNCH '               &L(8)&L(9)&L(10)&L(11)&L(12)&L(13)&L(14)&CONTI1'
 AIF ('&CONTI1' NE 'X').EEE017                                     000G
 PUNCH '               &L(15)&L(16)&L(17)&L(18)&L(19)&L(20)&L(21)&CON2'
         AIF   ('&CON2' NE 'X').EEE017                             000G
    PUNCH      '               ,                                       X
                               X'
 PUNCH '               &L(22)&L(23)&L(24)&L(25)&L(26)&L(27)&L(28)&CON3'
         AIF   ('&CON3' NE 'X').EEE017                             000G
 PUNCH '               &L(29)&L(30)&L(31)&L(32)&L(33)&L(34)&L(35)&CON4'
         AIF   ('&CON4' NE 'X').EEE017                             000G
 PUNCH '               &L(36)&L(37)&L(38)&L(39)&L(40)&L(41)&L(42)&CON5'
         AIF   ('&CON5' NE 'X').EEE017                         @ZM30431
 PUNCH '               &L(43)&L(44)&L(45)&L(46)&L(47)&L(48)&L(49)&CON6'
         AIF   ('&CON6' NE 'X').EEE017                         @Z30ANSF
    PUNCH      '               ,                                       X
                               X'                              @Z30ANSF
 PUNCH '               &L(50)&L(51)&L(52)&L(53)&L(54)&L(55)&L(56)&CON7'
         AIF   ('&CON7' NE 'X').EEE017                         @Z30ANSF
 PUNCH '               &L(57)&L(58)&L(59)&L(60)&L(61)&L(62)&L(63)&CON8'
         AIF   ('&CON8' NE 'X').EEE017                         @Z30ANSF
 PUNCH '               &L(64)&L(65)&L(66)&L(67)&L(68)&L(69)&L(70)&CON9'
         AIF   ('&CON9' NE 'X').EEE017                         @ZA15722
 PUNCH '               &L(71)&L(72)&L(73)&L(74)&L(75)&L(76)&L(77)&CONA'
         AIF   ('&CONA' NE 'X').EEE017                         @ZA15722
    PUNCH      '               ,                                       X
                               X'                              @ZA15722
 PUNCH '               &L(78)&L(79)&L(80)&L(81)&L(82)&L(83)&L(84)&CONB'
         AIF   ('&CONB' NE 'X').EEE017                         @ZA15722
 PUNCH '               &L(85)&L(86)&L(87)&L(88)&L(89)&L(90)&L(91)&CONC'
         AIF   ('&CONC' NE 'X').EEE017                         @ZA15722
 PUNCH '               &L(92)&L(93)&L(94)&L(95)&L(96)&L(97)&L(98)&COND'
         AIF   ('&COND' NE 'X').EEE017                         @ZA15722
 PUNCH '               &L(99)&L(100)&L(101)&L(102)&L(103)&L(104)&L(105)X
               &CONE'                                          @ZA15722
         AIF   ('&CONE' NE 'X').EEE017                         @ZA15722
   PUNCH       '               ,                                       X
                               X'                              @ZA15722
 PUNCH '               &L(106)&L(107)&L(108)&L(109)&L(110)&L(111)&L(112X
               )&CONF'                                         @ZA15722
         AIF   ('&CONF' NE 'X').EEE017                         @ZA15722
 PUNCH '               &L(113)&L(114)&L(115)&L(116)&L(117)&L(118)&L(119X
               )&CONG'                                         @ZA15722
         AIF   ('&CONG' NE 'X').EEE017                         @ZA15722
 PUNCH '               &L(120)&L(121)&L(122)&L(123)&L(124)&L(125)&L(126X
               )&CONH'                                         @ZA15722
         AIF   ('&CONH' NE 'X').EEE017                         @ZA15722
 PUNCH '               &L(127)&L(128)'                         @ZA15722
         AGO   .EEE017
.************************************************************* @G64IPSJ
.*                                                             @G64IPSJ
.* THIS SECTION OF CODE BUILDS THE MASK DEVICE MASK ENTRIES    @G64IPSJ
.* FOR ALL GENERATED GENERICS.  THE &ALTLIST CONTAINS A LIST   @G64IPSJ
.* OF IDS TO BE GENERATED (SAVED DURING DEVICE NAME TABLE      @G64IPSJ
.* PROCESSING).  A LIST OF COMPATIBLE GENERICS IS APPENDED TO  @G64IPSJ
.* THE &ALTLIST AND A MASK FOR THIS GENERIC IS CONSTRUCTED.    @G64IPSJ
.* THE NEXT ID IS FOUND AND THE PROCESS IS REPEATED UNTIL      @G64IPSJ
.* ALLTHE GENERICS IN THE &ALTLIST ARE GENERATED.              @G64IPSJ
.*                                                             @G64IPSJ
.************************************************************* @G64IPSJ
.EEE035  ANOP            SET RETURN=6 TO INDICATE GENERATED      S21048
&RETURN  SETA  6    GENERIC NAME BIT PATTERNS ARE BEING BUILT    S21048
&SVEXTRA SETA  &EXTRA                  SAVE EXTRA VALUE        @G64IPSJ
&C       SETA  0                       INITIALIZE INDEX        @G64IPSJ
.EEE0351 ANOP                        EXTRA=0 WHEN ALL FINISHED   S21048
         AIF   (&EXTRA EQ 0).EEE0356  WITH GENERATED GENERICS    S21048
&C       SETA  &C+1                    INCREMENT FOR NEXT      @G64IPSJ
.*                                     GENERATED GENERIC       @G64IPSJ
&NUMBENT SETA  K'&SGGCTXC(&ALTLIST(&C))/3 SAVE NUMBER OF ENTS  @G64IPSJ
&B       SETA  1                       INITIALIZE INDEX        @G64IPSJ
&COMPATC SETC  '&SGGCTXC(&ALTLIST(&C))' MOVE TO WORK AREA      @G64IPSJ
.EEEJ350 ANOP                          LOOP FOR COMPAT LIST    @G64IPSJ
         AIF   (&B GT &NUMBENT).EEEB350 TEST FOR MORE ENTRIES  @G64IPSJ
&TEMPVAL SETC  '&COMPATC'(&B*3-2,3)    OBTAIN COMPAT ID        @G64IPSJ
&I       SETA  &TEMPVAL                CONVERT ID TO HEX       @G64IPSJ
&ALTLIST(&SVEXTRA+&B) SETA &I          SAVE COMPATIBLE ID IN   @G64IPSJ
.*                                     TEMP WORK AREA AT END   @G64IPSJ
.*                                     OF GENERATED GENERIC    @G64IPSJ
.*                                     ID LIST                 @G64IPSJ
&B       SETA  &B+1                    INCREMENT INDEX         @G64IPSJ
         AGO   .EEEJ350                TEST NEXT ENTRY         @G64IPSJ
.EEEB350 ANOP                          EXIT LIST BUILD         @G64IPSJ
&W       SETA  0                                                 S21048
         AGO   .DDDB10                                           S21048
.EEEA350 ANOP                                                    S21048
         AIF   (&SGCNTRA(3) EQ &W).EEEA352                       S21048
&W       SETA  &W+1                                              S21048
         AIF   (&SGDADRA(&W) LT X'400000').EEEA350 NOT SUPPORTED S21048
&DUPLI2  SETA  &SGDADRA(&W)/X'400000'  DUPLI2=DEVICE TYPE        S21048
&B       SETA  1                       INITIALIZE INDEX        @G64IPSJ
.EEEK350 ANOP                          LOOP FOR ID COMPAT TEST @G64IPSJ
         AIF   (&B GT &NUMBENT).EEEA350 IF NO MORE ENTRIES,    @G64IPSJ
.*                                     GET NEXT ADDR BOX       @G64IPSJ
         AIF   (&DUPLI2 EQ &ALTLIST(&SVEXTRA+&B)).DDDB21       @G64IPSJ
.*                                     IF ID MATCHES, ADD TO   @G64IPSJ
.*                                     MASK AND RETURN TO      @G64IPSJ
.*                                     .EEEA350 FOR NEXT ENTRY @G64IPSJ
&B       SETA  &B+1                    INCREMENT INDEX         @G64IPSJ
         AGO   .EEEK350                TRY NEXT ID             @G64IPSJ
.EEEA352 ANOP                           COME HERE WHEN BIT       S21048
 PUNCH  '        DC        F''&U'''                              S21048
         PUNCH '        DC        XL4''&SGDTYPC(&ALTLIST(&C))'''
.*                                     PUNCH DEVICE TYPE       @G64IPSJ
.*   PUNCH MASK FOR GENERIC                                      S21048
 PUNCH  '   DC  X''&L(1)&L(2)&L(3)&L(4)&L(5)&L(6)&L(7)'''        S21048
         AIF   ('&CONT' NE 'X').EEE0354                          S21048
 PUNCH  '   DC  X''&L(8)&L(9)&L(10)&L(11)&L(12)&L(13)&L(14)'''   S21048
         AIF   ('&CONTI1' NE 'X').EEE0354                        S21048
 PUNCH  '   DC  X''&L(15)&L(16)&L(17)&L(18)&L(19)&L(20)&L(21)''' S21048
         AIF   ('&CON2' NE 'X').EEE0354                          S21048
 PUNCH  '   DC  X''&L(22)&L(23)&L(24)&L(25)&L(26)&L(27)&L(28)''' S21048
         AIF   ('&CON3' NE 'X').EEE0354                          S21048
 PUNCH  '   DC  X''&L(29)&L(30)&L(31)&L(32)&L(33)&L(34)&L(35)''' S21048
         AIF   ('&CON4' NE 'X').EEE0354                          S21048
 PUNCH  '   DC  X''&L(36)&L(37)&L(38)&L(39)&L(40)&L(41)&L(42)''' S21048
         AIF   ('&CON5' NE 'X').EEE0354                        @Z30ANSF
 PUNCH '     DC  X''&L(43)&L(44)&L(45)&L(46)&L(47)&L(48)&L(49)'''
         AIF   ('&CON6' NE 'X').EEE0354                        @Z30ANSF
 PUNCH '     DC  X''&L(50)&L(51)&L(52)&L(53)&L(54)&L(55)&L(56)'''
         AIF   ('&CON7' NE 'X').EEE0354                        @Z30ANSF
 PUNCH '     DC  X''&L(57)&L(58)&L(59)&L(60)&L(61)&L(62)&L(63)'''
         AIF   ('&CON8' NE 'X').EEE0354                        @ZA20637
 PUNCH '     DC  X''&L(64)&L(65)&L(66)&L(67)&L(68)&L(69)&L(70)'''
         AIF   ('&CON9' NE 'X').EEE0354                        @ZA28977
 PUNCH '     DC  X''&L(71)&L(72)&L(73)&L(74)&L(75)&L(76)&L(77)'''
         AIF   ('&CONA' NE 'X').EEE0354                        @ZA15722
 PUNCH '     DC  X''&L(78)&L(79)&L(80)&L(81)&L(82)&L(83)&L(84)'''
         AIF   ('&CONB' NE 'X').EEE0354                        @ZA15722
 PUNCH '     DC  X''&L(85)&L(86)&L(87)&L(88)&L(89)&L(90)&L(91)'''
         AIF   ('&CONC' NE 'X').EEE0354                        @ZA15722
 PUNCH '     DC  X''&L(92)&L(93)&L(94)&L(95)&L(96)&L(97)&L(98)'''
         AIF   ('&COND' NE 'X').EEE0354                        @ZA15722
 PUNCH '     DC  X''&L(99)&L(100)&L(101)&L(102)&L(103)&L(104)&L(105)'''
         AIF   ('&CONE' NE 'X').EEE0354                        @ZA15722
 PUNCH '     DC  X''&L(106)&L(107)&L(108)&L(109)&L(110)&L(111)&L(112)''X
               '                                               @ZA15722
         AIF   ('&CONF' NE 'X').EEE0354                        @ZA15722
 PUNCH '     DC  X''&L(113)&L(114)&L(115)&L(116)&L(117)&L(118)&L(119)''X
               '                                               @ZA15722
         AIF   ('&CONG' NE 'X').EEE0354                        @ZA15722
 PUNCH '     DC  X''&L(120)&L(121)&L(122)&L(123)&L(124)&L(125)&L(126)''X
               '                                               @ZA15722
         AIF   ('&CONH' NE 'X').EEE0354                        @ZA15722
 PUNCH '     DC  X''&L(127)&L(128)'''                          @ZA15722
.EEE0354 ANOP                                                    S21048
&EXTRA   SETA  &EXTRA-1       DECREMENT COUNT OF GENERATE GENERICS21048
         AGO   .EEE0351                                          S21048
.EEE0356 ANOP
&RETURN  SETA  3
         AGO   .AAA110
.EEE040  ANOP  RETURN=3  COME HERE ONCE PER UNITNAME.
 PUNCH ' SGIEF012 0,&U,                                                X
                     XXXX'
 PUNCH '               &L(1)&L(2)&L(3)&L(4)&L(5)&L(6)&L(7)&CONTI'
 AIF ('&CONTI' NE 'X').AAA112
 PUNCH '               &L(8)&L(9)&L(10)&L(11)&L(12)&L(13)&L(14)&CONTI1'
 AIF ('&CONTI1' NE 'X').AAA112                                     000G
 PUNCH '               &L(15)&L(16)&L(17)&L(18)&L(19)&L(20)&L(21)&CON2'
         AIF   ('&CON2' NE 'X').AAA112                             000G
    PUNCH      '               ,                                       X
                               X'
 PUNCH '               &L(22)&L(23)&L(24)&L(25)&L(26)&L(27)&L(28)&CON3'
         AIF   ('&CON3' NE 'X').AAA112                             000G
 PUNCH '               &L(29)&L(30)&L(31)&L(32)&L(33)&L(34)&L(35)&CON4'
         AIF   ('&CON4' NE 'X').AAA112                             000G
 PUNCH '               &L(36)&L(37)&L(38)&L(39)&L(40)&L(41)&L(42)&CON5'
         AIF   ('&CON5' NE 'X').AAA112                         @Z30ANSF
 PUNCH '               &L(43)&L(44)&L(45)&L(46)&L(47)&L(48)&L(49)&CON6'
         AIF   ('&CON6' NE 'X').AAA112                         @Z30ANSF
    PUNCH      '               ,                                       X
                               X'                              @Z30ANSF
 PUNCH '               &L(50)&L(51)&L(52)&L(53)&L(54)&L(55)&L(56)&CON7'
         AIF   ('&CON7' NE 'X').AAA112                         @Z30ANSF
 PUNCH '               &L(57)&L(58)&L(59)&L(60)&L(61)&L(62)&L(63)&CON8'
         AIF   ('&CON8' NE 'X').AAA112                         @Z30ANSF
 PUNCH '               &L(64)&L(65)&L(66)&L(67)&L(68)&L(69)&L(70)&CON9'
         AIF   ('&CON9' NE 'X').AAA112                         @ZA15722
 PUNCH '               &L(71)&L(72)&L(73)&L(74)&L(75)&L(76)&L(77)&CONA'
         AIF   ('&CONA' NE 'X').AAA112                         @ZA15722
    PUNCH      '              ,                                        X
                              X'                               @ZA15722
 PUNCH '               &L(78)&L(79)&L(80)&L(81)&L(82)&L(83)&L(84)&CONB'
         AIF   ('&CONB' NE 'X').AAA112                         @ZA15722
 PUNCH '               &L(85)&L(86)&L(87)&L(88)&L(89)&L(90)&L(91)&CONC'
         AIF   ('&CONC' NE 'X').AAA112                         @ZA15722
 PUNCH '               &L(92)&L(93)&L(94)&L(95)&L(96)&L(97)&L(98)&COND'
         AIF   ('&COND' NE 'X').AAA112                         @ZA15722
 PUNCH '               &L(99)&L(100)&L(101)&L(102)&L(103)&L(104)&L(105)X
               &CONE'                                          @ZA15722
         AIF   ('&CONE' NE 'X').AAA112                         @ZA15722
    PUNCH      '               ,                                       X
                               X'                              @ZA15722
 PUNCH '               &L(106)&L(107)&L(108)&L(109)&L(110)&L(111)&L(112X
               )&CONF'                                         @ZA15722
         AIF   ('&CONF' NE 'X').AAA112                         @ZA15722
 PUNCH '               &L(113)&L(114)&L(115)&L(116)&L(117)&L(118)&L(119X
               )&CONG'                                         @ZA15722
         AIF   ('&CONG' NE 'X').AAA112                         @ZA15722
 PUNCH '               &L(120)&L(121)&L(122)&L(123)&L(124)&L(125)&L(126X
               )&CONH'                                         @ZA15722
         AIF   ('&CONH' NE 'X').AAA112                         @ZA15722
 PUNCH '               &L(127)&L(128)'                         @ZA15722
         AGO   .AAA112
.EEE050  ANOP
 PUNCH ' SGIEF013 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0'
&RETURN  SETA  4
         AGO   .DDDB10
.EEE054  ANOP  RETURN=4
&A       SETA  0
.EEE055  AIF   (&A EQ &SGCNTRA(3)).EEE060
&A       SETA  &A+1
         AIF   (NOT &SGDASWB(&A)).EEE055
         AGO   .DDDB20
.EEE060  ANOP  PUNCH OUT MASK FOR ALL DIRECT ACCESS DEVICES.
 PUNCH ' SGIEF012 0,&U,                                                X
                     XXXX'
 PUNCH '               &L(1)&L(2)&L(3)&L(4)&L(5)&L(6)&L(7)&CONTI'
 AIF ('&CONTI' NE 'X').AA1234
 PUNCH '               &L(8)&L(9)&L(10)&L(11)&L(12)&L(13)&L(14)&CONTI1'
 AIF ('&CONTI1' NE 'X').AA1234                                     000G
 PUNCH '               &L(15)&L(16)&L(17)&L(18)&L(19)&L(20)&L(21)&CON2'
         AIF   ('&CON2' NE 'X').AA1234                             000G
    PUNCH      '               ,                                       X
                               X'
 PUNCH '               &L(22)&L(23)&L(24)&L(25)&L(26)&L(27)&L(28)&CON3'
         AIF   ('&CON3' NE 'X').AA1234                             000G
 PUNCH '               &L(29)&L(30)&L(31)&L(32)&L(33)&L(34)&L(35)&CON4'
         AIF   ('&CON4' NE 'X').AA1234                             000G
 PUNCH '               &L(36)&L(37)&L(38)&L(39)&L(40)&L(41)&L(42)&CON5'
         AIF   ('&CON5' NE 'X').AA1234                         @Z30ANSF
 PUNCH '               &L(43)&L(44)&L(45)&L(46)&L(47)&L(48)&L(49)&CON6'
         AIF   ('&CON6' NE 'X').AA1234                         @Z30ANSF
    PUNCH      '               ,                                       X
                               X'                              @Z30ANSF
 PUNCH '               &L(50)&L(51)&L(52)&L(53)&L(54)&L(55)&L(56)&CON7'
         AIF   ('&CON7' NE 'X').AA1234                         @Z30ANSF
 PUNCH '               &L(57)&L(58)&L(59)&L(60)&L(61)&L(62)&L(63)&CON8'
         AIF   ('&CON8' NE 'X').AA1234                         @Z30ANSF
 PUNCH '               &L(64)&L(65)&L(66)&L(67)&L(68)&L(69)&L(70)&CON9'
         AIF   ('&CON9' NE 'X').AA1234                         @ZA15722
 PUNCH '               &L(71)&L(72)&L(73)&L(74)&L(75)&L(76)&L(77)&CONA'
         AIF   ('&CONA' NE 'X').AA1234                         @ZA15722
    PUNCH      '               ,                                       X
                               X'                              @ZA15722
 PUNCH '               &L(78)&L(79)&L(80)&L(81)&L(82)&L(83)&L(84)&CONB'
         AIF   ('&CONB' NE 'X').AA1234                         @ZA15722
 PUNCH '               &L(85)&L(86)&L(87)&L(88)&L(89)&L(90)&L(91)&CONC'
         AIF   ('&CONC' NE 'X').AA1234                         @ZA15722
 PUNCH '               &L(92)&L(93)&L(94)&L(95)&L(96)&L(97)&L(98)&COND'
         AIF   ('&COND' NE 'X').AA1234                         @ZA15722
 PUNCH '               &L(99)&L(100)&L(101)&L(102)&L(103)&L(104)&L(105)X
               &CONE'                                          @ZA15722
         AIF   ('&CONE' NE 'X').AA1234                         @ZA15722
    PUNCH      '               ,                                       X
                               X'                              @ZA15722
 PUNCH '               &L(106)&L(107)&L(108)&L(109)&L(110)&L(111)&L(112X
               )&CONF'                                         @ZA15722
         AIF   ('&CONF' NE 'X').AA1234                         @ZA15722
 PUNCH '               &L(113)&L(114)&L(115)&L(116)&L(117)&L(118)&L(119X
               )&CONG'                                         @ZA15722
         AIF   ('&CONG' NE 'X').AA1234                         @ZA15722
 PUNCH '               &L(120)&L(121)&L(122)&L(123)&L(124)&L(125)&L(126X
               )&CONH'                                         @ZA15722
        AIF    ('&CONH' NE 'X').AA1234                         @ZA15722
 PUNCH '               &L(127)&L(128)'                         @ZA15722
.AA1234 PUNCH '          END '
 PUNCH '/*'
         MEND
