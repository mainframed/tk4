         MACRO
         SGIEF215   &DUMMY=                                    @G64IPSJ
.*C001000,002000,049000, A049050-049400                        @YM08650
.*A000000-999999                                                 Y02670
         COPY  SGGBLPAK
         LCLA  &I,&A
         LCLA  &CMPTIND,&NUMBENT,&COMPATS(500),&G,&K,&N        &G64IPSJ
         LCLB  &GENERB                                         &G64IPSJ
         LCLC  &WORKSTR,&DEVCLS,&TEMPVAL                       &G64IPSJ
.**********************************************************************
.*
.*  MACRO - SGIEF215
.*
.*  STATUS - VS2 SYSTEM CONTROL PROGRAM 2                      @G64IPSJ
.*
.*  DESCRIPTION -
.*
.*  THIS MACRO PERFORM ALL SPECIAL-CASE PROCESSING ASSOCIATED WITH
.*  THE EDTTAB. (AS DESCRIBED BELOW)
.*
.*  (SEE CHART 9.1 AND SUBORDINATE CHARTS IN DEVICE ALLOCATION CHARTS)
.*
.*  INPUTS ARE SGSCHVC, SGUNNVC, AND THE GENERIC TYPE CODES   @G64IPSJ
.*  OF TAPE AND DA DEVICES ON THE SYSTEM.                     @G64IPSJ
.*
.*  THIS MACRO GENERATES TAPE NAMES ACCORDING TO THE PRESENCE OR
.*  ABSENCE OF CERTAIN TAPE TYPES ON SYSTEM. MULTIPLE GENERIC TYPES
.*  ARE MADE ELEGIBLE TO TAPE NAMES UNDER SAME RULES AS NAME
.*  GENERATION.
.*
.*  PRECEDENCE OF GENERIC NAMES IS PROCESSED, USER SPECIFIED NAMES
.*  DERIVED FROM SGSCHVC AND IBM DEFAULT IS OBTAINED VIA SGIEF216 CALL.
.*
.*  VAM ELIGIBLE NAMES ARE DERIVED FROM SGUNNVC AND TRANSMITTED TO
.*  STAGE 2.
.*
.*  OUTPUTS ARE PUNCHED MACRO STATEMENTS OF THE FOLLOWING FORM:
.*
.*       ONE SGIEF014 FOR EACH UNIT NAME TO BE KNOWN TO THE SYSTEM,
.*           WITH TYP PARAM INDICATING TYPE OF  NAME.
.*           (ALL GENERICS ARE PROCESSED BEFORE ESOTERICS AND THE
.*           ORDER THEY APPEAR ON SGIEF014 STATEMENTS BECOMES THE
.*           INSTALLATION GENERIC PRECEDENCE.)
.*
.*       ONE SGIEF019 FOR EACH NAME SPECIFIED BY USER AS VAM-ELIGIBLE.
.*
.*       ONE SGIEF015 FOR EACH GENERATED NAME/GENERIC ELIGIBILITY.
.*           TYP=L FOR ESOTERICS (CURRENTLY ONLY SYSALLDA).
.*           TYP=GG FOR GENERATED TAPE NAMES.
.*           TYP=X FOR EXPANDED ELIGIBILITY TO TAPE NAMES NATIVE TO
.*           SYSTEM.
.**********************************************************************
         AGO   .P0       CALL PRECEDENCE GENERATOR.
.MAIN20  ANOP
         AGO   .P100     CALL GENERIC GENERATOR.
.MAIN40  ANOP
         AGO   .GE100    PROCESS GEN'ED  ESOTERICS AND EXPANDED GENRICS
.MAIN50  ANOP
         AGO   .V100     PROCESS VAM.
.MAIN60  ANOP
         MEXIT
.*
.*
.*
.*
.*
.*    PASS USER-DEFINED GENERIC PRECEDENCE TO STAGE 2
.P0      ANOP
&I       SETA  0
.P1      ANOP
&I       SETA  &I+1
         AIF   (&I GT 30).P2
         AIF   ('&SGSCHVC(&I)'  EQ  '').P2
 PUNCH ' SGIEF014  TYP=G,&SGSCHVC(&I)'
         AGO   .P1
.*
.*    PASS IBM DEFAULT PRECEDENCE TO STAGE 2
.*
.P2      ANOP
         SGIEF216
.*                                                             @YM08650
.* INCLUDE DUMMY DEVICE GENERICS IN PRECEDENCE TABLE           @YM08650
.*                                                             @YM08650
&A       SETA  &DUMMY                                          @YM08650
.NEXTDUM AIF   (&A EQ 0).ENDDUM                                @YM08650
 PUNCH ' SGIEF014  TYP=G,DMY&A'                                @YM08650
&A       SETA  &A-1                                            @YM08650
         AGO   .NEXTDUM                                        @YM08650
.ENDDUM  ANOP                                                  @YM08650
         AGO   .MAIN20
.*
.*
.*     PROCESS  GENERATED GENERICS AND ESOTERICS
.*
.P100    ANOP
&I       SETA  0
.P101    ANOP                                PUNCH MACRO
&I       SETA   &I+1                           CALL FOR
         AIF   (&I GT &SGCNTRA(4)).P102         ALL ESOTERIC
 PUNCH ' SGIEF014  TYP=E,&SGUNNMC(&I)'            NAMES
         AGO   .P101                                ***
.P102    ANOP                                                  @G64IPSJ
.*
.*                                                             @G64IPSJ
.*  THIS SECTION OF CODE SCANS THE DEVICE INFORMATION TABLES   @G64IPSJ
.*  (DIT) FOR ENTRIES THAT ARE COMPATIBLE WITH                 @G64IPSJ
.*  OTHER DEVICE TYPES. IF THESE UPWARD COMPATIBLE TYPES ARE   @G64IPSJ
.*  SYSGENED, THE CURRENT DEVICE-TYPE IS GENERATED AND         @G64IPSJ
.*  CONTAINS ENTRIES FOR THE COMPATIBLE DEVICE TYPES. THE      @G64IPSJ
.*  INFORMATION IS SAVED AND USED LATER IN THIS ROUTINE FOR    @G64IPSJ
.*  COMPATIBLE DEVICE PROCESSING.                              @G64IPSJ
.*                                                             @G64IPSJ
&A       SETA  0                       INITIALIZE INDEX        @G64IPSJ
&CMPTIND SETA  1                       INITIALIZE INDEX        @G64IPSJ
.P201    ANOP                          LOOP TO SCAN DIT        @G64IPSJ
&A       SETA  &A+1                    INCREMENT INDEX         @G64IPSJ
         AIF   (&A GT &SGDITDA).P202   IF NO MORE DIT ENTRIES  @G64IPSJ
.*                                       EXIT                  @G64IPSJ
&NUMBENT SETA  K'&SGGCTXC(&A)/3        FIND NUMBER OF COMPATS  @G64IPSJ
         AIF   (&NUMBENT LE 0).P201    IF NO COMPATS, CONTINUE @G64IPSJ
&COMPATS(&CMPTIND) SETA &A+&NUMBENT*X'10000'                   @G64IPSJ
.*                                     PUT CURRENT ID IN RIGHT @G64IPSJ
.*                                     HALF AND NUMBER OF      @G64IPSJ
.*                                     COMPATIBLE TYPES IN     @G64IPSJ
.*                                     LEFT HALF OF ELEMENT    @G64IPSJ
&I       SETA  0                       INITIALIZE SCAN INDEX   @G64IPSJ
&GENERB  SETB  0                       INITIALIZE SCAN INDEX   @G64IPSJ
&WORKSTR SETC  '&SGGCTXC(&A)'          MOVE ID TO WORK AREA    @G64IPSJ
.P301     ANOP                         LOOP TO LOCATE COMPATS  @G64IPSJ
&I       SETA  &I+1                    INCREMENT SCAN INDEX    @G64IPSJ
         AIF   (&I GT &NUMBENT).P302   IF NO MORE, EXIT LOOP   @G64IPSJ
&TEMPVAL SETC  '&WORKSTR'(&I*3-2,3)    OBTAIN COMPAT ID        @G64IPSJ
&K       SETA  &TEMPVAL                CONVERT TO HEX          @G64IPSJ
&COMPATS(&CMPTIND+&I) SETA &K          SAVE CONVERTED VALUE    @G64IPSJ
         AIF   (NOT &SGGENDB(&K)).P301 IF COMPAT NOT GENED,    @G64IPSJ
.*                                     GET NEXT ENTRY          @G64IPSJ
&GENERB  SETB  1                       IF COMPAT TYPE SYSGENED @G64IPSJ
.*                                     SET GENERATE SWITCH ON  @G64IPSJ
         AGO   .P301                   CONTINUE TO LOCATE      @G64IPSJ
.*                                       COMPATS               @G64IPSJ
.P302    ANOP                          EXIT FOR LOCATE COMPATS @G64IPSJ
         AIF   (NOT &GENERB OR &SGGENDB(&A)).P304    IF NO     @G64IPSJ
.*                                     COMPATS GENERATED OR    @G64IPSJ
.*                                     ALREADY GENERATED,      @G64IPSJ
.*                                     TRY NEXT ENTRY          @G64IPSJ
.*                                     OBTAIN GENERATED ID     @G64IPSJ
         PUNCH ' SGIEF014  TYP=GG,&SGGNRIC(&A),X''&SGDTYPC(&A)'''
.*                                     PUNCH CALL FOR          @G64IPSJ
.*                                     GENERATED DEVICE ID     @G64IPSJ
&I       SETA  0                       INITIALIZE INDEX        @G64IPSJ
.P303    ANOP                          LOOP FOR COMPAT PUNCH   @G64IPSJ
&I       SETA  &I+1                                            @G64IPSJ
         AIF   (&I GT &NUMBENT).P304   IF NO NORE COMPATS,     @G64IPSJ
.*                                       EXIT                  @G64IPSJ
&G       SETA  &COMPATS(&CMPTIND+&I)   OBTAIN COMPATIBLE DEV   @G64IPSJ
.*                                       DIT INDEX             @G64IPSJ
         AIF   (NOT &SGGENDB(&G)).P303 IF COMPAT NOT GENED,    @G64IPSJ
.*                                     GET NEXT ENTRY          @G64IPSJ
         PUNCH ' SGIEF015 TYP=GG,N=0,G=&G '                    @G64IPSJ
.*                                     PUNCH COMPATIBLE DEV    @G64IPSJ
.*                                       INFORMATION           @G64IPSJ
         AGO   .P303                   CONTINUE TO COMPAT      @G64IPSJ
.*                                       PUNCH                 @G64IPSJ
.P304    ANOP                          EXIT FOR COMPAT PUNCH   @G64IPSJ
&CMPTIND SETA  &CMPTIND+&NUMBENT+1     UP DATE COMPATS INDEX   @G64IPSJ
         AGO   .P201                   LOOP TO SCAN DIT        @G64IPSJ
.P202    ANOP                          EXIT FOR SCAN DIT       @G64IPSJ
.*   ALL GENERATED GENERICS PROCESSED
.*
         AGO   .MAIN40
.*
.*   TELL STAGE 2 ALL GENERIC ASSOCIATIONS OF THE 'SYSALLDA' NAME
.*
.*
.GE100   ANOP
&I       SETA  0
.GE101   ANOP
&I       SETA  &I+1
         AIF   (&I GT &SGDITDA).GX100  IF NO MORE DIT ENTRIES  @G64IPSJ
.*                                       EXIT                  @G64IPSJ
         AIF   ('&SGDTYPC(&I)' EQ '').GE101 IF NULL, GET NEXT  @G64IPSJ
&WORKSTR SETC  '&SGDTYPC(&I)'          MOVE DEV TYPE TO WORK   @G64IPSJ
&DEVCLS  SETC  '&WORKSTR'(5,2)         OBTAIN CLASS OF DEVICE  @G64IPSJ
         AIF   ('&DEVCLS' NE '20').GE101 IF NOT DA CLASS,      @G64IPSJ
.*                                       GET NEXT DEV TYPE     @G64IPSJ
         PUNCH ' SGIEF015 TYP=L,N=SYSALLDA,G=&I '              @G64IPSJ
.*                                     PUNCH IN FOR SYSALLDA   @G64IPSJ
         AGO   .GE101                  LOOP TO NEXT DIT ENTRY  @G64IPSJ
.**********************************************************************
.*  ANY OTHER IBM-GENERATED ESOTERICS SHOULD BE GEN'ED HERE           *
.*  BY PUNCHING  015'S TYP=L  AS FOR SYSALLDA.   G IS DEVICE TYPE AS  *
.*  STORED IN  SGDADRA BOXES.                                         *
.**********************************************************************
.*                                                             @G64IPSJ
.*  THIS SECTION OF CODE PUNCHS THE DATA FOR GENERIC TYPES     @G64IPSJ
.*  THAT ALLOWS SUBSTITUTION OF NON-NATIVE DEVICE TYPES.       @G64IPSJ
.*  THE DATA WAS COMPILED BY THE GENRATED GENERIC ROUTINE      @G64IPSJ
.*  AND SAVED IN LOCAL DATA AREAS                              @G64IPSJ
.*                                                             @G64IPSJ
.GX100   ANOP                                                  @G64IPSJ
&A       SETA  1                       INITIALIZE COMPATS IND  @G64IPSJ
.GX101   ANOP                          LOOP FOR COMPATS        @G64IPSJ
         AIF   (&A GE &CMPTIND).GX102  IF NO MORE, EXIT        @G64IPSJ
&NUMBENT SETA  &COMPATS(&A)/X'10000'   OBTAIN NUMBER OF COMPAT @G64IPSJ
&N       SETA  &COMPATS(&A)-&COMPATS(&A)/X'10000'*X'10000'     @G64IPSJ
.*                                     OBTAIN COMPAT ID        @G64IPSJ
         AIF   (NOT &SGGENDB(&N)).GX201 IF NOT GENERATED,      @G64IPSJ
.*                                     DO NOT PROCESS          @G64IPSJ
&I       SETA  0                       INITIALIZE INDEX        @G64IPSJ
.GX200   ANOP                          LOOP FOR SUB-ENTRIES    @G64IPSJ
&I       SETA  &I+1                    INCREMENT INDEX         @G64IPSJ
         AIF   (&I GT &NUMBENT).GX201  IF NO MORE, EXIT        @G64IPSJ
&G       SETA  &COMPATS(&A+&I)         OBTAIN COMPAT ID        @G64IPSJ
         AIF   (NOT &SGGENDB(&G)).GX200 IF COMPAT NOT GENED,   @G64IPSJ
.*                                     GET NEXT ENTRY          @G64IPSJ
         PUNCH ' SGIEF015 TYP=X,N=&N,G=&G '                    @G64IPSJ
.*                                     PUNCH DATA CALL         @G64IPSJ
         AGO   .GX200                  LOOP TO NEXT ENTRY      @G64IPSJ
.GX201   ANOP                          EXIT FOR COMPAT         @G64IPSJ
&A       SETA  &A+&NUMBENT+1           INCREMENT TO NEXT       @G64IPSJ
.*                                       ENTRY SET             @G64IPSJ
         AGO   .GX101                  PROCESS NEXT ENTRY SET  @G64IPSJ
.**********************************************************************
.*                                                                    *
.*  ANY OTHER GENERIC TYPES FOR WHICH IBM ALLOWS SUBSTITUTION         *
.*  OF NON-NATIVE TYPES IN ALLOCATION SHOULD BE GEN'ED HERE BY        *
.*  PUNCHING   SGIEF015 TYP=X  CARDS, ONE FOR EACH SUBSTITUTION       *
.*  ALLOWED.                                                          *
.*                  N  -  IS CODE FOR NATIVE TYPE                     *
.*                  G  -  IS CODE ALTERNATIVE ELIGIBLE TYPE.          *
.*                                                                    *
.*     NOTE=    NEITHER TYPE NEED BE ON SYSTEM TO PUNCH THESE         *
.*              CARDS, IF ABSENCE OF THE TYPE RESULTS IN              *
.*              PUNCHING A ZERO.                                      *
.*                                                                    *
.**********************************************************************
.GX102   ANOP                          EXIT FOR COMPAT LOOP    @G64IPSJ
         AGO   .MAIN50
.V100    ANOP
.*  TRANSMIT VAM-ELIGIBLE NAMES TO STAGE 2
&I       SETA   0
.V101    ANOP
&I       SETA  &I+1
         AIF   ('&SGUNNVC(&I)' EQ '').V102
 PUNCH ' SGIEF019 &SGUNNVC(&I) '
         AGO   .V101
.V102    ANOP
.*                                                                    *
.**********************************************************************
.*       STAGE 2 WILL RESOLVE TYPE OF   NAMES BY SCANNING             *
.*       GLOBALS IN STAGE 2 THAT STORE NAMES.                         *
.*                                                                    *
         AGO   .MAIN60
         MEND                                                         *
         MACRO
         SGIEF215   &DUMMY=                                    @G64IPSJ
.*C001000,002000,049000, A049050-049400                        @YM08650
.*A000000-999999                                                 Y02670
         COPY  SGGBLPAK
         LCLA  &I,&A
         LCLA  &CMPTIND,&NUMBENT,&COMPATS(500),&G,&K,&N        &G64IPSJ
         LCLB  &GENERB                                         &G64IPSJ
         LCLC  &WORKSTR,&DEVCLS,&TEMPVAL                       &G64IPSJ
.**********************************************************************
.*
.*  MACRO - SGIEF215
.*
.*  STATUS - VS2 SYSTEM CONTROL PROGRAM 2                      @G64IPSJ
.*
.*  DESCRIPTION -
.*
.*  THIS MACRO PERFORM ALL SPECIAL-CASE PROCESSING ASSOCIATED WITH
.*  THE EDTTAB. (AS DESCRIBED BELOW)
.*
.*  (SEE CHART 9.1 AND SUBORDINATE CHARTS IN DEVICE ALLOCATION CHARTS)
.*
.*  INPUTS ARE SGSCHVC, SGUNNVC.  PARAMETERS ARE THE GENERIC TYPE CODES
.*  OF TAPE AND DA DEVICES ON THE SYSTEM. POSITIONAL PARAMS ARE
.*  PROVIDED FOR EACH TAPE GENERIC CLASS. THE DATYP KEYWORD PARAM
.*  IS A LIST OF DA TYPE CODES.
.*
.*  THIS MACRO GENERATES TAPE NAMES ACCORDING TO THE PRESENCE OR
.*  ABSENCE OF CERTAIN TAPE TYPES ON SYSTEM. MULTIPLE GENERIC TYPES
.*  ARE MADE ELEGIBLE TO TAPE NAMES UNDER SAME RULES AS NAME
.*  GENERATION.
.*
.*  PRECEDENCE OF GENERIC NAMES IS PROCESSED, USER SPECIFIED NAMES
.*  DERIVED FROM SGSCHVC AND IBM DEFAULT IS OBTAINED VIA SGIEF216 CALL.
.*
.*  VAM ELIGIBLE NAMES ARE DERIVED FROM SGUNNVC AND TRANSMITTED TO
.*  STAGE 2.
.*
.*  OUTPUTS ARE PUNCHED MACRO STATEMENTS OF THE FOLLOWING FORM:
.*
.*       ONE SGIEF014 FOR EACH UNIT NAME TO BE KNOWN TO THE SYSTEM,
.*           WITH TYP PARAM INDICATING TYPE OF  NAME.
.*           (ALL GENERICS ARE PROCESSED BEFORE ESOTERICS AND THE
.*           ORDER THEY APPEAR ON SGIEF014 STATEMENTS BECOMES THE
.*           INSTALLATION GENERIC PRECEDENCE.)
.*
.*       ONE SGIEF019 FOR EACH NAME SPECIFIED BY USER AS VAM-ELIGIBLE.
.*
.*       ONE SGIEF015 FOR EACH GENERATED NAME/GENERIC ELIGIBILITY.
.*           TYP=L FOR ESOTERICS (CURRENTLY ONLY SYSALLDA).
.*           TYP=GG FOR GENERATED TAPE NAMES.
.*           TYP=X FOR EXPANDED ELIGIBILITY TO TAPE NAMES NATIVE TO
.*           SYSTEM.
.**********************************************************************
         AGO   .P0       CALL PRECEDENCE GENERATOR.
.MAIN20  ANOP
         AGO   .P100     CALL GENERIC GENERATOR.
.MAIN40  ANOP
         AGO   .GE100    PROCESS GEN'ED  ESOTERICS AND EXPANDED GENRICS
.MAIN50  ANOP
         AGO   .V100     PROCESS VAM.
.MAIN60  ANOP
         MEXIT
.*
.*
.*
.*
.*
.*    PASS USER-DEFINED GENERIC PRECEDENCE TO STAGE 2
.P0      ANOP
&I       SETA  0
.P1      ANOP
&I       SETA  &I+1
         AIF   (&I GT 30).P2
         AIF   ('&SGSCHVC(&I)'  EQ  '').P2
 PUNCH ' SGIEF014  TYP=G,&SGSCHVC(&I)'
         AGO   .P1
.*
.*    PASS IBM DEFAULT PRECEDENCE TO STAGE 2
.*
.P2      ANOP
         SGIEF216
.*                                                             @YM08650
.* INCLUDE DUMMY DEVICE GENERICS IN PRECEDENCE TABLE           @YM08650
.*                                                             @YM08650
&A       SETA  &DUMMY                                          @YM08650
.NEXTDUM AIF   (&A EQ 0).ENDDUM                                @YM08650
 PUNCH ' SGIEF014  TYP=G,DMY&A'                                @YM08650
&A       SETA  &A-1                                            @YM08650
         AGO   .NEXTDUM                                        @YM08650
.ENDDUM  ANOP                                                  @YM08650
         AGO   .MAIN20
.*
.*
.*     PROCESS  GENERATED GENERICS AND ESOTERICS
.*
.P100    ANOP
&I       SETA  0
.P101    ANOP                                PUNCH MACRO
&I       SETA   &I+1                           CALL FOR
         AIF   (&I GT &SGCNTRA(4)).P102         ALL ESOTERIC
 PUNCH ' SGIEF014  TYP=E,&SGUNNMC(&I)'            NAMES
         AGO   .P101                                ***
.P102    ANOP                                                  @G64IPSJ
.*
.*                                                             @G64IPSJ
.*  THIS SECTION OF CODE SCANS THE DEVICE INFORMATION TABLES   @G64IPSJ
.*  (DIT) FOR ENTRIES THAT ARE COMPATIBLE WITH                 @G64IPSJ
.*  OTHER DEVICE TYPES. IF THESE UPWARD COMPATIBLE TYPES ARE   @G64IPSJ
.*  SYSGENED, THE CURRENT DEVICE-TYPE IS GENERATED AND         @G64IPSJ
.*  CONTAINS ENTRIES FOR THE COMPATIBLE DEVICE TYPES. THE      @G64IPSJ
.*  INFORMATION IS SAVED AND USED LATER IN THIS ROUTINE FOR    @G64IPSJ
.*  COMPATIBLE DEVICE PROCESSING.                              @G64IPSJ
.*                                                             @G64IPSJ
&A       SETA  0                       INITIALIZE INDEX        @G64IPSJ
&CMPTIND SETA  1                       INITIALIZE INDEX        @G64IPSJ
.P201    ANOP                          LOOP TO SCAN DIT        @G64IPSJ
&A       SETA  &A+1                    INCREMENT INDEX         @G64IPSJ
         AIF   (&A GT &SGDITDA).P202   IF NO MORE DIT ENTRIES  @G64IPSJ
.*                                       EXIT                  @G64IPSJ
&NUMBENT SETA  K'&SGGCTXC(&A)/3        FIND NUMBER OF COMPATS  @G64IPSJ
         AIF   (&NUMBENT LE 0).P201    IF NO COMPATS, CONTINUE @G64IPSJ
&COMPATS(&CMPTIND) SETA &A+&NUMBENT*X'10000'                   @G64IPSJ
.*                                     PUT CURRENT ID IN RIGHT @G64IPSJ
.*                                     HALF AND NUMBER OF      @G64IPSJ
.*                                     COMPATIBLE TYPES IN     @G64IPSJ
.*                                     LEFT HALF OF ELEMENT    @G64IPSJ
&I       SETA  0                       INITIALIZE SCAN INDEX   @G64IPSJ
&GENERB  SETB  0                       INITIALIZE SCAN INDEX   @G64IPSJ
&WORKSTR SETC  '&SGGCTXC(&A)'          MOVE ID TO WORK AREA    @G64IPSJ
.P301     ANOP                         LOOP TO LOCATE COMPATS  @G64IPSJ
&I       SETA  &I+1                    INCREMENT SCAN INDEX    @G64IPSJ
         AIF   (&I GT &NUMBENT).P302   IF NO MORE, EXIT LOOP   @G64IPSJ
&TEMPVAL SETC  '&WORKSTR'(&I*3-2,3)    OBTAIN COMPAT ID        @G64IPSJ
&K       SETA  &TEMPVAL                CONVERT TO HEX          @G64IPSJ
&COMPATS(&CMPTIND+&I) SETA &K          SAVE CONVERTED VALUE    @G64IPSJ
         AIF   (NOT &SGGENDB(&K)).P301 IF COMPAT NOT GENED,    @G64IPSJ
.*                                     GET NEXT ENTRY          @G64IPSJ
&GENERB  SETB  1                       IF COMPAT TYPE SYSGENED @G64IPSJ
.*                                     SET GENERATE SWITCH ON  @G64IPSJ
         AGO   .P301                   CONTINUE TO LOCATE      @G64IPSJ
.*                                       COMPATS               @G64IPSJ
.P302    ANOP                          EXIT FOR LOCATE COMPATS @G64IPSJ
         AIF   (NOT &GENERB OR &SGGENDB(&A)).P304    IF NO     @G64IPSJ
.*                                     COMPATS GENERATED OR    @G64IPSJ
.*                                     ALREADY GENERATED,      @G64IPSJ
.*                                     TRY NEXT ENTRY          @G64IPSJ
.*                                     OBTAIN GENERATED ID     @G64IPSJ
         PUNCH ' SGIEF014  TYP=GG,&SGGNRIC(&A),X''&SGDTYPC(&A)'''
.*                                     PUNCH CALL FOR          @G64IPSJ
.*                                     GENERATED DEVICE ID     @G64IPSJ
&I       SETA  0                       INITIALIZE INDEX        @G64IPSJ
.P303    ANOP                          LOOP FOR COMPAT PUNCH   @G64IPSJ
&I       SETA  &I+1                                            @G64IPSJ
         AIF   (&I GT &NUMBENT).P304   IF NO NORE COMPATS,     @G64IPSJ
.*                                       EXIT                  @G64IPSJ
&G       SETA  &COMPATS(&CMPTIND+&I)   OBTAIN COMPATIBLE DEV   @G64IPSJ
.*                                       DIT INDEX             @G64IPSJ
         AIF   (NOT &SGGENDB(&G)).P303 IF COMPAT NOT GENED,    @G64IPSJ
.*                                     GET NEXT ENTRY          @G64IPSJ
         PUNCH ' SGIEF015 TYP=GG,N=0,G=&G '                    @G64IPSJ
.*                                     PUNCH COMPATIBLE DEV    @G64IPSJ
.*                                       INFORMATION           @G64IPSJ
         AGO   .P303                   CONTINUE TO COMPAT      @G64IPSJ
.*                                       PUNCH                 @G64IPSJ
.P304    ANOP                          EXIT FOR COMPAT PUNCH   @G64IPSJ
&CMPTIND SETA  &CMPTIND+&NUMBENT+1     UP DATE COMPATS INDEX   @G64IPSJ
         AGO   .P201                   LOOP TO SCAN DIT        @G64IPSJ
.P202    ANOP                          EXIT FOR SCAN DIT       @G64IPSJ
.*   ALL GENERATED GENERICS PROCESSED
.*
         AGO   .MAIN40
.*
.*   TELL STAGE 2 ALL GENERIC ASSOCIATIONS OF THE 'SYSALLDA' NAME
.*
.*
.GE100   ANOP
&I       SETA  0
.GE101   ANOP
&I       SETA  &I+1
         AIF   (&I GT &SGDITDA).GX100  IF NO MORE DIT ENTRIES  @G64IPSJ
.*                                       EXIT                  @G64IPSJ
         AIF   ('&SGDTYPC(&I)' EQ '').GE101 IF NULL, GET NEXT  @G64IPSJ
&WORKSTR SETC  '&SGDTYPC(&I)'          MOVE DEV TYPE TO WORK   @G64IPSJ
&DEVCLS  SETC  '&WORKSTR'(5,2)         OBTAIN CLASS OF DEVICE  @G64IPSJ
         AIF   ('&DEVCLS' NE '20').GE101 IF NOT DA CLASS,      @G64IPSJ
.*                                       GET NEXT DEV TYPE     @G64IPSJ
         PUNCH ' SGIEF015 TYP=L,N=SYSALLDA,G=&I '              @G64IPSJ
.*                                     PUNCH IN FOR SYSALLDA   @G64IPSJ
         AGO   .GE101                  LOOP TO NEXT DIT ENTRY  @G64IPSJ
.**********************************************************************
.*  ANY OTHER IBM-GENERATED ESOTERICS SHOULD BE GEN'ED HERE           *
.*  BY PUNCHING  015'S TYP=L  AS FOR SYSALLDA.   G IS DEVICE TYPE AS  *
.*  STORED IN  SGDADRA BOXES.                                         *
.**********************************************************************
.*                                                             @G64IPSJ
.*  THIS SECTION OF CODE PUNCHS THE DATA FOR GENERIC TYPES     @G64IPSJ
.*  THAT ALLOWS SUBSTITUTION OF NON-NATIVE DEVICE TYPES.       @G64IPSJ
.*  THE DATA WAS COMPILED BY THE GENRATED GENERIC ROUTINE      @G64IPSJ
.*  AND SAVED IN LOCAL DATA AREAS                              @G64IPSJ
.*                                                             @G64IPSJ
.GX100   ANOP                                                  @G64IPSJ
&A       SETA  1                       INITIALIZE COMPATS IND  @G64IPSJ
.GX101   ANOP                          LOOP FOR COMPATS        @G64IPSJ
         AIF   (&A GE &CMPTIND).GX102  IF NO MORE, EXIT        @G64IPSJ
&NUMBENT SETA  &COMPATS(&A)/X'10000'   OBTAIN NUMBER OF COMPAT @G64IPSJ
&N       SETA  &COMPATS(&A)-&COMPATS(&A)/X'10000'*X'10000'     @G64IPSJ
.*                                     OBTAIN COMPAT ID        @G64IPSJ
         AIF   (NOT &SGGENDB(&N)).GX201 IF NOT GENERATED,      @G64IPSJ
.*                                     DO NOT PROCESS          @G64IPSJ
&I       SETA  0                       INITIALIZE INDEX        @G64IPSJ
.GX200   ANOP                          LOOP FOR SUB-ENTRIES    @G64IPSJ
&I       SETA  &I+1                    INCREMENT INDEX         @G64IPSJ
         AIF   (&I GT &NUMBENT).GX201  IF NO MORE, EXIT        @G64IPSJ
&G       SETA  &COMPATS(&A+&I)         OBTAIN COMPAT ID        @G64IPSJ
         AIF   (NOT &SGGENDB(&G)).GX200 IF COMPAT NOT GENED,   @G64IPSJ
.*                                     GET NEXT ENTRY          @G64IPSJ
         PUNCH ' SGIEF015 TYP=X,N=&N,G=&G '                    @G64IPSJ
.*                                     PUNCH DATA CALL         @G64IPSJ
         AGO   .GX200                  LOOP TO NEXT ENTRY      @G64IPSJ
.GX201   ANOP                          EXIT FOR COMPAT         @G64IPSJ
&A       SETA  &A+&NUMBENT+1           INCREMENT TO NEXT       @G64IPSJ
.*                                       ENTRY SET             @G64IPSJ
         AGO   .GX101                  PROCESS NEXT ENTRY SET  @G64IPSJ
.**********************************************************************
.*                                                                    *
.*  ANY OTHER GENERIC TYPES FOR WHICH IBM ALLOWS SUBSTITUTION         *
.*  OF NON-NATIVE TYPES IN ALLOCATION SHOULD BE GEN'ED HERE BY        *
.*  PUNCHING   SGIEF015 TYP=X  CARDS, ONE FOR EACH SUBSTITUTION       *
.*  ALLOWED.                                                          *
.*                  N  -  IS CODE FOR NATIVE TYPE                     *
.*                  G  -  IS CODE ALTERNATIVE ELIGIBLE TYPE.          *
.*                                                                    *
.*     NOTE=    NEITHER TYPE NEED BE ON SYSTEM TO PUNCH THESE         *
.*              CARDS, IF ABSENCE OF THE TYPE RESULTS IN              *
.*              PUNCHING A ZERO.                                      *
.*                                                                    *
.**********************************************************************
.GX102   ANOP                          EXIT FOR COMPAT LOOP    @G64IPSJ
         AGO   .MAIN50
.V100    ANOP
.*  TRANSMIT VAM-ELIGIBLE NAMES TO STAGE 2
&I       SETA   0
.V101    ANOP
&I       SETA  &I+1
         AIF   ('&SGUNNVC(&I)' EQ '').V102
 PUNCH ' SGIEF019 &SGUNNVC(&I) '
         AGO   .V101
.V102    ANOP
.*                                                                    *
.**********************************************************************
.*       STAGE 2 WILL RESOLVE TYPE OF   NAMES BY SCANNING             *
.*       GLOBALS IN STAGE 2 THAT STORE NAMES.                         *
.*                                                                    *
         AGO   .MAIN60
         MEND                                                         *
