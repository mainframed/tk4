*
* CHANGE ACTIVITY - MODIFIED FOR @Z30RSTA
*
* OZ69930 - NUCSIZ INCORRECT FOR 3791 AND DUMMY UCB'S          @ZA69930
* OZ69984 - OPCHAN NOT GENERATED FOR TP CLASS DEVICES          @ZA69984
*
*                STATUS = OS/VS2 FBB1221                       @ZA69930
         MACRO
    SGIEC202
         COPY  SGGBLPAK
         LCLA  &SCR,&T,&M,&K,&J,&I,&SLCHS,&LCHN,&SYSRES,&GS GRAF
         LCLA  &LCHCNT,&LCHTAB,&LCHSTOT,&COUNTB,&UCBAD,&STATAB @G64HPLP
         LCLA  &MPXCNT,&ACOUNT,&CHIND,&ALTLIST(1792)           @G64HPLP
         LCLA  &UCBNO,&FL5,&CPRFX,&LCHTOT                      @G64HPLP
         LCLA  &NCU,&NUA,&OCU,&OUA,&ASEQNO,&NUCSIZ             @G64HPLP
         LCLA  &NCHAN,&OCHAN,&INDX,&AINDX,&CUINDX              @G64HPLP
         LCLA  &COMPNO1,&COMPNO2,&DEVNDX,&SAVECU,&CH(16)       @G64HPLP
         LCLA  &STATLST(10),&STCNT,&WKIDX,&CHCT(15),&LCHST,&STEMPY
         LCLA  &PCUINDX,&ZSCNT,&EXTINDX                        @G64HPLP
         LCLA  &ANR,&CTC,&SHRUP                                @G64HPLP
         LCLA  &OPTNS,&FLP1                                    @G64HPLP
         LCLA  &DITX                                           @G64HPLP
         LCLB  &OFF,&TSHR,&EXTCHAN                             @G64HPLP
         LCLB  &SSCH(15),&HSALT(16),&HSPRIM1(3),&HSPRIM2(3)    @G64HPLP
         LCLB  &HSPRIM3(3),&SSTCH2,&SSTCH3
         LCLB  &LASTCH,&TCHAP                                  @G64HPLP
         LCLB  &MCRDR                                          @G64HPLP
         LCLB  &LSTDEV,&S1(240),&S2(240),&S3(240),&S4(240)
         LCLB  &LCHAP1(15),&LCHAP2(15),&LCHAP3(15),&LCHAP4(15)
         LCLB  &LCHAP5(15),&LCHAP6(15),&TYPESW,&NCHANSW,&NCUSW,&EOALTS
         LCLB  &LCHAP7(15),&LCHAP8(15),&LCHAP9(15),&LCHAP10(15)
         LCLB  &LCHAP11(15),&LCHAP12(15),&LCHAP13(15),&LCHAP14(15)
         LCLB  &LCHAP15(15),&LCHAP16(15)
         LCLB  &CUNEG,&CNEG,&ALTSW,&IRSW                       @G64HPLP
         LCLB  &ACTLSW,&NCHSW,&LSTMAC,&GR                      @G64HPLP
         LCLB  &SK1(240),&SK2(240),&SK3(240),&SK4(240)
         LCLB  &SM,&S9,&S12                                    @ZM30494
         LCLC  &DEVAD,&TYPE,&TYPEA,&ERRTAB,&C,&D               @G64HPLP
         LCLC  &DEVADE,&ZUSBAS
         LCLC  &WCGMNO                                         @Y40MPLG
         ACTR  250000                   MAX NO.                @ZA15707
&NUCSIZ  SETA  4096                     SET TO LARGEST LOG OUT AREA
         AIF   (&SGCHANB(1)).ALTINIT    TEST FOR CHAN 0 PRESNT @G64HPLP
&NCHSW SETB 1
&NCHANSW SETB  1                        SET NEW CHANNEL SWITCH
.ALTINIT ANOP                           ROUTINE TO CHECK ATERNATE ADDRE
&INDX    SETA  1                        INITIALIZE INDEX
.**********************************************************************
.*                                                                    *
.*   THIS ROUTINE SETS UP A LIST OF PSUEDO DEVICE ADDRESSES FOR ALTER-*
.*   NATE CHANNEL PATHES,TO BE ENTERED IN THE UCB LOOK UP TABLE       *
.*                                                                    *
.**********************************************************************
&AINDX   SETA  1                       INITIALIZE ALTERNATE INDEX
&INDX    SETA  1                       INITIALIZE DEVICE INDEX
&EXTINDX SETA  1                       INITIALIZE EXTEN. DEVICE INDEX
.ALTLOOP ANOP
&COUNTB  SETA  &SGDASPA(&INDX)          SET DEVICE INDEX       @ZA15707
.*                                      LINE DELETED           @ZA69984
&COMPNO1 SETA  &SGDADRA(&INDX)-&SGDADRA(&INDX)/4096*4096 GET ADDR
&COMPNO2 SETA  &COMPNO1-4096*(&COMPNO1/4096) CLEAR HIGH ORDER
&NCHAN   SETA  &COMPNO2/256             GET CHAN ADDR
         AIF   (NOT &SGCHANB(&NCHAN*15+4)).NOSSALT     HSMPX TEST
.**********************************************************************
.*                                                                    *
.*   TEST FOR ANY ALTERNATE SUB-SELECTOR CHANNEL PATHS TO DEVICE      *
.*                                                                    *
.**********************************************************************
         AIF   (NOT &SGDAP2B(&COUNTB)).HSAP3 TEST FOR 'D' ALT.
&ALTLIST(&AINDX) SETA &INDX*4096+(&SGDADRA(&INDX)-&SGDADRA(&INDX)/16*16*
               )+&NCHAN*256+208         GET 'D' ALT ADDRESS
&AINDX   SETA  &AINDX+1                 UPDATE ALT INDEX
&HSALT(&NCHAN+1) SETB 1                 SET MULTIPLE LCH ON CHAN
.HSAP3   AIF   (NOT &SGDAP3B(&COUNTB)).HSAP4 TEST FOR 'E' ALT.
&ALTLIST(&AINDX) SETA &INDX*4096+(&SGDADRA(&INDX)-&SGDADRA(&INDX)/16*16*
               )+&NCHAN*256+224         GET 'E' ALT ADDRESS
&AINDX   SETA  &AINDX+1                 UPDATE ALT INDEX
&HSALT(&NCHAN+1) SETB 1                 SET MULTIPLE LCH ON CHAN
.HSAP4   AIF   (NOT &SGDAP4B(&COUNTB)).LSTALT TEST FOR 'F' ALT.
&ALTLIST(&AINDX) SETA &INDX*4096+(&SGDADRA(&INDX)-&SGDADRA(&INDX)/16*16*
               )+&NCHAN*256+240         GET 'F' ALT ADDRESS
&AINDX   SETA  &AINDX+1                 UPDATE ALT INDEX
&HSALT(&NCHAN+1) SETB 1                 SET MULTIPLE LCH ON CHAN
         AGO   .LSTALT                  BRANCH AROUND
.NOSSALT ANOP
         AIF   (NOT &SGDAP1B(&COUNTB)).EXAMAP2  IS THERE A CH 1 ALTER.
&ALTLIST(&AINDX) SETA &INDX*4096+(&SGDADRA(&INDX)-&SGDADRA(&INDX)/256*2*
               56)+X'100'   SET UCB SEQ NUM AND ALTERNATE ADDRESS
&AINDX   SETA  &AINDX+1                UPDATE ALTERNATE INDEX
.EXAMAP2 AIF   (NOT &SGDAP2B(&COUNTB)).EXAMAP3  NO CH 2-CHECK FOR 3
&ALTLIST(&AINDX) SETA &INDX*4096+(&SGDADRA(&INDX)-&SGDADRA(&INDX)/256*2*
               56)+X'200'   YES-SET UP UCB NUMBER AND ALTERNATE ADDR.
&AINDX   SETA  &AINDX+1                UPDATE ALT. INDEX
.EXAMAP3 AIF   (NOT &SGDAP3B(&COUNTB)).EXAMAP4  NO CH 3-CHECK FOR 4
&ALTLIST(&AINDX) SETA &INDX*4096+(&SGDADRA(&INDX)-&SGDADRA(&INDX)/256*2*
               56)+X'300'   YES SET CH3 ALT ADDR AND UCB NUM.
&AINDX   SETA  &AINDX+1                UPDATE ALT. INDEX
.EXAMAP4 AIF   (NOT &SGDAP4B(&COUNTB)).EXAMAP5  NO CH 4-CHECK FOR 5
&ALTLIST(&AINDX) SETA &INDX*4096+(&SGDADRA(&INDX)-&SGDADRA(&INDX)/256*2*
               56)+X'400'    YES-SET ALT-ADDR AND UCB NUMBER
&AINDX   SETA  &AINDX+1                UPDATE ALT. INDEX
.EXAMAP5 AIF   (NOT &SGDAP5B(&COUNTB)).EXAMAP6  NO CH 5-CHECK FOR 6
&ALTLIST(&AINDX) SETA &INDX*4096+(&SGDADRA(&INDX)-&SGDADRA(&INDX)/256*2*
               56)+X'500'    YES- SET ALT ADDR AND UCB NUMB.
&AINDX   SETA  &AINDX+1                UPDATE ALT INDEX
.EXAMAP6 AIF   (NOT &SGDAP6B(&COUNTB)).EXAMAP7    NO CH 6-CHECK FOR 7
&ALTLIST(&AINDX) SETA &INDX*4096+(&SGDADRA(&INDX)-&SGDADRA(&INDX)/256*2*
               56)+X'600'    YES-SET ALT.ADDR AND UCB NUMBER
&AINDX   SETA  &AINDX+1                UPDATE ALT. INDEX
.EXAMAP7 AIF   (NOT &SGDAP7B(&COUNTB)).EXAMAP8  NO CH 7-CHECK IF 8
&ALTLIST(&AINDX) SETA &INDX*4096+(&SGDADRA(&INDX)-&SGDADRA(&INDX)/256*2*
               56)+X'700'     YES-SET ALT. ADDR AND UCB NUMBER
&AINDX   SETA  &AINDX+1                 UPDATE ALT. INDEX
.EXAMAP8 AIF   (NOT &SGDAP8B(&COUNTB)).EXAMAP9    NO CH 8-CHECK FOR 9
&ALTLIST(&AINDX) SETA &INDX*4096+(&SGDADRA(&INDX)-&SGDADRA(&INDX)/256*2*
               56)+X'800'     YES-SET ALT. ADDR AND UCB NUMBER
&AINDX   SETA  &AINDX+1                 UPDATE ALT. INDEX
.EXAMAP9 AIF   (NOT &SGDAP9B(&COUNTB)).EXAMAPA    NO CH 9-CHECK FOR 10
&ALTLIST(&AINDX) SETA &INDX*4096+(&SGDADRA(&INDX)-&SGDADRA(&INDX)/256*2*
               56)+X'900'     YES-SET ALT. ADDR AND UCB NUMBER
&AINDX   SETA  &AINDX+1                 UPDATE ALT. INDEX
.EXAMAPA AIF   (NOT &SGDAPAB(&COUNTB)).EXAMAPB   NO CH 10-CHECK FOR 11
&ALTLIST(&AINDX) SETA &INDX*4096+(&SGDADRA(&INDX)-&SGDADRA(&INDX)/256*2*
               56)+X'A00'     YES-SET ALT. ADDR AND UCB NUMBER
&AINDX   SETA  &AINDX+1                 UPDATE ALT. INDEX
.EXAMAPB AIF   (NOT &SGDAPBB(&COUNTB)).EXAMAPC   NO CH 11-CHECK FOR 12
&ALTLIST(&AINDX) SETA &INDX*4096+(&SGDADRA(&INDX)-&SGDADRA(&INDX)/256*2*
               56)+X'B00'     YES-SET ALT. ADDR AND UCB NUMBER
&AINDX   SETA  &AINDX+1                 UPDATE ALT. INDEX
.EXAMAPC AIF   (NOT &SGDAPCB(&COUNTB)).EXAMAPD   NO CH 12-CHECK FOR 13
&ALTLIST(&AINDX) SETA &INDX*4096+(&SGDADRA(&INDX)-&SGDADRA(&INDX)/256*2*
               56)+X'C00'     YES-SET ALT. ADDR AND UCB NUMBER
&AINDX   SETA  &AINDX+1                 UPDATE ALT. INDEX
.EXAMAPD AIF   (NOT &SGDAPDB(&COUNTB)).EXAMAPE   NO CH 13-CHECK FOR 14
&ALTLIST(&AINDX) SETA &INDX*4096+(&SGDADRA(&INDX)-&SGDADRA(&INDX)/256*2*
               56)+X'D00'     YES-SET ALT. ADDR AND UCB NUMBER
&AINDX   SETA  &AINDX+1                 UPDATE ALT. INDEX
.EXAMAPE AIF   (NOT &SGDAPEB(&COUNTB)).EXAMAPF   NO CH 14-CHECK FOR 15
&ALTLIST(&AINDX) SETA &INDX*4096+(&SGDADRA(&INDX)-&SGDADRA(&INDX)/256*2*
               56)+X'E00'     YES-SET ALT. ADDR AND UCB NUMBER
&AINDX   SETA  &AINDX+1                 UPDATE ALT. INDEX
.EXAMAPF AIF   (NOT &SGDAPFB(&COUNTB)).LSTALT    LAST CHECK
&ALTLIST(&AINDX) SETA &INDX*4096+(&SGDADRA(&INDX)-&SGDADRA(&INDX)/256*2*
               56)+X'F00'     YES-SET ALT. ADDR AND UCB NUMBER
&AINDX   SETA  &AINDX+1                 UPDATE ALT. INDEX
.LSTALT  AIF   (&EXTCHAN).N7CHN      TEST FOR HI-CHAN SET
&CHIND   SETA  8                        SET CHAN COUNT
         AIF   (&AINDX LT 2).N7ALT      TEST FOR NO ALTS
  AIF  (&ALTLIST(&AINDX-1)-&ALTLIST(&AINDX-1)/4096*4096 GT 1791).P7CHN
.N7ALT   AIF   (&NCHAN LT 7).N7CHN      TEST FOR +7CHAN ADDR
.P7CHN   ANOP
&EXTCHAN SETB 1                        SET INDICATOR
&CHIND   SETA  30              SET CHAN INDEX FOR +7 CHAN
.N7CHN   ANOP
&INDX    SETA  &INDX+1                 UPDATE DEVICE INDEX
         AIF   (&INDX LE &SGCNTRA(3)).ALTLOOP  LAST NO-CONYINUE LOOP
&EOALTS  SETB  (&AINDX EQ 1)           NO ALTERNATE PATHS SET SWITCH
&ACOUNT  SETA  &AINDX-1                SETUP COUNBT UP ALTERNATES
&INDX    SETA  1                       REINITIALIZE
&AINDX   SETA  1                                   INDEX
.L1      AIF   (&ACOUNT LT 2 OR &ACOUNT GT 1917).INITIAL       @ZA15707
&M       SETA  &ACOUNT                 GET NUMBER OF ALTERNATE ADDRS
.L2      AIF   (&M/2 LE 0).INITIAL     OUT-ALL ALTS SORTED
&M       SETA  &M/2  SET INDEX TO OFFSET FOR SECOND ALTER. ADDR
&K       SETA  &ACOUNT-&M              SET FOR END OF PASS CHK
&J       SETA  1                       SET OUR INDEX VALUE
.L3      ANOP      RETURN TO CONTINUE PASS AT SANE INCREMENT
&I       SETA  &J                      SET INDEX TO FIRST ADDR
.L4      AIF   (&ALTLIST(&I)-&ALTLIST(&I)/4096*4096 LT &ALTLIST(&I+&M)-1
               &ALTLIST(&I+&M)/4096*4096).L5  TRANSFER-ADDRS ORDRED
         AIF   (&ALTLIST(&I)-&ALTLIST(&I)/4096*4096 EQ &ALTLIST(&I+&M)-1
               &ALTLIST(&I+&M)/4096*4096).ABIOEND  ADDRESSES = ERROR
&T       SETA  &ALTLIST(&I)            ADDRESSES OUT OF ORDER
&ALTLIST(&I) SETA &ALTLIST(&I+&M)   SAVE FIRST ADDR AND PUT SECIND
&ALTLIST(&I+&M) SETA &T   ADDR IN FIRST - THEN PUT FIRST IN SEVOND
&I       SETA  &I-&M     RESET INNER INDEX TO MOVW ADDR. FARTHER BACK
         AIF   (&I GE 1).L4   TRANSFER TO MOVE ADDRESS FURTHER BACK
.L5      AIF   (&J+1 GT &K).L2         XFER FOR ANOTHHER PASS
&J       SETA  &J+1                    SET OUTER IND%X BY ONE
         AGO   .L3    TRXFER TO CONT. PASS AT SAME INCRENENT
.**********************************************************************
.*                                                                    *
.*                 INITIALIZATION ROUTINE                             *
.*                                                                    *
.**********************************************************************
.INITIAL ANOP
         AIF   (&SGCNTRA(3) EQ 0).ERROR CHECK FOR ZERO COUNT
&INDX    SETA  1                        RESET INDEX
&WKIDX   SETA  1                        INITIALIZE WORK AREA INDEX TWBS
&AINDX   SETA  1                        RESET ALTERNATE INDEX
&CUINDX  SETA 0                         INITIALIZE CONTROL INIT INDEX
&SAVECU  SETA  257                      CONTROL UNIT COMPARE
&DEVNDX  SETA  0                        NUMBER OF DEVICES/CU
&STATAB  SETA  2                        INITIALIZE STATAB INDEX
&STCNT   SETA  1                        INITIALIZE STAT COUNT
&MPXCNT  SETA 1                        INITIALIZE UCBADD COUNT
&I       SETA  1                       INITIALIZE TCH COUNT
&J       SETA  1                       INITIALIZE CHANNEL SETCH CNT
&K       SETA  1                       INITIALIZE LCH MOD COIUT
&M       SETA  1                       INITIALIZE CHANN COUNT
&T       SETA  1                       INITIALIZE CU COUNT
&SGCTRLC(6)  SETC   'IEAASU00'
.**********************************************************************
.*         COPY  SGASMPAK AND PUNCH EXTERNS AND ENTRY POINTS          *
.**********************************************************************
         COPY  SGASMPAK
         PUNCH '   IHAPSA  DSECT=NO'
         PUNCH '         EJECT'
         PUNCH '         EXTRN IEEBA1'
         PUNCH '         EXTRN IEFDPOST'
         PUNCH '         ENTRY IECRCTBL,IECVATTN,IECVSGT'
         PUNCH '         ENTRY IECILK1,IECILK2,IECSTB,IECVCCWS'
         PUNCH '         ENTRY IECVLCH,IECILCH,IECVSLCH'
         PUNCH '         ENTRY IECVUCBM'                        YM2366P
         PUNCH '         ACTR  10000      SET STAGE2 CTR'      @ZA15707
         PUNCH '          AGO    .UCB1    TO FIRST UCB   '
.**********************************************************************
.*                                                                    *
.*             THE FOLLOWING SETS UP PARAMETERS FOR THE UCB           *
.*                                                                    *
.**********************************************************************
.DEVLOOP ANOP
&STATAB  SETA  &STATAB-&STATAB/256*256  GET 1 BYTE INDEX
         AIF   (&STATAB NE 0).NEXTST                           @YM04859
&STATAB  SETA  &STATAB+1           INSURE ONLY DA HAVE 0       @YM04859
.NEXTST  ANOP
&COUNTB SETA  &SGDASPA(&INDX)           SET DEVICE INDEX       @ZA15707
&DITX   SETA  &SGDITXA(&COUNTB)         DIT INDEX FOR DEVICE   @G64HPLP
         AIF   (K'&SGDDTMC(&DITX) GT 0).DDTOK0 DDT NAME ?      @G64HPLP
.*ISSUE MNOTE AND SET QUIT SWITCH SINCE DDT NAME IS REQUIRED   @G64HPLP
         MNOTE 12,'***IEIIEC202-DDT NAME FOR DIT ENTRY &DITX NOT SPECIF*
               IED'                                            @G64HPLP
&SGQUITB SETB  1                       SET QUIT SWITCH         @G64HPLP
.DDTOK0  ANOP                                                  @G64HPLP
         AIF (&SGUSNSA(&DITX) LT 41).DDTOK1 IF THE NUMBER OF   @G64HPLP
         MNOTE 12,'***IEIIEC202-NUMBER OF SENSE BYTES FOR THIS DEVICE  *
               EXCEEDS 40 BYTES. SYSGEN TERMINATED.'           @G64HPLP
&SGQUITB SETB  1                       SET QUIT SWITCH         @G64HPLP
.DDTOK1  ANOP                                                  @G64HPLP
&PCUINDX  SETA  (&SGDADRA(&INDX)-&SGDADRA(&INDX)/1048576*1048576)/4096
.**********************************************************************
.*                                                                    *
.*             THE ABOVE SETS THE CU INDEX FOR GRAPHICS               *
.*                                                                    *
.**********************************************************************
&UCBNO   SETA  &INDX                   SET UCB LABEL NUMBER
.**********************************************************************
.*                                                                    *
.*       UCB LOOKUP GOES HERE                                         *
.*       THE FOLLOWING COMPUTES THE ALLOCATION CHAN. MASK             *
.*                ***   THE FOLLOWING ROUTINE COMPARES ALTERNATE TO ***
.*                *** NEXT ACTUAL DEVICE ADDRESS                    ***
.*                                                                    *
.**********************************************************************
.LUSTRT  AIF   (&LSTMAC AND &EOALTS).COUT  ALT CHKS ALL DONE
         AIF   (&LSTMAC).ALTA          CONTINUE WITH ALTERNTES
         AIF   (&EOALTS).SKIPCHK       NO MORE ALTS.-SKIP CHECK
         AIF   (&SGDADRA(&INDX)-&SGDADRA(&INDX)/4096*4096 GT &ALTLIST(&*
               AINDX)-&ALTLIST(&AINDX)/4096*4096).ALTA
.SKIPCHK ANOP
&COMPNO1 SETA  &SGDADRA(&INDX)-&SGDADRA(&INDX)/4096*4096
.**********************************************************************
.*                                                                    *
.*              THIS SECTION SETS UP THE SYMBOLIC DEVICE ADDRESS      *
.*                                                                    *
.**********************************************************************
        CONVERT TO=EBCDIC,VALUE=&COMPNO1,DIGITS=3
&DEVAD   SETC  '&EBCDIC'              SET UP DEVICE ADDRESS
&DEVADE  SETC  '&DEVAD'                 SET CHAR ADDRESS
&ALTSW   SETB  0                       SET ALTERNATE RUN SWITCH
         AGO   .COMPUTE
.ALTA    ANOP
&COMPNO1 SETA  &ALTLIST(&AINDX)-&ALTLIST(&AINDX)/4096*4096  BREAK OUTUA
&ASEQNO  SETA  &ALTLIST(&AINDX)/4096
&ALTSW   SETB  1                       ALTERNATE DEVICE SWOTCH OM
&EOALTS  SETB  (&AINDX EQ &ACOUNT)     SET LAST ALTERNAT PROCESSED SW.
&AINDX   SETA  &AINDX+1                UPDATE ALTERNATE INDEX
.COMPUTE ANOP
&COMPNO2 SETA  &COMPNO1-4096*(&COMPNO1/4096)    CLEAR HIGH ORD BYTE
.**********************************************************************
.*                                                                    *
.*              COMPUTE CHANNEL ADDRESS                               *
.*                                                                    *
.**********************************************************************
&NCHAN   SETA  &COMPNO2/256            EXTRACT CHANNEL ADDRESS
&NCU     SETA  (&COMPNO2-&NCHAN*256)/16   EXTRACT CNTRL UNIT ADDR
&NUA     SETA  &COMPNO2-(&NCHAN*256+&NCU*16)     EXTRACT UNIT ADDR
.**********************************************************************
.*                                                                    *
.*               ***   THE FOLLOWING ROUTINE COMPUTES CHANNEL INDEX ***
.*               *** FACTORS AND INSERTS THEM IN A MODEL STATMENT   ***
.*               *** TO BE PROCESSED AT PASS TWO OF SYSGEN          ***
.*                                                                    *
.**********************************************************************
         AIF   (&NCHAN GT &OCHAN).NCHRTN   'NEW CHAN. AD HIGH-TO NEW RT
         AIF   (&NCHAN LT &OCHAN).ORDERR    LOW-TO OUT OF ORDER ERROR
         AIF   (&IRSW EQ 0).NCHRTN          INITIAL TIME-TO NEW RTN
         AIF   (&NCU GT &OCU).NCURTN        NEW CU-TO CU INDX UPDATE
         AIF   (&NCU LT &OCU).ORDERR        LOW- OUT OF ORDER
         AIF   (&NUA GT &OUA).UAUDTE        NEW UA- TO UPDATE
         AGO   .ORDERR                      EQUAL OR LOW UA.-ERROR
.UAUDTE  AIF   (&ALTSW EQ 1).ALTPR      ALTERNATE PATH-USE ASEQNO
&ACTLSW  SETB  1
&UCBAD   SETA  &INDX                   SET NEW UCB NUMBER
         AIF   (&MPXCNT NE 1).UCBLAB    CHECK FOR FIRST UCB LOOK UP
.**********************************************************************
.*                     IECILK2                                        *
.**********************************************************************
         PUNCH '.LST&MPXCNT ANOP   UCB LOOKUP ENTRY '
         PUNCH 'LIST     DS    0H       THIS IS THE LIST OF UCB ADDS'
         PUNCH 'IECILK2  DS    0C'     SET UP LOOK UP LABELS
&MPXCNT  SETA  &MPXCNT+1                UPDATE COUNTER
         PUNCH '         AGO   .LST&MPXCNT    '
.UCBLAB  ANOP
.**********************************************************************
.*                            IECULK3                                 *
.**********************************************************************
 PUNCH '.LST&MPXCNT IECULK3 &OUA,&NUA,&UCBAD,&NCUSW,&CUINDX,&LSTDEV,&NC*
               HAN,&NCU,&CUNEG'
&MPXCNT  SETA  &MPXCNT+1               UPDATE UCBADD COUNT
         PUNCH '         AGO   .LST&MPXCNT    TO NEXT UCB ADD ENTRY   '
&OUA     SETA  &NUA                         UPDATE OLD UNIT ADDR
         AIF   (&CHIND GE 0).CKCUN     CHECK FOR NEG CHAN INDEX
&CHIND   SETA  0                       IF NEG. SET TO ZRO
.CKCUN   AIF   (&CUINDX GE 0).COMPARE  CHECK FOR NEG CU IND%X
&CUINDX  SETA  0                       IF NEG. SET TO ZEERO
         AGO   .COMPARE                ??   RETURN TO COMPARE(MAYBE)
.ALTPR   ANOP
&UCBAD   SETA  &ASEQNO                 SET UCB NUM. FOR THIS ALTERNATE
.**********************************************************************
.*                            IECULK3                                 *
.**********************************************************************
 PUNCH '.LST&MPXCNT IECULK3 &OUA,&NUA,&UCBAD,&NCUSW,&CUINDX,&LSTDEV,&NC*
               HAN,&NCU,&CUNEG'
&MPXCNT  SETA  &MPXCNT+1               UPDATE UCBADD COUNT
         PUNCH '         AGO   .LST&MPXCNT    TO NEXT UCB ADD ENTRY   '
&OUA     SETA  &NUA                     UPDATE OLD UNIT ADDRESDS
&NCHANSW SETB  0                       RESET NEW CHANNEL SWITCH
&NCUSW   SETB  0                       RESET NEW CONTROL UNIT SWITCH
         AIF   (&CHIND GE 0).CKCUN1    CHECK FOR NEG CHAN NDX
&CHIND   SETA  0                       IF NEG. SET TO ZERO
.CKCUN1  AIF   (&CUINDX GE 0).LUSTRT   CHECK FOR CU INDEX NEG.
&CUINDX  SETA  0                       IF NEG. SET TO ZERO
         AGO   .LUSTRT                      RETURN TO COMPARE
.**********************************************************************
.*                                                                    *
.*                     NEW CHANNEL ROUTINE                            *
.*                                                                    *
.**********************************************************************
.NCHRTN  AIF   (&IRSW EQ 0).NCHCON      FIRST TIME NO UPDATE TO CHAN ID
&CHIND   SETA  &CHIND+1
&LCHCNT  SETA  1
         AIF   (NOT &SGCHANB(&OCHAN*15+2)).SELCH1 TEST FOR MPX
&CH(&OCHAN+1)  SETA  1                  SET MPX TYPE FOR CHANNEL TABLE
&SLCHS   SETA  1                        YES THEN ONLY ONE LCH
         AIF   (&OCHAN NE 0).NOTCH0
.**********************************************************************
.*                            IECICS                                  *
.**********************************************************************
         PUNCH '.SRCH&J  ANOP         CHAN SEARCH FOR MPX'
         PUNCH '    IECICS &OCHAN '
&J       SETA  &J+1                    UPDATE CSRCH MOD COUNT
         PUNCH '         AGO   .SRCH&J     TO NEXT SEARCH '
.NOTCH0  ANOP
&TYPESW  SETB  0                        SET CHAN/TYPE TO MPXLER
&LCHTOT  SETA  &LCHTOT+&SLCHS           UPDATE TOTAL OF LCS
&LCHSTOT SETA  0                       REINITIALIZE SUBTOTAL OF LCHS
         AIF   (NOT &LSTMAC).NLST       TEST FOR LAST DEVICE
&LASTCH  SETB  1                        SET IND IF LAST
.NLST    ANOP
.**********************************************************************
.*                            IECXTCH                                 *
.**********************************************************************
         PUNCH '.TCH&I   ANOP       TCH FOR MPX'
         PUNCH '         IECXTCH &LCHTOT,0,&OCHAN'
&I       SETA  &I+1                    UPDATE TCH MOD COUNT
         PUNCH '         AGO   .TCH&I     TO NEXT TXH'
         AIF   (&OCHAN NE 0).SKPTCH     IF NOT CH0 DO ICS
         AGO   .REINIT                 TO REINITIALIZE COUNTD
.**********************************************************************
.*                                                                    *
.*             THE FOLLOWING IS THE MACRO INST TO BUILD LCHWRDS       *
.*                                                                    *
.**********************************************************************
.SELCH1  AIF   (NOT &SGCHANB(&OCHAN*15+4)).NOTHSPA     TEST FOR HSMPX
         AIF   (&HSALT(&OCHAN+1)).TOTSET     TEST FOR MULTIPLE LCH
&LCHSTOT SETA  1                      YES, SET ON LCH
.TOTSET  ANOP
&CH(&OCHAN+1)  SETA  2                  SET HSMPX TYPE FOR CHAN TABLE
         AGO   .TSTCHAN
.NOTHSPA AIF    (&SGCHANB(&OCHAN*15+6)).BLKMPXR       TEST FOR BLKMPXR
&CH(&OCHAN+1)  SETA  3                  SET SEL TYPE FOR CHANNEL TABLE
         AGO   .TSTCHAN
.BLKMPXR ANOP
&CH(&OCHAN+1)  SETA  4                  SET BLKMPX TYPE FOR CHAN TABLE
.TSTCHAN ANOP
.**********************************************************************
.*                                                                    *
.*       THIS BUILDS THE PARAMETERS FOR TST CHANNEL CODE MACRO        *
.*                                                                    *
.**********************************************************************
&TYPESW  SETB  (NOT &SGCHANB(&OCHAN*15+4))   SET SEL. MODE IF NOT HSMPX
&LCHCNT  SETA  1
         AIF   (NOT &ACTLSW).SKPTCH
         PUNCH   '.TCH&I    ANOP   TEST CHANNEL  '                 ANOP
.TCHLOOP ANOP
&LCHTAB  SETA  &LCHTOT+&LCHCNT         SET LCH NUMBER
         AIF   (NOT &LSTMAC).TCHLP1     TEST FOR LAST ACTUAL DEV
         AIF   (&LCHCNT+1 LE &LCHSTOT).TCHLP1     TEST FOR LAST PASS
&LASTCH  SETB  1                        SET LAST TCH SWITCH
.TCHLP1  ANOP
         AIF   (NOT &HSALT(&OCHAN+1)).NHTCH TEST CHAN FOR ALT PATH
         AIF   (&OCHAN EQ 0).CH0        WAS IT CHANNEL '0'
&SSCH(&OCHAN) SETB 1                    SET CHANNEL INDICATOR
.**********************************************************************
.*                                                                    *
.*   REINITIALIZE AND SET UP PRIMARY AND ALTERNATE SS PATHS
.*                                                                    *
.**********************************************************************
.CH0     ANOP
&SSTCH2  SETB  0
&SSTCH3  SETB  0
         AIF   (NOT &HSPRIM2(&LCHCNT) AND NOT &LCHAP2(&LCHCNT)).STCH
.**********************************************************************
.*                                                                    *
.*             SET SWITCH IF 'D' IS PRIMARY OR ALTERNATE              *
.*                                                                    *
.**********************************************************************
&SSTCH2  SETB  1                        SET SWITCH
.STCH    AIF   (NOT &HSPRIM3(&LCHCNT) AND NOT &LCHAP3(&LCHCNT)).STCH1
.**********************************************************************
.*                                                                    *
.*             SET SWITCH IF 'E' IS PRIMARY OR ALTERNATE              *
.*                                                                    *
.**********************************************************************
&SSTCH3  SETB  1                        SET SWITCH
.STCH1   ANOP
.**********************************************************************
.*                            IECXTCH                                 *
.**********************************************************************
 PUNCH ' IECXTCH &LCHTAB,&TYPESW,(&SSCH(1),&SSCH(2),&SSCH(3),&SSCH(4),&*
               SSCH(5),&SSCH(6)),(&HSPRIM1(&LCHCNT),&SSTCH2,&SSTCH3,&LC*
               HAP4(&LCHCNT))'
.**********************************************************************
.*                                                                    *
.*             CLEAR THE  PRIMARY SWITCHES FOR THIS LCH               *
.*                                                                    *
.**********************************************************************
&HSPRIM1(&LCHCNT)  SETB  0              CLEAR PRIMARY SW1
&HSPRIM2(&LCHCNT)  SETB  0              CLEAR PRIMARY SW2
&HSPRIM3(&LCHCNT)  SETB  0              CLEAR PRIMARY SW3
         AIF   (&OCHAN EQ 0).BYPSEL
&SSCH(&OCHAN) SETB 0                    CLEAR SWITCH
         AGO   .BYPSEL                  BRANCH AROUND
.NHTCH   ANOP                                                  @G64HPLP
.**********************************************************************
.*                            IECXTCH                                 *
.**********************************************************************
         PUNCH '    IECXTCH &LCHTAB,&TYPESW,(&LCHAP1(&LCHCNT),&LCHAP2(&*
               LCHCNT),&LCHAP3(&LCHCNT),&LCHAP4(&LCHCNT),&LCHAP5(&LCHCN*
               T),                                           *****'
 PUNCH '               &LCHAP6(&LCHCNT),&LCHAP7(&LCHCNT),&LCHAP8(&LCHCN*
               T),&LCHAP9(&LCHCNT),&LCHAP10(&LCHCNT),&LCHAP11(&LCHCNT),*
                                                         ******'
 PUNCH '               &LCHAP12(&LCHCNT),&LCHAP13(&LCHCNT),&LCHAP14(&LC*
               HCNT),&LCHAP15(&LCHCNT))'
         AIF   (&LCHAP1(&LCHCNT) EQ 0).CHCT2 TEST FOR AP ON 1
&CHCT(1) SETA  &CHCT(1)+1               UPDATE COUNTER FOR CHAN1
.CHCT2   AIF   (&LCHAP2(&LCHCNT) EQ 0).CHCT3 TEST FOR AP ON 2
&CHCT(2) SETA  &CHCT(2)+1               UPDATE COUNTER FOR CHAN 2
.CHCT3   AIF   (&LCHAP3(&LCHCNT) EQ 0).CHCT4 TEST FOR AP ON 3
&CHCT(3) SETA  &CHCT(3)+1               UPDATE COUNTER FOR CHAN 3
.CHCT4   AIF   (&LCHAP4(&LCHCNT) EQ 0).CHCT5 TEST FOR AP ON 4
&CHCT(4) SETA  &CHCT(4)+1               UPDATE COUNTER FOR CHAN 4
.CHCT5   AIF   (&LCHAP5(&LCHCNT) EQ 0).CHCT6 TEST FOR AP ON 5
&CHCT(5) SETA  &CHCT(5)+1               UPDATE COUNTER FOR CHAN 5
.CHCT6   AIF   (&LCHAP6(&LCHCNT) EQ 0).CHCT7
&CHCT(6) SETA  &CHCT(6)+1               UPDATE COUNTER FOR CHAN 6
.CHCT7   AIF   (&LCHAP7(&LCHCNT) EQ 0).CHCT8
&CHCT(7) SETA  &CHCT(7)+1
.CHCT8   AIF   (&LCHAP8(&LCHCNT) EQ 0).CHCT9
&CHCT(8) SETA  &CHCT(8)+1
.CHCT9   AIF   (&LCHAP9(&LCHCNT) EQ 0).CHCT10
&CHCT(9) SETA  &CHCT(9)+1
.CHCT10  AIF   (&LCHAP10(&LCHCNT) EQ 0).CHCT11
&CHCT(10) SETA &CHCT(10)+1
.CHCT11  AIF   (&LCHAP11(&LCHCNT) EQ 0).CHCT12
&CHCT(11) SETA &CHCT(11)+1
.CHCT12  AIF   (&LCHAP12(&LCHCNT) EQ 0).CHCT13
&CHCT(12) SETA &CHCT(12)+1
.CHCT13  AIF   (&LCHAP13(&LCHCNT) EQ 0).CHCT14
&CHCT(13) SETA &CHCT(13)+1
.CHCT14  AIF   (&LCHAP14(&LCHCNT) EQ 0).CHCT15
&CHCT(14) SETA &CHCT(14)+1
.CHCT15  AIF   (&LCHAP15(&LCHCNT) EQ 0).BYPSEL
&CHCT(15) SETA &CHCT(15)+1
.BYPSEL  ANOP
&LCHAP1(&LCHCNT)  SETB  0               CLEAR SWITCH
&LCHAP2(&LCHCNT)  SETB  0               CLEAR SWITCH
&LCHAP3(&LCHCNT)  SETB  0               CLEAR SWITCH
&LCHAP4(&LCHCNT)  SETB  0               CLEAR SWITCH
&LCHAP5(&LCHCNT)  SETB  0               CLEAR SWITCH
&LCHAP6(&LCHCNT)  SETB  0               CLEAR SWITCH
&LCHAP7(&LCHCNT) SETB  0                CLEAR SWITCH
&LCHAP8(&LCHCNT) SETB  0                CLEAR SWITCH
&LCHAP9(&LCHCNT) SETB  0                CLEAR SWITCH
&LCHAP10(&LCHCNT) SETB 0                CLEAR SWITCH
&LCHAP11(&LCHCNT) SETB 0                CLEAR SWITCH
&LCHAP12(&LCHCNT) SETB 0                CLEAR SWITCH
&LCHAP13(&LCHCNT) SETB 0                CLEAR SWITCH
&LCHAP14(&LCHCNT) SETB 0                CLEAR SWITCH
&LCHAP15(&LCHCNT) SETB 0                CLEAR SWITCH
&LCHCNT  SETA  &LCHCNT+1                UPDATE INDEX
         AIF   (&LCHCNT LE &LCHSTOT).TCHLOOP GO BACK IF NOT LAST
&I       SETA  &I+1                    UPDATE TCH COUNTER
         PUNCH '         AGO   .TCH&I      TO NEXT TCH MOD'
&ACTLSW  SETB  0
.SKPTCH  ANOP
.**********************************************************************
.*                                                                    *
.*   THIS IS THE MACRO INSTRUCTION FOR CHANNEL SEARCH/1 PER CHAN      *
.*   THE FOLLOWING LOOP IS USED TO COMPUTE THE PARAMETERS FOR CHAN SCH*
.*                                                                    *
.**********************************************************************
&LCHCNT  SETA  1                       RESET COMMON COUNTER
.**********************************************************************
.*                            IECICS                                  *
.**********************************************************************
         PUNCH '.SRCH&J  ANOP       CHANNEL SEARCH MOD&J'
         PUNCH '               IECICS &OCHAN,                          *
                               **********'
         AIF   (NOT &HSALT(&OCHAN+1)).NHCS   TEST FOR HSMPX ALT
         PUNCH '               (&LCHTOT,                               *
                               ********'
&LCHCNT  SETA  1                        REINITIALIZE COUNTER
.HSCSLP1 PUNCH '               1,0,                                    *
                               *'
&LCHCNT  SETA  &LCHCNT+1                UPDATE COUNTER
         AIF   (&LCHCNT LE &LCHSTOT).HSCSLP1 TEST FOR END
         AGO   .CSEND
.NHCS    ANOP
         AIF   (&OCHAN EQ 0).CSP0
         AIF   (NOT &SGCHANB(&OCHAN*15+2)).CSP01
&LCHTOT  SETA  &LCHTOT-1                ADJ FOR MPX
         AGO   .CSP0
.CSP01   ANOP
&LCHST   SETA  0                        CLEAR START COUNT
.CS0     AIF   (&OCHAN GT 3).CS1        TEST FOR S1
&SLCHS   SETA  &OCHAN*60+&LCHTOT+&LCHSTOT    GET COUNT OF LCH'S
&LCHCNT  SETA  &OCHAN*60+1+&LCHST       GET START POINTER
         AIF   (&S1(&LCHCNT)).PCHST     GO PUNCH IF BIT SET
&LCHST   SETA  &LCHST+1                 UPDATE START COUNT
         AGO   .CS0                     GO TEST NEXT BIT
.CS1     AIF   (&OCHAN GT 7).CS2        TEST FOR S2
&SLCHS   SETA  (&OCHAN-4)*60+&LCHTOT+&LCHSTOT   GET COUNT OF LCH'S
&LCHCNT  SETA  (&OCHAN-4)*60+1+&LCHST   GET START POINTER
         AIF   (&S2(&LCHCNT)).PCHST     GO PUNCH IF BIT SET
&LCHST   SETA  &LCHST+1                 UPDATE START COUNT
         AGO   .CS1                     GO TEST NEXT BIT
.CS2     AIF   (&OCHAN GT 11).CS3       TEST FOR S3
&SLCHS   SETA  (&OCHAN-8)*60+&LCHTOT+&LCHSTOT     GET COUNT OF LCH'
&LCHCNT  SETA  (&OCHAN-8)*60+1+&LCHST   GET START POINTER
         AIF   (&S3(&LCHCNT)).PCHST     GO PUNCH IF BIT SET
&LCHST   SETA  &LCHST+1                 UPDATE START COUNT
         AGO   .CS2                     GO TEST NEXT BIT
.CS3     ANOP
&SLCHS   SETA  (&OCHAN-12)*60+&LCHTOT+&LCHSTOT  GET COUNT OF LCH'S
&LCHCNT  SETA  (&OCHAN-12)*60+1+&LCHST  GET START POINTER
         AIF   (&S4(&LCHCNT)).PCHST     GO PUNCH IF BIT SET
&LCHST   SETA  &LCHST+1                 UPDATE START COUNT
         AGO   .CS3                     GO TEST NEXT BIT
.PCHST   PUNCH '               (&LCHST,                                *
                                ********'
         AGO   .STARTA                  GO TEST FOR SWITCH
.CSP1    PUNCH '               &S1(&LCHCNT),&SK1(&LCHCNT),             *
                                                      *'
         AGO   .LCHUP
.CSP2    PUNCH '               &S2(&LCHCNT),&SK2(&LCHCNT),             *
                                                      *'
         AGO   .LCHUP
.CSP3    PUNCH '               &S3(&LCHCNT),&SK3(&LCHCNT),             *
                                                      *'
         AGO   .LCHUP
.CSP4    PUNCH '               &S4(&LCHCNT),&SK4(&LCHCNT),             *
                                                      *'
.LCHUP ANOP
&LCHCNT  SETA  &LCHCNT+1                UPDATE POINTER
         AIF   (&LCHCNT GT &SLCHS).CSEND     TEST FOR LAST
.STARTA  AIF   (&OCHAN LT 4).CSP1       TEST FOR SWITCH 1
         AIF   (&OCHAN LT 8).CSP2
         AIF   (&OCHAN LT 12).CSP3
         AGO   .CSP4
.CSP0    ANOP
         PUNCH '               (&LCHTOT,                               *
                               ********'
         PUNCH '               1,0,                                    *
                               *'
         AIF   (NOT &SGCHANB(&OCHAN*15+2)).CSEND    MPX?
&LCHTOT  SETA  &LCHTOT+&SLCHS           UPDATE TOTAL OF LCHS
.CSEND   ANOP
&SLCHS   SETA  0                        CLEAR SWITCH
&LCHCNT  SETA  &LCHCNT-1               REDUCE LCHCNT TO ACTUAL  COUNT
  PUNCH '               &LSTDEV) '
&J       SETA  &J+1                    UPDATE CHAN SRCH COUNTER
         PUNCH '         AGO   .SRCH&J     TO NEXT CHAN SRCH MOD'
.REINIT  ANOP                          REINITIALIZE LCH COUNTS
.*             REMOVE SET B - SET NEW CHANNEL SWITCH
&SLCHS   SETA  0                        CLEAR MPX SWITCH
&NCHSW   SETB  1                       SET UP LCH NEW CH ANNEL SW
&LCHCNT  SETA  1                       INITIALIZE COUNT
&LCHTOT  SETA  &LCHTOT+&LCHSTOT        UPDATE LCH TOTAL
&LCHSTOT SETA  0
&ACTLSW  SETB  0
        AIF   (&LSTDEV).LSTMAC         LAST DEVUCE TO END ROUTINR
.NCHCON  ANOP
&CHIND   SETA &OCU+&CHIND-&NCU   COMP. NEW INDEX AND INSERT
&CNEG    SETB  (&CHIND LT 0)           SET INDEX MINUS SWITCH
.**********************************************************************
.*                            IECULK1                                 *
.**********************************************************************
         PUNCH '.TAB&M   ANOP         LOOK UP UCB TAB'
         AIF   (&M NE 1).LSTLAB        CHECK FOR FIRST CHAN ENTRY
         PUNCH 'UCBTAB   DS    0C         THIS IS THE LOOK UP TAB'
         PUNCH 'IECILK1  DS    0C'   SET UP LOOK UP TAB LABEL
.LSTLAB PUNCH ' IECULK1 &CHIND,&OCHAN,&NCHAN,&LSTDEV,&CNEG,&IRSW,&EXTCH*
               AN'
&M       SETA  &M+1                    UPDATE CHANNEL COUNT
         PUNCH '         AGO   .TAB&M     TO NEXT CHANNEL ENTRY'
&OCHAN   SETA  &NCHAN                  UPDATE OLD CHANNEL ADDR.
&NCHANSW SETB  1                   SET NEW CHANNEL
.NCURTN  AIF   (&IRSW EQ 0).NCUCON      INITIAL RUN NEW CONTROL UNIT
&CUINDX  SETA  &CUINDX+2               AUTO UPDATE OF CU INDEX
.NCUCON  ANOP
&CUINDX  SETA  (2*&OUA)-(2*&NUA)+&CUINDX      NEW CNTRL UNIT INDEX
&CUNEG   SETB  (&CUINDX LT 0)          SET CU INDEX MUNUS SWITCH
.**********************************************************************
.*                            IECULK2                                 *
.**********************************************************************
   PUNCH '.TCU&T   IECULK2 &CUINDX,&OCU,&NCU,&CHIND,&NCHANSW,&CNEG,&CUN*
               EG'
&T       SETA  &T+1                    UPDATE CU MOD COUNT
         PUNCH '         AGO   .TCU&T       TO NEXT ENTRY'
&NCUSW   SETB  1                       SET NEW CONTROL UNIT SWITCH
&OCU     SETA  &NCU                    UPDATE CURRENT CU ADDRESS
         AGO   .UAUDTE
.*
.COMPARE ANOP
.*  SKIP THIS CODE FOR NEW DEVICE SINCE INFO IS IN DFT         @G64HPLP
         AIF   (&SGINTFB(&DITX)).ALTCHPT NEW DEV.              @G64HPLP
.**********************************************************************
.*                                                             @Y40MPLG
.*   COMPUTE THE VALUE FOR &FLP1 WHICH SETS UP THE FLAG        @Y40MPLG
.*     BYTE UCBFLP1.                                           @Y40MPLG
.*     BIT X'04' - DEVICE HAS ERROR LOGGING BUFFER.            @Y40MPLG
.**********************************************************************
&FLP1    SETA  0                   INITIALIZE                  @Y40MPLG
         AIF   (NOT &SGDF10B(&COUNTB)).COMPAR1    ERROR LOG?   @G30HNLO
&FLP1    SETA  &FLP1+4             SET ERROR LOG FLAG          @Y40MPLG
.*                                                             @Y40MPLG
.COMPAR1 ANOP                                                  @Y40MPLG
.**********************************************************************
.*                                                                    *
.*   COMPUTE THE VALUE FOR &FL5 NEEDED TO INDICATE THE DASD           *
.*     CHARACTERISTICS  - NEEDS STAND ALONE SEEK                      *
.*                      - DISCONNECT COMMAND CHAINING DEVICE          *
.*                      - ENVIRONMENTAL DATA PRESENT                  *
.*                                                                    *
.**********************************************************************
         AIF   (NOT &SGDT03B(&COUNTB)).FL502  CHECK FOR DASD
         AIF   (&SGDU06B(&COUNTB)).FL501      IT'S DASD, IS IT 2314
&FL5     SETA  136                 NO, SET DCC,ENVIRONMENTAL DATA
         AGO   .FL502
.FL501   ANOP
&FL5     SETA  32                  2314, SET SAS
.FL502   ANOP
.**********************************************************************
.*       THIS SECTION TESTS FOR ALTERNATE CHANNEL PATHS
.**********************************************************************
.ALTCHPT ANOP                                                  @ZA69984
         AIF   (&SGDAP7B(&COUNTB) OR &SGDAP8B(&COUNTB) OR &SGDAP9B(&COU*
               NTB) OR &SGDAPAB(&COUNTB) OR &SGDAPBB(&COUNTB)).ALOC7
         AIF   (&SGDAPCB(&COUNTB) OR &SGDAPDB(&COUNTB) OR &SGDAPEB(&COU*
               NTB) OR &SGDAPFB(&COUNTB)).ALOC7   TEST FOR + 7 ALT I267
         AIF   (NOT &SGDAP1B(&COUNTB) AND NOT &SGDAP2B(&COUNTB) AND NOT*
                &SGDAP3B(&COUNTB) AND NOT &SGDAP4B(&COUNTB) AND NOT &SG*
               DAP5B(&COUNTB) AND NOT &SGDAP6B(&COUNTB)).SACHMSK
.ALOC7   ANOP
&FL5     SETA  &FL5+1                  YES,ADD ALT. BIT TO ALOC-CH-MSK
         AIF   (&SGCHANB(&NCHAN*15+4)).SACHMSK    TEST FOR HSMPX
&TCHAP   SETB  1                        SET ALTERNATE INDICATOR
.SACHMSK ANOP
.*  SKIP THIS CODE FOR NEW DEVICE SINCE INFO IS IN DFT         @G64HPLP
         AIF   (&SGINTFB(&DITX)).CDEVTB  NEW DEV INTERFACE ?   @G64HPLP
         AIF   (NOT &SGDT01B(&COUNTB)).DATSTA   IS IT A TAPE MAG/PAPER
         AIF   (&SGDU01B(&COUNTB)).NORMTRP  2400?
&TYPE    SETC  'AT'                  SET NEW TAPE TYPE
         AGO   .CDEVTB                   GO CHECK QUEING
.NORMTRP ANOP
&TYPE    SETC  'TA'                    SET TYPE TO TAPE
         AGO   .CDEVTB                 TO TEST FOR QUEUEING OPTIONS
.DATSTA  AIF   (NOT &SGDT03B(&COUNTB)).TPTST   IS IT DIR/ACC
         AIF   (&SGDU06B(&COUNTB)).T2314 TEST FOR 2314
         AIF   (&SGDU08B(&COUNTB)).ZS  TEST FOR 2305
.*                                                             @Z30RSTA
&TYPE    SETC  'ML'                     SET TYPE TO 3330,3340,3350
         AGO   .CDEVTB
.ZS      ANOP                           2305
&TYPE    SETC  'ZS'                     SET TYPE TO ZEUS
         AGO   .CDEVTB
.T2314   ANOP                           NOT DRUM MUST BE DISK
&TYPE    SETC  'DA'                     YES-SET D/A TYPE
         AIF   (&SGUNF5B(&COUNTB)).SETDS
         AIF   (NOT &SGDF02B(&COUNTB)).CDEVTB
.SETDS   ANOP
&TYPE    SETC  'DS'
         AGO   .CDEVTB
.TPTST   AIF   (&SGDT08B(&COUNTB) OR &SGDT12B(&COUNTB) OR              *
               &SGDT09B(&COUNTB)).TPTSTX
         AIF   (NOT &SGDT02B(&COUNTB)).GRDEV NOT OPT RDR OR TP
.**********************************************************************
.*                                                                    *
.*             TEST FOR OPTICAL READER                                *
.*                                                                    *
.**********************************************************************
         AIF   (&SGDAD1B(&COUNTB) OR &SGDAD8B(&COUNTB)).TPTSTX
         AIF   (&SGDU01B(&COUNTB) OR &SGDU02B(&COUNTB) OR &SGDU03B(&COU*
               NTB)).UNREC              TEST FOR TP
.TPTSTX  ANOP
&TYPE    SETC  'TP'                     SET T/P FOR DCV TAB
         AGO   .CDEVTB
.GRDEV   AIF   (NOT &SGDT05B(&COUNTB)).UNREC   TEST FOR GRAPHIC
&TYPE    SETC  'GR'                     SET GR CODE FOR DEVICE TABLE
&GR      SETB  1                        SET IECIOS PARAM FOR GRAPHICS
         AGO   .CDEVTB
.UNREC   AIF   (NOT &SGDUMMY(&COUNTB)).UNREC2      NOT DUMMY
&TYPE    SETC  'DUM'                    SET TYPE TO DUMMY
         AGO   .CDEVTB
.UNREC2  ANOP                           ALL OTHERS UR
         AIF   (NOT &SGDT06B(&COUNTB) OR NOT (&SGDU06B(&COUNTB) OR &SGD*
               U07B(&COUNTB) OR &SGDU10B(&COUNTB)                      *
               OR &SGDU09B(&COUNTB))).UNREC3                   @G30HNLO
&TYPE    SETC  'WR'                     SET TYPE TO PRINTER
         AGO   .CDEVTB
.UNREC3  ANOP
         AIF   (NOT &SGDT07B(&COUNTB) OR NOT(&SGDU08B(&COUNTB) OR &SGDU*
               09B(&COUNTB))).UNREC4
&TYPE    SETC  'WR'                        SET TYPE TO NEW UR
         AGO   .CDEVTB
.UNREC4  ANOP
&TYPE    SETC  'UR'                    SET TYPE TO UNIT RECORD
.CDEVTB  ANOP
.**********************************************************************
.*                                                                    *
.*      THIS ROUTINE COMPUTES THE LOGICAL CHANNEL INDEX               *
.*                                                                    *
.*          TEST FOR MPLXOR CHAN AND IF SO ARE THERE ANY BURST DEVICS *
.*       LCHWRD COMPUTATION - OUT-PUT IS/PER CHANNEL                  *
.*                                                                    *
.**********************************************************************
.*
.**********************************************************************
.*                                                                    *
.*               TEST FOR MULTIPLEXOR CHANNEL ONLY                    *
.*                                                                    *
.**********************************************************************
&LCHCNT  SETA  1                         RESET CONMON COUNTRE
.**********************************************************************
.*                                                                    *
.*        TEST FOR HI-SPEED MPX AND ALT. PATH/MULT LCH THIS CHANNEL   *
.*                                                                    *
.**********************************************************************
    AIF   (NOT &SGCHANB(&NCHAN*15+4) OR NOT &HSALT(&NCHAN+1)).LCHLOOP
.**********************************************************************
.*                                                                    *
.*        TEST FOR NEW CHANNEL SWITCH ON                              *
.*                                                                    *
.**********************************************************************
         AIF   (NOT &NCHANSW).SSCUTST   NOT ON-GO TEST FOR NEW CU
.**********************************************************************
.*                                                                    *
.*        TEST FOR NON-SUB SELECTOR CHANNEL ON NEW CHANNEL            *
.*                                                                    *
.**********************************************************************
         AIF   ('&DEVAD'(2,1) LT 'C' AND '&DEVAD'(2,1) GT 'F').NOPRIM
         AGO   .HSNLCH                  GO SET UP NEW LCH
.**********************************************************************
.*                                                                    *
.*        TEST FOR NEW CONTROL UNIT                                   *
.*                                                                    *
.**********************************************************************
.SSCUTST AIF   (NOT &NCUSW).HSLCHLP     GO FIND RIGHT LCH
.**********************************************************************
.*                                                                    *
.*        TEST FOR NON-SUB SELECTOR CHANNEL
.*                                                                    *
.**********************************************************************
         AIF   ('&DEVAD'(2,1) LT 'C' AND '&DEVAD'(2,1) GT 'F').LCHSET
.**********************************************************************
.*                                                                    *
.*        IF ALL CONDITIONS EXIST BELOW - THE LCH NUMBER IS SET       *
.*                                                                    *
.**********************************************************************
.HSLCHLP AIF   (&SGDAP2B(&COUNTB) NE &LCHAP2(&LCHCNT)).HSNXLCH
         AIF   (&SGDAP3B(&COUNTB) NE &LCHAP3(&LCHCNT)).HSNXLCH
         AIF   (&SGDAP4B(&COUNTB) NE &LCHAP4(&LCHCNT)).HSNXLCH
         AIF   ('&DEVAD'(2,1) EQ 'C').LCHSET
         AIF   ('&DEVAD'(2,1) NE 'D').CHKE
         AIF   (NOT &HSPRIM2(&LCHCNT) AND (&LCHAP3(&LCHCNT) OR &LCHAP4(*
               &LCHCNT))).HSNXLCH
         AGO   .LCHSET
.CHKE    AIF   ('&DEVAD'(2,1) NE 'E').LCHSET
         AIF   (NOT &HSPRIM3(&LCHCNT) AND &LCHAP4(&LCHCNT)).HSNXLCH
         AGO   .LCHSET
.HSNXLCH ANOP
&LCHCNT  SETA  &LCHCNT+1                UPDATE INDEX
         AIF   (&LCHCNT LE &LCHSTOT).HSLCHLP TEST FOR LAST TEST
.**********************************************************************
.*                                                                    *
.*                THEN - SET UP NEW LCH                               *
.*                                                                    *
.**********************************************************************
.HSNLCH  ANOP
&LCHCNT  SETA  &LCHSTOT+1               UPDATE LCH NUMBER
.**********************************************************************
.*                                                                    *
.*        IF NO ALTERNATES - MUST BE ON MPX LCH
.*        NOW SET THE PRIMARY PATH SWITCH
.*                                                                    *
.**********************************************************************
         AIF   ('&DEVAD'(2,1) NE 'C').PTST1  TEST FOR 'C' PRIMARY
&HSPRIM1(&LCHCNT) SETB 1                SET 'C' PRIME INDICATOR
         AGO   .NOPRIM                  SWITCH SET
.PTST1   AIF   ('&DEVAD'(2,1) NE 'D').PTST2  TEST FOR 'D' PRIMARY
&HSPRIM2(&LCHCNT) SETB 1                SET 'D' PRIMARY INDICATOR
         AGO   .NOPRIM                  SWITCH SET
.PTST2   ANOP
&HSPRIM3(&LCHCNT) SETB 1                SET 'E' PRIMARY INDICATOR
.NOPRIM  ANOP
.**********************************************************************
.*                                                                    *
.*               SET THE ALTERNATE PATH SWITCH                        *
.*                                                                    *
.**********************************************************************
&LCHAP2(&LCHCNT) SETB (&SGDAP2B(&COUNTB))    SET 'D' ALT PATH
&LCHAP3(&LCHCNT) SETB (&SGDAP3B(&COUNTB))    SET 'E' ALT PATH
&LCHAP4(&LCHCNT) SETB (&SGDAP4B(&COUNTB))    SET 'F' ALT PATH
&LCHSTOT SETA  &LCHSTOT+1               UPDATE COUNTER FOR THIS CH
.**********************************************************************
.*                                                                    *
.* THIS COMPUTES AND SAVES LCH INFO FOR SEL CH AND HSMPX NON-ALT PATH *
.*                                                                    *
.**********************************************************************
         AGO   .LCHSET
.LCHLOOP ANOP           THIS COMPUTES AND SAVES NEEDED LCH INFO.
         AIF   (&SGCHANB(&OCHAN*15+2)).MPXLCHA    TEST FOR MPX
         AIF   (&NCHSW).NEWLCH         NEW CHANNEL-INITIALIZE TABLE
         AIF   (&SGDAP1B(&COUNTB) NE &LCHAP1(&LCHCNT) AND &OCHAN NE 1).*
               NXTLCH                    TO CHECK NEXT ENTRY IN TABLE
         AIF   (&SGDAP2B(&COUNTB) NE &LCHAP2(&LCHCNT) AND &OCHAN NE 2).*
               NXTLCH                    TO CHECK NEXT ENTRY IN TABLE
         AIF   (&SGDAP3B(&COUNTB) NE &LCHAP3(&LCHCNT) AND &OCHAN NE 3).*
               NXTLCH                    TO CHECK NEXT ENTRY IN TABLE
         AIF   (&SGDAP4B(&COUNTB) NE &LCHAP4(&LCHCNT) AND &OCHAN NE 4).*
               NXTLCH                    TO CHECK NEXT ENTRY IN TABLE
         AIF   (&SGDAP5B(&COUNTB) NE &LCHAP5(&LCHCNT) AND &OCHAN NE 5).*
               NXTLCH                    TO CHECK NEXT ENTRY IN TABLE
         AIF   (&SGDAP6B(&COUNTB) NE &LCHAP6(&LCHCNT) AND &OCHAN NE 6).*
               NXTLCH                    TO CHECK NEXT ENTRY IN TABLE
         AIF   (&SGDAP7B(&COUNTB) NE &LCHAP7(&LCHCNT) AND &OCHAN NE 7).*
               NXTLCH
         AIF   (&SGDAP8B(&COUNTB) NE &LCHAP8(&LCHCNT) AND &OCHAN NE 8).*
               NXTLCH
         AIF   (&SGDAP9B(&COUNTB) NE &LCHAP9(&LCHCNT) AND &OCHAN NE 9).*
               NXTLCH
         AIF   (&SGDAPAB(&COUNTB) NE &LCHAP10(&LCHCNT) AND &OCHAN NE 10*
               ).NXTLCH
         AIF   (&SGDAPBB(&COUNTB) NE &LCHAP11(&LCHCNT) AND &OCHAN NE 11*
               ).NXTLCH
         AIF   (&SGDAPCB(&COUNTB) NE &LCHAP12(&LCHCNT) AND &OCHAN NE 12*
               ).NXTLCH
         AIF   (&SGDAPDB(&COUNTB) NE &LCHAP13(&LCHCNT) AND &OCHAN NE 13*
               ).NXTLCH
         AIF   (&SGDAPEB(&COUNTB) NE &LCHAP14(&LCHCNT) AND &OCHAN NE 14*
               ).NXTLCH
         AIF   (&SGDAPFB(&COUNTB) NE &LCHAP15(&LCHCNT) AND &OCHAN NE 15*
               ).NXTLCH
         AGO   .LCHSET                  TO SET LCHTAB FOR UCB
.MPXLCHA ANOP
&LCHN    SETA  &LCHTOT                  SET UCB LCHTAB
         AGO   .ERTAB                   TO COMPUTE ERRTAB DOR UCB
.NXTLCH  ANOP           THIS ENTERS A NEW LOGICAL CHANNEL OR RETURNS
&LCHCNT  SETA  &LCHCNT+1               UPDATE INDEX
         AIF   (&LCHCNT LE &LCHSTOT).LCHLOOP  LAST ENTRY,NO-RETURN
.NEWLCH  ANOP                          INITI ALIZATION ENTRY TO TABLES
&S1(61+&LCHTOT+&LCHSTOT)  SETB (&SGDAP1B(&COUNTB) OR &OCHAN EQ 1)
&S1(121+&LCHTOT+&LCHSTOT) SETB (&SGDAP2B(&COUNTB) OR &OCHAN EQ 2)
&S1(181+&LCHTOT+&LCHSTOT) SETB (&SGDAP3B(&COUNTB) OR &OCHAN EQ 3)
&S2(&LCHTOT+&LCHSTOT+1)   SETB (&SGDAP4B(&COUNTB) OR &OCHAN EQ 4)
&S2(61+&LCHTOT+&LCHSTOT)  SETB (&SGDAP5B(&COUNTB) OR &OCHAN EQ 5)
&S2(121+&LCHTOT+&LCHSTOT) SETB (&SGDAP6B(&COUNTB) OR &OCHAN EQ 6)
&S2(181+&LCHTOT+&LCHSTOT) SETB (&SGDAP7B(&COUNTB) OR &OCHAN EQ 7)
&S3(&LCHTOT+&LCHSTOT+1)   SETB (&SGDAP8B(&COUNTB) OR &OCHAN EQ 8)
&S3(61+&LCHTOT+&LCHSTOT)  SETB (&SGDAP9B(&COUNTB) OR &OCHAN EQ 9)
&S3(121+&LCHTOT+&LCHSTOT) SETB (&SGDAPAB(&COUNTB) OR &OCHAN EQ 10)
&S3(181+&LCHTOT+&LCHSTOT) SETB (&SGDAPBB(&COUNTB) OR &OCHAN EQ 11)
&S4(&LCHTOT+&LCHSTOT+1)   SETB (&SGDAPCB(&COUNTB) OR &OCHAN EQ 12)
&S4(61+&LCHTOT+&LCHSTOT)  SETB (&SGDAPDB(&COUNTB) OR &OCHAN EQ 13)
&S4(121+&LCHTOT+&LCHSTOT) SETB (&SGDAPEB(&COUNTB) OR &OCHAN EQ 14)
&S4(181+&LCHTOT+&LCHSTOT) SETB (&SGDAPFB(&COUNTB) OR &OCHAN EQ 15)
&LCHAP1(&LCHCNT) SETB (&SGDAP1B(&COUNTB) OR &OCHAN EQ 1)  SET
&LCHAP2(&LCHCNT) SETB (&SGDAP2B(&COUNTB) OR &OCHAN EQ 2)    UP
&LCHAP3(&LCHCNT) SETB (&SGDAP3B(&COUNTB) OR &OCHAN EQ 3)       NEW
&LCHAP4(&LCHCNT) SETB (&SGDAP4B(&COUNTB) OR &OCHAN EQ 4)            LCH
&LCHAP5(&LCHCNT) SETB (&SGDAP5B(&COUNTB) OR &OCHAN EQ 5)   CHANNEL
&LCHAP6(&LCHCNT) SETB (&SGDAP6B(&COUNTB) OR &OCHAN EQ 6)          PATHS
&LCHAP7(&LCHCNT)  SETB (&SGDAP7B(&COUNTB) OR &OCHAN EQ 7)
&LCHAP8(&LCHCNT)  SETB (&SGDAP8B(&COUNTB) OR &OCHAN EQ 8)
&LCHAP9(&LCHCNT)  SETB (&SGDAP9B(&COUNTB) OR &OCHAN EQ 9)
&LCHAP10(&LCHCNT) SETB (&SGDAPAB(&COUNTB) OR &OCHAN EQ 10)
&LCHAP11(&LCHCNT) SETB (&SGDAPBB(&COUNTB) OR &OCHAN EQ 11)
&LCHAP12(&LCHCNT) SETB (&SGDAPCB(&COUNTB) OR &OCHAN EQ 12)
&LCHAP13(&LCHCNT) SETB (&SGDAPDB(&COUNTB) OR &OCHAN EQ 13)
&LCHAP14(&LCHCNT) SETB (&SGDAPEB(&COUNTB) OR &OCHAN EQ 14)
&LCHAP15(&LCHCNT) SETB (&SGDAPFB(&COUNTB) OR &OCHAN EQ 15)
&LCHSTOT SETA  &LCHSTOT+1              UPDATE SUBTOTAL OF LCHS
.LCHSET  ANOP
&LCHN    SETA  &LCHCNT+&LCHTOT-1       SET LCH TABLE INDEX FOR UCB
.**********************************************************************
.*                                                                    *
.*      THIS ROUTINE COMPUTES THE ERROR TAB FOR THE UCB               *
.*                                                                    *
.**********************************************************************
.ERTAB   ANOP                          THIS ROUTINE FINDS THE ERRTAB FO
&NCHSW   SETB  0                       RESET LCH NEW CHANNEL SWITCH
&LCHCNT  SETA  0                       RESET COMMON COUNTER
&SHRUP   SETA  0                       RESET SHARED UP
&EBCDIC  SETC  '000'                   INITIALIXE OPTIOMN FIELD
&TYPEA   SETC  '00000000'
         AIF   (&PCUINDX EQ &SAVECU).DEVN  1ST DEVICE ON CU
&SAVECU  SETA  &PCUINDX
&DEVNDX  SETA  0                        RESET DEVICE COUNT
.DEVN    ANOP
&DEVNDX  SETA  &DEVNDX+1
.*     TEST FOR TAPE--IF NOT, SKIP TO TEST FOR DASD            @G64HPLP
         AIF   ('&SGDTYPC(&DITX)'(5,2) NE '80').TFDISK         @G64HPLP
.*  SKIP THIS CODE FOR NEW DEVICE SINCE INFO IS IN DFT OR DIT  @G64HPLP
         AIF   (&SGINTFB(&DITX)).NUCBPUT NEW DEV SO SKIP TEST  @G64HPLP
         AIF   (NOT &SGDF08B(&COUNTB)).HSCHNCK  ALTERNATE POWER FEATURE
&LCHCNT  SETA  &LCHCNT+1         ALTERNATE POWER
.HSCHNCK ANOP
&NUCSIZ  SETA  &NUCSIZ+24               ADD TAPE
         AIF   (NOT &SGDF03B(&COUNTB)).E2400  CHECK FOR R/W TAU
&LCHCNT  SETA  &LCHCNT+8                SET R/W TAU BIT
.E2400   AIF   (NOT &SGUNF6B(&COUNTB)).TCUAP      TEST FOR ALT CU
&FL5     SETA  &FL5+2                   SET ALT CU FLAG
.TCUAP   ANOP
&ERRTAB  SETC  '09'                      SET TAPE ERRTAB
         AIF   (&SGDU01B(&COUNTB)).E240A       2400?
&TYPEA   SETC  '30008003'                SET 34XX TYPE
&FLP1    SETA  &FLP1+8                  SET DDR BIT IN UCBFLP1 @G64HPLP
&FL5     SETA  &FL5+16                   SET 20 BYTE STAT BIT
         AIF   (&SGDM04B(&COUNTB) OR &SGDM06B(&COUNTB) OR &SGDM08B(&COU*
               NTB)).E34M468                                    @YM8658
         AIF   (&SGDF01B(&COUNTB)).E347TRK                      OZ00084
&LCHCNT  SETA  &LCHCNT+1024              SET PHASE IN CODE BIT
         AGO   .E240B
.E347TRK ANOP                                                   OZ00084
&LCHCNT  SETA  &LCHCNT+192                                      OZ00084
         AGO   .SETYPA                                          OZ00084
.E34M468 ANOP
&LCHCNT  SETA  &LCHCNT+512   SET FOR MODELS 4 6 8               @YM8658
         AIF   (&SGDF06B(&COUNTB)).E34O16                       @YM5087
         AGO   .E240B
.E34O16  ANOP
&LCHCNT  SETA  &LCHCNT+16    SET FOR 1600/6250                  @YM8658
         AGO   .E240B
.E240A   ANOP
&TYPEA   SETC  '30008001'    SET 2400 TAPE TYPE
&FLP1    SETA  &FLP1+8                  SET DDR BIT IN UCBFLP1 @G64HPLP
         AIF   (NOT(&SGDM04B(&COUNTB) OR &SGDM05B(&COUNTB) OR &SGDM06B(*
               &COUNTB))).H01   BR IF NOT PHASE IN CODE
&LCHCNT  SETA  &LCHCNT+1024         SET PHASE IN CODE MODEL BIT
.E240B   ANOP
         AIF   (&SGDF01B(&COUNTB)).H01  TEST FOR 7-TRK
         AIF   (&SGUNU8B(&COUNTB) AND &SGUNF4B(&COUNTB)).T2415
         AIF   (NOT(&SGDF04B(&COUNTB))).SETYPA BR IF NOT DUO-DENSITY
.T2415   ANOP
&LCHCNT  SETA  &LCHCNT+32               SET DUO-DENSITY FEATURE BIT
.H01     AIF   (NOT &SGDF01B(&COUNTB)).SETYPA     BR IF 9 TRACK
&LCHCNT  SETA  &LCHCNT+128             SET SEVEN TRACK OPTION BIT
         AIF   (NOT &SGUNF2B(&COUNTB)).SETYPA    DATA CONVERT TEST
&LCHCNT  SETA  &LCHCNT+64              SET DATA CONVERSION BIT
         AGO   .SETYPA                 TO SET TYPE FIELD FOR UCB
.TFDISK  ANOP                                                  @G64HPLP
.*     TEST FOR DASD--IF NOT, SKIP TO FURTHER DEVICE TESTS     @G64HPLP
         AIF   ('&SGDTYPC(&DITX)'(5,2) NE '20').TFCON          @G64HPLP
.*  SKIP THIS CODE FOR NEW DEVICE SINCE INFO IS IN DFT OR DIT  @G64HPLP
         AIF   (NOT &SGINTFB(&DITX)).OLDDA1 NEW DEV INTERFACE  @G64HPLP
         AIF   (NOT &SGUF52B(&COUNTB)).NUCBPUT   NOT S/A SEEK  @G64HPLP
         AGO   .NEWDA1                  PROCESS S/A SEEK       @G64HPLP
.OLDDA1  ANOP                                                  @G64HPLP
&ERRTAB  SETC  '00'                     SET ERRTAB
&NUCSIZ  SETA  &NUCSIZ+16        INCREMENT UCB STORAGE COUNT   @ZA15707
         AIF   (NOT &SGDF08B(&COUNTB)).MERLCK  ALTERNATE POWER FEATURE
&LCHCNT  SETA  &LCHCNT+1         ALTERNATE POWER
.MERLCK  AIF   (&SGDU07B(&COUNTB)).EMLIN  IS IT 3330
         AIF   (&SGDU08B(&COUNTB)).E2305  IS IT 2305
         AIF   (&SGDU09B(&COUNTB)).E3340  IS IT 3340
         AIF   (&SGDU10B(&COUNTB)).E3350  IS IT 3350           @Z30RSTA
.NEWDA1  ANOP                                                  @G64HPLP
&SK1(61+&LCHN)  SETB (&SGDAP1B(&COUNTB) OR &OCHAN EQ 1)
&SK1(121+&LCHN) SETB (&SGDAP2B(&COUNTB) OR &OCHAN EQ 2)
&SK1(181+&LCHN) SETB (&SGDAP3B(&COUNTB) OR &OCHAN EQ 3)
&SK2(&LCHN+1)   SETB (&SGDAP4B(&COUNTB) OR &OCHAN EQ 4)
&SK2(61+&LCHN)  SETB (&SGDAP5B(&COUNTB) OR &OCHAN EQ 5)
&SK2(121+&LCHN) SETB (&SGDAP6B(&COUNTB) OR &OCHAN EQ 6)
&SK2(181+&LCHN) SETB (&SGDAP7B(&COUNTB) OR &OCHAN EQ 7)
&SK3(&LCHN+1)   SETB (&SGDAP8B(&COUNTB) OR &OCHAN EQ 8)
&SK3(61+&LCHN)  SETB (&SGDAP9B(&COUNTB) OR &OCHAN EQ 9)
&SK3(121+&LCHN) SETB (&SGDAPAB(&COUNTB) OR &OCHAN EQ 10)
&SK3(181+&LCHN) SETB (&SGDAPBB(&COUNTB) OR &OCHAN EQ 11)
&SK4(&LCHN+1)   SETB (&SGDAPCB(&COUNTB) OR &OCHAN EQ 12)
&SK4(61+&LCHN)  SETB (&SGDAPDB(&COUNTB) OR &OCHAN EQ 13)
&SK4(121+&LCHN) SETB (&SGDAPEB(&COUNTB) OR &OCHAN EQ 14)
&SK4(181+&LCHN) SETB (&SGDAPFB(&COUNTB) OR &OCHAN EQ 15)
         AIF   (&SGINTFB(&DITX)).NUCBPUT NEW DEV INTERFACE     @G64HPLP
         AGO   .E2314                   MUST BE A 2314
.EMLIN   AIF   (NOT &SGDF03B(&COUNTB)).EMLINA IF 3330V THEN    @Y30LPLC
&LCHCNT  SETA  &LCHCNT+8           SET VIRTUAL 3330            @Y30LPLC
.EMLINA  ANOP                                                  @Y30LPLC
         AIF   (&SGDM11B(&COUNTB)).E33301 MODEL 11 3330        @Y30LPLC
&TYPEA   SETC  '30002009'               SET BASIC MERLIN TYPE
         AIF   (&SGDF03B(&COUNTB)).EMLINB IF 3330V DONT        @G64HPLP
&FLP1    SETA  &FLP1+8                  SET DDR BIT IN UCBFLP1 @G64HPLP
.EMLINB  ANOP                                                  @G64HPLP
&LCHCNT  SETA  &LCHCNT+80               TRACK OVERFLOW & RPS    @YM7692
         AIF   (NOT &SGDF04B(&COUNTB)).SDTEST  TEST FOR ALT CU @YM07061
&FL5     SETA  &FL5+2
.SDTEST  AIF   (NOT &SGDF02B(&COUNTB)).SETYPA     TEST FOR SHARED
         AGO   .SETYPA1                 GO SET SHARED BIT
.E33301  ANOP
&TYPEA   SETC  '3000200D'               SET 3330-11 TYPE
&FLP1    SETA  &FLP1+8                  SET DDR BIT IN UCBFLP1 @G64HPLP
&LCHCNT  SETA  &LCHCNT+80               TRACK OVERFLOW & RPS    @YM7692
         AIF   (NOT &SGDF04B(&COUNTB)).SDTEST1 TEST FOR ALT CU @YM07061
&FL5     SETA  &FL5+2
.SDTEST1 AIF   (NOT &SGDF02B(&COUNTB)).SETYPA     TEST FOR SHARED
         AGO   .SETYPA1                 GO SET SHARED BIT
.E2305A  ANOP
&ZUSBAS  SETC  '&DEVAD'                 GET BASE ADDR
&ZSCNT   SETA  0                        RESET ZEUS BASE - NEW ZEUS
         AGO   .E2305B
.E2305   AIF   ((&ZSCNT EQ 8) OR (&ZSCNT LT 1)).E2305A
&OFF     SETB  1                        SET ONLINE FIRST PASS
.E2305B  ANOP
&NUCSIZ  SETA  &NUCSIZ+8                ADD DIRECT ACCESS(2305)
&ZSCNT   SETA  &ZSCNT+1                 INCREMENT COUNTER
&DEVADE  SETC  '&ZUSBAS'                KEEP BASE SAME
&SYSRES  SETA 4                         SET NON-REMOVABLE
         AIF   (&SGDM02B(&COUNTB)).MOD2Z
&TYPEA   SETC  '30002006'               SET BASIC 2305 MOD 1
&LCHCNT  SETA  &LCHCNT+80               TRACK OVERFLOW & RPS    @YM7692
         AGO   .MOD2ZA                  BRANCH AROUND
.MOD2Z ANOP
&LCHCNT  SETA  &LCHCNT+80               TRACK OVERFLOW & RPS    @YM7692
&TYPEA   SETC  '30002007'               SET BASIC 2305 MOD 2
.MOD2ZA  AIF   (NOT &SGDF02B(&COUNTB)).SETYPA     TEST FOR SHARED
         AGO   .SETYPA1                 GO SET SHARED BIT
.E3340   ANOP
&TYPEA   SETC  '3000200A'               SET 3340 TYPE
&FLP1    SETA  &FLP1+8                  SET DDR BIT IN UCBFLP1 @G64HPLP
&LCHCNT  SETA  &LCHCNT+64               TRACK OVERFLOW         @G64HPLP
         AIF   (NOT &SGDF04B(&COUNTB)).SDTEST2 TEST FOR ALT CU @YM07061
&FL5     SETA  &FL5+2
.SDTEST2 AIF   (NOT &SGDF01B(&COUNTB)).CSHRD     TEST FOR RPS  @G64HPLP
&LCHCNT  SETA  &LCHCNT+16                                      @G64HPLP
.CSHRD   AIF   (NOT &SGDF02B(&COUNTB)).SETYPA   TEST FOR SHARED
         AGO   .SETYPA1                 GO SET SHARED BIT
.E3350   ANOP                                                  @Z30RSTA
&TYPEA   SETC  '3000200B'               BASIC 3350 UCB TYPE    @Z30RSTA
&LCHCNT  SETA  &LCHCNT+80               TRK OVERFLOW AND RPS   @G64HPLP
&SYSRES  SETA  4                        NON-REMOVABLE          @Z30RSTA
         AIF   (NOT &SGDF04B(&COUNTB)).SDTEST3   ALT CU        @Z30RSTA
&FL5     SETA  &FL5+2                   SET ALT CU FLAG        @Z30RSTA
.SDTEST3 AIF   (NOT &SGDF02B(&COUNTB)).SETYPA   TEST FOR SHR   @Z30RSTA
         AGO   .SETYPA1                 GO SET SHARED BIT      @Z30RSTA
.E2314   AIF   (NOT &SGDF04B(&COUNTB)).DCUAP  TEST FOR ALT CU  @YM07061
&FL5     SETA  &FL5+2                   SET ALT CU FLAG
.DCUAP   ANOP
&TYPEA   SETC  '30002008'               SET BASIC 2314 DISK TYPE
&FLP1    SETA  &FLP1+8                  SET DDR BIT IN UCBFLP1 @G64HPLP
&LCHCNT  SETA  &LCHCNT+192              SET OVERFLOW AND SCAN BITS
         AIF   (NOT &SGDF02B(&COUNTB)).SETYPA  TEST FOR SHARED DEVICE
.SETYPA1 ANOP
         AIF   (NOT &SGDF05B(&COUNTB)).ESH
&SHRUP   SETA  1
.ESH     ANOP
&LCHCNT  SETA  &LCHCNT+32               SET SHARABLE BIT
         AGO   .SETYPA                  TO SET FINAL TYPE WITH OPTION B
.**********************************************************************
.*                                                                    *
.*             CONSOLE ERROR ROUTINE CHECK                            *
.*                                                                    *
.**********************************************************************
.*  SKIP THIS CODE FOR NEW DEVICE SINCE INFO IS IN DFT OR DIT  @G64HPLP
.TFCON   AIF   (&SGINTFB(&DITX)).NUCBPUT NEW DEV INTERFACE     @G64HPLP
         AIF   (NOT &SGDT04B(&COUNTB)).TFDD  NOT CON-TEST FOR DISPLAYS
&ERRTAB  SETC  '04'                     SET CONSOLE ERRTAB
         AIF   (&SGDU01B(&COUNTB)).E1052     TEST FOR 1052
         AIF   (&SGDU03B(&COUNTB)).E3210     TEST FOR 3210
.**********************************************************************
.*                                                                    *
.*                     3215 DEVICE TYPE                               *
.*                                                                    *
.**********************************************************************
&TYPEA   SETC  '10000823'               SET DEVTYPE FIELD
         AGO   .UCBOPUT
.E3210   ANOP
&TYPEA   SETC  '10000822'               SET DEVTYPE FIELD
         AGO   .UCBOPUT
.E1052   ANOP
&TYPEA   SETC  '10000820'               SET BASIC 1052 CONSOLE TYPE
         AGO   .UCBOPUT
.TFPRT   AIF   (NOT &SGDT06B(&COUNTB)).TFRDPN   NOT PRINTER-TEST R/P
         AIF   (&SGDU04B(&COUNTB)).E1419     TEST FOR 1419
         AIF   (&SGDU05B(&COUNTB)).E1275     TEST FOR 1275
         AIF   (&SGDU06B(&COUNTB)).E3211     TEST FOR 3211
         AIF   (&SGDU08B(&COUNTB)).E3213     TEST FOR 3213
         AIF   (&SGDU09B(&COUNTB)).E3895     TEST FOR 3895     @G30HNLO
         AIF   (&SGDU10B(&COUNTB)).E3800     TEST FOR 3800     @Y40MPLG
&ERRTAB  SETC  '07'                     SET 1443/1403 PRINTER ERRTAB
         AIF   (&SGDU03B(&COUNTB)).E1443  1443 PRINTER
&TYPEA   SETC  '10000808'               SDT BASIC 1403 TYPE FIELD
&FLP1    SETA  &FLP1+8                  SET DDR BIT IN UCBFLP1 @G64HPLP
         AIF   (NOT &SGDF02B(&COUNTB)).UCBOPUT  NOT THIS FEATURE
&LCHCNT  SETA  128                      SET UNIV CHAR SET FEATURE
&NUCSIZ  SETA  &NUCSIZ+8                ADD UCS
         AGO   .SETYPA                  TO SET TYPE FIELD IN UCB
.E1419   AIF   (&MCRDR).MCRSEC          TEST FOR SECONDARY CU
&MCRDR   SETB  1                        SET SECOND PASS INDICATOR
&TYPEA   SETC  '4000081D'               SET 1419 PRIMARY
         AGO   .ETABMCR                 GO SET ERRTAB
.E1275   AIF   (&MCRDR).MCRSEC          TEST FOR SECONDARY CU
&MCRDR   SETB  1                        SET SECOND PASS IND
&TYPEA   SETC  '4000081F'               SET 1275 PRIMARY
         AGO   .ETABMCR                 GO SET ERRTAB
.MCRSEC  ANOP
&MCRDR   SETB  0                        CLEAR SECOND PASS IND
&TYPEA   SETC  '0000081E'               SET 1419/1275 SECONDARY
.ETABMCR ANOP
&ERRTAB  SETC  '73'                     SET ERRTAB FOR 1419/1275
         AGO   .UCBOPUT                 GO SET TYPE FIELD
.TFDD    AIF   (NOT &SGDT05B(&COUNTB)).TFPRT      NOT DISPLAY-TEST PRT
&NUCSIZ  SETA  &NUCSIZ+16               ADD GRAPHICS
.**********************************************************************
.*                          SGIEC2GR                                  *
.**********************************************************************
&OFF     SETB  (&SGDOFFB(&COUNTB))     OFFLINE DESIRED
    SGIEC2GR   &UCBNO,&DEVAD,&TYPE,&CPRFX,&STATAB,&LCHN,&DEVNDX,&FL5,&S*
               YSRES,&SGDDTMC(&DITX),&OFF                      @G64HPLP
&INDX    SETA  &INDX+1                 UPDATE DEVICE INDEX
         AGO   .GREND
.E1443   ANOP             SET TYPE AND CHECK FEATURES ON 1443
&TYPEA   SETC  '1000080A'               SET BASIC TYPE FOR 1443
&FLP1    SETA  &FLP1+8                  SET DDR BIT IN UCBFLP1 @G64HPLP
         AGO   .SETYPA
.E3211   ANOP
&TYPEA   SETC  '10800809'               SET 3211 TYPE
&FLP1    SETA  &FLP1+8                  SET DDR BIT IN UCBFLP1 @G64HPLP
&ERRTAB  SETC  '07'                     SET ERRTAB
&NUCSIZ  SETA  &NUCSIZ+8                ADD EXTENSION
         AGO   .UCBOPUT
.E3213   ANOP                           SET 3213 FIELDS
&ERRTAB  SETC  '04'                     SET ERRTAB              @YM7790
&TYPEA   SETC  '10000830'               SET 3213 DEV/UNIT TYPE
         AGO   .UCBOPUT                 PUNCH IECIUCB MACRO CALL
.E3895   ANOP                                                  @G30HNLO
&TYPEA   SETC  '10000819'               SET 3895 TYPE          @G30HNLO
&ERRTAB  SETC  '16'                     SET 3895 ERRTAB        @G30HNLO
         AGO   .UCBOPUT                                        @G30HNLO
.E3800   ANOP                                                  @Y40MPLG
&TYPEA   SETC  '1000080E'          SET 3800 TYPE               @Y40MPLG
&ERRTAB  SETC  '07'                SET ERRTAB                  @Y40MPLG
&NUCSIZ  SETA  &NUCSIZ+32          ADD EXTENSION               @Y40MPLG
&WCGMNO  SETC  '02'           DEFAULT 2 WCGMS                  @Y40MPLG
&OPTNS   SETA  0                                               @Y40MPLG
         AIF   (&SGDF02B(&COUNTB)).WCGM4    CGS2               @Y40MPLG
         AGO   .OP3800                                         @Y40MPLG
.WCGM4   ANOP                                                  @Y40MPLG
&WCGMNO  SETC  '04'                INDICATE 4 WCGM             @Y40MPLG
.OP3800  AIF   (NOT &SGDF07B(&COUNTB)).UCBOPUT                 @Y40MPLG
&OPTNS   SETA  &OPTNS+2            SET BURSTER/TRIMER/STAK     @Y40MPLG
         AGO   .UCBOPUT                                        @Y40MPLG
.TFRDPN  AIF   (NOT &SGDT07B(&COUNTB)).TFUR  NOT R/P-TRY UR    @G29ANLO
&LCHCNT  SETA  &SGDF01B(&COUNTB)
         AIF   (&SGDU08B(&COUNTB) OR &SGDU09B(&COUNTB)).E35XX
         AIF   (&SGDU02B(&COUNTB)).E2501  IS TI 2501 PUNCH
         AIF   (&SGDU03B(&COUNTB)).E2520  IS IT A 2520 PUNCH
         AIF  (&COUNTB EQ 0).SKIPME
&LCHCNT  SETA  &SGUNF1B(&COUNTB)
.SKIPME  ANOP
         AIF   (&SGDU04B(&COUNTB)).E2540R  IS TI A 2540 READET
         AIF   (&SGDU05B(&COUNTB)).E2540P IS IT A 2540 PUNCH
         AIF   (&SGDU06B(&COUNTB)).E2671     TEST FOR 2671
         AIF   (&SGDU10B(&COUNTB)).E3886
         AIF   (&SGDU11B(&COUNTB)).E3890
         AIF   (&SGDU12B(&COUNTB)).E3540  IS IT A 3540 DISKET  @Y30OPLA
.*                                 READER/WRITER.              @Y30OPLA
         AIF   (&SGDU13B(&COUNTB)).EDSM  IS IT A SS1/DSM       @Y30LPLC
.E2495   ANOP
&ERRTAB  SETC  '6F'                     SET 2495 ERRTAB
&TYPEA   SETC  '00000818'               SET 2495 DEVICE TYPE FLD
         AGO   .ADDUR
.E2671   ANOP                                                  @YM04395
&ERRTAB  SETC  '15'                     SET ERRTAB FOR 2671 PAPER TAPE
.*                                                             @OZ02582
&TYPEA   SETC  '10000810'              SET 2671 PAPER TAPE
         AGO   .UCBOPUT
.E2501   ANOP                            2501 PUNCH ERRTAB AND TYPE
&ERRTAB  SETC  '0D'                     SET 2501 PUNCH ERRTAB  @YM04395
&TYPEA   SETC  '50000804'                SET BASIC 2501 TYPE
&FLP1    SETA  &FLP1+8                  SET DDR BIT IN UCBFLP1 @G64HPLP
         AGO   .SETYPA
.E2520   AIF   (&SGDM01B(&COUNTB)).E2520A
&LCHCNT  SETA  &LCHCNT+256
.E2520A  ANOP
&ERRTAB  SETC  '0D'                     SET 2520 PUNCH ERRTAB  @YM04395
         AIF   (&SGDM02B(&COUNTB) OR &SGDM03B(&COUNTB)).T2520 IS IT PCH
&TYPEA   SETC  '50000805'                SET BASIC 2520 R/P TYPE
&FLP1    SETA  &FLP1+8                  SET DDR BIT IN UCBFLP1 @G64HPLP
         AGO   .SETYPA
.T2520   ANOP                            THIS IS A 2520 PUNCH ONLY
&TYPEA   SETC  '10000805'              SET BASIC 2520 PUNCH TYPE
&FLP1    SETA  &FLP1+8                  SET DDR BIT IN UCBFLP1 @G64HPLP
         AGO   .SETYPA
.E2540P  ANOP                            2540 PUNCH ERRTAB AND TYPE
&ERRTAB  SETC  '0D'   SET ERROR TAB
&TYPEA   SETC  '10000802'     SET PUNCH TYPE FIELD
&FLP1    SETA  &FLP1+8                  SET DDR BIT IN UCBFLP1 @G64HPLP
         AGO   .SETYPA
.E2540R  ANOP                            2540 READER ERRTAB AND TYPE
&ERRTAB  SETC  '0D'                      SET 2540 R/P ERRTAB
&TYPEA   SETC  '10000801'                SET BASIC 2540 TYPE FIELD
&FLP1    SETA  &FLP1+8                  SET DDR BIT IN UCBFLP1 @G64HPLP
         AGO   .SETYPA
.E35XX   ANOP
&ERRTAB  SETC  '0B'                    SET 3505,3525 ERRTAB
         AIF   (NOT &SGDF03B(&COUNTB)).CHKMULT
&LCHCNT  SETA  &LCHCNT+32                SET TWOLINE PRINT      @YM7992
         AGO   .E35XXA
.CHKMULT AIF   (NOT &SGDF02B(&COUNTB)).E35XXA
&LCHCNT  SETA  &LCHCNT+16                SET MULTI LINE PRINT
.E35XXA  ANOP
         AIF   (&SGDU09B(&COUNTB)).E3525     3525?
&TYPEA   SETC  '10000806'              SET BASIC 3505 TYPE
&FLP1    SETA  &FLP1+8                  SET DDR BIT IN UCBFLP1 @G64HPLP
         AGO   .SETYPA
.E3525   ANOP
&TYPEA   SETC  '1000080C'              SET BASIC 3525 TYPE
&FLP1    SETA  &FLP1+8                  SET DDR BIT IN UCBFLP1 @G64HPLP
         AGO   .SETYPA
.EDSM    ANOP                                                  @Y30LPLC
&ERRTAB  SETC  '12'                SET DSM ERROR TABLE INDEX   @ZM32164
&TYPEA   SETC  '00000842'          SET DSM DEVICE TYPE         @Y30LPLC
&NUCSIZ  SETA  &NUCSIZ+8           ADD DEVICE DEPEND. SECT.    @Y30LPLC
&FL5     SETA  &FL5+12              SET UCBNALOC BIT           @Y30LPLC
.*                                  AND ENVIORNMENTAL DATA     @ZUP1024
         AGO   .SETYPA                                         @Y30LPLC
.E3540   ANOP                                                  @Y30OPLA
&ERRTAB  SETC  '17'                SET 3540 ERRTAB             @Y30OPLA
&TYPEA   SETC  '00000844'          SET 3540 DEVICE TYPE        @Y30OPLA
&NUCSIZ  SETA  &NUCSIZ+8           ADD EXTENSION LENGTH        @Y30OPLA
         AGO   .SETYPA                                         @Y30OPLA
.E3886   ANOP
&NUCSIZ  SETA   &NUCSIZ+8          INCREMENT UCB STORAGE COUNT @ZA15707
&FL5     SETA   &FL5+16                                        @YM05205
&ERRTAB  SETC  '10'                    SET 3886 ERRTAB
&TYPEA   SETC  '10000817'              SET BASIC 3886 TYPE
         AGO   .SETYPA
.E3890   ANOP
&ERRTAB  SETC  '11'                    SET 3890 ERRTAB
&TYPEA   SETC  '10000816'              SET BASIC 3890 TYPE
         AGO   .SETYPA
.TFUR    ANOP                          TEST FOR UNIT RECORD    @G29ANLO
         AIF   (NOT &SGDT10B(&COUNTB)).TFASP NOT UR - TRY ASP  @G29ANLO
         AIF   (&SGDU01B(&COUNTB)).E3838     IS IT 3838        @G29ANLO
         AIF   (&SGDU02B(&COUNTB)).E7443     IS IT 7443        @ZM49533
         AGO   .TFASP                  NO - CONTINUE AS BEFORE @G29ANLO
.E3838   ANOP                                                  @G29ANLO
&TYPEA   SETC  '3000084C'              SET 3838 TYPE           @G29ANLO
&ERRTAB  SETC  '21'                    SET 3838 ERRTAB         @G29ANLO
&NUCSIZ  SETA  &NUCSIZ+8               ADD DEVICE DEPENDENT    @G29ANLO
&FL5     SETA  &FL5+128                SET DCC                 @G29ANLO
         AGO   .UCBOPUT                                        @G29ANLO
.E7443   ANOP                                                  @ZM49533
&TYPEA   SETC  '1100083D'              SET 7443 TYPE           @ZM49533
&ERRTAB  SETC  '00'                    NO ERP                  @ZM49533
         AGO   .UCBOPUT                                        @ZM49533
.TFASP  ANOP                           TEST FOR ASP DEVICES
         AIF   (NOT &SGDT09B(&COUNTB)).TFTPD
&ERRTAB  SETC  '19'                    SET 3890 ERRTAB
&TYPEA   SETC  '10004100'              SET BASIC CTC TYPE
&NUCSIZ  SETA  &NUCSIZ+8           INCREMENT UCB STORAGE COUNT @ZA15707
         AIF   (NOT &SGDF04B(&COUNTB)).SETYPA
&LCHCNT  SETA  &LCHCNT+1               SET FEATURE=370
         AGO   .SETYPA
.TFTPD  ANOP                          TEST FOR TELEPROCESSSINF
&ERRTAB  SETC  '00'                     SET DUMMY UCB ERRTAB
.*                                     TEST FOR DUMMY UCB      @ZA69930
         AIF   (NOT &SGDUMMY(&COUNTB)).NOTDUM                  @ZA69930
&NUCSIZ  SETA  &NUCSIZ+8               ADD DUMMY UCB INCREMENT @ZA69930
.NOTDUM  ANOP                          NOT A DUMMY UCB         @ZA69930
         AIF   (NOT &SGDT02B(&COUNTB)).TPTYPB
         AIF   (&SGDU04B(&COUNTB) AND (&SGDAD1B(&COUNTB) OR &SGDAD3B(&C*
               OUNTB))).TPTYPA          TEST FOR TP
         AIF   (&SGDU01B(&COUNTB) AND &SGDAD8B(&COUNTB)).TPTYPA
         AIF   (&SGDAD1B(&COUNTB) AND (&SGDU02B(&COUNTB) OR &SGDU03B(&C*
               OUNTB))).TPTYPA          2741C OR 2741P
         AIF   (&SGDAD7B(&COUNTB) AND (&SGDU05B(&COUNTB)OR &SGDU06B(&CO*
               UNTB)OR &SGDU07B(&COUNTB)OR &SGDU08B(&COUNTB))).TPTYPA
         AIF   (NOT &SGDU02B(&COUNTB) OR &SGDAD1B(&COUNTB)).E1288
&TYPEA   SETC  '4000081B'               SET 1287 TYPE
&ERRTAB  SETC  '71'                     SET ERRTAB
         AGO   .ADDUR
.E1288   AIF   (NOT &SGDU03B(&COUNTB) OR &SGDAD1B(&COUNTB)).TPTYPB
&TYPEA   SETC  '4000081C'               SET 1288 TYPE
&ERRTAB  SETC  '72'                     SET ERRTAB
.ADDUR   ANOP
         AGO   .UCBOPUT
.TPTYPB  AIF (NOT &SGDT08B(&COUNTB) AND NOT &SGDT12B(&COUNTB)).UCBOPUT
.*
.TPTYPA  ANOP
.**********************************************************************
.*                          SGIEC2PT                                  *
.**********************************************************************
&OFF     SETB  (&SGDOFFB(&COUNTB))       OFFLINE DESIRED
    SGIEC2PT   &UCBNO,&DEVAD,&TYPE,&CPRFX,&STATAB,&LCHN,&DEVNDX,&FL5,&S*
               YSRES,&SGDDTMC(&DITX),&OFF                      @G64HPLP
&INDX    SETA  &INDX+1                 UPDATEDEVICE INDEX
         AIF   (&SGDT12B(&COUNTB) AND (&SGDU06B(&COUNTB) OR &SGDU07B(&C*
               OUNTB) OR &SGDU10B(&COUNTB))).SET3705   IF THE  @ZA69930
.*                                 DEVICE IS A 3704 OR A 3705  @ZA69930
         AGO   .GREND              OR A 3791, INCREMENT UCB    @ZA69930
.SET3705 ANOP                      STORAGE COUNT.              @ZA15707
&NUCSIZ  SETA  &NUCSIZ+8                                       @ZA15707
         AGO   .GREND
.SETYPA  ANOP            CONVERT BEFORE SETTING FINAL TYPE
.*  SKIP THIS CODE FOR NEW DEVICE SINCE INFO IS IN DFT OR DIT  @G64HPLP
         AIF   (&SGINTFB(&DITX)).NUCBPUT NEW DEV INTERFACE     @G64HPLP
         CONVERT TO=EBCDIC,VALUE=&LCHCNT,DIGITS=3
&TYPEA   SETC  '&TYPEA'(1,1).'&EBCDIC'(1,3).'&TYPEA'(5,4)
.UCBOPUT AIF   (NOT &SGDEVB(1)).UCB0P2  SKIP INSPECTION
&SCR     SETA  &SGETABA(&COUNTB)-&SGETABA(&COUNTB)/256*256
.*                                      LAST TWO CHAR DEVTYPE
         AIF   (&SGDEVTP(&COUNTB) EQ 0 AND &SCR EQ 0).UCB0P1
         CONVERT   TO=EBCDIC,VALUE=&SGDEVTP(&COUNTB),DIGITS=6
&TYPEA   SETC  '&EBCDIC'
         CONVERT   TO=EBCDIC,VALUE=&SCR,DIGITS=2
&TYPEA   SETC  '&TYPEA'.'&EBCDIC'
.UCB0P1  ANOP
&SCR     SETA  (&SGETABA(&COUNTB)-&SGETABA(&COUNTB)/65536*65536)/256
.*                                      ERRTAB SETTING
         AIF   (&SCR EQ 0).UCB0P2
&SCR   SETA    &SCR-1
         CONVERT   TO=EBCDIC,VALUE=&SCR,DIGITS=2
&ERRTAB  SETC   '&EBCDIC'
.*   PUNCH UCB INFORMATION USING OLD DEVICE INTERFACE          @G64HPLP
.UCB0P2  PUNCH '.UCB&INDX ANOP'
&STEMPY  SETA  0                   STAT TAB INDEX TO 0 IF DA
.*                                 LEAVE ZERO FOR DSM          @Y30LPLC
         AIF   (&SGDT07B(&COUNTB) AND &SGDU13B(&COUNTB)).UCBOP3X
         AIF   (&SGDT03B(&COUNTB)).UCBOP3X LEAVE 0 IF DA
&STEMPY  SETA   &STATAB            SET TO CURRENT INDEX VALUE
.**********************************************************************
.*                          IECVUCB                                   *
.**********************************************************************
.UCBOP3X AIF   (&OFF).UCBOP4X          2305 OFFLINE BIT ON
&OFF     SETB  (&SGDOFFB(&COUNTB))     OFFLINE DESIRED
.UCBOP4X ANOP
&TSHR    SETB  (&SGDF09B(&COUNTB))     SET SHR BIT FOR 3420
&C       SETC  '  IECVUCB &UCBNO,&DEVAD,&TYPE,&CPRFX,&ERRTAB,&STEMPY,&L*
               CHN,,&TYPEA,&FL5,&SYSRES,&SGDDTMC(&DITX),&OFF,0,0,0,0,&D*
               EVADE,&TSHR,&SHRUP,&FLP1'                       @G64HPLP
         AIF   (K'&C LT 72).OK         IF THE PUNCH STATEMENT  @G64HPLP
&D       SETC  '&C'(1,71)              OVERFLOWS 72, THEN      @G64HPLP
         PUNCH '&D.*'                  PUNCH THE DEVICE INTO   @G64HPLP
&D       SETC  '&C'(72,K'&C-71)        TWO CARDS.              @G64HPLP
         PUNCH '               &D'  PUNCH THE REMAINDER ON     @G64HPLP
         AGO   .OK1                    THE SECOND CARD.        @G64HPLP
.OK      ANOP                                                  @G64HPLP
 PUNCH '  IECVUCB &UCBNO,&DEVAD,&TYPE,&CPRFX,&ERRTAB,&STEMPY,&LCHN,,&TY*
               PEA,&FL5,&SYSRES,&SGDDTMC(&DITX),&OFF,0,0,0,0,&DEVADE,&T*
               SHR,&SHRUP,&FLP1'        UCB CALL               @G64HPLP
.OK1     ANOP                                                  @G64HPLP
&INDX    SETA  &INDX+1                 UPDATE DEVICE INDEX
         PUNCH '         AGO   .UCB&INDX      TO NEXT UCB'
.**********************************************************************
.*                          IECVUCBX                                  *
.**********************************************************************
         PUNCH '.UCX&EXTINDX ANOP'
&C       SETC  '  IECVUCB &UCBNO,&DEVAD,&TYPE,&CPRFX,&ERRTAB,&STEMPY,&L*
               CHN,,&TYPEA,&FL5,&SYSRES,&SGDDTMC(&DITX),&OFF,0,0,1,0,&D*
               EVADE,&TSHR,&SHRUP,&FLP1'                       @G64HPLP
         AIF   (K'&C LT 72).OK2        IF THE PUNCH STATEMENT  @G64HPLP
&D       SETC  '&C'(1,71)              OVERFLOWS 72, THEN      @G64HPLP
         PUNCH '&D.*'                  PUNCH THE DEVICE INTO   @G64HPLP
&D       SETC  '&C'(72,K'&C-71)        TWO CARDS.              @G64HPLP
         PUNCH '               &D'  PUNCH THE REMAINDER ON     @G64HPLP
         AGO   .GREND                  THE SECOND CARD.        @G64HPLP
.OK2     ANOP                                                  @G64HPLP
 PUNCH '  IECVUCB &UCBNO,&DEVAD,&TYPE,&CPRFX,&ERRTAB,&STEMPY,&LCHN,,&TY*
               PEA,&FL5,&SYSRES,&SGDDTMC(&DITX),&OFF,0,0,1,0,&DEVADE,&T*
               SHR,&SHRUP,&FLP1'        UCB EXTENSION CALL     @G64HPLP
.GREND   ANOP
&EXTINDX SETA  &EXTINDX+1               UPDATE EXTENSION INDEX
         PUNCH '         AGO   .UCX&EXTINDX  TO NEXT EXTENSION '
&OFF     SETB  0
&FL5     SETA  0
.**********************************************************************
.*                                                                    *
.*         *** TEST FOR LAST DEVICE THIS GENERATION GOES HERE ***     *
.*                                                                    *
.**********************************************************************
.*
.*  COMPUTE IN DOUBLE WORDS THE NEXT OFFSET IN THE IOS CHANNEL
.*  PROGRAM PREFIX AREA - 6 - SHARED 3330V CCW'S               @G24LPLN
.*                        5 - NON-SHARED 3330V CCW'S           @G24LPLN
.*                        4 - DUMMY AND SHARED DA CCW'S
.*                        3 - DA AND TAPE CCW'S
.*                        1 - ALL OTHERS
.*
&CPRFX   SETA  &CPRFX+1            NEED AT LEAST ONE CCW
        AIF   (NOT &SGDT03B(&COUNTB) AND NOT &SGDT01B(&COUNTB)).CPRFX01
&CPRFX   SETA  &CPRFX+2            IF TAPE OR DA - ADD 2 MORE
  AIF (NOT &SGDF03B(&COUNTB) OR NOT &SGDT03B(&COUNTB)).CPRFX00 @G24LPLN
&CPRFX   SETA  &CPRFX+2            IF 3330V ADD 2 MORE         @G24LPLN
.CPRFX00 ANOP                                                  @G24LPLN
         AIF   (NOT &SGDF02B(&COUNTB) OR NOT &SGDT03B(&COUNTB)).CPRFND
&CPRFX   SETA  &CPRFX+1            IF SHARED DA - ADD 1
         AGO   .CPRFND
.CPRFX01 AIF   ('&TYPE' NE 'DUM').CPRFND
&CPRFX   SETA  &CPRFX+3            DUMMY UCB'S GET 4 CCW'S
.CPRFND  ANOP
.*
&NUCSIZ  SETA  &NUCSIZ+32               ADD BASIC UCB SIZE
         AIF   (&NUCSIZ LT 65536).SIZOK
.SIZBAD  ANOP                                                  @G64HPLP
         MNOTE 12,'***IEIIEC202 64K LIMIT RESERVED FOR UCB''S EXCEEDED'
.*                      THE PREVIOUS STATEMENT IS MODIFIED FOR @G64HPLP
         AGO   .ABIOEND
.SIZOK   ANOP
&SYSRES SETA 0
&NCHANSW SETB  0                       RESET NW CHANNEL SWITCH
&NCUSW   SETB  0                       RESET NEW CONTROL UNITM SW
&IRSW    SETB  1                       SET INITIAL RUN SWITCH ON
         AIF   (&SGDT01B(&COUNTB)).WRKA IF TAPE GEN A UCB EXTENSION
.*                                 IF 3540 GEN EXTENSION       @Y30OPLA
         AIF   (&SGDU12B(&COUNTB) AND &SGDT07B(&COUNTB)).WRKA  @Y30OPLA
.*                                 IF 3800 GEN EXTENSION       @Y40MPLG
         AIF   (&SGDT06B(&COUNTB) AND &SGDU10B(&COUNTB)).WRKA  @Y40MPLG
         AIF   (NOT(&SGDT06B(&COUNTB) AND (&SGDU06B(&COUNTB) OR        *
               (&SGDU01B(&COUNTB) AND &SGDF02B(&COUNTB))))).NOWRK
.**********************************************************************
.*                          IECVUCBA                                  *
.**********************************************************************
.WRKA    PUNCH '.WK&WKIDX IECVUCBA &UCBNO,&TYPEA,0,0,0,&OPTNS,&WCGMNO'
.*                            THE PREVIOUS LINE WAS CHANGED BY @G64HPLP
&WKIDX   SETA  &WKIDX+1                 UPDATE INDEX
         PUNCH '         AGO   .WK&WKIDX   TO NEXT WORK AREA '
.NOWRK   ANOP
&LCHCNT  SETA  0                         RESET COMMON COUNTER
         AIF   ('&TYPEA'(5,4) NE '8003').NASP
&STATAB  SETA  &STATAB+1               UPDATE STATISTICS FOR 34XX
.NASP    AIF   ('&TYPEA'(5,4) NE '0817').LDEVTST
&STATAB  SETA  &STATAB+2               UPDATE STATISTICS FOR 3886
.LDEVTST AIF   (&INDX GT &SGCNTRA(3)).OUT LAST DEV.-YES-EXIT
         AIF   (&SGDT03B(&COUNTB)).STATST IF DA, DON'T UPDATE STAT IDX
&STATAB  SETA  &STATAB+1                UPDATE STATAB
.STATST  AIF   (&STATAB LT 256).DEVLOOP STATAB OVER 1 BYTE
         AIF   (&STCNT EQ 10).ERDEV      FIRST STAT ENTRY FULL
&STATLST(&STCNT) SETA &INDX             UCB # TO STATLST
&STCNT   SETA  &STCNT+1                 UPDATE COUNT
         AGO   .DEVLOOP                 GET NEXT DEVICE
.*  NEW DEVICE INTERFACE--PUNCH UCB INFORMATION FROM DFT       @G64HPLP
.NUCBPUT ANOP                                                  @G64HPLP
&SCR     SETA  &SGETABA(&COUNTB)-&SGETABA(&COUNTB)/256*256     @G64HPLP
.*                                      LAST TWO CHAR DEVTYPE  @G64HPLP
         CONVERT   TO=EBCDIC,VALUE=&SGDEVTP(&COUNTB),DIGITS=6  @G64HPLP
&TYPEA   SETC  '&EBCDIC'                                       @G64HPLP
         CONVERT   TO=EBCDIC,VALUE=&SCR,DIGITS=2               @G64HPLP
&TYPEA   SETC  '&TYPEA'.'&EBCDIC'                              @G64HPLP
.*  COMPUTE UCBFL5 INFORMATION                                 @G64HPLP
&FL5     SETA  128*&SGUF50B(&COUNTB)+64*&SGUF51B(&COUNTB)+32*&SGUF52B(&*
               COUNTB)+16*&SGUF53B(&COUNTB)+8*&SGUF54B(&COUNTB)+4*&SGUF*
               55B(&COUNTB)+2*&SGUF56B(&COUNTB)+&SGUF57B(&COUNTB)
         PUNCH '.UCB&INDX ANOP'                                @G64HPLP
.**********************************************************************
.*                          IECVNUCB--BASE UCB                        *
.**********************************************************************
 PUNCH 'UCB&UCBNO IECVNUCB UCBBASE,(&DEVAD,&FL5,&SGDOFFB(&COUNTB),&SGUP*
               RMB(&COUNTB),&LCHN,&TYPEA)' PUNCH CALL FOR BASE @G64HPLP
.*   PUNCH DEVICE-DEPENDENT SEGMENT IF ONE WAS PROVIDED        @G64HPLP
         AIF   (K'&SGUDSGC(&COUNTB) EQ 0).NEWUCB1              @G64HPLP
         PUNCH '*   DEVICE-DEPENDENT SEGMENT'                  @G64HPLP
         SGIEC2DD &SGUDSGC(&COUNTB),UCBS&DEVAD PUNCH SEGMENT   @G64HPLP
.*  INCREMENT NUCLEUS SIZE BY SIZE OF DEVICE-DEPENDENT         @G64HPLP
.*      SEGMENT ROUNDED UP TO DOUBLE-WORD BOUNDARY             @G64HPLP
&NUCSIZ  SETA  &NUCSIZ+((&SGUDSGA(&COUNTB)+7)*8)/8             @G64HPLP
.NEWUCB1 ANOP                                                  @G64HPLP
&INDX    SETA  &INDX+1                 UPDATE DEVICE INDEX     @G64HPLP
         PUNCH '         AGO   .UCB&INDX      TO NEXT UCB'     @G64HPLP
&NUCSIZ  SETA  &NUCSIZ+32               ADD BASIC UCB SIZE
         AIF   (&NUCSIZ GE 65536).SIZBAD NUC SIZE OVERFLOW     @G64HPLP
.**********************************************************************
.*                          IECVNUCB--COMMON EXTENSION                *
.**********************************************************************
.*  COMPUTE UCBFLP1 INFORMATION                                @G64HPLP
&FLP1    SETA  128*&SGUFP0B(&COUNTB)+64*&SGUFP1B(&COUNTB)+32*&SGUFP2B(&*
               COUNTB)+16*&SGUFP3B(&COUNTB)+8*&SGUFP4B(&COUNTB)+4*&SGUF*
               P5B(&COUNTB)+2*&SGUFP6B(&COUNTB)+&SGUFP7B(&COUNTB)
.*  ISOLATE ERRTAB INFORMATION                                 @G64HPLP
&SCR     SETA  (&SGETABA(&COUNTB)-&SGETABA(&COUNTB)/65536*65536)/256
         AIF   (&SCR EQ 0).NUCB0P2                             @G64HPLP
&SCR   SETA    &SCR-1                                          @G64HPLP
.NUCB0P2 ANOP                                                  @G64HPLP
&STEMPY  SETA  0                   STAT TAB INDEX TO 0         @G64HPLP
         AIF   (&SGUNSTA(&DITX) EQ 0).NEWUCB2 ANY STAT TBL ?   @G64HPLP
&STEMPY  SETA  &STATAB             YES--GET VALUE FOR UCBSTI   @G64HPLP
.NEWUCB2 ANOP                                                  @G64HPLP
         PUNCH '.UCX&EXTINDX ANOP'                             @G64HPLP
 PUNCH 'UCBX&UCBNO IECVNUCB UCBCEXT,(&DEVAD,&SCR,&STEMPY,&SGUATIA(&COUN*
               TB),&SGUSNSA(&DITX),&FLP1,&CPRFX,&SGDDTMC(&DITX))'
&EXTINDX SETA  &EXTINDX+1               UPDATE EXTENSION INDEX @G64HPLP
         PUNCH '         AGO   .UCX&EXTINDX  TO NEXT EXTENSION '
&CPRFX   SETA  &CPRFX+&SGUCCWA(&COUNTB) INCREMENT CH.PGM       @G64HPLP
.*                                      PREFIX REQUIREMENTS    @G64HPLP
&STATAB  SETA  &STATAB+&SGUNSTA(&DITX)   INCREMENT STATISTICS  @G64HPLP
.*                                      TABLE REQUIREMENTS     @G64HPLP
         AIF   ('&SGDTYPC(&DITX)'(5,2) NE '10').NEWDV1 GRAPHIC @G64HPLP
&GR      SETB  1                       YES--INDICATE GRAPHICS  @G64HPLP
.NEWDV1  ANOP                                                  @G64HPLP
&OFF     SETB  0                                               @G64HPLP
&FL5     SETA  0                                               @G64HPLP
&SYSRES  SETA  0                                               @G64HPLP
&NCHANSW SETB  0                       RESET NW CHANNEL SWITCH @G64HPLP
&NCUSW   SETB  0                       RESET NEW CTL UNIT SW   @G64HPLP
&IRSW    SETB  1                       SET INITIAL RUN SW ON   @G64HPLP
.*   PUNCH DEVICE-DEPENDENT EXTENSION IF ONE WAS PROVIDED      @G64HPLP
         AIF   (K'&SGUDXTC(&COUNTB) EQ 0).NLDVTST              @G64HPLP
         PUNCH '.WK&WKIDX  ANOP   DEVICE-DEPENDENT EXTENSION'  @G64HPLP
UCBW&UCBNO SGIEC2DD &SGUDXTC(&COUNTB),UCBE&DEVAD PUNCH EXT     @G64HPLP
&WKIDX   SETA  &WKIDX+1                 UPDATE INDEX
         PUNCH '         AGO   .WK&WKIDX   TO NEXT WORK AREA '
.NLDVTST AIF   (&INDX GT &SGCNTRA(3)).OUT EXIT IF LAST DEVICE  @G64HPLP
         AGO   .STATST                 CHECK STAT TBL OVFLW    @G64HPLP
.ERDEV   MNOTE 12,'STATISTIC TABLE EXCEEDS LIMIT'              @G64HPLP
         AGO   .ABIOEND
.ORDERR  ANOP
         MNOTE 7,'DEVICE ADDRESS OUT OF ORDER, END OF GENERATION'
         AGO   .ABIOEND
.ERROR   MNOTE 7,'NO DEVICE LIST SPECIFIED, END GENERATION'
.ABIOEND ANOP                          ABNORMAL SYSGN END FROM IOS
&SGQUITB SETB  1                       SET QUIT SWITCH
         MEXIT
.OUT     ANOP
&LSTMAC  SETB  1                  SET LAST MACRO SWITCH
         AIF   (NOT &EOALTS).LUSTRT    HAVE ALL ALTS. BEEN PROCESSED
.COUT    ANOP                          YES- FINISH UP LAST PUNCHES
&LSTDEV  SETB  1                       SET LAST DEVICE SWITCH
.**********************************************************************
.*                   IECULK3 & IECULK1                                *
.**********************************************************************
         PUNCH '.LST&MPXCNT ANOP     LAST UCB ADD ENTRY'
         PUNCH '    IECULK3 0,0,0,0,0,&LSTDEV'
         PUNCH '         AGO   .TCH0  TO TEST CHANNEL'
         PUNCH '.TAB&M   ANOP            LAST CHANNEL ENTRY'
         PUNCH '  IECULK1 0,0,&NCHAN,&LSTDEV'
         PUNCH '         AGO   .TCU1       TO FIRST CU ENTRY'
        AGO  .NCHRTN                  TO PUT OUT LAST CHANNEL MACROS
.**********************************************************************
.*                                                                    *
.*  ALL DEVICES HAVE BEEN PROCESSED, FROM INFORMATION GATHERED DURING *
.*  PROCESSING THE FOLLOWING WILL NOW BE COMPUTED AND PUT OUT-        *
.*      CHANNEL TABLE ,LCH TABLE, DEVICE TABLE,                       *
.*       TEST CHANNEL , CHANNEL SRCH CODE AND TABLE, ATTEN TABLE,     *
.*       AND STATISTICS TABLE.                                        *
.*                                                                    *
.**********************************************************************
.LSTMAC  PUNCH '.TCH&I   ANOP       LAST TEST CHAN MOD'
         PUNCH '         AGO   .SRCH1     TO FIRST CSRCH MOD'
         PUNCH '.SRCH&J  ANOP       LAST CHANNEL SEARCH MOD'
         PUNCH '         AGO   .TBLTAB          TO TABLE MACRO'
         PUNCH '.TCU&T   ANOP       LAST CU ENRY TO TABLE'
         PUNCH '         AGO   .LST1       TO FIRST CUB ADD'
         PUNCH '.UCB&INDX   ANOP    LAST UCB ENTRY'
         PUNCH '         AGO   .UCX1  TO UCB WORK AREAS'       @Y30ANLG
         PUNCH '.UCX&EXTINDX   ANOP  LAST UCB EXTENSION ENTRY'
         PUNCH '         AGO   .WK1   TO UCB WORK AREAS'
         PUNCH '.WK&WKIDX ANOP    LAST WORK ENTRY  '
         PUNCH '         AGO   .TAB1  TO LOOKUP TABLE'
.**********************************************************************
.*                                                                    *
.*         SET UP GRAPHICS 0=NO DEVS.,1=NO GAM & DEV.,2=GAM & DEV.    *
.*                                                                    *
.**********************************************************************
         AIF   (NOT &GR).GRF0           TEST FOR ANY DEVICES
&GS      SETA  1                        SET TO 1
         AIF   (NOT &SGMENTB(12)).GRF0       TEST FOR GAM
&GS      SETA  2                        SET TO 2
.GRF0    ANOP
         AIF  (NOT &SGDCLSB(80)).NOANR
&ANR     SETA 1           SET ANR
         AIF   (NOT &SGDMGTB(4)).NOANR
&ANR     SETA 2           SET ANR AND BTAM FOR MAIN
.NOANR   ANOP
         AIF   (NOT &SGDCLSB(83)).NOCTC  CTC DEVICE
&CTC     SETA  1                       SET CTC
.NOCTC   ANOP
         PUNCH '.TCH0  ANOP'
         AIF   (NOT &TCHAP).NOAP        TEST FOR ANY SEL ALTS
.**********************************************************************
.*                          IECXTCH                                   *
.**********************************************************************
         PUNCH '   IECXTCH    (0,&CHCT(1),&CHCT(2),&CHCT(3),&CHCT(4),&C*
               HCT(5),&CHCT(6),&CHCT(7),&CHCT(8),&CHCT(9),&CHCT(10),&CH*
               CT(11),&CHCT(12),&CHCT(13),&CHCT(14),&CHCT(15))'
.*               THE FOLLOWING IS FOR MP65
.NOAP    PUNCH '         AGO   .TCH1      TO FIRST TCH MOD'
.**********************************************************************
.*                                                                    *
.*       THE FOLLOWING IS THE MACRO INST TO BUILD THE DEVICE TABLE.   *
.*                                                                    *
.**********************************************************************
         PUNCH '.TBLTAB  ANOP  LCH,ATTN AND CHAN TABLE'
&CPRFX   SETA  &CPRFX*2                                        @YM06537
         AIF   (&EXTCHAN).TB7          GREATER THAN 7?
.**********************************************************************
.*                          IECTBL                                    *
.**********************************************************************
        PUNCH ' IECTBL  (&CH(1),&CH(2),&CH(3),&CH(4),&CH(5),&CH(6),&CH(*
               7)),&LCHTOT,&SGDMGTB(5),(&CPRFX),&GS,&ANR,&CTC,&SGCPRGB(*
               9),&SGCPRGB(12)'
         AGO   .TYPOUT
.TB7     ANOP                                                  @ZM30494
&SM      SETB  (&SGDMGTB(5))                                   @ZM30494
&S9      SETB  (&SGCPRGB(9))                                   @ZM30494
&S12     SETB  (&SGCPRGB(12))                                  @ZM30494
    PUNCH ' IECTBL (&CH(1),&CH(2),&CH(3),&CH(4),&CH(5),&CH(6),&CH(7),&C*
               H(8),&CH(9),&CH(10),&CH(11),&CH(12),&CH(13),&CH(14),&CH(*
               15),&CH(16)),&LCHTOT,&SM,&CPRFX,&GS,&ANR,&CTC,&S9,&S12'
.TYPOUT  PUNCH '         AGO  .UCBEND     TO STATISTICS TABLE'
         PUNCH '.IOSB    ANOP   '
         PUNCH '.END    ANOP    '
         PUNCH '.UCBEND  ANOP   '
.**********************************************************************
.*             PUNCH OUT CALL FOR STATISTICS TABLE MACRO              *
.*                          IECIST                                    *
.**********************************************************************
&SCR     SETA ((&STCNT*256)+(&STATAB-1))
 PUNCH ' IECIST &SCR,(&STATLST(1),&STATLST(2),&STATLST(3),&STATLST(4),&*
               STATLST(5),&STATLST(6),&STATLST(7),&STATLST(8),&STATLST(*
               9),&STATLST(10)),&STCNT'
         PUNCH '         END  '
         PUNCH '/*'
         MEND
