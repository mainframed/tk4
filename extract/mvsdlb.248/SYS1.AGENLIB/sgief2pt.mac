         MACRO
         SGIEF2PT
.*A000000-999999                                                 Y02651
.**********************************************************************
.*
.*  MACRO NAME - SGIEF2PT
.*
.*  FUNCTION - GENERATES THE ASSEMBLY JCL AND GROUP 0 CALL TO SGIEF0PT
.*                TO GENERATE THE PROGRAM PROPERTIES AND PROGRAM
.*                AFFINITY MASK TABLE - IEFSDPPT
.*
.*  OPERATION - THE NUMBER OF ENTRIES IS CALCULATED BY INDEXING
.*              THROUGH THE NAME ARRAY &SGAFFNC UNTIL A NULL ENTRY
.*              IS FOUND.
.*
.*              THE ASSEMBLY JCL IS COPIED AFTER SETTING THE PROGRAM
.*              NAME TO IEFSDPPT.
.*
.*              IF NO AFFINITY WAS REQUESTED, ONLY THE MACRO CALL IS
.*              PUNCHED WITH NO PARAMETERS. THE FORMAT IS:
.*
.*                     SGIEF0PT
.*
.*              IF AFFINITY IS REQUESTED, THE REQUESTS ARE INSERTED
.*              INTO GLOBAL ARRAYS. THE PROGRAM NAMES ARE IN ARRAY
.*              &SGAFFNC(64); THE CPU AFFINTY MASK VALUE IS IN DECIMAL
.*              IN THE ARRAY &SGAFFNA(64). THE MACRO CALL IS PUNCHED
.*              WITH TWO KEYWORD PARAMETERS- PGM FOR THE PROGRAM NAMES
.*              AND CPU FOR THE AFFINITY MASKS. THIS VALUE IS IN
.*              DECIMAL; IT CONSISTS OF THE SUM OF THE CPU ID'S HEX
.*              DISPLACEMENT VALUE AS CALCULATED BY:
.*
.*                      ID = N
.*                      CPU VALUE = 2**N
.*
.*              THE FORMAT OF THE CALL IS:
.*
.*                   SGIEF0PT                              X
.*                            PGM=(NAME1,                  X
.*                             .....
.*                            NAMEJ,                       X
.*                             ....
.*                            NAMEN),                      X
.*                            CPU=(MASK1,                  X
.*                             ....
.*                            MASKJ,                       X
.*                             ....
.*                            MASKN)
.*
.*  EXECUTION STAGE - STAGE I
.*
.*  ENTRY - SGIEF2PT FROM GENERATE
.*
.*  INPUT - GLOBAL ARRAYS
.*             1) &SGAFFNC(64)  -  PROGRAM NAMES NEEDING AFFINITY
.*             2) &SGAFFNA(64)  -  AFFINITY MASK FOR CORRESPONDING
.*                                 PROGRAM NAME
.*
.*  INTERNAL CALLS - SGGBLPAK - FOR GLOBAL INPUT REFERENCE
.*                   SGASMPAK - FOR ASSEMBLY JCL
.*
.*  OUTPUT - ASSEMBLY JCL FOR STAGE II FOR IEFSDPPT
.*
.*  EXIT - MEND TO GENERATE
.*
.*  MESSAGES - NONE
.*
.*  DISTRIBUTION LIBRARY - SYS1.AGENLIB
.*
.**********************************************************************
          COPY  SGGBLPAK
.*
.*   LOCAL VARIABLES
.*
         LCLA  &CNT                    COUNT OF AFFINITY REQUESTS
         LCLA  &INDEX                  INDEX FOR ARRAYS
         LCLA  &LENGTH                 LENGTH OF PARAMETER
         LCLC  &MASK                   CONSTANT FOR CONTINUATION MASK
         LCLC  &CONT                   CONTINUATION MASK FOR PUNCH
         LCLC  &CPUSYN                 VARIABLE FOR CPU KEYWORD SYNTAX
.*
.**********************************************************************
.*
.*       THIS SECTION OF CODE CALULATES THE NUMBER OF ENTRIES
.*       IN THE NAME GLOBAL  &SGAFFC(64) BY INDEXING UNTIL A
.*       NULL ENTRY IS FOUND
.*
.**********************************************************************
&CNT     SETA  1                       INITIALIZE COUNTER
.CNTLOOP ANOP                          LOOP LABEL
         AIF   (&CNT GT 64).CNTOUT     MAXIMUM ENTRIES FOUND - EXIT
         AIF   ('&SGAFFNC(&CNT)'EQ '').CNTOUT  TEST FOR NULL ENTRY
&CNT     SETA  &CNT+1                  INCREMENT COUNTER FOR NEXT TEST
         AGO   .CNTLOOP                BRANCH TO TEST NEXT ENTRY
.CNTOUT  ANOP                          LOOP EXIT FROM CNTLOOP
&CNT     SETA  &CNT-1                  DECREMENT COUNTER TO ACTUAL
.*                                     NUMBER OF ENTRIES
.**********************************************************************
.*
.*  THIS SECTION COPIES THE ASSEMBLY JCL FOR IEFSDPPT. THE CALL FOR
.*  SGIEF0PT IS PUNCHED ACCORDING TO THE FOLLOWING FORMAT:
.*       1) NO AFFINITY NAMES  -  &CNT=0
.*             SGIEF0PT
.*       2) ONE AFFINITY NAME S  -  &CNT=1
.*             SGIEF0PT                        X
.*                   PGM=(NAME),               X
.*                   CPU=(MASK)
.*       3) UP TO 64 AFFINITY NAMES  -  1<&CNT<65
.*             SGIEF0PT                        X
.*                   PGM=(NAME1,               X
.*                    ....
.*                   NAMEJ,                    X
.*                    ....
.*                   NAMEN),                   X
.*                   CPU=(MASK1,               X
.*                    ....
.*                   MASKJ,                    X
.*                    ....
.*                   MASKN)
.*
.**********************************************************************
&SGCTRLC(6)  SETC  'IEFSDPPT'          SET PROGRAM NAME
         COPY  SGASMPAK                COPY ASSEMBLY JCL
         AIF   (&CNT NE 0).PARAM       IF THERE ARE PARAMETERS - BRANCH
         PUNCH '         SGIEF0PT'     PUNCH MACRO CALL WITHOUT PARAMS
.*                                     SINCE NO AFFINITY IS REQUESTED
         AGO   .MEND                   TERMINATE ASSEMBLY JCL AND EXIT
.PARAM   ANOP                          PARAM EXIT LABEL
         PUNCH '         SGIEF0PT                                      X
                               X'     PUNCH MACRO CALL WITH PARAM CONT
.*
.*  PGM KEYWORD PROCESSOR
.*
&INDEX   SETA  1                       INITIALIZE INDEX
&MASK    SETC  '            X'         INITIALIZE CONTINUATION MASK
&SGAFFNC(1)  SETC  'PGM=(&SGAFFNC(1)'  APPEND KEYWORD TO FIRST NAME
.PGMLOOP ANOP                          PGM KEYWORD LOOP
&LENGTH  SETA  K'&SGAFFNC(&INDEX)      FIND LENGTH OF CURRENT PARAM.
&CONT    SETC  '&MASK'(&LENGTH,14-&LENGTH)   SET CONT. MARK FOR PARAM.
         AIF   (&INDEX GE &CNT).PGMOUT EXIT FOR FINAL NAME PARAM PUNCH
         PUNCH '               &SGAFFNC(&INDEX),                       X
                                  &CONT'
.*                                     PUNCH THIS NAME PARAM
&INDEX   SETA  &INDEX+1                INCREMENT INDEX FOR NEXT NAME
         AGO   .PGMLOOP                PROCESS NEXT NAME
.PGMOUT  ANOP                          LAST PGM PARAM FOUND LABEL
         PUNCH '               &SGAFFNC(&INDEX)),                      X
                                  &CONT'
.*                                     PUNCH FINAL NAME PARAM
.*
.*  CPU KEYWORD PROCESSOR
.*
&INDEX   SETA  1                       INITIALIZE INDEX
&MASK    SETC  '         X'            INITIALIZE CONTINUATION MASK
&CPUSYN  SETC  'CPU=('                 INITIALIZE CPU KEYWORD SYNTAX
.CPULOOP ANOP                          CPU KEYWORD LOOP
.*  CALCULATE LENGTH OF ARITHMETIC VALUE
         AIF   (&SGAFFNA(&INDEX) LT 10000).LGTH10  LENGTH = 5 IF CPU
.*                                                 MASK GE 10000
&LENGTH  SETA  5
         AGO   .LGTHFND                LENGTH FOUND - EXIT
.LGTH10  ANOP
         AIF   (&SGAFFNA(&INDEX) LT 1000).LGTH20   LENGTH = 4 IF CPU
.*                                                 MASK GE 1000
&LENGTH  SETA  4
         AGO   .LGTHFND                LENGTH FOUND - EXIT
.LGTH20  ANOP
         AIF   (&SGAFFNA(&INDEX) LT 100).LGTH30    LENGTH = 3 IF CPU
.*                                                 MASK GE 100
&LENGTH  SETA  3
         AGO   .LGTHFND
.LGTH30  ANOP
         AIF   (&SGAFFNA(&INDEX) LT 10).LGTH40     LENGTH = 2 IF CPU
.*                                                 MASK GE 10
&LENGTH  SETA  2
         AGO   .LGTHFND
.LGTH40  ANOP
&LENGTH  SETA  1                       THIS THE LEAST POSSIBLE VALUE
.*                                     LEFT AFTER SEARCH
.LGTHFND ANOP                          LENGTH FOUND EXIT LABEL
.*  END  LENGTH CALCULATION
         AIF   (&INDEX NE 1).NOTFST    IF THE FIRST ENTY, ADD LENGTH
.*                                     OF KEYWORD + SYNTAX
&LENGTH  SETA  &LENGTH+5
.NOTFST  ANOP
&CONT    SETC  '&MASK'(&LENGTH,11-&LENGTH)  SET CONT. MARK FOR PARAM.
         AIF   (&INDEX GE &CNT).CPUOUT EXIT FOR FINAL MASK PARAM PUNCH
         PUNCH '               &CPUSYN&SGAFFNA(&INDEX),                X
                                            &CONT'
.*                                     PUNCH THIS CPU AFFINITY MASK
&CPUSYN  SETC  ''                      NULL CPUSYN FOR SUBSEQUENT PUNCH
&INDEX   SETA  &INDEX+1                INCREMENT INDEX FOR NEXT MASK
         AGO   .CPULOOP                PROCESS NEXT MASK
.CPUOUT  ANOP                          LAST MASK FOUND LABEL
         PUNCH '               &CPUSYN&SGAFFNA(&INDEX))'
.*                                     PUNCH LAST MASK PARAM
.*                                     NOTE THAT THE LENGTH IS
.*                                     CALCULATED FOR THIS IN CASE
.*                                     ADDITIONAL  KEYWORDS ARE ADDED
.*
.*  TERMINATE ASSEMBLY JCL
.*
.MEND    ANOP                          EXIT LABEL FOR NO PARAMETERS
         PUNCH '         END'          PUNCH END CARD
         PUNCH '/*'                    PUNCH TERMINATOR
          MEND
