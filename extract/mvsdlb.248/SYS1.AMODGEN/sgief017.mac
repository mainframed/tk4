         MACRO
         SGIEF017
.* CHANGE LEVEL = 07/11/74                                     @Z30ANSF
.*              = 12/01/76                                     @ZA15758
.*                                                             @YM04048
.*A000000-999999                                                 Y02670
         COPY  SGIEF020
         LCLA  &I,&J,&K,&L,&GENTBI(300),&GENTBX(300)
         LCLA  &F,&NMTBX(300),&M,&X,&Z,&H
         LCLC  &XXX,&CMASK,&YYY
         LCLB  &B(300),&W,&T,&MASK(1917),&FLGS(3),&ALTMASK(1917)
.*                                                             @ZA15758
.*
.*  GENERAL COMMENTS.
.*         THIS MACRO PRODUCES THE NMTAB,GENTAB,MASKTAB,AND
.*         GRPTAB SECTIONS OF EDTTAB.   AT THE TOP LEVEL,
.*         PROCESSING IS A SIMPLE SEQUENCE OF CLOSED SUBROUTINE
.*         CALLS AS SHOWN BELOW.  THE SUBROUTINE WORKINGS ARE
.*         DESCRIBED AT TOP OF EACH SUBROUTINE.
.*
.*         (SUBROUTINES ARE ASSIGNED MNEMONIC NAMES AS COMMENTS. THEY
.*          APPEAR IN THIS LISTING IN ALPHABETIC SEQUENCE OF THESE
.*          NAMES.)
.*
.*.MAIN1
         ACTR  21000000                                        @ZA15758
.MAIN2   AGO   .A100          CALL GRPTABMAKER
.MAIN3   AGO   .C100          CALL GENTABMAKER
.MAIN4   AGO   .D100          CALL NMTABMAKER
.MAIN5   AGO   .E100          CALL MASKTABMAKER
.MAIN6   MEXIT
.**********************************************************************
.*  GENTABMAKER
.**********************************************************************
.*
.*  PROCEDURE  -
.*
.*          (GENERATE TABLE HDR)
.*          DO I=1 BY 1 WHILE NMTBX(I+1) NE 0;
.*             (GENERATE COMMENTARY FOR SEGMENT)
                DO J=NMTBX(1) BY 1 TO NMTBX(I+1);
.*                (GENERATE GENERIC ENTRY)
.*             END;
.*          END;
.*          (TABLE CLEANUP)
.*          RETURN;
.*
.**********************************************************************
.*
.*  IMPLEMENTATION
.*
.C100    ANOP
         TITLE 'EDTTAB  -  GENERIC SECTION'
GENTAB   DC    A(NRGENTS)  HEADER
         DC    A(GENTLEN)  SEGMENT
GENTSTRT DS    0A
****************************  BEGIN TABLE BODY  ***********************
&L       SETA  0    INITIALIZE  ENTRY  CTR
&I       SETA  0                             ASSIGN CLAUSE
.C101    ANOP                             **  DO ON NAMES  **
&I       SETA  &I+1                          BY CLAUSE
         AIF   (&NMTBX(&I+1) EQ 0).C105      WHILE CLAUSE
         AIF   (&GPFXT(&I) GT 256).C102
&XXX     SETC  '&NAME(&GPFXT(&I))'
         AGO   .C103
.C102    AIF   (&GPFXT(&I) GT 1024).C102A
&XXX     SETC  '&ENAME(&GPFXT(&I)-256)'
         AGO   .C103
.C102A   ANOP
&XXX     SETC  '&GNAME(&GPFXT(&I)-1024)'
.C103    ANOP
***********************************************************************
   SPACE  3
***********************************************************************
 MNOTE *,'      SEGMENT FOR ''&XXX''  '
*
&J       SETA  &NMTBX(&I)                  ASSIGN CLAUSE
&K       SETA  &NMTBX(&I+1)                  (SETUP SIMPLFIES TO CLAUSE
.C104    AIF   (&J EQ &K).C101       TO CLAUSE
*---------------------------------------------------------------------*
 MNOTE *,'      ENTRY FOR &NAME(&GENTBI(&J)) '
*
&F       SETA  &GENTBI(&J)
&F       SETA  &TYPLIST(&F)*X'10000'+&HLFLIST(&F)
 DC F'&F'                   INTERNAL CODE
 DC A(&GENTBX(&J+1)-&GENTBX(&J))  NR OF GRPS OF THIS GENERIC.
&F  SETA  &GENTBX(&J)-1
 DC A(&F*GRPTLEN+GRPTSTRT)  PTR TO FIRST GRP PTR
&L       SETA  &L+1            BUMP  ENTRY  CTR
&J       SETA  &J+1          BY  CLAUSE
         AGO   .C104
.C105    ANOP
NRGENTS  EQU   &L
GENTLEN  EQU   (*-GENTSTRT)/NRGENTS
******************************  END  OF TABLE  ************************
         AGO   .MAIN4
.**********************************************************************
.*  GRPTABMAKER
.**********************************************************************
.*
.*  COMMENT -
.*
.*         THIS ROUTINE BUILDS THE GRPTAB SECTION OF EDTTAB. IN
.*         VARIABLES  VX-VY  ARE STORED THE (X,Y) COORDINATES OF ONE
.*         VALUES IN A GROUP-TO-NAME INCIDENCE MATRIX HAVING A COLUMN
.*         FOR EVERY NAME THAT WILL APPEAR IN NAMTAB.  (THE MATRIX
.*         EXISTS PHYSICALLY ONLY IN(X,Y) COORDINATE FORM). GRPTAB
.*         MUST CONTAIN EXACTLY ONE ENTRY FOR EACH OF THE COORDINATE
.*         PAIRS.  HOWEVER, BOTH ROWS AND COLUMNS MUST BE PERMUTED SO
.*         THAT BOTH APPEAR IN GENERIC-PRECEDENCE ORDER.
.*
.*         GPFXT CONTAINS THE CORRECT SEQUENCE OF Y-VALUES DESIRED,
.*         GXT CONTAINS THE SEQUENCE OF X-VALUES DESIRED.
.*
.*
.*
.*
.*
.*
.*
.*         COLUMNS ARE SELECTED BY LOOPING ON GPFXT.  THE COLUMN IS
.*         CONSTRUCTED IN'MASK'USING X,Y  VALUES WHERE Y EQUALS THE
.*         INDEX CURRENTLY IN GPFXT;  THEN; TABLE ENTRIES ARE GENERATED
.*         FOR EACH ONE-BIT IN'MASK', USING GXT FOR ORDER OF SELECTION.
.*
.*         AS EACH COLUMN IS SELECTED, A COMMENT IS GENERATED WITH
.*         THE UNITNAME ASSOCIATED WITH THE COLUMN.
.*
.*         AS GROUP ENTRIES ARE GENERATED, THEIR GENERIC-ASSOCIATION
.*         IS CHECKED USING  'GGXREF'.  EACH TIME A NEW GENERIC IS
.*         RECOGNIZED, A COMMENT IS GENERATED.
.*
.*         WHILE THE TABLE IS BEING CONSTRUCTED, INDEX VALUES ARE SAVED
.*         IN  'NMTBX','GENTBX', AND 'GENTBI'  WHICH WILL BECOME THE
.*         POINTER ENTRIES IN GENTAB AND NAMTAB WHEN THEY ARE GENERATED
.*         BY LATER ROUTINES.
.*                          NOTE:Y-VALUES IN THE RANGE  513-767
.*
.*
.*                               SIGNIFY THAT THE X-VALUES ARE TO BE
.*                               ASSOCIATED WITH THE Y-VALUES LESS 512.
.*                               THESE ARE GROUPS ELIGIBLE FOR GENERIC
.*                               UNITNAMES WHICH ACTUALLY BELONG TO
.*                               OTHER GENERIC UNITNAMES.
.*
.*                               Y-VALUES GREATER THAN 1024 SIGNIFY
.*                               GENERATED-GENERIC NAMES, THOSE IN THE
.*                               RANGE 257-511 SIGNIFY ESOTERIC NAMES.
.*
.**********************************************************************
.*
.*
.*  PROCEDURE -
.*
.*          (GENERATE TITLE AND HEADER FIELDS
.*          K=1
.*          L=0
.*          DO I=1 BY 1 WHILE GPFXT(I) NE 0;
.*             NMTBX(I) = K;
.*             DO J=1 BY 1 WHILE VY(J) NE 0 WHERE VY(J) EQ GPFXT(I);
.*                MASK(VX(J)) = 1;
.*             END;
.*             DO J=1 BY 1 WHILE GXT(J) NE 0 WHERE MASK(GXT(J)) EQ 1;
.*                MASK(GXT(J))=0;
.*                L=L+1
.*                IF GENTBI(K) NE GGXREF(GXT(J));
.*                   IF L GT 1;
.*                      K=K+1;
.*                   GENTBI(K)=GGXREF(GXT(J));
.*                   GENTBX(K)=L;
.*                  (GENERATE MNOTE WITH GENERIC ID OF NEXT SECTION
.*                (GENERATE GROUP ENTRY)
.*             END;
.*          END;
.*         (GENERATE TABLE CLEANUP)
.*          RETURN;
.*
.*
.**********************************************************************
.*
.*  IMPLEMENTATION -
.*
.A100    ANOP
         TITLE 'EDTTAB  -  GROUP POINTER SECTION'
GRPTAB   DC    A(GRPTENT)
         DC    A(GRPTLEN)
GRPTSTRT DS    0F
&K       SETA  1         GRPTABMAKER INITIALIZATION
&L       SETA  0
.**********************************  START OUTER DO  ******************
&I       SETA  0                             INITIALIZATION
.A101    ANOP                                BRANCH POINT
&I       SETA  &I+1                          BY CLAUSE
         AIF   (&GPFXT(&I) EQ 0).A900        WHILE CLAUSE
         AIF   (&GPFXT(&I) LT 256).A102          CHOOSE NAME FROM
         AIF   (&GPFXT(&I) LT 1024).A103         PROPER ARRAY --
&XXX     SETC  '&GNAME(&GPFXT(&I)-1024)'  * GENERATED GENERIC
         AGO   .A104
.A102    ANOP
&XXX     SETC  '&NAME(&GPFXT(&I))'        * GENERIC
         AGO   .A104
.A103    ANOP
&XXX     SETC  '&ENAME(&GPFXT(&I)-256)'   * ESOTERIC
.A104    ANOP
***********************************************************************
   SPACE  3
***********************************************************************
*
 MNOTE *,'      BEGIN SECTION FOR UNITNAME  ''&XXX'' '
&NMTBX(&I) SETA &K+1                         (SAVE FOR NMTAB ENTRY)
.***************************  START FIRST INNER DO  *******************
&J       SETA  0
.A201A   ANOP
&J       SETA  &J+1
         AIF   (&VY(&J) EQ 0).A200   WHILE CALUSE -WHERE ON NXT LINE.
         AIF   (&VY(&J) NE &GPFXT(&I) AND &VY(&J)-512 NE &GPFXT(&I)).A2*
               01A
&MASK(&VX(&J))    SETB 1      (MARK THIS GROUP INCLUDED)
         AGO   .A201A      ** BOTTOM OF DO **
.A200    ANOP
.***************************  START SECOND INNER DO  ******************
&T       SETB  1    SIGNAL NEW NAME START
&J       SETA  0
.A201    ANOP
&J       SETA  &J+1                          BY CAUSE
         AIF   (&GXT(&J) EQ 0).A101          WHILE CLAUSE
         AIF   (NOT &MASK(&GXT(&J))).A201    WHERE CLAUSE
&MASK(&GXT(&J))   SETB 0      (CLEAN OUT MASK FOR NXT  I-VALUE USE)
&L       SETA  &L+1          (BUMP GRPTAB ENTRY COUNTER
         AIF   (&T).A2AAA  (NEW GRP IF NEW NAME)
         AIF   (&GENTBI(&K) EQ &GGXREF(&GXT(&J))).A203 (Q.)SAME GENERIC
.A2AAA   ANOP
&T       SETB  0         CLEAR NEW NAME SWITCH
         AIF   (&L EQ 1).A202
&K       SETA  &K+1          (BUMP GENTAB ENTRY COUNTER)
.A202    ANOP
&GENTBI(&K) SETA &GGXREF(&GXT(&J))     (SAVE GENERIC ID FOR GENTAB)
&GENTBX(&K) SETA &L                    (SAVE PTR FOR GENTAB)
*---------------------------------------------------------------------*
*
 MNOTE *,'      SEGMENT FOR GENERIC &NAME(&GGXREF(&GXT(&J))) FOLLOWS'
*
.A203    ANOP
 MNOTE *,'........  GROUP &J ENTRY  ............................'
         DC  A(&J*GDTLEN-GDTLEN+GDTSTRT)
         AGO   .A201
.**********************************  END INNER DO  ********************
.**********************************  END OUTER DO
.*
.*    CLEANUP FOR GRPTAB
.*
.A900    ANOP
GRPTENT  EQU   &L
GRPTLEN  EQU   (*-GRPTSTRT)/GRPTENT
&K       SETA  &K+1
&L       SETA  &L+1
&GENTBX(&K) SETA &L
&NMTBX(&I) SETA &K
&NMTBX(1)  SETA  &NMTBX(1)-1   FIX FIRST ENTRY
************************************ END OF GROUP TABLE  **************
         AGO   .MAIN3
.**********************************************************************
.*  MASKTABMAKER
.**********************************************************************
.*
.*  COMMENT -
.*
.*        THIS ROUTINE PRODUCES THE MASKTAB SECTION OF EDTTAB.
.*        PROCESSING IS SIMILAR TO THAT IN GRPTABMAKER (WHICH SEE).
.*        ESSENTIALLY, THE PROCESSING CONSISTS OF GENERATING THE
.*        BIT MATRIX VERSION OF THE GROUP-TO-NAME INCIDENCE MATRIX
.*        STORED IN VX-VY.
.*
.*        WHEREAS GRPTABMAKER GENERATES A TABLE ENTRY FOR EACH
.*        ONE-VALUE, THIS ROUTINE GENERATES A TABLE ENTRY FOR EACH
.*        COLUMN. THE ENTRY CONSISTS OF A BIT STRING REPRESENTATION
.*        OF THE COLUMN.   IN ADDITION, SPECIAL ENTRIES ARE FORMED
.*        FOR GENERICS WHICH ALLOW SUBSTITUTION OF OTHER GENERICS.
.*        THESE ARE REPRESENTATIONS OF THE GROUP INCIDENCE WITH
.*        RESPECT TO ONLY THE NATIVE GENERIC.
.*
.*        ROW-COLUMN PERMUTATION IS PERFORMED AS IN GRPTABMAKER.
.**********************************************************************
.*
.*
.*  PROCEDURE -
.*
.*          (GENERATE TABLE TOP)
.*          DO I=1 BY 1 WHILE GPFXT(I) NE 0;
.*             DO J=1 BY 1 WHILE VY(J) NE 0 WHERE VY(J) EQ (EITHER
.*                                                GPFXT(I) OR SAME+512)
.*                IF GPFXT(I)+512 EQ VY(J);
.*                   ALTMASK(VX(J)) = 1;
.*                   B(I) = 1;
.*                MASK(VX(J)) = 1;
.*                T= B(I);
.*             END;
.*             (GENERATE COMMENTARY)
.*        A:   (GENERATE SYMBOL FIELD FOR TABLE ENTRY)
.*             CMASK = NULL;
.*             DO J=1 BY 48 WHILE GXT(J) NE 0;
.*                DO K=J BY 1 TO J+47 WHILE GXT(K) NE 0;
.*                   IF NOT T;
.*                      CMASK = CMASK (CATENATED TO MASK(GXT(K)));
.*                      MASK(GXT(K)) = 0;
.*                   ELSE
.*                      CMASK = CMASK (CATENATED TO MASK(GXT(K)) AND
.*                                     NOT ALTMASK(GXT(K))   ) ;
.*                      ALTMASK(GXT(K)) = 0;
.*                END;
.*                (GENERATE MASK SEGMENT FROM CMASK)
.*             END;
.*             IF T;
.*                T=O; GOTO A;
.*          END;
.*          (TABLE CLEANUP)
.*
.**********************************************************************
.*
.*  IMPLEMENTATION -
.*
.E100    ANOP
         TITLE 'EDTTAB  -  NAME GROUPMASK SECTION '
*
* THIS SECTION CONTAINS A MASK FOR EVERY UNITNAME IN SYSTEM
* PLUS ALTERNATE MASKS FOR ANY GENERICS ELIGIBLE FOR OTHER THAN
* THEIR NATIVE TYPE.  EACH MASK CONTAINS A BIT POSITION FOR EVERY
* DEVICE-GROUP IN THE SYSTEM.
*                  BIT=1  - GROUP IS ELIGIBLE FOR THE NAME
*
*                      O  - GROUP IS NOT ELIGIBLE
*     NOTE:
*         ALTERNATE MASKS DESCRIBE ONLY THE NATIVE UNITS.
*
*         THE INDEX OF A BIT POSITION (LEFT 1-ORIGIN) IS THE
*         SAME AS GROUP ID ASSIGNED TO THE ASSOCIATED GROUP IN
*         THE GROUP DESCRIPTOR SECTION OF EDTTAB
*
***********************************************************************
MASKTAB  DC    A(MASKENT)       HEADER
         DC    A(MSKSIZE)          SEGMENT
MSKTSTRT DS    0A
****************************  BEGIN TABLE BODY  ***********************
*
***********************************************************************
&M       SETA  0              INIT FOR TABLE ENTRY COUNTER
&I       SETA  0                   ASSIGN CLAUSE FOR OUTER DO
.E101    ANOP                      TOP OF DO
&I       SETA  &I+1                BY CLAUSE
         AIF   (&GPFXT(&I) EQ 0).E307            WHILE CLAUSE
&B(&I)   SETB  0                  (CLEAR ALTERNATE MASK SWITCH)
&J       SETA  0                   ASSIGN CLAUSE, 1'ST INNER DO
.E201    ANOP                      TOP OF DO
&J       SETA  &J+1                BY CLAUSE
         AIF   (&VY(&J) EQ 0).E203                 WHILE CAUSE
         AIF   (&VY(&J) EQ &GPFXT(&I)).E202        WHERE CLAUSE
         AIF   (&VY(&J) NE &GPFXT(&I)+512).E201    WHERE CLAUSE
&B(&I)   SETB  1                   FLAG FOR ALTERNATE MASK
&ALTMASK(&VX(&J))  SETB 1       *                         *
.E202    ANOP                   *  MARK APPROPRIATE MASK  *
&MASK(&VX(&J))  SETB 1          *                         *
         AGO   .E201               END DO
.E203    ANOP
&T       SETB  (&B(&I))
         AIF   (&GPFXT(&I) LT 256).E300A
         AIF   (&GPFXT(&I) LT 1024).E300B
&XXX     SETC  '&GNAME(&GPFXT(&I)-1024)'
         AGO   .E300C
.E300A   ANOP
&XXX     SETC  '&NAME(&GPFXT(&I))'
         AGO   .E300C
.E300B   ANOP
&XXX     SETC  '&ENAME(&GPFXT(&I)-256)'
.E300C   ANOP
*
 MNOTE *,'   MASK(S) FOR ''&XXX''  (IF 2 MASKS,FIRST IS ALTERNATE)'
*
.E300    ANOP
&M       SETA  &M+1                          COUNT ENTRIES
&L       SETA  &GPFXT(&I)+&T*512
M&L      DS    0C
&CMASK   SETC  ''
&J       SETA  1-48
.E301    ANOP
&J       SETA  &J+48
         AIF   (&GXT(&J) EQ 0).E305    WHILE CLAUSE
&K       SETA  &J-1
.E302    ANOP
&K       SETA  &K+1
         AIF   (&GXT(&K) EQ 0).E304    WHILE CLAUSE
         AIF   (&K GT &J+47).E304      TO CLAUSE
         AIF   (&T).E303
&CMASK   SETC  '&CMASK'.'&MASK(&GXT(&K))'
&MASK(&GXT(&K))  SETB 0     (CLEAN UP FOR NEXT USAGE)
         AGO   .E302
.E303    ANOP
&W       SETB  (&MASK(&GXT(&K)) AND NOT &ALTMASK(&GXT(&K)))
&CMASK   SETC  '&CMASK'.'&W'
&ALTMASK(&GXT(&K))  SETB 0  (CLEAN UP FOR NEXT USAGE)
         AGO   .E302
.E304    ANOP
&L       SETA  K'&CMASK
         DC    BL.&L'&CMASK'
&CMASK   SETC  ''
         AGO   .E301
.E305    AIF   (NOT &T).E306    (IF WE JUST DID ALTERNATE MASK)
&T       SETB  0                (THEN REPEAT WHOLE MASK BUILD )
         AGO   .E300            (WITH MAIN MASK.              )
.E306    AGO   .E101    ELSE PROCESS NEXT NAME.
.E307    ANOP
.*
.*  TABLE CLEANUP
.*
MASKENT  EQU   &M
MSKSIZE  EQU   (*-MSKTSTRT)/MASKENT
.*
****************************  END OF MASK TABLE  **********************
         AGO   .MAIN6
.***************************  END MASKTABMAKER  ***********************
.**********************************************************************
.*  NMTABMAKER
.**********************************************************************
.*
.*  PROCEDURE -
.*
.*          (GENERATE TABLE HDR)
.*          DO I=1 BY 1 WHILE NMTBX(I+1) NE 0;
.*             (GENERATE TABLE ENTRY)
.*          END;
.*          (TABLE CLEANUP)
.*          RETURN;
.*
.**********************************************************************
.*
.*  IMPLEMENTATION -
.*
.*
.D100    ANOP
         TITLE 'EDTTAB  -  NAME LOOKUP SECTION'
NMTAB    DC    A(NRNAMES)   HEADER
         DC    A(NMTBLEN)   SEGMENT
**************************************  BEGIN TABLE BODY  *************
NMTBSTRT DS    0A
&I       SETA  0                             ASSIGN CLAUSE
.D101    ANOP
&I       SETA  &I+1                          BY CLAUSE
         AIF   (&NMTBX(&I+1) EQ 0).D103      WHILE CLAUSE
*---------------------------------------------------------------------*
         AGO   .M100          CALL   NMENTRYGENERATOR
.D102    AGO   .D101              LOOP
.D103    ANOP
NRNAMES  EQU   &I-1
NMTBLEN  EQU  (*-NMTBSTRT)/NRNAMES
******************************  END  OF  TABLE  ***********************
         AGO   .MAIN5
.**********************************************************************
.*  NMENTRYGENERATOR
.**********************************************************************
.*
.*  COMMENT -
.*
.*     THIS SUBRTN PRODUCES ONE ENTRY FOR NMTAB, AS FOLLOWS:
.*
.*     NAME FIELD -  RETRIEVED FROM NAME IF GENERIC,
.*                   FROM ENAME IF ESOTERIC,FROM GNAME IF GEN'ED GENRIC
.*     CODE FIELD -  IF GENERIC, FROM TYPLIST/HLFLIST PAIR.
.*                   IF ESOTERIC, THE LEFT HALF IS THE ENAME INDEX,
.*                   WHILE THE RIGHT HALF IS THE LOGICAL OR OF
.*                   HLFLIST VALUES OF ALL GENERIC TYPES IN THE NAME,
.*                   WITH LEAST SIGNIFICANT BYTE SET TO ZERO.
.*
.*                   THE OR OPERATION IS DONE IN THE LOOP AT .M103
.*                   THIS DO USES THE GROUP MASK      FOR THE NAME TO
.*                   FIND WHICH DEVICE GROUPS ARE REPRESENTED, THEN
.*                   ALL REPRESENTED GROUPS ARE LOOKED UP IN GGXREF TO
.*                   FIND THE GENERIC ID, WHICH FINALLY LOCATES THE
.*                   HLFLIST VALUE.
.*
.*   GENT PTR FLD - PRODUCED FROM NMTBX VALUES
.*   NR OF TYPES  -      DITTO
.*   FLAGS FIELD  - PRODUCED FROM  VAM, ALT, &MLT VARIABLES.
.*   MASK PTRS    - COMPUTED FROM  NAME CODES
.*
.*
.*
.**********************************************************************
.*
.*   PROCEDURE  -
.*
.*             (OMITTED FOR THIS ROUTINE BECAUSE CONTROL LOGIC IS
.*              VERY SIMPLE.  THE COMPUTATIONS ARE FAIRLY COMPLEX,
.*              BUT CAN BE FOLLOWED FROM THE EXPLANATION ABOVE.)
.*
.**********************************************************************
.*                   IF NAME IS GEN'ED GENERIC RETRIEVE CODE FROM
.*                   GKLIST.
.*
.*
.*  IMPLEMENTATION -
.*
.M100    ANOP
&H       SETA  &GPFXT(&I)
&FLGS(1) SETB  (&VAM(&I))
&FLGS(2) SETB  (&ALT(&I))
&FLGS(3) SETB  (&MLT(&I))
.*
.*   FIND OUT WHICH CLASS OF ENTRY THIS IS AND
.*                         PLACE NAME IN XXX
.*                         PLACE UNTERNAL CODE IN M
.*
         AIF           (&H GT 256).M102
.*
.*    ORDINARY GENERIC ENTRY PROCESSING.   (CODES 1-255)
.*
&XXX     SETC  '&NAME(&H)'
&M       SETA  &TYPLIST(&H)*X'10000'+&HLFLIST(&H)
         AGO   .M109
.M102    AIF           (&H GT 512).M105
.*
.*    ESOTERIC NAME ENTRY PROCESSING.      (CODES 257-511)
.*
&XXX     SETC  '&ENAME(&GPFXT(&I)-256)'
&M       SETA  0
&J       SETA  0
.M103    ANOP
&J       SETA  &J+1
         AIF  (&VY(&J) EQ 0).M104
         AIF  (&VY(&J) NE &H).M103
.*
.*  NOTE
.*
.*        HLFLIST CONTAINS THE LOW HALFWORD OF A GENERIC TYPE'S
.*        INTERNAL CODE.  THE FIRST BYTE OF THIS HALFWORD HAS ONLY
.*        ONE BIT SET.  THE FOLLOWING 3 INSTRUCTIONS  'OR' TOGETHER
.*        THESE BIT SETTINGS FOR ALL GENERIC TYPES ASSOCIATED WITH
.*        THIS ESOTERIC ENTRY.  FIRST THE DESIRED BIT IS PLACED IN X.
.*        THEN,THAT POSITION OF THE ACCUMULATOR (M), IS PLACED IN THE
.*        LOW BIT POSITION OF Z.  FINALLY, THE X-VALUE IS ADDED TO M
.*        IF THE BIT POSITION IS NOT ALREADY SET (AS INDICATED BY Z).
.*        (THE INNERMOST EXPRESSION EVALUATES TO 1 IF THE BIT WAS
.*        ALREADY SET, 0 IF NOT. THUS, THE WHOLE EXPRESSION IS
.*        M+X-X  OR  M+X-0 ).
.*
&X       SETA       &HLFLIST(&GGXREF(&VX(&J)))/X'0100'*X'100'
&Z       SETA  &M/&X     (X IS AN EXACT POWER OF 2, ONLY ONE BIT ON)
&M       SETA  &M+(&X-(&Z-&Z/2*2)*&X) (LOGICAL SUM ALL COMPONENT CODES)
         AGO   .M103
.M104    ANOP
&M       SETA      (&H-256)*X'10000'+&M
         AGO   .M109
.*
.*    GENERATED-GENERIC PROCESSING.        (CODES 1025-1279)
.*
.M105    ANOP
&XXX     SETC  '&GNAME(&H-1024)'
&M       SETA  &GKLIST(&H-1024)
         AGO   .M109
.*
.*    FINALLY,PRODUCE THE ENTRY DATA FOR THIS NAME ENTRY
.*
.M109    ANOP
 DC   CL8'&XXX'     LOOKUP NAME FOR THIS ENTRY
 DC   F'&M'       INTERNAL CODE FOR THIS ENTRY
 DC   A(M&H)            MAIN MASK
&M       SETA  (&NMTBX(&I+1)-&NMTBX(&I))
 DC   F'&M'   NR OF GENERICS INCLUDED UNDER THIS NAME
&M       SETA  (&NMTBX(&I)-1)
 DC   A(GENTSTRT+GENTLEN*&M)    PTR TO 1'ST REL. ENTRY IN GENTAB
&YYY     SETC  '&FLGS(1)'.'&FLGS(2)'.'&FLGS(3)'
&M       SETA  K'&YYY
 DC  BL.&M'&YYY'   FLAG SETTINGS
 DS 0F      PAD OUT TO WORD BOUNDARY
         AIF   (NOT &FLGS(2)).M110
&M       SETA  &H+512
 DC   A(M&M)      ALTERNATE
         AGO   .M111
.M110    ANOP
 DC   A(0)        NO ALTERNATE FOR THIS ENTRY
.M111    ANOP
         AGO   .D102         RETURN TO MAIN LOOP FOR NXT ENTRY
.*
         MEND
