         MACRO
     IECULK3 &OUA,&NUA,&UCBNUM,&NCUSW,&CUINDX,&LSTDEV,&CHAN,&NCU,&NEG
         LCLA  &COUNT
         LCLA  &INDEX                  INDEX FOR BITMAP ENTRIES
         LCLC  &STRING                 USED TO HOLD ONE BYTE OF BITMAP
         LCLB  &T1FIL
         ACTR  2000
.*
.*  THIS MACRO GENERATES ENTRIES IN THE THIRD(LAST) SECTION OF
.*  THE UCB LOOK-UP TABLE. FOR EVERY DEVICE SYSGENED, SGIEC202
.*  WILL PUNCH A STATEMENT INVOKING THIS MACRO. SECTION THREE
.*  OF THE LOOK-UP TABLE CONSISTS OF A VARIABLE NUMBER OF TWO
.*  BYTE ENTRIES. ENTRIES WHICH CONTAIN ZERO ARE FILLER ENTRIES
.*  WHICH INSURE THE INTEGRITY OF THE LOOK-UP ALGORITHM. THE
.*  END OF THE TABLE IS DENOTED BY A TWO BYTE ENTRY OF X'FFFF'.
.*  ALL OTHER ENTRIES CONSIST OF THE TWO BYTE ADDRESS OF THE
.*  UCB CORRESPONDING TO THE DEVICE ADDRESS. AN ENTRY EXISTS
.*  FOR EACH UNIQUE CHANNEL/CONTROL-UNIT/DEVICE ADDRESS SYSGENED.
.*  THUS, THE SAME UCB MAY HAVE MORE THAN ONE TABLE ENTRY
.*  POINTING TO IT DEPENDING ON THE OPTIONAL CHANNEL FEATURE.
.*
.*  FILLER ENTRIES ARE GENERATED FOR TWO REASONS -
.*
.*       1. FILLER ENTRIES ARE GENERATED TO PAD UP TO THE FIRST
.*          DEVICE SYSGENED. THAT IS, FILLERS ARE GENERATED TO
.*          ACCOUNT FOR POSSIBLE DEVICES ON THE CONTROL UNIT
.*          LOWER THAN THE LOWEST DEVICE ADDRESS SYSGENED.
.*          EXAMPLES ARE -
.*
.*             009  -  9 FILLERS
.*             01F  - 15 FILLERS
.*
.*       2. FILLER ENTRIES ARE GENNED TO FILL IN DEVICE ADDRESS
.*          GAPS WITH THE SAME CHANNEL/CONTROL-UNIT ADDRESS.
.*          CONSIDER CHANNEL 1, CONTROL UNIT 3. IF DEVICES
.*          130-137 AND 13A-13F ARE ATTACHED, TWO FILLERS WOULD
.*          EXIST TN THE LOOK-UP TABLE TO ACCOUNT FOR DEVICES 8,9.
.*
.*  SYMBOLIC PARAMETERS -
.*
.*       &OUA       LAST UNIT ADDRESS   ** USED FOR TYPE 2
.*       &NUA       NEW UNIT ADDRESS    **  FILLERS
.*       &UCBNUM    UCB NUMBER (SEQUENTIAL)
.*       &NCUSW     NEW CONTROL UNIT SWITCH - TYPE 1 FILL
.*       &CUINDX    CONTROL UNIT INDEX - TYPE 1 FILL
.*       &LSTDEV    LAST CALL SWITCH
.*       &CHAN      CHANNEL NUMBER        ** CURRENTLY NOT
.*       &NCU       CONTROL UNIT NUMBER   **  USED
.*       &NEG       INDICATION FOR TYPE1 FILLERS
.*
.*  GLOBAL PARAMETERS
         GBLB  &BITMAP0(256)           BITMAP FOR CHANNEL 0      C21050
         GBLB  &BITMAP1(256)           BITMAP FOR CHANNEL 1      C21050
         GBLB  &BITMAP2(256)           BITMAP FOR CHANNEL 2      C21050
         GBLB  &BITMAP3(256)           BITMAP FOR CHANNEL 3      C21050
         GBLB  &BITMAP4(256)           BITMAP FOR CHANNEL 4      C21050
         GBLB  &BITMAP5(256)           BITMAP FOR CHANNEL 5      C21050
         GBLB  &BITMAP6(256)           BITMAP FOR CHANNEL 6      C21050
         GBLB  &BITMAP7(256)           BITMAP FOR CHANNEL 7      C21050
         GBLB  &BITMAP8(256)           BITMAP FOR CHANNEL 8      C21050
         GBLB  &BITMAP9(256)           BITMAP FOR CHANNEL 9      C21050
         GBLB  &BITMAPA(256)           BITMAP FOR CHANNEL A      C21050
         GBLB  &BITMAPB(256)           BITMAP FOR CHANNEL B      C21050
         GBLB  &BITMAPC(256)           BITMAP FOR CHANNEL C      C21050
         GBLB  &BITMAPD(256)           BITMAP FOR CHANNEL D      C21050
         GBLB  &BITMAPE(256)           BITMAP FOR CHANNEL E      C21050
         GBLB  &BITMAPF(256)           BITMAP FOR CHANNEL F      C21050
         GBLA  &HICHNL                 HIGHEST CHANNEL NO. GENERATED
.*
.*
.*
         AIF   (&LSTDEV EQ 1).EOTRTN    GENERATE END OF TABLE ID
.*                                      * IF LAST CALL SWITCH SET
&COUNT   SETA  &OUA                     LAST DEVICE NUMBER - SET
.*                                      * UP FOR POSSIBLE FILL(2)
         AIF   (&NCUSW EQ 1).CHKIX      IF NEW CONTROL UNIT, GO
.*                                      CHECK FOR POSSIBLE FIL(1)
.*
.*  TYPE 2 FILL ROUTINE - FILLERS GENERATED TO FILL GAP BETWEEN
.*  &OUA AND &NUA.
.*
.FIL2LP  AIF   (&COUNT+1 GE &NUA).CHKT3FL NO - GO CHECK TP 3 FILL
.SETFIL  DC    AL2(0)                   NORMAL FILL
.*
         AIF   (&T1FIL).FIL1LP          CONTINUE TYPE 1 FILL LOOP
&COUNT   SETA  &COUNT+1
         AGO   .FIL2LP                  CONTINUE TYPE 2 FILL LOOP
.*
.*  DETERMINE IF TYPE 1 FILL NEEDED
.*
.CHKIX   ANOP
&COUNT   SETA  &CUINDX
         AIF   (&NEG EQ 1).CHKT1FL      POSSIBLY, CHECK FURTHER
.*
.CHKT3FL ANOP
.*
.*  GENERATE ENTRY FOR UCB - UCB INSERT ROUTINE
.*
         DC    AL2(UCB&UCBNUM-IPLPSW)
.*
.*  SET VALIDITY BIT IN THE UCB BITMAP TO ONE FOR THE DEVICE     C21050
.*
&HICHNL  SETA  &CHAN
&INDEX   SETA  (&NCU*16+&NUA+1)                                  C21050
         AIF   (&CHAN EQ 0).SETCHN0                              C21050
         AIF   (&CHAN EQ 1).SETCHN1                              C21050
         AIF   (&CHAN EQ 2).SETCHN2                              C21050
         AIF   (&CHAN EQ 3).SETCHN3                              C21050
         AIF   (&CHAN EQ 4).SETCHN4                              C21050
         AIF   (&CHAN EQ 5).SETCHN5                              C21050
         AIF   (&CHAN EQ 6).SETCHN6                              C21050
         AIF   (&CHAN EQ 7).SETCHN7                              C21050
         AIF   (&CHAN EQ 8).SETCHN8                              C21050
         AIF   (&CHAN EQ 9).SETCHN9                              C21050
         AIF   (&CHAN EQ 10).SETCHNA                             C21050
         AIF   (&CHAN EQ 11).SETCHNB                             C21050
         AIF   (&CHAN EQ 12).SETCHNC                             C21050
         AIF   (&CHAN EQ 13).SETCHND                             C21050
         AIF   (&CHAN EQ 14).SETCHNE                             C21050
         AIF   (&CHAN EQ 15).SETCHNF                             C21050
.SETCHN0 ANOP                                                    C21050
&BITMAP0(&INDEX)  SETB  1                                        C21050
         AGO   .END                                              C21050
.SETCHN1 ANOP                                                    C21050
&BITMAP1(&INDEX)  SETB  1                                        C21050
         AGO   .END                                              C21050
.SETCHN2 ANOP                                                    C21050
&BITMAP2(&INDEX)  SETB  1                                        C21050
         AGO   .END                                              C21050
.SETCHN3 ANOP                                                    C21050
&BITMAP3(&INDEX)  SETB  1                                        C21050
         AGO   .END                                              C21050
.SETCHN4 ANOP                                                    C21050
&BITMAP4(&INDEX)  SETB  1                                        C21050
         AGO   .END                                              C21050
.SETCHN5 ANOP                                                    C21050
&BITMAP5(&INDEX)  SETB  1                                        C21050
         AGO   .END                                              C21050
.SETCHN6 ANOP                                                    C21050
&BITMAP6(&INDEX)  SETB  1                                        C21050
         AGO   .END                                              C21050
.SETCHN7 ANOP                                                    C21050
&BITMAP7(&INDEX)  SETB  1                                        C21050
         AGO   .END                                              C21050
.SETCHN8 ANOP                                                    C21050
&BITMAP8(&INDEX)  SETB  1                                        C21050
         AGO   .END                                              C21050
.SETCHN9 ANOP                                                    C21050
&BITMAP9(&INDEX)  SETB  1                                        C21050
         AGO   .END                                              C21050
.SETCHNA ANOP                                                    C21050
&BITMAPA(&INDEX)  SETB  1                                        C21050
         AGO   .END                                              C21050
.SETCHNB ANOP                                                    C21050
&BITMAPB(&INDEX)  SETB  1                                        C21050
         AGO   .END                                              C21050
.SETCHNC ANOP                                                    C21050
&BITMAPC(&INDEX)  SETB  1                                        C21050
         AGO   .END                                              C21050
.SETCHND ANOP                                                    C21050
&BITMAPD(&INDEX)  SETB  1                                        C21050
         AGO   .END                                              C21050
.SETCHNE ANOP                                                    C21050
&BITMAPE(&INDEX)  SETB  1                                        C21050
         AGO   .END                                              C21050
.SETCHNF ANOP                                                    C21050
&BITMAPF(&INDEX)  SETB  1                                        C21050
.END     MEXIT
.*
.*  TYPE 1 FILL ROUTINE - FILLERS GENERATED UP TO 1ST DEVICE
.*  SYSGENED STARTING FROM LOWEST ADDRESS OF CONTROL UNIT.
.*
.FIL1LP  ANOP
&COUNT   SETA  &COUNT-2                 FILL UNTIL WE GET TO ZERO
.CHKT1FL AIF   (&COUNT EQ 0).CHKT3FL    END OF TYPE 1 FILL
&T1FIL   SETB  1
         AGO   .SETFIL                  NO, CONTINUE
.*
.*  LAST CALL - GENERATE END OF TABLE INDICATOR
.*          AND UCB BITMAPS FOR USE IN VALIDITY
.*          CHECKING IN UCB LOOKUP ALGORITHMS
.*
.EOTRTN  ANOP
PURGPTR  DC    X'FFFF'             END OF UCB LOOKUP TABLE
IECVUCBM DS    0F                  UCB VALIDITY TABLE (BITMAPS)
&INDEX   SETA  1                   INITIALIZE BIT INDEX TO 1
*              BITMAP FOR CHANNEL 0
.LOOP1   ANOP
.*  ASSEMBLE A BYTE OF THE BITMAP
&STRING  SETC  '&BITMAP0(&INDEX)&BITMAP0(&INDEX+1)&BITMAP0(&INDEX+2)&BI*
               TMAP0(&INDEX+3)&BITMAP0(&INDEX+4)&BITMAP0(&INDEX+5)&BITM*
               AP0(&INDEX+6)&BITMAP0(&INDEX+7)'
         DC    B'&STRING'              CHANNEL 0
&INDEX   SETA  &INDEX+8            INCREMENT TO NEXT BYTE OF BITMAP
         AIF   (&INDEX LT 257).LOOP1  CONTINUE LOOP UNTIL ENTIRE
.*                                    BITMAP IS ASSEMBLED
*              END OF CHANNEL 0 BITMAP
*
         AIF   (&HICHNL EQ 0).FINISH  IF THIS WAS HIGHEST CHANNEL
.*                                    GENERATED, QUIT
&INDEX   SETA  1                   INITIALIZE BIT INDEX TO 1
*              BITMAP FOR CHANNEL 1
.LOOP2   ANOP
.*  ASSEMBLE A BYTE OF THE BITMAP
&STRING  SETC  '&BITMAP1(&INDEX)&BITMAP1(&INDEX+1)&BITMAP1(&INDEX+2)&BI*
               TMAP1(&INDEX+3)&BITMAP1(&INDEX+4)&BITMAP1(&INDEX+5)&BITM*
               AP1(&INDEX+6)&BITMAP1(&INDEX+7)'
         DC    B'&STRING'              CHANNEL 1
&INDEX   SETA  &INDEX+8            INCREMENT TO NEXT BYTE OF BITMAP
         AIF   (&INDEX LT 257).LOOP2  CONTINUE LOOP UNTIL ENTIRE
.*                                    BITMAP IS ASSEMBLED
*              END OF CHANNEL 1 BITMAP
*
         AIF   (&HICHNL EQ 1).FINISH  IF THIS WAS HIGHEST CHANNEL
.*                                    GENERATED, QUIT
&INDEX   SETA  1                   INITIALIZE BIT INDEX TO 1
*              BITMAP FOR CHANNEL 2
.LOOP3   ANOP
.*  ASSEMBLE A BYTE OF THE BITMAP
&STRING  SETC  '&BITMAP2(&INDEX)&BITMAP2(&INDEX+1)&BITMAP2(&INDEX+2)&BI*
               TMAP2(&INDEX+3)&BITMAP2(&INDEX+4)&BITMAP2(&INDEX+5)&BITM*
               AP2(&INDEX+6)&BITMAP2(&INDEX+7)'
         DC    B'&STRING'              CHANNEL 2
&INDEX   SETA  &INDEX+8            INCREMENT TO NEXT BYTE OF BITMAP
         AIF   (&INDEX LT 257).LOOP3  CONTINUE LOOP UNTIL ENTIRE
.*                                    BITMAP IS ASSEMBLED
*              END OF CHANNEL 2 BITMAP
*
         AIF   (&HICHNL EQ 2).FINISH  IF THIS WAS HIGHEST CHANNEL
.*                                    GENERATED, QUIT
&INDEX   SETA  1                   INITIALIZE BIT INDEX TO 1
*              BITMAP FOR CHANNEL 3
.LOOP4   ANOP
.*  ASSEMBLE A BYTE OF THE BITMAP
&STRING  SETC  '&BITMAP3(&INDEX)&BITMAP3(&INDEX+1)&BITMAP3(&INDEX+2)&BI*
               TMAP3(&INDEX+3)&BITMAP3(&INDEX+4)&BITMAP3(&INDEX+5)&BITM*
               AP3(&INDEX+6)&BITMAP3(&INDEX+7)'
         DC    B'&STRING'              CHANNEL 3
&INDEX   SETA  &INDEX+8            INCREMENT TO NEXT BYTE OF BITMAP
         AIF   (&INDEX LT 257).LOOP4  CONTINUE LOOP UNTIL ENTIRE
.*                                    BITMAP IS ASSEMBLED
*              END OF CHANNEL 3 BITMAP
*
         AIF   (&HICHNL EQ 3).FINISH  IF THIS WAS HIGHEST CHANNEL
.*                                    GENERATED, QUIT
&INDEX   SETA  1                   INITIALIZE BIT INDEX TO 1
*              BITMAP FOR CHANNEL 4
.LOOP5   ANOP
.*  ASSEMBLE A BYTE OF THE BITMAP
&STRING  SETC  '&BITMAP4(&INDEX)&BITMAP4(&INDEX+1)&BITMAP4(&INDEX+2)&BI*
               TMAP4(&INDEX+3)&BITMAP4(&INDEX+4)&BITMAP4(&INDEX+5)&BITM*
               AP4(&INDEX+6)&BITMAP4(&INDEX+7)'
         DC    B'&STRING'              CHANNEL 4
&INDEX   SETA  &INDEX+8            INCREMENT TO NEXT BYTE OF BITMAP
         AIF   (&INDEX LT 257).LOOP5  CONTINUE LOOP UNTIL ENTIRE
.*                                    BITMAP IS ASSEMBLED
*              END OF CHANNEL 4 BITMAP
*
         AIF   (&HICHNL EQ 4).FINISH  IF THIS WAS HIGHEST CHANNEL
.*                                    GENERATED, QUIT
&INDEX   SETA  1                   INITIALIZE BIT INDEX TO 1
*              BITMAP FOR CHANNEL 5
.LOOP6   ANOP
.*  ASSEMBLE A BYTE OF THE BITMAP
&STRING  SETC  '&BITMAP5(&INDEX)&BITMAP5(&INDEX+1)&BITMAP5(&INDEX+2)&BI*
               TMAP5(&INDEX+3)&BITMAP5(&INDEX+4)&BITMAP5(&INDEX+5)&BITM*
               AP5(&INDEX+6)&BITMAP5(&INDEX+7)'
         DC    B'&STRING'              CHANNEL 5
&INDEX   SETA  &INDEX+8            INCREMENT TO NEXT BYTE OF BITMAP
         AIF   (&INDEX LT 257).LOOP6  CONTINUE LOOP UNTIL ENTIRE
.*                                    BITMAP IS ASSEMBLED
*              END OF CHANNEL 5 BITMAP
*
         AIF   (&HICHNL EQ 5).FINISH  IF THIS WAS HIGHEST CHANNEL
.*                                    GENERATED, QUIT
&INDEX   SETA  1                   INITIALIZE BIT INDEX TO 1
*              BITMAP FOR CHANNEL 6
.LOOP7   ANOP
.*  ASSEMBLE A BYTE OF THE BITMAP
&STRING  SETC  '&BITMAP6(&INDEX)&BITMAP6(&INDEX+1)&BITMAP6(&INDEX+2)&BI*
               TMAP6(&INDEX+3)&BITMAP6(&INDEX+4)&BITMAP6(&INDEX+5)&BITM*
               AP6(&INDEX+6)&BITMAP6(&INDEX+7)'
         DC    B'&STRING'              CHANNEL 6
&INDEX   SETA  &INDEX+8            INCREMENT TO NEXT BYTE OF BITMAP
         AIF   (&INDEX LT 257).LOOP7  CONTINUE LOOP UNTIL ENTIRE
.*                                    BITMAP IS ASSEMBLED
*              END OF CHANNEL 6 BITMAP
*
         AIF   (&HICHNL EQ 6).FINISH  IF THIS WAS HIGHEST CHANNEL
.*                                    GENERATED, QUIT
&INDEX   SETA  1                   INITIALIZE BIT INDEX TO 1
*              BITMAP FOR CHANNEL 7
.LOOP8   ANOP
.*  ASSEMBLE A BYTE OF THE BITMAP
&STRING  SETC  '&BITMAP7(&INDEX)&BITMAP7(&INDEX+1)&BITMAP7(&INDEX+2)&BI*
               TMAP7(&INDEX+3)&BITMAP7(&INDEX+4)&BITMAP7(&INDEX+5)&BITM*
               AP7(&INDEX+6)&BITMAP7(&INDEX+7)'
         DC    B'&STRING'              CHANNEL 7
&INDEX   SETA  &INDEX+8            INCREMENT TO NEXT BYTE OF BITMAP
         AIF   (&INDEX LT 257).LOOP8  CONTINUE LOOP UNTIL ENTIRE
.*                                    BITMAP IS ASSEMBLED
*              END OF CHANNEL 7 BITMAP
*
         AIF   (&HICHNL EQ 7).FINISH  IF THIS WAS HIGHEST CHANNEL
.*                                    GENERATED, QUIT
&INDEX   SETA  1                   INITIALIZE BIT INDEX TO 1
*              BITMAP FOR CHANNEL 8
.LOOP9   ANOP
.*  ASSEMBLE A BYTE OF THE BITMAP
&STRING  SETC  '&BITMAP8(&INDEX)&BITMAP8(&INDEX+1)&BITMAP8(&INDEX+2)&BI*
               TMAP8(&INDEX+3)&BITMAP8(&INDEX+4)&BITMAP8(&INDEX+5)&BITM*
               AP8(&INDEX+6)&BITMAP8(&INDEX+7)'
         DC    B'&STRING'              CHANNEL 8
&INDEX   SETA  &INDEX+8            INCREMENT TO NEXT BYTE OF BITMAP
         AIF   (&INDEX LT 257).LOOP9  CONTINUE LOOP UNTIL ENTIRE
.*                                    BITMAP IS ASSEMBLED
*              END OF CHANNEL 8 BITMAP
*
         AIF   (&HICHNL EQ 8).FINISH  IF THIS WAS HIGHEST CHANNEL
.*                                    GENERATED, QUIT
&INDEX   SETA  1                   INITIALIZE BIT INDEX TO 1
*              BITMAP FOR CHANNEL 9
.LOOP10  ANOP
.*  ASSEMBLE A BYTE OF THE BITMAP
&STRING  SETC  '&BITMAP9(&INDEX)&BITMAP9(&INDEX+1)&BITMAP9(&INDEX+2)&BI*
               TMAP9(&INDEX+3)&BITMAP9(&INDEX+4)&BITMAP9(&INDEX+5)&BITM*
               AP9(&INDEX+6)&BITMAP9(&INDEX+7)'
         DC    B'&STRING'              CHANNEL 9
&INDEX   SETA  &INDEX+8            INCREMENT TO NEXT BYTE OF BITMAP
         AIF   (&INDEX LT 257).LOOP10  CONTINUE LOOP UNTIL ENTIRE
.*                                     BITMAP IS ASSEMBLED
*              END OF CHANNEL 9 BITMAP
*
         AIF   (&HICHNL EQ 9).FINISH   IF THIS WAS HIGHEST CHANNEL
.*                                     GENERATED, QUIT
&INDEX   SETA  1                   INITIALIZE BIT INDEX TO 1
*              BITMAP FOR CHANNEL A
.LOOP11  ANOP
.*  ASSEMBLE A BYTE OF THE BITMAP
&STRING  SETC  '&BITMAPA(&INDEX)&BITMAPA(&INDEX+1)&BITMAPA(&INDEX+2)&BI*
               TMAPA(&INDEX+3)&BITMAPA(&INDEX+4)&BITMAPA(&INDEX+5)&BITM*
               APA(&INDEX+6)&BITMAPA(&INDEX+7)'
         DC    B'&STRING'              CHANNEL A
&INDEX   SETA  &INDEX+8            INCREMENT TO NEXT BYTE OF BITMAP
         AIF   (&INDEX LT 257).LOOP11  CONTINUE LOOP UNTIL ENTIRE
.*                                     BITMAP IS ASSEMBLED
*              END OF CHANNEL A BITMAP
*
         AIF   (&HICHNL EQ 10).FINISH  IF THIS WAS HIGHEST CHANNEL
.*                                     GENERATED, QUIT
&INDEX   SETA  1                   INITIALIZE BIT INDEX TO 1
*              BITMAP FOR CHANNEL B
.LOOP12  ANOP
.*  ASSEMBLE A BYTE OF THE BITMAP
&STRING  SETC  '&BITMAPB(&INDEX)&BITMAPB(&INDEX+1)&BITMAPB(&INDEX+2)&BI*
               TMAPB(&INDEX+3)&BITMAPB(&INDEX+4)&BITMAPB(&INDEX+5)&BITM*
               APB(&INDEX+6)&BITMAPB(&INDEX+7)'
         DC    B'&STRING'              CHANNEL B
&INDEX   SETA  &INDEX+8            INCREMENT TO NEXT BYTE OF BITMAP
         AIF   (&INDEX LT 257).LOOP12  CONTINUE LOOP UNTIL ENTIRE
.*                                     BITMAP IS ASSEMBLED
*              END OF CHANNEL B BITMAP
*
         AIF   (&HICHNL EQ 11).FINISH  IF THIS WAS HIGHEST CHANNEL
.*                                     GENERATED, QUIT
&INDEX   SETA  1                   INITIALIZE BIT INDEX TO 1
*              BITMAP FOR CHANNEL C
.LOOP13  ANOP
.*  ASSEMBLE A BYTE OF THE BITMAP
&STRING  SETC  '&BITMAPC(&INDEX)&BITMAPC(&INDEX+1)&BITMAPC(&INDEX+2)&BI*
               TMAPC(&INDEX+3)&BITMAPC(&INDEX+4)&BITMAPC(&INDEX+5)&BITM*
               APC(&INDEX+6)&BITMAPC(&INDEX+7)'
         DC    B'&STRING'              CHANNEL C
&INDEX   SETA  &INDEX+8            INCREMENT TO NEXT BYTE OF BITMAP
         AIF   (&INDEX LT 257).LOOP13  CONTINUE LOOP UNTIL ENTIRE
.*                                     BITMAP IS ASSEMBLED
*              END OF CHANNEL C BITMAP
*
         AIF   (&HICHNL EQ 12).FINISH  IF THIS WAS HIGHEST CHANNEL
.*                                     GENERATED, QUIT
&INDEX   SETA  1                   INITIALIZE BIT INDEX TO 1
*              BITMAP FOR CHANNEL D
.LOOP14  ANOP
.*  ASSEMBLE A BYTE OF THE BITMAP
&STRING  SETC  '&BITMAPD(&INDEX)&BITMAPD(&INDEX+1)&BITMAPD(&INDEX+2)&BI*
               TMAPD(&INDEX+3)&BITMAPD(&INDEX+4)&BITMAPD(&INDEX+5)&BITM*
               APD(&INDEX+6)&BITMAPD(&INDEX+7)'
         DC    B'&STRING'              CHANNEL D
&INDEX   SETA  &INDEX+8            INCREMENT TO NEXT BYTE OF BITMAP
         AIF   (&INDEX LT 257).LOOP14  CONTINUE LOOP UNTIL ENTIRE
.*                                     BITMAP IS ASSEMBLED
*              END OF CHANNEL D BITMAP
*
         AIF   (&HICHNL EQ 13).FINISH  IF THIS WAS HIGHEST CHANNEL
.*                                     GENERATED, QUIT
&INDEX   SETA  1                   INITIALIZE BIT INDEX TO 1
*              BITMAP FOR CHANNEL E
.LOOP15  ANOP
.*  ASSEMBLE A BYTE OF THE BITMAP
&STRING  SETC  '&BITMAPE(&INDEX)&BITMAPE(&INDEX+1)&BITMAPE(&INDEX+2)&BI*
               TMAPE(&INDEX+3)&BITMAPE(&INDEX+4)&BITMAPE(&INDEX+5)&BITM*
               APE(&INDEX+6)&BITMAPE(&INDEX+7)'
         DC    B'&STRING'              CHANNEL E
&INDEX   SETA  &INDEX+8            INCREMENT TO NEXT BYTE OF BITMAP
         AIF   (&INDEX LT 257).LOOP15  CONTINUE LOOP UNTIL ENTIRE
.*                                     BITMAP IS ASSEMBLED
*              END OF CHANNEL E BITMAP
*
         AIF   (&HICHNL EQ 14).FINISH  IF THIS WAS HIGHEST CHANNEL
.*                                     GENERATED, QUIT
&INDEX   SETA  1                   INITIALIZE BIT INDEX TO 1
*              BITMAP FOR CHANNEL F
.LOOP16  ANOP
.*  ASSEMBLE A BYTE OF THE BITMAP
&STRING  SETC  '&BITMAPF(&INDEX)&BITMAPF(&INDEX+1)&BITMAPF(&INDEX+2)&BI*
               TMAPF(&INDEX+3)&BITMAPF(&INDEX+4)&BITMAPF(&INDEX+5)&BITM*
               APF(&INDEX+6)&BITMAPF(&INDEX+7)'
         DC    B'&STRING'              CHANNEL F
&INDEX   SETA  &INDEX+8            INCREMENT TO NEXT BYTE OF BITMAP
         AIF   (&INDEX LT 257).LOOP16  CONTINUE LOOP UNTIL ENTIRE
.*                                     BITMAP IS ASSEMBLED
*              END OF CHANNEL F BITMAP
*
.FINISH  ANOP
*     E N D   O F   U C B   B I T M A P S
         MEND
