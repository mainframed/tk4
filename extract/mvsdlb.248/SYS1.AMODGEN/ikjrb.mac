*
*        %GOTO RBL1;        /*
         MACRO
         IKJRB &DSECT=YES,&COM=NO
         GBLA  &IHARB
         AIF   (&IHARB EQ 1).RBS1
         IHARB SYS=AOS2,DSECT=&DSECT
         MEXIT
.RBS1    ANOP  ,         */
*%RBL1 : ;
*
*/* **************************************************************** */
*/*                                                                  */
*/*      THIS MACRO MAPS OS/VS2 REQUEST BLOCKS                       */
*/*                                                                  */
*/*      SVRB - SUPERVISOR REQUEST BLOCK FOR TRANSIENT SVC ROUTINES  */
*/*      SVRB - SUPERVISOR REQUEST BLOCK FOR RESIDENT SVC ROUTINES   */
*/*      IRB  - INTERRUPTION REQUEST BLOCK                           */
*/*      SIRB - SYSTEM INTERRUPT REQUEST BLOCK                       */
*/*      PRB  - PROGRAM REQUEST BLOCK                                */
*/*      TIRB - TASK INTERRUPTION REQUEST BLOCK                      */
*/*                                                                  */
*/*  OS/VS2 SU7 PTF, 10/25/77, LEVEL=3                               */
*/*                                                                  */
*/*  METHOD OF ACCESS                                                */
*/*      THIS MACRO IS INVOKED BY IHARB WHICH MAPS THE FIELDS        */
*/*      THAT ARE COMMON TO OS/VS1 AND OS/VS2.                       */
*/*                                                                  */
*/*      IF THIS MACRO IS INVOKED DIRECTLY IN BAL, IT WILL INVOKE    */
*/*      IHARB TO MAP THE COMMON FIELDS.                             */
*/* **************************************************************** */
*%GOTO RBL2;  /*
         SPACE 1
         IEZBITS , -          SYMBOLIC BIT DEFINITIONS
         SPACE 1
         AIF   ('&DSECT' EQ 'NO').NODSCT1
RBPREFIX DSECT , -            RBSECPTR-64
         AGO   .CONT1
.NODSCT1 AIF   ('&COM' EQ 'NO').NODSCT2
         ORG   RBPRFX
.NODSCT2 ANOP
         DS    0D
RBPREFIX EQU   * -            RBSECPTR-64
.CONT1   ANOP
RBRSV012 DS    A -            RESERVED
RBRSV013 DS    A -            RESERVED
RBRSV014 DS    H -            RESERVED
RBRSV015 DS    X -            RESERVED
RBRSV016 DS    X -            RESERVED
RBRSV017 DS    X -            RESERVED
RBRSV018 DS    X -            RESERVED
RBRSV019 DS    B -            RESERVED
RBRSV020 EQU   X'80',,C'X' -  RESERVED
RBRSV021 EQU   X'40',,C'X' -  RESERVED
RBRSV022 EQU   X'20',,C'X' -  RESERVED
RBRSV023 EQU   X'10',,C'X' -  RESERVED
RBRSV024 EQU   X'08',,C'X' -  RESERVED
RBRSV025 EQU   X'04',,C'X' -  RESERVED
RBRSV026 EQU   X'02',,C'X' -  RESERVED
RBRSV027 EQU   X'01',,C'X' -  RESERVED
RBRSV028 DS    B -            RESERVED
RBRSV029 EQU   X'80',,C'X' -  RESERVED
RBRSV030 EQU   X'40',,C'X' -  RESERVED
RBRSV031 EQU   X'20',,C'X' -  RESERVED
RBRSV032 EQU   X'10',,C'X' -  RESERVED
RBRSV033 EQU   X'08',,C'X' -  RESERVED
RBRSV034 EQU   X'04',,C'X' -  RESERVED
RBRSV035 EQU   X'02',,C'X' -  RESERVED
RBRSV036 EQU   X'01',,C'X' -  RESERVED
RBRSV037 DS    A -            RESERVED
RBRSV038 DS    A -            RESERVED
RBRSV039 DS    H -            RESERVED
RBRSV040 DS    X -            RESERVED
RBRSV041 DS    B -            RESERVED
RBRSV042 EQU   X'80',,C'X' -  RESERVED
RBRSV043 EQU   X'40',,C'X' -  RESERVED
RBRSV044 EQU   X'20',,C'X' -  RESERVED
RBRSV045 EQU   X'10',,C'X' -  RESERVED
RBRSV046 EQU   X'08',,C'X' -  RESERVED
RBRSV047 EQU   X'04',,C'X' -  RESERVED
RBRSV048 EQU   X'02',,C'X' -  RESERVED
RBRSV049 EQU   X'01',,C'X' -  RESERVED
RBRSV050 DS    A -            RESERVED
RBPRFXST DS    0D -           START OF ASSIGNED FIELDS IN RB PREFIX
RBRSV051 DS    A -            RESERVED
RBRSV052 DS    H -            RESERVED
RBRSV053 DS    X -            RESERVED
RBRSV054 DS    B -            RESERVED
RBRSV055 EQU   X'80',,C'X' -  RESERVED
RBRSV056 EQU   X'40',,C'X' -  RESERVED
RBRSV057 EQU   X'20',,C'X' -  RESERVED
RBRSV058 EQU   X'10',,C'X' -  RESERVED
RBRSV059 EQU   X'08',,C'X' -  RESERVED
RBRSV060 EQU   X'04',,C'X' -  RESERVED
RBRSV061 EQU   X'02',,C'X' -  RESERVED
RBRSV062 EQU   X'01',,C'X' -  RESERVED
         DS    0D
RBRTOPSW DS    0CL16 -        PROGRAM STATUS INFORMATION STORED AT
*                             TIME OF INTERRUPT CAUSING ENTRY INTO THE
*                             RTM                                MDC013
RBRTPSW1 DS    CL8 -          FIRST DOUBLE WORD OF PSW - SYSTEM AND
*                             PROGRAM MASKS, KEY CONDITION CODE AND
*                             INSTRUCTION COUNTER                MDC014
RBRTPSW2 DS    0CL8 -         SECOND DOUBLE WORD OF PSW          MDC015
RBRTICIL DS    0CL4 -         ILC AND INTERRUPT CODE             MDC016
RBRSV160 DS    XL1 -          RESERVED - SET TO ZERO IN LOW CORE BY
*                             HARDWARE                           MDC017
RBRTILC  DS    FL1 -          INSTRUCTION LENGTH COUNTER - NUMBER OF
*                             BYTES IN INSTRUCTION CAUSING INTERRUPT
*                                                                MDC018
RBRTINCD DS    H -            INTERRUPT CODE                     MDC019
RBRTRAN  DS    A -            VIRTUAL ADDRESS CAUSING TRANSLATION
*                             EXCEPTION IF PROGRAM INTERRUPT 16, 17 OR
*                             18.  OTHERWISE, NOT USED.          MDC020
RBFLAGS1 DS    B -            FLAG BYTE
RBSLOCK  EQU   BIT0 -         INDICATES THAT THIS RB IS
*                             NON-DISPATCHABLE UNTIL THE SUPERVISOR
*                             LOCK (CVTSYLK) IS RESET  (ALL RB'S)
RBXWAIT  EQU   BIT1 -         INDICATES THAT THE PROGRAM OPERATING
*                             UNDER THIS RB HAS ISSUED AN EXPLICIT
*                             (SVC) WAIT  (ALL RB'S)
RBABEND  EQU   BIT2 -         ABEND SVRB  (SVRB-BOTH)
RBRSV159 EQU   BIT3,,C'X' -   RESERVED                           MDC005
RBASIR   EQU   BIT4 -         ASIR IS RUNNING UNDER THIS RB      ICB444
RBLONGWT EQU   BIT5 -         LONG WAIT ISSUED UNDER THIS RB     MDC009
RBSCB    EQU   BIT6 -         SET BY SVC 60 TO INDICATE RB HAS AN
*                             ASSOCIATED ESTAE OR STAE EXIT      MDC004
RBSSSYN  EQU   BIT7 -         SYNCHRONIZED STATUS STOP PENDING FOR
*                             THIS RB                            MDC011
RBRSV004 DS    XL3 -          RESERVED
RBWCSA   DS    FL1 -          NUMBER OF REQUESTS WAITING AT TIME OF
*                             TERMINATION (WAIT COUNT SAVE AREA)
*                             (ALL RB'S)
RBINTCDA DS    0CL3 -         INTERRUPT CODE  (ALL RB'S)
RBINLNTH DS    CL1 -          INSTRUCTION LENGTH CODE - 4 HIGH-ORDER
*                             BITS MUST BE ZERO  (ALL RB'S)
RBINTCOD DS    CL2 -          INTERRUPT CODE  (ALL RB'S)
RBPRFXND DS    0C -           END OF RB PREFIX
         SPACE 2
         DS    0D -
RBSECT   EQU   * -            RBSECPTR - THIS IS THE START OF THE
*                             BASIC SECTION OF THE RB
RBPPSAV  DS    0A -           ADDRESS OF PROBLEM PROGRAM REGISTER SAVE
*                             AREA (IRB)
         DS    B -            RBTMFLD
RBPPSAV1 DS    AL3 -          ADDRESS OF PROBLEM PROGRAM REGISTER SAVE
*                             AREA (IRB)
RBABOPSW DS    CL4 -          AFTER EXECUTION OF TRANSIENT AREA HANDLER
*                             ROUTINE - FOUR LOW-ORDER BYTES OF NAME OF
*                             REQUESTED ROUTINE  (SVRB-TRANS)    MDC012
RBSIZE   DS    H -            SIZE OF THIS RB IN DOUBLEWORDS (ALL RB'S)
         DS    0BL2 -         RBSTAB
         DS    B -            RBSTAB1
RBFTP    EQU   BIT0+BIT1+BIT2 TYPE OF RB
RBFTPRB  EQU   X'00' -        PRB
RBFTTIRB EQU   BIT1+BIT2 -    TIRB                               ICB417
RBFTIRB  EQU   BIT1 -         IRB
RBFTSIRB EQU   BIT0 -         SIRB
RBFTSVRB EQU   BIT0+BIT1 -    SVRB
RBTRSVRB EQU   BIT3 -         IF RBTRSVRB=0 AND RBCDE=0, THEN TYPE 2
*                             SVC IN NUCLEUS.  IF RBTRSVRB=0 AND
*                             RBCDE1 NOT 0, THEN SECOND OR SUBSEQUENT
*                             LOAD OF TYPE 4 SVC IN FIXED OR MODIFIED
*                             LPA (RBCDE1 = ADDRESS OF CDE).  IF
*                             RBTRSVRB=1 AND RBCDE1=0, THEN TYPE 3 OR
*                             FIRST LOAD OF TYPE 4 SVC IN PAGED, FIXED
*                             OR MODIFIED LPA.  IF RBTRSVRB=1 AND
*                             RBCDE1 NOT 0, THEN SECOND OR SUBSEQUENT
*                             LOAD OF TYPE 4 SVC IN PAGED LPA (RBCDE1
*                             = ADDRESS OF LPDE).
RBFNSVRB EQU   BIT3 -         ALIAS FOR RBTRSVRB
RBWAITP  EQU   BIT4 -         INDICATES THAT AN ECB IS POINTING AT THE
*                             RB.                                ICB416
*RBFTCKPT EQU  BIT5 -         SEE COMMON SECTION
RBATNXIT EQU   BIT6 -         THIS IRB IS AN ATTENTION IRB       ICB444
RBPMSVRB EQU   BIT7 -         THIS IS A PROGRAM MANAGER SVRB - VALID
*                             ONLY ON LINK, LOAD, XCTL OR ATTACH
*                             (MDC305)                         @ZA00094
         DS    B -            RBSTAB2
*RBTCBNXT EQU  BIT0 -         SEE COMMON SECTION
*RBFACTV  EQU  BIT1 -         SEE COMMON SECTION
RBATTN   EQU   BIT2 -         EXITING PROGRAM IS AN ATTENTION EXIT
*                             (IRB)
RBETXR   EQU   BIT3 -         IRB IS FOR AN ETXR EXIT ROUTINE
RBUSIQE  EQU   BIT3 -         SAME AS RBETXR                     ICB444
RBIQETP  EQU   BIT4+BIT5 -
RBRQENR  EQU   X'00' -        REQUEST QUEUE ELEMENT IS NOT TO BE
*                             RETURNED
RBIRBAER EQU   BIT5 -         IRB HAS QUEUE ELEMENTS FOR ASYNCHRONOUSLY
*                             EXECUTED ROUTINES THAT ARE RQE'S
RBIQENR  EQU   BIT4 -         IQE IS NOT TO BE RETURNED AT EXIT
RBIRBAIQ EQU   BIT4+BIT5 -    IRB HAS QUEUE ELEMENTS FOR ASYNCHRONOUSLY
*                             EXECUTED ROUTINES THAT ARE IQE'S
*RBFDYN   EQU  BIT6 -         SEE COMMON SECTION
*RBECBWT  EQU  BIT7 -         SEE COMMON SECTION
RBEP     DS    A -            ENTRY POINT ADDRESS OF ASYNCHRONOUSLY
*                             EXECUTED ROUTINE (IRB, SIRB)
         DS    CL8 -          RBOPSW
RBPGMQ   DS    0A -           SAME AS RBPGMQ1 BELOW
         DS    X -            ZERO
RBPGMQ1  DS    AL3 -          ADDRESS OF RB INDICATING A REQUEST TO USE
*                             SAME SERIALLY REUSABLE PROGRAM
*                             (SVRB-RES, PRB)
         DS    0A -           RBLINK
         DS    0FL1 -         RBWCF                            @Z40FP9A
RBSCF    DS    FL1 -          RB SUSPENDED COUNT  (MDC339)     @Z40FP9A
         DS    AL3 -          RBLINKB
         DS    CL64 -         RBGRSAVE
IRBEND   DS    0F -           END OF IRB UNLESS OPTIONAL FIELDS
*                             RBNEXAV AND RBIQEWRK ARE PRESENT
         DS    0CL48 -        RBEXSAVE
RBRSV135 DS    A -            RESERVED
RBRSV136 DS    H -            RESERVED
RBRSV137 DS    X -            RESERVED
RBRSV138 DS    B -            RESERVED
RBRSV139 EQU   X'80',,C'X' -  RESERVED
RBRSV140 EQU   X'40',,C'X' -  RESERVED
RBRSV141 EQU   X'20',,C'X' -  RESERVED
RBRSV142 EQU   X'10',,C'X' -  RESERVED
RBRSV143 EQU   X'08',,C'X' -  RESERVED
RBRSV144 EQU   X'04',,C'X' -  RESERVED
RBRSV145 EQU   X'02',,C'X' -  RESERVED
RBRSV146 EQU   X'01',,C'X' -  RESERVED
PRBEND   DS    0F -           END OF PRB
TIRBEND  DS    0F -           END OF TIRB
         DS    CL40 -         LAST 40 BYTES OF RBEXSAVE
RBSCBB   DS    0CL20 -        AREA CONTAINING STAE CONTROL BLOCK (SCB)
*                             (SVRB ONLY)                        MDC010
RBSCHAIN DS    A -            POINTER TO NEXT SCB ON CHAIN
*                             (MDC306)                         @Z40FP9A
RBSEXIT  DS    A -            POINTER TO USER WRITTEN EXIT ROUTINE
*                             (MDC307)                         @Z40FP9A
RBSPARM  DS    0A -           ADDRESS OF PARAMETER LIST FOR STA EXIT
*                             (MDC308)                         @Z40FP9A
RBSFLGS1 DS    B -            FIRST FLAG BYTE  (MDC309)        @Z40FP9A
RBSSTAI  EQU   BIT0 -         STAI SCB  (MDC310)               @Z40FP9A
RBSSTAR  EQU   BIT1 -         STAR SCB.  SCB IF FOR STAE IF NEITHER
*                             RBSSTAI NOR RBSSTAR BIT IS SET ON.
*                             (MDC311)                         @Z40FP9A
RBSDUMMY EQU   BIT2 -         DUMMY SCB (WILL NOT BE SCHEDULED)
*                             (MDC312)                         @Z40FP9A
RBSESTAE EQU   BIT3 -         ESTAE INDICATOR  (MDC313)        @Z40FP9A
RBRSV162 EQU   BIT4 -         RESERVED                         @Z40FP9A
RBSASYNC EQU   BIT5 -         ALLOW ASYNCHRONOUS INTERRUPTS
*                             (MDC314)                         @Z40FP9A
RBSIOPRC EQU   BIT6+BIT7 -    I/O PROCESSING OPTION.  BOTH BITS OFF
*                             MEANS QUIESCE I/O.  BOTH BITS ON IS NOT
*                             DEFINED.  (MDC315)               @Z40FP9A
RBSNOIOP EQU   BIT6 -         BYPASS I/O INTERVENTION (MDC316) @Z40FP9A
RBSHALT  EQU   BIT7 -         HALT I/O  (MDC317)               @Z40FP9A
RBSPARMA DS    AL3 -          ADDRESS OF PARAMETER LIST FOR STA EXIT
*                             (MDC318)                         @Z40FP9A
RBSOWNR  DS    0A -           TCB/RB ADDRESS CONTROLLING THIS SCB
*                             (MDC319)                         @Z40FP9A
RBSFLGS2 DS    B -            SECOND FLAG BYTE  (MDC320)       @Z40FP9A
RBRSV163 EQU   BIT0 -         RESERVED                         @Z40FP9A
RBSXCTL2 EQU   BIT1 -         RETAIN THIS SCB ACROSS XCTL
*                             (MDC321)                         @Z40FP9A
RBRSV164 EQU   BIT2 -         RESERVED                         @Z40FP9A
RBSINUSE EQU   BIT3 -         THIS SCB IN USE  (MDC322)        @Z40FP9A
RBRSV165 EQU   BIT4 -         RESERVED                         @Z40FP9A
RBRSV166 EQU   BIT5 -         RESERVED                         @Z40FP9A
RBSKEY0  EQU   BIT6 -         USER IN KEY 0  (MDC323)          @Z40FP9A
RBSSUPER EQU   BIT7 -         USER IN SUPERVISOR MODE (MDC324) @Z40FP9A
RBSOWNRA DS    AL3 -          RB ADDRESS IF STAE/STAR, TCB ADDRESS IF
*                             STAI  (MDC325)                   @Z40FP9A
RBSDATA  DS    0F -           FLAGS AND DATA FIELD  (MDC326)   @Z40FP9A
RBSFLG3  DS    B -            OPTION FLAGS  (MDC327)           @Z40FP9A
RBRSV167 EQU   BIT0 -         RESERVED                         @Z40FP9A
RBSTERMI EQU   BIT1 -         AUTHORIZED FOR TERM PROCESSING
*                             (MDC328)                         @Z40FP9A
RBSRECRD EQU   BIT2 -         ERROR RECORD TO BE WRITTEN TO SYS1.LOGREC
*                             (MDC329)                         @Z40FP9A
RBSCNCEL EQU   BIT3 -         SCB IS LOGICALLY CANCELED
*                             (MDC330)                         @Z40FP9A
RBSPRNTR EQU   BIT4 -         SCB IS PREVIOUSLY ENTERED
*                             (MDC331)                         @Z40FP9A
RBSBRNTR EQU   BIT5 -         BRANCH ENTERED SVC 60  (MDC332)  @Z40FP9A
RBSTERMO EQU   BIT6 -         TERM PROCESSING ONLY  (MDC333)   @Z40FP9A
RBRSV168 EQU   BIT7 -         RESERVED                         @Z40FP9A
RBSPKEY  DS    C -            PROGRAM KEY  (MDC334)            @Z40FP9A
RBSID    DS    C -            SCB IDENTIFIER  (MDC335)         @Z40FP9A
RBRSV169 DS    X -            RESERVED  (MDC336)               @Z40FP9A
RBRSV148 DS    H -            RESERVED
RBRSV149 DS    X -            RESERVED
RBRSV150 DS    B -            RESERVED
RBRSV151 EQU   X'80',,C'X' -  RESERVED
RBRSV152 EQU   X'40',,C'X' -  RESERVED
RBRSV153 EQU   X'20',,C'X' -  RESERVED
RBRSV154 EQU   X'10',,C'X' -  RESERVED
RBRSV155 EQU   X'08',,C'X' -  RESERVED
RBRSV156 EQU   X'04',,C'X' -  RESERVED
RBRSV157 EQU   X'02',,C'X' -  RESERVED
RBRSV158 EQU   X'01',,C'X' -  RESERVED
SIRBEND  DS    0F -           END OF SIRB                 MDC021-MDC022
RBFEPARM DS    6F -           PARAMETER AREA FOR ROUTINES THAT USE
*                             FESTAE AND DEFAULT TO USE THIS AREA
*                             (I.E., DO NOT CODE PARAM=)
*                             (MDC337)                         @Z40FP9A
SVRBEND  DS    0F -           END OF SVRB (BOTH)  (MDC338)     @Z40FP9A
         SPACE 2
         ORG   RBEP -         FOR SVRB-BOTH AND PRB
RBCDE    DS    0A -           SAME AS RBCDE1 BELOW
RBCDFLGS DS    B -            CONTROL FLAGS
RBNOCELL EQU   BIT0 -         EXIT SHOULD FREEMAIN THIS SVRB RATHER
*                             THAN FREECELL                      MDC008
RBRSV009 EQU   BIT1,,C'X' -   RESERVED
RBCDATCH EQU   BIT2 -         CONTENTS SUPERVISION HAS BEEN ENTERED
*                             VIA ATTACH                         ICB444
RBCDSAVE EQU   BIT3 -         EXIT WILL LOAD REGISTERS FROM PRB ON
*                             RETURN FROM SYNCH TO ROUTINE
*                             (MDC345)                         @ZA27473
RBCDNODE EQU   BIT4 -         NO DE SAVE AREA REQUIRED           ICB444
RBCDSYNC EQU   BIT5 -         SYNCH MACRO INSTRUCTION REQUESTED
RBCDXCTL EQU   BIT6 -         XCTL MACRO INSTRUCTION REQUESTED
RBCDLOAD EQU   BIT7 -         LOAD MACRO INSTRUCTION REQUESTED
RBCDE1   DS    AL3 -          ADDRESS OF CDE, ADDRESS OF LPDE OR ZERO
*                             (SEE COMMENTS FOR BIT RBTRSVRB)
         SPACE 2
         ORG   RBPGMQ -       FOR TIRB
RBSQE    DS    0A -           SAME AS RBSQEA BELOW
         DS    FL1 -          RBUSE - CONTAINS ZEROS
RBSQEA   DS    AL3 -          CHAIN OF SUPERVISOR QUEUE ELEMENTS
*                             (SQE'S) WHICH REPRESENT ASYNCHRONOUS
*                             SUPERVISOR SERVICE REQUESTS RELATED TO
*                             TCB UNDER WHICH TIRB IS PRESENTLY
*                             OPERATING  (TIRB)
         SPACE 2
         ORG   RBPGMQ -       FOR IRB (3-BYTE LINK FIELD SEGMENT)
RBIQE    DS    0A -           LIST ORIGIN FOR IQE (IRB)
RBUSE    DS    FL1 -          USE COUNT USED BY ATTACH (IRB)
RBIQE1   DS    AL3 -          LIST ORIGIN FOR IQE (IRB)
         SPACE 2
         ORG   RBPGMQ -       FOR IRB (4-BYTE LINK FIELD SEGMENT), SIRB
RBIQE2   DS    0F -
RBIQEA   DS    F -            LIST ORIGIN FOR RQE (IRB WITH 4-BYTE LINK
*                             FIELD SEGMENT, SIRB)               MDC006
         SPACE 2
         ORG   IRBEND -       FOR IRB--FIELDS PRESENT ONLY IF REQUESTED
RBNEXAV  DS    A -            ADDRESS OF NEXT AVAILABLE IQE (IRB)
RBIQEWRK DS    F -            IQE WORK SPACE, VARIABLE LENGTH,
*                             MAXIMUM SIZE IS 1984 BYTES (IRB)
         SPACE 2
         ORG   IRBEND -       FOR SIRB
RBSIRBWA DS    CL64 -         SIRB WORK AREA                     MDC022
RBRSV161 DS    A -            RESERVED - RBRSV148 FOLLOWS THIS FIELD
         SPACE 2
SIRBWALN EQU   64 -           LENGTH OF RBSIRBWA                 MDC023
RBPRFXLN EQU   RBPRFXND-RBPREFIX - TOTAL PREFIX LENGTH INCLUDING
*                                  AREA RESERVED FOR FUTURE EXPANSION
RBPRFLNA EQU   RBPRFXND-RBPRFXST - ASSIGNED PREFIX LENGTH
PRBLEN   EQU   PRBEND-RBPRFXST -   REAL PRB LENGTH FOR GETMAIN
SIRBLEN  EQU   SIRBEND-RBPRFXST -  REAL SIRB LENGTH FOR GETMAIN
TIRBLEN  EQU   TIRBEND-RBPRFXST -  REAL TIRB LENGTH FOR GETMAIN
IRBLEN   EQU   IRBEND-RBPRFXST -   REAL IRB LENGTH FOR GETMAIN UNLESS
*                                  OPTIONAL FIELDS ARE ALSO PRESENT
SVRBLEN  EQU   SVRBEND-RBPRFXST -  REAL SVRB LENGTH FOR GETMAIN
         MEND  , */
*%RBL2   :  ;
*
*DECLARE
*  1 RBPREFIX BASED (RBSECPTR-64) BDY(DWORD),
*   2 RBRSV012    PTR(31),               /* RESERVED                 */
*   2 RBRSV013    PTR(31),               /* RESERVED                 */
*   2 RBRSV014    FIXED(15),             /* RESERVED                 */
*   2 RBRSV015    CHAR(1),               /* RESERVED                 */
*   2 RBSRV016    CHAR(1),               /* RESERVED                 */
*   2 RBRSV017    CHAR(1),               /* RESERVED                 */
*   2 RBRSV018    CHAR(1),               /* RESERVED                 */
*   2 RBRSV019    BIT(8),                /* RESERVED                 */
*    3 RBRSV020   BIT(1),                /* RESERVED                 */
*    3 RBRSV021   BIT(1),                /* RESERVED                 */
*    3 RBRSV022   BIT(1),                /* RESERVED                 */
*    3 RBRSV023   BIT(1),                /* RESERVED                 */
*    3 RBRSV024   BIT(1),                /* RESERVED                 */
*    3 RBRSV025   BIT(1),                /* RESERVED                 */
*    3 RBRSV026   BIT(1),                /* RESERVED                 */
*    3 RBRSV027   BIT(1),                /* RESERVED                 */
*   2 RBRSV028    BIT(8),                /* RESERVED                 */
*    3 RBRSV029   BIT(1),                /* RESERVED                 */
*    3 RBRSV030   BIT(1),                /* RESERVED                 */
*    3 RBRSV031   BIT(1),                /* RESERVED                 */
*    3 RBRSV032   BIT(1),                /* RESERVED                 */
*    3 RBRSV033   BIT(1),                /* RESERVED                 */
*    3 RBRSV034   BIT(1),                /* RESERVED                 */
*    3 RBRSV035   BIT(1),                /* RESERVED                 */
*    3 RBRSV036   BIT(1),                /* RESERVED                 */
*   2 RBRSV037    PTR(31),               /* RESERVED                 */
*   2 RBRSV038    PTR(31),               /* RESERVED                 */
*   2 RBRSV039    FIXED(15),             /* RESERVED                 */
*   2 RBRSV040    CHAR(1),               /* RESERVED                 */
*   2 RBRSV041    BIT(8),                /* RESERVED                 */
*    3 RBRSV042   BIT(1),                /* RESERVED                 */
*    3 RBRSV043   BIT(1),                /* RESERVED                 */
*    3 RBRSV044   BIT(1),                /* RESERVED                 */
*    3 RBRSV045   BIT(1),                /* RESERVED                 */
*    3 RBRSV046   BIT(1),                /* RESERVED                 */
*    3 RBRSV047   BIT(1),                /* RESERVED                 */
*    3 RBRSV048   BIT(1),                /* RESERVED                 */
*    3 RBRSV049   BIT(1),                /* RESERVED                 */
*   2 RBRSV050    PTR(31),               /* RESERVED                 */
*   2 RBPRFXST    CHAR(0) BDY(DWORD),    /* START OF ASSIGNED FIELDS
*                                           IN RB PREFIX             */
*   2 RBRSV051    PTR(31),               /* RESERVED                 */
*   2 RBRSV052    FIXED(15),             /* RESERVED                 */
*   2 RBRSV053    CHAR(1),               /* RESERVED                 */
*   2 RBRSV054    BIT(8),                /* RESERVED                 */
*    3 RBRSV055   BIT(1),                /* RESERVED                 */
*    3 RBRSV056   BIT(1),                /* RESERVED                 */
*    3 RBRSV057   BIT(1),                /* RESERVED                 */
*    3 RBRSV058   BIT(1),                /* RESERVED                 */
*    3 RBRSV059   BIT(1),                /* RESERVED                 */
*    3 RBRSV060   BIT(1),                /* RESERVED                 */
*    3 RBRSV061   BIT(1),                /* RESERVED                 */
*    3 RBRSV062   BIT(1),                /* RESERVED                 */
*   2 RBRTOPSW    CHAR(16) BDY(DWORD),   /* PROGRAM STATUS INFORMATION
*                                           STORED AT TIME OF
*                                           INTERRUPT CAUSING ENTRY
*                                           INTO THE RTM       MDC013*/
*    3 RBRTPSW1    CHAR(8) BDY(DWORD),   /* FIRST DOUBLE WORD OF PSW
*                                           - SYSTEM AND PROGRAM
*                                           MASKS, KEY CONDITION
*                                           CODE AND INSTRUCTION
*                                           COUNTER            MDC014*/
*    3 RBRTPSW2    CHAR(8) BDY(DWORD),   /* SECOND DOUBLE WORD OF
*                                           PSW                MDC015*/
*     4 RBRTICIL    CHAR(4) BDY(WORD),   /* ILC AND INTERRUPT CODE
*                                                              MDC016*/
*      5 RBRSV160    CHAR(1),            /* RESERVED - SET TO ZERO IN
*                                           LOW CORE BY HARDWARE
*                                                              MDC017*/
*      5 RBRTILC     PTR(8),             /* INSTRUCTION LENGTH
*                                           COUNTER - NUMBER OF BYTES
*                                           IN INSTRUCTION CAUSING
*                                           INTERRUPT          MDC018*/
*      5 RBRTINCD    FIXED(15),          /* INTERRUPT CODE     MDC019*/
*     4 RBRTRAN     PTR(31),             /* VIRTUAL ADDRESS CAUSING
*                                           TRANSLATION EXCEPTION IF
*                                           PROGRAM INTERRUPT 16, 17
*                                           OR 18.  OTHERWISE, NOT
*                                           USED.              MDC020*/
*   2 RBFLAGS1    CHAR(1),               /* FLAG BYTE                */
*    3 RBSLOCK  BIT(1),                  /* INDICATES THAT THIS RB
*                                           IS NON-DISPATCHABLE UNTIL
*                                           THE SUPERVISOR LOCK
*                                           (CVTSYLK) IS RESET
*                                           (ALL RB'S)               */
*    3 RBXWAIT  BIT(1),                  /* INDICATES THAT THE
*                                           PROGRAM OPERATING UNDER
*                                           THIS RB HAS ISSUED AN
*                                           EXPLICIT (SVC) WAIT
*                                           (ALL RB'S)               */
*    3 RBABEND  BIT(1),                  /* ABEND SVRB  (SVRB-BOTH)  */
*    3 RBRSV159 BIT(1),                  /* RESERVED           MDC005*/
*    3 RBASIR   BIT(1),                  /* ASIR IS RUNNING UNDER
*                                           THIS RB            ICB444*/
*    3 RBLONGWT BIT(1),                  /* LONG WAIT ISSUED UNDER
*                                           THIS RB            MDC009*/
*    3 RBSCB    BIT(1),                  /* SET BY SVC 60 TO INDICATE
*                                           RB HAS AN ASSOCIATED
*                                           ESTAE OR STAE EXIT MDC004*/
*    3 RBSSSYN  BIT(1),                  /* SYNCHRONIZED STATUS STOP
*                                           PENDING FOR THIS RB
*                                                              MDC011*/
*   2 RBRSV004    PTR(24),               /* RESERVED                 */
*   2 RBWCSA      PTR(8),                /* NUMBER OF REQUESTS
*                                           WAITING AT TIME OF
*                                           TERMINATION (WAIT COUNT
*                                           SAVE AREA)  (ALL RB'S)   */
*   2 RBINTCDA    CHAR(3),               /* INTERRUPT CODE (ALL RB'S)*/
*    3 RBINLNTH    CHAR(1),              /* INSTRUCTION LENGTH CODE
*                                           - 4 HIGH-ORDER BITS MUST
*                                           BE ZERO  (ALL RB'S)      */
*    3 RBINTCOD    CHAR(2),              /* INTERRUPT CODE (ALL RB'S)*/
*   2 RBPRFXND    CHAR(0) BDY(DWORD);    /* END OF RB PREFIX         */
*
*
*DECLARE
*  1 RBSECT   BASED(RBSECPTR) BDY(DWORD),
*   2 RBPPSAV     PTR(31),               /* ADDRESS OF PROBLEM
*                                           PROGRAM REGISTER SAVE
*                                           AREA (IRB)               */
*    3 *           BIT(8),               /* RBTMFLD                  */
*    3 RBPPSAV1    PTR(24),              /* ADDRESS OF PROBLEM
*                                           PROGRAM REGISTER SAVE
*                                           AREA (IRB)               */
*   2 RBABOPSW    CHAR(4) BDY(WORD),     /* AFTER EXECUTION OF
*                                           TRANSIENT AREA HANDLER
*                                           ROUTINE - FOUR LOW-ORDER
*                                           BYTES OF NAME OF
*                                           REQUESTED ROUTINE
*                                           (SVRB-TRANS)       MDC012*/
*   2 RBSIZE      FIXED(15),             /* SIZE OF THIS RB IN
*                                           DOUBLEWORDS (ALL RB'S)   */
*   2 *           BIT(16),               /* RBSTAB                   */
*    3 *           BIT(8),               /* RBSTAB1                  */
*     4 RBFTP    BIT(3),                 /* TYPE OF RB               */
*%DCL RBFTPRB  CHAR;
*%RBFTPRB ='''000''B';                   /* PRB                      */
*%DCL RBFTTIRB CHAR;
*%RBFTTIRB='''011''B';                   /* TIRB               ICB417*/
*%DCL RBFTIRB  CHAR;
*%RBFTIRB ='''010''B';                   /* IRB                      */
*%DCL RBFTSIRB CHAR;
*%RBFTSIRB='''100''B';                   /* SIRB                     */
*%DCL RBFTSVRB CHAR;
*%RBFTSVRB='''110''B';                   /* SVRB                     */
*     4 RBTRSVRB BIT(1),                 /* IF RBTRSVRB=0 AND
*                                           RBCDE1=0, THEN TYPE 2 SVC
*                                           IN NUCLEUS.  IF RBTRSVRB=0
*                                           AND RBCDE1 NOT 0, THEN
*                                           SECOND OR SUBSEQUENT LOAD
*                                           OF TYPE 4 SVC IN FIXED OR
*                                           MODIFIED LPA (RBCDE1 =
*                                           ADDRESS OF CDE).  IF
*                                           RBTRSVRB=1 AND RBCDE1=0,
*                                           THEN TYPE 3 OR FIRST LOAD
*                                           OF TYPE 4 SVC IN PAGED,
*                                           FIXED OR MODIFIED LPA.
*                                           IF RBTRSVRB=1 AND RBCDE1
*                                           NOT 0, THEN SECOND OR
*                                           SUBSEQUENT LOAD OF TYPE 4
*                                           SVC IN PAGED LPA (RBCDE1
*                                           = ADDRESS OF LPDE).      */
*      5 RBFNSVRB BIT(1),                /* ALIAS FOR RBTRSVRB       */
*     4 RBWAITP  BIT(1),                 /* INDICATES THAT AN ECB IS
*                                           POINTING AT THE RB ICB416*/
*     4 *        BIT(1),                 /* RBFTCKPT                 */
*     4 RBATNXIT BIT(1),                 /* THIS IRB IS AN ATTENTION
*                                           IRB                ICB444*/
*     4 RBPMSVRB BIT(1),                 /* THIS IS A PROGRAM MANAGER
*                                           SVRB - VALID ONLY ON
*                                           LINK, LOAD, XCTL OR
*                                           ATTACH (MDC305)  @ZA00094*/
*    3 *           BIT(8),               /* RBSTAB2                  */
*     4 *        BIT(1),                 /* RBTCBNXT                 */
*     4 *        BIT(1),                 /* RBFACTV                  */
*     4 RBATTN   BIT(1),                 /* EXITING PROGRAM IS AN
*                                           ATTENTION EXIT  (IRB)    */
*     4 RBETXR   BIT(1),                 /* IRB IS FOR AN ETXR EXIT
*                                           ROUTINE                  */
*      5 RBUSIQE  BIT(1),                /* SAME AS RBETXR     ICB444*/
*     4 RBIQETP  BIT(2),
*%DCL RBRQENR  CHAR;
*%RBRQENR ='''00''B';                    /* REQUEST QUEUE ELEMENT IS
*                                           NOT TO BE RETURNED       */
*%DCL RBIRBAER CHAR;
*%RBIRBAER='''01''B';                    /* IRB HAS QUEUE ELEMENTS
*                                           FOR ASYNCHRONOUSLY
*                                           EXECUTED ROUTINES THAT
*                                           ARE RQE'S                */
*%DCL RBIQENR  CHAR;
*%RBIQENR ='''10''B';                    /* IQE IS NOT TO BE
*                                           RETURNED AT EXIT         */
*%DCL RBIRBAIQ CHAR;
*%RBIRBAIQ='''11''B';                    /* IRB HAS QUEUE ELEMENTS
*                                           FOR ASYNCHRONOUSLY
*                                           EXECUTED ROUTINES THAT
*                                           ARE IQE'S                */
*     4 *        BIT(1),                 /* RBFDYN                   */
*     4 *        BIT(1),                 /* RBECBWT                  */
*   2 RBEP        PTR(31),               /* ENTRY POINT ADDRESS OF
*                                           ASYNCHRONOUSLY  EXECUTED
*                                           ROUTINE (IRB, SIRB)      */
*   2 *           CHAR(8)  BDY(WORD),    /* RBOPSW                   */
*   2 RBPGMQ      PTR(31),               /* SAME AS RBPGMQ1 BELOW    */
*    3 *           CHAR(1),              /* ZERO                     */
*    3 RBPGMQ1     PTR(24),              /* ADDRESS OF RB INDICATING
*                                           A REQUEST TO USE SAME
*                                           SERIALLY REUSABLE
*                                           PROGRAM   (SVRB-RES,
*                                           PRB)                     */
*   2 *           PTR(31),               /* RBLINK                   */
*    3 *           PTR(8),               /* RBWCF                    */
*     4 RBSCF       PTR(8),              /* RB SUSPENDED COUNT
*                                           (MDC339)         @Z40FP9A*/
*    3 *           PTR(24),              /* RBLINKB                  */
*   2 *           CHAR(64) BDY(WORD),    /* RBGRSAVE                 */
*   2 IRBEND      CHAR(0)  BDY(WORD),    /* END OF IRB UNLESS
*                                           OPTIONAL FIELDS RBNEXAV
*                                           AND RBIQEWRK ARE PRESENT */
*   2 *        CHAR(48) BDY(WORD),       /* RBEXSAVE                 */
*    3 RBRSV135   PTR(31),               /* RESERVED                 */
*    3 RBRSV136   FIXED(15),             /* RESERVED                 */
*    3 RBRSV137   CHAR(1),               /* RESERVED                 */
*    3 RBRSV138   BIT(8),                /* RESERVED                 */
*     4 RBRSV139  BIT(1),                /* RESERVED                 */
*     4 RBRSV140  BIT(1),                /* RESERVED                 */
*     4 RBRSV141  BIT(1),                /* RESERVED                 */
*     4 RBRSV142  BIT(1),                /* RESERVED                 */
*     4 RBRSV143  BIT(1),                /* RESERVED                 */
*     4 RBRSV144  BIT(1),                /* RESERVED                 */
*     4 RBRSV145  BIT(1),                /* RESERVED                 */
*     4 RBRSV146  BIT(1),                /* RESERVED                 */
*    3 PRBEND     CHAR(0)  BDY(WORD),    /* END 0F PRB               */
*    3 TIRBEND    CHAR(0)  BDY(WORD),    /* END 0F TIRB              */
*   2 RBSCBB      CHAR(20) BDY(WORD),    /* AREA CONTAINING STAE
*                                           CONTROL BLOCK (SCB)
*                                           (SVRB ONLY)        MDC010*/
*    3 RBSCHAIN    PTR(31),              /* POINTER TO NEXT SCB ON
*                                           CHAIN  (MDC306)  @Z40FP9A*/
*    3 RBSEXIT     PTR(31),              /* POINTER TO USER WRITTEN
*                                           EXIT ROUTINE
*                                           (MDC307)         @Z40FP9A*/
*    3 RBSPARM     PTR(31),              /* ADDRESS OF PARAMETER LIST
*                                           FOR STA EXIT
*                                           (MDC308)         @Z40FP9A*/
*     4 RBSFLGS1    BIT(8),              /* FIRST FLAG BYTE
*                                           (MDC309)         @Z40FP9A*/
*      5 RBSSTAI  BIT(1),                /* STAI SCB
*                                           (MDC310)         @Z40FP9A*/
*      5 RBSSTAR  BIT(1),                /* STAR SCB.  SCB IS FOR
*                                           STAE IF NEITHER RBSSTAI
*                                           NOR RBSSTAR BIT IS SET
*                                           ON.  (MDC311)    @Z40FP9A*/
*      5 RBSDUMMY BIT(1),                /* DUMMY SCB (WILL NOT BE
*                                           SCHEDULED)
*                                           (MDC312)         @Z40FP9A*/
*      5 RBSESTAE BIT(1),                /* ESTAE INDICATOR
*                                           (MDC313)         @Z40FP9A*/
*      5 RBRSV162 BIT(1),                /* RESERVED         @Z40FP9A*/
*      5 RBSASYNC BIT(1),                /* ALLOW ASYNCHRONOUS
*                                           INTERRUPTS
*                                           (MDC314)         @Z40FP9A*/
*      5 RBSIOPRC BIT(2),                /* I/O PROCESSING OPTION.
*                                           BOTH BITS OFF MEANS
*                                           QUIESCE I/O.  BOTH BITS
*                                           ON IS NOT DEFINED.
*                                           (MDC315)         @Z40FP9A*/
*       6 RBSNOIOP BIT(1),               /* BYPASS I/O INTERVENTION
*                                           (MDC316)         @Z40FP9A*/
*       6 RBSHALT  BIT(1),               /* HALT I/O
*                                           (MDC317)         @Z40FP9A*/
*     4 RBSPARMA    PTR(24),             /* ADDRESS OF PARAMETER LIST
*                                           FOR STA EXIT
*                                           (MDC318)         @Z40FP9A*/
*    3 RBSOWNR     PTR(31),              /* TCB/RB ADDRESS
*                                           CONTROLLING THIS SCB
*                                           (MDC319)         @Z40FP9A*/
*     4 RBSFLGS2    BIT(8),              /* SECOND FLAG BYTE
*                                           (MDC320)         @Z40FP9A*/
*      5 RBRSV163 BIT(1),                /* RESERVED         @Z40FP9A*/
*      5 RBSXCTL2 BIT(1),                /* RETAIN THIS SCB ACROSS
*                                           XCTL  (MDC321)   @Z40FP9A*/
*      5 RBRSV164 BIT(1),                /* RESERVED         @Z40FP9A*/
*      5 RBSINUSE BIT(1),                /* THIS SCB IN USE
*                                           (MDC322)         @Z40FP9A*/
*      5 RBRSV165 BIT(1),                /* RESERVED         @Z40FP9A*/
*      5 RBRSV166 BIT(1),                /* RESERVED         @Z40FP9A*/
*      5 RBSKEY0  BIT(1),                /* USER IN KEY 0
*                                           (MDC323)         @Z40FP9A*/
*      5 RBSSUPER BIT(1),                /* USER IN SUPERVISOR MODE
*                                           (MDC324)         @Z40FP9A*/
*     4 RBSOWNRA    PTR(24),             /* RB ADDRESS IF STAE/STAR,
*                                           TCB ADDRESS IF STAI
*                                           (MDC325)         @Z40FP9A*/
*    3 RBSDATA     CHAR(4) BDY(WORD),    /* FLAGS AND DATA FIELD
*                                           (MDC326)         @Z40FP9A*/
*     4 RBSFLG3     BIT(8),              /* OPTION FLAGS
*                                           (MDC327)         @Z40FP9A*/
*      5 RBRSV167 BIT(1),                /* RESERVED         @Z40FP9A*/
*      5 RBSTERMI BIT(1),                /* AUTHORIZED FOR TERM
*                                           PROCESSING
*                                           (MDC328)         @Z40FP9A*/
*      5 RBSRECRD BIT(1),                /* ERROR RECORD TO BE
*                                           WRITTEN TO SYS1.LOGREC
*                                           (MDC329)         @Z40FP9A*/
*      5 RBSCNCEL BIT(1),                /* SCB IS LOGICALLY CANCELED
*                                           (MDC330)         @Z40FP9A*/
*      5 RBSPRNTR BIT(1),                /* SCB IS PREVIOUSLY ENTERED
*                                           (MDC331)         @Z40FP9A*/
*      5 RBSBRNTR BIT(1),                /* BRANCH ENTERED SVC 0
*                                           (MDC332)         @Z40FP9A*/
*      5 RBSTERMO BIT(1),                /* TERM PROCESSING ONLY
*                                           (MDC333)         @Z40FP9A*/
*      5 RBRSV168 BIT(1),                /* RESERVED         @Z40FP9A*/
*     4 RBSPKEY     CHAR(1),             /* PROGRAM KEY
*                                           (MDC334)         @Z40FP9A*/
*     4 RBSID       CHAR(1),             /* SCB IDENTIFIER
*                                           (MDC335)         @Z40FP9A*/
*     4 RBRSV169    CHAR(1),             /* RESERVED         @Z40FP9A*/
*   2 RBRSV148    FIXED(15),             /* RESERVED                 */
*   2 RBRSV149    CHAR(1),               /* RESERVED                 */
*   2 RBRSV150    BIT(8),                /* RESERVED                 */
*    3 RBRSV151   BIT(1),                /* RESERVED                 */
*    3 RBRSV152   BIT(1),                /* RESERVED                 */
*    3 RBRSV153   BIT(1),                /* RESERVED                 */
*    3 RBRSV154   BIT(1),                /* RESERVED                 */
*    3 RBRSV155   BIT(1),                /* RESERVED                 */
*    3 RBRSV156   BIT(1),                /* RESERVED                 */
*    3 RBRSV157   BIT(1),                /* RESERVED                 */
*    3 RBRSV158   BIT(1),                /* RESERVED                 */
*   2 SIRBEND  CHAR(0)  BDY(WORD),       /* END OF SIRB MDC021-MDC022*/
*   2 RBFEPARM (6) FIXED(31),            /* PARAMETER AREA FOR
*                                           ROUTINES THAT USE FESTAE
*                                           AND DEFAULT TO USE THIS
*                                           AREA (I.E., DO NOT CODE
*                                           PARAM=) (MDC337) @Z40FP9A*/
*   2 SVRBEND  CHAR(0)  BDY(WORD);       /* END OF SVRB (BOTH)
*                                           (MDC338)         @Z40FP9A*/
*
*
*DECLARE 1 RBSECS03
*%IF IKEPLS='2'  %THEN
*    %GOTO RBA1;
*      BASED(ADDR(RBEP)) BDY(WORD),      /* FOR SVRB-BOTH AND PRB    */
*%GOTO RBA2;
*%RBA1 : ;
*      DEF(RBEP) BDY(WORD),              /* FOR SVRB-BOTH AND PRB    */
*%RBA2 : ;
*   2 RBCDE       PTR(31),               /* SAME AS RBCDE1 BELOW     */
*    3 RBCDFLGS    CHAR(1),              /* CONTROL FLAGS            */
*     4 RBNOCELL BIT(1),                 /* EXIT SHOULD FREEMAIN THIS
*                                           SVRB RATHER THAN FREECELL
*                                                              MDC008*/
*     4 RBRSV009 BIT(1),                 /* RESERVED                 */
*     4 RBCDATCH BIT(1),                 /* CONTENTS SUPERVISION HAS
*                                           BEEN ENTERED VIA ATTACH
*                                                              ICB444*/
*     4 RBCDSAVE BIT(1),                 /* EXIT WILL LOAD REGISTERS
*                                           FROM PRB ON RETURN FROM
*                                           SYNCH TO ROUTINE
*                                           (MDC345)         @ZA27473*/
*     4 RBCDNODE BIT(1),                 /* NO DE SAVE AREA
*                                           REQUIRED           ICB444*/
*     4 RBCDSYNC BIT(1),                 /* SYNCH MACRO INSTRUCTION
*                                           REQUESTED                */
*     4 RBCDXCTL BIT(1),                 /* XCTL MACRO INSTRUCTION
*                                           REQUESTED                */
*     4 RBCDLOAD BIT(1),                 /* LOAD MACRO INSTRUCTION
*                                           REQUESTED                */
*    3 RBCDE1      PTR(24);              /* ADDRESS OF CDE, ADDRESS
*                                           OF LPDE OR ZERO (SEE
*                                           COMMENTS FOR BIT
*                                           RBTRSVRB)                */
*
*
*DECLARE 1 RBSECS05
*%IF IKEPLS='2'  %THEN
*    %GOTO RBA3;
*       BASED(ADDR(RBPGMQ)) BDY(WORD),   /* FOR TIRB AND PRB         */
*%GOTO RBA4;
*%RBA3 : ;
*       DEF(RBPGMQ)  BDY(WORD),          /* FOR TIRB AND PRB         */
*%RBA4 : ;
*   2 RBSQE       PTR(31),               /* SAME AS RBSQEA BELOW     */
*    3 *           PTR(8),               /* RBUSE - CONTAINS ZEROS   */
*    3 RBSQEA      PTR(24);              /* CHAIN OF SUPERVISOR QUEUE
*                                           ELEMENTS (SQE'S) WHICH
*                                           REPRESENT ASYNCHRONOUS
*                                           SUPERVISOR SERVICE
*                                           REQUESTS RELATED TO TCB
*                                           UNDER WHICH TIRB IS
*                                           PRESENTLY OPERATING
*                                           (TIRB)                   */
*
*
*DECLARE 1 RBSECS06
*%IF IKEPLS='2'  %THEN
*    %GOTO RBA5;
*      BASED(ADDR(RBPGMQ))  BDY(WORD),
*%GOTO RBA6;
*%RBA5 : ;
*       DEF(RBPGMQ)  BDY(WORD),
*%RBA6 : ;
*                                        /* FOR IRB (3-BYTE LINK
*                                           FIELD SEGMENT)           */
*   2 RBIQE       PTR(31),               /* LIST ORIGIN FOR IQE
*                                           (IRB)                    */
*    3 RBUSE       PTR(8),               /* USE COUNT USED BY ATTACH
*                                           (IRB)                    */
*    3 RBIQE1      PTR(24);              /* LIST ORIGIN FOR IQE
*                                           (IRB)                    */
*
*
*DECLARE 1 RBSECS07
*%IF IKEPLS='2'   %THEN
*    %GOTO RBA7;
*      BASED(ADDR(RBPGMQ))   BDY(WORD),
*%GOTO RBA8;
*%RBA7 : ;
*      DEF(RBPGMQ) BDY(WORD),
*%RBA8 : ;
*                                        /* FOR IRB (4-BYTE LINK
*                                           FIELD SEGMENT), SIRB     */
*   2 RBIQE2      FIXED(31),
*    3 RBIQEA      FIXED(31);            /* LIST ORIGIN FOR RQE (IRB
*                                           WITH 4-BYTE LINK FIELD
*                                           SEGMENT, SIRB)     MDC006*/
*
*
*DECLARE 1 RBSECS08
*%IF IKEPLS='2'  %THEN
*    %GOTO RBA9;
*      BASED(ADDR(IRBEND)) BDY(WORD),
*%GOTO RBA10;
*%RBA9 : ;
*       DEF(IRBEND) BDY(WORD),
*%RBA10 : ;
*                                        /* FOR IRB--FIELDS PRESENT
*                                           ONLY IF REQUESTED        */
*   2 RBNEXAV     PTR(31),               /* ADDRESS OF NEXT
*                                           AVAILABLE IQE (IRB)      */
*   2 RBIQEWRK    FIXED(31);             /* IQE WORK SPACE, VARIABLE
*                                           LENGTH,  MAXIMUM SIZE IS
*                                           1984 BYTES (IRB)         */
*
*
*DECLARE 1 RBSECS09
*%IF IKEPLS='2'  %THEN
*    %GOTO RBA11;
*      BASED(ADDR(IRBEND)) BDY(WORD),    /* FOR SIRB                 */
*%GOTO RBA12;
*%RBA11 : ;
*       DEF(IRBEND) BDY(WORD),           /* FOR SIRB                 */
*%RBA12 : ;
*   2 RBSIRBWA    CHAR(64) BDY(WORD),    /* SIRB WORK AREA     MDC022*/
*   2 RBRSV161    PTR(31);               /* RESERVED - RBRSV148
*                                           FOLLOWS THIS FIELD       */
*
*
*%SIRBWALN='LENGTH(RBSIRBWA)';           /* LENGTH OF SIRB WORK AREA
*                                                              MDC023*/
*RBPRFXLN:  GEN  (EQU 64);               /* TOTAL PREFIX LENGTH
*                                           INCLUDING AREA RESERVED
*                                           FOR FUTURE EXPANSION     */
*RBPRFLNA:  GEN  (EQU 32);               /* ASSIGNED PREFIX LENGTH   */
*PRBLEN:    GEN  (EQU 136);              /* REAL PRB LENGTH FOR
*                                           GETMAIN                  */
*SIRBLEN:   GEN  (EQU 200);              /* REAL SIRB LENGTH FOR
*                                           GETMAIN                  */
*TIRBLEN:   GEN  (EQU 136);              /* REAL TIRB LENGTH FOR
*                                           GETMAIN                  */
*IRBLEN:    GEN  (EQU 128);              /* REAL IRB LENGTH FOR
*                                           GETMAIN UNLESS OPTIONAL
*                                           FIELDS ARE ALSO PRESENT  */
*SVRBLEN:   GEN  (EQU 224);              /* REAL SVRB LENGTH FOR
*                                           GETMAIN          @Z40FP9A*/
*%DCL SVRBLGN FIXED;                     /* (MDC340)         @Z40FP9A*/
*%SVRBLGN=224;                           /* REAL SVRB LENGTH
*                                           (MDC340)         @Z40FP9A*/
