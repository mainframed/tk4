         TITLE 'Test and Demonstrate z9 Opcode Simulation'
*
*        Function -
*        This module tests and demonstrates the z/Architecture
*        Opcodes simulated by the SIMZ9 SPIE module in the 370
*        MVS 3.8J environment. See the SIMZ9 module for the full
*        list of simulated Opcodes. The last test causes an 0C1
*        Abend by attempting to execute an unsupported Opcode.
*        Note that SIMZ9 has nulled out the PICA prior to
*        retrying the failing Opcode so the resulting dump will
*        identify the failing Opcode as an normal 0C1.
*
*        Operation -
*        TESTZ9 opens SYSPRINT to print the registers if a test
*        fails and also to show the result from the CKSM test.
*        SIMZ9 is loaded and established as the SPIE exit for 0C1
*        exceptions. At assembly each supported Opcode is
*        generated with the provided macro library as IFOX00 does
*        support z/Architecture Opcodes.
*
*        During execution each simulated opcode will cause an
*        0C1 exception which will result in control being passed
*        to SIMZ9 via the established SPIE exit. SIMZ9 will
*        simulate the Opcode and then return control to TESTZ9
*        for the program to continue execution.
*
*        Assembler Environment -
*        IFOX00 may be used to assemble this program provided
*        the provided maclib is placed in the SYSLIB
*        concatenation list.
*
*        Note -
*        The provided SIMZ9 module must be placed in the STEPLIB
*        or STEPLIB concatenation. Alternatively SIMZ9 may be
*        placed in a LNKLSTed library. No Authorization is
*        required for SIMZ9.
*
TZ9      ENTER BASE=(10,11)
*
         OPEN  (SYSPRINT,(OUTPUT))
*
         LOAD  EP=SIMZ9                Opcode Simulator
*
         LR    R2,R0                   Save Addr of SIMZ9
*
         SPIE  (R2),(1)                Catch 0C1 only
*
*        Environment now established to simulate selected z9 opcodes
*
         L     R9,=XL4'EEEEEEEE'
*
*        AFI
*
TEST001  WTO   'Test001',ROUTCDE=(11)
         LA    R14,TEST001
         L     R3,=F'123456'
         LR    R4,R3
         A     R3,=F'789'
         BALR  R8,R0                   Get CC
         N     R8,CCMASK               Zero all but CC
         AFI   R4,789
         CLR   R3,R4                   Same Result ?
         BE    TEST002
         BAL   R12,SNAPREGS            No, SNAP the Registers
*
*        AHI
*
TEST002  WTO   'Test002',ROUTCDE=(11)
         LA    R14,TEST002
         L     R3,=F'123456'
         LR    R4,R3
         AH    R3,=H'789'
         BALR  R8,R0                   Get CC
         N     R8,CCMASK               Zero all but CC
         AHI   R4,789
         CLR   R3,R4                   Same Result ?
         BE    TEST003
         BAL   R12,SNAPREGS            No, SNAP the Registers
*
*        ALFI
*
TEST003  WTO   'Test003',ROUTCDE=(11)
         LA    R14,TEST003
         L     R3,=XL4'FFFFFFFE'
         LR    R4,R3
         AL    R3,=XL4'0000000F'
         BALR  R8,R0                   Get CC
         N     R8,CCMASK               Zero all but CC
         ALFI  R4,X'0000000F'
         CLR   R3,R4                   Same Result ?
         BE    TEST004
         BAL   R12,SNAPREGS            No, SNAP the Registers
*
*        NILF
*
TEST004  WTO   'Test004',ROUTCDE=(11)
         LA    R14,TEST004
         L     R3,=XL4'EEEEEE00'
         LR    R4,R3
         N     R3,=XL4'01010101'
         BALR  R8,R0                   Get CC
         N     R8,CCMASK               Zero all but CC
         NILF  R4,X'01010101'
         CLR   R3,R4                   Same Result ?
         BE    TEST005
         BAL   R12,SNAPREGS            No, SNAP the Registers
*
*        NILH
*
TEST005  WTO   'Test005',ROUTCDE=(11)
         LA    R14,TEST005
         L     R3,=XL4'EE00FFFF'
         LR    R4,R3
         N     R3,=XL4'0101FFFF'
         BALR  R8,R0                   Get CC
         N     R8,CCMASK               Zero all but CC
         NILH  R4,X'0101'
         CLR   R3,R4                   Same Result ?
         BE    TEST006
         BAL   R12,SNAPREGS            No, SNAP the Registers
*
*        NILL
*
TEST006  WTO   'Test006',ROUTCDE=(11)
         LA    R14,TEST006
         L     R3,=XL4'FFFFEE00'
         LR    R4,R3
         N     R3,=XL4'FFFF0101'
         BALR  R8,R0                   Get CC
         N     R8,CCMASK               Zero all but CC
         NILL  R4,X'0101'
         CLR   R3,R4                   Same Result ?
         BE    TEST007
         BAL   R12,SNAPREGS            No, SNAP the Registers
*
*        CFI
*
TEST007  WTO   'Test007',ROUTCDE=(11)
         LA    R14,TEST007
         L     R3,=XL4'0FFFEE00'
         LR    R4,R3
         C     R3,=XL4'0FFF0101'
         BALR  R8,R0                   Get CC
         N     R8,CCMASK               Zero all but CC
         CFI   R4,X'0FFF0101'
         BALR  R9,R0                   Get CC
         N     R9,CCMASK               Zero all but CC
         CLR   R8,R9                   Same Result ?
         BE    TEST008
         BAL   R12,SNAPREGS            No, SNAP the Registers
*
*        CHI
*
TEST008  WTO   'Test008',ROUTCDE=(11)
         LA    R14,TEST008
         L     R3,=F'123456'
         LR    R4,R3
         CH    R3,=H'789'
         BALR  R8,R0                   Get CC
         N     R8,=XL4'30000000'       Zero all but CC
         CHI   R4,789
         BALR  R9,R0                   Get CC
         N     R9,CCMASK               Zero all but CC
         CLR   R8,R9                   Same Result ?
         BE    TEST009
         BAL   R12,SNAPREGS            No, SNAP the Registers
*
*        CKSM
*
TEST009  WTO   'Test009',ROUTCDE=(11)
         LA    R14,TEST009
         SR    R8,R8                   Zero R8 for SNAP
         SR    R3,R3                   Zero the Checksum Result Reg
         LA    R4,STRING1
         LA    R5,L'STRING1
REDRIVE1 CKSM  R3,R4
         BNZ   REDRIVE1
         BALR  R9,R0                   Get CC
         N     R9,CCMASK               Zero all but CC
         BAL   R12,SNAPREGS            SNAP the Result
*                                      Next Test
         SR    R3,R3                   Zero the Checksum Result Reg
         LA    R4,STRING2
         LA    R5,L'STRING2
REDRIVE2 CKSM  R3,R4
         BNZ   REDRIVE2
         BALR  R9,R0                   Get CC
         N     R9,CCMASK               Zero all but CC
         BAL   R12,SNAPREGS            SNAP the Result
*                                      Next Test
         SR    R3,R3                   Zero the Checksum Result Reg
         LA    R4,STRING3
         LA    R5,L'STRING3
REDRIVE3 CKSM  R3,R4
         BNZ   REDRIVE3
         BALR  R9,R0                   Get CC
         N     R9,CCMASK               Zero all but CC
         BAL   R12,SNAPREGS            SNAP the Result
         B     TEST010
*
STRING1  DC    CL32'THIS.IS.A.LONG.PLI.VARIABLE.NAME'
STRING2  DC    CL16'A.SHORT.VAR.NAME'
STRING3  DC    CL13'FORCE.END.PAD'     Force pad for 3 bytes
*
*        CLFI
*
TEST010  WTO   'Test010',ROUTCDE=(11)
         LA    R14,TEST010
         L     R3,=XL4'FFFFEE00'
         LR    R4,R3
         CL    R3,=XL4'FFFF0101'
         BALR  R8,R0                   Get CC
         N     R8,CCMASK               Zero all but CC
         CLFI  R4,X'FFFF0101'
         BALR  R9,R0                   Get CC
         N     R9,CCMASK               Zero all but CC
         CLR   R8,R9                   Same Result ?
         BE    TEST011
         BAL   R12,SNAPREGS            No, SNAP the Registers
*
*        XILF
*
TEST011  WTO   'Test011',ROUTCDE=(11)
         LA    R14,TEST011
         L     R3,=XL4'EEEEEE00'
         LR    R4,R3
         X     R3,=XL4'01010101'
         BALR  R8,R0                   Get CC
         N     R8,CCMASK               Zero all but CC
         XILF  R4,X'01010101'
         CLR   R3,R4                   Same Result ?
         BE    TEST012
         BAL   R12,SNAPREGS            No, SNAP the Registers
*
*        IILF
*
TEST012  WTO   'Test012',ROUTCDE=(11)
         LA    R14,TEST012
         L     R3,=C'1234'
         IILF  R4,C'1234'
         CLR   R3,R4
         BE    TEST013
         BAL   R12,SNAPREGS
*
*        IILH
*
TEST013  WTO   'Test013',ROUTCDE=(11)
         LA    R14,TEST013
         L     R3,=X'5678EEEE'
         L     R4,=X'EEEEEEEE'
         IILH  R4,X'5678'
         CLR   R3,R4
         BE    TEST014
         BAL   R12,SNAPREGS
*
*        IILL
*
TEST014  WTO   'Test014',ROUTCDE=(11)
         LA    R14,TEST014
         L     R3,=X'EEEE5678'
         L     R4,=X'EEEEEEEE'
         IILL  R4,X'5678'
         CLR   R3,R4
         BE    TEST015
         BAL   R12,SNAPREGS
*
*        IPM
*
TEST015  WTO   'Test015',ROUTCDE=(11)
         LA    R14,TEST015
         SR    R4,R4
         BALR  R3,R0
         IPM   R4
         N     R3,=X'3F000000'        Zero ILC, Leave CC and PGM MASK
         CLR   R3,R4
         BE    TEST016
         BAL   R12,SNAPREGS
*
*        LBR
*
TEST016  WTO   'Test016',ROUTCDE=(11)
         LA    R14,TEST016
         SR    R3,R3
         IC    R3,=X'7F'
         LR    R5,R3
         LBR   R4,R5
         CLR   R3,R4
         BE    TEST016A
         BAL   R12,SNAPREGS
TEST016A EQU   *                       Test Sign Extention
         L     R3,=XL4'FFFFFFFE'
         IC    R5,=X'FE'
         LBR   R4,R5
         CLR   R3,R4
         BE    TEST017
         BAL   R12,SNAPREGS
*
*        LHI
*
TEST017  WTO   'Test017',ROUTCDE=(11)
         LA    R14,TEST017
         LH    R3,=H'-80'
         SR    R4,R4
         LHI   R4,-80
         CLR   R3,R4
         BE    TEST018
         BAL   R12,SNAPREGS
*
*        LLCR
*
TEST018  WTO   'Test018',ROUTCDE=(11)
         LA    R14,TEST018
         SR    R3,R3
         IC    R3,=X'CC'
         L     R4,=XL4'FFFFFFFE'
         IC    R5,=X'CC'
         LLCR  R4,R5
         CLR   R3,R4
         BE    TEST019
         BAL   R12,SNAPREGS
*
*        LLHR
*
TEST019  WTO   'Test019',ROUTCDE=(11)
         LA    R14,TEST019
         LH    R3,=H'23456'
         L     R4,=XL4'FFFFFFFE'
         LH    R5,=H'23456'
         LLHR  R4,R5
         CLR   R3,R4
         BE    TEST020
         BAL   R12,SNAPREGS
*
*        LLILF
*
TEST020  WTO   'Test020',ROUTCDE=(11)
         LA    R14,TEST020
         L     R3,=CL4'ABCD'
         L     R4,=XL4'FFFFFFFE'
         LLILF R4,C'ABCD'
         CLR   R3,R4
         BE    TEST021
         BAL   R12,SNAPREGS
*
*        LLILH
*
TEST021  WTO   'Test021',ROUTCDE=(11)
         LA    R14,TEST021
         L     R3,=XL4'F8F90000'
         L     R4,=XL4'FFFFFFFE'
         LLILH R4,C'89'
         CLR   R3,R4
         BE    TEST022
         BAL   R12,SNAPREGS
*
*        LLILL
*
TEST022  WTO   'Test022',ROUTCDE=(11)
         LA    R14,TEST022
         L     R3,=XL4'0000F8F9'
         L     R4,=XL4'FFFFFFFE'
         LLILL R4,C'89'
         CLR   R3,R4
         BE    TEST023
         BAL   R12,SNAPREGS
*
*        OILF
*
TEST023  WTO   'Test023',ROUTCDE=(11)
         LA    R14,TEST023
         L     R3,=XL4'E0E0E010'
         LR    R4,R3
         O     R3,=XL4'01010101'
         BALR  R8,R0                   Get CC
         N     R8,CCMASK               Zero all but CC
         OILF  R4,X'01010101'
         CLR   R3,R4                   Same Result ?
         BE    TEST024
         BAL   R12,SNAPREGS            No, SNAP the Registers
*
*        OILH
*
TEST024  WTO   'Test024',ROUTCDE=(11)
         LA    R14,TEST024
         L     R3,=XL4'E0E0FFFF'
         LR    R4,R3
         O     R3,=XL4'0C0CFFFF'
         BALR  R8,R0                   Get CC
         N     R8,CCMASK               Zero all but CC
         OILH  R4,X'0C0C'
         CLR   R3,R4                   Same Result ?
         BE    TEST025
         BAL   R12,SNAPREGS            No, SNAP the Registers
*
*        OILL
*
TEST025  WTO   'Test025',ROUTCDE=(11)
         LA    R14,TEST025
         L     R3,=XL4'DDDDE0E0'
         LR    R4,R3
         O     R3,=XL4'DDDD0C0C'
         BALR  R8,R0                   Get CC
         N     R8,CCMASK               Zero all but CC
         OILL  R4,X'0C0C'
         CLR   R3,R4                   Same Result ?
         BE    TEST026
         BAL   R12,SNAPREGS            No, SNAP the Registers
*
*        TMLH/TMLL
*
*        Both use the same code with an increment of the Register
*        Pointer to address either the upper or lower bytes
*
TEST026  WTO   'Test026',ROUTCDE=(11)
         LA    R14,TEST026
         IILH  R4,X'0F0F'
         TMLH  R4,X'0F0F'
         BO    TEST026A                Should be all on
         BAL   R12,SNAPREGS            Error, SNAP the Registers
TEST026A EQU   *
         TMLH  R4,X'F0F0'
         BNO   TEST026B                Should be all off
         BAL   R12,SNAPREGS            Error, SNAP the Registers
TEST026B EQU   *
         TMLH  R4,X'07FF'              Should be mixed,
*                                      Leftmost selected bit on
*
*        Greg Price pointed out the tinsy, winsy text in the HLASM
*        LRM, use new mnemonics, test for mixed, Leftmost is one.
*
         BMIXL1 TEST026C
         BAL   R12,SNAPREGS            Error, SNAP the Registers
TEST026C EQU   *
         IILL  R4,X'007F'
         TMLL  R4,X'0088'              Should set mixed,
*                                      Leftmost selected bit off
         BMIXL0 TEST026D
         BAL   R12,SNAPREGS            Error, SNAP the Registers
TEST026D EQU   *
         IILH  R5,X'FFFF'
         TMLH  R5,X'00FF'
         BO    TEST026E                Should set all on
         BAL   R12,SNAPREGS            Error, SNAP the Registers
TEST026E EQU   *
         TMLH  R5,X'FF00'
         BO    TEST026F                Should set all on
         BAL   R12,SNAPREGS            Error, SNAP the Registers
TEST026F EQU   *
*
*        BRAS - Forward
*
TEST027  WTO   'Test027',ROUTCDE=(11)
         LA    R14,TEST027
         BRAS  R4,TEST027B
TEST027A EQU   *
         WTO   'Error - BRAS',ROUTCDE=(11)
TEST027B EQU   *                       Should branch here
         LA    R5,TEST027A             Return addr
         CLR   R4,R5                   Same Result ?
         BE    TEST028
         BAL   R12,SNAPREGS            No, SNAP the Registers
*
*        BRAS - Backward
*
TEST028A EQU   *
         B     TEST028B
TEST028  WTO   'Test028',ROUTCDE=(11)
         LA    R14,TEST028
         XC    WORKD,WORKD             Dummy Filler Code
         XC    WORKD,WORKD             Dummy Filler Code
         BRAS  R4,TEST028A
TEST028C EQU   *
         WTO   'Error - BRAS',ROUTCDE=(11)
TEST028B EQU   *                       Should branch here
         LA    R5,TEST028C             Return addr
         CLR   R4,R5                   Same Result ?
         BE    TEST029
         BAL   R12,SNAPREGS            No, SNAP the Registers
*
*        BRC
*
TEST029  WTO   'Test029',ROUTCDE=(11)
         LA    R14,TEST029
         IILF  R3,123456
         IILF  R4,654321
         CLR   R3,R4                   Set CC
         BRNE  TEST029A                Should be not equal
         BAL   R12,SNAPREGS            No, SNAP the Registers
         XC    WORKD,WORKD             Dummy Filler Code
         XC    WORKD,WORKD             Dummy Filler Code
         XC    WORKD,WORKD             Dummy Filler Code
TEST029A EQU   *                       BRC Target
         WTO   'BRC OK',ROUTCDE=(11)   Should appear
         B     TEST030
*
*        BRCT
*
TEST030  WTO   'Test030',ROUTCDE=(11)
         LA    R14,TEST030
         LA    R3,2                    Set Loop control
         SR    R4,R4                   Clear counter
TEST030A EQU   *
         XC    WORKD,WORKD             Dummy Filler Code
         XC    WORKD,WORKD             Dummy Filler Code
         LA    R4,1(R4)
         BRCT  R3,TEST030A
         CHI   R4,2                    Through the loop twice ?
         BE    TEST031
         BAL   R12,SNAPREGS            No, SNAP the Registers
*
*        BRASL
*
TEST031  WTO   'Test031',ROUTCDE=(11)
         LA    R14,TEST031
         BRAS  R4,TEST031B
TEST031A EQU   *
         WTO   'Error - BRASL',ROUTCDE=(11)
TEST031B EQU   *                       Should branch here
         LA    R5,TEST031A             Return addr
         CLR   R4,R5                   Same Result ?
         BE    TEST032
         BAL   R12,SNAPREGS            No, SNAP the Registers
*
*        BRCL
*
TEST032  WTO   'Test032',ROUTCDE=(11)
         LA    R14,TEST032
         IILF  R3,123456
         IILF  R4,123456
         CLR   R3,R4                   Set CC
         BREL  TEST032A                Should be equal
         BAL   R12,SNAPREGS            No, SNAP the Registers
         XC    WORKD,WORKD             Dummy Filler Code
         XC    WORKD,WORKD             Dummy Filler Code
         XC    WORKD,WORKD             Dummy Filler Code
TEST032A EQU   *                       BRC Target
         WTO   'BRCL OK',ROUTCDE=(11)  Should appear
         B     TEST033
*
*        SAM24
*
TEST033  WTO   'Test033',ROUTCDE=(11)
         LA    R14,TEST033
         SAM24
         B     TEST034
*
*        TAM
*
TEST034  WTO   'Test034',ROUTCDE=(11)
         LA    R14,TEST034
         TAM
         BZ    TEST034A                CC0 for 24 Bit
         BAL   R12,SNAPREGS            No, SNAP the Registers
TEST034A EQU   *
         B     TEST035
*
*        BSM
*
TEST035  WTO   'Test035',ROUTCDE=(11)
         LA    R14,TEST035
         IILF  R4,X'F9F8F7F6'
         IILF  R5,X'79F8F7F6'
         LR    R6,R0                   Copy Reg
         BSM   R4,R0
         CLR   R4,R5                   Should be equal
         BE    TEST035A                Yes, Branch
         BAL   R12,SNAPREGS            No, SNAP the Registers
TEST035A EQU   *
         CLR   R6,R0                   Should be equal
         BE    TEST035B                Yes, Branch
         BAL   R12,SNAPREGS            No, SNAP the Registers
TEST035B EQU   *
         LA    R5,TEST035C
         BSM   R4,R5
         BAL   R12,SNAPREGS            Should not happen
TEST035C EQU   *
         WTO   'BSM OK',ROUTCDE=(11)
         B     TEST036
*
*        BASSM
*
TEST036  WTO   'Test036',ROUTCDE=(11)
         LA    R14,TEST036
         LA    R5,TEST036A
         BASSM R4,R5
TEST036B EQU   *
         BAL   R12,SNAPREGS            Should not happen
TEST036A EQU   *
         LA    R6,TEST036B
         CLR   R4,R6                   Should be equal
         BNE   TEST036C
         WTO   'BASSM OK',ROUTCDE=(11)
         B     TEST037
TEST036C EQU   *
         BAL   R12,SNAPREGS            Should not happen
*
*        Test Simulated Opcode as target of EX
*
TEST037  WTO   'Test037',ROUTCDE=(11)
         LA    R14,TEST037
         IILF  R7,X'FFFFFFFF'
         IILF  R8,X'FFFFDDDD'
         IILL  R9,X'0003'
*
*        Note the the low order byte in R9 converts the IILH
*        Opcode into an IILL Opcode
*
         EX    R9,EXIILH
         CLR   R7,R8                   Should be equal
         BE    TEST037A                Yes, Branch
         BAL   R12,SNAPREGS            Should not happen
EXIILH   IILH  R7,X'DDDD'              X'DDDD' into high order bytes
TEST037A EQU   *
*
*        Test Ex of a BRC Instruction
*
         IILL  R3,X'00F0'              Set Mask of 'F'
         EX    R3,EXBRC                Force unconditional BRC
         BAL   R12,SNAPREGS
TEST037B EQU   *
         B     TEST038
*
EXBRC    BRC   0,TEST037B              Null Branch
         BAL   R12,SNAPREGS
*
*        Test Test Packed
*
TEST038  WTO   'Test038',ROUTCDE=(11)
         LA    R14,TEST038
         TP    TEST038W
         BZ    TEST038A                Should be CC0 as data good
         BAL   R12,SNAPREGS
TEST038A EQU   *
         TP    TEST038X
         BM    TEST038B                Should be CC1 as bad sign
         BAL   R12,SNAPREGS
TEST038B EQU   *
         TP    TEST038Y
         BP    TEST038C                Should be CC2 as data bad
         BAL   R12,SNAPREGS
TEST038C LA    R4,TEST038Z
         TP    0(5,R4)
         BO    TEST038D                CC3 as both sign and data bad
         BAL   R12,SNAPREGS
TEST038D EQU   *
         B     TEST039
*
TEST038W DC    P'123456789'            Good data
TEST038X DC    XL5'0123456789'         Bad sign
TEST038Y DC    XL5'01234F678C'         Bad data
TEST038Z DC    XL5'01234F6789'         Bad data and sign
*
*        Test Translate and Test Reverse
*
TEST039  WTO   'Test039',ROUTCDE=(11)
         LA    R14,TEST039
         SR    R1,R1
         SR    R2,R2
         MVI   TRAN256+2,X'DD'
         MVI   TRAN256+5,X'EE'
         TRTR  TEST039X+L'TEST039X-1,TRAN256
         BC    4,TEST039A              Should be CC1, Non zero
         BAL   R12,SNAPREGS
TEST039A EQU   *
         CLM   R2,B'0001',=X'EE'       Find the X'EE' ?
         BE    TEST039B                Yes, Branch
         BAL   R12,SNAPREGS
TEST039B EQU   *
         LA    R4,TEST039X+5           R4 -> to Argument Byte
         CLR   R1,R4                   R1 identifies the Argument ?
         BE    TEST040                 Yes, Branch
         BAL   R12,SNAPREGS
         B     TEST040
*
TEST039X DC    X'000102030405060708'   Argument for TRTR
*
*        Test Translate Extended
*
TEST040  WTO   'Test040',ROUTCDE=(11)
         LA    R14,TEST040
         XC    TRAN256,TRAN256         Zero Test Table
         MVC   TRAN256(L'TEST040Y),TEST040Y Set up Translate table
         IILL  R0,X'000D'              Set the Test Byte to X'0D'
         LA    R4,TEST040X
         LA    R5,L'TEST040X
         LA    R6,TRAN256
         TRE   R4,R6
         CLC   TEST040X(7),TEST040Y    First 7 Bytes Translated ?
         BE    TEST040A                Yes,Branch
         BAL   R12,SNAPREGS
TEST040A EQU   *
         CLI   0(R4),X'0D'             R4 -> Test Byte ?
         BE    TEST040B
         BAL   R12,SNAPREGS
TEST040B EQU   *
         B     TEST041
*
TEST040X DC    X'000102030405060D08'   Argument for TRE
TEST040Y DC    X'F0F1F2F3F4F5F6F7F8'
*
*        Test Translate One to One
*
TEST041  WTO   'Test041',ROUTCDE=(11)
         LA    R14,TEST041
         XC    TRAN256,TRAN256         Zero Test Table
         MVC   TRAN256(L'TEST041Z),TEST041Z Set up Translate table
         LA    R1,TRAN256              R1 -> Translate table
         LA    R4,TEST041Y             R4 -> Result
         LA    R5,L'TEST041X
         LA    R6,TEST041X             R6 -> Source
         TROO  R4,R6,1
         BZ    TEST041A                Should be CC0
         BAL   R12,SNAPREGS
TEST041A EQU   *
         CLC   TEST041Y,TEST041Z       Result as expected
         BE    TEST041B                Yes, branch
         BAL   R12,SNAPREGS
TEST041B EQU   *
         B     TEST042
*
TEST041X DC    X'000102030405060708'   Argument for TROO
TEST041Y DC    X'000000000000000000'   Result
TEST041Z DC    X'F0F1F2F3F4F5F6F7F8'
*
*        Test Translate Two to One
*
TEST042  WTO   'Test042',ROUTCDE=(11)
         LA    R14,TEST042
         XC    TRAN256,TRAN256         Zero Test Table
         MVC   TRAN256(L'TEST042Z),TEST042Z Set up Translate table
         LA    R1,TRAN256              R1 -> Translate table
         LA    R4,TEST042Y             R4 -> Result
         LA    R5,L'TEST042X           R5 - Length of source
         LA    R6,TEST042X             R6 -> Source
         TRTO  R4,R6,1
         BZ    TEST042A                Should be CC0
         BAL   R12,SNAPREGS
TEST042A EQU   *
         CLC   TEST042Y,TEST042Z
         BE    TEST042B
         BAL   R12,SNAPREGS
TEST042B EQU   *
         B     TEST043
*
TEST042X DC    X'000000010002000300040005000600070008'
TEST042Y DC    X'000000000000000000'   Result
TEST042Z DC    X'F0F1F2F3F4F5F6F7F8'
*
*        Test Translate Two to Two
*
TEST043  WTO   'Test043',ROUTCDE=(11)
         LA    R14,TEST043
         XC    TRAN256,TRAN256         Zero Test Table
         MVC   TRAN256(L'TEST043Z),TEST043Z Set up Translate table
         LA    R1,TRAN256              R1 -> Translate table
         LA    R4,TEST043Y             R4 -> Result
         LA    R5,L'TEST043X           R5 - Length of source
         LA    R6,TEST043X             R6 -> Source
         TRTT  R4,R6,1
         BZ    TEST043A                Should be CC0
         BALR  R9,0
         BAL   R12,SNAPREGS
TEST043A EQU   *
         CLC   TEST043Y,TEST043Z
         BE    TEST043B
         BAL   R12,SNAPREGS
TEST043B EQU   *
         B     TEST044
*
TEST043X DC    X'000000010002000300040005000600070008'
TEST043Y DC    X'000000000000000000000000000000000000'   Result
TEST043Z DC    X'FFF0FFF1FFF2FFF3FFF4FFF5FFF6FFF7FFF8'
*
*        LB
*
TEST044  WTO   'Test044',ROUTCDE=(11)
         LA    R14,TEST044
         LB    R3,TEST044X+3
         C     R3,TEST044X
         BE    TEST044A
         BAL   R12,SNAPREGS
TEST044A EQU   *                       Test Sign Extention
         LB    R4,TEST044Y+3
         C     R4,TEST044Y
         BE    TEST045
         BAL   R12,SNAPREGS
         B     TEST045
*
TEST044X DC    F'127'
TEST044Y DC    F'-127'
*
*        LRV
*
TEST045  WTO   'Test045',ROUTCDE=(11)
         LA    R14,TEST045
         LRV   R4,TEST045X
         MVCIN TEST045Y,TEST045X+3
         C     R4,TEST045Y
         BE    TEST046
         BAL   R12,SNAPREGS
         B     TEST046
*
         DS    0F
TEST045X DC    C'ABCD'
TEST045Y DC    C'    '
*
*        LRVH
*
TEST046  WTO   'Test046',ROUTCDE=(11)
         LA    R14,TEST046
         IILF  R4,C'1234'
         LRVH  R4,TEST046X
         CLFI  R4,C'12FE'
         BE    TEST047
         BAL   R12,SNAPREGS
         B     TEST047
*
TEST046X DC    C'EF'
*
*        STRV
*
TEST047  WTO   'Test047',ROUTCDE=(11)
         LA    R14,TEST047
         IILF  R4,C'1234'
         STRV  R4,TEST047X
         CLC   TEST047X,TEST047Y
         BE    TEST048
         BAL   R12,SNAPREGS
         B     TEST048
*
TEST047X DC    C'    '
TEST047Y DC    C'4321'
*
*        STRVH
*
TEST048  WTO   'Test048',ROUTCDE=(11)
         LA    R14,TEST048
         IILF  R4,C'1234'
         STRVH R4,TEST048X
         CLC   TEST048X,TEST048Y
         BE    TEST049
         BAL   R12,SNAPREGS
         B     TEST049
*
TEST048X DC    C'  '
TEST048Y DC    C'43'
*
*        LLC
*
TEST049  WTO   'Test049',ROUTCDE=(11)
         LA    R14,TEST049
         LLC   R4,TEST049X+3
         C     R4,TEST049X
         BE    TEST050
         BAL   R12,SNAPREGS
         B     TEST050
*
TEST049X DC    F'128'
*
*        LLH
*
TEST050  WTO   'Test050',ROUTCDE=(11)
         LA    R14,TEST050
         LLH   R4,TEST050X+2
         C     R4,TEST050X
         BE    TEST0C1
         BAL   R12,SNAPREGS
         B     TEST0C1
*
TEST050X DC    F'31111'
*
*        Test invalid Opcode to force an 0C1
*
TEST0C1  WTO   'Test0C1',ROUTCDE=(11)
         LA    R14,TEST0C1
         IILF  R3,X'FEFEFEFE'          Make it easy to find Regs
         LR    R4,R3                   in Dump
         LR    R5,R3
         A5OP  0,R6,X'CDEF'            Attempt to use a Grande opcode
*
*
*        Exit Program
*
TESTZ9X  EQU   *
*
         CLOSE (SYSPRINT)
*
         FINISH RC=0                   Restore R14-R12
*
*        SNAP Regs Routine
*
SNAPREGS EQU   *
         LR    R0,R12
         SR    R0,R10                  Calc offset from start of TESTZ9
         STM   R0,R15,REGSAVE          Save the Registers
         MVI   PRTDATA,C' '
         MVC   PRTDATA+1(L'PRTDATA-1),PRTDATA Blank out Print Data
*
*        On entry R14 -> WTO 'TESTxxx'  Print the text as the heading
*
         LH    R1,4(R14)               Get length of text
         AHI   R1,-5                   Subtract header length +1 for EX
         EX    R1,EXMVCHD
         MVI   PRTASA,C'-'             Space 3 lines
         PUT   SYSPRINT,PRTLINE        Print the WTO Text
         MVI   PRTASA,C' '
         MVC   PRTDATA,HEAD2           Print second Heading Line
         PUT   SYSPRINT,PRTLINE        Print the WTO Text
         MVI   PRTDATA,C' '
         MVC   PRTDATA+1(L'PRTDATA-1),PRTDATA Blank out Print Data
         MVI   PRTASA,C'0'
         MVC   PRTDATA+6(L'REG07),REG07 Space it in a bit
         LA    R4,PRTDATA+20           Start of Register Print
         LA    R8,8                    Loop Counter for BCT
         LA    R6,REGSAVE              Point to R0 data for TROT
         LA    R1,TRANHEX              R1 -> TROT Translate Table
SNAPRL   EQU   *
         LA    R5,4                    Length for TROT
SNAPRR   EQU   *
         TROT  R4,R6,1                 Translate to printable hex
         BC    1,SNAPRR                Retry in case on real iron
         LA    R4,3(,R4)               Insert some extra blanks
         BCT   R8,SNAPRL               Loop to print next Register
*
         PUT   SYSPRINT,PRTLINE        Print Regs
         MVI   PRTASA,C' '
         LA    R9,REGSAVE+64
         CR    R6,R9
         BNL   SNAPRX                  All Regs Printed
         LA    R1,TRANHEX              R1 -> TROT Translate Table
         MVC   PRTDATA+6(L'REG8F),REG8F Space it in a bit
         LA    R4,PRTDATA+20           Start of Register Print
         LA    R8,8                    Loop Counter for BCT
         B     SNAPRL                  Translate and Print R8 - R15
*
SNAPRX   EQU   *
         L     R9,=XL4'EEEEEEEE'       Reset SCC
         L     R14,REGSAVE+56          Restore R14 in case needed
*                                      again in same test case
         BR    R12                     Return
*
EXMVCHD  MVC   PRTDATA(0),8(R14)       MVC WTO text
*
HEAD2    DC    CL120'  Registers - R0 = OffSet, R8 = CC, R9 = SCC'
HEXCSTR  DC    C'0123456789ABCDEF'
WORKD    DC    D'0'                    FOR CVD ETC
CCMASK   DC    XL4'30000000'           Clear Reg after BALR to leave
*                                      only CC
WORK16   DC    CL16' '
*
*        Translate table for TROT to convert hex data to char
*
         DS    0D                      Force Double word alignment
TRANHEX  DC    C'000102030405060708090A0B0C0D0E0F'  00-0F
         DC    C'101112131415161718191A1B1C1D1E1F'  10-1F
         DC    C'202122232425262728292A2B2C2D2E2F'  20-2F
         DC    C'303132333435363738393A3B3C3D3E3F'  30-3F
         DC    C'404142434445464748494A4B4C4D4E4F'  40-4F
         DC    C'505152535455565758595A5B5C5D5E5F'  50-5F
         DC    C'606162636465666768696A6B6C6D6E6F'  60-6F
         DC    C'707172737475767778797A7B7C7D7E7F'  70-7F
         DC    C'808182838485868788898A8B8C8D8E8F'  80-8F
         DC    C'909192939495969798999A9B9C9D9E9F'  90-9F
         DC    C'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'  A0-AF
         DC    C'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'  B0-BF
         DC    C'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'  C0-CF
         DC    C'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'  D0-DF
         DC    C'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'  E0-EF
         DC    C'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'  F0-FF
*
*        Translate table for testing TRTR etc
*
         DS    0D
TRAN256  DC    XL256'00'
*
         DS    0F
REGSAVE  DC    16F'0'                  Register save area R0 - R15
PRTLINE  DC    0CL121' '               Print Line
PRTASA   DC    C' '                    ASA control
PRTDATA  DC    CL120' '                Print Data
REG07    DC    C'REGS 0-7 '
REG8F    DC    C'REGS 8-15'
*
*********************************************************************
*
*        DCB DEFINITION
*
*********************************************************************
*
         PRINT NOGEN
SYSPRINT DCB   DSORG=PS,RECFM=FBA,DDNAME=SYSPRINT,MACRF=PM,            C
               LRECL=121
         PRINT GEN
*
*        LITERAL POOL
*
         LTORG
         END
