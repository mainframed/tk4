BSPHRCMD TITLE 'Execute HERCULES commands from PARM and SYSIN'
***********************************************************************
*  This program will read a command from the PARM statement or a      *
*  sequence of commands from SYSIN and execute them on the Hercules   *
*  console via the DIAG 8 interface                                   *
*                                                                     *
*  Required DD statement: none                                        *
*                                                                     *
*  Optional DD statements:                                            *
*           SYSIN    -  Input dataset for control statements          *
*                                                                     *
*           SYSPRINT -  Output dataset for messages etc               *
*                       Default: SYSOUT=*                             *
*                                                                     *
*           SYSUDUMP -  Default: SYSOUT=A                             *
***********************************************************************
         PRINT OFF,NOGEN
         COPY  BSPGLBLS
         COPY  BSPSGLBL
         DCBD  DSORG=(PS),DEVD=DA     , DCB layout
         IEFZB4D0                     , dynalloc dsects
         IEFZB4D2                     , and equates
         PRINT ON,NOGEN               , Macro expansion not needed
BSPHRCMD BSPENTER BASE=(R11),RENT=YES
         BAL   R14,ALCUDUMP           , allocate SYSUDUMP if needed
         BAL   R14,SETINIT            , initialize some variables
         BAL   R14,ALCPRINT           , allocate SYSPRINT if needed
         IF    (LTR,R15,R15,Z)        , if allocated
          BAL  R14,OPNPRINT           , open SYSPRINT
         ENDIF (LTR,R15,R15,Z)        ,
         BAL   R14,GETPARAM           , get parameter, if any
         IF    (LTR,R15,R15,Z)        , if there was a parameter
          BAL  R14,ECHOLINE           , report the command executed
          BAL  R14,PROCLINE           , execute the command
         ENDIF (LTR,R15,R15,Z)        , there was a parameter
         BAL   R14,OPNSYSIN           , OPEN the SYSIN file if present
         TITLE 'Main processing loop'
         IF    (LTR,R15,R15,Z)        , if open was okay
          DO FOREVER                  , Loop through all blocks
           BAL R14,GETLINE            , read one command
           BAL R14,ECHOLINE           , report the command executed
           BAL R14,PROCLINE           , process script line
          ENDDO                       , end of loop through member
         ENDIF
EXIT     DS    0H                     , end of data
         IF    (TM,PROCFLAG,HAVEPARM+HAVESYSN,Z)
          MSGPUT MSG03W
          BAL  R14,PUTMSG             , write last message
          SETMAXCC 4                  , set minimum RC
         ENDIF
         MSGPUT MSG99I                , insert message
         L     R15,MAXCC              , get return code
         CVD   R15,DBL                , make a number
         UNPK  MSG99I1,DBL+5(3)       , make printable
         OI    MSG99I1+L'MSG99I1-1,C'0'      last digit printable
         BAL   R14,PUTMSG             , write last message
         BAL   R14,CLOSYSIN           , close SYSIN if open
         BAL   R14,CLOPRINT           , close SYSPRINT if open
         L     R15,MAXCC              , get return code
         BSPRET RC=(15)               , and return with rc in r15
         TITLE 'Subroutines: PUTMSG - Display an error message'
***********************************************************************
* Routine to display an error message. The error message is assumed   *
* to be stored in the MSGTEXT area (and is at most 124 bytes long)    *
* The messages will be written to SYSPRINT DD if available and open.  *
* If not, the messages will be isssued via WTO                        *
*                                                                     *
* Registers on Entry: R14 = Return address                            *
***********************************************************************
         SPACE 1
PUTMSG   DS    0H                     , output message on sysprint/wto
         STM   R14,R3,PUTMSAVE        , save registers
         IF    (TM,PROCFLAG,PRNTOPEN,O) SYSPRINT available?
          IF   (CP,LINENUM,GT,=PL2'55') end of page reached?
           MVC PRNTLINE,HEAD001       , Put in page header
           ZAP LINENUM,=P'12'         , reinit line number
           AP  PAGENUM,=P'1'          , increment page number
           MVC HEAD0011,=X'40202120'  , insert edit mask
           ED  HEAD0011,PAGENUM       , beautify page number
           PUT SYSPRINT,PRNTLINE      , write page header
           PUT SYSPRINT,HEAD0C1       , Insert LOGO1
           PUT SYSPRINT,HEAD0C2       , Insert LOGO2
           PUT SYSPRINT,HEAD0C3       , Insert LOGO3
           PUT SYSPRINT,HEAD0C4       , Insert LOGO4
           PUT SYSPRINT,HEAD0C5       , Insert LOGO5
           PUT SYSPRINT,HEAD0C6       , Insert LOGO6
          ENDIF
          BLANK PRNTTEXT              , erase any garbage
          MVC   PRNTTEXT(L'MSGTEXT),MSGTEXT
          PUT   SYSPRINT,PRNTLINE
         ELSE                         , no SYSPRINT, use WTO instead
          WTO  MF=(E,THEWTO)
         ENDIF
         XR    R15,R15                , clear RC
         ST    R15,PUTMSAVE+4         , set caller's RC
         LM    R14,R3,PUTMSAVE        , restore return address
         BR    R14                    , and return
         TITLE 'Subroutines: ALCUDUMP - Allocate SYSUDUMP if needed'
***********************************************************************
* Of course this program never has problems, but we allocated a       *
* SYSUDUMP DD for SYSOUT=A anyways                                    *
***********************************************************************
ALCUDUMP DS    0H                     , allocate SYSUDUMP
         STM   R14,R1,ALCUSAVE        , save registers
         MVC   TEMPDDN,TUSDDDNM       , insert DDNAME into msg text
         MVC   SVC99WA(TUSDLEN),TUSDPTR move text units to WS
         LA    R1,SVC99WA+TUSDDDN-TUSDPTR  point to DDNAME
         ST    R1,SVC99P1             , put into TU list
         LA    R1,SVC99WA+TUSDCLS-TUSDPTR  , point to CLASS parm
         ICM   R1,B'1000',=XL1'80'    , indicate last parm
         ST    R1,SVC99P2             , put into TU list
         LA    R1,SVC99WA             , point to work area
         BAL   R14,DOSVC99            , go and do it
         IF    (LTR,R15,R15,NZ)       , Error on DYNALLOC?
          BAL  R14,PUTMSG             , tell the user
          SETMAXCC 4                  , indicate a problem
         ENDIF (LTR,R15,R15,NZ)       , Error on DYNALLOC
         LM    R14,R1,ALCUSAVE        , restore registers
         BR    R14                    , return to caller
***********************************************************************
* SYSUDUMP DYNALLOC parameters                                        *
***********************************************************************
         SPACE 1
TUSDPTR  DS    0F                     , text unit pointers
         DC    A(TUSDDDN)             , address of DDNAME
         DC    X'80'                  , end of list indicator
         DC    AL3(TUSDCLS)           , address of SYSOUT CLASS info
TUSDDDN  DC    AL2(DALDDNAM)          , key for DDNAME
         DC    AL2(1)                 , number of entries
         DC    AL2(8)                 , length of 1 entry
TUSDDDNM DC    CL8'SYSUDUMP'          , contens of entry
TUSDCLS  DC    AL2(DALSYSOU)          , key for SYSOUT
         DC    AL2(0)                 , number of entries (0 = default
*        DC    AL2(1)                 , length of 1 entry(class
*        DC    C'*'                   , sysout class
TUSDLEN  EQU   *-TUSDPTR
         TITLE 'Subroutines: ALCPRINT - Allocate SYSPRINT if needed'
***********************************************************************
* Allocate SYSPRINT DD if not already present                         *
***********************************************************************
         SPACE
ALCPRINT DS    0H                     , allocate SYSPRINT DD
         XR    R15,R15                , init return code
         STM   R14,R1,ALCPSAVE        , save the registers
         MVC   TEMPDDN,TUSPDDNM       , insert DDNAME into msg text
         MVC   SVC99WA(TUSPLEN),TUSPPTR move text units to WS
         LA    R1,SVC99WA+TUSPDDN-TUSPPTR  point to DDNAME
         ST    R1,SVC99P1             , put into TU list
         LA    R1,SVC99WA+TUSPCLS-TUSPPTR  , point to CLASS parm
         ICM   R1,B'1000',=XL1'80'    , indicate last parm
         ST    R1,SVC99P2             , put into TU list
         LA    R1,SVC99WA             , point to work area
         BAL   R14,DOSVC99            , go and do it
         IF    (LTR,R15,R15,NZ)       , Error on DYNALLOC?
          BAL  R14,PUTMSG             , tell the user
          SETMAXCC 4                  , and end with RC=12
          ST   R15,ALCPSAVE+4         , set caller's RC
         ENDIF (LTR,R15,R15,NZ)       , Error on DYNALLOC?
         LM    R14,R1,ALCPSAVE        , restore the registers
         BR    R14                    , and return to caller
         SPACE 2
***********************************************************************
* SYSPRINT DYNALLOC parameters                                        *
***********************************************************************
         SPACE
TUSPPTR  DS    0F                     , text unit pointers
         DC    A(TUSPDDN)             , address of DDNAME
         DC    X'80'                  , end of list indicator
         DC    AL3(TUSPCLS)           , address of SYSOUT CLASS info
TUSPDDN  DC    AL2(DALDDNAM)          , key for DDNAME
         DC    AL2(1)                 , number of entries
         DC    AL2(8)                 , length od 1 entry
TUSPDDNM DC    CL8'SYSPRINT'          , contens of entry
TUSPCLS  DC    AL2(DALSYSOU)          , key for SYSOUT
         DC    AL2(0)                 , number of entries
*        DC    AL2(1)                 , length of 1 entry
*        DC    C'*'                   , sysout class
TUSPLEN  EQU   *-TUSPPTR
         TITLE 'Subroutines: OPNPRINT - Open SYSPRINT'
***********************************************************************
* Open SYSPRINT DD for output processing (for a job)                  *
***********************************************************************
         SPACE
OPNPRINT DS    0H                     , open SYSPRINT
         STM   R14,R1,OPNPSAVE        , save registers
         MVC   SYSPRINT,SYSPRDCB      , move DCB to reentrant storage
         LA    R1,SYSPRINT            , point to SYSPRINT DCB
         BAL   R14,OPENFILE           , go open the file
         IF    (LTR,R15,R15,Z)        , if successful
          OI   PROCFLAG,PRNTOPEN      , indicate that SYSPRINT is open
         ENDIF (LTR,R15,R15,Z)        , if successful
         LM    R14,R1,OPNPSAVE        , restore registers
         BR    R14                    , return to caller
         PUSH  PRINT
         PRINT NOGEN
SYSPRDCB DCB   DDNAME=SYSPRINT,       , ddname for this file           -
               DSORG=PS,              , file is sequential             -
               LRECL=133,             , record length                  -
               BLKSIZE=1330,          , block size                     -
               MACRF=(PM),            , will be opened for output      -
               RECFM=FBA              , fixed block, ansi cntlchars
SYSPRLEN EQU   *-SYSPRDCB             , length of DCB
         TITLE 'Subroutines: OPNSYSIN - Open SYSIN'
***********************************************************************
* Open SYSIN DD for input processing (if present)                     *
***********************************************************************
         SPACE
OPNSYSIN DS    0H                     , open SYSPRINT
         LA    R15,8                  , initialize return code
         STM   R14,R1,OPNSSAVE        , save registers
         DEVTYPE =CL8'SYSIN',DEVTYPE  , Check if SYSIN allocated
         IF    (LTR,R15,R15,Z)        , if yes
          MVC  SYSIN,SYSINDCB         , move DCB to reentrant storage
          LA   R1,SYSIN               , point to SYSIN DCB
          BAL  R14,OPENFILE           , go open the file
          IF   (LTR,R15,R15,Z)        , if successful
           LA  R15,0                  , indicate success
           ST  R15,OPNSSAVE+4         , set caller's RC
           OI  PROCFLAG,SYSNOPEN      , indicate that SYSPRINT is open
          ENDIF (LTR,R15,R15,Z)       , open was succesful
         ENDIF (LTR,R15,R15,Z)        , Test if SYSIN allocated
         LM    R14,R1,OPNSSAVE        , restore registers
         BR    R14                    , return to caller
         PUSH  PRINT
         PRINT NOGEN
SYSINDCB DCB   DDNAME=SYSIN,          , ddname for this file           -
               DSORG=PS,              , file is sequential             -
               LRECL=80,              , record length                  -
               BLKSIZE=80,            , block size                     -
               MACRF=(GM),            , will be opened for output      -
               RECFM=F,               , fixed block                    -
               EODAD=EXIT             , end of file address
SYSINLEN EQU   *-SYSINDCB             , length of DCB
         TITLE 'Subroutines: DOSVC99 - Perform DYNALLOC functions'
***********************************************************************
* Allocate a file to the current JOB/STC using SVC99.                 *
*                                                                     *
* Registers on entry:  R1 --->  Text Unit parameter list              *
*      field TEMPDDN:  DDNAME to be allocated                         *
*                                                                     *
* Registers on exit:   R15 = Retrun code                              *
*                        0 : Allocation successful                    *
*                  nonzero : RC from DYNALLOC call                    *
*      field MSGTEXT: error message text                              *
***********************************************************************
DOSVC99  DS    0H                     , perform DYNALLOC functions
         STM   R14,R3,DOSVSAVE        , save registers
         LR    R3,R1                  , point to Text Unit Pointerlist
         DEVTYPE TEMPDDN,DEVTYPE      , Test for DD card
         IF    (LTR,R15,R15,NZ)       , if no DD card
          LA   R2,REQBLK              , point to request block
          USING S99RB,R2              , tell assembler
          XC   REQBLK,REQBLK          , clear RB
          MVI  S99RBLN,REQBLKLN       , set up length
          MVI  S99VERB,S99VRBAL       , indicate ALLOC function
          ST   R3,S99TXTPP            , put into Request block
          LA   R3,RBPTR               , Point to RB pointer
          USING S99RBP,R3             , tell assembler
          ST   R2,S99RBPTR            , st RB address into RB PTR
          OI   S99RBPTR,S99RBPND      , turn on high order bit
          LA   R1,RBPTR               , get addres of RB pointer
          DYNALLOC                    , issue SVC 99
          ST   R15,DOSVSAVE+4         , set caller's R15
          XR   R15,R15                , clear R15
          ICM  R15,B'0011',S99ERROR   , get error code
          ST   R15,DOSVSAVE+8         , place into caller's R0
          MSGPUT MSG01E               , insert message text
          MVC  MSG01E1,TEMPDDN        , insert DDNAME into message
          X2CHRTRN MSG01E2,DOSVSAVE+06,LEN=2
          X2CHRTRN MSG01E3,DOSVSAVE+10,LEN=2
         ELSE
          ST   R15,DOSVSAVE+4         , set caller's R15
          MSGPUT MSG20I               , set up message text
         ENDIF
         LM    R14,R3,DOSVSAVE        , restore return address
         BR    R14                    , and retrun to caller
         DROP  R2,R3                  , not needed any more
         TITLE 'Subroutines: SETINIT  - Initialize some variables'
***********************************************************************
* Initialze some variables, set processing options according to       *
* runtime environmaent (STC or BATCH)                                 *
***********************************************************************
         SPACE 1
SETINIT  DS    0H                     , Initialize some variables
         STM   R14,R1,SETISAVE        , save registers
         XC    MEMCC,MEMCC            , return code field
         XC    MAXCC,MAXCC            , return code field
         XC    LASTCC,LASTCC          , return code field
         MVI   PROCFLAG,X'0'          , clear parm flag
         ZAP   LINENUM,=P'100'        , force page break
         ZAP   PAGENUM,=P'0'          , init page number
         TESTENV                      , STC? BATCH? TSO?
         IF    (CH,R1,EQ,=H'0')       , is this a batch job
          OI   PROCFLAG,ISJOB         , remember in process option flag
         ELSEIF (CH,R1,EQ,=H'4')      , is this an STC
          OI   PROCFLAG,ISSTC         , put indicator to flag
         ELSE                         , it is not supported
          BLANK MSGTEXT
          MSGPUT MSG14E               ,  insert message text
          BAL  R14,PUTMSG             , issue message
          SETMAXCC 12                 , get out with RC=12
          B    EXIT
         ENDIF
         LM    R14,R1,SETISAVE        , restore all register
         BR    R14                    , and return to caller
         TITLE 'Subroutines: GETLINE - Read a line from the SCRIPT'
***********************************************************************
*  This routine will read a record from the SYSIN file and place it   *
*  into PARMAREA                                                      *
***********************************************************************
         SPACE 1
GETLINE  DS    0H                     , Build SCRPTLIN
         STM   R14,R1,GETLSAVE        , save the registers
         BLANK PARMAREA               , clear receiving buffer
         GET   SYSIN,PARMAREA         , read next record
         OI    PROCFLAG,HAVESYSN      , indicate at least 1 rec read
         LM    R14,R1,GETLSAVE        , restore the registers
         BR    R14                    , back to caller
         TITLE 'Subroutines: ECHOLINE - Echo the command line'
***********************************************************************
*  This routine will echo the command line to the console unless the  *
*  NOECHO parameter is set or the line is in a non-executed           *
*  conditional block                                                  *
*                                                                     *
*  Registers on ENTRY :  R14 = return address                         *
*                                                                     *
*  Registers on exit  :  unchanged                                    *
***********************************************************************
         SPACE 1
ECHOLINE DS    0H                     , process the PARM statement
         STM   R14,R1,ECHOSAVE        , save registers
         MSGPUT MSG91I                , load message body
         MVC   MSG91I1,PARMAREA       , insert command text
         BAL   R14,PUTMSG             , send message
         LM    R14,R1,ECHOSAVE        , restore rgisters
         BR    R14                    , return to caller
         TITLE 'Subroutines: PROCLINE - Run the command via DIAG 8'
***********************************************************************
*  This routine will run the command which is in PARMAREA             *
***********************************************************************
         SPACE 1
PROCLINE DS    0H                     , process the PARM statement
         STM   R14,R1,PROCSAVE        , save registers
         MODESET MODE=SUP             , back to normal
         LRA   R14,PARMAREA           , point to command
         LA    R15,L'PARMAREA         , get command length
         DIAG  R14,R15,8              , Issue the command
         MODESET MODE=PROB            , back to normal
         LM    R14,R1,PROCSAVE        , restore rgisters
         BR    R14                    , return to caller
         TITLE 'Subroutines: GETPARAM - Get JCL Parameter'
***********************************************************************
* Registers on entry:                                                 *
*       R1  = address of parameter list                               *
*       R14 = Return address                                          *
* Registers on exit:                                                  *
*       R15 = Return code                                             *
*         0 : Parameter moved to PARMAREA                             *
*         4 : No parameter passed via JCL                             *
*       All other registers are restored                              *
*       PARMAREA: Text of JCL Parm                                    *
***********************************************************************
         SPACE 1
GETPARAM DS    0H                     , Get JCL Parameter
         STM   R14,R1,GETPSAVE        , save all registers
         BLANK PARMAREA               , clear parm text area
         L     R1,0(0,R1)             , Address of passed parm
         LH    R15,0(0,R1)            , R15 = Length of parameter
         LA    R1,2(0,R1)             , R1  = Address of Parameter
         IF    (LTR,R15,R15,NZ)       , If a parm is given
          OI   PROCFLAG,HAVEPARM      , indicate we have a PARM
          BCTR R15,0                  , decrement for EX
          MVC  PARMAREA(*-*),0(R1)    , move in parameters
          EX   R15,*-6                , via EX
          XR   R15,R15                , Indicate PARM read
         ELSE                         , no parm given
          LA   R15,4                  , Indicate in RC
         ENDIF                        , test if parm given
         ST    R15,GETPSAVE+4         , set caller's RC
         LM    R14,R1,GETPSAVE        , restore all registers
         BR    R14                    , and return to caller
         TITLE 'Subroutine OPENFILE - Open files as needed'
***********************************************************************
* Open a file, report any errors if open fails                        *
*                                                                     *
* Registers on entry:  R1  = address of DCB to be opened              *
*                      R14 = Return address                           *
*                                                                     *
* Registers on exit:   R15 = Returncode                               *
*                        0 ==> OPEN successful                        *
*                        8 ==> OPEN failed                            *
***********************************************************************
         SPACE 1
OPENFILE DS    0H                     , Open routine
         STM   14,3,OPENSAVE          , save registers
         LR    R3,R1                  , Point to DCB
         USING IHADCB,R3              , tell assembler
         MVC   TEMPDDN,DCBDDNAM       , insert DD name into msg
         MVC   OCLIST,THELIST         , Set up open/close list
         IF    (CLC,DCBDDNAM,EQ,TUSPDDNM)         SYSPRINT?
          OPEN ((R3),OUTPUT),MF=(E,OCLIST)
         ELSE
          OPEN ((R3),INPUT),MF=(E,OCLIST)
         ENDIF
         IF    (TM,DCBOFLGS,DCBOFOPN,O) if open was successfull
          LA   R15,0                  , clear return code
         ELSE                         , when open failed
          MSGPUT MSG02E               , insert message body
          MVC MSG02E1,TEMPDDN         , insert DDname into message
          BAL R14,PUTMSG              , issue the message
          LA  R15,8                   , load error RC
         ENDIF (TM,DCBOFLGS,DCBOFOPN,O) if open was okay
         ST    R15,OPENSAVE+4         , set caller's R15
         LM    14,3,OPENSAVE          , restore registers
         BR    R14                    , and return to caller
         DROP  R3                 , not needed outside this module
         TITLE 'Subroutines: CLOPRINT - Close SYSPRINT if open'
***********************************************************************
* Close SYSPRINT if open                                              *
***********************************************************************
         SPACE 1
CLOPRINT DS    0H                     , Close SYSPRINT if open
         IF    (TM,PROCFLAG,PRNTOPEN,O) close PARMDIR if open
          STM  R14,R1,CLOPSAVE        , save registers
          LA   R3,SYSPRINT            , point to DCB
          MVC   OCLIST,THELIST
          CLOSE ((R3)),MF=(E,OCLIST)  , and close it
          NI   PROCFLAG,255-PRNTOPEN
          LM   R14,R1,CLOPSAVE        , restore registers
         ENDIF (TM,PROCFLAG,PRNTOPEN,O) close PARMDIR if open
         BR    R14                    , return to caller
         TITLE 'Subroutines: CLOSYSIN - Close SYSIN if open'
***********************************************************************
* Close SYSIN if open                                                 *
***********************************************************************
         SPACE 1
CLOSYSIN DS    0H                     , Close SYSPRINT if open
         IF    (TM,PROCFLAG,SYSNOPEN,O) Test if SYSIN is open
          STM  R14,R1,CLOSSAVE        , save registers
          LA   R3,SYSIN               , point to DCB
          MVC   OCLIST,THELIST
          CLOSE ((R3)),MF=(E,OCLIST)  , and close it
          NI   PROCFLAG,255-SYSNOPEN
          LM   R14,R1,CLOSSAVE        , restore registers
         ENDIF (TM,PROCFLAG,SYSNOPEN,O) close PARMDIR if open
         BR    R14                    , return to caller
         TITLE 'Constants'                                    '
THELIST  OPEN  (,),MF=L               , Open close RDJFCB list
         LTORG
         TITLE 'Reentrant Storage'
WORKAREA DSECT
***********************************************************************
* The description of a few variables has been placed here because     *
* IFOX00 doesn't easily allow certain forward references in the EQU   *
* statement.                                                          *
***********************************************************************
THEWTO   WTO   '----+----1----+----2----+----3----+----4----+----5----+-
               ----6----+----7----+----8----+----9----+----0----+----1--
               ---+----2----',MF=L
MSGTEXT  EQU   THEWTO+4,124           , area for message texts
PRNTLINE DS    0CL133                 , line to SYSPRINT
PRNTCC   DS    CL1                    , control character
PRNTTEXT DS    CL132                  , text to be printed
BSPHRCMD CSECT
         TITLE 'Constants - Report Header Lines'
**********************************************************************
*  BSPHRCMD Version 1.0
*
*          |l      _,,,---,,_
*    ZZZzz /,:.-':''  . -.  ;-;;,
*         |,4-  ) )-,_. ,( (  :'-
*        '---''(_/--'  :-')_)
*
*  Placed into the Hercules Domain
*  by Volker Bandke, BSP GmbH'
*
**********************************************************************
         SPACE 1
HEAD001  DS    0CL(133)
         DC    C'1BSPHRCMD Version &BSPVER..&BSPMOD..2'
         FILL  HEAD001                ,
         ORG   HEAD001+133-8
         DC    C'PAGE '
HEAD0011 EQU   PRNTLINE+133-4,4
         ORG   ,                      ,
HEAD0C1  DS    0CL(133)
         DC    CL60'0'
         DC    C'         |l      _,,,---,,_'
         FILL  HEAD0C1
HEAD0C2  DS    0CL(133)
         DC    CL60' '
         DC    C'   ZZZzz /,:.-'':''    -.  ;-;;,'
         FILL  HEAD0C2
HEAD0C3  DS    0CL(133)
         DC    CL60' '
         DC    C'        |,4-  ) )-,_. ,( (  :''-'''
         FILL  HEAD0C3
HEAD0C4  DS    0CL(133)
         DC    CL60' '
         DC    C'       ''---''''(_/--''  :-'')_)'
         FILL  HEAD0C4
HEAD0C5  DS    0CL(133)
         DC    CL60'0'
         DC    C' Placed into the Hercules Domain'
         FILL  HEAD0C5
HEAD0C6  DS    0CL(133)
         DC    CL60' '
         DC    C' by Volker Bandke, BSP GmbH'
         FILL  HEAD0C6
         DS    0CL(133)
         TITLE 'Constants - Error and status messages'
**********************************************************************
*   BSPHC01E - xxxxxxxx DD statement not allocated
*   BSPHC02E - Open failed for DD xxxxxxxx
*   BSPHC03W - No commands in PARM or SYSIN
*   BSPHC14E - Environment not BATCH or STC
*   BSPHC91I - Processing command: ccccccccc
*   BSPHC99I - Function terminated, highest RC=xxxx
***********************************************************************
MSG01E   DC    C'BSPHC01E - Allocation failed for XXXXXXXX, RC=XXXX, S9+
               9ERROR=XXXX'
MSG01E1  EQU   MSGTEXT+33,8
MSG01E2  EQU   MSGTEXT+46,4
MSG01E3  EQU   MSGTEXT+61,4
MSG02E   DC    C'BSPHC02E - Open failed for DD statement XXXXXXXX'
MSG02E1  EQU   MSGTEXT+40,8
MSG03W   DC    C'BSPHC03W - No commands in PARM or SYSIN'
MSG14E   DC    C'BSPHC14E - Environment not BATCH or STC'
MSG20I   DC    C'BSPHC20I - DD already allocated, no allocation done'
MSG91I   DC    C'BSPHC91I - Processing command: ----+----1----+----2----
               -+----3----+----4----+----5----+----6----+----7----+----8
               8----+----9----+----0'
MSG91I1  EQU   MSGTEXT+31,100
MSG99I   DC    C'BSPHC99I - End of processing, MAXRC=xxxx'
MSG99I1  EQU   MSGTEXT+36,4
         TITLE 'Reentrant Storage'
WORKAREA DSECT                        , reentrant storage
DBL      DS    D                      , Double word for CVB
ALCPSAVE DS    4F                     , ALCPDUMP Save area R14 - R1
ALCUSAVE DS    4F                     , ALCUDUMP Save area R14 - R1
CLOPSAVE DS    4F                     , CLOPRINT Save area R14 - R1
CLOSSAVE DS    4F                     , CLOSYSIN Save area R14 - R1
DOSVSAVE DS    6F                     , DOSVC99  Save area R14 - R3
DOWASAVE DS    8F                     , DOWAIT   Save area R14 - R5
ECHOSAVE DS    4F                     , ECHOLINE Save area R14 - R1
GETPSAVE DS    4F                     , GETPARAM Save area R14 - R1
GETLSAVE DS    4F                     , GETLINE  Save area R14 - R1
OPENSAVE DS    6F                     , OPENFILE Save area R14 - R3
OPNPSAVE DS    4F                     , OPNPRINT Save area R14 - R1
OPNSSAVE DS    4F                     , OPNSYSIN Save area R14 - R1
PUTMSAVE DS    6F                     , PUTMSG   Save area R14 - R3
PROCSAVE DS    4F                     , PROCLINE Save area R14 - R1
SETISAVE DS    4F                     , SETINIT  Save area R14 - R1
TEMPDDN  DS    CL8                    , for DDNAME
MAXCC    DS    F                      , returncode given to caller
MEMCC    DS    F                      , current RC
LASTCC   DS    F                      , current RC
DEVTYPE  DS    6F                     , for devtype macro
         DS    0D
SYSPRINT DS    CL(SYSPRLEN)           , reentrant DCB for SYSPRINT
         DS    0D
SYSIN    DS    CL(SYSINLEN)           , reentrant DCB for SNAPDUMP
         DS    0D
PARMAREA DS    CL100                  , Area for commands
RBPTR    DS    F                      , request block pointer
REQBLK   DS    CL(S99RBEND-S99RB)     , Request block
REQBLKLN EQU   L'REQBLK               , length of request block
SVC99WA  DS    CL100                  , parameter area for SVC99
SVC99P1  EQU   SVC99WA+0,4            , SVC 99 parameter 1
SVC99P2  EQU   SVC99WA+4,4            , SVC 99 parameter 2
SVC99P3  EQU   SVC99WA+8,4            , SVC 99 parameter 3
OCLIST   OPEN  (,),MF=L
PROCFLAG DS    XL1                    , Processing control flag
ISTSO    EQU   B'10000000'            , running as a TSO user
ISJOB    EQU   B'01000000'            , running as a batch job
ISSTC    EQU   B'00100000'            , running as a started task
PRNTOPEN EQU   B'00010000'            , SYSPRINT is open
SYSNOPEN EQU   B'00001000'            , SYSIN is open
HAVEPARM EQU   B'00000100'            , We have a JCL Parm
HAVESYSN EQU   B'00000010'            , We have SYSIN line(s)
LINENUM  DS    PL2
PAGENUM  DS    PL2
         BSPEND                       , of module
