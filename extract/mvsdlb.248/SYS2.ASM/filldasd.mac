***********************************************************************
*                                                                     *
* MODULE NAME = FILLDASD                                              *
*                                                                     *
* DESCRIPTIVE NAME = Fill free DASD space with binary zeroes (OS/VS2) *
*                                                                     *
* STATUS = R202                                                       *
*                                                                     *
* FUNCTION = This assembler program fills the free space that exists  *
*            on DASD volumes with binary zeroes.                      *
*            FILLDASD uses DYNALLOC to allocate temporary data sets   *
*            and fills the tracks with binary zeroes.                 *
*            If a volume serial is specified in the PARM, then only   *
*            the free space of the specified volume is cleared.       *
*            Otherwise, FILLDASD tries to allocate space on all the   *
*            available volumes (i.e. PUBLIC, STORAGE, or SMS-managed).*
*                                                                     *
* AUTHOR = Gilbert Saint-Flour <gsf@pobox.com>                        *
*                                                                     *
* NOTES = SEE BELOW                                                   *
*                                                                     *
*    DEPENDENCIES = STRINGXF macro                                    *
*                                                                     *
*    AUTHORIZATION = NONE                                             *
*                                                                     *
*    RESTRICTIONS = NONE                                              *
*                                                                     *
* MODULE TYPE = PROCEDURE, (CSECT TYPE)                               *
*                                                                     *
*    PROCESSOR = IBM Assembler XF                                     *
*                                                                     *
*    MODULE SIZE = 2K                                                 *
*                                                                     *
*    ATTRIBUTES = NOREUS, PROBLEM STATE, KEY 8                        *
*                                                                     *
* OPERATION = See Examples below:                                     *
*                                                                     *
*   Clear free space on TEMP01                                        *
*                                                                     *
*     //FILLDASD EXEC PGM=FILLDASD,PARM=TEMP01                        *
*     //SYSPRINT DD SYSOUT=*                                          *
*                                                                     *
*   Clear free space on all available packs:                          *
*                                                                     *
*     //FILLDASD EXEC PGM=FILLDASD                                    *
*     //SYSPRINT DD SYSOUT=*                                          *
*                                                                     *
* PARAMETERS = None                                                   *
*                                                                     *
* RETURN-CODES = SEE BELOW                                            *
*                                                                     *
*        0       OK                                                   *
*        8       OPEN or CLOSE failed                                 *
*                                                                     *
* CHANGE LOG = SEE BELOW                                              *
*                                                                     *
*201 SYNAD                                                            *
*202 OS/VS2                                                           *
***********************************************************************
FILLDASD CSECT
         DC    C'GSF Utilities - FILLDASD R202 ',0H'0'
BEGIN    LR    R12,R15                 BASE REG
         USING BEGIN,R12
         L     R2,0(,R1)               A(JCLPARM)
*
*        Retrieve optional volume serial from the parm
*
         LH    R3,0(,R2)               L'JCLPARM
         LTR   R3,R3                   VOLSER SPECIFIED IN THE PARM?
         BZ    OPENPRT                 NO, JUMP
         STRING (2(R2),(R3)),INTO=VOLSER SAVE VOLUME SERIAL
         MVC   RTVOL,=AL2(DALVLSER)    VOLUME SERIAL IS KNOWN
*
*        Print title line
*
OPENPRT  OPEN  (SYSPRINT,OUTPUT)
         LTR   R15,R15                 OPEN OK?
         BNZ   EOJ                     NO, EXIT
         TIME  DEC                     GET DATE & TIME
         STM   R0,R1,TIMEDATE          SAVE TIME AND DATE
         STRING '1GSF Utilities - FILLDASD R200 - PARM=''',            X
               (2(R2),(R3)),''' ',(TIMEDATE+4,P,YYYY-MM-DD),           X
               1X,(TIMEDATE+0,1,X),'.',(TIMEDATE+1,1,X),INTO=PRTLINE
         PUT   SYSPRINT,PRTLINE        WRITE TITLE LINE
*
*        Set up DYNALLOC request block
*
         LA    R8,S99RB1               DYNALLOC REQUEST BLOCK
         USING S99RB,R8
         MVI   S99RBLN,S99RBEND-S99RB  LENGTH
         MVI   S99VERB,S99VRBAL        ALLOCATE
         LA    R0,=A(WKUNIT,TRK,PRIME,RTVOL,RTDDN,CONTIG+VL)
         ST    R0,S99TXTPP             TEXT UNIT POINTERS
*---------------------------------------------------------------------*
*        Main Loop: Allocate temporary DASD data sets                 *
*        and fill them up with X'00'                                  *
*---------------------------------------------------------------------*
*LOOP
ALLOC    LA    R1,=A(S99RB1+VL)        S99RBPTR
         DYNALLOC
         LTR   R15,R15                 dynalloc ok?
         BNZ   HALVE                   no, try smaller size
         MVC   DCBDISK+40(8),DDNAME    MOVE DDNAME INTO DCB
         OPEN  (DCBDISK,OUTPUT)        OPEN TEMP DATA SET
         LTR   R15,R15                 OPEN OK?
         BNZ   EOJ                     NO, EXIT
         L     R1,DCBDISK+44           DEB
         LH    R3,046(,R1)             # of tracks actually allocated
         STRING 1X,%TIME,'ALLOCATED DDN=',DDNAME,                      X
               ' VOL=',VOLSER,                                         X
               ' TRACKS=',((R3),,L),                                   X
               INTO=PRTLINE
         PUT   SYSPRINT,PRTLINE        WRITE A PRINT LINE
         LR    R0,R3                   TALLY TRACKS
         AL    R0,TOTTRKS              TALLY TRACKS
         ST    R0,TOTTRKS              TALLY TRACKS
         ALR   R3,R3                   # OF BLOCKS
         SLR   R0,R0
         LH    R1,DCBDISK+62           BLKSIZE
         LH    R2,DCBDISK+82           LRECL
         DR    R0,R2                   RECORDS/BLOCK
         MR    R2,R1                   # OF RECORDS
*--LOOP
PUTDISK  PUT   DCBDISK                 LOCATE A DISK RECORD
         BCT   R3,PUTDISK              FILL UP THE TRACKS
*--LOOP
         CLOSE DCBDISK                 CLOSE DISK DCB
         FREEPOOL DCBDISK              free buffer pool
         B     ALLOC
HALVE    SLR   R2,R2
         ICM   R2,B'0111',PRIMEQTY     # OF TRACKS
         SRL   R2,1                    HALVE
         STCM  R2,B'0111',PRIMEQTY     # OF TRACKS
         LTR   R2,R2                   ZERO?
         BP    ALLOC                   NO, CONTINUE
*ENDLOOP
         STRING '0',%TIME,'TOTAL TRACKS WRITTEN: ',(TOTTRKS,F,L),      X
               INTO=PRTLINE
         PUT   SYSPRINT,PRTLINE        WRITE LAST PRINT LINE
         CLOSE SYSPRINT                CLOSE PRINT DCB
EOJ      SVC   3                       EOJ
*---------------------------------------------------------------------*
*                                                                     *
*        Error routine to trap hardware errors (EQC)                  *
*                                                                     *
*        //DD1 DD DSN=SYS1.VDATA33.CYL-01EF.TRK-000B,DISP=(,CATLG),   *
*        //  DSORG=PSU,RECFM=F,BLKSIZE=80,                            *
*        //  UNIT=3390,VOL=SER=DATA33,SPACE=(ABSTR,(1,7436))          *
*                                                                     *
*---------------------------------------------------------------------*
SYNAD1   LR    R10,R14                 return address
         SYNADAF ACSMETH=QSAM          get error message
         LR    R2,R1                   addr of SYNAD message
         STRING '0',%TIME,(50(R2),128-50),INTO=PRTLINE
         PUT   SYSPRINT,PRTLINE        WRITE SYNAD MESSAGE
**       STRING '0',%TIME,(DCBDISK+8,4,X),INTO=PRTLINE
         LA    R0,8                    L'CCCCHHHH
         LA    R1,111(,R2)             CCCCHHHH
*LOOP
SYNAD2   CLI   0(R1),C'F'              A-F ?
         BH    SYNAD2N                 NO, ITERATE
         IC    R14,0(,R1)              yes, X'C1' -> X'CA'
         LA    R14,9(,R14)             yes, X'C1' -> X'CA'
         STC   R14,0(,R1)              yes, X'C1' -> X'CA'
SYNAD2N  LA    R1,1(,R1)               BUMP INDEX UP
         BCT   R0,SYNAD2               ITERATE
*ENDLOOP
         PACK  DWD(3),111(5,R2)        CCCC..
         LH    R4,DWD                  CCCC
         MH    R4,=H'15'               cylinders -> tracks
         PACK  DWD+2(3),111+4(5,R2)    HHHH..
         AH    R4,DWD+2                add tracks
         STRING '0',%TIME,'Bad track at CCHH=',(DWD,4,X),              X
               ' VOL=SER=',VOLSER,',SPACE=(ABSTR,(1,',((R4),,L),'))',  X
               INTO=PRTLINE
         PUT   SYSPRINT,PRTLINE        WRITE CCHH
         SYNADRLS                      free error message and save area
         BR    R10                     goback to PUT macro
*---------------------------------------------------------------------*
*        CONSTANTS AND DATA                                           *
*---------------------------------------------------------------------*
WKUNIT   DC    AL2(DALUNIT,1,8),CL8'SYSALLDA'
TRK      DC    AL2(DALTRK,0)
PRIME    DC    AL2(DALPRIME,1,L'PRIMEQTY)
PRIMEQTY DC    FL3'10000'
RTVOL    DC    AL2(DALRTVOL,1,L'VOLSER)
VOLSER   DC    C'123456'
RTDDN    DC    AL2(DALRTDDN,1,L'DDNAME)
DDNAME   DC    CL8' '
CONTIG   DC    AL2(DALSPFRM,1,1),X'08'
DWD      DS    D
DCBDISK  DCB   DSORG=PS,MACRF=PL,DDNAME=*,RECFM=FB,LRECL=80,BUFNO=10,  X
               SYNAD=SYNAD1,BLKSIZE=80
SYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,RECFM=FBA,LRECL=121
S99RB1   DC    XL20'00'              XL(S99RBEND-S99RB)'00'
TIMEDATE DS    2F                    TIME MACRO
TOTTRKS  DS    F
PRTLINE  DS    CL121
VL       EQU   X'80000000'           END OF LIST
         IEFZB4D0                    S99RB
         IEFZB4D2                    KEY TABLE
         STRING GENERATE
*        YREGS
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END   BEGIN
