PASS     TITLE 'DDUVOLX - - - TSO command to display disk records'
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*     This program displays disk records on TSO terminals.
*     It first requests an address to display. ( CCHHR format)
*     Then it reads and displays the record's count field.
*     Then it reads and displays the key and data areas.
*     Then it starts over.
*
*     DDUX displays data set records
*     DDUVOLX displays disk volume records
*     The "X" is to allow CLISTs DDU and DDUVOL
*
*     Blame: somitcw@comcast.net
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE
DDUVOLX  CSECT ,
         USING *,R15              Set temporary base register
         SAVE  (14,12),,'DDUVOLX.&SYSDATE..&SYSTIME'    Save reg.s
         LA    R12,SAVEAREA       Load the address of the new save area
         ST    R12,8(,R13)        Connect old and new save areas
         ST    R13,4(,R12)        Connect old and new save areas
         LR    R13,R12            Connect old and new save areas
         DROP  R15                Drop the temporary base register
         LR    R12,R15            Load the program's base register
         USING DDUVOLX,R12        Give the assembler the new base
OPEN     DS    0H
         BSPAUTH ON               Allow VSAM file display and MODESET
         OPEN  DCB                OPEN the file
         L     R11,DCB+44         Load DEB address
         MODESET KEY=ZERO         Obtain key zero
         MVC   38(10,R11),EXTENT  Set new extent
         MODESET KEY=NZERO        Obtain key eight
         BSPAUTH OFF              APF no longer needed
         MVC   CCHHR1(4),38(R11)  Set default to the beginning extent
         MVI   CCHHR1+4,0         Set default to record 1
         UNPK  WORK(9),38(5,R11)  Unpack the beginning extent
         TR    WORK(8),TABLE2     Change X'FA'-X'FF' to C'A'-C'F'
         MVC   BEGIN(8),WORK      Put beginning extent into the message
*        UNPK  WORK(9),42(5,R11)  Unpack the ending extent
*        TR    WORK(8),TABLE2     Change X'FA'-X'FF' to C'A'-C'F'
*        MVC   ENDING(8),WORK     Put ending extent into the message
         TPUT  BEGIN,L'BEGIN      Display the beginning extent
*        TPUT  ENDING,L'ENDING    Display the ending extent
TGET     DS    0H
         TPUT  MESSAGE,L'MESSAGE  Display message upon the TSO terminal
         MVC   INPUT,SPACES       Set input data area to spaces
         TGET  INPUT,10           Accept address to display
         OC    INPUT,SPACES       Change all letters to capital
         TPUT  INPUT,10           Echo address to display
         CLC   END,INPUT          See if 'END' has been entered
         BE    ENDOFJOB           If yes, go to end-of-program
         CLI   INPUT,C' '         See if spaces entered
         BE    READDISK           If spaces, go to read the disk record
         CLI   INPUT+L'INPUT-1,C' ' See if 10 bytes not entered
         BE    TGET               If not 10 bytes, go try again
         TR    INPUT,TABLE1       Change all input for conversion
         PACK  WORK(6),INPUT(11)  Pack the input address
         SLR   R1,R1              Clear a work register
         IC    R1,WORK+4          Load the record number
         BCTR  R1,0               Drop the record number by one
         STC   R1,WORK+4          Store the previous record number
         MVC   CCHHR1(5),WORK     Move the address to the first IOB
READDISK DS    0H
         EXCP  IOB1               Read the record's count field
         WAIT  ECB=ECB            Wait for the excp to complete
         MVC   CCHHR1,COUNT       Update CCHHR1 for next record
         CLI   ECB,X'7F'          See if good read
         BNE   IOERROR1           Go to CLOSE and re-OPEN the file
         UNPK  DISPCNTC,COUNT(3)   Convert cylinder number for display
         UNPK  DISPCNTH,COUNT+2(3) Convert track number    for display
         UNPK  DISPCNTR,COUNT+4(2) Convert record number   for display
         UNPK  DISPCNTK,COUNT+5(2) Convert key length      for display
         UNPK  DISPCNTD,COUNT+6(3) Convert data length     for display
         TR    DISPCNT,TABLE2     Change X'FA'-X'FF' to C'A'-C'F'
         MVI   DISPCNTC+4,C','    Put a comma after cylinder number
         MVI   DISPCNTH+4,C','    Put a comma after track number
         MVI   DISPCNTR+2,C','    Put a comma after record number
         MVI   DISPCNTK+2,C','    Put a comma after key length
         TPUT  DISPCNT,L'DISPCNT-1  Display count field
         CLC   COUNT+5(3),F0      See if an end of file record
         BZ    EOFFOUND           If no length, display 'end of file'
         MVC   CCHHR2,COUNT       Set seek location for second read
         SLR   R0,R0              Clear a work register
         SLR   R10,R10            Clear a work register
         IC    R0,COUNT+5         Load the key length of the record
         ICM   R10,B'0011',COUNT+6 Load the data length of the record
         AR    R0,R10             Find the length of the buffer
         LR    R10,R0             Save the length of the buffer
         STH   R0,CCWREAD+6       Save the length of the buffer
         GETMAIN RU,LV=(0)        Get storage to read the record
*
         LR    R11,R1             Save the address of storage obtained
         STCM  R11,B'0111',CCWREAD+1  Put buffer address in read CCW
         EXCP  IOB2               READ the record's key and data
         WAIT  ECB=ECB            Wait for the EXCP to complete
         CLI   ECB,X'7F'          See if a good READ
         BNE   IOERROR2           Go to CLOSE and re-OPEN the file
*
* Routine to display a record
* Input registers        R10=Full length    R11=Starting address
* Work Regs.  R5=Work-register  R6=Length-working-with  R7=Displacement
*             R8=Current-length   R9=Current-address
*
*    Output display record format:
* DDDDD  XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX  *CCCCCCCCCCCCCCCC*
*        Same as last line
*
         SLR   R7,R7              Load starting displacement
         LR    R8,R10             Load length for working
         LR    R9,R11             Load address for working
         B     LOOP2              Go print the first record
LOOP     DS    0H
         CH    R8,H16             See if a short display
         BL    LOOP2              If short, skip same-as logic
         CLC   DISPLAYC,0(R9)     See if old record the same
         BNE   LOOP2              If not, go process
         CLI   SAMESW,1           Check same-data switch
         BE    LOOP3              If set, skip display
         MVI   SAMESW,1           Set same-data switch
         TPUT  SAMEDATA,L'SAMEDATA  Display 'Same as last line'
         B     LOOP3              Go skip display of line
LOOP2    DS    0H
         MVI   SAMESW,0           Clear same-data switch
         LTR   R8,R8              See if any data left to display
         BNP   FREEMAIN           If finished, go free the record
         MVI   DISPLAY,C' '       Clear display area to spaces
         MVC   DISPLAY+1(L'DISPLAY-1),DISPLAY  Display area to spaces
         CVD   R7,WORK            Store new displacement
         UNPK  DISPLAYD,WORK+5(3) Unpack the displacement
         OI    DISPLAYD+4,X'F0'   Correct the sign
         LR    R6,R8              Load length of record left
         CH    R6,H16             See if over 16 bytes
         BNH   SHORTREC           If not over 16 bytes, don't reset
         LA    R6,16              Set length to work with as 16
SHORTREC DS    0H
         BCTR  R6,0               Drop length to display by 1
         EX    R6,MVC             Move data from buffer to DISPLAYC
         UNPK  WORK33(9),DISPLAYC(5) Convert first word to display
         UNPK  WORK33+8(9),DISPLAYC+4(5) Convert 2nd word to display
         UNPK  WORK33+16(9),DISPLAYC+8(5) Convert 3rd word to display
         UNPK  WORK33+24(9),DISPLAYC+12(5) Convert 4th word to display
         TR    WORK33(L'WORK33-1),TABLE2  Change hex letters to display
         MVI   WORK32,C' '          Clear work area to spaces
         MVC   WORK32+1(L'WORK32-1),WORK32  Clear work area to spaces
         LA    R5,1(R6,R6)        Load length of good data
         EX    R5,MVC2            Move good data from WORK33 to WORK32
         MVC   DISPLAY1(8),WORK32    Move first word to display
         MVC   DISPLAY2(8),WORK32+8  Move secord word to display
         MVC   DISPLAY3(8),WORK32+16 Move third word to display
         MVC   DISPLAY4(8),WORK32+24 Move fourth word to display
         MVI   DISPLAYC-1,C'*'    Put in beginning asterick
         LA    R5,DISPLAYC(R6)    Find end of char. display area
         MVI   1(R5),C'*'         Put ending asterick past char.display
         TPUT  DISPLAY,L'DISPLAY  Display data upon tha TSO terminal
LOOP3    DS    0H
         LA    R7,16(,R7)         Bump displacement up for display
         SH    R8,H16             Bump length left down to display
         LA    R9,16(,R9)         Bump address up to display
         B     LOOP               Return to mainline code
FREEMAIN DS    0H
         LR    R0,R10             Load length to free
         LR    R1,R11             Load address to free
         FREEMAIN R,LV=(0),A=(1)  Free the I/O buffer
         B     TGET               Go to request next address to display
MVC      MVC   DISPLAYC(1),0(R9)  Move data to display area
MVC2     MVC   WORK32(1),WORK33   Move data to display area
EOFFOUND DS    0H
         TPUT  EOFMSG,L'EOFMSG    Display 'End of file'
         B     TGET               Go to get next request
         EJECT
IOERROR1 DS    0H
         TPUT  IOE1MSG,L'IOE1MSG  Display 'I/O error, IOB #1 follows'
         BAL   R14,IOB1TRC        Go display the IOB in error
         CLOSE DCB                Close the file
         XC    ECB,ECB            Clear the ECB just in case
         MVI   IOB1,X'40'         Re-set IOB request type just in case
         XC    IOB1+1(4),IOB1+1   Clear some flags in IOB just in case
         B     OPEN               Go to re-open the file
         SPACE 3
IOERROR2 DS    0H
         TPUT  IOE2MSG,L'IOE2MSG  Display 'I/O error, IOB #2 follows'
         BAL   R14,IOB2TRC        Go display the IOB in error
         CLOSE DCB                Close the file
         XC    ECB,ECB            Clear the ECB just in case
         MVI   IOB2,X'40'         Re-set IOB request type just in case
         XC    IOB2+1(4),IOB2+1   Clear some flags in IOB just in case
         B     OPEN               Go to re-open the file
ENDOFJOB DS    0H
         CLOSE DCB                Close the file
         L     R13,4(,R13)        Restore the caller's save area addr.
         RETURN (14,12),RC=0      Return to caller
         SPACE
IOB1TRC  DS    0H
         UNPK  DISP1(9),IOB1(5)   Change hex numbers to display
         UNPK  DISP2(9),IOB1+4(5) Change hex numbers to display
         UNPK  DISP3(9),IOB1+8(5) Change hex numbers to display
         UNPK  DISP4(9),IOB1+12(5) Change hex numbers to display
         UNPK  DISP5(9),IOB1+16(5) Change hex numbers to display
         UNPK  DISP6(9),IOB1+20(5) Change hex numbers to display
         UNPK  DISP7(9),IOB1+24(5) Change hex numbers to display
         UNPK  DISP8(9),IOB1+28(5) Change hex numbers to display
         TR    DISP,TABLE2        Change hex numbers to display
         MVI   DISP1+8,C' '       Clear extra garbage after UNPK
         MVI   DISP2+8,C' '       Clear extra garbage after UNPK
         MVI   DISP3+8,C' '       Clear extra garbage after UNPK
         MVI   DISP4+8,C' '       Clear extra garbage after UNPK
         MVI   DISP5+8,C' '       Clear extra garbage after UNPK
         MVI   DISP6+8,C' '       Clear extra garbage after UNPK
         MVI   DISP7+8,C' '       Clear extra garbage after UNPK
         TPUT  DISP,71            Display data upon the TSO terminal
         BR    R14                Return to trace mainline code
         SPACE
IOB2TRC  DS    0H
         UNPK  DISPA(9),IOB2(5)   Change hex numbers to display
         UNPK  DISPB(9),IOB2+4(5) Change hex numbers to display
         UNPK  DISPC(9),IOB2+8(5) Change hex numbers to display
         UNPK  DISPD(9),IOB2+12(5) Change hex numbers to display
         UNPK  DISPE(9),IOB2+16(5) Change hex numbers to display
         UNPK  DISPF(9),IOB2+20(5) Change hex numbers to display
         UNPK  DISPG(9),IOB2+24(5) Change hex numbers to display
         UNPK  DISPH(9),IOB2+28(5) Change hex numbers to display
         TR    DISPA,TABLE2       Change hex numbers to display
         MVI   DISPA+8,C' '       Clear extra garbage after UNPK
         MVI   DISPB+8,C' '       Clear extra garbage after UNPK
         MVI   DISPC+8,C' '       Clear extra garbage after UNPK
         MVI   DISPD+8,C' '       Clear extra garbage after UNPK
         MVI   DISPE+8,C' '       Clear extra garbage after UNPK
         MVI   DISPF+8,C' '       Clear extra garbage after UNPK
         MVI   DISPG+8,C' '       Clear extra garbage after UNPK
         TPUT  DISPA,71           Display data upon the TSO terminal
         BR    R14                Return to trace mainline code
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      Work Area and Constants
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
SAVEAREA DC    18F'0'             Register save area
WORK     DS    L                  Work area
WORK32   DS    CL32               32 byte work area
INPUT    DS    CL10               Address to display in display shifted
WORK33   DS    CL33               33 byte work area
BEGIN    DC    CL34'CCCCHHHH01 is the beggining record'
ENDING   DC    CL29'CCCCHHHH is the ending track '
* *  THE FOLLOWING ELEVEN LINES MUST STAY TOGETHER  * * * * * * * * * *
DISPCNT  DS    0CL53              Data to display and pad
         DC    CL4'CYL='
DISPCNTC DS    CL5                Data to display and pad
         DC    CL5' TRK='
DISPCNTH DS    CL5                Data to display and pad
         DC    CL5' Rec='
DISPCNTR DS    CL3                Data to display and pad
         DC    CL8' KeyLen='
DISPCNTK DS    CL3                Data to display and pad
         DC    CL10' Data-len='
DISPCNTD DS    CL5                Data to display and pad
* *  The preceeding eleven lines must stay together * * * * * * * * * *
* * The following ten lines must stay together  * * * * * * * * * * * *
DISPLAY  DS    0CL63
DISPLAYD DS    CL5                Displacement within record
         DS    CL2                Spaces
DISPLAY1 DS    CL9                Data to display and pad
DISPLAY2 DS    CL9                Data to display and pad
DISPLAY3 DS    CL9                Data to display and pad
DISPLAY4 DS    CL9                Data to display and pad
         DS    CL3                Spaces and room for a single quote
DISPLAYC DS    CL16               Data in display format
         DS    CL1                Room for a single quote ( tick mark )
* * The preceeding ten lines must stay together * * * * * * * * * * * *
* * The following nine lines must stay together * * * * * * * * * * * *
DISP     DS    0CL72              Data to display and pad
DISP1    DS    CL9                Data to display and pad
DISP2    DS    CL9                Data to display and pad
DISP3    DS    CL9                Data to display and pad
DISP4    DS    CL9                Data to display and pad
DISP5    DS    CL9                Data to display and pad
DISP6    DS    CL9                Data to display and pad
DISP7    DS    CL9                Data to display and pad
DISP8    DS    CL9                Data to display and pad
* * The preceeding nine lines must stay together  * * * * * * * * * * *
* * The following nine lines must stay together * * * * * * * * * * * *
DISPA    DS    0CL72              Data to display and pad
         DS    CL9                Data to display and pad
DISPB    DS    CL9                Data to display and pad
DISPC    DS    CL9                Data to display and pad
DISPD    DS    CL9                Data to display and pad
DISPE    DS    CL9                Data to display and pad
DISPF    DS    CL9                Data to display and pad
DISPG    DS    CL9                Data to display and pad
DISPH    DS    CL9                Data to display and pad
* * The preceeding nine lines must stay together  * * * * * * * * * * *
SAMEDATA DC    CL24'       Same as last line'  Duplicate line display
SAMESW   DS    XL1                Same-data switch
END      DC    CL3'END'           Data for end-of-program compare
SPACES   DC    CL10' '            Constant of spaces
F0       DC    F'0'               Constant of binary zeroes for compare
H16      DC    H'16'              Constant for compare
*
*                   CCCCHHHHCCCCHHHHLLLL
* EXTENT DC    XL10'0000000003BE000B2CF4'  New extent
*                   Start   End     Tracks
*               CYL0-TRK0 CYL958-TRK11 11508
*
*                   CCCCHHHHCCCCHHHHLLLL
EXTENT   DC    XL10'00000000FFFFFFFFFFFF'  New extent
*                   Start   End     Tracks
*            CYL0-TRK0 CYL65535-TRK65535 65535
*
MESSAGE  DC    CL49'Enter CCHHR to display, must be 10 digits, or END'
EOFMSG   DC    CL29'* * * *  End of file  * * * *'
IOE1MSG  DC    CL43'* * * *  I/O Error, IOB #1 Follows  * * * *'
IOE2MSG  DC    CL43'* * * *  I/O Error, IOB #2 Follows  * * * *'
TABLE1   DS    0XL256             Translation table
         DC    192X'FF'           Hex 00-BF invalid
         DC    XL16'FF0A0B0C0D0E0FFFFFFFFFFFFFFFFFFF'  C0-CF
         DC    32X'FF'            Hex D0-EF invalid
         DC    XL16'00010203040506070809FFFFFFFFFFFF'  F0-FF
TABLE2   EQU   *
         DC    64CL1'.'           Invalid characters
         DC    XL16'404142434445464748494A4B4C4D4E4F' Special Char.
         DC    XL16'505152535455565758595A5B5C5D5E5F' Special Char.
         DC    XL16'606162636465666768696A6B6C6D6E6F' Special Char.
         DC    XL16'707172737475767778797A7B7C7D7E7F' Special Char.
         DC    XL16'808182838485868788898A8B8C8D8E8F' Lower-case char.
         DC    XL16'909192939495969798999A9B9C9D9E9F' Lower-case char.
         DC    XL16'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF' Lower-case char.
         DC    XL16'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF' Lower-case char.
         DC    XL16'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF' Upper-case char.
         DC    XL16'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF' Upper-case char.
         DC    XL16'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF' Upper-case char.
         DC    CL16'0123456789ABCDEF'  Numbers and converted stuff
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      DCB, IOBs, ECB, and CCWs
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE
ECB      DC    F'0'               Event Control Block
COUNT    DS    D                  Count input area
DCB      DCB   DDNAME=X,          DDName                               X
               MACRF=E,           MACRO reference                      X
               DSORG=PS           Data Set organization
IOB1     DS    0D                 IOB to read a count field
         DC    XL4'40000000'      Command chaining used
         DC    A(ECB)             Address of the ECB
CSW1     DC    D'0'               Channel Status Word
         DC    A(CCW1)            Address of the Channel Command string
         DC    A(DCB)             Address of the Data Control Block
         DC    A(0)               IOB restart
         DC    XL4'0'             Flags and counters
SEEK1    DC    D'0'               Seek address
CCHHR1   EQU   SEEK1+3,5          CCHHR to display in binary format
IOB2     DS    0D                 IOB to read a count field
         DC    XL4'40000000'      Command chaining used
         DC    A(ECB)             Address of the ECB
CSW2     DC    D'0'               Channel Status Word
         DC    A(CCW2)            Address of the Channel Command string
         DC    A(DCB)             Address of the Data Control Block
         DC    A(0)               IOB restart
         DC    XL4'0'             Flags and counters
SEEK2    DC    D'0'               Seek address
CCHHR2   EQU   SEEK2+3,5          CCHHR to display in binary format
         DS    0D                 Insure alignment
* CCW1   CCW   7,SEEK1+1,X'40',6  Seek to cylinder and head (MVS does)
CCW1     CCW   X'31',SEEK1+3,X'40',5  Search for record before one read
         CCW   8,*-8,0,0          TIC back until search complete
         CCW   X'92',COUNT,0,8    Read the count field
         DS    0D                 Insure alignment
* CCW2   CCW   7,SEEK2+1,X'40',6  Seek to cylinder and head (MVS does)
CCW2     CCW   X'31',SEEK2+3,X'40',5  Search for record before one read
         CCW   8,*-8,0,0          TIC back until search complete
CCWREAD  CCW   X'0E',*-*,0,*-*    Read the key and data areas
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*      Register equates
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE
R0       EQU   0                  Register equate for register 0
R1       EQU   1                  Register equate for register 1
R2       EQU   2                  Register equate for register 2
R3       EQU   3                  Register equate for register 3
R4       EQU   4                  Register equate for register 4
R5       EQU   5                  Register equate for register 5
R6       EQU   6                  Register equate for register 6
R7       EQU   7                  Register equate for register 7
R8       EQU   8                  Register equate for register 8
R9       EQU   9                  Register equate for register 9
R10      EQU   10                 Register equate for register 10
R11      EQU   11                 Register equate for register 11
R12      EQU   12                 Register equate for register 12
R13      EQU   13                 Register equate for register 13
R14      EQU   14                 Register equate for register 14
R15      EQU   15                 Register equate for register 15
         END   ,                  The end of the program
