RUNZ9    TITLE 'USE SPIE UNDER MVS/370 TO ENABLE MANY INSTRUCTIONS'
*
*   OVERVIEW
*   --------
*
*   This program is provided as a front-end for other programs
*   which may have instructions present in executable code which
*   are newer than System/370, but which are to run under MVS/370.
*
*   The support for newer instructions is provided by using the SIMZ9
*   module as a SPIE routine which receives control after an operation
*   exception which would normally have caused an S0C1 abend.
*
*   SIMZ9 will not receive control for any instructions which are
*   not signalled as invalid by the system to the application program.
*   That is, instructions executed by the CPU or successfully handled
*   by the operating system will not cause an invocation of SIMZ9.
*
*   A strictly 24-bit addressing execution environment is assumed.
*
*   Programs written for a 31-bit addressing environment may be able
*   to run without error by using the support provided by SIMZ9.
*
*
*   EXECUTION ENVIRONMENT
*   --------- -----------
*
*   This program should be specified as the program to be executed
*   in the EXEC JCL statement or in the TSO CALL command operand.
*
*   RUNZ9, SIMZ9 and the subject program must all be fetchable at
*   run time.  For batch additional STEPLIB (or JOBLIB) concatentions
*   can be specified to provide access to modules as required.  For
*   TSO the simplest scenario is when all three load modules are in
*   the data set specified in the CALL command.
*
*
*   PARAMETER SYNTAX
*   --------- ------
*
*   The program parameter can be used to specify the subject program
*   and the parameter to be passed to the subject program.
*
*   Up to eight characters before a backslash are deemed to specify
*   the program name to be executed.  Characters after the backslash
*   are deemed to be the program parameter to be passed to the program
*   to be executed.
*
*
*   EXAMPLES
*   --------
*
*
*   1.   //STEP1  EXEC PGM=RUNZ9,PARM='PROGNAME\SYSTEM/\USER'
*
*        would function as
*
*        //STEP1  EXEC PGM=PROGNAME,PARM='SYSTEM/\USER'
*
*        Note that only the first backslash has significance to RUNZ9.
*
*
*   2.   //STEP1  EXEC PGM=RUNZ9,PARM='PROGNAMEFRED\SYSTEM/USER'
*
*        is functionally equivalent to the first example as 'FRED'
*        is ignored because the first eight characters are filled
*        by 'PROGNAME'.
*
*
*   3.   //STEP1  EXEC PGM=RUNZ9,PARM='MYPROG\ ISASIZE(4K)/MYPARM'
*
*        would function as
*
*        //STEP1  EXEC PGM=MYPROG,PARM=' ISASIZE(4K)/MYPARM'
*
*        Note that trailing blanks on the subject program name are
*        not necessary, but are allowed.  Blanks after the backslash
*        are passed to the subject program.
*
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         EJECT
RUNZ9    CSECT
*
*   Initialize
*
         USING RUNZ9,R15
         B     $START
         DROP  R15                     (RUNZ9)
         DC    AL1(NAMELEN)
NAME     DC    C'RUNZ9 - 2008-01-15'
NAMELEN  EQU   *-NAME
         DC    C' GP@P6 '
$START   STM   R14,R12,12(R13)         Save registers
         LR    R11,R15                 Set base
         USING RUNZ9,R11
         LA    R2,SAVE                 Chain save areas
         ST    R13,4(,R2)
         ST    R2,8(,R13)
         LR    R13,R2
         LR    R10,R1                  Copy plist pointer
*
*   Extract subject program name
*
         L     R2,0(,R1)               Point to parameter
         LH    R5,0(,R2)               Get parameter length
         LTR   R5,R5                   Any parameter?
         BNP   ABEND806                No, that's a problem
         LA    R4,2(,R2)               Point to parameter text
         LA    R6,SUBJECT              Point to text target
         LA    R0,8                    Get maximum name length
SUBJCTLP CLI   0(R4),C'\'              Reached end of name?
         BE    GTSUBJCT                Yes
         MVC   0(1,R6),0(R4)           No, copy a character
         LA    R4,1(,R4)               Point to next source byte
         LA    R6,1(,R6)               Point to next target byte
         BCTR  R5,0                    Decement parm length to go
         LTR   R5,R5                   End of parameter?
         BNP   GTSUBJCT                Yes
         BCT   R0,SUBJCTLP             No, go process next byte
*
*   Flush remaining data until backslash encountered
*
FLUSHLP  CLI   0(R4),C'\'              Found backslash?
         BE    GTSUBJCT                Yes
         BCT   R5,SUBJCTLP             No, go look at next byte
*
*   Verify that a program name was supplied
*
GTSUBJCT CLI   SUBJECT,C' '            Extracted a program name?
         BNH   ABEND806                No, missing name
*
*   Extract program parameter
*
         LTR   R5,R5                   Pointing to backslash?
         BNP   GOTPARM                 No
         BCT   R5,HAVEPARM             Yes, decrement it from length
         B     GOTPARM                 Backslash was end of parm
HAVEPARM LA    R4,1(,R4)               Point past backslash
         STH   R5,PARMLEN              Save the parameter length
         LA    R6,PARMTEXT             Point to target
         LA    R7,L'PARMTEXT           Get target length
         CR    R5,R7                   Will it fit?
         BNH   SIZECHKD                Yes, because 100 is the max
         STH   R5,PARMLEN              No,  the parameter length
         WTO   MF=(E,SIZEWTO)          ...  but just in case
SIZECHKD MVCL  R6,R4                   Copy parameter text
GOTPARM  EQU   *
*
*   Set SIMZ9 as the SPIE routine
*
         LOAD  EPLOC=SIMZ9             Fetch SIMZ9 into storage
         LR    R2,R0                   Copy SIMZ9 EPA
         SPIE  (R2),(1)                Catch 0C1 only
*
*   Invoke subject program
*
         LA    R1,USRPLIST             Point to parameter list
         LINK  EPLOC=SUBJECT           Invoke application
*
*   Terminate
*
         L     R13,4(,R13)             Point to caller's save area
         L     R14,12(,R13)            Restore return address
         LM    R0,R12,20(R13)          Restore other registers
         BR    R14                     Return with user's cond code
*
*   Abend if no program name supplied
*
ABEND806 ABEND 806,DUMP
*
*   Constants and Literals
*
SIZEWTO  WTO   'WARNING - PARAMETER TOO LONG FOR RUNZ9 TO PASS ALL OF I+
               T',ROUTCDE=(2,11)       Should do a GETMAIN to prevent
USRPLIST DC    A(PARMLEN+X'80000000')
         LTORG
         DC    0D'0'
SIMZ9    DC    CL8'SIMZ9'
*
*   Variables
*
SAVE     DC    18F'0'
SUBJECT  DC    CL8' '
PARMLEN  DC    H'0'
PARMTEXT DC    XL254'00'
*
         DC    0D'0'
         DC    CL8'EO_RUNZ9'
*
         END   RUNZ9
