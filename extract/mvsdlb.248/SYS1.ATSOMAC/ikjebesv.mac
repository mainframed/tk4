*/*
         MACRO
&NAME    IKJEBESV &REG,&CODE,&ID,&CODEREG=YES,&COMMREG=(1)
.*C104000                                                        YM2624
.*A716000,946000-995000                                        @Y30NQKC
.*D136000-472000,112000-120000                                 @Y30NQKC
.*
.*  THIS MACRO IS USED BY ALL EDIT SUBCOMMANDS AND SERVICE ROUTINES
.*  TO CONTROL PROLOG CODE GENERATED.  THE BASIC SECTION OF THIS
.*  MACRO IS THE OS/360 SAVE MACRO INSTRUCTION.  IN ADDITION, THIS
.*  MACRO WILL GENERATE A BALR AND USING ON REGISTER 11 AND WILL
.*  CROSS CHAIN SAVE AREAS.
.*
         LCLA  &A,&B,&C
         LCLC  &E,&F,&G,&H
         AIF   ('&REG' EQ '').E1                                 YM2624
&A       SETA  ((K'&ID+2)/2)*2+4
.CONTA   AIF   (T'&REG(1) NE 'N').E3
         AIF   ('&CODE' EQ 'T').CONTC
         AIF   ('&CODE' NE '').E2
&A       SETA  &REG(1)*4+20
         AIF   (&A LE 75).CONTD
&A       SETA  &A-64
.CONTD   AIF   (N'&REG NE 2).CONTE
         STM   &REG(1),&REG(2),&A.(13) SAVE REGISTERS.
         AGO   .BASE
.CONTE   AIF   (N'&REG NE 1).E3
         ST    &REG(1),&A.(0,13) SAVE REGISTER.
         AGO   .BASE
.CONTC   AIF   (&REG(1) GE 14 OR &REG(1) LE 2).CONTF
         STM   14,15,12(13)   SAVE REGISTERS.
&A       SETA  &REG(1)*4+20
         AIF   (N'&REG NE 2).CONTG
         STM   &REG(1),&REG(2),&A.(13) SAVE REGISTERS.
         AGO   .BASE
.CONTG   AIF   (N'&REG NE 1).E3
         ST    &REG(1),&A.(0,13) SAVE REGISTER.
         AGO   .BASE
.CONTF   AIF   (N'&REG NE 2).CONTH
         STM   14,&REG(2),12(13) SAVE REGISTERS.
         AGO   .BASE
.CONTH   AIF   (N'&REG NE 1).E3
         STM   14,&REG(1),12(13) SAVE REGISTERS.
.BASE    ANOP
         AIF   ('&CODEREG' EQ 'NO').SKPBASE
         BALR  BASEREG,0 -    ESTABLISH ADDRESSABILITY FOR THIS
         USING *,BASEREG -    ROUTINE.
         MODID  BRANCH=YES                                     @Y30NQKC
.SKPBASE ANOP
         AIF   ('&COMMREG' NE '(1)').COMM1
         LR    COMMREG,1 -    INITIALIZE COMMUNICATION AREA
*                             POINTER.
         AGO   .COMM3
.COMM1   AIF   ('&COMMREG'(1,1) NE '(').COMM2
         LR    COMMREG,&COMMREG INITIALIZE COMMUNICATION AREA
*                             POINTER.
         AGO   .COMM3
.COMM2   ANOP
         AIF   ('&COMMREG' EQ 'NO').COMM3
         L     COMMREG,&COMMREG INITIALIZE COMMUNICATION AREA
*                             POINTER.
.COMM3   ANOP
         L     15,(CANXTSVA-IKJEBECA)(COMMREG) ADDRESS OF NEXT
*                             AVAILABLE SAVE AREA.
         ST    13,4(,15) -    CROSS CHAIN PREVIOUS AND CURRENT
         ST    15,8(,13) -    SAVE AREAS.
         LR    13,15 -        INITIALIZE SAVE AREA POINTER.
         LA    15,72(,13) -   OBTAIN ADDRESS OF NEXT SAVE AREA
         ST    15,(CANXTSVA-IKJEBECA)(COMMREG) AND SAVE.
         MEXIT
.E1      MNOTE 12,'REGISTER PARAMETER NOT SPECIFIED.'
         MEXIT
.E2      MNOTE 12,'INVALID CODE SPECIFIED.'
         MEXIT
.E3      MNOTE 12,'INVALID REGISTER SPECIFICATION.'
         MEXIT
         MEND
**/
*% IKJEBESV: MACRO KEYS(
*        DATAREG,                      /* IS THE BASEREG DECLARED AND
*                                         RESTRICTED BY CODED AND USED
*                                         TO ADDRESS CASCWKA         */
*        OPTIONS,                      /* OPTIONS FOR PLS PROC STMT  */
*        CODEREG,                      /* CONTROLS CODEREG OR NOCODE-
*                                         REG ON THE PROC STMT.      */
*        COMMREG,                      /* IDENTIFIES THE REGISTER
*                                         POINTING TO IKJEBECA ON
*                                         ENTRY TO THE MODULE.       */
*        GEN                           /* CONTROLS PROC AND ENTRY
*                                         CODE GENERATION.           */
*        );
*
*        /* ALABEL                        LABEL ON THIS MACRO INVOCA-
*                                         TION USED AS THE PROC NAME */
*
*  DECLARE
*    EBESVGEN CHAR EXT,                /* CNTL AMNT GENERATED        */
*    ALINE CHAR,                       /* A LINE OF TEXT FOR DOC     */
*    PLSAUTODATA CHAR,                 /* FOR PLS PROC OPTION ...    */
*                                      /* ... AUTODATA               */
*    WORKAREA CHAR,                    /* AREA FOR AUTOMATIC DATA    */
*    PROCOPTN CHAR,                    /* OPTIONS FOR PLS PROC STMT  */
*    EHAREGS CHAR EXT,                 /* DECLARE REGS BY EPILOG     */
*    EHAUNIQUE CHAR EXT,               /* EDIT DECLARES              */
*    J FIXED,                          /* WORK VARIABLE              */
*    DOCCOMCOLALT FIXED EXT,           /* ALTERNAT DOCCOMCOL         */
*    DOCCOMCOL FIXED EXT;              /* COMMENT COL FOR ANSTEXT    */
*
*        IF DOCCOMCOL ^> 0             /* COMMENT COL NOT SET        */
*          THEN                        /*   YES-COMMENT SET FOR LEFT */
*            DOCCOMCOL = 38;           /* SET DEFAULT TO RIGHT SIDE  */
*
*        IF MACLABEL ^= ''
*          THEN DO;
*            TYPE = MACLABEL(LENGTH(MACLABEL)-3:
*                            LENGTH(MACLABEL)-1);
*            WORKAREA = 'CASCWKA';
*
*            IF TYPE = 'ELE'
*              THEN WORKAREA = 'CASRWKA';
*
*            IF TYPE = 'EPE'
*              THEN WORKAREA = 'CASRWKA';
*
*            IF TYPE = 'PE1'
*              THEN WORKAREA = 'CASRWKA';
*            END;
*
*
*        IF EBESVGEN = ''              /* FIRST TIME THRU            */
*          THEN                        /*   YES                      */
*            IF GEN(1) = 'ALL'         /* WANT TO GEN ALL            */
*              THEN                    /*   YES                      */
*                EBESVGEN = 'ALL';     /* THEN SAY SO                */
*              ELSE                    /*   FIRST TIME GEN 'PROC'    */
*                EBESVGEN = 'PROC';    /* SAY TO GEN PROC ONLY       */
*          ELSE                        /*   NO, SECOND TIME THRU     */
*            IF EBESVGEN = 'ALL'       /* IS EVERYTHING GEND         */
*              THEN                    /*   YES                      */
*                RETURN;               /* NOTHING TO DO BUT RET      */
*              ELSE                    /*   NO, GEN SAV REG CODE     */
*                GO TO THECODE;        /* GEN THE SAVE REG CODE      */
*
*        IF OPTIONS ^= ''              /* NON NULL STRING            */
*          THEN DO;                    /*   TRUE                     */
*            PROCOPTN = OPTIONS;
*            PROCOPTN = PROCOPTN(2:LENGTH(PROCOPTN)-1) ×× ',';
*            END;
*
*        PLSAUTODATA = 'AUTODATA(' ×× WORKAREA ×× 'L),';
*
*        IF WORKAREA ^= ''
*          THEN
*            PROCOPTN = PROCOPTN ×× PLSAUTODATA ;
*
*        PROCOPTN = PROCOPTN ×× 'ID,NOSAVEAREA,NODATAREG,REENTRANT';
*
*        IF CODEREG(1) = 'NO'          /* IS NO CODEREG WANTED       */
*          THEN                        /*   YES                      */
*            PROCOPTN = PROCOPTN ×× ',NOCODEREG'; /* ADD TO LIST     */
*
*          ELSE                        /*   CODEREG IS WANTED        */
*            IF NUMBER(CODEREG) = 1    /* CODEREG(YES)               */
*              THEN                    /*   YES                      */
*                PROCOPTN = PROCOPTN ×× ',CODEREG(11)';/* ADD TO LIST*/
*
*              ELSE                    /* DEFAULT OR (YES,R1,R2,..)  */
*                IF CODEREG = ''       /* IS DEFAULT REQUESTED       */
*                  THEN                /*    YES-DEFAULT OF REG 11   */
*                    PROCOPTN = PROCOPTN ×× ',CODEREG(11)';
*
*                  ELSE DO;            /*   NO-WANT DEFAULT PLUS     */
*                    PROCOPTN = PROCOPTN ×× ',CODEREG' ×× CODEREG;
*                    J = INDEX(PROCOPTN,CODEREG(1)); /* FIND 'YES'   */
*                    PROCOPTN = PROCOPTN(1:J-1) ×× '11' ××
*                    PROCOPTN(J+LENGTH(CODEREG(1)):LENGTH(PROCOPTN));
*                    END;
*
*        IF MACLABEL ^= ''             /* PROC NAME GIVEN            */
*          THEN                        /*   YES                      */
*            ANS(MACLABEL) COL(2);
*
*        ANS('PROCEDURE OPTIONS (') COL(MACCOL);
*        ANS( PROCOPTN ×× ');') COL(MACCOL+2);
*
*        IF EBESVGEN = 'PROC'          /* GEN 'PROC' ONLY            */
*          THEN                        /*   YES                      */
*            RETURN;                   /* RETURN TO CALLER           */
*
* THECODE:
*        IF GEN(1) = 'ENTRY'           /* WANT SECONDARY ENTRY POINT */
*          THEN DO;                    /*   YES-WANT AN ENTRY STMT   */
*            ANS(MACLABEL) COL(MACLMAR);
*            ANS('ENTRY;') COL(MACCOL);
*            END;
*
*        IF COMMREG(1) ^= ''           /* IS THERE PTR TO CA         */
*          THEN DO;                    /*   YES                      */
*            ALINE = 'COMMREG = ' ×× COMMREG(1) ×× ';';
*            DOCCOMCOLALT = LENGTH(ALINE) + MACCOL + 3;
*            ANS(ALINE ×× '? DOC (GET ADDR OF IKJEBECA);')
*               RESCAN COL(MACCOL);
*            END;
*
*          ELSE DO;                    /*   NO - USE DEFAULT         */
*            ANS('RESPECIFY (GPR01P) RSTD;') COL(MACCOL);
*            ALINE = 'COMMREG = GPR01P;';
*            DOCCOMCOLALT = LENGTH(ALINE) + MACCOL + 1;
*            ANS(ALINE ×× '? DOC (GET ADDR OF IKJEBECA);')
*               COL(MACCOL);
*            ANS('RESPECIFY (GPR01P) UNRSTD;') COL(MACCOL);
*
*            IF INDEX(EHAREGS,'01P') = 0   /*     GPR01P NOT DECLARED*/
*              THEN                        /*       TRUE             */
*                EHAREGS = EHAREGS ×× '01P';
*            END;
*
*        IF INDEX(EHAREGS,'15P') = 0   /* GPR15P NOT DECLARED        */
*          THEN                        /*   TRUE                     */
*            EHAREGS = EHAREGS ×× '15P';
*
*        IF INDEX(EHAREGS,'13P') = 0   /* GPR15P NOT DECLARED        */
*          THEN                        /*   TRUE                     */
*            EHAREGS = EHAREGS ×× '13P';
*
*        IF INDEX(EHAUNIQUE,'CASAVPTR') = 0 /* SAVE AREA PTR NOT DCLD */
*          THEN                        /*   TRUE                     */
*            EHAUNIQUE = EHAUNIQUE ×× '#CASAVPTR PTR(31) BASED#' ××
*              '@SAVE AREA PTR FOR IKJEBESV@';
*
*        IF INDEX(EHAUNIQUE,'COMMREG') = 0 /* COMMREG NOT DECLD       */
*          THEN                        /*   TRUE                     */
*            EHAUNIQUE = EHAUNIQUE ×× '#COMMREG REG(9) PTR(31) RSTD#' ××
*              '@POINTER TO EDIT COMMO AREA@';
*
*        IF INDEX(EHAUNIQUE,DATAREG(1)) = 0 /* DATAREG NOT DCL       */
*          THEN                        /*   TRUE                     */
*            EHAUNIQUE = EHAUNIQUE ××
*              '#' ×× DATAREG(1) ××
*              ' REG(10) PTR(31) RSTD#' ××
*              '@BASEREG FOR EDIT SUBCOMMAND WORK AREA@';
*
*        ANS('RESPECIFY (GPR13P,GPR15P) RSTD;') SKIP(2) COL(MACCOL);
*
*        ALINE = 'GPR15P = CANXTSVA;';
*        DOCCOMCOLALT = LENGTH(ALINE) + MACCOL + 3;
*        ANS(ALINE ×× '? DOC (SAVE AREA FOR THIS MODULE); ')
*           COL(MACCOL);
*
*        ALINE = 'EVAL(GPR15P + 4) -> CASAVPTR = GPR13P;';
*        DOCCOMCOLALT = LENGTH(ALINE) + MACCOL + 3;
*        ANS(ALINE ×× '? DOC (SET THIS SAVEAREA BKWD PTR); ')
*            COL(MACCOL);
*
*        ALINE = 'EVAL(GPR13P + 8) -> CASAVPTR = GPR15P;';
*        DOCCOMCOLALT = LENGTH(ALINE) + MACCOL +3;
*        ANS(ALINE ×× '? DOC (SET CALLER FWD PTR); ') COL(MACCOL);
*
*        ALINE = 'GPR13P = GPR15P;';
*        DOCCOMCOLALT = LENGTH(ALINE) + MACCOL + 3;
*        ANS(ALINE ×× '? DOC (NEW SAVEAREA ADDR); ') COL(MACCOL);
*
*        ALINE = 'CANXTSVA = GPR13P + 72;';
*        DOCCOMCOLALT = LENGTH(ALINE) + MACCOL + 3;
*        ANS(ALINE ×× '? DOC (UPDATE NEX-SAVE-AREA PTR); ') COL(MACCOL);
*
*        ANS('RESPECIFY (GPR13P,GPR15P) UNRSTD;') COL(MACCOL);
*
*        IF DATAREG(1) ^= ''           /* IS THERE VALUE FOR DATAREG */
*          THEN DO;                    /*   YES - GEN ADDRESSABILITY */
*
*            ALINE = DATAREG(1) ×× ' = ADDR(' ×× WORKAREA ×× ');';
*            DOCCOMCOLALT = LENGTH(ALINE) + MACCOL + 3;
*            ANS(ALINE ×× '? DOC (SET BASE REG FOR WORK AREA); ')
*               SKIP(2) COL(MACCOL);
*
*            ALINE = 'GEN( USING @DATD,' ×× DATAREG(1) ×× ');';
*            DOCCOMCOLALT = LENGTH(ALINE) + MACCOL + 3;
*            ANS(ALINE ×× '? DOC (SET ADDRESSABILITY TO CASCWKA); ')
*              COL(MACCOL);
*            END;
*
*        DOCCOMCOLALT = 0;             /* RESET TO ZERO              */
*% END IKJEBESV;
