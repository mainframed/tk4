//TESTEXIT    JOB   MSGLEVEL=1
//*              *
//*      THIS PROCEDURE WILL ASSEMBLE TESTEXIT AND COMBINE IT
//*      WITH  EXIT ROUTINES FROM EXITLIB. THE RESULTANT LOAD
//*      MODULE WILL BE PLACED IN TESTLIB AND CAN BE EXECUTED
//*      VIA A JOBLIB.   THE INPUT CAN BE GENERATED BY IEBDG.
//*      THE REQUIRED JCL FOR EXECUTION CAN BE FOUND IN THE
//*      SMF SRL MANUAL. #GC 28-0706                           @ZA32916
//*              *
//TEST   EXEC   ASMFCL
//ASM.SYSIN   DD *
         TITLE 'TESTEXIT'
TESTEXIT CSECT
*A 021100,022600,117100,118600,122600,124100,202600,204100     @YM04149
*A 335100,388600-389331,625100,626600,640100,641600,649100     @YM04149
*A 650600,652100,653600,665100,666600,679600-679800            @YM04149
*A 687702-687710,701600,764100-764420,936100-938088            @YM04149
*A 943600-943700,945600-945700,951100-951300,954100-954300     @YM04149
*A 895600,920020,920184,926620,935100                          @YM04149
*C 261100,261500,619000,622000,940000,952800,954000            @YM04149
*C 889500,926600                                               @YM04149
*D 843500,860500,876000,894000-894500,914000                   @YM00551
*A 615100,692600,692800,769100,769200,806100,806200            @YM00551
*A 843100-843300,875600-875800                                 @YM00551
*A 912600,920100-920484,926600-926700,928100,935100            @YM00551
*C 507000,507500,520000,545000,546000,692000                   @YM00551
*C 704500,707000,709500,712000,714500,717000,719500,722000     @YM00551
*C 724500,727000,729500,732000,734500,737000,739500,742000     @YM00551
*C 744500,747000,749500,752000,754500,757000,759500,762000     @YM00551
*C 768000,769000                                               @YM00551
*C 785500,787500,789500,791500,793500,795500,797500,799500     @YM00551
*C 805000,806000,823000,825000,827000,829000,831000,833000     @YM00551
*C 835000,837000,842500,849500,850500,851500,852500,853500     @YM00551
*C 860000,863500,864500-865500,866500-867500,868500-869500     @YM00551
*C 870500-871000,875000                                        @YM00551
*C 893500,895000,895500,913500,914500                          @YM00551
*C 920500,925000-928000,929000,933500,934500-935500            @YM00551
*C 956000-957000                                                 Y01034
*A 940500                                                        Y01034
*C 103000,619000                                                 A46754
*C 604000,605000,605500                                          A33525
*C BEFORE LABEL MOREUTL TO TEST RC8 AND EXT TIME IN SECONDS    @ZA17320
*C IN JCL COMMENTS - SRL NUMBER                                @ZA32916
*A AFTER LABEL NEXTUSO - REINIT REG7.                          @ZA32916
*C AFTER LABEL FITTING - MOVE MORE THAN 256 BYTES OF DATA      @ZA32916
*A AFTER LABEL PACKER - DELETE EXECUTED MVC                    @ZA32916
*C AT LABEL CORE. GETMAIN FOR 1000 HEX BYTES                   @ZA32916
*C USE IEBGENER UTILITY INSTEAD OF IEBUPDTE TO CIRCUMVENT      @ZA32916
*  PROBLEM WITH SMP/RECEIVE IEBUPDTE PROCESSING DATA AS CONTROL@ZA32916
* C - STARTLOC FOR USER COMMUNICATIONS AREA FROM 32 TO 33      @ZA46423
         ENTRY TSMFWTM                WRITES TO MANX
         ENTRY IEFYS                  WRITES TO SYSPRINT
         EJECT
***********************************************************************
* MODULE NAME - TESTEXIT                                              *
* ALIASES - NONE                                                      *
* STATUS - REL 03.7 SU 7                                      @ZA46426*
* FUNCTION - TO PROVIDE AN ENVIRONMENT FOR TESTING USER-WRITTEN SMF   *
*            EXIT ROUTINES BEFORE THEY ARE LINKEDITED INTO THE        *
*            SYSTEM.                                                  *
* ENTRY POINTS - 1. TESTEXIT - MAIN ENTRY POINT. ENTERED BY THE       *
*                              OPERATING SYSTEM WHEN TESTEXIT IS      *
*                              EXECUTED.                              *
*                2. SMFWTM - ENTRY FOR THE SECTION THAT WRITES TO     *
*                            MANX TO SIMULATE WRITING TO A SMF DATA   *
*                            SET. ALL EXIT ROUTINES MAY ACCESS THIS   *
*                            ENTRY.                                   *
*                3. IEFYS - ENTRY FOR THE SECTION THAT WRITES TO      *
*                           SYSPRINT FROM IEFACTRT.                   *
* EXITS - THE ONLY EXIT IS A RETURN TO THE OPERATING SYSTEM.          *
* SUBROUTINES - 1. IEBDG - THE DATA GENERATOR IS ATTACHED ONCE FOR    *
*                          EACH EXIT ROUTINE TO BE TESTED             *
*                          (EXCEPT FOR IEFU29).                @Z40FPPF
*               2. IEFUJV                                             *
*               3. IEFUJI                                             *
*               4. IEFUSI                                             *
*               5. IEFUSO                                      @YM04149
*               6. IEFUTL                                             *
*               7. IEFU83                                             *
*               8. IEFACTRT                                           *
*               9. IEFUJP                                      @YM04149
*              10. IEFU29                                      @Z40FPPF
* ATTRIBUTES -  TESTEXIT IS SERIALLY REUSEABLE BUT NOT RE-ENTRANT     *
* CSECT NAME - TESTEXIT                                               *
* MACROS USED - GETMAIN,FREEMAIN,ATTACH,WAIT,DETACH,OPEN,CLOSE,GET,   *
*               PUT,WTO,DCB                                           *
* WORK AREAS -  A WORK AREA TO CONSTRUCT PARAMETER LISTS IS OBTAINED  *
*               FROM SUBPOOL 1. THE AMOUNT OF CORE MAY BE CHANGED BY  *
*               CHANGING THE VARIABLE CORE. THE WORK AREA MUST BE     *
*               LARGE ENOUGH TO CONTAIN THE LARGEST PARAMETER LIST    *
*               FOR ONE CALL TO AN EXIT ROUTINE.                      *
* REGISTER USEAGE - REGISTER 10 IS THE BASE REGISTER. ALL OTHERS ARE  *
*                   MULTI-PURPOSE.                                    *
* CALLING SEQUENCES - 1.TESTEXIT IS CALLED BY THE EXEC STATEMENT. A   *
*                       PARAMETER LIST CONTAINS THE ALIAS NAMES OF    *
*                       THE EXITS TO BE TESTED AND THE NUMBER OF      *
*                       CALLS TO MAKE TO EACH EXIT. FOR EXAMPLE -     *
*                         //STEP EXEC PGM=TESTEXIT,PARM='UJV=3,ACT=5' *
*                     2.SMFWTM IS CALLED TO WRITE A RECORD TO MANX    *
*                       AS FOLLOWS                                    *
*                             R1 CONTAINS THE MESSAGE ADDRESS         *
*                             R15 CONTAINS THE ADDRESSOF ENTRY SMFWTM *
*                             R14 CONTAINS THE RETURN ADDRESS         *
*                     3.IEFYS IS CALLED BY IEFACTRT IN THE SAME WAY   *
*                       THAT IS DESCRIBED IN THE SMF SRL MANUAL.      *
***********************************************************************
         SPACE 3
PARM     EQU   1                       PARM REG
TOTAL    EQU   2                       TOTAL
ACM      EQU   3                       R
INDEX    EQU   4                       E
FIELDREG EQU   5                       G
CNT      EQU   6                       I
CNT1     EQU   7                       S
AREA     EQU   7                       T
CNT2     EQU   8                       E
BACK     EQU   9                       R
TABLE    EQU   9                        E
BASE     EQU   10                       Q
BASE2    EQU   11                       U
WORK     EQU   12                       A
SAVEREG  EQU   13                       T
RET      EQU   14                       E
ENTRY    EQU   15                       S
EQUAL    EQU   8                       EQUAL MASK
R12      EQU   12                      R12
R0       EQU   0                       R0
R15      EQU   15                      R15
R1       EQU   1                       R1
R14      EQU   14                      R14
R2       EQU   2                       R2
R3       EQU   3                                               @ZA32916
R4       EQU   4                                               @ZA32916
R5       EQU   5                                               @ZA32916
D12      EQU   12                      D
D4       EQU   4                       I
D8       EQU   8                       S
D2       EQU   2                       P
D3       EQU   3                       L
D7       EQU   7                       A
D11      EQU   11                      C
D15      EQU   15                      E
D19      EQU   19                      M
D1       EQU   1                       E
D0       EQU   0                       N
D36      EQU   36                      T
D48      EQU   48                      S
D41      EQU   41                      -
D20      EQU   20                       D
D32      EQU   32                       I
D28      EQU   28                       S
D35      EQU   35                       P
D40      EQU   40                       L
D24      EQU   24                       A
D29      EQU   29                       C
D33      EQU   33                       E
D240     EQU   240                      M
D37      EQU   37                       E
D6       EQU   6                        N
D39      EQU   39                       T
D13      EQU   13                       S
D5       EQU   5                        -
D62      EQU   62                        DIS
D82      EQU   82                           PLACE
D42      EQU   42                                MENTS
L7       EQU   7                       L
L3       EQU   3                       E
L1       EQU   1                       N
L144     EQU   144                     G
L2       EQU   2                       T
L8       EQU   8                       H
L4       EQU   4                       S
L5       EQU   5                       -
L11      EQU   11                       L
L13      EQU   13                       E
L9       EQU   9                        N
L16      EQU   16                       G
L124     EQU   124                      T
L120     EQU   120                      H
L0       EQU   0                        S
M1       EQU   1                       MASK OF 1
X40      EQU   X'40'                   H
X10      EQU   X'10'                   E
X00      EQU   X'00'                   X
X80      EQU   X'80'                    C
X01      EQU   X'01'                    O
XF0      EQU   X'F0'                    N
X08      EQU   X'08'                    S
         EJECT
***********************************************************************
* SECTION FUNCTIONS - 1. SAVES REGISTERS                              *
*                     2. ESTABLISHES ADDRESSABILITY                   *
*                     3. PREPARES TO PROCESS PARAMETER LIST FROM THE  *
*                        EXEC STATEMENT.                              *
*                     4. OBTAINS A WORK AREA                          *
*                     5. INITIALIZES FIELDS                           *
* INPUT - R1 CONTAINS THE ADDRESS OF THE PARAMETER LIST FROM THE EXEC *
*            STMT. REFER TO SUPERVISOR AND DATA MANAGEMENT SERVICES   *
*            FOR A DESCRIPTION OF THE FORMAT OF THE PARAMETER LIST.   *
*         R15 CONTAINS THE ENTRY POINT ADDRESS                        *
*         R14 CONTAINS THE RETURN ADDRESS TO THE OPERATING SYSTEM     *
*         R13 ADDRESS OF CALLER'S SAVE AREA                           *
*                                                                     *
* OUTPUT - R2(TOTAL)  ADDRESS OF END OF EXEC PARAMETER LIST           *
*          R3(ACM)  ADDRESS OF BEGINNING OF EXEC PARAMETER LIST       *
*          R9(TABLE) ADDRESS OF 5 BYTE FIELD OF ZEROS, TABLE          *
*          R10(BASE) BASE REGISTER                                    *
*          R13(SAVEREG) ADDRESS OF SAVE, SAVE AREA IN TESTEXIT        *
*                                                                     *
* EXITS - 1. GETMAIN TO OBTAIN WORK AREA                              *
*         2. PARMPROS TO PROCESS PARAMETERS                           *
***********************************************************************
         SPACE 3
         USING *,R15
         B     HERE                         BRANCH AROUND
         DC    CL8'TESTEXIT'                MODULE NAME
HERE     STM   RET,R12,D12(SAVEREG)         SAVE REGISTERS
         DROP  15
         LR    BASE,ENTRY
         USING TESTEXIT,BASE,BASE2          ESTABLISH ADDRESSABILITY
         L     BASE2,ATEXIT+D4              ADDRESSABILITY OK FROM BASE
         ST    SAVEREG,SAVE+D4              CHAIN SAVE AREAS
         LR    CNT,SAVEREG
         LA    SAVEREG,SAVE
         ST    SAVEREG,D8(CNT)
         L     PARM,0(PARM)                 ADDRESS OF COUNT FIELD
         LH    TOTAL,0(PARM)                CHARACATERS IN PARM FIELD
         LA    PARM,D2(PARM)                ADDRESS OF PARM FIELD
         AR    TOTAL,PARM                   END OF PARM LIST
         LR    ACM,PARM
         L     R0,AMTMAIN                   GET SUBPOOL AND CORE
         GETMAIN R,LV=(0)
         ST    PARM,MAIN                    ADDRESS OF STORAGE AREA
         SR    INDEX,INDEX                  MAKE SERIALLY REUSEABLE
         ST    INDEX,USERCOMM               INITIALIZE USER COMM FIELD
         STH   INDEX,RECORDS                INITIALIZE RECORDS
         STC   INDEX,FIELD+D3               ZERO BIT FIELDS
         STC   INDEX,FIELD+D7                Z
         STC   INDEX,FIELD+D11               E
         STC   INDEX,FIELD+D15               R
         STC   INDEX,FIELD+D19               O
         LA    INDEX,X40                    BLANK OUT FIELD
         STC   INDEX,USERID                 BLANK USER ID
         MVC   USERID+D1(L7),USERID         MOVE USER ID
         MVC   NUMBERS(L'NUMBERS),DDNAMES+D2   ZERO FIELD        A46754
         LA    TABLE,NUMBERS
         EJECT
***********************************************************************
* SECTION FUNCTIONS - 1. PROCESS THE EXEC PARAMETER LIST              *
*                        THE FIRST 3 LETTERS BETWEEN COMMAS ARE       *
*                        COMPARED TO THE FIRST 3 BYTES OF EACH WORD   *
*                        IN FIELD. IF A MATCH IS FOUND, THE CHAR-     *
*                        ACTERS AFTER THE EQUAL SIGN AND BEFORE THE   *
*                        NEXT COMMA ARE CONVERTED TO BINARY AND PUT   *
*                        INTO NUMBERS. ALSO, THE BYTE AFTER THE NAME  *
*                        OF THE EXIT IN FIELDS IS SET TO X'01' TO     *
*                        INDICATE THAT THE EXIT IS TO BE CALLED. IF   *
*                        NO MATCH IS FOUND OR IF THE NUMBER OF CALLS  *
*                        IS GT 255, AN ERROR MESSAGE IS WRITTEN, AND  *
*                        TESTEXIT RETURNS CONTROL TO THE OPERATING    *
*                        SYSTEM.                                      *
* ENTRIES - FROM THE FIRST SECTION                                    *
* EXITS - 1. DATAGEN TO GENERATE PARAMETER LISTS FOR REQUESTED EXITS  *
*         2. PARMERR TO WRITE AN ERROR MESSAGE TO SYSPRINT AND RETURN *
*            TO THE SYSTEM.                                           *
* INPUT - R2(TOTAL) - ADDRESS OF END OF THE EXEC PARAMETER LIST       *
*         R3(ACM) - ADDRESS OF BEGINNING OF EXEC PARAMETER LIST       *
*         R9(TABLE) - ADDRESS OF NUMBERS                              *
* TABLES - 1. NUMBERS - 9 BYTES, INDICATES THE NUMBER OF CALLS TO THE *
*                       EXIT ROUTINES, INITIALIZED WITH ZEROS:        *
*                       BYTE 0 - NUMBER OF CALLS TO IEFUJV(UJV)       *
*                       BYTE 1 - NUMBER OF CALLS TO IEFUJI(UJI)       *
*                       BYTE 2 - NUMBER OF CALLS TO IEFUSI(USI)       *
*                       BYTE 3 - NUMBER OF CALLS TO IEFUSO(USO)@YM04149
*                       BYTE 4 - NUMBER OF CALLS TO IEFUTL(UTL)       *
*                       BYTE 5 - NUMBER OF CALLS TO IEFU83(U83)       *
*                       BYTE 6 - NUMBER OF CALLS TO IEFACTRT(ACT)     *
*                       BYTE 7 - NUMBER OF CALLS TO IEFUJP(UJP)@YM04149
*                       BYTE 8 - NUMBER OF CALLS TO IEFU29(U29)@Z40FPPF
*          2. FIELD - 9 WORD AREA, THE FIRST 3 BYTES OF EACH WORD     *
*                     CONTAIN THE NAME OF THE EXIT. THE 4TH BYTE IS   *
*                     AN INDICATOR OF WHETHER OR NOT TO CALL THE EXIT.*
*                     FIELD MUST BE ON A FULL-WORD BOUNDRY AND IN THE *
*                     FOLLOWING ORDER                                 *
*                       WORD 0 - CL3'UJV',BL1'0'   IEFUJV             *
*                       WORD 1 - CL3'UJI',BL1'0'   IEFUJI             *
*                       WORD 2 - CL3'USI',BL1'0'   IEFUSI             *
*                       WORD 3 - CL3'USO',BL1'0'   IEFUSO      @YM04149
*                       WORD 4 - CL3'UTL',BL1'0'   IEFUTL             *
*                       WORD 5 - CL3'U83',BL1'0'   IEFU83             *
*                       WORD 6 - CL3'ACT',BL1'0'   IEFACTRT           *
*                       WORD 7 - CL3'UJP',BL1'0'   IEFUJP      @YM04149
*                       WORD 8 - CL3'U29',BL1'0'   IEFU29      @Z40FPPF
* REGISTER USAGE -  R2(TOTAL) - ADDRESS OF END OF PARAMETER LIST      *
*                   R3(ACM) - ADDRESS OF NEXT PARAMETER CHARACTER     *
*                   R4(INDEX) - COUNT OF COMPARISONS MADE TO FIELD    *
*                               AND INDEX INTO NUMBERS                *
*                   R5(FIELDREG) - ADDRESS OF NEXT CHARACTERS TO      *
*                                  COMPARE IN FIELD OR ADDRESS OF 4TH *
*                                  BYTE INDICATOR IN FIELD            *
*                   R6 - NOT USED                                     *
*                   R7(CNT1) - COUNT OF DIGITS IN CALL NUMBER AND     *
*                              NUMBER OF CHARACTERS LEFT TO PROCESS   *
*                   R8(CNT2) - ADDRESS OF BEGINNING OF NUMBER FOR     *
*                              CALLS                                  *
*                   R9(TABLE) - ADDRESS OF NUMBERS                    *
*                   R10(BASE) - BASE REGISTER                         *
*                   R11(BASE2) - BASE REGISTER                        *
*                   R12(WORK) - NUMBER OF CHARACTERS LEFT TO PROCESS  *
*                   R13(SAVEREG) - ADDRESS OF SAVE                    *
*                   R14(RET) - USED TO BAL WITHIN THIS SECTION        *
*                   R15 - NOT USED                                    *
* OUTPUT - 1. NUMBERS CONTAINS THE NUMBER OF CALLS TO EACH EXIT       *
*          2. FIELD CONTAINS A X'01' IN THE BYTE FOLLOWING THE EXIT   *
*             CALL LETTERS IF THE EXIT IS TO BE CALLED                *
***********************************************************************
         SPACE 3
PARMPROS EQU   *                             PROCESS PARAMETERS HERE
SETUP    SR    INDEX,INDEX
         BAL   RET,TESTEND                   TEST FOR END OF FIELD
         LA    FIELDREG,FIELD                ADDRESS OF TABLE
COMPARE  CLC   0(L3,ACM),0(FIELDREG)         COMPARE PARAMETERS
         BC    EQUAL,MATCH                   BRANCH IF EQUAL
         LA    INDEX,D1(INDEX)               GET NEXT ENTRY
         LA    FIELDREG,D4(FIELDREG)         GET NEXT ENTRY
         CH    INDEX,CON9                    IS THAT ALL OF THEM
         BC    EQUAL,PARMERR                 SEARCHED ALL - NO MATCH
         B     COMPARE                       CONTINUE SEARCH
MATCH    EQU   *                             MATCH
         LA    FIELDREG,D3(FIELDREG)         ADDRESS OF BIT INDICATOR
         XI    0(FIELDREG),L1                TURN ON BIT
         LA    ACM,D3(ACM)                   INCREMENT POINTER
LOOP     BAL   RET,TESTEND                   TEST FOR END
         CLC   0(L1,ACM),COMMA               TEST FOR ','
         BNE   COMPAREQ                      COMPARE FOR EQUAL
         LA    ACM,D1(ACM)                   FOUND COMMA
         B     SETUP                         GET NEXT PARAMETER
COMPAREQ EQU   *                             COMPARE FOR '='
         CLC   0(L1,ACM),EQSIGN              TEST FOR '='
         BNE   PARMERR                       PARAMETER ERROR
         LA    ACM,D1(ACM)                   INCREMENT BY ONE
NUMBER   LR    CNT1,TOTAL
         SR    CNT1,ACM
         CH    CNT1,CON3                     TEST FOR LE 3 CHARACTERS
         BH    BEGINEND                      COUNT DIGITS
         AR    ACM,CNT1                      ACM POINTS PAST DIGITS
         B     CONVERT                       CONVERT TO BIN
BEGINEND EQU   *
         SR    CNT1,CNT1                     COUNT OF DIGITS
FINDEND  EQU   *
         CLC   0(L1,ACM),COMMA               TEST FOR ','
         BE    CONVERT                       FOUND END OF NUMBER
         LA    CNT1,D1(CNT1)                 INCREMENT COUNT
         LA    ACM,D1(ACM)
         CH    CNT1,CON3                     MAXIMUM NUMBER OF DIGITS
         BNH   FINDEND                       OK KEEP LOOKING
         B     PARMERR                       PARAMETER ERROR
TESTEND  EQU   *
         LR    WORK,TOTAL                    KEEP TOTAL INTACT
         SR    WORK,ACM                      NUMBER BYTES LEFT
         CH    WORK,CON1
         BE    PARMERR                       CANNOT HAVE ONLY 1 CHAR
         BL    DATAGEN                       END OF PARAMETER LIST
         BR    RET                           RETURN
CONVERT  LR    CNT2,ACM
         SR    CNT2,CNT1                     GET POINTER TO BEGINNING
         BCTR  CNT1,R0                       OF NUMBER
         EX    CNT1,PACKER                   CONVERT TO PACKED DECIMAL
         CVB   CNT1,WORKAREA                 CONVERT OT BINARY
         CH    CNT1,CON256                   TEST FOR ONE BYTE NUMBER
         BNL   PARMERR                       PARAMETER ERROR
         STC   CNT1,0(INDEX,TABLE)           STORE NUMBER
         LA    ACM,D1(ACM)                   INCREMENT PAST COMMA
         B     SETUP                         GET NEXT PARAMETER
         SPACE 3
PARMERR  EQU   *
         LA    CNT2,APARMMSG                 ADDRESS OF MESSAGE PARMS
         BAL   BACK,WRITEMSG                 WRITE ERROR MSG
         B     ENDUP                         FINISH
         EJECT
***********************************************************************
* SECTION FUNCTIONS - 1. ATTACH THE DATA GENERATOR FOR EACH EXIT.     *
*                        THE DG IS USED TO CREATE THE PARAMETER LISTS *
*                        FOR THE EXITS. THE BYTE AFTER THE EXIT NAME  *
*                        IN FIELD IS TESTED FOR '01'. IF IT IS X'01', *
*                        THE 3 LETTER EXIT NAME IS MOVED INTO DDNAMES *
*                        (THE PARAMETER LIST TO DG), AND THE DG IS    *
*                        ATTACHED. TESTEXIT WAITS UNTIL THE DG POSTS  *
*                        ITS ECB THAT IT IS FINISHED. IF A NON-ZERO   *
*                        CODE IS RETURNED, AN ERROR MESSAGE IS        *
*                        WRITTEN AND THE EXIT IS NOT CALLED.          *
*                        OTHERWISE, THE OUTPUT DATA SET FROM THE DG   *
*                        IS OPENED FOR INPUT IN ORDER TO READ THE     *
*                        PARAMETER LISTS INTO TESTEXIT WORK AREA. IF  *
*                        THE DATA SET DOES NOT OPEN CORRECTLY, AN     *
*                        ERROR MESSAGE IS WRITTEN AND THE EXIT IS NOT *
*                        CALLED. THE ADDRESS OF THE OPEN DCB IS PUT   *
*                        INTO OPENADDR. THE DCB IS TESTED FOR FIXED OR*
*                        VARIABLE RECORD FORMAT. IF THE RECFM IS      *
*                        FIXED, SWITCH IS SET TO X'01' AND THE LOGICAL*
*                        RECORD LENGTH IS SAVED IN FLRECL. A BLANK    *
*                        LINE AND THE EXIT NAME ARE WRITTEN TO        *
*                        SYSPRINT. THIS SECTION THEN BAL'S TO THE     *
*                        SECTION TO CALL THE EXIT ROUTINE. UPON       *
*                        RETURN, THE DCB IS CLOSED AND THE NEXT EXIT  *
*                        NAME IS TESTED. AFTER ALL EXITS HAVE BEEN    *
*                        TESTED FOR THE CALL INDICATOR, THIS SECTION  *
*                        BRANCHES TO ENDUP TO RETURN TO THE SYSTEM.   *
* ENTRIES - INITIALLY FROM PARMPROS - PARAMETER PROCESSING            *
* EXITS  - FINALLY TO ENDUP TO RETURN TO THE SYSTEM                   *
* SUBROUTINES - 1. DATA GENERATOR-IEBDG  TO GENERATE PARAMETER LIST   *
*                  FOR EACH EXIT TO BE CALLED                         *
*               2. WAIT ROUTINES TO WAIT FOR DG TO COMPLETE           *
*               3. DETACH TO DETACH DG AFTER EACH USE                 *
*               4. OPEN TO OPEN OUTPUT DATA SETS FROM DG FOR INPUT TO *
*                  TESTEXIT.                                          *
*               5. WRITEMSG TO WRITE BLANK LINE                       *
*               6. MAKEMSG TO WRITE EXIT 3 LETTER NAME                *
*               7. CALL EXIT SECTIONS TO CALL THE USER EXIT ROUTINES. *
*               8. CLOSE TO CLOSE THE OUTPUT DATA SET FROM THE DG.    *
*               9. DGERROR TO WRITE ERROR MESSAGE FOR DG ERROR.       *
*               10. OPENERROR TO WRITE ERROR MESSAGE IF DATA SET DOES *
*                   NOT OPEN CORRECTLY.                               *
* INPUT - 1. NUMBERS CONTAINS THE NUMBER OF CALLS TO EACH EXIT        *
*         2. FIELD CONTAINS A X'01' IN THE BYTE FOLLOWING THE EXIT    *
*            CALL LETTERS IF THE EXIT IS TO BE CALLED.                *
* TABLES - 1. FIELD - SEE PREVIOUS DESCRIPTION                        *
*          2. NUMBERS - SEE PREVIOUS DESCRIPTION                      *
*          3. DDNAMES - THE PARAMETER LIST FOR DG.  IT MUST BE ON A   *
*             HALF-WORD BOUNDARY. THE FIRST 2 BYTES CONTAIN THE LENGTH*
*             OF THE LIST EXCLUDING THE FIRST 2 BYTES. THE DDNAME FOR *
*             SYSIN IS IN DDNAMES+34 AND FOR SYSPRINT IN DDNAMES+42.  *
*             THE DOUBLE WORDS FOLLOWING THE 2 BYTE LENGTH MUST BE ON *
*             DOUBLE-WORD BOUNDARIES. AS EACH EXIT IS SETUP, THE 3    *
*             CALL LETTERS ARE PLACED AFTER 'IN' SO THE DG WILL KNOW  *
*             WHICH DATA SET TO USE AS SYSIN.                         *
*          4. ECBBLK - EVENT CONTROL BLOCK FOR THE DG. IT MUST BE ZERO*
*             BEFORE THE DG IS ATTACHED.  AFTER THE WAIT MACRO, IT    *
*             CONTAINS THE RETURN CODE FROM THE DG. THE SYSTEM ALSO   *
*             USES IT DURING THE DETACH.                              *
*          5. DCBADDR - CONTAINS THE ADDRESS OF THE DCB'S FOR THE     *
*             OUTPUT DATA SETS FROM THE DG. THE ADDRESSES MUST BE IN  *
*             THE ORDER THE EXITS ARE CALLED.                         *
*          6. RTNADDR - CONTAINS THE ADDRESS OF THE 'SUBROUTINES' THAT*
*             CALL THE EXITS. THESE ADDRESSES MUST BE IN THE ORDER    *
*             THE EXITS ARE CALLED.                                   *
*                   EXITS ARE CALLED IN THIS ORDER                    *
*                        1. IEFUJV(UJV)                               *
*                        2. IEFUJI(UJI)                               *
*                        3. IEFUSI(USI)                               *
*                        4. IEFUSO(JSO)                        @YM04149
*                        5. IEFUTL(UTL)                               *
*                        6. IEFU83(U83)                               *
*                        7. IEFACTRT(ACT)                             *
*                        8. IEFUJP(UJP)                        @YM04149
*                        9. IEFU29(U29)                        @Z40FPPF
* REGISTER USAGE -  R1 - USED BY MACROS FOR PARAMETER REGISTER        *
*                   R2 - NOT USED                                     *
*                   R3 - NOT USED                                     *
*                   R4(INDEX) - CONTAINS THE NUMBER OF TIMES AN EXIT  *
*                               IS TO BE CALLED. THIS REGISTER MUST   *
*                               NOT BE CHANGED EXCEPT BY THE SECTION  *
*                               THAT CALLS THE EXIT.                  *
*                   R5(FIELDREG) - ADDRESS OF FIELD                   *
*                   R6(CNT) - CONTAINS A COUNT OF THE NUMBER OF EXITS *
*                             THAT HAVE BEEN TESTED FOR CALLING. IT   *
*                             MUST NOT BE CHANGED BY ANY OTHER SECTION*
*                   R7(CNT1) - DURING THIS SECTION IT CONTAINS THE    *
*                              DISPLACEMENT OF THE EXIT NAME IN FIELD.*
*                              BEFORE GOING TO A CALLING SECTION, IT  *
*                              CONTAINS THE ADDRESS OF TESTEXIT'S WORK*
*                              AREA                                   *
*                   R8(CNT2) - WORK REGISTER                          *
*                   R9(TABLE AND BACK) - ADDRESS OF NUMBERS AND FIELD *
*                                        ALSO USED AS A RETURN ADDRESS*
*                                        REGISTER FOR BAL WITHIN      *
*                                        TESTEXIT                     *
*                   R10(BASE) - BASE REGISTER                         *
*                   R11(BASE2) - BASE REGISTER                        *
*                   R12(WORK) - WORK REGISTER                         *
*                   R13(SAVEREG) - ADDRESS OF SAVE                    *
*                   R14 - USED BY MACROS                              *
*                   R15 - USED BY MACROS                              *
*                   R0 - USED BY MACROS                               *
* OUTPUT - 1. OPENADDR CONTAINS THE ADDRESS OF THE OPEN DCB FOR THE   *
*             EXIT CALLING SECTION TO USE.                            *
*          2. SWITCH CONTAINS A X'01' IF THE RECORD FORMAT FOR THE    *
*             OUTPUT DATA SET FROM DG IS FIXED. AND IN THIS CASE,     *
*             FLRECL CONTAINS THE LOGICAL RECORD LENGTH.              *
*          3. R7(CNT1) - CONTAINS THE ADDRESS OF TESTEXIT'S WORK AREA *
*                (THE ABOVE OUTPUT IS TO THE EXIT CALLING SECTIONS)   *
***********************************************************************
         SPACE 3
DATAGEN  EQU   *
         SR    CNT,CNT                      ZERO COUNT REGISTER
         LA    FIELDREG,FIELD               ADDRESS OF FIELDREG
FINDRTN  EQU   *
         TM    D3(FIELDREG),M1              TEST FOR ROUTINE
         BO    PUTNAMES                     FOUND - PUT IN LIST
CONTINUE EQU   *
         LA    FIELDREG,D4(FIELDREG)        INCREMENT ADDRESS
         LA    CNT,D1(CNT)
         CH    CNT,CON9                     TEST IF END OF LIST@Z40FPPF
         BNL   ENDUP                        YES - ALL DONE
         B     FINDRTN                      NO - CONTINUE
PUTNAMES LR    CNT1,CNT
         SR    INDEX,INDEX
         LA    TABLE,NUMBERS
         IC    INDEX,0(CNT1,TABLE)          NUMBER OF CALLS TO EXIT
         LTR   INDEX,INDEX                  TEST FOR ZERO CALLS
         BZ    CONTINUE                     DO NOT SET UP IF ZERO CALLS
         SLL   CNT1,D2(R0)                  MULTIPLY BY 4
         CH    CNT,CON8                     TEST FOR IEFU29 CALL
*                                                              @Z40FPPF
         BE    AROUND                       NO DATA GEN FOR IEFU29
*                                                              @Z40FPPF
         LA    TABLE,FIELD                  ADDRESS OF NAMES
         AR    TABLE,CNT1                   DISPLACEMENT FOR NAME
         MVC   DDNAMES+D36(L3),0(TABLE)     MOVE NAMES INTO PARMLIST
         SR    WORK,WORK
         ST    WORK,ECBBLK                  CLEAR ECB
         CLOSE (DCBPRINT,LEAVE)
         ATTACH  EP=IEBDG,PARAM=(OPTLIST,DDNAMES),VL=1,ECB=ECBBLK
         ST    PARM,TCBADDR                 SAVE TCB ADDRESS
         WAIT  ECB=ECBBLK                   WAIT FOR DATA GENERATOR
         CH    WORK,ECBBLK+D2               TEST FOR 0 RETURN CODE
*        BNE   DGERROR                      ERROR IF NOT 0
         DETACH  TCBADDR                    DETACH DATA GENERATOR
         LA    CNT2,DCBADDR
         L     CNT2,0(CNT1,CNT2)            ADDRESS OF CORRECT DCB
         ST    CNT2,OPENADDR                PUT DCB@ IN OPEN
         LA    WORK,L144                    OPTIONS FOR OPEN
         STC   WORK,OPENADDR                SET FOR INPUT,REREAD
         OPEN  ,MF=(E,OPENADDR)
         TM    D48(CNT2),X10                TEST DCBOFLGS FOR OK OPEN
         BZ    OPENERRS                     OPEN ERROR
         NI    SWITCH,X00                   TURN OFF FIXED SWITCH
         TM    D36(CNT2),X80                TEST DCBRECFM FOR FIXED
         BZ    AROUND                       SKIP OVER
         LH    CNT2,D82(CNT2)               GET DCBLRECL
         STH   CNT2,FLRECL                  SAVE FIXED LRECL
         OI    SWITCH,X01                   TURN ON FIXED SWITCH
AROUND   EQU   *                            AROUND LRECL PROC
         LA    CNT2,ABLNKMSG                WRITE A BLANK LINE
         BAL   BACK,WRITEMSG                WRITE ERROR MSG
         LR    CNT2,CNT1                    DISPLACEMTNT FOR EXIT NAME
         BAL   BACK,MAKEMSG                 WRITE EXIT NAME
         LA    CNT2,RTNADDR                 GET ROUTINE TO FORM PARMS
         L     CNT2,0(CNT1,CNT2)            ADDRESS OF CORRECT RTN
         L     CNT1,MAIN
         BR    CNT2                         GO TO CORRECT RTN
CLOSEDCB EQU   *
         CLOSE ,MF=(E,OPENADDR)             CLOSE DCB
         B     CONTINUE                     FIND NEXT EXIT RTN
         SPACE 3
DGERROR  EQU   *                            DATA GEN ERROR
         DETACH  TCBADDR                    DETACH DATA GENERATOR
OPENERRS EQU   *
         NI    D3(FIELDREG),X00             TURN OFF CALL BIT
         MVC   DGMSG+D41(L3),0(FIELDREG)    FILL IN DATA SET DDNAME
         LR    CNT2,CNT1                    DISPLACEMTNT FOR EXIT NAME
         BAL   BACK,MAKEMSG                 WRITE EXIT NAME
         LA    CNT2,ADGMSG                  ADDRESS OF DG MESSAGE
         BAL   BACK,WRITEMSG                WRITE DG MSG
         B     CONTINUE                     GET NEXT EXIT ROUTINE
         EJECT
***********************************************************************
* SECTION FUNCTIONS - 1. THE CODING IN THIS SECTION CALLS THE EXIT    *
*                        ROUTINES                                     *
*                     2. RETURN CODES ARE TESTED AND MESSAGES ARE     *
*                        WRITTEN                                      *
*                     3. THE LOGIC FOR EACH PORTION (READUJV, READUJI,*
*                        READUSI, READUSO, READUTL, READU83,   @YM04149
*                        READACT, READUJP) IS SIMILAR. EACH    @YM04149
*                        SETS THE NUMBER OF PARAMETERS IN THE LIST    *
*                        FOR ITS EXIT ROUTINE AND BRANCHES TO GETREC  *
*                        TO HAVE THE PARAMETER LIST READ IN AND THE   *
*                        ADDRESSES SET UP. A SWITCH, NULLSW, IS SET   *
*                        TO X'01' IF THE PARAMETERS DID NOT FIT INTO  *
*                        TESTEXIT WORK AREA. IN THAT CASE THE CALL IS *
*                        BYPASSED. THE USER IDENTIFICATION AND USER   *
*                        COMMUNICATION FIELDS ARE RESTORED BEFORE     *
*                        EACH CALL AND SAVED AFTER EACH CALL.         *
* ENTRIES - FROM THE SECOND SECTION, DATAGEN                          *
* EXITS - 1. TO USERFLDS TO PRINT THE USER IDENTIFICATION AND USER    *
*            COMMUNICATION FIELDS AND TO RETURN TO CLOSEDCB IN DATAGEN*
* SUBROUTINES - 1. GETREC-TO READ AND FORMAT THE PARAMETER LISTS      *
*               2. EXIT ROUTINES                                      *
*               3. JCANCEL- TO WRITE JOB CANCELLED MESSAGE            *
*               4. WRITEMSG- TO WRITE MESSAGES TO SYSPRINT            *
* INPUT - NONE                                                        *
* TABLES - 1. AMTMAIN - NUMBER OF BYTES IN TESTEXIT'S WORK AREA       *
*          2. NULLSW - A X'01' INDICATES THE CALL IS TO BE BYPASSED   *
*          3. USERID - LOCATION TO SAVE THE USER IDENTIFICATION FIELD *
*                      BETWEEN CALLS AND EXITS.                       *
*          4. USERCOMM - LOCATION TO SAVE THE USER COMMUNICATION FIELD*
*                        BETWEEN CALLS AND EXITS.                     *
*          5. ADDRESS - 11 WORD AREA WHERE THE ADDRESSES OF THE PARAM-*
*                       ETERS ARE STORED. THE ADDRESS OF ADDRESS IS   *
*                       PASSED TO THE EXIT ROUTINES IN REG 1.         *
*          6. MAIN - ADDRESS OF TESTEXIT'S WORK AREA.                 *
* REGISTER USAGE -  R1(PARM)-ADDRESS OF PARAMETER LIST TO EXIT        *
*                            ROUTINES                                 *
*                   R2(TOTAL)- NUMBER OF BYTES IN TESTEXIT'S WORK     *
*                              AREA. SET UP FOR EACH BRANCH TO GETREC.*
*                   R3(ACM)- USED IN GETREC AND INITIALIZED TO 0      *
*                            BEFORE EACH BRANCH TO GETREC.            *
*                   R4(INDEX)- NUMBER OF TIMES THE EXIT IS TO BE      *
*                              CALLED. IT IS DECREMENTED AFTER EACH   *
*                              CALL AND IS 0 WHEN THE EXIT CALLS ARE  *
*                              COMPLETED. IT MUST NOT BE CHANGED BY   *
*                              CODING OUTSIDE THESE SECTIONS.         *
*                   R5(FIELDREG)- ADDRESS OF FIELD FROM DATAGEN. IT   *
*                                 MUST NOT BE ALTERED.                *
*                   R6(CNT)- NUMBER OF EXITS THAT HAVE BEEN TESTED    *
*                            FOR CALLING. IT MUST NOT BE ALTERED.     *
*                   R7(CNT1)- ADDRESS OF TESTEXIT'S WORK AREA. IT     *
*                             MUST NOT BE ALTERED. THIS REGISTER IS   *
*                             LOADED AFTER RETURN FROM GETREC.        *
*                   R8(CNT2)- NUMBER OF PARAMETERS THAT GETREC MUST   *
*                             SET UP FOR EACH EXIT ROUTINE. IF AN     *
*                             EXIT ROUTINE USES A SPECIAL CODE, THAT  *
*                             IS CONSIDERED AN EXTRA PARAMETER FOR    *
*                             GETREC ALTHOUGH THE CODE IS PROPERLY    *
*                             INSERTED INTO A REGISTER BEFORE CALLING *
*                             THE EXIT ROUTINE. ALSO ADDRESS OF       *
*                             MESSAGE LENGTH AND ADDRESS FOR WRITEMSG *
*                  R9(BACK)- USED TO BAL TO GETREC AND MESSAGE WRITING*
*                            SECTIONS.                                *
*                  R10(BASE)- BASE REGISTER                           *
*                  R11(BASE2)- BASE REGISTER                          *
*                  R12(WORK)- WORK REGISTER                           *
*                  R13(SAVEREG)- ADDRESS OF SAVE                      *
*                  R14(RET)- RETURN ADDRESS IN TESTEXIT FOR EXIT RTNS *
*                  R15(ENTRY)- ENTRY ADDRESS OF EXIT ROUTINES         *
* OUTPUT - 1. USER IDENTIFICATION AND COMMUNICATION FIELDS ARE SAVED  *
*             AND RESTORED.                                           *
*          2. JOB CANCEL AND/OR CONTINUE MESSAGES MAY BE WRITTEN TO   *
*             SYSPRINT.                                               *
*          3. MESSAGES TO SYSPRINT CONTAINING USER COMMUNICATION AND  *
*             COMMUNICATION  FIELDS AT THE END OF EACH EXIT ROUTINE'S *
*             TESTING.                                                *
***********************************************************************
         SPACE 3
* PROCESS UJV
READUJV  EQU   *
NEXTUJV  LA    CNT2,L3                      NUMBER OF PARAMETERS
         SR    ACM,ACM                      CLEAR FOR USE IN GETREC
         L     TOTAL,AMTMAIN                AMOUNT OF CORE AVAILABLE
         LA    TOTAL,0(TOTAL)               REMOVE SUBPOOL NUMBER
         NI    NULLSW,X00                   TURN OFF NULL SWITCH
         BAL   BACK,GETREC                  SET UP PARAMETERS
         TM    NULLSW,X01                   TEST PROCESS SWITCH
         BO    ENDUJV                       DO NOT CALL EXIT
         L     CNT1,MAIN                    GET ADDRESS OF FIRST PARM
         MVC   D20(L8,CNT1),USERID          RESTORE USERID FIELD
         MVC   D32(L4,CNT1),USERCOMM        RESTORE USERCOMM FIELD
         LA    PARM,ADDRESS                 ADDRESS OF PARAMETER LIST
         L     ENTRY,ADDRUJV
         BALR  RET,ENTRY                    CALL EXIT ROUTINE
         CH    ENTRY,CON4                   CODE TO CANCEL JOB
         BNE   MOREUJV                      DO NOT CANCEL
         BAL   BACK,JCANCEL                 JOB CANCELLED MESSAGE
MOREUJV  EQU   *
         MVC   USERID(L8),D20(CNT1)         SAVE USERID FIELD
         MVC   USERCOMM(L4),D32(CNT1)       SAVE USERCOMM FIELD
ENDUJV   EQU   *
         BCT   INDEX,NEXTUJV                DECREMENT COUNT OF EXIT CLS
         B     USERFLDS                     WRITE USER FIELDS
         SPACE 3
* PROCESS UJI
READUJI  EQU   *
NEXTUJI  LA    CNT2,L4                      NUMBER OF PARAMETERS
         SR    ACM,ACM                      CLEAR FOR USE IN GETREC
         L     TOTAL,AMTMAIN                AMOUNT OF CORE AVAILABLE
         LA    TOTAL,0(TOTAL)               REMOVE SUBPOOL NUMBER
         NI    NULLSW,X00                   TURN OFF NULL SWITCH
         BAL   BACK,GETREC                  SET UP PARAMETERS
         TM    NULLSW,X01                   TEST PROCESS SWITCH
         BO    ENDUJI                       DO NOT CALL EXIT
         L     CNT1,MAIN                    GET ADDRESS OF FIRST PARM
         MVC   D20(L8,CNT1),USERID          RESTORE USERID FIELD
         MVC   D32(L4,CNT1),USERCOMM        RESTORE USERCOMM FIELD
         LA    PARM,ADDRESS                 ADDRESS OF PARAMETER LIST
         L     ENTRY,ADDRUJI
         BALR  RET,ENTRY                    CALL EXIT ROUTINE
         CH    ENTRY,CON4                   CODE TO CANCEL JOB
         BNE   MOREUJI                      DO NOT CANCEL
         BAL   BACK,JCANCEL                 JOB CANCELLED MESSAGE
MOREUJI  EQU   *
         MVC   USERID(L8),D20(CNT1)         SAVE USERID FIELD
         MVC   USERCOMM(L4),D32(CNT1)       SAVE USERCOMM FIELD
ENDUJI   EQU   *
         BCT   INDEX,NEXTUJI                DECREMENT COUNT OF EXIT CLS
         B     USERFLDS                     WRITE USER FIELDS
         SPACE 3
* PROCESS USI
READUSI  EQU   *
NEXTUSI  LA    CNT2,L4                      NUMBER OF PARAMETERS
         SR    ACM,ACM                      CLEAR FOR USE IN GETREC
         L     TOTAL,AMTMAIN                AMOUNT OF CORE AVAILABLE
         LA    TOTAL,0(TOTAL)               REMOVE SUBPOOL NUMBER
         NI    NULLSW,X00                   TURN OFF NULL SWITCH
         BAL   BACK,GETREC                  SET UP PARAMETERS
         TM    NULLSW,X01                   TEST PROCESS SWITCH
         BO    ENDUSI                       DO NOT CALL EXIT
         L     CNT1,MAIN                    GET ADDRESS OF FIRST PARM
         MVC   D20(L8,CNT1),USERID          RESTORE USERID FIELD
         MVC   D32(L4,CNT1),USERCOMM        RESTORE USERCOMM FIELD
         LA    PARM,ADDRESS                 ADDRESS OF PARAMETER LIST
         L     ENTRY,ADDRUSI
         BALR  RET,ENTRY                    CALL EXIT ROUTINE
         CH    ENTRY,CON4                   CODE TO CANCEL JOB
         BNE   MOREUSI                      DO NOT CANCEL
         BAL   BACK,JCANCEL                 JOB CANCELLED MESSAGE
MOREUSI  EQU   *
         MVC   USERID(L8),D20(CNT1)         SAVE USERID FIELD
         MVC   USERCOMM(L4),D32(CNT1)       SAVE USERCOMM FIELD
ENDUSI   EQU   *
         BCT   INDEX,NEXTUSI                DECREMENT COUNT OF EXIT CLS
         B     USERFLDS                     WRITE USER FIELDS
         SPACE 3
READUSO  EQU   *                                               @YM04149
NEXTUSO  LA    CNT2,L1                      NUMBER OF PARAMETERS
         LR    AREA,CNT1                    ADDRESS OF CORE    @YM04149
         SR    ACM,ACM                      CLEAR FOR USE IN GETREC
         L     TOTAL,AMTMAIN                AMOUNT OF CORE AVAILABLE
         LA    TOTAL,0(TOTAL)               REMOVE SUBPOOL NUMBER
         NI    NULLSW,X00                   TURN OFF NULL SWITCH
         BAL   BACK,GETREC                  SET UP PARAMETERS  @YM04149
         TM    NULLSW,X01                   TEST PROCESS SWITCH
         BO    ENDUSO                       DO NOT CALL EXIT   @YM04149
         L     CNT1,MAIN                    GET PARM ADDRESS   @ZA32916
         MVC   D20(L8,CNT1),USERID          RESTORE USERID FIELD
         MVC   D32(L4,CNT1),USERCOMM        RESTORE USERCOMM FIELD
         LA    PARM,ADDRESS                 ADDRESS OF PARAMETER LIST
         LA    WORK,DCBPRINT                LOAD DCB ADDRESS   @YM04149
         ST    WORK,ADDRESS+D4              ADDRESS IN PARM LIST
         L     ENTRY,ADDRUSO                                   @YM04149
         BALR  RET,ENTRY                    CALL EXIT ROUTINE  @YM04149
         CH    ENTRY,CON4                                      @YM04149
         BE    MOREUSO                      DO NOT CANCEL      @YM04149
         BAL   BACK,JCANCEL                 JOB CANCEL MESSAGE @YM04149
MOREUSO  EQU   *                                               @YM04149
         MVC   USERID(L8),D20(CNT1)         SAVE USERID FIELD  @YM04149
         MVC   USERCOMM(L4),D32(CNT1)       SAVE USERCOMM FIELD
ENDUSO   EQU   *                                               @YM04149
         SH    INDEX,CON1                   DECREMENT COUNT OF EXIT CLS
         BNZ   NEXTUSO                      SET UP TO CALL USO AGAIN
         B     USERFLDS                     WRITE USER FIELDS  @YM04149
         SPACE 3                                               @YM04149
* PROCESS UTL
READUTL  EQU   *
NEXTUTL  LA    CNT2,L2                      NUMBER OF PARAMETERS
         SR    ACM,ACM                      CLEAR FOR USE IN GETREC
         L     TOTAL,AMTMAIN                AMOUNT OF CORE AVAILABLE
         LA    TOTAL,0(TOTAL)               REMOVE SUBPOOL NUMBER
         NI    NULLSW,X00                   TURN OFF NULL SWITCH
         BAL   BACK,GETREC                  SET UP PARAMETERS
         TM    NULLSW,X01                   TEST PROCESS SWITCH
         BO    ENDUTL                       DO NOT CALL EXIT
         L     CNT1,MAIN                    GET ADDRESS OF FIRST PARM
         MVC   D20(L8,CNT1),USERID          RESTORE USERID FIELD
         MVC   D32(L4,CNT1),USERCOMM        RESTORE USERCOMM FIELD
         SR    R0,R0
         L     WORK,ADDRESS+D4              CLEAR FOR PARAMETER
         IC    R0,0(WORK)                   CODE
         LA    PARM,ADDRESS                 ADDRESS OF PARAMETER LIST
         L     ENTRY,ADDRUTL
         BALR  RET,ENTRY                    CALL EXIT ROUTINE
         CH    ENTRY,CON4                   CODE TO CONTINUE JOB
         BL    MOREUTL                      DO NOT CONTINUE    @ZA17320
         BE    NOTSEC                   TIMER UNITS IN MSG     @ZA17320
         MVC   JOBCONT+D37(L11),SECS    SECONDS IN MSG         @ZA17320
         B     DOCVD                    BUILD RECORD           @ZA17320
NOTSEC   MVC   JOBCONT+D37(L11),TIMEUNIT  TIMER UNITS IN MSG   @ZA17320
DOCVD    L     WORK,ADDRESS                 ADD OF JOB LOG #   @ZA17320
         MVC   JOBCONT+D4(L8),0(WORK)       MOVE IN JOB NAME
         CVD   PARM,WORKAREA                CONVERT EXTRA TIMER UNITS
         UNPK  JOBCONT+D28(L8),WORKAREA+D3(L5)
         OI    JOBCONT+D35,XF0
         LA    CNT2,AJOBCONT                ADDRESS OF PARAMETERS
         BAL   BACK,WRITEMSG                WRITE CONTINUED MESSAGE
MOREUTL  EQU   *
         MVC   USERID(L8),D20(CNT1)         SAVE USERID FIELD
         MVC   USERCOMM(L4),D32(CNT1)       SAVE USERCOMM FIELD
ENDUTL   EQU   *
         BCT   INDEX,NEXTUTL                DECREMENT COUNT OF EXIT CLS
         B     USERFLDS                     WRITE USER FIELDS
         SPACE 3
READU83  EQU   *
NEXTU83  LA    CNT2,L1                      NUMBER OF PARAMETERS
         SR    ACM,ACM                      CLEAR FOR USE IN GETREC
         L     TOTAL,AMTMAIN                AMOUNT OF CORE AVAILABLE
         LA    TOTAL,0(TOTAL)               REMOVE SUBPOOL NUMBER
         NI    NULLSW,X00                   TURN OFF NULL SWITCH
         BAL   BACK,GETREC                  SET UP PARAMETERS
         SR    AREA,AREA
         ST    AREA,ADDRESS(ACM)
         TM    NULLSW,X01                   TEST PROCESS SWITCH
         BO    ENDU83                       DO NOT CALL EXIT
         LA    PARM,ADDRESS                 ADDRESS OF PARAMETER LIST
         L     ENTRY,ADDRU83
         BALR  RET,ENTRY                    CALL EXIT ROUTINE
         CH    ENTRY,CON4                   CODE FOR NOT WRITING RECORD
         BE    MOREU83                      DO NOT WRITE RECORD
         L     PARM,ADDRESS                 GET ADDRESS OF RECORD
         LA    ENTRY,SMFWTM                 GET @ OF SMFWTM ROUTINE
         BALR  RET,ENTRY                    GO WRITE RECORD
MOREU83  EQU   *
ENDU83   EQU   *
         BCT   INDEX,NEXTU83                DECREMENT COUNT OF EXIT CLS
         B     USERFLDS                     WRITE USER FIELDS
         SPACE 3
* PROCESS ACTRT
READACT  EQU   *
NEXTACT  LA    CNT2,L11                     NUMBER OF PARAMETERS
         SR    ACM,ACM                      CLEAR FOR USE IN GETREC
         L     TOTAL,AMTMAIN                AMOUNT OF CORE AVAILABLE
         LA    TOTAL,0(TOTAL)               REMOVE SUBPOOL NUMBER
         NI    NULLSW,X00                   TURN OFF NULL SWITCH
         BAL   BACK,GETREC                  SET UP PARAMETERS
         TM    NULLSW,X01                   TEST PROCESS SWITCH
         BO    ENDACT                       DO NOT CALL EXIT
         L     CNT1,MAIN                    GET ADDRESS OF FIRST PARM
         MVC   D20(L8,CNT1),USERID          RESTORE USERID FIELD
         MVC   D32(L4,CNT1),USERCOMM        RESTORE USERCOMM FIELD
         SR    R0,R0                        CLEAR FOR CODE
         L     WORK,ADDRESS+D40             ADDRESS OF CODE
         CLI   0(WORK),D12                  CODE FOR STEP TERMINATION
         BE    SETUPACT                     SET UP ACCT
         ST    R0,ADDRESS+D4                ZERO POINTERS FOR JOB TERM
         ST    R0,ADDRESS+D20
         ST    R0,ADDRESS+D24
SETUPACT EQU   *
         IC    R0,0(WORK)                   CODE
         LA    WORK,YSAREA                  AREA FOR WRITE TO SYSPRINT
         LA    PARM,ADDRESS                 ADDRESS OF PARAMETER LIST
         L     ENTRY,ADDRACT
         BALR  RET,ENTRY                    CALL EXIT ROUTINE
         STH   ENTRY,MARKER                 SAVE RETURN CODE
         CH    PARM,CON4                    CODE TO WRITE RECORD
         BE    COMEBACK                     DO NOT WRITE TERM RECORD
         L     PARM,ADDRESS+D36             ADDRESS OF RECORD
         LA    ENTRY,SMFWTM                 USE SMFWTM
         BALR  RET,ENTRY                    GO TO SMFWTM
COMEBACK EQU   *                            MUST BE AFTER BALR
         L     WORK,ADDRESS+D28             ADDRESS OF FLAGS
         TM    0(WORK),X01                  TEST FOR '1' IN FLAGS BYTE
         BNZ   CANCELED                     JOB CANCELLED
         LH    ENTRY,MARKER                 RESTORE RETURN CODE
         CH    ENTRY,CON4                   CODE TO CANCEL JOB
         BNE   MOREACT                      DO NOT CANCEL
CANCELED EQU   *
         BAL   BACK,JCANCEL                 JOB CANCELLED MESSAGE
MOREACT  EQU   *
         MVC   USERID(L8),D20(CNT1)         SAVE USERID FIELD
         MVC   USERCOMM(L4),D32(CNT1)       SAVE USERCOMM FIELD
ENDACT   EQU   *
         SH    INDEX,CON1                   DECREMENT COUNT OF EXIT CLS
         BNZ   NEXTACT                      SET UP TO CALL ACTRT AGAIN
         B     USERFLDS                     WRITE USER FIELDS
         SPACE 3
READUJP  EQU   *                                               @YM04149
NEXTUJP  LA    CNT2,L2                      NUMBER OF PARAMETERS
         SR    ACM,ACM                      CLEAR FOR USE IN GETREC
         L     TOTAL,AMTMAIN                AMOUNT OF CORE AVAILABLE
         LA    TOTAL,0(TOTAL)               REMOVE SUBPOOL NUMBER
         NI    NULLSW,X00                   TURN OFF NULL SWITCH
         BAL   BACK,GETREC                  SET UP PARAMETERS  @YM04149
         TM    NULLSW,X01                   TEST PROCESS SWITCH
         BO    ENDUJP                       DO NOT CALL EXIT   @YM04149
         L     CNT1,MAIN                    GET ADDRESS OF FIRST PARM
         MVC   D20(L8,CNT1),USERID          RESTORE USERID FIELD
         MVC   D32(L4,CNT1),USERCOMM        RESTORE USERCOMM FIELD
         LA    PARM,ADDRESS                 ADDRESS OF PARAMETER LIST
         L     ENTRY,ADDRUJP                                   @YM04149
         BALR  RET,ENTRY                    CALL EXIT ROUTINE  @YM04149
         CH    ENTRY,CON4                   CODE TO NOT WRITE RECORD
         BE    COMEBCK                      DON'T WRITE RECORD @YM04149
         L     PARM,ADDRESS+D4              @ OF RECORD        @YM04149
         LA    ENTRY,SMFWTM                 USE SMFWTM         @YM04149
         BALR  RET,ENTRY                    GO TO SMFWTM       @YM04149
COMEBCK  EQU   *                                               @YM04149
         MVC   USERID(L8),D20(CNT1)         SAVE USERID FIELD  @YM04149
         MVC   USERCOMM(L4),D32(CNT1)       SAVE USERCOMM FIELD
ENDUJP   EQU   *                                               @YM04149
         SH    INDEX,CON1                   DECREMENT COUNT OF EXIT CLS
         BNZ   NEXTUJP                      SET UP TO CALL UJP AGAIN
         B     USERFLDS                     WRITE USER FIELDS  @YM04149
         SPACE 3                                               @YM04149
READU29  EQU   *                                               @Z40FPPF
NEXTU29  MVC   0(9,CNT1),U29DSN        MOVE DSN TO CORE WORK AREA
*                                                              @Z40FPPF
         ST    CNT1,ADDRESS            SET UP PARM LIST        @Z40FPPF
         LA    PARM,ADDRESS            LOAD ADDR PARM LIST     @Z40FPPF
         L     ENTRY,ADDRU29           ADDR IEFU29 EXIT        @Z40FPPF
         BALR  RET,ENTRY               CALL EXIT ROUTINE       @Z40FPPF
         BCT   INDEX,NEXTU29           DECR. COUNT OF EXIT CALLS
*                                                              @Z40FPPF
         B     CONTINUE                CONTINUE TESTING        @Z40FPPF
         SPACE 3
JCANCEL  EQU   *
         L     WORK,ADDRESS                 ADDRESS OF JOB LOG NUMBER
         MVC   JOBCAN+D4(L8),0(WORK)        JOB NAME
         ST    BACK,YSAREA                  SAVE BACK
         LA    CNT2,AJOBCAN                 ADDRESS OF PARAMETERS
         BAL   BACK,WRITEMSG                WRITE JOB CANCEL MSG
         L     BACK,YSAREA                  RESTORE BACK
         BR    BACK                         RETURN TO EXIT SECTION
         SPACE 3
* PROCESS USER FIELDS
USERFLDS EQU   *
         UNPK  IDMSG+D29(L5),USERID(L3)
         UNPK  IDMSG+D33(L13),USERID+D2(L7) UNPK ONE BYTE EXTRA
         UNPK  COMMSG+D28(L9),USERCOMM(L5)  LAST DIGIT PRINTED
         TR    IDMSG+D29(L16),CHAR-D240     CONVERT TO EBCDIC
         TR    COMMSG+D28(L8),CHAR-D240     CONVERT TO EBCDIC
         LA    CNT2,AIDMSG                  GET @ OF ID MSG
         BAL   BACK,WRITEMSG                WRITE USER ID
         LA    CNT2,ACOMMSG                 GET @ OF COMM MSG
         BAL   BACK,WRITEMSG                WRITE USER COMM
         B     CLOSEDCB                     CLOSE DATA SETS & CONTINUE
         EJECT
***********************************************************************
* SECTION FUNCTIONS - 1. THIS SECTION SETS UP THE PARAMETER LIST FOR  *
*                        THE CALLS TO THE EXITS.                      *
*                     2. IF THE TOTAL PARAMETR LIST DOES NOT FIT INTO *
*                        TESTEXIT'S CORE, AN ERROR MESSAGE IS WRITTEN *
*                        AND THE CALL IS CANCELLED.                   *
*                     3. IF GETREC IS CALLED, BUT THERE ARE NO MORE   *
*                        PARAMETERS TO READ IN, AN ERROR MESSAGE IS   *
*                        WRITTEN AND CONTROL IS PASSED TO USERFLDS    *
*                        AND TO CLOSEDCB TO SET UP THE NEXT EXIT.     *
* ENTRIES - FROM THE PRECEEDING SECTION THAT CALLS THE EXITS.         *
* EXITS - RETURN VIA REG9 TO CALLERS.                                 *
*         TO DSERFLDS TO WRITE MESSAGES AND SET UP NEXT EXIT.         *
* SUBROUTINES - DATA MANAGEMENT TO GET RECORDS.                       *
*               WRITEMSG TO WRITE ERROR MESSAGES TO SYSPRINT.         *
* INPUT - R2(TOTAL)-NUMBER OF BYTES IN TESTEXIT'S WORK AREA           *
*         R3(ACM)-ZERO                                                *
*         R8(CNT2)-NUMBER OF PARAMETERS TO SET UP FOR EACH EXIT       *
*         R9(BACK)-RETURN ADDRESS TO CALLER                           *
*         R11(AREA)-ADDRESS OF TESTEXIT'S WORK AREA.                  *
*         OPENADDR-ADDRESS OF OPEN DCB FOR OUTPUT FROM DATA GENERATOR *
*         NULLSW-SET TO X'00'                                         *
* TABLES - 1. SWITCH-VALUE OF X'00' IF RECORDS ARE FIXED FORMAT       *
*                    VALUE OF X'01' IF RECORDS ARE VARIABLE FORMAT    *
*          2. FLRECL-LOGICAL RECORD LENGTH FOR FIXED LENGTH RECORDS   *
*          3. NULLSW-VALUE OF X'00' INITIALLY AND SET TO X'01' IF ALL *
*             RECORDS FOR A PARAMETER LIST WILL NOT FIT INTO TESTEXIT *
*             WORK AREA. IN THAT CASE THE REST OF THE RECORDS FOR     *
*             THE PARAMETER LIST ARE NOT READ IN AND THE CALL IS      *
*             CANCELLED.                                              *
*          4. ADDRESS-AN 11 WORD TABLE TO CONTAIN THE ADDRESS OF THE  *
*             PARAMETERS READ INTO TESTEXIT'S WORK AREA.              *
*          5. TSMFSAVE-A TEMPORARY SAVE AREA WHILE AN ERROR MESSAGE   *
*                      IS WRITTEN.                                    *
* REGISTER USAGE -  R0- USED BY DATA MANAGEMENT                       *
*                   R1(PARM)-PARAMETERS FOR GET AND ADDRESS OF        *
*                            ADDRESS(LIST OF PARAMETER ADDRESSES)     *
*                            UPON RETURN TO CALLER.                   *
*                   R2(TOTAL)-THE NUMBER OF BYTES LEFT IN TESTEXIT'S  *
*                             WORK AREA AFTER EACH PARAMETER RECORD   *
*                             IS PUT IN. INITIALLY THE TOTAL NUMBER   *
*                             OF BYTES IN THE WORK AREA               *
*                   R3(ACM)-DISPLACEMENT OF PARAMETER ADDRESS IN      *
*                           ADDRESS. INITIALALLY ZERO                 *
*                   R4(INDEX)-NUMBER OF CALLS LEFT FOR THE EXIT. NOT  *
*                             CHANGED.                                *
*                   R5(FIELDREG)-ADDRESS OF FIELD FROM DATAGEN. NOT   *
*                                CHANGED.                             *
*                   R6(CNT)-NUMBER OF EXITS THAT HAVE BEEN TESTED FOR *
*                           CALLING. NOT CHANGED.                     *
*                   R7(AREA)-ADDRESS OF PLACE TO PUT NEXT PARAMETER   *
*                            RECORD IN TESTEXIT'S WORK AREA.          *
*                   R8(CNT2)-NUMBER OF PARAMETERS TO GET FOR EACH EXIT*
*                            ROUTINE. ALSO USED TO WRITE ERROR        *
*                            MESSAGES.                                *
*                   R9(BACK)-RETURN ADDRESS IN CALLING SECTION. ALSO  *
*                            USED TO RETURN FROM WRITING AN ERROR     *
*                            MESSAGE.                                 *
*                   R10(BASE)-BASE REGISTER                           *
*                   R11(BASE2)-BASE REGISTER                          *
*                   R12(WORK)-WORK REGISTER                           *
*                   R13(SAVEREG)-ADDRESS OF SAVE.                     *
*                   R14(RET)-USED BY DATA MANAGEMENT                  *
*                   R15(ENTRY)-USED BY DATA MANAGEMENT                *
* OUTPUT - 1. NULLSW IS SET TO X'01' IF THE CALL IS CANCELLED.        *
*          2. ADDRESS CONTAINS LIST OF PARAMETERS FOR THE EXIT ROUTINE*
*          3. R1(PARM) CONTAINS THE ADDRESS OF THE TABLE ADDRESS.     *
*          4. MESSAGES TO SYSPRINT FOR ERROR CONDITIONS.              *
***********************************************************************
         SPACE 3
GETREC   EQU   *
         L     AREA,MAIN                    INIT ADDRESS OF WORK AREA
GETNXREC EQU   *                            GET NEXT RECORD
         L     PARM,OPENADDR                ADDRESS OF DCB
         LA    PARM,0(PARM)                 CLEAR HIGH ORDER BYTE
         GET   (PARM)
         TM    NULLSW,X01                   TEST PROCESS SWITCH
         BO    NEXT                         DON'T PROCESS RECORDS
         TM    SWITCH,X01                   TEST FOR FIXED FORMAT
         BO    FIXED                        YES - FIXED
         LH    WORK,0(PARM)                 ADDRESS OF LL
         SH    WORK,CON4                    SUBTRACT FOR LLO0
         LA    PARM,D4(PARM)                GO BEYOND LL00
         B     FITTING                      TEST FOR FIT
FIXED    EQU   *
         LH    WORK,FLRECL                  GET LRECL
FITTING  EQU   *
         CR    TOTAL,WORK                   WILL RECORD FIT INTO AREA
         BL    NEEDMORE                     NO - GET MORE CORE
         STM   R2,R5,TSMFSAVE               SAVE MVCL REGS     @ZA32916
         LR    R2,AREA                      WORK AREA POINTER  @ZA32916
         LR    R3,WORK                      RECORD LENGTH      @ZA32916
         LR    R4,PARM                      RECORD POINTER     @ZA32916
         LR    R5,WORK                      RECORD LENGTH      @ZA32916
         MVCL  R2,R4                        MOVE RECORD        @ZA32916
         LM    R2,R5,TSMFSAVE               RESTORE MVCL REGS  @ZA32916
         ST    AREA,ADDRESS(ACM)            SET UP PARAMETER LIST
KEEPCNT  EQU   *                            COUNT PARMS
         LA    ACM,D4(ACM)                  INCREMENT DISPLACEMENT
         AR    AREA,WORK                    ADD DISPLACEMENT TO LAST
         SR    TOTAL,WORK                   SUBTRACT FROM TOTAL AREA
NEXT     EQU   *
         BCT   CNT2,GETNXREC                DECREMENT COUNT OF PARMS
         BR    BACK                         RETURN
NEEDMORE EQU   *
         STM   R0,R15,TSMFSAVE+D8           SAVE REGS DURING ERROR
         LA    CNT2,NUMBERS                 CALLS TO MAKE TO EACH EXIT
         SR    WORK,WORK
         IC    WORK,0(CNT,CNT2)             TOTAL CALLS FOR THIS EXIT
         SR    WORK,INDEX
         AH    WORK,CON1
         CVD   WORK,WORKAREA                PRINT CALL NUMBER
         UNPK  COREMSG+D37(L3),WORKAREA+D6(L2)
         OI    COREMSG+D39,XF0
         LA    CNT2,ACOREMSG                CORE MESSAGE
         BAL   BACK,WRITEMSG                WRITE ERROR MSG
         OI    NULLSW,X01                   TURN ON NULL SWITCH
         LM    R0,R15,TSMFSAVE+D8           RESTORE FOR PROCESSING
         B     NEXT                         GO PROCESS NEXT
         SPACE 3
ENDT     EQU   *
         LA    CNT2,AENDMSG                 ADDRESS OF MESSAGE PARMS
         BAL   BACK,WRITEMSG                WRITE MESSAGE
         B     USERFLDS                     WRITE USER FIELDS & GO ON
         EJECT
***********************************************************************
* SECTION FUNCTIONS - 1. WRITES MESSAGES TO SYSPRINT. SINCE THIS IS   *
*                        DONE BY A PUT MOVE MODE, THE LL00 FIELD MUST *
*                        BE SET UP AND THE MESSAGE MOVED TO BUFFER    *
*                        RETURNED BY DATA MANAGEMENT.                 *
*                     2. CLOSES DCBS, FREEMAINS, AND RETURNS TO THE   *
*                        OPERATING SYSTEM.                            *
* ENTRIES - FROM ALL SECTIONS OF TESTEXIT TO WRITE MESSAGES           *
*           FROM DATAGEN AND PARMPROS TO RETURN TO THE SYSTEM         *
* SUBROUTINES - DATA MANAGEMENT ROUTINES AND WTO ROUTINES             *
* INPUT - 1. TO MAKEMSG- R8(CNT2) CONTAINS THE DISPLACEMENT OF THE    *
*                         EXIT NAME IN FIELD                          *
*                        R9(BACK) CONTAINS THE RETURN ADDRESS         *
*         2. TO WRITEMSG- R8(CNT2) CONTAINS THE ADDRESS OF THE DOUBLE *
*                          WORD OF MESSAGE PARAMETERS FOR THE MESSAGE *
*                         R9(BACK) CONTAINS THE RETURN ADDRESS        *
*         3. TO ENDUP- AMTMAIN CONTAINS THE NUMBER OF BYTES IN        *
*                      TESTEXIT'S  WORK AREA AND SUBPOOL NUMBER       *
*                      MAIN CONTAINS THE ADDRESS OF TESTEXIT'S WORK   *
*                      AREA                                           *
* TABLES - EACH MESSAGE HAS A 2 WORD TABLE CONTAINING THE NUMBER OF   *
*          BYTES IN THE MESSAGE AND THE ADDRESS OF THE MESSAGE        *
*              AAA  DC F'NUMBER OF BYTES',AL4(ADDRESS)                *
* REGISTER USAGE -  R0-SUBPOOL NUMBER AND NUMBER OF BYTES FOR FREEMAIN*
*                   R1(PARM)-ADDRESS OF CORE FOR FREEMAIN ALSO USED   *
*                            BY DATA MANAGEMENT                       *
*                   R2-NOT USED                                       *
*                   R3-NOT USED                                       *
*                   R4-NOT USED                                       *
*                   R5-NOT USED                                       *
*                   R6-NOT USED                                       *
*                   R7-NOT USED                                       *
*                   R8(CNT2)-CONTAINS INFORMATION ON INPUT            *
*                   R9(BACK)-RETURN ADDRESS IN TESTEXIT               *
*                   R10(BASE)-BASE REGISTER                           *
*                   R11(BASE2)-BASE REGISTER                          *
*                   R12(WORK)-WORK REGISTER                           *
*                   R13(SAVEREG)-ADDRESS OF SAVE.  USED TO RESTORE    *
*                                REGISTERS IN RETURNING TO THE SYSTEM *
*                   R14(RET)-RETURN ADDRESS IN OPERATING SYSTEM       *
*                   R15-USED BY DATA MANAGEMENT, ZEROED BEFORE RETURN *
* OUTPUT - 1. MESSAGES ARE WRITTEN TO SYSPRINT                        *
*          2. IF SYSPRINT DOES NOT OPEN, A MESSAGE IS WRITTEN TO THE  *
*             CONSOLE AND CONTROL IS RETURNED TO THE SYSTEM.          *
*          3. DCB'S FOR SYSPRINT AND MANX ARE CLOSED, TESTEXIT'S WORK *
*             AREA IS RELEASED, AND CONTROL IS RETURNED TO THE SYSTEM.*
*             THE RETURN CODE IN R15 IS ALWAYS 0.                     *
***********************************************************************
         SPACE 3
MAKEMSG  EQU   *
         LA    WORK,FIELD                   ROUTINE NAMES
         LA    WORK,0(CNT2,WORK)            CORRECT ADDRESS OF NAME
         MVC   MSG+D13(L3),0(WORK)          MOVE NAME TO MSG
         LA    CNT2,AMSG                    ADDRESS OF MESSAGE PARMS
WRITEMSG TM    DCBPRINT+D48,X10             TEST IF SYSPRINT OPEN
         BZ    OPENPRNT                     NO GO TO OPEN
PUTMSG   EQU   *
         PUT   DCBPRINT                     GET BUFFER
         L     WORK,0(CNT2)                 GET LENGTH
         AH    WORK,CON4                    ADD FOR CONTROL CARD
         STH   WORK,0(PARM)
         L     CNT2,D4(CNT2)                ADDRESS OF MESSAGE
         SH    WORK,CON5                    FOR EXECUTE
         EX    WORK,MOVEMSGS                MOVE MESSAGE TO BUFFER
         SR    WORK,WORK                    CLEAR FOR LENGTH
         STH   WORK,D2(PARM)                SET UP 00 FIELD
         BR    BACK                         RETURN TO CALLER
OPENPRNT OPEN  (DCBPRINT,(OUTPUT,LEAVE))
         TM    DCBPRINT+D48,X10             TEST IF OPEN
         BNZ   PUTMSG                       YES-
         WTO   'PROGRAM TESTEXIT - OPEN ERROR ON SYSPRINT'
         B     ENDUP                        RETURN TO SYSTEM
         SPACE 3
ENDUP    EQU   *
         CLOSE (DCBPRINT,REREAD)
         CLOSE (DCBMANX,REREAD)
         L     R0,AMTMAIN                   GET SUBPOOL AND CORE
         L     R1,MAIN                      ADDRESS OF GETMAIN CORE
         FREEMAIN  R,LV=(0),A=(1)           FREE BLOCK
         L     SAVEREG,SAVE+D4              GET SAVEAREA @
         LM    RET,R12,D12(SAVEREG)         RESTORE REGISTERS
         SR    ENTRY,ENTRY                  CLEAR FOR RETURN CODE
         BR    RET                          RETURN TO SYSTEM
         EJECT
***********************************************************************
* SECTION FUNCTIONS - WRITES RECORDS TO MANX                          *
*                     SETS DEFAULT BLKSIZE AND LRECL FOR SYSPRINT     *
*                        AND MANX                                     *
*                     THIS SECTION IS ALMOST A SEPARATE PROGRAM.  IT  *
*                     MUST ESTABLISH ADDRESSABILITY AND SAVE REGISTERS*
*                     THE RECORD IS TESTED FOR ERRORS.                *
*                     1. IF THE LENGTH IS LT 18, THE LENGTH IS SET TO *
*                        18, THE RECORD IS WRITTEN TO MANX, AND AN    *
*                        ERROR MESSAGE IS WRITTEN TO SYSPRINT.        *
*                     2. IF THE RECORD TYPE FOR ALL USER RECORDS IS   *
*                        LT 128, THE RECORD IS WRITTEN TO MANX, AND   *
*                        AN ERROR MESSAGE IS WRITTEN TO SYSPRINT.     *
*                     3. IF MANX DOES NOT OPEN, AN ERROR MESSAGE IS   *
*                        WRITTEN TO SYSPRINT, BUT THE RECORD IS NOT   *
*                        WRITTEN TO MANX.                             *
*                     REGARDLESS OF THE RETURN CODE THE RECORD IS     *
*                     ALWAYS COMPLETELY WRITTEN TO MANX IF MANX OPENS.*
*                     THIS IS TO ALLOW THE USER TO CHECK ALL RECORDS. *
* ENTRIES - 1. USER EXIT ROUTINES                                     *
*           2. SECTION IN TESTEXIT THAT PROCESSES CALLS TO IEFACTRT   *
*              TO WRITE JOB OR  STEP TERMINATION RECORD IF REQUESTED  *
* SUBROUTINES - 1. DATA MANAGEMENT ROUTINES                           *
*               2. WRITEMSG TO WRITE ERROR MESSAGES                   *
* INPUT - THE CALLING SEQUENCE MUST BE AS FOLLOWS:                    *
*              R1  -ADDRESS OF RECORD TO BE WRITTEN                   *
*              R14 -RETURN ADDRESS                                    *
*              R15 -ENTRY ADDRESS OF TSMFWTM                          *
* TABLES - 1. USERSAVE-18 WORD SAVE AREA FOR THE CALLER'S REGISTERS   *
*          2. TSMFSAVE-18 WORD SAVE AREA FOR TSMFWTM                  *
*          3. RETCODE - RETURN CODE FROM TSMFWTM                      *
*                       X'00' - RECORD SUCCESSFULLY WRITTEN           *
*                       X'04' - RECORD TRUNCATED                      *
*                       X'08' - LENGTH LT 18 OR RECORD TYPE LT 128    *
*                       X'0C' - NON-ZERO PROTECT KEY (NEVER USED HERE)*
*                       X'10' - DATA SET FULL OR DATA SET DID NOT     *
*                               OPEN                                  *
*          4. RECORDS - COUNT OF RECORDS WRITTEN TO DETERMINE THE     *
*                       RETURN CODES. AFTER THE COUNT REACHES '8', IT *
*                       IS RESET TO 0. AT A COUNT OF 4 A RETURN CODE  *
*                       OF X'04' IS GIVEN. AT A COUNT OF 8 A RETURN   *
*                       CODE OF X'10' IS GIVEN.  IN BOTH CASES THE    *
*                       RECORD IS COMPLETELY WRITTEN TO MANX SO THAT  *
*                       THE USER MAY CHECK HIS RECORDS FOR ERRORS.    *
* REGISTER USAGE -  R0 - USED BY DATA MANAGEMENT                      *
*                   R1(PARM) - ADDRESS OF RECORD TO BE WRITTEN        *
*                   R2 - NOT USED                                     *
*                   R3(ACM) - ADDRESS OF DCB FOR MANX                 *
*                   R4 - NOT USED                                     *
*                   R5 - NOT USED                                     *
*                   R6(CNT) - WORK REGISTER                           *
*                   R7(CNT1)- ADDRESS OF RECORD TO BE WRITTEN         *
*                   R8(CNT2)- ADDRESS OF ERROR MESSAGES FOR WRITEMSG  *
*                   R9(BACK)- RETURN ADDRESS FROM WRITEMSG            *
*                   R10(BASE) - BASE REGISTER                         *
*                   R11(BASE2) - BASE REGISTER                        *
*                   R12(WORK) - WORK REGISTER                         *
*                   R13(SAVEREG) - ADDRESS OF TSMFSAVE                *
*                   R14(RET) - RETURN ADDRESS TO CALLER               *
*                   R15(ENTRY) - ADDRESS OF TSMFWTM AND RETURN CODE   *
* OUTPUT - 1. RECORD WRITTEN TO MANX                                  *
*          2. RETURN CODES TO CALLER                                  *
*          3. ERROR MESSAGES TO SYSPRINT                              *
*          4. ERROR MESSAGE TO CONSOLE FOR AN I/O ERROR ON MANX       *
***********************************************************************
         SPACE 3
TSMFWTM  EQU   *                            PSEUDO WRITE TO SYS1.MANX
SMFWTM   EQU   *
         USING *,ENTRY
         STM   R14,R12,USERSAVE+D12         SAVE USER'S REGS
         ST    SAVEREG,USERSAVE+D8          ADJUST
         LA    SAVEREG,USERSAVE             SAVEAREAS
         ST    SAVEREG,TSMFSAVE+D8          FOR
         LA    SAVEREG,TSMFSAVE             USER AND
         ST    SAVEREG,USERSAVE+D4          ROUTINE
         LM    BASE,BASE2,ATEXIT            RESTORE BASE REGISTER
         DROP  ENTRY
         NI    RETCODE,X00                  ZERO RETURN CODE
         LA    ACM,DCBMANX                  ADDRESS OF DCB FOR MANX
         LR    CNT1,PARM                    SAVE ADDRESS OF RECORD
         TM    D48(ACM),X10                 TEST IF OPEN
         BZ    NOTOPEN                      GO OPEN
GOON     EQU   *
         CLC   CON18(L2),0(CNT1)            TEST LGTH OF RCD   @YM00551
         BNH   ABBRA                        LENGTH IS OK
         MVC   0(L2,CNT1),CON18             PUT IN NEW LENGTH  @YM00551
         B     RECERROR                     PRINT ERROR MESSAGE
ABBRA    EQU   *
         LA    WORK,COMEBACK                ADDRESS OF RETURN POINT
         L     CNT,USERSAVE+D12             RETURN ADDRESS
         LA    CNT,0(CNT)                   GET COUNT
         CR    WORK,CNT                     TEST IF  FROM TESTEXIT
         BE    PUTREC                       DONT CHECK RECORD TYPE
         SR    WORK,WORK
         IC    WORK,D5(CNT1)                RECORD TYPE BYTE
         CH    WORK,CON128                  COMPARE TO 128
         BL    RECERROR                     ERROR IF LT 128
INCRE    EQU   *
         LA    WORK,L1
         AH    WORK,RECORDS
         STH   WORK,RECORDS                 INCREMENT COUNT
         TM    RECORDS+D1,X08               IF 8 - SAY DATA SET FULL
         BNZ   DSFULL                       DATA SET FULL
         CH    WORK,CON4                    REC COUNT = 4?
         BE    RECTRUNC                     GIVE CODE FOR TRUNCATION
PUTREC   EQU   *
         PUT   DCBMANX,(CNT1)               PUT RECORD INTO BUFFER
TSMFEXIT EQU   *
         SR    R15,R15                      SET RETURN CODE
         IC    R15,RETCODE                  SET UP RETURN CODE
         L     SAVEREG,USERSAVE+D8          RESTORE R13
         L     RET,USERSAVE+D12             RETURN ADDRESS
         LM    R2,R12,USERSAVE+D28          RESTORE 2-12
         BR    RET                          RETURN
         SPACE 3
NOTOPEN  EQU   *
         OPEN  (DCBMANX,(OUTPUT,LEAVE))
         TM    D48(ACM),X10                 TEST IF OPEN
         BNZ   GOON                         OPENED CONTINUE
         OI    RETCODE,X10                  RETURN CODE OF 16
         LA    CNT2,AMANXMSG
         BAL   BACK,WRITEMSG                WRITE ERROR MSG
         B     TSMFEXIT                     RETURN TO CALLER
DSFULL   EQU   *
         NI    RECORDS+D1,X00               RESET COUNT TO 0
         LA    WORK,L16                     RETURN CODE
         STC   WORK,RETCODE
         B     PUTREC                       WRITE RECORD
RECTRUNC EQU   *
         LA    WORK,L4                      RETURN CODE FOR TRUNCATION
         STC   WORK,RETCODE
         B     PUTREC                       WRITE RECORD
RECERROR EQU   *
         LA    CNT2,ARECERR
         BAL   BACK,WRITEMSG                WRITE ERROR MESSAGE
         OI    RETCODE,X08                  RETURN CODE OF 8
         B     INCRE                        WRITE BAD RECORD
         SPACE 3
IOERROR  EQU   *
         WTO   'PROGRAM TESTEXIT - I/O ERROR ON MANX'
         BR    RET                          RETURN TO SYSTEM
         SPACE 3
XLIST    EQU   *
         CLC   D62(L2,PARM),DDNAMES+D2      TEST BLKSIZE FOR ZERO
         BNE   GOBACK                       RETURN IF NOT ZERO
         LA    ENTRY,L124
         STH   ENTRY,D62(PARM)              DEFAULT BLKSIZE
         LA    ENTRY,L120
         STH   ENTRY,D82(PARM)              DEFAULT LRECL
GOBACK   EQU   *
         BR    RET                          RETURN TO OPEN ROUTINE
         EJECT
***********************************************************************
* SECTION FUNCTIONS - IMPLIMENTS WRITING TO SYSPRINT FROM IEFACTRT.   *
*                     THE CALLING SEQUENCE IS AS FOLLOWS              *
*                          MVC  36(4,12),MSGADDR   MOVE MESSAGE       *
*                          MVC  42(2,12),MSGLEN    ADDRESS AND LENGTH *
*                          L    REG15,VCONYS       TO TESTEXIT TABLE. *
*                          BALR REG14,REG15        BAL TO IEFYS IN    *
*                          .                       TESTEXIT           *
*                          .                                          *
*                          .                                          *
*                     MSGADDR  DC  A(MSG)                             *
*                     MSG      DC  C' TEXT OF MESSAGE '               *
*                     MSGLEN   DC  H' 2 CHARACTER LENGTH OF MESSAGE ' *
*                     VCONYS   DC  V(IEFYS)                           *
*                      (R13 MUST CONTAIN THE ADDRESS OF A 64 WORD     *
*                      SAVE AREA)                                     *
*                     UPON ENTRY TO IEFACTRT R12 CONTAINS THE ADDRESS *
*                     OF YSAREA SO THE ABOVE SEQUENCE WILL WORK.      *
* ENTRIES - IEFACTRT EXIT ROUTINE                                     *
* EXITS - IEFACTRT EXIT ROUTINE                                       *
* SUBROUTINES - WRITEMSG TO WRITE MESSAGE TO SYSPRINT                 *
* INPUT - YSAREA+36 MUST CONTAIN THE ADDRESS OF THE MESSAGE           *
*         YSAREA+42 MUST CONTAIN THE 2 BYTE MESSAGE LENGTH            *
*                   THE USER MUST DEFINE SYSPRINT'S LRECL TO BE AT    *
*                   LEAST AS LARGE AS THE LARGEST MESSAGE.            *
* TABLES - YSAREA-AN 11 WORD AREA TO CONTAIN THE MESSAGE ADDRESS AND  *
*                 LENGTH. THE 2 BYTE MESSAGE LENGTH IS PLACED BEFORE  *
*                 THE MESSAGE ADDRESS TO CREATE A DOUBLE WORD OF      *
*                          DC F'LENGTH',AL4(ADDRESS)                  *
*                 AS WRITEMSG EXPECTS.                                *
*          TSMFSAVE-A 18 WORD SAVE AREA FOR IEFYS. SAVE CANNOT BE     *
*                   DESTROYED BECAUSE THE EXIT ROUTINE HAS STORED     *
*                   TESTEXIT'S REGISTERS THERE.                       *
* REGISTER USAGE -  R0-R5-NOT USED                                    *
*                   R8(CNT2)-ADDRESS OF 2 WORD LENGTH AND MESSAGE     *
*                            ADDRESS FOR WRITEMSG                     *
*                   R6(CNT)-WORK REGISTER                             *
*                   R7-NOT USED                                       *
*                   R9(BACK)-RETURN ADDRESS IN IEFYS FOR WRITEMSG     *
*                   R10(BASE)-BASE REGISTER                           *
*                   R11(BASE2)-BASE REGISTER                          *
*                   R12(WORK)- WORK REGISTER                          *
*                   R13(SAVEREG)-ADDRESS OF TSMFSAVE                  *
*                   R14(RET)-RETURN ADDRESS IN IEFACTRT               *
*                   R15-NOT USED                                      *
* OUTPUT - THE MESSAGE IS WRITTEN TO SYSPRINT                         *
***********************************************************************
         SPACE 3
IEFYS    EQU   *
         USING *,ENTRY                      ESTABLISH @ABILITY   A33525
         STM   RET,R12,D12(SAVEREG)         SAVE REGS
         LM    BASE,BASE2,ATEXIT            USE TESTEXIT ENTRY   A33525
         DROP  ENTRY                        DROP TEMP BASE       A33525
         ST    SAVEREG,TSMFSAVE+D4          SAVE CALLERS SAVEAREA @
         LR    CNT,SAVEREG                  AND COMPLETE
         LA    SAVEREG,TSMFSAVE             LINKAGE
         ST    SAVEREG,D8(CNT)              CONVENTIONS
         LH    WORK,YSAREA+D42              LENGTH OF MSG
         ST    WORK,YSAREA+D32              PUT BEFORE ADDRESS OF MSG
         LA    CNT2,YSAREA+D32              ADDRESS OF LIST
         BAL   BACK,WRITEMSG                WRITE RECORD
         L     SAVEREG,TSMFSAVE+D4          RESTORE
         LM    RET,R12,D12(SAVEREG)         REGS AND
         BR    RET                          RETURN
         EJECT
CON1     DC    H'1'                         H
CON2     DC    H'2'                         A
CON3     DC    H'3'                         L
CON4     DC    H'4'                         F
CON5     DC    H'5'                         W
CON8     DC    H'8'                         O
CON9     DC    H'9'                                            @Z40FPPF
CON10    DC    H'10'                        R
CON18    DC    H'18'                        D                  @YM00551
CON128   DC    H'128'                       S
CON256   DC    H'256'                       CONSTANTS
COMMA    DC    CL1','                       COMMA
EQSIGN   DC    CL1'='                       =
SWITCH   DC    XL1'0'                       SWITCH
RETCODE  DC    XL1'0'                       RETURN CODE FOR SMFWTM
NULLSW   DC    XL1'00'                      NULL SW
NUMBERS  DS    XL9                          # OF CALLS TO EXITS@Z40FPPF
RECORDS  DS    H                            RECORDS COUNT
FLRECL   DS    H                            FIXED LRECL COUNT
SECS     DC    CL11'SECONDS    '                               @ZA17320
TIMEUNIT DC    CL11'TIMER UNITS'        VARIABLE MSG TEXT      @ZA17320
         CNOP  0,4
AMTMAIN  EQU   *
SUBPOOL  DC    XL1'01'                      SUBPOOL NUMBER
CORE     DC    XL3'001000'                  CORE REQ IN HEX    @ZA32916
USERCOMM DS    F                            USER COMM
USERID   DS    D                            USER ID
FIELD    DS    0C
         DC    CL3'UJV',BL1'0'              MUST BE IN THIS ORDER     1
         DC    CL3'UJI',BL1'0'              M                         2
         DC    CL3'USI',BL1'0'              O N                       3
         DC    CL3'USO',BL1'0'              D A                @YM04149
         DC    CL3'UTL',BL1'0'              U M                       5
         DC    CL3'U83',BL1'0'              L E                       6
         DC    CL3'ACT',BL1'0'              E S                       7
         DC    CL3'UJP',BL1'0'              S                  @YM04149
         DC    CL3'U29',BL1'0'                                 @Z40FPPF
PLACE    DS    0F
MARKER   DS    H                            ALIGN DDNAMES TO HALF WORD
DDNAMES  DC    H'48'                        NUMBER OF BYTES IN LIST
         DC    XL8'00000000'                MUST BE IN THIS ORDER     1
         DC    XL8'00000000'                D F                       2
         DC    XL8'00000000'                D I                       3
         DC    XL8'00000000'                N E                       4
         DC    CL8'IN      '                A L                       5
         DC    CL8'DGPRINT '                M D                       6
OPTLIST  EQU   DDNAMES+4                    E S
WORKAREA DS    D                            DWRD WORK AREA
EXITLIST DC    XL1'85',AL3(XLIST)           EXIT LIST
SAVE     DS    18F                          SAVE AREA
TSMFSAVE DS    18F                          TSMFWTM SAVE AREA
USERSAVE DS    18F                          USER SAVE AREA
OPENADDR DS    F                            DCB @ FOR OPEN
ADDRESS  DS    11F                          PARAMETER LISTS FOR EXITS
YSAREA   DS    11F                          AREA FOR IEFYS-SPRINT
MAIN     DS    1F                           ADDRESS OF GETMAIN AREA
ECBBLK   DS    F                            EVENT CONTROL BLOCK FOR DG
TCBADDR  DS    F                            ADDRESS OF TCB
ATEXIT   DC    A(TESTEXIT)                  TEST EXIT ENTRY
         DC    A(TESTEXIT+4096)             FOR SECOND BASE REGISTER
* EXTERNAL ROUTINES
ADDRUJV  DC    V(IEFUJV)                    UJV
ADDRUJI  DC    V(IEFUJI)                    UJI
ADDRUSI  DC    V(IEFUSI)                    USI
ADDRUSO  DC    V(IEFUSO)                    USO                @YM04149
ADDRUTL  DC    V(IEFUTL)                    UTL
ADDRU83  DC    V(IEFU83)                    U83
ADDRACT  DC    V(IEFACTRT)                  ACTRT
ADDRUJP  DC    V(IEFUJP)                    UJP                @YM04149
ADDRU29  DC    V(IEFU29)                    U29                @Z40FPPF
ABLNKMSG DC    F'10',AL4(BLNKMSG)           A
AMSG     DC    F'16',AL4(MSG)               D
APARMMSG DC    F'24',AL4(PARMMSG)           D M
AENDMSG  DC    F'58',AL4(ENDMSG)            R E
AJOBCAN  DC    F'22',AL4(JOBCAN)            E S
AJOBCONT DC    F'48',AL4(JOBCONT)           S S
ADGMSG   DC    F'75',AL4(DGMSG)             S A
ARECERR  DC    F'47',AL4(RECERR)            E G
ACOMMSG  DC    F'36',AL4(COMMSG)            S E
AIDMSG   DC    F'45',AL4(IDMSG)               S
ACOREMSG DC    F'90',AL4(COREMSG)           O
AMANXMSG DC    F'58',AL4(MANXMSG)           F
DCBADDR  DC    A(DCBUJV)                    MUST  BE IN THIS ORDER    1
         DC    A(DCBUJI)                    ADDRESS OF DCBS           2
         DC    A(DCBUSI)                                              3
         DC    A(DCBUSO)                    M D                @YM04149
         DC    A(DCBUTL)                    O C                       5
         DC    A(DCBU83)                    D B                       6
         DC    A(DCBACT)                      @                       7
         DC    A(DCBUJP)                                       @YM04149
         DS    0F                           NO DCB REQUIRED FOR IEFU29
*                                                              @Z40FPPF
RTNADDR  DC    A(READUJV)                   MUST BE IN THIS ORDER     1
         DC    A(READUJI)                   ADDRESS OF CALL EXIT RTNS 2
         DC    A(READUSI)                   M                         3
         DC    A(READUSO)                   O E                @YM04149
         DC    A(READUTL)                   D X                       5
         DC    A(READU83)                   U I                       6
         DC    A(READACT)                   L T                       7
         DC    A(READUJP)                   E                  @YM04149
         DC    A(READU29)                                      @Z40FPPF
PACKER   PACK  WORKAREA(L8),0(L0,CNT2)
* REMOVE MVC                                                   @ZA32916
MOVEMSGS MVC   D4(L0,PARM),0(CNT2)
CHAR     DC    CL16'0123456789ABCDEF'        HEX CHARS
BLNKMSG  DC    CL10'          '              BLANKS
MSG      DC    CL16'EXIT ROUTINE    '        EXIT MSG
PARMMSG  DC    CL24'ERROR IN PARAMETER FIELD'    PARM ERROR MSG
ENDMSG   DC    CL58'NUMBER OF CALLS GREATER THAN DATA GENERATED FOR PAR*
               AMETERS'                 END MSG
RECERR   DC    CL47'INVALID RECORD TYPE OR LENGTH - RETURN CODE = 8' C
JOBCAN   DC    CL22'JOB          CANCELLED'      CAN JOB
JOBCONT  DC    CL48'JOB          CONTINUED WITH          TIMER UNITS' C
DGMSG    DC    CL75'DATA GENERATOR ERROR CODE OR DATA SET OUT    DID NO*
               T OPEN - EXIT NOT CALLED'         D G ERROR
COMMSG   DC    CL37'USER COMMUNICATION FIELD IS          '   COMM
IDMSG    DC    CL46'USER IDENTIFICATION FIELD IS                  ' ID
COREMSG  DC    CL90'TOTAL PARAMETER LIST FOR CALL NUMBER     UNABLE TO *
               FIT INTO TESTEXIT CORE - CALL CANCELLED'    CORE MSG
MANXMSG  DC    CL58'OPEN ERROR ON MANX - RETURN CODE = 16 - RECORD NOT *
               WRITTEN'
U29DSN   DC    CL9'SYS1.MANX'                                  @Z40FPPF
DCBUJV   DCB   DDNAME=OUTUJV,DEVD=DA,DSORG=PS,MACRF=GL,EODAD=ENDT
DCBUJI   DCB   DDNAME=OUTUJI,DEVD=DA,DSORG=PS,MACRF=GL,EODAD=ENDT
DCBUSI   DCB   DDNAME=OUTUSI,DEVD=DA,DSORG=PS,MACRF=GL,EODAD=ENDT
DCBUSO   DCB   DDNAME=OUTUSO,DEVD=DA,DSORG=PS,MACRF=GL,EODAD=ENDT
DCBUTL   DCB   DDNAME=OUTUTL,DEVD=DA,DSORG=PS,MACRF=GL,EODAD=ENDT
DCBU83   DCB   DDNAME=OUTU83,DEVD=DA,DSORG=PS,MACRF=GL,EODAD=ENDT
DCBACT   DCB   DDNAME=OUTACT,DEVD=DA,DSORG=PS,MACRF=GL,EODAD=ENDT
DCBUJP   DCB   DDNAME=OUTUJP,DEVD=DA,DSORG=PS,MACRF=GL,EODAD=ENDT
DCBMANX  DCB   DDNAME=MANX,DEVD=DA,DSORG=PS,MACRF=PM,SYNAD=IOERROR,    *
               EXLST=EXITLIST,RECFM=VBS
DCBPRINT DCB   DDNAME=SYSPRINT,DEVD=DA,DSORG=PS,MACRF=PL,              *
               EXLST=EXITLIST,RECFM=VB
         END
//LKED.SYSLMOD DD DSNAME=TESTLIB,VOLUME=SER=231400,UNIT=2314,          *
//             SPACE=(TRK,(10,2,1)),DISP=(NEW,KEEP)
//LKED.EXITS  DD DSNAME=EXITLIB,VOLUME=SER=231400,UNIT=2314,DISP=OLD
//LKED.SYSIN  DD  *
         INCLUDE EXITS(IEFUJV,IEFUJI,IEFUTL,IEFU83,IEFACTRT)
         INCLUDE EXITS(IEFU29)                                 @Z40FPPF
         NAME TESTEXIT
//DATAGEN     JOB   MSGLEVEL=1                                         C
//                     *                                               C
//          THIS PROCEDURE CREATES A NEW PARTITIONED DATA SET(DGINPUT) *
//             WHICH WILL CONTAIN DATA GENERATOR CONTROL STATEMENTS    C
//             FOR TESTING EXIT ROUTINES.                              C
//          MEMBER UJV WILL CONTAIN DATA GENERATOR STATEMENTS FOR      *
//             TESTING IEFUJV.  EACH SERIES OF 3 CREATE STATEMENTS     C
//             WILL RESULT IN ONE SET OF PARAMETERS (I.E. A PARAMETER  C
//             LIST) FOR IEFUJV.                                       C
//          MEMBER UJI WILL CONTAIN DATA GENERATOR STATEMENTS FOR      C
//             TESTING IEFUJI.  EACH SERIES OF 4 CREATE STATEMENTS     C
//             WILL RESULT IN ONE SET OF PARAMETERS FOR IEFUJI.        C
//          MEMBER USI WILL CONTAIN DATA GENERATOR STATEMENTS FOR      C
//             TESTING IEFUSI. EACH SERIES OF 4 CREATE STATEMENTS      C
//             WILL RESULT IN ONE SET OF PARAMETERS FOR IEFUSI.        C
//          MEMBER USO WILL CONTAIN DATA GENERATOR STATEMENTS FOR      C
//             TESTING IEFUSO.  EACH SERIES OF 1 CREATE STATEMENT      C
//             WILL RESULT IN ONE SET OF PARAMETERS FOR IEFUSO.        *
//          MEMBER UTL WILL CONTAIN DATA GENERATOR STATEMENTS FOR      C
//             TESTING IEFUTL.  EACH SERIES OF 2 CREATE STATEMENTS     *
//             WILL RESULT IN ONE SET OF PARAMETERS FOR IEFUTL (I.E. A C
//             PARAMETER LIST PLUS AN EXTRA PARAMETER REPRESENTING THE C
//             CODE PASSED TO IEFUTL IN REGISTER 0).                   C
//          MEMBER U83 WILL CONTAIN DATA GENERATOR STATEMENTS FOR      *
//             TESTING IEFU83.  EACH CREATE STATEMENT WILL RESULT IN   *
//             ONE SET OF PARAMETERS FOR IEFU83 (I.E. A PARM LIST).    *
//          MEMBER ACT WILL CONTAIN DATA GENERATOR STATEMENTS FOR      C
//             TESTING IEFACTRT.  EACH SERIES OF 11 CREATE STATEMENTS  C
//             WILL RESULT IN ONE SET OF PARAMETERS FOR IEFACTRT (I.E. C
//             A PARAMETER LIST PLUS AN EXTRA PARAMETER REPRESENTING   *
//             THE CODE PASSED TO IEFACTRT IN REGISTER 0).             *
//          MEMBER UJP WILL CONTAIN DATA GENERATOR STATEMENTS FOR      *
//             TESTING IEFUJP.  EACH SERIES OF 2 CREATE STATEMENT      *
//             WILL RESULT IN ONE SET OF PARAMETERS FOR IEFUJP.        *
//                     *
// EXEC PGM=IEBGENER                                           @ZA32916
//SYSUT2 DD DSNAME=DGINPUT,UNIT=2314,DISP=(,KEEP),VOLUME=SER=231400,   *
//             SPACE=(TRK,(20,5,1)),DCB=(LRECL=80,BLKSIZE=400,RECFM=FB)
//SYSPRINT DD SYSOUT=A
//SYSIN  DD    *,DLM=XX                                        @ZA32916
      GENERATE MAXNAME=8,MAXGPS=8                              @ZA32916
      MEMBER   NAME=UJV                                        @ZA32916
      RECORD   IDENT=(6,'ENDUJV',1)                            @ZA32916
      MEMBER   NAME=UJI                                        @ZA32916
      RECORD   IDENT=(6,'ENDUJI',1)                            @ZA32916
      MEMBER   NAME=USI                                        @ZA32916
      RECORD   IDENT=(6,'ENDUSI',1)                            @ZA32916
      MEMBER   NAME=UTL                                        @ZA32916
      RECORD   IDENT=(6,'ENDUTL',1)                            @ZA32916
      MEMBER   NAME=U83                                        @ZA32916
      RECORD   IDENT=(6,'ENDU83',1)                            @ZA32916
      MEMBER   NAME=ACT                                        @ZA32916
      RECORD   IDENT=(6,'ENDACT',1)                            @ZA32916
      MEMBER   NAME=USO                                        @ZA32916
      RECORD   IDENT=(6,'ENDUSO',1)                            @ZA32916
      MEMBER   NAME=UJP                                        @ZA32916
      RECORD   IDENT=(6,'ENDUJP',1)                            @ZA32916
XX                                                             @ZA32916
//SYSUT1 DD    DATA,DLM=YY                                     @ZA32916
         DSD   OUTPUT=(OUTUJV)
         FD    NAME=JOBNAME,LENGTH=8,FILL=X'40',PICTURE=7,'AAJSJOB'
         FD    NAME=TIMESTP,LENGTH=4,FORMAT=BI,INDEX=2
         FD    NAME=DATE,LENGTH=4,PICTURE=5,P'19968'
         FD    NAME=SID,LENGTH=4,FILL=X'40',PICTURE=4,'155H'   @YM00551
         FD    NAME=USERID,LENGTH=8,FILL=X'40'
         FD    NAME=OP,LENGTH=1,PICTURE=3,B'250'     X'FA'     @YM00551
         FD    NAME=R,LENGTH=2,PICTURE=1,B'0'                  @YM00551
         FD    NAME=USERCOMM,LENGTH=4,STARTLOC=33,FORMAT=BI    @ZA46423
         FD    NAME=C1,LENGTH=1,PICTURE=1,B'1'
         FD    NAME=C2,LENGTH=1,PICTURE=1,B'2'
         FD    NAME=C3,LENGTH=1,PICTURE=1,B'3'
         FD    NAME=C4,LENGTH=1,PICTURE=1,B'4'
         FD    NAME=C8,LENGTH=1,PICTURE=1,B'8'
         FD    NAME=C16,LENGTH=1,PICTURE=2,B'16'
         FD    NAME=C32,LENGTH=1,PICTURE=2,B'32'               @YM04149
         CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,C1,OP,R,USERCOMM)
         CREATE INPUT=SYSIN(TSMF)
//TESTJOB  JOB B3235678,SMITH,MSGLEVEL=1,
TSMF
         CREATE NAME=C1
         CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,C1,OP,R,USERCOMM)
         CREATE INPUT=SYSIN(TSMF)
//             PRTY=2,REGION=123K,TIME=(5,30)
TSMF
         CREATE NAME=C1
         CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,C1,OP,R,USERCOMM)
         CREATE INPUT=SYSIN(TSMF)
//STP1   EXEC  FORTHCLG,PARM.FORT=BCD
TSMF
         CREATE NAME=C8
         CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,C1,OP,R,USERCOMM)
         CREATE INPUT=SYSIN(TSMF)
//FORT   EXEC  PGM=IEKAA00,REGION=228K
TSMF
         CREATE  NAME=C2
         CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,C1,OP,R,USERCOMM)
         CREATE INPUT=SYSIN(TSMF)
//SYSPRINT DD  SYSOUT=A
TSMF
         CREATE  NAME=C4
         CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,C1,OP,R,USERCOMM)
         CREATE INPUT=SYSIN(TSMF)
//SYSPUNCH DD  SYSOUT=B
TSMF
         CREATE  NAME=C4
         CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,C1,OP,R,USERCOMM)
         CREATE INPUT=SYSIN(TSMF)
//FORT.SYSLIN  DD  DSNAME=&LOADSET,UNIT=SYSDA,DISP=(MOD,PASS),         *
TSMF
         CREATE NAME=C4
         CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,C1,OP,R,USERCOMM)
         CREATE INPUT=SYSIN(TSMF)
//             SPACE=(400,(200,50),RLSE)
TSMF
         CREATE NAME=C4
         CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,C1,OP,R,USERCOMM)
         CREATE INPUT=SYSIN(TSMF)
XXSYSLIN  DD   DSNAME=&LOADSET,UNIT=SYSSQ,DISP=(MOD,PASS),             *
TSMF
         CREATE NAME=C4
         CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,C1,OP,R,USERCOMM)
         CREATE INPUT=SYSIN(TSMF)
//             SPACE=(400,(200,50),RLSE)
TSMF
         CREATE NAME=C4
         CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,C2,OP,R,USERCOMM)
         CREATE INPUT=SYSIN(TSMF)
//FORT.SYSIN  DD *
TSMF
         CREATE  NAME=C4
         CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,C2,OP,R,USERCOMM)
         CREATE INPUT=SYSIN(TSMF)
//LKED   EXEC  PGM=IEWL,REGION=96K,PARM=(MAP,LET,LIST),COND=(4,LT,FORT)
TSMF
         CREATE NAME=C2
         CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,C2,OP,R,USERCOMM)
         CREATE INPUT=SYSIN(TSMF)
//SYSLIB  DD  DSNAME=SYS1.FORTLIB,DISP=SHR
TSMF
         CREATE NAME=C4
         CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,C2,OP,R,USERCOMM)
         CREATE INPUT=SYSIN(TSMF)
//SYSPRINT  DD SYSOUT=A
TSMF
         CREATE  NAME=C4
         CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,C2,OP,R,USERCOMM)
         CREATE INPUT=SYSIN(TSMF)
//SYSLMOD DD DSNAME=&GOSET(MAIN),UNIT=SYSDA,DISP=(,PASS),              *
TSMF
         CREATE NAME=C4
         CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,C2,OP,R,USERCOMM)
         CREATE INPUT=SYSIN(TSMF)
//             SPACE=(3072,(30,10,1),RLSE)
TSMF
         CREATE  NAME=C4
         CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,C2,OP,R,USERCOMM)
         CREATE INPUT=SYSIN(TSMF)
//SYSUT1   DD  UNIT=SYSDA,SPACE=(1024,(200,20)),SEP=SYSLMOD
TSMF
         CREATE NAME=C4
         CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,C2,OP,R,USERCOMM)
         CREATE INPUT=SYSIN(TSMF)
//SYSLIN   DD  DSNAME=&LOADSET,DISP=(OLD,DELETE)
TSMF
         CREATE NAME=C4
         CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,C3,OP,R,USERCOMM)
         CREATE INPUT=SYSIN(TSMF)
//        DD   DDNAME=SYSIN
TSMF
         CREATE NAME=C4
         CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,C3,OP,R,USERCOMM)
         CREATE INPUT=SYSIN(TSMF)
//GO     EXEC  PGM=*.LKED.SYSLMOD,COND=((4,LT,FORT),(4,LT,LKED))
TSMF
         CREATE NAME=C2
         CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,C3,OP,R,USERCOMM)
         CREATE INPUT=SYSIN(TSMF)
//FT05F001  DD DDNAME=SYSIN
TSMF
         CREATE  NAME=C4
         CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,C3,OP,R,USERCOMM)
         CREATE INPUT=SYSIN(TSMF)
//FT06F001  DD  SYSOUT=A
TSMF
         CREATE NAME=C4
         CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,C3,OP,R,USERCOMM)
         CREATE INPUT=SYSIN(TSMF)
//FT07F001  DD SYSOUT=B
TSMF
         CREATE NAME=C4
         CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,C3,OP,R,USERCOMM)
         CREATE INPUT=SYSIN(TSMF)
//GO.SYSIN  DD *
TSMF
         CREATE  NAME=C4
         CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,C3,OP,R,USERCOMM)
         CREATE INPUT=SYSIN(TSMF)

TSMF
         CREATE NAME=C16
         CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,C3,OP,R,USERCOMM)
         CREATE INPUT=SYSIN(TSMF)

TSMF
         CREATE NAME=C32
ENDUJV   END                                                   @ZA32916
         DSD   OUTPUT=(OUTUJI)
         FD    NAME=JOBNAME,LENGTH=8,FILL=X'40',PICTURE=7,'AAJSJOB',   *
               ACTION=TR
         FD    NAME=TIMESTP,LENGTH=4,FORMAT=BI,INDEX=10
         FD    NAME=DATE,LENGTH=4,PICTURE=5,P'19968'
         FD    NAME=SID,LENGTH=4,FILL=X'40',PICTURE=4,'155H'   @YM00551
         FD    NAME=USERID,LENGTH=8,FILL=X'40'
         FD    NAME=ST,LENGTH=1,PICTURE=1,B'1'                 @YM00551
         FD    NAME=OP,LENGTH=1,PICTURE=3,B'250'     X'FA'     @YM00551
         FD    NAME=R,LENGTH=2,PICTURE=1,B'0'                  @YM00551
         FD    NAME=USERCOMM,LENGTH=4,FORMAT=BI,STARTLOC=33    @ZA46423
         FD    NAME=AUTHOR,LENGTH=20,FILL=X'40',                       *
               PICTURE=10,'PROGRAMMER',ACTION=TR
         FD    NAME=JOBPRTY,LENGTH=1,FORMAT=RA
         FD    NAME=C0,LENGTH=1,PICTURE=1,B'0'
         FD    NAME=C1,LENGTH=1,PICTURE=1,B'1'
         FD    NAME=C2,LENGTH=1,PICTURE=1,B'2'
         FD    NAME=C3,LENGTH=1,PICTURE=1,B'3'
         FD    NAME=C4,LENGTH=1,PICTURE=1,B'4'
         FD    NAME=C5,LENGTH=1,PICTURE=1,B'5'
         FD    NAME=C6,LENGTH=1,PICTURE=1,B'6'
         FD    NAME=C7,LENGTH=1,PICTURE=1,B'7'
         FD    NAME=C8,LENGTH=1,PICTURE=1,B'8'
         FD    NAME=C9,LENGTH=1,PICTURE=1,B'9'
         FD    NAME=C10,LENGTH=1,PICTURE=2,B'10'
         FD    NAME=C11,LENGTH=1,PICTURE=2,B'11'
         FD    NAME=C12,LENGTH=1,PICTURE=2,B'12'
         FD    NAME=C13,LENGTH=1,PICTURE=2,B'13'
         FD    NAME=C14,LENGTH=1,PICTURE=2,B'14'
         FD    NAME=C15,LENGTH=1,PICTURE=2,B'15'
         FD    NAME=C16,LENGTH=1,PICTURE=2,B'16'
         FD    NAME=FA,LENGTH=1,PICTURE=1,'A'
         FD    NAME=FB,LENGTH=2,PICTURE=2,'BC',ACTION=RP
         FD    NAME=FC,LENGTH=3,PICTURE=3,'DEF',ACTION=RP
         FD    NAME=FD,LENGTH=4,PICTURE=4,'GHIJ',ACTION=RP
         FD    NAME=FE,LENGTH=5,PICTURE=5,'KLMNO',ACTION=RP
         FD    NAME=F0,LENGTH=1,PICTURE=1,'0'
         FD    NAME=F1,LENGTH=1,PICTURE=1,'1'
         FD    NAME=F2,LENGTH=2,PICTURE=2,'23',ACTION=RP
         FD    NAME=F3,LENGTH=3,PICTURE=3,'456',ACTION=RP
         FD    NAME=F4,LENGTH=4,PICTURE=4,'7890',ACTION=RP
         FD    NAME=F5,LENGTH=5,PICTURE=5,'12345',ACTION=RP
         CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,ST,OP,R,USERCOMM)
         CREATE NAME=AUTHOR
         CREATE NAME=JOBPRTY
        CREATE NAME=(C1,C1,F1)
         CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,ST,OP,R,USERCOMM)
         CREATE NAME=AUTHOR
         CREATE NAME=JOBPRTY
        CREATE NAME=(C2,C5,FC,F2,C10,F5,FB,F3)
         CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,ST,OP,R,USERCOMM)
         CREATE NAME=AUTHOR
         CREATE NAME=JOBPRTY
        CREATE NAME=C0
         CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,ST,OP,R,USERCOMM)
         CREATE NAME=AUTHOR
         CREATE NAME=JOBPRTY
        CREATE NAME=(C4,C1,FA,C0,C0,C3,F3)
         CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,ST,OP,R,USERCOMM)
         CREATE NAME=AUTHOR
         CREATE NAME=JOBPRTY
        CREATE NAME=(C5,C5,F5,C6,FE,F0,C2,FB,C4,FD,C7,F1,FB,F3,FA)
         CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,ST,OP,R,USERCOMM)
         CREATE NAME=AUTHOR
         CREATE NAME=JOBPRTY
        CREATE NAME=(C3,C1,F0,C12,FE,F5,F2,C0)
         CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,ST,OP,R,USERCOMM)
         CREATE NAME=AUTHOR
         CREATE NAME=JOBPRTY
        CREATE NAME=(C6,C0,C4,F4,C3,F3,C9,FE,F4,C2,F2,C2,FB)
         CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,ST,OP,R,USERCOMM)
         CREATE NAME=AUTHOR
         CREATE NAME=JOBPRTY
        CREATE NAME=(C1,C15,F1,FA,F5,FD,FD)
ENDUJI  END                                                    @ZA32916
         DSD   OUTPUT=(OUTUSI)
         FD    NAME=JOBNAME,LENGTH=8,FILL=X'40',PICTURE=7,'AAJSJOB',   *
               ACTION=TR
         FD    NAME=TIMESTP,LENGTH=4,FORMAT=BI,INDEX=10
         FD    NAME=DATE,LENGTH=4,PICTURE=5,P'19968'
         FD    NAME=SID,LENGTH=4,FILL=X'40',PICTURE=4,'155H'   @YM00551
         FD    NAME=USERID,LENGTH=8,FILL=X'40'
         FD    NAME=ST,LENGTH=1,PICTURE=1,B'1'                 @YM00551
         FD    NAME=OP,LENGTH=1,PICTURE=3,B'250'     X'FA'     @YM00551
         FD    NAME=R,LENGTH=2,PICTURE=1,B'0'                  @YM00551
         FD    NAME=USERCOMM,LENGTH=4,FORMAT=BI,STARTLOC=33    @ZA46423
         FD    NAME=STEPNAME,LENGTH=8,FILL=X'40',PICTURE=8,'STEPNAME', *
               ACTION=TR
         FD    NAME=PROGNAME,LENGTH=8,FILL=X'40',PICTURE=8,'PROGNAME', *
               ACTION=TR
         FD    NAME=C0,LENGTH=1,PICTURE=1,B'0'
         FD    NAME=C1,LENGTH=1,PICTURE=1,B'1'
         FD    NAME=C2,LENGTH=1,PICTURE=1,B'2'
         FD    NAME=C3,LENGTH=1,PICTURE=1,B'3'
         FD    NAME=C4,LENGTH=1,PICTURE=1,B'4'
         FD    NAME=C5,LENGTH=1,PICTURE=1,B'5'
         FD    NAME=C6,LENGTH=1,PICTURE=1,B'6'
         FD    NAME=C7,LENGTH=1,PICTURE=1,B'7'
         FD    NAME=C8,LENGTH=1,PICTURE=1,B'8'
         FD    NAME=C9,LENGTH=1,PICTURE=1,B'9'
         FD    NAME=C10,LENGTH=1,PICTURE=2,B'10'
         FD    NAME=C11,LENGTH=1,PICTURE=2,B'11'
         FD    NAME=C12,LENGTH=1,PICTURE=2,B'12'
         FD    NAME=C13,LENGTH=1,PICTURE=2,B'13'
         FD    NAME=C14,LENGTH=1,PICTURE=2,B'14'
         FD    NAME=C15,LENGTH=1,PICTURE=2,B'15'
         FD    NAME=C16,LENGTH=1,PICTURE=2,B'16'
         FD    NAME=FA,LENGTH=1,PICTURE=1,'A'
         FD    NAME=FB,LENGTH=2,PICTURE=2,'BC',ACTION=RP
         FD    NAME=FC,LENGTH=3,PICTURE=3,'DEF',ACTION=RP
         FD    NAME=FD,LENGTH=4,PICTURE=4,'GHIJ',ACTION=RP
         FD    NAME=FE,LENGTH=5,PICTURE=5,'KLMNO',ACTION=RP
         FD    NAME=F0,LENGTH=1,PICTURE=1,'0'
         FD    NAME=F1,LENGTH=1,PICTURE=1,'1'
         FD    NAME=F2,LENGTH=2,PICTURE=2,'23',ACTION=RP
         FD    NAME=F3,LENGTH=3,PICTURE=3,'456',ACTION=RP
         FD    NAME=F4,LENGTH=4,PICTURE=4,'7890',ACTION=RP
         FD    NAME=F5,LENGTH=5,PICTURE=5,'12345',ACTION=RP
        CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,ST,OP,R,USERCOMM)
        CREATE NAME=(STEPNAME)
        CREATE NAME=(PROGNAME)
        CREATE NAME=(C1,C1,F1)
        CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,ST,OP,R,USERCOMM)
        CREATE NAME=(STEPNAME)
        CREATE NAME=(PROGNAME)
        CREATE NAME=(C2,C5,FC,F2,C10,F5,FB,F3)
        CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,ST,OP,R,USERCOMM)
        CREATE NAME=(STEPNAME)
        CREATE NAME=(PROGNAME)
        CREATE NAME=(C0)
        CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,ST,OP,R,USERCOMM)
        CREATE NAME=(STEPNAME)
        CREATE NAME=(PROGNAME)
        CREATE NAME=(C4,C1,FA,C0,C0,C3,F3)
        CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,ST,OP,R,USERCOMM)
        CREATE NAME=(STEPNAME)
        CREATE NAME=(PROGNAME)
        CREATE NAME=(C5,C5,F5,C6,FE,F0,C2,FB,C4,FD,C7,F1,FB,F3,FA)
        CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,ST,OP,R,USERCOMM)
        CREATE NAME=(STEPNAME)
        CREATE NAME=(PROGNAME)
        CREATE NAME=(C3,C1,F0,C12,FE,F5,F2,C0)
        CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,ST,OP,R,USERCOMM)
        CREATE NAME=(STEPNAME)
        CREATE NAME=(PROGNAME)
        CREATE NAME=(C6,C0,C4,F4,C3,F3,C9,FE,F4,C2,F2,C2,FB)
        CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,ST,OP,R,USERCOMM)
        CREATE NAME=(STEPNAME)
        CREATE NAME=(PROGNAME)
        CREATE NAME=(C1,C15,F1,FA,F5,FD,FD)
ENDUSI  END                                                    @ZA32916
         DSD   OUTPUT=(OUTUTL)
         FD    NAME=JOBNAME,LENGTH=8,FILL=X'40',PICTURE=7,'AAJSJOB',   *
               ACTION=TR
         FD    NAME=TIMESTP,LENGTH=4,FORMAT=BI,INDEX=10
         FD    NAME=DATE,LENGTH=4,PICTURE=5,P'19968'
         FD    NAME=SID,LENGTH=4,FILL=X'40',PICTURE=4,'155H'   @YM00551
         FD    NAME=USERID,LENGTH=8,FILL=X'40'
         FD    NAME=ST,LENGTH=1,PICTURE=1,B'1'                 @YM00551
         FD    NAME=OP,LENGTH=1,PICTURE=3,B'250'     X'FA'     @YM00551
         FD    NAME=R,LENGTH=2,PICTURE=1,B'0'                  @YM00551
         FD    NAME=USERCOMM,LENGTH=4,FORMAT=BI,STARTLOC=33    @ZA46423
         FD    NAME=C0,LENGTH=1,PICTURE=1,B'0'
         FD    NAME=C1,LENGTH=1,PICTURE=1,B'1'
         FD    NAME=C2,LENGTH=1,PICTURE=1,B'2'
         FD    NAME=C3,LENGTH=1,PICTURE=1,B'3'
         FD    NAME=C4,LENGTH=1,PICTURE=1,B'4'
         FD    NAME=C5,LENGTH=1,PICTURE=1,B'5'
         FD    NAME=C6,LENGTH=1,PICTURE=1,B'6'
         FD    NAME=C7,LENGTH=1,PICTURE=1,B'7'
         FD    NAME=C8,LENGTH=1,PICTURE=1,B'8'
         FD    NAME=C9,LENGTH=1,PICTURE=1,B'9'
         CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,ST,OP,R,USERCOMM)
         CREATE NAME=C0
         CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,ST,OP,R,USERCOMM)
         CREATE NAME=C8
         CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,ST,OP,R,USERCOMM)
         CREATE NAME=C8
         CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,ST,OP,R,USERCOMM)
         CREATE NAME=C4
         CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,ST,OP,R,USERCOMM)
         CREATE NAME=C0
ENDUTL  END                                                    @ZA32916
         DSD   OUTPUT=(OUTU83)
         FD    NAME=RDWL,LENGTH=2,PICTURE=2,B'18'
         FD    NAME=RDWR,LENGTH=2,PICTURE=2,B'00'
         FD    NAME=AOS2,LENGTH=1,PICTURE=1,B'2'
         FD    NAME=TYPE2,LENGTH=1,PICTURE=1,B'2'
         FD    NAME=TYPE3,LENGTH=1,PICTURE=1,B'3'
         FD    NAME=TYPE0,LENGTH=1,PICTURE=1,B'0'
         FD    NAME=TOD,LENGTH=4,PICTURE=7,B'4629150'
         FD    NAME=DATE,LENGTH=4,PICTURE=7,B'7471759'
         FD    NAME=SID,LENGTH=4,PICTURE=4,'165J'              @YM00551
         FD    NAME=JWT,LENGTH=4,PICTURE=2,B'10'
         FD    NAME=BUF,LENGTH=4,PICTURE=4,B'2000'
         FD    NAME=VST,LENGTH=4,PICTURE=4,B'1024'
         FD    NAME=OPT,LENGTH=1,PICTURE=3,B'170'
         FD    NAME=RST,LENGTH=4,PICTURE=3,B'508'
         CREATE NAME=(RDWL,RDWR,AOS2,TYPE0,TOD,DATE,SID,JWT,   @YM00551*
               BUF,VST,OPT,RST)
         CREATE NAME=(RDWL,RDWR,AOS2,TYPE2,TOD,DATE,SID)       @YM00551
         CREATE NAME=(RDWL,RDWR,AOS2,TYPE3,TOD,DATE,SID)       @YM00551
         CREATE NAME=(RDWL,RDWR,AOS2,TYPE0,TOD,DATE,SID,JWT,   @YM00551*
               BUF,VST,OPT,RST)
         CREATE NAME=(RDWL,RDWR,AOS2,TYPE2,TOD,DATE,SID)       @YM00551
         CREATE NAME=(RDWL,RDWR,AOS2,TYPE3,TOD,DATE,SID)       @YM00551
         CREATE NAME=(RDWL,RDWR,AOS2,TYPE0,TOD,DATE,SID,JWT,   @YM00551*
               BUF,VST,OPT,RST)
         CREATE NAME=(RDWL,RDWR,AOS2,TYPE2,TOD,DATE,SID)       @YM00551
         CREATE NAME=(RDWL,RDWR,AOS2,TYPE3,TOD,DATE,SID)       @YM00551
         CREATE NAME=(RDWL,RDWR,AOS2,TYPE0,TOD,DATE,SID,JWT,   @YM00551*
               BUF,VST,OPT,RST)
         CREATE NAME=(RDWL,RDWR,AOS2,TYPE2,TOD,DATE,SID)       @YM00551
         CREATE NAME=(RDWL,RDWR,AOS2,TYPE3,TOD,DATE,SID)       @YM00551
ENDU83  END                                                    @ZA32916
         DSD   OUTPUT=(OUTACT)
         FD    NAME=JOBNAME,LENGTH=8,FILL=X'40',PICTURE=7,'AAJSJOB',   *
               ACTION=TR
         FD    NAME=TIMESTP,LENGTH=4,PICTURE=1,B'0',INDEX=10
         FD    NAME=DATE,LENGTH=4,PICTURE=5,P'19968'
         FD    NAME=SID,LENGTH=4,FILL=X'40',PICTURE=4,'155H'   @YM00551
         FD    NAME=USERID,LENGTH=8,FILL=X'40'
         FD    NAME=ST,LENGTH=1,PICTURE=1,B'1'                 @YM00551
         FD    NAME=OP,LENGTH=1,PICTURE=3,B'250'     X'FA'     @YM00551
         FD    NAME=R,LENGTH=2,PICTURE=1,B'0'                  @YM00551
         FD    NAME=USERCOMM,LENGTH=4,FORMAT=BI,STARTLOC=33    @ZA46423
         FD    NAME=STEPNAME,LENGTH=8,FILL=X'40',PICTURE=8,'STEPNAME', *
               ACTION=TR
         FD    NAME=AUTHOR,LENGTH=20,FILL=X'40',                       *
               PICTURE=10,'PROGRAMMER',ACTION=TR
         FD    NAME=EXCPCNT,LENGTH=4,FORMAT=RA
         FD    NAME=TAPECLAS,LENGTH=1,PICTURE=3,B'128'
         FD    NAME=DACLASS,LENGTH=1,PICTURE=2,B'32'
         FD    NAME=URECLASS,LENGTH=1,PICTURE=1,B'8'
         FD    NAME=STEPPRTY,LENGTH=1,FORMAT=RA
         FD    NAME=JOBTIME,LENGTH=3,FORMAT=RA
         FD    NAME=STEPTIME,LENGTH=3,FORMAT=RA
         FD    NAME=RDSTARTT,LENGTH=4,FORMAT=BI,INDEX=4
         FD    NAME=RDSTARTD,LENGTH=4,PICTURE=5,P'19968'
         FD    NAME=STARTIME,LENGTH=4,FORMAT=BI,INDEX=2
         FD    NAME=STARTDAT,LENGTH=4,PICTURE=5,P'19968'
         FD    NAME=RDRSTOPT,LENGTH=4,FORMAT=BI,INDEX=6
         FD    NAME=RDRSTOPD,LENGTH=4,PICTURE=5,P'19968'
         FD    NAME=DEVCLASS,LENGTH=1,FORMAT=BI
         FD    NAME=DEVTYPE,LENGTH=1,FORMAT=BI
         FD    NAME=REGION,LENGTH=2,FORMAT=BI
         FD    NAME=FLAGS,LENGTH=1,PICTURE=1,B'0'
         FD    NAME=SYSINCNT,LENGTH=4,INDEX=10,PICTURE=1,B'0'
         FD    NAME=JOBPRTY,LENGTH=1,INDEX=1,RANGE=13
         FD    NAME=TERMCODE,LENGTH=1,FORMAT=RA
         FD    NAME=TERMSTAT,LENGTH=2,FORMAT=RA
         FD    NAME=SYSOUTCL,LENGTH=5                          @YM04149
         FD    NAME=CPRSTART,LENGTH=1
         FD    NAME=JOBINCL,LENGTH=1,FORMAT=RA
         FD    NAME=CPUTIME,LENGTH=3,FORMAT=RA
         FD    NAME=JOBTYPE,LENGTH=1,PICTURE=1,B'5'
         FD    NAME=STEPTYPE,LENGTH=1,PICTURE=1,B'4'
         FD    NAME=PROGNAME,LENGTH=8,FILL=X'40',PICTURE=7,'PROGRAM',  *
               ACTION=TR
         FD    NAME=REGSIZE,LENGTH=2,PICTURE=3,B'512'          @YM00551
         FD    NAME=CORESYST,LENGTH=2,PICTURE=3,B'200'         @YM00551
         FD    NAME=COREUSED,LENGTH=2,PICTURE=3,B'300'         @YM00551
         FD    NAME=SRBTIME,LENGTH=3,PICTURE=3,B'273'          @YM04149
         FD    NAME=ADDR180,LENGTH=2,PICTURE=3,B'384'
         FD    NAME=ADDR181,LENGTH=2,PICTURE=3,B'181'
         FD    NAME=ADDR182,LENGTH=2,PICTURE=3,B'182'
         FD    NAME=ADDR183,LENGTH=2,PICTURE=3,B'183'
         FD    NAME=ADDR280,LENGTH=2,PICTURE=3,B'280'
         FD    NAME=ADDR281,LENGTH=2,PICTURE=3,B'281'
         FD    NAME=ADDR282,LENGTH=2,PICTURE=3,B'282'
         FD    NAME=ADDR283,LENGTH=2,PICTURE=3,B'283'
         FD    NAME=ADDR284,LENGTH=2,PICTURE=3,B'284'
         FD    NAME=ADDR190,LENGTH=2,PICTURE=3,B'190'
         FD    NAME=ADDR191,LENGTH=2,PICTURE=3,B'191'
         FD    NAME=ADDR192,LENGTH=2,PICTURE=3,B'192'
         FD    NAME=ADDR193,LENGTH=2,PICTURE=3,B'193'
         FD    NAME=ADDR1C0,LENGTH=2,PICTURE=3,B'448'
         FD    NAME=ADDR00C,LENGTH=2,PICTURE=3,B'012'
         FD    NAME=ADDR00D,LENGTH=2,PICTURE=3,B'013'
         FD    NAME=ADDR00E,LENGTH=2,PICTURE=3,B'014'
         FD    NAME=C0,LENGTH=1,PICTURE=1,B'0'
         FD    NAME=C1,LENGTH=1,PICTURE=1,B'1'
         FD    NAME=C2,LENGTH=1,PICTURE=1,B'2'
         FD    NAME=C3,LENGTH=1,PICTURE=1,B'3'
         FD    NAME=C4,LENGTH=1,PICTURE=1,B'4'
         FD    NAME=C5,LENGTH=1,PICTURE=1,B'5'
         FD    NAME=C6,LENGTH=1,PICTURE=1,B'6'
         FD    NAME=C7,LENGTH=1,PICTURE=1,B'7'
         FD    NAME=C8,LENGTH=1,PICTURE=1,B'8'
         FD    NAME=C9,LENGTH=1,PICTURE=1,B'9'
         FD    NAME=C10,LENGTH=1,PICTURE=2,B'10'
         FD    NAME=C11,LENGTH=1,PICTURE=2,B'11'
         FD    NAME=C12,LENGTH=1,PICTURE=2,B'12'
         FD    NAME=C13,LENGTH=1,PICTURE=2,B'13'
         FD    NAME=C14,LENGTH=1,PICTURE=2,B'14'
         FD    NAME=C15,LENGTH=1,PICTURE=2,B'15'
         FD    NAME=C16,LENGTH=1,PICTURE=2,B'16'
         FD    NAME=C21,LENGTH=1,PICTURE=2,B'21'               @YM00551
         FD    NAME=C26,LENGTH=1,PICTURE=2,B'26'
         FD    NAME=C123,LENGTH=1,PICTURE=3,B'123'             @YM00551
         FD    NAME=C182,LENGTH=1,PICTURE=3,B'182'             @YM00551
         FD    NAME=FA,LENGTH=1,PICTURE=1,'A'
         FD    NAME=FB,LENGTH=2,PICTURE=2,'BC',ACTION=RP
         FD    NAME=FC,LENGTH=3,PICTURE=3,'DEF',ACTION=RP
         FD    NAME=FD,LENGTH=4,PICTURE=4,'GHIJ',ACTION=RP
         FD    NAME=FE,LENGTH=5,PICTURE=5,'KLMNO',ACTION=RP
         FD    NAME=F0,LENGTH=1,PICTURE=1,'0'
         FD    NAME=F1,LENGTH=1,PICTURE=1,'1'
         FD    NAME=F2,LENGTH=2,PICTURE=2,'23',ACTION=RP
         FD    NAME=F3,LENGTH=3,PICTURE=3,'456',ACTION=RP
         FD    NAME=F4,LENGTH=4,PICTURE=4,'7890',ACTION=RP
         FD    NAME=F5,LENGTH=5,PICTURE=5,'12345',ACTION=RP
         FD    NAME=RESV1,LENGTH=1                             @YM04149
         FD    NAME=RESV2,LENGTH=2                             @YM00551
         FD    NAME=RESV3,LENGTH=3                             @YM00551
         FD    NAME=RESV4,LENGTH=4                             @YM00551
         FD    NAME=RESV6,LENGTH=6                             @YM00551
         FD    NAME=RESV8,LENGTH=8                             @YM00551
         FD    NAME=PERFG,LENGTH=2,PICTURE=1,B'2'              @YM04149
         FD    NAME=PTKEY,LENGTH=1,PICTURE=2,B'16'             @YM00551
         FD    NAME=STERMI,LENGTH=1,PICTURE=2,B'32'            @YM00551
         FD    NAME=RECI,LENGTH=2,PICTURE=1,B'0'               @YM00551
         FD    NAME=RELOFF,LENGTH=2,PICTURE=3,B'150'           @YM00551
         FD    NAME=PG,LENGTH=4,PICTURE=2,B'68'                @YM00551
         FD    NAME=JTERMI,LENGTH=1,PICTURE=2,B'32'            @YM00551
         FD    NAME=JOBSER,LENGTH=4,PICTURE=3,B'100'           @YM00551
         FD    NAME=TRANACTV,LENGTH=4,PICTURE=3,B'256'         @YM00551
         CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,ST,OP,R,USERCOMM)
         CREATE NAME=STEPNAME
         CREATE NAME=AUTHOR
         CREATE NAME=(JOBTIME,C1)
         CREATE NAME=(C1,F1)
         CREATE NAME=(STEPTIME,C2)
         CREATE NAME=(C5,FC,F2,C10,F5,FB,F3)
         CREATE NAME=(FLAGS,C1)                                @YM04149
         CREATE NAME=(C0,C0)
         CREATE NAME=(C0,C182,C0,C0,C2,STEPTYPE,TIMESTP,DATE,SID,      *
               JOBNAME,RDSTARTT,RDSTARTD,USERID,C1,STARTIME,STARTDAT,  *
               SYSINCNT,TERMSTAT,STEPPRTY,PROGNAME,STEPNAME,           *
               REGSIZE,CORESYST,COREUSED,RESV6,                        *
               PTKEY,STERMI,RESV2,STARTIME,STARTIME,RESV1,SRBTIME,     *
               RECI,RELOFF,                                    @YM04149*
               C0,C26,TAPECLAS,DEVTYPE,ADDR180,EXCPCNT,                *
               URECLASS,DEVTYPE,ADDR00E,EXCPCNT,                       *
               URECLASS,DEVTYPE,ADDR00C,EXCPCNT,                       *
               C21,STEPTIME,C2,C5,FC,F2,C10,F5,FB,F3,                  *
               PG,PG,PG,PG,PG,PG,PG)                           @YM00551
         CREATE NAME=C12
         CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,ST,OP,R,USERCOMM)
         CREATE NAME=STEPNAME
         CREATE NAME=AUTHOR
         CREATE NAME=(JOBTIME,C1)
         CREATE NAME=(C1,F1)
         CREATE NAME=(STEPTIME,C2)
         CREATE NAME=(C5,FC,F2,C10,F5,FB,F3)
         CREATE NAME=(FLAGS,C2)                                @YM04149
         CREATE NAME=(C0,C0)
         CREATE NAME=(C0,C123,C0,C0,C2,JOBTYPE,TIMESTP,DATE,SID,       *
               JOBNAME,RDSTARTT,RDSTARTD,USERID,C2,STARTIME,STARTDAT,  *
               SYSINCNT,TERMSTAT,JOBPRTY,RDRSTOPT,RDRSTOPD,JTERMI,     *
               SYSOUTCL,CPRSTART,DEVCLASS,DEVTYPE,JOBINCL,             *
               PTKEY,SRBTIME,JOBSER,TRANACTV,RESV4,PERFG,RESV2,        *
               C26,AUTHOR,CPUTIME,C1,C1,F1)
         CREATE NAME=C16
ENDACT  END                                                    @ZA32916
         DSD   OUTPUT=(OUTUSO)
         FD    NAME=JOBNAME,LENGTH=8,FILL=X'40',PICTURE=7,'JOBNAME',   *
               ACTION=TR
         FD    NAME=TIMESTP,LENGTH=4,FORMAT=BI,INDEX=10
         FD    NAME=DATE,LENGTH=4,PICTURE=5,P'19968'
         FD    NAME=SID,LENGTH=4,FILL=X'40',PICTURE=4,'145H'    XL03034
         FD    NAME=USERID,LENGTH=8,FILL=X'40'
         FD    NAME=OP,LENGTH=1,PICTURE=3,B'250'       X'FA'    XL03034
         FD    NAME=RESV,LENGTH=2,PICTURE=1,B'0'                XL03034
         FD    NAME=STEPNUM,LENGTH=4,FORMAT=BI
         FD    NAME=USERCOMM,LENGTH=4,FORMAT=BI,STARTLOC=33    @ZA46423
         FD    NAME=C0,LENGTH=1,PICTURE=1,B'0'
         FD    NAME=C1,LENGTH=1,PICTURE=1,B'1'
         FD    NAME=C2,LENGTH=1,PICTURE=1,B'2'
         FD    NAME=C3,LENGTH=1,PICTURE=1,B'3'
         FD    NAME=C4,LENGTH=1,PICTURE=1,B'4'
         FD    NAME=C5,LENGTH=1,PICTURE=1,B'5'
         CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,C1,OP,RESV,      *
               USERCOMM)
         CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,C2,OP,RESV,      *
               USERCOMM)
         CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,C3,OP,RESV,      *
               USERCOMM)
         CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,C4,OP,RESV,      *
               USERCOMM)
         CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,C5,OP,RESV,      *
               USERCOMM)
ENDUSO  END                                                    @ZA32916
         DSD   OUTPUT=(OUTUJP)
         FD    NAME=JOBNAME,LENGTH=8,FILL=X'40',PICTURE=7,'JOBNAME',   *
               ACTION=TR
         FD    NAME=TIMESTP,LENGTH=4,PICTURE=1,B'0',INDEX=10
         FD    NAME=DATE,LENGTH=4,PICTURE=5,P'19968'
         FD    NAME=SID,LENGTH=4,FILL=X'40',PICTURE=4,'145H'    XL03034
         FD    NAME=USERID,LENGTH=8,FILL=X'40'
         FD    NAME=OP,LENGTH=1,PICTURE=3,B'250'       X'FA'    XL03034
         FD    NAME=RESV,LENGTH=2,PICTURE=1,B'0'                XL03034
         FD    NAME=RESERVED,LENGTH=8,PICTURE=1,B'0'            XL03034
         FD    NAME=STEPNUM,LENGTH=4,FORMAT=BI
         FD    NAME=USERCOMM,LENGTH=4,FORMAT=BI,STARTLOC=33    @ZA46423
         FD    NAME=ACTN,LENGTH=4,PICTURE=4,'ACTN'      26-HASP ACCT
         FD    NAME=CT2,LENGTH=2,PICTURE=2,B'34'        X'0022'
         FD    NAME=CT4,LENGTH=4,PICTURE=2,B'68'        X'00000044'
         FD    NAME=D,LENGTH=4,PICTURE=5,P'72300'       X'0072300C'
         FD    NAME=DEVNAM,LENGTH=8,PICTURE=8,'HDEVNAME' LOG DEV NAME
         FD    NAME=FORM,LENGTH=4,PICTURE=4,'FORM'      FORM #
         FD    NAME=HJBN,LENGTH=4,PICTURE=4,'HJOB'      HASP JOB #
         FD    NAME=HPTY,LENGTH=2,PICTURE=4,B'4144'     X'1020'
         FD    NAME=HSUBID,LENGTH=2,PICTURE=1,B'2'      X'0002'
         FD    NAME=INDIC1,LENGTH=2,PICTURE=5,B'57344'  SECTIONSX'E000'
         FD    NAME=IND26,LENGTH=1,PICTURE=2,B'64'      INDICATOR X'40'
         FD    NAME=JBN,LENGTH=8,PICTURE=8,'JOBNAMES'   JOB NAME
         FD    NAME=JICL,LENGTH=1,PICTURE=1,'A'         JOB CLASS X'01'
         FD    NAME=JOBID,LENGTH=8,PICTURE=8,'STC0HJOB' JOB ID
         FD    NAME=LPP,LENGTH=2,PICTURE=2,B'60'        X'003C'
         FD    NAME=LTS1,LENGTH=2,PICTURE=2,B'60'       X'002C'
         FD    NAME=LTS2,LENGTH=2,PICTURE=2,B'32'       X'0020'
         FD    NAME=LTS3,LENGTH=2,PICTURE=2,B'94'       X'005E'
         FD    NAME=PRGMER,LENGTH=20,PICTURE=20,'PROGRAMMER'S NAME   '
         FD    NAME=PROCDD,LENGTH=8,PICTURE=8,'PROC DD ' PROC DD
         FD    NAME=REC26,LENGTH=1,PICTURE=2,B'26'      TYPE 26, X'1A'
         FD    NAME=RESV2,LENGTH=2                      2 BYTES ZERO
         FD    NAME=RESV4,LENGTH=4                      4 BYTES ZERO
         FD    NAME=ROOM,LENGTH=4,PICTURE=4,'ROOM'      HASP ACCT
         FD    NAME=ROUTE,LENGTH=2,PICTURE=2,B'34'      X'0022'
         FD    NAME=SYS,LENGTH=1,PICTURE=1,B'2'         X'02'
         FD    NAME=T,LENGTH=4,PICTURE=7,B'1122867'     X'00112233'
         FD    NAME=TMUSED,LENGTH=4,PICTURE=3,B'273'    X'00000111'
         FD    NAME=UIF,LENGTH=8,PICTURE=8,'USERIDFD'
         FD    NAME=Z1,LENGTH=1,PICTURE=1,B'0'          1 BYTE ZERO
         CREATE NAME=(JOBNAME,TIMESTP,DATE,SID,USERID,STEPNUM,OP,RESV, *
               USERCOMM)
         CREATE NAME=(SYS,REC26,T,D,SID,JBN,T,D,UIF,      #26        ***
               RESV4,HSUBID,INDIC1,LTS3,RESV2,IND26,JICL,              *
               HJBN,JOBID,PRGMER,JICL,JICL,                            *
               HPTY,HPTY,ROUTE,DEVNAM,ACTN,ROOM,                       *
               TMUSED,CT4,CT4,FORM,CT2,LPP,ROUTE,                      *
               ROUTE,PROCDD,LTS1,RESV2,(COPY=7,T,D),                   *
               LTS2,RESV2,CT4,CT4,CT4,RESV4,(COPY=3,CT4))      @YM04149
ENDUJP  END                                                    @ZA32916
YY                                                             @ZA32916
//TESTING     JOB   MSGLEVEL=1
//JOBLIB DD DSNAME=TESTLIB,VOLUME=SER=231400,UNIT=2314,DISP=(OLD,KEEP) *
//                     *                                               C
//          THIS PROCEDURE WILL EXECUTE TESTEXIT WITH THE SAMPLE SMF   C
//             EXIT ROUTINES.
//       EXEC  PGM=TESTEXIT,
//         PARM='UJV=26,UJI=8,UTL=5,U83=12,ACT=2,U29=2'
//INUJV  DD    DSNAME=DGINPUT(UJV),DCB=(LRECL=80,BLKSIZE=400,RECFM=FB),*
//             DISP=(OLD,PASS),UNIT=2314,VOLUME=SER=231400
//INUJI  DD    DSNAME=DGINPUT(UJI),DCB=(LRECL=80,BLKSIZE=400,RECFM=FB),*
//             DISP=(OLD,PASS),UNIT=2314,VOLUME=SER=231400
//INUSI  DD    DSNAME=DGINPUT(USI),DCB=(LRECL=80,BLKSIZE=400,RECFM=FB),*
//             DISP=(OLD,PASS),UNIT=2314,VOLUME=SER=231400
//INUSO  DD    DSNAME=DGINPUT(USO),DCB=(LRECL=80,BLKSIZE=400,RECFM=FB),*
//             DISP=(OLD,PASS),UNIT=2314,VOLUME=SER=231400
//INUTL  DD    DSNAME=DGINPUT(UTL),DCB=(LRECL=80,BLKSIZE=400,RECFM=FB),*
//             DISP=(OLD,PASS),UNIT=2314,VOLUME=SER=231400
//INU83  DD    DSNAME=DGINPUT(U83),DCB=(LRECL=80,BLKSIZE=400,RECFM=FB),*
//             DISP=(OLD,PASS),UNIT=2314,VOLUME=SER=231400
//INACT  DD    DSNAME=DGINPUT(ACT),DCB=(LRECL=80,BLKSIZE=400,RECFM=FB),*
//             DISP=(OLD,PASS),UNIT=2314,VOLUME=SER=231400
//INUJP  DD    DSNAME=DGINPUT(UJP),DCB=(LRECL=80,BLKSIZE=400,RECFM=FB),*
//             DISP=(OLD,PASS),UNIT=2314,VOLUME=SER=231400
//OUTUJV DD DSNAME=UJV(OUT),UNIT=2314,DISP=(,PASS),                    *
//             SPACE=(TRK,(20,5,1)),VOLUME=SER=231400,                 *
//             DCB=(LRECL=80,BLKSIZE=400,RECFM=FB)
//OUTUJI DD DSNAME=UJI(OUT),UNIT=2314,DISP=(,PASS),                    *
//             SPACE=(TRK,(20,5,1)),VOLUME=SER=231400,                 *
//             DCB=(LRECL=80,BLKSIZE=400,RECFM=FB)
//OUTUSI DD DSNAME=USI(OUT),UNIT=2314,DISP=(,PASS),                    *
//             SPACE=(TRK,(20,5,1)),VOLUME=SER=231400,                 *
//             DCB=(LRECL=80,BLKSIZE=400,RECFM=FB)
//OUTUSO DD DSNAME=USO(OUT),UNIT=2314,DISP=(,PASS),                    *
//             SPACE=(TRK,(20,5,1)),VOLUME=SER=231400,                 *
//             DCB=(LRECL=80,BLKSIZE=400,RECFM=FB)
//OUTUTL DD DSNAME=UTL(OUT),UNIT=2314,DISP=(,PASS),                    *
//             SPACE=(TRK,(20,5,1)),VOLUME=SER=231400,                 *
//             DCB=(LRECL=80,BLKSIZE=400,RECFM=FB)
//OUTU83 DD DSNAME=U83(OUT),UNIT=2314,DISP=(,PASS),                    *
//             SPACE=(TRK,(20,5,1)),VOLUME=SER=231400,                 *
//             DCB=(LRECL=200,BLKSIZE=400,RECFM=FB)
//OUTACT DD DSNAME=ACT(OUT),UNIT=2314,DISP=(,PASS),                    *
//             SPACE=(TRK,(20,5,1)),VOLUME=SER=231400,                 *
//             DCB=(LRECL=200,BLKSIZE=400,RECFM=FB)
//OUTUJP DD DSNAME=UJP(OUT),UNIT=2314,DISP=(,PASS),                    *
//             SPACE=(TRK,(20,5,1)),VOLUME=SER=231400,                 *
//             DCB=(LRECL=80,BLKSIZE=400,RECFM=FB)
//MANX  DD   UNIT=2314,VOLUME=SER=231400,                              *
//             SPACE=(TRK,(5,1)),DSN=MANX,                             *
//             DISP=(NEW,KEEP),DCB=(BLKSIZE=200,LRECL=196)
//SYSPRINT DD SYSOUT=A
//DGPRINT DD SYSOUT=A
//SYSABEND DD SYSOUT=A
