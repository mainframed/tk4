XEQ      TITLE 'HASP EXECUTION SERVICES PROLOG'                @OZ18212
***********************************************************************
*                                                                     *
* MODULE NAME -- HASJES2 (HASPXEQ CSECT)                              *
*                                                                     *
* DESCRIPTIVE NAME -- HASPXEQ CSECT OF JES2 MAIN MODULE               *
*                                                                     *
* COPYRIGHT = NONE                                                    *
*                                                                     *
* STATUS = OS/VS2 MVS   --  SEE &VERSION (BELOW) FOR JES2 LEVEL       *
*                                                                     *
* FUNCTION -- PASS JOBS THROUGH JCL CONVERSION.  SELECT JOBS FOR EXE- *
*             CUTION.  PERFORM SERVICES FOR JOBS IN EXECUTION.  SUP-  *
*             PORT ACCESS TO HELD DATASETS BY CONVERSATIONAL SYSTEMS  *
*             AND BY EXTERNAL WRITERS.                                *
*                                                                     *
* NOTES -- 1)  THE FIVE PROCESSORS IN THIS MODULE ARE INDEPENDENTLY   *
*              DISPATCHED BY THE JES2 DISPATCHER.                     *
*          2)  THE INSTRUCTIONS, CONSTANTS AND LITERALS FOR EACH PRO- *
*              CESSOR ARE CODED CONTIGUOSLY.                          *
*          3)  SEE BELOW                                              *
*                                                                     *
* DEPENDENCIES -- NONE                                                *
*                                                                     *
* RESTRICTIONS -- NONE                                                *
*                                                                     *
* REGISTER CONVENTIONS -- R10 = JCT ADDRESS                           *
*                         R11 = HCT ADDRESS                           *
*                         R12 = PROCESSOR ADDRESSABILITY              *
*                         R13 = PCE ADDRESS                           *
*                       R0-R9 = SEE ENTRY POINT DOCUMENTATION         *
*                                                                     *
* PATCH LABEL -- NONE                                                 *
*                                                                     *
* MODULE TYPE -- PROCESSOR                                            *
*                                                                     *
*    PROCESSOR -- ASSEMBLER F                                         *
*                                                                     *
*    MODULE SIZE = SEE $DLENGTH MACRO EXPANSION(S) AT END OF ASSEMBLY *
*                                                                     *
*    ATTRIBUTES -- READ ONLY, AFTER PROCESSOR AND SUBTASK             *
*                  INITIALIZATION, AND HASP REENTRANT                 *
*                                                                     *
* PROCESSOR ENTRY POINTS -- HASPCNVT = INITIAL ENTRY TO JCL CONVER-   *
*                                      SION PROCESSOR.                *
*                           HASPXEQ  = INITIAL ENTRY TO EXECUTION     *
*                                      PROCESSOR.                     *
*                           HASPHOLD = INITIAL ENTRY TO HOLD QUEUE    *
*                                      PROCESSOR.                     *
*                           HASPTIME = INITIAL ENTRY TO TIME EXCES-   *
*                                      SION PROCESSOR.                *
*                           HASPPSO  = INITIAL ENTRY TO PROCESS SYS-  *
*                                      OUT PROCESSOR.                 *
*                                                                     *
*    PURPOSE -- SEE FUNCTION                                          *
*                                                                     *
*    LINKAGE -- SEE ENTRY POINT DOCUMENTATION                         *
*                                                                     *
*    INPUT -- SEE ENTRY POINT DOCUMENTATION                           *
*                                                                     *
*    OUTPUT -- SEE ENTRY POINT DOCUMENTATION                          *
*                                                                     *
*    EXIT - NORMAL -- SEE ENTRY POINT DOCUMENTATION                   *
*                                                                     *
*    EXIT - ERROR -- SEE ENTRY POINT DOCUMENTATION                    *
*                                                                     *
* EXTERNAL REFERENCES -- SEE BELOW                                    *
*                                                                     *
*   ROUTINES -- SVC 1, SVC 2, SVC 8, SVC 9, SVC 10, SVC 11, SVC 19,   *
*               SVC 20, SVC 35, SVC 41, SVC 42, SVC 62, SVC 120       *
*               $#ADD, $#BLD, $#CKPT, $#JCT, $#PUT, $#REM,            *
*               $$POST, $BFRBLD, $DISTERR, $ERROR, $EXCP,             *
*               $FREBUF, $FRELOK, $GETBUF, $GETLOK, $IOERROR,         *
*               $JCAN, $PGSRVC, $PURGE, $QCKPT, $QGET, $QLOC,         *
*               $QMOD, $QPUT, $QSUSE, $STIMER, $TIME, $TRACK,         *
*               $TTIMER, $WAIT, $WTO, $XMPOST                         *
*                                                                     *
*    DATA AREAS -- SEE $HASPCB MACRO EXPANSION                        *
*                                                                     *
* CONTROL BLOCKS -- SEE $HASPCB MACRO EXPANSION                       *
*                                                                     *
* TABLES -- SEE $HASPCB MACRO EXPANSION                               *
*                                                                     *
* MACROS -- ATTACH, CALL, CLOSE, DELETE, DETACH, ESTAE, FREEMAIN,     *
*           GETMAIN, IDENTIFY, LOAD, OPEN, POST, WAIT, WTO            *
*                                                                     *
* CHANGE ACTIVITY                                                     *
*                                                                     *
*     RELEASE 4.0 = OZ00790,OZ02446,OZ03286,OZ03308,OZ03309,OZ04332,  *
*                   OZ04345,OZ04958,OZ04993,OZ05762,OZ08188,OZ08229,  *
*                   OZ09043,OZ09094,OZ09108                           *
*                                                                     *
*     RELEASE 4.1 = OZ12300,OZ13228,OZ14441,OZ15815,OZ15841           *
*                                                                     *
***********************************************************************
         TITLE 'HASP CONTROL BLOCK GENERATION MACRO'
         SPACE 5
*
*****   $HASPCB   *****       GENERATE HASP CONTROL BLOCKS
*
         SPACE 1
         MACRO
         $HASPCB &DOC=NO,&LIST=NO
         GBLC  &PRINT,&GEN,&DATA
         PUSH  PRINT
         PRINT &PRINT
         $ASVT LIST=&LIST                                      @OZ56448
         $PSA  LIST=&LIST          GENERATE OS PSA DSECT
         $CVT  LIST=&LIST          GENERATE OS CVT DSECT
         $SSOB (SO,CS,JS,RQ,RR),LIST=&LIST  OS SSOB DSECT            R4
         $DCB  LIST=&LIST          GENERATE OS DCB DSECT
         $ACB  LIST=&LIST          GENERATE OS ACB DSECT
         $DEB  LIST=&LIST          GENERATE OS DEB DSECT
         $NEL  LIST=&LIST          GENERATE OS NEL DSECT
         $TEXT LIST=&LIST          GENERATE OS TEXT DSECT
         $KEYS LIST=&LIST          GENERATE OS TEXT KEYS
         $SDWA LIST=&LIST          GENERATE OS SDWA DSECT      @OZ29021
         $TGM  DOC=&DOC            GENERATE HASP TGM DSECT
         $TAB  DOC=&DOC            GENERATE HASP TAB DSECT           R4
         $SVT  DOC=&DOC            GENERATE HASP SSVT DSECT
         $SJB  DOC=&DOC            GENERATE HASP SJB DSECT
         $HCT  DOC=&DOC            GENERATE HASP HCT DSECT
         $PCE  DOC=&DOC            GENERATE HASP PCE DSECT
         $BUFFER DOC=&DOC          GENERATE HASP BUFFER DSECT
         $JQE  DOC=&DOC            GENERATE HASP JQE DSECT
         $JOE  DOC=&DOC            GENERATE HASP JOE DSECT
         $JOT  DOC=&DOC            GENERATE HASP JOT DSECT
         $QSE  DOC=&DOC            GENERATE HASP QSE DSECT
         $JCT  DOC=&DOC            GENERATE HASP JCT DSECT
         $PDDB DOC=&DOC            GENERATE HASP PDDB DSECT
         $IOT  DOC=&DOC            GENERATE HASP IOT DSECT
         $CAT  DOC=&DOC            GENERATE HASP CAT DSECT
         $SCAT DOC=&DOC            GENERATE HASP SCAT DSECT
         $RAT  DOC=&DOC            GENERATE HASP RAT DSECT
         $DCT  DOC=&DOC            GENERATE HASP DCT DSECT
         $TQE  DOC=&DOC            GENERATE HASP TQE DSECT
         $HQR  DOC=&DOC            GENERATE HASP HQR DSECT
         $HQT  DOC=&DOC            GENERATE HASP HQT DSECT
         $PIT  DOC=&DOC            GENERATE HASP PIT DSECT
         $PSO  DOC=&DOC            GENERATE HASP PSO DSECT
         $RDRWORK DOC=&DOC         GENERATE HASP RDRWORK DSECT
         $CNVWORK DOC=&DOC         GENERATE HASP CNVWORK DSECT
         SPACE 1
         POP   PRINT
         PRINT &GEN,&DATA          SET ASSEMBLY PRINT OPTIONS
         MEND
         TITLE 'HASP SJB DE-QUEUE MACRO'
         SPACE 5
*
*****    $DEQSJB   *****           DE-QUEUE AN SJB FROM A QUEUE
*
         SPACE 2
         MACRO
&NAME    $DEQSJB &Q,&NONE
&NAME    BAL   LINK,XSJBLOCK       OBTAIN SJB QUEUES LOCK
         AIF   ('&Q' NE '$SVJPCLS').A
         L     WA,$SVJPCLS         GET FIRST SJB ON QUEUE
         LTR   WA,WA               TEST FOR EMPTY QUEUE
         BZ    &NONE               BR IF NO SJBS QUEUED
         MVC   $SVJPCLS,SJBXQCHN    ELSE DE-QUEUE THE SJB
         MEXIT
.A       LA    WD,&Q                AND DE-QUEUE THE SJB
         BAL   LINK,XDEQSJB          FROM ITS QUEUE
         AIF   ('&NONE' EQ '').END
         BNZ   &NONE               BR IF SJB WAS NO LONGER QUEUED
.END     MEND
         TITLE 'HASP EXECUTION PROCESSORS'
         SPACE 5
HASPXEQ  START 0                   HASP EXECUTION PROCESSORS
         SPACE 5
         COPY  $HASPGEN            COPY HASPGEN PARAMETERS
         TITLE 'HASP CONTROL BLOCKS'
         SPACE 5
HASPXEQ  $ENTRY BASE=,CSECT=YES    PROVIDE PROCESSOR IDENTIFICATION
         SPACE 5
*
*                             SYMBOLIC REGISTER DEFINITIONS
*
         SPACE 2
XL1      EQU   WE                  LINK REGISTER
XL2      EQU   WF                  LINK REGISTER
         EJECT
         SPACE 5
*
*                             DOCUMENTATION OPTIONS FOR THIS ASSEMBLY
*
         SPACE 3
        $SYSPARM (OFF,GEN,NODATA,NO,NO)
         SPACE 5
*
*                             GENERATE HASP CONTROL BLOCKS
*
         SPACE 3
        $HASPCB DOC=&DOC,LIST=&LIST  GENERATE HASP CONTROL BLOCKS
         TITLE 'HASP JCL CONVERSION PROCESSOR -- INITIAL ENTRY POINT'
***********************************************************************
*                                                                     *
* PROCESSOR NAME -- HASPCNVT                                          *
*                                                                     *
* DESCRIPTIVE NAME -- JES2 JCL CONVERSION PROCESSOR                   *
*                                                                     *
* FUNCTION -- INTERFACE WITH OS/VS2 JCL CONVERTER TO PROVIDE JCL      *
*             CONVERSION FOR JOBS PRIOR TO THEIR SELECTION FOR        *
*             EXECUTION.                                              *
*                                                                     *
* NOTES -- 1)  BECAUSE A JES2 PROCESSOR IS NOT ALLOWED TO DIRECTLY    *
*              ISSUE AN OS WAIT, HASPCNVT ATTACHES A SUB-TASK TO      *
*              PERFORM THOSE FUNCTIONS REQUIRING WAITS.  THE SUB-TASK,*
*              HOSCNVT, PERFORMS OS OPENS AND CLOSES OF PROCLIB AND   *
*              CALLS THE OS/VS2 JCL CONVERTER TO CONVERT A JOB'S JCL  *
*              INTO INTERNAL TEXT.                                    *
*                                                                     *
*          2)  AN EXIT ROUTINE, CODED AS PART OF THE SUB-TASK IS      *
*              PROVIDED TO THE OS/VS2 JCL CONVERTER.  THIS EXIT       *
*              ROUTINE, BEGINNING AT XTXTEXIT -                       *
*                                                                     *
*              A)  PROVIDES DSNAMES FOR SUB-SYSTEM DATA SETS          *
*              B)  SUPPORTS THE USE OF 'SYSOUT=*' OR 'SYSOUT=$'       *
*              C)  PROVIDES, IF NECESSARY, A DEFAULT PERFORMANCE      *
*                  GROUP                                              *
*                                                                     *
*          3)  TO IMPROVE THE PERFORMANCE OF THIS PROCESSOR -         *
*                                                                     *
*              A)  PERMANENT STORAGE IS OBTAINED, VIA GETMAIN, TO     *
*                  SERVE AS BUFFER STORAGE FOR THE JCT AND THE IOT    *
*                  OF JOBS BEING PROCESSED.  WHEN THE PROCESSOR IS    *
*                  FORCED TO $WAIT FOR ANOTHER JOB, A PAGE-RELEASE    *
*                  IS PERFORMED FOR THE BUFFERS.                      *
*              B)  IN THE SUB-TASK, HOSCNVT, AN ATTEMPT IS MADE TO    *
*                  KEEP PROCLIB OPENED BETWEEN JOBS.  ONLY WHEN A JOB *
*                  REQUIRES A PROCLIB OTHER THAN THE ONE CURRENTLY    *
*                  OPENED, OR WHEN THE PREVIOUS JOB ENCOUNTERED AN    *
*                  I/O ERROR DURING JCL CONVERSION, IS PROCLIB CLOSED.*
*                                                                     *
* REGISTER CONVENTIONS -- R0  -- WORK REGISTER                        *
*                         R1  -- WORK REGISTER                        *
*                         WA  -- IOT ADDRESS                          *
*                         WB  -- WORK REGISTER                        *
*                         WC  -- WORK REGISTER                        *
*                         WD  -- JQE ADDRESS                          *
*                         WE  -- WORK/LINK REGISTER                   *
*                         WF  -- WORK/LINK REGISTER                   *
*                         WG  -- SSVT ADDRESS                         *
*                         JCT -- JCT ADDRESS                          *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*        H A S P C N V T   I N I T I A L   E N T R Y   P O I N T      *
*                                                                     *
***********************************************************************
         SPACE 2
         USING IOTDSECT,WA         PROVIDE IOT ADDRESSABILITY
         USING JQEDSECT,WD         PROVIDE JQE ADDRESSABILITY
         USING $SVDSECT,WG         PROVIDE SSVT ADDRESSABILITY
         SPACE 2
HASPCNVT $ENTRY BASE=BASE2         PROVIDE PROCESSOR ENTRY POINT
         SPACE 1
***********************************************************************
*                                                                     *
*        C O M P U T E   S T O R A G E   R E Q U I R E M E N T        *
*                                                                     *
***********************************************************************
         SPACE 1
         LH    R1,$BUFLENG         GET TOTAL SINGLE BUFFER SIZE      R4
         LR    WA,R1               TENTATIVE ADDR OF NEXT BUFFER     R4
         LR    R0,WA               R0 = STARTING ADDR OF NEXT BUFFER
         SRL   R0,12                DIVIDED BY 4K
         ALR   R1,WA               R1 = ADDRESS OF LAST BYTE
         BCTR  R1,0                 OF NEXT BUFFER
         SRL   R1,12                 DIVIDED BY 4K
         CLR   R0,R1               DOES BUFFER CROSS 4K BOUNDARY...
         BE    *+10                BR IF NO TO USE TENTATIVE BFR ADDR
         SLL   R1,12                ELSE USE NEXT 4K BOUNDARY AS
         LR    WA,R1                 STARTING ADDR OF NEXT BUFFER
         LR    WB,WA               SAVE RELATIVE ADDR OF NEXT BUFFER
         AH    WA,$BUFLENG         R0 = TOTAL BUFFER STORAGE         R4
         LA    R0,4095(,WA)         REQUIREMENT ROUNDED
         SRL   R0,12                 UP TO NEXT
         SLL   R0,12                  4K BOUNDARY
         ST    R0,XCBFRSIZ         SAVE BUFFER STORAGE REQUIREMENT
         EJECT
***********************************************************************
*                                                                     *
*        G E T   P E R M A N E N T   B U F F E R   S T O R A G E      *
*                                                                     *
***********************************************************************
         SPACE 1
         GETMAIN RC,LV=(0),BNDRY=PAGE  THEN GET THE STORAGE
         LTR   R15,R15             TEST FOR SUCCESSFUL GETMAIN
         BZ    XCGOTKOR            BR IF SO
X03     $ERROR                      ELSE CRUMP
         SPACE 1
XCGOTKOR LR    JCT,R1              ASSIGN FIRST BUFFER TO JCT
         ALR   WB,R1               ASSIGN SECOND BUFFER TO IOT
         ST    WB,JPCEIOT          SAVE IOT BUFFER ADDRESS
         OI    JPCESTAT,JPCERLSE   INDICATE PAGE(S) RELEASED
         L     WG,$SSVT            THEN GET SSVT ADDRESS
         B     XCJGET               AND BR TO PROCESS
         SPACE 1
XCBFRSIZ DC    A(*-*)              TOTAL PERMANENT BUFFER STORAGE
         TITLE 'HASP JCL CONVERSION PROCESSOR -- MAIN JOB WAIT'
         CNOP  0,8
XCPGRLSE TM    JPCESTAT,JPCERLSE   DID WE RELEASE JCT/IOT PG(S) YET...
         BO    XCJWAIT             BR IF SO
         SPACE 1
***********************************************************************
*                                                                     *
*        P A G E - R E L E A S E   P E R M A N E N T   S T O R A G E  *
*                                                                     *
***********************************************************************
         SPACE 1
        $PGSRVC RLSE,(JCT),XCBFRSIZ RELEASE JCT/IOT BUFFER PAGE(S)   R4
         OI    JPCESTAT,JPCERLSE   INDICATE PAGE(S) RELEASED
         SPACE 1
***********************************************************************
*                                                                     *
*        W A I T   F O R   A   J O B                                  *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
XCJWAIT $WAIT  JOB,INHIBIT=NO      $WAIT FOR JOB TO BE QUEUED
         SPACE 1
XCJGET  $QGET  $XEQ,XCPGRLSE       GET A CONVERSION JOB (IF ANY)
         LR    WD,R1               SAVE JQE ADDRESS
        $ACTIVE                    INDICATE PROCESSOR ACTIVE         R4
         NI    JPCESTAT,255-JPCEINIT  RESET INITIATOR FLAG
         TM    JPCESTAT,JPCERLSE   HAS BUFFER STORAGE BEEN RELEASED...
         BZ    XCRDJCT             BR IF NO
         NI    JPCESTAT,255-JPCERLSE  RESET PAGE-RELEASED FLAG
        $BFRBLD (JCT)              BUILD IOB WITHIN JCT BUFFER
        $BFRBLD JPCEIOT            BUILD IOB WITHIN IOT BUFFER
         TITLE 'HASP JCL CONVERSION PROCESSOR -- READ THE JCT'       R4
***********************************************************************
*                                                                     *
*        R E A D   I N   T H E   J C T                                *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
XCRDJCT  NI    JPCESTAT,255-JPCEJCT  INDICATE NO JCT YET             R4
         MVI   JCTJQE+3,1            INDICATE NO JQE YET             R4
         MVI   PCEDEVTP,PCEDARD    INDICATE READ REQUEST TO $EXCP
         LR    WA,JCT              RE-LOAD BUFFER ADDRESS FOR XCREAD
         L     WB,JQETRAK          GET THE JCT TRACK ADDRESS
         BAL   XL2,XCREAD           AND READ IN THE JCT
         L     R0,$JOBQPTR         GET ADDRESS OF HASP JOB QUEUE
         AL    R0,JCTJQE           ADD JQE OFFSET FROM JCT
         CLR   R0,WD               TEST JCT VALIDITY
         BNE   XCDISTR             BR IF INVALID TO ABORT JOB
        $TIME                      GET CURRENT TIME
         OI    JPCESTAT,JPCEJCT    INDICATE VALID JCT
         STM   R0,R1,JCTCNVON      SET CONVERSION ENTRY TIME AND DATE
*              THIS LINE DELETED BY APAR OZ58008               @OZ58008
         L     R0,$SID             SET
         ST    R0,JCTCPUID          CURRENT
         ST    R0,JCTCVSID           SYSTEM ID
         OC    JCTPDDBO,JCTPDDBO   IF 1ST TIME
         BNZ   XCTSTATT             THROUGH JCL CONVERSION,    @OZ36864
         MVC   JCTPDDBO,JCTPDDBK     SET DD NUMBER OF 1ST OUTPUT PDDB
*                                  THIS LINE DELETED BY APAR   @OZ36864
*                                  THIS LINE DELETED BY APAR   @OZ36864
*                                  THIS LINE DELETED BY APAR   @OZ36864
         TITLE 'HASP JCL CONVERSION PROCESSOR -- SUB-TASK ATTACH'
XCTSTATT TM    JPCESTAT,JPCESUBT   TEST FOR INTERFACE SUB-TASK      R41
         BO    XCRDIOT             BR IF ALREADY ATTACHED
         ICM   WA,15,$CNVTCBA      GET ADDRESS OF SUB-TASK'S TCB
         BNZ   XCDETACH            BR IF SUB-TASK ABENDED
      IDENTIFY EPLOC=XCCNVNAM,ENTRY=HOSCNVT  SUB-TASK ENTRY POINT
         B     XCATTACH            BR TO ATTACH SUB-TASK
         SPACE 1
***********************************************************************
*                                                                     *
*        D E T A C H   H O S C N V T   ( A B E N D E D )              *
*                                                                     *
***********************************************************************
         SPACE 1
XCDETACH WAIT  ECB=$PCNVECB        WAIT FOR SUB-TASK TO TERMINATE
        DETACH $CNVTCBA            DETACH ABENDED SUB-TASK
         SPACE 1
***********************************************************************
*                                                                     *
*        ( R E ) - A T T A C H   H O S C N V T                        *
*                                                                     *
***********************************************************************
         SPACE 1
XCATTACH MVI   $PCNVECB,0          CLEAR SUB-TASK RETURN CODE
         MVC   JCTWORK(XCCNVNAM-XCATLST),XCATLST  MOVE ATTACH PARM LIST
         LR    R1,SAVE             PASS PCE ADDRESS IN PARAMETER REG
        ATTACH ECB=$PCNVECB,MF=(E,(1)),SF=(E,JCTWORK)  ATTACH SUB-TASK
         ST    R1,$CNVTCBA         SAVE THE SUB-TASK TCB ADDRESS
        $WAIT  WORK                THEN $WAIT FOR SUB-TASK TO $$POST US
         MVI   $SVCNV,0            RESET $$POST ELEMENT
         OI    JPCESTAT,JPCESUBT   SHOW SUB-TASK IS ATTACHED
         B     XCRDIOT              AND BR TO READ THE IOT(S)
         EJECT
         SPACE 5
XCATLST ATTACH EPLOC=XCCNVNAM,SM=SUPV,SF=L
XCCNVNAM DC    CL8'HOSCNVT'        JCL CONVSERSION SUB-TASK ENTRY
         TITLE 'HASP JCL CONVERSION PROCESSOR -- IOT READ/CREATE'
***********************************************************************
*                                                                     *
*        R E A D   I N   T H E   I O T ( S )                          *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
XCRDIOT  L     WA,JPCEIOT          GET BUFFER ADDRESS FOR 1ST IOT
         SLR   R0,R0               SHOW NO ADDITIONAL
         ST    R0,IOTIOT            IOT(S)
         L     WB,JCTIOT           GET TRACK ADDRESS OF 1ST IOT
         BAL   XL1,XCGETIOT         AND READ IN THE IOT
         SPACE 1
XCIOTNXT L     WB,IOTIOTTR         GET TRACK ADDR OF NEXT IOT
         LTR   WB,WB               TEST FOR VALID CHAIN FIELD
         BZ    XCIOTTRK            BR IF END OF IOT CHAIN
         LR    WC,WA                ELSE SAVE ADDRESS OF THIS IOT
        $GETBUF XCNIOTBF             AND GET BUFFER FOR NEXT   @OZ69283
         LR    WA,R1               RE-LOAD BUFFER ADDRESS
         ST    WA,IOTIOT-IOTDSECT(,WC)  CHAIN TO THIS IOT
         BAL   XL1,XCGETIOT        THEN READ IN THE NEXT IOT
         B     XCIOTNXT             AND GO CHECK FOR MORE
         EJECT                                                 @OZ69283
*************************************************************  @OZ69283
*                                                           *  @OZ69283
*        L O C A L   B U F F E R   S H O R T A G E          *  @OZ69283
*                                                           *  @OZ69283
*************************************************************  @OZ69283
         SPACE 1                                               @OZ69283
XCNIOTBF XC    IOTIOT,IOTIOT       MARK LAST IN CORE IOT       @OZ69283
         L     R2,JPCEIOT          GET FIRST IOT ADDRESS       @OZ69283
         L     R2,IOTIOT           GET FIRST GM'D IOT ADDR     @OZ69283
         LA    R4,1                INITIALIZE BUFFER COUNT     @OZ69283
         SPACE 1                                               @OZ69283
XCFREIOT LTR   R1,R2               COUNT AND FREE INCORE IOTS  @OZ69283
         BZ    XCIOTRD              THEN COUNT IOT'S ON SPOOL  @OZ69283
         LA    R4,1(,R4)           COUNT THIS IOT              @OZ69283
         L     R2,IOTIOT           GET NEXT IOT ADDRESS        @OZ69283
        $FREEBUF (R1)              GO FREE CURRENT IOT         @OZ69283
         B     XCFREIOT            DO AGAIN                    @OZ69283
         SPACE 1                                               @OZ69283
XCIOTRD  L     R2,JPCEIOT          USE GM'D IOT TO READ        @OZ69283
         BAL   R6,XCGETIOT          IOT'S FROM SPOOL           @OZ69283
         ICM   R3,15,IOTIOTTR      GET NEXT IOT ADDRESS        @OZ69283
         BZ    XCNBFMSG            FINISHED IF NO MORE         @OZ69283
         LA    R4,1(,R4)           COUNT THIS IOT              @OZ69283
         B     XCIOTRD              AND GO READ NEXT           @OZ69283
         EJECT                                                 @OZ69283
*************************************************************  @OZ69283
*                                                           *  @OZ69283
*        I S S U E   M S G   A N D   H O L D   J O B        *  @OZ69283
*                                                           *  @OZ69283
*************************************************************  @OZ69283
         SPACE 1                                               @OZ69283
XCNBFMSG MVC   JCTWORK-JCTDSECT(L'MSG183,R10),MSG183 GET MSG   @OZ69283
         CVD   R4,$DOUBLE              CONVERT IOT COUNT       @OZ69283
         UNPK  $DOUBLE(5),$DOUBLE+5(3) UNPACK IT               @OZ69283
         OI    $DOUBLE+4,X'F0'         MAKE IT PRINTABLE       @OZ69283
         MVC   JCTWORK-JCTDSECT+45(4,R10),$DOUBLE+1            @OZ69283
         LH    R4,$NUMBUF              GET BUFFER COUNT        @OZ69283
         CVD   R4,$DOUBLE              CONVERT IT              @OZ69283
         UNPK  $DOUBLE(5),$DOUBLE+5(3) UNPACK IT               @OZ69283
         OI    $DOUBLE+4,X'F0'         MAKE IT PRINTABLE       @OZ69283
         MVC   JCTWORK-JCTDSECT+60(4,R10),$DOUBLE+1            @OZ69283
        $WTO   JCTWORK,L'MSG183,JOB=YES,ROUTE=$MAIN+$LOG,      @OZ69283X
               CLASS=$ACTION                                   @OZ69283
        $QSUSE                     ENQUEUE ON SHARED RESOURCE  @OZ69283
         OI    JQEFLAGS-JQEDSECT(R5),QUEHOLD1   MARK JOB HELD  @OZ69283
         NI    JQEFLAGS-JQEDSECT(R5),FF-QUEBUSY  & AVAILABLE   @OZ69283
        $QCKPT (R5)                RE-WRITE JQE                @OZ69283
         B     XCRET               EXIT                        @OZ69283
         SPACE 2                                               @OZ69283
MSG183  $MSG   183,' HELD, BUFFER SHORTAGE DURING CONVERSION - NNNN REQX
               UIRED, NNNN DEFINED'                            @OZ69283
         EJECT                                                 @OZ69283
         SPACE 1
***********************************************************************
*                                                                     *
*        G E T   N E W   T R A C K   F O R   1 S T   I O T            *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
XCIOTTRK DS    0H                                              @OZ52430
         ST    WB,IOTIOT           TERMINATE MEMORY CHAIN      @OZ52430
         L     WA,JPCEIOT          GET NEW TRACK               @OZ52430
        $TRACK IOTMSTAB             FOR 1ST IOT                      R4
         ST    R1,IOTTRACK         STORE TRACK ADDRESS FOR THE IOT
         ST    R1,JCTIOT           STORE ALSO IN THE JCT
         L     R1,$IOTPDDB                   KILL                    R4
         LA    R1,IOTPDBOJ(R1,WA)             INPUT JCL              R4
         OI    PDBFLAG1-PDBDSECT(R1),PDB1NSOT  PRINT                 R4
         EJECT
***********************************************************************
*                                                                     *
*        I N I T I A L I Z E   N E L   ' R D R '   P A R M S          *
*                                                                     *
***********************************************************************
         SPACE 1
         LA    R15,JPCENEL         GET ADDRESS OF NEL
         SPACE 1
         USING NELDSECT,R15        PROVIDE NEL ADDRESSABILITY
         SPACE 1
         LA    R1,JCTJMR           GET POINTER TO JMR
         ST    R1,NELJMR            AND STORE IN NEL
         IC    R1,JCTJCLAS         GET JOB CLASS FROM JCT
         N     R1,=A(X'3F')        ISOLATE RELATIVE CAT ENTRY NO.
         SLL   R1,5                MULTIPLY BY CAT ENTRY LENGTH
         AL    R1,$CATABLE         ADD ADDRESS OF FIRST CAT
         SPACE 1
         USING CATDSECT,R1         PROVIDE CAT ADDRESSABILITY
         SPACE 1
         MVC   NELOPSWT,CATOPSWT   MOVE SMF OPTION BYTE
         MVC   NELPARMO(L'CATCONVP),CATCONVP  MOVE 'RDR' DEFAULTS
         MVC   NELMSGCL,JCTMCLAS   MOVE DEFAULT MESSAGE CLASS
         SPACE 1
         DROP  R1,R15              KILL CAT, NEL ADDRESSABILITY
         SPACE 1
***********************************************************************
*                                                                     *
*        P O S T   H O S C N V T                                      *
*                                                                     *
***********************************************************************
         SPACE 1
XCPOST   POST  $CNVECB             POST THE SUB-TASK
        $WAIT  WORK                THEN $WAIT FOR SUB-TASK TO $$POST US
         MVI   $SVCNV,0            RESET $$POST ELEMENT
         TITLE 'HASP JCL CONVERSION PROCESSOR -- SUB-TASK RETURN'
***********************************************************************
*                                                                     *
*        T E S T   H O S C N V T   C O M P L E T I O N   S T A T U S  *
*                                                                     *
***********************************************************************
         SPACE 1
*              THIS LINE DELETED BY APAR OZ58008               @OZ58008
         TM    JPCESTAT,JPCEAOPN   TEST FOR SUCCESSFUL 'FAKE-OPEN'
         BO    XCCHKPT             BR IF SO
         SPACE 1
***********************************************************************
*                                                                     *
*        A L E R T   O P E R A T O R   O F   W A I T                  *
*                                                                     *
***********************************************************************
         SPACE 1
XCTWTO  $WTO   XCTIMMSG,L'XCTIMMSG,JOB=NO,WAIT=YES,ROUTE=$LOG+$MAIN,   C
               CLASS=$ALWAYS,PRI=$HI  WARN OPERATOR OF WAIT CONDITION
         LA    R1,JPCETQE          GET ADDRESS OF PCE TQE
         LA    R0,30               SET TIME INTERVAL
         ST    R0,ITIME(,R1)        IN TQE
         ST    SAVE,IPOST(,R1)     STORE PCE ADDRESS IN TQE
        $STIMER (R1)               CHAIN THIS TQE
        $WAIT  WORK                 AND WAIT FOR INTERVAL TO ELAPSE
         B     XCPOST               AND GO TO TRY CONVERSION AGAIN
         SPACE 2
XCTIMMSG $MSG  305,'CONVERSION PROCESSOR AWAITING STORAGE'
      TITLE 'HASP JCL CONVERSION PROCESSOR -- CHECKPOINT PROCESSING'
         CNOP  0,8
XCCHKPT  MVI   PCEDEVTP,PCEDAWR    INDICATE WRITE REQUEST TO $EXCP
         SPACE 1
***********************************************************************
*                                                                     *
*        G E T   T R A C K   F O R   O U T P U T   J C T              *
*                                                                     *
***********************************************************************
         SPACE 1
XCJCTTRK L     WA,JPCEIOT          GET ADDRESS OF 1ST IOT
        $TRACK IOTMSTAB            GET TRACK FOR OUTPUT JCT          R4
         LR    WC,R1               SAVE OUTPUT JCT TRACK ADDRESS
         SPACE 1
***********************************************************************
*                                                                     *
*        C H E C K P O I N T   1 S T   I O T                          *
*                                                                     *
***********************************************************************
         SPACE 1
XCKPTIOT L     WB,IOTTRACK         GET TRACK ADDRESS OF IOT
         NI    IOTFLAG1,255-IOT1CKPT  RESET CHECKPOINT FLAG
         ST    WA,PCEBUFAD         SET BUFFER ADDRESS FOR $EXCP
         ST    WB,PCESEEK          SET TRACK ADDRESS FOR $EXCP
         LA    R1,PCEDADCT         GET DIRECT ACCESS DCT ADDRESS
        $EXCP  (R1)                INITIATE CHECKPOINT OF IOT
         EJECT
***********************************************************************
*                                                                     *
*        C H E C K P O I N T   T H E   O U T P U T   J C T            *
*                                                                     *
***********************************************************************
         SPACE 1
XCPUTJCT $TIME                     GET CURRENT TIME AND DATE
         STM   R0,R1,JCTCNVOF       AND STORE IN JCT
         ST    JCT,PCEBUFAD        SET BUFFER ADDRESS FOR $EXCP
         ST    WC,PCESEEK          SET TRACK ADDRESS FOR $EXCP
         LA    R1,PCEDADCT         GET DIRECT ACCESS DCT ADDRESS
        $EXCP  (R1)                INITIATE CHECKPOINT OF JCT
         SPACE 1
***********************************************************************
*                                                                     *
*        V A L I D A T E   I O T   A N D   J C T   W R I T E S        *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
XCIWAIT $WAIT  IO                  WAIT FOR I/O TO COMPLETE
         CLI   PCEBUFCT,0          TEST FOR OUTSTANDING WRITES
         BNE   XCIWAIT             BR IF SO
         SPACE 1
         TM    BUFECBCC-BUFDSECT(JCT),X'7F'  TEST JCT WRITE
         BM    XCJCTTRK            BR IF ERROR WRITING THE JCT
         TM    BUFECBCC-BUFDSECT(WA),X'7F'  TEST IOT WRITE
         BO    XCTSUTST            BR IF WRITE SUCCESSFUL
        $TRACK IOTMSTAB             ELSE GET NEW TRACK FOR IOT       R4
         ST    R1,IOTTRACK         STORE TRACK ADDRESS FOR THE IOT
         ST    R1,JCTIOT           STORE ALSO IN THE JCT
         B     XCKPTIOT            THEN RE-CHECKPOINT JCT AND IOT
         EJECT
         CNOP  0,8
XCTSUTST TM    JCTJOBFL,JCTTSUJB   IF NOT A LOGON,
         BZ    XCFREEBF             BR TO FREE EXTRA IOT BUFFERS
         LA    R0,JCTCOK           IF JOB WILL
         CL    R0,JCTCNVRC          FLUSH ANYWAY,
         BNE   XCFREEBF              BR TO FREE EXTRA IOT BUFFERS
         SPACE 1
***********************************************************************
*                                                                     *
*        T E S T   F O R   D U P L I C A T E   L O G O N   J O B      *
*                                                                     *
***********************************************************************
         SPACE 1
        $QSUSE                     REQUEST ACCESS TO CHECKPOINT DATA
         L     WE,=V($QINDEX)             PREPARE
         LA    R1,CATTSUCL-(255-QUECLASS)  TO SCAN
         IC    R1,0(R1,WE)                  LOGON
         LA    R1,$JQHEADS-2-QUECHAIN(R1)    QUEUE
         SPACE 1
XCTSUNXT LH    R1,QUECHAIN(,R1)    GET OFFSET
         N     R1,=X'0000FFFF'      OF NEXT JQE
         BZ    XCFREEBF            BR IF END OF LOGON QUEUE
         SLL   R1,2                 ELSE CONVERT OFFSET
         AL    R1,$JOBQPTR           TO ABSOLUTE ADDRESS
         CLC   JQEJNAME,QUEJNAME(R1)  IF NOT DUPLICATE,
         BNE   XCTSUNXT                BR TO TEST NEXT JQE
         LA    R0,JCTCDUPL              ELSE INDICATE
         ST    R0,JCTCNVRC               DUPLICATE JOB NAME
         B     XCPUTJCT                   AND BR TO RE-WRITE THE JCT
         SPACE 1                                               @OZ36864
***********************************************************************
*                                                                     *
*        F R E E   D Y N A M I C   I O T   B U F F E R S              *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
XCFREEBF L     WA,IOTIOT           GET ADDRESS OF NEXT IOT
XCFREEB1 LTR   R1,WA               TEST FOR VALID BUFFER ADDR  @OZ26708
         BZ    XCREQJOB            BR IF NO TO RE-QUEUE THE JOB
         L     WA,IOTIOT           GET NEXT BUFFER POINTER     @OZ26708
        $FREEBUF (R1)               ELSE FREE INPUT IOT BUFFER
         B     XCFREEB1            THEN LOOP                   @OZ26708
        TITLE 'HASP JCL CONVERSION PROCESSOR -- TERMINATION PROCESSING'
***********************************************************************
*                                                                     *
*        R E - Q U E U E   T H E   J O B                              *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
XCREQJOB $QSUSE                    REQUEST ACCESS TO CHECKPOINT DATA
         IC    R0,JCTJCLAS         GET JOB CLASS FROM JCT
         TM    JCTJOBFL,JCTTSUJB+JCTSTCJB  IF LOGON OR STARTED TASK,
         BNZ   XCQPUT1                      ALWAYS QUEUE FOR XEQ
         TM    JCTJOBFL,JCTTSCAN   TEST 'JCL SCAN' OPTION
         BO    XCNOXEQ             BR IF JOB TO BYPASS EXECUTION
         TM    JQEFLAGS,QUEPURGE   HAS JOB BEEN CANCELLED...
         BO    XCNOXEQ             BR IF SO
         CLC   JCTCNVRC,$ZEROS     TEST CONVERTER RETURN CODE  @OZ75411
         BNE   XCNOXEQ             BR IF CONVERSION FAILED     @OZ75411
         LM    R1,WA,JPCEXBNM      GET XBM NAME, IF ANY        @OZ33423
         ALR   R1,WA               TEST FOR XBM NAME           @OZ33423
         BNZ   XCQPUT2             XBM JOB, DON'T TEST HOLD    @OZ75411
         TM    JCTJBOPT,JCTTHOLD+JCTSETUP JOB SPECIFIED        @OZ33423
         BZ    XCQPUT2              'TYPRUN=HOLD',             @OZ75411
        $WTO   XHELDMSG,L'XHELDMSG,  ISSUE 'JOB HELD' $WTO           R4C
               JOB=YES,ROUTE=$LOG+$MAIN,                             R4C
               CLASS=$NORMAL,PRI=$ST                                 R4
        $QSUSE                     RE-ESTABLISH QUEUE CONTROL        R4
         OI    JQEFLAGS,QUEHOLD1   SET HOLD FLAG IN JQE              R4
        $QCKPT (WD)                INSURE CKPT OF CHANGE       @OZ45766
         IC    R0,JCTJCLAS         RELOAD JOB CLASS FROM JCT         R4
         B     XCQPUT2             QUEUE FOR EXECUTION         @OZ75411
         SPACE 1                                               @OZ75411
*              THIS LINE DELETED BY APAR OZ75411             * @OZ75411
*              THIS LINE DELETED BY APAR OZ75411             * @OZ75411
         EJECT                                                 @OZ36864
***************************************************************@OZ36864
*                                                              @OZ36864
*        Q U E U E   J O B   F O R   O U T P U T               @OZ36864
*                                                              @OZ36864
*        IF ANY DATA SETS ARE TO BE HELD OR SPUN, THE JOB      @OZ36864
*        QUEUE AND JOT MUST BE UPDATED FOR ALL CHANGES WITHIN  @OZ36864
*        THE SAME QUEUE CONTROL INTERVAL. THIS REQUIREMENT     @OZ36864
*        EXISTS TO ENSURE THAT, IF THE SYSTEM SHOULD FAIL ANY  @OZ36864
*        TIME DURING THE PROCESSING OF THE SPIN/HOLD REQUESTS, @OZ36864
*        THE JOB CAN BE REQUEUED FOR CONVERSION PROCESSING BY  @OZ36864
*        THE WARM START PROCESSOR WITHOUT REGARD FOR PARTIAL   @OZ36864
*        CONVERSION PROCESSING OF THE JOB.                     @OZ36864
*                                                              @OZ36864
*        THE FOLLOWING ROUTINES ARE DEPENDENT ON THE FACT THAT @OZ36864
*        ALL JES2 DASD-RESIDENT CONTROL BLOCKS CREATED OR      @OZ36864
*        ALTERED BY THE CONVERSION PROCESSOR ARE ADDRESSABLE   @OZ36864
*        ONLY VIA A NEW JCT, WHOSE ADDRESS IS NOT PLACED IN    @OZ36864
*        THE JQE UNTIL ALL CONVERSION PROCESSING HAS BEEN      @OZ36864
*        COMPLETED.                                            @OZ36864
*                                                              @OZ36864
***************************************************************@OZ36864
         SPACE 1                                               @OZ36864
         USING HQTDSECT,WE         PROVIDE HQT ADDRESSABILITY  @OZ36864
         USING PDBDSECT,WF         PROVIDE PDDB ADDRESSABILITY @OZ36864
         SPACE 1                                               @OZ36864
XCNOXEQ  SLR   WE,WE               CLEAR HQT ADDRESS           @OZ36864
         SLR   WB,WB               CLEAR HELD DATA SET COUNT   @OZ36864
         TM    JQEFLAGS,QUEPURGE   HAS JOB BEEN CANCELLED...   @OZ72571
         BO    XCNFRIOT            BRANCH IF YES               @OZ72571
         LA    WA,$SVXIOTQ-(IOTIOT-IOTDSECT) PREPARE TO SCAN Q @OZ36864
         SPACE 1                                               @OZ36864
XCNNIOT1 ICM   WA,15,IOTIOT        POINT TO NEXT SPIN IOT      @OZ36864
         BZ    XCNVTHQT            BR IF END OF CHAIN          @OZ36864
         LR    WF,WA               RELOAD IOT ADDRESS          @OZ36864
         AL    WF,$IOTPDDB         POINT TO SPIN/HOLD PDDB     @OZ36864
         LTR   WE,WE               HAVE AN HQT YET...          @OZ36864
         BNZ   XCNVHOLD            BR IF YES                   @OZ36864
        $GETBUF WAIT=YES           GET BUFFER FOR HQT          @OZ36864
         LR    WE,R1               RELOAD BUFFER ADDRESS       @OZ36864
         MVC   HQTID,=CL4'HQT'     SET HQT ID                  @OZ36864
         MVC   HQTLENG,$BUFLENG    SET BUFFER LENGTH           @OZ36864
         MVI   HQTFLAG1,HQT1HQT1   INDICATE FIRST HQT          @OZ36864
         MVI   HQTFLAG2,0          RESET ALL FLAGS             @OZ36864
         MVC   HQTJBKEY,IOTJBKEY   SET SECURITY KEY            @OZ36864
         MVC   HQTHQT,$ZEROS       INDICATE LAST HQT           @OZ36864
         LA    R1,HQTHQR-HQTDSECT  GET OFFSET OF FIRST HQR     @OZ36864
         ST    R1,HQTHQRP           AND SAVE IT                @OZ36864
         MVC   PCESEEK,IOTHQT1     SET TRACK ADDRESS FOR $EXCP @OZ36864
         EJECT                                                 @OZ36864
***************************************************************@OZ36864
*                                                              @OZ36864
*        ADD HQR TO HQT FOR HELD DATA SET.  IF THE DATA SET IS @OZ36864
*        PRINTABLE, INCREMENT A COUNT OF THE HELD DATA SETS.   @OZ36864
*                                                              @OZ36864
*        THIS ROUTINE ASSUMES THAT THE HELD DATA SET IOTS ARE  @OZ36864
*        IN FIFO SEQUENCE AND THAT NO HELD DATA SETS HAVE BEEN @OZ36864
*        CREATED FOR THIS JOB BY ANY PRIOR PROCESSING.         @OZ36864
*                                                              @OZ36864
***************************************************************@OZ36864
         SPACE 1                                               @OZ36864
         USING HQRDSECT,R1         PROVIDE HQR ADDRESSABILITY  @OZ36864
         SPACE 1                                               @OZ36864
XCNVHOLD L     R1,HQTHQRP          GET OFFSET OF NEXT HQR SLOT @OZ36864
         ALR   R1,WE               CONVERT OFFSET TO ADDRESS   @OZ36864
         MVC   HQRIOT,IOTTRACK     SET IOT TRACK ADDRESS       @OZ36864
         MVC   HQRIOTTR,IOTIOTTR   SET NEXT IOT TRACK ADDRESS  @OZ36864
         MVC   HQRPDDB,PDBDSECT    COPY PDDB                   @OZ36864
         MVC   HQRCRDT,JCTCDTOF    SET CREATION DATE           @OZ36864
         MVI   HQRSTAT,0           RESET FLAG BITS             @OZ36864
         TM    PDBFLAG1,PDB1NULL+PDB1NSOT DATA SET PRINTABLE...@OZ36864
         BZ    XCNVHADD            BR IF YES                   @OZ36864
         OI    HQRSTAT,HQRUNHLD    TREAT DATA SET AS RELEASED  @OZ36864
         B     XCNVHQRN            BR TO CONTINUE              @OZ36864
         SPACE 1                                               @OZ36864
XCNVHADD LA    WB,1(,WB)           INCREMENT HOLD COUNT        @OZ36864
         SPACE 1                                               @OZ36864
XCNVHQRN LA    R1,HQRLENG(,R1)     POINT TO NEXT HQR           @OZ36864
         SLR   R1,WE               REDUCE ADDRESS TO OFFSET    @OZ36864
         ST    R1,HQTHQRP           AND SAVE IN HQT            @OZ36864
         B     XCNNIOT1            BR TO PROCESS NEXT IOT      @OZ36864
         SPACE 1                                               @OZ36864
XCNVTHQT LTR   WE,WE               HQT CREATED...              @OZ36864
         BZ    XCNFRIOT            BR IF NO                    @OZ36864
         ST    WE,PCEBUFAD         SET BUFFER ADDR FOR $EXCP   @OZ36864
         LA    R1,PCEDADCT         GET DIRECT ACCESS DCT ADDR  @OZ36864
        $EXCP  (R1),WAIT=YES       WRITE THE HQT               @OZ36864
        $FREEBUF (WE)              FREE HQT BUFFER             @OZ36864
         SPACE 1                                               @OZ36864
         DROP  R1,WE               KILL HQR, HQT ADDRESSABILITY@OZ36864
         EJECT                                                 @OZ36864
***************************************************************@OZ36864
*                                                              @OZ36864
*        FREE ALL SPIN/HOLD DATA SET IOTS                      @OZ36864
*                                                              @OZ36864
***************************************************************@OZ36864
         SPACE 1                                               @OZ36864
XCNFRIOT L     WA,$SVXIOTQ         POINT TO FIRST SPIN IOT     @OZ36864
         MVC   $SVXIOTQ,$ZEROS     CLEAR QUEUE HEAD            @OZ36864
         SPACE 1                                               @OZ36864
XCNNIOT5 LTR   R1,WA               RELOAD IOT ADDRESS          @OZ36864
         BZ    XCNVOUT             BR IF END OF CHAIN          @OZ36864
         LH    R0,IOTLENG          GET BUFFER LENGTH           @OZ36864
         ICM   R0,8,=AL1(231)      SET SUBPOOL NUMBER          @OZ36864
         L     WA,IOTIOT           POINT TO NEXT IOT           @OZ36864
         FREEMAIN R,LV=(0),A=(1)   FREE CURRENT IOT            @OZ36864
         B     XCNNIOT5            BR TO FREE NEXT IOT         @OZ36864
         SPACE 1                                               @OZ36864
         DROP  WF                  KILL PDDB ADDRESSABILITY    @OZ36864
         SPACE 1                                               @OZ36864
***************************************************************@OZ36864
*                                                              @OZ36864
*        QUEUE JOB FOR OUTPUT                                  @OZ36864
*                                                              @OZ36864
***************************************************************@OZ36864
         SPACE 1                                               @OZ36864
XCNVOUT $QSUSE                     OBTAIN ACCESS TO CKPT DATA  @OZ36864
         SLL   WB,4                SHIFT HELD DATA SET COUNT   @OZ36864
         STH   WB,JQEHLDCT          AND STORE IN JQE           @OZ36864
         MVI   JQEPRIO,FF          SET EXPRESS PRIORITY        @OZ36864
         NI    JQEFLAGS,FF-QUEHOLD1  RESET HOLD FLAG           @OZ72571
         ST    WC,JQETRAK          SET NEW JCT TRACK ADDRESS   @OZ36864
        $QMOD  (WD),$OUTPUT        QUEUE THE JOB FOR OUTOUT    @OZ36864
         B     XCRET               THEN TERMINATE PROCESSING   @OZ36864
         EJECT                                                 @OZ36864
***********************************************************************
*                                                                     *
*        Q U E U E   J O B   F O R   E X E C U T I O N                *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
XCQPUT1  NI    JQEFLAG2,255-QUEINDAF  RESET IND MODE INDICATOR
         TM    JPCESTAT,JPCEINIT   IF NOT A VS2 INITIATOR,
         BZ    XCQPUT2              BR TO QUEUE JOB FOR EXECUTION
         OI    JQEFLAG2,QUEINIT      OR FIRST INDICATE JOB IS INIT
         SPACE 1
XCQPUT2  N     R0,=A(QUECLASS)     ENSURE VALID QUEUE TYPE
         ST    WC,JQETRAK          SET NEW JCT TRACK ADDRESS         R4
        $QPUT  (WD),(R0)           THEN QUEUE JOB FOR EXECUTION
         SPACE 1
***********************************************************************
*                                                                     *
*        J O B   R E - Q U E U E D   - -   T E R M I N A T E          *
*                                                                     *
***********************************************************************
         SPACE 1
XCRET   $DORMANT                   SHOW PROCESSOR INACTIVE
         MVC   PCEJQE,$ZEROS       CLEAR JQE ADDRESS           @OZ32566
         B     XCJGET              THEN BR TO GET ANOTHER JOB
         SPACE 2                                                     R4
XHELDMSG $MSG  101,'HELD'          'JOB HELD' MESSAGE                R4
 TITLE 'HASP JCL CONVERSION PROCESSOR -- CONTROL BLOCK I/O ROUTINES'
***********************************************************************
*                                                                     *
*        R E A D   T H E   I O T                                      *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
XCGETIOT BAL   XL2,XCREAD          READ THE IOT
         SPACE 1
***********************************************************************
*                                                                     *
*        V A L I D A T E   T H E   I O T                              *
*                                                                     *
***********************************************************************
         SPACE 1
         CLC   IOTJBKEY,JCTJBKEY   TEST IOT VALIDITY
         BER   XL1                 RETURN IF VALID
         B     XCDISTR              ELSE TAKE CORRECTIVE ACTION
         SPACE 1
         SPACE 1
***********************************************************************
*                                                                     *
*        C O N T R O L   B L O C K   R E A D   R O U T I N E          *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
XCREAD   ST    WA,PCEBUFAD         SET BUFFER ADDRESS FOR $EXCP
         ST    WB,PCESEEK          SET TRACK ADDRESS FOR $EXCP
         LA    R1,PCEDADCT         GET DIRECT ACCESS DCT ADDRESS
        $EXCP  (R1),WAIT=YES       READ CONTROL BLOCK                R4
         BOR   XL2                 RETURN IF SUCCESSFUL              R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        E R R O R   R E A D I N G   A   C O N T R O L   B L O C K    *
*                                                                     *
***********************************************************************
         SPACE 1
XCDISTR $DISTERR                   CAUSE DISAST. ERR MSG TO BE WRITTEN
         TM    JPCESTAT,JPCEJCT    TEST FOR VALID JCT
         BZ    XCNOJCT             BR IF NO
         XC    IOTIOT,IOTIOT       CLEAR IOT CHAIN FIELD             R4
         LA    R0,JCTCABND         GET ABEND RETURN CODE
         ST    R0,JCTCNVRC          AND STORE IN JCT
         L     WC,JQETRAK          GET TRACK ADDRESS OF INPUT JCT
         L     WA,JPCEIOT          GET ADDRESS OF 1ST IOT
         B     XCFREEBF             AND BR TO RE-QUEUE THE JOB
         SPACE 1
XCNOJCT  MVI   JCTJOBFL,0          SET FLAGS TO BYPASS EXECUTION
        $QSUSE                     REQUEST ACCESS TO CHECKPOINT DATA R4
         L     WC,JQETRAK          GET CURRENT JCT TRACK ADDRESS     R4
         LA    R0,$PURGE           INDICATE PURGE QUEUE
         LH    WB,=H'10000'        IF USER
         CH    WB,JQEJOBNO          JOB,
         BH    XCQPUT2               PURGE IT
         LA    R0,CATSTCCL         IF
         ALR   WB,WB                STARTED
         CH    WB,JQEJOBNO           TASK
         BH    XCQPUT1                OR
         LA    R0,CATTSUCL             LOGON,
         B     XCQPUT1                  QUEUE JOB FOR EXECUTION
         SPACE 1
         DROP  WA,WD,WG,BASE2      KILL ADDRESSABILITY         @OZ36864
         SPACE 2                                               @OZ36864
         LTORG                                                 @OZ36864
         TITLE 'HASP JCL CONVERSION PROCESSOR -- CONVERSION SUB-TASK INC
               ITIALIZATION'
***********************************************************************
*                                                                     *
*        H O S C N V T   I N I T I A L   E N T R Y   P O I N T        *
*                                                                     *
***********************************************************************
         SPACE 1
HOSCNVT  $ENTRY BASE=R15           HASP JCL CONVERSION SUB-TASK
         LR    BASE2,R15           RELOAD BASE ADDRESS         @OZ36864
         SPACE 1
         DROP  SAVE,R15            KILL ADDRESSABILITY
         USING HOSCNVT,BASE2       SET SUBTASK ADDRESSABILITY  @OZ36864
         USING PCEDSECT,BASE3      PROVIDE SUB-TASK PCE ADDRESSABILITY
         SPACE 1
         LR    BASE3,R1            RELOAD ATTACHER'S PCE ADDRESS
         STCM  SAVE,7,JPCESAVE+1   SAVE ADDRESS OF SYSTEM PROVIDED AREA
         L     BASE1,PCEBASE1      GET HCT ADDRESS             @OZ36864
         LA    R2,4(,SAVE)         PROVIDE WORK AREA ADDRESS
         MVC   0(XCNVSTLN,R2),XCNVABND  MOVE ESTAE PARAM LIST
         ESTAE XCNVSTAE,PARAM=(BASE3),MF=(E,(R2))  PROVIDE RCVY@OZ29021
         LA    R0,JPCEDDNM                    CLEAR BULK
         LA    R1,JCLPCEWS-(JPCEDDNM-PCEWORK)  OF CONVERSION
         SLR   R3,R3                            PROCESSOR
         MVCL  R0,R2                             WORK AREA
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        I N I T I A L I Z E   N E L   A D D R E S S E S              *
*                                                                     *
***********************************************************************
         SPACE 1
         LA    R5,JPCENEL          GET ADDRESS OF NEL
         SPACE 1
         USING NELDSECT,R5         PROVIDE NEL ADDRESSABILITY
         SPACE 1
         LA    R0,JPCEQMPA         GET ADDRESS OF QMPA
         ST    R0,NELQMPA           AND STORE IN NEL
         LA    R0,XCNVXLST         GET ADDRESS OF CONVERTER EXIT LIST
         ST    R0,NELEXLST          AND STORE IN NEL
         LA    R0,JPCECOM          GET ADDRESS OF CONSOLE ID FIELD
         ST    R0,NELCOMID          AND STORE IN NEL
         LA    R0,JPCETXT          GET ADDRESS OF INTERNAL TEXT ACB
         ST    R0,NELTXTCB          AND STORE IN NEL
         LA    R0,JPCEMSG          GET ADDRESS OF JCL MESSAGES ACB
         ST    R0,NELMSGCB          AND STORE IN NEL
         LA    R0,JPCEJCL          GET ADDRESS OF JCL ACB
         ST    R0,NELJCLCB          AND STORE IN NEL
         LA    R0,JPCEJCLI         GET ADDRESS OF STATEMENT IMAGE ACB
         ST    R0,NELSTMCB          AND STORE IN NEL
         MVC   JPCEPROC(XCNVDCBL),XCNVDCB  FILL IN PROCLIB DCB
         OI    JPCEPROC+DCBOPTCD-DCBDSECT,DCBSRCHD  SET SEARCH DIRECT
         LA    R0,JPCEPROC         STORE PROCLIB DCB ADDRESS
         ST    R0,JPCEDCB           IN PROCLIB OPEN LIST
         MVC   JPCEDCB(1),XCNVOPNL MOVE OPTION BYTE TO OPEN LIST
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        C R E A T E   ' F A K E - O P E N E D '   A C B S            *
*                                                                     *
***********************************************************************
         SPACE 1
         MVC   JPCEJCL(XCNVACBL),XCNVACB  FILL IN JCL ACB
         MVC   JPCEJCLI(3*XCNVACBL),JPCEJCL  AND REST OF ACBS
         LA    R5,JPCEJCL-XCNVACBL PREPARE TO CHAIN TOGETHER
         LA    R0,JPCEDEBS          ACBS AND DEBS
         LA    R1,4                COUNT OF ACBS
         SPACE 1
         USING ACBDSECT,R5         PROVIDE ACB ADDRESSABILITY
         USING DEBDSECT,R3         PROVIDE DEB ADDRESSABILITY
         SPACE 1
XCNVACBS LA    R5,XCNVACBL(,R5)    GET ADDRESSES OF NEXT
         LR    R3,R0                ACB AND CORRESPONDING DEB
         ST    R3,ACBDEB-1         CHAIN DEB TO ACB
         ST    R5,DEBDCBAD          AND ACB TO DEB
         MVI   DEBDEBID,X'0F'      MOVE IN DEB IDENTIFIER BYTE
         LA    R0,DEBBASND         CHAIN NEXT DEB
         ST    R0,DEBDEBAD          TO CURRENT DEB
         BCT   R1,XCNVACBS         LOOP THRU ALL ACBS
         SPACE 1
         ST    R1,DEBDEBAD         ZERO CHAIN FIELD IN LAST DEB
         OI    ACBMACR1,ACBUBF+ACBIN  UPDATE MACRF FIELD
         LA    R5,JPCEJCL                IN JCL ACB AND IN
         MVI   ACBMACR1,ACBADR+ACBSEQ+ACBIN  INTERNAL TEXT ACB
         LA    R5,JPCEMSG          INDICATE ASA CONTROL CHARACTER
         MVI   ACBCCTYP,ACBCCASA    IN SYSTEM MESSAGES ACB
         MVI   JPCEQMPA,237        SUB-POOL NO. FOR CONVERTER GETMAINS
         SPACE 1
***********************************************************************
*                                                                     *
*        L O A D   O S / V S 2   J C L   C O N V E R T E R            *
*                                                                     *
***********************************************************************
         SPACE 1
XCNVLOAD LOAD  EPLOC=XCNVNAME      LOAD OS/VS2 JCL CONVERTER
         ST    R0,XCNVRTER          AND SAVE ITS ADDRESS
         L     R5,$SSVT            GET ADDRESS OF SSVT
         SPACE 1
         DROP  R3                  KILL DEB ADDRESSABILITY
         USING $SVDSECT,R5         PROVIDE SSVT ADDRESSABILITY
         SPACE 1
         MVC   XJSSNAME(4),$SVSSNM MOVE SUB-SYSTEM NAME TO DSNAME
         CNOP  4,8                 ALIGN XCNVWAIT ON DOUBLE-WORD
         BAL   XL1,XCNVPOST        GO WAKE UP HASP
         TM    $STATUS,$SYSEXIT    IS HASP BEING TERMINATED..  @OZ18424
         BO    XCNVRET             BR IF YES                   @OZ18424
         TITLE 'HASP JCL CONVERSION PROCESSOR -- CONVERSION SUB-TASK MAC
               IN PROCESSING'
***********************************************************************
*                                                                     *
*        W A I T   F O R   A   J O B                                  *
*                                                                     *
***********************************************************************
         SPACE 1
XCNVWAIT WAIT  ECB=$CNVECB         WAIT FOR HASP TO PASS US A JOB
         TM    $STATUS,$SYSEXIT    IS HASP BEING TERMINATED...
         BO    XCNVRET             BR IF YES
         L     JCT,PCEJCT          GET ADDRESS OF JCT
         L     WC,$IOTPDDB              PRESET OFFSET                R4
         LA    WC,IOTPDBOD-PDBLENG(,WC)  OF 1ST PDDB                 R4
         XC    JPCEXBNM,JPCEXBNM   SET FOR NORMAL JOB
         TM    JCTJBOPT,JCTXBACH   TEST FOR BATCHING JOB
         BZ    XCNVFOPN            BR IF NO
         L     R1,$PITABLE         PREPARE TO SCAN PITS              R4
         SPACE 1
         USING PITDSECT,R1         PROVIDE PIT ADDRESSABILITY
         SPACE 1
         CNOP  0,8
XCNVPIT  TM    PITSTAT,PITBUSY     TEST FOR ACTIVE PIT               R4
         BZ    XCNVPITN            BR IF NO
         L     WA,PITSJB            ELSE GET SJB ADDRESS FROM PIT
         SPACE 1
         USING SJBDSECT,WA         PROVIDE SJB ADDRESSABILITY
         SPACE 1
         CLC   JCTJOBID,SJBJOBID   TEST FOR JOB ID MATCH
         BE    XCNVXBJB            BR IF SO
         SPACE 1
XCNVPITN L     R1,PITNEXT          POINT TO NEXT PIT                 R4
         LTR   R1,R1               TEST PIT ADDRESS                  R4
         BNZ   XCNVPIT             BR IF VALID                       R4
         ST    R1,JCTCNVRC          ELSE INDICATE                    R4
         OI    JPCESTAT,JPCEAOPN     NORMAL RETURN                   R4
         B     XCNVPOST               AND BR TO BYPASS CONVERSION    R4
         SPACE 1
         CNOP  2,8                                                   R4
XCNVXBJB MVC   JPCEXBNM,SJBXBJNM   MOVE JOB/PROC NAME TO PCE
         L     WC,$IOTPDDB         RESET OFFSET                      R4
         SL    WC,=A(PDBLENG)       OF 1ST PDDB                      R4
         SPACE 1
         DROP  R1,WA               KILL CTL BLOCK ADDRESSABILITY
         EJECT
***********************************************************************
*                                                                     *
*        ' F A K E   O P E N '   T H E   A C B ' S                    *
*                                                                     *
***********************************************************************
         SPACE 1
XCNVFOPN L     R15,$SVCOPN         GET ADDRESS OF ACB OPEN ROUTINE   R4
         NI    JPCESTAT,255-JPCEAOPN  RESET ACB OPEN FLAG
         CALL  (15)                    AND 'FAKE OPEN' THE ACB'S
         BNZ   XCNVPOST            BR IF OPEN NOT SUCCESSFUL
         OI    JPCESTAT,JPCEAOPN    ELSE SHOW SUCCESSFUL OPEN
         CLI   JCTPROCN,0          BR IF PROCLIB               @OZ38058
         BNE   XCNVPROT             SPECIFIED ON /*JOBPARM     @OZ38058
         IC    R1,JCTJCLAS         DETERMINE                   @OZ38058
         N     R1,=A(X'3F')         ADDRESS                    @OZ38058
         SLL   R1,5                  OF THE                    @OZ38058
         AL    R1,$CATABLE            CAT                      @OZ38058
         MVC   JCTPROCN,=CL8'PROC'                 BUILD       @OZ38058
         MVC   JCTPROCN+4(2),CATPROCN-CATDSECT(R1)  DDNAME     @OZ38058
XCNVPROT DS    0H                                              @OZ38058
         CLC   JPCEDDNM,JCTPROCN   TEST NEW PROCLIB DDNAME
         BE    XCNVCNV             BR IF SAME AS LAST JOB
         CLOSE MF=(E,JPCEDCB)      CLOSE THE PROCLIB DATA SET
         SPACE 1
***********************************************************************
*                                                                     *
*        O P E N   P R O C L I B   D A T A   S E T                    *
*                                                                     *
***********************************************************************
         SPACE 1
XCNVPROC MVC   DCBDDNAM-DCBDSECT+JPCEPROC,JCTPROCN  MOVE IN DDNAME
         MVC   JPCEDDNM,JCTPROCN   SAVE NEW PROCLIB DDNAME
         OPEN  MF=(E,JPCEDCB)      OPEN THE PROCLIB DATA SET
         LA    R2,JPCEPROC         ASSUME SUCCESSFUL OPEN
         ST    R2,NELPROCB-NELDSECT+JPCENEL  OF PROCLIB
         TM    DCBOFLGS-DCBDSECT+JPCEPROC,DCBOFOPN  TEST OPEN STATUS
         BO    XCNVALID            BR IF SUCCESSFUL
         MVC   XCNVMSG(XOPNERRL),XOPNERR  MOVE ERROR MESSAGE
         MVC   XCNVMSG+XOPNERRL-12(8),JCTPROCN  FILL IN DDNAME
        $$WTO  XCNVMSG             ISSUE MESSAGE TO OPERATOR        R41
         CLC   JCTPROCN,=CL8'PROC00'  WAS THIS THE PRIMARY PROCLIB...
         MVC   JCTPROCN,=CL8'PROC00'  CHANGE NAME FOR OPEN IN CASE NO
         BNE   XCNVPROC            BR IF A SECONDARY PROCLIB
         MVI   JPCEDDNM,0          ENSURE NEXT JOB RE-OPENS PROCLIB
         XC    NELPROCB-NELDSECT+JPCENEL,NELPROCB-NELDSECT+JPCENEL
         B     XCNVCNV              AND GO TO CALL CONVERTER
         EJECT
***********************************************************************
*                                                                     *
*        V A L I D A T E   P R O C L I B   B L K S I Z E              *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
XCNVALID LH    R1,DCBBLKSI-DCBDSECT+JPCEPROC  GET PROCLIB BLKSIZE
         LTR   R1,R1               TEST FOR ZERO BLKSIZE
         BZ    XCNVBAD             BR IF SO
         LA    R3,80               LRECL REQUIRED BY CONVERTER
         CH    R3,DCBLRECL-DCBDSECT+JPCEPROC  TEST PROCLIB LRECL
         BNE   XCNVBAD             BR IF NOT VALID LRECL
         SLR   R0,R0               ZERO R0 FOR DIVIDE
         DR    R0,R3               DIVIDE BLKSIZE BY LRECL
         LTR   R0,R0               TEST FOR REMAINDER
         BZ    XCNVCNV             BR IF VALID LRECL AND BLKSIZE
         SPACE 1
***********************************************************************
*                                                                     *
*        P R O C L I B   L R E C L / B L K S I Z E   I N V A L I D    *
*                                                                     *
***********************************************************************
         SPACE 1
XCNVBAD  MVC   XCNVMSG(XIOERRLN),XIOERROR  MOVE ERROR MESSAGE
         MVC   XCNVMSG+XIOERRLN-12(8),JPCEDDNM  FILL IN DDNAME
        $$WTO  XCNVMSG             ISSUE MESSAGE TO OPERATOR        R41
         MVI   JPCEDDNM,0          ENSURE NEXT JOB RE-OPENS PROCLIB
         XC    NELPROCB-NELDSECT+JPCENEL,NELPROCB-NELDSECT+JPCENEL
         SPACE 1                                                     R4
***********************************************************************
*                                                                     *
*        L I N K   T O   J C L   C O N V E R T E R                    *
*                                                                     *
***********************************************************************
         SPACE 1
XCNVCNV  L     WB,JPCEIOT          GET ADDRESS OF 1ST IOT
         STM   WB,WC,XIOTADDR      SAVE FOR INTERNAL TEXT EXIT
         L     R15,XCNVRTER        GET ADDRESS OF OS JCL CONVERTER
         CALL  (15),MF=(E,JPCENEL)  AND LINK TO IT
         ST    R15,JCTCNVRC        SAVE CONVERTER RETURN CODE
         LA    R0,JCTCIO           TEST FOR SUCCESSFUL
         CLR   R0,R15               JCL CONVERSION
         BH    XCNVWRAP            BR IF YES                         R4
         MVI   JPCEDDNM,0           ELSE INSURE PROCLIB RE-OPENED
         EJECT                                                       R4
XCNVWRAP SLR   R0,R0               CLEAR REGISTER 0
         ICM   R0,8,JPCEQMPA       INSERT SWA-CREATE SUBPOOL NUMBER
      FREEMAIN R,SP=(0)            FREE ANY AREAS OBTAINED BY CONVERTER
         SPACE 1
***********************************************************************
*                                                                     *
*        ' F A K E   C L O S E '   T H E   A C B ' S                  *
*                                                                     *
***********************************************************************
         SPACE 1
         SLR   R0,R0               ASSUME ZERO RETURN CODE
         CL    R0,JCTCNVRC         TEST ASSUMPTION
         BE    XCNVFCLS            BR IF VALID
         TM    JCTJOBFL,JCTSTCJB+JCTTSUJB  TEST JOB TYPE
         BNZ   XCNVFCLS            BR IF LOGON OR STARTED TASK
         L     R0,JCTCNVRC          ELSE LOAD RETURN CODE
         SPACE 1
         CNOP  0,8
XCNVFCLS L     R15,$SVCCLS         GET ADDRESS OF ACB CLOSE ROUTINE
         CALL  (15)                 AND 'FAKE CLOSE' THE ACB'S
         SPACE 1
***********************************************************************
*                                                                     *
*        A L E R T   H A S P   T H A T   W E   A R E   R E A D Y      *
*                                                                     *
***********************************************************************
         SPACE 1
XCNVPOST MVI   $CNVECB,0           CLEAR ECB
        $$POST ELMT=$SVCNV,R11=HCT  POST PROCESSOR AND WAKE UP HASP
         BR    XL1                 RETURN TO CALLER
         TITLE 'HASP JCL CONVERSION PROCESSOR -- CONVERSION SUB-TASK TEC
               RMINATION'
***********************************************************************
*                                                                     *
*        T E R M I N A T E   H O S C N V T                            *
*                                                                     *
***********************************************************************
         SPACE 1
XCNVRET  CLOSE MF=(E,JPCEDCB)      CLOSE THE PROCLIB DATA SET
        DELETE EPLOC=XCNVNAME      DELETE OS JCL CONVERTER
         L     R15,$SVCCLS         GET ADDRESS OF ACB CLOSE ROUTINE
         OI    JPCESJBP,X'80'      INDICATE 'PERMANENT' CLOSE OF ACB'S
         SLR   R0,R0               DISALLOW HELD DATA SET SPINOFF
         CALL  (15)                 AND 'FAKE CLOSE' THE ACB'S
         ESTAE 0                   CANCEL ESTAE                @OZ78621
         SVC   3                   THEN RETURN TO SYSTEM
         EJECT                                                       R4
        $MID   306                 PROCLIB ERROR MESSAGE NUMBER      R4
XIOERROR WTO   '&MID.INVALID LRECL OR BLKSIZE ON XXXXXXXX',          R4C
               ROUTCDE=(2),DESC=(4),MF=L                       @OZ30033
XIOERRLN EQU   *-XIOERROR          LENGTH OF I/O ERROR MESSAGE       R4
         SPACE 2                                                     R4
        $MID   307                 OPEN ERROR MESSAGE NUMBER         R4
XOPNERR  WTO   '&MID.UNABLE TO OPEN XXXXXXXX',                       R4C
               ROUTCDE=(2),DESC=(4),MF=L                       @OZ30033
XOPNERRL EQU   *-XOPNERR           LENGTH OF OPEN ERROR MESSAGE      R4
         SPACE 1                                                     R4
         AIF   ('&PRINT' NE 'OFF').NOGEN1                           R41
         PUSH  PRINT                                                R41
         PRINT NOGEN
.NOGEN1  SPACE 1                                                    R41
XCNVOPNL OPEN  XCNVDCB,MF=L        MODEL DCB OPEN LIST
         SPACE 1
XCNVDCB  DCB   DSORG=PO,MACRF=R,RECFM=FB     MODEL DCB
XCNVDCBL EQU   *-XCNVDCB           LENGTH OF MODEL DCB
         SPACE 1
XCNVACB  ACB   MACRF=(ADR,SEQ,OUT)           MODEL ACB
XCNVACBL EQU   *-XCNVACB           LENGTH OF MODEL ACB
         SPACE 1
XCNVABND ESTAE ,CT,PURGE=NONE,ASYNCH=YES,TERM=NO,MF=L          @OZ29021
XCNVSTLN EQU   *-XCNVABND          LENGTH OF ESTAE PARAMETER LIST
         SPACE 1
         AIF   ('&PRINT' NE 'OFF').NOGEN2                           R41
         POP   PRINT                                                R41
.NOGEN2  SPACE 1                                                    R41
XCNVNAME DC    CL8'IEFVH1'         NAME OF OS JCL CONVERTER
XCNVRTER DS    A                   ADDRESS OF JCL CONVERTER
         SPACE 1
XCNVXLST DC    0D'0',H'16,0',F'0'  CONVERSION EXIT LIST HEADER RECORD
         DC    AL1(NELEXADD,NELTXTEX,0,0),A(XTXTEXIT)  POST-SCAN EXIT
         SPACE 1
         DROP  R5                  KILL SSVT ADDRESSABILITY
         TITLE 'HASP JCL CONVERSION PROCESSOR -- CONVERSION SUB-TASK STC
               AE ROUTINE'
***********************************************************************
*                                                                     *
*        H O S C N V T   E S T A E   R O U T I N E                    *
*                                                                     *
***********************************************************************
         SPACE 1
         USING XCNVSTAE,R15        PROVIDE LOCAL ADDRESSABILITY@OZ29021
         SPACE 1                                               @OZ29021
XCNVSTAE L     BASE2,=A(HOSCNVT)   GET NORMAL BASE             @OZ43309
         SPACE 1                                               @OZ29021
         DROP  R15                 KILL LOCAL ADDRESSABILITY   @OZ29021
         SPACE 1                                               @OZ29021
         BAL   XL1,XCNVSINT        SET UP ESTAE ENVIRONMENT    @OZ29021
         LA    R2,4(,SAVE)         PROVIDE WORK AREA ADDRESS   @OZ29021
         MVC   0(XCNVSTLN,R2),XCNVABND  MOVE ESTAE PARM LIST   @OZ29021
         ESTAE XCNVSTAR,PARAM=(BASE3),MF=(E,(R2))  PROVIDE RCVY@OZ29021
         NI    JPCESTAT,255-JPCESUBT  SUBTASK MUST BE REATTACHED     R4
         OI    JPCESTAT,JPCEAOPN   FORCE PROCESSOR TO PROCEED        R4
*                                  STATEMENT DELETED BY APAR   @OZ29021
         MVC   XCNVMSG(XABNDMSL),XABNDMSG  MOVE MSG TO WORK    @OZ30033
        $$WTO  XCNVMSG             ISSUE MESSAGE TO OPERATOR   @OZ30033
         MVC   JCTCNVRC,=A(JCTCABND)  MOVE ABEND RETURN CODE TO JCT
         L     WA,JPCEIOT          GET ADDRESS OF 1ST IOT
         AL    WA,$IOTPDDB         POINT TO 1ST PDDB                 R4
*              THIS LINE DELETED BY APAR                     * @OZ69105
         NI    PDBFLAG1-PDBDSECT+IOTPDBOL(WA),255-PDB1LOG            R4
         OI    JPCESJBP,X'80'      INDICATE 'PERMAMENT' CLOSE OF ACB'S
         L     R5,$SSVT            GET ADDR OF SUB-SYSTEM VECTOR TABLE
         SR    R6,R6               GET MESSAGE                 @OZ69105
         IC    R6,JCTMCLAS          CLASS                      @OZ69105
         LA    R6,$SVSCAT-SSVT(R5,R6) ADDRESS SCAT ENTRY       @OZ69105
         TM    SCATFLAG-SCADSECT(R6),SCATDUMM IF MSGCLASS DMY  @OZ69105
         BO    *+8                 LEAVE JCL PRINT OFF         @OZ69105
         NI    PDBFLAG1-PDBDSECT+IOTPDBOJ(WA),FF-PDB1NSOT      @OZ69105
         BAL   XL1,XCNVWRAP        GO TO WRAP UP SUB-TASK PROCESSING
         EJECT                                                 @OZ69105
XCNVSRET CLOSE MF=(E,JPCEDCB)      CLOSE THE PROCLIB DATASET   @OZ29021
        DELETE EPLOC=XCNVNAME      DELETE OS JCL CONVERTER
         MODESET EXTKEY=ZERO       RESTORE KEY 0 FOR EXIT      @OZ29021
         LR    LINK,R4             RESTORE RETURN ADDRESS
         SLR   R15,R15             INDICATE NO RETRY ROUTINE
         BR    LINK                 AND RETURN
        TITLE 'HASP JCL CONVERSION PROCESSOR -- ESTAE RECOVERY ROUTINE'
*************************************************************  @OZ29021
*                                                              @OZ29021
*        XCNVSTAR -- ROUTINE TO RECOVER FROM XCNVSTAE ABEND    @OZ29021
*                                                              @OZ29021
*************************************************************  @OZ29021
         SPACE 1                                               @OZ29021
         USING XCNVSTAR,R15        PROVIDE LOCAL ADDRESSABILITY@OZ29021
         SPACE 1                                               @OZ29021
XCNVSTAR L     BASE2,=A(HOSCNVT)   GET NORMAL BASE             @OZ43309
         SPACE 1                                               @OZ29021
         DROP  R15                 KILL LOCAL ADDRESSABILITY   @OZ29021
         SPACE 1                                               @OZ29021
         BAL   XL1,XCNVSINT        SET UP ESTAE ENVIRONMENT    @OZ29021
         SLR   XL1,XL1             CLEAR R6 FOR ICM            @OZ74673
         ICM   XL1,B'0111',JPCESJBP+1 IF SJB EXISTS, INSURE    @OZ74673
         BZ    XCNVCONT               SDBS ARE DECHAINED FOR   @OZ74673
         MVC   SJBSDB-SJBDSECT(,XL1),$ZEROS  NEXT CONVERSION.  @OZ74673
XCNVCONT BAL   XL1,XCNVPOST        $$POST JES2 MAIN TASK       @OZ74673
         B     XCNVSRET            AND BR TO EXIT FROM ESTAE   @OZ29021
         SPACE 1                                               @OZ29021
XCNVSINT LR    BASE3,R2            ASSUME PCE ADDRESS IN R2    @OZ29021
         C     R0,=F'12'           IF NO SDWA,                 @OZ29021
         BE    *+8                 BR AROUND NEXT INSTRUCTION  @OZ29021
         L     BASE3,SDWAPARM-SDWA(,R1)  GET PCE ADDR FROM SDWA@OZ29021
         LR    R4,LINK             SAVE ESTAE RETURN ADDRESS   @OZ29021
         LM    JCT,BASE1,PCEJCT    LOAD JCT, HCT ADDRESSES     @OZ29021
         L     SAVE,JPCESAVE       PROVIDE SAVE AREA FOR EXIT  @OZ29021
         MODESET EXTKEY=HASP       SET JES2 PROTECT KEY        @OZ29021
         BR    XL1                 RETURN TO CALLER            @OZ29021
         SPACE 1                                               @OZ29021
        $MID   302                 SUB-TASK ABEND MESSAGE NUMBER
XABNDMSG WTO   '&MID.CONVERSION SUB-TASK ABENDED',                     C
               ROUTCDE=(2),DESC=(4),MF=L                       @OZ30033
XABNDMSL EQU   *-XABNDMSG          LENGTH OF ABEND ERROR MSG   @OZ30033
         TITLE 'HASP JCL CONVERSION PROCESSOR -- CONVERSION SUB-TASK INC
               TERNAL TEXT EXIT'
***********************************************************************
*                                                                     *
*        C O N V E R T E R   E X I T   R O U T I N E                  *
*                                                                     *
***********************************************************************
         SPACE 1
         USING XTXTEXIT,R15        PROVIDE EXIT ADDRESSABILITY
         SPACE 1
         CNOP  0,8
XTXTEXIT STM   R1,BASE1,24(R13)    SAVE CALLER'S REGISTERS           R4
         L     BASE1,=V(HASP)      GET HCT ADDRESS                   R4
         L     BASE3,$JCLPCE       GET PCE ADDRESS                   R4
         L     JCT,PCEJCT          GET JCT ADDRESS                   R4
         L     R1,0(,R1)           GET ADDRESS OF INTERNAL TEXT
         SPACE 1
         USING TXTDSECT,R1         PROVIDE TEXT PREFIX ADDRESSABILITY
         SPACE 1
         TM    STRINDCS,EXECSTR    TEST FOR 'EXEC' STATEMENT
         BO    XEXEC               BR IF YES                         R4
         TM    STRINDCS,JOBSTR     TEST FOR 'JOB' STATEMENT          R4
         BO    XJCLJOB             BR IF YES                         R4
         TM    STRINDCS,DDSTR      TEST FOR 'DD' STATEMENT           R4
         BZ    XJCLEXIT            RETURN IF NO                      R4
         TM    STRDINDC,DTXSYSIN   TEST FOR 'SYSIN'                  R4
         BO    XJCLDATA            BR IF YES                         R4
         TM    STRDINDC,DTXSYOUT   TEST FOR 'SYSOUT'                 R4
         BO    XJCLOUT             BR IF YES                         R4
         B     XJCLEXIT             ELSE RETURN                      R4
         SPACE 1                                                     R4
***********************************************************************
*                                                                     *
*        P R O C E S S   J O B   S T A T E M E N T                    *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
XJCLJOB  TM    JCTJOBFL,JCTBATCH   TEST FOR BATCH JOB                R4
         BZ    XJCLEXIT            RETURN IF NO                      R4
         MVI   XJOBRD,0            INDICATE NO 'RD=' KEYWORD         R4
         ICM   R15,8,=AL1(RDJK)    GET 'RD=' KEY                     R4
         LA    WE,STRJKEY          POINT TO 1ST KEYWORD SEQUENCE     R4
         BAL   WD,XINTKEY          TRY TO LOCATE KEYWORD             R4
         BZ    XJCLEXIT            RETURN IF UNSUCCESSFUL            R4
         MVC   XJOBRD,3(WE)        SAVE 'RD=' KEYWORD                R4
         CLI   3(WE),C'R'          TEST JOURNALLING REQUIREMENT      R4
         BNE   XJCLEXIT            RETURN IF NONE                    R4
         NI    JCTJOBFL,255-JCTNOJNL  ELSE FORCE JOURNALLING         R4
         B     XJCLEXIT            THEN RETURN                       R4
         EJECT
***********************************************************************
*                                                                     *
*        P R O C E S S   ' S Y S I N '   D D   S T A T E M E N T      *
*                                                                     *
***********************************************************************
         SPACE 1
XJCLDATA LH    WD,STRLTH           GET LENGTH OF TEXT STRING         R4
         SLR   WA,WA               CLEAR WA FOR LENGTHS
         IC    WA,STRDKEY+1        DECREMENT COUNT
         BCTR  WA,0                 OF 'DD' KEY
         STC   WA,STRDKEY+1          POSITIONAL PARAMETERS
         IC    WA,STRDKEY+2        GET LENGTH OF DDNAME PARM
         LA    WB,STRDKEY+3(WA)    GET ADDRESS OF * / DATA PARM
         LA    WE,0(WD,R1)         GET ADDRESS OF END
         BCTR  WE,0                 OF ORIGINAL TEXT
         IC    WA,0(,WB)           GET LENGTH OF * / DATA PARM
         LA    WD,DDIENDKE-DDDSECT-1(,WD)  ADD LENGTH (-1) OF NEW TEXT
         SLR   WD,WA               SUBTRACT LENGTH (-1) OF DELETED TEXT
         STH   WD,STRLTH           STORE LENGTH OF MODIFIED TEXT STRING
         LA    R1,1(WB,WA)         GET ADDRESS OF 1ST BYTE TO BE MOVED
         SLR   WE,R1                AND LENGTH OF TEXT TO BE MOVED
         EX    WE,XKEYOLAY         DELETE * / DATA PARM
         LA    R1,0(WB,WE)         GET ADDRESS OF END OF REMAINING TEXT
         SPACE 1
         USING DDDSECT,R1          PROVIDE DSN KEY SEQ ADDRESSABILITY
         SPACE 1
         L     WD,XIOTADDR         GET ADDRESS OF INPUT IOT
         L     WB,XPDBADDR         GET OFFSET TO LAST INPUT PDDB
         LA    WB,PDBLENG(,WB)     POINT TO NEXT PDDB LOCATION
         CL    WB,IOTPDDBP-IOTDSECT(,WD)  TEST FOR END OF BUFFER
         BL    XSAVPDDB            BR IF NO
         L     WD,IOTIOT-IOTDSECT(,WD)  GET ADDRESS OF NEXT INPUT IOT
         LTR   WD,WD               TEST FOR VALID IOT ADDRESS
         BZ    XJCLEXIT            RETURN IF NO                      R4
         ST    WD,XIOTADDR         SAVE NEW IOT ADDRESS
         L     WB,$IOTPDDB         GET OFFSET OF 1ST PDDB            R4
         SPACE 1
XSAVPDDB ST    WB,XPDBADDR         SAVE NEW PDDB OFFSET
         MVI   DDTYPE,C'I'         INDICATE 'SYSIN' DATA SET
         MVC   DDCTKEY(3),XJCTKEY  MOVE KEY SEQUENCE FOR 'SYSIN' COUNT
         L     WA,PDBRECCT-PDBDSECT(WB,WD)  GET 'SYSIN' RECORD COUNT
         ST    WA,DDINCT-DDDSECT(,R1)  STORE COUNT IN INTERNAL TEXT
         MVI   DDIENDKE,ENDK       MOVE END-OF-TEXT BYTE
         LH    WA,PDBDSKEY-PDBDSECT(WB,WD)  GET DD NUMBER FROM PDDB
         B     XDSKEY                AND GO TO COMPLETE TEXT RECORD
         EJECT
***********************************************************************
*                                                                     *
*        P R O C E S S   ' S Y S O U T '   D D   S T A T E M E N T    *
*                                                                     *
***********************************************************************
         SPACE 1
         USING TXTDSECT,R1         PROVIDE TEXT PREFIX ADDRESSABILITY
         SPACE 1
         CNOP  0,8
XJCLOUT  SR    WF,WF               CLEAR WORK REG              @Y30O
         ICM   R15,8,=AL1(DSIDK)   GET 'DSID=' KEY             @Y30O
         LA    WE,STRDKEY          GET ADDRESS OF FIRST DD KEY @Y30O
         BAL   WD,XINTKEY           AND TRY TO LOCATE DSID KEY @Y30O
         BZ    XJCLOUT2            BRANCH IF 'DSID=' NOT FOUND @Y30O
         IC    WF,2(,WE)           GET 1ST DSID OPERAND LENGTH       R4
         N     WF,=AL4(X'7F')      CLEAR HI-ORDER BIT          @Y30O
         BZ    XJCLOUT2            BRANCH IF NULL DSID
         LA    WF,1(,WF)           ADD 1 TO LENGTH FOR '.'           R4
         LR    WG,WE               SAVE 'DSID=' KEY ENTRY ADDR @Y30O
         SPACE 1
XJCLOUT2 ICM   R15,8,=AL1(SYSOUTK) GET 'SYSOUT=' KEY           @Y30O
         LA    WE,STRDKEY           AND LOCATE THE
         BAL   WD,XINTKEY            KEYWORD SEQUENCE
         TM    STRDINDC,DTXDUMMY   WAS 'DUMMY' ALSO SPECIFIED...
         BZ    XNODUMMY            BR IF NO
         LR    WC,WE                ELSE SAVE 'SYSOUT' KEYWORD ADDRESS
         ICM   R15,8,=AL1(DUMMK)     AND LOCATE
         LA    WE,STRDKEY             THE 'DD DUMMY'
         BAL   WD,XINTKEY              KEYWORD SEQUENCE
         CLR   WE,WC               DID 'DUMMY' OVERRIDE 'SYSOUT'...
         BL    XJCLEXIT            RETURN IF YES                     R4
         LR    WE,WC                ELSE RESTORE 'SYSOUT' KEYWORD ADDR
         SPACE 1
*              THIS LINE DELETED BY APAR NUMBER                @OZ29148
*              THIS LINE DELETED BY APAR NUMBER                @OZ29148
XNODUMMY CLI   3(WE),C'$'          TEST FOR 'SYSOUT=$'         @OZ29148
         BNE   XOUTLEN             BR IF NO
         MVI   3(WE),C'*'          ALLOCATE WILL SET MCLASS.   @OZ29148
         SPACE 1
XOUTLEN  LH    WD,STRLTH           GET LENGTH OF DD TEXT STRING
         BCTR  WD,0                DECREMENT FOR END-OF-TEXT BYTE
         LA    WA,DDOENDKE+1-DDDSECT LENGTH OF ADDED TEXT FOR 'SYSOUT='
         ALR   WA,WD               SET NEW STRING LENGTH             R4
         ALR   WA,WF               ACCOUNT FOR DSID, IF ANY          R4
         STH   WA,STRLTH           STORE LENGTH OF MODIFIED TEXT STRING
         ALR   R1,WD               ADDRESS FOR ADDED TEXT            R4
         SPACE 1
         USING DDDSECT,R1          PROVIDE DSN KEY SEQ ADDRESSABILITY
         SPACE 1
         LA    WB,DDOENDKE         SET NORMAL END POSITION     @Y30O
         LTR   WF,WF               IF NO DSID KEY,                   R4
         BZ    XOUTLEN2             BR TO BYPASS DSID MOVE           R4
         MVI   0(WB),C'.'          INDICATE NEW INDEX LEVEL    @Y30O
         EX    WF,XDSIDADD         APPEND DSID TO DSNAME             R4
         ALR   WB,WF               SET NEW END POSITION              R4
         EJECT
XOUTLEN2 MVI   DDTYPE,C'O'         INDICATE 'SYSOUT' DATA SET  @Y30O
         MVI   0(WB),ENDK          ADD END-TEXT KEY            @Y30O
         IC    WA,XJDSKEY+2        GET NORMAL DSNAME LENGTH          R4
         ALR   WA,WF               ACCOUNT FOR DSID, IF ANY          R4
         STC   WA,DDDSKEY+2        STORE IN KEYWORD LENGTH FIELD     R4
         LH    WA,JCTPDDBK         INCREMENT
         LA    WA,1(,WA)            OUTPUT
         STH   WA,JCTPDDBK           DD NUMBER
         B     XDSKEY1             THEN BR TO FINISH DSNAME TEXT     R4
         SPACE 1                                                     R4
***********************************************************************
*                                                                     *
*        F I L L   I N   R E S T   O F   T E X T   R E C O R D        *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8                                                   R4
XDSKEY   MVC   DDDSKEY+2(1),XJDSKEY+2  SET NORMAL DSNAME LENGTH      R4
         SPACE 1                                                     R4
XDSKEY1  MVC   DDDSKEY(2),XJDSKEY  SET DSN KEYWORD, NO. OF OPERANDS  R4
         MVC   DDDSKEY+3(5),XJSSNAME  SET SUBSYSTEM NAME IN DSN      R4
         L     BASE3,$JCLPCE       RESTORE PCE ADDRESS               R4
         MVC   DDJOBID,JCTJOBID    MOVE IN 'JOB', 'STC' OR 'TSU'
         PACK  XDOUBLE(3),JCTJOBID+4(4)  MOVE EBCDIC JOB NUMBER
         UNPK  DDJNUM,XDOUBLE(3)    INTO DSNAME
         MVC   DDQUAL,=C'.S'       MOVE START OF DD NUMBER QUALIFIER
         CVD   WA,XDOUBLE          MOVE EBCDIC
         UNPK  DDDSNUM,XDOUBLE+5(3) DD NUMBER
         OI    DDDSNUM+3,X'F0'       TO DSNAME
         SPACE 1
XJCLEXIT LM    R1,BASE1,24(R13)    RESTORE CALLER'S REGISTERS        R4
         SR    R15,R15             SET ZERO RETURN CODE
         BR    R14                  AND RETURN
         EJECT
***********************************************************************
*                                                                     *
*        P R O C E S S   E X E C   S T A T E M E N T                  *
*                                                                     *
***********************************************************************
         SPACE 1
         USING TXTDSECT,R1         PROVIDE TEXT PREFIX ADDRESSABILITY
         SPACE 1
         CNOP  0,8
XEXEC    TM    JCTJOBFL,JCTBATCH   TEST FOR BATCH JOB                R4
         BZ    XPGM                BR IF NO                          R4
         CLI   XJOBRD,0            WAS RD SPECIFIED ON JOB CARD...   R4
         BNE   XPERFM              BR IF YES                         R4
         LA    WE,STREKEY          POINT TO 1ST KEYWORD SEQUENCE     R4
         ICM   R15,8,=AL1(RDEEK)   GET 'RD=' KEY                     R4
         BAL   WD,XINTKEY          TRY TO LOCATE KEYWORD             R4
         BNZ   XTESTRD             BR IF SUCCESSFUL                  R4
         LA    WE,STREKEY          POINT TO 1ST KEYWORD SEQUENCE     R4
         ICM   R15,8,=AL1(RDPEK)   GET 'RD.' KEY                     R4
         BAL   WD,XINTKEY          TRY TO LOCATE KEYWORD             R4
         BZ    XPERFM              BR IF UNSUCCESSFUL                R4
         SLR   WF,WF               CLEAR FOR INSERT                  R4
         IC    WF,2(,WE)           GET LENGTH OF 1ST SUBFIELD        R4
         LA    WE,1(WF,WE)          AND STEP OVER 1ST SUBFIELD       R4
         SPACE 1                                                     R4
XTESTRD  CLI   3(WE),C'R'          TEST JOURNALLING REQUIREMENT      R4
         BNE   XPERFM              BR IF NONE                        R4
         NI    JCTJOBFL,255-JCTNOJNL  ELSE FORCE JOURNALLING         R4
         SPACE 1                                                     R4
XPGM     TM    JCTJOBFL,JCTSTCJB   TEST FOR STARTED TASK             R4
         BZ    XPERFM              BR IF NO
         TM    STREINDC,ETXPRCV    TEST FOR 'EXEC PROC='       @OZ18218
         BO    XDPRTY              BR. IF YES                  @OZ18218
         LA    WE,STREKEY          POINT TO FIRST KEYWORD SEQUENCE
         ICM   R15,8,=AL1(PGMEK)   GET KEYWORD FOR 'PGM='
         BAL   WD,XINTKEY          TRY TO LOCATE KEYWORD
         BZ    XPERFM              BR IF UNSUCCESSFUL
         CLI   2(WE),6             TEST FOR CORRECT LENGTH
         BNE   XPERFM              BR IF NO
         CLC   =C'IEFIIC',3(WE)    TEST FOR INITIATOR
         BNE   XPERFM              BR IF NO
         OI    JPCESTAT,JPCEINIT    ELSE INDICATE VS2 INITIATOR
         EJECT                                                       R4
XPERFM   TM    STREINDC,ETXPRCV    TEST FOR 'EXEC PROC='       @OZ18218
         BO    XDPRTY              BR. IF YES                  @OZ18218
         IC    WC,JCTJCLAS         GET JOB CLASS FROM JCT      @OZ18218
         N     WC,=A(X'3F')        DERIVE RELATIVE CAT ENTRY
         SLL   WC,5                MULTIPLY BY CAT ENTRY LENGTH
         AL    WC,$CATABLE         GET CAT ENTRY ADDRESS
         SPACE 1
         USING CATDSECT,WC         PROVIDE CAT ADDRESSABILITY
         SPACE 1
         CLC   CATPERFM,=C'000'    MUST WE SCAN FOR 'PERFORM='...
         BE    XDPRTY              BR IF NO
         ICM   R15,8,XPRFMKEY      GET 'PERFORM=' KEY
         LA    WE,STREKEY          GET ADDRESS OF FIRST EXEC KEY
         BAL   WD,XINTKEY           AND TRY TO LOCATE DESIRED KEY
         BNZ   XDPRTY              BR IF KEYWORD ALREADY SPECIFIED
         MVC   0(L'XPRFMTXT,WE),XPRFMTXT  MOVE 'PERFORM=' TEXT TO
         MVC   3(L'CATPERFM,WE),CATPERFM   END OF TEXT STRING
         LH    WD,STRLTH           GET LENGTH OF EXEC TEXT STRING
         LA    WD,L'XPRFMTXT-1(,WD) AND ADD LENGTH OF NEW TEXT
         STH   WD,STRLTH           STORE UPDATED STRING LENGTH
         B     XDPRTY              THEN PROVIDE DEFAULT PRIORITY
         SPACE 1
XDPRTY   EQU   XJCLEXIT            DEFAULT PRIORITY NOT SUPPORTED    R4
         SPACE 1
         DROP  R1,WC               KILL TEXT,CAT ADDRESSABILITY
         EJECT
***********************************************************************
*                                                                     *
*        L O C A T E   K E Y   W I T H I N   T E X T   S T R I N G    *
*                                                                     *
*                                                                     *
*              ON INPUT -- WE POINTS TO 1ST KEYWORD SEQUENCE IN TEXT  *
*              ON INPUT -- HI-ORDER BYTE OF R15 CONTAINS KEY          *
*                                                                     *
*              ADDRESS OF KEYWORD SEQUENCE (IF FOUND) RETURNED IN WE  *
*                                                                     *
*              NON-ZERO RETURN CODE -- WE POINTS TO KEYWORD SEQUENCE  *
*              ZERO     RETURN CODE -- WE POINTS TO END-OF-TEXT BYTE  *
*                                                                     *
***********************************************************************
         SPACE 3
         CNOP  4,8
XINTKEY  SLR   WA,WA               CLEAR WA FOR WORK
         LR    WB,WA               CLEAR WB FOR WORK
         SPACE 1
XINTNEXT ICM   WA,1,1(WE)          SET WA TO NUMBER OF PARMS
         LA    WE,2(,WE)           GET ADDRESS OF FIRST PARM (IF ANY)
         BZ    XGOTKEY             BR IF NONE
         SPACE 1
XFINDBYT ICM   WB,1,0(WE)          SET WB TO PARM LENGTH
         BM    XFINDSUB            BR IF SUBPARM COUNT
         LA    WE,0(WE,WB)          ELSE GET ADDRESS OF NEXT PARM
         SPACE 1
XFINDLUP LA    WE,1(,WE)           SKIP OVER LENGTH BYTE
         BCT   WA,XFINDBYT         BR IF MORE PARMS TO SKIP
         SPACE 1
XGOTKEY  CLI   0(WE),ENDK          TEST KEY TYPE
         BER   WD                  RETURN IF END OF TEXT STRING
         CLM   R15,8,0(WE)          ELSE TEST FOR DESIRED KEY
         BNE   XINTNEXT            BR IF NO
         SLR   WA,WA                ELSE SET NON-ZERO RETURN CODE
         BR    WD                    AND RETURN
         SPACE 1
         CNOP  0,8
XFINDSUB SL    WB,=A(X'80')        CLEAR HI-ORDER BIT OF SUBPARM COUNT
         ALR   WA,WB               ADD SUBPARM COUNT TO PARM COUNT
         B     XFINDLUP             AND RESUME PARM FIELD SCAN
         SPACE 1
         DROP  R15                 KILL EXIT ADDRESSABILITY
         DROP  BASE3               KILL SUB-TASK PCE ADDRESSABILITY
         USING PCEDSECT,SAVE       RESTORE NORMAL PCE ADDRESSABILITY
         EJECT
         CNOP  0,8
XKEYOLAY MVC   0(*-*,WB),0(R1)     *** EXECUTE ONLY ***
         SPACE 1
         CNOP  0,8                                             @Y30O
XDSIDADD MVC   1(*-*,WB),3(WG)     *** EXECUTE ONLY ***        @Y30O
         SPACE 1                                               @Y30O
         CNOP  0,8
XJCTKEY  DC    AL1(SYSINCTK,1,L'DDINCT)  SYSIN COUNT KEY SEQUENCE
         CNOP  0,8
XJDSKEY  DC    AL1(DSNAMEK,1,DDOENDKE-DDDSKEY-3)  DSNAME KEY SEQUENCE
XJSSNAME DC    C'HASP.'            START OF DSNAME
         SPACE 1
         CNOP  0,8
XPRFMKEY DC    AL1(PRFMEEK,1,L'CATPERFM),(L'CATPERFM)X'00',AL1(ENDK)
XPRFMTXT EQU   XPRFMKEY,*-XPRFMKEY LABEL AND LENGTH FOR ABOVE TEXT
         SPACE 2
XJOBRD   EQU   PCER0,1             SAVE AREA FOR JOB CARD RD PARM    R4
XDOUBLE  EQU   PCER1,8             DOUBLE-WORD WORK AREA
XIOTADDR EQU   PCEWB               ADDRESS OF INPUT IOT
XPDBADDR EQU   PCEWC               OFFSET OF PDDB WITHIN IOT
XCNVMSG  EQU   JCTWORK             WORK AREA FOR WTO MESSAGES
         SPACE 2
DDDSECT  DSECT                     DD CARD INTERNAL TEXT DSECT
DDDSKEY  DC    AL1(DSNAMEK,1,DDOENDKE-DDDSKEY-3),C'HASP.'
DDDSKYLN EQU   *-DDDSKEY           LENGTH OF FIXED DSNAME KEY SEQUENCE
DDJOBID  DC    C'JOB'              START OF HASP JOB ID
DDJNUM   DS    CL5                 HASP JOB NUMBER
DDQUAL   DC    C'.S'               START OF DD NUMBER QUALIFIER
DDTYPE   DS    C                   SYSIN/SYSOUT TYPE ('I' OR 'O')
DDDSNUM  DS    CL4                 PERIPHERAL DATA SET NUMBER
DDOENDKE DS    C                   END-OF-TEXT BYTE FOR SYSOUT
         ORG   DDOENDKE            REDEFINE FOR SYSIN
DDCTKEY  DC    AL1(SYSINCTK,1,L'DDINCT)  SYSIN COUNT KEY SEQUENCE
DDINCT   DS    CL4                 SYSIN COUNT
DDIENDKE DS    C                   END-OF-TEXT FOR SYSIN
         SPACE 1
HASPXEQ  CSECT                     END OF INTERNAL TEXT DSECTS
         EJECT                                                       R4
         LTORG
         TITLE 'HASP EXECUTION PROCESSOR -- INITIAL ENTRY POINT'
***********************************************************************
*                                                                     *
* PROCESSOR NAME -- HASPEXEC                                          *
*                                                                     *
* DESCRIPTIVE NAME -- JES2 EXECUTION PROCESSOR                        *
*                                                                     *
* FUNCTION -- SELECT JOBS FOR EXECUTION, PROVIDE SERVICES FOR JOBS IN *
*             EXECUTION, AND, FOLLOWING EXECUTION, RE-QUEUE JOBS FOR  *
*             OUTPUT OR RE-EXECUTION.                                 *
*                                                                     *
* NOTES --  1)  HASPEXEC IS 'DRIVEN' BY SJB AND IOT QUEUES WHOSE      *
*               HEADERS ARE LOCATED IN THE SSVT.  ONCE DISPATCHED,    *
*               HASPEXEC ATTEMPTS TO EMPTY ALL QUEUES.  ESSENTIALLY,  *
*               EACH ELEMENT ON EACH QUEUE REPRESENTS A REQUEST FOR   *
*               A SERVICE WHICH MUST BE PERFORMED.                    *
*                                                                     *
*           2)  FOR MOST EFFICIENT EXECUTION, HASPEXEC SHOULD SEARCH  *
*               ITS QUEUES IN THE FOLLOWING SEQUENCE -                *
*                                                                     *
*               A)  $SVSPIOT -- SPIN/HOLD REQUEST(S)                  *
*               B)  $SVTSCS  -- CANCEL/STATUS REQUEST(S)              *
*               C)  $SVJPNUM -- REQUEST(S) FOR JOB(S) PENDING         *
*                               SELECTION BY NUMBER                   *
*               D)  $SVJTERM -- REQUEST(S) FOR JOB(S) PENDING         *
*                               TERMINATION                           *
*               E)  $SVJRENQ -- REQUEST(S) FOR JOB(S) PENDING         *
*                               RE-ENQUEUE (RE-EXECUTION)             *
*               F)  $SVJPXBM -- REQUEST(S) FOR JOB(S) PENDING         *
*                               BATCH MONITOR EXECUTION               *
*               G)  $SVJPCLS -- REQUEST(S) FOR JOB(S) PENDING         *
*                               SELECTION BY CLASS                    *
*                                                                     *
*           3)  TO GUARANTEE THAT HASPEXEC DOES NOT LOSE A $POST,     *
*               OTHER JES2 PROCESSORS SHOULD 'OR' ON A BIT IN THE     *
*               HI-ORDER BYTE OF $SVJOB AFTER $POSTING THE EXECUTION  *
*               PROCESSOR.                                            *
*                                                                     *
*           4)  NO SVCS, DIRECT OR INDIRECT, SHOULD BE ISSUED WHILE   *
*               HOLDING THE SJB QUEUES LOCK.                          *
*                                                                     *
* REGISTER CONVENTIONS -- R0  -- WORK REGISTER                        *
*                         R1  -- JQE ADDRESS                          *
*                         WA  -- SJB ADDRESS                          *
*                         WB  -- WORK REGISTER                        *
*                         WC  -- WORK REGISTER                        *
*                         WD  -- WORK REGISTER                        *
*                         WE  -- WORK/LINK REGISTER                   *
*                         WF  -- WORK REGISTER                        *
*                         WG  -- BASE REGISTER (BASE3)                *
*                         JCT -- SSVT ADDRESS                         *
*                                                                     *
***********************************************************************
         EJECT
PDDB     EQU   WC                  PDDB ADDRESS REGISTER
IOT      EQU   WF                  IOT ADDRESS REGISTER
         SPACE 1
XEQWORK  EQU   PCEWORK,8           PROCESSOR WORK AREA              R41
XQCATAD  EQU   PCEWORK+4,4         CAT ENTRY ADDRESS           @OZ29151
XQOFFSET EQU   PCEWORK+8,4         SJB QUEUE TABLE OFFSET           R41
XMESSAGE EQU   PCEWORK+12,RDRPCEWS-12  OPERATOR MESSAGE WORK AREA   R41
         SPACE 2
***********************************************************************
*                                                                     *
*        H A S P E X E C   I N I T I A L   E N T R Y   P O I N T      *
*                                                                     *
***********************************************************************
         SPACE 1
         USING JQEDSECT,R1         PROVIDE JQE ADDRESSABILITY
         USING $SVDSECT,JCT        PROVIDE SSVT ADDRESSABILITY      R41
         USING SJBDSECT,WA         PROVIDE SJB ADDRESSABILITY
         SPACE 2
HASPEXEC $ENTRY BASE=(BASE2,BASE3) PROVIDE PROCESSOR ENTRY POINT    R41
         LA    BASE3,2048(,BASE2)  SET UP SECOND                    R41
         LA    BASE3,2048(,BASE3)   BASE REGISTER                   R41
         L     JCT,$SSVT           GET ADDRESS OF SSVT              R41
         B     XQSEARCH             AND BR TO PROCESS
         SPACE 1
         CNOP  0,8
XNOWORK  CLI   $SVJOB,0            TEST 'NEST' INDICATOR
         BNE   XQSEARCH            BR IF 'RECENTLY' $$POSTED
         TM    $STATUS,$SYSEXIT    IS HASP BEING WITHDRAWN...
         BO    X$PHASP             BR IF YES                        R41
         SPACE 1
XJBWAIT $WAIT  JOB,INHIBIT=NO      $WAIT FOR SOMEONE TO $POST JOB
         TITLE 'HASP EXECUTION PROCESSOR -- WORK QUEUES SEARCH'
XQSEARCH MVI   $SVJOB,0            SET 'NEST' INDICATOR
         SPACE 1
***********************************************************************
*                                                                     *
*        S E A R C H   T H E   S P I N / H O L D   Q U E U E          *
*                                                                     *
***********************************************************************
         SPACE 1
         L     R1,$SVSPIOT         PICK UP SPIN/HOLD QUEUE HEADER
         SPACE 1
XSPTEST  LTR   R1,R1               TEST FOR EMPTY QUEUE
         BZ    XSTQSRCH            BR IF SO
         SLR   IOT,IOT             TRY TO DE-QUEUE
         CS    R1,IOT,$SVSPIOT      THE ENTIRE SPIN/HOLD REQUEST Q
         BNE   XSPTEST             BR IF UNSUCCESSFUL TO TRY AGAIN   R4
         B     XSPNHLD              ELSE BR TO SPIN/HOLD SUPPORT    R41
         SPACE 2
***********************************************************************
*                                                                     *
*        S E A R C H  T H E  C A N C E L / S T A T U S  Q U E U E     *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
XSTQSRCH LM    WA,WB,$SVTSCS       PICK UP CANCEL/STATUS QUEUE HDR
         SPACE 1
XSTQTEST LTR   WA,WA               TEST FOR EMPTY QUEUE
         BZ    XJQSRCH             BR IF SO
         MVI   SJBTFLOW,X'FF'      SET HASP REFERENCE FLAG
*                                  HASP IS THE ONLY ONE TO DEQUEUE
         L     R0,SJBTCHN          LOAD ADDRESS OF NEXT SJB
         LR    R1,WB                AND HASH VALUE FROM HEADER
         CDS   WA,R0,$SVTSCS         AND TRY TO DE-QUEUE THIS SJB
         BNE   XSTQTEST            LOOP IF UNSUCCESSFUL
         CLI   $SVTSLOK,0          IS IT OK TO WORK WITH SJB
         BE    XPTCS               BR IF YES                        R41
        $GETLOK ,                  GET LOCK
         MVI   $SVTSLOK,0          FORCE SETTING TO ZERO
        $FRELOK ,                  FREE LOCK
         B     XPTCS               BR TO CANCEL/STATUS SUPPORT      R41
         EJECT
***********************************************************************
*                                                                     *
*        S E A R C H   T H E   J O B - P E N D I N G   Q U E U E S    *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8                                                   R4
XJQSRCH  LA    R1,0                PREPARE TO SCAN SJB              R41
         ST    R1,XQOFFSET          QUEUE OFFSET TABLE              R41
         SPACE 1
XJQNEXT  L     R1,XQOFFSET         UPDATE                           R41
         LA    R1,4(,R1)            SJB QUEUE                       R41
         ST    R1,XQOFFSET           TABLE OFFSET                   R41
         SPACE 1
XLOOKAGN MVC   PCEJQE,$ZEROS       CLEAR JQE ADDRESS           @OZ32566
         L     R1,XQOFFSET         GET OFFSET TO               @OZ32566
         L     WA,XQTABLE(R1)       NEXT SJB QUEUE                  R41
         LTR   WA,WA               TEST FOR END OF QUEUES
         BZ    XNOWORK             BR IF SO
         L     WA,$SVDSECT(WA)     GET ADDRESS OF NEXT QUEUE
         LTR   WA,WA               TEST FOR EMPTY QUEUE
         BNZ   XBRTABLE(R1)        BR IF NO TO PROCESS              R41
         B     XJQNEXT              ELSE TRY NEXT SJB QUEUE
         SPACE 2
***********************************************************************
*                                                                     *
*        J O B - P E N D I N G   O F F S E T   T A B L E              *
*                                                                     *
***********************************************************************
         SPACE 1
XQTABLE  DC    A(*-*)              FIRST OFFSET NEVER USED
         DC    A($SVJPNUM-$SVDSECT)
         DC    A($SVJTERM-$SVDSECT)
         DC    A($SVJRENQ-$SVDSECT)
         DC    A($SVJPXBM-$SVDSECT)
         DC    A($SVJPCLS-$SVDSECT)
XQTBLEND DC    A(*-*)              END OF QUEUE OFFSET TABLE
         SPACE 2
***********************************************************************
*                                                                     *
*        J O B   Q U E U E   S E R V I C E S   B R A N C H   T A B L E*
*                                                                     *
*                                                                     *
*              BRANCH TABLE IS ORDER-DEPENDENT ON OFFSET TABLE ABOVE  *
*                                                                     *
***********************************************************************
         SPACE 1
XBRTABLE NOP   *                   THIS NOP NEVER EXECUTED (HOPEFULLY)
         B     XPBYNUM             BR TO PENDING-BY-NUMBER ROUTINE
         B     XPTERM              BR TO PENDING-TERMINATION ROUTINE
         B     XPRENQ              BR TO PENDING-REQUEUE ROUTINE
XPXBMBR  B     XPXBM               BR TO PENDING-BATCHING ROUTINE
         B     XPBYCLS             BR TO PENDING-BY-CLASS ROUTINE
         TITLE 'HASP EXECUTION PROCESSOR -- MISCELLANEOUS ROUTINES'
***********************************************************************
*                                                                     *
*        R E Q U E S T   A C C E S S   T O   C H K P T   D A T A      *
*                                                                     *
*                                                                     *
*              REGISTER R15 DESTROYED                                 *
*              RETURN CODE N/A                                        *
*                                                                     *
***********************************************************************
         SPACE 3
         CNOP  0,8
XQSUSE  $QSUSE                     REQUEST ACCESS TO CHECKPOINT DATA
         BR    LINK                THEN RETURN
         SPACE 5
***********************************************************************
*                                                                     *
*        C T L   B L O C K   R E A D / W R I T E   R O U T I N E      *
*                                                                     *
*                                                                     *
*              SEEK ADDRESS PROVIDED IN REGISTER R0                   *
*                                                                     *
*              REGISTERS R14 AND R15 DESTROYED                        *
*              CONDITION CODE VALID ON RETURN                         *
*                                                                     *
***********************************************************************
         SPACE 3
         CNOP  0,8
XIO      ST    R0,PCESEEK          SET TRACK ADDRESS FOR $EXCP
         LA    R1,PCEDADCT         GET DIRECT ACCESS DCT ADDRESS
        $EXCP  (R1),WAIT=YES       READ/WRITE CONTROL BLOCK          R4
         BR    WE                  RETURN WITH VALID CC              R4
         EJECT
***********************************************************************
*                                                                     *
*        I S S U E   P I T   S T A T U S   M E S S A G E              *
*                                                                     *
*                                                                     *
*              ADDRESS OF MODEL MESSAGE PROVIDED IN R1                *
*              ADDRESS OF PIT PROVIDED IN WF                          *
*                                                                     *
*              RETURN CODE N/A                                        *
*                                                                     *
***********************************************************************
         SPACE 3
         USING PITDSECT,WF         PROVIDE PIT ADDRESSABILITY
         SPACE 1
         CNOP  0,8
XPITMSG  MVC   XMESSAGE(L'XIDLEMSG),0(R1)  PREPARE                   R4
         MVC   XMESSAGE+10(2),PITPATID      HASP                     R4
         SLR   R1,R1                         PIT                     R4
         IC    R1,$MAXCLAS                    STATUS                 R4
         EX    R1,XPITMVCL                     MESSAGE               R4
         TM    PITFLAGS,PITXBM     TEST FOR BATCHING PIT
         BZ    XPITWTO             BR IF NO TO ISSUE MESSAGE
         MVC   XMESSAGE+L'XIDLEMSG-11(8),SJBXBJNM  MOVE IN MONITOR NAME
         MVC   XMESSAGE+2(2),=C'XB'  SET XBM IDENTIFIER
         SPACE 1                                                     R4
XPITWTO  LA    R0,L'XIDLEMSG(R1)   GET MESSAGE LENGTH                R4
        $WTO   XMESSAGE,(R0),ROUTE=$LOG+$MAIN,                       R4C
               WAIT=YES,JOB=NO,PRI=$ST,CLASS=$NORMAL
         BR    WE                  THEN RETURN
         SPACE 1                                                     R4
XPITMVCL MVC   XMESSAGE+L'XIDLEMSG(*-*),PITCLASS  *** EXEC ONLY ***  R4
         SPACE 1
         DROP  WF                  KILL PIT ADDRESSABILITY
    TITLE 'HASP EXECUTION PROCESSOR -- SJB QUEUE MANAGEMENT ROUTINES'
***********************************************************************
*                                                                     *
*        R E Q U E S T   L O C K   O N   S J B   Q U E U E S          *
*                                                                     *
*                                                                     *
*              REGISTER R15 DESTROYED                                 *
*              RETURN CODE N/A                                        *
*                                                                     *
***********************************************************************
         SPACE 3
         CNOP  0,8
XSJBLOCK STM   R0,R3,PCER0         SAVE WORK REGISTERS
         SPACE 1
XLOCKSJB SLR   R0,R0               INITIALIZE WORK REGISTERS
         LR    R1,R0                TO 'UNLOCKED' STATE
         L     R2,PSAAOLD-PSA      GET ASCB ADDRESS
         LNR   R3,R2               MAKE R3 NEGATIVE
         CDS   R0,R2,$SVJLOCK      TRY TO OBTAIN SJB QUEUES LOCK
         BNE   XLOCKED             BR IF UNSUCCESSFUL
         LM    R0,R3,PCER0          ELSE RESTORE WORK REGISTERS
         BR    LINK                  AND RETURN
         SPACE 1
***********************************************************************
*                                                                     *
*        Q U E U E S   L O C K E D   - -   Q U E U E   R E Q U E S T  *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
XLOCKED  STM   R1,R2,$SVQLOKE+4    INITIALIZE HASP LOCK ELEMENT
         LR    R2,R0               THEN RE-LOAD ASCB ADDRESS
         LA    R3,$SVQLOKE          AND POINT TO LOCK ELEMENT
         CDS   R0,R2,$SVJLOCK      TRY TO ADD IT TO REQUEST QUEUE
         BNE   XLOCKSJB            BR IF UNSUCCESSFUL
         LM    R0,R3,PCER0         RESTORE WORK REGISTERS
         SPACE 1
***********************************************************************
*                                                                     *
*        Q U E U E S   S T I L L   L O C K E D   - -   W A I T        *
*                                                                     *
***********************************************************************
         SPACE 1
XLKWAIT $WAIT  WORK                WAIT FOR LOCK TO CHANGE HANDS
         CLC   PSAAOLD-PSA,$SVJLOCK  DO WE HAVE THE LOCK...
         BER   LINK                RETURN IF YES
         B     XLKWAIT              ELSE WAIT AGAIN
         EJECT
***********************************************************************
*                                                                     *
*        R E M O V E   L O C K   O N   S J B   Q U E U E S            *
*                                                                     *
*                                                                     *
*              REGISTER R15 DESTROYED                                 *
*              RETURN CODE N/A                                        *
*                                                                     *
***********************************************************************
         SPACE 3
         CNOP  0,8
XSJBUNLK STM   R0,R1,$DOUBLE       SAVE WORK                   @OZ45665
         STM   WA,WB,PCEWA          REGISTERS                  @OZ45665
         LM    R2,R3,$SVJLOCK      GET SJB QUEUES LOCK HEADER
         SPACE 1
XTESTLOK LTR   R3,R3               TEST FOR PENDING LOCK REQUESTS
         BM    XREMLOK             BR IF NONE
         SPACE 1
***********************************************************************
*                                                                     *
*        R E Q U E S T ( S )   P E N D I N G   - -   G E T   N E X T  *
*                                                                     *
***********************************************************************
         SPACE 1
         L     R0,8(,R3)           GET ASCB ADDRESS
         L     R1,4(,R3)           GET CHAIN WORD
         CDS   R2,R0,$SVJLOCK      TRY TO MOVE UP NEXT REQUEST
         BNE   XTESTLOK            BR IF UNSUCCESSFUL
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        P O S T   N E W   L O C K   H O L D E R                      *
*                                                                     *
***********************************************************************
         SPACE 1
         ST    R0,16(,R3)          STORE LATEST ASCB ADDRESS
         LA    R1,$SVBR14          GET BR 14 ROUTINE ADDRESS
         ST    R1,20(,R3)           AND USE AS ERROR ROUTINE ADDR
         LA    R1,12(,R3)          GET ADDRESS OF XMPOST ELEMENT
         ST    LINK,XEQWORK        SAVE RETURN ADDRESS              R41
         LM    WA,WB,PCEWA         RESTORE WA AND WB
        $XMPOST (R1)               XM POST THE WAITING TASK
         LM    R0,R1,$DOUBLE       RESTORE WORK REGISTERS      @OZ45665
         L     LINK,XEQWORK        RESTORE RETURN ADDRESS           R41
         BR    LINK                 AND RETURN
         SPACE 1
***********************************************************************
*                                                                     *
*        N O   P E N D I N G   R E Q U E S T S   - -   U N L O C K    *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
XREMLOK  SLR   R0,R0               INITIALIZE WORK REGISTERS
         LR    R1,R0                TO 'UNLOCKED' STATE
         CDS   R2,R0,$SVJLOCK      TRY TO UNLOCK THE SJB QUEUES
         BNE   XTESTLOK            BR IF UNSUCCESSFUL
         LM    R0,R3,PCER0          ELSE RESTORE WORK REGISTERS
         BR    LINK                  AND RETURN
         EJECT
***********************************************************************
*                                                                     *
*        D E - Q U E U E   A N   S J B   F R O M   A   Q U E U E      *
*                                                                     *
*                                                                     *
*              ADDRESS OF QUEUE HEADER PROVIDED IN WD                 *
*              ADDRESS OF SJB PROVIDED IN WA                          *
*              WD DESTROYED BY ROUTINE, ALL OTHER REGISTERS SAVED     *
*                                                                     *
*                  ZERO CONDITION CODE - WA POINTS TO DE-QUEUED SJB   *
*              NON-ZERO CONDITION CODE - WA INVALID                   *
*                                                                     *
***********************************************************************
         SPACE 3
         CNOP  0,8
XDEQSJB  LA    WA,0(,WA)           CLEAR HI-ORDER BYTE OF SJB ADDR
         SL    WD,=A(SJBXQCHN-SJBDSECT)  PREPARE TO SCAN SJB QUEUE
         SPACE 1
XSJBNEXT LR    R15,WD              SAVE LAST SJB ADDRESS
         ICM   WD,7,SJBXQCHN+1-SJBDSECT(WD)  GET ADDR OF NEXT SJB
         BZ    XNOSJB              BR IF END OF SJB CHAIN
         CLR   WA,WD               TEST FOR MATCH ON SJB ADDRESSES
         BNE   XSJBNEXT            BR IF NO
         SPACE 1
         MVC   SJBXQCHN-SJBDSECT(,R15),SJBXQCHN  DE-QUEUE THE SJB
         BR    LINK                 AND RETURN WITH ZERO CC
         SPACE 1
***********************************************************************
*                                                                     *
*        L O S T   A N   S J B                                        *
*                                                                     *
*                                                                     *
*        NOTE -- FAILURE TO LOCATE AN SJB ON A SPECIFIED QUEUE AFTER  *
*                OBTAINING THE SJB QUEUES LOCK IS NOT NECESSARILY BAD.*
*                IT WAS PROBABLY REMOVED BY END-OF-MEMORY PROCESSING  *
*                IN HASPSSSM PRIOR TO OBTAINING THE LOCK.             *
*                                                                     *
***********************************************************************
         SPACE 1
XNOSJB   LR    WD,LINK             SAVE RETURN ADDRESS
         BAL   LINK,XSJBUNLK       REMOVE THE SJB QUEUES LOCK
         SLR   R15,R15             SET NON-ZERO CONDITION CODE       R4
         BR    WD                   AND RETURN
         EJECT
         SPACE 5
***********************************************************************
*                                                                     *
*        R E T U R N   A N   S J B   T O   A   Q U E U E              *
*                                                                     *
*                                                                     *
*              ADDRESS OF QUEUE HEADER PROVIDED IN WD                 *
*              ADDRESS OF SJB PROVIDED IN WA                          *
*                                                                     *
***********************************************************************
         SPACE 3
         CNOP  0,8
XQUESJB  ST    WD,SJBQUEUE         SAVE QUEUE ADDRESS IN SJB
         LA    WA,0(,WA)           CLEAR HI-ORDER BYTE OF SJB ADDR
         L     R15,0(,WD)          ADD CURRENT SJB
         ST    WA,0(,WD)            TO HEAD OF SPECIFIED
         ST    R15,SJBXQCHN          SJB QUEUE
         BR    LINK                THEN RETURN
         TITLE 'HASP EXECUTION PROCESSOR -- JOB QUEUE SERVICES'
***********************************************************************
*                                                                     *
*        P R O C E S S   P E N D I N G - B Y - C L A S S   Q U E U E  *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  4,8
XPBYCLS  L     WF,$PITABLE         GET ADDRESS OF FIRST PIT
         SPACE 1
         USING PITDSECT,WF         PROVIDE PIT ADDRESSABILITY
         TM    SJBFLG1,SJB1XBWT    TEST FOR XBM                @OZ49747
         BZ    XPITFRST            NO, SCAN PITS               @OZ49747
         TM    SJBFLG2,SJB2PNIT+SJB2EOM TEST FOR XBM FAILURE   @OZ49747
         BZ    XPITFRST            NO, SCAN PITS               @OZ49747
        $DEQSJB $SVJPCLS,XLOOKAGN  DEQUEUE THE FAILING SJB     @OZ49747
         L     WF,SJBPIT           ACCESS ITS PIT              @OZ49747
         NI    PITSTAT,255-PITBUSY-PITINIT MAKE PIT AVAILABLE  @OZ49747
         NI    PITFLAGS,255-PITXBM SHOW NO XBM                 @OZ49747
         OI    PITSTAT,PITHOLD1    AND SHOW DRAINED            @OZ49747
        $WTO   XEOMSG1,L'XEOMSG1,WAIT=YES,ROUTE=$LOG+$MAIN,    @OZ49747*
               CLASS=$ALWAYS,PRI=$HI,JOB=NO  WRITE MSGHASP310  @OZ49747
         B     XPOSTSJB            GO XMPOST THE WAITING TASK  @OZ49747
         SPACE 1                                               @OZ49747
XPITFRST TM    SJBLKFG,SJBFIRST    FIRST $SVJPCLS REQUEST...   @OZ39304
         BZ    XPIT020             NO, SCAN ALL SJB'S          @OZ40975
         NI    SJBLKFG,255-SJBFIRST  YES, RESET 1ST-REQ FLAG   @OZ60670
         SPACE 1                                               @OZ39304
*  SEE IF ANY PIT IS WAITING FOR ADDRESS SPACE VERIFICATION    @OZ39304
XPIT005  LTR   WF,WF               TEST FOR VALID PIT          @OZ39304
         BZ    XPITEOM             NO MORE PITS, GO KILL INIT  @OZ60670
         TM    PITFLAGS,PITSMVER   THIS PIT WAITING ...        @OZ39304
         BO    XPIT030             YES, GO RESET ITS FLAGS     @OZ39304
         L     WF,PITNEXT          NO, CHECK NEXT ONE          @OZ39304
         B     XPIT005             LOOP                        @OZ39304
               PUSH PRINT                                      @OZ60670
               PRINT OFF                                       @OZ60670
*              THIS LINE DELETED BY APAR OZ60670               @OZ60670
*              THIS LINE DELETED BY APAR OZ60670               @OZ60670
*              THIS LINE DELETED BY APAR OZ60670               @OZ60670
*              THIS LINE DELETED BY APAR OZ60670               @OZ60670
*              THIS LINE DELETED BY APAR OZ60670               @OZ60670
*              THIS LINE DELETED BY APAR OZ60670               @OZ60670
*              THIS LINE DELETED BY APAR OZ60670               @OZ60670
         SPACE 1                                               @OZ40975
               POP PRINT                                       @OZ60670
XPIT030  NI    PITFLAGS,255-PITSMVER RESET FLAGS IN PIT        @OZ60670
         SPACE 1                                               @OZ40975
XPIT020  ICM   WA,15,SJBXQCHN      ELSE LET SJB KEEP WAITING   @OZ39304
         BNZ   XPITFRST            AND EXAMINE THE NEXT ONE    @OZ39304
         L     WF,$PITABLE         RESET FOR NEXT PIT SCAN     @OZ40975
         L     WA,$SVJPCLS         RESET SJB ADDRESS           @OZ40975
         SPACE 1                                               @OZ40975
*              THIS LINE DELETED BY APAR NUMBER                @OZ40975
*              THIS LINE DELETED BY APAR NUMBER                @OZ40975
*              THIS LINE DELETED BY APAR NUMBER                @OZ40975
         SPACE 1                                               @OZ39304
*  SCAN FOR AN AVAILABLE PIT                                   @OZ39304
XPITNEXT TM    PITSTAT,PITBUSY     TEST FOR PIT IN USE
         BO    XPITCONT            BR IF YES
         TM    PITSTAT,PITINIT     DOES OS/VS2 INITIATOR EXIST...
         BZ    XPITCONT            BR IF NO
         TM    PITFLAGS,PITXBM     TEST FOR BATCHING PIT
         BO    XPITCONT            BR IF SO (PROCESSED BY XPXBM)
         TM    PITFLAGS,PITSIVER   HAS START BEEN VERIFIED...
         BO    XPITCONT            BR IF NO
         TM    SJBFLG2,SJB2PNIT    SHOULD WE KILL THIS INITIATOR...
         BZ    *+8                 BR IF NO
         OI    PITSTAT,PITHOLD1     ELSE CAUSE PIT TO DRAIN
         TM    PITSTAT,PITHOLD1+PITHOLDA+PITHALT1+PITHALTA  TEST STATUS
         BNZ   XPITHLD             BR IF PIT HELD              @OZ39304
         TM    PITFLAGS,PITSMVER   HAS MEM CREATE BEEN DONE..  @OZ39304
         BO    XPITCONT            BR IF NO                    @OZ39304
         B     XGOTPIT             ELSE WE CAN USE THIS PIT    @OZ39304
XPITHLD  DS    0H                                              @OZ39304
         NI    PITSTAT,255-PITIDLE RESET PIT 'IDLE' MSG SWITCH
         TM    PITSTAT,PITHOLD1+PITHOLDA  SHOULD INITIATOR EXIST...
         BZ    XPITCONT            BR IF YES
*        IN DRAINING A PIT, DO NOT TERMINATE THE INITIATOR     @OZ39304
*        IF THE PIT IS WAITING FOR ADDRESS SPACE VERIFICATION  @OZ39304
         TM    PITFLAGS,PITSMVER   IF PIT NOT STARTING...      @OZ39304
         BZ    XPITEND             ...GO TERMINATE THE INIT.   @OZ39304
         NI    PITSTAT,255-PITINIT SHOW NO INIT FOR THIS PIT   @OZ39304
         NI    PITFLAGS,255-PITSMVER NO POINT WAITING FOR ONE  @OZ39304
         B     XPITCONT            GO LOOK AT NEXT PIT         @OZ39304
XPITEND  DS    0H                                              @OZ39304
        $DEQSJB $SVJPCLS,XLOOKAGN  DE-QUEUE THE SJB
         TM    SJBLKFG,SJBFIRST    IS THIS A FIRST REQUEST...  @OZ59420
         BZ    XPITEN1             NO, THEN CONTINUE DRAIN     @OZ59420
         LA    WD,$SVJPCLS         ELSE THIS IS THE WRONG SJB  @OZ59420
         BAL   LINK,XQUESJB        REQUEUE TO $SVJPCLS         @OZ59420
         BAL   LINK,XSJBUNLK       RELEASE THE LOCK            @OZ59420
         B     XLOOKAGN            START THE PROCESS OVER      @OZ59420
XPITEN1  DS    0H                                              @OZ59420
         NI    PITSTAT,255-PITINIT SHOW INIT NO LONGER EXISTS
         OI    SJBFLG2,SJB2PNIT    SET FLAG TO TERMINATE INIT
         OI    SJBLKFG,SJBDRAIN    IND PIT IS DRAINED TO EOM   @OZ73682
         XC    SJBQUEUE,SJBQUEUE   SHOW SJB DE-QUEUED
         SPACE 1
XPOSTSJB $XMPOST SJBECBP           XM POST THE WAITING TASK
         BAL   LINK,XSJBUNLK       THEN REMOVE THE SJB QUEUES LOCK
         B     XLOOKAGN             AND LOOK FOR MORE WORK TO DO
         SPACE 1                                               @OZ39304
*  TERMINATE THE ADDRESS SPACE IF REQUEST BY AN ILLEGAL INIT   @OZ39304
XPITEOM  LR    WF,WA               SAVE CURRENT SJB ADDRESS    @OZ60670
         $DEQSJB $SVJPCLS,XLOOKAGN DEQUEUE FIRST SJB           @OZ60670
         TM    SJBLKFG,SJBFIRST    IF THIS MARKED SJBFIRST...  @OZ60670
         BO    XPITEO1             DON'T KILL IT.              @OZ60670
         OI    SJBFLG2,SJB2PNIT    CAUSE INIT TO TERMINATE     @OZ60670
         OI    SJBLKFG,SJBDRAIN    IND PIT IS DRAINED TO EOM   @OZ73682
         XC    SJBQUEUE,SJBQUEUE   SHOW NOT ON ANY QUEUE       @OZ60670
         B     XPOSTSJB            ELSE, XMPOST WAITING TASK   @OZ60670
XPITEO1  LA    WD,$SVJPCLS         GET QUEUE TO REQUEUE SJB    @OZ60670
         BAL   LINK,XQUESJB        REQUEUE TO $SVJPCLS         @OZ60670
         BAL   LINK,XSJBUNLK       RELEASE THE LOCK            @OZ60670
         LR    WA,WF               RESTORE POINTER TO CURRENT  @OZ60670
         OI    SJBLKFG,SJBFIRST    RESTORE HIS FLAG            @OZ60670
         B     XLOOKAGN            WE'LL GET HIM NEXT TIME     @OZ60670
         SPACE 1
XSVJPCLS EQU   $SVJPCLS            ALTERNATE NAME FOR SJB QUEUE
         EJECT
***********************************************************************
*                                                                     *
*        N O   J O B   F O R   P I T                                  *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
XNOJOB   TM    PITSTAT,PITIDLE     HAS 'IDLE' MSG BEEN SENT...
         BO    XMSGSENT            BR IF YES                        R41
         LA    R1,XIDLEMSG          ELSE GET PIT 'IDLE' MSG ADDR    R41
         BAL   WE,XPITMSG            AND ISSUE THE MESSAGE          R41
         OI    PITSTAT,PITIDLE     SHOW 'IDLE' MSG SENT             R41
         SPACE 1                                                    R41
XMSGSENT TM    PITFLAGS,PITXBM     TEST FOR BATCHING PIT            R41
         BNO   XPITCONT            BR IF NOT TO GET NEXT PIT   @OZ43716
         SPACE 1                                               @OZ43716
         BAL   LINK,XSJBLOCK       OBTAIN SJB QUEUES LOCK      @OZ43716
         LA    WA,0(,WA)           CLEAR HI-ORDER BYTE AND     @OZ43716
         LA    WD,$SVJPXBM            PREPARE TO               @OZ43716
         SL    WD,=A(SJBXQCHN-SJBDSECT) SCAN SJB QUEUE         @OZ43716
         SPACE 1                                               @OZ43716
XSJBSCAN ICM   WD,7,SJBXQCHN+1-SJBDSECT(WD)  GET ADDR OF NEXT  @OZ43716
         BZ    XSJBNONE                SJB AND BRANCH IF NONE  @OZ43716
         CLR   WA,WD               IS CURRENT SJB ON QUEUE     @OZ43716
         BNE   XSJBSCAN            BR IF NO                    @OZ43716
         SPACE 1                                               @OZ43716
         L     WA,SJBXQCHN         YES, PICK UP CHAIN POINTER  @OZ43716
         B     XSJBCONT             AND CONTINUE               @OZ43716
         SPACE 1                                               @OZ43716
XSJBNONE L     WA,$SVJPXBM         ELSE START AT TOP OF QUEUE  @OZ43716
XSJBCONT BAL   LINK,XSJBUNLK       REMOVE THE SJB QUEUES LOCK  @OZ43716
         B     XNXTCONT             AND RETURN TO XPXBM RTN    @OZ43716
         SPACE 1
***********************************************************************
*                                                                     *
*        G E T   N E X T   P I T                                      *
*                                                                     *
***********************************************************************
         SPACE 1
XPITCONT L     WF,PITNEXT          POINT TO NEXT PIT                 R4
         LTR   WF,WF               TEST FOR VALID PIT ADDRESS        R4
         BNZ   XPITNEXT            BR IF SO                          R4
         B     XNOWORK              ELSE WAIT FOR MORE WORK
         EJECT
***********************************************************************
*                                                                     *
*       P R O C E S S   E X E C U T I O N   B A T C H I N G   Q U E U *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
XPXBM    L     WF,SJBPIT           GET PIT ADDRESS FROM SJB
         TM    PITFLAGS,PITXBJCL   TEST FOR AWAITING JCL
         BZ    XHAVEJCL            BR IF NO
         PACK  PCER1(8),SJBJOBID+3(5)  CNVT EBCDIC JOB NUMBER
         CVB   R1,PCER1                 TO BINARY
        $QLOC  (R1),XNOJCL         LOCATE JOB 'CONTAINING' JCL
         TM    JQETYPE,$XEQ        TEST QUEUE TYPE
         BZ    XNOJCL              BR IF QUEUE LOCATION INVALID
         TM    JQETYPE,QUECLASS-$XEQ  ELSE RE-TEST QUEUE TYPE
         BZ    XNEXTXBM            BR IF JCL NOT YET CONVERTED
         TM    JQEFLAGS,QUEBUSY    IF JOB ALREADY SELECTED,
         BNZ   XNOJCL               TREAT AS INVALID QUEUE LOCATION
         OC    JQEFLAGS,$SIDBUSY     ELSE SHOW JOB BEING PROCESSED
        $QCKPT (R1)                   AND FORCE CHECKPOINT OF JQE
         NI    PITFLAGS,255-PITXBJCL  SHOW JCL PROCESSED
         ST    R1,PCEJQE           STORE JQE ADDRESS           @OZ32566
         B     XBMJOB              THEN BR TO PROCESS THE JOB
         SPACE 1
***********************************************************************
*                                                                     *
*        L O S T   T H E   M O N I T O R   J C L   J O B              *
*                                                                     *
***********************************************************************
         SPACE 1
XNOJCL  $DEQSJB $SVJPXBM,XLOOKAGN  DE-QUEUE THE SJB
         NI    SJBFLG1,255-SJB1XBM RESET THE BATCHING FLAG
         NI    PITFLAGS,255-PITXBM-PITXBJCL  CLEAR XBM FLAGS
         NI    PITSTAT,255-PITBUSY            AND SHOW PIT AVAILABLE
         LA    WD,$SVJPCLS         RE-QUEUE THE SJB
         BAL   LINK,XQUESJB         ON JOB-PENDING-XEQ-BY-CLS QUEUE
         BAL   LINK,XSJBUNLK       THEN REMOVE THE SJB QUEUES LOCK
         B     XLOOKAGN             AND LOOK FOR MORE WORK TO DO
         EJECT
***********************************************************************
*                                                                     *
*        H A V E   S J B   F O R   W A I T I N G   M O N I T O R      *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
XHAVEJCL TM    PITSTAT,PITHOLD1+PITHOLDA  TEST PIT STATUS
         BNZ   XKILLXBM            BR IF PIT IS BEING DRAINED
         LA    R15,PITCLASS-1      GET ADDRESS OF PIT
         SPACE 1
XNEXTCLS LA    R15,1(,R15)         POINT TO NEXT PIT CLASS
         CLC   SJBJCLAS,0(R15)     TEST FOR BATCHING CLASS
         BE    XBMCLAS             BR IF SO
         CLI   0(R15),C' '         TEST FOR END OF CLASS LIST
         BNE   XNEXTCLS            BR IF NO
         SPACE 1
***********************************************************************
*                                                                     *
*        T E R M I N A T E   T H E   B A T C H   M O N I T O R        *
*                                                                     *
*                                                                     *
*                             SJB1XBM   ON                            *
*                             SJB1XBMC  ON                            *
*                             SJB1XBWT  ON                            *
*                                                                     *
***********************************************************************
         SPACE 1
XKILLXBM OI    PITSTAT,PITBUSY     SHOW PIT IN USE
        $DEQSJB $SVJPXBM,XLOOKAGN  DE-QUEUE THE SJB
         B     XBMKILL             THEN BR TO KILL THE MONITOR
         SPACE 1
         CNOP  0,8
XBMCLAS  TM    PITSTAT,PITHALT1+PITHALTA  TEST PIT STATUS
         BNZ   XNEXTXBM            BR IF PIT IS HALTED
         IC    R1,SJBJCLAS         GET JOB CLASS FROM SJB
         N     R1,=A(QUECLASS)     CONVERT TO INTERNAL FORMAT
         LA    R15,X'3F'           GET MASK FOR RELATIVE CAT ENTRY
         NR    R15,R1              GET RELATIVE CAT ENTRY
         SLL   R15,5               MULTIPLY BY CAT ENTRY LENGTH
         AL    R15,$CATABLE        THEN POINT TO CAT ENTRY
         TM    CATJBOPT-CATDSECT(R15),CATQHELD  TEST FOR HELD CLS
         BO    XKILLXBM            BR IF SO
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        G E T   N E X T   B A T C H   M O N I T O R   J O B          *
*                                                                     *
***********************************************************************
         SPACE 1
        $QGET  (R1),XNOXBMJB       GET JOB FOR BATCH MONITOR
         BAL   R15,XBJCLJB         IF MONITOR JCL JOB,
         BNZ   XREQXBJB             BR TO REQUEUE IT
         BAL   LINK,XDUPTEST       TEST FOR DUPLICATE JOBNAME
         BNZ   XHAVEJCL            BR IF SO TO TRY AGAIN
         SPACE 1                                                     R4
***********************************************************************
*                                                                     *
*        H A V E   J O B   F O R   B A T C H   M O N I T O R          *
*                                                                     *
*                                                                     *
*                             SJB1XBM   ON                            *
*                             SJB1XBMC  OFF IF FIRST JOB              *
*                             SJB1XBMC  ON IF SUBSEQUENT JOB          *
*                             SJB1XBWT  OFF                           *
*                                                                     *
***********************************************************************
         SPACE 1
XBMJOB  $DEQSJB $SVJPXBM,XSJBLOST  DE-QUEUE THE SJB
         NI    SJBFLG1,255-SJB1XBWT  INDICATE BATCH MONITOR JOB
         NI    SJBFLG2,FF-SJB2CNCL RESET CANCEL FOR NEW JOB    @OZ64863
         B     XCLSJOB                AND BR TO POST WAITING TASK
         SPACE 1
         CNOP  4,8
XLOSTSJB BAL   LINK,XSJBUNLK       REMOVE SJB QUEUES LOCK
         SPACE 1
XSJBLOST BAL   LINK,XQSUSE         REQUEST ACCESS TO CHECKPOINT DATA
         SPACE 1
XJOBREQ  LA    LINK,XPXBMBR-XBRTABLE  BACK UP TO                    R41
         ST    LINK,XQOFFSET           SEARCH XBM QUEUE             R41
         IC    R0,JQETYPE          RE-QUEUE JOB
        $QPUT  (R1),(R0)            FOR EXECUTION
         B     XLOOKAGN             AND LOOK FOR MORE WORK TO DO
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        H A V E   X B M   J C L   J O B   F O R   L A T E R   S J B  *
*                                                                     *
***********************************************************************
         SPACE 1
XREQXBJB IC    R0,JQETYPE          RE-QUEUE JOB
        $QPUT  (R1),(R0)            FOR EXECUTION
         SPACE 1
***********************************************************************
*                                                                     *
*        G E T   N E X T   B A T C H   M O N I T O R   S J B          *
*                                                                     *
***********************************************************************
         SPACE 1
XNEXTXBM L     WA,SJBXQCHN         GET ADDRESS OF NEXT SJB
XNXTCONT LTR   WA,WA               TEST FOR END OF SJB CHAIN   @OZ43716
         BNZ   XPXBM               BR IF NO
         B     XJQNEXT              ELSE TRY NEXT SJB QUEUE
         SPACE 1
         CNOP  0,8                                                   R4
XNOXBMJB CLI   PITCLASS+1,C' '     WAS BATCHING CLASS THE ONLY ONE...
         BE    XNOJOB              BR IF SO
         LA    WE,1                ASSUME BATCHING CLASS WAS FIRST
         CLC   SJBJCLAS,PITCLASS   TEST ASSUMPTION
         BE    XGETCLJB            BR IF VALID
         EJECT
***********************************************************************
*                                                                     *
*        H A V E   A   P I T   -   T R Y   T O   G E T   A   J O B    *
*                                                                     *
***********************************************************************
         SPACE 1
XGOTPIT  SLR   WE,WE               CLEAR PIT CLASS COUNT
         SPACE 1
XGETCLJB IC    WD,PITCLASS(WE)     GET NEXT JOB CLASS FROM PIT
         LA    WE,1(,WE)           BUMP PIT CLASS COUNT
         CLM   WD,1,=C' '          TEST FOR END OF CLASS LIST
         BE    XNOJOB              BR IF SO
         N     WD,=A(QUECLASS)     ISOLATE JOB CLASS FOR $QGET
         LA    WB,X'3F'            GET MASK FOR RELATIVE CAT ENTRY
         NR    WB,WD               GET RELATIVE CAT ENTRY
         SLL   WB,5                MULTIPLY BY CAT ENTRY LENGTH
         AL    WB,$CATABLE         THEN POINT TO CAT ENTRY
         SPACE 1
         USING CATDSECT,WB         PROVIDE CAT ADDRESSABILITY
         SPACE 1
         TM    CATJOBFL,CATTSUJB+CATSTCJB  TEST FOR LOGON OR TASK
         BNZ   XGETCLJB            BR IF SO
         TM    CATJBOPT,CATQHELD   TEST FOR HELD CLASS
         BO    XGETCLJB            BR IF SO
        $QGET  (WD),XGETCLJB        ELSE TRY TO GET A JOB
         BAL   LINK,XDUPTEST       TEST FOR DUPLICATE JOB
         BNZ   XGOTPIT             BR IF SO TO RE-SCAN PIT
         ST    WB,XQCATAD          SAVE ADDRESS OF CAT         @OZ29151
         IC    R0,JQETYPE          PICK UP JOB CLASS
         O     R0,=A(255-QUECLASS)  AND MAKE PRINTABLE
         TM    CATJBOPT,CATXBACH   TEST FOR BATCHING JOB
         BO    XBMNCKPT            BR IF XBM BATCH JOB         @OZ40903
         $POST $HASPECF,CKPW       FORCE A CHECKPOINT          @OZ40903
        $WAIT  CKPT,INHIBIT=YES    WAIT FOR CKPT TO COMPLETE   @OZ62357
         B     XNOTXBJB            BRANCH TO NOT XBM JOB       @OZ40903
XBMNCKPT BAL   R15,XBJCLJB         IF MONITOR JCL JOB,         @OZ40903
         BNZ   XREQJCL             BR TO REQUEUE IT.           @OZ29151
         TM    PITFLAGS,PITXBM     TEST FOR BATCHING PIT
         BZ    XBMJOB1             BR IF NO
         L     WA,PITSJB            ELSE GET SJB ADDRESS FROM PIT
         CLM   R0,1,SJBJCLAS       TEST FOR JOB CLASS OF MONITOR
         BNE   XALTRNIT            BR IF NO
         B     XJOBREQ              ELSE RE-QUE JOB FOR XBM PROCESSING
         SPACE 2                                               @OZ29151
XREQJCL  CLC   XQOFFSET,=A(XPXBMBR-XBRTABLE) BR, NOT ALREADY   @OZ29151
         BNE   XJOBREQ             PROCESSING $SVJPXBM QUEUE.  @OZ29151
         IC    R0,JQETYPE          ELSE                        @OZ29151
         $QPUT (R1),(R0)            REQUEUE JOB AND            @OZ29151
         B     XNEXTXBM              GO FETCH NEXT SJB.        @OZ29151
         SPACE 1
         DROP  WB                  KILL CAT ADDRESSABILITY
         EJECT
***********************************************************************
*                                                                     *
*        R E - Q U E U E   J O B   F O R   N E W   M O N I T O R      *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
XBMJOB1 $DEQSJB $SVJPCLS,XLOSTSJB  DE-QUEUE AN SJB
         STCM  WA,7,PITSJB+1       SAVE SJB ADDRESS IN PIT
         LR    R0,R1               SAVE JQE                    @OZ40028
         SL    R0,$JOBQPTR          OFFSET                     @OZ40028
         ST    R0,SJBJQOFF           IN SJB                    @OZ40028
         ST    WF,SJBPIT           SAVE PIT ADDRESS IN SJB
         MVC   SJBPATID,PITPATID   SAVE PIT ID IN SJB
         OI    SJBFLG1,SJB1XBM     INDICATE BATCH MONITOR
         NI    PITSTAT,255-PITIDLE RESET PIT 'IDLE' MESSAGE SWITCH
         OI    PITSTAT,PITBUSY     SHOW PIT IN USE
         OI    PITFLAGS,PITXBM+PITXBJCL  SHOW XBM PIT AWAITING JCL
         MVC   SJBXBJNM(5),$XBATCHN       CONSTRUCT MONITOR          R4
         MVC   SJBXBJNM+5(1),JQETYPE       JOB /
         OI    SJBXBJNM+5,255-QUECLASS      PROCEDURE
         MVC   SJBXBJNM+6(2),PITPATID        NAME FIELD
         BAL   LINK,XID            PROVIDE HASP JOB ID IN SJB
         CLI   SJBXBJNM+6,C' '     AND LEFT-JUSTIFY
         BNE   *+14                     INIT
         MVC   SJBXBJNM+6(1),SJBXBJNM+7  ID
         MVI   SJBXBJNM+7,C' '            (IF NECESSARY)
         MVC   SJBJOBNM,JQEJNAME   SAVE JOB NAME IN CASE INIT CRASH
         LA    WD,$SVJPXBM         RE-QUEUE THE SJB
         BAL   LINK,XQUESJB         ON PENDING-BATCHING QUEUE
         BAL   LINK,XSJBUNLK       REMOVE SJB QUEUES LOCK
         BAL   LINK,XQSUSE         REQUEST ACCESS TO CHECKPOINT DATA
         NI    JQEFLAG2,255-QUESYSAF  FORCE AFFINITY
         OC    JQEFLAG2,$SIDAFF        TO CURRENT SYSTEM
        $QPUT  (R1),$XEQ           QUEUE JOB FOR JCL CONVERSION
         B     XLOOKAGN            THEN LOOK FOR MORE WORK TO DO
         EJECT
***********************************************************************
*                                                                     *
*        H A V E   N O N - B A T C H   M O N I T O R   J O B          *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
XNOTXBJB TM    PITFLAGS,PITXBM     TEST FOR BATCHING PIT
         BZ    XGETSJB             BR IF NO
         SPACE 1
XALTRNIT LA    WB,0(,WF)           SAVE CURRENT PIT ADDRESS          R4
         L     WF,$PITABLE         GET ADDRESS OF FIRST PIT
         SPACE 1
XPITAGN  TM    PITSTAT,PITBUSY+PITHOLD1+PITHOLDA+PITHALT1+PITHALTA
         BNZ   XPITTEST            BR IF PIT NOT READY TO USE
         TM    PITFLAGS,PITSIVER+PITSMVER START NOT VERIFIED,  @OZ39304
         BNZ   XPITTEST            ...BR TO TEST NEXT PIT      @OZ39304
         TM    PITFLAGS,PITXBM     TEST FOR BATCHING PIT
         BNO   XPITCHN             BR IF NOT SO.               @OZ29151
         TM    PITFLAGS,PITXBJCL   DO NOT CONSIDER IF          @OZ29151
         BO    XPITTEST             AWAITING JCL.              @OZ29151
         L     WA,PITSJB           ADDR OF SJB THIS PIT.       @OZ29151
         CLM   R0,1,SJBJCLAS       GO EXAMINE NEXT PIT IF      @OZ29151
         BNE   XPITTEST            THIS IDLE XBM WRONG CLASS.  @OZ29151
         IC    R0,JQETYPE          ELSE REQUEUE                @OZ29151
         $QPUT (R1),(R0)            JOB AND                    @OZ29151
         B     XPXBM                 GO FIRE UP XBM.           @OZ29151
XPITCHN  LA    R15,PITCLASS-1   SET UP TO CHAIN PIT CLS LIST.  @OZ29151
         SPACE 1
XPITCLAS LA    R15,1(,R15)         POINT TO NEXT PIT CLASS
         CLM   R0,1,0(R15)         TEST FOR MATCH WITH JOB CLASS
         BNE   XPITNULL            BR IF NOT SO.               @OZ29151
         L     R15,XQCATAD         ADDR OF CAT ENTRY.          @OZ29151
         TM    CATJBOPT-CATDSECT(R15),CATXBACH BR IF           @OZ29151
         BNO   XGETSJB             NOT BATCHING JOB.           @OZ29151
         L     WA,$SVJOB            ELSE SAVE 'NEST'INDICATOR  @OZ29151
         IC    R0,JQETYPE           GET JOB CLASS OF NEW XBM   @OZ29151
         $QPUT (R1),(R0)           REQUEUE JOB                 @OZ29151
         LTR   WA,WA               TEST SAVED 'NEST' INDIC.    @OZ29151
         BM    XJQNEXT             LOOK FOR MORE WORK IF SET.  @OZ29151
         NI    $SVJOB,255-X'80'      ELSE RESET $POST BIT      @OZ29151
         B     XJQNEXT               BEFORE TESTING NEXT Q.    @OZ29151
XPITNULL CLI   0(R15),C' '        TEST FOR END OF CLASS LIST.  @OZ29151
         BNE   XPITCLAS            BR IF NO
         SPACE 1
XPITTEST L     WF,PITNEXT          POINT TO NEXT PIT                 R4
         LTR   WF,WF               TEST FOR VALID PIT ADDRESS        R4
         BNZ   XPITAGN             BR IF SO                          R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        K I L L   M O N I T O R   T O   R E - U S E   P I T          *
*                                                                     *
***********************************************************************
         SPACE 1
         LR    WF,WB               RESTORE CURRENT PIT ADDRESS
         OI    PITSTAT,PITBUSY     SHOW PIT IN USE
         L     WA,PITSJB           GET SJB ADDRESS FROM PIT
        $DEQSJB $SVJPXBM,XREQJOB   DE-QUEUE THE SJB
         SL    R1,$JOBQPTR         SAVE JQE OFFSET             @OZ40028
         ST    R1,SJBJQOFF          IN SJB                     @OZ40028
         OI    SJBFLG1,SJB1XBMJ    SHOW NORMAL JOB CAUSED TERMINATION
        $ACTIVE                    BUMP ACTIVE COUNT UNTIL KILLED
         SPACE 1
XBMKILL  LA    WD,$SVJXCLS         RE-QUEUE THE SJB
         BAL   LINK,XQUESJB         ON EXECUTING-BY-CLASS QUEUE
         B     XPOSTSJB              AND BR TO POST WAITING TASK
         SPACE 1                                                     R4
***********************************************************************
*                                                                     *
*        G E T   S J B   F O R   N O N - X B M   J O B                *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
XGETSJB $DEQSJB $SVJPCLS,XUNLKSJB  DE-QUEUE AN SJB
         TM    SJBLKFG,SJBFIRST    SJB'S FIRST REQUEST...      @OZ71896
         BO    XSJBREQ             RESTART IF IT IS            @OZ71896
         TM    SJBFLG2,SJB2PNIT    TEST IF INIT IS DYING       @OZ66291
         BZ    XSJBOK              CONTINUE JOBSELECT IF NO    @OZ66291
XSJBREQ  LA    WD,$SVJPCLS         GET ADDR OF QUEUE           @OZ71896
         BAL   LINK,XQUESJB        AND REQUEUE SJB             @OZ66291
         MVI   $SVJOB,X'80'        GUARANTEE NEW SEARCH        @OZ66291
         B     XUNLKSJB            REQUEUE JOB AND START OVER  @OZ66291
XSJBOK   DS    0H                                              @OZ66291
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        H A V E   J O B   A N D   S J B                              *
*                                                                     *
***********************************************************************
         SPACE 1
         STCM  WA,7,PITSJB+1       SAVE SJB ADDRESS IN PIT
         ST    WF,SJBPIT           SAVE PIT ADDRESS IN SJB
         MVC   SJBPATID,PITPATID   MOVE PIT ID TO SJB
         SPACE 1
XCLSJOB  LA    WD,$SVJXCLS         GET JOB-IN-XEQ-BY-CLS QUEUE HDR
         NI    PITSTAT,255-PITIDLE RESET PIT 'IDLE' MSG SWITCH
         OI    PITSTAT,PITBUSY     SHOW PIT IN USE
         SPACE 1
XACTIVE $ACTIVE R=WE               INDICATE PROCESSOR ACTIVE
         SPACE 1
XIDJOB   MVC   SJBJCLAS,JQETYPE    MOVE JOB CLASS TO SJB
         OI    SJBJCLAS,255-QUECLASS  MAKE JOB CLASS PRINTABLE
         MVC   SJBPRIO,JQEPRIO     SET SELECTION PRIORITY
         BAL   LINK,XID            PROVIDE HASP JOB ID IN SJB
*                                  THIS LINE DELETED BY APAR   @OZ40028
         L     R0,JQETRAK          GET TRACK ADDRESS OF JCT
         ST    R0,SJBJCTRK          AND SAVE IN SJB
         SL    R1,$JOBQPTR         GET JQE OFFSET
         ST    R1,SJBJQOFF          AND SAVE IN SJB
         BAL   LINK,XQUESJB        THEN RE-QUEUE THE SJB
         B     XPOSTSJB             AND BR TO POST WAITING TASK
         SPACE 1
XUNLKSJB BAL   LINK,XSJBUNLK       REMOVE SJB QUEUES LOCK
         SPACE 1
XREQJOB  BAL   LINK,XQSUSE         REQUEST ACCESS TO CHECKPOINT DATA R4
         L     WA,$SVJOB           SAVE CURRENT 'NEST' INDICATOR     R4
         IC    R0,JQETYPE          RE-QUEUE JOB                      R4
        $QPUT  (R1),(R0)            FOR EXECUTION
         LTR   WA,WA               TEST SAVED 'NEST' INDICATOR       R4
         BM    XJQNEXT             BR IF SET                         R4
         NI    $SVJOB,255-X'80'     ELSE RESET $POST BIT             R4
         B     XJQNEXT             THEN BR TO TEST NEXT QUEUE        R4
         SPACE 1
         DROP  WF                  KILL PIT ADDRESSABILITY
         EJECT
         SPACE 5
***********************************************************************
*                                                                     *
*        C O N S T R U C T   H A S P   J O B   I D                    *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
XID      LH    R0,JQEJOBNO                  GET HASP JOB NUMBER
         CVD   R0,SJBDBLWK                   AND CONSTRUCT
         NI    SJBDBLWK+5,X'0F'               JCT-FORM
         MVC   SJBJOBID+2(6),=X'402020202021'  HASP
         ED    SJBJOBID+2(6),SJBDBLWK+5         JOB ID
         MVC   SJBJOBID(3),=C'JOB' ASSUME BATCH JOB
         CH    R0,=H'10000'        TEST ASSUMPTION
         BLR   LINK                RETURN IF VALID
         MVC   SJBJOBID(3),=C'STC' ASSUME STARTED TASK
         CH    R0,=H'20000'        TEST ASSUMPTION
         BLR   LINK                RETURN IF VALID
         MVC   SJBJOBID(3),=C'TSU'  ELSE MUST BE LOGON
         BR    LINK                RETURN
         EJECT
***********************************************************************
*                                                                     *
*        T E S T   F O R   D U P L I C A T E   J O B N A M E          *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
XDUPTEST LA    R1,0(,R1)             PREPARE
         L     WD,=V($QINDEX)         TO
         LA    WE,C'A'-(255-QUECLASS)  SCAN
         IC    WE,0(WD,WE)              EXECUTION
         LA    R15,72                    BY CLASS
         L     R0,$JOBQPTR                QUEUES
         SPACE 1
***********************************************************************
*                                                                     *
*        T E S T   F O R   E X E C U T I N G   D U P L I C A T E      *
*                                                                     *
***********************************************************************
         SPACE 1
XQUENEXT LA    WD,0(WE,R15)               PREPARE TO SCAN
         LA    WD,$JQHEADS-4-QUECHAIN(WD)  NEXT EXECUTION QUEUE
         SPACE 1
         USING JQEDSECT,WD         PROVIDE JQE ADDRESSABILITY
         SPACE 1
XJQENXT1 LH    WD,JQECHAIN         GET OFFSET
         N     WD,=X'0000FFFF'      OF NEXT JQE
         BZ    XQUEEND             BR IF END OF CURRENT QUEUE
         SLL   WD,2                 ELSE CONVERT OFFSET
         ALR   WD,R0                 TO ABSOLUTE ADDRESS
         CLC   JQEJNAME,QUEJNAME(R1)  IF JOB NAMES DON'T MATCH,
         BNE   XJQENXT1                BR TO TEST NEXT JQE
         CLR   WD,R1               IF CURRENT JOB,
         BE    XJQENXT1             BR TO TEST NEXT JQE
         TM    JQEFLAGS,QUEBUSY    IF JOB NOT ACTIVE,
         BZ    XJQENXT1             BR TO TEST NEXT JQE
         B     XDUPLJOB              ELSE BR TO REQUEUE CURRENT JOB
         SPACE 1
         CNOP  0,8
XQUEEND  BCTR  R15,0               IF ANOTHER EXECUTION QUEUE,      R41
         BCT   R15,XQUENEXT         BR TO SCAN IT                   R41
         EJECT
***********************************************************************
*                                                                     *
*        T E S T   F O R   C O N V E R T I N G   D U P L I C A T E    *
*                                                                     *
***********************************************************************
         SPACE 1
         L     WD,=V($QINDEX)           PREPARE
         LA    WE,$XEQ                   TO SCAN
         IC    WE,0(WD,WE)                CONVERSION
         LA    WD,$JQHEADS-2-QUECHAIN(WE)  QUEUE
         SPACE 1
XJQENXT2 LH    WD,JQECHAIN         GET OFFSET
         N     WD,=X'0000FFFF'      OF NEXT JQE
         BZR   LINK                RETURN IF END OF QUEUE WITH CC=0
         SLL   WD,2                 ELSE CONVERT OFFSET
         ALR   WD,R0                 TO ABSOLUTE ADDRESS
         CLC   JQEJNAME,QUEJNAME(R1)  IF JOB NAMES DON'T MATCH,
         BNE   XJQENXT2                BR TO TEST NEXT JQE
         CLC   JQEJOBNO,=H'10000'  IF NOT BATCH JOB,
         BNL   XJQENXT2             BR TO TEST NEXT JQE
         ST    R1,PCER1            SAVE INPUT JQE ADDRESS
         LR    R1,WD                AND RELOAD TEST JQE ADDRESS
         BAL   R15,XBJCLJB         TEST FOR MONITOR JCL JOB
         LR    WD,R1               RESTORE INPUT AND TEST
         L     R1,PCER1             JQE ADDRESSES
         BNZ   XDUPLJOB            BR IF MONITOR JCL JOB
         B     XJQENXT2             ELSE BR TO TEST NEXT JQE
         EJECT                                                 @OZ40028
***********************************************************************
*                                                                     *
*        T E S T   F O R   M O N I T O R   J C L   J O B              *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8                                             @OZ40028
XBJCLJB  LA    WE,$SVJPXBM-(SJBXQCHN-SJBDSECT)  PREPARE TO SCAN SJBS
         SL    R1,$JOBQPTR         REDUCE JQE ADDR TO OFFSET   @OZ40028
         SPACE 1
         USING SJBDSECT,WE         PROVIDE LOCAL SJB ADDRESSABILITY
         SPACE 1
XNEXTSJB ICM   WE,7,SJBXQCHN+1     IF NO MORE SJBS,
         BZ    XBJCLXIT             RETURN WITH CC=0           @OZ40028
         TM    SJBFLG1,SJB1XBMC    IF NOT AWAITING 1ST XBM JOB,
         BO    XNEXTSJB             BR TO TEST NEXT SJB
         CL    R1,SJBJQOFF         IF NOT AWAITING CURRENT JOB,@OZ40028
         BNE   XNEXTSJB             BR TO TEST NEXT SJB
         SPACE 1                                               @OZ40028
XBJCLXIT AL    R1,$JOBQPTR         RESTORE JQE ADDRESS         @OZ40028
         LTR   WE,WE               SET CONDITION CODE          @OZ40028
         BR    R15                  AND RETURN                 @OZ40028
         SPACE 1
         DROP  WE                  KILL LOCAL SJB ADDRESSABILITY
         SPACE 1                                                     R4
         CNOP  0,8
XDUPLJOB LR    WE,LINK             SAVE RETURN ADDRESS
         ST    R1,XEQWORK           AND JQE ADDRESS                 R41
         OI    QUEFLAGS(R1),QUEHOLD2  INDICATE JOB HELD
         IC    R0,QUETYPE(R1)          AND RE-QUEUE JOB
        $QPUT  (R1),(R0)                FOR EXECUTION
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        T E S T   T H I S   S Y S T E M   F O R   D U P L I C A T E  *
*                                                                     *
***********************************************************************
         SPACE 1
         IC    R0,JQEFLAGS         IF JOB
         N     R0,=A(QUEBUSY)       NOT EXECUTING
         CLM   R0,1,$SIDBUSY         ON CURRENT SYSTEM,
         BNER  WE                     RETURN WITH NON-ZERO CC
         L     WD,XEQWORK              ELSE PREPARE                 R41
         L     R1,$PITABLE              TO SCAN PITS
         SPACE 1
         USING PITDSECT,R1         PROVIDE PIT ADDRESSABILITY
         SPACE 1
XNEXTPIT CLR   R1,WF               IF CURRENT PIT,
         BE    XCONTPIT             BR TO TEST FOR ANOTHER PIT
         TM    PITSTAT,PITBUSY     IF PIT NOT ACTIVE,
         BZ    XCONTPIT             BR TO TEST FOR ANOTHER PIT
         L     R15,PITSJB                  IF DUPLICATE        @OZ40028
         L     R15,SJBJQOFF-SJBDSECT(,R15)  JOB EXECUTING      @OZ40028
         AL    R15,$JOBQPTR                  ON THIS           @OZ40028
         CLC   JQEJNAME,QUEJNAME(R15)         SYSTEM,          @OZ40028
         BE    XDUPTMSG                        BR TO ISSUE MSG @OZ40028
         SPACE 1
XCONTPIT L     R1,PITNEXT          POINT TO NEXT PIT                 R4
         LTR   R1,R1               TEST FOR VALID PIT ADDRESS        R4
         BNZ   XNEXTPIT            BR IF SO                          R4
         SLR   R1,R1                ELSE SET NON-ZERO CC             R4
         BR    WE                    AND RETURN                      R4
         SPACE 1
XDUPTMSG TM    PITSTAT,PITDUPL     IF MESSAGE ALREADY ISSUED,        R4
         BOR   WE                   RETURN WITH NON-ZERO CC
         OI    PITSTAT,PITDUPL       ELSE INDICATE DUPLICATE         R4
         SPACE 1
XDUPLWTO MVC   XMESSAGE(L'XDUPMSG),XDUPMSG  CONSTRUCT MESSAGE       R41
         MVC   XMESSAGE+2(8),JQEJNAME        IN WORK AREA
        $WTO   XMESSAGE,L'XDUPMSG,WAIT=NO,ROUTE=$LOG+$MAIN,            C
               CLASS=$NORMAL,PRI=$ST,JOB=NO
         SLR   R15,R15             SET NON-ZERO CC
         BR    WE                   AND RETURN
         SPACE 1
         DROP  R1,WD               KILL PIT, JQE ADDRESSABILITY
         EJECT
***********************************************************************
*                                                                     *
*        P R O C E S S   P E N D I N G - B Y - N U M B E R   Q U E U E*
*                                                                     *
***********************************************************************
         SPACE 1
         USING JQEDSECT,R1         PROVIDE JQE ADDRESSABILITY
         SPACE 1
         CNOP  0,8
XPBYNUM  CLI   SJBXQFN1+1,SSOBRQST TEST FOR 'REQUEST JOB ID'
         BE    XREQID              BR IF SO
         PACK  PCER1(8),SJBJOBID+3(5)  CONVERT JOB NUMBER
         CVB   R1,PCER1                 TO BINARY
         AL    R1,=F'10000'        ASSUME STARTED TASK
         CLI   SJBJOBID,C'S'       TEST ASSUMPTION
         BE    *+8                 BR IF VALID
         AL    R1,=F'10000'         ELSE ADJUST FOR LOGON
        $QLOC  (R1),XNJOBID        TRY TO LOCATE THE JOB
         CLI   JQETYPE,$INPUT      TEST QUEUE TYPE
         BE    XIDNEXT             BR IF JOB STILL ON READER
         TM    JQETYPE,$XEQ        RE-TEST QUEUE TYPE
         BZ    XNJOBID             BR IF JOB BYPASSED EXECUTION
         TM    JQETYPE,QUECLASS-$XEQ  ELSE RE-TEST QUEUE TYPE
         BNZ   XTESTJOB            BR IF NOT QUEUED FOR CONVERSION
         SPACE 1
***********************************************************************
*                                                                     *
*        J O B   N O T   R E A D Y   - -   G E T   N E X T   S J B    *
*                                                                     *
***********************************************************************
         SPACE 1
XIDNEXT  L     WA,SJBXQCHN         GET ADDRESS OF NEXT SJB
         LTR   WA,WA               TEST FOR END OF SJB CHAIN
         BNZ   XPBYNUM             BR IF NO
         B     XJQNEXT              ELSE TRY NEXT SJB QUEUE
         SPACE 1
         CNOP  0,8
XTESTJOB TM    JQEFLAGS,QUEBUSY    IF JOB ALREADY SELECTED,
         BNZ   XNJOBID              TREAT AS INVALID QUEUE LOCATION
         OC    JQEFLAGS,$SIDBUSY     ELSE SHOW JOB BEING PROCESSED
        $QCKPT (R1)                   AND FORCE CHECKPOINT OF JQE
         ST    R1,PCEJQE           STORE JQE ADDRESS           @OZ32566
         EJECT
***********************************************************************
*                                                                     *
*        H A V E   T S U   O R   S T C   J O B                        *
*                                                                     *
***********************************************************************
         SPACE 1
XJOBID  $DEQSJB $SVJPNUM,X04       DE-QUEUE THE SJB
         TM    SJBFLG2,SJB2EOM     TEST FOR END-OF-MEMORY
         BO    XIDJBEOM            BR IF SO
         LA    WD,$SVJXNUM         GET JOB-IN-XEQ-BY-NUM QUEUE HDR
         TM    JQEFLAG2,QUEINIT    IF INITIATOR OR SYSTEM LOG,
         BNO   XACTIVE             TREAT AS USER JOB                R41
         CLI   SJBXQFN1+1,SSOBRQST  REQUEST-JOB-ID...               R41
         BE    XIDJOB              BR IF YES (NOT AN INIT)          R41
         OI    SJBFLG2,SJB2INIT     ELSE SET INITIATOR FLAG         R41
         B     XIDJOB              BYPASS $ACTIVE                   R41
         SPACE 1
XIDJBEOM SLR   WB,WB               SHOW SJB
         ST    WB,SJBQUEUE          OFF ALL QUEUES
         LR    WD,R1               SAVE JQE ADDRESS
        $XMPOST SJBECBP            XM POST THE WAITING TASK
         BAL   LINK,XSJBUNLK       REMOVE THE SJB QUEUES LOCK
         BAL   LINK,XQSUSE         REQUEST ACCESS TO CHECKPOINT DATA
         LR    R1,WD               RESTORE JQE ADDRESS
         MVI   JQEPRIO,X'FF'       GIVE JOB EXPRESS PRIORITY
        $QMOD  (R1),$OUTPUT         AND QUEUE THE JOB FOR OUTPUT
         B     XLOOKAGN            THEN LOOK FOR MORE WORK TO DO
         SPACE 1
***********************************************************************
*                                                                     *
*        L O S T   A   T S U   O R   S T C   J O B                    *
*                                                                     *
***********************************************************************
         SPACE 1
XNJOBID $DEQSJB $SVJPNUM,X04       DE-QUEUE THE SJB
         TM    SJBFLG2,SJB2EOM     TEST FOR END-OF-MEMORY
         BO    XPOSTSJB            BR IF SO
         OI    SJBFLG2,SJB2JNFD     ELSE INDICATE JOB NOT FOUND
         B     XPOSTSJB              AND BR TO POST WAITING TASK
         EJECT
***********************************************************************
*                                                                     *
*        R E Q U E S T   J O B   I D   S U P P O R T                  *
*                                                                     *
***********************************************************************
         SPACE 1
         USING JCTDSECT,WB         PROVIDE JCT ADDRESSABILITY       R41
         SPACE 1
XREQID   STM   WA,BASE3,RMESSAGE+4 SAVE OUR REGISTERS          @OZ20655
         ST    BASE2,RMESSAGE+32   SAVE BASE REGISTER          @OZ20655
         LA    R4,=CL10'//SYSLOG'  POINT TO FAKE JOB CARD            R4
         MVC   PCEDCT,$XEQDCT      PROVIDE 'REQUEST ID' DCT    @OZ32566
         MVI   RPRIORTY,X'FF'      SET MAX PRIORITY FOR OUTPUT
         L     WB,=V(HASPRJCS)     LOAD BASE                        R41
         L     BASE2,=V(HASPRDR)    ADDRESSES FOR                    R4
         LA    WF,2048(,BASE2)       JOB CREATE                      R4
         LA    WF,2048(,WF)           ROUTINE                        R4
         LR    BASE3,WB            RELOAD HASPRJCS BASE             R41
         SLR   JCT,JCT             INDICATE NO CURRENT JOB
         BALR  LINK,BASE3          CREATE NEW 'STC' JOB
         ST    JCT,RMESSAGE+8      SAVE JCT ADDRESS                 R41
         LM    WA,BASE3,RMESSAGE+4 RESTORE OUR REGISTERS       @OZ20655
         L     BASE2,RMESSAGE+32   RESTORE BASE REGISTER       @OZ20655
         L     JCT,$SSVT           RESTORE SSVT ADDRESS        @OZ20655
         XC    XQOFFSET,XQOFFSET   RESET SJB QUEUE TABLE OFFSET     R41
         MVC   PCEDCT,$ZEROS       CLEAR THE DCT               @OZ32566
         XC    JCTCNVRC,JCTCNVRC   CLEAR CONVERTER RETURN CODE
         XC    JCTRDRON(8),JCTRDRON  CLEAR 'RDR' TIME/DATE ON
         OI    JCTJOBFL,JCTSTCJB+JCTNOJNL  INDICATE STC, NO JOURNAL
         MVI   JCTSMFLG,JCTNOUJP+JCTNOT26+JCTNOTY6  SET NO SMF
         L     IOT,RDRIOT          GET ADDRESS OF INPUT IOT
         ST    IOT,PCEBUFAD        SET BUFFER ADDRESS FOR $EXCP
         L     R1,$IOTPDDB                            SHOW JOB       R4
         ALR   R1,IOT                                  HAS NO        R4
         MVI   PDBFLAG1-PDBDSECT+IOTPDBOJ(R1),PDB1NULL  JCL          R4
         MVI   PCEDEVTP,PCEDAWR    SHOW WRITE OPERATION        @OZ32329
         L     R0,IOTTRACK-IOTDSECT(,IOT)  GET IOT TRACK ADDRESS    R41
         BAL   WE,XIO               AND WRITE THE OUTPUT IOT
        $FREEBUF (IOT)             FREE THE IOT BUFFER
         ST    WB,PCEBUFAD         SET BUFFER ADDRESS FOR $EXCP     R41
         L     R1,PCEJQE           GET ADDRESS OF JQE          @OZ32566
         L     R0,JQETRAK          GET JCT TRACK ADDRESS
         BAL   WE,XIO              AND WRITE THE JCT
         L     R1,PCEJQE           GET ADDRESS OF JQE          @OZ32566
        $QPUT  (R1),CATSTCCL-(255-QUECLASS)  RE-QUEUE FOR EXECUTION
         MVC   JQEPRTRT(4),JCTPROUT  SET DEFAULT ROUTE CODES
         OC    JQEFLAGS,$SIDBUSY   SHOW JOB BEING PROCESSED
         OI    JQEFLAG2,QUEINIT     AND TREAT AS OS/VS2 INITIATOR
        $FREEBUF (WB)              FREE THE JCT BUFFER              R41
         L     R1,PCEJQE           GET ADDRESS OF JQE          @OZ32566
         B     XJOBID              THEN BR TO POST WAITING TASK
         SPACE 1
         DROP  WB                  KILL JCT ADDRESSABILITY          R41
         EJECT
***********************************************************************
*                                                                     *
*        P R O C E S S   P E N D I N G - T E R M I N A T E   Q U E    *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
XPTERM   ICM   R0,15,$SVSPIOT      IF 'RECENT' SPIN/HOLD REQUEST(S),
         BNZ   XQSEARCH             GO PROCESS BEFORE TERMINATION
         TM    SJBFLG2,SJB2EOM     TEST FOR END-OF-MEMORY
         BZ    XTRMIN8             BR IF NO
         L     JCT,SJBJQOFF        GET JQE ADDRESS INTO        @OZ40028
         AL    JCT,$JOBQPTR         JCT FOR $WTO               @OZ40028
        $WTO   XEOMSG1,L'XEOMSG1,WAIT=YES,ROUTE=$LOG+$MAIN,         R41C
               CLASS=$ALWAYS,PRI=$HI,JOB=YES                        R41
         L     JCT,$SSVT           RESTORE SSVT ADDRESS             R41
         B     XTRMIN8             THEN BR TO COMPLETE JOB TERMINATION
         SPACE 1
***********************************************************************
*                                                                     *
*        L O S T   A N   S J B                                        *
*                                                                     *
***********************************************************************
         SPACE 1
X04     $ERROR                     SHOULD NOT HAVE LOST THIS SJB
         SPACE 1
         CNOP  0,8
XTRMIN8 $DEQSJB $SVJTERM,X04       DE-QUEUE THE SJB
         SLR   WF,WF               INDICATE NO PIT
         ST    WF,SJBQUEUE         INDICATE SJB DE-QUEUED
         TM    SJBFLG1,SJB1SJID    TEST FOR LOGON OR STARTED TASK
         BO    XQJOB               BR IF SO
         L     WF,SJBPIT           GET PIT ADDRESS FROM SJB
         SPACE 1
         USING PITDSECT,WF         PROVIDE PIT ADDRESSABILITY
         SPACE 1
         TM    SJBFLG2,SJB2PNIT    TEST FOR TERMINATING INITIATOR
         BZ    XNPINIT             BR IF NO
         EJECT
***********************************************************************
*                                                                     *
*        I N I T I A T O R   D R A I N I N G   - -   C L E A N   P I T*
*                                                                     *
***********************************************************************
         SPACE 1
         OI    PITSTAT,PITHOLD1    INDICATE PIT IS
         NI    PITSTAT,255-PITBUSY-PITINIT-PITIDLE  DRAINED
         NI    PITFLAGS,255-PITXBM-PITXBJCL  CLEAR XBM FLAGS
         TM    PITFLAGS,PITXBJCL   WAS PIT AWAITING JCL...
         BZ    XTESTXBM            BR IF NO TO TEST FOR IDLE MONITOR
         MVC   XEQWORK,SJBJOBNM    SAVE JOB NAME                    R41
        $XMPOST SJBECBP            XM POST THE WAITING TASK
         BAL   LINK,XSJBUNLK       REMOVE THE SJB QUEUES LOCK
         LA    WD,XEQWORK-QUEJNAME POINT TO PSEUDO JQE              R41
        $ACTIVE                      AND BUMP THE ACTIVE COUNT
         B     XJOBRLSE            THEN BR TO RELEASE ANY DUPLICATE JOB
         EJECT
***********************************************************************
*                                                                     *
*        N O R M A L   J O B   T E R M I N A T I O N                  *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
XNPINIT  NI    PITSTAT,255-PITBUSY  SHOW PIT AVAILABLE
         TM    SJBFLG1,SJB1XBM     TEST FOR EXECUTION BATCH JOB
         BO    XREQSJB             BR IF YES
         NI    PITFLAGS,255-PITXBM-PITXBJCL  CLEAR XBM FLAGS
         SPACE 1
XTESTXBM TM    SJBFLG1,SJB1XBWT    TEST FOR IDLE BATCH MONITOR
         BZ    XQJOB               BR IF NO
         NI    PITSTAT,255-PITIDLE  ELSE RESET PIT 'IDLE' MSG SWITCH
         TM    SJBFLG1,SJB1XBMJ    DID NORMAL JOB CAUSE TERMINATION...
         BZ    XPOSTSJB            BR IF NO TO XM POST THE WAITING TASK
         NI    SJBFLG1,255-SJB1XBMJ  ELSE RESET INDICATOR
         L     WD,SJBJQOFF         GET JQE OFFSET              @OZ40028
         AL    WD,$JOBQPTR         CONVERT OFFSET TO ADDRESS   @OZ40028
         MVC   SJBJQOFF,$ZEROS     CLEAR JQE OFFSET IN SJB     @OZ40028
        $XMPOST SJBECBP            XM POST THE WAITING TASK
         BAL   LINK,XSJBUNLK       REMOVE SJB QUEUES LOCK
         LR    R1,WD               RE-LOAD JQE ADDRESS
         IC    R0,JQETYPE          RE-QUEUE JOB
        $QPUT  (R1),(R0)            FOR EXECUTION
         B     XJOBRLSE            THEN BR TO RELEASE ANY DUPLICATE JOB
         SPACE 1
         CNOP  0,8
XREQSJB  LA    WD,$SVJPXBM         RE-QUEUE THE SJB
         BAL   LINK,XQUESJB         ON PENDING-BATCHING QUEUE
         EJECT
         USING JQEDSECT,WD         PROVIDE JQE ADDRESSABILITY
         SPACE 1
XQJOB    L     WD,SJBJQOFF         GET JQE OFFSET              @OZ40028
         AL    WD,$JOBQPTR         CONVERT OFFSET TO ADDRESS   @OZ40028
         LA    WB,$OUTPUT          ASSUME JOB IS NOT TO BE RE-RUN
         TM    SJBFLG1,SJB1EJOB    TEST ASSUMPTION
         BZ    XCLRSJB             BR IF VALID
         SPACE 1
XREXEQ   IC    WB,JQETYPE          PICK UP LOGICAL HASP QUEUE
         SPACE 1
XCLRSJB  MVC   SJBJQOFF,$ZEROS     CLEAR JQE OFFSET IN SJB     @OZ40028
         TM    $RUNOPTS,$TIMEOPT   TEST TIME EXCESSION OPTION        R4
         BZ    XJOBQ               BR IF NOT SET                     R4
         TM    SJBFLG1,SJB1SJID    IF LOGON OR STARTED TASK,
         BO    XJOBQ                BR TO AVOID STIMER CANCEL
        $TTIMER SJBSTQE,CANCEL     CANCEL REAL-TIME CLOCK
         MVI   SJBSTQE+IPOST,0     CLEAR TIMER POST BIT
         SPACE 1
XJOBQ    IC    WE,SJBPRIO          SAVE OUTPUT PRIORITY
         ICM   WE,2,SJBXQFN1+1     SAVE REQUEST TYPE                R41
         TM    SJBFLG2,SJB2PNIT    TEST FOR TERMINATING INITIATOR
         BO    *+12                BR IF SO
         TM    SJBFLG1,SJB1XBM     TEST FOR EXECUTION BATCH JOB
         BO    XPOSTED             BR IF SO
        $XMPOST SJBECBP            XM POST THE WAITING TASK
         SPACE 1
XPOSTED  BAL   LINK,XSJBUNLK       REMOVE THE SJB QUEUES LOCK
         BAL   LINK,XQSUSE         REQUEST ACCESS TO CHECKPOINT DATA
*              THIS LINE DELETED BY APAR NUMBER                @OZ26724
         CL    WB,=A($OUTPUT)      IS JOB TO BE RE-RUN...
         BE    XQMOD               BR IF NO
         CLM   WE,2,=AL1(SSOBRENQ) WAS THIS RE-ENQUEUE BY MVS...    R41
         BNE   XSYSOK              BR IF NO (DON'T RESTRICT SYSTEM) R41
         NI    JQEFLAG2,255-QUESYSAF ELSE ENSURE RE-EXECUTION
         OC    JQEFLAG2,$SIDAFF       ON CURRENT SYSTEM              R4
         SPACE 1                                                    R41
XSYSOK   TM    JQEFLAGS,QUEPURGE   WAS JOB PURGE REQUESTED...       R41
         BO    XQMOD               BR IF YES ($QMOD WILL KILL IT)   R41
         NI    JQEFLAGS,255-QUEOPCAN  ELSE INSURE RE-EXECUTION
         CLM   WE,1,JQEPRIO        SAME PRIORITY               @OZ26724
         BE    XQPUT               GO DO $QPUT                 @OZ26724
         B     XQMOD               DIFFERENT PRIORITY GO $QMOD @OZ26724
         EJECT
***********************************************************************
*                                                                     *
*        Q U E U E   J O B   F O R   N E X T   P H A S E              *
*                                                                     *
***********************************************************************
         SPACE 1
XQPUT   $QPUT  (WD),(WB)           RE-QUEUE THE JOB            @OZ26724
         B     XQMOD1              BYPASS $QMOD                @OZ26724
XQMOD    STC   WE,JQEPRIO          PUT IN NEW PRIORITY         @OZ26724
         $QMOD (WD),(WB)           REQUEUE THE JOB             @OZ26724
XQMOD1   LTR   WF,WF               TEST FOR PIT                @OZ26724
         BNZ   XTESTPIT            BR IF SO
         TM    JQEFLAG2,QUEINIT    IF NOT INITIATOR OR SYSTEM LOG,
         BZ    XDONE                BR TO INDICATE JOB INACTIVE
         NI    JQEFLAG2,255-QUEINIT  ELSE RESET INIT BIT
         B     XTSTIND                AND BR TO TEST OPERATING MODE
         SPACE 1
XDONE   $DORMANT                   INDICATE PROCESSOR INACTIVE
         SPACE 1
XTSTIND  TM    $STATUS,$INDMODE    IF NOT IN INDEPENDENT MODE,
         BZ    XLOOKAGN             BR TO LOOK FOR MORE WORK TO DO
         OI    JQEFLAG2,QUEINDAF     ELSE ALLOW IND MODE SELECTION
         B     XLOOKAGN            THEN LOOK FOR MORE WORK TO DO
         EJECT
         CNOP  0,8
XTESTPIT TM    PITSTAT,PITHOLD1+PITHOLDA+PITHALT1+PITHALTA  TEST PIT
         BZ    XJOBRLSE            BR IF NOT DRAINED OR HALTED
         LA    R1,XDRNMSG                ISSUE
         TM    PITSTAT,PITHOLD1+PITHOLDA  APPROPRIATE
         BNZ   *+8                         MESSAGE
         LA    R1,XHALTMSG                  TO
         BAL   WE,XPITMSG                    OPERATOR
         BAL   LINK,XQSUSE         REQUEST ACCESS TO CHECKPOINT DATA
         SPACE 1
***********************************************************************
*                                                                     *
*        R E L E A S E   A N Y   D U P L I C A T E   J O B S          *
*                                                                     *
***********************************************************************
         SPACE 1
XJOBRLSE NI    PITSTAT,255-PITDUPL RESET DUPLICATION INDICATOR       R4
         LA    WB,72                 PREPARE
         L     R1,=V($QINDEX)         TO SCAN
         LA    WE,C'A'-(255-QUECLASS)  EXECUTION
         IC    WE,0(R1,WE)              QUEUES
         SPACE 1
         DROP  WD                  KILL CURRENT JQE ADDRESSABILITY
         SPACE 1
         CNOP  0,8
XQNXT    LA    R1,0(WB,WE)                POINT TO START
         LA    R1,$JQHEADS-4-QUECHAIN(R1)  OF NEXT QUEUE
         SPACE 1
XNEXTJQE LH    R1,JQECHAIN         GET OFFSET
         N     R1,=X'0000FFFF'      OF NEXT JQE
         BZ    XNXTQ               BR IF END OF QUEUE
         SLL   R1,2                 ELSE CONVERT OFFSET
         AL    R1,$JOBQPTR           TO ABSOLUTE ADDRESS
         TM    JQEFLAGS,QUEHOLD2   TEST FOR DUPLICATE NAME FLAG
         BZ    XNEXTJQE            BR IF NO
         CLC   JQEJNAME,QUEJNAME(WD)  TEST FOR SAME AS CURRENT JOB
         BNE   XNEXTJQE            BR IF NO
         NI    JQEFLAGS,255-QUEHOLD2  ELSE RESET HOLD BIT
        $QCKPT (R1)                    AND FORCE CHECKPOINT OF JQE
         B     XNEXTJQE            THEN BR TO TEST NEXT JQE
         SPACE 1
         CNOP  0,8                                                   R4
XNXTQ    BCTR  WB,0                IF ANOTHER EXECUTION QUEUE,
         BCT   WB,XQNXT             BR TO SCAN IT
         SPACE 1
        $DORMANT                   INDICATE PROCESSOR INACTIVE
         B     XLOOKAGN            THEN LOOK FOR MORE WORK TO DO
         EJECT
***********************************************************************
*                                                                     *
*        P R O C E S S   P E N D I N G - R E Q U E U E   Q U E U E    *
*                                                                     *
***********************************************************************
         SPACE 1
         USING JQEDSECT,WD         RESTORE OLD JQE ADDRESSABILITY
         SPACE 1
         CNOP  0,8
XPRENQ   TM    SJBFLG2,SJB2EOM     TEST FOR END-OF-MEMORY
         BZ    XREENQ              BR IF NO
         L     JCT,SJBJQOFF        GET JQE ADDRESS INTO        @OZ40028
         AL    JCT,$JOBQPTR         JCT FOR $WTO               @OZ40028
        $WTO   XEOMSG2,L'XEOMSG2,WAIT=YES,ROUTE=$LOG+$MAIN,         R41C
               CLASS=$ALWAYS,PRI=$HI,JOB=YES                        R41
         L     JCT,$SSVT           RESTORE SSVT ADDRESS             R41
        $GETBUF WAIT=YES           GET BUFFER FOR JCT                R4
         ST    R1,PCEBUFAD         SET BUFFER ADDRESS FOR $EXCP      R4
         LR    WB,R1               RELOAD BUFFER ADDRESS            R41
         MVI   PCEDEVTP,PCEDARD    INDICATE READ OPERATION           R4
         L     R0,SJBJCTRK         GET JCT TRACK ADDRESS             R4
         BAL   WE,XIO              READ IN THE JCT                   R4
         MVI   PCEDEVTP,PCEDAWR    RESET FOR WRITE OPERATIONS        R4
         BNO   XFREEBF             BR IF I/O ERROR                   R4
         MVI   JCTJSFLG-JCTDSECT(WB),SSJSWARM  FORCE JOB WARM START R41
         L     R0,SJBJCTRK         RELOAD JCT TRACK ADDRESS          R4
         BAL   WE,XIO               AND WRITE THE JCT                R4
         SPACE 1                                                     R4
XFREEBF $FREEBUF (WB)              FREE THE JCT BUFFER              R41
         EJECT                                                       R4
XREENQ  $DEQSJB $SVJRENQ,X04       DE-QUEUE THE SJB
         SLR   R0,R0               SHOW SJB
         ST    R0,SJBQUEUE          DE-QUEUED
         L     WD,SJBJQOFF         GET JQE OFFSET              @OZ40028
         AL    WD,$JOBQPTR         CONVERT OFFSET TO ADDRESS   @OZ40028
         L     WF,SJBPIT           GET PIT ADDRESS FROM SJB
         TM    SJBFLG2,SJB2PNIT    TEST FOR TERMINATION INIT   @OZ66494
         BZ    XJREQ               BR IF NO                    @OZ66494
         OI    PITSTAT,PITHOLD1    INDICATE PIT IS DRAINED     @OZ66494
         NI    PITSTAT,FF-PITBUSY-PITINIT-PITIDLE              @OZ66494
         NI    PITFLAGS,FF-PITXBM-PITXBJCL CLEAR XBM FLAGS     @OZ66494
XJREQ    DS    0H                                              @OZ66494
         NI    PITSTAT,255-PITBUSY  AND SHOW PIT AVAILABLE
         MVC   SJBPRIO,JQEPRIO     RESET SELECTION PRIORITY
         TM    SJBFLG2,SJB2HOLD    TEST HOLD FLAG                    R4
         BZ    XREXEQ              BR IF NOT SET
         BAL   LINK,XSJBUNLK        ELSE REMOVE SJB QUEUES LOCK
         BAL   LINK,XQSUSE         REQUEST ACCESS TO CHECKPOINT DATA
         OI    JQEFLAGS,QUEHOLD1   CAUSE JOB TO BE HELD
        $QCKPT (WD)                FORCE CHECKPOINT OF JQE
         BAL   LINK,XSJBLOCK       THEN RESTORE SJB QUEUES LOCK
         B     XREXEQ               AND BR TO RE-QUEUE THE JOB
         SPACE 1
         DROP  R1,WD,WF            KILL JQE, PIT ADDRESSABILITY
         TITLE 'HASP EXECUTION PROCESSOR -- SPIN/HOLD DATA SET SUPPORT'
***********************************************************************
*                                                                     *
*        P R O C E S S   S P I N / H O L D   R E Q U E S T            *
*                                                                     *
***********************************************************************
         SPACE 1
         USING JQEDSECT,R1         PROVIDE JQE ADDRESSABILITY
         USING IOTDSECT,IOT        PROVIDE IOT ADDRESSABILITY
         USING PDBDSECT,PDDB       PROVIDE PDDB ADDRESSABILITY
         SPACE 1
***********************************************************************
*                                                                     *
*        F I F O - O R D E R   S P I N / H O L D   R E Q U E S T S    *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
XSPNHLD  LR    R0,IOT              FIFO ORDER
         LR    IOT,R1               SPIN/HOLD
         ICM   R1,15,IOTIOT          IOTS
         ST    R0,IOTIOT              ON
         BNZ   XSPNHLD                 SSVT QUEUE
         SPACE 1
         ST    IOT,$SVFIFOQ        SAVE ADDRESS OF FIFO QUEUE
         BAL   LINK,XQSUSE         REQUEST ACCESS TO CHECKPOINT DATA
         SPACE 1
***********************************************************************
*                                                                     *
*        P R O C E S S   N E X T   S P I N / H O L D   R E Q U E S T  *
*                                                                     *
***********************************************************************
         SPACE 1
XSPRQST  L     R1,IOTJQOFF         GET JQE ADDRESS
         AL    R1,$JOBQPTR          FROM IOT
         TM    JQEFLAGS,QUEPURGE   IF JOB IS BEING CANCELLED,
         BO    XSPURGE              IGNORE SPIN/HOLD REQUEST        R41
         L     PDDB,$IOTPDDB       POINT TO                          R4
         ALR   PDDB,IOT             SPIN/HOLD PDDB                   R4
         TM    PDBFLAG1,PDB1HOLD   IF HOLD REQUEST,
         BO    XSPHOLD              BR TO HOLD SUPPORT
         TM    PDBFLAG1,PDB1NSOT   IF NOT PRINTABLE,           @OZ39639
         BO    XSPURGE              IGNORE SPIN REQUEST        @OZ39639
         EJECT
***********************************************************************
*                                                                     *
*        P R O C E S S   J E S N E W S   D A T A   S E T       @OZ39639
*                                                                     *
***********************************************************************
         SPACE 1
         USING JOEDSECT,WD         PROVIDE JOE ADDRESSABILITY
         SPACE 1                                               @OZ39639
XSPIN    TM    IOTFLAG1,IOT1NEWS   JESNEWS IOT...              @OZ39639
         BZ    XSPINJOE            BR IF NO                    @OZ39639
         MVC   XMESSAGE(L'XNEWSMSG),XNEWSMSG ASSUME 'REPLACED' @OZ39639
         TM    PDBFLAG1,PDB1NULL   EMPTY DATA SET...           @OZ39639
         BZ    XSPINEWS            BR IF NO TO REPLACE JESNEWS @OZ39639
         MVC   $NEWSIOT(L'$NEWSIOT+L'$NEWSTTR),$ZEROS  ELSE,   @OZ39639
         MVC   XNEWSMRD+XMESSAGE,=CL8'DELETED'  DELETE JESNEWS @OZ39639
         B     XSNEWSW             BR TO TELL OPERATOR         @OZ39639
         SPACE 1                                               @OZ39639
XSPINEWS NI    IOTFLAG1,FF-IOT1ALOC-IOT1NEWS  DISOWN NEWS      @OZ39639
         OI    PDBFLAG1,PDB1NSOT   DELETE DATA SET FROM JOB    @OZ39639
         ST    IOT,PCEBUFAD        SET BUFFER ADDR FOR $EXCP   @OZ39639
        $BFRBLD (IOT)               AND BUILD AN IOB IN IT     @OZ39639
         MVI   PCEDEVTP,PCEDAWR    RE-WRITE                    @OZ39639
         L     R0,IOTTRACK          JOB'S IOT                  @OZ39639
         BAL   WE,XIO                TO THE SPOOL              @OZ39639
         SPACE 1                                               @OZ39639
         OI    IOTFLAG1,IOT1ALOC+IOT1NEWS  SET NEWS INDICATION @OZ39639
         NI    PDBFLAG1,FF-PDB1NSOT        SHOW PRINTABLE      @OZ39639
         MVC   IOTJBKEY,=C'$$NE'   UPDATE IOT JOB KEY          @OZ39639
        $TRACK IOTMSTAB            OBTAIN NEW IOT MTTR         @OZ39639
         ST    R1,IOTTRACK         UPDATE IOT TRACK ADDRESS    @OZ39639
         LR    R0,R1               WRITE NEW JESNEWS IOT       @OZ39639
         BAL   WE,XIO               TO THE SPOOL               @OZ39639
         BAL   LINK,XQSUSE         REGAIN ACCESS TO QUEUES     @OZ39639
         MVC   $NEWSIOT,IOTTRACK   UPDATE JESNEWS IOT POINTER  @OZ39639
         MVC   $NEWSTTR,PDBMTTR    UPDATE JESNEWS DS  POINTER  @OZ39639
         SPACE 1                                               @OZ39639
XSNEWSW  L     R10,IOTJQOFF        POINT TO JQE                @OZ39639
         AL    R10,$JOBQPTR         FOR JOB=YES MESSAGE        @OZ39639
        $WTO   XMESSAGE,L'XNEWSMSG,JOB=YES,WAIT=NO, TELL OPER  @OZ39639*
               ROUTE=$UR+$MAIN+$LOG,CLASS=$NORMAL,PRI=$ST      @OZ39639
         L     R10,$SSVT           RESTORE SSVT BASE           @OZ39639
         B     XSPFRIOT            BR TO BYPASS JOE CREATION   @OZ39639
         EJECT                                                 @OZ39639
***************************************************************@OZ39639
*                                                              @OZ39639
*        S P I N - O F F   A   D A T A   S E T                 @OZ39639
*                                                              @OZ39639
***************************************************************@OZ39639
         SPACE 1                                               @OZ39639
XSPINJOE TM    PDBFLAG1,PDB1NULL   IF DATA SET IS EMPTY,       @OZ39639
         BNZ   XSPURGE              IGNORE SPIN REQUEST        @OZ39639
         LA    WD,XMESSAGE         POINT TO WORK AREA FOR JOES @OZ39639
        $#BLD  JOES=(WD),PDDB=(PDDB),JQE=IOTJQOFF CREATE WK/CH @OZ39639
         MVI   JOEFLAG,$JOESPIN    SET WORK JOE TO 'SPIN' TYPE @OZ39639
         MVC   JOEIOTTR,IOTTRACK   PUT SPIN IOT TTR IN WORK JOE@OZ39639
         LA    R1,JOESIZE(,WD)     POINT TO CHARACTERISTICS JOE
        $#ADD  CHAR=(R1),WORK=(WD) ADD JOE TO JOT                    R4
         BZ    XSPFRIOT            BR IF $#ADD SUCCESSFUL
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        N O   R O O M   I N   J O T                                  *
*                                                                     *
***********************************************************************
         SPACE 1
         NI    PDBFLAG1,255-PDB1PSO  INDICATE DATA SET
         OI    PDBFLAG1,PDB1HOLD      ON SPIN QUEUE (NOT IN JOT)
         ST    IOT,PCEBUFAD        SET BUFFER ADDRESS FOR $EXCP
        $BFRBLD (IOT)              BUILD IOB IN IOT BUFFER
         MVI   PCEDEVTP,PCEDAWR    SHOW WRITE OPERATION        @OZ32329
         SPACE 1
XSPWRIOT MVC   IOTSPIOT,$UNSPUNQ   LIFO QUEUE
         L     R0,IOTTRACK          IOT TO
         BAL   WE,XIO                SPIN
         BAL   LINK,XQSUSE            QUEUE
         CLC   IOTSPIOT,$UNSPUNQ       USING
         BNE   XSPWRIOT                 'COMPARE AND SWAP'
         SPACE 1
         MVC   $UNSPUNQ,IOTTRACK   UPDATE POINTER TO 1ST SPIN IOT
         L     R1,IOTJQOFF         GET JQE ADDRESS
         AL    R1,$JOBQPTR          FROM IOT
         LH    R0,JQEHLDCT         INCREMENT                   @OZ27300
         AL    R0,=A(X'10')         JOB HELD                   @OZ27300
         STH   R0,JQEHLDCT           DATASET COUNT             @OZ27300
        $QCKPT (R1)                FORCE CHECKPOINT OF JQE
         B     XSPFRIOT            THEN BR TO FREE THE IOT
         SPACE 1
         DROP  WD                  KILL JOE ADDRESSABILITY
         EJECT
***********************************************************************
*                                                                     *
*        H O L D   A   D A T A   S E T                                *
*                                                                     *
***********************************************************************
         SPACE 1
*                                  THIS LINE DELETED BY APAR   @OZ36864
*                                  THIS LINE DELETED BY APAR   @OZ36864
*                                  THIS LINE DELETED BY APAR   @OZ36864
XSPHOLD  ST    IOT,PCEBUFAD        SET BUFFER ADDR FOR $EXCP   @OZ36864
        $BFRBLD (IOT)              BUILD IOB IN IOT BUFFER     @OZ35742
         NI    IOTFLAG1,255-IOT1NTPR RESET NOT PROCESSED FLAG  @OZ35742
         MVI   PCEDEVTP,PCEDAWR    INDICATE WRITE OPERATION    @OZ35742
         L     R0,IOTTRACK         GET SEEK ADDRESS FOR $EXCP  @OZ35742
         BAL   WE,XIO              REWRITE IOT                 @OZ35742
         BAL   LINK,XQSUSE         REQUEST ACCESS TO CHKT DATA @OZ35742
         TM    BUFECBCC-BUFDSECT(IOT),X'7F'  GOOD COMPLETION...@OZ35742
         BM    XIOTBAD             BR IF I/O ERROR             @OZ35742
         SPACE 1                                               @OZ36864
XIOTOK   MVC   $SVFIFOQ,IOTIOT     DE-CHAIN IOT                @OZ36864
         L     R1,IOTJQOFF         REFRESH JQE ADDRESS         @OZ36864
         AL    R1,$JOBQPTR          FROM IOT                   @OZ35742
         LA    WE,$SVHOLDQ-(IOTIOT-IOTDSECT)  PREPARE TO SCAN HOLD Q
         SPACE 1
         LR    WD,WE               SAVE LAST IOT ADDRESS
         ICM   WE,7,IOTIOT+1-IOTDSECT(WD)  POINT TO NEXT IOT
         BNZ   *-6                 LOOP IF VALID CHAIN ADDRESS
         SPACE 1
         ST    IOT,IOTIOT-IOTDSECT(,WD)  ADD IOT TO
         ST    WE,IOTIOT                  END OF HOLD REQUEST QUEUE
         LH    R0,JQEHLDCT         BUMP
         AL    R0,=A(X'10')         HOLD                             R4
         STH   R0,JQEHLDCT           COUNT                           R4
         TM    PDBFLAG1,PDB1DSID   IF HELD                           R4
         BZ    *+8                  FOR 3540,                        R4
         OI    JQEHLDCT+1,JQEHLDDS   SET 3540 FLAG IN JQE            R4
        $QCKPT (R1)                FORCE CHECKPOINT OF JQE
         L     R1,$HOLDPCE         GET HOLD QUEUE PROCESSOR PCE ADDR R4
        $POST  (R1),WORK            AND WAKE HIM UP
         B     XSPNEXT             THEN BR TO GET NEXT IOT
         EJECT                                                 @OZ35742
*************************************************************  @OZ35742
*        THIS CODE IS ENTERED IF AN ERROR OCCURS UPDATING THE  @OZ35742
*        IOT TO INDICATE THAT IT HAS BEEN PASSED TO THE HOLD   @OZ35742
*        PROCESSOR (FOR WARM START).  THE HOLD PROCESSOR WILL  @OZ35742
*        STILL BUILD AN HQR FOR THIS DATASET, SO THAT THE HQT  @OZ35742
*        WILL BE FORMATTED EVEN IF THE IOT FOR THE FIRST HELD  @OZ35742
*        DATASET MAY BE UNREADABLE. IN THE EVENT OF A CRASH,   @OZ35742
*        THE IOT WILL PROBABLY BE UNRECOVERABLE, AND SO WILL   @OZ35742
*        NOT BE PROCESSED TWICE.                               @OZ35742
*************************************************************  @OZ35742
XIOTBAD  $DISTERR                  ISSUE DISASTROUS ERROR MSG  @OZ35742
         BAL   LINK,XQSUSE         REQUEST ACCESS TO CKPT DATA @OZ35742
         B     XIOTOK              BR TO FINISH PROCESSING     @OZ35742
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        FREE TRACKS OF DELETED DATA SET (IF ANY)                     *
*                                                                     *
***********************************************************************
         SPACE 1                                                    R41
XSPURGE  TM    IOTFLAG1,IOT1ALOC   ALLOCATION IOT...                R41
         BZ    XSPFRIOT            BR IF NO                         R41
        $PURGE IOTTGMAP            FREE DATA SET'S TRACKS           R41
         NI    IOTFLAG1,255-IOT1ALOC  CLEAR ALLOCATION FLAG         R41
         ST    IOT,PCEBUFAD        SET BUFFER ADDRESS FOR $EXCP     R41
        $BFRBLD (IOT)              BUILD IOB IN IOT BUFFER          R41
         L     R0,IOTTRACK         GET IOT TRACK ADDRESS            R41
         MVI   PCEDEVTP,PCEDAWR    SHOW WRITE OPERATION        @OZ31178
         BAL   WE,XIO              RE-WRITE IOT                     R41
         BAL   LINK,XQSUSE         REQUEST ACCESS TO CKPT DATA      R41
         SPACE 1                                                    R41
***********************************************************************
*                                                                     *
*        F R E E   I O T   B U F F E R                                *
*                                                                     *
***********************************************************************
         SPACE 1
XSPFRIOT L     R0,IOTIOT           DE-CHAIN IOT
         ST    R0,$SVFIFOQ          FROM FIFO QUEUE
         LH    R0,IOTLENG          GET LENGTH OF IOT
         ICM   R0,8,=AL1(231)      PROVIDE BUFFER SUBPOOL NUMBER
         LR    R1,IOT              GET IOT ADDRESS
         FREEMAIN R,LV=(0),A=(1)   FREE THE IOT BUFFER               R4
         SPACE 1
***********************************************************************
*                                                                     *
*        G E T   N E X T   R E Q U E S T   ( I F   A N Y )            *
*                                                                     *
***********************************************************************
         SPACE 1
XSPNEXT  ICM   IOT,15,$SVFIFOQ     GET ADDRESS OF NEXT SPIN/HOLD IOT
         BZ    XQSEARCH            BR IF DONE TO FIND OTHER WORK
         B     XSPRQST              ELSE BR TO PROCESS REQUEST
         SPACE 1
         DROP  R1,PDDB,IOT         KILL CTL BLOCK ADDRESSABILITY
         TITLE 'HASP EXECUTION PROCESSOR -- CANCEL/STATUS SUPPORT'
***********************************************************************
*                                                                     *
*        ENTRY POINT TO PERFORM CANCEL/STATUS FUNCTIONS FOR TSO USER  *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
XPTCS    BAL   LINK,XQSUSE         REQUEST ACCESS TO CHECKPOINT DATA
         CLI   SJBTFUNC+1,SSOBCANC IS THIS CANCEL
         BE    XTCS                SKIP GET CELL IF CANCEL
         LH    WC,SJBTDIMP         PICK UP SIZE
         LR    R0,R2               COPY SJB ADDRESS
         L     R1,SJBTCB           PICK UP TCB ADDRESS
        $GETCEL SJB=(R0),TCB=(R1),SIZE=(R4),NONE=XTPOST GET CELL
         ST    R1,SJBTAREA         SET AREA ADDRESS
         MVC   SJBTCCE,0(R1)       COPY CCE POINTER
         SPACE 1
XTCS     DS    0H
         LA    WD,L'JQEJNAME-1     GET LENGTH FOR JOBNAME CLC
         TM    SJBTFLGS,SSCSUSID   DOES USER WANT TO SEARCH ON USER ID
         BZ    XTCSGO              IF NOT GO TO IT
         IC    WD,SJBTULEN         PICK UP USER ID LENGTH
         BCTR  WD,0                REDUCE BY 1
         SPACE 1
XTCSGO   LA    R15,$JQTYPES*2             PREPARE
         ST    R15,XEQWORK                 TO SCAN                  R41
         LA    R1,$JQHEADS-2-QUECHAIN(R15)  ACTIVE JOB QUEUES
         SPACE 1
         USING JQEDSECT,R1         PROVIDE JQE ADDRESSABILITY
         SPACE 1
         BAL   XL1,XTJSCN          SCAN FOR JOB
         B     XTJNFND             EXIT IF NOT FOUND        +0
         L     WB,SJBTJOBI         PICK UP JOB NUMBER       +4
         LTR   WB,WB               TEST FOR VALID POINTER
         BNZ   XTCKJN              IF NOT ZERO LOCATE SINGLE JOB
         CLI   SJBTFUNC+1,SSOBCANC IS THIS CANCEL
         BNE   XTMULTST            IF NOT, MUST BE MULTIPLE STATUS
         EJECT
***********************************************************************
*                                                                     *
*        SINGLE JOB CANCEL REQUEST WITHOUT JOB NUMBER                 *
*                                                                     *
***********************************************************************
         SPACE 1
         LR    WB,R1               SAVE CURRENT JQE
         BAL   XL1,XTJSCN          CONTINUE SCAN
         B     XTCANA              IF NONE FOUND GO AHEAD   +0
         LA    R0,SSCSNCAN         IF FOUND SET ERROR       +4
         B     XTCSSRET            DUPLICATE JOBS WITH JOB NAME
         SPACE 1
         CNOP  0,8
XTCANA   LR    R1,WB               RESTORE JQE POINTER
         B     XTCAN               TRY CANCEL
         SPACE 1
***********************************************************************
*                                                                     *
*        SINGLE JOB CANCEL/STATUS REQUEST - FIND JQE BY JOB NAME      *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
XTCKJN   CH    WB,JQEJOBNO         IS THIS THE JOB
         BE    XTPCSFUN            PERFORM CANCEL/STATUS IF SO
         BAL   XL1,XTJSCN          CONTINUE SCAN
         B     XTRCNVAL            EXIT WITH INVALID COMB   +0
         B     XTCKJN              CHECK JOB NUMBER         +4
         SPACE 1
***********************************************************************
*                                                                     *
*        A JOB WAS FOUND FOR SINGLE REQUEST - DO CANCEL/STATUS        *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
XTPCSFUN CLI   SJBTFUNC+1,SSOBCANC IS THIS REQUEST FOR CANCEL
         BNE   XTSINGST            MUST BE STATUS IF NOT
         EJECT
***********************************************************************
*                                                                     *
*        CANCEL REQUEST - TRY TO CANCEL JOB                           *
*                                                                     *
***********************************************************************
         SPACE 1
XTCAN    $JCAN ENTER=NO,TYPE=CANXEQ SETUP FOR CANCEL EXECUTION
         TM    SJBTFLGS,SSCSCOUT   CHECK FOR PURGE
         BZ    XTCANIT             CANCEL IF NOT
         $JCAN ENTER=NO,TYPE=CANALL SETUP FOR CANCEL ALL
         SPACE 1
XTCANIT  $JCAN JQE=(R1),NOTJOB=XTCSNJOB,NOP=XTCSOUT
         SPACE 1
***********************************************************************
*                                                                     *
*        RETURN WITH OK OR OTHER CODE                                 *
*                                                                     *
***********************************************************************
         SPACE 1
XTCSROK  LA    R0,SSCSRTOK         SET
         SPACE 1
XTCSSRET STH   R0,SJBTRETB         SSOBRETN CODE
         LA    R0,SSRTOK           SET
         STH   R0,SJBTRETR         R15 RETURN
         SPACE 1
XTPOST  $XMPOST SJBECBP            XM POST THE WAITING TASK
         B     XQSEARCH            THEN LOOK FOR MORE WORK TO DO
         SPACE 1
         CNOP  0,8
XTJNFND  LA    R0,SSCSNOJB         SET
         B     XTCSSRET            JOB NOT FOUND
         SPACE 1
XTRCNVAL LA    R0,SSCSBADI         SET
         B     XTCSSRET            INVALID COMBINATION
         SPACE 1
XTCSOUT  LA    R0,SSCSOUTP         SET
         B     XTCSSRET            JOB NOT CANCELLED - ON OUTPUT Q
         SPACE 1
XTCSNJOB LA    R0,SSCSICAN         SET INVALID CANCEL REQUEST
         B     XTCSSRET            EXIT
         EJECT
***********************************************************************
*                                                                     *
*        SINGLE STATUS REQUEST - PUT INTO PASS BACK AREA              *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
XTSINGST L     WC,SJBTAREA         POINT TO RESPONSE LOCATION
         BAL   LINK,XTSTAFIL       FILL OUT STATUS
         SPACE 1
XTJSEND  L     WB,SJBTAREA         POINT TO AREA
         SLR   WC,WB               SET RESPONSE SIZE
         STH   WC,SJBTDIMR          IN RETURN AREA
         B     XTCSROK             EXIT WITH OK
         SPACE 1
***********************************************************************
*                                                                     *
*        MULTIPLE STATUS REQUEST                                      *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  2,8
XTMULTST L     WC,SJBTAREA         SET SCANNER
         LH    WB,SJBTDIMP         GET SIZE
         ALR   WB,WC               POINT TO END + 1
         SH    WB,=Y(SSCSELSZ)     MAKE SURE NO OVERFLOW
         SPACE 1
         USING SSCSARBG,WC         PROVIDE SSOB EXT'N ADDRESSABILITY
         SPACE 1
XTLOOP   CR    WC,WB               TOO HIGH
         BH    XTCTOVER            COUNT OVERFLOW IF YES
         BAL   LINK,XTSTAFIL       FILL OUT ELEMENT
         BAL   XL1,XTJSCN          SCAN FOR NEXT
         B     XTJSEND             IF NO JOB SET END        +0
         B     XTLOOP              LOOP                     +4
         SPACE 1
         CNOP  4,8
XTCTOVER LA    WB,SSCSELSZ         SET FOR FULL WORD IF REQUIRED
         SPACE 1
XTCTOA   ALR   WC,WB               UP 1
         BAL   XL1,XTJSCN          FIND MORE
         B     XTCTOE              END IT                   +0
         B     XTCTOA              LOOP                     +4
         SPACE 1
         CNOP  0,8
XTCTOE   L     WB,SJBTAREA         POINT TO AREA
         SLR   WC,WB               GET SIZE
         C     WC,=F'32767'        CHECK FOR MAX
         BH    XTPOST              RETURN LOGIC ERROR
         STH   WC,SJBTDIMR         SET REQUIRED
         LA    R0,SSCSMALL         SET TOO SMALL
         B     XTCSSRET            RETURN
         EJECT
***********************************************************************
*                                                                     *
*        SUBROUTINE TO SCAN THE JOB QUEUE FOR JOB NAME MATCH          *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
XTJSCN0  ST    R15,XEQWORK         SAVE NEW QUEUE HEAD OFFSET       R41
         LA    R1,$JQHEADS-2-QUECHAIN(R15)  PREPARE TO SCAN JOB Q
         SPACE 1
XTJSCN   LH    R1,JQECHAIN         GET OFFSET
         N     R1,=X'0000FFFF'      OF NEXT JQE
         BZ    XTJSCNB             BR IF END OF QUEUE
         SLL   R1,2                 ELSE CONVERT OFFSET
         AL    R1,$JOBQPTR           TO ABSOLUTE ADDRESS
         EX    WD,XTJCLC           LOOK FOR MATCH
         BNE   XTJSCN              LOOP IF NOT
         CLM   WD,3,=Y(L'JQEJNAME-2)  TEST FOR FULL NAME SCAN        R4
         BH    4(,XL1)             EXIT IF YES
         LA    R15,JQEJNAME+1(WD)  POINT TO LAST CHARACTER + 1
         BE    XTJSCNA             IF 7 CHARACTER USER ID SKIP
         CLI   1(R15),C' '         INSURE JOBNAME ONLY 1 LONGER
         BNE   XTJSCN              LOOP IF NOT
         SPACE 1
XTJSCNA  CLI   0(R15),C' '         INSURE LAST CHARACTER PRESENT
         BE    XTJSCN              LOOP IF NOT
         ICM   WD,8,0(R15)         PICK UP CHARACTER
         B     4(,XL1)             EXIT WITH FOUND
         SPACE 1
         CNOP  0,8
XTJSCNB  L     R15,XEQWORK         IF ANOTHER                       R41
         BCTR  R15,0                JOB QUEUE,
         BCT   R15,XTJSCN0           BR TO SCAN IT
         BR    XL1                    ELSE EXIT
         SPACE 1
XTJCLC   CLC   SJBTJOBN(*-*),JQEJNAME  *** EXECUTE ONLY ***
         EJECT
***********************************************************************
*                                                                     *
*        SUBROUTINE TO FILL OUT STATUS ELEMENT                        *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
XTSTAFIL LH    R0,JQEJOBNO         PICK UP JOB NUMBER
         MVC   SSCSARID(3),=C'JOB' ASSUME 'JOB'
         CH    R0,=H'10000'        IS IT IN 'JOB' RANGE
         BL    XTSTAFJ             IF SO FILL OUT NUMBER
         MVC   SSCSARID(3),=C'TSU' ASSUME 'TSU'
         SH    R0,=H'20000'        REDUCE BY BASE
         BNM   XTSTAFJ             IF 'TSU' FILL OUT NUMBER
         MVC   SSCSARID(3),=C'STC' SET 'STC'
         AH    R0,=H'10000'        SET BASE
         SPACE 1
XTSTAFJ  CVD   R0,SJBDBLWK         CONVERT
         UNPK  SSCSARID+3(5),SJBDBLWK+5(3) TO EBCDIC
         OI    SSCSARID+L'SSCSARID-1,C'0' MAKE PRINTABLE
         XC    SSCSRSV2,SSCSRSV2   ZERO RESERVED
         TM    JQETYPE,$XEQ        IS IT XEQ
         BZ    XTSNXEQ             IF NOT, SKIP
         TM    JQEFLAGS,QUEBUSY    IS IT BUSY...
         BZ    XTSPXEQ             IF NOT, MUST BE PRE-XEQ
         CLI   JQETYPE,$XEQ        IS IT CONVERTING...
         BE    XTSPXEQ             IF YES, IT IS PRE-XEQ
         MVI   SSCSFLG1,SSCSJACT   SET XEQ
         SPACE 1
XTSCKH   TM    JQEFLAGS,QUEHOLDA+QUEHOLD1 NORMAL HOLD STATUS
         BZ    *+8                 IF NOT, SKIP
         OI    SSCSFLG1,SSCSHOLD   SET HOLD
         STCM  WD,8,SSCSUJOB       SET LAST CHARACTER ID IF PRESENT
         LA    WC,SSCSELSZ(,WC)    UP 1
         BR    LINK                RETURN
         SPACE 1
         CNOP  0,8
XTSPXEQ  MVI   SSCSFLG1,SSCSEXCQ   SET PRE-XEQ
         B     XTSCKH              CHECK HOLD
         SPACE 1
XTSNXEQ  CLI   JQETYPE,$INPUT      IS IT STILL READING...
         BE    XTSPXEQ             BR IF SO TO SET PRE-XEQ
         MVI   SSCSFLG1,SSCSOUTQ   SET OUTPUT
         B     XTSCKH              CHECK HOLD
         SPACE 1
         DROP  R1,WC               KILL JQE, SSOB ADDRESSABILITY    R41
         TITLE 'HASP EXECUTION PROCESSOR -- $PHASP SUPPORT'
*                                                                    R4
***********************************************************************
*                                                                     *
*        WITHDRAW JES2 FROM SYSTEM                                    *
*                                                                     *
***********************************************************************
*                                                                     *
         SPACE 1
         USING PITDSECT,WB         PROVIDE PIT ADDRESSABILITY        R4
         SPACE 1                                                     R4
***********************************************************************
*                                                                     *
*        ENSURE ALL PITS ARE DRAINED AND INACTIVE                     *
*                                                                     *
***********************************************************************
         SPACE 1
X$PHASP  L     WB,$PITABLE         POINT TO 1ST PIT                  R4
         ICM   WA,15,$SVJPXBM      TEST FOR XBM REQUEST(S)           R4
         BNZ   X$PITNXT            BR IF SO TO DRAIN PIT(S)          R4
         ICM   WA,15,$SVJPCLS      TEST FOR JOB SELECT REQUEST(S)
         BZ    X$NXTPIT            BR IF NONE                        R4
         SPACE 1
X$PITNXT OI    PITSTAT,PITHOLDA    INDICATE PIT IS DRAINING
         TM    PITFLAGS,PITXBM+PITXBJCL BR IF NON-XBM PIT...   @OZ32155
         BNM   X$PITNXX            OR XBM PIT AWAITING JCL.    @OZ32155
         ICM   WA,7,PITSJB+1       GET ADDR OF SJB.            @OZ32155
         BZ    X$PITNXX            BR IF NO SJB.               @OZ32155
         OI    SJBFLG2,SJB2PNIT    FORCE INIT TO TERMINATE.    @OZ32155
X$PITNXX DS    0H                                              @OZ32155
         ICM   WB,15,PITNEXT       POINT TO NEXT PIT                 R4
         BNZ   X$PITNXT            BR IF VALID PIT ADDRESS           R4
         B     XQSEARCH             ELSE BR TO FLUSH THE SJB(S)
         SPACE 1
X$NXTPIT TM    PITSTAT,PITBUSY     TEST FOR ACTIVE PIT               R4
         BO    XJBWAIT             BR IF YES TO AWAIT TERMINATION    R4
         ICM   WB,15,PITNEXT       POINT TO NEXT PIT                 R4
         BNZ   X$NXTPIT            BR IF VALID PIT ADDRESS           R4
         SPACE 1                                               @OZ79457
         PUSH  PRINT               TURN PRINT OFF FOR          @OZ79457
         PRINT OFF                  SECTION DELETED BY APAR    @OZ79457
*              THIS LINE DELETED BY APAR OZ79457               @OZ79457
*              THIS LINE DELETED BY APAR OZ79457               @OZ79457
*              THIS LINE DELETED BY APAR OZ79457               @OZ79457
*              THIS LINE DELETED BY APAR OZ79457               @OZ79457
*              THIS LINE DELETED BY APAR OZ79457               @OZ79457
*              THIS LINE DELETED BY APAR OZ79457               @OZ79457
*              THIS LINE DELETED BY APAR OZ79457               @OZ79457
*              THIS LINE DELETED BY APAR OZ79457               @OZ79457
*              THIS LINE DELETED BY APAR OZ79457               @OZ79457
*              THIS LINE DELETED BY APAR OZ79457               @OZ79457
         POP   PRINT               RESET TO PRIOR PRINT OPT.   @OZ79457
         EJECT                                                 @OZ79457
***********************************************************************
*                                                                     *
*        ENSURE OUR INITIATORS ARE STOPPED                            *
*                                                                     *
***********************************************************************
         SPACE 1
X$PSCAN  BAL   LINK,XQSUSE         REQUEST ACCESS TO CHECKPOINT DATA
         L     LINK,=V($QINDEX)           PREPARE
         LA    R1,CATSTCCL-(255-QUECLASS)  TO SCAN
         IC    R1,0(R1,LINK)                STC
         LA    R1,$JQHEADS-2-QUECHAIN(R1)    QUEUE
         LR    LINK,R1             SAVE QUEUE ADDRESS
         SPACE 1
         USING JQEDSECT,R1         PROVIDE JQE ADDRESSABILITY
         SPACE 1
X$PJQE1  LH    R1,JQECHAIN         GET OFFSET
         N     R1,=X'0000FFFF'      OF NEXT JQE
         BZ    X$PTERM             BR IF END OF QUEUE
         SLL   R1,2                 ELSE CONVERT OFFSET
         AL    R1,$JOBQPTR           TO ABSOLUTE ADDRESS
         IC    R0,JQEFLAGS         IF NOT
         N     R0,=A(QUEBUSY)       EXECUTING
         CLM   R0,1,$SIDBUSY         STARTED TASK,
         BNE   X$PJQE1                BR TO TEST NEXT JQE
         CLC   JQEJNAME,=CL8'SYSLOG'  TEST FOR 'REQUEST JOB ID'
         BE    X$PJQE1             YES, RESUME SCAN            @OZ55219
         BAL   LINK,XSJBLOCK       GET SJB LOCK                @OZ55219
         LA    R2,$SVJXNUM-(SJBXQCHN-SJBDSECT) PREPARE TO      @OZ55219
         SL    R1,$JOBQPTR         GET JQE OFFSET              @OZ55219
X$INTSJB ICM   R2,7,SJBXQCHN+1     GET ADDRESS OF NEXT SJB     @OZ55219
         BZ    X$PUNLK             NO SJB                      @OZ55219
         CL    R1,SJBJQOFF         IS SJB FOR THIS INIT...     @OZ55219
         BNE   X$INTSJB            NO, GET NEXT ONE            @OZ55219
         TM    SJBLKFG,SJBPRIM     IS IT PRIMARY INITIATOR..   @OZ56375
         BO    X$PUNLK             YES, CONTINUE               @OZ55219
         B     X$PSINIT            NO, INIT IS SECONDARY       @OZ55219
         EJECT
***********************************************************************
*                                                                     *
*        ENSURE REQUEST-JOB-ID TASKS ARE STOPPED                      *
*                                                                     *
***********************************************************************
         SPACE 1
X$PTERM  LR    R1,LINK             PREPARE TO RE-SCAN STC QUEUE
         BAL   LINK,XSJBLOCK       GET SJB QUEUES LOCK
         SPACE 1
X$PJQE2  LH    R1,JQECHAIN         GET OFFSET
         N     R1,=X'0000FFFF'      OF NEXT JQE
         BZ    X$PREADY            BR IF END OF QUEUE
         SLL   R1,2                 ELSE CONVERT OFFSET
         AL    R1,$JOBQPTR           TO ABSOLUTE ADDRESS
         IC    R0,JQEFLAGS         IF NOT
         N     R0,=A(QUEBUSY)       EXECUTING
         CLM   R0,1,$SIDBUSY         STARTED TASK,
         BNE   X$PJQE2                BR TO TEST NEXT JQE
         LA    WA,$SVJXNUM-(SJBXQCHN-SJBDSECT)  PREPARE TO SCAN SJBS
         SL    R1,$JOBQPTR         REDUCE JQE ADDR TO OFFSET   @OZ40028
         SPACE 1
X$PSJB   ICM   WA,7,SJBXQCHN+1     GET ADDRESS OF NEXT SJB
         BZ    X$PUNLK             BR IF NONE (JOB MUST BE TERMINATING)
         CL    R1,SJBJQOFF         IS SJB FOR THIS JOB...      @OZ40028
         BNE   X$PSJB              BR IF NO
         SPACE 1
***********************************************************************
*                                                                     *
*        TERMINATE REQUEST-JOB-ID TASK                                *
*                                                                     *
***********************************************************************
         SPACE 1
         MVI   SJBJQOFF,X'80'      PREVENT REDUNDANT XMPOST    @OZ40028
         MVC   SJBECBP,SJBSECB     PREPARE XMPOST POST LIST
         POST  MF=(E,SJBECBP)       AND POST THE TASK TO TERMINATE
         LA    R1,SJBECB           THEN RESTORE
         ST    R1,SJBECBP           NORMAL POST LIST
         SPACE 1
X$PUNLK  BAL   LINK,XSJBUNLK       REMOVE THE SJB QUEUES LOCK
         CLI   $SVJOB,0            IF NESTED $$POST OCCURRED,  @OZ52262
         BNE   XQSEARCH             SEARCH QUEUES AGAIN.       @OZ52262
         B     XJBWAIT             ELSE $WAIT FOR JOB TERM.    @OZ52262
         EJECT
***********************************************************************
*                                                                     *
*        THIS JES2 READY TO WITHDRAW                                  *
*                                                                     *
***********************************************************************
         SPACE 1
X$PREADY ICM   WA,15,$SVJXNUM      TEST FOR ANY EXECUTING TASK
         BZ    X$PDONE             BR IF NO (SUB-SYSTEM CAN TERMINATE)
X$PSINIT DS    0H                                              @OZ55219
         BAL   LINK,XSJBUNLK       REMOVE THE SJB QUEUES LOCK
         CLC   X$PMSG+2(4),$SVSSNM HAS MESSAGE ALREADY BEEN ISSUED...
         BE    XJBWAIT             BR IF SO
         MVC   X$PMSG+2(4),$SVSSNM  ELSE MOVE SUB-SYSTEM NAME TO MSG
        $WTO   X$PMSG,L'X$PMSG,JOB=NO,  AND ISSUE MESSAGE              C
               ROUTE=$LOG+$MAIN,CLASS=$ACTION,PRI=$HI,WAIT=NO
         B     XJBWAIT             THEN BR TO AWAIT JOB TERMINATION
         SPACE 1                                               @OZ56448
***********************************************************************
*                                                                     *
*        GUARANTEE ALL SYSTEM ACTIVITY IS COMPLETE             @OZ56448
*                                                                     *
***********************************************************************
         SPACE 1                                               @OZ56448
         USING JQEDSECT,WD         USE OLD JQE ADDRESSABILITY  @OZ56448
         SPACE 1                                               @OZ56448
X$PDONE  BAL   LINK,XSJBUNLK       REMOVE THE SJB QUEUES LOCK
         BAL   LINK,XQSUSE         REQUEST ACCESS TO CHECKPOINT DATA
         L     R1,$AQSE            POINT TO OUR SYSTEM'S QSE         R4
*              THIS LINE DELETED BY APAR OZ56448               @OZ56448
         IC    WB,QSESIAFF-QSEDSECT(,R1) GET OUR AFFINITY ID   @OZ56448
         L     WD,$JOBQPTR         POINT TO START OF JOBQUEUE  @OZ56448
         LH    R15,$MAXJOBS        GET TOTAL NUMBER OF JOBS    @OZ56448
X$PJQLOP LA    WD,JQELNGTH(,WD)    POINT TO NEXT JQE           @OZ56448
         IC    R0,JQEHQLOK         IF JOB LOCK HELD BY         @OZ56448
         N     R0,=A(QUEBUSY)        SYSTEM BEING WITHDRAWN,   @OZ56448
         CLM   R0,1,$SIDBUSY           THEN TAKE BRANCH TO     @OZ56448
         BE    X$PDEQ                    FORBID QUICKSTART.    @OZ56448
         LH    WC,JQEJOBNO         PICK UP JOBID AND TEST      @OZ56448
         CH    WC,=H'10000'          FOR BATCH JOB.            @OZ56448
         BL    X$PNOTB             BRANCH IF BATCH JOB         @OZ56448
         EX    WB,X$TSIAFF         IF STC OR TSU HAS AFFINITY  @OZ56448
         BZ    X$PNOTB               TO THIS SYSTEM AND NOT    @OZ56448
         CLI   JQETYPE,$FREE           ON THE FREE QUEUE       @OZ56448
         BE    X$PNOTB                   AND NOT PAST          @OZ56448
         TM    JQETYPE,$XEQ                EXECUTION  --       @OZ56448
         BO    X$PDEQ              --FORBID QUICKSTART.        @OZ56448
X$PNOTB  BCT   R15,X$PJQLOP        ELSE EXAMINE NEXT JQE       @OZ56448
         OI    QSESTAT-QSEDSECT(R1),QSEQUICK QUICKSTRT ALLOWED @OZ41702
         EJECT                                                 @OZ56448
X$PDEQ   L     WA,$SVJPNUM         GET 'STARTING' TASK SJB.    @OZ56448
        $DEQSJB $SVJPNUM,X$PSJBS   BR IF NO 'STARTING' TASKS   @OZ56448
         OI    SJBFLG2,SJB2JNFD    INDICATE 'JOB NOT FOUND'    @OZ56448
        $XMPOST SJBECBP            XMPOST THE WAITING TASK     @OZ56448
         BAL   LINK,XSJBUNLK       REMOVE THE SJB QUEUES LOCK  @OZ56448
         B     X$PDEQ              LOOP TO FIND MORE SJBS      @OZ56448
         SPACE 1                                               @OZ56448
***************************************************************@OZ56448
*                                                              @OZ56448
*        $WAIT ABIT IF ANY SJB'S ON HAVT                       @OZ56448
*                                                              @OZ56448
***************************************************************@OZ56448
         SPACE 1                                               @OZ56448
X$PSJBS  L     R1,$SVHAVT          ACCESS HAVT                 @OZ56448
         LA    R1,4(R1)            POINT TO ASID 1 ENTRY       @OZ56448
         L     R2,CVTPTR           AND CVT POINTS TO SYSTEM    @OZ56448
         L     R2,CVTASVT-CVT(,R2)   ASVT FOR MAXIMUM NUMBER   @OZ56448
         L     R2,ASVTMAXU-ASVT(,R2)   OF ADDRESS SPACES       @OZ56448
X$PSLP   CLC   0(4,R1),$ZEROS      IF NO ENTRY FOR THIS ASID,  @OZ56448
         BE    X$PNEXT               BUMP TO THE NEXT SLOT     @OZ56448
         L     R3,0(R1)            PICK UP ADDRESS OF SJB      @OZ56448
         TM    SJBFLG2-SJBDSECT(R3),SJB2CONV CONVERTER SJB...  @OZ56448
         BO    X$PNEXT             YES, DON'T WORRY ABOUT IT.  @OZ56448
        $WAIT  ABIT                NO, LET USER ASID COMPLETE  @OZ56448
         B     X$PDEQ              RESTART SEARCH              @OZ56448
X$PNEXT  LA    R1,4(,R1)           BUMP TO NEXT ENTRY          @OZ56448
         BCT   R2,X$PSLP           LOOP TO TEST NEXT ENTRY     @OZ56448
         EJECT                                                 @OZ56448
***************************************************************@OZ56448
*                                                              @OZ56448
*        $POST COMM PROCESSOR TO FINISH WITHDRAWAL             @OZ56448
*                                                              @OZ56448
***************************************************************@OZ56448
         SPACE 1                                               @OZ56448
         BAL   LINK,XQSUSE         REQUEST ACCESS TO CKPT      @OZ56448
         L     R1,$AQSE            POINT TO OUR SYSTEM'S QSE   @OZ56448
         NI    QSESTAT-QSEDSECT(R1),FF-QSEACTIV SHOW INACTIVE  @OZ56448
         OI    $EXECPCE,X'80'      SHOW XEQ SHUTDOWN COMPLETE  @OZ35996
        $POST  $HASPECF,CKPW       FORCE A CHECKPOINT                R4
        $WAIT  CKPT                $WAIT FOR CHECKPOINT TO COMPLETE  R4
         SPACE 1                                               @OZ35996
         OI    $COMMPCE,X'80'      TELL HASPCOMM WE'RE DONE    @OZ27300
         L     R1,$COMMPCE         $POST THE COMMAND PROCESSOR       R4
        $POST  (R1),WORK            TO CONTINUE JES2 SHUTDOWN  @OZ27300
         SPACE 1
X$PLOOP $WAIT  JOB                 THIS SHOULD $WAIT US PERMANENTLY
         B     X$PLOOP             WE'RE DONE -- IGNORE $POST
         SPACE 1
X$TSIAFF TM    JQEFLAG2,0              *** EXECUTE ONLY ***    @OZ56448
         SPACE 1                                               @OZ56448
         DROP  R1,WA,WB,JCT,BASE3  KILL PROCESSOR ADDRESSABILITY    R41
         DROP  WD                  KILL JQE ADDRESSABILITY     @OZ56448
         USING JCTDSECT,JCT        RESTORE JCT ADDRESSABILITY       R41
         TITLE 'HASP EXECUTION PROCESSOR -- $WTO MESSAGES'
***********************************************************************
*                                                                     *
*        E X E C U T I O N   P R O C E S S O R   $ W T O   M S G S    *
*                                                                     *
***********************************************************************
         SPACE 3
XDUPMSG  $MSG  301,'JJJJJJJJ - DUPLICATE JOB NAME - JOB DELAYED'
         SPACE 2
XIDLEMSG $MSG  309,'   INIT XX INACTIVE ******** C='
         SPACE 2
XEOMSG1  $MSG  310,'TERMINATED AT END OF MEMORY'                    R41
         SPACE 2
XEOMSG2  $MSG  311,'RE-QUEUED AT END OF MEMORY'                     R41
         SPACE 2
X$PMSG   $MSG  312,'     AWAITING SECONDARY SUB-SYSTEM WITHDRAWAL'
         SPACE 2
XDRNMSG  $MSG  314,'   INIT XX DRAINED  ******** C='
         SPACE 2
XHALTMSG $MSG  315,'   INIT XX HALTED   ******** C='
         SPACE 2                                               @OZ39639
XNEWSMSG $MSG  316,'HAS REPLACED THE JESNEWS DATA SET'         @OZ39639
XNEWSMRD EQU   *-29-XNEWSMSG,8     'REPLACED' OR 'DELETED '    @OZ39639
         EJECT                                                      R41
         LTORG                                                      R41
         TITLE 'HASP HOLD QUEUE PROCESSOR'
***********************************************************************
*                                                                     *
* PROCESSOR NAME -- HASPHOLD                                          *
*                                                                     *
* DESCRIPTIVE NAME -- JES2 HOLD QUEUE PROCESSOR                       *
*                                                                     *
* FUNCTION -- ADD A HOLD QUEUE RECORD (HQR) TO THE HOLD QUEUE TABLE   *
*             (HQT) REPRESENTING THE HELD DATA SETS FOR A JOB.        *
*                                                                     *
* NOTES -- 1)  THIS PROCESSOR DE-QUEUES SPIN IOTS REPRESENTING HELD   *
*              DATA SETS FROM A QUEUE OF IOTS WHICH IS BUILT BY THE   *
*              HASP EXECUTION PROCESSOR.  THIS QUEUE IS FIFO          *
*              ORDERED BY TIME OF UNALLOCATION.                       *
*                                                                     *
*          2)  BECAUSE THIS PROCESSOR MUST OBTAIN A CROSS-SYSTEM      *
*              JOB QUEUE ENTRY LOCK, IT WILL 'HANG' IF ANOTHER JES2   *
*              SYSTEM IN THE NETWORK CRUMPS WHILE HOLDING THE LOCK.   *
*                                                                     *
*          3)  TO IMPROVE THE PERFORMANCE OF THIS PROCESSOR,          *
*              PERMANENT STORAGE IS OBTAINED, VIA GETMAIN, TO SERVE   *
*              AS BUFFER STORAGE FOR AN HQT.  WHEN THE PROCESSOR IS   *
*              FORCED TO $WAIT FOR MORE WORK TO DO, A PAGE-RELEASE    *
*              IS PERFORMED FOR THE BUFFER.                           *
*                                                                     *
* REGISTER CONVENTIONS -- R0  -- WORK REGISTER                        *
*                         WA  -- HQR ADDRESS                          *
*                         WB  -- HQT ADDRESS                          *
*                         WC  -- PDDB ADDRESS                         *
*                         WD  -- JQE ADDRESS                          *
*                         WE  -- WORK/LINK REGISTER                   *
*                         WF  -- IOT ADDRESS                          *
*                         WG  -- SSVT ADDRESS                         *
*                         R10 -- ADDRESS OF 1ST HQT FOR JOB           *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*        H A S P H O L D   I N I T I A L   E N T R Y   P O I N T      *
*                                                                     *
***********************************************************************
         SPACE 2
         USING HQRDSECT,WA         PROVIDE HQR ADDRESSABILITY
         USING HQTDSECT,WB         PROVIDE HQT ADDRESSABILITY
         USING JQEDSECT,WD         PROVIDE JQE ADDRESSABILITY
         USING $SVDSECT,WG         PROVIDE SSVT ADDRESSABILITY
         USING IOTDSECT,IOT        PROVIDE IOT ADDRESSABILITY
         USING PDBDSECT,PDDB       PROVIDE PDDB ADDRESSABILITY
         SPACE 1
PCEHQR   EQU   PCEWORK,HQRLENG     WORK SPACE FOR AN HQR
         SPACE 2
HASPHOLD $ENTRY BASE=BASE2         PROVIDE PROCESSOR ENTRY
         L     WG,$SSVT            GET SSVT ADDRESS FROM HCT
         SPACE 1
***********************************************************************
*                                                                     *
*        O B T A I N   P E R M A N E N T   B U F R   S T O R A G E    *
*                                                                     *
***********************************************************************
         SPACE 1
         L     R0,HBUFSIZE         GET PAGE REQ'T FOR HQT BUFFER
         GETMAIN RC,LV=(0),BNDRY=PAGE  THEN GET THE BUFFER STORAGE
         LR    WB,R1               ASSUME GETMAIN SUCCESSFUL
         ICM   WB,8,=AL1(X'80')    SHOW HQT PAGE-RELEASED
         ST    WB,PCEBUFAD         SET BUFFER ADDRESS FOR $EXCP
         LTR   R15,R15             TEST GETMAIN
         BZ    HQSRCH              BR IF SUCCESSFUL
H01     $ERROR                      ELSE CRUMP
         SPACE 1
HBUFSIZE DC    A(4096)             STORAGE SIZE FOR HQT BUFFER       R4
         EJECT
***********************************************************************
*                                                                     *
*        P A G E - R E L E A S E   H Q T   B U F F E R                *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
HRLSE    LTR   WB,WB               IF HQT PAGE-RELEASED,
         BM    HWAIT                BR TO WAIT FOR WORK
        $PGSRVC RLSE,(WB),HBUFSIZE   ELSE RELEASE HQT BUFFER         R4
         ICM   WB,8,=AL1(X'80')    SHOW HQT BUFFER PAGE-RELEASED
         SPACE 1
HWAIT   $WAIT  WORK                WAIT FOR SOMETHING TO DO
         SPACE 1
***********************************************************************
*                                                                     *
*        S E A R C H   H O L D   R E Q U E S T   Q U E U E            *
*                                                                     *
***********************************************************************
         SPACE 1
HQSRCH  $QSUSE                     REQUEST ACCESS TO CHECKPOINT DATA
         L     IOT,$SVHOLDQ        IF
         LA    IOT,0(,IOT)          HOLD REQUEST QUEUE
         LTR   IOT,IOT               IS EMPTY,
         BZ    HRLSE                  BR TO RELEASE HQT BUFFER
         L     WD,IOTJQOFF         GET JQE ADDRESS
         AL    WD,$JOBQPTR          FROM IOT
         TM    JQEHQLOK,QUEBUSY    IF JOB HOLD QUEUE LOCK NOT HELD,
         BZ    HQLOCK               BR TO GRAB IT
        $WAIT  ABIT                  ELSE $WAIT A LITTLE WHILE
         B     HQSRCH              THEN BR TO RETEST HOLD QUEUE
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        O B T A I N   J O B   H O L D   Q U E U E   L O C K          *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
HQLOCK   OC    JQEHQLOK,$SIDBUSY   GRAB THE HOLD QUEUE LOCK
        $QCKPT (WD)                 AND FORCE CHECKPOINT OF JQE
         BAL   WE,HQRBLD           BUILD HQR IN PCEWORK             R41
         LTR   WB,WB               IF HQT BUFFER NOT RELEASED,
         BP    HQTOK                BR TO PROCESS FIRST REQUEST
        $BFRBLD (WB)                 ELSE REBUILD THE BUFFER'S IOB
         LA    WB,0(,WB)           SHOW HQT REBUILT
         SPACE 1                                                     R4
***********************************************************************
*                                                                     *
*        P R O C E S S   H O L D   R E Q U E S T                      *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
HQTOK    L     R10,IOTHQT1         IF NOT THE FIRST
         CL    R10,IOTHQT           HELD DATA SET FOR THIS JOB,
         BNE   HQT1                  BR TO READ THE FIRST HQT
         MVC   HQTID,=CL4'HQT'     CONSTRUCT
         LH    R0,$BUFLENG          HQT                              R4
         STH   R0,HQTLENG            FROM
         MVI   HQTFLAG1,HQT1HQT1      CONTENTS
         MVI   HQTFLAG2,0              OF
         MVC   HQTJBKEY,IOTJBKEY        SPIN IOT
         B     HQR1                THEN BR TO ADD FIRST HQR
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        R E A D   1 S T   H Q T   F O R   J O B                      *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  2,8
HQT1     LR    R0,R10              GET ADDRESS OF FIRST HQT
         BAL   WE,HQTREAD           AND READ IT IN
         SPACE 1
***********************************************************************
*                                                                     *
*        S E E   I F   H Q R   W I L L   I N S E R T                  *
*                                                                     *
***********************************************************************
         SPACE 1
HQINSERT LH    R0,PDBDSKEY         PREPARE TO
         LA    WA,HQTHQR            INSERT HQR                 @OZ19494
         L     R1,HQTHQRP            INTO
         LA    R14,0(WB,R1)           HQT
         B     HQRNXT1             BRANCH FOR 1ST HQR          @OZ19494
         SPACE 1
HQRNEXT  LA    WA,HQRLENG(,WA)     POINT TO NEXT HQR IN HQT
HQRNXT1  CLR   WA,R14              IF BEYOND LAST HQR,         @OZ19494
         BE    HTESTEND             BR TO TEST FOR ROOM AT END
         CH    R0,PDBDSKEY-PDBDSECT+HQRPDDB  IF DD NUMBER IS HIGH,
         BH    HQRNEXT                        LOOP
         BL    HQRNEW              IF LOW, BR TO TRY TO INSERT       R4
         CLC   HQRIOT,HQRIOT-HQRDSECT+PCEHQR  TEST IOT ADDR          R4
         BNE   HQRNEXT             LOOP IF UNIQUE (MULTIPLE DEST'N)  R4
        $QSUSE                     REQUEST ACCESS TO CHECKPOINT DATA R4
         LH    R1,JQEHLDCT         DECREMENT                         R4
         SL    R1,=A(X'10')         HOLD                             R4
         STH   R1,JQEHLDCT           COUNT                           R4
        $QCKPT (WD)                FORCE CHECKPOINT OF JQE           R4
         B     HIOTFREE            BR TO FREE REDUNDANT IOT          R4
         SPACE 1                                                     R4
HQRNEW   TM    HQTFLAG1,HQT1HQT1   IF FIRST HQT FOR JOB,             R4
         BO    HQRINSRT             BR TO INSERT HQR
         CH    R0,PDBDSKEY-PDBDSECT+HQRPDDB-HQRDSECT+HQTHQR
         BNL   HQRINSRT            BR IF HQR TO BE INSERTED    @OZ25954
         TM    HQTFLAG1,HQT1CKPT   IF HQT NOT UPDATED,
         BZ    HQT1                 BR TO READ FIRST HQT
         BAL   WE,HQTWRITE           ELSE RE-WRITE CURRENT HQT
         B     HQT1                THEN BR TO READ FIRST HQT
         EJECT
***********************************************************************
*                                                                     *
*        H Q R   W O N ' T   I N S E R T   - -   T R Y   T O   A D D  *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
HTESTEND LA    WE,HQRLENG(,R1)     IF ROOM AT END                    R4
         CH    WE,HQTLENG           OF HQT,                          R4
         BNH   HQRADD                BR TO ADD HQR THERE             R4
         SPACE 1
HQTNEXT  ICM   R0,15,HQTHQT        IF END OF HQT CHAIN,
         BZ    HQTNEW               BR TO ADD NEW HQT TO CHAIN
         TM    HQTFLAG1,HQT1CKPT   IF HQT NOT UPDATED,
         BZ    *+8                  BR TO AVOID CHECKPOINT
         BAL   WE,HQTWRITE           ELSE RE-WRITE CURRENT HQT
         L     R0,HQTHQT           GET TRACK ADDRESS OF NEXT HQT
         BAL   WE,HQTREAD           AND READ IT IN
         LA    WA,HQTHQR           POINT TO 1ST HQR IN NEW HQT
         CLC   PDBDSKEY,PDBDSKEY-PDBDSECT+HQRPDDB  SHOULD HQR BE 1ST
         BNL   HQINSERT            BR IF NO
         L     R1,HQTHQRP           ELSE PREPARE TO INSERT HQR
         SPACE 1
***********************************************************************
*                                                                     *
*        H Q R   W I L L   I N S E R T   - -   D O   I T              *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
HQRINSRT LA    R0,HQRLENG          SAVE HQR LENGTH FOR LOOP
         LA    WE,0(WB,R1)         POINT TO NEXT AVAILABLE HQR SLOT
         LA    R14,HQRLENG(,R1)    IF NO ROOM                        R4
         CH    R14,HQTLENG          IN THIS HQT,                     R4
         BH    HQROFLOW              BR TO PUSH OUT LAST HQR         R4
         SPACE 1
***********************************************************************
*                                                                     *
*        P U S H   D O W N   R E M A I N I N G   H Q R S              *
*                                                                     *
***********************************************************************
         SPACE 1
HQRMOVE  LR    R14,WE              SAVE ADDRESS OF HQR(N)
         SLR   WE,R0               DECREMENT N
         MVC   0(HQRLENG,R14),0(WE)  MOVE HQR(N) TO HQR(N+1)
         CLR   WE,WA               IF HQR(N) NOT OUR SLOT,
         BNE   HQRMOVE              LOOP
         SPACE 1
HQRADD   MVC   HQR,PCEHQR          MOVE HQR TO HQT
         LA    R1,HQRLENG(,R1)     UPDATE OFFSET OF NEXT
         ST    R1,HQTHQRP           AVAILABLE HQR SLOT
         B     HQTCKPT             THEN BR TO REQUEST HQT CHECKPOINT
         EJECT
***********************************************************************
*                                                                     *
*        P U S H   D O W N   H Q R S ,   S A V I N G   L A S T        *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
HQROFLOW SLR   WE,R0               MAKE HQR(N) LAST HQR IN HQT
         CLR   WE,WA               IF HQR(N) IN OUR SLOT,
         BE    HQRSAVE              BR TO EXCHANGE HQRS
         SPACE 1
HQRFLOP  LR    R14,WE              SAVE ADDRESS OF HQR(N)
         SLR   WE,R0               DECREMENT N
         XC    0(HQRLENG,R14),0(WE)  EXCHANGE
         XC    0(HQRLENG,WE),0(R14)   HQR(N) WITH
         XC    0(HQRLENG,R14),0(WE)    HQR(N+1)
         CLR   WE,WA               IF HQR(N) NOT IN OUR SLOT,
         BNE   HQRFLOP              LOOP
         SPACE 1
HQRSAVE  XC    HQR,PCEHQR          INSERT OUR HQR
         XC    PCEHQR,HQR           SAVING HQR WHICH HAD
         XC    HQR,PCEHQR            BEEN LAST HQR IN HQT
         OI    HQTFLAG1,HQT1CKPT   THEN REQUEST HQT CHECKPOINT
         B     HQTNEXT              AND BR TO MOV OLD HQR TO NXT HQT
         SPACE 1
***********************************************************************
*                                                                     *
*        O V E R F L O W I N G   T O   N E W   H Q T                  *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
HQTNEW   MVC   HQTHQT,IOTHQT       STORE NEW HQT CHAIN ADDRESS
         BAL   WE,HQTWRITE          AND WRITE CURRENT HQT
         NI    HQTFLAG1,255-HQT1HQT1  RESET 1ST HQT INDICATOR       R41
         SPACE 1
HQR1     MVC   PCESEEK,IOTHQT      SET SEEK ADDRESS FOR $EXCP
         MVC   HQTHQR,PCEHQR       MOVE HQR TO NEW HQT
         LA    R1,HQTHQR+HQRLENG-HQTDSECT  RESET OFFSET OF NEXT
         ST    R1,HQTHQRP                   AVAILABLE HQR SLOT
         XC    HQTHQT,HQTHQT       SHOW HQT IS END OF CHAIN
         EJECT
***********************************************************************
*                                                                     *
*        H Q R   I N S E R T E D   - -   R E Q U E S T   C K P T      *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
HQTCKPT  OI    HQTFLAG1,HQT1CKPT   REQUEST HQT CHECKPOINT
         SPACE 1
HIOTFREE LH    R0,IOTLENG          GET LENGTH OF IOT
         ICM   R0,8,=AL1(231)      PROVIDE BUFFER SUBPOOL NUMBER
         MVC   $SVHOLDQ,IOTIOT     DE-QUEUE THE IOT
         LR    R1,IOT              RELOAD IOT ADDRESS
         FREEMAIN R,LV=(0),A=(1)   FREE THE IOT BUFFER
         LR    R1,WD               PREPARE TO
         SL    R1,$JOBQPTR          SCAN REMAINING
         LA    IOT,$SVHOLDQ-(IOTIOT-IOTDSECT)  HOLD REQUESTS
         SPACE 1
HNEXTIOT LR    WE,IOT              IF NO MORE
         ICM   IOT,15,IOTIOT        HOLD REQUESTS,
         BZ    HENDJOB               BR TO END JOB PROCESSING
         CL    R1,IOTJQOFF         IF REQUEST NOT FOR SAME JOB,
         BNE   HNEXTIOT             LOOP
         SPACE 1
***********************************************************************
*                                                                     *
*        S A M E   J O B   - -   M A K E   R E Q U E S T   N O .   1  *
*                                                                     *
***********************************************************************
         SPACE 1
         MVC   IOTIOT-IOTDSECT(,WE),IOTIOT  DE-QUEUE REQUEST
         MVC   IOTIOT,$SVHOLDQ     RE-QUEUE REQUEST
         ST    IOT,$SVHOLDQ         TO TOP OF QUEUE
         BAL   WE,HQRBLD           BUILD HQR IN PCEWORK             R41
         B     HQINSERT            THEN BR TO INSERT NEW HQR
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        E N D   O F   R E Q U E S T S   F O R   T H I S   J O B      *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
HENDJOB  TM    HQTFLAG1,HQT1CKPT   IF HQT NOT UPDATED,
         BZ    *+8                  BR TO AVOID CHECKPOINT
         BAL   WE,HQTWRITE           ELSE RE-WRITE CURRENT HQT
        $QSUSE                     REQUEST ACCESS TO CHECKPOINT DATA
         NI    JQEHQLOK,255-QUEBUSY  REMOVE JOB HOLD QUEUE LOCK
         LA    WD,0(,WD)           PURIFY JQE ADDRESS          @OZ35901
        $QCKPT (WD)                FORCE CHECKPOINT OF JQE
         B     HQSRCH              THEN LOOK FOR MORE WORK TO DO
         TITLE 'HASP HOLD QUEUE PROCESSOR -- SUPPORT ROUTINES'
***********************************************************************
*                                                                     *
*        H Q T   R E A D / W R I T E   R O U T I N E S                *
*                                                                     *
*                                                                     *
*              SEEK ADDRESS PROVIDED IN R0 (READ ONLY)                *
*                                                                     *
*              REGISTERS R14 AND R15 DESTROYED                        *
*              CONDITION CODE VALID ON RETURN                         *
*                                                                     *
***********************************************************************
         SPACE 3
         CNOP  0,8
HQTWRITE MVI   PCEDEVTP,PCEDAWR    INDICATE WRITE
         NI    HQTFLAG1,255-HQT1CKPT  RESET CHECKPOINT FLAG (IF ANY)
         B     HEXCP               THEN BR TO INITIATE I/O
         SPACE 1
         CNOP  0,8
HQTREAD  ST    R0,PCESEEK          SET NEW TRACK ADDRESS FOR $EXCP
         MVI   PCEDEVTP,PCEDARD     AND INDICATE READ
         SPACE 1
HEXCP    LA    R1,PCEDADCT         GET DIRECT ACCESS DCT ADDRESS
        $EXCP  (R1),WAIT=YES       READ/WRITE HQT                    R4
         BM    HQTBAD              BR IF I/O ERROR                   R4
         CLI   PCEDEVTP,PCEDAWR    IF WRITE REQUEST,
         BER   WE                   RETURN
         CLC   HQTJBKEY,IOTJBKEY   VALIDITY CHECK HQT
         BNE   HQTBAD              JOBKEYS DON'T MATCH.        @OZ35742
         CLC   HQTID,=CL4'HQT'     CHECK FOR VALID HQT         @OZ35742
         BER   WE                  RETURN IF OK
         SPACE 1                                                     R4
***********************************************************************
*                                                                     *
*        E R R O R   R E A D I N G / W R I T I N G   H Q T            *
*                                                                     *
***********************************************************************
         SPACE 1
HQTBAD  $DISTERR                   ISSUE DISASTEROUS ERROR MESSAGE
         NI    HQTFLAG1,255-HQT1CKPT  PREVENT FURTHER I/O
         LTR   IOT,IOT             IF IOT HAS BEEN FREED,
         BZ    HENDJOB              BR TO END-OF-JOB PROCESSING
         ICM   WD,8,=AL1(X'80')      ELSE FORCE END-OF-JOB PROCESS'G
         B     HIOTFREE               AND BR TO FREE THE IOT
         EJECT
***********************************************************************
*                                                                     *
*        B U I L D   H Q R   I N   P C E H Q R                        *
*                                                                     *
*                                                                     *
*              ON ENTRY REGISTER WF POINTS TO SPIN IOT                *
*                                                                     *
*              HELD DATA SET PDDB ADDRESS RETURNED IN REGISTER WC     *
*              REGISTER R15 DESTROYED                                 *
*              RETURN CODE N/A                                        *
*                                                                     *
***********************************************************************
         SPACE 3
         USING HQRDSECT,R15        PROVIDE HQR ADDRESSABILITY
         SPACE 1
         CNOP  0,8
HQRBLD  $TIME                      GET DATE IN R1                   R41
         LA    R15,PCEHQR          POINT TO WORK AREA FOR HQR       R41
         MVC   HQRIOT,IOTTRACK     MOVE PERTINENT
         MVC   HQRIOTTR,IOTIOTTR    IOT FIELDS
         L     PDDB,$IOTPDDB         FROM IOT                        R4
         ALR   PDDB,IOT               TO                             R4
         MVC   HQRPDDB,PDBDSECT        HQR                           R4
         ST    R1,HQRCRDT          STORE CREATION DATE              R41
         MVI   HQRSTAT,0           ASSUME NON-ALLOCATION IOT
         TM    PDBFLAG1,PDB1NULL+PDB1NSOT  IF DATA SET
         BZ    *+8                          NOT PRINTABLE,
         OI    HQRSTAT,HQRUNHLD              INDICATE NOT HELD
         TM    IOTFLAG1,IOT1ALOC   TEST FOR ALLOCATION IOT
         BZR   WE                  RETURN IF NO                     R41
         OI    HQRSTAT,HQRTGMAP     ELSE UPDATE HQR
         BR    WE                    AND RETURN                     R41
         SPACE 1
         DROP  R15                 KILL HQR ADDRESSABILITY
         SPACE 1
         DROP  WA,WB,WD,WG,IOT,PDDB  KILL CTL BLOCK ADDRESSABILITY
         SPACE 5
         LTORG
         TITLE 'HASP TIME EXCESSION PROCESSOR'
***********************************************************************
*                                                                     *
* PROCESSOR NAME -- HASPTIME                                          *
*                                                                     *
* DESCRIPTIVE NAME -- JES2 TIME EXCESSION PROCESSOR                   *
*                                                                     *
* FUNCTION -- MONITOR THE REAL TIME IN EXECUTION OF JOBS IN EXECUTION *
*             BY CLASS AND ISSUE APPROPRIATE MESSAGES TO SYSTEM       *
*             OPERATOR WHEN THOSE JOBS EXCEED THEIR ESTIMATED REAL    *
*             EXECUTION TIME.                                         *
*                                                                     *
* NOTES -- 1) ALL JOBS EXECUTING BY CLASS ARE MONITORED CONCURRENTLY. *
*                                                                     *
*          2) ONCE THE ORIGINAL TIME ESTIMATE FOR A JOB HAS BEEN      *
*             REACHED (AND THE FIRST 'TIME-EXCEEDED' MESSAGE HAS BEEN *
*             ISSUED), SUBSEQUENT MESSAGES WILL BE ISSUED AT AN       *
*             INTERVAL DEFINED BY THE &TIMEXS PARAMETER.              *
*                                                                     *
* REGISTER CONVENTIONS -- R0  -- WORK REGISTER                        *
*                         R1  -- WORK REGISTER                        *
*                         WA  -- SJB ADDRESS                          *
*                         WB  -- WORK REGISTER                        *
*                         WG  -- SSVT ADDRESS                         *
*                         JCT -- JCT ADDRESS                          *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*        H A S P T I M E   N O R M A L   R E G I S T E R   U S A G E  *
*                                                                     *
*                                                                     *
*        WA    ADDRESS OF SJB                                         *
*        WG    ADDRESS OF SSVT                                        *
*                                                                     *
***********************************************************************
         SPACE 3
***********************************************************************
*                                                                     *
*        H A S P T I M E   I N I T I A L   E N T R Y   P O I N T      *
*                                                                     *
***********************************************************************
         SPACE 2
         USING SJBDSECT,WA         PROVIDE SJB ADDRESSABILITY
         USING $SVDSECT,WG         PROVIDE SSVT ADDRESSABILITY
         SPACE 2
HASPTIME $ENTRY BASE=BASE2         PROVIDE PROCESSOR ENTRY POINT
         L     WG,$SSVT            GET ADDRESS OF SSVT
         B     TMSEARCH             AND BR TO LOOK FOR WORK
         SPACE 1
         CNOP  0,8
TMWAIT   CLI   $SVXSTIM,0          TEST $$POST ELEMENT
         BNE   TMSEARCH            BR IF 'RECENTLY' $$POSTED
        $WAIT  WORK                 ELSE $WAIT FOR SOMEONE TO $POST US
         SPACE 1
TMSEARCH LA    WA,$SVJXCLS-(SJBXQCHN-SJBDSECT)  SET UP TO SCAN SJBS
         MVI   $SVXSTIM,0          RESET $$POST ELEMENT
         SPACE 1
TMSJBNXT L     WA,SJBXQCHN         GET ADDRESS OF NEXT SJB
         LTR   WA,WA               TEST FOR END OF SJB CHAIN
         BZ    TMWAIT              BR IF SO
         L     WB,SJBXSTIM         GET TIME EXCESSION (IF ANY)
         LTR   WB,WB                AND TEST
         BM    TMINIT              BR IF JOB BEGINNING EXECUTION
         TM    SJBSTQE+IPOST,X'80' HAS TIME INTERVAL EXPIRED...
         BZ    TMSJBNXT            BR IF NO
         MVC   PCEWORK(L'TIMEMSG1+L'TIMEMSG2),TIMEMSG1  MOVE MSG
         L     JCT,SJBJQOFF        GET JQE ADDRESS INTO        @OZ40028
         EJECT                                                       R4
         AL    JCT,$JOBQPTR         JCT FOR $WTO               @OZ40028
         LA    R0,L'TIMEMSG1       ASSUME 1ST 'EXCEEDED' MESSAGE
         CL    WB,=F'1'            TEST ASSUMPTION
         BL    TIMEWTO             BR IF VALID
         LA    R0,L'TIMEMSG1+L'TIMEMSG2  ELSE CORRECT LENGTH
         BH    *+6                 BR IF EXCEEDED BY MORE THAN 1 MINUTE
         BCTR  R0,0                 ELSE RE-CORRECT LENGTH
         CVD   WB,PCER1                           EDIT EXCESSION
         MVC   PCEWORK+L'TIMEMSG1+4(3),=X'202120'  AMOUNT
         ED    PCEWORK+L'TIMEMSG1+3(4),PCER1+6      INTO MESSAGE
         SPACE 1
TIMEWTO $WTO   PCEWORK,(R0),ROUTE=$LOG+$MAIN,JOB=YES, ISSUE MSG     R41C
               PRI=$ST,CLASS=$ACTION,WAIT=NO           TO OPERATOR   R4
         SLR   R1,R1               UPDATE                            R4
         IC    R1,$TIMEXS           EXCESSION                        R4
         ALR   WB,R1                 AMOUNT                          R4
         M     R0,=F'60'           RESET TIME                        R4
         ST    R1,SJBSTQE+ITIME     INTERVAL                         R4
         ST    WB,SJBXSTIM         STORE UPDATED TIME EXCESSION
         SPACE 1
TIMESET $STIMER SJBSTQE            ISSUE STIMER FOR NEW INTERVAL
         B     TMSJBNXT            THEN BR TO LOOK FOR MORE WORK
         SPACE 1
         CNOP  0,8
TMINIT   LPR   R1,WB               MAKE INITIAL ESTIMATE POSITIVE
         SLR   WB,WB               RESET FIRST TIME
         ST    WB,SJBXSTIM          ENTRY INDICATOR
         C     R1,=A(24*60*60)     TEST FOR 24 HOURS OR MORE
         BNL   TMSJBNXT            IGNORE IF SO
         ST    R1,SJBSTQE+ITIME     ELSE SET ORIGINAL TIME ESTIMATE
         ST    SAVE,SJBSTQE+IPOST  STORE PCE ADDRESS IN TQE
         B     TIMESET             THEN BR TO ISSUE FIRST STIMER
         SPACE 1
TIMEMSG1 $MSG  308,'ESTIMATED TIME EXCEEDED'                        R41
TIMEMSG2 DC    C' BY XXX MINUTES'  REST OF MSG WHEN LONG FORM
         SPACE 1
         DROP  WA,WG               KILL PROCESSOR ADDRESSABILITY
         SPACE 1
         LTORG
         TITLE 'HASP PROCESS SYSOUT SUPPORT -- INITIAL ENTRY POINT'
***********************************************************************
*                                                                     *
* PROCESSOR NAME -- HASPPSO                                           *
*                                                                     *
* DESCRIPTIVE NAME -- JES2 PROCESS SYSOUT PROCESSOR                   *
*                                                                     *
* FUNCTION -- PROVIDE DATA SET NAMES AND CHARACTERISTICS OF SUB-SYSTEM*
*             DATA SETS TO CONVERSATIONAL TERMINAL SYSTEMS AND TO     *
*             EXTERNAL WRITERS.                                       *
*                                                                     *
* NOTES -- 1)  THE PRIMARY CONTROL BLOCK USED BY HASPPSO IS THE PSO.  *
*              THE PSO CONTAINS A COPY OF THE SSOB PROCESS SYSOUT     *
*              EXTENSION AND OTHER INFORMATION REQUIRED TO SELECT     *
*              DATA SETS IN SOME SORT OF SEQUENCE WITHIN A JOB.       *
*                                                                     *
*          2)  REQUESTS CAN BE MADE EITHER FOR HELD DATA SETS OR FOR  *
*              DATA SETS REPRESENTED IN THE JOT.  HOWEVER, REQUESTORS *
*              ACCESSING THE JOT DATA SETS ARE ONLY ALLOWED TO DELETE *
*              THEM WHEN THRU USING THEM.  HELD DATA SETS, ON THE     *
*              OTHER HAND, MAY BE LEFT ON THE HOLD QUEUE, DELETED,    *
*              RELEASED (TO THE JOT), RE-ROUTED, CHECKPOINTED, OR HAVE*
*              THEIR SYSOUT CLASS CHANGED.                            *
*                                                                     *
*          3)  REQUESTS FOR DATA SETS IN THE JOT COMPETE FOR JOES ON  *
*              AN EQUAL BASIS WITH THE JES2 PRINT/PUNCH PROCESSOR(S). *
*                                                                     *
*          4)  TO IMPROVE THE PERFORMANCE OF THIS PROCESSOR -         *
*                                                                     *
*              A)  IOTS FOR HELD DATA SETS, SINCE THEY CONTAIN ONLY A *
*                  SINGLE PDDB, ARE RE-CREATED FROM THE HQT, IF       *
*                  POSSIBLE (I.E. NON-ALLOCATION IOTS ONLY).          *
*              B)  PERMANENT STORAGE IS OBTAINED, VIA GETMAIN, TO     *
*                  SERVE AS BUFFER STORAGE FOR AN IOT AND AN HQT.     *
*                  WHEN THE PROCESSOR HAS NO MORE WORK TO DO, THE     *
*                  PAGE(S) CONTAINING THE BUFFERS IS RELEASED.        *
*                                                                     *
* REGISTER CONVENTIONS -- R0  -- WORK REGISTER                        *
*                         R1  -- JQE ADDRESS                          *
*                        *WA  -- HQR ADDRESS                          *
*                        *WB  -- HQT ADDRESS                          *
*                         WC  -- PDDB ADDRESS                         *
*                         WD  -- PSO ADDRESS                          *
*                         WE  -- WORK/LINK REGISTER                   *
*                         WF  -- IOT ADDRESS                          *
*                       **WG  -- JOE ADDRESS                          *
*                       **JCT -- JCT ADDRESS                          *
*                                                                     *
*                        *    -- (HELD DATA SET REQUESTS ONLY)        *
*                       **    -- (JOT REQUESTS ONLY)                  *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*        H A S P P S O   I N I T I A L   E N T R Y   P O I N T        *
*                                                                     *
***********************************************************************
         SPACE 2
         USING JQEDSECT,R1         PROVIDE JQE ADDRESSABILITY
         USING HQRDSECT,WA         PROVIDE HQR ADDRESSABILITY
         USING HQTDSECT,WB         PROVIDE HQT ADDRESSABILITY
         USING PSODSECT,WD         PROVIDE PSO ADDRESSABILITY
         USING IOTDSECT,IOT        PROVIDE IOT ADDRESSABILITY
         SPACE 2
HASPPSO  $ENTRY  BASE=BASE2        PROVIDE PROCESSOR ENTRY POINT
         SPACE 1
***********************************************************************
*                                                                     *
*        C O M P U T E   S T O R A G E   R E Q U I R E M E N T        *
*                                                                     *
***********************************************************************
         SPACE 1
         LH    R1,$BUFLENG         GET TOTAL SINGLE BUFFER SIZE      R4
         LR    WA,R1               TENTATIVE ADDR OF NEXT BUFFER     R4
         LR    R0,WA               R0 = STARTING ADDR OF NEXT BUFFER
         SRL   R0,12                DIVIDED BY 4K
         ALR   R1,WA               R1 = ADDRESS OF LAST BYTE
         BCTR  R1,0                 OF NEXT BUFFER
         SRL   R1,12                 DIVIDED BY 4K
         CLR   R0,R1               IF BUFFER CROSSES 4K BOUNDARY,
         BE    *+10                 BR TO USE TENTATIVE BUFFER ADDR
         SLL   R1,12                 ELSE USE NEXT 4K BOUNDARY AS
         LR    WA,R1                  STARTING ADDR OF NEXT BUFFER
         LR    WB,WA               SAVE RELATIVE ADDR OF NEXT BUFFER
         AH    WA,$BUFLENG         R0 = TOTAL BUFFER STORAGE         R4
         LA    R0,4095(,WA)         REQUIREMENT ROUNDED
         SRL   R0,12                 UP TO NEXT
         SLL   R0,12                  4K BOUNDARY
         ST    R0,TBUFSIZE         SAVE BUFFER STORAGE REQUIREMENT
         EJECT
***********************************************************************
*                                                                     *
*        G E T   P E R M A N E N T   B U F F E R   S T O R A G E      *
*                                                                     *
***********************************************************************
         SPACE 1
         GETMAIN RC,LV=(0),BNDRY=PAGE  THEN GET THE BUFFER STORAGE
         LR    IOT,R1              ASSIGN 1ST BUFFER TO IOT
         ALR   WB,R1               ASSIGN 2ND BUFFER TO HQT
         ICM   IOT,8,=AL1(X'80')   SHOW BUFFERS PAGE-RELEASED
         LTR   R15,R15             TEST GETMAIN
         BZ    TQSEARCH            BR IF VALID TO PROCESS
T01     $ERROR                      ELSE CRUMP
         SPACE 1
TBUFSIZE DC    A(*-*)              TOTAL PERMANENT BUFFER STORAGE    R4
         TITLE 'HASP PROCESS SYSOUT SUPPORT -- MAIN PROCESSOR $WAIT'
         USING SJBDSECT,WC         PROVIDE SJB ADDRESSABILITY
         USING $SVDSECT,WE         PROVIDE SVT ADDRESSABILITY
         SPACE 1
         CNOP  0,8
TWAIT1   CLI   $SVPSO,0            TEST $$POST ELEMENT
         BNE   TQSEARCH            BR IF 'RECENTLY' $$POSTED
         LTR   IOT,IOT             HAVE BFRS BEEN PAGE-RELEASED...
         BM    TJBWAIT             BR IF SO
        $PGSRVC RLSE,(IOT),TBUFSIZE ELSE RELEASE THEM                R4
         ICM   IOT,8,=AL1(X'80')   SHOW BUFFERS PAGE-RELEASED
         SPACE 1
TJBWAIT $WAIT  WORK                $WAIT UNTIL $$POSTED
         SPACE 1
***********************************************************************
*                                                                     *
*        S E A R C H   P R O C E S S   S Y S O U T   Q U E U E        *
*                                                                     *
***********************************************************************
         SPACE 1
TQSEARCH L     WE,$SSVT            GET SSVT ADDRESS
         MVI   $SVPSO,0            RESET $$POST ELEMENT
         ICM   WD,15,$SVPRGQ       IF PSO PURGE Q IS EMPTY,    @OZ40277
         BZ    TQOQUE               THEN GO CHECK $OQUEUE      @OZ40277
         L     R1,PSONEXT          DEQUEUE THE PSO             @OZ40277
         ST    R1,$SVPRGQ           FROM THE $SVPRGQ AND       @OZ40277
         B     T2NDARY               BRANCH TO PROCESS IT      @OZ40277
TQOQUE   L     WD,$OQUEUE          IF GROUP REQUEST RESULTING  @OZ40277
         LTR   WD,WD                FROM $O COMMAND,
         BNZ   TJOBLOC               BR TO PROCESS IT
         LM    WC,WD,$SVPSOQ       LOAD PROCESS SYSOUT HEADER
         SPACE 1
TQNEXT   LTR   WC,WC               TEST FOR EMPTY QUEUE
         BZ    TWAIT1              BR IF SO
         MVI   SJBTFLOW,255        SET HASP REFERENCE FLAG
         L     R0,SJBTCHN          LOAD ADDRESS OF NEXT SJB
         LR    R1,WD               COPY HASH VALUE
         CDS   WC,R0,$SVPSOQ       TRY TO DE-QUEUE THIS SJB
         BNE   TQNEXT              IF UNSUCCESSFUL, TRY AGAIN
         ST    WC,$PSOPEND         SAVE SJB ADDRESS            @OZ54367
         CLI   $SVTSLOK,0          IS IT OK TO WORK WITH SJB...
         BE    TGOTSJB             BR IF YES
        $GETLOK ,                   ELSE GET SJB LOCK
         MVI   $SVTSLOK,0          SHOW WE HAVE CONTROL
        $FRELOK ,                   AND FREE THE SJB LOCK
         SPACE 1
TGOTSJB  L     WD,SJBPSOP          GET PSO ADDRESS FROM SJB
         ST    WC,PSOSJB           SAVE SJB ADDRESS IN PSO
         CLI   PSOWKOFF,0          ANY JOES ALLOCATED...       @OZ40028
         BNE   HASPWTR             BR IF YES (IGNORE HOLD)          R41
         SPACE 1
         DROP  WC,WE               KILL SJB, SSVT ADDRESSABILITY
 TITLE 'HASP PROCESS SYSOUT SUPPORT -- CONVERSATIONAL REQUEST SUPPORT'
         CLC   PSOIOTTR,$ZEROS     HELD DATA SET ALLOCATED...  @OZ31509
         BNZ   T2NDARY             BR IF YES (ASSUME HOLD)          R41
         TM    PSOFLG1,PSOFHLD     REQUEST FOR HELD DATA SET...@OZ19449
         BZ    HASPWTR             BR IF NO TO XWTR SUPPORT         R41
         MVI   PSORETN+3,PSOFEODS  SET GROUP RQST 'NO DATA SET' FLAG R4
         TM    PSOFLG1,PSOFJOBI    TEST JOB ID REQUIREMENT
         BZ    TSTNMREQ            BR IF NO
         SPACE 1
***********************************************************************
*                                                                     *
*        L O C A T E   J O B   B Y   H A S P   J O B   I D            *
*                                                                     *
***********************************************************************
         SPACE 1
TJOBLOC $QLOC  PSOJOBNO            TRY TO LOCATE JOB BY JOB NUMBER
         BNZ   TNUMOK              BR IF JOB LOCATED
         TM    PSOFLG1,PSOFJOBN    IF JOB NAME NOT REQUIRED,
         BZ    TRCNOJOB             BR TO INDICATE JOB NOT FOUND
         BAL   LINK,TLOCBYNM       IF JOB NOT FOUND BY NAME,
         BNZ   TRCNOJOB             BR TO INDICATE SO
         SPACE 1
TRCINVJ  LA    R0,PSOFINVJ         INDICATE INVALID JOB NAME/ID
         B     TPOST                AND BR TO POST WAITING TASK
         SPACE 1
TSTNMREQ $QSUSE                    REQUEST ACCESS TO CHECKPOINT DATA R4
         TM    PSOFLG1,PSOFJOBN    IF JOB NAME REQUIRED,
         BO    TFINDNM              BR TO LOCATE BY JOB NAME
         SLR   R15,R15               ELSE PREPARE TO
         LA    R14,$JQTYPES*2         SCAN ACTIVE JOB QUEUES
         SPACE 1
TNXTQUE1 LA    R15,2(,R15)         BUMP QUEUE OFFSET
         CLR   R15,R14             IF END OF ALL QUEUES,
         BH    TRCEODS              BR TO SHOW NO HELD OUTPUT
         LA    R1,$JQHEADS-2-QUECHAIN(R15)  PREPARE TO SCAN JOB Q
         SPACE 1
TNXTJQE1 LH    R1,JQECHAIN         GET OFFSET
         N     R1,=X'0000FFFF'      OF NEXT JQE
         BZ    TNXTQUE1            BR IF END OF QUEUE
         SLL   R1,2                 ELSE CONVERT OFFSET
         AL    R1,$JOBQPTR           TO ABSOLUTE ADDRESS
         LH    R0,JQEHLDCT         IF NO HELD
         LTR   R0,R0                DATA SET(S) IN JOB,
         BZ    TNXTJQE1              LOOP
         CLC   PSOPGMN,WTR3540     IF CALLER NOT 3540 EXT WTR  @Y30O
         BNE   TGOTJOB              GET HOLD QUEUE LOCK        @Y30O
         TM    JQEHLDCT+1,JQEHLDDS IF NO 3540 EXT WTR DATASETS @Y30O
         BNO   TNXTJQE1             REJECT THIS, GET NEXT JQE  @Y30O
         B     TGOTJOB                ELSE BR TO GET HOLD QUEUE LOCK
         EJECT
***********************************************************************
*                                                                     *
*        L O C A T E   J O B   B Y   N A M E   O N L Y                *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
TFINDNM  BAL   LINK,TLOCBYNM       IF JOB NOT FOUND BY NAME,
         BNZ   TRCNOJOB             BR TO INDICATE SO
         ICM   WC,3,JQEHLDCT       IF JOB FOUND HAS HELD DATA SETS,
         BNZ   TGOT1                BR TO TEST FOR DUPLICATE JOB
         SPACE 1
         BAL   LINK,TNXTJQE2       IF NO OTHER JOB WITH SAME NAME,
         BNZ   TRCEODS              BR TO SHOW NO HELD DATA SETS
         ICM   WC,3,JQEHLDCT       IF JOB HAS NO HELD DATA SETS,
         BZ    TNXTJQE2             RETURN TO JOB QUEUE SCAN
         SPACE 1
TGOT1    LR    WE,R1               SAVE JQE ADDRESS
         BAL   LINK,TNXTJQE2       IF ANOTHER JOB WITH SAME NAME,
         BZ    TWINS                BR TO TEST FOR HELD DATA SETS
         LR    R1,WE                 ELSE RESTORE JQE ADDRESS
         B     TGOTJOB                AND BR TO GET HOLD QUEUE LOCK
         SPACE 1
TWINS    ICM   WC,3,JQEHLDCT       IF JOB HAS NO HELD DATA SETS,
         BZ    TNXTJQE2             RETURN TO JOB QUEUE SCAN
         SPACE 1
TRCDUPJ  LA    R0,PSOFDUPJ         INDICATE DUPLICATE JOB NAMES
         B     TPOST                AND BR TO POST WAITING TASK
         SPACE 1
TRCNOJOB LA    R0,PSOFNJOB         INDICATE JOB NOT FOUND
         B     TPOST                AND BR TO POST WAITING TASK
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        J O B - L O C A T E - B Y - N A M E   S U B R O U T I N E    *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  4,8
TLOCBYNM L     R0,$JOBQPTR         PREPARE TO SCAN
         SLR   R15,R15              ACTIVE JOB QUEUES
         SPACE 1
TNXTQUE2 LA    R15,2(,R15)         BUMP QUEUE COUNT
         CL    R15,=A($JQTYPES*2)  IF END OF ALL QUEUES,
         BHR   LINK                 RETURN WITH NON-ZERO CC
         LA    R1,$JQHEADS-2-QUECHAIN(R15)  PREPARE TO SCAN JOB Q
         SPACE 1
TNXTJQE2 LH    R1,JQECHAIN         GET OFFSET
         N     R1,=X'0000FFFF'      OF NEXT JQE
         BZ    TNXTQUE2            BR IF END OF QUEUE
         SLL   R1,2                 ELSE CONVERT OFFSET
         ALR   R1,R0                 TO ABSOLUTE ADDRESS
         CLI   JQETYPE,X'40'       IS JOB IN JCL CONV          @OZ24850
         BE    TNXTJQE2            YES, CONTINUE SEARCH        @OZ24850
*                                  THIS LINE DELETED BY APAR   @OZ36864
*                                  THIS LINE DELETED BY APAR   @OZ36864
         CLC   PSOJOBN,JQEJNAME    IF JOB NAME DOESN'T MATCH,
         BNE   TNXTJQE2             LOOP
         BR    LINK                  ELSE RETURN WITH CC = 0
         EJECT
***********************************************************************
*                                                                     *
*        J O B   F O U N D   B Y   J O B   I D                        *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
TNUMOK   TM    PSOFLG1,PSOFJOBN    IF JOB NAME NOT REQUIRED,
         BZ    *+14                 BR TO TEST FOR HELD DATA SETS
         CLC   PSOJOBN,JQEJNAME    IF JOB NAME DOESN'T MATCH,
         BNE   TRCINVJ              BR TO INDICATE SO
         LH    R0,JQEHLDCT         IF JOB HAS NO                     R4
         SRA   R0,4                 HELD DATA SETS,                  R4
         BZ    TRCEODS               BR TO INDICATE SO               R4
         SPACE 1
***********************************************************************
*                                                                     *
*        L O C A T E D   J O B   H A S   H E L D   D A T A   S E T    *
*                                                                     *
***********************************************************************
         SPACE 1
TGOTJOB  LR    R0,R1               SAVE
         SL    R0,$JOBQPTR          JQE
         ST    R0,PSOJQEP            OFFSET
         MVC   PSOJOBNO,JQEJOBNO      AND HASP JOB NUMB&R
         BAL   WE,TGETLOK          GET JOB HOLD QUEUE LOCK
         CLC   PSOJOBNO,JQEJOBNO   IF JOB NUMBER CHANGED,
         BNE   TLOSTJOB             JOB HAS BEEN PURGED
         LH    R0,JQEHLDCT         IF JOB NO LONGER                  R4
         SRA   R0,4                 HAS HELD DATA SETS,              R4
         BNP   TDUMPJOB              BR TO IGNORE JOB                R4
         CLC   PSOPGMN,WTR3540     TEST FOR 3540 REQUEST             R4
         BNE   TGOTLOK             BR IF NO                          R4
         TM    JQEHLDCT+1,JQEHLDDS TEST FOR 3540 DATA SET(S)         R4
         BO    TGOTLOK             BR IF YES                         R4
         SPACE 1                                                     R4
TDUMPJOB CLI   JQETYPE,$PURGE      IF JOB BEING PURGED,              R4
         BE    TLOSTJOB             TREAT AS LOST JOB
         NI    JQEHQLOK,255-QUEBUSY  RESET HOLD QUEUE LOCK
         TM    PSOFLG1,PSOFJOBI+PSOFJOBN  IF SPECIFIC JOB REQUEST,
         BNZ   TRCEODS                     BR TO SHOW NO DATA SETS
         B     TSTNMREQ                     ELSE FIND ANOTHER JOB
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        J O B   E N D E D   W H I L E   G E T T I N G   L O C K      *
*                                                                     *
***********************************************************************
         SPACE 1
TLOSTJOB NI    JQEHQLOK,255-QUEBUSY  RESET HOLD QUEUE LOCK
         TM    PSOFLG1,PSOFJOBI+PSOFJOBN  IF SPECIFIC JOB REQUEST,
         BNZ   TRCNOJOB                    BR TO SHOW JOB NOT FOUND
         B     TSTNMREQ                     ELSE FIND ANOTHER JOB
         SPACE 1                                                     R4
***********************************************************************
*                                                                     *
*        J O B   W I T H   H E L D   D A T A   S E T   L O C K E D    *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
TGOTLOK  LH    R0,JQEJOBNO         MOVE
         CVD   R0,PCER1             JOB ID
         UNPK  PSOJOBI+3(5),PCER1+5(3)  TO
         OI    PSOJOBI+7,C'0'            PSO
         MVC   PSOJOBI(3),=C'JOB'  ASSUME BACKGROUND JOB
         C     R0,=F'10000'        TEST ASSUMPTION
         BL    *+10                BR IF VALID
         MVC   PSOJOBI(4),=C'STC0' ASSUME STARTED TASK
         C     R0,=F'20000'        TEST ASSUMPTION
         BL    *+10                BR IF VALID
         MVC   PSOJOBI(3),=C'TSU'   ELSE MUST BE FOREGROUND JOB
         MVC   PCESEEK,JQETRAK     SET SEEK ADDRESS FOR $EXCP
         BAL   WE,TGETBUF          GET BUFFERS FOR I/O
         BAL   WE,THQTRD           READ IN THE JCT
         ICM   R0,15,JCTHQT-JCTDSECT(WB)  GET HQT ADDRESS      @OZ39316
         BZ    TRNOHELD            BR IF NO HQT FOR JOB        @OZ39316
         ST    R0,PSOHQT                 ELSE SAVE HQT ADDR    @OZ39316
         ST    R0,PCESEEK                 AND READ
         BAL   WE,THQTRD                   IN 1ST HQT
         CLC   HQTID,=CL4'HQT'     IF VALID HQT,
         BE    THQR1                BR TO LOCATE 1ST HELD DATA SET
         SPACE 1                                               @OZ39316
TRNOHELD BAL   WE,TREMLOK          REMOVE JOB HOLD QUEUE LOCK  @OZ39316
         B     TRCEODS             BR TO SHOW NO HELD OUTPUT   @OZ39316
         EJECT
***********************************************************************
*                                                                     *
*        S E C O N D A R Y   E N T R Y   T O   H A S P P S O          *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
T2NDARY  LA    PDDB,PSOPDDB        GET ADDRESS OF RETURNED PDDB
         SPACE 1
         USING PDBDSECT,PDDB       PROVIDE PDDB ADDRESSABILITY
         SPACE 1
         L     R1,PSOJQEP          GET JQE OFFSET FROM PSO
         AL    R1,$JOBQPTR         CONVERT TO ABSOLUTE ADDRESS
         BAL   WE,TGETLOK          GET JOB HOLD QUEUE LOCK
         TM    JQEFLAGS,QUEPURGE   TEST FOR JOB BEING PURGED
         BNO   *+8                 BR IF NO
         OI    PDBFLAG1,PDB1NSOT    ELSE FLAG DATASET FOR DELETION
         TM    PSOFLG2,PSOFCKPT    TEST CHECKPOINT REQUIREMENT
         BZ    *+10                BR IF NONE
         MVC   PDBRBA,PSORBA       UPDATE CHECKPOINT FIELD
         SPACE 1
***********************************************************************
*                                                                     *
*        T E S T   F O R   M O D I F I E D   P D D B                  *
*                                                                     *
***********************************************************************
         SPACE 1
         BAL   WE,TGETBUF          GET BUFFER FOR HQT
         MVC   HQTHQT,PSOHQT       SET UP INITIAL HQT READ     @OZ31509
*              THIS LINE DELETED BY APAR NUMBER                @OZ31509
         SPACE 1                                               @OZ31509
THQTNEXT MVC   PSOHQT,HQTHQT       SET UP FOR NEXT HQT READ    @OZ31509
         MVC   PCESEEK,PSOHQT      GET TRACK ADDRESS OF HQT    @OZ31509
*              THIS LINE DELETED BY APAR NUMBER                @OZ31509
         BAL   WE,THQTRD           READ IN THE HQT             @OZ31509
         L     R0,PSOIOTTR         PREPARE                     @OZ31509
         LA    WA,HQTHQR            TO                         @OZ31509
         SL    WA,=A(HQRLENG)        LOCATE                    @OZ31509
         L     R1,HQTHQRP             THE                      @OZ31509
         LA    R1,0(WB,R1)             HQR                     @OZ31509
         SPACE 1                                               @OZ31509
THQRNEXT LA    WA,HQRLENG(,WA)     POINT TO NEXT HQR IN HQT    @OZ31509
         CLR   WA,R1               TEST FOR END OF HQT         @OZ31509
         BE    THQTNEXT            BR IF YES                   @OZ31509
         C     R0,HQRIOT           IS THIS THE HQR...          @OZ31509
         BNE   THQRNEXT            BR IF NO                    @OZ31509
*              THIS LINE DELETED BY APAR NUMBER                @OZ31509
         EJECT                                                 @OZ31509
TDISPOSE TM    HQRSTAT,HQRCAN      TEST FOR DELAYED CANCEL
         BZ    *+8                 BR IF NO
         OI    PDBFLAG1,PDB1NSOT    ELSE FLAG DATASET FOR DELETION
         TM    HQRSTAT,HQRRLSE     TEST FOR DELAYED RELEASE
         BZ    *+8                 BR IF NO
         NI    PDBFLAG1,255-PDB1HOLD  ELSE RELEASE THE DATASET
         NI    HQRSTAT,255-HQRCAN-HQRRLSE-HQRINUSE  RESET HQR FLAGS
         OI    HQTFLAG1,HQT1CKPT   REQUEST HQT CHECKPOINT
         CLC   HQRPDDB,PSOPDDB     TEST RETURNED PDDB FOR CHANGE
         BE    THOLD               BR IF NO CHANGES TO PDDB
         MVC   HQRPDDB,PSOPDDB      ELSE MOVE UPDATED PDDB TO HQR
*              THIS LINE DELETED BY APAR NUMBER                @OZ31509
         EJECT
***********************************************************************
*                                                                     *
*        D I S P O S E   O F   M O D I F I E D   H Q R                *
*                                                                     *
***********************************************************************
         SPACE 1
         L     R0,HQRIOT           GET TRACK ADDRESS OF IOT
         ST    R0,PCESEEK           AND STORE FOR I/O
         ST    IOT,PCEBUFAD        SET BUFFER ADDRESS FOR $EXCP
         TM    HQRSTAT,HQRTGMAP    TEST FOR ALLOCATION IOT
         BZ    TNOALLOC            BR IF NO
         SPACE 1
***********************************************************************
*                                                                     *
*        R E A D   I N   A L L O C A T I O N   I O T                  *
*                                                                     *
***********************************************************************
         SPACE 1
         MVI   PCEDEVTP,PCEDARD    INDICATE READ OPERATION           R4
         BAL   WE,TIO              READ IN THE IOT
         BM    TDSTERR             BR IF ERROR READING IOT           R4
         CLC   IOTJBKEY,HQTJBKEY   TEST IOT VALIDITY
         BE    TIOTPUT             BR IF OK
         SPACE 1
TDSTERR $DISTERR                   ISSUE DISASTROUS ERROR MESSAGE
         OI    PDBFLAG1,PDB1NSOT   INDICATE DATASET TO BE DELETED
         OI    HQRSTAT,HQRUNHLD    SHOW DATASET NO LONGER HELD @OZ39639
         B     TENDTEST             AND BR TO TEST NXT REQUEST @OZ39639
         EJECT
***********************************************************************
*                                                                     *
*        R E C O N S T R U C T   N O N - A L L O C A T I O N   I O T  *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
TNOALLOC MVC   IOTJBKEY,HQTJBKEY   SET
         MVC   IOTTRACK,HQRIOT      UNIQUE
         MVC   IOTIOTTR,HQRIOTTR     IOT FIELDS
         L     R15,$CYLMAPL             LENGTH OF                    R4
         LA    R15,TGMAP-TGMDSECT(,R15)  ALLOCATION BIT MAP          R4
         LA    R14,IOTTGMAP         AND ADDR OF 1ST BYTE TO BE CLEARED
         SLR   R1,R1               CLEAR FOR ZEROING
         MVCL  R14,R0              CLEAR IOT ALLOCATION BIT MAP
         MVI   IOTFLAG1,IOT1SPIN    AND SET THE
         MVI   IOTFLAG2,0            IOT FLAG BYTES
         MVC   IOTJQOFF,PSOJQEP    SAVE JQE OFFSET FOR PRPU
         SPACE 1
***********************************************************************
*                                                                     *
*        R E W R I T E   U P D A T E D   I O T                        *
*                                                                     *
***********************************************************************
         SPACE 1
TIOTPUT  L     PDDB,$IOTPDDB       POINT TO                          R4
         ALR   PDDB,IOT             SPIN/HOLD PDDB                   R4
         MVC   0(PDBLENG,PDDB),HQRPDDB  MOVE UPDATED PDDB TO IOT     R4
         L     R0,$IOTPDDB         RESET                             R4
         AL    R0,=A(PDBLENG)       ADDRESS                          R4
         ST    R0,IOTPDDBP           OF NEXT AVAILABLE PDDB          R4
         MVI   PCEDEVTP,PCEDAWR    SHOW WRITE OPERATION
         TM    PDBFLAG1,PDB1NSOT   TEST FOR DATASET TO BE DELETED
         BO    TDELPDDB            BR IF YES                   @OZ39639
         TM    PDBFLAG2,PDB2NEWS   JESNEWS DATA SET...         @OZ39639
         BZ    TREWRITE            BR IF NO                    @OZ39639
         NI    IOTFLAG1,FF-IOT1ALOC-IOT1NEWS  DISOWN JESNEWS   @OZ39639
         OI    PDBFLAG1,PDB1NSOT   DELETE DATA SET FROM JOB    @OZ39639
         SPACE 1                                               @OZ39639
TDELPDDB NI    PDBFLAG1,255-PDB1HOLD-PDB1PSO  SHOW RELEASED    @OZ39639
         TM    IOTFLAG1,IOT1ALOC   TEST FOR ALLOCATION IOT
         BNO   TREWRITE            BR IF NO
        $PURGE IOTTGMAP             ELSE PURGE THE DATA SET'S TRACKS
         NI    IOTFLAG1,255-IOT1ALOC  SHOW NO LONGER ALLOCATION IOT
         SPACE 1
TREWRITE BAL   WE,TIO              RE-WRITE THE IOT AND WAIT ON I/O
         TM    PDBFLAG1,PDB1HOLD   IF DATA SET TO BE RELEASED,
         BZ    TUNHOLD              BR TO UNHOLD THE HQR
         SPACE 1
THOLD    L     R1,PSOJQEP          GET JQE OFFSET FROM PSO
         AL    R1,$JOBQPTR         CONVERT TO ABSOLUTE ADDRESS
         B     TESTDONE             AND BR TO TEST NEXT REQUEST
         EJECT
***********************************************************************
*                                                                     *
*        U N - H O L D   A   D A T A   S E T                          *
*                                                                     *
*        SPECIAL PROCESSING IF JESNEWS DATA SET RELEASED       @OZ39639
*                                                              @OZ39639
***********************************************************************
         SPACE 1
         CNOP  0,8
TUNHOLD  OI    HQRSTAT,HQRUNHLD    SHOW DATA SET NO LONGER HELD
         TM    PDBFLAG2,PDB2NEWS   JESNEWS DATA SET...         @OZ39639
         BZ    TUNHOLD1            BR IF NO                    @OZ39639
         TM    IOTFLAG1,IOT1NEWS   IF IOT STILL SAYS NEWS,     @OZ39639
         BO    TUNHOLD1             THEN DON'T UPDATE JESNEWS  @OZ39639
         OI    IOTFLAG1,IOT1ALOC+IOT1NEWS  SET NEWS INDICATION @OZ39639
         NI    PDBFLAG1,FF-PDB1NSOT        SHOW PRINTABLE      @OZ39639
         MVC   IOTJBKEY,=C'$$NE'   UPDATE IOT JOB KEY          @OZ39639
        $TRACK IOTMSTAB            OBTAIN NEW IOT MTTR         @OZ39639
         ST    R1,IOTTRACK         UPDATE IOT TRACK ADDRESS    @OZ39639
         ST    R1,PCESEEK           AND WRITE NEW JESNEWS      @OZ39639
         BAL   WE,TIO                IOT TO THE SPOOL          @OZ39639
        $QSUSE                     REGAIN ACCESS TO QUEUES     @OZ39639
         MVC   $NEWSIOT,IOTTRACK   UPDATE JESNEWS IOT POINTER  @OZ39639
         MVC   $NEWSTTR,PDBMTTR    UPDATE JESNEWS DS  POINTER  @OZ39639
         L     R10,PSOJQEP         POINT TO JQE FOR            @OZ39639
         AL    R10,$JOBQPTR         JOB=YES MESSAGE            @OZ39639
         L     R1,=A(XNEWSMSG)     POINT TO 'JESNEWS REPLACED' @OZ39639
        $WTO   (R1),L'XNEWSMSG,JOB=YES,  TELL OPERATOR         @OZ39639*
               ROUTE=$UR+$MAIN+$LOG,CLASS=$NORMAL,PRI=$ST      @OZ39639
         B     TENDTEST            BR TO BYPASS JOE CREATION   @OZ45170
         SPACE 1                                               @OZ39639
TUNHOLD1 TM    PDBFLAG1,PDB1NULL+PDB1NSOT  IF NOT PRINTABLE,   @OZ39639
         BNZ   TENDTEST                     BR TO TEST NEXT REQUEST
         LA    WE,PCEWORK          POINT TO WORK AREA FOR JOES
         SPACE 1
         USING JOEDSECT,WE         PROVIDE JOE ADDRESSABILITY
         SPACE 1
        $#BLD  JOES=(WE),PDDB=(PDDB),JQE=PSOJQEP CREATE WK/CH JOES   R4
         MVI   JOEFLAG,$JOESPIN    UPDATE WORK JOE TO                R4
         MVC   JOEIOTTR,IOTTRACK    INDICATE SPUN DATA SET           R4
         LA    R1,JOESIZE(,WE)     POINT TO CHARACTERISTICS JOE
        $#ADD  CHAR=(R1),WORK=(WE) ADD JOE TO JOT                    R4
         BZ    TESTEND             BR IF $#ADD SUCCESSFUL
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        N O   R O O M   I N   J O T                                  *
*                                                                     *
***********************************************************************
         SPACE 1
         NI    PDBFLAG1,255-PDB1PSO  INDICATE DATA SET
         OI    PDBFLAG1,PDB1HOLD      ON SPIN QUEUE (NOT IN JOT)
         SPACE 1
TWRSPIOT MVC   IOTSPIOT,$UNSPUNQ   LIFO QUEUE
         BAL   WE,TIO               IOT TO
        $QSUSE                       SPIN QUEUE                      R4
         CLC   IOTSPIOT,$UNSPUNQ      USING
         BNE   TWRSPIOT                'COMPARE AND SWAP'
         SPACE 1
         MVC   $UNSPUNQ,IOTTRACK   UPDATE POINTER TO 1ST SPIN IOT
                                   PRINT OFF - SECTION DELETED @OZ27300
*                                  THIS LINE DELETED BY APAR   @OZ27300
*                                  THIS LINE DELETED BY APAR   @OZ27300
*                                  THIS LINE DELETED BY APAR   @OZ27300
                                   PRINT ON  - SECTION DELETED @OZ27300
         B     TESTDONE            BR TO CONTINUE              @OZ27300
         SPACE 1
         DROP  WE                  KILL JOE ADDRESSABILITY
         EJECT
         CNOP  0,8
TENDTEST $QSUSE                    REQUEST ACCESS TO CHECKPOINT DATA R4
         SPACE 1
TESTEND  L     R1,PSOJQEP          GET JQE ADDRESS
         AL    R1,$JOBQPTR          FROM PSO
         SPACE 1
THOLDECR LH    R0,JQEHLDCT         DECREMENT
         SL    R0,=A(X'10')         HOLD
         STH   R0,JQEHLDCT           COUNT
         N     R0,=A(X'FFF0')        IF HOLD COUNT NOT ZERO,         R4
         BNZ   TCKPT                  BR TO CHECKPOINT THE JQE @OZ27300
         NI    JQEHLDCT+1,255-JQEHLDDS ELSE RESET 3540 HOLD FLAG     R4
*                                  THIS LINE DELETED BY APAR   @OZ27300
         CLC   JQEJOE,$ZEROS       ANY NON-HELD OUTPUT...      @OZ27300
         BNE   TCKPT               BR IF YES TO CKPT THE JQE   @OZ27300
         CLI   JQETYPE,$HARDCPY    IF JOB NOT IN OUTPUT PHASE,
         BNE   TCKPT                BR TO CHECKPOINT THE JQE
TLOKREL  NI    JQEHQLOK,FF-QUEBUSY   ELSE RELEASE HOLD Q LOCK  @OZ53687
        $QPUT  (R1),$PURGE            AND QUEUE JOB FOR PURGE
         CLI   PSOUFLG,0           IF GROUP REQUEST,
         BNE   TRCOK                BR TO POST WAITING TASK
         TM    PSOFLG2,PSOFDONE    TEST FOR LAST REQUEST
         BO    TRCOK               BR IF SO TO POST WAITING TASK
         SPACE 1
TRCEODS  LA    R0,PSOFEODS         INDICATE SELECTED DATA SET NOT FOUND
         B     TPOST                AND GO TO POST WAITING TASK
         SPACE 1
         CNOP  0,8
TCKPT   $QCKPT (R1)                FORCE CHECKPOINT OF JQE
         BAL   WE,THQTWR            AND RE-WRITE THE HQT       @OZ40278
         L     R1,PSOJQEP          RESTORE JQE ADDRESS         @OZ53687
         AL    R1,$JOBQPTR            FROM PSO                 @OZ53687
         LH    R0,JQEHLDCT         GET HOLD COUNT AFTER WRITE  @OZ53687
         N     R0,=A(X'FFF0')      IF HOLD COUNT NOT ZERO,     @OZ53687
         BNZ   TESTDONE              BR TO RESUME PDDB SCAN    @OZ53687
         CLC   JQEJOE,$ZEROS       IF ANY NON-HELD OUTPUT,     @OZ53687
         BNE   TESTDONE              BR TO RESUME PDDB SCAN    @OZ53687
         CLI   JQETYPE,$HARDCPY    IF NO DATASETS AND JOB ...  @OZ53687
         BE    TLOKREL               IN OUTPUT, Q FOR PURGE    @OZ53687
         SPACE 1
TESTDONE L     R0,HQTHQRP          PREPARE TO RESUME
         ALR   R0,WB                PDDB SCAN
         CLI   PSOUFLG,0           IF GROUP REQUEST,
         BNE   TNXTHQR              BR TO TEST NEXT HQR
         TM    PSOFLG2,PSOFDONE    IF NOT LAST REQUEST,
         BZ    TNXTHQR              BR TO TEST NEXT HQR
         TM    HQTFLAG1,HQT1CKPT   IF HQT NOT UPDATED,               R4
         BZ    SKIP40               BR TO AVOID CHECKPOINT           R4
         BAL   WE,THQTWR             ELSE RE-WRITE CURRENT HQT       R4
SKIP40   BAL   WE,TREMLOK          REMOVE JOB HOLD QUEUE LOCK        R4
         B     TRCOK                AND BR TO SHOW WE'RE DONE        R4
         EJECT
***********************************************************************
*                                                                     *
*        S C A N   F O R   M A T C H I N G   D A T A   S E T          *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
TNXTHQR  LA    WA,HQRLENG(,WA)     POINT TO NEXT HQR
         CLR   WA,R0               IF HQR WITHIN CURRENT HQT,
         BL    TPDBSCAN             BR TO TEST PDDB
         L     WC,HQTHQT           SAVE ADDRESS OF NEXT HQT (IF ANY)
         TM    HQTFLAG1,HQT1CKPT   IF HQT NOT UPDATED,
         BZ    *+8                  BR TO AVOID CHECKPOINT
         BAL   WE,THQTWR             ELSE RE-WRITE CURRENT HQT
*              THIS LINE DELETED BY APAR NUMBER                @OZ24707
         LTR   WC,WC               IF VALID HQT CHAIN ADDRESS,
         BNZ   TNXTHQT              BR TO READ NEXT HQT
         BAL   WE,TREMLOK            ELSE REMOVE JOB HOLD QUEUE LOCK
         CLI   PSOUFLG,0           TEST FOR GROUP REQUEST            R4
         BE    TGROUPNO            BR IF NO                          R4
         CLI   PSORETN+3,PSOFEODS  WERE ANY DATA SETS FOUND...       R4
         BE    TRCEODS             BR IF NO                          R4
         B     TRCOK                ELSE BR TO 'GOOD' RETURN         R4
         SPACE 1                                                     R4
TGROUPNO CLI   PSODSN,0            TEST FOR PRIMARY REQUEST          R4
         BNE   TRCEODS             BR IF NO                          R4
         TM    PSOFLG1,PSOFJOBI+PSOFJOBN TEST FOR JOBNAME/JOBID      R4
         BNZ   TRCEODS             BR IF YES                         R4
         L     R14,=V($QINDEX)     GET JOB'S                         R4
         SLR   R15,R15              CURRENT                          R4
         IC    R15,JQETYPE           QUEUE                           R4
         IC    R15,0(R15,R14)         OFFSET                         R4
         LA    R14,$JQTYPES*2      NUMBER OF QUEUES(TIMES 2)         R4
         B     TNXTJQE1            RE-ENTER JOB QUEUE SCAN           R4
         EJECT                                                       R4
         CNOP  0,8
TNXTHQT  ST    WC,PCESEEK          SET SEEK ADDRESS FOR $EXCP
         ST    WC,PSOHQT           STORE NEW HQT ADDRESS       @OZ24707
         BAL   WE,THQTRD            AND READ IN THE HQT
         SPACE 1
THQR1    L     WE,HQTHQRP          PREPARE TO RESUME
         LA    R0,0(WB,WE)          SCAN OF HQT
         LA    WA,HQTHQR           POINT TO FIRST HQR IN HQT         R4
         SPACE 1
TPDBSCAN TM    HQRSTAT,HQRUNHLD    IF DATA SET NO LONGER HELD,
         BO    TNXTHQR              BR TO TEST NEXT HQR
         LA    PDDB,HQRPDDB        PROVIDE PDDB ADDRESSABILITY
         CLI   PSOUFLG,0           TEST FOR GROUP REQUEST
         BE    TNOTGRUP            BR IF NO
         CLC   PSOCRDT,HQRCRDT     TEST CREATION DATE               R41
         BL    TNXTHQR             BR IF INELLIGIBLE                R41
         TM    PSOFLG1,PSOFCLAS    IF NO CLASS REQUIREMENT,
         BZ    TGRPALTR             BR TO UPDATE PDDB
         LA    R14,L'PSOCLAS         ELSE PREPARE TO CHECK
         LA    R15,PSOCLAS-1          FOR SELECTED CLASS
         SPACE 1
TGRPCLAS LA    R15,1(,R15)         GET ADDRESS OF NEXT CLASS
         CLC   PDBCLASS,0(R15)     IF ELLIGIBLE CLASS,
         BE    TGRPALTR             BR TO UPDATE PDDB
         CLI   0(R15),C' '         IF END OF ELLIGIBLE
         BE    TNXTHQR              CLASS LIST,
         BCT   R14,TGRPCLAS          BR TO TEST NEXT HQR
         B     TNXTHQR                ELSE LOOP
         EJECT
***********************************************************************
*                                                                     *
*        D A T A   S E T   F O R   G R O U P   R E Q U E S T          *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
TGRPALTR OI    HQTFLAG1,HQT1CKPT   REQUEST HQT CHECKPOINT
         MVI   PSORETN+3,PSOFRTOK  SHOW GROUP RQST DATA SET FOUND    R4
         TM    PSOUFLG,PSOFHOLD    IF DATA SET TO REMAIN HELD,
         BO    *+8                  BR TO AVOID RELEASE
         OI    HQRSTAT,HQRRLSE       ELSE FLAG HQR FOR RELEASE
         TM    PSOUFLG,PSOFDELC    IF DATA SET TO BE KEPT,
         BZ    *+8                  BR TO AVOID DELETE
         OI    HQRSTAT,HQRCAN        ELSE FLAG HQR FOR DELETION
         TM    HQRSTAT,HQRINUSE    IF DATA SET IN USE,
         BNZ   TNXTHQR              BR TO TEST NEXT HQR
         MVC   PSOPDDB,HQRPDDB       ELSE PREP FOR DATA SET DISPOSAL
         LA    PDDB,PSOPDDB        POINT TO 'NEW' PDDB
         TM    PSOUFLG,PSOFSETC    IF SYSOUT CLASS UNCHANGED,
         BZ    TGRPA10             BR TO AVOID UPDATE          @OZ32679
         MVC   PDBCLASS,PSOCLS       ELSE UPDATE SYSOUT CLASS
         SLR   R14,R14                CLEAR REGISTER           @OZ32679
         IC    R14,PSOCLS             GET SYSOUT CLASS         @OZ32679
         L     R15,$SSVT              GET ADDRESS OF SSVT      @OZ32679
         LA    R15,$SVSCAT-$SVDSECT(R14,R15) PT TO SCAT ENTRY  @OZ32679
         TM    SCATFLAG-SCADSECT(R15),SCATDUMM DUMMY CLASS..   @OZ32679
         BZ    *+8                    SKIP IF NOT              @OZ32679
         OI    PDBFLAG1,PDB1NSOT      ELSE MARK NOPRINT        @OZ32679
TGRPA10  DS    0H                                              @OZ32679
         TM    PSOUFLG,PSOFROUT    IF ROUTING UNCHANGED,
         BZ    TDISPOSE             BR TO DISPOSE OF DATA SET
         MVC   PDBDEST,PSOROUTE      ELSE RE-ROUTE DATA SET
         B     TDISPOSE            THEN BR TO DISPOSE OF DATA SET
         SPACE 1
         CNOP  0,8
TNOTGRUP TM    PSOFLG1,PSOFCLAS    IF NO CLASS REQUIREMENT,
         BZ    *+14                 BR TO AVOID CLASS TEST
         CLC   PDBCLASS,PSOCLAS    IF NO CLASS MATCH,
         BNE   TNXTHQR              BR TO TEST NEXT HQR
         TM    HQRSTAT,HQRINUSE    TEST FOR DATA SET IN USE
         BZ    TMATCH              BR IF NO                          R4
         TM    HQTFLAG1,HQT1CKPT   IF HQT NOT UPDATED,               R4
         BZ    SKIP50               BR TO AVOID CHECKPOINT           R4
         BAL   WE,THQTWR             ELSE RE-WRITE CURRENT HQT       R4
SKIP50   BAL   WE,TREMLOK          REMOVE JOB HOLD QUEUE LOCK        R4
         SPACE 1
TRCBUSY  LA    R0,PSOFUNAV         INDICATE TRY AGAIN LATER
         B     TPOST                AND GO TO POST WAITING TASK
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        H A V E   D A T A   S E T   F O R   N O N - G R P   R Q S T  *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
TMATCH   CLC   PSOPGMN,WTR3540     IF NOT 3540 REQUEST,              R4
         BNE   TMATCHGO             BR TO ACCEPT DATA SET            R4
         TM    PDBFLAG1,PDB1DSID   IF NOT 3540 DATA SET,             R4
         BZ    TNXTHQR              BR TO REJECT DATA SET            R4
         TM    PSOFLG1,PSOFJOBN+PSOFJOBI  IF NAME AND ID NOT REQ'D,  R4
         BNO   TMATCHGO                    BR TO ACCEPT DATA SET     R4
         PACK PCER1(8),PSODSNR     IF DATA SET NUMBER                R4
         CVB   R1,PCER1             SAME AS LAST PROVIDED            R4
         CH    R1,PDBDSKEY           DATA SET,                       R4
         BE    TNXTHQR                BR TO REJECT DATA SET          R4
         SPACE 1                                                     R4
TMATCHGO MVC   PSOCLAS(1),PDBCLASS MOVE SYSOUT CLASS TO PSO          R4
         SLR   R1,R1               MOVE
         IC    R1,PDBCOPYS          COPY COUNT
         STH   R1,PSOCOPY            TO PSO
         MVC   PSORBA,PDBRBA       MOVE CKPT ADDR (IF ANY) TO PSO
         OC    HQRSTAT,$SIDBUSY    SHOW DATA SET IN USE
         BAL   WE,THQTWR            AND CHECKPOINT THE HQT
         MVC   PSOIOTTR,HQRIOT     SAVE IOT TTR FOR IDENT.     @OZ31509
*              THIS LINE DELETED BY APAR NUMBER                @OZ31509
         BAL   WE,TREMLOK          REMOVE JOB HOLD QUEUE LOCK
         LH    WG,PDBDEST          GET ROUTE CODE FROM PDDB    @OZ33843
*              THIS LINE DELETED BY APAR NUMBER                @OZ31509
*              THIS LINE DELETED BY APAR NUMBER                @OZ31509
*              THIS LINE DELETED BY APAR NUMBER                @OZ31509
*              THIS LINE DELETED BY APAR NUMBER                @OZ31509
*              THIS LINE DELETED BY APAR NUMBER                @OZ31509
*              THIS LINE DELETED BY APAR NUMBER                @OZ31509
         EJECT
TSAVPDDB MVC   PSOPDDB,0(PDDB)     SAVE PDDB IN PSO
         MVC   PSOCLS,PDBCLASS     MOVE OUTPUT CLASS TO PSO
         MVC   PSOFORM,PDBFORMS    MOVE FORMS NUMBER TO PSO
         TM    PDBFLAG1,PDB1DSID   IS DSID IN WTRID/DSID FIELD...    R4
         BZ    SKIP60              BR IF YES TO MOVE WTR ID          R4
         MVC   PSODSID,PDBDSID      ELSE MOVE DSID TO PSO            R4
         BO    SKIP70                AND BR AROUND WTR ID MOVE       R4
SKIP60   MVC   PSOPGMN,PDBWTRID    MOVE WTR ID TO PSO                R4
SKIP70   L     R1,PSOJQEP          GET ADDRESS
         AL    R1,$JOBQPTR          OF JOB QUEUE ELEMENT
         L     WE,$SSVT            GET SSVT ADDRESS
         SPACE 1
         USING $SVDSECT,WE         PROVIDE SSVT ADDRESSABILITY
         SPACE 1
***********************************************************************
*                                                                     *
*        P R O V I D E   E B C D I C   R O U T E   C O D E            *
*                                                                     *
***********************************************************************
         SPACE 1
         MVC   PSODEST,=CL8'LOCAL' ASSUME NO ROUTING
*              THIS LINE DELETED BY APAR NUMBER                @OZ33843
         N     WG,=A(X'FFFF')       AND TEST FOR ROUTING             R4
         BNZ   TRATDEST            BR IF DIRECT ROUTING              R4
         IC    WG,PDBCLASS         GET SYSOUT CLASS FROM PDDB        R4
         LA    WG,$SVSCAT(WG)      POINT TO SCAT ENTRY
         SPACE 1
         USING SCADSECT,WG         PROVIDE SCAT ADDRESSABILITY
         SPACE 1
         TM    SCATFLAG,SCATPNCH   TEST FOR PUNCH ROUTING
         LH    WG,JQEPRTRT         ASSUME PRINT ROUTING
         BZ    *+8                 BR IF VALID ASSUMPTION
         LH    WG,JQEPUNRT          ELSE GET PUNCH ROUTING
         N     WG,=A(X'FFFF')      AND CHECK FOR ROUTING             R4
         BZ    TDSNAME             BR IF NO
         SPACE 1
         USING RATDSECT,R15        PROVIDE RAT ADDRESSABILITY        R4
         SPACE 1
TRATDEST L     R15,$RATABLE        GET ADDRESS OF 1ST RAT ENTRY      R4
         LH    R0,$SVROUT          GET NUMBER OF RAT ENTRIES         R4
         LTR   R0,R0               IF NO REMOTES DEFINED,            R4
         BZ    TUNITDST             CHECK FOR UXXX             @OZ47388
         SPACE 1
         CNOP  0,8                                                   R4
TRATLOOP CH    WG,RATROUTE         TEST FOR RIGHT ENTRY
         BE    TGOTRAT             BR IF SO
         LA    R15,RATEND           ELSE STEP TO NEXT RAT ENTRY
         BCT   R0,TRATLOOP         LOOP UNTIL END OF RAT
TUNITDST CLM   WG,2,=X'00'         WAS REQUEST FOR 'LOCAL'...  @OZ47388
         BNE   TDSNAME             BR IF YES                   @OZ47388
         MVI   PSODSN,C' '         CREATE 12-BYTE              @OZ47388
         MVC   PSODSN+1(11),PSODSN   BLANK WORK AREA           @OZ47388
         CVD   WG,$DOUBLE          CREATE                      @OZ47388
         MVC   PSODSN+5(3),=X'202020'  LEFT-JUSTIFIED          @OZ47388
         EDMK  PSODSN+4(4),$DOUBLE+6    UNIT                   @OZ47388
         MVC   PSODSN+5(3),0(R1)          NUMBER               @OZ47388
         MVI   PSODSN+4,C'U'       RESET FOR 'UNIT'            @OZ47388
         MVC   PSODEST,PSODSN+4    MOVE UNIT ROUTE TO PSO      @OZ47388
         L     R1,PSOJQEP          RESTORE JQE ADDRESS         @OZ47388
         AL    R1,$JOBQPTR         (R1 CLOBBERED BY EDMK)      @OZ47388
         B     TDSNAME             BR IF NO ENTRY FOUND
         SPACE 1                                                     R4
TGOTRAT  MVC   PSODEST,RATNAME     GET PROPER NAME FROM RAT
         SPACE 1
         DROP  WG,R15              KILL RAT, SCAT ADDRESSABILITY
         EJECT
***********************************************************************
*                                                                     *
*        C O N S T R U C T   S U B - S Y S T E M   D S N A M E        *
*                                                                     *
***********************************************************************
         SPACE 1
TDSNAME  MVC   PSODSN(4),$SVSSNM   MOVE SUBSYSTEM NAME TO DSNAME
         MVI   PSODSN+4,C'.'       MOVE QUALIFIERS
         MVC   PSODSN+5(8),PSOJOBI  AND JOB ID
         MVC   PSODSN+13(3),=C'.PS'  TO DSNAME
         LH    R0,PDBDSKEY         GET DD NUMBER FROM PDDB,
         CVD   R0,PCER1             CONVERT TO DECIMAL,
         UNPK  PSODSNR,PCER1+5(3)    THEN TO EBCDIC,
         OI    PSODSNR+L'PSODSNR-1,C'0'  THEN SET SIGN
         MVI   PSODSNR+L'PSODSNR,C' '  MOVE IN FIRST OF TRAILING BLANKS
         MVC   PSODSNR+L'PSODSNR+1(L'PSODSN-(PSODSNR+L'PSODSNR+1-PSODSNC
               )),PSODSNR+L'PSODSNR  THEN MOVE REST OF TRAILING BLANKS
         MVC   PSOJOBN,JQEJNAME    MOVE JOB NAME TO PSO
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        R E Q U E S T   S A T I S F I E D   - -   S E T   R . C .    *
*                                                                     *
***********************************************************************
         SPACE 1
TRCOK    LA    R0,PSOFRTOK         SET 'GOOD' RETURN CODE
         B     TXMPOST             BR TO XMPOST WAITING TASK        R41
         SPACE 1
***********************************************************************
*                                                                     *
*        P R O C E S S I N G   D O N E   - -   I S S U E   P O S T    *
*                                                                     *
***********************************************************************
         SPACE 1
TPOST    MVC   PSOIOTTR,$ZEROS     INDICATE NO HQR ALLOCATED   @OZ31509
         SPACE 1                                                    R41
TXMPOST  ST    R0,PSORETN          STORE RETURN CODE IN PSO         R41
         TM    PSOFLG2,PSOF$O      IF $O INITIATED GROUP REQUEST,
         BO    TFREEPSO             BR TO FREE THE PSO
         TM    PSOFLG2,PSOFPURG    IF PSO IS FROM PURGE,       @OZ40277
         BO    TFREEPRG             THEN FREE THE PSO          @OZ40277
         L     R1,PSOSJB                XM POST
         LA    R1,SJBECBP-SJBDSECT(,R1)  THE WAITING
        $XMPOST (R1)                      TASK
         XC    $PSOPEND,$PSOPEND   CLEAR PENDING SJB ADDR      @OZ54367
         B     TQSEARCH            THEN LOOK FOR MORE WORK TO DO
TFREEPRG LR    R1,WD               GET ADDRESS OF PSO          @OZ40277
         FREEMAIN R,LV=PSOLNGTH,A=(1),SP=241  FREE THE PSO     @OZ40277
         B     TQSEARCH            BR TO FIND OTHER WORK       @OZ40277
         SPACE 1
***********************************************************************
*                                                                     *
*        F R E E   P S O   F R O M   $ O   R E Q U E S T              *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
TFREEPSO MVC   $OQUEUE,PSONEXT     DE-QUEUE THE PSO
         LA    R0,PSOLNGTH         GET LENGTH (AND SUBPOOL) OF PSO
         LR    R1,WD               GET ADDRESS OF PSO
         FREEMAIN R,LV=(0),A=(1)   FREE THE PSO STORAGE
         B     TQSEARCH            THEN BR TO FIND OTHER WORK
         EJECT
***********************************************************************
*                                                                     *
*        R E - W R I T E   C U R R E N T   H Q T                      *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
THQTWR   MVI   PCEDEVTP,PCEDAWR    INDICATE WRITE OPERATION
         MVC   PCESEEK,PSOHQT      SET SEEK ADDRESS FOR $EXCP
         ST    WB,PCEBUFAD         SET BUFFER ADDRESS FOR $EXCP
         NI    HQTFLAG1,255-HQT1CKPT  RESET CKPT REQUEST FLAG
         B     TIO                 THEN BR TO DO WRITE
         SPACE 1                                                     R4
***********************************************************************
*                                                                     *
*        R E A D   A N D   C H E C K   A N   H Q T                    *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
THQTRD   ST    WE,PSOLINK          SAVE RETURN ADDRESS
         MVI   PCEDEVTP,PCEDARD    INDICATE READ OPERATION
         ST    WB,PCEBUFAD         SET BUFFER ADDRESS FOR $EXCP
         BAL   WE,TIO              THEN READ THE HQT
         L     WE,PSOLINK          RESTORE RETURN ADDRESS
         BM    THQTBAD             BR IF ERROR READING HQT           R4
         CLC   HQTID,=CL4'HQT'     IF NOT AN HQT,
         BNE   TESTJCT              BR TO TEST FOR JCT
         CLC   HQTJBKEY,PSOJBKEY   IF VALID IDENTIFIER KEY,
         BER   WE                   RETURN
         B     THQTBAD               ELSE BR TO ISSUE ERROR MSG
         SPACE 1
TESTJCT  CLC   HQTID,=CL4'JCT'     IF NOT A JCT,
         BNE   THQTBAD              BR TO ISSUE ERROR MSG
         CLC   PSOJQEP,JCTJQE-JCTDSECT(WB)  IF WRONG JOB,
         BNE   THQTBAD                       BR TO ISSUE ERROR MSG
         MVC   PSOJBKEY,JCTJBKEY-JCTDSECT(WB)  SAVE IDENTIFIER KEY
         BR    WE                  THEN RETURN
         SPACE 1
THQTBAD $DISTERR                   ISSUE DISATEROUS ERROR MESSAGE
         BAL   WE,TREMLOK          REMOVE JOB HOLD QUEUE LOCK
                                   PRINT OFF - SECTION DELETED @OZ27300
*                                  THIS LINE DELETED BY APAR   @OZ27300
*                                  THIS LINE DELETED BY APAR   @OZ27300
*                                  THIS LINE DELETED BY APAR   @OZ27300
*                                  THIS LINE DELETED BY APAR   @OZ27300
                                   PRINT ON  - SECTION DELETED @OZ27300
         B     TRCEODS             THEN BR TO RETURN WITH ERROR
         EJECT
***********************************************************************
*                                                                     *
*        O B T A I N   J O B   H O L D   Q U E U E   L O C K          *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
TWAIT   $WAIT  ABIT                $WAIT A LITTLE WHILE
         SPACE 1
TGETLOK $QSUSE                     REQUEST ACCESS TO CHECKPOINT DATA R4
         TM    JQEHQLOK,QUEBUSY    IF JOB HOLD QUEUE LOCK HELD,
         BNZ   TWAIT                BR TO $WAIT A LITTLE WHILE
         OC    JQEHQLOK,$SIDBUSY     ELSE GRAB THE LOCK
        $QCKPT (R1)                   AND FORCE CHECKPOINT OF JQE
         BR    WE                  THEN RETURN
         SPACE 5
***********************************************************************
*                                                                     *
*        R E M O V E   J O B   H O L D   Q U E U E   L O C K          *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
TREMLOK $QSUSE                     REQUEST ACCESS TO CHECKPOINT DATA R4
         L     R1,PSOJQEP          GET JQE ADDRESS
         AL    R1,$JOBQPTR          FROM PSO,
         NI    JQEHQLOK,255-QUEBUSY  RESET HOLD QUEUE LOCK,
        $QCKPT (R1)                   AND FORCE CHECKPOINT OF JQE
         BR    WE                  THEN RETURN
         SPACE 1
         DROP  WA,WB,WE,PDDB       KILL CTL BLOCK ADDRESSABILITY
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        P R E P A R E   I O T   A N D   H Q T   B U F F E R S        *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         CNOP  0,8                                                   R4
TGETBUF  LTR   IOT,IOT             IF IOT ALREADY PREPARED,          R4
         BP    TBLDHQT              BR TO BUILD HQT IOB              R4
         LA    IOT,0(,IOT)           ELSE SHOW VALID IOT             R4
        $BFRBLD (IOT)                 AND BUILD IOB WITHIN IOT       R4
         MVC   IOTID,=CL4'IOT'          INITIALIZE IOT               R4
         LH    R1,$BUFLENG               IDENTIFICATION              R4
         STH   R1,IOTLENG                  AND LENGTH FIELDS         R4
         SPACE 1                                                     R4
TBLDHQT $BFRBLD (WB)               REBUILD HQT IOB                   R4
         BR    WE                  THEN RETURN                       R4
         SPACE 3                                                     R4
***********************************************************************
*                                                                     *
*        I O T / H Q T   R E A D / W R I T E   R O U T I N E          *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         CNOP  0,8                                                   R4
TIO      LA    R1,PCEDADCT         GET DIRECT ACCESS DCT ADDRESS     R4
        $EXCP  (R1),WAIT=YES       READ/WRITE IOT/HQT                R4
         BR    WE                  RETURN WITH VALID CC              R4
         EJECT                                                       R4
WTR3540  DC    CL8'IEBDKWTR'       3540 DISKETTE EXTERNAL WRITER     R4
         SPACE 5                                                     R4
         LTORG                                                       R4
  TITLE  'HASP PROCESS SYSOUT SUPPORT -- EXTERNAL WRITER SUPPORT'    R4
***********************************************************************
*                                                                     *
*        B E G I N   E X T E R N A L   W R I T E R   S U P P O R T    *
*                                                                     *
***********************************************************************
         SPACE 1
         USING SJBDSECT,WC         PROVIDE SJB ADDRESSABILITY
         SPACE 1
         CNOP  0,8
HASPWTR  LA    BASE2,*             RE-ESTABLISH BASE ADDRESS         R4
         SPACE 1                                                     R4
         USING HASPWTR,BASE2       PROVIDE NEW ADDRESSABILITY        R4
         SPACE 1                                                     R4
         ST    WB,PSOHQT           SAVE HQT BUFFER ADDRESS           R4
         L     R10,$JOTABLE        GET JOT ADDRESS             @OZ40028
         TM    SJBPSOP,X'C0'       WAS WRITER WAITING ON JOT...      R4
         BZ    TESTRQST            BR IF NO
         BM    *+14                BR IF WAIT COUNT DECREMENTED
         IC    R0,$WTRWTCT          ELSE DECREMENT COUNT
         BCTR  R0,0                  OF EXTERNAL WRITERS
         STC   R0,$WTRWTCT            WAITING ON JOT
         NI    SJBPSOP,255-X'C0'   RESET EXTERNAL WRITER WAIT BITS
         TM    PSOFLG2,PSOFDONE    TEST FOR END OF REQUESTS
         BO    TWTREODS            BR IF SO                          R4
         SPACE 1
TESTRQST CLI   PSOWKOFF,0          NEW REQUEST...              @OZ40028
         BNE   TREENTRY            BR IF NO
         LA    R0,PSOECB            ELSE SET POINTER TO
         ST    R0,PSOWTRC            EXTERNAL WTR PARAMETER AREA
        $QSUSE                     REQUEST ACCESS TO CKPT DATA      R41
         B     TJOEGET             THEN BR TO GET A JOE              R4
         SPACE 1                                                     R4
TWTRDUPJ LA    R0,PSOFDUPJ         INDICATE DUPLICATE JOB NAMES      R4
         B     TWTRPOST             AND BR TO EXIT TO POST RTN       R4
         SPACE 1                                                     R4
TWTREODS LA    R0,PSOFEODS         INDICATE DATA SET NOT FOUND       R4
         SPACE 1                                                     R4
TWTRPOST MVI   PSOWKOFF,0          INDICATE NO JOES ALLOCATED  @OZ40028
         L     R15,=A(TXMPOST)     POINT TO XMPOST ROUTINE          R41
         SPACE 1                                                     R4
***********************************************************************
*                                                                     *
*        ( O N L Y )   E X I T   F R O M   H A S P W T R              *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
TWTREXIT L     WB,PSOHQT           RESTORE HQT BUFFER ADDRESS        R4
         L     BASE2,=A(HASPPSO)   RESTORE HASPPSO BASE              R4
         BR    R15                 THEN RETURN TO HASPPSO            R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        T R Y   T O   G E T   A   J O E                              *
*                                                                     *
***********************************************************************
         SPACE 1
*                                  THIS LINE DELETED BY APAR   @OZ40028
         SPACE 1
         USING JOTDSECT,R10        PROVIDE JOT ADDRESSABILITY
         SPACE 1
TJOEGET  LH    R1,JOTFREC          TEST FOR                    @OZ40028
         BCTR  R1,0                 MINIMUM NUMBER
         LTR   R1,R1                 OF FREE JOES
         BP    TESTJOT             BR IF SO TO TEST JOT
         SPACE 1
***********************************************************************
*                                                                     *
*        F O R C E   W R I T E R   T O   W A I T   O N   J O T        *
*                                                                     *
***********************************************************************
         SPACE 1
TNOJOE   L     WC,PSOSJB           RESTORE SJB ADDRESS               R4
         OI    SJBPSOP,X'C0'       SET JOT WAIT BITS
         SLR   R0,R0               CLEAR
         ST    R0,PSOECB            WAIT ECB
         IC    R1,$WTRWTCT         INCREMENT COUNT
         LA    R1,1(,R1)            OF EXTERNAL WRITERS
         STC   R1,$WTRWTCT           WAITING ON JOT
         LA    R0,PSOECB           SET XMPOST
         ST    R0,PSOECBP           PARAMETER LIST
         MVC   PSOECBP+4(8),SJBASCBP FOR JOT POST ROUTINE
         B     TWTREODS            THEN BR TO SHOW NO DATA SET       R4
         SPACE 1
         DROP  WC                  KILL SJB ADDRESSABILITY
         EJECT
***********************************************************************
*                                                                     *
*        S C A N   J O T   F O R   B E S T   J O E                    *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
TESTJOT  SLR   WE,WE               CLEAR BEST
         ST    WE,PCER1             CHOICE SLOT
         MVI   PCER0,36            SET CLASS ORDER PRIORITY TO 36
         TM    PSOFLG1,PSOFCLAS    TEST CLASS REQUIREMENT
         BZ    TNOCLASS            BR IF NONE
         MVI   PSOCLAS+L'PSOCLAS,C' '  SET CLASS SCAN TERMINATOR
         LA    WE,PSOCLAS-1        SET UP TO SCAN CLASS LIST
         SPACE 1
TNXTCLAS LA    WE,1(,WE)           POINT TO NEXT CLASS
         CLI   0(WE),C' '          TEST FOR END OF CLASS LIST
         BE    TESTBEST            BR IF SO
         SLR   WG,WG               PICK UP
         IC    WG,0(,WE)            OUTPUT CLASS
         S     WG,=A(C'A')         REDUCE TO ELIGIBLE RANGE
         BM    TNXTCLAS            BR IF ILLEGAL OUTPUT CLASS
         IC    WG,TJOTDISP(WG)      ELSE GET JOTCLSQ OFFSET
         LTR   WG,WG                 AND TEST
         BZ    TNXTCLAS            BR IF ILLEGAL OUTPUT CLASS
         LA    WG,JOTCLSQ-2-(JOENEXT-JOEDSECT)(WG)  POINT TO NEXT QUEUE
         SPACE 1
         USING JOEDSECT,WG         PROVIDE JOE ADDRESSABILITY
         SPACE 1
TWKJOE   LH    WG,JOENEXT          GET OFFSET
         N     WG,=X'0000FFFF'      OF NEXT WORK JOE
         BNZ   TVERIFY             BR IF VALID OFFSET
         NI    PCER0,X'3F'         CLEAR PRIORITY BITS
         IC    WG,PCER0            DECREMENT
         BCTR  WG,0                 CLASS ORDER
         STC   WG,PCER0              PRIORITY
         TM    PSOFLG1,PSOFCLAS    TEST CLASS REQUIREMENT
         BO    TNXTCLAS            BR IF SO TO TEST NEXT CLASS
         SPACE 1
TNXTJOE  BCTR  R15,0               DROP BACK TO NEXT JOT CLASS
         BCT   R15,TJOECLAS        BR IF NOT END OF QUEUES
         B     TESTBEST             ELSE BR TO TEST FOR FIND
         SPACE 1
TJOTDISP DC     9AL1(2*(*+1-TJOTDISP)),7AL1(0)        OUTPUT CLASS A-I
         DC     9AL1(2*(*+1-TJOTDISP-7)),8AL1(0)      OUTPUT CLASS J-R
         DC     8AL1(2*(*+1-TJOTDISP-7-8)),6AL1(0)    OUTPUT CLASS S-Z
         DC    10AL1(2*(*+1-TJOTDISP-7-8-6)),6AL1(0)  OUTPUT CLASS 0-9
         SPACE 1
TNOCLASS LA    R15,72              SET UP TO SCAN ALL CLASSES
         SPACE 1
TJOECLAS LH    WG,JOTCLSQ-2(R15)   GET NEXT CLASS QUEUE HDR
         N     WG,=X'0000FFFF'     TEST FOR EMPTY OUTPUT QUEUE
         BZ    TNXTJOE             BR IF SO
         EJECT
*
*        H A V E   A   J O E   - -   V A L I D A T E   I T
*
         SPACE 1
TVERIFY  NI    PCER0,X'3F'         CLEAR PRIORITY BITS
         STH   WG,PCER0+2          SAVE WORK JOE DISPLACEMENT
         SLL   WG,2                CONVERT WORK JOE OFFSET           R4
         ALR   WG,R10               TO ABSOLUTE ADDRESS
         TM    JOEFLAG,$JOEBUSY    TEST JOE STATUS
         BNZ   TWKJOE              BR IF JOE IN USE
         LH    R1,JOEJQE           GET JQE OFFSET
         N     R1,=X'0000FFFF'      FROM JOE
         SLL   R1,2                CONVERT OFFSET
         AL    R1,$JOBQPTR          TO ABSOLUTE ADDRESS
         TM    JQEFLAGS,QUEHOLDA+QUEHOLD1  TEST JOB STATUS
         BNZ   TWKJOE              BR IF JOB HELD
         MVI   PCER0+1,X'FF'       PRESET MAX PRIORITY         @OZ52102
         SLR   R14,R14             LOAD PRIORITY               @OZ52102
         IC    R14,JOEPRIO          FROM JOE                   @OZ52102
         LA    WB,1*16             USE '1' FOR                 @OZ52102
         CLI   JQETYPE,$HARDCPY     JQE PRIORITY               @OZ52102
         BNE   TJOEPR1             IF JOB STILL EXECUTING      @OZ52102
         TM    JQEPRIO,X'F0'       JQE PRIORITY = 15...        @OZ52102
         BO    TJOEPR2             BR IF YES                   @OZ52102
         IC    WB,JQEPRIO          LOAD PRIORITY FROM JQE      @OZ52102
TJOEPR1  ALR   R14,WB              ADD JQE AND JOE PRIORITIES  @OZ52102
         SRL   R14,1               INSURE SUM IN 1 BYTE        @OZ52102
         STC   R14,PCER0+1         SAVE RESULT                 @OZ52102
TJOEPR2  EQU   *                                               @OZ52102
         TM    PSOFLG1,PSOFJOBI    TEST JOB ID REQUIREMENT
         BZ    TESTNAME            BR IF NONE
         CLC   PSOJOBNO,JQEJOBNO   TEST FOR JOB ID MATCH
         BNE   TWKJOE              BR IF NO
         TM    PSOFLG1,PSOFJOBN    TEST JOBNAME REQUIREMENT
         BZ    TESTDEST            BR IF NONE
         CLC   PSOJOBN,JQEJNAME    IS JOBNAME CORRECT...
         BE    TESTDEST            BR IF SO
         LA    R0,PSOFINVJ          ELSE SHOW INVALID JOB NAME/ID    R4
         B     TWTRPOST              AND BR TO EXIT TO POST RTN      R4
         SPACE 1
TESTNAME TM    PSOFLG1,PSOFJOBN    TEST JOBNAME REQUIREMENT
         BZ    TESTDEST            BR IF NONE
         CLC   PSOJOBN,JQEJNAME    TEST FOR JOBNAME MATCH
         BNE   TWKJOE              BR IF NO
         LA    WC,72               SET UP TO SCAN FOR DUPLICATE
         SPACE 1
TNXTCLS  LH    WB,JOTCLSQ-2(WC)    GET NEXT JOT CLASS QUEUE HDR
         N     WB,=X'0000FFFF'     TEST FOR EMPTY OUTPUT QUEUE
         BZ    TSCANCLS            BR IF SO
         SPACE 1
TNAMCHK  SLL   WB,2                CONVERT WORK JOE OFFSET           R4
         ALR   WB,R10               TO ABSOLUTE ADDRESS
         LH    R14,JOEJQE-JOEDSECT(,WB)  GET JQE OFFSET
         CH    R14,JOEJQE          TEST FOR CURRENT JOB
         BE    TJOENXT             BR IF SO TO IGNORE TEST
         N     R14,=X'0000FFFF'     ELSE CONVERT
         SLL   R14,2                 OFFSET TO
         AL    R14,$JOBQPTR           ABSOLUTE ADDRESS
         CLC   JQEJNAME,QUEJNAME(R14)  TEST FOR JOBNAME MATCH
         BE    TWTRDUPJ            RETURN IF SO WITH ERROR           R4
         SPACE 1
TJOENXT  LH    WB,JOENEXT-JOEDSECT(,WB)  GET OFFSET OF NEXT JOE
         N     WB,=X'0000FFFF'     TEST FOR END OF CHAIN
         BNZ   TNAMCHK             BR IF NO
         SPACE 1
TSCANCLS BCTR  WC,0                LOOP UNTIL ALL
         BCT   WC,TNXTCLS           QUEUES SEARCHED
         EJECT
***********************************************************************
*                                                                     *
*        T E S T   O P T I O N A L   Q U A L I F I C A T I O N S      *
*                                                                     *
***********************************************************************
         SPACE 1
TESTDEST TM    PSOFLG1,PSOFDEST    TEST ROUTING REQUIREMENT
         BZ    TESTPGMN            BR IF NONE
         LH    WB,JOEROUT          GET ROUTING FROM JOE              R4
         LTR   WB,WB               TEST FOR EXPLICIT ROUTING         R4
         BNZ   *+8                 BR IF YES                         R4
         LH    WB,JQEPRTRT          ELSE GET ROUTING FROM JQE        R4
         CH    WB,PSOROUTE         TEST DESTINATION
         BNE   TWKJOE              BR IF NO MATCH
         SPACE 1
TESTPGMN TM    PSOFLG1,PSOFPGM     TEST WTR NAME REQUIREMENT
         BZ    TESTFORM            BR IF NONE
         LH    WB,JOECHAR           ELSE GET ADDRESS
         N     WB,=X'0000FFFF'       OF
         SLL   WB,2                   CHARACTERISTICS                R4
         ALR   WB,R10                  JOE
         CLC   PSOPGMN,JOEWTRID-JOEDSECT(WB)  TEST WRITER NAME
         BNE   TWKJOE              BR IF NO MATCH
         SPACE 1
TESTFORM TM    PSOFLG1,PSOFFORM    TEST FORMS REQUIREMENT
         BZ    TJOEGOT             BR IF NONE
         LH    WB,JOECHAR           ELSE GET ADDRESS
         N     WB,=X'0000FFFF'       OF
         SLL   WB,2                   CHARACTERISTICS                R4
         ALR   WB,R10                  JOE
         CLC   PSOFORM,JOEFORM-JOEDSECT(WB)  TEST FORMS
         BNE   TWKJOE              BR IF NO MATCH
         SPACE 1
TJOEGOT  OI    PCER0,X'80'         SET 'MATCH' PRIORITY BIT
         CLC   PCER0(2),PCER1      IS CURRENT JOE A BETTER CHOICE...
         BL    TWKJOE              BR IF NO
         MVC   PCER1,PCER0          ELSE REPLACE BEST CHOICE         R4
         B     TWKJOE                AND RESUME SEARCH               R4
         SPACE 1
***********************************************************************
*                                                                     *
*        E N D   O F   J O T   S C A N                                *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
TESTBEST MVI   PSOWTRC,0           RESET HI-ORDER BYTE OF PSOWTRC
         OC    PCER1,PCER1         TEST FOR SELECTED JOE
         BZ    TNOJOE              BR IF NO TO WAIT ON JOT
         EJECT
***********************************************************************
*                                                                     *
*        H A V E   S E L E C T E D   A   W O R K   J O E              *
*                                                                     *
***********************************************************************
         SPACE 1
         LH    WA,PCER1+2          SAVE WORK-JOE OFFSET        @OZ27300
         LH    WG,PCER1+2          SAVE OFFSET                 @OZ40028
         N     WG,=X'0000FFFF'      OF BEST                    @OZ40028
         SLL   WG,2                  WORK JOE                  @OZ40028
         ST    WG,PSOWKOFF            IN PSO                   @OZ40028
         ALR   WG,R10              CONVERT OFFSET TO ADDRESS   @OZ40028
         LH    WB,JOECHAR          SAVE OFFSET                 @OZ40028
         N     WB,=X'0000FFFF'      OF CORRESPONDING           @OZ40028
         SLL   WB,2                  CHARACTERISTICS JOE       @OZ40028
         ST    WB,PSOCHOFF            IN PSO                   @OZ40028
         ALR   WB,R10              CONVERT OFFSET TO ADDRESS   @OZ40028
         LH    R1,JOEJQE           GET JQE OFFSET
         N     R1,=X'0000FFFF'      FROM JOE
         SLL   R1,2                  AND SAVE
         ST    R1,PSOJQEP             IN PSO
         AL    R1,$JOBQPTR         THEN CONVERT TO ABSOLUTE ADDR
         XC    JOEDEVID,JOEDEVID   ZERO DEVICE ID                    R4
         OI    JOEDEVID,X'0F'      INDICATE EXTERNAL WTR       @OZ30706
         OC    JOEFLAG,$SIDBUSY    INDICATE JOE IN USE
        $#CKPT JOE=0(,WG),TYPE=A   CHECKPOINT WORK JOE
         OC    JOECKPT,JOECKPT     TEST FOR CHECKPOINT JOE
         BNZ   TPOSTCK             BR IF SO
         EJECT
***********************************************************************
*                                                                     *
*        O B T A I N   C H E C K P O I N T   J O E                    *
*                                                                     *
***********************************************************************
         SPACE 1
         LH    WC,JOTFREC          DECREMENT
         BCTR  WC,0                 FREE JOE
         STH   WC,JOTFREC            COUNT
         LH    WC,JOTFREQ          GET NEW CHECKPOINT JOE OFFSET
         STH   WC,JOECKPT           AND CHAIN CKPT KOE TO WORK JOE
         N     WC,=X'0000FFFF'     CONVERT TO FULL
         SLL   WC,2                 ADDRESS OFFSET                   R4
        $#CKPT JOE=0(,WC),HEAD=YES CHECKPOINT THE CKPT JOE
         ALR   WC,R10              CONVERT TO ABSOLUTE ADDRESS
         MVI   JOETYPE-JOEDSECT(WC),$JOECKPT INDICATE CKPT-JOE @OZ27300
         MVC   JOTFREQ,JOENEXT-JOEDSECT(WC)  DE-CHAIN THE CKPT JOE
         STH   WA,JOEWORK-JOEDSECT(,WC)  CHAIN TO WORK-JOE     @OZ27300
         SPACE 1
TPOSTCK $POST  $HASPECF,CKPW       $POST THE CHECKPOINT WRITER
         EJECT                                                 @OZ43905
***********************************************************************
*                                                                     *
*        E X T R A C T   S M F   D A T A   F R O M   J C T            *
*                                                                     *
***********************************************************************
         SPACE 1
         LR    JCT,R1              RE-LOAD JQE ADDRESS FOR $#JCT
         SPACE 1
         USING JCTDSECT,JCT        RESTORE JCT ADDRESSABILITY
         SPACE 1
        $#JCT  READ                GET ADDRESS OF JCT
         BNZ   TJCTOK              BRANCH IF READ SUCCESSFUL   @OZ43905
         L     R10,$JOTABLE        RESTORE JOT ADDRESS         @OZ43905
         B     TBADKEY             BR IF READ UNSUCCESSFUL     @OZ43905
TJCTOK   DS    0H                                              @OZ43905
         MVC   PSOWKOFF(1),JCTMCLAS  SAVE MESSAGE CLASS        @OZ40028
         MVC   PSOJBKEY,JCTJBKEY   SAVE JCT FIELDS
         MVC   PSOUSEID,JCTUSEID    RELAVENT TO
         MVC   PSORDRON(8),JCTRDRON  EXTERNAL WRITER
         MVC   PSOJOBI(3),JCTJOBID    MOVE
         PACK  PCER1(3),JCTJOBID+3(5)  JOB ID
         UNPK  PSOJOBI+3(5),PCER1(3)    TO PSO
         L     WC,JCTIOT           SAVE ADDRESS OF FIRST IOT        R41
        $#JCT  FREE                THEN FREE THE JCT
         SPACE 1                                               @OZ40028
         DROP  JCT                 KILL JCT ADDRESSABILITY     @OZ40028
         EJECT
***********************************************************************
*                                                                     *
*        P R E P A R E   T O   P R O C E S S   J O E                  *
*                                                                     *
***********************************************************************
         SPACE 1
         L     R10,$JOTABLE        RESTORE JOT ADDRESS         @OZ40028
         BAL   WE,TBUFGET          GET BUFFER FOR IOT                R4
         LH    WE,JOECKPT          COMPUTE
         N     WE,=X'0000FFFF'      AND
         SLL   WE,2                  SAVE CHECKPOINT                 R4
         ST    WE,PSOCKOFF            JOE OFFSET               @OZ40028
         ALR   WE,R10                  AND                     @OZ40028
         MVC   PSOCKOFF(1),JOEFLAG      FLAG BYTE              @OZ40028
         TM    JOEFLAG,$JOESPIN    TEST FOR SPIN JOE
         BZ    *+8                 BR IF NO
         L     WC,JOEIOTTR          ELSE USE SPIN IOT ADDRESS       R41
         L     WB,$IOTPDDB         GET OFFSET OF FIRST PDDB         R41
         TM    JOEFLAG,$JOECKV     CHECKPOINT JOE VALID...          R41
         BZ    TIOTRD              BR IF NO TO READ IOT             R41
         LH    WB,JOEPDDB-JOEDSECT(,WE)  USE SAVED PDDB OFFSET      R41
         L     WC,JOEIOTTR-JOEDSECT(,WE) LOAD CORRECT IOT      @OZ28561
         EJECT
***********************************************************************
*                                                                     *
*        R E A D   I N   O U T P U T   I O T                          *
*                                                                     *
***********************************************************************
         SPACE 1
TIOTRD   MVI   PCEDEVTP,PCEDARD    INDICATE READ FOR $EXCP
         ST    WC,PCESEEK          SET SEEK ADDRESS FOR $EXCP       R41
         BAL   WE,TEXCP             AND READ IN THE IOT              R4
         BM    TBADKEY             BR IF ERROR READING IOT           R4
         CLC   IOTJBKEY,PSOJBKEY   TEST IOT VALIDITY
         BNE   TBADKEY             BR IF INVALID IOT
         SH    WB,=Y(PDBLENG)      PREPARE TO SCAN PDDBS            R41
         SPACE 1
***********************************************************************
*                                                                     *
*        G E T   N E X T   P D D B                                    *
*                                                                     *
***********************************************************************
         SPACE 1
         USING PDBDSECT,PDDB       PROVIDE PDDB ADDRESSABILITY
         SPACE 1
TPDBNEXT AH    WB,=Y(PDBLENG)      GET OFFSET OF NEXT PDDB          R41
         LA    PDDB,0(WB,IOT)      GET ABSOLUTE PDDB ADDRESS        R41
         CL    WB,IOTPDDBP         TEST FOR END OF PDDBS
         BL    TPDDB               BR IF NO
         TM    IOTFLAG1,IOT1SPIN   TEST FOR SPIN IOT
         BZ    TIOTNEXT            BR IF NO
         MVI   PCEDEVTP,PCEDAWR    INDICATE WRITE OPERATION          R4
         L     R1,$IOTPDDB         POINT TO                          R4
         ALR   R1,IOT               SPIN DATA SET PDDB               R4
         NI    PDBFLAG1-PDBDSECT(R1),255-PDB1HOLD-PDB1PSO            R4
         TM    IOTFLAG1,IOT1ALOC   TEST FOR ALLOCATION IOT
         BZ    TPUTSPIN            BR IF NO
         L     R6,PSOWKOFF         GET OFFSET OF CURRENT JOE   @OZ53680
         ALR   R6,R10              CONVERT OFFSET TO ABSOLUTE  @OZ53680
         LA    R6,0(,R6)           CLEAR HIGH BYTE             @OZ53680
        $QSUSE                     OBTAIN CONTROL OF QUEUES    @OZ53680
         L     R14,IOTTRACK        GET MTTR OF SPIN IOT        @OZ53680
         L     R1,PSOJQEP          GET JQE OFFSET FROM PSO     @OZ53680
         AL    R1,$JOBQPTR         CONVERT TO ABSOLUTE ADDR    @OZ53680
         LH    R1,JQEJOE-JQEDSECT(,R1) GET FIRST JOE OFFSET    @OZ53680
         N     R1,=X'0000FFFF'          FROM JQE               @OZ53680
         B     T$NCHECK            CHECK FOR $N'ED JOE         @OZ53680
         EJECT                                                 @OZ53680
T$NLOOP  LH    R1,JOEJOE-JOEDSECT(,R1) GET NEXT JOE OFFSET     @OZ53680
         N     R1,=X'0000FFFF'     CLEAR HIGH BYTES AND        @OZ53680
         BZ    TPRGSPIN             BRANCH IF END OF CHAIN     @OZ53680
         SPACE 1                                               @OZ53680
T$NCHECK SLL   R1,2                CONVERT JOE OFFSET          @OZ53680
         ALR   R1,R10               TO ABSOLUTE ADDRESS        @OZ53680
         CL    R14,JOEIOTTR-JOEDSECT(,R1) SAME IOT MTTR...     @OZ53680
         BNE   T$NLOOP             BR IF NOT                   @OZ53680
         CLR   R1,R6               IF ANOTHER WORK JOE         @OZ53680
         BE    T$NLOOP              EXISTS FOR THIS SPIN IOT,  @OZ53680
         B     TPUTSPIN              DONT PURGE THE TRACKS     @OZ53680
TPRGSPIN DS 0H                                                 @OZ53680
        $PURGE IOTTGMAP             ELSE PURGE DATA SET TRACKS
         NI    IOTFLAG1,255-IOT1ALOC  SHOW NO LONGER ALLOCATION IOT
         SPACE 1
TPUTSPIN BAL   WE,TEXCP            RE-WRITE SPIN IOT                 R4
         SPACE 1                                               @OZ53680
***********************************************************************
*                                                                     *
*        D O N E   W I T H   J O E   - -   R E M O V E   I T          *
*                                                                     *
***********************************************************************
         SPACE 1
TJOEREM  L     R1,PSOWKOFF         GET WORK JOE OFFSET         @OZ40028
         ALR   R1,R10              CONVERT OFFSET TO ADDRESS   @OZ40028
        $#REM  WORK=(R1)           REMOVE WORK JOE FROM JOT    @OZ40028
         TM    PSOFLG2,PSOFDONE    TEST FOR END OF REQUESTS
         BZ    TJOEGET             BR IF NO TO GET ANOTHER JOE
         B     TWTREODS             ELSE RETURN                      R4
         SPACE 1                                                     R4
***********************************************************************
*                                                                     *
*        G E T   N E X T   I O T   ( I F   A N Y )                    *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
TIOTNEXT L     WB,$IOTPDDB         GET OFFSET OF FIRST PDDB         R41
         ICM   WC,15,IOTIOTTR      GET ADDRESS OF NEXT IOT          R41
         BNZ   TIOTRD              BR IF VALID                      R41
         B     TJOEREM              ELSE BR TO PURGE JOE            R41
         EJECT                                                      R41
***********************************************************************
*                                                                     *
*        T R Y   T O   V A L I D A T E   C U R R E N T   P D D B      *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
TPDDB    TM    PDBFLAG1,PDB1NULL+PDB1NSOT  IS DATA SET PRINTABLE...
         BNZ   TPDBNEXT            BR IF NO                         R41
         L     WG,PSOWKOFF         GET WORK JOE OFFSET         @OZ40028
         ALR   WG,R10              CONVERT OFFSET TO ADDRESS   @OZ40028
         CLC   PDBCLASS,JOEPDBCL   TEST SYSOUT CLASS                 R4
         BNE   TPDBNEXT            BR IF NOT SAME                   R41
         TM    JOEFLAG2,$JOEDMND   DEMAND SETUP JOE...              R41
         L     WG,PSOCHOFF         GET CHAR JOE OFFSET         @OZ40028
         LA    WG,0(R10,WG)        CONVERT OFFSET TO ADDRESS   @OZ40028
         BZ    TPDBFORM            BR IF NO                         R41
         CLC   PDBCLASS,PSOWKOFF   CLASS MATCH MSGCLASS...     @OZ40028
         BE    TPDBWTR             BR IF YES                        R41
         SPACE 1                                                    R41
TPDBFORM CLC   JOEFORM,PDBFORMS    FORMS MATCH...                   R41
         BNE   TPDBNEXT            BR IF NO                         R41
         CLC   JOEFCB,PDBFCB       TEST FOR FCB ID MATCH
         BNE   TPDBNEXT            BR IF NO                         R41
         CLC   JOEUCS,PDBUCS       TEST FOR UCS ID MATCH
         BNE   TPDBNEXT            BR IF NO                         R41
         CLC   JOEFLASH,PDBFLASH   FLASHING OK...                   R41
         BNE   TPDBNEXT            BR IF NO                         R41
         TM    PDBFLAG2,PDB2BRST   BURST SPECIFIED...               R41
         BZ    TPDBNBRS            BR IF NO                         R41
         TM    JOECFLAG,$JOEBRST   BURST REQUIRED...                R41
         BZ    TPDBNEXT            BR IF NO                         R41
         B     TPDBWTR              ELSE BR TO CONTINUE             R41
         SPACE 1                                                    R41
TPDBNBRS TM    JOECFLAG,$JOEBRST   BURST REQUIRED...                R41
         BO    TPDBNEXT            BR IF YES                        R41
         SPACE 1                                                    R41
TPDBWTR  CLC   JOEWTRID,PDBWTRID   WRITER ID MATCH...               R41
         BNE   TPDBNEXT            BR IF NO                         R41
         L     WG,PSOWKOFF         GET WORK JOE ADDRESS        @OZ40028
         ALR   WG,R10              CONVERT OFFSET TO ADDRESS   @OZ40028
         CLC   JOEDEST,PDBDEST     TEST FOR ROUTE CODE MATCH
         BNE   TPDBNEXT            BR IF NO                         R41
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        H A V E   P D D B   F O R   E X T E R N A L   W R I T E R    *
*                                                                     *
***********************************************************************
         SPACE 1
        $QSUSE                     REQUEST ACCESS TO CKPT DATA      R41
         L     WG,PSOCKOFF         GET CKPT JOE ADDRESS        @OZ40028
         ALR   WG,R10              CONVERT OFFSET TO ADDRESS   @OZ40028
         IC    R15,JOECOPY         SAVE DATA SET COPY COUNT         R41
         XC    JOECKPP,JOECKPP     CLEAR CHECKPOINT JOE        @OZ27300
         STC   R15,JOECOPY         RESTORE DATA SET COPY COUNT      R41
         MVC   JOEJRCB,=Y(HDBSTART-BUFDSECT)  SET BUFFER OFFSET     R41
         STH   WB,JOEPDDB          SET PDDB DISPLACEMENT            R41
         MVC   JOEMTTR,PDBMTTR     SET DATA SET TRACK ADDRESS       R41
         MVC   JOEIOTTR,IOTTRACK   SET IOT TRACK ADDRESS            R41
         MVI   PSOCOPY,0           SET INITIAL JOECOPY VALUE        R41
         TM    PSOCHOFF,X'80'      TEST FOR NEW SELECTION REQS @OZ40028
         BO    TNOTOK              BR IF SO
         TM    PSOCKOFF,$JOECKV    TEST FOR WARM START         @OZ40028
         BO    TFASTART            BR IF SO
         L     R1,PSOWKOFF         GET WORK JOE ADDRESS        @OZ40028
         ALR   R1,R10              CONVERT OFFSET TO ADDRESS   @OZ40028
         TM    JOEFLAG-JOEDSECT(R1),$JOECKV  CKPT JOE VALID...      R41
         BO    TKWIKST             BR IF YES                        R41
         OI    JOEFLAG-JOEDSECT(R1),$JOECKV  SHOW CKPT JOE VALID
        $#CKPT JOE=0(,R1),TYPE=A   CHECKPOINT THE WORK JOE
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        C H E C K P O I N T   T H E   C H E C K P O I N T   J O E    *
*                                                                     *
***********************************************************************
         SPACE 1
TKWIKST  MVI   JOECOPY,0           INITIALIZE DATA SET COPY CT      R41
         SPACE 1                                                    R41
TFASTART NI    PSOCKOFF,FF-$JOECKV RESET WARM START BIT        @OZ40028
        $#CKPT JOE=0(,WG),TYPE=A   CHECKPOINT THE CKPT JOE
         L     R1,PSOJQEP          GET ADDRESS                      R41
         AL    R1,$JOBQPTR          OF JOB QUEUE ELEMENT            R41
         TM    JQEFLAGS,QUEPURGE+QUEHOLDA+QUEHOLD1  TEST JOB        R41
         BNZ   TNOTOK2             BR IF JOB PURGING OR HELD        R41
         LA    R1,1                SET PSO DATA SET
         STH   R1,PSOCOPY           COPY COUNT TO 1
         L     WG,PSOWKOFF         POINT TO JOEROUT BEFORE     @OZ40028
         LH    WG,JOEROUT-JOEDSECT(R10,WG)  CONVERT TO EBCDIC  @OZ40028
         L     R15,=A(TSAVPDDB)    POINT TO PDDB SAVE ROUTINE        R4
         B     TWTREXIT             AND BR TO EXIT FROM HASPWTR      R4
         SPACE 1                                                    R41
***********************************************************************
*                                                                     *
*        H A V E   A   J O E   -   G E T   N E X T   D A T A   S E T  *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
TREENTRY L     WG,PSOCKOFF         GET CKPT JOE OFFSET         @OZ40028
         ALR   WG,R10              CONVERT OFFSET TO ADDRESS   @OZ40028
         LA    PDDB,PSOPDDB        GET UPDATED PDDB ADDRESS         R41
         TM    PDBFLAG1,PDB1NSOT   DATA SET BEING DELETED...        R41
         BO    TREENTOK            BR IF YES                        R41
         OI    PSOFLG2,PSOFDONE    ERROR -- FORCE ABORT             R41
         B     TNOTOK              BR TO REQUEUE JOES               R41
         SPACE 1                                                    R41
TREENTOK NI    PDBFLAG1,255-PDB1NSOT RESET IN CASE ANOTHER COPY     R41
         IC    R1,JOECOPY          INCREMENT                        R41
         LA    R1,1(,R1)            AND SAVE                        R41
         STC   R1,PSOCOPY            DATA SET COPY COUNT            R41
         L     R1,PSOJQEP          GET JQE ADDRESS             @OZ40028
         AL    R1,$JOBQPTR         CONVERT OFFSET TO ADDRESS   @OZ40028
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        R E - T E S T   S E L E C T I O N   R E Q U I R E M E N T S  *
*                                                                     *
***********************************************************************
         SPACE 1
         TM    PSOFLG2,PSOFDONE    TEST FOR END OF REQUESTS
         BO    TJOEREQ             BR IF SO
         TM    PSOFLG1,PSOFCLAS    TEST CLASS REQUIREMENT
         BZ    TCLASOK             BR IF NONE
         LA    R0,L'PSOCLAS         ELSE PREPARE TO
         LA    WE,PSOCLAS-1          RE-SCAN SYSOUT CLASS LIST
         L     WG,PSOWKOFF         GET WORK JOE ADDRESS        @OZ40028
         ALR   WG,R10              CONVERT OFFSET TO ADDRESS   @OZ40028
         SPACE 1
TCLASNXT LA    WE,1(,WE)           GET NEXT OUTPUT CLASS
         CLC   JOEPDBCL,0(WE)      TEST SYSOUT CLASS FOR MATCH       R4
         BE    TCLASOK             BR IF SO
         CLI   0(WE),C' '          TEST FOR END OF CLASS LIST
         BE    TJOEREQ             BR IF SO
         BCT   R0,TCLASNXT         LOOP UNTIL END OF CLASS LIST
         SPACE 1
TJOEREQ  L     WG,PSOCKOFF         GET CKPT JOE OFFSET         @OZ40028
         ALR   WG,R10              CONVERT OFFSET TO ADDRESS   @OZ40028
         CLC   PDBCOPYS,PSOCOPY    ANOTHER COPY NEEDED...           R41
         BH    TNOTOK              BR IF YES                        R41
         OI    PSOCHOFF,X'80'      INDICATE NEW SELECTION REQS @OZ40028
         B     TNXTDS               AND BR TO LOCATE NEXT PDDB      R41
         SPACE 1                                                     R4
         CNOP  0,8
TCLASOK  TM    PSOFLG1,PSOFJOBI    TEST JOB ID REQUIREMENT
         BZ    TIDOK               BR IF NONE
         CLC   PSOJOBNO,JQEJOBNO   TEST FOR JOB ID MATCH
         BNE   TJOEREQ             BR IF NO
         SPACE 1
TIDOK    TM    PSOFLG1,PSOFJOBN    TEST JOB NAME REQUIREMENT
         BZ    TNAMEOK             BR IF NONE
         CLC   PSOJOBN,JQEJNAME    TEST FOR JOB NAME MATCH
         BNE   TJOEREQ             BR IF NO
         SPACE 1
TNAMEOK  TM    PSOFLG1,PSOFDEST    TEST ROUTING REQUIREMENT
         BZ    TDESTOK             BR IF NONE
         L     WG,PSOWKOFF         GET WORK JOE OFFSET         @OZ40028
         ALR   WG,R10              CONVERT OFFSET TO ADDRESS   @OZ40028
         LH    WB,JOEROUT          GET ROUTING FROM JOE              R4
         LTR   WB,WB               TEST FOR EXPLICIT ROUTING         R4
         BNZ   *+8                 BR IF YES                         R4
         LH    WB,JQEPRTRT          ELSE GET ROUTING FROM JQE        R4
         CH    WB,PSOROUTE         TEST FOR SAME ROUTING
         BNE   TJOEREQ             BR IF NO
         SPACE 1
TDESTOK  TM    PSOFLG1,PSOFPGM     TEST WRITER NAME REQUIREMENT
         BZ    TPGMNOK             BR IF NONE
         CLC   PSOPGMN,PDBWTRID    TEST FOR WRITER NAME MATCH
         BNE   TJOEREQ             BR IF NO
         EJECT                                                       R4
TPGMNOK  TM    PSOFLG1,PSOFFORM    TEST FORMS REQUIREMENT
         BZ    TOK                 BR IF NONE
         CLC   PSOFORM,PDBFORMS    TEST FOR FORMS MATCH
         BNE   TJOEREQ             BR IF NO
         SPACE 1
***********************************************************************
*                                                                     *
*        REQUIREMENTS UNCHANGED -- CONTINUE PROCESSING JOE     @OZ40028
*                                                                     *
***********************************************************************
         SPACE 1
TOK      L     WG,PSOCKOFF         GET CKPT JOE OFFSET         @OZ40028
         ALR   WG,R10              CONVERT OFFSET TO ADDRESS   @OZ40028
         CLC   PDBCOPYS,PSOCOPY    ANOTHER COPY NEEDED...           R41
         BNH   TNXTDS              BR IF NO TO LOCATE NEXT PDDB     R41
        $QSUSE                     REQUEST ACCESS TO CKPT DATA      R41
         MVC   JOECOPY,PSOCOPY     SET DATA SET COPY COUNT          R41
         B     TFASTART            BR TO PROVIDE NEXT COPY          R41
         SPACE 1                                                    R41
TNXTDS   LH    WB,JOEPDDB          GET AND UPDATE                   R41
         AH    WB,=Y(PDBLENG)       CURRENT PDDB OFFSET             R41
         L     WC,JOEIOTTR         GET IOT TRACK ADDRESS            R41
         BAL   WE,TBUFGET          GET A BUFFER                     R41
         B     TIOTRD              BR TO READ IOT                   R41
         EJECT                                                 @OZ40028
***********************************************************************
*                                                                     *
*        REQUIREMENTS CHANGED -- RETURN JOE TO JOT             @OZ40028
*                                                                     *
***********************************************************************
         SPACE 1
TNOTOK  $QSUSE                     REQUEST ACCESS TO CKPT DATA      R41
         L     R1,PSOJQEP          GET ADDRESS                      R41
         AL    R1,$JOBQPTR          OF JOB QUEUE ELEMENT            R41
         SPACE 1                                                    R41
TNOTOK2  TM    JQEFLAGS,QUEPURGE   JOB BEING PURGED...              R41
         BO    TNXTDS              BR IF YES TO                     R41
         MVC   JOECOPY,PSOCOPY     UPDATE COPY COUNT                R41
         L     R1,PSOWKOFF         GET WORK JOE OFFSET         @OZ40028
         ALR   R1,R10              CONVERT OFFSET TO ADDRESS   @OZ40028
        $#PUT  WORK=(R1),PRC=(WG)  RETURN WORK JOE TO JOT      @OZ40028
         TM    PSOFLG2,PSOFDONE    END OF REQUESTS...               R41
         BZ    TJOEGET             BR IF NO TO GET ANOTHER JOE      R41
         B     TWTREODS             ELSE BR TO EXIT TO POST RTN     R41
         EJECT
         SPACE 1
***********************************************************************
*                                                                     *
*        E R R O R   R E A D I N G   I O T                            *
*                                                                     *
***********************************************************************
         SPACE 1
TBADKEY $DISTERR                   ISSUE DISASTEROUS ERROR MSG
         B     TJOEREM             THEN BR TO REMOVE CURRENT JOE
         SPACE 1                                                    R41
***********************************************************************
*                                                                     *
*        G E T   A N D   P R E P A R E   I O T   B U F F E R          *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
TBUFGET  LTR   IOT,IOT             HAS IOT BEEN PAGE RELEASED...     R4
         BP    TBUFGETS            BR IF NO TO SET BUFFER ADDR       R4
         LA    IOT,0(,IOT)          ELSE SHOW VALID IOT
        $BFRBLD (IOT)                AND BUILD IOB WITHIN IOT BFR
         MVC   IOTID,=CL4'IOT'          INITIALIZE IOT               R4
         LH    R1,$BUFLENG               IDENTIFICATION              R4
         STH   R1,IOTLENG                  AND LENGTH FIELDS         R4
         SPACE 1                                               @OZ40028
TBUFGETS ST    IOT,PCEBUFAD        SET BUFFER ADDR FOR $EXCP   @OZ40028
         BR    WE                  THEN RETURN
         SPACE 3                                                     R4
***********************************************************************
*                                                                     *
*        I O T   R E A D / W R I T E   R O U T I N E                  *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
TEXCP    LA    R1,PCEDADCT         GET DIRECT ACCESS DCT ADDRESS     R4
        $EXCP  (R1),WAIT=YES       READ/WRITE IOT                    R4
         BR    WE                  RETURN WITH VALID CC              R4
         EJECT
         SPACE 5
         LTORG
         SPACE 1
         DROP  R1,WD,WG,IOT,PDDB   KILL PROCESSOR ADDRESSABILITY
         TITLE 'HASP PROCESS SYSOUT SUPPORT -- $L SUPPORT'
***********************************************************************
*                                                                     *
*        $ L   S U P P O R T   R O U T I N E                          *
*                                                                     *
***********************************************************************
         SPACE 2
         USING HQRDSECT,WA         PROVIDE HQR ADDRESSABILITY
         USING JQEDSECT,WD         PROVIDE JQE ADDRESSABILITY
         SPACE 2
HASPLIST $ENTRY BASE=BASE3,CSECT=NO  PROVIDE $L SUPPORT ENTRY POINT
         LR    WB,R1               SAVE PARAMETER AREA ADDRESS
         L     WD,0(,WB)           LOAD JQE ADDRESS
         ICM   JCT,15,TLBUFFER     IF BUFFER EXISTS,
         BNZ   TLBLD                BR TO CONSTRUCT IOB
         SPACE 1
***********************************************************************
*                                                                     *
*        O B T A I N   J C T / H Q T   B U F F E R   S T O R A G E    *
*                                                                     *
***********************************************************************
         SPACE 1
         L     R0,TLBFRSIZ         GET BUFFER SIZE (ROUNDED TO 4K)
         GETMAIN RC,LV=(0),BNDRY=PAGE  GET THE BUFFER STORAGE
         LR    JCT,R1              RELOAD THE BUFFER ADDRESS
         ST    JCT,TLBUFFER         AND SAVE IT FOR FUTURE USE
         LTR   R15,R15             IF GETMAIN SUCCESSFUL,
         BZ    TLBLD                BR TO CONSTRUCT IOB
T02     $ERROR                       ELSE CRUMP
         SPACE 1
TLBUFFER DC    A(*-*)              PERMANENT JCT/HQT BUFFER
TLBFRSIZ DC    A(4096)             STORAGE SIZE FOR JCT/HQT BUFFERS  R4
         EJECT
***********************************************************************
*                                                                     *
*        C O N T S R U C T   I O B   F O R   B U F F E R              *
*                                                                     *
***********************************************************************
         SPACE 1
         USING JCTDSECT,JCT        PROVIDE JCT ADDRESSABILITY
TLBLD   $BFRBLD (JCT)              REBUILD IOB WITHIN BUFFER
         MVI   PCEDEVTP,PCEDARD    INDICATE READ OPERATIONS
         L     R0,JQETRAK          GET JCT TRACK ADDRESS
         ST    JCT,PCEBUFAD        SET BUFFER ADDRESS FOR $EXCP
         BAL   WE,TLIO              AND READ IN THE JCT
         LR    R0,WD               IF JCT
         SL    R0,$JOBQPTR          NOT
         CL    R0,JCTJQE             VALID,
         BNE   TLIODST                BR TO ISSUE ERROR MSG
         L     WC,JCTJBKEY         SAVE JOB KEY FOR HQT VALIDATION
         ICM   R0,15,JCTHQT         AND LOAD ADDRESS OF 1ST HQT
         BZ    TLEXIT              IF NO HQT, BR TO RETURN
         SPACE 1
         USING HQTDSECT,JCT        PROVIDE HQT ADDRESSABILITY
         SPACE 1
***********************************************************************
*                                                                     *
*        R E A D   I N   H Q T                                        *
*                                                                     *
***********************************************************************
         SPACE 1
TLHQTRD  BAL   WE,TLIO             READ IN THE HQT
         CL    WC,HQTJBKEY         IF INVALID HQT,
         BNE   TLIODST              BR TO ISSUE ERROR MSG
         CLC   HQTID,=CL4'HQT'     IF DUMMY HQT,
         BNE   TLEXIT               BR TO RETURN
         LA    WA,HQTHQR             ELSE PREPARE TO           @OZ19494
         L     WF,HQTHQRP             SCAN HQT
         ALR   WF,JCT                  FOR ACTIVE              @OZ19494
         B     TLHQR1                   HQRS                   @OZ19494
         SPACE 1
TLHQRNXT LA    WA,HQRLENG(,WA)     POINT TO NEXT HQR
TLHQR1   CLR   WA,WF               IF END OF HQRS,             @OZ19494
         BE    TLHQTNXT             BR TO TEST FOR ANOTHER HQT
         TM    HQRSTAT,HQRUNHLD    IF DATA SET NO LONGER HELD,
         BO    TLHQRNXT             BR TO TEST NEXT HQR
         IC    R1,PDBCLASS-PDBDSECT+HQRPDDB  GET SYSOUT CLASS
         N     R1,=A(X'3F')        GET PARAMETER
         IC    R1,TLOFFSET(R1)      TABLE OFFSET
         LTR   R1,R1               IF ILLEGAL SYSOUT CLASS,
         BZ    TLHQRNXT             BR TO TEST NEXT HQR
         LH    WE,2(WB,R1)           ELSE BUMP
         LA    WE,1(,WE)              SYSOUT
         STH   WE,2(WB,R1)             CLASS COUNT
         B     TLHQRNXT            THEN BR TO TEST NEXT HQR
         EJECT
TLHQTNXT ICM   R0,15,HQTHQT        IF ANOTHER HQT,
         BNZ   TLHQTRD              BR TO SCAN IT
         SPACE 1
TLEXIT  $PGSRVC RLSE,(JCT),TLBFRSIZ PAGE RELEASE THE BUFFER          R4
        $RETURN                    THEN RETURN TO CALLER
         SPACE 2
***********************************************************************
*                                                                     *
*        R E A D   A   C O N T R O L   B L O C K                      *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
TLIO     ST    R0,PCESEEK          SET SEEK ADDRESS FOR $EXCP
         LA    R1,PCEDADCT         GET DIRECT ACCESS DCT ADDRESS
        $EXCP  (R1),WAIT=YES       READ CONTROL BLOCK                R4
         BOR   WE                  RETURN IF READ OK                 R4
         SPACE 1
TLIODST $DISTERR                   ISSUE DISASTEROUS ERROR MESSAGE
         B     TLEXIT              THEN BR TO RETURN TO CALLER
         SPACE 1
         DROP  WA,WD,JCT           KILL CTL BLOCK ADDRESSABILITY
         EJECT                                                       R4
TLOFFSET DC    10AL1(2*(*-TLOFFSET)),7AL1(0)        OUTPUT CLASS A-I
         DC     9AL1(2*(*-TLOFFSET-7)),8AL1(0)      OUTPUT CLASS J-R
         DC     8AL1(2*(*-TLOFFSET-7-8)),6AL1(0)    OUTPUT CLASS S-Z R4
         DC    10AL1(2*(*-TLOFFSET-7-8-6)),6AL1(0)  OUTPUT CLASS 0-9
         SPACE 5                                                     R4
         LTORG
         SPACE 5                                                     R4
$XEQLEN $DLENGTH                   COMPUTE CONTROL SECTION LENGTH
         SPACE 3
APARNUM  DC    CL5'79457'          APAR NUMBER
         END   ,                   END OF HASPXEQ
