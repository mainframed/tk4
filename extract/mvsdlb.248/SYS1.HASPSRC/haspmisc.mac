MISC     TITLE 'HASP MISCELLANEOUS PROCESSORS'                 @OZ18212
***********************************************************************
*                                                                     *
* MODULE NAME = HASPMISC                                              *
*                                                                     *
* DESCRIPTIVE NAME = HASPMISC                                         *
*                                                                     *
* COPYRIGHT = NONE                                                    *
*                                                                     *
* STATUS = OS/VS2 MVS   --  SEE &VERSION (BELOW) FOR JES2 LEVEL       *
*                                                                     *
* FUNCTION = THE HASP MISCELLANEOUS PROCESSORS CONSIST OF FOUR        *
*            SEPARATE ROUTINES - HASPVPRG, HASPCKPT, HASPGPRC         *
*            AND HASPWARM.                                            *
*                                                                     *
*            HASPVPRG PURGES JOBS FROM THE SYSTEM BY FREEING          *
*            OUTPUT TRACKS, PREPARING A TYPE 26 SMF RECORD, AND       *
*            BY NOTIFYING THE OPERATOR THAT THE JOB HAS BEEN PURGED.  *
*                                                                     *
*            HASPCKPT CHECKPOINTS JOB AND JOT QUEUE RECORDS,          *
*            POSTS PROCESSORS REQUESTING QUEUE ACCESS VIA THE         *
*            $QSUSE MACRO, RELEASES UNUSED TRACK GROUPS FROM THE      *
*            TRACK GROUP BLOCK, HEURISTICALLY ALLOCATES NEW TRACK     *
*            GROUPS FROM THE MASTER TRACK GROUP MAP TO THE TRACK      *
*            GROUP BLOCK, RECALCULATES ALLOCATED TRACK GROUPS, AND    *
*            POSTS PROCESSORS AND OTHER ADDRESS SPACES WHO MAY BE     *
*            WAITING FOR TRACK ALLOCATION.                            *
*            FOR SHARED QUEUE SYSTEMS, HASPCKPT ALSO RESERVES AND     *
*            READS THE SHARED JOB AND JOT QUEUE RECORDS, DETECTS      *
*            POTENTIAL LOCKOUT BY OTHER SYSTEMS, PERFORMS CROSS       *
*            SYSTEM POSTING FOR SHARED QUEUE ELEMENTS, RELEASES THE   *
*            CHECKPOINT DEVICE AFTER A MINIMUM HOLD INTERVAL,         *
*            PREVENTS REREAD OF THE SHARED QUEUES FOR A MINIMUM       *
*            DORMANT INTERVAL TO ALLOW OTHER SYSTEMS ACCESS,          *
*            AND FORCES REREAD OF THE SHARED QUEUES AFTER A           *
*            MAXIMUM DORMANT INTERVAL.                                *
*                                                                     *
*            HASPGPRC PRIORITY AGES JOBS AT A TIME INTERVAL           *
*            DETERMINED FROM THE HASPGEN PARAMETER &PRIRATE.          *
*                                                                     *
*            HASPWARM PERFORMS A SINGLE SYSTEM OR NODAL WARM START    *
*            FOLLOWING JES2 INITIALIZATION OR AS THE RESULT OF A      *
*            $ESYS COMMAND.                                           *
*                                                                     *
* NOTES = SEE BELOW                                                   *
*                                                                     *
*    DEPENDENCIES = NONE                                              *
*                                                                     *
*    RESTRICTIONS = NONE                                              *
*                                                                     *
*    REGISTER CONVENTIONS = SEE BELOW FOR INDIVIDUAL ROUTINES         *
*                                                                     *
*                           R11 = BASE1 = HCT ADDRESSABILITY          *
*                           R12 = BASE2 = ROUTINES BASE REGISTER      *
*                           R13 = SAVE  = PCE ADDRESSABILITY          *
*                                                                     *
*    PATCH LABEL = NONE                                               *
*                                                                     *
* MODULE TYPE = PROCEDURE ( CSECT TYPE )                              *
*                                                                     *
*    PROCESSOR = ASSEMBLER F                                          *
*                                                                     *
*    MODULE SIZE = SEE $DLENGTH MACRO EXPANSION(S) AT END OF ASSEMBLY *
*                                                                     *
*    ATTRIBUTES = READ ONLY, AFTER PROCESSOR INITIALIZATION, AND      *
*                 HASP REENTRANT                                      *
*                                                                     *
* ENTRY POINT 1 = HASPVPRG FOR THE PURGE PROCESSOR                    *
*             2 = HASPCKPT FOR THE CHECKPOINT PROCESSOR               *
*             6 = HASPGPRC FOR THE PRIORITY AGING PROCESSOR           *
*             7 = HASPWARM FOR THE JOB QUEUE WARM START PROCESSOR     *
*                                                                     *
*    PURPOSE = SEE FUNCTION                                           *
*                                                                     *
*    LINKAGE = R12 = BASE2 = ENTRY POINT AND BASE REGISTER            *
*              R13 = SAVE  = PCE SAVE AREA ADDRESSABILITY             *
*                                                                     *
* INPUT = HASPVPRG USES MACRO $QGET TO ACCESS JOB QUEUE ELEMENTS THAT *
*         ARE TO BE PURGED AND $EXCP TO ACCESS JCTS AND IOTS FOR      *
*         THE JQES.                                                   *
*                                                                     *
*        HASPCKPT ACCESSES THE JOB QUEUE BUFFER, THE JOB AND JOT      *
*        CHECKPOINT CONTROL TABLES, THE MASTER TRACK GROUP MAP,       *
*        THE TRACK GROUP BLOCK, THE TRACK EXTENT DATA TABLES,         *
*        THE CHECKPOINT DEVICE SRB-IOSB AND UCB, THE SHARED QUEUE     *
*        CONTROL ELEMENTS, AND FIELDS IN THE HCT AND SSVT.            *
*                                                                     *
*         HASPGPRC ACCESSES JOB QUEUE ENTRIES.                        *
*                                                                     *
*         HASPWARM ACCESSES THE REMOTE SIGN-ON TABLE, THE QSES,       *
*         THE JOT AND THE JOB QUEUE.                                  *
*                                                                     *
* OUTPUT = HASPVPRG PUTS A HASP SMF BUFFER, WITH A TYPE 26 RECORD     *
*         IN IT, ON THE BUSY QUEUE.                                   *
*                                                                     *
*        HASPCKPT WRITES CHECKPOINT RECORDS, CLEARS THE CHECKPOINT    *
*        CONTROL TABLES, UPDATES THE MASTER TRACK GROUP MAP AND       *
*        TRACK GROUP BLOCK, AND CHANGES CONTROL FIELDS IN THE         *
*        CHECKPOINT UCB, QSES, HCT, AND SSVT.                         *
*                                                                     *
*         HASPGPRC UPDATES JOB QUEUE ELEMENTS PRIORITY FIELDS         *
*                                                                     *
*         HASPWARM UPDATES THE RESOURCES ACCESSED AS INPUT.           *
*                                                                     *
* EXIT-NORMAL = HASPVPRG $WAITS FOR JOB                               *
*                                                                     *
*               HASPCKPT $WAITS FOR CKPW AND/OR WORK (TIMER)          *
*                                                                     *
*               HASPGPRC $WAITS FOR WORK                              *
*                                                                     *
*               HASPWARM $WAITS FOR WORK                              *
*                                                                     *
* EXIT-ERROR = HASPVPRG ISSUES $IOERROR AND $DISTERR MSGS IF EITHER   *
*              A JCT OR AN IOT IS INVALID                             *
*                                                                     *
*              HASPCKPT ISSUES $IOERROR AND EXITS WITH CATASTROPHIC   *
*              ERROR CODE K02 OR K04 IF UNRECOVERABLE I/O ERRORS      *
*              OCCUR DURING READ OR WRITE OF CHECKPOINT RECORDS.      *
*              INVALID ALTERATION OF SHARED QUEUES BY THIS OR         *
*              ANOTHER SYSTEM CAUSES EXIT WITH CODE K01 OR K03.       *
*              MESSAGES 260, 093, OR 355 ARE ISSUED WITH $WTO IF      *
*              POTENTIAL SHARED DASD LOCKOUT, SPOOL WARNING           *
*              PERCENTAGE, OR SPOOL FULL CONDITIONS ARE DETECTED.     *
*                                                                     *
*              HASPGPRC HAS NO ERROR EXIT                             *
*                                                                     *
*              HASPWARM HAS NO ERROR EXIT                             *
*                                                                     *
* EXTERNAL REFERENCES = SEE BELOW                                     *
*                                                                     *
*    ROUTINES = NONE                                                  *
*                                                                     *
*    DATA AREAS = SEE BELOW                                           *
*                                                                     *
*    CONTROL BLOCKS = SEE $HASPCB MACRO FOR CONTROL BLOCKS USED       *
*                                                                     *
* TABLES = SEE BELOW                                                  *
*                                                                     *
* MACROS = $ENTRY, $QGET, $ACTIVE, $WAIT, $GETBUF, $EXCP, $IOERROR    *
*          $DISTERR, $PURGE, $GETSMFB, $QUESMFB, $QREM, $WTO,         *
*          $FREEBUF, $DORMANT, $POST, $TTIMER, $STIMER, $DLENGTH      *
*          $BFRBLD, $PGRLSE, $GETLOK, $FRELOK, $ERROR, $MSG,          *
*          MODESET, STARTIO                                           *
*                                                                     *
* CHANGE ACTIVITY                                                     *
*                                                                     *
*     RELEASE 4.0 = OZ02439,OZ03301,OZ03308,OZ03316,OZ04304,OZ04316,  *
*                   OZ04971,OZ04992,OZ04996,OZ08144,OZ08232,OZ10287   *
*                                                                     *
*     RELEASE 4.1 = OZ09107,OZ11763,OZ11776,OZ12270,OZ12289,OZ14441,  *
*                   OZ14890,OZ15818                                   *
*                                                                     *
***********************************************************************
         EJECT
         SPACE 1                                               @OZ27300
*
*****    $HASPCB   *****           GENERATE HASP CONTROL BLOCKS
*
         MACRO
         $HASPCB &DOC=NO,&LIST=NO
         GBLC  &PRINT,&GEN,&DATA
         PUSH  PRINT
         PRINT &PRINT
         $CVT  LIST=&LIST          GENERATE OS CVT DSECT
         $SSCT LIST=&LIST          GENERATE OS SSCT DSECT
         $SSOB (SO,JS),LIST=&LIST  GENERATE OS SSOB DSECT            R4
         $SRB  LIST=&LIST          GENERATE OS SRB DSECT
         $DCB  LIST=&LIST          GENERATE OS DCB DSECT             R4
         $DEB  LIST=&LIST          GENERATE OS DEB DSECT             R4
         $IOSB LIST=&LIST          GENERATE OS IOSB DSECT
         $UCB  LIST=&LIST          GENERATE OS UCB DSECT
         $DYN  LIST=&LIST          GENERATE OS DYN DSECT             R4
         $BASEA LIST=&LIST         GENERATE OS BASEA DSECT
         $IOCM LIST=&LIST          GENERATE OS IOCM DSECT
         $TED  DOC=&DOC            GENERATE HASP TED DSECT
         $TGB  DOC=&DOC            GENERATE HASP TGB DSECT
         $TGM  DOC=&DOC            GENERATE HASP TGM DSECT
         $TAB  DOC=&DOC            GENERATE HASP TAB DSECT           R4
         $SVT  DOC=&DOC            GENERATE HASP SSVT DSECT
         $SJB  DOC=&DOC            GENERATE HASP SJB DSECT
         $HCT  DOC=&DOC            GENERATE HASP HCT DSECT
         $PCE  DOC=&DOC            GENERATE HASP PCE DSECT
         $LRC  DOC=&DOC            GENERATE HASP LRC DSECT          R41
         $BUFFER DOC=&DOC          GENERATE HASP BUFFER DSECT
         $CCW  DOC=&DOC            GENERATE HASP CCW DEFS      @OZ27300
         $SMF  DOC=&DOC            GENERATE HASP SMF DSECT
         $JQE  DOC=&DOC            GENERATE HASP JQE DSECT
         $JOE  DOC=&DOC            GENERATE HASP JOE DSECT
         $JOT  DOC=&DOC            GENERATE HASP JOT DSECT
         $QSE  DOC=&DOC            GENERATE HASP QSE DSECT
         $JQB  DOC=&DOC            GENERATE HASP JQB DSECT           R4
         $JCT  DOC=&DOC            GENERATE HASP JCT DSECT
         $PDDB DOC=&DOC            GENERATE PDDB DSECTSECT
         $IOT  DOC=&DOC            GENERATE HASP IOT DSECT
         $DCT  DOC=&DOC            GENERATE HASP DCT DSECT
         $TQE  DOC=&DOC            GENERATE HASP TQE DSECT
         $HQR  DOC=&DOC            GENERATE HASP HQR DSECT
         $HQT  DOC=&DOC            GENERATE HASP HQT DSECT
         $PSO  DOC=&DOC            GENERATE HASP PSO DSECT           R4
         $SPL  DOC=&DOC            GENERATE HASP SPL DSECT           R4
         $CKPWORK DOC=&DOC         GENERATE HASP CKPWORK DSECT      R41
         $WARMWRK DOC=&DOC         GENERATE HASP WARMWRK DSECT       R4
         SPACE 1
         POP   PRINT
         PRINT &GEN,&DATA          SET ASSEMBLY PRINT OPTIONS
         MEND
         TITLE 'HASP MISCELLANEOUS PROCESSORS'
         SPACE 5
HASPMISC START 0                   HASP MISCELLANEOUS PROCESSORS
         SPACE 5
*
*                             EXTERNAL REFERENCES
*
         SPACE 5
         COPY  $HASPGEN            COPY HASPGEN PARAMETERS
         TITLE 'HASP CONTROL BLOCKS'
         SPACE 5
HASPMISC $ENTRY BASE=,CSECT=YES    PROVIDE PROCESSOR IDENTIFICATION
         SPACE 5
*
*                             DOCUMENTATION OPTIONS FOR THIS ASSEMBLY
*
         SPACE 3
        $SYSPARM (OFF,GEN,NODATA,NO,NO)
         SPACE 5
*
*                             GENERATE HASP CONTROL BLOCKS
*
         SPACE 3
        $HASPCB DOC=&DOC,LIST=&LIST  GENERATE HASP CONTROL BLOCKS
         TITLE 'HASP PURGE PROCESSOR'
***********************************************************************
*                                                                     *
* PROCESSOR NAME -- HASPVPRG                                          *
*                                                                     *
* DESCRIPTIVE NAME -- JES2 PURGE PROCESSOR                            *
*                                                                     *
* FUNCTION -- FREE ALL TRACKS ACQUIRED FOR A JOB, QUEUE FOR OUTPUT    *
*             AN SMF PURGE RECORD (TYPE 26) AND OPTIONALLY A JMR      *
*             BUFFER, AND NOTIFY THE OPERATOR THAT THE JOB IS PURGED. *
*                                                                     *
* NOTES -- 1) TO IMPROVE THE PERFORMANCE OF THIS PROCESSOR, PERMANENT *
*             STORAGE IS OBTAINED, VIA GETMAIN, TO SERVE AS BUFFER    *
*             STORAGE FOR A JCT AND AN IOT.  WHEN THE PROCESSOR HAS   *
*             NO MORE WORK TO DO, THE BUFFER STORAGE IS PAGE-RELEASED.*
*                                                                     *
* REGISTER CONVENTIONS -- R1  -- WORK REGISTER                        *
*                         WA  -- JQE ADDRESS                          *
*                         WB  -- DCT ADDRESS                          *
*                         WC  -- WORK REGISTER                        *
*                         WD  -- IOT ADDRESS                          *
*                         WE  -- LINK REGISTER                        *
*                         WF  -- WORK REGISTER                        *
*                         JCT -- JCT ADDRESS                          *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*        H A S P V P R G   I N I T I A L   E N T R Y   P O I N T      *
*                                                                     *
***********************************************************************
         SPACE 2
         USING JQEDSECT,WA         PROVIDE JQE ADDRESSABILITY
         USING IOTDSECT,WD         PROVIDE IOT ADDRESSABILITY
         SPACE 2
HASPVPRG $ENTRY BASE=BASE2         PROVIDE PROCESSOR ENTRY POINT
         SPACE 1
***********************************************************************
*                                                                     *
*        C O M P U T E   S T O R A G E   R E Q U I R E M E N T        *
*                                                                     *
***********************************************************************
         SPACE 1
         LH    R1,$BUFLENG         GET TOTAL SINGLE BUFFER SIZE      R4
         LR    WA,R1               TENTATIVE ADDRESS OF NEXT BUFFER
         LR    R0,WA               R0 = STARTING ADDR OF NEXT BUFFER
         SRL   R0,12                DIVIDED BY 4K
         ALR   R1,WA               R1 = ADDRESS OF LAST BYTE
         BCTR  R1,0                 OF NEXT BUFFER
         SRL   R1,12                 DIVIDED BY 4K
         CLR   R0,R1               DOES BUFFER CROSS 4K BOUNDARY...
         BE    *+10                BR IF NO TO USE TENTATIVE BFR ADDR
         SLL   R1,12                ELSE USE NEXT 4K BOUNDARY AS
         LR    WA,R1                 STARTING ADDR OF NEXT BUFFER
         LR    WD,WA               SAVE RELATIVE ADDR OF NEXT BFR
         AH    WA,$BUFLENG         R0 = TOTAL BUFFER STORAGE         R4
         LA    R0,4095(,WA)         REQUIREMENT ROUNDED
         SRL   R0,12                 UP TO NEXT
         SLL   R0,12                  4K BOUNDARY
         ST    R0,VSTORAGE         SAVE BUFFER STORAGE REQUIREMENT
         EJECT
***********************************************************************
*                                                                     *
*        O B T A I N   P E R M A M E N T   B U F F E R   S T O R A G E*
*                                                                     *
***********************************************************************
         SPACE 1
         GETMAIN RC,LV=(0),BNDRY=PAGE  GET THE BUFFER STORAGE
         LR    JCT,R1              SAVE JCT BUFFER ADDRESS
         ALR   WD,R1               SAVE IOT BUFFER ADDRESS
         ICM   JCT,8,=AL1(X'80')   SHOW BUFFER PAGE(S) RELEASED
         LA    WB,PCEDADCT         GET DIRECT ACCESS DCT ADDRESS
         MVI   PCEDEVTP,PCEDARD    SET READ REQUEST FOR $EXCP
         LTR   R15,R15             TEST GETMAIN
         BZ    VGETJOB             BR IF SUCCESSFUL
V02     $ERROR                      ELSE CRUMP
         SPACE 1
VSTORAGE DC    A(*-*)              SIZE OF PERMANENT BUFFER STORAGE
         EJECT
VNOJOB   LTR   JCT,JCT             HAS BUFFER STORAGE BEEN RELEASED...
         BM    VJBWAIT             BR IF SO
         SPACE 1
***********************************************************************
*                                                                     *
*        R E L E A S E   B U F F E R   P A G E ( S )                  *
*                                                                     *
***********************************************************************
         SPACE 1
        $PGSRVC RLSE,(JCT),VSTORAGE    RELEASE JCT/IOT BUFFER PG(S)  R4
         ICM   JCT,8,=AL1(X'80')   SHOW BUFFER PAGE(S) RELEASED
         SPACE 1
***********************************************************************
*                                                                     *
*        W A I T   F O R   A   J O B   T O   P U R G E                *
*                                                                     *
***********************************************************************
         SPACE 1
VJBWAIT $WAIT  JOB,INHIBIT=NO      $WAIT FOR JOB TO BE QUEUED
         SPACE 1
VGETJOB $QGET  $PURGE,VNOJOB       TRY TO GET A JOB
         LR    WA,R1               SAVE JQE ADDRESS
        $ACTIVE                    INDICATE PROCESSOR ACTIVE
         LTR   JCT,JCT             HAS BUFFER STORAGE BEEN RELEASED...
         BP    VGETJCT             BR IF NO
         LA    JCT,0(,JCT)          ELSE RESET PAGE-RELEASED FLAG
        $BFRBLD (JCT)              BUILD IOB WITHIN JCT BUFFER
        $BFRBLD (WD)               BUILD IOB WITHIN IOT BUFFER
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        R E A D   I N   T H E   J C T                                *
*                                                                     *
***********************************************************************
         SPACE 1
VGETJCT  ST    JCT,PCEBUFAD        SET BUFFER ADDRESS FOR $EXCP
         MVC   PCESEEK,JQETRAK     SET TRACK ADDRESS FOR $EXCP
        $EXCP  (WB)                READ THE JCT
         SPACE 1                                                     R4
VWAIT1  $WAIT  IO                  WAIT FOR I/O TO COMPLETE
         TM    BUFECBCC-BUFDSECT(JCT),X'7F'  TEST I/O STATUS
         BZ    VWAIT1              BR IF I/O NOT COMPLETE
         IC    WF,JQEFLAGS         SAVE JQE FLAG BYTE
         SPACE 1
***********************************************************************
*                                                                     *
*        ISSUE 'JOB PURGED' MESSAGE -- REMOVE JOB FROM SYSTEM         *
*                                                                     *
***********************************************************************
         SPACE 1
VREMJOB  LR    JCT,WA              RELOAD JQE ADDRESS               R41
        $WTO   VPRGMSG,L'VPRGMSG,WAIT=YES,JOB=YES,                  R41C
               ROUTE=$LOG+$UR,CLASS=$TRIVIA,PRI=$ST                 R41
         L     JCT,PCEBUFAD        RESTORE JCT ADDRESS              R41
        $QREM  (WA)                REMOVE JOB FROM SYSTEM           R41
        $WAIT  CKPT                WAIT FOR CHECKPOINT TO COMPLETE
         TM    BUFECBCC-BUFDSECT(JCT),X'7F'  TEST JCT READ
         BO    VNOERROR            BR IF JCT READ WITHOUT ERROR
        $IOERROR (JCT)              ELSE ISSUE I/O ERROR MSG
         SPACE 1
VERROR  $DISTERR                   INDICATE DISASTEROUS ERROR
         B     VDONE               BR TO CONTINUE                   R41
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        R E A D   I O T ( S )   A N D   P U R G E   T R A C K S      *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
VNOERROR L     R1,JCTJQE           VALIDATE
         AL    R1,$JOBQPTR          THE
         CLR   R1,WA                 JCT
         BNE   VERROR              BR IF INVALID JCT
         ST    WD,PCEBUFAD         SET BUFFER ADDRESS FOR $EXCP
         ICM   R1,15,JCTSPIOT      GET TRK ADDR OF 1ST SPIN IOT
         BZ    *+16                BR IF NONE
         BAL   WE,VIOTPRG           ELSE READ IOT AND PURGE TRACKS
         ICM   R1,15,IOTIOTTR      GET TRK ADDR OF NEXT SPIN IOT
         BNZ   *-8                 BR IF VALID TRACK ADDRESS
         ICM   R1,15,JCTIOT        GET TRK ADDR OF 1ST REGULAR IOT
         BZ    VSMFPRG             BR IF NONE
         BAL   WE,VIOTPRG           ELSE READ IOT AND PURGE TRACKS
         B     VSMFPRG             THEN BR TO WRITE SMF RECORDS
         EJECT
***********************************************************************
*                                                                     *
*        VIOTPRG -- ROUTINE TO READ IOT AND PURGE TRACKS              *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  0,8
VIOTPRG  ST    R1,PCESEEK          SET TRACK ADDRESS FOR $EXCP
        $EXCP  (WB),WAIT=YES       READ THE IOT                      R4
         BO    VNOIOTER            BR IF NO READ ERROR
         SPACE 1
VDSTER  $DISTERR                   INDICATE DISASTEROUS ERROR
         B     VSMFPRG             THEN WRITE SMF PURGE RECORD
         SPACE 1
         CNOP  0,8
VNOIOTER CLC   IOTJBKEY,JCTJBKEY   TEST FOR VALID IOT
         BNE   VDSTER              BR IF NO
         TM    IOTFLAG1,IOT1ALOC   TEST FOR ALLOCATION IOT
         BZR   WE                  RETURN IF NO
        $PURGE IOTTGMAP             ELSE PURGE ALLOCATED TRACKS
         BR    WE                  THEN RETURN
         EJECT                                                       R4
         CNOP  0,8
VSMFPRG  CLI   $NUMSMFB,2          TEST SMF BUFFER COUNT             R4
         BL    VDONE               BR IF SMF NOT SUPPORTED          R41
         TM    JCTSMFLG,JCTNOUJP+JCTNOT26  PURGE EXIT OR 26...
         BO    VDONE               BR IF NO                         R41
         BZ    *+16                BR IF BOTH
         TM    JCTSMFLG,JCTNOUJP   PURGE EXIT...
         BZ    *+8                 BR IF SO
         NI    JCTINDC,255-JCTJMRUX  ELSE INDICATE NO EXIT           R4
         SPACE 1
***********************************************************************
*                                                                     *
*        GET SMF BUFFER(S) FOR PURGE RECORD(S)                        *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         USING SMFDSECT,R1
         SPACE 1
        $GETSMFB WAIT=YES          OBTAIN JMR BUFFER ADDRESS
         TM    JCTINDC,JCTJMRUX    SHOULD USER EXITS BE TAKEN
         BZ    VCRE826             NO, DO NOT SAVE JMR
         MVC   SMFJMR(JCTJMRND-JCTJMR),JCTJMR  MOVE JMR TO SMF RCD   R4
         MVI   SMFTYPE,SMFJMRTP    JMR BUFFER ID
         LR    WC,R1               SAVE BUFFER ADDR. FOR PURGE REC
        $GETSMFB WAIT=YES          OBTAIN PURGE RECORD BFR ADDR
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        FORMAT AND QUEUE SMF TYPE 26 (PURGE) RECORD                  *
*                                                                     *
***********************************************************************
         SPACE 1
VCRE826  TM    JCTSMFLG,JCTNOT26   WRITE 26 RECORD...
         BZ    *+8                 BR IF SO
         OI    SMF26FLG,SMFNO26    NO
         MVC   SMF26JBN(SMFSIZE1),JCTJMRJN   GATHER PURGE RECORD INTO
         MVC   SMF26UIF,JCTUSEID         SMF BUFFER - HEADER
         MVC   SMF26JBF(JCTJBOPT+L'JCTJBOPT-JCTJOBFL),JCTJOBFL
         MVC   SMF26JNM(JCTPROCN+L'JCTPROCN-JCTJOBID-4),JCTJOBID+4  R41
         MVC   SMF26JID,JCTJOBID   JOB ID
         MVC   SMF26RPT(SMFSIZE3),JCTRDROF        TIME/DATE OFF READER
         MVC   SMF26CST(JCTODTOF+L'JCTODTOF-JCTCNVON),JCTCNVON       R4
         MVC   SMF26ICD(JCTOTSID+L'JCTOTSID-JCTCARDS),JCTCARDS
         STC   WF,PCER1            STORE JQE FLAG BYTE               R4
         TM    PCER1,QUEOPCAN+QUEPURGE  DID OPERATOR ISSUE $C OR $P
         BZ    *+8                 BR IF NO
         OI    SMF26INF,SMFOPCAN   INDICATE OPERATOR CANCELLED JOB
         MVC   SMFRDW(2),=Y(SMF26END-SMFRDW)  SIZE OF PURGE RECORD   R4
         MVI   SMF26LN1+1,SMF26PDD+L'SMF26PDD-SMF26LN1 DESC LENGTH  R41
         MVI   SMF26LN2+1,SMF26OPD+L'SMF26OPD-SMF26LN2 EVENTS LGTH
         MVI   SMF26LN3+1,SMF26END-SMF26LN3    ACTUALS LENGTH
         MVI   SMFHDRTY,SMFPRGTP   IDENTIFY PURGE RECORD TYPE
         MVI   SMF26SBS+1,SMFHSPID HASP SUBSYSTEM ID
         MVI   SMF26IND,X'E0'      SECTION EXISTENCE IDENTIFIER
         OI    SMF26RSD+3,X'0F'    ****                        @OZ61613
         OI    SMF26RPD+3,X'0F'     ****                       @OZ61613
         OI    SMF26CSD+3,X'0F'      ENSURE                    @OZ61613
         OI    SMF26CPD+3,X'0F'       PACKED                   @OZ61613
         OI    SMF26XSD+3,X'0F'        FIELDS                  @OZ61613
         OI    SMF26XPD+3,X'0F'         ARE                    @OZ61613
         OI    SMF26OSD+3,X'0F'          SIGNED                @OZ61613
         OI    SMF26OPD+3,X'0F'           ****                 @OZ61613
         TM    JCTINDC,JCTJMRUX    SHOULD USER EXITS BE TAKEN
         BZ    *+10                BR IF NO TO NOT CHAIN BUFFERS
         ST    R1,JMRCHAIN-SMFDSECT(WC) PUT PURGE BUF ADDR IN JMR BUF
         LR    R1,WC               PUT JMR IN SMF BUFFER BUSY
        $QUESMFB                   QUEUE BUFFER(S) FOR WRITING
         SPACE 1
         DROP  R1
         SPACE 1
SMFSIZE1 EQU   L'SMF26JBN+L'SMF26RST+L'SMF26RSD                      R4
SMFSIZE3 EQU   L'SMF26RPT+L'SMF26RPD                                 R4
         EJECT
***********************************************************************
*                                                                     *
*        PROCESSING COMPLETE FOR THIS JOB                             *
*                                                                     *
***********************************************************************
         SPACE 1
VDONE   $DORMANT                   INDICATE PROCESSOR INACTIVE      R41
         B     VGETJOB             BR TO GET NEXT JOB
         SPACE 1
         DROP  WA,WD               KILL JQE, IOT ADDRESSABILITY
         SPACE 1
VPRGMSG $MSG   250,'IS PURGED'
         LTORG                                                 @OZ20010
         TITLE 'HASP CHECKPOINT PROCESSOR'
***********************************************************************
*                                                                     *
*    HASP CHECKPOINT PROCESSOR (SEE PROLOG ABOVE FOR DESCRIPTION)     *
*                                                                     *
***********************************************************************
         SPACE 1
HASPCKPT $ENTRY BASE=(BASE2,BASE3) ESTABLISH ENTRY POINT       @OZ27300
         LA    BASE3,2048(,BASE2)  ESTABLISH                   @OZ27300
         LA    BASE3,2048(,BASE3)   SECOND BASE REGISTER       @OZ27300
         SPACE 2
***********************************************************************
*                                                                     *
*    INITIALIZATION  -  EXECUTED ONLY ONCE                            *
*                                                                     *
***********************************************************************
         SPACE 1
         ST    SAVE,CKPSTQE+IPOST  STORE PCE ADDRESS IN STQE        R41
         LH    R1,$RETRYCT         INITIALIZE                  @OZ27300
         LA    R1,1(,R1)            I/O ERROR                  @OZ27300
         STH   R1,CKPRETRY           RETRY COUNT               @OZ27300
         MVC   PCESEEK,$HASPDCB    SET DA DCT                  @OZ27300
         MVI   PCEDEVTP,DCTINT      TO LOOK LIKE UNIT RECORD   @OZ27300
         L     WE,$JQB             LOAD ADDRESS OF JOBQ BUFFER @OZ27300
         USING JQBDSECT,WE         PROVIDE JQB ADDRESSABILITY  @OZ27300
         ST    WE,PCEBUFAD         STORE IOB ADDR IN DA DCT    @OZ27300
         SPACE 1                                               @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*  ON ENTRY - JQB IS SETUP WITH PRIMARY-CHECKPOINT FORMAT CCWS @OZ27300
*                   (JQBFLAG1 = JQB1FMT + JQB1PRIM)            @OZ27300
*                                                              @OZ27300
*           - $QSONDA=1  (QUEUES ARE NOT IN STORAGE)           @OZ27300
*           - DASD RESERVE AND CHECKPOINT LOCK ARE HELD        @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
         BAL   R14,KFORMAT         RESET JQB FOR NON-FORMAT    @OZ27300
         EJECT                                                 @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*     IF DEBUG -- COPY Q-RCDS TO I/O AREA FOR LATER COMPARES   @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
KTDEBUG  NI    $STATUS,FF-$QSONDA  INDICATE QUEUES IN STORAGE  @OZ27300
         TM    $RUNOPTS,$DEBUG     DEBUG MODE...               @OZ27300
         BZ    KTMAS               BR IF NO                    @OZ27300
         L     R0,$JOBQIO          ADDRESS AND LENGTH          @OZ27300
         LH    R1,$JOBRECN          OF QUEUE RECORDS           @OZ27300
         AH    R1,$JOTRECN           IN CHECKPOINT             @OZ27300
         SLL   R1,12                  I/O AREA                 @OZ27300
         L     R14,$JOBQPTR        ADDRESS AND LENGTH OF       @OZ27300
         LR    R15,R1               ACTUAL QUEUE RECORD AREA   @OZ27300
         MVCL  R0,R14              COPY Q'S TO I/O AREA        @OZ27300
         SPACE 1                                               @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*           BYPASS READING SHARED QUEUES FIRST TIME            @OZ27300
*                                                              @OZ27300
*          START $MINHOLD (MAS) OR $CKPTIME INTERVALS          @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
KTMAS    L     R1,$QSE1            GET ADDRESS OF 1ST QSE      @OZ27300
         TM    QSEFLAGS-QSEDSECT(R1),QSELAST  TEST FOR 1 SYSTEM@OZ27300
         BNZ   K1SYS               BR IF YES                   @OZ27300
         OI    CKPFLAG1,CKP1MAS     ELSE REMEMBER MAS          @OZ27300
         L     R0,$MINHOLD           AND BR TO START 1ST       @OZ27300
         B     KINITIMR               MINHOLD INTERVAL         @OZ27300
         SPACE 1                                               @OZ27300
K1SYS    L     R0,$CKPTIME         LOAD PR/PU CKPT INTERVAL    @OZ27300
         SPACE 1                                               @OZ27300
KINITIMR BAL   WA,KSTIMER          START INTERVAL TIMER AND    @OZ27300
         MVI   JQBECBCC,FF         INITIALIZE ECB FOR KWRITE   @OZ27300
         MVC   CKPDPXCT,$DPXRATE   INITIALIZE DUPLEXING RATE   @OZ27300
         B     KWCYCLE             BR TO ENTER WRITE CYCLE     @OZ27300
         EJECT                                                 @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*                JES2 CHECKPOINT DATA SET FORMAT               @OZ27300
*                -------------------------------               @OZ27300
*                                                              @OZ27300
*                                                              @OZ27300
* TRK 1    -------     =====  ------     -----//------         @OZ27300
*         * CHECK *   *    LOCK     *   *   MASTER    *        @OZ27300
*          -------     =====  ------     -----//------         @OZ27300
*                       KEY    DATA                            @OZ27300
*                                                              @OZ27300
*                                                              @OZ27300
* TRK 2    -----//-----     -----//-----     -----//-----      @OZ27300
* THRU    *  Q-RECORD  *   *  Q-RECORD  *   *  Q-RECORD  * ... @OZ27300
* TRK N    -----//-----     -----//-----     -----//-----      @OZ27300
*                                                              @OZ27300
*                                                              @OZ27300
* T1-R1  CHECK RCD  . 8-BYTES (MUST MATCH $WCHECK IN MASTER)   @OZ27300
* T1-R2  LOCK RCD   . 8-BYTE KEY  (VALUE=0 MEANS CKPT UNOWNED) @OZ27300
*                     8-BYTE DATA (SAME VALUE AS KEY)          @OZ27300
* T1-R3  MASTER RCD . $MASTERL-BYTES                           @OZ27300
*                                                              @OZ27300
* T2-RN THRU TN-RN  . 4K-BYTES  (JES2 QUEUE RECORDS)           @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*        BEGIN MULTI-ACCESS SPOOL CHECKPOINT CYCLE             @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
KREAD    TM    $RUNOPTS,$DEBUG     TEST DEBUG OPTION           @OZ27300
         BZ    KGETLOCK            BR IF NOT SELECTED          @OZ27300
         SPACE 2                                               @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*        ENSURE NO CHANGES TO CHECKPOINT WHILE NOT OWNED       @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
         L     R14,$JOBQPTR        POINT TO JOB QUEUE          @OZ27300
         LH    R15,$JOBRECN        GET NO. OF JOBQ RECORDS     @OZ27300
         AH    R15,$JOTRECN          ADD NO. OF JOT RECORDS,   @OZ27300
         SLL   R15,12                MULTIPLY BY PAGE SIZE     @OZ27300
         L     R0,$JOBQIO          POINT TO IN-AREA JOBQ/JOT   @OZ27300
         LR    R1,R15              DUPLICATE FIELD LENGTH      @OZ27300
         CLCL  R14,R0              COMPARE JOBQ/JOT WITH COPY  @OZ27300
         BE    KGETLOCK            BR IF EQUAL                 @OZ27300
         SPACE 1                                               @OZ27300
KRDK01   LR    R1,R0               PRESERVE R0 FOR DEBUGGING   @OZ27300
         LA    WA,K01              POINT TO K01 ABEND          @OZ27300
         B     KLOGOUT              AND BR TO LOGOUT           @OZ27300
         EJECT                                                 @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*   BUILD CHANNEL PROGRAM TO...                                @OZ27300
*                                                              @OZ27300
*   1) VERIFY THAT CHECKPOINT-LOCK IS ZERO (UNHELD). IF LOCK'S @OZ27300
*      KEY-AREA IS NOT ZERO, READ IT IN (T1R1) AND GO TO 5.    @OZ27300
*   2) READ MASTER RECORD (T1R3)                               @OZ27300
*   3) READ CHECK RECORD  (T1R1)                               @OZ27300
*   4) SET CHECKPOINT-LOCK KEY AND DATA AREAS (T1R2)           @OZ27300
*   5) READ COUNT-AREA OF MASTER RECORD TO ENSURE COMPLETION   @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
         USING JQBCCWE,WD          PROVIDE CCWE ADDRESSABILITY @OZ27300
         SPACE 1                                               @OZ27300
KGETLOCK MVI   JQBKEY,0            SEARCH FOR ZERO KEY         @OZ27300
         MVC   JQBLKEY(8),$BLANKS    IF ZERO KEY,              @OZ27300
         MVC   JQBLDATA(8),$BLANKS    SET OUR                  @OZ27300
         MVC   JQBLKEY(1),$SIDBUSY     SYSTEM ID               @OZ27300
         MVC   JQBLKEY+1(L'$SID),$SID   INTO LOCK              @OZ27300
         MVC   JQBLDATA(1),$SIDBUSY      RECORD KEY            @OZ27300
         MVC   JQBLDATA+1(L'$SID),$SID    AND DATA FIELDS      @OZ27300
         SPACE 1                                               @OZ27300
KRDBGN   OI    JQBFLAG1,JQB1LOCK+JQB1READ+JQB1PRIM  GET-LOCK OP@OZ27300
         MVC   CKPSTCK,$ZEROS      CLEAR TIMER FOR MSG CONTROL @OZ27300
         MVI   CKPRLSID,0          CLEAR $ESYS,RESET=SID FIELD @OZ27300
         SPACE 1                                               @OZ27300
KRDCCWS  LA    WD,JQBLOCKV         START CHANNEL PROGRAM       @OZ27300
         ST    WD,JQBSTART          WITH LOCK-VERIFY PACKET    @OZ27300
         MVC   JQBSEEK+1(6),JQBCADDR   SET SEEK ADDRESS        @OZ27300
         LA    R1,JQBMSTR+(JQBCSID-JQBCCWE)  CHAIN MASTER-     @OZ27300
         ST    R1,JQBLTIC+4                   RECORD PACKET    @OZ27300
         LRA   R1,0(,R1)                       AFTER THIS      @OZ27300
         STCM  R1,7,JQBLTNXT+CCWADDR            PACKET         @OZ27300
         SPACE 1                                               @OZ27300
         BAL   WB,KFIXMSTR         SETUP MASTER RCD I/O AREA   @OZ27300
         LA    WD,JQBMSTR          POINT TO MASTER CCW PACKET  @OZ27300
         MVI   JQBCRW+CCWOP,READ+DATA  SET TO READ MASTER RCD  @OZ27300
         SPACE 1                                               @OZ27300
         LR    WB,WD               POINT WB TO MASTER PACKET   @OZ27300
         LA    WD,JQBCHECK          AND WD TO CHECK-RCD PACKET @OZ27300
         MVI   JQBCRW+CCWOP,READ+DATA  SET TO READ CHECK-RCD   @OZ27300
         BAL   WA,KCCWADJ          CHAIN CHK-PACKET FROM MSTR  @OZ27300
         SPACE 1                                               @OZ27300
         LR    WB,WD               FINALLY, ADD THE PACKET     @OZ27300
         LA    WD,JQBLOCK           TO SET OUR CKPT LOCK       @OZ27300
         BAL   WA,KCCWADJ           (ENDS WITH TIC TO JQBVERP) @OZ27300
         SPACE 1                                               @OZ27300
         DROP  WD                  KILL CCWE ADDRESSABILITY    @OZ27300
         EJECT                                                 @OZ27300
                                   PRINT OFF - SECTION DELETED @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
                                   PRINT ON -- SECTION DELETED @OZ27300
         SPACE 1                                               @OZ20010
***********************************************************************
*                                                                     *
*    SET TO RESERVE CHECKPOINT DEVICE                                 *
*                                                                     *
***********************************************************************
         SPACE 1
        $RESERVE                   REQUEST CHECKPOINT RESERVE  @OZ35278
         BZ    KLOCKIO             BR IF RESERVE SATISFIED     @OZ35278
         SPACE 1                                               @OZ35278
KRSTIMER L     R0,$WARNTIM         SET TIMER TO DETECT POLY-JES@OZ35278
         BAL   WA,KSTIMER           RESERVE OR READ LOCKOUT    @OZ35278
         SPACE 1                                               @OZ35278
KRSWAIT $WAIT  RSV,INHIBIT=NO      WAIT FOR RESERVE OR TIMER   @OZ35278
         TM    $RSVECB,X'40'       RESERVE SATISFIED...        @OZ35278
         BO    KGOTRSV             BE IF YES                   @OZ35278
         TM    CKPSTQE+IPOST,X'80' HAS $WARNTIM EXPIRED...     @OZ35278
         BZ    KRSWAIT             BR IF NO TO CONTINUE WAIT   @OZ35278
         MVC   CKPMSG,KWARNM       WARN OPERATOR OF            @OZ35278
       $$WTO   CKPMSG               'WAITING FOR CKPT ACCESS'  @OZ35278
         B     KRSTIMER            BR TO RE-ACTIVATE TIMER     @OZ35278
         SPACE 1                                               @OZ35278
KGOTRSV  LH    WF,CKPRETRY         SET I/O ERROR RETRY COUNT   @OZ35278
         MVC   CKPLIRCT,$LIRCT     SET LOST INTERRUPT RETRY CT @OZ35278
         B     KRDMSTR1            BR TO READ MASTER RECORD    @OZ35278
*                                  THIS CARD DELETED BY APAR   @OZ35278
         EJECT                                                 @OZ20010
***************************************************************@OZ27300
*                                                              @OZ27300
*   START I/O TO OBTAIN CKPT-LOCK AND READ MASTER/CHECK RCDS   @OZ27300
*                                                              @OZ27300
*    ISSUE WARNING IF &WARNTIM EXPIRES BEFORE I/O COMPLETES    @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
KLOCKIO  LH    WF,CKPRETRY         SET I/O ERROR RETRY COUNT   @OZ35278
         SPACE 1                                               @OZ27300
KRDMSTR  MVC   CKPLIRCT,$LIRCT     SET LOST INTERRUPT RETRY CT @OZ35278
         SPACE 1                                               @OZ27300
KRDMAGN  L     R0,$WARNTIM         START/RESTART TIMER TO      @OZ27300
         BAL   WA,KSTIMER           DETECT READ LOCKOUTS       @OZ27300
         SPACE 1                                               @OZ27300
KRDMSTR1 MVC   JQBVERFY,KVERFY     INITIALIZE I/O VERIFICATION @OZ35278
         MVI   JQBADKEY,FF          AND LOCK READ-IN AREAS     @OZ27300
         MVC   JQBERRCT,CKPRETRY     AND APPENDAGE RETRY CTR   @OZ27300
         LA    R1,PCEDADCT         START THE I/O               @OZ27300
        $EXCP  (R1),TYPE=VR         OPERATION                  @OZ27300
         SPACE 1                                               @OZ27300
KRDWAIT $WAIT  IO,INHIBIT=NO       WAIT FOR I/O OR $WARNTIM    @OZ27300
         CLI   JQBECBCC,0          I/O COMPLETE...             @OZ27300
         BNE   KRDIOCC             BR IF YES                   @OZ27300
         SPACE 1                                               @OZ27300
         TM    CKPSTQE+IPOST,X'80' HAS $WARNTIM EXPIRED...     @OZ27300
         BZ    KRDWAIT             BR IF NO                    @OZ27300
         MVC   CKPMSG,KWARNM        ELSE ISSUE WARNING MSG --  @OZ27300
       $$WTO   CKPMSG              'WAITING FOR CKPT ACCESS'   @OZ27300
         L     R0,$WARNTIM         RESTART                     @OZ27300
         BAL   WA,KSTIMER           WARNING TIMER              @OZ27300
         B     KRDWAIT               AND GO WAIT AGAIN         @OZ27300
         SPACE 1                                               @OZ27300
KRDIOCC  BAL   WA,KTTIMER          STOP TIMER                  @OZ27300
         CLI   JQBECBCC,X'7F'      I/O POSTED SUCCESSFUL...    @OZ27300
         BE    KRDMOK              BR IF YES                   @OZ27300
         SPACE 1                                               @OZ27300
        $IOERROR (WE)              ISSUE I/O ERROR MESSAGE     @OZ27300
         BCT   WF,KRDMSTR          RETRY THE I/O               @OZ27300
         B     KREFRESH            BR IF ALL RETRIES FAILED    @OZ27300
         EJECT                                                 @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*   VERIFY THAT THIS MEMBER HAS OBTAINED THE CHECKPOINT LOCK   @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
KRDMOK   BAL   WB,KIOVERFY         INTERRUPTED I/O...          @OZ27300
         B     KRDMAGN             RETRY IF YES          +0    @OZ27300
         SPACE 1                                               @OZ27300
         CLI   JQBADKEY,FF         DID WE GET LOCK...    +4    @OZ27300
         BE    KGOTLOK             BR IF YES                   @OZ27300
         SPACE 1                                               @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*   CHECKPOINT LOCK ALREADY HELD.  TRY AGAIN TO OBTAIN LOCK    @OZ27300
*   EVERY SECOND. ISSUE WAITING-FOR-LOCK MESSAGE EVERY 32.     @OZ27300
*   CONTINUE UNTIL LOCK OBTAINED, OR UNTIL '$ESYS,RESET=SID'   @OZ27300
*   IS ISSUED, WHICH CHANGES THE SEARCH-KEY ARGUMENT FROM      @OZ27300
*   ZERO TO THE SYSTEM ID ENTERED.                             @OZ27300
*                                                              @OZ27300
*   IF SEARCH FAILED, AND LOCK WAS READ -- POSSIBLE VALUES...  @OZ27300
*                                                              @OZ27300
*   00       - LOCK NOT HELD (2 SYSTEMS TRIED TO RESET LOCK)   @OZ27300
*   80       - LOCK HELD BY OTHER SYSTEM DURING INITIALIZATION @OZ27300
* $SIDBUSY   - LOCK WAS ALREADY HELD BY THIS SYSTEM            @OZ27300
* 01-$QSENO  - LOCK HELD BY OTHER SYSTEM                       @OZ27300
*  OTHER     - ERROR. RESULTS IN A JES2 $ERROR CODE=K13        @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
        $RELEASE                   RELEASE CHECKPOINT RESERVE  @OZ35278
         CLC   $SIDBUSY,JQBADKEY   WERE WE THE LOCK OWNER...   @OZ27300
         BNE   KLOKMESG            BR IF NO                    @OZ27300
         MVC   JQBKEY,$SIDBUSY      ELSE SETUP TO REGAIN LOCK  @OZ27300
         B     KRDBGN                AND BR TO GO DO IT        @OZ27300
         SPACE 1                                               @OZ27300
KLOKMESG CLI   JQBADKEY,0          BR IF LOCK WAS UNHELD       @OZ27300
         BE    KLOKOPER            (TWO $ESYS,RESET= CMDS)     @OZ27300
         OI    JQBFLAG2,JQB2LOKO   SHOW QUEUES LOCKED OUT      @OZ27300
         TM    $COMMPCE,X'40'      HASPCOMM WAITING ON US...   @OZ27300
         BZ    KLOKTIME            BR IF NO                    @OZ27300
         L     R1,$COMMPCE         GET CMD PROCESSOR PCE ADDR  @OZ27300
        $POST  (R1),WORK           WAKE UP COMMAND PROCESSOR   @OZ27300
         EJECT                                                 @OZ27300
KLOKTIME STCK  $DOUBLE             GET TIME OF DAY             @OZ27300
         L     R0,$DOUBLE          CONVERT TO                  @OZ27300
         SRL   R0,5                 32-SECOND UNITS            @OZ27300
         CL    R0,CKPSTCK          HAS 32 SECONDS PASSED...    @OZ27300
         BNH   KWAIT1S             BR IF NO                    @OZ27300
         ST    R0,CKPSTCK           ELSE SAVE NEW CLOCK VALUE  @OZ27300
         SPACE 1                                               @OZ27300
         MVC   CKPMSG,KLOKMSG      BASE MESSAGE TEXT           @OZ27300
         CLI   JQBADKEY,X'80'      OTHER SYSTEM INITIALIZING...@OZ27300
         BNE   KLOKQSES            BR IF NO TO SCAN QSE'S      @OZ27300
         MVC   KLOKINIT+CKPMSG,=C'INITIALIZATION' SPECIAL TEXT @OZ27300
         B     KLOKTEL             BR TO TELL OPERATOR         @OZ27300
         SPACE 1                                               @OZ27300
         USING QSEDSECT,R1         PROVIDE QSE ADDRESSABILITY  @OZ27300
         SPACE 1                                               @OZ27300
KLOKQSES L     R1,$QSE1            POINT TO QSE'S              @OZ27300
         LH    WA,$QSENO           NUMBER OF SYSTEMS           @OZ27300
         SPACE 1                                               @OZ27300
KLOKMLUP CLC   QSESIBSY,JQBADKEY   IS THIS THE OWNING SYSTEM...@OZ27300
         BE    KLOKMWTO            BR IF YES                   @OZ27300
         LA    R1,QSELEN(,R1)       ELSE POINT TO              @OZ27300
         BCT   WA,KLOKMLUP           NEXT QSE AND LOOP         @OZ27300
         LA    WA,K13              POINT TO K13 ABEND          @OZ27300
         B     KLOGOUT              AND BR TO LOGOUT           @OZ27300
         SPACE 1                                               @OZ27300
KLOKMWTO MVC   KLOKMSID+CKPMSG,QSESID  SET SYSTEM ID IN MSG    @OZ27300
         SPACE 1                                               @OZ27300
KLOKTEL $$WTO  CKPMSG              TELL OPERATOR               @OZ27300
         SPACE 1                                               @OZ27300
         DROP  R1                  KILL QSE ADDRESSABILITY     @OZ27300
         SPACE 1                                               @OZ27300
KWAIT1S $PGSRVC FREE,$MASTERI,$MASTERL,RELEASE=Y  MSTR IO AREA @OZ27300
         LA    R0,1                WAIT                        @OZ27300
         BAL   WA,KSTIMER           FOR                        @OZ27300
        $WAIT  WORK                  1-SECOND                  @OZ27300
         SPACE 1                                               @OZ27300
KLOKOPER MVI   JQBKEY,0            RESET SEARCH-KEY TARGET     @OZ27300
         CLI   CKPRLSID,0          $ESYS,RESET=SID...          @OZ27300
         BE    KRDCCWS             BR IF NO TO RETRY LOCK      @OZ27300
         MVC   JQBKEY,CKPRLSID      ELSE REPLACE SRCH-KEY      @OZ27300
         B     KRDBGN                AND BR TO OVERRIDE LOCK   @OZ27300
         EJECT                                                 @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*    THIS MEMBER HAS EXCLUSIVE CONTROL OF THE PRIMARY CKPT DS  @OZ27300
*                                                              @OZ27300
*       ENSURE PREVIOUS WRITE OF PRIMARY WAS SUCCESSFUL        @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
KGOTLOK  NI    JQBFLAG1,FF-JQB1LOCK  SHOW LOCKING COMPLETE     @OZ27300
         OI    JQBFLAG1,JQB1LOKD      AND WE HAVE IT           @OZ27300
         NI    JQBFLAG2,FF-JQB2LOKO  RESET QUEUES LOCKOUT FLAG @OZ27300
         SPACE 1                                               @OZ27300
         L     R1,$MASTERI         POINT TO MASTER-RCD IO AREA @OZ27300
         CLC   JQBCKVAL,$WCHECK-$SAVEBEG(R1)  CHECK CHECK-RCD  @OZ27300
         BE    KREAD2              BR IF CHECK RECORD MATCHES  @OZ27300
         SPACE 1                                               @OZ27300
         MVC   CKPMSG,KPREVERR     'INVALID RECORD DETECTED'   @OZ27300
       $$WTO   CKPMSG              TELL OPERATOR               @OZ27300
         B     KREFRESH            BR TO DISASTER RECOVERY     @OZ27300
         SPACE 2                                               @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*        READ ALL CHANGED RECORDS INTO THE I/O AREA            @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
KREAD2   MVC   JQBSTART,$ZEROS     CLEAR IOBSTART FOR KBLDCCWS @OZ27300
         BAL   R14,KBLDCCWS        BUILD CCWS TO RD CHG'D RCDS @OZ27300
         CLC   JQBSTART,$ZEROS     ANY RECORDS TO READ...      @OZ27300
         BE    KRTQSE              BR IF NO                    @OZ27300
         LH    WF,CKPRETRY         SET I/O ERROR RETRY COUNTER @OZ27300
         SPACE 1                                               @OZ27300
KRDREST  MVC   CKPLIRCT,$LIRCT     SET LOST-INTERRUPT RETRY CTR@OZ27300
         SPACE 1                                               @OZ27300
KRDRAGN  MVC   JQBVERFY,KVERFY     INIT I/O VERFICATION AREA   @OZ27300
         LA    R1,PCEDADCT           READ ALL CHANGED RECORDS  @OZ27300
        $EXCP  (R1),TYPE=VR,WAIT=YES  INTO THE I/O AREA        @OZ27300
         BO    KRDROK              BR IF I/O POSTED SUCCESSFUL @OZ27300
         BCT   WF,KRDREST           ELSE RETRY THE I/O         @OZ27300
         B     KREFRESH            BR IF ALL RETRIES FAILED    @OZ27300
         SPACE 1                                               @OZ27300
KRDROK   BAL   WB,KIOVERFY         INTERRUPTED I/O...          @OZ27300
         B     KRDRAGN             RETRY IF YES       +0       @OZ27300
         DS    0H                   ELSE CONTINUE     +4       @OZ27300
         EJECT                                                 @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*        CHECK INTEGRITY OF NEWLY READ CHECKPOINT              @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
         USING QSEDSECT,R1         PROVIDE QSE ADDRESSABILITY  @OZ27300
         SPACE 1                                               @OZ27300
KRTQSE   L     R1,$RQSE            POINT TO OUR QSE IN IO AREA @OZ27300
         CLC   $SIDTIME,QSESITIM   HAS QSE BEEN CLOBBERED...   @OZ27300
         BNE   KRK03               BR IF YES                   @OZ27300
         L     R1,$ESYSQSE         IS A $ESYS                  @OZ27300
         LTR   R1,R1                IN PROGRESS...             @OZ27300
         BZ    KRDMOVE             BR IF NO                    @OZ27300
         SL    R1,$AQSE            LOCATE WARM STARTING        @OZ27300
         AL    R1,$RQSE             SYSTEM'S QSE IN IO AREA    @OZ27300
         CLC   $SIDTIME,QSESITIM     AND CHECK $ESYS INTEGRITY @OZ27300
         BE    KRDMOVE             BR IF OK                    @OZ27300
         SPACE 1                                               @OZ27300
KRK03    LA    WA,K03              POINT TO K03 ABEND          @OZ27300
         B     KLOGOUT              AND BR TO LOGOUT           @OZ27300
         SPACE 1                                               @OZ27300
         DROP  R1                  KILL QSE ADDRESSABILITY     @OZ27300
         EJECT                                                 @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*                 BEGIN POST-READ PROCESSING                   @OZ27300
*                 --------------------------                   @OZ27300
*   CALL KAFTERIO TO MOVE ALL NEWLY READ JOBQ/JOT RECORDS TO   @OZ27300
*    THE ACTUAL QUEUE AREA. IT ALSO PG-RLSE'S ALL I/O AREA     @OZ27300
*     RECORDS UNLESS THEY ARE SCHEDULED FOR DUPLEX-WRITE       @OZ27300
*                                                              @OZ27300
*  MOVE MASTER RECORD FROM I/O AREA TO ACTUAL-AREA AND TO HCT  @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
KRDMOVE  CLC   JQBSTART,$ZEROS     WERE ANY RECORDS READ...    @OZ27300
         BE    KRDMVHCT            BR IF NONE                  @OZ27300
         BAL   R14,KAFTERIO        MOVE Q-RCDS TO ACTUAL AREA  @OZ27300
         SPACE 1                                               @OZ27300
KRDMVHCT NI    JQBFLAG1,FF-JQB1READ  SHOW READ COMPLETE        @OZ27300
         L     R0,$MASTERI         GET ADDRESS AND LENGTH      @OZ27300
         L     R1,$MASTERL          OF MASTER RECORD           @OZ27300
         LA    R14,$SAVEBEG        GET ADDRESS AND LENGTH      @OZ27300
         LA    R15,$SAVELEN         OF HCT CHECKPOINT AREA     @OZ27300
         MVCL  R14,R0              MOVE CKPT'D HCT VARIABLES   @OZ27300
         L     R14,$QSE1           START OF ACTUAL QSE AREA    @OZ27300
         LR    R15,R1              REMAINING MOVE LENGTH       @OZ27300
         MVCL  R14,R0              MOVE REST OF MASTER DATA    @OZ27300
         SPACE 1                                               @OZ27300
         TM    $STATUS,$DUPLEX     PAGE-RELEASE MASTER RECORD  @OZ27300
         BO    KRDOK                I/O AREA UNLESS DUPLEX     @OZ27300
        $PGSRVC FREE,$MASTERI,$MASTERL,RELEASE=Y   FOLLOWS     @OZ27300
         SPACE 2                                               @OZ27300
KRDOK    ICM   R1,15,$MCONPCE      POINT TO REMOTE CONSOLE PCE @OZ27300
         BZ    KQSNONDA            BR IF NONE                  @OZ27300
        $POST  (R1),WORK            ELSE WAKE IT UP            @OZ27300
                                   PRINT OFF - SECTION DELETED @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
                                   PRINT ON -- SECTION DELETED @OZ27300
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*    SHOW SHARED QUEUES ARE AVAILABLE IN STORAGE FOR ACCESS    @OZ27300
*                                                                     *
***********************************************************************
         SPACE 1
KQSNONDA NI    $STATUS,FF-$QSONDA-$CKPTW  SHOW QUEUES READ     @OZ27300C
                                    AND ALLOW WRITE REQUESTS   @OZ27300
         SPACE 1                                               @OZ27300
        $POST  $HASPECF,CKPT       $POST $QSUSE $WAITERS       @OZ27300
                                   PRINT OFF - SECTION DELETED @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
                                   PRINT ON -- SECTION DELETED @OZ27300
         EJECT
***********************************************************************
*                                                                     *
*    PROPAGATE JOB, JOT, AND SPECIFIC $POSTS FROM OTHER SYSTEMS       *
*                                                                     *
***********************************************************************
         SPACE 1
         USING QSEDSECT,WC         PROVIDE QSE ADDRESSABILITY  @OZ27300
         SPACE 1                                               @OZ27300
KRCPNP   L     WC,$AQSE            POINT TO OUR QSE            @OZ27300
         TM    QSEFLAGS,QSEPOST    TEST FOR X-SYSTEM $POSTS    @OZ27300
         BZ    KRDEND              BRANCH IF NONE
         TM    QSEFLAGS,QSEPJOB    TEST FOR CROSS-SYSTEM $POST JOB
         BZ    KRDPOCNV            BRANCH IF NOT
        $POST  $HASPECF,JOB        $POST JOB
         B     KRDPOJOT            SKIP SPECIFIC JOB POSTING
         SPACE 1                                                    R41
KRDPOCNV TM    QSEFLAGS,QSEPCNV    TEST FOR XSYS $POST CONVERTER
         BZ    KRDPOXEQ            BRANCH IF NOT
         L     R1,$JCLPCE          GET ADDRESS OF CONVERTER PCE      R4
        $POST  (R1),JOB             AND $POST FOR JOB
         SPACE 1                                                    R41
KRDPOXEQ TM    QSEFLAGS,QSEPXEQ    TEST FOR XSYS $POST EXECUTION
         BZ    KRDPOOUT            BRANCH IF NOT
         L     R1,$SSVT            POINT TO SSVT               @OZ20010
         MVI   $SVJOB-SSVT(R1),X'80' $$POST XEQ PROCESSOR      @OZ20010
         L     R1,$EXECPCE         GET ADDRESS OF EXECUTION PCE      R4
        $POST  (R1),JOB             AND $POST FOR JOB
         SPACE 1                                                    R41
KRDPOOUT TM    QSEFLAGS,QSEPOUT    TEST FOR XSYS $POST OUTPUT
         BZ    KRDPOPRG            BRANCH IF NOT
         L     R1,$OUTPCE          GET ADDRESS OF OUTPUT PCE         R4
        $POST  (R1),JOB             AND $POST FOR JOB
         EJECT                                                       R4
KRDPOPRG TM    QSEFLAGS,QSEPPRG    TEST FOR XSYS $POST PURGE
         BZ    KRDPOJOT            BRANCH IF NOT
         L     R1,$PRGPCE          GET ADDRESS OF PURGE PCE          R4
        $POST  (R1),JOB             AND $POST FOR JOB
         SPACE 1                                                    R41
KRDPOJOT TM    QSEFLAGS,QSEPJOT    TEST FOR CROSS-SYSTEM $POST JOT
         BZ    KRDPOMLM            BRANCH IF NOT
        $POST  $HASPECF,JOT        $POST JOT
         CLI   $WTRWTCT,0          TEST FOR WAITING XWTRS
         BE    KRDEND              BRANCH IF NOT
         L     R15,=V($#WTR)       GO POST
         BALR  R14,R15              WAITING XWTRS
         B     KRDEND              SKIP SPECIFIC JOT POSTING
         SPACE 1                                                    R41
KRDPOMLM TM    QSEFLAGS,QSEPMLM    TEST FOR XSYS $POST MHASPECF,JOT
         BZ    KRDEND              BRANCH IF NOT
         NI    MHASPECF+$EWBJOT,255-$EWFJOT  TELL LINE MANAGER
         DROP  WC                  DROP QSE ADDRESSABILITY     @OZ20010
         EJECT                                                      R41
***********************************************************************
*                                                                     *
*        START THE MINIMUM HOLD INTERVAL (&MINHOLD)            @OZ27300
*                                                                     *
***********************************************************************
         SPACE 1
KRDEND   L     R0,$MINHOLD         GET MINIMUM HOLD INTERVAL   @OZ36307
                                   PRINT OFF - SECTION DELETED @OZ36307
*                                  THIS CARD DELETED BY APAR   @OZ36307
*                                  THIS CARD DELETED BY APAR   @OZ36307
*                                  THIS CARD DELETED BY APAR   @OZ36307
*                                  THIS CARD DELETED BY APAR   @OZ36307
*                                  THIS CARD DELETED BY APAR   @OZ36307
*                                  THIS CARD DELETED BY APAR   @OZ36307
                                   PRINT ON -- SECTION DELETED @OZ36307
         BAL   WA,KSTIMER          SET MINIMUM HOLD INTERVAL   @OZ36307
         SPACE 1                                               @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*     IF DUPLEXING -- WRITE ANY RECORDS NOT ALREADY DUPLEXED   @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
         TM    $STATUS,$DUPLEX     DUPLEXING...                @OZ27300
         BZ    KWCYCLE             BR IF NO                    @OZ27300
         OI    JQBFLAG1,JQB1WRT     SHOW DUPLEX-               @OZ27300
         NI    JQBFLAG1,FF-JQB1PRIM  WRITE OPERATION           @OZ27300
         BAL   WB,KSETPAKS         SETUP FOR DUPLEX            @OZ27300
         BAL   R14,KWRITE          WRITE THE DUPLEX            @OZ27300
         MVC   CKPDPXCT,$DPXRATE   SET PRIMARY/DUPLEX RATIO    @OZ27300
         NI    JQBFLAG1,FF-JQB1WRT  SHOW DUPLEX-WRT COMPLETE   @OZ27300
         EJECT                                                 @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*         *** CHECKPOINT WRITE CYCLE BEGINS HERE ***           @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
KWCYCLE  TM    $STATUS,$CKPTW      CHECKPOINT WRITE REQUIRED...@OZ27300
         BO    KW$POST             START WRITE CYCLE IF YES    @OZ27300
         TM    CKPSTQE+IPOST,X'80'  ANY TIME LEFT...           @OZ27300
         BO    KW$POST             BR IF NO TO ENTER CYCLE     @OZ27300
         SPACE 1                                               @OZ27300
         L     R1,$EWQTRAK+4            ENTER WRITE            @OZ27300
         CL    R1,PCEPCEB-PCEDSECT(,R1)  CYCLE IF ANY          @OZ27300
         BNE   KW$POST                    JES2 PROCESSORS      @OZ27300
         L     R1,$SSVT                    OR ADDRESS SPACES   @OZ27300
         TM    $SVTGECB-SSVT(R1),X'80'      ARE WAITING FOR    @OZ27300
         BZ    KW$WAIT                       TRACK GROUPS      @OZ27300
         SPACE 2                                               @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*        $WAIT FOR CHECKPOINT REQUEST, ENSURING THAT ALL OTHER @OZ27300
*        PROCESSORS ARE $WAITING WHEN CHECKPOINTING BEGINS     @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
KW$POST $POST  $HASPECF,CKPW       $POST US TO ENSURE RE-ENTRY @OZ27300
         SPACE 1                                               @OZ27300
KW$WAIT $WAIT  CKPW,INHIBIT=NO     $WAIT FOR WRT REQ OR TIMER  @OZ27300
         SPACE 1                                               @OZ27300
         LM    R0,R1,PCEPCEA       TEST CONTENTS OF            @OZ27300
         CLR   R0,R1                DISPATCHER'S READY QUEUE   @OZ27300
         BNE   KW$POST             BR IF OTHER PCES ARE READY  @OZ27300
         SPACE 1                                               @OZ72462
         LM    WA,WB,$EWQCKPP     GET PCE'S WAITING $CKPP      @OZ72462
         CL    WB,PCEPCEB-PCEDSECT(,WB)  ANY WAITING...        @OZ72462
         BNE   KW$POST            WAIT UNTIL $POSTED           @OZ72462
         EJECT                                                 @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*        RE-QUEUE PCE'S CURRENTLY $WAITING FOR CHECKPOINT-     @OZ27300
*        WRITE-COMPLETION ($CKPT) TO CHECKPOINT-POST QUEUE.    @OZ27300
*                                                              @OZ27300
*        ANY NEW $CKPT $WAIT'S DURING THIS WRITE OPERATION     @OZ27300
*        WILL NOT BE $POSTED UNTIL THE SUBSEQUENT WRITE.       @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
         NI    $STATUS,FF-$CKPTW   RESET CKPT-WRT REQUEST FLAG @OZ27300
         OI    $HASPECF+$EWBCKPT,$EWFCKPT  BACK OUT CKPT POST  @OZ27300
         SPACE 1                                               @OZ27300
         LM    WA,WB,$EWQCKPT      GET PCE'S $WAITING $CKPT    @OZ27300
         CL    WB,PCEPCEB-PCEDSECT(,WB)  ANY WAITING...        @OZ27300
         BE    KTESTRES            TEST FOR RESOURCE SHORT MSG @OZ32879
         STM   WA,WB,$EWQCKPP                ELSE MOVE         @OZ72462
         LA    R1,$EWQCKPP-(PCEPCEA-PCEDSECT)  ENTIRE $CKPT    @OZ72462
*              THIS LINE DELETED BY APAR OZ72462             * @OZ72462
         ST    R1,PCEPCEB-PCEDSECT(,WA)         QUEUE TO       @OZ72462
         ST    R1,PCEPCEA-PCEDSECT(,WB)          $CKPP QUEUE   @OZ72462
*              THIS LINE DELETED BY APAR OZ72462             * @OZ72462
         SPACE 1                                               @OZ27300
         LA    R1,$EWQCKPT-(PCEPCEA-PCEDSECT)  RESET           @OZ27300
         ST    R1,$EWQCKPT                      $CKPT          @OZ27300
         ST    R1,$EWQCKPT+4                     QUEUE         @OZ27300
KTESTRES STCK  $DOUBLE             STORE TIME OF DAY CLOCK     @OZ32879
         L     R0,$DOUBLE          GET SECONDS PORTION         @OZ32879
         SRL   R0,5                SHIFT 32 SECONDS            @OZ32879
         CL    R0,CKPSHORT         MSG ISSUED LAST 32 SEC...   @OZ32879
         BNH   KNOEND              BR IF RESENTLY ISSUED       @OZ32879
         ICM   WA,12,$RESHORT      TEST LOW RESOURCE BITS      @OZ32879
         BZ    KNOEND              BR IF NO, NO MSG            @OZ32879
         LA    WB,KTABLBEG         LOAD ADDRESS OF MSG TABLE   @OZ32879
         LA    WC,KTABLEND         LOAD ADDRESS END OF TABLE   @OZ32879
KLOOP    LTR   WA,WA               TEST FOR HIGH ORDER BIT     @OZ32879
         BM    KNOWTO              BR TO ISSUE MSG             @OZ32879
KENDTEST LA    WB,4(WB)            BUMP THE TABLE ADDRESS      @OZ32879
         CR    WB,WC               END OF TABLE...             @OZ32879
         BE    KNOEXIT             BR TO EXIT IF YES           @OZ32879
         SLL   WA,1                ELSE,SHIFT TO TEST NEXT BIT @OZ32879
         B     KLOOP               BR TO TEST NEXT BIT         @OZ32879
KTABLBEG DS    0F                  SHORT RESOURCE CODE TABLE   @OZ32879
         DC    C'CMBS'             AWAITING CMBS               @OZ32879
         DC    C'LBUF'             AWAITING LOCAL BUFFER       @OZ32879
         DC    C'TPBF'             AWAINTING TP BUFFER         @OZ32879
         DC    C'SMFB'             AWAITING SMFBUFFER          @OZ32879
         DC    C'JQES'             AWAITING JQE                @OZ32879
         DC    C'JOES'             AWAITING JOE                @OZ32879
KTABLEND EQU   *                   END OF TABLE                @OZ32879
KNOWTO   MVC   CKPMSG(KNORESLG),KNORESMG MOVE MSG TO WORK AREA @OZ32879
         MVC   CKPMSG+KNOCODLG(4),0(WB) MOVE CODE TO WORK AREA @OZ32879
       $$WTO   CKPMSG              ISSUE MSG TO OPERATOR       @OZ32879
         B     KENDTEST            BR TO RE-TEST BITS          @OZ32879
        $MID   050                                             @OZ32879
KNORESMG WTO   '&MID.JES2 RESOURCE SHORTAGE.   CODE = ****  ', @OZ32879C
               MF=L                                            @OZ32879
KNORESCD EQU   *-6,4               RESOURCE CODE               @OZ32879
KNORESLG EQU   *-KNORESMG          LENGTH OF MSG               @OZ32879
KNOCODLG EQU   KNORESLG-6          LOCATION OF CODE            @OZ32879
KNOEXIT  STCK  $DOUBLE             STORE TIME OF DAY CLOCK     @OZ32879
         L     R0,$DOUBLE          GET SECONDS PORTION         @OZ32879
         SRL   R0,5                SHIFT 32 SECONDS            @OZ32879
         ST    R0,CKPSHORT         SAVE MSG ISSUED TIME        @OZ32879
         XC    $RESHORT,$RESHORT   RESET SHORT RESOURCE BITS   @OZ32879
KNOEND   DS    0H                                              @OZ32879
***************************************************************@OZ27300
*                                                              @OZ27300
*        PROPAGATE CROSS-SYSTEM $POSTS TO OTHER MEMBERS        @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
         USING QSEDSECT,R1         PROVIDE QSE ADDRESSABILITY  @OZ27300
         SPACE 1                                               @OZ27300
KXSYS    CLI   $AQSE,0             ANY CROSS-SYSTEM $POSTS...  @OZ27300
         BE    KWXSYSCL            BR IF NO                    @OZ27300
         L     R1,$QSE1             ELSE GET ADDR OF QSE'S     @OZ27300
         LH    R0,$QSENO             AND NUMBER OF MEMBERS     @OZ27300
         SPACE 1                                               @OZ27300
         OC    QSEFLAGS,$AQSE      PROPAGATE CROSS-SYS         @OZ27300
         LA    R1,QSELEN(,R1)       $POSTS TO ALL OTHER        @OZ27300
         BCT   R0,*-10               MEMBERS AND THEN          @OZ27300
         MVI   $AQSE,0                CLEAR XSYS BITS          @OZ27300
         SPACE 1                                               @OZ27300
KWXSYSCL L     R1,$AQSE            CLEAR CROSS-SYSTEM          @OZ27300
         NI    QSEFLAGS,FF-QSEPOST  $POSTS IN OUR QSE          @OZ27300
         EJECT                                                 @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*     REPLENISH THE AVAILABLE TRACK GROUPS FOR THIS MEMBER     @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
         BAL   R14,KBLOB           REFILL THE TRACK GRP BLOCK  @OZ27300
*                                   BUT DON'T WAKE UP ANY      @OZ27300
*                                    WAITING ADDRESS SPACES    @OZ27300
*                                     UNTIL WRITE SCHEDULED    @OZ27300
         SPACE 1                                               @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*        TIME-STAMP THIS CHECKPOINT WRITE CYCLE                @OZ27300
*                                                              @OZ27300
*  INCREMENT THE WRITE VERIFICATION CHECK RECORD (VALUE 1-128) @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
         L     R1,$AQSE            RE-LOAD OUR QSE ADDRESS     @OZ27300
         STCK  $SIDTIME            STORE TOD INTO HCT          @OZ27300
         MVC   QSESITIM,$SIDTIME    AND INTO OUR QSE           @OZ27300
         L     R1,$ESYSQSE         IS A $ESYS                  @OZ27300
         LTR   R1,R1                IN PROGRESS...             @OZ27300
         BZ    *+10                BR IF NO                    @OZ27300
         MVC   QSESITIM,$SIDTIME    ELSE SET TOD IN $ESYS QSE  @OZ27300
         SPACE 1                                               @OZ27300
         DROP  R1                  KILL QSE ADDRESSABILITY     @OZ27300
         SPACE 2                                               @OZ27300
         LA    R0,1                SET TO 1 IF OVERFLOW        @OZ27300
         ICM   R1,1,$WCHECK        GET CURRENT WRITE CHECK VAL @OZ27300
         BM    *+8                 BR IF OVERFLOW (GT 127)     @OZ27300
         LA    R0,1(,R1)           INCREMENT                   @OZ27300
         STC   R0,$WCHECK           WRITE CHECK                @OZ27300
         STC   R0,JQBCKVAL           VALUE                     @OZ27300
         SPACE 2                                               @OZ27300
         L     R0,$MASTER          MOVE HCT                    @OZ27300
         LA    R1,$SAVELEN          CHECKPOINT                 @OZ27300
         LA    R14,$SAVEBEG          VARIABLES                 @OZ27300
         LR    R15,R1                 FROM HCT TO              @OZ27300
         MVCL  R0,R14                  MASTER RECORD           @OZ27300
         EJECT                                                 @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*    WRITE ALL CHANGED RECORDS TO THE PRIMARY CKPT DATA SET    @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
         OI    JQBFLAG1,JQB1PRIM+JQB1WRT SET FOR PRIMARY WRITE @OZ27300
         SPACE 1                                               @OZ27300
         BAL   WB,KSETPAKS         SETUP PACKETS FOR PRIMARY   @OZ27300
         BAL   WB,KFIXMSTR         SETUP MASTER I/O AREA       @OZ27300
         BAL   R14,KWRITE          START THE PRIMARY WRITE     @OZ27300
         SPACE 1                                               @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
* PRIMARY WRITE SCHEDULED - NOTIFY WAITORS OF AVAILABLE TRACKS @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
         USING SSVT,WA             PROVIDE SSVT ADDRESSABILITY @OZ27300
         SPACE 1                                               @OZ27300
         L     WA,$SSVT            POINT TO SSVT               @OZ27300
         TM    $BLBFLAG,KBLBFILL   TGB FILLED...               @OZ27300
         BZ    KWTFINAL            BR IF NO                    @OZ27300
        $POST  $HASPECF,TRAK        ELSE POST JES2 PROCESSORS  @OZ27300
         L     R0,$SVTGECB         POINT TO SSSM'S ECB         @OZ27300
         SPACE 1                                               @OZ27300
KTRKTRY  LTR   R0,R0               ALREADY WAITING...          @OZ27300
         BM    KTRKXMP             BR IF YES TO XMPOST         @OZ27300
         L     R1,=A(X'7F000000')  GET POST CODE               @OZ27300
         CS    R0,R1,$SVTGECB      TRY QUICK POST              @OZ27300
         BE    KWTFINAL            BR IF SUCCESSFUL            @OZ27300
         B     KTRKTRY              ELSE TRY AGAIN             @OZ27300
         SPACE 1                                               @OZ27300
KTRKXMP  TM    $SVTGECB,X'20'      XMPOST ALREADY SCHEDULED... @OZ27300
         BO    KWTFINAL            BR IF YES                   @OZ27300
         OI    $SVTGECB,X'20'       ELSE SHOW XMPOST SCHEDULED @OZ27300
         LA    R1,$SVTGECB         PREPARE                     @OZ27300
         ST    R1,CKPMSG            CROSS-MEMORY               @OZ27300
         L     R1,$SVTGASC           POST                      @OZ27300
         ST    R1,CKPMSG+4            ELEMENT                  @OZ27300
         L     R1,CVTPTR               AND POST                @OZ27300
         LA    R1,CVTBRET-CVT(,R1)      WAITING                @OZ27300
         ST    R1,CKPMSG+8               ADDRESS               @OZ27300
        $XMPOST CKPMSG                    SPACE(S)             @OZ27300
         EJECT                                                 @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*     IF THIS IS THE FINAL MAS WRITE (MINHOLD EXPIRED)...      @OZ27300
*                                                              @OZ27300
*      1) SHOW QUEUES ARE ON DASD TO PROHIBIT ANY MORE UPDATES @OZ27300
*      2) DISABLE DUPLEXING AFTER FINAL PRIMARY WRITE          @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
KWTFINAL TM    CKPFLAG1,CKP1MAS    MULTI ACCESS SPOOL...       @OZ27300
         BZ    KWRPWAIT            BR IF NO                    @OZ27300
         TM    CKPSTQE+IPOST,X'80' HAS MINHOLD EXPIRED...      @OZ27300
         BZ    KWRPWAIT            BR IF NO                    @OZ27300
         TM    $SVSTUS,$SVSTIRV    NODAL WRMSTRT IN PROGRESS...@OZ27300
         BO    KWRPWAIT            BR IF YES (EXTEND CYCLE)    @OZ27300
         SPACE 1                                               @OZ27300
         OI    $STATUS,$QSONDA      ELSE PROHIBIT Q-CHANGES    @OZ27300
         MVC   CKPDPXCT,$ZEROS       AND DUPLEXING ON LAST WRT @OZ27300
         SPACE 1                                               @OZ27300
         OI    CKPFLAG1,CKP1FNLW   *** SHOW FINAL-WRITE ***    @OZ27300
         SPACE 1                                               @OZ27300
         DROP  WA                  KILL SSVT ADDRESSABILITY    @OZ27300
         SPACE 1                                               @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*       WAIT FOR PRIMARY CHECKPOINT WRITE TO COMPLETE          @OZ27300
*                                                              @OZ27300
*  THEN $POST CHECKPOINT COMPLETE BEFORE ANY DUPLEX OPERATION  @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
KWRPWAIT BAL   R14,KWRITE          WAIT FOR PRIMARY WRITE      @OZ27300
         SPACE 1                                               @OZ27300
        $POST  $HASPECF,CKPP       $POST PROCESSORS FOR        @OZ27300C
                                     CKPT WRITE COMPLETION     @OZ27300
         SPACE 1                                               @OZ27300
         L     R1,$MCONPCE         ALSO WAKE-UP                @OZ27300
         LTR   R1,R1                REMOTE CONSOLE             @OZ27300
         BZ    KCKPTIME              PROCESSOR                 @OZ27300
        $POST  (R1),WORK              (IF ANY)                 @OZ27300
         EJECT                                                 @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*    RESET PRINT/PUNCH TIMER (&CKPTIME) FOR NON-MAS SYSTEM     @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
KCKPTIME TM    CKPFLAG1,CKP1MAS    MULTI-ACCESS SPOOL...       @OZ27300
         BO    KDUPLEX             BR IF YES                   @OZ27300
         BAL   WA,KTTIMER           ELSE RESTART               @OZ27300
         L     R0,$CKPTIME           PRINT/PUNCH               @OZ27300
         BAL   WA,KSTIMER             CHECKPOINT INTERVAL      @OZ27300
         SPACE 1                                               @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*      IF DUPLEXING -- WRITE ALL RECORDS NOT YET DUPLEXED      @OZ27300
*                                                              @OZ27300
*    IF SHUTDOWN IN PROGRESS -- ENSURE DUPLEX AT PRIMARY LEVEL @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
KDUPLEX  TM    $STATUS,$DUPLEX     DUPLEXING...                @OZ27300
         BZ    KENDLOOP            BR IF NO                    @OZ27300
         TM    $STATUS,$SYSEXIT    SHUTDOWN IN PROGRESS...     @OZ27300
         BO    KWRDPLX             FORCE DUPLEX WRITE IF YES   @OZ27300
         LH    R1,CKPDPXCT          ELSE DECR DUPLEX CTR AND   @OZ27300
         BCT   R1,KAFTDPLX           BR IF NOT TIME TO DUPLEX  @OZ27300
         SPACE 1                                               @OZ27300
KWRDPLX  OI    JQBFLAG1,JQB1WRT     SHOW DUPLEX-               @OZ27300
         NI    JQBFLAG1,FF-JQB1PRIM  WRITE OPERATION           @OZ27300
         BAL   WB,KSETPAKS         SET JQB FOR DUPLEX WRITE    @OZ27300
         BAL   R14,KWRITE          WRITE THE DUPLEX CHECKPOINT @OZ27300
         LH    R1,$DPXRATE         GET PRIMARY/DUPLEX RATIO    @OZ27300
         SPACE 1                                               @OZ27300
KAFTDPLX STH   R1,CKPDPXCT         RESET DUPLEX COUNTER        @OZ27300
         SPACE 1                                               @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*   PRIMARY/DUPLEX WRITE(S) COMPLETE -- CONTINUE WRITE CYCLE   @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
KENDLOOP NI    JQBFLAG1,FF-JQB1WRT PRIM/DUPLEX WRITE(S) DONE   @OZ27300
         TM    CKPFLAG1,CKP1MAS    MULTI ACCESS SPOOL...       @OZ27300
         BO    KTFINAL             BR IF YES                   @OZ27300
         TM    $STATUS,$SYSEXIT    SHUTDOWN IN PROGRESS...     @OZ27300
         BZ    KWCYCLE             BR IF NO TO RE-CYCLE        @OZ27300
         TM    $EXECPCE,X'80'      XEQ SHUTDOWN COMPLETE...    @OZ27300
         BZ    KWCYCLE             BR IF NO TO RE-CYCLE        @OZ27300
         TM    $STATUS,$CKPTW      CKPT WRITE NEEDED...        @OZ74225
         BO    KWCYCLE             BRANCH IF YES TO RE-CYCLE   @OZ74225
         OI    $STATUS,$QSONDA     SHOW QUEUES ON DASD         @OZ27300
         B     KSHUTDWN            BR TO SHUTDOWN PROCESSING   @OZ27300
         SPACE 1                                               @OZ27300
KTFINAL  TM    CKPFLAG1,CKP1FNLW   WAS THIS THE FINAL WRITE... @OZ27300
         BZ    KWCYCLE             LOOP IF NO                  @OZ27300
         NI    CKPFLAG1,FF-CKP1FNLW  ELSE RESET FINAL-WRT BIT  @OZ27300
         EJECT                                                 @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*  MAS CKPT CYCLE COMPLETE -- RESET CKPT LOCK AND DASD RESERVE @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
         USING JQBCCWE,WD          PROVIDE CCWE ADDRESSABILITY @OZ27300
         SPACE 1                                               @OZ27300
KRSETLOK OI    JQBFLAG1,JQB1PRIM+JQB1WRT+JQB1LOCK  LOCK RESET  @OZ27300
         BAL   WB,KSETPAKS         ENSURE JQB SET FOR PRIMARY  @OZ27300
         LA    WD,JQBLOCK          START CCW CHAIN WITH        @OZ27300
         ST    WD,JQBSTART          LOCK RESET PACKET          @OZ27300
         MVC   JQBSEEK,$NUMDA              SET                 @OZ27300
         MVC   JQBSEEK+1(6),JQBCADDR        IOBSEEK            @OZ27300
         SPACE 1                                               @OZ27300
         MVC   JQBLKEY,$ZEROS      RESET KEY AND DATA          @OZ27300
         MVC   JQBLDATA,$ZEROS      FIELDS TO ZEROS            @OZ27300
         SPACE 1                                               @OZ27300
         MVC   JQBVERFY,KVERFY     INITIALIZE I/O VERIFY AREA  @OZ27300
         MVC   JQBERRCT,CKPRETRY    AND APPENDAGE RETRY CTR    @OZ27300
         LA    R1,PCEDADCT            START LOCK-RESET         @OZ27300
        $EXCP  (R1),TYPE=VR,WAIT=YES   OPERATION               @OZ27300
         BNO   KTRYLOCK            BR IF I/O ERROR             @OZ57896
         SPACE 1                                               @OZ27300
         CLC   JQBVERFY,KVERFY     INTERRUPTED I/O...          @OZ27300
         BE    KTRYLOCK            BR IF YES                   @OZ57896
         SPACE 1                                               @OZ27300
KRLOKOK  NI    JQBFLAG1,FF-JQB1WRT-JQB1LOCK-JQB1LOKD  RESET    @OZ27300
         SPACE 1                                               @OZ27300
        $RELEASE                   RELEASE CHECKPOINT RESERVE  @OZ35278
         SPACE 1                                               @OZ27300
         DROP  WD                  KILL CCWE ADDRESSABILITY    @OZ27300
         EJECT                                                 @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*        IF $PJES2 -- SHUTDOWN THE CHECKPOINT PROCESSOR        @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
         TM    $STATUS,$SYSEXIT    SHUTDOWN IN PROGRESS...     @OZ27300
         BZ    KDORMANT            BR IF NO                    @OZ27300
         TM    $EXECPCE,X'80'      XEQ SHUTDOWN COMPLETE...    @OZ27300
         BZ    KDORMANT            BR IF NO                    @OZ27300
         SPACE 1                                               @OZ27300
KSHUTDWN OI    $CKPTPCE,X'80'      SHOW CKPT SHUTDOWN COMPLETE @OZ27300
         OI    $COMMPCE,X'80'      TELL HASPCOMM WE'RE DONE    @OZ27300
         L     R1,$COMMPCE         GET HASPCOMM PCE ADDRESS    @OZ27300
        $POST  (R1),WORK            AND WAKE IT UP             @OZ27300
         SPACE 1                                               @OZ27300
KWT4EVR $WAIT  WORK                ENTER WAIT STATE            @OZ27300
         B     KWT4EVR             WAIT FOREVER                @OZ27300
         EJECT                                                 @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*    $WAIT FOR MINIMUM DORMANT INTERVAL (IF ANY)               @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
KDORMANT L     R0,$MINDORM         START TIMER FOR             @OZ27300
         BAL   WA,KSTIMER           MINIMUM DORMANT INTERVAL   @OZ27300
         TM    CKPSTQE+IPOST,X'80' IS TIMER GOING...           @OZ27300
         BO    KQSUSE              BR IF NO                    @OZ27300
        $WAIT  WORK                WAIT FOR MIN DORM INTERVAL  @OZ27300
         SPACE 1                                               @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*    WAIT FOR REMAINDER OF DORMANT INTERVAL (MAXDORM-MINDORM)  @OZ27300
*                                                              @OZ27300
* THIS PERIOD IS TERMINATED EARLY WHEN A QUEUE-REQUEST IS MADE @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
KQSUSE   L     R1,$EWQCKPT+4            BR IF ANY              @OZ27300
         CL    R1,PCEPCEB-PCEDSECT(,R1)  PCES WAITING          @OZ27300
         BNE   KREAD                      FOR $CKPT            @OZ27300
         SPACE 1                                               @OZ27300
         TM    MHASPECF+$EWBCKPT,$EWFCKPT   BR IF LINE-        @OZ27300
         BO    KREAD                         MANAGER REQUEST   @OZ27300
         SPACE 1                                               @OZ27300
         L     R1,$EWQTRAK+4            BR IF                  @OZ27300
         CL    R1,PCEPCEB-PCEDSECT(,R1)  JES2                  @OZ27300
         BNE   KREAD                      PROCESSORS           @OZ27300
         L     R1,$SSVT                    OR ADDRESS          @OZ27300
         TM    $SVTGECB-SSVT(R1),X'80'      SPACES WAITING     @OZ27300
         BO    KREAD                         FOR TRACKS        @OZ27300
         SPACE 1                                               @OZ27300
         TM    $MCONPCE,$MCONWAT   BR IF RMT CONSOLE PROCESSOR @OZ27300
         BO    KREAD                IS WAITING FOR WORK        @OZ27300
         SPACE 1                                               @OZ27300
         L     R0,$MAXDORM         START TIMER                 @OZ27300
         S     R0,$MINDORM          FOR REMAINING              @OZ27300
         BNM   KREAD                DORMANT INTERVAL           @OZ27300
         BAL   WA,KSTIMER            (MAXDORM-MINDORM)         @OZ27300
        $WAIT  CKPW,INHIBIT=NO     WAIT FOR $QSUSE OR TIMER    @OZ27300
         BAL   WA,KTTIMER          STOP TIMER                  @OZ27300
         B     KREAD               RETURN TO READ CYCLE        @OZ27300
         TITLE 'HASP CHECKPOINT PROCESSOR -- KREFRESH ROUTINE' @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*    KREFRESH -- THIS ROUTINE IS ENTERED WHEN THE PRIMARY      @OZ27300
*                CHECKPOINT DATA SET IS KNOWN TO BE BAD.       @OZ27300
*                                                              @OZ27300
*     THE CALLING ROUTINE HAS DETECTED ONE OF THE FOLLOWING... @OZ27300
*                                                              @OZ27300
*        1) I/O ERROR DURING CHANNEL PROGRAM TO OBTAIN THE     @OZ27300
*             CHECKPOINT LOCK AND READ THE MASTER/CHECK RCDS   @OZ27300
*                                                              @OZ27300
*        2) I/O ERROR ATTEMPTING TO READ CHANGED RECORDS       @OZ27300
*                                                              @OZ27300
*        3) PREVIOUS MEMBER FAILED DURING WRITE OPERATION      @OZ27300
*                                                              @OZ27300
*        4) I/O ERROR ATTEMPTING TO RESET LOCK WHEN ALL DONE   @OZ27300
*                                                              @OZ27300
*   IF CHECKPOINT DUPLEXING IS ENABLED, THEN THIS MEMBER WILL  @OZ27300
*   IMMEDIATELY STOP PROCESSING (ERRORS 1,2,3 ONLY). IT IS     @OZ27300
*   ASSUMED THAT THE DUPLEX DATA SET IS GOOD AT THIS TIME, AND @OZ27300
*   (IF THE ERROR WAS LOCAL) THIS MEMBER MIGHT DESTROY THE     @OZ27300
*   PRIMARY DATA SET IF AN ATTEMPT IS MADE TO RE-WRITE IT.     @OZ27300
*                                                              @OZ27300
*   IF NOT DUPLEXING, AN EXTRA ATTEMPT IS MADE TO OBTAIN THE   @OZ27300
*   CHECKPOINT LOCK STAND-ALONE (I.E., NO OTHER RECORDS IN     @OZ27300
*   THE I/O OPERATION). IF SUCCESSFUL AT GETTING THE LOCK,     @OZ27300
*   THEN AN ATTEMPT WILL BE MADE TO REFORMAT THE PRIMARY       @OZ27300
*   CHECKPOINT DATA SET FROM THE ACTUAL MASTER AND QUEUE AREAS @OZ27300
*   IN THIS MEMBER'S STORAGE.                                  @OZ27300
*                                                              @OZ27300
*   IN EITHER OF THE ABOVE CASES, THIS MEMBER STOPS PROCESSING @OZ27300
*   WHILE HOLDING THE CHECKPOINT LOCK (IF OBTAINED). ALL OTHER @OZ27300
*   MEMBERS MUST BE STOPPED AND A COMPLEX-WIDE WARM START      @OZ27300
*   MUST BE PERFORMED BECAUSE THE PRIMARY CHECKPOINT DATA SET  @OZ27300
*   IS NOW DOWNLEVEL.                                          @OZ27300
*                                                              @OZ27300
* NOTE - FOR ERROR 4, THIS ROUTINE IS ENTERED AT LABEL         @OZ57896
*        KTRYLOCK FROM ROUTINE KRSETLOK. THE SEARCH KEY IS     @OZ57896
*        SET TO THIS MEMBERS SYSTEM ID ($SIDBUSY) AND THE      @OZ57896
*        KEY AND DATA AREAS ARE SET TO ZEROS. IF THIS CHANNEL  @OZ57896
*        PROGRAM COMPLETES WITHOUT ERRORS, EITHER WE RESET     @OZ57896
*        THE LOCK WITH THE I/O OPERATION OR THE SEARCH KEY     @OZ57896
*        EQUAL FAILED BECAUSE THE LOCK NO LONGER CONTAINED     @OZ57896
*        OUR SYSTEM ID. IN EITHER CASE, THIS MEMBER ASSUMES    @OZ57896
*        THAT THE LOCK IS RESET.                               @OZ57896
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
         USING JQBCCWE,WD          PROVIDE CCWE ADDRESSABILITY @OZ27300
         SPACE 1                                               @OZ27300
KREFRESH CLC   $CHKPT,$CHKPT2      DUPLEX AVAILABLE...         @OZ27300
         BE    KTRYLOCK            BR IF NO                    @OZ27300
         LA    WA,K10               ELSE CRASH LEAVING A       @OZ27300
         B     KLOGOUT               GOOD DUPLEX CHECKPOINT    @OZ27300
         EJECT                                                 @OZ27300
KTRYLOCK OI    JQBFLAG1,JQB1LOCK+JQB1READ  GET-LOCK OPERATION  @OZ27300
         LA    WD,JQBLOCKV         START CCW CHAIN WITH        @OZ27300
         ST    WD,JQBSTART          LOCK VERIFY PACKET         @OZ27300
         MVC   JQBSEEK+1(6),JQBCADDR   SET IOBSEEK             @OZ27300
         LA    R1,JQBLOCK+(JQBCSET-JQBCCWE)  NEXT PACKET       @OZ27300
         ST    R1,JQBLTIC+4                   RESETS THE LOCK  @OZ27300
         LRA   R1,0(,R1)                       IF JQBLOCKV     @OZ27300
         STCM  R1,7,JQBLTNXT+CCWADDR            SUCCESSFUL     @OZ27300
         SPACE 1                                               @OZ27300
         DROP  WD                  KILL CCWE ADDRESSABILITY    @OZ27300
         SPACE 1                                               @OZ27300
         TM    JQBFLAG1,JQB1WRT+JQB1LOCK CALLED BY KRSETLOK... @OZ57896
         BNO   KTRYLOK1            BR IF NO, USE ZERO KEY      @OZ57896
         MVC   JQBKEY,$SIDBUSY     SEARCH FOR OUR SID          @OZ57896
         MVC   JQBLKEY,$ZEROS      RESET KEY AND DATA          @OZ57896
         MVC   JQBLDATA,$ZEROS      FIELDS TO ZEROS            @OZ57896
         B     KTRYCNT             BR TO GET RETRY COUNT       @OZ57896
         SPACE 1                                               @OZ57896
KTRYLOK1 MVI   JQBKEY,0            SEARCH FOR ZERO KEY         @OZ57896
         MVC   JQBLKEY(8),$BLANKS    IF ZERO KEY,              @OZ27300
         MVC   JQBLDATA(8),$BLANKS    SET OUR                  @OZ27300
         MVC   JQBLKEY(1),$SIDBUSY     SYSTEM ID               @OZ27300
         MVC   JQBLKEY+1(L'$SID),$SID   INTO LOCK              @OZ27300
         MVC   JQBLDATA(1),$SIDBUSY      RECORD KEY            @OZ27300
         MVC   JQBLDATA+1(L'$SID),$SID    AND DATA FIELDS      @OZ27300
         SPACE 1                                               @OZ57896
KTRYCNT  LH    WF,CKPRETRY         SET I/O ERROR RETRY CTR     @OZ57896
         SPACE 1                                               @OZ27300
KTRYAGN  MVC   JQBVERFY,KVERFY     INITIALIZE I/O VERIFICATION,@OZ27300
         MVC   JQBERRCT,CKPRETRY    APPENDAGE RETRY COUNTER,   @OZ27300
         MVI   JQBADKEY,FF           AND LOCK READ-IN AREAS    @OZ27300
         LA    R1,PCEDADCT            OBTAIN CHECKPOINT LOCK   @OZ27300
        $EXCP  (R1),TYPE=VR,WAIT=YES   (STAND ALONE)           @OZ27300
         BO    KTRYCHEK            BR IF I/O POSTED SUCCESSFUL @OZ27300
         BCT   WF,KTRYAGN           ELSE RETRY I/O             @OZ27300
         SPACE 1                                               @OZ27300
KTRYABND LA    WA,K11              ALL RETRIES FAILED --       @OZ27300
         TM    JQBFLAG1,JQB1WRT+JQB1LOCK  K11 = CAN'T FORMAT   @OZ27300
         BNO   KLOGOUT                           W/O LOCK      @OZ27300
         LA    WA,K12                     K12 = CKPT GOOD, BUT @OZ27300
         B     KLOGOUT                           LOCK DAMAGED  @OZ27300
         SPACE 1                                               @OZ27300
KTRYCHEK CLC   JQBVERFY,KVERFY     INTERRUPTED I/O...          @OZ27300
         BE    KTRYABND            BR IF YES TO ABEND          @OZ27300
         NI    JQBFLAG1,FF-JQB1READ  ELSE RESET READ BIT       @OZ27300
         TM    JQBFLAG1,JQB1WRT+JQB1LOCK  CALLED BY KRSETLOK...@OZ27300
         BNO   KTRYTKEY            BR IF NO                    @OZ27300
*              THIS LINE DELETED BY APAR OZ57896               @OZ57896
*              THIS LINE DELETED BY APAR OZ57896               @OZ57896
         B     KRLOKOK              ELSE ASSUME GOOD AND RESET @OZ27300
         SPACE 1                                               @OZ27300
KTRYTKEY NI    JQBFLAG1,FF-JQB1LOCK  LOCK OPERATION FINISHED   @OZ27300
         CLI   JQBADKEY,FF         HAVE WE OBTAINED LOCK...    @OZ27300
         BE    KTRYFMT             BR TO FORMAT IF YES         @OZ27300
         CLC   JQBADKEY,$SIDBUSY    ELSE WAS LOCK-HOLDER US... @OZ27300
         BNE   KTRYABND            BR TO ABEND IF NO           @OZ27300
         SPACE 1                                               @OZ27300
KTRYFMT  BAL   R14,KFORMAT         REFORMAT PRIMARY CHECKPOINT @OZ27300
         LA    WA,K14              SHUTDOWN WITH GOOD (BUT     @OZ27300
         B     KLOGOUT              DOWN-LEVEL) PRIMARY        @OZ27300
         TITLE 'HASP CHECKPOINT PROCESSOR -- KLOGOUT ROUTINE'  @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*    KLOGOUT -- LOG OUT CHECKPOINT DATA AND SHUTDOWN JES2      @OZ27300
*                                                              @OZ27300
*    ON ENTRY - WA = ADDRESS OF JES2 $ERROR MACRO EXPANSION    @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
KLOGOUT  STM   R14,R15,$DOUBLE     SAVE REGISTERS              @OZ42638
         STM   R0,R1,$DWORK         FOR DE-BUGGING             @OZ42638
         MVC   CKPMSG,KDUMPMSG     MOVE BASE MSG TEXT          @OZ42638
         MVC   KDUMPCOD+CKPMSG,KERRCODE(WA)  AND INSERT CODE   @OZ27300
       $$WTO   CKPMSG              TELL OPERATOR               @OZ27300
         L     R1,$MASTER          DUMP THE ACTUAL             @OZ27300
         ST    R1,CKPMSG            MASTER RECORD              @OZ27300
         AL    R1,$MASTERL           FROM THIS                 @OZ27300
         BCTR  R1,0                   MEMBER'S                 @OZ27300
         ST    R1,CKPMSG+4             STORAGE                 @OZ27300
         L     R1,$JOBQPTR         DUMP                        @OZ27300
         ST    R1,CKPMSG+8          THE                        @OZ27300
         LH    R0,$JOBRECN           ACTUAL                    @OZ27300
         AH    R0,$JOTRECN            JOB                      @OZ27300
         SLL   R0,12                   QUEUE                   @OZ27300
         ALR   R1,R0                    AND                    @OZ27300
         BCTR  R1,0                      JOT                   @OZ27300
         ST    R1,CKPMSG+12               STORAGE              @OZ27300
         OI    CKPMSG+12,X'80'     TERMINATE SDUMP LIST        @OZ27300
         MVC   KDHSYSID,$SID         SET SYSTEM ID             @OZ27300
         MVC   KDHCODE,KERRCODE(WA)   AND $ERROR CODE          @OZ27300
         PUSH  PRINT               SUPPRESS SDUMP              @OZ27300
         PRINT NOGEN                EXPANSION                  @OZ27300
         SPACE 1                                               @OZ27300
         SDUMP HDRAD=KDHEADER,LIST=CKPMSG  LOGOUT CHECKPOINT   @OZ27300
         SPACE 1                                               @OZ27300
         POP   PRINT               RESET PRINT OPTIONS         @OZ27300
         LM    R14,R15,$DOUBLE     RESTORE REGISTERS           @OZ42638
         LM    R0,R1,$DWORK         FOR DE-BUGGING             @OZ42638
         BR    WA                  BR TO $ERROR                @OZ27300
         SPACE 2                                               @OZ27300
KXX     $ERROR                     DUMMY $ERROR MACRO EXPANSION@OZ27300
KERRCODE EQU   *-4-KXX,4           ERROR CODE OFFSET           @OZ27300
         SPACE 2                                               @OZ27300
KDHEADER DC    AL1(KDHLEN)         LENGTH OF DUMP HEADER       @OZ27300
         DC    C'DUMP OF JES2 CHECKPOINT DATA. '               @OZ27300
         DC    C'SYSTEM=****. $ERROR CODE=****'                @OZ27300
KDHSYSID EQU   *-22,4              SYSTEM ID  INSERT           @OZ27300
KDHCODE  EQU   *-4,4               ERROR CODE INSERT           @OZ27300
KDHLEN   EQU   *-KDHEADER-1        DUMP HEADER LENGTH          @OZ27300
        TITLE 'HASP CHECKPOINT PROCESSOR -- KWRITE SUBROUTINE' @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*    KWRITE -- SUBROUTINE TO WRITE ALL CHANGED RECORDS TO      @OZ27300
*              THE PRIMARY OR DUPLEX CHECKPOINT DATA SET       @OZ27300
*                                                              @OZ27300
*     ON ENTRY  R14 = RETURN ADDRESS                           @OZ27300
*                                                              @OZ27300
*     ON EXIT   R0-WD,WF,R10,R15 = UNPREDICTABLE               @OZ27300
*                                                              @OZ27300
* NOTE- THIS SUBROUTINE HAS SPECIAL PROCESSING FOR WRITES TO   @OZ27300
*       THE PRIMARY CHECKPOINT DATA SET. WHEN ENTERED THE      @OZ27300
*       FIRST TIME FOR PRIMARY WRITES, IT INITIATES THE I/O    @OZ27300
*       AND IMMEDIATELY RETURNS. WHEN RE-ENTERED DURING A      @OZ27300
*       WRITE TO THE PRIMARY, IT WAITS FOR COMPLETION OF THE   @OZ27300
*       I/O AND THEN PROCEEDS AS WITH WRITES TO THE DUPLEX     @OZ27300
*       CKPT DATA SET. IF AN I/O ERROR OCCURS, THE KFORMAT     @OZ27300
*       SUBROUTINE IS CALLED. IF CONTROL RETURNS (FORMAT OK),  @OZ27300
*       THEN WE RETURN AS IF THE ORIGINAL WRITE SUCCEEDED.     @OZ27300
*                                                              @OZ27300
*     - FOR DUPLEX WRITES -- THE CONTROL BYTES IN THE ACTUAL   @OZ27300
*       AREA WILL RETAIN THE DUPLEX BIT (X'80') UNTIL THE      @OZ27300
*       DUPLEX WRITE IS SUCCESSFUL. KAFTERIO WILL RESET THESE  @OZ27300
*       BITS IF THE RECORD HAS NOT BEEN FURTHER UPDATED. THE   @OZ27300
*       NEXT PRIMARY WRITE WILL UPDATE THE BYTES ON DASD.      @OZ27300
*                                                              @OZ27300
*     - WHEN THE WRITE IS SUCCESSFULLY COMPLETED, IF THE       @OZ27300
*       WRITE WAS TO THE DUPLEX, OR IF THE WRITE WAS TO THE    @OZ27300
*       PRIMARY BUT A DUPLEX WRITE IS NOT TO BE SCHEDULED,     @OZ27300
*       THE MASTER RECORD I/O AREA IS PAGE-RELEASED.           @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
KWRITE   ST    R14,CKPSAVE1        SAVE RETURN ADDRESS         @OZ27300
         LH    WF,CKPRETRY         SET I/O ERROR RETRY COUNTER @OZ27300
         CLI   JQBECBCC,0          I/O ALREADY STARTED...      @OZ27300
         BE    KWRWAIT             BR IF YES (2ND ENTRY)       @OZ27300
         SPACE 1                                               @OZ27300
         LA    R1,JQBMSTR          START CHANNEL PROGRAM       @OZ27300
         ST    R1,JQBSTART          WITH MASTER RECORD PACKET  @OZ27300
         MVC   JQBSEEK+1(6),JQBCADDR-JQBCCWE(R1)  SET IOBSEEK  @OZ27300
         MVI   JQBMSTR+(JQBCRW-JQBCCWE)+CCWOP,WRITE+DATA       @OZ27300
         SPACE 1                                               @OZ27300
         BAL   R14,KBLDCCWS        BUILD ENTIRE CCW CHAIN      @OZ27300
         SPACE 1                                               @OZ27300
         LH    WF,CKPRETRY         RELOAD I/O ERROR RETRY CTR  @OZ27300
         TM    JQBFLAG1,JQB1PRIM   PRIMARY WRITE...            @OZ27300
         BZ    KWR$EXCP            BR IF NO                    @OZ27300
         L     R0,$MASTERI          ELSE COPY                  @OZ27300
         L     R1,$MASTERL           THE MASTER                @OZ27300
         L     R14,$MASTER            RECORD FROM              @OZ27300
         LR    R15,R1                  THE ACTUAL AREA         @OZ27300
         MVCL  R0,R14                   TO THE I/O AREA        @OZ27300
         EJECT                                                 @OZ27300
KWR$EXCP MVC   CKPLIRCT,$LIRCT     SET LOST-INTERRUPT RETRY CTR@OZ27300
         MVC   JQBVERFY,KVERFY     INIT I/O VERIFICATION AREA  @OZ27300
         LA    R1,PCEDADCT         START WRITE                 @OZ27300
        $EXCP  (R1),TYPE=VR         OPERATION                  @OZ27300
         TM    JQBFLAG1,JQB1PRIM   PRIMARY WRITE...            @OZ27300
         BZ    KWRWAIT             BR IF NO                    @OZ27300
         B     KWRETURN             ELSE RETURN (WILL RE-ENTER)@OZ27300
         SPACE 1                                               @OZ27300
KWRETRY1 MVC   CKPLIRCT,$LIRCT     SET I/O ERROR RETRY CTR AGN @OZ27300
         SPACE 1                                               @OZ27300
KWRETRY2 MVC   JQBVERFY,KVERFY     RE-INIT I/O VERIFY AREA     @OZ27300
         LA    R1,PCEDADCT         RETRY THE WRITE             @OZ27300
        $EXCP  (R1),TYPE=VR         OPERATION                  @OZ27300
         SPACE 1                                               @OZ27300
KWRWAIT $WAIT  IO                  WAIT FOR WRITE TO COMPLETE  @OZ27300
         TM    JQBECBCC,X'7F'      TEST I/O STATUS             @OZ27300
         BO    KWRCHEK             BR IF POSTED SUCCESSFUL     @OZ27300
         BZ    KWRWAIT             BR IF NOT COMPLETE          @OZ27300
         SPACE 1                                               @OZ27300
        $IOERROR (WE)              ISSUE I/O ERROR MESSAGE     @OZ27300
         BCT   WF,KWRETRY1         ATTEMPT RETRY               @OZ27300
         SPACE 1                                               @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*   I/O ERROR DURING WRITE -- PROHIBIT Q-UPDATES AND REFORMAT  @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
         OI    $STATUS,$QSONDA     *** PROHIBIT Q-UPDATES ***  @OZ27300
         SPACE 1                                               @OZ27300
         BAL   R14,KFORMAT         REFORMAT PRIMARY/DUPLEX     @OZ27300
         TM    CKPFLAG1,CKP1FNLW   WAS THIS FINAL WRITE...     @OZ27300
         BO    KWROK               BR IF YES (FORMAT OK)       @OZ27300
         SPACE 1                                               @OZ27300
         NI    $STATUS,FF-$QSONDA   ELSE RE-ALLOW Q-UPDATES    @OZ27300
        $POST  $HASPECF,CKPT         AND POST ANY CKPT WAITORS @OZ27300
         B     KWROK               BR TO RETURN (FORMAT OK)    @OZ27300
         EJECT                                                 @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
* IF WRITE COMPLETED -- FREE I/O RECORDS UNLESS DUPLEX FOLLOWS @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
KWRCHEK  BAL   WB,KIOVERFY         INTERRUPTED I/O...          @OZ27300
         B     KWRETRY2            RETRY IF YES          +0    @OZ27300
         SPACE 1                                               @OZ27300
KWROK    BAL   R14,KAFTERIO        UN-FIX I/O RECORDS    +4    @OZ27300
         TM    $STATUS,$DUPLEX     DUPLEXING...                @OZ27300
         BZ    KWRLSE              BR IF NO                    @OZ27300
         TM    JQBFLAG1,JQB1PRIM   JUST WROTE PRIMARY...       @OZ27300
         BZ    KWRLSE              BR IF NO                    @OZ27300
         TM    $STATUS,$SYSEXIT    SHUTDOWN IN PROGRESS...     @OZ39685
         BO    KWRETURN            YES..KEEP MASTER I/O AREA   @OZ39685
         CLC   =Y(1),CKPDPXCT      FINAL PRIMARY..KEEP I/O     @OZ39685
         BE    KWRETURN              FIXED IF DUPLEX FOLLOWS   @OZ27300
         SPACE 1                                               @OZ27300
KWRLSE  $PGSRVC FREE,$MASTERI,$MASTERL,RELEASE=Y RLSE MSTR I/O @OZ27300
         SPACE 1                                               @OZ27300
KWRETURN L     R14,CKPSAVE1        RESTORE RETURN ADDRESS      @OZ27300
         BR    R14                  AND RETURN TO CALLER       @OZ27300
      TITLE 'HASP CHECKPOINT PROCESSOR -- KBLDCCWS SUBROUTINE' @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*    KBLDCCWS -- SUBROUTINE TO SETUP CHECKPOINT I/O AREA WITH  @OZ27300
*                PAGES TO READ/WRITE AND TO BUILD THE CCW      @OZ27300
*                CHAIN TO PERFORM THE OPERATION.               @OZ27300
*                                                              @OZ27300
*     ON ENTRY  R14 = RETURN ADDRESS.   JQBFLAG1 MUST BE SET.  @OZ27300
*                                                              @OZ27300
*     ON EXIT   R0-WD,WF,R10,R15 = UNPREDICTABLE.              @OZ27300
*                                                              @OZ27300
* NOTE-  RECORDS AFFECTED ARE DETERMINED BY...                 @OZ27300
*                                                              @OZ27300
*   PRIMARY READ  - OUR-BIT ($SIDAFF) IN I/O AREA CTL BYTES    @OZ27300
*   PRIMARY WRITE - OUR-BIT ($SIDAFF) IN ACTUAL CTL BYTES      @OZ27300
*   DUPLEX WRITE  - HI-BIT  (X'80')   IN I/O AREA CTL BYTES    @OZ27300
*                                                              @OZ27300
*         ** ABOVE BITS ARE RESET BEFORE RETURNING **          @OZ27300
*                                                              @OZ27300
* ALL CHAINS TERMINATE WITH I/O VERIFICATION PACKET (JQBVERP). @OZ27300
*   IN ADDITION, THE CHECK-RECORD WRITE PACKET (JQBCHECK)      @OZ27300
*      PRECEEDS JQBVERP FOR PRIMARY/DUPLEX WRITE CHAINS.       @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
         USING JQBCCWE,WD          PROVIDE CCWE ADDRESSABILITY @OZ27300
         SPACE 1                                               @OZ27300
KBLDCCWS ST    R14,CKPSAVE2        SAVE RETURN ADDRESS         @OZ27300
         L     WC,$CTLBIO          USE THE I/O AREA CTL BYTES  @OZ27300
         SLR   R0,R0               USE 'OUR' BIT FOR           @OZ27300
         IC    R0,$SIDAFF           TESTING CTL BYTES          @OZ27300
         TM    JQBFLAG1,JQB1READ   PRIMARY READ...             @OZ27300
         BO    KBSET               BR IF YES                   @OZ27300
         TM    JQBFLAG1,JQB1WRT+JQB1PRIM  PRIMARY WRITE...     @OZ27300
         BNO   KBDPLX              BR IF NO                    @OZ27300
         L     WC,$CTLB             ELSE USE ACTUAL CTL BYTES  @OZ27300
         B     KBSET               BR TO CONTINUE              @OZ27300
         SPACE 1                                               @OZ27300
KBDPLX   LA    R0,X'80'            USE HI-BIT FOR DUPLEX TESTS @OZ27300
         SPACE 1                                               @OZ27300
KBSET    STC   R0,CKPBITON         SAVE TEST-VALUE             @OZ27300
         LA    R1,FF               SAVE                        @OZ27300
         SLR   R1,R0                COMPLIMENTED               @OZ27300
         STC   R1,CKPBITOF           TEST-VALUE                @OZ27300
         LA    WB,JQBMSTR          'PREVIOUS' = MASTER PACKET  @OZ27300
         LA    WD,JQBCCWS          'CURRENT'  = 1ST Q-PACKET   @OZ27300
         L     R1,$JOBQIO          POINT TO I/O AREA RECORDS   @OZ27300
         LH    WF,$JOBRECN         NUMBER OF                   @OZ27300
         AH    WF,$JOTRECN          Q-RECORDS                  @OZ27300
         LA    R10,CKPFIXL         POINT TO FIX LIST           @OZ27300
         SPACE 1                                               @OZ27300
KBLOOP   IC    WA,CKPBITON         THIS RECORD AFFECTED...     @OZ27300
         EX    WA,KBLDTM           -- TM 0(WC),CKPBITON...     @OZ27300
         BO    KBFIXT              BR IF YES                   @OZ27300
         EJECT                                                 @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*  IF 'DEBUG', ENSURE UNFLAGGED PAGE IS UNCHANGED (WRITE ONLY) @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
         TM    $RUNOPTS,$DEBUG     DEBUG MODE...               @OZ27300
         BZ    KBLDINCR            BR IF NO                    @OZ27300
         TM    JQBFLAG1,JQB1WRT+JQB1PRIM  PRIMARY WRITE...     @OZ27300
         BNO   KBLDINCR            BR IF NO                    @OZ27300
         LR    WA,R1               SAVE RECORD ADDRESS         @OZ27300
         LR    R0,R1               ADDR AND LENGTH OF SAVED    @OZ27300
         L     R1,=F'4096'          RECORD IN I/O AREA         @OZ27300
         LR    R14,R0              ADDR AND                    @OZ27300
         LR    R15,R1               LENGTH OF                  @OZ27300
         SL    R14,$JOBQIO           RECORD IN                 @OZ27300
         AL    R14,$JOBQPTR           ACTUAL AREA              @OZ27300
         CLCL  R0,R14              HAS RECORD BEEN CHANGED...  @OZ27300
         LR    R1,WA               (RESTORE RECORD ADDRESS)    @OZ27300
         BE    KBLDINCR            BR IF UNCHANGED             @OZ27300
         SPACE 1                                               @OZ27300
         LA    WA,K05              ABEND IF CHANGED RECORD     @OZ27300
         B     KLOGOUT              NOT FLAGGED FOR CKPT       @OZ27300
         SPACE 1                                               @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*      IF RECORD IS NOT PAGE-FIXED, FIX ITS I/O AREA PAGE      @OZ27300
*         AND (IF WRITE) COPY THE ACTUAL RECORD TO IT          @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
KBFIXT   CLI   0(R10),0            PAGE ALREADY FIXED...       @OZ27300
         BNE   KBCHAIN             BR IF YES                   @OZ27300
         MVI   0(R10),FF            ELSE SHOW PAGE NOW FIXED   @OZ27300
         LA    R2,CKPECB                       PAGE-FIX RECORD @OZ27300
        $PGSRVC FIX,(R1),=F'4096',(R2),RELEASE=Y  IN I/O AREA  @OZ27300
         SPACE 1                                               @OZ27300
         TM    JQBFLAG1,JQB1WRT    WRITE OPERATION...          @OZ27300
         BZ    KBCHAIN             BR IF NO                    @OZ27300
         LR    WA,R1               SAVE RECORD ADDRESS         @OZ27300
         LR    R0,R1               ADDR AND LENGTH OF          @OZ27300
         L     R1,=F'4096'          RECORD IN I/O AREA         @OZ27300
         LR    R14,R0              ADDR AND                    @OZ27300
         LR    R15,R1               LENGTH OF                  @OZ27300
         SL    R14,$JOBQIO           RECORD IN                 @OZ27300
         AL    R14,$JOBQPTR           ACTUAL AREA              @OZ27300
         MVCL  R0,R14              MOVE RECORD TO I/O AREA     @OZ27300
         LR    R1,WA               RESTORE RECORD ADDRESS      @OZ27300
         EJECT                                                 @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*        ADD NEW READ/WRITE CCW TO CHAIN                       @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
KBCHAIN  LRA   WA,0(,R1)           SET 'REAL' ADDRESS OF I/O   @OZ27300
         ST    WA,JQBCRW            AREA PAGE INTO CCW         @OZ27300
         MVI   JQBCRW+CCWOP,READ+DATA  SET FOR READ OPERATION  @OZ27300
         TM    JQBFLAG1,JQB1WRT    IS THIS WRITE...            @OZ27300
         BZ    *+8                 BR IF NO                    @OZ27300
         MVI   JQBCRW+CCWOP,WRITE+DATA  ELSE RESET CCW OP-CODE @OZ27300
         BAL   WA,KCCWADJ          CHAIN CURRENT TO PREVIOUS   @OZ27300
         CLC   JQBSTART,$ZEROS     ANY PREVIOUS CCWS...        @OZ27300
         BNE   KBNEWPRV            BR IF YES                   @OZ27300
         ST    WD,JQBSTART          ELSE START THE CHAIN HERE  @OZ27300
         MVC   JQBSEEK+1(6),JQBCADDR  AND SET IOBSEEK          @OZ27300
         SPACE 1                                               @OZ27300
KBNEWPRV LR    WB,WD               SET 'PREVIOUS' TO 'CURRENT' @OZ27300
         NC    0(1,WC),CKPBITOF    RESET CONTROL-BYTE BIT      @OZ27300
         SPACE 1                                               @OZ27300
KBLDINCR AL    R1,=F'4096'         NEXT PAGE IN IO AREA        @OZ27300
         LA    WC,1(,WC)           NEXT CONTROL BYTE           @OZ27300
         LA    WD,JQBCNEXT         NEXT CCW PACKET  (CURRENT)  @OZ27300
         LA    R10,1(,R10)         NEXT FIX-LIST BYTE          @OZ27300
         BCT   WF,KBLOOP           LOOP FOR ALL RECORDS        @OZ27300
         SPACE 1                                               @OZ27300
         TM    JQBFLAG1,JQB1WRT    WRITE OPERATION...          @OZ27300
         BZ    KBVERP              BR IF NO                    @OZ27300
         LA    WD,JQBCHECK         POINT TO CHECK RCD PACKET   @OZ27300
         MVI   JQBCRW+CCWOP,WRITE+DATA   SET FOR WRITE         @OZ27300
         BAL   WA,KCCWADJ          CHAIN THIS TO PREV. PACKET  @OZ27300
         LR    WB,WD               UPDATE 'PREVIOUS'           @OZ27300
         SPACE 1                                               @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*    ADD I/O VERIFICATION PACKET TO END OF CHANNEL PROGRAM     @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
         DROP  WD                  PROVIDE ADDRESSABILITY      @OZ27300
         USING JQBCCWE,WB           ON LAST CCW PACKET         @OZ27300
         SPACE 1                                               @OZ27300
KBVERP   LA    R1,JQBVERP          TERMINATE CHAIN             @OZ27300
         ST    R1,JQBCTIC+4         WITH A TIC TO THE          @OZ27300
         LRA   R1,0(,R1)             I/O VERIFICATION          @OZ27300
         STCM  R1,7,JQBCTNXT+CCWADDR  PACKET                   @OZ27300
         L     R14,CKPSAVE2        RESTORE RETURN ADDRESS      @OZ27300
         BR    R14                  AND RETURN TO CALLER       @OZ27300
         SPACE 1                                               @OZ27300
KBLDTM   TM    0(WC),*-*           **EXECUTE**  RCD AFFECTED...@OZ27300
         SPACE 1                                               @OZ27300
         DROP  WB                  KILL CCWE ADDRESSABILITY    @OZ27300
      TITLE 'HASP CHECKPOINT PROCESSOR -- KAFTERIO SUBROUTINE' @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*    KAFTERIO -- SUBROUTINE TO PAGE-RLSE (FREE IF DEBUG)       @OZ27300
*                I/O AREA FIXED RECORDS AS SHOWN IN CKPFIXL.   @OZ27300
*                ALSO MOVES RECORDS TO ACTUAL AREA AFTER READ. @OZ27300
*                                                              @OZ27300
*     ON ENTRY  R14 = RETURN ADDRESS                           @OZ27300
*                                                              @OZ27300
*     ON EXIT   R1-WD,WF,R10,R14,R15 = UNPREDICTABLE           @OZ27300
*                                                              @OZ27300
* NOTE- RCDS ARE NOT PAGE-FREE'D IF DUPLEX WRITE FOLLOWS IMMED @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
KAFTERIO ST    R14,CKPSAVE2        SAVE RETURN ADDRESS         @OZ27300
         L     R10,$CTLBIO         POINT TO I/O AREA CTL BYTES @OZ27300
         L     WA,$JOBQIO          POINT TO I/O Q-AREA         @OZ27300
         L     WB,=F'4096'         GET LENGTH OF Q-RCD         @OZ27300
         LA    WC,CKPFIXL          POINT TO FIX LIST           @OZ27300
         L     WD,$JOBQPTR         POINT TO ACTUAL Q-AREA      @OZ27300
         LH    WF,$JOBRECN         NUMBER OF                   @OZ27300
         AH    WF,$JOTRECN          Q-RECORDS                  @OZ27300
         TM    JQBFLAG1,JQB1PRIM+JQB1WRT  PRIMARY WRITE...     @OZ38575
         BNO   KAFTLOOP                   BR IF NO             @OZ38575
         TM    $STATUS,$DUPLEX     DUPLEXING...                @OZ38575
         BZ    KAFTLOOP            BR IF NO                    @OZ38575
         CLC   =Y(1),CKPDPXCT       ELSE IF TIME TO DUPLEX...  @OZ27300
         BER   R14                   RETURN LEAVING RCDS FIXED @OZ27300
         SPACE 1                                               @OZ27300
KAFTLOOP CLI   0(WC),0             RECORD FIXED FOR I/O...     @OZ27300
         BE    KAFTINCR            BR IF NO                    @OZ27300
         TM    JQBFLAG1,JQB1READ   RECORD JUST READ...         @OZ27300
         BZ    KAFTFREE            BR IF NO                    @OZ27300
         SPACE 1                                               @OZ27300
        $PGSRVC RLSE,(WD),(WB)     ENSURE RCD DOESN'T PAGE-IN  @OZ27300
         SPACE 1                                               @OZ27300
         LR    R0,WD               MOVE NEWLY READ             @OZ27300
         LR    R1,WB                Q-RCD FROM THE             @OZ27300
         LR    R14,WA                I/O AREA                  @OZ27300
         LR    R15,WB                 TO THE                   @OZ27300
         MVCL  R0,R14                  ACTUAL Q-AREA           @OZ27300
         SPACE 1                                               @OZ27300
         TM    $STATUS,$DUPLEX     DUPLEXING...                @OZ27300
         BZ    KAFTFREE            BR IF NO                    @OZ27300
         TM    0(R10),X'80'         ELSE LEAVE RECORD FIXED IF @OZ27300
         BO    KAFTINCR              ALSO SCHEDULED FOR DUPLEX @OZ27300
         EJECT                                                 @OZ27300
KAFTFREE MVI   0(WC),0             SHOW PAGE NO LONGER FIXED   @OZ27300
         TM    $RUNOPTS,$DEBUG     DEBUG MODE...               @OZ27300
         BZ    KAFTRLS             BR IF NO                    @OZ27300
        $PGSRVC FREE,(WA),(WB)      ELSE JUST FREE PAGE        @OZ27300
         B     KAFTINCR              AND BR TO CONTINUE        @OZ27300
         SPACE 1                                               @OZ27300
KAFTRLS $PGSRVC FREE,(WA),(WB),RELEASE=Y  FREE+RLSE PAGE       @OZ27300
         SPACE 1                                               @OZ27300
KAFTINCR LA    WC,1(,WC)           NEXT FIX-LIST BYTE          @OZ27300
         LA    R10,1(,R10)         NEXT I/O AREA CTL BYTE      @OZ27300
         ALR   WA,WB               NEXT I/O AREA RECORD        @OZ27300
         ALR   WD,WB               NEXT ACTUAL Q-RECORD        @OZ27300
         BCT   WF,KAFTLOOP         LOOP FOR ALL RECORDS        @OZ27300
         SPACE 1                                               @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*    IF DUPLEX JUST WRITTEN -- RESET BITS IN ACTUAL CTL BYTES  @OZ27300
*   SO THAT SUBSEQUENT PRIMARY WRITE WILL UPDATE BYTES ON DASD @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
         TM    JQBFLAG1,JQB1PRIM   JUST DUPLEXED...            @OZ27300
         BO    KAFTEXIT            BR IF NO                    @OZ27300
         L     WC,$CTLB            POINT TO ACTUAL CTL BYTES   @OZ27300
         LH    WF,$JOBRECN         NUMBER OF                   @OZ27300
         AH    WF,$JOTRECN          Q-RECORDS                  @OZ27300
         IC    R10,$SIDAFF         THIS MEMBER'S ID            @OZ27300
         SPACE 1                                               @OZ27300
KAFTDLUP TM    0(WC),X'80'         CTL-BYTE HAVE DUPLEX BIT... @OZ27300
         BZ    KAFTDINC            BR IF NO                    @OZ27300
         EX    R10,KBLDTM          ANY NEW UPDATES TO RECORD...@OZ27300
         BO    KAFTDINC            BR IF YES (LEAVE DPLX BIT)  @OZ27300
         NI    0(WC),FF-X'80'       ELSE SHOW RECORD HAS BEEN  @OZ27300*
                                     SUCCESSFULLY DUPLEXED     @OZ27300
KAFTDINC LA    WC,1(,WC)           NEXT CTL-BYTE               @OZ27300
         BCT   WF,KAFTDLUP         CONTINUE LOOP               @OZ27300
         SPACE 2                                               @OZ27300
KAFTEXIT L     R14,CKPSAVE2        LOAD RETURN ADDRESS         @OZ27300
         BR    R14                  AND RETURN TO CALLER       @OZ27300
       TITLE 'HASP CHECKPOINT PROCESSOR -- KFORMAT SUBROUTINE' @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*    KFORMAT -- SUBROUTINE TO RE-FORMAT THE PRIMARY/DUPLEX     @OZ27300
*               CHECKPOINT DATA SET                            @OZ27300
*                                                              @OZ27300
*     ON ENTRY  R14 = RETURN ADDRESS                           @OZ27300
*                                                              @OZ27300
*     ON EXIT   R0-WD,WF,R10,R14,R15 = UNPREDICTABLE           @OZ27300
*                                                              @OZ27300
* NOTE - IT IS ASSUMED THAT ALL Q-UPDATES DURING THIS FORMAT   @OZ27300
*        HAVE BEEN PREVENTED BY THE CALLER (I.E., $QSONDA=1)   @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
KFORMAT  ST    R14,CKPSAVE2        SAVE RETURN ADDRESS         @OZ27300
         TM    JQBFLAG1,JQB1FMT    BR IF JQB ALREADY           @OZ27300
         BO    KNONFMT              SET FOR FORMAT-WRITE       @OZ27300
         IC    R10,$SIDAFF         OBTAIN OUR-SYSTEM           @OZ27300
         LCR   R10,R10              BIT (COMPLEMENTED          @OZ27300
         BCTR  R10,0                 FOR RESETTING IT)         @OZ27300
         TM    JQBFLAG1,JQB1PRIM   IS THIS PRIMARY CKPT...     @OZ59949
         BO    *+8                 YES, USE PRIMARY MASK       @OZ59949
         LA    R10,FF-X'80'        SET MASK FOR DUPLEX         @OZ59949
         L     WC,$JOBQIO          POINT TO I/O AREA Q-RCDS    @OZ27300
         LH    WD,$JOBRECN         GET NUMBER OF               @OZ27300
         AH    WD,$JOTRECN          Q-RECORDS                  @OZ27300
         LA    WF,1(,WD)           COUNT OF Q-RCDS PLUS MASTER @OZ27300
         SLL   WD,12               LENGTH OF Q'S (NUM-RCDS*4K) @OZ27300
         SPACE 1                                               @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*        PAGE FIX AND MOVE ALL QUEUE RECORDS TO I/O AREA       @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
         LA    R2,CKPECB           PAGE-FIX ALL I/O            @OZ27300
        $PGSRVC FIX,(WC),(WD),(R2)  AREA Q-RECORDS             @OZ27300
         SPACE 1                                               @OZ27300
         L     R14,$JOBQPTR        GET ADDRESS AND             @OZ27300
         LR    R15,WD               LENGTH OF ACTUAL Q-AREA    @OZ27300
         MVCL  WC,R14              MOVE ALL Q-RCDS TO I/O AREA @OZ27300
         EJECT                                                 @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*        ADJUST CCW PACKETS FOR FORMAT-WRITE OPERATION         @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
         USING JQBCCWE,WD          PROVIDE CCWE ADDRESSABILITY @OZ27300
         SPACE 1                                               @OZ27300
         OI    JQBFLAG1,JQB1FMT    SHOW JQB SET FOR FORMAT     @OZ27300
         L     WA,$JOBQIO          POINT TO ACTUAL Q-RECORDS   @OZ27300
         L     WC,$CTLB            POINT TO ACTUAL CTL BYTES   @OZ27300
         LA    WD,JQBFMTW          FORMAT CHANNEL PROGRAM      @OZ27300
         ST    WD,JQBSTART          STARTS WITH JQBFMTW        @OZ27300
         MVC   JQBSEEK+1(6),JQBCADDR  SET INITIAL SEEK         @OZ27300
         LA    WD,JQBMSTR          ADDRESS THE MSTR RCD PACKET @OZ27300
         B     KFNEWPAK            BR INTO CCW BUILD LOOP      @OZ27300
         SPACE 1                                               @OZ27300
KFMTLOOP EX    R10,KFCTLNI         RESET OUR-BIT IN CTL BYTE   @OZ27300
         LA    R1,JQBFMT           ASSUME WE CAN SKIP SEEK     @OZ27300
         CLC   JQBCCHH,JQBCCHH-JQBCCWE(WB)  SAME TRACK...      @OZ27300
         BE    *+8                 BR IF YES                   @OZ27300
         LA    R1,JQBFSEEK          ELSE MUST CHAIN TO SEEK    @OZ27300
         ST    R1,JQBFTIC+4-JQBCCWE(WB)      SET VIRT AND REAL @OZ27300
         LRA   R1,0(,R1)                         ADDRS INTO    @OZ27300
         STCM  R1,7,JQBFTNXT+CCWADDR-JQBCCWE(WB)  PREV PACKET  @OZ27300
         LRA   R1,0(,WA)           SET REAL ADDRESS OF         @OZ27300
         STCM  R1,7,JQBFRW+CCWADDR  Q-RECORD INTO PACKET       @OZ27300
         AL    WA,=F'4096'         BUMP TO NEXT Q-RECORD       @OZ27300
         LA    WC,1(,WC)           BUMP TO NEXT CONTROL BYTE   @OZ41071
         SPACE 1                                               @OZ27300
KFNEWPAK LRA   R1,JQBCCHH0             SEARCH-ID               @OZ27300
         ST    R1,JQBFSID               EQUAL FOR              @OZ27300
         MVI   JQBFSID+CCWOP,SRCH+ID+EQ  RECORD                @OZ27300
         MVC   CCWLEN+JQBFSID,=Y(5)       ZERO                 @OZ27300
         SPACE 1                                               @OZ27300
         LRA   R1,JQBFSID          TIC                         @OZ27300
         ST    R1,JQBFTIC           BACK TO                    @OZ27300
         MVI   JQBFTIC+CCWOP,TIC     SEARCH                    @OZ27300
         SPACE 1                                               @OZ27300
         LRA   R1,JQBCOUNT           WRITE                     @OZ27300
         ST    R1,JQBFMT              COUNT FIELD              @OZ27300
         MVI   JQBFMT+CCWOP,WRITE+CKD  DATA-CHAINED            @OZ27300
         MVI   JQBFMT+CCWFLAG,DC        TO DATA CCW            @OZ27300
         MVC   CCWLEN+JQBFMT,=Y(8)       (FRW)                 @OZ27300
         SPACE 1                                               @OZ27300
         LR    WB,WD               SET 'PREVIOUS' TO 'CURRENT' @OZ27300
*              THIS LINE DELETED BY APAR NUMBER                @OZ41071
         LA    WD,JQBCNEXT         NEXT CCW PACKET  (CURRENT)  @OZ27300
         BCT   WF,KFMTLOOP         LOOP FOR ALL PACKETS        @OZ27300
         SPACE 1                                               @OZ27300
         LA    WD,JQBCHECK         POINT TO CHECK-RCD PACKET   @OZ27300
         MVI   JQBCRW+CCWOP,WRITE+DATA   TERMINATE CHAIN WITH  @OZ27300
         ST    WD,JQBFTIC+4-JQBCCWE(,WB)  CHECK-RECORD WRITE   @OZ27300
         LRA   R1,0(,WD)                   PACKET (WHICH TIC'S @OZ27300
         STCM  R1,7,JQBFTNXT+CCWADDR-JQBCCWE(WB)  TO JQBVERP)  @OZ27300
         EJECT                                                 @OZ27300
         MVI   $WCHECK,129         SET SPECIAL FORMAT WRITE-   @OZ27300
         MVI   JQBCKVAL,129         CHECK RECORD VALUE         @OZ27300
         SPACE 1                                               @OZ27300
         L     R0,$MASTER          MOVE HCT                    @OZ27300
         LA    R1,$SAVELEN          CHECKPOINT                 @OZ27300
         LA    R14,$SAVEBEG          VARIABLES                 @OZ27300
         LR    R15,R1                 FROM HCT TO              @OZ27300
         MVCL  R0,R14                  MASTER RECORD           @OZ27300
         SPACE 1                                               @OZ27300
         L     R0,$MASTERI         MOVE                        @OZ27300
         L     R1,$MASTERL          MASTER                     @OZ27300
         L     R14,$MASTER           RECORD                    @OZ27300
         LR    R15,R1                 TO I/O                   @OZ27300
         MVCL  R0,R14                  AREA                    @OZ27300
         SPACE 1                                               @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*        INFORM OPERATOR AND START THE FORMAT WRITE OPERATION  @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
         MVC   CKPMSG,KFMTMSG      MOVE BASE MSG TEXT          @OZ27300
         TM    JQBFLAG1,JQB1PRIM           SET PRIMARY         @OZ27300
         BO    *+10                         OR DUPLEX          @OZ27300
         MVC   KFMTMPA+CKPMSG,=C'ALTERNATE'  KEYWORD           @OZ27300
       $$WTO   CKPMSG              ISSUE MESSAGE               @OZ27300
         SPACE 1                                               @OZ27300
         MVC   JQBVERFY,KVERFY     INIT I/O VERIFICATION AREA  @OZ27300
         MVC   CKPLIRCT,$ZEROS     NO I/O ERROR RETRIES        @OZ27300
         LA    R1,PCEDADCT         START THE FORMAT-           @OZ27300
        $EXCP  (R1),TYPE=VR,WAIT=YES  WRITE OPERATION          @OZ27300
         BO    KFMTCHEK            BR IF POSTED SUCCESSFUL     @OZ27300
         LA    WA,K15               ELSE                       @OZ27300
         TM    JQBFLAG1,JQB1PRIM     BR TO         K15=PRIMARY @OZ27300
         BO    KLOGOUT                LOGOUT       K16=DUPLEX  @OZ27300
         LA    WA,K16                  AND ABEND               @OZ27300
         B     KLOGOUT                  CKPT PROCESSOR         @OZ27300
         SPACE 1                                               @OZ27300
KFMTCHEK BAL   WB,KIOVERFY         ABEND IF INTERRUPTED I/O    @OZ27300
         NOP   *+4                 NEVER RETURN TO +0,    +0   @OZ27300
         DS    0H                   DUE TO CKPLIRCT=0     +4   @OZ27300
         EJECT                                                 @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*    PRIMARY/DUPLEX CKPT DATA SET SUCCESSFULLY RE-FORMATED     @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
         MVC   CKPMSG,KFMTOKM      'FORMAT SUCCESSFUL'         @OZ27300
       $$WTO   CKPMSG              TELL OPERATOR               @OZ27300
         SPACE 1                                               @OZ27300
         LH    R0,$JOBRECN         LENGTH                      @OZ27300
         AH    R0,$JOTRECN          OF ALL                     @OZ27300
         SLL   R0,12                 Q-RECORDS                 @OZ27300
         TM    $RUNOPTS,$DEBUG     DEBUG MODE...               @OZ27300
         BZ    KFMTRLS             BR IF NO                    @OZ27300
        $PGSRVC FREE,$JOBQIO,(R0)   ELSE JUST FREE I/O AREA    @OZ27300
         B     KNONFMT               AND BR TO CONTINUE        @OZ27300
         SPACE 1                                               @OZ27300
KFMTRLS $PGSRVC FREE,$JOBQIO,(R0),RELEASE=Y   RELEASE I/O AREA @OZ27300
         EJECT                                                 @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*        RE-ADJUST CCW PACKETS FOR NON-FORMAT OPERATIONS       @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
KNONFMT  LA    WF,1                NUMBER        = MASTER      @OZ27300
         AH    WF,$JOBRECN          OF           + JOBQ        @OZ27300
         AH    WF,$JOTRECN           PACKETS     + JOT         @OZ27300
         LA    WD,JQBMSTR          POINT TO MASTER/Q PACKETS   @OZ27300
         SPACE 1                                               @OZ27300
KNONFLUP LRA   R1,JQBCSEC1           INITIALIZE                @OZ27300
         ST    R1,JQBCSET             SET-                     @OZ27300
         MVI   JQBCSET+CCWOP,SETSECTR  SECTOR                  @OZ27300
         CLI   JQBCSEC1,FF              CCW                    @OZ27300
         BNE   *+8                       (OR SET               @OZ27300
         MVI   JQBCSET+CCWOP,NOP          TO NOP IF            @OZ27300
         MVI   JQBCSET+CCWLEN+1,1          SECTOR=FF)          @OZ27300
         SPACE 1                                               @OZ27300
         LRA   R1,JQBCCHHR             INITIALIZE              @OZ27300
         ST    R1,JQBCSID               SEARCH-ID-EQUAL        @OZ27300
         MVI   JQBCSID+CCWOP,SRCH+ID+EQ  CCW WITH              @OZ27300
         MVI   JQBCSID+CCWFLAG,CC         ADDRESS OF           @OZ27300
         MVC   CCWLEN+JQBCSID,=Y(5)        CCHHR               @OZ27300
         SPACE 1                                               @OZ27300
         LRA   R1,JQBCSID          INITIALIZE                  @OZ27300
         ST    R1,JQBCTIC           CCW TO                     @OZ27300
         MVI   JQBCTIC+CCWOP,TIC     TIC BACK                  @OZ27300
         MVI   JQBCTIC+CCWFLAG,0      TO SEARCH                @OZ27300
         SPACE 1                                               @OZ27300
         LA    WD,JQBCNEXT         NEXT CCW PACKET             @OZ27300
         BCT   WF,KNONFLUP         LOOP FOR ALL PACKETS        @OZ27300
         SPACE 1                                               @OZ27300
         NI    JQBFLAG1,FF-JQB1FMT  RESET FORMAT INDICATION    @OZ27300
         L     R14,CKPSAVE2          AND RETURN                @OZ27300
         BR    R14                    TO CALLER                @OZ27300
         SPACE 1                                               @OZ27300
         DROP  WD                  KILL CCWE ADDRESSABILITY    @OZ27300
         SPACE 1                                               @OZ27300
KFCTLNI  NI    0(WC),*-*           **EXECUTE**  RESET OUR-BIT  @OZ27300
      TITLE 'HASP CHECKPOINT PROCESSOR -- KSETPAKS SUBROUTINE' @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*    KSETPAKS -- SUBROUTINE TO SETUP THE CCW PACKETS FOR       @OZ27300
*                EITHER THE PRIMARY OR DUPLEX DATA SET         @OZ27300
*                                                              @OZ27300
*     ON ENTRY   WB = RETURN ADDRESS                           @OZ27300
*                                                              @OZ27300
*     ON EXIT    R1,WA,WF = UNPREDICTABLE                      @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
         USING JQBCCWE,WA          PROVIDE CCWE ADDRESSABILITY @OZ27300
         SPACE 1                                               @OZ27300
KSETPAKS IC    R1,$NUMDA           ASSUME PRIMARY IOBSEEK 'M'  @OZ27300
         TM    JQBFLAG1,JQB1PRIM   CALLED FOR PRIMARY SETUP... @OZ27300
         BZ    KSWAPD              BR IF NO                    @OZ27300
         CLC   $NUMDA,JQBSEEK      RETURN IF ALREADY           @OZ27300
         BER   WB                   SET FOR PRIMARY            @OZ27300
         B     KSWAPEM             GO SET FOR PRIMARY          @OZ27300
         SPACE 1                                               @OZ27300
KSWAPD   CLC   $NUMDA,JQBSEEK      RETURN IF ALREADY           @OZ27300
         BNER  WB                   SET FOR DUPLEX             @OZ27300
         LA    R1,1(,R1)           DUPLEX IOBSEEK 'M'          @OZ27300
         SPACE 1                                               @OZ27300
KSWAPEM  STC   R1,JQBSEEK          SET PRIMARY OR DUPLEX 'M'   @OZ27300
         LA    WA,JQBSTD           POINT TO STD CCW PACKETS    @OZ27300
         LA    WF,JQBSTDS          COMPUTE          = STDS     @OZ27300
         AH    WF,$JOBRECN          NUMBER OF       + JOBQ     @OZ27300
         AH    WF,$JOTRECN           PACKETS        + JOT      @OZ27300
         SPACE 1                                               @OZ27300
KSWAPLUP XC    JQBCCHHR,JQBCCHH2   SWAP                        @OZ27300
         XC    JQBCCHH2,JQBCCHHR    JQBCCHHR AND               @OZ27300
         XC    JQBCCHHR,JQBCCHH2     JQBCCHH2                  @OZ27300
         MVC   JQBCCHH0(4),JQBCCHHR  THEN RESET JQBCCHH0       @OZ27300
         SPACE 1                                               @OZ27300
         LA    R1,JQBLOCKR         DON'T SWAP SECTOR           @OZ27300
         CLR   WA,R1                NUMBERS UNTIL              @OZ27300
         BL    KSWAPINC              JQBLOCKR PACKET           @OZ27300
         SPACE 1                                               @OZ27300
         XC    JQBCSEC1,JQBCSEC2   SWAP                        @OZ27300
         XC    JQBCSEC2,JQBCSEC1    SECTOR                     @OZ27300
         XC    JQBCSEC1,JQBCSEC2     NUMBERS                   @OZ27300
         SPACE 1                                               @OZ27300
         MVI   JQBCSET+CCWOP,SETSECTR  SET JQBCSET TO          @OZ27300
         CLI   JQBCSEC1,FF              A SET-SECTOR           @OZ27300
         BNE   *+8                       OR TO A NOP (IF       @OZ27300
         MVI   JQBCSET+CCWOP,NOP          SECTOR NUMBER IS FF) @OZ27300
         SPACE 1                                               @OZ27300
KSWAPINC LA    WA,JQBCNEXT         POINT TO NEXT CCW PACKET    @OZ27300
         BCT   WF,KSWAPLUP          AND LOOP FOR ALL           @OZ27300
         BR    WB                  THEN RETURN TO CALLER       @OZ27300
         SPACE 1                                               @OZ27300
         DROP  WA                  KILL CCWE ADDRESSABILITY    @OZ27300
       TITLE 'HASP CHECKPOINT PROCESSOR -- KCCWADJ SUBROUTINE' @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*    KCCWADJ -- SUBROUTINE TO CHAIN NEW CCW PACKET             @OZ27300
*                                                              @OZ27300
*     ON ENTRY   WA = RETURN ADDRESS                           @OZ27300
*                WB = ADDRESS OF PREVIOUS CCW PACKET           @OZ27300
*                WD = ADDRESS OF CURRENT CCW PACKET            @OZ27300
*                                                              @OZ27300
*     ON EXIT    R0,R15 = UNPREDICTABLE                        @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
         USING JQBCCWE,WD          PROVIDE 'CURRENT' PACKET    @OZ27300C
                                    ADDRESSABILITY             @OZ27300
         SPACE 1                                               @OZ27300
KCCWADJ  LA    R15,JQBCSEEK        POINT TO NEW SEEK           @OZ27300
         CLC   JQBCCHH,JQBCCHH-JQBCCWE(WB)  SAME TRACK...      @OZ27300
         BNE   KCCW1               BR IF NO                    @OZ27300
         LA    R15,JQBCSID         POINT TO NEW SEARCH-ID      @OZ27300
         LA    R0,L'JQBCCWEL(,WB)  PACKET ADJACENT IN          @OZ27300
         CLR   R0,WD                CCW CHAIN...               @OZ27300
         BE    KCCW1               BRANCH IF YES               @OZ27300
         CLI   JQBCSEC1,FF         SECTOR NO. EXIST (RPS)...   @OZ27300
         BE    KCCW1               BR IF NO                    @OZ27300
         LA    R15,JQBCSET          ELSE CHAIN TO SET-SECTOR   @OZ27300
         SPACE 1                                               @OZ27300
         DROP  WD                  SWITCH ADDRESSABILITY TO    @OZ27300
         USING JQBCCWE,WB           'PREVIOUS' PACKET          @OZ27300
         SPACE 1                                               @OZ27300
KCCW1    LRA   R0,0(,R15)          SET REAL ADDRESS            @OZ27300
         ST    R0,JQBCTNXT          IN PREVIOUS TIC            @OZ27300
         MVI   JQBCTNXT+CCWOP,TIC  SET OP-CODE TO 'TIC'        @OZ27300
         ST    R15,JQBCTIC+4       VIRTUAL ADDR FOR DEBUGGING  @OZ27300
         BR    WA                  RETURN TO CALLER            @OZ27300
         SPACE 1                                               @OZ27300
         DROP  WB                  KILL CCWE ADDRESSABILITY    @OZ27300
      TITLE 'HASP CHECKPOINT PROCESSOR -- KFIXMSTR SUBROUTINE' @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*    KFIXMSTR -- SUBROUTINE TO PAGE-FIX THE MASTER RECORD IN   @OZ27300
*                THE I/O AREA AND TO INITIALIZE ITS IDAW'S     @OZ27300
*                                                              @OZ27300
*     ON ENTRY   WB = RETURN ADDRESS                           @OZ27300
*                                                              @OZ27300
*     ON EXIT    R0-WA,R14,R15 = UNPREDICTABLE                 @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
KFIXMSTR L     R1,$MASTERI         POINT TO MASTER I/O AREA    @OZ27300
         L     R0,$MASTERL         LENGTH OF MASTER RECORD     @OZ27300
         LA    R2,CKPECB               PAGE-FIX MASTER RECORD  @OZ27300
        $PGSRVC FIX,(R1),(R0),(R2),RELEASE=Y  IN I/O AREA      @OZ27300
         LA    R15,JQBIDAWS        POINT TO IDAWS              @OZ27300
         LA    WA,2048             EACH IDAW COVERS 2K BYTES   @OZ27300
         SPACE 1                                               @OZ27300
KFIXMLUP CLI   0(R1),*-*           WAIT FOR PAGE-FIX           @OZ27300
         LRA   R14,0(,R1)          SET REAL ADDRESS            @OZ27300
         ST    R14,0(,R15)          INTO IDAW                  @OZ27300
         ALR   R1,WA               BUMP VIRTUAL ADDR BY 2K     @OZ27300
         LA    R15,4(,R15)         POINT TO NEXT IDAW          @OZ27300
         SR    R0,WA               LOOP UNTIL ALL MASTER       @OZ27300
         BP    KFIXMLUP             RECORD IDAWS ARE BUILT     @OZ27300
         BR    WB                  THEN RETURN TO CALLER       @OZ27300
      TITLE 'HASP CHECKPOINT PROCESSOR -- KIOVERFY SUBROUTINE' @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*    KIOVERFY -- SUBROUTINE TO VERIFY THAT THE CHANNEL PROGRAM @OZ27300
*                COMPLETED  (I.E., THE COUNT FIELD WAS READ)   @OZ27300
*                                                              @OZ27300
*     ON ENTRY   WB = RETURN ADDRESS  (+0) RETRY NEEDED        @OZ27300
*                                     (+4) I/O COMPLETE        @OZ27300
*     ON EXIT    R0,R1,R14,R15 = UNPREDICTABLE                 @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
KIOVERFY CLC   JQBVERFY,KVERFY     I/O GO TO COMPLETION...     @OZ27300
         BNE   4(,WB)              RETURN (+4) IF YES          @OZ27300
         MVC   CKPMSG,KINTMSG      MOVE BASE MSG TEXT          @OZ27300
         TM    JQBFLAG1,JQB1READ   READ OPERATION...           @OZ27300
         BO    *+10                BR IF YES                   @OZ27300
         MVC   KINTMRW+CKPMSG,=C'WRITE'  ELSE REPLACE I/O TYPE @OZ27300
         TM    JQBFLAG1,JQB1PRIM   PRIMARY DATA SET...         @OZ27300
         BO    *+10                BR IF YES.  ELSE REPLACE    @OZ27300
         MVC   KINTMPA+CKPMSG,=C'ALTERNATE'     DATA SET TYPE  @OZ27300
       $$WTO   CKPMSG              ISSUE WARNING MSG           @OZ27300
         LH    R0,CKPLIRCT         HAVE ALL POSSIBLE           @OZ27300
         LTR   R0,R0                RETRIES BEEN ATTEMPTED...  @OZ27300
         BZ    KIOVFAIL            BR IF YES                   @OZ27300
         BCTR  R0,0                 ELSE DECREMENT LOST        @OZ27300
         STH   R0,CKPLIRCT           INTERRUPT RETRY COUNTER   @OZ27300
         BR    WB                  BACK TO CALLER +0 FOR RETRY @OZ27300
         SPACE 1                                               @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*      MULTIPLE INTERRUPTIONS -- ABEND TO AVOID RETRY LOOPS    @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
KIOVFAIL LA    WA,K17              K17 =                       @OZ27300
         TM    JQBFLAG1,JQB1READ         PRIMARY               @OZ27300
         BO    KLOGOUT                    READ                 @OZ27300
         LA    WA,K18              K18 =                       @OZ27300
         TM    JQBFLAG1,JQB1PRIM         PRIMARY               @OZ27300
         BO    KLOGOUT                    WRITE                @OZ27300
         LA    WA,K19              K19 =                       @OZ27300
         B     KLOGOUT                   DUPLEX WRITE          @OZ27300
                                   PRINT OFF - SECTION DELETED @OZ35278
*                                  THIS CARD DELETED BY APAR   @OZ35278
*                                  THIS CARD DELETED BY APAR   @OZ35278
*                                  THIS CARD DELETED BY APAR   @OZ35278
*                                  THIS CARD DELETED BY APAR   @OZ35278
*                                  THIS CARD DELETED BY APAR   @OZ35278
*                                  THIS CARD DELETED BY APAR   @OZ35278
*                                  THIS CARD DELETED BY APAR   @OZ35278
*                                  THIS CARD DELETED BY APAR   @OZ35278
*                                  THIS CARD DELETED BY APAR   @OZ35278
*                                  THIS CARD DELETED BY APAR   @OZ35278
*                                  THIS CARD DELETED BY APAR   @OZ35278
*                                  THIS CARD DELETED BY APAR   @OZ35278
*                                  THIS CARD DELETED BY APAR   @OZ35278
*                                  THIS CARD DELETED BY APAR   @OZ35278
*                                  THIS CARD DELETED BY APAR   @OZ35278
*                                  THIS CARD DELETED BY APAR   @OZ35278
*                                  THIS CARD DELETED BY APAR   @OZ35278
*                                  THIS CARD DELETED BY APAR   @OZ35278
*                                  THIS CARD DELETED BY APAR   @OZ35278
*                                  THIS CARD DELETED BY APAR   @OZ35278
*                                  THIS CARD DELETED BY APAR   @OZ35278
*                                  THIS CARD DELETED BY APAR   @OZ35278
*                                  THIS CARD DELETED BY APAR   @OZ35278
*                                  THIS CARD DELETED BY APAR   @OZ35278
*                                  THIS CARD DELETED BY APAR   @OZ35278
*                                  THIS CARD DELETED BY APAR   @OZ35278
*                                  THIS CARD DELETED BY APAR   @OZ35278
*                                  THIS CARD DELETED BY APAR   @OZ35278
*                                  THIS CARD DELETED BY APAR   @OZ35278
*                                  THIS CARD DELETED BY APAR   @OZ35278
*                                  THIS CARD DELETED BY APAR   @OZ35278
*                                  THIS CARD DELETED BY APAR   @OZ35278
*                                  THIS CARD DELETED BY APAR   @OZ35278
*                                  THIS CARD DELETED BY APAR   @OZ35278
*                                  THIS CARD DELETED BY APAR   @OZ35278
                                   PRINT ON -- SECTION DELETED @OZ35278
        TITLE 'HASP CHECKPOINT PROCESSOR -- TIMER SUBROUTINES' @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*    KSTIMER,KTTIMER -- SUBROUTINES TO START/STOP TIMERS       @OZ27300
*                                                              @OZ27300
*     ON ENTRY  WA = RETURN ADDRESS                            @OZ27300
*               R0 = TIME INTERVAL (KSTIMER ONLY)              @OZ27300
*                    GT ZERO = TIME IN SECONDS                 @OZ27300
*                    LT ZERO = -TIME IN SECONDS/100            @OZ27300
*                                                              @OZ27300
*     ON EXIT   R1,R14,R15 DESTROYED                           @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
KSTIMER  OI    CKPSTQE+IPOST,X'80' INDICATE TIMER EXPIRED      @OZ27300
         LTR   R0,R0               TEST NEW INTERVAL TO BE SET @OZ27300
         BZR   WA                  RETURN IF NONE              @OZ27300
         ST    R0,CKPSTQE+ITIME    STORE NEW INTERVAL IN STQE  @OZ27300
        $STIMER CKPSTQE            START TIMER                 @OZ27300
         BR    WA                  RETURN TO CALLER            @OZ27300
         SPACE 3                                               @OZ27300
KTTIMER  TM    CKPSTQE+IPOST,X'80' HAS TIMER EXPIRED...        @OZ27300
         BOR   WA                  RETURN IF YES               @OZ27300
        $TTIMER CKPSTQE,CANCEL      ELSE STOP TIMER            @OZ27300
         BR    WA                    AND THEN RETURN           @OZ27300
   TITLE 'HASP CHECKPOINT PROCESSOR -- CONSTANTS AND MESSAGES' @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*       CHECKPOINT PROCESSOR CONSTANTS AND MESSAGES            @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 2                                               @OZ27300
KVERFY   DC    8X'FF'              I/O VERIFICATION VALUE      @OZ27300*
                                   (MOVED TO JQBVERFY BEFORE   @OZ27300*
                                     ALL I/O OPERATIONS)       @OZ27300
         SPACE 1                                               @OZ27300
         LTORG ,                   GENERATE LITERAL POOL       @OZ27300
         EJECT                                                 @OZ27300
        $MID   263                 ------ 263 -------          @OZ27300
         SPACE 1                                               @OZ27300
KWARNM   WTO   '&MID.WAITING FOR ACCESS TO JES2 CHECKPOINT DATA SET',  *
               MF=L                &WARNTIM MESSAGE            @OZ27300
         SPACE 2                                               @OZ27300
        $MID   264                 ------ 264 -------          @OZ27300
         SPACE 1                                               @OZ27300
KLOKMSG  WTO   '&MID.WAITING FOR RELEASE OF JES2 CKPT LOCK BY ****     *
                    ',MF=L                                     @OZ27300
KLOKMSID EQU   *-14-KLOKMSG,4      INSERT FOR SYSTEM-ID        @OZ27300
KLOKINIT EQU   KLOKMSID,14          OR 'INITIALIZATION'        @OZ27300
         SPACE 1                                               @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
         SPACE 2                                               @OZ27300
        $MID   265                 ------ 265 -------          @OZ27300
         SPACE 1                                               @OZ27300
KPREVERR WTO   '&MID.DAMAGED JES2 CHECKPOINT RECORD DETECTED', @OZ27300*
               MF=L                                            @OZ27300
         SPACE 2                                               @OZ27300
        $MID   266                 ------ 266 -------          @OZ27300
         SPACE 1                                               @OZ27300
KFMTMSG  WTO  '&MID.PRIMARY   CHECKPOINT DATA SET IS BEING FORMATTED', *
               MF=L                                            @OZ27300
KFMTMPA  EQU   *-48-KFMTMSG,9      DATA SET TYPE INSERT        @OZ27300
         EJECT                                                 @OZ27300
        $MID   267                 ------ 267 -------          @OZ27300
         SPACE 1                                               @OZ27300
KFMTOKM  WTO   '&MID.JES2 CHECKPOINT DATA SET SUCCESSFULLY FORMATTED', *
               MF=L                                            @OZ27300
         SPACE 2                                               @OZ27300
        $MID   268                 ------ 268 -------          @OZ27300
         SPACE 1                                               @OZ27300
KINTMSG  WTO  '&MID.INTERRUPTED READ  OF PRIMARY   JES2 CHECKPOINT DATA*
                SET',MF=L                                      @OZ27300
KINTMRW  EQU   *-43-KINTMSG,5      'READ'/'WRITE' INSERT       @OZ27300
KINTMPA  EQU   *-34-KINTMSG,9      DATA SET TYPE INSERT        @OZ27300
         SPACE 2                                               @OZ27300
        $MID   269                 ------ 269 -------          @OZ27300
         SPACE 1                                               @OZ27300
KDUMPMSG WTO   '&MID.JES2 CKPT ERROR (****) -- CKPT DUMP IN PROGRESS', *
               MF=L                                            @OZ27300
KDUMPCOD EQU   *-30-KDUMPMSG,4     $ERROR CODE INSERT          @OZ27300
         TITLE 'HASP CHECKPOINT PROCESSOR -- ABEND CODES'      @OZ27300
K01     $ERROR ** UPDATE TO Q'S WHILE QSONDA. MISSING $QSUSE **@OZ27300
         SPACE 2                                               @OZ27300
K03     $ERROR ** $SIDTIME DID NOT MATCH QSESITIM AFTER READ **@OZ27300
         SPACE 2                                               @OZ27300
K05     $ERROR **  UPDATED RECORD WAS NOT FLAGGED FOR CKPT   **@OZ27300
         SPACE 2                                               @OZ27300
K10     $ERROR ** PRIMARY CHECKPOINT DAMAGED -- DUPLEX GOOD  **@OZ27300
         SPACE 2                                               @OZ27300
K11     $ERROR ** PRI BAD (NO DUPLEX). CAN'T GET LOCK TO FMT **@OZ27300
         SPACE 2                                               @OZ27300
K12     $ERROR **    PRIMARY GOOD BUT LOCK RECORD DAMAGED    **@OZ27300
         SPACE 2                                               @OZ27300
K13     $ERROR **   INVALID SYSTEM ID FOUND IN LOCK RECORD   **@OZ27300
         SPACE 2                                               @OZ27300
K14     $ERROR ** PRI CKPT REFORMATTED. DOWNLEVEL. NO DUPLEX **@OZ27300
         EJECT                                                 @OZ27300
K15     $ERROR **  I/O ERROR FORMATTING PRIMARY CHECKPOINT   **@OZ27300
         SPACE 2                                               @OZ27300
K16     $ERROR **  I/O ERROR FORMATTING DUPLEX CHECKPOINT    **@OZ27300
         SPACE 2                                               @OZ27300
K17     $ERROR **  INTERRUPTED READ OF PRIMARY CHECKPOINT    **@OZ27300
         SPACE 2                                               @OZ27300
K18     $ERROR **  INTERRUPTED WRITE OF PRIMARY CHECKPOINT   **@OZ27300
         SPACE 2                                               @OZ27300
K19     $ERROR **  INTERRUPTED WRITE OF DUPLEX CHECKPOINT    **@OZ27300
         TITLE 'HASP TRACK GROUP BLOCK ALLOCATION'
***********************************************************************
*                                                                     *
* KBLOB -- SUBROUTINE TO UNALLOCATE/ALLOCATE THE TRACK GROUP BLOCK    *
*                                                                     *
* PURPOSE - TO RETURN TRACK GROUPS TO THE MASTER TRACK GROUP MAP      *
*  ($TGMAP) FROM THE TRACK GROUP BLOCK AND THEN TO REALLOCATE THE     *
*  TRACK GROUP BLK FROM THE MASTER MAP USING AN EXTREME ALLOCATION    *
*  ALGORITHM. THE ALGORITHM ALLOCATES THE TRACK GROUP BLOCK BY        *
*  SELECTING BITS (TRACK GROUPS) FROM THE 'EXTREME' EXTENTS (RIMS)    *
*  OF DEVICES AS REPRESENTED BY TEDS (SEE TEDDSECT) AND $TGMAP.       *
*                                                                     *
* OPERATION -                                                         *
*                                                                     *
*  (1)  TRACK GROUP BLOCK ENTRIES ARE REMOVED USING CDS LOGIC TO      *
*       ELIMINATE POSSIBLE SIMULTANEOUS REFERENCE BY SSSM $STRAK      *
*       SUBROUTINE. THE ENTRIES REMOVED ARE TALLIED AND THE BIT@OZ27300
*       DEFINED BY THE ENTRY IS RETURNED TO $TGMAP. &NUMTGBE   @OZ27300
*       DETERMINES THE NO. OF TRACK GROUPS RETURNED IN THE TGB @OZ27300
*       REALLOCATE FOR THIS ITERATION OF THE CHECKPOINT PROCESSOR.    *
*       IF NO TRACK GROUPS ARE RETURNED (ALL USED) THE NUMBER LAST    *
*       ALLOCATED IS INCREASED BY 1. IF TRACK GROUPS ARE RETURNED,    *
*       THE NUMBER LAST ALLOCATED IS DECREASED BY 1. THE LOWEST       *
*       EVER ALLOCATED IS 1 AND THE HIGHEST &NUMTGBE.                 *
*  (2)  THE NUMBER OF TRACK GROUPS ALLOCATED IS CALCULATED BY         *
*       'COUNTING' THE NUMBER OF BITS ON IN $TGMAP AND SUBTRACTING    *
*       THIS VALUE FROM THE TOTAL TRACK GROUPS AVAILABLE. IF THE      *
*       RESULT IS 0, THE 100% SPOOL UTILIZATION MESSAGE IS ISSUED.    *
*       IF THE NUMBER OF TRACK GROUPS AVAILABLE IS LESS THAN THE      *
*       NUMBER NEEDED TO FILL THE TRACK GROUP BLOCK, THE NUMBER       *
*       NEEDED IS SET TO THE NUMBER AVAILABLE.                        *
*  (3)  ALL VALID TED BLKS ARE INITIALIZED TO CAUSE THE SEARCH FOR    *
*       UNALLOCATED TRK GROUPS AT THE MODULE EXTENT START. THE TED    *
*       FIELD 'TNCH' IS USED FOR THIS PURPOSE. THE NEXT TED TO BE     *
*       USED FOR ALLOCATION IS SELECTED FROM THE $SVTNEXT FIELD IN    *
*       THE SVT. $SVTNEXT IS SET TO THE NEXT TED TO BE USED UPON      *
*       COMPLETION OF TRACK GROUP BLK ALLOCATION. MODULE SELECTION    *
*       IS 'ROUND-ROBIN'.                                             *
*  (4)  THE NUMBER OF TRACK GROUPS DETERMINED BY THE 'LAST USED'      *
*       PROCESS DESCRIBED ARE ALLOCATED USING EXTREME ALGORITHM.      *
*       THE EXTENT REPRESENTED BY A TED AND THE MASTER MAP IS         *
*       SEARCHED FOR AN AVAILABLE TRACK GRP STARTING AT HE 'TNCH'     *
*       DEFINED POSITION. 'TNCH' IS RESET FOR THE NEXT ITERATION      *
*       OF THE TRACK GROUP BLOCK ALLOCATION LOOP TO THE ADDRESS IN    *
*       THE EXTENT WHERE AN AVAILABLE TRACK GROUP WAS FOUND.          *
*  (5)  THE NUMBER OF TRACK GROUPS ALLOCATED IS ADJUSTED FOR THE      *
*       AMOUNT GIVEN TO THE TRACK GROUP BLK AND A CHECK IS MADE TO    *
*       DETERMINE IF THE TOLERANCE SPECIFIED BY &TGWARN HAS BEEN      *
*       EXCEEDED. IF SO, A PERCENT UTILIZATION MESSAGE IS ISSUED.     *
                                   PRINT OFF - SECTION DELETED @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
                                   PRINT ON -- SECTION DELETED @OZ27300
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*              TGB ALLOCATION ENTRY POINT                             *
*                                                                     *
***********************************************************************
         SPACE 1
KBLOB    LA    R0,*                REMEMBER THIS ADDRESS       @OZ27300
         L     JCT,$SSVT           OBTAIN SSVT                 @OZ27300
         USING SSVT,JCT              ADDRESSABILITY            @OZ20010
         TM    $SVSTUS,$SVSTIRV    INIT RESV STILL IN EFFECT.. @OZ27300
         BOR   R14                 RETURN TO CALLER IF IT IS
         STM   R2,BASE2,PCEWA      ELSE, SAVE R2 - R12 IN PCE  @OZ27300
         SPACE 1                                               @OZ27300
         LR    BASE2,R0            PROVIDE NEW                 @OZ27300
         USING KBLOB,BASE2          LOCAL ADDRESSABILITY       @OZ27300
         SPACE 1                                               @OZ27300
         LM    R5,R7,$SVTTGBA      R5=1ST, R6=SIZE, R7=LAST TGB
         USING TGBDSECT,R5         TGB ADDRESSABILITY
         SLR   R2,R2               R2 = 0 (FOR CDS)
         SLR   R3,R3               R3 = 0 (FOR CDS)
         SLR   R8,R8               R8 = 0 (FOR ACCUMULATOR)
         L     R9,$TGMAP           POINT TO MASTER TRACK GROUP MAP   R4
         SPACE 1
***********************************************************************
*                                                                     *
*              REMOVE UNUSED TG'S FROM TGB                            *
*                                                                     *
***********************************************************************
         SPACE 1
KBLOBR   LM    R0,R1,TGBENTRY      FETCH TGB ENTRY
         LTR   R1,R1               TEST FOR UNALLOCATED TG
         BZ    KBLOBA              BRANCH IF ALLOCATED
         CDS   R0,R2,TGBENTRY      TRY TO REMOVE ENTRY
         BNE   KBLOBA              BRANCH IF REMOVED BY SSSM
         SPACE 1
         DROP  R5                  FORGET TGB
         SPACE 1
***********************************************************************
*                                                                     *
*              COUNT & RETURN TG TO MASTER MAP                        *
*                                                                     *
***********************************************************************
         SPACE 1
         LA    R8,1(,R8)           COUNT RETURNED TG'S
         LR    R1,R0               R1 = BYTE OFFSET & BIT MASK
         SRL   R1,16               R1 = BYTE OFFSET
         IC    R4,0(R1,R9)         R4 = BYTE CONTAINING BIT          R4
         XR    R4,R0               RETURN TG BIT TO BYTE
         STC   R4,0(R1,R9)         RETURN BYTE TO MAP                R4
         SPACE 1                                                    R41
KBLOBA   BXLE  R5,R6,KBLOBR        TRY NEXT TGB ENTRY
         EJECT
***********************************************************************
*                                                                     *
*              CALCULATE NUMBER OF TG'S FOR TGB                       *
*                                                                     *
***********************************************************************
         SPACE 1
         SLR   R2,R2               R2 = NUMBER OF TG'S               R4
         IC    R2,$NUMTGBE               PER TGB               @OZ17486
*              THIS LINE DELETED BY APAR NUMBER                @OZ17486
*              THIS LINE DELETED BY APAR NUMBER                @OZ17486
*              THIS LINE DELETED BY APAR NUMBER                @OZ17486
*              THIS LINE DELETED BY APAR NUMBER                @OZ17486
*              THIS LINE DELETED BY APAR NUMBER                @OZ17486
*              THIS LINE DELETED BY APAR NUMBER                @OZ17486
*              THIS LINE DELETED BY APAR NUMBER                @OZ17486
*              THIS LINE DELETED BY APAR NUMBER                @OZ17486
*              THIS LINE DELETED BY APAR NUMBER                @OZ17486
*              THIS LINE DELETED BY APAR NUMBER                @OZ17486
         SPACE 1                                                     R4
KBLOBS   STC   R2,$BLBTGBA         STORE NEW TGB COUNT               R4
         SPACE 1
***********************************************************************
*                                                                     *
*              INIT TED'S TO BEGIN SEARCH FROM EXTENT START    @OZ60228
*                                 AND                          @OZ60228
*              COUNT THE NO. OF TG'S ALLOCATED IN ALL EXTENTS         *
*                                                                     *
***********************************************************************
         SPACE 1
KBLOBM   L     R1,$SVTGTOT         R1 = TOTAL TG'S AVAILABLE
         L     R3,$SVTFRST         R3 = 1ST TED ADDRESS        @OZ60228
         SLR   R4,R4               CLEAR FOR TG COUNT WORK     @OZ60228
         SPACE 1                                               @OZ60228
         USING TEDDSECT,R3         TED ADDRESSABILTY           @OZ60228
         SPACE 1                                               @OZ60228
KBLBTED  L     R2,$TGMAP           R2 = ADDRESS OF             @OZ60228
         AH    R2,TNMO             R2 = EXTENT START           @OZ60228
         ST    R2,TNCH             SET SEARCH TO EXTENT START  @OZ60228
         BCTR  R2,0                ADDR OF MTGM - 1            @OZ60228
         LH    R7,TNMB             TED'S TOT BYTES IN MAP      @OZ60228
KBLBCNT  IC    R4,0(R2,R7)         R4 = BYTE FROM MAP          @OZ60228
         IC    R4,KNBITB(R4)       R4 = # OF BITS IN BYTE      @OZ60228
         SLR   R1,R4               # OF ALLOCATED TG'S         @OZ60228
         BCT   R7,KBLBCNT          CHECK ALL TED BYTES         @OZ60228
         LA    R3,TEDSIZ(,R3)      R3 = ADDRESS OF NEXT TED    @OZ60228
         CL    R3,$SVTLAST         TEST IF LAST TED PROCESSED  @OZ60228
         BH    KBLBLAST             BRANCH IF ALL PROCESSED    @OZ60228
         L     R7,TNTC             TEST FOR NULL TED           @OZ60228
         LTR   R7,R7                INDICATED BY TNTC = 0      @OZ60228
         BNZ   KBLBTED             BRANCH IF GOOD TED          @OZ60228
         SPACE 1                                               @OZ60228
         DROP  R3                  DROP TED ADDRESABILITY      @OZ60228
         SPACE 1                                               @OZ60228
KBLBLAST ST    R1,$SVTGALC         SAVE # OF ALLOCATED TG'S    @OZ60228
         L     R15,$AQSE           POINT TO OUR QSE                 R41
         TM    QSESTAT-QSEDSECT(R15),QSEACTIV  TERMINATING...       R41
         BZ    KBLBXIT             EXIT IF YES                      R41
         EJECT
***********************************************************************
*                                                                     *
*              IF NO TRK GROUPS, ISSUE SPOOL FULL MESSAGE             *
*                                                                     *
***********************************************************************
         SPACE 1
         L     R0,$SVTGTOT         R0 = TOTAL AVAILABLE
         SR    R0,R1               R0 = CURRENT AVAILABLE
         BNZ   KBLBOFFA            BRANCH IF NOT DEPLETED
         STCK  PCER1               STORE TIME-OF-DAY CLOCK          R41
         L     R0,PCER1            PICK UP 'SECONDS' PORTION        R41
         SRL   R0,5                CONVERT TO 32-SECOND UNITS       R41
         TM    $BLBFLAG,KBLBPERB   'SPOOL FULL' MSG ISSUED...  @OZ27300
         BZ    KBLBFULL            IF NOT, ISSUE MSG IMMEDIATELY    R41
         CL    R0,CKPBTIME         SEE IF ABOUT 30 SEC HAVE PASSED  R41
         BNH   KBLBXIT             EXIT IF NOT                      R41
         SPACE 1                                                    R41
KBLBFULL ST    R0,CKPBTIME         UPDATE TIME STAMP FOR NEXT TIME  R41
         OI    $BLBFLAG,KBLBPERB   SET 'SPOOL FULL' MSG ISSUED @OZ27300
         LR    R9,R14              SAVE LINK REGISTER
         $WTO  KM355,L'KM355,                                          C
               JOB=NO,ROUTE=$LOG+$MAIN,                                C
               CLASS=$ALWAYS,PRI=$HI,                                  C
               WAIT=NO
         LR    R14,R9              RESTORE LINK REGISTER
         B     KBLBXIT             RETURN TO CALLER
         SPACE 1                                                    R41
KBLBOFFA NI    $BLBFLAG,FF-KBLBPERB RESET SPOOL FULL MSG FLAG  @OZ27300
         SPACE 1
***********************************************************************
*                                                                     *
*              BE SURE ENOUGH TG'S FOR TGB                            *
*                                                                     *
***********************************************************************
         SPACE 1
         SLR   R3,R3               CLEAR FOR TGB COUNT         @OZ60228
         IC    R3,$BLBTGBA         R3 = TGB COUNT                    R4
         CR    R0,R3               TEST FOR SUFFICIENT TG'S
         BNL   KBLOBP              BRANCH IF ENOUGH            @OZ60228
         STC   R0,$BLBTGBA          ELSE RESET TO AVAILABLE          R4
         EJECT
         PUSH  PRINT THESE LINES DELETED BY APAR OZ60228       @OZ60228
         PRINT OFF   THESE LINES DELETED BY APAR OZ60228       @OZ60228
*              THIS LINE DELETED BY APAR OZ60228               @OZ60228
*              THIS LINE DELETED BY APAR OZ60228               @OZ60228
*              THIS LINE DELETED BY APAR OZ60228               @OZ60228
*              THIS LINE DELETED BY APAR OZ60228               @OZ60228
*              THIS LINE DELETED BY APAR OZ60228               @OZ60228
*              THIS LINE DELETED BY APAR OZ60228               @OZ60228
*              THIS LINE DELETED BY APAR OZ60228               @OZ60228
*              THIS LINE DELETED BY APAR OZ60228               @OZ60228
*              THIS LINE DELETED BY APAR OZ60228               @OZ60228
*              THIS LINE DELETED BY APAR OZ60228               @OZ60228
*              THIS LINE DELETED BY APAR OZ60228               @OZ60228
*              THIS LINE DELETED BY APAR OZ60228               @OZ60228
*              THIS LINE DELETED BY APAR OZ60228               @OZ60228
*              THIS LINE DELETED BY APAR OZ60228               @OZ60228
*              THIS LINE DELETED BY APAR OZ60228               @OZ60228
*              THIS LINE DELETED BY APAR OZ60228               @OZ60228
*              THIS LINE DELETED BY APAR OZ60228               @OZ60228
*              THIS LINE DELETED BY APAR OZ60228               @OZ60228
         POP   PRINT THESE LINES DELETED BY APAR OZ60228       @OZ60228
         SPACE 1
***********************************************************************
*                                                                     *
*              PREPARE TO ALLOCATE TGB                                *
*                                                                     *
***********************************************************************
         SPACE 1
KBLOBP   SLR   R2,R2               R2 = NO. TG'S                     R4
         IC    R2,$BLBTGBA               FOR TGB                     R4
         L     R5,$SVTTGBA         R5 = TGB START                    R4
         USING TGBDSECT,R5         TGB ADDRESSABILITY
         L     R3,$SVTNEXT         R3 = NEXT MODULE TED
         USING TEDDSECT,R3         TED ADDRESSABILITY
         LA    R6,1                R6 = 1 (FOR BXLE INCR)
         CLM   R8,1,$NUMTGBE       WHERE ANY TG'S USED...      @OZ17486
         BE    KBLOB1              BR IF NO                    @OZ17486
         BAL   R15,KBLBNXT         GET NEXT TED                @OZ17486
         ST    R3,$SVTNEXT         SAVE FOR NEXT ITERATION     @OZ17486
         EJECT
***********************************************************************
*                                                                     *
*              USE TED TO SETUP SEARCH FOR TG                         *
*                                                                     *
***********************************************************************
         SPACE 1
KBLOB1   L     R7,$TGMAP           R7 = MASTER MAP START             R4
         AH    R7,TNMO             R7 = 1ST BYTE THIS EXTENT
         AH    R7,TNMB             R7 = LAST BYTE + 1
         BCTR  R7,0                R7 = LAST BYTE
         L     R8,TNCH             R8 = SEARCH START ADDRESS
         SPACE 1
***********************************************************************
*                                                                     *
*              ALLOCATE TG USING EXTREME ALGORITHM                    *
*                                                                     *
***********************************************************************
         SPACE 1
KBLOB2   CLI   0(R8),0             TEST FOR AVAILABLE TRACK GROUP
         BNE   KBLOB3              BRANCH IF SOMETHING AVAIL
         BXLE  R8,R6,KBLOB2        SEARCH WHOLE MODULE
         BAL   R15,KBLBNXT         GET NEXT TED
         B     KBLOB1               AND TRY AGAIN
         SPACE 1
***********************************************************************
*                                                                     *
*              SAVE NEW SEARCH START, BIT NO. & MASK                  *
*                                                                     *
***********************************************************************
         SPACE 1
KBLOB3   ST    R8,TNCH             SAVE NEW SEARCH START ADDR
         IC    R1,0(,R8)           R1 = ALLOCATION BYTE
         LA    R0,X'FF'            R0 = X'FF' (FOR MASK)
         NR    R0,R1               CLEAR BYTES 0,1 & 2
         LA    R1,X'80'            ASSUME 1ST BIT IS 1
         SR    R7,R7               R7 = 0 (BIT NUMBER)
         SPACE 1                                                    R41
KBLOB4   CR    R1,R0               LOOK FOR 1ST BIT THAT'S = 1
         BNH   KBLOB5              BRANCH WHEN FOUND
         SRL   R1,1                TRY NEXT BIT
         ALR   R7,R6               DING THE BIT NUMBER
         B     KBLOB4               AND REPEAT LOOP
         EJECT
***********************************************************************
*                                                                     *
*              SHOW MASTER MAP ALLOCATION & SET TGB ENTRY             *
*                                                                     *
***********************************************************************
         SPACE 1
KBLOB5   IC    R0,0(,R8)           R0 = ALLOCATION BYTE
         XR    R0,R1               REMOVE TG BIT
         STC   R0,0(,R8)           SHOW TG ALLOCATION
         SL    R8,$TGMAP           R8 = OFFSET WITHIN TRK GROUP MAP  R4
         STH   R8,TGBYTEN          STORE BYTE OFFSET IN TGB
         SH    R8,TNMO             R8 = OFFSET FROM EXTENT
         STC   R1,TGBBITM+1        STORE BIT MASK IN TGB
         SLL   R8,3                RELATIVE BYTE NO. * 8
         ALR   R7,R8                PLUS BIT NO. = TG NO.
         MH    R7,TNTG             R7 = TT (TRACK NO.)
         SLL   R7,8                R7 = 0TT0
         O     R7,TNMD             R7 = MTT0
         IC    R7,=X'01'           R7 = MTTR
         ST    R7,TGBMTTR          STORE IN TGB
         SPACE 1
***********************************************************************
*                                                                     *
*              GET NEXT TED & INCREMENT TG ALLOC COUNT                *
*                                                                     *
***********************************************************************
         SPACE 1
         BAL   R15,KBLBNXT         GET NEXT TED
         L     R1,$SVTGALC         R1 = NUMBER OF TG'S ALLOC
         ALR   R1,R6               DING BY 1
         ST    R1,$SVTGALC          FOR THIS ALLOCATION
         LA    R5,TGBSIZE(,R5)     R5 = NEXT TGB ENTRY
         BCT   R2,KBLOB1           ALLOCATE NEXT TGB ENTRY
         OI    $BLBFLAG,KBLBFILL   SHOW TGB FILLED             @OZ27300
         EJECT
***********************************************************************
*                                                                     *
*              ISSUE WARNING MESSAGE IF % LIMIT REACHED               *
*                                                                     *
***********************************************************************
         SPACE 1
         SLR   R0,R0               R0 = 0 (FOR DIVISION)
         MH    R1,=H'100'          R1 = 100 * NO. ALLOCATED
         D     R0,$SVTGTOT         R1 = % ALLOCATED
         CLM   R1,1,$TGWARN        IS IT WARNING TIME                R4
         BL    KBLBOFFB            BRANCH IF NOT
         STCK  PCER1               STORE TOD CLOCK                  R41
         L     R0,PCER1            PICK UP 'SECONDS' PORTION        R41
         SRL   R0,5                CONVERT TO 32-SECOND UNITS       R41
         CL    R0,CKPBTIME         SEE IF ABOUT 30 SEC HAVE PASSED  R41
         BNH   KBLBXIT             SKIP MESSAGE IF NOT         @OZ27300
         ST    R0,CKPBTIME         UPDATE TIME STAMP FOR NEXT TIME  R41
         CLC   $SVTGALC,$SVTGTOT   IS THE % MEANINGFUL               R4
         BH    KBLBOFFB            IF NOT (INIT NOT COMPLETE)        R4
         LR    R9,R14              SAVE LINK REGISTER
         MVC   CKPMSG(L'KTWMM),KTWMM  MOVE MSG TO WORK AREA         R41
         MVC   CKPMSG+2(4),KTWME   MOVE EDIT PATTERN TO MSG         R41
         CVD   R1,CKPDBL           CONVERT PERCENT TO DECIMAL       R41
         ED    CKPMSG+2(4),CKPDBL+6  EDIT PERCENT INTO MSG          R41
        $WTO   CKPMSG,L'KTWMM,     ISSUE WARNING                    R41C
               ROUTE=$LOG+$MAIN,                                       C
               CLASS=$ALWAYS,PRI=$HI,                                  C
               JOB=NO,WAIT=NO                                       R41
         LR    R14,R9              RESTORE LINK REG
         B     KBLBXIT             BYPASS RESET CODE           @OZ27300
         SPACE 1                                                    R41
KBLBOFFB SLR   R0,R0               SHOW WARNING MESSAGE             R41
         ST    R0,CKPBTIME          NOT ISSUED YET                  R41
                                   PRINT OFF - SECTION DELETED @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
                                   PRINT ON -- SECTION DELETED @OZ27300
         EJECT
***********************************************************************
*                                                                     *
*              RESTORE REGISTERS &RETURN                              *
*                                                                     *
***********************************************************************
         SPACE 1
KBLBXIT  LM    R2,BASE2,PCEWA      RESTORE R2 - R12 FROM PCE   @OZ27300
         BR    R14                 RETURN TO CALLER
         SPACE 1
***********************************************************************
*                                                                     *
*              SUBROUTINE TO SET R3 = NEXT TED ADDRESS                *
*                                                                     *
***********************************************************************
         SPACE 1
KBLBFRO  L     R3,$SVTFRST         POINT TO FIRST TED
         BR    R15                 RETURN TO CALLER
         SPACE 1                                                    R41
KBLBNXT  LA    R3,TEDSIZ(,R3)      STEP TO NEXT TED
         CL    R3,$SVTLAST         TEST FOR STEPPING TOO FAR
         BH    KBLBFRO             BRANCH IF TOO FAR
         OC    TNTC,TNTC           TEST FOR NULL TED
         BNZR  R15                 RETURN IF GOOD TED
         B     KBLBFRO             ELSE, GET FIRST ONE
         SPACE 1
         DROP  R3,R5,JCT,BASE2     DROP ADDRESSABILITY         @OZ27300
         EJECT                                                 @OZ27300
                                   PRINT OFF - SECTION DELETED @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
                                   PRINT ON -- SECTION DELETED @OZ27300
KTWMM    $MSG  093,'NNNN% SPOOL UTILIZATION'
KTWME    DC    X'40202120'         EDIT PATTERN                      R4
KM355M   $MSG  355,'SPOOL VOLUMES ARE FULL'
KM355    EQU   KM355M,*-KM355M
KBLBFILL EQU   X'04'               TGB HAS BEEN FILLED         @OZ27300
KBLBPERB EQU   X'02'               SPOOL FULL MESSAGE FLAG     @OZ27300
KNBITB   DC    AL1(0,1,1,2,1,2,2,3,1,2,2,3,2,3,3,4)    A
         DC    AL1(1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5)    BYTE
         DC    AL1(1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5)    INDEX
         DC    AL1(2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6)    INTO
         DC    AL1(1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5)    THIS
         DC    AL1(2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6)    TABLE
         DC    AL1(2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6)    YIELDS
         DC    AL1(3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7)    THE
         DC    AL1(1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5)    NUMBER
         DC    AL1(2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6)    OF
         DC    AL1(2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6)    BITS
         DC    AL1(3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7)    ON
         DC    AL1(2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6)    IN
         DC    AL1(3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7)    THE
         DC    AL1(3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7)    BYTE
         DC    AL1(4,5,5,6,5,6,6,7,5,6,6,7,6,7,7,8)    INDEX
         EJECT                                                       R4
         LTORG
         TITLE 'HASP PRIORITY AGING PROCESSOR'
HASPGPRC $ENTRY BASE=BASE2         HASP PRIORITY AGING PROCESSOR
         ST    SAVE,GPRTQE+IPOST   SET PCE ADDRESS IN STQE
         LH    R1,$PRIRATE         GET PRIORITY AGING RATE           R4
         LR    R2,R1               SAVE IT                           R4
         SRL   R1,1                COMPUTE                           R4
         AL    R1,GPRINT            AND                              R4
         SLR   R0,R0                 SAVE                            R4
         DR    R0,R2                  AGING                          R4
         LCR   R1,R1                   TIME                          R4
         ST    R1,GPRINT                INTERVAL (COMPLEMENT)        R4
         LR    R1,R2               COMPUTE                           R4
         SRL   R1,1                 AND                              R4
         AL    R1,GPRSEC             SAVE                            R4
         SLR   R0,R0                  TIME                           R4
         DR    R0,R2                   ADJUSTMENT                    R4
         AL    R1,$SYNCTOL              IN                           R4
         ST    R1,GPRSEC                 SECONDS                     R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        SCAN JOB QUEUE FOR ACTIVE JOB                                *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
GPRSTART LA    WB,$JQTYPES*2       PREPARE TO TEST FOR ACTIVE JOB Q
         SPACE 1
         LH    R1,$JQHEADS-2(WB)   GET 1ST ACTIVE JQE OFFSET
         LTR   R1,R1               TEST
         BNZ   GPRTIME             BRANCH IF JOB QUEUE IS NOT EMPTY
         BCTR  WB,0                IF ANOTHER JOB QUEUE,
         BCT   WB,*-12              BR TO TEST IT
         SPACE 1
         $WAIT JOB                 EMPTY, WAIT FOR A JOB
         B     GPRSTART            GO BACK AND TRY AGAIN
         SPACE 1
GPRTIME  L     R1,GPRINT           SET
         ST    R1,GPRTQE+ITIME      AGING TIME                       R4
        $STIMER GPRTQE               INTERVAL                        R4
         $WAIT WORK                WAIT FOR TIME INTERVAL TO EXPIRE
         $QSUSE                    REQUEST ACCESS TO SHARED QUEUES
         STCK  GPRCLOCK            STORE CURRENT CLOCK
         BC    3,GPRSCAN           BRANCH IF INVALID CLOCK
         L     R1,GPRCLOCK         GET CURRENT TIME
         SL    R1,GPRSEC           COMPUTE APPROXIMATE PREVIOUS TIME
         LH    R0,$QSENO           GET COUNT OF MEMBERS IN NODE      R4
         L     R15,$QSE1           GET ADDRESS OF 1ST QSE            R4
         SPACE 1                                                    R41
         USING QSEDSECT,R15        ESTABLISH QSE ADDRESSABILITY
         SPACE 1
GPRQSE   CLC   QSESID,$SID         COMPARE SID'S
         BE    GPRSCAN             BRANCH IF THIS CPU IS 1ST ACTIVE
         CL    R1,QSESITIM         COMPARE TIMES
         BL    GPRTIME             BRANCH IF ANOTHER CPU IS ACTIVE
         LA    R15,QSELEN(,R15)    GET ADDRESS OF NEXT QSE     @OZ27300
         BCT   R0,GPRQSE           BR IF VALID QSE ADDRESS           R4
         SPACE 1                                                     R4
         DROP  R15                 DROP QSE ADDRESSABILITY
         EJECT                                                      R41
GPRSCAN  LA    WB,$JQTYPES*2       PREPARE TO SCAN ALL JOB QUEUES
         SPACE 1                                                     R4
         USING JQEDSECT,R1         JOB QUEUE ADDRESSABILITY
         SPACE 1
GPRQUE1  LH    R1,$JQHEADS-2(WB)   PREPARE TO SCAN NEXT JOB QUEUE
         LA    WC,$PRIHIGH         POINT TO HI/LO PRIO AGING VALUES R41
         CL    WB,GPRHDCPY         TEST FOR $HARDCPY QUEUE,         R41
         BNE   GPRLOOP1              SKIP IF NOT                    R41
         LA    WC,GPRHCPRI         POINT TO $HARDCPY HI/LO VALUES   R41
         SPACE 1
GPRLOOP1 N     R1,=X'0000FFFF'     CLEAR H.O. TWO BYTES AND TEST
         BZ    GPREND1             BRANCH IF END-OF-CHAIN
         SLL   R1,2                EXPAND TO FULL ADDRESS OFFSET
         AL    R1,$JOBQPTR         ADD JOB QUEUE ADDRESS
         CLC   JQEPRIO,0(WC)       COMPARE PRIO WITH UPPER LIMIT    R41
         BL    GPRLOOP2            BRANCH IF LESS
         LH    R1,JQECHAIN         NO, GET OFFSET OF NEXT ELEMENT
         B     GPRLOOP1            TEST NEXT ELEMENT
         SPACE 1
GPREND1  BCTR  WB,0                IF ANOTHER JOB QUEUE,
         BCT   WB,GPRQUE1           BR TO SCAN IT
         B     GPRSTART              ELSE START OVER
         SPACE 1
GPRLOOP2 CLC   JQEPRIO,1(WC)       COMPARE PRIO WITH LOWER LIMIT    R41
         BL    GPREND1             BR IF LESS -- DONE WITH QUEUE     R4
         IC    WA,JQEPRIO          INCREMENT
         LA    WA,1(,WA)            JOB QUEUE
         STC   WA,JQEPRIO            PRIORITY
        $QCKPT (R1)                CHECKPOINT THE JQE                R4
         LH    R1,JQECHAIN         GET OFFSET OF NEXT ELEMENT
         N     R1,=X'0000FFFF'     CLEAR H.O. TWO BYTES AND TEST
         BZ    GPREND1             BRANCH IF END-OF-CHAIN
         SLL   R1,2                EXPAND TO FULL ADDRESS OFFSET
         AL    R1,$JOBQPTR         ADD JOB QUEUE ADDRESS
         B     GPRLOOP2            TEST NEXT ELEMENT
         SPACE 1
GPRCLOCK EQU   PCER1,8             STORAGE FOR CLOCK                 R4
GPRINT   DC    A(540000)           TIME INTERVAL (UNADJUSTED)        R4
GPRSEC   DC    A(5400)             TIME IN SECONDS (UNADJUSTED)      R4
GPRTQE   EQU   PCEWORK             HASP TIMER QUEUE ELEMENT          R4
GPRHDCPY DC    A(4)                OFFSET OF $HARDCPY QUEUE         R41
GPRHCPRI DC    AL1(X'EF',X'10')    $PRIHIGH, $PRILOW FOR $HARDCPY   R41
         SPACE 1
         LTORG
         TITLE 'HASP JOB QUEUE WARM START -- INITIAL ENTRY POINT'
***********************************************************************
*                                                                     *
* PROCESSOR NAME -- HASPWARM                                          *
*                                                                     *
* DESCRIPTIVE NAME -- JES2 JOB QUEUE WARM START PROCESSOR             *
*                                                                     *
* FUNCTION --  PROVIDE WARM START PROCESSING OF THE JES2 JOB QUEUE    *
*              AND JOB OUTPUT TABLE (JOT) FOR ONE OR MORE SYSTEMS     *
*              IN A JES2 NODE.                                        *
*                                                                     *
* NOTES -- 1)  WHILE THIS PROCESSOR IS ACTIVE, THE SYSTEM BEING       *
*              WARM STARTED IS LOCKED TO PREVENT OTHER SYSTEMS        *
*              FROM ATTEMPTING TO WARM START IT.                      *
*                                                                     *
*          2)  MASTER BIT MAP RECONSTRUCTION IS PERFORMED ONLY        *
*              WHEN A WARM START IS BEING PERFORMED ON BEHALF OF      *
*              ALL SYSTEMS IN THE NODE.                               *
*                                                                     *
* REGISTER CONVENTIONS -- R0  -- WORK REGISTER                        *
*                         R1  -- WORK REGISTER                        *
*                         WA  -- WORK/SJB ADDRESS                     *
*                         WB  -- HQT ADDRESS                          *
*                         WC  -- QSE ADDRESS                          *
*                         WD  -- JQE ADDRESS                          *
*                         WE  -- WORK/LINK REGISTER                   *
*                         WF  -- IOT ADDRESS                          *
*                         JCT -- JCT ADDRESS                          *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*        H A S P W A R M   I N I T I A L   E N T R Y   P O I N T      *
*                                                                     *
***********************************************************************
         SPACE 2
NQHQT    EQU   WB                  HQT ADDRESS
NQSE     EQU   WC                  QSE ADDRESS
NQ       EQU   WD                  JQE ADDRESS
NQIOT    EQU   WF                  IOT ADDRESS
NQJCT    EQU   JCT                 JCT ADDRESS
         SPACE 1
         USING QSEDSECT,NQSE       PROVIDE QSE ADDRESSABILITY
         USING IOTDSECT,NQIOT      PROVIDE IOT ADDRESSABILITY
         USING JCTDSECT,NQJCT      PROVIDE JCT ADDRESSABILITY
         USING JQEDSECT,WD         PROVIDE JQE ADDRESSABILITY
         USING $SVDSECT,R15        PROVIDE SSVT ADDRESSABILITY       R4
         SPACE 2                                                     R4
HASPWARM $ENTRY BASE=(BASE2,BASE3) PROVIDE PROCESSOR ENTRY POINT     R4
         SPACE 1
         LA    BASE3,2048(,BASE2)  SET SECOND                        R4
         LA    BASE3,2048(,BASE3)   BASE REGISTER                    R4
         L     R15,$SSVT           POINT TO SSVT                     R4
         TM    $SVHASP,X'80'       TEST FOR JES2 RESTART             R4
         BZ    SKIP20              BR IF NO                          R4
         OI    NQSTAT,NQRESTRT      ELSE INDICATE RESTART            R4
SKIP20   B     NQWARM              THEN BR TO SHOW PROCESSOR ACTIVE
         SPACE 1
***********************************************************************
*                                                                     *
*        $ W A I T   F O R   $ E S Y S   C O M M A N D                *
*                                                                     *
***********************************************************************
         SPACE 1
NQ000   $WAIT  WORK                $WAIT FOR $ESYS COMMAND
         SPACE 1
NQWARM  $ACTIVE                    INDICATE PROCESSOR ACTIVE
         L     NQSE,$ESYSQSE       GET WARM STARTED SYSTEM QSE ADDR
         LH    R1,$NUMRJE          GET NUMBER OF REMOTES             R4
         LTR   R1,R1               TEST COUNT                        R4
         BZ    NQCKCOLD            BR IF NONE                        R4
     TITLE 'HASP JOB QUEUE WARM START -- REMOTE SIGN-ON TABLE RESET'
***********************************************************************
*                                                                     *
*        R E M O T E   S I G N - O N   T A B L E   R E S E T          *
*                                                                     *
***********************************************************************
         SPACE 1
        $QSUSE                     REQUEST ACCESS TO CHECKPOINT DATA
         L     WA,$RMTSON          POINT TO REMOTE SIGN-ON TABLE     R4
         LTR   NQSE,NQSE           IF SPECIFIC SYSTEM WARM START,
         BNZ   NQRMT20              BR TO CLEAR THIS SYSTEM'S IDS
         MH    R1,=H'3'            R1 = SIZE (IN BYTES)              R4
         LA    R1,7(,R1)                 OF REMOTE                   R4
         SRL   R1,3                       SIGN-ON TABLE              R4
         SPACE 1                                                     R4
SKIP30   MVI   0(WA),0             CLEAR                             R4
         LA    WA,1(,WA)            ENTIRE                           R4
         BCT   R1,SKIP30             SIGN-ON TABLE                   R4
         SPACE 1                                                     R4
        $POST  $HASPECF,CKPW       $POST THE CHECKPOINT WRITER
         B     NQCKCOLD            THEN BR TO TEST FOR COLD START
         SPACE 1
NQRMT20  SLR   R0,R0               GET SYSTEM ID
         IC    R0,QSESIBSY          FROM QSE
         SPACE 1
NQRMT40  LA    WB,8                NUMBER OF IDS PER 3-BYTE TBL SEG
         ICM   R15,14,0(WA)        LOAD 3-BYTE SEGMENT FROM TABLE
         SPACE 1
NQRMT60  SLR   R14,R14             IF REMOTE
         SLDL  R14,3                NOT SIGNED ON
         CLR   R0,R14                TO THIS SYSTEM,
         BNE   *+8                    BR TO TEST NEXT REMOTE
         BAL   WE,NQRESET              ELSE RESET SYSTEM ID
         BCT   R1,NQRMT80          BR IF ANOTHER REMOTE TO TEST
         B     NQCKCOLD             ELSE BR TO TEST FOR COLD START
         SPACE 1
NQRMT80  BCT   WB,NQRMT60          BR IF ANOTHER ID IN TABLE SEGMENT
         LA    WA,3(,WA)            ELSE POINT TO NEXT TABLE SEGMENT
         B     NQRMT40               AND BR TO SCAN IT
         EJECT
***********************************************************************
*                                                                     *
*        R E S E T   S I G N - O N   T A B L E   S Y S T E M   I D    *
*                                                                     *
***********************************************************************
         SPACE 1
NQRESET $POST  $HASPECF,CKPW       $POST THE CHECKPOINT WRITER
         LR    R14,WB              A SEPARATE RTN EXISTS TO RESET
         SLL   R14,2                EACH OF THE 8 GROUPS OF 3 BITS
         B     *(R14)                IN THE CURRENT 3-BYTE TBL SEG
         SPACE 1
         B     NQID8               BR TO RESET ID FOR 8TH REMOTE
         B     NQID7               BR TO RESET ID FOR 7TH REMOTE
         B     NQID6               BR TO RESET ID FOR 6TH REMOTE
         B     NQID5               BR TO RESET ID FOR 5TH REMOTE
         B     NQID4               BR TO RESET ID FOR 4TH REMOTE
         B     NQID3               BR TO RESET ID FOR 3RD REMOTE
         B     NQID2               BR TO RESET ID FOR 2ND REMOTE
         SPACE 1
NQID1    NI    0(WA),X'1F'         RESET SYSTEM ID
         BR    WE                   AND RETURN
         SPACE 1
NQID2    NI    0(WA),X'E3'         RESET SYSTEM ID
         BR    WE                   AND RETURN
         SPACE 1
NQID3    NI    0(WA),X'FC'         RESET
         NI    1(WA),X'7F'          SYSTEM ID
         BR    WE                    AND RETURN
         SPACE 1
NQID4    NI    1(WA),X'8F'         RESET SYSTEM ID
         BR    WE                   AND RETURN
         SPACE 1
NQID5    NI    1(WA),X'F1'         RESET SYSTEM ID
         BR    WE                   AND RETURN
         SPACE 1
NQID6    NI    1(WA),X'FE'         RESET
         NI    2(WA),X'3F'          SYSTEM ID
         BR    WE                    AND RETURN
         SPACE 1
NQID7    NI    2(WA),X'C7'         RESET SYSTEM ID
         BR    WE                   AND RETURN
         SPACE 1
NQID8    NI    2(WA),X'F8'         RESET SYSTEM ID
         BR    WE                   AND RETURN
         SPACE 1
NQCKCOLD LTR   NQSE,NQSE           IF SPECIFIC SYSTEM WARM START,
         BNZ   NQTQUICK            BR AROUND COLD START TEST   @OZ41702
         TM    $OPTSTAT,$OPTCOLD+$OPTFMT  IF COLD START,             R4
         BNZ   NQ700                BR AROUND WARM START             R4
         B     NQSETST             ELSE DO NODAL WARM START    @OZ41702
NQTQUICK TM    QSESTAT,QSEQUICK    BYPASS WARM START LOGIC IF  @OZ41702
         BO    NQ700                SYS ALREADY WARM STARTED   @OZ41702
    TITLE 'HASP JOB QUEUE WARM START -- OUTPUT PROCESSOR WARM START'
***********************************************************************
*                                                                     *
*        O U T P U T   P R O C E S S O R   W A R M   S T A R T        *
*                                                                     *
***********************************************************************
         SPACE 1
NQSETST $QSUSE                     REQUEST ACCESS TO CHECKPOINT DATA R4
*                                  THIS CARD DELETED BY APAR   @OZ27300
         LTR   WA,NQSE             IF SINGLE SYSTEM WARM START,
         BNZ   NQSEONE              BR TO TEST SYSTEM STATUS
         L     WA,$QSE1            POINT TO 1ST QSE                  R4
         SPACE 1
NQSENXT1 ICM   WB,15,QSEOPJNO-QSEDSECT(WA)  IF OUTPUT PROCESSOR BSY,
         BNZ   NQSEACTV                      BR TO XFER JOT INFO
         SPACE 1
NQSENEXT TM    QSEFLAGS-QSEDSECT(WA),QSELAST  IF ANOTHER
         LA    WA,QSELEN(,WA)                  QSE,            @OZ27300
         BZ    NQSENXT1                         LOOP,
         B     NQ020                ELSE BR TO WARM START THE JOT
         SPACE 1
NQSEONE  ICM   WB,15,QSEOPJNO      IF SYSTEM NOT IN OUTPUT PROC'G,
         BZ    NQ020                BR TO WARM START THE JOT
         SPACE 1
NQSEACTV L     WE,$QSE1            POINT TO 1ST QSE                  R4
         STCK  NQDBL               GET CURRENT TIME OF DAY
*              THIS LINE DELETED BY APAR OZ66505               @OZ66505
*              THIS LINE DELETED BY APAR OZ66505               @OZ66505
         EJECT                                                       R4
         USING QSEDSECT,WE         ALTER QSE ADDRESSABILITY          R4
         SPACE 1                                                     R4
NQSENXT2 ICM   R0,3,QSEOPJNO       IF OUTPUT PROCESSOR BUSY,         R4
         BNZ   SKIP40               BR TO TEST NEXT QSE              R4
         TM    QSESTAT,QSEACTIV    THIS SYSTEM ACTIVE...       @OZ66505
         BZ    SKIP40              BR IF NO                    @OZ66505
         L     R15,NQDBL           GET TIME                    @OZ66505
         SL    R15,QSESITIM         DIFFERENCE AS              @OZ66505
         LPR   R15,R15               A POSITIVE VALUE          @OZ66505
         CL    R15,$SYNCTOL        IF LESS THAN $SYNCTOL,      @OZ66505
         BNH   NQSEXFER             BR TO TRANSFER JOT INFO          R4
SKIP40   TM    QSEFLAGS,QSELAST    IF ANOTHER                        R4
         LA    WE,QSELEN(,WE)       QSE,                       @OZ27300
         BZ    NQSENXT2              LOOP                            R4
         LR    WE,WA                ELSE POINT TO BUSY QSE
         B     NQSEAFF               AND BR TO ASSIGN SYSTEM AFF
         SPACE 1
NQSEXFER STCM  WB,15,QSEOPJNO               TRANSFER OUTPUT          R4
         SLR   R0,R0                         PROCESSOR WARM
         STCM  R0,15,QSEOPJNO-QSEDSECT(WA)    START INFORMATION
         SPACE 1
NQSEAFF  SRL   WB,16               LOCATE JQE
        $QLOC  (WB),NQSENEXT        FOR JOB
         NI    QUEFLAG2(R1),255-QUESYSAF  ASSIGN SYSTEM
         OC    QUEFLAG2(,R1),QSESIAFF        AFFINITY                R4
        $QCKPT (R1)                FORCE CHECKPOINT OF JQE
         LTR   NQSE,NQSE           IF NODAL WARM START,              R4
         BZ    NQSENEXT             BR TO CONTINUE QSE SCAN
         SPACE 1                                                     R4
         DROP  WE                  RESTORE NORMAL QSE ADDRESSABILITY R4
         TITLE 'HASP JOB QUEUE WARM START -- JOT WARM START'         R4
***********************************************************************
*                                                                     *
*        J O T   W A R M   S T A R T                                  *
*                                                                     *
***********************************************************************
         SPACE 1
         USING JOEDSECT,WA         PROVIDE JOE ADDRESSABILITY
         USING JOTDSECT,WB         PROVIDE JOT ADDRESSABILITY
         SPACE 1
NQ020    L     WB,$JOTABLE         GET ADDRESS OF JOT
         LA    WF,72               MAXIMUM INDEX TO CLASS QUEUE
         SPACE 1
NQ040    LA    WA,JOTCLSQ-2-(JOENEXT-JOEDSECT)(WF)  NEXT CLASS QUEUE
         SPACE 1
NQ060    LH    WA,JOENEXT          GET NEXT WORK JOE OFFSET
         N     WA,=X'0000FFFF'     IF END OF CLASS QUEUE,
         BZ    NQ160                BR TO TEST NEXT CLASS QUEUE
         SLL   WA,2                EXPAND TO BYTE OFFSET       @OZ40028
         LR    WD,WA               SAVE JOE OFFSET             @OZ40028
         ALR   WA,WB               CONVERT OFFSET TO ADDRESS   @OZ40028
         TM    JOEFLAG,$JOEBUSY    IF JOE NOT IN USE,
         BZ    NQ060                BR TO TEST NEXT JOE
         LTR   NQSE,NQSE           IF NODAL WARM START,              R4
         BZ    NQ080                BR TO RESET JOES
         IC    R0,JOEFLAG          IF NOT
         N     R0,=A(QUEBUSY)       SYSTEM BEING
         CLM   R0,1,QSESIBSY         WARM STARTED,
         BNE   NQ060                  BR TO TEST NEXT JOE
         CLI   JOEDEVID,X'0F'      IS XWTR USING THIS JOE      @OZ30706
         BNE   NQ080               SKIP NEXT IF NOT                  R4
         SPACE 1                                                     R4
***********************************************************************
*                                                                     *
*        CHECK IF THE XWTR USING THIS JOE IS STILL ACTIVE             *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         L     R15,$SSVT          GET SSVT ADDRESS                   R4
         LA    WE,$SVJXNUM-(SJBXQCHN-SJBDSECT) SET TO SCAN SJB'S     R4
         SPACE 1                                                     R4
NQ070    L     WE,SJBXQCHN-SJBDSECT(,WE) GET NEXT SJB ADDRESS        R4
         LTR   WE,WE               IS THERE A POSSIBLE XWTR ACTIVE   R4
         BZ    NQ080               BR IF NONE                        R4
         L     R1,SJBPSOP-SJBDSECT(,WE) IF ACTIVE TASK IS XWTR,      R4
         LA    R1,0(,R1)            IT WILL HAVE A PSO ADDR.         R4
         LTR   R1,R1               TEST FOR A PSO ADDR,              R4
         BZ    NQ070                IF NONE, BR TO GET NEXT SJB.     R4
         CLM   WD,7,PSOWKOFF+1-PSODSECT(R1) XWTR FOR THIS JOE..@OZ40028
         BE    NQ060               IF YES BR TO SKIP RESET, OTHERWISER4
         B     NQ070               LOOK FOR ANOTHER XWTR ACTIVE      R4
         SPACE 1                                                     R4
         SPACE 1
NQ080    LH    R1,JOECHAR                POINT TO
         N     R1,=X'0000FFFF'            CHARACTERISTICS
         SLL   R1,2                        JOE                       R4
         LA    WE,JOEACTPR-JOEDSECT(R1,WB)  ACTIVE PRINTER COUNT
         TM    JOEFLAG,$JOEPRT     IF JOB PRINTING LOCALLY,
         BO    NQ100                BR TO DECREMENT COUNT
         TM    JOEFLAG,$JOEPUN     IF JOB NOT PUNCHING LOCALLY,
         BZ    NQ110                BR TO RECOMPUTE PRIORITY        R41
         LA    WE,1(,WE)             ELSE POINT TO ACTIVE PUNCH CT
         SPACE 1
***********************************************************************
*                                                                     *
*        U P D A T E   A C T I V E   D E V I C E   C O U N T          *
*                                                                     *
***********************************************************************
         SPACE 1
NQ100    IC    R0,0(,WE)           DECREMENT
         BCTR  R0,0                 DEVICE
         STC   R0,0(,WE)             COUNT
        $#CKPT JOE=0(,R1)          CHECKPOINT THE CHAR-JOE           R4
         SPACE 1                                                    R41
***********************************************************************
*                                                                     *
*        R E C O M P U T E   J O E   P R I O R I T Y                  *
*                                                                     *
***********************************************************************
         SPACE 1                                                    R41
NQ110    TM    JOEFLAG,$JOECKV     IF NO CKPT INFORMATION,          R41
         BZ    NQ120                 LEAVE PRIORITY ALONE           R41
         LH    R1,JOECKPT          PICK UP CKPT JOE PTR,            R41
         N     R1,=X'0000FFFF'       DELETE SIGN BITS,              R41
         BZ    NQ120                 EXIT IF NO POINTER             R41
         ALR   R1,R1               DEVELOP                          R41
         ALR   R1,R1                 BYTE OFFSET                    R41
         L     R0,JOERECCT         COMPUTE NO OF RECORDS LEFT       R41
         S     R0,JOECRECN-JOEDSECT(R1,WB) TO PRINT OR PUNCH        R41
         BM    NQ120               FORGET IT IF NEGATIVE            R41
         L     R1,$SSVT            POINT TO SSVT,                   R41
         LA    R1,$SVXPRI-4-SSVT(,R1) THEN TO PRIORITY TABLE        R41
         LA    R14,10              SET BCT LOOP COUNTER             R41
         SPACE 1                                                    R41
NQ115    LA    R1,4(,R1)           BUMP TABLE POINTER               R41
         L     R15,0(,R1)          PICK UP TABLE ENTRY,             R41
         LA    R15,0(,R15)           DELETE PRIORITY BYTE           R41
         CLR   R15,R0              SEE IF THIS IS RIGHT SLOT,       R41
         BNL   NQ117                 BRANCH IF SO                   R41
         BCT   R14,NQ115           LOOP THRU TABLE                  R41
         SPACE 1                                                    R41
NQ117    MVC   JOEPRIO,0(R1)       MOVE PRIORITY TO JOE             R41
         EJECT
***********************************************************************
*                                                                     *
*        R E S E T   J O E   F L A G S                                *
*                                                                     *
***********************************************************************
         SPACE 1
NQ120    NI    JOEFLAG,255-$JOEBUSY-$JOEPRT-$JOEPUN  RESET JOE FLAGS
        $#CKPT JOE=0(,R2),TYPE=A   CHECKPOINT THE WORK JOE
        $POST  $HASPECF,CKPW       $POST THE CHECKPOINT WRITER
         LH    NQ,JOEJQE           GET JQE
         N     NQ,=X'0000FFFF'      ADDRESS
         SLL   NQ,2                  FROM
         AL    NQ,$JOBQPTR            JOE
         SLR   WE,WE               ZERO LOCKED INDICATOR       @OZ78811
         CLC   JOEDEVID,$ZEROS     JOE LOCKED BY HASPCOMM...   @OZ78811
         BNE   NQ130               BR IF NOT                   @OZ78811
         ICM   WE,B'1000',=X'FF'    ELSE SET LOCKED INDICATOR  @OZ78811
         B     NQ135                 AND REMOVE JOE FROM JOT   @OZ78811
         SPACE 1                                               @OZ78811
NQ130    TM    JQEFLAGS,QUEPURGE   IF JOB NOT BEING CANCELLED  @OZ78811
         BZ    NQ140                BR TO ISSUE MESSAGE
NQ135   $#REM  WORK=(WA)             ELSE REMOVE JOE FROM JOT  @OZ78811
         SPACE 1
NQ140    LTR   WE,WE               TEST LOCKED INDICATOR       @OZ78811
         BM    NQ040               BR IF LOCKED, GET NEXT JOE  @OZ78811
         LA    R1,NQPRPU           POINT TO PRINT/PUNCH MSG    @OZ78811
         BAL   WE,NQWTO             AND INFORM THE OPERATOR
         B     NQ040               THEN BR TO RE-SCAN THE CLS QUEUE
         SPACE 1
***********************************************************************
*                                                                     *
*        G E T   N E X T   C L A S S   Q U E U E                      *
*                                                                     *
***********************************************************************
         SPACE 1
NQ160    BCTR  WF,0                DECREMENT QUEUE INDEX BY 1
         BCT   WF,NQ040            BR IF ANOTHER CLASS QUEUE
         B     NQPURGE              ELSE BR TO PURGE REQUEST QUEUES
         SPACE 1
         DROP  WA,WB               KILL JOE, JOT ADDRESSABILITY
         TITLE 'HASP JOB QUEUE WARM START -- REQUEST QUEUE PURGE'
***********************************************************************
*                                                                     *
*        P O S T   C A N C E L / S T A T U S ,   P S O   W A I T S    *
*                                                                     *
***********************************************************************
         SPACE 1
         USING SJBDSECT,WA         PROVIDE SJB ADDRESSABILITY
         SPACE 1
NQPURGE  TM    NQSTAT,NQRESTRT     IF WARM STARTING JES2,            R4
         BZ    NQINIT               BR TO WARM START JOB QUEUE       R4
         L     R15,$SSVT           POINT TO SSVT                     R4
         LA    WF,$SVTSCS          POINT TO CANCEL/STATUS QUEUE
         BAL   WE,NQPOST            AND POST ANY WAITING REQUESTORS
         L     R15,$SSVT           POINT TO SSVT                     R4
         LA    WF,$SVPSOQ          POINT TO PSO QUEUE
         BAL   WE,NQPOST            AND POST ANY WAITING REQUESTORS
         B     NQINIT              THEN BR TO WARM START JOB QUEUE   R4
         SPACE 1
NQPOST  $GETLOK ,                  SERIALIZE WITH OTHER DEQUEUERS
         LM    WA,WB,0(WF)         PICK UP QUEUE HEADER
         SPACE 1
NQTESTQ  LTR   WA,WA               TEST FOR EMPTY QUEUE
         BZ    NQUNLOK             BR IF SO
         L     R0,SJBTCHN           ELSE TRY
         LR    R1,WB                 TO DEQUEUE
         CDS   WA,R0,0(WF)            QUEUE ELEMENT
         BNE   NQTESTQ             BR IF UNSUCCESSFUL TO TRY AGAIN
        $FRELOK ,                   ELSE RELEASE LOCK
         POST  ,1,MF=(E,SJBECBP)   POST ABNORMAL COMPLETION
         B     NQPOST              THEN BR TO POST NEXT QUEUE ENTRY
         SPACE 1
NQUNLOK $FRELOK ,                  RELEASE LOCK
         BR    WE                  THEN RETURN
         TITLE 'HASP JOB QUEUE WARM START -- MAIN PROCESSING'
***********************************************************************
*                                                                     *
*        P R E P A R E   T O   S C A N   J O B   Q U E U E            *
*                                                                     *
***********************************************************************
         SPACE 1
         USING HQTDSECT,NQHQT      PROVIDE HQT ADDRESSABILITY
         SPACE 1
NQ200    LH    NQ,$MAXJOBS         PREPARE                     @OZ36307
         STH   NQ,NQJOBCT           TO SCAN                    @OZ36307
         L     NQ,$JOBQPTR           ALL JOBS                  @OZ36307
         LTR   NQSE,NQSE           TEST WARM START REQUIREMENT @OZ27300
         BNZ   NQ210               BR IF SINGLE SYS WARM START @OZ27300
         MVC   $UNSPUNQ,$ZEROS     ALLOW REBUILD OF UNSPUN QUE @OZ27300
         SPACE 1
***********************************************************************
*                                                                     *
*        P R O C E S S   N E X T   J O B   Q U E U E   E N T R Y      *
*                                                                     *
***********************************************************************
         SPACE 1
NQ210    LA    NQ,JQELNGTH(,NQ)    POINT TO NEXT JQE           @OZ36307
         CLI   JQETYPE,$FREE       JOB ON FREE QUEUE...        @OZ36307
         BE    NQ650               BR IF YES TO TEST NEXT JQE  @OZ36307
         TM    JQEHQLOK,QUEBUSY    IF HOLD QUEUE LOCK NOT HELD,@OZ36307
         BZ    NQ650                BR TO TEST NEXT JQE        @OZ36307
                                   PRINT OFF - SECTION DELETED @OZ36307
*                                  THIS CARD DELETED BY APAR   @OZ36307
                                   PRINT ON -- SECTION DELETED @OZ36307
         LTR   NQSE,NQSE           IF NODAL WARM START,              R4
         BZ    NQ220                BR TO TEST QUEUE TYPE
         IC    R0,JQEHQLOK         IF NOT
         N     R0,=A(QUEBUSY)       SYSTEM BEING
         CLM   R0,1,QSESIBSY         WARM STARTED,
         BNE   NQ650                  BR TO TEST NEXT JQE      @OZ36307
         SPACE 1
NQ220    CLI   JQETYPE,$INPUT      TEST FOR JOB ON READER
         BNE   NQ230               BR IF NO
SKIP50   LTR   NQSE,NQSE           IF NODAL WARM START,              R4
         BZ    *+20                 BR TO AVOID SYSTEM TEST
         IC    R0,JQEFLAGS         IF NOT
         N     R0,=A(QUEBUSY)       SYSTEM BEING
         CLM   R0,1,QSESIBSY         WARM STARTED,
         BNE   NQ640                  BR TO TEST NEXT JQE
         LA    R1,NQRDRM           SET 'WAS ON READER' MSG           R4
         EJECT                                                      R41
NQ225    BAL   WE,NQWTO            ISSUE MESSAGE TO OPERATOR        R41
         B     NQ255               THEN BR TO QUEUE JOB FOR PURGE
         SPACE 1                                                    R41
***********************************************************************
*                                                                     *
*        J O B   N O T   O N   R E A D E R                            *
*                                                                     *
***********************************************************************
         SPACE 1
NQ230    LTR   NQSE,NQSE           IF NODAL WARM START,              R4
         BZ    NQ245                BR TO TEST FOR XBM
         IC    R0,JQEFLAGS         ISOLATE SYSTEM ID
         N     R0,=A(QUEBUSY)       (IF ANY)
         CLI   JQETYPE,$PURGE      TEST FOR JOB IN/AWAITING PURGE
         BNE   NQ235               BR IF NO
         CLM   R0,1,QSESIBSY       IF NOT PURGING ON THIS SYSTEM,
         BNE   NQ640                BR TO TEST NEXT JQE
         LA    R0,$PURGE             ELSE RE-QUEUE JOB         @OZ27300
         B     NQ620                  FOR PURGE                @OZ27300
         SPACE 1
NQ235    TM    JQEFLAGS,QUEBUSY    IF JOB
         BZ    *+12                 ACTIVE ON
         CLM   R0,1,QSESIBSY         ANOTHER SYSTEM,
         BNE   NQ260                  BR TO READ THE JCT
         TM    JQETYPE,$XEQ        WAS JOB CONVERTING/EXECUTING...
         BZ    NQ260               BR IF BEYOND THAT TO READ THE JCT
         TM    NQSTAT,NQRESTRT     TEST FOR JES2 RESTART             R4
         BZ    NQ245               BR IF NO
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        R E - S T A R T I N G   - -   T E S T   F O R   S J B        *
*                                                                     *
***********************************************************************
         SPACE 1
         BAL   WE,NQSJBLOC         TRY TO LOCATE SJB FOR JOB
         LTR   WA,WA               TEST FOR SJB
         BZ    NQ243               BRANCH IF NOT FOUND         @OZ45033
         LA    R0,$SVJPNUM         IF STARTING STC
         CL    R0,SJBQUEUE          OR TSU JOB,
         BE    NQ590                 BR TO REQUEUE JOB
         LA    R0,$SVJXNUM         IS SJB FOR AN                     R4
         CL    R0,SJBQUEUE          EXECUTING STC JOB                R4
         BNE   NQ237               BR IF NOT                         R4
         TM    SJBPSOP,X'80'       IS SJB FOR XWTR WAITING ON JOT    R4
         BZ    NQ237               NO, BRANCH                        R4
         IC    R1,$WTRWTCT         YES, GET WTR WAIT COUNT           R4
         LA    R1,1(,R1)            INCREMENT                        R4
         STC   R1,$WTRWTCT          RESTORE COUNT                    R4
         SPACE 1                                               @OZ40028
NQ237    MVC   JQETRAK,SJBJCTRK    UPDATE THE JQE              @OZ56832
*              THIS LINE DELETED BY APAR NUMBER                @OZ56832
*              THIS LINE DELETED BY APAR NUMBER                @OZ56832
*              THIS LINE DELETED BY APAR NUMBER                @OZ56832
*              THIS LINE DELETED BY APAR NUMBER                @OZ56832
         CLC   JQEJOBNO,=H'10000'  IF EXECUTING BY CLASS,
         BL    *+12                 BR TO BUMP ACTIVE COUNT
         TM    JQEFLAG2,QUEINIT    IF SYSTEM LOG OR INITIATOR,
         BO    NQ240                DON'T BUMP ACTIVE COUNT
        $ACTIVE                    INDICATE PROCESSOR ACTIVE
         EJECT
NQ240    ST    NQJCT,PCEBUFAD      SET BUFFER ADDRESS FOR $EXCP      R4
         L     R1,JQETRAK          GET JCT TRACK ADDRESS             R4
         BAL   WE,NQREAD            AND READ IN THE JCT              R4
         L     R15,$SSVT           POINT TO SSVT                     R4
         TM    $SVSTUS,$SVSTXST    IF NOT MONITORING TIME EXCESSIONS
         BZ    NQ270                BR TO TEST FOR SPIN IOTS
         LA    R0,$SVJXCLS         IF JOB NOT
         CL    R0,SJBQUEUE          STILL EXECUTING,
         BNE   NQ270                 BR TO TEST FOR SPIN IOTS
         L     R14,JCTETIME        IF TIME ESTIMATE
         C     R14,=A(24*60*60)     WAS 24 HOURS,
         BNL   NQ270                 BR TO TEST FOR SPIN IOTS
         SPACE 1
***********************************************************************
*                                                                     *
*        R E S U M E   T I M E   E X C E S S I O N   T E S T I N G    *
*                                                                     *
***********************************************************************
         SPACE 1
         L     R0,$XTIMPCE         STORE PCE ADDRESS                 R4
         ST    R0,SJBSTQE+IPOST     IN TQE
         OI    SJBSTQE+IPOST,X'80' PRE-POST TQE
         TIME  BIN                 GET CURRENT DATE AND TIME
         CL    R1,JCTXDTON         ADJUST TIME-OF-DAY
         LR    R1,R0                FOR
         BE    *+8                   NEW
         AL    R1,=A(100*60*60*24)    DAY
         SLR   R0,R0               CLEAR FOR DIVIDE
         SL    R1,JCTXEQON         COMPUTE TIME IN
         D     R0,=A(100)           EXECUTION IN SECONDS
         SR    R1,R14              IF ORIGINAL TIME
         ST    R1,SJBXSTIM          INTERVAL NOT ELAPSED,
         BNP   NQ270                 BR TO TEST FOR SPIN IOTS
         SLR   R0,R0               COMPUTE EXCESSION TIME
         D     R0,=A(60)            IN MINUTES
         ST    R1,SJBXSTIM         STORE IN CASE INTEGRAL MINUTES
         LTR   R0,R0               IF INTEGRAL NUMBER OF MINUTES,
         BZ    NQ270                BR TO TEST FOR SPIN IOTS
         LA    R1,1(,R1)             ELSE UPDATE
         ST    R1,SJBXSTIM            EXCESSION TIME
         LA    R1,60               STORE TIME
         SLR   R1,R0                REMAINING
         ST    R1,SJBSTQE+ITIME      IN MINUTE
        $STIMER  SJBSTQE              AND ISSUE $STIMER
         B     NQ270               THEN BR TO TEST FOR SPIN IOTS
         SPACE 1                                                     R4
         DROP  WA                  KILL SJB ADDRESSABILITY
         SPACE 1                                               @OZ45033
NQ243    CLI   JQETYPE,$XEQ        IF JOB IN CONVERSION,       @OZ45033
         BE    NQ245                BRANCH                     @OZ45033
         TM    JQEFLAGS,QUEBUSY    IF JOB WAITING EXECUTION,   @OZ45033
         BZ    NQ245                BRANCH                     @OZ45033
         NI    JQEFLAG2,255-QUEINIT RESET INIT BIT             @OZ45033
         TM    $STATUS,$INDMODE    IF NOT IN INDEPENDENT MODE  @OZ45033
         BZ    *+8                  CONT. AND DO $QMOD, ELSE   @OZ45033
         OI    JQEFLAG2,QUEINDAF     ALLOW IND MODE SELECTION  @OZ45033
*        SJB NOT FOUND AND JOB IN EXECUTION MEANS JQE          @OZ45033
*        SHOULD BE UPDATED FOR OUTPUT OR PURGE, DEPENDING...   @OZ45033
        $QMOD  (NQ),$OUTPUT     ...ON RESULTS OF $QMOD.        @OZ45033
         CLC   JQEJOBNO,=H'10000'  IS THIS A BATCH JOB...      @OZ75095
         BH    NQ260               IF NOT, BRANCH              @OZ75095
         BAL   WE,NQRELSE          ELSE, RELEASE DUP JOBS      @OZ75095
         EJECT
NQ245    TM    JQETYPE,$XEQ        IF JOB BEYOND EXECUTION,
         BZ    NQ260                BR TO READ THE JCT
         TM    JQEFLAGS,QUEBUSY    IF JOB
         BZ    *+12                 ACTIVE
         CLI   JQETYPE,$XEQ          IN EXECUTION,
         BNE   NQ260                  BR TO READ THE JCT
         LTR   NQSE,NQSE           IF NODAL WARM START,              R4
         BZ    *+16                 BR TO TEST FOR XBM
         IC    R1,QSESIAFF         IF JOB DOES NOT HAVE
         EX    R1,NQTSTAFF          AFFINITY TO THIS SYSTEM,
         BZ    NQ260                 BR TO READ THE JCT
         CLC   JQEJOBNO,=H'10000'  IF STC OR TSU JOB,
         BH    NQ250                BR TO RE-QUEUE JOB FOR PURGE
         CLI   JQETYPE,$XEQ        JOB ON CONVERTER QUEUE...   @OZ38520
         BNE   NQ260               BR IF NO                    @OZ38520
         ST    NQJCT,PCEBUFAD        ELSE
         L     R1,JQETRAK             READ
         BAL   WE,NQREAD               THE JCT
         TM    JCTJBOPT,JCTXBACH   IF NOT XBM JOB,
         BZ    NQ270                BR TO TEST FOR SPIN IOTS
         IC    R0,JCTJCLAS           ELSE REQUEUE
         N     R0,=A(QUECLASS)        JOB FOR
        $QPUT  (NQ),(R0)               EXECUTION
         BAL   WE,NQRELSE          THEN RELEASE ANY DUPLICATE JOBS
         B     NQ270                AND BR TO TEST FOR SPIN IOTS
         SPACE 1
NQ250    NI    JQEFLAG2,255-QUEINIT  RESET INIT BIT
         SPACE 1
NQ255    NI    JQEHQLOK,FF-QUEBUSY REMOVE JOB HOLD QUEUE LOCK  @OZ27300
         MVI   JQEPRIO,FF          SET EXPRESS PRIORITY        @OZ27300
        $QMOD  (NQ),$HARDCPY       RE-QUEUE JOB FOR $HARDCPY   @OZ27300
         LTR   NQSE,NQSE           TEST WARM START REQUIREMENT @OZ27300
         BNZ   NQ650               BR IF SINGLE SYS WARM START @OZ27300
         OC    JQEHQLOK,$SIDBUSY   RESTORE JOB HOLD QUEUE LOCK @OZ27300
         EJECT                                                 @OZ27300
***********************************************************************
*                                                                     *
*        R E A D   I N   J C T   F O R   J O B                        *
*                                                                     *
***********************************************************************
         SPACE 1
NQ260    ST    NQJCT,PCEBUFAD      SET BUFFER ADDRESS FOR $EXCP
         L     R1,JQETRAK          GET JCT TRACK ADDRESS
         BAL   WE,NQREAD            AND READ IN THE JCT
         SPACE 1
***********************************************************************
*                                                                     *
*        T E S T   F O R   S P I N   I O T ( S )                      *
*                                                                     *
***********************************************************************
         SPACE 1
NQ270    MVC   NQHLDCT,$ZEROS      CLEAR VALIDATION HOLD COUNT @OZ27300
         ICM   R1,15,JCTSPIOT      IF NO SPIN IOTS,            @OZ27300
         BZ    NQ530                BR TO CONCLUDE JOB PROCESSING
         SPACE 1                                               @OZ27300
***********************************************************************
*                                                                     *
*        R E M O V E   H Q R   I N - U S E   L O C K S                *
*                                                                     *
***********************************************************************
         SPACE 1
         SLR   NQIOT,NQIOT         INDICATE NO IOT BUFFER
         ST    NQIOT,NQHOLDQ        AND NO HOLD DATA SET REQUESTS
         L     R1,JCTHQT           POINT TO 1ST HQT FOR JOB
         ST    R1,NQHQTRK          SAVE HQT TRACK ADDRESS
         ST    NQHQT,PCEBUFAD      SET BUFFER ADDRESS FOR $EXCP
         LTR   R1,R1               IF VALID HQT ADDRESS,
         BNZ   NQ280                BR TO READ IT IN
         BAL   WE,NQHQTCK            ELSE CREATE DUMMY HQT
         B     NQ300                  AND BR TO RESTORE IOT TRK ADDR
         EJECT                                                 @OZ27300
         USING HQRDSECT,WA         PROVIDE HQR ADDRESSABILITY
         SPACE 1
NQ280    BAL   WE,NQREAD           READ IN THE HQT
         TM    NQSTAT,NQRESTRT     TEST FOR JES2 RESTART             R4
         BO    NQ300               BR IF YES                         R4
         LA    WA,HQTHQR           PREPARE TO SCAN HQT         @OZ19494
         L     R1,HQTHQRP           FOR HQRS REPRESENTING
         ALR   R1,NQHQT              IN-USE HELD               @OZ19494
         B     NQ295                  DATA SETS                @OZ19494
         SPACE 1
NQ290    LA    WA,HQRLENG(,WA)     POINT TO NEXT HQR
NQ295    CLR   WA,R1               IF NO MORE HQRS,            @OZ19494
         BE    NQ300                BR TO TEST FOR ANOTHER HQT
         TM    HQRSTAT,HQRUNHLD    TEST DATASET STATUS         @OZ27300
         BO    NQ290               BR IF DATASET RELEASED      @OZ27300
         LH    R0,NQHLDCT          INCREMENT                   @OZ27300
         AL    R0,=A(X'10')         VALIDATION                 @OZ27300
         STH   R0,NQHLDCT            HOLD COUNT                @OZ27300
         TM    PDBFLAG1-PDBDSECT+HQRPDDB,PDB1DSID  TEST STATUS @OZ27300
         BZ    *+8                 BR IF NOT HELD FOR 3540     @OZ27300
         OI    NQHLDCT+1,JQEHLDDS   ELSE SET 3540 HOLD FLAG    @OZ27300
         TM    HQRSTAT,HQRINUSE    IF DATA SET NOT IN USE,
         BZ    NQ290                BR TO TEST NEXT HQR
         LTR   NQSE,NQSE           IF NODAL WARM START,              R4
         BZ    *+20                 BR TO RESET IN-USE LOCK
         IC    R0,HQRSTAT          IF NOT
         N     R0,=A(QUEBUSY)       SYSTEM BEING
         CLM   R0,1,QSESIBSY         WARM STARTED,
         BNE   NQ290                  BR TO TEST NEXT HQR
         NI    HQRSTAT,255-HQRINUSE    ELSE RESET LOCK
         OI    HQTFLAG1,HQT1CKPT        AND REQUEST HQT CHECKPOINT
         B     NQ290               THEN BR TO TEST NEXT HQR
         SPACE 1
NQ300    L     R1,JCTSPIOT         RESTORE SPIN IOT TRACK ADDRESS
         ICM   R0,15,HQTHQT        IF END OF HQT CHAIN,
         BZ    NQ310                BR TO READ 1ST SPIN IOT
         TM    HQTFLAG1,HQT1CKPT   IF HQT NOT UPDATED,
         BZ    *+8                  BR TO AVOID CHECKPOINT
         BAL   WE,NQHQTWR            ELSE RE-WRITE CURRENT HQT
         L     R1,HQTHQT           THEN RE-LOAD ADDRESS OF NEXT HQT
         ST    R1,NQHQTRK          SAVE NEW HQT TRACK ADDR     @OZ27300
         B     NQ280                AND BR TO READ THE HQT
         SPACE 1
         DROP  WA                  KILL HQR ADDRESSABILITY
         EJECT
NQ310    LTR   NQSE,NQSE           IF NODAL WARM START,              R4
         BZ    NQ320                BR TO READ 1ST SPIN IOT
         TM    JQETYPE,$XEQ        IF JOB
         BZ    NQ500                NOT
         CLI   JQETYPE,$XEQ          EXECUTING
         BE    NQ500                  ON
         IC    R0,JQEFLAGS             WARM
         N     R0,=A(QUEBUSY)           STARTING
         CLM   R0,1,QSESIBSY             SYSTEM,
         BNE   NQ500                      BR TO TEST FOR HOLD REQ'S
         SPACE 1
NQ320    LTR   NQIOT,NQIOT         IF HAVE IOT BUFFER,
         BNZ   NQ340                BR TO READ THE SPIN IOT
         ST    R1,NQIOTTR            ELSE SAVE SPIN IOT TRACK ADDR
         LH    R0,$BUFLENG            AND GET CSA STORAGE            R4
         GETMAIN RC,LV=(0),SP=231      FOR SPIN IOT BUFFER
         LR    NQIOT,R1            RE-LOAD BUFFER ADDRESS
         LTR   R15,R15             IF GETMAIN SUCCESSFUL,
         BZ    NQ330                BR TO READ THE SPIN IOT
         LA    R1,NQCORE             ELSE SET 'AWAITING STORAGE' MSG R4
         BAL   WE,NQWTO               AND INFORM THE OPERATOR
         LA    R0,30               THEN $WAIT
         BAL   WA,NQSTIMER          FOR 30 SECONDS,
         L     R1,NQIOTTR            RESTORE SPIN IOT TRACK ADDRESS,
         SLR   NQIOT,NQIOT            SHOW NO IOT BUFFER,
         B     NQ320                   AND BR TO TRY AGAIN
         SPACE 1                                                     R4
NQ330   $BFRBLD (R1)               CONSTRUCT IOB WITHIN IOT BUFFER
         L     R1,NQIOTTR          RESTORE SPIN IOT TRACK ADDRESS
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        R E A D   I N   S P I N   I O T                              *
*                                                                     *
***********************************************************************
         SPACE 1
         USING PDBDSECT,WA         PROVIDE PDDB ADDRESSABILITY
         SPACE 1
NQ340    ST    NQIOT,PCEBUFAD      SET BUFFER ADDRESS FOR $EXCP
         BAL   WE,NQREAD            AND READ IN THE SPIN IOT
         BZ    NQ342               BRANCH IF VALID IOT READ    @OZ43880
         LTR   NQSE,NQSE           OTHERWISE, CANCEL JOB IF..  @OZ43880
         BZ    NQIOTSCN             ..NODAL WARM START.        @OZ43880
NQ342    LR    WA,NQIOT            POINT TO                    @OZ43880
         AL    WA,$IOTPDDB          DATA SET PDDB                    R4
         TM    PDBFLAG1,PDB1NULL+PDB1NSOT  IF DATASET NOT PRINTABLE,
         BNZ   NQ480                        BR TO GET NEXT SPIN IOT
         CLI   JQETYPE,$PURGE      IF JOB PURGING,
         BE    NQ480                BR TO GET NEXT SPIN IOT
         LR    R0,NQ               GET OFFSET                        R4
         SL    R0,$JOBQPTR          OF JQE                           R4
         CL    R0,IOTJQOFF         IF DATA SET WAS UNALLOCATED,      R4
         BE    NQ350                BR TO SEARCH FOR JOE/HQR   @OZ27300
         TM    NQSTAT,NQRESTRT     IF JES2 RESTART,                  R4
         BO    NQ490                BR TO GET NEXT IOT               R4
         TM    JCTJOBFL,JCTNOJNL   IF JOB WAS JOURNALLED,            R4
         BZ    NQ480                BR TO ALLOCATE DATA SET'S TRACKS R4
         B     NQ470                 ELSE BR TO SPIN DATA SET        R4
         EJECT                                                 @OZ27300
***********************************************************************
*                                                                     *
*        T R Y   T O   F I N D   J O E   F O R   D A T A   S E T      *
*                                                                     *
***********************************************************************
         SPACE 1
         USING JOEDSECT,R1         PROVIDE JOE ADDRESSABILITY
         SPACE 1                                               @OZ27300
NQ350    L     R0,IOTTRACK         GET TRACK ADDRESS FOR SCAN  @OZ27300
         MVI   NQJOE,0             INDICATE NO JOE FOR DATASET @OZ27300
         LA    R1,JQEJOE              PREPARE TO SCAN          @OZ27300
         SH    R1,=Y(JOEJOE-JOEDSECT)  WORK JOES FOR THIS JOB  @OZ27300
         SPACE 1                                               @OZ27300
NQ360    LH    R1,JOEJOE           GET OFFSET OF NEXT JOE      @OZ27300
         N     R1,=X'0000FFFF'     MASK OFF HI-ORDER BYTES     @OZ27300
         BZ    NQ400               BR IF END OF CHAIN          @OZ27300
         SLL   R1,2                EXPAND TO BYTE OFFSET       @OZ27300
         AL    R1,$JOTABLE         ADD JOT ORIGIN              @OZ27300
         CL    R0,JOEIOTTR         REPRESENT THIS DATASET...   @OZ27300
         BNE   NQ360               BR IF NO                    @OZ27300
                                   PRINT OFF - SECTION DELETED @OZ27300
*                                  THIS LINE DELETED BY APAR   @OZ27300
*                                  THIS LINE DELETED BY APAR   @OZ27300
*                                  THIS LINE DELETED BY APAR   @OZ27300
*                                  THIS LINE DELETED BY APAR   @OZ27300
*                                  THIS LINE DELETED BY APAR   @OZ27300
*                                  THIS LINE DELETED BY APAR   @OZ27300
                                   PRINT ON -- SECTION DELETED @OZ27300
         SPACE 1                                               @OZ27300
         MVI   NQJOE,255           INDICATE JOE EXISTS FOR DS  @OZ34024
         TM    JOEFLAG,$JOEBUSY    IF DATA SET PRINTING/PUNCHING,
         BNZ   NQ400               BR TO TEST HOLD REQ'T
         SPACE 1
***********************************************************************
*                                                                     *
*        F O U N D   S P I N   J O E   F O R   D A T A   S E T        *
*                                                                     *
***********************************************************************
         SPACE 1
         TM    JQEFLAGS,QUEPURGE   IF JOB BEING KILLED,
         BO    *+12                 BR TO REMOVE THE JOE
         TM    PDBFLAG1,PDB1PSO    IF JOT CURRENT,
         BO    NQ380                BR TO TEST IOT VALIDITY
        $#REM  WORK=(R1)             ELSE REMOVE JOE FROM JOT        R4
         B     NQ400               THEN BR TO TEST HOLD REQ'T
         SPACE 1
NQ380    DS    0H                                              @OZ34024
         TM    PDBFLAG1,PDB1HOLD   IF IOT VALID,
         BZ    NQ400                BR TO TEST HOLD REQ'T
         NI    PDBFLAG1,255-PDB1HOLD  ELSE INDICATE
         OI    PDBFLAG1,PDB1PSO        DATA SET IN JOT
         L     R1,IOTTRACK         GET IOT TRACK ADDRESS
         BAL   WE,NQWRITE           AND RE-WRITE THE IOT
         SPACE 1
         DROP  R1                  KILL JOE ADDRESSABILITY     @OZ27300
         EJECT
NQ400    TM    NQSTAT,NQRESTRT     IF WARM STARTING JES2,            R4
         BZ    NQ410                BR TO QUEUE SPIN/HOLD REQUEST    R4
         SPACE 1
***********************************************************************
*                                                                     *
*        R E S T A R T   - -   T E S T   S P I N / H O L D   Q U E    *
*                                                                     *
***********************************************************************
         SPACE 1
         L     R15,$SSVT           POINT TO SSVT                     R4
         LR    R0,NQ                        PREPARE
         SL    R0,$JOBQPTR                   TO SCAN
         LA    R14,$SVSPIOT-(IOTIOT-IOTDSECT) SPIN/HOLD              R4
         L     R15,IOTTRACK                    REQUEST QUEUE   @OZ27300
*                                  THIS LINE DELETED BY APAR   @OZ27300
*                                  THIS LINE DELETED BY APAR   @OZ27300
         SPACE 1
         DROP  WA                  KILL PDDB ADDRESSABILITY          R4
         USING IOTDSECT,R14        PROVIDE LOCAL IOT ADDRESSABILITY
         SPACE 1
NQ405    ICM   R14,15,IOTIOT       IF END OF QUEUE,
         BZ    NQ410                BR TO QUEUE SPIN/HOLD REQUEST    R4
         CL    R0,IOTJQOFF                  IF DATA SET
         BNE   NQ405                         NOT REPRESENTED
         CL    R15,IOTTRACK                   ON REQUEST Q,    @OZ27300
         BNE   NQ405                           LOOP
         B     NQ490                            ELSE GET NXT SPN IOT
         SPACE 1
         DROP  R14                 KILL LOCAL IOT ADDRESSABILITY
         EJECT
***********************************************************************
*                                                                     *
*        T R Y   T O   F I N D   H Q R   F O R   D A T A   S E T      *
*                                                                     *
***********************************************************************
         SPACE 1
NQ410    TM    HQTFLAG1,HQT1HQT1   IF 1ST HQT IN STORAGE,            R4
         BO    NQ420                BR TO SCAN FOR HQR
         TM    HQTFLAG1,HQT1CKPT   IF HQT NOT UPDATED,
         BZ    SKIP80               BR TO AVOID CHECKPOINT           R4
         BAL   WE,NQHQTWR            ELSE RE-WRITE CURRENT HQT
SKIP80   L     R1,JCTHQT           POINT TO 1ST HQT FOR JOB
         ST    R1,NQHQTRK          SAVE HQT TRACK ADDRESS
         ST    NQHQT,PCEBUFAD      SET BUFFER ADDRESS FOR $EXCP
         BAL   WE,NQREAD            AND READ IN THE HQT
         SPACE 1
NQ420    LA    WA,HQTHQR           PREPARE                     @OZ19494
         L     R1,HQTHQRP           TO SCAN
         ALR   R1,NQHQT              HQRS
         LR    R15,NQIOT           POINT TO                          R4
         AL    R15,$IOTPDDB         PDDB                             R4
         L     R0,IOTTRACK         GET MTTR OF IOT             @OZ27300
         B     NQ435               BRANCH FOR 1ST HQR          @OZ19494
         SPACE 1
         USING HQRDSECT,WA         PROVIDE HQR ADDRESSABILITY
         SPACE 1
NQ430    LA    WA,HQRLENG(,WA)     POINT TO NEXT HQR
NQ435    CLR   WA,R1               IF END OF HQRS,             @OZ19494
         BE    NQ460                BR TO TEST FOR ANOTHER HQT
         CL    R0,HQRIOT           TEST HQR FOR MATCH          @OZ27300
         BNE   NQ430               BR IF NO                    @OZ27300
         TM    HQRSTAT,HQRINUSE    IF DATA SET IN USE,
         BNZ   NQ490                BR TO GET NEXT SPIN IOT
         TM    HQRSTAT,HQRUNHLD    IF DATA SET NO LONGER HELD,
         BO    NQ450                BR TO TEST SPIN REQ'T
         TM    PDBFLAG1-PDBDSECT(R15),PDB1HOLD+PDB1PSO  TEST PDDB    R4
         BNO   NQ440               BR IF SHOULD UNHOLD HQR
         TM    JQEFLAGS,QUEPURGE   IF JOB BEING KILLED,
         BO    *+12                 BR TO UNHOLD THE DATA SET
         CLI   NQJOE,0             IF NO JOE FOR DATA SET,
         BE    NQ480                BR TO ALLOCATE ITS TRACKS
         NI    PDBFLAG1-PDBDSECT(R15),255-PDB1HOLD  ELSE UNHOLD      R4
         EJECT                                                 @OZ27300
NQ440    OI    HQRSTAT,HQRUNHLD    SHOW DATA SET UN-HELD
         OI    HQTFLAG1,HQT1CKPT    AND FLAG HQT FOR CHECKPOINT
         LH    R0,NQHLDCT          DECREMENT                   @OZ27300
         SL    R0,=A(X'10')         VALIDATION                 @OZ27300
         STH   R0,NQHLDCT            HOLD COUNT                @OZ27300
         LH    R0,JQEHLDCT            DECREMENT
         N     R0,=A(X'FFFF'-QUEBUSY)  JOB
         BZ    NQ450                    HOLD
         LH    R0,JQEHLDCT               COUNT
         SL    R0,=A(X'10')               (IF
         STH   R0,JQEHLDCT                 NECESSARY)
        $QCKPT (NQ)                THEN FORCE CHECKPOINT OF JQE
         BAL   WE,NQHQTWR           AND RE-WRITE UPDATED HQT   @OZ40278
         SPACE 1                                               @OZ27300
         USING PDBDSECT,WA         PROVIDE PDDB ADDRESSABILITY       R4
         SPACE 1                                                     R4
NQ450    CLI   NQJOE,0             IF JOE EXISTS FOR DATA SET,
         BNE   NQ480                BR TO ALLOCATE ITS TRACKS
         LR    WA,NQIOT            POINT TO                          R4
         AL    WA,$IOTPDDB          DATA SET PDDB                    R4
         TM    PDBFLAG1,PDB1PSO    TEST DATASET STATUS         @OZ27300
         BO    NQ452               BR IF HELD OR SPUN          @OZ27300
         TM    PDBFLAG1,PDB1HOLD   TEST DATASET STATUS         @OZ27300
         BZ    NQ480               BR IF DATASET DELETED       @OZ27300
         LTR   NQSE,NQSE           TEST WARM START REQUIREMENT @OZ27300
         BNZ   NQ480               BR IF SINGLE SYS WARM START @OZ27300
         MVC   IOTSPIOT,$UNSPUNQ   LIFO...QUEUE                @OZ40993
         L     R1,IOTTRACK          IOT TO                     @OZ40993
         ST    NQIOT,PCEBUFAD        $UNSPUNQ AND              @OZ40993
         BAL   WE,NQWRITE             WRITE THE IOT            @OZ40993
         BZ    NQ451               BR IF SUCCESSFUL            @OZ42974
         LH    R1,JQEHLDCT         ELSE DECREMENT              @OZ42974
         SL    R1,=A(X'10')         THE HOLD                   @OZ42974
         STH   R1,JQEHLDCT           QUEUE COUNT               @OZ42974
        $QCKPT (NQ)                FORCE CHECKPOINT OF JQE     @OZ42974
         B     NQ472               CHECK IF ALLOCATION IOT     @OZ42974
NQ451    DS    0H                                              @OZ42974
         MVC   $UNSPUNQ,IOTTRACK   UPDATE QUEUE HEAD           @OZ40993
         B     NQ480               BR TO ALLOCATE TRACKS       @OZ40993
         SPACE 1                                               @OZ27300
NQ452    TM    PDBFLAG1,PDB1HOLD   IF DATASET SHOULD BE SPUN,  @OZ27300
         BZ    NQ470                BR TO SPIN IT                    R4
         MVC   IOTIOT,NQHOLDQ       ELSE ADD HOLD REQUEST
         ST    NQIOT,NQHOLDQ         TO TEMPORARY REQUEST QUEUE
         TM    IOTFLAG1,IOT1ALOC   IF NOT ALLOCATION IOT,
         BZ    *+8                  BR TO GET NEXT SPIN IOT
         BAL   WE,NQALLOC            ELSE ALLOCATE DATA SET'S TRACKS
         L     R1,IOTIOTTR         GET TRACK ADDR OF NEXT SPIN IOT
         SLR   NQIOT,NQIOT         INDICATE NO IOT BUFFER
         LTR   R1,R1               IF ANOTHER SPIN IOT,
         BNZ   NQ320                BR TO READ IT IN
         B     NQ500                 ELSE BR TO TEST FOR HOLD REQ'S
         SPACE 1
NQ460    ICM   R1,15,HQTHQT        IF NO MORE HQTS,
         BZ    NQ450                BR TO TEST SPIN/HOLD REQ'TS
         ST    R1,NQHQTRK            ELSE SAVE HQT TRACK ADDRESS
         ST    NQHQT,PCEBUFAD      SET BUFFER ADDRESS FOR $EXCP     R41
         BAL   WE,NQREAD           THEN READ IN THE HQT
         B     NQ420                AND BR TO RESUME HQR SCAN
         EJECT                                                 @OZ27300
NQ470    LR    R1,NQ               STORE
         SL    R1,$JOBQPTR          JQE OFFSET
         ST    R1,IOTJQOFF           IN SPIN IOT
         NI    PDBFLAG1,255-PDB1PSO  INDICATE DATA SET ON            R4
         OI    PDBFLAG1,PDB1HOLD      SPIN QUEUE (NOT IN JOT)        R4
         MVC   IOTSPIOT,$UNSPUNQ   LIFO QUEUE IOT
         L     R1,IOTTRACK          TO SPIN QUEUE
         ST    NQIOT,PCEBUFAD        USING
         BAL   WE,NQWRITE             'COMPARE AND SWAP'
         BZ    NQ475               BR IF SUCCESSFUL            @OZ42974
NQ472    TM    IOTFLAG1,IOT1ALOC   IF NOT ALLOCATION IOT       @OZ42974
         BNO   NQ495                GET NEXT IOT               @OZ42974
         BAL   WE,NQALLOC          ALLOCATE TRACKS IN BIT MAP  @OZ42974
         B     NQ495               GET NEXT IOT                @OZ42974
NQ475    DS    0H                                              @OZ42974
         CLC   IOTSPIOT,$UNSPUNQ   IF QUEUE HEAD CHANGED,
         BNE   NQ470                BR TO REQUEUE IOT
         MVC   $UNSPUNQ,IOTTRACK     ELSE UPDATE QUEUE HEAD
         LH    R1,JQEHLDCT         INCREMENT                   @OZ27300
         AL    R1,=A(X'10')         HOLD                       @OZ27300
         STH   R1,JQEHLDCT           COUNT                     @OZ27300
        $QCKPT (NQ)                THEN FORCE CHECKPOINT OF JQE
*                                  THIS CARD DELETED BY APAR   @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
         SPACE 1                                               @OZ27300
NQ480    TM    IOTFLAG1,IOT1ALOC   IF NOT ALLOCATION IOT,
         BZ    *+8                  BR TO GET NEXT SPIN IOT
         BAL   WE,NQALLOC          ALLOCATE TRACKS IN IOT BIT MAP
NQ490    LR    WA,NQIOT            POINT TO                    @OZ27300
         AL    WA,$IOTPDDB          DATASET PDDB               @OZ27300
         TM    PDBFLAG1,PDB1PSO+PDB1NULL+PDB1NSOT  TEST STATUS @OZ27300
         BNZ   NQ495               BR IF HQR, JOE OR NON-PRINT @OZ27300
         TM    PDBFLAG1,PDB1HOLD   TEST DATASET STATUS         @OZ27300
         BZ    NQ495               BR IF DATASET DELETED       @OZ27300
         LH    R0,NQHLDCT          INCREMENT                   @OZ27300
         AL    R0,=A(X'10')         VALIDATION                 @OZ27300
         STH   R0,NQHLDCT            HOLD COUNT                @OZ27300
         SPACE 1                                               @OZ27300
         DROP  WA                  KILL PDDB ADDRESSABILITY    @OZ27300
         SPACE 1                                               @OZ27300
NQ495    ICM   R1,15,IOTIOTTR      IF ANOTHER SPIN IOT,        @OZ27300
         BNZ   NQ320                BR TO READ IT IN           @OZ27300
         EJECT                                                 @OZ27300
***********************************************************************
*                                                                     *
*        N O   M O R E   S P I N   I O T S                            *
*                                                                     *
***********************************************************************
         SPACE 1
         LH    R0,$BUFLENG         FREE                              R4
         ICM   R0,8,=AL1(231)       CURRENT
         LR    R1,NQIOT              IOT
         FREEMAIN R,LV=(0),A=(1)      BUFFER
         SPACE 1
NQ500    L     R15,$SSVT           POINT TO SSVT                     R4
         MVC   NQDBL(4),$SVHOLDQ   SAVE CURRENT HOLD QUEUE HEAD      R4
         XC    $SVHOLDQ,$SVHOLDQ   ZERO CURRENT HOLD QUEUE HEAD
         SPACE 1
NQ505    ICM   NQIOT,15,NQHOLDQ    IF NO HOLD REQUESTS,
         BZ    NQ510                BR TO TEST FOR HQT UPDATE
         TM    IOTFLAG1,IOT1NTPR   WAS IOT PROCESSED...        @OZ35742
         BZ    NQCNTOK             BR IF YES, DON'T COUNT TWICE@OZ35742
         ST    NQIOT,PCEBUFAD      SET BUFFER ADDR. FOR $EXCP  @OZ35742
        $BFRBLD (NQIOT)            BUILD IOB IN THE IOT        @OZ35742
         NI    IOTFLAG1,255-IOT1NTPR  RESET NOT PROCESSED FLAG @OZ35742
         L     R1,IOTTRACK         GET SEEK ADDRESS FOR $EXCP  @OZ35742
         BAL   WE,NQWRITE          RE-WRITE IOT                @OZ35742
         TM    BUFECBCC-BUFDSECT(NQIOT),X'7F'  GOOD WRITE...   @OZ35742
         BM    NQ505               BR IF NO, BAD IOT           @OZ35742
         LH    R1,JQEHLDCT           ELSE BUMP
         AL    R1,=A(X'10')           HOLD
         STH   R1,JQEHLDCT             COUNT
        $QCKPT (NQ)                     AND FORCE CHECKPOINT OF JQE
         LH    R1,NQHLDCT          INCREMENT                   @OZ40993
         AL    R1,=A(X'10')         VALIDATION                 @OZ40993
         STH   R1,NQHLDCT            HOLD COUNT                @OZ40993
NQCNTOK  DS    0H                                              @OZ35742
         L     R15,$SSVT           POINT TO SSVT                     R4
         MVC   NQHOLDQ,IOTIOT               THEN PREPARE TO
         LH    R0,IOTHQRCT                   QUEUE REQUEST TO
         LA    WA,$SVHOLDQ-(IOTIOT-IOTDSECT)  OFFICIAL HOLD RQST Q
         SPACE 1
         LR    WE,WA                     LOCATE APPROPRIATE
         ICM   WA,15,IOTIOT-IOTDSECT(WE)  QUEUE POSITION
         BZ    *+12                        USING
         CH    R0,IOTHQRCT-IOTDSECT(,WA)    ORDER OF
         BH    *-14                          UNALLOCATION
         SPACE 1
         ST    NQIOT,IOTIOT-IOTDSECT(,WE)  QUEUE NEW
         ST    WA,IOTIOT                    HOLD REQUEST AND LOOP
         B     NQ505                         UNTIL ALL REQUESTS Q'D
         SPACE 1
NQ510    LA    R1,$SVHOLDQ-(IOTIOT-IOTDSECT)  PREPARE TO SCAN QUEUE
         SPACE 1
         LR    NQIOT,R1            CHAIN TO
         ICM   R1,7,IOTIOT+1        END OF
         BNZ   *-6                   HOLD QUEUE
         SPACE 1
         MVC   IOTIOT,NQDBL        ADD PRIOR ELEMENTS TO END OF Q
         EJECT
***********************************************************************
*                                                                     *
*        T E S T   L O C A L   H O L D   Q U E U E                    *
*                                                                     *
***********************************************************************
         SPACE 1
NQ515    TM    HQTFLAG1,HQT1CKPT   IF HQT NOT UPDATED,
         BZ    *+8                  BR TO AVOID CHECKPOINT
         BAL   WE,NQHQTWR            ELSE RE-WRITE CURRENT HQT
         L     R15,$SSVT           POINT TO SSVT                     R4
         ICM   NQIOT,15,$SVHOLDQ   IF NO
         BZ    NQ530                REMAINING
         LR    R1,NQ                 HOLD REQUESTS
         SL    R1,$JOBQPTR            FOR
         CL    R1,IOTJQOFF             CURRENT JOB,
         BNE   NQ530                    BR TO READ 1ST REGULAR IOT
         MVC   NQDBL(1),JQEHQLOK     ELSE SAVE CURRENT
         NI    NQDBL,QUEBUSY          JOB HOLD QUEUE LOCK
         NI    JQEHQLOK,255-QUEBUSY    AND REMOVE LOCK FROM JQE
        $QCKPT (NQ)                FORCE CHECKPOINT OF JQE
         L     R1,$HOLDPCE         GET HOLD QUEUE PROCESSOR PCE ADDR R4
        $POST  (R1),WORK            AND WAKE HIM UP
         SPACE 1
NQ520   $WAIT  ABIT                $WAIT A LITTLE WHILE
        $QSUSE                     REQUEST ACCESS TO CHECKPOINT DATA
         TM    JQEHQLOK,QUEBUSY    IF LOCK STILL HELD,
         BNZ   NQ520                BR TO $WAIT SOME MORE
         OC    JQEHQLOK,NQDBL        ELSE GRAB THE LOCK
        $QCKPT (NQ)                   AND FORCE CKPT OF JQE
         B     NQ515               THEN BR TO RETEST FOR HOLD REQ'S
         EJECT                                                 @OZ27300
***************************************************************@OZ27300
*                                                              @OZ27300
*        VALIDATE JOB HOLD COUNT                               @OZ27300
*                                                              @OZ27300
***************************************************************@OZ27300
         SPACE 1                                               @OZ27300
NQ530    LTR   NQSE,NQSE           TEST WARM START CONDITION   @OZ27300
         BNZ   NQ535               BR IF SINGLE SYS WARM START @OZ27300
         LH    R0,JQEHLDCT         GET JOB                     @OZ27300
         SRL   R0,4                 HOLD COUNT                 @OZ27300
         LH    WE,NQHLDCT          GET VALIDATION              @OZ27300
         SRL   WE,4                 HOLD COUNT                 @OZ27300
         CLR   R0,WE               TEST JOB HOLD COUNT         @OZ27300
         BE    NQ535               BR IF VALID                 @OZ27300
         MVC   JQEHLDCT,NQHLDCT    UPDATE JOB HOLD COUNT       @OZ27300
         OC    JQEHQLOK,$SIDBUSY   RESTORE HOLD QUEUE LOCK     @OZ27300
        $QCKPT (NQ)                FORCE CHECKPOINT OF JQE     @OZ27300
         LA    R1,NQHQRM           SET 'HOLD QUEUE ERROR' MSG  @OZ27300
         BAL   WE,NQWTO             AND INFORM THE OPERATOR    @OZ27300
         EJECT                                                 @OZ27300
***********************************************************************
*                                                                     *
*        P R O C E S S   1 S T   R E G U L A R   I O T                *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NQ535    LTR   NQSE,NQSE           IF NODAL WARM START,        @OZ27300
         BZ    NQ540                BR TO READ 1ST REGULAR IOT
         TM    JQEFLAGS,QUEBUSY    IF JOB
         BZ    NQ610                NOT
         IC    R0,JQEFLAGS           ACTIVE ON
         N     R0,=A(QUEBUSY)         WARM STARTED
         CLM   R0,1,QSESIBSY           SYSTEM,
         BNE   NQ640                    BR TO TEST NEXT JQE
         SPACE 1                                                     R4
NQ540    L     NQIOT,NQIOTBF       GET BUFFER ADDRESS FOR IOT
         ST    NQIOT,PCEBUFAD      SET BUFFER ADDRESS FOR $EXCP
         L     R1,JCTIOT           GET TRK ADDR OF 1ST REGULAR IOT
         BAL   WE,NQREAD            READ IT IN AND
         BZ    NQ542               BRANCH IF VALID IOT READ    @OZ43880
         LTR   NQSE,NQSE           OTHERWISE, CANCEL JOB IF..  @OZ43880
         BZ    NQIOTSCN             ..NODAL WARM START.        @OZ43880
NQ542    BAL   WE,NQALLOC         ALL. ITS DATA SETS' TRACKS   @OZ43880
         TM    JQETYPE,$XEQ        IF BEYOND EXECUTION,
         BZ    NQ590                BR TO REQUEUE THE JOB
         CLI   JQETYPE,$XEQ        IF JOB IN OR AWAITING CONVERSION,
         BE    NQ590                BR TO REQUEUE THE JOB
         TM    NQSTAT,NQRESTRT     IF RESTARTING JES2,               R4
         BO    NQ590                BR TO ISSUE 'WAS EXECUTING' MSG
         L     WE,$IOTPDDB           POINT TO                        R4
         LA    WE,IOTPDBOJ(WE,NQIOT)  JCL DATA SET PDDB              R4
         TM    PDBFLAG1-PDBDSECT(WE),PDB1NULL  TEST JCL FILE         R4
         BZ    NQ550               BR IF JCL STILL ALLOCATED
         OC    PDBMTTR-PDBDSECT(,WE),PDBMTTR-PDBDSECT(WE)            R4
         BZ    NQ550               BR IF NO JCL FILE (REQ JOB ID)
         LA    R1,NQTERM           SET 'WAS TERMINATING' MSG         R4
         BAL   WE,NQWTO             AND INFORM THE OPERATOR
         B     NQ585               THEN BR TO RE-QUEUE JOB           R4
         SPACE 1
NQ550    TM    JQEFLAGS,QUEBUSY    IF JOB AWAITING EXECUTION,
         BZ    NQ640                BR TO TEST NEXT JQE
         LA    R1,NQEXEC           SET 'WAS EXECUTING' MSG           R4
         BAL   WE,NQWTO             AND INFORM THE OPERATOR          R4
         MVI   JCTJSFLG,SSJSWARM   SET WARM START BIT                R4
         TM    JCTJOBFL,JCTNOJNL   IF JOB WAS JOURNALLED,            R4
         BZ    NQ580                BR TO RE-WRITE THE JCT           R4
         TM    JCTJOBFL,JCTRSTRT   IF JOB NOT RESTARTABLE,           R4
         BZ    NQ585                BR TO RE-QUEUE FOR OUTPUT        R4
         OI    JCTJBOPT,JCTRERUN   INDICATE RE-RUN REQUEST          R41
         MVI   JCTJSFLG,0          RESET RESTART FLAGS               R4
         XC    JCTJSSTP,JCTJSSTP    AND RESTART STEP IN JCT          R4
         XC    JCTLINES,JCTLINES   RESET LINE COUNT            @OZ29915
         XC    JCTPUNCH,JCTPUNCH   RESET PUNCH OUTPUT COUNT    @OZ29915
         XC    JCTXOUT,JCTXOUT     RESET TOTAL OUTPUT COUNT    @OZ29915
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        RE-QUEUE NON-JOURNALLED RESTARTABLE JOB FOR RE-EXECUTION     *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NQ555    LH    R0,JCTPDDBO         GET DD NUMBER OF 1ST OUTPUT PDDB  R4
         L     R1,$IOTPDDB         GET OFFSET OF 1ST PDDB IN IOT     R4
         SPACE 1                                                     R4
NQ560    CL    R1,IOTPDDBP         IF NO MORE PDDBS IN THIS IOT,     R4
         BNL   NQ570                BR TO TEST FOR ANOTHER IOT       R4
         CH    R0,PDBDSKEY-PDBDSECT(R1,NQIOT)  1ST OUTPUT PDDB...    R4
         BL    NQ565               BR IF YES (NO SYSIN DDS).   @OZ26726
         LA    R1,PDBLENG(,R1)     POINT TO NEXT PDDB IN ANY CASE    R4
         BH    NQ560               BR IF NOT LAST DD * / DATA  @OZ26726
NQ565    DS    0H                                              @OZ26726
         ST    R1,IOTPDDBP         RESET OFFSET IN IOT               R4
         XC    IOTIOTTR,IOTIOTTR   TRUNCATE IOT CHAIN                R4
         XC    IOTIOT,IOTIOT       TRUNCATE BUFFER CHAIN       @OZ43003
         L     R1,IOTTRACK         GET TRACK ADDRESS OF IOT          R4
         BAL   WE,NQWRITE           AND RE-WRITE IT                  R4
         B     NQ580               THEN BR TO RE-WRITE THE JCT       R4
         SPACE 1                                                     R4
NQ570    ICM   R1,15,IOTIOTTR      GET TRACK ADDRESS OF NEXT IOT     R4
         BZ    NQ580               BR IF END OF IOT CHAIN            R4
         BAL   WE,NQREAD            ELSE READ IN THE IOT             R4
         B     NQ555                 AND RESUME SEARCH               R4
         SPACE 1                                                     R4
NQ580    ST    NQJCT,PCEBUFAD      SET BUFFER ADDRESS FOR $EXCP      R4
         L     R1,JQETRAK          GET TRACK ADDRESS OF JCT          R4
         BAL   WE,NQWRITE           AND RE-WRITE THE JCT             R4
         BNZ   NQ585               BR IF I/O ERROR             @OZ39489
         LA    R1,NQREQU           POINT TO 'JOB REQUEUED' MSG       R4
         BAL   WE,NQWTO             AND INFORM THE OPERATOR          R4
         TM    JCTJOBFL,JCTNOJNL   IF JOB WAS JOURNALLED,            R4
         BZ    NQ595                BR TO SET SYSTEM AFFINITY        R4
         BAL   WE,NQRELSE          RELEASE ANY DUPLICATE JOBS        R4
         B     NQ600               BR TO RE-QUEUE JOB FOR EXECUTION  R4
         EJECT                                                       R4
NQ585    BAL   WE,NQRELSE          RELEASE ANY DUPLICATE JOBS        R4
         CLC   JQEJOBNO,=H'10000'  IF BATCH JOB,
         BL    *+8                  BR AROUND NEXT INSTRUCTION
         NI    JQEFLAG2,255-QUEINIT  ELSE RESET INIT BIT
         LA    R0,1*16             STARTING PRIORITY = 1       @OZ27492
         TM    JCTJBOPT,JCTPRICD   /*PRIORITY, OR 'PRTY='...   @OZ27492
         BNO   NQ588               BRANCH IF NOT, USE '1'      @OZ27492
         CLI   JQEPRIO,13*16       CHECK FOR HIGH PRIORITY     @OZ27492
         BL    NQ588               BRANCH IF NOT, USE '1'      @OZ27492
         LA    R0,15*16            RESET PRIORITY TO MAX       @OZ27492
NQ588    DS    0H                                              @OZ27492
         STC   R0,JQEPRIO          SET NEW PRIORITY IN JQE     @OZ27492
         LA    R0,$OUTPUT          THEN RE-QUEUE JOB           @OZ27300
         B     NQ620                FOR OUTPUT                 @OZ27300
         SPACE 1                                                     R4
NQ590    TM    JQEFLAGS,QUEBUSY    IF JOB NOT ACTIVE,
         BZ    NQ610                BR TO TEST JOB FOR PURGE
         TM    JQETYPE,$XEQ        IF JOB
         BZ    NQ600                NOT IN
         CLI   JQETYPE,$XEQ          EXECUTION,
         BE    NQ600                  BR TO REQUEUE JOB
         LA    R1,NQEXEC           SET 'WAS EXECUTING' MSG           R4
         BAL   WE,NQWTO             AND INFORM THE OPERATOR
         TM    NQSTAT,NQRESTRT     IF RESTARTING JES2,               R4
         BO    NQ640                BR TO TEST NEXT JQE
         SPACE 1                                                     R4
NQ595    NI    JQEFLAG2,255-QUESYSAF  ENSURE                         R4
         IC    R1,JQEFLAGS             JOB                           R4
         N     R1,=A(QUEBUSY)           RE-EXECUTED
         LA    R1,NQSYSAF(R1)            ON SAME
         OC    JQEFLAG2,0(R1)             SYSTEM
         BAL   WE,NQRELSE          THEN RELEASE ANY DUPLICATE JOBS
         EJECT                                                       R4
NQ600    IC    R0,JQETYPE          REQUEUE THE JOB
         B     NQ620                TO CURRENT QUEUE           @OZ27300
         SPACE 1
NQ610    LH    R0,JQEHLDCT         GET CURRENT
         SRA   R0,4                 HOLD COUNT                 @OZ27300
         BNZ   NQ640               BR IF NON-ZERO              @OZ27300
         CLC   JQEJOE,$ZEROS       ANY NON-HELD OUTPUT...      @OZ27300
         BNE   NQ640               BR IF NO                    @OZ27300
         CLI   JQETYPE,$HARDCPY    TEST FOR HARDCPY PHASE
         BNE   NQ640               BR IF NO TO TEST NEXT JQE
         LA    R0,$PURGE           RE-QUEUE JOB FOR PURGE      @OZ27300
         SPACE 1
NQ620    NI    JQEHQLOK,FF-QUEBUSY REMOVE JOB HOLD QUEUE LOCK  @OZ27300
        $QPUT  (NQ),(R0)           RE-QUEUE THE JOB            @OZ27300
         B     NQ650               BR TO GET NEXT JOB          @OZ27300
         SPACE 1
***********************************************************************
*                                                                     *
*        G E T   N E X T   J O B   Q U E U E   E N T R Y              *
*                                                                     *
***********************************************************************
         SPACE 1
NQ640    NI    JQEHQLOK,255-QUEBUSY  REMOVE JOB HOLD QUEUE LOCK
        $QCKPT (NQ)                   AND FORCE CHECKPOINT OF JQE
         SPACE 1                                                    R41
                                   PRINT OFF - SECTION DELETED @OZ36307
*                                  THIS CARD DELETED BY APAR   @OZ36307
*                                  THIS CARD DELETED BY APAR   @OZ36307
*                                  THIS CARD DELETED BY APAR   @OZ36307
*                                  THIS CARD DELETED BY APAR   @OZ36307
                                   PRINT ON -- SECTION DELETED @OZ36307
NQ650    LH    R1,NQJOBCT          DECREMENT AND               @OZ36307
         BCTR  R1,0                 STORE COUNT OF             @OZ36307
         STH   R1,NQJOBCT            REMAINING JQES            @OZ36307
         LTR   R1,R1               ANY JQE REMAINING...        @OZ36307
         BNZ   NQ210               BR IF YES TO PROCESS IT     @OZ36307
         EJECT                                                      R41
***********************************************************************
*                                                                     *
*  IF NODAL WARM START -- REALLOCATE NEWS TRACKS, IF ANY       @OZ39639
*                                                                     *
***********************************************************************
         SPACE 1                                                    R41
NQ670    LTR   NQSE,NQSE           SINGLE SYSTEM WARM START...      R41
         BNZ   NQ700               EXIT IF YES                      R41
         CLC   $NEWSIOT,$ZEROS     JESNEWS DATA SET EXIST...   @OZ39639
         BE    NQ700               BR IF NO                    @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
         SPACE 1                                                    R41
         L     NQIOT,NQIOTBF       POINT TO BUFFER WITH IOT REG     R41
         ST    NQIOT,PCEBUFAD      SET BUFFER ADDR FOR READ         R41
         MVI   PCEDEVTP,PCEDARD    SET DA DCT TO 'READ'             R41
         MVC   PCESEEK,$NEWSIOT    SET SEEK ADDRESS FOR READ        R41
         LA    R1,PCEDADCT         POINT TO DA DCT                  R41
        $EXCP  (R1),WAIT=YES       READ IN IOT, WAIT FOR COMPLETION R41
         BNO   NQNEWSX1            BRANCH IF READ ERROR             R41
         CLC   NQNIOTKY,IOTJBKEY   VALIDATE 'JOB' KEY               R41
         BE    NQ680               BRANCH IF NEWS IOT               R41
         SPACE 1                                                    R41
NQNEWSX1 $DISTERR                  INDICATE CONTROL BLOCK ERROR     R41
        $QSUSE                     OBTAIN CONTROL OF QUEUES         R41
         XC    $NEWSIOT(8),$NEWSIOT CLEAR OUT HCT POINTERS IF ERROR R41
        $POST  $HASPECF,CKPT       FORCE CHECKPOINT                 R41
         B     NQ700               EXIT FROM NEWS PROCESSING        R41
         SPACE 1                                                    R41
NQ680    BAL   WE,NQALLOC          ALLOCATE OLD NEWS' TRACKS AGAIN  R41
         B     NQ700               EXIT FROM NEWS PROCESSING        R41
         SPACE 2                                               @OZ39639
NQNEWSKY DC    CL6'$$NEWS'         SPECIAL JOB/DS KEY FOR NEWS @OZ39639
NQNIOTKY EQU   NQNEWSKY,4          SPECIAL JOB    KEY FOR NEWS @OZ39639
         TITLE 'HASP JOB QUEUE WARM START -- SUPPORT ROUTINES'
***********************************************************************
*                                                                     *
*        $ W A I T   P R O C E S S O R   F O R   N   S E C O N D S    *
*                                                                     *
*                                                                     *
*              TIME INTERVAL PROVIDED IN R0                           *
*              RETURN CODE N/A                                        *
*                                                                     *
***********************************************************************
         SPACE 3
         CNOP  0,8
NQSTIMER LA    R1,NQTQE            POINT TO PROCESSOR TQE
         ST    R0,ITIME(,R1)       STORE TIME INTERVAL
         ST    SAVE,IPOST(,R1)     SET POST ADDRESS IN TQE
        $STIMER (R1)               ISSUE STIMER
        $WAIT  WORK                $WAIT FOR INTERVAL TO ELAPSE
         BR    WA                  THEN RETURN
         EJECT
***********************************************************************
*                                                                     *
*        R E A D / W R I T E   A   C T L   B L O C K                  *
*                                                              @OZ39489
* INPUT  R0    - WORK                                          @OZ39489
*        R1    - SEEK ADDRESS                                  @OZ39489
*        WE    - RETURN ADDRESS                                @OZ39489
*                                                              @OZ39489
* OUTPUT CC     ZERO IF I/O     SUCCESSFUL                     @OZ39489
*        CC NON-ZERO IF I/O NOT SUCCESSFUL                     @OZ39489
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NQREAD   MVI   PCEDEVTP,PCEDARD    INDICATE READ OPERATION
         B     NQEXCP               AND GO DO IT
         SPACE 1
NQHQTWR  NI    HQTFLAG1,255-HQT1CKPT  RESET CHECKPOINT FLAG
         ST    NQHQT,PCEBUFAD      SET BUFFER ADDRESS FOR $EXCP
         L     R1,NQHQTRK          LOAD HQT TRACK ADDRESS
         SPACE 1
NQWRITE  MVI   PCEDEVTP,PCEDAWR    INDICATE WRITE OPERATION
         SPACE 1
NQEXCP   ST    R1,PCESEEK          SET SEEK ADDRESS FOR $EXCP
         LA    R1,PCEDADCT         GET DIRECT ACCESS DCT ADDRESS
        $EXCP  (R1),WAIT=YES        AND READ/WRITE CTL BLOCK         R4
        $QSUSE                     REQUEST ACCESS TO CHECKPOINT DATA
         TM    BUFECBCC-BUFDSECT(R1),X'7F'  RE-TEST I/O COMPLETION
         BM    NQDSTER             BR IF READ/WRITE ERROR            R4
         CLR   R1,NQIOT            IF IOT READ WRITE,
         BE    NQCKIOT              BR TO TEST IOT VALIDITY
         CLR   R1,NQHQT            IF HQT READ/WRITE,
         BE    NQCKHQT              BR TO TEST HQT VALIDITY
         L     R0,JCTJQE             ELSE
         AL    R0,$JOBQPTR            VALIDATE
         CLR   R0,NQ                   JCT
         BER   WE                  RETURN IF NO ERROR
         B     NQDSTER              ELSE BR TO ISSUE ERROR MSG      R41
         SPACE 1
NQCKHQT  CLC   HQTJBKEY,JCTJBKEY   IF NOT VALID HQT,
         BNE   NQDSTER              BR TO ISSUE ERROR MSG           R41
         CLC   HQTID,=CL4'HQT'     IF NOT DUMMY HQT,
         BER   WE                   RETURN
         B     NQHQTCK               ELSE BR TO PREPARE EMPTY HQT
         SPACE 1
NQCKIOT  CLC   IOTJBKEY,JCTJBKEY   IF VALID IOT,
         BER   WE                   RETURN                           R4
         EJECT
***********************************************************************
*                                                                     *
*        I/O ERROR READING/WRITING CONTROL BLOCK                      *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NQDSTER $DISTERR                   ISSUE DISASTEROUS ERROR MSG
        $QSUSE                     REQUEST ACCESS TO CKPT DATA      R41
         CLI   PCEDEVTP,PCEDARD    IF WRITE ERROR,             @OZ39489
         BNER  WE                  RETURN WITH NON-ZERO CC     @OZ39489
         CL    NQJCT,PCEBUFAD      IF NOT THE JCT,
         BNE   NQHQTCK              BR TO TEST FOR HQT
         XC    JQEHLDCT,JQEHLDCT   CLEAR HOLD COUNT
         OI    JQEFLAGS,QUEPURGE+QUEOPCAN  FLAG JOB FOR PURGE
        $QCKPT (NQ)                         AND FORCE CKPT OF JQE
        $#CAN  JQE=(NQ)            KILL ANY JOES NOT BUSY
         LTR   NQSE,NQSE           IF NODAL WARM START,        @OZ43880
         BZ    NQERREM              BR TO REMOVE JQE           @OZ43880
         TM    JQEFLAGS,QUEBUSY    IF JOB NOT ACTIVE,
         BZ    NQ610                BR TO TEST NEXT JQE
*        THIS LINE DELETED BY APAR ===>                        @OZ43880
*        THIS LINE DELETED BY APAR ===>                        @OZ43880
         IC    R0,JQEFLAGS         IF JOB
         N     R0,=A(QUEBUSY)       ACTIVE ON
         CLM   R0,1,QSESIBSY         WARM STARTED SYSTEM,
         BE    NQ590                  BR TO REQUEUE THE JOB
         B     NQ640                   ELSE BR TO TEST NEXT JQE
         EJECT                                                       R4
NQHQTCK  CL    NQHQT,PCEBUFAD      IF NOT AN HQT,
         BNE   NQBADIOT             BR TO PROCESS IOT ERROR
         MVI   HQTFLAG1,HQT1HQT1     ELSE
         LA    R0,HQTHQR-HQTDSECT     INITIALIZE
         ST    R0,HQTHQRP              TO LOOK LIKE
         XC    HQTHQT,HQTHQT            EMPTY HQT
         SLR   R0,R0               SET NON-ZERO CC             @OZ39489
         BR    WE                  THEN RETURN
         SPACE 1
NQBADIOT CLC   NQIOTBF,PCEBUFAD    TEST FOR SPIN IOT
         BNE   NQSPIOT             BR IF SO
         LA    R0,IOTTGMAP+TGMAP-TGMDSECT  ELSE POINT TO IOT BIT MAP R4
         L     R1,$CYLMAPL         CLEAR                             R4
         SLR   R15,R15              IOT                              R4
         MVCL  R0,R14                BIT MAP                         R4
         L     R1,$IOTPDDB         POINT TO                          R4
         ALR   R1,NQIOT             JCL DATA SET PDDB                R4
         NI    PDBFLAG1-PDBDSECT+IOTPDBOJ(R1),255-PDB1NULL SHOW NULL R4
         SLR   R0,R0               SET NON-ZERO CC             @OZ39489
         BR    WE                  THEN RETURN
         SPACE 1
NQSPIOT  XC    IOTIOTTR,IOTIOTTR   SHOW END OF SPIN IOT CHAIN
         MVI   IOTFLAG1,0          PREVENT TRACK ALLOCATION
         L     R1,$IOTPDDB         POINT TO                          R4
         ALR   R1,NQIOT             SPIN DATA SET PDDB               R4
         OI    PDBFLAG1-PDBDSECT(R1),PDB1NSOT  PREVENT SPIN/HOLD     R4
         SLR   R0,R0               SET NON-ZERO CC             @OZ39489
         BR    WE                  THEN RETURN
         EJECT                                                 @OZ43880
*************************************************************  @OZ43880
*                                                           *  @OZ43880
*        REMOVE IOT'S FOR THIS JOB FROM THE $UNSPUNQ        *  @OZ43880
*        CANCEL AND REMOVE JQE'S FOR VARIOUS READ ERRORS.   *  @OZ43880
*                                                           *  @OZ43880
*        IOT READ ERROR ------------ BOTH $#CAN AND $QREM   *  @OZ43880
*        JCT READ ERROR (PREVIOUSLY $#CAN'D) - JUST $QREM   *  @OZ43880
*                                                           *  @OZ43880
*************************************************************  @OZ43880
         SPACE 1                                               @OZ43880
NQIOTSCN DS    0H                                              @OZ43880
         ICM   R0,15,JCTSPIOT      NO SPIN IOTS FOR THIS JOB   @OZ43880
         BZ    NQCANJB              DISREGARD UNSPUN QUEUE     @OZ43880
         ICM   R1,15,$UNSPUNQ      ELSE CHECK UNSPUN QUEUE     @OZ43880
         BZ    NQCANJB              BRANCH IF NONE             @OZ43880
         ICM   NQIOT,15,NQIOTBF    GET BUFFER ADDRESS AND      @OZ43880
         ST    NQIOT,PCEBUFAD       STORE IN PCE FOR NQREAD    @OZ43880
         SPACE 1                                               @OZ43880
NQIOTRD  BAL   WE,NQREAD           READ THE IOT                @OZ43880
         BNZ   NQCANJB              REMOVE JQE IF CAN'T READ   @OZ43880
         L     R15,IOTJQOFF        GET JQE OFFSET              @OZ43880
         AL    R15,$JOBQPTR        ADD TO START OF JOB QUEUE   @OZ43880
         CLR   R15,NQ              IF NOT FOR THIS JOB         @OZ43880
         BNE   NQIOTNXT             LOOK FOR NEXT IOT          @OZ43880
         MVI   IOTFLAG1,0          PREVENT PURGING TRACKS      @OZ43880
         L     R15,$IOTPDDB        PREVENT OUTPUT PROCESSOR    @OZ43880
         ALR   R15,NQIOT                   FROM BUILDING       @OZ43880
         OI    PDBFLAG1-PDBDSECT(R15),PDB1NSOT     A JOE       @OZ43880
         L     R1,IOTTRACK         MTTR OF THIS IOT            @OZ43880
         BAL   WE,NQWRITE          REWRITE THE IOT             @OZ43880
         SPACE 1                                               @OZ43880
NQIOTNXT ICM   R1,15,IOTIOTTR      GET MTTR OF NEXT IOT        @OZ43880
         BZ    NQCANJB              BRANCH IF NONE             @OZ43880
         B     NQIOTRD               ELSE READ IT IN           @OZ43880
         SPACE 1                                               @OZ43880
NQCANJB  XC    JQEHLDCT,JQEHLDCT   CLEAR HOLD COUNT            @OZ43880
        $QCKPT (NQ)                FORCE CKPT OF JQE           @OZ43880
        $#CAN  JQE=(NQ)            KILL JOES                   @OZ43880
         SPACE 1                                               @OZ43880
NQERREM  DS    0H                                              @OZ43880
         BAL   WE,NQRELSE          RELEASE DUPLICATE JOBS      @OZ43880
        $QREM  (NQ)                REMOVE THE JQE              @OZ43880
         LA    R1,NQRPRG           POINT TO CTL BLK ERR MSG    @OZ43880
         BAL   WE,NQWTO             AND INFORM THE OPERATOR.   @OZ43880
         B     NQ640               BRANCH TO GET NEXT JQE      @OZ43880
         EJECT
***********************************************************************
*                                                                     *
*        I S S U E   $ W T O   M E S S A G E                          *
*                                                                     *
***********************************************************************
         SPACE 1
NQWTO    MVC   NQMSG,0(R1)         MOVE MESSAGE TO WORK AREA         R4
         LH    R0,JQEJOBNO         CONVERT HASP JOB NUMBER
         CVD   R0,NQDBL             TO PACKED DECIMAL
         CH    R0,=H'10000'        IF BATCH JOB,
         BL    NQMVO                BR TO ISSUE MESSAGE
         MVC   NQMSGID,=C'STC'     ASSUME STARTED TASK               R4
         CH    R0,=H'20000'        IF STARTED TASK,
         BL    NQMVO                BR TO ISSUE MESSAGE
         MVC   NQMSGID,=C'TSU'     MUST BE LOGON                     R4
         SPACE 1
NQMVO    MVO   NQDBL(4),NQDBL+4(4)  OFFSET NUMBER BY 1
         MVC   NQJOBNR,NQEDMSK     EDIT HASP JOB NUMBER
         ED    NQJOBNR,NQDBL+1      INTO MESSAGE
         SLR   R0,R0               PICK UP
         IC    R0,NQMSGLN           MESSAGE LENGTH
        $WTO   NQMSGST,(R0),JOB=NO,ROUTE=$LOG+$MAIN,   ISSUE MESSAGE R4C
               PRI=$ST,CLASS=$ALWAYS,WAIT=YES           TO OPERATOR
        $QSUSE                     REQUEST ACCESS TO CHECKPOINT DATA
         SPACE 1
         BR    WE                  THEN RETURN
         EJECT
***********************************************************************
*                                                                     *
*        L O C A T E   S J B   F O R   E X E C U T I N G   J O B      *
*                                                                     *
***********************************************************************
         SPACE 1
         USING SJBDSECT,WA         PROVIDE SJB ADDRESSABILITY
         SPACE 1
                                   PRINT OFF - SECTION DELETED @OZ40028
*                                  THIS LINE DELETED BY APAR   @OZ40028
*                                  THIS LINE DELETED BY APAR   @OZ40028
*                                  THIS LINE DELETED BY APAR   @OZ40028
*                                  THIS LINE DELETED BY APAR   @OZ40028
*                                  THIS LINE DELETED BY APAR   @OZ40028
*                                  THIS LINE DELETED BY APAR   @OZ40028
*                                  THIS LINE DELETED BY APAR   @OZ40028
*                                  THIS LINE DELETED BY APAR   @OZ40028
                                   PRINT ON -- SECTION DELETED @OZ40028
NQSJBLOC L     R15,$SSVT           GET SSVT ADDRESS            @OZ40028
         LA    R0,0(,NQ)           GET JQE OFFSET              @OZ40028
         SL    R0,$JOBQPTR          IN REGISTER R0             @OZ40028
         CLC   JQEJOBNO,=H'10000'  IF BATCH JOB,               @OZ40028
         BL    NQJOB                BR TO SEARCH FOR SJB       @OZ40028
         LA    WA,$SVJTERM-(SJBXQCHN-SJBDSECT)  TERMINATION QUEUE
         BAL   R14,NQSJBLUP        TRY TO LOCATE SJB ON ABOVE QUEUE
         LA    WA,$SVJXNUM-(SJBXQCHN-SJBDSECT)  IN XEQ-BY-NUM Q
         BAL   R14,NQSJBLUP        TRY TO LOCATE SJB ON ABOVE QUEUE
         LA    WA,$SVJPNUM-(SJBXQCHN-SJBDSECT)  PENDING XEQ-BY-NUM Q
         BAL   R14,NQPNUM          TRY TO LOCATE SJB ON QUEUE  @OZ60624
         LA    WA,$SVJRENQ-(SJBXQCHN-SJBDSECT)  PENDING RE-ENQUEUE Q
         BAL   R14,NQSJBLUP        TRY TO LOCATE SJB ON ABOVE QUEUE
         BR    WE                  RETURN HERE IF SJB NOT FOUND
         SPACE 1
*                                  THIS LINE DELETED BY APAR   @OZ40028
*                                  THIS LINE DELETED BY APAR   @OZ40028
NQJOB    LA    WA,$SVJTERM-(SJBXQCHN-SJBDSECT)  TERMINATION Q  @OZ40028
         BAL   R14,NQSJBLUP        TRY TO LOCATE SJB ON ABOVE QUEUE
         LA    WA,$SVJXCLS-(SJBXQCHN-SJBDSECT)  IN XEQ-BY-CLS Q
         BAL   R14,NQSJBLUP        TRY TO LOCATE SJB ON ABOVE QUEUE
         LA    WA,$SVJRENQ-(SJBXQCHN-SJBDSECT)  PENDING RE-ENQUEUE Q
         BAL   R14,NQSJBLUP        TRY TO LOCATE SJB ON ABOVE QUEUE
         BR    WE                  RETURN HERE IF SJB NOT FOUND
         SPACE 1
NQSJBLUP ICM   WA,15,SJBXQCHN      IF END OF SJB CHAIN,
         BZR   R14                  RETURN
*                                  THIS LINE DELETED BY APAR   @OZ40028
*                                  THIS LINE DELETED BY APAR   @OZ40028
         CL    R0,SJBJQOFF         TEST FOR CURRENT JOB        @OZ40028
         BNE   NQSJBLUP            BR IF NO TO TEST NEXT SJB
         BR    WE                   ELSE RETURN HERE WITH SJB
NQPNUM   ICM   WA,15,SJBXQCHN      IF END OF SJB CHAIN,        @OZ60624
         BZR   R14                   RETURN                    @OZ60624
         PACK  NQDBL,SJBJOBID+3(5) CONVERT SJB JOB NUMBER      @OZ60624
         CVB   R1,NQDBL              TO BINARY                 @OZ60624
         AL    R1,=F'10000'        ASSUME STARTED TASK         @OZ60624
         CLI   SJBJOBID,C'S'       TEST ASSUMPTION             @OZ60624
         BE    NQPNUMA               BR IF VALID               @OZ60624
         AL    R1,=F'10000'        ELSE ADJUST FOR LOGON       @OZ60624
NQPNUMA  CH    R1,JQEJOBNO         TEST FOR CURRENT JOB        @OZ60624
         BNE   NQPNUM              BR IF NO TO TEST NEXT SJB   @OZ60624
         BR    WE                    ELSE RETURN WITH SJB      @OZ60624
         EJECT
***********************************************************************
*                                                                     *
*        S U B R O U T I N E   T O   A L L O C A T E   T R A C K S    *
*                                                                     *
***********************************************************************
         SPACE 1
NQALLOC  LTR   NQSE,NQSE           IF NOT NODAL WARM START,          R4
         BNZR  WE                   IGNORE ALLOCATE REQUEST
         ST    WE,NQTQE            SAVE RETURN ADDRESS               R4
         LA    WE,IOTTGMAP+TGMAP-TGMDSECT  POINT TO IOT TRK GRP MAP  R4
         LR    R0,WE               MOVE                              R4
         L     R1,$CYLMAPL          IOT                              R4
         L     R14,NQCYLMAP          TRACK GROUP MAP                 R4
         LR    R15,R1                 TO                             R4
         MVCL  R14,R0                  WORK AREA                     R4
         L     R0,$CYLMAPL         RESET BITS                        R4
         L     R15,$TGMAP           IN IOT                     @OZ35996
        $VFL   NC,(WE),(R15),(R0)    TRACK GROUP MAP                 R4
         L     R0,$CYLMAPL         REMOVE BITS                       R4
         L     R1,$TGMAP            FROM MASTER                @OZ35996
        $VFL   XC,(R1),(WE),(R0)     TRACK GROUP MAP                 R4
         L     R14,NQCYLMAP        TEST                              R4
         L     R15,$CYLMAPL         RESULTING                        R4
         LR    R0,WE                 IOT                             R4
         LR    R1,R15                 TRACK GROUP MAP                R4
         CLCL  R14,R0                  VALIDITY                      R4
         L     WE,NQTQE            RESTORE RETURN ADDRESS            R4
         BER   WE                  RETURN IF ALLOCATION SUCCESSFUL   R4
         LA    R1,NQIBAD             ELSE POINT TO 'BAD IOT' MSG     R4
         BAL   WE,NQWTO               AND INFORM THE OPERATOR
         L     R1,IOTTRACK         GET TRACK ADDRESS OF IOT
         L     WE,NQTQE            RESTORE RETURN ADDRESS
         ST    NQIOT,PCEBUFAD      SET BUFFER ADDRESS FOR $EXCP     R41
         B     NQWRITE             THEN RE-WRITE IOT AND RETURN
         EJECT
***********************************************************************
*                                                                     *
*        R E L E A S E   A N Y   D U P L I C A T E   J O B S          *
*                                                                     *
***********************************************************************
         SPACE 1
         CNOP  4,8
NQRELSE  LA    R15,72              PREPARE
         L     R1,=V($QINDEX)       TO SCAN
         LA    WA,C'A'-(255-QUECLASS)  EXECUTION
         IC    WA,0(R1,WA)              QUEUES
         SPACE 1
NQRNXTQ  ST    R15,NQDBL           SAVE CURRENT QUEUE OFFSET
         LA    R1,0(R15,WA)        POINT TO START
         LA    R1,$JQHEADS-4-QUECHAIN(R1)  OF NEXT QUEUE
         SPACE 1
NQNXTJQE LH    R1,QUECHAIN(,R1)    GET OFFSET
         N     R1,=X'0000FFFF'     OF NEXT JQE
         BZ    NQRENDQ             BR IF END OF CURRENT QUEUE
         SLL   R1,2                 ELSE CONVERT OFFSET
         AL    R1,$JOBQPTR           TO ABSOLUTE ADDRESS
         TM    QUEFLAGS(R1),QUEHOLD2  IF JOB NOT HELD,
         BZ    NQNXTJQE                BR TO TEST NEXT JQE
         CLC   JQEJNAME,QUEJNAME(R1)  IF NOT SAME JOB NAME,
         BNE   NQNXTJQE                BR TO TEST NEXT JQE
         NI    QUEFLAGS(R1),255-QUEHOLD2  ELSE RESET HOLD BIT
        $QCKPT (R1)                        AND FORCE CKPT OF JQE
         B     NQNXTJQE            THEN BR TO TEST NEXT JQE
         SPACE 1
NQRENDQ  L     R15,NQDBL           RESTORE CURRENT QUEUE OFFSET
         BCTR  R15,0               IF ANOTHER JOB QUEUE,
         BCT   R15,NQRNXTQ          BR TO SCAN IT
         BR    WE                    ELSE RETURN
         SPACE 1
         DROP  NQIOT,NQHQT         KILL IOT, HQT ADDRESSABILITY
         DROP  R15                 KILL SSVT ADDRESSABILITY          R4
         TITLE 'HASP JOB QUEUE WARM START'                           R4
NQMAXQ   DC    A(L'JOTRDYWQ)       MAXIMUM JOE QUEUE OFFSET          R4
         SPACE 1
NQTSTAFF TM    JQEFLAG2,0          *** EXECUTE ONLY ***
         SPACE 1
NQEDMSK  DC    X'4020202021'       HASP JOB NUMBER EDIT MASK
NQSYSAF  DC    X'0001020408102040' SYSTEM AFFINITY TABLE
         SPACE 1
NQCLSTBL DC    C'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'  JOT CLASSES
         SPACE 1
         DROP  WD                  KILL JQE ADDRESSABILITY
         TITLE 'HASP JOB QUEUE WARM START -- OPERATOR MESSAGES'
***********************************************************************
*                                                                     *
*        H A S P   W A R M   S T A R T   M E S S A G E S              *
*                                                                     *
***********************************************************************
         SPACE 3
NQREQ   $MSG   400,'ENTER REQUESTS'
         SPACE 2
        $MID   403
NQDOWN   WTOR  '&MID.IS SYSTEM XXXX DOWN -- REPLY Y/N',                C
               ,L'NQREPLY,ROUTCDE=(1,2),DESC=(2),MF=L                R4
NQLOKID  EQU   *-26,4              SYSTEM ID FOR MESSAGE             R4
NQMSGIDC EQU   *-45,1              MSG ID CHARACTER FOR MSG          R4
         SPACE 2
NQIBAD   DC    AL1(NQIBADLN)       MESSAGE LENGTH
NQIBADST $MSG  404,'JOB NNNN - BAD IOT - ERRORS MAY OCCUR'
NQIBADLN EQU   *-NQIBADST          LENGTH OF TEXT
         SPACE 2
NQCORE   DC    AL1(NQCORELN)       MESSAGE LENGTH
NQCOREST $MSG  405,'JOB NNNN AWAITING BUFFER STORAGE'
NQCORELN EQU   *-NQCOREST          LENGTH OF TEXT
         EJECT
NQEXEC   DC    AL1(NQEXECLN)       MESSAGE LENGTH
NQEXECST $MSG  406,'JOB NNNN WAS EXECUTING'
NQEXECLN EQU   *-NQEXECST          LENGTH OF TEXT
         SPACE 2
NQTERM   DC    AL1(NQTERMLN)       MESSAGE LENGTH
NQTERMST $MSG  407,'JOB NNNN WAS TERMINATING'
NQTERMLN EQU   *-NQTERMST          LENGTH OF TEXT
         SPACE 2
NQREQU   DC    AL1(NQREQULN)       MESSAGE LENGTH                    R4
NQREQUST $MSG  408,'JOB NNNN QUEUED FOR RE-EXECUTION'                R4
NQREQULN EQU   *-NQREQUST          LENGTH OF TEXT                    R4
         SPACE 2
NQRDRM   DC    AL1(NQRDRMLN)       MESSAGE LENGTH
NQRDRMST $MSG  409,'JOB NNNN WAS ON READER'
NQRDRMLN EQU   *-NQRDRMST          LENGTH OF TEXT
         SPACE 2
NQPRPU   DC    AL1(NQPRPULN)       MESSAGE LENGTH
NQPRPUST $MSG  410,'JOB NNNN WAS PRINTING/PUNCHING'
NQPRPULN EQU   *-NQPRPUST          LENGTH OF TEXT
         SPACE 2                                               @OZ43880
NQRPRG   DC    AL1(NQRPRGLN)       MESSAGE LENGTH              @OZ43880
NQRPRGST $MSG  455,'JOB NNNN IS PURGED, CONTROL BLOCK READ ERROR'
*              ABOVE LINE ADDED BY APAR NUMBER                 @OZ48744
NQRPRGLN EQU   *-NQRPRGST          LENGTH OF TEXT              @OZ43880
         SPACE 2                                               @OZ27300
NQHQRM   DC    AL1(NQHQRMLN)       MESSAGE LENGTH              @OZ27300
NQHQRMST $MSG  460,'JOB NNNN HOLD QUEUE ERROR -- OUTPUT MAY BE LOST'
NQHQRMLN EQU   *-NQHQRMST          LENGTH OF TEXT              @OZ27300
         TITLE 'HASP JOB QUEUE WARM START -- TERMINATION PROCESSING'
***********************************************************************
*                                                                     *
*        E N D   O F   J O B   Q U E U E   W A R M   S T A R T        *
*                                                                     *
***********************************************************************
         SPACE 1
         USING $SVDSECT,WD         PROVIDE SSVT ADDRESSABILITY       R4
         SPACE 1
NQ700    L     WD,$SSVT            POINT TO SSVT                     R4
         LTR   NQSE,NQSE           IF SPECIFIC SYSTEM WARM START,
         BNZ   NQBFREE              BR TO FREE BUFFERS               R4
         TM    $OPTSTAT,$OPTCOLD+$OPTFMT  IF NODAL COLD START,       R4
         BNZ   NQ720                       BR TO ANALYZE TRK GRP MAP
        $QSUSE                     REQUEST ACCESS TO CKPT DATA @OZ27300
         NI    $CKPTFLG,FF-$CKPNODL SHOW NODAL WARM START DONE @OZ35996
*                                  THIS LINE DELETED BY APAR   @OZ35996
*                                  THIS LINE DELETED BY APAR   @OZ35996
*                                  THIS LINE DELETED BY APAR   @OZ35996
*                                  THIS LINE DELETED BY APAR   @OZ35996
         L     R1,NQCYLMAP         POINT TO ALLOCATE WORK AREA       R4
         MVI   BUFTYPE-BUFDSECT(R1),BUFHASP  RESET BUFFER TYPE       R4
        $FREEBUF (R1)              THEN FREE THE WORK BUFFER         R4
         B     NQBUFRE             BR TO FREE OTHER BUFFERS    @OZ41702
*                                  THIS LINE DELETED BY APAR   @OZ35996
*                                  THIS LINE DELETED BY APAR   @OZ35996
         EJECT                                                 @OZ27300
NQBFREE  TM    QSESTAT,QSEQUICK    QUICK START...              @OZ41702
         BO    NQTESYS             BR IF YES                   @OZ41702
         SPACE 1                                               @OZ41702
NQBUFRE $FREEBUF (NQJCT)           FREE THE JCT BUFFER         @OZ41702
        $FREEBUF (NQHQT)           FREE THE HQT BUFFER
         L     R1,NQIOTBF          POINT TO THE IOT BUFFER
        $FREEBUF (R1)               AND FREE IT
         MVC   $MINHOLD,NQMINHLD   RESTORE NORMAL HOLD INTERVAL@OZ36307
NQTESYS  TM    NQSTAT,NQ$ESYS      IF WARM START FROM 'S JES2  @OZ41702
         BZ    NQ720                BR TO FIRE UP REST OF JES2       R4
        $QSUSE                     REQUEST ACCESS TO CKPT DATA @OZ35996
         NI    QSESTAT,FF-QSEACTIV-QSERSTID  SHOW INACTIVE     @OZ35996
         OI    QSESTAT,QSEQUICK               AND WARM STARTED @OZ41702
         CLI   $NUMSMFB,2          TEST SMF BUFFER COUNT             R4
         BL    NQ900               BR IF SMF NOT SUPPORTED           R4
         SPACE 1
         USING SMFDSECT,R1         PROVIDE SMF RECORD ADDRESSABILITY
         SPACE 1
        $GETSMFB WAIT=YES          CREATE TYPE 43 SMF RCRD FOR $ESYS
         MVI   SMFRDW+1,SMF43END-SMFRDW  LENGTH OF START JES2 RECORD
         MVI   SMFHDRTY,SMFSSSTP   START JES2 SMF RECORD TYPE
         MVI   SMFSSID+1,SMFHSPID  JES2 SUBSYSTEM ID FOR RECORD 43
         MVI   SMFSSLEN+1,SMF43END-SMF43RV1  LEN OF SUBSYSTEM PART
         OI    SMF43RST,SMF$ESYS   SET $ESYS INDICATOR BYTE
         MVC   SMF43EID,QSESID     SYSTEM ID FOR RESTARTED SYSTEM
        $QUESMFB                   WRITE RECORD TYPE 43
         B     NQ900               THEN BR TO RESET QSE POINTER      R4
         SPACE 1
         DROP  R1                  KILL SJB RECORD ADDRESSABILITY
         EJECT
NQ720    LTR   NQSE,NQSE           IF WARM STARTING SINGLE SYSTEM,
         BNZ   NQ750                BR TO AVOID TGM ANALYSYS        R41
         SPACE 1
***********************************************************************
*                                                                     *
*        C O M P U T E   A L L O C A T E D   T R A C K   G R O U P S  *
*                                                                     *
***********************************************************************
         SPACE 1
         L     R0,$SVTGTOT                       PREPARE TO
         SLR   WE,WE                              COMPUTE ALLOCATED
         L     R1,$CYLMAPL                         TRACK             R4
         L     R2,$TGMAP                            GROUPS           R4
         BCTR  R2,0                                  WITHIN          R4
         L     R3,=A(KNBITB)                          MAP            R4
         SPACE 1
NQ740    IC    WE,0(R1,R2)         GET NEXT BYTE FROM $TGMAP
         IC    WE,0(R3,WE)         WE = NUMBER OF BITS IN BYTE
         SLR   R0,WE               R0 = NUMBER OF ALLOCATED TRK GRPS
         BCT   R1,NQ740            PLOW THRU ENTIRE BIT MAP
         SPACE 1
         ST    R0,$SVTGALC         SAVE NUMBER OF ALLOCATED TRK GRPS
         SPACE 1
***********************************************************************
*                                                                     *
*        S H O W   S Y S T E M   N O W   U P                          *
*                                                                     *
***********************************************************************
         SPACE 1
         USING CVT,WA              PROVIDE CVT ADDRESSABILITY
         SPACE 1
NQ750    L     WA,CVTPTR           POINT TO THE CVT                 R41
        $GETLOK                    SERIALIZE WITH SSSM DECHAINING
         SLR   R0,R0               SET NEW HASP CONDITION
         ST    R0,$SVHASP           TO ZERO
        $FRELOK                    THEN RELEASE THE LOCK
         OI    NQSTAT,NQ$ESYS      SET 1ST TIME ENTRY SWITCH         R4
         EJECT
         TM    $SVSTUS,$SVSTUSP    IF NOT PRIMARY SUBSYSTEM,
         BZ    NQ760                BR TO CONTINUE                  R41
         TM    NQSTAT,NQRESTRT     IF RESTARTING JES2,               R4
         BO    NQ760                BR TO CONTINUE                  R41
         SPACE 1
***********************************************************************
*                                                                     *
*        P O S T   M A S T E R   S C H E D U L E R                    *
*                                                                     *
***********************************************************************
         SPACE 1
         L     R1,CVTMSER          POINT TO MASTER SCHEDULER WORK
         LA    R0,BASUBECB-BASE(,R1)  PREPARE
         ST    R0,NQTQE                CROSS
         L     R0,BAASCB-BASE(,R1)      MEMORY
         ST    R0,NQTQE+4                POST
         LA    R0,CVTBRET                 QUEUE
         ST    R0,NQTQE+8                  ELEMENT
         LA    R1,NQTQE            THEN POST
         POST  MF=(E,(1))           THE MASTER SCHEDULER
         SPACE 1                                                    R41
         DROP  WA                  KILL CVT ADDRESSABILITY          R41
         EJECT                                                      R41
***********************************************************************
*                                                                     *
*        RELEASE CHECKPOINT RESERVE FOR WARMSTART PROCESSOR    @OZ27300
*                                                                     *
***********************************************************************
         SPACE 1                                                    R41
NQ760   $QSUSE                     REQUEST ACCESS TO CKPT DATA @OZ27300
         NI    $SVSTUS,FF-$SVSTIRV RESET INIT RESERVE BIT      @OZ27300
         SPACE 1                                               @OZ41702
         LTR   NQSE,NQSE           NODAL WARM START...         @OZ41702
         BNZ   NQSEQR              BR IF NO                    @OZ41702
         L     NQSE,$QSE1           ELSE INDICATE              @OZ41702
         LH    R0,$QSENO             THAT ALL                  @OZ41702
         OI    QSESTAT,QSEQUICK       SYSTEMS ARE              @OZ41702
         LA    NQSE,QSELEN(,NQSE)      ELIGIBLE FOR            @OZ41702
         BCT   R0,*-8                   QUICK-START            @OZ41702
         SPACE 1                                               @OZ41702
NQSEQR   L     NQSE,$AQSE          NO LONGER ALLOW QUICK-      @OZ41702
         NI    QSESTAT,FF-QSEQUICK  START FOR THIS SYSTEM      @OZ41702
         SPACE 2                                               @OZ41702
         DROP  WD,NQSE             DROP SSVT/QSE ADDRESSABILITY@OZ41702
*                                  THIS LINE DELETED BY APAR   @OZ41702
*                                  THIS CARD DELETED BY APAR   @OZ35278
*                                  THIS LINE DELETED BY APAR   @OZ41702
*                                  THIS LINE DELETED BY APAR   @OZ41702
                                   PUSH PRINT - SECTION        @OZ39639
                                   PRINT OFF  -  DELETED       @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                 P R O C E S S   'N E W S'   F O R                   *
*                                  THIS LINE DELETED BY APAR   @OZ39639
*           P R I N T E R   S E P A R A T O R   P A G E S             *
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
*                                  THIS LINE DELETED BY APAR   @OZ39639
                                   POP PRINT - SECTION DELETED @OZ39639
         TITLE 'HASP JOB QUEUE WARM START -- TERMINATION EXIT'      R41
***********************************************************************
*                                                                     *
*        $ P O S T   P R O C E S S O R S   F O R   H O L D            *
*                                                                     *
***********************************************************************
         SPACE 1
         USING QSEDSECT,WC         PROVIDE QSE ADDRESSABILITY       R41
         SPACE 1                                                    R41
NQ800    TM    $OPTSTAT,$OPTREQ    IF OPERATOR REQUESTS SELECTED,   R41
         BO    NQ840                BR TO BYPASS PCE POSTING        R41
         LA    R1,$PCEORG-(PCENEXT-PCEDSECT)  PREPARE TO POST PCES
         SPACE 1
NQ820    L     R1,PCENEXT-PCEDSECT(,R1)  POINT TO NEXT PCE
         LTR   R1,R1               IF END OF PCE CHAIN,
         BZ    NQ900                BR TO CONTINUE                  R41
        $POST  (R1),HOLD             ELSE $POST PROCESSOR
         B     NQ820               THEN BR TO POST NEXT PCE
         SPACE 1
***********************************************************************
*                                                                     *
*        I S S U E   ' E N T E R   R E Q U E S T S '   M S G          *
*                                                                     *
***********************************************************************
         SPACE 1
NQ840    LA    R1,NQREQ            POINT TO REQUEST MESSAGE          R4
        $WTO   (R1),L'NQREQ,JOB=NO,ROUTE=$LOG+$MAIN,    ISSUE MSG    R4C
               PRI=$ST,CLASS=$ALWAYS,WAIT=YES            TO OPERATOR
         L     R1,$COMMPCE         THEN $POST                        R4
        $POST  (R1),HOLD            THE COMMAND PROCESSOR
         SPACE 1
NQ900    SLR   NQSE,NQSE           CLEAR POINTER TO
         ST    NQSE,$ESYSQSE        WARM STARTED SYSTEM QSE
        $DORMANT                   INDICATE PROCESSOR INACTIVE      R41
         NI    NQSTAT,255-NQRESTRT RESET RESTART FLAG                R4
         B     NQ000               THEN BR TO AWAIT $ESYS COMMAND
 TITLE 'HASP JOB QUEUE WARM START -- JOB QUEUE SCAN INITIALIZATION'
***********************************************************************
*                                                                     *
*        P R E P A R E   T O   W A R M   S T A R T   J O B   Q        *
*                                                                     *
***********************************************************************
         SPACE 1
         USING $SVDSECT,NQJCT      PROVIDE SSVT ADDRESSABILITY       R4
         USING JQEDSECT,WD         PROVIDE JQE ADDRESSABILITY
         SPACE 1
***********************************************************************
*                                                                     *
*        OBTAIN JOB HOLD QUEUE LOCK ON ALL JOBS IN QUEUE       @OZ36307
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NQINIT  $QSUSE                     REQUEST ACCESS TO CHECKPOINT DATA R4
         L     NQJCT,$SSVT         POINT TO SSVT                     R4
         SPACE 1                                                     R4
         LH    WB,$MAXJOBS         PREPARE TO SCAN ALL JOB Q'S @OZ36307
         SPACE 1
         L     NQ,$JOBQPTR         POINT TO DUMMY JQE (JQE 0)  @OZ36307
         SPACE 1
NQINXTJB LA    NQ,JQELNGTH(,NQ)    POINT TO NEXT JQE           @OZ36307
         CLI   JQETYPE,$FREE       IS JQE ON FREE QUEUE...     @OZ36307
         BE    NQILOOP             BR IF YES (IGNORE IT)       @OZ36307
         TM    JQEHQLOK,QUEBUSY    TEST JOB HOLD QUEUE LOCK    @OZ36307
         BZ    NQIRESET            BR IF NOT HELD TO CLAIM IT  @OZ36307
         LTR   NQSE,NQSE           IF NODAL WARM START,        @OZ36307
         BZ    NQIRESET             BR TO CLAIM THE LOCK       @OZ36307
         IC    R0,JQEHQLOK         IF SYSTEM                   @OZ36307
         N     R0,=A(QUEBUSY)       BEING                      @OZ36307
         CLM   R0,1,QSESIBSY         WARM STARTED,             @OZ36307
         BE    NQIRESET               BR TO CLAIM THE LOCK     @OZ36307
         BAL   WE,NQLOKREM         CAREFULLY REMOVE THE LOCK   @OZ36307
         SPACE 1                                               @OZ36307
NQIRESET NI    JQEHQLOK,FF-QUEBUSY RESET JOB HOLD QUEUE LOCK   @OZ36307
         LA    R1,$SIDBUSY         SET                         @OZ36307
         LTR   NQSE,NQSE            JOB                        @OZ36307
         BZ    *+8                   HOLD                      @OZ36307
         LA    R1,QSESIBSY            QUEUE                    @OZ36307
         OC    JQEHQLOK,0(R1)          LOCK                    @OZ36307
        $QCKPT (NQ)                FORCE JQE CHECKPOINT        @OZ36307
         SPACE 1                                               @OZ36307
NQILOOP  BCT   WB,NQINXTJB         BR TO PROCESS NEXT JOB      @OZ36307
         EJECT                                                 @OZ36307
***************************************************************@OZ36307
*                                                              @OZ36307
*        SET TEMPORARY HIGH $MINHOLD VALUE FOR WARM START      @OZ36307
*                                                              @OZ36307
***************************************************************@OZ36307
         SPACE 1                                               @OZ36307
         L     R0,$MINHOLD         GET CURRENT $MINHOLD VALUE  @OZ36307
         ST    R0,NQMINHLD          AND SAVE FOR LATER         @OZ36307
         MVC   $MINHOLD,=F'-500'   SET TEMP VALUE TO 5 SECONDS @OZ36307
         C     R0,$MINHOLD         WAS CURRENT VALUE GREATER...@OZ36307
         BNL   NQIPOST             BR IF NO                    @OZ36307
         ST    R0,$MINHOLD          ELSE USE GREATER VALUE     @OZ36307
                                   PRINT OFF - SECTION DELETED @OZ36307
*                                  THIS CARD DELETED BY APAR   @OZ36307
*                                  THIS CARD DELETED BY APAR   @OZ36307
*                                  THIS CARD DELETED BY APAR   @OZ36307
*                                  THIS CARD DELETED BY APAR   @OZ36307
*                                  THIS CARD DELETED BY APAR   @OZ36307
*                                  THIS CARD DELETED BY APAR   @OZ36307
*                                  THIS CARD DELETED BY APAR   @OZ36307
*                                  THIS CARD DELETED BY APAR   @OZ36307
*                                  THIS CARD DELETED BY APAR   @OZ36307
*                                  THIS CARD DELETED BY APAR   @OZ36307
*                                  THIS CARD DELETED BY APAR   @OZ36307
                                   PRINT ON -- SECTION DELETED @OZ36307
         SPACE 1                                               @OZ36307
***********************************************************************
*                                                                     *
*        R E L E A S E   H O L D   Q U E U E   P R O C E S S O R      *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
NQIPOST  L     R1,$HOLDPCE         RELEASE                     @OZ36307
        $POST  (R1),HOLD            HOLD QUEUE PROCESSOR
         TM    NQSTAT,NQRESTRT     IF NOT RESTARTING JES2,     @OZ36307
         BZ    NQBUFRS              BR TO GET BUFFERS
         SPACE 1
***********************************************************************
*                                                                     *
*        F R E E   P E N D I N G   H O L D   R E Q U E S T S          *
*                                                                     *
***********************************************************************
         SPACE 1
NQFRIOT  ICM   R1,15,$SVHOLDQ      IF END OF HOLD QUEUE,
         BZ    NQBUFRS              BR TO GET BUFFERS
         MVC   $SVHOLDQ,IOTIOT-IOTDSECT(R1)  ELSE
         LH    R0,$BUFSIZE                    FREE                   R4
         ICM   R0,8,=AL1(231)                  IOT
         FREEMAIN R,LV=(0),A=(1)                BUFFER
         B     NQFRIOT             THEN BR TO RE-TEST HOLD QUEUE
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        G E T   J C T / I O T / H C T   B U F F E R S                *
*                                                                     *
***********************************************************************
         SPACE 1
NQBUFRS $GETBUF WAIT=YES           GET BUFFER FOR JCT                R4
         LR    NQJCT,R1            RELOAD BUFFER ADDRESS             R4
        $GETBUF WAIT=YES           GET BUFFER FOR IOT                R4
         ST    R1,NQIOTBF          SAVE BUFFER ADDRESS               R4
        $GETBUF WAIT=YES           GET BUFFER FOR HQT                R4
         LR    NQHQT,R1            RELOAD BUFFER ADDRESS             R4
         LTR   NQSE,NQSE           IF NOT NODAL WARM START,          R4
         BNZ   NQ200                BR TO BEGIN WARM START           R4
        $GETBUF WAIT=YES           GET BUFFER FOR WORK AREA          R4
         ST    R1,NQCYLMAP         SAVE WORK AREA ADDRESS            R4
         B     NQ200               THEN BR TO BEGIN WARM START
         EJECT
***********************************************************************
*                                                                     *
*        R E M O V E   J O B   H O L D   Q U E U E   L O C K          *
*                                                                     *
***********************************************************************
         SPACE 1
NQLOKREM IC    R0,JQEHQLOK         GET SYSTEM ID
         N     R0,=A(QUEBUSY)       FROM HOLD QUEUE LOCK
         L     R1,$QSE1            PREPARE TO SCAN                   R4
         SH    R1,=Y(QSELEN)        ACTIVE QSES                @OZ27300
         SLR   WA,WA               CLEAR DOWN TBL ENTRY OFFSET @OZ36307
         SPACE 1
NQINQSE  LA    WA,1(,WA)           BUMP DOWN TBL ENTRY OFFSET  @OZ36307
         LA    R1,QSELEN(,R1)             IF NOT THE SYSTEM    @OZ27300
         CLM   R0,1,QSESIBSY-QSEDSECT(R1)  HOLDING THE LOCK,
         BNE   NQINQSE                      LOOP               @OZ36307
         SPACE 1
         LA    WA,NQDWNTBL-1(WA)   PT TO SYSTEM DOWN TBL ENTRY @OZ36307
         STCK  NQDBL               GET CURRENT TIME            @OZ66505
         L     R15,NQDBL           GET TIME DIFFERENCE AS      @OZ66505
         SL    R15,QSESITIM-QSEDSECT(,R1) A POSITIVE           @OZ66505
         LPR   R15,R15                     VALUE               @OZ66505
         CL    R15,$SYNCTOL        IF SYSTEM WITHIN SYNCTOL,   @OZ66505
         BNH   NQILOKWT             BR TO WAIT A BIT           @OZ66505
         CLI   0(WA),FF            HAS OP CONFIRMED IT DOWN... @OZ36307
         BER   WE                  RETURN IF YES               @OZ36307
         B     NQLOKMSG             ELSE BR TO QUERY OPERATOR  @OZ36307
         SPACE 1
***********************************************************************
*                                                                     *
*        L O C K   H E L D   B Y   A C T I V E   S Y S T E M          *
*                                                                     *
***********************************************************************
         SPACE 1
NQILOKWT MVI   0(WA),0             INDICATE SYSTEM NOT DOWN    @OZ36307
        $WAIT  ABIT                $WAIT A LITTLE WHILE
         SPACE 1
NQLOKTST $QSUSE                    REQUEST ACCESS TO CHECKPOINT DATA
         TM    JQEHQLOK,QUEBUSY    IF LOCK NO LONGER HELD,
         BZR   WE                   RETURN
         B     NQLOKREM              ELSE TRY AGAIN TO REMOVE IT
         EJECT
***********************************************************************
*                                                                     *
*        S U S P E C T   D O W N   S Y S T E M   - -   V E R I F Y    *
*                                                                     *
***********************************************************************
         SPACE 1
NQLOKMSG MVC   NQMSG,NQDOWN        MOVE MSG TO WORK AREA             R4
         MVC   NQMSGIDC-NQDOWN+NQMSG,$SVCOMCH           SET UP       R4
         MVC   NQLOKID-NQDOWN+NQMSG,QSESID-QSEDSECT(R1)  MSG         R4
         SPACE 1                                                     R4
NQDNWTOR MVI   NQREPLY,0                  ISSUE                      R4
         L     R0,$HASPECB                 QUERY               @OZ36307
         WTOR  ,NQREPLY,,(R0),MF=(E,NQMSG)  TO OPERATOR        @OZ36307
         SPACE 1
NQREPL  $WAIT  ABIT                $WAIT FOR OPERATOR RESPONSE
         CLI   NQREPLY,0           IF NOT OPERATOR REPLY,
         BE    NQREPL               BR TO $WAIT A LITTLE LONGER
        $QSUSE                     REQUEST ACCESS TO CHECKPOINT DATA
         TM    JQEHQLOK,QUEBUSY    IF LOCK NO LONGER HELD,
         BZR   WE                   RETURN
         OI    NQREPLY,X'40'       FORCE UPPER CASE REPLY            R4
         CLI   NQREPLY,C'Y'        IF OPERATOR
         BE    NQREMLOK             HAS CONFIRMED
         CLI   NQREPLY,C'N'          THAT SYSTEM IS DOWN,            R4
         BNE   NQDNWTOR               BR TO REMOVE THE LOCK          R4
         LA    R0,60                   ELSE $WAIT
         BAL   WA,NQSTIMER              FOR 60 SECONDS
         B     NQLOKTST            THEN BR TO TEST LOCK AGAIN
         SPACE 1
         SPACE 1                                               @OZ36307
NQREMLOK MVI   0(WA),FF            INDICATE SYSTEM DOWN        @OZ36307
         BR    WE                  THEN RETURN
         SPACE 1                                                     R4
         DROP  NQJCT               KILL SSVT ADDRESSABILITY          R4
         TITLE 'HASP JOB QUEUE WARM START -- LITERAL POOL'           R4
         LTORG
         TITLE 'HASP DYNAMIC SPOOL ALLOCATION SUBTASK'               R4
***********************************************************************
*                                                                     *
* SUBTASK NAME -- HOSPOOL                                             *
*                                                                     *
* DESCRIPTIVE NAME -- JES2 DYNAMIC SPOOL ALLOCATION SUBTASK           *
*                                                                     *
* FUNCTION -- PROVIDE CAPABILITY TO DYNAMICALLY ALLOCATE A JES2       *
*             SPOOL VOLUME.                                           *
*                                                                     *
* NOTES -- THE ATTACHER OF THIS SUBTASK MUST REQUEST THE SYSTEM       *
*          TO PROVIDE A REGISTER SAVE AREA.  HE MUST ALSO PROVIDE,    *
*          IN REGISTER 1, THE ADDRESS OF A WORK AREA OBTAINED VIA     *
*          GETMAIN FROM SUBPOOL 229 AND DESCRIBED BY THE $SPL         *
*          MACRO.  THE FOLLOWING FIELDS IN THIS WORK AREA MUST BE     *
*          PROVIDED -- SPLFLG1, SPLTCBPT, SPLUNIT AND SPLVOLID.       *
*          IF SPLUCBPT IS SET, THEN SPLUNIT MUST CONTAIN THE          *
*          3-CHARACTER UCB NAME.  IF SPLUCBPT IS ZERO, THEN           *
*          SPLUNIT MUST CONTAIN THE 8-CHARACTER DEVICE TYPE.          *
*                                                                     *
* REGISTER CONVENTIONS -- R0  -- WORK REGISTER                        *
*                         R1  -- WORK REGISTER                        *
*                         R2  -- WORK REGISTER                        *
*                         R3  -- WORK REGISTER                        *
*                         R4  -- WORK REGISTER                        *
*                         R5  -- WORK REGISTER                        *
*                         WE  -- WORK/LINK REGISTER                   *
*                         WF  -- WORK REGISTER                        *
*                         WG  -- IOB ADDRESS                          *
*                         R9  -- UNUSED                               *
*                         R10 -- RB ADDRESS                           *
*                         R11 -- HCT ADDRESS (BASE1)                  *
*                         R12 -- BASE REGISTER (BASE2)                *
*                         R13 -- SPL ADDRESS                          *
*                                                                     *
***********************************************************************
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        HOSPOOL INITIAL ENTRY POINT                                  *
*                                                                     *
***********************************************************************
         SPACE 5                                                     R4
         USING S99RB,R10           PROVIDE RB ADDRESSABILITY         R4
         USING BUFDSECT,WG         PROVIDE IOB ADDRESSABILITY        R4
         USING SPLDSECT,R13        PROVIDE SPL ADDRESSABILITY        R4
         SPACE 1                                                     R4
HOSPOOL $ENTRY BASE=R15            PROVIDE SUBTASK ENTRY             R4
         STM   R14,R12,12(R13)     SAVE SYSTEM'S REGISTERS           R4
         SPACE 1                                                     R4
         DROP  R15                 PROVIDE                           R4
         LR    BASE2,R15            SUBTASK                          R4
         USING HOSPOOL,BASE2         ADDRESSABILITY                  R4
         SPACE 1                                                     R4
         ST    R1,8(,R13)          STORE FORWARD POINTER             R4
         ST    R13,4(,R1)          STORE BACKWARD POINTER            R4
         LR    R13,R1              SWITCH TO NEW SAVE AREA           R4
         L     BASE1,=V(HASPNUC)   GET HCT ADDRESS                   R4
         MVI   SPLFLG2,SPL2UNAL    SET ERROR FLAG BYTE               R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        CONTRUCT DYNAMIC ALLOCATION PARAMETER LIST                   *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         LA    R10,SPLDYNRB        GET RB ADDRESS                    R4
         ST    R10,SPLDYNAL        SET RB POINTER                    R4
         MVI   SPLDYNAL,S99RBPND   SET LAST INDICATOR                R4
         XC    S99RB(20),S99RB     CLEAR RB                          R4
         MVI   S99RBLN,20          SET RB LENGTH                     R4
         MVI   S99VERB,S99VRBAL    INDICATE ALLOCATION REQUEST       R4
         LA    R0,SPLTEXT          SET POINTER TO LIST               R4
         ST    R0,S99TXTPP          OF TEXT UNIT POINTERS            R4
         MVI   S99FLG21,SPALFLGS   SET ALLOCATION FLAGS              R4
         LA    R0,SPLDDTXT         SET POINTER TO                    R4
         ST    R0,SPLDDTA           DDNAME TEXT UNIT                 R4
         MVC   SPLDDTXT,SPDDTXT    SET DDNAME TEXT                   R4
         MVC   SPLDDNAM,SPLVOLID   MOVE DDNAME TO TEXT UNIT          R4
         LA    R0,SPLDSTXT         SET POINTER TO                    R4
         ST    R0,SPLDSNTA          DSNAME TEXT UNIT                 R4
         MVC   SPLDSTXT,SPDSNTXT   SET DSNAME TEXT                   R4
         MVI   SPLDSNAM,C' '       BLANK OUT ENTIRE DSNAME           JN
         MVC   SPLDSNAM+1(L'SPLDSNAM-1),SPLDSNAM  (LIKEWISE)         JN
         MVC   SPLDSNAM(8),$DSNPRFX SET PREFIX (DEFAULT = 'SYS1')    JN
         LA    R1,SPLDSNAM         SCAN FOR                          JN
SKIP90   LA    R1,1(,R1)             FIRST BLANK                     JN
         CLI   0(R1),C' '            FOLLOWING                       JN
         BNE   SKIP90                PREFIX                          JN
         MVC   0(8,R1),=CL8'.HASPACE' SET DSNAME FOR HASPACE         JN
         TM    SPLFLG1,SPL1CKPT    TEST FOR SYS1.HASPCKPT            R4
         BZ    SPVOLSER            BR IF NO                    @OZ27300
         MVC   5(4,R1),=CL4'CKPT'   ELSE SET DSNAME AND DDNAME @OZ27300
         MVC   SPLDDNAM,=C'$CKPT '   TO PRIMARY CHECKPOINT     @OZ27300
         TM    SPLFLG1,SPL1CKP2    ALTERNATE CHECKPOINT...     @OZ27300
*                                  THIS CARD DELETED BY APAR   @OZ27300
         BZ    SPVOLSER            BR IF PRIMARY               @OZ27300
         MVC   SPLDDNAM,=C'$CKPT2'  ELSE SET FOR ALTERNATE     @OZ27300
         SPACE 1                                               @OZ27300
SPVOLSER LA    R0,SPLVLTXT         SET POINTER TO              @OZ27300
         ST    R0,SPLVOLTA          VOLUME SERIAL TEXT UNIT          R4
         MVC   SPLVLTXT,SPVOLTXT   SET VOLUME SERIAL TEXT            R4
         LA    R0,SPLDPTXT         SET POINTER TO                    R4
         ST    R0,SPLDSPTA          DATA SET DISPOSITION TEXT UNIT   R4
         MVI   SPLDSPTA,S99TUPLN   INDICATE LAST TEXT UNIT POINTER   R4
         MVC   SPLDPTXT,SPDSPTXT   SET DISP=OLD TEXT                 R4
         LA    R0,SPLUNTXT         SET POINTER TO                    R4
         ST    R0,SPLUNITA          UNIT NAME TEXT UNIT              R4
         MVC   SPLUNTXT,SPUNITXT   SET UNIT NAME TEXT                R4
         TM    SPLFLG1,SPL1UNAL    TEST FOR UNALLOCATE REQUEST       R4
         BO    SPUNALOC            BR IF YES                         R4
         OC    SPLUCBPT,SPLUCBPT   TEST FOR UCB ADDRESS              R4
         BNZ   SPDYNAL             BR IF YES - UNIT NAME PROVIDED    R4
         OI    S99FLG21,S99WTUNT+S99OFFLN    ELSE ALLOW              R4
         MVI   S99FLG22,S99UDEVT              WAIT ON                R4
         MVI   S99TULNG+1-S99TUNIT+SPLUNTXT,8  OFFLINE UNIT          R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        DYNAMIC ALLOCATE SPOOL/CHECKPOINT VOLUME                     *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
SPDYNAL  LA    R1,SPLDYNAL         POINT TO PARAMETER LIST           R4
         DYNALLOC                   AND ALLOCATE THE VOLUME          R4
         LTR   R15,R15             TEST ALLOCATE                     R4
         BNZ   SPEXIT              BR IF ALLOCATE ERROR              R4
         NI    SPLFLG2,255-SPL2UNAL  RESET UNALLOCATE FLAG           R4
         L     R3,CVTPTR           GET CVT ADDRESS                   R4
         ICM   R4,15,SPLUCBPT      TEST FOR UCB ADDRESS              R4
         BNZ   SPUCBOK             BR IF PROVIDED                    R4
         SPACE 1                                                     R4
***********************************************************************
*                                                                     *
*        LOCATE SPOOL/CHECKPOINT VOLUME UCB                           *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         USING CVT,R3              PROVIDE CVT ADDRESSABILITY        R4
         USING UCBDSECT,R4         PROVIDE UCB ADDRESSABILITY        R4
         SPACE 1                                                     R4
         L     R15,CVTILK2         GET ADDRESS OF UCB                R4
         SH    R15,=H'2'            LOOK-UP TABLE (LESS 2)           R4
         SPACE 1                                                     R4
SPNXTUCB LA    R15,2(,R15)         GET NEXT LOOK-UP TABLE ENTRY      R4
         ICM   R4,3,0(R15)         GET UCB ADDRESS                   R4
         BZ    SPNXTUCB            IGNORE IF NULL ENTRY              R4
         CLI   UCBTBYT3,UCB3DACC   TEST DEVICE TYPE                  R4
         BNE   SPNXTUCB            IGNORE IF NOT DIRECT ACCESS       R4
         CLC   SPLVOLID,SRTEVOLI   TEST VOLUME SERIAL                R4
         BNE   SPNXTUCB            IGNORE IF NOT OUR VOLUME          R4
         ST    R4,SPLUCBPT          ELSE STORE UCB ADDRESS           R4
         SPACE 1                                                     R4
         USING QSEDSECT,R1         PROVIDE QSE ADDRESSABILITY        R4
         SPACE 1                                                     R4
SPUCBOK  L     R1,$QSE1            POINT TO 1ST QSE                  R4
         TM    QSEFLAGS,QSELAST    TEST FOR UNI-SYSTEM NODE          R4
         BO    SPOBTAIN            BR IF YES                         R4
         TM    UCBTBYT2,UCBRR      TEST FOR SHARED DASD              R4
         BO    SPOBTAIN            BR IF YES                         R4
         LA    R1,QSELEN(,R1)      POINT TO 2ND QSE            @OZ27300
         TM    QSEFLAGS,QSELAST    MORE THAN 2 CPU'S DEFINED...     R41
         BNO   SPUCBERR            BR IF YES, MUST BE SHARED        R41
         L     R5,UCBEXTPT         GET UCB EXTENSION ADDRESS,       R41
         USING UCBCMEXT,R5          AND SET ADDRESSABILTY           R41
         TM    UCBFLP1,UCBSHRUP    IS SHARED-UP GENERATED...        R41
         BO    SPOBTAIN            BR IF YES, TEST NEXT UCB         R41
SPUCBERR MVC   SPLMSG,SPSHRMSG      ELSE                            R41
         MVC   SPLSHRVL,SPLVOLID     INFORM                          R4
         BAL   WE,SPWTO               OPERATOR                       R4
         B     SPUNALOC                AND BR TO EXIT                R4
         SPACE 1                                                     R4
         DROP  R1                  KILL QSE ADDRESSABILITY           R4
         DROP  R5                  KILL UCB EXT. ADDRESSABILITY     R41
         SPACE 1                                                    R41
SPOBTAIN DS    0H                                                    JN
         MVI   SPLCMLST,193            PREPARE                       R4
         XC    SPLCMLST+1(3),SPLCMLST+1 CAMLST                       R4
         LA    R0,SPLDSNAM               TO                          R4
         ST    R0,SPLCMLST+4              OBTAIN                     R4
         LA    R0,SPLVOLID                 SPOOL/CHECKPOINT          R4
         ST    R0,SPLCMLST+8                VOLUME                   R4
         LA    R0,SPLDSCB                    EXTENT                  R4
         ST    R0,SPLCMLST+12                 DATA                   R4
         OBTAIN SPLCMLST           GET SPOOL/CHECKPOINT DSCB         R4
         LTR   R15,R15             TEST OBTAIN                       R4
         BZ    SPOBTOK             BR IF OBTAIN SUCCESSFUL           R4
         MVC   SPLMSG,SPOBTERM     MOVE MESSAGE TO WORK AREA         R4
         MVC   SPLOBTVL,SPLVOLID   FILL IN                           R4
         SRL   R15,1                PERTINENT                        R4
         LA    R2,SPATAB-2(R15)      INFORMATION                     R4
         MVC   SPLOBTCC,0(R2)         AND                            R4
         MVC   SPLOBTDS,SPLDSNAM       INFORM                        R4
         BAL   WE,SPWTO                 OPERATOR                     R4
         OI    SPLFLG2,SPL2OBT     INDICATE OBTAIN ERROR             R4
         B     SPUNALOC             AND BR TO EXIT                   R4
         SPACE 1                                                     R4
SPOBTOK  CLI   SPLDSCB+61,X'00'    HAS DATASET ANY EXTENT?     @OZ33861
         BNE   SPOBTOK1            YES,BRANCH                  @OZ33861
         MVC   SPLMSG,SPLZEXTM     MOVE IN MESSAGE             @OZ33861
         MVC   SPLZDSNM,SPLDSNAM   MOVE IN DATASET NAME        @OZ33861
         MVC   SPLZVOLS,SPLVOLID   MOVE IN VOLUME-SERIAL       @OZ33861
         BAL   WE,SPWTO            INFORM OPERATOR             @OZ33861
         OI    SPLFLG2,SPL2OBT     INDICATE OBTAIN ERROR       @OZ33861
         B     SPUNALOC            BR TO EXIT                  @OZ33861
SPOBTOK1 MVC   SPLSTRCC,SPLDSCB+63 EXTRACT EXTENT LIMITS       @OZ33861
         TM    SPLFLG1,SPL1CKPT    TEST FOR SYS1.HASPCKPT            R4
         BO    SPTEDVLS            BR IF YES                         R4
         EJECT                                                      R41
***********************************************************************
*                                                                     *
*        CONSTRUCT DIRECT ACCESS DCB AND DEB                          *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         USING DCBDSECT,R1         PROVIDE DCB ADDRESSABILITY        R4
         USING DEBDSECT,R2         PROVIDE DEB ADDRESSABILITY        R4
         SPACE 1                                                     R4
         LA    R1,SPLDCB           GET DCB ADDRESS                   R4
         LA    R2,SPLDEB           GET DEB ADDRESS                   R4
         MVC   DCBTIOT((3+8)*4),SPDCBDEB  MOVE IN SKELETON DCB/DEB   R4
         ST    R2,DCBDEBAD         SET DEB ADDRESS IN DCB            R4
         MVC   DEBTCBB,SPLTCBPT+1  SET TCB ADDRESS IN DEB            R4
         STCM  R1,7,DEBDCBB        SET DCB ADDRESS IN DEB            R4
         MVC   DEBAPPB,CVTXAPG+1   DON'T USE JES2 APPENDAGES         R4
         LA    R2,DEBBASND         POINT TO 1ST DEB EXTENT           R4
         SPACE 1                                                     R4
         USING DEBDASD,R2          PROVIDE DEB EXTENT ADDRESSABILITY R4
         SPACE 1                                                     R4
         MVC   DEBSTRCC(8),SPLSTRCC  MOVE IN DEB EXTENT SKELETON     R4
         STH   R4,DEBUCBAD+2       SET UCB ADDRESS IN DEB            R4
         SPACE 1                                                     R4
         DROP  R1,R2               KILL DCB, DEB ADDRESSABILITY      R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        OBTAIN VALUES FOR TED CONSTRUCTION                           *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
SPTEDVLS SLR   R14,R14             GET DEVICE TYPE                   R4
         IC    R14,UCBTBYT4         FROM UCB                         R4
         L     R3,CVTZDTAB         POINT TO DEVICE                   R4
         IC    R14,0(R3,R14)        CHARACTERISTICS TABLE            R4
         ALR   R14,R3                ENTRY FOR DEVICE                R4
         SPACE 1                                                     R4
         DROP  R3,R4               KILL CVT, UCB ADDRESSABILITY      R4
         USING SPZ,R14             PROVIDE TBL ENTRY ADDRESSABILITY  R4
         SPACE 1                                                     R4
         LH    R6,$BUFSIZE         ASSUME SPOOL BUFFER SIZE    @OZ20010
         TM    SPLFLG1,SPL1CKPT    TEST FOR CKPT DATA SET      @OZ20010
         BNO   *+8                 BR IF NORMAL SPOOL ALLOC    @OZ20010
         LH    R6,=H'4096'         ELSE, USE 4K AS RECORD SIZE @OZ20010
         LR    R5,R6               SET NOT-LAST-RECORD LENGTH        R4
         SLR   R7,R7               CLEAR R7, AND R10                 R4
         LR    R10,R7               FOR INSERTS                      R4
         IC    R7,SPZU             GET SUBTRAHEND FOR UNKEYED BLOCKS R4
         IC    R10,SPZL            GET LAST-BLOCK OVERHEAD           R4
         TM    SPZF,SPZF2305       TEST FOR 2305                     R4
         BZ    SKIP110             BR IF NO                          R4
         LH    R10,SPZO             ELSE GET HALFWORD OVERHEAD       R4
SKIP110  ALR   R6,R10              ADD OVERHEAD, SUBTRAHEND UNKEYED  R4
         SLR   R6,R7                FOR TRUE LAST-BLOCK LENGTH       R4
         TM    SPZF,SPZFT          SHOULD WE APPLY TOLERANCE...      R4
         BZ    SKIP120             BR IF NO                          R4
         MH    R5,SPZT              ELSE MULTIPLY BY TOLERANCE       R4
         SRL   R5,9                  AND DIVIDE BY 512               R4
SKIP120  TM    SPZF,SPZF2305       TEST FOR 2305                     R4
         BO    SKIP130             BR IF YES                         R4
         IC    R10,SPZNL            ELSE GET NOT-LAST-BLOCK OVERHEAD R4
SKIP130  ALR   R5,R10              ADD OVERHEAD, SUBTRAHEND UNKEYED  R4
         SLR   R5,R7                FOR NOT-LAST-BLOCK LENGTH        R4
         LH    R7,SPZR             GET TRACK LENGTH                  R4
         SLR   R7,R6               TAKE AWAY LAST-BLOCK LENGTH       R4
         SLR   R6,R6               GET COUNT OF                      R4
         DR    R6,R5                NOT-LAST BLOCKS                  R4
         LA    R6,1(,R7)           ADD 1 FOR RECORDS PER TRACK       R4
         STH   R6,SPLTNRT          STORE RECORDS PER TRACK           R4
         LH    R5,SPZH             GET NUMBER OF HEADS PER CYLINDER  R4
         ST    R5,SPLTNTC          STORE NUMBER OF HDS PER CYLINDER  R4
         TM    SPLFLG1,SPL1CKPT    TEST FOR SYS1.HASPCKPT      @OZ36695
         BO    SPGRPS              BR IF YES                   @OZ36695
         LH    R7,SPZA             GET NUMBER OF ALTERNATE TRACKS    R4
         SLR   R6,R6               COMPUTE NUMBER                    R4
         DR    R6,R5                OF ALTERNATE CYLINDERS           R4
         LH    R6,SPZC             GET NUMBER OF CYLINDERS           R4
         SLR   R6,R7                LESS ALTERNATES                  R4
         MR    R4,R6               GET NUMBER OF TRACKS IN VOLUME    R4
         LH    R7,$NUMTGV          GET NUMBER OF GROUPS PER VOLUME   R4
         DR    R4,R7               STORE NUMBER OF                   R4
         STH   R5,SPLTNTG           TRACKS PER GROUP                 R4
         SPACE 1                                                     R4
         DROP  R14                 KILL TABLE ENTRY ADDRESSABILITY   R4
         EJECT                                                       R4
*              THIS LINE DELETED BY APAR NUMBER                @OZ36695
*              THIS LINE DELETED BY APAR NUMBER                @OZ36695
         LTR   R5,R5               TEST TRACKS PER GROUP COUNT       R4
         BNZ   SPBLDIOB            BR IF &NUMTGV VALID FOR VOLUME    R4
         MVC   SPLMSG,SPTGVERM      ELSE ISSUE                       R4
         MVC   SPLFMTV3,SPLVOLID     ERROR MESSAGE                   R4
         BAL   WE,SPWTO               TO OPERATOR                    R4
         B     SPUNALOC                AND BR TO EXIT                R4
         SPACE 1                                                     R4
***********************************************************************
*                                                                     *
*        CONSTRUCT DIRECT ACCESS IOB                                  *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
SPBLDIOB LA    WG,SPLIOB           POINT TO IOB                      R4
         XC    IOBFLAG1(11*4),IOBFLAG1  CLEAR IOB                    R4
         MVI   IOBFLAG1,X'C2'      SET UNRELATED, CMD+DATA CHAINING  R4
         LA    R0,SPLDCB           SET POINTER TO                    R4
         ST    R0,IOBDCBPT          DIRECT ACCESS DCB                R4
         LA    R0,SPLECB           SET POINTER TO                    R4
         ST    R0,IOBECBPT          EXCP IOB                         R4
         MVC   IOBSEEK+8(2),$BUFSIZE  SET SPOOL BUFFER SIZE          R4
         TM    SPLFLG1,SPL1FMT     TEST FORMATTING REQUIREMENT       R4
         BO    SPFORMAT            BR IF SET                         R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        READ COUNT PORTION OF 1ST RECORD ON LAST TRACK OF 1ST        *
*        EXTENT OF VOLUME TO DETERMINE WHETHER OR NOT VOLUME          *
*        IS CORRECTLY FORMATTED.                                      *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
         LA    R0,SPLCCWS          SET POINTER TO                    R4
         ST    R0,IOBSTART          CHANNEL PROGRAM                  R4
         MVC   IOBSEEK+2(4),SPLUPLIM  SET CCHH FOR READ COUNT        R4
         MVC   SPLCCWS(3*8),SPREADCT  MOVE IN SKELETON CHANNEL PGM   R4
         LA    R0,IOBSEEK+2        SET POINTER                       R4
         STCM  R0,7,SPLCCW1+1       TO CCHH                          R4
         LA    R0,SPLCCW1          SET ADDRESS                       R4
         STCM  R0,7,SPLCCW2+1       FOR TIC *-8                      R4
         LA    R0,SPLRDCT          SET ADDRESS OF                    R4
         STCM  R0,7,SPLCCW3+1       READ-IN AREA                     R4
         BAL   WE,SPEXCP           GO TRY TO READ COUNT              R4
         BO    SKIP140             BR IF READ OK                     R4
         OI    SPLFLG2,SPL2RDER     ELSE INDICATE READ ERROR         R4
SKIP140  MVI   SPLRDCT+4,0         SET READ-IN RECORD COUNT TO 0     R4
         CLC   SPLRDCT,IOBSEEK+2   COMPARE COUNT WITH EXPECTED       R4
         BE    SKIP150             BR IF EQUAL                       R4
         OI    SPLFLG2,SPL2RDER     ELSE INDICATE READ ERROR         R4
SKIP150  TM    SPLFLG1,SPL1NFMT    TEST FORMATTING REQUIREMENT       R4
         BO    SPGRPS              BR IF FORMATTING NOT ALLOWED      R4
         TM    SPLFLG2,SPL2RDER    TEST FOR READ ERROR               R4
         BZ    SPGRPS              BR IF NO                          R4
         NI    SPLFLG2,255-SPL2RDER  ELSE RESET READ ERROR FLAG      R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        FORMAT SYS1.HASPACE ON SPOOL VOLUME                          *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
SPFORMAT MVC   SPLMSG,SPFMTMSG     ISSUE                             R4
         MVC   SPLFMTV1,SPLVOLID    FORMATTING MSG                   R4
         BAL   WE,SPWTO              TO OPERATOR                     R4
         LH    R2,SPLTNRT          GET NUMBER OF RECORDS PER TRACK   R4
         LR    R3,R2               SAVE IN R3                        R4
         SLL   R2,4                COMPUTE                           R4
         LA    R0,16(,R2)           WORK AREA                        R4
         ST    R0,SPLGMAIN           SIZE                            R4
         GETMAIN R,LV=(0)          OBTAIN WORK AREA                  R4
         ST    R1,IOBSTART         SET CHANNEL PROGRAM ADDRESS       R4
         ST    R1,8(,R1)           SET UP                            R4
         MVI   8(R1),8              TIC COMMAND                      R4
         MVC   0(8,R1),SPREADCT    SET                               R4
         LA    R0,IOBSEEK+2         SEARCH                           R4
         STCM  R0,7,1(R1)            COMMAND                         R4
         LA    R1,8(,R1)           POINT 8 BEFORE 1ST WRITE CCW      R4
         LR    R2,R3               GET NUMBER OF RECORDS PER TRACK   R4
         SLL   R2,3                POINT TO 8 BEFORE                 R4
         ALR   R2,R1                1ST COUNT FIELD                  R4
         ICM   R2,8,=X'1D'         SET WRITE COUNT-KEY-DATA          R4
         LR    R0,R3               GET CCW COUNT                     R4
         L     R3,SPFDATL          GET RIGHT HALF OF CCW             R4
         SPACE 1                                                     R4
SKIP160  AL    R2,=F'8'            CONSTRUCT                         R4
         LA    R1,8(,R1)            FORMAT                           R4
         STM   R2,R3,0(R1)           CHANNEL                         R4
         BCT   R0,SKIP160             PROGRAM                        R4
         SPACE 1                                                     R4
         NI    4(R1),X'BF'         TURN OFF LAST CCW'S CC FLAG       R4
         ST    R1,SPLCFLDS         SAVE PTR TO 8 BEFORE 1ST CT FIELD R4
         MVC   IOBSEEK+2(4),SPLOWLIM  STARTING CCHHRKDD              R4
         EJECT                                                       R4
SPFMTRK  LH    R0,SPLTNRT          GET NUMBER OF COUNT FIELDS        R4
         L     R1,SPLCFLDS         POINT TO 8 BEFORE THE FIRST       R4
         ICM   R2,15,IOBSEEK+2     STARTING                          R4
         ICM   R3,15,IOBSEEK+6      CCHHRKDD                         R4
         SPACE 1                                                     R4
SKIP170  AL    R3,=FS24'1'         ADD 1 TO RECORD NUMBER            R4
         LA    R1,8(,R1)           POINT TO NEXT COUNT FIELD         R4
         STM   R2,R3,0(R1)         SET COUNT FIELD                   R4
         BCT   R0,SKIP170          LOOP TO SET THE REST              R4
         SPACE 1                                                     R4
         BAL   WE,SPEXCP           GO FORMAT THE TRACK               R4
         BZ    SPFMTERR            BR IF I/O ERROR                   R4
         SLR   R2,R2               GET CURRENT                       R4
         ICM   R2,3,IOBSEEK+4       HEAD NUMBER                      R4
         LA    R2,1(,R2)           ADD 1 TO IT                       R4
         C     R2,SPLTNTC          TEST FOR MAX                      R4
         BL    SKIP180             BR IF NO                          R4
         SR    R2,R2                ELSE MAKE IT ZERO (AND SET CC)   R4
SKIP180  STCM  R2,3,IOBSEEK+4      SET NEW HEAD NUMBER               R4
         BNZ   SKIP190             BR IF SAME CYLINDER               R4
         ICM   R2,3,IOBSEEK+2       ELSE                             R4
         LA    R2,1(,R2)             ADD 1                           R4
         STCM  R2,3,IOBSEEK+2         TO CYLINDER NUMBER             R4
SKIP190  CLC   SPLUPLIM(4),IOBSEEK+2  IS FORMATTING COMPLETE...      R4
         BNL   SPFMTRK             BR IF NO                          R4
         SPACE 1                                                     R4
         BAL   WE,SPFREEWK         FREE WORK STORAGE                 R4
         B     SPGRPS              THEN BR TO GET TRK GROUP INFO     R4
         SPACE 1                                                     R4
SPFMTERR MVC   SPLMSG,SPFMTERM     ISSUE                             R4
         MVC   SPLFMTV2,SPLVOLID    ERROR MSG                        R4
         BAL   WE,SPWTO              TO OPERATOR                     R4
         OI    SPLFLG2,SPL2FMT     INDICATE I/O ERROR                R4
         BAL   WE,SPFREEWK         FREE WORK STORAGE                 R4
         B     SPUNALOC             AND BR TO EXIT                   R4
         SPACE 1                                                     R4
SPFREEWK L     R0,SPLGMAIN         FREE                              R4
         L     R1,IOBSTART          WORK                             R4
         FREEMAIN R,LV=(0),A=(1)     STORAGE                         R4
         BR    WE                  THEN RETURN                       R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        OBTAIN SYS1.HASPCKPT/SYS1.HASPACE EXTENT INFORMATION         *
*                                                                     *
*        R1 LEFT WITH NUMBER OF 1ST USABLE TRACK GROUP                *
*        R2 LEFT WITH COUNT OF USABLE TRACK GROUPS                    *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
SPGRPS   LA    R0,SPLTGM           SET                               R4
         LH    R1,$NUMTGV           TRACK                            R4
         LA    R1,7(,R1)             GROUP                           R4
         SRL   R1,3                   MAP                            R4
         SLR   R15,R15                 TO                            R4
         MVCL  R0,R14                   ZERO                         R4
         LH    R1,SPLOWLIM         R14 = TRACK                       R4
         M     R0,SPLTNTC                 NUMBER                     R4
         AH    R1,SPLOWLIM+2               OF 1ST                    R4
         LR    R14,R1                       TRACK                    R4
         STH   R14,SPLOWTRK        SET LOWER ABSOLUTE TRACK NUMBER   R4
         TM    SPLFLG1,SPL1CKPT    TEST FOR SYS1.HASPCKPT      @OZ36695
         BO    SKIP200             BR IF YES                   @OZ36695
         LH    R2,SPLTNTG          R1 = TRACK                        R4
         DR    R0,R2                     GROUP NUMBER                R4
         LTR   R0,R0                      OF 1ST                     R4
         BZ    SKIP200                     USABLE                    R4
         LA    R1,1(,R1)                    TRACK GROUP              R4
SKIP200  LH    R15,SPLUPLIM        R15 = TRACK NUMBER                R4
         MH    R15,SPLTNTC+2              OF LAST                    R4
         AH    R15,SPLUPLIM+2              TRACK                     R4
         STH   R15,SPLUPTRK        SET UPPER ABSOLUTE TRACK NUMBER   R4
         LA    R0,1(,R15)          SET NUMBER                        R4
         SLR   R0,R14               OF TRACKS                        R4
         STH   R0,SPLNMTRK           IN EXTENT                       R4
         TM    SPLFLG1,SPL1CKPT    TEST FOR SYS1.HASPCKPT      @OZ36695
         BO    SPERRTST            BR IF YES                   @OZ36695
         LH    R3,$NUMTGV          R3 = UNUSABLE                     R4
         MH    R3,SPLTNTG                TRACKS                      R4
         BCTR  R3,0                       BEYOND                     R4
         SR    R3,R15                      END                       R4
         BNM   SKIP210                      OF EXTENT          @OZ46018
         MVC   SPLMSG,SPTGERRM     IF DATA SET EXTENDS BEYOND  @OZ46018
         MVC   SPLZDSNM,SPLDSNAM    USABLE TRACK GROUPS, SEND  @OZ46018
         MVC   SPLZVOLS,SPLVOLID     MESSAGE THAT PART OF      @OZ46018
         LR    R3,R1                  DATA SET IS UNUSABLE     @OZ46018
         BAL   WE,SPWTO                BECAUSE OF ROUNDING     @OZ46018
         LR    R1,R3                    FOR NO. OF TRKS PER    @OZ46018
         SLR   R3,R3                     TRK GROUP             @OZ46018
SKIP210  SLR   R2,R2               R3 = UNUSABLE                     R4
         LH    R0,SPLTNTG                TRACK GROUPS                R4
         DR    R2,R0                      CAUSED                     R4
         LTR   R2,R2                       BY                        R4
         BZ    SKIP220                      UPPER                    R4
         LA    R3,1(,R3)                     EXTENT                  R4
SKIP220  LH    R2,$NUMTGV          R2 = NUMBER OF                    R4
         SLR   R2,R1                     USABLE TRACK                R4
         SR    R2,R3                      GROUPS                     R4
         ST    R2,SPLNUMTG         SET COUNT OF USABLE TRACK GROUPS  R4
         BP    SPNTGOK             SOME ARE USABLE, CONTINUE   @OZ46018
         MVC   SPLMSG,SPLNOTGM     IF NONE ARE USABLE,         @OZ46018
         MVC   SPLTGVOL,SPLVOLID    ISSUE ERROR                @OZ46018
         BAL   WE,SPWTO              MESSAGE AND               @OZ46018
         B     SPUNALOC               GO UNALLOCATE VOLUME     @OZ46018
*              THIS LINE DELETED BY APAR NUMBER                @OZ36695
*              THIS LINE DELETED BY APAR NUMBER                @OZ36695
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        PREPARE BIT MAP FOR SPOOL VOLUME                             *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
SPNTGOK  LA    R14,SPLTGM          CLEAR                       @OZ46018
         LH    R15,$NUMTGV          VOLUME                           R4
         LA    R15,7(,R15)           TRACK                           R4
         SRL   R15,3                  GROUP                          R4
         SLR   R5,R5                   BIT                           R4
         MVCL  R14,R4                   MAP                          R4
         SLDL  R0,29               R15 = BYTE ADDRESS                R4
         LA    R15,SPLTGM                 IN VOLUME BIT MAP          R4
         ALR   R15,R0                      OF FIRST USABLE           R4
         SRL   R1,29                        TRACK GROUP              R4
         SPACE 1                                                     R4
SPNXTGRP IC    R3,SPBITBLE(R1)     GET BIT INTO R3                   R4
         EX    R3,SPBITSET         OR BIT INTO TRACK GROUP MAP       R4
         LA    R1,1(,R1)           ADD 1 TO BIT NUMBER               R4
         N     R1,=F'7'            ZERO ALL BUT LO-ORDER 3 BITS      R4
         BNZ   SKIP230             BR IF BIT IN SAME BYTE            R4
         LA    R15,1(,R15)          ELSE ADD 1 TO BYTE ADDRESS       R4
SKIP230  BCT   R2,SPNXTGRP         LOOP THRU ALL TRACK GROUPS        R4
         SPACE 1                                                     R4
         B     SPERRTST            THEN EXIT                         R4
         SPACE 1                                                     R4
SPBITSET OI    0(R15),*-*          *** EXECUTE ONLY ***              R4
         EJECT                                                       R4
SPERRTST CLI   SPLFLG2,0           TEST FOR ANY ERRORS               R4
         BE    SPEXIT              BR IF NO                          R4
         SPACE 1                                                     R4
***********************************************************************
*                                                                     *
*        ERROR DETECTED -- UNALLOCATE VOLUME                          *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
SPUNALOC OC    SPLUCBPT,SPLUCBPT   TEST FOR UCB ADDRESS              R4
         BZ    SPEXIT              BR IF NO (VOLUME NEVER ALLOC'D)   R4
         LA    R10,SPLDYNRB        GET RB ADDRESS                   R41
         MVI   S99VERB,S99VRBUN    INDICATE UNALLOCATE REQUEST       R4
         MVI   SPLDDTA,S99TUPLN    USE DDNAME TEXT UNIT        @OZ69649
         OI    SPLFLG2,SPL2UNAL    INDICATE VOLUME UNALLOCATED      R41
         LA    R1,SPLDYNAL         POINT TO PARAMETER LIST           R4
         DYNALLOC                   AND UNALLOCATE THE VOLUME        R4
         SPACE 5                                                     R4
***********************************************************************
*                                                                     *
*        EXIT FROM SUBTASK                                            *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
SPEXIT   L     R13,SPLSAVE+4       GET SYSTEM'S SAVE AREA ADDRESS    R4
         LM    R14,R12,12(R13)     RESTORE SYSTEM'S REGISTERS        R4
         BR    R14                  AND RETURN                       R4
         EJECT                                                       R4
***********************************************************************
*                                                                     *
*        SPEXCP -- EXCP SUBROUTINE                                    *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
SPEXCP   EXCP  SPLIOB              INITIATE I/O OPERATION            R4
         WAIT  ECB=SPLECB          WAIT FOR I/O TO COMPLETE          R4
         TM    SPLECB,X'20'        TEST FOR ERROR                    R4
         BR    WE                  RETURN WITH CC SET                R4
         SPACE 3                                                     R4
***********************************************************************
*                                                                     *
*        SPWTO -- SUBROUTINE TO ISSUE MESSAGE TO OPERATOR             *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
SPWTO   $$WTO  SPLMSG              ISSUE MESSAGE TO OPERATOR         R4
         BR    WE                  THEN RETURN                       R4
         SPACE 1                                                     R4
         DROP  ,                   KILL ALL ADDRESSABILITY           R4
         SPACE 5                                                     R4
         LTORG                                                       R4
         EJECT                                                       R4
SPALFLGS EQU   S99WTVOL+S99NORES+S99MOUNT  ALLOCATION FLAGS          R4
         SPACE 1                                                     R4
SPDCBDEB DS    0F                  DCB/DEB SKELETONS                 R4
         DC    AL2(0),AL1(DCBMRECP+DCBMRAPG)     DCBTIOT, DCBMACRF   R4
         DC    AL1(0),A(0),AL1(DCBOFOPN),AL3(0)  DCBOFLGS            R4
         DC    A(0),AL1(4),AL3(0)                DEBTCBAD, DEBAMLNG  R4
         DC    AL1(DEBDSMOD+DEBDCB),AL3(0)       DEBOFLGS            R4
         DC    AL1(DEBINOUT),AL3(0)              DEBINOUT            R4
         DC    AL1(1),AL3(0),A(0)                DEBNMEXT            R4
         DC    AL1(1*16+15),AL3(0)               DEBPROTG/DEBDEBID   R4
         DC    AL1(4),AL3(0)                     DEBEXSCL            R4
         SPACE 1                                                     R4
SPREADCT CCW   X'31',*-*,X'40',5   SEARCH ID EQUAL                   R4
         CCW   8,*-8,0,1           TIC *-8                           R4
         CCW   X'12',*-*,0,8       READ COUNT                        R4
         SPACE 1                                                     R4
SPDDTXT  DC    AL2(DALDDNAM,1,7)   MODEL DDNAME TEXT                 R4
         DC    C'$'                1ST CHARACTER OF DDNAME           R4
SPDSNTXT DC    AL2(DALDSNAM,1,17)  MODEL DSNAME TEXT           @OZ70110
SPVOLTXT DC    AL2(DALVLSER,1,6)   MODEL VOLUME SERIAL TEXT          R4
SPUNITXT DC    AL2(DALUNIT,1,3)    MODEL UNIT NAME TEXT              R4
SPDSPTXT DC    AL2(DALSTATS,1,1),AL1(1)  MODEL DISPOSITION TEXT      R4
         SPACE 1                                                     R4
SPFDATL  DC    0F'0',X'60',AL3(8)  RIGHT HALF OF CCW                 R4
         SPACE 1                                                     R4
SPATAB   DC    C'4 8 121620'       OBTAIN ERROR CC TABLE       @OZ18393
SPBITBLE DC    X'8040201008040201' BITS-BY-BIT NUMBER TABLE          R4
         SPACE 2                                                     R4
***********************************************************************
*                                                                     *
*        DEVICE CHARACTERISTICS TABLE ENTRY DSECT                     *
*                                                                     *
***********************************************************************
         SPACE 1                                                     R4
SPZ      DSECT                     IECZDTAB DUMMY SECTION            R4
SPZC     DS    H                   NUMBER OF CYLINDERS PER VOLUME    R4
SPZH     DS    H                   NUMBER OF TRACKS PER CYLINDER     R4
SPZR     DS    H                   MAXIMUM TRACK LENGTH              R4
SPZO     DS    0H                  BLOCK OVERHEAD -- 2305            R4
SPZNL    DS    X                   BLOCK OVERHEAD -- KEYED           R4
SPZL     DS    X                   BLOCK OVERHEAD -- KEYED LAST      R4
SPZU     DS    X                   BLOCK OVERHEAD -- UNKEYED         R4
SPZF     DS    X                   FLAGS --                          R4
SPZFT    EQU   1                      APPLY TOLERANCE FACTOR         R4
SPZF2305 EQU   8                      DEVICE IS 2305                 R4
SPZT     DS    H                   TOLERANCE FACTOR IF SPZFT         R4
SPZA     DS    H                   NUMBER OF ALTERNATE TRACKS        R4
         SPACE 1                                                     R4
HASPMISC CSECT                     END OF IECZDTAB DUMMY SECTION     R4
         EJECT                                                       R4
        $MID   414                 SET MESSAGE NUMBER                R4
SPOBTERM WTO   '&MID.OBTAIN FAILED FOR ********.******** ON ****** WITHC
                CC **',MF=L                                         R41
SPLOBTDS EQU   *-38-SPOBTERM+SPLMSG,17  DATA SET NAME               R41
SPLOBTVL EQU   *-17-SPOBTERM+SPLMSG,6   VOLUME SERIAL                R4
SPLOBTCC EQU    *-2-SPOBTERM+SPLMSG,2   COMPLETION CODE              R4
         SPACE 2                                                     R4
        $MID   418                 SET MESSAGE NUMBER                R4
SPFMTERM WTO   '&MID.PERM I/O ERROR ON ****** WHILE FORMATTING',MF=L R4
SPLFMTV2 EQU   *-23-SPFMTERM+SPLMSG,6   VOLUME SERIAL                R4
         SPACE 2                                                     R4
        $MID   423                 SET MESSAGE NUMBER                R4
SPFMTMSG WTO   '&MID.****** IS BEING FORMATTED',MF=L                 R4
SPLMSGID EQU   *-34-SPFMTMSG+SPLMSG,1   MESSAGE ID CHARACTER         R4
SPLFMTV1 EQU   *-25-SPFMTMSG+SPLMSG,6   VOLUME SERIAL                R4
         EJECT                                                       R4
        $MID   438                 SET MESSAGE NUMBER                R4
SPTGVERM WTO   '&MID.&&NUMTGV EXCEEDS TRACKS ON VVVVVV',MF=L         R4
SPLFMTV3 EQU   *-6-SPTGVERM+SPLMSG,6  VOLUME SERIAL                  R4
         SPACE 2                                                     R4
        $MID   449                 SET MESSAGE NUMBER                R4
SPSHRMSG WTO   '&MID.VVVVVV MUST BE MOUNTED ON SHAREABLE DEVICE',    R4C
               MF=L                                                  R4
SPLSHRVL EQU   *-42-SPSHRMSG+SPLMSG,6  VOLUME SERIAL                 R4
         $MID  453                                             @OZ33861
SPLZEXTM WTO   '&MID.********.******** ON VOLUME ****** HAS ZERO EXTENT*
               S',MF=L                                         @OZ33861
SPLZDSNM EQU   *-51-SPLZEXTM+SPLMSG,17                         @OZ33861
SPLZVOLS EQU   *-23-SPLZEXTM+SPLMSG,6                          @OZ33861
         SPACE 1                                               @OZ46018
         $MID  457                                             @OZ48742
SPTGERRM WTO   '&MID.********.******** ON VOLUME VVVVVV IS PARTIALLY UN*
               USABLE',MF=L                                    @OZ46018
         SPACE 1                                               @OZ46018
         $MID  456                                             @OZ46018
SPLNOTGM WTO   '&MID.&&NUMTGV IS INVALID FOR VOLUME VVVVVV',   @OZ46018*
               MF=L                                            @OZ46018
SPLTGVOL EQU   *-6-SPLNOTGM+SPLMSG,6   VOLUME SERIAL           @OZ46018
         SPACE 2                                                     R4
$MISCLEN $DLENGTH                  COMPUTE CONTROL SECTION LENGTH    R4
         SPACE 5                                                     R4
APARNUM  DC    CL5'78811'          APAR NUMBER
         END   ,                                                     R4
