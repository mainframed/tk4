         TITLE 'RAKF Initialization Program'
ICHSEC00 CSECT
*
**********************************************************************
*                                                                    *
* NAME: ICHSEC00                                                     *
*                                                                    *
* TYPE: Assembler Source                                             *
*                                                                    *
* DESC: Initialize RAKF                                              *
*                                                                    *
* FUNCTION: - output banner to console                               *
*           - check if SAFV is already defined and initialized       *
*             o if yes: skip initialization and go directly to       *
*                       profile and user table initialization        *
*           - try to read initialization directive from              *
*             parmlib member RAKFINIT:                               *
*             o if first line of member starts with YES:    continue *
*             o if first line of member starts with NO:     exit     *
*             o else, of if member doesn't exist:                    *
*               + ask operator for permission to initialize          *
*                 if operator denies permission:            exit     *
*           - get SQA storage for SAFV and initialize it             *
*           - put entry address of SAF router ICHSFR00 in SAFV       *
*           - initialize RCVT                                        *
*           - initialize profile table                               *
*           - initialize user table                                  *
*                                                                    *
* REQUIREMENTS: - ICHSFR00 in LPA                                    *
*               - RAKFPROF and RAKFUSER in linklist                  *
*               - parmlib defined through ddname IEFPARM             *
*               - user and profile table DDs as needed               *
*                 by RAKFPROF and RAKFUSER                           *
*                                                                    *
**********************************************************************
*
         PRINT NOGEN
         SAVE  (14,12),,ICHSEC00_&SYSDATE._&SYSTIME
         USING ICHSEC00,R15        establish => program EP
         ST    R13,SAVEAREA+4      save HSA
         LA    R11,SAVEAREA        establish => savearea
         ST    R11,8(R13)          save LSA
         LR    R13,R11             setup => our savearea
         USING SAVEAREA,R13        new addressability
         DROP  R15                 program EP no longer needed
         B     CONTINUE            branch around savearea
SAVEAREA DS    18F                 savearea
*
* identify
*
CONTINUE WTO   'RAKF is based on the ESG Security System'
         WTO   'written by Craig J. Yasuna               (Mar 1991)'
         WTO   'adapted to MVS 3.8J: A. Philip Dickinson (Aug 2005)'
         WTO   '                     Phil Roberts        (Apr 2011)'
         WTO   '                     Juergen Winkelmann  (Apr 2011)'
*
* RAKF already active?
*
         L     R2,FLCCVT-PSA(0)    get CVT address from PSA
         ICM   R3,B'1111',CVTSAF(R2) SAFV already defined?
         BZ    GOFORIT             no RAC active, continue activation
         USING SAFV,R3             addressability of SAFV
         CLC   SAFVIDEN(4),SAFVID  SAFV initialized?
         BNE   GOFORIT             no RAC active, continue activation
         DROP  R3                  SAFV no longer needed
         WTO   'RAKF005I RAKF is already active' tell operator
         B     PROFUSER            initialize user and profile table
*
* read parmlib
*
GOFORIT  LA    R11,PARMLIB         establish ..
         USING IHADCB,R11           .. DCB addressability
         OPEN  PARMLIB             open PARMLIB
         LH    R12,DCBBLKSI        get blocksize
         GETMAIN EU,LV=(R12),A=BLKADDR get storage for block
         FIND  PARMLIB,RAKFINIT,D  find member RAKFINIT
         LTR   R15,R15             parmlib member found?
         BNZ   CLOSE                --> no, don't read
         L     R12,BLKADDR         get block address
         READ  INDECB,SF,PARMLIB,(R12),'S' read block
         CHECK INDECB              wait for data to arrive
         MVC   RAKSTART(4),0(R12)  get parmlib input
CLOSE    LH    R12,DCBBLKSI        get blocksize
         FREEMAIN EU,LV=(R12),A=BLKADDR free storage
         CLOSE PARMLIB             close parmlib
         DROP  R11                 DCB no longer needed
*
* decide initialization
*
         CLC   RAKSTART(2),NO      if RAKFINIT directive is NO ..
         BE    NOINIT               .. talk dirrty and don't initialize
         CLC   RAKSTART(3),YES     if RAKFINIT directive is YES ..
         BE    INITMSG              .. initialize RAKF
         WTO   MF=(E,INITWTO)       .. else ask operator
         WTOR  'RAKF002A Reply YES to continue or NO to cancel',       X
               REPLY,4,SECECB,ROUTCDE=(1) .. shall we?
         WAIT  ECB=SECECB          wait for reply
         CLC   REPLY(2),NO         if operator replied NO ..
         BNE   INIT                 .. talk dirrty and don't initialize
NOINIT   WTO   'RAKF004W RAKF not initialized' tell operator
RETURN   L     R13,SAVEAREA+4      get caller's savearea
         RETURN (14,12),,RC=0      return
*
* initialize
*
INITMSG  WTO   MF=(E,INITWTO)      tell operator
INIT     MODESET MODE=SUP,KEY=ZERO authorize ourselves
         GETMAIN RU,LV=SAFVLEN,SP=245 get SQA storage for SAFV
         LR    R3,R1               establish ..
         USING SAFV,R3              .. addressability of SAFV
         XC    SAFV(SAFVLEN),SAFV  clear SAFV
         MVC   SAFVIDEN(4),SAFVID  move identifier into SAFV
         LOAD  EP=ICHSFR00         get SFR address (LPA)
         ST    R0,SAFVSAFR         store SFR address in SAFV
         DROP  R3                  SAFV addressability no longer needed
         L     R2,FLCCVT-PSA(0)    get CVT address from PSA
         ST    R3,CVTSAF(R2)       save SAFV address in CVT
         L     R15,CJYRCVT         get RCVT loader address
         BALR  R14,R15             call it
         MODESET MODE=PROB,KEY=NZERO return to problem state
         WTO   'RAKF003I RAKF is now active',ROUTCDE=(2) tell operator
PROFUSER LOAD  EP=RAKFPROF         load profile updater
         LR    R15,R0              address of entry point
         BALR  R14,R15             call it
         DELETE EP=RAKFPROF        remove it
         LOAD  EP=RAKFUSER         load user updater
         LR    R15,R0              address of entry point
         BALR  R14,R15             call it
         DELETE EP=RAKFUSER        remove it
         B     RETURN              return
*
* data area
*
BLKADDR  DS    F                   address of parmlib read buffer
CJYRCVT  DC    V(CJYRCVT)          RCVT loader
RAKFINIT DC    C'RAKFINIT'         parmlib member name
RAKSTART DC    CL4' '              parameter read from parmlib
REPLY    DC    CL4' '              reply from operator
SAFVID   DC    CL4'SAFV'           SAFV eye catcher
SECECB   DC    A(0)                ECB for WTOR
NO       DC    CL2'NO'             NO
YES      DC    CL3'YES'            YES
INITWTO  WTO   'RAKF001I RAKF is now being activated',                 X
               ROUTCDE=(1),MF=L    tell operator
PARMLIB  DCB   DDNAME=IEFPARM,DSORG=PO,MACRF=R,EODAD=CLOSE
*
* equates
*
CVTSAF   EQU   248 CVTSAF doesn't exist but is a reserved field in 3.8J
         YREGS                     register equates
*
* control block mappings
*
         CVT   DSECT=YES           map CVT
         IHAPSA   DSECT=YES        map PSA
         ICHSAFV  DSECT=YES        map SAFV
         DCBD  DSORG=PO,DEVD=DA    map DCB
         END   ICHSEC00
