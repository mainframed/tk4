         TITLE '       IEAVLK03 COMMENTARY'
* /* START OF SPECIFICATIONS ****
*
*01*  MODULE-NAME = IEAVLK03
*
*01*  DESCRIPTIVE-NAME = PROGRAM MANAGER RECOVERY ROUNTINES
*
*01*  COPYRIGHT = NONE
*
*01*  STATUS = VERSION 1
*
*01*  CHANGE-ACTIVITY - ZA02733 - RELEASE2
*                       OZ07515 - RELEASE999
*                       OZ03896 - RELEASE 4
*                       OZ12452 - RELEASE3
*         OZ19996 - REWRITE OF CDEVER ROUTINE                  @ZA19996
*         OZ24616 - OBTAIN PROPER RB POINTER                   @ZA24616
*
*01*  FUNCTION = PREVENTS UNWANTED ABENDS IN PROGRAM MANAGER BY
*     INTERCEPTING THEM AND CORRECTING ERRORS IF POSSIBLE.
*     THIS ROUTINE ALSO VERIFIES THE CDE QUEUE OR VERIFIES
*     THE PIE/PICA CHAIN.
*
*01*   NOTES = THE FOLLOWING IS A DESCRIPTION OF THE DEPENDENCIES,
*      CONVENTIONS, AND FUNCTIONS OF IEAVLK03
*
*02*     DEPENDENCIES = THE SDWA MUST BE PASSED AS INPUT
*
*03*        CHARACTER-CODE-DEPENDENCIES = NONE
*
*02*     RESTRICTIONS = NONE
*
*02*     REGISTER-CONVENTIONS = THE REGISTER CONVENTIONS USED BY
*        IEAVLK03 ARE DESCRIBED UNDER THE TOPIC REGISTER EQUATES.
*
*02*     PATCH-LABEL = THIS MODULE IS RESIDENT NUCLEUS, AND HAS NO
*        PATCH SPACE.
*
*01*  MODULE-TYPE = MODULE
*
*02*     PROCESSOR = ASSEMBLER
*
*02*     MODULE-SIZE = 994 BYTES
*
*02*     ATTRIBUTES = REENTERABLE
*
*01*  ENTRY-POINT = FRRPGMMG
*
*02*     PURPOSE = THIS ROUTINE IS ENTERED WHEN AN ERROR OCCURS IN
*        PROGRAM MANAGER CAUSING SYSTEM RECOVERY.  THIS ROUTINE
*        VERIFIES PROGRAM MANAGER QUEUES (LPA OR JPQ) AND CONTINUES
*        WITH TERMINATION.
*
*02*     LINKAGE = BRANCH ENTERED FROM RTM1
*
*02*     INPUT = PSW ENABLED, KEY 0, SUPERVISOR STATE, LOCAL LOCK HELD
*        AND POSSIBLE THE CMS LOCK HELD
*        REGISTERS ARE:
*        REGISTER 1 - POINTER TO SDWA
*        REGISTER 14 - RETURN ADDRESS
*
*02*     OUTPUT = RETURN TO RTM
*        NO OUTPUT IN WAY OF RETURN CODE, ETC.
*
*02*     REGISTERS-SAVED = NONE
*
*02*     REGISTER-USAGE = SEE PROLOGUE AT BEGINNING OF ROUTINE
*
*01*  ENTRY-POINT = FRRPGMMX
*
*02*     PURPOSE = THIS ROUTINE IS ENTERED WHEN AN ERROR OCCURS WHEN
*        PROGRAM MANAGER RESOURCE MANAGER FOR EXIT HAS CONTROL.
*        THE ROUTINE VERIFIES THE CDE QUEUE AND CAUSES RETRY TO GIVE
*        RETURN CODE 4.
*
*02*     LINKAGE = BRANCH ENTERED FROM RTM1
*
*02*     INPUT = PSW ENABLED, KEY 0, SUPERVISOR STATE, LOCAL LOCK HELD
*        AND POSSIBLE THE CMS LOCK HELD
*        REGISTERS ARE:
*        REGISTER 1 - POINTER TO SDWA
*        REGISTER 14 - RETURN ADDRESS
*
*02*     OUTPUT = RETURN TO RTM1 TO CAUSE RETRY IN RESOURCE MANAGER
*
*02*     REGISTERS-SAVED = NONE
*
*02*     REGISTER-USAGE = SEE PROLOGUE AT BEGINNING OF ROUTINE
*
*01*  EXIT-ERROR = FRRPGMMG
*
*02*     CONDITIONS = RETURN TO RTM1 VIA BR14. APPROPRIATE CDE QUEUE
*        HAS BEEN VERIFIED AND PROGRAM MANAGER CAN CONTINUE.
*
*02*     OUTPUT = REGISTER 14 CONTAINS RETURN ADDRESS
*        ALL OTHER REGISTERS ARE UNPREDICTABLE
*
*02*     RETURN-CODES = RETURN CODE IN SDWA = 0 (CONTINUE WITH
*        TERMINATION),4 (RETRY)
*
*01*  EXIT-ERROR = FRRPGMX
*
*02*     CONDITIONS = RETURN TO RTM1 VIA BR14. APPROPRIATE CDE QUEUE
*        HAS BEEN VERIFIED AND PROGRAM MANAGER CAN CONTINUE.
*
*02*     OUTPUT = REGISTER 14 CONTAINS RETURN ADDRESS
*        ALL OTHER REGISTERS ARE UNPREDICTABLE
*
*02*     RETURN-CODES = IN SDWA - RETURN CODE 4 (RETRY)
*                                 RETURN CODE 0 (CONT. TERMINATION)
*
*01*  EXTERNAL-REFERENCES =
*        QUEUE VERIFY ROUTINE - TO VERIFY CDE QUEUE
*        ADDRESS VERIFY ROUTINE - TO VERIFY ENTRY ADDRESS
*
*02*     ROUTINES =
*        FREEMAIN - TO RELEASE QVPL WORK AREA
*        GETMAIN - TO OBTAIN QVPL WORK AREA
*
*02*     DATA-AREAS = NO DATA SETS ARE USED BY THIS MODULE
*
*02*     CONTROL-BLOCKS = LLE,CDE,CVT,RB,TCB,SDWA,QVPL
*
*01*  TABLES = NONE
*
*01*  MACROS = SETLOCK, RECORD, GETMAIN, FREEMAIN, SETRP
*
*02*    SERIALIZATION = LOCAL AND POSSIBLY THE CMS LOCK HELD THROUGHOUT
*       PROCESS, NO LOCKS OBTAINED OR FREED
*
*01*  CHANGE-ACTIVITY = MODULE WRITTEN FOR SUPPORT CODE Y02753
*
*01*  MESSAGES = THIS MODULE ISSUES MESSAGE IEA959I.
*
*01*  ABEND-CODES = NONE
*
**** END OF SPECIFICATIONS ***/
         EJECT
         SPACE 2
*/*IEAVLK03: CHART */
*/* HEADER
*/* PROGRAM MANAGER
*/*                                                    SECTION 3.1.11
*/* RECOVERY ROUTINES
*/*                                                    PAGE # */
         SPACE 2
IEAVLK03 CSECT                         CSECT NAME **** SINGLE CSECT
         MODID BR=NO
*        ENTRY STATEMENTS
         ENTRY FRRPGMMG                ENTRY FOR RECOVERY RTN.
         ENTRY FRRPGMX                 ENTRY OF EXIT RECOVERY RTN.
         SPACE 1
         EXTRN EOTCHK                  RETRY ADDRESS IN VLK02
         EXTRN FINIS                   RETRY ADDRESS IN VLK02
         EXTRN SYNCR                   RETRY ADDRESS IN VLK00    M01978
         TITLE '               IEAVLK03 REGISTER EQUATES'
*        REGISTER EQUATES
R0       EQU   0                       STANDARD EQUATE
R1       EQU   1                       STANDARD EQUATE
R2       EQU   2                       STANDARD EQUATE
WKREG2   EQU   R2                      GENERAL WORK REGISTER
*                                      REGISTER 3 EQUATES
R3       EQU   3                       STANDARD EQUATE
CVTREG   EQU   R3                      REGISTER 3 POINTS TO CVT
WKREG3   EQU   R3                      GENERAL WORK REGISTER
*                                      REGISTER 4 EQUATES
R4       EQU   4                       CROSS REFERENCE EQUATE
TCBREG   EQU   R4                      REGISTER 4 POINTS TO THE TCB
*                                      REGISTER 5 EQUATES
R5       EQU   5                       CROSS REFERENCE EQUATE
RBREG    EQU   R5                      POINTER TO THE RB
*                                      REGISTER 6 EQUATES
R6       EQU   6                       CROSS REFERENCE EQUATES
BASEREG  EQU   R6                      BASE REGISTER FOR IEAVLK03
*                                      REGISTER 7 EQUATES
R7       EQU   7                       CROSS REFERENCE EQUATES
ASCBREG  EQU   R7                      POINTER TO THE ASCB
*                                      REGISTER 8 EQUATES
R8       EQU   8                       CROSS REFERENCE EQUATES
SDWAREG  EQU   R8                      POINTER TO SDWA IN FRR
*                                      REGISTER 9 EQUATES
R9       EQU   9                       CROSS REFERENCE EQUATES
*                                      REGISTER 10 EQUATES
R10      EQU   10                      CROSS REFERENCE EQUATES
*                                      REGISTER 11 EQUATES
R11      EQU   11                      CROSS REFERENCE EQUATES @ZA07515
*                                      REGISTER 13 EQUATES
R13      EQU   13                      CROSS REFERENCE EQUATES
*                                      REGISTER 14 EQUATES
R14      EQU   14                      CROSS REFERENCE EQUATES
RETURN   EQU   R14                     RETURN REGISTER FOR ENTRY POINTS
*                                      REGISTER 15 EQUATES
R15      EQU   15                      CROSS REFERENCE EQUATES
         TITLE '              IEAVLK03 CHARACTER AND HEX MASK EQUATES'
N0       EQU   0                       CONSTANT OF ZERO
N4       EQU   4                       CONSTANT TO PICK UP NEXT IN LIST
N8       EQU   8                       NUMERIC VALUE FOR RETURN CODE
N9       EQU   9                       LENGTH OF STANDARD PART OF XTLST
MSGLEN   EQU   10                      LENGTH OF ERROR MESSAGES
N24      EQU   24                      USED FOR 3 BYTE SHIFT
N36      EQU   36                      USED TO LOCATE REG.     @ZA24616
REGSAVE  EQU   72                      LENGTH OF REG. SAVE AREA
A0C4     EQU   X'04'                   PROTECTION CHECK CODE
A0C5     EQU   X'05'                   ADDRESSING ERROR
A0C10    EQU   X'10'                   SEGMENT EXCEPTION
A0C11    EQU   X'11'                   PAGEING EXCEPTION
         EJECT
*        MODULE USING STATEMENTS
         USING PSA,0                   ADDRESSES LOW CORE
         USING TCB,TCBREG              POINTER TO THE TCB
         USING RBSECT,RBREG            POINTER TO THE RB
         TITLE '      IEAVLK03  RECOVERY ROUTINE FOR PGM. MGR.'
*/* E FRRPGMMG */
*/* P SET UP ADDRESSABILITY */
         SPACE 2
FRRPGMMG DS    0H                      ENTRY FOR RECOVERY
         BALR  BASEREG,N0              SET UP ADDRESSABILITY
         USING *,BASEREG               TELL ASSEMBLER
         SPACE 2
*/* P PUT SDWA ADDRESS IN WKREG (R8) */
         SPACE 2
         LR    SDWAREG,R1               PUT SDWA ADDR. IN WKREG
         USING SDWA,SDWAREG            TELL ASSEMBLER
         SPACE 2
*/* P SAVE CALLERS RETURN ADDRESS IN SAFE REGISTER (R10) */
         SPACE 2
         LR    R10,RETURN              SAVE CALLERS RETURN ADDR.
         SPACE 2
*/* P GET ABENDING ASID COMPARE FLAG FROM SDWA */
*/* D (YES,,NO,PERC) ABEND IN SAME MEMORY AS CURRENT? */
         SPACE 2
         LH    WKREG2,SDWAFMID         GET ABENDING ASID
         LTR   WKREG2,WKREG2           Q. SAME MEMORY
         BNZ   PERC                    A. NO- CONTINUE WITH TERM.
         SPACE 2
*/* D (YES,PERC,NO,) WAS RECOVERY PERCOLATED TO? */
         SPACE 2
         TM    SDWAERRC,SDWAPERC       Q. WAS RECOVERY PERC. TO
         BO    PERC                    A. YES- CONTINUE WITH TERM.
         SPACE 2
*/* P GET ENVIRONMENT REGISTERS 3=CVT, 4=TCB, 5=SVRB, 7=ASCB */
         SPACE 2
         L     CVTREG,CVTPTR           GET CVT ADDRESS
         L     TCBREG,PSATOLD          SET UP ENVIRONMENT REGS.
         L     RBREG,N0(SDWAREG)       GET PARM AREA FROM SDWA
         L     RBREG,N0(RBREG)         GET SVRB FROM PARM AREA
         L     ASCBREG,PSAAOLD         GET ASCB
         SPACE 2
*/* D (NO,NXTTST,YES,) ERROR DURING PARM. CHK/PIE PROCING IN VLK00 */
         SPACE 2
         TM    RBCSFLG1,RBCSPARM       Q. ERROR DURING PARM. CHECK
         BZ    NXTTST                  A. NO-CONTINUE
         SPACE 2
*/* D (YES,,NO,PGMCHK) WAS SYNCH IN PROCESS */
*/* S IEAVPSER: CLEAN UP SPIE ENVIRONMENT */
*/* P (,PGMXEND) CAUSE RETRY AND SKIP ABEND */
         SPACE 2
         TM    RBCDFLGS,RBCDSYNC       SYNCH IN PROCESS          M01978
         BZ    PGMCHK                  NO- CONTINUE              M01978
         LR    R1,R8                   SAVE SDWA PTR          @OZ07515
         L     R9,SPIERADR             BRANCH TO SPIE          @OZ07515
         BALR  R11,R9                  ERROR ROUTINE TO        @OZ07515
*                                      CLEAN UP INVALID        @OZ07515
*                                      SPIE ENVIRONMENT        @OZ07515
        LR   R8,R1                    RESTORE SDWA PTR  @OZ07515
         L     WKREG2,SYNCRTY          GET RETRY ADDRESS         M01978
         SETRP RETADDR=(WKREG2),RC=4,WKAREA=(SDWAREG),RECORD=YES,      X
               RECPARM=PGMMERR                                   M01978
         B     PERC                    EXIT FROM ERROR ROUTINE   M01978
         SPACE 2
*/*PGMCHK: D (NO,NXTTST,YES,) IS ABEND A PROGRAM CHECK? */
         SPACE 2
PGMCHK   TM    SDWAERRA,SDWAPCHK       ABEND A PROGRAM CHECK     M01978
         BZ    NXTTST                  NO- CONTINUE
         SPACE 2
*/* D (YES,A206,NO,) ABEND A PROTECTION CHECK? */
         SPACE 2
         CLI   SDWAICD1,A0C4           PROTECTION CHECK ABEND
         BE    A206                    YES- CHANGE ABEND CODE TO 206
         SPACE 2
*/* D (YES,A206,NO,) ABEND AN ADDRESSING ERROR? */
         SPACE 2
         CLI   SDWAICD1,A0C5           ADDRESSING CHECK ABEND
         BE    A206                    YES- CHANGE ABEND CODE TO 206
         SPACE 2
*/* D (YES,A206,NO,) ABEND A SEGMENT EXCEPTION? */
         SPACE 2
         CLI   SDWAICD1,A0C10          SEGMENT EXCEPTION
         BE    A206                    YES- CHANGE ABEND CODE TO 206
         SPACE 2
*/* D (NO,NXTTST,YES,) ABEND A PAGE EXCEPTION? */
         SPACE 2
         CLI   SDWAICD1,A0C11          PAGE EXCEPTION
         BNE   NXTTST                  NO- CONTINUE
         SPACE 2
*/*A206: L (,PERC) SETRP-- RESET ABEND CONDITION CODE TO 206 */
         SPACE 2
A206     SETRP COMPCOD=(X'206',SYSTEM),WKAREA=(SDWAREG) CAUSE 206 ABEND
         B     PERC                    GO RECORD ERROR
         SPACE 2
*/*NXTTST: P GET ADDRESS OF REG SAVE AREA (16 WORDS) */
*/* S CDEQVER:VERIFY APPROPRIATE CDE QUE */
         SPACE 2
NXTTST   DS    0H
         LA    R13,SDWASRSV            GET ADDRESS OF RETURN REGS.
         BAL   RETURN,CDEQVER          GO VERIFY PROPER QUEUE
         SPACE 2
*/* L SETRP-- CAUSE ERROR TO BE RECORDED */
*/*PERC: P RESTORE CALLERS RETURN REGISTER */
*/* R RETURN VIA BR14 */
         SPACE 2
         SETRP RECORD=YES,WKAREA=(SDWAREG),RECPARM=PGMMERR RECORD ERROR
PERC     LR    RETURN,R10              RESTORE CALLERS RETURN ADDR.
         BR    RETURN                  RETURN TO RTM
         DROP  BASEREG
         EJECT
*/* E FRRPGMX */
*/* P SET UP ADDRESSABILITY */
*/* P SAVE CALLERS RETURN ADDRESS IN WORK REG. (R10) */
         SPACE 2
FRRPGMX  DS    0H                      EXIT FRR
         BALR  BASEREG,N0              SET UP ADDRESSABILITY
         USING *,BASEREG               TELL ASSEMBLER
         LR    R10,RETURN              SAVE CALLERS RETURN ADDRESS
         SPACE 2
*/* P PUT SDWA ADDRESS IN WKREG (R8) */
         SPACE 2
         LR    SDWAREG,R1              PUT SDWA IN PROTECTED REG
         USING SDWA,SDWAREG            TELL ASSEMBLER WHERE IT IS
         SPACE 2
*/* L SETRP-- CAUSE RECORDING ON TERMINATION */
         SPACE 2
         SETRP RECORD=YES,WKAREA=(SDWAREG),RECPARM=PGMXERR SET UP FOR
*                                      RECORDING
         SPACE 2
*/* P GET ABENDING ASID COMPARE FLAG FROM SDWA */
*/* D (YES,,NO,PGMXPERC) ABEND IN SAME MEMORY AS CURRENT? */
         SPACE 2
         LH    WKREG2,SDWAFMID         GET ASID OF CURRENT
         LTR   WKREG2,WKREG2           TEST IF SAME ADDRESS SPACE
         BNZ   PGMXPERC                NO- RETURN TO CALLER
         SPACE 2
*/* P SET UP ENVIRONMENT REGISTERS 3=CVT, 4=TCB, 7=ASCB */
         SPACE 2
         L     CVTREG,CVTPTR           GET CVT ADDRESS
         L     TCBREG,PSATOLD          GET CURRENT TCB
         L     R7,PSAAOLD              GET ASCB ADDRESS
         SPACE 2
*/* P GET 16 WORD REGISTER SAVE AREA */
*/* S CDEQVER:VERIFY APPROPRIATE CDE QUEUE */
         SPACE 2
         LA    R13,SDWASRSV            GET A REG. SAVE AREA
         BAL   RETURN,CDEQVER          VERIFY PROPER CDE QUEUE
         SPACE 2
*/* P PUT EXIT'S FRRPARM LIST ADDRESS IN SDWA RETRY REGISTER 13 */
         SPACE 2
         L     R13,N0(SDWAREG)         GET ADDR. OF PARM. AREA
         ST    R13,SDWASR13            PUT IN RETRY REGISTER   @ZA02733
*                                      AREA                    @ZA02733
         SPACE 2
*/* P PUT ADDRESS OF IEAVLK02 BASE IN SDWA RETRY REGISTER 6 */
         SPACE 2
         L     WKREG2,N4(R13)          GET MODULE BASE ADDRESS
         ST    WKREG2,SDWASR08         PUT IN RETRY REGS
         SPACE 2
*/* D (YES,EOTR,NO,) PROGRESS STOPPED PRIOR TO EOTCHK? */      @ZA02733
         SPACE 2
         ICM   WKREG2,N8,FRRPLCK0-FRRPLIST(R13) WAS PROGRESS   @ZA02733
*                                      STOPPED PROIR TO EOTCHK @ZA02733
         BZ    EOTR                    YES- RETRY AT EOTCHK    @ZA02733
         SPACE 2
*/* L (,PGMXPERC) SETRP-- CAUSE RETRY AT FINIS */
         SPACE 2
         L     WKREG2,FINRETRY         GET RETRY ADDRESS         T1111
         SETRP RETADDR=(WKREG2),RETREGS=YES,RC=4,WKAREA=(SDWAREG) RETRY
         B     PGMXPERC                RETURN TO CALLER
         SPACE 2
*/*EOTR: P GET EOTCHK RETRY ADDRESS */                         @ZA02733
*/* P PUT TCB/SVRB ADDRESSES IN SDWA RETRY REGISTERS */
*/* L SETRP-- CAUSE RETRY AT EOTCHK */
         SPACE 2
EOTR     L     WKREG2,EOTRETRY         GET EOTCHK RETRY ADDR   @ZA02733
         L     TCBREG,N0(,R13)         POINT TO SAVE AREA      @ZA24616
         LM    TCBREG,RBREG,N36(TCBREG) LOAD TCB AND RB REGS   @ZA24616
         STM   TCBREG,RBREG,SDWASR04   SAVE IN RETRY REGISTERS
         SETRP RETADDR=(WKREG2),RETREGS=YES,RC=4,WKAREA=(SDWAREG)
         SPACE 2
*/*PGMXPERC: P RESTORE CALLERS RETURN REGISTER (R10) */
*/* R RETURN TO CALLER VIA BR14 */
         SPACE 2
PGMXPERC LR    RETURN,R10              RESTORE CALLERS RETURN REG
         BR    RETURN                  RETURN TO CALLER
         DROP  BASEREG                 NO LONGER NEED BASE
         EJECT
*  CDE QUEUE VERIFY ROUTINE
*   PURPOSE:  TO DETERMINE IF THE JPQ OR THE LPA WAS BEING MODIFIED AT
*        THE TIME OF THE ERROR AND VERIFY THE ELEMENTS ON THAT QUEUE
*        ARE VALID. ALSO CHECKS THE LLS FOR VALIDITY AND TRUNCATES
*        THE QUEUE IF NECESSARY.                             @ZA12452
*
*   INPUT:
*        R8 = ADDRESS OF SDWA
*        R3-4,7 = ENVIRONMENT REGISTERS
*        R13 = ADDRESS OF 16 WORD SAVE AREA
*        R14 = RETURN ADDRESS
*        R15 = ENTRY POINT
*
*   OUTPUT:
*        R0-2,8-9,11-12,15 - MODIFIED
*        R3-5,7,10,13-14 - UNCHANGED
*
         SPACE 1
*/* E CDEQVER */
*/* P SAVE CALLERS REGISTERS 0-15 IN R13 SAVE AREA */
*/* P SET UP ADDRESSABILITY */
         SPACE 2
CDEQVER  DS    0H                      VERIFIES CDE QUEUE
         USING CVT,CVTREG              ADDRESS THE CVT
         STM   R0,R15,N0(R13)          SAVE CALLERS REGS
         BALR  BASEREG,N0              SET UP ADDRESSABILITY
         USING *,BASEREG               TELL ASSEMBLER
         SPACE 2
         LA    R1,TCBLLS               LOAD LIST QUEUE HEAD    @ZA12452
         L     R2,TCBLLS               LINK TO 1ST ELEMENT     @ZA12452
LLSCHK   LTR   R2,R2                   END OF QUEUE?           @ZA12452
         BZ    LLSEND                  YES. BR OUT OF LOOP     @ZA12452
         LRA   R3,0(R2)                ELEMENT ADDR VALID?     @ZA12452
         BNZ   LLSTRUNC                NO. TRUNCATE QUEUE      @ZA12452
         LA    R1,0(R2)                SAVE ADDR OF ELEMENT    @ZA12452
         L     R2,0(R2)                LINK TO NEXT ELEMENT    @ZA12452
         B     LLSCHK                  LOOP.                   @ZA12452
LLSTRUNC DS    0H                                              @ZA12452
         SR    R2,R2                   ZERO REG 2              @ZA12452
         ST    R2,0(R1)                ZERO PREV LINK FIELD    @ZA12452
LLSEND   DS    0H                                              @ZA12452
         SPACE 2
*/* L GETMAIN-- GET QUEUE VERIFY WORK AREA REQUIRED SPACE */
         SPACE 2
         GETMAIN RC,BRANCH=YES,LV=QVRSIZE,SP=253  GET QV WORKAREA
         SPACE 2
*/* D (NO,,YES,CDECHEK) GETMAIN SUCCESSFUL? */
*/* P (,NOFREE) SET RETURN CODE IN REGISTER 15=0 */
         SPACE 2
         LTR   R15,R15                 GETMAIN SUCCESSFUL?
         BZ    CDECHEK                 YES- INITIALIZE
         SR    R15,R15                 SET 0 RETURN
         B     NOFREE                  GO TO RETURN CODE
         SPACE 2
*/*CDECHEK: P CLEAR PARAMETER WORK AREA */
         SPACE 2
CDECHEK  XC    N0(QVPLSIZE,R1),N0(R1)  CLEAR PARM AREA
         USING QVPL,R1                 SET ADDRESSING TO PARM AREA
         SPACE 2
*/* P RESTORE CVT ADDRESS DESTROYED BY GETMAIN */
*/* P PUT CDE ELEMENT VERIFICATION ROUTINE ADDRESS IN QVPL */
         SPACE 2
         L     CVTREG,CVTPTR           RESET CVT ADDRESS
         LA    WKREG2,CDEVER           GET CDE ELEMENT VER. ROUTINE
         ST    WKREG2,QVPLEVR          PUT IN PARM LIST
         SPACE 2
*/* P PUT ADDRESS OF SDWA VARIABLE RECORDING AREA IN QVPL */
         SPACE 2
         LA    WKREG2,SDWARA           GET RECORD AREA ADDR.
         ST    WKREG2,QVPLODA          SAVE IN PARM LIST.
         SPACE 2
*/* P PUT ADDRESS OF A WORKAREA FOR QUEUE VERIFIER IN QVPL */
         SPACE 2
         LA    WKREG2,QVPLSIZE(R1)     CALCULATE ADDR. OF WORKAREA
         ST    WKREG2,QVPLWKA          STORE IN PARM LIST.
         SPACE 2
*/* P SAVE CALLERS REGISTER SAVE AREA ADDRESS */
*/* P GET A REGISTER SAVE AREA FOR QUEUE VERIFY ROUTINE */
*/* P PUT SDWA ADDRESS IN R0 */
         SPACE 2
         LR    R10,R13                 SAVE CALLERS REG SAVE
         LA    R13,QVPLSIZE+QVPLWASZ(R1) GET QV REG SAVE AREA
         LR    R0,SDWAREG              PUT SDWA ADDR. IN R0 FOR ROUT.
         SPACE 2
*/* L (HELD,LPAVER,NO,) SETLOCK-- TEST IF CMS LOCK IS HELD */
         SPACE 2
         SETLOCK TEST,TYPE=CMS,BRANCH=(HELD,LPAVER) TEST LOCKS HELD
         SPACE 2
*/* P PUT JPQ ERROR LABEL IN RECORDING AREA */
*/* P INCREMENT AMOUNT USED COUNT BY MSG LENGTH (10BYTES) */
         SPACE 2
         LA    WKREG2,SDWAVRA          GET RECORDING AREA ADDRESS
         MVC   N0(MSGLEN,WKREG2),JPQERR  PUT HEADER IN RECORDING AREA
         LA    WKREG2,MSGLEN           GET LENGTH OF HEADER
         STC   WKREG2,SDWAURAL         AND STORE IN USED PORTION COUNT
         SPACE 2
*/* P PUT ADDRESS OF JPQ HEADER (TCBJPQ FROM JSTCB) IN QVPL */
         SPACE 2
         L     WKREG2,TCBJSTCB         GET JSTCB
         LA    WKREG2,TCBJPQ-TCB(WKREG2) GET JPQ ADDR.
         ST    WKREG2,QVPLHDR          SAVE IN HEADER FIELD
         SPACE 2
*/* L IEAQVER-- VERIFY SINGLE THREADED/ HEADER ONLY QUEUE     */
         SPACE 2
         L     R15,QVRRTN              GET ADDR. OF QUEUE VER RTN.
         BALR  RETURN,R15              GO TO QUEUE VER. RTN.
         SPACE 2
*/* P GET REASON CODE IN REGISTER WITHOUT INDICATORS */
*/* D (YES,CDEQEXIT,NO,) ANY ERRORS FOUND? */
         SPACE 2
         SLL   R15,N24                 SHIFT REASON CODE TO HIGH BYTE
         LTR   R15,R15                 ANY ERRORS
         BNZ   CDEQEXIT                YES - TERMINATE
         SPACE 2
*/* P (,CDEQEXIT) CLEAR USED PORTION OF RECORDING AREA IN SDWA */
         SPACE 2
         SR    WKREG2,WKREG2           CLEAR REG TO PUT ZERO USED
         STC   WKREG2,SDWAURAL         COUNT IN SDWA RECORDING AREA
         B     CDEQEXIT                RETURN TO CALLLER
         SPACE 2
*/*LPAVER: P PUT LPQ ERROR LABEL IN RECORDING AREA OF SDWA */
         SPACE 2
LPAVER   LA    WKREG2,SDWAVRA          GET RECORDING AREA ADDRESS
         MVC   N0(MSGLEN,WKREG2),LPQERR  PUT HEADER IN RECORDING AREA
         LA    WKREG2,MSGLEN           GET LENGTH OF HEADER
         STC   WKREG2,SDWAURAL         AND STORE IN USED PORTION COUNT
         SPACE 2
*/* P PUT ADDRESS OF LPA QUEUE HEADER IN QVPL (IEAQLPAQ) */
         SPACE 2
         L     WKREG2,CVTQLPAQ         GET LPA QUEUE HEADER
         ST    WKREG2,QVPLHDR          SAVE IN PARM AREA
         SPACE 2
*/* L IEAVQVER-- VERIFY SINGLE THREADED/ HEADER ONLY QUEUE */
         SPACE 2
         L     R15,QVRRTN              GET ADDR. OF QUEUE RTN.
         BALR  RETURN,R15              QUEUE VER. RTN.
         SPACE 2
*/* P GET REASON CODE IN REGISTER WITHOUT INDICATORS */
*/* D (YES,RECRDLPA,NO,) ANY ERRORS FOUND? */
*/* P (,CDEQEXIT) ZERO COUNT USED IN RECORDING AREA IN SDWA */
         SPACE 2
         SLL   R15,N24                 SHIFT REASON CODE TO HIGH BYTE
         LTR   R15,R15                 ANY ERRORS
         BNZ   RECRDLPA                YES - CAUSE WTO BEFORE EXIT
         SR    WKREG2,WKREG2           CLEAR REG TO PUT ZERO USED
         STC   WKREG2,SDWAURAL         COUNT IN SDWA RECORDING AREA
         B     CDEQEXIT                END
         SPACE 2
*/*RECRDLPA: P SAVE QVPL ADDRESS OVER RECORD INTERFACE */
*/* P GET REGISTER SAVE AREA FOR RECORD */
*/* L RECORD-- CAUSE ASYNCROUS WTO WITH MESSAGE IEA959I */
*/* P RESTORE QVPL ADDRESS INTO R1 */
         SPACE 2
RECRDLPA LR    WKREG2,R1               SAVE QVPL ADDR. OVER RECORD
         LA    R13,QVPLSIZE+QVPLWASZ(R1) GET REGISTER SAVE AREA @M05550
         RECORD TYPE=WTO,RCVRY=SETFRR,DATAADR=IEA959,LENGTH=MSGLNTH,   *
               BUFFER=YES
         LR    R1,WKREG2               RESTORE QVPL AREA ADDRESS
         SPACE 2
*/*CDEQEXIT: L FREEMAIN-- FREE QUEUE VERIFIER WORK SPACE AND PARM LIST
*/**/
*/* P RESTORE CALLERS REGISTER SAVE AREA ADDR. FROM R10 */
*/*NOFREE: P RESTORE CALLERS REGISTERS */
*/* R RETURN TO CALLER VIA BR14 */
         SPACE 2
CDEQEXIT FREEMAIN RC,LV=QVRSIZE,A=(1),SP=253,BRANCH=YES FREE QVPL/REGSA
         LR    R13,R10                 RESTORE CALLERS SAVE REGS
NOFREE   LM    R0,R14,N0(R13)          RESOTRE CALLERS REGS      M01976
         BR    RETURN                  RETURN TO CALLER
         DROP  BASEREG                 FREE BASE
         DROP  CVTREG                  FREE CVT POINTER
         EJECT
***********************************************************************
*
*  CDE ELEMENT VERIFICATION ROUTINE
*    PURPOSE: TO VERIFY THAT THE ELEMENT PASSED AS INPUT IS A CDE
*
*    INPUT:
*        R0  = ADDRESS OF ELEMENT TO BE VERIFIED
*        R1  = ADDRESS OF SDWA
*        R14 = RETURN ADDRESS
*        R15 = ENTRY POINT ADDRESS
*
*    OUTPUT:
*        R15 = RETURN CODE
*          0 = VALID
*          4 = INVALID (REMOVE ELEMENT)
*          8 = INVALID (TRUNCATE QUEUE)
*        R1,8-13 = UNCHANGED
*        R2-7 = UNPREDICTABLE
*
***********************************************************************
         SPACE 1
CDEVER   DS    0H                      CDE ELEMENT VERIFIER    @ZA19996
         BALR  BASEREG,N0              SET UP ADDRESSIBILITY   @ZA19996
         USING *,BASEREG               TELL ASSEMBLER          @ZA19996
         LR    R7,RETURN               SAVE CALLERS RETURN ADR @ZA19996
         LR    R4,R0                   CDE TO BE VERIFIED      @ZA19996
         USING CDENTRY,R4              BASE FOR CDE DSECT      @ZA19996
***********************************************************************
*
*   VERIFY THAT CDE CAN BE ADDRESSED BY CALLING THE ADDRESS VERIFY
*   ROUTINE WITH THE ADDRESS OF THE CDE IN REG 2 AND THE LENGTH OF
*   THE CDE IN REG 0                                           @ZA19996
*
***********************************************************************
         SPACE 1
         LA    R2,CDENTRY              PUT CDE IN USABLE REG   @ZA19996
         LA    R0,CDESIZE              SIZE OF ELEMENT TO CHK  @ZA19996
         L     R15,ADVER               ADDRESS VERIFIER RTN.   @ZA19996
         BALR  RETURN,R15              GO TO ADDR. VER. RTN.   @ZA19996
         LTR   R15,R15                 ADDRESS VALID?          @ZA19996
         BNZ   CDRET08                 NO. RETURN WITH CODE 8  @ZA19996
         SPACE 1
***********************************************************************
*
*   VERIFY THAT THE NAME FIELD IN THE CDE CONTAINS ALFANUMERIC
*   CHARACTERS. CALL INTERNAL SUBROUTINE NAMEVER.              @ZA19996
*
***********************************************************************
         SPACE 1
         LA    R2,CDNAME               ADR MODULE NAME FIELD   @ZA19996
         BAL   R14,NAMEVER             CALL NAMEVER ROUTINE    @ZA19996
         LTR   R15,R15                 NAME FIELD VALID?       @ZA19996
         BNZ   CDRET08                 NO. RETURN WITH CODE 8  @ZA19996
         SPACE 1
***********************************************************************
*
*   IF THE CDE IS A MINOR, VERIFY THAT THE MAJOR CDE CAN BE ADDRESSED
*   AND THAT THE MAJOR CDE CONTAINS ALFANUMERIC CHARACTERS IN ITS
*   MODULE NAME FIELD                                          @ZA19996
*
***********************************************************************
         SPACE 1
         TM    CDATTR,CDMIN            IS THE CDE A MINOR?     @ZA19996
         BZ    XTLVER                  NO. DO TESTS FOR MAJOR  @ZA19996
         L     R2,CDXLMJP              YES. GET MAJOR POINTER  @ZA19996
         LTR   R2,R2                   MAJOR POINTER = ZERO?   @ZA19996
         BZ    CDRET04                 YES. RETURN WITH CODE 4 @ZA19996
         LA    R0,CDESIZE              LENGTH OF CDE           @ZA19996
         L     R15,ADVER               ADDRESS VERIFY ROUTINE  @ZA19996
         BALR  R14,R15                 VERIFY MAJOR CDE ADDR   @ZA19996
         LTR   R15,R15                 ADDRESS VALID?          @ZA19996
         BNZ   CDRET04                 NO. RETURN WITH CODE 4  @ZA19996
         LA    R2,CDNAME-CDENTRY(R2)   ADDR MODULE NAME FIELD  @ZA19996
         BAL   R14,NAMEVER             VER MOD NAME IN MAJOR   @ZA19996
         LTR   R15,R15                 MODULE NAME VALID?      @ZA19996
         BNZ   CDRET04                 NO. RETURN WITH CODE 4  @ZA19996
         B     CDRET00                 YES. MINOR CDE O.K.     @ZA19996
         SPACE 1
***********************************************************************
*
*   FOR MAJOR CDE, VERIFY THAT THE EXTENT LIST POINTER IS EITHER
*   ZERO (VALID FOR CDE BUILT BY IDENTIFY FUNCTION), OR POINTS TO
*   AN ADDRESSABLE LOCATION.                                   @ZA19996
*
***********************************************************************
         SPACE 1
XTLVER   DS    0H                                              @ZA19996
         L     R2,CDXLMJP              GET EXTENT LIST POINTER @ZA19996
         LTR   R2,R2                   DOES IT EQUAL ZERO?     @ZA19996
         BZ    CDRET00                 YES. MAJOR CDE O.K.     @ZA19996
         LA    R0,16                   LENGTH OF XTLST         @ZA19996
         L     R15,ADVER               ADDRESS VERIFY ROUTINE  @ZA19996
         BALR  R14,R15                 VERIFY ADDRESS          @ZA19996
         LTR   R15,R15                 XTLST ADDRESSABLE?      @ZA19996
         BNZ   CDRET04                 NO. RETURN WITH CODE 4  @ZA19996
         SPACE 2
CDRET00  SR    R15,R15                 RETURN CODE = 0         @ZA19996
         B     CDVEREND                EXIT                    @ZA19996
CDRET04  LA    R15,4                   RETURN CODE = 4         @ZA19996
         B     CDVEREND                EXIT                    @ZA19996
CDRET08  LA    R15,8                   RETURN CODE = 8         @ZA19996
CDVEREND LR    R14,R7                  RESTORE RETURN REGISTER @ZA19996
         BR    R14                     BR BACK TO QUEUE VERIFY @ZA19996
         EJECT
***********************************************************************
*
*   NAMEVER ROUTINE - CALLED FOR INPUT CDE AND MAJOR CDE IF INPUT
*   CDE IS A MINOR. VERIFIES THAT THE MODULE NAME FIELD CONTAINS
*   ALFANUMERIC CHARACTERS. INPUT: R2 CONTAINS ADDRESS OF CDE TO
*   BE VERIFIED. OUTPUT: R15 CONTAINS RETURN CODE - 0 IF NAME FIELD
*   VALID, 4 IF NAME FIELD NOT VALID.                          @ZA19996
*
***********************************************************************
         SPACE 1
NAMEVER  DS    0H                                              @ZA19996
         LA    R0,8               EIGHT BYTES TO BE CHECKED    @ZA19996
         LA    R3,OKCHARS         POINTER TO VALID CHAR TABLE  @ZA19996
NAMECMPR CLC   0(1,R2),0(R3)      BYTE IN NAME = CHAR IN TABLE?@ZA19996
         BE    NAMEINCR           YES. CHECK NEXT BYTE IN NAME @ZA19996
         LA    R3,1(R3)           NO. TRY NEXT CHAR IN TABLE.  @ZA19996
         CLI   0(R3),X'00'        END OF TABLE?                @ZA19996
         BNE   NAMECMPR           NO. GO AHEAD AND COMPARE     @ZA19996
         LA    R15,4              YES. NAME FIELD INVALID      @ZA19996
         BR    R14                RETURN WITH CODE = 4         @ZA19996
NAMEINCR LA    R2,1(R2)           BUMP POINTER IN NAME FIELD   @ZA19996
         LA    R3,OKCHARS         BEGINNING OF VALID CHAR TABLE@ZA19996
         BCT   R0,NAMECMPR        LOOP IF MORE BYTES TO CHECK  @ZA19996
         SR    R15,R15            ALL BYTES CHECKED.           @ZA19996
         BR    R14                RETURN WITH CODE = 0.        @ZA19996
         SPACE 2
OKCHARS  DC    C' $#@ABCD'        VALID CHARACTERS FOR MODULE  @ZA19996
         DC    C'EFGHIJKL'          NAME.                      @ZA19996
         DC    C'MNOPQRST'                                     @ZA19996
         DC    C'UVWXYZ01'                                     @ZA19996
         DC    C'23456789'                                     @ZA19996
         DC    X'00'                   END OF TABLE INDICATOR  @ZA19996
         SPACE 2
         DROP  R4                      RELEASE CDE             @ZA19996
         DROP  BASEREG                 RELEASE BASE            @ZA19996
         EJECT
*/* FOOTING
*/*
*/*  */
*/*IEAVLK03: END */
         TITLE '       IEAVLK03   GENERAL MODULE EQUATES AND CONSTANTS'
QVRRTN   DC    V(IEAVEQV1)             ENTRY TO QUEUE VERIFY ROUTINE
ADVER    DC    V(IEAVEADV)             ENTRY TO ADDRESS VERIFY ROUTINE
SPIERADR DC    V(IEAVSPER)             SPIE ERROR RTN         @OZ07515
JPQERR   DC    CL10'JPQ ERROR '        ERROR LABEL
JPQEND   EQU   *
LPQERR   DC    CL10'LPA ERROR '        ERROR LABEL
LPAEND   EQU   *
XLSTHEAD DC    F'16'                   LENGTH OF 16
         DC    F'1'                    COUNT OF 1 BLOCK
         DC    X'80'                   END-OF-LIST INDICATOR
IEA959   WTO   'IEA959I  ERROR CAUSED ACTIVE LPA TO BE TRUNCATED, MODUL*
               E CONTROL MAY BE LOST',MF=L,ROUTCDE=2,DESC=4      @M7603
MSGEND   EQU   *                       END OF MSG TO OPERATOR
MSGLNTH  EQU   MSGEND-IEA959           LENGTH OF TOTAL MSG AND CODES
PGMXERR  DC    CL8'IEAVLK02'           MODULE IN ERROR
         DC    CL8'IEAPPGMX'           CSECT IN ERROR
         DC    CL8'FRRPGMX'            RECOVERY ROUTINE
PGMMERR  DC    CL8'IEAVLK00'           MODULE IN ERROR
         DC    CL8'IEAVLK00'           CSECT IN ERROR
         DC    CL8'FRRPGMMG'           RECOVERY ROUTINE
EOTRETRY DC    A(EOTCHK)               ADDRESS OF EOT RTN.
FINRETRY DC    A(FINIS)                ADDRESS OF RETURN TO CALLER
SYNCRTY  DC    A(SYNCR)                ADDRESS OF SYNCH RETURN   M01978
         TITLE '       IEAVLK03 MAPPING MACROS'
FRRPLIST DSECT                         FRRPARM LIST            @ZA02733
FRRPLWD0 DS    0F                      WORD ZERO               @ZA02733
FRRPLSAV DS    F                       SAVE AREA ADDRESS       @ZA02733
FRRPLWD1 DS    0F                      WORD ONE                @ZA02733
FRRPLBAS DS    F                       IEAVLK02 BASE ADDRESS   @ZA02733
FRRPLWD2 DS    0F                      WORD TWO                @ZA02733
FRRPLR11 DS    F                       GR11 SAVE AREA          @ZA02733
FRRPLWD3 DS    0F                      WORD THREE              @ZA02733
FRRPLR12 DS    F                       GR12 SAVE AREA          @ZA02733
FRRPLWD4 DS    0F                      WORD FOUR               @ZA02733
FRRPLR13 DS    F                       GR13 SAVE AREA          @ZA02733
FRRPLWD5 DS    0F                      WORD FIVE               @ZA02733
FRRPLCHK DS    0F                      PROGRESS CHECK WORD     @ZA02733
FRRPLCK0 DS    B                       EOTCHK CHECK POINT      @ZA02733
FRRPLCK1 DS    B                       RESERVED                @ZA02733
FRRPLCK2 DS    B                       RESERVED                @ZA02733
FRRPLCK3 DS    B                       RESERVED                @ZA02733
         IHACDE
CDEEND   EQU   *
CDESIZE  EQU   CDEEND-CDENTRY          SIZE OF CDE
         EJECT
         CVT   DSECT=YES,PREFIX=NO
         EJECT
         IHAPSA
         EJECT
         IHAQVPL
QVRSIZE  EQU   QVPLSIZE+QVPLWASZ+REGSAVE  SIZE NEEDED FOR QV RTN
         EJECT
         IHARB
*******************************************************************
*
*                REQUEST BLOCK ADDITIONAL LABELS INTERNAL
*
******************************************************************
         ORG   RBEXSAVE                MAPPED INTO RBEXSAVE
RBCSEXSA EQU   *                       PROGRAM MANAGER USAGE OF
*                                      RB EXTENDED SAVE AREA FOR
*                                      REENTRANT DATA AREA
RBCSNAME DS    CL8                     ENTRY POINT NAME CALLER PASSED
RBCSDE   DS    0A                      ADDRESS OF DE SAVE AREA
         DS    C                       BYTE RESERVED
RBCSDEA  DS    AL3                     3 BYTE ADDRESS
RBCSERRA DS    F                       ADDRESS OF ERROR ROUTINE
RBCSFLG1 DS    B                       FLAG BYTE
RBCSGSF  EQU   X'80'                   GOOD SEARCH INDICATOR
*                                      ON MEANS IEAVVMSR WAS
*                                      SUCCESSFUL USED ONLY
*                                      IEAVLK01
RBCSSYSR EQU   X'40'                   SYSTEM REQUEST FLAG
RBCSPARM EQU   X'20'                   PARMATER CHECKING IN PROGRESS
RBCSERIN EQU   X'10'                   ERROR RETURN WAS REQUESTED
RBCSABEN EQU   X'08'                   ISSUE 906 ABEND
RBCSA306 EQU   X'04'                   ISSUE 306 ABEND
RBCSFLG2 DS    B                       RESERVED FLAGS
RBCSFLG3 DS    B                       RESERVED FLAGS
RBCSFLG4 DS    B                       RESERVED FLAGS
RBCSWORK DS    0A                      ADDRESS OF BLDL FETCH W.A.
         DS    C                       RESERVED BYTE
RBCSWRKA DS    AL3                     3 BYTE ADDRESS
RBCSLLE  DS    0A                      ADDRESS OF LLE DURING LOAD
         DS    C                       RESERVED BYTE
RBCSLLEA DS    AL3                     3 BYTE ADDRESS
RBCSFRRA DS    F                       SAVE AREA FOR RECOVERY RTN.
*                                      PARM LIST
RBCSGR15 DS    F                       SAVE AREA FOR REGS 15 TO 1
RBCSGR0  DS    F                       OVER MODESET MACRO
RBCSGR1  DS    F                       INTERFACE
RBCSRESV DS    2F                      RESERVED FOR FUTURE EXPANSION
         EJECT
         IHASDWA
         EJECT
         IKJTCB
         EJECT
         END
