         TITLE 'IEAVAD51 - SNAP FORMAT20 AND FORMAT22 ROUTINES'
* /* START OF SPECIFICATIONS ****
*
*01*  MODULE-NAME = IEAVAD51 ( VS2 )
*
*01*  DESCRIPTIVE-NAME = SNAP FORMAT20 AND FORMAT22 ROUTINES
*
*01*  COPYRIGHT = NONE
*
*01*  STATUS = VERSION 1
*
*01*  FUNCTION = FORMAT20 TRANSLATES THE LINE INTO 32 OR 64 PRINTABLE
*     CHARACTERS AND UNPACKS THREE BYTES OF DATA INTO THE BEGINNING OF
*     THE LINE. FORMAT22 UNPACKS UP TO FOUR BYTES OF DATA INTO ANY
*     POSITION OF THE LINE
*
*01*  OPERATION = THIS ROUTINE IS CALLED BY IEAVAD71 TO TRANSLATE
*     INTO EBCDIC FORM THE 32 OR 64 BYTES OF STORAGE TO BE PLACED
*     INTO THIS PRINT LINE.  THIS TRANSLATION IS MOVED INTO THE
*     END OF THE PRINT LINE.  IT WILL ALSO UNPACK THE THREE BYTE
*     ADDRESS PORTION AT THE BEGINNING OF THE PRINT LINE.
*     ENTRY IEAVAD61 IS ENTERED TO TRANSLATE THE STORAGE AREA IN
*     THE LINE TO PRINTABLE FORM.  IF THE LONG LINE IS USED, THE
*     FIRST HEX DIGIT OF EACH WORD IS TRANSLATED SO THAT THE 3800
*     PRINTER WILL PRINT IT AS AN UNDERSCORED DIGIT.    Z40MPXH
*01*  NOTES
*
*02*    CHARACTER-CODE-DEPENDENCIES = THIS MODULE IS EBCDIC CHARACTER
*       CODE DEPENDENT.
*
*02*    DEPENDENCIES = NONE
*
*02*    PERFORMANCE = NONE
*
*02*    RESTRICTIONS = NONE
*
*02*    REGISTER-CONVENTIONS = THE REGISTER CONVENTIONS ARE DESCRIBED
*       UNDER REGISTER EQUATES.
*
*02*    PATCH-LABEL = NONE
*
*01*  MODULE-TYPE = MODULE
*
*02*    PROCESSOR = ASSEMBLER-370R
*
*02*    MODULE-SIZE =      BYTES
*
*02*    ATTRIBUTES = REENTERABLE
*
*01*  ENTRY = IEAVAD51
*
*02*    PURPOSE = TRANSLATE THE OUTPUT LINE TO PRINTABLE CHARACTERS IN
*       FINAL 32 OR 64 BYTES OF THE LINE AND TO UNPACK 3 BYTES OF DATA
*       AS THE ADDRESS OF THE LINE
*
*02*    LINKAGE = BALR
*
*02*    INPUT = GPR 1 MUST CONTAIN THE ADDRESS OF SNAP'S WORK AREA.GPR
*       14 MUST CONTAIN THE RETURN ADDRESS. GPR 15 MUST CONTAIN THE
*       ADDRESS OF IEAVAD51.ABDBPTR CONTAINS THE ADDRESS OF THE DATA TO
*       BE UNPACKED INTO THE BEGINNING OF THE OUTPUT LINE. ABDSTAD
*       CONTAINS THE ADDRESS OF THE DATA TO BE TRANSLATED INTO
*       PRINTABLE CHARACTERS. IF A UPR EVENT IS ANTICIPATED THEN
*       UPRFMT20 MUST BE SET TO 1. OTHERWISE IT SHOULD BE ZERO
*
*02*    OUTPUT = GPR 15 IS SET TO ZERO. ABDBPTR IS ADDRESS OF FIRST
*       BYTE AFTER LAST DATA UNPACKED.ABDUPRXT IS SET TO ZERO
*       AND ABDLINE CONTAINS TRANSLATED DATA
*
*02*    EXIT-NORMAL = BACK TO CALLER
*
*02*    EXIT-ERROR = BACK TO CALLER WITH REGISTER 15 SET TO EIGHT
*
*01*  ENTRY = IEAVAD61
*
*02*    PURPOSE = UNPACK UP TO 4 BYTES OF DATA INTO ABDLINE
*
*02*    LINKAGE = BALR
*
*02*    INPUT = SAME AS FOR IEAVAD51 WITH FOLLOWING DIFERENCES:
*       1. ABDSTAD IS NOT USED.
*       2. ABDLLINE MUST CONTAIN ADDRESS OF LAYOUT LINE USED TO CONTROL
*       UNPACKING OF DATA
*
*02*    OUTPUT = SAME AS FOR IEAVAD51 BUT ABDLLINE SET TO BYTE
*       FOLLOWING SUPPLIED LAYOUT LINE
*
*02*    EXIT-NORMAL = BACK TO CALLER
*
*02*    EXIT-ERROR = BACK TO CALLER WITH GPR 15 SET TO 8
*
*01*  EXTERNAL-REFERENCES
*
*02*    ROUTINES = NONE
*
*02*    DATA-SETS = NONE
*
*02*    DATA-AREA = ABDAREA
*
*01*  TABLES = NONE
*
*01*  MACROS = NONE
*
*01*  CHANGE-ACTIVITY = YM2513,Z40MPX-,G33SPHW
*     PERFORMANCE CHANGE DUE TO APAR ZA18175 CHANGE TRANSLATE TABLE
*     TO FULL 256 BYTE TABLE NOT CHECKING EACH CHRACTER TO TRANSLATE
*                                                              ZA18175
*
**** END OF SPECIFICATIONS ***/
IEAVAD51 CSECT
         ENTRY IEAVAD61
* THE LAYOUT LINE USED TO CONTROL UNPACKING IN FORMAT22 HAS THE
* FOLLOWING FORMAT
*                   X'AABB'...X'FF'
* WHERE AA IS THE DISPLACEMENT FROM THE BEGINNING OF ABDLINE WHERE THE
* UNPACKED DATA IS TO GO AND WHERE BB IS THE SIZE OF THE DATA FIELD
* MINUS ONE (MAXIMUM VALUE IS 3). THE X'FF' IS THE INDICATOR THAT THE
* LAST ENTRY HAS BEEN PROCESSED.
*
*
* REGISTER EQUATES
*
R0       EQU   0                    NAME FOR REG 0
ABDARPTR EQU   1                    ADDRESS OF ABDAREA
CORE     EQU   2                    ADDRESS OF STORAGE TO BE FORMATTED
WORK     EQU   3                    GENERAL WORK REGISTER
LAYOUT   EQU   4                    ADDRESS OF LAYOUT LINE
BLOKADDR EQU   4                    ADDR OF BLOCK IN ABDLINE    Z40MPXG
SIZEM1   EQU   5                    SIZE OF FIELD BEING HANDLED MINUS 1
SIZEM3   EQU   5                    LENGTH HOLDER FOR MVC       Z40MPXG
INDENT1  EQU   8                    WORK REGISTER               Z40MPXG
INDENT2  EQU   9                    WORK REGISTER               Z40MPXG
LINE2    EQU   6                    ADDRESS OF ABDLINE          Z40MPXG
OFFSET   EQU   6                    OFFSET IN OUTPUT LINE TO LOCATION
*                                   WHERE DATA TO BE PLACED
LINE     EQU   7                    ADDRESS OF ABDLINE
INCR     EQU   8                    INCREMENT REGISTER IN BXLE LOOP
ENDLOOP  EQU   9                    CONTROL REGISTER IN BXLE LOOP
BASE     EQU   12                   BASE REGISTER
SAVEAREA EQU   13                   ADDRESS OF CALLERS SAVE AREA
RETREG   EQU   14                   RETURN ADDRESS
BASEIN   EQU   15                   ENTRY POINT ADDRESS
RETCODE  EQU   15                   RETURN CODE REGISTER
*
* GENERAL EQUATES
*
ZERO     EQU   0                    CONSTANT
ONE      EQU   1                    CONSTANT
TWO      EQU   2                    CONSTANT
FOUR     EQU   4                    CONSTANT
FIVE     EQU   5                    CONSTANT
EIGHT    EQU   8                    CONSTANT
NINE     EQU   9                    CONSTANT
TWELVE   EQU   12                   CONSTANT
TWENTY   EQU   20                   CONSTANT
TWENTY4  EQU   24                   CONSTANT
K31      EQU   31                   CONSTANT
K240     EQU   240                  CONSTANT
K204     EQU   204                  LINE LENGTH FOR LONG LINES  Z40MPXG
SIX      EQU   6                    LENGTH FOR BIT SHIFT        Z40MPXG
K63      EQU   63                   LINE SIZE - 1, LONG LINE    Z40MPXG
K64      EQU   64                   LINE SIZE, LONG LINE        Z40MPXG
K32      EQU   32                   LINE SIZE, SHORT LINE       Z40MPXG
K33      EQU   33                   INDEX INTO LINE FOR EBCDIC  ZM40130
X0F      EQU   X'0F'                USED IN TABLE LOOK UP
X3F      EQU   X'3F'                USED IN TABLE LOOK UP
X40      EQU   X'40'                USED IN TABLE LOOK UP
XC0      EQU   X'C0'                USED IN TABLE LOOK UP
STAR     EQU   C'*'                 DELIMITER CONSTANT
FINI     EQU   X'FF'                TERMINATE LAYOUT LINE CHARACTER
ALL      EQU   X'FF'                USED TO RESET BIT
BLANK    EQU   C' '                 CLEAR TO BLANK
         USING *,BASEIN
         MODID BR=YES
         DROP  BASEIN
         STM   RETREG,BASE,TWELVE(SAVEAREA)   SAVE CALLERS REGISTERS
         BALR  BASE,ZERO            ESTABLISH ADDRESSIBILITY
         USING *,BASE
         USING ABDAREA,ABDARPTR
BASE1    LA    LINE,ABDLINE         SET ADDRESS OF ABDLINE
         LR    LINE2,LINE           SET ADDRESS OF ABDLINE
* TWO BASE REGS ARE USED FOR THE ADDRESS OF ABDLINE BECAUSE OF THE
* TWO DSECTS USED, ONE FOR A SHORT 120 CHARACTER LINE, AND ONE FOR
* A LONG 204 CHARACTER LINE.  SINCE A USING CANNOT BE ISSUED FOR TWO
* DSECTS ON THE SAME BASE REGISTER, TWO REGISTERS HAD TO BE USED IN
* ORDER TO ASSEMBLE THE MODULE.                                 Z40MPXG
         USING PRNTLINE,LINE
         USING PRNTLN2,LINE2        SET ADDRESS TO LONGLINE     Z40MPXG
         L     CORE,ABDSTAD         GET ADDR CORE TO BE TRANSLATED
         CLI   ABDLLNGH,K204        CHECK FOR LONG LINE OPTION  Z40MPXG
         BNE   SHORTLN              NO, RESUME NORMAL CODE      Z40MPXG
         SRL   CORE,SIX             ROUND TO 64 BYTE BNDY       Z40MPXG
         SLL   CORE,SIX             FOR LONG LINE PROCESSING    Z40MPXG
         LA    SIZEM3,K63           SET LINE CAPACITY - 1       Z40MPXG
         LA    BLOKADDR,COREBLK2    SET ADDR OF BLK IN ABDLINE  Z40MPXG
         B     CONT1                CONTINUE NORMAL CODE        Z40MPXG
SHORTLN  SRL   CORE,FIVE            ROUND ADDRESS DOWN TO 32    Z40MPXG
         SLL   CORE,FIVE            BYTE BOUNDARY               Z40MPXG
         LA    SIZEM3,K31           SET LINE CAPACITY - 1       Z40MPXG
         LA    BLOKADDR,COREBLOK    SET ADDR OF BLK IN ABDLINE  Z40MPXG
CONT1    TM    ABDUPRF,UPRFMT20     IS UPR ANTICIPATED
         BNO   NOUPR20              NO, BRANCH
         LA    WORK,FORM20X         ESTABLISH FORM20X AS ROUTINE
         ST    WORK,ABDUPRXT        TO GET CONTROL ON UPR
NOUPR20  CLI   ABDLLNGH,K204        CONDENSED FORMAT ?
         BNE   SHORTMVE             NO DO REGULAR MOVE          ZM40130
         MVC   ZERO(K32,BLOKADDR),ZERO(CORE) MOVE FIRST HALF    ZM40130
         MVI   K32(BLOKADDR),X40       MOVE BLANK IN MIDDLE     ZM40130
         MVC   K33(K32,BLOKADDR),K32(CORE)  MOVE LAST HALF      ZM40130
         B     ZEROUPR              CONTINUE                    ZM40130
SHORTMVE EX    SIZEM3,MOVE3         MOVE DATA TO ABDLINE        ZM40130
ZEROUPR  XC    ABDUPRXT(FOUR),ABDUPRXT    DISALLOW UPR EVENT
         LH    INDENT1,ABDIND       GET INDENTATION FACTOR      Z40MPXG
         LTR   INDENT1,INDENT1      ANY INDENTATION FACTOR ?    Z40MPXG
         BE    NOINDENT             NO, CHECK FOR TRUNCATION    Z40MPXG
         CLI   INDENT1,K32          CHECK FOR 32 TO INDENT      ZM40130
         BNH   NOIDUP               NOT MORE, LENGTH OKAY       ZM40130
         LA    INDENT1,ONE(,INDENT1) ADD ONE FOR EXTRA BLANK    ZM40130
NOIDUP   MVI   ZERO(BLOKADDR),X'40' BLANK FIRST CHARACTER       Z40MPXG
         BCTR  INDENT1,ZERO         SUBTRACT BLANKED BYTE       Z40MPXG
         BCTR  INDENT1,ZERO         DECREMENT FOR EXECUTE       Z40MPXG
         EX    INDENT1,MOVE4        BLANK THE REST              Z40MPXG
NOINDENT L     INDENT1,ABDLCNT      GET COMPLETE LINE COUNT     Z40MPXG
         SR    INDENT2,INDENT2      ZERO WORK REG FOR COMPARE   Z40MPXG
         CR    INDENT1,INDENT2      LINE COUNT ZERO ?           Z40MPXG
         BNE   NOTLAST              NO, NOT LAST LINE THEN      Z40MPXG
         CLI   ABDLLNGH,K204        LONG LINE REQUEST ?         Z40MPXG
         BNE   SHORT2               NO, PROCESS SHORT LENGTH    Z40MPXG
         LA    INDENT1,K64          PICK UP LINE CAPACITY       Z40MPXG
         B     FIGLNGH              GO FIGURE LEN TO BLANK OUT  Z40MPXG
SHORT2   LA    INDENT1,K32          PICK UP LINE CAPACITY       Z40MPXG
* NOW SUBTRACT THE NUMBER OF BYTES TO BE PRINTED (ABDINCPL)     Z40MPXG
*  FROM THE LINE CAPACITY TO GET THE LENGTH TO BLANK OUT AT THE Z40MPXG
*  END OF THE LINE.                                             Z40MPXG
FIGLNGH  SH    INDENT1,ABDINCPL    FIGURE LENGTH TO BLANK       Z40MPXG
         CR    INDENT1,INDENT2     ANY LEFT TO BLANK OUT ?      Z40MPXG
         BE    NOTLAST             NO, THEN COMPLETE LINE TO GO Z40MPXG
         LR    INDENT2,BLOKADDR    GET LINE ADDRESS             Z40MPXG
         AH    INDENT2,ABDINCPL    INDEX TO PLACE TO START BLNK Z40MPXG
         CLI   INDENT1,K32         CHECK FOR MORE THAN 32       ZM40130
         BL    UPSTART             LESS, INCREMENT START ADDR   ZM40130
         LA    INDENT1,ONE(,INDENT1) ADD ONE TO LENGTH TO BLNK  ZM40130
         MVI   ZERO(INDENT2),X'40' BLANK THE FIRST CHARACTER    Z40MPXG
         B     TRUNC1              CONTINUE TRUNCATION PROCESS  ZM40130
UPSTART  LA    INDENT2,ONE(,INDENT2) INCREMENT START ADDRESS    ZM40130
         MVI   ZERO(INDENT2),X40    BLANK FIRST CHARACTER       ZM40130
TRUNC1   BCTR  INDENT1,ZERO        ALLOW FOR BYTE BLANKED OUT   Z40MPXG
         BCTR  INDENT1,ZERO        DECREMENT FOR EXECUTE INSTR  Z40MPXG
         EX    INDENT1,MOVE5       BLANK REST OF END OF LINE    Z40MPXG
* IF LONGCLINE BEING WRITTEN, THEN NO ASTERISKS IN LINE         Z40MPXG
NOTLAST  CLI   ABDLLNGH,K204       LONG LINE ?                  ZA18175
         BE    LOOP2A              BYPASS ASTERISK SETTINGS     ZM40130
         MVI   DELIMITA,STAR        SET ASTERISK BEFORE AND
         MVI   DELIMITB,STAR        AFTER TRANSLATED DATA
*************************************************************** ZA18175
*         CODE REMOVED FOR APAR ZA18175     ******************* ZA18175
* LOOP   TM    COREBLOK,XC0         COMPARE CHARACTER TO X'C0'
*        BO    LEAVEIT              BRANCH IF HIGH OR EQUAL
*        CLI   COREBLOK,BLANK       CHECK IF BLANK
*        BE    GOLOOP               YES, THEN CHARACTER NEED NOT CHANGE
*        MVI   COREBLOK,X0F         REPLACE CHARACTER WITH X'0F'
* LEAVIT NI    COREBLOK,X3F         TURN OFF HIGH ORDER TWO BITS
* GOLOOP BXLE  LINE,INCR,LOOP       BRANCH TO PROCESS NEXT CHAR
*   CODE REMOVED FOR APAR ZA18175                               ZA18175
*************************************************************** ZA18175
         B     TRANS2               GO TRANSLATE CHARACTERS     Z40MPXG
*************************************************************** ZA18175
* LOOP2A LA    ENDLOOP,ONE(,ENDLOOP) ADD ONE FOR EXTRA BLANK    ZM40130
*         CODE REMOVED FOR APAR ZA18175     ******************* ZA18175
* LOOP2  TM    COREBLK2,XC0         COMPARE FOR EBCDIC          Z40MPXG
*        BO    LEAVEIT2             BR HIGH OR EQUAL            Z40MPXG
*        CLI   COREBLK2,BLANK       CHECK FOR A BLANK           Z40MPXG
*        BE    GOLOOP2              YES, GET NEXT CHARACTER     Z40MPXG
*        MVI   COREBLK2,X0F         REPLACE CHAR WITH X0F       Z40MPXG
*EAVEIT2 NI    COREBLK2,X3F         TURN OFF HI TWO BITS        Z40MPXG
*GOLOOP2 BXLE  LINE2,INCR,LOOP2     LOOP UNTIL ALL DONE         Z40MPXG
*   CODE REMOVED FOR APAR ZA18175                               ZA18175
*************************************************************** ZA18175
* IF LONG LINE, THEN TRANSLATE USING COREBLOK WITH ITS          Z40MPXG
* DECLARED LENGTH OF 64, ELSE USE EBCBLOCK WITH ITS 32 BYTE     Z40MPXG
* DECLARATION.                                                  Z40MPXG
LOOP2A   LR    LINE2,LINE           RESET BASE TO BEGINNING     ZA18175
         TR    COREBLK2,XLATE       XLATE ALL 64 BYTES          Z40MPXG
         LA    LAYOUT,LAYLINE       SET LAYOUT LINE FOR AD61    Z40MPXG
         B     INTO22               GO CONVERT LINE ADDRESS     Z40MPXG
TRANS2   TR    COREBLOK,XLATE       TRANSLATE CHARACTERS TO PRINTABLES
*                                                               ZA18175
         DROP  LINE
         DROP  LINE2
         LA    LAYOUT,LAYLINE       SET LAYOUT LINE FOR FORMAT22
         B     INTO22               GO TO FORMAT22
IEAVAD61 EQU   *
         USING *,BASEIN
BASE2    STM   RETREG,BASE,TWELVE(SAVEAREA)   SAVE CALLERS REGISTERS
         LA    WORK,BASE2-BASE1     CALC DIFFERENCE BETWEEN BASES
         SR    BASEIN,WORK          SET TO BASE1 VALUE
         LR    BASE,BASEIN          SET IN RIGHT REGISTER
         DROP  BASEIN
         USING BASE1,BASE
         L     LAYOUT,ABDLLINE      GET ADDR OF LAYOUT LINE
INTO22   L     CORE,ABDBPTR         GET ADDR OF CORE TO BE UNPACKED
REPEAT   LA    LINE,ABDLINE         GET ADDR OF OUTPUT LINE
         TM    ZERO(LAYOUT),FINI    IS REQUEST COMPLETE
         BO    EXIT                 YES, RETURN TO CALLER
         SR    OFFSET,OFFSET        INITIALIZE REGISTER
         SR    SIZEM1,SIZEM1        INITIALIZE REGISTER
         IC    OFFSET,ZERO(LAYOUT)  GET DISPLACEMENT TO WHERE UNPACKED
*                                   DATA IS TO BE PLACED
         IC    SIZEM1,ONE(LAYOUT)   GET SIZE - 1 OF FIELD TO BE
*                                   UNPACKED
         AR    LINE,OFFSET          ADD DISPLACEMENT TO INIT LINE ADDR
         TM    ABDUPRF,UPRFMT20     IS UPR ANTICIPATED
         BNO   NOUPR22              NO, BRANCH
         LA    WORK,FORM20X         ESTABLISH ADDR OF ROUTINE TO
         ST    WORK,ABDUPRXT        BE GIVEN CONTROL IF UPR HAPPENS
NOUPR22  EX    SIZEM1,MOVE1         MOVE DATA TO WORK AREA
         XC    ABDUPRXT(FOUR),ABDUPRXT   DISALLOW UPR EVENT
         UNPK  ABDFMTWK(NINE),ABDFMTWK(FIVE)    UNPACK DATA
         TR    ABDFMTWK(EIGHT),TBL-K240   TRANSLATE TO PRINTABLES
         LA    WORK,TWO             LENGTH FOR CHECK            Z40MPXG
         CR    WORK,SIZEM1          ONLY XLATING THREE BYTES    Z40MPXG
         BE    CONT2                YES, NO UNDERSCORE HERE     Z40MPXG
         CLI   ABDLLNGH,K204        LONG LINE FORMAT ?          Z40MPXG
         BNE   CONT2                NO, NO UNDERSCORES HERE     Z40MPXG
* AND OFF TWO HIGH ORDER BYTES TO TRANSLATE CHARACTER TO THE    Z40MPXG
* SAME CHARACTER WITH AN UNDERSCORE FOR THE 3800 PRINTER.       Z40MPXG
         NI    ABDFMTWK,X'3F'       KNOCK OFF TWO TOP BITS      Z40MPXG
CONT2    LA    CORE,ONE(SIZEM1,CORE)      STEP TO NEXT STORAGE FIELD
         LA    SIZEM1,ONE(SIZEM1,SIZEM1)  CALC SIZE-1 UNPACKED DATA
         EX    SIZEM1,MOVE2         MOVE DATA TO OUTPUT LINE
         LA    LAYOUT,TWO(LAYOUT)   STEP TO NEXT LAYOUT LINE ENTRY
         B     REPEAT               CHECK IF MORE TO BE DONE
EXIT     LA    LAYOUT,ONE(LAYOUT)   STEP OVER END INDICATOR
         ST    LAYOUT,ABDLLINE      SAVE UPDATED POINTER
         ST    CORE,ABDBPTR         SAVE UPDATED FIELD POINTER
         LA    RETCODE,ZERO         SET RET CODE TO ZERO
CEXIT    NI    ABDUPRF,ALL-UPRFMT20 RESET UPR INDICATOR BIT
         L     RETREG,TWELVE(SAVEAREA)    RESTORE REG 14 CONTENTS
         LM    R0,BASE,TWENTY(SAVEAREA)    RESTORE REGISTERS
         BR    RETREG               RETURN TO CALLER
FORM20X  L     ABDARPTR,TWENTY4(SAVEAREA)  RESTORE ABDAREA POINTER
         MVI   ABDCC,BLANK          SET ABDCC TO BLANK
         MVC   ABDLINE(L'ABDLINE),ABDCC   SET REST OF LINE TO BLANK
         LA    RETCODE,EIGHT        SET RET CODE TO UPR
         B     CEXIT                RETURN TO CALLER
*
* CONSTANTS
*
XLATE    DC    C'................'  TABLE TO TRANSLATE TO       ZA18175
         DC    C'................'  EITHER TO A ALPHABETIC      ZA18175
         DC    C'................'  OR TO A NUMERIC OR TO       ZA18175
         DC    C'................'  A PERIOD                    ZA18175
         DC    C' ...............'                              ZA18175
         DC    C'................'                              ZA18175
         DC    C'................'                              ZA18175
         DC    C'................'                              ZA18175
         DC    C'................'                              ZA18175
         DC    C'................'                              ZA18175
         DC    C'................'                              ZA18175
         DC    C'................'                              ZA18175
         DC    C'.ABCDEFGHI......'                              ZA18175
         DC    C'.JKLMNOPQR......'                              ZA18175
         DC    C'..STUVWXYZ......'                              ZA18175
         DC    C'0123456789......'                              ZA18175
TBL      DC    C'0123456789ABCDEF'  TABLE TO TRANS LATE UNPACKED DATA
LAYLINE  DC    X'0002',X'FF'        STANDARD LAYOUT LINE TO UNPACK
*                                   THE LOCATION COUNTER
*
* EXECUTED INSTRUCTIONS
*
MOVE1    MVC   ABDFMTWK(ONE),ZERO(CORE)   MOVE DATA TO WORK AREA
MOVE2    MVC   ZERO(ONE,LINE),ABDFMTWK    MOVE WORK AREA TO OUTPUT LINE
MOVE3    MVC   ZERO(ONE,BLOKADDR),ZERO(CORE)   MOVE IN TO XLATE Z40MPXG
MOVE4    MVC   ONE(ONE,BLOKADDR),ZERO(BLOKADDR) BLNK BEGINNING  Z40MPXG
MOVE5    MVC   ONE(ONE,INDENT2),ZERO(INDENT2) BLANK END OF LINE Z40MPXG
*
*
* DSECT OF 64 BYTE OUTPUT LINE
*
PRNTLINE DSECT
         DS    CL55                 DEAD SPACE
EBCBLOCK DS    0CL32                LABEL FOR MOVE
         DS    CL31                 DEAD SPACE
DELIMITA DS    CL1                  ASTERISK ON ONE SIDE OF TRANSLATION
COREBLOK DS    CL32                 TRANSLATED DATA AREA
DELIMITB DS    CL1                  ASTERISK ON OTHER SIDE OF DATA
*
*                                                               Z40MPXG
* DSECT FOR 64 BYTE OUTPUT LINE                                 Z40MPXG
*                                                               Z40MPXG
PRNTLN2  DSECT                                                  Z40MPXG
         DS  CL75                   DEAD SPACE                  Z40MPXG
EBCBLK2  DS   CL64                  DEAD SPACE                  Z40MPXG
COREBLK2 DS   CL65                  TRANSLATED OUTPUT AREA      ZM40130
*
*
* DSECT MAP OF ABDAREA
         IHAABDA
*/*IEAVAD51: CHART */
*/* HEADER
*/*  EBCDIC TRANSLATION ROUTINE AND  ADDRESS TRANSLATION ROUTINE
*/*  FEBRUARY 13, 1975      C. KEN WRIGHT      PAGE# */
*/* E IEAVAD51 MAINLINE */
*/* P SAVE REGISTERS */
*/* P SET ADDRESSABILITY - REG 12 */
*/* P SET ADDRESS OF OUTPUT LINE - LINE */
*/* P SET ADDRESSABILITY TO OUTPUT LINE - LINE2 */
*/* P GET CORE ADDRESS TO TRANSLATE */
*/* D (YES,,NO,%M1) 204 CHARACTER LINE ? */
*/* P ROUND TO 64 BYTE BOUNDARY */
*/* P SET 64 BYTE LINE SIZE - SIZEM3=63 */
*/* P (,CONT1) SET ADDR OF OUTPUT BLOCK - BLOKADDR */
*/*%M1:  P ROUND ADDRESS TO A 32 BYTE BOUNDARY */
*/* P SET 32 BYTE LINE SIZE - SIZEM3=31 */
*/* P SET ADDRESS OF OUTPUT BLOCK - BLOKADDR */
*/*CONT1: D (YES,,NO,%K1) UPR EXPECTED ? */
*/* P GET ADDRESS OF FORMAT 20X - UPR ROUTINE */
*/*%K1: P MOVE DATA TO ABDLINE VIA EX WITH LENGTH IN SIZEM3 */
*/* P CLEAR UPR FIELD */
*/* P GET INDENTATION FACTOR - ABDIND */
*/* D (YES,,NO,NOINDENT) IS THERE INDENTATION ? */
*/* P MOVE A BLANK TO FIRST CHAR IN OUTPUT BLOCK */
*/* P SUBTRACT TWO FROM INDENTATION FACTOR */
*/* P BLANK OUT REST OF INDENTATION PART */
*/*NOINDENT: P GET LINE COUNT - ABDLCNT */
*/* D (YES,,NO,NOTLAST) IS THIS LAST LINE IN DUMP */
*/* P PICK UP BYTE COUNT - ABDINCPL */
*/* D (YES,NOTLAST,NO,) COMPLETE LINE TO WRITE ? */
*/* P INCREMENT INTO COREBLOK BY ABDINCPL */
*/* P MOVE A BLANK INTO FIRST BYTE TO SUPPRESS */
*/* D (YES,,NO,SHORT2) 204 CHARACTER LINE ABDLLNGH */
*/* P (,FIGLNGH) SET LINE CAPACITY TO 64 BYTES */
*/*SHORT2: P SET LINE CAPACITY TO 32 BYTES */
*/*FIGLNGH: P FIGURE LENGTH TO SUPPRESS, CAPACITY - ABDINCPL */
*/* P SUBTRACT TWO FROM LENGTH */
*/* P MOVE BLANKS INTO REST OF SUPPRESSED AREA */
*/*NOTLAST: P SET LOOP CONTROL TO 1 */
*/* P SET END LOOP CONTROL FROM SIZEM3 */
*/* D (YES,LOOP2,NO,) 204 CHARACTER LINE ? */
*/* P PLACE ASTERISK BEFORE AND AFTER DATA FIELD */
*/*LOOP: D (YES,LEAVEIT,NO,) IS CHARACTER > 'C0'X ? */
*/* D (YES,GOLOOP,NO,) IS CHARACTER A BLANK ? */
*/* P SET '0F'X DEFAULT VALUE */
*/*LEAVEIT: P AND OFF THE TWO HIGH ORDER BITS */
*/* P INCREMENT TO NEXT CHARACTER */
*/*GOLOOP: D (YES,TRANS2,NO,LOOP) ARE WE DONE WITH ALL CHARACTERS ? */
*/*LOOP2: D (YES,LEAVEIT2,NO,) EBCDIC CHARACTER ? */
*/* D (YES,GOLOOP2,NO,) BLANK ? */
*/* P SET CHARACTER TO X'0F' */
*/*LEAVEIT2: P AND OFF TWO HIGH ORDER BITS */
*/* P INCREMENT TO NEXT CHARACTER */
*/*GOLOOP2: D (YES,,NO,LOOP2) ALL DONE ? */
*/* P TRANSLATE CHARACTERS VIA COREBLK2 */
*/* P (,INTO22) GET ADDRESS OF LAYOUT LINE */
*/*TRANS2: P  TRANSLATE THE CHARACTERS VIA EBCBLOCK */
*/* P (,INTO22) GET ADDRESS OF THE LAYOUT LINE */
*/*IEAVAD61: E IEAVAD61 MAINLINE */
*/* P STORE REGISTERS */
*/* P CALCULATE BASEREG VALUE - REG 12 */
*/* P GET ADDRESS OF LAYOUT LINE */
*/*INTO22: P GET ADDRESS OF ABDLINE */
*/*REPEAT: D (YES,EXIT,NO,) AT END OF LAYOUT LINE ? */
*/* P INITIALIZE REGISTERS */
*/* P GET OFFSET INTO LINE */
*/* P GET SIZE OF FIELD TO UNPACK */
*/* P ADD OFFSET TO LINE ADDRESS */
*/* D (YES,,NO,%K4) UPR EXPECTED ? */
*/* P SET ADDRESS OF FORMAT 20X - UPR ROUTINE */
*/*%K4: P  MOVE DATA TO WORKAREA */
*/* P CLEAR UPR FIELD */
*/* P UNPACK THE DATA */
*/* P TRANSLATE A WORD OF  DATA */
*/* D (YES,,NO,%M4) 204 CHARACTER LINE ? */
*/* P AND OFF 2 BITS OF 1ST BYTE TO UNDERLINE */
*/*%M4: P UPDATE TO NEXT CORE BLOCK */
*/* P GET SIZE OF UNPACKED DATA */
*/* P MOVE TO OUTPUT LINE */
*/* P (,REPEAT) GET NEXT LAYOUT LINE ENTRY */
*/*EXIT: P INCREMENT OVER THE FF IN THE LAYOUT LINE */
*/* P SAVE POINTER IN ABDLINE */
*/* P SAVE ADDRESS OF NEXT CORE BLOCK IN ABDBPTR */
*/* P SET RETURN CODE OF ZERO */
*/*CEXIT: P RESET UPR FLAGS OFF */
*/* P RESTORE REG 14 */
*/* P RESTORE OTHER REGISTERS */
*/* R RETURN TO CALLER */
*/* E FORMAT 20X */
*/* COMMENT (4,15) UPR ROUTINE */
*/* P RESTORE ABDAREA POINTER */
*/* P BLANK OUT ABDCC */
*/* P BLANK OUT REST OF LINE */
*/* P (,CEXIT) SET RETURN CODE OF 8 */
*/*IEAVAD51: END */
         END IEAVAD51
