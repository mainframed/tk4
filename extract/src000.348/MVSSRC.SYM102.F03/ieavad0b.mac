         TITLE 'IEAVAD0B - LPA,JPA MODULE DISPLAY                      *
                        '
IEAVAD0B CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IEAVAD0B  77.332'                                 0001
         DROP  @15
@PROLOG  ST    @14,12(,@13)                                        0001
         STM   @00,@12,20(@13)                                     0001
         BALR  @10,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@10                                         0001
RBPRFXLN EQU 64
RBPRFLNA EQU 32
PRBLEN   EQU 136
SIRBLEN  EQU 200
TIRBLEN  EQU 136
IRBLEN   EQU 128
SVRBLEN  EQU 224
*                                                            @G33CPHE*/
*                                                                  0105
*   /*****************************************************************/
*   /*                                                               */
*   /* INITIALIZATION ON ENTRY FIRST THE ADDRESSING REGISTERS ARE    */
*   /* INITIALIZED, THEN A SAVE AREA FOR THE REGISTER SAVE AREA AND  */
*   /* AUTOMATIC DATA AREA IS OBTAINED FROM LSQA. THE ADDRESS OF THE */
*   /* AREA IS RETURNED IN ABDGMA, AND THE ADDRESS OF THE GETMAIN    */
*   /* PARAMETER LIST IS PASSED IN REGISTER 1. NEXT THE SAVE AREAS   */
*   /* ARE CHAINED, AND THE TEMPORARY WORK AREA ZTEMPS IS CLEARED TO */
*   /* ZEROS SO THAT THE BOUNDARY ADJUSTMENT MOVES CAN BE DONE       */
*   /* PROPERLY.                                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0105
*   ABDARPTR=PARMPTR;               /* THE ABDAREA POINTER IS      0105
*                                      INITIALIZED FROM THE VALUE IN
*                                      REGISTER 1                    */
         LR    ABDARPTR,PARMPTR                                    0105
*   TCBPTR=ABDTCB;                  /* THE TCBPTR IS THE TCB OF THE
*                                      TASK TO BE DISPLAYED          */
         L     TCBPTR,ABDTCB(,ABDARPTR)                            0106
*   PARMPTR=ADDR(ABDASIZE);         /* REGISTER 1 IS SET TO POINT TO
*                                      THE GETMAIN PARAMETER LIST    */
         LA    PARMPTR,ABDASIZE(,ABDARPTR)                         0107
*   GENERATE;                                                      0108
         GETMAIN EC,LV=@ENDDATD-@DATD+72+3780,                         *
               SP=253,                                                 *
               A=ABDGMA(ABDARPTR),                                     *
               MF=(E,(1))
*   IF RETCODE^=0 THEN              /* IF GETMAIN IS UNSUCCESSFUL    */
         LTR   RETCODE,RETCODE                                     0109
         BZ    @RF00109                                            0109
*     DO;                           /* Y02705                        */
*       RETCODE=8;                  /* SET RETURN CODE Y02705        */
         LA    RETCODE,8                                           0111
*       RETURN;                                                    0112
@EL00001 DS    0H                                                  0112
@EF00001 DS    0H                                                  0112
@ER00001 L     @14,12(,@13)                                        0112
         LM    @00,@12,20(@13)                                     0112
         BR    @14                                                 0112
*     END;                          /* Y02705                        */
*   ELSE                            /* Y02705                        */
*     DO;                           /* Y02705                        */
@RF00109 DS    0H                                                  0115
*       PARMPTR=ABDAAREA;           /* USE PARMPTR AS TEMPORARY    0115
*                                      POINTER TO SAVE AREA          */
         L     PARMPTR,ABDAAREA(,ABDARPTR)                         0115
*       NEXSAPTR=PARMPTR;           /* INITIALIZE NEXT SAVE AREA   0116
*                                      POINTER IN OLD SAVE AREA      */
         ST    PARMPTR,NEXSAPTR(,SAVEPTR)                          0116
*       PRESAPTR=SAVEPTR;           /* INITIALIZE PREVIOUS SAVE AREA
*                                      POINTER IN NEW AREA           */
         ST    SAVEPTR,PRESAPTR(,PARMPTR)                          0117
*       SAVEPTR=PARMPTR;            /* SET SAVE REGISTER TO NEW SAVE
*                                      AREA ADDRESS                  */
         LR    SAVEPTR,PARMPTR                                     0118
*       ABDTABPT=SAVEPTR+72;        /* MODULE TABLE ADDRESS IS SET TO
*                                      GETMAINED AREA START PLUS   0119
*                                      SAVEAREA SIZE         @G33SPHW*/
         LA    @11,72                                              0119
         ALR   @11,SAVEPTR                                         0119
         ST    @11,ABDTABPT(,ABDARPTR)                             0119
*       AUTOPTR=ABDTABPT+3780;      /* SET UP AUTOMATIC DATA       0120
*                                      ADDRESSABILITY BEYOND MODULE
*                                      TABLE                 @G33SPHW*/
         AL    @11,@CF00137                                        0120
         LR    AUTOPTR,@11                                         0120
*       GENERATE;                                                  0121
         USING @DATD,AUTOPTR           ESTABLISH ADDRESSABILITY
         XC   0(@ENDDATD-@DATD,AUTOPTR),0(AUTOPTR) ZERO TEMPORARY SPACE
*       TABPTR=ABDTABPT;            /* SET CURRENT TABLE TO FIRST  0122
*                                      TABLE ADDRESS         @G33SPHW*/
         L     @11,ABDTABPT(,ABDARPTR)                             0122
         ST    @11,TABPTR                                          0122
*       TABBACK=0;                  /* ZERO BACKWARD POINTER @G33SPHW*/
         SLR   @08,@08                                             0123
         ST    @08,TABBACK(,@11)                                   0123
*       TABCHAIN=0;                 /* ZERO FORWARD POINTER  @G33SPHW*/
         ST    @08,TABCHAIN(,@11)                                  0124
*       ENTLIMIT=0;                 /* ZERO ENTRY COUNTER    @G33SPHW*/
         STH   @08,ENTLIMIT                                        0125
*       PARMPTR=ABDARPTR;           /* SET UP PARM REG FOR    SUBRTNS*/
         LR    PARMPTR,ABDARPTR                                    0126
*       SAVERET=0;                  /* INIT RETURN CODE Y02705       */
*                                                                  0127
         SLR   SAVERET,SAVERET                                     0127
*       /*************************************************************/
*       /*                                                           */
*       /* THIS SECTION OF CODE WILL PRINT ALL MODULES IN THE JPA OR */
*       /* LPA THAT ARE ACTIVE FOR THE TASK BEING DISPLAYED. IF THE  */
*       /* TASK IS NOT COMPLETE THE RB QUEUE IS SEARCHED FROM THE    */
*       /* OLDEST RB FIRST FOR MODULES IN CORE. ANY SUCH MODULES ARE */
*       /* PRINTED BY FORMET UNTIL THE RB QUEUE HAS BEEN EXHAUSTED.  */
*       /* THE RB PROCESSING IS BYPASSED IF TASK HAS COMPLETED. NEXT */
*       /* THE LLE CHAIN IS SEARCHED FOR CDES WHICH ARE NOT CHAINED  */
*       /* TO RBS. EACH ONE THAT IS FOUND IS PRINTED. IF THE JPA     */
*       /* MODULES WERE REQUESTED (APFJPA=1) ALL THE JPA MODULES     */
*       /* FOUND IN THE ABOVE MANNER ARE PRINTED IF THE LPA MODULES  */
*       /* WERE REQUESTED (APFLPA=1) ALL LPA MODULES FOUND IN THE    */
*       /* ABOVE MANNER ARE PRINTED. IF NEITHER BIT IS ON THE LPA-JPA*/
*       /* PROCESSING IS BYPASSED                                    */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0128
*       CTR=0;                      /* INITIALIZE COUNTER TO ZERO  0128
*                                                            @G33SPHW*/
         STH   @08,CTR                                             0128
*       IF APFLPA='1'B              /* IF JPA OR LPA MODULES         */
*           ×APFJPA='1'B THEN       /* REQUESTED THEN CONTINUE       */
         TM    APFLPA(ABDARPTR),B'00011000'                        0129
         BZ    @RF00129                                            0129
*         DO;                                                      0130
*           TCBPTR=ABDTCB;          /* PICK UP TCB ADDRESS           */
         L     TCBPTR,ABDTCB(,ABDARPTR)                            0131
*           IF TCBFC^='1'B          /* IF THE TASK HAS NOT           */
*             THEN                  /* COMPLETED DO RB PROCESS       */
         TM    TCBFC(TCBPTR),B'10000000'                           0132
         BO    @RF00132                                            0132
*             DO;                                                  0133
*               ENDQ=TCBPTR;        /* INITIALIZE END OF Q POINTER   */
*                                                                  0134
         ST    TCBPTR,ENDQ                                         0134
*               /*****************************************************/
*               /*                                                   */
*               /* PROCESS EACH PRB BEGINNING WITH THE OLDEST        */
*               /*                                           @ZA11334*/
*               /*                                                   */
*               /*****************************************************/
*                                                                  0135
*               DO WHILE ENDQ^=TCBRBP;/*                     @ZA11334*/
         B     @DE00135                                            0135
@DL00135 DS    0H                                                  0136
*                 RBSECPTR=TCBRBP;  /* PICK UP FIRST RB FROM TCBB    */
         L     RBSECPTR,TCBRBP(,TCBPTR)                            0136
*                 DO WHILE RBLINKB^=ENDQ;/* IF THIS IS LAST RB PRINT
*                                      CORE IF VALID TO      @ZA11334*/
         B     @DE00137                                            0137
@DL00137 DS    0H                                                  0138
*                   RBSECPTR=RBLINKB;/*                      @ZA11334*/
         L     @11,RBLINKB-1(,RBSECPTR)                            0138
         LA    @11,0(,@11)                                         0138
         LR    RBSECPTR,@11                                        0138
*                 END;                                             0139
@DE00137 L     @11,RBLINKB-1(,RBSECPTR)                            0139
         LA    @11,0(,@11)                                         0139
         C     @11,ENDQ                                            0139
         BNE   @DL00137                                            0139
*                 CDENTPTR=RBCDE1;  /* PICK UP CDE FROM RB           */
*                                                                  0140
         L     @11,RBCDE1-1(,RBSECPTR)                             0140
         LA    @11,0(,@11)                                         0140
         ST    @11,CDENTPTR                                        0140
*                 /***************************************************/
*                 /*                                                 */
*                 /* TWO LINES FOR OZ27928 MOVED FROM HERE   @ZA27928*/
*                 /*                                                 */
*                 /***************************************************/
*                                                                  0141
*                 IF RBFTP='000'B   /* IF THIS IS A PRB      @ZA11334*/
*                     &CDENTPTR^=0  /* IF THERE IS A CDE     @ZA11334*/
*                     &CDNIC='0'B THEN/* IF THE MODULE IS IN CORE    */
*                                                                  0141
         TM    RBFTP(RBSECPTR),B'11100000'                         0141
         BNZ   @RF00141                                            0141
         SLR   @08,@08                                             0141
         CR    @11,@08                                             0141
         BE    @RF00141                                            0141
         TM    CDNIC(@11),B'01000000'                              0141
         BNZ   @RF00141                                            0141
*                   /*************************************************/
*                   /*                                               */
*                   /* INSURE MODULE HAS NOT ALREADY BEEN DUMPED BY  */
*                   /* CHECKING FOR SAME CDE ON PRB PREVIOUSLY       */
*                   /* PROCESSED                             @ZA11334*/
*                   /*                                               */
*                   /*************************************************/
*                                                                  0142
*                   DO;             /*                       @ZA11334*/
*                     IF CDENTPTR^=0&CDMIN='1'B THEN/* IF MINOR    0143
*                                                            @ZA27928*/
         CR    @11,@08                                             0143
         BE    @RF00143                                            0143
         TM    CDMIN(@11),B'00000100'                              0143
         BNO   @RF00143                                            0143
*                       CDENTPTR=CDXLMJP;/* THEN GET MAJOR CDE     0144
*                                                            @ZA27928*/
         L     @11,CDXLMJP(,@11)                                   0144
         ST    @11,CDENTPTR                                        0144
*                     REG9=RBLINKB; /* GET RB ADDRESS        @ZA11334*/
@RF00143 L     REG9,RBLINKB-1(,RBSECPTR)                           0145
         LA    REG9,0(,REG9)                                       0145
*                     DO WHILE REG9^=TCBPTR&REG9^=0;/*       @ZA11334*/
         B     @DE00146                                            0146
@DL00146 DS    0H                                                  0147
*                       TESTCDE=REG9->RBCDE1;/* GET TEST CDE @ZA11334*/
         L     TESTCDE,RBCDE1-1(,REG9)                             0147
         LA    TESTCDE,0(,TESTCDE)                                 0147
*                       IF REG9->RBFTP='000'B/* IF RB IS PRB @ZA11334*/
*                           &TESTCDE^=0/* CDE POINTER ZERO   @ZA11334*/
*                           &(TESTCDE=CDENTPTR/* CDE MATCHES OR MAJOR
*                                      MATCHES               @ZA11334*/
*                           ×TESTCDE->CDXLMJP=CDENTPTR) THEN/*     0148
*                                                            @ZA11334*/
         TM    RBFTP(REG9),B'11100000'                             0148
         BNZ   @RF00148                                            0148
         LTR   TESTCDE,TESTCDE                                     0148
         BZ    @RF00148                                            0148
         L     @11,CDENTPTR                                        0148
         CR    TESTCDE,@11                                         0148
         BE    @RT00148                                            0148
         C     @11,CDXLMJP(,TESTCDE)                               0148
         BNE   @RF00148                                            0148
@RT00148 DS    0H                                                  0149
*                         REG9=0;   /* INDICATE NO DUMP      @ZA11334*/
         SLR   REG9,REG9                                           0149
*                       ELSE        /*                       @ZA11334*/
*                         REG9=REG9->RBLINKB;/* NEXT RB ADDR @ZA11334*/
         B     @RC00148                                            0150
@RF00148 L     @11,RBLINKB-1(,REG9)                                0150
         LA    @11,0(,@11)                                         0150
         LR    REG9,@11                                            0150
*                     END;          /* END... REG9 EQUAL     @ZA11334*/
@RC00148 DS    0H                                                  0151
@DE00146 CR    REG9,TCBPTR                                         0151
         BE    @DC00146                                            0151
         LTR   REG9,REG9                                           0151
         BNZ   @DL00146                                            0151
@DC00146 DS    0H                                                  0152
*                     IF REG9^=0 THEN/* NO MATCHES           @ZA11334*/
         LTR   REG9,REG9                                           0152
         BZ    @RF00152                                            0152
*                       DO;         /* YES ..                @ZA11334*/
*                         CALL SAVEMOD;/* DUMP THE MODULE    @ZA11334*/
         BAL   @14,SAVEMOD                                         0154
*                         IF RETCODE^=0/* IF ERRED           @ZA11334*/
*                           THEN    /* LEAVE WITH            @ZA11334*/
         LTR   RETCODE,RETCODE                                     0155
         BNZ   @RT00155                                            0155
*                           GOTO FREERET;/* BAD CODE         @ZA11334*/
*                       END;        /*                       @ZA11334*/
*                   END;            /* END....               @ZA11334*/
@RF00152 DS    0H                                                  0159
*                 ENDQ=RBSECPTR;    /*                       @ZA11334*/
@RF00141 ST    RBSECPTR,ENDQ                                       0159
*               END;                /* END OF RB PROCESS OF LPA/JPA  */
@DE00135 CLC   ENDQ(4),TCBRBP(TCBPTR)                              0160
         BNE   @DL00135                                            0160
*             END;                  /* END ........          @ZA11334*/
*           LLEPTR=TCBLLS;          /* PICK UP LLE POINTER           */
@RF00132 L     @11,TCBLLS(,TCBPTR)                                 0162
         ST    @11,LLEPTR                                          0162
*LLELOOP:                                                          0163
*           IF LLEPTR^=0            /* IF THERE ARE ANY MORE LLES    */
*             THEN                  /* CONTINUE                      */
LLELOOP  L     @11,LLEPTR                                          0163
         LTR   @11,@11                                             0163
         BZ    @RF00163                                            0163
*             DO;                                                  0164
*               CDENTPTR=LLECDPT;   /* PICK UP CDE POINTER           */
         L     @11,LLECDPT(,@11)                                   0165
         ST    @11,CDENTPTR                                        0165
*               IF CDMIN='1'B       /* IF MINOR GET MAJOR            */
*                 THEN                                             0166
         TM    CDMIN(@11),B'00000100'                              0166
         BNO   @RF00166                                            0166
*                 CDENTPTR=CDXLMJP; /* GET MAJOR                     */
         L     @11,CDXLMJP(,@11)                                   0167
         ST    @11,CDENTPTR                                        0167
*               IF CDNIC='0'B       /* IF MODULE IS IN CORE          */
*                 THEN              /* CHECKING CONTINUES            */
@RF00166 L     @11,CDENTPTR                                        0168
         TM    CDNIC(@11),B'01000000'                              0168
         BNZ   @RF00168                                            0168
*                 DO;                                              0169
*                   IF TCBFC='0'B   /* IF THE TASK IS NOT CPLTE      */
*                     THEN          /* CHECK IF ON RB QUEUE          */
         TM    TCBFC(TCBPTR),B'10000000'                           0170
         BNZ   @RF00170                                            0170
*                     DO;                                          0171
*                       RBSECPTR=TCBRBP;/* PICK UP FIRST RB          */
*                                                                  0172
         L     RBSECPTR,TCBRBP(,TCBPTR)                            0172
*                       /*********************************************/
*                       /*                                           */
*                       /* IS CDE QUEUED TO THIS RB                  */
*                       /*                                           */
*                       /*********************************************/
*                                                                  0173
*RBLLOOP:                                                          0173
*                       IF RBFTP='000'B THEN/* IS THIS RB A PRB    0173
*                                                            @ZA18831*/
RBLLOOP  TM    RBFTP(RBSECPTR),B'11100000'                         0173
         BNZ   @RF00173                                            0173
*                         DO;       /* YES.... CHECK CDE     @ZA18831*/
*                           TESTCDE=RBCDE1;/* CDE TO TEST            */
         L     TESTCDE,RBCDE1-1(,RBSECPTR)                         0175
         LA    TESTCDE,0(,TESTCDE)                                 0175
*                           IF TESTCDE^=0/* IF THERE IS A CDE        */
*                             THEN                                 0176
         LTR   TESTCDE,TESTCDE                                     0176
         BZ    @RF00176                                            0176
*                             DO;                                  0177
*                               IF CDENTPTR=TESTCDE/* CHECK IF     0178
*                                      DUPLICATE                     */
*                                 THEN                             0178
         L     @11,CDENTPTR                                        0178
         CR    @11,TESTCDE                                         0178
         BE    @RT00178                                            0178
*                                 GOTO NEXTLLE;                    0179
*                               ELSE                               0180
*                                 IF TESTCDE->CDXLMJP=CDENTPTR/* CHK
*                                      IF DUPL MAJOR                 */
*                                   THEN                           0180
         C     @11,CDXLMJP(,TESTCDE)                               0180
         BE    @RT00180                                            0180
*                                   GOTO NEXTLLE;                  0181
*                             END;                                 0182
*                         END;      /* END NOT PRB           @ZA18831*/
@RF00176 DS    0H                                                  0184
*                       IF RBLINKB^=TCBPTR/* IF THERE ARE MORE RBS   */
*                         THEN                                     0184
@RF00173 L     @11,RBLINKB-1(,RBSECPTR)                            0184
         LA    @11,0(,@11)                                         0184
         CR    @11,TCBPTR                                          0184
         BE    @RF00184                                            0184
*                         DO;                                      0185
*                           RBSECPTR=RBLINKB;/* GET THE NEXT RB      */
         LR    RBSECPTR,@11                                        0186
*                           GOTO RBLLOOP;/* CONTINUE THE LOOP        */
         B     RBLLOOP                                             0187
*                         END;                                     0188
*                     END;                                         0189
*                                                                  0189
@RF00184 DS    0H                                                  0190
*                   /*************************************************/
*                   /*                                               */
*                   /* NOW CHECK TO SEE IF THE MODULE HAS ALREADY    */
*                   /* BEEN DUMPED ON BEHALF OF A PREVIOUSLY         */
*                   /* PROCESSED LLE                         @ZA11334*/
*                   /*                                               */
*                   /*************************************************/
*                                                                  0190
*                   REG9=TCBLLS;    /* BEGINNING OF LOAD LIST      0190
*                                                            @ZA11334*/
@RF00170 L     REG9,TCBLLS(,TCBPTR)                                0190
*                   DO WHILE REG9^=LLEPTR;/* CHECK LOAD LIST @ZA11334*/
         B     @DE00191                                            0191
@DL00191 DS    0H                                                  0192
*                     TESTCDE=REG9->LLECDPT;/* CDE TO TEST   @ZA11334*/
         L     TESTCDE,LLECDPT(,REG9)                              0192
*                     IF TESTCDE=CDENTPTR/* IF SAME CDE OR   @ZA11334*/
*                         ×TESTCDE->CDXLMJP=CDENTPTR/* SAME MAJOR  0193
*                                                            @ZA11334*/
*                       THEN        /* SKIP THIS MODULE      @ZA11334*/
         L     @11,CDENTPTR                                        0193
         CR    TESTCDE,@11                                         0193
         BE    @RT00193                                            0193
         C     @11,CDXLMJP(,TESTCDE)                               0193
         BE    @RT00193                                            0193
*                       GOTO NEXTLLE;/* SKIP MODULE          @ZA11334*/
*                     ELSE          /*                       @ZA11334*/
*                       REG9=REG9->LLECHN;/* GET NEXT LLE    @ZA11334*/
         L     REG9,LLECHN(,REG9)                                  0195
*                   END;            /* END DO WHILE..        @ZA11334*/
@DE00191 C     REG9,LLEPTR                                         0196
         BNE   @DL00191                                            0196
*                   CALL SAVEMOD;                                  0197
         BAL   @14,SAVEMOD                                         0197
*                   IF RETCODE^=0   /* IF ERRED                      */
*                     THEN          /* LEAVE WITH                    */
         LTR   RETCODE,RETCODE                                     0198
         BNZ   @RT00198                                            0198
*                     GOTO FREERET; /* BAD CODE                      */
*                 END;                                             0200
*NEXTLLE:                                                          0201
*               LLEPTR=LLECHN;      /* GET NEXT LLE                  */
@RF00168 DS    0H                                                  0201
NEXTLLE  L     @11,LLEPTR                                          0201
         L     @11,LLECHN(,@11)                                    0201
         ST    @11,LLEPTR                                          0201
*               GOTO LLELOOP;       /* CONTINUE THE LLE LOOP         */
         B     LLELOOP                                             0202
*             END;                                                 0203
*         END;                      /* END JPA/LPA PRCSS     @YM03352*/
@RF00163 DS    0H                                                  0205
*                                                                  0205
*       /*************************************************************/
*       /*                                                           */
*       /* THIS SECTION OF CODE DUMPS THE ACTIVE SVC MODULES FOR THE */
*       /* TASK. IF THE CURRENT TASK IS BEING DUMPED, BYPASS SNAP'S  */
*       /* SVRB AND ABEND'S SVRB(IF ABEND CALLED SNAP). IF THE       */
*       /* CURRENT TASK IS NOT BEING DISPLAYED, BEGIN THE RB SEARCH  */
*       /* WITH THE RB CHAINED TO THE TASK BEING DISPLAYED. TO OBTAIN*/
*       /* THE MODULES TO BE PRINTED, A SEARCH OF THE RB QUEUE       */
*       /* ORIGINED IN THE TCB IS MADE (LOCATE PHASE), FOR AN SVRB.  */
*       /* WHEN NO SVRBS ARE LEFT TO TEST, THE LOOP ENDS. THE ADDRESS*/
*       /* OF THE SVRB FOUND IS SAVED (SAVECUR) AS THE POINT TO      */
*       /* SEARCH FROM THE NEXT TIME THROUGH THE LOOP. THE QUEUE IS  */
*       /* THEN RE- SEARCHED FROM THE ABSOLUTE BEGINNIG (RBSAVE) FOR */
*       /* AN SVRB OF A MODULE WITH THE SAME NAME AS PREVIOUSLY      */
*       /* LOCATED. THE ADDRESS RETURNED IS THEN COMPARED WITH THE   */
*       /* CURRENT SVRB (SAVECUR). IF THEY ARE EQUAL, THE MODULE HAS */
*       /* NOT BEEN PRINTED BEFORE, SINCE IT DOES NOT HAVE AN SVRB   */
*       /* EARILER ON THE QUEUE. OTHER- WISE IT WAS PRINTED EARLIER, */
*       /* WHEN THE PREVIOUS RB WAS ENCOUN- TERED. FOR EXAMPLE, IN   */
*       /* THE CASE OF OPEN AND CLOSE A PROBLEM PROGRAM COULD ISSUE  */
*       /* THE SVC AND ITS USER EXIT COULD ISSUE THE SVC. SINCE      */
*       /* OPEN/CLOSE HAVE MULTIPLE EXTENTS, THE DOUBLE SEARCH OF THE*/
*       /* RB QUEUE PREVENTS THE MODULES FROM BEING PRINTED TWICE.   */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0205
*SVCMODS:                                                          0205
*       IF APFLPA='1'B THEN         /* WAS LPA REQUESTED      @Y02705*/
@RF00129 DS    0H                                                  0205
SVCMODS  TM    APFLPA(ABDARPTR),B'00010000'                        0205
         BNO   @RF00205                                            0205
*         DO;                       /* YES,DISPLAY SVC MOD.   @Y02705*/
*           TCBPTR=ABDTCB;          /* INITIALIZE TCB POINTER        */
         L     TCBPTR,ABDTCB(,ABDARPTR)                            0207
*           IF TCBFC^='1'B THEN     /* TASK NOT COMPLETE     @ZA11824*/
         TM    TCBFC(TCBPTR),B'10000000'                           0208
         BO    @RF00208                                            0208
*             DO;                   /* YES...                @ZA11824*/
*               RBSECPTR=TCBRBP;    /* GET RB POINTER FROM TCB       */
         L     RBSECPTR,TCBRBP(,TCBPTR)                            0210
*               IF TCBPTR=ABDCTCB THEN/* IS THIS THE CURRENT TASK    */
         C     TCBPTR,ABDCTCB(,ABDARPTR)                           0211
         BNE   @RF00211                                            0211
*                 DO;               /* YES                           */
*                   RBSECPTR=RBLINK;/* GET RB BEFORE SNAP'S SVRB     */
         L     RBSECPTR,RBLINK(,RBSECPTR)                          0213
*                   IF APFABEND='0'B THEN/* IS ABEND THE CALLER      */
         TM    APFABEND(ABDARPTR),B'00010000'                      0214
         BNZ   @RF00214                                            0214
*                     RBSECPTR=RBLINK;/* GET RB BEFORE ABEND'S SVRB  */
         L     RBSECPTR,RBLINK(,RBSECPTR)                          0215
*                 END;                                             0216
@RF00214 DS    0H                                                  0217
*               RBSAVE=RBSECPTR;    /* SAVE INITIAL RB VALUE         */
@RF00211 ST    RBSECPTR,RBSAVE                                     0217
*NEXTRB:                                                           0218
*               NAMEQ='0'B;         /* INDICATE FIND RB AND ITS NAME */
NEXTRB   NI    NAMEQ,B'01111111'                                   0218
*               CALL FINDRB;        /* FIND NEXT RB THAT IS AN SVRB  */
         BAL   @14,FINDRB                                          0219
*               IF RETCODE^=0 THEN  /* IS THERE ANOTHER RB           */
         LTR   RETCODE,RETCODE                                     0220
         BZ    @RF00220                                            0220
*                 DO;               /* NO                            */
*                   RETCODE=0;      /* SET GOOD RETURN CODE          */
         SLR   RETCODE,RETCODE                                     0222
*                   GOTO FREERET;   /* RETURN TO CALLER              */
         B     FREERET                                             0223
*                 END;                                             0224
*               ELSE                                               0225
*                 DO;                                              0225
@RF00220 DS    0H                                                  0226
*                   SAVECUR=RBSECPTR;/* SAVE CURRENT SVRB ADDRESS    */
         ST    RBSECPTR,SAVECUR                                    0226
*                   NAMEQ='1'B;     /* INDICATE SEARCH FOR NAMES   0227
*                                      EQUAL                         */
         OI    NAMEQ,B'10000000'                                   0227
*                   RBSECPTR=RBSAVE;/* GET BEGINNING OF RB CHAIN     */
         L     RBSECPTR,RBSAVE                                     0228
*                   CALL FINDRB;    /* FIND RB WITH SAME NAME        */
         BAL   @14,FINDRB                                          0229
*                   IF RBSECPTR=SAVECUR THEN/* WAS RB SAME AS BEFORE */
         C     RBSECPTR,SAVECUR                                    0230
         BNE   @RF00230                                            0230
*                     DO;           /* YES, SAVE IT                  */
*                                                                  0231
*                       /*********************************************/
*                       /*                                           */
*                       /* PUT SVC MODULE NAME AND ENTRY POINT IN    */
*                       /* MODULE TABLE                      @G33SPHW*/
*                       /*                                           */
*                       /*********************************************/
*                                                                  0232
*                       CTR=CTR+ONE;/* BUMP MODULE COUNTER   @G33SPHW*/
         LA    @11,1                                               0232
         AH    @11,CTR                                             0232
         STH   @11,CTR                                             0232
*                       IF CTR>LIMIT THEN/* CURRENT TABLE FULL     0233
*                                                            @G33SPHW*/
         C     @11,@CF00120                                        0233
         BNH   @RF00233                                            0233
*                         DO;       /* YES                   @G33SPHW*/
*                           CTR=CTR-1;/* BACKUP TO LAST ENTRY IN   0235
*                                      TABLE                 @G33SPHW*/
         BCTR  @11,0                                               0235
         STH   @11,CTR                                             0235
*                           CALL AD0BTBL;/* OBTAIN NEW TABLE @G33SPHW*/
         BAL   @14,AD0BTBL                                         0236
*                         END;      /* END .. NEW TABLE      @G33SPHW*/
*                       MODSVC(CTR)=ON;/* INDICATE SVC MODULE      0238
*                                                            @G33SPHW*/
@RF00233 DS    0H                                                  0239
*                       MODEXTEN(CTR)='0'B;/* INDICATE NO EXTENT   0239
*                                                            @G33SPHW*/
         L     @11,TABPTR                                          0239
         LH    @08,CTR                                             0239
         MH    @08,@CH00085                                        0239
         ST    @08,@TF00001                                        0239
         ALR   @08,@11                                             0239
         AL    @08,@CF02474                                        0239
         OI    MODSVC-12(@08),B'10000000'                          0239
         NI    MODEXTEN-12(@08),B'10111111'                        0239
*                       MODNAM(CTR)=NAME;/* PUT SVC NAME IN TABLE  0240
*                                      ENTRY                 @G33SPHW*/
         LR    @08,@11                                             0240
         AL    @08,@TF00001                                        0240
         AL    @08,@CF02475                                        0240
         MVC   MODNAM-16(8,@08),NAME                               0240
*                       MODEP(CTR)=ABDBLOCK;/* PUT SVC ADDRESS IN  0241
*                                      TABLE ENTRY           @G33SPHW*/
         L     @08,ABDBLOCK(,ABDARPTR)                             0241
         LR    @06,@11                                             0241
         AL    @06,@TF00001                                        0241
         AL    @06,@CF02476                                        0241
         STCM  @08,15,MODEP-8(@06)                                 0241
*                       MODLEN(CTR)=ABDLENTH;/* PUT SVC LENGTH IN  0242
*                                      TABLE ENTRY           @G33SPHW*/
         L     @08,ABDLENTH(,ABDARPTR)                             0242
         AL    @11,@TF00001                                        0242
         STCM  @08,15,MODLEN-20(@11)                               0242
*                     END;                                         0243
*                   RBSECPTR=SAVECUR;/* RESTORE CURRENT SVRB ADDRESS */
@RF00230 L     RBSECPTR,SAVECUR                                    0244
*                   IF RBTCBNXT='0'B THEN/* ARE THERE MORE RBS       */
         TM    RBTCBNXT(RBSECPTR),B'10000000'                      0245
         BNZ   @RF00245                                            0245
*                     DO;           /* YES                           */
*                       RBSECPTR=RBLINK;/* GET NEXT RB               */
         L     RBSECPTR,RBLINK(,RBSECPTR)                          0247
*                       GOTO NEXTRB;/* CONTINUE RB PROCESSING        */
         B     NEXTRB                                              0248
*                     END;                                         0249
*                 END;                                             0250
@RF00245 DS    0H                                                  0251
*               RETCODE=0;          /* SET RETURN CODE TO 0 EXIT     */
         SLR   RETCODE,RETCODE                                     0251
*             END;                  /* END.. TASK NOT COMPLETE     0252
*                                                            @ZA11824*/
*         END;                      /* END SVC MOD PROCESS           */
@RF00208 DS    0H                                                  0254
*FREERET:                           /* SET UP RETURN CODE            */
*                                                                  0254
*       /*************************************************************/
*       /*                                                           */
*       /* PROCESS THE MODULE TABLE                          @G33SPHW*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  0254
*       SAVRETCD=RETCODE;                                          0254
@RF00205 DS    0H                                                  0254
FREERET  ST    RETCODE,SAVRETCD                                    0254
*       ENTLIMIT=ENTLIMIT+CTR;      /* SAVE ENTRY COUNTER    @G33SPHW*/
         LH    @11,ENTLIMIT                                        0255
         AH    @11,CTR                                             0255
         STH   @11,ENTLIMIT                                        0255
*       IF ABDTABPT^=ZERO THEN      /* MODULE TABLE AVAILABLE      0256
*                                                            @G33SPHW*/
         SLR   @08,@08                                             0256
         C     @08,ABDTABPT(,ABDARPTR)                             0256
         BE    @RF00256                                            0256
*         DO;                       /* YES...OUTPUT THE TABLE      0257
*                                                            @G33SPHW*/
*           IF ENTLIMIT^=0 THEN     /* ANY ENTRIES IN TABLE  @G33SPHW*/
         CR    @11,@08                                             0258
         BE    @RF00258                                            0258
*             DO;                   /* YES...PROCESS TABLE@G33SPHW   */
*               ABDLINEA(1:20)=HDRMSG;/* PUT HEADER MSG IN BUFFER. 0260
*                                                            @G33SPHW*/
         MVC   ABDLINEA(20,ABDARPTR),HDRMSG                        0260
*               PARMPTR=ABDARPTR;   /* POINT R1 TO WORKAREA  @G33SPHW*/
         LR    PARMPTR,ABDARPTR                                    0261
*               CALL IEAVAD11;      /* OUTPUT HEADER         @G33SPHW*/
         L     @15,@CV00077                                        0262
         BALR  @14,@15                                             0262
*                                                                  0263
*               /*****************************************************/
*               /*                                                   */
*               /* SORT MODULE TABLE ENTRIES                 @G33SPHW*/
*               /*                                                   */
*               /*****************************************************/
*                                                                  0263
*               TABPTR=ABDTABPT;    /* FIRST MODULE TABLE ADDRESS  0263
*                                                            @G33SPHW*/
         L     @11,ABDTABPT(,ABDARPTR)                             0263
         ST    @11,TABPTR                                          0263
*               SWAP=ONE;           /* INITIALIZE SWAP SWITCH      0264
*                                                            @G33SPHW*/
         MVI   SWAP,X'01'                                          0264
*               DO WHILE SWAP^=ZERO;/* LOOP UNTIL SORTED     @G33SPHW*/
         B     @DE00265                                            0265
@DL00265 DS    0H                                                  0266
*                 CTR2=2;           /* INITIALIZE TABLE COUNTER    0266
*                                                            @G33SPHW*/
         LA    @11,2                                               0266
         STH   @11,CTR2                                            0266
*                 TABPTR=ABDTABPT;  /* GET ANCHOR TABLE      @G33SPHW*/
         L     @08,ABDTABPT(,ABDARPTR)                             0267
         ST    @08,TABPTR                                          0267
*                 CURPTR=ABDTABPT+8;/* CURRENT ENTRY         @G33SPHW*/
         AL    @08,@CF00076                                        0268
         ST    @08,CURPTR                                          0268
*                 NXTPTR=CURPTR+LENGTH(MODENT);/* NEXT ENTRY IN TABLE
*                                                            @G33SPHW*/
         AL    @08,@CF00085                                        0269
         ST    @08,NXTPTR                                          0269
*                 SWAP=ZERO;        /* INITIALIZE SWAP TO NO CHANGE
*                                                            @G33SPHW*/
         MVI   SWAP,X'00'                                          0270
*                 DO CTR=2 TO ENTLIMIT;/* CHECK ALL TABLE ENTRIES  0271
*                                                            @G33SPHW*/
*                                                                  0271
         B     @DE00271                                            0271
@DL00271 DS    0H                                                  0272
*                   /*************************************************/
*                   /*                                               */
*                   /* SWAP THE CURRENT ENTRY WITH NEXT ENTRY IF NEXT*/
*                   /* ENTRY POINT ADDRESS IS LESS THAN THE CURRENT  */
*                   /* ENTRY POINT ADDRESS.                  @G33SPHW*/
*                   /*                                               */
*                   /*************************************************/
*                                                                  0272
*                   IF NXTPTR->MODADDR</*                    @G33SPHW*/
*                       CURPTR->MODADDR THEN/*               @G33SPHW*/
         L     @11,NXTPTR                                          0272
         L     @08,CURPTR                                          0272
         CLC   MODADDR(4,@11),MODADDR(@08)                         0272
         BNL   @RF00272                                            0272
*                     DO;           /* SWAP NXT AND CURRENT ENTRIES
*                                                            @G33SPHW*/
*                       CURPTR->MODENT=CURPTR->MODENT&&NXTPTR->MODENT;
         XC    MODENT(20,@08),MODENT(@11)                          0274
*                                   /*                       @G33SPHW*/
*                       NXTPTR->MODENT=NXTPTR->MODENT&&CURPTR->MODENT;
         XC    MODENT(20,@11),MODENT(@08)                          0275
*                                   /*                       @G33SPHW*/
*                       CURPTR->MODENT=CURPTR->MODENT&&NXTPTR->MODENT;
         XC    MODENT(20,@08),MODENT(@11)                          0276
*                                   /*                       @G33SPHW*/
*                       SWAP=ONE;   /* INDICATE SWAP MADE    @G33SPHW*/
         MVI   SWAP,X'01'                                          0277
*                     END;          /*                       @G33SPHW*/
*                   ELSE                                           0279
*                     ;             /*                       @G33SPHW*/
@RF00272 DS    0H                                                  0280
*                   CURPTR=NXTPTR;  /* GET NEXT ENTRY        @G33SPHW*/
         L     @11,NXTPTR                                          0280
         ST    @11,CURPTR                                          0280
*                   IF CTR2=LIMIT THEN/* END OF TABLE        @G33SPHW*/
         CLC   CTR2(2),@CH00120                                    0281
         BNE   @RF00281                                            0281
*                     DO;           /* GET NEXT TABLE ADDRESS      0282
*                                                            @G33SPHW*/
*                       TABPTR=TABCHAIN;/* NEXT TABLE ADDRESS      0283
*                                                            @G33SPHW*/
         L     @11,TABPTR                                          0283
         L     @11,TABCHAIN(,@11)                                  0283
         ST    @11,TABPTR                                          0283
*                       NXTPTR=TABPTR+8;/* NEXT ENTRY ADDRESS      0284
*                                                            @G33SPHW*/
         AL    @11,@CF00076                                        0284
         ST    @11,NXTPTR                                          0284
*                       CTR2=0;     /* RESET TABLE ENTRY     @G33SPHW*/
         SLR   @11,@11                                             0285
         STH   @11,CTR2                                            0285
*                     END;          /* END...NEXT TABLE      @G33SPHW*/
*                   ELSE            /* NOT END OF TABLE      @G33SPHW*/
*                     NXTPTR=CURPTR+LENGTH(MODENT);/* NEXT ENTRY IN
*                                      LIST                  @G33SPHW*/
         B     @RC00281                                            0287
@RF00281 LA    @11,20                                              0287
         AL    @11,CURPTR                                          0287
         ST    @11,NXTPTR                                          0287
*                   CTR2=CTR2+1;    /* BUMP TABLE CNT        @G33SPHW*/
@RC00281 LH    @11,CTR2                                            0288
         LA    @11,1(,@11)                                         0288
         STH   @11,CTR2                                            0288
*                 END;              /* END..DO WHILE LIST END      0289
*                                                            @G33SPHW*/
         LA    @11,1                                               0289
         AH    @11,CTR                                             0289
@DE00271 STH   @11,CTR                                             0289
         CH    @11,ENTLIMIT                                        0289
         BNH   @DL00271                                            0289
*               END;                /* END..DO WHILE SWAP    @G33SPHW*/
@DE00265 CLI   SWAP,0                                              0290
         BNE   @DL00265                                            0290
*                                                                  0291
*               /*****************************************************/
*               /*                                                   */
*               /* PROCESS MODULE TABLE                      @G33SPHW*/
*               /*                                                   */
*               /*****************************************************/
*                                                                  0291
*TBLPROC:                           /* START MODULE TABLE PROCESS  0291
*                                                            @G33SPHW*/
*               CTR=1;              /* INITIALIZE COUNTER    @G33SPHW*/
TBLPROC  LA    @11,1                                               0291
         STH   @11,CTR                                             0291
*               TABPTR=ABDTABPT;    /* GET FIRST TABLE ADDRESS     0292
*                                                            @G33SPHW*/
         L     @08,ABDTABPT(,ABDARPTR)                             0292
         ST    @08,TABPTR                                          0292
*               DO CTR2=1 TO ENTLIMIT;/* LOOP THRU MODULE TRACE UNTIL
*                                      ALL ENTRIES PROCESSED @G33SPHW*/
         B     @DE00293                                            0293
@DL00293 DS    0H                                                  0294
*                 ENTRYPTR=ADDR(MODTABL(CTR));/* GET ENTRY POINT OF
*                                      CURRENT               @G33SPHW*/
         LH    @11,CTR                                             0294
         MH    @11,@CH00085                                        0294
         L     ENTRYPTR,TABPTR                                     0294
         AL    ENTRYPTR,@CF02476                                   0294
         LA    ENTRYPTR,MODTABL-8(@11,ENTRYPTR)                    0294
*                 CALL AD0BPRNT;    /* PRINT MODULE          @G33SPHW*/
         BAL   @14,AD0BPRNT                                        0295
*                 CTR=CTR+1;        /* UPDATE TO NEXT ENTRY  @G33SPHW*/
         LA    @11,1                                               0296
         LH    @08,CTR                                             0296
         ALR   @08,@11                                             0296
         STH   @08,CTR                                             0296
*                 IF CTR>LIMIT THEN /* END OF TABLE          @G33SPHW*/
         C     @08,@CF00120                                        0297
         BNH   @RF00297                                            0297
*                   IF TABCHAIN^=0 THEN/* ANOTHER TABLE      @G33SPHW*/
         L     @08,TABPTR                                          0298
         L     @08,TABCHAIN(,@08)                                  0298
         LTR   @08,@08                                             0298
         BZ    @RF00298                                            0298
*                     DO;           /* YES                   @G33SPHW*/
*                       TABPTR=TABCHAIN;/* GET NEXT TABLE ADDRESS  0300
*                                                            @G33SPHW*/
         ST    @08,TABPTR                                          0300
*                       CTR=1;      /* INITIALIZE COUNTER    @G33SPHW*/
         STH   @11,CTR                                             0301
*                     END;          /* END NEXT TABLE        @G33SPHW*/
*                   ELSE            /* EXIT TABLE PROCESS    @G33SPHW*/
*                     GO TO TBLEND; /* EXIT TABLE DONE       @G33SPHW*/
*                 ELSE                                             0304
*                   ;               /* NULL ELSE             @G33SPHW*/
@RF00297 DS    0H                                                  0305
*               END;                /* END..DO WHILE         @G33SPHW*/
         LA    @11,1                                               0305
         AH    @11,CTR2                                            0305
@DE00293 STH   @11,CTR2                                            0305
         CH    @11,ENTLIMIT                                        0305
         BNH   @DL00293                                            0305
*TBLEND:                                                           0306
*               ;                                                  0306
TBLEND   DS    0H                                                  0307
*             END;                  /* END MODULE PRINT      @G33SPHW*/
*                                                                  0308
*           /*********************************************************/
*           /*                                                       */
*           /* RELEASE STORAGE OBTAINED FOR MODULE TABLE     @G33SPHW*/
*           /*                                                       */
*           /*********************************************************/
*                                                                  0308
*CKTBL:                                                            0308
*           TABPTR=ABDTABPT;        /* INIT TABLE POINTER    @G33SPHW*/
@RF00258 DS    0H                                                  0308
CKTBL    L     @11,ABDTABPT(,ABDARPTR)                             0308
         ST    @11,TABPTR                                          0308
*           IF TABCHAIN^=0 THEN     /* MORE THAN ONE TABLE   @G33SPHW*/
         L     @11,TABCHAIN(,@11)                                  0309
         LTR   @11,@11                                             0309
         BZ    @RF00309                                            0309
*             DO;                   /* YES...GET END OF TABLES     0310
*                                                            @G33SPHW*/
*               DO WHILE TABCHAIN^=0;/* LOOP UNTIL END FOUND @G33SPHW*/
         B     @DE00311                                            0311
@DL00311 DS    0H                                                  0312
*                 TABPTR=TABCHAIN;  /* NEXT TABLE ADDRESS    @G33SPHW*/
         L     @11,TABPTR                                          0312
         L     @11,TABCHAIN(,@11)                                  0312
         ST    @11,TABPTR                                          0312
*               END;                /* END DO WHILE          @G33SPHW*/
@DE00311 L     @11,TABPTR                                          0313
         L     @11,TABCHAIN(,@11)                                  0313
         LTR   @11,@11                                             0313
         BNZ   @DL00311                                            0313
*               DO WHILE TABBACK^=0;/* REVERSE CHAIN AND FREE EACH 0314
*                                      TABLE                 @G33SPHW*/
         B     @DE00314                                            0314
@DL00314 DS    0H                                                  0315
*                 R0=TABSZ;         /* LENGTH OF TABLES IN R0      0315
*                                                            @G33SPHW*/
         LA    R0,3780                                             0315
*                 PARMPTR=TABPTR;   /* ADDRESS OF TABLE IN R1      0316
*                                                            @G33SPHW*/
         L     @11,TABPTR                                          0316
         LR    PARMPTR,@11                                         0316
*                 TABPTR=TABBACK;   /* NEXT TABLE            @G33SPHW*/
         L     @11,TABBACK(,@11)                                   0317
         ST    @11,TABPTR                                          0317
*                 FREEAREA=PARMPTR; /* GET TABLE ADDRESS     @G33SPHW*/
         ST    PARMPTR,FREEAREA                                    0318
*                 DO;               /* FREEMAIN(RC)                0319
*                                      LV(R0)A(FREEAREA->I256C)    0319
*                                      SP(253)                       */
*                   RESPECIFY                                      0320
*                    (GPR01F,                                      0320
*                     GPR15F,                                      0320
*                     GPR00F) RESTRICTED;                          0320
*                   GPR01F=0;       /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       0321
*                   GPR15F=1;       /* SET TYPE                      */
         LA    GPR15F,1                                            0322
*                   GPR00F=R0;      /* LENGTH REQUESTED              */
*                   GPR01F=ADDR(FREEAREA->I256C);/* SET REGISTER ONE */
         L     @11,FREEAREA                                        0324
         LR    GPR01F,@11                                          0324
*                   GPR15F=GPR15F+((253)*256);/* SUBPOOL VALUE       */
         AL    GPR15F,@CF02467                                     0325
*                   SVC(120);       /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 0326
*                   RESPECIFY                                      0327
*                    (GPR01F,                                      0327
*                     GPR15F,                                      0327
*                     GPR00F) UNRESTRICTED;                        0327
*                 END;              /* FREEMAIN(RC)                0328
*                                      LV(R0)A(FREEAREA->I256C)    0328
*                                                             SP(253)
*                                      FREE TABLE            @G33SPHW*/
*               END;                /* END DO WHILE TABBACK  @G33SPHW*/
@DE00314 L     @11,TABPTR                                          0329
         L     @11,TABBACK(,@11)                                   0329
         LTR   @11,@11                                             0329
         BNZ   @DL00314                                            0329
*             END;                  /* END MULTI TABLES      @G33SPHW*/
*         END;                      /* END..NO PROCESS       @G33SPHW*/
@RF00309 DS    0H                                                  0332
*       RETCODE=SAVRETCD;           /* RESTORE RETURN CODE   @G33SPHW*/
@RF00256 L     RETCODE,SAVRETCD                                    0332
*       SAVERET=RETCODE;                                           0333
         LR    SAVERET,RETCODE                                     0333
*       PARMPTR=ADDR(ABDASIZE);     /* SET UP FREEMAIN LIST REG      */
         LA    PARMPTR,ABDASIZE(,ABDARPTR)                         0334
*       ABDAAREA=SAVEPTR;           /* SET UP ADDRESS TO FREE        */
         ST    SAVEPTR,ABDAAREA(,ABDARPTR)                         0335
*       SAVEPTR=SAVEPTR->PRESAPTR;  /* SET UP PREVIOUS SAVE AREA     */
         L     SAVEPTR,PRESAPTR(,SAVEPTR)                          0336
*       NEXSAPTR=0;                 /* CLEAR POINTER TO AREA TO BE 0337
*                                      FREED                         */
         SLR   @11,@11                                             0337
         ST    @11,NEXSAPTR(,SAVEPTR)                              0337
*       GENERATE;                                                  0338
         FREEMAIN E,LV=@ENDDATD-@DATD+72+3780,                         *
               SP=253,                                                 *
               A=ABDGMA(ABDARPTR),                                     *
               MF=(E,(1))
*       RETCODE=SAVERET;            /* SET UP RETURN CODE            */
         LR    RETCODE,SAVERET                                     0339
*     END;                          /* END VAD0B PROCESSING          */
*                                                                  0340
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SUBROUTINE DUMPS A MODULE, AND IS PASSED THE CDE POINTER */
*   /* FROM THE LLE OR RB LOOPS IN THE JPA AND LPA PROCESSING        */
*   /* SECTION. IF THE MODULE HAS MULTIPLE EXTENTS A MESSAGE IS      */
*   /* PRINTED FOR EACH EXTENT. OTHERWISE THE SINGLE EXTENT MESSAGE  */
*   /* IS PRINTED. FORMET IS USED TO PRINT THE MODULE. ANY ERROR     */
*   /* CONDITIONS ARE PASSED BACK TO THE CALLER IN REGISTER 15.      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0341
*SAVEMOD:                                                          0341
*   PROCEDURE OPTIONS(DONTSAVE(15));                               0341
*                                                                  0341
         B     @PB00002                                            0341
SAVEMOD  ST    @14,@SA00002                                        0341
         STM   @00,@12,@SA00002+4                                  0341
*   /*****************************************************************/
*   /*                                                               */
*   /* EXTENT LIST MAP                                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0342
*   DCL                                                            0342
*     1 XTLSTA BASED(XTLSTPTR),     /* EXTENT LIST MAPPING           */
*      2 EXLLNTH FIXED(31),         /* SIZE OF EXTENT LIST           */
*      2 EXNRFAC FIXED(31),         /* NUMBER OF EXTENTS             */
*      2 XLSTELL(*) FIXED(31),      /* VARIABLE NUBER OF LENGTHS AND
*                                      ADDRESSES                     */
*       3 XLSTELLA CHAR(1),         /* DUMMY LABEL                   */
*       3 XLSTELLB PTR(24);         /* 3 BYTE REFERENCE FOR LENGTH   */
*                                                                  0342
*   /*****************************************************************/
*   /*                                                               */
*   /* OTHER DECLARES                                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0343
*   DCL                                                            0343
*     CSCOUNT FIXED(15);            /* COUNT OF CSECT AS THEY GO     */
*   DCL                                                            0344
*     ABDXL PTR(31) REG(3)          /* INDEX TO EXTENT ADDRESS       */
*         RESTRICTED;                                              0344
*   DCL                                                            0345
*     XTCOUNT FIXED(31) REG(4)      /* INDEX FOR XTLST LOOP          */
*         RESTRICTED;                                              0345
*   DCL                                                            0346
*     XTFLGS CHAR(1)                /* FLAG BYTE IN EXTENT LIST      */
*         BASED(ADDR(ABDLENTH));    /* CLEARED TO ZERO SO LENGTH IS
*                                      CORRECT                       */
*/*                                                            YM2435*/
*                                                                  0347
*   IF CDMIN='1'B                   /* IF MINOR GET THE MAJOR CDE    */
*     THEN                                                         0347
         L     @11,CDENTPTR                                        0347
         TM    CDMIN(@11),B'00000100'                              0347
         BNO   @RF00347                                            0347
*     CDENTPTR=CDXLMJP;                                            0348
*                                                                  0348
         L     @11,CDXLMJP(,@11)                                   0348
         ST    @11,CDENTPTR                                        0348
*/*                                                            YM2435*/
*                                                                  0349
*   IF CDNIP='1'B                   /* IF THE MODULE IS IN LPA       */
*     THEN                                                         0349
@RF00347 L     @11,CDENTPTR                                        0349
         TM    CDNIP(@11),B'10000000'                              0349
         BO    @RT00349                                            0349
*     GOTO TESTLPA;                 /* TEST IF LPA WAS REQUESTED     */
*/*                                                            YM2435*/
*                                                                  0351
*   ELSE                            /* OTHERWISE IS JPA      @ZA02588*/
*     GOTO TESTJPA;                 /* TEST FOR JPA REQ.     @ZA02588*/
         B     TESTJPA                                             0351
*TESTJPA:                           /* TEST IF JPA                   */
*   IF APFJPA='1'B                  /* WAS REQUESTED                 */
*     THEN                          /* PRINT THE JPA MODULE          */
TESTJPA  TM    APFJPA(ABDARPTR),B'00001000'                        0352
         BO    @RT00352                                            0352
*     GO TO DOIT;                                                  0353
*   ELSE                                                           0354
*     GOTO DONE;                    /* SKIP PRINTING MOD             */
         B     DONE                                                0354
*TESTLPA:                           /* LPA CHECK IF TO BE PRINTED    */
*   IF APFLPA='1'B THEN             /* PRINT THE LPA MODULE          */
TESTLPA  TM    APFLPA(ABDARPTR),B'00010000'                        0355
         BNO   @RF00355                                            0355
*     DO;                                                          0356
*DOIT:                                                             0357
*       CSCOUNT=1;                  /* SET THE CSECT COUNT TO 1      */
DOIT     LA    @11,1                                               0357
         STH   @11,CSCOUNT                                         0357
*       PARMPTR=ABDARPTR;           /* INITIALIZE ABDAREA REG FOR  0358
*                                      CALLS TO SUBROUTINES          */
         LR    PARMPTR,ABDARPTR                                    0358
*       XTLSTPTR=CDXLMJP;           /* PICK UP XTENT LIST POINTER  0359
*                                      FROM MAJOR CDE                */
         L     @08,CDENTPTR                                        0359
         L     @06,CDXLMJP(,@08)                                   0359
         ST    @06,XTLSTPTR                                        0359
*       IF CDXLE='0'B×              /* IS EXTENT LIST VALID@YM07299  */
*           XTLSTPTR=0              /* IF 0 MOD NOT FOUND    @YM07299*/
*         THEN                                                     0360
         TM    CDXLE(@08),B'00100000'                              0360
         BZ    @RT00360                                            0360
         LTR   @06,@06                                             0360
         BZ    @RT00360                                            0360
*         GOTO DONE;                /* DISPLAYED             @YM02648*/
*       XTCOUNT=EXNRFAC;            /* PUT NUMBER OF EXTENTS INTO  0362
*                                      WORK REGISTER                 */
         L     XTCOUNT,EXNRFAC(,@06)                               0362
*       ABDXL=XTCOUNT;              /* ABDXL CONTAINS THE NUMBER OF
*                                      BYTES OF LENGTH FIELDS        */
         LR    ABDXL,XTCOUNT                                       0363
*       ABDXL=ABDXL*4;              /* ABDXL NOW POINTS TO FIRST   0364
*                                      ADDRESS IN XTLST WHEN USED AS
*                                      A POINTER TO XLSTELL          */
         SLL   ABDXL,2                                             0364
*       ABDXL=ABDXL+XTLSTPTR;                                      0365
         ALR   ABDXL,@06                                           0365
*       IF XTCOUNT=1                /* CHECK FOR VALID EXTENTS       */
*         THEN                      /* SET UP SINGLE CSECT MSG       */
         CR    XTCOUNT,@11                                         0366
         BNE   @RF00366                                            0366
*         DO;                                                      0367
*           GO TO JUMPMOVE;                                        0368
         B     JUMPMOVE                                            0368
*         END;                                                     0369
*                                                                  0369
*       /*************************************************************/
*       /*                                                           */
*       /* FOR EACH EXTENT PRINT THE DESCRIBED CORE                  */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0370
*       DO XTCOUNT=XTCOUNT TO 1 BY-1;                              0370
*                                                                  0370
@RF00366 B     @DE00370                                            0370
@DL00370 DS    0H                                                  0371
*         /***********************************************************/
*         /*                                                         */
*         /* SET UP THE MUTIPLE CSECT MESSAGE AND PRINT IT 'EXTENT'  */
*         /* 'NNNN' IF LENGTH OF BLOCK ZERO DONT PRINT IT            */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0371
*JUMPMOVE:                                                         0371
*         IF XLSTELLB(1)=0 THEN                                    0371
JUMPMOVE L     @11,XTLSTPTR                                        0371
         L     @11,XLSTELLB-1(,@11)                                0371
         LA    @11,0(,@11)                                         0371
         LTR   @11,@11                                             0371
         BZ    @RT00371                                            0371
*           GO TO SKIPPT;                                          0372
*         ABDBLOCK=ABDXL->XLSTELL(1);                              0373
         L     @08,XLSTELL(,ABDXL)                                 0373
         ST    @08,ABDBLOCK(,ABDARPTR)                             0373
*         ABDLENTH=XLSTELLB(1);                                    0374
*                                                                  0374
         ST    @11,ABDLENTH(,ABDARPTR)                             0374
*         /***********************************************************/
*         /*                                                         */
*         /* PUT MODULE IN MODULE TABLE                      @G33SPHW*/
*         /*                                                         */
*         /***********************************************************/
*                                                                  0375
*         CTR=CTR+ONE;              /* BUMP MODULE COUNTER   @G33SPHW*/
         LA    @11,1                                               0375
         AH    @11,CTR                                             0375
         STH   @11,CTR                                             0375
*         IF CTR>LIMIT THEN         /* CURRENT TABLE FULL    @G33SPHW*/
         C     @11,@CF00120                                        0376
         BNH   @RF00376                                            0376
*           DO;                     /* YES                   @G33SPHW*/
*             CTR=CTR-1;            /* BACKUP TO LAST ENTRY  @G33SPHW*/
         BCTR  @11,0                                               0378
         STH   @11,CTR                                             0378
*             CALL AD0BTBL;         /* OBTAIN NEW TABLE      @G33SPHW*/
         BAL   @14,AD0BTBL                                         0379
*           END;                    /* END...ANOTHER TABLE@G33SPHW   */
*         IF EXNRFAC>ONE THEN       /* MODULE EXTENT > ONE@G33SPHW   */
@RF00376 L     @11,XTLSTPTR                                        0381
         L     @11,EXNRFAC(,@11)                                   0381
         C     @11,@CF00089                                        0381
         BNH   @RF00381                                            0381
*           DO;                     /* YES                   @G33SPHW*/
*             MODEXTEN(CTR)=ON;     /* INDICATE EXTENT ENTRY @G33SPHW*/
         L     @11,TABPTR                                          0383
         LH    @08,CTR                                             0383
         MH    @08,@CH00085                                        0383
         ST    @08,@TF00001                                        0383
         ALR   @08,@11                                             0383
         AL    @08,@CF02474                                        0383
         OI    MODEXTEN-12(@08),B'01000000'                        0383
*             MODXNUM(CTR)=CSCOUNT;                                0384
         LH    @08,CSCOUNT                                         0384
         AL    @11,@TF00001                                        0384
         AL    @11,@CF02478                                        0384
         STCM  @08,3,MODXNUM-14(@11)                               0384
*           END;                    /* END...EXTENT ENTRY    @G33SPHW*/
*         ELSE                      /* NO EXTENTS            @G33SPHW*/
*           MODEXTEN(CTR)='0'B;     /* SET EXTENT OFF        @G33SPHW*/
         B     @RC00381                                            0386
@RF00381 LH    @11,CTR                                             0386
         MH    @11,@CH00085                                        0386
         L     @08,TABPTR                                          0386
         ALR   @08,@11                                             0386
         AL    @08,@CF02474                                        0386
         NI    MODEXTEN-12(@08),B'10111111'                        0386
*         MODSVC(CTR)='0'B;         /* SET SVC MOD OFF       @G33SPHW*/
@RC00381 L     @11,TABPTR                                          0387
         LH    @08,CTR                                             0387
         MH    @08,@CH00085                                        0387
         ST    @08,@TF00001                                        0387
         ALR   @08,@11                                             0387
         AL    @08,@CF02474                                        0387
         NI    MODSVC-12(@08),B'01111111'                          0387
*         MODNAM(CTR)=CDNAME;       /* PUT MODULE NAME IN TABLE    0388
*                                                            @G33SPHW*/
         LR    @08,@11                                             0388
         AL    @08,@TF00001                                        0388
         AL    @08,@CF02475                                        0388
         L     @06,CDENTPTR                                        0388
         MVC   MODNAM-16(8,@08),CDNAME(@06)                        0388
*         MODEP(CTR)=ABDBLOCK;      /* PUT MODULE ADDRESS IN TABLE 0389
*                                                            @G33SPHW*/
         L     @08,ABDBLOCK(,ABDARPTR)                             0389
         LR    @06,@11                                             0389
         AL    @06,@TF00001                                        0389
         AL    @06,@CF02476                                        0389
         STCM  @08,15,MODEP-8(@06)                                 0389
*         MODLEN(CTR)=ABDLENTH;     /* PUT MODULE LENGTH IN TABLE  0390
*                                                            @G33SPHW*/
         L     @08,ABDLENTH(,ABDARPTR)                             0390
         AL    @11,@TF00001                                        0390
         STCM  @08,15,MODLEN-20(@11)                               0390
*SKIPPT:                            /* IF ERROR RETURN IMMEDIATELY   */
*                                                                  0391
*         /***********************************************************/
*         /*                                                         */
*         /* INCREMENT COUNT OF CSECTS                               */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0391
*         CSCOUNT=CSCOUNT+1;                                       0391
*                                                                  0391
SKIPPT   LH    @11,CSCOUNT                                         0391
         LA    @11,1(,@11)                                         0391
         STH   @11,CSCOUNT                                         0391
*         /***********************************************************/
*         /*                                                         */
*         /* GET NEXT LENGTH                                         */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0392
*         XTLSTPTR=XTLSTPTR+4;                                     0392
*                                                                  0392
         LA    @11,4                                               0392
         L     @08,XTLSTPTR                                        0392
         ALR   @08,@11                                             0392
         ST    @08,XTLSTPTR                                        0392
*         /***********************************************************/
*         /*                                                         */
*         /* GET NEXT ADDRESS                                        */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0393
*         ABDXL=ABDXL+4;                                           0393
         ALR   ABDXL,@11                                           0393
*       END;                        /* CONTINUE LOOP UNTIL DONE      */
         BCTR  XTCOUNT,0                                           0394
@DE00370 LTR   XTCOUNT,XTCOUNT                                     0394
         BP    @DL00370                                            0394
*     END;                          /* END OF EXTENT LIST PROCESS    */
*DONE:                              /* SET RETURN CODE = 0           */
*   RETCODE=0;                                                     0396
@RF00355 DS    0H                                                  0396
DONE     SLR   RETCODE,RETCODE                                     0396
*BAD:                               /* RESTORE RETURN REGISTERS      */
*   END SAVEMOD;                    /* END OF SUBROUTINE TO PRINT  0397
*                                      MODULES                       */
@EL00002 DS    0H                                                  0397
@EF00002 DS    0H                                                  0397
@ER00002 L     @14,@SA00002                                        0397
         LM    @00,@12,@SA00002+4                                  0397
         BR    @14                                                 0397
@PB00002 DS    0H                                                  0398
*   GEN(EJECT);                                                    0398
*                                                                  0398
         EJECT
*   /*****************************************************************/
*   /*                                                               */
*   /* FINDRB LOCATES SVRBS. IF ENTERED TO LOCATE AN SVRB            */
*   /* (RBSECPTR=INPUT RB, NAMEQ=0), THE NAME OF THE SVC (NAME), THE */
*   /* ADDRESS OF THE SVC (ABDBLOCK), THE LENGTH OF THE SVC          */
*   /* (ABDLENGTH) AND A CODE OF 0 IN REG 15 ARE RETURNED TO THE     */
*   /* CALLER, IF ANOTHER SVRB IS FOUND ON THE CHAIN. OTHERWISE, A   */
*   /* RETURN CODE OF 4 IS RETURNED IN REG 15. IF ENTERED TO SEARCH  */
*   /* FOR AN SVRB WITH NAME EQUAL TO INPUT NAME, (RBSECPTR=INPUT RB,*/
*   /* NAME=NAME OF SVC TO SEARCH FOR, NAMEQ=1), THE ADDRESS OF THE  */
*   /* FOUND RB (RBSECPTR), AND A CODE OF ZERO ARE RETURNED. IF THE  */
*   /* NAMED SVC IS NOT FOUND, A CODE OF FOUR IS RETURNED IN REG 15. */
*   /* THIS CODE IS IGNORED IN MAIN- LINE SINCE THE SVRB MUST HAVE   */
*   /* FOUND DURING THE LOCATE PHASE OF THE SEARCH, AND THEN MISSED  */
*   /* IN THE NAME PHASE. THE NAME (NAME) IS PRESERVED OVER THE CALL.*/
*   /* IN EFFECT THE MODULE WILL BE SKIPPED UPON RETURN TO THE       */
*   /* MAINLINE, WITH NO LOGICAL EFFECT ON THE FLOW OF THE CONTROL,  */
*   /* SINCE THE LOOP WILL CONTINUE AT THE CURRENT RB.               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0399
*FINDRB:                                                           0399
*   PROC OPTIONS(NOSAVE(4,15));                                    0399
         B     @PB00003                                            0399
FINDRB   ST    @14,@SA00003                                        0399
         STM   @00,@03,@SA00003+4                                  0399
         STM   @05,@12,@SA00003+20                                 0399
*RBLOOP:                                                           0400
*   IF RBFTP^='110'B THEN           /* IS THIS AN SVRB               */
RBLOOP   TM    RBFTP(RBSECPTR),B'11000000'                         0400
         BNO   @RT00400                                            0400
         TM    RBFTP(RBSECPTR),B'00100000'                         0400
         BNZ   @RT00400                                            0400
*     GOTO ENDLOOP;                 /* NO                            */
*   IF RBPMSVRB='1'B THEN           /* IS IT PGM MGR SVRB    @ZA10811*/
         TM    RBPMSVRB(RBSECPTR),B'00000001'                      0402
         BO    @RT00402                                            0402
*     GOTO ENDLOOP;                 /* YES SKIP ITS RB       @ZA10811*/
*/*   THE FOLLOWING SECTION OF CODE DETERMINES THE TYPE OF SVRB.     */
*/*   BASED ON RBTRSVRB AND RBCDE.                                   */
*/*                                                                  */
*/*    RBTRSVRB: RBCDE:       SVRB TYPE:                             */
*/*       0        0          TYPE 2 SVC- RESIDES IN NUCLEUS, IGNORE */
*/*       0      ADDR OF CDE NON FIRST LOAD OF TYPE 4 SVC- RESIDES   */
*/*                           IN FIXED OR MODIFIED LPA               */
*/*       1        0          TYPE 3 OR FIRST LOAD OF TYPE 4 SVC-    */
*/*                           RESIDES IN FIXED, MODIFIED OR PAGED    */
*/*                           LPA                                    */
*/*       1      ADDR OF LPDE NON FIRST LOAD OF TYPE 4 SVC- RESIDES  */
*/*                           IN PAGED LPA                           */
*/*                                                                  */
*                                                                  0404
*   IF RBTRSVRB='1'B THEN           /* IS THIS A TYPE 3 OR 4 SVRB    */
         TM    RBTRSVRB(RBSECPTR),B'00010000'                      0404
         BNO   @RF00404                                            0404
*     DO;                           /* YES, DETERMINE RESIDENCE      */
*       LPDEPTR=RBCDE1;             /* GET LPDE PTR          @ZA05484*/
         L     @11,RBCDE1-1(,RBSECPTR)                             0406
         LA    @11,0(,@11)                                         0406
         ST    @11,LPDEPTR                                         0406
*       IF LPDEPTR=0 THEN           /* IS THIS FIRST LOAD OF TYPE 3
*                                      OR TYPE 4                     */
         LTR   @11,@11                                             0407
         BNZ   @RF00407                                            0407
*         DO;                       /* YES                           */
*                                                                  0408
*           /*********************************************************/
*           /*                                                       */
*           /* THE NAME OF THE SVC MUST BE GENERATED FROM THE        */
*           /* INTERRUPT CODE IN THE NEXT CHAINED RB. IF LOCATE PHASE*/
*           /* IEAQCDSR AND/ OR IEAVVMSR ARE CALLED TO OBTAIN THE    */
*           /* LPDE ADDRESS FOR THE GEN- ERATED NAME. IF THE LPDE IS */
*           /* NOT FOUND, THE SEARCH CONTINUES AT THE NEXT RB. IF    */
*           /* THIS IS A NAME SEARCH, THIS GENERATED NAME IS COMPARED*/
*           /* TO THE INPUT NAME, AND IF EQUAL THE SVRB ADDRESS IS   */
*           /* RETURNED. OTHERWISE THE SEARCH CONTINUES AT THE NEXT  */
*           /* RB.                                                   */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0409
*           NAMERT=RBLINK;          /* PICK UP NEXT RB ADDRESS       */
         L     NAMERT,RBLINK(,RBSECPTR)                            0409
*           RFY                                                    0410
*             RBSECT BASED(NAMERTPT);                              0410
*           RFY                                                    0411
*             RBPREFIX BASED(NAMERTPT-64);                         0411
*           NAMERT=RBINTCOA;        /* GET INTERRUPT CODE            */
         LR    @11,NAMERTPT                                        0412
         BCTR  @11,0                                               0412
         SLR   @08,@08                                             0412
         IC    @08,RBINTCOA-63(,@11)                               0412
         LR    NAMERT,@08                                          0412
*           RFY                                                    0413
*             RBSECT BASED(RBSECPTR);                              0413
*           RFY                                                    0414
*             RBPREFIX BASED(RBSECPTR-64);                         0414
*           GEN(CVD NAMERT,UNPKFLD);/* CONVERT TO DECIMAL            */
         CVD NAMERT,UNPKFLD
*           GEN(UNPK UNBYTE1(3),UNBYTE2(2));/* UNPACK IT             */
         UNPK UNBYTE1(3),UNBYTE2(2)
*           LASTBYTE=LASTBYTE×'F0'X;/* CLEAR SIGN IN ZONE            */
         OI    LASTBYTE,X'F0'                                      0417
*           LASTBYTE=LASTBYTE&'CF'X;/* MAKE ZONE A C                 */
         NI    LASTBYTE,X'CF'                                      0418
*           UNPKFLD(1:5)=IGCMSG;    /* MOVE IN IGC00                 */
         MVC   UNPKFLD(5),IGCMSG                                   0419
*           IF NAMEQ='1'B THEN      /* IS SEARCH FOR EQUAL NAMES     */
         TM    NAMEQ,B'10000000'                                   0420
         BNO   @RF00420                                            0420
*             DO;                   /* YES                           */
*               IF NAME=UNPKFLD THEN/* ARE NAMES EQUAL               */
         CLC   NAME(8),UNPKFLD                                     0422
         BE    @RT00422                                            0422
*                 GOTO FOUNDIT;     /* YES                           */
*               ELSE                                               0424
*                 GOTO ENDLOOP;     /* NO, CHECK FOR MORE RBS        */
         B     ENDLOOP                                             0424
*             END;                                                 0425
*                                                                  0425
*           /*********************************************************/
*           /*                                                       */
*           /* SEARCH THE LINK PACK QUEUE                            */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0426
*           RFY                                                    0426
*             NAMELFT RSTD;                                        0426
@RF00420 DS    0H                                                  0427
*           NAMERTPT=ADDR(UNPKFLD); /* GET ADDR OF NAME FIELD        */
         LA    NAMERTPT,UNPKFLD                                    0427
*           CALL CDSEARCH;          /* SEARCH THE LPAQ               */
         BAL   @14,CDSEARCH                                        0428
*           IF RETCODE=0 THEN       /* IF CDE FOUND, USE IT AS IF    */
         LTR   RETCODE,RETCODE                                     0429
         BZ    @RT00429                                            0429
*             GOTO CDEFOUND;        /* IT WERE POINTED TO BY THE   0430
*                                      RBCDE FIELD. OTHERWISE PRE- 0430
*                                      PARE FOR DIRECTORY SEARCH     */
*           NAMELFT=UNPKFLD(1:4);   /* GET LEFT HALF OF NAME IN R1   */
         ICM   NAMELFT,15,UNPKFLD                                  0431
*           NAMERT=UNPKFLD(5:8);    /* GET RIGHT HALF OF NAME IN R0  */
         ICM   NAMERT,15,UNPKFLD+4                                 0432
*           CALL IEAVVMSR;          /* SEARCH DIRECTORY              */
         BAL   @14,IEAVVMSR                                        0433
*           LPDEPTR=NAMELFT;        /* GET LPDE ADDRESS IF FOUND     */
         ST    NAMELFT,LPDEPTR                                     0434
*           IF RETCODE=0 THEN       /* WAS LPDE FOUND                */
         LTR   RETCODE,RETCODE                                     0435
         BZ    @RT00435                                            0435
*             GOTO GETLPDE;         /* YES                           */
*           ELSE                                                   0437
*             GOTO ENDLOOP;         /* NO, CHECK FOR MORE RBS        */
         B     ENDLOOP                                             0437
*         END;                                                     0438
*                                                                  0438
*       /*************************************************************/
*       /*                                                           */
*       /* IF THIS IN A NAME SEARCH, THE NAME IN THE LPDE IS COMPARED*/
*       /* TO THE INPUT NAME, AND THE ADDRESS OF THE SVRB IS RETURNED*/
*       /* IF THE NAMES ARE EQUAL. OTHERWISE THE SEARCH CONTINUES AT */
*       /* THE NEXT RB. IF LOCATE WAS SPECIFIED, THE NAME FROM THE   */
*       /* LPDE IS RE- TURNED. IF THE LPDE IS MINOR, THE MAJOR LPDE  */
*       /* IS OBTAINED AND THE ADDRESS AND LENGTH OF THE SVC ARE     */
*       /* OBTAINED FROM IT. IF THE LPDE IS NOT FOUND, THE QUEUE     */
*       /* SEARCHED FOR MORE SVRBS.                                  */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0439
*       IF NAMEQ='1'B THEN          /* IS THIS A NAME SEARCH         */
@RF00407 TM    NAMEQ,B'10000000'                                   0439
         BNO   @RF00439                                            0439
*         DO;                       /* YES                           */
*           IF LPDENAME=NAME THEN   /* ARE NAMES EQUAL               */
         L     @11,LPDEPTR                                         0441
         CLC   LPDENAME(8,@11),NAME                                0441
         BE    @RT00441                                            0441
*             GOTO FOUNDIT;         /* YES                           */
*           ELSE                                                   0443
*             GOTO ENDLOOP;         /* NO, CONTINUE SEARCH           */
         B     ENDLOOP                                             0443
*         END;                                                     0444
*GETLPDE:                                                          0445
*       LPDEOLD=LPDEPTR;            /* SAVE OVER MASOR SEARCH        */
@RF00439 DS    0H                                                  0445
GETLPDE  L     @11,LPDEPTR                                         0445
         ST    @11,LPDEOLD                                         0445
*       IF LPDEMIN='1'B THEN        /* IF MINOR GET MAJOR            */
         TM    LPDEMIN(@11),B'00000100'                            0446
         BNO   @RF00446                                            0446
*         DO;                                                      0447
*           NAMELFT=LPDEXTLN;       /* GET LEFT HALF OF NAME         */
         L     NAMELFT,LPDEXTLN(,@11)                              0448
*           NAMERT=LPDEXTAD;        /* GET RIGHT HALF OF NAME        */
         L     NAMERT,LPDEXTAD(,@11)                               0449
*           CALL IEAVVMSR;          /* SEARCH DIRECTORY              */
         BAL   @14,IEAVVMSR                                        0450
*           IF RETCODE^=0 THEN      /* WAS LPDE FOUND                */
         LTR   RETCODE,RETCODE                                     0451
         BNZ   @RT00451                                            0451
*             GOTO ENDLOOP;         /* NO, CONTINUE SEARCH           */
*           LPDEPTR=NAMELFT;        /* GET MAJOR LPDE ADDRESS        */
         ST    NAMELFT,LPDEPTR                                     0453
*           RFY                                                    0454
*             NAMELFT UNRSTD;                                      0454
*         END;                                                     0455
*       ABDBLOCK=LPDEXTAD;          /* SET UP ADDRESS FROM MAJOR     */
@RF00446 L     @11,LPDEPTR                                         0456
         L     @08,LPDEXTAD(,@11)                                  0456
         ST    @08,ABDBLOCK(,ABDARPTR)                             0456
*       ABDLENTH=LPDEXTLN;          /* SET UP LENGTH FROM MAJOR      */
         L     @11,LPDEXTLN(,@11)                                  0457
         ST    @11,ABDLENTH(,ABDARPTR)                             0457
*       LPDEPTR=LPDEOLD;            /* GET OLD LPDE POINTER FOR NME  */
         L     @11,LPDEOLD                                         0458
         ST    @11,LPDEPTR                                         0458
*       NAME=LPDENAME;              /* GET NAME                      */
         MVC   NAME(8),LPDENAME(@11)                               0459
*       GOTO FOUNDIT;               /* RETURN                        */
         B     FOUNDIT                                             0460
*     END;                                                         0461
*   CDENTPTR=RBCDE1;                /* GET POINTER TO CDE    @ZA05484*/
@RF00404 L     @11,RBCDE1-1(,RBSECPTR)                             0462
         LA    @11,0(,@11)                                         0462
         ST    @11,CDENTPTR                                        0462
*   IF CDENTPTR=0 THEN              /* IS MODULE IN NUCLEUS          */
         LTR   @11,@11                                             0463
         BZ    @RT00463                                            0463
*     GOTO ENDLOOP;                 /* YES, SELECT NEXT RB           */
*                                                                  0464
*   /*****************************************************************/
*   /*                                                               */
*   /* IF THIS IS A NAME SEARCH THE NAME IN THE CDE IS COMPARED TOTHE*/
*   /* INPUT NAME. IF EQUAL THE SVRB ADDRESS IS RETURNED TO THE      */
*   /* CALLER, OTHERWISE THE SEARCH CONTINUES AT THE NEXT RB. IF IN  */
*   /* LOCATE MODE THE NAME IS RETURNED FROME THE CDE (IN NAME). THE */
*   /* ADDRESS AND LENGTH ARE FOUND IN THE EXTENT LIST CHAINED TO THE*/
*   /* MAJOR CDE FOR THE MODULE.                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0465
*   IF NAMEQ^='1'B THEN             /* IF THIS A NAME SEARCH         */
         TM    NAMEQ,B'10000000'                                   0465
         BO    @RF00465                                            0465
*     DO;                           /* NO, SET RETURN PARAMETERS     */
*CDEFOUND:                                                         0467
*       NAME=CDNAME;                /* GET NAME FROM CDE             */
CDEFOUND L     @11,CDENTPTR                                        0467
         MVC   NAME(8),CDNAME(@11)                                 0467
*       IF CDMIN='1'B THEN          /* IS THIS A MINOR CDE           */
         TM    CDMIN(@11),B'00000100'                              0468
         BNO   @RF00468                                            0468
*         CDENTPTR=CDXLMJP;         /* YES, GET MAJOR CDE POINTER    */
         L     @11,CDXLMJP(,@11)                                   0469
         ST    @11,CDENTPTR                                        0469
*       XTLSTPTR=CDXLMJP;           /* GET EXTENT LIST POINTER     0470
*                                                            @ZA05484*/
@RF00468 L     @11,CDENTPTR                                        0470
         L     @08,CDXLMJP(,@11)                                   0470
         ST    @08,XTLSTPTR                                        0470
*       IF CDXLE='0'B×              /* IS EXTENT LIST VALID@YM07299  */
*           XTLSTPTR=0              /* IF 0 MOD NOT FOUND    @YM07299*/
*         THEN                                                     0471
         TM    CDXLE(@11),B'00100000'                              0471
         BZ    @RT00471                                            0471
         LTR   @08,@08                                             0471
         BZ    @RT00471                                            0471
*         GOTO ENDLOOP;             /* DISPLAYED             @YM07299*/
*       ABDBLOCK=XTLMSBAD;          /* GET ADDRESS OF MODULE         */
         L     @11,XTLMSBAD-1(,@08)                                0473
         LA    @11,0(,@11)                                         0473
         ST    @11,ABDBLOCK(,ABDARPTR)                             0473
*       ABDLENTH=XTLMSBLN;          /* GET LENGTH OF MODULE          */
         L     @11,XTLMSBLN-1(,@08)                                0474
         LA    @11,0(,@11)                                         0474
         ST    @11,ABDLENTH(,ABDARPTR)                             0474
*       GOTO FOUNDIT;               /* RETURN WITH CODE OF 0         */
         B     FOUNDIT                                             0475
*     END;                                                         0476
*   IF CDNAME=NAME THEN             /* ARE NAMES EQUAL               */
@RF00465 L     @11,CDENTPTR                                        0477
         CLC   CDNAME(8,@11),NAME                                  0477
         BNE   @RF00477                                            0477
*     DO;                           /* YES                           */
*FOUNDIT:                                                          0479
*       RETCODE=0;                  /* SET RETURN CODE               */
FOUNDIT  SLR   RETCODE,RETCODE                                     0479
*     END;                                                         0480
*   ELSE                                                           0481
*     DO;                                                          0481
         B     @RC00477                                            0481
@RF00477 DS    0H                                                  0482
*ENDLOOP:                                                          0482
*       IF RBTCBNXT^='1'B THEN      /* IS THIS THE LAST RB           */
ENDLOOP  TM    RBTCBNXT(RBSECPTR),B'10000000'                      0482
         BO    @RF00482                                            0482
*         DO;                       /* NO                            */
*           RBSECPTR=RBLINK;        /* GET NEXT RB ADDRESS           */
         L     RBSECPTR,RBLINK(,RBSECPTR)                          0484
*           GOTO RBLOOP;            /* CONTINUE SEARCH FROM TOP      */
         B     RBLOOP                                              0485
*         END;                                                     0486
*NOTFND:                                                           0487
*       RETCODE=4;                  /* INDICATE RB NOT FOUND         */
@RF00482 DS    0H                                                  0487
NOTFND   LA    RETCODE,4                                           0487
*     END;                                                         0488
*IEAVVMSR:                                                         0489
*   PROC OPTIONS(SAVE(3,5,7,8,9,14),NOSAVEAREA);                   0489
         B     @PB00004                                            0489
IEAVVMSR ST    @14,12(,@13)                                        0489
         ST    @03,32(,@13)                                        0489
         ST    @05,40(,@13)                                        0489
         STM   @07,@09,48(@13)                                     0489
*   DCL                                                            0490
*     SRCHRET REG(5) RSTD;          /* RETURN CODE REG               */
*                                                                  0490
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE IS THE INTERFACE TO THE DIRECTORY SEARCH ROUTINE */
*   /* REGS 7,8,9 AND 14 ARE VOLATILE OVER THE CALL. THESE REGISTERS */
*   /* ARE SAVED ON ENTRY AND RESTORED ON EXIT. REGS 0 AND 1 MUST    */
*   /* HAVE THE MODULE NAME, REG 3 MUST HAVE THE CVT ADDRESS AND REG */
*   /* 14 HAS THE RETURN ADDRESS. IF FOUND THE LPDE ADDRESS IS       */
*   /* RETURNED IN REG 0 AND RETURN IS TO THE ADDRESS IN REG 14.     */
*   /* OTHERWISE RETURN IS TO REG 14+4. THIS BRANCH TABLE IS TO A    */
*   /* RETURN CODE OF 0 (SUCCESSFUL) OR 4 (UNSUCCESSFUL). RETURN IS  */
*   /* FINDRB                                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0491
*   SRCHRET=4;                      /* SET CODE FOR LPDE NOT FOUND   */
         LA    SRCHRET,4                                           0491
*   CVTPTR=FLCCVT;                  /* GET CVT ADDRESS               */
         L     CVTPTR,FLCCVT                                       0492
*   ENTRYPTR=CVTLPDSR;              /* GET DIRECTORY ROUTINE ADDR    */
         L     ENTRYPTR,CVTLPDSR(,CVTPTR)                          0493
*   GEN(BALR RETERN,ENTRYPTR);      /* GO SEARCH DIRECTORY IEAVVMSR  */
         BALR RETERN,ENTRYPTR
*   GEN(LA SRCHRET,0);              /* SET CODE FOR LPDE FOUND       */
         LA SRCHRET,0
*   RETCODE=SRCHRET;                /* SET RETURN CODE FOR CALLER    */
         LR    RETCODE,SRCHRET                                     0496
*   RETURN;                         /* RETURN TO CALLER              */
@EL00004 DS    0H                                                  0497
@EF00004 DS    0H                                                  0497
@ER00004 L     @14,12(,@13)                                        0497
         L     @03,32(,@13)                                        0497
         L     @05,40(,@13)                                        0497
         LM    @07,@09,48(@13)                                     0497
         BR    @14                                                 0497
*   END IEAVVMSR;                                                  0498
*CDSEARCH:                                                         0499
*   PROC OPTIONS(SAVE(2,3,8,9,11,14),NOSAVEAREA);/*          @YM03353*/
*                                                                  0499
CDSEARCH ST    @14,12(,@13)                                        0499
         STM   @02,@03,28(@13)                                     0499
         STM   @08,@09,52(@13)                                     0499
         ST    @11,64(,@13)                                        0499
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE IS THE INTERFACE TO THE CDE SEARCH ROUTINE. REGS */
*   /* 0,1,11 AND 15 ARE VOLATILE OVER THE CALL. ON ENTRY TO THE     */
*   /* SEARCH ROUTINE, REG 8 CONTAINS THE ADDRESS OF THE LPA QUEUE,  */
*   /* REG 9 CONTAINS THE ADDRESS OF THE ENTRY POINT NAME, AND R14   */
*   /* CONTAINS THE CALLER'S RETURN ADDRESS. ON EXIT REGS 0 AND 1    */
*   /* CONTAIN THE ENTRY POINT NAME, AND REG 11 CONTAINS THE ADDRESS */
*   /* OF THE CDE. IF THE CDE IS NOT FOUND REG 11 CONTAINS X'0000000'*/
*   /* AND RETURN IS MADE TO R14+4.                                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0500
*   DCL                                                            0500
*     QUEPTR REG(8) RSTD;           /* LPA QUEUE PTR                 */
*   DCL                                                            0501
*     NAMEPT9 REG(9) RSTD;          /* ADDR OF ENTRY POINT NAME      */
*   DCL                                                            0502
*     CDEPTR REG(11) RSTD;          /* BASE REG TO BE SAVED          */
*   CVTPTR=FLCCVT;                  /* GET CVT ADDR                  */
         L     CVTPTR,FLCCVT                                       0503
*   NAMEPT9=NAMERTPT;               /* POINT TO NAME FOR CALL        */
         LR    NAMEPT9,NAMERTPT                                    0504
*   QUEPTR=CVTQLPAQ;                /* GET LPA QUEUE PTR             */
         L     QUEPTR,CVTQLPAQ(,CVTPTR)                            0505
*SRBEGIN:                                                          0506
*   GENERATE;                                                      0506
SRBEGIN  DS    0H                                                  0506
*                                     /*                      @Y02705*/
         STM   11,14,ABDWORK(ABDARPTR)                          @Y02705
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                 @Y02705C
               RELATED=(LPAQ,IEAVAD0B(SRCHEND))                 @Y02705
         SETLOCK OBTAIN,TYPE=CMS,MODE=UNCOND,                   @Y02705C
               RELATED=(LPAD,IEAVAD0B(SRCHEND))                 @Y02705
         LM    11,14,ABDWORK(ABDARPTR)                          @Y02705
*   RFY                                                            0507
*     SRCHRET RSTD;                                                0507
*   SRCHRET=4;                      /* CDE NOT FND RETCODE    @Y02705*/
         LA    SRCHRET,4                                           0508
*   ENTRYPTR=CVTQCDSR;              /* GET CDE SEARCH RTN ADDRESS    */
         L     ENTRYPTR,CVTQCDSR(,CVTPTR)                          0509
*   GEN(BALR RETERN,ENTRYPTR);      /* GO SEARCH LPA QUEUE           */
         BALR RETERN,ENTRYPTR
*   GEN(LA SRCHRET,0);              /* IF FOUND, CODE=0              */
         LA SRCHRET,0
*SREND:                                                            0512
*   GENERATE;                                                      0512
SREND    DS    0H                                                  0512
*                                     /*                      @Y02705*/
         STM   11,14,ABDWORK(ABDARPTR)                          @Y02705
         SETLOCK RELEASE,TYPE=CMS,RELATED=(LPAQ,IEAVAD0B(SREBGIN))
         SETLOCK RELEASE,TYPE=LOCAL,RELATED=(LPAQ,IEAVAD0B(SRBEGIN))
         LM    11,14,ABDWORK(ABDARPTR)                          @Y02705
*   RETCODE=SRCHRET;                /* SET UP RETURN CODE    @YM03353*/
         LR    RETCODE,SRCHRET                                     0513
*   RFY                                                            0514
*     SRCHRET UNRSTD;                                              0514
*   CDENTPTR=CDEPTR;                /* GET CDE ADDR          @YM03353*/
         ST    CDEPTR,CDENTPTR                                     0515
*   RETURN;                                                        0516
@EL00005 DS    0H                                                  0516
@EF00005 DS    0H                                                  0516
@ER00005 L     @14,12(,@13)                                        0516
         LM    @02,@03,28(@13)                                     0516
         LM    @08,@09,52(@13)                                     0516
         L     @11,64(,@13)                                        0516
         BR    @14                                                 0516
*   END CDSEARCH;                                                  0517
*   END FINDRB;                                                    0518
@EL00003 DS    0H                                                  0518
@EF00003 DS    0H                                                  0518
@ER00003 L     @14,@SA00003                                        0518
         LM    @00,@03,@SA00003+4                                  0518
         LM    @05,@12,@SA00003+20                                 0518
         BR    @14                                                 0518
*AD0BTBL:                                                          0519
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0519
*                                                                  0519
AD0BTBL  DS    0H                                                  0520
*   /*****************************************************************/
*   /*                                                               */
*   /* OBTAIN MODULE TABLE, GETMAIN PAGE OF STORAGE FROM SP253       */
*   /*                                                       @G33SPHW*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0520
*   DO;                             /* GETMAIN (RC) LV(3780) SP(253) */
*     RESPECIFY                                                    0521
*      (GPR01F,                                                    0521
*       GPR15F,                                                    0521
*       GPR00F) RESTRICTED;                                        0521
*     GPR01F=0;                     /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       0522
*     GPR15F=0;                     /* RC-TYPE GETMAIN               */
         SLR   GPR15F,GPR15F                                       0523
*     GPR00F=3780;                  /* LENGTH REQUESTED              */
         LA    GPR00F,3780                                         0524
*     GPR15F=GPR15F×((253)*256);    /* SP IN BYTE 2                  */
         O     GPR15F,@CF02467                                     0525
*     SVC(120);                     /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 0526
*     RESPECIFY                                                    0527
*      (GPR01F,                                                    0527
*       GPR15F,                                                    0527
*       GPR00F) UNRESTRICTED;                                      0527
*   END;                            /* GETMAIN (RC) LV(3780) SP(253)
*                                      OBTAIN TABLE FROM SP253     0528
*                                                            @G33SPHW*/
*   IF RETCODE=0 THEN               /* GETMAIN SUCCESSFUL    @G33SPHW*/
         SLR   @11,@11                                             0529
         CR    RETCODE,@11                                         0529
         BNE   @RF00529                                            0529
*     DO;                           /* YES...                @G33SPHW*/
*       SAVESTOR=PARMPTR;           /* ADDRESS SAVED         @G33SPHW*/
         ST    PARMPTR,SAVESTOR                                    0531
*       TABCHAIN=PARMPTR;           /* SAVE TABLE ADDRESS IN PREVIOUS
*                                      TBL                   @G33SPHW*/
         L     @08,TABPTR                                          0532
         ST    PARMPTR,TABCHAIN(,@08)                              0532
*       PARMPTR->TABBACK=TABPTR;    /* GET BACKWARD POINTER. @G33SPHW*/
         ST    @08,TABBACK(,PARMPTR)                               0533
*       TABPTR=PARMPTR;             /* SAVE GETMAIN AREA IN TABLE  0534
*                                      POINTER               @G33SPHW*/
         ST    PARMPTR,TABPTR                                      0534
*       TABCHAIN=0;                 /* ZERO FORWARD POINTER  @G33SPHW*/
         L     @08,TABPTR                                          0535
         ST    @11,TABCHAIN(,@08)                                  0535
*       ENTLIMIT=ENTLIMIT+CTR;      /* SAVE ENTRY COUNTER    @G33SPHW*/
         LH    @11,ENTLIMIT                                        0536
         AH    @11,CTR                                             0536
         STH   @11,ENTLIMIT                                        0536
*       CTR=1;                      /* INIT CURRENT CTR      @G33SPHW*/
         MVC   CTR(2),@CH00089                                     0537
*     END;                          /* GETMAIN OK            @G33SPHW*/
*   ELSE                            /* ERROR OBTAINING TABLE @G33SPHW*/
*     DO;                           /*                       @G33SPHW*/
         B     @RC00529                                            0539
@RF00529 DS    0H                                                  0540
*       ABDLINEA(1:45)=STORMSG;     /* PUT STORAGE NOT AVAIL IN    0540
*                                      BUFFER                @G33SPHW*/
         MVC   ABDLINEA(45,ABDARPTR),STORMSG                       0540
*       PARMPTR=ABDARPTR;           /* PARMLIST ADDRESS IN R1      0541
*                                                            @G33SPHW*/
         LR    PARMPTR,ABDARPTR                                    0541
*       CALL IEAVAD11;              /* PRINT MSG             @G33SPHW*/
         L     @15,@CV00077                                        0542
         BALR  @14,@15                                             0542
*       GO TO FREERET;              /* EXIT ROUTINE          @G33SPHW*/
         B     FREERET                                             0543
*     END;                          /* END GETMAIN FAILED    @G33SPHW*/
*   END AD0BTBL;                    /* END ADOBTBL           @G33SPHW*/
@EL00006 DS    0H                                                  0545
@EF00006 DS    0H                                                  0545
@ER00006 BR    @14                                                 0545
*AD0BPRNT:                                                         0546
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0546
*                                                                  0546
AD0BPRNT DS    0H                                                  0547
*   /*****************************************************************/
*   /*                                                               */
*   /* OUTPUT MODULES                                        @G33SPHW*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0547
*   OUTSAV14=RETERN;                /* SAVE RETURN ADDRESS   @G33SPHW*/
         ST    RETERN,OUTSAV14                                     0547
*   ABDBLOCK=MODEP(CTR);            /* PUT MODULE ENTRY POINT IN   0548
*                                      BUFFER                @G33SPHW*/
         L     @11,TABPTR                                          0548
         LH    @08,CTR                                             0548
         MH    @08,@CH00085                                        0548
         ST    @08,@TF00001                                        0548
         ALR   @08,@11                                             0548
         AL    @08,@CF02476                                        0548
         ICM   @06,15,MODEP-8(@08)                                 0548
         ST    @06,ABDBLOCK(,ABDARPTR)                             0548
*   ABDLENTH=MODLEN(CTR);           /* PUT MODULE LENGTH IN BUFFER 0549
*                                                            @G33SPHW*/
         LR    @08,@11                                             0549
         AL    @08,@TF00001                                        0549
         ICM   @06,15,MODLEN-20(@08)                               0549
         ST    @06,ABDLENTH(,ABDARPTR)                             0549
*   IF MODSVC(CTR)=ON THEN          /* PRINT SVC MODULE      @G33SPHW*/
         LR    @08,@11                                             0550
         AL    @08,@TF00001                                        0550
         AL    @08,@CF02474                                        0550
         TM    MODSVC-12(@08),B'10000000'                          0550
         BNO   @RF00550                                            0550
*     DO;                           /* YES...                @G33SPHW*/
*       ABDLINEA(1:12)=MODMSG;      /* PUT SVC MSG IN HEADER BUFFER
*                                                            @G33SPHW*/
         MVC   ABDLINEA(12,ABDARPTR),MODMSG                        0552
*       ABDLINEA(17:24)=MODNAM(CTR);/* PUT SVC MODULE NAME IN HEADER
*                                                            @G33SPHW*/
         AL    @11,@TF00001                                        0553
         AL    @11,@CF02475                                        0553
         MVC   ABDLINEA+16(8,ABDARPTR),MODNAM-16(@11)              0553
*     END;                          /* END SVC MODULE        @G33SPHW*/
*   ELSE                            /* CHECK FOR EXTENT LIST @G33SPHW*/
*     DO;                           /* NOT SVC MODULE        @G33SPHW*/
         B     @RC00550                                            0555
@RF00550 DS    0H                                                  0556
*       IF MODEXTEN(CTR)=ON THEN    /* EXTENT MODULE         @G33SPHW*/
         L     @11,TABPTR                                          0556
         LH    @08,CTR                                             0556
         MH    @08,@CH00085                                        0556
         ST    @08,@TF00001                                        0556
         ALR   @08,@11                                             0556
         AL    @08,@CF02474                                        0556
         TM    MODEXTEN-12(@08),B'01000000'                        0556
         BNO   @RF00556                                            0556
*         DO;                       /* YES... PROCESS EXTENT @G33SPHW*/
*           ABDBPTR=ADDR(MODXNUM(CTR));/* POINT AT CSECT NUMBER    0558
*                                                            @G33SPHW*/
         L     @08,@TF00001                                        0558
         AL    @11,@CF02478                                        0558
         LA    @11,MODXNUM-14(@08,@11)                             0558
         ST    @11,ABDBPTR(,ABDARPTR)                              0558
*           ABDLLINE=ADDR(UPKCSCT); /* POIT AT FORMAT LINE   @G33SPHW*/
         LA    @11,UPKCSCT                                         0559
         ST    @11,ABDLLINE(,ABDARPTR)                             0559
*           CALL IEAVAD61;          /* UNPACK EXTENT NUMBER INTO   0560
*                                      OUTPUT LINE           @G33SPHW*/
         L     @15,@CV00078                                        0560
         BALR  @14,@15                                             0560
*           IF RETCODE^=0 THEN      /* CONVERT ROUTINE OK    @G33SPHW*/
         LTR   RETCODE,RETCODE                                     0561
         BNZ   @RT00561                                            0561
*             GO TO BADMOD;         /* ERROR IN CONVERT EXTENT #   0562
*                                                            @G33SPHW*/
*           ELSE                                                   0563
*             ;                     /* OK CONVERT OF EXTENT #      0563
*                                                            @G33SPHW*/
*           ABDLINEA(14:15)=OFMSG;  /* OF MSG IN BUFFER      @G33SPHW*/
         MVC   ABDLINEA+13(2,ABDARPTR),OFMSG                       0564
*           ABDLINEA(17:24)=MODNAM(CTR);/* MODULE NAME IN BUFFER   0565
*                                                            @G33SPHW*/
         LH    @11,CTR                                             0565
         MH    @11,@CH00085                                        0565
         L     @08,TABPTR                                          0565
         ALR   @08,@11                                             0565
         AL    @08,@CF02475                                        0565
         MVC   ABDLINEA+16(8,ABDARPTR),MODNAM-16(@08)              0565
*           ABDLINEA(1:7)=XTMSG;    /* EXTENT MSG IN BUFFER  @G33SPHW*/
         MVC   ABDLINEA(7,ABDARPTR),XTMSG                          0566
*         END;                      /* END EXTENT PROCESS    @G33SPHW*/
*       ELSE                        /* PROCESS LPA/JPA MODULE      0568
*                                                            @G33SPHW*/
*         DO;                       /* SETUP HEADER LINE     @G33SPHW*/
         B     @RC00556                                            0568
@RF00556 DS    0H                                                  0569
*           ABDLINEA(20:27)=MODNAM(CTR);/* PUT MODULE NAME IN HEADER
*                                                            @G33SPHW*/
         LH    @11,CTR                                             0569
         MH    @11,@CH00085                                        0569
         L     @08,TABPTR                                          0569
         ALR   @08,@11                                             0569
         AL    @08,@CF02475                                        0569
         MVC   ABDLINEA+19(8,ABDARPTR),MODNAM-16(@08)              0569
*           IF APFLPA=ON&APFJPA=ON  /* JPA/LPA BOTH SPECIFIED      0570
*                                                            @G33SPHW*/
*             THEN                  /* YES... LPA/JPA        @G33SPHW*/
         TM    APFLPA(ABDARPTR),B'00011000'                        0570
         BNO   @RF00570                                            0570
*             ABDLINEA(1:15)=MODNMMSG;/* PUT LPA/JPA HEADER IN     0571
*                                                            @G33SPHW*/
         MVC   ABDLINEA(15,ABDARPTR),MODNMMSG                      0571
*           ELSE                    /* NOT BOTH JPA/LPA      @G33SPHW*/
*             IF APFLPA=ON THEN     /* LPA SPECIFIED         @G33SPHW*/
         B     @RC00570                                            0572
@RF00570 TM    APFLPA(ABDARPTR),B'00010000'                        0572
         BNO   @RF00572                                            0572
*               ABDLINEA(1:15)=MDLPAMSG;/* YES...            @G33SPHW*/
         MVC   ABDLINEA(15,ABDARPTR),MDLPAMSG                      0573
*             ELSE                                                 0574
*               ABDLINEA(1:15)=MDJPAMSG;/* JPA SPECIFIED     @G33SPHW*/
         B     @RC00572                                            0574
@RF00572 MVC   ABDLINEA(15,ABDARPTR),MDJPAMSG                      0574
*         END;                      /* END LPA/JPA PROCESS   @G33SPHW*/
@RC00572 DS    0H                                                  0575
@RC00570 DS    0H                                                  0576
*     END;                          /* NOT SVC MODULE        @G33SPHW*/
@RC00556 DS    0H                                                  0577
*   UPRFMET=ON;                     /* IF UPR SKIP PAGE AND CONTINUE
*                                                            @G33SPHW*/
@RC00550 OI    UPRFMET(ABDARPTR),B'01000000'                       0577
*   ABDUPRSL=ON;                    /* SKIPLINE BEGIN NEXT PAGE    0578
*                                                            @G33SPHW*/
         OI    ABDUPRSL(ABDARPTR),B'01000000'                      0578
*   CALL IEAVAD11;                  /* PRINT HEADER          @G33SPHW*/
         L     @15,@CV00077                                        0579
         BALR  @14,@15                                             0579
*   CALL IEAVAD71;                  /* PRINT MODULE          @G33SPHW*/
         L     @15,@CV00079                                        0580
         BALR  @14,@15                                             0580
*BADMOD:                            /* EXIT PRINT ROUTINE    @G33SPHW*/
*   RETERN=OUTSAV14;                /* RESTORE RETURN ADDRESS      0581
*                                                            @G33SPHW*/
BADMOD   L     RETERN,OUTSAV14                                     0581
*   END AD0BPRNT;                                                  0582
@EL00007 DS    0H                                                  0582
@EF00007 DS    0H                                                  0582
@ER00007 BR    @14                                                 0582
@PB00007 DS    0H                                                  0583
*   DCL                                                            0583
*     PATCHLOC FIXED(31) STATIC;                                   0583
*   GEN DATA DEFS(PATCHLOC);                                       0584
*   DECLARE                         /* GENERAL PURPOSE REGISTERS     */
*     GPR00F FIXED(31) REG(0),                                     0585
*     GPR01F FIXED(31) REG(1),                                     0585
*     GPR15F FIXED(31) REG(15);                                    0585
*   DECLARE                         /* COMMON VARIABLES              */
*     I256C CHAR(256) BASED,                                       0586
*     I031F FIXED(31) BASED,                                       0586
*     I031P PTR(31) BASED,                                         0586
*     I015F FIXED(15) BASED,                                       0586
*     I015P PTR(15) BASED,                                         0586
*     I008P PTR(8) BASED,                                          0586
*     I001C CHAR(1) BASED;          /*                        @Y02705*/
*   END IEAVAD0B                                                   0587
*                                                                  0587
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (AD0BSPEC)                                       */
*/*%INCLUDE SYSLIB  (AD0BDCL )                                       */
*/*%INCLUDE SYSLIB  (IHAABDA )                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (IHARB   )                                       */
*/*%INCLUDE SYSLIB  (IKJRB   )                                       */
*/*%INCLUDE SYSLIB  (IKJTCB  )                                       */
*/*%INCLUDE SYSLIB  (IHACDE  )                                       */
*/*%INCLUDE SYSLIB  (IHALLE  )                                       */
*/*%INCLUDE SYSLIB  (IHALPDE )                                       */
*/*%INCLUDE SYSLIB  (IHAXTLST)                                       */
*/*%INCLUDE SYSLIB  (IHARTCT )                                       */
*/*%INCLUDE SYSLIB  (AD0BSORT)                                       */
*/*%INCLUDE SYSLIB  (AD0BOUT )                                       */
*/*%INCLUDE SYSLIB  (AD0BCLN )                                       */
*/*%INCLUDE SYSLIB  (AD0BTBL )                                       */
*/*%INCLUDE SYSLIB  (AD0BPRNT)                                       */
*                                                                  0587
*       ;                                                          0587
         B     @EL00001                                            0587
@DATA    DS    0H
@DATD    DSECT
         DS    0F
@SA00002 DS    14F
@SA00003 DS    13F
@TF00001 DS    F
IEAVAD0B CSECT
         DS    0F
@CF00089 DC    F'1'
@CH00089 EQU   @CF00089+2
@CF00076 DC    F'8'
@CF00085 DC    F'20'
@CH00085 EQU   @CF00085+2
@CF00120 DC    F'180'
@CH00120 EQU   @CF00120+2
@CF00137 DC    F'3780'
@CF02467 DC    F'64768'
@CF02476 DC    F'-12'
@CF02474 DC    F'-8'
@CF02478 DC    F'-6'
@CF02475 DC    F'-4'
@DATD    DSECT
         DS    0D
CDENTPTR DS    A
LLEPTR   DS    A
LPDEPTR  DS    A
ENDQ     DS    A
XTLSTPTR DS    A
TABPTR   DS    A
FREEAREA DS    A
SAVESTOR DS    A
CURPTR   DS    A
NXTPTR   DS    A
SAVRETCD DS    A
OUTSAV14 DS    A
RBSAVE   DS    F
SAVECUR  DS    F
LPDEOLD  DS    F
ENTLIMIT DS    H
CTR      DS    H
CTR2     DS    H
CSCOUNT  DS    H
SWAP     DS    FL1
NAME     DS    CL8
         DS    CL3
UNPKFLD  DS    CL8
         ORG   UNPKFLD
@NM00005 DS    CL5
UNBYTE1  DS    CL3
         ORG   UNBYTE1
@NM00006 DS    CL1
UNBYTE2  DS    CL2
         ORG   UNBYTE2
@NM00007 DS    CL1
LASTBYTE DS    CL1
         ORG   UNPKFLD+8
NAMEQ    DS    BL1
IEAVAD0B CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV00077 DC    V(IEAVAD11)
@CV00078 DC    V(IEAVAD61)
@CV00079 DC    V(IEAVAD71)
         DS    0D
XTMSG    DC    CL7'0EXTENT'
OFMSG    DC    CL2'OF'
MODMSG   DC    CL12'0 SVC MODULE'
IGCMSG   DC    CL5'IGC00'
MODNMMSG DC    CL15'0LPA/JPA MODULE'
MDJPAMSG DC    CL15'0JPA MODULE    '
MDLPAMSG DC    CL15'0LPA MODULE    '
HDRMSG   DC    CL20'0ACTIVE LOAD MODULES'
STORMSG  DC    CL45'MODULE LIST NOT PRINTED STORAGE NOT AVAILABLE'
UPKCSCT  DC    X'0701FF'
IEAVAD0B CSECT
         DS   0H
PATCHLOC DC ((@DATA-@PSTART)/20)X'00'
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IEAVAD0B CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
NAMELFT  EQU   @00
R0       EQU   @00
NAMERT   EQU   @01
NAMERTPT EQU   @01
PARMPTR  EQU   @01
ABDARPTR EQU   @02
RBSECPTR EQU   @03
CVTPTR   EQU   @03
TCBPTR   EQU   @04
SAVERET  EQU   @07
TESTCDE  EQU   @07
REG9     EQU   @09
AUTOPTR  EQU   @12
SAVEPTR  EQU   @13
RETERN   EQU   @14
ENTRYPTR EQU   @15
RETCODE  EQU   @15
GPR01F   EQU   @01
GPR15F   EQU   @15
GPR00F   EQU   @00
ABDXL    EQU   @03
XTCOUNT  EQU   @04
SRCHRET  EQU   @05
QUEPTR   EQU   @08
NAMEPT9  EQU   @09
CDEPTR   EQU   @11
REGPTR   EQU   @09
REG10    EQU   @10
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
FLCCVT   EQU   FLCICCW2
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
NEXSAPTR EQU   8
PRESAPTR EQU   4
TABMOD   EQU   0
TABCHAIN EQU   TABMOD
TABBACK  EQU   TABMOD+4
MODTABL  EQU   TABMOD+8
MODEP    EQU   MODTABL
MODFLAGS EQU   MODTABL+4
MODFLAG1 EQU   MODFLAGS
MODSVC   EQU   MODFLAG1
MODEXTEN EQU   MODFLAG1
MODXNUM  EQU   MODFLAGS+2
MODNAM   EQU   MODTABL+8
MODLEN   EQU   MODTABL+16
MODENT   EQU   0
MODADDR  EQU   MODENT
ENTFLAGS EQU   MODENT+4
ABDAREA  EQU   0
ABDTCB   EQU   ABDAREA
ABDCTCB  EQU   ABDAREA+4
ABDPARMS EQU   ABDAREA+12
ABDFLAG  EQU   ABDPARMS+1
APFABEND EQU   ABDFLAG
APFSDATA EQU   ABDPARMS+4
APFSDAT1 EQU   ABDPARMS+5
APFPDATA EQU   ABDPARMS+6
APFLPA   EQU   APFPDATA
APFJPA   EQU   APFPDATA
ABDTABPT EQU   ABDAREA+44
ABDPTRS  EQU   ABDAREA+84
ABDFLAG1 EQU   ABDAREA+136
ABDFLAG2 EQU   ABDAREA+137
ABDRES1  EQU   ABDAREA+139
ABDBPTR  EQU   ABDAREA+244
ABDLLINE EQU   ABDAREA+248
ABDUPRF  EQU   ABDAREA+265
UPRFMET  EQU   ABDUPRF
ABDUPRFN EQU   ABDAREA+266
ABDUPRSL EQU   ABDUPRFN
ABDBLNKS EQU   ABDAREA+267
ABDBLOCK EQU   ABDAREA+272
ABDLENTH EQU   ABDAREA+276
ABDBUFFS EQU   ABDAREA+308
ABDGMA   EQU   ABDAREA+316
ABDAAREA EQU   ABDGMA
ABDASIZE EQU   ABDGMA+4
ESPARM   EQU   ABDAREA+340
ESTAEFLG EQU   ESPARM+28
ABDLINEA EQU   ABDAREA+384
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIOQET EQU   CVTMAP+120
CVTIERLC EQU   CVTMAP+144
CVTHEAD  EQU   CVTMAP+160
CVTSV76C EQU   CVTHEAD
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTQCDSR EQU   CVTMAP+184
CVTQLPAQ EQU   CVTMAP+188
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
RBPRFX   EQU   0
RBBASIC  EQU   0
RBEXRTNM EQU   RBBASIC
RBTMFLD  EQU   RBEXRTNM
RBSTAB   EQU   RBBASIC+10
XSTAB    EQU   RBSTAB
RBSTAB1  EQU   XSTAB
XSTAB1   EQU   RBSTAB1
RBFTCKPT EQU   XSTAB1
RBSTAB2  EQU   XSTAB+1
XSTAB2   EQU   RBSTAB2
RBTCBNXT EQU   XSTAB2
RBFACTV  EQU   XSTAB2
RBFDYN   EQU   XSTAB2
RBECBWT  EQU   XSTAB2
RBOPSW   EQU   RBBASIC+16
XRBPSW   EQU   RBOPSW
RBOPSWB2 EQU   XRBPSW+1
RBLINK   EQU   RBBASIC+28
XRBLNK   EQU   RBLINK
RBWCF    EQU   XRBLNK
RBLINKB  EQU   XRBLNK+1
RBGRSAVE EQU   RBBASIC+32
XRBREG   EQU   RBGRSAVE
RBGRS0   EQU   XRBREG
RBGRS1   EQU   XRBREG+4
RBGRS2   EQU   XRBREG+8
RBGRS3   EQU   XRBREG+12
RBGRS4   EQU   XRBREG+16
RBGRS5   EQU   XRBREG+20
RBGRS6   EQU   XRBREG+24
RBGRS7   EQU   XRBREG+28
RBGRS8   EQU   XRBREG+32
RBGRS9   EQU   XRBREG+36
RBGRS10  EQU   XRBREG+40
RBGRS11  EQU   XRBREG+44
RBGRS12  EQU   XRBREG+48
RBGRS13  EQU   XRBREG+52
RBGRS14  EQU   XRBREG+56
RBGRS15  EQU   XRBREG+60
XRBESA   EQU   RBBASIC+96
RBPREFIX EQU   0
RBRSV019 EQU   RBPREFIX+14
RBRSV028 EQU   RBPREFIX+15
RBRSV041 EQU   RBPREFIX+27
RBRSV054 EQU   RBPREFIX+39
RBRTOPSW EQU   RBPREFIX+40
RBRTPSW2 EQU   RBRTOPSW+8
RBRTICIL EQU   RBRTPSW2
RBFLAGS1 EQU   RBPREFIX+56
RBINTCDA EQU   RBPREFIX+61
RBINTCOD EQU   RBINTCDA+1
RBSECT   EQU   0
RBPPSAV  EQU   RBSECT
@NM00072 EQU   RBSECT+10
@NM00073 EQU   @NM00072
RBFTP    EQU   @NM00073
RBTRSVRB EQU   @NM00073
RBPMSVRB EQU   @NM00073
@NM00075 EQU   @NM00072+1
RBETXR   EQU   @NM00075
RBEP     EQU   RBSECT+12
RBPGMQ   EQU   RBSECT+24
@NM00082 EQU   RBSECT+28
@NM00083 EQU   @NM00082
IRBEND   EQU   RBSECT+96
@NM00086 EQU   RBSECT+96
RBRSV138 EQU   @NM00086+7
RBSCBB   EQU   RBSECT+144
RBSPARM  EQU   RBSCBB+8
RBSFLGS1 EQU   RBSPARM
RBSIOPRC EQU   RBSFLGS1
RBSOWNR  EQU   RBSCBB+12
RBSFLGS2 EQU   RBSOWNR
RBSDATA  EQU   RBSCBB+16
RBSFLG3  EQU   RBSDATA
RBRSV150 EQU   RBSECT+167
TCBFIX   EQU   0
TCBFRS   EQU   TCBFIX
TCB      EQU   0
TCBRBP   EQU   TCB
TCBPIE   EQU   TCB+4
TCBPMASK EQU   TCBPIE
TCBCMP   EQU   TCB+16
TCBCMPF  EQU   TCBCMP
TCBCPP   EQU   TCBCMPF
TCBSTCC  EQU   TCBCMPF
TCBCDBL  EQU   TCBCMPF
TCBCWTO  EQU   TCBCMPF
TCBCIND  EQU   TCBCMPF
TCBCMSG  EQU   TCBCMPF
TCBTRN   EQU   TCB+20
TCBABF   EQU   TCBTRN
TCBMSS   EQU   TCB+24
TCBPKF   EQU   TCB+28
TCBFLGS  EQU   TCB+29
TCBFLGS1 EQU   TCBFLGS
TCBFLGS2 EQU   TCBFLGS+1
TCBFLGS3 EQU   TCBFLGS+2
TCBFLGS4 EQU   TCBFLGS+3
TCBFLGS5 EQU   TCBFLGS+4
TCBFC    EQU   TCBFLGS5
TCBABWF  EQU   TCBFLGS5
TCBLLS   EQU   TCB+36
TCBJPQ   EQU   TCB+44
TCBPURGE EQU   TCBJPQ
TCBGRS   EQU   TCB+48
TCBFSA   EQU   TCB+112
TCBTME   EQU   TCB+120
TCBJSTCB EQU   TCB+124
TCBTSFLG EQU   TCB+148
TCBTSTSK EQU   TCBTSFLG
TCBSTAB  EQU   TCB+160
TCBNSTAE EQU   TCBSTAB
TCBTCT   EQU   TCB+164
TCBTCTGF EQU   TCBTCT
TCBSCNDY EQU   TCB+172
TCBNDSP  EQU   TCBSCNDY
TCBNDSP1 EQU   TCBNDSP+1
TCBNDSP2 EQU   TCBNDSP+2
TCBNDSP3 EQU   TCBNDSP+3
TCBJSCB  EQU   TCB+180
TCBRECDE EQU   TCBJSCB
TCBEXT1  EQU   TCB+196
TCBBITS  EQU   TCB+200
TCBNDSP4 EQU   TCBBITS
TCBNDSP5 EQU   TCBBITS+1
TCBFLGS6 EQU   TCBBITS+2
TCBFLGS7 EQU   TCBBITS+3
TCBDAR   EQU   TCB+204
TCBDARC  EQU   TCBDAR
TCBEXT2  EQU   TCB+208
TCBXSCT  EQU   TCB+240
TCBXSCT1 EQU   TCBXSCT
TCBFOE   EQU   TCB+244
TCBESTAE EQU   TCB+264
TCBESTRM EQU   TCBESTAE+1
TCBFBYT1 EQU   TCB+276
TCBFBYT2 EQU   TCB+277
TCBRV124 EQU   TCB+278
TCBRV133 EQU   TCB+279
TCBXTNT2 EQU   0
TCBGTF   EQU   TCBXTNT2
TCBTFLG  EQU   TCBGTF
TCBRV146 EQU   TCBXTNT2+28
TCBRV155 EQU   TCBXTNT2+29
TCBRV164 EQU   TCBXTNT2+30
TCBRV173 EQU   TCBXTNT2+31
CDENTRY  EQU   0
CDNAME   EQU   CDENTRY+8
CDXLMJP  EQU   CDENTRY+20
CDATTR   EQU   CDENTRY+28
CDNIP    EQU   CDATTR
CDNIC    EQU   CDATTR
CDMIN    EQU   CDATTR
CDATTR2  EQU   CDENTRY+29
CDXLE    EQU   CDATTR2
LLE      EQU   0
LLECHN   EQU   LLE
LLECDPT  EQU   LLE+4
LPDE     EQU   0
LPDENAME EQU   LPDE+8
LPDEATTR EQU   LPDE+28
LPDEMIN  EQU   LPDEATTR
LPDEATT2 EQU   LPDE+29
LPDEMJNM EQU   LPDE+32
LPDEXTLN EQU   LPDEMJNM
LPDEXTAD EQU   LPDEMJNM+4
XTLST    EQU   0
XTLMSBLA EQU   XTLST+8
XTLMSBLN EQU   XTLMSBLA+1
XTLMSBAA EQU   XTLST+12
XTLMSBAD EQU   XTLMSBAA+1
RTCT     EQU   0
RTCTPLIB EQU   RTCT+4
RTCTSAP  EQU   RTCTPLIB
RTCTSAP1 EQU   RTCTSAP
RTCTSAP2 EQU   RTCTSAP+1
RTCTSAP3 EQU   RTCTSAP+2
RTCTSUP  EQU   RTCTPLIB+4
RTCTSUP1 EQU   RTCTSUP
RTCTSUP2 EQU   RTCTSUP+1
RTCTSUP3 EQU   RTCTSUP+2
RTCTSYD  EQU   RTCTPLIB+8
RTCTSY01 EQU   RTCTSYD
RTCTSDDS EQU   RTCT+36
RTCTFLG  EQU   RTCTSDDS+3
RTCTSDPL EQU   RTCT+156
RTCTRFLG EQU   RTCT+176
RTCTERID EQU   RTCT+224
RTCTOPT  EQU   RTCT+236
RTCTASO  EQU   RTCT+252
RTCTASO1 EQU   RTCTASO
RTCTASO2 EQU   RTCTASO+1
RTCTSDI  EQU   RTCT+254
RTCTSDF  EQU   RTCT+264
RTCTSDF1 EQU   RTCTSDF
RTCTSDF2 EQU   RTCTSDF+1
RTCTSDF3 EQU   RTCT+268
RTCTSDF4 EQU   RTCTSDF3+2
RTCTMOPT EQU   0
RTCTMSAO EQU   RTCTMOPT
RTCTSASD EQU   RTCTMSAO
RTCTSAO1 EQU   RTCTSASD
RTCTSAO2 EQU   RTCTSASD+1
RTCTSAPD EQU   RTCTMSAO+2
RTCTSAO3 EQU   RTCTSAPD
RTCTSAO4 EQU   RTCTSAPD+1
RTCTSAMG EQU   RTCTSAO4
RTCTMSUO EQU   RTCTMOPT+4
RTCTSUSD EQU   RTCTMSUO
RTCTSUO1 EQU   RTCTSUSD
RTCTSUO2 EQU   RTCTSUSD+1
RTCTSUPD EQU   RTCTMSUO+2
RTCTSUO3 EQU   RTCTSUPD
RTCTSUO4 EQU   RTCTSUPD+1
RTCTSUMG EQU   RTCTSUO4
RTCTMSYO EQU   RTCTMOPT+8
RTCTSD01 EQU   RTCTMSYO
RTCTSD04 EQU   RTCTMSYO+3
RTCTSMMG EQU   RTCTSD04
RTCTMSDO EQU   RTCTMOPT+12
RTCTSDOD EQU   RTCTMSDO
RTCTSDO1 EQU   RTCTSDOD
RTCTSDO2 EQU   RTCTSDOD+1
RTCTSDO3 EQU   RTCTMSDO+2
RTCTSDO4 EQU   RTCTMSDO+3
RTCTSDMG EQU   RTCTSDO4
I256C    EQU   0
XTLSTA   EQU   0
EXNRFAC  EQU   XTLSTA+4
XLSTELL  EQU   XTLSTA+8
XLSTELLB EQU   XLSTELL+1
I001C    EQU   0
I008P    EQU   0
I015F    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
XTFLGS   EQU   0
CVTS01   EQU   CVTPGSIA
CVTLPDSR EQU   CVTS01+4
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTRTMCT EQU   CVTS01+224
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
PSARSVTE EQU   PSARSVT
RBSECS03 EQU   RBEP
RBCDE    EQU   RBSECS03
RBCDFLGS EQU   RBCDE
RBCDE1   EQU   RBCDE+1
RBSECS05 EQU   RBPGMQ
RBSQE    EQU   RBSECS05
RBSECS06 EQU   RBPGMQ
RBIQE    EQU   RBSECS06
RBSECS07 EQU   RBPGMQ
RBIQE2   EQU   RBSECS07
RBSECS08 EQU   IRBEND
RBSECS09 EQU   IRBEND
RBINTCOA EQU   RBINTCOD+1
FLC      EQU   PSA
*                                      START UNREFERENCED COMPONENTS
RBRSV161 EQU   RBSECS09+64
RBSIRBWA EQU   RBSECS09
RBIQEWRK EQU   RBSECS08+4
RBNEXAV  EQU   RBSECS08
RBIQEA   EQU   RBIQE2
RBIQE1   EQU   RBIQE+1
RBUSE    EQU   RBIQE
RBSQEA   EQU   RBSQE+1
@NM00087 EQU   RBSQE
RBCDLOAD EQU   RBCDFLGS
RBCDXCTL EQU   RBCDFLGS
RBCDSYNC EQU   RBCDFLGS
RBCDNODE EQU   RBCDFLGS
RBRSV010 EQU   RBCDFLGS
RBCDATCH EQU   RBCDFLGS
RBRSV009 EQU   RBCDFLGS
RBNOCELL EQU   RBCDFLGS
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTSUSP  EQU   CVTS01+692
CVTT6SVC EQU   CVTS01+688
CVTCDAL  EQU   CVTS01+684
CVTTCTL  EQU   CVTS01+680
CVTRSUME EQU   CVTS01+676
CVTJTERM EQU   CVTS01+672
CVTASMRM EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTHSM   EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTGETL  EQU   CVTS01
XLSTELLA EQU   XLSTELL
EXLLNTH  EQU   XTLSTA
RTCTISVC EQU   RTCTSDO4
RTCTSDOV EQU   RTCTSDMG
@NM00115 EQU   RTCTSDO4
@NM00114 EQU   RTCTSDO3
RTCTSDPH EQU   RTCTSDO3
RTCTSDPG EQU   RTCTSDO3
@NM00113 EQU   RTCTSDO2
RTCTSDPD EQU   RTCTSDO2
RTCTSDPC EQU   RTCTSDO2
RTCTSDPB EQU   RTCTSDO2
RTCTSDPA EQU   RTCTSDO2
RTCTSDP9 EQU   RTCTSDO2
RTCTSDP8 EQU   RTCTSDO2
RTCTSDP7 EQU   RTCTSDO1
RTCTSDP6 EQU   RTCTSDO1
RTCTSDP5 EQU   RTCTSDO1
RTCTSDP4 EQU   RTCTSDO1
RTCTSDP3 EQU   RTCTSDO1
RTCTSDP2 EQU   RTCTSDO1
RTCTSDP1 EQU   RTCTSDO1
RTCTSDP0 EQU   RTCTSDO1
RTCTISYM EQU   RTCTSD04
RTCTSMOV EQU   RTCTSMMG
@NM00112 EQU   RTCTSD04
RTCTSD03 EQU   RTCTMSYO+2
RTCTSD02 EQU   RTCTMSYO+1
RTCTSDS7 EQU   RTCTSD01
RTCTSDS6 EQU   RTCTSD01
RTCTSDS5 EQU   RTCTSD01
RTCTSDS4 EQU   RTCTSD01
RTCTSDS3 EQU   RTCTSD01
RTCTSDS2 EQU   RTCTSD01
RTCTSDS1 EQU   RTCTSD01
RTCTSDS0 EQU   RTCTSD01
RTCTISYU EQU   RTCTSUO4
RTCTSUOV EQU   RTCTSUMG
@NM00111 EQU   RTCTSUO4
RTCTSYDF EQU   RTCTSUO3
RTCTSYDE EQU   RTCTSUO3
RTCTSYDD EQU   RTCTSUO3
RTCTSYDC EQU   RTCTSUO3
RTCTSYDB EQU   RTCTSUO3
RTCTSYDA EQU   RTCTSUO3
RTCTSYD9 EQU   RTCTSUO3
RTCTSYD8 EQU   RTCTSUO3
@NM00110 EQU   RTCTSUO2
RTCTSYDH EQU   RTCTSUO2
RTCTSYDG EQU   RTCTSUO2
RTCTSYD7 EQU   RTCTSUO1
RTCTSYD6 EQU   RTCTSUO1
RTCTSYD5 EQU   RTCTSUO1
RTCTSYD4 EQU   RTCTSUO1
RTCTSYD3 EQU   RTCTSUO1
RTCTSYD2 EQU   RTCTSUO1
RTCTSYD1 EQU   RTCTSUO1
RTCTSYD0 EQU   RTCTSUO1
RTCTISAB EQU   RTCTSAO4
RTCTSAOV EQU   RTCTSAMG
@NM00109 EQU   RTCTSAO4
RTCTSADF EQU   RTCTSAO3
RTCTSADE EQU   RTCTSAO3
RTCTSADD EQU   RTCTSAO3
RTCTSADC EQU   RTCTSAO3
RTCTSADB EQU   RTCTSAO3
RTCTSADA EQU   RTCTSAO3
RTCTSAD9 EQU   RTCTSAO3
RTCTSAD8 EQU   RTCTSAO3
@NM00108 EQU   RTCTSAO2
RTCTSADH EQU   RTCTSAO2
RTCTSADG EQU   RTCTSAO2
RTCTSAD7 EQU   RTCTSAO1
RTCTSAD6 EQU   RTCTSAO1
RTCTSAD5 EQU   RTCTSAO1
RTCTSAD4 EQU   RTCTSAO1
RTCTSAD3 EQU   RTCTSAO1
RTCTSAD2 EQU   RTCTSAO1
RTCTSAD1 EQU   RTCTSAO1
RTCTSAD0 EQU   RTCTSAO1
RTCTZZZ5 EQU   RTCT+340
RTCTZZZ4 EQU   RTCT+336
RTCTMRMQ EQU   RTCT+332
RTCTSDF5 EQU   RTCTSDF3+3
RTCTSDDO EQU   RTCTSDF4
RTCTSDEN EQU   RTCTSDF4
RTCTSDEQ EQU   RTCTSDF4
RTCTSDTR EQU   RTCTSDF4
RTCTSDRM EQU   RTCTSDF4
RTCTSDAN EQU   RTCTSDF4
RTCTSDNC EQU   RTCTSDF4
RTCTSDSS EQU   RTCTSDF4
RTCTSDAS EQU   RTCTSDF3
RTCTZZZ3 EQU   RTCT+266
RTCTSDFX EQU   RTCTSDF2
RTCTSDRW EQU   RTCTSDF2
RTCTSDSL EQU   RTCTSDF2
RTCTSDWF EQU   RTCTSDF2
RTCTSDLA EQU   RTCTSDF2
RTCTSDDI EQU   RTCTSDF2
RTCTSDTQ EQU   RTCTSDF2
RTCTSDMR EQU   RTCTSDF2
RTCTSDSC EQU   RTCTSDF1
RTCTSDRS EQU   RTCTSDF1
RTCTSDSD EQU   RTCTSDF1
RTCTSDEP EQU   RTCTSDF1
RTCTSDMA EQU   RTCTSDF1
RTCTSDSH EQU   RTCTSDF1
RTCTSDND EQU   RTCTSDF1
RTCTSDNO EQU   RTCTSDF1
RTCTZZZ2 EQU   RTCT+257
RTCTSDPR EQU   RTCTSDI+2
RTCTINDX EQU   RTCTSDI+1
RTCTSDNA EQU   RTCTSDI
@NM00107 EQU   RTCTASO2
RTCTASNQ EQU   RTCTASO2
RTCTASNA EQU   RTCTASO2
RTCTASNS EQU   RTCTASO2
RTCTASSU EQU   RTCTASO2
RTCTASSW EQU   RTCTASO2
RTCTASCS EQU   RTCTASO2
RTCTASTR EQU   RTCTASO1
RTCTASLP EQU   RTCTASO1
RTCTASRG EQU   RTCTASO1
RTCTASLS EQU   RTCTASO1
RTCTASSQ EQU   RTCTASO1
RTCTASNU EQU   RTCTASO1
RTCTASPS EQU   RTCTASO1
RTCTASAL EQU   RTCTASO1
RTCTSDO  EQU   RTCTOPT+12
RTCTSYO  EQU   RTCTOPT+8
RTCTSUO  EQU   RTCTOPT+4
RTCTSAO  EQU   RTCTOPT
RTCTXXX2 EQU   RTCT+234
RTCTETIM EQU   RTCTERID+6
RTCTEASD EQU   RTCTERID+4
RTCTECPU EQU   RTCTERID+2
RTCTESEQ EQU   RTCTERID
RTCTSDWK EQU   RTCT+220
RTCTTDCB EQU   RTCT+184
RTCTSDSW EQU   RTCT+180
RTCTSEQ# EQU   RTCT+178
RTCTXXX1 EQU   RTCT+177
@NM00106 EQU   RTCTRFLG
RTCTRSTF EQU   RTCTRFLG
RTCTRPER EQU   RTCTRFLG
RTCTRTER EQU   RTCTRFLG
RTCTTEST EQU   RTCT+172
RTCTMSRB EQU   RTCT+168
RTCTMLCK EQU   RTCT+164
RTCTFMT  EQU   RTCT+160
RTCTSDIP EQU   RTCTSDPL
RTCTDEV  EQU   RTCTSDDS+8
RTCTDCB  EQU   RTCTSDDS+4
@NM00105 EQU   RTCTFLG
RTCTDETP EQU   RTCTFLG
RTCTDSUS EQU   RTCTFLG
RTCTDSST EQU   RTCTFLG
RTCTDSNM EQU   RTCTSDDS
RTCTRCB  EQU   RTCT+32
RTCTRECB EQU   RTCT+28
RTCTFASB EQU   RTCT+24
RTCTMECB EQU   RTCT+20
RTCTSDID EQU   RTCT+18
RTCTYYY1 EQU   RTCT+16
RTCTSY04 EQU   RTCTSYD+3
RTCTSY03 EQU   RTCTSYD+2
RTCTSY02 EQU   RTCTSYD+1
RTCTSYM7 EQU   RTCTSY01
RTCTSYM6 EQU   RTCTSY01
RTCTSYM5 EQU   RTCTSY01
RTCTSYM4 EQU   RTCTSY01
RTCTSYM3 EQU   RTCTSY01
RTCTSYM2 EQU   RTCTSY01
RTCTSYM1 EQU   RTCTSY01
RTCTSYM0 EQU   RTCTSY01
RTCTSUP4 EQU   RTCTSUP+3
RTCTSUDF EQU   RTCTSUP3
RTCTSUDE EQU   RTCTSUP3
RTCTSUDD EQU   RTCTSUP3
RTCTSUDC EQU   RTCTSUP3
RTCTSUDB EQU   RTCTSUP3
RTCTSUDA EQU   RTCTSUP3
RTCTSUD9 EQU   RTCTSUP3
RTCTSUD8 EQU   RTCTSUP3
@NM00104 EQU   RTCTSUP2
RTCTSUDH EQU   RTCTSUP2
RTCTSUDG EQU   RTCTSUP2
RTCTSUD7 EQU   RTCTSUP1
RTCTSUD6 EQU   RTCTSUP1
RTCTSUD5 EQU   RTCTSUP1
RTCTSUD4 EQU   RTCTSUP1
RTCTSUD3 EQU   RTCTSUP1
RTCTSUD2 EQU   RTCTSUP1
RTCTSUD1 EQU   RTCTSUP1
RTCTSUD0 EQU   RTCTSUP1
RTCTSAP4 EQU   RTCTSAP+3
RTCTSABF EQU   RTCTSAP3
RTCTSABE EQU   RTCTSAP3
RTCTSABD EQU   RTCTSAP3
RTCTSABC EQU   RTCTSAP3
RTCTSABB EQU   RTCTSAP3
RTCTSABA EQU   RTCTSAP3
RTCTSAB9 EQU   RTCTSAP3
RTCTSAB8 EQU   RTCTSAP3
@NM00103 EQU   RTCTSAP2
RTCTSABH EQU   RTCTSAP2
RTCTSABG EQU   RTCTSAP2
RTCTSAB7 EQU   RTCTSAP1
RTCTSAB6 EQU   RTCTSAP1
RTCTSAB5 EQU   RTCTSAP1
RTCTSAB4 EQU   RTCTSAP1
RTCTSAB3 EQU   RTCTSAP1
RTCTSAB2 EQU   RTCTSAP1
RTCTSAB1 EQU   RTCTSAP1
RTCTSAB0 EQU   RTCTSAP1
RTCTNAME EQU   RTCT
@NM00102 EQU   XTLMSBAA
@NM00101 EQU   XTLMSBLA
XTLNRFAC EQU   XTLST+4
XTLLNTH  EQU   XTLST
LPDEATT3 EQU   LPDE+30
LPDEAUTH EQU   LPDEATT2
LPDESYSL EQU   LPDEATT2
@NM00100 EQU   LPDEATT2
@NM00099 EQU   LPDEATT2
LPDERLC  EQU   LPDEATT2
LPDEXLE  EQU   LPDEATT2
@NM00098 EQU   LPDEATT2
LPDENLR  EQU   LPDEATTR
@NM00097 EQU   LPDEATTR
@NM00096 EQU   LPDEATTR
LPDESER  EQU   LPDEATTR
LPDEREN  EQU   LPDEATTR
@NM00095 EQU   LPDEATTR
LPDENIP  EQU   LPDEATTR
@NM00094 EQU   LPDE+26
LPDEUSE  EQU   LPDE+24
LPDEXLP  EQU   LPDE+20
LPDENTP  EQU   LPDE+16
LPDERBP  EQU   LPDE+4
LPDECHN  EQU   LPDE
LLESYSCT EQU   LLE+10
LLECOUNT EQU   LLE+8
CDATTR3  EQU   CDENTRY+30
CDAUTH   EQU   CDATTR2
CDSYSLIB EQU   CDATTR2
CDOLY    EQU   CDATTR2
@NM00093 EQU   CDATTR2
CDRLC    EQU   CDATTR2
CDREL    EQU   CDATTR2
CDSPZ    EQU   CDATTR2
CDNLR    EQU   CDATTR
CDJPA    EQU   CDATTR
CDNFN    EQU   CDATTR
CDSER    EQU   CDATTR
CDREN    EQU   CDATTR
@NM00092 EQU   CDENTRY+26
CDUSE    EQU   CDENTRY+24
CDENTPT  EQU   CDENTRY+16
CDRRBP   EQU   CDENTRY+4
CDCHAIN  EQU   CDENTRY
@NM00091 EQU   TCBXTNT2+32
TCBRV181 EQU   TCBRV173
TCBRV180 EQU   TCBRV173
TCBRV179 EQU   TCBRV173
TCBRV178 EQU   TCBRV173
TCBRV177 EQU   TCBRV173
TCBRV176 EQU   TCBRV173
TCBRV175 EQU   TCBRV173
TCBRV174 EQU   TCBRV173
TCBRV172 EQU   TCBRV164
TCBRV171 EQU   TCBRV164
TCBRV170 EQU   TCBRV164
TCBRV169 EQU   TCBRV164
TCBRV168 EQU   TCBRV164
TCBRV167 EQU   TCBRV164
TCBRV166 EQU   TCBRV164
TCBRV165 EQU   TCBRV164
TCBRV163 EQU   TCBRV155
TCBRV162 EQU   TCBRV155
TCBRV161 EQU   TCBRV155
TCBRV160 EQU   TCBRV155
TCBRV159 EQU   TCBRV155
TCBRV158 EQU   TCBRV155
TCBRV157 EQU   TCBRV155
TCBRV156 EQU   TCBRV155
TCBRV154 EQU   TCBRV146
TCBRV153 EQU   TCBRV146
TCBRV152 EQU   TCBRV146
TCBRV151 EQU   TCBRV146
TCBRV150 EQU   TCBRV146
TCBRV149 EQU   TCBRV146
TCBRV148 EQU   TCBRV146
TCBRV147 EQU   TCBRV146
TCBRV145 EQU   TCBXTNT2+26
TCBRV144 EQU   TCBXTNT2+24
TCBRV143 EQU   TCBXTNT2+20
TCBRV142 EQU   TCBXTNT2+16
TCBRSV49 EQU   TCBXTNT2+12
TCBEVENT EQU   TCBXTNT2+8
TCBRCMP  EQU   TCBXTNT2+5
TCBRSVAB EQU   TCBXTNT2+4
TCBGTFA  EQU   TCBGTF+1
TCBRSV47 EQU   TCBTFLG
TCBRSV46 EQU   TCBTFLG
TCBRSV45 EQU   TCBTFLG
TCBRSV44 EQU   TCBTFLG
TCBRSV43 EQU   TCBTFLG
TCBDSPIT EQU   TCBTFLG
TCBERRTN EQU   TCBTFLG
TCBASYNC EQU   TCBTFLG
@NM00090 EQU   TCB+296
TCBSVCA2 EQU   TCB+292
TCBSWASA EQU   TCB+288
TCBDBTB  EQU   TCB+284
TCBRPT   EQU   TCB+280
TCBRV141 EQU   TCBRV133
TCBRV140 EQU   TCBRV133
TCBRV139 EQU   TCBRV133
TCBRV138 EQU   TCBRV133
TCBRV137 EQU   TCBRV133
TCBRV136 EQU   TCBRV133
TCBRV135 EQU   TCBRV133
TCBRV134 EQU   TCBRV133
TCBRV132 EQU   TCBRV124
TCBRV131 EQU   TCBRV124
TCBRV130 EQU   TCBRV124
TCBRV129 EQU   TCBRV124
TCBRV128 EQU   TCBRV124
TCBRV127 EQU   TCBRV124
TCBRV126 EQU   TCBRV124
TCBRV125 EQU   TCBRV124
TCBRV123 EQU   TCBFBYT2
TCBRV122 EQU   TCBFBYT2
TCBECBNV EQU   TCBFBYT2
TCBSSSYN EQU   TCBFBYT2
TCBFPRAP EQU   TCBFBYT2
TCBFDW   EQU   TCBFBYT2
TCBFMW   EQU   TCBFBYT2
TCBCNCB  EQU   TCBFBYT2
TCBLLH   EQU   TCBFBYT1
TCBRV113 EQU   TCBFBYT1
TCBEOT   EQU   TCBFBYT1
TCBRTM2  EQU   TCBFBYT1
TCBPGNLY EQU   TCBFBYT1
TCBNDIOS EQU   TCBFBYT1
TCBRV327 EQU   TCBFBYT1
TCBEOTFM EQU   TCBFBYT1
TCBAFFN  EQU   TCB+274
TCBRV326 EQU   TCB+272
TCBUKYSP EQU   TCB+268
TCBMODE  EQU   TCBESTAE+3
TCBERTYP EQU   TCBESTAE+2
TCBRV314 EQU   TCBESTRM
TCBRV313 EQU   TCBESTRM
TCBRV312 EQU   TCBESTRM
TCBRV311 EQU   TCBESTRM
TCBRV310 EQU   TCBESTRM
TCBRV309 EQU   TCBESTRM
TCBRV308 EQU   TCBESTRM
TCBETERM EQU   TCBESTRM
TCBSCBKY EQU   TCBESTAE
TCBRTM12 EQU   TCB+260
TCBTCBID EQU   TCB+256
TCBSTAWA EQU   TCB+252
TCBSWA   EQU   TCB+248
TCBFOEA  EQU   TCBFOE+1
TCBRSV42 EQU   TCBFOE
TCBCCPVI EQU   TCBXSCT+2
TCBRV325 EQU   TCBXSCT+1
TCBRV324 EQU   TCBXSCT1
TCBRV323 EQU   TCBXSCT1
TCBRV322 EQU   TCBXSCT1
TCBRV321 EQU   TCBXSCT1
TCBRV320 EQU   TCBXSCT1
TCBRV319 EQU   TCBXSCT1
TCBS3A   EQU   TCBXSCT1
TCBACTIV EQU   TCBXSCT1
TCBRSV41 EQU   TCB+239
TCBTID   EQU   TCB+238
TCBRSVAA EQU   TCB+237
TCBABCUR EQU   TCB+236
TCBTMSAV EQU   TCB+232
TCBIOTIM EQU   TCB+228
TCBRTWA  EQU   TCB+224
TCBBACK  EQU   TCB+220
TCBTIRB  EQU   TCB+216
TCBAECB  EQU   TCB+212
TCBEXT2A EQU   TCBEXT2+1
TCBRSV39 EQU   TCBEXT2
TCBSTMCT EQU   TCB+207
TCBSYSCT EQU   TCB+206
TCBRSV37 EQU   TCB+205
TCBEXSVC EQU   TCBDAR
TCBDARMS EQU   TCBDAR
TCBDARWT EQU   TCBDAR
TCBDARO  EQU   TCBDAR
TCBDARMC EQU   TCBDARC
TCBDARD  EQU   TCBDAR
TCBDARS  EQU   TCBDAR
TCBDARP  EQU   TCBDAR
TCBGTOFM EQU   TCBFLGS7
TCBADMP  EQU   TCBFLGS7
TCBRSTSK EQU   TCBFLGS7
TCBSVCS  EQU   TCBFLGS7
TCBSTACK EQU   TCBFLGS7
TCBRSV34 EQU   TCBFLGS7
TCBRSV33 EQU   TCBFLGS7
TCBGPECB EQU   TCBFLGS7
TCBNTJS  EQU   TCBFLGS6
TCBAPG   EQU   TCBFLGS6
TCBMIGR  EQU   TCBFLGS6
TCBRV303 EQU   TCBFLGS6
TCBSPVLK EQU   TCBFLGS6
TCBCPU   EQU   TCBFLGS6
TCBPIE17 EQU   TCBFLGS6
TCBRV    EQU   TCBFLGS6
TCBRSV79 EQU   TCBNDSP5
TCBRSV78 EQU   TCBNDSP5
TCBRSV77 EQU   TCBNDSP5
TCBRSV76 EQU   TCBNDSP5
TCBRSV75 EQU   TCBNDSP5
TCBRSV74 EQU   TCBNDSP5
TCBRSV95 EQU   TCBNDSP5
TCBRSV94 EQU   TCBNDSP5
TCBRSV93 EQU   TCBNDSP4
TCBRSV92 EQU   TCBNDSP4
TCBRSV91 EQU   TCBNDSP4
TCBRSV90 EQU   TCBNDSP4
TCBRSV89 EQU   TCBNDSP4
TCBRSV88 EQU   TCBNDSP4
TCBRSV87 EQU   TCBNDSP4
TCBRSV86 EQU   TCBNDSP4
TCBEXT1A EQU   TCBEXT1+1
TCBRSV32 EQU   TCBEXT1
TCBEXCPD EQU   TCB+192
TCBIOBRC EQU   TCB+188
TCBDDWTC EQU   TCB+186
TCBDDEXC EQU   TCB+184
TCBJSCBB EQU   TCBJSCB+1
@NM00089 EQU   TCBRECDE
TCBREC   EQU   TCBRECDE
TCBMDIDS EQU   TCB+176
TCBNDINT EQU   TCBNDSP3
TCBRSV27 EQU   TCBNDSP3
TCBRSV26 EQU   TCBNDSP3
TCBRSV25 EQU   TCBNDSP3
TCBRSV24 EQU   TCBNDSP3
TCBSRBND EQU   TCBNDSP3
TCBRV302 EQU   TCBNDSP3
TCBLJSND EQU   TCBNDSP3
TCBABE   EQU   TCBNDSP2
TCBDSS   EQU   TCBNDSP2
TCBOWAIT EQU   TCBNDSP2
TCBIWAIT EQU   TCBNDSP2
TCBNDTS  EQU   TCBNDSP2
TCBNDSVC EQU   TCBNDSP2
TCBSTPP  EQU   TCBNDSP2
TCBABD   EQU   TCBNDSP2
TCBRSV22 EQU   TCBNDSP1
TCBPIEND EQU   TCBNDSP1
TCBTPSP  EQU   TCBNDSP1
TCBDDRND EQU   TCBNDSP1
TCBRSPND EQU   TCBNDSP1
TCBRSTND EQU   TCBNDSP1
TCBDARPN EQU   TCBNDSP1
TCBDARTN EQU   TCBNDSP1
TCBNDSP0 EQU   TCBNDSP
TCBUSER  EQU   TCB+168
TCBTCTB  EQU   TCBTCT+1
TCBRSV9C EQU   TCBTCTGF
TCBRSV9B EQU   TCBTCTGF
TCBRSV9A EQU   TCBTCTGF
TCBRSV99 EQU   TCBTCTGF
TCBRSV98 EQU   TCBTCTGF
TCBRSV97 EQU   TCBTCTGF
TCBRSV20 EQU   TCBTCTGF
TCBSMFGF EQU   TCBTCTGF
TCBSTABB EQU   TCBSTAB+1
TCBSTCUR EQU   TCBNSTAE
TCBRV301 EQU   TCBNSTAE
TCBSYNCH EQU   TCBNSTAE
TCBHALT  EQU   TCBNSTAE
TCBPPSUP EQU   TCBNSTAE
TCB33E   EQU   TCBNSTAE
TCBQUIES EQU   TCBNSTAE
TCBSTABE EQU   TCBNSTAE
TCBAQE   EQU   TCB+156
TCBPQE   EQU   TCB+152
TCBTSDP  EQU   TCB+151
TCBTSLP  EQU   TCB+150
TCBSTPCT EQU   TCB+149
TCBCPUBN EQU   TCBTSFLG
TCBDYDSP EQU   TCBTSFLG
TCBRSV18 EQU   TCBTSFLG
TCBRSV17 EQU   TCBTSFLG
TCBTIOTG EQU   TCBTSFLG
TCBATT   EQU   TCBTSFLG
TCBSTPPR EQU   TCBTSFLG
TCBRV300 EQU   TCBTSTSK
TCBECB   EQU   TCB+144
TCBIQE   EQU   TCB+140
TCBLTC   EQU   TCB+136
TCBOTC   EQU   TCB+132
TCBNTC   EQU   TCB+128
TCBJSTCA EQU   TCBJSTCB+1
TCBRSV16 EQU   TCBJSTCB
TCBTQET  EQU   TCBTME
TCBTCB   EQU   TCB+116
TCBFSAB  EQU   TCBFSA+1
TCBQEL   EQU   TCBFSA
TCBGRS15 EQU   TCBGRS+60
TCBGRS14 EQU   TCBGRS+56
TCBGRS13 EQU   TCBGRS+52
TCBGRS12 EQU   TCBGRS+48
TCBGRS11 EQU   TCBGRS+44
TCBGRS10 EQU   TCBGRS+40
TCBGRS9  EQU   TCBGRS+36
TCBGRS8  EQU   TCBGRS+32
TCBGRS7  EQU   TCBGRS+28
TCBGRS6  EQU   TCBGRS+24
TCBGRS5  EQU   TCBGRS+20
TCBGRS4  EQU   TCBGRS+16
TCBGRS3  EQU   TCBGRS+12
TCBGRS2  EQU   TCBGRS+8
TCBGRS1  EQU   TCBGRS+4
TCBGRS0  EQU   TCBGRS
TCBJPQB  EQU   TCBJPQ+1
TCBRSV15 EQU   TCBPURGE
TCBRSV14 EQU   TCBPURGE
TCBRSV13 EQU   TCBPURGE
TCBRSV12 EQU   TCBPURGE
TCBRSV11 EQU   TCBPURGE
TCBRSV10 EQU   TCBPURGE
TCBRSV09 EQU   TCBPURGE
TCBJPQF  EQU   TCBPURGE
TCBJLB   EQU   TCB+40
TCBDSP   EQU   TCB+35
TCBLMP   EQU   TCB+34
TCBPNDSP EQU   TCBFLGS5
TCBFCD1  EQU   TCBFLGS5
TCBSTP   EQU   TCBFLGS5
TCBSYS   EQU   TCBFLGS5
TCBANDSP EQU   TCBFLGS5
TCBPAGE  EQU   TCBFLGS5
TCBUXNDF EQU   TCBABWF
TCBONDSP EQU   TCBFLGS4
TCBMPCND EQU   TCBFLGS4
TCBMPCVQ EQU   TCBFLGS4
TCBUXNDV EQU   TCBFLGS4
TCBHNDSP EQU   TCBFLGS4
TCBRQENA EQU   TCBFLGS4
TCBSER   EQU   TCBFLGS4
TCBNDUMP EQU   TCBFLGS4
TCBDWSTA EQU   TCBFLGS3
TCBRSV08 EQU   TCBFLGS3
TCBRSV07 EQU   TCBFLGS3
TCBRSV06 EQU   TCBFLGS3
TCBABGM  EQU   TCBFLGS3
TCBABTRM EQU   TCBFLGS3
TCBADINP EQU   TCBFLGS3
TCBFSM   EQU   TCBFLGS3
TCBFTS   EQU   TCBFLGS2
TCBFETXR EQU   TCBFLGS2
TCBFDSOP EQU   TCBFLGS2
TCBFJMC  EQU   TCBFLGS2
TCBFSMC  EQU   TCBFLGS2
TCBFABOP EQU   TCBFLGS2
TCBFSTI  EQU   TCBFLGS2
TCBFOINP EQU   TCBFLGS2
TCBFX    EQU   TCBFLGS1
TCBFS    EQU   TCBFLGS1
TCBFT    EQU   TCBFLGS1
TCBPDUMP EQU   TCBFLGS1
TCBNONPR EQU   TCBFLGS1
TCBFERA  EQU   TCBFLGS1
TCBFE    EQU   TCBFLGS1
TCBFA    EQU   TCBFLGS1
TCBZERO  EQU   TCBPKF
TCBFLAG  EQU   TCBPKF
TCBMSSB  EQU   TCBMSS+1
TCBRSV03 EQU   TCBMSS
TCBTRNB  EQU   TCBTRN+1
TCBRSV02 EQU   TCBABF
TCBOLTEP EQU   TCBABF
TCBTCP   EQU   TCBABF
TCBTCPP  EQU   TCBABF
TCBRSV01 EQU   TCBABF
TCBGRPH  EQU   TCBABF
TCBNOCHK EQU   TCBABF
TCBMOD91 EQU   TCBABF
TCBCMPC  EQU   TCBCMP+1
TCBRV318 EQU   TCBCMSG
TCBRV317 EQU   TCBCIND
TCBRV316 EQU   TCBCWTO
TCBCASID EQU   TCBCDBL
TCBNOCC  EQU   TCBSTCC
TCBDMPO  EQU   TCBCPP
TCBCSTEP EQU   TCBCMPF
TCBCREQ  EQU   TCBCMPF
TCBTIO   EQU   TCB+12
TCBDEB   EQU   TCB+8
TCBPIEA  EQU   TCBPIE+1
TCBPM    EQU   TCBPMASK
@NM00088 EQU   TCBPMASK
TCBFRS6  EQU   TCBFRS+24
TCBFRS4  EQU   TCBFRS+16
TCBFRS2  EQU   TCBFRS+8
TCBFRS0  EQU   TCBFRS
SVRBEND  EQU   RBSECT+192
RBFEPARM EQU   RBSECT+168
SIRBEND  EQU   RBSECT+168
RBRSV158 EQU   RBRSV150
RBRSV157 EQU   RBRSV150
RBRSV156 EQU   RBRSV150
RBRSV155 EQU   RBRSV150
RBRSV154 EQU   RBRSV150
RBRSV153 EQU   RBRSV150
RBRSV152 EQU   RBRSV150
RBRSV151 EQU   RBRSV150
RBRSV149 EQU   RBSECT+166
RBRSV148 EQU   RBSECT+164
RBRSV169 EQU   RBSDATA+3
RBSID    EQU   RBSDATA+2
RBSPKEY  EQU   RBSDATA+1
RBRSV168 EQU   RBSFLG3
RBSTERMO EQU   RBSFLG3
RBSBRNTR EQU   RBSFLG3
RBSPRNTR EQU   RBSFLG3
RBSCNCEL EQU   RBSFLG3
RBSRECRD EQU   RBSFLG3
RBSTERMI EQU   RBSFLG3
RBRSV167 EQU   RBSFLG3
RBSOWNRA EQU   RBSOWNR+1
RBSSUPER EQU   RBSFLGS2
RBSKEY0  EQU   RBSFLGS2
RBRSV166 EQU   RBSFLGS2
RBRSV165 EQU   RBSFLGS2
RBSINUSE EQU   RBSFLGS2
RBRSV164 EQU   RBSFLGS2
RBSXCTL2 EQU   RBSFLGS2
RBRSV163 EQU   RBSFLGS2
RBSPARMA EQU   RBSPARM+1
RBSHALT  EQU   RBSIOPRC
RBSNOIOP EQU   RBSIOPRC
RBSASYNC EQU   RBSFLGS1
RBRSV162 EQU   RBSFLGS1
RBSESTAE EQU   RBSFLGS1
RBSDUMMY EQU   RBSFLGS1
RBSSTAR  EQU   RBSFLGS1
RBSSTAI  EQU   RBSFLGS1
RBSEXIT  EQU   RBSCBB+4
RBSCHAIN EQU   RBSCBB
TIRBEND  EQU   @NM00086+8
PRBEND   EQU   @NM00086+8
RBRSV146 EQU   RBRSV138
RBRSV145 EQU   RBRSV138
RBRSV144 EQU   RBRSV138
RBRSV143 EQU   RBRSV138
RBRSV142 EQU   RBRSV138
RBRSV141 EQU   RBRSV138
RBRSV140 EQU   RBRSV138
RBRSV139 EQU   RBRSV138
RBRSV137 EQU   @NM00086+6
RBRSV136 EQU   @NM00086+4
RBRSV135 EQU   @NM00086
@NM00085 EQU   RBSECT+32
@NM00084 EQU   @NM00082+1
RBSCF    EQU   @NM00083
RBPGMQ1  EQU   RBPGMQ+1
@NM00081 EQU   RBPGMQ
@NM00080 EQU   RBSECT+16
@NM00079 EQU   @NM00075
@NM00078 EQU   @NM00075
RBIQETP  EQU   @NM00075
RBUSIQE  EQU   RBETXR
RBATTN   EQU   @NM00075
@NM00077 EQU   @NM00075
@NM00076 EQU   @NM00075
RBATNXIT EQU   @NM00073
@NM00074 EQU   @NM00073
RBWAITP  EQU   @NM00073
RBFNSVRB EQU   RBTRSVRB
RBSIZE   EQU   RBSECT+8
RBABOPSW EQU   RBSECT+4
RBPPSAV1 EQU   RBPPSAV+1
@NM00071 EQU   RBPPSAV
RBPRFXND EQU   RBPREFIX+64
RBINLNTH EQU   RBINTCDA
RBWCSA   EQU   RBPREFIX+60
RBRSV004 EQU   RBPREFIX+57
RBSSSYN  EQU   RBFLAGS1
RBSCB    EQU   RBFLAGS1
RBLONGWT EQU   RBFLAGS1
RBASIR   EQU   RBFLAGS1
RBRSV159 EQU   RBFLAGS1
RBABEND  EQU   RBFLAGS1
RBXWAIT  EQU   RBFLAGS1
RBSLOCK  EQU   RBFLAGS1
RBRTRAN  EQU   RBRTPSW2+4
RBRTINCD EQU   RBRTICIL+2
RBRTILC  EQU   RBRTICIL+1
RBRSV160 EQU   RBRTICIL
RBRTPSW1 EQU   RBRTOPSW
RBRSV062 EQU   RBRSV054
RBRSV061 EQU   RBRSV054
RBRSV060 EQU   RBRSV054
RBRSV059 EQU   RBRSV054
RBRSV058 EQU   RBRSV054
RBRSV057 EQU   RBRSV054
RBRSV056 EQU   RBRSV054
RBRSV055 EQU   RBRSV054
RBRSV053 EQU   RBPREFIX+38
RBRSV052 EQU   RBPREFIX+36
RBRSV051 EQU   RBPREFIX+32
RBPRFXST EQU   RBPREFIX+32
RBRSV050 EQU   RBPREFIX+28
RBRSV049 EQU   RBRSV041
RBRSV048 EQU   RBRSV041
RBRSV047 EQU   RBRSV041
RBRSV046 EQU   RBRSV041
RBRSV045 EQU   RBRSV041
RBRSV044 EQU   RBRSV041
RBRSV043 EQU   RBRSV041
RBRSV042 EQU   RBRSV041
RBRSV040 EQU   RBPREFIX+26
RBRSV039 EQU   RBPREFIX+24
RBRSV038 EQU   RBPREFIX+20
RBRSV037 EQU   RBPREFIX+16
RBRSV036 EQU   RBRSV028
RBRSV035 EQU   RBRSV028
RBRSV034 EQU   RBRSV028
RBRSV033 EQU   RBRSV028
RBRSV032 EQU   RBRSV028
RBRSV031 EQU   RBRSV028
RBRSV030 EQU   RBRSV028
RBRSV029 EQU   RBRSV028
RBRSV027 EQU   RBRSV019
RBRSV026 EQU   RBRSV019
RBRSV025 EQU   RBRSV019
RBRSV024 EQU   RBRSV019
RBRSV023 EQU   RBRSV019
RBRSV022 EQU   RBRSV019
RBRSV021 EQU   RBRSV019
RBRSV020 EQU   RBRSV019
RBRSV018 EQU   RBPREFIX+13
RBRSV017 EQU   RBPREFIX+12
RBSRV016 EQU   RBPREFIX+11
RBRSV015 EQU   RBPREFIX+10
RBRSV014 EQU   RBPREFIX+8
RBRSV013 EQU   RBPREFIX+4
RBRSV012 EQU   RBPREFIX
RBEXSAVE EQU   XRBESA
XRBREG15 EQU   RBGRS15
XRBREG14 EQU   RBGRS14
XRBREG13 EQU   RBGRS13
XRBREG12 EQU   RBGRS12
XRBREG11 EQU   RBGRS11
XRBREG10 EQU   RBGRS10
XRBREG9  EQU   RBGRS9
XRBREG8  EQU   RBGRS8
XRBREG7  EQU   RBGRS7
XRBREG6  EQU   RBGRS6
XRBREG5  EQU   RBGRS5
XRBREG4  EQU   RBGRS4
XRBREG3  EQU   RBGRS3
XRBREG2  EQU   RBGRS2
XRBREG1  EQU   RBGRS1
XRBREG0  EQU   RBGRS0
XRBLNKA  EQU   RBLINKB
XRBWT    EQU   RBWCF
@NM00070 EQU   RBBASIC+24
RBOPSWPS EQU   RBOPSWB2
@NM00069 EQU   RBOPSWB2
@NM00068 EQU   XRBPSW
@NM00067 EQU   RBBASIC+12
XRBWAIT  EQU   RBECBWT
XRBFRRB  EQU   RBFDYN
@NM00066 EQU   XSTAB2
XRBACTV  EQU   RBFACTV
XRBTCBP  EQU   RBTCBNXT
@NM00065 EQU   XSTAB1
XRBCKPT  EQU   RBFTCKPT
@NM00064 EQU   XSTAB1
@NM00063 EQU   RBBASIC+8
@NM00062 EQU   RBEXRTNM+1
RBTMIND3 EQU   RBTMFLD
RBTMIND2 EQU   RBTMFLD
RBTMCMP  EQU   RBTMFLD
RBWLIM   EQU   RBTMFLD
RBRSV005 EQU   RBTMFLD
RBTMTOD  EQU   RBTMFLD
RBTMQUE  EQU   RBTMFLD
@NM00061 EQU   RBPRFX
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00036 EQU   CVTFIX+248
@NM00035 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTCCVT  EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTBAH   EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTRV490 EQU   CVTMAP+388
CVTSU    EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTLDEV  EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTVS1B  EQU   CVTOPTB
CVTVS1A  EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTSV76Q EQU   CVTSV76C
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTSV76M EQU   CVTIOQET
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
ABDTRLN  EQU   ABDAREA+676
ABDSAVE1 EQU   ABDAREA+672
ABDSAVHD EQU   ABDAREA+592
ABDPADC  EQU   ABDAREA+589
ABDLINE  EQU   ABDLINEA+1
ABDCC    EQU   ABDLINEA
ABDSRC2  EQU   ABDAREA+382
ABDLOG   EQU   ABDAREA+380
ABDSRC1  EQU   ABDAREA+378
ABDPHY   EQU   ABDAREA+376
ABDLCNT  EQU   ABDAREA+372
@NM00034 EQU   ESPARM+29
@NM00033 EQU   ESTAEFLG
EDCB     EQU   ESTAEFLG
ETCB     EQU   ESTAEFLG
ESUBSYT  EQU   ESTAEFLG
ERESTART EQU   ESPARM+24
EMODNAME EQU   ESPARM+16
EABDAREA EQU   ESPARM+12
ESAUTOP  EQU   ESPARM+8
ESBSREG2 EQU   ESPARM+4
ESBSREG  EQU   ESPARM
ABDRTRN  EQU   ABDAREA+336
ABDSVCB  EQU   ABDAREA+332
@NM00032 EQU   ABDGMA+14
ABDCDID  EQU   ABDGMA+12
ABDPAREA EQU   ABDGMA+8
ABDBUFSZ EQU   ABDBUFFS+4
ABDBUFAD EQU   ABDBUFFS
ABSLCTSV EQU   ABDAREA+304
ABDSTADS EQU   ABDAREA+300
ABDUPRID EQU   ABDAREA+296
ABDPCAP  EQU   ABDAREA+295
ABDLLNGH EQU   ABDAREA+294
ABDINCPL EQU   ABDAREA+292
ABDFWORK EQU   ABDAREA+288
ABDIDENT EQU   ABDAREA+286
ABDIND   EQU   ABDAREA+284
ABDSIZE  EQU   ABDAREA+280
ABDSTAD  EQU   ABDAREA+268
@NM00031 EQU   ABDBLNKS
@NM00030 EQU   ABDBLNKS
@NM00029 EQU   ABDBLNKS
@NM00028 EQU   ABDBLNKS
@NM00027 EQU   ABDBLNKS
@NM00026 EQU   ABDBLNKS
@NM00025 EQU   ABDBLNKS
ABDBLKN3 EQU   ABDBLNKS
@NM00024 EQU   ABDUPRFN
@NM00023 EQU   ABDUPRFN
@NM00022 EQU   ABDUPRFN
@NM00021 EQU   ABDUPRFN
@NM00020 EQU   ABDUPRFN
@NM00019 EQU   ABDUPRFN
ABDUPRPM EQU   ABDUPRFN
@NM00018 EQU   ABDUPRF
@NM00017 EQU   ABDUPRF
@NM00016 EQU   ABDUPRF
@NM00015 EQU   ABDUPRF
@NM00014 EQU   ABDUPRF
UPRFMT20 EQU   ABDUPRF
UPRFMAT  EQU   ABDUPRF
ABDFMTWK EQU   ABDAREA+256
ABDLPTR  EQU   ABDAREA+252
ABDSSPAR EQU   ABDAREA+188
ABDWORK  EQU   ABDAREA+140
@NM00013 EQU   ABDRES1
ABDTRSV  EQU   ABDRES1
ABDPGHD  EQU   ABDRES1
ABDFMTLD EQU   ABDRES1
ABDSQA   EQU   ABDRES1
ABDOLSQA EQU   ABDRES1
ABDREGS  EQU   ABDRES1
ABDPSW   EQU   ABDRES1
ABDKEY   EQU   ABDAREA+138
ABDLSQA  EQU   ABDFLAG2
ABDSTAT  EQU   ABDFLAG2
ABDSWAP  EQU   ABDFLAG2
ABDGTFCL EQU   ABDFLAG2
ABDTRNAV EQU   ABDFLAG2
ABDTRBIT EQU   ABDFLAG2
ABDGTF   EQU   ABDFLAG2
ABDSUPER EQU   ABDFLAG2
ABDIDX   EQU   ABDFLAG1
ABDSPHD  EQU   ABDFLAG1
ABDSVCHD EQU   ABDFLAG1
ABDSQSDM EQU   ABDFLAG1
ABDLSTHD EQU   ABDFLAG1
ABDQCBMN EQU   ABDFLAG1
ABDQCBMJ EQU   ABDFLAG1
ABDQCBHD EQU   ABDFLAG1
ABDPGWK  EQU   ABDAREA+128
ABDWORK1 EQU   ABDAREA+120
ABDRESV3 EQU   ABDAREA+116
ABDUPRXT EQU   ABDAREA+112
ABDCP1   EQU   ABDAREA+108
ABDLP    EQU   ABDAREA+104
ABDFP    EQU   ABDAREA+100
ABDCP    EQU   ABDAREA+96
ABDPTRS3 EQU   ABDPTRS+8
ABDPTRS2 EQU   ABDPTRS+4
ABDPTRS1 EQU   ABDPTRS
ABDPCTR  EQU   ABDAREA+82
ABDLCTR  EQU   ABDAREA+80
ABDIOBP  EQU   ABDAREA+76
ABDPTR   EQU   ABDAREA+72
ABDDCB   EQU   ABDAREA+68
ABDLEN   EQU   ABDAREA+66
ABDTYPE  EQU   ABDAREA+64
ABDECB   EQU   ABDAREA+60
ABDSAVE  EQU   ABDAREA+56
ABDDECB  EQU   ABDAREA+52
ABDPARA  EQU   ABDAREA+48
ABDINXPT EQU   ABDAREA+40
ABDCTR   EQU   ABDAREA+38
@NM00012 EQU   ABDAREA+36
ABDHDRAD EQU   ABDPARMS+20
ABDSNAPP EQU   ABDPARMS+16
ABDPTCBP EQU   ABDPARMS+12
ABDPDCBP EQU   ABDPARMS+8
@NM00011 EQU   ABDPARMS+7
@NM00010 EQU   APFPDATA
APFSPALL EQU   APFPDATA
APFPSW   EQU   APFPDATA
APFREGS  EQU   APFPDATA
APFSAVE2 EQU   APFPDATA
APFSAVE  EQU   APFPDATA
@NM00009 EQU   APFSDAT1
APFERR   EQU   APFSDAT1
APFIO    EQU   APFSDAT1
APFDM    EQU   APFSDATA
APFQCB   EQU   APFSDATA
APFSUPDA EQU   APFSDATA
APFTRACE EQU   APFSDATA
APFSWA   EQU   APFSDATA
APFLSQA  EQU   APFSDATA
APFSQA   EQU   APFSDATA
APFNUC   EQU   APFSDATA
@NM00008 EQU   ABDPARMS+2
APFHDR   EQU   ABDFLAG
APFSNAPP EQU   ABDFLAG
APFTCB   EQU   ABDFLAG
APFID    EQU   ABDFLAG
APFENVS2 EQU   ABDFLAG
APFVS2   EQU   ABDFLAG
APFSNAP  EQU   ABDFLAG
ABDPID   EQU   ABDPARMS
ABDCRB   EQU   ABDAREA+8
@NM00004 EQU   MODENT+8
@NM00003 EQU   ENTFLAGS+1
ENTFLAG1 EQU   ENTFLAGS
@NM00002 EQU   MODFLAGS+1
@NM00001 EQU   MODFLAG1
MODLST   EQU   MODFLAG1
MODEND   EQU   MODFLAG1
MODXLST  EQU   MODFLAG1
@NM00060 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00059 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSALITA  EQU   PSA+764
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00058 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00057 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSARV013 EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAAOLD  EQU   PSA+548
PSAANEW  EQU   PSA+544
PSATOLD  EQU   PSA+540
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00056 EQU   FLCFSA
@NM00055 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00054 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00053 EQU   FLCIOA
@NM00052 EQU   FLCMCLA+15
@NM00051 EQU   FLCMCLA+14
@NM00050 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00049 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00048 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00047 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00046 EQU   FLCPER
@NM00045 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00044 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00043 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00042 EQU   FLCPIILC
@NM00041 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00040 EQU   FLCSVILC
@NM00039 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00038 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00037 EQU   FLCICCW2+4
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
*                                      END UNREFERENCED COMPONENTS
@RT00155 EQU   FREERET
@RT00178 EQU   NEXTLLE
@RT00180 EQU   NEXTLLE
@RT00193 EQU   NEXTLLE
@RT00198 EQU   FREERET
@RF00298 EQU   TBLEND
@RT00349 EQU   TESTLPA
@RF00349 EQU   TESTJPA
@RT00352 EQU   DOIT
@RF00352 EQU   DONE
@RT00360 EQU   DONE
@RT00371 EQU   SKIPPT
BAD      EQU   @EL00002
@RT00400 EQU   ENDLOOP
@RT00402 EQU   ENDLOOP
@RT00422 EQU   FOUNDIT
@RF00422 EQU   ENDLOOP
@RT00429 EQU   CDEFOUND
@RT00435 EQU   GETLPDE
@RF00435 EQU   ENDLOOP
@RT00441 EQU   FOUNDIT
@RF00441 EQU   ENDLOOP
@RT00451 EQU   ENDLOOP
@RT00463 EQU   ENDLOOP
@RT00471 EQU   ENDLOOP
@PB00005 EQU   @EL00003
@RC00529 EQU   @EL00006
@PB00006 EQU   @PB00007
@RT00561 EQU   BADMOD
@PB00004 EQU   @PB00005
@PB00003 EQU   @PB00006
@RC00477 EQU   @PB00004
@ENDDATA EQU   *
         END   IEAVAD0B,(C'PLS0956',0701,77332)
