         TITLE 'IEAVAD71 - SNAP MODULE - FORMET SUBROUTINE'
* /* START OF SPECIFICATIONS ****
*
*01*  MODULE-NAME = IEAVAD71 ( VS2 )
*
*01*  DESCRIPTIVE-NAME = SNAP FORMET ROUTINE
*
*01*  COPYRIGHT = NONE
*
*01*  STATUS = VERSION 1
*
*
*01*  FUNCTION = THIS ROUTINE PRODUCES THE PORTION OF THE DUMP THAT
*     CONSISTS OF THE ADDRESS PORTION OF THE DATA, EIGHT OR SIXTEEN
*     WORDS OF DATA AND THE EBCDIC TRANSLATION OF THESE WORDS.
*     THE NUMBER OF WORDS PER LINE IS DETERMINED BY ABDLLNGH IN
*     ABDAREA (ABDLLNGH IS THE LENGTH OF THE LINE IN BYTES).
*
*02*     OPERATION = THIS ROUTINE DETERMINES HOW MANY LINES WILL
*        BE REQUIRED TO DUMP THE REQUESTED STORAGE.  IT THEN BUILDS
*        THE RECORDS USING A LAYOUT LINE PATTERN, ONE BY ONE
*        TO REPRODUCE THIS STORAGE.  EACH FULL LINE CONTAINS
*        A THREE BYTE ADDRESS FOLLOWED BY EIGHT WORDS OF STORAGE,
*        IF A STANDARD LINE LENGTH, OR SIXTEEN WORDS OF STORAGE,
*        IF THE LONG LINE IS REQUESTED, FOLLOWED BY THE EBCDIC
*        TRANSLATION OF THESE WORDS.  THE LENGTH OF THE LINE TO
*        BE DUMPED IS DETERMINED BY ABDLLNGH IN ABDAREA.  AFTER
*        EACH RECORD IS BUILT, IEAVAD11 IS CALLED TO MOVE THE
*        RECORD TO AN OUTPUT BUFFER                       Z40MPXH
*
*
*01*  NOTES
*
*02*    CHARACTER-CODE-DEPENDENCIES = THIS MODULE IS EBCDIC CHARACTER
*       CODE DEPENDENT.
*
*02*    DEPENDENCIES = NONE
*
*02*    PERFORMANCE = AS IN FUNCTION.
*
*02*    RESTRICTIONS = NONE
*
*02*    REGISTER-CONVENTIONS = THE REGISTER CONVENTIONS ARE DESCRIBED
*       UNDER REGISTER EQUATES.
*
*02*    PATCH-LABEL = NONE
*
*01*  MODULE-TYPE = MODULE
*
*02*    PROCESSOR = ASSEMBLER-370R
*
*02*    MODULE-SIZE =     BYTES
*
*02*    ATTRIBUTES = REENTERABLE
*
*01*  ENTRY = IEAVAD71
*
*02*    PURPOSE = FORMAT DATA AS DESCRIBED ABOVE
*
*02*    LINKAGE = BALR
*
*02*    INPUT = ABDBLOCK SHOULD CONTAIN THE ADDRESS OF THE DATA TO BE
*       DISPLAYED. ABDLENTH SHOULD CONTAIN THE SIZE OF THE DATA BLOCK
*       TO BE DISPLAYED. IF A UPR EVENT IS ANTICIPATED, UPRFMET SHOULD
*       BE SET TO '1'B. IF UPR ANTICIPATED SET ABDUPRFN TO X'80' TO
*       DISPLAY THE NOT ALLOCATED MESSAGE OR TO X'40' TO SKIP A LINE IN
*       THE DISPLAY WHERE THE UPR OCCURRED. ANY OTHER SETTING WILL
*       RESULT IN A RETURN TO THE CALLER WITH A CODE OF ZERO. GPR1 MUST
*       CONTAIN THE ADDRESS OF ABDAREA, GPR13 THE ADDRESS OF THE
*       CALLERS SAVE AREA, GPR14 THE RETURN ADDRESS AND GPR15 THE
*       ADDRESS OF IEAVAD71.
*
*02*    OUTPUT = LINES OF THE DUMP
*
*02*    EXIT-NORMAL = BACK TO CALLER
*
*02*    EXIT-ERROR = BACK TO CALLER WITH A CODE OF EIGHT IF SPACE FOR A
*       SAVE AREA IS NOT AVAILABLE. A 0C4 ABEND OCCURS IF AN UNEXPECTED
*       UPR OCCURS
*
*01*  EXTERNAL-REFERENCES
*
*02*    ROUTINES = IEAVAD11,IEAVAD51,IEAVAD61
*
*02*    DATA-SETS = NONE
*
*02*    DATA-AREA = ABDAREA - ABDUMP WORK AREA
*
*01*  TABLES = NONE
*
*01*  MACROS = GETMAIN,FREEMAIN,IHAABDA
*
*01*  CHANGE-ACTIVITY = YM2513,Z40MPXH
*
*
**** END OF SPECIFICATIONS ***/
IEAVAD71 CSECT
*
* REGISTER EQUATES
*
R0       EQU   0                   NAME FOR REGISTER RESTORING
ABDARPTR EQU   1                   ADDRESS OF ABDAREA
PARAM    EQU   1                   POINTER TO GETMAIN PARAM LIST
START    EQU   2                   ADDRESS OF NEXT DATA TO BE DISPLAYED
INDENTCN EQU   3                   NUMBER OF BYTES IN CURRENT LINE
*                                  NOT TO BE DISPLAYED
* REGISTERS INCOMP AND SIZE MUST REMAIN AN EVEN-ODD PAIR SINCE THEY
* ARE USED IN A DIVIDE OPERATION
INCOMP   EQU   4                   NUMBER OF BYTES IN LAST LINE
*                                  TO BE DISPLAYED
SIZE     EQU   5                   NUMBER OF BYTES TO BE DISPLAYED
LINES    EQU   5                   NUMBER OF COMPLETE LINES TO
*                                  BE DISPLAYED
LAYLINE  EQU   6                   ADDRESS OF LAYOUT LINE
CURLINE  EQU   6                   ADDRESS OF NEXT LINE TO BE DISPLAYED
LASTLINE EQU   7                   ADDRESS OF LAST LINE DISPLAYED
LINESIZE EQU   8                   SET FOR SHORT OR LONG LINE  ZM40084
MISSING  EQU   11                  NUMBER OF LINES UNDEFINED   ZM40084
PGADDR   EQU   9                   NEXT POSSIBLE DEFINED ADDR
MASK     EQU   10                  USED BY ROUNDING           Z40MPXH
WORK     EQU   11                  GENERAL WORK REGISTER
SAVERET  EQU   11                  SAVE RETURN CODE OVER FREEMAIN
BASE     EQU   12                  BASE REGISTER
SAVEAREA EQU   13                  ADDRESS OF SAVE AREA
RETREG   EQU   14                  RETURN ADDRESS
TEMP     EQU   14                  WORK REGISTER
BASEIN   EQU   15                  TEMPORARY BASE REGISTER
RETCODE  EQU   15                  RETURN CODE
TOREG    EQU   15                  ENTRY ADDRESS TO SUBROUTINE
         EJECT
* GENERAL EQUATES
*
ZERO     EQU   0                   CONSTANT
ONE      EQU   1                   CONSTANT
TWO      EQU   2                   CONSTANT
THREE    EQU   3                   CONSTANT
FOUR     EQU   4                   CONSTANT
FIVE     EQU   5                   CONSTANT
SIX      EQU   6                   CONSTANT
EIGHT    EQU   8                   CONSTANT
NINE     EQU   9                   CONSTANT
TWELVE   EQU   12                  CONSTANT
K14      EQU   14                  CONSTANT
K17      EQU   17                  CONSTANT
K18      EQU   18                  CONSTANT
TWENTY   EQU   20                  CONSTANT
K22      EQU   22                  CONSTANT
K24      EQU   24                  CONSTANT
K25      EQU   25                  CONSTANT
K29      EQU   29                  CONSTANT
L32      EQU   32                  CONSTANT
L64      EQU   64                  CONSTANT                     Z40MPXH
TWO04    EQU   204                 CONSTANT                     Z40MPXH
ONE20    EQU   120                 CONSTANT                     Z40MPXH
SEVENTY2 EQU   72                  CONSTANT
M32      EQU   5                   VALUE FOR SHIFT TO MULTIPLY BY 32
M64      EQU   6                   SHIFT TO MULITPLY BY 64     Z40MPXH
D32      EQU   5                   VALUE FOR SHIFT TO DIVIDE BY 32
D64      EQU   6                   SHIFT TO DIVIDE BY 64    Z40MPXH
PREV     EQU   4                   DISPLACEMENT IN SAVEAREA
NEXT     EQU   8                   DISPLACEMENT IN SAVEAREA
MULT4    EQU   X'FC'               ROUND DOWN TO MULTIPLE OF WORDS
ALL      EQU   X'FF'               MASK TO RESET BITS
PGTEST   EQU   X'FF'               MASK T0 REFERENCE PG IN VALID TEST
SEPCHAR  EQU   C'-'                INSERTED INTO OUTPUT MESSAGE
DOUBLE   EQU   C'0'                DOUBLE SPACE CARRIAGE CONTROL CHAR
BLANK    EQU   C' '                FOR BLANKING ABDLINE
FREEMAIN EQU   10                  SVC NUMBER
         EJECT
* AFTER SAVING THE CALLERS REGISTERS IN THE PROVIDED SAVE AREA, THE
* ROUTINE ISSUES A CONDITIONAL GETMAIN FOR SPACE FOR ITS OWN SAVE
* AREA. IF THE GETMAIN FAILS, CONTROL IS RETURNED TO THE CALLER WITH
* A CODE OF EIGHT. OTHERWISE, THE SAVE AREAS AREA CHAINED IN STANDARD
* FASHION AND PROCESSING CONTINUES.
         USING *,BASEIN
         MODID BR=YES
         DROP  BASEIN
         STM   RETREG,BASE,TWELVE(SAVEAREA)  SAVE CALLERS REGISTERS
         BALR  BASE,ZERO           ESTABLISH ADDRESSIBILITY
         USING *,BASE
         LR    WORK,ABDARPTR       SAVE ABDAREA ADDRESS OVER GM
* ESTABLISH TEMPORARY BASE FOR ABDAREA
         USING ABDAREA,WORK
         LA    PARAM,ABDGMA+FOUR   SET ADDR OF GETMAIN PARAM LIST
* ISSUE GETMAIN FOR 72 BYTES FROM SUBPOOL 253 FOR USE AS REGISTER
* SAVE AREA
         GETMAIN  EC,LV=72,SP=253,A=ABDGMA,MF=(E,(1))
* ESTABLISH REAL BASE FOR ABDAREA
         LR    ABDARPTR,WORK       RESTORE ABDAREA ADDRESS
         DROP  WORK
         USING ABDAREA,ABDARPTR
* IF GETMAIN IS NOT SUCCESSFUL CONTROL IS RETURNED TO CALLER WITH
* CODE OF EIGHT
         LTR   RETCODE,RETCODE     WAS SPACE OBTAINED
         BNZ   EXITEND             NO, BRANCH TO EXITING ROUTINE
         L     WORK,ABDGMA         GET ADDR OF AREA OBTAINED BY GM
         ST    SAVEAREA,PREV(WORK) BACK CHAIN SAVE AREAS
         ST    WORK,NEXT(SAVEAREA) FORWARD CHAIN SAVE AREAS
         LR    SAVEAREA,WORK       PUT NEW SAVE AREA ADDR IN R13
* MASK AND LINESIZE WILL BE INITIALIZED ACCORDING TO THE LENGTH OF
* THE DUMP LINES, EITHER 32 OF 64 BYTES PER LINE               Z40MPXH
         CLI   ABDLLNGH,TWO04      CHECK FOR LONG LINE         Z40MPXH
         BE    LONGINIT            YES, INITIALIZE LONG        Z40MPXH
         L     MASK,MASKWD         SET MASK FOR 120C LINE      Z40MPXH
         N     MASK,MASK32                                     Z40MPXH
         L     LINESIZE,THIRTY2    32 BYTES PER STANDARD LINE  ZM40084
         B     COMMON              CONT COMMON PROCESSING      Z40MPXH
LONGINIT L     MASK,MASKWD        SET MASK FOR 204C LINE       Z40MPXH
         N     MASK,MASK64                                     Z40MPXH
         L     LINESIZE,SIXTY4     64 BYTES PER CONDENSED LINE ZM40084
* THE USER HAS SUPPLIED THE INITIAL PRINT ADDRESS - ABDBLOCK - AND THE
* SIZE OF THE AREA TO BE PRINTED - ABDLENTH. THE ROUTINE ROUNDS THE
* INITIAL ADDRESS DOWN TO A FULL WORD BOUNDARY AND INCREASES THE
* SIZE BY THE ADDITIONAL BYTES. THE TOTAL SIZE IS THEN ROUNDED UP TO
* A FULL WORD BOUNDARY. INITIAL ADDRESS AND SIZE ARE PLACED IN ABDSTAD
* AND ABDSIZE.
COMMON L     WORK,ABDBLOCK       OBTAIN INIT PRINT ADDR        Z40MPXH
         ST    WORK,ABDSTAD        INIT ABDSTAD FIELD
         NI    ABDSTAD+THREE,MULT4 ROUND DOWN TO WORD BOUNDARY
         S     WORK,ABDSTAD        CALC NUMBER OF BYTES GAINED BY ROUND
         A     WORK,ABDLENTH       ADD USER SIZE TO GAIN
         LA    WORK,THREE(WORK)    START ROUND UP TO WORD BOUNDARY
         ST    WORK,ABDSIZE        INIT SIZE OF AREA TO DISPLAY
         NI    ABDSIZE+THREE,MULT4 ROUND DOWN TO WORD BOUNDARY
         XC    ABDUPRID(FOUR),ABDUPRID  INIT FIELD
         XC    ABDIND(FOUR),ABDIND SET INDENTATION FACTOR AND
*                                  NUMBER OF IDENTICAL LINES TO ZERO
* SINCE THE ROUTINE IS DESIGNED TO DISPLAY DATA IN MULTIPLES OF 32
* OR 64 BYTES ON A 32 OR 64 BYTE BOUNDARY, RESPECTIVELY, THE INITIAL
* PRINT ADDRESS IS ROUNDED DOWN TO A MULTIPLE OF THE NUMBER OF
* BYTES PER DUMP LINE AND THE NUMBER OF BYTES ADDED IS SAVED
* IN ABDIND TO LATER SUPPRESS THE DISPLAY OF THE ADDITIONAL BYTES.
         L     START,ABDSTAD       RETRIEVE INIT PRINT ADDRESS
         NR    START,MASK          ROUND ADDR DOWN TO THE PROPER
*                                  LINE BOUNDARY            Z40MPXH
         S     START,ABDSTAD       STILL EQUAL INIT ADDR
         BZ    FORMET01            YES, BRANCH - NO INDENT FACTOR
         LCR   INDENTCN,START      THE POSITIVE OF THE DIFFERENCE
*                                  IS NUMBR OF BYTES TO SUPPRESS
         STH   INDENTCN,ABDIND     SAVE VALUE IN ABDAREA
* THE TOTAL LINESIZE IS THEN DIVIDED BY SIZE TO YIELD THE NUMBER OF
* LINES TO BE DISPLAYED IN REGISTER LINES AND THE NUMBER OF EXTRA
* BYTES TO BE DISPLAYED ON THE LAST LINE. THE LATTER VALUE IS SAVED IN
* ABDINCPL.
FORMET01 L     SIZE,ABDSIZE        RETRIEVE SIZE OF PRINT AREA
         AH    SIZE,ABDIND         INCREMENT BY INDENTATION FACTOR
         SR    INCOMP,INCOMP
         DR    INCOMP,LINESIZE     DIVIDE TOT SIZE BY LINESIZE  ZM40084
         STH   INCOMP,ABDINCPL     SAVE REMAINDER
         LTR   LINES,LINES         ANY COMPLETE LINES TO PROCESS
         BNZ   COMPLINE            YES, GO PROCESS THEM
* WHEN ALL COMPLETE LINES HAVE BEEN PROCESSED, CONTROL IS RETURNED
* HERE.
INCPLINE LH    INCOMP,ABDINCPL     RETRIEVE COUNT OF EXTRA BYTES
         LTR   INCOMP,INCOMP       IS THERE PARTIAL LINE
         BNZ   DOLAST              YES, PROCESS LAST LINE
NORMEXIT LA    RETCODE,ZERO        SET RETURN CODE TO 0
EXIT     LR    SAVERET,RETCODE     SAVE RETURN CODE OVER FREEMAIN
         NI    ABDUPRF,ALL-UPRFMET RESET UPR INDICATOR
         LR    PARAM,SAVEAREA      SET R1 TO ADDRESS OF SPACE TO
*                                  BE FREED
         L     SAVEAREA,PREV(SAVEAREA)  RESTORE ADDRESS OF CALLERS
*                                       SAVE AREA
         L     R0,FREECON          SET R0 VALUE FOR FREEMAIN
         SVC   FREEMAIN            FREE SAVE AREA SPACE
         LR    RETCODE,SAVERET     RESTORE RETURN CODE
RETURN   L     RETREG,TWELVE(SAVEAREA)  RESTORE REGISTER 14
         LM    R0,BASE,TWENTY(SAVEAREA) RESTORE REGISTERS 0-12
         BR    RETREG              RETURN TO CALLER
EXITEND  LA    RETCODE,EIGHT       SET RETURN CODE FOR INSUFFICIENT
*                                  SPACE
         NI    ABDUPRF,ALL-UPRFMET RESET UPR INDICATOR
         B     RETURN              GO FINISH EXIT PROCEDURE
         EJECT
* THE NEXT SECTION OF CODE IS INCOMPLETE - LAST - LINE PROCESSING
* WHERE THE LAST LINE DOES NOT CONTAIN ENOUGH BYTES FOR FULL LINE.
* FORMAT20 IS CALLED UNPACK LOCATION COUNTER AND TO PROVIDE AN EBCDIC
* TRANSLATION OF THE LINE AND, FOR EACH WORD OF THE LAST LINE TO
* BE DISPLAYED, THE ROUTINE CALLS FORMAT22 TO UNPACK THE DATA.
* THE PROCESSING ALSO INCLUDES SPECIAL PROVISION FOR ANTICIPATED
* UPR EVENTS WHICH WILL BE DESCRIBED WITH THE APPLICABLE CODE.
DOLAST   TM    ABDUPRF,UPRFMET     IS UPR ANTICIPATED
         BNO   FORMET09            NO, BRANCH
         OI    ABDUPRF,UPRFMT20    SET FORMAT20 TO EXPECT UPR
FORMET09 L     WORK,ABDSTAD        SET LOCATION COUNTER ADDRESS TO
         SH    WORK,ABDIND         INIT ADDR MINUS INDENTATION FACTOR
*                                  I.E. BYTE BDY OF THE LINE   Z40MPXH
         ST    WORK,ABDFWORK       FORMAT20 EXPECTS IT HERE
         LA    WORK,ABDFWORK+ONE   SET DATA ADDR FOR FORMAT20
         ST    WORK,ABDBPTR        IN ABDBPTR
         ST    LINES,ABDLCNT       FORMAT20 NEEDS COUNT OF
*                                      LINES                    Z40MPXH
         L     TOREG,VAD51         GET ADDR OF FORMAT20
         BALR  RETREG,TOREG        GO TO FORMAT20
* FORMAT20 RETURNS A CODE OF EIGHT IF A UPR OCCURED
         SH    RETCODE,HALF8       IS RETURN DUE TO UPR
         BZ    LASTUPR             YES, GO PROCESS UPR
         MVC   ABDBPTR(FOUR),ABDSTAD    SET INIT DATA ADDR
* THE FOLLOWING SECTION OF CODE CALCULATES THE ADDRESS OF THE LAYOUT
* LINE TO BE USED TO FORMAT THE FIRST WORD OF THE LINE
* THE LAYOUT LINE TO BE USED DEPENDS ON THE PRINT LINE FORMAT
* INCLLINE FOR STANDARD OR INCL64 FOR CONDENSED LINE FORMAT     Z40MPXH
         LH    INDENTCN,ABDIND     RETRIEVE INDENTATION COUNT
         SRL   INDENTCN,TWO        DIVIDE BY FOUR FOR INDEX INTO
*                                  LAYOUT LINES
         MH    INDENTCN,HALF3      MULTIPLY BY THREE FOR ACTUAL
*                                  DISPLACEMENT INTO LAYOUT LINES
         CLI   ABDLLNGH,TWO04      CONDENSED LINE?              Z40MPXH
         BE    LNGLAST             YES, USE LONG LAYOUT LINE    Z40MPXH
         LA    WORK,INCLLINE(INDENTCN)  GET ADDR DESIRED LAYOUT LINE
         B     LAST                                             Z40MPXH
LNGLAST  LA    WORK,INCL64(INDENTCN)    CONDENSED LAYOUT        Z40MPXH
LAST     ST    WORK,ABDLLINE       SET IT FOR FORMAT22         Z40MPXH
* CALCULATE THE NUMBER OF WORDS TO BE DISPLAYED ON THE LAST LINE
* AS (NUMBER OF BYTES LEFT OVER FROM COMPLETE LINE PROCESSING MINUS
* THE INDENTATION FACTOR) DIVIDED BY FOUR.
         LH    WORK,ABDINCPL       GET NUMBER OF BYTES IN PARTIAL LINE
         SH    WORK,ABDIND         SUBTRACT INDENTATION FACTOR
         SRL   WORK,TWO            DIVIDE BY 4 TO GET WORDS ON LINE
FORMET11 TM    ABDUPRF,UPRFMET     DID CALLER ANTICIPATE UPR
         BNO   FORMET10            NO, BRANCH
         OI    ABDUPRF,UPRFMT20    SET FORMAT22 TO INTERCEPT UPR
FORMET10 L     TOREG,VAD61         ADDR OF FORMAT22
         BALR  RETREG,TOREG        GO TO FORMAT22
         SH    RETCODE,HALF8       DID FORMAT22 HAVE UPR
         BZ    LASTUPR             YES, GO PROCESS IT
         BCT   WORK,FORMET11       SUBTRACT 1 FROM WORD COUNT AND
*                                  IF NOT ZERO GO PROCESS NEXT WORD
* WHEN ALL THE WORDS ON THE LAST LINE HAVE BEEN EDITED, PRINT THE
* LINE AND RETURN TO CALLER WITH NORMAL CODE
         L     TOREG,VAD11         GET OUTPUT ADDR
         BALR  RETREG,TOREG        GO TO OUTPUT ROUTINE
         B     NORMEXIT            EXIT TO CALLER
         EJECT
* THIS SECTION OF THE ROUTINE PROCESSES COMPLETE LINES OF DATA.
* AN EBCDIC TRANSLATION OF EACH LINE IS GIVEN AND ALL OF THE DATA IS
* UNPACKED INTO THE OUTPUT LINE. THERE ARE TWO SPECIAL CASES. THE
* FIRST LINE MAY HAVE THE FIRST PORTION SUPPRESSED IF THE USER DID NOT
* REQUEST A DISPLAY BEGINNING ON A LINE BOUNDARY. ALSO,
* EACH LINE IS COMPARED TO THE LAST PRINTED LINE AND, IF EQUAL, IS
* NOT DISPLAYED. A MESSAGE IS PRODUCED, HOWEVER, INDICATING EQUAL
* LINES.
FORMET02 EQU   *
COMPLINE L     START,ABDSTAD       RETRIEVE INIT PRINT ADDR
         SH    START,ABDIND        SET INIT ADDR TO LINE BDY    Z40MPXH
         ST    START,ABDFWORK      SET IN FIELD AS LOCATION COUNTER
         LA    WORK,ABDFWORK+ONE   SET ADDR OF DATA AREA
         ST    WORK,ABDBPTR        FOR FORMAT20
         ST    LINES,ABDLCNT       AND COUNT OF LINES           Z40MPXH
         TM    ABDUPRF,UPRFMET     DID CALLER ANTICIPATE UPR
         BNO   TOVAD51             NO, BRANCH
         OI    ABDUPRF,UPRFMT20    SET FORMAT20 TO INTERCEPT UPR
TOVAD51  L     TOREG,VAD51         GET ADDR OF FORMAT20
         BALR  RETREG,TOREG        GO TO FORMAT20 ROUTINE
         SH    RETCODE,HALF8       DID FORMAT20 HAVE UPR
         BZ    UPR                 YES, GO PROCESS IT
* THE ROUTINE THEN CALCULATES HOW MANY WORDS SHOULD NOT BE DISPLAYED
* ON THE LINE. THIS IS ONLY MEANINGFUL ON THE FIRST COMPLETE LINE TO
* ALLOW FOR THE INDENTATION FACTOR. ON ALL OTHER LINES, THE RESULT IS
* ZERO.
         LH    INDENTCN,ABDIND     RETRIEVE INDENTATION FACTOR
         SRL   INDENTCN,ONE        DIVIDE BY 2 FOR USE AS ADJUSTMENT
*                                  TO BEGINNING OF STANDARD LAYOUT LINE
* TWO LAYOUT LINES ARE DEFINED FOR COMPLETE LINES: STANDARD IS
* USED FOR THE NORMAL 32 BYTES PER LINE CASE AND COMP64 IS USED
* WHEN 64 BYTES PER LINE IS REQUESTED.                          Z40MPXH
         CLI   ABDLLNGH,TWO04       LONG LINE REQUESTED?        Z40MPXH
         BE    LNGLL                YES, USE COMP64             Z40MPXH
         LA    LAYLINE,STANDARD(INDENTCN)    INDEX INTO LAYOUT LINE
         B     INDXLINE                 SKIP AROUND             Z40MPXH
LNGLL    LA    LAYLINE,COMP64(INDENTCN)      INDEX INTO COM64
*                                            LAYOUT LINE        Z40MPXH
INDXLINE ST    LAYLINE,ABDLLINE    SET FOR FORMAT22             Z40MPXH
         MVC   ABDBPTR(FOUR),ABDSTAD    SET ADDR OF DATA TO UNPACK
         TM    ABDUPRF,UPRFMET     DID CALLER ANTICIPATE UPR
         BNO   FORMET03            NO, BRANCH
         OI    ABDUPRF,UPRFMT20    SET FORMAT22 TO INTERCEPT UPR
FORMET03 L     TOREG,VAD61         GET ADDR OF FORMAT22
         BALR  RETREG,TOREG        GO TO FORMAT22 ROUTINE
         SH    RETCODE,HALF8       DID FORMAT22 HAVE UPR
         BZ    UPR                 YES, GO PROCESS IT
         MVC   ABDSTAD(FOUR),ABDBPTR    SAVE UPDATED START ADDR
         L     TOREG,VAD11         GET ADDR OF OUTPUT ROUTINE
         BALR  RETREG,TOREG        GO TO PRINT ROUTINE
         BCTR  LINES,ZERO          DECREMENT LINE COUNT BY ONE
         LH    INDENTCN,ABDIND     RETRIEVE INDENTATION FACTOR
         LTR   INDENTCN,INDENTCN   IS THE INDENTATION FACTOR ZERO
         BNZ   ZEROIDNT            NO,  GO ZERO IT
FORMET07 LTR   LINES,LINES         HAVE ALL LINES BEEN PROCESSED
         BP    MORELINE            NO,BRANCH                   Z40MPXH
* FORM05 AMD FORMET05 PERFORM THE SAME PROCESS FOR THE DIFFERENT
* LINE LENGTHS. FORM05 IS FOR THE CONDENSED LINE, FORMET05 IS FOR
* THE STANDARD LINE                                             Z40MPXH
         CLI   ABDLLNGH,TWO04      LONG LINE?                   Z40MPXH
         BE    FORM05              YES, BRANCH                  Z40MPXH
         B     FORMET05            NO, STANDARD LINE            Z40MPXH
MORELINE L     CURLINE,ABDSTAD     GET ADDRESS OF NEXT LINE TO
*                                  BE DISPLAYED                Z40MPXH
         LR    LASTLINE,CURLINE    ADDR OF LAST WRITTEN LINE IS
         SR    LASTLINE,LINESIZE   LINESIZE LESS THAN CURRENT   ZM40084
         TM    ABDUPRF,UPRFMET     DID CALLER ANTICIPATE UPR
         BNO   PRE04               NO, BRANCH                   Z40MPXH
         LA    WORK,FORMETX        SET UPR EXIT ROUTINE ADDRESS
         ST    WORK,ABDUPRXT       TO FORMETX
PRE04    CLI   ABDLLNGH,TWO04      LONG LINE?                   Z40MPXH
         BE    FORM04              YES, TAKE OTHER PATH         Z40MPXH
* THIS SECTION OF CODE IS ENTERED FOR THE STANDARD LINE LENGTH, TO
* CHECK FOR DUPLICATE LINES.  FORM04 DOES THE SAME PROCESSING FOR
* CONDENSED LINES.                                              Z40MPXH
FORMET04 CLC   ZERO(L32,CURLINE),ZERO(LASTLINE)   IS NEXT LINE EQUAL
*                                                 LAST
         BNE   FORMET06            NO, BRANCH
         CLC   ABDIDENT(TWO),THIRTY2K CHECK FOR MAX NUMBER OF IDENTICAL
*                                  LINES                       @ZA05372
         BE    FORMET06            YES, BRANCH TO PRINT MSG    @ZA05372
         XC    ABDUPRXT(FOUR),ABDUPRXT  DISSALLOW UPR EVENT
* SINCE THE NEXT LINE TO BE DISPLAYED IS EQUAL TO THE LAST DISPLAYED
* LINE, IT WILL BE SUPPRESSED. ABDSTAD WILL BE INCREMENTED BY 32 AND
* 1 WILL BE ADDED TO A COUNT OF IDENTICAL LINES
         LA    CURLINE,L32(CURLINE)  INCR TO NEXT LINE ADDR
         ST    CURLINE,ABDSTAD     STORE ADDR OF NEXT LINE
         LH    WORK,ABDIDENT       GET IDENTICAL LINES COUNTER
         LA    WORK,ONE(WORK)      UP COUNT BY ONE
         STH   WORK,ABDIDENT       SAVE COUNTER
         BCTR  LINES,ZERO          DECREMENT LINE COUNT BY 1
         B     FORMET07                 PROCESS NEXT LINE
FORM04   CLC   ZERO(L64,CURLINE),ZERO(LASTLINE)  NEXT LINE EQUAL THE
*                                           LAST LINE?          Z40MPXH
         BNE   FORM06                   NO, BRANCH              Z40MPXH
         XC    ABDUPRXT(FOUR),ABDUPRXT      DISALLOW UPR        Z40MPXH
* WHEN NEXT LINE IS EQUAL TO THE LAST LINE DISPLAYED, IT IS SUPPRESSED
* ABDSTAD WILL BE INCREMENTED BY 64 (NUMBER OF BYTES DISPLAYED BY LINE)
* AND THE IDENTICAL LINE COUNT IS INCREMENTED.                  Z40MPXH
         LA    CURLINE,L64(CURLINE)     UP TO NEXT LINE        Z40MPXH
         ST    CURLINE,ABDSTAD           SAVE THIS ADDR         Z40MPXH
         LH    WORK,ABDIDENT             IDENTICAL LINES COUNT  Z40MPXH
         LA    WORK,ONE(WORK)            INCREMENT COUNTER      Z40MPXH
         STH   WORK,ABDIDENT             SAVE COUNTER           Z40MPXH
         BCTR  LINES,ZERO                DECREMENT LINE COUNTER Z40MPXH
         B     FORMET07                  PROCESS NEXT LINE      Z40MPXH
* WHEN THE NEXT 64 BYTE LINE TO BE DISPLAYED IS NOT IDENTICAL TO THE
* PREVIOUS LINE OR WHEN THE LAST 64 BYTE LINE HAS BEEN PROCESSED,
* FORM05 CHECKS FOR ANY SUPPRESSED IDENTICAL LINES. IF ANY EXIST, THE
* APPROPRIATE MEXXAGE IS DISPLAYED.                             Z40MPXH
FORM06   XC    ABDUPRXT(FOUR),ABDUPRXT    DISALLOW UPR EVENT    Z40MPXH
FORM05   LH    WORK,ABDIDENT              IDENTICAL LINES COUNT Z40MPXH
         LTR   WORK,WORK                  ANY IDENTICAL LINES?  Z40MPXH
         BZ    FORMET08                   NO, BRANCH            Z40MPXH
* INITIAL IDENTICAL ADDRESS IS EQUAL TO THE ADDRESS OF THE CURRENT LINE
* MINUS 64 TIMES THE NUMBER OF IDENTICAL LINES.                 Z40MPXH
         LR    START,WORK                 NUMBER OF IDENT LINES Z40MPXH
         SLL   START,M64                  MULTIPLY BY 64 BYTES  Z40MPXH
         LNR   START,START                MINUS ADDRESS OF THE  Z40MPXH
         A     START,ABDSTAD              CURRENT LINE  EQUALS  Z40MPXH
         ST    START,ABDFWORK             INIT ADDR             Z40MPXH
         BCT   WORK,MANYLINE              BRANCH IF >1 LINES    Z40MPXH
         B     ONLYONE                    ONE IDENT LINE        Z40MPXH
* THIS SECTION OF CODE IS ENTERED WHEN THE NEXT LINE TO BE DISPLAYED
* IS NOT IDENTICAL WITH THE PREVIOUS LINE AND WHEN THE LAST LINE
* HAS BEEN PROCESSED. IN BOTH CASES, TEH ROUTINE CHECKS IF THERE ARE
* ANY SUPRESSED IDENTICAL LINES AND IF SO, DISPLAYS THE APPROPRIATE
* MESSAGE.
FORMET06 XC    ABDUPRXT(FOUR),ABDUPRXT  DISALLOW UPR EVENT
FORMET05 LH    WORK,ABDIDENT       RETRIEVE IDENTICAL LINES COUNTER
         LTR   WORK,WORK           ANY LINES TO DISPLAY
         BZ    FORMET08            NO, BRANCH
* THE INITIAL IDENTICAL ADDRESS IS EQUAL TO THE ADDRESS OF THE CUR-
* RENT LINE MINUS 32 TIMES THE NUMBER OF IDENTICAL LINES
         LR    START,WORK          INIT START OF IDENT LINES ADDR
         SLL   START,M32           MULTIPLY NUMBER OF LINES BY LENGTH
         LNR   START,START         MAKE VALUE NEGATIVE
         A     START,ABDSTAD       COMPLETE CALCULATION
         ST    START,ABDFWORK      SET INIT ADDR FOR FORMAT22
         BCT   WORK,MANYLINE       BRANCH IF MORE THAN ONE IDENT LINE
* WHEN THERE IS ONE IDENTICAL LINE A MESSAGE IS PRODUCED AS FOLLOWS
*
*        LINE XXXXXX SAME AS ABOVE
ONLYONE  MVC   ABDLINE+SIX(FOUR),MSG1   SET FIRST PART OF MSG
         LA    WORK,ONELINE        GET ADDR OF LAYOUT LINE
         ST    WORK,ABDLLINE       SET VALUE FOR FORMAT22
         LA    WORK,ABDFWORK+ONE   SET DATA ADDRESS
         ST    WORK,ABDBPTR        SET VALUE FOR FORMAT22
         L     TOREG,VAD61         ADDR OF FORMAT22
         BALR  RETREG,TOREG        GO TO FORMAT22
         MVC   ABDLINE+K17(K14),MSG1+FIVE    SET REST OF MSG
         B     GOOUTPUT            RETURN TO COMMON CODE
* WHEN THERE IS MORE THAN ONE IDENTICAL LINE THE MSG PRODUCED IS AS
* FOLLOWS
*
*    LINES XXXXXX-YYYYYY SAME AS ABOVE
* THE YYYYYY ADDRESS IS THE ADDRESS OF THE CURRENT LINE MINUS 32
MANYLINE MVC   ABDLINE+SIX(FIVE),MSG1   SET FIRST PART OF MESSAGE
         LA    WORK,MANYP1         GET ADDR OF LAYOUT LINE
         ST    WORK,ABDLLINE       SET VALUE FOR FORMAT22
         LA    WORK,ABDFWORK+ONE   GET ADDR OF XXXXXX PORTION OF MSG
         ST    WORK,ABDBPTR        SET VALUE FOR FORMAT22
         L     TOREG,VAD61         GET ADDRESS OF FORMAT22
         BALR  RETREG,TOREG        GO TO FORMAT22
         MVI   ABDLINE+K18,SEPCHAR SET ADDRESS SEPARATOR INTO MESSAGE
         L     WORK,ABDSTAD        GET CURRENT LINE ADDRESS
         SR    WORK,LINESIZE       CALC LAST IDENT LINE ADDR    ZM40084
         ST    WORK,ABDFWORK       SET FOR UNPACK BY FORMAT22
         LA    WORK,ABDFWORK+ONE   GET ADDRESS OF DATA
         ST    WORK,ABDBPTR        SET VALUE FOR FORMAT22
* THE LAYOUT LINE ADDR DOES NOT HAVE TO BE SET SINCE FORMAT22 WILL
* UPDATE THE FIRST LAYOUT LINE ADDR PASSED THE X'FF'. HOWEVER THIS
* REQUIRES THAT MANYP1 AND MANYP2 REMAIN CONTIGUOUS IN MEMORY
         L     TOREG,VAD61         GET ADDR OF FORMAT22
         BALR  RETREG,TOREG        GO TO FORMAT22
         MVC   ABDLINE+K25(K14),MSG1+FIVE    SET REST OF MESSAGE
GOOUTPUT L     TOREG,VAD11         GET ADDRESS OF OUTPUT
         BALR  RETREG,TOREG        OUTPUT THE MESSAGE
         XC    ABDIDENT(TWO),ABDIDENT   SET IDENTICAL LINE COUNT TO 0
* THIS PORTION OF THE ROUTINE CAN BE ENTERED AS A RESULT OF A UPR. IF
* SO, THE RETURN ADDRESS IS IN ABDUPRID.
         L     TOREG,ABDUPRID      GET ADDR OF POSSIBLE RETURN POINT
         LTR   TOREG,TOREG         IS THERE A SPECIAL RETURN POINT
         BNZ   BACKUPR             YES, GO SET FOR SPECIAL RETURN
         B     FORMET07            BRANCH TO CHECK FOR IDENTICAL LINE
*                                                              @ZA05372
FORMET08 LTR   LINES,LINES
         BNP   INCPLINE            BRANCH WHEN ALL LINES HAVE BEEN
*                                  PROCESSED
         B     FORMET02            PROCESS NEXT COMPLETE LINE
ZEROIDNT XC    ABDIND(TWO),ABDIND  SET INDENTATION FACTOR TO ZERO
         B     FORMET08            CHECK IF WORK DONE
BACKUPR  XC    ABDUPRID(FOUR),ABDUPRID  ZERO UPR EXIT ADDRESS
         BR    TOREG               RETURN TO CORRECT LOCATION
         EJECT
* THIS SECTION OF CODE IS ENTERED WHEN A UPR OCCURS DURING INCOMPLETE
* LINE PROCESSING. IF REQUESTED A MESSAGE CONTAINING THE INITIAL
* UNALLOCATED AND LAST UNALLOCATED ADDRESSES IS PRODUCED. OTHERWISE
* CONTROL IS RETURNED TO THE CALLER.
LASTUPR  MVI   ABDCC,BLANK         SET ABDCC TO BLANK
         MVC   ABDLINE(L'ABDLINE),ABDCC BLANK REST OF LINE
         TM    ABDUPRFN,ABDUPRPM   USER REQUEST UNALLOCATED MESSAGE
         BNO   NORMEXIT            NO, START EXITING
         L     WORK,ABDSTAD        RETRIEVE FAILING ADDR
         NR    WORK,MASK           ROUND DOWN TO LINE BNDRY     Z40MPXH
         A     WORK,ABDIND         CALCULATE INITIAL PRINT ADDR
         ST    WORK,ABDSTAD        SAVE INITIAL PRINT ADDR
         MVC   ABDLINE+SIX(NINE),NOTTHERE   SET MESSAGE IN LINE
         LA    WORK,ABDSTAD+ONE    SET DATA ADDRESS
         ST    WORK,ABDBPTR        FOR FORMAT22
         LA    WORK,UNALP1         SET LAYOUT LINE ADDRESS
         ST    WORK,ABDLLINE       FOR FORMAT22
         L     TOREG,VAD61         GET ADDRESS OF FORMAT22
         BALR  RETREG,TOREG        GO TO FORMAT22
         LH    WORK,ABDINCPL       GET NUMBER OF BYTES IN LAST LINE
         A     WORK,ABDSTAD        CALCULATE LAST UNALLOC ADDR PLUS 1
         BCTR  WORK,ZERO           DECREMENT TO LAST REQUESTED ADDR
         ST    WORK,ABDFWORK       STORE FOR FORMAT22
         LA    WORK,ABDFWORK+ONE   SET DATA ADDR
         ST    WORK,ABDBPTR        FOR FORMAT22
         L     TOREG,VAD61         GET ADDRESS OF FORMAT22
         BALR  RETREG,TOREG        GO TO FORMAT22
         MVI   ABDLINE+K22,SEPCHAR PUT SEPARATOR IN MSG
         MVC   ABDLINE+K29(K14),NOTTHERE+NINE  MOVE SECOND HALF MSG
*                                  INTO LINE
         L     TOREG,VAD11         GET ADDRESS OF OUTPUT
         BALR  RETREG,TOREG        GO WRITE UNALLOCATED MESSAGE
         B     NORMEXIT            BEGIN RETURN PROCEDURE
         EJECT
* THIS SECTION OF THE CODE HANDLES UPR EVENTS THAT OCCURRED WHILE
* EITHER FORMAT20 OR FORMAT22 WAS IN CONTROL. IF THE USER REQUESTED
* THAT A MESSAGE DETAILING THE UNDEFINED LOCATIONS BE PRODUCED
* THEN THE MESSAGE
*                   LOCATIONS XXXXXX-YYYYYY NOT DEFINED
* IS PRODUCED. THE ROUTINE DETERMINES THE NEXT DEFINED LINE ADDRESS
* AND RETURNS TO MAINLINE PROCESSING.
UPR      MVI   ABDCC,BLANK         SET ENTIRE PRINT LINE TO BLANKS
         MVC   ABDLINE(L'ABDLINE),ABDCC
         TM    ABDUPRFN,ABDUPRSL   CALLER REQ SKIP LINE WITH NO MSG
         BO    SKIPONLY            YES - BYPASS MSG PROCESSING
         TM    ABDUPRFN,ABDUPRPM   CALLER REQ MSG BE PRODUCED
         BNO   NORMEXIT            NO THEN BRANCH TO RETURN TO CALLER
         MVC   ABDLINE+SIX(NINE),NOTTHERE    SET FIRST PART MSG IN LINE
         LA    WORK,ABDSTAD+ONE    SET POINTER TO INVALID ADDR
         ST    WORK,ABDBPTR        FOR FORMAT22 ROUNTINE
         LA    WORK,UNALP1         ALSO SET LAYOUT LINE ADDR
         ST    WORK,ABDLLINE       FOR ROUTINE
         L     TOREG,VAD61         GET ADDR OF FORMAT22
         BALR  RETREG,TOREG        CALL FORMAT22
SKIPONLY L     WORK,ABDSTAD        SET UNDET ADDR TO LINE BNDRY Z40MPXH
         NR    WORK,MASK           USE PRESET ROUNDING MASK     Z40MPXH
         ST    WORK,ABDSTAD        ADDR NOW ROUNDED             Z40MPXH
         MVI   ABDCC,DOUBLE        SET TO DOUBLE SPACE LINE
         XC    ABDIND,ABDIND       SET INDENTATION COUNT TO ZERO
         L     PGADDR,ABDSTAD      RETRIEVE INVALID LINE ADDR
         A     PGADDR,PGSIZE       INCREMENT ADDR TO NEXT PAGE
         N     PGADDR,PGMASK       GET ADDR OF BEGINNING OF NXT PAGE
* CALCULATE NUMBER OF INVALID LINES
         LR    MISSING,PGADDR      ALGORITHM IS NEXT POSS VALID ADDR
         S     MISSING,ABDSTAD     MINUS INIT INVALID ADDR
         CLI   ABDLLNGH,TWO04      LONG LINE?                   Z40MPXH
         BNE   DIV32               NO, SKIP THIS SHIFT INST     Z40MPXH
         SRL   MISSING,D64         DIVIDE BY LINE LENGTH        Z40MPXH
         B     DECREM              CONTINUE PROCESSING          Z40MPXH
DIV32    SRL   MISSING,D32         DIVIDED BY LENGTH OF LINE
*                                  IS EQUAL TO NUMBER OF INVALID LINES
DECREM   SR    LINES,MISSING       DECREMENT LINE COUNT BY
*                                  NUMBER OF INVALID LINES
         BM    ALLDONE             IF RESULT IS LESS THAN ZERO THEN
*                                  AS MUCH AS POSSIBLE OF THE AREA
*                                  REQUESTED BY THE CALLER HAS BEEN
*                                  DISPLAYED
         ST    PGADDR,ABDSTAD      SAVE PGADDR AS POSS VALID ADDR
         BZ    TESTLAST            IF RESULT WAS ZERO THEN THE ONLY
*                                  DATA LEFT TO BE PRINTED IS THE
*                                  PARITIAL LAST LINE
* THE RESULT IS GREATER THAN ZERO SO MORE LINES REMAIN TO BE
* DISPLAYED. HOWEVER, THE CODE INSURES THAT THE NEXT PAGE IS VALID
* BEFORE ATTEMPTING TO PRINT IT. IF NOT, THE ABOVE CODE IS REENTERED
         LA    WORK,NXTPGBAD       SET ADDR OF UPR EXIT TO
         ST    WORK,ABDUPRXT       LOGIC TO HANDLE IT
         NI    ZERO(PGADDR),PGTEST REFERENCE NEXT PAGE
* IF THE NEXT INSTRUCTION IS REACHED THEN THE NEXT PAGE IS VALID
         XC    ABDUPRXT,ABDUPRXT   ZERO UPR EXIT ADDR
* SET PART OF THE ROUTINE IS FINAL PROCESSING BEFORE RETURNING TO
* MAINLINE CODE FROM UPR PROCESSING
FINISH   TM    ABDUPRFN,ABDUPRSL   USER REQ SKIP LINE ONLY
         BO    EXITBACK            YES - BYPASS MSG PROCESSING
         BCTR  PGADDR,ZERO         CALCULATE LAST ADDR FOR MESSAGE
         ST    PGADDR,ABDFWORK     SAVE ADDR FOR FORMAT22
         LA    WORK,ABDFWORK+ONE   SET DATA ADDR FOR
         ST    WORK,ABDBPTR        FORMAT22 ROUTINE
* NOTE THAT ABDLLINE IS STILL SET FROM FIRST PART OF MESSAGE
         L     TOREG,VAD61         GET ADDRESS OF FORMAT22
         BALR  RETREG,TOREG        CALL IEAVAD61
         MVI   ABDLINE+K22,SEPCHAR PUT SEPARATOR INTO LINE
         MVC   ABDLINE+K29(K14),NOTTHERE+NINE     SET REST OF MESSAGE
         L     TOREG,VAD11         GET ADDR OF PRINT ROUTINE
         BALR  RETREG,TOREG        CALL IEAVAD11
         MVI   ABDCC,DOUBLE        ALSO DOUBLE SPACE AFTER MESSAGE
EXITBACK LTR   LINES,LINES         COMPLETE LINES ALL PROCESSED
         BZ    INCPLINE            YES, BUT PARTIAL LAST LINE MAY EXIST
         BP    FORMET02            NO, GO PROCESS COMPLETE LINES
         B     NORMEXIT            YES AND NO PARTIAL LAST LINE
* THIS IS THE ENTRY POINT WHEN A UPR OCCURS TESTING THE NEXT PAGE
NXTPGBAD L     WORK,PREV(SAVEAREA) RETRIEVE ADDR CALLERS SAVEAREA
         L     PARAM,K24(WORK)     RETRIEVE POINTER TO ABDAREA
         B     SKIPONLY            PRETEND UPR OCCURED AT PGADDR
* WHEN THE LINE COUNT GOES NEGATIVE AFTER SUBTRACTING MINIMUM NUMBER
* OF INVALID LINES THEN THE LAST ADDRESS REQUESTED BY THE CALLER
* IS CALCULATED AS PGADDR PLUS THE NEGATIVE LINE COUNT TIMES THE
* LENGTH OF THE LINE PLUS THE NUMBER OF BYTES IN THE PARTIAL LAST
* LINE
ALLDONE  CLI   ABDLLNGH,TWO04      LONG LINE?                   Z40MPXH
         BNE   SHORT               NO, SKIP NEXT SHIFT INST     Z40MPXH
         SLL   LINES,M64           MULTIPLY BY LINE LENGTH      Z40MPXH
         B     CONTDONE            CONTINUE ON COMMON PATH      Z40MPXH
SHORT    SLL   LINES,M32           MULT NEGATIVE COUNT BY 32   Z40MPXH
CONTDONE AR    PGADDR,LINES        ADD TO PGADDR THUS DECREM    Z40MPXH
         A     PGADDR,ABDINCPL     ADD SIZE OF PARTIAL LINE TO ADDR
         XC    ABDINCPL,ABDINCPL   INSURE THAT PROCESSING WILL END
*                                  WITHOUT ATTEMPT TO DISPLAY
*                                  PARTIAL LINE
         B     FINISH              TERMINATION PROCESSING
* WHEN THE LINE COUNT EXACTLY REACHES ZERO THEN THE ROUTINE CHECKS
* IF A PARTIAL LINE EXISTS. IF NOT, TERMINATION PROCESSING
* IS ENTERED. IF A LINE DOES EXIST, THE ROUTINE INSURES THAT THE
* PAGE IT IS ON IS VALID. IF IT IS THEN TERMINATION PROCESSING
* IS ENTERED. IF NOT, THE LAST VALID ADDRESS IS SET TO PGADDR PLUS
* THE SIZE OF THE PARTIAL LINE. THE PARTIAL LINE SIZE IS THEN
* SET TO ZERO AND TERMINATION PROCESSING IS ENTERED.
TESTLAST LH    WORK,ABDINCPL       GET SIZE OF PARTIAL LINE
         LTR   WORK,WORK           IS PARTIAL LINE SIZE EQUAL ZERO
         BZ    FINISH              YES - GO TO TERMINATION PROCESSING
         LA    WORK,LASTBAD        ENTER LASTBAD IF UPR OCCURS
         ST    WORK,ABDUPRXT
         NI    ZERO(PGADDR),PGTEST REFERENCE NEXT PAGE
* IF THIS INSTRUCTION IS REACHED THEN THE NEXT PAGE IS VALID AND
* THE PARTIAL LINE CAN BE DISPLAYED
         XC    ABDUPRXT,ABDUPRXT   SET UPR EXIT OFF
         B     FINISH              TERMINATION PROCESSING
*LASTBAD IS REACHED IF PAGE CONTAINING PARTIAL LINE IS ALSO INVALID
LASTBAD  L     WORK,PREV(SAVEAREA) RETRIEVE ADDR OF CALLERS SAVEAREA
         L     PARAM,K24(WORK)     RETRIEVE ADDR OF ABDAREA
         AH    PGADDR,ABDINCPL     CALC LAST ADDR REFERENCED BY CALLER
         XC    ABDINCPL,ABDINCPL   SET PARTIAL LINE LENGTH TO ZERO
         B     FINISH              TERMINATION PROCESSING
         EJECT
* THIS PART OF THE ROUTINE IS ENTERED WHEN A UPR OCCURRED TESTING
* FOR EQUAL LINES. IF THE EQUAL LINE COUNT IS OTHER THAN ZERO -
* EQUAL LINES WERE FOUND BEFORE THE UPR - THE ROUTINE ENTERS THE
* PORTION OF THE CODE THAT PRINTS THE EQUAL LINES MESSAGE INDICATING
* TO RETURN TO LABEL UPR TO LOCATE THE NEXT VALID ADDRESS. OTHERWISE,
* THE ROUTINE BRANCHES DIRECTLY TO UPR.
FORMETX  L     WORK,PREV(SAVEAREA) RETRIEVE ADDR OF CALLERS SAVEAREA
         L     PARAM,K24(WORK)     RETRIEVE ADDR OF ABDAREA
         LH    WORK,ABDIDENT       GET IDENTICAL LINES COUNT
         LTR   WORK,WORK           ANY IDENTICAL LINES
         BZ    UPR                 NO, GO GET NEXT VALID ADDR
         LA    WORK,UPR            SET TO GO TO UPR AFTER
         ST    WORK,ABDUPRID       PRINTING EQUAL LINES MESSAGE
* DETERMINE WHICH ROUTINE TO USE TO PRINT THE EQUAL LINES MESSAGE
         CLI   ABDLLNGH,TWO04      LONG LINE?                   Z40MPXH
         BE    FORM05              USE LONG LINE FORMAT         Z40MPXH
         B     FORMET05            PRINT EQ LINES MESSAGE
         EJECT
* CONSTANTS
         DS    0F
MASKWD   DC    X'FFFFFFFF'         ROUNDING MASK (GENERAL)      Z40MPXH
MASK64   DC    X'FFFFFFC0'         ROUND DOWN TO 64 BYTE BDY    Z40MPXH
MASK32   DC    X'FFFFFFE0'         ROUND DOWN TO 32 BYTE BDY    Z40MPXH
PGMASK   DC    X'FFFFF000'         TO ROUND DOWN TO PAGE BOUNDARY
THIRTY2  DC    F'32'               CONSTANT FOR MATH MANIPULATIONS
SIXTY4   DC    F'64'               CONSTANT FOR MATH            Z40MPXH
FREECON  DC    X'FD000048'         FREEMAIN 72 BYTES IN SP253
VAD11    DC    V(IEAVAD11)         ADDRESS OF OUTPUT ROUTINE
VAD51    DC    V(IEAVAD51)         ADDRESS OF FORMAT20 ROUTINE
VAD61    DC    V(IEAVAD61)         ADDRESS OF FORMAT22 ROUTINE
PGSIZE   DC    F'4096'             NUMBER OF BYTES ON PAGE
HALF3    DC    H'3'                VALUE FOR MULTIPLY INSTRUCTION
HALF8    DC    H'8'                VALUE FOR RETURN CODE CHECK
THIRTY2K DC    H'32767'            MAXIMUM VALUE FOR HALFWORD  @ZA05372
* LAYOUT LINE TO EDIT THE NORMAL COMPLETE LINE
STANDARD DC    X'0903'
         DC    X'1203'
         DC    X'1B03'
         DC    X'2403'
         DC    X'3003'
         DC    X'3903'
         DC    X'4203'
         DC    X'4B03'
         DC    X'FF'
* LAYOUT LINE EO EDIT CONDENSED COMPLETE LINE                  Z40MPXH
COMP64   DC    X'0703'                                          Z40MPXH
         DC    X'0F03'                                          Z40MPXH
         DC    X'1703'                                          Z40MPXH
         DC    X'1F03'                                          Z40MPXH
         DC    X'2803'                                          Z40MPXH
         DC    X'3003'                                          Z40MPXH
         DC    X'3803'                                          Z40MPXH
         DC    X'4003'                                          Z40MPXH
         DC    X'4903'                                          Z40MPXH
         DC    X'5103'                                          Z40MPXH
         DC    X'5903'                                          Z40MPXH
         DC    X'6103'                                          Z40MPXH
         DC    X'6A03'                                          Z40MPXH
         DC    X'7203'                                          Z40MPXH
         DC    X'7A03'                                          Z40MPXH
         DC    X'8203'                                          Z40MPXH
         DC    X'FF'                                            Z40MPXH
MSG1     DC    C'LINES SAME AS ABOVE'   FOR IDENTICAL LINES PROCESSING
NOTTHERE DC    C'LOCATIONS NOT ALLOCATED'  MSG FOR UPR RECOVERY
* LAYOUT LINE FOR SINGLE IDENTICAL LINE
ONELINE  DC    X'0B02FF'
* LAYOUT LINES FOR MORE THAN ONE IDENTICAL LINE
MANYP1   DC    X'0C02FF'
         DC    X'1302FF'           MUST BE CONTIGUOUS WITH MANYP1
* LAYOUT LINES FOR INCOMPLETE LINE
* ALL MUST BE CONTIGUOUS IN MEMORY
INCLLINE DC    X'0903FF'
         DC    X'1203FF'
         DC    X'1B03FF'
         DC    X'2403FF'
         DC    X'3003FF'
         DC    X'3903FF'
         DC    X'4203FF'
* LAYOUT LINE FOR EDITING AFTER UPR ON LAST LINE
UNALP1   DC    X'1002FF1702FF'
* LAYOUT LINE FOR EDITING CONDENSED INCOMPLETE LINE            Z40MPXH
INCL64   DC    X'0703FF'                                        Z40MPXH
         DC    X'0F03FF'                                        Z40MPXH
         DC    X'1703FF'                                        Z40MPXH
         DC    X'1F03FF'                                        Z40MPXH
         DC    X'2803FF'                                        Z40MPXH
         DC    X'3003FF'                                        Z40MPXH
         DC    X'3803FF'                                        Z40MPXH
         DC    X'4003FF'                                        Z40MPXH
         DC    X'4903FF'                                        Z40MPXH
         DC    X'5103FF'                                        Z40MPXH
         DC    X'5903FF'                                        Z40MPXH
         DC    X'6103FF'                                        Z40MPXH
         DC    X'6A03FF'                                        Z40MPXH
         DC    X'7203FF'                                        Z40MPXH
         DC    X'7A03FF'                                        Z40MPXH
         DC    X'8203FF'                                        Z40MPXH
         EJECT
* DSECT MAP FOR ABDAREA
         IHAABDA
*/*IEAVAD71: CHART */
*/* HEADER
*/*DUMP LINE  FORMATTER
*/*FEBRUARY, 1975  WANDA GERHEIM   PAGE# */
*/* E IEAVAD71 */
*/* P SAVE CALLERS REGISTERS */
*/* P GETMAIN SAVEAREA */
*/* D (NO,EXITEND,YES,) RETURN CODE = 0? */
*/* P CHAIN SAVEAREAS */
*/* D (YES,LONGINIT,NO,) LONG LINE REQUESTED?  */
*/* P SET MASK FOR 32 BYTE BDY  */
*/* P (,COMMON) SET LINESIZE TO 32 BYTES  */
*/*LONGINIT: P SET MASK FOR 64 BYTE BDY  */
*/* P SET LINESIZE TO 64 BYTES  */
*/*COMMON: P SET BEGINNING ADDR INTO ABDSTAD  */
*/* P ROUND INITIAL ADDR DOWN TO WORD BDY */
*/* P ADD BYTES GAINED TO SIZE OF STORAGE */
*/* P ROUND TOTAL SIZE TO WORD BDY */
*/* P INITIALIZE # OF IDENTICAL LINES TO 0 */
*/* P INITIALIZE INDENTATION FACTOR TO 0 */
*/* P ROUND ADDR DOWN TO LINE BDY  */
*/* D (NO,NOSUP,YES,) ANY BYTES TO SUPPRESS? */
*/* P SAVE NUMBER OF BYTES TO SUPPRESS  */
*/*NOSUP: P ADD INDENTATION TO TOTAL SIZE  */
*/* P DIVIDE TOTAL SIZE BY LINESIZE */
*/* D (NO,INCPLINE,YES,) ANY COMPLETE LINES TO PROCESS? */
*/*COMPLINE: P SET INITIAL ADDR TO LINE BDY */
*/* P SET ADDR OF DATA AREA FOR FORMAT20 */
*/* P STORE LINES INTO ABDLCNT FOR FORMAT20 */
*/* D (NO,TOVAD51,YES,) UPR EXPECTED? */
*/* P SET FORMAT20 TO INTERCEPT UPR */
*/*TOVAD51: S IEAVAD51: TRANSLATE TO EBCDIC  */
*/* D (YES,UPR,NO,) DID VAD51 HAVE UPR? */
*/* P CALCULATE INDENTATION FACTOR  */
*/* D (YES,LNGLL,NO,) LONG LAYOUT LINE?  */
*/* P (,INDXLINE) INDEX INTO STANDARD LAYOUT LINE  */
*/*LNGLL: P INDEX INTO COMP64 LAYOUT LINE  */
*/*INDXLINE: D (NO,FORMET03,YES,) UPR EXPECTED?  */
*/* P SET FORMAT22 TO INTERCEPT UPR */
*/*FORMET03: S IEAVAD61: TRANSLATE TO EBCDIC  */
*/* D (YES,UPR,NO,) DID UPR OCCUR? */
*/* P SAVE UPDATED START ADDR  */
*/* S IEAVAD11: OUTPUT THE LINE  */
*/* P DECREMENT THE LINE COUNT BY ONE */
*/* D (NO,ZEROIDNT,YES,) INDENTATION FACTOR ZERO? */
*/*FORMET07: D (NO,MORELINE,YES,) ALL LINES PROCESSED? */
*/* D (NO,FORMET05,YES,FORM05) LONG LINE? */
*/*MORELINE: P GET ADDR OF NEXT LINE */
*/* P CALCULATE ADDR OF LAST LINE WRITTEN */
*/* D (NO,PRE04,YES,) UPR EXPECTED? */
*/* P SET UP UPR EXIT FOR FORMETX */
*/*PRE04: D (YES,FORM04,NO,) LONG LINE? */
*/*FORMET04: D (NO,FORMET06,YES,) IS NEXT LINE SAME AS LAST? */
*/* P DISALLOW UPR EVENT */
*/* P INCREMENT TO NEXT LINE TO PRINT */
*/* P INCREMENT COUNT OF DUPLICATE LINES */
*/* P (,FORMET07) DECREMENT LINE COUNT BY ONE  */
*/*FORMET06: P DISALLOW UPR  */
*/*FORMET05: D (NO,FORMET08,YES,) ANY LINES TO DISPLAY? */
*/* P CALCULATE INITIAL IDENTICAL LINE ADDR  */
*/* D (NO,MANYLINE,YES,) ONLY ONE IDENTICAL LINE? */
*/*ONELINE: P LAYOUT IDENTICAL LINE MSG  */
*/* S IEAVAD61: TRANSLATE ADDR FOR MSG  */
*/* P (,GOOUTPUT) SET UP REST OF MSG  */
*/*FORM04: D (NO,FORM06,YES,) NEXT LINE SAME AS LAST? */
*/* P DISALLOW UPR  */
*/* P INCREM TO NEXT LINE ADDR */
*/* P SAVE ADDR OF NEXT LINE */
*/* P INCREM IDENTICAL LINE COUNT */
*/* P SAVE COUNTER  */
*/* P (,FORMET07) DECREMENT LINE COUNT BY 1 */
*/*FORM06: P DISALLOW UPR */
*/*FORM05: P RETRIEVE IDENTICAL LINES COUNT */
*/* D (NO,FORMET08,YES,) ANY LINES TO DISPLAY?  */
*/* P INIT START OF IDENTICAL LINES ADDR  */
*/* P MULTIPLY BY LENGTH OF LINE */
*/* P MINUS ADDR OF CURRENT LINE */
*/* P SET INITIAL ADDR FOR FORMAT22  */
*/* D (YES,ONELINE,NO,) ONLY ONE IDENTICAL LINE?  */
*/*MANYLINE: P SET FIRST PAR TO MSG  */
*/* P GET ADDR OF FIRST IDENTICAL LINE  */
*/* S IEAVAD61: TRANSLATE ADDR FOR MSG */
*/* P CALCULATE LAST IDENTICAL LINE ADDR  */
*/* S IEAVAD61: TRANSLATE ADDR FOR MSG */
*/* P SET REST OF MSG */
*/*GOOUTPUT: S IEAVAD11: OUTPUT THE MSG  */
*/* P SET IDENTICAL LINE COUNT TO ZERO  */
*/* D (YES,BACKUPR,NO,) IS THERE A SPECIAL RETURN  */
*/*FORMET08: D (YES,COMPLINE,NO,) ANYMORE LINES?  */
*/*INCPLINE: P GET COUNT OF EXTRA BYTES  */
*/* D (YES,DOLAST,NO,) IS THERE A PARTIAL LINE?  */
*/*NORMEXIT: P SAVE NORMAL RETURN CODE */
*/* P RESET UPR  INDICATOR  */
*/* P SET UP ADDR TO BE FREED  */
*/* P RESTORE ADDR OF CALLERS SAVEAREA  */
*/* P FREE THIS SAVEAREA  */
*/*RETURN: P RESTORE RETURN CODE AND REGS  */
*/* R RETURN TO CALLER  */
*/*EXITEND: P SET RC=8 FOR INSUFFICIENT SPACE  */
*/* P (,RETURN) RETURN TO CALLER  */
*/*DOLAST: D (NO,FORMET09,YES,) IS UPR EXPECTED?  */
*/* P SET FORMAT20 TO EXPECT UPR  */
*/*FORMET09: P SET LOC ADDR TO LINE BDY  */
*/* P SET DATA IN ABDBPTR FOR FORMAT20  */
*/* P STORE LINES INTO ABDLCNT FOR FORMAT20 */
*/* S IEAVAD51: TRANSLATE THE ADDRESS  */
*/* D (YES,LASTUPR,NO,) DID UPR OCCUR?  */
*/* P SET INITIAL ADDR  */
*/* D (YES,LNGLAST,NO,) LONG LINE? */
*/* P (,LAST) USE INCLLINE FOR LAYOUT LINE */
*/*LNGLAST: P USE INCL64 FOR LAYOUT LINE */
*/*LAST: P SET LINE FOR FORMAT22  */
*/* P CALCULATE # OF WORDS FOR LAST LINE  */
*/*FORMET11: D (NO,FORMET10,YES,) UPR ANTICIPATED?  */
*/* P SET FORMAT22 TO EXPECT UPR  */
*/*FORMET10: S IEAVAD61: TRANSLATE ONE WORD  */
*/* D (YES,LASTUPR,NO,) UPR OCCUR? */
*/* P SUBTRACT 1 FROM WORD COUNT */
*/* D (NO,FORMET11,YES,) IS WORD COUNT ZERO?  */
*/* S IEAVAD11: OUTPUT LAST LINE */
*/* P (,NORMEXIT) GO TO EXIT  */
*/*BACKUPR: P ZERO UPR EXIT ADDR  */
*/* R GO TO RETURN ADDR  */
*/*LASTUPR: P BLANK OUT ABDLINE */
*/* D (NO,NORMEXIT,YES,) USER REQUEST UNALLOC MSG? */
*/* P RETRIEVE FAILING ADDRESS  */
*/* P SET MSG IN PRINT LINE  */
*/* P SET DATA AND ADDRESSES IN LINE  */
*/* S IEAVAD61: TRANSLATE DATA AND ADDRS  */
*/* P CALCULATE LAST REQUESTED ADDR  */
*/* S IEAVAD61: TRANSLATE LAST ADDR  */
*/* P SET REST OF MSG  */
*/* S IEAVAD11: OUTPUT THE MSG  */
*/* P (,NORMEXIT) GO TO EXIT  */
*/*UPR: P BLANK OUT PRINT LINE  */
*/* D (YES,SKIPONLY,NO,) SKIP LINE REQUESTED?  */
*/* D (NO,NORMEXIT,YES,) MSG REQUESTED?  */
*/* P SET FIRST PART OF MSG  */
*/* P SET POINTER TO INVALID ADDR  */
*/* P SET PRINT LINE ADDR  */
*/* S IEAVAD61: TRANSLATE ADDR  */
*/*SKIPONLY: P RETRIEVE INVALID LINE ADDR  */
*/* P GET ADDR OF NEXT PAGE  */
*/* P CALCULATE # OF INVALID LINES BY LINESIZE */
*/* D (NO,ALLDONE,YES,) ANY MORE LINES TO DISPLAY?  */
*/* P SAVE POSSIBLE VALID ADDRESS  */
*/* D (YES,TESTLAST,NO,) ONLY PARTIAL LINE DISPLAYED? */
*/* P SET UPR EXIT  */
*/* D (NO,NXTPGBAD,YES,) NEXT PAGE VALID?  */
*/* P ZERO UPR EXIT  */
*/*FINISH: D (YES,EXITBACK,NO,) SKIP ONLY ONE LINE?  */
*/* P CALCULATE LAST ADDR FOR MSG  */
*/* S IEAVAD61: TRANSLATE ADDR  */
*/* P SET REST OF MSG  */
*/*EXITBACK: D (YES,COMPLINE,NO,) ANY COMPLETE LINES LEFT?  */
*/* D (YES,INCPLINE,NO,) ANY PARTIAL LINES?  */
*/* P (,NORMEXIT) ALL LINES PROCESSED  */
*/*NXTPGBAD: P GET ADDR OF CALLERS SAVEAREA  */
*/* P GET PTR TO ABDAREA  */
*/* P (,SKIPONLY) CONTINUE  */
*/*TESTLAST: P GET SIZE OF PARTIAL LINE  */
*/* D (YES,FINISH,NO,) NO PARTIAL LINE?  */
*/* P SET UPR EXIT ADDR */
*/* D (NO,LASTBAD,YES,) NEXT PAGE VALID?  */
*/* P SET UPR OFF  */
*/* P (,FINISH) CONTINUE PROCESSING  */
*/*LASTBAD: P GET ADDR OF CALLERS SAVE AREA  */
*/* P GET ADDR OF ABDAREA  */
*/* P CALCULATE LAST ADDR REFERENCED  */
*/* P SET PARTIAL LINE LENGTH TO ZERO  */
*/* P (,FINISH) CONTINUE  */
*/*FORMETX: P GET ADDR OF CALLERS SAVEAREA  */
*/* P GET ADDR OF ABDAREA  */
*/* D (NO,UPR,YES,) ANY IDENTICAL LINES?  */
*/* P SET TO GO TO UPR AFTER MSG PRINTED  */
*/* D (YES,FORM05,NO,FORMET05) LONG LINE? */
*/*ZEROIDNT: P ZERO INDENTATION FACTOR */
*/* P (,FORMET08) PROCESS NEXT LINE  */
*/*ALLDONE: P CALCULATE LAST ADDR REQUESTED BY LINESIZE  */
*/* P (,FINISH) FINISH UP  */
*/*IEAVAD71: END  */
          END
