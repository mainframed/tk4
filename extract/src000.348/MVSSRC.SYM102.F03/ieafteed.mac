         TITLE 'IEAFTEED-EED CONTROL BLOCK FORMAT MODULE               *
                        '
IEAFTEED CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IEAFTEED  77.006'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @11,0                                               0001
@PSTART  LA    @12,4095(,@11)                                      0001
         USING @PSTART,@11                                         0001
         USING @PSTART+4095,@12                                    0001
         L     @00,@SIZDATD                                        0001
         GETMAIN  R,LV=(0)
         LR    @10,@01                                             0001
         USING @DATD,@10                                           0001
         ST    @13,@SA00001+4                                      0001
         LM    @00,@01,20(@13)                                     0001
         ST    @10,8(,@13)                                         0001
         LR    @13,@10                                             0001
*                                                                  0105
*/********************************************************************/
*/* FUNCTION-                                                      0105
*       ROUTINE WHICH CHECKS WHICH TYPE OF EED IS TO BE FORMATTED.  IT
*     SETS UP THE NEEDED POINTERS TO BE PASSED TO THE FORMAT ROUTINE
*     SENT IN THE PARAMETER LIST.  FOR ANY ERROR ACCESSING A NEEDED
*     FIELD IN THE EED OR FOR NON-ZERO RETURN CODE FROM THE FORMATTING
*     SERVICE, THE FOLLOWING MESSAGES WILL BE PRINTED:             0105
*                       *** FORMATTING SERVICE ROUTINE ERROR DURING EED
*                           FORMATTING (POSSIBLE CAUSE: DATA NOT IN
*                           DUMP ) ***.                            0105
*     AT THIS POINT EED PROCESSING WOULD TERMINATE. IF THE EED IS  0105
*     FORMATTED WITHOUT ACCESS ERROR, A BIT SUMMARY IS PRINTED USING
*     THE ANALYZE PROC.                                            0105
*                                                                  0105
*   INPUT-                                                         0105
*       REGISTER 1 POINTS TO THE PARMLIST WHICH CONTAINS THE ADDRESS
*     OF THE CONTROL BLOCK TO BE FORMATTED IN ADPLFMT2. ADPLFMT1 ALSO
*     DEFINED AS START, CONTAINS THE OFFSET TO BE PLACED ALONG SIDE
*     THE FIRST FIELD IN THE CONTROL BLOCK AND ADPLCOM1 CONTAINS THE
*     ADDRESS OF THE ESTAE PARAMETER LIST.                         0105
*                                                                  0105
*   CALLS-                                                         0105
*       CALLS ACCESRTN,CONVERT,EEDBITS,FMTRTN,AND PRINT            0105
*                                                                  0105
*   CALLED BY -                                                    0105
*       IEAVTFMT TO FORMAT EEDS                                    0105
*                                                                  0105
*   RETURNS TO -                                                   0105
*       IEAVTFMT WITH A RETURN CODE SET BY ACCESS AND FORMAT       0105
*       SERVICE ROUTINES                                             */
*/********************************************************************/
*                                                                  0105
*   ERRSW=OFF;                      /* ERROR INDICATOR               */
         NI    ERRSW,B'01111111'                                   0105
*   ESTAPTR=ADPLCOM1;               /* PTR TO ESTAE PARM LIST        */
         L     ESTAPTR,ADPLCOM1(,ABDPLPTR)                         0106
*   STM(VADR,RCREG,LCALREGS);       /* SAVE REGS FOR RETRY           */
         STM   VADR,RCREG,LCALREGS(ESTAPTR)                        0107
*   ADPLCOM1=ADDR(EEDFMT);          /* ADDRESS TO BE USED BY FORMAT
*                                      ROUTINE FOR ERROR MESSAGE     */
         LA    @14,EEDFMT                                          0108
         ST    @14,ADPLCOM1(,ABDPLPTR)                             0108
*   EEDPTR=ADPLFMT2;                /* PTR PASSED IN PARMLIST        */
         L     @14,ADPLFMT2(,ABDPLPTR)                             0109
         LR    EEDPTR,@14                                          0109
*   SAVEPTR=ADPLFMT2-START;         /* ADDRESS OF BEGINNING OF BLOCK
*                                      (IF PASSED CONTROL BLOCK IS 0110
*                                      EMBEDDED IN ANOTHER)          */
         SL    @14,START(,ABDPLPTR)                                0110
         ST    @14,SAVEPTR                                         0110
*   VADR=ADDR(EEDID);               /* EED ID FIELD                  */
         LA    VADR,EEDID(,EEDPTR)                                 0111
*   CALL ACCESRTN;                  /* ACCESS ROUTINE                */
         BAL   @14,ACCESRTN                                        0112
*   IF RCREG^=ZERO THEN             /* COULD NOT ACCESS ID           */
         LTR   RCREG,RCREG                                         0113
         BZ    @RF00113                                            0113
*     BUFFER(1:LENGTH(EEDFMT))=EEDFMT;                             0114
         L     @14,ADPLBUF(,ABDPLPTR)                              0114
         MVC   BUFFER(120,@14),EEDFMT                              0114
*   ELSE                            /* FOUND EEDID                   */
*     DO;                                                          0115
         B     @RC00113                                            0115
@RF00113 DS    0H                                                  0116
*       CALL PRINT;                 /* 2 BLANK LINES                 */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0116
         BALR  @14,@15                                             0116
*       CALL PRINT;                 /* BLANK                         */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0117
         BALR  @14,@15                                             0117
*       IDSAVE=DATABYTE;            /* SAVE EEDID                    */
         MVC   IDSAVE(1),DATABYTE(DATAPTR)                         0118
*       PACKAREA=EEDPTR;            /* PLACE PTR IN CHAR AREA        */
         ST    EEDPTR,PACKAREA                                     0119
*       GARBAGE='04'X;              /* GARBAGE BYTE FOR THE UNPK     */
         MVI   GARBAGE,X'04'                                       0120
*       UNPK(ADDRESS,UNPACK);       /* 31 BIT ADDRESSING             */
         L     @14,ADPLBUF(,ABDPLPTR)                              0121
         UNPK  ADDRESS(9,@14),UNPACK(5)                            0121
*       TR(ADDRESS,TRANS);          /* TRANSLATE TO PRINTABLE HEX    */
*                                                                  0122
         TR    ADDRESS(9,@14),TRANS                                0122
*       /*************************************************************/
*       /*                                                           */
*       /* TYPE 1 EED - REGS AND PSW                                 */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0123
*       IF IDSAVE=REGSTYPE THEN     /* REGS AND PSW EED              */
         CLC   IDSAVE(1),REGSTYPE                                  0123
         BNE   @RF00123                                            0123
*         DO;                                                      0124
*           BUFFER(1:LENGTH(EED1HDR))=EED1HDR;                     0125
         MVC   BUFFER(54,@14),EED1HDR                              0125
*           CALL PRINT;             /* PRINT TITLE                   */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0126
         BALR  @14,@15                                             0126
*           BUFFER(1:LENGTH(EEDUS))=EEDUS;/* UNDER SCORE             */
         L     @14,ADPLBUF(,ABDPLPTR)                              0127
         MVC   BUFFER(4,@14),EEDUS                                 0127
*           CALL PRINT;             /* PRINT IT                      */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0128
         BALR  @14,@15                                             0128
*           CALL PRINT;             /* 2 BLANK LINES                 */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0129
         BALR  @14,@15                                             0129
*           CALL PRINT;             /* BLANK                         */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0130
         BALR  @14,@15                                             0130
*           DO ARRAYCNT=1 TO DIM(EED1NAME) WHILE(ERRSW=OFF);/* FORMAT
*                                      LOOP                          */
         LA    ARRAYCNT,1                                          0131
@DL00131 TM    ERRSW,B'10000000'                                   0131
         BNZ   @DC00131                                            0131
*             LINEPTR=EED1NAME(ARRAYCNT);/* PTR TO FORMAT PATTERN    */
         LR    @14,ARRAYCNT                                        0132
         SLA   @14,2                                               0132
         L     LINEPTR,EED1NAME-4(@14)                             0132
*             CALL CONVERT;         /* GENERATE OFFSET               */
         BAL   @14,CONVERT                                         0133
*             CALL FMTRTN;          /* FORMAT ROUTINE                */
         BAL   @14,FMTRTN                                          0134
*           END;                    /* END LOOP                      */
         AH    ARRAYCNT,@CH00041                                   0135
         CH    ARRAYCNT,@CH00112                                   0135
         BNH   @DL00131                                            0135
@DC00131 DS    0H                                                  0136
*         END;                      /* END REGS AND PSW              */
*                                                                  0137
*       /*************************************************************/
*       /*                                                           */
*       /* TYPE 2 EED - DUMP OPTIONS                                 */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0137
*       ELSE                        /* NOT REGS TYPE                 */
*         IF IDSAVE=DUMPTYPE THEN   /* DUMP OPTIONS TYPE             */
         B     @RC00123                                            0137
@RF00123 CLC   IDSAVE(1),DUMPTYPE                                  0137
         BNE   @RF00137                                            0137
*           DO;                                                    0138
*             BUFFER(1:LENGTH(EED2HDR))=EED2HDR;/* TITLE LINE        */
         L     @14,ADPLBUF(,ABDPLPTR)                              0139
         MVC   BUFFER(54,@14),EED2HDR                              0139
*             CALL PRINT;           /* PRINT IT                      */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0140
         BALR  @14,@15                                             0140
*             BUFFER(1:LENGTH(EEDUS))=EEDUS;/* UNDER SCORE           */
         L     @14,ADPLBUF(,ABDPLPTR)                              0141
         MVC   BUFFER(4,@14),EEDUS                                 0141
*             CALL PRINT;           /* PRINT IT                      */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0142
         BALR  @14,@15                                             0142
*             CALL PRINT;           /* 2 BLANK LINES                 */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0143
         BALR  @14,@15                                             0143
*             CALL PRINT;           /* BLANK                         */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0144
         BALR  @14,@15                                             0144
*             DO ARRAYCNT=1 TO EED2MAX WHILE(ERRSW=OFF);/* FORMAT  0145
*                                      LOOP                          */
         LA    ARRAYCNT,1                                          0145
@DL00145 TM    ERRSW,B'10000000'                                   0145
         BNZ   @DC00145                                            0145
*               LINEPTR=EED2NAME(ARRAYCNT);/* PTR TO FORMAT PATTERN  */
         LR    @14,ARRAYCNT                                        0146
         SLA   @14,2                                               0146
         L     LINEPTR,EED2NAME-4(@14)                             0146
*               CALL CONVERT;       /* GENERATE OFFSET               */
         BAL   @14,CONVERT                                         0147
*               CALL FMTRTN;        /* FORMAT THE LINE               */
         BAL   @14,FMTRTN                                          0148
*             END;                  /* END FORMAT LOOP               */
         AH    ARRAYCNT,@CH00041                                   0149
         CH    ARRAYCNT,@CH00065                                   0149
         BNH   @DL00145                                            0149
@DC00145 DS    0H                                                  0150
*             IF ERRSW=OFF THEN     /* NO PROBLEMS FORMATTING BASIC
*                                      SECT                          */
         TM    ERRSW,B'10000000'                                   0150
         BNZ   @RF00150                                            0150
*               DO;                                                0151
*                 VADR=ADDR(EEDERFL);/* ERROR ID FIELD ADDED FOR SU17*/
         LA    VADR,EEDERFL(,EEDPTR)                               0152
*                 CALL ACCESRTN;    /* ACCESS IT                     */
         BAL   @14,ACCESRTN                                        0153
*                 IF RCREG^=ZERO THEN/* ACCESS ERROR                 */
         LTR   RCREG,RCREG                                         0154
         BZ    @RF00154                                            0154
*                   BUFFER(1:LENGTH(EEDFMT))=EEDFMT;               0155
         L     @14,ADPLBUF(,ABDPLPTR)                              0155
         MVC   BUFFER(120,@14),EEDFMT                              0155
*                 ELSE              /* FOUND FLAG FIELD              */
*                   DO;                                            0156
         B     @RC00154                                            0156
@RF00154 DS    0H                                                  0157
*                     IF ERRFL=ON THEN/* EXTRA SECTION OF EED TO BE
*                                      FORMATTED                     */
         TM    ERRFL(DATAPTR),B'10000000'                          0157
         BNO   @RF00157                                            0157
*                       DO ARRAYCNT=ARRAYCNT TO DIM(EED2NAME) WHILE(
*                             ERRSW=OFF);                          0158
         B     @DE00158                                            0158
@DL00158 TM    ERRSW,B'10000000'                                   0158
         BNZ   @DC00158                                            0158
*                         LINEPTR=EED2NAME(ARRAYCNT);/* FORMAT     0159
*                                      PATTERN PTR                   */
         LR    @14,ARRAYCNT                                        0159
         SLA   @14,2                                               0159
         L     LINEPTR,EED2NAME-4(@14)                             0159
*                         CALL CONVERT;/* GENRATE OFFSET             */
         BAL   @14,CONVERT                                         0160
*                         CALL FMTRTN;/* FORMAT                      */
         BAL   @14,FMTRTN                                          0161
*                       END;        /* END LOOP                      */
         AH    ARRAYCNT,@CH00041                                   0162
@DE00158 CH    ARRAYCNT,@CH00184                                   0162
         BNH   @DL00158                                            0162
@DC00158 DS    0H                                                  0163
*                     ELSE                                         0163
*                       ;           /* ERROR ID NOT TO BE FORMATTED  */
@RF00157 DS    0H                                                  0164
*                   END;            /* END FOUND FLAG FIELD          */
*               END;                /* END NO ERROR DURING BASIC   0165
*                                      FORMATTING                    */
*             ELSE                                                 0166
*               ;                   /* ERROR FORMATTING BASIC SECTION*/
@RF00150 DS    0H                                                  0167
*           END;                    /* END DUMP OPTIONS TYPE         */
*                                                                  0168
*       /*************************************************************/
*       /*                                                           */
*       /* MACHINE CHECK EED - HARDWARE STATUS                       */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0168
*         ELSE                      /* NOT DUMP OPTIONS TYPE         */
*           IF IDSAVE=MACHINE THEN  /* MACHINE CHECK EED             */
         B     @RC00137                                            0168
@RF00137 CLC   IDSAVE(1),MACHINE                                   0168
         BNE   @RF00168                                            0168
*             DO;                                                  0169
*               BUFFER(1:LENGTH(EED3HDR))=EED3HDR;/* TITLE LINE      */
         L     @14,ADPLBUF(,ABDPLPTR)                              0170
         MVC   BUFFER(54,@14),EED3HDR                              0170
*               CALL PRINT;         /* PRINT IT                      */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0171
         BALR  @14,@15                                             0171
*               BUFFER(1:LENGTH(EEDUS))=EEDUS;/* UNDERSCORE          */
         L     @14,ADPLBUF(,ABDPLPTR)                              0172
         MVC   BUFFER(4,@14),EEDUS                                 0172
*               CALL PRINT;         /* PRINT IT                      */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0173
         BALR  @14,@15                                             0173
*               CALL PRINT;         /* 2 BLANKS                      */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0174
         BALR  @14,@15                                             0174
*               CALL PRINT;         /* BLANK                         */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0175
         BALR  @14,@15                                             0175
*               DO ARRAYCNT=1 TO EED3MAX WHILE(ERRSW=OFF);/* FORMAT
*                                      LOOP                          */
         LA    ARRAYCNT,1                                          0176
@DL00176 TM    ERRSW,B'10000000'                                   0176
         BNZ   @DC00176                                            0176
*                 LINEPTR=EED3NAME(ARRAYCNT);/* PTR TO FORMAT LINE   */
         LR    @14,ARRAYCNT                                        0177
         SLA   @14,2                                               0177
         L     LINEPTR,EED3NAME-4(@14)                             0177
*                 CALL CONVERT;     /* GENERATE OFFSET               */
         BAL   @14,CONVERT                                         0178
*                 CALL FMTRTN;      /* FORMAT                        */
         BAL   @14,FMTRTN                                          0179
*               END;                /* END LOOP                      */
         AH    ARRAYCNT,@CH00041                                   0180
         CH    ARRAYCNT,@CH00084                                   0180
         BNH   @DL00176                                            0180
@DC00176 DS    0H                                                  0181
*               IF ERRSW=OFF THEN   /* BASIC PART FORMATTED OK       */
         TM    ERRSW,B'10000000'                                   0181
         BNZ   @RF00181                                            0181
*                 DO;                                              0182
*                   VADR=ADDR(EEDERFL);/* ERROR ID FIELD             */
         LA    VADR,EEDERFL(,EEDPTR)                               0183
*                   CALL ACCESRTN;  /* ACCESS                        */
         BAL   @14,ACCESRTN                                        0184
*                   IF RCREG^=ZERO THEN/* ACCESS ERROR               */
         LTR   RCREG,RCREG                                         0185
         BZ    @RF00185                                            0185
*                     BUFFER(1:LENGTH(EEDFMT))=EEDFMT;             0186
         L     @14,ADPLBUF(,ABDPLPTR)                              0186
         MVC   BUFFER(120,@14),EEDFMT                              0186
*                   ELSE            /* FOUND FIELD                   */
*                     DO;                                          0187
         B     @RC00185                                            0187
@RF00185 DS    0H                                                  0188
*                       IF ERRFL=ON THEN/* FORMAT FOR ERROR ID       */
         TM    ERRFL(DATAPTR),B'10000000'                          0188
         BNO   @RF00188                                            0188
*                         DO ARRAYCNT=ARRAYCNT TO DIM(EED3NAME) WHILE(
*                               ERRSW=OFF);                        0189
         B     @DE00189                                            0189
@DL00189 TM    ERRSW,B'10000000'                                   0189
         BNZ   @DC00189                                            0189
*                           LINEPTR=EED3NAME(ARRAYCNT);/* PTR TO   0190
*                                      FORMAT PATTERN                */
         LR    @14,ARRAYCNT                                        0190
         SLA   @14,2                                               0190
         L     LINEPTR,EED3NAME-4(@14)                             0190
*                           CALL CONVERT;/* GENERATE OFFSET          */
         BAL   @14,CONVERT                                         0191
*                           CALL FMTRTN;/* FORMAT                    */
         BAL   @14,FMTRTN                                          0192
*                         END;      /* END FORMAT LOOP               */
         AH    ARRAYCNT,@CH00041                                   0193
@DE00189 CH    ARRAYCNT,@CH00065                                   0193
         BNH   @DL00189                                            0193
@DC00189 DS    0H                                                  0194
*                       ELSE                                       0194
*                         ;         /* NO ERROR ID TO FORMAT         */
@RF00188 DS    0H                                                  0195
*                     END;          /* END FOUND FLAG FIELD          */
*                 END;              /* END NO ERROR DURING BASIC   0196
*                                      FORMATTING                    */
*               ELSE                                               0197
*                 ;                 /* ERRORS DURING BASIC FORMATTING*/
@RF00181 DS    0H                                                  0198
*             END;                  /* END MACHINE CHECK TYPE        */
*                                                                  0199
*       /*************************************************************/
*       /*                                                           */
*       /* ERROR ID EED - EED TYPE 4                                 */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0199
*           ELSE                    /* NOT MACHINE CHECK TYPE        */
*             IF IDSAVE=ERRTYP THEN /* ERROR ID EED                  */
         B     @RC00168                                            0199
@RF00168 CLC   IDSAVE(1),ERRTYP                                    0199
         BNE   @RF00199                                            0199
*               DO;                                                0200
*                 BUFFER(1:LENGTH(EED4HDR))=EED4HDR;/* TITLE LINE    */
         L     @14,ADPLBUF(,ABDPLPTR)                              0201
         MVC   BUFFER(54,@14),EED4HDR                              0201
*                 CALL PRINT;       /* PRINT IT                      */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0202
         BALR  @14,@15                                             0202
*                 BUFFER(1:LENGTH(EEDUS))=EEDUS;/* UNDERSCORE        */
         L     @14,ADPLBUF(,ABDPLPTR)                              0203
         MVC   BUFFER(4,@14),EEDUS                                 0203
*                 CALL PRINT;       /* PRINT IT                      */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0204
         BALR  @14,@15                                             0204
*                 CALL PRINT;       /* BLANK                         */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0205
         BALR  @14,@15                                             0205
*                 DO ARRAYCNT=1 TO DIM(EED4NAME) WHILE(ERRSW=OFF);/*
*                                      FORMAT LOOP                   */
         LA    ARRAYCNT,1                                          0206
@DL00206 TM    ERRSW,B'10000000'                                   0206
         BNZ   @DC00206                                            0206
*                   LINEPTR=EED4NAME(ARRAYCNT);/* PTR TO FORMAT    0207
*                                      PATTERN                       */
         LR    @14,ARRAYCNT                                        0207
         SLA   @14,2                                               0207
         L     LINEPTR,EED4NAME-4(@14)                             0207
*                   CALL CONVERT;   /* GENERATE OFFSET               */
         BAL   @14,CONVERT                                         0208
*                   CALL FMTRTN;    /* FORMAT                        */
         BAL   @14,FMTRTN                                          0209
*                 END;              /* END FORMAT LOOP               */
         AH    ARRAYCNT,@CH00041                                   0210
         CH    ARRAYCNT,@CH00047                                   0210
         BNH   @DL00206                                            0210
@DC00206 DS    0H                                                  0211
*               END;                /* END ERROR ID TYPE EED         */
*             ELSE                  /* UNKNOWN EEDID                 */
*               DO;                                                0212
         B     @RC00199                                            0212
@RF00199 DS    0H                                                  0213
*                 BUFFER(1:LENGTH(UNKNOWN))=UNKNOWN;/* ERROR MESSAGE */
         L     @14,ADPLBUF(,ABDPLPTR)                              0213
         MVC   BUFFER(53,@14),UNKNOWN                              0213
*                 ERRSW=ON;         /* ERROR INDICATOR               */
         OI    ERRSW,B'10000000'                                   0214
*               END;                /* END UNKNOWN EED TYPE          */
*                                                                  0216
*       /*************************************************************/
*       /*                                                           */
*       /* IF FORMATTING OF EED WAS SUCESSFUL, ANALYZE THE BIT FLAGS */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0216
*       IF ERRSW=OFF&IDSAVE^=ERRTYP THEN/* BIT SUMMARY WANTED        */
@RC00199 DS    0H                                                  0216
@RC00168 DS    0H                                                  0216
@RC00137 DS    0H                                                  0216
@RC00123 TM    ERRSW,B'10000000'                                   0216
         BNZ   @RF00216                                            0216
         CLC   IDSAVE(1),ERRTYP                                    0216
         BE    @RF00216                                            0216
*         CALL EEDBITS;             /* ROUTINE TO ANALYZE BIT FLAGS  */
         BAL   @14,EEDBITS                                         0217
*       ELSE                                                       0218
*         ;                         /* NO BIT FLAG SUMMARY WANTED    */
@RF00216 DS    0H                                                  0219
*     END;                          /* END FOUND EEDID               */
*   CALL PRINT;                     /* ERROR MSG OR BLANK LINE       */
@RC00113 L     @15,ADPLPRNT(,ABDPLPTR)                             0220
         BALR  @14,@15                                             0220
*   CALL PRINT;                     /* BLANK LINE                    */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0221
         BALR  @14,@15                                             0221
*   LCALREGS=RTYREGS;               /* RESTORE TO RETRY REGS OF    0222
*                                      CALLER                        */
         MVC   LCALREGS(64,ESTAPTR),RTYREGS(ESTAPTR)               0222
*   RETURN CODE(RCCODE);                                           0223
         L     @09,RCCODE                                          0223
         L     @13,4(,@13)                                         0223
         L     @00,@SIZDATD                                        0223
         LR    @01,@10                                             0223
         FREEMAIN R,LV=(0),A=(1)
         LR    @15,@09                                             0223
         L     @14,12(,@13)                                        0223
         LM    @00,@12,20(@13)                                     0223
         BR    @14                                                 0223
*EEDBITS:                                                          0224
*   PROC OPTIONS(SAVE(14));                                        0224
*                                                                  0224
@EL00001 L     @13,4(,@13)                                         0224
@EF00001 L     @00,@SIZDATD                                        0224
         LR    @01,@10                                             0224
         FREEMAIN R,LV=(0),A=(1)
@ER00001 LM    @14,@12,12(@13)                                     0224
         BR    @14                                                 0224
EEDBITS  ST    @14,@SA00002                                        0224
*/********************************************************************/
*/* FUNCTION-                                                      0225
*      BIT SUMMARY FOR EEDS. FIND IF ANY FLAGS ARE ON AND IF SO PUTS OU
*     TITLE AND BIT SUMMARY.  IF NO FLAGS ARE ON, NO TITLE OR ANY  0225
*     MESSAGE WILL BE PRINTED.                                     0225
*                                                                  0225
*   INPUT -                                                        0225
*      EXPECTS EEDPTR TO CONTAIN THE ADDRESS OF THE EED AND REGISTER 1
*      TO POINT TO THE PARAMETER LIST PASSED BY THE CALLER.        0225
*                                                                  0225
*   CALLS-                                                         0225
*      CALLS ACCESRTN,ANALYZE,BYTEMODE,CONVERT,ENRTYRT1,AND PRINT  0225
*                                                                  0225
*   CALLED BY -                                                    0225
*      IEAFTEED TO PUT OUT THE BIT SUMMARY FOR EED                 0225
*                                                                  0225
*   RETURNS TO -                                                   0225
*      IEAFTEED WITH RETURN CODE SET BY THE ACCESS                 0225
*      SERVICE ROUTINE                                               */
*/********************************************************************/
*                                                                  0225
*   /*****************************************************************/
*   /*                                                               */
*   /* ANALYZE MODE BYTE                                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0225
*   HDRBIT=OFF;                     /* INITIALIZE FLAG               */
         NI    HDRBIT,B'01111111'                                  0225
*   VADR=ADDR(EEDMODE);             /* MODE BYTE                     */
         LA    VADR,EEDMODE(,EEDPTR)                               0226
*   CALL ACCESRTN;                  /* ACCESS IT                     */
         BAL   @14,ACCESRTN                                        0227
*   IF RCREG=ZERO&DATABYTE^=ZEROBYTE THEN/* COULD ACCESS             */
         LTR   RCREG,RCREG                                         0228
         BNZ   @RF00228                                            0228
         CLC   DATABYTE(1,DATAPTR),ZEROBYTE                        0228
         BE    @RF00228                                            0228
*     DO;                           /* AND NEEDS ANALYZED            */
*       CALL HDROUT;                /* BIT SUMMARY HDR ROUTINE       */
         BAL   @14,HDROUT                                          0230
*       ADPLFMT2=ADDR(EEDMODE);     /* FILL IN ADDRESS FOR GENERATING
*                                      THE OFFSET                    */
         LA    @14,EEDMODE(,EEDPTR)                                0231
         ST    @14,ADPLFMT2(,ABDPLPTR)                             0231
*       CALL BYTEMODE;              /* ROUTINE TO RESOLVE SYSTEM MODE*/
         BAL   @14,BYTEMODE                                        0232
*     END;                          /* END ANALYZE EEDMODE           */
*   ELSE                                                           0234
*     ;                             /* EEDMODE DID NOT NEED ANALYZED */
*                                                                  0234
@RF00228 DS    0H                                                  0235
*   /*****************************************************************/
*   /*                                                               */
*   /* ANALYZE RTM1 ENTRY REASON                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0235
*   VADR=ADDR(EEDERTYP);            /* REASON FOR ENTRY TO RTM1      */
         LA    VADR,EEDERTYP(,EEDPTR)                              0235
*   CALL ACCESRTN;                  /* ACCESS IT                     */
         BAL   @14,ACCESRTN                                        0236
*   IF RCREG=ZERO&DATABYTE^=ZEROBYTE THEN/* ANALYZE BYTE             */
         LTR   RCREG,RCREG                                         0237
         BNZ   @RF00237                                            0237
         CLC   DATABYTE(1,DATAPTR),ZEROBYTE                        0237
         BE    @RF00237                                            0237
*     DO;                                                          0238
*       CALL HDROUT;                /* BIT SUMMARY HDR ROUTINE       */
         BAL   @14,HDROUT                                          0239
*       ADPLFMT2=ADDR(EEDERTYP);    /* ADDRESS TO GEN OFFSET         */
         LA    @14,EEDERTYP(,EEDPTR)                               0240
         ST    @14,ADPLFMT2(,ABDPLPTR)                             0240
*       CALL ENTRYRT1;              /* ROUTINE TO RESOLVE RT1 EP     */
         BAL   @14,ENTRYRT1                                        0241
*       CALL PRINT;                 /* PRINT ENTRY REASON            */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0242
         BALR  @14,@15                                             0242
*     END;                          /* END ANALYZE BYTE              */
*   ELSE                                                           0244
*     ;                             /* NO NEED TO ANALYZE BYTE       */
@RF00237 DS    0H                                                  0245
*                                                                  0245
*/* MACHINE CHECK EEDS HAVE ADDITIONAL FLAGS TO BE ANALYZED          */
*                                                                  0245
*   IF IDSAVE=MACHINE THEN          /* MORE SUMMARY FOR MACHINE TYPE
*                                      EED                           */
         CLC   IDSAVE(1),MACHINE                                   0245
         BNE   @RF00245                                            0245
*     DO;                                                          0246
*                                                                  0246
*       /*************************************************************/
*       /*                                                           */
*       /* ANALYZE EEDHMCHS BYTE                                     */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0247
*       VADR=ADDR(EEDHMCHS);        /* BYTE FLAG                     */
         LA    VADR,EEDHMCHS(,EEDPTR)                              0247
*       CALL ACCESRTN;              /* ACCESS                        */
         BAL   @14,ACCESRTN                                        0248
*       IF RCREG=ZERO&DATABYTE^=ZEROBYTE THEN                      0249
         LTR   RCREG,RCREG                                         0249
         BNZ   @RF00249                                            0249
         CLC   DATABYTE(1,DATAPTR),ZEROBYTE                        0249
         BE    @RF00249                                            0249
*         DO;                       /* RESOLVE BYTE                  */
*           CALL HDROUT;            /* BIT SUMMARY HDR ROUTINE       */
         BAL   @14,HDROUT                                          0251
*           ADPLFMT2=ADDR(EEDHMCHS);/* ADDR NEEDED TO GEN OFFSET     */
         LA    @14,EEDHMCHS(,EEDPTR)                               0252
         ST    @14,ADPLFMT2(,ABDPLPTR)                             0252
*           ADPLCOM2=ADDR(SUMMARY); /* SUMMARY PTR IN PARMLIST       */
         LA    @14,SUMMARY                                         0253
         ST    @14,ADPLCOM2(,ABDPLPTR)                             0253
*           BYTEADDR=ADDR(DATABYTE);/* ADDR OF BYTE TO BE RESOLVED   */
         ST    DATAPTR,BYTEADDR                                    0254
*           MSGADDR=ADDR(MCHSMSG);  /* MESSAGE ARRAY                 */
         LA    @14,MCHSMSG                                         0255
         ST    @14,MSGADDR                                         0255
*           MSGLNGTH=LENGTH(MCHSMSG);/* MSG ARRAY LENGTH             */
         MVC   MSGLNGTH(4),@CF01246                                0256
*           CALL CONVERT;           /* GENERATE OFFSET               */
         BAL   @14,CONVERT                                         0257
*           OFFSET=CONVERTD;        /* PUT OFFSET IN BUFFER          */
         L     @14,ADPLBUF(,ABDPLPTR)                              0258
         MVC   OFFSET(6,@14),CONVERTD                              0258
*           COLNUM=DEFAULT;         /* WHERE IN BUFFER TO START      */
         MVC   COLNUM(4),@CF00075                                  0259
*           CALL ANALYZE;           /* ANALYZE THE BYTE ANALYZE BYTE */
         BAL   @14,ANALYZE                                         0260
*         END;                      /* END RESOLVE BYTE              */
*       ELSE                                                       0262
*         ;                         /* NO BYTE TO RESOLVE            */
*                                                                  0262
@RF00249 DS    0H                                                  0263
*       /*************************************************************/
*       /*                                                           */
*       /* ANALYZE EEDHMCHD BYTE                                     */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0263
*       VADR=ADDR(EEDHMCHD);        /* FLAG BYTE                     */
         LA    VADR,EEDHMCHD(,EEDPTR)                              0263
*       CALL ACCESRTN;              /* ACCESS                        */
         BAL   @14,ACCESRTN                                        0264
*       IF RCREG=ZERO&DATABYTE^=ZEROBYTE THEN/* ANALYZE BYTE         */
         LTR   RCREG,RCREG                                         0265
         BNZ   @RF00265                                            0265
         CLC   DATABYTE(1,DATAPTR),ZEROBYTE                        0265
         BE    @RF00265                                            0265
*         DO;                                                      0266
*           CALL HDROUT;            /* BIT SUMMARY HDR ROUTINE       */
         BAL   @14,HDROUT                                          0267
*           ADPLFMT2=ADDR(EEDHMCHD);/* ADDR NEEDED TO GEN OFFSET     */
         LA    @14,EEDHMCHD(,EEDPTR)                               0268
         ST    @14,ADPLFMT2(,ABDPLPTR)                             0268
*           ADPLCOM2=ADDR(SUMMARY); /* SUMMARY PTR IN PARMLIST       */
         LA    @14,SUMMARY                                         0269
         ST    @14,ADPLCOM2(,ABDPLPTR)                             0269
*           BYTEADDR=ADDR(DATABYTE);/* ADDR OF BYTE TO BE RESOLVED   */
         ST    DATAPTR,BYTEADDR                                    0270
*           MSGADDR=ADDR(MCHDMSG);  /* MESSAGE ARRAY                 */
         LA    @14,MCHDMSG                                         0271
         ST    @14,MSGADDR                                         0271
*           MSGLNGTH=LENGTH(MCHDMSG);/* MSG ARRAY LENGTH             */
         MVC   MSGLNGTH(4),@CF01227                                0272
*           CALL CONVERT;           /* GENERATE OFFSET               */
         BAL   @14,CONVERT                                         0273
*           OFFSET=CONVERTD;        /* PUT OFFSET IN BUFFER          */
         L     @14,ADPLBUF(,ABDPLPTR)                              0274
         MVC   OFFSET(6,@14),CONVERTD                              0274
*           COLNUM=DEFAULT;         /* WHERE IN BUFFER TO START      */
         MVC   COLNUM(4),@CF00075                                  0275
*           CALL ANALYZE;           /* ANALYZE THE BYTE ANALYZE BYTE */
         BAL   @14,ANALYZE                                         0276
*         END;                      /* END ANALYZE BYTE              */
*       ELSE                                                       0278
*         ;                         /* NO BYTE TO BE ANALYZED        */
@RF00265 DS    0H                                                  0279
*     END;                          /* END MACHINE CHECK SUMMARY     */
*   ELSE                                                           0280
*     ;                             /* NOT MACHINE TYPE              */
@RF00245 DS    0H                                                  0281
*   RETURN CODE(RCCODE);                                           0281
         L     @15,RCCODE                                          0281
@EL00002 DS    0H                                                  0281
@EF00002 DS    0H                                                  0281
@ER00002 L     @14,@SA00002                                        0281
         BR    @14                                                 0281
*   END EEDBITS;                    /* END EED SUMMARY               */
*HDROUT:                                                           0283
*   PROC OPTIONS(SAVE(14));                                        0283
*                                                                  0283
HDROUT   ST    @14,@SA00003                                        0283
*/********************************************************************/
*/* FUNCTION-                                                      0284
*      ROUTINE TO PUT OUT THE HEADER FOR THE BIT SUMMARY IF THE HEADER
*     HAS NOT ALREADY BEEN PRITNED.                                0284
*                                                                  0284
*   INPUT -                                                        0284
*      EXPECTS REGISTER 1 TO POINT TO THE PARAMETER LIST PASSED    0284
*      BY THE CALLER.                                              0284
*                                                                  0284
*   CALLS-                                                         0284
*      CALLS PRINT                                                 0284
*                                                                  0284
*   CALLED BY -                                                    0284
*      EEDBITS TO PUT OUT THE BIT SUMMARY HEADER LINE              0284
*                                                                  0284
*   RETURNS TO -                                                   0284
*      EEDBITS WITHOUT SETTING A RETURN CODE                         */
*/********************************************************************/
*                                                                  0284
*   IF HDRBIT=OFF THEN              /* NEED HEADER                   */
         TM    HDRBIT,B'10000000'                                  0284
         BNZ   @RF00284                                            0284
*     DO;                                                          0285
*       HDRBIT=ON;                  /* HEADER PRINTED                */
         OI    HDRBIT,B'10000000'                                  0286
*       CALL PRINT;                 /* 2 BLANKS                      */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0287
         BALR  @14,@15                                             0287
*       CALL PRINT;                 /* BLANK                         */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0288
         BALR  @14,@15                                             0288
*       BUFFER(31:LENGTH(EEDSUM)+30)=EEDSUM;/* SUMMARY TITLE         */
         L     @14,ADPLBUF(,ABDPLPTR)                              0289
         MVC   BUFFER+30(20,@14),EEDSUM                            0289
*       CALL PRINT;                 /* PRINT IT                      */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0290
         BALR  @14,@15                                             0290
*       BUFFER(31:LENGTH(EEDSUMUS)+30)=EEDSUMUS;/* UNDERSCORE        */
         L     @14,ADPLBUF(,ABDPLPTR)                              0291
         MVC   BUFFER+30(20,@14),EEDSUMUS                          0291
*       CALL PRINT;                 /* PRINT IT                      */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0292
         BALR  @14,@15                                             0292
*       CALL PRINT;                 /* BLANK                         */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0293
         BALR  @14,@15                                             0293
*     END;                          /* END NEEDS HDR                 */
*   ELSE                                                           0295
*     ;                             /* NEEDS NO HEADER               */
@RF00284 DS    0H                                                  0296
*   END HDROUT;                                                    0296
@EL00003 DS    0H                                                  0296
@EF00003 DS    0H                                                  0296
@ER00003 L     @14,@SA00003                                        0296
         BR    @14                                                 0296
*                                                                  0297
*/********************************************************************/
*/*                                                                  */
*/*         THE FOLLOWING CODE HAS BEEN INCLUDED FROM SYSLIB MEMBER  */
*/*     IHAFTCD1 INTO THE MODULE. THE CODE IS INCLUDED ONLY FROM     */
*/*     THE EED FORMATTER AND THE IHSA-FRRS FORMATTER. THE INCLUDED  */
*/*     CODE CONSISTS OF THE BYTEMODE AND ENTRYRT1 ROUTINES.         */
*/*         THE CODE HAS BEEN INCLUDED IN ORDER TO SIMPLIFY          */
*/*     MAINTENANCE BY HAVING THE CODE IN ONLY ONE PLACE INSTEAD     */
*/*     OF DUPLICATING IT IN EACH MODULE.                            */
*/********************************************************************/
*                                                                  0297
*                                                                  0297
*   /*****************************************************************/
*   /*                                                               */
*   /* WORK AREAS UNIQUE TO THE INCLUDED CODE FROM IHAFTCD1          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0297
*   DCL                                                            0297
*     ENDMSG CHAR(70) BASED;        /* AREA TO FINISH MSG IN         */
*                                                                  0297
*   /*****************************************************************/
*   /*                                                               */
*   /* MESSAGES UNIQUE TO THE INCLUDED CODE                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0298
*   DCL                                                            0298
*     EXITMSG CHAR(34) INIT('FIELD CONTAINS INTERNAL EXIT FLAGS'); 0298
*   DCL                                                            0299
*     MODEMSG(8) CHAR(25) INIT('SUPERVISOR CONTROL MODE',          0299
*         'PHYSICALLY DISABLED STATE','GLOBAL SPIN LOCK HELD',     0299
*         'GLOBAL SUSPEND LOCK HELD','LOCALLY LOCKED MODE',        0299
*         'TYPE 1 SVC MODE','SRB MODE','TASK MODE');               0299
*   DCL                                                            0300
*     RTARRAY(14) CHAR(50) INIT('PROGRAM CHECK','RESTART','SVC ERROR',
*         'DAT ERROR','MACHINE CHECK REENTRY',                     0300
*         'RESCHEDULE OF PAGE I/O ERROR',                          0300
*         'RESCHEDULE OF ABNORMAL TERMINATION',                    0300
*         'RESCHEDULE OF ABNORMAL TERMINATION THROUGH CVTBTRM',    0300
*         'RESCHEDULE OF CROSS MEMORY ABNORMAL TERMINATION',       0300
*         'RESCHEDULE OF ABNORMAL TERMINATION OF CURRENT TCB',     0300
*         'MEMORY TERMINATION','CROSS MEMORY ABNORMAL TERMINATION',
*         'RESCHEDULE OF RTM1 ON OTHER CPU','MACHINE CHECK');      0300
*   DCL                                                            0301
*     RTSTART CHAR(17) INIT('RTM1 ENTERED FOR ');                  0301
*   DCL                                                            0302
*     SYSTATE CHAR(13) INIT('SYSTEM STATE:');                      0302
*BYTEMODE:                                                         0303
*   PROC OPTIONS(SAVE(14));                                        0303
*                                                                  0303
BYTEMODE ST    @14,@SA00004                                        0303
*/********************************************************************/
*/* FUNCTION-                                                      0304
*       ROUTINE TO ANALYZE THE SYSTEM MODE BYTE AND PLACE THE      0304
*     CORRESPONDING MESSAGE IN THE BUFFER AND PRINT OUT THE DATA.  0304
*                                                                  0304
*                                                                  0304
*   INPUT -                                                        0304
*       DATAPTR MUST CONTAIN THE ADDRESS OF THE BYTE TO BE ANALYZED
*     AND REGISTER 1 POINTS TO THE PARMLIST.                       0304
*                                                                  0304
*    CALLS-                                                        0304
*       ANALYZE AND CONVERT                                        0304
*                                                                  0304
*    CALLED BY -                                                   0304
*        EEDBITS, IEAFTESA, RT1BITS TO ANALYZE THE MODE BYTE       0304
*                                                                  0304
*    RETURNS TO -                                                  0304
*        CALLER WITHOUT SETTING A RETURN CODE                      0304
*                                                                  0304
*   THIS PROCEDURE HAS BEEN INCLUDED FROM SYSLIB(IHAFTCD1) ------  0304
*                                                                    */
*/********************************************************************/
*                                                                  0304
*   BUFFER(8:(LENGTH(SYSTATE)+7))=SYSTATE;/* BEGINNING OF MESSAGE    */
         L     @14,ADPLBUF(,ABDPLPTR)                              0304
         MVC   BUFFER+7(13,@14),SYSTATE                            0304
*   ADPLCOM2=ADDR(SUMMARY);         /* SUMMARY PTR IN PARMLIST       */
         LA    @14,SUMMARY                                         0305
         ST    @14,ADPLCOM2(,ABDPLPTR)                             0305
*   BYTEADDR=ADDR(DATABYTE);        /* ADDR OF BYTE TO BE RESOLVED   */
         ST    DATAPTR,BYTEADDR                                    0306
*   MSGADDR=ADDR(MODEMSG);          /* MESSAGE ARRAY                 */
         LA    @14,MODEMSG                                         0307
         ST    @14,MSGADDR                                         0307
*   MSGLNGTH=LENGTH(MODEMSG);       /* MSG ARRAY LENGTH              */
         MVC   MSGLNGTH(4),@CF01296                                0308
*   CALL CONVERT;                   /* GENERATE OFFSET               */
         BAL   @14,CONVERT                                         0309
*   OFFSET=CONVERTD;                /* PUT OFFSET IN BUFFER          */
         L     @14,ADPLBUF(,ABDPLPTR)                              0310
         MVC   OFFSET(6,@14),CONVERTD                              0310
*   COLNUM=22;                      /* WHERE IN BUFFER TO START      */
         MVC   COLNUM(4),@CF01360                                  0311
*   CALL ANALYZE;                   /* ANALYZE THE BYTE ANALYZE BYTE */
         BAL   @14,ANALYZE                                         0312
*   END BYTEMODE;                                                  0313
@EL00004 DS    0H                                                  0313
@EF00004 DS    0H                                                  0313
@ER00004 L     @14,@SA00004                                        0313
         BR    @14                                                 0313
*ENTRYRT1:                                                         0314
*   PROC OPTIONS(SAVE(14));                                        0314
*                                                                  0314
ENTRYRT1 ST    @14,@SA00005                                        0314
*/********************************************************************/
*/* FUNCTION-                                                      0315
*       ROUTINE TO ANALYZE THE RTM1 ENTRY POINT CODE AND FILL IN   0315
*     THE BUFFER WITH THE APPROPRIATE MESSAGE. IT ALSO FILLS IN    0315
*     THE OFFSET TO BE PLACED ALONG SIDE THE MESSAGE.              0315
*                                                                  0315
*                                                                  0315
*   INPUT -                                                        0315
*       DATAPTR MUST CONTAIN THE ADDRESS OF THE BYTE TO BE ANALYZED
*     AND REGISTER 1 POINTS TO THE PARMLIST PASSED BY THE CALLER.  0315
*                                                                  0315
*    CALLS-                                                        0315
*       CONVERT                                                    0315
*                                                                  0315
*    CALLED BY -                                                   0315
*        EEDBITS, RT1BITS TO ANALYZE ENTRY TO RT1 REASON BYTE      0315
*                                                                  0315
*    RETURNS TO -                                                  0315
*        CALLER WITHOUT SETTING A RETURN CODE                      0315
*                                                                  0315
*   THIS PROCEDURE HAS BEEN INCLUDED FROM SYSLIB(IHAFTCD1) ------  0315
*                                                                    */
*/********************************************************************/
*                                                                  0315
*   CALL CONVERT;                   /* GENERATE OFFSET               */
         BAL   @14,CONVERT                                         0315
*   OFFSET=CONVERTD;                /* PLACE IN BUFFER               */
         L     @14,ADPLBUF(,ABDPLPTR)                              0316
         MVC   OFFSET(6,@14),CONVERTD                              0316
*   IF DATABYTE>RT1WMACH THEN       /* FIELD CONTAINS EXIT FLAGS     */
         CLI   DATABYTE(DATAPTR),20                                0317
         BNH   @RF00317                                            0317
*     BUFFER(8:(LENGTH(EXITMSG)+7))=EXITMSG;                       0318
         MVC   BUFFER+7(34,@14),EXITMSG                            0318
*   ELSE                                                           0319
*     DO;                           /* WAS NOT EXIT FLAGS            */
         B     @RC00317                                            0319
@RF00317 DS    0H                                                  0320
*       BUFFER(8:(LENGTH(RTSTART)+7))=RTSTART;/* FILL IN BEGINNING OF
*                                      BUFFER                        */
         L     @14,ADPLBUF(,ABDPLPTR)                              0320
         MVC   BUFFER+7(17,@14),RTSTART                            0320
*       RFY                                                        0321
*         ENDMSG BASED(ADDR(BUFFER)+LENGTH(RTSTART)+8);            0321
*       IF DATABYTE<=RT1WMCHR THEN  /* FIRST 5 CORRESPOND TO ARRAY   */
         CLI   DATABYTE(DATAPTR),5                                 0322
         BH    @RF00322                                            0322
*         ENDMSG=RTARRAY(DATABYTE); /* END OF MESSAGE                */
         MVI   ENDMSG+75(@14),C' '                                 0323
         MVC   ENDMSG+76(19,@14),ENDMSG+75(@14)                    0323
         SLR   @08,@08                                             0323
         IC    @08,DATABYTE(,DATAPTR)                              0323
         MH    @08,@CH00381                                        0323
         LA    @05,RTARRAY-50(@08)                                 0323
         MVC   ENDMSG+25(50,@14),0(@05)                            0323
*       ELSE                        /* NOT OF FIRST 5                */
*         IF DATABYTE<=RSCHDCPU THEN/* NEXT BATCH OF VALUES          */
         B     @RC00322                                            0324
@RF00322 CLI   DATABYTE(DATAPTR),17                                0324
         BH    @RF00324                                            0324
*           ENDMSG=RTARRAY(DATABYTE-'04'X);/* CORRESPONDING ARRAY  0325
*                                      VALUE                         */
         L     @14,ADPLBUF(,ABDPLPTR)                              0325
         MVI   ENDMSG+75(@14),C' '                                 0325
         MVC   ENDMSG+76(19,@14),ENDMSG+75(@14)                    0325
         SLR   @08,@08                                             0325
         IC    @08,DATABYTE(,DATAPTR)                              0325
         MH    @08,@CH00381                                        0325
         LA    @05,RTARRAY-250(@08)                                0325
         MVC   ENDMSG+25(50,@14),0(@05)                            0325
*         ELSE                                                     0326
*           ENDMSG=RTARRAY(DIM(RTARRAY));/* LAST MESSAGE             */
         B     @RC00324                                            0326
@RF00324 L     @14,ADPLBUF(,ABDPLPTR)                              0326
         MVI   ENDMSG+75(@14),C' '                                 0326
         MVC   ENDMSG+76(19,@14),ENDMSG+75(@14)                    0326
         MVC   ENDMSG+25(50,@14),RTARRAY+650                       0326
*     END;                          /* END DID NOT CONTAIN EXIT FLAGS*/
*   END ENTRYRT1;                                                  0328
@EL00005 DS    0H                                                  0328
@EF00005 DS    0H                                                  0328
@ER00005 L     @14,@SA00005                                        0328
         BR    @14                                                 0328
*                                                                  0329
*/********************************************************************/
*/*                                                                  */
*/*         THE FOLLOWING CODE HAS BEEN INCLUDED FROM SYSLIB MEMBER  */
*/*     IHAFTCDE INTO THE MODULE. THE CODE IS COMMON AMONG ALL THE   */
*/*     CONTROL BLOCK FORMAT MODULES FOR THE RTM FORMATTER. THE      */
*/*     INCLUDED CODE CONSISTS OF THE ACCESS, FORMAT, CONVERT,       */
*/*     AND ANALYZE ROUTINES USED BY ALL THE MODULES.                */
*/*         THE CODE HAS BEEN INCLUDED IN ORDER TO SIMPLIFY          */
*/*     MAINTENANCE BY HAVING THE CODE IN ONLY ONE PLACE INSTEAD     */
*/*     OF DUPLICATING IT IN EACH MODULE.                            */
*/********************************************************************/
*                                                                  0329
*                                                                  0329
*   /*****************************************************************/
*   /*                                                               */
*   /* WORK AREAS UNIQUE TO THE INCLUDED CODE FROM IHAFTCDE          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0329
*   DCL                                                            0329
*     BITSTR BIT(8) BASED(BYTEADDR);/* BYTE TO BE ANALYZED           */
*   DCL                                                            0330
*     BLANKS CHAR(120) INIT(' ');   /* USED TO BLANK OUT DIGIT FIELD
*                                      OR TO COMPARE WITH THE MESSAGE
*                                      ARRAYS FOR BLANK LINES        */
*   DCL                                                            0331
*     BYTELNTH FIXED(31) CONSTANT(8);/* NUM BITS IN A BYTE           */
*   DCL                                                            0332
*     CONVRT FIXED(31);             /* VALUE OF OFFSET               */
*   DCL                                                            0333
*     INDEX FIXED(31);              /* LOOP COUNTER FOR ANALYZE    0333
*                                      ROUTINE                       */
*   DCL                                                            0334
*     LNGTHEQU FIXED(31);           /* CALCULATE SUBSTRING ADR FOR 0334
*                                      PROPER MSG                    */
*   DCL                                                            0335
*     MSG CHAR(120) BASED(ADPLCOM1);/* ERROR MSG TO BE PUT OUT BY  0335
*                                      FORMAT ROUTINE ERROR          */
*   DCL                                                            0336
*     MSGARY CHAR(*) BASED(MSGADDR);/* MESSAGES PASSED TO BE OUTPUT  */
*   DCL                                                            0337
*     NEGBIT BIT(1);                /* FLAG TO INDICATE NEG OFFSET   */
*   DCL                                                            0338
*     NEGCHAR CHAR(1) CONSTANT('-');/* CONSTANT '-' TO BE PUT IN   0338
*                                      OFFSET                        */
*   DCL                                                            0339
*     PLUSCHAR CHAR(1) CONSTANT('+');/* CONSTANT '+' TO BE PUT IN  0339
*                                      OFFSET                        */
*   DCL                                                            0340
*     TESTBITS(8) BIT(8) INIT('80'X,'40'X,'20'X,'10'X,'08'X,'04'X,'02'X
*         ,'01'X);                  /* TO TELL WHICH BIT IS ON       */
*   DCL                                                            0341
*     TWODGT FIXED(31) CONSTANT(16);/* FIRST OF 2 HEX DIGITS         */
*   DCL                                                            0342
*     THREDGT FIXED(31) CONSTANT(256);/* FIRST OF 3 HEX DIGITS       */
*   DCL                                                            0343
*     FOURDGT FIXED(31) CONSTANT(4096);/* FIRST OF 4 HEX DIGITS      */
*CONVERT:                                                          0344
*   PROC OPTIONS(SAVE(14));                                        0344
*                                                                  0344
CONVERT  ST    @14,12(,@13)                                        0344
*/********************************************************************/
*/* FUNCTION -                                                     0345
*      ROUTINE TO DYNAMICALLY GENERATE THE OFFSETS TO BE PUT ALONGSIDE
*      THE CONTROL BLOCK LINE.  IT FIGURES THE OFFSET FROM THE     0345
*      BEGINNING OF THE CONTROL BLOCK, CONVERTS IT TO PRINTABLE HEX,
*      PLACES IT INTO A BUFFER AREA AND PUTS THE ADDRESS OF THIS   0345
*      BUFFER AREA INTO THE PARAMETER LIST TO BE PICKED UP IN THE  0345
*      FORMAT PATTERNS BY THE FORMAT SERVICE ROUTINE.              0345
*                                                                  0345
*   INPUT -                                                        0345
*      SAVEPTR MUST HAVE THE ADDRESS OF THE BEGINNING OF THE CONTROL
*      BLOCK, REGISTER 1 POINTS TO THE PARMLIST WHICH CONTAINS THE 0345
*      CURRENT CONTROL BLOCK ADDRESS IN ADPLFMT2.                  0345
*                                                                  0345
*   CALLS -                                                        0345
*      MAKES NO OUTSIDE CALLS                                      0345
*                                                                  0345
*   CALLED BY -                                                    0345
*      BYTEMODE, EEDBITS, ENTRYRT1, IEAFTEED, IEAFTESA, IEAFTFRR,  0345
*      IEAFTIHS, IEAFTRTC, IEAFTRT2, IEAFTSCB, IEAFTSDW, RT1BITS,  0345
*      RT2BITS, RT2SUM, AND SPECIAL                                0345
*                                                                  0345
*   RETURNS TO -                                                   0345
*      CALLER.                                                     0345
*                                                                  0345
*   THIS PROCEDURE HAS BEEN INCLUDED FROM SYSLIB(IHAFTCDE) ------  0345
*                                                                    */
*/********************************************************************/
*                                                                  0345
*   IF SAVEPTR>ADPLFMT2 THEN        /* THIS WILL OCCUR FOR A PREFIX
*                                      WITH A NEGATIVE OFFSET        */
         L     @14,SAVEPTR                                         0345
         L     @08,ADPLFMT2(,ABDPLPTR)                             0345
         CR    @14,@08                                             0345
         BNH   @RF00345                                            0345
*     DO;                                                          0346
*       NEGBIT=ON;                  /* INDICATE NEGATIVE OFFSET      */
         OI    NEGBIT,B'10000000'                                  0347
*       CONVRT=SAVEPTR-ADPLFMT2;    /* NEGATIVE OFFSET VALUE         */
         L     @04,ADPLFMT2(,ABDPLPTR)                             0348
         SLR   @14,@04                                             0348
         LR    CONVRT,@14                                          0348
*     END;                          /* END NEGATIVE OFFSET           */
*   ELSE                            /* POSITIVE OR ZERO OFFSET       */
*     DO;                                                          0350
         B     @RC00345                                            0350
@RF00345 DS    0H                                                  0351
*       NEGBIT=OFF;                 /* INDICATE POS VALUE            */
         NI    NEGBIT,B'01111111'                                  0351
*       CONVRT=ADPLFMT2-SAVEPTR;    /* RELATIVE OFFSET IN CONTROL  0352
*                                      BLOCK                         */
         L     CONVRT,ADPLFMT2(,ABDPLPTR)                          0352
         SL    CONVRT,SAVEPTR                                      0352
*     END;                          /* END POS VALUE                 */
*   DIGIT=BLANKS(1:5);              /* BLANK OUT DIGITS              */
@RC00345 MVC   DIGIT(5),BLANKS                                     0354
*   PACKAREA=CONVRT;                /* PLACE OFFSET INTO CHAR AREA 0355
*                                      FOR THE UNPACK                */
         ST    CONVRT,PACKAREA                                     0355
*   GARBAGE='04'X;                  /* GARBAGE BYTE SO OFFSET WILL 0356
*                                      UNPACK OK                     */
*                                                                  0356
         MVI   GARBAGE,X'04'                                       0356
*   /*****************************************************************/
*   /*                                                               */
*   /* FOR AN ODD NUMBER OF DIGITS THE OUTPUT SHOULD LOOK LIKE +C OR */
*   /* +13C. IF THE VALUE WAS UNPACKED DIRECTLY INTO DIGITS THE      */
*   /* OUTPUT WOULD HAVE UNWANTED LEADING ZEROS SUCH AS +0C. TO      */
*   /* ELIMINATE THIS(ONLY FOR AN ODD NUMBER OF DIGITS) UNPACK ODD   */
*   /* NUMBER OF DIGITS INTO CONVERTD WHERE THE LEADING ZERO WILL BE */
*   /* OVERWRITTEN BY THE '+' OR '-' SIGN                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0357
*   IF CONVRT<TWODGT THEN           /* ONLY 1 DIGIT TO OFFSET        */
         CH    CONVRT,@CH00198                                     0357
         BNL   @RF00357                                            0357
*     UNPK(CONVERTD(1:3),UNPACK(4:5));/* UNPACK ONLY 1 DIGIT AND   0358
*                                      DUMMY                         */
         UNPK  CONVERTD(3),UNPACK+3(2)                             0358
*   ELSE                                                           0359
*     IF CONVRT<THREDGT THEN        /* 2 DIGITS TO OFFSET            */
         B     @RC00357                                            0359
@RF00357 CH    CONVRT,@CH01168                                     0359
         BNL   @RF00359                                            0359
*       UNPK(DIGIT(1:3),UNPACK(4:5));/* UNPACK LAST 2 DIGITS & DUMMY */
         UNPK  DIGIT(3),UNPACK+3(2)                                0360
*     ELSE                                                         0361
*       IF CONVRT<FOURDGT THEN      /* 3 DIGITS TO OFFSET            */
         B     @RC00359                                            0361
@RF00359 CH    CONVRT,@CH01388                                     0361
         BNL   @RF00361                                            0361
*         UNPK(CONVERTD(1:5),UNPACK(3:5));/* UNPACK LAST 3 DIGITS &
*                                      DUMMY                         */
         UNPK  CONVERTD(5),UNPACK+2(3)                             0362
*       ELSE                        /* 4 DIGITS (MAX)                */
*         UNPK(DIGIT(1:5),UNPACK(3:5));/* LAST 4 DIGITS & DUMMY BYTE */
         B     @RC00361                                            0363
@RF00361 UNPK  DIGIT(5),UNPACK+2(3)                                0363
*   TR(DIGIT,TRANS);                /* MAKE PRINTABLE                */
@RC00361 DS    0H                                                  0364
@RC00359 DS    0H                                                  0364
@RC00357 TR    DIGIT(5),TRANS                                      0364
*   IF NEGBIT=ON THEN               /* WAS A NEGATIVE OFFSET         */
         TM    NEGBIT,B'10000000'                                  0365
         BNO   @RF00365                                            0365
*     PLUS=NEGCHAR;                 /* MINUS SIGN                    */
         MVI   PLUS,C'-'                                           0366
*   ELSE                            /* POSITIVE OFFSET               */
*     PLUS=PLUSCHAR;                /* MOVE IN PLUS SIGN             */
         B     @RC00365                                            0367
@RF00365 MVI   PLUS,C'+'                                           0367
*   ADPLFMT1=ADDR(CONVERTD);        /* SET UP FOR FORMAT             */
@RC00365 LA    @14,CONVERTD                                        0368
         ST    @14,ADPLFMT1(,ABDPLPTR)                             0368
*   END CONVERT;                                                   0369
@EL00006 DS    0H                                                  0369
@EF00006 DS    0H                                                  0369
@ER00006 L     @14,12(,@13)                                        0369
         BR    @14                                                 0369
*FMTRTN:                                                           0370
*   PROC OPTIONS(SAVE(14));                                        0370
*                                                                  0370
FMTRTN   ST    @14,@SA00007                                        0370
*/****************************************************************** */
*/* FUNCTION                                                       0371
*       ROUTINE TO SET UP CALLING OF THE FORMAT SERVICE ROUTINE PASSED
*     IN THE PARMLIST AND CHECKS RETURN CODE.  IF A RETURN CODE IS BAD
*     IT TAKES THE MESSAGE WHOSE ADDRESS IS IN ADPLCOM1. AND PUTS IT
*     IN THE BUFFER AND PRINTS IT. IT SETS THE ERRSW TO INDICATE BAD
*     RETURN CODE AND RETURNS. IF THE RETURN CODE WAS GOOD, IT PRINTS
*     THE FORMATTED LINE.                                          0371
*                                                                  0371
*   CALLS-                                                         0371
*       CALLS FORMAT AND PRINT                                     0371
*                                                                  0371
*   INPUT -                                                        0371
*     LINEPTR(REGISTER 0) HAS THE ADDRESS OF THE FORMAT PATTERN TO BE
*    PASSED TO THE FORMAT SERVICE ROUTINE. ADPLFMT2 CONTAINS THE CURREN
*    ADDRESS OF THE CONTROL BLOCK TO BE FORMATTED AND ,IN MOST CASES,
*    ADPLFMT1 CONTAINS THE ADDRESS OF THE FIELD 'CONVERTD' WHICH IS
*    THE EBCDIC REPRESENTATION OF THE OFFSET TO BE PLACED ALONG SIDE
*    THE OUTPUT LINE.                                              0371
*                                                                  0371
*   CALLED BY -                                                    0371
*     IEAFTEED,IEAFTFRR,IEAFTIHS,IEAFTRTC,IEAFTRT2,IEAFTSCB,       0371
*     IEAFTSDW, RT2SUM,AND SPECIAL                                 0371
*                                                                  0371
*   RETURNS CONTROL TO -                                           0371
*     CALLER WITH RETURN CODE RECIEVED FROM FORMAT                 0371
*     SERVICE ROUTINE                                              0371
*                                                                  0371
*   THIS PROCEDURE HAS BEEN INCLUDED FROM SYSLIB(IHAFTCDE) ------  0371
*                                                                    */
*/****************************************************************** */
*                                                                  0371
*   IF ADPLSNPR=OFF THEN            /* IF SNAP IS THE CALLER, AN   0371
*                                      ACCESS ERROR CAN BE EXPECTED  */
         TM    ADPLSNPR(ABDPLPTR),B'10000000'                      0371
         BNZ   @RF00371                                            0371
*     DO;                                                          0372
*       RTYADR=ADDR(FMTRTY);        /* WHERE TO RETRY                */
         LA    @14,FMTRTY                                          0373
         ST    @14,RTYADR(,ESTAPTR)                                0373
*       ERREXP=ON;                  /* INDICATE AN ERROR IS EXPECTED */
         OI    ERREXP(ESTAPTR),B'10000000'                         0374
*     END;                          /* END SNAP IS THE CALLER        */
*   ELSE                                                           0376
*     ;                             /* SNAP WAS NOT INVOKER          */
@RF00371 DS    0H                                                  0377
*   CALL FORMAT;                    /* FORMAT ROUTINE PASSED BY    0377
*                                      CALLER                        */
         L     @15,ADPLFRMT(,ABDPLPTR)                             0377
         BALR  @14,@15                                             0377
*   ERREXP=OFF;                     /* ERROR IS NO LONGER EXPECTED   */
         NI    ERREXP(ESTAPTR),B'01111111'                         0378
*   IF RCREG^=ZERO THEN                                            0379
         LTR   RCREG,RCREG                                         0379
         BZ    @RF00379                                            0379
*     DO;                           /* FORMAT ROUTINE ERROR          */
*FMTRTY:                            /* RETRY POINT FROM ERROR        */
*       ERRSW=ON;                   /* SET ERROR INDICATOR           */
FMTRTY   OI    ERRSW,B'10000000'                                   0381
*       CALL PRINT;                 /* SPACE A LINE                  */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0382
         BALR  @14,@15                                             0382
*       BUFFER=MSG;                 /* ERROR MSG PASSED BY CALLER  0383
*                                      WHOSE ADDR IS PLACED IN     0383
*                                      ADPLCOM1                      */
         L     @14,ADPLBUF(,ABDPLPTR)                              0383
         L     @08,ADPLCOM1(,ABDPLPTR)                             0383
         MVC   BUFFER(120,@14),MSG(@08)                            0383
*       RCREG=4;                    /* INDICATE BAD RETURN CODE FROM
*                                      FORMATTER                     */
         LA    RCREG,4                                             0384
*     END;                          /* END FORMAT ROUTINE ERROR      */
*   ELSE                                                           0386
*     ;                             /* FORMATTED LINE IS IN BUFFER   */
@RF00379 DS    0H                                                  0387
*   RCCODE=RCREG;                   /* SAVE RETURN CODE FROM FORMAT
*                                      SERVICE ROUTINE               */
         ST    RCREG,RCCODE                                        0387
*   CALL PRINT;                     /* PRINT THE ERROR MSG OR      0388
*                                      FORMATTED LINE                */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0388
         BALR  @14,@15                                             0388
*   RETURN CODE(RCCODE);                                           0389
         L     @15,RCCODE                                          0389
@EL00007 DS    0H                                                  0389
@EF00007 DS    0H                                                  0389
@ER00007 L     @14,@SA00007                                        0389
         BR    @14                                                 0389
*   END FMTRTN;                                                    0390
*ANALYZE:                                                          0391
*   PROC OPTIONS(SAVE(14));                                        0391
*                                                                  0391
ANALYZE  ST    @14,@SA00008                                        0391
*/****************************************************************** */
*/* FUNCTION                                                       0392
*     ROUTINE TO ANALYZE THE BITS IN THE BYTE PASSED AND PRINT OUT 0392
*     THE MESSAGE THAT CORRESPONDS TO THE BITS THAT ARE ON. IF A BLANK
*     LINE IS PASSED IN THE MESSAGE ARRAY (INDICATING A RESERVED BIT)
*     NO OUTPUT WILL CORRESPOND TO THAT BIT.                       0392
*                                                                  0392
*   INPUT-                                                         0392
*     AN ARRAY (SUMMARY) POINTED TO BY THE PARMLIST FIELD          0392
*     ADPLCOM2 WHICH CONTAINS THE ADDRESS OF THE BYTE TO BE        0392
*     ANALYZED, THE ADDRESS OF THE ARRAY OF CORRESPONDING          0392
*     MESSAGES, THE COLUMN NUMBER THE MESSAGE IS TO BEGIN IN,      0392
*     AND THE LENGTH OF THE MESSAGE ARRAY PASSED.                  0392
*                                                                  0392
*   NOTE- COLNUM + MSGLNGTH MUST BE LESS THAN OR EQUAL TO 120 BYTES
*         WHICH IS THE OUTPUT BUFFER LENGTH.                       0392
*                                                                  0392
*                                                                  0392
*   CALLS-                                                         0392
*       CALLS PRINT                                                0392
*                                                                  0392
*   CALLED BY -                                                    0392
*       BYTEMODE,EEDBITS,IEAFTESA,IEAFTSCB,RT2BITS                 0392
*                                                                  0392
*   RETURNS CONTROL TO -                                           0392
*       CALLER WITHOUT SETTING A RETURN CODE                       0392
*                                                                  0392
*   THIS PROCEDURE HAS BEEN INCLUDED FROM SYSLIB(IHAFTCDE)-------  0392
*                                                                    */
*/****************************************************************** */
*                                                                  0392
*   DO INDEX=1 TO BYTELNTH;         /* LOOP TO FIND WHICH BITS ARE ON*/
         LA    INDEX,1                                             0392
@DL00392 DS    0H                                                  0393
*     LNGTHEQU=((INDEX-1)*(MSGLNGTH)+1);/* OFFSET INTO MSGARY OF   0393
*                                      CORRESPONDING MESSAGE         */
         L     @14,MSGLNGTH                                        0393
         LR    @03,INDEX                                           0393
         BCTR  @03,0                                               0393
         MR    @02,@14                                             0393
         AH    @03,@CH00041                                        0393
         LR    LNGTHEQU,@03                                        0393
*     IF(BITSTR&TESTBITS(INDEX))^=ZEROBYTE&/* FOUND A BIT ON         */
*         MSGARY(LNGTHEQU:MSGLNGTH+LNGTHEQU-1)^=BLANKS(1:MSGLNGTH) THEN
         L     @04,BYTEADDR                                        0394
         SLR   @03,@03                                             0394
         IC    @03,BITSTR(,@04)                                    0394
         SLR   @04,@04                                             0394
         IC    @04,TESTBITS-1(INDEX)                               0394
         NR    @03,@04                                             0394
         SLR   @04,@04                                             0394
         IC    @04,ZEROBYTE                                        0394
         CR    @03,@04                                             0394
         BE    @RF00394                                            0394
         L     @04,MSGADDR                                         0394
         LR    @03,@14                                             0394
         BCTR  @03,0                                               0394
         LR    @02,@04                                             0394
         ALR   @02,LNGTHEQU                                        0394
         BCTR  @02,0                                               0394
         EX    @03,@SC01416                                        0394
         BE    @RF00394                                            0394
*       DO;                         /* CORRESPONDING MESSAGE WAS NOT
*                                      BLANK(RESERVED)               */
*         BUFFER(COLNUM:(MSGLNGTH+COLNUM-1))=MSGARY(LNGTHEQU:LNGTHEQU+
*             MSGLNGTH-1);          /* PLACE MSG IN BUFFER           */
         L     @03,COLNUM                                          0396
         L     @02,ADPLBUF(,ABDPLPTR)                              0396
         ALR   @02,@03                                             0396
         BCTR  @02,0                                               0396
         ALR   @14,@03                                             0396
         SLR   @14,@03                                             0396
         BCTR  @14,0                                               0396
         ALR   @04,LNGTHEQU                                        0396
         BCTR  @04,0                                               0396
         EX    @14,@SM01418                                        0396
*         CALL PRINT;               /* PRINT IT                      */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0397
         BALR  @14,@15                                             0397
*       END;                        /* END FOUND THE MESSAGE         */
*     ELSE                                                         0399
*       ;                           /* EITHER BIT NOT ON OR RESERVED
*                                      BIT-NO MESSAGE                */
@RF00394 DS    0H                                                  0400
*   END;                            /* END SEARCH LOOP               */
         AH    INDEX,@CH00041                                      0400
         CH    INDEX,@CH00075                                      0400
         BNH   @DL00392                                            0400
*   END ANALYZE;                                                   0401
@EL00008 DS    0H                                                  0401
@EF00008 DS    0H                                                  0401
@ER00008 L     @14,@SA00008                                        0401
         BR    @14                                                 0401
*ACCESRTN:                                                         0402
*   PROC OPTIONS(SAVE(14));                                        0402
*                                                                  0402
ACCESRTN ST    @14,@SA00009                                        0402
*/********************************************************************/
*/* FUNCTION-                                                      0403
*       ROUTINE WHICH CALLS THE ACCESS SERVICE ROUTINE AND MOVES THE
*     VALUE RETURNED IN R0 INTO DATAPTR.                           0403
*                                                                  0403
*                                                                  0403
*   INPUT -                                                        0403
*         VADR(REGISTER 0) CONTAINS THE VIRTUAL ADDRESS OF THE FIELD
*         TO BE ACCESSED.                                          0403
*                                                                  0403
*    CALLS-                                                        0403
*         ACCESS SERVICE ROUTINE PASSED IN PARMLIST                0403
*                                                                  0403
*    CALLED BY -                                                   0403
*         EEDBITS, IEAFTEED, IEAFTFRR, IEAFTRTC, IEAFTRT2,         0403
*         IEAFTSCB, RT1BITS, AND RT2BITS                           0403
*                                                                  0403
*    RETURNS TO -                                                  0403
*         CALLER WITH THE RETURN CODE SET BY THE ACCESS            0403
*         SERVICE ROUTINE.                                         0403
*                                                                  0403
*   THIS PROCEDURE HAS BEEN INCLUDED FROM SYSLIB(IHAFTCDE) ------  0403
*                                                                    */
*/********************************************************************/
*                                                                  0403
*   IF ADPLSNPR=OFF THEN            /* SNAP WAS INVOKER              */
         TM    ADPLSNPR(ABDPLPTR),B'10000000'                      0403
         BNZ   @RF00403                                            0403
*     DO;                                                          0404
*       RTYADR=ADDR(RETRY);         /* RETRY ADDR FOR ESTAE IN THE 0405
*                                      CASE OF EXPECTED ERRORS       */
         LA    @14,RETRY                                           0405
         ST    @14,RTYADR(,ESTAPTR)                                0405
*       DATAPTR=VADR;               /* USED TO BASE THE STORAGE ON   */
         LR    DATAPTR,VADR                                        0406
*       RCREG=ZERO;                 /* SUCCESS UNLESS AN ABEND OCCURS
*                                      DURING THE MOVE INTO A BUFFER */
         SLR   RCREG,RCREG                                         0407
*       ERREXP=ON;                  /* AN ERROR IS EXPECTED          */
         OI    ERREXP(ESTAPTR),B'10000000'                         0408
*       VERIFY=DATADWRD;            /* MOVE A DOUBLE WORD INTO     0409
*                                      INTERNAL BUFFER               */
*                                                                  0409
         MVC   VERIFY(8),DATADWRD(DATAPTR)                         0409
*       /*************************************************************/
*       /*                                                           */
*       /* THIS MOVE WILL CAUSE AN ABEND IF THE DUMP DOES NOT CONTAIN*/
*       /* THE AREA REFERENCED OR IF THE AREA IS PROTECTED. IF AN    */
*       /* ABEND OCCURS, THE ESTAE WILL GET CONTROL AND RETRY AT THE */
*       /* POINT WHICH SETS A BAD RETURN CODE AND RETURNS TO THE     */
*       /* CALLER. THIS THEN SIMULATES THE PRINT DUMP ACCESS ROUTINE.*/
*       /* IF THE AREA ASKED FOR IS IN THE DUMP, A DOUBLE WORD IS    */
*       /* MOVED INTO AN INTERNAL BUFFER TO PREVENT AN UNEXPECTED    */
*       /* ERROR WHEN REFERENCING THE AREA AGAIN                     */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0410
*       ERREXP=OFF;                 /* AN ERROR IS NO LONGER EXPECTED*/
         NI    ERREXP(ESTAPTR),B'01111111'                         0410
*       DATAPTR=ADDR(VERIFY);       /* REBASE DATA OFF INTERNAL    0411
*                                      BUFFER                        */
         LA    DATAPTR,VERIFY                                      0411
*     END;                          /* END SNAP WAS THE INVOKER      */
*   ELSE                            /* CALLER HAS OWN ACCESS ROUTINE
*                                      LIKE PRINT DUMP               */
*     DO;                                                          0413
         B     @RC00403                                            0413
@RF00403 DS    0H                                                  0414
*       CALL ACCESS;                /* ACCESS SERVICE ROUTINE PASSED
*                                      BY CALLER                     */
         L     @15,ADPLMEMA(,ABDPLPTR)                             0414
         BALR  @14,@15                                             0414
*       IF RCREG=ZERO THEN                                         0415
         LTR   RCREG,RCREG                                         0415
         BNZ   @RF00415                                            0415
*         DATAPTR=VADR;             /* SAVE PTR RETURNED BY ACCESS 0416
*                                      SERVICE ROUTINE               */
         LR    DATAPTR,VADR                                        0416
*       ELSE                        /* BAD RETURN CODE               */
*RETRY:                             /* RETRY ADDR FOR THE ESTAE      */
*         RCREG=4;                  /* SET A BAD RETURN CODE         */
         B     @RC00415                                            0417
@RF00415 DS    0H                                                  0417
RETRY    LA    RCREG,4                                             0417
*     END;                          /* END CALLER WAS NOT SNAP       */
@RC00415 DS    0H                                                  0419
*   RCCODE=RCREG;                   /* SAVE RETURN CODE FROM ACCESS
*                                      SERVICE RTN                   */
@RC00403 ST    RCREG,RCCODE                                        0419
*   RETURN CODE(RCCODE);                                           0420
         L     @08,RCCODE                                          0420
         LR    @15,@08                                             0420
@EL00009 DS    0H                                                  0420
@EF00009 DS    0H                                                  0420
@ER00009 L     @14,@SA00009                                        0420
         BR    @14                                                 0420
*   END ACCESRTN;                                                  0421
*   DCL                                                            0422
*     EEDPATCH CHAR(200) INIT(                                     0422
*         'PATCH AREA FOR IEAFTEED - IT IS 200 BYTES LONG');       0422
*   END IEAFTEED                                                   0423
*                                                                  0423
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IHAABDPL)                                       */
*/*%INCLUDE SYSLIB  (IHART1W )                                       */
*/*%INCLUDE SYSLIB  (IHAFTCD1)                                       */
*/*%INCLUDE SYSLIB  (IHAFTCDE)                                       */
*                                                                  0423
*       ;                                                          0423
@DATA    DS    0H
@CH00041 DC    H'1'
@CH00084 DC    H'3'
@CH00112 DC    H'4'
@CH00047 DC    H'5'
@CH00065 DC    H'6'
@CH00184 DC    H'9'
@CH00198 DC    H'16'
@CH00381 DC    H'50'
@CH01168 DC    H'256'
@CH01388 DC    H'4096'
@SC01416 CLC   MSGARY(0,@02),BLANKS
@SM01418 MVC   BUFFER(0,@02),MSGARY(@04)
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@SA00009 DS    1F
@SA00007 DS    1F
@SA00002 DS    1F
@SA00003 DS    1F
@SA00004 DS    1F
@SA00005 DS    1F
@SA00008 DS    1F
IEAFTEED CSECT
         DS    0F
@CF00075 DC    F'8'
@CH00075 EQU   @CF00075+2
@CF01360 DC    F'22'
@CF01296 DC    F'25'
@CF01227 DC    F'27'
@CF01246 DC    F'43'
@DATD    DSECT
         DS    0D
FRRSRTMW DS    A
CVTBTERM DS    A
RCCODE   DS    F
SAVEPTR  DS    A
IDSAVE   DS    FL1
CONVERTD DS    CL6
         ORG   CONVERTD
PLUS     DS    CL1
DIGIT    DS    CL5
         ORG   CONVERTD+6
ERRSW    DS    BL1
HDRBIT   DS    BL1
         DS    CL3
SUMMARY  DS    CL16
         ORG   SUMMARY
BYTEADDR DS    AL4
MSGADDR  DS    AL4
COLNUM   DS    FL4
MSGLNGTH DS    FL4
         ORG   SUMMARY+16
         DS    CL4
UNPACK   DS    CL5
         ORG   UNPACK
PACKAREA DS    CL4
GARBAGE  DS    CL1
         ORG   UNPACK+5
         DS    CL3
VERIFY   DS    CL8
NEGBIT   DS    BL1
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IEAFTEED CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
DUMPTYPE DC    XL1'02'
ERRTYP   DC    XL1'04'
MACHINE  DC    XL1'03'
REGSTYPE DC    XL1'01'
ZEROBYTE DC    XL1'00'
EED1L1   DS    CL21
         ORG   EED1L1
@NM00013 DC    CL8'EEDFWRDP'
@NM00014 DC    CL5'EEDID'
@NM00015 DC    CL8'EEDERROR'
         ORG   EED1L1+21
         DS    CL2
EED1FMT1 DS    CL24
         ORG   EED1FMT1
@NM00016 DS    CL4
         ORG   @NM00016
@NM00017 DC    X'01'
@NM00018 DC    X'40'
@NM00019 DC    AL1(0)
@NM00020 DC    AL1(0)
         ORG   EED1FMT1+4
@NM00021 DS    CL8
         ORG   @NM00021
@NM00022 DC    X'07'
@NM00023 DC    X'73'
@NM00024 DC    AL1(8)
@NM00025 DC    AL1(23)
@NM00026 DC    AL4(EED1L1)
         ORG   EED1FMT1+12
@NM00027 DS    CL4
         ORG   @NM00027
@NM00028 DC    X'05'
@NM00029 DC    X'43'
@NM00030 DC    AL1(32)
@NM00031 DC    AL1(41)
         ORG   EED1FMT1+16
@NM00032 DS    CL4
         ORG   @NM00032
@NM00033 DC    X'05'
@NM00034 DC    X'73'
@NM00035 DC    AL1(50)
@NM00036 DC    AL1(59)
         ORG   EED1FMT1+20
@NM00037 DS    CL4
         ORG   @NM00037
@NM00038 DC    F'0'
         ORG   EED1FMT1+24
EED1L2   DS    CL14
         ORG   EED1L2
@NM00039 DC    CL14'REGISTERS(0-7)'
         ORG   EED1L2+14
         DS    CL2
EED1FMT2 DS    CL44
         ORG   EED1FMT2
@NM00040 DS    CL4
         ORG   @NM00040
@NM00041 DC    X'01'
@NM00042 DC    X'40'
@NM00043 DC    AL1(0)
@NM00044 DC    AL1(0)
         ORG   EED1FMT2+4
@NM00045 DS    CL8
         ORG   @NM00045
@NM00046 DC    X'07'
@NM00047 DC    X'D3'
@NM00048 DC    AL1(8)
@NM00049 DC    AL1(23)
@NM00050 DC    AL4(EED1L2)
         ORG   EED1FMT2+12
@NM00051 DS    CL4
         ORG   @NM00051
@NM00052 DC    X'04'
@NM00053 DC    X'03'
@NM00054 DC    AL1(0)
@NM00055 DC    AL1(32)
         ORG   EED1FMT2+16
@NM00056 DS    CL4
         ORG   @NM00056
@NM00057 DC    X'04'
@NM00058 DC    X'03'
@NM00059 DC    AL1(0)
@NM00060 DC    AL1(41)
         ORG   EED1FMT2+20
@NM00061 DS    CL4
         ORG   @NM00061
@NM00062 DC    X'04'
@NM00063 DC    X'03'
@NM00064 DC    AL1(0)
@NM00065 DC    AL1(50)
         ORG   EED1FMT2+24
@NM00066 DS    CL4
         ORG   @NM00066
@NM00067 DC    X'04'
@NM00068 DC    X'03'
@NM00069 DC    AL1(0)
@NM00070 DC    AL1(59)
         ORG   EED1FMT2+28
@NM00071 DS    CL4
         ORG   @NM00071
@NM00072 DC    X'04'
@NM00073 DC    X'03'
@NM00074 DC    AL1(0)
@NM00075 DC    AL1(68)
         ORG   EED1FMT2+32
@NM00076 DS    CL4
         ORG   @NM00076
@NM00077 DC    X'04'
@NM00078 DC    X'03'
@NM00079 DC    AL1(0)
@NM00080 DC    AL1(77)
         ORG   EED1FMT2+36
@NM00081 DS    CL4
         ORG   @NM00081
@NM00082 DC    X'04'
@NM00083 DC    X'03'
@NM00084 DC    AL1(0)
@NM00085 DC    AL1(86)
         ORG   EED1FMT2+40
@NM00086 DS    CL4
         ORG   @NM00086
@NM00087 DC    F'0'
         ORG   EED1FMT2+44
EED1L3   DS    CL14
         ORG   EED1L3
@NM00088 DC    CL14'REGISTERS(8-F)'
         ORG   EED1L3+14
         DS    CL2
EED1FMT3 DS    CL44
         ORG   EED1FMT3
@NM00089 DS    CL4
         ORG   @NM00089
@NM00090 DC    X'01'
@NM00091 DC    X'40'
@NM00092 DC    AL1(0)
@NM00093 DC    AL1(0)
         ORG   EED1FMT3+4
@NM00094 DS    CL8
         ORG   @NM00094
@NM00095 DC    X'07'
@NM00096 DC    X'D3'
@NM00097 DC    AL1(8)
@NM00098 DC    AL1(23)
@NM00099 DC    AL4(EED1L3)
         ORG   EED1FMT3+12
@NM00100 DS    CL4
         ORG   @NM00100
@NM00101 DC    X'04'
@NM00102 DC    X'03'
@NM00103 DC    AL1(0)
@NM00104 DC    AL1(32)
         ORG   EED1FMT3+16
@NM00105 DS    CL4
         ORG   @NM00105
@NM00106 DC    X'04'
@NM00107 DC    X'03'
@NM00108 DC    AL1(0)
@NM00109 DC    AL1(41)
         ORG   EED1FMT3+20
@NM00110 DS    CL4
         ORG   @NM00110
@NM00111 DC    X'04'
@NM00112 DC    X'03'
@NM00113 DC    AL1(0)
@NM00114 DC    AL1(50)
         ORG   EED1FMT3+24
@NM00115 DS    CL4
         ORG   @NM00115
@NM00116 DC    X'04'
@NM00117 DC    X'03'
@NM00118 DC    AL1(0)
@NM00119 DC    AL1(59)
         ORG   EED1FMT3+28
@NM00120 DS    CL4
         ORG   @NM00120
@NM00121 DC    X'04'
@NM00122 DC    X'03'
@NM00123 DC    AL1(0)
@NM00124 DC    AL1(68)
         ORG   EED1FMT3+32
@NM00125 DS    CL4
         ORG   @NM00125
@NM00126 DC    X'04'
@NM00127 DC    X'03'
@NM00128 DC    AL1(0)
@NM00129 DC    AL1(77)
         ORG   EED1FMT3+36
@NM00130 DS    CL4
         ORG   @NM00130
@NM00131 DC    X'04'
@NM00132 DC    X'03'
@NM00133 DC    AL1(0)
@NM00134 DC    AL1(86)
         ORG   EED1FMT3+40
@NM00135 DS    CL4
         ORG   @NM00135
@NM00136 DC    F'0'
         ORG   EED1FMT3+44
EED1L4   DS    CL5
         ORG   EED1L4
@NM00137 DC    CL5'ECPSW'
         ORG   EED1L4+5
         DS    CL3
EED1FMT4 DS    CL28
         ORG   EED1FMT4
@NM00138 DS    CL4
         ORG   @NM00138
@NM00139 DC    X'01'
@NM00140 DC    X'40'
@NM00141 DC    AL1(0)
@NM00142 DC    AL1(0)
         ORG   EED1FMT4+4
@NM00143 DS    CL8
         ORG   @NM00143
@NM00144 DC    X'07'
@NM00145 DC    X'43'
@NM00146 DC    AL1(8)
@NM00147 DC    AL1(23)
@NM00148 DC    AL4(EED1L4)
         ORG   EED1FMT4+12
@NM00149 DS    CL4
         ORG   @NM00149
@NM00150 DC    X'04'
@NM00151 DC    X'03'
@NM00152 DC    AL1(0)
@NM00153 DC    AL1(32)
         ORG   EED1FMT4+16
@NM00154 DS    CL4
         ORG   @NM00154
@NM00155 DC    X'04'
@NM00156 DC    X'03'
@NM00157 DC    AL1(0)
@NM00158 DC    AL1(41)
         ORG   EED1FMT4+20
@NM00159 DS    CL4
         ORG   @NM00159
@NM00160 DC    X'04'
@NM00161 DC    X'03'
@NM00162 DC    AL1(0)
@NM00163 DC    AL1(50)
         ORG   EED1FMT4+24
@NM00164 DS    CL4
         ORG   @NM00164
@NM00165 DC    F'0'
         ORG   EED1FMT4+28
EED2L1   DS    CL21
         ORG   EED2L1
@NM00166 DC    CL8'EEDFWRDP'
@NM00167 DC    CL5'EEDID'
@NM00168 DC    CL8'EEDERROR'
         ORG   EED2L1+21
         DS    CL3
EED2FMT1 DS    CL24
         ORG   EED2FMT1
@NM00169 DS    CL4
         ORG   @NM00169
@NM00170 DC    X'01'
@NM00171 DC    X'40'
@NM00172 DC    AL1(0)
@NM00173 DC    AL1(0)
         ORG   EED2FMT1+4
@NM00174 DS    CL8
         ORG   @NM00174
@NM00175 DC    X'07'
@NM00176 DC    X'73'
@NM00177 DC    AL1(8)
@NM00178 DC    AL1(17)
@NM00179 DC    AL4(EED2L1)
         ORG   EED2FMT1+12
@NM00180 DS    CL4
         ORG   @NM00180
@NM00181 DC    X'05'
@NM00182 DC    X'43'
@NM00183 DC    AL1(26)
@NM00184 DC    AL1(32)
         ORG   EED2FMT1+16
@NM00185 DS    CL4
         ORG   @NM00185
@NM00186 DC    X'05'
@NM00187 DC    X'73'
@NM00188 DC    AL1(41)
@NM00189 DC    AL1(50)
         ORG   EED2FMT1+20
@NM00190 DS    CL4
         ORG   @NM00190
@NM00191 DC    F'0'
         ORG   EED2FMT1+24
EED2L2   DS    CL10
         ORG   EED2L2
@NM00192 DC    CL5'SDUMP'
@NM00193 DC    CL5'SPDAT'
         ORG   EED2L2+10
         DS    CL2
EED2FMT2 DS    CL20
         ORG   EED2FMT2
@NM00194 DS    CL4
         ORG   @NM00194
@NM00195 DC    X'01'
@NM00196 DC    X'40'
@NM00197 DC    AL1(0)
@NM00198 DC    AL1(0)
         ORG   EED2FMT2+4
@NM00199 DS    CL8
         ORG   @NM00199
@NM00200 DC    X'07'
@NM00201 DC    X'43'
@NM00202 DC    AL1(8)
@NM00203 DC    AL1(17)
@NM00204 DC    AL4(EED2L2)
         ORG   EED2FMT2+12
@NM00205 DS    CL4
         ORG   @NM00205
@NM00206 DC    X'05'
@NM00207 DC    X'43'
@NM00208 DC    AL1(26)
@NM00209 DC    AL1(32)
         ORG   EED2FMT2+16
@NM00210 DS    CL4
         ORG   @NM00210
@NM00211 DC    F'0'
         ORG   EED2FMT2+20
EED2L3   DS    CL12
         ORG   EED2L3
@NM00212 DC    CL7'STORAGE'
@NM00213 DC    CL5'LISTS'
         ORG   EED2L3+12
EED2FMT3 DS    CL20
         ORG   EED2FMT3
@NM00214 DS    CL4
         ORG   @NM00214
@NM00215 DC    X'01'
@NM00216 DC    X'40'
@NM00217 DC    AL1(0)
@NM00218 DC    AL1(0)
         ORG   EED2FMT3+4
@NM00219 DS    CL8
         ORG   @NM00219
@NM00220 DC    X'07'
@NM00221 DC    X'63'
@NM00222 DC    AL1(8)
@NM00223 DC    AL1(32)
@NM00224 DC    AL4(EED2L3)
         ORG   EED2FMT3+12
@NM00225 DS    CL4
         ORG   @NM00225
@NM00226 DC    X'05'
@NM00227 DC    X'43'
@NM00228 DC    AL1(16)
@NM00229 DC    AL1(41)
         ORG   EED2FMT3+16
@NM00230 DS    CL4
         ORG   @NM00230
@NM00231 DC    F'0'
         ORG   EED2FMT3+20
EED2FMT4 DS    CL16
         ORG   EED2FMT4
@NM00232 DS    CL4
         ORG   @NM00232
@NM00233 DC    X'01'
@NM00234 DC    X'40'
@NM00235 DC    AL1(0)
@NM00236 DC    AL1(0)
         ORG   EED2FMT4+4
@NM00237 DS    CL4
         ORG   @NM00237
@NM00238 DC    X'04'
@NM00239 DC    X'03'
@NM00240 DC    AL1(0)
@NM00241 DC    AL1(32)
         ORG   EED2FMT4+8
@NM00242 DS    CL4
         ORG   @NM00242
@NM00243 DC    X'04'
@NM00244 DC    X'03'
@NM00245 DC    AL1(0)
@NM00246 DC    AL1(41)
         ORG   EED2FMT4+12
@NM00247 DS    CL4
         ORG   @NM00247
@NM00248 DC    F'0'
         ORG   EED2FMT4+16
EED2L5   DS    CL8
         ORG   EED2L5
@NM00249 DC    CL8'RESERVED'
         ORG   EED2L5+8
EED2FMT5 DS    CL28
         ORG   EED2FMT5
@NM00250 DS    CL4
         ORG   @NM00250
@NM00251 DC    X'01'
@NM00252 DC    X'40'
@NM00253 DC    AL1(0)
@NM00254 DC    AL1(0)
         ORG   EED2FMT5+4
@NM00255 DS    CL8
         ORG   @NM00255
@NM00256 DC    X'07'
@NM00257 DC    X'73'
@NM00258 DC    AL1(8)
@NM00259 DC    AL1(23)
@NM00260 DC    AL4(EED2L5)
         ORG   EED2FMT5+12
@NM00261 DS    CL4
         ORG   @NM00261
@NM00262 DC    X'04'
@NM00263 DC    X'03'
@NM00264 DC    AL1(0)
@NM00265 DC    AL1(32)
         ORG   EED2FMT5+16
@NM00266 DS    CL4
         ORG   @NM00266
@NM00267 DC    X'04'
@NM00268 DC    X'03'
@NM00269 DC    AL1(0)
@NM00270 DC    AL1(41)
         ORG   EED2FMT5+20
@NM00271 DS    CL4
         ORG   @NM00271
@NM00272 DC    X'04'
@NM00273 DC    X'03'
@NM00274 DC    AL1(0)
@NM00275 DC    AL1(50)
         ORG   EED2FMT5+24
@NM00276 DS    CL4
         ORG   @NM00276
@NM00277 DC    F'0'
         ORG   EED2FMT5+28
EED2FMT6 DS    CL24
         ORG   EED2FMT6
@NM00278 DS    CL4
         ORG   @NM00278
@NM00279 DC    X'01'
@NM00280 DC    X'40'
@NM00281 DC    AL1(0)
@NM00282 DC    AL1(0)
         ORG   EED2FMT6+4
@NM00283 DS    CL4
         ORG   @NM00283
@NM00284 DC    X'04'
@NM00285 DC    X'03'
@NM00286 DC    AL1(0)
@NM00287 DC    AL1(23)
         ORG   EED2FMT6+8
@NM00288 DS    CL4
         ORG   @NM00288
@NM00289 DC    X'04'
@NM00290 DC    X'03'
@NM00291 DC    AL1(0)
@NM00292 DC    AL1(32)
         ORG   EED2FMT6+12
@NM00293 DS    CL4
         ORG   @NM00293
@NM00294 DC    X'04'
@NM00295 DC    X'03'
@NM00296 DC    AL1(0)
@NM00297 DC    AL1(41)
         ORG   EED2FMT6+16
@NM00298 DS    CL4
         ORG   @NM00298
@NM00299 DC    X'04'
@NM00300 DC    X'01'
@NM00301 DC    AL1(0)
@NM00302 DC    AL1(50)
         ORG   EED2FMT6+20
@NM00303 DS    CL4
         ORG   @NM00303
@NM00304 DC    F'0'
         ORG   EED2FMT6+24
EED2L7   DS    CL18
         ORG   EED2L7
@NM00305 DC    CL6'SEQNUM'
@NM00306 DC    CL4'CPUI'
@NM00307 DC    CL4'ASID'
@NM00308 DC    CL4'TIME'
         ORG   EED2L7+18
         DS    CL2
EED2FMT7 DS    CL28
         ORG   EED2FMT7
@NM00309 DS    CL4
         ORG   @NM00309
@NM00310 DC    X'01'
@NM00311 DC    X'40'
@NM00312 DC    AL1(0)
@NM00313 DC    AL1(0)
         ORG   EED2FMT7+4
@NM00314 DS    CL8
         ORG   @NM00314
@NM00315 DC    X'07'
@NM00316 DC    X'51'
@NM00317 DC    AL1(8)
@NM00318 DC    AL1(17)
@NM00319 DC    AL4(EED2L7)
         ORG   EED2FMT7+12
@NM00320 DS    CL4
         ORG   @NM00320
@NM00321 DC    X'05'
@NM00322 DC    X'31'
@NM00323 DC    AL1(23)
@NM00324 DC    AL1(32)
         ORG   EED2FMT7+16
@NM00325 DS    CL4
         ORG   @NM00325
@NM00326 DC    X'05'
@NM00327 DC    X'31'
@NM00328 DC    AL1(41)
@NM00329 DC    AL1(50)
         ORG   EED2FMT7+20
@NM00330 DS    CL4
         ORG   @NM00330
@NM00331 DC    X'05'
@NM00332 DC    X'33'
@NM00333 DC    AL1(59)
@NM00334 DC    AL1(64)
         ORG   EED2FMT7+24
@NM00335 DS    CL4
         ORG   @NM00335
@NM00336 DC    F'0'
         ORG   EED2FMT7+28
EED3L1   DS    CL18
         ORG   EED3L1
@NM00337 DC    CL8'EEDFWRDP'
@NM00338 DC    CL5'EEDID'
@NM00339 DC    CL5'ERROR'
         ORG   EED3L1+18
         DS    CL2
EED3FMT1 DS    CL24
         ORG   EED3FMT1
@NM00340 DS    CL4
         ORG   @NM00340
@NM00341 DC    X'01'
@NM00342 DC    X'40'
@NM00343 DC    AL1(0)
@NM00344 DC    AL1(0)
         ORG   EED3FMT1+4
@NM00345 DS    CL8
         ORG   @NM00345
@NM00346 DC    X'07'
@NM00347 DC    X'73'
@NM00348 DC    AL1(8)
@NM00349 DC    AL1(17)
@NM00350 DC    AL4(EED3L1)
         ORG   EED3FMT1+12
@NM00351 DS    CL4
         ORG   @NM00351
@NM00352 DC    X'05'
@NM00353 DC    X'43'
@NM00354 DC    AL1(26)
@NM00355 DC    AL1(35)
         ORG   EED3FMT1+16
@NM00356 DS    CL4
         ORG   @NM00356
@NM00357 DC    X'05'
@NM00358 DC    X'43'
@NM00359 DC    AL1(44)
@NM00360 DC    AL1(53)
         ORG   EED3FMT1+20
@NM00361 DS    CL4
         ORG   @NM00361
@NM00362 DC    F'0'
         ORG   EED3FMT1+24
EED3L2   DS    CL27
         ORG   EED3L2
@NM00363 DC    CL7'STORCKB'
@NM00364 DC    CL7'STORCKE'
@NM00365 DC    CL5'FLAGS'
@NM00366 DC    CL8'RECONFIG'
         ORG   EED3L2+27
         DS    CL1
EED3FMT2 DS    CL28
         ORG   EED3FMT2
@NM00367 DS    CL4
         ORG   @NM00367
@NM00368 DC    X'01'
@NM00369 DC    X'40'
@NM00370 DC    AL1(0)
@NM00371 DC    AL1(0)
         ORG   EED3FMT2+4
@NM00372 DS    CL8
         ORG   @NM00372
@NM00373 DC    X'07'
@NM00374 DC    X'63'
@NM00375 DC    AL1(8)
@NM00376 DC    AL1(17)
@NM00377 DC    AL4(EED3L2)
         ORG   EED3FMT2+12
@NM00378 DS    CL4
         ORG   @NM00378
@NM00379 DC    X'05'
@NM00380 DC    X'63'
@NM00381 DC    AL1(26)
@NM00382 DC    AL1(35)
         ORG   EED3FMT2+16
@NM00383 DS    CL4
         ORG   @NM00383
@NM00384 DC    X'05'
@NM00385 DC    X'43'
@NM00386 DC    AL1(44)
@NM00387 DC    AL1(53)
         ORG   EED3FMT2+20
@NM00388 DS    CL4
         ORG   @NM00388
@NM00389 DC    X'05'
@NM00390 DC    X'73'
@NM00391 DC    AL1(62)
@NM00392 DC    AL1(71)
         ORG   EED3FMT2+24
@NM00393 DS    CL4
         ORG   @NM00393
@NM00394 DC    F'0'
         ORG   EED3FMT2+28
EED3L3   DS    CL12
         ORG   EED3L3
@NM00395 DC    CL8'REALFAIL'
@NM00396 DC    CL4'TIME'
         ORG   EED3L3+12
EED3FMT3 DS    CL24
         ORG   EED3FMT3
@NM00397 DS    CL4
         ORG   @NM00397
@NM00398 DC    X'01'
@NM00399 DC    X'40'
@NM00400 DC    AL1(0)
@NM00401 DC    AL1(0)
         ORG   EED3FMT3+4
@NM00402 DS    CL8
         ORG   @NM00402
@NM00403 DC    X'07'
@NM00404 DC    X'73'
@NM00405 DC    AL1(8)
@NM00406 DC    AL1(17)
@NM00407 DC    AL4(EED3L3)
         ORG   EED3FMT3+12
@NM00408 DS    CL4
         ORG   @NM00408
@NM00409 DC    X'05'
@NM00410 DC    X'33'
@NM00411 DC    AL1(26)
@NM00412 DC    AL1(35)
         ORG   EED3FMT3+16
@NM00413 DS    CL4
         ORG   @NM00413
@NM00414 DC    X'04'
@NM00415 DC    X'03'
@NM00416 DC    AL1(0)
@NM00417 DC    AL1(44)
         ORG   EED3FMT3+20
@NM00418 DS    CL4
         ORG   @NM00418
@NM00419 DC    F'0'
         ORG   EED3FMT3+24
EED3L4   DS    CL8
         ORG   EED3L4
@NM00420 DC    CL8'RESERVED'
         ORG   EED3L4+8
EED3FMT4 DS    CL32
         ORG   EED3FMT4
@NM00421 DS    CL4
         ORG   @NM00421
@NM00422 DC    X'01'
@NM00423 DC    X'40'
@NM00424 DC    AL1(0)
@NM00425 DC    AL1(0)
         ORG   EED3FMT4+4
@NM00426 DS    CL8
         ORG   @NM00426
@NM00427 DC    X'07'
@NM00428 DC    X'73'
@NM00429 DC    AL1(8)
@NM00430 DC    AL1(17)
@NM00431 DC    AL4(EED3L4)
         ORG   EED3FMT4+12
@NM00432 DS    CL4
         ORG   @NM00432
@NM00433 DC    X'04'
@NM00434 DC    X'03'
@NM00435 DC    AL1(0)
@NM00436 DC    AL1(26)
         ORG   EED3FMT4+16
@NM00437 DS    CL4
         ORG   @NM00437
@NM00438 DC    X'04'
@NM00439 DC    X'03'
@NM00440 DC    AL1(0)
@NM00441 DC    AL1(35)
         ORG   EED3FMT4+20
@NM00442 DS    CL4
         ORG   @NM00442
@NM00443 DC    X'04'
@NM00444 DC    X'03'
@NM00445 DC    AL1(0)
@NM00446 DC    AL1(44)
         ORG   EED3FMT4+24
@NM00447 DS    CL4
         ORG   @NM00447
@NM00448 DC    X'04'
@NM00449 DC    X'03'
@NM00450 DC    AL1(0)
@NM00451 DC    AL1(53)
         ORG   EED3FMT4+28
@NM00452 DS    CL4
         ORG   @NM00452
@NM00453 DC    F'0'
         ORG   EED3FMT4+32
EED3FMT5 DS    CL32
         ORG   EED3FMT5
@NM00454 DS    CL4
         ORG   @NM00454
@NM00455 DC    X'01'
@NM00456 DC    X'40'
@NM00457 DC    AL1(0)
@NM00458 DC    AL1(0)
         ORG   EED3FMT5+4
@NM00459 DS    CL4
         ORG   @NM00459
@NM00460 DC    X'04'
@NM00461 DC    X'03'
@NM00462 DC    AL1(0)
@NM00463 DC    AL1(17)
         ORG   EED3FMT5+8
@NM00464 DS    CL4
         ORG   @NM00464
@NM00465 DC    X'04'
@NM00466 DC    X'03'
@NM00467 DC    AL1(0)
@NM00468 DC    AL1(26)
         ORG   EED3FMT5+12
@NM00469 DS    CL4
         ORG   @NM00469
@NM00470 DC    X'04'
@NM00471 DC    X'03'
@NM00472 DC    AL1(0)
@NM00473 DC    AL1(35)
         ORG   EED3FMT5+16
@NM00474 DS    CL4
         ORG   @NM00474
@NM00475 DC    X'04'
@NM00476 DC    X'03'
@NM00477 DC    AL1(0)
@NM00478 DC    AL1(44)
         ORG   EED3FMT5+20
@NM00479 DS    CL4
         ORG   @NM00479
@NM00480 DC    X'04'
@NM00481 DC    X'03'
@NM00482 DC    AL1(0)
@NM00483 DC    AL1(53)
         ORG   EED3FMT5+24
@NM00484 DS    CL4
         ORG   @NM00484
@NM00485 DC    X'04'
@NM00486 DC    X'01'
@NM00487 DC    AL1(0)
@NM00488 DC    AL1(62)
         ORG   EED3FMT5+28
@NM00489 DS    CL4
         ORG   @NM00489
@NM00490 DC    F'0'
         ORG   EED3FMT5+32
EED3L6   DS    CL18
         ORG   EED3L6
@NM00491 DC    CL6'SEQNUM'
@NM00492 DC    CL4'CPUI'
@NM00493 DC    CL4'ASID'
@NM00494 DC    CL4'TIME'
         ORG   EED3L6+18
         DS    CL2
EED3FMT6 DS    CL28
         ORG   EED3FMT6
@NM00495 DS    CL4
         ORG   @NM00495
@NM00496 DC    X'01'
@NM00497 DC    X'40'
@NM00498 DC    AL1(0)
@NM00499 DC    AL1(0)
         ORG   EED3FMT6+4
@NM00500 DS    CL8
         ORG   @NM00500
@NM00501 DC    X'07'
@NM00502 DC    X'51'
@NM00503 DC    AL1(8)
@NM00504 DC    AL1(17)
@NM00505 DC    AL4(EED3L6)
         ORG   EED3FMT6+12
@NM00506 DS    CL4
         ORG   @NM00506
@NM00507 DC    X'05'
@NM00508 DC    X'31'
@NM00509 DC    AL1(26)
@NM00510 DC    AL1(35)
         ORG   EED3FMT6+16
@NM00511 DS    CL4
         ORG   @NM00511
@NM00512 DC    X'05'
@NM00513 DC    X'31'
@NM00514 DC    AL1(44)
@NM00515 DC    AL1(53)
         ORG   EED3FMT6+20
@NM00516 DS    CL4
         ORG   @NM00516
@NM00517 DC    X'05'
@NM00518 DC    X'33'
@NM00519 DC    AL1(62)
@NM00520 DC    AL1(71)
         ORG   EED3FMT6+24
@NM00521 DS    CL4
         ORG   @NM00521
@NM00522 DC    F'0'
         ORG   EED3FMT6+28
EED4L1   DS    CL18
         ORG   EED4L1
@NM00523 DC    CL8'EEDFWRDP'
@NM00524 DC    CL5'EEDID'
@NM00525 DC    CL5'ERROR'
         ORG   EED4L1+18
         DS    CL2
EED4FMT1 DS    CL24
         ORG   EED4FMT1
@NM00526 DS    CL4
         ORG   @NM00526
@NM00527 DC    X'01'
@NM00528 DC    X'40'
@NM00529 DC    AL1(0)
@NM00530 DC    AL1(0)
         ORG   EED4FMT1+4
@NM00531 DS    CL8
         ORG   @NM00531
@NM00532 DC    X'07'
@NM00533 DC    X'73'
@NM00534 DC    AL1(8)
@NM00535 DC    AL1(17)
@NM00536 DC    AL4(EED4L1)
         ORG   EED4FMT1+12
@NM00537 DS    CL4
         ORG   @NM00537
@NM00538 DC    X'05'
@NM00539 DC    X'43'
@NM00540 DC    AL1(26)
@NM00541 DC    AL1(35)
         ORG   EED4FMT1+16
@NM00542 DS    CL4
         ORG   @NM00542
@NM00543 DC    X'05'
@NM00544 DC    X'43'
@NM00545 DC    AL1(44)
@NM00546 DC    AL1(53)
         ORG   EED4FMT1+20
@NM00547 DS    CL4
         ORG   @NM00547
@NM00548 DC    F'0'
         ORG   EED4FMT1+24
EED4L2   DS    CL8
         ORG   EED4L2
@NM00549 DC    CL8'RESERVED'
         ORG   EED4L2+8
EED4FMT2 DS    CL44
         ORG   EED4FMT2
@NM00550 DS    CL4
         ORG   @NM00550
@NM00551 DC    X'01'
@NM00552 DC    X'40'
@NM00553 DC    AL1(0)
@NM00554 DC    AL1(0)
         ORG   EED4FMT2+4
@NM00555 DS    CL8
         ORG   @NM00555
@NM00556 DC    X'07'
@NM00557 DC    X'73'
@NM00558 DC    AL1(8)
@NM00559 DC    AL1(17)
@NM00560 DC    AL4(EED4L2)
         ORG   EED4FMT2+12
@NM00561 DS    CL4
         ORG   @NM00561
@NM00562 DC    X'04'
@NM00563 DC    X'03'
@NM00564 DC    AL1(0)
@NM00565 DC    AL1(26)
         ORG   EED4FMT2+16
@NM00566 DS    CL4
         ORG   @NM00566
@NM00567 DC    X'04'
@NM00568 DC    X'03'
@NM00569 DC    AL1(0)
@NM00570 DC    AL1(35)
         ORG   EED4FMT2+20
@NM00571 DS    CL4
         ORG   @NM00571
@NM00572 DC    X'04'
@NM00573 DC    X'03'
@NM00574 DC    AL1(0)
@NM00575 DC    AL1(44)
         ORG   EED4FMT2+24
@NM00576 DS    CL4
         ORG   @NM00576
@NM00577 DC    X'04'
@NM00578 DC    X'03'
@NM00579 DC    AL1(0)
@NM00580 DC    AL1(53)
         ORG   EED4FMT2+28
@NM00581 DS    CL4
         ORG   @NM00581
@NM00582 DC    X'04'
@NM00583 DC    X'03'
@NM00584 DC    AL1(0)
@NM00585 DC    AL1(62)
         ORG   EED4FMT2+32
@NM00586 DS    CL4
         ORG   @NM00586
@NM00587 DC    X'04'
@NM00588 DC    X'03'
@NM00589 DC    AL1(0)
@NM00590 DC    AL1(71)
         ORG   EED4FMT2+36
@NM00591 DS    CL4
         ORG   @NM00591
@NM00592 DC    X'04'
@NM00593 DC    X'03'
@NM00594 DC    AL1(0)
@NM00595 DC    AL1(80)
         ORG   EED4FMT2+40
@NM00596 DS    CL4
         ORG   @NM00596
@NM00597 DC    F'0'
         ORG   EED4FMT2+44
EED4FMT3 DS    CL40
         ORG   EED4FMT3
@NM00598 DS    CL4
         ORG   @NM00598
@NM00599 DC    X'01'
@NM00600 DC    X'40'
@NM00601 DC    AL1(0)
@NM00602 DC    AL1(0)
         ORG   EED4FMT3+4
@NM00603 DS    CL4
         ORG   @NM00603
@NM00604 DC    X'04'
@NM00605 DC    X'03'
@NM00606 DC    AL1(0)
@NM00607 DC    AL1(17)
         ORG   EED4FMT3+8
@NM00608 DS    CL4
         ORG   @NM00608
@NM00609 DC    X'04'
@NM00610 DC    X'03'
@NM00611 DC    AL1(0)
@NM00612 DC    AL1(26)
         ORG   EED4FMT3+12
@NM00613 DS    CL4
         ORG   @NM00613
@NM00614 DC    X'04'
@NM00615 DC    X'03'
@NM00616 DC    AL1(0)
@NM00617 DC    AL1(35)
         ORG   EED4FMT3+16
@NM00618 DS    CL4
         ORG   @NM00618
@NM00619 DC    X'04'
@NM00620 DC    X'03'
@NM00621 DC    AL1(0)
@NM00622 DC    AL1(44)
         ORG   EED4FMT3+20
@NM00623 DS    CL4
         ORG   @NM00623
@NM00624 DC    X'04'
@NM00625 DC    X'03'
@NM00626 DC    AL1(0)
@NM00627 DC    AL1(53)
         ORG   EED4FMT3+24
@NM00628 DS    CL4
         ORG   @NM00628
@NM00629 DC    X'04'
@NM00630 DC    X'03'
@NM00631 DC    AL1(0)
@NM00632 DC    AL1(62)
         ORG   EED4FMT3+28
@NM00633 DS    CL4
         ORG   @NM00633
@NM00634 DC    X'04'
@NM00635 DC    X'03'
@NM00636 DC    AL1(0)
@NM00637 DC    AL1(71)
         ORG   EED4FMT3+32
@NM00638 DS    CL4
         ORG   @NM00638
@NM00639 DC    X'04'
@NM00640 DC    X'03'
@NM00641 DC    AL1(0)
@NM00642 DC    AL1(80)
         ORG   EED4FMT3+36
@NM00643 DS    CL4
         ORG   @NM00643
@NM00644 DC    F'0'
         ORG   EED4FMT3+40
EED4FMT4 DS    CL16
         ORG   EED4FMT4
@NM00645 DS    CL4
         ORG   @NM00645
@NM00646 DC    X'01'
@NM00647 DC    X'40'
@NM00648 DC    AL1(0)
@NM00649 DC    AL1(0)
         ORG   EED4FMT4+4
@NM00650 DS    CL4
         ORG   @NM00650
@NM00651 DC    X'04'
@NM00652 DC    X'03'
@NM00653 DC    AL1(0)
@NM00654 DC    AL1(17)
         ORG   EED4FMT4+8
@NM00655 DS    CL4
         ORG   @NM00655
@NM00656 DC    X'04'
@NM00657 DC    X'01'
@NM00658 DC    AL1(0)
@NM00659 DC    AL1(26)
         ORG   EED4FMT4+12
@NM00660 DS    CL4
         ORG   @NM00660
@NM00661 DC    F'0'
         ORG   EED4FMT4+16
EED4L5   DS    CL18
         ORG   EED4L5
@NM00662 DC    CL6'SEQNUM'
@NM00663 DC    CL4'CPUI'
@NM00664 DC    CL4'ASID'
@NM00665 DC    CL4'TIME'
         ORG   EED4L5+18
         DS    CL2
EED4FMT5 DS    CL28
         ORG   EED4FMT5
@NM00666 DS    CL4
         ORG   @NM00666
@NM00667 DC    X'01'
@NM00668 DC    X'40'
@NM00669 DC    AL1(0)
@NM00670 DC    AL1(0)
         ORG   EED4FMT5+4
@NM00671 DS    CL8
         ORG   @NM00671
@NM00672 DC    X'07'
@NM00673 DC    X'51'
@NM00674 DC    AL1(8)
@NM00675 DC    AL1(17)
@NM00676 DC    AL4(EED4L5)
         ORG   EED4FMT5+12
@NM00677 DS    CL4
         ORG   @NM00677
@NM00678 DC    X'05'
@NM00679 DC    X'31'
@NM00680 DC    AL1(26)
@NM00681 DC    AL1(35)
         ORG   EED4FMT5+16
@NM00682 DS    CL4
         ORG   @NM00682
@NM00683 DC    X'05'
@NM00684 DC    X'31'
@NM00685 DC    AL1(44)
@NM00686 DC    AL1(53)
         ORG   EED4FMT5+20
@NM00687 DS    CL4
         ORG   @NM00687
@NM00688 DC    X'05'
@NM00689 DC    X'33'
@NM00690 DC    AL1(62)
@NM00691 DC    AL1(71)
         ORG   EED4FMT5+24
@NM00692 DS    CL4
         ORG   @NM00692
@NM00693 DC    F'0'
         ORG   EED4FMT5+28
TRANS    DS    CL256
         ORG   TRANS
@NM00697 DS    CL64
BL       DC    CL1' '
@NM00698 DS    CL175
NUMS     DC    CL16'0123456789ABCDEF'
         ORG   TRANS+256
EEDFMT   DC    CL120'*** FORMATTING SERVICE ROUTINE ERROR DURING EED FOC
               RMATTING (POSSIBLE CAUSE: DATA NOT IN DUMP) ***'
EED1HDR  DC    CL54'-EED-------- REGS AND PSW ----------------AT LOCATIC
               ON '
EEDUS    DC    CL4' ---'
EED2HDR  DC    CL54'-EED-------- DUMP OPTIONS ----------------AT LOCATIC
               ON '
EED3HDR  DC    CL54'-EED-------- MACHINE CHECK ---------------AT LOCATIC
               ON '
EED4HDR  DC    CL54'-EED-------- ERROR ID --------------------AT LOCATIC
               ON '
EEDSUM   DC    CL20'EED BIT FLAG SUMMARY'
EEDSUMUS DC    CL20'--------------------'
UNKNOWN  DC    CL53'INVALID EED TYPE ENCOUNTERED-EED BYPASSED AT LOCATIC
               ON'
EXITMSG  DC    CL34'FIELD CONTAINS INTERNAL EXIT FLAGS'
RTSTART  DC    CL17'RTM1 ENTERED FOR '
SYSTATE  DC    CL13'SYSTEM STATE:'
BLANKS   DC    CL120' '
EEDPATCH DC    CL200'PATCH AREA FOR IEAFTEED - IT IS 200 BYTES LONG'
         DS    CL3
EED1NAME DC    AL4(EED1FMT1)
         DC    AL4(EED1FMT2)
         DC    AL4(EED1FMT3)
         DC    AL4(EED1FMT4)
EED2NAME DC    AL4(EED2FMT1)
         DC    AL4(EED2FMT2)
         DC    AL4(EED2FMT3)
         DC    AL4(EED2FMT4)
         DC    AL4(EED2FMT4)
         DC    AL4(EED2FMT4)
         DC    AL4(EED2FMT5)
         DC    AL4(EED2FMT6)
         DC    AL4(EED2FMT7)
EED3NAME DC    AL4(EED3FMT1)
         DC    AL4(EED3FMT2)
         DC    AL4(EED3FMT3)
         DC    AL4(EED3FMT4)
         DC    AL4(EED3FMT5)
         DC    AL4(EED3FMT6)
EED4NAME DC    AL4(EED4FMT1)
         DC    AL4(EED4FMT2)
         DC    AL4(EED4FMT3)
         DC    AL4(EED4FMT4)
         DC    AL4(EED4FMT5)
MCHDMSG  DC    CL27'STORAGE KEY FAILURE'
         DC    CL27'REGISTERS ARE UNPREDICTABLE'
         DC    CL27'PSW IS UNPREDICTABLE'
         DC    CL27'STORAGE DATA CHECK'
         DC    CL27'ACR IN PROGRESS'
         DC    CL27'INSTRUCTION FAILURE'
         DC    CL27'SOFT ERROR'
         DC    CL27'TIMER ERROR'
MCHSMSG  DC    CL43'STORAGE RANGES AND RFSA VALID'
         DC    CL43'MACHINE RECORD NOT RECORDED'
         DC    CL43'TIME STAMP IS VALID'
         DC    CL43'STORAGE RECONFIGURATION PAGE INVALIDATED'
         DC    CL43'STORAGE RECONFIGURATION STATUS IS AVAILABLE'
         DC    CL43'STORAGE RECONFIGURATION NOT ATTEMPTED'
         DC    CL43' '
         DC    CL43' '
MODEMSG  DC    CL25'SUPERVISOR CONTROL MODE'
         DC    CL25'PHYSICALLY DISABLED STATE'
         DC    CL25'GLOBAL SPIN LOCK HELD'
         DC    CL25'GLOBAL SUSPEND LOCK HELD'
         DC    CL25'LOCALLY LOCKED MODE'
         DC    CL25'TYPE 1 SVC MODE'
         DC    CL25'SRB MODE'
         DC    CL25'TASK MODE'
RTARRAY  DC    CL50'PROGRAM CHECK'
         DC    CL50'RESTART'
         DC    CL50'SVC ERROR'
         DC    CL50'DAT ERROR'
         DC    CL50'MACHINE CHECK REENTRY'
         DC    CL50'RESCHEDULE OF PAGE I/O ERROR'
         DC    CL50'RESCHEDULE OF ABNORMAL TERMINATION'
         DC    CL50'RESCHEDULE OF ABNORMAL TERMINATION THROUGH CVTBTRM'
         DC    CL50'RESCHEDULE OF CROSS MEMORY ABNORMAL TERMINATION'
         DC    CL50'RESCHEDULE OF ABNORMAL TERMINATION OF CURRENT TCB'
         DC    CL50'MEMORY TERMINATION'
         DC    CL50'CROSS MEMORY ABNORMAL TERMINATION'
         DC    CL50'RESCHEDULE OF RTM1 ON OTHER CPU'
         DC    CL50'MACHINE CHECK'
TESTBITS DC    X'80'
         DC    X'40'
         DC    X'20'
         DC    X'10'
         DC    X'08'
         DC    X'04'
         DC    X'02'
         DC    X'01'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
LNGTHEQU EQU   @05
INDEX    EQU   @08
CONVRT   EQU   @08
EEDPTR   EQU   @07
ESTAPTR  EQU   @09
DATAPTR  EQU   @06
ARRAYCNT EQU   @05
ABDPLPTR EQU   @01
LINEPTR  EQU   @00
VADR     EQU   @00
RCREG    EQU   @15
ABDPL    EQU   0
ADPLFLAG EQU   ABDPL+7
ADPLSNPR EQU   ADPLFLAG
ADPLBUF  EQU   ABDPL+8
ADPLPRNT EQU   ABDPL+12
ADPLMEMA EQU   ABDPL+20
ADPLFRMT EQU   ABDPL+24
ADPLCOM1 EQU   ABDPL+28
ADPLCOM2 EQU   ABDPL+32
ADPLFMT1 EQU   ABDPL+44
ADPLFMT2 EQU   ABDPL+48
RT1TRACK EQU   0
RT1TRECC EQU   RT1TRACK
RT1TACQR EQU   RT1TRECC+3
RTMBRTAB EQU   0
RTMBTERM EQU   RTMBRTAB
MODEBYTE EQU   0
EED      EQU   0
EEDDES   EQU   EED+4
EEDID    EQU   EEDDES
EEDFLAGS EQU   EEDDES+1
EEDERFL  EQU   EEDFLAGS
EEDERROR EQU   EED+8
EEDMODE  EQU   EEDERROR
EEDERTYP EQU   EEDERROR+1
EEDVARBL EQU   EED+12
ACCESS   EQU   0
FORMAT   EQU   0
PRINT    EQU   0
BUFFER   EQU   0
OFFSET   EQU   BUFFER
ADDRESS  EQU   BUFFER+55
DATABYTE EQU   0
DATADWRD EQU   0
ERRFL    EQU   0
ESTAPARM EQU   0
ESTAERR  EQU   ESTAPARM
ERREXP   EQU   ESTAERR
RTYADR   EQU   ESTAPARM+4
RTYREGS  EQU   ESTAPARM+8
LCALREGS EQU   ESTAPARM+72
ENDMSG   EQU   0
BITSTR   EQU   0
MSG      EQU   0
MSGARY   EQU   0
DATAWORD EQU   0
RT1W     EQU   FRRSRTMW
RT1WNPRS EQU   RT1W
RT1WPRSV EQU   RT1W+52
RT1WENTR EQU   RT1WPRSV+12
RT1WCOVR EQU   RT1WENTR+2
RT1RTRN  EQU   FRRSRTMW
RT1RTRRG EQU   RT1RTRN+4
EEDREGSP EQU   EEDVARBL
EEDREGS  EQU   EEDREGSP
EEDPSW   EQU   EEDREGSP+64
EEDPSW1  EQU   EEDPSW
EEDPSW2  EQU   EEDPSW+8
EEDINILC EQU   EEDPSW2
EEDDUMPO EQU   EEDVARBL
EEDSCDMP EQU   EEDDUMPO
EEDSDDAT EQU   EEDSCDMP+4
EEDHWREP EQU   EEDVARBL
EEDHMCHS EQU   EEDHWREP+8
EEDHMCHD EQU   EEDHWREP+9
EEDHRSRS EQU   EEDHWREP+12
EEDHRSR1 EQU   EEDHRSRS
EEDHRSR2 EQU   EEDHRSRS+1
EEDERMAP EQU   EEDVARBL
EEDERRID EQU   EEDERMAP+70
START    EQU   ADPLFMT1
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
EEDETIME EQU   EEDERRID+6
EEDEASID EQU   EEDERRID+4
EEDECPUI EQU   EEDERRID+2
EEDESEQ# EQU   EEDERRID
@NM00012 EQU   EEDERMAP
EEDHTIME EQU   EEDHWREP+20
EEDHRFSA EQU   EEDHWREP+16
@NM00011 EQU   EEDHWREP+14
EEDHVERQ EQU   EEDHRSR2
EEDHPGFX EQU   EEDHRSR2
EEDHFLSQ EQU   EEDHRSR2
EEDHFSQA EQU   EEDHRSR2
EEDHNUCL EQU   EEDHRSR2
EEDHSPER EQU   EEDHRSR2
EEDHINTC EQU   EEDHRSR2
EEDHOFLN EQU   EEDHRSR2
EEDHCHNG EQU   EEDHRSR1
EEDHMSER EQU   EEDHRSR1
@NM00010 EQU   EEDHRSR1
EEDHCPID EQU   EEDHWREP+10
EEDHTERR EQU   EEDHMCHD
EEDHSOFT EQU   EEDHMCHD
EEDHINSF EQU   EEDHMCHD
EEDHACR  EQU   EEDHMCHD
EEDHSCK  EQU   EEDHMCHD
EEDHPSWU EQU   EEDHMCHD
EEDHREGU EQU   EEDHMCHD
EEDHSKYF EQU   EEDHMCHD
@NM00009 EQU   EEDHMCHS
@NM00008 EQU   EEDHMCHS
EEDHRSRF EQU   EEDHMCHS
EEDRSRC  EQU   EEDHMCHS
EEDINVP  EQU   EEDHMCHS
EEDHTSVL EQU   EEDHMCHS
EEDHRCDF EQU   EEDHMCHS
EEDHSRVL EQU   EEDHMCHS
EEDHSCKE EQU   EEDHWREP+4
EEDHSCKB EQU   EEDHWREP
EEDSDPSL EQU   EEDDUMPO+8
EEDSPDAT EQU   EEDSDDAT+2
EEDSSDAT EQU   EEDSDDAT
EEDSDUMP EQU   EEDSCDMP
EEDTRANS EQU   EEDPSW2+4
EEDINTCD EQU   EEDINILC+2
EEDILC   EQU   EEDINILC+1
@NM00007 EQU   EEDINILC
EEDPSWIC EQU   EEDPSW1+4
EEDPSWMK EQU   EEDPSW1
EEDREG15 EQU   EEDREGS+60
EEDREG14 EQU   EEDREGS+56
EEDREG13 EQU   EEDREGS+52
EEDREG12 EQU   EEDREGS+48
EEDREG11 EQU   EEDREGS+44
EEDREG10 EQU   EEDREGS+40
EEDREG9  EQU   EEDREGS+36
EEDREG8  EQU   EEDREGS+32
EEDREG7  EQU   EEDREGS+28
EEDREG6  EQU   EEDREGS+24
EEDREG5  EQU   EEDREGS+20
EEDREG4  EQU   EEDREGS+16
EEDREG3  EQU   EEDREGS+12
EEDREG2  EQU   EEDREGS+8
EEDREG1  EQU   EEDREGS+4
EEDREG0  EQU   EEDREGS
RT1RTYAD EQU   RT1RTRRG+60
RT1R0R14 EQU   RT1RTRRG
@NM00004 EQU   RT1RTRN
@NM00003 EQU   RT1WENTR+3
@NM00002 EQU   RT1WCOVR
RT1WEREX EQU   RT1WCOVR
RT1TRTCA EQU   RT1WCOVR
RT1TLOCL EQU   RT1WCOVR
RT1WRTM  EQU   RT1WCOVR
RT1WCLUP EQU   RT1WCOVR
RT1WSRMD EQU   RT1WENTR+1
RT1WMODE EQU   RT1WENTR
RT1WEED  EQU   RT1WPRSV+8
RT1WSRBR EQU   RT1WPRSV+4
RT1WRTCA EQU   RT1WPRSV
RT1WVARI EQU   RT1WNPRS+32
RT1WPSW2 EQU   RT1WNPRS+28
RT1WPSW1 EQU   RT1WNPRS+24
RT1WLPTA EQU   RT1WNPRS
@NM00696 EQU   ESTAERR
UNEXP2   EQU   ESTAERR
LOCKHELD EQU   ESTAERR
@NM00695 EQU   BUFFER+64
@NM00694 EQU   BUFFER+6
EEDASID  EQU   EEDERROR+2
@NM00006 EQU   EEDDES+2
@NM00005 EQU   EEDFLAGS
EEDFWRDP EQU   EED
MODETCB  EQU   MODEBYTE
MODESRB  EQU   MODEBYTE
MODETYP1 EQU   MODEBYTE
MODELOC  EQU   MODEBYTE
MODEGSUS EQU   MODEBYTE
MODEGSPN EQU   MODEBYTE
MODEDIS  EQU   MODEBYTE
MODESUPR EQU   MODEBYTE
RTMBXABT EQU   RTMBRTAB+44
RTMBACR  EQU   RTMBRTAB+40
RTMBPROG EQU   RTMBRTAB+36
RTMBMEMT EQU   RTMBRTAB+32
RTMBCABT EQU   RTMBRTAB+28
RTMBPGIO EQU   RTMBRTAB+24
RTMBSVC  EQU   RTMBRTAB+20
RTMBMACH EQU   RTMBRTAB+16
RTMBREST EQU   RTMBRTAB+12
RTMBDAT  EQU   RTMBRTAB+8
RTMBPAD2 EQU   RTMBTERM+6
RTMBBRAN EQU   RTMBTERM+2
RTMBBALR EQU   RTMBTERM
RT1TREGS EQU   RT1TRACK+4
RT1TRETY EQU   RT1TACQR
RT1TLLCK EQU   RT1TACQR
RT1TDISP EQU   RT1TACQR
RT1TENPT EQU   RT1TRECC+2
RT1TLPID EQU   RT1TRECC+1
RT1TLPN  EQU   RT1TRECC
ADPLABDA EQU   ABDPL+56
ADPLEXT  EQU   ABDPL+52
ADPLCOM4 EQU   ABDPL+40
ADPLCOM3 EQU   ABDPL+36
ADPLCVT  EQU   ABDPL+16
@NM00001 EQU   ADPLFLAG
ADPLDMGT EQU   ADPLFLAG
ADPLSYTM EQU   ADPLFLAG
ADPLSBPL EQU   ABDPL+6
ADPLASID EQU   ABDPL+4
ADPLTCB  EQU   ABDPL
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00150 EQU   @RC00137
@RC00181 EQU   @RC00168
@RC00317 EQU   @EL00005
@RC00324 EQU   @EL00005
@RC00322 EQU   @EL00005
@RC00154 EQU   @RC00150
@RC00185 EQU   @RC00181
@ENDDATA EQU   *
         END   IEAFTEED,(C'PLS2025',0701,77006)
