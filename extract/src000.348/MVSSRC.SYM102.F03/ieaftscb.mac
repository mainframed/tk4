         TITLE 'IEAFTSCB-SCB-RTCT CONTROL BLOCK FORMAT MODULE          *
                        '
IEAFTSCB CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00001-@MAINENT)
         DC    AL1(16)                                             0001
         DC    C'IEAFTSCB  77.025'                                 0001
IEAFTRTC DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00216-IEAFTRTC)
         ENTRY IEAFTRTC
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @11,0                                               0001
@PSTART  LA    @12,4095(,@11)                                      0001
         USING @PSTART,@11                                         0001
         USING @PSTART+4095,@12                                    0001
         L     @00,@SIZDATD                                        0001
         GETMAIN  R,LV=(0)
         LR    @10,@01                                             0001
         USING @DATD,@10                                           0001
         ST    @13,@SA00001+4                                      0001
         LM    @15,@01,16(@13)                                     0001
         ST    @10,8(,@13)                                         0001
         LR    @13,@10                                             0001
         AH    @15,4(,@15)                                         0001
         BR    @15                                                 0001
@EP00001 DS    0H                                                  0002
*                                                                  0112
*/********************************************************************/
*/* FUNCTION -                                                     0112
*      ROUTINE WHICH FORMATS THE STAE CONTROL BLOCK.               0112
*      IT SETS UP THE NEEDED POINTERS TO BE PASSED TO THE FORMAT   0112
*      ROUTINE SENT IN THE PARAMETER LIST.  FOR ANY ERROR ACCESSING
*      A NEEDED FIELD IN THE SCB OR FOR NON-ZERO RETURN CODE       0112
*      FROM THE FORMATTING SERVICE, THE FOLLOWING MESSAGE WILL BE  0112
*      PRINTED:                                                    0112
*               *** FORMATTING SERVICE ROUTINE ERROR DURING        0112
*               SCB FORMATTING(POSSIBLE CAUSE:  DATA NOT IN        0112
*               DUMP) ***                                          0112
*      AT THIS POINT PROCESSING WOULD TERMINATE. IF THE SCB IS     0112
*      FORMATTED WITHOUT ERROR, A BIT SUMMARY OF THE SCB IS PRINTED
*      USING THE ANALYZE PROC.                                     0112
*                                                                  0112
*   INPUT -                                                        0112
*      REGISTER 1 POINTS TO THE PARMLIST WHICH CONTIANS THE        0112
*      ADDRESS OF THE CONTROL BLOCK TO BE FORMATTED IN ADPLFMT2.   0112
*      ADPLFMT1 ALSO DEFINED AS START CONTAINS THE OFFSET TO BE    0112
*      PLACED ALONG THE FIRST FIELD IN THE CONTROL BLOCK AND       0112
*      ADPLCOM1 CONTAINS THE ADDRESS OF THE ESTAE PARAMETER LIST.  0112
*                                                                  0112
*   CALLS -                                                        0112
*      CALLS ACCESRTN, ANALYZE, CONVERT, FMTRTN,PRINT              0112
*                                                                  0112
*   CALLED BY -                                                    0112
*      IEAVTFMT TO FORMAT SCB                                      0112
*                                                                  0112
*   RETURNS TO -                                                   0112
*      IEAVTFMT WITH RETURN CODE SET BY ACCESS OR FORMAT           0112
*      SERVICE ROUTINES                                              */
*/********************************************************************/
*                                                                  0112
*   ESTAPTR=ADPLCOM1;               /* SAVE PTR TO ESTAE PARM LIST   */
         L     ESTAPTR,ADPLCOM1(,ABDPLPTR)                         0112
*   STM(VADR,RCREG,LCALREGS);       /* SAVE REGS FOR RETRY           */
         STM   VADR,RCREG,LCALREGS(ESTAPTR)                        0113
*   ADPLCOM1=ADDR(SCBFMT);          /* FORMAT ROUTINE ERROR          */
         LA    @14,SCBFMT                                          0114
         ST    @14,ADPLCOM1(,ABDPLPTR)                             0114
*   SCBPTR=ADPLFMT2;                /* PTR TO SCB                    */
         L     @14,ADPLFMT2(,ABDPLPTR)                             0115
         ST    @14,SCBPTR                                          0115
*   ERRSW=OFF;                                                     0116
         NI    ERRSW,B'11011111'                                   0116
*   SAVEPTR=ADPLFMT2-START;         /* VALUE FOR OFFSET              */
         LR    @04,@14                                             0117
         SL    @04,START(,ABDPLPTR)                                0117
         ST    @04,SAVEPTR                                         0117
*   BUFFER(1:LENGTH(SCBHDR))=SCBHDR;/* TITLE                         */
         L     @04,ADPLBUF(,ABDPLPTR)                              0118
         MVC   BUFFER(55,@04),SCBHDR                               0118
*   PACKAREA=SCBPTR;                /* MOVE ADDR INTO CHAR AREA      */
         ST    @14,PACKAREA                                        0119
*   GARBAGE='04'X;                  /* GARBAGE BYTE SO ADDR UNPACKS  */
         MVI   GARBAGE,X'04'                                       0120
*   UNPK(ADDRESS,UNPACK);           /* MOVE INTO BUFFER              */
         UNPK  ADDRESS(9,@04),UNPACK(5)                            0121
*   TR(ADDRESS,TRANS);              /* MAKE PRINTABLE                */
         TR    ADDRESS(9,@04),TRANS                                0122
*   CALL PRINT;                     /* PRINT IT                      */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0123
         BALR  @14,@15                                             0123
*   BUFFER(2:LENGTH(SCBUS)+1)=SCBUS;/* UNDERSCORE                    */
         L     @14,ADPLBUF(,ABDPLPTR)                              0124
         MVC   BUFFER+1(18,@14),SCBUS                              0124
*   CALL PRINT;                     /* PRINT IT                      */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0125
         BALR  @14,@15                                             0125
*   CALL PRINT;                     /* BLANK                         */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0126
         BALR  @14,@15                                             0126
*   ARRAYCNT=1;                     /* ARRAY INDEX                   */
         LA    ARRAYCNT,1                                          0127
*   LINEPTR=SCBNAMES(ARRAYCNT);     /* FORMAT PATTERN                */
         LR    @14,ARRAYCNT                                        0128
         SLA   @14,2                                               0128
         L     LINEPTR,SCBNAMES-4(@14)                             0128
*   CALL CONVERT;                   /* GENERATE OFFSET               */
         BAL   @14,CONVERT                                         0129
*   CALL FMTRTN;                    /* FORMAT IT                     */
*                                                                  0130
         BAL   @14,FMTRTN                                          0130
*   /*****************************************************************/
*   /*                                                               */
*   /* ANALYZE BITS IF FORMATTER COMPLETED SUCESSFULLY               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0131
*   IF ERRSW=OFF THEN               /* NO FORMAT ERRORS              */
         TM    ERRSW,B'00100000'                                   0131
         BNZ   @RF00131                                            0131
*     DO;                                                          0132
*       HDRBIT=OFF;                 /* HEADER INDICATOR              */
         NI    HDRBIT,B'11101111'                                  0133
*       CALL PRINT;                 /* BLANK                         */
*                                                                  0134
         L     @15,ADPLPRNT(,ABDPLPTR)                             0134
         BALR  @14,@15                                             0134
*       /*************************************************************/
*       /*                                                           */
*       /* ANALYZE TYPE OF SCB BYTE                                  */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0135
*       VADR=ADDR(SCBFLGS1);        /* FIRST FLAG FIELD              */
         L     @14,SCBPTR                                          0135
         LA    VADR,SCBFLGS1(,@14)                                 0135
*       CALL ACCESRTN;              /* ACCESS IT                     */
         BAL   @14,ACCESRTN                                        0136
*       IF RCREG=ZERO THEN          /* BYTE TO ANALYZE               */
         LTR   RCREG,RCREG                                         0137
         BNZ   @RF00137                                            0137
*         DO;                                                      0138
*           HDRBIT=ON;              /* HEADER OUT                    */
         OI    HDRBIT,B'00010000'                                  0139
*           BUFFER(31:(LENGTH(SCBSUM)+30))=SCBSUM;/* SUMMARY HDR     */
         L     @14,ADPLBUF(,ABDPLPTR)                              0140
         MVC   BUFFER+30(20,@14),SCBSUM                            0140
*           CALL PRINT;             /* PRINT IT                      */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0141
         BALR  @14,@15                                             0141
*           BUFFER(31:(LENGTH(SCBSUS)+30))=SCBSUS;/* UNDERSCORE      */
         L     @14,ADPLBUF(,ABDPLPTR)                              0142
         MVC   BUFFER+30(20,@14),SCBSUS                            0142
*           CALL PRINT;             /* PRINT IT                      */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0143
         BALR  @14,@15                                             0143
*           CALL PRINT;             /* BLANK                         */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0144
         BALR  @14,@15                                             0144
*           ADPLFMT2=ADDR(SCBFLGS1);                               0145
*                                                                  0145
         L     @14,SCBPTR                                          0145
         LA    @14,SCBFLGS1(,@14)                                  0145
         ST    @14,ADPLFMT2(,ABDPLPTR)                             0145
*/*           THE SCB TYPE BYTE IS MORE INVOLVED THAN THE OTHER BYTES
*             BEING ANALYZED. FOR BIT PATTERNS:                    0146
*                       1..1 ....  -     ESTAI                     0146
*                       1..0 ....  -     STAI                      0146
*                       .1.1 ....  -     ESTAR                     0146
*                       .1.0 ....  -     STAR                      0146
*                       00.1 ....  -     ESTAE                     0146
*                       00.0 ....  -     STAE                      0146
*                       .... ..10  -     BYPASS I/O INTERVENTION   0146
*                       .... ..01  -     HALT I/O                  0146
*                       .... ..00  -     QUIESCE I/O               0146
*                                                                  0146
*              FOR ALL OTHER BITS THERE IS ONLY ONE MEANING          */
*                                                                  0146
*           IF(DATABYTE&ESTAMSK)=ESTAMSK THEN/* THE SCB IS OF ESTA 0146
*                                      TYPE                          */
         SLR   @14,@14                                             0146
         IC    @14,ESTAMSK                                         0146
         SLR   @09,@09                                             0146
         IC    @09,DATABYTE(,DATAPTR)                              0146
         NR    @09,@14                                             0146
         CR    @09,@14                                             0146
         BNE   @RF00146                                            0146
*             DO;                                                  0147
*               ADPLCOM2=ADDR(SUMMARY);/* SUMMARY PTR IN PARMLIST    */
         LA    @14,SUMMARY                                         0148
         ST    @14,ADPLCOM2(,ABDPLPTR)                             0148
*               BYTEADDR=ADDR(DATABYTE);/* ADDR OF BYTE TO BE      0149
*                                      RESOLVED                      */
         ST    DATAPTR,BYTEADDR                                    0149
*               MSGADDR=ADDR(PARMEMSG);/* MESSAGE ARRAY              */
         LA    @14,PARMEMSG                                        0150
         ST    @14,MSGADDR                                         0150
*               MSGLNGTH=LENGTH(PARMEMSG);/* MSG ARRAY LENGTH        */
         MVC   MSGLNGTH(4),@CF01294                                0151
*               CALL CONVERT;       /* GENERATE OFFSET               */
         BAL   @14,CONVERT                                         0152
*               OFFSET=CONVERTD;    /* PUT OFFSET IN BUFFER          */
         L     @14,ADPLBUF(,ABDPLPTR)                              0153
         MVC   OFFSET(6,@14),CONVERTD                              0153
*               COLNUM=DEFAULT;     /* WHERE IN BUFFER TO START      */
         MVC   COLNUM(4),@CF00060                                  0154
*               CALL ANALYZE;       /* ANALYZE THE BYTE ANALYZE BYTE */
         BAL   @14,ANALYZE                                         0155
*               IF(DATABYTE&MSKIR)=ESTAMSK THEN/* THE SCB IS ESTAE   */
         SLR   @14,@14                                             0156
         IC    @14,DATABYTE(,DATAPTR)                              0156
         SLR   @09,@09                                             0156
         IC    @09,MSKIR                                           0156
         NR    @14,@09                                             0156
         SLR   @09,@09                                             0156
         IC    @09,ESTAMSK                                         0156
         CR    @14,@09                                             0156
         BNE   @RF00156                                            0156
*                 DO;                                              0157
*                   BUFFER(8:(LENGTH(ESTAMSG)+7))=ESTAMSG;/* SPECIAL
*                                      MSG FOR ESTAE                 */
         L     @14,ADPLBUF(,ABDPLPTR)                              0158
         MVC   BUFFER+7(18,@14),ESTAMSG                            0158
*                   CALL PRINT;     /* PRINT IT                      */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0159
         BALR  @14,@15                                             0159
*                 END;              /* END SPECIAL MSG FOR ESTAE     */
*               ELSE                                               0161
*                 ;                 /* EITHER ESTAI OR ESTAR-ALREADY
*                                      RESOLVED                      */
@RF00156 DS    0H                                                  0162
*             END;                  /* END OF THE ESTA TYPE          */
*           ELSE                    /* SCB OF THE STA TYPE           */
*             DO;                                                  0163
         B     @RC00146                                            0163
@RF00146 DS    0H                                                  0164
*               ADPLCOM2=ADDR(SUMMARY);/* SUMMARY PTR IN PARMLIST    */
         LA    @14,SUMMARY                                         0164
         ST    @14,ADPLCOM2(,ABDPLPTR)                             0164
*               BYTEADDR=ADDR(DATABYTE);/* ADDR OF BYTE TO BE      0165
*                                      RESOLVED                      */
         ST    DATAPTR,BYTEADDR                                    0165
*               MSGADDR=ADDR(PARMRMSG);/* MESSAGE ARRAY              */
         LA    @14,PARMRMSG                                        0166
         ST    @14,MSGADDR                                         0166
*               MSGLNGTH=LENGTH(PARMRMSG);/* MSG ARRAY LENGTH        */
         MVC   MSGLNGTH(4),@CF01294                                0167
*               CALL CONVERT;       /* GENERATE OFFSET               */
         BAL   @14,CONVERT                                         0168
*               OFFSET=CONVERTD;    /* PUT OFFSET IN BUFFER          */
         L     @14,ADPLBUF(,ABDPLPTR)                              0169
         MVC   OFFSET(6,@14),CONVERTD                              0169
*               COLNUM=DEFAULT;     /* WHERE IN BUFFER TO START      */
         MVC   COLNUM(4),@CF00060                                  0170
*               CALL ANALYZE;       /* ANALYZE THE BYTE ANALYZE BYTE */
         BAL   @14,ANALYZE                                         0171
*               IF(DATABYTE&MSKIR)=ZEROBYTE THEN/* THE SCB IS STAE   */
         SLR   @14,@14                                             0172
         IC    @14,DATABYTE(,DATAPTR)                              0172
         SLR   @09,@09                                             0172
         IC    @09,MSKIR                                           0172
         NR    @14,@09                                             0172
         SLR   @09,@09                                             0172
         IC    @09,ZEROBYTE                                        0172
         CR    @14,@09                                             0172
         BNE   @RF00172                                            0172
*                 DO;                                              0173
*                   BUFFER(8:(LENGTH(STAEMSG)+7))=STAEMSG;/* SPECIAL
*                                      MSG FOR STAE                  */
         L     @14,ADPLBUF(,ABDPLPTR)                              0174
         MVC   BUFFER+7(17,@14),STAEMSG                            0174
*                   CALL PRINT;     /* PRINT IT                      */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0175
         BALR  @14,@15                                             0175
*                 END;              /* END SPECIAL MSG FOR STAE      */
*               ELSE                                               0177
*                 ;                 /* EITHER STAI OR STAR-ALREADY 0177
*                                      RESOLVED                      */
@RF00172 DS    0H                                                  0178
*             END;                  /* END OF THE STA TYPE           */
*           IF(DATABYTE&QUIESMSK)=ZEROBYTE THEN/* FOR BOTH TYPES   0179
*                                      CHECK IF QUIESCE I/O BITS ON  */
@RC00146 SLR   @14,@14                                             0179
         IC    @14,DATABYTE(,DATAPTR)                              0179
         SLR   @09,@09                                             0179
         IC    @09,QUIESMSK                                        0179
         NR    @14,@09                                             0179
         SLR   @09,@09                                             0179
         IC    @09,ZEROBYTE                                        0179
         CR    @14,@09                                             0179
         BNE   @RF00179                                            0179
*             DO;                                                  0180
*               BUFFER(8:(LENGTH(QUIESMSG)+7))=QUIESMSG;/* QUIESCE 0181
*                                      MESSAGE                       */
         L     @14,ADPLBUF(,ABDPLPTR)                              0181
         MVC   BUFFER+7(11,@14),QUIESMSG                           0181
*               CALL PRINT;         /* PRINT IT                      */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0182
         BALR  @14,@15                                             0182
*             END;                  /* END QUIESCE MESSAGE           */
*           ELSE                                                   0184
*             ;                     /* QUIESCE INDICATORS NOT ON     */
@RF00179 DS    0H                                                  0185
*         END;                      /* END BYTE ANALYZED             */
*       ELSE                                                       0186
*         ;                         /* NO BYTE TO BE ANALYZED        */
*                                                                  0186
@RF00137 DS    0H                                                  0187
*       /*************************************************************/
*       /*                                                           */
*       /* ANALYZE FLGS2 BYTE                                        */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0187
*       VADR=ADDR(SCBFLGS2);        /* NEXT BYTE TO BE ANALYZED      */
         L     @14,SCBPTR                                          0187
         LA    VADR,SCBFLGS2(,@14)                                 0187
*       CALL ACCESRTN;              /* ACCESS IT                     */
         BAL   @14,ACCESRTN                                        0188
*       IF RCREG=ZERO&DATABYTE^=ZEROBYTE THEN/* BYTE TO ANALYZE      */
         LTR   RCREG,RCREG                                         0189
         BNZ   @RF00189                                            0189
         CLC   DATABYTE(1,DATAPTR),ZEROBYTE                        0189
         BE    @RF00189                                            0189
*         DO;                                                      0190
*           IF HDRBIT=OFF THEN      /* HDR NOT ALREADY PRINTED       */
         TM    HDRBIT,B'00010000'                                  0191
         BNZ   @RF00191                                            0191
*             DO;                                                  0192
*               HDRBIT=ON;          /* HEADER OUT                    */
         OI    HDRBIT,B'00010000'                                  0193
*               BUFFER(31:(LENGTH(SCBSUM)+30))=SCBSUM;/* SUMMARY HDR */
         L     @14,ADPLBUF(,ABDPLPTR)                              0194
         MVC   BUFFER+30(20,@14),SCBSUM                            0194
*               CALL PRINT;         /* PRINT IT                      */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0195
         BALR  @14,@15                                             0195
*               BUFFER(31:(LENGTH(SCBSUS)+30))=SCBSUS;/* UNDERSCORE  */
         L     @14,ADPLBUF(,ABDPLPTR)                              0196
         MVC   BUFFER+30(20,@14),SCBSUS                            0196
*               CALL PRINT;         /* PRINT IT                      */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0197
         BALR  @14,@15                                             0197
*               CALL PRINT;         /* BLANK                         */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0198
         BALR  @14,@15                                             0198
*             END;                  /* HDR PRINTED                   */
*           ELSE                                                   0200
*             ;                     /* HEADER ALREADY PRINTED        */
@RF00191 DS    0H                                                  0201
*           ADPLFMT2=ADDR(SCBFLGS2);                               0201
         L     @14,SCBPTR                                          0201
         LA    @14,SCBFLGS2(,@14)                                  0201
         ST    @14,ADPLFMT2(,ABDPLPTR)                             0201
*           ADPLCOM2=ADDR(SUMMARY); /* SUMMARY PTR IN PARMLIST       */
         LA    @14,SUMMARY                                         0202
         ST    @14,ADPLCOM2(,ABDPLPTR)                             0202
*           BYTEADDR=ADDR(DATABYTE);/* ADDR OF BYTE TO BE RESOLVED   */
         ST    DATAPTR,BYTEADDR                                    0203
*           MSGADDR=ADDR(FLGS2MSG); /* MESSAGE ARRAY                 */
         LA    @14,FLGS2MSG                                        0204
         ST    @14,MSGADDR                                         0204
*           MSGLNGTH=LENGTH(FLGS2MSG);/* MSG ARRAY LENGTH            */
         MVC   MSGLNGTH(4),@CF00071                                0205
*           CALL CONVERT;           /* GENERATE OFFSET               */
         BAL   @14,CONVERT                                         0206
*           OFFSET=CONVERTD;        /* PUT OFFSET IN BUFFER          */
         L     @14,ADPLBUF(,ABDPLPTR)                              0207
         MVC   OFFSET(6,@14),CONVERTD                              0207
*           COLNUM=DEFAULT;         /* WHERE IN BUFFER TO START      */
         MVC   COLNUM(4),@CF00060                                  0208
*           CALL ANALYZE;           /* ANALYZE THE BYTE ANALYZE BYTE */
         BAL   @14,ANALYZE                                         0209
*         END;                      /* BYTE DOES NOT NEED ANALYZE    */
*       ELSE                                                       0211
*         ;                         /* NOT ANALYZED                  */
@RF00189 DS    0H                                                  0212
*     END;                          /* END NO FORMAT ERRORS          */
*   ELSE                                                           0213
*     ;                             /* FORMAT ERROR                  */
@RF00131 DS    0H                                                  0214
*   LCALREGS=RTYREGS;               /* RESTORE RETRY REGS OF CALLER  */
         MVC   LCALREGS(64,ESTAPTR),RTYREGS(ESTAPTR)               0214
*   RETURN CODE(RCCODE);            /* DO NOT FALL THROUGH TO RTCT 0215
*                                      CODE                          */
         L     @13,4(,@13)                                         0215
         L     @00,@SIZDATD                                        0215
         LR    @01,@10                                             0215
         FREEMAIN R,LV=(0),A=(1)
         LR    @15,@09                                             0215
         L     @14,12(,@13)                                        0215
         LM    @00,@12,20(@13)                                     0215
         BR    @14                                                 0215
*IEAFTRTC:                                                         0216
*   ENTRY;                                                         0216
*                                                                  0216
@EP00216 DS    0H                                                  0217
*/********************************************************************/
*/* FUNCTION -                                                     0217
*      ROUTINE WHICH FORMATS THE RECOVERY TERMINATION CONTROL TABLE.
*      IT SETS UP THE NEEDED POINTERS TO BE PASSED TO THE FORMAT   0217
*      ROUTINE SENT IN THE PARAMETER LIST.  FOR ANY ERROR ACCESSING
*      A NEEDED FIELD IN THE RTCT OR FOR NON-ZERO RETURN CODE      0217
*      FROM THE FORMATTING SERVICE, THE FOLLOWING MESSAGE WILL BE  0217
*      PRINTED:                                                    0217
*               *** FORMATTING SERVICE ROUTINE ERROR DURING        0217
*               RTCT FORMATTING(POSSIBLE CAUSE:  DATA NOT IN       0217
*               DUMP) ***                                          0217
*      AT THIS POINT PROCESSING WOULD TERMINATE.                   0217
*                                                                  0217
*   INPUT -                                                        0217
*      REGISTER 1 POINTS TO THE PARMLIST WHICH CONTAINS THE        0217
*      ADDRESS OF THE CONTROL BLOCK TO BE FORMATTED IN ADPLFMT2.   0217
*      ADPLFMT1 ALSO DEFINED AS START, CONTAINS THE OFFSET TO BE   0217
*      PLACED ALONG SIDE THE FIRST FIELD IN THE CONTROL BLOCK AND  0217
*      ADPLCOM1 CONTAINS THE ADDRESS OF THE ESTAE PARAMETER LIST.  0217
*                                                                  0217
*   CALLS -                                                        0217
*      CALLS ACCESRTN, CONVERT, FMTRTN, AND PRINT                  0217
*                                                                  0217
*   CALLED BY -                                                    0217
*      IEAVTFMT TO FORMAT RTCT                                     0217
*                                                                  0217
*   RETURNS TO -                                                   0217
*      IEAVTFMT WITH RETURN CODE SET BY ACCESS OR FORMAT           0217
*      SERVICE ROUTINES                                              */
*/********************************************************************/
*                                                                  0217
*   ESTAPTR=ADPLCOM1;               /* SAVE PTR TO ESTAE PARM LIST   */
         L     ESTAPTR,ADPLCOM1(,ABDPLPTR)                         0217
*   STM(VADR,RCREG,LCALREGS);       /* SAVE REGS FOR RETRY           */
         STM   VADR,RCREG,LCALREGS(ESTAPTR)                        0218
*   ADPLCOM1=ADDR(RTCFMT);          /* FORMAT ROTINE ERROR MSG       */
         LA    @14,RTCFMT                                          0219
         ST    @14,ADPLCOM1(,ABDPLPTR)                             0219
*   RTCTPTR=ADPLFMT2;               /* RTCT ADDRESS                  */
         L     @14,ADPLFMT2(,ABDPLPTR)                             0220
         LR    RTCTPTR,@14                                         0220
*   SAVEPTR=ADPLFMT2-START;         /* VALUE FOR DYNAMIC OFFSET    0221
*                                      GENERATOR                     */
         SL    @14,START(,ABDPLPTR)                                0221
         ST    @14,SAVEPTR                                         0221
*   BITS=BITS&&BITS;                /* ZERO INTERNAL BITS            */
*                                                                  0222
         XC    BITS(1),BITS                                        0222
*   /*****************************************************************/
*   /*                                                               */
*   /* IN RELEASE 2 OF MVS, THE POINTER TO THE SUBITS WAS NOT        */
*   /* DEFINED. THEREFORE, BEFORE ACCESSING THE SUBIT POINTER, CHECK */
*   /* FOR RELEASE 2                                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0223
*   VADR=ADDR(CVTNUMB);             /* RELEASE NUMBER                */
         L     @14,CVTPTR(,ABDPLPTR)                               0223
         AL    @14,@CF02061                                        0223
         LR    VADR,@14                                            0223
*   CALL ACCESRTN;                  /* ACCESS IT                     */
         BAL   @14,ACCESRTN                                        0224
*   IF RCREG^=ZERO THEN             /* ACCESS ERROR                  */
         LTR   RCREG,RCREG                                         0225
         BZ    @RF00225                                            0225
*     BUFFER(1:LENGTH(RTCFMT))=RTCFMT;                             0226
         L     @14,ADPLBUF(,ABDPLPTR)                              0226
         MVC   BUFFER(120,@14),RTCFMT                              0226
*   ELSE                            /* FOUND RELEASE NUMBER          */
*     DO;                                                          0227
         B     @RC00225                                            0227
@RF00225 DS    0H                                                  0228
*       IF DATAHALF^=REL2 THEN      /* NOT A RELEASE 2 MVS SYSTEM    */
         CLC   DATAHALF(2,DATAPTR),REL2                            0228
         BE    @RF00228                                            0228
*         DO;                                                      0229
*                                                                  0229
*           /*********************************************************/
*           /*                                                       */
*           /* FIND WHICH SUS ARE ON THE SYSTEM                      */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0230
*           VADR=ADDR(CVTIHASU);    /* SU BIT PTR                    */
         L     @14,CVTPTR(,ABDPLPTR)                               0230
         LA    VADR,CVTIHASU(,@14)                                 0230
*           CALL ACCESRTN;          /* ACCESS IT                     */
         BAL   @14,ACCESRTN                                        0231
*           IF RCREG^=ZERO THEN     /* ACCESS ERROR                  */
         LTR   RCREG,RCREG                                         0232
         BZ    @RF00232                                            0232
*             DO;                                                  0233
*               BUFFER(1:LENGTH(RTCFMT))=RTCFMT;                   0234
         L     @14,ADPLBUF(,ABDPLPTR)                              0234
         MVC   BUFFER(120,@14),RTCFMT                              0234
*               ERRSW=ON;           /* INDICATE ACCESS ERROR         */
         OI    ERRSW,B'00100000'                                   0235
*             END;                  /* END ACCESS ERROR              */
*           ELSE                    /* FOUND SU BIT PTR              */
*             DO;                                                  0237
         B     @RC00232                                            0237
@RF00232 DS    0H                                                  0238
*               IF DATAWORD^=ZERO THEN/* SU SYSTEM                   */
         L     @14,DATAWORD(,DATAPTR)                              0238
         LTR   @14,@14                                             0238
         BZ    @RF00238                                            0238
*                 DO;                                              0239
*                   VADR=DATAWORD;  /* SU BITS                       */
         LR    VADR,@14                                            0240
*                   CALL ACCESRTN;  /* ACCESS BITS                   */
         BAL   @14,ACCESRTN                                        0241
*                   IF RCREG^=ZERO THEN/* ACCESS ERROR               */
         LTR   RCREG,RCREG                                         0242
         BZ    @RF00242                                            0242
*                     DO;                                          0243
*                       BUFFER(1:LENGTH(RTCFMT))=RTCFMT;           0244
         L     @14,ADPLBUF(,ABDPLPTR)                              0244
         MVC   BUFFER(120,@14),RTCFMT                              0244
*                       ERRSW=ON;   /* ERROR INDICATOR TO STOP     0245
*                                      PROCESSING                    */
         OI    ERRSW,B'00100000'                                   0245
*                     END;          /* END ACCESS ERROR              */
*                   ELSE            /* FOUND SU BIT STRING           */
*                     DO;                                          0247
         B     @RC00242                                            0247
@RF00242 DS    0H                                                  0248
*                       IF SU33BIT=ON THEN                         0248
         TM    SU33BIT(DATAPTR),B'01000000'                        0248
         BNO   @RF00248                                            0248
*                         SU33SAVE=ON;/* SU 33 ON SYSTEM             */
         OI    SU33SAVE,B'01000000'                                0249
*                       ELSE                                       0250
*                         ;         /* SU33 NOT ON SYSTEM            */
@RF00248 DS    0H                                                  0251
*                       IF SU17BIT=ON THEN                         0251
         TM    SU17BIT(DATAPTR),B'01000000'                        0251
         BNO   @RF00251                                            0251
*                         SU17SAVE=ON;/* SU 17 ON SYSTEM             */
         OI    SU17SAVE,B'10000000'                                0252
*                       ELSE                                       0253
*                         ;         /* SU17 NOT ON SYSTEM            */
@RF00251 DS    0H                                                  0254
*                     END;          /* END SU BIT STRING FOUND       */
*                 END;              /* END SU SYSTEM                 */
*               ELSE                                               0256
*                 ;                 /* PRE SU SYSTEM-NO SU BITS TO 0256
*                                      SET                           */
@RF00238 DS    0H                                                  0257
*             END;                  /* END COULD ACCESS SUBIT POINTER*/
*         END;                      /* END NOT A RELEASE 2 MVS SYSTEM*/
*       ELSE                                                       0259
*         ;                         /* IS A RELEASE 2 MVS SYSTEM - NO
*                                      SUS                           */
@RF00228 DS    0H                                                  0260
*       IF ERRSW=OFF THEN           /* CONTINUE IF FOUND SYSTEM OK   */
@RC00228 TM    ERRSW,B'00100000'                                   0260
         BNZ   @RF00260                                            0260
*         DO;                                                      0261
*           BUFFER(1:LENGTH(RTCTHDR))=RTCTHDR;/* TITLE LINE          */
         L     @14,ADPLBUF(,ABDPLPTR)                              0262
         MVC   BUFFER(54,@14),RTCTHDR                              0262
*           PACKAREA=RTCTPTR;       /* MOVE ADDR INTO CHAR AREA      */
         ST    RTCTPTR,PACKAREA                                    0263
*           GARBAGE='04'X;          /* GARBAGE BYTE SO ADDR UNPACKS  */
         MVI   GARBAGE,X'04'                                       0264
*           UNPK(ADDRESS,UNPACK);   /* MOVE INTO BUFFER              */
         UNPK  ADDRESS(9,@14),UNPACK(5)                            0265
*           TR(ADDRESS,TRANS);      /* MAKE PRINTABLE                */
         TR    ADDRESS(9,@14),TRANS                                0266
*           CALL PRINT;             /* PRINT TITLE                   */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0267
         BALR  @14,@15                                             0267
*           BUFFER(1:LENGTH(RTCTUS))=RTCTUS;/* UNDERSCORE            */
         L     @14,ADPLBUF(,ABDPLPTR)                              0268
         MVC   BUFFER(5,@14),RTCTUS                                0268
*           CALL PRINT;             /* PRINT IT                      */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0269
         BALR  @14,@15                                             0269
*           CALL PRINT;             /* BLANK                         */
*                                                                  0270
         L     @15,ADPLPRNT(,ABDPLPTR)                             0270
         BALR  @14,@15                                             0270
*           /*********************************************************/
*           /*                                                       */
*           /* SU 33 CHANGED THE SIZE AND STRUCTURE OF THE RTCT, SO  */
*           /* AN SU33 SYSTEM DUMP MUST BE FORMATTED DIFFERENTLY THAN*/
*           /* A SYSTEM WITHOUT SU33                                 */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0271
*           IF SU33SAVE=ON THEN     /* SU 33 IS ON DUMPED SYSTEM - 0271
*                                      RTCT CHANGED WITH THIS SU     */
*                                                                  0271
         TM    SU33SAVE,B'01000000'                                0271
         BNO   @RF00271                                            0271
*             /*******************************************************/
*             /*                                                     */
*             /* FIRST LOGICAL SECTION OF RTCT WITH SU33 ON THE      */
*             /* SYSTEM                                              */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0272
*             DO ARRAYCNT=1 TO RTSUMAX1 WHILE(ERRSW=OFF);/* FIRST  0272
*                                      SECTION OF OUTPUT             */
         LA    ARRAYCNT,1                                          0272
@DL00272 TM    ERRSW,B'00100000'                                   0272
         BNZ   @DC00272                                            0272
*               LINEPTR=RTCTSUNM(ARRAYCNT);/* PTR TO FORMAT PATTERN  */
         LR    @14,ARRAYCNT                                        0273
         SLA   @14,2                                               0273
         L     LINEPTR,RTCTSUNM-4(@14)                             0273
*               CALL CONVERT;       /* GENERATE OFFSET               */
         BAL   @14,CONVERT                                         0274
*               CALL FMTRTN;        /* FORMAT LINE OF OUTPUT         */
         BAL   @14,FMTRTN                                          0275
*             END;                  /* END FIRST SECTION LOOP        */
         AH    ARRAYCNT,@CH00062                                   0276
         CH    ARRAYCNT,@CH00074                                   0276
         BNH   @DL00272                                            0276
@DC00272 DS    0H                                                  0277
*           ELSE                    /* NOT AN SU33 SYSTEM DUMP       */
*                                                                  0277
*             /*******************************************************/
*             /*                                                     */
*             /* FIRST LOGICAL SECTION OF RTCT- SU33 NOT IN DUMP     */
*             /* SYSTEM                                              */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0277
*             DO ARRAYCNT=1 TO RT37MAX1 WHILE(ERRSW=OFF);/* FIRST  0277
*                                      SECTION                       */
         B     @RC00271                                            0277
@RF00271 LA    ARRAYCNT,1                                          0277
@DL00277 TM    ERRSW,B'00100000'                                   0277
         BNZ   @DC00277                                            0277
*               LINEPTR=RTCT37NM(ARRAYCNT);/* PTR TO FORMAT PATTERN  */
         LR    @14,ARRAYCNT                                        0278
         SLA   @14,2                                               0278
         L     LINEPTR,RTCT37NM-4(@14)                             0278
*               CALL CONVERT;       /* GENERATE OFFSET               */
         BAL   @14,CONVERT                                         0279
*               CALL FMTRTN;        /* FORMAT LINE OF OUTPUT         */
         BAL   @14,FMTRTN                                          0280
*             END;                  /* END FIRST SECTION LOOP        */
*                                                                  0281
         AH    ARRAYCNT,@CH00062                                   0281
         CH    ARRAYCNT,@CH00074                                   0281
         BNH   @DL00277                                            0281
@DC00277 DS    0H                                                  0282
*           /*********************************************************/
*           /*                                                       */
*           /* SECOND LOGICAL SECTION - SVC ENTRIES COMMON TO SU33   */
*           /* RTCT AND 3.7 VERSION OF THE RTCT                      */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0282
*           IF ERRSW=OFF THEN       /* FIRST SECTION FORMATTED OK    */
@RC00271 TM    ERRSW,B'00100000'                                   0282
         BNZ   @RF00282                                            0282
*             DO;                                                  0283
*               CALL PRINT;         /* BLANK TO SEPARATE SECTIONS    */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0284
         BALR  @14,@15                                             0284
*               BUFFER(21:(LENGTH(SVCENTRY)+20))=SVCENTRY;/* TITLE TO
*                                      SECTION 3                     */
         L     @14,ADPLBUF(,ABDPLPTR)                              0285
         MVC   BUFFER+20(13,@14),SVCENTRY                          0285
*               CALL PRINT;         /* PRINT IT                      */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0286
         BALR  @14,@15                                             0286
*               CALL PRINT;         /* BLANK                         */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0287
         BALR  @14,@15                                             0287
*               LINEPTR=RTCT37NM(ARRAYCNT);/* NEXT LINE PATTERN      */
         LR    @14,ARRAYCNT                                        0288
         SLA   @14,2                                               0288
         L     LINEPTR,RTCT37NM-4(@14)                             0288
*               DO LOOPCNTR=1 TO DEVICMAX WHILE(ERRSW=OFF);/* FORMAT
*                                      DUMP ENTRIES                  */
         LA    @14,1                                               0289
         ST    @14,LOOPCNTR                                        0289
@DL00289 TM    ERRSW,B'00100000'                                   0289
         BNZ   @DC00289                                            0289
*                 CALL CONVERT;     /* GEN OFFSET                    */
         BAL   @14,CONVERT                                         0290
*                 CALL FMTRTN;      /* FORMAT LINE                   */
         BAL   @14,FMTRTN                                          0291
*               END;                                               0292
         LA    @14,1                                               0292
         AL    @14,LOOPCNTR                                        0292
         ST    @14,LOOPCNTR                                        0292
         CH    @14,@CH00784                                        0292
         BNH   @DL00289                                            0292
@DC00289 DS    0H                                                  0293
*               CALL PRINT;         /* SECTION SEPARATOR             */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0293
         BALR  @14,@15                                             0293
*               IF SU33SAVE=OFF THEN/* SU33 NOT IN SYSTEM DUMP       */
         TM    SU33SAVE,B'01000000'                                0294
         BNZ   @RF00294                                            0294
*                 DO;                                              0295
*                                                                  0295
*                   /*************************************************/
*                   /*                                               */
*                   /* LAST LOGICAL SECTION FOR 3.7 VERSION OR SU17  */
*                   /* VERSION OF THE RTCT                           */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0296
*                   IF ERRSW=OFF THEN/* CONTINUE IF FORMATTED SVC  0296
*                                      ENTRIES OK                    */
         TM    ERRSW,B'00100000'                                   0296
         BNZ   @RF00296                                            0296
*                     DO;                                          0297
*                       DO ARRAYCNT=ARRAYCNT+1 TO RT37MAX2 WHILE(ERRSW=
*                             OFF); /* LAST SECTION                  */
         LA    @14,1                                               0298
         ALR   @14,ARRAYCNT                                        0298
         LR    ARRAYCNT,@14                                        0298
         B     @DE00298                                            0298
@DL00298 TM    ERRSW,B'00100000'                                   0298
         BNZ   @DC00298                                            0298
*                         LINEPTR=RTCT37NM(ARRAYCNT);/* FORMAT     0299
*                                      PATTERN ADR                   */
         LR    @14,ARRAYCNT                                        0299
         SLA   @14,2                                               0299
         L     LINEPTR,RTCT37NM-4(@14)                             0299
*                         CALL CONVERT;/* GEN OFFSET                 */
         BAL   @14,CONVERT                                         0300
*                         CALL FMTRTN;/* FORMAT                      */
         BAL   @14,FMTRTN                                          0301
*                       END;        /* END LAST SECTION              */
*                                                                  0302
         AH    ARRAYCNT,@CH00062                                   0302
@DE00298 CH    ARRAYCNT,@CH00845                                   0302
         BNH   @DL00298                                            0302
@DC00298 DS    0H                                                  0303
*                       /*********************************************/
*                       /*                                           */
*                       /* DECISION FOR SU17 LINE OR 3.7 LAST LINE   */
*                       /*                                           */
*                       /*********************************************/
*                                                                  0303
*                       IF ERRSW=OFF THEN/* LAST SECTION FORMATTED OK*/
         TM    ERRSW,B'00100000'                                   0303
         BNZ   @RF00303                                            0303
*                         DO;                                      0304
*                           IF SU17SAVE=ON THEN/* NEED SU17 LAST LINE*/
         TM    SU17SAVE,B'10000000'                                0305
         BNO   @RF00305                                            0305
*                             LINEPTR=RTCTSU17(1);/* SU17 FORMAT   0306
*                                      PATTERN                       */
         L     LINEPTR,RTCTSU17                                    0306
*                           ELSE                                   0307
*                             LINEPTR=RTCT37NM(ARRAYCNT);/* 3.7    0307
*                                      FORMAT PATTERN                */
         B     @RC00305                                            0307
@RF00305 LR    @14,ARRAYCNT                                        0307
         SLA   @14,2                                               0307
         L     LINEPTR,RTCT37NM-4(@14)                             0307
*                           CALL CONVERT;/* GENERATE OFFSET          */
@RC00305 BAL   @14,CONVERT                                         0308
*                           CALL FMTRTN;/* FORMAT                    */
         BAL   @14,FMTRTN                                          0309
*                         END;      /* END LAST SECTION FORMATTED OK */
*                       ELSE                                       0311
*                         ;         /* ERROR IN LAST SECTION         */
@RF00303 DS    0H                                                  0312
*                     END;          /* SVC ENTRIES SECTION FORMATTED
*                                      OK                            */
*                   ELSE                                           0313
*                     ;             /* ERROR FORMATTING SVC ENTRIES  */
@RF00296 DS    0H                                                  0314
*                 END;              /* END NOT AN SU33 SYSTEM DUMP   */
*               ELSE                /* SU33 DUMP SYSTEM - FORMAT REST
*                                      OF SU33 VERSION RTCT          */
*                 DO;                                              0315
*                                                                  0315
         B     @RC00294                                            0315
@RF00294 DS    0H                                                  0316
*                   /*************************************************/
*                   /*                                               */
*                   /* FORMAT THE REST OF SU33 VERSION RTCT          */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0316
*                   DO ARRAYCNT=ARRAYCNT+1 TO RTSUMAX2 WHILE(ERRSW=OFF)
*                         ;         /* 3RD                    SECTION*/
         LA    @14,1                                               0316
         ALR   @14,ARRAYCNT                                        0316
         LR    ARRAYCNT,@14                                        0316
         B     @DE00316                                            0316
@DL00316 TM    ERRSW,B'00100000'                                   0316
         BNZ   @DC00316                                            0316
*                     LINEPTR=RTCTSUNM(ARRAYCNT);/* FORMAT PATTERN 0317
*                                      ADR                           */
         LR    @14,ARRAYCNT                                        0317
         SLA   @14,2                                               0317
         L     LINEPTR,RTCTSUNM-4(@14)                             0317
*                     CALL CONVERT; /* GEN OFFSET                    */
         BAL   @14,CONVERT                                         0318
*                     CALL FMTRTN;  /* FORMAT                        */
         BAL   @14,FMTRTN                                          0319
*                   END;            /* END THIRD SECTION             */
*                                                                  0320
         AH    ARRAYCNT,@CH00062                                   0320
@DE00316 CH    ARRAYCNT,@CH00784                                   0320
         BNH   @DL00316                                            0320
@DC00316 DS    0H                                                  0321
*                   /*************************************************/
*                   /*                                               */
*                   /* NEXT LOGICAL SECTION- ADDRESS SPACE FLAGS     */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0321
*                   IF ERRSW=OFF THEN/* CONTINUE IF FORMATTED THIRD
*                                      SECTION OK                    */
         TM    ERRSW,B'00100000'                                   0321
         BNZ   @RF00321                                            0321
*                     DO;                                          0322
*                       CALL PRINT; /* SEPARATE SECTIONS             */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0323
         BALR  @14,@15                                             0323
*                       BUFFER(21:(LENGTH(DMPASFLG)+20))=DMPASFLG;/*
*                                      SECTION TITLE                 */
         L     @14,ADPLBUF(,ABDPLPTR)                              0324
         MVC   BUFFER+20(34,@14),DMPASFLG                          0324
*                       CALL PRINT; /* PRINT IT                      */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0325
         BALR  @14,@15                                             0325
*                       CALL PRINT; /* BLANK                         */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0326
         BALR  @14,@15                                             0326
*                       LINEPTR=RTCTSUNM(ARRAYCNT);/* NEXT LINE    0327
*                                      PATTERN                       */
         LR    @14,ARRAYCNT                                        0327
         SLA   @14,2                                               0327
         L     LINEPTR,RTCTSUNM-4(@14)                             0327
*                       DO LOOPCNTR=1 TO NUMFLAGS WHILE(ERRSW=OFF);/*
*                                      FORMAT DUMP ENTRIES           */
         LA    @14,1                                               0328
         ST    @14,LOOPCNTR                                        0328
@DL00328 TM    ERRSW,B'00100000'                                   0328
         BNZ   @DC00328                                            0328
*                         CALL CONVERT;/* GEN OFFSET                 */
         BAL   @14,CONVERT                                         0329
*                         CALL FMTRTN;/* FORMAT LINE                 */
         BAL   @14,FMTRTN                                          0330
*                       END;        /* END FORMAT DUMP ENTRIES LOOP  */
*                                                                  0331
         LA    @14,1                                               0331
         AL    @14,LOOPCNTR                                        0331
         ST    @14,LOOPCNTR                                        0331
         CH    @14,@CH00806                                        0331
         BNH   @DL00328                                            0331
@DC00328 DS    0H                                                  0332
*                       /*********************************************/
*                       /*                                           */
*                       /* LAST LINE OF SU33 VERSION RTCT            */
*                       /*                                           */
*                       /*********************************************/
*                                                                  0332
*                       IF ERRSW=OFF THEN/* CONTINUE IF ADDRESS SPACE
*                                      FLAGS FORMATTED OK            */
         TM    ERRSW,B'00100000'                                   0332
         BNZ   @RF00332                                            0332
*                         DO;                                      0333
*                           CALL PRINT;/* SEPARATE SECTIONS          */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0334
         BALR  @14,@15                                             0334
*                           ARRAYCNT=ARRAYCNT+1;/* NEXT FORMAT     0335
*                                      PATTERN                       */
         AH    ARRAYCNT,@CH00062                                   0335
*                           LINEPTR=RTCTSUNM(ARRAYCNT);/* NEXT LINE
*                                      PATTERN                       */
         LR    @14,ARRAYCNT                                        0336
         SLA   @14,2                                               0336
         L     LINEPTR,RTCTSUNM-4(@14)                             0336
*                           CALL CONVERT;/* GEN OFFSET               */
         BAL   @14,CONVERT                                         0337
*                           CALL FMTRTN;/* FORMAT LINE               */
         BAL   @14,FMTRTN                                          0338
*                         END;      /* END ADDRESS SPACE FLAGS     0339
*                                      FORMATTED OK                  */
*                       ELSE                                       0340
*                         ;         /* ERROR FORMATTING ADDRESS SPACE
*                                      FLAGS                         */
@RF00332 DS    0H                                                  0341
*                     END;          /* END SU33 THIRD SECTION OK     */
*                   ELSE                                           0342
*                     ;             /* ERRORS DURING SU33 SECTION 3  */
@RF00321 DS    0H                                                  0343
*                 END;              /* END SU33 SYSTEM DUMP          */
*             END;                  /* END SECTION 1 OK              */
*           ELSE                                                   0345
*             ;                     /* ERRORS IN SECTION 1           */
@RF00282 DS    0H                                                  0346
*         END;                      /* END NO PROBLEM FINDING SYSTEM */
*       ELSE                                                       0347
*         ;                         /* COULD NOT FIND SYSTEM         */
@RF00260 DS    0H                                                  0348
*     END;                          /* END COULD ACCESS RELEASE    0348
*                                      NUMBER                        */
@RC00260 DS    0H                                                  0349
*   CALL PRINT;                     /* MESSAGE OR BLANK              */
@RC00225 L     @15,ADPLPRNT(,ABDPLPTR)                             0349
         BALR  @14,@15                                             0349
*   LCALREGS=RTYREGS;               /* RESTORE RETRY REGS OF CALLER  */
         MVC   LCALREGS(64,ESTAPTR),RTYREGS(ESTAPTR)               0350
*   RETURN CODE(RCCODE);            /* END OF ENTRY POINT IEAFTRTC   */
         L     @13,4(,@13)                                         0351
         L     @00,@SIZDATD                                        0351
         LR    @01,@10                                             0351
         FREEMAIN R,LV=(0),A=(1)
         LR    @15,@09                                             0351
         L     @14,12(,@13)                                        0351
         LM    @00,@12,20(@13)                                     0351
         BR    @14                                                 0351
*                                                                  0352
*/********************************************************************/
*/*                                                                  */
*/*         THE FOLLOWING CODE HAS BEEN INCLUDED FROM SYSLIB MEMBER  */
*/*     IHAFTCDE INTO THE MODULE. THE CODE IS COMMON AMONG ALL THE   */
*/*     CONTROL BLOCK FORMAT MODULES FOR THE RTM FORMATTER. THE      */
*/*     INCLUDED CODE CONSISTS OF THE ACCESS, FORMAT, CONVERT,       */
*/*     AND ANALYZE ROUTINES USED BY ALL THE MODULES.                */
*/*         THE CODE HAS BEEN INCLUDED IN ORDER TO SIMPLIFY          */
*/*     MAINTENANCE BY HAVING THE CODE IN ONLY ONE PLACE INSTEAD     */
*/*     OF DUPLICATING IT IN EACH MODULE.                            */
*/********************************************************************/
*                                                                  0352
*                                                                  0352
*   /*****************************************************************/
*   /*                                                               */
*   /* WORK AREAS UNIQUE TO THE INCLUDED CODE FROM IHAFTCDE          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0352
*   DCL                                                            0352
*     BITSTR BIT(8) BASED(BYTEADDR);/* BYTE TO BE ANALYZED           */
*   DCL                                                            0353
*     BLANKS CHAR(120) INIT(' ');   /* USED TO BLANK OUT DIGIT FIELD
*                                      OR TO COMPARE WITH THE MESSAGE
*                                      ARRAYS FOR BLANK LINES        */
*   DCL                                                            0354
*     BYTELNTH FIXED(31) CONSTANT(8);/* NUM BITS IN A BYTE           */
*   DCL                                                            0355
*     CONVRT FIXED(31);             /* VALUE OF OFFSET               */
*   DCL                                                            0356
*     INDEX FIXED(31);              /* LOOP COUNTER FOR ANALYZE    0356
*                                      ROUTINE                       */
*   DCL                                                            0357
*     LNGTHEQU FIXED(31);           /* CALCULATE SUBSTRING ADR FOR 0357
*                                      PROPER MSG                    */
*   DCL                                                            0358
*     MSG CHAR(120) BASED(ADPLCOM1);/* ERROR MSG TO BE PUT OUT BY  0358
*                                      FORMAT ROUTINE ERROR          */
*   DCL                                                            0359
*     MSGARY CHAR(*) BASED(MSGADDR);/* MESSAGES PASSED TO BE OUTPUT  */
*   DCL                                                            0360
*     NEGBIT BIT(1);                /* FLAG TO INDICATE NEG OFFSET   */
*   DCL                                                            0361
*     NEGCHAR CHAR(1) CONSTANT('-');/* CONSTANT '-' TO BE PUT IN   0361
*                                      OFFSET                        */
*   DCL                                                            0362
*     PLUSCHAR CHAR(1) CONSTANT('+');/* CONSTANT '+' TO BE PUT IN  0362
*                                      OFFSET                        */
*   DCL                                                            0363
*     TESTBITS(8) BIT(8) INIT('80'X,'40'X,'20'X,'10'X,'08'X,'04'X,'02'X
*         ,'01'X);                  /* TO TELL WHICH BIT IS ON       */
*   DCL                                                            0364
*     TWODGT FIXED(31) CONSTANT(16);/* FIRST OF 2 HEX DIGITS         */
*   DCL                                                            0365
*     THREDGT FIXED(31) CONSTANT(256);/* FIRST OF 3 HEX DIGITS       */
*   DCL                                                            0366
*     FOURDGT FIXED(31) CONSTANT(4096);/* FIRST OF 4 HEX DIGITS      */
*CONVERT:                                                          0367
*   PROC OPTIONS(SAVE(14));                                        0367
*                                                                  0367
CONVERT  ST    @14,12(,@13)                                        0367
*/********************************************************************/
*/* FUNCTION -                                                     0368
*      ROUTINE TO DYNAMICALLY GENERATE THE OFFSETS TO BE PUT ALONGSIDE
*      THE CONTROL BLOCK LINE.  IT FIGURES THE OFFSET FROM THE     0368
*      BEGINNING OF THE CONTROL BLOCK, CONVERTS IT TO PRINTABLE HEX,
*      PLACES IT INTO A BUFFER AREA AND PUTS THE ADDRESS OF THIS   0368
*      BUFFER AREA INTO THE PARAMETER LIST TO BE PICKED UP IN THE  0368
*      FORMAT PATTERNS BY THE FORMAT SERVICE ROUTINE.              0368
*                                                                  0368
*   INPUT -                                                        0368
*      SAVEPTR MUST HAVE THE ADDRESS OF THE BEGINNING OF THE CONTROL
*      BLOCK, REGISTER 1 POINTS TO THE PARMLIST WHICH CONTAINS THE 0368
*      CURRENT CONTROL BLOCK ADDRESS IN ADPLFMT2.                  0368
*                                                                  0368
*   CALLS -                                                        0368
*      MAKES NO OUTSIDE CALLS                                      0368
*                                                                  0368
*   CALLED BY -                                                    0368
*      BYTEMODE, EEDBITS, ENTRYRT1, IEAFTEED, IEAFTESA, IEAFTFRR,  0368
*      IEAFTIHS, IEAFTRTC, IEAFTRT2, IEAFTSCB, IEAFTSDW, RT1BITS,  0368
*      RT2BITS, RT2SUM, AND SPECIAL                                0368
*                                                                  0368
*   RETURNS TO -                                                   0368
*      CALLER.                                                     0368
*                                                                  0368
*   THIS PROCEDURE HAS BEEN INCLUDED FROM SYSLIB(IHAFTCDE) ------  0368
*                                                                    */
*/********************************************************************/
*                                                                  0368
*   IF SAVEPTR>ADPLFMT2 THEN        /* THIS WILL OCCUR FOR A PREFIX
*                                      WITH A NEGATIVE OFFSET        */
         L     @14,SAVEPTR                                         0368
         L     @08,ADPLFMT2(,ABDPLPTR)                             0368
         CR    @14,@08                                             0368
         BNH   @RF00368                                            0368
*     DO;                                                          0369
*       NEGBIT=ON;                  /* INDICATE NEGATIVE OFFSET      */
         OI    NEGBIT,B'10000000'                                  0370
*       CONVRT=SAVEPTR-ADPLFMT2;    /* NEGATIVE OFFSET VALUE         */
         L     @04,ADPLFMT2(,ABDPLPTR)                             0371
         SLR   @14,@04                                             0371
         LR    CONVRT,@14                                          0371
*     END;                          /* END NEGATIVE OFFSET           */
*   ELSE                            /* POSITIVE OR ZERO OFFSET       */
*     DO;                                                          0373
         B     @RC00368                                            0373
@RF00368 DS    0H                                                  0374
*       NEGBIT=OFF;                 /* INDICATE POS VALUE            */
         NI    NEGBIT,B'01111111'                                  0374
*       CONVRT=ADPLFMT2-SAVEPTR;    /* RELATIVE OFFSET IN CONTROL  0375
*                                      BLOCK                         */
         L     CONVRT,ADPLFMT2(,ABDPLPTR)                          0375
         SL    CONVRT,SAVEPTR                                      0375
*     END;                          /* END POS VALUE                 */
*   DIGIT=BLANKS(1:5);              /* BLANK OUT DIGITS              */
@RC00368 MVC   DIGIT(5),BLANKS                                     0377
*   PACKAREA=CONVRT;                /* PLACE OFFSET INTO CHAR AREA 0378
*                                      FOR THE UNPACK                */
         ST    CONVRT,PACKAREA                                     0378
*   GARBAGE='04'X;                  /* GARBAGE BYTE SO OFFSET WILL 0379
*                                      UNPACK OK                     */
*                                                                  0379
         MVI   GARBAGE,X'04'                                       0379
*   /*****************************************************************/
*   /*                                                               */
*   /* FOR AN ODD NUMBER OF DIGITS THE OUTPUT SHOULD LOOK LIKE +C OR */
*   /* +13C. IF THE VALUE WAS UNPACKED DIRECTLY INTO DIGITS THE      */
*   /* OUTPUT WOULD HAVE UNWANTED LEADING ZEROS SUCH AS +0C. TO      */
*   /* ELIMINATE THIS(ONLY FOR AN ODD NUMBER OF DIGITS) UNPACK ODD   */
*   /* NUMBER OF DIGITS INTO CONVERTD WHERE THE LEADING ZERO WILL BE */
*   /* OVERWRITTEN BY THE '+' OR '-' SIGN                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0380
*   IF CONVRT<TWODGT THEN           /* ONLY 1 DIGIT TO OFFSET        */
         CH    CONVRT,@CH00806                                     0380
         BNL   @RF00380                                            0380
*     UNPK(CONVERTD(1:3),UNPACK(4:5));/* UNPACK ONLY 1 DIGIT AND   0381
*                                      DUMMY                         */
         UNPK  CONVERTD(3),UNPACK+3(2)                             0381
*   ELSE                                                           0382
*     IF CONVRT<THREDGT THEN        /* 2 DIGITS TO OFFSET            */
         B     @RC00380                                            0382
@RF00380 CH    CONVRT,@CH00679                                     0382
         BNL   @RF00382                                            0382
*       UNPK(DIGIT(1:3),UNPACK(4:5));/* UNPACK LAST 2 DIGITS & DUMMY */
         UNPK  DIGIT(3),UNPACK+3(2)                                0383
*     ELSE                                                         0384
*       IF CONVRT<FOURDGT THEN      /* 3 DIGITS TO OFFSET            */
         B     @RC00382                                            0384
@RF00382 CH    CONVRT,@CH02031                                     0384
         BNL   @RF00384                                            0384
*         UNPK(CONVERTD(1:5),UNPACK(3:5));/* UNPACK LAST 3 DIGITS &
*                                      DUMMY                         */
         UNPK  CONVERTD(5),UNPACK+2(3)                             0385
*       ELSE                        /* 4 DIGITS (MAX)                */
*         UNPK(DIGIT(1:5),UNPACK(3:5));/* LAST 4 DIGITS & DUMMY BYTE */
         B     @RC00384                                            0386
@RF00384 UNPK  DIGIT(5),UNPACK+2(3)                                0386
*   TR(DIGIT,TRANS);                /* MAKE PRINTABLE                */
@RC00384 DS    0H                                                  0387
@RC00382 DS    0H                                                  0387
@RC00380 TR    DIGIT(5),TRANS                                      0387
*   IF NEGBIT=ON THEN               /* WAS A NEGATIVE OFFSET         */
         TM    NEGBIT,B'10000000'                                  0388
         BNO   @RF00388                                            0388
*     PLUS=NEGCHAR;                 /* MINUS SIGN                    */
         MVI   PLUS,C'-'                                           0389
*   ELSE                            /* POSITIVE OFFSET               */
*     PLUS=PLUSCHAR;                /* MOVE IN PLUS SIGN             */
         B     @RC00388                                            0390
@RF00388 MVI   PLUS,C'+'                                           0390
*   ADPLFMT1=ADDR(CONVERTD);        /* SET UP FOR FORMAT             */
@RC00388 LA    @14,CONVERTD                                        0391
         ST    @14,ADPLFMT1(,ABDPLPTR)                             0391
*   END CONVERT;                                                   0392
@EL00002 DS    0H                                                  0392
@EF00002 DS    0H                                                  0392
@ER00002 L     @14,12(,@13)                                        0392
         BR    @14                                                 0392
*FMTRTN:                                                           0393
*   PROC OPTIONS(SAVE(14));                                        0393
*                                                                  0393
FMTRTN   ST    @14,@SA00003                                        0393
*/****************************************************************** */
*/* FUNCTION                                                       0394
*       ROUTINE TO SET UP CALLING OF THE FORMAT SERVICE ROUTINE PASSED
*     IN THE PARMLIST AND CHECKS RETURN CODE.  IF A RETURN CODE IS BAD
*     IT TAKES THE MESSAGE WHOSE ADDRESS IS IN ADPLCOM1. AND PUTS IT
*     IN THE BUFFER AND PRINTS IT. IT SETS THE ERRSW TO INDICATE BAD
*     RETURN CODE AND RETURNS. IF THE RETURN CODE WAS GOOD, IT PRINTS
*     THE FORMATTED LINE.                                          0394
*                                                                  0394
*   CALLS-                                                         0394
*       CALLS FORMAT AND PRINT                                     0394
*                                                                  0394
*   INPUT -                                                        0394
*     LINEPTR(REGISTER 0) HAS THE ADDRESS OF THE FORMAT PATTERN TO BE
*    PASSED TO THE FORMAT SERVICE ROUTINE. ADPLFMT2 CONTAINS THE CURREN
*    ADDRESS OF THE CONTROL BLOCK TO BE FORMATTED AND ,IN MOST CASES,
*    ADPLFMT1 CONTAINS THE ADDRESS OF THE FIELD 'CONVERTD' WHICH IS
*    THE EBCDIC REPRESENTATION OF THE OFFSET TO BE PLACED ALONG SIDE
*    THE OUTPUT LINE.                                              0394
*                                                                  0394
*   CALLED BY -                                                    0394
*     IEAFTEED,IEAFTFRR,IEAFTIHS,IEAFTRTC,IEAFTRT2,IEAFTSCB,       0394
*     IEAFTSDW, RT2SUM,AND SPECIAL                                 0394
*                                                                  0394
*   RETURNS CONTROL TO -                                           0394
*     CALLER WITH RETURN CODE RECIEVED FROM FORMAT                 0394
*     SERVICE ROUTINE                                              0394
*                                                                  0394
*   THIS PROCEDURE HAS BEEN INCLUDED FROM SYSLIB(IHAFTCDE) ------  0394
*                                                                    */
*/****************************************************************** */
*                                                                  0394
*   IF ADPLSNPR=OFF THEN            /* IF SNAP IS THE CALLER, AN   0394
*                                      ACCESS ERROR CAN BE EXPECTED  */
         TM    ADPLSNPR(ABDPLPTR),B'10000000'                      0394
         BNZ   @RF00394                                            0394
*     DO;                                                          0395
*       RTYADR=ADDR(FMTRTY);        /* WHERE TO RETRY                */
         LA    @14,FMTRTY                                          0396
         ST    @14,RTYADR(,ESTAPTR)                                0396
*       ERREXP=ON;                  /* INDICATE AN ERROR IS EXPECTED */
         OI    ERREXP(ESTAPTR),B'10000000'                         0397
*     END;                          /* END SNAP IS THE CALLER        */
*   ELSE                                                           0399
*     ;                             /* SNAP WAS NOT INVOKER          */
@RF00394 DS    0H                                                  0400
*   CALL FORMAT;                    /* FORMAT ROUTINE PASSED BY    0400
*                                      CALLER                        */
         L     @15,ADPLFRMT(,ABDPLPTR)                             0400
         BALR  @14,@15                                             0400
*   ERREXP=OFF;                     /* ERROR IS NO LONGER EXPECTED   */
         NI    ERREXP(ESTAPTR),B'01111111'                         0401
*   IF RCREG^=ZERO THEN                                            0402
         LTR   RCREG,RCREG                                         0402
         BZ    @RF00402                                            0402
*     DO;                           /* FORMAT ROUTINE ERROR          */
*FMTRTY:                            /* RETRY POINT FROM ERROR        */
*       ERRSW=ON;                   /* SET ERROR INDICATOR           */
FMTRTY   OI    ERRSW,B'00100000'                                   0404
*       CALL PRINT;                 /* SPACE A LINE                  */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0405
         BALR  @14,@15                                             0405
*       BUFFER=MSG;                 /* ERROR MSG PASSED BY CALLER  0406
*                                      WHOSE ADDR IS PLACED IN     0406
*                                      ADPLCOM1                      */
         L     @14,ADPLBUF(,ABDPLPTR)                              0406
         L     @04,ADPLCOM1(,ABDPLPTR)                             0406
         MVC   BUFFER(120,@14),MSG(@04)                            0406
*       RCREG=4;                    /* INDICATE BAD RETURN CODE FROM
*                                      FORMATTER                     */
         LA    RCREG,4                                             0407
*     END;                          /* END FORMAT ROUTINE ERROR      */
*   ELSE                                                           0409
*     ;                             /* FORMATTED LINE IS IN BUFFER   */
@RF00402 DS    0H                                                  0410
*   RCCODE=RCREG;                   /* SAVE RETURN CODE FROM FORMAT
*                                      SERVICE ROUTINE               */
         LR    RCCODE,RCREG                                        0410
*   CALL PRINT;                     /* PRINT THE ERROR MSG OR      0411
*                                      FORMATTED LINE                */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0411
         BALR  @14,@15                                             0411
*   RETURN CODE(RCCODE);                                           0412
         LR    @15,RCCODE                                          0412
@EL00003 DS    0H                                                  0412
@EF00003 DS    0H                                                  0412
@ER00003 L     @14,@SA00003                                        0412
         BR    @14                                                 0412
*   END FMTRTN;                                                    0413
*ANALYZE:                                                          0414
*   PROC OPTIONS(SAVE(14));                                        0414
*                                                                  0414
ANALYZE  ST    @14,@SA00004                                        0414
*/****************************************************************** */
*/* FUNCTION                                                       0415
*     ROUTINE TO ANALYZE THE BITS IN THE BYTE PASSED AND PRINT OUT 0415
*     THE MESSAGE THAT CORRESPONDS TO THE BITS THAT ARE ON. IF A BLANK
*     LINE IS PASSED IN THE MESSAGE ARRAY (INDICATING A RESERVED BIT)
*     NO OUTPUT WILL CORRESPOND TO THAT BIT.                       0415
*                                                                  0415
*   INPUT-                                                         0415
*     AN ARRAY (SUMMARY) POINTED TO BY THE PARMLIST FIELD          0415
*     ADPLCOM2 WHICH CONTAINS THE ADDRESS OF THE BYTE TO BE        0415
*     ANALYZED, THE ADDRESS OF THE ARRAY OF CORRESPONDING          0415
*     MESSAGES, THE COLUMN NUMBER THE MESSAGE IS TO BEGIN IN,      0415
*     AND THE LENGTH OF THE MESSAGE ARRAY PASSED.                  0415
*                                                                  0415
*   NOTE- COLNUM + MSGLNGTH MUST BE LESS THAN OR EQUAL TO 120 BYTES
*         WHICH IS THE OUTPUT BUFFER LENGTH.                       0415
*                                                                  0415
*                                                                  0415
*   CALLS-                                                         0415
*       CALLS PRINT                                                0415
*                                                                  0415
*   CALLED BY -                                                    0415
*       BYTEMODE,EEDBITS,IEAFTESA,IEAFTSCB,RT2BITS                 0415
*                                                                  0415
*   RETURNS CONTROL TO -                                           0415
*       CALLER WITHOUT SETTING A RETURN CODE                       0415
*                                                                  0415
*   THIS PROCEDURE HAS BEEN INCLUDED FROM SYSLIB(IHAFTCDE)-------  0415
*                                                                    */
*/****************************************************************** */
*                                                                  0415
*   DO INDEX=1 TO BYTELNTH;         /* LOOP TO FIND WHICH BITS ARE ON*/
         LA    INDEX,1                                             0415
@DL00415 DS    0H                                                  0416
*     LNGTHEQU=((INDEX-1)*(MSGLNGTH)+1);/* OFFSET INTO MSGARY OF   0416
*                                      CORRESPONDING MESSAGE         */
         L     @14,MSGLNGTH                                        0416
         LR    @03,INDEX                                           0416
         BCTR  @03,0                                               0416
         MR    @02,@14                                             0416
         AH    @03,@CH00062                                        0416
         LR    LNGTHEQU,@03                                        0416
*     IF(BITSTR&TESTBITS(INDEX))^=ZEROBYTE&/* FOUND A BIT ON         */
*         MSGARY(LNGTHEQU:MSGLNGTH+LNGTHEQU-1)^=BLANKS(1:MSGLNGTH) THEN
         L     @04,BYTEADDR                                        0417
         SLR   @03,@03                                             0417
         IC    @03,BITSTR(,@04)                                    0417
         SLR   @04,@04                                             0417
         IC    @04,TESTBITS-1(INDEX)                               0417
         NR    @03,@04                                             0417
         SLR   @04,@04                                             0417
         IC    @04,ZEROBYTE                                        0417
         CR    @03,@04                                             0417
         BE    @RF00417                                            0417
         L     @04,MSGADDR                                         0417
         LR    @03,@14                                             0417
         BCTR  @03,0                                               0417
         LR    @02,@04                                             0417
         ALR   @02,LNGTHEQU                                        0417
         BCTR  @02,0                                               0417
         EX    @03,@SC02066                                        0417
         BE    @RF00417                                            0417
*       DO;                         /* CORRESPONDING MESSAGE WAS NOT
*                                      BLANK(RESERVED)               */
*         BUFFER(COLNUM:(MSGLNGTH+COLNUM-1))=MSGARY(LNGTHEQU:LNGTHEQU+
*             MSGLNGTH-1);          /* PLACE MSG IN BUFFER           */
         L     @03,COLNUM                                          0419
         L     @02,ADPLBUF(,ABDPLPTR)                              0419
         ALR   @02,@03                                             0419
         BCTR  @02,0                                               0419
         ALR   @14,@03                                             0419
         SLR   @14,@03                                             0419
         BCTR  @14,0                                               0419
         ALR   @04,LNGTHEQU                                        0419
         BCTR  @04,0                                               0419
         EX    @14,@SM02068                                        0419
*         CALL PRINT;               /* PRINT IT                      */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0420
         BALR  @14,@15                                             0420
*       END;                        /* END FOUND THE MESSAGE         */
*     ELSE                                                         0422
*       ;                           /* EITHER BIT NOT ON OR RESERVED
*                                      BIT-NO MESSAGE                */
@RF00417 DS    0H                                                  0423
*   END;                            /* END SEARCH LOOP               */
         AH    INDEX,@CH00062                                      0423
         CH    INDEX,@CH00060                                      0423
         BNH   @DL00415                                            0423
*   END ANALYZE;                                                   0424
@EL00004 DS    0H                                                  0424
@EF00004 DS    0H                                                  0424
@ER00004 L     @14,@SA00004                                        0424
         BR    @14                                                 0424
*ACCESRTN:                                                         0425
*   PROC OPTIONS(SAVE(14));                                        0425
*                                                                  0425
ACCESRTN ST    @14,@SA00005                                        0425
*/********************************************************************/
*/* FUNCTION-                                                      0426
*       ROUTINE WHICH CALLS THE ACCESS SERVICE ROUTINE AND MOVES THE
*     VALUE RETURNED IN R0 INTO DATAPTR.                           0426
*                                                                  0426
*                                                                  0426
*   INPUT -                                                        0426
*         VADR(REGISTER 0) CONTAINS THE VIRTUAL ADDRESS OF THE FIELD
*         TO BE ACCESSED.                                          0426
*                                                                  0426
*    CALLS-                                                        0426
*         ACCESS SERVICE ROUTINE PASSED IN PARMLIST                0426
*                                                                  0426
*    CALLED BY -                                                   0426
*         EEDBITS, IEAFTEED, IEAFTFRR, IEAFTRTC, IEAFTRT2,         0426
*         IEAFTSCB, RT1BITS, AND RT2BITS                           0426
*                                                                  0426
*    RETURNS TO -                                                  0426
*         CALLER WITH THE RETURN CODE SET BY THE ACCESS            0426
*         SERVICE ROUTINE.                                         0426
*                                                                  0426
*   THIS PROCEDURE HAS BEEN INCLUDED FROM SYSLIB(IHAFTCDE) ------  0426
*                                                                    */
*/********************************************************************/
*                                                                  0426
*   IF ADPLSNPR=OFF THEN            /* SNAP WAS INVOKER              */
         TM    ADPLSNPR(ABDPLPTR),B'10000000'                      0426
         BNZ   @RF00426                                            0426
*     DO;                                                          0427
*       RTYADR=ADDR(RETRY);         /* RETRY ADDR FOR ESTAE IN THE 0428
*                                      CASE OF EXPECTED ERRORS       */
         LA    @14,RETRY                                           0428
         ST    @14,RTYADR(,ESTAPTR)                                0428
*       DATAPTR=VADR;               /* USED TO BASE THE STORAGE ON   */
         LR    DATAPTR,VADR                                        0429
*       RCREG=ZERO;                 /* SUCCESS UNLESS AN ABEND OCCURS
*                                      DURING THE MOVE INTO A BUFFER */
         SLR   RCREG,RCREG                                         0430
*       ERREXP=ON;                  /* AN ERROR IS EXPECTED          */
         OI    ERREXP(ESTAPTR),B'10000000'                         0431
*       VERIFY=DATADWRD;            /* MOVE A DOUBLE WORD INTO     0432
*                                      INTERNAL BUFFER               */
*                                                                  0432
         MVC   VERIFY(8),DATADWRD(DATAPTR)                         0432
*       /*************************************************************/
*       /*                                                           */
*       /* THIS MOVE WILL CAUSE AN ABEND IF THE DUMP DOES NOT CONTAIN*/
*       /* THE AREA REFERENCED OR IF THE AREA IS PROTECTED. IF AN    */
*       /* ABEND OCCURS, THE ESTAE WILL GET CONTROL AND RETRY AT THE */
*       /* POINT WHICH SETS A BAD RETURN CODE AND RETURNS TO THE     */
*       /* CALLER. THIS THEN SIMULATES THE PRINT DUMP ACCESS ROUTINE.*/
*       /* IF THE AREA ASKED FOR IS IN THE DUMP, A DOUBLE WORD IS    */
*       /* MOVED INTO AN INTERNAL BUFFER TO PREVENT AN UNEXPECTED    */
*       /* ERROR WHEN REFERENCING THE AREA AGAIN                     */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0433
*       ERREXP=OFF;                 /* AN ERROR IS NO LONGER EXPECTED*/
         NI    ERREXP(ESTAPTR),B'01111111'                         0433
*       DATAPTR=ADDR(VERIFY);       /* REBASE DATA OFF INTERNAL    0434
*                                      BUFFER                        */
         LA    DATAPTR,VERIFY                                      0434
*     END;                          /* END SNAP WAS THE INVOKER      */
*   ELSE                            /* CALLER HAS OWN ACCESS ROUTINE
*                                      LIKE PRINT DUMP               */
*     DO;                                                          0436
         B     @RC00426                                            0436
@RF00426 DS    0H                                                  0437
*       CALL ACCESS;                /* ACCESS SERVICE ROUTINE PASSED
*                                      BY CALLER                     */
         L     @15,ADPLMEMA(,ABDPLPTR)                             0437
         BALR  @14,@15                                             0437
*       IF RCREG=ZERO THEN                                         0438
         LTR   RCREG,RCREG                                         0438
         BNZ   @RF00438                                            0438
*         DATAPTR=VADR;             /* SAVE PTR RETURNED BY ACCESS 0439
*                                      SERVICE ROUTINE               */
         LR    DATAPTR,VADR                                        0439
*       ELSE                        /* BAD RETURN CODE               */
*RETRY:                             /* RETRY ADDR FOR THE ESTAE      */
*         RCREG=4;                  /* SET A BAD RETURN CODE         */
         B     @RC00438                                            0440
@RF00438 DS    0H                                                  0440
RETRY    LA    RCREG,4                                             0440
*     END;                          /* END CALLER WAS NOT SNAP       */
@RC00438 DS    0H                                                  0442
*   RCCODE=RCREG;                   /* SAVE RETURN CODE FROM ACCESS
*                                      SERVICE RTN                   */
@RC00426 LR    RCCODE,RCREG                                        0442
*   RETURN CODE(RCCODE);                                           0443
         LR    @15,RCCODE                                          0443
@EL00005 DS    0H                                                  0443
@EF00005 DS    0H                                                  0443
@ER00005 L     @14,@SA00005                                        0443
         BR    @14                                                 0443
*   END ACCESRTN;                                                  0444
*   DCL                                                            0445
*     SCBPATCH CHAR(200) INIT(                                     0445
*         'PATCH AREA FOR IEAFTSCB IT IS 200 BYTES LONG');         0445
*   END IEAFTSCB                                                   0446
*                                                                  0446
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IHAABDPL)                                       */
*/*%INCLUDE SYSLIB  (IHARTCT )                                       */
*/*%INCLUDE SYSLIB  (IHASCB  )                                       */
*/*%INCLUDE SYSLIB  (IHASUBIT)                                       */
*/*%INCLUDE SYSLIB  (IHAFTCDE)                                       */
*                                                                  0446
*       ;                                                          0446
@DATA    DS    0H
@CH00062 DC    H'1'
@CH00074 DC    H'2'
@CH00845 DC    H'7'
@CH00784 DC    H'10'
@CH00806 DC    H'16'
@CH00679 DC    H'256'
@CH02031 DC    H'4096'
@SC02066 CLC   MSGARY(0,@02),BLANKS
@SM02068 MVC   BUFFER(0,@02),MSGARY(@04)
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@SA00003 DS    1F
@SA00005 DS    1F
@SA00004 DS    1F
IEAFTSCB CSECT
         DS    0F
@CF00060 DC    F'8'
@CH00060 EQU   @CF00060+2
@CF00071 DC    F'24'
@CF01294 DC    F'29'
@CF02061 DC    F'-4'
@DATD    DSECT
         DS    0D
SCBPTR   DS    A
LOOPCNTR DS    F
SAVEPTR  DS    A
BITS     DS    BL1
         ORG   BITS
SU17SAVE DS    BL1
SU33SAVE EQU   BITS+0
ERRSW    EQU   BITS+0
HDRBIT   EQU   BITS+0
@NM00573 EQU   BITS+0
         ORG   BITS+1
CONVERTD DS    CL6
         ORG   CONVERTD
PLUS     DS    CL1
DIGIT    DS    CL5
         ORG   CONVERTD+6
         DS    CL1
SUMMARY  DS    CL16
         ORG   SUMMARY
BYTEADDR DS    AL4
MSGADDR  DS    AL4
COLNUM   DS    FL4
MSGLNGTH DS    FL4
         ORG   SUMMARY+16
         DS    CL4
UNPACK   DS    CL5
         ORG   UNPACK
PACKAREA DS    CL4
GARBAGE  DS    CL1
         ORG   UNPACK+5
         DS    CL3
VERIFY   DS    CL8
NEGBIT   DS    BL1
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IEAFTSCB CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
ZEROBYTE DC    XL1'00'
RTCT37L1 DS    CL29
         ORG   RTCT37L1
@NM00025 DC    CL4'NAME'
@NM00026 DC    CL8'DMPPARMS'
@NM00027 DC    CL8'OVERIDES'
@NM00028 DC    CL9'SVC/ABDMP'
         ORG   RTCT37L1+29
         DS    CL2
RTCT37F1 DS    CL28
         ORG   RTCT37F1
@NM00029 DS    CL4
         ORG   @NM00029
@NM00030 DC    X'01'
@NM00031 DC    X'40'
@NM00032 DC    AL1(0)
@NM00033 DC    AL1(0)
         ORG   RTCT37F1+4
@NM00034 DS    CL8
         ORG   @NM00034
@NM00035 DC    X'27'
@NM00036 DC    X'33'
@NM00037 DC    AL1(8)
@NM00038 DC    AL1(16)
@NM00039 DC    AL4(RTCT37L1)
         ORG   RTCT37F1+12
@NM00040 DS    CL4
         ORG   @NM00040
@NM00041 DC    X'05'
@NM00042 DC    X'73'
@NM00043 DC    AL1(25)
@NM00044 DC    AL1(34)
         ORG   RTCT37F1+16
@NM00045 DS    CL4
         ORG   @NM00045
@NM00046 DC    X'05'
@NM00047 DC    X'73'
@NM00048 DC    AL1(43)
@NM00049 DC    AL1(52)
         ORG   RTCT37F1+20
@NM00050 DS    CL4
         ORG   @NM00050
@NM00051 DC    X'05'
@NM00052 DC    X'83'
@NM00053 DC    AL1(61)
@NM00054 DC    AL1(71)
         ORG   RTCT37F1+24
@NM00055 DS    CL4
         ORG   @NM00055
@NM00056 DC    F'0'
         ORG   RTCT37F1+28
RTCT37L2 DS    CL40
         ORG   RTCT37L2
@NM00057 DC    CL7'SVCFLGS'
@NM00058 DC    CL8'SDMPASID'
@NM00059 DC    CL7'MEMTECB'
@NM00060 DC    CL5'ASCBP'
@NM00061 DC    CL6'RECECB'
@NM00062 DC    CL7'LOGRECB'
         ORG   RTCT37L2+40
RTCT37F2 DS    CL36
         ORG   RTCT37F2
@NM00063 DS    CL4
         ORG   @NM00063
@NM00064 DC    X'01'
@NM00065 DC    X'40'
@NM00066 DC    AL1(0)
@NM00067 DC    AL1(0)
         ORG   RTCT37F2+4
@NM00068 DS    CL8
         ORG   @NM00068
@NM00069 DC    X'07'
@NM00070 DC    X'61'
@NM00071 DC    AL1(8)
@NM00072 DC    AL1(16)
@NM00073 DC    AL4(RTCT37L2)
         ORG   RTCT37F2+12
@NM00074 DS    CL4
         ORG   @NM00074
@NM00075 DC    X'05'
@NM00076 DC    X'71'
@NM00077 DC    AL1(25)
@NM00078 DC    AL1(34)
         ORG   RTCT37F2+16
@NM00079 DS    CL4
         ORG   @NM00079
@NM00080 DC    X'05'
@NM00081 DC    X'63'
@NM00082 DC    AL1(43)
@NM00083 DC    AL1(52)
         ORG   RTCT37F2+20
@NM00084 DS    CL4
         ORG   @NM00084
@NM00085 DC    X'05'
@NM00086 DC    X'43'
@NM00087 DC    AL1(61)
@NM00088 DC    AL1(71)
         ORG   RTCT37F2+24
@NM00089 DS    CL4
         ORG   @NM00089
@NM00090 DC    X'05'
@NM00091 DC    X'53'
@NM00092 DC    AL1(80)
@NM00093 DC    AL1(87)
         ORG   RTCT37F2+28
@NM00094 DS    CL4
         ORG   @NM00094
@NM00095 DC    X'05'
@NM00096 DC    X'63'
@NM00097 DC    AL1(96)
@NM00098 DC    AL1(104)
         ORG   RTCT37F2+32
@NM00099 DS    CL4
         ORG   @NM00099
@NM00100 DC    F'0'
         ORG   RTCT37F2+36
RTCTCL1  DS    CL23
         ORG   RTCTCL1
@NM00101 DC    CL6'DSNAME'
@NM00102 DC    CL5'FLAGS'
@NM00103 DC    CL6'DEBCBP'
@NM00104 DC    CL6'DEVICE'
         ORG   RTCTCL1+23
         DS    CL1
RTCTCF1  DS    CL28
         ORG   RTCTCF1
@NM00105 DS    CL4
         ORG   @NM00105
@NM00106 DC    X'01'
@NM00107 DC    X'40'
@NM00108 DC    AL1(0)
@NM00109 DC    AL1(0)
         ORG   RTCTCF1+4
@NM00110 DS    CL8
         ORG   @NM00110
@NM00111 DC    X'27'
@NM00112 DC    X'52'
@NM00113 DC    AL1(8)
@NM00114 DC    AL1(15)
@NM00115 DC    AL4(RTCTCL1)
         ORG   RTCTCF1+12
@NM00116 DS    CL4
         ORG   @NM00116
@NM00117 DC    X'05'
@NM00118 DC    X'40'
@NM00119 DC    AL1(20)
@NM00120 DC    AL1(26)
         ORG   RTCTCF1+16
@NM00121 DS    CL4
         ORG   @NM00121
@NM00122 DC    X'05'
@NM00123 DC    X'53'
@NM00124 DC    AL1(29)
@NM00125 DC    AL1(36)
         ORG   RTCTCF1+20
@NM00126 DS    CL4
         ORG   @NM00126
@NM00127 DC    X'05'
@NM00128 DC    X'53'
@NM00129 DC    AL1(45)
@NM00130 DC    AL1(52)
         ORG   RTCTCF1+24
@NM00131 DS    CL4
         ORG   @NM00131
@NM00132 DC    F'0'
         ORG   RTCTCF1+28
RTCTCL2  DS    CL26
         ORG   RTCTCL2
@NM00133 DC    CL7'SDPARML'
@NM00134 DC    CL6'FORMAT'
@NM00135 DC    CL7'MEMLOCK'
@NM00136 DC    CL6'MEMSRB'
         ORG   RTCTCL2+26
         DS    CL2
RTCTCF2  DS    CL28
         ORG   RTCTCF2
@NM00137 DS    CL4
         ORG   @NM00137
@NM00138 DC    X'01'
@NM00139 DC    X'40'
@NM00140 DC    AL1(0)
@NM00141 DC    AL1(0)
         ORG   RTCTCF2+4
@NM00142 DS    CL8
         ORG   @NM00142
@NM00143 DC    X'07'
@NM00144 DC    X'63'
@NM00145 DC    AL1(8)
@NM00146 DC    AL1(17)
@NM00147 DC    AL4(RTCTCL2)
         ORG   RTCTCF2+12
@NM00148 DS    CL4
         ORG   @NM00148
@NM00149 DC    X'05'
@NM00150 DC    X'53'
@NM00151 DC    AL1(26)
@NM00152 DC    AL1(35)
         ORG   RTCTCF2+16
@NM00153 DS    CL4
         ORG   @NM00153
@NM00154 DC    X'05'
@NM00155 DC    X'63'
@NM00156 DC    AL1(44)
@NM00157 DC    AL1(53)
         ORG   RTCTCF2+20
@NM00158 DS    CL4
         ORG   @NM00158
@NM00159 DC    X'05'
@NM00160 DC    X'53'
@NM00161 DC    AL1(62)
@NM00162 DC    AL1(71)
         ORG   RTCTCF2+24
@NM00163 DS    CL4
         ORG   @NM00163
@NM00164 DC    F'0'
         ORG   RTCTCF2+28
RTCT37L3 DS    CL21
         ORG   RTCT37L3
@NM00165 DC    CL7'RTMTEST'
@NM00166 DC    CL6'RECFLG'
@NM00167 DC    CL8'RESERVED'
         ORG   RTCT37L3+21
         DS    CL3
RTCT37F3 DS    CL28
         ORG   RTCT37F3
@NM00168 DS    CL4
         ORG   @NM00168
@NM00169 DC    X'01'
@NM00170 DC    X'40'
@NM00171 DC    AL1(0)
@NM00172 DC    AL1(0)
         ORG   RTCT37F3+4
@NM00173 DS    CL8
         ORG   @NM00173
@NM00174 DC    X'07'
@NM00175 DC    X'63'
@NM00176 DC    AL1(8)
@NM00177 DC    AL1(17)
@NM00178 DC    AL4(RTCT37L3)
         ORG   RTCT37F3+12
@NM00179 DS    CL4
         ORG   @NM00179
@NM00180 DC    X'05'
@NM00181 DC    X'50'
@NM00182 DC    AL1(26)
@NM00183 DC    AL1(35)
         ORG   RTCT37F3+16
@NM00184 DS    CL4
         ORG   @NM00184
@NM00185 DC    X'05'
@NM00186 DC    X'73'
@NM00187 DC    AL1(44)
@NM00188 DC    AL1(53)
         ORG   RTCT37F3+20
@NM00189 DS    CL4
         ORG   @NM00189
@NM00190 DC    X'04'
@NM00191 DC    X'02'
@NM00192 DC    AL1(0)
@NM00193 DC    AL1(62)
         ORG   RTCT37F3+24
@NM00194 DS    CL4
         ORG   @NM00194
@NM00195 DC    F'0'
         ORG   RTCT37F3+28
RTCTCL3  DS    CL8
         ORG   RTCTCL3
@NM00196 DC    CL8'TAPEDCBS'
         ORG   RTCTCL3+8
RTCTCF3  DS    CL32
         ORG   RTCTCF3
@NM00197 DS    CL4
         ORG   @NM00197
@NM00198 DC    X'01'
@NM00199 DC    X'40'
@NM00200 DC    AL1(0)
@NM00201 DC    AL1(0)
         ORG   RTCTCF3+4
@NM00202 DS    CL8
         ORG   @NM00202
@NM00203 DC    X'07'
@NM00204 DC    X'73'
@NM00205 DC    AL1(8)
@NM00206 DC    AL1(17)
@NM00207 DC    AL4(RTCTCL3)
         ORG   RTCTCF3+12
@NM00208 DS    CL4
         ORG   @NM00208
@NM00209 DC    X'04'
@NM00210 DC    X'03'
@NM00211 DC    AL1(0)
@NM00212 DC    AL1(26)
         ORG   RTCTCF3+16
@NM00213 DS    CL4
         ORG   @NM00213
@NM00214 DC    X'04'
@NM00215 DC    X'03'
@NM00216 DC    AL1(0)
@NM00217 DC    AL1(35)
         ORG   RTCTCF3+20
@NM00218 DS    CL4
         ORG   @NM00218
@NM00219 DC    X'04'
@NM00220 DC    X'03'
@NM00221 DC    AL1(0)
@NM00222 DC    AL1(44)
         ORG   RTCTCF3+24
@NM00223 DS    CL4
         ORG   @NM00223
@NM00224 DC    X'04'
@NM00225 DC    X'03'
@NM00226 DC    AL1(0)
@NM00227 DC    AL1(53)
         ORG   RTCTCF3+28
@NM00228 DS    CL4
         ORG   @NM00228
@NM00229 DC    F'0'
         ORG   RTCTCF3+32
RTCTCF4  DS    CL24
         ORG   RTCTCF4
@NM00230 DS    CL4
         ORG   @NM00230
@NM00231 DC    X'01'
@NM00232 DC    X'40'
@NM00233 DC    AL1(0)
@NM00234 DC    AL1(0)
         ORG   RTCTCF4+4
@NM00235 DS    CL4
         ORG   @NM00235
@NM00236 DC    X'04'
@NM00237 DC    X'03'
@NM00238 DC    AL1(0)
@NM00239 DC    AL1(17)
         ORG   RTCTCF4+8
@NM00240 DS    CL4
         ORG   @NM00240
@NM00241 DC    X'04'
@NM00242 DC    X'03'
@NM00243 DC    AL1(0)
@NM00244 DC    AL1(26)
         ORG   RTCTCF4+12
@NM00245 DS    CL4
         ORG   @NM00245
@NM00246 DC    X'04'
@NM00247 DC    X'03'
@NM00248 DC    AL1(0)
@NM00249 DC    AL1(35)
         ORG   RTCTCF4+16
@NM00250 DS    CL4
         ORG   @NM00250
@NM00251 DC    X'04'
@NM00252 DC    X'03'
@NM00253 DC    AL1(0)
@NM00254 DC    AL1(44)
         ORG   RTCTCF4+20
@NM00255 DS    CL4
         ORG   @NM00255
@NM00256 DC    F'0'
         ORG   RTCTCF4+24
RTCT37L4 DS    CL6
         ORG   RTCT37L4
@NM00257 DC    CL6'SDMPWA'
         ORG   RTCT37L4+6
         DS    CL2
RTCT37F4 DS    CL16
         ORG   RTCT37F4
@NM00258 DS    CL4
         ORG   @NM00258
@NM00259 DC    X'01'
@NM00260 DC    X'40'
@NM00261 DC    AL1(0)
@NM00262 DC    AL1(0)
         ORG   RTCT37F4+4
@NM00263 DS    CL8
         ORG   @NM00263
@NM00264 DC    X'07'
@NM00265 DC    X'53'
@NM00266 DC    AL1(8)
@NM00267 DC    AL1(17)
@NM00268 DC    AL4(RTCT37L4)
         ORG   RTCT37F4+12
@NM00269 DS    CL4
         ORG   @NM00269
@NM00270 DC    F'0'
         ORG   RTCT37F4+16
RTCT17L1 DS    CL14
         ORG   RTCT17L1
@NM00271 DC    CL6'SDMPWA'
@NM00272 DC    CL8'ERROR ID'
         ORG   RTCT17L1+14
         DS    CL2
RTCT17F1 DS    CL28
         ORG   RTCT17F1
@NM00273 DS    CL4
         ORG   @NM00273
@NM00274 DC    X'01'
@NM00275 DC    X'40'
@NM00276 DC    AL1(0)
@NM00277 DC    AL1(0)
         ORG   RTCT17F1+4
@NM00278 DS    CL8
         ORG   @NM00278
@NM00279 DC    X'07'
@NM00280 DC    X'53'
@NM00281 DC    AL1(8)
@NM00282 DC    AL1(17)
@NM00283 DC    AL4(RTCT17L1)
         ORG   RTCT17F1+12
@NM00284 DS    CL4
         ORG   @NM00284
@NM00285 DC    X'05'
@NM00286 DC    X'73'
@NM00287 DC    AL1(26)
@NM00288 DC    AL1(35)
         ORG   RTCT17F1+16
@NM00289 DS    CL4
         ORG   @NM00289
@NM00290 DC    X'04'
@NM00291 DC    X'03'
@NM00292 DC    AL1(0)
@NM00293 DC    AL1(44)
         ORG   RTCT17F1+20
@NM00294 DS    CL4
         ORG   @NM00294
@NM00295 DC    X'04'
@NM00296 DC    X'03'
@NM00297 DC    AL1(0)
@NM00298 DC    AL1(53)
         ORG   RTCT17F1+24
@NM00299 DS    CL4
         ORG   @NM00299
@NM00300 DC    F'0'
         ORG   RTCT17F1+28
RTCTSUL1 DS    CL28
         ORG   RTCTSUL1
@NM00301 DC    CL4'NAME'
@NM00302 DC    CL8'SYSABEND'
@NM00303 DC    CL8'SYSUDUMP'
@NM00304 DC    CL8'SYSMDUMP'
         ORG   RTCTSUL1+28
RTCTSUF1 DS    CL28
         ORG   RTCTSUF1
@NM00305 DS    CL4
         ORG   @NM00305
@NM00306 DC    X'01'
@NM00307 DC    X'40'
@NM00308 DC    AL1(0)
@NM00309 DC    AL1(0)
         ORG   RTCTSUF1+4
@NM00310 DS    CL8
         ORG   @NM00310
@NM00311 DC    X'27'
@NM00312 DC    X'33'
@NM00313 DC    AL1(8)
@NM00314 DC    AL1(16)
@NM00315 DC    AL4(RTCTSUL1)
         ORG   RTCTSUF1+12
@NM00316 DS    CL4
         ORG   @NM00316
@NM00317 DC    X'05'
@NM00318 DC    X'73'
@NM00319 DC    AL1(25)
@NM00320 DC    AL1(34)
         ORG   RTCTSUF1+16
@NM00321 DS    CL4
         ORG   @NM00321
@NM00322 DC    X'05'
@NM00323 DC    X'73'
@NM00324 DC    AL1(43)
@NM00325 DC    AL1(52)
         ORG   RTCTSUF1+20
@NM00326 DS    CL4
         ORG   @NM00326
@NM00327 DC    X'05'
@NM00328 DC    X'73'
@NM00329 DC    AL1(61)
@NM00330 DC    AL1(70)
         ORG   RTCTSUF1+24
@NM00331 DS    CL4
         ORG   @NM00331
@NM00332 DC    F'0'
         ORG   RTCTSUF1+28
RTCTSUL2 DS    CL37
         ORG   RTCTSUL2
@NM00333 DC    CL4'RESV'
@NM00334 DC    CL8'SDMPASID'
@NM00335 DC    CL7'MEMTECB'
@NM00336 DC    CL5'ASCBP'
@NM00337 DC    CL6'RECECB'
@NM00338 DC    CL7'LOGRECB'
         ORG   RTCTSUL2+37
         DS    CL3
RTCTSUF2 DS    CL36
         ORG   RTCTSUF2
@NM00339 DS    CL4
         ORG   @NM00339
@NM00340 DC    X'01'
@NM00341 DC    X'40'
@NM00342 DC    AL1(0)
@NM00343 DC    AL1(0)
         ORG   RTCTSUF2+4
@NM00344 DS    CL8
         ORG   @NM00344
@NM00345 DC    X'07'
@NM00346 DC    X'31'
@NM00347 DC    AL1(8)
@NM00348 DC    AL1(16)
@NM00349 DC    AL4(RTCTSUL2)
         ORG   RTCTSUF2+12
@NM00350 DS    CL4
         ORG   @NM00350
@NM00351 DC    X'05'
@NM00352 DC    X'71'
@NM00353 DC    AL1(25)
@NM00354 DC    AL1(34)
         ORG   RTCTSUF2+16
@NM00355 DS    CL4
         ORG   @NM00355
@NM00356 DC    X'05'
@NM00357 DC    X'63'
@NM00358 DC    AL1(43)
@NM00359 DC    AL1(52)
         ORG   RTCTSUF2+20
@NM00360 DS    CL4
         ORG   @NM00360
@NM00361 DC    X'05'
@NM00362 DC    X'43'
@NM00363 DC    AL1(61)
@NM00364 DC    AL1(70)
         ORG   RTCTSUF2+24
@NM00365 DS    CL4
         ORG   @NM00365
@NM00366 DC    X'05'
@NM00367 DC    X'53'
@NM00368 DC    AL1(79)
@NM00369 DC    AL1(86)
         ORG   RTCTSUF2+28
@NM00370 DS    CL4
         ORG   @NM00370
@NM00371 DC    X'05'
@NM00372 DC    X'63'
@NM00373 DC    AL1(95)
@NM00374 DC    AL1(103)
         ORG   RTCTSUF2+32
@NM00375 DS    CL4
         ORG   @NM00375
@NM00376 DC    F'0'
         ORG   RTCTSUF2+36
RTCTSUL3 DS    CL25
         ORG   RTCTSUL3
@NM00377 DC    CL7'RTMTEST'
@NM00378 DC    CL6'RECFLG'
@NM00379 DC    CL8'ERIDSEQN'
@NM00380 DC    CL4'SDSW'
         ORG   RTCTSUL3+25
         DS    CL3
RTCTSUF3 DS    CL28
         ORG   RTCTSUF3
@NM00381 DS    CL4
         ORG   @NM00381
@NM00382 DC    X'01'
@NM00383 DC    X'40'
@NM00384 DC    AL1(0)
@NM00385 DC    AL1(0)
         ORG   RTCTSUF3+4
@NM00386 DS    CL8
         ORG   @NM00386
@NM00387 DC    X'07'
@NM00388 DC    X'63'
@NM00389 DC    AL1(8)
@NM00390 DC    AL1(17)
@NM00391 DC    AL4(RTCTSUL3)
         ORG   RTCTSUF3+12
@NM00392 DS    CL4
         ORG   @NM00392
@NM00393 DC    X'05'
@NM00394 DC    X'51'
@NM00395 DC    AL1(26)
@NM00396 DC    AL1(35)
         ORG   RTCTSUF3+16
@NM00397 DS    CL4
         ORG   @NM00397
@NM00398 DC    X'05'
@NM00399 DC    X'71'
@NM00400 DC    AL1(44)
@NM00401 DC    AL1(53)
         ORG   RTCTSUF3+20
@NM00402 DS    CL4
         ORG   @NM00402
@NM00403 DC    X'05'
@NM00404 DC    X'33'
@NM00405 DC    AL1(62)
@NM00406 DC    AL1(71)
         ORG   RTCTSUF3+24
@NM00407 DS    CL4
         ORG   @NM00407
@NM00408 DC    F'0'
         ORG   RTCTSUF3+28
RTCTSUL4 DS    CL32
         ORG   RTCTSUL4
@NM00409 DC    CL8'SAOPTION'
@NM00410 DC    CL8'SUOPTION'
@NM00411 DC    CL8'SMOPTION'
@NM00412 DC    CL8'SDOPTION'
         ORG   RTCTSUL4+32
RTCTSUF4 DS    CL28
         ORG   RTCTSUF4
@NM00413 DS    CL4
         ORG   @NM00413
@NM00414 DC    X'01'
@NM00415 DC    X'40'
@NM00416 DC    AL1(0)
@NM00417 DC    AL1(0)
         ORG   RTCTSUF4+4
@NM00418 DS    CL8
         ORG   @NM00418
@NM00419 DC    X'07'
@NM00420 DC    X'73'
@NM00421 DC    AL1(8)
@NM00422 DC    AL1(17)
@NM00423 DC    AL4(RTCTSUL4)
         ORG   RTCTSUF4+12
@NM00424 DS    CL4
         ORG   @NM00424
@NM00425 DC    X'05'
@NM00426 DC    X'73'
@NM00427 DC    AL1(26)
@NM00428 DC    AL1(35)
         ORG   RTCTSUF4+16
@NM00429 DS    CL4
         ORG   @NM00429
@NM00430 DC    X'05'
@NM00431 DC    X'73'
@NM00432 DC    AL1(44)
@NM00433 DC    AL1(53)
         ORG   RTCTSUF4+20
@NM00434 DS    CL4
         ORG   @NM00434
@NM00435 DC    X'05'
@NM00436 DC    X'73'
@NM00437 DC    AL1(62)
@NM00438 DC    AL1(71)
         ORG   RTCTSUF4+24
@NM00439 DS    CL4
         ORG   @NM00439
@NM00440 DC    F'0'
         ORG   RTCTSUF4+28
RTCTSUL5 DS    CL31
         ORG   RTCTSUL5
@NM00441 DC    CL8'ASDMPOPT'
@NM00442 DC    CL8'SDMPINFO'
@NM00443 DC    CL4'RESV'
@NM00444 DC    CL7'SDMPFLG'
@NM00445 DC    CL4'RESV'
         ORG   RTCTSUL5+31
         DS    CL1
RTCTSUF5 DS    CL36
         ORG   RTCTSUF5
@NM00446 DS    CL4
         ORG   @NM00446
@NM00447 DC    X'01'
@NM00448 DC    X'40'
@NM00449 DC    AL1(0)
@NM00450 DC    AL1(0)
         ORG   RTCTSUF5+4
@NM00451 DS    CL8
         ORG   @NM00451
@NM00452 DC    X'07'
@NM00453 DC    X'71'
@NM00454 DC    AL1(8)
@NM00455 DC    AL1(17)
@NM00456 DC    AL4(RTCTSUL5)
         ORG   RTCTSUF5+12
@NM00457 DS    CL4
         ORG   @NM00457
@NM00458 DC    X'05'
@NM00459 DC    X'72'
@NM00460 DC    AL1(26)
@NM00461 DC    AL1(35)
         ORG   RTCTSUF5+16
@NM00462 DS    CL4
         ORG   @NM00462
@NM00463 DC    X'05'
@NM00464 DC    X'33'
@NM00465 DC    AL1(44)
@NM00466 DC    AL1(53)
         ORG   RTCTSUF5+20
@NM00467 DS    CL4
         ORG   @NM00467
@NM00468 DC    X'04'
@NM00469 DC    X'02'
@NM00470 DC    AL1(0)
@NM00471 DC    AL1(62)
         ORG   RTCTSUF5+24
@NM00472 DS    CL4
         ORG   @NM00472
@NM00473 DC    X'05'
@NM00474 DC    X'61'
@NM00475 DC    AL1(71)
@NM00476 DC    AL1(80)
         ORG   RTCTSUF5+28
@NM00477 DS    CL4
         ORG   @NM00477
@NM00478 DC    X'05'
@NM00479 DC    X'31'
@NM00480 DC    AL1(89)
@NM00481 DC    AL1(98)
         ORG   RTCTSUF5+32
@NM00482 DS    CL4
         ORG   @NM00482
@NM00483 DC    F'0'
         ORG   RTCTSUF5+36
RTCTSUL6 DS    CL13
         ORG   RTCTSUL6
@NM00484 DC    CL4'ASID'
@NM00485 DC    CL5'FLAGS'
@NM00486 DC    CL4'RESV'
         ORG   RTCTSUL6+13
         DS    CL3
RTCTSUF6 DS    CL24
         ORG   RTCTSUF6
@NM00487 DS    CL4
         ORG   @NM00487
@NM00488 DC    X'01'
@NM00489 DC    X'40'
@NM00490 DC    AL1(0)
@NM00491 DC    AL1(0)
         ORG   RTCTSUF6+4
@NM00492 DS    CL8
         ORG   @NM00492
@NM00493 DC    X'07'
@NM00494 DC    X'31'
@NM00495 DC    AL1(8)
@NM00496 DC    AL1(17)
@NM00497 DC    AL4(RTCTSUL6)
         ORG   RTCTSUF6+12
@NM00498 DS    CL4
         ORG   @NM00498
@NM00499 DC    X'05'
@NM00500 DC    X'40'
@NM00501 DC    AL1(26)
@NM00502 DC    AL1(35)
         ORG   RTCTSUF6+16
@NM00503 DS    CL4
         ORG   @NM00503
@NM00504 DC    X'05'
@NM00505 DC    X'30'
@NM00506 DC    AL1(44)
@NM00507 DC    AL1(53)
         ORG   RTCTSUF6+20
@NM00508 DS    CL4
         ORG   @NM00508
@NM00509 DC    F'0'
         ORG   RTCTSUF6+24
RTCTSUL7 DS    CL12
         ORG   RTCTSUL7
@NM00510 DC    CL4'MRMQ'
@NM00511 DC    CL8'RESERVED'
         ORG   RTCTSUL7+12
RTCTSUF7 DS    CL24
         ORG   RTCTSUF7
@NM00512 DS    CL4
         ORG   @NM00512
@NM00513 DC    X'01'
@NM00514 DC    X'40'
@NM00515 DC    AL1(0)
@NM00516 DC    AL1(0)
         ORG   RTCTSUF7+4
@NM00517 DS    CL8
         ORG   @NM00517
@NM00518 DC    X'07'
@NM00519 DC    X'33'
@NM00520 DC    AL1(8)
@NM00521 DC    AL1(17)
@NM00522 DC    AL4(RTCTSUL7)
         ORG   RTCTSUF7+12
@NM00523 DS    CL4
         ORG   @NM00523
@NM00524 DC    X'05'
@NM00525 DC    X'73'
@NM00526 DC    AL1(26)
@NM00527 DC    AL1(35)
         ORG   RTCTSUF7+16
@NM00528 DS    CL4
         ORG   @NM00528
@NM00529 DC    X'04'
@NM00530 DC    X'03'
@NM00531 DC    AL1(0)
@NM00532 DC    AL1(44)
         ORG   RTCTSUF7+20
@NM00533 DS    CL4
         ORG   @NM00533
@NM00534 DC    F'0'
         ORG   RTCTSUF7+24
SCBL1    DS    CL36
         ORG   SCBL1
@NM00535 DC    CL7'NEXTSCB'
@NM00536 DC    CL8'USEREXIT'
@NM00537 DC    CL8'PARMLIST'
@NM00538 DC    CL6'TCB/RB'
@NM00539 DC    CL7'SCBDATA'
         ORG   SCBL1+36
SCBFMT1  DS    CL32
         ORG   SCBFMT1
@NM00540 DS    CL4
         ORG   @NM00540
@NM00541 DC    X'01'
@NM00542 DC    X'40'
@NM00543 DC    AL1(0)
@NM00544 DC    AL1(0)
         ORG   SCBFMT1+4
@NM00545 DS    CL8
         ORG   @NM00545
@NM00546 DC    X'07'
@NM00547 DC    X'63'
@NM00548 DC    AL1(8)
@NM00549 DC    AL1(16)
@NM00550 DC    AL4(SCBL1)
         ORG   SCBFMT1+12
@NM00551 DS    CL4
         ORG   @NM00551
@NM00552 DC    X'05'
@NM00553 DC    X'73'
@NM00554 DC    AL1(25)
@NM00555 DC    AL1(34)
         ORG   SCBFMT1+16
@NM00556 DS    CL4
         ORG   @NM00556
@NM00557 DC    X'05'
@NM00558 DC    X'73'
@NM00559 DC    AL1(43)
@NM00560 DC    AL1(52)
         ORG   SCBFMT1+20
@NM00561 DS    CL4
         ORG   @NM00561
@NM00562 DC    X'05'
@NM00563 DC    X'53'
@NM00564 DC    AL1(61)
@NM00565 DC    AL1(68)
         ORG   SCBFMT1+24
@NM00566 DS    CL4
         ORG   @NM00566
@NM00567 DC    X'05'
@NM00568 DC    X'63'
@NM00569 DC    AL1(77)
@NM00570 DC    AL1(85)
         ORG   SCBFMT1+28
@NM00571 DS    CL4
         ORG   @NM00571
@NM00572 DC    F'0'
         ORG   SCBFMT1+32
ESTAMSK  DC    X'10'
MSKIR    DC    X'D0'
QUIESMSK DC    X'03'
REL2     DC    CL2'02'
TRANS    DS    CL256
         ORG   TRANS
@NM00577 DS    CL64
BL       DC    CL1' '
@NM00578 DS    CL175
NUMS     DC    CL16'0123456789ABCDEF'
         ORG   TRANS+256
DMPASFLG DC    CL34'SDUMP MULTIPLE ADDRESS SPACE FLAGS'
ESTAMSG  DC    CL18'ESTAE INDICATOR ON'
RTCFMT   DC    CL120'*** FORMATTING SERVICE ROUTINE ERROR DURING RTCT FC
               ORMATTING (POSSIBLE CAUSE: DATA NOT IN DUMP) ***'
RTCTHDR  DC    CL54'-RTCT-------------------------------------AT LOCATIC
               ON '
RTCTUS   DC    CL5' ----'
SCBFMT   DC    CL120'*** FORMATTING ROUTINE ERROR DURING SCB FORMATTINGC
                (POSSIBLE CAUSE: DATA NOT IN DUMP) ***'
SCBHDR   DC    CL55'-STAE CONTROL BLOCK------------------------AT LOCATC
               ION '
SCBSUM   DC    CL20'SCB BIT FLAG SUMMARY'
SCBSUS   DC    CL20'--------------------'
STAEMSG  DC    CL17'STAE INDICATOR ON'
SVCENTRY DC    CL13'SDUMP ENTRIES'
QUIESMSG DC    CL11'QUIESCE I/O'
BLANKS   DC    CL120' '
SCBPATCH DC    CL200'PATCH AREA FOR IEAFTSCB IT IS 200 BYTES LONG'
RTCT37NM DC    AL4(RTCT37F1)
         DC    AL4(RTCT37F2)
         DC    AL4(RTCTCF1)
         DC    AL4(RTCTCF2)
         DC    AL4(RTCT37F3)
         DC    AL4(RTCTCF3)
         DC    AL4(RTCTCF4)
         DC    AL4(RTCT37F4)
RTCTSU17 DC    AL4(RTCT17F1)
RTCTSUNM DC    AL4(RTCTSUF1)
         DC    AL4(RTCTSUF2)
         DC    AL4(RTCTCF1)
         DC    AL4(RTCTCF2)
         DC    AL4(RTCTSUF3)
         DC    AL4(RTCTCF3)
         DC    AL4(RTCTCF4)
         DC    AL4(RTCT17F1)
         DC    AL4(RTCTSUF4)
         DC    AL4(RTCTSUF5)
         DC    AL4(RTCTSUF6)
         DC    AL4(RTCTSUF7)
SCBNAMES DC    AL4(SCBFMT1)
FLGS2MSG DC    CL24' '
         DC    CL24'RETAIN SCB ACROSS XCTL'
         DC    CL24' '
         DC    CL24'THIS SCB IS IN USE'
         DC    CL24' '
         DC    CL24' '
         DC    CL24'USER IN KEY 0-7'
         DC    CL24'USER IN SUPERVISOR STATE'
PARMEMSG DC    CL29'ESTAI INDICATOR ON'
         DC    CL29'ESTAR INDICATOR ON'
         DC    CL29'DUMMY SCB INDICATOR ON'
         DC    CL29' '
         DC    CL29' '
         DC    CL29'ALLOW ASYNCHRONOUS INTERRUPTS'
         DC    CL29'BYPASS I/O INTERVENTION'
         DC    CL29'HALT I/O'
PARMRMSG DC    CL29'STAI INDICATOR ON'
         DC    CL29'STAR INDICATOR ON'
         DC    CL29'DUMMY SCB INDICATOR ON'
         DC    CL29' '
         DC    CL29' '
         DC    CL29'ALLOW ASYNCHRONOUS INTERRUPTS'
         DC    CL29'BYPASS I/O INTERVENTION'
         DC    CL29'HALT I/O'
TESTBITS DC    X'80'
         DC    X'40'
         DC    X'20'
         DC    X'10'
         DC    X'08'
         DC    X'04'
         DC    X'02'
         DC    X'01'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
LNGTHEQU EQU   @05
INDEX    EQU   @08
CONVRT   EQU   @08
RTCTPTR  EQU   @05
RCCODE   EQU   @09
ESTAPTR  EQU   @07
DATAPTR  EQU   @06
ARRAYCNT EQU   @05
ABDPLPTR EQU   @01
LINEPTR  EQU   @00
VADR     EQU   @00
RCREG    EQU   @15
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIERLC EQU   CVTMAP+144
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
CVTNUMB  EQU   CVTRELNO
ABDPL    EQU   0
ADPLFLAG EQU   ABDPL+7
ADPLSNPR EQU   ADPLFLAG
ADPLBUF  EQU   ABDPL+8
ADPLPRNT EQU   ABDPL+12
ADPLCVT  EQU   ABDPL+16
ADPLMEMA EQU   ABDPL+20
ADPLFRMT EQU   ABDPL+24
ADPLCOM1 EQU   ABDPL+28
ADPLCOM2 EQU   ABDPL+32
ADPLFMT1 EQU   ABDPL+44
ADPLFMT2 EQU   ABDPL+48
RTCT     EQU   0
RTCTPLIB EQU   RTCT+4
RTCTSAP  EQU   RTCTPLIB
RTCTSAP1 EQU   RTCTSAP
RTCTSAP2 EQU   RTCTSAP+1
RTCTSAP3 EQU   RTCTSAP+2
RTCTSUP  EQU   RTCTPLIB+4
RTCTSUP1 EQU   RTCTSUP
RTCTSUP2 EQU   RTCTSUP+1
RTCTSUP3 EQU   RTCTSUP+2
RTCTSYD  EQU   RTCTPLIB+8
RTCTSY01 EQU   RTCTSYD
RTCTSDDS EQU   RTCT+36
RTCTFLG  EQU   RTCTSDDS+3
RTCTSDPL EQU   RTCT+156
RTCTRFLG EQU   RTCT+176
RTCTERID EQU   RTCT+224
RTCTOPT  EQU   RTCT+236
RTCTASO  EQU   RTCT+252
RTCTASO1 EQU   RTCTASO
RTCTASO2 EQU   RTCTASO+1
RTCTSDI  EQU   RTCT+254
RTCTSDF  EQU   RTCT+264
RTCTSDF1 EQU   RTCTSDF
RTCTSDF2 EQU   RTCTSDF+1
RTCTSDF3 EQU   RTCT+268
RTCTSDF4 EQU   RTCTSDF3+2
RTCTMOPT EQU   0
RTCTMSAO EQU   RTCTMOPT
RTCTSASD EQU   RTCTMSAO
RTCTSAO1 EQU   RTCTSASD
RTCTSAO2 EQU   RTCTSASD+1
RTCTSAPD EQU   RTCTMSAO+2
RTCTSAO3 EQU   RTCTSAPD
RTCTSAO4 EQU   RTCTSAPD+1
RTCTSAMG EQU   RTCTSAO4
RTCTMSUO EQU   RTCTMOPT+4
RTCTSUSD EQU   RTCTMSUO
RTCTSUO1 EQU   RTCTSUSD
RTCTSUO2 EQU   RTCTSUSD+1
RTCTSUPD EQU   RTCTMSUO+2
RTCTSUO3 EQU   RTCTSUPD
RTCTSUO4 EQU   RTCTSUPD+1
RTCTSUMG EQU   RTCTSUO4
RTCTMSYO EQU   RTCTMOPT+8
RTCTSD01 EQU   RTCTMSYO
RTCTSD04 EQU   RTCTMSYO+3
RTCTSMMG EQU   RTCTSD04
RTCTMSDO EQU   RTCTMOPT+12
RTCTSDOD EQU   RTCTMSDO
RTCTSDO1 EQU   RTCTSDOD
RTCTSDO2 EQU   RTCTSDOD+1
RTCTSDO3 EQU   RTCTMSDO+2
RTCTSDO4 EQU   RTCTMSDO+3
RTCTSDMG EQU   RTCTSDO4
SCB      EQU   0
SCBPARM  EQU   SCB+8
SCBFLGS1 EQU   SCBPARM
SCBIOPRC EQU   SCBFLGS1
SCBOWNR  EQU   SCB+12
SCBFLGS2 EQU   SCBOWNR
SCBDATA  EQU   SCB+16
SCBFLGS3 EQU   SCBDATA
SUBITS   EQU   0
SUBYTE1  EQU   SUBITS
SUBYTE2  EQU   SUBITS+1
SUBYTE3  EQU   SUBITS+2
SU17BIT  EQU   SUBYTE3
SUBYTE4  EQU   SUBITS+3
SUBYTE5  EQU   SUBITS+4
SU33BIT  EQU   SUBYTE5
SUBYTE6  EQU   SUBITS+5
SUBYTE7  EQU   SUBITS+6
SUBYTE8  EQU   SUBITS+7
SUBYTE9  EQU   SUBITS+8
SUBYTE10 EQU   SUBITS+9
SUBYTE11 EQU   SUBITS+10
SUBYTE12 EQU   SUBITS+11
SUBYTE13 EQU   SUBITS+12
ACCESS   EQU   0
FORMAT   EQU   0
PRINT    EQU   0
BUFFER   EQU   0
OFFSET   EQU   BUFFER
ADDRESS  EQU   BUFFER+55
DATABYTE EQU   0
DATADWRD EQU   0
DATAHALF EQU   0
DATAWORD EQU   0
ESTAPARM EQU   0
ESTAERR  EQU   ESTAPARM
ERREXP   EQU   ESTAERR
RTYADR   EQU   ESTAPARM+4
RTYREGS  EQU   ESTAPARM+8
LCALREGS EQU   ESTAPARM+72
BITSTR   EQU   0
MSG      EQU   0
MSGARY   EQU   0
CVTPTR   EQU   ADPLCVT
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTRTMCT EQU   CVTS01+224
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
CVTIHASU EQU   CVTS01+696
START    EQU   ADPLFMT1
SCBUS    EQU   SCBSUS
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTSUSP  EQU   CVTS01+692
CVTT6SVC EQU   CVTS01+688
CVTCDAL  EQU   CVTS01+684
CVTTCTL  EQU   CVTS01+680
CVTRSUME EQU   CVTS01+676
CVTJTERM EQU   CVTS01+672
CVTASMRM EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
@NM00576 EQU   ESTAERR
UNEXP2   EQU   ESTAERR
LOCKHELD EQU   ESTAERR
@NM00575 EQU   BUFFER+64
@NM00574 EQU   BUFFER+6
SURV104  EQU   SUBITS+13
SURV103  EQU   SUBYTE13
SURV102  EQU   SUBYTE13
SURV101  EQU   SUBYTE13
SU100BT  EQU   SUBYTE13
SU99BIT  EQU   SUBYTE13
SU98BIT  EQU   SUBYTE13
SU97BIT  EQU   SUBYTE13
SU96BIT  EQU   SUBYTE13
SU95BIT  EQU   SUBYTE12
SU94BIT  EQU   SUBYTE12
SU93BIT  EQU   SUBYTE12
SU92BIT  EQU   SUBYTE12
SU91BIT  EQU   SUBYTE12
SU90BIT  EQU   SUBYTE12
SU89BIT  EQU   SUBYTE12
SU88BIT  EQU   SUBYTE12
SU87BIT  EQU   SUBYTE11
SU86BIT  EQU   SUBYTE11
SU85BIT  EQU   SUBYTE11
SU84BIT  EQU   SUBYTE11
SU83BIT  EQU   SUBYTE11
SU82BIT  EQU   SUBYTE11
SU81BIT  EQU   SUBYTE11
SU80BIT  EQU   SUBYTE11
SU79BIT  EQU   SUBYTE10
SU78BIT  EQU   SUBYTE10
SU77BIT  EQU   SUBYTE10
SU76BIT  EQU   SUBYTE10
SU75BIT  EQU   SUBYTE10
SU74BIT  EQU   SUBYTE10
SU73BIT  EQU   SUBYTE10
SU72BIT  EQU   SUBYTE10
SU71BIT  EQU   SUBYTE9
SU70BIT  EQU   SUBYTE9
SU69BIT  EQU   SUBYTE9
SU68BIT  EQU   SUBYTE9
SU67BIT  EQU   SUBYTE9
SU66BIT  EQU   SUBYTE9
SU65BIT  EQU   SUBYTE9
SU64BIT  EQU   SUBYTE9
SU63BIT  EQU   SUBYTE8
SU62BIT  EQU   SUBYTE8
SU61BIT  EQU   SUBYTE8
SU60BIT  EQU   SUBYTE8
SU59BIT  EQU   SUBYTE8
SU58BIT  EQU   SUBYTE8
SU57BIT  EQU   SUBYTE8
SU56BIT  EQU   SUBYTE8
SU55BIT  EQU   SUBYTE7
SU54BIT  EQU   SUBYTE7
SU53BIT  EQU   SUBYTE7
SU52BIT  EQU   SUBYTE7
SU51BIT  EQU   SUBYTE7
SU50BIT  EQU   SUBYTE7
SU49BIT  EQU   SUBYTE7
SU48BIT  EQU   SUBYTE7
SU47BIT  EQU   SUBYTE6
SU46BIT  EQU   SUBYTE6
SU45BIT  EQU   SUBYTE6
SU44BIT  EQU   SUBYTE6
SU43BIT  EQU   SUBYTE6
SU42BIT  EQU   SUBYTE6
SU41BIT  EQU   SUBYTE6
SU40BIT  EQU   SUBYTE6
SU39BIT  EQU   SUBYTE5
SU38BIT  EQU   SUBYTE5
SU37BIT  EQU   SUBYTE5
SU36BIT  EQU   SUBYTE5
SU35BIT  EQU   SUBYTE5
SU34BIT  EQU   SUBYTE5
SU32BIT  EQU   SUBYTE5
SU31BIT  EQU   SUBYTE4
SU30BIT  EQU   SUBYTE4
SU29BIT  EQU   SUBYTE4
SU28BIT  EQU   SUBYTE4
SU27BIT  EQU   SUBYTE4
SU26BIT  EQU   SUBYTE4
SU25BIT  EQU   SUBYTE4
SU24BIT  EQU   SUBYTE4
SU23BIT  EQU   SUBYTE3
SU22BIT  EQU   SUBYTE3
SU21BIT  EQU   SUBYTE3
SU20BIT  EQU   SUBYTE3
SU19BIT  EQU   SUBYTE3
SU18BIT  EQU   SUBYTE3
SU16BIT  EQU   SUBYTE3
SU15BIT  EQU   SUBYTE2
SU14BIT  EQU   SUBYTE2
SU13BIT  EQU   SUBYTE2
SU12BIT  EQU   SUBYTE2
SU11BIT  EQU   SUBYTE2
SU10BIT  EQU   SUBYTE2
SU9BIT   EQU   SUBYTE2
SU8BIT   EQU   SUBYTE2
SU7BIT   EQU   SUBYTE1
SU6BIT   EQU   SUBYTE1
SU5BIT   EQU   SUBYTE1
SU4BIT   EQU   SUBYTE1
SU3BIT   EQU   SUBYTE1
SU2BIT   EQU   SUBYTE1
SU1BIT   EQU   SUBYTE1
SU0BIT   EQU   SUBYTE1
SCBRSVRE EQU   SCBDATA+3
SCBID    EQU   SCBDATA+2
SCBPKEY  EQU   SCBDATA+1
@NM00024 EQU   SCBFLGS3
SCBTERMO EQU   SCBFLGS3
SCBBRNTR EQU   SCBFLGS3
SCBPRNTR EQU   SCBFLGS3
SCBCNCEL EQU   SCBFLGS3
SCBRECRD EQU   SCBFLGS3
SCBTERMI EQU   SCBFLGS3
@NM00023 EQU   SCBFLGS3
SCBOWNRA EQU   SCBOWNR+1
SCBSUPER EQU   SCBFLGS2
SCBKEY0  EQU   SCBFLGS2
@NM00022 EQU   SCBFLGS2
@NM00021 EQU   SCBFLGS2
SCBINUSE EQU   SCBFLGS2
@NM00020 EQU   SCBFLGS2
SCBXCTL2 EQU   SCBFLGS2
@NM00019 EQU   SCBFLGS2
SCBPARMA EQU   SCBPARM+1
SCBHALT  EQU   SCBIOPRC
SCBNOIOP EQU   SCBIOPRC
SCBASYNC EQU   SCBFLGS1
@NM00018 EQU   SCBFLGS1
SCBESTAE EQU   SCBFLGS1
SCBDUMMY EQU   SCBFLGS1
SCBSTAR  EQU   SCBFLGS1
SCBSTAI  EQU   SCBFLGS1
SCBEXIT  EQU   SCB+4
SCBCHAIN EQU   SCB
RTCTISVC EQU   RTCTSDO4
RTCTSDOV EQU   RTCTSDMG
@NM00017 EQU   RTCTSDO4
@NM00016 EQU   RTCTSDO3
RTCTSDPH EQU   RTCTSDO3
RTCTSDPG EQU   RTCTSDO3
@NM00015 EQU   RTCTSDO2
RTCTSDPD EQU   RTCTSDO2
RTCTSDPC EQU   RTCTSDO2
RTCTSDPB EQU   RTCTSDO2
RTCTSDPA EQU   RTCTSDO2
RTCTSDP9 EQU   RTCTSDO2
RTCTSDP8 EQU   RTCTSDO2
RTCTSDP7 EQU   RTCTSDO1
RTCTSDP6 EQU   RTCTSDO1
RTCTSDP5 EQU   RTCTSDO1
RTCTSDP4 EQU   RTCTSDO1
RTCTSDP3 EQU   RTCTSDO1
RTCTSDP2 EQU   RTCTSDO1
RTCTSDP1 EQU   RTCTSDO1
RTCTSDP0 EQU   RTCTSDO1
RTCTISYM EQU   RTCTSD04
RTCTSMOV EQU   RTCTSMMG
@NM00014 EQU   RTCTSD04
RTCTSD03 EQU   RTCTMSYO+2
RTCTSD02 EQU   RTCTMSYO+1
RTCTSDS7 EQU   RTCTSD01
RTCTSDS6 EQU   RTCTSD01
RTCTSDS5 EQU   RTCTSD01
RTCTSDS4 EQU   RTCTSD01
RTCTSDS3 EQU   RTCTSD01
RTCTSDS2 EQU   RTCTSD01
RTCTSDS1 EQU   RTCTSD01
RTCTSDS0 EQU   RTCTSD01
RTCTISYU EQU   RTCTSUO4
RTCTSUOV EQU   RTCTSUMG
@NM00013 EQU   RTCTSUO4
RTCTSYDF EQU   RTCTSUO3
RTCTSYDE EQU   RTCTSUO3
RTCTSYDD EQU   RTCTSUO3
RTCTSYDC EQU   RTCTSUO3
RTCTSYDB EQU   RTCTSUO3
RTCTSYDA EQU   RTCTSUO3
RTCTSYD9 EQU   RTCTSUO3
RTCTSYD8 EQU   RTCTSUO3
@NM00012 EQU   RTCTSUO2
RTCTSYDH EQU   RTCTSUO2
RTCTSYDG EQU   RTCTSUO2
RTCTSYD7 EQU   RTCTSUO1
RTCTSYD6 EQU   RTCTSUO1
RTCTSYD5 EQU   RTCTSUO1
RTCTSYD4 EQU   RTCTSUO1
RTCTSYD3 EQU   RTCTSUO1
RTCTSYD2 EQU   RTCTSUO1
RTCTSYD1 EQU   RTCTSUO1
RTCTSYD0 EQU   RTCTSUO1
RTCTISAB EQU   RTCTSAO4
RTCTSAOV EQU   RTCTSAMG
@NM00011 EQU   RTCTSAO4
RTCTSADF EQU   RTCTSAO3
RTCTSADE EQU   RTCTSAO3
RTCTSADD EQU   RTCTSAO3
RTCTSADC EQU   RTCTSAO3
RTCTSADB EQU   RTCTSAO3
RTCTSADA EQU   RTCTSAO3
RTCTSAD9 EQU   RTCTSAO3
RTCTSAD8 EQU   RTCTSAO3
@NM00010 EQU   RTCTSAO2
RTCTSADH EQU   RTCTSAO2
RTCTSADG EQU   RTCTSAO2
RTCTSAD7 EQU   RTCTSAO1
RTCTSAD6 EQU   RTCTSAO1
RTCTSAD5 EQU   RTCTSAO1
RTCTSAD4 EQU   RTCTSAO1
RTCTSAD3 EQU   RTCTSAO1
RTCTSAD2 EQU   RTCTSAO1
RTCTSAD1 EQU   RTCTSAO1
RTCTSAD0 EQU   RTCTSAO1
RTCTZZZ5 EQU   RTCT+340
RTCTZZZ4 EQU   RTCT+336
RTCTMRMQ EQU   RTCT+332
RTCTSDF5 EQU   RTCTSDF3+3
RTCTSDDO EQU   RTCTSDF4
RTCTSDEN EQU   RTCTSDF4
RTCTSDEQ EQU   RTCTSDF4
RTCTSDTR EQU   RTCTSDF4
RTCTSDRM EQU   RTCTSDF4
RTCTSDAN EQU   RTCTSDF4
RTCTSDNC EQU   RTCTSDF4
RTCTSDSS EQU   RTCTSDF4
RTCTSDAS EQU   RTCTSDF3
RTCTZZZ3 EQU   RTCT+266
@NM00009 EQU   RTCTSDF2
RTCTSDRW EQU   RTCTSDF2
RTCTSDSL EQU   RTCTSDF2
RTCTSDWF EQU   RTCTSDF2
RTCTSDLA EQU   RTCTSDF2
RTCTSDDI EQU   RTCTSDF2
RTCTSDTQ EQU   RTCTSDF2
RTCTSDMR EQU   RTCTSDF2
RTCTSDSC EQU   RTCTSDF1
RTCTSDRS EQU   RTCTSDF1
RTCTSDSD EQU   RTCTSDF1
RTCTSDEP EQU   RTCTSDF1
RTCTSDMA EQU   RTCTSDF1
RTCTSDSH EQU   RTCTSDF1
RTCTSDND EQU   RTCTSDF1
RTCTSDNO EQU   RTCTSDF1
RTCTZZZ2 EQU   RTCT+257
RTCTSDPR EQU   RTCTSDI+2
RTCTINDX EQU   RTCTSDI+1
RTCTSDNA EQU   RTCTSDI
@NM00008 EQU   RTCTASO2
RTCTASNQ EQU   RTCTASO2
RTCTASNA EQU   RTCTASO2
RTCTASNS EQU   RTCTASO2
RTCTASSU EQU   RTCTASO2
RTCTASSW EQU   RTCTASO2
RTCTASCS EQU   RTCTASO2
RTCTASTR EQU   RTCTASO1
RTCTASLP EQU   RTCTASO1
RTCTASRG EQU   RTCTASO1
RTCTASLS EQU   RTCTASO1
RTCTASSQ EQU   RTCTASO1
RTCTASNU EQU   RTCTASO1
RTCTASPS EQU   RTCTASO1
RTCTASAL EQU   RTCTASO1
RTCTSDO  EQU   RTCTOPT+12
RTCTSYO  EQU   RTCTOPT+8
RTCTSUO  EQU   RTCTOPT+4
RTCTSAO  EQU   RTCTOPT
RTCTXXX2 EQU   RTCT+234
RTCTETIM EQU   RTCTERID+6
RTCTEASD EQU   RTCTERID+4
RTCTECPU EQU   RTCTERID+2
RTCTESEQ EQU   RTCTERID
RTCTSDWK EQU   RTCT+220
RTCTTDCB EQU   RTCT+184
RTCTSDSW EQU   RTCT+180
RTCTSEQ# EQU   RTCT+178
RTCTXXX1 EQU   RTCT+177
@NM00007 EQU   RTCTRFLG
RTCTRSTF EQU   RTCTRFLG
RTCTRPER EQU   RTCTRFLG
RTCTRTER EQU   RTCTRFLG
RTCTTEST EQU   RTCT+172
RTCTMSRB EQU   RTCT+168
RTCTMLCK EQU   RTCT+164
RTCTFMT  EQU   RTCT+160
RTCTSDIP EQU   RTCTSDPL
RTCTDEV  EQU   RTCTSDDS+8
RTCTDCB  EQU   RTCTSDDS+4
@NM00006 EQU   RTCTFLG
RTCTDETP EQU   RTCTFLG
RTCTDSUS EQU   RTCTFLG
RTCTDSST EQU   RTCTFLG
RTCTDSNM EQU   RTCTSDDS
RTCTRCB  EQU   RTCT+32
RTCTRECB EQU   RTCT+28
RTCTFASB EQU   RTCT+24
RTCTMECB EQU   RTCT+20
RTCTSDID EQU   RTCT+18
RTCTYYY1 EQU   RTCT+16
RTCTSY04 EQU   RTCTSYD+3
RTCTSY03 EQU   RTCTSYD+2
RTCTSY02 EQU   RTCTSYD+1
RTCTSYM7 EQU   RTCTSY01
RTCTSYM6 EQU   RTCTSY01
RTCTSYM5 EQU   RTCTSY01
RTCTSYM4 EQU   RTCTSY01
RTCTSYM3 EQU   RTCTSY01
RTCTSYM2 EQU   RTCTSY01
RTCTSYM1 EQU   RTCTSY01
RTCTSYM0 EQU   RTCTSY01
RTCTSUP4 EQU   RTCTSUP+3
RTCTSUDF EQU   RTCTSUP3
RTCTSUDE EQU   RTCTSUP3
RTCTSUDD EQU   RTCTSUP3
RTCTSUDC EQU   RTCTSUP3
RTCTSUDB EQU   RTCTSUP3
RTCTSUDA EQU   RTCTSUP3
RTCTSUD9 EQU   RTCTSUP3
RTCTSUD8 EQU   RTCTSUP3
@NM00005 EQU   RTCTSUP2
RTCTSUDH EQU   RTCTSUP2
RTCTSUDG EQU   RTCTSUP2
RTCTSUD7 EQU   RTCTSUP1
RTCTSUD6 EQU   RTCTSUP1
RTCTSUD5 EQU   RTCTSUP1
RTCTSUD4 EQU   RTCTSUP1
RTCTSUD3 EQU   RTCTSUP1
RTCTSUD2 EQU   RTCTSUP1
RTCTSUD1 EQU   RTCTSUP1
RTCTSUD0 EQU   RTCTSUP1
RTCTSAP4 EQU   RTCTSAP+3
RTCTSABF EQU   RTCTSAP3
RTCTSABE EQU   RTCTSAP3
RTCTSABD EQU   RTCTSAP3
RTCTSABC EQU   RTCTSAP3
RTCTSABB EQU   RTCTSAP3
RTCTSABA EQU   RTCTSAP3
RTCTSAB9 EQU   RTCTSAP3
RTCTSAB8 EQU   RTCTSAP3
@NM00004 EQU   RTCTSAP2
RTCTSABH EQU   RTCTSAP2
RTCTSABG EQU   RTCTSAP2
RTCTSAB7 EQU   RTCTSAP1
RTCTSAB6 EQU   RTCTSAP1
RTCTSAB5 EQU   RTCTSAP1
RTCTSAB4 EQU   RTCTSAP1
RTCTSAB3 EQU   RTCTSAP1
RTCTSAB2 EQU   RTCTSAP1
RTCTSAB1 EQU   RTCTSAP1
RTCTSAB0 EQU   RTCTSAP1
RTCTNAME EQU   RTCT
ADPLABDA EQU   ABDPL+56
ADPLEXT  EQU   ABDPL+52
ADPLCOM4 EQU   ABDPL+40
ADPLCOM3 EQU   ABDPL+36
@NM00003 EQU   ADPLFLAG
ADPLDMGT EQU   ADPLFLAG
ADPLSYTM EQU   ADPLFLAG
ADPLSBPL EQU   ABDPL+6
ADPLASID EQU   ABDPL+4
ADPLTCB  EQU   ABDPL
CVTLEVL  EQU   CVTRELNO+2
CVTMDL   EQU   CVTFIX+250
@NM00002 EQU   CVTFIX+248
@NM00001 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTRSV99 EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTBAH   EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTRV490 EQU   CVTMAP+388
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTLDEV  EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTVS1A  EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTHEAD  EQU   CVTMAP+160
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTIOQET EQU   CVTMAP+120
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00232 EQU   @RC00228
@RC00238 EQU   @RC00228
@RC00282 EQU   @RC00260
@RC00242 EQU   @RC00238
@RC00294 EQU   @RC00282
@ENDDATA EQU   *
         END   IEAFTSCB,(C'PLS1725',0701,77025)
