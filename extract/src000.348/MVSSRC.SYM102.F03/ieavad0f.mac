         TITLE 'IEAVAD0F DISPLAY STORAGE RANGES                        *
                        '
IEAVAD0F CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IEAVAD0F  78.143'                                 0001
         DROP  @15
@PROLOG  ST    @14,12(,@13)                                        0001
         STM   @00,@12,20(@13)                                     0001
         BALR  @11,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@11                                         0001
*                                                                  0049
*/*                    END OF TCB                                    */
*                                                                  0050
*                                                                  0050
*/* ******************************************************************/
*/*                    INIALIZATION ON ENTRY                         */
*/*  FIRST THE ADDRESSING REGISTERS ARE INIALIZED, THEN A SAVEAREA   */
*/*  FOR THE REGISTER SAVE AREA AND AUTOMATIC DATA AREA IS           */
*/*  OBTAINED FROM LSQA(SP253). THE ADDRESS OF THE AREA IS RETURNED  */
*/*  IN ABDGMA, AND THE ADDRESS GETMAIN PARAMETER LIST IS PASSED     */
*/*  IN REGISTER 1. NEXT SAVEAREAS ARE CHAINED, AND THE TEMPORARY    */
*/*  WORK AREAS IS CLEARED TO ZEROS.                                 */
*/*                                                                  */
*/* ******************************************************************/
*                                                                  0050
*   ABDARPTR=PARMPTR;               /* SAVE PARMLIST                 */
         LR    ABDARPTR,PARMPTR                                    0050
*   TCBPTR=ABDTCB;                  /* TCBPTR FROM PARMLIST          */
         L     TCBPTR,ABDTCB(,ABDARPTR)                            0051
*   PARMPTR=ADDR(ABDASIZE);         /* SAVE PARMLIST ADDRESS         */
         LA    PARMPTR,ABDASIZE(,ABDARPTR)                         0052
*   GENERATE;                                                      0053
     GETMAIN EC,LV=@ENDDATD-@DATD+72,SP=253,A=ABDGMA(ABDARPTR),        X
               MF=(E,(1))
*   IF RETCODE^=0 THEN              /* GETMAIN SUCCESSFUL    @G33SPHW*/
         LTR   RETCODE,RETCODE                                     0054
         BZ    @RF00054                                            0054
*     DO;                           /* NO...                 @G33SPHW*/
*       RETCODE=8;                  /* SET RETURN TO 8       @G33SPHW*/
         LA    RETCODE,8                                           0056
*       RETURN;                     /* RETURN TO MAINLINE IEAVAD01 0057
*                                                            @G33SPHW*/
@EL00001 DS    0H                                                  0057
@EF00001 DS    0H                                                  0057
@ER00001 L     @14,12(,@13)                                        0057
         LM    @00,@12,20(@13)                                     0057
         BR    @14                                                 0057
*     END;                          /* END..GETMAIN FAILED   @G33SPHW*/
*   ELSE                            /* GETMAIN OK            @G33SPHW*/
*     DO;                           /* YES DO SAVEAREA INIALIZATION
*                                                            @G33SPHW*/
@RF00054 DS    0H                                                  0060
*       PARMPTR=ABDAAREA;           /* POINTER TO WORKAREA SAVEAREA
*                                                            @G33SPHW*/
         L     PARMPTR,ABDAAREA(,ABDARPTR)                         0060
*       NEXSAPTR=PARMPTR;           /* INITIALIZE NEXT SAVEAREA PTR
*                                      IN OLD                @G33SPHW*/
         ST    PARMPTR,NEXSAPTR(,SAVEPTR)                          0061
*       PRESAPTR=SAVEPTR;           /* INITIALIZE PREVIOUS SAVEAREA
*                                      IN NEW                @G33SPHW*/
         ST    SAVEPTR,PRESAPTR(,PARMPTR)                          0062
*       SAVEPTR=PARMPTR;            /* SET SAVE REGISTER TO NEW    0063
*                                      SAVEAREA ADDRESS      @G33SPHW*/
         LR    SAVEPTR,PARMPTR                                     0063
*       AUTOPTR=SAVEPTR+72;         /* SETUP AUTOMATIC ADDRESSABILITY
*                                      BEYOND SAVEAREA       @G33SPHW*/
         LA    AUTOPTR,72                                          0064
         ALR   AUTOPTR,SAVEPTR                                     0064
*       GENERATE;                                                  0065
        USING @DATD,AUTOPTR      /* ESTABLISH ADDRESSABILITY @G33SPHW*/
        XC     0(@ENDDATD-@DATD,AUTOPTR),0(AUTOPTR) ZERO DATA AREAS
*       SAVERET=0;                  /* RETURN CODE ZEROED    @G33SPHW*/
         SLR   SAVERET,SAVERET                                     0066
*       PARMPTR=ABDARPTR;           /* PARMREG INITIALIZED TO      0067
*                                      PARMLIST              @G33SPHW*/
         LR    PARMPTR,ABDARPTR                                    0067
*                                                                  0068
*       /*************************************************************/
*       /*                                                           */
*       /* DETERMINE IF STORAGE LIST WAS REQUESTED AND STORAGE       */
*       /* POINTER WAS SPECIFIED.                            @G33SPHW*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  0068
*       IF APFSNAPP=ON&             /* STORAGE LIST SPECIFIED AND  0068
*                                                            @G33SPHW*/
*           ABDSNAPP^=0 THEN        /* NOT ZERO              @G33SPHW*/
         TM    APFSNAPP(ABDARPTR),B'00000010'                      0068
         BNO   @RF00068                                            0068
         L     @14,ABDSNAPP(,ABDARPTR)                             0068
         LTR   @14,@14                                             0068
         BZ    @RF00068                                            0068
*         DO;                       /* PROCESS STORAGE LIST  @G33SPHW*/
*           ABDLINEA(1:9)=STOREMSG; /* MOVE STORAGE HEADER TO LINE 0070
*                                                            @G33SPHW*/
         MVC   ABDLINEA(9,ABDARPTR),STOREMSG                       0070
*           CALL IEAVAD11;          /* OUTPUT HEADER         @G33SPHW*/
         L     @15,@CV00100                                        0071
         BALR  @14,@15                                             0071
*           IF APFHDR=OFF×          /* STORAGE HEADER ZERO   @G33SPHW*/
*               APFABEND=OFF THEN   /* OR CALLER IS ABEND.   @G33SPHW*/
         TM    APFHDR(ABDARPTR),B'00010001'                        0072
         BO    @RF00072                                            0072
*             HDRDONE=ON;           /* STOP USER STORAGE HEADER    0073
*                                      PROCESSING            @G33SPHW*/
         OI    HDRDONE,B'10000000'                                 0073
*           ELSE                                                   0074
*             HDRDONE=OFF;          /* INDICATE STORAGE HEADER ACTIVE
*                                                            @G33SPHW*/
         B     @RC00072                                            0074
@RF00072 NI    HDRDONE,B'01111111'                                 0074
*           HDRPTR=ABDHDRAD;        /* HEADER LIST           @G33SPHW*/
@RC00072 L     @14,ABDHDRAD(,ABDARPTR)                             0075
         ST    @14,HDRPTR                                          0075
*           LISTPTR=ABDSNAPP;       /* STORAGE LIST          @G33SPHW*/
         L     LISTPTR,ABDSNAPP(,ABDARPTR)                         0076
*           PARMPTR=ABDARPTR;       /* PARMLIST FOR OUTPUT ROUTINE 0077
*                                                            @G33SPHW*/
         LR    PARMPTR,ABDARPTR                                    0077
*CKHDR:                                                            0078
*           IF HDRDONE=OFF THEN     /* HEADER ACTIVE         @G33SPHW*/
CKHDR    TM    HDRDONE,B'10000000'                                 0078
         BNZ   @RF00078                                            0078
*             DO;                   /* YES                   @G33SPHW*/
*                                                                  0080
*               /*****************************************************/
*               /*                                                   */
*               /* THIS SECTION OF CODE DISPLAY THE STORAGE HEADERS  */
*               /* SPECIFIED ON THE SNAP HEADER MACRO. HEADERS WILL  */
*               /* ONLY BE DISPLAYED IF THE CALLER IS NOT ABEND. THE */
*               /* LENGTH MUST BE UNDER 100 CHRACTERS, AND IN THE KEY*/
*               /* OF THE USER. IF GREATER THAN 100 CHRACTERS A      */
*               /* MESSAGE INVALID STORAGE HEADER WILL BE PRINTED TO */
*               /* THE DUMP DATASET. IF HEADER IS NOT ADDRESSABLE    */
*               /* FROM THE CALLERS KEY THE SAME MESSAGE WILL APPEAR.*/
*               /*                                           @G33SPHW*/
*               /*                                                   */
*               /*****************************************************/
*                                                                  0080
*               IF HDRPTR^=0 THEN   /* HEADER ADDRESS ZERO   @ZM45049*/
         L     @14,HDRPTR                                          0080
         LTR   @14,@14                                             0080
         BZ    @RF00080                                            0080
*                 DO;               /* NO... PROCESS         @ZM45049*/
*                   ABDUPRXT=ADDR(BADPARM);/* RETRY ADDRESS UPDATE 0082
*                                                            @ZM45049*/
         LA    @03,BADPARM                                         0082
         ST    @03,ABDUPRXT(,ABDARPTR)                             0082
*                   TESTWORD=HEAD;  /* REFERENCE PARMLIST    @ZM45049*/
         L     @03,HEAD(,@14)                                      0083
         ST    @03,TESTWORD                                        0083
*                   ABDUPRXT=ADDR(BADHDR);/* RETRY ADDRESS UPDATE  0084
*                                                            @ZM45049*/
         LA    @03,BADHDR                                          0084
         ST    @03,ABDUPRXT(,ABDARPTR)                             0084
*                   IF HEADA^=0 THEN/* HEADER ADDRESS ZERO   @ZM45049*/
         L     @14,HEADA-1(,@14)                                   0085
         LA    @14,0(,@14)                                         0085
         LTR   @14,@14                                             0085
         BZ    @RF00085                                            0085
*                     DO;           /* NO... PROCESS         @ZM45049*/
*                       IF HDRLEN>100 THEN/* HEADER GREATER THAN 100
*                                                            @G33SPHW*/
         CLI   HDRLEN(@14),100                                     0087
         BNH   @RF00087                                            0087
*                         DO;       /* YES                   @G33SPHW*/
*BADHDR:                                                           0089
*                           RETCODE=4;/* ERROR RC4           @G33SPHW*/
BADHDR   LA    RETCODE,4                                           0089
*                           GOTO MSGISSUE;/* ISSUE ERROR MESSAGE   0090
*                                                            @VS45049*/
         B     MSGISSUE                                            0090
*BADPARM:                                                          0091
*                           RETCODE=4;/* ERROR RC=4          @VS45049*/
BADPARM  LA    RETCODE,4                                           0091
*                           HDRDONE=ON;/* STOP HEADER PROCESS      0092
*                                                            @VS45049*/
         OI    HDRDONE,B'10000000'                                 0092
*                         END;      /* END GREATER THAN 100  @G33SPHW*/
*                       ELSE        /* CHECK FOR LENGTH OF   @G33SPHW*/
*                         DO;       /* ZERO                  @G33SPHW*/
         B     @RC00087                                            0094
@RF00087 DS    0H                                                  0095
*                           IF HDRLEN=0 THEN/* HEADER LENGTH EQUAL 0
*                                                            @G33SPHW*/
         L     @14,HDRPTR                                          0095
         L     @14,HEADA-1(,@14)                                   0095
         CLI   HDRLEN(@14),0                                       0095
         BNE   @RF00095                                            0095
*                             DO;   /* YES...                @G33SPHW*/
*                               RETCODE=0;/* RETCODE 0       @G33SPHW*/
         SLR   RETCODE,RETCODE                                     0097
*                             END;  /* END HDR ZERO          @G33SPHW*/
*                           ELSE    /* PROCESS HEADER        @G33SPHW*/
*                             DO;   /* HEADER BETWEEN ONE-HUNDRED  0099
*                                      CHARACTERS LONG       @G33SPHW*/
         B     @RC00095                                            0099
@RF00095 DS    0H                                                  0100
*                               RFY                                0100
*                                (TESTREG) RSTD;/* PROTECT WORK REG
*                                                            @ZA32114*/
*                               DO; /* MODESET EXTKEY(TCB)         0101
*                                      WORKREG(TESTREG)              */
*                                 TESTREG=TCBPKF;/* GET KEY FROM TCB */
         SLR   TESTREG,TESTREG                                     0102
         IC    TESTREG,TCBPKF(,TCBPTR)                             0102
*                                 SPKA(TESTREG);/* SET PSW KEY       */
         SPKA  0(TESTREG)                                          0103
*                               END;/* MODESET EXTKEY(TCB)         0104
*                                      WORKREG(TESTREG) KEY OF TCB OF
*                                      REQUESTOR             @ZA32114*/
*                               STARTHDR=HEADA;/* START OF HEADER  0105
*                                                            @G33SPHW*/
         L     @14,HDRPTR                                          0105
         L     @14,HEADA-1(,@14)                                   0105
         LA    @14,0(,@14)                                         0105
         LR    STARTHDR,@14                                        0105
*                               ENDHDR=STARTHDR+HDRLEN;/* GET END  0106
*                                      ADDRESS               @G33SPHW*/
         SLR   @03,@03                                             0106
         IC    @03,HDRLEN(,@14)                                    0106
         LR    ENDHDR,STARTHDR                                     0106
         ALR   ENDHDR,@03                                          0106
*                               TESTREG=STARTHDR->TESTBYTE;/* FETCH
*                                      1ST BYTE              @G33SPHW*/
         SLR   TESTREG,TESTREG                                     0107
         IC    TESTREG,TESTBYTE(,STARTHDR)                         0107
*                               TESTREG=ENDHDR->TESTBYTE;/* FETCH  0108
*                                      LAST BYTE             @G33SPHW*/
         SLR   TESTREG,TESTREG                                     0108
         IC    TESTREG,TESTBYTE(,ENDHDR)                           0108
*                               DO; /* MODESET EXTKEY(SUPR)          */
*                                 SPKA(0);/* SET PSW KEY             */
         SLR   @14,@14                                             0110
         SPKA  0(@14)                                              0110
*                               END;/* MODESET EXTKEY(SUPR) RETURN TO
*                                      KEY 0                 @G33SPHW*/
*                               RFY                                0112
*                                (TESTREG) UNRSTD;/* RELEASE WORK REG
*                                                            @ZA32114*/
*                               ABDUPRXT=ADDR(BADHDR);/* RETRY TO  0113
*                                      TERMINATE ERROR       @G33SPHW*/
         LA    @14,BADHDR                                          0113
         ST    @14,ABDUPRXT(,ABDARPTR)                             0113
*                               STARTHDR=STARTHDR+1;/* POINT AT    0114
*                                      HEADER                @G33SPHW*/
         AL    STARTHDR,@CF00058                                   0114
*                               ABDCC='F0'X;/* DOUBLE SPACE  @ZA29976*/
         MVI   ABDCC(ABDARPTR),X'F0'                               0115
*                               ABDLINE(1:HDRLEN)=HEADER(1:HDRLEN);/*
*                                      MOVE HEADER TO OUTPUT @G33SPHW*/
         BCTR  @03,0                                               0116
         EX    @03,@SM00748                                        0116
*                               PARMPTR=ABDARPTR;/* PARMLIST IN    0117
*                                      REGISTER              @G33SPHW*/
         LR    PARMPTR,ABDARPTR                                    0117
*                               CALL IEAVAD11;/* OUTPUT STORAGE    0118
*                                      HEADER                @G33SPHW*/
         L     @15,@CV00100                                        0118
         BALR  @14,@15                                             0118
*                               RETCODE=0;/* RESET RETURN CODE     0119
*                                                            @G33SPHW*/
         SLR   RETCODE,RETCODE                                     0119
*                             END;  /* END HEADER PROCESS    @G33SPHW*/
*                         END;      /* LENGTH NOT ZERO       @G33SPHW*/
@RC00095 DS    0H                                                  0122
*                     END;          /* HEADER ADDRESS ZERO   @ZM45049*/
@RC00087 DS    0H                                                  0123
*                 END;              /* NOT ZERO PARMLIST     @G33SPHW*/
@RF00085 DS    0H                                                  0124
*MSGISSUE:                                                         0124
*               IF RETCODE=4 THEN   /* ERROR                 @G33SPHW*/
@RF00080 DS    0H                                                  0124
MSGISSUE C     RETCODE,@CF00179                                    0124
         BNE   @RF00124                                            0124
*                 DO;               /* YES..                 @G33SPHW*/
*                   IF HDRDONE=ON THEN/* PARMLIST ERROR      @ZM45049*/
         TM    HDRDONE,B'10000000'                                 0126
         BNO   @RF00126                                            0126
*                     ABDLINEA(1:25)=PARMESS;/* PARMLIST MESSAGE   0127
*                                                            @ZM45049*/
         MVC   ABDLINEA(25,ABDARPTR),PARMESS                       0127
*                   ELSE            /* BAD HEADER ADDRESS    @ZM45049*/
*                     ABDLINEA(1:24)=HDRMESS;/* ERROR IN HEADER    0128
*                                                            @G33SPHW*/
         B     @RC00126                                            0128
@RF00126 MVC   ABDLINEA(24,ABDARPTR),HDRMESS                       0128
*                   PARMPTR=ABDARPTR;/* PARMLIST ADDRESS IN REG1   0129
*                                                            @G33SPHW*/
@RC00126 LR    PARMPTR,ABDARPTR                                    0129
*                   CALL IEAVAD11;  /* OUTPUT MESSAGE        @G33SPHW*/
         L     @15,@CV00100                                        0130
         BALR  @14,@15                                             0130
*                 END;              /* END ERROR HEADER      @G33SPHW*/
*             END;                  /* END NO HEADER         @G33SPHW*/
@RF00124 DS    0H                                                  0133
*                                                                  0133
*           /*********************************************************/
*           /*                                                       */
*           /* THE FOLLOWING SECTION OF CODE PRINTS OUT THE AREAS OF */
*           /* CORE DESCRIBED BY THE SNAPSHOT LIST SUPPLIED BY THE   */
*           /* USER, IF THE USER REQUESTED IT. EACH ENTRY IS CHECKED */
*           /* FOR INVALID PAGES BEFORE BEING PRINTED, AND IF A UPR  */
*           /* OCCURS, THE SNAP LIST PROCESSING IS BYPASSED AFTER A  */
*           /* MESSAGE IS PRINTED OUT. WHEN THE LIST ENTRY HAS PASSED*/
*           /* THE VALIDITY CHECK, THE ADDRESS AND LENGTH ARE PASED  */
*           /* TO IEAVAD71, FORMET, AND THE CORE IS PRINTED.         */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0133
*           LISTPTR=LISTPTR&ROUNDWRD;/* ROUND DOWN TO WORD BOUNDARY  */
@RF00078 N     LISTPTR,ROUNDWRD                                    0133
*UPIT:                                                             0134
*           ABDUPRXT=ADDR(BADADDR); /* SKIP THIS LIST ENTRY IF     0134
*                                      PROGRAM CHECK         @ZA05951*/
UPIT     LA    @14,BADADDR                                         0134
         ST    @14,ABDUPRXT(,ABDARPTR)                             0134
*           RFY                                                    0135
*             TESTREG RSTD;         /*                       @ZA32114*/
*           DO;                     /* MODESET EXTKEY(TCB)         0136
*                                      WORKREG(TESTREG)              */
*             TESTREG=TCBPKF;       /* GET KEY FROM TCB              */
         SLR   TESTREG,TESTREG                                     0137
         IC    TESTREG,TCBPKF(,TCBPTR)                             0137
*             SPKA(TESTREG);        /* SET PSW KEY                   */
         SPKA  0(TESTREG)                                          0138
*           END;                    /* MODESET EXTKEY(TCB)         0139
*                                      WORKREG(TESTREG) CHANGE TO  0139
*                                      USERS KEY             @ZA32114*/
*           RFY                                                    0140
*             ENDD RSTD;            /* RESTRICT ENDD PTR     @ZA05951*/
*           START=LISTA(1);         /* PICK UP THE BLOCK ADDRESS     */
         L     START,LISTA-1(,LISTPTR)                             0141
         LA    START,0(,START)                                     0141
*           ENDD=LISTA(2);          /* PICK UP THE BLOCK LENGTH IF 0142
*                                      UPR GO TO FAILURE             */
         L     ENDD,LISTA+3(,LISTPTR)                              0142
         LA    ENDD,0(,ENDD)                                       0142
*           SAVESTRT=START;         /* SAVE START ADDRESS            */
         LR    SAVESTRT,START                                      0143
*           SAVELNTH=ENDD-START+1;  /* SAVE LENGTH                   */
         LR    SAVELNTH,ENDD                                       0144
         SLR   SAVELNTH,START                                      0144
         AL    SAVELNTH,@CF00058                                   0144
*           IF SAVELNTH<=0          /* PRINT ONLY POSITIVE           */
*             THEN                  /* LENGTHS                       */
         LTR   SAVELNTH,SAVELNTH                                   0145
         BNP   @RT00145                                            0145
*             GOTO BADADDR;         /* GET NEXT ENTRY IN LIST AFTER
*                                      MSG WRITTEN           @ZA05951*/
*           START=START&PAGERND;    /* ROUND DOWN TO PAGE BDY        */
         N     START,PAGERND                                       0147
*           DO WHILE(START<ENDD);   /* CHECK EACH PAGE       @ZA05951*/
         B     @DE00148                                            0148
@DL00148 DS    0H                                                  0149
*             TESTREG=START->TESTBYTE;/* TRY TO FETCH FIRST BYTE   0149
*                                                            @ZA05951*/
         SLR   TESTREG,TESTREG                                     0149
         IC    TESTREG,TESTBYTE(,START)                            0149
*             START=START+PAGESIZE; /* UPDATE PTR TO NEXT PAGE     0150
*                                                            @ZA05951*/
         AL    START,PAGESIZE                                      0150
*           END;                    /* END OF CHECK LOOP     @ZA05951*/
@DE00148 CR    START,ENDD                                          0151
         BL    @DL00148                                            0151
*           TESTREG=ENDD->TESTBYTE; /* CHECK LAST BYTE       @ZA05951*/
         SLR   TESTREG,TESTREG                                     0152
         IC    TESTREG,TESTBYTE(,ENDD)                             0152
*           RFY                                                    0153
*             TESTREG UNRSTD;       /*                       @ZA05951*/
*           DO;                     /* MODESET EXTKEY(SUPR)          */
*             SPKA(0);              /* SET PSW KEY                   */
         SLR   @14,@14                                             0155
         SPKA  0(@14)                                              0155
*           END;                    /* MODESET EXTKEY(SUPR) RETURN TO
*                                      KEY 0                 @ZA05951*/
*           ABDUPRXT=ADDR(FAILURE); /* FAIL WHOLE REQUEST IF PROG  0157
*                                      CHECK HERE            @ZA05951*/
         LA    @14,FAILURE                                         0157
         ST    @14,ABDUPRXT(,ABDARPTR)                             0157
*GOOD:                                                             0158
*           ABDCC='F0'X;            /* CARRIAGE CONTROL CHARACTER TO
*                                      DOUBLE SPACE          @ZA29976*/
GOOD     MVI   ABDCC(ABDARPTR),X'F0'                               0158
*           PARMPTR=ABDARPTR;       /* SET UP PARAMETER REG          */
         LR    PARMPTR,ABDARPTR                                    0159
*           UPRFMET=ON;             /* EXPECT UPR ON FORMET          */
         OI    UPRFMET(ABDARPTR),B'01000000'                       0160
*           ABDUPRPM=ON;            /* PRINT MESSAGE AND CONTINUE    */
         OI    ABDUPRPM(ABDARPTR),B'10000000'                      0161
*           ABDBLOCK=SAVESTRT;      /* SET UP BLOCK ADDRESS          */
         ST    SAVESTRT,ABDBLOCK(,ABDARPTR)                        0162
*           ABDLENTH=SAVELNTH;      /* SET UP LENGTH                 */
         ST    SAVELNTH,ABDLENTH(,ABDARPTR)                        0163
*           CALL IEAVAD71;          /* OUTPUT BLOCK OF CORE          */
         L     @15,@CV00101                                        0164
         BALR  @14,@15                                             0164
*           IF RETCODE^=0           /* IF ERRED                      */
*             THEN                  /* LEAVE WITH                    */
         LTR   RETCODE,RETCODE                                     0165
         BNZ   @RT00165                                            0165
*             GOTO CLNUP;           /* BAD CODE              @G33SPHW*/
*           ELSE                    /* SKIP UPR PROCESSING           */
*             GO TO PASSUPR;                                       0167
         B     PASSUPR                                             0167
*FAILURE:                                                          0168
*           ABDLINEA(1:44)=FAILMESS;/* SET UP FAILURE MESSAGE        */
FAILURE  MVC   ABDLINEA(44,ABDARPTR),FAILMESS                      0168
*           PARMPTR=ABDARPTR;       /* SET UP PARAMETER REG          */
         LR    PARMPTR,ABDARPTR                                    0169
*           CALL IEAVAD11;          /* OUTPUT ERROR MESSAGE          */
         L     @15,@CV00100                                        0170
         BALR  @14,@15                                             0170
*           IF RETCODE^=0           /* IF ERRED                      */
*             THEN                  /* LEAVE WITH                    */
         LTR   RETCODE,RETCODE                                     0171
         BNZ   @RT00171                                            0171
*             GOTO CLNUP;           /* BAD CODE              @G33SPHW*/
*BADADDR:                                                          0173
*           RETCODE=4;              /* UPR ROUTINE FOR STORAGE LIST
*                                                            @ZA05951*/
BADADDR  LA    RETCODE,4                                           0173
*PASSUPR:                                                          0174
*           ABDUPRXT=ADDR(FAILURE); /* FAIL WHOLE REQUEST IF PROG  0174
*                                      CHECK HERE            @ZA05951*/
PASSUPR  LA    @14,FAILURE                                         0174
         ST    @14,ABDUPRXT(,ABDARPTR)                             0174
*           IF RETCODE=4 THEN       /* STORAGE OUTPUTTED OK  @G33SPHW*/
         C     RETCODE,@CF00179                                    0175
         BNE   @RF00175                                            0175
*             DO;                   /* NO...ERROR MSG        @G33SPHW*/
*               ABDLINEA(1:44)=FAILMESS;/* PUT MESSAGE IN OUTPUT   0177
*                                      BUFFER                @G33SPHW*/
         MVC   ABDLINEA(44,ABDARPTR),FAILMESS                      0177
*               PARMPTR=ABDARPTR;   /* POINT AT PARMLIST     @G33SPHW*/
         LR    PARMPTR,ABDARPTR                                    0178
*               RETCODE=0;          /* ZERO RETCODE          @G33SPHW*/
         SLR   RETCODE,RETCODE                                     0179
*               CALL IEAVAD11;      /* OUTPUT MESSAGE        @G33SPHW*/
         L     @15,@CV00100                                        0180
         BALR  @14,@15                                             0180
*             END;                  /* END ERROR STORAGE     @G33SPHW*/
*           IF LASTONE^=ON THEN     /* LAST STORAGE LIST     @G33SPHW*/
@RF00175 TM    LASTONE(LISTPTR),B'10000000'                        0182
         BO    @RF00182                                            0182
*             DO;                   /* YES...                @G33SPHW*/
*               LISTPTR=LISTPTR+8;  /* NEXT STORAGE RANGE    @G33SPHW*/
         AL    LISTPTR,@CF00051                                    0184
*               IF HDRDONE=OFF THEN /* HDR ACTIVE            @G33SPHW*/
         TM    HDRDONE,B'10000000'                                 0185
         BNZ   @RF00185                                            0185
*                 DO;               /* YES..                 @G33SPHW*/
*                   IF HDRLAST=OFF THEN/* LAST HEADER        @G33SPHW*/
         L     @14,HDRPTR                                          0187
         TM    HDRLAST(@14),B'10000000'                            0187
         BNZ   @RF00187                                            0187
*                     DO;           /* NO                    @G33SPHW*/
*                       HDRPTR=HDRPTR+4;/* NEXT HEADER       @G33SPHW*/
         AL    @14,@CF00179                                        0189
         ST    @14,HDRPTR                                          0189
*                     END;          /* END NOT LAST          @G33SPHW*/
*                   ELSE            /* TURN HEADERS OFF      @G33SPHW*/
*                     HDRDONE=ON;   /* SET HEADER SWITCH     @G33SPHW*/
         B     @RC00187                                            0191
@RF00187 OI    HDRDONE,B'10000000'                                 0191
*                 END;              /* HEADER NOT ACTIVE     @G33SPHW*/
*               GO TO CKHDR;        /* PROCESS NEXT LIST     @G33SPHW*/
         B     CKHDR                                               0193
*             END;                  /* NO MORE STORAGE RANGES      0194
*                                                            @G33SPHW*/
*         END;                      /* NO STORAGE SPECIFIED  @G33SPHW*/
@RF00182 DS    0H                                                  0196
*     END;                          /* NO STORAGE LIST       @G33SPHW*/
@RF00068 DS    0H                                                  0197
*CLNUP:                                                            0197
*   SAVERET=RETCODE;                /* PRESERVE RETURN CODE  @G33SPHW*/
CLNUP    LR    SAVERET,RETCODE                                     0197
*   PARMPTR=ADDR(ABDASIZE);         /* FREEMAIN LIST REGISTER      0198
*                                                            @G33SPHW*/
         LA    PARMPTR,ABDASIZE(,ABDARPTR)                         0198
*   ABDAAREA=SAVEPTR;               /* ADDRESS TO FREE       @G33SPHW*/
         ST    SAVEPTR,ABDAAREA(,ABDARPTR)                         0199
*   SAVEPTR=SAVEPTR->PRESAPTR;      /* SETUP PREVIOUS SAVEAREA     0200
*                                                            @G33SPHW*/
         L     SAVEPTR,PRESAPTR(,SAVEPTR)                          0200
*   NEXSAPTR=0;                     /* CLEAR POINTER TO AREA TO BE 0201
*                                      FREED                 @G33SPHW*/
         SLR   @14,@14                                             0201
         ST    @14,NEXSAPTR(,SAVEPTR)                              0201
*   GENERATE;                                                      0202
*                                     /* FREE WORKAREA       @G33SPHW*/
         FREEMAIN E,LV=@ENDDATD-@DATD+72,SP=253,A=ABDGMA(ABDARPTR),    X
               MF=(E,(1))
*   RETCODE=SAVERET;                /* RESTORE RETURN CODE   @G33SPHW*/
         LR    RETCODE,SAVERET                                     0203
*   END IEAVAD0F                    /* RETURN TO IEAVAD01    @G33SPHW*/
*                                                                  0204
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (HDRSPEC )                                       */
*/*%INCLUDE SYSLIB  (HDRDECL )                                       */
*/*%INCLUDE SYSLIB  (IHAABDA )                                       */
*/*%INCLUDE SYSLIB  (IKJTCB  )                                       */
*/*%INCLUDE SYSLIB  (SNPHDOUT)                                       */
*/*%INCLUDE SYSLIB  (SNPSTOUT)                                       */
*                                                                  0204
*       ;                                                          0204
         B     @EL00001                                            0204
@DATA    DS    0H
@SM00748 MVC   ABDLINE(0,ABDARPTR),HEADER(STARTHDR)
@DATD    DSECT
         DS    0F
IEAVAD0F CSECT
         DS    0F
@CF00058 DC    F'1'
@CF00179 DC    F'4'
@CF00051 DC    F'8'
@DATD    DSECT
         DS    0D
HDRPTR   DS    A
TESTWORD DS    A
HDRDONE  DS    BL1
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IEAVAD0F CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV00100 DC    V(IEAVAD11)
@CV00101 DC    V(IEAVAD71)
         DS    0D
PAGESIZE DC    XL4'00001000'
PAGERND  DC    XL4'FFFFF000'
ROUNDWRD DC    XL4'FFFFFFFC'
FAILMESS DC    CL44'0-STORAGE NOT DUMPED DUE TO BAD LIST ADDRESS'
HDRMESS  DC    CL24'0-INVALID STORAGE HEADER'
PARMESS  DC    CL25'0-INVALID HEADER PARMLIST'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
PARMPTR  EQU   @01
START    EQU   @01
ABDARPTR EQU   @02
ENDD     EQU   @06
TCBPTR   EQU   @04
TESTREG  EQU   @05
SAVERET  EQU   @07
LISTPTR  EQU   @08
REG10    EQU   @10
REG9     EQU   @09
VALADD   EQU   @15
AUTOPTR  EQU   @12
RETCODE  EQU   @15
SAVEPTR  EQU   @13
SAVESTRT EQU   @09
SAVELNTH EQU   @10
ENDHDR   EQU   @09
STARTHDR EQU   @10
R0       EQU   @00
NEXSAPTR EQU   8
PRESAPTR EQU   4
TESTBYTE EQU   0
LIST     EQU   0
LISTA    EQU   LIST+1
LISTBITS EQU   4
LASTONE  EQU   LISTBITS
HDRLEN   EQU   0
HEADER   EQU   0
HEAD     EQU   0
HDRBITS  EQU   HEAD
HDRLAST  EQU   HDRBITS
HEADA    EQU   HEAD+1
ABDAREA  EQU   0
ABDTCB   EQU   ABDAREA
ABDPARMS EQU   ABDAREA+12
ABDFLAG  EQU   ABDPARMS+1
APFABEND EQU   ABDFLAG
APFSNAPP EQU   ABDFLAG
APFHDR   EQU   ABDFLAG
APFSDATA EQU   ABDPARMS+4
APFSDAT1 EQU   ABDPARMS+5
APFPDATA EQU   ABDPARMS+6
ABDSNAPP EQU   ABDPARMS+16
ABDHDRAD EQU   ABDPARMS+20
ABDPTRS  EQU   ABDAREA+84
ABDUPRXT EQU   ABDAREA+112
ABDFLAG1 EQU   ABDAREA+136
ABDFLAG2 EQU   ABDAREA+137
ABDRES1  EQU   ABDAREA+139
ABDUPRF  EQU   ABDAREA+265
UPRFMET  EQU   ABDUPRF
ABDUPRFN EQU   ABDAREA+266
ABDUPRPM EQU   ABDUPRFN
ABDBLNKS EQU   ABDAREA+267
ABDBLOCK EQU   ABDAREA+272
ABDLENTH EQU   ABDAREA+276
ABDBUFFS EQU   ABDAREA+308
ABDGMA   EQU   ABDAREA+316
ABDAAREA EQU   ABDGMA
ABDASIZE EQU   ABDGMA+4
ESPARM   EQU   ABDAREA+340
ESTAEFLG EQU   ESPARM+28
ABDLINEA EQU   ABDAREA+384
ABDCC    EQU   ABDLINEA
ABDLINE  EQU   ABDLINEA+1
TCBFIX   EQU   0
TCBFRS   EQU   TCBFIX
TCB      EQU   0
TCBPIE   EQU   TCB+4
TCBPMASK EQU   TCBPIE
TCBCMP   EQU   TCB+16
TCBCMPF  EQU   TCBCMP
TCBCPP   EQU   TCBCMPF
TCBSTCC  EQU   TCBCMPF
TCBCDBL  EQU   TCBCMPF
TCBCWTO  EQU   TCBCMPF
TCBCIND  EQU   TCBCMPF
TCBCMSG  EQU   TCBCMPF
TCBTRN   EQU   TCB+20
TCBABF   EQU   TCBTRN
TCBMSS   EQU   TCB+24
TCBPKF   EQU   TCB+28
TCBFLGS  EQU   TCB+29
TCBFLGS1 EQU   TCBFLGS
TCBFLGS2 EQU   TCBFLGS+1
TCBFLGS3 EQU   TCBFLGS+2
TCBFLGS4 EQU   TCBFLGS+3
TCBFLGS5 EQU   TCBFLGS+4
TCBABWF  EQU   TCBFLGS5
TCBJPQ   EQU   TCB+44
TCBPURGE EQU   TCBJPQ
TCBGRS   EQU   TCB+48
TCBFSA   EQU   TCB+112
TCBTME   EQU   TCB+120
TCBJSTCB EQU   TCB+124
TCBTSFLG EQU   TCB+148
TCBTSTSK EQU   TCBTSFLG
TCBSTAB  EQU   TCB+160
TCBNSTAE EQU   TCBSTAB
TCBTCT   EQU   TCB+164
TCBTCTGF EQU   TCBTCT
TCBSCNDY EQU   TCB+172
TCBNDSP  EQU   TCBSCNDY
TCBNDSP1 EQU   TCBNDSP+1
TCBNDSP2 EQU   TCBNDSP+2
TCBNDSP3 EQU   TCBNDSP+3
TCBJSCB  EQU   TCB+180
TCBRECDE EQU   TCBJSCB
TCBEXT1  EQU   TCB+196
TCBBITS  EQU   TCB+200
TCBNDSP4 EQU   TCBBITS
TCBNDSP5 EQU   TCBBITS+1
TCBFLGS6 EQU   TCBBITS+2
TCBFLGS7 EQU   TCBBITS+3
TCBDAR   EQU   TCB+204
TCBDARC  EQU   TCBDAR
TCBEXT2  EQU   TCB+208
TCBXSCT  EQU   TCB+240
TCBXSCT1 EQU   TCBXSCT
TCBFOE   EQU   TCB+244
TCBESTAE EQU   TCB+264
TCBESTRM EQU   TCBESTAE+1
TCBFBYT1 EQU   TCB+276
TCBFBYT2 EQU   TCB+277
TCBRV124 EQU   TCB+278
TCBRV133 EQU   TCB+279
TCBXTNT2 EQU   0
TCBGTF   EQU   TCBXTNT2
TCBTFLG  EQU   TCBGTF
TCBRV146 EQU   TCBXTNT2+28
TCBRV155 EQU   TCBXTNT2+29
TCBRV164 EQU   TCBXTNT2+30
TCBRV173 EQU   TCBXTNT2+31
STOREMSG EQU   FAILMESS
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
@NM00033 EQU   TCBXTNT2+32
TCBRV181 EQU   TCBRV173
TCBRV180 EQU   TCBRV173
TCBRV179 EQU   TCBRV173
TCBRV178 EQU   TCBRV173
TCBRV177 EQU   TCBRV173
TCBRV176 EQU   TCBRV173
TCBRV175 EQU   TCBRV173
TCBRV174 EQU   TCBRV173
TCBRV172 EQU   TCBRV164
TCBRV171 EQU   TCBRV164
TCBRV170 EQU   TCBRV164
TCBRV169 EQU   TCBRV164
TCBRV168 EQU   TCBRV164
TCBRV167 EQU   TCBRV164
TCBRV166 EQU   TCBRV164
TCBRV165 EQU   TCBRV164
TCBRV163 EQU   TCBRV155
TCBRV162 EQU   TCBRV155
TCBRV161 EQU   TCBRV155
TCBRV160 EQU   TCBRV155
TCBRV159 EQU   TCBRV155
TCBRV158 EQU   TCBRV155
TCBRV157 EQU   TCBRV155
TCBRV156 EQU   TCBRV155
TCBRV154 EQU   TCBRV146
TCBRV153 EQU   TCBRV146
TCBRV152 EQU   TCBRV146
TCBRV151 EQU   TCBRV146
TCBRV150 EQU   TCBRV146
TCBRV149 EQU   TCBRV146
TCBRV148 EQU   TCBRV146
TCBRV147 EQU   TCBRV146
TCBRV145 EQU   TCBXTNT2+26
TCBRV144 EQU   TCBXTNT2+24
TCBRV143 EQU   TCBXTNT2+20
TCBRV142 EQU   TCBXTNT2+16
TCBRSV49 EQU   TCBXTNT2+12
TCBEVENT EQU   TCBXTNT2+8
TCBRCMP  EQU   TCBXTNT2+5
TCBRSVAB EQU   TCBXTNT2+4
TCBGTFA  EQU   TCBGTF+1
TCBRSV47 EQU   TCBTFLG
TCBRSV46 EQU   TCBTFLG
TCBRSV45 EQU   TCBTFLG
TCBRSV44 EQU   TCBTFLG
TCBRSV43 EQU   TCBTFLG
TCBDSPIT EQU   TCBTFLG
TCBERRTN EQU   TCBTFLG
TCBASYNC EQU   TCBTFLG
@NM00032 EQU   TCB+296
TCBSVCA2 EQU   TCB+292
TCBSWASA EQU   TCB+288
TCBDBTB  EQU   TCB+284
TCBRPT   EQU   TCB+280
TCBRV141 EQU   TCBRV133
TCBRV140 EQU   TCBRV133
TCBRV139 EQU   TCBRV133
TCBRV138 EQU   TCBRV133
TCBRV137 EQU   TCBRV133
TCBRV136 EQU   TCBRV133
TCBRV135 EQU   TCBRV133
TCBRV134 EQU   TCBRV133
TCBRV132 EQU   TCBRV124
TCBRV131 EQU   TCBRV124
TCBRV130 EQU   TCBRV124
TCBRV129 EQU   TCBRV124
TCBRV128 EQU   TCBRV124
TCBRV127 EQU   TCBRV124
TCBRV126 EQU   TCBRV124
TCBRV125 EQU   TCBRV124
TCBRV123 EQU   TCBFBYT2
TCBRV122 EQU   TCBFBYT2
TCBECBNV EQU   TCBFBYT2
TCBSSSYN EQU   TCBFBYT2
TCBFPRAP EQU   TCBFBYT2
TCBFDW   EQU   TCBFBYT2
TCBFMW   EQU   TCBFBYT2
TCBCNCB  EQU   TCBFBYT2
TCBLLH   EQU   TCBFBYT1
TCBRV113 EQU   TCBFBYT1
TCBEOT   EQU   TCBFBYT1
TCBRTM2  EQU   TCBFBYT1
TCBPGNLY EQU   TCBFBYT1
TCBNDIOS EQU   TCBFBYT1
TCBRV327 EQU   TCBFBYT1
TCBEOTFM EQU   TCBFBYT1
TCBAFFN  EQU   TCB+274
TCBRV326 EQU   TCB+272
TCBUKYSP EQU   TCB+268
TCBMODE  EQU   TCBESTAE+3
TCBERTYP EQU   TCBESTAE+2
TCBRV314 EQU   TCBESTRM
TCBRV313 EQU   TCBESTRM
TCBRV312 EQU   TCBESTRM
TCBRV311 EQU   TCBESTRM
TCBRV310 EQU   TCBESTRM
TCBRV309 EQU   TCBESTRM
TCBRV308 EQU   TCBESTRM
TCBETERM EQU   TCBESTRM
TCBSCBKY EQU   TCBESTAE
TCBRTM12 EQU   TCB+260
TCBTCBID EQU   TCB+256
TCBSTAWA EQU   TCB+252
TCBSWA   EQU   TCB+248
TCBFOEA  EQU   TCBFOE+1
TCBRSV42 EQU   TCBFOE
TCBCCPVI EQU   TCBXSCT+2
TCBRV325 EQU   TCBXSCT+1
TCBRV324 EQU   TCBXSCT1
TCBRV323 EQU   TCBXSCT1
TCBRV322 EQU   TCBXSCT1
TCBRV321 EQU   TCBXSCT1
TCBRV320 EQU   TCBXSCT1
TCBRV319 EQU   TCBXSCT1
TCBS3A   EQU   TCBXSCT1
TCBACTIV EQU   TCBXSCT1
TCBRSV41 EQU   TCB+239
TCBTID   EQU   TCB+238
TCBRSVAA EQU   TCB+237
TCBABCUR EQU   TCB+236
TCBTMSAV EQU   TCB+232
TCBIOTIM EQU   TCB+228
TCBRTWA  EQU   TCB+224
TCBBACK  EQU   TCB+220
TCBTIRB  EQU   TCB+216
TCBAECB  EQU   TCB+212
TCBEXT2A EQU   TCBEXT2+1
TCBRSV39 EQU   TCBEXT2
TCBSTMCT EQU   TCB+207
TCBSYSCT EQU   TCB+206
TCBRSV37 EQU   TCB+205
TCBEXSVC EQU   TCBDAR
TCBDARMS EQU   TCBDAR
TCBDARWT EQU   TCBDAR
TCBDARO  EQU   TCBDAR
TCBDARMC EQU   TCBDARC
TCBDARD  EQU   TCBDAR
TCBDARS  EQU   TCBDAR
TCBDARP  EQU   TCBDAR
TCBGTOFM EQU   TCBFLGS7
TCBADMP  EQU   TCBFLGS7
TCBRSTSK EQU   TCBFLGS7
TCBSVCS  EQU   TCBFLGS7
TCBSTACK EQU   TCBFLGS7
TCBRSV34 EQU   TCBFLGS7
TCBRSV33 EQU   TCBFLGS7
TCBGPECB EQU   TCBFLGS7
TCBNTJS  EQU   TCBFLGS6
TCBAPG   EQU   TCBFLGS6
TCBMIGR  EQU   TCBFLGS6
TCBRV303 EQU   TCBFLGS6
TCBSPVLK EQU   TCBFLGS6
TCBCPU   EQU   TCBFLGS6
TCBPIE17 EQU   TCBFLGS6
TCBRV    EQU   TCBFLGS6
TCBRSV79 EQU   TCBNDSP5
TCBRSV78 EQU   TCBNDSP5
TCBRSV77 EQU   TCBNDSP5
TCBRSV76 EQU   TCBNDSP5
TCBRSV75 EQU   TCBNDSP5
TCBRSV74 EQU   TCBNDSP5
TCBRSV95 EQU   TCBNDSP5
TCBRSV94 EQU   TCBNDSP5
TCBRSV93 EQU   TCBNDSP4
TCBRSV92 EQU   TCBNDSP4
TCBRSV91 EQU   TCBNDSP4
TCBRSV90 EQU   TCBNDSP4
TCBRSV89 EQU   TCBNDSP4
TCBRSV88 EQU   TCBNDSP4
TCBRSV87 EQU   TCBNDSP4
TCBRSV86 EQU   TCBNDSP4
TCBEXT1A EQU   TCBEXT1+1
TCBRSV32 EQU   TCBEXT1
TCBEXCPD EQU   TCB+192
TCBIOBRC EQU   TCB+188
TCBDDWTC EQU   TCB+186
TCBDDEXC EQU   TCB+184
TCBJSCBB EQU   TCBJSCB+1
@NM00031 EQU   TCBRECDE
TCBREC   EQU   TCBRECDE
TCBMDIDS EQU   TCB+176
TCBNDINT EQU   TCBNDSP3
TCBRSV27 EQU   TCBNDSP3
TCBRSV26 EQU   TCBNDSP3
TCBRSV25 EQU   TCBNDSP3
TCBRSV24 EQU   TCBNDSP3
TCBSRBND EQU   TCBNDSP3
TCBRV302 EQU   TCBNDSP3
TCBLJSND EQU   TCBNDSP3
TCBABE   EQU   TCBNDSP2
TCBDSS   EQU   TCBNDSP2
TCBOWAIT EQU   TCBNDSP2
TCBIWAIT EQU   TCBNDSP2
TCBNDTS  EQU   TCBNDSP2
TCBNDSVC EQU   TCBNDSP2
TCBSTPP  EQU   TCBNDSP2
TCBABD   EQU   TCBNDSP2
TCBRSV22 EQU   TCBNDSP1
TCBPIEND EQU   TCBNDSP1
TCBTPSP  EQU   TCBNDSP1
TCBDDRND EQU   TCBNDSP1
TCBRSPND EQU   TCBNDSP1
TCBRSTND EQU   TCBNDSP1
TCBDARPN EQU   TCBNDSP1
TCBDARTN EQU   TCBNDSP1
TCBNDSP0 EQU   TCBNDSP
TCBUSER  EQU   TCB+168
TCBTCTB  EQU   TCBTCT+1
TCBRSV9C EQU   TCBTCTGF
TCBRSV9B EQU   TCBTCTGF
TCBRSV9A EQU   TCBTCTGF
TCBRSV99 EQU   TCBTCTGF
TCBRSV98 EQU   TCBTCTGF
TCBRSV97 EQU   TCBTCTGF
TCBRSV20 EQU   TCBTCTGF
TCBSMFGF EQU   TCBTCTGF
TCBSTABB EQU   TCBSTAB+1
TCBSTCUR EQU   TCBNSTAE
TCBRV301 EQU   TCBNSTAE
TCBSYNCH EQU   TCBNSTAE
TCBHALT  EQU   TCBNSTAE
TCBPPSUP EQU   TCBNSTAE
TCB33E   EQU   TCBNSTAE
TCBQUIES EQU   TCBNSTAE
TCBSTABE EQU   TCBNSTAE
TCBAQE   EQU   TCB+156
TCBPQE   EQU   TCB+152
TCBTSDP  EQU   TCB+151
TCBTSLP  EQU   TCB+150
TCBSTPCT EQU   TCB+149
TCBCPUBN EQU   TCBTSFLG
TCBDYDSP EQU   TCBTSFLG
TCBRSV18 EQU   TCBTSFLG
TCBRSV17 EQU   TCBTSFLG
TCBTIOTG EQU   TCBTSFLG
TCBATT   EQU   TCBTSFLG
TCBSTPPR EQU   TCBTSFLG
TCBRV300 EQU   TCBTSTSK
TCBECB   EQU   TCB+144
TCBIQE   EQU   TCB+140
TCBLTC   EQU   TCB+136
TCBOTC   EQU   TCB+132
TCBNTC   EQU   TCB+128
TCBJSTCA EQU   TCBJSTCB+1
TCBRSV16 EQU   TCBJSTCB
TCBTQET  EQU   TCBTME
TCBTCB   EQU   TCB+116
TCBFSAB  EQU   TCBFSA+1
TCBQEL   EQU   TCBFSA
TCBGRS15 EQU   TCBGRS+60
TCBGRS14 EQU   TCBGRS+56
TCBGRS13 EQU   TCBGRS+52
TCBGRS12 EQU   TCBGRS+48
TCBGRS11 EQU   TCBGRS+44
TCBGRS10 EQU   TCBGRS+40
TCBGRS9  EQU   TCBGRS+36
TCBGRS8  EQU   TCBGRS+32
TCBGRS7  EQU   TCBGRS+28
TCBGRS6  EQU   TCBGRS+24
TCBGRS5  EQU   TCBGRS+20
TCBGRS4  EQU   TCBGRS+16
TCBGRS3  EQU   TCBGRS+12
TCBGRS2  EQU   TCBGRS+8
TCBGRS1  EQU   TCBGRS+4
TCBGRS0  EQU   TCBGRS
TCBJPQB  EQU   TCBJPQ+1
TCBRSV15 EQU   TCBPURGE
TCBRSV14 EQU   TCBPURGE
TCBRSV13 EQU   TCBPURGE
TCBRSV12 EQU   TCBPURGE
TCBRSV11 EQU   TCBPURGE
TCBRSV10 EQU   TCBPURGE
TCBRSV09 EQU   TCBPURGE
TCBJPQF  EQU   TCBPURGE
TCBJLB   EQU   TCB+40
TCBLLS   EQU   TCB+36
TCBDSP   EQU   TCB+35
TCBLMP   EQU   TCB+34
TCBPNDSP EQU   TCBFLGS5
TCBFCD1  EQU   TCBFLGS5
TCBSTP   EQU   TCBFLGS5
TCBSYS   EQU   TCBFLGS5
TCBANDSP EQU   TCBFLGS5
TCBPAGE  EQU   TCBFLGS5
TCBUXNDF EQU   TCBABWF
TCBFC    EQU   TCBFLGS5
TCBONDSP EQU   TCBFLGS4
TCBMPCND EQU   TCBFLGS4
TCBMPCVQ EQU   TCBFLGS4
TCBUXNDV EQU   TCBFLGS4
TCBHNDSP EQU   TCBFLGS4
TCBRQENA EQU   TCBFLGS4
TCBSER   EQU   TCBFLGS4
TCBNDUMP EQU   TCBFLGS4
TCBDWSTA EQU   TCBFLGS3
TCBRSV08 EQU   TCBFLGS3
TCBRSV07 EQU   TCBFLGS3
TCBRSV06 EQU   TCBFLGS3
TCBABGM  EQU   TCBFLGS3
TCBABTRM EQU   TCBFLGS3
TCBADINP EQU   TCBFLGS3
TCBFSM   EQU   TCBFLGS3
TCBFTS   EQU   TCBFLGS2
TCBFETXR EQU   TCBFLGS2
TCBFDSOP EQU   TCBFLGS2
TCBFJMC  EQU   TCBFLGS2
TCBFSMC  EQU   TCBFLGS2
TCBFABOP EQU   TCBFLGS2
TCBFSTI  EQU   TCBFLGS2
TCBFOINP EQU   TCBFLGS2
TCBFX    EQU   TCBFLGS1
TCBFS    EQU   TCBFLGS1
TCBFT    EQU   TCBFLGS1
TCBPDUMP EQU   TCBFLGS1
TCBNONPR EQU   TCBFLGS1
TCBFERA  EQU   TCBFLGS1
TCBFE    EQU   TCBFLGS1
TCBFA    EQU   TCBFLGS1
TCBZERO  EQU   TCBPKF
TCBFLAG  EQU   TCBPKF
TCBMSSB  EQU   TCBMSS+1
TCBRSV03 EQU   TCBMSS
TCBTRNB  EQU   TCBTRN+1
TCBRSV02 EQU   TCBABF
TCBOLTEP EQU   TCBABF
TCBTCP   EQU   TCBABF
TCBTCPP  EQU   TCBABF
TCBRSV01 EQU   TCBABF
TCBGRPH  EQU   TCBABF
TCBNOCHK EQU   TCBABF
TCBMOD91 EQU   TCBABF
TCBCMPC  EQU   TCBCMP+1
TCBRV318 EQU   TCBCMSG
TCBRV317 EQU   TCBCIND
TCBRV316 EQU   TCBCWTO
TCBCASID EQU   TCBCDBL
TCBNOCC  EQU   TCBSTCC
TCBDMPO  EQU   TCBCPP
TCBCSTEP EQU   TCBCMPF
TCBCREQ  EQU   TCBCMPF
TCBTIO   EQU   TCB+12
TCBDEB   EQU   TCB+8
TCBPIEA  EQU   TCBPIE+1
TCBPM    EQU   TCBPMASK
@NM00030 EQU   TCBPMASK
TCBRBP   EQU   TCB
TCBFRS6  EQU   TCBFRS+24
TCBFRS4  EQU   TCBFRS+16
TCBFRS2  EQU   TCBFRS+8
TCBFRS0  EQU   TCBFRS
ABDTRLN  EQU   ABDAREA+676
ABDSAVE1 EQU   ABDAREA+672
ABDSAVHD EQU   ABDAREA+592
ABDPADC  EQU   ABDAREA+589
ABDSRC2  EQU   ABDAREA+382
ABDLOG   EQU   ABDAREA+380
ABDSRC1  EQU   ABDAREA+378
ABDPHY   EQU   ABDAREA+376
ABDLCNT  EQU   ABDAREA+372
@NM00029 EQU   ESPARM+29
@NM00028 EQU   ESTAEFLG
EDCB     EQU   ESTAEFLG
ETCB     EQU   ESTAEFLG
ESUBSYT  EQU   ESTAEFLG
ERESTART EQU   ESPARM+24
EMODNAME EQU   ESPARM+16
EABDAREA EQU   ESPARM+12
ESAUTOP  EQU   ESPARM+8
ESBSREG2 EQU   ESPARM+4
ESBSREG  EQU   ESPARM
ABDRTRN  EQU   ABDAREA+336
ABDSVCB  EQU   ABDAREA+332
@NM00027 EQU   ABDGMA+14
ABDCDID  EQU   ABDGMA+12
ABDPAREA EQU   ABDGMA+8
ABDBUFSZ EQU   ABDBUFFS+4
ABDBUFAD EQU   ABDBUFFS
ABSLCTSV EQU   ABDAREA+304
ABDSTADS EQU   ABDAREA+300
ABDUPRID EQU   ABDAREA+296
ABDPCAP  EQU   ABDAREA+295
ABDLLNGH EQU   ABDAREA+294
ABDINCPL EQU   ABDAREA+292
ABDFWORK EQU   ABDAREA+288
ABDIDENT EQU   ABDAREA+286
ABDIND   EQU   ABDAREA+284
ABDSIZE  EQU   ABDAREA+280
ABDSTAD  EQU   ABDAREA+268
@NM00026 EQU   ABDBLNKS
@NM00025 EQU   ABDBLNKS
@NM00024 EQU   ABDBLNKS
@NM00023 EQU   ABDBLNKS
@NM00022 EQU   ABDBLNKS
@NM00021 EQU   ABDBLNKS
@NM00020 EQU   ABDBLNKS
ABDBLKN3 EQU   ABDBLNKS
@NM00019 EQU   ABDUPRFN
@NM00018 EQU   ABDUPRFN
@NM00017 EQU   ABDUPRFN
@NM00016 EQU   ABDUPRFN
@NM00015 EQU   ABDUPRFN
@NM00014 EQU   ABDUPRFN
ABDUPRSL EQU   ABDUPRFN
@NM00013 EQU   ABDUPRF
@NM00012 EQU   ABDUPRF
@NM00011 EQU   ABDUPRF
@NM00010 EQU   ABDUPRF
@NM00009 EQU   ABDUPRF
UPRFMT20 EQU   ABDUPRF
UPRFMAT  EQU   ABDUPRF
ABDFMTWK EQU   ABDAREA+256
ABDLPTR  EQU   ABDAREA+252
ABDLLINE EQU   ABDAREA+248
ABDBPTR  EQU   ABDAREA+244
ABDSSPAR EQU   ABDAREA+188
ABDWORK  EQU   ABDAREA+140
@NM00008 EQU   ABDRES1
ABDTRSV  EQU   ABDRES1
ABDPGHD  EQU   ABDRES1
ABDFMTLD EQU   ABDRES1
ABDSQA   EQU   ABDRES1
ABDOLSQA EQU   ABDRES1
ABDREGS  EQU   ABDRES1
ABDPSW   EQU   ABDRES1
ABDKEY   EQU   ABDAREA+138
ABDLSQA  EQU   ABDFLAG2
ABDSTAT  EQU   ABDFLAG2
ABDSWAP  EQU   ABDFLAG2
ABDGTFCL EQU   ABDFLAG2
ABDTRNAV EQU   ABDFLAG2
ABDTRBIT EQU   ABDFLAG2
ABDGTF   EQU   ABDFLAG2
ABDSUPER EQU   ABDFLAG2
ABDIDX   EQU   ABDFLAG1
ABDSPHD  EQU   ABDFLAG1
ABDSVCHD EQU   ABDFLAG1
ABDSQSDM EQU   ABDFLAG1
ABDLSTHD EQU   ABDFLAG1
ABDQCBMN EQU   ABDFLAG1
ABDQCBMJ EQU   ABDFLAG1
ABDQCBHD EQU   ABDFLAG1
ABDPGWK  EQU   ABDAREA+128
ABDWORK1 EQU   ABDAREA+120
ABDRESV3 EQU   ABDAREA+116
ABDCP1   EQU   ABDAREA+108
ABDLP    EQU   ABDAREA+104
ABDFP    EQU   ABDAREA+100
ABDCP    EQU   ABDAREA+96
ABDPTRS3 EQU   ABDPTRS+8
ABDPTRS2 EQU   ABDPTRS+4
ABDPTRS1 EQU   ABDPTRS
ABDPCTR  EQU   ABDAREA+82
ABDLCTR  EQU   ABDAREA+80
ABDIOBP  EQU   ABDAREA+76
ABDPTR   EQU   ABDAREA+72
ABDDCB   EQU   ABDAREA+68
ABDLEN   EQU   ABDAREA+66
ABDTYPE  EQU   ABDAREA+64
ABDECB   EQU   ABDAREA+60
ABDSAVE  EQU   ABDAREA+56
ABDDECB  EQU   ABDAREA+52
ABDPARA  EQU   ABDAREA+48
ABDTABPT EQU   ABDAREA+44
ABDINXPT EQU   ABDAREA+40
ABDCTR   EQU   ABDAREA+38
@NM00007 EQU   ABDAREA+36
ABDPTCBP EQU   ABDPARMS+12
ABDPDCBP EQU   ABDPARMS+8
@NM00006 EQU   ABDPARMS+7
@NM00005 EQU   APFPDATA
APFSPALL EQU   APFPDATA
APFPSW   EQU   APFPDATA
APFJPA   EQU   APFPDATA
APFLPA   EQU   APFPDATA
APFREGS  EQU   APFPDATA
APFSAVE2 EQU   APFPDATA
APFSAVE  EQU   APFPDATA
@NM00004 EQU   APFSDAT1
APFERR   EQU   APFSDAT1
APFIO    EQU   APFSDAT1
APFDM    EQU   APFSDATA
APFQCB   EQU   APFSDATA
APFSUPDA EQU   APFSDATA
APFTRACE EQU   APFSDATA
APFSWA   EQU   APFSDATA
APFLSQA  EQU   APFSDATA
APFSQA   EQU   APFSDATA
APFNUC   EQU   APFSDATA
@NM00003 EQU   ABDPARMS+2
APFTCB   EQU   ABDFLAG
APFID    EQU   ABDFLAG
APFENVS2 EQU   ABDFLAG
APFVS2   EQU   ABDFLAG
APFSNAP  EQU   ABDFLAG
ABDPID   EQU   ABDPARMS
ABDCRB   EQU   ABDAREA+8
ABDCTCB  EQU   ABDAREA+4
@NM00002 EQU   HDRBITS
@NM00001 EQU   LIST
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00145 EQU   BADADDR
@RT00165 EQU   CLNUP
@RF00165 EQU   PASSUPR
@RT00171 EQU   CLNUP
@RF00185 EQU   CKHDR
@RC00187 EQU   CKHDR
@ENDDATA EQU   *
         END   IEAVAD0F,(C'PLS2111',0701,78143)
