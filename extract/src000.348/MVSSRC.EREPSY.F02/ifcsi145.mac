         TITLE 'IFCSI145 MODEL  145 CHANNEL SUMMARY'
*
*
*  DSGEN MACRO     DSGEN MACRO     DSGEN MACRO     DSGEN MACRO        *
         SPACE 2
         MACRO
&NAME    DSGEN
.*                            THIS MACRO GENERATES ONE DSECT WORD
.*                                 FORMATTED FOR THE SUBJECT LOG RECORD
.*                                 EACH OPERAND HAS TWO SUB LISTS. THE
.*                                 FIRST IS THE NAME OF THE LOG ITEM
.*                                 WHILE THE SECOND IS THE # OF BITS TO
.*                                 ALLOCATE FOR THIS ITEM. ITEMS MUST
.*                                 BE DEFINED CONTIGUOUSLY WITHOUT GAPS
.*                                 UNUSED BIT GROUPS MUST BE GIVEN
.*                                 DUMMY NAMES. THE NAMES PROVIDED FOR
.*                                 THE LOG ITEMS MAY THEN BE USED IN
.*                                 THE CONVERSION MACRO INSTRUCTIONS.
         GBLC &ITEM(1000)
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000)
         LCLB  &ONLY1,&CTIND
         LCLA  &START1,&START2,&END1,&END2
         LCLC  &SYMBOL,&EQUSYM
         LCLA  &OP,&COUNT,&BYTE,&EQUCNT
         ACTR  100000
.START   AIF   (N'&SYSLIST(&OP+1) LT 3).LOOP
         AIF   ('&SYSLIST(&OP+1,3)' EQ 'EQU').LOOP     TEST FOR EQU
  AIF   ('&SYSLIST(&OP+1,3)' EQ '' AND '&SYSLIST(&OP+1,4)' EQ '').ERR1
  AIF   ('&SYSLIST(&OP+1,3)' EQ '' OR '&SYSLIST(&OP+1,4)' EQ '').ERR1
         AIF   ('&SYSLIST(&OP+1,3)' GT '&SYSLIST(&OP+1,4)').ERR3
&START1  SETA  &SYSLIST(&OP+1,3)        GET START COUNT OF 1
&START2  SETA  &SYSLIST(&OP+1,4)        GET FIRST END COUNT
         AGO   .SET2A                   BRANCH AROUND
.ERR1    MNOTE '**FIRST SYMBOL CONCATENATION INCOMPLETE**'
         MEXIT
.SET2A   AIF   ('&SYSLIST(&OP+1,5)' EQ ''AND '&SYSLIST(&OP+1,6)' EQ '' X
               ).SET2                   TEST FOR NO SECOND
  AIF   ('&SYSLIST(&OP+1,5)' EQ '' OR '&SYSLIST(&OP+1,6)' EQ '').ERR2
         AIF   ('&SYSLIST(&OP+1,5)' GT '&SYSLIST(&OP+1,6)').ERR3
&END1    SETA  &SYSLIST(&OP+1,5)        GET START COUNT OF 2
&END2    SETA  &SYSLIST(&OP+1,6)        GET END COUNT OF 2
         AGO   .LOOP
.SET2    ANOP
&ONLY1   SETB  1                        INDICATE ONLY ONE CONCATENATION
         AGO   .LOOP
.ERR2    MNOTE '**SECOND SYMBOL CONCATENATION INCOMPLETE**'
         MEXIT
.ERR3    MNOTE '**START GREATER THAN END CONCATENATION**'
         MEXIT
.LOOP    ANOP
&OP      SETA  &OP+1
         AIF   (&OP GT N'&SYSLIST).DONE      TEST IF ALL DONE
&ITEMNBR SETA  &ITEMNBR+1
         AIF   ('&SYSLIST(&OP,2)' NE '').OK1
         MNOTE '**NULL BIT COUNT FIELD**'
         MEXIT
.OK1     ANOP
&SYMBOL  SETC  '&SYSLIST(&OP,1)'
         AIF   ('&SYMBOL' NE '').OK
*              *****     LOG ITEM SYMBOL NOT PROVIDED     *****
         AIF   ('&SYSLIST(&OP,3)' NE 'EQU').CNT
         AGO   .START                   GET NEXT
.OK      AIF   (N'&SYSLIST(&OP) LT 3).NO3    TEST FOR OLD FORMAT
         AIF   ('&SYSLIST(&OP,3)' EQ 'EQU').EQU   TEST FOR EQU
         AIF   (&ONLY1).OK2             TEST FOR ONLY ONE CONCAT
&SYMBOL  SETC  '&SYMBOL.&START1.&END1'       GET 1 AND 2 CONCAT
         AGO   .NO3                     BRANCH AROUND
.OK2     ANOP
&SYMBOL  SETC  '&SYMBOL.&START1'        GET 1 CONCATENATED
.NO3     ANOP
&SYMBOL  EQU   *+&BYTE
&ITEM(&ITEMNBR) SETC '&SYMBOL'          GET LABEL IN GLOBAL
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)
&SHIFT(&ITEMNBR) SETA &COUNT-&BYTE*8
.CNT     ANOP
&CTIND   SETB  1                        SET COUNT INDICATOR
&COUNT   SETA  &COUNT+&SYSLIST(&OP,2)
&BYTE    SETA  &COUNT/8
         AIF   (N'&SYSLIST(&OP) LT 3).START  TEST FOR OLD FORMAT
         AIF   (&ONLY1).TSTST           TEST FOR ONLY ONE CONCAT
         AIF   (&END1 EQ &END2).TSTST   TEST FOR SECOND END
&END1    SETA  &END1+1                  INCREMENT COUNT
&OP      SETA  &OP-1                    DECREMENT INCREMENT
         AGO   .LOOP                    GENERATE NEXT
.TSTST   ANOP
         AIF   (&START1 EQ &START2).LPDONE   TEST FOR END
         AIF   (&ONLY1).NSET1           TEST FOR ONLY ONE CONCAT
&END1    SETA  &SYSLIST(&OP,5)          RE-INIT SECOND START COUNT
.NSET1   ANOP
&OP      SETA  &OP-1                    DECREMENT INDEX
&START1  SETA  &START1+1                INCREMENT FIRST COUNT
         AGO   .LOOP                    GO DO NEXT
.LPDONE  ANOP
&ONLY1   SETB  0                        CLEAR INDICATOR
         AGO   .START                   GO TEST FOR MORE SUB-LISTS
.DONE    AIF   (&COUNT-&COUNT/8*8 NE 0).ERR  TEST FOR MULTIPLE OF EIGHT
         AIF   (&CTIND EQ 0).END        NO DS IF NO COUNT
&COUNT   SETA  &COUNT/8                 GET NUMBER OF BYTES
&NAME    DS    &COUNT.C
.END     MEXIT
.ERR     MNOTE '**BIT COUNT FLDS DO NOT TOTAL MULTIPLE OF 8**'
         MEXIT
.EQU     AIF   ('&SYSLIST(&OP,4)' NE '').EQU1     TEST FOR NULL LABEL
.ERR4    MNOTE '**EQU OPERAND OMITTED OR NOT FOUND**'
         MEXIT
.EQU1    AIF   (&SYSLIST(&OP,2) LT 16).EQU2  COUNT OVER FIFTEEN
*****               THE FOLLOWING STATEMENT                *****
*****     NUMBER OF BITS EXCEED 15 - DO NOT USE AS BIN     *****
.EQU2    ANOP
&EQUCNT  SETA  0                        CLEAR COUNTER
&EQUSYM  SETC  '&SYSLIST(&OP,4)'        GET EQU OPERAND
.EQULOP  ANOP
&EQUCNT  SETA  &EQUCNT+1                INCREMENT INDEX
         AIF   ('&ITEM(&EQUCNT)' EQ '&EQUSYM').EQUOUT  LABEL FOUND?
         AIF   (&EQUCNT EQ &ITEMNBR).ERR4    ALL TESTED?
         AGO   .EQULOP                  NO-GET NEXT
.EQUOUT  ANOP
&ITEM(&ITEMNBR) SETC '&SYMBOL'          GET LABEL NAME
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)    GET NUMBER OF BITS
&SHIFT(&ITEMNBR) SETA &SHIFT(&EQUCNT)   GET SHIFT COUNT
&SYMBOL  EQU   &EQUSYM                  THIS SYMBOL EQUATED
         AGO   .START                   RETURN FOR NEXT
         MEND
         MACRO
&NAME    LINE  &DATA,&LABEL,&SKIP=
.*                            THIS MACRO ESTABLISHES THE MARGINS OR
.*                                 COLUMN SETTINGS FOR EACH LINE. IT
.*                                 GENERATES NECESSARY CARRIAGE CONTROL
.*                                 ENTRIES. LASTLY IT DETERMINES THE
.*                                 NUMBER OF ENTRIES ASSOCIATED WITH
.*                                 THE PREVIOUS LINE AND STORES THAT #
.*                                 INTO THE APPROPRIATE BYTE.
.*                            &DATA(1) - CHARACTER POSITION TO BEGIN
.*                                 DATA.
.*                            &DATA(2) - # OF SPACES BETWEEN SUCCESSIVE
.*                                 DATA COLUMN STARTING CHARACTERS.
.*                            &LABEL(1) - CHAR. POS. TO BEGIN LABELS.
.*                            &LABEL(2) - # SPACES BETWEEN LINE'S LABEL
.*                                 STARTING CHARACTERS.
.*                            &SKIP= - # OF LINES TO ADVANCE CARRIAGE
.*                                 TO BEGIN NEXT PRINTED LINE.
.*                            NEW ENTRIES ARE GENERATED ONLY WHEN
.*                                 NECESSARY. OMISSION OF ITEMS MEANS
.*                                 THEY HAVE NOT CHANGED SINCE PREVIOUS
.*                                 SETTINGS. A LINE MACRO IS REQUIRED
.*                                 FOR EACH PRINTED LINE. IF NO SETTING
.*                                 CHANGES ARE REQUIRED ALL OPERANDS
.*                                 ARE OMITTED IN WHICH CASE ONLY THE
.*                                 # OF ENTRIES FOR THE PREVIOUS LINE
.*                                 IS COMPUTED. THIS MACRO MUST BE THE
.*                                 FIRST MACRO INSTRUCTION ISSUED FOR
.*                                 THE SUBJECT LINE
         GBLA  &DB,&DT,&LB,&LT,&NRENTS
         GBLA  &LASTCC,&INITIAL
         GBLC  &NRENTSX
         GBLC  &CARRCON
         GBLB  &TEST
         LCLA  &S
&NAME    DS    0C
         AIF   (&INITIAL EQ 0).FIRSTLN
         LINEND
         AGO   .NTFIRST
.FIRSTLN ANOP
&NRENTSX SETC  'N&SYSNDX'
&INITIAL SETA  1
N&SYSNDX EQU   *
.NTFIRST ANOP
         DC    AL1(0)
         AIF   ('&DATA(1)' EQ '').CKDTABS
         AIF   (&DATA(1) EQ &DB).CKDTABS
&DB      SETA  &DATA(1)
         AGO   .AA
.CKDTABS AIF   ('&DATA(2)' EQ '').NCDATA
         AIF   (&DATA(2) EQ &DT).NCDATA
         AGO   .CC
.AA      AIF   ('&DATA(2)' EQ '').BB
         AIF   (&DATA(2) EQ &DT).BB
.CC      ANOP
&DT      SETA  &DATA(2)
.BB      DC    XL2'FFFE'
         DC    FL1'&DB'
         DC    FL1'&DT'
&NRENTS  SETA  &NRENTS+1
.NCDATA  ANOP
         AIF   ('&LABEL(1)' EQ '').CKLTABS
         AIF   (&LABEL(1) EQ &LB).CKLTABS
&LB      SETA  &LABEL(1)
         AGO   .AAA
.CKLTABS AIF   ('&LABEL(2)' EQ '').NCLABEL
         AIF   (&LABEL(2) EQ &LT).NCLABEL
         AGO   .CCC
.AAA     AIF   ('&LABEL(2)' EQ '').BBB
         AIF   (&LABEL(2) EQ &LT).BBB
.CCC     ANOP
&LT      SETA  &LABEL(2)
.BBB     DC    XL2'FFFF'
         DC    FL1'&LB'
         DC    FL1'&LT'
&NRENTS  SETA  &NRENTS+1
.NCLABEL ANOP
         AIF   ('&SKIP' NE '').CONT
         AIF   (&TEST EQ 0).NOCHANG
&S       SETA  &LASTCC
         AGO   .DEFAULT
.CONT    ANOP
         AIF   (&TEST EQ 0).AB
&S       SETA  &SKIP
.DEFAULT ANOP
         ORG   &CARRCON+3
         DC    AL.3(0),AL.2(&S),AL.3(1)
         ORG
&LASTCC  SETA  &S
&TEST    SETB  0
         AGO   .DD
.AB      AIF   (&SKIP EQ &LASTCC).NOCHANG
A&SYSNDX DC    XL2'FFFB'
         DC    AL.3(0),AL.2(&SKIP),AL.3(1)
         DC    FL1'9'
&LASTCC  SETA  &SKIP
&TEST    SETB  1
&CARRCON SETC  'A&SYSNDX'
&NRENTS  SETA  &NRENTS+1
.DD      ANOP
.NOCHANG ANOP
         MEND
         MACRO
         BIN   &LOGITEM,&SKIP$OR
.*                                 &LOGITEM - NAME OF ITEM IN LOG
.*                                      RECORD DSECT
.*                                 &SKIP$OR - NBR OF SPACES TO SKIP ON
.*                                 MULTIPLE PRINT OR NBR OF SPACES
.*                                      TO BACK UP FROM COLUMN FOR
.*                                      START OF PRINTING. THE LETTER
.*                                      B PRECEEDS THE NUMBER (B5) IF
.*                                      THE LATTER IS DESIRED. OMISSION
.*                                      OF THIS OPERAND FORCES OPTION 2
.*                                      WITH BACKUP SPACING EQUAL TO
.*                                 THE NUMBER OF BITS IN THE ITEM
.*                                 DEFINITION (VIA MACRO 'DSGEN').
.*                            A LIMIT OF 15 BITS IS IMPOSED FOR THE
.*                                 TOTAL NUMBER OF BITS TO PRINT.
         GBLC &ITEM(1000)
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000),&NRENTS
         GBLC  &DSECT
         LCLB  &B
         LCLA  &IBITS,&NDX,&ISHIFT,&K
         LCLA  &TEMP
         LCLC  &S
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'YOU BLEW IT'
         ROUTINE DUM,SKIPPER
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
&S       SETC  '&IBITS'
&B       SETB  1
         AIF   ('&SKIP$OR' EQ '').BACKUP
&K       SETA  K'&SKIP$OR
&B       SETB  ('&SKIP$OR'(1,1) EQ 'B')
&S       SETC  '&SKIP$OR'(&B+1,&K-&B)
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
&TEMP    SETA  &ISHIFT+1
A&SYSNDX DC    AL.12(&LOGITEM-&DSECT),XL.4'&TEMP'
         AIF (&IBITS EQ 1 AND &B EQ 0).OUT
         ORG   A&SYSNDX
         DC    AL.12(&LOGITEM-&DSECT),XL.4'C'
         DC    BL.1'&B',AL.7(&S),AL.4(&IBITS),FL.4'&ISHIFT'
.OUT     ANOP
         MEND
         MACRO
         HEX   &LOGITEM,&SKIP$OR,&BYTES
.*                            THIS MACRO FACILITATES GENERATION OF THE
.*                                 TABLE ENTRIES SPECIFYING HEX TYPE
.*                                 CONVERSIONS.
.*                            &LOGITEM - NAME OF DATA ITEM TO BE
.*                                 CONVERTED
.*                            &SKIP$OR - NUMBER OF SPACES TO SKIP ON
.*                                 MULTIPLE PRINT OR NBR OF SPACES TO
.*                                 BACK UP FROM COLUMN FOR START OF
.*                                 PRINTING. THE LETTER B PRECEEDS THE
.*                                 NUMBER (B8) IF THE LATTER OPTION IS
.*                                 DESIRED. OMISSION OF THIS OPERAND
.*                                 FORCES OPTION 2 WITH BACKUP SPACING
.*                                 EQUAL TO THE NUMBER OF BYTES SPECI-
.*                                 FIED BY THE NEXT OPERAND (TWICE THIS
.*                                 NUMBER IF SUFFIX IS EXPLICITLY OR
.*                                 IMPLICITLY B).
.*                            &BYTES - NUMBER OF TOTAL INPUT BYTES TO
.*                                 PROCESS. THIS NUMBER IS SUFFIXED
.*                                 WITH AN L,R, OR B TO STIPULATE
.*                                 PRINTING OF THE LEFT HALF, RIGHT
.*                                 HALF, OR BOTH HALVES OF THE BYTE
.*                                 RESPECTIVELY. OMISSION OF THIS
.*                                 OPERAND DEFAULTS TO B WITH THE NUM-
.*                                 BER OF BYTES EQUAL TO THE ITEM LNGTH
.*                            A NEW ENTRY IS GENERATED ONLY WHEN NECES-
.*                                 SARY. THIS MACRO MUST BE THE FIRST
.*                                 MACRO INSTRUCTION ISSUED FOR THE
.*                                 SUBJECT LINE(S).
         GBLC &ITEM(1000),&DSECT
         GBLA &ITEMNBR,&BITS(1000),&SHIFT(1000),&NRENTS
         LCLB  &B
         LCLA  &IBITS,&NDX,&ISHIFT,&K,&T,&CODE,&BYTESP
         LCLC  &S,&LETTER
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOG ITEM NOT DEFINED'
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
&CODE    SETA  1
&K       SETA  K'&BYTES
         AIF   (&IBITS-(&IBITS/4)*4 EQ 0).OK
         MNOTE *,'BIT LENGTH SPECIFICATION INCONSISTENT WITH CONTROL'
         MEXIT
.OK      AIF   ('&BYTES' EQ '').USEDEFN
&LETTER  SETC  '&BYTES'(&K,1)
&S       SETC  '&BYTES'(1,&K-1)
&BYTESP  SETA  &S
         AIF   ('&LETTER' EQ 'B').BOTH
         AIF   (&ISHIFT EQ 0 OR &ISHIFT EQ 4).OK2
.ERR     MNOTE *,'DATA NOT ALLIGNED ON HEX OR BYTE BOUNDARY'
         MEXIT
.USEDEFN ANOP
&BYTESP  SETA  &IBITS/8
.BOTH    AIF   (&ISHIFT NE 0).ERR
&CODE    SETA  3
&T       SETA  &BYTESP*2
&S       SETC  '&T'
.OK2     AIF   (&ISHIFT EQ 0).L
&CODE    SETA  2
.L       ANOP
&B       SETB  1
         AIF   ('&SKIP$OR' EQ '').BACKUP
&K       SETA  K'&SKIP$OR
&B       SETB  ('&SKIP$OR'(1,1) EQ 'B')
&S       SETC  '&SKIP$OR'(&B+1,&K-&B)
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
         DC    AL.12(&LOGITEM-&DSECT),XL.4'A'
         DC    BL.1'&B',FL.7'&S',FL.4'&BYTESP',FL.4'&CODE'
.OUT     ANOP
         MEND
         MACRO
&NAME    ROUTINE &LOGITEM,&RNAME
         GBLA  &NRENTS
         GBLC  &DSECT,&CSECT
&NAME    DC    AL.12(&LOGITEM-&DSECT),XL.4'D'
         DC    AL2(&RNAME-&CSECT)
&NRENTS  SETA  &NRENTS+1
         MEND
         MACRO
         LABEL &LABEL1,&LABEL2,&LABEL3,&LABEL4
.*                            THIS MACRO ALLOWS UP TO FOUR LABELS TO
.*                                 BE SPECIFIED FOR A GIVEN LINE. THE
.*                                 LABELS SHOULD BE ENCLOSED IN QUOTA-
.*                                 TION MARKS. THE COLUMN AND LINE END
.*                                 CONTROLS WILL BE INSERTED BY THE
.*                                 MACRO. OMITTED OPERANDS MEAN NO
.*                                 LABEL REQUIRED FOR RESPECTIVE
.*                                 COLUMN. THIS MACRO WILL ALSO ALERT
.*                                 THE PROGRAMMER TO EXACTLY WHERE THE
.*                                 TABLE MUST BE BROKEN IF NECESSARY
.*                                 TO AVOID EXCEEDING THE MAXIMUM LIMIT
         GBLC &LABELS(1000)
         GBLA  &LABELNR
         GBLA  &NRENTS
         LCLC  &MARGIN,&TACK
         LCLC  &TEXT
         LCLA  &OP,&K,&START,&NRCHAR,&REMAIN
&MARGIN  SETC  '*'
.LOOPOUT ANOP
&OP      SETA  &OP+1
&K       SETA  K'&SYSLIST(&OP)
         AIF (&K GE 2).NORM
&K       SETA  2
.NORM    ANOP
&START   SETA  2
         AIF (&OP LT N'&SYSLIST).NOTLAST
&MARGIN  SETC  '$'
.NOTLAST ANOP
&NRCHAR  SETA  8
&TACK    SETC  ''
.LOOPIN  ANOP
&REMAIN  SETA  &K-&START
         AIF (&REMAIN GE 8).MORE
&TACK    SETC  '&MARGIN'
&NRCHAR  SETA  &REMAIN
.MORE    ANOP
&TEXT    SETC  ''
         AIF (&REMAIN EQ 0).ENDTEXT
&TEXT    SETC  '&SYSLIST(&OP)'(&START,&NRCHAR)
.ENDTEXT ANOP
&LABELNR SETA  &LABELNR+1
&LABELS(&LABELNR) SETC '&TEXT'.'&TACK'
&START   SETA  &START+8
         AIF ('&TACK' EQ '').LOOPIN
         AIF ('&TACK' EQ '*').LOOPOUT
         MEND
         MACRO
         LSTART
.*                            THIS MACRO IS ISSUED WHEN THE LABEL AREA
.*                                 OF THE TABLE IS TO BEGIN.
         GBLC &LABELS(1000)
         GBLA  &LABELNR
         LCLA  &NDX
         LINEND
.LOOP    ANOP
&NDX     SETA  &NDX+1
         DC    C'&LABELS(&NDX)'
         AIF   (&NDX LT &LABELNR).LOOP
         MEND
         MACRO
         LINEND
.*                            THIS MACRO IS USED ONLY BY THE LINE
.*                                 MACRO TO SET THE NUMBER OF ENTRIES
.*                                 ASSOCIATED WITH EACH LINE.
         GBLA  &NRENTS
         GBLC &NRENTSX
         ORG   &NRENTSX
         DC    FL1'&NRENTS'
         ORG
&NRENTS  SETA  0
B&SYSNDX EQU   *
&NRENTSX SETC  'B&SYSNDX'
         MEND
         MACRO
         SUM   &LOGITEM,&MASK
.*                            THIS MACRO GENERATES A NORMAL EDIT ENTRY
.*                                 FOR PROCESSING BY THE SUMMARY MODULE
.*                            &LOGITEM - NAME OF DATA ITEM TO BE SUMMED
.*                            &MASK - BYTE MASK FOR BITS TO BE TESTED.
.*                                 THIS OPERAND SHOULD BE OMITTED FOR
.*                                 SINGLE BIT ITEMS IN WHICH CASE THE
.*                                 MASK WILL BE SET ACCORDING TO THE
.*                                 OFF BYTE BIT DISPLACEMENT OF THE
.*                                ITEM AS DEFINED BY THE MACRO 'DSGEN'
         GBLA  &COUNTR,&ITEMNBR,&BITS(1000),&SHIFT(1000)
         GBLC  &ITEM(1000),&DSECT
         LCLA  &IBITS,&NDX,&ISHIFT,&M,&BITNBR
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&LOGITEM').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP
         MNOTE *,'LOGITEM NOT FOUND'
         MEXIT
.FOUND   ANOP
         DC    AL1(0)
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
         AIF   ('&MASK' EQ '').FORM
         DC    B'&MASK'
         AGO   .ITEM
.FORM    ANOP
&BITNBR  SETA  &ISHIFT-7
&BITNBR  SETA  0-&BITNBR
&M       SETA  1
.LOOP2   ANOP
         AIF   (&BITNBR EQ 0).GOTIT
&M       SETA  &M*2
&BITNBR  SETA  &BITNBR-1
         AGO   .LOOP2
.GOTIT   ANOP
         DC    AL1(&M)
.ITEM    DC    AL2(&LOGITEM-&DSECT)
         DC    AL2(&COUNTR)
&COUNTR  SETA  &COUNTR+1
         MEND
         MACRO
         SPECIAL  &ROUTINE,&PARAM,&SPACE=
.*                            THIS MACRO GENERATES A SPECIAL ROUTINE
.*                                 ENTRY TO BE PROCESSED BY THE SUM. M.
.*                            &ROUTINE - SYMBOL ON SPECIAL ROUTINE EWT.
.*                            &PARAM - AN 8 BIT BINARY REPRESENTATION
.*                                 TO OCCUPY THE 'MASK' FIELD BUT TO BE
.*                                 INTERPRETED AS AN ARGUMENT OF THE
.*                                 SPECIAL ROUTINE.
.*                            &SPACE - THE NUMBER OF 2BYTE COUNTERS TO
.*                                 ALLOCATE FOR REQUIRED PROCESSING.
         GBLC  &CSECT
         GBLA  &COUNTR
         LCLA  &ADD
         DC    AL1(128)
         DC    BL.8'&PARAM'
         DC    AL2(&ROUTINE-&CSECT)
         DC    AL2(&COUNTR)
&ADD     SETA  1
         AIF   ('&SPACE' EQ '').NORM
&ADD     SETA  &SPACE
.NORM    ANOP
&COUNTR  SETA  &COUNTR+&ADD
         MEND
         GBLC  &DSECT,&CSECT
&CSECT   SETC  'IFCSI145'
&DSECT   SETC  'CI145'
IFCSI145 CSECT
CI145    DSECT
DUM      EQU   *
         DSGEN (XKEY,16),(XSWS,16),(XDUM1,32)
         DSGEN (XDATE,32),(XTIME,32)
         DSGEN (XDUM2,8),(XSER,24),(XMOD,16),(MCEL,16)
         DSGEN (XPGMN,64)
         DSGEN (XAIO1,64)
         DSGEN (XAIO5,64)
         DSGEN (XFCCW,64)
         DSGEN (XCSW,32),(XCSWS,12),(XCDC,1),(XCCC,1),(XIFC,1),(XD,17)
         DSGEN (XECSW,32)
         DSGEN (XDEVT1,16),(XDEVT2,16)
         DSGEN (XCHID,8),(XCUA,24)
         DSGEN (XMPIN,32)
         DSGEN (HARDWARE,32)
         DSGEN (LOGLNGTH,8),(,88)
         DSGEN (MCHRG00,1),(MCHRG01,1),(MCHRG02,1),(MCHRG03,1),        X
               (MCHRG04,1),(MCHRG05,1),(MCHRG06,1),(MCHRG07,1),        X
               (MCHRG08,1),(MCHRG09,1),(MCHRG10,1),(MCHRG11,1),        X
               (MCHRG12,1),(MCHRG13,1),(MCHRG14,1),(MCHRG15,1),        X
               (MCHRG16,1),(MCHRG17,1),(MCHRG18,1),(MCHRG19,1),        X
               (MCHRG20,1),(MCHRG21,1),(MCHRG22,1),(MCHRG23,1),        X
               (MCHRG24,1),(MCHRG25,1),(MCHRG26,1),(MCHRG27,1),        X
               (MCHRG28,1),(MCHRG29,1),(MCHRG30,1),(MCHRG31,1)
         DSGEN (MCHRGB00,1),(MCHRGB01,1),(MCHRGB02,1),(MCHRGB03,1),    X
               (MCHRGB04,1),(MCHRGB05,1),(MCHRGB06,1),(MCHRGB07,1),    X
               (MCHRGB08,1),(MCHRGB09,1),(MCHRGB10,1),(MCHRGB11,1),    X
               (MCHRGB12,1),(MCHRGB13,1),(MCHRGB14,1),(MCHRGB15,1),    X
               (MCHRGB16,1),(MCHRGB17,1),(MCHRGB18,1),(MCHRGB19,1),    X
               (MCHRGB20,1),(MCHRGB21,1),(MCHRGB22,1),(MCHRGB23,1),    X
               (MCHRGB24,1),(MCHRGB25,1),(MCHRGB26,1),(MCHRGB27,1),    X
               (MCHRGB28,1),(MCHRGB29,1),(MCHRGB30,1),(MCHRGB31,1)
         DS    6F
         DSGEN (RTYREG1,32),(RTYREG2,32)
         DSGEN (REGUNU,8),                                             X
               (HREG0,1),(HREG1,1),(HREG2,1),(HREG3,1),(HREG4,1),      X
               (HREG5,1),(HREG6,1),(HREG7,1),(RETRG23,16)
         DSGEN (RTYRG400,1),(RTYRG401,1),(RTYRG402,1),(RTYRG403,1),    X
               (RTYRG404,1),(RTYRG405,1),(RTYRG406,1),(RTYRG407,1),    X
               (RTYRG408,1),(RTYRG409,1),(RTYRG410,1),(RTYRG411,1),    X
               (RTYRG412,1),(RTYRG413,1),(RTYRG414,1),(RTYRG415,1),    X
               (RTRUNSED,1),(RTYRG417,3),(RTYRG420,3),(RTYUNSD,2),     X
               (RTYRG425,3),(RTYRG428,3),(RTYNOTUS,1)
         DSGEN (CTRLDWD,32)
         DSGEN (SYSREG00,1),(SYSREG01,1),(SYSREG02,1),(SYSREG03,1),    X
               (SYSREG04,1),(SYSREG05,1),(SYSREG06,1),(SYSREG07,1),    X
               (SYSREG08,1),(SYSREG09,1),(SYSREG10,1),(SYSREG11,1),    X
               (SYSREG12,1),(SYSREG13,1),(SYSREG14,1),(SYSREG15,1),    X
               (SYSREG16,1),(SYSREG17,1),(SYSREG18,1),(SYSREG19,1),    X
               (SYSREG20,1),(SYSREG21,1),(SYSREG22,1),(SYSREG23,1),    X
               (SYSREG24,1),(SYSREG25,1),(SYSREG26,1),(SYSREG27,1),    X
               (SYSREG28,1),(SYSREG29,1),(SYSREG30,1),(SYSREG31,1)
         EJECT
IFCSI145 CSECT
ENTRYPTR DC    A(EDIT)
         DC    A(PEDIT)            POINTER TO EDIT SECTION
REG9     DS    F
SCSIZE   DC    H'190'                                          @ZA30677
ROUTINES EQU   *
LOGREG   EQU   2
@FAILCCW DS    0F
         USING *,15
         STM   14,12,12(13)
         SR    7,7
         IC    7,FCCW(LOGREG)
FCCW     EQU   48
         B     COMMON
@UNIT    DS    0F
         USING *,15
         STM   14,12,12(13)
         SR    7,7
         IC    7,91(LOGREG)
         B     COMMON
@DEVADR  DS    0F
         USING *,15
         STM   14,12,12(13)
         SR    7,7                 LOAD DEVICE ADDRESS
         IC    7,74(LOGREG)
         SLL   7,8
         IC    7,75(LOGREG)
COMMON   EQU   *
         BALR  12,0
         USING *,12
         L     1,R9ADR
         L     9,0(1)
         SR    1,1
         IC    1,1(9)              ITERATIONS
         LR    5,1
         SLL   5,2
         AR    5,3                 COMPUTE COUNTER ADDRESS PAST TEXT
         LH    4,DUMP
LOOP1    CH    4,0(3)              TEST FOR EMPTY/FULL
         BNE   STORE
         CH    7,2(3)              FULL - COMPARE WITH STORED DATA
         BE    BUMP
         LA    3,4(3)              NOT SAME - GO TO NEXT TEXT CELL
         LA    5,2(5)
         BCT   1,LOOP1
         B     FULL                ALL CELLS FULL - NO MATCH
DUMP     DC    X'FFFF'
DUMP2    DC    H'1'
STORE    EQU   *
         STH   4,0(3)              STORE NEW TEXT DATA
         STH   7,2(3)
BUMP     EQU   *
         LH    6,0(5)              BUMP COUNTER BY ONE
         AH    6,DUMP2
         STH   6,0(5)
FULL     EQU   *
         LM    14,12,12(13)
         BR    14
*
*        SAVE  DATE RANGE
*
         DROP  15
         DROP  12
         USING CI145,R2
         USING IFCSI145,R9
*
XDATE1   CLC   XDATE(L4),HEX00          IS DATE ZERO
         BE    EXIT
         CLC   L0(L4,R3),HEX00    IS LOW DATE = ZERO ?
         BNE   XDATE2
         MVC   L0(L4,R3),XDATE    IF YES MOVE IN DATE
XDATE2   EQU   *
         CLC   XDATE(L4),L0(R3)         CHECK AGAINST LOW DATE
         BL    SAVELO                   BR-THIS IS LOWER
         CLC   XDATE(L4),L4(R3)         CHECK AGAIN HI
         BH    SAVEHI
EXIT     BR    R14                      RETURN
SAVEHI   MVC   L4(L4,R3),XDATE          SAVE HI DATE IN COUNTER
         B     EXIT
SAVELO   MVC   L0(L4,R3),XDATE          SAVE LO
         B     EXIT
HEX00    DC    F'0'
R9ADR    DC    A(REG9)
WHERETO  TM    XCSWS+L1,X'02'     IS THIS AN INTERFACE CONTROL CHECK
         BCR   8,R14              IF NOT RETURN
         ST    R7,SAVER           SAVE THE REGISTER
         LA    R7,QUIT-6          GET ADDRESS OF END OF TABLE
         ST    R7,REG9            STORE NEW ADDRESS
         L     R7,SAVER           RELOAD THE REGISTER
         BR    R14
SAVER    DC    F'0'
*
* THIS ROUTINE DETERMINES IF THE RECORD BEING PROCESSED HAS A LOGOUT
* BY CHECKING THE TOTAL LENGTH OF THE RECORD WHICH IS FOUND IN THE
* TWO BYTES PRECEDING THE RECORD. IF THERE IS NO LOGOUT THE SUM
* ROUTINES THAT EXIST TO ADD THAT INFORMATION MUST BE BYPASSED.
*
LOGOUT   ST    R7,SAVER           SAVE REGISTER                 YM05678
         LA    R7,XKEY            GET ADDRESS OF RECORD         YM05678
         BCTR  R7,0               BACKUP TO RECORD LENGTH       YM05678
         CLI   L1(R7),T21         IS THIS VS2 RELEASE 2         YM05678
         BNE   NOTVS2             NO-GO TO CHECK RECORD LENGTH  YM05678
         CLI   L0(R7),X'A0'       DOES RECORD HAVE A LOGOUT     YM05678
         BL    NOLOG              TOO SMALL - NO LOG            YM05678
         L     R7,SAVER           LOG O.K. ADD TO COUNTERS      YM05678
         BR    R14                RETURN                        YM05678
NOTVS2   CLI   L0(R7),X'60'       DOES RECORD HAVE LOGOUT       YM05678
         BNL   RETURN             YES - RETURN                  YM05678
NOLOG    LA    R7,QUIT-L6         NO LOGOUT DO NOT SUM BITS     YM05678
         ST    R7,REG9            STORE UPDATED POINTER         YM05678
RETURN   L     R7,SAVER           RELOAD REGISTER               YM05678
         BR    R14                RETURN
T21      EQU   21
*                        SPECIAL ROUTINES REQUIRED
EDIT     EQU   *
         SPECIAL XDATE1,00000000,SPACE=4
*
*        LABELS NEEDED FOR HEADER
*
         LABEL ' '            SKIP TO CH 1
         LABEL 'DAY YEAR   DAY YEAR'
         LABEL 'INBOARD DATE RANGE','TO'
         LABEL '---MODEL---','---SERIAL---'
         LABEL '---CHANNEL NUMBER--'
         LABEL 'CHANNEL INBOARD SUMMARY FOR  INTEGRATED CHANNELS'
         LABEL 'NUMBER OF RECORDS EXAMINED ='
         LABEL '--------TITLE--------','TOTAL'
*
         LABEL 'DEVICE ADDRESS SUMMARY (MAX- 10 VALUES)'
         LABEL ' '
         LABEL ' '
         LABEL ' '
         LABEL ' '
         LABEL ' '
         LABEL ' '
         LABEL ' '
         LABEL ' '
         LABEL ' '
         LABEL ' '
         LABEL 'FAILING CCW SUMMARY(MAX-10 VALUES)'
         LABEL 'CMND CODE'
         LABEL ' '
         LABEL ' '
         LABEL ' '
         LABEL ' '
         LABEL ' '
         LABEL ' '
         LABEL ' '
         LABEL ' '
         LABEL ' '
         LABEL ' '
         LABEL '--------TITLE--------                TOTAL',           C
               '--------TITLE--------                TOTAL'
         SPECIAL @DEVADR,00001010,SPACE=30
         SPECIAL @FAILCCW,00001010,SPACE=30
         SUM        XCDC
         SUM        XCCC
         SUM        XIFC
         SPECIAL LOGOUT,0,SPACE=0                               YM05678
         LABEL 'CHAN DATA CHK'
         LABEL 'CHAN CTRL CHK'
         LABEL 'IF CTRL CHK'
         SUM   MCHRG00
         SUM   MCHRG01
         SUM   MCHRG02
         SUM   MCHRG03
         SUM   MCHRG04
         SUM   MCHRG05
         SUM   MCHRG06
         SUM   MCHRG07
         SUM   MCHRG08
         SUM   MCHRG09
         SUM   MCHRG10
         SUM   MCHRG11
         SUM   MCHRG12
         SUM   MCHRG13
         SUM   MCHRG14
         SUM   MCHRG15
         SUM   MCHRG16
         SUM   MCHRG17
         SUM   MCHRG18
         SUM   MCHRG19
         SUM   MCHRG20
         SUM   MCHRG21
         SUM   MCHRG22
         SUM   MCHRG23
         SUM   MCHRG24
         SUM   MCHRG25
         SUM   MCHRG26
         SUM   MCHRG27
         SUM   MCHRG28
         SUM   MCHRG29
         SUM   MCHRG30
         SUM   MCHRG31
         SUM   MCHRGB00
         SUM   MCHRGB01
         SUM   MCHRGB02
         SUM   MCHRGB03
         SUM   MCHRGB04
         SUM   MCHRGB05
         SUM   MCHRGB06
         SUM   MCHRGB07
         SUM   MCHRGB08
         SUM   MCHRGB09
         SUM   MCHRGB10
         SUM   MCHRGB11
         SUM   MCHRGB12
         SUM   MCHRGB13
         SUM   MCHRGB14
         SUM   MCHRGB15
         SUM   MCHRGB16
         SUM   MCHRGB17
         SUM   MCHRGB18
         SUM   MCHRGB19
         SUM   MCHRGB20
         SUM   MCHRGB21
         SUM   MCHRGB22
         SUM   MCHRGB23
         SUM   MCHRGB24
         SUM   MCHRGB25
         SUM   MCHRGB26
         SUM   MCHRGB27
         SUM   MCHRGB28
         SUM   MCHRGB29
         SUM   MCHRGB30
         SUM   MCHRGB31
         SPECIAL WHERETO,0,SPACE=0
         SUM   HREG0
         SUM   HREG1
         SUM   HREG2
         SUM   HREG3
         SUM   HREG4
         SUM   HREG5
         SUM   HREG6
         SUM   HREG7
         SUM   RTYRG408
         SUM   RTYRG409
         SUM   RTYRG410
         SUM   RTYRG411
         SUM   RTYRG412
         SUM   RTYRG413
         SUM   RTYRG414
         SUM   RTYRG415
         SUM   SYSREG00
         SUM   SYSREG01
         SUM   SYSREG02
         SUM   SYSREG03
         SUM   SYSREG04
         SUM   SYSREG05
         SUM   SYSREG06
         SUM   SYSREG07
         SUM   SYSREG08
         SUM   SYSREG09
         SUM   SYSREG10
         SUM   SYSREG11
         SUM   SYSREG12
         SUM   SYSREG13
         SUM   SYSREG14
         SUM   SYSREG15
         SUM   SYSREG16
         SUM   SYSREG17
         SUM   SYSREG18
         SUM   SYSREG19
         SUM   SYSREG20
         SUM   SYSREG21
         SUM   SYSREG22
         SUM   SYSREG23
         SUM   SYSREG24
         SUM   SYSREG25
         SUM   SYSREG26
         SUM   SYSREG27
         SUM   SYSREG28
         SUM   SYSREG29
         SUM   SYSREG30
         SUM   SYSREG31
QUIT     DC    XL1'FF'
PEDIT    DS    0F
         USING *,R9
         DC    A(PENTRY)
         DC    C'IFCSI145'
YR9PTR   DC    F'0'
YLABELP  DC    F'0'
&CSECT   SETC  'PEDIT'
&DSECT   SETC  'DI145'
*
DI145    DSECT
         DS    3H
         DSGEN (YDUMA,16),(YNOREC,16)
         DSGEN (YTYPE,8),(YCHAN,8),(YCUA,24),(YSER,24)
         DSGEN (YCPU,16),(YSMSW,16)
         DSGEN (YLOD,32),(YHID,32)
         DSGEN (YFFF01,16),(YCC01,16),(YFFF02,16),(YCC02,16)
         DSGEN (YFFF03,16),(YCC03,16),(YFFF04,16),(YCC04,16)
         DSGEN (YFFF05,16),(YCC05,16),(YFFF06,16),(YCC06,16)
         DSGEN (YFFF07,16),(YCC07,16),(YFFF08,16),(YCC08,16)
         DSGEN (YFFF09,16),(YCC09,16),(YFFF10,16),(YCC10,16)
         DSGEN (YSC01,16),(YSC02,16)
         DSGEN (YSC03,16),(YSC04,16)
         DSGEN (YSC05,16),(YSC06,16)
         DSGEN (YSC07,16),(YSC08,16)
         DSGEN (YSC09,16),(YSC10,16)
         DSGEN (YFFF11,16),(YNC11,8),(YCC11,8)
         DSGEN (YFFF12,16),(YNC12,8),(YCC12,8)
         DSGEN (YFFF13,16),(YNC13,8),(YCC13,8)
         DSGEN (YFFF14,16),(YNC14,8),(YCC14,8)
         DSGEN (YFFF15,16),(YNC15,8),(YCC15,8)
         DSGEN (YFFF16,16),(YNC16,8),(YCC16,8)
         DSGEN (YFFF17,16),(YNC17,8),(YCC17,8)
         DSGEN (YFFF18,16),(YNC18,8),(YCC18,8)
         DSGEN (YFFF19,16),(YNC19,8),(YCC19,8)
         DSGEN (YFFF20,16),(YNC20,8),(YCC20,8)
         DSGEN (YSC11,16),(YSC12,16)
         DSGEN (YSC13,16),(YSC14,16)
         DSGEN (YSC15,16),(YSC16,16)
         DSGEN (YSC17,16),(YSC18,16)
         DSGEN (YSC19,16),(YSC20,16)
         DSGEN (YCDC,16),(YCCC,16),(YIFC,16)
         DSGEN (CTR100,16),(CTR101,16),(CTR102,16),(CTR103,16)
         DSGEN (CTR104,16),(CTR105,16),(CTR106,16),(CTR107,16)
         DSGEN (CTR108,16),(CTR109,16),(CTR110,16),(CTR111,16)
         DSGEN (CTR112,16),(CTR113,16),(CTR114,16),(CTR115,16)
         DSGEN (CTR116,16),(CTR117,16),(CTR118,16),(CTR119,16)
         DSGEN (CTR120,16),(CTR121,16),(CTR122,16),(CTR123,16)
         DSGEN (CTR124,16),(CTR125,16),(CTR126,16),(CTR127,16)
         DSGEN (CTR128,16),(CTR129,16),(CTR130,16),(CTR131,16)
         DSGEN (CTR200,16),(CTR201,16),(CTR202,16),(CTR203,16)
         DSGEN (CTR204,16),(CTR205,16),(CTR206,16),(CTR207,16)
         DSGEN (CTR208,16),(CTR209,16),(CTR210,16),(CTR211,16)
         DSGEN (CTR212,16),(CTR213,16),(CTR214,16),(CTR215,16)
         DSGEN (CTR216,16),(CTR217,16),(CTR218,16),(CTR219,16)
         DSGEN (CTR220,16),(CTR221,16),(CTR222,16),(CTR223,16)
         DSGEN (CTR224,16),(CTR225,16),(CTR226,16),(CTR227,16)
         DSGEN (CTR228,16),(CTR229,16),(CTR230,16),(CTR231,16)
         DSGEN (CTR300,16),(CTR301,16),(CTR302,16),(CTR303,16)
         DSGEN (CTR304,16),(CTR305,16),(CTR306,16),(CTR307,16)
         DSGEN (CTR308,16),(CTR309,16),(CTR310,16),(CTR311,16)
         DSGEN (CTR312,16),(CTR313,16),(CTR314,16),(CTR315,16)
         DSGEN (CTR400,16),(CTR401,16),(CTR402,16),(CTR403,16)
         DSGEN (CTR404,16),(CTR405,16),(CTR406,16),(CTR407,16)
         DSGEN (CTR408,16),(CTR409,16),(CTR410,16),(CTR411,16)
         DSGEN (CTR412,16),(CTR413,16),(CTR414,16),(CTR415,16)
         DSGEN (CTR416,16),(CTR417,16),(CTR418,16),(CTR419,16)
         DSGEN (CTR420,16),(CTR421,16),(CTR422,16),(CTR423,16)
         DSGEN (CTR424,16),(CTR425,16),(CTR426,16),(CTR427,16)
         DSGEN (CTR428,16),(CTR429,16),(CTR430,16),(CTR431,16)
IFCSI145 CSECT
         DS    0F
CONVERT  STM   R5,R8,XSAVE              SAVE REGS
         LH    R5,L0(R4)                PICK UP COUNT
         CVD   R5,WORK                  CONVERT IT
         UNPK  L0(L5,R3),WORK+L5(L3)    UNPACK IT TO PRINT LINE
         MVZ   L4(L1,R3),L0(R3)         MOVE ON ZONE
RETURNA  LM    R5,R8,XSAVE              RESTORE
RETURNB  BR    R14                      RETURN
*
SKIPPER  BR    R14
*
CONVCC1  CLC   L0(L2,R4),HEXFFFF        IS COUNTER IN USE
         BE    RETURNB                  YES
         SR    R15,R15                  NO STOP PRINTING
         BR    R14
*
SETDATE  OI    L3(R4),HEX0F             PUT ON PROPER SIGN
         UNPK  WORK(L8),L0(L4,R4)       UNPACK DATE
         MVZ   WORK+L7(L1),WORK         SET ZONE
         MVC   L0(L3,R3),WORK+L5        MOVE DAY
         MVC   L5(L2,R3),WORK+L3        MOVE YEAR
         BR    R14
*
*              FREE COUNTERS
*
FREECORE STM   R14,R12,L12(R13)         SAVE REGS
         LR    R12,R13                  SAVE SAVE PTR
         LA    R13,FSAVE                SET ADDRESS MYSAVE
         ST    R12,L4(R13)              CHAIN SAVE AREAS TOGETHER
         ST    R13,L8(R12)
         L     R3,L4(R2)                PICK UP NXT COUNTER PTR
         ST    R3,L28(R12)              PRESET REG IN CALLERS AREA
         LH    R0,SIZE                  PICK UP COUNTER LENGTH
         LR    R1,R2                    SET ADDRESS TO COUNTER
*
         FREEMAIN R,LV=(0),A=(1)        FREE COUNTER
*
         LTR   R3,R3                    TEST FOR LAST COUNTER IN
         BZ    RETURN0                  BR-LAST
         LA    R5,PENTRY+L10            RESET R9 &
         LA    R6,LABLAREA-L1           LABEL POINTER TO START
         ST    R5,YR9PTR
         ST    R6,YLABELP
RETURN0  L     R13,L4(R13)              RESET TO CALLERS REGS
         LM    R14,R12,L12(R13)         RESTORE REGS
         BR    R14                      RETURN
************************************************************** @ZA30677
* PRINT THIS LINE IF THIS IS A 148 CPU                         @ZA30677
************************************************************** @ZA30677
P148     TM    L1(R4),HEX48        IS THIS A 148               @ZA30677
         BOR   R14                 YES, PRINT THIS LINE        @ZA30677
         SR    R15,R15             NO, DO NOT PRINT THIS LINE  @ZA30677
         BR    R14                 EXIT                        @ZA30677
HEX48    EQU   X'48'                                           @ZA30677
************************************************************** @ZA30677
* DO NOT PRINT THIS LINE IF THIS IS A 148                      @ZA30677
************************************************************** @ZA30677
NP148    TM    L1(R4),HEX48        IS THIS A 148               @ZA30677
         BNOR  R14                 NO, PRINT THIS LINE         @ZA30677
         SR    R15,R15             YES, DON'T PRINT THIS LINE  @ZA30677
         BR    R14                 EXIT                        @ZA30677
         LTORG
WORK     DS    D
XSAVE    DS    4F
*
FSAVE    DS    18F
K4       EQU   4
L28      EQU   28
HEXFFFF  DC    X'FFFF'
SIZE     DC    H'402'                                          @ZA30677
HEX0F    EQU   X'0F'
L0       EQU   0
L1       EQU   1
L2       EQU   2
L3       EQU   3
L4       EQU   4
L5       EQU   5
L6       EQU   6
L7       EQU   7
L8       EQU   8
L9       EQU   9
L10      EQU   10
L12      EQU   12
*
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
*
*
PENTRY   DS    0F
         DC    X'00010001'
         DC    X'00010001'
         DC    A(LABLAREA)
         DC    H'0'
*
         DC    X'01'
         DC         X'000B8B00'         SKIP TO CHANNEL 1
*
         LINE  ,(23,11)
         ROUTINE    YDUMA,SKIPPER
         LINE       (23,11),(1,30)
         ROUTINE    YLOD,SETDATE
         ROUTINE    YHID,SETDATE
*
         LINE  (56,30),(36,36),SKIP=2
         HEX        YCPU,0,2B                                    P0417
         HEX   YSER,0,3B
         LINE
         HEX        YCHAN,0,1B
         LINE
         ROUTINE    YDUMA,SKIPPER
*
         LINE       (70,1)
         ROUTINE    YNOREC,CONVERT
*
         LINE       (16,24),(2,38)
         ROUTINE    YDUMA,SKIPPER
*
         LINE
         ROUTINE    YDUMA,SKIPPER
*
         LINE       ,,SKIP=1
         HEX        YCC01
         ROUTINE    YSC01,CONVERT
         ROUTINE    YFFF01,CONVCC1
         LINE
         HEX        YCC02
         ROUTINE    YSC02,CONVERT
         ROUTINE    YFFF02,CONVCC1
         LINE
         HEX        YCC03
         ROUTINE    YSC03,CONVERT
         ROUTINE    YFFF03,CONVCC1
         LINE
         HEX        YCC04
         ROUTINE    YSC04,CONVERT
         ROUTINE    YFFF04,CONVCC1
         LINE
         HEX        YCC05
         ROUTINE    YSC05,CONVERT
         ROUTINE    YFFF05,CONVCC1
         LINE
         HEX        YCC06
         ROUTINE    YSC06,CONVERT
         ROUTINE    YFFF06,CONVCC1
         LINE
         HEX        YCC07
         ROUTINE    YSC07,CONVERT
         ROUTINE    YFFF07,CONVCC1
         LINE
         HEX        YCC08
         ROUTINE    YSC08,CONVERT
         ROUTINE    YFFF08,CONVCC1
         LINE
         HEX        YCC09
         ROUTINE    YSC09,CONVERT
         ROUTINE    YFFF09,CONVCC1
         LINE       ,,SKIP=2
         HEX        YCC10
         ROUTINE    YSC10,CONVERT
         ROUTINE    YFFF10,CONVCC1
         LINE
         ROUTINE    YDUMA,SKIPPER
*
         LINE       ,(11,1),SKIP=2
         ROUTINE    YDUMA,SKIPPER
         LINE       ,,SKIP=1
         HEX        YCC11
         ROUTINE    YSC11,CONVERT
         ROUTINE    YFFF11,CONVCC1
         LINE
         HEX        YCC12
         ROUTINE    YSC12,CONVERT
         ROUTINE    YFFF12,CONVCC1
         LINE
         HEX        YCC13
         ROUTINE    YSC13,CONVERT
         ROUTINE    YFFF13,CONVCC1
         LINE
         HEX        YCC14
         ROUTINE    YSC14,CONVERT
         ROUTINE    YFFF14,CONVCC1
         LINE
         HEX        YCC15
         ROUTINE    YSC15,CONVERT
         ROUTINE    YFFF15,CONVCC1
         LINE
         HEX        YCC16
         ROUTINE    YSC16,CONVERT
         ROUTINE    YFFF16,CONVCC1
         LINE
         HEX        YCC17
         ROUTINE    YSC17,CONVERT
         ROUTINE    YFFF17,CONVCC1
         LINE
         HEX        YCC18
         ROUTINE    YSC18,CONVERT
         ROUTINE    YFFF18,CONVCC1
         LABEL ''
         LINE
         HEX        YCC19
         ROUTINE    YSC19,CONVERT
         ROUTINE    YFFF19,CONVCC1
         LINE       ,,SKIP=2
         HEX        YCC20
         ROUTINE    YSC20,CONVERT
         ROUTINE    YFFF20,CONVCC1
         LINE       ,(2,56),SKIP=2
         ROUTINE    YDUMA,SKIPPER
*
         LINE       (40,55),(3,55),SKIP=1
         ROUTINE    YCDC,CONVERT
         LINE
         ROUTINE    YCCC,CONVERT
         LINE       ,,SKIP=2
         ROUTINE    YIFC,CONVERT
*
*
         LINE       ,(2,55),SKIP=2
         ROUTINE    YDUMA,SKIPPER
*
         LINE       ,(3,55),SKIP=1
         LABEL ' '
         DC    X'01000B8B00'
         LABEL ''
         LINE  ,(43,1),SKIP=2
         LABEL 'MACHINE CHECK REGISTER A'
         LINE  ,(10,65),SKIP=2
         LABEL 'BYTE 0','BYTE 2'
         LINE  (38,60),(1,59),SKIP=1
         ROUTINE    CTR100,CONVERT
         ROUTINE    CTR116,CONVERT
         LABEL 'LOCAL STORAGE A SOURCE ADDR CHK','ALU 2 HALF SUM CHK'
         LINE
         ROUTINE    CTR101,CONVERT
         ROUTINE    CTR117,CONVERT
         LABEL 'LOCAL STORAGE B SOURCE ADDR CHK','ALU 3 HALF SUM CHK'
         LINE
         ROUTINE    CTR102,CONVERT
         ROUTINE    CTR118,CONVERT
         LABEL 'LOCAL STORAGE A DEST ADDR CHK','ALU LOGICAL CHK'
         LINE
         ROUTINE    CTR103,CONVERT
         ROUTINE    CTR119,CONVERT
         LABEL 'LOCAL STORAGE B DEST ADDR CHK','B REG SHIFT CHK'
         LINE
         ROUTINE    CTR104,CONVERT
         ROUTINE    CTR120,CONVERT
         LABEL 'DEST BYTE CTRL CHK','A REG PTY CHK'
         LINE
         ROUTINE    CTR105,CONVERT
         ROUTINE    CTR121,CONVERT
         LABEL 'LOCAL STORAGE A-B DEST ADDR COMPARE','B REG PTY CHK'
         LINE
         ROUTINE    CTR106,CONVERT
         ROUTINE    CTR122,CONVERT
         LABEL 'LOCAL STORAGE CTRL ASSM CHK','Z REG PTY CHK'
         LINE  (38,60),(1,59),SKIP=2
         ROUTINE    CTR107,CONVERT
         ROUTINE    CTR123,CONVERT
         LABEL 'CTRL REG PTY CHK','D REG PTY CHK'
         LINE  ,(10,65),SKIP=2
         LABEL 'BYTE 1','BYTE 3'
         LINE  (38,60),(1,59),SKIP=1
         ROUTINE    CTR108,CONVERT
         ROUTINE    CTR124,CONVERT
         LABEL 'ADDR CHK BOUND REC CHK','EXT REG DEST X COMP CHK'
         LINE
         ROUTINE    CTR109,CONVERT
         ROUTINE    CTR125,CONVERT
         LABEL 'LOCAL STORAGE COMP CHK','EXT REG DEST Y COMP CHK'
         LINE
         ROUTINE    CTR110,CONVERT
         ROUTINE    CTR126,CONVERT
         LABEL 'FLUSH THRU CHK','EXT REG SOURCE Y CHK'
         LINE
         ROUTINE    CTR111,CONVERT
         ROUTINE    CTR127,CONVERT
         LABEL 'H REG PTY CHK','EXT CTRL ASSM PTY CHK'
         LINE
         ROUTINE    CTR112,CONVERT
         ROUTINE    CTR128,CONVERT
         LABEL 'CLOCK COMPARATOR-CPU TIMER CHK','INTERV TIMER PTY CHK'
         LINE
         ROUTINE    CTR113,CONVERT
         ROUTINE    CTR129,CONVERT
         LABEL 'P REG PTY CHK','S REC DUP CHK'
         LINE
         ROUTINE    CTR114,CONVERT
         ROUTINE    CTR130,CONVERT
         LABEL 'T REG PTY CHK','TIME OF DAY CLOCK CHK'
         LINE  (38,60),(1,59),SKIP=2                           @ZA30677
         ROUTINE CTR115,CONVERT                                @ZA30677
         ROUTINE CTR131,CONVERT                                @ZA30677
         ROUTINE YCPU,NP148                                    @ZA30677
         LABEL 'L REG PTY CHK','CTRL STORAGE ADDR CHK'         @ZA30677
         LINE  (38,60),(1,59),SKIP=2                           @ZA30677
         ROUTINE    CTR115,CONVERT
         ROUTINE    CTR131,CONVERT
         ROUTINE YCPU,P148                                     @ZA30677
         LABEL 'L REG PTY CHK','INC/DEC CHK'                   @ZA30677
         LINE  ,(43,1),SKIP=2
         LABEL 'MACHINE CHECK REGISTER B'
         LINE  ,(10,65),SKIP=2
         LABEL 'BYTE 0','BYTE 2'
         LINE  (38,60),(1,59),SKIP=1
         ROUTINE    CTR200,CONVERT
         ROUTINE    CTR216,CONVERT
         LABEL 'STORAGE ADD CHK','I CYCLE HARD ERROR'
         LINE
         ROUTINE    CTR201,CONVERT
         ROUTINE    CTR217,CONVERT
         LABEL 'SDBI PTY CHK','DOUBLE ECC ERROR'
         LINE
         ROUTINE    CTR202,CONVERT
         ROUTINE    CTR218,CONVERT
         ROUTINE YCPU,NP148                                    @ZA30677
         LABEL 'SDBO PTY CHK','02I CTRL LINE PTY CHK'
         LINE  ,                                               @ZA30677
         ROUTINE CTR202,CONVERT                                @ZA30677
         ROUTINE CTR218,CONVERT                                @ZA30677
         ROUTINE YCPU,P148                                     @ZA30677
         LABEL 'SDBO PTY CHK','SPARE'                          @ZA30677
         LINE
         ROUTINE    CTR203,CONVERT
         ROUTINE    CTR219,CONVERT
         ROUTINE YCPU,NP148                                    @ZA30677
         LABEL 'STORE PTY CHK','BUSY CHK'                      @ZA30677
         LINE  (38,60),(1,59)                                  @ZA30677
         ROUTINE CTR203,CONVERT                                @ZA30677
         ROUTINE CTR219,CONVERT                                @ZA30677
         ROUTINE YCPU,P148                                     @ZA30677
         LABEL 'STORE PTY CHK','MULTIPLY CHK'                  @ZA30677
         LINE
         ROUTINE    CTR204,CONVERT
         ROUTINE    CTR220,CONVERT
         ROUTINE YCPU,NP148                                    @ZA30677
         LABEL 'TIME OUT CHK','ECC HARDWARE CHK'               @ZA30677
         LINE  ,                                               @ZA30677
         ROUTINE CTR204,CONVERT                                @ZA30677
         ROUTINE CTR220,CONVERT                                @ZA30677
         ROUTINE YCPU,P148                                     @ZA30677
         LABEL 'COUNT CHK','SHIFT LOAD CHK'                    @ZA30677
         LINE
         ROUTINE    CTR205,CONVERT
         ROUTINE    CTR221,CONVERT
         LABEL 'STORAGE PROT STACK PTY CHK','DOUBLE ECC ERROR'
         LINE
         ROUTINE    CTR206,CONVERT
         ROUTINE    CTR222,CONVERT
         LABEL 'CLOCK SYN CHK A','SINGLE ECC ERROR'
         LINE  (38,60),(1,59),SKIP=2
         ROUTINE    CTR207,CONVERT
         ROUTINE    CTR223,CONVERT
         LABEL 'CLOCK SYN CHK B','SINGLE DATA BIT CORRCT'
         LINE  ,(10,65),SKIP=2
         LABEL 'BYTE 1','BYTE 3'
         LINE  (38,60),(1,59),SKIP=1
         ROUTINE    CTR208,CONVERT
         ROUTINE    CTR224,CONVERT
         ROUTINE YCPU,NP148                                    @ZA30677
         LABEL 'M REG COMP A CHK','02I CT ERROR CORRCT'
         LINE  ,                                               @ZA30677
         ROUTINE CTR208,CONVERT                                @ZA30677
         ROUTINE CTR224,CONVERT                                @ZA30677
         ROUTINE YCPU,P148                                     @ZA30677
         LABEL 'M REG COMP A CHK','CT ERROR CORRCT'            @ZA30677
         LINE
         ROUTINE    CTR209,CONVERT
         ROUTINE    CTR225,CONVERT
         LABEL 'M REG COMP B CHK','C32 DATA BIT CORRCT'
         LINE
         ROUTINE    CTR210,CONVERT
         ROUTINE    CTR226,CONVERT
         LABEL 'M REG COMP C CHK','C16 DATA BIT CORRCT'
         LINE
         ROUTINE    CTR211,CONVERT
         ROUTINE    CTR227,CONVERT
         LABEL 'M REG COMP D CHK','C8 DATA BIT CORRCT'
         LINE
         ROUTINE    CTR212,CONVERT
         ROUTINE    CTR228,CONVERT
         LABEL 'NO RELOCATE REGISTER MATCH','C4 DATA BIT CORRCT'
         LINE
         ROUTINE    CTR213,CONVERT
         ROUTINE    CTR229,CONVERT
         LABEL 'MULT RELOCATE REG MATCH','C2 DATA BIT CORRCT'
         LINE
         ROUTINE    CTR214,CONVERT
         ROUTINE    CTR230,CONVERT
         LABEL 'RELOCATE LRU INVALID','C1 DATA BIT CORRCT'
         LINE  (38,60),(1,59),SKIP=2
         ROUTINE    CTR215,CONVERT
         ROUTINE    CTR231,CONVERT
         LABEL 'ANY MACH CHK ON','C0 DATA BIT CORRCT'
         DC    X'01000B8B00'
         LABEL ''
         LINE  ,(10,65),SKIP=2
         LABEL 'RETRY REG 3 ERRORS  HMRTY','RETRY REG 4 ERRORS  CPURTY'
         LINE  (38,60),(1,59),SKIP=1
         ROUTINE    CTR300,CONVERT
         ROUTINE    CTR308,CONVERT
         LABEL 'MACHINE CHECK TRAP','STORAGE 2 CYCLE ERROR'
         LINE
         ROUTINE    CTR301,CONVERT
         ROUTINE    CTR309,CONVERT
         LABEL 'RETRY TRAP','TYPE 1 ERROR'
         LINE
         ROUTINE    CTR302,CONVERT
         ROUTINE    CTR310,CONVERT
         LABEL 'CPU HIGH TRAP','TYPE 2 ERROR'
         LINE
         ROUTINE    CTR303,CONVERT
         ROUTINE    CTR311,CONVERT
         LABEL 'INT FILE ADPTR OR SEL CHN 1,2 OR 3','TYPE 3 ERROR'
         LINE
         ROUTINE    CTR304,CONVERT
         ROUTINE    CTR312,CONVERT
         LABEL 'SEL CHN 1,2,3(IF IFA) OR SEL CHN 4',                   C
               'LOCAL OR EXT STORAGE DEST'
         LINE
         ROUTINE    CTR305,CONVERT
         ROUTINE    CTR313,CONVERT
         LABEL 'MPX TRAP','STORAGE WORD IN ERROR'
         LINE
         ROUTINE    CTR306,CONVERT
         ROUTINE    CTR314,CONVERT
         LABEL 'INT FILE ADPTR TRAP','ERROR IN TRAP 2 CYCLE'
         LINE  (38,60),(1,59),SKIP=2
         ROUTINE    CTR307,CONVERT
         ROUTINE    CTR315,CONVERT
         LABEL 'STORE DISPLAY','SPARE'
         LINE  ,(43,1),SKIP=2
         LABEL 'SYSTEM REGISTER'
         LINE  ,(10,65),SKIP=2
         LABEL 'BYTE 0','BYTE 2'
         LINE  (38,60),(1,59),SKIP=1
         ROUTINE    CTR400,CONVERT
         ROUTINE    CTR416,CONVERT
         LABEL 'MACHINE CHK INTERPT PENDING','ENABLE CLEAR SWITCH'
         LINE
         ROUTINE    CTR401,CONVERT
         ROUTINE    CTR417,CONVERT
         LABEL 'RETRY ROUTINE','TMPL'
         LINE
         ROUTINE    CTR402,CONVERT
         ROUTINE    CTR418,CONVERT
         LABEL 'MACHINE CHK ROUTINE','LOAD FILE WAIT'
         LINE
         ROUTINE    CTR403,CONVERT
         ROUTINE    CTR419,CONVERT
         LABEL 'DOCUMENTARY CONSOLE 2','CE KEY IN CE MODE'
         LINE
         ROUTINE    CTR404,CONVERT
         ROUTINE    CTR420,CONVERT
         LABEL 'LOG PRESENT','IPL'
         LINE
         ROUTINE    CTR405,CONVERT
         ROUTINE    CTR421,CONVERT
         LABEL 'SPARE','POWER ON RESET'
         LINE
         ROUTINE    CTR406,CONVERT
         ROUTINE    CTR422,CONVERT
         LABEL 'I/O INSTN LATCH','SPARE'
         LINE  (38,60),(1,59),SKIP=2
         ROUTINE    CTR407,CONVERT
         ROUTINE    CTR423,CONVERT
         LABEL 'FORCE MODULE 0 TO LSCS','INSTR PROC LATCH'
         LINE  ,(10,65),SKIP=2
         LABEL 'BYTE 1','BYTE 3'
         LINE  (38,60),(1,59),SKIP=1
         ROUTINE    CTR408,CONVERT
         ROUTINE    CTR424,CONVERT
         LABEL 'ADDR CONTENTS','MACHINE CHECK TRAP'
         LINE
         ROUTINE    CTR409,CONVERT
         ROUTINE    CTR425,CONVERT
         LABEL 'CPU INTRPT FORCE','RETRY TRAP'
         LINE
         ROUTINE    CTR410,CONVERT
         ROUTINE    CTR426,CONVERT
         LABEL 'SAR INTRPT FORCE','CPU HIGH TRAP'
         LINE
         ROUTINE    CTR411,CONVERT
         ROUTINE    CTR427,CONVERT
         LABEL 'PSW RESTART','INT FILE ADAPTR OR SEL CHN 1,2 OR 3'
         LINE
         ROUTINE    CTR412,CONVERT
         ROUTINE    CTR428,CONVERT
         LABEL 'EC MODE','SEL CHN 1,2,3(IF IFA) OR SEL CHN 4'
         LINE
         ROUTINE    CTR413,CONVERT
         ROUTINE    CTR429,CONVERT
         LABEL 'SYS CTRL INTRPT','MPX TRAP'
         LINE
         ROUTINE    CTR414,CONVERT
         ROUTINE    CTR430,CONVERT
         LABEL 'TIMER INTRPT FORCE','INT FILE ADAPTR TRAP'
         LINE
         ROUTINE    CTR415,CONVERT
         ROUTINE    CTR431,CONVERT
         LABEL 'PRTY INTRUPT','STORE-DISPLAY'
         LINE
         ROUTINE    YDUMA,FREECORE
         LABEL ' '
         DC    X'FF0000000000'
         DC    C'$'
LABLAREA EQU   *
         LSTART
         END
