         TITLE 'IFCFILT1-RECORD FILTER FOR EDIT AND SUMMARY'
IFCFILT1 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IFCFILT1  79.011'                                 0001
         DROP  @15
@PROLOG  ST    @14,12(,@13)                                        0001
         STM   @00,@12,20(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  LA    @11,4095(,@12)                                      0001
         LA    @10,4095(,@11)                                      0001
         LA    @09,4095(,@10)                                      0001
         USING @PSTART,@12                                         0001
         USING @PSTART+4095,@11                                    0001
         USING @PSTART+8190,@10                                    0001
         USING @PSTART+12285,@09                                   0001
         ST    @13,@SA00001+4                                      0001
         LA    @14,@SA00001                                        0001
         ST    @14,8(,@13)                                         0001
         LR    @13,@14                                             0001
*                   /*PROCESS ERROR RECORDS SEQUENTIALLY      @Z427VLS*
*   IF DEBUG4 = ON THEN                                            0199
         TM    DEBUG4(R2),B'00001000'                              0199
         BNO   @RF00199                                            0199
*   DO;                                                     /*@Z427VLS*
*    R15 = R12 - 27;                                        /*@Z427VLS*
         LR    R15,R12                                             0201
         SL    R15,@CF00870                                        0201
*    GEN(MVC  PRINTBDY(16),0(R15));                         /*@Z427VLS*
         MVC  PRINTBDY(16),0(R15)
*    PRINTADR = ADDR(PRINTLIN);                             /*@Z427VLS*
         LA    @14,PRINTLIN                                        0203
         ST    @14,PRINTADR(,R2)                                   0203
*    CALL IOHND(RITEPRTR);                                  /*@Z427VLS*
         L     @15,ADIOHND(,R2)                                    0204
         LA    @01,@AL00204                                        0204
         BALR  @14,@15                                             0204
*    R15 = ZERO;                                            /*@Z427VLS*
         SLR   R15,R15                                             0205
*   END;                                                    /*@Z427VLS*
*   CALL INITIATE;  /*GET CORE AND USER PROGRAM               @Z427VLS*
@RF00199 BAL   @14,INITIATE                                        0207
*   R15 = ERROR; /*GET ANY PROBLEMS FROM INITIATE             @Z427VLS*
         L     R15,ERROR                                           0208
*   DO WHILE R15 = SUCCESS & I <= MAXENT; /*DO IF ROOM I SORTABLE*/
         B     @DE00209                                            0209
@DL00209 DS    0H                                                  0210
*     CALL IOHND(READSEQ);                        /*GET A RECORD*/ 0210
         L     @15,ADIOHND(,R2)                                    0210
         LA    @01,@AL00210                                        0210
         BALR  @14,@15                                             0210
*     IF R15 = SUCCESS THEN  /*CONTINUE IF NOT EOF OR UNREADABLE*/ 0211
         LTR   R15,R15                                             0211
         BNZ   @RF00211                                            0211
*       DO;                                                 /*@Z427VLS*
*         BUG(1) = BUG(1) + 1;   /*NUMBER OF RECORDS READ     @Z427VLS*
         LA    @14,1                                               0213
         AL    @14,BUG                                             0213
         ST    @14,BUG                                             0213
*        IF (LRTKEY1 & GENREC) = HEXA0 × /* IF MCH OR CCH FRAME RECORD
*         (LRTKEY1 & GENREC) = HEXB0 THEN                          0214
         MVC   @TS00001(1),LRTKEY1(R7)                             0214
         NI    @TS00001,X'F0'                                      0214
         CLI   @TS00001,X'A0'                                      0214
         BE    @RT00214                                            0214
         MVC   @TS00001(1),LRTKEY1(R7)                             0214
         NI    @TS00001,X'F0'                                      0214
         CLI   @TS00001,X'B0'                                      0214
         BNE   @RF00214                                            0214
@RT00214 DS    0H                                                  0215
*     DO;                                                   /*@G51DGGB*
*     BUG(39) = BUG(39) + 1;                                /*@G51DGGB*
         LA    @14,1                                               0216
         AL    @14,BUG+152                                         0216
         ST    @14,BUG+152                                         0216
*     IF (PMCH = ON × PCHAN = ON) THEN                             0217
         TM    PMCH(R2),B'11000000'                                0217
         BZ    @RF00217                                            0217
*        CALL CKFRAMES;             /*GO SEE IF WE DO ANY THING WITH IT
         BAL   @14,CKFRAMES                                        0218
*      ELSE                                                        0219
*       BUG(37) = BUG(37) + ONE;                            /*@G51DGGB*
         B     @RC00217                                            0219
@RF00217 LA    @14,1                                               0219
         AL    @14,BUG+144                                         0219
         ST    @14,BUG+144                                         0219
*     END;                                                  /*@G51DGGB*
*       ELSE  /*NORMAL ERROR RECORD PROCESSING                @G51DGGB*
*        DO;                                                /*@G51DGGB*
         B     @RC00214                                            0221
@RF00214 DS    0H                                                  0222
*         CALL FILTER;          /*SELECT RECORD, BUILD SORTKEY*/   0222
         BAL   @14,FILTER                                          0222
*         IF PASSFLAG = YES THEN                                   0223
         TM    PASSFLAG(R2),B'00000001'                            0223
         BNO   @RF00223                                            0223
*           DO;                                             /*@Z427VLS*
*             IF PACC = YES THEN    /*HISTORY D.S. TO BE CREATED*/ 0225
         TM    PACC(R2),B'01000000'                                0225
         BNO   @RF00225                                            0225
*                 CALL IOHND(RITEHIST);  /*WRITE TO ACCDEV    @Z427VLS*
         L     @15,ADIOHND(,R2)                                    0226
         LA    @01,@AL00226                                        0226
         BALR  @14,@15                                             0226
*             IF R15 = SUCCESS THEN                         /*@D3506GB*
@RF00225 LTR   R15,R15                                             0227
         BNZ   @RF00227                                            0227
*              IF PRINTES ^= NEITHER                /*RECORDS PRINTED?*
*               THEN DO;                                    /*@Z427VLS*
         TM    PRINTES(R2),B'00011000'                             0228
         BZ    @RF00228                                            0228
*                    CALL ADDCPU;                           /*@D35UGGB*
         BAL   @14,ADDCPU                                          0230
*          IF PHIST = ON & PASSFLAG = ON THEN               /*@D35UGGB*
         TM    PHIST(R2),B'00100001'                               0231
         BNO   @RF00231                                            0231
*                   DO;              /*RECORDS ON D.A.D.S.    @Z427VLS*
*                     CALL IOHND(RITESCRT);                 /*@Z427VLS*
         L     @15,ADIOHND(,R2)                                    0233
         LA    @01,@AL00233                                        0233
         BALR  @14,@15                                             0233
*                     IF R15 = OVERFLOW THEN /*SCRATCH D.S. TOO SMALL*/
         C     R15,@CF00066                                        0234
         BNE   @RF00234                                            0234
*                      DO;                                  /*@Z427VLS*
*                       ZEROALL = NO; /*DONT CLEAR SERLOG IF ALL*/ 0236
         NI    ZEROALL(R2),B'10111111'                             0236
*                       PASSNUM = PASSNUM - 1; /*NO ROOM FOR RECORD*/
         L     @14,PASSNUM                                         0237
         BCTR  @14,0                                               0237
         ST    @14,PASSNUM                                         0237
*                      END;                                 /*@Z427VLS*
*                   END;              /*RECORDS NOT PROCESSED @Z427VLS*
@RF00234 DS    0H                                                  0240
*           IF R15 = SUCCESS & PASSFLAG = YES THEN          /*@D35UGGB*
@RF00231 LTR   R15,R15                                             0240
         BNZ   @RF00240                                            0240
         TM    PASSFLAG(R2),B'00000001'                            0240
         BNO   @RF00240                                            0240
*                   DO;                  /*UPDATE INDEX TO NEXT */ 0241
*          WORKCCHR = RECCCHHR;                             /*@D35UGGB*
         MVC   WORKCCHR(5),RECCCHHR(R2)                            0242
*          SORTNEW(I) = WORKTABL;                           /*@D35UGGB*
         L     @14,I                                               0243
         LR    @08,@14                                             0243
         MH    @08,@CH00033                                        0243
         L     @06,SORTADR(,R2)                                    0243
         ALR   @06,@08                                             0243
         AL    @06,@CF01562                                        0243
         MVC   SORTNEW(11,@06),WORKTABL                            0243
*                     I = I + 1;                            /*@Z427VLS*
         AL    @14,@CF00055                                        0244
         ST    @14,I                                               0244
*                   END;                                    /*@Z427VLS*
*               END;                                        /*@Z427VLS*
*            ELSE                                           /*@D3506GB*
*               PASSNUM = PASSNUM + 1;                      /*@D3506GB*
         B     @RC00228                                            0247
@RF00228 LA    @14,1                                               0247
         AL    @14,PASSNUM                                         0247
         ST    @14,PASSNUM                                         0247
*           END;                                            /*@Z427VLS*
@RC00228 DS    0H                                                  0248
@RF00227 DS    0H                                                  0249
*  END;                                                     /*@G51DGGB*
@RF00223 DS    0H                                                  0250
*       END;                                                /*@Z427VLS*
@RC00214 DS    0H                                                  0251
*   END;                                                    /*@Z427VLS*
@RF00211 DS    0H                                                  0251
@DE00209 LTR   R15,R15                                             0251
         BNZ   @DC00209                                            0251
         L     @14,I                                               0251
         C     @14,MAXENT                                          0251
         BNH   @DL00209                                            0251
@DC00209 DS    0H                                                  0252
*   ERROR = R15; /*TELL ENDOFILE ERROR STATUS                 @Z427VLS*
         ST    R15,ERROR                                           0252
*   CALL ENDOFILE; /*SORT SORTABLE, FREE EXCESS CORE, HANDLE  @Z427VLS*
         BAL   @14,ENDOFILE                                        0253
*                  /*ERROR CONDITIONS                         @Z427VLS*
*   R15 = ERROR; /*PASS RETURN CODE TO USER                   @Z427VLS*
         L     R15,ERROR                                           0254
*   IF DEBUG16 = ON THEN                                           0255
         TM    DEBUG16(R2),B'10000000'                             0255
         BNO   @RF00255                                            0255
*     CALL BUGCNTS; /*PRINT COUNTS OF DIFFERENT RECORDS PROCESSED*/
         BAL   @14,BUGCNTS                                         0256
*   IF DEBUG11 = ON THEN                                           0257
@RF00255 TM    DEBUG11(R2),B'00010000'                             0257
         BNO   @RF00257                                            0257
*     GEN(ABEND 120,DUMP); /*SHOW STATUS IF TESTING SITUATION @Z427VLS*
         ABEND 120,DUMP
* RESPECIFY (R15) UNRESTRICTED;                             /*@Z427VLS*
* INITIATE: PROC; /*LOAD USER PROGRAM AND GET CORE FOR SORT TABLE*/
@EL00001 L     @13,4(,@13)                                         0260
@EF00001 DS    0H                                                  0260
@ER00001 L     @14,12(,@13)                                        0260
         LM    @00,@12,20(@13)                                     0260
         BR    @14                                                 0260
INITIATE STM   @14,@12,@SA00002                                    0260
* RESPECIFY(R0,R3,R15) RESTRICTED;                          /*@Z427VLS*
*   R15 = ZERO;                                             /*@Z427VLS*
         SLR   R15,R15                                             0262
*  DO J = 1 BY 1 TO SHARENUM WHILE(SHAREPTR ^= ZERO);       /*@D35UGGB*
         LA    @14,1                                               0263
         ST    @14,J                                               0263
         B     @DE00263                                            0263
@DL00263 SLR   @14,@14                                             0263
         C     @14,SHAREPTR(,R2)                                   0263
         BE    @DC00263                                            0263
*   IF CPUCT ^= ZERO THEN          /*SEE IF FIRST TIME IN*/ /*@D35UGGB*
         L     @08,CPUCT                                           0264
         CR    @08,@14                                             0264
         BE    @RF00264                                            0264
*    DO;                                                    /*@D35UGGB*
*      PASSFLAG = OFF;                                      /*@D3506GB*
         NI    PASSFLAG(R2),B'11111110'                            0266
*      TEMPSET = CPUCT;                                     /*@D35UGGB*
         ST    @08,TEMPSET                                         0267
*      DO M = 1 BY 1 TO TEMPSET;                            /*@D35UGGB*
         LA    @14,1                                               0268
         ST    @14,M                                               0268
         B     @DE00268                                            0268
@DL00268 DS    0H                                                  0269
*        IF CPUTAB1(M) = SHARSERA(J) THEN  /*                 @D3505GB*
         MH    @14,@CH00076                                        0269
         L     @08,J                                               0269
         SLA   @08,4                                               0269
         L     @01,SHAREPTR(,R2)                                   0269
         LA    @06,CPUTAB1-3(@14)                                  0269
         ALR   @01,@08                                             0269
         AL    @01,@CF01564                                        0269
         CLC   0(3,@06),SHARSERA-10(@01)                           0269
         BNE   @RF00269                                            0269
*           PASSFLAG = ON;                                  /*@D3505GB*
         OI    PASSFLAG(R2),B'00000001'                            0270
*       END;                                                /*@D35UGGB*
@RF00269 LA    @14,1                                               0271
         AL    @14,M                                               0271
         ST    @14,M                                               0271
@DE00268 C     @14,TEMPSET                                         0271
         BNH   @DL00268                                            0271
*        IF PASSFLAG = OFF & CPUCT < 16 THEN                       0272
         TM    PASSFLAG(R2),B'00000001'                            0272
         BNZ   @RF00272                                            0272
         L     @14,CPUCT                                           0272
         C     @14,@CF00088                                        0272
         BNL   @RF00272                                            0272
*          DO;                                              /*@D3505GB*
*             CPUCT = CPUCT + 1;                            /*@D3505GB*
         AL    @14,@CF00055                                        0274
         ST    @14,CPUCT                                           0274
*             CPUTAB1(CPUCT) = SHARSERA(J);                 /*@D3505GB*
         MH    @14,@CH00076                                        0275
         LA    @08,CPUTAB1-3(@14)                                  0275
         L     @14,J                                               0275
         SLA   @14,4                                               0275
         L     @01,SHAREPTR(,R2)                                   0275
         ALR   @01,@14                                             0275
         AL    @01,@CF01564                                        0275
         MVC   0(3,@08),SHARSERA-10(@01)                           0275
*          END;                                             /*@D3505GB*
*      END;                                                 /*@D35UGGB*
*     ELSE                                                  /*@D35UGGB*
*      DO;                                                  /*@D35UGGB*
         B     @RC00264                                            0278
@RF00264 DS    0H                                                  0279
*        CPUTAB1(1) = SHARSERB(1);                          /*@D35UGGB*
         L     @01,SHAREPTR(,R2)                                   0279
         MVC   CPUTAB1(3),SHARSERB(@01)                            0279
*        CPUCT = 1;                                         /*@D35UGGB*
         MVC   CPUCT(4),@CF00055                                   0280
*      END;                                                 /*@D35UGGB*
*    END;                                                   /*@D35UGGB*
@RC00264 LA    @14,1                                               0282
         AL    @14,J                                               0282
         ST    @14,J                                               0282
@DE00263 L     @01,SHAREPTR(,R2)                                   0282
         CH    @14,SHARENUM(,@01)                                  0282
         BNH   @DL00263                                            0282
@DC00263 DS    0H                                                  0283
*   IF USERPGM ^= BLANKS THEN /*IF USER PROGRAM EXISTS        @Z427VLS*
         CLC   USERPGM(8,R2),@CC00995                              0283
         BE    @RF00283                                            0283
*     DO;                                                   /*@Z427VLS*
*        BLDNAME = USERPGM;                                 /*@Z427VLS*
         MVC   BLDNAME(8),USERPGM(R2)                              0285
*        GEN(BLDL  0,BLDLIST);                              /*@Z427VLS*
         BLDL  0,BLDLIST
*        IF R15 ^= SUCCESS THEN /* USER PROGRAM NOT IN LIBRARY IF*/
         LTR   R15,R15                                             0287
         BZ    @RF00287                                            0287
*          DO;                  /* R15 NOT SUCCESS            @Z427VLS*
*             MSGNO = 1; /*PRINT - CANT FIND USER PROGRAM     @Z427VLS*
         MVI   MSGNO,X'01'                                         0289
*             CALL ERRMSG;                                  /*@Z427VLS*
         BAL   @14,ERRMSG                                          0290
*             R15 = TERMINAT;                               /*@Z427VLS*
         LA    R15,12                                              0291
*          END;                                             /*@Z427VLS*
*        ELSE                                                      0293
*          DO;                                              /*@Z427VLS*
         B     @RC00287                                            0293
@RF00287 DS    0H                                                  0294
*              GEN(LOADEREP EPLOC=BLDNAME);  /*LOAD USER PROGRAM INTO *
         LOADEREP EPLOC=BLDNAME
*             USERLOC = R0;          /*VIRTUAL STORAGE AND    @Z427VLS*
         ST    R0,USERLOC                                          0295
*             R15 = SUCCESS;                                /*@D35UGVS*
         SLR   R15,R15                                             0296
*          END;                      /*SAVE ITS LOCATION      @Z427VLS*
*     END;                                                  /*@Z427VLS*
@RC00287 DS    0H                                                  0299
*     IF R15 = SUCCESS THEN                                 /*@D35UGGB*
@RF00283 LTR   R15,R15                                             0299
         BNZ   @RF00299                                            0299
*      DO;                                                  /*@D35UGGB*
*       R0= 80;                                             /*@D35UGGB*
         LA    R0,80                                               0301
*       GEN(GETMAIN  EC,LV=(R0),A=CPUADR);                  /*@D35UGGB*
         GETMAIN  EC,LV=(R0),A=CPUADR
*      END;                                                 /*@D35UGGB*
*   IF R15 = SUCCESS THEN /*IF SUCCESSFUL LOAD OR NO USER PROGRAM*/
@RF00299 LTR   R15,R15                                             0304
         BNZ   @RF00304                                            0304
*     DO;                                                   /*@Z427VLS*
*       IF PEDIT = ON × PSUM = ON THEN /*SORTABLE BUILT IF EDIT OR*/
         TM    PEDIT(R2),B'00011000'                               0306
         BZ    @RF00306                                            0306
*         DO;                          /*SUMMARY PRINTING     @Z427VLS*
*            MAXENT = TABSIZE / 11;/*SORT TABLE ENTRIES HAVE ROOM FOR *
         L     @14,TABSIZE(,R2)                                    0308
         LR    @04,@14                                             0308
         SRDA  @04,32                                              0308
         D     @04,@CF00033                                        0308
         ST    @05,MAXENT                                          0308
*            R0     = TABSIZE; /*AMOUNT OF CORE FOR GETMAIN   @Z427VLS*
         LR    R0,@14                                              0309
*            GEN(GETMAIN EC,LV=(R0),A=GETADR); /*CONDITIONAL GETMAIN*/
         GETMAIN EC,LV=(R0),A=GETADR
*            IF R15 ^= SUCCESS THEN  /*IF CANT GET CORE, TELL WORLD*/
         LTR   R15,R15                                             0311
         BZ    @RF00311                                            0311
*              DO;                                          /*@Z427VLS*
*                MSGNO = 2;                                 /*@Z427VLS*
         MVI   MSGNO,X'02'                                         0313
*                CALL ERRMSG;                               /*@Z427VLS*
         BAL   @14,ERRMSG                                          0314
*                R15 = NOSRTABL;                            /*@Z427VLS*
         LA    R15,12                                              0315
*                GETFAIL = YES;                             /*@0001VLS*
         OI    GETFAIL,B'00010000'                                 0316
*              END;                                         /*@Z427VLS*
*            ELSE                                                  0318
*              SORTADR = GETADR; /*SET SORTABLE ADDRESS BASE  @Z427VLS*
         B     @RC00311                                            0318
@RF00311 L     @14,GETADR                                          0318
         ST    @14,SORTADR(,R2)                                    0318
*          END;                                             /*@Z427VLS*
*        ELSE                                                      0320
*          MAXENT = MAXMAX; /*IF NO TABLES, SET BIG ARBITRARY LOOP LIM*
         B     @RC00306                                            0320
@RF00306 MVC   MAXENT(4),@CF01070                                  0320
*      END;                                                 /*@Z427VLS*
*   ELSE                                                           0322
*     MAXENT = MAXMAX;     /* AVOID MSG # 64 IN EOF           @G51DGGB*
         B     @RC00304                                            0322
@RF00304 MVC   MAXENT(4),@CF01070                                  0322
* IF R15 = SUCCESS &  /*IF OTHER GETMAINS HAVE BEEN SUCCESSFULL  */
*          (PMCH = ON × PCHAN = ON) THEN /*IF MCH OR CCH SELECTED*/
@RC00304 LTR   R15,R15                                             0323
         BNZ   @RF00323                                            0323
         TM    PMCH(R2),B'11000000'                                0323
         BZ    @RF00323                                            0323
*   DO;                                                     /*@G51DGGB*
*     R0 = FRAMBENT * EVMAX; /*NUMBER OF ENTRIES TIMES BYTES PER ENTRY*
         LA    R0,384                                              0325
*     R0 = R0 + 4;           /*ADD FRAMENUM LENGTH            @G51DGGB*
         AL    R0,@CF00064                                         0326
*     GEN(GETMAIN EC,LV=(0),A=TEMPSAV,SP=21);               /*@G51DGGB*
         GETMAIN EC,LV=(0),A=TEMPSAV,SP=21
*     FRAMEPTR = TEMPSAV;                                   /*@G51DGGB*
         L     @14,TEMPSAV                                         0328
         ST    @14,FRAMEPTR(,R2)                                   0328
*     IF R15 = SUCCESS THEN   /*IF GETMAIN SUCCESSFULL        @G51DGGB*
         LTR   R15,R15                                             0329
         BNZ   @RF00329                                            0329
*       DO;                                                 /*@G51DGGB*
*        BUG(42) = BUG(42) + 1;                             /*@G51DGGB*
         LA    @14,1                                               0331
         L     @08,BUG+164                                         0331
         ALR   @08,@14                                             0331
         ST    @08,BUG+164                                         0331
*         DO Y = 1 BY 1 TO EVMAX; /*CLEAR FRAMETAB TO ZEROS   @G51DGGB*
         ST    @14,Y                                               0332
@DL00332 DS    0H                                                  0333
*           FRAMEDTA(Y) = (FRAMEDTA(Y) && FRAMEDTA(Y));     /*@G51DGGB*
         LR    @08,@14                                             0333
         MH    @08,@CH00227                                        0333
         L     @01,FRAMEPTR(,R2)                                   0333
         ALR   @01,@08                                             0333
         AL    @01,@CF01567                                        0333
         XC    FRAMEDTA-4(24,@01),FRAMEDTA-4(@01)                  0333
*         END;                                              /*@G51DGGB*
         AL    @14,@CF00055                                        0334
         ST    @14,Y                                               0334
         C     @14,@CF00088                                        0334
         BNH   @DL00332                                            0334
*         FRAMENUM = ZERO;                                  /*@G51DGGB*
         L     @01,FRAMEPTR(,R2)                                   0335
         SLR   @14,@14                                             0335
         ST    @14,FRAMENUM(,@01)                                  0335
*       END;                                                /*@G51DGGB*
*   ELSE  /*UNSUCCESSFULL GETMAIN                             @G51DGGB*
*     DO;                                                   /*@G51DGGB*
         B     @RC00329                                            0337
@RF00329 DS    0H                                                  0338
*       MSGNO = XX;   /*ERROR MESSAGE NUMBER                  @G51DGGB*
         MVI   MSGNO,X'08'                                         0338
*       CALL ERRMSG;  /*PRINT ERROR MESSAGE                   @G51DGGB*
         BAL   @14,ERRMSG                                          0339
*       R15 = TWELVE;  /*DONT CONTINUE RETURN CODE            @G51DGGB*
         LA    @08,12                                              0340
         LR    R15,@08                                             0340
*       ERROR = 12;                                         /*@G51DGGB*
         ST    @08,ERROR                                           0341
*     END;                                                  /*@G51DGGB*
*  END; /*END OF FRAMETAB GETMAIN                             @G51DGGB*
@RC00329 DS    0H                                                  0344
* ERROR = R15; /*TELL MAIN PROC IF ERROR CONDITION            @Z427VLS*
@RF00323 ST    R15,ERROR                                           0344
* RESPECIFY(R0,R1,R15) UNRESTRICTED;                        /*@Z427VLS*
* END;                                                      /*@Z427VLS*
@EL00002 DS    0H                                                  0346
@EF00002 DS    0H                                                  0346
@ER00002 LM    @14,@12,@SA00002                                    0346
         BR    @14                                                 0346
*  ADDCPU: PROC;                                            /*@D35UGGB*
ADDCPU   STM   @14,@12,12(@13)                                     0347
* DCL TEMPCT9 FIXED(31) INIT(0);                            /*@D35UGGB*
* PASSFLAG = OFF;                                           /*@D35UGGB*
         NI    PASSFLAG(R2),B'11111110'                            0349
*    DO J = 1 BY 1 TO CPUCT WHILE (PASSFLAG = NO );         /*@D35UGGB*
         LA    @08,1                                               0350
         ST    @08,J                                               0350
         B     @DE00350                                            0350
@DL00350 TM    PASSFLAG(R2),B'00000001'                            0350
         BNZ   @DC00350                                            0350
*      IF RECCPU = CPUTAB1(J) THEN                                 0351
         LR    @06,@08                                             0351
         MH    @06,@CH00076                                        0351
         LA    @01,CPUTAB1-3(@06)                                  0351
         CLC   RECCPU(3),0(@01)                                    0351
         BNE   @RF00351                                            0351
*      DO;                                                  /*@D35UGGB*
*       PASSFLAG = ON;                                      /*@D35UGGB*
         OI    PASSFLAG(R2),B'00000001'                            0353
*       CPUID = J;                                          /*@D35UGGB*
         STC   @08,CPUID                                           0354
*      END;                                                 /*@D35UGGB*
*    END;                                                   /*@D35UGGB*
@RF00351 LA    @08,1                                               0356
         AL    @08,J                                               0356
         ST    @08,J                                               0356
@DE00350 C     @08,CPUCT                                           0356
         BNH   @DL00350                                            0356
@DC00350 DS    0H                                                  0357
*    IF PASSFLAG = NO  & CPUCT <  16 THEN                   /*@D35UGGB*
         TM    PASSFLAG(R2),B'00000001'                            0357
         BNZ   @RF00357                                            0357
         L     @08,CPUCT                                           0357
         C     @08,@CF00088                                        0357
         BNL   @RF00357                                            0357
*     DO;                                                   /*@D35UGGB*
*      PASSFLAG = YES;                                      /*@D35UGGB*
         OI    PASSFLAG(R2),B'00000001'                            0359
*      CPUCT = CPUCT + 1;                                   /*@D35UGGB*
         AL    @08,@CF00055                                        0360
         ST    @08,CPUCT                                           0360
*      CPUTAB1(CPUCT) = RECCPU ;                            /*@D3506GB*
         LR    @06,@08                                             0361
         MH    @06,@CH00076                                        0361
         LA    @01,CPUTAB1-3(@06)                                  0361
         MVC   0(3,@01),RECCPU                                     0361
*      CPUID = CPUCT;                                       /*@D35UGGB*
         STC   @08,CPUID                                           0362
*     END;                                                  /*@D35UGGB*
*   IF PASSFLAG = YES THEN                                  /*@D35UGGB*
@RF00357 TM    PASSFLAG(R2),B'00000001'                            0364
         BNO   @RF00364                                            0364
*     PASSNUM = PASSNUM + 1;                                /*@D35UGGB*
         LA    @08,1                                               0365
         AL    @08,PASSNUM                                         0365
         ST    @08,PASSNUM                                         0365
*   ELSE                                                    /*@D35UGGB*
*     TOOMANY = TOOMANY + 1;                                /*@D35UGGB*
         B     @RC00364                                            0366
@RF00364 LA    @08,1                                               0366
         AL    @08,TOOMANY                                         0366
         ST    @08,TOOMANY                                         0366
* END;                                                      /*@D35UGGB*
@EL00003 DS    0H                                                  0367
@EF00003 DS    0H                                                  0367
@ER00003 LM    @14,@12,12(@13)                                     0367
         BR    @14                                                 0367
* ENDOFILE: PROC; /*SORT SORTABLE AND PASS RETURN CODE TO EREP1*/  0368
ENDOFILE STM   @14,@12,@SA00004                                    0368
* RESPECIFY(R15) RESTRICTED;                                /*@Z427VLS*
* IF ERROR = OVERFLOW & PHIST = ON & PLOGREC = OFF THEN            0370
         CLC   ERROR(4),@CF00066                                   0370
         BNE   @RF00370                                            0370
         TM    PHIST(R2),B'00100000'                               0370
         BNO   @RF00370                                            0370
         TM    PLOGREC(R2),B'00000010'                             0370
         BNZ   @RF00370                                            0370
*   DO;                                                     /*@0001VLS*
*     CLOSEIO = (CLOSEIO && CLOSEIO);                       /*@0001VLS*
         XC    CLOSEIO(2,R2),CLOSEIO(R2)                           0372
*     CACCIN = ON;                                          /*@0001VLS*
         OI    CACCIN(R2),B'00010000'                              0373
*     CALL IOHND(IOCLOSE);                                  /*@0001VLS*
         L     @15,ADIOHND(,R2)                                    0374
         LA    @01,@AL00374                                        0374
         BALR  @14,@15                                             0374
*   END;                                                    /*@0001VLS*
* R15 = ERROR; /*GET MAIN PROCEDURE ERROR STATUS              @Z427VLS*
@RF00370 L     R15,ERROR                                           0376
* IF R15 = OVERFLOW × R15 = ENDFILE THEN                           0377
         C     R15,@CF00066                                        0377
         BE    @RT00377                                            0377
         C     R15,@CF00064                                        0377
         BNE   @RF00377                                            0377
@RT00377 DS    0H                                                  0378
*   R15 = ZERO;          /*DOESNT NEED TO KNOW                @Z427VLS*
         SLR   R15,R15                                             0378
* IF MAXENT < I & ERROR ^= ENDFILE & GETFAIL = NO THEN             0379
@RF00377 L     @14,MAXENT                                          0379
         C     @14,I                                               0379
         BNL   @RF00379                                            0379
         CLC   ERROR(4),@CF00064                                   0379
         BE    @RF00379                                            0379
         TM    GETFAIL,B'00010000'                                 0379
         BNZ   @RF00379                                            0379
*   DO;                   /*WORLD, DONT TELL EREP1, DONT LET LOGREC*/
*     ZEROALL = NO;       /*BE RESET.                         @Z427VLS*
         NI    ZEROALL(R2),B'10111111'                             0381
*     MSGNO = 3;                                            /*@Z427VLS*
         MVI   MSGNO,X'03'                                         0382
*     CALL ERRMSG;                                          /*@Z427VLS*
         BAL   @14,ERRMSG                                          0383
*     ERROR = ZERO;                                         /*@0001VLS*
         SLR   @14,@14                                             0384
         ST    @14,ERROR                                           0384
*   END;                                                    /*@Z427VLS*
* IF ERROR = OVERFLOW × ERROR = ENDFILE THEN                       0386
@RF00379 L     @14,ERROR                                           0386
         C     @14,@CF00066                                        0386
         BE    @RT00386                                            0386
         C     @14,@CF00064                                        0386
         BNE   @RF00386                                            0386
@RT00386 DS    0H                                                  0387
*   ERROR = ZERO;                                           /*@0001VLS*
         SLR   @14,@14                                             0387
         ST    @14,ERROR                                           0387
*  IF DEBUG16 = ON THEN                                            0388
@RF00386 TM    DEBUG16(R2),B'10000000'                             0388
         BNO   @RF00388                                            0388
*   DO;                                                     /*@0099VLS*
* BINWORD = BUG(1);                                         /*@G51DGGB*
         L     @14,BUG                                             0390
         ST    @14,BINWORD                                         0390
* CALL IFCMSG(83,ADDR(PRINTBDY));                           /*@G51DGGB*
         LA    @14,PRINTBDY                                        0391
         ST    @14,@AFTEMPS                                        0391
         L     @15,ADIFCMSG(,R2)                                   0391
         LA    @01,@AL00391                                        0391
         BALR  @14,@15                                             0391
*   GEN(MVC  PRINTBDY(7),BUG16);                            /*@0099VLS*
         MVC  PRINTBDY(7),BUG16
* DECADDR= ADDR(PRINTBDY) + 7;                              /*@G51DGGB*
         LA    @14,PRINTBDY                                        0393
         AL    @14,@CF00083                                        0393
         ST    @14,DECADDR                                         0393
* CALL CONVBIN;                                             /*@G51DGGB*
         BAL   @14,CONVBIN                                         0394
* CALL PRINTIT;                                             /*@G51DGGB*
         BAL   @14,PRINTIT                                         0395
*   END;                                                    /*@0099VLS*
* CALL IFCMSG(54,ADDR(PRINTBDY));                           /*@G51DGGB*
@RF00388 LA    @14,PRINTBDY                                        0397
         ST    @14,@AFTEMPS                                        0397
         L     @15,ADIFCMSG(,R2)                                   0397
         LA    @01,@AL00397                                        0397
         BALR  @14,@15                                             0397
* DECADDR = ADDR(PRINTBDY) + 7; /*WHERE TO PUT CONVERTED VALUE*/   0398
         LA    @14,PRINTBDY                                        0398
         AL    @14,@CF00083                                        0398
         ST    @14,DECADDR                                         0398
* BINWORD  = PASSNUM;                                       /*@G51DGGB*
         L     @14,PASSNUM                                         0399
         ST    @14,BINWORD                                         0399
* CALL CONVBIN;                                             /*@G51DGGB*
         BAL   @14,CONVBIN                                         0400
* CALL PRINTIT;                                             /*@G51DGGB*
         BAL   @14,PRINTIT                                         0401
* PRINTADR = ADDR(PRINTLIN);                                /*@Z427VLS*
         LA    @14,PRINTLIN                                        0402
         ST    @14,PRINTADR(,R2)                                   0402
* CALL IOHND(RITEPRTR);                                     /*@Z427VLS*
         L     @15,ADIOHND(,R2)                                    0403
         LA    @01,@AL00403                                        0403
         BALR  @14,@15                                             0403
* IF PHIST = ON THEN                 /*HAVE TO CLOSE THE DIRECTWK */
         TM    PHIST(R2),B'00100000'                               0404
         BNO   @RF00404                                            0404
*   DO;                                                     /*@G51DGGB*
*    CLOSEIO = CLOSEIO && CLOSEIO;                          /*@G51DGGB*
         XC    CLOSEIO(2,R2),CLOSEIO(R2)                           0406
*    CDRCTWRK= ON;                   /*SET THE FLAG TO ON     @G51DGGB*
         OI    CDRCTWRK(R2),B'00000010'                            0407
*    CALL IOHND(IOCLOSE);                                   /*@G51DGGB*
         L     @15,ADIOHND(,R2)                                    0408
         LA    @01,@AL00408                                        0408
         BALR  @14,@15                                             0408
*   END;                                                    /*@G51DGGB*
* IF FRAMEPTR ^= 0 & FRAMENUM ^= 0 THEN                            0410
@RF00404 SLR   @14,@14                                             0410
         L     @08,FRAMEPTR(,R2)                                   0410
         CR    @08,@14                                             0410
         BE    @RF00410                                            0410
         C     @14,FRAMENUM(,@08)                                  0410
         BE    @RF00410                                            0410
*  DO J = 1 BY 1 TO FRAMENUM;                               /*@G51DGGB*
         LA    @14,1                                               0411
         ST    @14,J                                               0411
         B     @DE00411                                            0411
@DL00411 DS    0H                                                  0412
*   IF FRAMETYP(J) = ALLALL THEN                                   0412
         MH    @14,@CH00227                                        0412
         L     @08,FRAMEPTR(,R2)                                   0412
         ALR   @08,@14                                             0412
         AL    @08,@CF01569                                        0412
         CLI   FRAMETYP-17(@08),X'FF'                              0412
         BNE   @RF00412                                            0412
*    BUG(38) = BUG(38) + 1;                                 /*@G51DGGB*
         LA    @14,1                                               0413
         AL    @14,BUG+148                                         0413
         ST    @14,BUG+148                                         0413
*  END;                                                     /*@G51DGGB*
@RF00412 LA    @14,1                                               0414
         AL    @14,J                                               0414
         ST    @14,J                                               0414
@DE00411 L     @08,FRAMEPTR(,R2)                                   0414
         C     @14,FRAMENUM(,@08)                                  0414
         BNH   @DL00411                                            0414
* IF ERROR < TWELVE & FRAMEPTR ^= 0                                0415
*    &  FRAMENUM > ZERO THEN /* IF FRAMES CPUS FOUND          @G51DGGB*
@RF00410 L     @14,ERROR                                           0415
         C     @14,@CF00032                                        0415
         BNL   @RF00415                                            0415
         SLR   @14,@14                                             0415
         L     @08,FRAMEPTR(,R2)                                   0415
         CR    @08,@14                                             0415
         BE    @RF00415                                            0415
         C     @14,FRAMENUM(,@08)                                  0415
         BNL   @RF00415                                            0415
*     CALL WRITEFRM;                                        /*@G51DGGB*
         BAL   @14,WRITEFRM                                        0416
* IF ERROR ^= NOSRTABL & (PSUM = ON × PEDIT = ON) THEN             0417
@RF00415 CLC   ERROR(4),@CF00032                                   0417
         BE    @RF00417                                            0417
         TM    PSUM(R2),B'00011000'                                0417
         BZ    @RF00417                                            0417
*  DO;                                                      /*@Z427VLS*
*    SORTNUM = PASSNUM;     /*TELL EREP1 HOW MANY RECORDS IN SORTABLE*/
         L     @14,PASSNUM                                         0419
         ST    @14,SORTNUM(,R2)                                    0419
*    EXCESS = TABSIZE - (PASSNUM * SORTELNT); /*UNUSED SORTABLE*/  0420
         L     @08,TABSIZE(,R2)                                    0420
         MH    @14,@CH00033                                        0420
         LCR   @14,@14                                             0420
         ALR   @14,@08                                             0420
         ST    @14,EXCESS                                          0420
*    IF EXCESS > 16 THEN  /*IF AT LEAST ONE DOUBLEWORD AFTER ROUNDING*/
         C     @14,@CF00088                                        0421
         BNH   @RF00421                                            0421
*    DO;                                                    /*@Z427VLS*
*      EXCESS = (EXCESS & DBWRD); /*ROUND DOWN TO DOUBLE WORD AMMOUNT*/
         N     @14,@CF01073                                        0423
         ST    @14,EXCESS                                          0423
*      RESPECIFY (R0,R1) RESTRICTED;                        /*@Z427VLS*
*      R0 = EXCESS;                                         /*@Z427VLS*
         LR    R0,@14                                              0425
*      R1 = SORTADR + TABSIZE - EXCESS; /*POINT TO BEGINNING OF UNUSED*
         AL    @08,SORTADR(,R2)                                    0426
         SLR   @08,@14                                             0426
         LR    R1,@08                                              0426
*      GEN(FREEMAIN  R,LV=(0),A=(1));                       /*@Z427VLS*
         FREEMAIN  R,LV=(0),A=(1)
*    END;                                                   /*@Z427VLS*
*    RESPECIFY(R0,R1) UNRESTRICTED;                         /*@Z427VLS*
@RF00421 DS    0H                                                  0430
*   END;                                                    /*@Z427VLS*
* CLOSEIO = '0000'X; /*DONT CLOSE UNNECESSARY DATA SETS       @Z427VLS*
@RF00417 MVC   CLOSEIO(2,R2),@CB00208                              0431
* IF PACC = YES THEN  /*IF WROTE RECORDS TO ACCDEV, THEN BETTER CLOSE*/
         TM    PACC(R2),B'01000000'                                0432
         BNO   @RF00432                                            0432
*   CACCDEV = ON;                                           /*@Z427VLS*
         OI    CACCDEV(R2),B'00001000'                             0433
* IF CACCDEV = ON × CDRCTWRK = ON THEN                             0434
@RF00432 TM    CACCDEV(R2),B'00001010'                             0434
         BZ    @RF00434                                            0434
*   CALL IOHND(IOCLOSE);                                    /*@Z427VLS*
         L     @15,ADIOHND(,R2)                                    0435
         LA    @01,@AL00435                                        0435
         BALR  @14,@15                                             0435
* IF PASSNUM = ZERO THEN     /*IF NO RECORDS, EREP1 SHOULD QUIT*/  0436
@RF00434 L     @14,PASSNUM                                         0436
         LTR   @14,@14                                             0436
         BNZ   @RF00436                                            0436
*   ERROR = TERMINAT;                                       /*@0001VLS*
         MVC   ERROR(4),@CF00032                                   0437
* IF ERROR = SUCCESS & PRINTES ^= NEITHER THEN                     0438
@RF00436 L     @14,ERROR                                           0438
         LTR   @14,@14                                             0438
         BNZ   @RF00438                                            0438
         TM    PRINTES(R2),B'00011000'                             0438
         BZ    @RF00438                                            0438
*  DO;                                                      /*@Z427VLS*
*   CALL SIFTSORT;                                          /*@Z427VLS*
         BAL   @14,SIFTSORT                                        0440
*   CALL FREETAB; /*FREE CORE FOR PARAMETER TABLES NO LONGER USED*/
         BAL   @14,FREETAB                                         0441
*  END;                                                     /*@Z427VLS*
*    IF TOOMANY ^= ZERO THEN                                       0443
@RF00438 L     @14,TOOMANY                                         0443
         LTR   @14,@14                                             0443
         BZ    @RF00443                                            0443
*      DO;                                                  /*@D3506GB*
*        CALL IFCMSG(111,ADDR(PRINTBDY));   /* IFC201         @D3506GB*
         LA    @14,PRINTBDY                                        0445
         ST    @14,@AFTEMPS                                        0445
         L     @15,ADIFCMSG(,R2)                                   0445
         LA    @01,@AL00445                                        0445
         BALR  @14,@15                                             0445
*        BINWORD = TOOMANY;                 /*NUMBER DROPPED  @D3506GB*
         L     @14,TOOMANY                                         0446
         ST    @14,BINWORD                                         0446
*        DECADDR = ADDR(PRINTBDY)+ 8;                       /*@D3506GB*
         LA    @14,PRINTBDY                                        0447
         AL    @14,@CF00066                                        0447
         ST    @14,DECADDR                                         0447
*        CALL CONVBIN;                                      /*@D3506GB*
         BAL   @14,CONVBIN                                         0448
*        CALL PRINTIT;                                      /*@D3506GB*
         BAL   @14,PRINTIT                                         0449
*      END;                                                 /*@D3506GB*
*    IF DEBUG43 = ON & USERPGM ^= BLANKS THEN               /*@D35UGGB*
@RF00443 TM    DEBUG43(R2),B'00010000'                             0451
         BNO   @RF00451                                            0451
         CLC   USERPGM(8,R2),@CC00995                              0451
         BE    @RF00451                                            0451
*      DO;                                                  /*@D35UGGB*
*        R0 = 11;   /*SORT TABLE SIZE*/                     /*@D35UGGB*
         LA    R0,11                                               0453
*        R15 = USERLOC;    /*ADDRESS OF WHERE PROGRAM IS*/  /*@D35UGGB*
         L     R15,USERLOC                                         0454
*        R1 = SORTADR;                                      /*@D35UGGB*
         L     R1,SORTADR(,R2)                                     0455
*        GEN(BALR R14,R15);                                 /*@D35UGGB*
         BALR R14,R15
*      END;                                                 /*@D35UGGB*
*     IF USERLOC ^= ZERO THEN                               /*@D35UGGB*
@RF00451 L     @14,USERLOC                                         0458
         LTR   @14,@14                                             0458
         BZ    @RF00458                                            0458
*        GEN(DELETE  EPLOC=BLDNAME);                        /*@D35UGGB*
         DELETE  EPLOC=BLDNAME
* RESPECIFY    (R15) UNRESTRICTED;                          /*@Z427VLS*
* END;                                                      /*@Z427VLS*
@EL00004 DS    0H                                                  0461
@EF00004 DS    0H                                                  0461
@ER00004 LM    @14,@12,@SA00004                                    0461
         BR    @14                                                 0461
* FILTER: PROC; /*FILTER RECORDS AND SAVE SORT INFORMATION    @Z427VLS*
FILTER   STM   @14,@12,@SA00005                                    0462
* RESPECIFY (R15) RESTRICTED;                               /*@G51DGGB*
* CALL ALLREC;  /*RECORD HEADER CHECKS                        @Z427VLS*
         BAL   @14,ALLREC                                          0464
* IF PASSFLAG = ON THEN                                            0465
         TM    PASSFLAG(R2),B'00000001'                            0465
         BNO   @RF00465                                            0465
*   DO;                                                     /*@Z427VLS*
*     CALL RECDEP; /* RECORD BODY CHECKS- SOME DEVICE DEPENDENT*/  0467
         BAL   @14,RECDEP                                          0467
*     IF PASSFLAG = ON THEN                                        0468
         TM    PASSFLAG(R2),B'00000001'                            0468
         BNO   @RF00468                                            0468
*       DO;                                                 /*@Z427VLS*
*         /*IF FURTHER CHECKS LIKE SYMCDE, WHICH ASSUME ALL OTHER*/
*         /*SELECTIONS HAVE ALREADY BEEN DONE, LOAD SPECIAL PROGRAM*/
*         IF USERPGM ^= BLANKS THEN                                0470
         CLC   USERPGM(8,R2),@CC00995                              0470
         BE    @RF00470                                            0470
*           DO;                                             /*@Z427VLS*
*     R0 = 0;       /*NOT EOF*/                             /*@D35UGGB*
         SLR   R0,R0                                               0472
*     R1 = ADDR(WORKTABL);                                  /*@D35UGGB*
         LA    R1,WORKTABL                                         0473
*             GEN(L R15,USERLOC);                           /*@Z427VLS*
         L R15,USERLOC
*             GEN(BALR  R14,R15);                           /*@Z427VLS*
         BALR  R14,R15
*           END;                                            /*@Z427VLS*
*       END;                                                /*@Z427VLS*
*   END;                                                    /*@Z427VLS*
* RESPECIFY (R15) RESTRICTED;                               /*@G51DGGB*
* END;                                                      /*@Z427VLS*
@EL00005 DS    0H                                                  0480
@EF00005 DS    0H                                                  0480
@ER00005 LM    @14,@12,@SA00005                                    0480
         BR    @14                                                 0480
* ALLREC: PROC;  /*RECORD DEPENDENT SELECTION CRITTERIA       @Z427VLS*
ALLREC   STM   @14,@12,12(@13)                                     0481
*                /*COMPARE RECORD ITEMS PRECEEDED BY          @Z427VLS*
*                /* LRT TO PARAMETER TABLE SELECTION          @Z427VLS*
*                /*VALUES AND RANGES                          @Z427VLS*
* PASSFLAG = YES; /*RECORD SELECTED IF PASSFLAG NOT SET TO NO @Z427VLS*
         OI    PASSFLAG(R2),B'00000001'                            0482
* /*RECORD IS PASSED IF IT IS IN DATE RANGE. TIME RANGE MAY BE COM*/
* /*POSED OF TWO RANGES IF A MIDNIGHT IS CROSSED. IF TIME IS  @Z427VLS*
* /*SPECIFIED, THEN DATE MUST BE SPECIFIED ALSO TO ELIMINATE  @Z427VLS*
* /*PROBLEMS ELIMINATING INTERVALS IF THIRD SHIFT IS CROSSED  @Z427VLS*
* IF LRTDATE >= STDATE & LRTDATE <= ENDDATE THEN                   0483
         CLC   LRTDATE(4,R7),STDATE(R2)                            0483
         BL    @RF00483                                            0483
         CLC   LRTDATE(4,R7),ENDDATE(R2)                           0483
         BH    @RF00483                                            0483
*   DO;                                                     /*@Z427VLS*
*     IF (LRTTIME >= STTIME1 & LRTTIME <= ENDTIME1) ×              0485
*        (LRTTIME >= STTIME2 & LRTTIME <= ENDTIME2) THEN           0485
         CLC   LRTTIME(4,R7),STTIME1(R2)                           0485
         BL    @GL00019                                            0485
         CLC   LRTTIME(4,R7),ENDTIME1(R2)                          0485
         BNH   @RT00485                                            0485
@GL00019 CLC   LRTTIME(4,R7),STTIME2(R2)                           0485
         BL    @RF00485                                            0485
         CLC   LRTTIME(4,R7),ENDTIME2(R2)                          0485
         BH    @RF00485                                            0485
@RT00485 DS    0H                                                  0486
*       DO;                                                 /*@Z427VLS*
*         IF CPUPTR ^= ZERO THEN /*IF TABLE OF ALLOWABLE CPU SERIAL*/
         L     @14,CPUPTR(,R2)                                     0487
         LTR   @14,@14                                             0487
         BZ    @RF00487                                            0487
*                                /*NUMBERS EXISTS THEN        @Z427VLS*
*           DO;                                             /*@Z427VLS*
*             CPUOK = NO;                                   /*@Z427VLS*
         NI    CPUOK,B'11011111'                                   0489
*             DO J = 1 BY 1 TO CPUNUM WHILE CPUOK = NO;     /*@Z427VLS*
         LA    @14,1                                               0490
         ST    @14,J                                               0490
         B     @DE00490                                            0490
@DL00490 TM    CPUOK,B'00100000'                                   0490
         BNZ   @DC00490                                            0490
*               IF CPUVAL(J) = LRTCPMOD THEN CPUOK = YES;   /*@Z427VLS*
         MH    @14,@CH00079                                        0491
         L     @08,CPUPTR(,R2)                                     0491
         ALR   @08,@14                                             0491
         AL    @08,@CF01572                                        0491
         CLC   CPUVAL-2(5,@08),LRTCPMOD(R7)                        0491
         BNE   @RF00491                                            0491
         OI    CPUOK,B'00100000'                                   0492
*             END;                                          /*@Z427VLS*
@RF00491 LA    @14,1                                               0493
         AL    @14,J                                               0493
         ST    @14,J                                               0493
@DE00490 L     @08,CPUPTR(,R2)                                     0493
         CH    @14,CPUNUM(,@08)                                    0493
         BNH   @DL00490                                            0493
@DC00490 DS    0H                                                  0494
*             IF CPUOK = NO THEN                                   0494
         TM    CPUOK,B'00100000'                                   0494
         BNZ   @RF00494                                            0494
*               DO;                                         /*@Z427VLS*
*                 PASSFLAG = NO;                            /*@Z427VLS*
         NI    PASSFLAG(R2),B'11111110'                            0496
*                 BUG(4) = BUG(4) + 1;                      /*@Z427VLS*
         LA    @14,1                                               0497
         AL    @14,BUG+12                                          0497
         ST    @14,BUG+12                                          0497
*               END;                                        /*@Z427VLS*
*           END;                                            /*@Z427VLS*
@RF00494 DS    0H                                                  0500
*         IF PASSFLAG = YES & MODPTR ^= ZERO THEN                  0500
@RF00487 TM    PASSFLAG(R2),B'00000001'                            0500
         BNO   @RF00500                                            0500
         L     @14,MODPTR(,R2)                                     0500
         LTR   @14,@14                                             0500
         BZ    @RF00500                                            0500
*           DO;     /*DO IF MODEL ID. SELECTED                @Z427VLS*
*             MODOK = NO;                                   /*@Z427VLS*
         NI    MODOK,B'11101111'                                   0502
*             DO J = 1 BY 1 TO MODNUM WHILE MODOK = NO;     /*@Z427VLS*
         LA    @14,1                                               0503
         ST    @14,J                                               0503
         B     @DE00503                                            0503
@DL00503 TM    MODOK,B'00010000'                                   0503
         BNZ   @DC00503                                            0503
*               IF LRTMODEL = MODVAL(J) THEN MODOK = YES;   /*@Z427VLS*
         ALR   @14,@14                                             0504
         L     @08,MODPTR(,R2)                                     0504
         ALR   @08,@14                                             0504
         CLC   LRTMODEL(2,R7),MODVAL-2(@08)                        0504
         BNE   @RF00504                                            0504
         OI    MODOK,B'00010000'                                   0505
*             END;                                          /*@Z427VLS*
@RF00504 LA    @14,1                                               0506
         AL    @14,J                                               0506
         ST    @14,J                                               0506
@DE00503 L     @08,MODPTR(,R2)                                     0506
         CH    @14,MODNUM(,@08)                                    0506
         BNH   @DL00503                                            0506
@DC00503 DS    0H                                                  0507
*             IF MODOK = NO THEN                                   0507
         TM    MODOK,B'00010000'                                   0507
         BNZ   @RF00507                                            0507
*               DO;                                         /*@Z427VLS*
*                 PASSFLAG = NO;                            /*@Z427VLS*
         NI    PASSFLAG(R2),B'11111110'                            0509
*                 BUG(5) = BUG(5) + 1;                      /*@Z427VLS*
         LA    @14,1                                               0510
         AL    @14,BUG+16                                          0510
         ST    @14,BUG+16                                          0510
*               END;                                        /*@Z427VLS*
*           END;                                            /*@Z427VLS*
@RF00507 DS    0H                                                  0513
*           /*ELIMINATE NON THIRD SHIFT INTERVALS IF MIDNIGHT @Z427VLS*
*           /*BOUNDARY HAS BEEN CROSSED IN TIME INTERVAL      @Z427VLS*
*         IF SHIFT3RD = ON & PASSFLAG = YES &                      0513
*           ((LRTDATE = STDATE & LRTTIME < STTIME1) ×              0513
*            (LRTDATE = ENDDATE & LRTTIME > ENDTIME2))             0513
*            THEN                                                  0513
@RF00500 TM    SHIFT3RD(R2),B'00010000'                            0513
         BNO   @RF00513                                            0513
         TM    PASSFLAG(R2),B'00000001'                            0513
         BNO   @RF00513                                            0513
         CLC   LRTDATE(4,R7),STDATE(R2)                            0513
         BNE   @GL00025                                            0513
         CLC   LRTTIME(4,R7),STTIME1(R2)                           0513
         BL    @RT00513                                            0513
@GL00025 CLC   LRTDATE(4,R7),ENDDATE(R2)                           0513
         BNE   @RF00513                                            0513
         CLC   LRTTIME(4,R7),ENDTIME2(R2)                          0513
         BNH   @RF00513                                            0513
@RT00513 DS    0H                                                  0514
*              DO;                                          /*@Z427VLS*
*                PASSFLAG = NO;                             /*@Z427VLS*
         NI    PASSFLAG(R2),B'11111110'                            0515
*                BUG(6) = BUG(6) + 1;                       /*@Z427VLS*
         LA    @14,1                                               0516
         AL    @14,BUG+20                                          0516
         ST    @14,BUG+20                                          0516
*              END;                                         /*@Z427VLS*
*       END;                                                /*@Z427VLS*
*     ELSE                                                         0519
*       DO;                                                 /*@Z427VLS*
         B     @RC00485                                            0519
@RF00485 DS    0H                                                  0520
*         PASSFLAG = NO;                                    /*@Z427VLS*
         NI    PASSFLAG(R2),B'11111110'                            0520
*         BUG(3) = BUG(3) + 1;                              /*@Z427VLS*
         LA    @14,1                                               0521
         AL    @14,BUG+8                                           0521
         ST    @14,BUG+8                                           0521
*       END;                                                /*@Z427VLS*
*    END;                                                   /*@Z427VLS*
*   ELSE                                                           0524
*     DO;                                                   /*@Z427VLS*
         B     @RC00483                                            0524
@RF00483 DS    0H                                                  0525
*       PASSFLAG = NO;                                      /*@Z427VLS*
         NI    PASSFLAG(R2),B'11111110'                            0525
*       BUG(2) = BUG(2) + 1;                                /*@Z427VLS*
         LA    @14,1                                               0526
         AL    @14,BUG+4                                           0526
         ST    @14,BUG+4                                           0526
*     END;                                                  /*@Z427VLS*
* END;                                                      /*@Z427VLS*
@EL00006 DS    0H                                                  0528
@EF00006 DS    0H                                                  0528
@ER00006 LM    @14,@12,12(@13)                                     0528
         BR    @14                                                 0528
* RECDEP: PROC; /*IDENTIFY RECORD TYPE, SET SORT TABLE KEY    @Z427VLS*
RECDEP   STM   @14,@12,@SA00007                                    0529
*               /*PERFORM FILTERING                           @Z427VLS*
*                              RECCPU=LRTCPUS;/*SAVE CPU NUMBER    0530
         MVC   RECCPU(3),LRTCPUS(R7)                               0530
* WORKTABL = (WORKTABL && WORKTABL); /*CLEAR SORTABLE WORK AREA*/  0531
         XC    WORKTABL(11),WORKTABL                               0531
* WORKMOD = LRTMODEL; /*NO LONGER MASK OFF LEFTMOST HALF BYTE @Z427VLS*
         MVC   WORKMOD(2),LRTMODEL(R7)                             0532
* WORKTYPE = (LRTKEY1 & GENREC); /*JUST LOOK AT GENERAL RECORD TYPE*/
         MVC   WORKTYPE(1),LRTKEY1(R7)                             0533
         NI    WORKTYPE,X'F0'                                      0533
* IF LRTRUNC = ON × (WORKTYPE < HEX10) /*IF INCOMPLETE OR UNKNOWN REC*/
*                 × (WORKTYPE > HEX90) THEN                        0534
         TM    LRTRUNC(R7),B'00100000'                             0534
         BO    @RT00534                                            0534
         CLI   WORKTYPE,X'10'                                      0534
         BL    @RT00534                                            0534
         CLI   WORKTYPE,X'90'                                      0534
         BNH   @RF00534                                            0534
@RT00534 DS    0H                                                  0535
*    WORKTYPE = UNKNOWN;                                    /*@Z427VLS*
         MVI   WORKTYPE,X'FF'                                      0535
* ELSE                                                             0536
*   DO;                                                     /*@Z427VLS*
         B     @RC00534                                            0536
@RF00534 DS    0H                                                  0537
*     IF WORKTYPE = HEX30 THEN                                     0537
         CLI   WORKTYPE,X'30'                                      0537
         BNE   @RF00537                                            0537
*       CALL OBRFILT;                                       /*@Z427VLS*
         BAL   @14,OBRFILT                                         0538
*     ELSE                                                         0539
*       DO;                                                 /*@Z427VLS*
         B     @RC00537                                            0539
@RF00537 DS    0H                                                  0540
*         IF WORKTYPE = HEX90 THEN                                 0540
         CLI   WORKTYPE,X'90'                                      0540
         BNE   @RF00540                                            0540
*           CALL MDRFILT;                                   /*@Z427VLS*
         BAL   @14,MDRFILT                                         0541
*         ELSE                                                     0542
*           DO;                                             /*@Z427VLS*
         B     @RC00540                                            0542
@RF00540 DS    0H                                                  0543
*             IF WORKTYPE = HEX10 THEN                             0543
         CLI   WORKTYPE,X'10'                                      0543
         BNE   @RF00543                                            0543
*               CALL MCHFILT;                               /*@Z427VLS*
         BAL   @14,MCHFILT                                         0544
*             ELSE                                                 0545
*              DO;                                          /*@Z427VLS*
         B     @RC00543                                            0545
@RF00543 DS    0H                                                  0546
*                IF WORKTYPE = HEX20 THEN                          0546
         CLI   WORKTYPE,X'20'                                      0546
         BNE   @RF00546                                            0546
*                  CALL CCHFILT;                            /*@Z427VLS*
         BAL   @14,CCHFILT                                         0547
*                ELSE                                              0548
*                 DO;                                       /*@Z427VLS*
         B     @RC00546                                            0548
@RF00546 DS    0H                                                  0549
*                    IF WORKTYPE = HEX40 THEN                      0549
         CLI   WORKTYPE,X'40'                                      0549
         BNE   @RF00549                                            0549
*                      CALL SOFTFILT;                       /*@Z427VLS*
         BAL   @14,SOFTFILT                                        0550
*                    ELSE                                          0551
*                      DO;                                  /*@Z427VLS*
         B     @RC00549                                            0551
@RF00549 DS    0H                                                  0552
*                        IF WORKTYPE = HEX50 THEN                  0552
         CLI   WORKTYPE,X'50'                                      0552
         BNE   @RF00552                                            0552
*                          CALL IPLFILT;                    /*@Z427VLS*
         BAL   @14,IPLFILT                                         0553
*                        ELSE                                      0554
*                          DO;                              /*@Z427VLS*
         B     @RC00552                                            0554
@RF00552 DS    0H                                                  0555
*                            IF WORKTYPE = HEX60 THEN              0555
         CLI   WORKTYPE,X'60'                                      0555
         BNE   @RF00555                                            0555
*                              CALL DDRFILT;                /*@Z427VLS*
         BAL   @14,DDRFILT                                         0556
*                            ELSE                                  0557
*                              DO;                          /*@Z427VLS*
         B     @RC00555                                            0557
@RF00555 DS    0H                                                  0558
*                                IF WORKTYPE = HEX70 THEN          0558
         CLI   WORKTYPE,X'70'                                      0558
         BNE   @RF00558                                            0558
*                                  CALL MIHFILT;            /*@Z427VLS*
         BAL   @14,MIHFILT                                         0559
*                                ELSE                              0560
*                                  CALL EODFILT;            /*@Z427VLS*
         B     @RC00558                                            0560
@RF00558 BAL   @14,EODFILT                                         0560
*                              END;                         /*@Z427VLS*
*                          END;                             /*@Z427VLS*
*                      END;                                 /*@Z427VLS*
*                  END;                                     /*@Z427VLS*
*              END;                                         /*@Z427VLS*
*          END;                                             /*@Z427VLS*
*      END;                                                 /*@Z427VLS*
*    END;                                                   /*@Z427VLS*
* END;                                                      /*@Z427VLS*
@EL00007 DS    0H                                                  0569
@EF00007 DS    0H                                                  0569
@ER00007 LM    @14,@12,@SA00007                                    0569
         BR    @14                                                 0569
* SIFTSORT: PROC;                                           /*@Z427VLS*
SIFTSORT STM   @14,@12,@SA00008                                    0570
* /* SORT THAT ONLY EXAMINES AN ENTRY ONCE IF DATA IS IN ORDER*/   0571
* IF SORTNUM > 1 & DEBUG23 = OFF THEN /*IF AT LEAST TWO ENTRIES AND*/
         L     @14,SORTNUM(,R2)                                    0571
         C     @14,@CF00055                                        0571
         BNH   @RF00571                                            0571
         TM    DEBUG23(R2),B'00000001'                             0571
         BNZ   @RF00571                                            0571
*   DO;  /*DEBUG INPUT DATA ORDER OPTION IS ON THEN           @Z427VLS*
*  SRTCONT = ((PASSNUM -1 )*11) + SORTADR;                  /*@D35UGGB*
         L     @14,PASSNUM                                         0573
         BCTR  @14,0                                               0573
         MH    @14,@CH00033                                        0573
         AL    @14,SORTADR(,R2)                                    0573
         ST    @14,SRTCONT                                         0573
* /* THIS SORT IS DONE IN BAL IN ORDER TO GET MIN PROCESSING TIME    */
* /* SOME 35 INSTRUCTIONS WERE CUT FROM THE BEST THAT PLS WOULD DO   */
* /* THIS CUT THE RUN TIME DOWN BY APP. 50 PER CENT.          @Z427VLS*
*       GENERATE REFS(SORTKEY1,SORTNEW);                           0574
           LA    R15,11        INCREMENT VALUE                 @D3506GB
          L      R3,SORTADR(R2)      LOAD THE START OF THE TABLE
          L      R4,SRTCONT          LOAD THE MAX LIMIT
          LR     R1,R3               SET UP THE STOP LIMIT ON BACK UP
          B      DOIT                GO AROUND THIS CODE FIRST TIME
LOOPBCK1  ALR    R3,R15              MOVE THE POINTER TO NEXT ENTRY
          CR     R3,R4               ARE WE POINTING TO LAST ENTRY
          BNL    DONE                FINISHED WITH THE SORT SO EXIT
DOIT       CLC   SORTNEW(6,R3),SORTNEW+11(R3)                  @D3506GB
          BNH    LOOPBCK1            DONT NEED TO SORT ITEM
           XC    SORTNEW(11,R3),SORTNEW+11(R3)                 @D3506GB
           XC    SORTNEW+11(11,R3),SORTNEW(R3)                 @D3506GB
           XC    SORTNEW(11,R3),SORTNEW+11(R3)                 @D3506GB
          LR     R6,R3               SET NEW POINTER(BACKWARD)
LOOPBCK2  SR     R6,R15              POINT TO LAST ENTRY
          CR     R6,R1               DONT BACK OUT OF THE TABLE
          BL     LOOPBCK1            START WITH NEXT ENTRY
           CLC   SORTNEW(6,R6),SORTNEW+11(R6)                  @D3506GB
          BNH    LOOPBCK1            NO FUTHER SHUFFEL THIS SAMPLE
           XC    SORTNEW+11(11,R6),SORTNEW(R6)                 @D3506GB
           XC    SORTNEW(11,R6),SORTNEW+11(R6)                 @D3506GB
           XC    SORTNEW+11(11,R6),SORTNEW(R6)                 @D3506GB
          B      LOOPBCK2            DOES IT NEED TO BE MOVED AGAIN
DONE      EQU    *                   COME HERE WHEN DONE
* END;                                                      /*@Z427VLS*
*   RESPECIFY (R3,R6,R1,R15) UNRESTRICTED;                  /*@Z427VLS*
* END;                                                      /*@Z427VLS*
@EL00008 DS    0H                                                  0577
@EF00008 DS    0H                                                  0577
@ER00008 LM    @14,@12,@SA00008                                    0577
         BR    @14                                                 0577
* FREETAB: PROC; /*FREE CORE FOR PARM SELECTION CRITERIA TABLES*/  0578
FREETAB  STM   @14,@12,@SA00009                                    0578
* IF CUAPTR ^= ZERO × LIBADPTR ^= ZERO × SYMCDPTR ^= ZERO ×        0579
*    DEVPTR ^= ZERO × MODPTR ^= ZERO × SERPTR ^= ZERO ×            0579
*    VOLPTR ^= ZERO × CPUPTR ^= ZERO × CPCUAPTR ^= ZERO THEN       0579
         SLR   @08,@08                                             0579
         C     @08,CUAPTR(,R2)                                     0579
         BNE   @RT00579                                            0579
         C     @08,LIBADPTR(,R2)                                   0579
         BNE   @RT00579                                            0579
         C     @08,SYMCDPTR(,R2)                                   0579
         BNE   @RT00579                                            0579
         C     @08,DEVPTR(,R2)                                     0579
         BNE   @RT00579                                            0579
         C     @08,MODPTR(,R2)                                     0579
         BNE   @RT00579                                            0579
         C     @08,SERPTR(,R2)                                     0579
         BNE   @RT00579                                            0579
         C     @08,VOLPTR(,R2)                                     0579
         BNE   @RT00579                                            0579
         C     @08,CPUPTR(,R2)                                     0579
         BNE   @RT00579                                            0579
         C     @08,CPCUAPTR(,R2)                                   0579
         BE    @RF00579                                            0579
@RT00579 DS    0H                                                  0580
*     GEN(FREEMAIN R,SP=20);                                /*@Z427VLS*
         FREEMAIN R,SP=20
* IF FRAMEPTR ^= ZERO &        /*DID WE GET THE CORE AT THE START*/
*    FRAMENUM  = ZERO  THEN    /*DID WE FIND ANY MCH × CCH MERDIAN*/
@RF00579 SLR   @08,@08                                             0581
         L     @06,FRAMEPTR(,R2)                                   0581
         CR    @06,@08                                             0581
         BE    @RF00581                                            0581
         C     @08,FRAMENUM(,@06)                                  0581
         BNE   @RF00581                                            0581
*     DO;                                                   /*@G51DGGB*
*     GEN(FREEMAIN R,SP=21);   /*FREE AREA FOR THE FRAME INFORMATION*/
         FREEMAIN R,SP=21
*     FRAMEPTR = ZERO;         /*MAKE SURE EVERY ONE KNOWS ABOUT IT*/
         SLR   @08,@08                                             0584
         ST    @08,FRAMEPTR(,R2)                                   0584
*     END;                                                  /*@G51DGGB*
* END;                                                      /*@Z427VLS*
@EL00009 DS    0H                                                  0586
@EF00009 DS    0H                                                  0586
@ER00009 LM    @14,@12,@SA00009                                    0586
         BR    @14                                                 0586
* OBRFILT: PROC;                                            /*@Z427VLS*
OBRFILT  STM   @14,@12,@SA00010                                    0587
* IF POBR = OFF THEN                                               0588
         TM    POBR(R2),B'00100000'                                0588
         BNZ   @RF00588                                            0588
*   DO;                                                     /*@Z427VLS*
*     PASSFLAG = OFF;                                       /*@Z427VLS*
         NI    PASSFLAG(R2),B'11111110'                            0590
*     BUG(7) = BUG(7) +1;                                   /*@Z427VLS*
         LA    @08,1                                               0591
         AL    @08,BUG+24                                          0591
         ST    @08,BUG+24                                          0591
*   END;                                                    /*@Z427VLS*
* ELSE                                                             0593
*   DO;                                                     /*@Z427VLS*
         B     @RC00588                                            0593
@RF00588 DS    0H                                                  0594
*     IF SHORTSW = ON THEN                                         0594
         TM    SHORTSW(R7),B'00100000'                             0594
         BNO   @RF00594                                            0594
*       DO;                                                 /*@Z427VLS*
*         WORKCUA = (OBRSCUA & ONLYCUA3);                   /*@Z427VLS*
         MVC   WORKCUA(3),OBRSCUA(R7)                              0596
         NC    WORKCUA(3),@CB01042                                 0596
*         WORKDEV = OBRSDEV2;                               /*@Z427VLS*
         MVC   WORKDEV(2),OBRSDEV2(R7)                             0597
*       END;                                                /*@Z427VLS*
*     ELSE                                                         0599
*       DO;                                                 /*@Z427VLS*
         B     @RC00594                                            0599
@RF00594 DS    0H                                                  0600
*         WORKCUA = (OBRPCUA & ONLYCUA3);                   /*@Z427VLS*
         MVC   WORKCUA(3),OBRPCUA(R7)                              0600
         NC    WORKCUA(3),@CB01042                                 0600
*         WORKDEV = OBRDEV;                                 /*@Z427VLS*
         MVC   WORKDEV(2),OBRDEV(R7)                               0601
*         IF WORKDEV = DEV23051 ×                                  0602
*            WORKDEV = DEV23052 THEN                               0602
         CLC   WORKDEV(2),@CB00998                                 0602
         BE    @RT00602                                            0602
         CLC   WORKDEV(2),@CB01000                                 0602
         BNE   @RF00602                                            0602
@RT00602 DS    0H                                                  0603
*            WORKCUA = (WORKCUA & NOUNIT3);                 /*@Z427VLS*
         NC    WORKCUA(3),@CB01034                                 0603
*       END;                                                /*@Z427VLS*
@RF00602 DS    0H                                                  0605
*     IF CUAPTR ^= ZERO THEN                                       0605
@RC00594 L     @08,CUAPTR(,R2)                                     0605
         LTR   @08,@08                                             0605
         BZ    @RF00605                                            0605
*       CALL CUASELCT;                                      /*@Z427VLS*
         BAL   @14,CUASELCT                                        0606
*     IF PASSFLAG = YES THEN                                       0607
@RF00605 TM    PASSFLAG(R2),B'00000001'                            0607
         BNO   @RF00607                                            0607
*       DO;                                                 /*@Z427VLS*
*          IF DEVPTR ^= ZERO THEN /*IF DEVICE SELECTION LIST EXISTS*/
         L     @08,DEVPTR(,R2)                                     0609
         LTR   @08,@08                                             0609
         BZ    @RF00609                                            0609
*            CALL DEVSEL; /*CHECK LIST OF ALLOWABLE DEVICES   @Z427VLS*
         BAL   @14,DEVSEL                                          0610
*          IF PASSFLAG = YES THEN                                  0611
@RF00609 TM    PASSFLAG(R2),B'00000001'                            0611
         BNO   @RF00611                                            0611
*            DO;                                            /*@Z427VLS*
*              IF CPCUAPTR ^= ZERO THEN /*IF CPU,CUA SELECTION LIST EX*
         L     @08,CPCUAPTR(,R2)                                   0613
         LTR   @08,@08                                             0613
         BZ    @RF00613                                            0613
*                CALL CPCUASEL; /*CHECK LIST OF VALID CPU,CUAS*/   0614
         BAL   @14,CPCUASEL                                        0614
*              IF PASSFLAG = YES THEN                              0615
@RF00613 TM    PASSFLAG(R2),B'00000001'                            0615
         BNO   @RF00615                                            0615
*                DO;                                        /*@Z427VLS*
*                   IF VOLPTR ^= ZERO THEN                         0617
         L     @08,VOLPTR(,R2)                                     0617
         LTR   @08,@08                                             0617
         BZ    @RF00617                                            0617
*                     CALL VOLID;                           /*@Z427VLS*
         BAL   @14,VOLID                                           0618
*                   IF PASSFLAG = YES THEN                         0619
@RF00617 TM    PASSFLAG(R2),B'00000001'                            0619
         BNO   @RF00619                                            0619
*                     DO;                                   /*@Z427VLS*
*                       CALL TERMID;                        /*@Z427VLS*
         BAL   @14,TERMID                                          0621
*                       IF PASSFLAG = YES THEN                     0622
         TM    PASSFLAG(R2),B'00000001'                            0622
         BNO   @RF00622                                            0622
*                         DO;                               /*@Z427VLS*
*                           RECCPU=LRTCPUS;/*SAVE CPU NUMBER  @D3506GB*
         MVC   RECCPU(3),LRTCPUS(R7)                               0624
*                           IF SHAREPTR ^= ZERO THEN               0625
         L     @08,SHAREPTR(,R2)                                   0625
         LTR   @08,@08                                             0625
         BZ    @RF00625                                            0625
*                              CALL SHARCONV; /*CONVERT TO BASE CUA*/
         BAL   @14,SHARCONV                                        0626
*                           IF WORKDEV = DEV23051 ×                0627
*                              WORKDEV = DEV3330  ×                0627
*                              WORKDEV = DEV3340  ×                0627
*                              WORKDEV = DEV33301 ×                0627
*                              WORKDEV = DEV3350  ×                0627
*         OBRCLASS  = '21'X ×                                      0627
*                              WORKDEV = DEV23052 THEN             0627
@RF00625 CLC   WORKDEV(2),@CB00998                                 0627
         BE    @RT00627                                            0627
         CLC   WORKDEV(2),@CB01002                                 0627
         BE    @RT00627                                            0627
         CLC   WORKDEV(2),@CB01004                                 0627
         BE    @RT00627                                            0627
         CLC   WORKDEV(2),@CB01012                                 0627
         BE    @RT00627                                            0627
         CLC   WORKDEV(2),@CB01006                                 0627
         BE    @RT00627                                            0627
         CLI   OBRCLASS(R7),X'21'                                  0627
         BE    @RT00627                                            0627
         CLC   WORKDEV(2),@CB01000                                 0627
         BNE   @RF00627                                            0627
@RT00627 DS    0H                                                  0628
*                             CALL CNTRCONV;/*CONVERT BY CONTROLL CARD
         BAL   @14,CNTRCONV                                        0628
*                          END;                             /*@Z427VLS*
*                        ELSE /*IF FAILED TERMID SELECTION    @Z427VLS*
*                          BUG(12) = BUG(12) + 1;           /*@Z427VLS*
         B     @RC00622                                            0630
@RF00622 LA    @08,1                                               0630
         AL    @08,BUG+44                                          0630
         ST    @08,BUG+44                                          0630
*                      END;                                 /*@Z427VLS*
*                    ELSE /*IF FAILED VOLID SELECTION         @Z427VLS*
*                      BUG(11) = BUG(11) + 1;               /*@Z427VLS*
         B     @RC00619                                            0632
@RF00619 LA    @08,1                                               0632
         AL    @08,BUG+40                                          0632
         ST    @08,BUG+40                                          0632
*                  END;                                     /*@Z427VLS*
*                ELSE  /*IF FAILED CPU,CUA SELECTION          @Z427VLS*
*                  BUG(10) = BUG(10) + 1;                   /*@Z427VLS*
         B     @RC00615                                            0634
@RF00615 LA    @08,1                                               0634
         AL    @08,BUG+36                                          0634
         ST    @08,BUG+36                                          0634
*              END;                                         /*@Z427VLS*
*            ELSE /*IF FAILED DEVICE SELECTION                @Z427VLS*
*              BUG(9) = BUG(9) + 1;                         /*@Z427VLS*
         B     @RC00611                                            0636
@RF00611 LA    @08,1                                               0636
         AL    @08,BUG+32                                          0636
         ST    @08,BUG+32                                          0636
*          END;                                             /*@Z427VLS*
*        ELSE /*IF FAILED CUA SELECTION                       @Z427VLS*
*          BUG(8) = BUG(8) + 1;                             /*@Z427VLS*
         B     @RC00607                                            0638
@RF00607 LA    @08,1                                               0638
         AL    @08,BUG+28                                          0638
         ST    @08,BUG+28                                          0638
*       END;                                                /*@Z427VLS*
*  END;                                                     /*@Z427VLS*
@EL00010 DS    0H                                                  0640
@EF00010 DS    0H                                                  0640
@ER00010 LM    @14,@12,@SA00010                                    0640
         BR    @14                                                 0640
* MDRFILT: PROC;   /*MISCELLANEOUS DATA RECORD FILTER.        @Z427VLS*
MDRFILT  STM   @14,@12,@SA00011                                    0641
*                  /*PASSFLAG IS TURNED OFF IF RECORD FAILS   @Z427VLS*
* IF PTTYP = OFF THEN  /*ARE MDR RECORDS SELECTED             @Z427VLS*
         TM    PTTYP(R2),B'10000000'                               0642
         BNZ   @RF00642                                            0642
*   DO;                                                     /*@Z427VLS*
*     PASSFLAG = OFF;                                       /*@Z427VLS*
         NI    PASSFLAG(R2),B'11111110'                            0644
*     BUG(13) = BUG(13) + 1;                                /*@Z427VLS*
         LA    @08,1                                               0645
         AL    @08,BUG+48                                          0645
         ST    @08,BUG+48                                          0645
*   END;                                                    /*@Z427VLS*
* ELSE                                                             0647
*   DO;                                                     /*@Z427VLS*
         B     @RC00642                                            0647
@RF00642 DS    0H                                                  0648
*     WORKMOD = (TPRCUA & ONLYCUA2);                        /*@Z427VLS*
         MVC   WORKMOD(2),TPRCUA(R7)                               0648
         NC    WORKMOD(2),@CB01038                                 0648
*     IF TPRDEV = DV23051 × TPRDEV = DV23052 THEN                  0649
         CLI   TPRDEV(R7),X'12'                                    0649
         BE    @RT00649                                            0649
         CLI   TPRDEV(R7),X'02'                                    0649
         BNE   @RF00649                                            0649
@RT00649 DS    0H                                                  0650
*       WORKMOD = (WORKMOD & NOUNIT2); /*HEAVEN ONLY KNOWS WHY*/   0650
         NC    WORKMOD(2),@CB01036                                 0650
*     IF CUAPTR ^= ZERO THEN                                       0651
@RF00649 L     @08,CUAPTR(,R2)                                     0651
         LTR   @08,@08                                             0651
         BZ    @RF00651                                            0651
*       CALL CUASELCT;                                      /*@Z427VLS*
         BAL   @14,CUASELCT                                        0652
*     IF PASSFLAG = YES THEN                                       0653
@RF00651 TM    PASSFLAG(R2),B'00000001'                            0653
         BNO   @RF00653                                            0653
*      DO;                                                  /*@Z427VLS*
*        IF DEVPTR ^= ZERO THEN /*IF LIST OF VALID DEVICES EXISTS THEN*
         L     @08,DEVPTR(,R2)                                     0655
         LTR   @08,@08                                             0655
         BZ    @RF00655                                            0655
*          CALL DEVSEL; /*COMPARE RECORD DEVICE AGAINST VALID LIST*/
         BAL   @14,DEVSEL                                          0656
*        IF PASSFLAG = YES THEN                                    0657
@RF00655 TM    PASSFLAG(R2),B'00000001'                            0657
         BNO   @RF00657                                            0657
*          DO;                                              /*@Z427VLS*
*            IF CPCUAPTR ^= ZERO THEN /*IF LIST OF CPU,CUAS EXISTS*/
         L     @08,CPCUAPTR(,R2)                                   0659
         LTR   @08,@08                                             0659
         BZ    @RF00659                                            0659
*              CALL CPCUASEL; /*CHECK RECORD CPU,CUA AGAINST LIST*/
         BAL   @14,CPCUASEL                                        0660
*            IF PASSFLAG = YES THEN                                0661
@RF00659 TM    PASSFLAG(R2),B'00000001'                            0661
         BNO   @RF00661                                            0661
*              DO;                                          /*@Z427VLS*
*                IF LIBADPTR ^= ZERO & TPRDEV  = DV3705 THEN       0663
         L     @08,LIBADPTR(,R2)                                   0663
         LTR   @08,@08                                             0663
         BZ    @RF00663                                            0663
         CLI   TPRDEV(R7),X'05'                                    0663
         BNE   @RF00663                                            0663
*                  CALL LIBSEL;                             /*@Z427VLS*
         BAL   @14,LIBSEL                                          0664
*                IF PASSFLAG = YES THEN                            0665
@RF00663 TM    PASSFLAG(R2),B'00000001'                            0665
         BNO   @RF00665                                            0665
*                  DO;                                      /*@Z427VLS*
*                    IF VOLPTR ^= ZERO THEN                        0667
         L     @08,VOLPTR(,R2)                                     0667
         LTR   @08,@08                                             0667
         BZ    @RF00667                                            0667
*                      CALL VOLID;                          /*@Z427VLS*
         BAL   @14,VOLID                                           0668
*                    IF PASSFLAG = YES THEN                        0669
@RF00667 TM    PASSFLAG(R2),B'00000001'                            0669
         BNO   @RF00669                                            0669
*                      DO;                                  /*@Z427VLS*
*                        IF SHAREPTR ^= ZERO THEN /*IF SHARED IO*/ 0671
         L     @08,SHAREPTR(,R2)                                   0671
         LTR   @08,@08                                             0671
         BZ    @RF00671                                            0671
*                          CALL SHARCONV;                   /*@Z427VLS*
         BAL   @14,SHARCONV                                        0672
*                        WORKCHAN = TPRDEV;                 /*@Z427VLS*
@RF00671 MVC   WORKCHAN(1),TPRDEV(R7)                              0673
*                        IF TPRDEV = DV23052 ×                     0674
*                           TPRDEV = DV3330  ×                     0674
*                           TPRDEV = DV3340  ×                     0674
*     TPRDEV=DV23051 × (TPRDEV > '15'X & TPRDEV < '20'X) ×         0674
*                           TPRDEV = DV3350  ×                     0674
*                           TPRDEV = DV33302 ×                     0674
*                           TPRDEV = DV23051 THEN                  0674
         CLI   TPRDEV(R7),X'02'                                    0674
         BE    @RT00674                                            0674
         CLI   TPRDEV(R7),X'01'                                    0674
         BE    @RT00674                                            0674
         CLI   TPRDEV(R7),X'09'                                    0674
         BE    @RT00674                                            0674
         CLI   TPRDEV(R7),X'12'                                    0674
         BE    @RT00674                                            0674
         CLI   TPRDEV(R7),X'15'                                    0674
         BNH   @GL00051                                            0674
         CLI   TPRDEV(R7),X'20'                                    0674
         BL    @RT00674                                            0674
@GL00051 CLI   TPRDEV(R7),X'11'                                    0674
         BE    @RT00674                                            0674
         CLI   TPRDEV(R7),X'0A'                                    0674
         BE    @RT00674                                            0674
         CLI   TPRDEV(R7),X'12'                                    0674
         BNE   @RF00674                                            0674
@RT00674 DS    0H                                                  0675
*                           DO;                             /*@Z427VLS*
*                             CALL CNTRCONV;/*CONVERT BY CONTROLL CARD
         BAL   @14,CNTRCONV                                        0676
*                             WORKTYPE = HEX30;             /*@Z427VLS*
         MVI   WORKTYPE,X'30'                                      0677
*                             WORKCHAN = HEX00;             /*@Z427VLS*
         MVI   WORKCHAN,X'00'                                      0678
*                           END;                            /*@Z427VLS*
*                         IF TPRDEV = DV3800 ×                     0680
*                            TPRDEV = DV3895 ×                     0680
*                            TPRDEV = DV3850 ×              /*@D3503VS*
*                            TPRDEV = '40'X THEN            /*@D3503VS*
@RF00674 CLI   TPRDEV(R7),X'0C'                                    0680
         BE    @RT00680                                            0680
         CLI   TPRDEV(R7),X'0D'                                    0680
         BE    @RT00680                                            0680
         CLI   TPRDEV(R7),X'0E'                                    0680
         BE    @RT00680                                            0680
         CLI   TPRDEV(R7),X'40'                                    0680
         BNE   @RF00680                                            0680
@RT00680 DS    0H                                                  0681
*                           DO;                             /*@Z427VLS*
*                             WORKCHAN = HEX00;             /*@Z427VLS*
         MVI   WORKCHAN,X'00'                                      0682
*                             WORKTYPE = HEX30;             /*@Z427VLS*
         MVI   WORKTYPE,X'30'                                      0683
*                           END;                            /*@Z427VLS*
*                      END;                                 /*@Z427VLS*
*                    ELSE /*IF FAILED VOLID SELECTION         @Z427VLS*
*                      BUG(18) = BUG(18) + 1;               /*@Z427VLS*
         B     @RC00669                                            0686
@RF00669 LA    @08,1                                               0686
         AL    @08,BUG+68                                          0686
         ST    @08,BUG+68                                          0686
*                  END;                                     /*@Z427VLS*
*                ELSE /*IF FAILED LIN.INT.BASE ADDR.SELECTION @Z427VLS*
*                  BUG(17) = BUG(17) + 1;                   /*@Z427VLS*
         B     @RC00665                                            0688
@RF00665 LA    @08,1                                               0688
         AL    @08,BUG+64                                          0688
         ST    @08,BUG+64                                          0688
*             END;                                          /*@Z427VLS*
*            ELSE /*IF FAILED CPU,CUA SELECTION               @Z427VLS*
*              BUG(16) = BUG(16) + 1;                       /*@Z427VLS*
         B     @RC00661                                            0690
@RF00661 LA    @08,1                                               0690
         AL    @08,BUG+60                                          0690
         ST    @08,BUG+60                                          0690
*           END;                                            /*@Z427VLS*
*         ELSE /*IF FAILED DEVICE SELECTION                   @Z427VLS*
*          BUG(15) = BUG(15) + 1;                           /*@Z427VLS*
         B     @RC00657                                            0692
@RF00657 LA    @08,1                                               0692
         AL    @08,BUG+56                                          0692
         ST    @08,BUG+56                                          0692
*       END;                                                /*@Z427VLS*
*     ELSE /*IF FAILED CUA SELECTION                          @Z427VLS*
*       BUG(14) = BUG(14) + 1;                              /*@Z427VLS*
         B     @RC00653                                            0694
@RF00653 LA    @08,1                                               0694
         AL    @08,BUG+52                                          0694
         ST    @08,BUG+52                                          0694
*   END;                                                    /*@Z427VLS*
* END;                                                      /*@Z427VLS*
@EL00011 DS    0H                                                  0696
@EF00011 DS    0H                                                  0696
@ER00011 LM    @14,@12,@SA00011                                    0696
         BR    @14                                                 0696
* DDRFILT: PROC;                                            /*@Z427VLS*
DDRFILT  STM   @14,@12,@SA00012                                    0697
* IF PDDR = OFF THEN                                               0698
         TM    PDDR(R2),B'00000100'                                0698
         BNZ   @RF00698                                            0698
*   DO;                                                     /*@Z427VLS*
*     PASSFLAG = OFF;                                       /*@Z427VLS*
         NI    PASSFLAG(R2),B'11111110'                            0700
*     BUG(19) = BUG(19) + 1;                                /*@Z427VLS*
         LA    @08,1                                               0701
         AL    @08,BUG+72                                          0701
         ST    @08,BUG+72                                          0701
*   END;                                                    /*@Z427VLS*
* ELSE                                                             0703
*   DO;                                                     /*@Z427VLS*
         B     @RC00698                                            0703
@RF00698 DS    0H                                                  0704
*     WORKCUA = DDRFCUA;                                    /*@Z427VLS*
         MVC   WORKCUA(3),DDRFCUA(R7)                              0704
*     WORKDEV = DDRCODE2; /*SET DEVICE                        @Z427VLS*
         MVC   WORKDEV(2),DDRCODE2(R7)                             0705
*     IF CUAPTR ^= ZERO THEN                                       0706
         L     @08,CUAPTR(,R2)                                     0706
         LTR   @08,@08                                             0706
         BZ    @RF00706                                            0706
*       CALL CUASELCT;                                      /*@Z427VLS*
         BAL   @14,CUASELCT                                        0707
*     IF PASSFLAG = YES THEN                                       0708
@RF00706 TM    PASSFLAG(R2),B'00000001'                            0708
         BNO   @RF00708                                            0708
*       DO;                                                 /*@Z427VLS*
*         IF CPCUAPTR ^= ZERO THEN                                 0710
         L     @08,CPCUAPTR(,R2)                                   0710
         LTR   @08,@08                                             0710
         BZ    @RF00710                                            0710
*           CALL CPCUASEL;                                  /*@Z427VLS*
         BAL   @14,CPCUASEL                                        0711
*         IF PASSFLAG = YES THEN /*IF PASS CPU,CUA SELECTION  @Z427VLS*
@RF00710 TM    PASSFLAG(R2),B'00000001'                            0712
         BNO   @RF00712                                            0712
*           DO;                                             /*@Z427VLS*
*             IF DEVPTR ^= ZERO THEN /*IF DEVICE SELECION LIST*/   0714
         L     @08,DEVPTR(,R2)                                     0714
         LTR   @08,@08                                             0714
         BZ    @RF00714                                            0714
*                CALL DEVSEL;                               /*@Z427VLS*
         BAL   @14,DEVSEL                                          0715
*             IF PASSFLAG = NO THEN                                0716
@RF00714 TM    PASSFLAG(R2),B'00000001'                            0716
         BNZ   @RF00716                                            0716
*                BUG(22) = BUG(22) + 1;                     /*@Z427VLS*
         LA    @08,1                                               0717
         AL    @08,BUG+84                                          0717
         ST    @08,BUG+84                                          0717
*           END;                                            /*@Z427VLS*
*         ELSE  /*IF RECORD FAILED CPU,CUA SELECTION THEN     @Z427VLS*
*           BUG(21) = BUG(21) + 1;                          /*@Z427VLS*
         B     @RC00712                                            0719
@RF00712 LA    @08,1                                               0719
         AL    @08,BUG+80                                          0719
         ST    @08,BUG+80                                          0719
*       END;                                                /*@Z427VLS*
*     ELSE /*IF FAILED CUA SELECTION                          @Z427VLS*
*       BUG(20) = BUG(20) + 1;                              /*@Z427VLS*
         B     @RC00708                                            0721
@RF00708 LA    @08,1                                               0721
         AL    @08,BUG+76                                          0721
         ST    @08,BUG+76                                          0721
*   END;                                                    /*@Z427VLS*
* END;                                                      /*@Z427VLS*
@EL00012 DS    0H                                                  0723
@EF00012 DS    0H                                                  0723
@ER00012 LM    @14,@12,@SA00012                                    0723
         BR    @14                                                 0723
* MIHFILT: PROC;                                            /*@Z427VLS*
MIHFILT  STM   @14,@12,@SA00013                                    0724
* IF PMIH = OFF THEN                                               0725
         TM    PMIH(R2),B'00000010'                                0725
         BNZ   @RF00725                                            0725
*   DO;                                                     /*@Z427VLS*
*     PASSFLAG = OFF;                                       /*@Z427VLS*
         NI    PASSFLAG(R2),B'11111110'                            0727
*     BUG(23) = BUG(23) + 1;                                /*@Z427VLS*
         LA    @08,1                                               0728
         AL    @08,BUG+88                                          0728
         ST    @08,BUG+88                                          0728
*   END;                                                    /*@Z427VLS*
* ELSE                                                             0730
*   DO;                                                     /*@Z427VLS*
         B     @RC00725                                            0730
@RF00725 DS    0H                                                  0731
*     WORKCUA = MIHCUA;                                     /*@Z427VLS*
         MVC   WORKCUA(3),MIHCUA(R7)                               0731
*     WORKDEV = MIHCODE2;                                   /*@Z427VLS*
         MVC   WORKDEV(2),MIHCODE2(R7)                             0732
*     IF CUAPTR ^= ZERO THEN                                       0733
         L     @08,CUAPTR(,R2)                                     0733
         LTR   @08,@08                                             0733
         BZ    @RF00733                                            0733
*       CALL CUASELCT;                                      /*@Z427VLS*
         BAL   @14,CUASELCT                                        0734
*     IF PASSFLAG = YES THEN                                       0735
@RF00733 TM    PASSFLAG(R2),B'00000001'                            0735
         BNO   @RF00735                                            0735
*       DO;                                                 /*@Z427VLS*
*         IF CPCUAPTR ^= ZERO THEN                                 0737
         L     @08,CPCUAPTR(,R2)                                   0737
         LTR   @08,@08                                             0737
         BZ    @RF00737                                            0737
*           CALL CPCUASEL;                                  /*@Z427VLS*
         BAL   @14,CPCUASEL                                        0738
*         IF PASSFLAG = YES THEN /*IF PASSED CPU,CUA SELECTION*/   0739
@RF00737 TM    PASSFLAG(R2),B'00000001'                            0739
         BNO   @RF00739                                            0739
*           DO;                                             /*@Z427VLS*
*             IF DEVPTR ^= ZERO THEN /*IF DEVICE SELECTION LIST*/  0741
         L     @08,DEVPTR(,R2)                                     0741
         LTR   @08,@08                                             0741
         BZ    @RF00741                                            0741
*               CALL DEVSEL;                                /*@Z427VLS*
         BAL   @14,DEVSEL                                          0742
*             IF PASSFLAG = NO THEN /*IF NOT SELECTED DEVICE THEN*/
@RF00741 TM    PASSFLAG(R2),B'00000001'                            0743
         BNZ   @RF00743                                            0743
*               BUG(26) = BUG(26) + 1;                      /*@Z427VLS*
         LA    @08,1                                               0744
         AL    @08,BUG+100                                         0744
         ST    @08,BUG+100                                         0744
*           END;                                            /*@Z427VLS*
*         ELSE /*IF FAILED CPU,CUA SELECTION                  @Z427VLS*
*           BUG(25) = BUG(25) + 1;                          /*@Z427VLS*
         B     @RC00739                                            0746
@RF00739 LA    @08,1                                               0746
         AL    @08,BUG+96                                          0746
         ST    @08,BUG+96                                          0746
*       END;                                                /*@Z427VLS*
*     ELSE /*IF FAILED CUA SELECTION THEN                     @Z427VLS*
*      BUG(24) = BUG(24) + 1;                               /*@Z427VLS*
         B     @RC00735                                            0748
@RF00735 LA    @08,1                                               0748
         AL    @08,BUG+92                                          0748
         ST    @08,BUG+92                                          0748
*    END;                                                   /*@Z427VLS*
* END;                                                      /*@Z427VLS*
@EL00013 DS    0H                                                  0750
@EF00013 DS    0H                                                  0750
@ER00013 LM    @14,@12,@SA00013                                    0750
         BR    @14                                                 0750
* /*                                                          @Z427VLS*
* /*                                                          @Z427VLS*
* CCHFILT: PROC;                                            /*@Z427VLS*
CCHFILT  STM   @14,@12,@SA00014                                    0751
* IF PCHAN = OFF THEN                                              0752
         TM    PCHAN(R2),B'01000000'                               0752
         BNZ   @RF00752                                            0752
*   DO;                                                     /*@Z427VLS*
*     PASSFLAG = OFF;                                       /*@Z427VLS*
         NI    PASSFLAG(R2),B'11111110'                            0754
*     BUG(27) = BUG(27) + 1;                                /*@Z427VLS*
         LA    @08,1                                               0755
         AL    @08,BUG+104                                         0755
         ST    @08,BUG+104                                         0755
*   END;                                                    /*@Z427VLS*
* ELSE                                                             0757
*   DO;                                                     /*@Z427VLS*
         B     @RC00752                                            0757
@RF00752 DS    0H                                                  0758
*     WORKMOD = (CCHCUA & ONLYCUA2);                        /*@Z427VLS*
         MVC   WORKMOD(2),CCHCUA(R7)                               0758
         NC    WORKMOD(2),@CB01038                                 0758
*     WORKCHAN = (CCHCUA & ONLYCHAN);                       /*@Z427VLS*
         MVC   WORKCHAN(1),CCHCUA(R7)                              0759
         NI    WORKCHAN,X'0F'                                      0759
*     IF CUAPTR ^= ZERO THEN                                       0760
         L     @08,CUAPTR(,R2)                                     0760
         LTR   @08,@08                                             0760
         BZ    @RF00760                                            0760
*       CALL CUASELCT;                                      /*@Z427VLS*
         BAL   @14,CUASELCT                                        0761
*     IF PASSFLAG = YES THEN                                       0762
@RF00760 TM    PASSFLAG(R2),B'00000001'                            0762
         BNO   @RF00762                                            0762
*       DO;                                                 /*@Z427VLS*
*         IF CPCUAPTR ^= ZERO THEN                                 0764
         L     @08,CPCUAPTR(,R2)                                   0764
         LTR   @08,@08                                             0764
         BZ    @RF00764                                            0764
*           CALL CPCUASEL;                                  /*@Z427VLS*
         BAL   @14,CPCUASEL                                        0765
*         IF PASSFLAG = OFF THEN /*IF FAILED CPU,CUA SELECTION*/   0766
@RF00764 TM    PASSFLAG(R2),B'00000001'                            0766
         BNZ   @RF00766                                            0766
*           BUG(29) = BUG(29) + 1;                          /*@Z427VLS*
         LA    @08,1                                               0767
         AL    @08,BUG+112                                         0767
         ST    @08,BUG+112                                         0767
*          ELSE                                                    0768
*           DO;                                             /*@G51DGGB*
         B     @RC00766                                            0768
@RF00766 DS    0H                                                  0769
*            CALL MERIDCK1;       /*IS THIS A MERIDAN CPU     @G51DGGB*
         BAL   @14,MERIDCK1                                        0769
*           END;                                            /*@G51DGGB*
*         WORKMOD = LRTMODEL; /*RESET TO WHAT IT WAS          @Z427VLS*
@RC00766 MVC   WORKMOD(2),LRTMODEL(R7)                             0771
*       END;                                                /*@Z427VLS*
*     ELSE /*IF FAILED CUA SELECTION                          @Z427VLS*
*       BUG(28) = BUG(28) + 1;                              /*@Z427VLS*
         B     @RC00762                                            0773
@RF00762 LA    @08,1                                               0773
         AL    @08,BUG+108                                         0773
         ST    @08,BUG+108                                         0773
*    END;                                                   /*@Z427VLS*
* END;                                                      /*@Z427VLS*
@EL00014 DS    0H                                                  0775
@EF00014 DS    0H                                                  0775
@ER00014 LM    @14,@12,@SA00014                                    0775
         BR    @14                                                 0775
* /*                                                          @Z427VLS*
* IPLFILT: PROC;                                            /*@Z427VLS*
IPLFILT  STM   @14,@12,12(@13)                                     0776
* IF PIPL = OFF THEN                                               0777
         TM    PIPL(R2),B'00001000'                                0777
         BNZ   @RF00777                                            0777
*   DO;                                                     /*@Z427VLS*
*     PASSFLAG = OFF;                                       /*@Z427VLS*
         NI    PASSFLAG(R2),B'11111110'                            0779
*     BUG(30) = BUG(30) + 1;                                /*@Z427VLS*
         LA    @08,1                                               0780
         AL    @08,BUG+116                                         0780
         ST    @08,BUG+116                                         0780
*   END;                                                    /*@Z427VLS*
* END;                                                      /*@Z427VLS*
@EL00015 DS    0H                                                  0782
@EF00015 DS    0H                                                  0782
@ER00015 LM    @14,@12,12(@13)                                     0782
         BR    @14                                                 0782
* EODFILT: PROC;                                            /*@Z427VLS*
EODFILT  STM   @14,@12,12(@13)                                     0783
* IF PEOD = OFF THEN                                               0784
         TM    PEOD(R2),B'00000001'                                0784
         BNZ   @RF00784                                            0784
*   DO;                                                     /*@Z427VLS*
*     PASSFLAG = OFF;                                       /*@Z427VLS*
         NI    PASSFLAG(R2),B'11111110'                            0786
*     BUG(31) = BUG(31) + 1;                                /*@Z427VLS*
         LA    @08,1                                               0787
         AL    @08,BUG+120                                         0787
         ST    @08,BUG+120                                         0787
*   END;                                                    /*@Z427VLS*
* ELSE                                                             0789
*  WORKTYPE = LRTKEY1;                                      /*@Z427VLS*
         B     @RC00784                                            0789
@RF00784 MVC   WORKTYPE(1),LRTKEY1(R7)                             0789
* END;                                                      /*@Z427VLS*
@EL00016 DS    0H                                                  0790
@EF00016 DS    0H                                                  0790
@ER00016 LM    @14,@12,12(@13)                                     0790
         BR    @14                                                 0790
* MCHFILT: PROC;                                            /*@Z427VLS*
MCHFILT  STM   @14,@12,@SA00017                                    0791
* IF PMCH = OFF THEN                                               0792
         TM    PMCH(R2),B'10000000'                                0792
         BNZ   @RF00792                                            0792
*   DO;                                                     /*@Z427VLS*
*     PASSFLAG = OFF;                                       /*@Z427VLS*
         NI    PASSFLAG(R2),B'11111110'                            0794
*     BUG(32) = BUG(32) + 1;                                /*@Z427VLS*
         LA    @08,1                                               0795
         AL    @08,BUG+124                                         0795
         ST    @08,BUG+124                                         0795
*   END;                                                    /*@Z427VLS*
* ELSE                                                             0797
*  DO;                                                      /*@Z427VLS*
         B     @RC00792                                            0797
@RF00792 DS    0H                                                  0798
*   IF ERRORID = ON THEN                                           0798
         TM    ERRORID(R2),B'00000100'                             0798
         BNO   @RF00798                                            0798
*     CALL ERIDFILT;                                        /*@Z427VLS*
         BAL   @14,ERIDFILT                                        0799
*   IF PASSFLAG = OFF THEN /*IF FAILED ERROR ID FILTERING     @Z427VLS*
@RF00798 TM    PASSFLAG(R2),B'00000001'                            0800
         BNZ   @RF00800                                            0800
*     BUG(33) = BUG(33) + 1;                                /*@Z427VLS*
         LA    @08,1                                               0801
         AL    @08,BUG+128                                         0801
         ST    @08,BUG+128                                         0801
*   ELSE                                                           0802
*    DO;                                                    /*@G51DGGB*
         B     @RC00800                                            0802
@RF00800 DS    0H                                                  0803
*     CALL MERIDCK1;            /*CHECK TO SEE IF THIS IS A MERDIAN*/
         BAL   @14,MERIDCK1                                        0803
*    END;                                                   /*@G51DGGB*
*  END;                                                     /*@Z427VLS*
* END;                                                      /*@Z427VLS*
@EL00017 DS    0H                                                  0806
@EF00017 DS    0H                                                  0806
@ER00017 LM    @14,@12,@SA00017                                    0806
         BR    @14                                                 0806
* SOFTFILT: PROC;                                           /*@Z427VLS*
SOFTFILT STM   @14,@12,@SA00018                                    0807
* IF PSOFT = OFF THEN                                              0808
         TM    PSOFT(R2),B'00010000'                               0808
         BNZ   @RF00808                                            0808
*   DO;                                                     /*@Z427VLS*
*     PASSFLAG = OFF;                                       /*@Z427VLS*
         NI    PASSFLAG(R2),B'11111110'                            0810
*     BUG(34) = BUG(34) + 1;                                /*@Z427VLS*
         LA    @08,1                                               0811
         AL    @08,BUG+132                                         0811
         ST    @08,BUG+132                                         0811
*   END;                                                    /*@Z427VLS*
* ELSE                                                             0813
*   DO;                                                     /*@Z427VLS*
         B     @RC00808                                            0813
@RF00808 DS    0H                                                  0814
*     IF ERRORID = ON THEN                                         0814
         TM    ERRORID(R2),B'00000100'                             0814
         BNO   @RF00814                                            0814
*       CALL ERIDFILT;                                      /*@Z427VLS*
         BAL   @14,ERIDFILT                                        0815
*     IF PASSFLAG = OFF THEN /*IF FAILED ERROR ID FILTERING   @Z427VLS*
@RF00814 TM    PASSFLAG(R2),B'00000001'                            0816
         BNZ   @RF00816                                            0816
*       BUG(35) = BUG(35) + 1;                              /*@Z427VLS*
         LA    @08,1                                               0817
         AL    @08,BUG+136                                         0817
         ST    @08,BUG+136                                         0817
*   END;                                                    /*@Z427VLS*
* END;                                                      /*@Z427VLS*
@EL00018 DS    0H                                                  0819
@EF00018 DS    0H                                                  0819
@ER00018 LM    @14,@12,@SA00018                                    0819
         BR    @14                                                 0819
* ERIDFILT: PROC;                                           /*@Z427VLS*
ERIDFILT STM   @14,@12,12(@13)                                     0820
* IF (LRTKEY1 = MVSMCH & (LRTERRID & HEX10) = HEX10) ×             0821
*    (WORKTYPE = HEX40 & (LRTERRID & HEX20) = HEX20) THEN          0821
         CLI   LRTKEY1(R7),X'13'                                   0821
         BNE   @GL00060                                            0821
         MVC   @TS00001(1),LRTERRID(R7)                            0821
         NI    @TS00001,X'10'                                      0821
         CLI   @TS00001,X'10'                                      0821
         BE    @RT00821                                            0821
@GL00060 CLI   WORKTYPE,X'40'                                      0821
         BNE   @RF00821                                            0821
         MVC   @TS00001(1),LRTERRID(R7)                            0821
         NI    @TS00001,X'20'                                      0821
         CLI   @TS00001,X'20'                                      0821
         BNE   @RF00821                                            0821
@RT00821 DS    0H                                                  0822
*   DO;                                                     /*@Z427VLS*
*     IF IDVALUE ^= RSEQ THEN                                      0823
         LR    @08,R7                                              0823
         AH    @08,RECLNGTH(,R2)                                   0823
         AL    @08,@CF01575                                        0823
         CLC   IDVALUE(2,R2),RSEQ(@08)                             0823
         BE    @RF00823                                            0823
*       PASSFLAG = OFF;                                     /*@Z427VLS*
         NI    PASSFLAG(R2),B'11111110'                            0824
*     ELSE                                                         0825
*       DO;                                                 /*@Z427VLS*
         B     @RC00823                                            0825
@RF00823 DS    0H                                                  0826
*         IF IDCPU ^= 'FF'X THEN /*DEFAULT UNSET FLAG IS FF   @Z427VLS*
         CLI   IDCPU(R2),X'FF'                                     0826
         BE    @RF00826                                            0826
*           DO;                                             /*@Z427VLS*
*             IF IDCPU ^= RCPU THEN                                0828
         LR    @08,R7                                              0828
         AH    @08,RECLNGTH(,R2)                                   0828
         AL    @08,@CF01569                                        0828
         CLC   IDCPU(1,R2),RCPU-3(@08)                             0828
         BE    @RF00828                                            0828
*               PASSFLAG = OFF;                             /*@Z427VLS*
         NI    PASSFLAG(R2),B'11111110'                            0829
*             ELSE                                                 0830
*               DO;                                         /*@Z427VLS*
         B     @RC00828                                            0830
@RF00828 DS    0H                                                  0831
*                 IF IDASID ^= RASID THEN                          0831
         LR    @08,R7                                              0831
         AH    @08,RECLNGTH(,R2)                                   0831
         AL    @08,@CF01564                                        0831
         CLC   IDASID(2,R2),RASID-4(@08)                           0831
         BE    @RF00831                                            0831
*                   PASSFLAG = OFF;                         /*@Z427VLS*
         NI    PASSFLAG(R2),B'11111110'                            0832
*                 ELSE                                             0833
*                   DO;                                     /*@Z427VLS*
         B     @RC00831                                            0833
@RF00831 DS    0H                                                  0834
*                    TIME=(IDHOUR*CONVSECT) +                      0834
*                         (IDMIN*CST) +                            0834
*                         (IDSEC*TEN) +                            0834
*                          IDTSEC;    /* ERRID TIME TO TSEC  @XA19973 *
         SLR   @01,@01                                             0834
         IC    @01,IDHOUR(,R2)                                     0834
         M     @00,@CF01048                                        0834
         SLR   @08,@08                                             0834
         IC    @08,IDMIN(,R2)                                      0834
         MH    @08,@CH01050                                        0834
         ALR   @01,@08                                             0834
         SLR   @05,@05                                             0834
         IC    @05,IDSEC(,R2)                                      0834
         M     @04,TEN                                             0834
         ALR   @01,@05                                             0834
         SLR   @08,@08                                             0834
         IC    @08,IDTSEC(,R2)                                     0834
         ALR   @01,@08                                             0834
         ST    @01,TIME                                            0834
*                    IF TIME^=RTIME  THEN                          0835
         LR    @08,R7                                              0835
         AH    @08,RECLNGTH(,R2)                                   0835
         AL    @08,@CF01576                                        0835
         ICM   @06,15,RTIME-6(@08)                                 0835
         CR    @01,@06                                             0835
         BE    @RF00835                                            0835
*                      PASSFLAG=NO; /* ERROR ID^=RECORD TIME @XA19973 *
         NI    PASSFLAG(R2),B'11111110'                            0836
*                    END;                                   /*@Z427VLS*
*                END;                                       /*@Z427VLS*
*            END;                                           /*@Z427VLS*
*         END;                                              /*@Z427VLS*
*     END;                                                  /*@Z427VLS*
*   ELSE /*IF RECORD DOES NOT HAVE ERRORID THEN REJECT IT     @Z427VLS*
*     PASSFLAG = NO;                                        /*@Z427VLS*
         B     @RC00821                                            0842
@RF00821 NI    PASSFLAG(R2),B'11111110'                            0842
* END;                                                      /*@Z427VLS*
@EL00019 DS    0H                                                  0843
@EF00019 DS    0H                                                  0843
@ER00019 LM    @14,@12,12(@13)                                     0843
         BR    @14                                                 0843
* CUASELCT: PROC;                                           /*@Z427VLS*
CUASELCT STM   @14,@12,12(@13)                                     0844
* CUAOK = NO;                                               /*@Z427VLS*
         NI    CUAOK,B'11111110'                                   0845
* DO J = 1 BY 1 TO CUANUM WHILE CUAOK = NO;                 /*@Z427VLS*
         LA    @08,1                                               0846
         ST    @08,J                                               0846
         B     @DE00846                                            0846
@DL00846 TM    CUAOK,B'00000001'                                   0846
         BNZ   @DC00846                                            0846
*   IF WORKMOD >= CUA1(J) & WORKMOD <= CUA2(J) THEN                0847
         SLA   @08,2                                               0847
         L     @06,CUAPTR(,R2)                                     0847
         ST    @08,@TF00001                                        0847
         ALR   @08,@06                                             0847
         BCTR  @08,0                                               0847
         BCTR  @08,0                                               0847
         CLC   WORKMOD(2),CUA1-2(@08)                              0847
         BL    @RF00847                                            0847
         AL    @06,@TF00001                                        0847
         CLC   WORKMOD(2),CUA2-4(@06)                              0847
         BH    @RF00847                                            0847
*     CUAOK = YES;                                          /*@Z427VLS*
         OI    CUAOK,B'00000001'                                   0848
* END;                                                      /*@Z427VLS*
@RF00847 LA    @08,1                                               0849
         AL    @08,J                                               0849
         ST    @08,J                                               0849
@DE00846 L     @06,CUAPTR(,R2)                                     0849
         CH    @08,CUANUM(,@06)                                    0849
         BNH   @DL00846                                            0849
@DC00846 DS    0H                                                  0850
* IF CUAOK = NO THEN                                               0850
         TM    CUAOK,B'00000001'                                   0850
         BNZ   @RF00850                                            0850
*   PASSFLAG = NO;                                          /*@Z427VLS*
         NI    PASSFLAG(R2),B'11111110'                            0851
* END;                                                      /*@Z427VLS*
@EL00020 DS    0H                                                  0852
@EF00020 DS    0H                                                  0852
@ER00020 LM    @14,@12,12(@13)                                     0852
         BR    @14                                                 0852
* /*                                                          @Z427VLS*
* /*                                                          @Z427VLS*
* CPCUASEL: PROC;                                           /*@Z427VLS*
CPCUASEL STM   @14,@12,12(@13)                                     0853
* WKCPU = LRTCPUS;                                          /*@Z427VLS*
         MVC   WKCPU(3),LRTCPUS(R7)                                0854
* WKCUA = WORKMOD;                                          /*@Z427VLS*
         MVC   WKCUA(2),WORKMOD                                    0855
* CPUCUAOK = NO;                                            /*@Z427VLS*
         NI    CPUCUAOK,B'01111111'                                0856
* DO J = 1 BY 1 TO CPCUANUM WHILE CPUCUAOK = NO ;           /*@Z427VLS*
         LA    @08,1                                               0857
         ST    @08,J                                               0857
         B     @DE00857                                            0857
@DL00857 TM    CPUCUAOK,B'10000000'                                0857
         BNZ   @DC00857                                            0857
*    IF CPUCUX1(J) = LRTCPUS THEN                                  0858
         MH    @08,@CH00083                                        0858
         L     @06,CPCUAPTR(,R2)                                   0858
         ST    @08,@TF00001                                        0858
         ALR   @08,@06                                             0858
         AL    @08,@CF01578                                        0858
         CLC   CPUCUX1-2(3,@08),LRTCPUS(R7)                        0858
         BNE   @RF00858                                            0858
*     DO;                                                   /*@0099VLS*
*      IF WKCUA >= CPUCUX2(J) &                                    0860
*         WKCUA <= CPUCUX3(J) THEN                                 0860
         LR    @08,@06                                             0860
         AL    @08,@TF00001                                        0860
         BCTR  @08,0                                               0860
         BCTR  @08,0                                               0860
         CLC   WKCUA(2),CPUCUX2-5(@08)                             0860
         BL    @RF00860                                            0860
         AL    @06,@TF00001                                        0860
         CLC   WKCUA(2),CPUCUX3-7(@06)                             0860
         BH    @RF00860                                            0860
*          CPUCUAOK = YES;                                  /*@0099VLS*
         OI    CPUCUAOK,B'10000000'                                0861
*     END;                                                  /*@0099VLS*
@RF00860 DS    0H                                                  0863
* END;                                                      /*@Z427VLS*
@RF00858 LA    @08,1                                               0863
         AL    @08,J                                               0863
         ST    @08,J                                               0863
@DE00857 L     @06,CPCUAPTR(,R2)                                   0863
         CH    @08,CPCUANUM(,@06)                                  0863
         BNH   @DL00857                                            0863
@DC00857 DS    0H                                                  0864
* IF CPUCUAOK = NO THEN                                            0864
         TM    CPUCUAOK,B'10000000'                                0864
         BNZ   @RF00864                                            0864
*   PASSFLAG = NO;                                          /*@Z427VLS*
         NI    PASSFLAG(R2),B'11111110'                            0865
* END;                                                      /*@Z427VLS*
@EL00021 DS    0H                                                  0866
@EF00021 DS    0H                                                  0866
@ER00021 LM    @14,@12,12(@13)                                     0866
         BR    @14                                                 0866
* /*                                                          @Z427VLS*
* /*                                                          @Z427VLS*
* VOLID: PROC;                                              /*@Z427VLS*
VOLID    STM   @14,@12,12(@13)                                     0867
* IF WORKTYPE = HEX90 THEN /*IF RECORD IS MDR                 @Z427VLS*
         CLI   WORKTYPE,X'90'                                      0868
         BNE   @RF00868                                            0868
*  DO;                                                      /*@Z427VLS*
*     IF TPRDEV = DV3330 ×    /*VOL SELECTION FOR 33XX DEVICES*/   0870
*        TPRDEV = DV3340 ×                                         0870
*        TPRDEV = DV33302 ×                                        0870
*        (TPRDEV > '15'X & TPRDEV < '20'X) ×                /*@D3506GB*
*        TPRDEV = DV3350 THEN                                      0870
         CLI   TPRDEV(R7),X'01'                                    0870
         BE    @RT00870                                            0870
         CLI   TPRDEV(R7),X'09'                                    0870
         BE    @RT00870                                            0870
         CLI   TPRDEV(R7),X'0A'                                    0870
         BE    @RT00870                                            0870
         CLI   TPRDEV(R7),X'15'                                    0870
         BNH   @GL00065                                            0870
         CLI   TPRDEV(R7),X'20'                                    0870
         BL    @RT00870                                            0870
@GL00065 CLI   TPRDEV(R7),X'11'                                    0870
         BNE   @RF00870                                            0870
@RT00870 DS    0H                                                  0871
*   DO;                                                     /*@Z427VLS*
*     VOLOK = NO;                                           /*@Z427VLS*
         NI    VOLOK,B'10111111'                                   0872
*     DO J = 1 BY 1 TO VOLNUM WHILE VOLOK = NO;             /*@Z427VLS*
         LA    @08,1                                               0873
         ST    @08,J                                               0873
         B     @DE00873                                            0873
@DL00873 TM    VOLOK,B'01000000'                                   0873
         BNZ   @DC00873                                            0873
*       IF VOLVAL(J) = TPRVOL THEN                                 0874
         MH    @08,@CH00081                                        0874
         L     @06,VOLPTR(,R2)                                     0874
         ALR   @06,@08                                             0874
         AL    @06,@CF01576                                        0874
         CLC   VOLVAL-2(6,@06),TPRVOL(R7)                          0874
         BNE   @RF00874                                            0874
*         VOLOK = YES;                                      /*@Z427VLS*
         OI    VOLOK,B'01000000'                                   0875
*     END;                                                  /*@Z427VLS*
@RF00874 LA    @08,1                                               0876
         AL    @08,J                                               0876
         ST    @08,J                                               0876
@DE00873 L     @06,VOLPTR(,R2)                                     0876
         CH    @08,VOLNUM(,@06)                                    0876
         BNH   @DL00873                                            0876
@DC00873 DS    0H                                                  0877
*     IF VOLOK = NO THEN                                           0877
         TM    VOLOK,B'01000000'                                   0877
         BNZ   @RF00877                                            0877
*       PASSFLAG = NO;                                      /*@Z427VLS*
         NI    PASSFLAG(R2),B'11111110'                            0878
*   END;                                                    /*@Z427VLS*
*  END;                                                     /*@Z427VLS*
*   ELSE                                                           0881
*    DO; /*OBR BY DEFAULT                                     @Z427VLS*
         B     @RC00868                                            0881
@RF00868 DS    0H                                                  0882
* IF WORKDEV = DEV3330 ×                                           0882
*    WORKDEV = DEV3340 ×                                           0882
*    WORKDEV = DEV3350 ×                                           0882
*    WORKDEV = DEV3370 ×     /*FB DEVICE 3370                 @D3506GB*
*    WORKDEV = DEV3310 ×     /*FB DEVICE 3310                 @D3506GB*
*    WORKDEV = DEV33301 THEN                                       0882
         CLC   WORKDEV(2),@CB01002                                 0882
         BE    @RT00882                                            0882
         CLC   WORKDEV(2),@CB01004                                 0882
         BE    @RT00882                                            0882
         CLC   WORKDEV(2),@CB01006                                 0882
         BE    @RT00882                                            0882
         CLC   WORKDEV(2),@CB01008                                 0882
         BE    @RT00882                                            0882
         CLC   WORKDEV(2),@CB01010                                 0882
         BE    @RT00882                                            0882
         CLC   WORKDEV(2),@CB01012                                 0882
         BNE   @RF00882                                            0882
@RT00882 DS    0H                                                  0883
*   DO;                                                     /*@Z427VLS*
*     VOLOK = NO;                                           /*@Z427VLS*
         NI    VOLOK,B'10111111'                                   0884
*     DO J = 1 BY 1 TO VOLNUM WHILE VOLOK = NO;             /*@Z427VLS*
         LA    @08,1                                               0885
         ST    @08,J                                               0885
         B     @DE00885                                            0885
@DL00885 TM    VOLOK,B'01000000'                                   0885
         BNZ   @DC00885                                            0885
*       IF VOLVAL(J) = OBRVOL THEN                                 0886
         MH    @08,@CH00081                                        0886
         L     @06,VOLPTR(,R2)                                     0886
         ALR   @06,@08                                             0886
         AL    @06,@CF01576                                        0886
         CLC   VOLVAL-2(6,@06),OBRVOL(R7)                          0886
         BNE   @RF00886                                            0886
*         VOLOK = YES;                                      /*@Z427VLS*
         OI    VOLOK,B'01000000'                                   0887
*     END;                                                  /*@Z427VLS*
@RF00886 LA    @08,1                                               0888
         AL    @08,J                                               0888
         ST    @08,J                                               0888
@DE00885 L     @06,VOLPTR(,R2)                                     0888
         CH    @08,VOLNUM(,@06)                                    0888
         BNH   @DL00885                                            0888
@DC00885 DS    0H                                                  0889
*     IF VOLOK = NO THEN                                           0889
         TM    VOLOK,B'01000000'                                   0889
         BNZ   @RF00889                                            0889
*       PASSFLAG = NO;                                      /*@Z427VLS*
         NI    PASSFLAG(R2),B'11111110'                            0890
*   END;                                                    /*@Z427VLS*
*    END;                                                   /*@Z427VLS*
* END; /*END OF VOLID PROC                                    @Z427VLS*
@EL00022 DS    0H                                                  0893
@EF00022 DS    0H                                                  0893
@ER00022 LM    @14,@12,12(@13)                                     0893
         BR    @14                                                 0893
* /*                                                          @Z427VLS*
* /*                                                          @Z427VLS*
*  TERMID: PROC;                                            /*@Z427VLS*
TERMID   STM   @14,@12,12(@13)                                     0894
*  IF LRTKEY1 = OBRVTAM ×                                          0895
*   ((LRTKEY1=OBRCONV×OBRKEY1=OBRTCM) &                            0895
*    (OBRTCAM & '0F'X) = TCAMYES)                                  0895
*     THEN                                                  /*@ZA29957*
         CLI   LRTKEY1(R7),X'36'                                   0895
         BE    @RT00895                                            0895
         CLI   LRTKEY1(R7),X'32'                                   0895
         BE    @GL00076                                            0895
         CLI   OBRKEY1(R7),X'34'                                   0895
         BNE   @RF00895                                            0895
@GL00076 MVC   @TS00001(1),OBRTCAM(R7)                             0895
         NI    @TS00001,X'0F'                                      0895
         CLI   @TS00001,X'0F'                                      0895
         BNE   @RF00895                                            0895
@RT00895 DS    0H                                                  0896
*       DO;                                                 /*@Z427VLS*
*         WORKTYPE = LRTKEY1;                               /*@Z427VLS*
         MVC   WORKTYPE(1),LRTKEY1(R7)                             0897
*         IF TERM  ^= BLANKS & TERM  ^= OBRTERMN THEN              0898
         CLC   TERM(8,R2),@CC00995                                 0898
         BE    @RF00898                                            0898
         CLC   TERM(8,R2),OBRTERMN(R7)                             0898
         BE    @RF00898                                            0898
*           PASSFLAG = NO;                                  /*@Z427VLS*
         NI    PASSFLAG(R2),B'11111110'                            0899
*       END;                                                /*@Z427VLS*
*  END;                                                     /*@Z427VLS*
@EL00023 DS    0H                                                  0901
@EF00023 DS    0H                                                  0901
@ER00023 LM    @14,@12,12(@13)                                     0901
         BR    @14                                                 0901
* /*                                                          @Z427VLS*
* /******************************************************************/
* /*    THIS PROC WILL DETERMINE WHAT TO DO WITH THE FRAME RECORDS   */
*       RESPECIFY (R15) UNRESTRICTED;                       /*@G51DGGB*
* /*                                                          @G51DGGB*
* CKFRAMES: PROC;                                           /*@G51DGGB*
CKFRAMES STM   @14,@12,@SA00024                                    0903
*  RESPECIFY (R15) RESTRICTED;                              /*@G51DGGB*
* IF DEBUG49 = ON THEN                                             0905
         TM    DEBUG49(R2),B'01000000'                             0905
         BNO   @RF00905                                            0905
*  CALL HEXDUMP;                                            /*@G51DGGB*
         BAL   @14,HEXDUMP                                         0906
*       IF LRTCNT = ONE & FRAMENUM ^= ZERO & (LRTKEY1 & 'F0'X) = 'A0'X
*        THEN                                                      0907
@RF00905 CLI   LRTCNT(R7),1                                        0907
         BNE   @RF00907                                            0907
         L     @14,FRAMEPTR(,R2)                                   0907
         L     @14,FRAMENUM(,@14)                                  0907
         LTR   @14,@14                                             0907
         BZ    @RF00907                                            0907
         MVC   @TS00001(1),LRTKEY1(R7)                             0907
         NI    @TS00001,X'F0'                                      0907
         CLI   @TS00001,X'A0'                                      0907
         BNE   @RF00907                                            0907
*         DO;                                               /*@G51DGGB*
*           SAVESEQ = ONE;           /* RESET SEQUENCE CHECK  @G51DGGB*
         MVC   SAVESEQ(4),@CF00055                                 0909
*           CALL FRAMEREP;           /* SEE IF THIS FRAME SET MUST*/
         BAL   @14,FRAMEREP                                        0910
*           R15 = ERROR;             /* BE SAVED              @G51DGGB*
         L     @08,ERROR                                           0911
         LR    R15,@08                                             0911
*           IF LRTNLAST = OFF & FRAMEYES = ON & ERROR = 0 THEN     0912
         TM    LRTNLAST(R7),B'10000000'                            0912
         BNZ   @RF00912                                            0912
         TM    FRAMEYES,B'00000100'                                0912
         BNO   @RF00912                                            0912
         SLR   @14,@14                                             0912
         CR    @08,@14                                             0912
         BNE   @RF00912                                            0912
*            DO;                                            /*@G51DGGB*
*             FRAMETYP(CCHINDX) = ALLMCH;                   /*@G51DGGB*
         L     @08,CCHINDX                                         0914
         MH    @08,@CH00227                                        0914
         L     @06,FRAMEPTR(,R2)                                   0914
         ALR   @06,@08                                             0914
         AL    @06,@CF01569                                        0914
         MVI   FRAMETYP-17(@06),X'02'                              0914
*             SAVESEQ = 0;                                  /*@G51DGGB*
         ST    @14,SAVESEQ                                         0915
*            END;                                           /*@G51DGGB*
*         END;                                              /*@G51DGGB*
*       ELSE                         /* NON-FIRST FRAME       @G51DGGB*
*         DO;                                               /*@G51DGGB*
         B     @RC00907                                            0918
@RF00907 DS    0H                                                  0919
*           IF FRAMEYES = ON THEN    /* IF FRAME IS TO BE SAVED  */
         TM    FRAMEYES,B'00000100'                                0919
         BNO   @RF00919                                            0919
*             DO;                                           /*@G51DGGB*
*               SAVESEQ = SAVESEQ + 1;  /* UP SEQ CHECK       @G51DGGB*
         LA    @14,1                                               0921
         AL    @14,SAVESEQ                                         0921
         ST    @14,SAVESEQ                                         0921
*               IF SAVESEQ = LRTCNT THEN /* IF RECORD NOT MISSING */
         SLR   @08,@08                                             0922
         IC    @08,LRTCNT(,R7)                                     0922
         CR    @14,@08                                             0922
         BNE   @RF00922                                            0922
*                 DO;                                       /*@G51DGGB*
*                   CALL BUILDTTR;   /* SAVE EXTERNAL LOCATION */  0924
         BAL   @14,BUILDTTR                                        0924
*                   R15 = ERROR;                            /*@G51DGGB*
         L     R15,ERROR                                           0925
*                   IF R15 = ZERO THEN  /* IF FRAME EXTERNAL LOC  */
         SLR   @14,@14                                             0926
         CR    R15,@14                                             0926
         BNE   @RF00926                                            0926
*                     DO;               /* SUCCESSFULLY SAVED @G51DGGB*
*                       IF LRTNLAST = OFF THEN /* IF LAST FRAME  */
         TM    LRTNLAST(R7),B'10000000'                            0928
         BNZ   @RF00928                                            0928
*                         DO;                               /*@G51DGGB*
*                           IF( LRTKEY1 & GENREC) = HEXA0 THEN     0930
         MVC   @TS00001(1),LRTKEY1(R7)                             0930
         NI    @TS00001,X'F0'                                      0930
         CLI   @TS00001,X'A0'                                      0930
         BNE   @RF00930                                            0930
*                            DO;                            /*@G51DGGB*
*                             FRAMETYP(CCHINDX) = ALLMCH;   /*@G51DGGB*
         L     @08,CCHINDX                                         0932
         MH    @08,@CH00227                                        0932
         L     @06,FRAMEPTR(,R2)                                   0932
         ALR   @06,@08                                             0932
         AL    @06,@CF01569                                        0932
         MVI   FRAMETYP-17(@06),X'02'                              0932
*                             SAVESEQ = 0;                  /*@G51DGGB*
         ST    @14,SAVESEQ                                         0933
*                            END;                           /*@G51DGGB*
*                           /*IF ALL MCH FRAMES HAVE BEEN SAVED,  */
*                           /*THEN INDICATE SUCH              @G51DGGB*
*                            ELSE                  /*IS CCH FRAME */
*                             DO;                           /*@G51DGGB*
         B     @RC00930                                            0935
@RF00930 DS    0H                                                  0936
*                             FRAMEYES = OFF;               /*@G51DGGB*
         NI    FRAMEYES,B'11111011'                                0936
*                             IF FRAMETYP(CCHINDX) ^= ALLMCH THEN  0937
         L     @14,CCHINDX                                         0937
         MH    @14,@CH00227                                        0937
         L     @08,FRAMEPTR(,R2)                                   0937
         ALR   @08,@14                                             0937
         AL    @08,@CF01569                                        0937
         CLI   FRAMETYP-17(@08),X'02'                              0937
         BE    @RF00937                                            0937
*                               DO; /*IF MISSING LAST MCH FRAME   */
*                                 MSGNO = QQ1;              /*@G51DGGB*
         MVI   MSGNO,X'0A'                                         0939
*                                 CALL ERRMSG;              /*@G51DGGB*
         BAL   @14,ERRMSG                                          0940
*                                 CALL FIXENTRY; /*DELETE INCOM-  */
         BAL   @14,FIXENTRY                                        0941
*                               END;             /*PLETE SET. @G51DGGB*
*                              ELSE   /*IS COMPLETE SET -INDICATE  */
*                               FRAMETYP(CCHINDX) = ALLALL; /*IT IS*/
         B     @RC00937                                            0943
@RF00937 L     @14,CCHINDX                                         0943
         MH    @14,@CH00227                                        0943
         L     @08,FRAMEPTR(,R2)                                   0943
         ALR   @08,@14                                             0943
         AL    @08,@CF01569                                        0943
         MVI   FRAMETYP-17(@08),X'FF'                              0943
*                             END;                          /*@G51DGGB*
*                         END;                              /*@G51DGGB*
*                    END;                                   /*@G51DGGB*
*               END;                                        /*@G51DGGB*
*             ELSE   /*MISSING MIDDLE FRAME                   @G51DGGB*
*               DO;                                         /*@G51DGGB*
         B     @RC00922                                            0948
@RF00922 DS    0H                                                  0949
*                 MSGNO = QQ1;                              /*@G51DGGB*
         MVI   MSGNO,X'0A'                                         0949
*                 CALL ERRMSG;                              /*@G51DGGB*
         BAL   @14,ERRMSG                                          0950
*                 FRAMEYES = OFF; /*DONT SAVE INCOMPLETE SET  @G51DGGB*
         NI    FRAMEYES,B'11111011'                                0951
*                 CALL FIXENTRY; /*DELETE REFS TO INCOMPLETE SET*/ 0952
         BAL   @14,FIXENTRY                                        0952
*               END;                                        /*@G51DGGB*
*            END;                                           /*@G51DGGB*
*           ELSE      /*FRAME NOT TO BE SAVED                 @G51DGGB*
*             BUG(37) = BUG(37) + 1;                        /*@G51DGGB*
         B     @RC00919                                            0955
@RF00919 LA    @14,1                                               0955
         AL    @14,BUG+144                                         0955
         ST    @14,BUG+144                                         0955
*       END;                                                /*@G51DGGB*
* RESPECIFY (R15) UNRESTRICTED;                             /*@G51DGGB*
* END;                                                      /*@G51DGGB*
@EL00024 DS    0H                                                  0958
@EF00024 DS    0H                                                  0958
@ER00024 LM    @14,@12,@SA00024                                    0958
         BR    @14                                                 0958
* /********************************************************************
* /*    THIS PROC WILL WRITE FRAMES TO THE ACCDEV DATA SET IF ANY WERE*
* /*    SAVED DURING THIS JOB STEP                            @G51DGGB*
* /*                                                          @G51DGGB*
* WRITEFRM: PROC;                                           /*@G51DGGB*
WRITEFRM STM   @14,@12,@SA00025                                    0959
* DCL F FIXED(31) INIT(0);                                  /*@G51DGGB*
* RESPECIFY (R15) RESTRICTED;                               /*@G51DGGB*
*          DO F = 1 BY 1 TO FRAMENUM WHILE R15 < FOUR;       /*SETS. */
         LA    @14,1                                               0962
         ST    @14,F                                               0962
         B     @DE00962                                            0962
@DL00962 C     R15,@CF00064                                        0962
         BNL   @DC00962                                            0962
*            IF FRAMETYP(F) = ALLALL THEN /*IF COMPLETE SET   @G51DGGB*
         MH    @14,@CH00227                                        0963
         L     @08,FRAMEPTR(,R2)                                   0963
         ST    @14,@TF00001                                        0963
         ALR   @14,@08                                             0963
         AL    @14,@CF01569                                        0963
         CLI   FRAMETYP-17(@14),X'FF'                              0963
         BNE   @RF00963                                            0963
*              DO;                                          /*@G51DGGB*
*               IF PACC = YES THEN                                 0965
         TM    PACC(R2),B'01000000'                                0965
         BNO   @RF00965                                            0965
*                DO;                                        /*@G51DGGB*
*                LISTPTR = FRAMLOCM(F);   /*ESTABLISH LISTLOC ADDR.*/
         L     @14,@TF00001                                        0967
         AL    @08,@CF01576                                        0967
         L     @14,FRAMLOCM-20(@14,@08)                            0967
         ST    @14,LISTPTR                                         0967
*                DO Z = 1 BY 1 TO LISTNUM WHILE R15 < FOUR ;/*@G51DGGB*
         LA    @14,1                                               0968
         ST    @14,Z                                               0968
         B     @DE00968                                            0968
@DL00968 C     R15,@CF00064                                        0968
         BNL   @DC00968                                            0968
*                  RECCCHHR = LISTCCHR(Z);  /*GET ALL MCH FRAMES*/ 0969
         MH    @14,@CH00079                                        0969
         L     @08,LISTPTR                                         0969
         ALR   @08,@14                                             0969
         BCTR  @08,0                                               0969
         MVC   RECCCHHR(5,R2),LISTCCHR-4(@08)                      0969
*                  CALL IOHND(READIRCT);    /*READ FRAME FROM DIRECTWK*
         L     @15,ADIOHND(,R2)                                    0970
         LA    @01,@AL00970                                        0970
         BALR  @14,@15                                             0970
*                  IF R15 = ZERO THEN       /*WRITE FRAME TO ACCDEV*/
         LTR   R15,R15                                             0971
         BNZ   @RF00971                                            0971
*                   DO;                                     /*@G51DGGB*
*                    CALL IOHND(RITEHIST);                  /*@G51DGGB*
         L     @15,ADIOHND(,R2)                                    0973
         LA    @01,@AL00973                                        0973
         BALR  @14,@15                                             0973
*                    BUG(44) = BUG(44) + 1;                 /*@G51DGGB*
         LA    @14,1                                               0974
         AL    @14,BUG+172                                         0974
         ST    @14,BUG+172                                         0974
*                   END;                                    /*@G51DGGB*
*                  ELSE                     /*IDENTIFY MISSING FRAME*/
*                    DO;                    /*ON ACCDEV       @G51DGGB*
         B     @RC00971                                            0976
@RF00971 DS    0H                                                  0977
*                      MSGNO = RR;          /*FRAME LOST WRITING TO */
         MVI   MSGNO,X'09'                                         0977
*                      ERROR = 12;                          /*@G51DGGB*
         MVC   ERROR(4),@CF00032                                   0978
*                      CALL ERRMSG;         /*ACCDEV MESSAGE. @G51DGGB*
         BAL   @14,ERRMSG                                          0979
*                    END;                                   /*@G51DGGB*
*               END;                                        /*@G51DGGB*
@RC00971 LA    @14,1                                               0981
         AL    @14,Z                                               0981
         ST    @14,Z                                               0981
@DE00968 L     @08,LISTPTR                                         0981
         C     @14,LISTNUM(,@08)                                   0981
         BNH   @DL00968                                            0981
@DC00968 DS    0H                                                  0982
*               IF R15 = ZERO THEN /*IF NO ACCDEV WRITE ERROR @G51DGGB*
         LTR   R15,R15                                             0982
         BNZ   @RF00982                                            0982
*                 DO;                                       /*@G51DGGB*
*                   LISTPTR = FRAMLOCC(F); /*GET CCH FRAMES   @G51DGGB*
         L     @14,F                                               0984
         MH    @14,@CH00227                                        0984
         L     @08,FRAMEPTR(,R2)                                   0984
         L     @14,FRAMLOCC-24(@14,@08)                            0984
         ST    @14,LISTPTR                                         0984
*                   DO Z = 1 BY 1 TO LISTNUM WHILE R15 < FOUR;     0985
         LA    @14,1                                               0985
         ST    @14,Z                                               0985
         B     @DE00985                                            0985
@DL00985 C     R15,@CF00064                                        0985
         BNL   @DC00985                                            0985
*                     RECCCHHR = LISTCCHR(Z);               /*@G51DGGB*
         MH    @14,@CH00079                                        0986
         L     @08,LISTPTR                                         0986
         ALR   @08,@14                                             0986
         BCTR  @08,0                                               0986
         MVC   RECCCHHR(5,R2),LISTCCHR-4(@08)                      0986
*                       CALL IOHND(READIRCT); /*READ FRAME OFF DRCTWK*/
         L     @15,ADIOHND(,R2)                                    0987
         LA    @01,@AL00987                                        0987
         BALR  @14,@15                                             0987
*                       IF R15 = ZERO THEN    /*IF SUCCESS THEN WRITE*/
         LTR   R15,R15                                             0988
         BNZ   @RF00988                                            0988
*                   DO;                                     /*@G51DGGB*
*                    CALL IOHND(RITEHIST);                  /*@G51DGGB*
         L     @15,ADIOHND(,R2)                                    0990
         LA    @01,@AL00990                                        0990
         BALR  @14,@15                                             0990
*                    BUG(44) = BUG(44) + 1;                 /*@G51DGGB*
         LA    @14,1                                               0991
         AL    @14,BUG+172                                         0991
         ST    @14,BUG+172                                         0991
*                   END;                                    /*@G51DGGB*
*                       ELSE /*ACCDEV WRITE ERROR             @G51DGGB*
*                         DO;                               /*@G51DGGB*
         B     @RC00988                                            0993
@RF00988 DS    0H                                                  0994
*                           MSGNO = RR; /*FRAME LOST WRITING TO ACCDEV*
         MVI   MSGNO,X'09'                                         0994
*                           ERROR = 12;                     /*@G51DGGB*
         MVC   ERROR(4),@CF00032                                   0995
*                           CALL ERRMSG;   /*MESSAGE.         @G51DGGB*
         BAL   @14,ERRMSG                                          0996
*                         END;                              /*@G51DGGB*
*                     END;                                  /*@G51DGGB*
@RC00988 LA    @14,1                                               0998
         AL    @14,Z                                               0998
         ST    @14,Z                                               0998
@DE00985 L     @08,LISTPTR                                         0998
         C     @14,LISTNUM(,@08)                                   0998
         BNH   @DL00985                                            0998
@DC00985 DS    0H                                                  0999
*                  END;                                     /*@G51DGGB*
*               END;                                        /*@G51DGGB*
*              END;                                         /*@G51DGGB*
*            ELSE  /*INCOMPLETE FRAME SET                     @G51DGGB*
*              DO;                                          /*@G51DGGB*
         B     @RC00963                                            1002
@RF00963 DS    0H                                                  1003
*                MSGNO = QQ; /*MISSING FRAME SET MESSAGE      @G51DGGB*
         MVI   MSGNO,X'07'                                         1003
*                CCHINDX = F;   /*CORRECT DEBUG FRAME COUNTS BY */ 1004
         L     @14,F                                               1004
         ST    @14,CCHINDX                                         1004
*                CALL ERRMSG;                               /*@G51DGGB*
         BAL   @14,ERRMSG                                          1005
*                CALL FIXENTRY; /*PASSING ENTRY INDEX TO FIXENTRY*/
         BAL   @14,FIXENTRY                                        1006
*              END;                                         /*@G51DGGB*
*          END;                                             /*@G51DGGB*
@RC00963 LA    @14,1                                               1008
         AL    @14,F                                               1008
         ST    @14,F                                               1008
@DE00962 L     @08,FRAMEPTR(,R2)                                   1008
         C     @14,FRAMENUM(,@08)                                  1008
         BNH   @DL00962                                            1008
@DC00962 DS    0H                                                  1009
*       END;                                                /*@G51DGGB*
@EL00025 DS    0H                                                  1009
@EF00025 DS    0H                                                  1009
@ER00025 LM    @14,@12,@SA00025                                    1009
         BR    @14                                                 1009
* /******************************************************************/
* /*    THIS PROC WILL DETERMINE IF THE MODEL IS A MERIDAN CPU      */
* MERIDCK1: PROC;                                           /*@G51DGGB*
MERIDCK1 STM   @14,@12,@SA00026                                    1010
* DCL A FIXED(31) INIT(0);                                  /*@G51DGGB*
* ISMERD = NO;              /*SET THE FLAG PRIOR TO START     @G51DGGB*
         NI    ISMERD,B'10111111'                                  1012
* DO A = 1 BY 1 TO MRDNUMBR WHILE(ISMERD = NO);             /*@G51DGGB*
         LA    @14,1                                               1013
         ST    @14,A                                               1013
         B     @DE01013                                            1013
@DL01013 TM    ISMERD,B'01000000'                                  1013
         BNZ   @DC01013                                            1013
*  IF LRTMODEL = MODEL(A) THEN                                     1014
         ALR   @14,@14                                             1014
         L     @08,MERDCPTR(,R2)                                   1014
         ALR   @08,@14                                             1014
         CLC   LRTMODEL(2,R7),MODEL-2(@08)                         1014
         BNE   @RF01014                                            1014
*   DO;                                                     /*@G51DGGB*
*   ISMERD = YES;          /*TELL THE CALLER IT WAS MERDIAN   @G51DGGB*
         OI    ISMERD,B'01000000'                                  1016
*   WORKTYPE = (WORKTYPE × '0F'X);                          /*@G51DGGB*
         OI    WORKTYPE,X'0F'                                      1017
*   CALL BUILDFTB;                                          /*@G51DGGB*
         BAL   @14,BUILDFTB                                        1018
*   END;                                                    /*@G51DGGB*
* END;                                                      /*@G51DGGB*
@RF01014 LA    @14,1                                               1020
         AL    @14,A                                               1020
         ST    @14,A                                               1020
@DE01013 L     @08,MERDCPTR(,R2)                                   1020
         CH    @14,MRDNUMBR(,@08)                                  1020
         BNH   @DL01013                                            1020
@DC01013 DS    0H                                                  1021
* END;                                                      /*@G51DGGB*
@EL00026 DS    0H                                                  1021
@EF00026 DS    0H                                                  1021
@ER00026 LM    @14,@12,@SA00026                                    1021
         BR    @14                                                 1021
* /******************************************************************/
* /*THIS PROC WILL EXAMINE THE MERIDIAN MCH OR CCH IN ORDER TO BUILD*/
* /*FRAMTAB ENTRIES FOR UNIQUE RECORDS                        @G51DGGB*
* BUILDFTB: PROC; /*BUILD NEW ENTRY IF CPU IS UNIQUE          @G51DGGB*
BUILDFTB STM   @14,@12,@SA00027                                    1022
* LOOPOUT = NO;                                             /*@G51DGGB*
         NI    LOOPOUT,B'11101111'                                 1023
* DO T = 1 BY 1 TO EVMAX WHILE LOOPOUT = NO; /*EXAMINE ALL FRAMETAB*/
         LA    @14,1                                               1024
         ST    @14,T                                               1024
@DL01024 TM    LOOPOUT,B'00010000'                                 1024
         BNZ   @DC01024                                            1024
*   IF FRAMECPU(T) = LRTCPMOD THEN  /*IF CPU ALREADY IN TABLE THEN*/
         MH    @14,@CH00227                                        1025
         L     @08,FRAMEPTR(,R2)                                   1025
         ALR   @08,@14                                             1025
         AL    @08,@CF01567                                        1025
         CLC   FRAMECPU-4(5,@08),LRTCPMOD(R7)                      1025
         BNE   @RF01025                                            1025
*     LOOPOUT = YES; /*EXIT LOOP                              @G51DGGB*
         OI    LOOPOUT,B'00010000'                                 1026
*   ELSE     /*IF ENTRY DOESNT MATCH THE FRAME                @G51DGGB*
*     DO;                                                   /*@G51DGGB*
         B     @RC01025                                            1027
@RF01025 DS    0H                                                  1028
*       IF FRAMECPU(T) = ZERO1 THEN/*NO MATCH,ALL SET ENTRIES EXAMINED*
         L     @14,T                                               1028
         MH    @14,@CH00227                                        1028
         L     @08,FRAMEPTR(,R2)                                   1028
         ST    @14,@TF00001                                        1028
         ALR   @14,@08                                             1028
         AL    @14,@CF01567                                        1028
         CLC   FRAMECPU-4(5,@14),ZERO1                             1028
         BNE   @RF01028                                            1028
*         DO;                                               /*@G51DGGB*
*           FRAMECPU(T) = LRTCPMOD;                         /*@G51DGGB*
         LR    @14,@08                                             1030
         AL    @14,@TF00001                                        1030
         AL    @14,@CF01567                                        1030
         MVC   FRAMECPU-4(5,@14),LRTCPMOD(R7)                      1030
*           FRAMENUM = FRAMENUM + 1;                        /*@G51DGGB*
         LA    @14,1                                               1031
         AL    @14,FRAMENUM(,@08)                                  1031
         ST    @14,FRAMENUM(,@08)                                  1031
*           LOOPOUT= YES;   /*HAVE A MATCH SO EXIT            @G51DGGB*
         OI    LOOPOUT,B'00010000'                                 1032
*         END;                                              /*@G51DGGB*
*       ELSE                                                       1034
*         IF T = EVMAX THEN /*UNIQUE ENTRY BUT NOT ROOM IN TABLE*/ 1034
         B     @RC01028                                            1034
@RF01028 CLC   T(4),@CF00088                                       1034
         BNE   @RF01034                                            1034
*           DO;                                             /*@G51DGGB*
*             IF ONETIME = NO THEN   /*ISSUE MESSAGE ONLY ONCE*/   1036
         TM    ONETIME,B'10000000'                                 1036
         BNZ   @RF01036                                            1036
*               DO;                                         /*@G51DGGB*
*                 MSGNO = YY;/*SET FLAG FOR OBTAINING THE MESSAGE*/
         MVI   MSGNO,X'05'                                         1038
*                 CALL ERRMSG; /*GO OBTAIN THE MESSAGE AND PRINT IT*/
         BAL   @14,ERRMSG                                          1039
*                 ONETIME = YES;/*SET SO AS TO NOT RETURN     @G51DGGB*
         OI    ONETIME,B'10000000'                                 1040
*               END;                                        /*@G51DGGB*
*           END;                                            /*@G51DGGB*
@RF01036 DS    0H                                                  1043
*     END;                                                  /*@G51DGGB*
@RF01034 DS    0H                                                  1043
@RC01028 DS    0H                                                  1044
*  END;                                                     /*@G51DGGB*
@RC01025 LA    @14,1                                               1044
         AL    @14,T                                               1044
         ST    @14,T                                               1044
         C     @14,@CF00088                                        1044
         BNH   @DL01024                                            1044
@DC01024 DS    0H                                                  1045
* END; /*END OF PROC BUILDFTB                                 @G51DGGB*
@EL00027 DS    0H                                                  1045
@EF00027 DS    0H                                                  1045
@ER00027 LM    @14,@12,@SA00027                                    1045
         BR    @14                                                 1045
* FRAMEREP: PROC; /*REPLACE FRAME IF MORE CURRENT FRAME FOUND @G51DGGB*
FRAMEREP STM   @14,@12,@SA00028                                    1046
*                 /*COMPLETE ENTRY IF NO DATE ETC.            @G51DGGB*
*                 /*APPEND LOCATION OF FRAME EXTERNAL LOCATION LIST*/
* GETOUT = NO;                                              /*@G51DGGB*
         NI    GETOUT,B'11111101'                                  1047
* DO X = 1 BY 1 TO FRAMENUM WHILE GETOUT = NO; /*LOOP THROUGH ALL SET*/
         LA    @14,1                                               1048
         ST    @14,X                                               1048
         B     @DE01048                                            1048
@DL01048 TM    GETOUT,B'00000010'                                  1048
         BNZ   @DC01048                                            1048
*                                              /*ENTRIES OF FRAMETAB */
*   IF FRAMECPU(X) = LRTCPMOD THEN             /*IF RECORD CPU MODEL */
         LA    @08,24                                              1049
         LR    @01,@14                                             1049
         MR    @00,@08                                             1049
         L     @06,FRAMEPTR(,R2)                                   1049
         ST    @01,@TF00001                                        1049
         ALR   @01,@06                                             1049
         AL    @01,@CF01567                                        1049
         CLC   FRAMECPU-4(5,@01),LRTCPMOD(R7)                      1049
         BNE   @RF01049                                            1049
*     DO;                                      /*SERIAL MATCHES THOSE*/
*       CCHINDX = X;  /*SAVE INDEX*/           /*OF THE ENTRY @G51DGGB*
         ST    @14,CCHINDX                                         1051
*       IF FRAMEDT(X) < LRTDT THEN             /*IF REC DATE GREATER */
         LR    @14,@06                                             1052
         AL    @14,@TF00001                                        1052
         AL    @14,@CF01583                                        1052
         CLC   FRAMEDT-9(8,@14),LRTDT(R7)                          1052
         BNL   @RF01052                                            1052
*         DO;                                  /*THAN ENTRY DATE     */
*          IF DEBUG16 = ON & FRAMEDT(Q) ^= '0000000000000000'X THEN
         TM    DEBUG16(R2),B'10000000'                             1054
         BNO   @RF01054                                            1054
         LR    @01,@08                                             1054
         M     @00,Q                                               1054
         ALR   @06,@01                                             1054
         AL    @06,@CF01583                                        1054
         CLC   FRAMEDT-9(8,@06),@CB01463                           1054
         BE    @RF01054                                            1054
*          /* DEBUG SWITCH ON AND IT IS THE FIRST TIME DONT ISSUE MES*/
*           CALL FRAMMORE; /*GO ISSUE THE FRAME REPLACED MESSAGE*/ 1055
         BAL   @14,FRAMMORE                                        1055
*          ELSE                                                    1056
*           DO;                                             /*@G51DGGB*
         B     @RC01054                                            1056
@RF01054 DS    0H                                                  1057
*            CALL FIXENTRY;     /*SET UP TO ADD THE FRAMES TO THE TABLE
         BAL   @14,FIXENTRY                                        1057
*            FRAMEDT(X) = LRTDT; /*SAVE THE DATE OF THIS FRAME*/   1058
         L     @14,X                                               1058
         MH    @14,@CH00227                                        1058
         L     @08,FRAMEPTR(,R2)                                   1058
         ALR   @08,@14                                             1058
         AL    @08,@CF01583                                        1058
         MVC   FRAMEDT-9(8,@08),LRTDT(R7)                          1058
*           END;                                            /*@G51DGGB*
*               CALL BUILDTTR;                /*SAVE FRAME LOCATION*/
@RC01054 BAL   @14,BUILDTTR                                        1060
*                FRAMEYES = YES;/*SAVE SUCCEEDING FRAMES OF THIS    */
         OI    FRAMEYES,B'00000100'                                1061
*                               /*LOGICAL SET                 @G51DGGB*
*          END;                                             /*@G51DGGB*
*        ELSE  /*IMPLIES DATE IS LOW OR EQUAL                 @G51DGGB*
*         DO;                                               /*@G51DGGB*
         B     @RC01052                                            1063
@RF01052 DS    0H                                                  1064
*          IF FRAMEDT(X) = LRTDT THEN /*IF TABLE DATE EQUALS RECORD DAT
         L     @14,X                                               1064
         MH    @14,@CH00227                                        1064
         L     @08,FRAMEPTR(,R2)                                   1064
         ST    @14,@TF00001                                        1064
         ALR   @14,@08                                             1064
         AL    @14,@CF01583                                        1064
         CLC   FRAMEDT-9(8,@14),LRTDT(R7)                          1064
         BNE   @RF01064                                            1064
*            DO;                                            /*@G51DGGB*
*             IF FRAMETYP(X) ^= ALLALL THEN                        1066
         AL    @08,@TF00001                                        1066
         AL    @08,@CF01569                                        1066
         CLI   FRAMETYP-17(@08),X'FF'                              1066
         BE    @RF01066                                            1066
*              DO;                                          /*@G51DGGB*
*                       CALL FIXENTRY; /*DELETE INCOMPLETE SET       */
         BAL   @14,FIXENTRY                                        1068
*                       MSGNO = QQ1;/*ISSUE FRAME SET INCOMPLETE MESS*/
         MVI   MSGNO,X'0A'                                         1069
*                       CALL ERRMSG;                        /*@G51DGGB*
         BAL   @14,ERRMSG                                          1070
*                       CALL BUILDTTR; /*SAVE THIS FRAME      @G51DGGB*
         BAL   @14,BUILDTTR                                        1071
*                       FRAMEYES = YES; /*SAVE SUCCEEDING MEMBERS */
         OI    FRAMEYES,B'00000100'                                1072
*              END;                                         /*@G51DGGB*
*             ELSE  /*COMPLETE SET FOR THIS DATE ALREADY EXISTS      */
*                DO; /*FRAMETYP IS EQUAL TO ALLALL            @G51DGGB*
         B     @RC01066                                            1074
@RF01066 DS    0H                                                  1075
*                    FRAMEYES = NO;/*DELETE SUCCEEDING FRAMES OF SET */
         NI    FRAMEYES,B'11111011'                                1075
*                    BUG(37) = BUG(37) + 1; /*COUNT FRAME AS NOT USED*/
         LA    @14,1                                               1076
         AL    @14,BUG+144                                         1076
         ST    @14,BUG+144                                         1076
*                END;                                       /*@G51DGGB*
*         END; /*END OF CODE IF DATE IN RECORD EQUALS DATE IN TABLE*/
*        ELSE /*DATE IN TABLE GREATER THAN FRAME RECORD DATE  @G51DGGB*
*         BUG(37) = BUG(37)  + 1; /*INCREMENT # OF REJECTED FRAMES */
         B     @RC01064                                            1079
@RF01064 LA    @14,1                                               1079
         AL    @14,BUG+144                                         1079
         ST    @14,BUG+144                                         1079
*     END; /*END OF CODE IF DATE IN RECORD IS LOW OR EQUAL    @G51DGGB*
@RC01064 DS    0H                                                  1081
*   GETOUT = YES; /*GET OUT OF LOOP AFTER CPU MATCH           @G51DGGB*
@RC01052 OI    GETOUT,B'00000010'                                  1081
*  END; /*END OF CODE FOR A RECORD TO ENTRY CPU MATCH         @G51DGGB*
* END; /*END OF FRAMETAB LOOP                                 @G51DGGB*
@RF01049 LA    @14,1                                               1083
         AL    @14,X                                               1083
         ST    @14,X                                               1083
@DE01048 L     @08,FRAMEPTR(,R2)                                   1083
         C     @14,FRAMENUM(,@08)                                  1083
         BNH   @DL01048                                            1083
@DC01048 DS    0H                                                  1084
* IF GETOUT = NO THEN /*MERIDIAN FRAME BUT NO ROOM IN TABLE   @G51DGGB*
         TM    GETOUT,B'00000010'                                  1084
         BNZ   @RF01084                                            1084
*   BUG(45) = BUG(45) + 1;                                  /*@G51DGGB*
         LA    @14,1                                               1085
         AL    @14,BUG+176                                         1085
         ST    @14,BUG+176                                         1085
* END; /*END OF PROC FRAMEREP                                 @G51DGGB*
@EL00028 DS    0H                                                  1086
@EF00028 DS    0H                                                  1086
@ER00028 LM    @14,@12,@SA00028                                    1086
         BR    @14                                                 1086
* BUILDTTR: PROC; /*SAVE LOCATION OF A FRAME IN LISTLOC       @G51DGGB*
BUILDTTR STM   @14,@12,@SA00029                                    1087
* DCL TEMPSTOR FIXED(31) INIT(0);  /*FOR STORING THE ADDRESS OF CORE*/
* DCL G FIXED(31) INIT(0);                                  /*@G51DGGB*
* RESPECIFY (R15) RESTRICTED;                               /*@G51DGGB*
* IF (LRTKEY1 & GENREC) = HEXA0 THEN /* IF MCH FRAME          @G51DGGB*
         MVC   @TS00001(1),LRTKEY1(R7)                             1091
         NI    @TS00001,X'F0'                                      1091
         CLI   @TS00001,X'A0'                                      1091
         BNE   @RF01091                                            1091
*   DO;                                                     /*@G51DGGB*
*     IF FRAMLOCM(CCHINDX) = ZERO THEN /*IF LISTLOC CORE FOR A CPU*/
         L     @14,CCHINDX                                         1093
         MH    @14,@CH00227                                        1093
         L     @08,FRAMEPTR(,R2)                                   1093
         AL    @08,@CF01576                                        1093
         L     @14,FRAMLOCM-20(@14,@08)                            1093
         LTR   @14,@14                                             1093
         BNZ   @RF01093                                            1093
*       DO;                            /*IS UNALLOCATED       @G51DGGB*
*        RESPECIFY (R0,R1) RESTRICTED;                      /*@G51DGGB*
*         R0 = LISTBENT * LISTMAX * 2; /*ALLOCATE CORE FOR BOTH CCH*/
         LA    R0,500                                              1096
*         R0 = R0 + 12;                /*AND MCH FRAME LOCATIONS   */
         AL    R0,@CF00032                                         1097
*         GEN(GETMAIN EC,LV=(0),A=TEMPSTOR,SP=21);          /*@G51DGGB*
         GETMAIN EC,LV=(0),A=TEMPSTOR,SP=21
*         IF R15 = SUCCESS THEN                                    1099
         LTR   R15,R15                                             1099
         BNZ   @RF01099                                            1099
*           DO;                                             /*@G51DGGB*
*             BUG(42) = BUG(42) + 1;                        /*@G51DGGB*
         LA    @14,1                                               1101
         AL    @14,BUG+164                                         1101
         ST    @14,BUG+164                                         1101
*             R1 = TEMPSTOR;                                /*@G51DGGB*
         L     R1,TEMPSTOR                                         1102
*             FRAMLOCM(CCHINDX) = R1;  /*SET POINTERS TO LISTLOC   */
         L     @14,CCHINDX                                         1103
         MH    @14,@CH00227                                        1103
         L     @08,FRAMEPTR(,R2)                                   1103
         AL    @08,@CF01576                                        1103
         ST    R1,FRAMLOCM-20(@14,@08)                             1103
*             R1 = R1+LISTBENT *       /*TABLES FOR BOTH CCL AND MCH*/
*                 LISTMAX+4;           /*FRAMES               @G51DGGB*
         AL    R1,@CF01552                                         1104
*             R0 = ZERO;          /*ENSURE THAT TABLE ON WORD BOUNDARY*
         SLR   R0,R0                                               1105
*             RESPECIFY (R4) RESTRICTED;                    /*@G51DGGB*
*             R4 = 4;             /*DIVIDE BY NUMBER OF BYTES IN WORD*/
         LA    R4,4                                                1107
*             GEN(DR R0,R4);                                /*@G51DGGB*
         DR R0,R4
*             RESPECIFY (R4) UNRESTRICTED;                  /*@G51DGGB*
*             IF R0 > ZERO THEN /*REMAINDER MEANS NOT INTEGRAL NUMBER*/
         LTR   R0,R0                                               1110
         BNP   @RF01110                                            1110
*                               /*NUMBER OF DOUBLEWORDS.      @G51DGGB*
*               R1 = R1 + 1; /*ADD ONE EXTRA FULL WORD        @G51DGGB*
         AL    R1,@CF00055                                         1111
*             R1 = R1 * FOUR; /*RESET ONE TO NUMBER OF BYTES  @G51DGGB*
@RF01110 SLL   R1,2                                                1112
*             FRAMLOCC(CCHINDX) = R1; /*SET POINTER TO CCH CCHHR TABLE*
         L     @14,CCHINDX                                         1113
         MH    @14,@CH00227                                        1113
         L     @08,FRAMEPTR(,R2)                                   1113
         ST    R1,FRAMLOCC-24(@14,@08)                             1113
*             LISTPTR = R1;      /*ESTABLISH ADDRESSABILITY FOR CCH TB*
         ST    R1,LISTPTR                                          1114
*             LISTNUM = ZERO;    /*ZERO CCH LISTLOC TABLE     @G51DGGB*
         L     @14,LISTPTR                                         1115
         SLR   @08,@08                                             1115
         ST    @08,LISTNUM(,@14)                                   1115
*             DO G = 1 BY 1 TO LISTMAX;                     /*@G51DGGB*
         LA    @14,1                                               1116
         ST    @14,G                                               1116
@DL01116 DS    0H                                                  1117
*               LISTCCHR(G) = LISTCCHR(G) &&                       1117
*                             LISTCCHR(G);                  /*@G51DGGB*
         LR    @08,@14                                             1117
         MH    @08,@CH00079                                        1117
         L     @06,LISTPTR                                         1117
         ALR   @06,@08                                             1117
         BCTR  @06,0                                               1117
         XC    LISTCCHR-4(5,@06),LISTCCHR-4(@06)                   1117
*             END;                                          /*@G51DGGB*
         AL    @14,@CF00055                                        1118
         ST    @14,G                                               1118
         C     @14,@CF00295                                        1118
         BNH   @DL01116                                            1118
*             LISTPTR = FRAMLOCM(CCHINDX); /*ADDRESS OF MCH LISTLOC */
         L     @14,CCHINDX                                         1119
         MH    @14,@CH00227                                        1119
         L     @08,FRAMEPTR(,R2)                                   1119
         AL    @08,@CF01576                                        1119
         L     @14,FRAMLOCM-20(@14,@08)                            1119
         ST    @14,LISTPTR                                         1119
*             DO G = 1 BY 1 TO LISTMAX;   /* ZERO MCH LISTLOC TABLE  */
         LA    @14,1                                               1120
         ST    @14,G                                               1120
@DL01120 DS    0H                                                  1121
*             LISTCCHR(G) = LISTCCHR(G) &&                         1121
*                           LISTCCHR(G);                    /*@G51DGGB*
         LR    @08,@14                                             1121
         MH    @08,@CH00079                                        1121
         L     @06,LISTPTR                                         1121
         ALR   @06,@08                                             1121
         BCTR  @06,0                                               1121
         XC    LISTCCHR-4(5,@06),LISTCCHR-4(@06)                   1121
*             END;                                          /*@G51DGGB*
         AL    @14,@CF00055                                        1122
         ST    @14,G                                               1122
         C     @14,@CF00295                                        1122
         BNH   @DL01120                                            1122
*             LISTNUM = ZERO;                               /*@G51DGGB*
         L     @14,LISTPTR                                         1123
         SLR   @08,@08                                             1123
         ST    @08,LISTNUM(,@14)                                   1123
*           END;                                            /*@G51DGGB*
*         ELSE /*UNSUCCESSFUL GETMAIN                         @G51DGGB*
*           DO;                                             /*@G51DGGB*
         B     @RC01099                                            1125
@RF01099 DS    0H                                                  1126
*             MSGNO = XX;   /*TELL MESSAGE PROC WHICH ERROR MESSAGE*/
         MVI   MSGNO,X'08'                                         1126
*             CALL ERRMSG;  /*GO OBTAIN THE MESSAGE AND PRINTIT*/  1127
         BAL   @14,ERRMSG                                          1127
*             R15 = TWELVE; /*SET ERROR CODE FOR EXIT         @G51DGGB*
         LA    R15,12                                              1128
*             ERROR = R15;                                  /*@G51DGGB*
         ST    R15,ERROR                                           1129
*           END;                                            /*@G51DGGB*
*        RESPECIFY (R0,R1) UNRESTRICTED;                    /*@G51DGGB*
@RC01099 DS    0H                                                  1132
*       END;                                                /*@G51DGGB*
*     IF R15 = ZERO THEN /*IF GETMAIN WAS SUCCESSFUL OR NO GETMAIN*/
@RF01093 LTR   R15,R15                                             1133
         BNZ   @RF01133                                            1133
*       LISTPTR = FRAMLOCM(CCHINDX);/*ESTABLISH LISTLOC ADDRESS   */
         L     @14,CCHINDX                                         1134
         MH    @14,@CH00227                                        1134
         L     @08,FRAMEPTR(,R2)                                   1134
         AL    @08,@CF01576                                        1134
         L     @14,FRAMLOCM-20(@14,@08)                            1134
         ST    @14,LISTPTR                                         1134
*   END;                                                    /*@G51DGGB*
* ELSE /* IS A CCH FRAME                                      @G51DGGB*
*   IF R15 = ZERO THEN                                             1136
         B     @RC01091                                            1136
@RF01091 LTR   R15,R15                                             1136
         BNZ   @RF01136                                            1136
*     LISTPTR = FRAMLOCC(CCHINDX);  /*ESTABLISH CCH LISTLOC ADDRESS*/
         L     @14,CCHINDX                                         1137
         MH    @14,@CH00227                                        1137
         L     @08,FRAMEPTR(,R2)                                   1137
         L     @14,FRAMLOCC-24(@14,@08)                            1137
         ST    @14,LISTPTR                                         1137
* IF R15 = ZERO THEN  /*WAS THE I/O A SUCCESSFUL OPERATION    @G51DGGB*
@RF01136 DS    0H                                                  1138
@RC01091 LTR   R15,R15                                             1138
         BNZ   @RF01138                                            1138
*   DO;                                                     /*@G51DGGB*
*     IF LISTNUM + 1 <= LISTMAX THEN /*IF ROOM IN LISTLOC     @G51DGGB*
         LA    @14,1                                               1140
         L     @08,LISTPTR                                         1140
         AL    @14,LISTNUM(,@08)                                   1140
         C     @14,@CF00295                                        1140
         BH    @RF01140                                            1140
*       DO;                                                 /*@G51DGGB*
*         IF PHIST = ON THEN        /*IF HISTORY INPUT        @G51DGGB*
         TM    PHIST(R2),B'00100000'                               1142
         BNO   @RF01142                                            1142
*           CALL IOHND(RITESCRT);   /*WRITE TO SCRATCH DATA SET*/  1143
         L     @15,ADIOHND(,R2)                                    1143
         LA    @01,@AL01143                                        1143
         BALR  @14,@15                                             1143
*         IF R15 = SUCCESS THEN     /*IF SUCCESSFULL WRITE    @G51DGGB*
@RF01142 LTR   R15,R15                                             1144
         BNZ   @RF01144                                            1144
*           DO;                                             /*@G51DGGB*
*             LISTCCHR(LISTNUM+1) = RECCCHHR;/*SAVE FRAME EXTERNAL LOC*
         L     @14,LISTPTR                                         1146
         L     @08,LISTNUM(,@14)                                   1146
         LR    @06,@08                                             1146
         MH    @06,@CH00079                                        1146
         ALR   @06,@14                                             1146
         MVC   LISTCCHR(5,@06),RECCCHHR(R2)                        1146
*             LISTNUM = LISTNUM + 1; /*INCREMENT NO OF BUILT ENTRIES*/
         LA    @06,1                                               1147
         ALR   @08,@06                                             1147
         ST    @08,LISTNUM(,@14)                                   1147
*             BUG(36) = BUG(36) + 1;                        /*@G51DGGB*
         AL    @06,BUG+140                                         1148
         ST    @06,BUG+140                                         1148
*           END;                                            /*@G51DGGB*
*         ELSE  /*UNSUCCESSFUL WRITE TO SCRATCH D.S.          @G51DGGB*
*           R15 = TWELVE; /*TERMINATE FURTHER PROCESSING      @G51DGGB*
         B     @RC01144                                            1150
@RF01144 LA    R15,12                                              1150
*       END;                                                /*@G51DGGB*
*     ELSE     /*NO ROOM IN LISTLOC                           @G51DGGB*
*       DO;                                                 /*@G51DGGB*
         B     @RC01140                                            1152
@RF01140 DS    0H                                                  1153
*         MSGNO = PP;  /*MORE THAN 50 FRAMES                  @G51DGGB*
         MVI   MSGNO,X'06'                                         1153
*         CALL ERRMSG;                                      /*@G51DGGB*
         BAL   @14,ERRMSG                                          1154
*         R15 = TWELVE;                                     /*@G51DGGB*
         LA    R15,12                                              1155
*         ERROR = R15;                                      /*@G51DGGB*
         ST    R15,ERROR                                           1156
*       END;                                                /*@G51DGGB*
*   END;                                                    /*@G51DGGB*
* RESPECIFY (R0,R1,R15) UNRESTRICTED;                       /*@G51DGGB*
* END; /*END OF BUILDTTR PROC                                 @G51DGGB*
@EL00029 DS    0H                                                  1160
@EF00029 DS    0H                                                  1160
@ER00029 LM    @14,@12,@SA00029                                    1160
         BR    @14                                                 1160
* FIXENTRY: PROC;  /*RESET LISTLOC TABLE TO ZEROS BUT DONT FREE CORE*/
FIXENTRY STM   @14,@12,12(@13)                                     1161
*                  /*RESET DATE,TYPE TO ZEROS                 @G51DGGB*
* FRAMEDT(CCHINDX) = '0000000000000000'X; /*ZERO DATE,TIME    @G51DGGB*
         L     @08,CCHINDX                                         1162
         MH    @08,@CH00227                                        1162
         L     @06,FRAMEPTR(,R2)                                   1162
         ST    @08,@TF00001                                        1162
         ALR   @08,@06                                             1162
         AL    @08,@CF01583                                        1162
         MVC   FRAMEDT-9(8,@08),@CB01463                           1162
* FRAMETYP(CCHINDX) = '00'X; /*RESET TO NO TYPES OF FRAMES STORED*/
         LR    @08,@06                                             1163
         AL    @08,@TF00001                                        1163
         AL    @08,@CF01569                                        1163
         MVI   FRAMETYP-17(@08),X'00'                              1163
* IF FRAMLOCM(CCHINDX) > ZERO THEN /*IF MCH FRAME LOC. TAB. ALLOCATED*/
         L     @08,@TF00001                                        1164
         AL    @06,@CF01576                                        1164
         L     @08,FRAMLOCM-20(@08,@06)                            1164
         LTR   @08,@08                                             1164
         BNP   @RF01164                                            1164
*   DO;                                                     /*@G51DGGB*
*     LISTPTR = FRAMLOCM(CCHINDX); /*SET TABLE BASE ADDRESS   @G51DGGB*
         ST    @08,LISTPTR                                         1166
*     DO T = 1 BY 1 TO LISTNUM; /*CLEAR ALL STORED CCHHRS TO ZERO*/
         LA    @08,1                                               1167
         ST    @08,T                                               1167
         B     @DE01167                                            1167
@DL01167 DS    0H                                                  1168
*       LISTCCHR(T) = (LISTCCHR(T) && LISTCCHR(T));         /*@G51DGGB*
         LR    @06,@08                                             1168
         MH    @06,@CH00079                                        1168
         L     @03,LISTPTR                                         1168
         ALR   @03,@06                                             1168
         BCTR  @03,0                                               1168
         XC    LISTCCHR-4(5,@03),LISTCCHR-4(@03)                   1168
*       BUG(37) = BUG(37) + 1; /*ADD TO COUNT OF REJECTED FRAMES*/ 1169
         LA    @06,1                                               1169
         AL    @06,BUG+144                                         1169
         ST    @06,BUG+144                                         1169
*       BUG(36) = BUG(36) - 1; /*SUBTRACT FROM COUNT OF ACCEPTED FRMES*
         L     @06,BUG+140                                         1170
         BCTR  @06,0                                               1170
         ST    @06,BUG+140                                         1170
*     END;                                                  /*@G51DGGB*
         AL    @08,@CF00055                                        1171
         ST    @08,T                                               1171
@DE01167 L     @06,LISTPTR                                         1171
         C     @08,LISTNUM(,@06)                                   1171
         BNH   @DL01167                                            1171
*     LISTNUM = ZERO; /*SET NUMBER OF STORED CCHHRS TO ZERO   @G51DGGB*
         L     @08,LISTPTR                                         1172
         SLR   @06,@06                                             1172
         ST    @06,LISTNUM(,@08)                                   1172
*    END;                                                   /*@G51DGGB*
* IF FRAMLOCC(CCHINDX) > ZERO THEN /*IF CCH FRAM LOC TABLE ALLOCATED*/
@RF01164 L     @08,CCHINDX                                         1174
         MH    @08,@CH00227                                        1174
         L     @06,FRAMEPTR(,R2)                                   1174
         L     @08,FRAMLOCC-24(@08,@06)                            1174
         LTR   @08,@08                                             1174
         BNP   @RF01174                                            1174
*   DO;                                                     /*@G51DGGB*
*     LISTPTR = FRAMLOCC(CCHINDX); /*SET BASE ADDRESS OF LISTLOC*/ 1176
         ST    @08,LISTPTR                                         1176
*     DO T = 1 BY 1 TO LISTNUM; /*ZERO ALL SAVED CCHHRS       @G51DGGB*
         LA    @08,1                                               1177
         ST    @08,T                                               1177
         B     @DE01177                                            1177
@DL01177 DS    0H                                                  1178
*       LISTCCHR(T) = (LISTCCHR(T) && LISTCCHR(T));         /*@G51DGGB*
         LR    @06,@08                                             1178
         MH    @06,@CH00079                                        1178
         L     @03,LISTPTR                                         1178
         ALR   @03,@06                                             1178
         BCTR  @03,0                                               1178
         XC    LISTCCHR-4(5,@03),LISTCCHR-4(@03)                   1178
*       BUG(37) = BUG(37) + 1; /*ADD TO COUNT OF REJECTED FRAMES*/ 1179
         LA    @06,1                                               1179
         AL    @06,BUG+144                                         1179
         ST    @06,BUG+144                                         1179
*       BUG(36) = BUG(36) - 1; /*SUBTRACT FROM COUNT OF ACCEPTED FRMES*
         L     @06,BUG+140                                         1180
         BCTR  @06,0                                               1180
         ST    @06,BUG+140                                         1180
*     END;                                                  /*@G51DGGB*
         AL    @08,@CF00055                                        1181
         ST    @08,T                                               1181
@DE01177 L     @06,LISTPTR                                         1181
         C     @08,LISTNUM(,@06)                                   1181
         BNH   @DL01177                                            1181
*     LISTNUM = ZERO; /*SET NUMBER OF  CCHHRS SAVED TO ZERO   @G51DGGB*
         L     @08,LISTPTR                                         1182
         SLR   @06,@06                                             1182
         ST    @06,LISTNUM(,@08)                                   1182
*   END;                                                    /*@G51DGGB*
* END;                                                      /*@G51DGGB*
@EL00030 DS    0H                                                  1184
@EF00030 DS    0H                                                  1184
@ER00030 LM    @14,@12,12(@13)                                     1184
         BR    @14                                                 1184
* DEVSEL: PROC;                                             /*@Z427VLS*
DEVSEL   STM   @14,@12,12(@13)                                     1185
* IF WORKTYPE = HEX90 THEN                                         1186
         CLI   WORKTYPE,X'90'                                      1186
         BNE   @RF01186                                            1186
*   DO;                                                     /*@Z427VLS*
*     IF DEVEXCL = ON THEN                                         1188
         TM    DEVEXCL(R2),B'00100000'                             1188
         BNO   @RF01188                                            1188
*       DO;                                                 /*@Z427VLS*
*         DEVOK = YES;                                      /*@Z427VLS*
         OI    DEVOK,B'00100000'                                   1190
*         DO J = 1 BY 1 TO MDRNUM WHILE DEVOK = YES;        /*@Z427VLS*
         LA    @08,1                                               1191
         ST    @08,J                                               1191
         B     @DE01191                                            1191
@DL01191 TM    DEVOK,B'00100000'                                   1191
         BNO   @DC01191                                            1191
*         IF TPRDEV = MDRVAL(J) THEN                               1192
         L     @06,DEVPTR(,R2)                                     1192
         ALR   @06,@08                                             1192
         CLC   TPRDEV(1,R7),MDRVAL-1(@06)                          1192
         BNE   @RF01192                                            1192
*           DO;                                             /*@Z427VLS*
*             DEVOK = NO;                                   /*@Z427VLS*
         NI    DEVOK,B'11011111'                                   1194
*             PASSFLAG = NO;                                /*@Z427VLS*
         NI    PASSFLAG(R2),B'11111110'                            1195
*           END;                                            /*@Z427VLS*
*         END;                                              /*@Z427VLS*
@RF01192 LA    @08,1                                               1197
         AL    @08,J                                               1197
         ST    @08,J                                               1197
@DE01191 L     @06,DEVPTR(,R2)                                     1197
         CH    @08,MDRNUM(,@06)                                    1197
         BNH   @DL01191                                            1197
@DC01191 DS    0H                                                  1198
*       END;                                                /*@Z427VLS*
*     ELSE                                                         1199
*       DO;                                                 /*@Z427VLS*
         B     @RC01188                                            1199
@RF01188 DS    0H                                                  1200
*         DEVOK = NO;                                       /*@Z427VLS*
         NI    DEVOK,B'11011111'                                   1200
*         DO J = 1 BY 1 TO MDRNUM WHILE DEVOK = NO;         /*@Z427VLS*
         LA    @08,1                                               1201
         ST    @08,J                                               1201
         B     @DE01201                                            1201
@DL01201 TM    DEVOK,B'00100000'                                   1201
         BNZ   @DC01201                                            1201
*         IF TPRDEV = MDRVAL(J) THEN                               1202
         L     @06,DEVPTR(,R2)                                     1202
         ALR   @06,@08                                             1202
         CLC   TPRDEV(1,R7),MDRVAL-1(@06)                          1202
         BNE   @RF01202                                            1202
*           DEVOK = YES;                                    /*@Z427VLS*
         OI    DEVOK,B'00100000'                                   1203
*         END;                                              /*@Z427VLS*
@RF01202 LA    @08,1                                               1204
         AL    @08,J                                               1204
         ST    @08,J                                               1204
@DE01201 L     @06,DEVPTR(,R2)                                     1204
         CH    @08,MDRNUM(,@06)                                    1204
         BNH   @DL01201                                            1204
@DC01201 DS    0H                                                  1205
*         IF DEVOK = NO THEN                                       1205
         TM    DEVOK,B'00100000'                                   1205
         BNZ   @RF01205                                            1205
*           PASSFLAG = NO;                                  /*@Z427VLS*
         NI    PASSFLAG(R2),B'11111110'                            1206
*        END;                                               /*@Z427VLS*
*     END;                                                  /*@Z427VLS*
*   ELSE                                                           1209
*     IF DEVEXCL = ON THEN                                         1209
         B     @RC01186                                            1209
@RF01186 TM    DEVEXCL(R2),B'00100000'                             1209
         BNO   @RF01209                                            1209
*       DO;                                                 /*@Z427VLS*
*         DEVOK = YES;                                      /*@Z427VLS*
         OI    DEVOK,B'00100000'                                   1211
*         DO J = 1 BY 1 TO DEVNUM WHILE DEVOK = YES;        /*@Z427VLS*
         LA    @08,1                                               1212
         ST    @08,J                                               1212
         B     @DE01212                                            1212
@DL01212 TM    DEVOK,B'00100000'                                   1212
         BNO   @DC01212                                            1212
*           IF WORKDEV = DEVVAL(J) THEN                            1213
         ALR   @08,@08                                             1213
         L     @06,DEVPTR(,R2)                                     1213
         ALR   @06,@08                                             1213
         CLC   WORKDEV(2),DEVVAL-2(@06)                            1213
         BNE   @RF01213                                            1213
*             DO;                                           /*@Z427VLS*
*               DEVOK = NO;                                 /*@Z427VLS*
         NI    DEVOK,B'11011111'                                   1215
*               PASSFLAG = NO;                              /*@Z427VLS*
         NI    PASSFLAG(R2),B'11111110'                            1216
*             END;                                          /*@Z427VLS*
*         END;                                              /*@Z427VLS*
@RF01213 LA    @08,1                                               1218
         AL    @08,J                                               1218
         ST    @08,J                                               1218
@DE01212 L     @06,DEVPTR(,R2)                                     1218
         CH    @08,DEVNUM(,@06)                                    1218
         BNH   @DL01212                                            1218
@DC01212 DS    0H                                                  1219
*       END;                                                /*@Z427VLS*
*   ELSE                                                           1220
*    DO;                                                    /*@Z427VLS*
         B     @RC01209                                            1220
@RF01209 DS    0H                                                  1221
*      DEVOK = NO;                                          /*@Z427VLS*
         NI    DEVOK,B'11011111'                                   1221
*      DO J =  1 BY 1 TO DEVNUM WHILE DEVOK = NO;           /*@Z427VLS*
         LA    @08,1                                               1222
         ST    @08,J                                               1222
         B     @DE01222                                            1222
@DL01222 TM    DEVOK,B'00100000'                                   1222
         BNZ   @DC01222                                            1222
*        IF WORKDEV = DEVVAL(J) THEN                               1223
         ALR   @08,@08                                             1223
         L     @06,DEVPTR(,R2)                                     1223
         ALR   @06,@08                                             1223
         CLC   WORKDEV(2),DEVVAL-2(@06)                            1223
         BNE   @RF01223                                            1223
*          DEVOK = YES;                                     /*@Z427VLS*
         OI    DEVOK,B'00100000'                                   1224
*      END;                                                 /*@Z427VLS*
@RF01223 LA    @08,1                                               1225
         AL    @08,J                                               1225
         ST    @08,J                                               1225
@DE01222 L     @06,DEVPTR(,R2)                                     1225
         CH    @08,DEVNUM(,@06)                                    1225
         BNH   @DL01222                                            1225
@DC01222 DS    0H                                                  1226
*      IF DEVOK = NO THEN                                          1226
         TM    DEVOK,B'00100000'                                   1226
         BNZ   @RF01226                                            1226
*        PASSFLAG = OFF;                                    /*@Z427VLS*
         NI    PASSFLAG(R2),B'11111110'                            1227
*    END;                                                   /*@Z427VLS*
* END;                                                      /*@Z427VLS*
@EL00031 DS    0H                                                  1229
@EF00031 DS    0H                                                  1229
@ER00031 LM    @14,@12,12(@13)                                     1229
         BR    @14                                                 1229
* ERRMSG: PROC;                                             /*@Z427VLS*
ERRMSG   STM   @14,@12,@SA00032                                    1230
* PRINTADR = ADDR(PRINTLIN);                                /*@Z427VLS*
         LA    @08,PRINTLIN                                        1231
         ST    @08,PRINTADR(,R2)                                   1231
* IF MSGNO = 1 THEN                                                1232
         CLI   MSGNO,1                                             1232
         BNE   @RF01232                                            1232
*  DO;                                                      /*@Z427VLS*
*    CALL IFCMSG(64,ADDR(PRINTBDY));                        /*@Z427VLS*
         LA    @08,PRINTBDY                                        1234
         ST    @08,@AFTEMPS+4                                      1234
         L     @15,ADIFCMSG(,R2)                                   1234
         LA    @01,@AL01234                                        1234
         BALR  @14,@15                                             1234
*    LINTXT1B = USERPGM;                                    /*@Z427VLS*
         MVC   LINTXT1B(8),USERPGM(R2)                             1235
*  END;                                                     /*@Z427VLS*
* IF MSGNO = 2 THEN                                                1237
@RF01232 CLI   MSGNO,2                                             1237
         BNE   @RF01237                                            1237
*   DO;                                                     /*@GZZDGVS*
*     ZEROALL=NO;  /* DONT RESET LOGREC HEADER OF ALL        @XA19728 *
         NI    ZEROALL(R2),B'10111111'                             1239
*                  /* RECORDS NOT PROCESSED                  @XA19728 *
*     CALL IFCMSG(55,ADDR(PRINTBDY));                     /* @Z427VLS *
         LA    @08,PRINTBDY                                        1240
         ST    @08,@AFTEMPS+4                                      1240
         L     @15,ADIFCMSG(,R2)                                   1240
         LA    @01,@AL01240                                        1240
         BALR  @14,@15                                             1240
*   END;                                                    /*@GZZDGVS*
* IF MSGNO = 3 THEN                                                1242
@RF01237 CLI   MSGNO,3                                             1242
         BNE   @RF01242                                            1242
*  CALL IFCMSG(53,ADDR(PRINTBDY));                          /*@Z427VLS*
         LA    @08,PRINTBDY                                        1243
         ST    @08,@AFTEMPS+4                                      1243
         L     @15,ADIFCMSG(,R2)                                   1243
         LA    @01,@AL01243                                        1243
         BALR  @14,@15                                             1243
* NOMESAGE = OFF;           /*SET TO NORMALLY PRINT THE MESSAGE*/  1244
@RF01242 NI    NOMESAGE,B'11110111'                                1244
*  IF MSGNO = QQ1 THEN      /*SCREW UP IN THE INCOMING FRAME #S*/  1245
         CLI   MSGNO,10                                            1245
         BNE   @RF01245                                            1245
*   DO;                                                     /*@G51DGGB*
*   IF DEBUG16 = ON THEN    /*WAS THE USER INTRESTED IN THE RESULT*/
         TM    DEBUG16(R2),B'10000000'                             1247
         BNO   @RF01247                                            1247
*    CALL FRAMDROP;                                         /*@G51DGGB*
         BAL   @14,FRAMDROP                                        1248
*   ELSE                                                           1249
*   NOMESAGE = ON;                                          /*@G51DGGB*
         B     @RC01247                                            1249
@RF01247 OI    NOMESAGE,B'00001000'                                1249
*   END;                                                    /*@G51DGGB*
@RC01247 DS    0H                                                  1251
*  IF MSGNO = QQ  THEN                                             1251
@RF01245 CLI   MSGNO,7                                             1251
         BNE   @RF01251                                            1251
*   DO;                                                     /*@G51DGGB*
*   CALL IFCMSG(78,ADDR(PRINTBDY));                         /*@G51DGGB*
         LA    @08,PRINTBDY                                        1253
         ST    @08,@AFTEMPS+4                                      1253
         L     @15,ADIFCMSG(,R2)                                   1253
         LA    @01,@AL01253                                        1253
         BALR  @14,@15                                             1253
*    NUMBER = 3;                                            /*@G51DGGB*
         MVC   NUMBER(4),@CF00076                                  1254
*    ADDNXT = ADDR(PFRAMSER);  /*WHERE TO PUT THE CONVERTED BYTES*/
         LA    @08,PFRAMSER                                        1255
         ST    @08,ADDNXT                                          1255
*    NEXTBY = ADDR(FRAMESER(CCHINDX)); /*WHERE TO GET THE BYTES FROM*/
         L     @08,CCHINDX                                         1256
         MH    @08,@CH00227                                        1256
         L     @06,FRAMEPTR(,R2)                                   1256
         AL    @06,@CF01567                                        1256
         LA    @08,FRAMESER-4(@08,@06)                             1256
         ST    @08,NEXTBY                                          1256
*    CALL CONVERT;                                          /*@G51DGGB*
         BAL   @14,CONVERT                                         1257
*    NUMBER = 2;                                            /*@G51DGGB*
         MVC   NUMBER(4),@CF00074                                  1258
*    ADDNXT = ADDR(PFRAMMOD);  /*DISPLACEMENT FOR THE MODEL   @G51DGGB*
         LA    @08,PFRAMMOD                                        1259
         ST    @08,ADDNXT                                          1259
*    NEXTBY = ADDR(FRAMEMOD(CCHINDX)); /*LOCATION OF MODEL    @G51DGGB*
         L     @08,CCHINDX                                         1260
         MH    @08,@CH00227                                        1260
         L     @06,FRAMEPTR(,R2)                                   1260
         AL    @06,@CF01586                                        1260
         LA    @08,FRAMEMOD-7(@08,@06)                             1260
         ST    @08,NEXTBY                                          1260
*    CALL CONVERT;                                          /*@G51DGGB*
         BAL   @14,CONVERT                                         1261
*   END;                                                    /*@G51DGGB*
*  IF MSGNO = ZZ THEN                                              1263
@RF01251 CLI   MSGNO,4                                             1263
         BNE   @RF01263                                            1263
*   CALL IFCMSG(40,ADDR(PRINTBDY));                         /*@G51DGGB*
         LA    @08,PRINTBDY                                        1264
         ST    @08,@AFTEMPS+4                                      1264
         L     @15,ADIFCMSG(,R2)                                   1264
         LA    @01,@AL01264                                        1264
         BALR  @14,@15                                             1264
*  IF MSGNO = PP THEN                                              1265
@RF01263 CLI   MSGNO,6                                             1265
         BNE   @RF01265                                            1265
*   CALL IFCMSG(5,ADDR(PRINTBDY));                          /*@G51DGGB*
         LA    @08,PRINTBDY                                        1266
         ST    @08,@AFTEMPS+4                                      1266
         L     @15,ADIFCMSG(,R2)                                   1266
         LA    @01,@AL01266                                        1266
         BALR  @14,@15                                             1266
*  IF MSGNO = XX THEN                                              1267
@RF01265 CLI   MSGNO,8                                             1267
         BNE   @RF01267                                            1267
*   CALL IFCMSG(40,ADDR(PRINTBDY));                         /*@G51DGGB*
         LA    @08,PRINTBDY                                        1268
         ST    @08,@AFTEMPS+4                                      1268
         L     @15,ADIFCMSG(,R2)                                   1268
         LA    @01,@AL01268                                        1268
         BALR  @14,@15                                             1268
* IF MSGNO = YY THEN                                               1269
@RF01267 CLI   MSGNO,5                                             1269
         BNE   @RF01269                                            1269
*   CALL IFCMSG(24,ADDR(PRINTBDY));                         /*@G51DGGB*
         LA    @08,PRINTBDY                                        1270
         ST    @08,@AFTEMPS+4                                      1270
         L     @15,ADIFCMSG(,R2)                                   1270
         LA    @01,@AL01270                                        1270
         BALR  @14,@15                                             1270
* IF MSGNO = RR THEN                                               1271
@RF01269 CLI   MSGNO,9                                             1271
         BNE   @RF01271                                            1271
*   CALL IFCMSG(5,ADDR(PRINTBDY));                          /*@G51DGGB*
         LA    @08,PRINTBDY                                        1272
         ST    @08,@AFTEMPS+4                                      1272
         L     @15,ADIFCMSG(,R2)                                   1272
         LA    @01,@AL01272                                        1272
         BALR  @14,@15                                             1272
*  IF NOMESAGE = OFF THEN                                          1273
@RF01271 TM    NOMESAGE,B'00001000'                                1273
         BNZ   @RF01273                                            1273
* CALL IOHND(RITEPRTR);                                     /*@Z427VLS*
         L     @15,ADIOHND(,R2)                                    1274
         LA    @01,@AL01274                                        1274
         BALR  @14,@15                                             1274
* END;                                                      /*@Z427VLS*
@EL00032 DS    0H                                                  1275
@EF00032 DS    0H                                                  1275
@ER00032 LM    @14,@12,@SA00032                                    1275
         BR    @14                                                 1275
* /*******************************************************************/
* /*   IF A DEVICE OR CONTROL UNIT IS SHARED ACROSS MULTIPLE SYSTEMS,*/
* /*   AND THE USER WANTS ALL ERRORS WHICH RELATE TO ONE PHYSICAL    */
* /*   LOCATION SUMMED TOGETHER, THEN THE CUA IN THE SORT TABLE MAY  */
* /*   HAVE TO BE CONVERTED TO A BASE CUA.                    @Z427VLS*
* /*******************************************************************/
* SHARCONV: PROC;                                           /*@Z427VLS*
SHARCONV STM   @14,@12,12(@13)                                     1276
*       SHAREYES = NO;                                      /*@Z427VLS*
         NI    SHAREYES,B'11110111'                                1277
*       DO J = 1 BY 1 TO SHARENUM WHILE SHAREYES = NO;      /*@Z427VLS*
         LA    @08,1                                               1278
         ST    @08,J                                               1278
         B     @DE01278                                            1278
@DL01278 TM    SHAREYES,B'00001000'                                1278
         BNZ   @DC01278                                            1278
*        IF SHAREFLG(J)=LETTERS&LRTCPUS=SHARSERA(J) THEN           1279
         SLA   @08,4                                               1279
         L     @06,SHAREPTR(,R2)                                   1279
         ST    @08,@TF00001                                        1279
         ALR   @08,@06                                             1279
         AL    @08,@CF01587                                        1279
         CLC   SHAREFLG-2(1,@08),LETTERS                           1279
         BNE   @RF01279                                            1279
         LR    @08,@06                                             1279
         AL    @08,@TF00001                                        1279
         AL    @08,@CF01564                                        1279
         CLC   LRTCPUS(3,R7),SHARSERA-10(@08)                      1279
         BNE   @RF01279                                            1279
*           DO;                                             /*@Z427VLS*
*          IF WORKMOD>=SHRCUAAL(J)&WORKMOD<=SHRCUAAH(J) THEN       1281
         LR    @08,@06                                             1281
         AL    @08,@TF00001                                        1281
         AL    @08,@CF01572                                        1281
         CLC   WORKMOD(2),SHRCUAAL-13(@08)                         1281
         BL    @RF01281                                            1281
         LR    @08,@06                                             1281
         AL    @08,@TF00001                                        1281
         BCTR  @08,0                                               1281
         CLC   WORKMOD(2),SHRCUAAH-15(@08)                         1281
         BH    @RF01281                                            1281
*            DO;                                            /*@D3506GB*
*              WORKMOD=SHRCUABL(J)+WORKMOD-SHRCUAAL(J);     /*@D3506GB*
         LR    @08,@06                                             1283
         AL    @08,@TF00001                                        1283
         AL    @08,@CF01575                                        1283
         SLR   @03,@03                                             1283
         ICM   @03,3,SHRCUABL-6(@08)                               1283
         SLR   @08,@08                                             1283
         ICM   @08,3,WORKMOD                                       1283
         ALR   @03,@08                                             1283
         LR    @08,@06                                             1283
         AL    @08,@TF00001                                        1283
         AL    @08,@CF01572                                        1283
         SLR   @15,@15                                             1283
         ICM   @15,3,SHRCUAAL-13(@08)                              1283
         SLR   @03,@15                                             1283
         STCM  @03,3,WORKMOD                                       1283
*              RECCPU=SHARSERB(J);      /*SAVE CONVERTED CPU ID    1284
         AL    @06,@TF00001                                        1284
         AL    @06,@CF01588                                        1284
         MVC   RECCPU(3),SHARSERB-3(@06)                           1284
*              SHAREYES=ON;                                 /*@D3506GB*
         OI    SHAREYES,B'00001000'                                1285
*            END;                                           /*@D3506GB*
*          ELSE;                                            /*@D3506GB*
@RF01281 DS    0H                                                  1288
*           END;                                            /*@Z427VLS*
*        END;                                               /*@Z427VLS*
@RF01279 LA    @08,1                                               1289
         AL    @08,J                                               1289
         ST    @08,J                                               1289
@DE01278 L     @06,SHAREPTR(,R2)                                   1289
         CH    @08,SHARENUM(,@06)                                  1289
         BNH   @DL01278                                            1289
@DC01278 DS    0H                                                  1290
* END; /*CLOSING END TO SHARCONV                              @Z427VLS*
@EL00033 DS    0H                                                  1290
@EF00033 DS    0H                                                  1290
@ER00033 LM    @14,@12,12(@13)                                     1290
         BR    @14                                                 1290
* /* IF A CONTROL UNIT IS SHARED BY MORE THAN ONE DEVICE AND THE USER
* /* WANTS ALL ERRORS WHICH RELATE TO ONE CONTROL UNIT SUMMED TOGETHER
* /* THEN THE CUA IN THE SORT TABLE MUST BE CONVERTED TO A BASE CUA.
* CNTRCONV: PROC;                                           /*@D3506GB*
CNTRCONV STM   @14,@12,12(@13)                                     1291
*    SHAREYES=NO;                                           /*@D3506GB*
         NI    SHAREYES,B'11110111'                                1292
*    IF SHAREPTR ^= 0 THEN                                         1293
         L     @08,SHAREPTR(,R2)                                   1293
         LTR   @08,@08                                             1293
         BZ    @RF01293                                            1293
*     DO J=1 BY 1 TO SHARENUM WHILE SHAREYES=NO;            /*@D3506GB*
         LA    @08,1                                               1294
         ST    @08,J                                               1294
         B     @DE01294                                            1294
@DL01294 TM    SHAREYES,B'00001000'                                1294
         BNZ   @DC01294                                            1294
*      IF SHAREFLG(J)=LETTERC&RECCPU=SHARSERB(J)&WORKMOD>=SHRCUABL(J)&
*        WORKMOD<=SHRCUABH(J) THEN                                 1295
         SLA   @08,4                                               1295
         L     @06,SHAREPTR(,R2)                                   1295
         ST    @08,@TF00001                                        1295
         ALR   @08,@06                                             1295
         AL    @08,@CF01587                                        1295
         CLC   SHAREFLG-2(1,@08),LETTERC                           1295
         BNE   @RF01295                                            1295
         LR    @08,@06                                             1295
         AL    @08,@TF00001                                        1295
         AL    @08,@CF01588                                        1295
         CLC   RECCPU(3),SHARSERB-3(@08)                           1295
         BNE   @RF01295                                            1295
         LR    @08,@06                                             1295
         AL    @08,@TF00001                                        1295
         AL    @08,@CF01575                                        1295
         CLC   WORKMOD(2),SHRCUABL-6(@08)                          1295
         BL    @RF01295                                            1295
         LR    @08,@06                                             1295
         AL    @08,@TF00001                                        1295
         AL    @08,@CF01589                                        1295
         CLC   WORKMOD(2),SHRCUABH-8(@08)                          1295
         BH    @RF01295                                            1295
*        DO;                                                /*@D3506GB*
*          WORKMOD=SHRCUABL(J);          /*CONVERT TO CONTROLLER CUA
         AL    @06,@TF00001                                        1297
         AL    @06,@CF01575                                        1297
         MVC   WORKMOD(2),SHRCUABL-6(@06)                          1297
*          SHAREYES=ON;                                     /*@D3506GB*
         OI    SHAREYES,B'00001000'                                1298
*        END;                                               /*@D3506GB*
*      ELSE;                            /* MATCH NOT FOUND    @D3506GB*
@RF01295 DS    0H                                                  1301
*     END;                                                  /*@D3506GB*
         LA    @08,1                                               1301
         AL    @08,J                                               1301
         ST    @08,J                                               1301
@DE01294 L     @06,SHAREPTR(,R2)                                   1301
         CH    @08,SHARENUM(,@06)                                  1301
         BNH   @DL01294                                            1301
@DC01294 DS    0H                                                  1302
*    IF SHAREYES=NO THEN                /*CONTROLLER ENTRY NOT FOUND
@RF01293 TM    SHAREYES,B'00001000'                                1302
         BNZ   @RF01302                                            1302
*      WORKMOD=WORKMOD&NOUNIT2;         /*RANGE IS 0 - F      @D3506GB*
         NC    WORKMOD(2),@CB01036                                 1303
*    ELSE;                              /*CONVERSION ALREADY DONE  1304
@RF01302 DS    0H                                                  1305
* END CNTRCONV;                                             /*@D3506GB*
@EL00034 DS    0H                                                  1305
@EF00034 DS    0H                                                  1305
@ER00034 LM    @14,@12,12(@13)                                     1305
         BR    @14                                                 1305
* LIBSEL: PROC;                                             /*@Z427VLS*
LIBSEL   STM   @14,@12,12(@13)                                     1306
* /*SELECT MDR RECORDS BY LINE INTERFACE BASE ADDRESS IF IT IS*/   1307
* /*APPLICABLE.                                               @Z427VLS*
* IF TPRMODE = LINSTAT0 × TPRMODE = LINSTAT1 THEN                  1307
         CLI   TPRMODE(R7),X'00'                                   1307
         BE    @RT01307                                            1307
         CLI   TPRMODE(R7),X'01'                                   1307
         BNE   @RF01307                                            1307
@RT01307 DS    0H                                                  1308
*   DO;                                                     /*@Z427VLS*
*     LIBOK = NO;                                           /*@Z427VLS*
         NI    LIBOK,B'11110111'                                   1309
*     DO J = 1 BY 1 TO LIBADNUM WHILE LIBOK = NO;           /*@Z427VLS*
         LA    @08,1                                               1310
         ST    @08,J                                               1310
         B     @DE01310                                            1310
@DL01310 TM    LIBOK,B'00001000'                                   1310
         BNZ   @DC01310                                            1310
*       IF LIBVAL(J) = TPRLINAD THEN LIBOK = YES;           /*@Z427VLS*
         ALR   @08,@08                                             1311
         L     @06,LIBADPTR(,R2)                                   1311
         ALR   @06,@08                                             1311
         CLC   LIBVAL-2(2,@06),TPRLINAD(R7)                        1311
         BNE   @RF01311                                            1311
         OI    LIBOK,B'00001000'                                   1312
*     END;                                                  /*@Z427VLS*
@RF01311 LA    @08,1                                               1313
         AL    @08,J                                               1313
         ST    @08,J                                               1313
@DE01310 L     @06,LIBADPTR(,R2)                                   1313
         CH    @08,LIBADNUM(,@06)                                  1313
         BNH   @DL01310                                            1313
@DC01310 DS    0H                                                  1314
*     IF LIBOK = NO THEN                                           1314
         TM    LIBOK,B'00001000'                                   1314
         BNZ   @RF01314                                            1314
*       PASSFLAG = NO;                                      /*@Z427VLS*
         NI    PASSFLAG(R2),B'11111110'                            1315
*   END;                                                    /*@Z427VLS*
* ELSE                                                             1317
*   PASSFLAG = NO;                                          /*@Z427VLS*
         B     @RC01307                                            1317
@RF01307 NI    PASSFLAG(R2),B'11111110'                            1317
* END;                                                      /*@Z427VLS*
@EL00035 DS    0H                                                  1318
@EF00035 DS    0H                                                  1318
@ER00035 LM    @14,@12,12(@13)                                     1318
         BR    @14                                                 1318
* BUGCNTS: PROC;                                            /*@Z427VLS*
BUGCNTS  STM   @14,@12,@SA00036                                    1319
* /*PRINT OUT COUNTS OF RECORDS PROCESSED IF DEBUG16 IS ON    @Z427VLS*
* PRINTADR = ADDR(PRINTLIN); /*ADDRESS OF PRINT LINE          @Z427VLS*
         LA    @08,PRINTLIN                                        1320
         ST    @08,PRINTADR(,R2)                                   1320
* J = 46;                                                   /*@G51DGGB*
         LA    @08,46                                              1321
         ST    @08,J                                               1321
* PRINTLIN = ERRLINE(J);/*THIS WILL MAKE IT COMPUTE THE CORRECT ADDR*/
         MVI   PRINTLIN+63,C' '                                    1322
         MVC   PRINTLIN+64(70),PRINTLIN+63                         1322
         MH    @08,@CH01554                                        1322
         LA    @06,ERRLINE-63(@08)                                 1322
         MVC   PRINTLIN(63),0(@06)                                 1322
* IF FRAMEPTR ^= 0 THEN                                            1323
         L     @08,FRAMEPTR(,R2)                                   1323
         LTR   @08,@08                                             1323
         BZ    @RF01323                                            1323
*  BUG(43) = FRAMENUM;                                      /*@G51DGGB*
         L     @08,FRAMENUM(,@08)                                  1324
         ST    @08,BUG+168                                         1324
* BUG(37) = BUG(37) + BUG(45);                              /*@G51DGGB*
@RF01323 L     @08,BUG+144                                         1325
         AL    @08,BUG+176                                         1325
         ST    @08,BUG+144                                         1325
* CALL IOHND(RITEPRTR);                                     /*@Z427VLS*
*                                                                  1326
         L     @15,ADIOHND(,R2)                                    1326
         LA    @01,@AL01326                                        1326
         BALR  @14,@15                                             1326
* DO J = 1 BY 1 TO 45;                                      /*@G51DGGB*
         LA    @08,1                                               1327
         ST    @08,J                                               1327
@DL01327 DS    0H                                                  1328
*   NUMREC = BUG(J);                                        /*@Z427VLS*
         SLA   @08,2                                               1328
         L     @08,BUG-4(@08)                                      1328
         ST    @08,NUMREC                                          1328
*   CVD(NUMREC,PACKPAS);                                    /*@Z427VLS*
         CVD   @08,@TS00001                                        1329
         MVC   PACKPAS(4),@TS00001+4                               1329
*   PACKPAS = (PACKPAS × '0000000F'X);                      /*@Z427VLS*
         OC    PACKPAS(4),@CB01501                                 1330
*   UNPK(EDFLD,PACKPAS);                                    /*@Z427VLS*
         UNPK  EDFLD(9),PACKPAS(4)                                 1331
*   NONBLANK = OFF;                                         /*@Z427VLS*
         NI    NONBLANK,B'01111111'                                1332
*   DO K = 1 BY 1 TO 8 WHILE NONBLANK = OFF;                /*@Z427VLS*
         LA    @08,1                                               1333
         ST    @08,K                                               1333
@DL01333 TM    NONBLANK,B'10000000'                                1333
         BNZ   @DC01333                                            1333
*     IF EDIFILD(K) = CHARZERO THEN                                1334
         LA    @06,EDIFILD-1(@08)                                  1334
         CLI   0(@06),X'F0'                                        1334
         BNE   @RF01334                                            1334
*       EDIFILD(K) = BLANK;                                 /*@Z427VLS*
         LA    @06,EDIFILD-1(@08)                                  1335
         MVI   0(@06),X'40'                                        1335
*     ELSE                                                         1336
*       NONBLANK = ON;                                      /*@Z427VLS*
         B     @RC01334                                            1336
@RF01334 OI    NONBLANK,B'10000000'                                1336
*   END;                                                    /*@Z427VLS*
@RC01334 LA    @08,1                                               1337
         AL    @08,K                                               1337
         ST    @08,K                                               1337
         C     @08,@CF00066                                        1337
         BNH   @DL01333                                            1337
@DC01333 DS    0H                                                  1338
*   ERXNUM(J) = EDFLD;                                      /*@Z427VLS*
         L     @08,J                                               1338
         MH    @08,@CH01554                                        1338
         LA    @06,ERXNUM-63(@08)                                  1338
         MVC   0(9,@06),EDFLD                                      1338
*   PRINTLIN = ERRLINE(J);                                  /*@Z427VLS*
         MVI   PRINTLIN+63,C' '                                    1339
         MVC   PRINTLIN+64(70),PRINTLIN+63                         1339
         LA    @06,ERRLINE-63(@08)                                 1339
         MVC   PRINTLIN(63),0(@06)                                 1339
*   PRINTADR = ADDR(PRINTLIN);                              /*@Z427VLS*
         LA    @08,PRINTLIN                                        1340
         ST    @08,PRINTADR(,R2)                                   1340
*   CALL IOHND(RITEPRTR);                                   /*@Z427VLS*
         L     @15,ADIOHND(,R2)                                    1341
         LA    @01,@AL01341                                        1341
         BALR  @14,@15                                             1341
*  END;                                                     /*@Z427VLS*
         LA    @08,1                                               1342
         AL    @08,J                                               1342
         ST    @08,J                                               1342
         C     @08,@CF01466                                        1342
         BNH   @DL01327                                            1342
* END; /*CLOSING END TO PROC BUGCNTS                          @Z427VLS*
@EL00036 DS    0H                                                  1343
@EF00036 DS    0H                                                  1343
@ER00036 LM    @14,@12,@SA00036                                    1343
         BR    @14                                                 1343
* FRAMDROP: PROC;                                           /*@G51DGGB*
FRAMDROP STM   @14,@12,@SA00037                                    1344
*   PRINTBDY = ERR7816;                                     /*@G51DGGB*
         MVI   PRINTBDY+18,C' '                                    1345
         MVC   PRINTBDY+19(113),PRINTBDY+18                        1345
         MVC   PRINTBDY(18),ERR7816                                1345
*   TYPERROR= INCOMP;                                       /*@G51DGGB*
         MVC   TYPERROR(10),INCOMP                                 1346
*    NUMBER = 3;                                            /*@G51DGGB*
         MVC   NUMBER(4),@CF00076                                  1347
*    ADDNXT = ADDR(ZFRAMSER);  /*WHERE TO PUT THE CONVERTED BYTES*/
         LA    @08,ZFRAMSER                                        1348
         ST    @08,ADDNXT                                          1348
*    NEXTBY = ADDR(FRAMESER(CCHINDX)); /*WHERE TO GET THE BYTES FROM*/
         L     @08,CCHINDX                                         1349
         MH    @08,@CH00227                                        1349
         L     @06,FRAMEPTR(,R2)                                   1349
         AL    @06,@CF01567                                        1349
         LA    @08,FRAMESER-4(@08,@06)                             1349
         ST    @08,NEXTBY                                          1349
*    CALL CONVERT;                                          /*@G51DGGB*
         BAL   @14,CONVERT                                         1350
*    NUMBER = 2;                                            /*@G51DGGB*
         MVC   NUMBER(4),@CF00074                                  1351
*    ADDNXT = ADDR(ZFRAMMOD);  /*DISPLACEMENT FOR THE MODEL   @G51DGGB*
         LA    @08,ZFRAMMOD                                        1352
         ST    @08,ADDNXT                                          1352
*    NEXTBY = ADDR(FRAMEMOD(CCHINDX)); /*LOCATION OF MODEL    @G51DGGB*
         L     @08,CCHINDX                                         1353
         MH    @08,@CH00227                                        1353
         L     @06,FRAMEPTR(,R2)                                   1353
         AL    @06,@CF01586                                        1353
         LA    @08,FRAMEMOD-7(@08,@06)                             1353
         ST    @08,NEXTBY                                          1353
*    CALL CONVERT;                                          /*@G51DGGB*
         BAL   @14,CONVERT                                         1354
*    NUMBER = 14;                                           /*@G51DGGB*
         MVC   NUMBER(4),@CF01393                                  1355
*    NEXTBY = ADDR(FRAMEKEY(CCHINDX));                      /*@G51DGGB*
         L     @08,CCHINDX                                         1356
         MH    @08,@CH00227                                        1356
         L     @06,FRAMEPTR(,R2)                                   1356
         AL    @06,@CF01567                                        1356
         LA    @08,FRAMEKEY-4(@08,@06)                             1356
         ST    @08,NEXTBY                                          1356
*    ADDNXT = ADDR(ZFRAMKEY);                               /*@G51DGGB*
         LA    @08,ZFRAMKEY                                        1357
         ST    @08,ADDNXT                                          1357
*    CALL CONVERT;                                          /*@G51DGGB*
         BAL   @14,CONVERT                                         1358
* END;                                                      /*@G51DGGB*
@EL00037 DS    0H                                                  1359
@EF00037 DS    0H                                                  1359
@ER00037 LM    @14,@12,@SA00037                                    1359
         BR    @14                                                 1359
* FRAMMORE: PROC;                                           /*@G51DGGB*
FRAMMORE STM   @14,@12,@SA00038                                    1360
*   CALL FRAMDROP;                                          /*@G51DGGB*
         BAL   @14,FRAMDROP                                        1361
*   CALL FIXENTRY;                                          /*@G51DGGB*
         BAL   @14,FIXENTRY                                        1362
*   FRAMEDT(CCHINDX) = LRTDT;           /*SAVE HIGH DATE      @G51DGGB*
         L     @08,CCHINDX                                         1363
         MH    @08,@CH00227                                        1363
         L     @06,FRAMEPTR(,R2)                                   1363
         ST    @08,@TF00001                                        1363
         ALR   @08,@06                                             1363
         AL    @08,@CF01583                                        1363
         MVC   FRAMEDT-9(8,@08),LRTDT(R7)                          1363
*   TYPERROR= REPLACED;                                     /*@G51DGGB*
         MVI   TYPERROR+8,C' '                                     1364
         MVI   TYPERROR+9,C' '                                     1364
         MVC   TYPERROR(8),REPLACED                                1364
*    NUMBER = 3;                                            /*@G51DGGB*
         MVC   NUMBER(4),@CF00076                                  1365
*    ADDNXT = ADDR(YFRAMSER);  /*WHERE TO PUT THE CONVERTED BYTES*/
         LA    @08,YFRAMSER                                        1366
         ST    @08,ADDNXT                                          1366
*    NEXTBY = ADDR(FRAMESER(CCHINDX)); /*WHERE TO GET THE BYTES FROM*/
         L     @08,@TF00001                                        1367
         AL    @06,@CF01567                                        1367
         LA    @08,FRAMESER-4(@08,@06)                             1367
         ST    @08,NEXTBY                                          1367
*    CALL CONVERT;                                          /*@G51DGGB*
         BAL   @14,CONVERT                                         1368
*    NUMBER = 2;                                            /*@G51DGGB*
         MVC   NUMBER(4),@CF00074                                  1369
*    ADDNXT = ADDR(YFRAMMOD);  /*DISPLACEMENT FOR THE MODEL   @G51DGGB*
         LA    @08,YFRAMMOD                                        1370
         ST    @08,ADDNXT                                          1370
*    NEXTBY = ADDR(FRAMEMOD(CCHINDX)); /*LOCATION OF MODEL    @G51DGGB*
         L     @08,CCHINDX                                         1371
         MH    @08,@CH00227                                        1371
         L     @06,FRAMEPTR(,R2)                                   1371
         AL    @06,@CF01586                                        1371
         LA    @08,FRAMEMOD-7(@08,@06)                             1371
         ST    @08,NEXTBY                                          1371
*    CALL CONVERT;                                          /*@G51DGGB*
         BAL   @14,CONVERT                                         1372
*    NUMBER = 14;                                           /*@G51DGGB*
         MVC   NUMBER(4),@CF01393                                  1373
*    NEXTBY = ADDR(FRAMEKEY(CCHINDX));                      /*@G51DGGB*
         L     @08,CCHINDX                                         1374
         MH    @08,@CH00227                                        1374
         L     @06,FRAMEPTR(,R2)                                   1374
         AL    @06,@CF01567                                        1374
         LA    @08,FRAMEKEY-4(@08,@06)                             1374
         ST    @08,NEXTBY                                          1374
*    ADDNXT = ADDR(YFRAMKEY);                               /*@G51DGGB*
         LA    @08,YFRAMKEY                                        1375
         ST    @08,ADDNXT                                          1375
*    CALL CONVERT;                                          /*@G51DGGB*
         BAL   @14,CONVERT                                         1376
*    CALL PRINTIT;                                          /*@G51DGGB*
         BAL   @14,PRINTIT                                         1377
* END;                                                      /*@G51DGGB*
@EL00038 DS    0H                                                  1378
@EF00038 DS    0H                                                  1378
@ER00038 LM    @14,@12,@SA00038                                    1378
         BR    @14                                                 1378
* /*  PROC TO CONVERT TO PRINTABLE FOR ALL ROUTINES           @G51DGGB*
* CONVERT: PROC;                                            /*@G51DGGB*
CONVERT  STM   @14,@12,12(@13)                                     1379
* RESPECIFY (R4,R5) RESTRICTED;                             /*@G51DGGB*
*     DO J = NUMBER   BY -1 TO ONE;                         /*@G51DGGB*
         L     @08,NUMBER                                          1381
         ST    @08,J                                               1381
         B     @DE01381                                            1381
@DL01381 DS    0H                                                  1382
*       R4 = NEXTBYTE(J);                                   /*@G51DGGB*
         L     @06,NEXTBY                                          1382
         BCTR  @06,0                                               1382
         SLR   R4,R4                                               1382
         IC    R4,NEXTBYTE(@08,@06)                                1382
*       T = TWO*J;                                          /*@G51DGGB*
         LR    @06,@08                                             1383
         ALR   @06,@06                                             1383
         ST    @06,T                                               1383
*       SRDL (R4,FOUR);                                     /*@G51DGGB*
         SRDL  R4,4                                                1384
*       SRL  (R5,28);                                       /*@G51DGGB*
         SRL   R5,28                                               1385
*       ADDNUM(T-ONE) = CHAR1(R4+1);                        /*@G51DGGB*
         L     @03,ADDNXT                                          1386
         ALR   @06,@03                                             1386
         BCTR  @06,0                                               1386
         BCTR  @06,0                                               1386
         LA    @01,CHAR1(R4)                                       1386
         MVC   ADDNUM(1,@06),0(@01)                                1386
*       ADDNUM(T)     = CHAR1(R5+1);                        /*@G51DGGB*
         L     @06,T                                               1387
         ALR   @03,@06                                             1387
         BCTR  @03,0                                               1387
         LA    @06,CHAR1(R5)                                       1387
         MVC   ADDNUM(1,@03),0(@06)                                1387
*     END;                                                  /*@G51DGGB*
         BCTR  @08,0                                               1388
         ST    @08,J                                               1388
@DE01381 LTR   @08,@08                                             1388
         BP    @DL01381                                            1388
* RESPECIFY (R4,R5) UNRESTRICTED;                           /*@G51DGGB*
*  END;                                                     /*@G51DGGB*
@EL00039 DS    0H                                                  1390
@EF00039 DS    0H                                                  1390
@ER00039 LM    @14,@12,12(@13)                                     1390
         BR    @14                                                 1390
* HEXDUMP: PROC;                                            /*@G51DGGB*
HEXDUMP  STM   @14,@12,@SA00040                                    1391
*  DCL ITEM1 FIXED(31) INIT(0);                             /*@G51DGGB*
*  NUMBER = 66;                                             /*@G51DGGB*
         LA    @08,66                                              1393
         ST    @08,NUMBER                                          1393
*  ADDNXT = ADDR(PRINTBDY);                                 /*@G51DGGB*
         LA    @06,PRINTBDY                                        1394
         ST    @06,ADDNXT                                          1394
*  NEXTBY = R7;                                             /*@G51DGGB*
         ST    R7,NEXTBY                                           1395
* DO ITEM1 = 66 BY 66 TO RECLNGTH;                          /*@G51DGGB*
         ST    @08,ITEM1                                           1396
         B     @DE01396                                            1396
@DL01396 DS    0H                                                  1397
*  NEXTBY = NEXTBY + 66;                                    /*@G51DGGB*
         LA    @08,66                                              1397
         AL    @08,NEXTBY                                          1397
         ST    @08,NEXTBY                                          1397
*  CALL PRINTIT;                                            /*@G51DGGB*
         BAL   @14,PRINTIT                                         1398
* END;                                                      /*@G51DGGB*
         LA    @08,66                                              1399
         AL    @08,ITEM1                                           1399
         ST    @08,ITEM1                                           1399
@DE01396 CH    @08,RECLNGTH(,R2)                                   1399
         BNH   @DL01396                                            1399
* NUMBER = RECLNGTH - (ITEM1 - 66);                         /*@G51DGGB*
         L     @08,ITEM1                                           1400
         SL    @08,@CF01519                                        1400
         LCR   @08,@08                                             1400
         AH    @08,RECLNGTH(,R2)                                   1400
         ST    @08,NUMBER                                          1400
* IF NUMBER > 0 THEN                                               1401
         LTR   @08,@08                                             1401
         BNP   @RF01401                                            1401
*  DO;                                                      /*@G51DGGB*
*   CALL CONVERT;    /*GO CONVERT THE ITEM TO PRINTABLE       @G51DGGB*
         BAL   @14,CONVERT                                         1403
*   CALL PRINTIT;    /*GO PRINT THE LINE                      @G51DGGB*
         BAL   @14,PRINTIT                                         1404
*  END;                                                     /*@G51DGGB*
* END;                                                      /*@G51DGGB*
@EL00040 DS    0H                                                  1406
@EF00040 DS    0H                                                  1406
@ER00040 LM    @14,@12,@SA00040                                    1406
         BR    @14                                                 1406
* PRINTIT: PROC;                                            /*@G51DGGB*
PRINTIT  STM   @14,@12,@SA00041                                    1407
*  PRINTADR = ADDR(PRINTLIN);   /*SET THE ADDRESS OF THE PRINT LINE*/
         LA    @08,PRINTLIN                                        1408
         ST    @08,PRINTADR(,R2)                                   1408
*  CALL IOHND(RITEPRTR);        /*TELL IO HANDLER TO PRINTIT  @G51DGGB*
         L     @15,ADIOHND(,R2)                                    1409
         LA    @01,@AL01409                                        1409
         BALR  @14,@15                                             1409
* END;                                                      /*@G51DGGB*
@EL00041 DS    0H                                                  1410
@EF00041 DS    0H                                                  1410
@ER00041 LM    @14,@12,@SA00041                                    1410
         BR    @14                                                 1410
* /*  PROC TO CONVERT FROM BINARY TO PRINTABLE DIGITS         @G51DGGB*
* CONVBIN: PROC;                                            /*@G51DGGB*
CONVBIN  STM   @14,@12,@SA00042                                    1411
* RESPECIFY (R4,R5) RESTRICTED;                             /*@G51DGGB*
*     R4 = BINWORD;           /*LOAD THE WORD TO CONVERT      @G51DGGB*
         L     R4,BINWORD                                          1413
*     CVD(R4,DBLWORD);        /*CONVERT TO PRINTABLE          @G51DGGB*
         CVD   R4,DBLWORD                                          1414
*     UNPK(WORK(1:8),DBLWORD) ;                             /*@G51DGGB*
         UNPK  WORK(8),DBLWORD(8)                                  1415
*     WORK(8) = WORK(8) × FOXZERO;                          /*@G51DGGB*
         OI    WORK+7,X'F0'                                        1416
*     SWITCH1 = OFF;    /*TURN OFF THE CONTROL FOR THE LOOP   @G51DGGB*
         NI    SWITCH1,B'11011111'                                 1417
*     DO J = 1 TO 7 BY 1 WHILE (SWITCH1 = OFF);/*DONT DO LAST CHAR*/
         LA    @08,1                                               1418
         ST    @08,J                                               1418
@DL01418 TM    SWITCH1,B'00100000'                                 1418
         BNZ   @DC01418                                            1418
*       IF WORK(J) = FOXZERO THEN  /*SUPPRESS ANY LEADING BLANKES*/
         LA    @06,WORK-1(@08)                                     1419
         CLI   0(@06),X'F0'                                        1419
         BNE   @RF01419                                            1419
*         WORK(J) = BLANK;    /*SET TO A BLANK                @G51DGGB*
         LA    @06,WORK-1(@08)                                     1420
         MVI   0(@06),X'40'                                        1420
*       ELSE                                                       1421
*         SWITCH1 = ON;     /*END OF THE LEADING ZEROS        @G51DGGB*
         B     @RC01419                                            1421
@RF01419 OI    SWITCH1,B'00100000'                                 1421
*     END;                                                  /*@G51DGGB*
@RC01419 LA    @08,1                                               1422
         AL    @08,J                                               1422
         ST    @08,J                                               1422
         C     @08,@CF00083                                        1422
         BNH   @DL01418                                            1422
@DC01418 DS    0H                                                  1423
*     IF (10-J) > NUMDIG THEN                                      1423
         LA    @08,10                                              1423
         SL    @08,J                                               1423
         C     @08,@CF00083                                        1423
         BNH   @RF01423                                            1423
*       WORK = '9999999';  /*NUMBER WAS LARGER THAN ROOM ALLOWED*/ 1424
         MVI   WORK+7,C' '                                         1424
         MVC   WORK(7),@CC01526                                    1424
*     RESPECIFY (R6) RESTRICTED;                            /*@G51DGGB*
@RF01423 DS    0H                                                  1426
*     R6 = DECADDR;                                         /*@G51DGGB*
         L     R6,DECADDR                                          1426
*     R5 = 6;                                               /*@G51DGGB*
         LA    R5,6                                                1427
*     R4 = ADDR(WORK) + 1;                                  /*@G51DGGB*
         LA    R4,WORK                                             1428
         AL    R4,@CF00055                                         1428
*     GEN(EX  R5,MVCDATA);                                  /*@G51DGGB*
         EX  R5,MVCDATA
*     GENERATE DATA;                                        /*@G51DGGB*
* RESPECIFY (R4,R5,R6) UNRESTRICTED;                        /*@G51DGGB*
*  END;                                                     /*@G51DGGB*
@EL00042 DS    0H                                                  1432
@EF00042 DS    0H                                                  1432
@ER00042 LM    @14,@12,@SA00042                                    1432
         BR    @14                                                 1432
* END   /*CLOSING END FOR IFCFILT1 EXTERNAL PROC              @Z427VLS*
* /* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.  1433
* /*%INCLUDE SYSLIB  (COMTABLE)                                    1433
* ;                                                                1433
@DATA    DS    0H
@CH00081 DC    H'6'
@CH01554 DC    H'63'
@CH01050 DC    H'600'
         DS    0F
@AL00204 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00403 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL01274 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL01326 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL01341 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL01409 DC    A(@CF00074+2)           LIST WITH   1 ARGUMENT(S)
@AL00210 DC    A(@CF00076+2)           LIST WITH   1 ARGUMENT(S)
@AL00226 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00973 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00990 DC    A(@CF00064+2)           LIST WITH   1 ARGUMENT(S)
@AL00233 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL01143 DC    A(@CF00079+2)           LIST WITH   1 ARGUMENT(S)
@AL00374 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00408 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00435 DC    A(@CF00083+2)           LIST WITH   1 ARGUMENT(S)
@AL00391 DC    A(@CF01342)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS)
@AL00397 DC    A(@CF00649)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS)
@AL00445 DC    A(@CF01349)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS)
@AL00970 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00987 DC    A(@CH00081)             LIST WITH   1 ARGUMENT(S)
@AL01234 DC    A(@CF00633)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS+4)
@AL01240 DC    A(@CF01482)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS+4)
@AL01243 DC    A(@CF01483)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS+4)
@AL01253 DC    A(@CF01485)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS+4)
@AL01264 EQU   *                       LIST WITH   2 ARGUMENT(S)
@AL01268 DC    A(@CF01183)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS+4)
@AL01266 EQU   *                       LIST WITH   2 ARGUMENT(S)
@AL01272 DC    A(@CF00079)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS+4)
@AL01270 DC    A(@CF00227)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS+4)
         DS    0F
@SA00001 DS    18F
@SA00002 DS    15F
@SA00024 DS    15F
@SA00005 DS    15F
@SA00004 DS    15F
@SA00036 DS    15F
@SA00032 DS    15F
@SA00042 DS    15F
@SA00041 DS    15F
@SA00025 DS    15F
@SA00008 DS    15F
@SA00009 DS    15F
@SA00007 DS    15F
@SA00010 DS    15F
@SA00011 DS    15F
@SA00017 DS    15F
@SA00014 DS    15F
@SA00018 DS    15F
@SA00012 DS    15F
@SA00013 DS    15F
@SA00026 DS    15F
@SA00040 DS    15F
@SA00028 DS    15F
@SA00029 DS    15F
@SA00027 DS    15F
@SA00038 DS    15F
@SA00037 DS    15F
@TF00001 DS    F
@AFTEMPS DS    2F
         DS    0F
@CF00055 DC    F'1'
@CF00074 DC    F'2'
@CH00074 EQU   @CF00074+2
@CF00076 DC    F'3'
@CH00076 EQU   @CF00076+2
@CF00064 DC    F'4'
@CH00064 EQU   @CF00064+2
@CF00079 DC    F'5'
@CH00079 EQU   @CF00079+2
@CF00083 DC    F'7'
@CH00083 EQU   @CF00083+2
@CF00066 DC    F'8'
@CF00033 DC    F'11'
@CH00033 EQU   @CF00033+2
@CF00032 DC    F'12'
@CF01393 DC    F'14'
@CF00088 DC    F'16'
@CF00227 DC    F'24'
@CH00227 EQU   @CF00227+2
@CF00870 DC    F'27'
@CF01183 DC    F'40'
@CF01466 DC    F'45'
@CF00295 DC    F'50'
@CF01483 DC    F'53'
@CF00649 DC    F'54'
@CF01482 DC    F'55'
@CF00633 DC    F'64'
@CF01519 DC    F'66'
@CF01485 DC    F'78'
@CF01342 DC    F'83'
@CF01349 DC    F'111'
@CF01552 DC    F'254'
@CF01048 DC    F'36000'
@CF01070 DC    F'500000'
@CF01567 DC    F'-20'
@CF01586 DC    F'-17'
@CF01583 DC    F'-15'
@CF01587 DC    F'-14'
@CF01588 DC    F'-13'
@CF01562 DC    F'-11'
@CF01575 DC    F'-10'
@CF01589 DC    F'-8'
@CF01569 DC    F'-7'
@CF01564 DC    F'-6'
@CF01578 DC    F'-5'
@CF01576 DC    F'-4'
@CF01572 DC    F'-3'
@CF01073 DC    XL4'FFFFFFF8'
         DS    0D
LISTPTR  DC    A(0)
TEMPSAV  DC    F'0'
X        DC    A(0)
Y        DC    A(0)
Z        DC    A(0)
Q        DC    A(0)
CCHINDX  DC    A(0)
SAVESEQ  DC    F'0'
CPUCT    DC    F'0'
TOOMANY  DC    F'0'
T        DC    F'0'
CPUADR   DC    F'0'
TEMPSET  DC    F'0'
TIME     DC    F'0'
TEN      DC    F'10'
BINWORD  DC    F'0'
DECADDR  DC    F'0'
NUMBER   DC    F'0'
ADDNXT   DC    F'0'
NEXTBY   DC    F'0'
TEMPCT9  DC    F'0'
F        DC    F'0'
A        DC    F'0'
TEMPSTOR DC    F'0'
G        DC    F'0'
ITEM1    DC    F'0'
SECTIME  DS    H
HRTIME   DS    FL1
MINTIME  DS    FL1
         DS    0D
@TS00001 DS    CL8
@CC00995 DC    C'        '
@CC01526 DC    C'9999999'
@CB01463 DC    X'0000000000000000'
@CB01501 DC    X'0000000F'
@CB01034 DC    X'000FF0'
@CB01042 DC    X'000FFF'
@CB00208 EQU   @CB01463
@CB00998 DC    X'2006'
@CB01000 DC    X'2007'
@CB01002 DC    X'2009'
@CB01004 DC    X'200A'
@CB01006 DC    X'200B'
@CB01008 DC    X'2102'
@CB01010 DC    X'2101'
@CB01012 DC    X'200D'
@CB01036 DC    X'0FF0'
@CB01038 DC    X'0FFF'
BUG16    DC    CL9'DEBUG16- '
ERR7816  DC    CL18' '
         ORG   ERR7816
@NM00087 DC    CL18'DEBUG16 FRAME SET '
         ORG   ERR7816+18
INCOMP   DC    CL10'INCOMPLETE'
REPLACED DC    CL8'REPLACED'
SWITCHS  DC    AL2(0)
         ORG   SWITCHS
ONETIME  DS    BL1
ISMERD   EQU   SWITCHS+0
SWITCH1  EQU   SWITCHS+0
LOOPOUT  EQU   SWITCHS+0
NOMESAGE EQU   SWITCHS+0
FRAMEYES EQU   SWITCHS+0
         ORG   SWITCHS+2
ZERO1    DC    X'0000000000'
WORKTABL DS    CL11
         ORG   WORKTABL
WORKKEY  DS    CL6
         ORG   WORKKEY
WORKTYPE DS    CL1
WORKCHAN DS    BL1
WORKCUA  DS    CL3
         ORG   WORKCUA
WORKCU   DS    CL1
WORKMOD  DS    CL2
         ORG   WORKKEY+5
CPUID    DS    CL1
         ORG   WORKTABL+6
WORKCCHR DS    CL5
         ORG   WORKCCHR
WORKCNT  DS    CL2
         ORG   WORKTABL+11
BLDLIST  DS    CL62
         ORG   BLDLIST
BLDNUM   DC    X'0001'
BLDLL    DC    X'003A'
BLDNAME  DC    CL8'        '
BLDLOC   DC    X'000000000000'
BLDUSER  DS    CL44
         ORG   BLDLIST+62
         DS    CL2
FILT1ITM DS    CL77
         ORG   FILT1ITM
USERLOC  DC    F'0'
ERROR    DC    F'0'
MAXENT   DC    F'0'
EXCESS   DC    F'0'
FREEADR  DC    A(0)
I        DC    A(1)
J        DC    A(0)
K        DC    A(0)
M        DC    A(0)
SRTCONT  DC    F'0'
SRTCONT1 DC    F'0'
PACKPAS  DC    CL4'    '
CHARPAS  DC    CL8'        '
PASSNUM  DC    F'0'
NUMREC   DC    F'0'
GETADR   DC    A(0)
WORKDEV  DC    X'0000'
         ORG   WORKDEV
WORKDEV1 DS    CL1
         ORG   FILT1ITM+72
GETBYT   DC    F'0'
MSGNO    DC    AL1(0)
         ORG   FILT1ITM+77
PRINTLIN DS    CL134
         ORG   PRINTLIN
PRINTDS  DC    X'01'
PRINTCC  DC    X'09'
PRINTBDY DC    CL132' '
         ORG   PRINTLIN+134
BITSWIT  DC    X'0000'
         ORG   BITSWIT
NONBLANK DS    BL1
ONBOUND  EQU   BITSWIT+0
CPUOK    EQU   BITSWIT+0
MODOK    EQU   BITSWIT+0
LIBOK    EQU   BITSWIT+0
SORTSW   EQU   BITSWIT+0
GETOUT   EQU   BITSWIT+0
CUAOK    EQU   BITSWIT+0
CPUCUAOK DS    BL1
VOLOK    EQU   BITSWIT+1
DEVOK    EQU   BITSWIT+1
GETFAIL  EQU   BITSWIT+1
SHAREYES EQU   BITSWIT+1
         ORG   BITSWIT+2
WKCPUCUA DC    X'0000000000'
         ORG   WKCPUCUA
WKCPU    DS    CL3
WKCUA    DS    CL2
         ORG   WKCPUCUA+5
         DS    CL2
DBLWORD  DS    CL8
WORK     DS    CL8
CHARS    DC    CL16'0123456789ABCDEF'
LETTERS  DC    CL1'S'
LETTERC  DC    CL1'C'
RECCPU   DC    CL3'   '
SUPERZAP DC    3CL10'SUPERZAP'
CPUTAB1  DC    16X'000000'
         DS    CL1
PATCH    DC    25F'0'
BUG      DC    46F'0'
ERRLINE  DS    CL63
         ORG   ERRLINE+0
ERRDS    DC    CL1'1'
ERCC     DC    X'09'
ERRMES   DC    CL10'DEBUG16  '
ERXNUM   DC    CL9'         '
@NM00095 DC    CL2'  '
ERRTXT   DC    CL40'RECORDS RETRIEVED VIA READSEQ           '
         ORG   ERRLINE+63
         ORG   ERRLINE+63
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'RECORDS FAILED DATE FILTERING           '
         ORG   ERRLINE+126
         ORG   ERRLINE+126
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'RECORDS FAILED NON 3RD TIME FILTERING   '
         ORG   ERRLINE+189
         ORG   ERRLINE+189
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'RECORDS FAILED CPU MODEL,SERIAL FILTER  '
         ORG   ERRLINE+252
         ORG   ERRLINE+252
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'RECORDS FAILED CPU MODEL FILTERING      '
         ORG   ERRLINE+315
         ORG   ERRLINE+315
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'RECORDS FAILED 3RD SHIFT TIME FILTERING '
         ORG   ERRLINE+378
         ORG   ERRLINE+378
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'OBR RECORDS FAILED TYPE SELECTION       '
         ORG   ERRLINE+441
         ORG   ERRLINE+441
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'OBR RECORDS FAILED CUA SELECTION        '
         ORG   ERRLINE+504
         ORG   ERRLINE+504
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'OBR RECORDS FAILED DEVICE SELECTION     '
         ORG   ERRLINE+567
         ORG   ERRLINE+567
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'OBR RECORDS FAILED CPU,CUA SELECTION    '
         ORG   ERRLINE+630
         ORG   ERRLINE+630
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'OBR RECORDS FAILED VOLID SELECTION      '
         ORG   ERRLINE+693
         ORG   ERRLINE+693
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'OBR RECORDS FAILED TERMINAL ID SELECTION'
         ORG   ERRLINE+756
         ORG   ERRLINE+756
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'MDR RECORDS FAILED TYPE SELECTION       '
         ORG   ERRLINE+819
         ORG   ERRLINE+819
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'MDR RECORDS FAILED CUA SELECTION        '
         ORG   ERRLINE+882
         ORG   ERRLINE+882
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'MDR RECORDS FAILED DEVICE SELECTION     '
         ORG   ERRLINE+945
         ORG   ERRLINE+945
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'MDR RECORDS FAILED CPU,CUA SELECTION    '
         ORG   ERRLINE+1008
         ORG   ERRLINE+1008
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'MDR RECS FAILED LINE INT.BASE ADDR. SEL '
         ORG   ERRLINE+1071
         ORG   ERRLINE+1071
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'MDR RECORDS FAILED VOLID SELECTION      '
         ORG   ERRLINE+1134
         ORG   ERRLINE+1134
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'DDR RECORDS FAILED TYPE FILTERING       '
         ORG   ERRLINE+1197
         ORG   ERRLINE+1197
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'DDR RECORDS FAILED CUA SELECTION        '
         ORG   ERRLINE+1260
         ORG   ERRLINE+1260
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'DDR RECORDS FAILED CPU,CUA SELECTION    '
         ORG   ERRLINE+1323
         ORG   ERRLINE+1323
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'DDR RECORDS FAILED DEVICE SELECTION     '
         ORG   ERRLINE+1386
         ORG   ERRLINE+1386
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'MIH RECORDS FAILED TYPE SELECTION       '
         ORG   ERRLINE+1449
         ORG   ERRLINE+1449
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'MIH RECORDS FAILED CUA SELECTION        '
         ORG   ERRLINE+1512
         ORG   ERRLINE+1512
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'MIH RECORDS FAILED CPU,CUA SELECTION    '
         ORG   ERRLINE+1575
         ORG   ERRLINE+1575
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'MIH RECORDS FAILED DEVICE SELECTION     '
         ORG   ERRLINE+1638
         ORG   ERRLINE+1638
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'CCH RECORDS FAILED TYPE SELECTION       '
         ORG   ERRLINE+1701
         ORG   ERRLINE+1701
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'CCH RECORDS FAILED CUA SELECTION        '
         ORG   ERRLINE+1764
         ORG   ERRLINE+1764
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'CCH RECORDS FAILED CPU,CUA SELECTION    '
         ORG   ERRLINE+1827
         ORG   ERRLINE+1827
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'IPL RECORDS FAILED TYPE SELECTION       '
         ORG   ERRLINE+1890
         ORG   ERRLINE+1890
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'EOD RECORDS FAILED TYPE SELECTION       '
         ORG   ERRLINE+1953
         ORG   ERRLINE+1953
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'MCH RECORDS FAILED TYPE SELECTION       '
         ORG   ERRLINE+2016
         ORG   ERRLINE+2016
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'MCH RECORDS FAILED ERROR ID SELECTION   '
         ORG   ERRLINE+2079
         ORG   ERRLINE+2079
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'SOFT RECORDS FAILED TYPE SELECTION      '
         ORG   ERRLINE+2142
         ORG   ERRLINE+2142
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'SOFT RECORDS FAILED ERROR ID SELECTION  '
         ORG   ERRLINE+2205
         ORG   ERRLINE+2205
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'FRAMES THAT WERE ACCEPTED               '
         ORG   ERRLINE+2268
         ORG   ERRLINE+2268
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'FRAMES THAT FAILED SELECTION            '
         ORG   ERRLINE+2331
         ORG   ERRLINE+2331
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'FRAME SETS THAT WERE COMPLETE           '
         ORG   ERRLINE+2394
         ORG   ERRLINE+2394
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'FRAME RECORDS READ                      '
         ORG   ERRLINE+2457
         ORG   ERRLINE+2457
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'FRAME SETS REPLACED DUE TO LATER DATE   '
         ORG   ERRLINE+2520
         ORG   ERRLINE+2520
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'FRAME SETS REPLACED SET INCOMPLETE      '
         ORG   ERRLINE+2583
         ORG   ERRLINE+2583
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'NUMBER OF SUBPOOL-21 GETMAINS           '
         ORG   ERRLINE+2646
         ORG   ERRLINE+2646
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'ENTRIES IN FRAME TABLE                  '
         ORG   ERRLINE+2709
         ORG   ERRLINE+2709
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'FRAMES WRITTEN TO ACCDEV                '
         ORG   ERRLINE+2772
         ORG   ERRLINE+2772
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'FRAME SETS THAT FAILED NO MCH/CCH FOUND '
         ORG   ERRLINE+2835
         ORG   ERRLINE+2835
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16  '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'******IFCFILT1 DEBUG16 RECORD COUNTS****'
         ORG   ERRLINE+2898
IFCFILT1 CSECT
         DC    S(SUPERZAP)
IFCFILT1 CSECT
         DC    S(PATCH)
IFCFILT1 CSECT
MVCDATA  MVC  R0(R0,R6),0(R4)
IFCFILT1 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
R2       EQU   @02
R7       EQU   @07
R0       EQU   @00
R1       EQU   @01
R3       EQU   @03
R4       EQU   @04
R5       EQU   @05
R6       EQU   @06
R12      EQU   @12
R15      EQU   @15
R10      EQU   @10
R11      EQU   @11
R13      EQU   @13
R14      EQU   @14
R8       EQU   @08
R9       EQU   @09
IOHND    EQU   0
IFCMSG   EQU   0
PARM     EQU   0
RECTYPE  EQU   PARM
PMCH     EQU   RECTYPE
PCHAN    EQU   RECTYPE
POBR     EQU   RECTYPE
PSOFT    EQU   RECTYPE
PIPL     EQU   RECTYPE
PDDR     EQU   RECTYPE
PMIH     EQU   RECTYPE
PEOD     EQU   RECTYPE
PTTYP    EQU   RECTYPE+1
SWITCHES EQU   PARM+2
ZEROALL  EQU   SWITCHES+1
DEVEXCL  EQU   SWITCHES+1
SHIFT3RD EQU   SWITCHES+1
DEBUG    EQU   PARM+4
DEBUG4   EQU   DEBUG
DEBUG11  EQU   DEBUG+1
DEBUG16  EQU   DEBUG+2
DEBUG23  EQU   DEBUG+2
DEBUGA   EQU   PARM+8
DEBUG43  EQU   DEBUGA+1
DEBUG49  EQU   DEBUGA+2
MISC     EQU   PARM+12
PACC     EQU   MISC
PHIST    EQU   MISC
PRINTES  EQU   MISC
PEDIT    EQU   PRINTES
PSUM     EQU   PRINTES
ERRORID  EQU   MISC
PLOGREC  EQU   MISC
PASSFLAG EQU   MISC
OPENCLSE EQU   PARM+13
OPENIO   EQU   OPENCLSE
CLOSEIO  EQU   OPENCLSE+2
CACCIN   EQU   CLOSEIO
CACCDEV  EQU   CLOSEIO
CDRCTWRK EQU   CLOSEIO
DATENOW  EQU   PARM+17
STDT     EQU   PARM+23
STDATE   EQU   STDT
PSTD     EQU   STDATE+1
ENDDT    EQU   PARM+31
ENDDATE  EQU   ENDDT
PEND     EQU   ENDDATE+1
STTIME1  EQU   PARM+39
ENDTIME1 EQU   PARM+43
STTIME2  EQU   PARM+47
ENDTIME2 EQU   PARM+51
STRTDATE EQU   PARM+55
TERM     EQU   PARM+58
@NM00006 EQU   PARM+72
@NM00007 EQU   PARM+75
TABSIZE  EQU   PARM+80
SORTNUM  EQU   PARM+84
ERRID    EQU   PARM+92
IDVALUE  EQU   ERRID
IDCPU    EQU   ERRID+3
IDASID   EQU   ERRID+4
IDTIMEA  EQU   ERRID+6
IDTIME   EQU   IDTIMEA
IDHOUR   EQU   IDTIME
IDMIN    EQU   IDTIME+1
IDSEC    EQU   IDTIME+2
IDTSEC   EQU   IDTIME+3
USERPGM  EQU   PARM+102
CCHHRLNG EQU   PARM+112
RECCCHHR EQU   CCHHRLNG
RECLNGTH EQU   CCHHRLNG+6
ADIOHND  EQU   PARM+124
ADIFCMSG EQU   PARM+128
ADEDITB  EQU   PARM+132
EVPTR    EQU   PARM+136
SORTADR  EQU   PARM+140
PRINTADR EQU   PARM+148
CUAPTR   EQU   PARM+152
DEVPTR   EQU   PARM+156
MODPTR   EQU   PARM+160
SERPTR   EQU   PARM+164
VOLPTR   EQU   PARM+168
CPUPTR   EQU   PARM+172
CPCUAPTR EQU   PARM+176
LIBADPTR EQU   PARM+180
SYMCDPTR EQU   PARM+184
SYSUMPTR EQU   PARM+188
TRENPTR  EQU   PARM+192
SHAREPTR EQU   PARM+196
FRAMEPTR EQU   PARM+200
MERDCPTR EQU   PARM+208
DUMPTABL EQU   PARM+228
DUMPINFO EQU   DUMPTABL+4
TRENDONE EQU   0
TREGEN   EQU   TRENDONE+8
EVTABLE  EQU   0
EVSTOP   EQU   EVTABLE
EVKEY    EQU   EVTABLE+6
SORTABLE EQU   0
SORTKEY  EQU   SORTABLE
SORTCCHR EQU   SORTABLE+5
SYSUMONE EQU   0
SHARE    EQU   0
SHARENUM EQU   SHARE
SHAREIO  EQU   SHARE+2
SHAREFLG EQU   SHAREIO
SHRBASE  EQU   SHAREIO+1
SHARSERB EQU   SHRBASE
SHRCUABL EQU   SHRBASE+3
SHRCUABH EQU   SHRBASE+5
SHRCUCPU EQU   SHAREIO+8
SHARSERA EQU   SHRCUCPU
SHRCUAAL EQU   SHRCUCPU+3
SHRCUAAH EQU   SHRCUCPU+5
EDITLOAD EQU   0
EDITABLE EQU   EDITLOAD+4
CUA      EQU   0
CUANUM   EQU   CUA
CUAVAL   EQU   CUA+2
CUA1     EQU   CUAVAL
CUA2     EQU   CUAVAL+2
DEVICE   EQU   0
DEVNUM   EQU   DEVICE
DEVVAL   EQU   DEVICE+2
MDRNUM   EQU   DEVICE+202
MDRVAL   EQU   DEVICE+204
MODELS   EQU   0
MODNUM   EQU   MODELS
MODVAL   EQU   MODELS+2
DEVSERAL EQU   0
VOLUME   EQU   0
VOLNUM   EQU   VOLUME
VOLVAL   EQU   VOLUME+2
CPUS     EQU   0
CPUNUM   EQU   CPUS
CPUVAL   EQU   CPUS+2
CPUCUAS  EQU   0
CPCUANUM EQU   CPUCUAS
CPUCUAV  EQU   CPUCUAS+2
CPUCUX1  EQU   CPUCUAV
CPUCUX2  EQU   CPUCUAV+3
CPUCUX3  EQU   CPUCUAV+5
LIBADR   EQU   0
LIBADNUM EQU   LIBADR
LIBVAL   EQU   LIBADR+2
SYMCODE  EQU   0
SYMVAL   EQU   SYMCODE+2
TMT2     EQU   0
TMTKEY   EQU   TMT2
TMTSRT   EQU   TMTKEY+1
TMTCPUS  EQU   TMTKEY+3
TMTITEM  EQU   TMTKEY+4
TMTPERM1 EQU   TMT2+8
TMP2     EQU   0
TMPKEY   EQU   TMP2
TMPSRT   EQU   TMPKEY+1
TMPCPUS  EQU   TMPKEY+3
TMPITEM  EQU   TMPKEY+4
TMPPERM1 EQU   TMP2+8
MERIDIAN EQU   0
MRDNUMBR EQU   MERIDIAN
MODEL    EQU   MERIDIAN+2
LRTREC   EQU   0
LRTKEY   EQU   LRTREC
LRTKEY1  EQU   LRTKEY
LRTSMS   EQU   LRTREC+2
LRTNLAST EQU   LRTSMS
LRTRUNC  EQU   LRTSMS
LRTERRID EQU   LRTREC+3
@NM00017 EQU   LRTREC+4
LRTCNT   EQU   @NM00017+2
LRTDT    EQU   LRTREC+8
LRTDATE  EQU   LRTDT
LRTYRDAY EQU   LRTDATE+1
LRTTIME  EQU   LRTDT+4
LRTCPU   EQU   LRTREC+16
LRTCPMOD EQU   LRTCPU+1
LRTCPUS  EQU   LRTCPMOD
LRTMODEL EQU   LRTCPMOD+3
MCHREC   EQU   0
MCHHEAD  EQU   MCHREC
MCHKEY   EQU   MCHHEAD
MCHSMS   EQU   MCHHEAD+2
MCHCPUID EQU   MCHHEAD+16
CCHREC   EQU   0
CCHHEAD  EQU   CCHREC
CCHKEY   EQU   CCHHEAD
CCHSMS   EQU   CCHHEAD+2
CCHCPUID EQU   CCHHEAD+16
CCHCODE  EQU   CCHREC+68
CCHCODE2 EQU   CCHCODE+2
CCHCUA   EQU   CCHREC+74
OBRREC   EQU   0
OBRHEAD  EQU   OBRREC
OBRKEY   EQU   OBRHEAD
OBRKEY1  EQU   OBRKEY
OBRSMS   EQU   OBRHEAD+2
MISCSW   EQU   OBRSMS
OBRSUBTP EQU   OBRSMS+1
SHORTSW  EQU   OBRSUBTP
OBRCPUID EQU   OBRHEAD+16
OBRJOBID EQU   OBRREC+24
OBRSDEV2 EQU   OBRJOBID+2
OBRSCUA  EQU   OBRJOBID+5
OBRFCCW  EQU   OBRREC+32
OBRSRDS  EQU   OBRFCCW
OBRCSW   EQU   OBRREC+40
OBRCODE  EQU   OBRREC+52
OBRDEV   EQU   OBRCODE+2
OBRCLASS EQU   OBRDEV
OBRPCUA  EQU   OBRREC+57
OBRVOL   EQU   OBRREC+64
OBRSEEK  EQU   OBRREC+70
OBRTCAM  EQU   OBRSEEK
OBRTERMN EQU   OBRSEEK+2
SFTREC   EQU   0
SFTHEAD  EQU   SFTREC
SFTKEY   EQU   SFTHEAD
SFTCPUID EQU   SFTHEAD+16
SFTSDWA  EQU   SFTREC+32
SFTAEC1  EQU   SFTSDWA+96
SFTFLGS  EQU   SFTSDWA+232
SFTRECP  EQU   SFTSDWA+292
IPLREC   EQU   0
IPLHEAD  EQU   IPLREC
IPLKEY   EQU   IPLHEAD
IPLCPUID EQU   IPLHEAD+16
IPLSTIME EQU   IPLREC+52
DDRREC   EQU   0
DDRHEAD  EQU   DDRREC
DDRKEY   EQU   DDRHEAD
DDRSMS   EQU   DDRHEAD+2
DDRCPUID EQU   DDRHEAD+16
@NM00052 EQU   DDRREC+24
DDRFCUA  EQU   DDRREC+45
DDRFDEV  EQU   DDRREC+48
DDRCODE2 EQU   DDRFDEV+2
DDRTODEV EQU   DDRREC+56
MIHREC   EQU   0
MIHHEAD  EQU   MIHREC
MIHKEY   EQU   MIHHEAD
@NM00054 EQU   MIHHEAD+4
MIHCPUID EQU   MIHHEAD+16
@NM00057 EQU   MIHREC+24
MIHCUA   EQU   MIHREC+35
MIHDEV   EQU   MIHREC+44
MIHCODE2 EQU   MIHDEV+2
EODREC   EQU   0
EODHEAD  EQU   EODREC
EODKEY   EQU   EODHEAD
EODCPUID EQU   EODHEAD+16
TPRREC   EQU   0
TPRHEAD  EQU   TPRREC
TPRKEY   EQU   TPRHEAD
TPRDEV   EQU   TPRHEAD+4
TPRBUFC  EQU   TPRHEAD+5
TPRCPUID EQU   TPRHEAD+16
TPRCUA   EQU   TPRREC+24
@NM00065 EQU   TPRREC+26
TPRVOL   EQU   @NM00065
TPRLINAD EQU   TPRREC+36
TPRMODE  EQU   TPRREC+38
MCFREC   EQU   0
MCFHEAD  EQU   MCFREC
MCFKEY   EQU   MCFHEAD
MCFSMS   EQU   MCFHEAD+2
@NM00073 EQU   MCFHEAD+16
MCFSMO   EQU   MCFHEAD+17
CCFREC   EQU   0
CCFHEAD  EQU   CCFREC
CCFKEY   EQU   CCFHEAD
CCFSMS   EQU   CCFHEAD+2
@NM00081 EQU   CCFHEAD+16
CCFSMO   EQU   CCFHEAD+17
FRAMETAB EQU   0
FRAMENUM EQU   FRAMETAB
FRAMEDTA EQU   FRAMETAB+4
FRAMEKEY EQU   FRAMEDTA
FRAMECPU EQU   FRAMEKEY
FRAMESER EQU   FRAMECPU
FRAMEMOD EQU   FRAMECPU+3
FRAMEDT  EQU   FRAMEKEY+5
FRAMETYP EQU   FRAMEKEY+13
FRAMLOCM EQU   FRAMEDTA+16
FRAMLOCC EQU   FRAMEDTA+20
LISTLOC  EQU   0
LISTNUM  EQU   LISTLOC
LISTCCHR EQU   LISTLOC+4
SORTNEW  EQU   0
SORTKEY1 EQU   SORTNEW
RERR     EQU   0
RSEQ     EQU   RERR
RCPU     EQU   RERR+3
RASID    EQU   RERR+4
RTIME    EQU   RERR+6
NEXTBYTE EQU   0
ADDNUM   EQU   0
ERR78    EQU   PRINTBDY
PFRAMMOD EQU   ERR78+27
PFRAMSER EQU   ERR78+32
ERR78161 EQU   PRINTBDY+19
TYPERROR EQU   ERR78161
ZFRAMMOD EQU   ERR78161+11
ZFRAMSER EQU   ERR78161+16
ZFRAMKEY EQU   ERR78161+24
YFRAMMOD EQU   ERR78161+58
YFRAMSER EQU   ERR78161+63
YFRAMKEY EQU   ERR78161+71
SORTKEYY EQU   SORTKEY
SORTCUA  EQU   SORTKEYY+2
LINTXT1B EQU   PRINTBDY+36
EDIFILD  EQU   PRINTBDY+7
EDFLD    EQU   EDIFILD
CHAR1    EQU   CHARS
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
SORTMOD  EQU   SORTCUA+1
SORTCU   EQU   SORTCUA
SORTCHAN EQU   SORTKEYY+1
SORTYPE  EQU   SORTKEYY
@NM00093 EQU   ERR78161+69
@NM00092 EQU   ERR78161+62
@NM00091 EQU   ERR78161+52
@NM00090 EQU   ERR78161+22
@NM00089 EQU   ERR78161+15
@NM00088 EQU   ERR78161+10
PFRAMKEY EQU   ERR78+44
@NM00086 EQU   ERR78+38
@NM00085 EQU   ERR78+31
@NM00084 EQU   ERR78
@NM00094 EQU   RERR+2
SORTCHHR EQU   SORTNEW+6
FRAMETIM EQU   FRAMEDT+4
FRAMEDAT EQU   FRAMEDT
CCFFRAME EQU   CCFREC+24
@NM00083 EQU   CCFHEAD+22
CCFMOD   EQU   CCFSMO+3
CCFSER   EQU   CCFSMO
CCFVER   EQU   @NM00081
@NM00082 EQU   @NM00081
CCFTIMD  EQU   CCFHEAD+12
CCFDAT   EQU   CCFHEAD+8
@NM00080 EQU   CCFHEAD+7
CCFCNT   EQU   CCFHEAD+6
@NM00079 EQU   CCFHEAD+4
@NM00078 EQU   CCFSMS+1
CCFCPU   EQU   CCFSMS+1
CCFMP    EQU   CCFSMS+1
@NM00077 EQU   CCFSMS
CCFTIM   EQU   CCFSMS
@NM00076 EQU   CCFSMS
CCFTRU   EQU   CCFSMS
CCFTOD   EQU   CCFSMS
CCFLST   EQU   CCFSMS
CCFKEY2  EQU   CCFKEY+1
CCFKEY1  EQU   CCFKEY
MCFFRAME EQU   MCFREC+24
@NM00075 EQU   MCFHEAD+22
MCFMOD   EQU   MCFSMO+3
MCFSER   EQU   MCFSMO
MCFVER   EQU   @NM00073
@NM00074 EQU   @NM00073
MCFTIMD  EQU   MCFHEAD+12
MCFDAT   EQU   MCFHEAD+8
@NM00072 EQU   MCFHEAD+7
MCFCNT   EQU   MCFHEAD+6
@NM00071 EQU   MCFHEAD+4
@NM00070 EQU   MCFSMS+1
MCFCPU   EQU   MCFSMS+1
MCFMP    EQU   MCFSMS+1
@NM00069 EQU   MCFSMS
MCFTIM   EQU   MCFSMS
@NM00068 EQU   MCFSMS
MCFTRU   EQU   MCFSMS
MCFTOD   EQU   MCFSMS
MCFLST   EQU   MCFSMS
MCFKEY2  EQU   MCFKEY+1
MCFKEY1  EQU   MCFKEY
RMSSCBRY EQU   TPRREC+58
DVBSDRE  EQU   TPRREC+56
@NM00067 EQU   TPRREC+39
@NM00066 EQU   TPRREC+34
TPRCEL   EQU   TPRCPUID+6
TPRMODEL EQU   TPRCPUID+4
TPRSER   EQU   TPRCPUID+1
@NM00064 EQU   TPRCPUID
TPRTIME  EQU   TPRHEAD+12
TPRDATE  EQU   TPRHEAD+8
@NM00063 EQU   TPRHEAD+6
TPRLENGT EQU   TPRBUFC
@NM00062 EQU   TPRBUFC
TPRSMS   EQU   TPRHEAD+2
TPRKEY2  EQU   TPRKEY+1
TPRKEY1  EQU   TPRKEY
EODCEL   EQU   EODCPUID+6
EODMODEL EQU   EODCPUID+4
EODSER   EQU   EODCPUID+1
@NM00061 EQU   EODCPUID
EODTIME  EQU   EODHEAD+12
EODDATE  EQU   EODHEAD+8
@NM00060 EQU   EODHEAD+5
EODDEV   EQU   EODHEAD+4
EODSMS   EQU   EODHEAD+2
EODKEY2  EQU   EODKEY+1
EODKEY1  EQU   EODKEY
MIHTYPE  EQU   MIHCODE2+1
MIHCLASS EQU   MIHCODE2
@NM00059 EQU   MIHDEV
MIHVOL   EQU   MIHREC+38
@NM00058 EQU   @NM00057+8
MIHJOBID EQU   @NM00057
MIHCEL   EQU   MIHCPUID+6
MIHMOD   EQU   MIHCPUID+4
MIHSER   EQU   MIHCPUID+1
@NM00056 EQU   MIHCPUID
MIHTIME  EQU   MIHHEAD+12
MIHDATE  EQU   MIHHEAD+8
@NM00055 EQU   MIHHEAD+6
MIHCSID  EQU   MIHHEAD+5
MIHDEBIT EQU   @NM00054
MIHCEBIT EQU   @NM00054
MIHSMS   EQU   MIHHEAD+2
MIHKEY2  EQU   MIHKEY+1
MIHKEY1  EQU   MIHKEY
DDRDEV2  EQU   DDRTODEV+2
DDRDEV1  EQU   DDRTODEV
DDRTOCUA EQU   DDRREC+53
@NM00053 EQU   DDRREC+52
DDRTYPE  EQU   DDRCODE2+1
DDRCLASS EQU   DDRCODE2
DDRCODE1 EQU   DDRFDEV
DDRPHD   EQU   @NM00052+20
DDRVOL2  EQU   @NM00052+14
DDRVOL1  EQU   @NM00052+8
DDRJOBID EQU   @NM00052
DDRCEL   EQU   DDRCPUID+6
DDRMOD   EQU   DDRCPUID+4
DDRSER   EQU   DDRCPUID+1
@NM00051 EQU   DDRCPUID
DDRTIME  EQU   DDRHEAD+12
DDRDATE  EQU   DDRHEAD+8
@NM00050 EQU   DDRHEAD+4
DDRDEPSW EQU   DDRSMS+1
@NM00049 EQU   DDRSMS
DDRKEY2  EQU   DDRKEY+1
DDRKEY1  EQU   DDRKEY
IPLSHSEC EQU   IPLSTIME+3
IPLSSEC  EQU   IPLSTIME+2
IPLSMIN  EQU   IPLSTIME+1
IPLSHOUR EQU   IPLSTIME
IPLSDATE EQU   IPLREC+48
IPLTEMP  EQU   IPLREC+46
IPLHIGH  EQU   IPLREC+42
IPLCHAN  EQU   IPLREC+32
@NM00048 EQU   IPLREC+30
IPLREAS  EQU   IPLREC+28
@NM00047 EQU   IPLREC+25
IPLSYSID EQU   IPLREC+24
IPLCEL   EQU   IPLCPUID+6
IPLMOD   EQU   IPLCPUID+4
IPLSER   EQU   IPLCPUID+1
@NM00046 EQU   IPLCPUID
IPLTIME  EQU   IPLHEAD+12
IPLDATE  EQU   IPLHEAD+8
@NM00045 EQU   IPLHEAD+4
IPLSMS   EQU   IPLHEAD+2
IPLKEY2  EQU   IPLKEY+1
IPLKEY1  EQU   IPLKEY
SFTXDATA EQU   SFTREC+434
SFTLVARA EQU   SFTREC+432
SFTREXN  EQU   SFTRECP+16
SFTCSECT EQU   SFTRECP+8
SFTMODN  EQU   SFTRECP
@NM00044 EQU   SFTSDWA+238
SFTLCPUA EQU   SFTSDWA+236
SFTERRD  EQU   SFTFLGS+3
SFTERRC  EQU   SFTFLGS+2
SFTERRB  EQU   SFTFLGS+1
SFTERRA  EQU   SFTFLGS
@NM00043 EQU   SFTSDWA+136
SFTAAEC1 EQU   SFTSDWA+120
@NM00042 EQU   SFTSDWA+112
SFTPROGC EQU   SFTAEC1+8
@NM00041 EQU   SFTAEC1
@NM00040 EQU   SFTSDWA+88
SFTGRSV  EQU   SFTSDWA+24
SFTABNDC EQU   SFTSDWA
SFTJOBID EQU   SFTREC+24
SFTCEL   EQU   SFTCPUID+6
SFTMOD   EQU   SFTCPUID+4
SFTSER   EQU   SFTCPUID+1
@NM00039 EQU   SFTCPUID
SFTTIME  EQU   SFTHEAD+12
SFTDATE  EQU   SFTHEAD+8
@NM00038 EQU   SFTHEAD+4
SFTSMS   EQU   SFTHEAD+2
SFTKEY2  EQU   SFTKEY+1
SFTKEY1  EQU   SFTKEY
OBR34CT2 EQU   OBRTERMN+5
OBR34CT1 EQU   OBRTERMN+4
@NM00037 EQU   OBRTERMN
@NM00036 EQU   OBRSEEK+1
OBRSBCNT EQU   OBRREC+62
OBRRETRY EQU   OBRREC+60
OBRLSDRC EQU   OBRREC+56
OBRTYPE  EQU   OBRDEV+1
OBRCODE1 EQU   OBRCODE
OBRSECUA EQU   OBRREC+49
OBRDEVDC EQU   OBRREC+48
OBRSTAT  EQU   OBRCSW+4
@NM00035 EQU   OBRCSW
OBRSDRS2 EQU   OBRSRDS
OBRSDRS1 EQU   OBRSRDS
OBRSSDRC EQU   OBRJOBID+4
OBRSDEV1 EQU   OBRJOBID
OBRCEL   EQU   OBRCPUID+6
OBRMOD   EQU   OBRCPUID+4
OBRSER   EQU   OBRCPUID+1
@NM00034 EQU   OBRCPUID
OBRTIME  EQU   OBRHEAD+12
OBRDATE  EQU   OBRHEAD+8
@NM00033 EQU   OBRHEAD+4
@NM00032 EQU   OBRSUBTP
DISMOUNT EQU   OBRSUBTP
@NM00031 EQU   OBRSUBTP
OBRTEMP  EQU   OBRSUBTP
SDRCOUNT EQU   OBRSUBTP
@NM00030 EQU   MISCSW
TRUNC    EQU   MISCSW
@NM00029 EQU   MISCSW
OBRKEY2  EQU   OBRKEY+1
CCHLOG   EQU   CCHREC+80
CCHMP    EQU   CCHREC+76
@NM00028 EQU   CCHREC+73
CCHID    EQU   CCHREC+72
CCHTYPE  EQU   CCHCODE2+1
CCHCLASS EQU   CCHCODE2
CCHCODE1 EQU   CCHCODE
CCHECSW  EQU   CCHREC+64
CCHCSW   EQU   CCHREC+56
CCHFCCW  EQU   CCHREC+48
CCHATIO  EQU   CCHREC+32
CCHJOBID EQU   CCHREC+24
CCHCEL   EQU   CCHCPUID+6
CCHMOD   EQU   CCHCPUID+4
CCHSER   EQU   CCHCPUID+1
@NM00027 EQU   CCHCPUID
CCHTIME  EQU   CCHHEAD+12
CCHDATE  EQU   CCHHEAD+8
@NM00026 EQU   CCHHEAD+4
CCHRINC  EQU   CCHSMS+1
@NM00025 EQU   CCHSMS
CCHRCRH  EQU   CCHSMS
@NM00024 EQU   CCHSMS
CCHKEY2  EQU   CCHKEY+1
CCHKEY1  EQU   CCHKEY
MCHLOG   EQU   MCHREC+48
MCHOPSW  EQU   MCHREC+40
MCHJOBID EQU   MCHREC+32
MCHPGMID EQU   MCHREC+24
MCHCEL   EQU   MCHCPUID+6
MCHMOD   EQU   MCHCPUID+4
MCHSER   EQU   MCHCPUID+1
@NM00023 EQU   MCHCPUID
MCHTIME  EQU   MCHHEAD+12
MCHDATE  EQU   MCHHEAD+8
@NM00022 EQU   MCHHEAD+4
MCHSYSTR EQU   MCHSMS+1
@NM00021 EQU   MCHSMS
MCHKEY2  EQU   MCHKEY+1
MCHKEY1  EQU   MCHKEY
LRTMCEL  EQU   LRTCPU+6
@NM00020 EQU   LRTCPU
LRTHSECS EQU   LRTTIME+3
LRTSEC   EQU   LRTTIME+2
LRTMIN   EQU   LRTTIME+1
LRTHOUR  EQU   LRTTIME
LRTDAY   EQU   LRTYRDAY+1
LRTYEAR  EQU   LRTYRDAY
LRTDATE0 EQU   LRTDATE
@NM00019 EQU   @NM00017+3
@NM00018 EQU   @NM00017
LRTDSMNT EQU   LRTERRID
@NM00016 EQU   LRTERRID
LRTSHRT  EQU   LRTERRID
@NM00015 EQU   LRTERRID
@NM00014 EQU   LRTSMS
LRTIMCNV EQU   LRTSMS
@NM00013 EQU   LRTSMS
LRNS     EQU   LRTSMS
LRTKEY2  EQU   LRTKEY+1
TMPTEMP  EQU   TMP2+10
TMPPERM  EQU   TMPPERM1+1
@NM00012 EQU   TMPPERM1
TMPRANGE EQU   TMP2+7
TMPDEV   EQU   TMPKEY+5
TMPOLDA  EQU   TMPITEM
TMP3705  EQU   TMPITEM
TMPOLD   EQU   TMPCPUS
TMPCPU   EQU   TMPCPUS
TMPCUA   EQU   TMPSRT
TMPGROUP EQU   TMPKEY
TMTTEMP  EQU   TMT2+10
TMTPERM  EQU   TMTPERM1+1
@NM00011 EQU   TMTPERM1
TMTDEV   EQU   TMTKEY+6
TMTDAT   EQU   TMTKEY+5
TMTOLDA  EQU   TMTITEM
TMT3705  EQU   TMTITEM
TMTOLD   EQU   TMTCPUS
TMTCPU   EQU   TMTCPUS
TMTCUA   EQU   TMTSRT
TMTGROUP EQU   TMTKEY
SYMVAL2  EQU   SYMVAL+2
SYMVAL1  EQU   SYMVAL
SYMCDNUM EQU   SYMCODE
SERVAL   EQU   DEVSERAL+2
SERNUM   EQU   DEVSERAL
LOADPTR  EQU   EDITABLE+8
LOADNAME EQU   EDITABLE
EDITNUM  EQU   EDITLOAD
SHARLET  EQU   SHAREIO+15
SYSUMEOD EQU   SYSUMONE+96
SYSUMPER EQU   SYSUMONE+92
SYSUMPEA EQU   SYSUMONE+88
SYSUMPEI EQU   SYSUMONE+84
SYSUMCH  EQU   SYSUMONE+20
SYSUMMCN EQU   SYSUMONE+16
SYSUMMCR EQU   SYSUMONE+12
SYSUMNXT EQU   SYSUMONE+8
SYSUMIPL EQU   SYSUMONE+4
SYSUMNUM EQU   SYSUMONE
SORTCORE EQU   SORTCCHR
SORTTIME EQU   SORTKEY+1
SORTYEAR EQU   SORTKEY
EVLETTER EQU   EVKEY+5
EVSERIAL EQU   EVKEY+2
EVMODEL  EQU   EVKEY
EVNUM    EQU   EVTABLE+4
EVDAY    EQU   EVSTOP+1
EVYEAR   EQU   EVSTOP
TREPRE   EQU   TREGEN+72
TRECCHF  EQU   TREGEN+68
TRECCHE  EQU   TREGEN+64
TRECCHD  EQU   TREGEN+60
TRECCHC  EQU   TREGEN+56
TRECCHB  EQU   TREGEN+52
TRECCHA  EQU   TREGEN+48
TRECCH9  EQU   TREGEN+44
TRECCH8  EQU   TREGEN+40
TRECCH7  EQU   TREGEN+36
TRECCH6  EQU   TREGEN+32
TRECCH5  EQU   TREGEN+28
TRECCH4  EQU   TREGEN+24
TRECCH3  EQU   TREGEN+20
TRECCH2  EQU   TREGEN+16
TRECCH1  EQU   TREGEN+12
TRECCH0  EQU   TREGEN+8
TREMCH   EQU   TREGEN+4
TREIPL   EQU   TREGEN
TRENUM   EQU   TRENDONE+4
TRENEXT  EQU   TRENDONE
DUMPSIZE EQU   DUMPINFO+4
DUMPADR  EQU   DUMPINFO
DUMPNUM  EQU   DUMPTABL
@NM00010 EQU   PARM+212
RECLNGT1 EQU   PARM+204
ADCPUT   EQU   PARM+144
LINECT   EQU   PARM+120
@NM00009 EQU   CCHHRLNG+5
@NM00008 EQU   ERRID+2
NUMDAYS  EQU   PARM+88
SYSRETRN EQU   @NM00007
NUMIN222 EQU   @NM00006
WRTHRSH  EQU   PARM+69
RDTHRSH  EQU   PARM+66
EVSDAY   EQU   STRTDATE+1
EVSYEAR  EQU   STRTDATE
PENSEC2  EQU   ENDTIME2+2
PENMIN2  EQU   ENDTIME2+1
PENHOUR2 EQU   ENDTIME2
PSTSEC2  EQU   STTIME2+2
PSTMIN2  EQU   STTIME2+1
PSTHOUR2 EQU   STTIME2
PENSEC1  EQU   ENDTIME1+2
PENMIN1  EQU   ENDTIME1+1
PENHOUR1 EQU   ENDTIME1
PSTSEC1  EQU   STTIME1+2
PSTMIN1  EQU   STTIME1+1
PSTHOUR1 EQU   STTIME1
@NM00005 EQU   ENDDT+4
PENDY    EQU   PEND+1
PENYR    EQU   PEND
@NM00004 EQU   ENDDATE
@NM00003 EQU   STDT+4
PSTDY    EQU   PSTD+1
PSTYR    EQU   PSTD
@NM00002 EQU   STDATE
YEARNOW  EQU   DATENOW+4
@NM00001 EQU   DATENOW+3
DAYNOW   EQU   DATENOW
CSNAP    EQU   CLOSEIO
CSYSIN   EQU   CLOSEIO
CSERLOG  EQU   CLOSEIO
CEREPPT  EQU   CLOSEIO
CTOURIST EQU   CLOSEIO
OSNAP    EQU   OPENIO
ODRCTWRK EQU   OPENIO
OSYSIN   EQU   OPENIO
OACCDEV  EQU   OPENIO
OACCIN   EQU   OPENIO
OSERLOG  EQU   OPENIO
OEREPPT  EQU   OPENIO
OTOURIST EQU   OPENIO
PZERO    EQU   MISC
DEBUG63  EQU   DEBUGA+3
DEBUG62  EQU   DEBUGA+3
DEBUG61  EQU   DEBUGA+3
DEBUG60  EQU   DEBUGA+3
DEBUG59  EQU   DEBUGA+3
DEBUG58  EQU   DEBUGA+3
DEBUG57  EQU   DEBUGA+3
DEBUG56  EQU   DEBUGA+3
DEBUG55  EQU   DEBUGA+2
DEBUG54  EQU   DEBUGA+2
DEBUG53  EQU   DEBUGA+2
DEBUG52  EQU   DEBUGA+2
DEBUG51  EQU   DEBUGA+2
DEBUG50  EQU   DEBUGA+2
DEBUG48  EQU   DEBUGA+2
DEBUG47  EQU   DEBUGA+1
DEBUG46  EQU   DEBUGA+1
DEBUG45  EQU   DEBUGA+1
DEBUG44  EQU   DEBUGA+1
DEBUG42  EQU   DEBUGA+1
DEBUG41  EQU   DEBUGA+1
DEBUG40  EQU   DEBUGA+1
DEBUG39  EQU   DEBUGA
DEBUG38  EQU   DEBUGA
DEBUG37  EQU   DEBUGA
DEBUG36  EQU   DEBUGA
DEBUG35  EQU   DEBUGA
DEBUG34  EQU   DEBUGA
DEBUG33  EQU   DEBUGA
DEBUG32  EQU   DEBUGA
DEBUG31  EQU   DEBUG+3
DEBUG30  EQU   DEBUG+3
DEBUG29  EQU   DEBUG+3
DEBUG28  EQU   DEBUG+3
DEBUG27  EQU   DEBUG+3
DEBUG26  EQU   DEBUG+3
DEBUG25  EQU   DEBUG+3
DEBUG24  EQU   DEBUG+3
DEBUG22  EQU   DEBUG+2
DEBUG21  EQU   DEBUG+2
DEBUG20  EQU   DEBUG+2
DEBUG19  EQU   DEBUG+2
DEBUG18  EQU   DEBUG+2
DEBUG17  EQU   DEBUG+2
DEBUG15  EQU   DEBUG+1
DEBUG14  EQU   DEBUG+1
DEBUG13  EQU   DEBUG+1
DEBUG12  EQU   DEBUG+1
DEBUG10  EQU   DEBUG+1
DEBUG9   EQU   DEBUG+1
DEBUG8   EQU   DEBUG+1
DEBUG7   EQU   DEBUG
DEBUG6   EQU   DEBUG
DEBUG5   EQU   DEBUG
DEBUG3   EQU   DEBUG
DEBUG2   EQU   DEBUG
DEBUG1   EQU   DEBUG
DEBUG0   EQU   DEBUG
SORTBRK  EQU   SWITCHES+1
COREFAIL EQU   SWITCHES+1
ANALYSIS EQU   SWITCHES+1
NOTALL   EQU   SWITCHES+1
NOSDR    EQU   SWITCHES
TIMESEQ  EQU   SWITCHES
SYSUM    EQU   SWITCHES
PARMTHR  EQU   SWITCHES
TREND    EQU   SWITCHES
SHORTOBR EQU   SWITCHES
PARMMES  EQU   SWITCHES
RDESUM   EQU   SWITCHES
PCCHFRAM EQU   RECTYPE+1
PMCHFRAM EQU   RECTYPE+1
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00217 EQU   @RC00214
@RF00240 EQU   @RC00228
@RF00272 EQU   @RC00264
@RC00306 EQU   @RC00304
@RC00364 EQU   @EL00003
@RF00458 EQU   @EL00004
@RF00465 EQU   @EL00005
@RF00468 EQU   @EL00005
@RF00470 EQU   @EL00005
@RC00483 EQU   @EL00006
@RC00534 EQU   @EL00007
@RC00537 EQU   @EL00007
@RC00540 EQU   @EL00007
@RC00543 EQU   @EL00007
@RC00546 EQU   @EL00007
@RC00549 EQU   @EL00007
@RC00552 EQU   @EL00007
@RC00555 EQU   @EL00007
@RC00558 EQU   @EL00007
@RF00571 EQU   @EL00008
@RF00581 EQU   @EL00009
@RC00588 EQU   @EL00010
@RC00607 EQU   @EL00010
@RC00642 EQU   @EL00011
@RC00653 EQU   @EL00011
@RC00698 EQU   @EL00012
@RC00708 EQU   @EL00012
@RC00725 EQU   @EL00013
@RC00735 EQU   @EL00013
@RC00752 EQU   @EL00014
@RC00762 EQU   @EL00014
@RF00777 EQU   @EL00015
@RC00784 EQU   @EL00016
@RC00792 EQU   @EL00017
@RC00800 EQU   @EL00017
@RC00808 EQU   @EL00018
@RF00816 EQU   @EL00018
@RC00821 EQU   @EL00019
@RF00850 EQU   @EL00020
@RF00864 EQU   @EL00021
@RC00868 EQU   @EL00022
@RF00882 EQU   @EL00022
@RF00889 EQU   @EL00022
@RF00895 EQU   @EL00023
@RF00898 EQU   @EL00023
@RC00907 EQU   @EL00024
@RC00919 EQU   @EL00024
@RF00965 EQU   @RC00963
@RF00982 EQU   @RC00963
@RC01066 EQU   @RC01064
@RF01084 EQU   @EL00028
@RF01133 EQU   @RC01091
@RF01138 EQU   @EL00029
@RC01140 EQU   @EL00029
@RF01174 EQU   @EL00030
@RC01209 EQU   @EL00031
@RC01186 EQU   @EL00031
@RF01226 EQU   @EL00031
@RF01273 EQU   @EL00032
@RC01307 EQU   @EL00035
@RF01401 EQU   @EL00040
@PB00042 EQU   @EL00001
@RC00311 EQU   @RC00306
@RC00485 EQU   @RC00483
@RC00611 EQU   @RC00607
@RC00657 EQU   @RC00653
@RC00712 EQU   @RC00708
@RC00739 EQU   @RC00735
@RC00823 EQU   @RC00821
@RF00826 EQU   @RC00821
@RC00828 EQU   @RC00821
@RC00831 EQU   @RC00821
@RF00835 EQU   @RC00821
@RF00870 EQU   @RC00868
@RF00877 EQU   @RC00868
@RF00912 EQU   @RC00907
@RC00922 EQU   @RC00919
@RC01144 EQU   @RC01140
@RC01188 EQU   @RC01186
@RF01205 EQU   @RC01186
@RF01314 EQU   @RC01307
@PB00041 EQU   @PB00042
@RF00513 EQU   @RC00485
@RC00615 EQU   @RC00611
@RC00661 EQU   @RC00657
@RF00716 EQU   @RC00712
@RF00743 EQU   @RC00739
@RF00926 EQU   @RC00922
@RF00928 EQU   @RC00922
@RC00930 EQU   @RC00922
@RC00937 EQU   @RC00922
@PB00040 EQU   @PB00041
@RC00619 EQU   @RC00615
@RC00665 EQU   @RC00661
@PB00039 EQU   @PB00040
@RC00622 EQU   @RC00619
@RC00669 EQU   @RC00665
@PB00038 EQU   @PB00039
@RF00627 EQU   @RC00622
@RF00680 EQU   @RC00669
@PB00037 EQU   @PB00038
@PB00036 EQU   @PB00037
@PB00035 EQU   @PB00036
@PB00034 EQU   @PB00035
@PB00033 EQU   @PB00034
@PB00032 EQU   @PB00033
@PB00031 EQU   @PB00032
@PB00030 EQU   @PB00031
@PB00029 EQU   @PB00030
@PB00028 EQU   @PB00029
@PB00027 EQU   @PB00028
@PB00026 EQU   @PB00027
@PB00025 EQU   @PB00026
@PB00024 EQU   @PB00025
@PB00023 EQU   @PB00024
@PB00022 EQU   @PB00023
@PB00021 EQU   @PB00022
@PB00020 EQU   @PB00021
@PB00019 EQU   @PB00020
@PB00018 EQU   @PB00019
@PB00017 EQU   @PB00018
@PB00016 EQU   @PB00017
@PB00015 EQU   @PB00016
@PB00014 EQU   @PB00015
@PB00013 EQU   @PB00014
@PB00012 EQU   @PB00013
@PB00011 EQU   @PB00012
@PB00010 EQU   @PB00011
@PB00009 EQU   @PB00010
@PB00008 EQU   @PB00009
@PB00007 EQU   @PB00008
@PB00006 EQU   @PB00007
@PB00005 EQU   @PB00006
@PB00004 EQU   @PB00005
@PB00003 EQU   @PB00004
@PB00002 EQU   @PB00003
@RF00257 EQU   @PB00002
@ENDDATA EQU   *
         END   IFCFILT1
