         TITLE 'IFCFILT2-RECORD FILTER FOR SYSTEM SUMMARY REPORT'
IFCFILT2 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IFCFILT2  79.011'                                 0001
         DROP  @15
@PROLOG  ST    @14,12(,@13)                                        0001
         STM   @00,@12,20(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  LA    @11,4095(,@12)                                      0001
         LA    @10,4095(,@11)                                      0001
         LA    @09,4095(,@10)                                      0001
         USING @PSTART,@12                                         0001
         USING @PSTART+4095,@11                                    0001
         USING @PSTART+8190,@10                                    0001
         USING @PSTART+12285,@09                                   0001
         ST    @13,@SA00001+4                                      0001
         LA    @14,@SA00001                                        0001
         ST    @14,8(,@13)                                         0001
         LR    @13,@14                                             0001
* IF DEBUG4 = ON THEN    /*PRINT THE NAME AND COMPILE DATE   @Z427VLS*/
         TM    DEBUG4(R2),B'00001000'                              0208
         BNO   @RF00208                                            0208
*  DO;                                                     /*@Z427VLS*/
*   R15 = R12 - 27;                                        /*@Z427VLS*/
         LR    R15,R12                                             0210
         SL    R15,@CF01125                                        0210
*   GEN(MVC  PRINTBDY(16),0(R15));                         /*@Z427VLS*/
         MVC  PRINTBDY(16),0(R15)
*   PRINTADR = ADDR(PRINTLIN);  /*SET UP IOHND COMM          @Z427VLS*/
         LA    @14,PRINTLIN                                        0212
         ST    @14,PRINTADR(,R2)                                   0212
*   CALL  IOHND(RITEPRTR);                                 /*@Z427VLS*/
         L     @15,ADIOHND(,R2)                                    0213
         LA    @01,@AL00213                                        0213
         BALR  @14,@15                                             0213
*   R15 = ZERO;                                            /*@Z427VLS*/
         SLR   R15,R15                                             0214
*  END;                                                    /*@Z427VLS*/
*  ZERO5 = ZERO5 && ZERO5;/*COMPAR WILL ALWAYS WORK NO MATTER LENG*/
@RF00208 XC    ZERO5(5),ZERO5                                      0216
*                         /* OF A SORT TABLE ENTRY           @Z427VLS*/
*                  /*PROCESS ERROR RECORDS SEQUENTIALLY      @Z427VLS*/
*  CALL INITAB;    /*GET CORE FOR SYSUM2, EVTABLE, AND ONE ENTRY  */
         BAL   @14,INITAB                                          0217
*                  /*OF SYSUMONE AND STSUMONE.               @Z427VLS*/
*  R15 = ERROR; /*GET RETURN CODES FROM INITAB               @Z427VLS*/
         L     R15,ERROR                                           0218
*DO WHILE R15 = SUCCESS & ENTRIES < MAXENT;                /*@0099VLS*/
         B     @DE00219                                            0219
@DL00219 DS    0H                                                  0220
*                                     /*DONT SET LAST ENTRY  @Z427VLS*/
*    CALL IOHND(READSEQ);                        /*GET A RECORD*/  0220
         L     @15,ADIOHND(,R2)                                    0220
         LA    @01,@AL00220                                        0220
         BALR  @14,@15                                             0220
*    IF R15 = SUCCESS THEN  /*CONTINUE IF NOT EOF OR UNREADABLE*/  0221
         LTR   R15,R15                                             0221
         BNZ   @RF00221                                            0221
*      DO;                                                 /*@Z427VLS*/
*        BUG(21) = BUG(21) + 1; /*NUMBER OF RECORDS RETRIEVED*/    0223
         LA    @14,1                                               0223
         AL    @14,BUG+80                                          0223
         ST    @14,BUG+80                                          0223
*IF ((LRTKEY1 & GENREC) = HEXA0)×   /* IF MCH OR CCH FRAME RECORD */
*   ((LRTKEY1 & GENREC) = HEXB0) THEN                              0224
         MVC   @TS00001(1),LRTKEY1(R7)                             0224
         NI    @TS00001,X'F0'                                      0224
         CLI   @TS00001,X'A0'                                      0224
         BE    @RT00224                                            0224
         MVC   @TS00001(1),LRTKEY1(R7)                             0224
         NI    @TS00001,X'F0'                                      0224
         CLI   @TS00001,X'B0'                                      0224
         BNE   @RF00224                                            0224
@RT00224 DS    0H                                                  0225
* DO;                                                      /*@G51DGBB*/
*  CALL FLIMFRAM; /*PROCESS FRAME RECORDS                    @G51DGBB*/
         BAL   @14,FLIMFRAM                                        0226
*  R15 = ERROR; /*GET FRAME PROCESSING ERROR CONDITIONS      @G51DGBB*/
         L     R15,ERROR                                           0227
* END;                                                     /*@G51DGBB*/
*ELSE  /*NORMAL ERROR RECORD PROCESSING                      @G51DGBB*/
*  DO; /*NON FRAME RECORDS                                   @G51DGBB*/
         B     @RC00224                                            0229
@RF00224 DS    0H                                                  0230
*        CALL ALLREC;          /*SELECT BY RECORD HEADER CRITERIA*/
         BAL   @14,ALLREC                                          0230
*        IF PASSFLAG = YES THEN                                    0231
         TM    PASSFLAG(R2),B'00000001'                            0231
         BNO   @RF00231                                            0231
*          DO;                                             /*@Z427VLS*/
*            BUG(22) = BUG(22) + 1; /*PASS DATE, TIME FILTER COUNT*/
         LA    @14,1                                               0233
         AL    @14,BUG+84                                          0233
         ST    @14,BUG+84                                          0233
*            CALL RECDEP; /*ADD TO SYSUMONE,SYSUM2 IF PASS   @Z427VLS*/
         BAL   @14,RECDEP                                          0234
*              EVSTOP = LRTYRDAY;  /*THEN CHANGE LAST DAY FOR REPORT */
         L     @14,EVPTR(,R2)                                      0235
         MVC   EVSTOP(3,@14),LRTYRDAY(R7)                          0235
*            IF LRTYRDAY < STRTDATE THEN /*CHK START DATE FOR NEW LOW*/
         CLC   LRTYRDAY(3,R7),STRTDATE(R2)                         0236
         BNL   @RF00236                                            0236
*              STRTDATE = LRTYRDAY;      /*CHANGE START DATE OF DATA */
         MVC   STRTDATE(3,R2),LRTYRDAY(R7)                         0237
*            IF PACC = YES THEN    /*HISTORY D.S. TO BE CREATED*/  0238
@RF00236 TM    PACC(R2),B'01000000'                                0238
         BNO   @RF00238                                            0238
*                CALL IOHND(RITEHIST);  /*WRITE TO ACCDEV    @Z427VLS*/
         L     @15,ADIOHND(,R2)                                    0239
         LA    @01,@AL00239                                        0239
         BALR  @14,@15                                             0239
*               IF R15 = SUCCESS & SYSUMKEY  ^= ZERO5              0240
*               THEN DO; /*NO ERRORS PLUS ENTRY FOR NON 0 CPU CREATED*/
@RF00238 LTR   R15,R15                                             0240
         BNZ   @RF00240                                            0240
         CLC   SYSUMKEY(5),ZERO5                                   0240
         BE    @RF00240                                            0240
*               /*IF IF RECORD HAS BEEN SAVED IN SYSUM2 THEN MUST UP*/
*                CALL ADDVALUE;   /*BUILD THE SORT TABLE ENTRY*/   0242
         BAL   @14,ADDVALUE                                        0242
*                    SYSUM2  = (SYSUM2  && SYSUM2 ); /*CLEAR @0099VLS*/
         XC    SYSUM2(14),SYSUM2                                   0243
*               END;                                       /*@Z427VLS*/
*            ELSE                                                  0245
*              IF R15 ^= SUCCESS THEN                              0245
         B     @RC00240                                            0245
@RF00240 LTR   R15,R15                                             0245
         BZ    @RF00245                                            0245
*                ZEROALL = NO; /*DONT RESET LOGREC HEADER OF ALL */
         NI    ZEROALL(R2),B'10111111'                             0246
*                             /*RECORDS NOT PROCESSED        @Z427VLS*/
*          END;                                            /*@Z427VLS*/
@RF00245 DS    0H                                                  0247
@RC00240 DS    0H                                                  0248
*   END; /*END OF NON-FRAME ERROR RECORD SEQUENTIAL PROCESSING*/   0248
@RF00231 DS    0H                                                  0249
*      END;                                                /*@Z427VLS*/
@RC00224 DS    0H                                                  0250
*  END;                                                    /*@Z427VLS*/
@RF00221 DS    0H                                                  0250
@DE00219 LTR   R15,R15                                             0250
         BNZ   @DC00219                                            0250
         L     @14,ENTRIES                                         0250
         C     @14,MAXENT                                          0250
         BL    @DL00219                                            0250
@DC00219 DS    0H                                                  0251
*  ERROR = R15; /*TELL ENDOFILE IF THERE ARE ERRORS          @Z427VLS*/
         ST    R15,ERROR                                           0251
*PASSNUM = ENTRIES - 1;                                    /*@0099VLS*/
         L     @14,ENTRIES                                         0252
         BCTR  @14,0                                               0252
         ST    @14,PASSNUM                                         0252
*  CALL ENDOFILE; /*SORT SORTABLE, FREE EXCESS CORE, HANDLE  @Z427VLS*/
         BAL   @14,ENDOFILE                                        0253
*                 /*ERROR CONDITIONS                         @Z427VLS*/
*  R15 = ERROR; /*PRESERVE R.C. ALTERATION FROM ENDOFILE PROC*/    0254
         L     R15,ERROR                                           0254
*  IF DEBUG16 = ON THEN                                            0255
         TM    DEBUG16(R2),B'10000000'                             0255
         BNO   @RF00255                                            0255
*    CALL BUGCNTS; /*PRINT COUNTS OF DIFFERENT RECORD TYPES PROCESSED*/
         BAL   @14,BUGCNTS                                         0256
*  IF DEBUG11 = ON THEN                                            0257
@RF00255 TM    DEBUG11(R2),B'00010000'                             0257
         BNO   @RF00257                                            0257
*    GEN(ABEND 220,DUMP); /*SHOW STATUS IF TESTING SITUATION @Z427VLS*/
         ABEND 220,DUMP
*RESPECIFY (R15) UNRESTRICTED;                             /*@Z427VLS*/
*INITAB: PROC;                                             /*@Z427VLS*/
@EL00001 L     @13,4(,@13)                                         0260
@EF00001 DS    0H                                                  0260
@ER00001 L     @14,12(,@13)                                        0260
         LM    @00,@12,20(@13)                                     0260
         BR    @14                                                 0260
INITAB   STM   @14,@12,@SA00002                                    0260
*RESPECIFY(R0,R15) RESTRICTED;                             /*@Z427VLS*/
*/*CORE IS ALLOCATED FOR SYSUM2, EVTABLE, THE SUMMARY COLUMN ENTRY OF*/
*/*SYSUMONE. IF SHARE TABLE EXISTS, EXTRA ENTRIES OF SYSUMONE ARE  */
*/* ALLOCATED FOR EVERY UNIQUE CPU SERIAL ENCOUNTERED IN SHARE     */
*/* TABLE. ERROR MESSAGES ARE ISSUED AND A SERIOUS RETURN CODE     */
*/*     ISSUED IF CORE IS NOT AVAILABLE                      @Z427VLS*/
*R0 = TABSIZE + EVSIZE + SUMSIZE1; /*GET CORE FOR ALL TABLES @Z427VLS*/
         LA    R0,256                                              0262
         AL    R0,TABSIZE(,R2)                                     0262
*GEN(GETMAIN EC,LV=(R0),A=EVPTR1);                         /*@Z427VLS*/
         GETMAIN EC,LV=(R0),A=EVPTR1
*IF R15 ^= SUCCESS THEN                                            0264
         LTR   R15,R15                                             0264
         BZ    @RF00264                                            0264
*  DO;                                                     /*@Z427VLS*/
*    MSGNO = 2;                                            /*@Z427VLS*/
         MVI   MSGNO,X'02'                                         0266
*    CALL ERRMSG;                                          /*@Z427VLS*/
         BAL   @14,ERRMSG                                          0267
*    R15 = NOSRTABL;                                       /*@0001VLS*/
         LA    R15,12                                              0268
*    GETFAIL = YES;                                        /*@0001VLS*/
         OI    GETFAIL,B'00001000'                                 0269
*  END;                                                    /*@Z427VLS*/
*ELSE                                                              0271
*  DO;                                                     /*@Z427VLS*/
         B     @RC00264                                            0271
@RF00264 DS    0H                                                  0272
*  MAXENT = TABSIZE/14;    /*DETERMINE MAX # OF ENTRIES      @D3506GB*/
         L     @04,TABSIZE(,R2)                                    0272
         SRDA  @04,32                                              0272
         D     @04,@CF01057                                        0272
         ST    @05,MAXENT                                          0272
*    EVPTR = EVPTR1; /*ESTABLISH EVTABLE ADDRESSIBILITY      @Z427VLS*/
         L     @14,EVPTR1                                          0273
         ST    @14,EVPTR(,R2)                                      0273
*    EVSTOP = '00000F'X; /*INSURE VALUE ALWAYS SET FROM FIRST RECORD*/
         MVC   EVSTOP(3,@14),@CB00228                              0274
*    STRTDATE = '99366F'X; /*LIKEWISE FOR START DATE         @Z427VLS*/
         MVC   STRTDATE(3,R2),@CB01361                             0275
*    EVTABLE = (EVTABLE && EVTABLE); /*CLEAR TO HEX ZEROS    @Z427VLS*/
         XC    EVTABLE(102,@14),EVTABLE(@14)                       0276
*    STSUMPTR = EVPTR1 + EVSIZE; /*LOCATION JUST BEYOND EVTABLE*/  0277
         LA    @08,128                                             0277
         ALR   @14,@08                                             0277
         ST    @14,STSUMPTR                                        0277
*    SORTADR = STSUMPTR + SUMSIZE1;                        /*@Z427VLS*/
         ALR   @08,@14                                             0278
         ST    @08,SORTADR(,R2)                                    0278
*    SYSUM2(1) = (SYSUM2(1) && SYSUM2(1));                 /*@Z427VLS*/
         XC    SYSUM2(1),SYSUM2                                    0279
*    STSUMONE = (STSUMONE && STSUMONE);                    /*@Z427VLS*/
         XC    STSUMONE(100,@14),STSUMONE(@14)                     0280
*    IF SHAREPTR ^= ZERO THEN                                      0281
         L     @14,SHAREPTR(,R2)                                   0281
         LTR   @14,@14                                             0281
         BZ    @RF00281                                            0281
*      DO;                                              /* @ZA17692 */
*        CALL SORTSHAR;   /* SORT SHARE TABLE CPU LETTER   @ZA17692 */
         BAL   @14,SORTSHAR                                        0283
*        DO J = 1 BY 1 TO SHARENUM WHILE R15 = SUCCESS;    /*@Z427VLS*/
         LA    @14,1                                               0284
         ST    @14,J                                               0284
         B     @DE00284                                            0284
@DL00284 LTR   R15,R15                                             0284
         BNZ   @DC00284                                            0284
*          UNIQUE = YES;                                   /*@Z427VLS*/
         OI    UNIQUE,B'00100000'                                  0285
*          DO K = 1 BY 1 TO EVMAX WHILE UNIQUE = YES;      /*@Z427VLS*/
         LA    @14,1                                               0286
         ST    @14,K                                               0286
@DL00286 TM    UNIQUE,B'00100000'                                  0286
         BNO   @DC00286                                            0286
*            IF SHARSERA(J) = EVSERIAL(K) THEN                     0287
         L     @08,J                                               0287
         SLA   @08,4                                               0287
         L     @01,SHAREPTR(,R2)                                   0287
         MH    @14,@CH00081                                        0287
         L     @06,EVPTR(,R2)                                      0287
         ALR   @01,@08                                             0287
         AL    @01,@CF01560                                        0287
         ALR   @06,@14                                             0287
         CLC   SHARSERA-10(3,@01),EVSERIAL-6(@06)                  0287
         BNE   @RF00287                                            0287
*              UNIQUE = NO;                                /*@Z427VLS*/
         NI    UNIQUE,B'11011111'                                  0288
*            ELSE IF EVSERIAL(K) = ZERO THEN                       0289
         B     @RC00287                                            0289
@RF00287 L     @14,K                                               0289
         MH    @14,@CH00081                                        0289
         L     @08,EVPTR(,R2)                                      0289
         L     @06,EVSERIAL-7(@14,@08)                             0289
         LA    @06,0(,@06)                                         0289
         LTR   @06,@06                                             0289
         BNZ   @RF00289                                            0289
*              DO;                                         /*@Z427VLS*/
*                UNIQUE = NO;                              /*@Z427VLS*/
         NI    UNIQUE,B'11011111'                                  0291
*                EVSERIAL(K) = SHARSERA(J);                /*@Z427VLS*/
         ST    @14,@TF00001                                        0292
         ALR   @14,@08                                             0292
         L     @06,J                                               0292
         SLA   @06,4                                               0292
         L     @03,SHAREPTR(,R2)                                   0292
         ST    @06,@TF00002                                        0292
         ALR   @06,@03                                             0292
         AL    @06,@CF01560                                        0292
         MVC   EVSERIAL-6(3,@14),SHARSERA-10(@06)                  0292
*                EVLETTER(K) = SHARLET(J);                 /*@Z427VLS*/
         LR    @14,@08                                             0293
         AL    @14,@TF00001                                        0293
         AL    @03,@TF00002                                        0293
         MVC   EVLETTER-6(1,@14),SHARLET-16(@03)                   0293
*                EVNUM = EVNUM + 1;                        /*@Z427VLS*/
         LA    @14,1                                               0294
         AH    @14,EVNUM(,@08)                                     0294
         STH   @14,EVNUM(,@08)                                     0294
*                    R0 = SUMSIZE1; /*SYSUMONE TABLE SIZE    @Z427VLS*/
         LA    R0,128                                              0295
*                    GEN(GETMAIN EC,LV=(R0),A=COMPLINK);   /*@Z427VLS*/
         GETMAIN EC,LV=(R0),A=COMPLINK
*                    IF R15  = SUCCESS THEN                        0297
         LTR   R15,R15                                             0297
         BNZ   @RF00297                                            0297
*                      DO;                                 /*@Z427VLS*/
*                        IF K > 1 THEN /*IF ALREADY SYSUMONE ENTRY*/
         CLC   K(4),@CF00055                                       0299
         BNH   @RF00299                                            0299
*                          SYSUMNXT = COMPLINK; /*POINT TO NEW ENTRY*/
         L     @01,SYSUMPTR(,R2)                                   0300
         L     @14,COMPLINK                                        0300
         ST    @14,SYSUMNXT(,@01)                                  0300
*                                               /*FROM OLD ENTRY*/ 0301
*                          SYSUMPTR = COMPLINK; /*ADDRESS NEW ENTRY*/
@RF00299 L     @14,COMPLINK                                        0301
         ST    @14,SYSUMPTR(,R2)                                   0301
*                          SAVEADR(K) = COMPLINK; /*SAVE ADDRESS*/ 0302
         L     @08,K                                               0302
         SLA   @08,2                                               0302
         ST    @14,SAVEADR-4(@08)                                  0302
*                          SYSUMONE = (SYSUMONE && SYSUMONE); /*CLEAR*/
         XC    SYSUMONE(100,@14),SYSUMONE(@14)                     0303
*                      END;                                /*@Z427VLS*/
*                    ELSE  /*IF GETMAIN FAILURE THEN         @Z427VLS*/
*                      DO;                                 /*@Z427VLS*/
         B     @RC00297                                            0305
@RF00297 DS    0H                                                  0306
*                        MSGNO = 1; /*SELECT ERROR TEXT      @Z427VLS*/
         MVI   MSGNO,X'01'                                         0306
*                        CALL ERRMSG; /*GO PRINT MESSAGE TO TOURIST*/
         BAL   @14,ERRMSG                                          0307
*                        R15 = NOSRTABL;                   /*@0001VLS*/
         LA    R15,12                                              0308
*                        GETFAIL = YES;                    /*@0001VLS*/
         OI    GETFAIL,B'00001000'                                 0309
*                      END;                                /*@Z427VLS*/
*              END;                                        /*@Z427VLS*/
@RC00297 DS    0H                                                  0312
*          END;                                          /* @Z427VLS */
@RF00289 DS    0H                                                  0312
@RC00287 LA    @14,1                                               0312
         AL    @14,K                                               0312
         ST    @14,K                                               0312
         C     @14,@CF00034                                        0312
         BNH   @DL00286                                            0312
@DC00286 DS    0H                                                  0313
*        END;                                            /* @Z427VLS */
         LA    @14,1                                               0313
         AL    @14,J                                               0313
         ST    @14,J                                               0313
@DE00284 L     @01,SHAREPTR(,R2)                                   0313
         CH    @14,SHARENUM(,@01)                                  0313
         BNH   @DL00284                                            0313
@DC00284 DS    0H                                                  0314
*      END;                                             /* @ZA17692 */
*  END;                                                    /*@Z427VLS*/
@RF00281 DS    0H                                                  0316
*  NUMUNSHR = EVNUM + 1;                                   /*@Z427VLS*/
@RC00264 L     @01,EVPTR(,R2)                                      0316
         LH    @01,EVNUM(,@01)                                     0316
         LA    @01,1(,@01)                                         0316
         STH   @01,NUMUNSHR                                        0316
*IF R15 = SUCCESS &  /*IF OTHER GETMAINS HAVE BEEN SUCCESSFULL  */ 0317
*         PACC = ON &  /*ONLY CHECK FRAMES IF WRITTEN TO ACCDEV*/  0317
*         (PMCH = ON × PCHAN = ON) THEN /*IF MCH OR CCH SELECTED*/ 0317
         LTR   R15,R15                                             0317
         BNZ   @RF00317                                            0317
         TM    PACC(R2),B'01000000'                                0317
         BNO   @RF00317                                            0317
         TM    PMCH(R2),B'11000000'                                0317
         BZ    @RF00317                                            0317
*  DO;                                                     /*@G51DGBB*/
* RESPECIFY (R1) RESTRICTED;                               /*@G51DGBB*/
*    R0 = FRAMBENT * EVMAX; /*NUMBER OF ENTRIES TIMES BYTES PER ENTRY*/
         LA    R0,240                                              0320
*    R0 = R0 + 4;           /*ADD FRAMENUM LENGTH            @G51DGBB*/
         AL    R0,@CF00064                                         0321
*    GEN(GETMAIN EC,LV=(R0),A=LINKPTR,SP=21); /*GET THE STORAGE*/  0322
         GETMAIN EC,LV=(R0),A=LINKPTR,SP=21
*    RESPECIFY (R0) UNRESTRICTED;                          /*@G51DGBB*/
*    IF R15 = SUCCESS THEN   /*IF GETMAIN SUCCESSFULL        @G51DGBB*/
         LTR   R15,R15                                             0324
         BNZ   @RF00324                                            0324
*      DO;                                                 /*@G51DGBB*/
*        FRAMEPTR = LINKPTR;  /*ESTABLISH FRAMETAB BASE ADDRESS*/  0326
         L     @14,LINKPTR                                         0326
         ST    @14,FRAMEPTR(,R2)                                   0326
*        DO Y = 1 BY 1 TO EVMAX; /*CLEAR FRAMETAB TO ZEROS   @G51DGBB*/
         LA    @14,1                                               0327
         ST    @14,Y                                               0327
@DL00327 DS    0H                                                  0328
*          FRAMEDTA(Y) = (FRAMEDTA(Y) && FRAMEDTA(Y));     /*@G51DGBB*/
         LR    @08,@14                                             0328
         MH    @08,@CH00227                                        0328
         L     @06,FRAMEPTR(,R2)                                   0328
         ALR   @06,@08                                             0328
         AL    @06,@CF01562                                        0328
         XC    FRAMEDTA-4(24,@06),FRAMEDTA-4(@06)                  0328
*        END;                                              /*@G51DGBB*/
         AL    @14,@CF00055                                        0329
         ST    @14,Y                                               0329
         C     @14,@CF00034                                        0329
         BNH   @DL00327                                            0329
*        FRAMENUM = ZEROS;                                 /*@G51DGBB*/
         L     @14,FRAMEPTR(,R2)                                   0330
         SLR   @08,@08                                             0330
         ST    @08,FRAMENUM(,@14)                                  0330
*      END;                                                /*@G51DGBB*/
*  ELSE  /*UNSUCCESSFULL GETMAIN                             @G51DGBB*/
*    DO;                                                   /*@G51DGBB*/
         B     @RC00324                                            0332
@RF00324 DS    0H                                                  0333
*      R15 = TWELVE;  /*DONT CONTINUE RETURN CODE            @G51DGBB*/
         LA    R15,12                                              0333
*      MSGNO = 40;   /*CORE NOT AVAILABLE MESSAGE            @G51DGBB*/
         MVI   MSGNO,X'28'                                         0334
*      CALL ERRMSG;  /*PRINT ERROR MESSAGE                   @G51DGBB*/
         BAL   @14,ERRMSG                                          0335
*    END;                                                  /*@G51DGBB*/
* END; /*END OF FRAMETAB GETMAIN                             @G51DGBB*/
@RC00324 DS    0H                                                  0338
*  ERROR = R15; /*COMMUNICATE ERROR CONDITIONS TO CALLING PROC*/   0338
@RF00317 ST    R15,ERROR                                           0338
*RESPECIFY(R0,R15) UNRESTRICTED;                           /*@Z427VLS*/
*END; /*END OF PROC INITAB                                   @Z427VLS*/
@EL00002 DS    0H                                                  0340
@EF00002 DS    0H                                                  0340
@ER00002 LM    @14,@12,@SA00002                                    0340
         BR    @14                                                 0340
*CONVERT: PROC;                                            /*@Z427VLS*/
CONVERT  STM   @14,@12,12(@13)                                     0341
*   RESPECIFY (R4,R5) RESTRICTED;                          /*@0099VLS*/
* DCL  T      FIXED(31) INIT(0);                           /*@Z427VLS*/
*DCL P    FIXED(31) INIT(0);                               /*@G51DGBB*/
*DCL Q    FIXED(31) INIT(0);                               /*@G51DGBB*/
* DCL  NEXTBYTE(1) CHAR(1) BASED(NEXTBY);                  /*@Z427VLS*/
* DCL  ADDNUM(1)   CHAR(1) BASED(ADDNXT);                  /*@Z427VLS*/
* DCL  CHARS       CHAR(16) INIT('0123456789ABCDEF');      /*@Z427VLS*/
*DO Q = NUMBER BY -1 TO 1;                                 /*@G51DGBB*/
         L     @08,NUMBER                                          0349
         ST    @08,Q                                               0349
         B     @DE00349                                            0349
@DL00349 DS    0H                                                  0350
* R4 = NEXTBYTE(Q);                                        /*@G51DGBB*/
         L     @06,NEXTBY                                          0350
         BCTR  @06,0                                               0350
         SLR   R4,R4                                               0350
         IC    R4,NEXTBYTE(@08,@06)                                0350
* P = 2 * Q;                                               /*@G51DGBB*/
         LR    @06,@08                                             0351
         ALR   @06,@06                                             0351
         ST    @06,P                                               0351
*  SRDL(R4,4);                                             /*@Z427VLS*/
         SRDL  R4,4                                                0352
*  SRL(R5,28);                                             /*@Z427VLS*/
         SRL   R5,28                                               0353
*  R5 = R5 + 1;                                            /*@Z427VLS*/
         LA    @03,1                                               0354
         ALR   R5,@03                                              0354
*  R4 = R4 + 1;                                            /*@Z427VLS*/
         ALR   R4,@03                                              0355
* ADDNUM(P-1) = CHARS(R4);                                 /*@G51DGBB*/
         L     @03,ADDNXT                                          0356
         ALR   @06,@03                                             0356
         BCTR  @06,0                                               0356
         BCTR  @06,0                                               0356
         LA    @15,CHARS-1(R4)                                     0356
         MVC   ADDNUM(1,@06),0(@15)                                0356
* ADDNUM(P) = CHARS(R5);                                   /*@G51DGBB*/
         L     @06,P                                               0357
         ALR   @03,@06                                             0357
         BCTR  @03,0                                               0357
         LA    @06,CHARS-1(R5)                                     0357
         MVC   ADDNUM(1,@03),0(@06)                                0357
* END;                                                     /*@Z427VLS*/
         BCTR  @08,0                                               0358
         ST    @08,Q                                               0358
@DE00349 LTR   @08,@08                                             0358
         BP    @DL00349                                            0358
*END;                                                      /*@Z427VLS*/
@EL00003 DS    0H                                                  0359
@EF00003 DS    0H                                                  0359
@ER00003 LM    @14,@12,12(@13)                                     0359
         BR    @14                                                 0359
*RESPECIFY (R4,R5) UNRESTRICTED;                           /*@Z427VLS*/
*/*******************************************************************/
*/*    THIS PROC WILL SEARCH THE SORT TABLE FOR A ENTRY WITH THE SAME*/
*/*    KEY AS THIS ONE THEN SUM THE PERM AND TEMP ERRORS WITH THIS REC*
*/*    IF NO MATCH CAN BE FOUND THEN CREATE A NEW ONE        @0099VLS*/
*/*                                                          @0099VLS*/
*ADDVALUE: PROC;                                           /*@0099VLS*/
ADDVALUE STM   @14,@12,@SA00004                                    0361
* DCL ZZ PTR(31)  INIT(0);                                 /*@0099VLS*/
* DCL Z1 FIXED(31)  INIT(0);                               /*@0099VLS*/
* DCL Z2 FIXED(31)  INIT(0);                               /*@0099VLS*/
* DCL Z3 FIXED(31)  INIT(0);                               /*@0099VLS*/
*DCL ZZ3 FIXED(31) INIT(0);                                /*@G51DGBB*/
* DCL  1  TMPA  BASED(ZZ),                                         0367
*        2 TMPKEYA   CHAR(8),                                      0367
*       2 TMPPERMA FIXED(15) BDY(BYTE),                            0367
*       2 TMPTEMPA FIXED(31) BDY(BYTE);                    /*@0099VLS*/
* FOUND = NO;        /*SET FLAG TO ASSUME THE WORST          @0099VLS*/
         NI    FOUND,B'01111111'                                   0368
* ZZ3 = ZZ3 + 1;     /*NUMBER OF RECORDS FOR PART 2          @0099VLS*/
         LA    @08,1                                               0369
         AL    @08,ZZ3                                             0369
         ST    @08,ZZ3                                             0369
*DO ZZ = SORTADR + (ENTRIES-1)*14 BY -14 TO SORTADR WHILE(         0370
*          FOUND = NO);                                    /*@D3506GB*/
         L     @08,ENTRIES                                         0370
         BCTR  @08,0                                               0370
         MH    @08,@CH01057                                        0370
         AL    @08,SORTADR(,R2)                                    0370
         ST    @08,ZZ                                              0370
         B     @DE00370                                            0370
@DL00370 TM    FOUND,B'10000000'                                   0370
         BNZ   @DC00370                                            0370
*  IF TMPKEYA = SYSUMKEY THEN                                      0371
         CLC   TMPKEYA(7,@08),SYSUMKEY                             0371
         BNE   @RF00371                                            0371
*   DO;                                                    /*@0099VLS*/
*    TMPPERMA = TMPPERMA + SYSPERM1;                       /*@0099VLS*/
         ICM   @06,12,TMPPERMA(@08)                                0373
         SRA   @06,16                                              0373
         ICM   @03,12,SYSPERM1                                     0373
         SRA   @03,16                                              0373
         ALR   @06,@03                                             0373
         STCM  @06,3,TMPPERMA(@08)                                 0373
*    TMPTEMPA = TMPTEMPA + SYSTEMP;                        /*@0099VLS*/
         ICM   @06,15,TMPTEMPA(@08)                                0374
         ICM   @03,15,SYSTEMP                                      0374
         ALR   @06,@03                                             0374
         STCM  @06,15,TMPTEMPA(@08)                                0374
*    FOUND = YES;                                          /*@0099VLS*/
         OI    FOUND,B'10000000'                                   0375
*   END;                                                   /*@0099VLS*/
* END;                                                     /*@0099VLS*/
@RF00371 L     @08,@CF01392                                        0377
         AL    @08,ZZ                                              0377
         ST    @08,ZZ                                              0377
@DE00370 C     @08,SORTADR(,R2)                                    0377
         BNL   @DL00370                                            0377
@DC00370 DS    0H                                                  0378
* IF FOUND = NO THEN                                               0378
         TM    FOUND,B'10000000'                                   0378
         BNZ   @RF00378                                            0378
*  DO;                                                     /*@0099VLS*/
*   TMP2(ENTRIES) = SYSUM2;                                /*@0099VLS*/
         L     @08,ENTRIES                                         0380
         LR    @06,@08                                             0380
         MH    @06,@CH01057                                        0380
         L     @03,SORTADR(,R2)                                    0380
         ALR   @03,@06                                             0380
         AL    @03,@CF01392                                        0380
         MVC   TMP2(14,@03),SYSUM2                                 0380
*   ENTRIES = ENTRIES + 1;                                 /*@0099VLS*/
         AL    @08,@CF00055                                        0381
         ST    @08,ENTRIES                                         0381
*  END;                                                    /*@0099VLS*/
*IF DEBUG50 = ON THEN                                              0383
@RF00378 TM    DEBUG50(R2),B'00100000'                             0383
         BNO   @RF00383                                            0383
* DO;                                                      /*@0099VLS*/
* NUMBER = 14;                                             /*@D3506GB*/
         MVC   NUMBER(4),@CF01057                                  0385
*  NEXTBY = ADDR(SYSUM2);                                  /*@0099VLS*/
         LA    @08,SYSUM2                                          0386
         ST    @08,NEXTBY                                          0386
*  ADDNXT = ADDR(PRINTBDY);                                /*@0099VLS*/
         LA    @08,PRINTBDY                                        0387
         ST    @08,ADDNXT                                          0387
*  CALL CONVERT;                                           /*@0099VLS*/
         BAL   @14,CONVERT                                         0388
*  IF FOUND = YES THEN                                             0389
         TM    FOUND,B'10000000'                                   0389
         BNO   @RF00389                                            0389
*  DO;                                                     /*@0099VLS*/
* NEXTBY = ZZ + 14;                                        /*@D3506GB*/
         LA    @08,14                                              0391
         AL    @08,ZZ                                              0391
         ST    @08,NEXTBY                                          0391
*  ADDNXT = ADDR(PRINTBDY) + 40;                           /*@0099VLS*/
         LA    @08,PRINTBDY                                        0392
         AL    @08,@CF01236                                        0392
         ST    @08,ADDNXT                                          0392
*  CALL CONVERT;                                           /*@0099VLS*/
         BAL   @14,CONVERT                                         0393
*  END;                                                    /*@0099VLS*/
*  PRINTADR = ADDR(PRINTLIN);                              /*@0099VLS*/
@RF00389 LA    @08,PRINTLIN                                        0395
         ST    @08,PRINTADR(,R2)                                   0395
*  CALL IOHND(RITEPRTR);                                   /*@0099VLS*/
         L     @15,ADIOHND(,R2)                                    0396
         LA    @01,@AL00396                                        0396
         BALR  @14,@15                                             0396
* END;                                                     /*@0099VLS*/
*SYSUM2  = SYSUM2  && SYSUM2;    /*CLEAR FOR THE NEXT ENTRY  @0099VLS*/
@RF00383 XC    SYSUM2(14),SYSUM2                                   0398
*END;                                                      /*@0099VLS*/
@EL00004 DS    0H                                                  0399
@EF00004 DS    0H                                                  0399
@ER00004 LM    @14,@12,@SA00004                                    0399
         BR    @14                                                 0399
*CUASELCT: PROC;                                           /*@Z427VLS*/
CUASELCT STM   @14,@12,12(@13)                                     0400
*CUAOK = NO;                                               /*@Z427VLS*/
         NI    CUAOK,B'10111111'                                   0401
*DO Z = 1 BY 1 TO CUANUM WHILE(CUAOK = NO);                /*@Z427VLS*/
         LA    @08,1                                               0402
         ST    @08,Z                                               0402
         B     @DE00402                                            0402
@DL00402 TM    CUAOK,B'01000000'                                   0402
         BNZ   @DC00402                                            0402
* IF WORKDEV >= CUA1(Z) & WORKDEV <= CUA2(Z) THEN                  0403
         SLA   @08,2                                               0403
         L     @06,CUAPTR(,R2)                                     0403
         ST    @08,@TF00001                                        0403
         ALR   @08,@06                                             0403
         BCTR  @08,0                                               0403
         BCTR  @08,0                                               0403
         CLC   WORKDEV(2),CUA1-2(@08)                              0403
         BL    @RF00403                                            0403
         AL    @06,@TF00001                                        0403
         CLC   WORKDEV(2),CUA2-4(@06)                              0403
         BH    @RF00403                                            0403
*  CUAOK = YES;                                            /*@Z427VLS*/
         OI    CUAOK,B'01000000'                                   0404
*END;                                                      /*@Z427VLS*/
@RF00403 LA    @08,1                                               0405
         AL    @08,Z                                               0405
         ST    @08,Z                                               0405
@DE00402 L     @06,CUAPTR(,R2)                                     0405
         CH    @08,CUANUM(,@06)                                    0405
         BNH   @DL00402                                            0405
@DC00402 DS    0H                                                  0406
*IF CUAOK = NO THEN                                                0406
         TM    CUAOK,B'01000000'                                   0406
         BNZ   @RF00406                                            0406
*  DO;                                                     /*@D35UGGB*/
*    PASSFLAG = NO;                                        /*@D35UGGB*/
         NI    PASSFLAG(R2),B'11111110'                            0408
*    BUG(32) = BUG(32) + 1;                                /*@D35UGGB*/
         LA    @08,1                                               0409
         AL    @08,BUG+124                                         0409
         ST    @08,BUG+124                                         0409
*  END;                                                    /*@D35UGGB*/
*END;                                                      /*@Z427VLS*/
@EL00005 DS    0H                                                  0411
@EF00005 DS    0H                                                  0411
@ER00005 LM    @14,@12,12(@13)                                     0411
         BR    @14                                                 0411
*DEVSEL: PROC;                                             /*@Z427VLS*/
DEVSEL   STM   @14,@12,12(@13)                                     0412
*IF WORKTYPE = HEX90 THEN                                          0413
         CLI   WORKTYPE,X'90'                                      0413
         BNE   @RF00413                                            0413
*  DO;                                                     /*@Z427VLS*/
*    IF DEVEXCL = ON THEN                                          0415
         TM    DEVEXCL(R2),B'00100000'                             0415
         BNO   @RF00415                                            0415
*      DO;                                                 /*@Z427VLS*/
*        DEVOK = YES;                                      /*@Z427VLS*/
         OI    DEVOK,B'01000000'                                   0417
*        DO Z = 1 BY 1 TO MDRNUM WHILE DEVOK = YES;        /*@Z427VLS*/
         LA    @08,1                                               0418
         ST    @08,Z                                               0418
         B     @DE00418                                            0418
@DL00418 TM    DEVOK,B'01000000'                                   0418
         BNO   @DC00418                                            0418
*        IF TPRDEV = MDRVAL(Z) THEN                                0419
         L     @06,DEVPTR(,R2)                                     0419
         ALR   @06,@08                                             0419
         CLC   TPRDEV(1,R7),MDRVAL-1(@06)                          0419
         BNE   @RF00419                                            0419
*          DO;                                             /*@Z427VLS*/
*            DEVOK = NO;                                   /*@Z427VLS*/
         NI    DEVOK,B'10111111'                                   0421
*            PASSFLAG = NO;                                /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            0422
*          END;                                            /*@Z427VLS*/
*        END;                                              /*@Z427VLS*/
@RF00419 LA    @08,1                                               0424
         AL    @08,Z                                               0424
         ST    @08,Z                                               0424
@DE00418 L     @06,DEVPTR(,R2)                                     0424
         CH    @08,MDRNUM(,@06)                                    0424
         BNH   @DL00418                                            0424
@DC00418 DS    0H                                                  0425
*      END;                                                /*@Z427VLS*/
*    ELSE                                                          0426
*      DO;                                                 /*@Z427VLS*/
         B     @RC00415                                            0426
@RF00415 DS    0H                                                  0427
*        DEVOK = NO;                                       /*@Z427VLS*/
         NI    DEVOK,B'10111111'                                   0427
*        DO Z = 1 BY 1 TO MDRNUM WHILE DEVOK = NO;         /*@Z427VLS*/
         LA    @08,1                                               0428
         ST    @08,Z                                               0428
         B     @DE00428                                            0428
@DL00428 TM    DEVOK,B'01000000'                                   0428
         BNZ   @DC00428                                            0428
*        IF TPRDEV = MDRVAL(Z) THEN                                0429
         L     @06,DEVPTR(,R2)                                     0429
         ALR   @06,@08                                             0429
         CLC   TPRDEV(1,R7),MDRVAL-1(@06)                          0429
         BNE   @RF00429                                            0429
*          DEVOK = YES;                                    /*@Z427VLS*/
         OI    DEVOK,B'01000000'                                   0430
*        END;                                              /*@Z427VLS*/
@RF00429 LA    @08,1                                               0431
         AL    @08,Z                                               0431
         ST    @08,Z                                               0431
@DE00428 L     @06,DEVPTR(,R2)                                     0431
         CH    @08,MDRNUM(,@06)                                    0431
         BNH   @DL00428                                            0431
@DC00428 DS    0H                                                  0432
*        IF DEVOK = NO THEN                                        0432
         TM    DEVOK,B'01000000'                                   0432
         BNZ   @RF00432                                            0432
*          PASSFLAG = NO;                                  /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            0433
*       END;                                               /*@Z427VLS*/
*    END;                                                  /*@Z427VLS*/
*  ELSE                                                            0436
*    IF DEVEXCL = ON THEN                                          0436
         B     @RC00413                                            0436
@RF00413 TM    DEVEXCL(R2),B'00100000'                             0436
         BNO   @RF00436                                            0436
*      DO;                                                 /*@Z427VLS*/
*        DEVOK = YES;                                      /*@Z427VLS*/
         OI    DEVOK,B'01000000'                                   0438
*        DO Z = 1 BY 1 TO DEVNUM WHILE DEVOK = YES;        /*@Z427VLS*/
         LA    @08,1                                               0439
         ST    @08,Z                                               0439
         B     @DE00439                                            0439
@DL00439 TM    DEVOK,B'01000000'                                   0439
         BNO   @DC00439                                            0439
*          IF WORKDEV = DEVVAL(Z) THEN                             0440
         ALR   @08,@08                                             0440
         L     @06,DEVPTR(,R2)                                     0440
         ALR   @06,@08                                             0440
         CLC   WORKDEV(2),DEVVAL-2(@06)                            0440
         BNE   @RF00440                                            0440
*            DO;                                           /*@Z427VLS*/
*              DEVOK = NO;                                 /*@Z427VLS*/
         NI    DEVOK,B'10111111'                                   0442
*              PASSFLAG = NO;                              /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            0443
*            END;                                          /*@Z427VLS*/
*        END;                                              /*@Z427VLS*/
@RF00440 LA    @08,1                                               0445
         AL    @08,Z                                               0445
         ST    @08,Z                                               0445
@DE00439 L     @06,DEVPTR(,R2)                                     0445
         CH    @08,DEVNUM(,@06)                                    0445
         BNH   @DL00439                                            0445
@DC00439 DS    0H                                                  0446
*      END;                                                /*@Z427VLS*/
*  ELSE                                                            0447
*   DO;                                                    /*@Z427VLS*/
         B     @RC00436                                            0447
@RF00436 DS    0H                                                  0448
*     DEVOK = NO;                                          /*@Z427VLS*/
         NI    DEVOK,B'10111111'                                   0448
*     DO Z =  1 BY 1 TO DEVNUM WHILE DEVOK = NO;           /*@Z427VLS*/
         LA    @08,1                                               0449
         ST    @08,Z                                               0449
         B     @DE00449                                            0449
@DL00449 TM    DEVOK,B'01000000'                                   0449
         BNZ   @DC00449                                            0449
*       IF WORKDEV = DEVVAL(Z) THEN                                0450
         ALR   @08,@08                                             0450
         L     @06,DEVPTR(,R2)                                     0450
         ALR   @06,@08                                             0450
         CLC   WORKDEV(2),DEVVAL-2(@06)                            0450
         BNE   @RF00450                                            0450
*         DEVOK = YES;                                     /*@Z427VLS*/
         OI    DEVOK,B'01000000'                                   0451
*     END;                                                 /*@Z427VLS*/
@RF00450 LA    @08,1                                               0452
         AL    @08,Z                                               0452
         ST    @08,Z                                               0452
@DE00449 L     @06,DEVPTR(,R2)                                     0452
         CH    @08,DEVNUM(,@06)                                    0452
         BNH   @DL00449                                            0452
@DC00449 DS    0H                                                  0453
*     IF DEVOK = NO THEN                                           0453
         TM    DEVOK,B'01000000'                                   0453
         BNZ   @RF00453                                            0453
*       PASSFLAG = OFF;                                    /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            0454
*   END;                                                   /*@Z427VLS*/
@RF00453 DS    0H                                                  0456
*  IF PASSFLAG = OFF THEN                                  /*@D35UGGB*/
@RC00436 DS    0H                                                  0456
@RC00413 TM    PASSFLAG(R2),B'00000001'                            0456
         BNZ   @RF00456                                            0456
*   BUG(31) = BUG(31) + 1;                                         0457
         LA    @08,1                                               0457
         AL    @08,BUG+120                                         0457
         ST    @08,BUG+120                                         0457
*END;                                                      /*@Z427VLS*/
@EL00006 DS    0H                                                  0458
@EF00006 DS    0H                                                  0458
@ER00006 LM    @14,@12,12(@13)                                     0458
         BR    @14                                                 0458
*SUMONADR: PROC;                                           /*@Z427VLS*/
SUMONADR STM   @14,@12,@SA00007                                    0459
*RESPECIFY(R3,R15) RESTRICTED;                             /*@Z427VLS*/
*/*ADDRESS THE SYSUMONE ENTRY THAT RELATES TO THE RECORD CPU @Z427VLS*/
*/*SERIAL NUMBER. IF THE ENTRY DOES NOT EXIST, CREATE IT AND @Z427VLS*/
*/*ADDRESS IT. SYSUMONE ENTRY NUMBER IS EQUAL TO EVTABLE     @Z427VLS*/
*/*ENTRY NUMBER AT THIS STAGE OF IFCFILT2 EXECUTION. IF MORE @Z427VLS*/
*/*THAN 16 CPUS ARE IDENTIFIED, AN ERROR MESSAGE IS ISSUED   @Z427VLS*/
*/*THE FIRST TIME, AND THE RECORDS FOR THE EXCESS CPUS ARE   @Z427VLS*/
*/*SUMMED INTO THE 16TH CPU BUCKET BEFORE THE BUCKETS ARE IN @Z427VLS*/
*/*CPU SERIAL ORDER.                                         @Z427VLS*/
*    SYSUMPTR = SAVEADR(1); /*ADDRESS 1ST ENTRY IN SYSUMONE CHAIN*/
         L     @14,SAVEADR                                         0461
         ST    @14,SYSUMPTR(,R2)                                   0461
*                           /*MAY BE ZERO IF NO ENTRIES EXIST*/    0462
*    GETOUT = NO;                                          /*@Z427VLS*/
         NI    GETOUT,B'11110111'                                  0462
*    DO K = 1 BY 1 TO EVMAX WHILE GETOUT = NO;             /*@Z427VLS*/
         LA    @14,1                                               0463
         ST    @14,K                                               0463
@DL00463 TM    GETOUT,B'00001000'                                  0463
         BNZ   @DC00463                                            0463
*      IF EVSERIAL(K) = LRTCPUS THEN                               0464
         MH    @14,@CH00081                                        0464
         L     @08,EVPTR(,R2)                                      0464
         ST    @14,@TF00001                                        0464
         ALR   @14,@08                                             0464
         CLC   EVSERIAL-6(3,@14),LRTCPUS(R7)                       0464
         BNE   @RF00464                                            0464
*        DO;                                               /*@Z427VLS*/
*          EVMODEL(K) = LRTMODEL; /*SET IN CASE THIS ENTRY CREATED*/
         AL    @08,@TF00001                                        0466
         MVC   EVMODEL-6(2,@08),LRTMODEL(R7)                       0466
*          GETOUT = YES;          /*FROM EVTABLE ENTRY WHICH IS   */
         OI    GETOUT,B'00001000'                                  0467
*        END;                     /*MISSING MODEL NUMBER     @Z427VLS*/
*      ELSE                                                        0469
*        DO;                                               /*@Z427VLS*/
         B     @RC00464                                            0469
@RF00464 DS    0H                                                  0470
*          IF SYSUMNXT ^= ZERO & SYSUMPTR ^= ZERO THEN /*IF ANOTHER*/
         SLR   @14,@14                                             0470
         L     @08,SYSUMPTR(,R2)                                   0470
         L     @06,SYSUMNXT(,@08)                                  0470
         CR    @06,@14                                             0470
         BE    @RF00470                                            0470
         CR    @08,@14                                             0470
         BE    @RF00470                                            0470
*          /*ENTRY OF SYSUMONE AND ANOTHER ENTRY OF EVTABLE EXIST.*/
*          /*ALSO, IF AN ENTRY OF SYSUMONE HAS BEE N CREATED @Z427VLS*/
*                  SYSUMPTR = SYSUMNXT; /*RESET BASE TO NEXT ENTRY*/
         ST    @06,SYSUMPTR(,R2)                                   0471
*          ELSE /*IMPLIES WE HAVE SCANNED ALL EV ENTRIES WITH NO MATCH*
*            DO;                                           /*@Z427VLS*/
         B     @RC00470                                            0472
@RF00470 DS    0H                                                  0473
*              GETOUT = YES; /*EXIT LOOP IF CREATE AN ENTRY  @Z427VLS*/
         OI    GETOUT,B'00001000'                                  0473
*              IF K < EVMAX × /*IF ROOM TO CREATE EXTRA ENTRY*/    0474
*                 (K = EVMAX & EVSERIAL(K) = ZERO) THEN /*IF LAST */
         L     @14,K                                               0474
         LA    @08,10                                              0474
         CR    @14,@08                                             0474
         BL    @RT00474                                            0474
         CR    @14,@08                                             0474
         BNE   @RF00474                                            0474
         MH    @14,@CH00081                                        0474
         L     @08,EVPTR(,R2)                                      0474
         L     @14,EVSERIAL-7(@14,@08)                             0474
         LA    @14,0(,@14)                                         0474
         LTR   @14,@14                                             0474
         BNZ   @RF00474                                            0474
@RT00474 DS    0H                                                  0475
*                 /*ENTRY BUT IT REMAINS UNSET THEN          @Z427VLS*/
*                DO;                                       /*@Z427VLS*/
*                  L = EVNUM + 1; /*BUILD NEXT EVTABLE ENTRY @Z427VLS*/
         L     @14,EVPTR(,R2)                                      0476
         LA    @08,1                                               0476
         AH    @08,EVNUM(,@14)                                     0476
         ST    @08,L                                               0476
*                  R3 = SUMSIZE1; /*LENGTH OF SYSUMONE TABLE IN BYTES*/
         LA    R3,128                                              0477
*                  GEN(GETMAIN EC,LV=(R3),A=COMPLINK); /*GET CORE FOR*/
         GETMAIN EC,LV=(R3),A=COMPLINK
*                                           /*NEW SYSUMONE ENTRY*/ 0479
*                  IF R15 = SUCCESS THEN /*IF GOOD GETMAIN   @Z427VLS*/
         SLR   @14,@14                                             0479
         CR    R15,@14                                             0479
         BNE   @RF00479                                            0479
*                  DO;                                     /*@Z427VLS*/
*                  IF EVNUM > ZERO THEN /*DONT SET PTR IF ONLY ENTRY*/
         L     @08,EVPTR(,R2)                                      0481
         CH    @14,EVNUM(,@08)                                     0481
         BNL   @RF00481                                            0481
*                    SYSUMNXT = COMPLINK; /*SET PTR IN OLD ENT TO NEW*/
         L     @14,SYSUMPTR(,R2)                                   0482
         L     @08,COMPLINK                                        0482
         ST    @08,SYSUMNXT(,@14)                                  0482
*                  SYSUMPTR = COMPLINK; /*ADDRESS NEW ENTRY OF SYSUMON*
@RF00481 L     @14,COMPLINK                                        0483
         ST    @14,SYSUMPTR(,R2)                                   0483
*                  SYSUMONE = (SYSUMONE && SYSUMONE); /*CLEAR ENTRY*/
         XC    SYSUMONE(100,@14),SYSUMONE(@14)                     0484
*                  EVMODEL(L) = LRTMODEL; /*SET NEW EVTABLE ENTRY FOR*/
         L     @14,L                                               0485
         LR    @08,@14                                             0485
         MH    @08,@CH00081                                        0485
         L     @06,EVPTR(,R2)                                      0485
         ST    @08,@TF00001                                        0485
         ALR   @08,@06                                             0485
         MVC   EVMODEL-6(2,@08),LRTMODEL(R7)                       0485
*                  EVSERIAL(L) = LRTCPUS; /*CPU IDENTIFIED AS UNIQUE*/
         LR    @08,@06                                             0486
         AL    @08,@TF00001                                        0486
         MVC   EVSERIAL-6(3,@08),LRTCPUS(R7)                       0486
*                  SAVEADR(L) = SYSUMPTR; /*SAVE ADDRESS FOR SORTING*/
         SLA   @14,2                                               0487
         L     @08,SYSUMPTR(,R2)                                   0487
         ST    @08,SAVEADR-4(@14)                                  0487
*                  EVNUM = EVNUM + 1; /*ADD 1 TO NUMBER OF ENTRIES*/
         LA    @14,1                                               0488
         AH    @14,EVNUM(,@06)                                     0488
         STH   @14,EVNUM(,@06)                                     0488
*                  END;                                    /*@Z427VLS*/
*                  ELSE  /*IF UNSUCCESSFUL GETMAIN THEN      @Z427VLS*/
*                    DO;                                   /*@Z427VLS*/
         B     @RC00479                                            0490
@RF00479 DS    0H                                                  0491
*                      MSGNO = 1; /*REPORT LACK OF CORE FOR SYSTB*/
         MVI   MSGNO,X'01'                                         0491
*                      CALL ERRMSG;                        /*@Z427VLS*/
         BAL   @14,ERRMSG                                          0492
*                      R15 = NOSRTABL;                     /*@0001VLS*/
         LA    R15,12                                              0493
*                      GETFAIL = YES;                      /*@0001VLS*/
         OI    GETFAIL,B'00001000'                                 0494
*                    END;                                  /*@Z427VLS*/
*                END;                                      /*@Z427VLS*/
*              ELSE  /*HERE WE HAVE NEW CPU WITH NO ROOM IN EVTABLE*/
*                DO;                                       /*@Z427VLS*/
         B     @RC00474                                            0497
@RF00474 DS    0H                                                  0498
*                  BUG(13) = BUG(13) + 1; /*COUNT NMBER OF TIMES*/ 0498
         LA    @14,1                                               0498
         AL    @14,BUG+48                                          0498
         ST    @14,BUG+48                                          0498
*                  IF FIRSTIME = OFF   THEN /*PRINT ERROR MESSAGE ONLY*
         TM    FIRSTIME,B'00000100'                                0499
         BNZ   @RF00499                                            0499
*                    DO;                    /*FOR FIRST EXCESS CPU*/
*                      MSGNO = 6;                          /*@Z427VLS*/
         MVI   MSGNO,X'06'                                         0501
*                      CALL ERRMSG;                        /*@Z427VLS*/
         BAL   @14,ERRMSG                                          0502
*                      EVSERIAL(K) = 'FFFFFF'X;            /*@Z427VLS*/
         L     @14,K                                               0503
         MH    @14,@CH00081                                        0503
         L     @08,EVPTR(,R2)                                      0503
         ST    @14,@TF00001                                        0503
         ALR   @14,@08                                             0503
         MVC   EVSERIAL-6(3,@14),@CB00237                          0503
*                      EVMODEL(K) = 'FFFF'X;               /*@Z427VLS*/
         AL    @08,@TF00001                                        0504
         MVC   EVMODEL-6(2,@08),@CB00261                           0504
*                      FIRSTIME = ON;       /*NEVER TO RETURN*/    0505
         OI    FIRSTIME,B'00000100'                                0505
*                    END;                                  /*@Z427VLS*/
*                 END;                                     /*@Z427VLS*/
@RF00499 DS    0H                                                  0508
*               END;                                       /*@Z427VLS*/
@RC00474 DS    0H                                                  0509
*             END;                                         /*@Z427VLS*/
@RC00470 DS    0H                                                  0510
*         END;                                             /*@Z427VLS*/
@RC00464 LA    @14,1                                               0510
         AL    @14,K                                               0510
         ST    @14,K                                               0510
         C     @14,@CF00034                                        0510
         BNH   @DL00463                                            0510
@DC00463 DS    0H                                                  0511
* ERROR = R15; /*COMMUNICATE BAD TIDINGS TO CALLING PROC     @Z427VLS*/
         ST    R15,ERROR                                           0511
*RESPECIFY(R3,R15) UNRESTRICTED;                           /*@Z427VLS*/
* END; /*CLOSING END FOR SUMONADR                            @Z427VLS*/
@EL00007 DS    0H                                                  0513
@EF00007 DS    0H                                                  0513
@ER00007 LM    @14,@12,@SA00007                                    0513
         BR    @14                                                 0513
*SORTONE: PROC; /*SORT EVTABLE IN DESCENDING ORDER BY MODEL, SERIAL*/
SORTONE  STM   @14,@12,@SA00008                                    0514
*               /*NUMBER FOR UNSHARED CPUS AND RELINK THE NEXT     */
*               /*ENTRY POINTERS FOR TABLE SYSUMONE.         @Z427VLS*/
*               /*SET EVLETTER FOR UNSHARED CPUS             @Z427VLS*/
*IF NUMUNSHR < EVNUM THEN  /*IF TWO OR MORE CPUS IDENTIFIED AND    */
         LH    @08,NUMUNSHR                                        0515
         L     @06,EVPTR(,R2)                                      0515
         CH    @08,EVNUM(,@06)                                     0515
         BNL   @RF00515                                            0515
*                          /*NOT IN SHARE TABLE THEN SORT.   @Z427VLS*/
*    DO J = NUMUNSHR BY 1 TO EVNUM - 1; /*SORT IN DESCENDING ORDER */
         ST    @08,J                                               0516
         B     @DE00516                                            0516
@DL00516 DS    0H                                                  0517
*      DO K = J+1 BY 1 TO EVNUM;                           /*@Z427VLS*/
         AL    @08,@CF00055                                        0517
         ST    @08,K                                               0517
         B     @DE00517                                            0517
@DL00517 DS    0H                                                  0518
*        IF EVKEY(J) < EVKEY(K) THEN                               0518
         L     @06,J                                               0518
         LA    @03,6                                               0518
         LR    @05,@06                                             0518
         MR    @04,@03                                             0518
         L     @04,EVPTR(,R2)                                      0518
         LR    @15,@03                                             0518
         MR    @14,@08                                             0518
         ST    @05,@TF00001                                        0518
         ALR   @05,@04                                             0518
         ST    @15,@TF00002                                        0518
         ALR   @15,@04                                             0518
         CLC   EVKEY-6(6,@05),EVKEY-6(@15)                         0518
         BNL   @RF00518                                            0518
*          DO;                                             /*@Z427VLS*/
*            EVKEY(J) = (EVKEY(J)   &&   EVKEY(K));        /*@Z427VLS*/
         LR    @03,@04                                             0520
         AL    @03,@TF00001                                        0520
         LR    @05,@04                                             0520
         AL    @05,@TF00001                                        0520
         MVC   @TS00001(6),EVKEY-6(@05)                            0520
         LR    @05,@04                                             0520
         AL    @05,@TF00002                                        0520
         XC    @TS00001(6),EVKEY-6(@05)                            0520
         MVC   EVKEY-6(6,@03),@TS00001                             0520
*            EVKEY(K) = (EVKEY(K)   &&   EVKEY(J));        /*@Z427VLS*/
         LR    @03,@04                                             0521
         AL    @03,@TF00002                                        0521
         LR    @05,@04                                             0521
         AL    @05,@TF00002                                        0521
         MVC   @TS00001(6),EVKEY-6(@05)                            0521
         LR    @05,@04                                             0521
         AL    @05,@TF00001                                        0521
         XC    @TS00001(6),EVKEY-6(@05)                            0521
         MVC   EVKEY-6(6,@03),@TS00001                             0521
*            EVKEY(J) = (EVKEY(J)   &&   EVKEY(K));        /*@Z427VLS*/
         LR    @03,@04                                             0522
         AL    @03,@TF00001                                        0522
         LR    @05,@04                                             0522
         AL    @05,@TF00001                                        0522
         MVC   @TS00001(6),EVKEY-6(@05)                            0522
         AL    @04,@TF00002                                        0522
         XC    @TS00001(6),EVKEY-6(@04)                            0522
         MVC   EVKEY-6(6,@03),@TS00001                             0522
*            SAVEADR(J) = (SAVEADR(J)  &&  SAVEADR(K));    /*@Z427VLS*/
         LR    @03,@06                                             0523
         SLA   @03,2                                               0523
         LR    @15,@08                                             0523
         SLA   @15,2                                               0523
         L     @00,SAVEADR-4(@03)                                  0523
         X     @00,SAVEADR-4(@15)                                  0523
         ST    @00,SAVEADR-4(@03)                                  0523
*            SAVEADR(K) = (SAVEADR(K)  &&  SAVEADR(J));    /*@Z427VLS*/
         X     @00,SAVEADR-4(@15)                                  0524
         ST    @00,SAVEADR-4(@15)                                  0524
*            SAVEADR(J) = (SAVEADR(J)  &&  SAVEADR(K));    /*@Z427VLS*/
         X     @00,SAVEADR-4(@03)                                  0525
         ST    @00,SAVEADR-4(@03)                                  0525
*            /*MUST NOW SHOW HOW EVTABLE HAS BEEN SORTED IN ORDER TO*/
*            /*ADJUST ENTRY POINTERS TO EVTABLE IN TABLE SYSUM2*/  0526
*            FLIP(J) = (FLIP(J) && FLIP(K));               /*@Z427VLS*/
         SLR   @15,@15                                             0526
         IC    @15,FLIP-1(@06)                                     0526
         SLR   @14,@14                                             0526
         IC    @14,FLIP-1(@08)                                     0526
         XR    @15,@14                                             0526
         STC   @15,FLIP-1(@06)                                     0526
*            FLIP(K) = (FLIP(K) && FLIP(J));               /*@Z427VLS*/
         SLR   @14,@14                                             0527
         IC    @14,FLIP-1(@08)                                     0527
         XR    @15,@14                                             0527
         STC   @15,FLIP-1(@08)                                     0527
*            FLIP(J) = (FLIP(J) && FLIP(K));               /*@Z427VLS*/
         SLR   @08,@08                                             0528
         IC    @08,FLIP-1(@06)                                     0528
         XR    @15,@08                                             0528
         STC   @15,FLIP-1(@06)                                     0528
*            IF J > 1 THEN                                         0529
         C     @06,@CF00055                                        0529
         BNH   @RF00529                                            0529
*             DO;                                          /*@Z427VLS*/
*               SYSUMPTR = SAVEADR(J-1);                   /*@Z427VLS*/
         L     @08,SAVEADR-8(@03)                                  0531
         ST    @08,SYSUMPTR(,R2)                                   0531
*               SYSUMNXT = SAVEADR(J);                     /*@Z427VLS*/
         ST    @00,SYSUMNXT(,@08)                                  0532
*             END;                                         /*@Z427VLS*/
*            SYSUMPTR = SAVEADR(J);                        /*@Z427VLS*/
@RF00529 L     @08,J                                               0534
         SLA   @08,2                                               0534
         L     @06,SAVEADR-4(@08)                                  0534
         ST    @06,SYSUMPTR(,R2)                                   0534
*            SYSUMNXT = SAVEADR(J+1);                      /*@Z427VLS*/
         L     @08,SAVEADR(@08)                                    0535
         ST    @08,SYSUMNXT(,@06)                                  0535
*            SYSUMPTR = SAVEADR(K-1);                      /*@Z427VLS*/
         L     @08,K                                               0536
         LR    @06,@08                                             0536
         SLA   @06,2                                               0536
         L     @03,SAVEADR-8(@06)                                  0536
         ST    @03,SYSUMPTR(,R2)                                   0536
*            SYSUMNXT = SAVEADR(K);                        /*@Z427VLS*/
         L     @15,SAVEADR-4(@06)                                  0537
         ST    @15,SYSUMNXT(,@03)                                  0537
*            IF K < EVNUM THEN                                     0538
         L     @03,EVPTR(,R2)                                      0538
         CH    @08,EVNUM(,@03)                                     0538
         BNL   @RF00538                                            0538
*              DO;                                         /*@Z427VLS*/
*                SYSUMPTR = SAVEADR(K);                    /*@Z427VLS*/
         ST    @15,SYSUMPTR(,R2)                                   0540
*                SYSUMNXT = SAVEADR(K+1);                  /*@Z427VLS*/
         L     @08,SAVEADR(@06)                                    0541
         ST    @08,SYSUMNXT(,@15)                                  0541
*              END;                                        /*@Z427VLS*/
*            IF K = EVNUM THEN /*DONT RESET LAST ENTRY FORWARD PTR*/
@RF00538 L     @08,K                                               0543
         L     @06,EVPTR(,R2)                                      0543
         CH    @08,EVNUM(,@06)                                     0543
         BNE   @RF00543                                            0543
*              DO;                                         /*@Z427VLS*/
*                SYSUMPTR = SAVEADR(K);                    /*@Z427VLS*/
         SLA   @08,2                                               0545
         L     @08,SAVEADR-4(@08)                                  0545
         ST    @08,SYSUMPTR(,R2)                                   0545
*                SYSUMNXT = 0; /*LAST ENTRY CANT POINT TO ANOTHER*/
         SLR   @06,@06                                             0546
         ST    @06,SYSUMNXT(,@08)                                  0546
*              END;                                        /*@Z427VLS*/
*          END;                                            /*@Z427VLS*/
@RF00543 DS    0H                                                  0549
*        END;                                              /*@Z427VLS*/
@RF00518 LA    @08,1                                               0549
         AL    @08,K                                               0549
         ST    @08,K                                               0549
@DE00517 L     @06,EVPTR(,R2)                                      0549
         CH    @08,EVNUM(,@06)                                     0549
         BNH   @DL00517                                            0549
*     END;                                                 /*@Z427VLS*/
         LA    @08,1                                               0550
         AL    @08,J                                               0550
         ST    @08,J                                               0550
@DE00516 L     @06,EVPTR(,R2)                                      0550
         LH    @06,EVNUM(,@06)                                     0550
         BCTR  @06,0                                               0550
         CR    @08,@06                                             0550
         BNH   @DL00516                                            0550
* CALL SUMTHEM; /*ADD TO SUMMARY COLUMN OF SYSUMONE          @Z427VLS*/
@RF00515 BAL   @14,SUMTHEM                                         0551
*END; /*CLOSING END TO PROC SORTONE                          @Z427VLS*/
@EL00008 DS    0H                                                  0552
@EF00008 DS    0H                                                  0552
@ER00008 LM    @14,@12,@SA00008                                    0552
         BR    @14                                                 0552
*SUMTHEM: PROC; /*SET SUMMARY COLUMN OF SYSUMONE AND LINK IT AS THE*/
SUMTHEM  STM   @14,@12,12(@13)                                     0553
*               /*FIRST ENTRY OF THE TABLE. SET EVLETTER FOR THOSE*/
*               /*ENTRIES IN WHICH IT IS UNSET               @Z427VLS*/
*IF NUMUNSHR < EVNUM + 1 THEN  /*IF SOME EVLETTERS REMAIN UNSET*/  0554
         LH    @08,NUMUNSHR                                        0554
         L     @06,EVPTR(,R2)                                      0554
         LA    @03,1                                               0554
         AH    @03,EVNUM(,@06)                                     0554
         CR    @08,@03                                             0554
         BNL   @RF00554                                            0554
*  DO J = NUMUNSHR BY 1 TO EVNUM;                          /*@Z427VLS*/
         ST    @08,J                                               0555
         B     @DE00555                                            0555
@DL00555 DS    0H                                                  0556
*    EVLETTER(J) = EVCON(J); /*GET APPROPRIATE NEXT CONSECUTIVE LETTR*/
         LR    @06,@08                                             0556
         MH    @06,@CH00081                                        0556
         L     @03,EVPTR(,R2)                                      0556
         ALR   @03,@06                                             0556
         LA    @06,EVCON-1(@08)                                    0556
         MVC   EVLETTER-6(1,@03),0(@06)                            0556
*  END;                                                    /*@Z427VLS*/
         AL    @08,@CF00055                                        0557
         ST    @08,J                                               0557
@DE00555 L     @06,EVPTR(,R2)                                      0557
         CH    @08,EVNUM(,@06)                                     0557
         BNH   @DL00555                                            0557
*/* ADD ALL CPU ENTRIES TO THE SUMMARY COLUMN ENTRY          @Z427VLS*/
*  SYSUMPTR = SAVEADR(1); /*ADDRESS 1ST SYSUMONE ENTRY       @Z427VLS*/
@RF00554 L     @08,SAVEADR                                         0558
         ST    @08,SYSUMPTR(,R2)                                   0558
*DO J = 1 BY 1 TO EVNUM;                                   /*@Z427VLS*/
         LA    @08,1                                               0559
         ST    @08,J                                               0559
         B     @DE00559                                            0559
@DL00559 DS    0H                                                  0560
*  SYSUMNUM = EVNUM + 1; /*NUMBER OF ENTRIES INTO PARTICULAR ENTRY*/
         L     @08,SYSUMPTR(,R2)                                   0560
         LA    @06,1                                               0560
         L     @03,EVPTR(,R2)                                      0560
         LH    @03,EVNUM(,@03)                                     0560
         ALR   @03,@06                                             0560
         ST    @03,SYSUMNUM(,@08)                                  0560
*  STSUMIPL = STSUMIPL + SYSUMIPL; /*ADD IPL COUNTER         @Z427VLS*/
         L     @03,STSUMPTR                                        0561
         L     @00,STSUMIPL(,@03)                                  0561
         AL    @00,SYSUMIPL(,@08)                                  0561
         ST    @00,STSUMIPL(,@03)                                  0561
*  STSUMMCR = STSUMMCR + SYSUMMCR; /*ADD MCH RECOVERABLE COUNTER*/ 0562
         L     @00,STSUMMCR(,@03)                                  0562
         AL    @00,SYSUMMCR(,@08)                                  0562
         ST    @00,STSUMMCR(,@03)                                  0562
*  STSUMMCN = STSUMMCN + SYSUMMCN; /*ADD MCH NON-RECOVERABLE COUNTER*/
         L     @00,STSUMMCN(,@03)                                  0563
         AL    @00,SYSUMMCN(,@08)                                  0563
         ST    @00,STSUMMCN(,@03)                                  0563
*  STSUMPEI = STSUMPEI + SYSUMPEI; /*ADD PGM INTERRUPT COUNTER*/   0564
         L     @00,STSUMPEI(,@03)                                  0564
         AL    @00,SYSUMPEI(,@08)                                  0564
         ST    @00,STSUMPEI(,@03)                                  0564
*  STSUMPEA = STSUMPEA + SYSUMPEA; /*ADD PGM ABEND COUNTER   @Z427VLS*/
         L     @00,STSUMPEA(,@03)                                  0565
         AL    @00,SYSUMPEA(,@08)                                  0565
         ST    @00,STSUMPEA(,@03)                                  0565
*  STSUMPER = STSUMPER + SYSUMPER; /*ADD PGM RESTART COUNTER @Z427VLS*/
         L     @00,STSUMPER(,@03)                                  0566
         AL    @00,SYSUMPER(,@08)                                  0566
         ST    @00,STSUMPER(,@03)                                  0566
*  STSUMEOD = STSUMEOD + SYSUMEOD; /*ADD EOD COUNTER         @Z427VLS*/
         L     @00,STSUMEOD(,@03)                                  0567
         AL    @00,SYSUMEOD(,@08)                                  0567
         ST    @00,STSUMEOD(,@03)                                  0567
*  DO K = 1 BY 1 TO 16; /*LOOP THROUGH ALL POSSIBLE CHANNELS @Z427VLS*/
         ST    @06,K                                               0568
@DL00568 DS    0H                                                  0569
*    STSUMCH(K) = STSUMCH(K) + SYSUMCH(K); /*ADD CHANNEL X TO CTR*/
         L     @08,STSUMPTR                                        0569
         LR    @03,@06                                             0569
         SLA   @03,2                                               0569
         L     @15,SYSUMPTR(,R2)                                   0569
         L     @00,STSUMCH-4(@03,@08)                              0569
         AL    @00,SYSUMCH-4(@03,@15)                              0569
         ST    @00,STSUMCH-4(@03,@08)                              0569
*  END;                                                    /*@Z427VLS*/
         AL    @06,@CF00055                                        0570
         ST    @06,K                                               0570
         C     @06,@CF00088                                        0570
         BNH   @DL00568                                            0570
*  SYSUMPTR = SYSUMNXT; /*UPDATE SYSUMONE ENTRY ADDRESS      @Z427VLS*/
         L     @08,SYSUMPTR(,R2)                                   0571
         L     @08,SYSUMNXT(,@08)                                  0571
         ST    @08,SYSUMPTR(,R2)                                   0571
*END;                                                      /*@Z427VLS*/
         LA    @08,1                                               0572
         AL    @08,J                                               0572
         ST    @08,J                                               0572
@DE00559 L     @06,EVPTR(,R2)                                      0572
         CH    @08,EVNUM(,@06)                                     0572
         BNH   @DL00559                                            0572
*/* LINK STSUMONE, SUMMARY COLUMN TO THE FIRST ENTRY OF SYSUMONE*/ 0573
*SYSUMPTR = STSUMPTR; /*ADDRESS SUMMARY COLUMN AS FIRST SYSUMONE ENTRY*
         L     @08,STSUMPTR                                        0573
         ST    @08,SYSUMPTR(,R2)                                   0573
*SYSUMNXT = SAVEADR(1); /*POINT TO FIRST CPU ENTRY           @Z427VLS*/
         L     @06,SAVEADR                                         0574
         ST    @06,SYSUMNXT(,@08)                                  0574
*SYSUMNUM = EVNUM + 1; /*NUMBER OF CPUS PLUS SUMMARY COLUMN  @Z427VLS*/
         L     @06,EVPTR(,R2)                                      0575
         LA    @03,1                                               0575
         AH    @03,EVNUM(,@06)                                     0575
         ST    @03,SYSUMNUM(,@08)                                  0575
*END; /*CLOSING END FOR SUMTHEM                              @Z427VLS*/
@EL00009 DS    0H                                                  0576
@EF00009 DS    0H                                                  0576
@ER00009 LM    @14,@12,12(@13)                                     0576
         BR    @14                                                 0576
*SORTSHAR: PROC;        /* SORT SHARE TABLE CPU BY LETTER  @ZA17692 */
SORTSHAR STM   @14,@12,12(@13)                                     0577
*  DO J=1 BY 1 TO SHARENUM-1;                           /* @ZA17692 */
         LA    @08,1                                               0578
         ST    @08,J                                               0578
         B     @DE00578                                            0578
@DL00578 DS    0H                                                  0579
*    DO K= J+1 BY 1 TO SHARENUM;                        /* @ZA17692 */
         AL    @08,@CF00055                                        0579
         ST    @08,K                                               0579
         B     @DE00579                                            0579
@DL00579 DS    0H                                                  0580
*      IF SHARLET(J) > SHARLET(K)  THEN               /* @ZA17692 */
         L     @06,J                                               0580
         SLA   @06,4                                               0580
         L     @03,SHAREPTR(,R2)                                   0580
         SLA   @08,4                                               0580
         ST    @06,@TF00001                                        0580
         ALR   @06,@03                                             0580
         ST    @08,@TF00002                                        0580
         ALR   @08,@03                                             0580
         CLC   SHARLET-16(1,@06),SHARLET-16(@08)                   0580
         BNH   @RF00580                                            0580
*        DO;                                            /* @ZA17692 */
*          SHAREIO(J)=(SHAREIO(J)&&SHAREIO(K));         /* @ZA17692 */
         LR    @08,@03                                             0582
         AL    @08,@TF00001                                        0582
         AL    @08,@CF01392                                        0582
         LR    @06,@03                                             0582
         AL    @06,@TF00001                                        0582
         AL    @06,@CF01392                                        0582
         MVC   @TS00001(16),SHAREIO-2(@06)                         0582
         LR    @06,@03                                             0582
         AL    @06,@TF00002                                        0582
         AL    @06,@CF01392                                        0582
         XC    @TS00001(16),SHAREIO-2(@06)                         0582
         MVC   SHAREIO-2(16,@08),@TS00001                          0582
*          SHAREIO(K)=(SHAREIO(K)&&SHAREIO(J));         /* @ZA17692 */
         LR    @08,@03                                             0583
         AL    @08,@TF00002                                        0583
         AL    @08,@CF01392                                        0583
         LR    @06,@03                                             0583
         AL    @06,@TF00002                                        0583
         AL    @06,@CF01392                                        0583
         MVC   @TS00001(16),SHAREIO-2(@06)                         0583
         LR    @06,@03                                             0583
         AL    @06,@TF00001                                        0583
         AL    @06,@CF01392                                        0583
         XC    @TS00001(16),SHAREIO-2(@06)                         0583
         MVC   SHAREIO-2(16,@08),@TS00001                          0583
*          SHAREIO(J)=(SHAREIO(J)&&SHAREIO(K));         /* @ZA17692 */
         LR    @08,@03                                             0584
         AL    @08,@TF00001                                        0584
         AL    @08,@CF01392                                        0584
         LR    @06,@03                                             0584
         AL    @06,@TF00001                                        0584
         AL    @06,@CF01392                                        0584
         MVC   @TS00001(16),SHAREIO-2(@06)                         0584
         AL    @03,@TF00002                                        0584
         AL    @03,@CF01392                                        0584
         XC    @TS00001(16),SHAREIO-2(@03)                         0584
         MVC   SHAREIO-2(16,@08),@TS00001                          0584
*        END;                                           /* @ZA17692 */
*     END;                                              /* @ZA17692 */
@RF00580 LA    @08,1                                               0586
         AL    @08,K                                               0586
         ST    @08,K                                               0586
@DE00579 L     @06,SHAREPTR(,R2)                                   0586
         CH    @08,SHARENUM(,@06)                                  0586
         BNH   @DL00579                                            0586
*  END;                                                 /* @ZA17692 */
         LA    @08,1                                               0587
         AL    @08,J                                               0587
         ST    @08,J                                               0587
@DE00578 L     @06,SHAREPTR(,R2)                                   0587
         LH    @06,SHARENUM(,@06)                                  0587
         BCTR  @06,0                                               0587
         CR    @08,@06                                             0587
         BNH   @DL00578                                            0587
*END;                       /*  CLOSING END FOR SORTSHAR   @ZA17692 */
@EL00010 DS    0H                                                  0588
@EF00010 DS    0H                                                  0588
@ER00010 LM    @14,@12,12(@13)                                     0588
         BR    @14                                                 0588
* RECDEP: PROC; /*IDENTIFY RECORD TYPE AND ACCUMULATE RECORD OR*/  0589
RECDEP   STM   @14,@12,@SA00011                                    0589
*               /*APPROPRIATE ERRORS IN SYSUMONE OR SYSUM2   @Z427VLS*/
* WORKTYPE = (LRTKEY1 & GENREC);                           /*@Z427VLS*/
         MVC   WORKTYPE(1),LRTKEY1(R7)                             0590
         NI    WORKTYPE,X'F0'                                      0590
* IF LRTRUNC = ON × (WORKTYPE < HEX10)                             0591
*                 × (WORKTYPE > HEX90) THEN                        0591
         TM    LRTRUNC(R7),B'00100000'                             0591
         BO    @RT00591                                            0591
         CLI   WORKTYPE,X'10'                                      0591
         BL    @RT00591                                            0591
         CLI   WORKTYPE,X'90'                                      0591
         BNH   @RF00591                                            0591
@RT00591 DS    0H                                                  0592
*   BUG(1) = BUG(1) + 1;                                   /*@Z427VLS*/
         LA    @08,1                                               0592
         AL    @08,BUG                                             0592
         ST    @08,BUG                                             0592
* ELSE                                                             0593
*   DO;                                                    /*@Z427VLS*/
         B     @RC00591                                            0593
@RF00591 DS    0H                                                  0594
*     IF WORKTYPE = HEX30 × WORKTYPE = HEX90 THEN /*OBR OR MDR REC.*/
         CLI   WORKTYPE,X'30'                                      0594
         BE    @RT00594                                            0594
         CLI   WORKTYPE,X'90'                                      0594
         BNE   @RF00594                                            0594
@RT00594 DS    0H                                                  0595
*       CALL CONTERR;                                      /*@Z427VLS*/
         BAL   @14,CONTERR                                         0595
*     ELSE                                                         0596
*       DO;                                                /*@Z427VLS*/
         B     @RC00594                                            0596
@RF00594 DS    0H                                                  0597
*         IF WORKTYPE = HEX40 THEN                                 0597
         CLI   WORKTYPE,X'40'                                      0597
         BNE   @RF00597                                            0597
*           DO;                                            /*@Z427VLS*/
*             CALL SUMONADR;                               /*@Z427VLS*/
         BAL   @14,SUMONADR                                        0599
*             CALL SOFTFILT;                               /*@Z427VLS*/
         BAL   @14,SOFTFILT                                        0600
*           END;                                           /*@Z427VLS*/
*         ELSE                                                     0602
*           DO;                                            /*@Z427VLS*/
         B     @RC00597                                            0602
@RF00597 DS    0H                                                  0603
*             IF WORKTYPE = HEX10 THEN                             0603
         CLI   WORKTYPE,X'10'                                      0603
         BNE   @RF00603                                            0603
*               DO;                                        /*@Z427VLS*/
*                 CALL SUMONADR;                           /*@Z427VLS*/
         BAL   @14,SUMONADR                                        0605
*                 CALL MCHFILT;                            /*@Z427VLS*/
         BAL   @14,MCHFILT                                         0606
*                 BUG(3) = BUG(3) + 1;                     /*@Z427VLS*/
         LA    @08,1                                               0607
         AL    @08,BUG+8                                           0607
         ST    @08,BUG+8                                           0607
*               END;                                       /*@Z427VLS*/
*             ELSE                                                 0609
*               DO;                                        /*@Z427VLS*/
         B     @RC00603                                            0609
@RF00603 DS    0H                                                  0610
*                 IF WORKTYPE = HEX20 THEN                         0610
         CLI   WORKTYPE,X'20'                                      0610
         BNE   @RF00610                                            0610
*                   DO;                                    /*@Z427VLS*/
*                     CALL SUMONADR;                       /*@Z427VLS*/
         BAL   @14,SUMONADR                                        0612
*                     SYSUMCH(WORKCHAN+1) = SYSUMCH(WORKCHAN+1) + 1;
         SLR   @08,@08                                             0613
         IC    @08,WORKCHAN(,R7)                                   0613
         SLA   @08,2                                               0613
         L     @06,SYSUMPTR(,R2)                                   0613
         LA    @03,1                                               0613
         L     @00,SYSUMCH(@08,@06)                                0613
         ALR   @00,@03                                             0613
         ST    @00,SYSUMCH(@08,@06)                                0613
*                     BUG(4) = BUG(4) + 1;                 /*@Z427VLS*/
         L     @08,BUG+12                                          0614
         ALR   @08,@03                                             0614
         ST    @08,BUG+12                                          0614
*                      IF FRAMEPTR ^= ZERO THEN /*IF FRAMETAB ALLOC*/
         L     @08,FRAMEPTR(,R2)                                   0615
         LTR   @08,@08                                             0615
         BZ    @RF00615                                            0615
*                      DO;                                 /*@G51DGBB*/
*                      GETOUT = NO;                        /*@G51DGBB*/
         NI    GETOUT,B'11110111'                                  0617
*                      DO A = 1 BY 1 TO MRDNUMBR WHILE GETOUT = NO;
         ST    @03,A                                               0618
         B     @DE00618                                            0618
@DL00618 TM    GETOUT,B'00001000'                                  0618
         BNZ   @DC00618                                            0618
*                      /*LOOP THROUGH LIST OF MERIDIAN-LIKE CPUS*/ 0619
*                      IF MODEL(A) = LRTMODEL THEN /*IF MERID-LIKE */
         ALR   @03,@03                                             0619
         L     @08,MERDCPTR(,R2)                                   0619
         ALR   @08,@03                                             0619
         CLC   MODEL-2(2,@08),LRTMODEL(R7)                         0619
         BNE   @RF00619                                            0619
*                        DO;                               /*@G51DGBB*/
*                          CALL BUILDFTB; /*SEE IF UNIQUE,BUILD IF IS*/
         BAL   @14,BUILDFTB                                        0621
*                          GETOUT = YES;  /*EXIT LOOP        @G51DGBB*/
         OI    GETOUT,B'00001000'                                  0622
*                        END;                              /*@G51DGBB*/
*                      END;                                /*@G51DGBB*/
@RF00619 LA    @03,1                                               0624
         AL    @03,A                                               0624
         ST    @03,A                                               0624
@DE00618 L     @08,MERDCPTR(,R2)                                   0624
         CH    @03,MRDNUMBR(,@08)                                  0624
         BNH   @DL00618                                            0624
@DC00618 DS    0H                                                  0625
*                      END;                                /*@G51DGBB*/
*                   END;                                   /*@Z427VLS*/
*                 ELSE                                             0627
*                   DO;                                    /*@Z427VLS*/
         B     @RC00610                                            0627
@RF00610 DS    0H                                                  0628
*                     IF WORKTYPE = HEX50 THEN                     0628
         CLI   WORKTYPE,X'50'                                      0628
         BNE   @RF00628                                            0628
*                       DO;                                /*@Z427VLS*/
*                         CALL SUMONADR;                   /*@Z427VLS*/
         BAL   @14,SUMONADR                                        0630
*                         SYSUMIPL = SYSUMIPL + 1;         /*@Z427VLS*/
         L     @08,SYSUMPTR(,R2)                                   0631
         LA    @06,1                                               0631
         L     @03,SYSUMIPL(,@08)                                  0631
         ALR   @03,@06                                             0631
         ST    @03,SYSUMIPL(,@08)                                  0631
*                         BUG(5) = BUG(5) + 1;             /*@Z427VLS*/
         AL    @06,BUG+16                                          0632
         ST    @06,BUG+16                                          0632
*                       END;                               /*@Z427VLS*/
*                     ELSE                                         0634
*                       DO;                                /*@Z427VLS*/
         B     @RC00628                                            0634
@RF00628 DS    0H                                                  0635
*                         IF WORKTYPE = HEX80 THEN                 0635
         CLI   WORKTYPE,X'80'                                      0635
         BNE   @RF00635                                            0635
*                           DO;                            /*@Z427VLS*/
*                             CALL SUMONADR;               /*@Z427VLS*/
         BAL   @14,SUMONADR                                        0637
*                             SYSUMEOD = SYSUMEOD + 1;     /*@Z427VLS*/
         L     @08,SYSUMPTR(,R2)                                   0638
         LA    @06,1                                               0638
         L     @03,SYSUMEOD(,@08)                                  0638
         ALR   @03,@06                                             0638
         ST    @03,SYSUMEOD(,@08)                                  0638
*                             BUG(6) = BUG(6) + 1;         /*@Z427VLS*/
         AL    @06,BUG+20                                          0639
         ST    @06,BUG+20                                          0639
*                           END;                           /*@Z427VLS*/
*                         ELSE /*VALID RECORD BUT NOT USED   @Z427VLS*/
*                           BUG(8) = BUG(8) + 1;           /*@Z427VLS*/
         B     @RC00635                                            0641
@RF00635 LA    @08,1                                               0641
         AL    @08,BUG+28                                          0641
         ST    @08,BUG+28                                          0641
*                       END;                               /*@Z427VLS*/
*                   END;                                   /*@Z427VLS*/
*               END;                                       /*@Z427VLS*/
*           END;                                           /*@Z427VLS*/
*       END;                                               /*@Z427VLS*/
*   END;                                                   /*@Z427VLS*/
*END; /*CLOSING END FOR RECDEP                               @Z427VLS*/
@EL00011 DS    0H                                                  0648
@EF00011 DS    0H                                                  0648
@ER00011 LM    @14,@12,@SA00011                                    0648
         BR    @14                                                 0648
*CONTERR: PROC; /*DETERMINE IF OBR OR MDR REPRESENTS PERMANENT */  0649
CONTERR  STM   @14,@12,@SA00012                                    0649
*               /*AND/OR TEMPORARY ERRORS. IF YES, SAVE ERROR  */  0650
*               /*COUNTS IN SYSUM2                           @Z427VLS*/
* IF PASSFLAG = ON THEN                                            0650
         TM    PASSFLAG(R2),B'00000001'                            0650
         BNO   @RF00650                                            0650
*   DO;                                                    /*@D3506GB*/
* IF CUAPTR ^= ZERO THEN                                           0652
         L     @08,CUAPTR(,R2)                                     0652
         LTR   @08,@08                                             0652
         BZ    @RF00652                                            0652
*   CALL CUASELCT;                                         /*@D35UGGB*/
         BAL   @14,CUASELCT                                        0653
* IF DEVPTR ^= ZERO THEN                                           0654
@RF00652 L     @08,DEVPTR(,R2)                                     0654
         LTR   @08,@08                                             0654
         BZ    @RF00654                                            0654
*   CALL DEVSEL;                                           /*@D35UGGB*/
         BAL   @14,DEVSEL                                          0655
* IF PASSFLAG = ON THEN                                            0656
@RF00654 TM    PASSFLAG(R2),B'00000001'                            0656
         BNO   @RF00656                                            0656
*   DO;                                                    /*@D35UGGB*/
*IF WORKTYPE = HEX30 THEN                                          0658
         CLI   WORKTYPE,X'30'                                      0658
         BNE   @RF00658                                            0658
*  CALL COUNTOBR;                                          /*@Z427VLS*/
         BAL   @14,COUNTOBR                                        0659
*ELSE                                                              0660
*  DO;                                                     /*@Z427VLS*/
         B     @RC00658                                            0660
@RF00658 DS    0H                                                  0661
*    IF LRTKEY1 = HEX91 & (TPRDEV = DV3705 × TPRDEV = DV3705A) THEN
         CLI   LRTKEY1(R7),X'91'                                   0661
         BNE   @RF00661                                            0661
         CLI   TPRDEV(R7),X'05'                                    0661
         BE    @RT00661                                            0661
         CLI   TPRDEV(R7),X'15'                                    0661
         BNE   @RF00661                                            0661
@RT00661 DS    0H                                                  0662
*      CALL CONTMDR;                                       /*@Z427VLS*/
         BAL   @14,CONTMDR                                         0662
*    ELSE /*MDR NOT TYPE 91 AND DEVICE TYPE 3705             @Z427VLS*/
*      DO;                                                 /*@Z427VLS*/
         B     @RC00661                                            0663
@RF00661 DS    0H                                                  0664
*        BUG(23) = BUG(23) + 1;                            /*@Z427VLS*/
         LA    @08,1                                               0664
         AL    @08,BUG+88                                          0664
         ST    @08,BUG+88                                          0664
*        IF TPRDEV = DV3330 ×                                      0665
*           TPRDEV = DV3340 ×                                      0665
*    (TPRDEV >='16'X & TPRDEV <= '1F'X) ×  /*FBA RANGE       @D35UGGB*/
*           TPRDEV = DV33302 ×                                     0665
*           TPRDEV = DV3350 THEN                                   0665
         CLI   TPRDEV(R7),X'01'                                    0665
         BE    @RT00665                                            0665
         CLI   TPRDEV(R7),X'09'                                    0665
         BE    @RT00665                                            0665
         CLI   TPRDEV(R7),X'16'                                    0665
         BL    @GL00016                                            0665
         CLI   TPRDEV(R7),X'1F'                                    0665
         BNH   @RT00665                                            0665
@GL00016 CLI   TPRDEV(R7),X'0A'                                    0665
         BE    @RT00665                                            0665
         CLI   TPRDEV(R7),X'11'                                    0665
         BNE   @RF00665                                            0665
@RT00665 DS    0H                                                  0666
* DO;                                                      /*@D35UGGB*/
*   IF TPRDEV < '16'X  × TPRDEV  > '1F'X THEN /*FBA RANGE    @D35UGGB*/
         CLI   TPRDEV(R7),X'16'                                    0667
         BL    @RT00667                                            0667
         CLI   TPRDEV(R7),X'1F'                                    0667
         BNH   @RF00667                                            0667
@RT00667 DS    0H                                                  0668
*            SYSTEMP  = SYSTEMP  /*ADD CORRECTIBLE DATA CHECKS*/   0668
*                       + TPRS1213   /*AND RETRY DATA CHECKS AND*/ 0668
*                       + TPRS1415   /*SEEK CHECKS           @Z427VLS*/
*                       + TPRS19;                          /*@Z427VLS*/
         LA    @08,TPRVOL(,R7)                                     0668
         LA    @06,15                                              0668
         SLR   @03,@03                                             0668
         IC    @03,TPRBUFC(,R7)                                    0668
         NR    @06,@03                                             0668
         ALR   @08,@06                                             0668
         AL    @08,@CF01185                                        0668
         ICM   @06,15,SYSTEMP                                      0668
         SLR   @03,@03                                             0668
         ICM   @03,3,TPRS1213(@08)                                 0668
         ALR   @06,@03                                             0668
         SLR   @03,@03                                             0668
         ICM   @03,3,TPRS1415(@08)                                 0668
         ALR   @06,@03                                             0668
         SLR   @03,@03                                             0668
         IC    @03,TPRS19(,@08)                                    0668
         ALR   @06,@03                                             0668
         STCM  @06,15,SYSTEMP                                      0668
* ELSE                                                             0669
*   SYSTEMP = SYSTEMP + BYTE21 + BYTE13+ BYT1112 + BYTE18; /*@D3505GB*/
         B     @RC00667                                            0669
@RF00667 LA    @08,TPRVOL(,R7)                                     0669
         LA    @06,15                                              0669
         SLR   @03,@03                                             0669
         IC    @03,TPRBUFC(,R7)                                    0669
         NR    @06,@03                                             0669
         ALR   @08,@06                                             0669
         AL    @08,@CF00786                                        0669
         ICM   @06,15,SYSTEMP                                      0669
         SLR   @03,@03                                             0669
         IC    @03,BYTE21(,@08)                                    0669
         ALR   @06,@03                                             0669
         SLR   @03,@03                                             0669
         IC    @03,BYTE13(,@08)                                    0669
         ALR   @06,@03                                             0669
         SLR   @03,@03                                             0669
         ICM   @03,3,BYT1112(@08)                                  0669
         ALR   @06,@03                                             0669
         SLR   @03,@03                                             0669
         IC    @03,BYTE18(,@08)                                    0669
         ALR   @06,@03                                             0669
         STCM  @06,15,SYSTEMP                                      0669
*            IF SYSTEMP  > ZERO THEN                               0670
@RC00667 ICM   @08,15,SYSTEMP                                      0670
         BNP   @RF00670                                            0670
*              DO;                                         /*@Z427VLS*/
*                WORKCUA = (TPRCUA & ONLYCUA2);            /*@Z427VLS*/
         MVC   WORKCUA(2),TPRCUA(R7)                               0672
         NC    WORKCUA(2),@CB00951                                 0672
*                BUG(24) = BUG(24) + 1;                    /*@Z427VLS*/
         LA    @08,1                                               0673
         AL    @08,BUG+92                                          0673
         ST    @08,BUG+92                                          0673
*                SYSGROUP  = TWO; /*DASDI DEVICE GROUP     @Z427VLS*/
         MVI   SYSGROUP,X'02'                                      0674
*                SYSRT  = (TPRCUA & ONLYCUA2);           /*@Z427VLS*/
         MVC   SYSRT(2),TPRCUA(R7)                                 0675
         NC    SYSRT(2),@CB00951                                   0675
*           RECCPU=LRTCPUS;            /*SAVE CPU ID NUMBER  @D3506GB*/
         MVC   RECCPU(3),LRTCPUS(R7)                               0676
*           LINKDEV = LINKDEV && LINKDEV;                  /*@D3506GB*/
         XC    LINKDEV(4),LINKDEV                                  0677
*           CALL IFCDEVIC (13,TPRDEV,LINKDEV);             /*@D3506GB*/
         MVC   @AL00001(12),@AL00678                               0678
         LA    @08,TPRDEV(,R7)                                     0678
         ST    @08,@AL00001+4                                      0678
         L     @15,@CV01431                                        0678
         LA    @01,@AL00001                                        0678
         BALR  @14,@15                                             0678
*           SYSDEV = DEVLABEL;                             /*@D3506GB*/
         MVC   SYSDEV(2),DEVLABEL                                  0679
*                CALL SETCPU;                              /*@Z427VLS*/
         BAL   @14,SETCPU                                          0680
*                CALL CONVCNTR;  /* SHARE/CONTROLLER       /*@D3506GB*/
         BAL   @14,CONVCNTR                                        0681
*              END;                                        /*@Z427VLS*/
*          END;                                            /*@Z427VLS*/
*        ELSE /*NOT 33XX OR OR 3705 VALID MDR                @Z427VLS*/
*          IF TPRDEV = '40'X THEN                                  0684
         B     @RC00665                                            0684
@RF00665 CLI   TPRDEV(R7),X'40'                                    0684
         BNE   @RF00684                                            0684
*            DO WORKCUA = (TPRCUA & ONLYCUA2);             /*@D3503VS*/
         LA    @08,4095                                            0685
         LH    @06,TPRCUA(,R7)                                     0685
         N     @06,@CF01568                                        0685
         NR    @08,@06                                             0685
         STH   @08,WORKCUA                                         0685
*              SYSGROUP = THREE;                           /*@D3503VS*/
         MVI   SYSGROUP,X'03'                                      0686
*              SYSTEMP = SYSTEMP + TPRTMPR + TPRTMPW;      /*@D3503VS*/
         LA    @08,TPRVOL(,R7)                                     0687
         LA    @06,15                                              0687
         SLR   @03,@03                                             0687
         IC    @03,TPRBUFC(,R7)                                    0687
         NR    @06,@03                                             0687
         ALR   @08,@06                                             0687
         ICM   @06,15,SYSTEMP                                      0687
         SLR   @03,@03                                             0687
         IC    @03,TPRTMPR(,@08)                                   0687
         ALR   @06,@03                                             0687
         SLR   @03,@03                                             0687
         IC    @03,TPRTMPW(,@08)                                   0687
         ALR   @06,@03                                             0687
         STCM  @06,15,SYSTEMP                                      0687
*              SYSRT = WORKCUA & NOU;                      /*@D3503VS*/
         MVC   SYSRT(2),WORKCUA                                    0688
         NC    SYSRT(2),@CB00949                                   0688
*              SYSDEV = '8809'X;                           /*@D3503VS*/
         MVC   SYSDEV(2),@CB01434                                  0689
*              CALL SETCPU;                                /*@D3503VS*/
         BAL   @14,SETCPU                                          0690
*            END;                                          /*@D3503VS*/
*        ELSE                                                      0692
*          BUG(10) = BUG(10) + 1;                          /*@Z427VLS*/
         B     @RC00684                                            0692
@RF00684 LA    @08,1                                               0692
         AL    @08,BUG+36                                          0692
         ST    @08,BUG+36                                          0692
*       END;                                               /*@Z427VLS*/
* END;                                                     /*@D3506GB*/
* END;                                                     /*@D35UGGB*/
*  END;                                                    /*@Z427VLS*/
*END; /*CLOSING END FOR CONTERR                              @Z427VLS*/
@EL00012 DS    0H                                                  0697
@EF00012 DS    0H                                                  0697
@ER00012 LM    @14,@12,@SA00012                                    0697
         BR    @14                                                 0697
*CONTMDR: PROC; /*COUNT TEMPORARY ERRORS AND INDICATE PERMANENT */ 0698
CONTMDR  STM   @14,@12,@SA00013                                    0698
*               /*ERROR IF RECORD REPRESENTS SUCH.           @Z427VLS*/
*BUG(9) = BUG(9) + 1;                                      /*@Z427VLS*/
         LA    @08,1                                               0699
         AL    @08,BUG+32                                          0699
         ST    @08,BUG+32                                          0699
*IF TPRMODE = LINSTAT0 THEN                                        0700
         CLI   TPRMODE(R7),X'00'                                   0700
         BNE   @RF00700                                            0700
*  DO;                                                     /*@Z427VLS*/
*    SYSTEMP  = SYSTEMP  + ERRCT1;                     /*@Z427VLS*/
         ICM   @08,15,SYSTEMP                                      0702
         SLR   @06,@06                                             0702
         IC    @06,ERRCT1(,R7)                                     0702
         ALR   @08,@06                                             0702
         STCM  @08,15,SYSTEMP                                      0702
*    SYSPERM  = ON; /*IDENTIFY ERROR AS PERMANENT          @Z427VLS*/
         OI    SYSPERM,B'00000001'                                 0703
*  END;                                                    /*@Z427VLS*/
*ELSE                                                              0705
*  DO;                                                     /*@Z427VLS*/
         B     @RC00700                                            0705
@RF00700 DS    0H                                                  0706
*    IF TPRMODE = LINSTAT1 THEN                                    0706
         CLI   TPRMODE(R7),X'01'                                   0706
         BNE   @RF00706                                            0706
*       SYSTEMP = SYSTEMP + ERRCT1;                        /*@D3502BL*/
         ICM   @08,15,SYSTEMP                                      0707
         SLR   @06,@06                                             0707
         IC    @06,ERRCT1(,R7)                                     0707
         ALR   @08,@06                                             0707
         STCM  @08,15,SYSTEMP                                      0707
*   ELSE                                                           0708
*    IF TPRMODE = MODE86 THEN                                      0708
         B     @RC00706                                            0708
@RF00706 CLI   TPRMODE(R7),X'86'                                   0708
         BNE   @RF00708                                            0708
*       SYSTEMP = SYSTEMP + RMSSCBRY;                      /*@D3502BL*/
         ICM   @08,15,SYSTEMP                                      0709
         LH    @06,RMSSCBRY(,R7)                                   0709
         N     @06,@CF01568                                        0709
         ALR   @08,@06                                             0709
         STCM  @08,15,SYSTEMP                                      0709
*  ELSE                                                            0710
*    DO;                                                   /*@Z427VLS*/
         B     @RC00708                                            0710
@RF00708 DS    0H                                                  0711
*      IF TPRMODE = CHANADAP × /*CHANNEL ADAPTER ERROR       @Z427VLS*/
*         TPRMODE = COMSCAN  × /*COMMUNICATION SCANNER ERROR @Z427VLS*/
*         TPRMODE = IOERROR  × /*I/O INSTRUCTION EXCEPTION   @Z427VLS*/
*         TPRMODE = UNRESOLV × /*UNRESOLVED PROGRAM LEVEL ONE */   0711
*                              /*INTERRUPT                   @Z427VLS*/
*         TPRMODE = LINKERR ×   /* LINK ERROR                @D3502BL*/
*         TPRMODE = MODE82 THEN /* LONG FORMAT LINK ERROR    @D3502BL*/
         CLI   TPRMODE(R7),X'10'                                   0711
         BE    @RT00711                                            0711
         CLI   TPRMODE(R7),X'11'                                   0711
         BE    @RT00711                                            0711
         CLI   TPRMODE(R7),X'12'                                   0711
         BE    @RT00711                                            0711
         CLI   TPRMODE(R7),X'13'                                   0711
         BE    @RT00711                                            0711
         CLI   TPRMODE(R7),X'02'                                   0711
         BE    @RT00711                                            0711
         CLI   TPRMODE(R7),X'82'                                   0711
         BNE   @RF00711                                            0711
@RT00711 DS    0H                                                  0712
*           SYSPERM  = ON;                               /*@Z427VLS*/
         OI    SYSPERM,B'00000001'                                 0712
*      ELSE                                                        0713
*      DO;                                                 /*@Z427VLS*/
         B     @RC00711                                            0713
@RF00711 DS    0H                                                  0714
*      IF TPRMODE = LINSTAT3 THEN /*IF MODE IS 03            @Z427VLS*/
         CLI   TPRMODE(R7),X'03'                                   0714
         BNE   @RF00714                                            0714
*         DO;                                              /*@Z427VLS*/
*           SYSTEMP  = SYSTEMP  + ERRCT1;              /*@Z427VLS*/
         ICM   @08,15,SYSTEMP                                      0716
         SLR   @06,@06                                             0716
         IC    @06,ERRCT1(,R7)                                     0716
         ALR   @08,@06                                             0716
         STCM  @08,15,SYSTEMP                                      0716
*           SYSPERM  = ON; /*ALWAYS SET TEMP BEFORE PERM   @Z427VLS*/
         OI    SYSPERM,B'00000001'                                 0717
*         END;                                             /*@Z427VLS*/
*      ELSE                                                        0719
*        IF TPRMODE = MODE83 THEN /* IF MODE IS 83           @D3502BL*/
         B     @RC00714                                            0719
@RF00714 CLI   TPRMODE(R7),X'83'                                   0719
         BNE   @RF00719                                            0719
*          DO;                                             /*@D3502BL*/
*            SYSTEMP = SYSTEMP + RMSSCBRY;                 /*@D3502BL*/
         ICM   @08,15,SYSTEMP                                      0721
         LH    @06,RMSSCBRY(,R7)                                   0721
         N     @06,@CF01568                                        0721
         ALR   @08,@06                                             0721
         STCM  @08,15,SYSTEMP                                      0721
*            SYSPERM = ON;                                 /*@D3502BL*/
         OI    SYSPERM,B'00000001'                                 0722
*          END;                                            /*@D3502BL*/
*       END;                                               /*@Z427VLS*/
@RF00719 DS    0H                                                  0724
@RC00714 DS    0H                                                  0725
*       END;                                               /*@Z427VLS*/
@RC00711 DS    0H                                                  0726
*    END;                                                  /*@Z427VLS*/
@RC00708 DS    0H                                                  0726
@RC00706 DS    0H                                                  0727
*IF SYSPERM  = ON × SYSTEMP  > ZERO THEN                           0727
@RC00700 TM    SYSPERM,B'00000001'                                 0727
         BO    @RT00727                                            0727
         ICM   @08,15,SYSTEMP                                      0727
         BNP   @RF00727                                            0727
@RT00727 DS    0H                                                  0728
*  DO;                                                     /*@Z427VLS*/
*    WORKCUA = (TPRCUA & ONLYCUA2);                        /*@Z427VLS*/
         MVC   WORKCUA(2),TPRCUA(R7)                               0729
         NC    WORKCUA(2),@CB00951                                 0729
*    BUG(11) = BUG(11) + 1;                                /*@Z427VLS*/
         LA    @08,1                                               0730
         L     @06,BUG+40                                          0730
         ALR   @06,@08                                             0730
         ST    @06,BUG+40                                          0730
*    BUG(19) = BUG(19) + 1;                                /*@Z427VLS*/
         AL    @08,BUG+72                                          0731
         ST    @08,BUG+72                                          0731
*    SYSGROUP  = FIVE; /*SET GROUP TO TP CNTRL             @Z427VLS*/
         MVI   SYSGROUP,X'05'                                      0732
*    SYSRT  = (TPRCUA & ONLYCUA2);                       /*@Z427VLS*/
         MVC   SYSRT(2),TPRCUA(R7)                                 0733
         NC    SYSRT(2),@CB00951                                   0733
*    /*SYSCUA IS 4 BITS TOO FAR TO THE RIGHT FOR NOW         @Z427VLS*/
*    SYSDEV  = '3705'X;                                  /*@Z427VLS*/
         MVC   SYSDEV(2),@CB01439                                  0734
*     RECCPU=LRTCPUS;                  /*SAVE CPU SERIAL NUMBER       *
         MVC   RECCPU(3),LRTCPUS(R7)                               0735
*    CALL SETCPU;                                          /*@Z427VLS*/
         BAL   @14,SETCPU                                          0736
*    CALL SET3705;                                         /*@Z427VLS*/
         BAL   @14,SET3705                                         0737
*  END;                                                    /*@Z427VLS*/
*END; /*END FOR PROC COUNTMDR                                @Z427VLS*/
@EL00013 DS    0H                                                  0739
@EF00013 DS    0H                                                  0739
@ER00013 LM    @14,@12,@SA00013                                    0739
         BR    @14                                                 0739
*COUNTOBR:PROC; /*IDENTIFY AND SUM PERMANENT AND TEMPORARY ERRORS*/
COUNTOBR STM   @14,@12,@SA00014                                    0740
*               /*FROM OBR RECORDS IN SYSUM2                 @Z427VLS*/
*BUG(7) = BUG(7) + 1;                                      /*@Z427VLS*/
         LA    @08,1                                               0741
         AL    @08,BUG+24                                          0741
         ST    @08,BUG+24                                          0741
*IF SHORTSW = ON THEN /*IF SHORT OBR                         @Z427VLS*/
         TM    SHORTSW(R7),B'00100000'                             0742
         BNO   @RF00742                                            0742
*  DO;                                                     /*@Z427VLS*/
*    CUA3 = (OBRSCUA & ONLYCUA3);                          /*@Z427VLS*/
         MVC   CUA3(3),OBRSCUA(R7)                                 0744
         NC    CUA3(3),@CB00953                                    0744
*    WORKDEV = OBRSDEV2;                                   /*@Z427VLS*/
         MVC   WORKDEV(2),OBRSDEV2(R7)                             0745
*  END;                                                    /*@Z427VLS*/
*ELSE  /*LONG OBR BY DEFAULT                                 @Z427VLS*/
*  DO;                                                     /*@Z427VLS*/
         B     @RC00742                                            0747
@RF00742 DS    0H                                                  0748
*    WORKDEV = OBRDEV;                                     /*@Z427VLS*/
         MVC   WORKDEV(2),OBRDEV(R7)                               0748
*    CUA3 = (OBRPCUA & ONLYCUA3);                          /*@Z427VLS*/
         MVC   CUA3(3),OBRPCUA(R7)                                 0749
         NC    CUA3(3),@CB00953                                    0749
*  END;                                                    /*@Z427VLS*/
*IF WORKDEV = DEV3410 ×                                            0751
*   WORKDEV = DEV3420 ×                                            0751
*   WORKDEV = DEV34XX THEN                                         0751
@RC00742 CLC   WORKDEV(2),@CB00910                                 0751
         BE    @RT00751                                            0751
         CLC   WORKDEV(2),@CB00912                                 0751
         BE    @RT00751                                            0751
         CLC   WORKDEV(2),@CB00914                                 0751
         BNE   @RF00751                                            0751
@RT00751 DS    0H                                                  0752
*  CALL CHECK34X; /*IF 34XX TAPE THEN USE ANOTHER ALGORITM   @Z427VLS*/
         BAL   @14,CHECK34X                                        0752
*ELSE /*OTHER THAN 34XX RECORD                               @Z427VLS*/
*  DO;                                                     /*@Z427VLS*/
         B     @RC00751                                            0753
@RF00751 DS    0H                                                  0754
*   IF WORKDEV = DEV3330  ×                                        0754
*      WORKDEV = DEV3340  ×                                        0754
*      WORKDEV = DEV3350  ×                                        0754
*     OBRCLASS = '21'X ×                                           0754
*      WORKDEV = DEV33301 ×                                        0754
*      WORKDEV = DEV23051 ×                                        0754
*      WORKDEV = DEV23052 THEN /*33XX OR 2305 DEVICE TYPE    @Z427VLS*/
         CLC   WORKDEV(2),@CB00902                                 0754
         BE    @RT00754                                            0754
         CLC   WORKDEV(2),@CB00904                                 0754
         BE    @RT00754                                            0754
         CLC   WORKDEV(2),@CB00906                                 0754
         BE    @RT00754                                            0754
         CLI   OBRCLASS(R7),X'21'                                  0754
         BE    @RT00754                                            0754
         CLC   WORKDEV(2),@CB00908                                 0754
         BE    @RT00754                                            0754
         CLC   WORKDEV(2),@CB00898                                 0754
         BE    @RT00754                                            0754
         CLC   WORKDEV(2),@CB00900                                 0754
         BNE   @RF00754                                            0754
@RT00754 DS    0H                                                  0755
*     CALL CHECK33X;                                       /*@Z427VLS*/
         BAL   @14,CHECK33X                                        0755
*    ELSE /*IF NOT 33XX OR 34XX DEVICE THEN                  @Z427VLS*/
*      DO;                                                 /*@Z427VLS*/
         B     @RC00754                                            0756
@RF00754 DS    0H                                                  0757
*         IF SHORTSW = YES THEN                                    0757
         TM    SHORTSW(R7),B'00100000'                             0757
         BNO   @RF00757                                            0757
*           DO;                                            /*@Z427VLS*/
*             IF OBRSSDRC > ZERO THEN /*IF STAT COUNTERS EXIST*/   0759
         CLI   OBRSSDRC(R7),0                                      0759
         BNH   @RF00759                                            0759
*               DO;                                        /*@Z427VLS*/
*                 ERRNUM = NULLIT;                         /*@Z427VLS*/
         MVI   ERRNUM,X'00'                                        0761
*                 ERRPLACE = (ERRPLACE × OBRSRDS); /*GET R,R ERRORS*/
         OC    ERRPLACE(1),OBRSRDS(R7)                             0762
*                 SRL(ERRPLACE,4); /*SHIFT TO ACCESS AS NUMERIC*/  0763
         SLR   @08,@08                                             0763
         IC    @08,ERRPLACE                                        0763
         SRL   @08,4                                               0763
         STC   @08,ERRPLACE                                        0763
*                 SYSTEMP  = SYSTEMP  + ERRNUM;        /*@Z427VLS*/
         ICM   @08,15,SYSTEMP                                      0764
         SLR   @06,@06                                             0764
         IC    @06,ERRNUM                                          0764
         ALR   @08,@06                                             0764
         STCM  @08,15,SYSTEMP                                      0764
*                 ERRNUM = NULLIT;                         /*@Z427VLS*/
         MVI   ERRNUM,X'00'                                        0765
*                 ERRPLACE = OBRSRDS; /*GET BOTH READ AND WRITE*/  0766
         MVC   ERRPLACE(1),OBRSRDS(R7)                             0766
*                 ERRPLACE = (ERRPLACE & NOREAD); /*REMOVE READS*/ 0767
         NI    ERRPLACE,X'0F'                                      0767
*                 SYSTEMP  = SYSTEMP  + ERRNUM;        /*@Z427VLS*/
         SLR   @06,@06                                             0768
         IC    @06,ERRNUM                                          0768
         ALR   @08,@06                                             0768
         STCM  @08,15,SYSTEMP                                      0768
*               END;                                       /*@Z427VLS*/
*           END;                                           /*@Z427VLS*/
*         ELSE /*LONG OBR BY DEFAULT                         @Z427VLS*/
*           DO;                                            /*@Z427VLS*/
         B     @RC00757                                            0771
@RF00757 DS    0H                                                  0772
*             IF DISMOUNT = ON × /*IF A DISMOUNT RECORD WITH STAT DTA*/
*                SDRCOUNT = ON × /*SDR COUNTER DUMPED AT EOD @Z427VLS*/
*                OBRTEMP = ON THEN /*OBR TEMPORARY ERROR FLAG ON     */
         TM    DISMOUNT(R7),B'11000100'                            0772
         BZ    @RF00772                                            0772
*              DO;                     /*                    @ZA29956*/
*              IF OBRLSDRC > ZERO THEN /*IF STAT CNTRS EXIST @ZA29956*/
         CLI   OBRLSDRC(R7),0                                      0774
         BNH   @RF00774                                            0774
*               DO;  /*ACCUMULATE READ WRITE ERRORS          @Z427VLS*/
*                 ERRNUM = NULLIT;                         /*@Z427VLS*/
         MVI   ERRNUM,X'00'                                        0776
*                 ERRPLACE = (ERRPLACE × OBRLSDR); /*GET LNG R,R ERR*/
         LA    @08,64                                              0777
         ALR   @08,R7                                              0777
         SLR   @06,@06                                             0777
         IC    @06,OBRDEVDC(,R7)                                   0777
         SLA   @06,3                                               0777
         ALR   @08,@06                                             0777
         OC    ERRPLACE(1),OBRLSDR(@08)                            0777
*                 SRL(ERRPLACE,4); /*SHIFT TO ACCESS AS NUMERIC*/  0778
         SLR   @06,@06                                             0778
         IC    @06,ERRPLACE                                        0778
         SRL   @06,4                                               0778
         STC   @06,ERRPLACE                                        0778
*                 SYSTEMP  = SYSTEMP  + ERRNUM;        /*@Z427VLS*/
         ICM   @06,15,SYSTEMP                                      0779
         SLR   @03,@03                                             0779
         IC    @03,ERRNUM                                          0779
         ALR   @06,@03                                             0779
         STCM  @06,15,SYSTEMP                                      0779
*                 ERRNUM = NULLIT;                         /*@Z427VLS*/
         MVI   ERRNUM,X'00'                                        0780
*                 ERRPLACE = OBRLSDR; /*GET READ, WRITE ERRORS*/   0781
         MVC   ERRPLACE(1),OBRLSDR(@08)                            0781
*                 ERRPLACE = (ERRPLACE & NOREAD); /*ELIM READ ERRORS*/
         NI    ERRPLACE,X'0F'                                      0782
*                 SYSTEMP  = SYSTEMP  + ERRNUM;        /*@Z427VLS*/
         SLR   @08,@08                                             0783
         IC    @08,ERRNUM                                          0783
         ALR   @06,@08                                             0783
         STCM  @06,15,SYSTEMP                                      0783
*               END;                                       /*@Z427VLS*/
*              END;                    /*                    @ZA29956*/
*             ELSE /*CONTINUE CHECKING TO FIND PERM ERRORS   @Z427VLS*/
*               DO;                                        /*@Z427VLS*/
         B     @RC00772                                            0786
@RF00772 DS    0H                                                  0787
*                 IF OBRSENS0 ^= '40'X THEN    /* IF NOT INTERV REQ */
         LA    @08,64                                              0787
         ALR   @08,R7                                              0787
         SLR   @06,@06                                             0787
         IC    @06,OBRDEVDC(,R7)                                   0787
         SLA   @06,3                                               0787
         ALR   @08,@06                                             0787
         SLR   @06,@06                                             0787
         IC    @06,OBRLSDRC(,R7)                                   0787
         ALR   @08,@06                                             0787
         CLI   OBRSENS0(@08),X'40'                                 0787
         BE    @RF00787                                            0787
*                   SYSPERM  = ON;                       /*@Z427VLS*/
         OI    SYSPERM,B'00000001'                                 0788
*               END;                                       /*@Z427VLS*/
@RF00787 DS    0H                                                  0790
*            END;                                          /*@Z427VLS*/
@RC00772 DS    0H                                                  0791
*         END;                                             /*@Z427VLS*/
@RC00757 DS    0H                                                  0792
* END;                                                     /*@D35UGGB*/
@RC00754 DS    0H                                                  0793
* IF SYSPERM = ON × SYSTEMP ^= 0 THEN                              0793
@RC00751 TM    SYSPERM,B'00000001'                                 0793
         BO    @RT00793                                            0793
         ICM   @08,15,SYSTEMP                                      0793
         BZ    @RF00793                                            0793
@RT00793 DS    0H                                                  0794
*      CALL SETSYS2;                                       /*@Z427VLS*/
         BAL   @14,SETSYS2                                         0794
*  END; /*CLOSING END FOR PROC COUNTOBR                      @Z427VLS*/
@EL00014 DS    0H                                                  0795
@EF00014 DS    0H                                                  0795
@ER00014 LM    @14,@12,@SA00014                                    0795
         BR    @14                                                 0795
*SETSYS2: PROC; /*CREATE SYSUM2 SORT KEY                     @Z427VLS*/
SETSYS2  STM   @14,@12,@SA00015                                    0796
*        BUG(12) = BUG(12) + 1;                            /*@Z427VLS*/
         LA    @08,1                                               0797
         AL    @08,BUG+44                                          0797
         ST    @08,BUG+44                                          0797
*        CALL GROUPASN;                                    /*@Z427VLS*/
         BAL   @14,GROUPASN                                        0798
*        SYSRT  = WORKCUA; /*CUA IS 4 BITS RIGHT OF CORRECT POS NOW*/
         MVC   SYSRT(2),WORKCUA                                    0799
*        LINKDEV = (LINKDEV && LINKDEV); /*ZERO TO ELIMINATE PREV SET*/
         XC    LINKDEV(4),LINKDEV                                  0800
*        CALL IFCDEVIC(3,WORKDEV,LINKDEV); /*GET DEVICE LABEL*/    0801
         L     @15,@CV01431                                        0801
         LA    @01,@AL00801                                        0801
         BALR  @14,@15                                             0801
*        /*IFCDEVIC IS AN EXTERNAL PROGRAM, MUST BE LINKEDITED TO FLT2*
*        SYSDEV = DEVLABEL;  /* PUT DEVICE LABEL IN SORT TABLE   */
         MVC   SYSDEV(2),DEVLABEL                                  0802
*        RECCPU=LRTCPUS;               /*SAVE CPU SERIAL NUMBER       *
         MVC   RECCPU(3),LRTCPUS(R7)                               0803
*        CALL SETCPU;                                      /*@Z427VLS*/
         BAL   @14,SETCPU                                          0804
*        IF SYSGROUP  = TWO ×                                      0805
*           SYSGROUP  = THREE ×                                    0805
*           SYSGROUP  = FOUR THEN                                  0805
         CLI   SYSGROUP,2                                          0805
         BE    @RT00805                                            0805
         CLI   SYSGROUP,3                                          0805
         BE    @RT00805                                            0805
         CLI   SYSGROUP,4                                          0805
         BNE   @RF00805                                            0805
@RT00805 DS    0H                                                  0806
*          CALL CONVCNTR;              /* CONVERT TO CONTROLLER LEVEL *
         BAL   @14,CONVCNTR                                        0806
*      END;                                                /*@Z427VLS*/
@EL00015 DS    0H                                                  0807
@EF00015 DS    0H                                                  0807
@ER00015 LM    @14,@12,@SA00015                                    0807
         BR    @14                                                 0807
*CHECK34X: PROC; /*FIND PERM, TEMP ERRORS IN 34XX DEVICES    @Z427VLS*/
CHECK34X STM   @14,@12,12(@13)                                     0808
*/*TEMPORARY READ, WRITE ERRORS ARE FOUND AT LOCATION 76 INTO OBR*/
*/*RECORDS FOR 34XX DEVICES. TEMPORARY ERRORS ARE IN RECORDS WHICH*/
*/*HAVE EITHER THE DISMOUNT OR SDR COUNTER FLAG ON. SHORT OBRS ARE*/
*/*NEVER GENERATED FOR 34XX DEVICES BUT LONG RECORDS MAY MASQUERADE*/
*/*AS SHORT RECORDS SOMETIMES. PERMANENT RECORDS ARE DEFINED BY */ 0809
*/*DEFAULT AS THOSE RECORDS THAT ARENT TEMPORARY, EXCEPT THAT*/    0809
*/*INVALID RECORDS MAY BE CREATED WITH THE TEMP BIT ON BUT NEITHER*/
*/*THE DISMOUNT OR SDR COUNTER FLAG ON WHICH MUST BE ELIMINATED*/  0809
*BUG(27) = BUG(27) + 1;                                    /*@Z427VLS*/
         LA    @08,1                                               0809
         AL    @08,BUG+104                                         0809
         ST    @08,BUG+104                                         0809
*IF SHORTSW = NO THEN /*IF NOT A SHORT OBR THEN              @Z427VLS*/
         TM    SHORTSW(R7),B'00100000'                             0810
         BNZ   @RF00810                                            0810
*  DO;                                                     /*@Z427VLS*/
*  IF DISMOUNT = ON × SDRCOUNT = ON THEN /*IF IS EITHER A DISMOUNT*/
         TM    DISMOUNT(R7),B'10000100'                            0812
         BZ    @RF00812                                            0812
*                         /*RECORD OR A SDR COUNTER RECORD THEN*/  0813
*    SYSTEMP  = SYSTEMP  + OBR34CT1 + OBR34CT2; /*ADD R,W ERRORS*/ 0813
         ICM   @08,15,SYSTEMP                                      0813
         SLR   @06,@06                                             0813
         IC    @06,OBR34CT1(,R7)                                   0813
         ALR   @08,@06                                             0813
         SLR   @06,@06                                             0813
         IC    @06,OBR34CT2(,R7)                                   0813
         ALR   @08,@06                                             0813
         STCM  @08,15,SYSTEMP                                      0813
*  ELSE /*PERMANENT ERROR BY DEFAULT                         @Z427VLS*/
*   IF OBRTEMP = OFF THEN /*IF NOT INVALID TEMPORARY ERROR THEN*/  0814
         B     @RC00812                                            0814
@RF00812 TM    OBRTEMP(R7),B'01000000'                             0814
         BNZ   @RF00814                                            0814
*    SYSPERM  = ON;                                      /*@Z427VLS*/
         OI    SYSPERM,B'00000001'                                 0815
*  END;                                                    /*@Z427VLS*/
@RF00814 DS    0H                                                  0816
@RC00812 DS    0H                                                  0817
* IF SYSPERM = ON × SYSTEMP ^= 0 THEN                              0817
@RF00810 TM    SYSPERM,B'00000001'                                 0817
         BO    @RT00817                                            0817
         ICM   @08,15,SYSTEMP                                      0817
         BZ    @RF00817                                            0817
@RT00817 DS    0H                                                  0818
*    BUG(28) = BUG(28) + 1;                                /*@Z427VLS*/
         LA    @08,1                                               0818
         AL    @08,BUG+108                                         0818
         ST    @08,BUG+108                                         0818
*END; /*END OF 34XX PROC                                     @Z427VLS*/
@EL00016 DS    0H                                                  0819
@EF00016 DS    0H                                                  0819
@ER00016 LM    @14,@12,12(@13)                                     0819
         BR    @14                                                 0819
*CHECK33X: PROC; /*LOCATE 33XX AND 2305 OBR PERM, TEMP ERRORS*/    0820
CHECK33X STM   @14,@12,12(@13)                                     0820
*             /*SET SYSGROUP IN TABLE SYSUM2 TO THE ENTRY NUMBER*/ 0821
*             /*IN TABLE DEVGROUP RELATING TO THIS DEVICE GROUP */ 0821
*BUG(25) = BUG(25) + 1;                                    /*@Z427VLS*/
         LA    @08,1                                               0821
         AL    @08,BUG+96                                          0821
         ST    @08,BUG+96                                          0821
*    IF (OBRSENS1 & PERMBIT) = PERMBIT THEN                        0822
         LA    @08,64                                              0822
         ALR   @08,R7                                              0822
         SLR   @06,@06                                             0822
         IC    @06,OBRDEVDC(,R7)                                   0822
         SLA   @06,3                                               0822
         ALR   @08,@06                                             0822
         SLR   @06,@06                                             0822
         IC    @06,OBRLSDRC(,R7)                                   0822
         ALR   @08,@06                                             0822
         MVC   @TS00001(1),OBRSENS1(@08)                           0822
         NI    @TS00001,B'10000000'                                0822
         CLI   @TS00001,B'10000000'                                0822
         BNE   @RF00822                                            0822
*      SYSPERM  = ON;                                    /*@Z427VLS*/
         OI    SYSPERM,B'00000001'                                 0823
*    ELSE                                                          0824
*      DO;                                                 /*@Z427VLS*/
         B     @RC00822                                            0824
@RF00822 DS    0H                                                  0825
*        IF OBRTEMP = ON THEN                                      0825
         TM    OBRTEMP(R7),B'01000000'                             0825
         BNO   @RF00825                                            0825
*          SYSTEMP  = SYSTEMP  + 1;                    /*@Z427VLS*/
         LA    @08,1                                               0826
         ICM   @06,15,SYSTEMP                                      0826
         ALR   @08,@06                                             0826
         STCM  @08,15,SYSTEMP                                      0826
*        ELSE                                                      0827
*          SYSPERM  = ON;                                /*@Z427VLS*/
         B     @RC00825                                            0827
@RF00825 OI    SYSPERM,B'00000001'                                 0827
*      END;                                                /*@Z427VLS*/
@RC00825 DS    0H                                                  0829
* IF SYSPERM = ON × SYSTEMP ^= 0 THEN                              0829
@RC00822 TM    SYSPERM,B'00000001'                                 0829
         BO    @RT00829                                            0829
         ICM   @08,15,SYSTEMP                                      0829
         BZ    @RF00829                                            0829
@RT00829 DS    0H                                                  0830
*  BUG(26) = BUG(26) + 1;                                  /*@Z427VLS*/
         LA    @08,1                                               0830
         AL    @08,BUG+100                                         0830
         ST    @08,BUG+100                                         0830
*END;                                                      /*@Z427VLS*/
@EL00017 DS    0H                                                  0831
@EF00017 DS    0H                                                  0831
@ER00017 LM    @14,@12,12(@13)                                     0831
         BR    @14                                                 0831
*GROUPASN: PROC; /*DETERMINE DEVICE GROUP FOR SYSTEM SUMMARY REPORT*/
GROUPASN STM   @14,@12,12(@13)                                     0832
*                /*SET SYSGROUP IN TABLE SYSUM2 TO THE ENTRY NUMBER*/
*                /*IN TABLE DEVGROUP RELATING TO THIS DEVICE GROUP*/
*IF (WORKDEV1 = HEX08 & WORKDEV2 ^= HEX42) ×                       0833
*   WORKDEV  = HEX100C ×                                           0833
*   WORKDEV  = HEX1008 THEN                                        0833
         CLI   WORKDEV1,X'08'                                      0833
         BNE   @GL00041                                            0833
         CLI   WORKDEV2,X'42'                                      0833
         BNE   @RT00833                                            0833
@GL00041 CLC   WORKDEV(2),@CB00916                                 0833
         BE    @RT00833                                            0833
         CLC   WORKDEV(2),@CB00918                                 0833
         BNE   @RF00833                                            0833
@RT00833 DS    0H                                                  0834
*  DO;                                                     /*@Z427VLS*/
*   BUG(15) = BUG(15) + 1;                                 /*@Z427VLS*/
         LA    @08,1                                               0835
         AL    @08,BUG+56                                          0835
         ST    @08,BUG+56                                          0835
*   SYSGROUP  = ONE;                                     /*@Z427VLS*/
         MVI   SYSGROUP,X'01'                                      0836
*  END;                                                    /*@Z427VLS*/
*ELSE                                                              0838
*  DO;                                                     /*@Z427VLS*/
         B     @RC00833                                            0838
@RF00833 DS    0H                                                  0839
*    IF WORKDEV1 = HEX10 THEN                                      0839
         CLI   WORKDEV1,X'10'                                      0839
         BNE   @RF00839                                            0839
*     DO;                                                  /*@Z427VLS*/
*      BUG(18) = BUG(18) + 1;                              /*@Z427VLS*/
         LA    @08,1                                               0841
         AL    @08,BUG+68                                          0841
         ST    @08,BUG+68                                          0841
*      SYSGROUP  = FOUR;                                 /*@Z427VLS*/
         MVI   SYSGROUP,X'04'                                      0842
*     END;                                                 /*@Z427VLS*/
*    ELSE                                                          0844
*      DO;                                                 /*@Z427VLS*/
         B     @RC00839                                            0844
@RF00839 DS    0H                                                  0845
*   IF WORKDEV1 = HEX20 ×                                          0845
*      WORKDEV1 = HEX21 ×                                          0845
*           WORKDEV = HEX0842 THEN                                 0845
         CLI   WORKDEV1,X'20'                                      0845
         BE    @RT00845                                            0845
         CLI   WORKDEV1,X'21'                                      0845
         BE    @RT00845                                            0845
         CLC   WORKDEV(2),@CB00920                                 0845
         BNE   @RF00845                                            0845
@RT00845 DS    0H                                                  0846
*         DO;                                              /*@Z427VLS*/
*          BUG(16) = BUG(16) + 1;                          /*@Z427VLS*/
         LA    @08,1                                               0847
         AL    @08,BUG+60                                          0847
         ST    @08,BUG+60                                          0847
*          SYSGROUP  = TWO;                              /*@Z427VLS*/
         MVI   SYSGROUP,X'02'                                      0848
*         END;                                             /*@Z427VLS*/
*        ELSE                                                      0850
*         DO;                                              /*@Z427VLS*/
         B     @RC00845                                            0850
@RF00845 DS    0H                                                  0851
*           IF WORKDEV1 = HEX40 THEN                               0851
         CLI   WORKDEV1,X'40'                                      0851
         BNE   @RF00851                                            0851
*             DO;                                          /*@Z427VLS*/
*               SYSGROUP  = FIVE;                        /*@Z427VLS*/
         MVI   SYSGROUP,X'05'                                      0853
*               BUG(19) = BUG(19) + 1;                     /*@Z427VLS*/
         LA    @08,1                                               0854
         AL    @08,BUG+72                                          0854
         ST    @08,BUG+72                                          0854
*             END;                                         /*@Z427VLS*/
*           ELSE                                                   0856
*             DO;                                          /*@Z427VLS*/
         B     @RC00851                                            0856
@RF00851 DS    0H                                                  0857
*               IF WORKDEV1 = HEX42 ×                              0857
*                  WORKDEV1 = HEX44 THEN                           0857
         CLI   WORKDEV1,X'42'                                      0857
         BE    @RT00857                                            0857
         CLI   WORKDEV1,X'44'                                      0857
         BNE   @RF00857                                            0857
@RT00857 DS    0H                                                  0858
*                DO;                                       /*@Z427VLS*/
*                 BUG(20) = BUG(20) + 1;                   /*@Z427VLS*/
         LA    @08,1                                               0859
         AL    @08,BUG+76                                          0859
         ST    @08,BUG+76                                          0859
*                 SYSGROUP  = SIX;                       /*@Z427VLS*/
         MVI   SYSGROUP,X'06'                                      0860
*                END;                                      /*@Z427VLS*/
*               ELSE                                               0862
*                 DO;                                      /*@Z427VLS*/
         B     @RC00857                                            0862
@RF00857 DS    0H                                                  0863
*                   IF WORKDEV1 = HEX80 THEN                       0863
         CLI   WORKDEV1,X'80'                                      0863
         BNE   @RF00863                                            0863
*                    DO;                                   /*@Z427VLS*/
*                     BUG(17) = BUG(17) + 1;               /*@Z427VLS*/
         LA    @08,1                                               0865
         AL    @08,BUG+64                                          0865
         ST    @08,BUG+64                                          0865
*                     SYSGROUP  = THREE;                 /*@Z427VLS*/
         MVI   SYSGROUP,X'03'                                      0866
*                    END;                                  /*@Z427VLS*/
*                 END;                                     /*@Z427VLS*/
*             END;                                         /*@Z427VLS*/
*          END;                                            /*@Z427VLS*/
*      END;                                                /*@Z427VLS*/
*     END;                                                 /*@Z427VLS*/
*    END; /*CLOSING END TO GROUPASN PROC                     @Z427VLS*/
@EL00018 DS    0H                                                  0873
@EF00018 DS    0H                                                  0873
@ER00018 LM    @14,@12,12(@13)                                     0873
         BR    @14                                                 0873
*SET3705: PROC;                                            /*@Z427VLS*/
SET3705  STM   @14,@12,12(@13)                                     0874
*  IF TPRMODE = LINKERR ×                                          0875
*     TPRMODE = MODE82 ×                                           0875
*     TPRMODE = MODE83 ×                                           0875
*     TPRMODE = MODE86 ×                                           0875
*     TPRMODE = LINSTAT1 ×                                         0875
*     TPRMODE = LINSTAT0 ×                                         0875
*     TPRMODE = LINSTAT3 THEN                                      0875
         CLI   TPRMODE(R7),X'02'                                   0875
         BE    @RT00875                                            0875
         CLI   TPRMODE(R7),X'82'                                   0875
         BE    @RT00875                                            0875
         CLI   TPRMODE(R7),X'83'                                   0875
         BE    @RT00875                                            0875
         CLI   TPRMODE(R7),X'86'                                   0875
         BE    @RT00875                                            0875
         CLI   TPRMODE(R7),X'01'                                   0875
         BE    @RT00875                                            0875
         CLI   TPRMODE(R7),X'00'                                   0875
         BE    @RT00875                                            0875
         CLI   TPRMODE(R7),X'03'                                   0875
         BNE   @RF00875                                            0875
@RT00875 DS    0H                                                  0876
*    SYSITEM  = (SYSITEM  ×   '20'X);                  /*@Z427VLS*/
         OI    SYSITEM,X'20'                                       0876
*  ELSE                                                            0877
*      IF  TPRMODE = IOERROR ×                                     0877
*          TPRMODE = UNRESOLV THEN                                 0877
         B     @RC00875                                            0877
@RF00875 CLI   TPRMODE(R7),X'12'                                   0877
         BE    @RT00877                                            0877
         CLI   TPRMODE(R7),X'13'                                   0877
         BNE   @RF00877                                            0877
@RT00877 DS    0H                                                  0878
*          SYSITEM  = (SYSITEM  ×   '10'X);            /*@Z427VLS*/
         OI    SYSITEM,X'10'                                       0878
*  /*IF TPRMODE IS EQUAL TO DEFAULT OF COMSCAN OR CHANADAP ERRORS*/
*  /*TREN37 NEED NOT BE SET AS ITS CORRECT VALUE IS ZERO. SYSRT */ 0879
*  /*IS SET HERE AS THE STUPID COMPILER WILL NOT ACCESS TREN37*/   0879
*END;    /*CLOSING END TO SET3705 PROC                       @Z427VLS*/
@EL00019 DS    0H                                                  0879
@EF00019 DS    0H                                                  0879
@ER00019 LM    @14,@12,12(@13)                                     0879
         BR    @14                                                 0879
*SETCPU: PROC;                                             /*@Z427VLS*/
SETCPU   STM   @14,@12,@SA00020                                    0880
*/* SET NEW AND OLD CPUS IN SYSUM2. CHECK AND SEE IF THE DEVICE*/  0881
*/* IS SHARED. IF SO, RESET THE NEW CPU AND ALSO THE CUA. GO TO*/  0881
*/*SUMONADR TO CREATE NEW ENTRIES OF EVTABLE AND SYSUMONE IF NEED BE*/
*CALL SUMONADR; /* IF TOO MANY CPUS ENCOUNTERED, NEW ENTRY OF EVTABLE*/
         BAL   @14,SUMONADR                                        0881
*               /* IS NOT CREATED, AND THIS SYSUM2 ENTRY WILL NOT BE*/
*               /* CREATED                                   @Z427VLS*/
*MISSW = OFF; /*PRESET LOOP KICKOUT SWITCH                   @Z427VLS*/
         NI    MISSW,B'11101111'                                   0882
*DO J = 1 BY 1 TO EVNUM WHILE MISSW = OFF;                 /*@Z427VLS*/
         LA    @08,1                                               0883
         ST    @08,J                                               0883
         B     @DE00883                                            0883
@DL00883 TM    MISSW,B'00010000'                                   0883
         BNZ   @DC00883                                            0883
*  IF EVSERIAL(J) = LRTCPUS × EVSERIAL(J) = 'FFFFFF'X THEN         0884
         MH    @08,@CH00081                                        0884
         L     @06,EVPTR(,R2)                                      0884
         ST    @08,@TF00001                                        0884
         ALR   @08,@06                                             0884
         CLC   EVSERIAL-6(3,@08),LRTCPUS(R7)                       0884
         BE    @RT00884                                            0884
         AL    @06,@TF00001                                        0884
         CLC   EVSERIAL-6(3,@06),@CB00237                          0884
         BNE   @RF00884                                            0884
@RT00884 DS    0H                                                  0885
*         /*EVSERIAL ONLY = FOXES IF 11TH OR HIGHER CPU IN INPUT*/ 0885
*    DO;                                                   /*@Z427VLS*/
*      MISSW = ON; /*KICK OUT OF LOOP AFTER PROCESSING       @Z427VLS*/
         OI    MISSW,B'00010000'                                   0886
*      WORKNM = J - 1; /*SET TO EVTABLE ENTRY NUMBER MINUS ONE*/   0887
         L     @08,J                                               0887
         BCTR  @08,0                                               0887
         STC   @08,WORKNM                                          0887
*      SYSCPUS  = WORKBYTE; /*REFERENCE WORKNM VIA BIT STRING AND*/
         MVC   SYSCPUS(1),WORKBYTE                                 0888
*                             /*SET SYSOLD EQUAL TO IT       @Z427VLS*/
*      IF SHAREPTR ^= ZERO THEN                                    0889
         L     @08,SHAREPTR(,R2)                                   0889
         LTR   @08,@08                                             0889
         BZ    @RF00889                                            0889
*        DO;                                               /*@Z427VLS*/
*          SHAREYES = NO;                                  /*@Z427VLS*/
         NI    SHAREYES,B'01111111'                                0891
*          DO K = 1 BY 1 TO SHARENUM WHILE SHAREYES = NO;  /*@Z427VLS*/
         LA    @08,1                                               0892
         ST    @08,K                                               0892
         B     @DE00892                                            0892
@DL00892 TM    SHAREYES,B'10000000'                                0892
         BNZ   @DC00892                                            0892
*            IF SHAREFLG(K)=LETTERS&LRTCPUS=SHARSERA(K) THEN       0893
         SLA   @08,4                                               0893
         L     @06,SHAREPTR(,R2)                                   0893
         ST    @08,@TF00001                                        0893
         ALR   @08,@06                                             0893
         AL    @08,@CF01392                                        0893
         CLC   SHAREFLG-2(1,@08),LETTERS                           0893
         BNE   @RF00893                                            0893
         LR    @08,@06                                             0893
         AL    @08,@TF00001                                        0893
         AL    @08,@CF01560                                        0893
         CLC   LRTCPUS(3,R7),SHARSERA-10(@08)                      0893
         BNE   @RF00893                                            0893
*              DO;                                         /*@Z427VLS*/
*                  IF WORKCUA >=SHRCUAAL(K)&WORKCUA<=SHRCUAAH(K) THEN
         LR    @08,@06                                             0895
         AL    @08,@TF00001                                        0895
         AL    @08,@CF01570                                        0895
         CLC   WORKCUA(2),SHRCUAAL-13(@08)                         0895
         BL    @RF00895                                            0895
         LR    @08,@06                                             0895
         AL    @08,@TF00001                                        0895
         BCTR  @08,0                                               0895
         CLC   WORKCUA(2),SHRCUAAH-15(@08)                         0895
         BH    @RF00895                                            0895
*                      DO;                                 /*@Z427VLS*/
*                        SYSRT=SHRCUABL(K)+WORKCUA-SHRCUAAL(K);    0897
         LR    @08,@06                                             0897
         AL    @08,@TF00001                                        0897
         AL    @08,@CF01571                                        0897
         SLR   @03,@03                                             0897
         ICM   @03,3,SHRCUABL-6(@08)                               0897
         LH    @08,WORKCUA                                         0897
         N     @08,@CF01568                                        0897
         ALR   @03,@08                                             0897
         LR    @08,@06                                             0897
         AL    @08,@TF00001                                        0897
         AL    @08,@CF01570                                        0897
         SLR   @00,@00                                             0897
         ICM   @00,3,SHRCUAAL-13(@08)                              0897
         SLR   @03,@00                                             0897
         STCM  @03,3,SYSRT                                         0897
*                        RECCPU=SHARSERB(K);/* SAVE CONVERTED CPU     *
         AL    @06,@TF00001                                        0898
         AL    @06,@CF01572                                        0898
         MVC   RECCPU(3),SHARSERB-3(@06)                           0898
*                        LOWCUA=SYSRT; /* SAVE LOW END OF CUA RANGE   *
         MVC   LOWCUA(2),SYSRT                                     0899
*                        MISSW1 = OFF;                     /*@Z427VLS*/
         NI    MISSW1,B'11111101'                                  0900
*                        DO L = 1 BY 1 TO EVNUM WHILE MISSW1 = OFF;
         LA    @08,1                                               0901
         ST    @08,L                                               0901
         B     @DE00901                                            0901
@DL00901 TM    MISSW1,B'00000010'                                  0901
         BNZ   @DC00901                                            0901
*                          IF EVSERIAL(L) = SHARSERB(K) ×          0902
*                             EVSERIAL(L) = 'FFFFFF'X THEN         0902
         MH    @08,@CH00081                                        0902
         L     @06,EVPTR(,R2)                                      0902
         L     @03,K                                               0902
         SLA   @03,4                                               0902
         L     @15,SHAREPTR(,R2)                                   0902
         ST    @08,@TF00001                                        0902
         ALR   @08,@06                                             0902
         ALR   @15,@03                                             0902
         AL    @15,@CF01572                                        0902
         CLC   EVSERIAL-6(3,@08),SHARSERB-3(@15)                   0902
         BE    @RT00902                                            0902
         AL    @06,@TF00001                                        0902
         CLC   EVSERIAL-6(3,@06),@CB00237                          0902
         BNE   @RF00902                                            0902
@RT00902 DS    0H                                                  0903
*                            DO;                           /*@Z427VLS*/
*                              WORKNM = L - 1; /*SET TO EVTABLE ENT.*/
         L     @08,L                                               0904
         BCTR  @08,0                                               0904
         STC   @08,WORKNM                                          0904
*                                             /*NUMBER MINUS ONE*/ 0905
*                              MISSW1 = ON;                /*@Z427VLS*/
         OI    MISSW1,B'00000010'                                  0905
*                            END;                          /*@Z427VLS*/
*                        END;                              /*@Z427VLS*/
@RF00902 LA    @08,1                                               0907
         AL    @08,L                                               0907
         ST    @08,L                                               0907
@DE00901 L     @06,EVPTR(,R2)                                      0907
         CH    @08,EVNUM(,@06)                                     0907
         BNH   @DL00901                                            0907
@DC00901 DS    0H                                                  0908
*                        SHAREYES = ON;                    /*@Z427VLS*/
         OI    SHAREYES,B'10000000'                                0908
*                    END;                                  /*@Z427VLS*/
*              END;                                        /*@Z427VLS*/
@RF00895 DS    0H                                                  0911
*           END;                                           /*@Z427VLS*/
@RF00893 LA    @08,1                                               0911
         AL    @08,K                                               0911
         ST    @08,K                                               0911
@DE00892 L     @06,SHAREPTR(,R2)                                   0911
         CH    @08,SHARENUM(,@06)                                  0911
         BNH   @DL00892                                            0911
@DC00892 DS    0H                                                  0912
*        END;                                              /*@Z427VLS*/
*         IF SHAREYES=NO THEN                                      0913
@RF00889 TM    SHAREYES,B'10000000'                                0913
         BNZ   @RF00913                                            0913
*           LOWCUA=WORKCUA;                                /*@D3506GB*/
         MVC   LOWCUA(2),WORKCUA                                   0914
*        SLL(SYSRT ,4); /*SHIFT TO SYSCUA FROM SYSRT       @Z427VLS*/
@RF00913 SLR   @08,@08                                             0915
         ICM   @08,3,SYSRT                                         0915
         SLL   @08,4                                               0915
         STCM  @08,3,SYSRT                                         0915
*        SLL(WORKNM,4); /*SHIFT BASE CPU INDEX TO BYTE BOUNDARY*/  0916
         SLR   @08,@08                                             0916
         IC    @08,WORKNM                                          0916
         SLL   @08,4                                               0916
         STC   @08,WORKNM                                          0916
*        SYSCPUS  = (SYSCPUS  × WORKBYTE); /*SET SYSCPU  @Z427VLS*/
         OC    SYSCPUS(1),WORKBYTE                                 0917
*     END;                                                 /*@Z427VLS*/
*   END;                                                   /*@Z427VLS*/
@RF00884 LA    @08,1                                               0919
         AL    @08,J                                               0919
         ST    @08,J                                               0919
@DE00883 L     @06,EVPTR(,R2)                                      0919
         CH    @08,EVNUM(,@06)                                     0919
         BNH   @DL00883                                            0919
@DC00883 DS    0H                                                  0920
*END;/*CLOSING END TO SETCPU                                 @Z427VLS*/
@EL00020 DS    0H                                                  0920
@EF00020 DS    0H                                                  0920
@ER00020 LM    @14,@12,@SA00020                                    0920
         BR    @14                                                 0920
*/* CONVERT THE INPUT CUA TO THE CONTROLLER LEVEL. SEARCH THE         *
*/* SHARE/CONTROLLER TABLE FOR A MATCHING ENTRY. IF A MATCH IS FOUND  *
*/* THEN CONVERT THE CUA ACCORDING TO THE ENTRY. IF NO MATCH IS FOUND *
*/* THEN ASSUME THE CONTROL UNIT HAS DEVICE ADDRESS FROM 0-F.         *
*CONVCNTR: PROC;                                           /*@D3506GB*/
CONVCNTR STM   @14,@12,@SA00021                                    0921
*  SHAREYES=NO;                                            /*@D3506GB*/
         NI    SHAREYES,B'01111111'                                0922
*  IF SHAREPTR ^= 0 THEN                                           0923
         L     @08,SHAREPTR(,R2)                                   0923
         LTR   @08,@08                                             0923
         BZ    @RF00923                                            0923
*  DO K = 1 BY 1 TO SHARENUM WHILE(SHAREYES=NO);           /*@D3506GB*/
         LA    @08,1                                               0924
         ST    @08,K                                               0924
         B     @DE00924                                            0924
@DL00924 TM    SHAREYES,B'10000000'                                0924
         BNZ   @DC00924                                            0924
*    IF SHAREFLG(K)=LETTERC&RECCPU=SHARSERB(K)&                    0925
*      LOWCUA>=SHRCUABL(K)&LOWCUA<=SHRCUABH(K) THEN                0925
         SLA   @08,4                                               0925
         L     @06,SHAREPTR(,R2)                                   0925
         ST    @08,@TF00001                                        0925
         ALR   @08,@06                                             0925
         AL    @08,@CF01392                                        0925
         CLC   SHAREFLG-2(1,@08),LETTERC                           0925
         BNE   @RF00925                                            0925
         LR    @08,@06                                             0925
         AL    @08,@TF00001                                        0925
         AL    @08,@CF01572                                        0925
         CLC   RECCPU(3),SHARSERB-3(@08)                           0925
         BNE   @RF00925                                            0925
         LR    @08,@06                                             0925
         AL    @08,@TF00001                                        0925
         AL    @08,@CF01571                                        0925
         CLC   LOWCUA(2),SHRCUABL-6(@08)                           0925
         BL    @RF00925                                            0925
         LR    @08,@06                                             0925
         AL    @08,@TF00001                                        0925
         AL    @08,@CF01575                                        0925
         CLC   LOWCUA(2),SHRCUABH-8(@08)                           0925
         BH    @RF00925                                            0925
*      DO;                                                 /*@D3506GB*/
*        LOWCUA=SHRCUABL(K);           /*SAVE LOW END OF CUA RANGE    *
         LR    @08,@06                                             0927
         AL    @08,@TF00001                                        0927
         AL    @08,@CF01571                                        0927
         MVC   LOWCUA(2),SHRCUABL-6(@08)                           0927
*        HIGHCUA=SHRCUABH(K);          /*SAVE HIGH END OF CUA RANGE   *
         AL    @06,@TF00001                                        0928
         AL    @06,@CF01575                                        0928
         MVC   HIGHCUA(2),SHRCUABH-8(@06)                          0928
*        SYSRT=LOWCUA;                 /*SET LOW CUA IN SORT TABLE    *
         MVC   SYSRT(2),LOWCUA                                     0929
*        SLL(SYSRT,4);                 /*SHIFT CUA INTO SYSCUA FIELD  *
         SLR   @08,@08                                             0930
         ICM   @08,3,SYSRT                                         0930
         SLL   @08,4                                               0930
         STCM  @08,3,SYSRT                                         0930
*        SYSTROLL=ON;                  /*FLAG THAT CONTROL ENTRY EXIST*
         OI    SYSTROLL,B'00000100'                                0931
*        CALL BOUNDCRO;                /*SEE IF BOUNDARY CROSSED      *
         BAL   @14,BOUNDCRO                                        0932
*        SYSRANGE=HIGHCUA(2);          /*SAVE CU PART OF CUA @D3506GB*/
         MVC   SYSRANGE(1),HIGHCUA+1                               0933
*        SHAREYES=ON;                                      /*@D3506GB*/
         OI    SHAREYES,B'10000000'                                0934
*      END;                                                /*@D3506GB*/
*    ELSE;                             /*ENTRY MATCH NOT FOUND        *
@RF00925 DS    0H                                                  0937
*  END;                                                    /*@D3506GB*/
         LA    @08,1                                               0937
         AL    @08,K                                               0937
         ST    @08,K                                               0937
@DE00924 L     @06,SHAREPTR(,R2)                                   0937
         CH    @08,SHARENUM(,@06)                                  0937
         BNH   @DL00924                                            0937
@DC00924 DS    0H                                                  0938
*  IF SHAREYES=NO THEN                 /*CONTROLLER ENTRY NOT FOUND   *
@RF00923 TM    SHAREYES,B'10000000'                                0938
         BNZ   @RF00938                                            0938
*    DO;                                                   /*@D3506GB*/
*      SYSRT=SYSRT&NOU;                /*UNIT ADDRESS TO 0   @D3506GB*/
         NC    SYSRT(2),@CB00949                                   0940
*      SYSTROLL=NO;                    /*NO CONTROLLER CARD  @D3506GB*/
*      SYSSPAN=NO;                     /* NO BOUNDARY CROSSED BY CUA  *
         NI    SYSTROLL,B'11110011'                                0942
*      SYSRANGE=LOWCUA(2)×ONLYCHAN;    /*TURN ON LAST 4 BITS @D3506GB*/
         MVC   SYSRANGE(1),LOWCUA+1                                0943
         OI    SYSRANGE,X'0F'                                      0943
*    END;                                                  /*@D3506GB*/
*  ELSE;                               /* CONTROLLER CARD FOUND       *
@RF00938 DS    0H                                                  0946
*END CONVCNTR;                                             /*@D3506GB*/
@EL00021 DS    0H                                                  0946
@EF00021 DS    0H                                                  0946
@ER00021 LM    @14,@12,@SA00021                                    0946
         BR    @14                                                 0946
*/* DETERMINE IF THE CUA RANGE SPECIFIED IN A CONTROLLER CARD CROSSES *
*/* A BOUNDARY. IF IT DOES SET FLAG SYSSPAN.                 @D3506GB*/
*BOUNDCRO: PROC;                                           /*@D3506GB*/
BOUNDCRO STM   @14,@12,12(@13)                                     0947
*  LOWDIGIT=LOWCUA(2);                 /*GET LAST BYTE OF LOW CUA     *
         MVC   LOWDIGIT(1),LOWCUA+1                                0948
*  SRL(LOWDIGIT,4);                    /*GET 'U' PORITON OF CUA       *
         SLR   @08,@08                                             0949
         IC    @08,LOWDIGIT                                        0949
         SRL   @08,4                                               0949
         STC   @08,LOWDIGIT                                        0949
*  HIGDIGIT=HIGHCUA(2);                /*GET LAST BYTE OF HIGH CUA    *
         MVC   HIGDIGIT(1),HIGHCUA+1                               0950
*  SRL(HIGDIGIT,4);                    /*GET 'U' PORITON OF CUA       *
         SLR   @08,@08                                             0951
         IC    @08,HIGDIGIT                                        0951
         SRL   @08,4                                               0951
         STC   @08,HIGDIGIT                                        0951
*  IF LOWDIGIT ^= HIGDIGIT THEN                                    0952
         CLC   LOWDIGIT(1),HIGDIGIT                                0952
         BE    @RF00952                                            0952
*    SYSSPAN=ON;                       /*RANGE CROSSES A BOUNDARY     *
         OI    SYSSPAN,B'00001000'                                 0953
*  ELSE                                                            0954
*    SYSSPAN=NO;                       /*RANGE DOES NOT CROSS         *
         B     @RC00952                                            0954
@RF00952 NI    SYSSPAN,B'11110111'                                 0954
*END BOUNDCRO;                                             /*@D3506GB*/
@EL00022 DS    0H                                                  0955
@EF00022 DS    0H                                                  0955
@ER00022 LM    @14,@12,12(@13)                                     0955
         BR    @14                                                 0955
*ENDOFILE: PROC; /*SORT SORTABLE AND PASS RETURN CODE TO EREP1*/   0956
ENDOFILE STM   @14,@12,@SA00023                                    0956
*RESPECIFY(R15) RESTRICTED;                                /*@Z427VLS*/
*IF ERROR = OVERFLOW & PHIST = ON THEN                             0958
         CLC   ERROR(4),@CF00066                                   0958
         BNE   @RF00958                                            0958
         TM    PHIST(R2),B'00100000'                               0958
         BNO   @RF00958                                            0958
*  DO;                                                     /*@0001VLS*/
*    CLOSEIO = (CLOSEIO && CLOSEIO);                       /*@0001VLS*/
         XC    CLOSEIO(2,R2),CLOSEIO(R2)                           0960
*    CACCIN = ON;                                          /*@0001VLS*/
         OI    CACCIN(R2),B'00010000'                              0961
*    CALL IOHND(IOCLOSE);                                  /*@0001VLS*/
         L     @15,ADIOHND(,R2)                                    0962
         LA    @01,@AL00962                                        0962
         BALR  @14,@15                                             0962
*  END;                                                    /*@0001VLS*/
*IF MAXENT <= I & ERROR ^= ENDFILE & GETFAIL = OFF THEN            0964
@RF00958 L     @14,MAXENT                                          0964
         C     @14,I                                               0964
         BH    @RF00964                                            0964
         CLC   ERROR(4),@CF00064                                   0964
         BE    @RF00964                                            0964
         TM    GETFAIL,B'00001000'                                 0964
         BNZ   @RF00964                                            0964
*  DO;            /*WORLD, DONT TELL EREP1, DONT LET LOGREC BE*/   0965
*    ZEROALL = NO;       /*RESET.                            @Z427VLS*/
         NI    ZEROALL(R2),B'10111111'                             0966
*    MSGNO = 3;                                            /*@Z427VLS*/
         MVI   MSGNO,X'03'                                         0967
*    CALL ERRMSG;                                          /*@Z427VLS*/
         BAL   @14,ERRMSG                                          0968
*    ERROR = ZERO;                                         /*@0001VLS*/
         SLR   @14,@14                                             0969
         ST    @14,ERROR                                           0969
*    IF PHIST = ON THEN                                            0970
         TM    PHIST(R2),B'00100000'                               0970
         BNO   @RF00970                                            0970
*      DO;                                                 /*@Z427VLS*/
*        CLOSEIO = (CLOSEIO && CLOSEIO);                   /*@Z427VLS*/
         XC    CLOSEIO(2,R2),CLOSEIO(R2)                           0972
*        CACCIN = ON;                                      /*@Z427VLS*/
         OI    CACCIN(R2),B'00010000'                              0973
*        CALL IOHND(IOCLOSE);                              /*@Z427VLS*/
         L     @15,ADIOHND(,R2)                                    0974
         LA    @01,@AL00974                                        0974
         BALR  @14,@15                                             0974
*     END;                                                 /*@G51DGBB*/
* END;                                                     /*@G51DGBB*/
@RF00970 DS    0H                                                  0977
* IF ERROR = FOUR THEN                                             0977
@RF00964 CLC   ERROR(4),@CF00064                                   0977
         BNE   @RF00977                                            0977
*   DO;                                                    /*@G51DGBB*/
*     R15 = ZERO;                                          /*@G51DGBB*/
         SLR   R15,R15                                             0979
*     ERROR = ZERO;                                        /*@G51DGBB*/
         SLR   @14,@14                                             0980
         ST    @14,ERROR                                           0980
*   END;                                                   /*@G51DGBB*/
*/*THE FOLLOWING CODE MUST BE ADDED TO THE END OF FILE PROC BEFORE*/
*/*CLOSING ACCDEV TO WRITE FRAMES TO ACCDEV, IF NECESSARY    @G51DGBB*/
*IF R15 < TWELVE &             /*IF NON TERMINATE RETURN CODE */   0982
*   FRAMEPTR ^= ZERO THEN      /*IF FRAME TABLE WAS ALLOCATED */   0982
@RF00977 C     R15,@CF00032                                        0982
         BNL   @RF00982                                            0982
         SLR   @14,@14                                             0982
         L     @08,FRAMEPTR(,R2)                                   0982
         CR    @08,@14                                             0982
         BE    @RF00982                                            0982
* DO;                                                      /*@G51DGBB*/
*    IF  FRAMENUM > ZERO THEN /* IF ENTRIES IN FRAMTAB HAVE BEEN BUILT*
         C     @14,FRAMENUM(,@08)                                  0984
         BNL   @RF00984                                            0984
*      DO;                                                 /*@G51DGBB*/
*         IF PHIST = ON THEN /*IF DIRECTWK WAS USED TO STORE FRAMES */
         TM    PHIST(R2),B'00100000'                               0986
         BNO   @RF00986                                            0986
*           DO;                                            /*@G51DGBB*/
*             CLOSEIO = (CLOSEIO && CLOSEIO); /*ZERO CLOSE FLAGS*/ 0988
         XC    CLOSEIO(2,R2),CLOSEIO(R2)                           0988
*             CDRCTWRK = ON;      /*INDICATE CLOSE OF DIRECTWK FOR  */
         OI    CDRCTWRK(R2),B'00000010'                            0989
*             CALL IOHND(IOCLOSE); /*WRITING, IMPLICITLY OPENED FOR RD*
         L     @15,ADIOHND(,R2)                                    0990
         LA    @01,@AL00990                                        0990
         BALR  @14,@15                                             0990
*           END;                                           /*@G51DGBB*/
*         DO A = 1 BY 1 TO FRAMENUM WHILE R15 < FOUR;       /*SETS. */
@RF00986 LA    @14,1                                               0992
         ST    @14,A                                               0992
         B     @DE00992                                            0992
@DL00992 C     R15,@CF00064                                        0992
         BNL   @DC00992                                            0992
*           IF FRAMETYP(A) = ALLALL THEN /*IF COMPLETE SET   @G51DGBB*/
         MH    @14,@CH00227                                        0993
         L     @08,FRAMEPTR(,R2)                                   0993
         ST    @14,@TF00001                                        0993
         ALR   @14,@08                                             0993
         AL    @14,@CF01576                                        0993
         CLI   FRAMETYP-17(@14),X'FF'                              0993
         BNE   @RF00993                                            0993
*             DO;                                          /*@G51DGBB*/
*               LISTPTR = FRAMLOCM(A);   /*ESTABLISH LISTLOC ADDR.*/
         L     @14,@TF00001                                        0995
         AL    @08,@CF01577                                        0995
         L     @14,FRAMLOCM-20(@14,@08)                            0995
         ST    @14,LISTPTR                                         0995
*               DO Z = 1 BY 1 TO LISTNUM WHILE R15 < FOUR ;/*@G51DGBB*/
         LA    @14,1                                               0996
         ST    @14,Z                                               0996
         B     @DE00996                                            0996
@DL00996 C     R15,@CF00064                                        0996
         BNL   @DC00996                                            0996
*                 RECCCHHR = LISTCCHR(Z);  /*GET ALL MCH FRAMES*/  0997
         MH    @14,@CH00079                                        0997
         L     @08,LISTPTR                                         0997
         ALR   @08,@14                                             0997
         BCTR  @08,0                                               0997
         MVC   RECCCHHR(5,R2),LISTCCHR-4(@08)                      0997
*                 CALL IOHND(READIRCT);    /*READ FRAME FROM DIRECTWK*/
         L     @15,ADIOHND(,R2)                                    0998
         LA    @01,@AL00998                                        0998
         BALR  @14,@15                                             0998
*                 IF R15 = ZERO THEN       /*WRITE FRAME TO ACCDEV*/
         LTR   R15,R15                                             0999
         BNZ   @RF00999                                            0999
*                   CALL IOHND(RITEHIST);                  /*@G51DGBB*/
         L     @15,ADIOHND(,R2)                                    1000
         LA    @01,@AL01000                                        1000
         BALR  @14,@15                                             1000
*              END;                                        /*@G51DGBB*/
@RF00999 LA    @14,1                                               1001
         AL    @14,Z                                               1001
         ST    @14,Z                                               1001
@DE00996 L     @08,LISTPTR                                         1001
         C     @14,LISTNUM(,@08)                                   1001
         BNH   @DL00996                                            1001
@DC00996 DS    0H                                                  1002
*              IF R15 = ZERO THEN /*IF NO ACCDEV WRITE ERROR @G51DGBB*/
         LTR   R15,R15                                             1002
         BNZ   @RF01002                                            1002
*                DO;                                       /*@G51DGBB*/
*                  LISTPTR = FRAMLOCC(A); /*GET CCH FRAMES   @G51DGBB*/
         L     @14,A                                               1004
         MH    @14,@CH00227                                        1004
         L     @08,FRAMEPTR(,R2)                                   1004
         L     @14,FRAMLOCC-24(@14,@08)                            1004
         ST    @14,LISTPTR                                         1004
*                  DO Z = 1 BY 1 TO LISTNUM WHILE R15 < FOUR;      1005
         LA    @14,1                                               1005
         ST    @14,Z                                               1005
         B     @DE01005                                            1005
@DL01005 C     R15,@CF00064                                        1005
         BNL   @DC01005                                            1005
*                    RECCCHHR = LISTCCHR(Z);               /*@G51DGBB*/
         MH    @14,@CH00079                                        1006
         L     @08,LISTPTR                                         1006
         ALR   @08,@14                                             1006
         BCTR  @08,0                                               1006
         MVC   RECCCHHR(5,R2),LISTCCHR-4(@08)                      1006
*                      CALL IOHND(READIRCT); /*READ FRAME OFF DRCTWK*/
         L     @15,ADIOHND(,R2)                                    1007
         LA    @01,@AL01007                                        1007
         BALR  @14,@15                                             1007
*                      IF R15 = ZERO THEN    /*IF SUCCESS THEN WRITE*/
         LTR   R15,R15                                             1008
         BNZ   @RF01008                                            1008
*                        CALL IOHND(RITEHIST); /*TO ACCDEV   @G51DGBB*/
         L     @15,ADIOHND(,R2)                                    1009
         LA    @01,@AL01009                                        1009
         BALR  @14,@15                                             1009
*                    END;                                  /*@G51DGBB*/
@RF01008 LA    @14,1                                               1010
         AL    @14,Z                                               1010
         ST    @14,Z                                               1010
@DE01005 L     @08,LISTPTR                                         1010
         C     @14,LISTNUM(,@08)                                   1010
         BNH   @DL01005                                            1010
@DC01005 DS    0H                                                  1011
*                 END;                                     /*@G51DGBB*/
*             END;                                         /*@G51DGBB*/
*           ELSE  /*INCOMPLETE FRAME SET                     @G51DGBB*/
*             DO;                                          /*@G51DGBB*/
         B     @RC00993                                            1013
@RF00993 DS    0H                                                  1014
*               MSGNO = 78; /*MISSING FRAME SET MESSAGE      @G51DGBB*/
         MVI   MSGNO,X'4E'                                         1014
*               CCHINDX = A;   /*CORRECT DEBUG FRAME COUNTS BY */  1015
         L     @14,A                                               1015
         ST    @14,CCHINDX                                         1015
*               CALL ERRMSG;                               /*@G51DGBB*/
         BAL   @14,ERRMSG                                          1016
*               CALL FIXENTRY; /*PASSING ENTRY INDEX TO FIXENTRY*/ 1017
         BAL   @14,FIXENTRY                                        1017
*             END;                                         /*@G51DGBB*/
*         END;                                             /*@G51DGBB*/
@RC00993 LA    @14,1                                               1019
         AL    @14,A                                               1019
         ST    @14,A                                               1019
@DE00992 L     @08,FRAMEPTR(,R2)                                   1019
         C     @14,FRAMENUM(,@08)                                  1019
         BNH   @DL00992                                            1019
@DC00992 DS    0H                                                  1020
*      END;                                                /*@G51DGBB*/
*     GEN(FREEMAIN R,SP=21);                               /*@G51DGBB*/
@RF00984 DS    0H                                                  1021
         FREEMAIN R,SP=21
* END;                                                     /*@G51DGBB*/
*IF ERROR = OVERFLOW × ERROR = ENDFILE THEN                        1023
@RF00982 L     @14,ERROR                                           1023
         C     @14,@CF00066                                        1023
         BE    @RT01023                                            1023
         C     @14,@CF00064                                        1023
         BNE   @RF01023                                            1023
@RT01023 DS    0H                                                  1024
*  ERROR = ZERO;                                           /*@0001VLS*/
         SLR   @14,@14                                             1024
         ST    @14,ERROR                                           1024
*BUG(40) = BUG(2) + BUG(3) + BUG(4) + BUG(5) + BUG(6); /*ADD SAVED*/
@RF01023 L     @14,BUG+4                                           1025
         AL    @14,BUG+8                                           1025
         AL    @14,BUG+12                                          1025
         AL    @14,BUG+16                                          1025
         AL    @14,BUG+20                                          1025
         ST    @14,BUG+156                                         1025
*/*SOFT, MCH, CCH, IPL, AND EOD RECORDS USED IN SYSUM PART ONE*/   1026
*NUMREC = BUG(40);                                         /*@G51DGBB*/
         ST    @14,NUMREC                                          1026
*CVD(NUMREC,PACKPAS); /*PRINT NUMBER OF RECORDS PASSED FILTERING*/ 1027
         CVD   @14,@TS00001                                        1027
         MVC   PACKPAS(4),@TS00001+4                               1027
*PACKPAS = (PACKPAS × '0000000F'X); /*CHANGE SIGN FROM C TO F*/    1028
         OC    PACKPAS(4),@CB01482                                 1028
*UNPK(EDFLD,PACKPAS);                                      /*@Z427VLS*/
         UNPK  EDFLD(9),PACKPAS(4)                                 1029
*NONBLANK = OFF; /*INITIALIZE TO NO LEADING ZEROS            @G51DGBB*/
         NI    NONBLANK,B'01111111'                                1030
*DO J = 1 BY 1 TO 8 WHILE NONBLANK = OFF;                  /*@Z427VLS*/
         LA    @14,1                                               1031
         ST    @14,J                                               1031
@DL01031 TM    NONBLANK,B'10000000'                                1031
         BNZ   @DC01031                                            1031
*  IF EDIFILD(J) = CHARZERO THEN                                   1032
         LA    @08,EDIFILD-1(@14)                                  1032
         CLI   0(@08),X'F0'                                        1032
         BNE   @RF01032                                            1032
*    EDIFILD(J) = BLANK;                                   /*@Z427VLS*/
         LA    @08,EDIFILD-1(@14)                                  1033
         MVI   0(@08),X'40'                                        1033
*  ELSE                                                            1034
*    NONBLANK = ON;                                        /*@Z427VLS*/
         B     @RC01032                                            1034
@RF01032 OI    NONBLANK,B'10000000'                                1034
*END;                                                      /*@Z427VLS*/
@RC01032 LA    @14,1                                               1035
         AL    @14,J                                               1035
         ST    @14,J                                               1035
         C     @14,@CF00066                                        1035
         BNH   @DL01031                                            1035
@DC01031 DS    0H                                                  1036
*PRINTADR = ADDR(PRINTLIN);                                /*@Z427VLS*/
         LA    @14,PRINTLIN                                        1036
         ST    @14,PRINTADR(,R2)                                   1036
*CALL IFCMSG(75,ADDR(PRINTBDY));                           /*@Z427VLS*/
         LA    @14,PRINTBDY                                        1037
         ST    @14,@AFTEMPS                                        1037
         L     @15,ADIFCMSG(,R2)                                   1037
         LA    @01,@AL01037                                        1037
         BALR  @14,@15                                             1037
*PRINTED=EDFLD;                                            /*@Z427VLS*/
         MVC   PRINTED(9),EDFLD                                    1038
*CALL IOHND(RITEPRTR);                                     /*@Z427VLS*/
         L     @15,ADIOHND(,R2)                                    1039
         LA    @01,@AL01039                                        1039
         BALR  @14,@15                                             1039
*CVD(ZZ3,PACKPAS);                                         /*@0099VLS*/
         L     @14,ZZ3                                             1040
         CVD   @14,@TS00001                                        1040
         MVC   PACKPAS(4),@TS00001+4                               1040
*PACKPAS = (PACKPAS × '0000000F'X); /*CHANGE SIGN TO F       @Z427VLS*/
         OC    PACKPAS(4),@CB01482                                 1041
*UNPK(EDFLD,PACKPAS); /*CONVERT PACK TO PRINTABLE            @Z427VLS*/
         UNPK  EDFLD(9),PACKPAS(4)                                 1042
*NONBLANK = OFF; /*REINITIALIZE SWITCH                       @Z427VLS*/
         NI    NONBLANK,B'01111111'                                1043
*DO J = 1 BY 1 TO 8 WHILE NONBLANK = OFF;                  /*@Z427VLS*/
         LA    @14,1                                               1044
         ST    @14,J                                               1044
@DL01044 TM    NONBLANK,B'10000000'                                1044
         BNZ   @DC01044                                            1044
*  IF EDIFILD(J) = CHARZERO THEN                                   1045
         LA    @08,EDIFILD-1(@14)                                  1045
         CLI   0(@08),X'F0'                                        1045
         BNE   @RF01045                                            1045
*    EDIFILD(J) = BLANK;                                   /*@Z427VLS*/
         LA    @08,EDIFILD-1(@14)                                  1046
         MVI   0(@08),X'40'                                        1046
*  ELSE                                                            1047
*    NONBLANK = ON;                                        /*@Z427VLS*/
         B     @RC01045                                            1047
@RF01045 OI    NONBLANK,B'10000000'                                1047
*END;                                                      /*@Z427VLS*/
@RC01045 LA    @14,1                                               1048
         AL    @14,J                                               1048
         ST    @14,J                                               1048
         C     @14,@CF00066                                        1048
         BNH   @DL01044                                            1048
@DC01044 DS    0H                                                  1049
*PRINTADR = ADDR(PRINTLIN);                                /*@Z427VLS*/
         LA    @14,PRINTLIN                                        1049
         ST    @14,PRINTADR(,R2)                                   1049
*CALL IFCMSG(76,ADDR(PRINTBDY));                           /*@Z427VLS*/
         LA    @14,PRINTBDY                                        1050
         ST    @14,@AFTEMPS                                        1050
         L     @15,ADIFCMSG(,R2)                                   1050
         LA    @01,@AL01050                                        1050
         BALR  @14,@15                                             1050
*PRINTED=EDFLD;                                            /*@Z427VLS*/
         MVC   PRINTED(9),EDFLD                                    1051
*CALL IOHND(RITEPRTR);                                     /*@0001VLS*/
         L     @15,ADIOHND(,R2)                                    1052
         LA    @01,@AL01052                                        1052
         BALR  @14,@15                                             1052
*IF ERROR ^= NOSRTABL THEN                                         1053
         CLC   ERROR(4),@CF00032                                   1053
         BE    @RF01053                                            1053
* DO;                                                      /*@Z427VLS*/
*   SORTNUM = PASSNUM; /*TELL EREP1 HOW MANY RECORDS IN SORTABLE*/ 1055
         L     @14,PASSNUM                                         1055
         ST    @14,SORTNUM(,R2)                                    1055
*   EXCESS = TABSIZE - (SORTNUM * LENGTH(SYSUM2));         /*@D3506GB*/
         L     @08,TABSIZE(,R2)                                    1056
         MH    @14,@CH01057                                        1056
         LCR   @14,@14                                             1056
         ALR   @14,@08                                             1056
         ST    @14,EXCESS                                          1056
*   IF EXCESS > 16 THEN /*IF AT LEAST A DOUBLEWORD TO FREE AFTER*/ 1057
         C     @14,@CF00088                                        1057
         BNH   @RF01057                                            1057
*     DO;               /*ROUNDING THE BYTE COUNT            @Z427VLS*/
*       EXCESS = (EXCESS & DBWRD); /*ROUND DOWN TO DOUBLEWORD AMMOUNT*/
         N     @14,@CF00893                                        1059
         ST    @14,EXCESS                                          1059
*       RESPECIFY (R0,R1) RESTRICTED;                      /*@Z427VLS*/
*       R0 = EXCESS;                                       /*@Z427VLS*/
         LR    R0,@14                                              1061
*       R1 = SORTADR + TABSIZE - EXCESS; /*POINT TO BEGINNING OF UNUSE*
         AL    @08,SORTADR(,R2)                                    1062
         SLR   @08,@14                                             1062
         LR    R1,@08                                              1062
*       GEN(FREEMAIN  R,LV=(0),A=(1));                     /*@Z427VLS*/
         FREEMAIN  R,LV=(0),A=(1)
*       RESPECIFY (R0,R1) UNRESTRICTED;                    /*@Z427VLS*/
*     END;                                                 /*@Z427VLS*/
*     RESPECIFY(R1) UNRESTRICTED;                          /*@Z427VLS*/
@RF01057 DS    0H                                                  1067
*  END;                                                    /*@Z427VLS*/
*IF SORTNUM = ZERO & NUMREC = ZERO THEN                            1068
@RF01053 SLR   @14,@14                                             1068
         C     @14,SORTNUM(,R2)                                    1068
         BNE   @RF01068                                            1068
         C     @14,NUMREC                                          1068
         BNE   @RF01068                                            1068
*  ERROR = TERMINAT;                                       /*@0001VLS*/
         MVC   ERROR(4),@CF00032                                   1069
*IF ERROR = SUCCESS THEN                                           1070
@RF01068 SLR   @14,@14                                             1070
         C     @14,ERROR                                           1070
         BNE   @RF01070                                            1070
* DO;                                                      /*@Z427VLS*/
*  IF NUMREC > ZERO × SORTNUM > ZERO THEN /*IF SOME PART1 RECORDS*/
         C     @14,NUMREC                                          1072
         BL    @RT01072                                            1072
         C     @14,SORTNUM(,R2)                                    1072
         BNL   @RF01072                                            1072
@RT01072 DS    0H                                                  1073
*    CALL SORTONE; /*SORT EVTABLE,SYSUMONE,SET EVLETTER IF UNSET*/ 1073
         BAL   @14,SORTONE                                         1073
*  IF SORTNUM > ZERO THEN /*IF SOME OBR,MDR RECS SAVED IN SYSUM2*/ 1074
@RF01072 L     @14,SORTNUM(,R2)                                    1074
         LTR   @14,@14                                             1074
         BNP   @RF01074                                            1074
*    CALL SORTWO; /*SORT SYSUM2                              @Z427VLS*/
         BAL   @14,SORTWO                                          1075
* END;                                                     /*@Z427VLS*/
*RESPECIFY (R15) UNRESTRICTED;                             /*@Z427VLS*/
*END; /*CLOSING END TO PROC ENDOFILE                         @Z427VLS*/
@EL00023 DS    0H                                                  1078
@EF00023 DS    0H                                                  1078
@ER00023 LM    @14,@12,@SA00023                                    1078
         BR    @14                                                 1078
*ALLREC: PROC;  /*RECORD DEPENDENT SELECTION CRITTERIA       @Z427VLS*/
ALLREC   STM   @14,@12,@SA00024                                    1079
*               /*COMPARE RECORD ITEMS PRECEEDED BY          @Z427VLS*/
*               /* LRT TO PARAMETER TABLE SELECTION          @Z427VLS*/
*               /*VALUES AND RANGES                          @Z427VLS*/
*PASSFLAG = YES; /*RECORD SELECTED IF PASSFLAG NOT SET TO NO @Z427VLS*/
         OI    PASSFLAG(R2),B'00000001'                            1080
*IF LRTDATE >= STDATE & LRTDATE <= ENDDATE THEN                    1081
         CLC   LRTDATE(4,R7),STDATE(R2)                            1081
         BL    @RF01081                                            1081
         CLC   LRTDATE(4,R7),ENDDATE(R2)                           1081
         BH    @RF01081                                            1081
*  DO;                                                     /*@Z427VLS*/
*    IF (LRTTIME >= STTIME1 & LRTTIME <= ENDTIME1) ×               1083
*       (LRTTIME >= STTIME2 & LRTTIME <= ENDTIME2) THEN            1083
         CLC   LRTTIME(4,R7),STTIME1(R2)                           1083
         BL    @GL00068                                            1083
         CLC   LRTTIME(4,R7),ENDTIME1(R2)                          1083
         BNH   @RT01083                                            1083
@GL00068 CLC   LRTTIME(4,R7),STTIME2(R2)                           1083
         BL    @RF01083                                            1083
         CLC   LRTTIME(4,R7),ENDTIME2(R2)                          1083
         BH    @RF01083                                            1083
@RT01083 DS    0H                                                  1084
*      DO;                                                 /*@Z427VLS*/
*        IF CPUPTR ^= ZERO THEN                                    1085
         L     @08,CPUPTR(,R2)                                     1085
         LTR   @08,@08                                             1085
         BZ    @RF01085                                            1085
*         DO;                                              /*@Z427VLS*/
*          CPUOK = NO;                                     /*@Z427VLS*/
         NI    CPUOK,B'11011111'                                   1087
*          DO Z = 1 BY 1 TO CPUNUM WHILE CPUOK = NO;       /*@Z427VLS*/
         LA    @08,1                                               1088
         ST    @08,Z                                               1088
         B     @DE01088                                            1088
@DL01088 TM    CPUOK,B'00100000'                                   1088
         BNZ   @DC01088                                            1088
*           IF CPUVAL(Z) = LRTCPMOD THEN CPUOK = YES;      /*@Z427VLS*/
         MH    @08,@CH00079                                        1089
         L     @06,CPUPTR(,R2)                                     1089
         ALR   @06,@08                                             1089
         AL    @06,@CF01570                                        1089
         CLC   CPUVAL-2(5,@06),LRTCPMOD(R7)                        1089
         BNE   @RF01089                                            1089
         OI    CPUOK,B'00100000'                                   1090
*          END;                                            /*@Z427VLS*/
@RF01089 LA    @08,1                                               1091
         AL    @08,Z                                               1091
         ST    @08,Z                                               1091
@DE01088 L     @06,CPUPTR(,R2)                                     1091
         CH    @08,CPUNUM(,@06)                                    1091
         BNH   @DL01088                                            1091
@DC01088 DS    0H                                                  1092
*          IF CPUOK = NO THEN                                      1092
         TM    CPUOK,B'00100000'                                   1092
         BNZ   @RF01092                                            1092
*           DO;                                            /*@Z427VLS*/
*            PASSFLAG = NO;                                /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            1094
*           END;                                           /*@Z427VLS*/
*         END;                                             /*@Z427VLS*/
@RF01092 DS    0H                                                  1097
*        IF PASSFLAG = YES THEN                                    1097
@RF01085 TM    PASSFLAG(R2),B'00000001'                            1097
         BNO   @RF01097                                            1097
*        DO;                                               /*@Z427VLS*/
*        IF SHIFT3RD = ON &                                        1099
*          ((LRTDATE = STDATE & LRTTIME < STTIME1) ×               1099
*           (LRTDATE = ENDDATE & LRTTIME > ENDTIME2))              1099
*           THEN                                                   1099
         TM    SHIFT3RD(R2),B'00010000'                            1099
         BNO   @RF01099                                            1099
         CLC   LRTDATE(4,R7),STDATE(R2)                            1099
         BNE   @GL00072                                            1099
         CLC   LRTTIME(4,R7),STTIME1(R2)                           1099
         BL    @RT01099                                            1099
@GL00072 CLC   LRTDATE(4,R7),ENDDATE(R2)                           1099
         BNE   @RF01099                                            1099
         CLC   LRTTIME(4,R7),ENDTIME2(R2)                          1099
         BNH   @RF01099                                            1099
@RT01099 DS    0H                                                  1100
*              PASSFLAG = NO;                              /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            1100
*        END;                                              /*@Z427VLS*/
@RF01099 DS    0H                                                  1102
*      IF PASSFLAG = YES & LRTCPUS = ZERO THEN                     1102
@RF01097 TM    PASSFLAG(R2),B'00000001'                            1102
         BNO   @RF01102                                            1102
         ICM   @08,7,LRTCPUS(R7)                                   1102
         BNZ   @RF01102                                            1102
*       DO;                                                /*@Z427VLS*/
*        MSGNO = 5;                                        /*@Z427VLS*/
         MVI   MSGNO,X'05'                                         1104
*        CALL ERRMSG;                                      /*@Z427VLS*/
         BAL   @14,ERRMSG                                          1105
*        PASSFLAG = NO;                                    /*@Z427VLS*/
         NI    PASSFLAG(R2),B'11111110'                            1106
*       END;                                               /*@Z427VLS*/
*      END;                                                /*@Z427VLS*/
*    ELSE                                                          1109
*      PASSFLAG = NO;                                      /*@Z427VLS*/
         B     @RC01083                                            1109
@RF01083 NI    PASSFLAG(R2),B'11111110'                            1109
*   END;                                                   /*@Z427VLS*/
*  ELSE                                                            1111
*   PASSFLAG = NO;                                         /*@Z427VLS*/
         B     @RC01081                                            1111
@RF01081 NI    PASSFLAG(R2),B'11111110'                            1111
*END;                                                      /*@Z427VLS*/
@EL00024 DS    0H                                                  1112
@EF00024 DS    0H                                                  1112
@ER00024 LM    @14,@12,@SA00024                                    1112
         BR    @14                                                 1112
*SORTWO  : PROC;                                           /*@Z427VLS*/
SORTWO   STM   @14,@12,@SA00025                                    1113
*  /*MUST ADJUST POINTERS TO EVTABLE, SYSCPU AND SYSOLD, AS A RESULT*/
*  /*OF SORT OF EVTABLE                                      @Z427VLS*/
*  /* INVERT 'FLIPFLOP' FOR ADJUSTING CPU INDICES           @ZA36003 */
*    RESPECIFY(R8) RESTRICTED;                           /* @ZA36003 */
*    DO I = 1 TO 16 WHILE I <= EVNUM;  /* INTERCHANGE       @ZA36003 */
         LA    @06,1                                               1115
         ST    @06,I                                               1115
@DL01115 L     @03,EVPTR(,R2)                                      1115
         CH    @06,EVNUM(,@03)                                     1115
         BH    @DC01115                                            1115
*      R8 = FLIPFLOP(I);               /*  FLIPFLOP VALUES  @ZA36003 */
         SLR   R8,R8                                               1116
         IC    R8,FLIPFLOP-1(@06)                                  1116
*      FLIPCPUS(R8+1) = I-1;           /*  AND INDICES      @ZA36003 */
         LR    @03,@06                                             1117
         BCTR  @03,0                                               1117
         STC   @03,FLIPCPUS(R8)                                    1117
*    END; /* INVERSION OF 'FLIPFLOP'.                       @ZA36003 */
         AL    @06,@CF00055                                        1118
         ST    @06,I                                               1118
         C     @06,@CF00088                                        1118
         BNH   @DL01115                                            1118
@DC01115 DS    0H                                                  1119
*    RESPECIFY(R8) UNRESTRICTED;                         /* @ZA36003 */
*  DO J = 1 BY 1 TO PASSNUM; /*EXAMINE ALL ENTRIES OF SYSUM2 @Z427VLS*/
         LA    @08,1                                               1120
         ST    @08,J                                               1120
         B     @DE01120                                            1120
@DL01120 DS    0H                                                  1121
*    WORKBYTE = TMPCPUS(J); /*GET CPU,OLD FROM PARTICULAR ENTRY*/  1121
         LR    @06,@08                                             1121
         MH    @06,@CH01057                                        1121
         L     @03,SORTADR(,R2)                                    1121
         ST    @06,@TF00001                                        1121
         ALR   @06,@03                                             1121
         AL    @06,@CF01578                                        1121
         MVC   WORKBYTE(1),TMPCPUS-3(@06)                          1121
*    WORKTWO  = WORKBYTE; /*DITTO                            @Z427VLS*/
         MVC   WORKTWO(1),WORKBYTE                                 1122
*    SRL(WORKBYTE,4); /*WORKBYTE, WORKNUM NOW ARE TMPCPU     @Z427VLS*/
         SLR   @06,@06                                             1123
         IC    @06,WORKBYTE                                        1123
         SRL   @06,4                                               1123
         STC   @06,WORKBYTE                                        1123
*    WORKTWO = (WORKTWO & '0F'X);   /*WORKTWO, WORKNM2 NOW ARE TMPOLD*/
         NI    WORKTWO,X'0F'                                       1124
*    WORKNM2 = WORKNM2 + 1; /*ADJUST INDEX TO START AT ONE, NOT ZERO*/
         LA    @06,1                                               1125
         SLR   @15,@15                                             1125
         IC    @15,WORKNM2                                         1125
         ALR   @15,@06                                             1125
         STC   @15,WORKNM2                                         1125
*    TMPCPUS(J) = FLIPCPUS(WORKNM2);    /*SET SORTED TMPOLD @ZA36003 */
         LR    @01,@03                                             1126
         AL    @01,@TF00001                                        1126
         AL    @01,@CF01578                                        1126
         LA    @14,FLIPCPUS-1(@15)                                 1126
         MVC   TMPCPUS-3(1,@01),0(@14)                             1126
*    WORKNM = WORKNM + 1; /*ADJUST INDEX TO START AT ONE, NOT ZERO*/
         SLR   @15,@15                                             1127
         IC    @15,WORKNM                                          1127
         ALR   @06,@15                                             1127
         STC   @06,WORKNM                                          1127
*    WORKTWO = FLIPCPUS(WORKNM);     /*SET SORTED TMPCPU    @ZA36003 */
         LA    @01,FLIPCPUS-1(@06)                                 1128
         MVC   WORKTWO(1),0(@01)                                   1128
*    SLL(WORKTWO,4); /*SET SORTED TMPCPU TO FIRST FOUR BITS  @Z427VLS*/
         SLR   @06,@06                                             1129
         IC    @06,WORKTWO                                         1129
         SLL   @06,4                                               1129
         STC   @06,WORKTWO                                         1129
*    TMPCPUS(J) = (TMPCPUS(J) × WORKTWO); /*PUT VALUE BACK IN RECORD*/
         LR    @06,@03                                             1130
         AL    @06,@TF00001                                        1130
         AL    @06,@CF01578                                        1130
         OC    TMPCPUS-3(1,@06),WORKTWO                            1130
*    /*CODE ADDED TO SHIFT 3705 ERROR TYPE PAST TMPCPU INDEX FOR*/ 1131
*    /*PROPER SORTING. LAST SECOND CHANGE OCT 13, 1976       @Z427VLS*/
*    WORKTWO = (TMPCPUS(J) & '0F'X); /*GET OLD CPU INDEX     @Z427VLS*/
         LR    @06,@03                                             1131
         AL    @06,@TF00001                                        1131
         AL    @06,@CF01578                                        1131
         MVC   WORKTWO(1),TMPCPUS-3(@06)                           1131
         NI    WORKTWO,X'0F'                                       1131
*    TMPCPUS(J) = (TMPCPUS(J) & 'F0'X); /*ZERO OLD CPU INDEX @Z427VLS*/
         LR    @06,@03                                             1132
         AL    @06,@TF00001                                        1132
         AL    @06,@CF01578                                        1132
         NI    TMPCPUS-3(@06),X'F0'                                1132
*    TMPITEM(J) = (TMPITEM(J) × WORKTWO); /*REPLACE OLD INDEX AT TMPOD*
         AL    @03,@TF00001                                        1133
         AL    @03,@CF01571                                        1133
         OC    TMPITEM-4(1,@03),WORKTWO                            1133
*  END;                                                    /*@Z427VLS*/
         AL    @08,@CF00055                                        1134
         ST    @08,J                                               1134
@DE01120 C     @08,PASSNUM                                         1134
         BNH   @DL01120                                            1134
*/* SORT THAT ONLY EXAMINES AN ENTRY ONCE IF DATA IS IN ORDER*/    1135
*RESPECIFY (R15,R3,R4,R6,R1) RESTRICTED;                   /*@Z427VLS*/
*IF SORTNUM > 1 & DEBUG23 = OFF THEN /*IF AT LEAST TWO RECORDS AND*/
         L     @14,SORTNUM(,R2)                                    1136
         C     @14,@CF00055                                        1136
         BNH   @RF01136                                            1136
         TM    DEBUG23(R2),B'00000001'                             1136
         BNZ   @RF01136                                            1136
*  DO;     /*DEBUG OPTION DOESNT SAY DONT SORT THEN          @Z427VLS*/
* SRTCONT = ((PASSNUM-1)*14) + SORTADR;                    /*@D3506GB*/
         L     @14,PASSNUM                                         1138
         BCTR  @14,0                                               1138
         MH    @14,@CH01057                                        1138
         AL    @14,SORTADR(,R2)                                    1138
         ST    @14,SRTCONT                                         1138
*GENERATE REFS(TMP2,TMPKEY);                               /*@0099VLS*/
    LA    R15,14
    L    R3,SORTADR(R2)
    L    R4,SRTCONT
    LR   R1,R3
    B    DOIT
LOOPBCK1 ALR  R3,R15
         CR   R3,R4
         BNL  DONE
DOIT   CLC   TMPKEY(6,R3),TMPKEY+14(R3)
         BNH  LOOPBCK1
       XC    TMP2(14,R3),TMP2+14(R3)
       XC    TMP2+14(14,R3),TMP2(R3)
       XC    TMP2(14,R3),TMP2+14(R3)
         LR   R6,R3
LOOPBCK2 SR   R6,R15
         CR   R6,R1
         BL   LOOPBCK1
       CLC   TMPKEY(6,R6),TMPKEY+14(R6)
         BNH  LOOPBCK1
       XC    TMP2+14(14,R6),TMP2(R6)
       XC    TMP2(14,R6),TMP2+14(R6)
       XC    TMP2+14(14,R6),TMP2(R6)
          B     LOOPBCK2           TRY COMPARE UP ONE MORE IN TABLE
DONE      EQU   *
*END;                                                      /*@Z427VLS*/
* RESPECIFY (R1,R3,R4,R6,R15) UNRESTRICTED;                /*@Z427VLS*/
*END; /*CLOSING END TO PROC SORTWO                           @Z427VLS*/
@EL00025 DS    0H                                                  1142
@EF00025 DS    0H                                                  1142
@ER00025 LM    @14,@12,@SA00025                                    1142
         BR    @14                                                 1142
*/*                                                          @Z427VLS*/
*MCHFILT: PROC;                                            /*@Z427VLS*/
MCHFILT  STM   @14,@12,@SA00026                                    1143
*IF MCHSYSTR = ON THEN /*IF NON-RECOVERABLE MCH              @Z427VLS*/
         TM    MCHSYSTR(R7),B'10000000'                            1144
         BNO   @RF01144                                            1144
*  SYSUMMCN = SYSUMMCN + 1;                                /*@Z427VLS*/
         L     @08,SYSUMPTR(,R2)                                   1145
         LA    @06,1                                               1145
         AL    @06,SYSUMMCN(,@08)                                  1145
         ST    @06,SYSUMMCN(,@08)                                  1145
*ELSE            /*IF RECOVERABLE MCH                        @Z427VLS*/
*  SYSUMMCR = SYSUMMCR + 1;                                /*@Z427VLS*/
         B     @RC01144                                            1146
@RF01144 L     @08,SYSUMPTR(,R2)                                   1146
         LA    @06,1                                               1146
         AL    @06,SYSUMMCR(,@08)                                  1146
         ST    @06,SYSUMMCR(,@08)                                  1146
*IF FRAMEPTR ^= ZERO THEN /*IF FRAMETAB HAS BEEN ALLOCATED   @G51DGBB*/
@RC01144 L     @08,FRAMEPTR(,R2)                                   1147
         LTR   @08,@08                                             1147
         BZ    @RF01147                                            1147
*DO;                                                       /*@G51DGBB*/
*GETOUT = NO;                                              /*@G51DGBB*/
         NI    GETOUT,B'11110111'                                  1149
*DO A = 1 BY 1 TO MRDNUMBR WHILE GETOUT = NO; /*LOOP THROUGH LIST OF */
         LA    @08,1                                               1150
         ST    @08,A                                               1150
         B     @DE01150                                            1150
@DL01150 TM    GETOUT,B'00001000'                                  1150
         BNZ   @DC01150                                            1150
*                                           /*MERIDIAN-LIKE CPUS   */
*  IF MODEL(A) = LRTMODEL THEN             /*IF MERIDIAN-LIKE CPU */
         ALR   @08,@08                                             1151
         L     @06,MERDCPTR(,R2)                                   1151
         ALR   @06,@08                                             1151
         CLC   MODEL-2(2,@06),LRTMODEL(R7)                         1151
         BNE   @RF01151                                            1151
*    DO;                                                   /*@G51DGBB*/
*      CALL BUILDFTB; /*SEE IF UNIQUE, BUILD FRAMTAB ENTRY IF IT IS */
         BAL   @14,BUILDFTB                                        1153
*      GETOUT = YES;  /*EXIT LOOP                            @G51DGBB*/
         OI    GETOUT,B'00001000'                                  1154
*    END;                                                  /*@G51DGBB*/
*END;                                                      /*@G51DGBB*/
@RF01151 LA    @08,1                                               1156
         AL    @08,A                                               1156
         ST    @08,A                                               1156
@DE01150 L     @06,MERDCPTR(,R2)                                   1156
         CH    @08,MRDNUMBR(,@06)                                  1156
         BNH   @DL01150                                            1156
@DC01150 DS    0H                                                  1157
*END;                                                      /*@G51DGBB*/
*END;                                                      /*@Z427VLS*/
@EL00026 DS    0H                                                  1158
@EF00026 DS    0H                                                  1158
@ER00026 LM    @14,@12,@SA00026                                    1158
         BR    @14                                                 1158
*/*                                                          @Z427VLS*/
*/*                                                          @Z427VLS*/
*SOFTFILT: PROC;                                           /*@Z427VLS*/
SOFTFILT STM   @14,@12,12(@13)                                     1159
*IF SFTKEY1 = HEX40 THEN /*IF PROGRAM ABEND                  @Z427VLS*/
         CLI   SFTKEY1(R7),X'40'                                   1160
         BNE   @RF01160                                            1160
* DO;                                                      /*@0001VLS*/
*  SYSUMPEA = SYSUMPEA + ONE;                              /*@Z427VLS*/
         L     @08,SYSUMPTR(,R2)                                   1162
         LA    @06,1                                               1162
         L     @03,SYSUMPEA(,@08)                                  1162
         ALR   @03,@06                                             1162
         ST    @03,SYSUMPEA(,@08)                                  1162
*  BUG(2) = BUG(2) + ONE;                                  /*@0001VLS*/
         AL    @06,BUG+4                                           1163
         ST    @06,BUG+4                                           1163
* END;                                                     /*@0001VLS*/
*ELSE                                                              1165
*  DO;                                                     /*@Z427VLS*/
         B     @RC01160                                            1165
@RF01160 DS    0H                                                  1166
*    IF SFTKEY1 = HEX42 THEN /*IF PROGRAM INTERRUPT          @Z427VLS*/
         CLI   SFTKEY1(R7),X'42'                                   1166
         BNE   @RF01166                                            1166
*     DO;                                                  /*@0001VLS*/
*      SYSUMPEI = SYSUMPEI + ONE;                          /*@Z427VLS*/
         L     @08,SYSUMPTR(,R2)                                   1168
         LA    @06,1                                               1168
         L     @03,SYSUMPEI(,@08)                                  1168
         ALR   @03,@06                                             1168
         ST    @03,SYSUMPEI(,@08)                                  1168
*      BUG(2) = BUG(2) + ONE;                              /*@0001VLS*/
         AL    @06,BUG+4                                           1169
         ST    @06,BUG+4                                           1169
*     END;                                                 /*@0001VLS*/
*    ELSE                                                          1171
*      DO;                                                 /*@Z427VLS*/
         B     @RC01166                                            1171
@RF01166 DS    0H                                                  1172
*        IF SFTKEY1 = HEX44 THEN /*IF PROGRAM RESTART        @Z427VLS*/
         CLI   SFTKEY1(R7),X'44'                                   1172
         BNE   @RF01172                                            1172
*          DO;                                             /*@0001VLS*/
*          SYSUMPER = SYSUMPER + ONE;                      /*@Z427VLS*/
         L     @08,SYSUMPTR(,R2)                                   1174
         LA    @06,1                                               1174
         L     @03,SYSUMPER(,@08)                                  1174
         ALR   @03,@06                                             1174
         ST    @03,SYSUMPER(,@08)                                  1174
*           BUG(2) = BUG(2) + ONE;                         /*@0001VLS*/
         AL    @06,BUG+4                                           1175
         ST    @06,BUG+4                                           1175
*          END;                                            /*@0001VLS*/
*      END;                                                /*@Z427VLS*/
*  END;                                                    /*@Z427VLS*/
*                                                                  1178
*END;                                                      /*@Z427VLS*/
@EL00027 DS    0H                                                  1179
@EF00027 DS    0H                                                  1179
@ER00027 LM    @14,@12,12(@13)                                     1179
         BR    @14                                                 1179
*ERRMSG: PROC;                                             /*@Z427VLS*/
ERRMSG   STM   @14,@12,@SA00028                                    1180
*RESPECIFY(R3) RESTRICTED;                                 /*@Z427VLS*/
*PRINTADR = ADDR(PRINTLIN);                                /*@Z427VLS*/
         LA    @08,PRINTLIN                                        1182
         ST    @08,PRINTADR(,R2)                                   1182
*IF MSGNO=1  ×                                           /* @XA19728 */
*   MSGNO=2  THEN                                        /* @XA19728 */
         CLI   MSGNO,1                                             1183
         BE    @RT01183                                            1183
         CLI   MSGNO,2                                             1183
         BNE   @RF01183                                            1183
@RT01183 DS    0H                                                  1184
*  DO;                                                     /*@GZZDGVS*/
*    ZEROALL=NO;         /* DONT RESET LOGREC HEADER OF ALL  @GZZDGVS*/
         NI    ZEROALL(R2),B'10111111'                             1185
*                        /* RECORDS NOT PROCESSED           @XA19728 */
*    CALL IFCMSG(55,ADDR(PRINTBDY));  /*GET FAILED SORT TBL @Z427VLS */
         LA    @08,PRINTBDY                                        1186
         ST    @08,@AFTEMPS+4                                      1186
         L     @15,ADIFCMSG(,R2)                                   1186
         LA    @01,@AL01186                                        1186
         BALR  @14,@15                                             1186
*  END;                                                    /*@GZZDGVS*/
*IF MSGNO = 3 THEN                                                 1188
@RF01183 CLI   MSGNO,3                                             1188
         BNE   @RF01188                                            1188
*   CALL IFCMSG(53,ADDR(PRINTBDY));                        /*@Z427VLS*/
         LA    @08,PRINTBDY                                        1189
         ST    @08,@AFTEMPS+4                                      1189
         L     @15,ADIFCMSG(,R2)                                   1189
         LA    @01,@AL01189                                        1189
         BALR  @14,@15                                             1189
*IF MSGNO = 6 THEN  /*TOO MANY CPU SERIAL NUMBERS IN INPUT STREAM*/
@RF01188 CLI   MSGNO,6                                             1190
         BNE   @RF01190                                            1190
*  DO;                                                     /*@Z427VLS*/
*   CALL IFCMSG(74,ADDR(PRINTBDY));                        /*@Z427VLS*/
         LA    @08,PRINTBDY                                        1192
         ST    @08,@AFTEMPS+4                                      1192
         L     @15,ADIFCMSG(,R2)                                   1192
         LA    @01,@AL01192                                        1192
         BALR  @14,@15                                             1192
*    ER3 = EVSERIAL(K);                                    /*@Z427VLS*/
         L     @08,K                                               1193
         MH    @08,@CH00081                                        1193
         L     @06,EVPTR(,R2)                                      1193
         ALR   @06,@08                                             1193
         MVC   ER3(3),EVSERIAL-6(@06)                              1193
*    SLL(ERSER,4); /*SHIFT SERIAL IN ORDER TO ADD PACKED SIGN*/    1194
         L     @08,ERSER                                           1194
         SLL   @08,4                                               1194
         ST    @08,ERSER                                           1194
*    ER3 = (ER3 × '00000F'X); /*ADD SIGN FOR UNPACKING OPERATION*/ 1195
         OC    ER3(3),@CB00228                                     1195
*    UNPK(PRNTSER,ERSER);                                  /*@Z427VLS*/
         UNPK  PRNTSER(7),ERSER(4)                                 1196
*  END;                                                    /*@Z427VLS*/
*IF MSGNO = 5   THEN                                               1198
@RF01190 CLI   MSGNO,5                                             1198
         BNE   @RF01198                                            1198
*   CALL IFCMSG(72,ADDR(PRINTBDY));                        /*@Z427VLS*/
         LA    @08,PRINTBDY                                        1199
         ST    @08,@AFTEMPS+4                                      1199
         L     @15,ADIFCMSG(,R2)                                   1199
         LA    @01,@AL01199                                        1199
         BALR  @14,@15                                             1199
*IF MSGNO = 78 THEN                                                1200
@RF01198 CLI   MSGNO,78                                            1200
         BNE   @RF01200                                            1200
* DO;                                                      /*@G51DGBB*/
*   CALL IFCMSG(78,ADDR(PRINTBDY));                        /*@G51DGBB*/
         LA    @08,PRINTBDY                                        1202
         ST    @08,@AFTEMPS+4                                      1202
         L     @15,ADIFCMSG(,R2)                                   1202
         LA    @01,@AL01202                                        1202
         BALR  @14,@15                                             1202
*   NUMBER = 3;                                            /*@G51DGBB*/
         MVC   NUMBER(4),@CF00076                                  1203
*   ADDNXT = ADDR(PFRAMSER);                               /*@G51DGBB*/
         LA    @08,PFRAMSER                                        1204
         ST    @08,ADDNXT                                          1204
*   NEXTBY = ADDR(FRAMESER(CCHINDX));                      /*@G51DGBB*/
         L     @08,CCHINDX                                         1205
         MH    @08,@CH00227                                        1205
         L     @06,FRAMEPTR(,R2)                                   1205
         AL    @06,@CF01562                                        1205
         LA    @08,FRAMESER-4(@08,@06)                             1205
         ST    @08,NEXTBY                                          1205
*   CALL CONVERT;                                          /*@G51DGBB*/
         BAL   @14,CONVERT                                         1206
*   NUMBER = 2;                                            /*@G51DGBB*/
         MVC   NUMBER(4),@CF00074                                  1207
*   ADDNXT = ADDR(PFRAMMOD);                               /*@G51DGBB*/
         LA    @08,PFRAMMOD                                        1208
         ST    @08,ADDNXT                                          1208
*   NEXTBY = ADDR(FRAMEMOD(CCHINDX));                      /*@G51DGBB*/
         L     @08,CCHINDX                                         1209
         MH    @08,@CH00227                                        1209
         L     @06,FRAMEPTR(,R2)                                   1209
         AL    @06,@CF01579                                        1209
         LA    @08,FRAMEMOD-7(@08,@06)                             1209
         ST    @08,NEXTBY                                          1209
*   CALL CONVERT;                                          /*@G51DGBB*/
         BAL   @14,CONVERT                                         1210
*  END;                                                    /*@G51DGBB*/
*IF MSGNO = 79 & DEBUG16 = ON THEN /*IF PARTIAL FRAME SET AND DEBUG16*/
@RF01200 CLI   MSGNO,79                                            1212
         BNE   @RF01212                                            1212
         TM    DEBUG16(R2),B'10000000'                             1212
         BNO   @RF01212                                            1212
*  DO;                                                     /*@G51DGBB*/
*    NUMBER = 3;                                           /*@G51DGBB*/
         MVC   NUMBER(4),@CF00076                                  1214
*    ADDNXT = ADDR(PARSER);                                /*@G51DGBB*/
         LA    @08,PARSER                                          1215
         ST    @08,ADDNXT                                          1215
*    NEXTBY = ADDR(FRAMESER(CCHINDX));                     /*@G51DGBB*/
         L     @08,CCHINDX                                         1216
         MH    @08,@CH00227                                        1216
         L     @06,FRAMEPTR(,R2)                                   1216
         AL    @06,@CF01562                                        1216
         LA    @08,FRAMESER-4(@08,@06)                             1216
         ST    @08,NEXTBY                                          1216
*    CALL CONVERT;                                         /*@G51DGBB*/
         BAL   @14,CONVERT                                         1217
*    NUMBER = 2;                                           /*@G51DGBB*/
         MVC   NUMBER(4),@CF00074                                  1218
*    ADDNXT = ADDR(PARMOD);                                /*@G51DGBB*/
         LA    @08,PARMOD                                          1219
         ST    @08,ADDNXT                                          1219
*    NEXTBY = ADDR(FRAMEMOD(CCHINDX));                     /*@G51DGBB*/
         L     @08,CCHINDX                                         1220
         MH    @08,@CH00227                                        1220
         L     @06,FRAMEPTR(,R2)                                   1220
         AL    @06,@CF01579                                        1220
         LA    @08,FRAMEMOD-7(@08,@06)                             1220
         ST    @08,NEXTBY                                          1220
*    CALL CONVERT;                                         /*@G51DGBB*/
         BAL   @14,CONVERT                                         1221
*    NUMBER = 1;                                           /*@G51DGBB*/
         MVC   NUMBER(4),@CF00055                                  1222
*    ADDNXT = ADDR(PARREP);                                /*@G51DGBB*/
         LA    @08,PARREP                                          1223
         ST    @08,ADDNXT                                          1223
*    NEXTBY = ADDR(FRAMETYP(CCHINDX));                     /*@G51DGBB*/
         L     @08,CCHINDX                                         1224
         MH    @08,@CH00227                                        1224
         L     @06,FRAMEPTR(,R2)                                   1224
         AL    @06,@CF01576                                        1224
         LA    @08,FRAMETYP-17(@08,@06)                            1224
         ST    @08,NEXTBY                                          1224
*    CALL CONVERT;                                         /*@G51DGBB*/
         BAL   @14,CONVERT                                         1225
*    PRINTBDY(1:58) = PARTIAL;                             /*@G51DGBB*/
         MVC   PRINTBDY(58),PARTIAL                                1226
*  END;                                                    /*@G51DGBB*/
*IF MSGNO = 40 THEN                                                1228
@RF01212 CLI   MSGNO,40                                            1228
         BNE   @RF01228                                            1228
* CALL IFCMSG(40,ADDR(PRINTBDY));                          /*@G51DGBB*/
         LA    @08,PRINTBDY                                        1229
         ST    @08,@AFTEMPS+4                                      1229
         L     @15,ADIFCMSG(,R2)                                   1229
         LA    @01,@AL01229                                        1229
         BALR  @14,@15                                             1229
*IF MSGNO = 24 THEN                                                1230
@RF01228 CLI   MSGNO,24                                            1230
         BNE   @RF01230                                            1230
* CALL IFCMSG(24,ADDR(PRINTBDY));                          /*@G51DGBB*/
         LA    @08,PRINTBDY                                        1231
         ST    @08,@AFTEMPS+4                                      1231
         L     @15,ADIFCMSG(,R2)                                   1231
         LA    @01,@AL01231                                        1231
         BALR  @14,@15                                             1231
*CALL IOHND(RITEPRTR);                                     /*@Z427VLS*/
@RF01230 L     @15,ADIOHND(,R2)                                    1232
         LA    @01,@AL01232                                        1232
         BALR  @14,@15                                             1232
*END;                                                      /*@Z427VLS*/
@EL00028 DS    0H                                                  1233
@EF00028 DS    0H                                                  1233
@ER00028 LM    @14,@12,@SA00028                                    1233
         BR    @14                                                 1233
*BUGCNTS: PROC;                                            /*@Z427VLS*/
BUGCNTS  STM   @14,@12,@SA00029                                    1234
*/*PRINT OUT COUNTS OF RECORDS PROCESSED IF DEBUG16 IS ON    @Z427VLS*/
*PRINTADR = ADDR(PRINTLIN); /*ADDRESS OF PRINT LINE TO IFCIOND*/   1235
         LA    @08,PRINTLIN                                        1235
         ST    @08,PRINTADR(,R2)                                   1235
* PRINTLIN = ERRLINE(33);                                  /*@D35UGGB*/
         MVI   PRINTLIN+63,C' '                                    1236
         MVC   PRINTLIN+64(70),PRINTLIN+63                         1236
         MVC   PRINTLIN(63),ERRLINE+2016                           1236
*CALL IOHND(RITEPRTR);                                     /*@Z427VLS*/
         L     @15,ADIOHND(,R2)                                    1237
         LA    @01,@AL01237                                        1237
         BALR  @14,@15                                             1237
*   DO J = 1 BY 1 TO 32;                                   /*@D35UGGB*/
         LA    @08,1                                               1238
         ST    @08,J                                               1238
@DL01238 DS    0H                                                  1239
*  NUMREC = BUG(J);                                        /*@Z427VLS*/
         SLA   @08,2                                               1239
         L     @08,BUG-4(@08)                                      1239
         ST    @08,NUMREC                                          1239
*  CVD(NUMREC,PACKPAS);                                    /*@Z427VLS*/
         CVD   @08,@TS00001                                        1240
         MVC   PACKPAS(4),@TS00001+4                               1240
*  PACKPAS = (PACKPAS × '0000000F'X);                      /*@Z427VLS*/
         OC    PACKPAS(4),@CB01482                                 1241
*  UNPK(EDFLD,PACKPAS);                                    /*@Z427VLS*/
         UNPK  EDFLD(9),PACKPAS(4)                                 1242
*  NONBLANK = OFF;                                         /*@Z427VLS*/
         NI    NONBLANK,B'01111111'                                1243
*  DO K = 1 BY 1 TO 8 WHILE NONBLANK = OFF;                /*@Z427VLS*/
         LA    @08,1                                               1244
         ST    @08,K                                               1244
@DL01244 TM    NONBLANK,B'10000000'                                1244
         BNZ   @DC01244                                            1244
*    IF EDIFILD(K) = CHARZERO THEN                                 1245
         LA    @06,EDIFILD-1(@08)                                  1245
         CLI   0(@06),X'F0'                                        1245
         BNE   @RF01245                                            1245
*      EDIFILD(K) = BLANK;                                 /*@Z427VLS*/
         LA    @06,EDIFILD-1(@08)                                  1246
         MVI   0(@06),X'40'                                        1246
*    ELSE                                                          1247
*      NONBLANK = ON;                                      /*@Z427VLS*/
         B     @RC01245                                            1247
@RF01245 OI    NONBLANK,B'10000000'                                1247
*  END;                                                    /*@Z427VLS*/
@RC01245 LA    @08,1                                               1248
         AL    @08,K                                               1248
         ST    @08,K                                               1248
         C     @08,@CF00066                                        1248
         BNH   @DL01244                                            1248
@DC01244 DS    0H                                                  1249
*  ERXNUM(J) = EDFLD;                                      /*@Z427VLS*/
         L     @08,J                                               1249
         MH    @08,@CH01548                                        1249
         LA    @06,ERXNUM-63(@08)                                  1249
         MVC   0(9,@06),EDFLD                                      1249
*  PRINTLIN = ERRLINE(J);                                  /*@Z427VLS*/
         MVI   PRINTLIN+63,C' '                                    1250
         MVC   PRINTLIN+64(70),PRINTLIN+63                         1250
         LA    @06,ERRLINE-63(@08)                                 1250
         MVC   PRINTLIN(63),0(@06)                                 1250
*  PRINTADR = ADDR(PRINTLIN);                              /*@Z427VLS*/
         LA    @08,PRINTLIN                                        1251
         ST    @08,PRINTADR(,R2)                                   1251
*  CALL IOHND(RITEPRTR);                                   /*@Z427VLS*/
         L     @15,ADIOHND(,R2)                                    1252
         LA    @01,@AL01252                                        1252
         BALR  @14,@15                                             1252
* END;                                                     /*@Z427VLS*/
         LA    @08,1                                               1253
         AL    @08,J                                               1253
         ST    @08,J                                               1253
         C     @08,@CF00892                                        1253
         BNH   @DL01238                                            1253
*END; /*CLOSING END TO PROC BUGCNTS                          @Z427VLS*/
@EL00029 DS    0H                                                  1254
@EF00029 DS    0H                                                  1254
@ER00029 LM    @14,@12,@SA00029                                    1254
         BR    @14                                                 1254
*/*THIS PROC WILL EXAMINE THE MERIDIAN MCH OR CCH IN ORDER TO BUILD*/
*/*FRAMTAB ENTRIES FOR UNIQUE RECORDS                        @G51DGBB*/
*BUILDFTB: PROC; /*BUILD NEW ENTRY IF CPU IS UNIQUE          @G51DGBB*/
BUILDFTB STM   @14,@12,@SA00030                                    1255
*LOOPOUT = NO;                                             /*@G51DGBB*/
         NI    LOOPOUT,B'11111011'                                 1256
*DO Y = 1 BY 1 TO EVMAX WHILE LOOPOUT = NO; /*EXAMINE ALL FRAMETAB*/
         LA    @08,1                                               1257
         ST    @08,Y                                               1257
@DL01257 TM    LOOPOUT,B'00000100'                                 1257
         BNZ   @DC01257                                            1257
*  IF FRAMECPU(Y) = LRTCPMOD THEN  /*IF CPU ALREADY IN TABLE THEN*/
         MH    @08,@CH00227                                        1258
         L     @06,FRAMEPTR(,R2)                                   1258
         ALR   @06,@08                                             1258
         AL    @06,@CF01562                                        1258
         CLC   FRAMECPU-4(5,@06),LRTCPMOD(R7)                      1258
         BNE   @RF01258                                            1258
*    LOOPOUT = YES; /*EXIT LOOP                              @G51DGBB*/
         OI    LOOPOUT,B'00000100'                                 1259
*  ELSE     /*IF ENTRY DOESNT MATCH THE FRAME                @G51DGBB*/
*    DO;                                                   /*@G51DGBB*/
         B     @RC01258                                            1260
@RF01258 DS    0H                                                  1261
*      IF FRAMECPU(Y) = '0000000000'X THEN /*NO MATCH ,ALL ENTS CHKED*/
         L     @08,Y                                               1261
         MH    @08,@CH00227                                        1261
         L     @06,FRAMEPTR(,R2)                                   1261
         ST    @08,@TF00001                                        1261
         ALR   @08,@06                                             1261
         AL    @08,@CF01562                                        1261
         CLC   FRAMECPU-4(5,@08),@CB00290                          1261
         BNE   @RF01261                                            1261
*        DO;                                               /*@G51DGBB*/
*          FRAMECPU(Y) = LRTCPMOD;                         /*@G51DGBB*/
         LR    @08,@06                                             1263
         AL    @08,@TF00001                                        1263
         AL    @08,@CF01562                                        1263
         MVC   FRAMECPU-4(5,@08),LRTCPMOD(R7)                      1263
*          FRAMENUM = FRAMENUM + 1; /*ADD 1 TO SET ENTRY COUNT*/   1264
         LA    @08,1                                               1264
         AL    @08,FRAMENUM(,@06)                                  1264
         ST    @08,FRAMENUM(,@06)                                  1264
*          LOOPOUT = YES;                                  /*@G51DGBB*/
         OI    LOOPOUT,B'00000100'                                 1265
*        END;                                              /*@G51DGBB*/
*      ELSE                                                        1267
*        IF Y = EVMAX THEN /*UNIQUE ENTRY BUT NOT ROOM IN TABLE*/  1267
         B     @RC01261                                            1267
@RF01261 CLC   Y(4),@CF00034                                       1267
         BNE   @RF01267                                            1267
*          DO;                                             /*@G51DGBB*/
*            IF ONETIME = NO THEN   /*ISSUE MESSAGE ONLY ONCE*/    1269
         TM    ONETIME,B'00000001'                                 1269
         BNZ   @RF01269                                            1269
*              DO;                                         /*@G51DGBB*/
*                MSGNO = 24;                               /*@G51DGBB*/
         MVI   MSGNO,X'18'                                         1271
*                CALL ERRMSG;                              /*@G51DGBB*/
         BAL   @14,ERRMSG                                          1272
*                ONETIME = YES;                            /*@G51DGBB*/
         OI    ONETIME,B'00000001'                                 1273
*              END;                                        /*@G51DGBB*/
*          END;                                            /*@G51DGBB*/
@RF01269 DS    0H                                                  1276
*   END;                                                   /*@G51DGBB*/
@RF01267 DS    0H                                                  1276
@RC01261 DS    0H                                                  1277
* END;                                                     /*@G51DGBB*/
@RC01258 LA    @08,1                                               1277
         AL    @08,Y                                               1277
         ST    @08,Y                                               1277
         C     @08,@CF00034                                        1277
         BNH   @DL01257                                            1277
@DC01257 DS    0H                                                  1278
*END; /*END OF PROC BUILDFTB                                 @G51DGBB*/
@EL00030 DS    0H                                                  1278
@EF00030 DS    0H                                                  1278
@ER00030 LM    @14,@12,@SA00030                                    1278
         BR    @14                                                 1278
*FRAMEREP: PROC; /*REPLACE FRAME IF MORE CURRENT FRAME FOUND @G51DGBB*/
FRAMEREP STM   @14,@12,@SA00031                                    1279
*                /*COMPLETE ENTRY IF NO DATE ETC.            @G51DGBB*/
*                /*APPEND LOCATION OF FRAME EXTERNAL LOCATION LIST*/
*GETOUT = NO;                                              /*@G51DGBB*/
         NI    GETOUT,B'11110111'                                  1280
*DO X = 1 BY 1 TO FRAMENUM WHILE GETOUT = NO; /*LOOP THROUGH ALL SET*/
         LA    @08,1                                               1281
         ST    @08,X                                               1281
         B     @DE01281                                            1281
@DL01281 TM    GETOUT,B'00001000'                                  1281
         BNZ   @DC01281                                            1281
*                                             /*ENTRIES OF FRAMETAB */
*  IF FRAMECPU(X) = LRTCPMOD THEN             /*IF RECORD CPU MODEL */
         LR    @06,@08                                             1282
         MH    @06,@CH00227                                        1282
         L     @15,FRAMEPTR(,R2)                                   1282
         ST    @06,@TF00001                                        1282
         ALR   @06,@15                                             1282
         AL    @06,@CF01562                                        1282
         CLC   FRAMECPU-4(5,@06),LRTCPMOD(R7)                      1282
         BNE   @RF01282                                            1282
*    DO;                                      /*SERIAL MATCHES THOSE*/
*      CCHINDX = X;  /*SAVE INDEX*/           /*OF THE ENTRY @G51DGBB*/
         ST    @08,CCHINDX                                         1284
*      IF FRAMEDT(X) < LRTDT THEN             /*IF REC DATE GREATER */
         AL    @15,@TF00001                                        1285
         AL    @15,@CF01581                                        1285
         CLC   FRAMEDT-9(8,@15),LRTDT(R7)                          1285
         BNL   @RF01285                                            1285
*        DO;                                  /*THAN ENTRY DATE     */
*              CALL FIXENTRY;               /*DELETE OLD FRAME SET*/
         BAL   @14,FIXENTRY                                        1287
*              FRAMEDT(X) = LRTDT;           /*SAVE HIGH DATE*/    1288
         L     @08,X                                               1288
         MH    @08,@CH00227                                        1288
         L     @06,FRAMEPTR(,R2)                                   1288
         ALR   @06,@08                                             1288
         AL    @06,@CF01581                                        1288
         MVC   FRAMEDT-9(8,@06),LRTDT(R7)                          1288
*              CALL BUILDTTR;                /*SAVE FRAME LOCATION*/
         BAL   @14,BUILDTTR                                        1289
*               FRAMEYES = YES;/*SAVE SUCCEEDING FRAMES OF THIS    */
         OI    FRAMEYES,B'00000010'                                1290
*                              /*LOGICAL SET                 @G51DGBB*/
*         END;                                             /*@G51DGBB*/
*       ELSE  /*IMPLIES DATE IS LOW OR EQUAL                 @G51DGBB*/
*        DO;                                               /*@G51DGBB*/
         B     @RC01285                                            1292
@RF01285 DS    0H                                                  1293
*         IF FRAMEDT(X) = LRTDT THEN /*IF TABLE DATE EQUALS RECORD DAT*
         L     @08,X                                               1293
         MH    @08,@CH00227                                        1293
         L     @06,FRAMEPTR(,R2)                                   1293
         ST    @08,@TF00001                                        1293
         ALR   @08,@06                                             1293
         AL    @08,@CF01581                                        1293
         CLC   FRAMEDT-9(8,@08),LRTDT(R7)                          1293
         BNE   @RF01293                                            1293
*           DO;                                            /*@G51DGBB*/
*            IF FRAMETYP(X) ^= ALLALL THEN                         1295
         AL    @06,@TF00001                                        1295
         AL    @06,@CF01576                                        1295
         CLI   FRAMETYP-17(@06),X'FF'                              1295
         BE    @RF01295                                            1295
*             DO;                                          /*@G51DGBB*/
*                      CALL FIXENTRY; /*DELETE INCOMPLETE SET       */
         BAL   @14,FIXENTRY                                        1297
*                      MSGNO = 79; /*ISSUE FRAME SET INCOMPLETE MESS*/
         MVI   MSGNO,X'4F'                                         1298
*                      CALL ERRMSG;                        /*@G51DGBB*/
         BAL   @14,ERRMSG                                          1299
*                      CALL BUILDTTR; /*SAVE THIS FRAME      @G51DGBB*/
         BAL   @14,BUILDTTR                                        1300
*                      FRAMEYES = YES; /*SAVE SUCCEEDING MEMBERS */
         OI    FRAMEYES,B'00000010'                                1301
*             END;                                         /*@G51DGBB*/
*            ELSE  /*COMPLETE SET FOR THIS DATE ALREADY EXISTS      */
*               DO; /*FRAMETYP IS EQUAL TO ALLALL            @G51DGBB*/
         B     @RC01295                                            1303
@RF01295 DS    0H                                                  1304
*                   FRAMEYES = NO;/*DELETE SUCCEEDING FRAMES OF SET */
         NI    FRAMEYES,B'11111101'                                1304
*                   BUG(30) = BUG(30) + 1; /*COUNT FRAME AS NOT USED*/
         LA    @08,1                                               1305
         AL    @08,BUG+116                                         1305
         ST    @08,BUG+116                                         1305
*               END;                                       /*@G51DGBB*/
*        END; /*END OF CODE IF DATE IN RECORD EQUALS DATE IN TABLE*/
*       ELSE /*DATE IN TABLE GREATER THAN FRAME RECORD DATE  @G51DGBB*/
*        BUG(30) = BUG(30)  + 1;                           /*@G51DGBB*/
         B     @RC01293                                            1308
@RF01293 LA    @08,1                                               1308
         AL    @08,BUG+116                                         1308
         ST    @08,BUG+116                                         1308
*    END; /*END OF CODE IF DATE IN RECORD IS LOW OR EQUAL    @G51DGBB*/
@RC01293 DS    0H                                                  1310
*  GETOUT = YES; /*GET OUT OF LOOP AFTER CPU MATCH           @G51DGBB*/
@RC01285 OI    GETOUT,B'00001000'                                  1310
* END; /*END OF CODE FOR A RECORD TO ENTRY CPU MATCH         @G51DGBB*/
*END; /*END OF FRAMETAB LOOP                                 @G51DGBB*/
@RF01282 LA    @08,1                                               1312
         AL    @08,X                                               1312
         ST    @08,X                                               1312
@DE01281 L     @06,FRAMEPTR(,R2)                                   1312
         C     @08,FRAMENUM(,@06)                                  1312
         BNH   @DL01281                                            1312
@DC01281 DS    0H                                                  1313
*IF GETOUT = NO THEN /*MERIDIAN FRAME BUT NO ROOM IN TABLE   @G51DGBB*/
         TM    GETOUT,B'00001000'                                  1313
         BNZ   @RF01313                                            1313
*  BUG(30) = BUG(30) + 1;                                  /*@G51DGBB*/
         LA    @08,1                                               1314
         AL    @08,BUG+116                                         1314
         ST    @08,BUG+116                                         1314
*END; /*END OF PROC FRAMEREP                                 @G51DGBB*/
@EL00031 DS    0H                                                  1315
@EF00031 DS    0H                                                  1315
@ER00031 LM    @14,@12,@SA00031                                    1315
         BR    @14                                                 1315
*BUILDTTR: PROC; /*SAVE LOCATION OF A FRAME IN LISTLOC       @G51DGBB*/
BUILDTTR STM   @14,@12,@SA00032                                    1316
*RESPECIFY (R0,R1,R4,R15) RESTRICTED;                      /*@G51DGBB*/
*IF (LRTKEY1 & GENREC) = HEXA0 THEN /* IF MCH FRAME          @G51DGBB*/
         MVC   @TS00001(1),LRTKEY1(R7)                             1318
         NI    @TS00001,X'F0'                                      1318
         CLI   @TS00001,X'A0'                                      1318
         BNE   @RF01318                                            1318
*  DO;                                                     /*@G51DGBB*/
*    IF FRAMLOCM(CCHINDX) = ZERO THEN /*IF LISTLOC CORE FOR A CPU*/
         L     @14,CCHINDX                                         1320
         MH    @14,@CH00227                                        1320
         L     @08,FRAMEPTR(,R2)                                   1320
         AL    @08,@CF01577                                        1320
         L     @14,FRAMLOCM-20(@14,@08)                            1320
         LTR   @14,@14                                             1320
         BNZ   @RF01320                                            1320
*      DO;                            /*IS UNALLOCATED       @G51DGBB*/
*        R0 = LISTBENT * LISTMAX * 2; /*ALLOCATE CORE FOR BOTH CCH*/
         LA    R0,500                                              1322
*        R0 = R0 + 12;                /*AND MCH FRAME LOCATIONS   */
         AL    R0,@CF00032                                         1323
*        GEN(GETMAIN EC,LV=(0),A=TMPSTORE,SP=21); /*GET STORAGE*/  1324
         GETMAIN EC,LV=(0),A=TMPSTORE,SP=21
*        IF R15 = SUCCESS THEN                                     1325
         LTR   R15,R15                                             1325
         BNZ   @RF01325                                            1325
*          DO;                                             /*@G51DGBB*/
*            R1 = TMPSTORE;           /*SET STORAGE ADDRESS IN REG 1*/
         L     R1,TMPSTORE                                         1327
*            FRAMLOCM(CCHINDX) = R1;  /*SET POINTERS TO LISTLOC   */
         L     @14,CCHINDX                                         1328
         MH    @14,@CH00227                                        1328
         L     @08,FRAMEPTR(,R2)                                   1328
         AL    @08,@CF01577                                        1328
         ST    R1,FRAMLOCM-20(@14,@08)                             1328
*            R1 = R1+LISTBENT *       /*TABLES FOR BOTH CCL AND MCH*/
*                LISTMAX+4;           /*FRAMES               @G51DGBB*/
         AL    R1,@CF01552                                         1329
*            R0 = ZERO;          /*ENSURE THAT TABLE ON WORD BOUNDARY*/
         SLR   R0,R0                                               1330
*            R4 = 4;             /*DIVIDE BY NUMBER OF BYTES IN WORD*/
         LA    R4,4                                                1331
*            GEN(DR R0,R4);                                /*@G51DGBB*/
         DR R0,R4
*            IF R0 > ZERO THEN /*REMAINDER MEANS NOT INTEGRAL NUMBER*/
         LTR   R0,R0                                               1333
         BNP   @RF01333                                            1333
*                              /*NUMBER OF DOUBLEWORDS.      @G51DGBB*/
*              R1 = R1 + 1; /*ADD ONE EXTRA FULL WORD        @G51DGBB*/
         AL    R1,@CF00055                                         1334
*            R1 = R1 * FOUR; /*RESET ONE TO NUMBER OF BYTES  @G51DGBB*/
@RF01333 SLL   R1,2                                                1335
*            FRAMLOCC(CCHINDX) = R1; /*SET POINTER TO CCH CCHHR TABLE*/
         L     @14,CCHINDX                                         1336
         MH    @14,@CH00227                                        1336
         L     @08,FRAMEPTR(,R2)                                   1336
         ST    R1,FRAMLOCC-24(@14,@08)                             1336
*            LISTPTR = R1;      /*ESTABLISH ADDRESSABILITY FOR CCH TB*/
         ST    R1,LISTPTR                                          1337
*            LISTNUM = ZERO;    /*ZERO CCH LISTLOC TABLE     @G51DGBB*/
         L     @14,LISTPTR                                         1338
         SLR   @08,@08                                             1338
         ST    @08,LISTNUM(,@14)                                   1338
*            DO Y = 1 BY 1 TO LISTMAX;                     /*@G51DGBB*/
         LA    @14,1                                               1339
         ST    @14,Y                                               1339
@DL01339 DS    0H                                                  1340
*              LISTCCHR(Y) = LISTCCHR(Y) &&                        1340
*                            LISTCCHR(Y);                  /*@G51DGBB*/
         LR    @08,@14                                             1340
         MH    @08,@CH00079                                        1340
         L     @06,LISTPTR                                         1340
         ALR   @06,@08                                             1340
         BCTR  @06,0                                               1340
         XC    LISTCCHR-4(5,@06),LISTCCHR-4(@06)                   1340
*            END;                                          /*@G51DGBB*/
         AL    @14,@CF00055                                        1341
         ST    @14,Y                                               1341
         C     @14,@CF00295                                        1341
         BNH   @DL01339                                            1341
*            LISTPTR = FRAMLOCM(CCHINDX); /*ADDRESS OF MCH LISTLOC */
         L     @14,CCHINDX                                         1342
         MH    @14,@CH00227                                        1342
         L     @08,FRAMEPTR(,R2)                                   1342
         AL    @08,@CF01577                                        1342
         L     @14,FRAMLOCM-20(@14,@08)                            1342
         ST    @14,LISTPTR                                         1342
*            DO Y = 1 BY 1 TO LISTMAX;   /* ZERO MCH LISTLOC TABLE  */
         LA    @14,1                                               1343
         ST    @14,Y                                               1343
@DL01343 DS    0H                                                  1344
*            LISTCCHR(Y) = LISTCCHR(Y) &&                          1344
*                          LISTCCHR(Y);                    /*@G51DGBB*/
         LR    @08,@14                                             1344
         MH    @08,@CH00079                                        1344
         L     @06,LISTPTR                                         1344
         ALR   @06,@08                                             1344
         BCTR  @06,0                                               1344
         XC    LISTCCHR-4(5,@06),LISTCCHR-4(@06)                   1344
*            END;                                          /*@G51DGBB*/
         AL    @14,@CF00055                                        1345
         ST    @14,Y                                               1345
         C     @14,@CF00295                                        1345
         BNH   @DL01343                                            1345
*            LISTNUM = ZERO;                               /*@G51DGBB*/
         L     @14,LISTPTR                                         1346
         SLR   @08,@08                                             1346
         ST    @08,LISTNUM(,@14)                                   1346
*          END;                                            /*@G51DGBB*/
*        ELSE /*UNSUCCESSFUL GETMAIN                         @G51DGBB*/
*          DO;                                             /*@G51DGBB*/
         B     @RC01325                                            1348
@RF01325 DS    0H                                                  1349
*            MSGNO = 40;                                   /*@G51DGBB*/
         MVI   MSGNO,X'28'                                         1349
*            CALL ERRMSG;                                  /*@G51DGBB*/
         BAL   @14,ERRMSG                                          1350
*            R15 = TWELVE;                                 /*@G51DGBB*/
         LA    @08,12                                              1351
         LR    R15,@08                                             1351
*            ERROR = TWELVE;                               /*@G51DGBB*/
         ST    @08,ERROR                                           1352
*          END;                                            /*@G51DGBB*/
*      END;                                                /*@G51DGBB*/
@RC01325 DS    0H                                                  1355
*    IF R15 = ZERO THEN /*IF GETMAIN WAS SUCCESSFUL OR NO GETMAIN*/
@RF01320 LTR   R15,R15                                             1355
         BNZ   @RF01355                                            1355
*      LISTPTR = FRAMLOCM(CCHINDX);/*ESTABLISH LISTLOC ADDRESS   */
         L     @14,CCHINDX                                         1356
         MH    @14,@CH00227                                        1356
         L     @08,FRAMEPTR(,R2)                                   1356
         AL    @08,@CF01577                                        1356
         L     @14,FRAMLOCM-20(@14,@08)                            1356
         ST    @14,LISTPTR                                         1356
*  END;                                                    /*@G51DGBB*/
*ELSE /* IS A CCH FRAME                                      @G51DGBB*/
*    LISTPTR = FRAMLOCC(CCHINDX);  /*ESTABLISH CCH LISTLOC ADDRESS*/
         B     @RC01318                                            1358
@RF01318 L     @14,CCHINDX                                         1358
         MH    @14,@CH00227                                        1358
         L     @08,FRAMEPTR(,R2)                                   1358
         L     @14,FRAMLOCC-24(@14,@08)                            1358
         ST    @14,LISTPTR                                         1358
*IF ERROR = ZERO THEN                                              1359
@RC01318 L     @14,ERROR                                           1359
         LTR   @14,@14                                             1359
         BNZ   @RF01359                                            1359
*  DO;                                                     /*@G51DGBB*/
*    IF LISTNUM + 1 <= LISTMAX THEN /*IF ROOM IN LISTLOC     @G51DGBB*/
         LA    @14,1                                               1361
         L     @08,LISTPTR                                         1361
         AL    @14,LISTNUM(,@08)                                   1361
         C     @14,@CF00295                                        1361
         BH    @RF01361                                            1361
*      DO;                                                 /*@G51DGBB*/
*        RESPECIFY (R1) UNRESTRICTED;                      /*@G51DGBB*/
*        IF PHIST = ON THEN        /*IF HISTORY INPUT        @G51DGBB*/
         TM    PHIST(R2),B'00100000'                               1364
         BNO   @RF01364                                            1364
*          CALL IOHND(RITESCRT);   /*WRITE TO SCRATCH DATA SET*/   1365
         L     @15,ADIOHND(,R2)                                    1365
         LA    @01,@AL01365                                        1365
         BALR  @14,@15                                             1365
*        IF R15 = SUCCESS THEN     /*IF SUCCESSFULL WRITE    @G51DGBB*/
@RF01364 LTR   R15,R15                                             1366
         BNZ   @RF01366                                            1366
*          DO;                                             /*@G51DGBB*/
*            LISTCCHR(LISTNUM+1) = RECCCHHR;/*SAVE FRAME EXTERNAL LOC*/
         L     @14,LISTPTR                                         1368
         L     @08,LISTNUM(,@14)                                   1368
         LR    @06,@08                                             1368
         MH    @06,@CH00079                                        1368
         ALR   @06,@14                                             1368
         MVC   LISTCCHR(5,@06),RECCCHHR(R2)                        1368
*            LISTNUM = LISTNUM + 1; /*INCREMENT NO OF BUILT ENTRIES*/
         LA    @06,1                                               1369
         ALR   @08,@06                                             1369
         ST    @08,LISTNUM(,@14)                                   1369
*            BUG(29) = BUG(29) + 1; /*COUNT NUMBER OF USED FRAMES*/
         AL    @06,BUG+112                                         1370
         ST    @06,BUG+112                                         1370
*          END;                                            /*@G51DGBB*/
*        ELSE  /*UNSUCCESSFUL WRITE TO SCRATCH D.S.          @G51DGBB*/
*          R15 = TWELVE; /*TERMINATE FURTHER PROCESSING      @G51DGBB*/
         B     @RC01366                                            1372
@RF01366 LA    R15,12                                              1372
*      END;                                                /*@G51DGBB*/
@RC01366 DS    0H                                                  1374
*  END;                                                    /*@G51DGBB*/
@RF01361 DS    0H                                                  1375
*ERROR = R15;                                              /*@G51DGBB*/
@RF01359 ST    R15,ERROR                                           1375
*RESPECIFY (R0,R4,R15) UNRESTRICTED;                       /*@G51DGBB*/
*END; /*END OF BUILDTTR PROC                                 @G51DGBB*/
@EL00032 DS    0H                                                  1377
@EF00032 DS    0H                                                  1377
@ER00032 LM    @14,@12,@SA00032                                    1377
         BR    @14                                                 1377
*FIXENTRY: PROC;  /*RESET LISTLOC TABLE TO ZEROS BUT DONT FREE CORE*/
FIXENTRY STM   @14,@12,12(@13)                                     1378
*                 /*RESET DATE,TYPE TO ZEROS                 @G51DGBB*/
*FRAMEDT(CCHINDX) = '0000000000000000'X; /*ZERO DATE,TIME    @G51DGBB*/
         L     @08,CCHINDX                                         1379
         MH    @08,@CH00227                                        1379
         L     @06,FRAMEPTR(,R2)                                   1379
         ST    @08,@TF00001                                        1379
         ALR   @08,@06                                             1379
         AL    @08,@CF01581                                        1379
         MVC   FRAMEDT-9(8,@08),@CB01527                           1379
*FRAMETYP(CCHINDX) = '00'X; /*RESET TO NO TYPES OF FRAMES STORED*/ 1380
         LR    @08,@06                                             1380
         AL    @08,@TF00001                                        1380
         AL    @08,@CF01576                                        1380
         MVI   FRAMETYP-17(@08),X'00'                              1380
*IF FRAMLOCM(CCHINDX) > ZERO THEN /*IF MCH FRAME LOC. TAB. ALLOCATED*/
         L     @08,@TF00001                                        1381
         AL    @06,@CF01577                                        1381
         L     @08,FRAMLOCM-20(@08,@06)                            1381
         LTR   @08,@08                                             1381
         BNP   @RF01381                                            1381
*  DO;                                                     /*@G51DGBB*/
*    LISTPTR = FRAMLOCM(CCHINDX); /*SET TABLE BASE ADDRESS   @G51DGBB*/
         ST    @08,LISTPTR                                         1383
*    DO Y = 1 BY 1 TO LISTNUM; /*CLEAR ALL STORED CCHHRS TO ZERO*/ 1384
         LA    @08,1                                               1384
         ST    @08,Y                                               1384
         B     @DE01384                                            1384
@DL01384 DS    0H                                                  1385
*      LISTCCHR(Y) = (LISTCCHR(Y) && LISTCCHR(Y));         /*@G51DGBB*/
         LR    @06,@08                                             1385
         MH    @06,@CH00079                                        1385
         L     @01,LISTPTR                                         1385
         ALR   @01,@06                                             1385
         BCTR  @01,0                                               1385
         XC    LISTCCHR-4(5,@01),LISTCCHR-4(@01)                   1385
*      BUG(30) = BUG(30) + 1; /*ADD TO COUNT OF REJECTED FRAMES*/  1386
         LA    @06,1                                               1386
         AL    @06,BUG+116                                         1386
         ST    @06,BUG+116                                         1386
*      BUG(29) = BUG(29) - 1; /*SUBTRACT FROM COUNT OF ACCEPTED FRMES*/
         L     @06,BUG+112                                         1387
         BCTR  @06,0                                               1387
         ST    @06,BUG+112                                         1387
*    END;                                                  /*@G51DGBB*/
         AL    @08,@CF00055                                        1388
         ST    @08,Y                                               1388
@DE01384 L     @06,LISTPTR                                         1388
         C     @08,LISTNUM(,@06)                                   1388
         BNH   @DL01384                                            1388
*    LISTNUM = ZERO; /*SET NUMBER OF STORED CCHHRS TO ZERO   @G51DGBB*/
         L     @08,LISTPTR                                         1389
         SLR   @06,@06                                             1389
         ST    @06,LISTNUM(,@08)                                   1389
*  END;                                                    /*@G51DGBB*/
*IF FRAMLOCC(CCHINDX) > ZERO THEN /*IF CCH FRAM LOC TABLE ALLOCATED*/
@RF01381 L     @08,CCHINDX                                         1391
         MH    @08,@CH00227                                        1391
         L     @06,FRAMEPTR(,R2)                                   1391
         L     @08,FRAMLOCC-24(@08,@06)                            1391
         LTR   @08,@08                                             1391
         BNP   @RF01391                                            1391
*  DO;                                                     /*@G51DGBB*/
*    LISTPTR = FRAMLOCC(CCHINDX); /*SET BASE ADDRESS OF LISTLOC*/  1393
         ST    @08,LISTPTR                                         1393
*    DO Y = 1 BY 1 TO LISTNUM; /*ZERO ALL SAVED CCHHRS       @G51DGBB*/
         LA    @08,1                                               1394
         ST    @08,Y                                               1394
         B     @DE01394                                            1394
@DL01394 DS    0H                                                  1395
*      LISTCCHR(Y) = (LISTCCHR(Y) && LISTCCHR(Y));         /*@G51DGBB*/
         LR    @06,@08                                             1395
         MH    @06,@CH00079                                        1395
         L     @01,LISTPTR                                         1395
         ALR   @01,@06                                             1395
         BCTR  @01,0                                               1395
         XC    LISTCCHR-4(5,@01),LISTCCHR-4(@01)                   1395
*      BUG(30) = BUG(30) + 1; /*ADD TO COUNT OF REJECTED FRAMES*/  1396
         LA    @06,1                                               1396
         AL    @06,BUG+116                                         1396
         ST    @06,BUG+116                                         1396
*      BUG(29) = BUG(29) - 1; /*SUBTRACT FROM COUNT OF ACCEPTED FRAMES*
         L     @06,BUG+112                                         1397
         BCTR  @06,0                                               1397
         ST    @06,BUG+112                                         1397
*    END;                                                  /*@G51DGBB*/
         AL    @08,@CF00055                                        1398
         ST    @08,Y                                               1398
@DE01394 L     @06,LISTPTR                                         1398
         C     @08,LISTNUM(,@06)                                   1398
         BNH   @DL01394                                            1398
*    LISTNUM = ZERO; /*SET NUMBER OF  CCHHRS SAVED TO ZERO   @G51DGBB*/
         L     @08,LISTPTR                                         1399
         SLR   @06,@06                                             1399
         ST    @06,LISTNUM(,@08)                                   1399
*  END;                                                    /*@G51DGBB*/
*END;                                                      /*@G51DGBB*/
@EL00033 DS    0H                                                  1401
@EF00033 DS    0H                                                  1401
@ER00033 LM    @14,@12,12(@13)                                     1401
         BR    @14                                                 1401
*FLIMFRAM: PROC; /*PROCESS FRAME RECORDS SEQUENTIALLY        @G51DGBB*/
FLIMFRAM STM   @14,@12,@SA00034                                    1402
*RESPECIFY (R15) RESTRICTED;                               /*@G51DGBB*/
*   IF PACC = ON &                 /* IF NO ACCUMULATION OR NO  */ 1404
*     (PMCH = ON × PCHAN = ON) THEN /* MCH OR CCH SELECTION THEN */
         TM    PACC(R2),B'01000000'                                1404
         BNO   @RF01404                                            1404
         TM    PMCH(R2),B'11000000'                                1404
         BZ    @RF01404                                            1404
*    DO;                            /* DONT SELECT FRAMES    @G51DGBB*/
*      IF LRTCNT = ONE &            /* IF FIRST PHYSICAL FRAME   */
*         (LRTKEY1 & GENREC) = HEXA0 THEN /*IS MCH FRAME WHICH MUST*/
         CLI   LRTCNT(R7),1                                        1406
         BNE   @RF01406                                            1406
         MVC   @TS00001(1),LRTKEY1(R7)                             1406
         NI    @TS00001,X'F0'                                      1406
         CLI   @TS00001,X'A0'                                      1406
         BNE   @RF01406                                            1406
*        DO;                         /*BE INPUT BEFORE CCH FRAMES*/
*          SAVESEQ = ONE;           /* RESET SEQUENCE CHECK  @G51DGBB*/
         MVI   SAVESEQ,X'01'                                       1408
*          CALL FRAMEREP;           /* SEE IF THIS FRAME SET MUST*/
         BAL   @14,FRAMEREP                                        1409
*          R15 = ERROR;             /* BE SAVED              @G51DGBB*/
         L     R15,ERROR                                           1410
*          IF LRTNLAST = OFF &      /*IF ONLY ONE MCH FRAME  @G51DGBB*/
*             FRAMEYES = ON  &      /*FRAME SET TO BE SAVED  @G51DGBB*/
*             R15 = ZERO THEN       /*NO ERROR CONDITIONS    @G51DGBB*/
         TM    LRTNLAST(R7),B'10000000'                            1411
         BNZ   @RF01411                                            1411
         TM    FRAMEYES,B'00000010'                                1411
         BNO   @RF01411                                            1411
         LTR   R15,R15                                             1411
         BNZ   @RF01411                                            1411
*            DO;                                           /*@G51DGBB*/
*              FRAMETYP(CCHINDX) = ALLMCH; /*ALL MCH FRAMES ARE IN*/
         L     @14,CCHINDX                                         1413
         MH    @14,@CH00227                                        1413
         L     @08,FRAMEPTR(,R2)                                   1413
         ALR   @08,@14                                             1413
         AL    @08,@CF01576                                        1413
         MVI   FRAMETYP-17(@08),X'02'                              1413
*              SAVESEQ = ZERO;      /*REINITIALIZE FOR CCH S @G51DGBB*/
         MVI   SAVESEQ,X'00'                                       1414
*            END;                                          /*@G51DGBB*/
*        END;                                              /*@G51DGBB*/
*      ELSE                         /* NON-FIRST FRAME       @G51DGBB*/
*        DO;                                               /*@G51DGBB*/
         B     @RC01406                                            1417
@RF01406 DS    0H                                                  1418
*          IF FRAMEYES = ON THEN    /* IF FRAME IS TO BE SAVED  */ 1418
         TM    FRAMEYES,B'00000010'                                1418
         BNO   @RF01418                                            1418
*            DO;                                           /*@G51DGBB*/
*              SAVESEQ = SAVESEQ + 1;  /* UP SEQ CHECK       @G51DGBB*/
         IC    @14,SAVESEQ                                         1420
         LA    @14,1(,@14)                                         1420
         STC   @14,SAVESEQ                                         1420
*              IF SAVESEQ = LRTCNT THEN /* IF RECORD NOT MISSING */
         CLC   SAVESEQ(1),LRTCNT(R7)                               1421
         BNE   @RF01421                                            1421
*                DO;                                       /*@G51DGBB*/
*                  CALL BUILDTTR;    /* BUILD EXTERNAL LOCATION */ 1423
         BAL   @14,BUILDTTR                                        1423
*                  R15 = ERROR;                            /*@G51DGBB*/
         L     R15,ERROR                                           1424
*                  IF R15 = ZERO THEN  /* IF FRAME EXTERNAL LOC  */
         LTR   R15,R15                                             1425
         BNZ   @RF01425                                            1425
*                    DO;               /* SUCCESSFULLY SAVED @G51DGBB*/
*                      IF LRTNLAST = OFF THEN /* IF LAST FRAME  */ 1427
         TM    LRTNLAST(R7),B'10000000'                            1427
         BNZ   @RF01427                                            1427
*                        DO;                               /*@G51DGBB*/
*                          IF (LRTKEY1 & GENREC) = HEXA0 THEN      1429
         MVC   @TS00001(1),LRTKEY1(R7)                             1429
         NI    @TS00001,X'F0'                                      1429
         CLI   @TS00001,X'A0'                                      1429
         BNE   @RF01429                                            1429
*                           DO;                            /*@G51DGBB*/
*                            SAVESEQ = ZERO;               /*@G51DGBB*/
         MVI   SAVESEQ,X'00'                                       1431
*                            FRAMETYP(CCHINDX) = ALLMCH;   /*@G51DGBB*/
         L     @14,CCHINDX                                         1432
         MH    @14,@CH00227                                        1432
         L     @08,FRAMEPTR(,R2)                                   1432
         ALR   @08,@14                                             1432
         AL    @08,@CF01576                                        1432
         MVI   FRAMETYP-17(@08),X'02'                              1432
*                           END;                           /*@G51DGBB*/
*                          /*IF ALL MCH FRAMES HAVE BEEN SAVED,  */
*                          /*THEN INDICATE SUCH              @G51DGBB*/
*                           ELSE                  /*IS CCH FRAME */
*                            DO;                           /*@G51DGBB*/
         B     @RC01429                                            1434
@RF01429 DS    0H                                                  1435
*                            FRAMEYES = OFF;               /*@G51DGBB*/
         NI    FRAMEYES,B'11111101'                                1435
*                            IF FRAMETYP(CCHINDX) ^= ALLMCH THEN   1436
         L     @14,CCHINDX                                         1436
         MH    @14,@CH00227                                        1436
         L     @08,FRAMEPTR(,R2)                                   1436
         ALR   @08,@14                                             1436
         AL    @08,@CF01576                                        1436
         CLI   FRAMETYP-17(@08),X'02'                              1436
         BE    @RF01436                                            1436
*                              DO; /*IF MISSING LAST MCH FRAME   */
*                                MSGNO = 79; /*FRAME SET INCOMPLET MSG*
         MVI   MSGNO,X'4F'                                         1438
*                                CALL ERRMSG;              /*@G51DGBB*/
         BAL   @14,ERRMSG                                          1439
*                                CALL FIXENTRY; /*DELETE INCOM-  */
         BAL   @14,FIXENTRY                                        1440
*                              END;             /*PLETE SET. @G51DGBB*/
*                            ELSE   /*IS COMPLETE SET -INDICATE  */
*                              FRAMETYP(CCHINDX) = ALLALL; /*IT IS*/
         B     @RC01436                                            1442
@RF01436 L     @14,CCHINDX                                         1442
         MH    @14,@CH00227                                        1442
         L     @08,FRAMEPTR(,R2)                                   1442
         ALR   @08,@14                                             1442
         AL    @08,@CF01576                                        1442
         MVI   FRAMETYP-17(@08),X'FF'                              1442
*                            END;                          /*@G51DGBB*/
*                        END;                              /*@G51DGBB*/
*                   END;                                   /*@G51DGBB*/
*              END;                                        /*@G51DGBB*/
*            ELSE   /*MISSING MIDDLE FRAME                   @G51DGBB*/
*              DO;                                         /*@G51DGBB*/
         B     @RC01421                                            1447
@RF01421 DS    0H                                                  1448
*                MSGNO = 79; /*FRAME SET INCOMPLETE          @G51DGBB*/
         MVI   MSGNO,X'4F'                                         1448
*                CALL ERRMSG;                              /*@G51DGBB*/
         BAL   @14,ERRMSG                                          1449
*                FRAMEYES = OFF; /*DONT SAVE INCOMPLETE SET  @G51DGBB*/
         NI    FRAMEYES,B'11111101'                                1450
*                CALL FIXENTRY; /*DELETE REFS TO INCOMPLETE SET*/  1451
         BAL   @14,FIXENTRY                                        1451
*                BUG(30) = BUG(30) + 1;                    /*@G51DGBB*/
         LA    @14,1                                               1452
         AL    @14,BUG+116                                         1452
         ST    @14,BUG+116                                         1452
*              END;                                        /*@G51DGBB*/
*       END;                                               /*@G51DGBB*/
*          ELSE      /*FRAME NOT TO BE SAVED                 @G51DGBB*/
*            BUG(30) = BUG(30) + 1;                        /*@G51DGBB*/
         B     @RC01418                                            1455
@RF01418 LA    @14,1                                               1455
         AL    @14,BUG+116                                         1455
         ST    @14,BUG+116                                         1455
*      END;                                                /*@G51DGBB*/
*   END;                                                   /*@G51DGBB*/
*  ELSE   /*NOT ACCUMULATING OR SELECTING MCH OR CCH RECORDS @G51DGBB*/
*    BUG(30) = BUG(30) + 1; /*COUNT FRAMES REJECTED          @G51DGBB*/
         B     @RC01404                                            1458
@RF01404 LA    @14,1                                               1458
         AL    @14,BUG+116                                         1458
         ST    @14,BUG+116                                         1458
*RESPECIFY (R15) UNRESTRICTED;                             /*@G51DGBB*/
*END;  /*END OF PROC FLIMFRAM                                @G51DGBB*/
@EL00034 DS    0H                                                  1460
@EF00034 DS    0H                                                  1460
@ER00034 LM    @14,@12,@SA00034                                    1460
         BR    @14                                                 1460
*END  /*CLOSING END TO IFCFILT2 EXTERNAL PROC                @Z427VLS*/
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (COMTABLE)                                        *
*;                                                                 1461
@DATA    DS    0H
@CH00079 DC    H'5'
@CH00081 DC    H'6'
@CH00083 DC    H'7'
@CH01548 DC    H'63'
         DS    0F
@AL00213 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00396 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL01039 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL01052 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL01232 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL01237 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL01252 DC    A(@CF00074+2)           LIST WITH   1 ARGUMENT(S)
@AL00220 DC    A(@CF00076+2)           LIST WITH   1 ARGUMENT(S)
@AL00239 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL01000 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL01009 DC    A(@CF00064+2)           LIST WITH   1 ARGUMENT(S)
@AL00678 DC    A(@CF00981)             LIST WITH   3 ARGUMENT(S)
@AL00962 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00974 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL00990 DC    A(@CH00083)             LIST WITH   1 ARGUMENT(S)
         DC    A(LINKDEV)
@AL00801 DC    A(@CF00076)             LIST WITH   3 ARGUMENT(S)
         DC    A(WORKDEV)
         DC    A(LINKDEV)
@AL00998 EQU   *                       LIST WITH   1 ARGUMENT(S)
@AL01007 DC    A(@CH00081)             LIST WITH   1 ARGUMENT(S)
@AL01037 DC    A(@CF01484)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS)
@AL01050 DC    A(@CF01485)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS)
@AL01186 DC    A(@CF01503)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS+4)
@AL01189 DC    A(@CF01504)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS+4)
@AL01192 DC    A(@CF01505)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS+4)
@AL01199 DC    A(@CF01506)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS+4)
@AL01202 DC    A(@CF01479)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS+4)
@AL01229 DC    A(@CF01236)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS+4)
@AL01231 DC    A(@CF00227)             LIST WITH   2 ARGUMENT(S)
         DC    A(@AFTEMPS+4)
@AL01365 DC    A(@CH00079)             LIST WITH   1 ARGUMENT(S)
         DS    0F
@SA00001 DS    18F
@SA00002 DS    15F
@SA00034 DS    15F
@SA00024 DS    15F
@SA00011 DS    15F
@SA00004 DS    15F
@SA00023 DS    15F
@SA00029 DS    15F
@SA00028 DS    15F
@SA00007 DS    15F
@SA00008 DS    15F
@SA00012 DS    15F
@SA00026 DS    15F
@SA00030 DS    15F
@SA00014 DS    15F
@SA00013 DS    15F
@SA00020 DS    15F
@SA00021 DS    15F
@SA00015 DS    15F
@SA00025 DS    15F
@SA00031 DS    15F
@SA00032 DS    15F
@AL00001 DS    3A
@TF00001 DS    F
@TF00002 DS    F
@AFTEMPS DS    2F
         DS    0F
@CF00055 DC    F'1'
@CF00074 DC    F'2'
@CH00074 EQU   @CF00074+2
@CF00076 DC    F'3'
@CH00076 EQU   @CF00076+2
@CF00064 DC    F'4'
@CH00064 EQU   @CF00064+2
@CF00066 DC    F'8'
@CF00034 DC    F'10'
@CF00032 DC    F'12'
@CF00981 DC    F'13'
@CF01057 DC    F'14'
@CH01057 EQU   @CF01057+2
@CF00088 DC    F'16'
@CF00786 DC    F'17'
@CF01185 DC    F'18'
@CF00227 DC    F'24'
@CH00227 EQU   @CF00227+2
@CF01125 DC    F'27'
@CF00892 DC    F'32'
@CF01236 DC    F'40'
@CF00295 DC    F'50'
@CF01504 DC    F'53'
@CF01503 DC    F'55'
@CF01506 DC    F'72'
@CF01505 DC    F'74'
@CF01484 DC    F'75'
@CF01485 DC    F'76'
@CF01479 DC    F'78'
@CF01552 DC    F'254'
@CF01562 DC    F'-20'
@CF01579 DC    F'-17'
@CF01581 DC    F'-15'
@CF01392 DC    F'-14'
@CF01572 DC    F'-13'
@CF01578 DC    F'-11'
@CF01571 DC    F'-10'
@CF01575 DC    F'-8'
@CF01576 DC    F'-7'
@CF01560 DC    F'-6'
@CF01577 DC    F'-4'
@CF01570 DC    F'-3'
@CF00893 DC    XL4'FFFFFFF8'
@CF01568 DC    XL4'0000FFFF'
@CV01431 DC    V(IFCDEVIC)
         DS    0D
ENTRIES  DC    F'1'
ADDNXT   DC    F'0'
NEXTBY   DC    F'0'
LISTPTR  DC    A(0)
T        DC    F'0'
P        DC    F'0'
Q        DC    F'0'
NUMBER   DS    F
ZZ       DC    A(0)
Z1       DC    F'0'
Z2       DC    F'0'
Z3       DC    F'0'
ZZ3      DC    F'0'
         DS    0D
@TS00001 DS    CL16
@CB01527 DC    X'0000000000000000'
@CB00290 EQU   @CB01527
@CB01482 DC    X'0000000F'
@CB00228 DC    X'00000F'
@CB00237 DC    X'FFFFFF'
@CB00953 DC    X'000FFF'
@CB01361 DC    X'99366F'
@CB00261 EQU   @CB00237
@CB00898 DC    X'2006'
@CB00900 DC    X'2007'
@CB00902 DC    X'2009'
@CB00904 DC    X'200A'
@CB00906 DC    X'200B'
@CB00908 DC    X'200D'
@CB00910 DC    X'8004'
@CB00912 DC    X'8005'
@CB00914 DC    X'8003'
@CB00916 DC    X'100C'
@CB00918 DC    X'1008'
@CB00920 DC    X'0842'
@CB00949 DC    X'FF00'
@CB00951 DC    X'0FFF'
@CB01434 DC    X'8809'
@CB01439 DC    X'3705'
LETTERS  DC    CL1'S'
LETTERC  DC    CL1'C'
LOWDIGIT DS    BL1
HIGDIGIT DS    BL1
RECCPU   DS    CL3
LOWCUA   DS    CL2
HIGHCUA  DS    CL2
         DS    CL1
FILT1ITM DS    CL131
         ORG   FILT1ITM
MAXENT   DC    F'0'
FREEADR  DC    A(0)
I        DC    A(1)
J        DC    A(0)
K        DC    A(0)
L        DC    A(0)
A        DC    A(0)
X        DC    A(0)
Y        DC    A(0)
Z        DC    A(0)
TMPSTORE DC    A(0)
LINKPTR  DC    A(0)
CCHINDX  DC    A(0)
SAVESEQ  DC    AL1(0)
         DS    CL3
UNKNWN   DC    F'0'
ALLCORE  DC    F'0'
STSUMPTR DC    A(0)
COMPLINK DC    A(0)
M        DC    A(0)
SRTCONT  DC    F'0'
SRTCONT1 DC    F'0'
ERROR    DC    F'0'
EVPTR1   DC    A(0)
ERSER    DC    X'00000000'
         ORG   ERSER
@NM00084 DS    CL1
ER3      DS    CL3
         ORG   FILT1ITM+96
NUMUNSHR DC    H'1'
PACKPAS  DC    CL4'    '
CHARPAS  DC    CL8'        '
         DS    CL2
PASSNUM  DC    F'0'
NUMREC   DC    F'0'
EXCESS   DC    F'0'
WORKDEV  DC    X'0000'
         ORG   WORKDEV
WORKDEV1 DS    CL1
WORKDEV2 DS    CL1
         ORG   FILT1ITM+126
WORKTYPE DC    X'00'
CUA3     DC    X'000000'
         ORG   CUA3
@NM00085 DS    BL1
WORKCUA  DS    BL2
         ORG   WORKCUA
WRKCUA   DS    BL2
         ORG   FILT1ITM+130
MSGNO    DC    AL1(0)
         ORG   FILT1ITM+131
LINKDEV  DS    CL4
         ORG   LINKDEV
DEVLABEL DS    CL2
@NM00086 DS    CL2
         ORG   LINKDEV+4
ERRPLACE DS    BL1
         ORG   ERRPLACE
ERRP1    DS    BL1
ERRP2    EQU   ERRPLACE+0
         ORG   ERRPLACE+1
PRINTLIN DS    CL134
         ORG   PRINTLIN
PRINTDS  DC    X'F1'
PRINTCC  DC    X'09'
PRINTBDY DC    CL132' '
         ORG   PRINTBDY
@NM00087 DS    CL8
PRINTED  DS    CL9
@NM00088 DS    CL24
PRNTSER  DS    CL7
         ORG   PRINTLIN+134
PARTIAL  DS    CL58
         ORG   PARTIAL
@NM00091 DC    CL29'DEBUG16 FRAME SET INCOMPLETE '
PARMOD   DS    CL4
@NM00092 DC    CL1' '
PARSER   DS    CL6
@NM00093 DC    CL17' FRAMEREP SET TO '
PARREP   DS    CL1
         ORG   PARTIAL+58
BITSWIT  DC    X'000000'
         ORG   BITSWIT
NONBLANK DS    BL1
SORTSW   EQU   BITSWIT+0
UNIQUE   EQU   BITSWIT+0
MISSW    EQU   BITSWIT+0
GETOUT   EQU   BITSWIT+0
FIRSTIME EQU   BITSWIT+0
MISSW1   EQU   BITSWIT+0
ONBOUND  EQU   BITSWIT+0
SHAREYES DS    BL1
CUAOK    EQU   BITSWIT+1
CPUOK    EQU   BITSWIT+1
CPU0FLG  EQU   BITSWIT+1
GETFAIL  EQU   BITSWIT+1
LOOPOUT  EQU   BITSWIT+1
FRAMEYES EQU   BITSWIT+1
ONETIME  EQU   BITSWIT+1
FOUND    DS    BL1
DEVOK    EQU   BITSWIT+2
         ORG   BITSWIT+3
WORKBYTE DS    BL1
         ORG   WORKBYTE
WORKBYT4 DS    BL1
         ORG   WORKBYTE+1
WORKTWO  DS    BL1
ZERO5    DC    X'0000000000'
SYSUM2   DC    X'0000000000000000000000000000'
         ORG   SYSUM2
SYSUMKEY DS    CL7
         ORG   SYSUMKEY
SYSGROUP DS    FL1
SYSRT    DS    BL2
         ORG   SYSRT
SYSCUA   DS    BL2
SYSSPAN  EQU   SYSRT+1
SYSTROLL EQU   SYSRT+1
         ORG   SYSUMKEY+3
SYSCPUS  DS    BL1
         ORG   SYSCPUS
SYSCPU   DS    BL1
SYSOLD   EQU   SYSCPUS+0
         ORG   SYSUMKEY+4
SYSITEM  DS    BL1
         ORG   SYSITEM
SYS3705  DS    BL1
SYSOLDA  EQU   SYSITEM+0
         ORG   SYSUMKEY+5
SYSDEV   DS    CL2
         ORG   SYSUM2+7
SYSRANGE DS    CL1
SYSPERM1 DS    FL2
         ORG   SYSPERM1
@NM00098 DS    BL2
SYSPERM  EQU   SYSPERM1+1
         ORG   SYSUM2+10
SYSTEMP  DS    FL4
         ORG   SYSUM2+14
CHARS    DC    CL16'0123456789ABCDEF'
SUPERZAP DC    3CL10'SUPERZAP'
         DS    CL2
SAVEADR  DC    A(0)
         DS    15XL4
EVCON    DC    CL1'A'
         DC    CL1'B'
         DC    CL1'C'
         DC    CL1'D'
         DC    CL1'E'
         DC    CL1'F'
         DC    CL1'G'
         DC    CL1'H'
         DC    CL1'I'
         DC    CL1'J'
         DC    CL1'K'
         DC    CL1'L'
         DC    CL1'M'
         DC    CL1'N'
         DC    CL1'O'
         DC    CL1'P'
FLIP     DC    AL1(0)
         DC    AL1(1)
         DC    AL1(2)
         DC    AL1(3)
         DC    AL1(4)
         DC    AL1(5)
         DC    AL1(6)
         DC    AL1(7)
         DC    AL1(8)
         DC    AL1(9)
         DC    AL1(10)
         DC    AL1(11)
         DC    AL1(12)
         DC    AL1(13)
         DC    AL1(14)
         DC    AL1(15)
FLIPCPUS DS    16BL1
EDIFILD  DS    9CL1
         DS    CL3
PATCH    DC    25F'0'
BUG      DC    40F'0'
ERRLINE  DS    CL63
         ORG   ERRLINE+0
ERRDS    DC    CL1'1'
ERCC     DC    X'09'
ERRMES   DC    CL10'DEBUG16   '
ERXNUM   DC    CL9'         '
@NM00099 DC    CL2'  '
ERRTXT   DC    CL40'UNKNOWN RECORDS IDENTIFIED              '
         ORG   ERRLINE+63
         ORG   ERRLINE+63
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'SOFT    RECORDS IDENTIFIED              '
         ORG   ERRLINE+126
         ORG   ERRLINE+126
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'MCH     RECORDS IDENTIFIED              '
         ORG   ERRLINE+189
         ORG   ERRLINE+189
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'CCH     RECORDS IDENTIFIED              '
         ORG   ERRLINE+252
         ORG   ERRLINE+252
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'IPL     RECORDS IDENTIFIED              '
         ORG   ERRLINE+315
         ORG   ERRLINE+315
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'EOD     RECORDS IDENTIFIED              '
         ORG   ERRLINE+378
         ORG   ERRLINE+378
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'OBR     RECORDS IDENTIFIED              '
         ORG   ERRLINE+441
         ORG   ERRLINE+441
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'OTHER VALID RECORDS IDENTIFIED          '
         ORG   ERRLINE+504
         ORG   ERRLINE+504
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'MDR TYPE 91 DEVICE TYPE 3705 RECORDS    '
         ORG   ERRLINE+567
         ORG   ERRLINE+567
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'MDR NOT DEVICE 3705 OR 33XX             '
         ORG   ERRLINE+630
         ORG   ERRLINE+630
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'MDR RECORDS SAVED IN SYSUM2             '
         ORG   ERRLINE+693
         ORG   ERRLINE+693
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'OBR RECORDS SAVED IN SYSUM2             '
         ORG   ERRLINE+756
         ORG   ERRLINE+756
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'RECORDS SAVED WITH CPU SERIAL NO. FFFFFF'
         ORG   ERRLINE+819
         ORG   ERRLINE+819
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'SORTWO FLIPS DONE                       '
         ORG   ERRLINE+882
         ORG   ERRLINE+882
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'DEVICE GROUP 1 RECORDS SAVED            '
         ORG   ERRLINE+945
         ORG   ERRLINE+945
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'DEVICE GROUP 2 RECORDS SAVED            '
         ORG   ERRLINE+1008
         ORG   ERRLINE+1008
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'DEVICE GROUP 3 RECORDS SAVED            '
         ORG   ERRLINE+1071
         ORG   ERRLINE+1071
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'DEVICE GROUP 4 RECORDS SAVED            '
         ORG   ERRLINE+1134
         ORG   ERRLINE+1134
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'DEVICE GROUP 5 RECORDS SAVED            '
         ORG   ERRLINE+1197
         ORG   ERRLINE+1197
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'DEVICE GROUP 6 RECORDS SAVED            '
         ORG   ERRLINE+1260
         ORG   ERRLINE+1260
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'RECORDS RETRIEVED VIA READSEQ           '
         ORG   ERRLINE+1323
         ORG   ERRLINE+1323
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'RECORDS PASSED DATE,TIME FILTERING      '
         ORG   ERRLINE+1386
         ORG   ERRLINE+1386
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'MDR 33XX RECORDS IDENTIFIED             '
         ORG   ERRLINE+1449
         ORG   ERRLINE+1449
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'MDR 33XX RECORDS SAVED                  '
         ORG   ERRLINE+1512
         ORG   ERRLINE+1512
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'OBR 33XX RECORDS IDENTIFIED             '
         ORG   ERRLINE+1575
         ORG   ERRLINE+1575
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'OBR 33XX RECORDS SAVED                  '
         ORG   ERRLINE+1638
         ORG   ERRLINE+1638
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'34XX     RECORDS FOUND                  '
         ORG   ERRLINE+1701
         ORG   ERRLINE+1701
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'34XX     RECORDS SAVED                  '
         ORG   ERRLINE+1764
         ORG   ERRLINE+1764
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'FRAMES USED IN PROCESSING               '
         ORG   ERRLINE+1827
         ORG   ERRLINE+1827
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'FRAMES NOT USED IN PROCESSING           '
         ORG   ERRLINE+1890
         ORG   ERRLINE+1890
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'RECORDS DROPPED DUE TO DEVICE FILTERING '
         ORG   ERRLINE+1953
         ORG   ERRLINE+1953
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'RECORDS DROPPED DUE TO CUA FILTERING    '
         ORG   ERRLINE+2016
         ORG   ERRLINE+2016
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         DC    CL40'****IFCFILT2 DEBUG16 RECORD COUNTS******'
         ORG   ERRLINE+2079
         ORG   ERRLINE+2079
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         ORG   ERRLINE+2142
         ORG   ERRLINE+2142
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         ORG   ERRLINE+2205
         ORG   ERRLINE+2205
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         ORG   ERRLINE+2268
         ORG   ERRLINE+2268
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         ORG   ERRLINE+2331
         ORG   ERRLINE+2331
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         ORG   ERRLINE+2394
         ORG   ERRLINE+2394
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         ORG   ERRLINE+2457
         ORG   ERRLINE+2457
         DC    CL1'1'
         DC    X'09'
         DC    CL10'DEBUG16   '
         DC    CL9'         '
         DC    CL2'  '
         ORG   ERRLINE+2520
IFCFILT2 CSECT
         DC    S(SUPERZAP)
IFCFILT2 CSECT
         DC    S(PATCH)   BASE DISPLACEMENT ADDRESS OF PATCH AREA
IFCFILT2 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
R2       EQU   @02
R7       EQU   @07
R0       EQU   @00
R1       EQU   @01
R3       EQU   @03
R4       EQU   @04
R5       EQU   @05
R6       EQU   @06
R8       EQU   @08
R12      EQU   @12
R15      EQU   @15
R10      EQU   @10
R11      EQU   @11
R13      EQU   @13
R14      EQU   @14
R9       EQU   @09
IOHND    EQU   0
IFCMSG   EQU   0
PARM     EQU   0
RECTYPE  EQU   PARM
PMCH     EQU   RECTYPE
PCHAN    EQU   RECTYPE
SWITCHES EQU   PARM+2
ZEROALL  EQU   SWITCHES+1
DEVEXCL  EQU   SWITCHES+1
SHIFT3RD EQU   SWITCHES+1
DEBUG    EQU   PARM+4
DEBUG4   EQU   DEBUG
DEBUG11  EQU   DEBUG+1
DEBUG16  EQU   DEBUG+2
DEBUG23  EQU   DEBUG+2
DEBUGA   EQU   PARM+8
DEBUG50  EQU   DEBUGA+2
MISC     EQU   PARM+12
PACC     EQU   MISC
PHIST    EQU   MISC
PRINTES  EQU   MISC
PASSFLAG EQU   MISC
OPENCLSE EQU   PARM+13
OPENIO   EQU   OPENCLSE
CLOSEIO  EQU   OPENCLSE+2
CACCIN   EQU   CLOSEIO
CDRCTWRK EQU   CLOSEIO
DATENOW  EQU   PARM+17
STDT     EQU   PARM+23
STDATE   EQU   STDT
PSTD     EQU   STDATE+1
ENDDT    EQU   PARM+31
ENDDATE  EQU   ENDDT
PEND     EQU   ENDDATE+1
STTIME1  EQU   PARM+39
ENDTIME1 EQU   PARM+43
STTIME2  EQU   PARM+47
ENDTIME2 EQU   PARM+51
STRTDATE EQU   PARM+55
@NM00006 EQU   PARM+72
@NM00007 EQU   PARM+75
TABSIZE  EQU   PARM+80
SORTNUM  EQU   PARM+84
ERRID    EQU   PARM+92
IDTIMEA  EQU   ERRID+6
IDTIME   EQU   IDTIMEA
CCHHRLNG EQU   PARM+112
RECCCHHR EQU   CCHHRLNG
ADIOHND  EQU   PARM+124
ADIFCMSG EQU   PARM+128
ADEDITB  EQU   PARM+132
EVPTR    EQU   PARM+136
SORTADR  EQU   PARM+140
PRINTADR EQU   PARM+148
CUAPTR   EQU   PARM+152
DEVPTR   EQU   PARM+156
MODPTR   EQU   PARM+160
SERPTR   EQU   PARM+164
VOLPTR   EQU   PARM+168
CPUPTR   EQU   PARM+172
CPCUAPTR EQU   PARM+176
LIBADPTR EQU   PARM+180
SYMCDPTR EQU   PARM+184
SYSUMPTR EQU   PARM+188
TRENPTR  EQU   PARM+192
SHAREPTR EQU   PARM+196
FRAMEPTR EQU   PARM+200
MERDCPTR EQU   PARM+208
DUMPTABL EQU   PARM+228
DUMPINFO EQU   DUMPTABL+4
TRENDONE EQU   0
TREGEN   EQU   TRENDONE+8
EVTABLE  EQU   0
EVSTOP   EQU   EVTABLE
EVNUM    EQU   EVTABLE+4
EVKEY    EQU   EVTABLE+6
EVMODEL  EQU   EVKEY
EVSERIAL EQU   EVKEY+2
EVLETTER EQU   EVKEY+5
SORTABLE EQU   0
SORTKEY  EQU   SORTABLE
SORTCCHR EQU   SORTABLE+5
SYSUMONE EQU   0
SYSUMNUM EQU   SYSUMONE
SYSUMIPL EQU   SYSUMONE+4
SYSUMNXT EQU   SYSUMONE+8
SYSUMMCR EQU   SYSUMONE+12
SYSUMMCN EQU   SYSUMONE+16
SYSUMCH  EQU   SYSUMONE+20
SYSUMPEI EQU   SYSUMONE+84
SYSUMPEA EQU   SYSUMONE+88
SYSUMPER EQU   SYSUMONE+92
SYSUMEOD EQU   SYSUMONE+96
SHARE    EQU   0
SHARENUM EQU   SHARE
SHAREIO  EQU   SHARE+2
SHAREFLG EQU   SHAREIO
SHRBASE  EQU   SHAREIO+1
SHARSERB EQU   SHRBASE
SHRCUABL EQU   SHRBASE+3
SHRCUABH EQU   SHRBASE+5
SHRCUCPU EQU   SHAREIO+8
SHARSERA EQU   SHRCUCPU
SHRCUAAL EQU   SHRCUCPU+3
SHRCUAAH EQU   SHRCUCPU+5
SHARLET  EQU   SHAREIO+15
EDITLOAD EQU   0
EDITABLE EQU   EDITLOAD+4
CUA      EQU   0
CUANUM   EQU   CUA
CUAVAL   EQU   CUA+2
CUA1     EQU   CUAVAL
CUA2     EQU   CUAVAL+2
DEVICE   EQU   0
DEVNUM   EQU   DEVICE
DEVVAL   EQU   DEVICE+2
MDRNUM   EQU   DEVICE+202
MDRVAL   EQU   DEVICE+204
MODELS   EQU   0
DEVSERAL EQU   0
VOLUME   EQU   0
CPUS     EQU   0
CPUNUM   EQU   CPUS
CPUVAL   EQU   CPUS+2
CPUCUAS  EQU   0
CPUCUAV  EQU   CPUCUAS+2
LIBADR   EQU   0
SYMCODE  EQU   0
SYMVAL   EQU   SYMCODE+2
TMT2     EQU   0
TMTKEY   EQU   TMT2
TMTSRT   EQU   TMTKEY+1
TMTCPUS  EQU   TMTKEY+3
TMTITEM  EQU   TMTKEY+4
TMTPERM1 EQU   TMT2+8
TMP2     EQU   0
TMPKEY   EQU   TMP2
TMPSRT   EQU   TMPKEY+1
TMPCPUS  EQU   TMPKEY+3
TMPITEM  EQU   TMPKEY+4
TMPPERM1 EQU   TMP2+8
MERIDIAN EQU   0
MRDNUMBR EQU   MERIDIAN
MODEL    EQU   MERIDIAN+2
LRTREC   EQU   0
LRTKEY   EQU   LRTREC
LRTKEY1  EQU   LRTKEY
LRTSMS   EQU   LRTREC+2
LRTNLAST EQU   LRTSMS
LRTRUNC  EQU   LRTSMS
LRTERRID EQU   LRTREC+3
@NM00017 EQU   LRTREC+4
LRTCNT   EQU   @NM00017+2
LRTDT    EQU   LRTREC+8
LRTDATE  EQU   LRTDT
LRTYRDAY EQU   LRTDATE+1
LRTTIME  EQU   LRTDT+4
LRTCPU   EQU   LRTREC+16
LRTCPMOD EQU   LRTCPU+1
LRTCPUS  EQU   LRTCPMOD
LRTMODEL EQU   LRTCPMOD+3
MCHREC   EQU   0
MCHHEAD  EQU   MCHREC
MCHKEY   EQU   MCHHEAD
MCHSMS   EQU   MCHHEAD+2
MCHSYSTR EQU   MCHSMS+1
MCHCPUID EQU   MCHHEAD+16
CCHREC   EQU   0
CCHHEAD  EQU   CCHREC
CCHKEY   EQU   CCHHEAD
CCHSMS   EQU   CCHHEAD+2
CCHCPUID EQU   CCHHEAD+16
CCHCODE  EQU   CCHREC+68
CCHCODE2 EQU   CCHCODE+2
CCHCUA   EQU   CCHREC+74
OBRREC   EQU   0
OBRHEAD  EQU   OBRREC
OBRKEY   EQU   OBRHEAD
OBRSMS   EQU   OBRHEAD+2
MISCSW   EQU   OBRSMS
OBRSUBTP EQU   OBRSMS+1
SDRCOUNT EQU   OBRSUBTP
OBRTEMP  EQU   OBRSUBTP
SHORTSW  EQU   OBRSUBTP
DISMOUNT EQU   OBRSUBTP
OBRCPUID EQU   OBRHEAD+16
OBRJOBID EQU   OBRREC+24
OBRSDEV2 EQU   OBRJOBID+2
OBRSSDRC EQU   OBRJOBID+4
OBRSCUA  EQU   OBRJOBID+5
OBRFCCW  EQU   OBRREC+32
OBRSRDS  EQU   OBRFCCW
OBRCSW   EQU   OBRREC+40
OBRDEVDC EQU   OBRREC+48
OBRCODE  EQU   OBRREC+52
OBRDEV   EQU   OBRCODE+2
OBRCLASS EQU   OBRDEV
OBRLSDRC EQU   OBRREC+56
OBRPCUA  EQU   OBRREC+57
OBRSEEK  EQU   OBRREC+70
OBRTERMN EQU   OBRSEEK+2
OBR34CT1 EQU   OBRTERMN+4
OBR34CT2 EQU   OBRTERMN+5
SFTREC   EQU   0
SFTHEAD  EQU   SFTREC
SFTKEY   EQU   SFTHEAD
SFTKEY1  EQU   SFTKEY
SFTCPUID EQU   SFTHEAD+16
SFTSDWA  EQU   SFTREC+32
SFTAEC1  EQU   SFTSDWA+96
SFTFLGS  EQU   SFTSDWA+232
SFTRECP  EQU   SFTSDWA+292
IPLREC   EQU   0
IPLHEAD  EQU   IPLREC
IPLKEY   EQU   IPLHEAD
IPLCPUID EQU   IPLHEAD+16
IPLSTIME EQU   IPLREC+52
DDRREC   EQU   0
DDRHEAD  EQU   DDRREC
DDRKEY   EQU   DDRHEAD
DDRSMS   EQU   DDRHEAD+2
DDRCPUID EQU   DDRHEAD+16
@NM00052 EQU   DDRREC+24
DDRFDEV  EQU   DDRREC+48
DDRCODE2 EQU   DDRFDEV+2
DDRTODEV EQU   DDRREC+56
MIHREC   EQU   0
MIHHEAD  EQU   MIHREC
MIHKEY   EQU   MIHHEAD
@NM00054 EQU   MIHHEAD+4
MIHCPUID EQU   MIHHEAD+16
@NM00057 EQU   MIHREC+24
MIHDEV   EQU   MIHREC+44
MIHCODE2 EQU   MIHDEV+2
EODREC   EQU   0
EODHEAD  EQU   EODREC
EODKEY   EQU   EODHEAD
EODCPUID EQU   EODHEAD+16
TPRREC   EQU   0
TPRHEAD  EQU   TPRREC
TPRKEY   EQU   TPRHEAD
TPRDEV   EQU   TPRHEAD+4
TPRBUFC  EQU   TPRHEAD+5
TPRCPUID EQU   TPRHEAD+16
TPRCUA   EQU   TPRREC+24
@NM00065 EQU   TPRREC+26
TPRVOL   EQU   @NM00065
TPRMODE  EQU   TPRREC+38
DVBSDRE  EQU   TPRREC+56
RMSSCBRY EQU   TPRREC+58
MCFREC   EQU   0
MCFHEAD  EQU   MCFREC
MCFKEY   EQU   MCFHEAD
MCFSMS   EQU   MCFHEAD+2
@NM00073 EQU   MCFHEAD+16
MCFSMO   EQU   MCFHEAD+17
CCFREC   EQU   0
CCFHEAD  EQU   CCFREC
CCFKEY   EQU   CCFHEAD
CCFSMS   EQU   CCFHEAD+2
@NM00081 EQU   CCFHEAD+16
CCFSMO   EQU   CCFHEAD+17
STSUMONE EQU   0
STSUMIPL EQU   STSUMONE+4
STSUMMCR EQU   STSUMONE+12
STSUMMCN EQU   STSUMONE+16
STSUMCH  EQU   STSUMONE+20
STSUMPEI EQU   STSUMONE+84
STSUMPEA EQU   STSUMONE+88
STSUMPER EQU   STSUMONE+92
STSUMEOD EQU   STSUMONE+96
OBRLSDR  EQU   0
OBRSENSE EQU   0
OBRSENS0 EQU   OBRSENSE
OBRSENS1 EQU   OBRSENSE+1
TPRTEMP  EQU   0
TPRTMPR  EQU   TPRTEMP
TPRTMPW  EQU   TPRTEMP+1
@NM00094 EQU   0
BYT1112  EQU   @NM00094
BYTE13   EQU   @NM00094+2
BYTE18   EQU   @NM00094+7
BYTE21   EQU   @NM00094+10
TPRSENSE EQU   0
TPRS1213 EQU   TPRSENSE
TPRS1415 EQU   TPRSENSE+2
TPRS19   EQU   TPRSENSE+7
FRAMETAB EQU   0
FRAMENUM EQU   FRAMETAB
FRAMEDTA EQU   FRAMETAB+4
FRAMEKEY EQU   FRAMEDTA
FRAMECPU EQU   FRAMEKEY
FRAMESER EQU   FRAMECPU
FRAMEMOD EQU   FRAMECPU+3
FRAMEDT  EQU   FRAMEKEY+5
FRAMETYP EQU   FRAMEKEY+13
FRAMLOCM EQU   FRAMEDTA+16
FRAMLOCC EQU   FRAMEDTA+20
LISTLOC  EQU   0
LISTNUM  EQU   LISTLOC
LISTCCHR EQU   LISTLOC+4
NEXTBYTE EQU   0
ADDNUM   EQU   0
TMPA     EQU   0
TMPKEYA  EQU   TMPA
TMPPERMA EQU   TMPA+8
TMPTEMPA EQU   TMPA+10
WORKCHAN EQU   CCHCUA
FLIPFLOP EQU   FLIP
EDFLD    EQU   EDIFILD
ERRCT1   EQU   DVBSDRE
ERRNUM   EQU   ERRPLACE
ERR78    EQU   PRINTBDY
PFRAMMOD EQU   ERR78+27
PFRAMSER EQU   ERR78+32
WORKNM   EQU   WORKBYTE
WORKNM2  EQU   WORKTWO
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
@NM00090 EQU   ERR78+31
@NM00089 EQU   ERR78
FRAMETIM EQU   FRAMEDT+4
FRAMEDAT EQU   FRAMEDT
@NM00097 EQU   TPRSENSE+4
@NM00096 EQU   @NM00094+8
@NM00095 EQU   @NM00094+3
OBRLSDR2 EQU   OBRLSDR
OBRLSDR1 EQU   OBRLSDR
STSUMNXT EQU   STSUMONE+8
STSUMNUM EQU   STSUMONE
CCFFRAME EQU   CCFREC+24
@NM00083 EQU   CCFHEAD+22
CCFMOD   EQU   CCFSMO+3
CCFSER   EQU   CCFSMO
CCFVER   EQU   @NM00081
@NM00082 EQU   @NM00081
CCFTIMD  EQU   CCFHEAD+12
CCFDAT   EQU   CCFHEAD+8
@NM00080 EQU   CCFHEAD+7
CCFCNT   EQU   CCFHEAD+6
@NM00079 EQU   CCFHEAD+4
@NM00078 EQU   CCFSMS+1
CCFCPU   EQU   CCFSMS+1
CCFMP    EQU   CCFSMS+1
@NM00077 EQU   CCFSMS
CCFTIM   EQU   CCFSMS
@NM00076 EQU   CCFSMS
CCFTRU   EQU   CCFSMS
CCFTOD   EQU   CCFSMS
CCFLST   EQU   CCFSMS
CCFKEY2  EQU   CCFKEY+1
CCFKEY1  EQU   CCFKEY
MCFFRAME EQU   MCFREC+24
@NM00075 EQU   MCFHEAD+22
MCFMOD   EQU   MCFSMO+3
MCFSER   EQU   MCFSMO
MCFVER   EQU   @NM00073
@NM00074 EQU   @NM00073
MCFTIMD  EQU   MCFHEAD+12
MCFDAT   EQU   MCFHEAD+8
@NM00072 EQU   MCFHEAD+7
MCFCNT   EQU   MCFHEAD+6
@NM00071 EQU   MCFHEAD+4
@NM00070 EQU   MCFSMS+1
MCFCPU   EQU   MCFSMS+1
MCFMP    EQU   MCFSMS+1
@NM00069 EQU   MCFSMS
MCFTIM   EQU   MCFSMS
@NM00068 EQU   MCFSMS
MCFTRU   EQU   MCFSMS
MCFTOD   EQU   MCFSMS
MCFLST   EQU   MCFSMS
MCFKEY2  EQU   MCFKEY+1
MCFKEY1  EQU   MCFKEY
@NM00067 EQU   TPRREC+39
TPRLINAD EQU   TPRREC+36
@NM00066 EQU   TPRREC+34
TPRCEL   EQU   TPRCPUID+6
TPRMODEL EQU   TPRCPUID+4
TPRSER   EQU   TPRCPUID+1
@NM00064 EQU   TPRCPUID
TPRTIME  EQU   TPRHEAD+12
TPRDATE  EQU   TPRHEAD+8
@NM00063 EQU   TPRHEAD+6
TPRLENGT EQU   TPRBUFC
@NM00062 EQU   TPRBUFC
TPRSMS   EQU   TPRHEAD+2
TPRKEY2  EQU   TPRKEY+1
TPRKEY1  EQU   TPRKEY
EODCEL   EQU   EODCPUID+6
EODMODEL EQU   EODCPUID+4
EODSER   EQU   EODCPUID+1
@NM00061 EQU   EODCPUID
EODTIME  EQU   EODHEAD+12
EODDATE  EQU   EODHEAD+8
@NM00060 EQU   EODHEAD+5
EODDEV   EQU   EODHEAD+4
EODSMS   EQU   EODHEAD+2
EODKEY2  EQU   EODKEY+1
EODKEY1  EQU   EODKEY
MIHTYPE  EQU   MIHCODE2+1
MIHCLASS EQU   MIHCODE2
@NM00059 EQU   MIHDEV
MIHVOL   EQU   MIHREC+38
MIHCUA   EQU   MIHREC+35
@NM00058 EQU   @NM00057+8
MIHJOBID EQU   @NM00057
MIHCEL   EQU   MIHCPUID+6
MIHMOD   EQU   MIHCPUID+4
MIHSER   EQU   MIHCPUID+1
@NM00056 EQU   MIHCPUID
MIHTIME  EQU   MIHHEAD+12
MIHDATE  EQU   MIHHEAD+8
@NM00055 EQU   MIHHEAD+6
MIHCSID  EQU   MIHHEAD+5
MIHDEBIT EQU   @NM00054
MIHCEBIT EQU   @NM00054
MIHSMS   EQU   MIHHEAD+2
MIHKEY2  EQU   MIHKEY+1
MIHKEY1  EQU   MIHKEY
DDRDEV2  EQU   DDRTODEV+2
DDRDEV1  EQU   DDRTODEV
DDRTOCUA EQU   DDRREC+53
@NM00053 EQU   DDRREC+52
DDRTYPE  EQU   DDRCODE2+1
DDRCLASS EQU   DDRCODE2
DDRCODE1 EQU   DDRFDEV
DDRFCUA  EQU   DDRREC+45
DDRPHD   EQU   @NM00052+20
DDRVOL2  EQU   @NM00052+14
DDRVOL1  EQU   @NM00052+8
DDRJOBID EQU   @NM00052
DDRCEL   EQU   DDRCPUID+6
DDRMOD   EQU   DDRCPUID+4
DDRSER   EQU   DDRCPUID+1
@NM00051 EQU   DDRCPUID
DDRTIME  EQU   DDRHEAD+12
DDRDATE  EQU   DDRHEAD+8
@NM00050 EQU   DDRHEAD+4
DDRDEPSW EQU   DDRSMS+1
@NM00049 EQU   DDRSMS
DDRKEY2  EQU   DDRKEY+1
DDRKEY1  EQU   DDRKEY
IPLSHSEC EQU   IPLSTIME+3
IPLSSEC  EQU   IPLSTIME+2
IPLSMIN  EQU   IPLSTIME+1
IPLSHOUR EQU   IPLSTIME
IPLSDATE EQU   IPLREC+48
IPLTEMP  EQU   IPLREC+46
IPLHIGH  EQU   IPLREC+42
IPLCHAN  EQU   IPLREC+32
@NM00048 EQU   IPLREC+30
IPLREAS  EQU   IPLREC+28
@NM00047 EQU   IPLREC+25
IPLSYSID EQU   IPLREC+24
IPLCEL   EQU   IPLCPUID+6
IPLMOD   EQU   IPLCPUID+4
IPLSER   EQU   IPLCPUID+1
@NM00046 EQU   IPLCPUID
IPLTIME  EQU   IPLHEAD+12
IPLDATE  EQU   IPLHEAD+8
@NM00045 EQU   IPLHEAD+4
IPLSMS   EQU   IPLHEAD+2
IPLKEY2  EQU   IPLKEY+1
IPLKEY1  EQU   IPLKEY
SFTXDATA EQU   SFTREC+434
SFTLVARA EQU   SFTREC+432
SFTREXN  EQU   SFTRECP+16
SFTCSECT EQU   SFTRECP+8
SFTMODN  EQU   SFTRECP
@NM00044 EQU   SFTSDWA+238
SFTLCPUA EQU   SFTSDWA+236
SFTERRD  EQU   SFTFLGS+3
SFTERRC  EQU   SFTFLGS+2
SFTERRB  EQU   SFTFLGS+1
SFTERRA  EQU   SFTFLGS
@NM00043 EQU   SFTSDWA+136
SFTAAEC1 EQU   SFTSDWA+120
@NM00042 EQU   SFTSDWA+112
SFTPROGC EQU   SFTAEC1+8
@NM00041 EQU   SFTAEC1
@NM00040 EQU   SFTSDWA+88
SFTGRSV  EQU   SFTSDWA+24
SFTABNDC EQU   SFTSDWA
SFTJOBID EQU   SFTREC+24
SFTCEL   EQU   SFTCPUID+6
SFTMOD   EQU   SFTCPUID+4
SFTSER   EQU   SFTCPUID+1
@NM00039 EQU   SFTCPUID
SFTTIME  EQU   SFTHEAD+12
SFTDATE  EQU   SFTHEAD+8
@NM00038 EQU   SFTHEAD+4
SFTSMS   EQU   SFTHEAD+2
SFTKEY2  EQU   SFTKEY+1
@NM00037 EQU   OBRTERMN
@NM00036 EQU   OBRSEEK+1
OBRTCAM  EQU   OBRSEEK
OBRVOL   EQU   OBRREC+64
OBRSBCNT EQU   OBRREC+62
OBRRETRY EQU   OBRREC+60
OBRTYPE  EQU   OBRDEV+1
OBRCODE1 EQU   OBRCODE
OBRSECUA EQU   OBRREC+49
OBRSTAT  EQU   OBRCSW+4
@NM00035 EQU   OBRCSW
OBRSDRS2 EQU   OBRSRDS
OBRSDRS1 EQU   OBRSRDS
OBRSDEV1 EQU   OBRJOBID
OBRCEL   EQU   OBRCPUID+6
OBRMOD   EQU   OBRCPUID+4
OBRSER   EQU   OBRCPUID+1
@NM00034 EQU   OBRCPUID
OBRTIME  EQU   OBRHEAD+12
OBRDATE  EQU   OBRHEAD+8
@NM00033 EQU   OBRHEAD+4
@NM00032 EQU   OBRSUBTP
@NM00031 EQU   OBRSUBTP
@NM00030 EQU   MISCSW
TRUNC    EQU   MISCSW
@NM00029 EQU   MISCSW
OBRKEY2  EQU   OBRKEY+1
OBRKEY1  EQU   OBRKEY
CCHLOG   EQU   CCHREC+80
CCHMP    EQU   CCHREC+76
@NM00028 EQU   CCHREC+73
CCHID    EQU   CCHREC+72
CCHTYPE  EQU   CCHCODE2+1
CCHCLASS EQU   CCHCODE2
CCHCODE1 EQU   CCHCODE
CCHECSW  EQU   CCHREC+64
CCHCSW   EQU   CCHREC+56
CCHFCCW  EQU   CCHREC+48
CCHATIO  EQU   CCHREC+32
CCHJOBID EQU   CCHREC+24
CCHCEL   EQU   CCHCPUID+6
CCHMOD   EQU   CCHCPUID+4
CCHSER   EQU   CCHCPUID+1
@NM00027 EQU   CCHCPUID
CCHTIME  EQU   CCHHEAD+12
CCHDATE  EQU   CCHHEAD+8
@NM00026 EQU   CCHHEAD+4
CCHRINC  EQU   CCHSMS+1
@NM00025 EQU   CCHSMS
CCHRCRH  EQU   CCHSMS
@NM00024 EQU   CCHSMS
CCHKEY2  EQU   CCHKEY+1
CCHKEY1  EQU   CCHKEY
MCHLOG   EQU   MCHREC+48
MCHOPSW  EQU   MCHREC+40
MCHJOBID EQU   MCHREC+32
MCHPGMID EQU   MCHREC+24
MCHCEL   EQU   MCHCPUID+6
MCHMOD   EQU   MCHCPUID+4
MCHSER   EQU   MCHCPUID+1
@NM00023 EQU   MCHCPUID
MCHTIME  EQU   MCHHEAD+12
MCHDATE  EQU   MCHHEAD+8
@NM00022 EQU   MCHHEAD+4
@NM00021 EQU   MCHSMS
MCHKEY2  EQU   MCHKEY+1
MCHKEY1  EQU   MCHKEY
LRTMCEL  EQU   LRTCPU+6
@NM00020 EQU   LRTCPU
LRTHSECS EQU   LRTTIME+3
LRTSEC   EQU   LRTTIME+2
LRTMIN   EQU   LRTTIME+1
LRTHOUR  EQU   LRTTIME
LRTDAY   EQU   LRTYRDAY+1
LRTYEAR  EQU   LRTYRDAY
LRTDATE0 EQU   LRTDATE
@NM00019 EQU   @NM00017+3
@NM00018 EQU   @NM00017
LRTDSMNT EQU   LRTERRID
@NM00016 EQU   LRTERRID
LRTSHRT  EQU   LRTERRID
@NM00015 EQU   LRTERRID
@NM00014 EQU   LRTSMS
LRTIMCNV EQU   LRTSMS
@NM00013 EQU   LRTSMS
LRNS     EQU   LRTSMS
LRTKEY2  EQU   LRTKEY+1
TMPTEMP  EQU   TMP2+10
TMPPERM  EQU   TMPPERM1+1
@NM00012 EQU   TMPPERM1
TMPRANGE EQU   TMP2+7
TMPDEV   EQU   TMPKEY+5
TMPOLDA  EQU   TMPITEM
TMP3705  EQU   TMPITEM
TMPOLD   EQU   TMPCPUS
TMPCPU   EQU   TMPCPUS
TMPCUA   EQU   TMPSRT
TMPGROUP EQU   TMPKEY
TMTTEMP  EQU   TMT2+10
TMTPERM  EQU   TMTPERM1+1
@NM00011 EQU   TMTPERM1
TMTDEV   EQU   TMTKEY+6
TMTDAT   EQU   TMTKEY+5
TMTOLDA  EQU   TMTITEM
TMT3705  EQU   TMTITEM
TMTOLD   EQU   TMTCPUS
TMTCPU   EQU   TMTCPUS
TMTCUA   EQU   TMTSRT
TMTGROUP EQU   TMTKEY
SYMVAL2  EQU   SYMVAL+2
SYMVAL1  EQU   SYMVAL
SYMCDNUM EQU   SYMCODE
LIBVAL   EQU   LIBADR+2
LIBADNUM EQU   LIBADR
CPUCUX3  EQU   CPUCUAV+5
CPUCUX2  EQU   CPUCUAV+3
CPUCUX1  EQU   CPUCUAV
CPCUANUM EQU   CPUCUAS
VOLVAL   EQU   VOLUME+2
VOLNUM   EQU   VOLUME
SERVAL   EQU   DEVSERAL+2
SERNUM   EQU   DEVSERAL
MODVAL   EQU   MODELS+2
MODNUM   EQU   MODELS
LOADPTR  EQU   EDITABLE+8
LOADNAME EQU   EDITABLE
EDITNUM  EQU   EDITLOAD
SORTCORE EQU   SORTCCHR
SORTTIME EQU   SORTKEY+1
SORTYEAR EQU   SORTKEY
EVDAY    EQU   EVSTOP+1
EVYEAR   EQU   EVSTOP
TREPRE   EQU   TREGEN+72
TRECCHF  EQU   TREGEN+68
TRECCHE  EQU   TREGEN+64
TRECCHD  EQU   TREGEN+60
TRECCHC  EQU   TREGEN+56
TRECCHB  EQU   TREGEN+52
TRECCHA  EQU   TREGEN+48
TRECCH9  EQU   TREGEN+44
TRECCH8  EQU   TREGEN+40
TRECCH7  EQU   TREGEN+36
TRECCH6  EQU   TREGEN+32
TRECCH5  EQU   TREGEN+28
TRECCH4  EQU   TREGEN+24
TRECCH3  EQU   TREGEN+20
TRECCH2  EQU   TREGEN+16
TRECCH1  EQU   TREGEN+12
TRECCH0  EQU   TREGEN+8
TREMCH   EQU   TREGEN+4
TREIPL   EQU   TREGEN
TRENUM   EQU   TRENDONE+4
TRENEXT  EQU   TRENDONE
DUMPSIZE EQU   DUMPINFO+4
DUMPADR  EQU   DUMPINFO
DUMPNUM  EQU   DUMPTABL
@NM00010 EQU   PARM+212
RECLNGT1 EQU   PARM+204
ADCPUT   EQU   PARM+144
LINECT   EQU   PARM+120
RECLNGTH EQU   CCHHRLNG+6
@NM00009 EQU   CCHHRLNG+5
USERPGM  EQU   PARM+102
IDTSEC   EQU   IDTIME+3
IDSEC    EQU   IDTIME+2
IDMIN    EQU   IDTIME+1
IDHOUR   EQU   IDTIME
IDASID   EQU   ERRID+4
IDCPU    EQU   ERRID+3
@NM00008 EQU   ERRID+2
IDVALUE  EQU   ERRID
NUMDAYS  EQU   PARM+88
SYSRETRN EQU   @NM00007
NUMIN222 EQU   @NM00006
WRTHRSH  EQU   PARM+69
RDTHRSH  EQU   PARM+66
TERM     EQU   PARM+58
EVSDAY   EQU   STRTDATE+1
EVSYEAR  EQU   STRTDATE
PENSEC2  EQU   ENDTIME2+2
PENMIN2  EQU   ENDTIME2+1
PENHOUR2 EQU   ENDTIME2
PSTSEC2  EQU   STTIME2+2
PSTMIN2  EQU   STTIME2+1
PSTHOUR2 EQU   STTIME2
PENSEC1  EQU   ENDTIME1+2
PENMIN1  EQU   ENDTIME1+1
PENHOUR1 EQU   ENDTIME1
PSTSEC1  EQU   STTIME1+2
PSTMIN1  EQU   STTIME1+1
PSTHOUR1 EQU   STTIME1
@NM00005 EQU   ENDDT+4
PENDY    EQU   PEND+1
PENYR    EQU   PEND
@NM00004 EQU   ENDDATE
@NM00003 EQU   STDT+4
PSTDY    EQU   PSTD+1
PSTYR    EQU   PSTD
@NM00002 EQU   STDATE
YEARNOW  EQU   DATENOW+4
@NM00001 EQU   DATENOW+3
DAYNOW   EQU   DATENOW
CSNAP    EQU   CLOSEIO
CSYSIN   EQU   CLOSEIO
CACCDEV  EQU   CLOSEIO
CSERLOG  EQU   CLOSEIO
CEREPPT  EQU   CLOSEIO
CTOURIST EQU   CLOSEIO
OSNAP    EQU   OPENIO
ODRCTWRK EQU   OPENIO
OSYSIN   EQU   OPENIO
OACCDEV  EQU   OPENIO
OACCIN   EQU   OPENIO
OSERLOG  EQU   OPENIO
OEREPPT  EQU   OPENIO
OTOURIST EQU   OPENIO
PLOGREC  EQU   MISC
ERRORID  EQU   MISC
PSUM     EQU   PRINTES
PEDIT    EQU   PRINTES
PZERO    EQU   MISC
DEBUG63  EQU   DEBUGA+3
DEBUG62  EQU   DEBUGA+3
DEBUG61  EQU   DEBUGA+3
DEBUG60  EQU   DEBUGA+3
DEBUG59  EQU   DEBUGA+3
DEBUG58  EQU   DEBUGA+3
DEBUG57  EQU   DEBUGA+3
DEBUG56  EQU   DEBUGA+3
DEBUG55  EQU   DEBUGA+2
DEBUG54  EQU   DEBUGA+2
DEBUG53  EQU   DEBUGA+2
DEBUG52  EQU   DEBUGA+2
DEBUG51  EQU   DEBUGA+2
DEBUG49  EQU   DEBUGA+2
DEBUG48  EQU   DEBUGA+2
DEBUG47  EQU   DEBUGA+1
DEBUG46  EQU   DEBUGA+1
DEBUG45  EQU   DEBUGA+1
DEBUG44  EQU   DEBUGA+1
DEBUG43  EQU   DEBUGA+1
DEBUG42  EQU   DEBUGA+1
DEBUG41  EQU   DEBUGA+1
DEBUG40  EQU   DEBUGA+1
DEBUG39  EQU   DEBUGA
DEBUG38  EQU   DEBUGA
DEBUG37  EQU   DEBUGA
DEBUG36  EQU   DEBUGA
DEBUG35  EQU   DEBUGA
DEBUG34  EQU   DEBUGA
DEBUG33  EQU   DEBUGA
DEBUG32  EQU   DEBUGA
DEBUG31  EQU   DEBUG+3
DEBUG30  EQU   DEBUG+3
DEBUG29  EQU   DEBUG+3
DEBUG28  EQU   DEBUG+3
DEBUG27  EQU   DEBUG+3
DEBUG26  EQU   DEBUG+3
DEBUG25  EQU   DEBUG+3
DEBUG24  EQU   DEBUG+3
DEBUG22  EQU   DEBUG+2
DEBUG21  EQU   DEBUG+2
DEBUG20  EQU   DEBUG+2
DEBUG19  EQU   DEBUG+2
DEBUG18  EQU   DEBUG+2
DEBUG17  EQU   DEBUG+2
DEBUG15  EQU   DEBUG+1
DEBUG14  EQU   DEBUG+1
DEBUG13  EQU   DEBUG+1
DEBUG12  EQU   DEBUG+1
DEBUG10  EQU   DEBUG+1
DEBUG9   EQU   DEBUG+1
DEBUG8   EQU   DEBUG+1
DEBUG7   EQU   DEBUG
DEBUG6   EQU   DEBUG
DEBUG5   EQU   DEBUG
DEBUG3   EQU   DEBUG
DEBUG2   EQU   DEBUG
DEBUG1   EQU   DEBUG
DEBUG0   EQU   DEBUG
SORTBRK  EQU   SWITCHES+1
COREFAIL EQU   SWITCHES+1
ANALYSIS EQU   SWITCHES+1
NOTALL   EQU   SWITCHES+1
NOSDR    EQU   SWITCHES
TIMESEQ  EQU   SWITCHES
SYSUM    EQU   SWITCHES
PARMTHR  EQU   SWITCHES
TREND    EQU   SWITCHES
SHORTOBR EQU   SWITCHES
PARMMES  EQU   SWITCHES
RDESUM   EQU   SWITCHES
PCCHFRAM EQU   RECTYPE+1
PMCHFRAM EQU   RECTYPE+1
PTTYP    EQU   RECTYPE+1
PEOD     EQU   RECTYPE
PMIH     EQU   RECTYPE
PDDR     EQU   RECTYPE
PIPL     EQU   RECTYPE
PSOFT    EQU   RECTYPE
POBR     EQU   RECTYPE
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00406 EQU   @EL00005
@RC00415 EQU   @RC00413
@RF00432 EQU   @RC00413
@RF00456 EQU   @EL00006
@RC00479 EQU   @RC00474
@RC00591 EQU   @EL00011
@RC00594 EQU   @EL00011
@RC00597 EQU   @EL00011
@RC00603 EQU   @EL00011
@RC00610 EQU   @EL00011
@RC00628 EQU   @EL00011
@RC00635 EQU   @EL00011
@RF00650 EQU   @EL00012
@RF00656 EQU   @EL00012
@RC00658 EQU   @EL00012
@RC00661 EQU   @EL00012
@RC00684 EQU   @EL00012
@RC00665 EQU   @EL00012
@RF00727 EQU   @EL00013
@RF00759 EQU   @RC00757
@RF00774 EQU   @RC00772
@RF00793 EQU   @EL00014
@RF00805 EQU   @EL00015
@RF00817 EQU   @EL00016
@RF00829 EQU   @EL00017
@RC00833 EQU   @EL00018
@RC00839 EQU   @EL00018
@RC00845 EQU   @EL00018
@RC00851 EQU   @EL00018
@RC00857 EQU   @EL00018
@RF00863 EQU   @EL00018
@RF00877 EQU   @EL00019
@RC00875 EQU   @EL00019
@RC00952 EQU   @EL00022
@RF01002 EQU   @RC00993
@RF01070 EQU   @EL00023
@RF01074 EQU   @EL00023
@RC01081 EQU   @EL00024
@RF01136 EQU   @EL00025
@RF01147 EQU   @EL00026
@RC01160 EQU   @EL00027
@RC01166 EQU   @EL00027
@RF01172 EQU   @EL00027
@RC01295 EQU   @RC01293
@RF01313 EQU   @EL00031
@RF01355 EQU   @RC01318
@RF01391 EQU   @EL00033
@RC01404 EQU   @EL00034
@PB00034 EQU   @EL00001
@RF00615 EQU   @RC00610
@RF00670 EQU   @RC00665
@RC01083 EQU   @RC01081
@PB00033 EQU   @PB00034
@RC01406 EQU   @RC01404
@RC01418 EQU   @RC01404
@RF01102 EQU   @RC01083
@PB00032 EQU   @PB00033
@RF01411 EQU   @RC01406
@RC01421 EQU   @RC01418
@PB00031 EQU   @PB00032
@RF01425 EQU   @RC01421
@RF01427 EQU   @RC01421
@RC01429 EQU   @RC01421
@RC01436 EQU   @RC01421
@PB00030 EQU   @PB00031
@PB00029 EQU   @PB00030
@PB00028 EQU   @PB00029
@PB00027 EQU   @PB00028
@PB00026 EQU   @PB00027
@PB00025 EQU   @PB00026
@PB00024 EQU   @PB00025
@PB00023 EQU   @PB00024
@PB00022 EQU   @PB00023
@PB00021 EQU   @PB00022
@PB00020 EQU   @PB00021
@PB00019 EQU   @PB00020
@PB00018 EQU   @PB00019
@PB00017 EQU   @PB00018
@PB00016 EQU   @PB00017
@PB00015 EQU   @PB00016
@PB00014 EQU   @PB00015
@PB00013 EQU   @PB00014
@PB00012 EQU   @PB00013
@PB00011 EQU   @PB00012
@PB00010 EQU   @PB00011
@PB00009 EQU   @PB00010
@PB00008 EQU   @PB00009
@PB00007 EQU   @PB00008
@PB00006 EQU   @PB00007
@PB00005 EQU   @PB00006
@PB00004 EQU   @PB00005
@PB00003 EQU   @PB00004
@PB00002 EQU   @PB00003
@RF00257 EQU   @PB00002
@ENDDATA EQU   *
         END   IFCFILT2
