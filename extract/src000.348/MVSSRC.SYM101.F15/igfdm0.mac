         TITLE 'IGFDM0, DDR/MIH MESSAGE WRITER ROUTINE               '
IGFDM0   CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IGFDM0    73.142'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @08,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@08                                         0001
         L     @00,@SIZDATD                                        0001
         GETMAIN R,LV=(0)
         LR    @09,@01                                             0001
         USING @DATD,@09                                           0001
         ST    @13,@SA00001+4                                      0001
         LM    @00,@01,20(@13)                                     0001
         ST    @09,8(,@13)                                         0001
         LR    @13,@09                                             0001
*/* **************************************************************** */
*                                                                  0123
*/*                                                                  */
*                                                                  0123
*/*            U N I T   C O N T R O L   B L O C K                   */
*                                                                  0123
*/*                                                                  */
*                                                                  0123
*/* **************************************************************** */
*                                                                  0123
*                                                                  0123
*                                                                  0123
*   DO;                             /* ?IGFDERR INIT                 */
*                                                                  0123
*     /***************************************************************/
*     /*                                                             */
*     /* IGFDERR - INITIALIZE RECOVERY ENVIRONMENT                   */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0124
*     DERPLIST=DERPLIST&&DERPLIST;  /* CLEAR PARAMETER LIST          */
         XC    DERPLIST(48),DERPLIST                               0124
*     DERFUNK=DERINIT;              /* INDICATE INIT FUNCTION        */
         MVI   DERFUNK,X'01'                                       0125
*     DERECALL='1'B;                /* INDICATE RECALLABLE MODULE    */
         OI    DERECALL,B'00100000'                                0126
*     DERREC=ADDR(DERRECPM);        /* POINT TO REC PARMS            */
         LA    @12,DERRECPM                                        0127
         ST    @12,DERREC                                          0127
*     DERRETRY=ADDR(IGFDM0R);       /* POINT TO RETRY ROUTINE        */
         LA    @12,IGFDM0R                                         0128
         ST    @12,DERRETRY                                        0128
*     GEN SETS(DERDATD)(MVC DERDATD,@SIZDATD);/* SET UP SPN, SIZE    */
         MVC DERDATD,@SIZDATD
*     DERPFX=DERRMASK;              /* SET UP RUB MASK               */
         MVC   DERPFX(2),@CB00341                                  0130
*     DERRCODE=CODEBASE;            /* SAVE CODEREG                  */
         ST    CODEBASE,DERRCODE                                   0131
*     DERRDATA=DATABASE;            /* SAVE DATAREG                  */
         ST    DATABASE,DERRDATA                                   0132
*     DERRDDR=DDRPTR;               /* SAVE DDRCOM POINTER           */
         ST    DDRPTR,DERRDDR                                      0133
*     DERRSAVE=SAVEPTR;             /* SAVE REGISTER 13              */
         ST    SAVEPTR,DERRSAVE                                    0134
*     CALL IGFDE0(DERPLIST);        /* ISSUE ESTAE                   */
         LA    @12,DERPLIST                                        0135
         ST    @12,@AL00001                                        0135
         L     @15,@CV00073                                        0135
         LA    @01,@AL00001                                        0135
         BALR  @14,@15                                             0135
*   END;                            /* ?IGFDERR INIT                 */
*   DM0IRC=VALID;                   /* INDICATE NO ERRORS YET        */
         SR    @12,@12                                             0137
         LR    DM0IRC,@12                                          0137
*   DERLRC=VALID;                   /* INDICATE INPUT OK SO FAR      */
*                                                                  0138
         STC   @12,DERLRC                                          0138
*   /*****************************************************************/
*   /*                                                               */
*   /* INITIALIZE THE WTO/WTOR PARAMETER LIST                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0139
*   WTORRPL=LENGTH(RPLYAREA);       /* FILL IN REPLY BUFFER LENGTH   */
         MVI   WTORRPL,X'03'                                       0139
*   WTORRPA=ADDR(RPLYAREA);         /* FILL IN REPLY BUFFER ADDRESS  */
         LA    @12,RPLYAREA                                        0140
         STCM  @12,7,WTORRPA                                       0140
*   WTORECB=ADDR(ECB);              /* FILL IN REPLY ECB ADDRESS     */
         LA    @12,ECB                                             0141
         ST    @12,WTORECB                                         0141
*   WTOMK1=MK1INIT;                 /* INITIALIZE WTO FLAG BYTE      */
         MVI   WTOMK1,X'00'                                        0142
*   WTOMCSF=MCSFLAGS;               /* FILL IN MCS FLAGS             */
         MVC   WTOMCSF(2),@CB00046                                 0143
*   RPLYAREA='';                    /* CLEAR REPLY BUFFER            */
         MVI   RPLYAREA,C' '                                       0144
         MVC   RPLYAREA+1(2),RPLYAREA                              0144
*   ECB=0;                          /* CLEAR REPLY ECB               */
         SR    @12,@12                                             0145
         ST    @12,ECB                                             0145
*   WTOPTR=ADDR(WTOMSG1);           /* INITIALIZE WTO TEXT POINTER   */
*                                                                  0146
         LA    WTOPTR,WTOMSG1                                      0146
*   /*****************************************************************/
*   /*                                                               */
*   /* TEST MESSAGE CODE (DDRMSGCD) AND NUMBER OF SUBSTITUTION CODES */
*   /* (DDRMSGPN) FOR VALIDITY                                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0147
*   IF DDRMSGCD<1×DDRMSGCD>IGFDMIND(1)×DDRMSGPN>DIM(DDRMSGPC)/* THE
*                                      MESSAGE CODE MUST BE BETWEEN 1
*                                      AND THE NUMBER OF MESSAGES IN
*                                      THE IGFDMIND ARRAY AND THE  0147
*                                      NUMBER OF SUBSTITUTION CODES
*                                      MUST NOT EXCEED THE SIZE OF 0147
*                                      THE SUBSTITUTION CODE ARRAY   */
*     THEN                          /* MESSAGE CODE OR NUMBER OF   0147
*                                      SUBSTITUTION CODES IS INVALID */
         SR    @12,@12                                             0147
         IC    @12,DDRMSGCD(,DDRPTR)                               0147
         LTR   @12,@12                                             0147
         BNP   @RT00147                                            0147
         L     @11,@CA00107                                        0147
         C     @12,IGFDMIND-IGFDMIND(,@11)                         0147
         BH    @RT00147                                            0147
         CLI   DDRMSGPN(DDRPTR),7                                  0147
         BNH   @RF00147                                            0147
@RT00147 DS    0H                                                  0148
*     DERLRC=INVALID;               /* INDICATE INVALID INPUT DATA   */
         MVI   DERLRC,X'04'                                        0148
*   ELSE                            /* CODES ARE VALID - CONTINUE    */
*     DO;                                                          0149
         B     @RC00147                                            0149
@RF00147 DS    0H                                                  0150
*       SKLPTR=IGFDMIND(DDRMSGCD+1);/* PICK UP ADDRESS OF THE FIRST
*                                      TEXT SEGMENT FOR THE SPECIFIED
*                                      MESSAGE                       */
*                                                                  0150
         SR    @12,@12                                             0150
         IC    @12,DDRMSGCD(,DDRPTR)                               0150
         SLA   @12,2                                               0150
         L     @11,@CA00107                                        0150
         L     SKLPTR,IGFDMIND-IGFDMIND(@12,@11)                   0150
*       /*************************************************************/
*       /*                                                           */
*       /* PROCESS ALL SPECIFIED SUBSTITUTION CODES BY MOVING FIXED  */
*       /* TEXT SEGMENTS AND SUBSTITUTION STRINGS TO THE WTO MESSAGE */
*       /* BUFFER ALTERNATELY                                        */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0151
*       DO SCOUNT=1 TO DDRMSGPN WHILE(DERLRC=VALID);/* PROCESS ALL 0151
*                                      SUBSTITUTION CODES UNLESS AN
*                                      ERROR IS DETECTED             */
         LA    SCOUNT,1                                            0151
         B     @DE00151                                            0151
@DL00151 CLI   DERLRC,0                                            0151
         BNE   @DC00151                                            0151
*         CALL DM0MOVE;             /* MOVE CURRENT TEXT SEGMENT TO
*                                      WTO BUFFER                    */
         BAL   @14,DM0MOVE                                         0152
*         SCODE=DDRMSGPC(SCOUNT);   /* PICK UP NEXT SUBSTITUTION CODE*/
*                                                                  0153
         SR    SCODE,SCODE                                         0153
         IC    SCODE,DDRMSGPC-1(SCOUNT,DDRPTR)                     0153
*         /***********************************************************/
*         /*                                                         */
*         /* TEST SUBSTITUTION CODE FOR VALIDITY                     */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0154
*         IF SCODE=0×SCODE>DIM(DM0SUBS)THEN/* SUBSTITUTION CODE IS 0154
*                                      INVALID                       */
         CH    SCODE,@CH00039                                      0154
         BE    @RT00154                                            0154
         CH    SCODE,@CH00112                                      0154
         BNH   @RF00154                                            0154
@RT00154 DS    0H                                                  0155
*           DERLRC=INVALID;         /* INDICATE INPUT DATA INVALID   */
         MVI   DERLRC,X'04'                                        0155
*         ELSE                      /* CODE IS VALID - PROCESS IT    */
*           DO;                                                    0156
         B     @RC00154                                            0156
@RF00154 DS    0H                                                  0157
*             SUBPTR=DM0SUBS(SCODE);/* PICK UP ADDRESS OF PROPER   0157
*                                      PROCESSING SUBROUTINE         */
         LR    @12,SCODE                                           0157
         SLA   @12,2                                               0157
         L     SUBPTR,DM0SUBS-4(@12)                               0157
*             CALL DM0SUB;          /* PROCESS THE SUBSTITUTION CODE */
         LR    @15,SUBPTR                                          0158
         BALR  @14,@15                                             0158
*             IF DM0IRC=INVALID     /* CHECK FOR AN ERROR CONDITION  */
*               THEN                /* ERROR - DATA NO GOOD          */
         LA    @12,4                                               0159
         CR    DM0IRC,@12                                          0159
         BNE   @RF00159                                            0159
*               DERLRC=INVALID;     /* INDICATE INPUT DATA INVALID   */
         STC   @12,DERLRC                                          0160
*           END;                                                   0161
@RF00159 DS    0H                                                  0162
*       END;                        /* END OF SUBSTITUTION CODE LOOP */
*                                                                  0162
@RC00154 AH    SCOUNT,@CH00089                                     0162
@DE00151 SR    @12,@12                                             0162
         IC    @12,DDRMSGPN(,DDRPTR)                               0162
         CR    SCOUNT,@12                                          0162
         BNH   @DL00151                                            0162
@DC00151 DS    0H                                                  0163
*       /*************************************************************/
*       /*                                                           */
*       /* WERE ALL SUBSTITUTION CODES PROCESSED SUCCESSFULLY        */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0163
*       IF DERLRC=VALID THEN                                       0163
         CLI   DERLRC,0                                            0163
         BNE   @RF00163                                            0163
*         DO;                       /* NO ERRORS - CONTINUE          */
*           CALL DM0MOVE;           /* MOVE LAST MESSAGE TEXT SECTION
*                                      TO WTO MESSAGE BUFFER         */
         BAL   @14,DM0MOVE                                         0165
*           WTOLNG1=WTOPTR-ADDR(WTOMSG1)+LENGTH(WTOMK1)+LENGTH(WTOLNG1)
*               +LENGTH(WTOMCSF);   /* CALCULATE LENGTH OF WTO     0166
*                                      MESSAGE AND PUT INTO WTO    0166
*                                      PARAMETER LIST                */
         LA    @12,WTOMSG1                                         0166
         LCR   @12,@12                                             0166
         AR    @12,WTOPTR                                          0166
         AH    @12,@CH00041                                        0166
         STC   @12,WTOLNG1                                         0166
*           CALL DM0SETCD;          /* ADD DESCRIPTOR AND ROUTING  0167
*                                      CODES TO WTO PARAMETER LIST   */
         BAL   @14,DM0SETCD                                        0167
*           IF DDRMSGOP^=DDRWTOR THEN/* TEST FOR WTOR REQUEST        */
*                                                                  0168
         CLI   DDRMSGOP(DDRPTR),X'01'                              0168
         BE    @RF00168                                            0168
*             /*******************************************************/
*             /*                                                     */
*             /* MESSAGE TO BE WRITTEN - NO REPLY EXPECTED           */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0169
*             DO;                   /* WTOP MF(E,PLSTWTO)            */
*               RFY                                                0170
*                 GPR01P RSTD;      /* RESTRICT REG 1                */
*               GPR01P=ADDR(PLSTWTO);/* ADDRESS CONTROL PROGRAM LIST */
         LA    GPR01P,PLSTWTO                                      0171
*               SVC(35);            /* ISSUE WTO SVC                 */
         SVC   35                                                  0172
*               RFY                                                0173
*                 GPR01P UNRSTD;    /* RELEASE REG 1                 */
*             END;                  /* WTOP MF(E,PLSTWTO)            */
*           ELSE                    /* WTOR REQUEST                  */
*             DO;                                                  0175
*                                                                  0175
         B     @RC00168                                            0175
@RF00168 DS    0H                                                  0176
*               /*****************************************************/
*               /*                                                   */
*               /* MESSAGE TO BE WRITTEN AND REPLY CHECKED           */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0176
*               DO;                 /* WTORP MF(E,PLSTWTOR)          */
*                 RFY                                              0177
*                   GPR01P RSTD;    /* RESTRICT REG 1                */
*                 GPR01P=ADDR(PLSTWTOR);/* ADDRESS CONTROL PROGRAM 0178
*                                      LIST                          */
         LA    GPR01P,PLSTWTOR                                     0178
*                 SVC(35);          /* ISSUE WTOR SVC                */
         SVC   35                                                  0179
*                 RFY                                              0180
*                   GPR01P UNRSTD;  /* RELEASE REG 1                 */
*               END;                /* WTORP MF(E,PLSTWTOR)          */
*               DO;                 /* WAIT ECB(ECB)                 */
*                 RESPECIFY                                        0183
*                  (GPR00P,                                        0183
*                   GPR01P)RESTRICTED;                             0183
*                 GPR00P=1;         /* LOAD WAIT COUNT               */
         LA    GPR00P,1                                            0184
*                 GPR01P=ADDR(ECB); /* ADDRESS OF ECB                */
         LA    GPR01P,ECB                                          0185
*                 SVC(1);           /* WAIT SVC                      */
         SVC   1                                                   0186
*                 RESPECIFY                                        0187
*                  (GPR00P,                                        0187
*                   GPR01P)UNRESTRICTED;                           0187
*               END;                /* WAIT ECB(ECB)                 */
*               RPLYAREA=RPLYAREA×FOLDMASK;/* FOLD LOWER CASE      0189
*                                      CHARACTERS TO UPPER CASE      */
*                                                                  0189
         OC    RPLYAREA(3),@CB00049                                0189
*               /*****************************************************/
*               /*                                                   */
*               /* INDICATE REPLY RECEIVED IN DDRCOM FIELDS          */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0190
*               IF RPLYAREA='YES'&DDRTOUCB^=0/* TEST FOR REPLY OF  0190
*                                      'YES' IF APPLICABLE           */
*                 THEN              /* 'YES' WAS SPECIFIED           */
         CLC   RPLYAREA(3),@CC00641                                0190
         BNE   @RF00190                                            0190
         ICM   @12,15,DDRTOUCB(DDRPTR)                             0190
         BZ    @RF00190                                            0190
*                 DDRMSGOP=DDRYES;  /* INDICATE REPLY WAS 'YES'      */
         MVI   DDRMSGOP(DDRPTR),X'02'                              0191
*               ELSE                /* TRY AGAIN                     */
*                 IF RPLYAREA(1:2)='NO'/* WAS REPLY 'NO'             */
*                   THEN            /* YES, 'NO' WAS SPECIFIED       */
         B     @RC00190                                            0192
@RF00190 CLC   RPLYAREA(2),@CC00642                                0192
         BNE   @RF00192                                            0192
*                   DDRMSGOP=DDRNO; /* INDICATE REPLY WAS 'NO'       */
         MVI   DDRMSGOP(DDRPTR),X'03'                              0193
*                 ELSE              /* NO - REPLY WAS CUA (OR 'YES'
*                                      WHEN 'YES' WAS NOT A GIVEN  0194
*                                      CHOICE - PRETEND THAT IT IS A
*                                      CUA - WILL BE REJECTED LATER  */
*                   DO;                                            0194
         B     @RC00192                                            0194
@RF00192 DS    0H                                                  0195
*                     DDRMSGOP=DDRCUA;/* INDICATE REPLY WAS CUA      */
         MVI   DDRMSGOP(DDRPTR),X'04'                              0195
*                     DDRTOCUA=RPLYAREA;/* PUT CUA INTO DDRCOM       */
         MVC   DDRTOCUA(3,DDRPTR),RPLYAREA                         0196
*                   END;                                           0197
*             END;                                                 0198
@RC00192 DS    0H                                                  0198
@RC00190 DS    0H                                                  0199
*         END;                                                     0199
@RC00168 DS    0H                                                  0200
*     END;                                                         0200
@RF00163 DS    0H                                                  0201
*IGFDM0R:                           /* ESTAE RETRY ENTRY POINT       */
*   DO;                             /* ?IGFDERR CANCEL               */
*                                                                  0201
@RC00147 DS    0H                                                  0201
IGFDM0R  DS    0H                                                  0202
*     /***************************************************************/
*     /*                                                             */
*     /* IGFDERR - CANCEL RECOVERY ENVIRONMENT                       */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0202
*     DERFUNK=DERCANC;              /* INDICATE CANCEL               */
         MVI   DERFUNK,X'02'                                       0202
*     CALL IGFDE0(DERPLIST);        /* CANCEL ESTAE                  */
         LA    @12,DERPLIST                                        0203
         ST    @12,@AL00001                                        0203
         L     @15,@CV00073                                        0203
         LA    @01,@AL00001                                        0203
         BALR  @14,@15                                             0203
*   END;                            /* ?IGFDERR CANCEL               */
*   RETURN CODE(DERLRC);            /* RETURN TO CALLER              */
         SR    @12,@12                                             0205
         IC    @12,DERLRC                                          0205
         L     @13,4(,@13)                                         0205
         L     @00,@SIZDATD                                        0205
         LR    @01,@09                                             0205
         FREEMAIN R,LV=(0),A=(1)
         LR    @15,@12                                             0205
         L     @14,12(,@13)                                        0205
         LM    @00,@12,20(@13)                                     0205
         BR    @14                                                 0205
*   GEN NOREFS NOSETS(EJECT);                                      0206
*                                                                  0206
         EJECT
*   /*****************************************************************/
*   /*                                                               */
*   /* SUBROUTINE DM0MOVE - COPIES A TEXT SEGMENT TO WTO BUFFER      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0207
*DM0MOVE:                           /* SUBROUTINE ENTRY POINT        */
*   PROCEDURE;                      /* START OF INTERNAL PROCEDURE   */
*                                                                  0207
         B     @PB00002                                            0207
DM0MOVE  STM   @14,@01,12(@13)                                     0207
         STM   @04,@12,36(@13)                                     0207
*   /*****************************************************************/
*   /*                                                               */
*   /* MOVE THE NEXT TEXT SEGMENT TO THE WTO MESSAGE BUFFER ONLY IF  */
*   /* THE TEXT SEGMENT HAS A LENGTH OF AT LEAST ONE BYTE            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0208
*   IF SKLCOUNT>0 THEN              /* ANY DATA TO MOVE              */
         CLI   SKLCOUNT(SKLPTR),0                                  0208
         BNH   @RF00208                                            0208
*     WTOTXT(1:SKLCOUNT)=SKLTEXT(1:SKLCOUNT);/* MOVE THE TEXT SEGMENT
*                                      TO THE WTO BUFFER             */
*                                                                  0209
         SR    @12,@12                                             0209
         IC    @12,SKLCOUNT(,SKLPTR)                               0209
         BCTR  @12,0                                               0209
         EX    @12,@SM00699                                        0209
*   /*****************************************************************/
*   /*                                                               */
*   /* UPDATE THE SKELETON POINTER AND THE WTO BUFFER POINTER        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0210
*   WTOPTR=WTOPTR+SKLCOUNT;         /* POINT TO NEXT AVAILABLE BYTE  */
@RF00208 SR    @12,@12                                             0210
         IC    @12,SKLCOUNT(,SKLPTR)                               0210
         AR    WTOPTR,@12                                          0210
*   SKLPTR=SKLPTR+SKLCOUNT+LENGTH(SKLCOUNT);/* POINT TO START OF NEXT
*                                      TEXT SEGMENT                  */
         AR    @12,SKLPTR                                          0211
         AH    @12,@CH00089                                        0211
         LR    SKLPTR,@12                                          0211
*   RETURN;                         /* RETURN TO CALLER              */
@EL00002 DS    0H                                                  0212
@EF00002 DS    0H                                                  0212
@ER00002 LM    @14,@01,12(@13)                                     0212
         LM    @04,@12,36(@13)                                     0212
         BR    @14                                                 0212
*   END DM0MOVE;                    /* END OF INTERNAL PROCEDURE     */
         B     @EL00002                                            0213
@PB00002 DS    0H                                                  0214
*   GEN NOREFS NOSETS(EJECT);                                      0214
*                                                                  0214
         EJECT
*   /*****************************************************************/
*   /*                                                               */
*   /* SUBROUTINE DM0NOOP - DUMMY SUBROUTINE TO ALLOW NO SUBSTITUTION*/
*   /* TO BE PERFORMED                                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0215
*DM0NOOP:                           /* SUBROUTINE ENTRY POINT        */
*   PROCEDURE OPTIONS(NOSAVE);                                     0215
         B     @PB00003                                            0215
DM0NOOP  DS    0H                                                  0216
*   RETURN;                         /* RETURN TO CALLER              */
@EL00003 DS    0H                                                  0216
@EF00003 DS    0H                                                  0216
@ER00003 BR    @14                                                 0216
*   END DM0NOOP;                    /* END OF INTERNAL PROCEDURE     */
         B     @EL00003                                            0217
@PB00003 DS    0H                                                  0218
*   GEN NOREFS NOSETS(EJECT);                                      0218
*                                                                  0218
         EJECT
*   /*****************************************************************/
*   /*                                                               */
*   /* SUBROUTINE DM0FMCUA - MOVES THE 'FROM' CUA FROM THE DDRCOM TO */
*   /* THE WTO MESSAGE BUFFER                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0219
*DM0FMCUA:                          /* SUBROUTINE ENTRY POINT        */
*   PROCEDURE;                                                     0219
         B     @PB00004                                            0219
DM0FMCUA STM   @14,@01,12(@13)                                     0219
         STM   @03,@12,32(@13)                                     0219
*   WTOTXT(1:LENGTH(DDRFMCUA))=DDRFMCUA;/* COPY CUA TO BUFFER        */
         MVC   WTOTXT(3,WTOPTR),DDRFMCUA(DDRPTR)                   0220
*   WTOPTR=WTOPTR+LENGTH(DDRFMCUA); /* POINT TO NEXT AVAILABLE BYTE
*                                      IN WTO BUFFER                 */
         AH    WTOPTR,@CH00080                                     0221
*   RETURN;                         /* RETURN TO CALLER              */
@EL00004 DS    0H                                                  0222
@EF00004 DS    0H                                                  0222
@ER00004 LM    @14,@01,12(@13)                                     0222
         LM    @03,@12,32(@13)                                     0222
         BR    @14                                                 0222
*   END DM0FMCUA;                   /* END OF INTERNAL PROCEDURE     */
         B     @EL00004                                            0223
@PB00004 DS    0H                                                  0224
*   GEN NOREFS NOSETS(EJECT);                                      0224
*                                                                  0224
         EJECT
*   /*****************************************************************/
*   /*                                                               */
*   /* SUBROUTINE DM0TOCUA - MOVES THE 'TO' CUA FROM THE DDRCOM TO   */
*   /* THE WTO MESSAGE BUFFER                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0225
*DM0TOCUA:                          /* SUBROUTINE ENTRY POINT        */
*   PROCEDURE;                                                     0225
         B     @PB00005                                            0225
DM0TOCUA STM   @14,@01,12(@13)                                     0225
         STM   @03,@12,32(@13)                                     0225
*   WTOTXT(1:LENGTH(DDRTOCUA))=DDRTOCUA;/* COPY CUA TO BUFFER        */
         MVC   WTOTXT(3,WTOPTR),DDRTOCUA(DDRPTR)                   0226
*   WTOPTR=WTOPTR+LENGTH(DDRTOCUA); /* POINT TO NEXT AVAILABLE BYTE
*                                      IN WTO BUFFER                 */
         AH    WTOPTR,@CH00080                                     0227
*   RETURN;                         /* RETURN TO CALLER              */
@EL00005 DS    0H                                                  0228
@EF00005 DS    0H                                                  0228
@ER00005 LM    @14,@01,12(@13)                                     0228
         LM    @03,@12,32(@13)                                     0228
         BR    @14                                                 0228
*   END DM0TOCUA;                   /* END OF INTERNAL PROCEDURE     */
         B     @EL00005                                            0229
@PB00005 DS    0H                                                  0230
*   GEN NOREFS NOSETS(EJECT);                                      0230
*                                                                  0230
         EJECT
*   /*****************************************************************/
*   /*                                                               */
*   /* SUBROUTINE DM0VOLID - MOVES THE VOLUME SERIAL NUMBER FROM THE */
*   /* 'FROM' UCB TO THE WTO MESSAGE BUFFER                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0231
*DM0VOLID:                          /* SUBROUTINE ENTRY POINT        */
*   PROCEDURE;                                                     0231
         B     @PB00006                                            0231
DM0VOLID STM   @14,@01,12(@13)                                     0231
         STM   @03,@12,32(@13)                                     0231
*   WTOTXT(1:LENGTH(UCBVOLI))=UCBVOLI;/* MOVE THE VOLUME SERIAL    0232
*                                      NUMBER TO THE BUFFER          */
         L     @12,UCBPTR(,DDRPTR)                                 0232
         MVC   WTOTXT(6,WTOPTR),UCBVOLI(@12)                       0232
*   WTOPTR=WTOPTR+LENGTH(UCBVOLI);  /* POINT TO NEXT AVAILABLE BYTE
*                                      IN WTO BUFFER                 */
         AH    WTOPTR,@CH00486                                     0233
*   RETURN;                         /* RETURN TO CALLER              */
@EL00006 DS    0H                                                  0234
@EF00006 DS    0H                                                  0234
@ER00006 LM    @14,@01,12(@13)                                     0234
         LM    @03,@12,32(@13)                                     0234
         BR    @14                                                 0234
*   END DM0VOLID;                   /* END OF INTERNAL PROCEDURE     */
         B     @EL00006                                            0235
@PB00006 DS    0H                                                  0236
*   GEN NOREFS NOSETS(EJECT);                                      0236
*                                                                  0236
         EJECT
*   /*****************************************************************/
*   /*                                                               */
*   /* SUBROUTINE DM0LABTP - MOVES AN INDICATION OF THE LABEL TYPE TO*/
*   /* THE WTO MESSAGE BUFFER BASED ON FLAGS IN THE DDRCOM           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0237
*DM0LABTP:                          /* SUBROUTINE ENTRY POINT        */
*   PROCEDURE;                                                     0237
         B     @PB00007                                            0237
DM0LABTP STM   @14,@01,12(@13)                                     0237
         STM   @03,@12,32(@13)                                     0237
*   IF DDRLAL='1'B THEN             /* IS IT USASCII LABEL           */
         TM    DDRLAL(DDRPTR),B'10000000'                          0238
         BNO   @RF00238                                            0238
*     WTOTXT(1:3)='AL ';            /* YES, INDICATE 'AL'            */
         MVC   WTOTXT(3,WTOPTR),@CC00662                           0239
*   ELSE                            /* NO, TRY AGAIN                 */
*     IF DDRLNL='1'B THEN           /* IS IT NON-LABELED             */
         B     @RC00238                                            0240
@RF00238 TM    DDRLNL(DDRPTR),B'00100000'                          0240
         BNO   @RF00240                                            0240
*       WTOTXT(1:3)='NL ';          /* YES, INDICATE 'NL'            */
         MVC   WTOTXT(3,WTOPTR),@CC00663                           0241
*     ELSE                          /* NO, TRY AGAIN                 */
*       IF DDRLSD='1'B THEN         /* IS IT STANDARD LABEL          */
         B     @RC00240                                            0242
@RF00240 TM    DDRLSD(DDRPTR),B'00001000'                          0242
         BNO   @RF00242                                            0242
*         WTOTXT(1:3)='SL ';        /* YES, INDICATE 'SL'            */
         MVC   WTOTXT(3,WTOPTR),@CC00664                           0243
*       ELSE                        /* NO, TRY AGAIN                 */
*         IF DDRLBLP='1'B THEN      /* IS IT BYPASS LABEL PROCESSING */
         B     @RC00242                                            0244
@RF00242 TM    DDRLBLP(DDRPTR),B'01000000'                         0244
         BNO   @RF00244                                            0244
*           WTOTXT(1:3)='BLP';      /* YES, INDICATE 'BLP'           */
         MVC   WTOTXT(3,WTOPTR),@CC00665                           0245
*         ELSE                      /* NO, TRY AGAIN                 */
*           IF DDRLNSL='1'B THEN    /* IS IT NON-STANDARD LABEL      */
         B     @RC00244                                            0246
@RF00244 TM    DDRLNSL(DDRPTR),B'00010000'                         0246
         BNO   @RF00246                                            0246
*             WTOTXT(1:3)='NSL';    /* YES, INDICATE 'NSL'           */
         MVC   WTOTXT(3,WTOPTR),@CC00666                           0247
*           ELSE                    /* NOT VALID LABEL TYPE          */
*             WTOTXT(1:3)='';       /* BLANK OUT LABEL TYPE FIELD    */
         B     @RC00246                                            0248
@RF00246 MVI   WTOTXT(WTOPTR),C' '                                 0248
         MVC   WTOTXT+1(2,WTOPTR),WTOTXT(WTOPTR)                   0248
*   WTOPTR=WTOPTR+3;                /* POINT TO NEXT AVAILABLE BYTE
*                                      IN WTO MESSAGE BUFFER         */
@RC00246 DS    0H                                                  0249
@RC00244 DS    0H                                                  0249
@RC00242 DS    0H                                                  0249
@RC00240 DS    0H                                                  0249
@RC00238 AH    WTOPTR,@CH00080                                     0249
*   RETURN;                         /* RETURN TO CALLER              */
@EL00007 DS    0H                                                  0250
@EF00007 DS    0H                                                  0250
@ER00007 LM    @14,@01,12(@13)                                     0250
         LM    @03,@12,32(@13)                                     0250
         BR    @14                                                 0250
*   END DM0LABTP;                   /* END OF INTERNAL PROCEDURE     */
         B     @EL00007                                            0251
@PB00007 DS    0H                                                  0252
*   GEN NOREFS NOSETS(EJECT);                                      0252
*                                                                  0252
         EJECT
*   /*****************************************************************/
*   /*                                                               */
*   /* SUBROUTINE DM0SEQNO - MOVE VOLUME SEQUENCE NUMBER TO WTO      */
*   /* MESSAGE BUFFER                                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0253
*DM0SEQNO:                          /* SUBROUTINE ENTRY POINT        */
*   PROCEDURE;                                                     0253
*                                                                  0253
         B     @PB00008                                            0253
DM0SEQNO STM   @14,@01,12(@13)                                     0253
         STM   @03,@12,32(@13)                                     0253
*   /*****************************************************************/
*   /*                                                               */
*   /* CONVERT VOLUME SEQUENCE NUMBER TO DECIMAL IN THE WTO BUFFER   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0254
*   CVD(UCBFSEQ,CVDAREA);           /* CONVERT FROM BINARY TO PACKED
*                                      DECIMAL                       */
         L     @12,UCBPTR(,DDRPTR)                                 0254
         LH    @12,UCBFSEQ(,@12)                                   0254
         CVD   @12,@TS00001                                        0254
         MVC   CVDAREA(2),@TS00001+6                               0254
*   UNPK(WTOTXT(1:2),CVDAREA);      /* CONVERT FROM PACKED DECIMAL TO
*                                      UNPACKED DECIMAL              */
         UNPK  WTOTXT(2,WTOPTR),CVDAREA(2)                         0255
*   WTOTXT(2:2)=WTOTXT(2:2)×NUMMASK;/* FIX UP ZONE OF LAST DIGIT     */
         OI    WTOTXT+1(WTOPTR),X'F0'                              0256
*   WTOPTR=WTOPTR+2;                /* POINT TO NEXT AVAILABLE BYTE
*                                      IN WTO MESSAGE BUFFER         */
         AH    WTOPTR,@CH00078                                     0257
*   RETURN;                         /* RETURN TO CALLER              */
@EL00008 DS    0H                                                  0258
@EF00008 DS    0H                                                  0258
@ER00008 LM    @14,@01,12(@13)                                     0258
         LM    @03,@12,32(@13)                                     0258
         BR    @14                                                 0258
*   END DM0SEQNO;                   /* END OF INTERNAL PROCEDURE     */
         B     @EL00008                                            0259
@PB00008 DS    0H                                                  0260
*   GEN NOREFS NOSETS(EJECT);                                      0260
*                                                                  0260
         EJECT
*   /*****************************************************************/
*   /*                                                               */
*   /* SUBROUTINE DM0DEVCE - MOVES THE CHARACTER STRING 'DEVICE, ' TO*/
*   /* THE WTO MESSAGE BUFFER                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0261
*DM0DEVCE:                          /* SUBROUTINE ENTRY POINT        */
*   PROCEDURE;                                                     0261
         B     @PB00009                                            0261
DM0DEVCE STM   @14,@01,12(@13)                                     0261
         STM   @03,@12,32(@13)                                     0261
*   WTOTXT(1:LENGTH(SEGDEVCE))=SEGDEVCE;/* MOVE TEXT TO BUFFER       */
         MVC   WTOTXT(8,WTOPTR),@CC00059                           0262
*   WTOPTR=WTOPTR+LENGTH(SEGDEVCE); /* POINT TO NEXT AVAILABLE BYTE
*                                      IN WTO MESSAGE BUFFER         */
         AH    WTOPTR,@CH00038                                     0263
*   RETURN;                         /* RETURN TO CALLER              */
@EL00009 DS    0H                                                  0264
@EF00009 DS    0H                                                  0264
@ER00009 LM    @14,@01,12(@13)                                     0264
         LM    @03,@12,32(@13)                                     0264
         BR    @14                                                 0264
*   END DM0DEVCE;                   /* END OF INTERNAL PROCEDURE     */
         B     @EL00009                                            0265
@PB00009 DS    0H                                                  0266
*   GEN NOREFS NOSETS(EJECT);                                      0266
*                                                                  0266
         EJECT
*   /*****************************************************************/
*   /*                                                               */
*   /* SUBROUTINE DM0RESON - MOVES THE DDR ACTIVATION REASON CODE TO */
*   /* WTO MESSAGE BUFFER                                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0267
*DM0RESON:                          /* SUBROUTINE ENTRY POINT        */
*   PROCEDURE;                                                     0267
         B     @PB00010                                            0267
DM0RESON STM   @14,@01,12(@13)                                     0267
         STM   @03,@12,32(@13)                                     0267
*   IF DDRPAGE='1'B THEN            /* IS THIS A SYSTEM INITIATED  0268
*                                      SWAP FOR A PAGING I/O ERROR   */
         TM    DDRPAGE(DDRPTR),B'00100000'                         0268
         BNO   @RF00268                                            0268
*     DO;                           /* YES, INDICATE PAGING ERROR    */
*       WTOTXT(1:LENGTH(SEGPGIO))=SEGPGIO;/* MOVE TEXT TO BUFFER     */
         MVC   WTOTXT(16,WTOPTR),@CC00063                          0270
*       WTOPTR=WTOPTR+LENGTH(SEGPGIO);/* POINT TO NEXT BYTE IN MSG   */
         AH    WTOPTR,@CH00045                                     0271
*     END;                                                         0272
*   ELSE                            /* NO, TRY NEXT POSSIBILITY      */
*     IF DDRSYS='1'B THEN           /* IS THIS A SYSTEM SWAP         */
         B     @RC00268                                            0273
@RF00268 TM    DDRSYS(DDRPTR),B'01000000'                          0273
         BNO   @RF00273                                            0273
*       DO;                         /* YES, INDICATE I/O ERROR       */
*         WTOTXT(1:LENGTH(SEGIOERR))=SEGIOERR;/* MOVE TEXT TO BUFFER */
         MVC   WTOTXT(9,WTOPTR),@CC00067                           0275
*         WTOPTR=WTOPTR+LENGTH(SEGIOERR);/* UPDATE BUFFER POINTER    */
         AH    WTOPTR,@CH00066                                     0276
*       END;                                                       0277
*     ELSE                          /* NO, TRY AGAIN                 */
*       IF DDROPER='1'B THEN        /* IS THIS AN OPERATOR SWAP      */
         B     @RC00273                                            0278
@RF00273 TM    DDROPER(DDRPTR),B'10000000'                         0278
         BNO   @RF00278                                            0278
*         DO;                       /* YES, INDICATE OPERATOR SWAP   */
*           WTOTXT(1:LENGTH(SEGOPER))=SEGOPER;/* MOVE TEXT TO BUFR   */
         MVC   WTOTXT(8,WTOPTR),@CC00061                           0280
*           WTOPTR=WTOPTR+LENGTH(SEGOPER);/* UPDATE BUFFER POINTER   */
         AH    WTOPTR,@CH00038                                     0281
*         END;                                                     0282
*       ELSE                                                       0283
*         ;                         /* CANNOT OCCUR - IF NOT OPERATOR
*                                      OR SYSTEM SWAP, THERE IS NO 0283
*                                      DDR ACTIVATION REASON CODE    */
@RF00278 DS    0H                                                  0284
*   RETURN;                         /* RETURN TO CALLER              */
@EL00010 DS    0H                                                  0284
@EF00010 DS    0H                                                  0284
@ER00010 LM    @14,@01,12(@13)                                     0284
         LM    @03,@12,32(@13)                                     0284
         BR    @14                                                 0284
*   END DM0RESON;                   /* END OF INTERNAL PROCEDURE     */
         B     @EL00010                                            0285
@PB00010 DS    0H                                                  0286
*   GEN NOREFS NOSETS(EJECT);                                      0286
*                                                                  0286
         EJECT
*   /*****************************************************************/
*   /*                                                               */
*   /* SUBROUTINE DM0SETCD - MOVES DESCRIPTOR AND ROUTING CODES TO   */
*   /* WTO MESSAGE BUFFER                                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0287
*DM0SETCD:                          /* SUBROUTINE ENTRY POINT        */
*   PROCEDURE;                                                     0287
         B     @PB00011                                            0287
DM0SETCD STM   @14,@12,12(@13)                                     0287
*   WTODESC=SKLDESC;                /* MOVE DESCRIPTOR CODE TO BUFFER*/
         MVC   WTODESC(2,WTOPTR),SKLDESC(SKLPTR)                   0288
*   WTOROUT=SKLROUT;                /* MOVE BASIC ROUTING CODE TO  0289
*                                      BUFFER - INDICATES MASTER   0289
*                                      CONSOLE                       */
*                                                                  0289
         MVC   WTOROUT(2,WTOPTR),SKLROUT(SKLPTR)                   0289
*   /*****************************************************************/
*   /*                                                               */
*   /* ADD PROPER ROUTING CODES FOR THE APPROPRIATE DEVICE POOL      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0290
*   IF DDRMT='1'B THEN              /* IS IT A TAPE SWAP             */
         TM    DDRMT(DDRPTR),B'00100000'                           0290
         BNO   @RF00290                                            0290
*     WTOROUT=WTOROUT×MTROUT;       /* ADD TAPE ROUTING CODES        */
         OC    WTOROUT(2,WTOPTR),@CB00053                          0291
*   ELSE                                                           0292
*     IF DDRDA='1'B THEN            /* IS IT A DISK SWAP             */
         B     @RC00290                                            0292
@RF00290 TM    DDRDA(DDRPTR),B'01000000'                           0292
         BNO   @RF00292                                            0292
*       WTOROUT=WTOROUT×DAROUT;     /* ADD DIRECT ACCESS ROUTING CODE*/
         OC    WTOROUT(2,WTOPTR),@CB00055                          0293
*     ELSE                                                         0294
*       IF DDRUR='1'B THEN          /* IS IT A UNIT RECORD SWAP      */
         B     @RC00292                                            0294
@RF00292 TM    DDRUR(DDRPTR),B'00010000'                           0294
         BNO   @RF00294                                            0294
*         WTOROUT=WTOROUT×URROUT;   /* ADD UNIT RECORD ROUTING CODE  */
         OC    WTOROUT(2,WTOPTR),@CB00057                          0295
*   RETURN;                         /* RETURN TO CALLER              */
@EL00011 DS    0H                                                  0296
@EF00011 DS    0H                                                  0296
@ER00011 LM    @14,@12,12(@13)                                     0296
         BR    @14                                                 0296
*   END DM0SETCD;                   /* END OF INTERNAL PROCEDURE     */
         B     @EL00011                                            0297
@PB00011 DS    0H                                                  0298
*   GEN NOREFS NOSETS(EJECT);                                      0298
*                                                                  0298
         EJECT
*   /*****************************************************************/
*   /*                                                               */
*   /* SUBROUTINE DM0TERCD - MOVES SPECIFIED TERMINATION CODE TO WTO */
*   /* MESSAGE BUFFER                                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0299
*DM0TERCD:                          /* SUBROUTINE ENTRY POINT        */
*   PROCEDURE;                      /* START OF INTERNAL PROCEDURE   */
*                                                                  0299
         B     @PB00012                                            0299
DM0TERCD STM   @14,@01,@SA00012+12                                 0299
         ST    @04,@SA00012+36                                     0299
         STM   @06,@12,@SA00012+44                                 0299
*   /*****************************************************************/
*   /*                                                               */
*   /* VALIDATE SPECIFIED TERMINATION CODE                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0300
*   IF DDRTER1=0×DDRTER1>IGFDTIND(1)THEN/* IS TERMINATION CODE VALID */
         SR    @12,@12                                             0300
         IC    @12,DDRTER1(,DDRPTR)                                0300
         LTR   @12,@12                                             0300
         BZ    @RT00300                                            0300
         L     @11,@CA00108                                        0300
         C     @12,IGFDTIND-IGFDTIND(,@11)                         0300
         BNH   @RF00300                                            0300
@RT00300 DS    0H                                                  0301
*     DM0IRC=INVALID;               /* NO, INDICATE INVALID CODE     */
         LA    DM0IRC,4                                            0301
*   ELSE                            /* YES, PROCESS CODE             */
*     DO;                                                          0302
*                                                                  0302
         B     @RC00300                                            0302
@RF00300 DS    0H                                                  0303
*       /*************************************************************/
*       /*                                                           */
*       /* MOVE THE APPROPRIATE CHARACTER STRING TO THE WTO BUFFER   */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0303
*       SAVESKLP=SKLPTR;            /* SAVE CURRENT MESSAGE TEXT   0303
*                                      SEGMENT ADDRESS               */
         LR    SAVESKLP,SKLPTR                                     0303
*       SKLPTR=IGFDTIND(DDRTER1+1); /* POINT TO TERMINATION CODE TEXT
*                                      SEGMENT                       */
         SR    @12,@12                                             0304
         IC    @12,DDRTER1(,DDRPTR)                                0304
         SLA   @12,2                                               0304
         L     @11,@CA00108                                        0304
         L     SKLPTR,IGFDTIND-IGFDTIND(@12,@11)                   0304
*       CALL DM0MOVE;               /* MOVE TERMINATION CODE TEXT TO
*                                      WTO MESSAGE BUFFER            */
         BAL   @14,DM0MOVE                                         0305
*       SKLPTR=SAVESKLP;            /* RESTORE CURRENT MESSAGE TEXT
*                                      SEGMENT ADDRESS               */
         LR    SKLPTR,SAVESKLP                                     0306
*     END;                                                         0307
*   RETURN;                         /* RETURN TO CALLER              */
@EL00012 DS    0H                                                  0308
@EF00012 DS    0H                                                  0308
@ER00012 LM    @14,@01,@SA00012+12                                 0308
         L     @04,@SA00012+36                                     0308
         LM    @06,@12,@SA00012+44                                 0308
         BR    @14                                                 0308
*   END DM0TERCD;                   /* END OF INTERNAL PROCEDURE     */
         B     @EL00012                                            0309
@PB00012 DS    0H                                                  0310
*   GEN NOREFS NOSETS(EJECT);                                      0310
*                                                                  0310
         EJECT
*   /*****************************************************************/
*   /*                                                               */
*   /* SUBROUTINE DM0MIHCD - MOVES SPECIFIED MIH CODE TO WTO MESSAGE */
*   /* BUFFER                                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0311
*DM0MIHCD:                          /* SUBROUTINE ENTRY POINT        */
*   PROCEDURE;                                                     0311
*                                                                  0311
         B     @PB00013                                            0311
DM0MIHCD STM   @14,@01,@SA00013+12                                 0311
         ST    @04,@SA00013+36                                     0311
         STM   @06,@12,@SA00013+44                                 0311
*   /*****************************************************************/
*   /*                                                               */
*   /* VALIDATE SPECIFIED MIH CODE                                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0312
*   IF DDRMIH=0×DDRMIH>IGFDHIND(1)THEN/* IS MIH CODE VALID           */
         SR    @12,@12                                             0312
         IC    @12,DDRMIH(,DDRPTR)                                 0312
         LTR   @12,@12                                             0312
         BZ    @RT00312                                            0312
         L     @11,@CA00110                                        0312
         C     @12,IGFDHIND-IGFDHIND(,@11)                         0312
         BNH   @RF00312                                            0312
@RT00312 DS    0H                                                  0313
*     DM0IRC=INVALID;               /* NO, INDICATE INVALID CODE     */
         LA    DM0IRC,4                                            0313
*   ELSE                            /* YES, PROCESS CODE             */
*     DO;                                                          0314
*                                                                  0314
         B     @RC00312                                            0314
@RF00312 DS    0H                                                  0315
*       /*************************************************************/
*       /*                                                           */
*       /* MOVE THE APPROPRIATE CHARACTER STRING TO THE WTO BUFFER   */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0315
*       SAVESKLP=SKLPTR;            /* SAVE CURRENT MESSAGE TEXT   0315
*                                      SEGMENT ADDRESS               */
         LR    SAVESKLP,SKLPTR                                     0315
*       SKLPTR=IGFDHIND(DDRMIH+1);  /* POINT TO MIH CODE TEXT SEGMENT*/
         SR    @12,@12                                             0316
         IC    @12,DDRMIH(,DDRPTR)                                 0316
         SLA   @12,2                                               0316
         L     @11,@CA00110                                        0316
         L     SKLPTR,IGFDHIND-IGFDHIND(@12,@11)                   0316
*       CALL DM0MOVE;               /* MOVE MIH CODE TEXT SEGMENT TO
*                                      WTO MESSAGE BUFFER            */
         BAL   @14,DM0MOVE                                         0317
*       SKLPTR=SAVESKLP;            /* RESTORE CURRENT MESSAGE TEXT
*                                      SEGMENT ADDRESS               */
         LR    SKLPTR,SAVESKLP                                     0318
*     END;                                                         0319
*   RETURN;                         /* RETURN TO CALLER              */
@EL00013 DS    0H                                                  0320
@EF00013 DS    0H                                                  0320
@ER00013 LM    @14,@01,@SA00013+12                                 0320
         L     @04,@SA00013+36                                     0320
         LM    @06,@12,@SA00013+44                                 0320
         BR    @14                                                 0320
*   END DM0MIHCD;                   /* END OF INTERNAL PROCEDURE     */
         B     @EL00013                                            0321
@PB00013 DS    0H                                                  0322
*   GEN NOREFS NOSETS(EJECT);                                      0322
*                                                                  0322
         EJECT
*   /*****************************************************************/
*   /*                                                               */
*   /* SUBROUTINE DM0INVCD - MOVES SPECIFIED INVALID DEVICE CODE TO  */
*   /* WTO MESSAGE BUFFER                                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0323
*DM0INVCD:                          /* SUBROUTINE ENTRY POINT        */
*   PROCEDURE;                                                     0323
*                                                                  0323
         B     @PB00014                                            0323
DM0INVCD STM   @14,@01,@SA00014+12                                 0323
         ST    @04,@SA00014+36                                     0323
         STM   @06,@12,@SA00014+44                                 0323
*   /*****************************************************************/
*   /*                                                               */
*   /* VALIDATE THE SPECIFIED INVALID DEVICE CODE                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0324
*   IF DDRINV1=0×DDRINV1>IGFDIIND(1)THEN/* IS CODE VALID             */
         SR    @12,@12                                             0324
         IC    @12,DDRINV1(,DDRPTR)                                0324
         LTR   @12,@12                                             0324
         BZ    @RT00324                                            0324
         L     @11,@CA00109                                        0324
         C     @12,IGFDIIND-IGFDIIND(,@11)                         0324
         BNH   @RF00324                                            0324
@RT00324 DS    0H                                                  0325
*     DM0IRC=INVALID;               /* NO, INDICATE INVALID CODE     */
         LA    DM0IRC,4                                            0325
*   ELSE                            /* YES, PROCESS CODE             */
*     DO;                                                          0326
*                                                                  0326
         B     @RC00324                                            0326
@RF00324 DS    0H                                                  0327
*       /*************************************************************/
*       /*                                                           */
*       /* MOVE THE APPROPRIATE CHARACTER STRING TO THE WTO BUFFER   */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0327
*       SAVESKLP=SKLPTR;            /* SAVE CURRENT MESSAGE TEXT   0327
*                                      SEGMENT ADDRESS               */
         LR    SAVESKLP,SKLPTR                                     0327
*       SKLPTR=IGFDIIND(DDRINV1+1); /* POINT TO INVALID DEVICE CODE
*                                      TEXT SEGMENT                  */
         SR    @12,@12                                             0328
         IC    @12,DDRINV1(,DDRPTR)                                0328
         SLA   @12,2                                               0328
         L     @11,@CA00109                                        0328
         L     SKLPTR,IGFDIIND-IGFDIIND(@12,@11)                   0328
*       CALL DM0MOVE;               /* MOVE INVALID DEVICE CODE TEXT
*                                      SEGMENT TO BUFFER             */
         BAL   @14,DM0MOVE                                         0329
*       SKLPTR=SAVESKLP;            /* RESTORE CURRENT MESSAGE TEXT
*                                      SEGMENT ADDRESS               */
         LR    SKLPTR,SAVESKLP                                     0330
*     END;                                                         0331
*   RETURN;                         /* RETURN TO CALLER              */
@EL00014 DS    0H                                                  0332
@EF00014 DS    0H                                                  0332
@ER00014 LM    @14,@01,@SA00014+12                                 0332
         L     @04,@SA00014+36                                     0332
         LM    @06,@12,@SA00014+44                                 0332
         BR    @14                                                 0332
*   END DM0INVCD;                   /* END OF INTERNAL PROCEDURE     */
         B     @EL00014                                            0333
@PB00014 DS    0H                                                  0334
*                                                                  0334
*   /*****************************************************************/
*   /*                                                               */
*   /* ?EPILOG - GENERATE DECLARES FOR SYSTEM MACROS                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0334
*   DECLARE                         /* GENERAL PURPOSE REGISTERS     */
*     GPR00P PTR(31)REG(0),                                        0334
*     GPR01P PTR(31)REG(1);                                        0334
*   DECLARE                         /* COMMON VARIABLES              */
*     I256C CHAR(256)BASED,                                        0335
*     I031F FIXED(31)BASED,                                        0335
*     I031P PTR(31)BASED,                                          0335
*     I015F FIXED(15)BASED,                                        0335
*     I015P PTR(15)BASED,                                          0335
*     I008P PTR(8)BASED,                                           0335
*     I001C CHAR(1)BASED;                                          0335
*   END IGFDM0                      /* END OF MODULE                 */
*                                                                  0336
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IHADDR  )                                       */
*/*%INCLUDE SYSLIB  (IEFUCBOB)                                       */
*                                                                  0336
*       ;                                                          0336
@EL00001 L     @13,4(,@13)                                         0336
@EF00001 L     @00,@SIZDATD                                        0336
         LR    @01,@09                                             0336
         FREEMAIN R,LV=(0),A=(1)
@ER00001 LM    @14,@12,12(@13)                                     0336
         BR    @14                                                 0336
@DATA    DS    0H
@CH00039 DC    H'0'
@CH00089 DC    H'1'
@CH00078 DC    H'2'
@CH00080 DC    H'3'
@CH00041 DC    H'4'
@CH00486 DC    H'6'
@CH00038 DC    H'8'
@CH00066 DC    H'9'
@CH00112 DC    H'11'
@CH00045 DC    H'16'
@SM00699 MVC   WTOTXT(0,WTOPTR),SKLTEXT(SKLPTR)
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@SA00012 DS    18F
@SA00013 DS    18F
@SA00014 DS    18F
@AL00001 DS    1A
IGFDM0   CSECT
         DS    0F
@DATD    DSECT
         DS    0D
ECB      DS    F
         DS    0D
@TS00001 DS    CL8
CVDAREA  DS    CL2
RPLYAREA DS    CL3
         DS    CL3
PLSTWTOR DS    CL88
         ORG   PLSTWTOR
@NM00001 DS    CL8
         ORG   @NM00001
WTORRPL  DS    FL1
WTORRPA  DS    AL3
WTORECB  DS    AL4
         ORG   PLSTWTOR+8
PLSTWTO  DS    CL80
         ORG   PLSTWTO
WTOMK1   DS    CL1
WTOLNG1  DS    FL1
WTOMCSF  DS    CL2
WTOMSG1  DS    CL76
         ORG   PLSTWTOR+88
DERPLIST DS    CL48
         ORG   DERPLIST
DERFUNK  DS    AL1
DERSWCHS DS    BL1
         ORG   DERSWCHS
DERCRASH DS    BL1
DERPERK  EQU   DERSWCHS+0
DERECALL EQU   DERSWCHS+0
DERESTAE EQU   DERSWCHS+0
@NM00012 EQU   DERSWCHS+0
         ORG   DERPLIST+2
@NM00013 DS    CL2
DERREC   DS    AL4
DERSPEC  DS    AL4
DERRETRY DS    AL4
DERDATD  DS    CL4
         ORG   DERDATD
DERDASPN DS    FL1
DERDALNG DS    FL3
         ORG   DERPLIST+20
DERRSRC  DS    BL1
         ORG   DERRSRC
DERTAPE  DS    BL1
DERUREC  EQU   DERRSRC+0
DERDISK  EQU   DERRSRC+0
@NM00014 EQU   DERRSRC+0
         ORG   DERPLIST+21
DERLRC   DS    AL1
DERRUB   DS    CL18
         ORG   DERRUB
DERPFX   DS    BL2
DERRCODE DS    AL4
DERRDATA DS    AL4
DERRDDR  DS    AL4
DERRSAVE DS    AL4
         ORG   DERPLIST+40
DERGMSPL DS    CL4
         ORG   DERGMSPL
DERGMSPN DS    FL1
DERGMLNG DS    FL3
         ORG   DERPLIST+44
DERGMADR DS    AL4
         ORG   DERPLIST+48
@ENDDATD EQU   *
IGFDM0   CSECT
         DS    0F
@SIZDATD DC    AL1(245)
         DC    AL3(@ENDDATD-@DATD)
@CV00073 DC    V(IGFDE0)
@CA00107 DC    A(IGFDMIND)
@CA00108 DC    A(IGFDTIND)
@CA00109 DC    A(IGFDIIND)
@CA00110 DC    A(IGFDHIND)
         DS    0D
@CC00642 DC    C'NO'
@CC00641 DC    C'YES'
@CC00662 DC    C'AL '
@CC00663 DC    C'NL '
@CC00664 DC    C'SL '
@CC00665 DC    C'BLP'
@CC00666 DC    C'NSL'
@CC00059 DC    C'DEVICE, '
@CC00061 DC    C'OPERATOR'
@CC00067 DC    C'I/O ERROR'
@CC00063 DC    C'PAGING I/O ERROR'
@CB00046 DC    X'8000'
@CB00053 DC    X'2020'
@CB00055 DC    X'1000'
@CB00057 DC    X'0200'
@CB00049 DC    X'404040'
@CB00341 DC    B'0000000011100100'
DERRECPM DS    CL24
         ORG   DERRECPM
@NM00015 DC    CL8'IGFDI0'
@NM00016 DC    CL8'IGFDM0'
@NM00017 DC    CL8'73142'
         ORG   DERRECPM+24
         DS    CL2
DM0SUBS  DC    AL4(DM0NOOP)
         DC    AL4(DM0FMCUA)
         DC    AL4(DM0TOCUA)
         DC    AL4(DM0VOLID)
         DC    AL4(DM0LABTP)
         DC    AL4(DM0SEQNO)
         DC    AL4(DM0TERCD)
         DC    AL4(DM0MIHCD)
         DC    AL4(DM0INVCD)
         DC    AL4(DM0DEVCE)
         DC    AL4(DM0RESON)
IGFDM0P  DC    13F'0'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
SUBPTR   EQU   @07
SAVESKLP EQU   @04
SKLPTR   EQU   @03
WTOPTR   EQU   @02
SCODE    EQU   @04
SCOUNT   EQU   @06
DM0IRC   EQU   @05
CODEBASE EQU   @08
DATABASE EQU   @09
DDRPTR   EQU   @10
SAVEPTR  EQU   @13
GPR01P   EQU   @01
GPR00P   EQU   @00
         EXTRN IGFDMIND
         EXTRN IGFDTIND
         EXTRN IGFDIIND
         EXTRN IGFDHIND
@NM00002 EQU   0
WTODESC  EQU   @NM00002
WTOROUT  EQU   @NM00002+2
WTOTXT   EQU   0
@NM00003 EQU   0
SKLCOUNT EQU   @NM00003
SKLTEXT  EQU   @NM00003+1
@NM00004 EQU   0
SKLDESC  EQU   @NM00004
SKLROUT  EQU   @NM00004+2
DM0SUB   EQU   0
DDRCOM   EQU   0
DDRSHORT EQU   DDRCOM
DDRCNTRL EQU   DDRSHORT+8
DDRSRC   EQU   DDRCNTRL
DDROPER  EQU   DDRSRC
DDRSYS   EQU   DDRSRC
DDRPAGE  EQU   DDRSRC
DDRSTAT  EQU   DDRCNTRL+1
DDRDCHAR EQU   DDRCNTRL+2
DDRDSTAT EQU   DDRDCHAR+1
DDRDA    EQU   DDRDSTAT
DDRMT    EQU   DDRDSTAT
DDRUR    EQU   DDRDSTAT
DDRFMCUA EQU   DDRSHORT+18
DDRTOCUA EQU   DDRSHORT+21
DDRLONG  EQU   DDRCOM+24
DDRTOUCB EQU   DDRLONG
DDRROWN  EQU   DDRLONG+8
DDRMIH   EQU   DDRLONG+9
DDRMIHT  EQU   DDRLONG+12
DDRTER   EQU   DDRLONG+36
DDRTER1  EQU   DDRTER
DDRINV   EQU   DDRLONG+38
DDRINV1  EQU   DDRINV
DDRAPP   EQU   DDRLONG+40
DDRIOF   EQU   DDRLONG+52
DDRIOF2  EQU   DDRIOF+1
DDRMSG   EQU   DDRLONG+54
DDRMSGOP EQU   DDRMSG
DDRMSGCD EQU   DDRMSG+1
DDRMSGP  EQU   DDRLONG+56
DDRMSGPN EQU   DDRMSGP
DDRMSGPC EQU   DDRMSGP+1
DDRLABEL EQU   DDRLONG+64
DDRLAL   EQU   DDRLABEL
DDRLBLP  EQU   DDRLABEL
DDRLNL   EQU   DDRLABEL
DDRLNSL  EQU   DDRLABEL
DDRLSD   EQU   DDRLABEL
DDRREC   EQU   DDRLONG+66
DDRREC2  EQU   DDRREC+1
UCBOB    EQU   0
UCBJBNR  EQU   UCBOB
UCBFL5   EQU   UCBOB+1
UCBAF    EQU   UCBFL5
UCBSTAT  EQU   UCBOB+3
UCBCHAN  EQU   UCBOB+4
UCBSFLS  EQU   UCBOB+6
UCBFLA   EQU   UCBSFLS
UCBFL1   EQU   UCBFLA
UCBBSY   EQU   UCBFL1
UCBNRY   EQU   UCBFL1
UCBPST   EQU   UCBFL1
UCBCUB   EQU   UCBFL1
UCBFLB   EQU   UCBSFLS+1
UCBATI   EQU   UCBOB+11
@NM00018 EQU   UCBATI
UCBWGT   EQU   UCBOB+12
UCBTYP   EQU   UCBOB+16
UCBTBYT1 EQU   UCBTYP
UCB1FEA5 EQU   UCBTBYT1
UCB1FEA6 EQU   UCBTBYT1
UCBTBYT2 EQU   UCBTYP+1
UCB2OPT2 EQU   UCBTBYT2
UCBDUDN1 EQU   UCB2OPT2
UCB2OPT3 EQU   UCBTBYT2
UCBDUDN2 EQU   UCB2OPT3
UCB2OPT4 EQU   UCBTBYT2
UCBTBYT3 EQU   UCBTYP+2
UCBCHM   EQU   UCBOB+20
UCBCHM1  EQU   UCBCHM
UCBPTH0  EQU   UCBCHM1
UCBPTH1  EQU   UCBCHM1
UCBCHM2  EQU   UCBCHM+1
UCBDEV   EQU   UCBOB+24
UCBMT    EQU   0
UCBOCR   EQU   0
UCBUCS   EQU   0
UCBUCSOP EQU   UCBUCS+4
UCBFCBOP EQU   UCBUCS+5
I001C    EQU   0
I008P    EQU   0
I015F    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
I256C    EQU   0
UCBBGN   EQU   0
UCBPTR   EQU   DDRTOUCB
UCBOBS01 EQU   UCBDEV
UCBVOLI  EQU   UCBOBS01+4
UCBSTAB  EQU   UCBOBS01+10
UCBBSVL  EQU   UCBSTAB
UCBPRSRS EQU   UCBSTAB
UCBDMCT  EQU   UCBOBS01+11
UCBFL4   EQU   UCBOBS01+13
UCBOBS02 EQU   UCBDEV
UCBFSEQ  EQU   UCBOBS02+2
UCBTFL1  EQU   UCBOBS02+19
UCBXTN   EQU   UCBOBS02+20
UCBVOPT  EQU   UCBXTN
UCBOBS03 EQU   UCBDEV
UCBXTADR EQU   UCBOBS03
UCBOBS04 EQU   UCBDEV
UCBBTA   EQU   UCBOBS04+12
UCBOBS06 EQU   UCBDEV
UCBAOF   EQU   UCBOBS06
UCBAOF1  EQU   UCBAOF
UCBAOF2  EQU   UCBAOF+1
@NM00020 EQU   UCBOBS06+3
UCBLDNCA EQU   UCBOBS06+8
UCBCTLNK EQU   UCBOBS06+12
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
UCBCTLNA EQU   UCBCTLNK+1
UCBRLN   EQU   UCBCTLNK
UCBLDNCB EQU   UCBLDNCA+1
UCBIRLN  EQU   UCBLDNCA
UCBIRB   EQU   UCBOBS06+4
UCBATRCD EQU   @NM00020
UCBSKPFG EQU   @NM00020
UCBRIPND EQU   @NM00020
UCBRSV80 EQU   @NM00020
UCBRSV79 EQU   @NM00020
UCBRSV78 EQU   @NM00020
UCBRSV77 EQU   @NM00020
UCBOLTEP EQU   @NM00020
UCBATNCT EQU   UCBOBS06+2
UCBRSV76 EQU   UCBAOF2
UCBRSV75 EQU   UCBAOF2
UCBRSV74 EQU   UCBAOF2
UCBRSV73 EQU   UCBAOF2
UCBRSV72 EQU   UCBAOF2
UCBRSV71 EQU   UCBAOF2
UCBRSV70 EQU   UCBAOF2
UCBRSV69 EQU   UCBAOF2
UCBRSV68 EQU   UCBAOF1
UCBRSV67 EQU   UCBAOF1
UCBRSV66 EQU   UCBAOF1
UCBRSV65 EQU   UCBAOF1
UCBRSV64 EQU   UCBAOF1
UCBOFNL  EQU   UCBAOF1
UCBOFSP  EQU   UCBAOF1
UCBOFMCR EQU   UCBAOF1
UCBBTB   EQU   UCBBTA+1
UCBDI    EQU   UCBBTA
UCBSTART EQU   UCBOBS04+8
UCBTEB   EQU   UCBOBS04+4
UCBGCB   EQU   UCBOBS04+3
UCBOPEN  EQU   UCBOBS04+2
UCBRES1C EQU   UCBOBS04
UCBXTNB  EQU   UCBXTN+1
UCBRSV22 EQU   UCBVOPT
UCBRSV21 EQU   UCBVOPT
UCBRSV20 EQU   UCBVOPT
UCBESVE  EQU   UCBVOPT
UCBERPC  EQU   UCBVOPT
UCBESVC  EQU   UCBVOPT
UCBEVA   EQU   UCBVOPT
UCBESV   EQU   UCBVOPT
UCBRV009 EQU   UCBTFL1
UCBRV008 EQU   UCBTFL1
UCBRV007 EQU   UCBTFL1
UCBRV006 EQU   UCBTFL1
UCBRV005 EQU   UCBTFL1
UCBRV038 EQU   UCBTFL1
UCBNSLTP EQU   UCBTFL1
UCBNLTP  EQU   UCBTFL1
UCBRES1B EQU   UCBOBS02+18
UCBFSER  EQU   UCBOBS02+12
@NM00019 EQU   UCBOBS02+4
UCBFSCT  EQU   UCBOBS02
UCBNEXP  EQU   UCBOBS01+20
UCBBASE  EQU   UCBOBS01+16
UCBRES1A EQU   UCBOBS01+15
UCBUSER  EQU   UCBOBS01+14
UCBFL47  EQU   UCBFL4
UCBFL46  EQU   UCBFL4
UCBFL45  EQU   UCBFL4
UCBFL44  EQU   UCBFL4
UCBDSS   EQU   UCBFL4
UCBRV028 EQU   UCBFL4
UCBWDAV  EQU   UCBFL4
UCBDAVV  EQU   UCBFL4
UCBSQC   EQU   UCBOBS01+12
UCBDATP  EQU   UCBOBS01+12
UCBDMC   EQU   UCBDMCT
UCBMOUNT EQU   UCBDMCT
UCBBNUL  EQU   UCBSTAB
UCBSHAR  EQU   UCBSTAB
UCBBSTR  EQU   UCBSTAB
UCBBPUB  EQU   UCBSTAB
UCBBPRV  EQU   UCBSTAB
UCBBALB  EQU   UCBPRSRS
UCBPGFL  EQU   UCBSTAB
UCBDVSHR EQU   UCBBSVL
UCBVTOC  EQU   UCBOBS01
UCBERADR EQU   UCBUCS+12
UCBFCBID EQU   UCBUCS+8
UCBERCNT EQU   UCBUCS+7
UCBRSV51 EQU   UCBUCS+6
UCBRSV50 EQU   UCBFCBOP
UCBRSV49 EQU   UCBFCBOP
UCBRSV48 EQU   UCBFCBOP
UCBRSV47 EQU   UCBFCBOP
UCBRSV46 EQU   UCBFCBOP
UCBRSV45 EQU   UCBFCBOP
UCBRSV44 EQU   UCBFCBOP
UCBFCBO1 EQU   UCBFCBOP
UCBUCSPE EQU   UCBUCSOP
UCBRSV43 EQU   UCBUCSOP
UCBRSV42 EQU   UCBUCSOP
UCBRSV41 EQU   UCBUCSOP
UCBRSV40 EQU   UCBUCSOP
UCBRSV39 EQU   UCBUCSOP
UCBUCSO2 EQU   UCBUCSOP
UCBUCSO1 EQU   UCBUCSOP
UCBUCSID EQU   UCBUCS
UCBRDATA EQU   UCBOCR+4
UCBFRID  EQU   UCBOCR
UCBCLN   EQU   UCBMT+14
UCBERG   EQU   UCBMT+12
UCBMS    EQU   UCBMT+11
UCBNB    EQU   UCBMT+10
UCBPW    EQU   UCBMT+9
UCBPR    EQU   UCBMT+8
UCBSIO   EQU   UCBMT+6
UCBTW    EQU   UCBMT+5
UCBTR    EQU   UCBMT+4
UCBTWT   EQU   UCBMT+3
UCBTRT   EQU   UCBMT+2
UCBCTD   EQU   UCBMT
UCBDTI   EQU   UCBOB+23
UCBSNSCT EQU   UCBOB+22
UCBRV025 EQU   UCBCHM2
UCBRV024 EQU   UCBCHM2
UCBRV023 EQU   UCBCHM2
UCBRV022 EQU   UCBCHM2
UCBRV021 EQU   UCBCHM2
UCBRV020 EQU   UCBCHM2
UCBRV019 EQU   UCBCHM2
UCBRV018 EQU   UCBCHM2
UCBRV017 EQU   UCBCHM1
UCBRV016 EQU   UCBCHM1
UCBRV015 EQU   UCBCHM1
UCBRV014 EQU   UCBCHM1
UCBSPB   EQU   UCBPTH1
UCBPPB   EQU   UCBPTH1
UCBSPA   EQU   UCBPTH0
UCBPPA   EQU   UCBPTH0
UCBTBYT4 EQU   UCBTYP+3
UCBRSV11 EQU   UCBTBYT3
UCBRSV10 EQU   UCBTBYT3
UCB3CHAR EQU   UCBTBYT3
UCB3UREC EQU   UCBTBYT3
UCB3DISP EQU   UCBTBYT3
UCB3DACC EQU   UCBTBYT3
UCB3COMM EQU   UCBTBYT3
UCB3TAPE EQU   UCBTBYT3
UCB2OPT7 EQU   UCBTBYT2
UCB2OPT6 EQU   UCBTBYT2
UCB2OPT5 EQU   UCBTBYT2
UCBRWTAU EQU   UCB2OPT4
UCBRPS   EQU   UCBDUDN2
UCBRR    EQU   UCBDUDN1
UCB2OPT1 EQU   UCBTBYT2
UCB2OPT0 EQU   UCBTBYT2
UCB1FEA7 EQU   UCBTBYT1
UCBD6250 EQU   UCB1FEA6
UCBD1600 EQU   UCB1FEA5
UCB1FEA4 EQU   UCBTBYT1
UCB1FEA3 EQU   UCBTBYT1
UCB1FEA2 EQU   UCBTBYT1
UCB1FEA1 EQU   UCBTBYT1
UCB1FEA0 EQU   UCBTBYT1
UCBNAME  EQU   UCBOB+13
UCBRV029 EQU   UCBWGT
UCBVHRSN EQU   UCBWGT
UCBVORSN EQU   UCBWGT
UCBMTPXP EQU   UCBWGT
UCBREW   EQU   UCBWGT
UCBPUB   EQU   UCBWGT
UCBOUT   EQU   UCBWGT
UCBIN    EQU   UCBWGT
UCBHPDV  EQU   @NM00018
UCBHALI  EQU   @NM00018
UCBRSV09 EQU   @NM00018
UCBRSV08 EQU   @NM00018
UCBRSV07 EQU   @NM00018
UCBRSV06 EQU   @NM00018
UCBRSV05 EQU   @NM00018
UCBRSV04 EQU   @NM00018
UCBLCI   EQU   UCBOB+10
UCBSTI   EQU   UCBOB+9
UCBETI   EQU   UCBOB+8
UCBFLB7  EQU   UCBFLB
UCBFLB6  EQU   UCBFLB
UCBFLB5  EQU   UCBFLB
UCBFLB4  EQU   UCBFLB
UCBRESVH EQU   UCBFLB
UCBSPST  EQU   UCBFLB
UCBASNS  EQU   UCBFLB
UCBIORST EQU   UCBFLB
UCBQISCE EQU   UCBFL1
UCBACTV  EQU   UCBFL1
UCBSAP   EQU   UCBFL1
UCBNOTRC EQU   UCBCUB
UCBPSNS  EQU   UCBFL1
UCBUSING EQU   UCBPST
UCBNOTRD EQU   UCBNRY
UCBBUSYD EQU   UCBBSY
UCBUA    EQU   UCBCHAN+1
UCBCHA   EQU   UCBCHAN
UCBDADI  EQU   UCBSTAT
UCBSYSR  EQU   UCBSTAT
UCBPRES  EQU   UCBSTAT
UCBALOC  EQU   UCBSTAT
UCBUNLD  EQU   UCBSTAT
UCBRESV  EQU   UCBSTAT
UCBCHGS  EQU   UCBSTAT
UCBONLI  EQU   UCBSTAT
UCBID    EQU   UCBOB+2
UCBALTPH EQU   UCBFL5
UCBALTCU EQU   UCBFL5
UCBNALOC EQU   UCBFL5
UCBENVRD EQU   UCBFL5
UCBVSDR  EQU   UCBFL5
UCBSASK  EQU   UCBFL5
UCBAMV   EQU   UCBAF
UCBDCC   EQU   UCBFL5
UCBMONT  EQU   UCBJBNR
UCBRV011 EQU   UCBJBNR
UCBRSV02 EQU   UCBJBNR
UCBRSV01 EQU   UCBJBNR
UCBRV003 EQU   UCBJBNR
UCBRV002 EQU   UCBJBNR
UCBRV001 EQU   UCBJBNR
UCBVRDEV EQU   UCBJBNR
@NM00011 EQU   DDRREC2
DDRRFMTO EQU   DDRREC2
DDRREC1  EQU   DDRREC
DDRRETRY EQU   DDRLONG+65
DDRLNOP  EQU   DDRLABEL
@NM00010 EQU   DDRLABEL
@NM00009 EQU   DDRIOF2
DDRICNT  EQU   DDRIOF2
DDRIMNT  EQU   DDRIOF2
DDRILAB  EQU   DDRIOF2
DDRITAKE EQU   DDRIOF2
DDRWHICH EQU   DDRIOF2
DDRIOF1  EQU   DDRIOF
DDRCOUNT EQU   DDRLONG+48
DDRIBUF  EQU   DDRLONG+44
DDRIBUFL EQU   DDRLONG+42
DDRAPP2  EQU   DDRAPP+1
DDRAPP1  EQU   DDRAPP
DDRINV2  EQU   DDRINV+1
DDRTER2  EQU   DDRTER+1
DDRTEST  EQU   DDRLONG+32
DDRUASCB EQU   DDRLONG+28
DDRUTCB  EQU   DDRLONG+24
DDRUIOB  EQU   DDRLONG+20
DDRUDEB  EQU   DDRMIHT+4
DDRUDCB  EQU   DDRMIHT
DDRASID  EQU   DDRLONG+10
DDRFIRST EQU   DDRROWN
@NM00008 EQU   DDRROWN
DDRRDENQ EQU   DDRROWN
DDRRUENQ EQU   DDRROWN
DDRRTENQ EQU   DDRROWN
DDRFMUCB EQU   DDRLONG+4
DDRUASID EQU   DDRSHORT+16
DDRUIOSB EQU   DDRSHORT+12
@NM00007 EQU   DDRDSTAT
DDRBUFL  EQU   DDRDSTAT
DDRMDR   EQU   DDRDCHAR
@NM00006 EQU   DDRSTAT
DDRSIRB  EQU   DDRSTAT
DDRPRG   EQU   DDRSTAT
DDRRMV   EQU   DDRSTAT
DDRHAMA  EQU   DDRSTAT
DDRQUE   EQU   DDRSTAT
DDRACTV  EQU   DDRSTAT
@NM00005 EQU   DDRSRC
DDRNXT   EQU   DDRSHORT+4
DDRID    EQU   DDRSHORT
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00273 EQU   @EL00010
@RC00268 EQU   @EL00010
@RF00294 EQU   @EL00011
@RC00292 EQU   @EL00011
@RC00290 EQU   @EL00011
@RC00300 EQU   @EL00012
@RC00312 EQU   @EL00013
@RC00324 EQU   @EL00014
@ENDDATA EQU   *
         END   IGFDM0,(C'PL/S-II',0402,73142)
