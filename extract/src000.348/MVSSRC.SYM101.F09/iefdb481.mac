         TITLE 'IEFDB481 - REMOVE IN-USE PROCESSOR                     *
                        '
IEFDB481 CSECT ,                                                01S0001
@MAINENT DS    0H                                               01S0001
         USING *,@15                                            01S0001
         B     @PROLOG                                          01S0001
         DC    AL1(16)                                          01S0001
         DC    C'IEFDB481  75.024'                              01S0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                  01S0001
         BALR  @12,0                                            01S0001
@PSTART  DS    0H                                               01S0001
         USING @PSTART,@12                                      01S0001
         L     @00,@SIZDATD                                     01S0001
         GSPACE   R,LV=(0)
         LR    @11,@01                                          01S0001
         USING @DATD,@11                                        01S0001
         ST    @13,@SA00001+4                                   01S0001
         LM    @00,@01,20(@13)                                  01S0001
         ST    @11,8(,@13)                                      01S0001
         LR    @13,@11                                          01S0001
         MVC   @PC00001(28),0(@01)                              01S0001
JSCBDISP EQU 188
JSCBAOS1 EQU  72
JSCBAOS2 EQU 192
*RLSTINDX=1;                           /*INIT LIST INDEX FOR RIU     */
         LA    RLSTINDX,1                                       01S0045
*ULSTINDX=0;                           /*INIT LIST INDEX FOR UNALLOC */
         SLR   @10,@10                                          01S0046
         ST    @10,ULSTINDX                                     01S0046
*DO WHILE RLSTINDX <= RDSABCNT;        /*PROCESS ALL DSABS IN LIST   */
         B     @DE00047                                         01S0047
@DL00047 DS    0H                                               01S0048
*  DSABPTR=RDSABLST(RLSTINDX);         /*POINT TO DSAB TO PROCESS    */
         LR    @10,RLSTINDX                                     01S0048
         SLA   @10,2                                            01S0048
         L     @05,@PC00001                                     01S0048
         L     @05,RDSABSP(,@05)                                01S0048
         AL    @05,@CF00594                                     01S0048
         L     DSABPTR,RDSABLST(@10,@05)                        01S0048
*  IF (DSABOPCT >  0   ×               /*IS DATA SET OPEN OR         */
*      DSABCATM = '1'B) THEN           /*IN A CONCATENATED GROUP?    */
         LH    @10,DSABOPCT(,DSABPTR)                           01S0049
         LTR   @10,@10                                          01S0049
         BP    @RT00049                                         01S0049
         TM    DSABCATM(DSABPTR),B'00000010'                    01S0049
         BNO   @RF00049                                         01S0049
@RT00049 DS    0H                                               01S0050
*    CALL DSABCHNR;                    /*YES;IN-USE BIT OFF & RECHAIN*/
         BAL   @14,DSABCHNR                                     01S0050
*  ELSE                                /*NO, CONTINUE PROCESSING     */
*    IF (DSABPALC = '0'B &             /*IS D.S. NON-PERM ALLOCATED &*/
*        SIOTDLET = '1'B) THEN         /*WITH A DISP OF DELETE ?     */
         B     @RC00049                                         01S0051
@RF00049 TM    DSABPALC(DSABPTR),B'01000000'                    01S0051
         BNZ   @RF00051                                         01S0051
         L     @10,DSABSIOT(,DSABPTR)                           01S0051
         TM    SIOTDLET(@10),B'00000100'                        01S0051
         BNO   @RF00051                                         01S0051
*      IF (DSABANMP ^= 0 &             /*IS THERE AN ALT. DSN FLD AND*/
*          DSABANAM(1) = '&') THEN     /*IS IT AN &DSN ?             */
         L     @10,DSABANMP(,DSABPTR)                           01S0052
         LTR   @10,@10                                          01S0052
         BZ    @RF00052                                         01S0052
         CLI   DSABANAM(@10),C'&&'                              01S0052
         BNE   @RF00052                                         01S0052
*        CALL DSABCHNR;                /*IN-USE BIT OFF & RECHAIN    */
         BAL   @14,DSABCHNR                                     01S0053
*      ELSE                            /*NOT AN &DSN                 */
*        DO;                           /*D.S. TO BE UNALLOCATED      */
         B     @RC00052                                         01S0054
@RF00052 DS    0H                                               01S0055
*          ULSTINDX=ULSTINDX+1;        /*INCREMENT UNALLOC LIST INDEX*/
         LA    @10,1                                            01S0055
         AL    @10,ULSTINDX                                     01S0055
         ST    @10,ULSTINDX                                     01S0055
*          UDSABLST(ULSTINDX)=DSABPTR; /*PUT INTO LIST FOR UNALLOC   */
         SLA   @10,2                                            01S0056
         L     @05,@PC00001                                     01S0056
         L     @05,RDSABSP(,@05)                                01S0056
         AL    @05,@CF00594                                     01S0056
         ST    DSABPTR,UDSABLST(@10,@05)                        01S0056
*        END;                          /*END IF D.S. TO BE UNALLOC.  */
*    ELSE                              /*D.S. PERM ALLOC OR NONDELETE*/
*      DO;                             /*PROCESS THIS DSAB NORMALLY  */
         B     @RC00051                                         01S0058
@RF00051 DS    0H                                               01S0059
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - DISPPRCR                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - CONDITIONAL DISPOSITION REMOVAL               */
*/*                                                                  */
*/* FUNCTION  - REMOVE CONDITIONAL DISPOSITION FROM A SIOT WHEN      */
*/*             NECESSARY, AND CREATE AND ENCHAIN A WRITE EPA FOR THE*/
*/*             UPDATED SIOT.                                        */
*/*                                                                  */
*/* OPERATION - A CHECK IS MADE TO ENSURE THAT A CONDITIONAL         */
*/*             DISPOSITION WAS SPECIFIED ON THE ORIGINAL ALLOCATION */
*/*             REQUEST. IF ONE WAS NOT, NO PROCESSING IS NECESSARY. */
*/*             IF ONE WAS, IT IS CHECKED AGAINST THE NORMAL DISP TO */
*/*             SEE IF THEY ARE DIFFERENT. IF NOT DIFFERENT, NO      */
*/*             REMOVAL OF COND. DISP IS NECESSARY AS THE CORRECT    */
*/*             NORMAL DISP PROCESSING WILL TAKE PLACE, EVEN IN CASE */
*/*             OF ABEND. HOWEVER IF THEY ARE DIFFERENT, THE         */
*/*             CONDITIONAL DISPOSITION FIELD OF THE SIOT IS CLEARED */
*/*             AND A GETMAIN IS ISSUED FOR CORE FOR AN EPA. THIS EPA*/
*/*             IS THEN FILLED IN APPROPRIATELY AND PLACED ON A CHAIN*/
*/*             OF EPA'S FOR UPDATED SWA CONTROL BLOCKS TO BE WRITTEN*/
*/* ENTRY -                                                          */
*/*   INPUT  - SIOT TO BE PROCESSED                                  */
*/*          - PTR TO LAST EPA ON CHAIN                              */
*/*                                                                  */
*/* EXIT -                                                           */
*/*   OUTPUT - SIOTALTD CLEARED  IF NECESSARY                        */
*/*          - SWAEPA CREATED AND CHAINED IF SIOTALTD WAS CLEARED    */
*/*          - LASTEPAP UPDATED IF EPA WAS CREATED                   */
*/*                                                                  */
*/********************************************************************/
*RFY SWAEPA BASED(LASTEPAP);           /*RESET BASE OF EPA MAP       */
*IF SIOTALTD(5:8) ^= '0000'B THEN      /*WAS ALT. DISP SPECD AT ALLOC*/
         L     @10,DSABSIOT(,DSABPTR)                           02S0060
         TM    SIOTALTD(@10),B'00001111'                        02S0060
         BZ    @RF00060                                         02S0060
*  DO;                                 /*YES,COMPARE WITH NORMAL DISP*/
*    WRKBITS=SCTSDISP && SIOTALTD;     /*SET BITS THAT ARE DIFFERENT */
         MVC   WRKBITS(1),SCTSDISP(@10)                         02S0062
         XC    WRKBITS(1),SIOTALTD(@10)                         02S0062
*    IF WRKBITS(5:8) ^='0000'B THEN    /*ARE NORMAL & COND DISPS DIFF*/
         TM    WRKBITS,B'00001111'                              02S0063
         BZ    @RF00063                                         02S0063
*      DO;                             /*YES,REMOVE CONDITIONAL DISP */
*        SIOTALTD(5:8)='0000'B;        /*CLEAR COND. DISP IN THE SIOT*/
         NI    SIOTALTD(@10),B'11110000'                        02S0065
*        R0=LENGTH(SWAEPA);            /*SIZE OF EPA FROM            */
         LA    R0,16                                            02S0066
*        R0 = R0 × SCHDSUBP;           /*GET FROM CORRECT SUBPOOL    */
         O     R0,@CF00072                                      02S0067
*        GEN (GETMAIN R,LV=(0))        /*GET CORE FOR EPA            */
*             SETS(R1) REFS(R0);                                02S0068
         GETMAIN R,LV=(0)
*        SWCHNPTR=R1;                  /*CHAIN INTO LAST EPA         */
         L     @10,@PC00001+12                                  02S0069
         L     @05,LASTEPAP(,@10)                               02S0069
         ST    R1,SWCHNPTR(,@05)                                02S0069
*        LASTEPAP=SWCHNPTR;            /*UPDATE FOR NEW LAST EPA     */
         L     @05,@PC00001+12                                  02S0070
         L     @05,LASTEPAP(,@05)                               02S0070
         L     @05,SWCHNPTR(,@05)                               02S0070
         ST    @05,LASTEPAP(,@10)                               02S0070
*        SWAEPA=SWAEPA && SWAEPA;      /*ZERO OUT NEW EPA            */
         XC    SWAEPA(16,@05),SWAEPA(@05)                       02S0071
*        SWBLKPTR=DSABSIOT;            /*POINT TO UPDATED SIOT       */
         L     @10,DSABSIOT(,DSABPTR)                           02S0072
         ST    @10,SWBLKPTR(,@05)                               02S0072
*        SWVA=SIOTDSKA;                /*PUT IN SIOT'S SVA           */
         MVC   SWVA(3,@05),SIOTDSKA(@10)                        02S0073
*        SWBLKID=3;                    /*PUT IN BLOCK ID OF SIOT     */
         MVI   SWBLKID(@05),X'03'                               02S0074
*        SWLNGTH=176;                  /*PUT IN LENGTH OF SIOT BLK   */
         MVC   SWLNGTH(4,@05),@CF00585                          02S0075
*      END;                            /*END COND. DISP PROCESS      */
*    ELSE;                             /*NORMAL AND COND. DISPS SAME */
@RF00063 DS    0H                                               02S0078
*  END;                                /*END ALT. DISP SPECIFIED     */
*ELSE;                                 /*COND. DISP NOT SPECIFIED    */
@RF00060 DS    0H                                               02S0080
*RFY SWAEPA BASED(SWEPAPTR);           /*RESET BASE OF EPA MAP       */
*        CALL DSABCHNR;                /*IN-USE BIT OFF & RECHAIN    */
         BAL   @14,DSABCHNR                                     01S0081
*      END;                            /*END NORMAL PROCESS FOR DSAB */
*  RLSTINDX=RLSTINDX+1;                /*INDEX TO NEXT DSAB IN LIST  */
@RC00051 DS    0H                                               01S0083
@RC00049 AL    RLSTINDX,@CF00115                                01S0083
*END;                                  /*END INPUT LIST PROCESSING   */
@DE00047 L     @10,@PC00001+4                                   01S0084
         C     RLSTINDX,RDSABCNT(,@10)                          01S0084
         BNH   @DL00047                                         01S0084
*IF ULSTINDX > 0 THEN                  /*ANY DSABS FOR UNALLOC ?     */
         L     @10,ULSTINDX                                     01S0085
         LTR   @10,@10                                          01S0085
         BNP   @RF00085                                         01S0085
*  DO;                                 /*YES, PROCESS THEM           */
*    UNALKEYT = UNALKEYT && UNALKEYT;  /*ZEROS FOR DUMMY UNALKEY TAB */
         XC    UNALKEYT(40),UNALKEYT                            01S0087
*    DUMRSNCD = DUMRSNCD && DUMRSNCD;  /*ZERO OUT DUMMY RSNCODE 01S0088
*                                        UNALLOC                     */
         XC    DUMRSNCD(4),DUMRSNCD                             01S0088
*    CALL IEFDB4A1 (RDSABSP,ULSTINDX,DUMRSNCD,LASTEPAP,         01S0089
*                   CTLBLKPS,ADDR(UNALKEYT),DEPARMS,SMFPARMS);  01S0089
         L     @10,@PC00001                                     01S0089
         ST    @10,@AL00001                                     01S0089
         LA    @10,ULSTINDX                                     01S0089
         ST    @10,@AL00001+4                                   01S0089
         LA    @10,DUMRSNCD                                     01S0089
         ST    @10,@AL00001+8                                   01S0089
         L     @10,@PC00001+12                                  01S0089
         ST    @10,@AL00001+12                                  01S0089
         L     @10,@PC00001+16                                  01S0089
         ST    @10,@AL00001+16                                  01S0089
         LA    @10,UNALKEYT                                     01S0089
         ST    @10,@TF00001                                     01S0089
         LA    @10,@TF00001                                     01S0089
         ST    @10,@AL00001+20                                  01S0089
         L     @10,@PC00001+20                                  01S0089
         ST    @10,@AL00001+24                                  01S0089
         L     @10,@PC00001+24                                  01S0089
         ST    @10,@AL00001+28                                  01S0089
         L     @15,@CV00075                                     01S0089
         LA    @01,@AL00001                                     01S0089
         BALR  @14,@15                                          01S0089
*                                      /*UNALLOC PROCESSING  @ZA02706*/
*  END;                                /*END DSABS FOR UNALLOC       */
*RETURN CODE(0);                       /*RETURN TO INVOKER           */
@RF00085 L     @13,4(,@13)                                      01S0091
         L     @00,@SIZDATD                                     01S0091
         LR    @01,@11                                          01S0091
         FSPACE   R,LV=(0),A=(1)
         SLR   @15,@15                                          01S0091
         L     @14,12(,@13)                                     01S0091
         LM    @00,@12,20(@13)                                  01S0091
         BR    @14                                              01S0091
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - DSABCHNR                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - DSAB CHAINER SUBRTN                           */
*/*                                                                  */
*/* FUNCTION  - MARK DSABS NOT IN-USE AND RECHAIN THEM AT            */
*/*             THE END OF THE DSAB CHAIN                            */
*/*                                                                  */
*/* OPERATION - THE INPUT DSAB IS MARKED NOT IN-USE. IF THE DSAB IS A*/
*/*             MEMBER OF A CONCATENATED GROUP, THE LAST MEMBER OF   */
*/*             THE GROUP IS DETERMINED, ITS ADDRESS PLACED IN       */
*/*             DSABLAST, AND ALL MEMBERS OF THE GROUP ARE ALSO      */
*/*             MARKED NOT IN-USE. (IF THE DSAB IS NOT CONCATENATED, */
*/*             DSABLAST IS SET TO THE ADDRESS OF THE DSAB ITSELF.)  */
*/*             IF THEY ARE NOT ALREADY LOCATED AT THE END OF THE    */
*/*             CHAIN, THE DSABS FROM THE INPUT DSAB TO DSABLAST ARE */
*/*             THEN MOVED TO THE END OF THE CHAIN IN THE FOLLOWING  */
*/*             STEPS:                                               */
*/*             - DSQBADFC IN THE DSABQDB IS SET SAYING THAT THE DSAB*/
*/*               FORWARD CHAIN PTRS ARE NO LONGER VALID. IF THE     */
*/*               ESTAE EXIT RTN (IEFDB402) GETS CONTROL, IT WILL    */
*/*               USE THIS BIT, RECONSTRUCTING THE DSAB CHAIN FROM   */
*/*               BACKWARD PTRS WHEN THIS BIT IS ON.                 */
*/*             - THE NECESSARY FORWARD CHAIN PTRS ARE UPDATED,      */
*/*               INCLUDING DSQFRSTP IF REQUIRED.                    */
*/*             - DSQBADBC IN THE DSABQDB IS SET SAYING THAT THE     */
*/*               DSAB BACKWARD CHAIN PTRS ARE NO LONGER VALID. THE  */
*/*               ESTAE EXIT RTN (IEFDB402) WILL RECONSTRUCT THE     */
*/*               DSAB CHAIN USING FORWARD PTRS IF THIS BIT IS ON    */
*/*               AND DSQBADFC IS OFF. DSQBADFC IS THEN TURNED OFF.  */
*/*             - THE NECESSARY BACKWARD CHAIN PTRS ARE UPDATED,     */
*/*               INCLUDING DSQLASTP,AND DSQBADBC IS THEN TURNED OFF.*/
*/*                                                                  */
*/* ENTRY -                                                          */
*/*   INPUT DATA - DSAB TO BE PROCESSED                              */
*/*              - DSAB QBD                                          */
*/*                                                                  */
*/* EXIT -                                                           */
*/*   OUTPUT DATA - DSABNUSE BIT SET OFF (FOR ALL MEMBERS OF A       */
*/*                 CONCATENATED GROUP)                              */
*/*               - DSAB(S) MOVED TO END OF CHAIN AND NECESSARY      */
*/*                 PTRS IN DSABS AND QBD UPDATED TO REFLECT THIS    */
*/*                 RECHAINING.                                      */
*/*                                                                  */
*/********************************************************************/
*DSABCHNR: PROC;                                                02S0092
DSABCHNR STM   @14,@12,12(@13)                                  02S0092
*DSABNUSE = '0'B;                      /*SET DSAB NOT IN-USE         */
         NI    DSABNUSE(DSABPTR),B'11111110'                    02S0093
*LASTDSAB = DSABPTR;                   /*INIT PTR TO LAST CONCAT DSAB*/
         LR    LASTDSAB,DSABPTR                                 02S0094
*RFY DSAB BASED(LASTDSAB);             /*RESET DSAB BASE PTR         */
*IF DSABCATM = '1'B THEN               /*IF DSAB IS IN CONCAT GROUP  */
         TM    DSABCATM(LASTDSAB),B'00000010'                   02S0096
         BNO   @RF00096                                         02S0096
*  DO WHILE (DSABFCHN ^= 0   &         /*PROCESS TO END OF CHAIN OR  */
*           DSABFCHN->DSABTIOT->TIOEDDNM(1) = ' ');             02S0097
         B     @DE00097                                         02S0097
@DL00097 DS    0H                                               02S0098
*                                      /*TO END OF CONCAT GROUP      */
*    LASTDSAB = LASTDSAB->DSABFCHN;    /*UPDATE LAST CONCAT DSABPTR  */
         L     LASTDSAB,DSABFCHN(,LASTDSAB)                     02S0098
*    DSABNUSE = '0'B;                  /*SET THIS DSAB NOT IN-USE    */
         NI    DSABNUSE(LASTDSAB),B'11111110'                   02S0099
*  END;                                /*END CONCAT DSAB PROCESS     */
@DE00097 L     @10,DSABFCHN(,LASTDSAB)                          02S0100
         LTR   @10,@10                                          02S0100
         BZ    @DC00097                                         02S0100
         L     @10,DSABTIOT(,@10)                               02S0100
         CLI   TIOEDDNM(@10),C' '                               02S0100
         BE    @DL00097                                         02S0100
@DC00097 DS    0H                                               02S0101
*ELSE;                                 /*DSAB IS NOT CONCATENATED    */
@RF00096 DS    0H                                               02S0102
*RFY DSAB BASED(DSABPTR);              /*RESET DSAB BASE PTR         */
*IF LASTDSAB->DSABFCHN ^= 0 THEN       /*IF DSAB (OR GROUP) IS NOT AT
*                                        END OF CHAIN ALREADY        */
         SLR   @10,@10                                          02S0103
         L     @15,DSABFCHN(,LASTDSAB)                          02S0103
         CR    @15,@10                                          02S0103
         BE    @RF00103                                         02S0103
*  DO;                                 /*MOVE TO END OF DSAB CHAIN   */
*    CHNRSAVP = LASTDSAB -> DSABFCHN;  /*SAVE PTR TO DSAB AFTER LAST
*                                        DSAB BEING MOVED            */
         LR    CHNRSAVP,@15                                     02S0105
*    DSQBADFC = '1'B;                  /*SAY BAD FORWARD CHAIN PTRS  */
         L     @05,@PC00001+16                                  02S0106
         L     @05,JSCBPTR(,@05)                                02S0106
         L     @05,JSCDSABQ(,@05)                               02S0106
         OI    DSQBADFC(@05),B'10000000'                        02S0106
*    IF DSABBCHN = 0 THEN              /*IF DSAB IS 1ST ON CHAIN     */
         C     @10,DSABBCHN(,DSABPTR)                           02S0107
         BNE   @RF00107                                         02S0107
*      DSQFRSTP = LASTDSAB->DSABFCHN;  /*UPDATE NEW 1ST DSAB QDB PTR */
         ST    @15,DSQFRSTP(,@05)                               02S0108
*    ELSE                              /*DSAB IS NOT 1ST ON CHAIN    */
*      DSABBCHN->DSABFCHN = LASTDSAB->DSABFCHN; /*UPDATE FORWARD PTR
*                                        OF PRECEEDING DSAB ON CHAIN */
         B     @RC00107                                         02S0109
@RF00107 L     @10,DSABBCHN(,DSABPTR)                           02S0109
         L     @05,DSABFCHN(,LASTDSAB)                          02S0109
         ST    @05,DSABFCHN(,@10)                               02S0109
*    DSQLASTP->DSABFCHN = DSABPTR;     /*UPDATE FORWARD PTR OF CURRENT
*                                        LAST DSAB ON CHAIN          */
@RC00107 L     @10,@PC00001+16                                  02S0110
         L     @10,JSCBPTR(,@10)                                02S0110
         L     @10,JSCDSABQ(,@10)                               02S0110
         L     @05,DSQLASTP(,@10)                               02S0110
         ST    DSABPTR,DSABFCHN(,@05)                           02S0110
*    LASTDSAB->DSABFCHN = 0;           /*NEW LAST DSAB ON CHAIN HAS
*                                        FORWARD PTR OF ZERO         */
         SLR   @05,@05                                          02S0111
         ST    @05,DSABFCHN(,LASTDSAB)                          02S0111
*    DSQBADBC = '1'B;                  /*SAY BAD BACKWARD CHAIN PTRS */
         OI    DSQBADBC(@10),B'10000000'                        02S0112
*    DSQBADFC = '0'B;                  /*FORWARD PTRS ARE GOOD NOW   */
         NI    DSQBADFC(@10),B'01111111'                        02S0113
*    CHNRSAVP->DSABBCHN = DSABBCHN;    /*UPDATE BACK PTR OF DSAB NEXT
*                                        AFTER LAST ONE MOVED        */
         L     @05,DSABBCHN(,DSABPTR)                           02S0114
         ST    @05,DSABBCHN(,CHNRSAVP)                          02S0114
*    DSABBCHN = DSQLASTP;              /*NEW BACK PTR FOR 1ST DSAB
*                                        MOVED TO END OF CHAIN       */
         L     @15,DSQLASTP(,@10)                               02S0115
         ST    @15,DSABBCHN(,DSABPTR)                           02S0115
*    DSQLASTP = LASTDSAB;              /*UPDATE NEW QDB LAST DSAB PTR*/
         ST    LASTDSAB,DSQLASTP(,@10)                          02S0116
*    DSQBADBC = '0'B;                  /*DSAB BACK PTRS ARE GOOD NOW */
         NI    DSQBADBC(@10),B'01111111'                        02S0117
*  END;                                /*END DSAB CHAINING PROCESS   */
*ELSE;                                 /*DSAB (GROUP) ALREADY AT END OF
*                                        CHAIN; NO CHAINING REQUIRED */
@RF00103 DS    0H                                               02S0120
*END DSABCHNR;                                                  02S0120
@EL00002 DS    0H                                               02S0120
@EF00002 DS    0H                                               02S0120
@ER00002 LM    @14,@12,12(@13)                                  02S0120
         BR    @14                                              02S0120
*END IEFDB481                                                   01S0121
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (RIUPCSSP)                                        *
*/*%INCLUDE SYSLIB  (RIUPCSDT)                                        *
*/*%INCLUDE SYSLIB  (IEFZB4D9)                                        *
*/*%INCLUDE SYSLIB  (IHADSAB )                                        *
*/*%INCLUDE SYSLIB  (IEZJSCB )                                        *
*/*%INCLUDE SYSLIB  (IEFASIOT)                                        *
*/*%INCLUDE SYSLIB  (IEFZB505)                                        *
*/*%INCLUDE SYSLIB  (IHAQDB  )                                        *
*/*%INCLUDE SYSLIB  (IEFZB4D5)                                        *
*/*%INCLUDE SYSLIB  (IEFTIOT1)                                        *
*/*%INCLUDE SYSLIB  (DISPPRCR)                                        *
*/*%INCLUDE SYSLIB  (DISPPRCS)                                        *
*/*%INCLUDE SYSLIB  (DSABCHNR)                                        *
*/*%INCLUDE SYSLIB  (DSABCHNS)                                        *
*;                                                              01S0121
@DATA    DS    0H
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    7F
@AL00001 DS    8A
@TF00001 DS    F
IEFDB481 CSECT
         DS    0F
@CF00115 DC    F'1'
@CF00585 DC    F'176'
@CF00594 DC    F'-4'
@CF00072 DC    XL4'E6000000'
@DATD    DSECT
         DS    0D
SWEPAPTR DS    A
ULSTINDX DS    F
TCBJSCB  DS    A
SIOTPTR  DS    A
QDBPTR   DS    A
TIOTPTR  DS    A
DUMRSNCD DS    CL4
UNALKEYT DS    CL40
WRKBITS  DS    BL1
IEFDB481 CSECT
         DS    0F
@SIZDATD DC    AL1(230)
         DC    AL3(@ENDDATD-@DATD)
@CV00075 DC    V(IEFDB4A1)
         DS    0D
IEFDB481 CSECT
         DS   0H
PATCHLOC DC ((@DATA-@PSTART)/20)X'00'
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IEFDB481 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
CHNRSAVP EQU   @04
LASTDSAB EQU   @02
RLSTINDX EQU   @04
DSABPTR  EQU   @03
R0       EQU   @00
R1       EQU   @01
RDSABLST EQU   0
UDSABLST EQU   0
DSAB     EQU   0
DSABFCHN EQU   DSAB+4
DSABBCHN EQU   DSAB+8
DSABOPCT EQU   DSAB+14
DSABTIOT EQU   DSAB+16
DSABGIDP EQU   DSAB+24
DSABANMP EQU   DSAB+28
DSABORG  EQU   DSAB+32
DSABORG1 EQU   DSABORG
DSABORG2 EQU   DSABORG+1
DSABFLG1 EQU   DSAB+34
DSABPALC EQU   DSABFLG1
DSABCATM EQU   DSABFLG1
DSABNUSE EQU   DSABFLG1
DSABFLG2 EQU   DSAB+35
DSABFLG3 EQU   DSAB+36
DSABFLG4 EQU   DSAB+37
DSABSIOT EQU   DSAB+64
DSABANMI EQU   0
DSABANAM EQU   DSABANMI+1
DSABGIDL EQU   0
IEZJSCB  EQU   0
JSCBSEC1 EQU   IEZJSCB+188
JSCHPCE  EQU   JSCBSEC1+4
JSCBDCB  EQU   JSCBSEC1+36
JSCBOPTS EQU   JSCBSEC1+48
JSCBSWT1 EQU   JSCBSEC1+55
JSCBWTP  EQU   JSCBSEC1+64
JSCBWTFG EQU   JSCBWTP
JSCBEND1 EQU   IEZJSCB+260
INDMSIOT EQU   0
SIOTDSKA EQU   INDMSIOT
SCTUSADD EQU   INDMSIOT+20
SIOTBYT1 EQU   INDMSIOT+43
SIOTBYT3 EQU   INDMSIOT+46
SIOTTSTC EQU   INDMSIOT+47
SIOTBYT0 EQU   INDMSIOT+52
SCTSDISP EQU   INDMSIOT+55
SIOTDLET EQU   SCTSDISP
SCTSBYT1 EQU   INDMSIOT+56
SCTSBYT2 EQU   INDMSIOT+57
SCTSBYT3 EQU   INDMSIOT+58
SCTSBYT4 EQU   INDMSIOT+59
SCTUTYPE EQU   INDMSIOT+60
SIOTDEVT EQU   SCTUTYPE
SIOUBYT3 EQU   SIOTDEVT+2
SIOTALTD EQU   INDMSIOT+92
SIOTBYT2 EQU   INDMSIOT+103
SWAEPA   EQU   0
SWBLKPTR EQU   SWAEPA
SWVAFW   EQU   SWAEPA+4
SWVA     EQU   SWVAFW
SWBLKID  EQU   SWVAFW+3
SWLNGTH  EQU   SWAEPA+8
SWCHNPTR EQU   SWAEPA+12
QDB      EQU   0
TIOT1    EQU   0
TIOENTRY EQU   0
TIOESTTA EQU   TIOENTRY+1
TIOERLOC EQU   TIOENTRY+2
TIOELINK EQU   TIOERLOC+1
TIOESYOT EQU   TIOELINK
TIOEDDNM EQU   TIOENTRY+4
TIOESTTC EQU   TIOENTRY+15
TIOESTTB EQU   TIOENTRY+16
POOLSTAR EQU   TIOENTRY+20
RDSABSP  EQU   0
RDSABCNT EQU   0
RSNCODE  EQU   0
LASTEPAP EQU   0
CTLBLKPS EQU   0
JSCBPTR  EQU   CTLBLKPS
DEPARMS  EQU   0
DENQRETN EQU   DEPARMS+232
DEDMYEPA EQU   DEPARMS+240
DEDMYAS  EQU   DEPARMS+260
SMFPARMS EQU   0
JSCBSEC2 EQU   JSCBEND1
JSCBSEC3 EQU   JSCBEND1
JSCBJCT  EQU   JSCBSEC3
JSCBJCTA EQU   JSCBJCT+1
JSCBASID EQU   JSCBSEC3+8
JSCBJNL  EQU   JSCBSEC3+28
JSCBJJSB EQU   JSCBJNL
JSCBSUB  EQU   JSCBSEC3+40
JSCDSABQ EQU   JSCBSEC3+60
JSCSCT   EQU   JSCBSEC3+68
JSCRSV35 EQU   JSCBSEC3+96
JSCRSV36 EQU   JSCRSV35
JSCRSV37 EQU   JSCRSV35+2
JSCRSV45 EQU   JSCBSEC3+112
JSCRSV46 EQU   JSCRSV45
JSCRSV47 EQU   JSCRSV45+2
DSABQDB  EQU   QDB
DSQFRSTP EQU   DSABQDB+12
DSQBADBC EQU   DSQFRSTP
DSQLASTP EQU   DSABQDB+16
DSQBADFC EQU   DSQLASTP
TIOEDEVE EQU   TIOESTTB
TIOSTTB  EQU   TIOEDEVE
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
TIOUCBP  EQU   TIOEDEVE+1
TIOVERF  EQU   TIOSTTB
TIOUNLD  EQU   TIOSTTB
TIOMNTD  EQU   TIOSTTB
TIOSETU  EQU   TIOSTTB
TIOVLSR  EQU   TIOSTTB
TIOPVIO  EQU   TIOSTTB
TIOREQD  EQU   TIOSTTB
TIOUSED  EQU   TIOSTTB
@NM00030 EQU   DSABQDB+24
DSQBDSP  EQU   DSABQDB+22
DSQFDSP  EQU   DSABQDB+20
DSQNELMS EQU   DSABQDB+8
DSQDBLN  EQU   DSABQDB+6
DSQATTRS EQU   DSABQDB+4
DSQDBID  EQU   DSABQDB
JSCBEND3 EQU   JSCBSEC3+120
JSCRSV52 EQU   JSCBSEC3+116
JSCRSV51 EQU   JSCRSV47+1
JSCRSV50 EQU   JSCRSV47
JSCRSV49 EQU   JSCRSV46+1
JSCRSV48 EQU   JSCRSV46
JSCRSV44 EQU   JSCBSEC3+108
JSCRSV43 EQU   JSCBSEC3+104
JSCRSV42 EQU   JSCBSEC3+100
JSCRSV41 EQU   JSCRSV37+1
JSCRSV40 EQU   JSCRSV37
JSCRSV39 EQU   JSCRSV36+1
JSCRSV38 EQU   JSCRSV36
JSCBUFPT EQU   JSCBSEC3+92
JSCBACT  EQU   JSCBSEC3+88
JSCBSWSP EQU   JSCBSEC3+87
JSCRSV33 EQU   JSCBSEC3+86
JSCDDNUM EQU   JSCBSEC3+84
JSCRSV53 EQU   JSCBSEC3+82
JSCDDNNO EQU   JSCBSEC3+80
JSCBVATA EQU   JSCBSEC3+76
JSCTMCOR EQU   JSCBSEC3+72
JSCSCTP  EQU   JSCSCT+1
JSCRSV55 EQU   JSCSCT
JSCRSV54 EQU   JSCBSEC3+64
JSCBSSIB EQU   JSCBSEC3+56
JSCBFRBA EQU   JSCBSEC3+48
JSCRSV28 EQU   JSCBSEC3+46
JSCBSONO EQU   JSCBSEC3+44
JSCBSUBA EQU   JSCBSUB+1
JSCRSV31 EQU   JSCBSUB
JSCBSMLR EQU   JSCBSEC3+36
JSCBJNLR EQU   JSCBSEC3+32
JSCBJNLA EQU   JSCBJNL+1
JSCBJSBT EQU   JSCBJJSB
JSCBJSBX EQU   JSCBJJSB
JSCBJSBA EQU   JSCBJJSB
JSCBJSBI EQU   JSCBJJSB
@NM00012 EQU   JSCBJJSB
JSCBJNLE EQU   JSCBJJSB
JSCBJNLF EQU   JSCBJJSB
JSCBJNLN EQU   JSCBJJSB
@NM00011 EQU   JSCBSEC3+24
JSCBJRBA EQU   JSCBSEC3+16
JSCBIECB EQU   JSCBSEC3+12
JSCRSV25 EQU   JSCBSEC3+10
JSCBTJID EQU   JSCBASID
JSCBPSCB EQU   JSCBSEC3+4
JSCJCTP  EQU   JSCBJCTA
JSCRSV24 EQU   JSCBJCT
JSCBEND2 EQU   JSCBSEC2
SMFBUFLP EQU   SMFPARMS+4
SMFBUF1P EQU   SMFPARMS
@NM00003 EQU   DEPARMS+304
DETCTIOL EQU   DEPARMS+300
DETCTIOP EQU   DEPARMS+296
DETDQLST EQU   DEPARMS+280
DEALASTP EQU   DEPARMS+276
DEASGNP  EQU   DEDMYAS+12
@NM00002 EQU   DEDMYAS
DEWLASTP EQU   DEPARMS+256
DEWRITP  EQU   DEDMYEPA+12
@NM00001 EQU   DEDMYEPA
DEDSNQRC EQU   DENQRETN+4
DEDSNQEN EQU   DENQRETN
DECPYLEN EQU   DEPARMS+228
DECPYLOC EQU   DEPARMS+224
DEJSCB   EQU   DEPARMS+220
DESCT    EQU   DEPARMS+216
DEJCT    EQU   DEPARMS+212
DESIOT   EQU   DEPARMS+208
DETCB    EQU   DEPARMS+204
DEALFMAP EQU   DEPARMS+200
DECORE   EQU   DEPARMS
SCTPTR   EQU   CTLBLKPS+16
JCTPTR   EQU   CTLBLKPS+12
TCBPTR   EQU   CTLBLKPS+8
ASCBPTR  EQU   CTLBLKPS+4
INFOCODE EQU   RSNCODE+2
ERRCODE  EQU   RSNCODE
TIOTFEND EQU   POOLSTAR+16
TIOPSLOT EQU   POOLSTAR+13
TIOPSTTB EQU   POOLSTAR+12
TIOPPOOL EQU   POOLSTAR+4
TIOPNSRT EQU   POOLSTAR+3
@NM00032 EQU   POOLSTAR+2
TIOPNSLT EQU   POOLSTAR+1
@NM00031 EQU   POOLSTAR
TIOEFSRT EQU   TIOENTRY+17
TIOSVERF EQU   TIOESTTB
TIOSUNLD EQU   TIOESTTB
TIOSMNTD EQU   TIOESTTB
TIOSSETU EQU   TIOESTTB
TIOSVLSR EQU   TIOESTTB
TIOSPVIO EQU   TIOESTTB
TIOSREQD EQU   TIOESTTB
TIOSUSED EQU   TIOESTTB
TIOSBALS EQU   TIOESTTC
TIOSBALP EQU   TIOESTTC
TIOSVOLS EQU   TIOESTTC
TIOSVOLP EQU   TIOESTTC
TIOSAFFS EQU   TIOESTTC
TIOSAFFP EQU   TIOESTTC
TIOSDEFR EQU   TIOESTTC
TIOSDKCR EQU   TIOESTTC
TIOEJFCB EQU   TIOENTRY+12
TIOTREM  EQU   TIOELINK
TIOESSDS EQU   TIOESYOT
TIOESYIN EQU   TIOELINK
TIOEQNAM EQU   TIOELINK
TIOEDYNM EQU   TIOELINK
TIOTTERM EQU   TIOELINK
TIOTRV01 EQU   TIOELINK
TIOSYOUT EQU   TIOELINK
TIOEWTCT EQU   TIOERLOC
TIOSDSP2 EQU   TIOESTTA
TIOSDSP1 EQU   TIOESTTA
TIOSLABL EQU   TIOESTTA
TIOSDADS EQU   TIOESTTA
TIOSJBLB EQU   TIOESTTA
TIOSPLTS EQU   TIOESTTA
TIOSPLTP EQU   TIOESTTA
TIOSLTYP EQU   TIOESTTA
TIOELNGH EQU   TIOENTRY
TIOCSTEP EQU   TIOT1+8
TIOCNJOB EQU   TIOT1
QDBRV002 EQU   QDB+28
QDBPRDS  EQU   QDB+26
QDBPRSZ  EQU   QDB+24
QDBBPTDS EQU   QDB+22
QDBFPTDS EQU   QDB+20
QDBLELMP EQU   QDB+16
QDBFELMP EQU   QDB+12
QDBNELMS EQU   QDB+8
QDBRV001 EQU   QDB+6
QDBATTR  EQU   QDB+4
QDBQDB   EQU   QDB
SIODDSNL EQU   INDMSIOT+173
SIOVDSNL EQU   INDMSIOT+172
SIOVDSNT EQU   INDMSIOT+170
SVOLUNNO EQU   INDMSIOT+168
SIOTVMVP EQU   INDMSIOT+164
SIOTJFX  EQU   INDMSIOT+160
SJFCBPTR EQU   INDMSIOT+156
SIOTNPTR EQU   INDMSIOT+152
SIOTETIO EQU   INDMSIOT+148
SIOTATE  EQU   INDMSIOT+144
SVOLUNAD EQU   INDMSIOT+140
SIOTEDLP EQU   INDMSIOT+136
SIOTEDLS EQU   INDMSIOT+132
SIOTRSNC EQU   INDMSIOT+130
SCTANAME EQU   INDMSIOT+122
@NM00029 EQU   INDMSIOT+108
SIOTSSNM EQU   INDMSIOT+104
SIODDQCR EQU   SIOTBYT2
SIOVDQCR EQU   SIOTBYT2
SIOTCVOL EQU   SIOTBYT2
SIOTCNEW EQU   SIOTBYT2
SIOTCALC EQU   SIOTBYT2
SIOTGALL EQU   SIOTBYT2
SIOTDSPD EQU   SIOTBYT2
SIOTDMND EQU   SIOTBYT2
SIOTOPUC EQU   INDMSIOT+99
SIOTOUTR EQU   INDMSIOT+97
SIOTOUTC EQU   INDMSIOT+96
@NM00028 EQU   INDMSIOT+93
SIOTAUNC EQU   SIOTALTD
SIOTACAT EQU   SIOTALTD
SIOTADEL EQU   SIOTALTD
SIOTAKEP EQU   SIOTALTD
SIOTNPRV EQU   SIOTALTD
SIOJCATS EQU   SIOTALTD
@NM00027 EQU   SIOTALTD
@NM00026 EQU   SIOTALTD
@NM00025 EQU   INDMSIOT+91
SIOTNDSB EQU   INDMSIOT+88
@NM00024 EQU   INDMSIOT+84
SIOTDPCD EQU   INDMSIOT+82
@NM00023 EQU   INDMSIOT+81
SCTOUTPN EQU   INDMSIOT+80
SCTOUTNO EQU   INDMSIOT+76
SCTOUTNM EQU   INDMSIOT+68
SIOUCBAD EQU   SCTUTYPE+5
SIOUCNVT EQU   SCTUTYPE+4
SIOUBYT4 EQU   SIOTDEVT+3
@NM00022 EQU   SIOUBYT3
SIO3UREC EQU   SIOUBYT3
SIO3DISP EQU   SIOUBYT3
SIO3DACC EQU   SIOUBYT3
SIO3COMM EQU   SIOUBYT3
SIO3TAPE EQU   SIOUBYT3
SIOUBYT2 EQU   SIOTDEVT+1
SIOUBYT1 EQU   SIOTDEVT
SIOTOMN  EQU   SCTSBYT4
SIOTIPDI EQU   SCTSBYT4
SIOTVAFF EQU   SCTSBYT4
SIOTSTEP EQU   SCTSBYT4
SIOTASCI EQU   SCTSBYT4
@NM00021 EQU   SCTSBYT4
SIOTGDGA EQU   SCTSBYT4
SCTSGDGS EQU   SCTSBYT4
SCTSOLD  EQU   SCTSBYT3
SCTSMOD  EQU   SCTSBYT3
SCTSNEW  EQU   SCTSBYT3
SCTSYSOU EQU   SCTSBYT3
SCTVREF  EQU   SCTSBYT3
@NM00020 EQU   SCTSBYT3
SCTSYSNE EQU   SCTSBYT3
SCTDSNRF EQU   SCTSBYT3
SCTRECVD EQU   SCTSBYT2
SCTDEFER EQU   SCTSBYT2
SCTLABEL EQU   SCTSBYT2
SCTUNLBD EQU   SCTSBYT2
SCTJOBLB EQU   SCTSBYT2
SCTVOLAF EQU   SCTSBYT2
SIOTCATL EQU   SCTSBYT2
SIOCLUNL EQU   SCTSBYT2
SIOTJSCT EQU   SCTSBYT1
SCTUNAFF EQU   SCTSBYT1
SCTPARLM EQU   SCTSBYT1
SIOTQDSN EQU   SCTSBYT1
SIOTGDSN EQU   SCTSBYT1
SIOTCCAT EQU   SCTSBYT1
SCTSYSIN EQU   SCTSBYT1
SCTDUMMY EQU   SCTSBYT1
SIOTUNCT EQU   SCTSDISP
SIOTCTLG EQU   SCTSDISP
SIOTKEEP EQU   SCTSDISP
SIOTPASS EQU   SCTSDISP
SIOTPRIV EQU   SCTSDISP
S3400DSP EQU   SCTSDISP
@NM00019 EQU   SCTSDISP
SIOTVLCT EQU   INDMSIOT+54
SCTNMBUT EQU   INDMSIOT+53
SIOTRTRY EQU   SIOTBYT0
SIOTPUPV EQU   SIOTBYT0
SIOTNOPV EQU   SIOTBYT0
SIOTGIGN EQU   SIOTBYT0
SPVTAMSG EQU   SIOTBYT0
SIOTFUDA EQU   SIOTBYT0
SIOTDYAL EQU   SIOTBYT0
SIOTSSDS EQU   SIOTBYT0
SIOTGIID EQU   INDMSIOT+50
SCTVOLCT EQU   INDMSIOT+49
SCTSPOOL EQU   INDMSIOT+48
SIOTQNAM EQU   SIOTTSTC
@NM00018 EQU   SIOTTSTC
SIOTTERM EQU   SIOTTSTC
@NM00017 EQU   SIOTTSTC
@NM00016 EQU   SIOTBYT3
SIOTJES3 EQU   SIOTBYT3
SIOCDEVT EQU   SIOTBYT3
SIOALIAS EQU   SIOTBYT3
SCTDDINO EQU   INDMSIOT+44
SIOTDDNT EQU   SIOTBYT1
SIOTALCD EQU   SIOTBYT1
SIODADSM EQU   SIOTBYT1
SIOTDADR EQU   SIOTBYT1
SIODUNAL EQU   SIOTBYT1
SIOVAMDS EQU   SIOTBYT1
SIOTHOLD EQU   SIOTBYT1
SIOTOCKP EQU   SIOTBYT1
SIOPSCNT EQU   INDMSIOT+42
SIOTREFN EQU   INDMSIOT+40
SIOTOTUN EQU   INDMSIOT+39
SIOTVRSB EQU   INDMSIOT+36
@NM00015 EQU   INDMSIOT+35
SCTPJFCB EQU   INDMSIOT+32
@NM00014 EQU   INDMSIOT+31
SCTPSIOT EQU   INDMSIOT+28
SIOTAFID EQU   INDMSIOT+26
@NM00013 EQU   INDMSIOT+24
SIODSNTE EQU   INDMSIOT+22
SIOTUNAF EQU   SCTUSADD
SIOTDEST EQU   INDMSIOT+12
SCTDDNAM EQU   INDMSIOT+4
SIOTTYPE EQU   INDMSIOT+3
JSCBCSCB EQU   JSCBSEC1+68
JSCBPMG  EQU   JSCBWTP+2
JSCBWTSP EQU   JSCBWTP+1
JSCRSV23 EQU   JSCBWTFG
JSCRSV22 EQU   JSCBWTFG
JSCRSV21 EQU   JSCBWTFG
JSCRSV20 EQU   JSCBWTFG
JSCRSV19 EQU   JSCBWTFG
JSCRSV18 EQU   JSCBWTFG
JSCBRET  EQU   JSCBWTFG
JSCBIOFG EQU   JSCBWTFG
@NM00010 EQU   JSCBSEC1+60
JSCBQMPI EQU   JSCBSEC1+56
JSCBPMSG EQU   JSCBSWT1
JSCRSV16 EQU   JSCBSWT1
JSCRSV15 EQU   JSCBSWT1
JSCRSV14 EQU   JSCBSWT1
JSCRSV13 EQU   JSCBSWT1
JSCRSV12 EQU   JSCBSWT1
JSCRSV11 EQU   JSCBSWT1
JSCBPASS EQU   JSCBSWT1
JSCBTTTR EQU   JSCBSEC1+52
JSCRSV10 EQU   JSCBSEC1+49
JSCBAUTH EQU   JSCBOPTS
JSCSIOTS EQU   JSCBOPTS
JSCRSV08 EQU   JSCBOPTS
JSCRSV07 EQU   JSCBOPTS
JSCRSV06 EQU   JSCBOPTS
JSCBLONG EQU   JSCBOPTS
JSCRSV05 EQU   JSCBOPTS
JSCRSV04 EQU   JSCBOPTS
JSCBSECB EQU   JSCBSEC1+44
JSCRSV03 EQU   JSCBSEC1+41
JSCBSTEP EQU   JSCBSEC1+40
JSCBDCBA EQU   JSCBDCB+1
JSCRSV02 EQU   JSCBDCB
JSCBID   EQU   JSCBSEC1+32
JSCBDBTB EQU   JSCBSEC1+28
JSCBIJSC EQU   JSCBSEC1+24
JSCBTCBP EQU   JSCBSEC1+20
JSCBPCC  EQU   JSCBSEC1+16
JSCBTCP  EQU   JSCBSEC1+12
JSCBSHR  EQU   JSCBSEC1+8
JSCHPCEA EQU   JSCHPCE+1
JSCRSV32 EQU   JSCHPCE
JSCRSV01 EQU   JSCBSEC1
@NM00009 EQU   IEZJSCB
DSABGRID EQU   DSABGIDL+4
DSABLLEN EQU   DSABGIDL
DSABANML EQU   DSABANMI
DSABRS04 EQU   DSAB+68
DSABRS03 EQU   DSAB+62
DSABDCBM EQU   DSAB+56
DSABSSCM EQU   DSAB+52
DSABSSNM EQU   DSAB+48
DSABPTTR EQU   DSAB+44
DSABTCBP EQU   DSAB+40
DSABRS02 EQU   DSAB+38
@NM00008 EQU   DSABFLG4
DSABCKSI EQU   DSABFLG4
DSABCKVL EQU   DSABFLG4
DSABCKDS EQU   DSABFLG4
@NM00007 EQU   DSABFLG3
DSABJSCT EQU   DSABFLG3
DSABCATL EQU   DSABFLG3
DSABVMSC EQU   DSABFLG3
DSABVAM  EQU   DSABFLG3
DSABPASS EQU   DSABFLG3
DSABDEFR EQU   DSABFLG3
@NM00006 EQU   DSABFLG2
DSABUNAL EQU   DSABFLG2
DSABIRM  EQU   DSABFLG2
DSABOPEN EQU   DSABFLG2
DSABPCAT EQU   DSABFLG1
DSABDCAT EQU   DSABFLG1
DSABCONV EQU   DSABFLG1
DSABDCNV EQU   DSABFLG1
DSABDALC EQU   DSABFLG1
@NM00005 EQU   DSABORG2
DSABTR   EQU   DSABORG2
DSABAM   EQU   DSABORG2
@NM00004 EQU   DSABORG2
DSABTQ   EQU   DSABORG2
DSABTX   EQU   DSABORG2
DSABGS   EQU   DSABORG2
DSABU    EQU   DSABORG1
DSABPO   EQU   DSABORG1
DSABMQ   EQU   DSABORG1
DSABCQ   EQU   DSABORG1
DSABCX   EQU   DSABORG1
DSABDA   EQU   DSABORG1
DSABPS   EQU   DSABORG1
DSABIS   EQU   DSABORG1
DSABSSVA EQU   DSAB+21
DSABRS01 EQU   DSAB+20
DSABLNTH EQU   DSAB+12
DSABID   EQU   DSAB
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00052 EQU   @RC00051
@ENDDATA EQU   *
         END   IEFDB481,(C'PLS0215',0603,75024)
