         TITLE 'READ WRITE EXIT - ISTCC016'
ISTCC016 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'ISTCC016  80.232'                                 0001
         DROP  @15
@PROLOG  DS    0H                                                  0002
         PRINT OFF
         PRINT ON
         PRINT OFF
         PRINT ON
         PRINT OFF
         PRINT ON
         PRINT OFF
         PRINT ON
*                                    /* SET UP BASE AND SCR @ZD10878*/
         LR    R12,R15             GET THE ENTRY ADDRESS
         USING ISTCC016,R12
         LA    R9,C16CBUF1   POINT TO EXIT WORK AREA           @ZD10878
         USING @DATD,R9      SET UP ADDRESSABILITY FOR SCRTCH  @ZD10878
*   RPLPTR=R1;                      /* SAVE POINTER TO RPL           */
         LR    RPLPTR,R1                                           0151
*   WAPTR=RPLUSFLD;                                                0152
         L     WAPTR,RPLUSFLD(,RPLPTR)                             0152
*   R13=ADDR($EXITSAV);             /* SET UP PTR TO MY SAVEAREA     */
         L     R13,RCAPTR(,WAPTR)                                  0153
         LA    R13,$EXITSAV(,R13)                                  0153
*   C16EXSAV=R14;                   /* SAVE R14 FOR RET TO VTAM      */
*                                                                  0154
         ST    R14,C16EXSAV                                        0154
*   /*****************************************************************/
*   /*                                                               */
*   /* CHECK THE RPL SO IT IS NOT ACTIVE                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0155
*   GEN(CHECK RPL=(RPLPTR));        /* CLEAR UP RPL BEFORE PROCESSING*/
         CHECK RPL=(RPLPTR)
*   INDX=AP;                        /* FEEDBACK FOR AP               */
         LA    INDX,2                                              0156
*   IF RPLPTR=ADDR($TLTRPL1) THEN   /* SET UP INDEX INTO TABLE     0157
*                                                            @D32JPGH*/
         LA    @00,$TLTRPL1(,WAPTR)                                0157
         CR    RPLPTR,@00                                          0157
         BNE   @RF00157                                            0157
*     INDX=CT;                      /* FEEDBACK FOR CT               */
*                                                                  0158
         LA    INDX,1                                              0158
*   /*****************************************************************/
*   /*                                                               */
*   /* CHK FOR TEMP ERRORS RETRY IF POSSIBLE                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0159
*   IF(RPLRTNCD='08'X&RPLFDB2='00'X)×(RPLRTNCD='0C'X&(RPLFDB2='03'X×
*       RPLFDB2='05'X)) THEN                                       0159
@RF00157 CLI   RPLRTNCD(RPLPTR),8                                  0159
         BNE   @GL00001                                            0159
         CLI   RPLFDB2(RPLPTR),0                                   0159
         BE    @RT00159                                            0159
@GL00001 CLI   RPLRTNCD(RPLPTR),12                                 0159
         BNE   @RF00159                                            0159
         CLI   RPLFDB2(RPLPTR),3                                   0159
         BE    @RT00159                                            0159
         CLI   RPLFDB2(RPLPTR),5                                   0159
         BE    @RT00159                                            0159
*     GOTO C16C0225;                                               0160
*   IF RPLRTNCD^='00'X              /* IF THERE WAS AN ERROR         */
*     THEN                                                         0161
@RF00159 CLI   RPLRTNCD(RPLPTR),0                                  0161
         BE    @RF00161                                            0161
*     DO;                                                          0162
*       IF RPLRTNCD='0C'X&(RPLFDB2>='0A'X&RPLFDB2<='0C'X)/* CHECK TO
*                                      SEE IF WE SHOULD STOP @D32JPGH*/
*         THEN                                                     0163
         CLI   RPLRTNCD(RPLPTR),12                                 0163
         BNE   @RF00163                                            0163
         CLI   RPLFDB2(RPLPTR),10                                  0163
         BL    @RF00163                                            0163
         CLI   RPLFDB2(RPLPTR),12                                  0163
         BH    @RF00163                                            0163
*         DO;                       /* NOT ERROR, BUT GET OUT NOW    */
*           CALL C16C0910;          /* FREE CURRENT ELEMENT          */
         BAL   @14,C16C0910                                        0165
*           GOTO C16C0251;          /* EXIT FROM THIS MODULE         */
         B     C16C0251                                            0166
*         END;                      /* END OF NOT ERROR,BUT STOP CODE*/
*       IF RPLRTNCD<=4&$DEVLU(INDX)=ON THEN/* IF LU STATUS PASSED  0168
*                                      BACK                  @DM00895*/
@RF00163 CLI   RPLRTNCD(RPLPTR),4                                  0168
         BH    @RF00168                                            0168
         LR    @11,INDX                                            0168
         MH    @11,@CH00337                                        0168
         ALR   @11,WAPTR                                           0168
         TM    $DEVLU-68(@11),B'00001000'                          0168
         BO    @RT00168                                            0168
*         GO TO C16C0253;           /* PROCESS THE FEEDBACK          */
*       IF RPLRTNCD='0C'X&          /* WAS IT AN RFT RECEIVED        */
*           RPLFDB2='02'X&INDX=CT   /* FROM THE CT                   */
*         THEN                                                     0170
@RF00168 CLI   RPLRTNCD(RPLPTR),12                                 0170
         BNE   @RF00170                                            0170
         CLI   RPLFDB2(RPLPTR),2                                   0170
         BNE   @RF00170                                            0170
         C     INDX,@CF00072                                       0170
         BNE   @RF00170                                            0170
*         DO;                       /* IF YES DO THE FOLLOWING       */
*           $RETREG=0;                                             0172
         SLR   @11,@11                                             0172
         ST    @11,$RETREG(,WAPTR)                                 0172
*           IF RPLAARLN=0 THEN                                     0173
         C     @11,RPLAARLN(,RPLPTR)                               0173
         BE    @RT00173                                            0173
*             GOTO C16C0100;                                       0174
*           ELSE                                                   0175
*             GOTO C16C0225;        /* GO & RETRY ORIG REQ           */
         B     C16C0225                                            0175
*         END;                                                     0176
*       IF RPLRTNCD='04'X&          /* WAS AN ATTENTION RECEIVED     */
*           RPLFDB2='01'X&INDX=CT   /* FROM CT                       */
*         THEN                      /* THEN DO THE FOLLOWING         */
@RF00170 CLI   RPLRTNCD(RPLPTR),4                                  0177
         BNE   @RF00177                                            0177
         CLI   RPLFDB2(RPLPTR),1                                   0177
         BNE   @RF00177                                            0177
         C     INDX,@CF00072                                       0177
         BNE   @RF00177                                            0177
*         DO;                                                      0178
*           $CIREQ=ON;              /* SET C. I. REQ ON              */
         OI    $CIREQ(WAPTR),B'00000001'                           0179
*           $RETREG=0;              /* SET ZERO RETURN CODE          */
         SLR   @00,@00                                             0180
         ST    @00,$RETREG(,WAPTR)                                 0180
*           GOTO C16C0100;                                         0181
         B     C16C0100                                            0181
*         END;                                                     0182
*       $RETREG=8;                  /* SET ERROR RC = 8              */
@RF00177 MVC   $RETREG(4,WAPTR),@CF00054                           0183
*C16C0075:                                                         0184
*       CALL C16C0920;              /* SET ERROR STATUS              */
C16C0075 BAL   @14,C16C0920                                        0184
*       GO TO C16C0251;             /* EXIT FROM THE MODULE          */
         B     C16C0251                                            0185
*     END;                                                         0186
*   ELSE                                                           0187
*     $RETREG=0;                    /* SET GOOD RC OF 00             */
@RF00161 SLR   @00,@00                                             0187
         ST    @00,$RETREG(,WAPTR)                                 0187
*C16C0100:                                                         0188
*   ;                                                              0188
C16C0100 DS    0H                                                  0189
*   IF $DEVLU(INDX)=ON              /* IF DEVICE IS AN LU            */
*     THEN                                                         0189
         LR    @11,INDX                                            0189
         MH    @11,@CH00337                                        0189
         ST    @11,@TF00001                                        0189
         ALR   @11,WAPTR                                           0189
         TM    $DEVLU-68(@11),B'00001000'                          0189
         BO    @RT00189                                            0189
*     GOTO C16C0253;                /* THIS CODE HANDLES LU        0190
*                                      INFORMATION                   */
*   IF INCT^=0                      /* ONE WAY MSG?                  */
*     THEN                                                         0191
         L     @11,@TF00001                                        0191
         L     @11,$CURELEM-68(@11,WAPTR)                          0191
         CLI   INCT(@11),0                                         0191
         BE    @RF00191                                            0191
*     DO;                                                          0192
*       IF RPLREQ='11'X×(RPLREQ='1D'X&RPLREOT=OFF)/* IF WRITE OR READ
*                                      FOR EOT                       */
*         THEN                                                     0193
         CLI   RPLREQ(RPLPTR),17                                   0193
         BE    @RT00193                                            0193
         CLI   RPLREQ(RPLPTR),29                                   0193
         BNE   @RF00193                                            0193
         TM    RPLREOT(RPLPTR),B'00001000'                         0193
         BNZ   @RF00193                                            0193
@RT00193 DS    0H                                                  0194
*         DO;                       /* READING DATA FROM CT          */
*           IF $DVINCT(1)^=0 THEN                                  0195
         CLI   $DVINCT(WAPTR),0                                    0195
         BE    @RF00195                                            0195
*             DO;                                                  0196
*               RPLBUFL=$DVINCT(1); /* SET READ COUNT                */
         SLR   @00,@00                                             0197
         IC    @00,$DVINCT(,WAPTR)                                 0197
         ST    @00,RPLBUFL(,RPLPTR)                                0197
*               RPLAREA=ADDR($TRMINPT);/* POINT TO BUFFER            */
         LA    @00,$TRMINPT(,WAPTR)                                0198
         ST    @00,RPLAREA(,RPLPTR)                                0198
*             END;                                                 0199
*           ELSE                                                   0200
*             DO;                                                  0200
         B     @RC00195                                            0200
@RF00195 DS    0H                                                  0201
*               RPLBUFL=LENGTH(SCRATCH);                           0201
         MVC   RPLBUFL(4,RPLPTR),@CF00072                          0201
*               RPLAREA=ADDR(SCRATCH);                             0202
         LA    @00,SCRATCH                                         0202
         ST    @00,RPLAREA(,RPLPTR)                                0202
*             END;                                                 0203
*           GEN REFS(RPLPTR,ARG,ISTCC016);                         0204
@RC00195 DS    0H                                                  0204
*                                 /* READ DATA */
 READ RPL=(RPLPTR),EXIT=ISTCC016,OPTCD=(ASY,TRUNC)
*           IF R15^=0 THEN          /* IF ERROR, GET OUT FAST        */
         LTR   R15,R15                                             0205
         BNZ   @RT00205                                            0205
*             GO TO C16C0075;       /* EXIT THE MODULE               */
*           $DVINCT(1)=0;           /* READ NO MORE DATA             */
         MVI   $DVINCT(WAPTR),X'00'                                0207
*           GOTO C16C0251;          /* EXIT                          */
         B     C16C0251                                            0208
*         END;                      /* END OF READ FOR DATA          */
*       CALL C16C0900;              /* PUT DATA IN CALLERS BUFFER    */
@RF00193 BAL   @14,C16C0900                                        0210
*     END;                          /* END OF GETTING DATA FOR     0211
*                                      TERMINAL                      */
*C16C0200:                                                         0212
*   IF INDX=CT&                     /* CHECK FOR LOGOFF RECEIVED     */
*       RPLFDB3='04'X               /* IF YES                        */
*     THEN                                                         0212
@RF00191 DS    0H                                                  0212
C16C0200 C     INDX,@CF00072                                       0212
         BNE   @RF00212                                            0212
         CLI   RPLFDB3(RPLPTR),4                                   0212
         BNE   @RF00212                                            0212
*     $EOJ=ON;                      /* SET EOJ FLAG TO FORCE CANCEL  */
         OI    $EOJ(WAPTR),B'00000010'                             0213
*C16C0250:                                                         0214
*   RPLSAVE=$CURELEM(INDX);         /* SAVE PTR TO CURRENT ELEM      */
@RF00212 DS    0H                                                  0214
C16C0250 LR    @11,INDX                                            0214
         MH    @11,@CH00337                                        0214
         L     @00,$CURELEM-68(@11,WAPTR)                          0214
         ST    @00,RPLSAVE                                         0214
*   RESPECIFY                                                      0215
*     PTR1 RESTRICTED;              /* DONT LET THIS REG GET ALTERED */
*   PTR1=INDX;                      /* POINT TO PARTICULAR ENTRY     */
         LR    PTR1,INDX                                           0216
*   CALL C16C0265;                  /* START THE NEXT RPL            */
         BAL   @14,C16C0265                                        0217
*   RESPECIFY                                                      0218
*     PTR1 UNRESTRICTED;            /* RELEASE THIS REGISTER FOR USE */
*   RPLPTR=RPLSAVE;                 /* RESTORE ELEM PTR              */
         L     RPLPTR,RPLSAVE                                      0219
*   IF RPLPTR^=0 THEN               /* ONLY RELEASE IF THERE IS    0220
*                                      SOMETHING TO RELEASE          */
         LTR   RPLPTR,RPLPTR                                       0220
         BZ    @RF00220                                            0220
*     CALL C16C0270;                /* FREE LAST RPL WE ARE DONE     */
         BAL   @14,C16C0270                                        0221
*C16C0251:                                                         0222
*   ;                                                              0222
@RF00220 DS    0H                                                  0222
C16C0251 DS    0H                                                  0223
*   R14=C16EXSAV;                   /* RESTORE RET REG               */
         L     R14,C16EXSAV                                        0223
*   RETURN;                         /* RETURN TO VTAM                */
@EL00001 DS    0H                                                  0224
@EF00001 DS    0H                                                  0224
@ER00001 BR    @14                                                 0224
*C16C0225:                                                         0225
*   GEN SETS(RPLPTR);                                              0225
C16C0225 DS    0H                                                  0225
         EXECRPL RPL=(RPLPTR)
*   IF R15^=0 THEN                  /* CHECK FOR AN ERROR            */
         LTR   R15,R15                                             0226
         BNZ   @RT00226                                            0226
*     GO TO C16C0075;               /* ERROR, GET OUT                */
*   GOTO C16C0251;                                                 0228
         B     C16C0251                                            0228
*                                                                  0229
*   /*****************************************************************/
*   /*                                                               */
*   /* CODE TO HANDLE RECORD MODE                                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0229
*C16C0253:                                                         0229
*   R6=0;                           /* SET FLAG FOR STARTING QUEUE 0229
*                                      AFTER RESPONSE OR NOT         */
C16C0253 SLR   R6,R6                                               0229
*   IF RPLRRESP=OFF                 /* IF IT IS A RESPONSE           */
*     THEN                                                         0230
         LA    @11,16                                              0230
         ALR   @11,RPLPTR                                          0230
         TM    RPLRRESP(@11),B'00001000'                           0230
         BNZ   @RF00230                                            0230
*     DO;                                                          0231
*                                                                  0231
*       /*************************************************************/
*       /*                                                           */
*       /* NOT A RESPONSE,EITHER NORMAL OR EXPIDITED FLOW            */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0232
*       IF RPLNFSYN=OFF             /* IF IT IS NOT SYNCHRONEOUS     */
*         THEN                                                     0232
         TM    RPLNFSYN(@11),B'00000100'                           0232
         BNZ   @RF00232                                            0232
*         DO;                                                      0233
*           IF RPLSEQNO^=$DVSEQNO(INDX)/* CHECK FOR SEQ ERRORS       */
*             THEN                                                 0234
         LR    @11,INDX                                            0234
         MH    @11,@CH00337                                        0234
         ALR   @11,WAPTR                                           0234
         CLC   RPLSEQNO+60(2,RPLPTR),$DVSEQNO-68(@11)              0234
         BE    @RF00234                                            0234
*             DO;                                                  0235
*               RPLSSNSO='0201'X;   /* SET ERROR STATUS              */
         MVC   RPLSSNSO(2,RPLPTR),@CB01927                         0236
*               GOTO C16C0300;      /* SEND RESPONSE                 */
         B     C16C0300                                            0237
*             END;                                                 0238
*           $DVSEQNO(INDX)=$DVSEQNO(INDX)+1;/* INCREMENT SEQ # BY 1  */
@RF00234 LR    @11,INDX                                            0239
         MH    @11,@CH00337                                        0239
         LA    @00,1                                               0239
         LH    @10,$DVSEQNO-68(@11,WAPTR)                          0239
         N     @10,@CF02026                                        0239
         ALR   @00,@10                                             0239
         STH   @00,$DVSEQNO-68(@11,WAPTR)                          0239
*         END;                                                     0240
*       IF BINBRAK=ON               /* IF BOUND WITH BRACKETS        */
*         THEN                                                     0241
@RF00232 LR    @11,INDX                                            0241
         MH    @11,@CH00337                                        0241
         LA    @10,$DEVSESP-68(@11,WAPTR)                          0241
         TM    BINBRAK-1(@10),B'00100000'                          0241
         BNO   @RF00241                                            0241
*         DO;                                                      0242
*           IF RPLBB=ON             /* IF BEGIN BRACKET ON           */
*             THEN                                                 0243
         TM    RPLBB+16(RPLPTR),B'10000000'                        0243
         BNO   @RF00243                                            0243
*             $DVBRKST(INDX)=INB;   /* GOING INTO BRACKET            */
         LA    @00,1                                               0244
         STC   @00,$DVBRKST-68(@11,WAPTR)                          0244
*           IF RPLEB=ON             /* IF END BRACKET ON             */
*             THEN                                                 0245
@RF00243 TM    RPLEB+16(RPLPTR),B'01000000'                        0245
         BNO   @RF00245                                            0245
*             $DVBRKST(INDX)=BETB;  /* GOING TO BETWEEN BRACKETS     */
         LR    @11,INDX                                            0246
         MH    @11,@CH00337                                        0246
         SLR   @00,@00                                             0246
         STC   @00,$DVBRKST-68(@11,WAPTR)                          0246
*         END;                                                     0247
@RF00245 DS    0H                                                  0248
*       N=MIN(RPLBUFL,RPLRLEN);     /* GET NUMBER OF BYTES GIVEN BY
*                                      VTAM                          */
@RF00241 L     @00,RPLBUFL(,RPLPTR)                                0248
         L     @11,RPLRLEN(,RPLPTR)                                0248
         CR    @00,@11                                             0248
         BNH   *+6
         LR    @00,@11                                             0248
         STH   @00,N                                               0248
*       IF $ASCII(INDX)=ON&RPLCSI=ON/* IF ASCII                      */
*         THEN                                                     0249
         LR    @11,INDX                                            0249
         MH    @11,@CH00337                                        0249
         ALR   @11,WAPTR                                           0249
         TM    $ASCII-68(@11),B'00000100'                          0249
         BNO   @RF00249                                            0249
         TM    RPLCSI+16(RPLPTR),B'00001000'                       0249
         BNO   @RF00249                                            0249
*         DO I=1 TO N;              /* TRANSLATE EACH CHARACTER TO 0250
*                                      ASCII                         */
         LA    @00,1                                               0250
         B     @DE00250                                            0250
@DL00250 DS    0H                                                  0251
*           DO M=1 TO LENGTH($TRASCII);/* SEARCH FOR ASCII MATCH     */
         LA    @00,1                                               0251
         STH   @00,M                                               0251
@DL00251 DS    0H                                                  0252
*             IF $TRMINPT(I)=$TRASCII(M)/* IF CHAR FOUND IN TABLE    */
*               THEN                                               0252
         LH    @11,I                                               0252
         L     @10,RCAPTR(,WAPTR)                                  0252
         ALR   @11,WAPTR                                           0252
         ALR   @10,@00                                             0252
         CLC   $TRMINPT-1(1,@11),$TRASCII-1(@10)                   0252
         BNE   @RF00252                                            0252
*               DO;                                                0253
*                 $TRMINPT(I)=M-1;  /* SET TO EBCDIC VALUE           */
         LH    @11,I                                               0254
         BCTR  @00,0                                               0254
         STC   @00,$TRMINPT-1(@11,WAPTR)                           0254
*                 GOTO C16C0254;                                   0255
         B     C16C0254                                            0255
*               END;                                               0256
*           END;                                                   0257
@RF00252 LA    @00,1                                               0257
         AH    @00,M                                               0257
         STH   @00,M                                               0257
         C     @00,@CF00083                                        0257
         BNH   @DL00251                                            0257
*           RPLSSNSO='1001'X;       /* SET ERROR STATUS              */
         MVC   RPLSSNSO(2,RPLPTR),@CB01931                         0258
*           GOTO C16C0300;          /* SEND RESPONSE                 */
         B     C16C0300                                            0259
*C16C0254:                                                         0260
*         END;                                                     0260
C16C0254 LA    @00,1                                               0260
         AH    @00,I                                               0260
@DE00250 STH   @00,I                                               0260
         CH    @00,N                                               0260
         BNH   @DL00250                                            0260
*       IF RPLDATA=OFF              /* IF NO DATA RECEIVED           */
*         THEN                                                     0261
@RF00249 LA    @11,16                                              0261
         ALR   @11,RPLPTR                                          0261
         TM    RPLDATA(@11),B'10000000'                            0261
         BNZ   @RF00261                                            0261
*         DO;                       /* THIS IS A CONTROL FUNCTION    */
*                                                                  0262
*           /*********************************************************/
*           /*                                                       */
*           /* PROCESSING A FUNCTION NOT DATA                        */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0263
*           IF RPLCNCEL=ON          /* WAS CANCEL REQUESTED          */
*             THEN                                                 0263
         TM    RPLCNCEL(@11),B'01000000'                           0263
         BNO   @RF00263                                            0263
*             DO;                                                  0264
*               $DVINCT(INDX)=LENGTH($TRMINPT);/* READ A NEW MESSAGE */
         LR    @11,INDX                                            0265
         MH    @11,@CH00337                                        0265
         LA    @00,80                                              0265
         STC   @00,$DVINCT-68(@11,WAPTR)                           0265
*               $TRMINPT=$TRMINPT&&$TRMINPT;/* SCRATCH OLD MSG       */
         XC    $TRMINPT(80,WAPTR),$TRMINPT(WAPTR)                  0266
*               GOTO C16C0300;                                     0267
         B     C16C0300                                            0267
*             END;                  /* SEND RESPONSE                 */
*           IF RPLSIGNL=ON          /* IS IT A SIGNAL                */
*             THEN                                                 0269
@RF00263 TM    RPLSIGNL+16(RPLPTR),B'00010000'                     0269
         BNO   @RF00269                                            0269
*             DO;                                                  0270
*               $CIREQ=ON;          /* COMMUNICATION INTERVAL      0271
*                                      REQUIRED                      */
         OI    $CIREQ(WAPTR),B'00000001'                           0271
*               GOTO C16C0300;      /* SEND RESPONSE                 */
         B     C16C0300                                            0272
*             END;                                                 0273
*           IF RPLCHASE=ON          /* IS IT A CHASE                 */
*             THEN                                                 0274
@RF00269 LA    @11,16                                              0274
         ALR   @11,RPLPTR                                          0274
         TM    RPLCHASE(@11),B'00001000'                           0274
         BO    @RT00274                                            0274
*             GOTO C16C0300;        /* SEND RESPONSE                 */
*           IF RPLLUS=ON            /* IS LU STATU BEING SENT        */
*             THEN                                                 0276
         TM    RPLLUS(@11),B'00100000'                             0276
         BNO   @RF00276                                            0276
*             IF RPLSSEI=0          /* IS ERROR STATUS ZERO          */
*               THEN                                               0277
         CLI   RPLSSEI(RPLPTR),0                                   0277
         BE    @RT00277                                            0277
*               GOTO C16C0300;      /* SEND RESPONSE                 */
*             ELSE                                                 0279
*               GOTO C16C0075;                                     0279
         B     C16C0075                                            0279
*           IF RPLSHUTD=ON×RPLSHUTC=ON×RPLRSHUT=ON/* IF ANY SHUTDOWN
*                                      REQUESTS ARE ON               */
*             THEN                                                 0280
@RF00276 LA    @11,16                                              0280
         ALR   @11,RPLPTR                                          0280
         TM    RPLSHUTD(@11),B'00011010'                           0280
         BNZ   @RT00280                                            0280
*             GOTO C16C0075;                                       0281
*           IF RPLRTR=ON            /* IS TERMINAL READY TO RECEIVE
*                                      DATA                          */
*             THEN                                                 0282
         TM    RPLRTR(@11),B'01000000'                             0282
         BNO   @RF00282                                            0282
*             RPLSSNSO='0819'X;     /* SET ERROR STATUS              */
         MVC   RPLSSNSO(2,RPLPTR),@CB01933                         0283
*           ELSE                                                   0284
*             RPLSSNSO='1007'X;     /* SET ERROR STATUS              */
         B     @RC00282                                            0284
@RF00282 MVC   RPLSSNSO(2,RPLPTR),@CB01934                         0284
*           GOTO C16C0300;          /* SEND RESPONSE                 */
         B     C16C0300                                            0285
*         END;                                                     0286
*       IF RPLFMHDR=ON              /* IS THERE AN FM HEADER @DM00898*/
*         THEN                      /*                       @DM00898*/
@RF00261 TM    RPLFMHDR(RPLPTR),B'00000001'                        0287
         BNO   @RF00287                                            0287
*         DO;                       /*                       @DM00898*/
*           RPLSSNSO='1008'X;       /* SET ERROR STATUS      @DM00898*/
         MVC   RPLSSNSO(2,RPLPTR),@CB01935                         0289
*           GOTO C16C0300;          /* SEND RESPONSE         @DM00898*/
         B     C16C0300                                            0290
*         END;                      /*                       @DM00898*/
*                                                                  0291
*       /*************************************************************/
*       /*                                                           */
*       /* DATA RECEIVED,CHECK IF WE MUST WAIT FOR MORE              */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0292
*       IF RPLONLY^=ON&RPLLAST^=ON  /* IS IT END OF CHAIN            */
*         THEN                                                     0292
@RF00287 TM    RPLONLY+16(RPLPTR),B'00110000'                      0292
         BNZ   @RF00292                                            0292
*         DO;                                                      0293
*           $DVINCT(INDX)=0;        /* DON'T READ ANYMORE DATA FROM
*                                      TERMINAL                      */
         LR    @11,INDX                                            0294
         MH    @11,@CH00337                                        0294
         SLR   @00,@00                                             0294
         STC   @00,$DVINCT-68(@11,WAPTR)                           0294
*           GOTO C16C0300;          /* SEND RESPONSE                 */
         B     C16C0300                                            0295
*         END;                                                     0296
*       IF $CURELEM(INDX)=0×INCT=0×$DVSNDOK(INDX)='0'B/* IF NO     0297
*                                      ELEMENTS                      */
*         THEN                                                     0297
@RF00292 LR    @11,INDX                                            0297
         MH    @11,@CH00337                                        0297
         L     @10,$CURELEM-68(@11,WAPTR)                          0297
         LTR   @10,@10                                             0297
         BZ    @RT00297                                            0297
         CLI   INCT(@10),0                                         0297
         BE    @RT00297                                            0297
         ALR   @11,WAPTR                                           0297
         TM    $DVSNDOK-68(@11),B'00010000'                        0297
         BNZ   @RF00297                                            0297
@RT00297 DS    0H                                                  0298
*         $CIREQ=ON;                /* COMMUNICATION INTERVAL      0298
*                                      REQUIRED                      */
         OI    $CIREQ(WAPTR),B'00000001'                           0298
*       ELSE                                                       0299
*         DO;                       /* DATA RECEIVED FROM CT, PASS IT
*                                      BACK                          */
         B     @RC00297                                            0299
@RF00297 DS    0H                                                  0300
*           CALL C16C0900;          /* PASS BACK RESPONSE TO CALLER  */
         BAL   @14,C16C0900                                        0300
*           R6=1;                   /* START NEXT ELEMENT ON QUEUE   */
         LA    R6,1                                                0301
*         END;                      /* END OF DATA RECEIVED FROM CT  */
*C16C0300:                                                         0303
*       IF(RPLNFME=OFF×RPLRRN=ON)&  /* IF RESP TYPE 1 OR 2   @DM00899*/
*           (RPLEX=OFF×RPLSSEO^=0) THEN/* AND NORMAL OR ECEPTION   0303
*                                                            @DM00899*/
@RC00297 DS    0H                                                  0303
C16C0300 TM    RPLRRN+16(RPLPTR),B'00000001'                       0303
         BNZ   @GL00018                                            0303
         TM    RPLNFME+16(RPLPTR),B'00000010'                      0303
         BO    @RF00303                                            0303
@GL00018 TM    RPLEX+16(RPLPTR),B'00000100'                        0303
         BZ    @RT00303                                            0303
         CLI   RPLSSEO(RPLPTR),0                                   0303
         BE    @RF00303                                            0303
@RT00303 DS    0H                                                  0304
*         DO;                       /* RESPONSE REQUIRED TO INBOUND
*                                      REQUEST               @DM00899*/
*           IF RPLSSEO^=0 THEN      /* EXCEPTION RESPONSE    @DM00899*/
         CLI   RPLSSEO(RPLPTR),0                                   0305
         BE    @RF00305                                            0305
*             RPLEX=ON;             /* YES,SET EXCEPTION BIT @DM00899*/
         OI    RPLEX+16(RPLPTR),B'00000100'                        0306
*           ARG=$CID(INDX);         /* PICK UP THE CID               */
@RF00305 LR    @11,INDX                                            0307
         MH    @11,@CH00337                                        0307
         ALR   @11,WAPTR                                           0307
         ICM   ARG,15,$CID-68(@11)                                 0307
*           GEN REFS(RPLPTR,ARG);                                  0308
*                        /* SEND RESPONSE */
 SEND RPL=(RPLPTR),POST=SCHED,STYPE=RESP,OPTCD=SYN,ARG=(ARG)
*           IF R15^=0 THEN          /* CHECK FOR ERROR RETURN CODE   */
         LTR   R15,R15                                             0309
         BNZ   @RT00309                                            0309
*             GO TO C16C0075;       /* ERROR, GET OUT                */
*         END;                                                     0311
*       IF R6^=0×$CURELEM(INDX)=0   /* SHOULD WE FREE THIS ELEMENT 0312
*                                      AND START ANEW        @DM00899*/
*         THEN                                                     0312
@RF00303 SLR   @11,@11                                             0312
         CR    R6,@11                                              0312
         BNE   @RT00312                                            0312
         LR    @10,INDX                                            0312
         MH    @10,@CH00337                                        0312
         C     @11,$CURELEM-68(@10,WAPTR)                          0312
         BE    @RT00312                                            0312
*         GOTO C16C0250;            /* GET NEXT MESSAGE              */
*C16C0256:                                                         0314
*       RPLAREA=ADDR($TRMINPT);     /* POINT TO THE BUFFER           */
C16C0256 LA    @00,$TRMINPT(,WAPTR)                                0314
         ST    @00,RPLAREA(,RPLPTR)                                0314
*       RPLBUFL=$DVINCT(INDX);      /* SET FOR NUMBER OF BYTES TO  0315
*                                      READ                          */
         LR    @11,INDX                                            0315
         MH    @11,@CH00337                                        0315
         SLR   @00,@00                                             0315
         IC    @00,$DVINCT-68(@11,WAPTR)                           0315
         ST    @00,RPLBUFL(,RPLPTR)                                0315
*       ARG=$CID(INDX);             /* PICK UP THE CID               */
         ALR   @11,WAPTR                                           0316
         ICM   ARG,15,$CID-68(@11)                                 0316
*       GEN REFS(RPLPTR,ARG);                                      0317
*                      /* DO A RECEIVE */
 RECEIVE RPL=(RPLPTR),ARG=(ARG),EXIT=ISTCC016,                         X
               OPTCD=(ASY,TRUNC,Q),RTYPE=(DFSYN,DFASY,RESP)
*       IF R15^=0 THEN              /* CHECK FOR ERROR RETURN CODE   */
         LTR   R15,R15                                             0318
         BNZ   @RT00318                                            0318
*         GO TO C16C0075;           /* IF ERROR,EXIT                 */
*       GOTO C16C0251;              /* EXIT                          */
         B     C16C0251                                            0320
*     END;                                                         0321
*                                                                  0321
*   /*****************************************************************/
*   /*                                                               */
*   /* RESPONSE RECEIVED FROM OUR REQUEST                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0322
*   IF RPLEX=ON                     /* DID REQUEST TERMINATE WITH  0322
*                                      EXCEPTION                     */
*     THEN                                                         0322
@RF00230 TM    RPLEX+16(RPLPTR),B'00000100'                        0322
         BNO   @RF00322                                            0322
*     DO;                           /* YES IT TERMINATED WITH AN   0323
*                                      EXCEPTION                     */
*       IF RPLSSEI='08'X&(RPLSSMI='13'X×RPLSSMI='14'X×RPLSSMI='1B'X)
*                                   /* IS IT A TEMPORARY ERROR       */
*         THEN                                                     0324
         CLI   RPLSSEI(RPLPTR),X'08'                               0324
         BNE   @RF00324                                            0324
         CLI   RPLSSMI(RPLPTR),19                                  0324
         BE    @RT00324                                            0324
         CLI   RPLSSMI(RPLPTR),20                                  0324
         BE    @RT00324                                            0324
         CLI   RPLSSMI(RPLPTR),27                                  0324
         BNE   @RF00324                                            0324
@RT00324 DS    0H                                                  0325
*         DO;                                                      0325
*           CALL C16C0280;          /* ADD ELEMENT BACK ON QUE       */
         BAL   @14,C16C0280                                        0326
*           IF $DVSNDOK(INDX)=ON    /* IF OK TO SEND NEXT MSG        */
*             THEN                                                 0327
         LR    @11,INDX                                            0327
         MH    @11,@CH00337                                        0327
         ALR   @11,WAPTR                                           0327
         TM    $DVSNDOK-68(@11),B'00010000'                        0327
         BO    @RT00327                                            0327
*             GOTO C16C0250;        /* GET ELEMENT OFF QUE AND START
*                                      IT                            */
*           ELSE                                                   0329
*             GOTO C16C0256;        /* GOTO RECEIVE INPUT            */
         B     C16C0256                                            0329
*         END;                                                     0330
*       ELSE                                                       0331
*         GOTO C16C0075;            /* FLAG CT OR AP AS AN ERROR     */
*     END;                                                         0332
*   $DVSNDOK(INDX)=ON;                                             0333
@RF00322 LR    @11,INDX                                            0333
         MH    @11,@CH00337                                        0333
         ST    @11,@TF00001                                        0333
         ALR   @11,WAPTR                                           0333
         OI    $DVSNDOK-68(@11),B'00010000'                        0333
*   IF BINBRAK=ON                   /* IF BOUND WITH BRACKETS        */
*     THEN                                                         0334
         L     @11,@TF00001                                        0334
         LA    @11,$DEVSESP-68(@11,WAPTR)                          0334
         BCTR  @11,0                                               0334
         TM    BINBRAK(@11),B'00100000'                            0334
         BNO   @RF00334                                            0334
*     IF BINBKTR=ON&$DVBRKSN(INDX)=SNDEB/* CHECK BRACKET             */
*       THEN                                                       0335
         TM    BINBKTR(@11),B'00010000'                            0335
         BNO   @RF00335                                            0335
         L     @11,@TF00001                                        0335
         SLR   @00,@00                                             0335
         IC    @00,$DVBRKSN-68(@11,WAPTR)                          0335
         C     @00,@CF00139                                        0335
         BNE   @RF00335                                            0335
*       $DVBRKST(INDX)=BETB;        /* NOW BETWEEN BRACKETS          */
         SLR   @00,@00                                             0336
         L     @11,@TF00001                                        0336
         STC   @00,$DVBRKST-68(@11,WAPTR)                          0336
*     ELSE                                                         0337
*       IF $DVBRKSN(INDX)=SNDBB     /* WAS BEGIN BRACKET SUCCESSFUL  */
*         THEN                                                     0337
         B     @RC00335                                            0337
@RF00335 LA    @11,1                                               0337
         LR    @10,INDX                                            0337
         MH    @10,@CH00337                                        0337
         SLR   @00,@00                                             0337
         IC    @00,$DVBRKSN-68(@10,WAPTR)                          0337
         CR    @11,@00                                             0337
         BNE   @RF00337                                            0337
*         $DVBRKST(INDX)=INB;       /* NOW IN BRACKET                */
         STC   @11,$DVBRKST-68(@10,WAPTR)                          0338
*   IF $CURELEM(INDX)->INCT^=0      /* POINT TO CURRENT ELEMENT AND
*                                      CHECK FOR INPUT               */
*     THEN                                                         0339
@RF00337 DS    0H                                                  0339
@RC00335 DS    0H                                                  0339
@RF00334 LR    @11,INDX                                            0339
         MH    @11,@CH00337                                        0339
         L     @11,$CURELEM-68(@11,WAPTR)                          0339
         CLI   INCT(@11),0                                         0339
         BNE   @RT00339                                            0339
*     GOTO C16C0256;                /* GOTO RECEIVE INPUT            */
*   GOTO C16C0250;                  /* GET ELEMENT OFF QUE AND START
*                                      IT                            */
         B     C16C0250                                            0341
*   RESPECIFY                                                      0342
*    (R0,                                                          0342
*     R1) RESTRICTED;               /* DONT LET THESE REGISTERS GET
*                                      ALTRED                        */
*C16C1000:                                                         0343
*   GEN REFS(C16C1000,BASE,R12,R13,R14,R15,C16CBUF2);              0343
C16C1000 DS    0H                                                  0343
*                                                 /*SETUP @ZD10878*/
         USING C16C1000,R15
         STM   R14,R12,12(R13)     SAVE CALLERS REGISTERS
         L     R12,BASE            PICK UP COMMON BASE ADDRESS
         DROP  R15
         LA    R9,C16CBUF2 POINT TO MAINLINE WORK AREA         @ZD10878
*   SAVEA(2)=R13;                   /* SAVE ADDRESS OF CALLERS     0344
*                                      SAVEAREA                      */
         ST    R13,SAVEA+4                                         0344
*   BACKSAVE(3)=ADDR(SAVEA);        /* POINT TO MY SAVEAREA          */
         LA    @11,SAVEA                                           0345
         ST    @11,BACKSAVE+8(,R13)                                0345
*   R13=ADDR(SAVEA);                /* GET ADDRESS OF MY SAVEAREA    */
         LR    R13,@11                                             0346
*   INDX=R1;                        /* POINT TO ENTRY IN DEV TABLE   */
         LR    INDX,R1                                             0347
*   IF R0=0 THEN                    /* IF CALLED TO START A QUE      */
         LTR   R0,R0                                               0348
         BNZ   @RF00348                                            0348
*     DO;                           /* THEN START THE QUEUE PASSED IN
*                                      R1                            */
*       CALL C16C0265;              /* START THE QUEUE POINTED TO BY
*                                      R1                            */
         BAL   @14,C16C0265                                        0350
*       GO TO C16C1050;             /* EXIT THE MODULE               */
         B     C16C1050                                            0351
*     END;                          /* END OF ROUTINE TO START QUEUE */
*   IF R0=4 THEN                    /* IF CALLED TO PURGE A QUEUE    */
@RF00348 C     R0,@CF00068                                         0353
         BNE   @RF00353                                            0353
*     DO;                           /* PURGE QUEUE POINTED TO BY RU  */
*       RESPECIFY                                                  0355
*        (PTR1,                                                    0355
*         PTR2) RESTRICTED;         /* DONT ALTER REGISTERS          */
*       PTR2=PTR1;                  /* SAVE ADDRESS OF QUEUE         */
         LR    PTR2,PTR1                                           0356
*       R0=0;                       /* INDICATE NO ELEMENTS ON CHAIN */
         SLR   R0,R0                                               0357
*C16C1005:                                                         0358
*       PTR1=LASTCHN;               /* GET CHAIN PTR                 */
C16C1005 L     PTR1,LASTCHN(,PTR2)                                 0358
*       CS(PTR1,R0,LASTCHN);        /* REMOVE ALL ELEMENTS FROM QUEUE*/
         CS    PTR1,@00,LASTCHN(PTR2)                              0359
*       BC(4,C16C1005);             /* COMPARE AND SWAP FAILED, TRY
*                                      AGAIN                         */
         BC    4,C16C1005                                          0360
*       IF((PTR1&GATEBIT0)^=0) THEN /* CHECK FOR ANYTHING ON QUE   0361
*                                                            @ZD10874*/
         LR    @11,PTR1                                            0361
         N     @11,@CF00640                                        0361
         LTR   @11,@11                                             0361
         BZ    @RF00361                                            0361
*         DO;                                                      0362
*           R8=PTR1;                /* POINT TO NEXT ELEMENT @DA04688*/
         LR    R8,PTR1                                             0363
*C16C1025:                                                         0364
*           RPLPTR=R8;              /* POINT TO ELE TO BE FREED    0364
*                                                            @ZD10874*/
C16C1025 LR    RPLPTR,R8                                           0364
*           R8=RPLPTR->CHAIN&GATEBIT0;/* POINT TO NEXT ELE   @ZD10874*/
         L     R8,CHAIN(,RPLPTR)                                   0365
         N     R8,@CF00640                                         0365
*           CALL C16C0270;          /* FREE THIS ELEMENT     @ZD10874*/
         BAL   @14,C16C0270                                        0366
*           IF R8^=0 THEN           /* ANY ELEMENTS LEFT ON QUE    0367
*                                                            @ZD10874*/
         LTR   R8,R8                                               0367
         BNZ   @RT00367                                            0367
*             GOTO C16C1025;        /* YES FREE IT           @ZD10874*/
*         END;                      /* END OF LOOPING THOOUGHT THE 0369
*                                      ELEMENTS                      */
*       GO TO C16C1050;             /* EXIT THE MODULE               */
         B     C16C1050                                            0370
*     END;                          /* END OF FREEING HE QUE CODE    */
*C16C1050:                                                         0372
*   GEN REFS(R13,R12,R14);                                         0372
@RF00353 DS    0H                                                  0372
C16C1050 DS    0H                                                  0372
         L     R13,4(R13)          PICK UP LAST SAVE AREA ADDRESS
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
*   RESPECIFY                                                      0373
*    (PTR1,                                                        0373
*     PTR2) UNRESTRICTED;           /* REGISTERS ARE FREE AGAIN      */
*   RESPECIFY                                                      0374
*    (R0,                                                          0374
*     R1) UNRESTRICTED;             /* RELEASE THESE REGISTERS FOR 0374
*                                      USE                           */
*C16C0255:                                                         0375
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0375
         B     @PB00002                                            0375
C16C0255 DS    0H                                                  0376
*   RESPECIFY                                                      0376
*    (PTR1,                                                        0376
*     PTR2) RESTRICTED;             /* DONT ALTER REGISTERS          */
*   R7=R14;                         /* SAVE R14 FOR RETRUN           */
         LR    R7,R14                                              0377
*   PTR2=ADDR($MSGOTSD(INDX));      /* SAVE PTR1                     */
         LR    @11,INDX                                            0378
         MH    @11,@CH00337                                        0378
         LA    PTR2,$MSGOTSD-68(@11,WAPTR)                         0378
*   PTR1=LASTCHN&GATEBIT0;          /* PTR TO 1ST ELEMENT            */
         L     PTR1,LASTCHN(,PTR2)                                 0379
         N     PTR1,@CF00640                                       0379
*   IF PTR1=0 THEN                  /* IF NO OUTSTANDING MESSAGES    */
         LTR   PTR1,PTR1                                           0380
         BNZ   @RF00380                                            0380
*     DO;                           /* HANDLE AS SPECIAL CASE        */
*       LASTCHN=PTR1;               /* SET MESSAGES OUTSTANDING TO 0382
*                                      ZERO                          */
         ST    PTR1,LASTCHN(,PTR2)                                 0382
*       R1=ADDR($TLTECB2);          /* POINT TO ECB TO BE POSTED   0383
*                                                            @ZD10879*/
         L     R1,RCAPTR(,WAPTR)                                   0383
         LA    R1,$TLTECB2(,R1)                                    0383
*       IF $CTEQTT='1'B&($SNDRFLG='1'B×$EXIOWAT='1'B)/* POST ECB   0384
*                                                            @ZD10879*/
*         THEN                                                     0384
         TM    $CTEQTT(WAPTR),B'00010000'                          0384
         BNO   @RF00384                                            0384
         TM    $SNDRFLG(WAPTR),B'00100100'                         0384
         BZ    @RF00384                                            0384
*         CALL I00C1001;            /* POST ECB              @ZD10879*/
         L     @15,@CV01956                                        0385
         BALR  @14,@15                                             0385
*       PTR1=0;                     /* SHOW NO ELEMENT FOUND @ZD10879*/
@RF00384 SLR   PTR1,PTR1                                           0386
*       GO TO C16C0260;             /* EXIT FROM THE FUNCTION        */
         B     C16C0260                                            0387
*     END;                          /* END OF THE SPECIAL CASE       */
*   DO WHILE((PTR1->CHAIN&GATEBIT0)^=0);/* LOOP UNTIL LAST ELEMENT   */
@RF00380 B     @DE00389                                            0389
@DL00389 DS    0H                                                  0390
*     PTR2=PTR1;                    /* ADDR OF PTR TO NEXT ELEMENT   */
         LR    PTR2,PTR1                                           0390
*     PTR1=PTR2->CHAIN;             /* ADDR OF NEXT ELEMENT          */
         L     PTR1,CHAIN(,PTR2)                                   0391
*   END;                            /* END OF LOOP LOOKING FOR LAST
*                                      ELEMENT                       */
@DE00389 L     @00,CHAIN(,PTR1)                                    0392
         N     @00,@CF00640                                        0392
         LTR   @00,@00                                             0392
         BNZ   @DL00389                                            0392
*   PTR2->LASTCHN=GATEBIT1;         /* ZERO LAST CHAIN PTR           */
         MVC   LASTCHN(4,PTR2),@CF00642                            0393
*C16C0260:                                                         0394
*   R14=R7;                         /* RETURN TO THE CALLER          */
C16C0260 LR    R14,R7                                              0394
*   END C16C0255;                   /* END OF SUBROUTINE TO REMOVE 0395
*                                      ELEMENT FROM QUEUE            */
@EL00002 DS    0H                                                  0395
@EF00002 DS    0H                                                  0395
@ER00002 BR    @14                                                 0395
*   RESPECIFY                                                      0396
*    (PTR1,                                                        0396
*     PTR2) UNRESTRICTED;           /* REGISTERS ARE FREE AGAIN      */
*   RESPECIFY                                                      0397
*     R1 RESTRICTED;                /* DONT LET THIS REG GET ALTERED */
*C16C0265:                                                         0398
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0398
C16C0265 DS    0H                                                  0399
*   R8=R14;                         /* SAVE THE RETURN ADDRESS       */
         LR    R8,R14                                              0399
*   CALL C16C0255;                  /* GET AN RPL TO PROCESS         */
         BAL   @14,C16C0255                                        0400
*   $CURELEM(INDX)=PTR1;                                           0401
         LR    @11,INDX                                            0401
         MH    @11,@CH00337                                        0401
         ST    PTR1,$CURELEM-68(@11,WAPTR)                         0401
*   RPLPTR=ADDR($TLTRPL1);          /* POINT TO THE CT RPL           */
         LA    RPLPTR,$TLTRPL1(,WAPTR)                             0402
*   IF INDX=2 THEN                  /* CHECK TO SEE WHICH RPL IS   0403
*                                      CORRECT                       */
         C     INDX,@CF00139                                       0403
         BNE   @RF00403                                            0403
*     RPLPTR=ADDR($TLTRPL2);        /* MUST BE AN AP                 */
         LA    RPLPTR,$TLTRPL2(,WAPTR)                             0404
*   ARG=$CID(INDX);                 /* PICK UP THE CID               */
@RF00403 LR    @11,INDX                                            0405
         MH    @11,@CH00337                                        0405
         ST    @11,@TF00001                                        0405
         ALR   @11,WAPTR                                           0405
         ICM   ARG,15,$CID-68(@11)                                 0405
*   RPLUSFLD=WAPTR;                 /* SAVE WAPTR            @DM30415*/
         ST    WAPTR,RPLUSFLD(,RPLPTR)                             0406
*   IF R1^=0 THEN                   /* CHECK FOR ELEMENT TO PROCESS  */
         LTR   R1,R1                                               0407
         BZ    @RF00407                                            0407
*     DO;                           /* IF THER WAS A RETURNED      0408
*                                      ELEMENT, START IT             */
*       RESPECIFY                                                  0409
*         R1 UNRESTRICTED;          /* RELEASE THIS REGISTER FOR USE */
*       R7=ADDR(MSG);               /* POINT TO MSG TO BE SENT       */
         L     @11,@TF00001                                        0410
         L     @11,$CURELEM-68(@11,WAPTR)                          0410
         LA    R7,MSG(,@11)                                        0410
*       R6=OUTCT;                   /* SET UP LENGTH OF OUTBOUND MSG */
         SLR   R6,R6                                               0411
         IC    R6,OUTCT(,@11)                                      0411
*       IF $DEVLU(INDX)=OFF         /* IF NOT AN LU                  */
*         THEN                                                     0412
         LR    @11,WAPTR                                           0412
         AL    @11,@TF00001                                        0412
         TM    $DEVLU-68(@11),B'00001000'                          0412
         BNZ   @RF00412                                            0412
*         DO;                                                      0413
*           IF $DVCTBYT(INDX)=OFF   /* IF NO CONTROL BYTE PRESENT    */
*             THEN                                                 0414
         LR    @11,WAPTR                                           0414
         AL    @11,@TF00001                                        0414
         TM    $DVCTBYT-68(@11),B'00000010'                        0414
         BNZ   @RF00414                                            0414
*             GEN REFS(RPLPTR,ISTCC016,ARG,R6,R7);                 0415
 WRITE RPL=(RPLPTR),OPTCD=ASY,EXIT=ISTCC016,ARG=(ARG),                 X
               AREA=(R7),RECLEN=(R6)
*           ELSE                                                   0416
*             DO;                                                  0416
         B     @RC00414                                            0416
@RF00414 DS    0H                                                  0417
*               R7=R7+1;            /* SKIP OVER CONTROL BYTE        */
         AL    R7,@CF00072                                         0417
*               R6=R6-1;            /* REDUCE THE COUNT              */
         BCTR  R6,0                                                0418
*               IF MSG(1)='1'       /* SHOULD SCREEN BE ERASED       */
*                 THEN                                             0419
         LR    @11,INDX                                            0419
         MH    @11,@CH00337                                        0419
         L     @11,$CURELEM-68(@11,WAPTR)                          0419
         CLI   MSG(@11),C'1'                                       0419
         BNE   @RF00419                                            0419
*                 GEN REFS(RPLPTR,ISTCC016,ARG,R6,R7);             0420
 WRITE RPL=(RPLPTR),EXIT=ISTCC016,ARG=(ARG),RECLEN=(R6),               X
               AREA=(R7),OPTCD=(ASY,LBT,NERASE)
*               ELSE                                               0421
*                 GEN REFS(RPLPTR,ISTCC016,ARG,R6,R7);             0421
         B     @RC00419                                            0421
@RF00419 DS    0H                                                  0421
 WRITE RPL=(RPLPTR),EXIT=ISTCC016,ARG=(ARG),RECLEN=(R6),               X
               AREA=(R7),OPTCD=(ASY,LBT,ERASE)
*             END;                                                 0422
*         END;                                                     0423
*       ELSE                        /* PROCESS AN LU         @D32JPGH*/
*         DO;                                                      0424
         B     @RC00412                                            0424
@RF00412 DS    0H                                                  0425
*           IF BINBRAK=ON           /* DID WE BIND TO USE BRACKETS 0425
*                                                            @D32JPGH*/
*             THEN                                                 0425
         LR    @11,INDX                                            0425
         MH    @11,@CH00337                                        0425
         LA    @10,$DEVSESP-68(@11,WAPTR)                          0425
         TM    BINBRAK-1(@10),B'00100000'                          0425
         BNO   @RF00425                                            0425
*             DO;                                                  0426
*               RPLBB=OFF;                                         0427
*               RPLEB=OFF;                                         0428
         LA    @10,16                                              0428
         ALR   @10,RPLPTR                                          0428
         NI    RPLBB(@10),B'00111111'                              0428
*               $DVBRKSN(INDX)=0;   /* RESET BRACKET TO ZERO @D32JPGH*/
         SLR   @00,@00                                             0429
         STC   @00,$DVBRKSN-68(@11,WAPTR)                          0429
*               IF $DVBRKST(INDX)^=INB/* NOT IN BRACKET STATE      0430
*                                                            @D32JPGH*/
*                 THEN              /* THEN                  @D32JPGH*/
         SLR   @00,@00                                             0430
         IC    @00,$DVBRKST-68(@11,WAPTR)                          0430
         C     @00,@CF00072                                        0430
         BE    @RF00430                                            0430
*                 RPLBB=ON;         /* SET BEGIN BRACKET     @D32JPGH*/
         OI    RPLBB(@10),B'10000000'                              0431
*               IF($MSGOTSD(INDX)&GATEBIT0)=0&INCT=0/* IF NO MORE  0432
*                                      ELEMENTS AND DON'T NEED DATA  */
*                 THEN                                             0432
@RF00430 LR    @11,INDX                                            0432
         MH    @11,@CH00337                                        0432
         L     @00,$MSGOTSD-68(@11,WAPTR)                          0432
         N     @00,@CF00640                                        0432
         LTR   @00,@00                                             0432
         BNZ   @RF00432                                            0432
         L     @11,$CURELEM-68(@11,WAPTR)                          0432
         CLI   INCT(@11),0                                         0432
         BNE   @RF00432                                            0432
*                 RPLEB=ON;         /* END BRACKET           @D32JPGH*/
         OI    RPLEB+16(RPLPTR),B'01000000'                        0433
*               IF RPLBB=ON THEN    /* IF SENDING A BB               */
@RF00432 LA    @11,16                                              0434
         ALR   @11,RPLPTR                                          0434
         TM    RPLBB(@11),B'10000000'                              0434
         BNO   @RF00434                                            0434
*                 IF RPLEB=ON THEN  /* AND IF SENDING AN EB          */
         TM    RPLEB(@11),B'01000000'                              0435
         BNO   @RF00435                                            0435
*                   $DVBRKST(INDX)=BETB;/* THEN GOING BETEWEEN     0436
*                                      BRACKET                       */
         LR    @11,INDX                                            0436
         MH    @11,@CH00337                                        0436
         SLR   @00,@00                                             0436
         STC   @00,$DVBRKST-68(@11,WAPTR)                          0436
*                 ELSE              /* IF BB AND NOT EB              */
*                   $DVBRKSN(INDX)=SNDBB;/* OTHERWISE, ONLY SENDING
*                                      BB                            */
         B     @RC00435                                            0437
@RF00435 LR    @11,INDX                                            0437
         MH    @11,@CH00337                                        0437
         LA    @00,1                                               0437
         STC   @00,$DVBRKSN-68(@11,WAPTR)                          0437
*               ELSE                /* IF NOT SENDING BB             */
*                 IF RPLEB=ON THEN  /* IF AN EB WITHOUT A BB         */
         B     @RC00434                                            0438
@RF00434 TM    RPLEB+16(RPLPTR),B'01000000'                        0438
         BNO   @RF00438                                            0438
*                   IF BINBKTR=ON THEN/* AND IF CONDITIONAL        0439
*                                      TERMINATION                   */
         LR    @11,INDX                                            0439
         MH    @11,@CH00337                                        0439
         LA    @10,$DEVSESP-68(@11,WAPTR)                          0439
         TM    BINBKTR-1(@10),B'00010000'                          0439
         BNO   @RF00439                                            0439
*                     $DVBRKSN(INDX)=SNDEB;/* ONLY SENDING AN EB     */
         LA    @00,2                                               0440
         STC   @00,$DVBRKSN-68(@11,WAPTR)                          0440
*                   ELSE            /* SENDING EB ONLY,NO CONDITIONAL
*                                      TERMINATION                   */
*                     $DVBRKST(INDX)=BETB;/* GO TO BETWEEN BRACKETS  */
         B     @RC00439                                            0441
@RF00439 LR    @11,INDX                                            0441
         MH    @11,@CH00337                                        0441
         SLR   @00,@00                                             0441
         STC   @00,$DVBRKST-68(@11,WAPTR)                          0441
*             END;                  /* END OF BRACKET STATE MANAGER  */
@RC00439 DS    0H                                                  0442
@RF00438 DS    0H                                                  0442
@RC00434 DS    0H                                                  0443
*           IF $ASCII(INDX)=ON THEN /* IF ASCII, SET ALTERNATE CODE
*                                      BIT                   @ZD10887*/
@RF00425 LR    @11,INDX                                            0443
         MH    @11,@CH00337                                        0443
         ALR   @11,WAPTR                                           0443
         TM    $ASCII-68(@11),B'00000100'                          0443
         BNO   @RF00443                                            0443
*             RPLCSI=ON;            /* ITS ASCII, SET BIT            */
         OI    RPLCSI+16(RPLPTR),B'00001000'                       0444
*           $DVSNDOK(INDX)=OFF;     /* DONT SEND ANOTHER MSG         */
@RF00443 LR    @11,INDX                                            0445
         MH    @11,@CH00337                                        0445
         ST    @11,@TF00001                                        0445
         ALR   @11,WAPTR                                           0445
         NI    $DVSNDOK-68(@11),B'11101111'                        0445
*           IF INCT^=0&BINFMTRM=BINHDXFF THEN/* IF ANSWER EXPECTED 0446
*                                      AND HALF- DUPLEX FF CHANGE  0446
*                                      DIRECTION             @AX11982*/
         L     @11,@TF00001                                        0446
         L     @11,$CURELEM-68(@11,WAPTR)                          0446
         CLI   INCT(@11),0                                         0446
         BE    @RF00446                                            0446
         L     @11,@TF00001                                        0446
         LA    @11,$DEVSESP-68(@11,WAPTR)                          0446
         TM    BINFMTRM-1(@11),B'10000000'                         0446
         BNO   @RF00446                                            0446
         TM    BINFMTRM-1(@11),B'01000000'                         0446
         BNZ   @RF00446                                            0446
*             RPLCMD='1'B;                                         0447
         OI    RPLCMD+16(RPLPTR),B'00100000'                       0447
*           GEN REFS(RPLPTR,ARG,R6,R7);                            0448
@RF00446 DS    0H                                                  0448
 SEND RPL=(RPLPTR),ARG=(ARG),AREA=(R7),RECLEN=(R6),                    X
               STYPE=REQ,CONTROL=DATA,POST=SCHED,CHAIN=ONLY,           X
               OPTCD=(SYN,NFMHDR),RESPOND=(NEX,FME,NRRN)
*         END;                      /* END OF LU(RECORD) PROCESSING  */
*       IF R15^=0 THEN              /* CHECK TO SEE THE I/O WENT O.K */
@RC00412 LTR   R15,R15                                             0450
         BZ    @RF00450                                            0450
*         DO;                       /* BAD R.C., PROCESS             */
*           CALL C16C0920;          /* IF ERROR, FREE STORAGE        */
         BAL   @14,C16C0920                                        0452
*           GO TO C16C0266;         /* IF ERROR,GET OUT NOW          */
         B     C16C0266                                            0453
*         END;                      /* END OF BAD R.C, PROCESSING    */
*     END;                          /* END OF STARTING A NEW ELEMENT
*                                      OPERATION                     */
@RF00450 DS    0H                                                  0456
*   IF $DEVLU(INDX)='1'B THEN       /* IF THIS IS AN LU, RECEIVE RESP*/
@RF00407 LR    @11,INDX                                            0456
         MH    @11,@CH00337                                        0456
         ST    @11,@TF00001                                        0456
         ALR   @11,WAPTR                                           0456
         TM    $DEVLU-68(@11),B'00001000'                          0456
         BNO   @RF00456                                            0456
*     DO;                           /* LU, GET THE DATA              */
*       RPLBUFL=$DVINCT(INDX);      /* POINT TO BUFFER TO READ INTO  */
         L     @11,@TF00001                                        0458
         SLR   @00,@00                                             0458
         IC    @00,$DVINCT-68(@11,WAPTR)                           0458
         ST    @00,RPLBUFL(,RPLPTR)                                0458
*       RPLAREA=ADDR($TRMINPT);     /* LOCATION                      */
         LA    @00,$TRMINPT(,WAPTR)                                0459
         ST    @00,RPLAREA(,RPLPTR)                                0459
*       GEN REFS(RPLPTR,ARG);                                      0460
 RECEIVE RPL=(RPLPTR),ARG=(ARG),EXIT=ISTCC016,                         X
               OPTCD=(ASY,TRUNC,Q),RTYPE=(DFSYN,DFASY,RESP)
*       IF R15^=0 THEN              /* IF ERROR DURING RECEIVE       */
         LTR   R15,R15                                             0461
         BZ    @RF00461                                            0461
*         CALL C16C0920;            /* ERROR, GET RID OF EVERYTHING  */
         BAL   @14,C16C0920                                        0462
*     END;                          /* END OF LU RECEIVE FOR RESPONSE*/
@RF00461 DS    0H                                                  0464
*C16C0266:                                                         0464
*   R14=R8;                         /* RESTORE REG 14                */
@RF00456 DS    0H                                                  0464
C16C0266 LR    R14,R8                                              0464
*   END C16C0265;                   /* END OF ROUTINE TO START AN  0465
*                                      ELEMENT ON QUEUE              */
@EL00003 DS    0H                                                  0465
@EF00003 DS    0H                                                  0465
@ER00003 BR    @14                                                 0465
*C16C0270:                                                         0466
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0466
C16C0270 DS    0H                                                  0467
*   RESPECIFY                                                      0467
*     R5 RESTRICTED;                /* RESTRICT RETURN SAVE REGISTER */
*   R5=R14;                         /* SAVE REG 14                   */
         LR    R5,R14                                              0468
*   RESPECIFY                                                      0469
*    (R0,                                                          0469
*     R1) RESTRICTED;               /* DONT LET THESE REGISTERS GET
*                                      ALTRED                        */
*   R0=RPLPTR->OUTCT+10;            /* GET LENGTH OF GETMAINED AREA  */
         LA    R0,10                                               0470
         SLR   @11,@11                                             0470
         IC    @11,OUTCT(,RPLPTR)                                  0470
         ALR   R0,@11                                              0470
*   R1=RPLPTR;                      /* PTR TO AREA TO BE FREED       */
         LR    R1,RPLPTR                                           0471
*/*VFRMAIN  SIZE((0))STORAGE((1))SUBPOOL(0)                          */
*                                                                  0472
*   DO;                                                            0472
*     DO;                           /* CMZMREG (0,15) RESTRICT       */
*       RFY                                                        0474
*        (GPR00P,                                                  0474
*         GPR15P) RSTD;                                            0474
*     END;                          /* CMZMREG PUT SUBPOOL PARM IN 0475
*                                      HIGH- ORDER BYTE OF REG 15    */
*     GPR15F=0;                                                    0476
         SLR   GPR15F,GPR15F                                       0476
*     SLL(GPR15P,24);               /* COMBINE SUBPOOL AND SIZE IN 0477
*                                      REGISTER 0                    */
         SLL   GPR15P,24                                           0477
*     GPR00P=GPR00P×GPR15P;                                        0478
         OR    GPR00P,GPR15P                                       0478
*     DO;                           /* CMZMREG (0,15) RELEASE        */
*       RFY                                                        0480
*        (GPR00P,                                                  0480
*         GPR15P) UNRSTD;                                          0480
*     END;                          /* CMZMREG DECLARE AND RESTRICT
*                                      REG 1                         */
*     DO;                           /* CMZMREG (1) RESTRICT          */
*       RFY                                                        0483
*        (GPR01P) RSTD;                                            0483
*     END;                          /* CMZMREG INVOKE XREGSET MACRO
*                                      TO CHECK STORAGE PARM AND PUT
*                                      ADDR IN REGISTER 1            */
*/*XREGSET  PID('STORAGE')PPARM((1))RREG(1,GPR01P)                   */
*                                                                  0485
*     DO;                                                          0485
*                                                                  0485
*/*PARM ALREADY IN PROPER REGISTER                                   */
*                                                                  0486
*     END;                          /* XREGSET INVOKE FREEMAIN MACRO */
*     GEN;                                                         0487
         FREEMAIN R,LV=(0),A=(1)
*                                   /* UNRESTRICT REG 1              */
*     DO;                           /* CMZMREG (1) RELEASE           */
*       RFY                                                        0489
*        (GPR01P) UNRSTD;                                          0489
*     END;                          /* CMZMREG                       */
*   END;                            /* VFRMAIN                       */
*   RESPECIFY                                                      0492
*    (R0,                                                          0492
*     R1) UNRESTRICTED;             /* RELEASE THESE REGISTERS FOR 0492
*                                      USE                           */
*   R14=R5;                         /* RESTORE REG 14                */
         LR    R14,R5                                              0493
*   END C16C0270;                   /* END OF ROUTINE TO FREE ELEMENT
*                                      FROM QUEUE                    */
@EL00004 DS    0H                                                  0494
@EF00004 DS    0H                                                  0494
@ER00004 BR    @14                                                 0494
*C16C0280:                                                         0495
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0495
C16C0280 DS    0H                                                  0496
*   R5=R14;                         /* SAVE THE RETURN ADDRESS     0496
*                                                            @D32JPGH*/
         LR    R5,R14                                              0496
*   RESPECIFY                                                      0497
*     LASTCHN BASED(PTR1);                                         0497
*   PTR1=ADDR($MSGOTSD(INDX));      /* PTR TO 1ST ELEMENT    @D32JPGH*/
         LR    @11,INDX                                            0498
         MH    @11,@CH00337                                        0498
         LA    PTR1,$MSGOTSD-68(@11,WAPTR)                         0498
*   DO WHILE((PTR1->CHAIN&GATEBIT0)^=0);/* LOOP TILL LAST ELEMENT    */
         B     @DE00499                                            0499
@DL00499 DS    0H                                                  0500
*     PTR1=PTR1->CHAIN;             /* ADDR OF NEXT ELEMENT  @D32JPGH*/
         L     PTR1,CHAIN(,PTR1)                                   0500
*   END;                            /* END OF LOOP           @D32JPGH*/
@DE00499 SLR   @11,@11                                             0501
         L     @00,CHAIN(,PTR1)                                    0501
         N     @00,@CF00640                                        0501
         CR    @00,@11                                             0501
         BNE   @DL00499                                            0501
*   PTR1->CHAIN=$CURELEM(INDX);     /* PUT PTR INTO LAST ELEMENT     */
         LR    @10,INDX                                            0502
         MH    @10,@CH00337                                        0502
         L     @00,$CURELEM-68(@10,WAPTR)                          0502
         ST    @00,CHAIN(,PTR1)                                    0502
*   $CURELEM(INDX)=0;               /* SHOW NO CURRENT INDX          */
         ST    @11,$CURELEM-68(@10,WAPTR)                          0503
*   R14=R5;                         /* RETURN TO THE CALLER  @D32JPGH*/
         LR    R14,R5                                              0504
*   END C16C0280;                   /* END OF SUBROUTINE TO ADD    0505
*                                      ELEMENT TO QUE        @D32JPGH*/
@EL00005 DS    0H                                                  0505
@EF00005 DS    0H                                                  0505
@ER00005 BR    @14                                                 0505
*C16C0900:                                                         0506
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/* MOVE DATA TO CALLER           */
C16C0900 DS    0H                                                  0507
*   R5=R14;                         /* SAVE RETURN POINT             */
         LR    R5,R14                                              0507
*   IF INADR^=0 THEN                /* BUFFER AVAILABLE              */
         SLR   @11,@11                                             0508
         LR    @10,INDX                                            0508
         MH    @10,@CH00337                                        0508
         ST    @10,@TF00001                                        0508
         L     @10,$CURELEM-68(@10,WAPTR)                          0508
         C     @11,INADR(,@10)                                     0508
         BE    @RF00508                                            0508
*     DO;                           /* YES, PASSBACK DATA            */
*       M=0;                                                       0510
         STH   @11,M                                               0510
*       I=1;                        /* INITIAL COUNTERS              */
         MVC   I(2),@CH00072                                       0511
*       IF $DEVFRRS(INDX)='19'X×$DEVFRRS(INDX)='1C'X THEN/* 3270     */
         LR    @11,WAPTR                                           0512
         AL    @11,@TF00001                                        0512
         CLI   $DEVFRRS-68(@11),X'19'                              0512
         BE    @RT00512                                            0512
         LR    @11,WAPTR                                           0512
         AL    @11,@TF00001                                        0512
         CLI   $DEVFRRS-68(@11),X'1C'                              0512
         BNE   @RF00512                                            0512
@RT00512 DS    0H                                                  0513
*         I=7;                      /* YES, SKIP CURSOR ADDR         */
         MVC   I(2),@CH00215                                       0513
*       DO I=I TO LENGTH($TRMINPT); /* MOVE DATA BACK TO CALLER      */
@RF00512 LH    @00,I                                               0514
         B     @DE00514                                            0514
@DL00514 DS    0H                                                  0515
*         IF $TRMINPT(I)>=' ' THEN  /* DATA                          */
         LR    @11,@00                                             0515
         ALR   @11,WAPTR                                           0515
         CLI   $TRMINPT-1(@11),C' '                                0515
         BL    @RF00515                                            0515
*           DO;                     /* YES, PASS IT BACK             */
*             M=M+1;                /* INCREASE BYTES PASSED         */
         LA    @11,1                                               0517
         AH    @11,M                                               0517
         STH   @11,M                                               0517
*             CARRAY(M)=$TRMINPT(I)×' ';/* MOVE DATA, PUT IN UPPER 0518
*                                      CASE                          */
         LR    @10,INDX                                            0518
         MH    @10,@CH00337                                        0518
         L     @10,$CURELEM-68(@10,WAPTR)                          0518
         ST    @10,@TF00001                                        0518
         L     @10,INADR(,@10)                                     0518
         ALR   @10,@11                                             0518
         BCTR  @10,0                                               0518
         LR    @11,@00                                             0518
         ALR   @11,WAPTR                                           0518
         MVC   CARRAY(1,@10),$TRMINPT-1(@11)                       0518
         OI    CARRAY(@10),C' '                                    0518
*             IF M=INCT THEN        /* MORE ROOM IN THE BUFFER       */
         LH    @11,M                                               0519
         L     @10,@TF00001                                        0519
         SLR   @00,@00                                             0519
         IC    @00,INCT(,@10)                                      0519
         CR    @11,@00                                             0519
         BE    @RT00519                                            0519
*               GO TO C16C0905;     /* NO, LEAVE                     */
*           END;                    /* END, OF PASS BACK DATA        */
*         ELSE                      /* NOT DATA, CONTROL INFO        */
*           IF $TRMINPT(I)='11'X THEN/* 3270, IS IT A SBA CHARACTER  */
         B     @RC00515                                            0522
@RF00515 LH    @11,I                                               0522
         ALR   @11,WAPTR                                           0522
         CLI   $TRMINPT-1(@11),X'11'                               0522
         BNE   @RF00522                                            0522
*             I=I+2;                /* YES, SKIP ADDR CHARACTERS     */
         LH    @11,I                                               0523
         LA    @11,2(,@11)                                         0523
         STH   @11,I                                               0523
*       END;                        /* END OF MOVING BACK DATA       */
@RF00522 DS    0H                                                  0524
@RC00515 LA    @00,1                                               0524
         AH    @00,I                                               0524
         STH   @00,I                                               0524
@DE00514 C     @00,@CF00048                                        0524
         BNH   @DL00514                                            0524
*C16C0905:                                                         0525
*       MSGCOUNT=M;                 /* RETURN COUNT                  */
C16C0905 LR    @11,INDX                                            0525
         MH    @11,@CH00337                                        0525
         L     @11,$CURELEM-68(@11,WAPTR)                          0525
         L     @11,INADR(,@11)                                     0525
         LH    @00,M                                               0525
         BCTR  @11,0                                               0525
         STC   @00,MSGCOUNT(,@11)                                  0525
*       IF $ALTPRTR=ON THEN         /* IF AP PRESENT                 */
         TM    $ALTPRTR(WAPTR),B'00000010'                         0526
         BNO   @RF00526                                            0526
*         $TWOWAY=ON;               /* PUT REPLY THERE               */
         OI    $TWOWAY(WAPTR),B'01000000'                          0527
*       $POSTFLG=OFF;               /* RESET WAITING FLAG            */
@RF00526 NI    $POSTFLG(WAPTR),B'10111111'                         0528
*       R1=ADDR($TLTECB2);          /* POINT TO THE ECB TO POST      */
         L     R1,RCAPTR(,WAPTR)                                   0529
         LA    R1,$TLTECB2(,R1)                                    0529
*       CALL I00C1001;              /* POST THE ECB                  */
         L     @15,@CV01956                                        0530
         BALR  @14,@15                                             0530
*     END;                          /* END USE OF BUFFER TRMINPT     */
*   $TRMINPT=$TRMINPT&&$TRMINPT;                                   0532
@RF00508 XC    $TRMINPT(80,WAPTR),$TRMINPT(WAPTR)                  0532
*   $DVINCT(1)=LENGTH($TRMINPT);                                   0533
         MVI   $DVINCT(WAPTR),X'50'                                0533
*   R14=R5;                         /* RESTORE RETURN POINTER        */
         LR    R14,R5                                              0534
*   END C16C0900;                                                  0535
@EL00006 DS    0H                                                  0535
@EF00006 DS    0H                                                  0535
@ER00006 BR    @14                                                 0535
*C16C0910:                                                         0536
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0536
C16C0910 DS    0H                                                  0537
*   R7=R14;                         /* SAVE RETURN POINT             */
         LR    R7,R14                                              0537
*   RPLPTR=$CURELEM(INDX);          /* POINT TO ELEMENT BEING      0538
*                                      PROCESSED                     */
         LR    @11,INDX                                            0538
         MH    @11,@CH00337                                        0538
         L     RPLPTR,$CURELEM-68(@11,WAPTR)                       0538
*   $CURELEM(INDX)=0;               /* ZERO OUT CURRENT ELEMENT    0539
*                                      POINTER                       */
         SLR   @10,@10                                             0539
         ST    @10,$CURELEM-68(@11,WAPTR)                          0539
*   IF RPLPTR^=0 THEN               /* ONLY CALL IF THERE IS AN    0540
*                                      ELEMENT TO FREE               */
         CR    RPLPTR,@10                                          0540
         BE    @RF00540                                            0540
*     CALL C16C0270;                /* FREE THE ELEMENT              */
         BAL   @14,C16C0270                                        0541
*   R14=R7;                         /* RESTORE THE RETURN POINT      */
@RF00540 LR    R14,R7                                              0542
*   END C16C0910;                   /* END OF ROUTINE TO FREE CURRENT
*                                      ELEMENT                       */
@EL00007 DS    0H                                                  0543
@EF00007 DS    0H                                                  0543
@ER00007 BR    @14                                                 0543
*C16C0920:                                                         0544
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0544
C16C0920 DS    0H                                                  0545
*   R6=R14;                         /* SAVE THE RETURN POINT         */
         LR    R6,R14                                              0545
*   IF $ALTPRTR=ON&                 /* IF THERE IS AN AP             */
*       INDX=AP                     /* AND THIS IS A TEST TERMINAL   */
*     THEN                                                         0546
         TM    $ALTPRTR(WAPTR),B'00000010'                         0546
         BNO   @RF00546                                            0546
         C     INDX,@CF00139                                       0546
         BNE   @RF00546                                            0546
*     $ALTPRTR=OFF;                 /* DITCH THE AP                  */
         NI    $ALTPRTR(WAPTR),B'11111101'                         0547
*   ELSE                            /* THE ERROR WAS ON THE CT       */
*     DO;                                                          0548
         B     @RC00546                                            0548
@RF00546 DS    0H                                                  0549
*       IF $RPLERR=0 THEN                                          0549
         L     @00,$RPLERR-1(,WAPTR)                               0549
         ICM   @00,8,@CB01474                                      0549
         LTR   @00,@00                                             0549
         BNZ   @RF00549                                            0549
*         $RPLERR=RPLFDBK;          /* SET FIRST ERROR FEEDBACK      */
         MVC   $RPLERR(3,WAPTR),RPLFDBK(RPLPTR)                    0550
*       $CANCEL=ON;                 /* CANCEL THIS LOGON             */
@RF00549 OI    $CANCEL(WAPTR),B'00000010'                          0551
*       $CTERROR=ON;                /* CANCEL BECAUSE OF CT ERR      */
         OI    $CTERROR(WAPTR),B'01000000'                         0552
*       $POSTFLG=OFF;               /* STOP WAITING FOR DATA         */
         NI    $POSTFLG(WAPTR),B'10111111'                         0553
*     END;                                                         0554
*   CALL C16C0910;                  /* FREE THE CURRENT ELEMENT      */
@RC00546 BAL   @14,C16C0910                                        0555
*   R14=R6;                         /* RESTORE THE RETURN POINT      */
         LR    R14,R6                                              0556
*   END C16C0920;                   /* END OF SETTING ERROR STATUS   */
@EL00008 DS    0H                                                  0557
@EF00008 DS    0H                                                  0557
@ER00008 BR    @14                                                 0557
@PB00008 DS    0H                                                  0558
*   DO;                             /* TPEPILOG                      */
*     GEN(PRINT OFF);                                              0559
         PRINT OFF
*     DO;                                                          0560
*       DCL                                                        0561
*         GPR00F FIXED(31) REG(00),                                0561
*         GPR00P PTR(31) REG(00),                                  0561
*         GPR01F FIXED(31) REG(01),                                0561
*         GPR01P PTR(31) REG(01),                                  0561
*         GPR02F FIXED(31) REG(02),                                0561
*         GPR02P PTR(31) REG(02),                                  0561
*         GPR03F FIXED(31) REG(03),                                0561
*         GPR03P PTR(31) REG(03),                                  0561
*         GPR04F FIXED(31) REG(04),                                0561
*         GPR04P PTR(31) REG(04),                                  0561
*         GPR05F FIXED(31) REG(05),                                0561
*         GPR05P PTR(31) REG(05),                                  0561
*         GPR06F FIXED(31) REG(06),                                0561
*         GPR06P PTR(31) REG(06),                                  0561
*         GPR07F FIXED(31) REG(07),                                0561
*         GPR07P PTR(31) REG(07),                                  0561
*         GPR08F FIXED(31) REG(08),                                0561
*         GPR08P PTR(31) REG(08),                                  0561
*         GPR09F FIXED(31) REG(09),                                0561
*         GPR09P PTR(31) REG(09),                                  0561
*         GPR10F FIXED(31) REG(10),                                0561
*         GPR10P PTR(31) REG(10),                                  0561
*         GPR11F FIXED(31) REG(11),                                0561
*         GPR11P PTR(31) REG(11),                                  0561
*         GPR12F FIXED(31) REG(12),                                0561
*         GPR12P PTR(31) REG(12),                                  0561
*         GPR13F FIXED(31) REG(13),                                0561
*         GPR13P PTR(31) REG(13),                                  0561
*         GPR14F FIXED(31) REG(14),                                0561
*         GPR14P PTR(31) REG(14),                                  0561
*         GPR15F FIXED(31) REG(15),                                0561
*         GPR15P PTR(31) REG(15);                                  0561
*     END;                                                         0562
*     GEN(PRINT ON);                                               0563
         PRINT ON
*   END;                            /* TPEPILOG                      */
*   DO;                             /* ATDSPLY                       */
*   END;                            /* ATDSPLY                       */
*   END ISTCC016                                                   0567
*                                                                  0567
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IFGRPL  )                                       */
*/*%INCLUDE SYSLIB  (IFGRPLVS)                                       */
*/*%INCLUDE SYSLIB  (ISTRPLEX)                                       */
*/*%INCLUDE SYSLIB  (ISTRPLFB)                                       */
*                                                                  0567
*       ;                                                          0567
         B     @EL00001                                            0567
@DATA    DS    0H
@CH00215 DC    H'7'
@CH00337 DC    H'68'
@DATD    DSECT
         DS    0F
@TF00001 DS    F
ISTCC016 CSECT
         DS    0F
@CF00072 DC    F'1'
@CH00072 EQU   @CF00072+2
@CF00139 DC    F'2'
@CF00068 DC    F'4'
@CF00054 DC    F'8'
@CF00048 DC    F'80'
@CF00083 DC    F'256'
@CF00640 DC    XL4'7FFFFFFF'
@CF00642 DC    XL4'80000000'
@CF02026 DC    XL4'0000FFFF'
@DATD    DSECT
         DS    0D
RPLSAVE  DS    A
I        DS    H
M        DS    H
N        DS    H
SCRATCH  DS    CL1
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
ISTCC016 CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV01956 DC    V(I00C1001)
         DS    0D
C16EXSAV DC    F'0'
BASE     DC    AL4(ISTCC016)
@CB01927 DC    X'0201'
@CB01931 DC    X'1001'
@CB01933 DC    X'0819'
@CB01934 DC    X'1007'
@CB01935 DC    X'1008'
@CB01474 DC    X'00'
         DS    CL1
C16CBUF1 DC    CL52' '
C16CBUF2 DC    CL52' '
SAVEA    DC    18F'0'
PATCH    DC    25F'0'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
WAPTR    EQU   @02
RPLPTR   EQU   @04
RPHPTR   EQU   @01
R1       EQU   @01
R14      EQU   @14
R15      EQU   @15
R0       EQU   @00
R13      EQU   @13
R5       EQU   @05
R8       EQU   @08
R6       EQU   @06
R7       EQU   @07
R9       EQU   @09
R12      EQU   @12
PTR2     EQU   @15
PTR1     EQU   @01
INDX     EQU   @03
ARG      EQU   @05
GPR00P   EQU   @00
GPR15P   EQU   @15
GPR15F   EQU   @15
GPR01P   EQU   @01
GPR00F   EQU   @00
GPR01F   EQU   @01
GPR02F   EQU   @02
GPR02P   EQU   @02
GPR03F   EQU   @03
GPR03P   EQU   @03
GPR04F   EQU   @04
GPR04P   EQU   @04
GPR05F   EQU   @05
GPR05P   EQU   @05
GPR06F   EQU   @06
GPR06P   EQU   @06
GPR07F   EQU   @07
GPR07P   EQU   @07
GPR08F   EQU   @08
GPR08P   EQU   @08
GPR09F   EQU   @09
GPR09P   EQU   @09
GPR10F   EQU   @10
GPR10P   EQU   @10
GPR11F   EQU   @11
GPR11P   EQU   @11
GPR12F   EQU   @12
GPR12P   EQU   @12
GPR13F   EQU   @13
GPR13P   EQU   @13
GPR14F   EQU   @14
GPR14P   EQU   @14
         ENTRY C16C1000
ATCLCPTR EQU   1032
$RCAAREA EQU   0
$POINTER EQU   $RCAAREA+100
$TLTECB2 EQU   $POINTER+28
$TRTBLA  EQU   $POINTER+124
$CONSTNT EQU   $RCAAREA+244
$RCAFLG  EQU   $RCAAREA+604
$TRASCII EQU   $RCAAREA+608
$EXITSAV EQU   $RCAAREA+864
TOLTEPWA EQU   0
$SCTTBLE EQU   TOLTEPWA
$TESTOPT EQU   $SCTTBLE+2
$ERROPT  EQU   $SCTTBLE+3
$PDEVFLG EQU   $SCTTBLE+10
$CDSFLGS EQU   $SCTTBLE+11
$CDS8T19 EQU   $SCTTBLE+20
$EXECFLG EQU   $SCTTBLE+33
$OLTFLGS EQU   $SCTTBLE+36
$OLTFLG2 EQU   $SCTTBLE+37
$TOTFLG1 EQU   $SCTTBLE+38
$CTEQTT  EQU   $TOTFLG1
$ROUTMSK EQU   $SCTTBLE+40
$CDA     EQU   TOLTEPWA+100
$RCA     EQU   $CDA+44
$OLTPTR  EQU   $CDA+52
$HIMOREC EQU   $CDA+60
$COMMFLG EQU   TOLTEPWA+224
$FLAG3   EQU   $COMMFLG+2
$ALTPRTR EQU   $FLAG3
$FLAG4   EQU   $COMMFLG+3
$FLAG5   EQU   $COMMFLG+4
$EOJ     EQU   $FLAG5
$CANCEL  EQU   $EOJ
$FLAG6   EQU   $COMMFLG+5
$CTERROR EQU   $FLAG6
$ABNDBIT EQU   $FLAG6
$CIREQ   EQU   $FLAG6
$FLAG7   EQU   $COMMFLG+6
$EXIOWAT EQU   $FLAG7
$SNDRFLG EQU   $FLAG7
$FLAG8   EQU   $COMMFLG+7
$TWOWAY  EQU   $FLAG8
$FLAG12  EQU   $COMMFLG+11
$POSTFLG EQU   $FLAG12
$DEVTBLE EQU   TOLTEPWA+240
$DEVCDS  EQU   $DEVTBLE
$DEVUNAD EQU   $DEVCDS
@NM00043 EQU   $DEVUNAD+2
$DEVFEAT EQU   $DEVCDS+4
$DEVFRRS EQU   $DEVFEAT+1
$DEVCDSF EQU   $DEVCDS+9
$DEVSDCF EQU   $DEVCDS+10
$$SYMNME EQU   $DEVCDS+12
$MSGOTSD EQU   $$SYMNME
$CURELEM EQU   $$SYMNME+4
$DEVFLG1 EQU   $DEVTBLE+20
$EVNCPLT EQU   $DEVFLG1
$ATTNEXP EQU   $DEVFLG1
$INTOCC  EQU   $DEVFLG1
$DVCTBYT EQU   $INTOCC
$DEVFLG2 EQU   $DEVTBLE+21
$DEVTECB EQU   $DEVTBLE+22
$OPIS    EQU   $DEVTECB
$DVSEQNO EQU   $OPIS
$OPND    EQU   $DEVTECB+2
$DVBRKSN EQU   $OPND
$DVBRKST EQU   $OPND+1
$DVINCT  EQU   $DEVTBLE+26
$DEVFLG3 EQU   $DEVTBLE+27
$SIOFLG  EQU   $DEVFLG3
$DVSNDOK EQU   $SIOFLG
$IFTOUT  EQU   $DEVTBLE+36
$DEVSESP EQU   $IFTOUT
$SSCPDAF EQU   $IFTOUT+6
$LDNCBPT EQU   $DEVTBLE+48
$CID     EQU   $DEVTBLE+52
$RNINFO  EQU   $DEVTBLE+56
$DEVFLG5 EQU   $RNINFO+8
$DEVLU   EQU   $DEVFLG5
$ASCII   EQU   $DEVFLG5
$DEVFLG4 EQU   $DEVTBLE+65
$TLTRPL1 EQU   TOLTEPWA+1616
$TLTRPL2 EQU   TOLTEPWA+1736
$TRMINPT EQU   TOLTEPWA+2184
#EXITA   EQU   TOLTEPWA+2632
$RETREG  EQU   TOLTEPWA+2636
$CCOMDAT EQU   TOLTEPWA+2644
$CFLGS   EQU   $CCOMDAT+16
$24FEMSG EQU   TOLTEPWA+2681
$24CATMG EQU   $24FEMSG+11
@NM00051 EQU   TOLTEPWA+2776
$OUNTPTR EQU   @NM00051+4
$NSPTR   EQU   $OUNTPTR
$NSCNT   EQU   @NM00051+10
$ENXX    EQU   @NM00051+15
$IMITX   EQU   $ENXX
$RPLERR  EQU   TOLTEPWA+2977
SVESC033 EQU   TOLTEPWA+3160
SVECC013 EQU   TOLTEPWA+3232
SVEIC003 EQU   TOLTEPWA+3592
SVESC022 EQU   TOLTEPWA+3736
SVECC011 EQU   TOLTEPWA+4024
IFGRPL   EQU   0
RPLCOMN  EQU   IFGRPL
RPLIDWD  EQU   RPLCOMN
RPLREQ   EQU   RPLIDWD+2
RPLLEN   EQU   RPLIDWD+3
RPLECB   EQU   RPLCOMN+8
RPLFDBWD EQU   RPLCOMN+12
RPLFDBK  EQU   RPLFDBWD+1
RPLRTNCD EQU   RPLFDBK
RPLCNDCD EQU   RPLFDBK+1
RPLCMPON EQU   RPLCNDCD
RPLFDB2  EQU   RPLCMPON
RPLERRCD EQU   RPLCNDCD+1
RPLFDB3  EQU   RPLERRCD
RPLREOT  EQU   RPLFDB3
RPLKEYLE EQU   RPLCOMN+16
RPLAREA  EQU   RPLCOMN+32
RPLARG   EQU   RPLCOMN+36
RPLOPTCD EQU   RPLCOMN+40
RPLOPT1  EQU   RPLOPTCD
RPLECBSW EQU   RPLOPT1
RPLOPT2  EQU   RPLOPTCD+1
RPLADR   EQU   RPLOPT2
RPLOPT3  EQU   RPLOPTCD+2
RPLOPT4  EQU   RPLOPTCD+3
RPLNXTRP EQU   RPLCOMN+44
RPLRLEN  EQU   RPLCOMN+48
RPLBUFL  EQU   RPLCOMN+52
RPLOPTC2 EQU   RPLCOMN+56
RPLOPT5  EQU   RPLOPTC2
RPLWRTYP EQU   RPLOPT5
RPLOPT6  EQU   RPLOPTC2+1
RPLUNTYP EQU   RPLOPT6
RPLOPT7  EQU   RPLOPTC2+2
RPLCNOPT EQU   RPLOPT7
RPLOPT8  EQU   RPLOPTC2+3
RPLRBAR  EQU   RPLCOMN+60
RPLAIXID EQU   RPLRBAR+2
RPLEXTDS EQU   RPLCOMN+68
RPLEXTD1 EQU   RPLEXTDS
RPLVTEXT EQU   IFGRPL+76
RPLAARLN EQU   RPLVTEXT+4
RPLFDBK2 EQU   RPLVTEXT+12
RPLSSNSI EQU   RPLFDBK2
RPLDSB   EQU   RPLSSNSI
RPLDSB1  EQU   RPLDSB
RPLSSEI  EQU   RPLDSB1
RPLDSB2  EQU   RPLDSB+1
RPLSSMI  EQU   RPLDSB2
RPLUSNSI EQU   RPLFDBK2+2
RPLUSFLD EQU   RPLVTEXT+16
RPLOPTC3 EQU   RPLVTEXT+20
RPLOPT9  EQU   RPLOPTC3
RPLOPT10 EQU   RPLOPTC3+1
RPLOPT11 EQU   RPLOPTC3+2
RPLOPT12 EQU   RPLOPTC3+3
RPLFMHDR EQU   RPLOPT12
RPLOSENS EQU   RPLVTEXT+24
RPLSSNSO EQU   RPLOSENS
RPLSSEO  EQU   RPLSSNSO
ISTAVT   EQU   0
ISTRETRG EQU   ISTAVT+44
ISTLOK   EQU   0
LOKCHN   EQU   ISTLOK+1
LOKCHNG  EQU   LOKCHN
@NM00055 EQU   LOKCHNG+2
ISTPAB   EQU   0
PABWQCHN EQU   ISTPAB
PABWEQA  EQU   PABWQCHN
PABCHAIN EQU   PABWQCHN+4
PABRPHFG EQU   ISTPAB+12
PABFLAGS EQU   PABRPHFG
PABEND   EQU   ISTPAB+16
ISTDYPAB EQU   0
DYPCHAIN EQU   ISTDYPAB+4
DYPPACMD EQU   ISTDYPAB+12
ISTRPH   EQU   0
RPHCNTL  EQU   ISTRPH
RPHFLAGS EQU   RPHCNTL+2
RPHFLGB  EQU   RPHCNTL+3
RPHRPHA  EQU   ISTRPH+4
RPHTSKID EQU   ISTRPH+8
RPHRESMA EQU   ISTRPH+16
RPHWPFLG EQU   RPHRESMA
RPHWEA   EQU   ISTRPH+24
RPHSRPRM EQU   ISTRPH+28
RPHWORK  EQU   ISTRPH+36
RPHSAVE1 EQU   RPHWORK
RPHSBITS EQU   RPHSAVE1+1
ISTATCVT EQU   0
ATCRPTCH EQU   ISTATCVT
ATCITFLD EQU   ISTATCVT+8
ATCITPRM EQU   ATCITFLD
ATCITCDS EQU   ATCITFLD+8
ATCITFLG EQU   ATCITCDS+4
ATCITRA1 EQU   ATCITFLG+2
ATCSMPAB EQU   ISTATCVT+88
ATCLDTIL EQU   ISTATCVT+408
ATCGTSTR EQU   ISTATCVT+644
ATCLUDVT EQU   ISTATCVT+800
ATCANYDT EQU   ISTATCVT+808
@NM00068 EQU   ISTATCVT+812
ATCPODVT EQU   ISTATCVT+832
ATCSSDVT EQU   ISTATCVT+940
ATCSODVT EQU   ISTATCVT+944
ATCMBDVT EQU   ISTATCVT+952
ATCSTAT  EQU   ISTATCVT+972
ATCSTAT1 EQU   ATCSTAT
@NM00069 EQU   ATCSTAT+1
ATCPOFLG EQU   ATCSTAT+2
ATCSTAT4 EQU   ATCSTAT+3
ATCBITAN EQU   ISTATCVT+976
ATCFLAG2 EQU   ATCBITAN+1
ATCONID  EQU   ISTATCVT+980
ATCSSCPA EQU   ISTATCVT+984
ATCHPGM  EQU   ISTATCVT+1040
ATCRNO   EQU   ISTATCVT+1044
ATCCPDVT EQU   ISTATCVT+1092
ATCSMSDQ EQU   ISTATCVT+1128
ATCRID   EQU   ISTATCVT+1144
ATCTKFLD EQU   ISTATCVT+1156
ATCIOINT EQU   ISTATCVT+1176
ATCTOD   EQU   ISTATCVT+1220
ATCVRTIL EQU   ISTATCVT+1264
ATCLKSWP EQU   ISTATCVT+1440
ATCWUDYP EQU   ISTATCVT+1448
ATCSQAFR EQU   ISTATCVT+1560
ATCORTCB EQU   ATCSQAFR+4
ATCORSRB EQU   ATCORTCB
ATCLDAPP EQU   ISTATCVT+1600
ATCDAPVT EQU   ISTATCVT+1620
ATCGSRBQ EQU   ISTATCVT+1672
ATCGSRBG EQU   ATCGSRBQ
ATCENFLG EQU   ISTATCVT+1722
ATCCSCB  EQU   ISTATCVT+1724
ATCVTFLG EQU   ISTATCVT+1784
@NM00099 EQU   ISTATCVT+1816
ATCCRA   EQU   ISTATCVT+1840
ATCCRACN EQU   ATCCRA+4
ATCCRPL  EQU   ISTATCVT+1848
ATCRPLCN EQU   ATCCRPL+4
ISTTIE   EQU   0
TIETIEA  EQU   ISTTIE+4
TIESNA   EQU   ISTTIE+8
TIERPHA  EQU   ISTTIE+12
ISTBIND  EQU   0
BINFMTY  EQU   ISTBIND
BINPRIP  EQU   ISTBIND+3
BINSECP  EQU   ISTBIND+4
BINCMNP  EQU   ISTBIND+5
BINBRAK  EQU   BINCMNP
BINBKTR  EQU   BINCMNP
BINCMNP2 EQU   ISTBIND+6
BINFMTRM EQU   BINCMNP2
BINTSU   EQU   ISTBIND+7
BINAPACE EQU   BINTSU
BINRPACE EQU   BINTSU+1
BINRUSZ  EQU   BINTSU+2
BINSRUSZ EQU   BINRUSZ
BINPRUSZ EQU   BINRUSZ+1
BINSPACE EQU   BINTSU+4
BINBPACE EQU   BINTSU+5
BINPRSVC EQU   ISTBIND+13
BINLUP   EQU   BINPRSVC
BINPSCHR EQU   BINPRSVC+1
BINCRYPT EQU   ISTBIND+25
BINCRYRL EQU   0
BINCRCTL EQU   BINCRYRL
BINCRPFL EQU   BINCRYRL+1
BINPNAU  EQU   0
BINAUNML EQU   BINPNAU
BINAUNM  EQU   BINPNAU+1
BINUSEDT EQU   0
BINUSDTL EQU   BINUSEDT
BINUSDTA EQU   BINUSEDT+1
BINURC   EQU   0
BINURCL  EQU   BINURC
BINURCD  EQU   BINURC+1
BINSLUNM EQU   0
RPLOF16  EQU   0
RPLRH3   EQU   RPLOF16
RPLBB    EQU   RPLRH3
RPLEB    EQU   RPLRH3
RPLCMD   EQU   RPLRH3
RPLCSI   EQU   RPLRH3
RPLSRTYP EQU   RPLOF16+1
RPLSTYPE EQU   RPLSRTYP
RPLRTYPE EQU   RPLSRTYP
RPLRRESP EQU   RPLRTYPE
RPLNFSYN EQU   RPLRTYPE
RPLCHN   EQU   RPLOF16+2
RPLLAST  EQU   RPLCHN
RPLONLY  EQU   RPLCHN
RPLVTFL1 EQU   RPLOF16+3
RPLVTFL2 EQU   RPLOF16+4
RPLPOSTV EQU   RPLVTFL2
RPLRESP  EQU   RPLVTFL2
RPLEX    EQU   RPLRESP
RPLNFME  EQU   RPLRESP
RPLRRN   EQU   RPLRESP
RPLCNTRL EQU   RPLOF16+5
RPLCNTDF EQU   RPLCNTRL
RPLDATA  EQU   RPLCNTDF
RPLCNCEL EQU   RPLCNTDF
RPLCHASE EQU   RPLCNTDF
RPLCNTDC EQU   RPLCNTRL+1
RPLRTR   EQU   RPLCNTDC
RPLLUS   EQU   RPLCNTDC
RPLSIGNL EQU   RPLCNTDC
RPLCNTSC EQU   RPLCNTRL+2
RPLSHUTD EQU   RPLCNTSC
RPLSHUTC EQU   RPLCNTSC
RPLRSHUT EQU   RPLCNTSC
RPLOF56  EQU   0
RPLO5    EQU   RPLOF56
RPLOF60  EQU   0
RPLOBSQ  EQU   RPLOF60+4
RPLIBSQ  EQU   RPLOF60+5
RPLSEQNO EQU   RPLOF60+6
CARRAY   EQU   0
MSGCOUNT EQU   0
ELEMENT  EQU   0
CHAIN    EQU   ELEMENT
INADR    EQU   ELEMENT+4
OUTCT    EQU   ELEMENT+8
INCT     EQU   ELEMENT+9
MSG      EQU   ELEMENT+10
BACKSAVE EQU   0
LASTCHN  EQU   0
$TRTBL   EQU   0
#EXIT    EQU   0
ISTRPL   EQU   0
ISTXDYP  EQU   0
RCAPTR   EQU   $RCA
PABXTNSN EQU   PABEND
BINLUP1  EQU   BINPSCHR
BINLUS   EQU   BINPSCHR
BINFMF1  EQU   BINLUS
@NM00112 EQU   BINFMF1
BINDSPF1 EQU   BINLUS+2
BINMEDIA EQU   BINLUS+4
BINLUP2  EQU   BINPSCHR
BINSCRSZ EQU   BINLUP2+5
BINLUP3  EQU   BINPSCHR
BINBFRSZ EQU   BINLUP3+5
BINBDESC EQU   BINLUP3+9
BINLUP4  EQU   BINPSCHR
BINPSNDO EQU   BINLUP4
BINPDSPP EQU   BINPSNDO
BINADSPP EQU   BINPSNDO+1
BINCSLP  EQU   BINPSNDO+2
BINFMHUP EQU   BINPSNDO+3
BINSSNDO EQU   BINLUP4+4
BINCSO   EQU   BINLUP4+8
BINCSOR  EQU   BINCSO
BINGENCO EQU   BINLUP4+9
SVECC012 EQU   SVESC022
SVEIC00A EQU   SVEIC003
SVEIC004 EQU   SVEIC003
SVEIC005 EQU   SVEIC003
SVESC02A EQU   SVESC022
SVESC02B EQU   SVESC022
SVESC02D EQU   SVESC022
SVESC02E EQU   SVESC022
SVESC02F EQU   SVECC013
SVESC024 EQU   SVESC022
SVESC027 EQU   SVESC022
SVESC029 EQU   SVESC033
SVESC031 EQU   SVECC013
SVESC032 EQU   SVECC011
SVETC037 EQU   SVEIC003
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
BINRSV35 EQU   BINLUP4+10
BINRVS34 EQU   BINGENCO
BINAAO   EQU   BINGENCO
BINIAO   EQU   BINGENCO
BINRSV33 EQU   BINGENCO
BINWSDF  EQU   BINGENCO
BINRSV32 EQU   BINGENCO
BINCSOC2 EQU   BINCSO
BINCSOC1 EQU   BINCSO
BINRSV31 EQU   BINCSOR
BINRSV30 EQU   BINCSOR
BINCSOAI EQU   BINCSOR
BINCSOE  EQU   BINCSOR
BINFMHUS EQU   BINSSNDO+3
BINCSLS  EQU   BINSSNDO+2
BINADSPS EQU   BINSSNDO+1
BINPDSPS EQU   BINSSNDO
BINKIXS  EQU   BINFMHUP
BINRSV52 EQU   BINFMHUP
BINDSSTO EQU   BINFMHUP
BINSSDAT EQU   BINFMHUP
BINRSV51 EQU   BINCSLP
BINCJOB  EQU   BINCSLP
BINRSV50 EQU   BINCSLP
BINCBDSP EQU   BINCSLP
BINRSV29 EQU   BINADSPP
BINADSCD EQU   BINADSPP
BINRSV49 EQU   BINADSPP
BINRSV48 EQU   BINPDSPP
BINWPRAW EQU   BINPDSPP
BINRSV47 EQU   BINPDSPP
BINJOB   EQU   BINPDSPP
BINRSV46 EQU   BINPDSPP
BINPBDSP EQU   BINPDSPP
@NM00123 EQU   BINLUP3+10
BINBFSIZ EQU   BINBDESC
@NM00122 EQU   BINBDESC
BINBDRAC EQU   BINBFRSZ+3
BINBFRAR EQU   BINBFRSZ+2
BINBFRDC EQU   BINBFRSZ+1
BINBFRDR EQU   BINBFRSZ
@NM00121 EQU   BINLUP3
@NM00120 EQU   BINLUP2+10
BINPRESZ EQU   BINSCRSZ+4
BINSALTC EQU   BINSCRSZ+3
BINSALTR EQU   BINSCRSZ+2
BINSPRIC EQU   BINSCRSZ+1
BINSPRIR EQU   BINSCRSZ
@NM00119 EQU   BINLUP2+1
@NM00118 EQU   BINLUP2
BINSEDS  EQU   BINLUP2
@NM00117 EQU   BINMEDIA
BINCDEDS EQU   BINMEDIA
BINXDOCF EQU   BINMEDIA
BINXCDF  EQU   BINMEDIA
BINDISK  EQU   BINMEDIA
BINXCHNG EQU   BINMEDIA
BINCARD  EQU   BINMEDIA
BINDOCMT EQU   BINMEDIA
@NM00116 EQU   BINDSPF1+1
BINUAALT EQU   BINDSPF1+1
BINUAINT EQU   BINDSPF1+1
BINTRNDS EQU   BINDSPF1
@NM00115 EQU   BINDSPF1
BINSLD   EQU   BINDSPF1
BINVSDS  EQU   BINDSPF1
BINVTDS  EQU   BINDSPF1
BINHFDS  EQU   BINDSPF1
BININTR  EQU   BINDSPF1
@NM00114 EQU   @NM00112+1
BINXFPD  EQU   @NM00112+1
BINCSDS  EQU   @NM00112+1
BINQDSI  EQU   @NM00112+1
@NM00113 EQU   @NM00112+1
BINARRR  EQU   @NM00112
BINSIDS  EQU   @NM00112
BINSAI   EQU   @NM00112
BINSDSI  EQU   @NM00112
BINKDDSI EQU   @NM00112
BINPDIR  EQU   BINFMF1
BINCMPCT EQU   BINFMF1
BINDESTS EQU   BINFMF1
BINSLUS1 EQU   BINLUP1+6
BINPLUS1 EQU   BINLUP1+1
BINDSP1  EQU   BINLUP1
BINFMHS1 EQU   BINLUP1
@NM00060 EQU   PABXTNSN+12
PABNPSSQ EQU   PABXTNSN+8
PABLOCK  EQU   PABXTNSN+4
PABLAST  EQU   PABXTNSN
@NM00148 EQU   RPLIBSQ
RPLIINV  EQU   RPLIBSQ
RPLINEG  EQU   RPLIBSQ
RPLIPOS  EQU   RPLIBSQ
RPLIIGN  EQU   RPLIBSQ
RPLIRSET EQU   RPLIBSQ
RPLITST  EQU   RPLIBSQ
RPLISET  EQU   RPLIBSQ
@NM00147 EQU   RPLOBSQ
RPLOINV  EQU   RPLOBSQ
RPLONEG  EQU   RPLOBSQ
RPLOPOS  EQU   RPLOBSQ
RPLOIGN  EQU   RPLOBSQ
RPLORSET EQU   RPLOBSQ
RPLOTST  EQU   RPLOBSQ
RPLOSET  EQU   RPLOBSQ
RPLIBSQV EQU   RPLOF60+2
RPLOBSQV EQU   RPLOF60
@NM00146 EQU   RPLO5
RPLTNFY  EQU   RPLO5
@NM00145 EQU   RPLO5
@NM00144 EQU   RPLCNTSC
RPLRQR   EQU   RPLCNTSC
RPLSTSN  EQU   RPLCNTSC
RPLCLEAR EQU   RPLCNTSC
RPLSDT   EQU   RPLCNTSC
RPLBIS   EQU   RPLCNTDC
RPLSBI   EQU   RPLCNTDC
RPLTUNBD EQU   RPLCNTDC
RPLTBIND EQU   RPLCNTDC
RPLBID   EQU   RPLCNTDC
@NM00143 EQU   RPLCNTDF
RPLQI    EQU   RPLCNTDF
RPLRELQ  EQU   RPLCNTDF
RPLQEC   EQU   RPLCNTDF
RPLQC    EQU   RPLCNTDF
RPLQRI   EQU   RPLRESP
@NM00142 EQU   RPLPOSTV
RPLSCHED EQU   RPLPOSTV
@NM00141 EQU   RPLVTFL1
RPLTLGAC EQU   RPLVTFL1
RPLTNDSP EQU   RPLVTFL1
RPLAUTUS EQU   RPLVTFL1
RPLVTUSE EQU   RPLVTFL1
@NM00140 EQU   RPLVTFL1
@NM00139 EQU   RPLCHN
RPLMIDLE EQU   RPLCHN
RPLFIRST EQU   RPLCHN
@NM00138 EQU   RPLRTYPE
RPLDFASY EQU   RPLRTYPE
@NM00137 EQU   RPLSTYPE
RPLSRESP EQU   RPLSTYPE
@NM00136 EQU   RPLRH3
RPLCHREQ EQU   RPLRH3
BINSNMD  EQU   BINSLUNM+1
BINSNML  EQU   BINSLUNM
BINCRKEY EQU   BINCRYRL+2
BINCCIPH EQU   BINCRPFL
BINCRSV1 EQU   BINCRPFL
BINCKEYT EQU   BINCRPFL
BINCLEN  EQU   BINCRCTL
BINCSESS EQU   BINCRCTL
BINCEUMB EQU   BINCRCTL
BINUSE   EQU   ISTBIND+36
BINUSEL  EQU   ISTBIND+35
BINPRIM  EQU   ISTBIND+27
BINPRIML EQU   ISTBIND+26
BINLUTYP EQU   BINLUP
@NM00111 EQU   BINLUP
BINBPACM EQU   BINBPACE
@NM00110 EQU   BINBPACE
BINSPACM EQU   BINSPACE
@NM00109 EQU   BINSPACE
BINPS1ST EQU   BINSPACE
BINPRUSE EQU   BINPRUSZ
BINPRUSM EQU   BINPRUSZ
BINSRUSE EQU   BINSRUSZ
BINSRUSM EQU   BINSRUSZ
BINRPACM EQU   BINRPACE
@NM00108 EQU   BINRPACE
BINAPACM EQU   BINAPACE
@NM00107 EQU   BINAPACE
BINSP2ST EQU   BINAPACE
BINCONR  EQU   BINCMNP2
BINRCHN  EQU   BINCMNP2
BINMDIBK EQU   BINCMNP2
BINBKFS  EQU   BINCMNP2
BINRCVR  EQU   BINCMNP2
@NM00106 EQU   BINCMNP
BINALT   EQU   BINCMNP
BINFMHD  EQU   BINCMNP
@NM00105 EQU   BINCMNP
BINSSEB  EQU   BINSECP
BINSCMP  EQU   BINSECP
@NM00104 EQU   BINSECP
BINSCHNR EQU   BINSECP
BINSMCH  EQU   BINSECP
BINSCHN  EQU   BINSECP
BINPSEB  EQU   BINPRIP
BINPCMP  EQU   BINPRIP
@NM00103 EQU   BINPRIP
BINPCHNR EQU   BINPRIP
BINPMCH  EQU   BINPRIP
BINPCHN  EQU   BINPRIP
BINTS    EQU   ISTBIND+2
BINFM    EQU   ISTBIND+1
BINTYPE  EQU   BINFMTY
BINFMT   EQU   BINFMTY
TIEPTR2  EQU   TIERPHA
TIEPTR1  EQU   TIESNA
TIEGATE  EQU   TIETIEA
TIEREQ   EQU   ISTTIE+3
TIERETCD EQU   ISTTIE+2
TIELNGTH EQU   ISTTIE+1
TIETYPE  EQU   ISTTIE
ATCAOS   EQU   ISTATCVT+2184
@NM00102 EQU   ISTATCVT+1924
ATCINCTV EQU   ISTATCVT+1920
@NM00101 EQU   ISTATCVT+1918
ATCSAF   EQU   ISTATCVT+1916
ATCAPCSX EQU   ISTATCVT+1912
ATCTSC3I EQU   ISTATCVT+1908
ATCHWCSA EQU   ISTATCVT+1904
ATCAPCRM EQU   ISTATCVT+1900
ATCAPCFR EQU   ISTATCVT+1896
ATCCACSA EQU   ISTATCVT+1892
ATCMXCSA EQU   ISTATCVT+1888
ATCTPMPB EQU   ISTATCVT+1856
ATCRPLAC EQU   ATCRPLCN+2
ATCRPLRC EQU   ATCRPLCN
ATCCRPLQ EQU   ATCCRPL
ATCCRAAC EQU   ATCCRACN+2
ATCCRARC EQU   ATCCRACN
ATCCRAQ  EQU   ATCCRA
ATCITSAV EQU   ISTATCVT+1836
ATCVIOPM EQU   ISTATCVT+1832
ATCTPMMI EQU   ISTATCVT+1828
ATCPXSRB EQU   ISTATCVT+1824
ATCRPLCT EQU   ISTATCVT+1822
ATCCRACT EQU   ISTATCVT+1820
ATCSRBCT EQU   ISTATCVT+1818
ATCSTNSM EQU   ISTATCVT+1817
@NM00100 EQU   @NM00099
ATCNOSTR EQU   @NM00099
ATCVTMAB EQU   @NM00099
ATCTPCP1 EQU   ISTATCVT+1812
ATCTPCP0 EQU   ISTATCVT+1808
ATCZR01  EQU   ISTATCVT+1804
ATCASCB  EQU   ISTATCVT+1800
ATCMPSTQ EQU   ISTATCVT+1796
ATCOCCSM EQU   ISTATCVT+1792
ATCPSTA  EQU   ISTATCVT+1788
@NM00098 EQU   ATCVTFLG
ATCVTACT EQU   ATCVTFLG
@NM00097 EQU   ISTATCVT+1732
ATCTRMWA EQU   ISTATCVT+1728
ATCCSCBG EQU   ATCCSCB
@NM00096 EQU   ISTATCVT+1723
ATCSNUF  EQU   ATCENFLG
ATCOPKL  EQU   ATCENFLG
ATCABEN  EQU   ATCENFLG
ATCSRDN  EQU   ATCENFLG
ATCDLDN  EQU   ATCENFLG
ATCACTRM EQU   ISTATCVT+1720
ATCSMABF EQU   ISTATCVT+1716
ATCSMAPR EQU   ISTATCVT+1712
ATCSMAID EQU   ISTATCVT+1708
ATCSMARA EQU   ISTATCVT+1704
ATCCACXA EQU   ISTATCVT+1700
ATCATA10 EQU   ISTATCVT+1696
ATCHLTCB EQU   ISTATCVT+1692
ATCCCOOC EQU   ISTATCVT+1688
ATCAIWT  EQU   ISTATCVT+1684
ATCOROBT EQU   ISTATCVT+1680
ATCPXCRA EQU   ISTATCVT+1676
ATCGSRBF EQU   ATCGSRBG
ATCTSCPC EQU   ISTATCVT+1668
ATCCDTCB EQU   ISTATCVT+1664
ATCORFRL EQU   ISTATCVT+1660
ATCORFPX EQU   ISTATCVT+1656
ATCORFMG EQU   ISTATCVT+1652
ATCSMBQ  EQU   ISTATCVT+1648
ATCINFDD EQU   ISTATCVT+1644
@NM00095 EQU   ATCDAPVT+22
ATCDAPDG EQU   ATCDAPVT+20
ATCDXCEA EQU   ATCDAPVT+16
ATCDCEA  EQU   ATCDAPVT+12
ATCDPCIA EQU   ATCDAPVT+8
ATCDSIOA EQU   ATCDAPVT+4
ATCDEOEA EQU   ATCDAPVT
ATCZLAEA EQU   ATCLDAPP+16
ATCZLCEA EQU   ATCLDAPP+12
ATCZLPCI EQU   ATCLDAPP+8
ATCSMFRR EQU   ATCLDAPP+4
ATCCDTID EQU   ATCLDAPP
ATCTRMPB EQU   ISTATCVT+1568
ATCORQG  EQU   ATCORSRB
ATCORTBF EQU   ATCSQAFR
@NM00094 EQU   ISTATCVT+1560
@NM00093 EQU   ISTATCVT+1532
ATCCDCNE EQU   ISTATCVT+1528
@NM00092 EQU   ISTATCVT+1526
ATCHASHN EQU   ISTATCVT+1524
ATCNOST  EQU   ISTATCVT+1520
ATCSMMWA EQU   ISTATCVT+1516
ATCSDCFR EQU   ISTATCVT+1512
ATCTSCRA EQU   ISTATCVT+1508
ATCSOCNT EQU   ISTATCVT+1504
ATCSOTHR EQU   ISTATCVT+1502
ATCSOPR2 EQU   ISTATCVT+1501
ATCSOPR1 EQU   ISTATCVT+1500
ATCAPCAT EQU   ISTATCVT+1496
ATCTSCWU EQU   ISTATCVT+1492
ATCMWRDT EQU   ISTATCVT+1488
ATCSTCK  EQU   ISTATCVT+1480
ATCWUPAB EQU   ATCWUDYP+16
@NM00091 EQU   ATCWUDYP
ATCLKCNT EQU   ATCLKSWP+4
ATCCLOCK EQU   ATCLKSWP
ATCNCBQ  EQU   ISTATCVT+1436
ATCPUCWC EQU   ISTATCVT+1432
ATCTSCQV EQU   ISTATCVT+1428
ATCTSCQU EQU   ISTATCVT+1424
ATCTSCQM EQU   ISTATCVT+1420
ATCTSCQF EQU   ISTATCVT+1416
ATCAPCVR EQU   ISTATCVT+1412
ATCHSQLK EQU   ISTATCVT+1408
ATCICIDM EQU   ISTATCVT+1406
ATCYRANG EQU   ISTATCVT+1405
ATCDRNUM EQU   ISTATCVT+1404
ATCSACNT EQU   ISTATCVT+1400
ATCTSCFA EQU   ISTATCVT+1396
ATCCDCVR EQU   ISTATCVT+1392
ATCCDCRI EQU   ISTATCVT+1388
ATCCDCRT EQU   ISTATCVT+1384
ATCVRNDX EQU   ISTATCVT+1380
ATCAP31  EQU   ISTATCVT+1376
ATCPSTLK EQU   ISTATCVT+1372
ATCOCAOA EQU   ISTATCVT+1368
ATCPUCEF EQU   ISTATCVT+1364
ATCPUCBM EQU   ISTATCVT+1360
ATCAPCES EQU   ISTATCVT+1356
ATCAPCPC EQU   ISTATCVT+1352
ATCAPCTE EQU   ISTATCVT+1348
ATCAPCIN EQU   ISTATCVT+1344
ATCAPCPD EQU   ISTATCVT+1340
ATCAPCAD EQU   ISTATCVT+1336
ATCAPCSD EQU   ISTATCVT+1332
ATCAPCIE EQU   ISTATCVT+1328
ATCAPCUE EQU   ISTATCVT+1324
ATCAPCRP EQU   ISTATCVT+1320
ATCAPCRS EQU   ISTATCVT+1316
ATCAPCTP EQU   ISTATCVT+1312
ATCAPCTW EQU   ISTATCVT+1308
ATCAPCPS EQU   ISTATCVT+1304
ATCAPCTS EQU   ISTATCVT+1300
ATCAPCTQ EQU   ISTATCVT+1296
ATCAPCTX EQU   ISTATCVT+1292
ATCSDCOS EQU   ISTATCVT+1288
ATCEXCVR EQU   ISTATCVT+1284
ATCCPCSV EQU   ISTATCVT+1280
ATCVRECB EQU   ATCVRTIL+12
ATCVRLCK EQU   ATCVRTIL+8
ATCVRWEL EQU   ATCVRTIL+4
ATCVRWEQ EQU   ATCVRTIL
ATCMGPAB EQU   ISTATCVT+1248
ATCTSCMS EQU   ISTATCVT+1244
ATCVRATB EQU   ISTATCVT+1240
ATCVRWAP EQU   ISTATCVT+1236
ATCPVRAQ EQU   ISTATCVT+1232
ATCTOWA  EQU   ISTATCVT+1228
ATCTOD2  EQU   ATCTOD+4
ATCTOD1  EQU   ATCTOD
ATCERTP  EQU   ISTATCVT+1216
ATCBINDQ EQU   ISTATCVT+1212
ATCTIMER EQU   ISTATCVT+1208
ATCTSCDN EQU   ISTATCVT+1204
ATCTSCCN EQU   ISTATCVT+1200
ATCTSCL0 EQU   ISTATCVT+1196
ATCTSCP2 EQU   ISTATCVT+1192
ATCTSC3S EQU   ISTATCVT+1188
ATCTSC3R EQU   ISTATCVT+1184
ATCTSC3O EQU   ISTATCVT+1180
ATCIOPRG EQU   ATCIOINT
ATCTSCMI EQU   ISTATCVT+1172
ATCTSCMO EQU   ISTATCVT+1168
ATCTSCP4 EQU   ISTATCVT+1164
ATCPUSCT EQU   ISTATCVT+1160
ATCTKINT EQU   ATCTKFLD+2
ATCTKCNT EQU   ATCTKFLD
ATCTIMCK EQU   ISTATCVT+1152
@NM00090 EQU   ATCRID+2
ATCCDRMA EQU   ATCRID
ATCCPCGD EQU   ISTATCVT+1140
@NM00089 EQU   ATCSMSDQ+8
@NM00088 EQU   ATCSMSDQ+4
@NM00087 EQU   ATCSMSDQ
ATCSEQNO EQU   ISTATCVT+1124
ATCSMPMD EQU   ISTATCVT+1120
ATCPAREA EQU   ISTATCVT+1116
ATCCPCSM EQU   ISTATCVT+1112
ATCSQCDS EQU   ISTATCVT+1108
ATCUSSVT EQU   ISTATCVT+1104
ATCNOSQ  EQU   ISTATCVT+1100
ATCINCIP EQU   ATCCPDVT+4
ATCTSCNI EQU   ATCCPDVT
ATCMGCRT EQU   ISTATCVT+1088
ATCMACRT EQU   ISTATCVT+1084
ATCCSMT  EQU   ISTATCVT+1080
ATCINCNO EQU   ISTATCVT+1076
ATCRACON EQU   ISTATCVT+1072
ATCCFCDR EQU   ISTATCVT+1068
ATCONFIG EQU   ISTATCVT+1060
ATCNODEL EQU   ISTATCVT+1052
ATCCDTIM EQU   ISTATCVT+1050
ATCNMCTR EQU   ISTATCVT+1048
ATCPOIA  EQU   ATCRNO+1
@NM00086 EQU   ATCRNO
ATCHBSIZ EQU   ATCHPGM+2
ATCHBFNO EQU   ATCHPGM
ATCMROUT EQU   ISTATCVT+1031
ATCXRANG EQU   ISTATCVT+1030
ATCMAXID EQU   ISTATCVT+1029
ATCMSGSP EQU   ISTATCVT+1028
ATCECTLP EQU   ISTATCVT+1024
ATCECSES EQU   ISTATCVT+1020
ATCECDSP EQU   ISTATCVT+1016
ATCECVRY EQU   ISTATCVT+1012
ATCECHLT EQU   ISTATCVT+1008
ATCECMOD EQU   ISTATCVT+1004
ATCRDTLK EQU   ISTATCVT+1000
ATCVOCLK EQU   ISTATCVT+996
ATCCIDM  EQU   ISTATCVT+994
ATCITLIM EQU   ISTATCVT+992
ATCTMINV EQU   ISTATCVT+990
ATCHOSTA EQU   ISTATCVT+988
ATCPUNSA EQU   ISTATCVT+986
ATCVTMID EQU   ATCSSCPA
ATCHCNID EQU   ATCONID+2
ATCSCNID EQU   ATCONID
@NM00085 EQU   ATCBITAN+3
@NM00084 EQU   ATCBITAN+2
@NM00083 EQU   ATCFLAG2
ATCMSGID EQU   ATCFLAG2
ATCINACT EQU   ATCFLAG2
ATCCRYPF EQU   ATCFLAG2
ATCTUNCL EQU   ATCFLAG2
ATCTUNRQ EQU   ATCFLAG2
ATCTUNAC EQU   ATCFLAG2
ATCCDLRA EQU   ATCFLAG2
@NM00082 EQU   ATCBITAN
@NM00081 EQU   ATCSTAT4
@NM00080 EQU   ATCSTAT4
@NM00079 EQU   ATCSTAT4
@NM00078 EQU   ATCSTAT4
@NM00077 EQU   ATCSTAT4
ATCPRTAT EQU   ATCSTAT4
ATCNCSD  EQU   ATCSTAT4
ATCMTST  EQU   ATCSTAT4
@NM00076 EQU   ATCPOFLG
@NM00075 EQU   ATCPOFLG
@NM00074 EQU   ATCPOFLG
@NM00073 EQU   ATCPOFLG
@NM00072 EQU   ATCPOFLG
@NM00071 EQU   ATCPOFLG
@NM00070 EQU   ATCPOFLG
ATCPOUNS EQU   ATCPOFLG
ATCITEXT EQU   @NM00069
ATCHIP   EQU   ATCSTAT1
ATCMDHLT EQU   ATCSTAT1
ATCINHLT EQU   ATCSTAT1
ATCNETSL EQU   ATCSTAT1
ATCQKHLT EQU   ATCSTAT1
ATCSNHLT EQU   ATCSTAT1
ATCACTIV EQU   ATCSTAT1
ATCSTART EQU   ATCSTAT1
ATCNOP00 EQU   ISTATCVT+968
ATCTSBUF EQU   ISTATCVT+964
ATCSSOQH EQU   ISTATCVT+960
ATCSSIQH EQU   ISTATCVT+956
ATCTSCMB EQU   ATCMBDVT
ATCSOPAC EQU   ISTATCVT+950
ATCSOTIM EQU   ISTATCVT+948
ATCTSCON EQU   ATCSODVT
ATCTSCSC EQU   ATCSSDVT
ATCTSCRO EQU   ISTATCVT+936
ATCTSCRI EQU   ISTATCVT+932
ATCFEPT  EQU   ISTATCVT+928
ATCFDVT  EQU   ISTATCVT+924
ATCCONFT EQU   ISTATCVT+920
ATCSIBQ  EQU   ISTATCVT+916
ATCDSPLQ EQU   ISTATCVT+912
ATCVARYQ EQU   ISTATCVT+908
ATCHALTQ EQU   ISTATCVT+904
ATCMODQ  EQU   ISTATCVT+900
ATCSRT   EQU   ISTATCVT+896
ATCRDT   EQU   ISTATCVT+892
ATCSDVT  EQU   ISTATCVT+888
ATCDLRPT EQU   ISTATCVT+884
ATCBPDA  EQU   ISTATCVT+880
ATCACDA  EQU   ISTATCVT+876
ATCMNT   EQU   ISTATCVT+872
ATCNODDS EQU   ISTATCVT+868
ATCITRT  EQU   ISTATCVT+864
ATCTODVT EQU   ISTATCVT+860
ATCTRCPT EQU   ISTATCVT+856
ATCMODTB EQU   ISTATCVT+852
ATCUSSPT EQU   ISTATCVT+848
ATCTUBUF EQU   ISTATCVT+844
ATCTACB  EQU   ISTATCVT+840
ATCDWA   EQU   ISTATCVT+836
ATCCFCR2 EQU   ATCPODVT
ATCPULQB EQU   @NM00068+16
ATCMCQAB EQU   @NM00068+12
ATCLUSMQ EQU   @NM00068+8
ATCLUIOQ EQU   @NM00068+4
ATCIOLQB EQU   @NM00068
ATCTSCAP EQU   ATCANYDT
ATCTSCCO EQU   ATCLUDVT+4
ATCTSCSR EQU   ATCLUDVT
ATCVTLOD EQU   ISTATCVT+796
ATCTSCLF EQU   ISTATCVT+792
ATCTSCLE EQU   ISTATCVT+788
ATCTSCLB EQU   ISTATCVT+784
ATCTSCLS EQU   ISTATCVT+780
ATCTSCCF EQU   ISTATCVT+776
ATCTSCFV EQU   ISTATCVT+772
ATCTSCCE EQU   ISTATCVT+768
ATCTSCCB EQU   ISTATCVT+764
ATCTSCWS EQU   ISTATCVT+760
ATCTSCEM EQU   ISTATCVT+756
ATCTSCNS EQU   ISTATCVT+752
ATCTSCER EQU   ISTATCVT+748
ATCTSCPR EQU   ISTATCVT+744
ATCTSCGR EQU   ISTATCVT+740
ATCTSCCI EQU   ISTATCVT+736
ATCTSVT  EQU   ISTATCVT+732
ATCDVLOD EQU   ISTATCVT+728
ATCCDCNR EQU   ISTATCVT+724
ATCCDCNF EQU   ISTATCVT+720
ATCCDCND EQU   ISTATCVT+716
ATCCDCNA EQU   ISTATCVT+712
ATCCDCCP EQU   ISTATCVT+708
ATCCDFDN EQU   ISTATCVT+704
ATCCDFIN EQU   ISTATCVT+700
ATCCDFND EQU   ISTATCVT+696
ATCCDDEL EQU   ISTATCVT+692
ATCCDADD EQU   ISTATCVT+688
ATCTCLIM EQU   ISTATCVT+684
ATCRACTR EQU   ISTATCVT+680
ATCRACTI EQU   ISTATCVT+676
ATCREMOV EQU   ISTATCVT+672
ATCRACIO EQU   ISTATCVT+668
ATCADD   EQU   ISTATCVT+664
ATCPUCRT EQU   ISTATCVT+660
ATCSMRS  EQU   ISTATCVT+656
ATCSMRQ  EQU   ISTATCVT+652
ATCORCAF EQU   ISTATCVT+648
ATCFRSTR EQU   ATCGTSTR
ATCSTMA  EQU   ISTATCVT+640
ATCSRTAD EQU   ISTATCVT+636
ATCOCCFS EQU   ISTATCVT+632
ATCOCCFP EQU   ISTATCVT+628
ATCSRTDF EQU   ISTATCVT+624
ATCLUCRT EQU   ISTATCVT+620
ATCINCY5 EQU   ISTATCVT+616
ATCINCW3 EQU   ISTATCVT+612
ATCINCU6 EQU   ISTATCVT+608
ATCINCTQ EQU   ISTATCVT+604
ATCINCS1 EQU   ISTATCVT+600
ATCSRTAB EQU   ISTATCVT+596
ATCINCRD EQU   ISTATCVT+592
ATCINCPH EQU   ISTATCVT+588
ATCINCLQ EQU   ISTATCVT+584
ATCNOCRT EQU   ISTATCVT+580
ATCINCF1 EQU   ISTATCVT+576
ATCINCCI EQU   ISTATCVT+572
ATCINCCO EQU   ISTATCVT+568
ATCBLDLA EQU   ISTATCVT+564
ATCALOAD EQU   ISTATCVT+560
ATCADEL  EQU   ISTATCVT+556
ATCRACEP EQU   ISTATCVT+552
ATCESC01 EQU   ISTATCVT+548
ATCDEC01 EQU   ISTATCVT+544
ATCDEC00 EQU   ISTATCVT+540
ATCCPCRT EQU   ISTATCVT+536
ATCAP35  EQU   ISTATCVT+532
ATCCPCFR EQU   ISTATCVT+528
ATCCPCGR EQU   ISTATCVT+524
ATCCPCPP EQU   ISTATCVT+520
ATCCPCNT EQU   ISTATCVT+516
ATCAUTHA EQU   ISTATCVT+512
ATCACCTA EQU   ISTATCVT+508
ATCMSGP  EQU   ISTATCVT+504
ATCAP39  EQU   ISTATCVT+500
ATCAP36  EQU   ISTATCVT+496
ATCMSGM  EQU   ISTATCVT+492
ATCAP33  EQU   ISTATCVT+488
ATCAICPT EQU   ISTATCVT+484
ATCAPI   EQU   ISTATCVT+480
ATCACC01 EQU   ISTATCVT+476
ATCACC00 EQU   ISTATCVT+472
ATCMBPAB EQU   ISTATCVT+456
ATCSOPAB EQU   ISTATCVT+440
ATCSSPAB EQU   ISTATCVT+424
ATCLDECB EQU   ATCLDTIL+12
ATCLDLCK EQU   ATCLDTIL+8
ATCLDLST EQU   ATCLDTIL+4
ATCLDNCS EQU   ATCLDTIL
ATCNOSPB EQU   ISTATCVT+376
ATCNSPAB EQU   ISTATCVT+344
ATCLUSRT EQU   ISTATCVT+312
ATCPUIOP EQU   ISTATCVT+280
ATCPUPAB EQU   ISTATCVT+248
ATCPXPAB EQU   ISTATCVT+216
ATCPOPAB EQU   ISTATCVT+184
ATCVDPAB EQU   ISTATCVT+152
ATCTCIPB EQU   ISTATCVT+120
ATCCSPAB EQU   ATCSMPAB+16
@NM00067 EQU   ATCSMPAB
ATCTMRPB EQU   ISTATCVT+56
ATCITPAB EQU   ISTATCVT+24
@NM00066 EQU   ATCITRA1
ATCITSCP EQU   ATCITRA1
ATCITMSG EQU   ATCITRA1
ATCITPIU EQU   ATCITRA1
ATCITSMS EQU   ATCITRA1
ATCITPSS EQU   ATCITRA1
ATCITLCK EQU   ATCITRA1
ATCITAPI EQU   ATCITRA1
ATCITCNT EQU   ATCITFLG
ATCITRPH EQU   ATCITCDS
ATCITTBL EQU   ATCITFLD+4
ATCITMAX EQU   ATCITPRM
ATCPTCHA EQU   ATCRPTCH+4
ATCVTLVL EQU   ATCRPTCH
RPHUPSTA EQU   ISTRPH+100
RPHSAV16 EQU   RPHWORK+60
RPHSAV15 EQU   RPHWORK+56
RPHSAV14 EQU   RPHWORK+52
RPHSAV13 EQU   RPHWORK+48
RPHSAV12 EQU   RPHWORK+44
RPHSAV11 EQU   RPHWORK+40
RPHSAV10 EQU   RPHWORK+36
RPHSAVE9 EQU   RPHWORK+32
RPHSAVE8 EQU   RPHWORK+28
RPHSAVE7 EQU   RPHWORK+24
RPHSAVE6 EQU   RPHWORK+20
RPHSAVE5 EQU   RPHWORK+16
RPHSAVE4 EQU   RPHWORK+12
RPHSAVE3 EQU   RPHWORK+8
RPHSAVE2 EQU   RPHWORK+4
RPHSHALF EQU   RPHSAVE1+2
RPHSBIT8 EQU   RPHSBITS
RPHSBIT7 EQU   RPHSBITS
RPHSBIT6 EQU   RPHSBITS
RPHSBIT5 EQU   RPHSBITS
RPHSBIT4 EQU   RPHSBITS
RPHSBIT3 EQU   RPHSBITS
RPHSBIT2 EQU   RPHSBITS
RPHSBIT1 EQU   RPHSBITS
RPHSBYTE EQU   RPHSAVE1
RPHCRR   EQU   ISTRPH+32
RPHSRP34 EQU   RPHSRPRM+2
RPHSRP12 EQU   RPHSRPRM
RPHWEGT  EQU   RPHWEA
RPHMAJCB EQU   ISTRPH+21
RPHPABOF EQU   ISTRPH+20
RPHRESUM EQU   RPHRESMA+1
@NM00065 EQU   RPHWPFLG
RPHPURGE EQU   RPHWPFLG
RPHPT    EQU   RPHWPFLG
RPHWT    EQU   RPHWPFLG
RPHRSKEY EQU   RPHWPFLG
RPHDVTA  EQU   ISTRPH+12
RPHTIK   EQU   RPHTSKID+3
@NM00064 EQU   RPHTSKID
RPHRPHAP EQU   RPHRPHA+1
@NM00063 EQU   RPHRPHA
RPHGATE  EQU   RPHRPHA
@NM00062 EQU   RPHFLGB
RPHABEND EQU   RPHFLGB
RPHUWAIT EQU   RPHFLGB
RPHRLCRA EQU   RPHFLGB
RPHSYNCH EQU   RPHFLGB
RPHPGCMP EQU   RPHFLGB
RPHLOCK  EQU   RPHFLGB
@NM00061 EQU   RPHFLAGS
RPHSMCLR EQU   RPHFLAGS
RPHSMTYP EQU   RPHFLAGS
RPHSMQ   EQU   RPHFLAGS
RPHLNGTH EQU   RPHCNTL+1
RPHTYPE  EQU   RPHCNTL
DYPPAB   EQU   ISTDYPAB+16
DYPOCRPH EQU   DYPPACMD
DYPTSKID EQU   ISTDYPAB+8
DYPPACTB EQU   DYPCHAIN
DYPFLGS  EQU   ISTDYPAB+2
DYPLNGTH EQU   ISTDYPAB+1
DYPTYPE  EQU   ISTDYPAB
PABRPHA  EQU   PABRPHFG+1
@NM00059 EQU   PABFLAGS
PABKPRPH EQU   PABFLAGS
PABNODQ  EQU   PABFLAGS
PABXTND  EQU   PABFLAGS
PABSYNCH EQU   PABFLAGS
PABCDP   EQU   PABFLAGS
PABUNCON EQU   PABFLAGS
PABDVTA  EQU   ISTPAB+9
PABOFFST EQU   ISTPAB+8
PABCHNGP EQU   PABCHAIN+1
@NM00058 EQU   PABCHAIN
PABCHNG  EQU   PABCHAIN
PABWEQP  EQU   PABWEQA+1
@NM00057 EQU   PABWEQA
PABWEQG  EQU   PABWEQA
LOKXCL   EQU   @NM00055
LOKPRY   EQU   @NM00055
@NM00056 EQU   @NM00055
@NM00054 EQU   LOKCHNG
LOKCT    EQU   ISTLOK
ISTRETR7 EQU   ISTRETRG+4
ISTRETR6 EQU   ISTRETRG
ISTRSV01 EQU   ISTAVT+42
ISTPDAVP EQU   ISTAVT+38
ISTVTTP  EQU   ISTAVT+36
ISTAGTWT EQU   ISTAVT+34
ISTATRT  EQU   ISTAVT+32
ISTARID  EQU   ISTAVT+30
ISTX1    EQU   ISTAVT+29
ISTPHNM  EQU   ISTAVT+24
ISTAPSEX EQU   ISTAVT+20
ISTVTTIK EQU   ISTAVT+18
AVTASID  EQU   ISTAVT+16
ISTAPSTA EQU   ISTAVT+12
ISTAS53  EQU   ISTAVT+8
ISTAS49  EQU   ISTAVT+4
ISTACVT  EQU   ISTAVT
RPLSIGDA EQU   RPLVTEXT+32
RPLSAV13 EQU   RPLVTEXT+28
RPLUSNSO EQU   RPLOSENS+2
RPLSSMO  EQU   RPLSSNSO+1
@NM00135 EQU   RPLSSEO
RPLRRO   EQU   RPLSSEO
RPLFIO   EQU   RPLSSEO
RPLSTATO EQU   RPLSSEO
RPLCPMO  EQU   RPLSSEO
@NM00134 EQU   RPLSSEO
@NM00133 EQU   RPLOPT12
@NM00132 EQU   RPLOPT12
@NM00131 EQU   RPLOPT12
RPLNIBTK EQU   RPLOPT12
RPLTRUNC EQU   RPLOPT12
RPLKEEP  EQU   RPLOPT12
@NM00130 EQU   RPLOPT12
RPLRSVE8 EQU   RPLOPT11
RPLRSVE7 EQU   RPLOPT11
RPLRSVE6 EQU   RPLOPT11
RPLRSVE5 EQU   RPLOPT11
RPLRSVE4 EQU   RPLOPT11
RPLSTOP  EQU   RPLOPT11
RPLSTART EQU   RPLOPT11
RPLQUIES EQU   RPLOPT11
RPLRSVI6 EQU   RPLOPT10
RPLRSVI5 EQU   RPLOPT10
RPLRSVI4 EQU   RPLOPT10
RPLRSVI3 EQU   RPLOPT10
RPLTSKY  EQU   RPLOPT10
RPLSPARM EQU   RPLOPT10
RPLDSPLY EQU   RPLOPT10
RPLBSCID EQU   RPLOPT10
RPLTOPL  EQU   RPLOPT9
RPLCIDE  EQU   RPLOPT9
RPLRNNM  EQU   RPLOPT9
RPLAPPST EQU   RPLOPT9
RPLCOUNT EQU   RPLOPT9
RPLTERMS EQU   RPLOPT9
RPLDEVCH EQU   RPLOPT9
RPLLOGON EQU   RPLOPT9
RPLESR2  EQU   RPLUSNSI+1
RPLESR1  EQU   RPLUSNSI
@NM00129 EQU   RPLSSEI
RPLRRI   EQU   RPLSSEI
RPLFII   EQU   RPLSSEI
RPLSTATI EQU   RPLSSEI
RPLCPMI  EQU   RPLSSEI
RPLPATHI EQU   RPLSSEI
RPLARCLN EQU   RPLVTEXT+8
RPLAAREA EQU   RPLVTEXT
RPLERMSA EQU   RPLCOMN+72
RPLEMLEN EQU   RPLCOMN+70
RPLACTIV EQU   RPLCOMN+69
RPLBRANC EQU   RPLEXTD1
RPLNIB   EQU   RPLEXTD1
RPLTCRYP EQU   RPLEXTD1
@NM00128 EQU   RPLEXTD1
RPLEXIT  EQU   RPLEXTD1
RPLNEXIT EQU   RPLEXTD1
RPLEXSCH EQU   RPLEXTD1
RPLDDDD  EQU   RPLRBAR+4
@NM00127 EQU   RPLRBAR+3
@NM00126 EQU   RPLAIXID
RPLAXPKP EQU   RPLAIXID
RPLAIXPC EQU   RPLRBAR
RPLRSV88 EQU   RPLOPT8
RPLUNCON EQU   RPLOPT8
RPLACTV  EQU   RPLOPT8
RPLSESS  EQU   RPLOPT8
RPLPEND  EQU   RPLOPT8
RPLODPRM EQU   RPLOPT8
RPLODACP EQU   RPLOPT8
RPLODACQ EQU   RPLOPT8
RPLRSV78 EQU   RPLOPT7
RPLTCRNO EQU   RPLOPT7
RPLRLSOP EQU   RPLOPT7
RPLTPOST EQU   RPLOPT7
RPLQOPT  EQU   RPLOPT7
RPLCNIMM EQU   RPLCNOPT
RPLCNANY EQU   RPLCNOPT
RPLCNALL EQU   RPLCNOPT
RPLRSV68 EQU   RPLOPT6
RPLRSV67 EQU   RPLOPT6
RPLLOCK  EQU   RPLOPT6
RPLNCOND EQU   RPLOPT6
RPLCOND  EQU   RPLOPT6
RPLEOT   EQU   RPLUNTYP
RPLEOM   EQU   RPLUNTYP
RPLEOB   EQU   RPLUNTYP
RPLWROPT EQU   RPLOPT5
RPLNODE  EQU   RPLOPT5
RPLERACE EQU   RPLWRTYP
RPLEAU   EQU   RPLWRTYP
RPLNERAS EQU   RPLWRTYP
RPLPSOPT EQU   RPLOPT5
@NM00125 EQU   RPLOPT5
RPLDLGIN EQU   RPLOPT5
RPLCHAIN EQU   RPLNXTRP
@NM00124 EQU   RPLOPT4
RPLMKFRM EQU   RPLOPT4
RPLENDTR EQU   RPLOPT4
RPLALIGN EQU   RPLOPT3
RPLFMT   EQU   RPLOPT3
RPLFLD   EQU   RPLOPT3
RPLVFY   EQU   RPLOPT3
RPLBLK   EQU   RPLOPT3
RPLSFORM EQU   RPLOPT3
RPLEODS  EQU   RPLOPT3
RPLNSP   EQU   RPLOPT2
RPLUPD   EQU   RPLOPT2
RPLWAITX EQU   RPLOPT2
RPLLRD   EQU   RPLOPT2
RPLBWD   EQU   RPLOPT2
RPLCNV   EQU   RPLOPT2
RPLADD   EQU   RPLADR
RPLKEY   EQU   RPLOPT2
RPLECBIN EQU   RPLECBSW
RPLGEN   EQU   RPLOPT1
RPLKGE   EQU   RPLOPT1
RPLASY   EQU   RPLOPT1
RPLSKP   EQU   RPLOPT1
RPLSEQ   EQU   RPLOPT1
RPLDIR   EQU   RPLOPT1
RPLLOC   EQU   RPLOPT1
RPLDAF   EQU   RPLARG+2
RPLSAF   EQU   RPLARG
RPLTCBPT EQU   RPLCOMN+28
RPLDACB  EQU   RPLCOMN+24
RPLCCHAR EQU   RPLCOMN+20
RPLSTRID EQU   RPLCOMN+18
RPLKEYL  EQU   RPLKEYLE
RPLRDSOH EQU   RPLFDB3
RPLRLG   EQU   RPLFDB3
RPLLGFRC EQU   RPLFDB3
RPLREOM  EQU   RPLFDB3
RPLREOB  EQU   RPLFDB3
RPLSV32  EQU   RPLFDB3
RPLUINPT EQU   RPLFDB3
RPLSTSAV EQU   RPLFDB2
RPLCUERR EQU   RPLFDB2
RPLDLGFL EQU   RPLFDB2
RPLIOERR EQU   RPLFDB2
RPLDVUNS EQU   RPLFDB2
RPLATND  EQU   RPLFDB2
RPLRVID  EQU   RPLFDB2
RPLERLK  EQU   RPLFDB2
RPLERREG EQU   RPLRTNCD
RPLSTAT  EQU   RPLFDBWD
RPLPOST  EQU   RPLECB
RPLWAIT  EQU   RPLECB
RPLPLHPT EQU   RPLCOMN+4
RPLLEN2  EQU   RPLLEN
RPLSTYP  EQU   RPLIDWD+1
RPLID    EQU   RPLIDWD
SVECC010 EQU   TOLTEPWA+3952
SVETC035 EQU   TOLTEPWA+3880
SVESC030 EQU   TOLTEPWA+3808
SVESC020 EQU   TOLTEPWA+3664
SVEIC002 EQU   TOLTEPWA+3520
SVECC014 EQU   TOLTEPWA+3376
SVESC120 EQU   TOLTEPWA+3304
SVESC025 EQU   TOLTEPWA+3088
@NM00053 EQU   TOLTEPWA+2980
@NM00052 EQU   TOLTEPWA+2976
$R13PR3  EQU   TOLTEPWA+2972
$CEINT2  EQU   TOLTEPWA+2968
$CEINT1  EQU   TOLTEPWA+2964
$MSGGET  EQU   TOLTEPWA+2960
$ACQLIST EQU   TOLTEPWA+2956
$R4SAVE1 EQU   TOLTEPWA+2952
$CLSISS  EQU   TOLTEPWA+2950
$CLSCNT  EQU   TOLTEPWA+2948
$CUTABLE EQU   TOLTEPWA+2868
$BUFSZ2  EQU   TOLTEPWA+2864
$RESID2  EQU   TOLTEPWA+2860
$OLTCCW2 EQU   TOLTEPWA+2856
$ENDBFR2 EQU   TOLTEPWA+2852
$1STBFR2 EQU   TOLTEPWA+2848
$TECB2   EQU   TOLTEPWA+2844
$BUFSZ1  EQU   TOLTEPWA+2840
$RESID1  EQU   TOLTEPWA+2836
$OLTCCW1 EQU   TOLTEPWA+2832
$ENDBFR1 EQU   TOLTEPWA+2828
$1STBFR1 EQU   TOLTEPWA+2824
$TECB1   EQU   TOLTEPWA+2820
$WAITIME EQU   TOLTEPWA+2816
$TRTN#   EQU   TOLTEPWA+2815
$WIODEV  EQU   TOLTEPWA+2814
$RQSTSZE EQU   TOLTEPWA+2812
$RQSTPTR EQU   TOLTEPWA+2808
$R4SAVE  EQU   TOLTEPWA+2804
$PARTADR EQU   TOLTEPWA+2800
$TBSDATA EQU   TOLTEPWA+2796
$CTWIDTH EQU   TOLTEPWA+2795
$CTLINE  EQU   TOLTEPWA+2794
$APWIDTH EQU   TOLTEPWA+2793
$APLINE  EQU   TOLTEPWA+2792
$INDEX   EQU   $IMITX
$UMXX    EQU   @NM00051+14
$NSXX    EQU   @NM00051+12
$ATACNT  EQU   $NSCNT
$CTR     EQU   @NM00051+8
$ATAPTR  EQU   $NSPTR
$DDRPTR  EQU   @NM00051
$DTORESP EQU   TOLTEPWA+2712
$APNAME  EQU   TOLTEPWA+2704
$24SYMNE EQU   $24CATMG+4
$24DEVAD EQU   $24CATMG
$24RTN#  EQU   $24FEMSG+8
$ESECTID EQU   $24FEMSG
$24FLGS  EQU   TOLTEPWA+2680
$24SAVE2 EQU   TOLTEPWA+2676
$24SAVE1 EQU   TOLTEPWA+2672
$24UNADR EQU   TOLTEPWA+2668
$24SAV13 EQU   TOLTEPWA+2664
$24RETCD EQU   TOLTEPWA+2663
$MACID   EQU   TOLTEPWA+2661
$CSPARE  EQU   $CFLGS
$C2WAY   EQU   $CFLGS
$CINCT   EQU   $CCOMDAT+12
$CINADR  EQU   $CCOMDAT+8
$COUTCT  EQU   $CCOMDAT+4
$COUTAD  EQU   $CCOMDAT
ROOTLOC  EQU   TOLTEPWA+2640
$WORK    EQU   TOLTEPWA+2376
$EXTA    EQU   TOLTEPWA+2320
$PASSONA EQU   TOLTEPWA+2264
$INBUFR  EQU   TOLTEPWA+2104
$BUFFER  EQU   TOLTEPWA+1976
$TLTRPL3 EQU   TOLTEPWA+1856
$SLTBL   EQU   TOLTEPWA+1468
$CDEVPT  EQU   TOLTEPWA+1466
$DEVCNTS EQU   TOLTEPWA+1464
$FEEDBCK EQU   $DEVTBLE+66
$WTISUED EQU   $DEVFLG4
$EXIOISD EQU   $DEVFLG4
$REMWRIT EQU   $DEVFLG4
$REMDONE EQU   $DEVFLG4
$2NDUSED EQU   $DEVFLG4
$1STUSED EQU   $DEVFLG4
$IGLXIFB EQU   $DEVFLG4
$EXIOLV3 EQU   $DEVFLG4
@NM00050 EQU   $DEVFLG5
$DVBASIC EQU   $DEVFLG5
$OPNDFAL EQU   $DEVFLG5
$ACQNCB  EQU   $DEVFLG5
$REMOTE  EQU   $DEVFLG5
$ENDNODE EQU   $DEVFLG5
$LINENME EQU   $RNINFO
$DVCOL   EQU   $LDNCBPT+2
$DVROW   EQU   $LDNCBPT
$NCSPLP  EQU   $DEVTBLE+44
$DVLN    EQU   $SSCPDAF
$DAF     EQU   $DEVSESP+4
$VARYPAB EQU   $DEVSESP
$SYSMN   EQU   $DEVTBLE+28
@NM00049 EQU   $DEVFLG3
$CLRSNT  EQU   $DEVFLG3
$OLTERR  EQU   $DEVFLG3
$SRTEST  EQU   $DEVFLG3
$POLLREQ EQU   $DEVFLG3
$ACQRED  EQU   $DEVFLG3
$NOTDEV  EQU   $DEVFLG3
$CEINTRP EQU   $DEVFLG2
$TESTMDE EQU   $DEVFLG2
$DEVALOC EQU   $DEVFLG2
$ALLDATA EQU   $DEVFLG2
$ENDCNTL EQU   $DEVFLG2
$CTLDEV  EQU   $DEVFLG2
$NOCDS   EQU   $DEVFLG2
$DATAIN  EQU   $DEVFLG2
$PRIMARY EQU   $DEVFLG1
$DEVACT  EQU   $DEVFLG1
$DVLGMDE EQU   $ATTNEXP
$DVSPRM  EQU   $EVNCPLT
$GRABBED EQU   $DEVFLG1
$CATASTR EQU   $DEVFLG1
$LETGO   EQU   $DEVFLG1
$EXTDEV  EQU   $DEVCDS+11
@NM00048 EQU   $DEVSDCF
$NOTPRIM EQU   $DEVSDCF
@NM00047 EQU   $DEVCDSF
@NM00046 EQU   $DEVCDSF
@NM00045 EQU   $DEVCDSF
$CDSNAME EQU   $DEVCDSF
$EXTRN   EQU   $DEVCDSF
$CEVOLUM EQU   $DEVCDSF
$SHARD   EQU   $DEVCDSF
$DEVFPM  EQU   $DEVCDSF
$DEVCNT  EQU   $DEVCDS+8
$DEVTYPE EQU   $DEVFEAT+3
$DEVCLAS EQU   $DEVFEAT+2
$DEVMOD  EQU   $DEVFEAT
$DEVRDGT EQU   @NM00043+1
$DEVCTLU EQU   @NM00043+1
$DEVCHAN EQU   @NM00043
@NM00044 EQU   @NM00043
$CTINDX  EQU   $DEVUNAD
@NM00042 EQU   $COMMFLG+15
@NM00041 EQU   $COMMFLG+14
@NM00040 EQU   $COMMFLG+13
@NM00039 EQU   $COMMFLG+12
@NM00038 EQU   $FLAG12
$VARYINP EQU   $FLAG12
$ENDTEST EQU   $FLAG12
$VRYHRD  EQU   $FLAG12
$VRYSFT  EQU   $FLAG12
$OPTMSG  EQU   $FLAG12
@NM00037 EQU   $COMMFLG+10
@NM00036 EQU   $COMMFLG+9
@NM00035 EQU   $COMMFLG+8
$TCECM   EQU   $FLAG8
$VS2     EQU   $FLAG8
$VS1     EQU   $FLAG8
$EDOS    EQU   $FLAG8
@NM00034 EQU   $FLAG8
@NM00033 EQU   $FLAG8
$RCVMSG  EQU   $FLAG7
$RCVRFLG EQU   $FLAG7
$LDOIS   EQU   $FLAG7
$DCONTCT EQU   $FLAG7
$2NDDATA EQU   $FLAG7
$1STDATA EQU   $FLAG7
$ABTERM  EQU   $ABNDBIT
$FSTMCIS EQU   $FLAG6
$DISCREQ EQU   $FLAG6
$DISCISS EQU   $FLAG6
$CHANGE  EQU   $FLAG6
$RECAL11 EQU   $FLAG6
@NM00032 EQU   $FLAG5
$PROGCK  EQU   $CANCEL
$PRINTAP EQU   $FLAG5
@NM00031 EQU   $FLAG5
$MSG922  EQU   $FLAG5
$CT924   EQU   $FLAG5
$FSTCAT  EQU   $FLAG5
$FSTFE   EQU   $FLAG5
$ACTOPND EQU   $FLAG4
$ACQCUTT EQU   $FLAG4
$CLSSACT EQU   $FLAG4
$BACKINT EQU   $FLAG4
$DMSGSW  EQU   $FLAG4
$TSTDEVP EQU   $FLAG4
$APRQPER EQU   $FLAG4
$OPCOM   EQU   $FLAG4
$NEWAP   EQU   $FLAG3
$OPTERR  EQU   $FLAG3
$PRTONLY EQU   $FLAG3
$REQSTOR EQU   $FLAG3
$LOGOFFE EQU   $FLAG3
$TSTERR  EQU   $FLAG3
$DEVERR  EQU   $FLAG3
@NM00030 EQU   $COMMFLG+1
@NM00029 EQU   $COMMFLG
@NM00028 EQU   $CDA+120
$CUCNT   EQU   $CDA+118
@NM00027 EQU   $CDA+117
$PRTFORM EQU   $CDA+116
$OPISCNT EQU   $CDA+114
$OPNDCNT EQU   $CDA+112
$GETMSZE EQU   $CDA+110
$GRCNTS  EQU   $CDA+108
$CTLCNT  EQU   $CDA+106
$ACTLVL  EQU   $CDA+105
$PRNTLVL EQU   $CDA+104
$ERRCNTA EQU   $CDA+102
$TLCNT   EQU   $CDA+100
$TIMEALW EQU   $CDA+96
$PTRAREA EQU   $CDA+92
$GETMPTR EQU   $CDA+88
$R13PTRT EQU   $CDA+84
$R13PTR  EQU   $CDA+80
$TEPEND  EQU   $CDA+76
$PLINKDL EQU   $CDA+72
$TEPBEGN EQU   $CDA+68
$FRELPTR EQU   $CDA+64
$HIGHADR EQU   $HIMOREC
$LOMOREC EQU   $CDA+56
$LOWADDR EQU   $OLTPTR
$ENDCOMM EQU   $CDA+48
$COMMON  EQU   $RCA
$SLASHAD EQU   $CDA+32
$PASSON  EQU   $CDA+28
$TOLBRTB EQU   $CDA+24
$SCTPTR8 EQU   $CDA+20
$SCTPTR  EQU   $CDA+16
$TBWDPTR EQU   $CDA+12
$TFWDPTR EQU   $CDA+8
@NM00026 EQU   $CDA
@NM00025 EQU   $SCTTBLE+98
$SCTLWTC EQU   $SCTTBLE+96
$SCTLWTA EQU   $SCTTBLE+92
#EXT     EQU   $SCTTBLE+88
#PASS    EQU   $SCTTBLE+84
#TABLE   EQU   $SCTTBLE+80
#MSGIDAC EQU   $SCTTBLE+78
@NM00024 EQU   $SCTTBLE+71
$RETMASK EQU   $SCTTBLE+70
$R249255 EQU   $ROUTMSK+29
$R241248 EQU   $ROUTMSK+28
$R233240 EQU   $ROUTMSK+27
$R225232 EQU   $ROUTMSK+26
$R217224 EQU   $ROUTMSK+25
$R209216 EQU   $ROUTMSK+24
$R201208 EQU   $ROUTMSK+23
$R193200 EQU   $ROUTMSK+22
$R185192 EQU   $ROUTMSK+21
$R177184 EQU   $ROUTMSK+20
$R169176 EQU   $ROUTMSK+19
$R161168 EQU   $ROUTMSK+18
$R153160 EQU   $ROUTMSK+17
$R145152 EQU   $ROUTMSK+16
$R137144 EQU   $ROUTMSK+15
$R129136 EQU   $ROUTMSK+14
$R121128 EQU   $ROUTMSK+13
$R113120 EQU   $ROUTMSK+12
$R105112 EQU   $ROUTMSK+11
$R097104 EQU   $ROUTMSK+10
$R089096 EQU   $ROUTMSK+9
$R081088 EQU   $ROUTMSK+8
$R073080 EQU   $ROUTMSK+7
$R065072 EQU   $ROUTMSK+6
$R057064 EQU   $ROUTMSK+5
$R049056 EQU   $ROUTMSK+4
$R041048 EQU   $ROUTMSK+3
$R033040 EQU   $ROUTMSK+2
$R025032 EQU   $ROUTMSK+1
$R017024 EQU   $ROUTMSK
$TOTFLG2 EQU   $SCTTBLE+39
@NM00023 EQU   $TOTFLG1
@NM00022 EQU   $TOTFLG1
@NM00021 EQU   $TOTFLG1
$CURELOD EQU   $TOTFLG1
@NM00020 EQU   $TOTFLG1
@NM00019 EQU   $TOTFLG1
$LINESHR EQU   $TOTFLG1
@NM00018 EQU   $OLTFLG2
@NM00017 EQU   $OLTFLG2
@NM00016 EQU   $OLTFLG2
@NM00015 EQU   $OLTFLG2
@NM00014 EQU   $OLTFLG2
@NM00013 EQU   $OLTFLG2
@NM00012 EQU   $OLTFLG2
$TALK    EQU   $OLTFLG2
$DYCOM   EQU   $OLTFLGS
@NM00011 EQU   $OLTFLGS
$TRACE   EQU   $OLTFLGS
$RETCODE EQU   $OLTFLGS
$CONTCB  EQU   $OLTFLGS
$RETAIN  EQU   $OLTFLGS
$CLEANRT EQU   $OLTFLGS
$MANINTV EQU   $OLTFLGS
$OLTSIZE EQU   $SCTTBLE+34
$QSCTMOD EQU   $EXECFLG
$CTRLMOD EQU   $EXECFLG
$CLEANUP EQU   $EXECFLG
$LSTPDEV EQU   $EXECFLG
$ERRCNT  EQU   $EXECFLG
$RTNSLCT EQU   $EXECFLG
$MULTDEV EQU   $EXECFLG
@NM00010 EQU   $EXECFLG
$RMSKCNT EQU   $SCTTBLE+32
$SYNAME  EQU   $CDS8T19+4
$EXTSIG  EQU   $CDS8T19+3
$CDFLGS  EQU   $CDS8T19+1
$CDSCNT  EQU   $CDS8T19
$PDEVDSC EQU   $SCTTBLE+16
$PDEVADR EQU   $SCTTBLE+12
$COMMCN  EQU   $CDSFLGS
$CUSTSYM EQU   $CDSFLGS
$TWOCHSW EQU   $CDSFLGS
$SYMNAME EQU   $CDSFLGS
$EXTINTC EQU   $CDSFLGS
$CEVOL   EQU   $CDSFLGS
$SHARED  EQU   $CDSFLGS
$FPM     EQU   $CDSFLGS
$LASTSUB EQU   $PDEVFLG
@NM00009 EQU   $PDEVFLG
@NM00008 EQU   $PDEVFLG
@NM00007 EQU   $PDEVFLG
$LASTDEV EQU   $PDEVFLG
@NM00006 EQU   $PDEVFLG
$EXFILPT EQU   $PDEVFLG
$FPMOLD  EQU   $PDEVFLG
$TSSSYM  EQU   $SCTTBLE+8
$SCTLEVL EQU   $SCTTBLE+7
$DRIVER  EQU   $SCTTBLE+6
$RT0916  EQU   $SCTTBLE+5
$RT0108  EQU   $SCTTBLE+4
$LOOPTST EQU   $ERROPT
$LOOPERR EQU   $ERROPT
$NERRPRT EQU   $ERROPT
$NOCNTRL EQU   $ERROPT
$ALTPRNT EQU   $ERROPT
$CATERR  EQU   $ERROPT
$ASTERIK EQU   $ERROPT
$TESTERR EQU   $ERROPT
$FSTCOMM EQU   $TESTOPT
$INDEFLP EQU   $TESTOPT
$NOPRT   EQU   $TESTOPT
$PARAPRT EQU   $TESTOPT
@NM00005 EQU   $TESTOPT
$ERRLPCT EQU   $SCTTBLE
$TLTEND  EQU   $RCAAREA+945
$CNSLID  EQU   $RCAAREA+936
@NM00004 EQU   $RCAAREA+605
$VTAMEND EQU   $RCAFLG
$TPPOSTD EQU   $RCAFLG
$NEWCT   EQU   $RCAFLG
$ABNDALL EQU   $RCAFLG
$CUTESTB EQU   $RCAFLG
$CONSOLE EQU   $RCAFLG
$TPLOGON EQU   $RCAFLG
$UPDATE  EQU   $RCAFLG
$DEVAREA EQU   $RCAAREA+600
$CTDVAR  EQU   $RCAAREA+596
$BUFFS   EQU   $RCAAREA+464
$TLTNIB  EQU   $CONSTNT+140
$TLTPRPL EQU   $CONSTNT+20
@NM00003 EQU   $CONSTNT+4
@NM00002 EQU   $CONSTNT+2
$USECNT  EQU   $CONSTNT
$CURRTWA EQU   $POINTER+140
$CTNAME  EQU   $POINTER+132
$CTARGX  EQU   $POINTER+128
$COMINT  EQU   $POINTER+120
$QUEHNDL EQU   $POINTER+116
@NM00001 EQU   $POINTER+36
$RTNPTR  EQU   $POINTER+32
$TLTECB1 EQU   $POINTER+24
$CLEANP  EQU   $POINTER+20
$ABEND   EQU   $POINTER+16
$LSTAREA EQU   $POINTER+12
$FSTAREA EQU   $POINTER+8
$CVTSAVE EQU   $POINTER+4
$TOLTEP  EQU   $POINTER
$TLTACB  EQU   $RCAAREA
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00159 EQU   C16C0225
@RT00168 EQU   C16C0253
@RT00173 EQU   C16C0100
@RF00173 EQU   C16C0225
@RT00189 EQU   C16C0253
@RT00205 EQU   C16C0075
@RT00226 EQU   C16C0075
@RT00274 EQU   C16C0300
@RT00277 EQU   C16C0300
@RF00277 EQU   C16C0075
@RT00280 EQU   C16C0075
@RC00282 EQU   C16C0300
@RT00309 EQU   C16C0075
@RT00312 EQU   C16C0250
@RT00318 EQU   C16C0075
@RT00327 EQU   C16C0250
@RF00327 EQU   C16C0256
@RF00324 EQU   C16C0075
@RT00339 EQU   C16C0256
@RT00367 EQU   C16C1025
@RF00361 EQU   C16C1050
@RC00414 EQU   @RC00412
@RC00419 EQU   @RC00412
@RC00435 EQU   @RC00434
@RT00519 EQU   C16C0905
@PB00007 EQU   @PB00008
@PB00006 EQU   @PB00007
@PB00005 EQU   @PB00006
@PB00004 EQU   @PB00005
@PB00003 EQU   @PB00004
@PB00002 EQU   @PB00003
@ENDDATA EQU   *
         END   ISTCC016,(C'PLS2035',0702,80232)
