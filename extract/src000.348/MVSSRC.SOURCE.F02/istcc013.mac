         TITLE 'OS/VS LOADER TO BRING IN CDS, PLINK AND ROOT MODULES'
ISTCC013 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'ISTCC013  80.232'                                 0001
         DROP  @15
@PROLOG  ST    @14,12(,@13)                                        0001
         STM   @02,@12,28(@13)                                     0001
         BALR  @11,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@11                                         0001
***********************************************************************
*                                                                     *
* STATUS: CHANGE LEVEL 000     SUPPORT CODE: X02008                   *
*                                                                     *
* FUNCTION:                                                           *
*           1. CALCULATES THE SIZE OF THE MODULE (OLT AND PLINK).     *
*              IF IT IS NOT A CDS LOAD, IT WILL PASS THE SIZE BACK    *
*              TO THE CALLER. IF IT IS A CDS LOAD, IT WILL LOAD THE   *
*              REQUESTED NUMBER OF BYTES INTO CORE.                   *
*                                                                     *
*           2. LOADS THE REQUESTED OLT, PLINK OR CDS INFORMATION      *
*              AND RETURNS THE STARTING ADDRESS OF THE LOADED MODULE  *
*              TO THE CALLER.                                         *
*                                                                     *
* ENTRY POINTS: ISTCC013                                              *
*                                                                     *
* INPUT: UPON ENTRY TO THIS MODULE REGISTER 1 POINTS TO A LIST WITH   *
*        THE FOLLOWING PARAMETERS:                                    *
*                   DS    C  INDICATORS FOR TRANSIENT MANAGER         *
*                   DS    C  MACRO LEVEL                              *
*                   DS    2C IDENTITY OF MACRO EXPANSION              *
*                   DS    F  POINTER TO PARAMETER LIST                *
*        THIS PARAMETER LIST HAS THE FOLLOWING FORMAT:                *
*                   DS    8C MODULE NAME                              *
*                   DS    F  POINTER TO WHERE MODULE SHOULD BE LOADED *
*                   DS    C  FLAGS                                    *
*                   DS    C  RESERVED FOR FUTURE USE                  *
*                   DS    H  CDS MODULE COUNT                         *
*                                                                     *
* OUTPUT:  REGISTER 0 WILL CONTAIN MODULE SIZE(FOR COMPUTE REQUEST)   *
*          REGISTER 1 WILL CONTAIN STARTING ADDRESS OF LOADED MODULE. *
*          REGISTER 15 WILL CONTAIN RETURN CODES:                     *
*                   X'00'   LOAD SUCCESSFUL/COMPUTE SUCCESSFUL        *
*                   X'04'   NO END CARD                               *
*                   X'08'   READ ERROR                                *
*                   X'0C'   MODULE NOT FOUND                          *
*                   X'10'   REP CARD ERROR                            *
*                   X'14'   LOAD CALLED BEFORE COMPUTE                *
*                   X'18'   ORDER ERROR                               *
*                   X'22'   NOT AUTHORIZED TO USE LIBRARY    @ZA31031 *
*                                                                     *
*          THE FOLLOWING MESSAGES ARE OUTPUTTED:                      *
*                                                                     *
*                 1.    202I  -  THIS MESSAGE WILL INFORM THE USER    *
*                                THAT AN INVALID REP CARD EXISTS FOR  *
*                                THE SPECIFIED TEST SECTION.          *
*                 2.    203I  -  THIS MESSAGE TELLS THE USER THAT AN  *
*                                END OF FILE INDICATION OCCURED       *
*                                UNEXPECTANTLY. DATASET MAY HAVE BEEN *
*                                CREATED INCORRECTLY.                 *
*                 3.    205I  -  THIS MESSAGE TELLS THE USER THAT AN  *
*                                I/O ERROR OCCURED DURING THE LOADING *
*                                OF THE TEST SECTION.                 *
*                 4.    901I  -  THIS MESSAGE TELLS THE USER THAT THE *
*                                DD CARD NAMED XXXXXXXX COULD NOT BE  *
*                                OPENED, THEREFORE THE DATASET IS NOT *
*                                ACCESSIBLE.                          *
*                 5.    911I  -  THIS MESSAGE TELLS THE USER THAT AN  *
*                                INVALID OR UNRECOGNIZEABLE CONTROL   *
*                                CARD HAS BEEN DETECTED. DATASET MAY  *
*                                HAVE BEEN CREATED INCORRECTLY.       *
*                                                                     *
* EXTERNAL ROUTINES:                                                  *
*                                                                     *
*          THIS MODULE WILL ISSUE THE FOLLOWING SYSTEM MACROS:        *
*                                                                     *
*                 1. OPEN   TO INITIATE PROCESSING OF REQUIRED DATASET*
*                 2. CLOSE  TO COMPLETE PROCESSING OF DATA SETS       *
*                 3. FIND   TO DETERMINE IF A MODULE EXISTS           *
*                 4. POINT  TO FIND THE RECORD THAT MUST BE READ      *
*                 5. READ   TO GET THE CONTROL CARDS & MODULE TEXT    *
*                            INTO CORE                                *
*                 6. CHECK  TO WAIT FOR COMPLETION OF READ REQUEST    *
*                 7. NOTE   TO KEEP TRACK OF THE LAST RECORD READ     *
*                 8. DCB    TO DEFINE THE OLT LIB DCB                 *
*                                                                     *
* NORMAL EXITS:                                                       *
*          TO CALLER WITH RETURN CODE EQUAL TO ZERO.                  *
*                                                                     *
* ERROR EXITS:                                                        *
*          TO CALLER WITH RETURN CODE NOT EQUAL TO ZERO               *
*                                                                     *
* TABLES/WORKAREAS:                                                   *
*          PATCH12 - PATCH AREA                                       *
*          SAVEAREA- SAVE AREA                                        *
*          BUFFER  - READ IN BUFFER FOR CONTROL RECORDS(IE ESD, ETC)  *
*          RLCOREAD- REAL CORE ADDRESS OF MODULE                      *
*          ASSEMAD - ASSEMBLED ADDRESS OF MODULE(RELATIVE TO ZERO)    *
*          B28WORK - WORK AREA                                        *
*          WORK    - WORK AREA                                        *
*          RELFT   - RELOCATION FACTOR FOR RLD DATA ITEMS             *
*          RDBUFAD - ADDRESS/POINTER TO READ IN AREA                  *
*          RDLNGTH - LENGTH OF READ                                   *
*          RETCODE - RETURN CODE SAVE AREA (DEBUG AID)                *
*          TTRZ    - TTRZ FOR READ ROUTINE                            *
*          SIZEAREA- AREA USED TO STORE MODULE SIZE                   *
*          OLTDCB  - DCB FOR OLT LIBRARY                              *
*          CHARTBL - TABLE USED TO VALIDATE REP DATA                  *
*          LDSWITCH- INTERNAL FLAG BYTE                               *
*             BIT 0- COMPUTE HAS BEEN DONE FOR REQUESTED MODULE       *
*             BIT 1- THIS IS A TRUNCATED(CDS) LOAD REQUEST            *
*             BIT 2- TXTHDR & TXT INFORMATION MUST BE PROCESSED       *
*             BIT 3- COMPUTE HAS BEEN STARTED                         *
*             BIT 4- FLAG USED TO INDICATE WHICH BYTE OF REP DATA     *
*                    BEING CONVERTED                                  *
*             BIT 5- I/O ERROR OCCURED ON LOAD                        *
*             BIT 6- UNUSED AT PRESENT TIME                           *
*             BIT 7- UNUSED AT PRESENT TIME                           *
*                                                                     *
* CHANGE ACTIVITY:                                                    *
*      APAR OZ31031                                    @ZA31031       *
*                                                                     *
***********************************************************************
*   SVECC013(2)=SAVPTR;             /* STORE CALLERS SAVEAREA ADDR   */
         ST    SAVPTR,SVECC013+4(,WAPTR)                           0028
*   BACKSAVE(3)=ADDR(SVECC013);     /* STORE ADDR OF MY SAVEAREA     */
         LA    @12,SVECC013(,WAPTR)                                0029
         ST    @12,BACKSAVE+8(,SAVPTR)                             0029
*   SAVPTR=ADDR(SVECC013);          /* POINT TO MY SAVEAREA TO CALL  */
         LR    SAVPTR,@12                                          0030
*   GEN CODE SETS(EXITPTR,RCGEN,R1) REFS(MRT202,MRT203,MRT205,MRT901,
*       MRT911,C13C0091,LDRETMSG,MRT899) FLOWS(LDRETMSG,C13C0091); 0031
*                               EQUATES                               *
***********************************************************************
***********************************************************************
*                              REGISTERS                              *
***********************************************************************
R0       EQU   0                       REGISTER 0
***********************************************************************
*                     ONE CARD REMOVED SO IT COULD BE DCL IN PLS      *
***********************************************************************
R2       EQU   2                       REGISTER 2
R3       EQU   3                       REGISTER 3
R4       EQU   4                       REGISTER 4
R5       EQU   5                       REGISTER 5
R6       EQU   6                       REGISTER 6
R7       EQU   7                       REGISTER 7
R8       EQU   8                       REGISTER 8
R9       EQU   9                       REGISTER 9
R10      EQU   10                      REGISTER 10
R11      EQU   11                      BASE REGISTER
R12      EQU   12                      REGISTER 12
R13      EQU   13                      REGISTER 13
R14      EQU   14                      REGISTER 14
R15      EQU   15                      REGISTER 15
DEBREG   EQU   1                   POINTER TO THE DEB FOR AUTH CHECK
REPPTR   EQU   1                       POINTER TO WHERE REP STARTS
PLISTREG EQU   3                       PARAMETER LIST POINTER
FROMADDR EQU   5                       FROM ADDRESS FOR CONVERT
TOADDR   EQU   6                       TO ADDRESS FOR CONVERT
LNGTHREG EQU   6                       LENGTH OF READ
COUNT    EQU   7                       COUNT FOR CONVERSION ROUTINE
DATAPTR  EQU   8                       POINTER TO RLD DATA FIELD
CHAR     EQU   8                       CHARACTER TO BE MATCHED
NAMEPTR  EQU   8                       POINTER TO MODULE NAME
RLDBTCNT EQU   9                       NO OF 4 BYTE AREAS IN RLD CARD
DCBPTR   EQU   9                       POINTER TO NEEDED DCB
REPBYTE  EQU   9                       CHARACTER TO BE CONVERTED
TXTBTCNT EQU   9                       TXT BYTE COUNT
ESDBTCNT EQU   9                       ESD BYTE COUNT
AREAPTR  EQU   10                      POINTER TO READ BUFFER
TTRZPTR  EQU   10                      POINTER TO TTRZ FOR READ
INDEX    EQU   10                      INDEX REGISTER
***********************************************************************
*                       INTERNAL FLAG EQUATES                         *
***********************************************************************
CPTSW    EQU   X'80'                   COMPUTE DONE
TRNCL    EQU   X'40'                   TRUNCATED LOAD
TWOREADS EQU   X'20'                   TWO READS REQUESTED
CMPTSTRT EQU   X'10'                   COMPUTE HAS BEEN STARTED
IOERROR  EQU   X'04'                   I/O ERROR FLAG
***********************************************************************
*                       PARAMETER LIST EQUATES                        *
***********************************************************************
PLNK     EQU   X'80'                   PLINK REQUESTED
CMPTE    EQU   X'40'                   COMPUTE REQUESTED
CDS      EQU   X'20'                   CDS LOAD
SYMBOLIC EQU   X'08'                   SYMBOLIC CDS
NAME     EQU   0                       MODULE NAME DISPLACEMENT
AD       EQU   8                       REAL CORE ADDRESS DISPLACEMENT
FLAG     EQU   12                      FLAG FIELD DISPLACEMENT
TCNT     EQU   14                      TRUNCATED COUNT DISPLACEMENT
***********************************************************************
*                       MISCELLANEOUS EQUATES                         *
***********************************************************************
TWICE    EQU   2                       MULTIPLY BY FOUR
D0       EQU   0                       DISPLACEMENT ZERO
SAMEPTR  EQU   1                       SAME ESD ID
D1       EQU   1                       DISPLACEMENT ONE
D4       EQU   4                       DISPLACEMENT FOUR
D44      EQU   44                  DEB DISPLACEMENT
L3       EQU   3                       LENGTH THREE
TMFLG    EQU   X'01'                   TRANSIENT MANAGER FLAG
OFLGS    EQU   X'10'                   OPEN FLAG
ZEROONE  EQU   X'01'                   HEX 01
HIHALF   EQU   240                     HIGH HALF OF A BYTE
ALL      EQU   255                     WHOLE BYTE
NEW      EQU   X'10'                   NEW OLT
OLD      EQU   X'20'                   OLD OLT
TYTST    EQU   X'04'                   ESD TYPE
FIRST    EQU   X'F7'                   FIRST BYTE OF DATA FLAG
SECOND   EQU   X'08'                   SECOND BYTE OF DATA FLAG
RLDFLG   EQU   X'02'                   POS OR NEG RELOCATION
MSG202   EQU   100                      DISPLACEMENT TO MSG IFD202I
MSG203   EQU   104                      DISPLACEMENT TO MSG IFD203I
MSG205   EQU   108                      DISPLACEMENT TO MSG IFD205I
MSG911   EQU   112                     DISPLACEMENT TO MSG IFD911I
MSG901   EQU   116                      DISPLACEMENT TO MSG IFD901I
         EJECT
***********************************************************************
*                             INITIALIZE                              *
***********************************************************************
         L     PLISTREG,4(R1)          PUT POINTER TO PARAMETER LIST   C
                                       IN REG 3
         MVC   RLCOREAD(4),AD(PLISTREG) GET REAL CORE ADDRESS OF WHERE C
                                       MODULE SHOULD BE LOADED
         NI    LDSWITCH,CPTSW          TURN OFF ALL INTERNAL FLAGS     C
                                       EXCEPT FOR COMPUTE
         TM    FLAG(PLISTREG),CMPTE    IS THIS A COMPUTE REQUEST
         BNO   LDTXT006                NO, GO TO CODE THAT WILL LOAD   C
                                       AND RELOCATE THE MODULE
         NI    LDSWITCH,0              TURN OFF INTERNAL COMPUTE SWITCHC
                                       THIS IS A NEW REQUEST
         XC    BUFFER(80),BUFFER       CLEAR READ BUFFER
         SPACE 1
***********************************************************************
*                         ESD CARD HANDLING                           *
***********************************************************************
LDESD001 EQU   *
         BAL   R4,LDIOSUB              GO TO IO SUBROUTINE TO READ     C
                                       FIRST ESD CARD
         CLC   BUFFER+1(L3),=C'ESD'    IS THIS AN ESD CARD
         BNE   LDESD001                NO, FIND FIRST ESD
         CLC   BUFFER+14(2),ONE1       IS THIS THE FIRST ESD CARD
         BNE   LDESD001                NO, FIND FIRST ESD
         SPACE 1
LDESD006 EQU   *
         CLC   BUFFER+16(8),NAME(PLISTREG) DOES THIS ESD CARD HAVE NAMEC
                                       OF REQUESTED UNIT TEST MODULE
         BE    LDESD011                YES, GO TO ROUTINE THAT WILL    C
                                       CONTINUE ESD PROCESSING
         CLC   BUFFER+32(8),NAME(PLISTREG) DOES THIS ESD CARD HAVE NAMEC
                                       OF REQUESTED UNIT TEST MODULE
         BNE   LDESD001                NO, GO TO ROUTINE THAT WILL GET C
                                       NEXT CARD
         SPACE 1
LDESD011 EQU   *
         OI    LDSWITCH,CPTSW          TURN ON INTERNAL COMPUTE FLAG
         MVC   B28WORK+1(L3),BUFFER+25 GET THE ADDR OF WHERE THIS      C
                                       MODULE WAS ASSEMBLED AT INTO    C
                                       WORK AREA
         SR    R7,R7                   CLEAR ESD LENGTH REG
         L     R6,B28WORK              PUT ASSEMBLE ADDRESS INTO REG 6
         ST    R6,ASSEMAD              SAVE THE ASSEMBLED ADDRESS FOR  C
                                       LATTER USE
         SPACE 1
LDESD026 EQU   *
         SR    ESDBTCNT,ESDBTCNT       CLEAR ESD BYTE COUNT REG
         IC    ESDBTCNT,BUFFER+11      GET NUMBER OF BYTES OF ESD DATA C
                                       ON THIS CARD
         SR    R8,R8                   CLEAR REG 8
         LA    R5,16                   SET REG 5 TO CONTAIN LENGTH OF  C
                                       ESD DATA FIELD
         DR    R8,R5                   DIVIDE NO. OF BYTES OF ESD DATA C
                                       BY LNGTH OF ESD DATA FLD TO FINDC
                                       NUMBER OF FLDS IN ESD CARD
         LA    R5,BUFFER+8             PRIME REG 5 WITH ADDRESS OF ESD C
                                       CARD TO SIMPLIFY LOOPING ON     C
                                       ESD DATA FIELDS ON ONE CARD
         SPACE 1
LDESD031 EQU   *
         LA    R5,16(R5)               BUMP POINTER TO ESD CARD TO     C
                                       POINT TO MIDDLE OF ESD DATA     C
                                       FIELD
         TM    0(R5),ALL               IS THIS AN SD TYPE
         BZ    LDESD036                YES, GO TO ROUTINE WHICH WILL   C
                                       SUM ESD LENGTH FIELDS
         TM    0(R5),TYTST             DOES THIS ESD HAVE ANY LENGTH   C
                                       ATTRIBUTE
         BZ    LDESD041                NO, GO TO ROUTINE WHICH         C
                                       DETERMINES IF THERE ARE ANY MOREC
                                       ESD DATA FIELDS
         SPACE 1
LDESD036 EQU   *
         MVC   B28WORK+1(L3),5(R5)     MOVE LENGTH INTO WORK AREA
         A     R7,B28WORK              ADD THIS LENGTH TO SUM OF       C
                                       PREVIOUS LENGTHS
         SPACE 1
LDESD041 EQU   *
         BCT   ESDBTCNT,LDESD031       DECREMENT NUMBER OF ESD DATA    C
                                       FIELDS BY ONE AND IF THERE ARE  C
                                       ANY LEFT, PROCESS THIS ONE
         BAL   R4,LDIOSUB              GO TO IO SUBROUTINE TO READ NEXTC
                                       CARD
         CLC   BUFFER+1(L3),=C'ESD'    IS THIS CARD AN ESD
         BE    LDESD026                YES, GO TO ROUTINE TO SUM LENGTHC
                                       ON ESD CARDS
         CLC   BUFFER+1(L3),=C'TXT'    IS THIS CARD A TXT
         BNE   LDRLD046                NO, ORDER ERROR OR GARBAGE,     C
                                       GO TO ROUTINE THAT RETURNS 24   C
                                       IN REG 15
         EJECT
***********************************************************************
*                         TXT CARD HANDLING                           *
***********************************************************************
LDTXT001 EQU   *
         NI    LDSWITCH,ALL-TWOREADS   SET FLAG INDICATING TWO READS   C
                                       ARE REQUIRED
         ST    R7,SIZEAREA             SAVE MODULE SIZE
         LH    R5,TCNT(PLISTREG)       TAKE TRUNCATED LOAD COUNT AND
         LTR   R5,R5                   LOOK AT IT
         BZ    CMPTDONE                IF ZERO, GO TO RETURN TO CALLER C
                                       EXIT ROUTINE
         OI    LDSWITCH,TRNCL          SET TRUNCATED LOAD FLAG ON
         SPACE 1
LDTXT006 EQU   *
         LA    R15,20                  PLACE ERROR CODE 20 IN REG 15   C
                                       FOR FAILURE TO DO COMPUTE
         TM    LDSWITCH,CPTSW          HAS A COMPUTE BEEN DONE
         BNO   LDRETERR                NO, GO TO ROUTINE THAT          C
                                       DETERMINES IF THIS IS OK
         L     R6,ASSEMAD              GET ASSEMBLED ADDRESS OF MODULE
         TM    FLAG(PLISTREG),PLNK     IS THIS MODULE A PLINK MODULE
         BNO   LDTXT011                NO, BYPASS UPDATING REAL CORE AD
         A     R6,RLCOREAD             ADD ADDRESS OF OLT TO ASSEMBLED C
                                       ADDRESS OF PLINK MODULE
         ST    R6,RLCOREAD             SAVE NEW REAL CORE ADDRESS
         SPACE 1
LDTXT011 EQU   *
         L     R6,RLCOREAD             GET REAL CORE ADDRESS OF MODULE
         S     R6,ASSEMAD              SUBTRACT ASSEMBLED ADDRESS FROM C
                                       TARGET ADDRESS TO GET RELOCATIONC
                                       FACTOR
         ST    R6,RELFT                SAVE RELOCATION FACTOR
         SPACE 1
LDTXT016 EQU   *
         LH    TXTBTCNT,BUFFER+22      GET BYTE COUNT OF FOLLOWING DATAC
                                       RECORD FROM TXTHDR CARD INTO    C
                                       REG 9
         TM    LDSWITCH,TRNCL          IS THIS A TRUNCATED LOAD- A CDS C
                                       LOAD
         BNO   LDTXT026                NO, GO TO ROUTINE THAT HANDLES  C
                                       PLACING TXT CARDS INTO CORE
         LTR   R5,R5                   HAS IT BEEN DONE-LOOK AT        C
                                       TRUNCATED COUNT IN PARM LIST
         BZ    LDRLD051                YES, GO TO SUCCESSFUL EXIT      C
                                       SUBROUTINE
         CR    R5,TXTBTCNT             CHECK BYTES REQUESTED VS LENGTH C
                                       OF TXT RECORD
         BH    LDTXT021                ANOTHER RECORD IS NEEDED, GO TO C
                                       CODE THAT PREPARES FOR THIS
         LR    TXTBTCNT,R5             SET LENGTH EQUAL TO BYTES       C
                                       REQUESTED
         SPACE 1
LDTXT021 EQU   *
         SR    R5,TXTBTCNT             SET BYTES REQUESTED EQUAL TO    C
                                       DIFFERENCE OF ORIGINAL REQUEST  C
                                       AND LENGTH
         SPACE 1
LDTXT026 EQU   *
         MVC   B28WORK+1(L3),BUFFER+17 PUT ASSEMBLED ADDR OF FOLLOWING C
                                       TXT RECORD IN WORK AREA
         L     R6,B28WORK              GET THIS ASSEMBLED ADDR IN REG 6
         A     R6,RELFT                ADD RELOCATION FACTOR TO THIS   C
                                       ASSEMBLED ADDRESS
         ST    R6,RDBUFAD              STORE THIS ADDR IN READ COMMAND
         ST    R9,RDLNGTH              STORE LENGTH IN READ COMMAND
         OI    LDSWITCH,TWOREADS       INDICATE 2 READS ARE NECESSARY
LDTXT031 EQU   *
         BAL   R4,LDIOSUB              GO TO IO SUBROUTINE TO READ     C
                                       TXT DATA CARD INTO CORE AND     C
                                       READ NEXT TXTHDR CARD
         CLC   BUFFER+1(L3),=C'TXT'    IS THIS A TXTHDR CARD
         BNE   LDREP011                NO, GO SEE IF IT IS A REP
         B     LDTXT016                YES, DECODE AND HANDLE THIS TXT C
                                       CARD
         EJECT
***********************************************************************
*                         REP CARD HANDLING                           *
***********************************************************************
LDREP001 EQU   *
         LA    COUNT,6                 PUT NUMBER OF CHARACTERS TO BE  C
                                       CONVERTED INTO COUNT REG
         LA    FROMADDR,BUFFER+6       PUT STARTING ADDRESS OF THE     C
                                       CONVERT IN THE FROMADDR REG
         LA    TOADDR,B28WORK+1        PUT THE TO ADDRESS OF CONVERT   C
                                       IN TOADDR REG
         BAL   R4,LDCNV001             GO TO CONVERT ROUTINE AND OBTAINC
                                       WHERE REP SHOULD OCCUR
         L     REPPTR,B28WORK          PLACE ADDRESS OF WHERE REP      C
                                       SHOULD START IN REPPTR
         A     REPPTR,RELFT            ADD RELOCATION FACTOR TO THIS   C
                                       AND GET REAL CORE ADDRESS OF    C
                                       WHERE REP SHOULD START
         L     R4,SIZEAREA             GET MODULE SIZE
         A     R4,RLCOREAD             ADD RELATIVE BEGINNING
         BCTR  R4,0
         BCTR  R4,0                    BACK UP 2 BYTES IN CORE
         ST    R4,ENDMIN2              SAVE END ADDRESS
         CR    REPPTR,R4               CHECK FOR END OF MODULE
         BH    LDREP021                ERR, PASTEND OF MODULE
         C     REPPTR,RLCOREAD         CHECK FOR BEGINNING OF MODULE
         BL    LDREP021                NO, BEFORE MODULE
         LA    FROMADDR,BUFFER+16      PUT STARTING ADDRESS OF REP ON  C
                                       THE REP CARD INTO THE FROMADDR  C
                                       REG SO CONVERSION CAN BE DONE
         SPACE 1
LDREP006 EQU   *
         LA    COUNT,4                 PUT NUMBER OF CHARACTERS TO BE  C
                                       CONERTED INTO COUNT REG
         LA    TOADDR,B28WORK+2        PUT TO ADDRESS OF CONVERT INTO  C
                                       TOADDR REG
         BAL   R4,LDCNV001             GO TO CONVERT ROUTINE AND       C
                                       CONVERT TWO BYTES OF THE REP
         MVC   0(2,REPPTR),B28WORK+2   MOVE THIS TWO BYTES OF REP TO   C
                                       WHERE IT BELONGS IN CORE
         CLI   0(FROMADDR),C','        IS A COMMA THE NEXT CHARACTER   C
                                       ON THE REP CARD
         BE    LDREP016                YES, GO TO ROUTINE WHICH WILL   C
                                       SET UP TO CONVERT NEXT TWO BYTESC
                                       OF REP DATA
         CLI   0(FROMADDR),C' '        NO, IS THE REP FINISHED OR IS   C
                                       THERE A BLANK AS NEXT CHARACTER C
                                       ON THE REP CARD
         BNE   LDREP021                NO, GO TO REP CARD ERROR EXIT   C
                                       ROUTINE
         BAL   R4,LDIOSUB              GO TO IO SUBROUTINE AND READ    C
                                       NEXT RECORD
         SPACE 1
LDREP011 EQU   *
         CLC   BUFFER+1(L3),=C'REP'    IS THIS NEXT RECORD A REP CARD
         BE    LDREP001                YES, GO TO REP CARD HANDLING    C
                                       ROUTINE
         B     LDRLD041                GO TO RLD CARD HANDLING ROUTINE C
                                       AND SEE IF IT IS AN RLD RECORD
         SPACE 1
LDREP016 EQU   *
         LA    FROMADDR,1(FROMADDR)    INCREMENT FROMADDR BY ONE TO    C
                                       POINT TO NEXT TWO BYTES OF REP  C
                                       DATA
         LA    REPPTR,2(REPPTR)        INCREMENT REAL CORE ADDR OF REP C
                                       BY TWO TO POINT TO WHERE NEXT   C
                                       TWO BYTES OF REP DATA SHOULD GO
         C     REPPTR,ENDMIN2          IS NEW ADDRESS STILL IN MODULE
         BNH   LDREP006                YES,GO TO ROUTINE TO DECODE NEXTX
                                       TWO BYTES OF REP DATA
         SPACE 1
LDREP021 EQU   *
         LA    R14,MRT202               POINT TO MESSAGE ROUTINE
         LA    R15,16                  PUT 16 IN RETURN CODE REGISTER, C
                                       INDICATING REP CARD ERROR
         B     LDRETMSG                GO TO ERROR EXIT LINKAGE
         EJECT
***********************************************************************
**********  CONVERT SUBROUTINE USED FOR REP CARD HANDLING    **********
***********************************************************************
         SPACE 1
LDCNV001 EQU   *
         SR    CHAR,CHAR               CLEAR REGISTER WHICH WILL BE    C
                                       USED FOR SEARCH OF CHARACTER    C
                                       TABLE
         SPACE 1
LDCNV006 EQU   *
         NI    LDSWITCH,FIRST          ZERO FLAG WHICH TELLS WHICH BYTEC
                                       OF DATA BEING CONVERTED. ZERO   C
                                       IMPLIES 1ST BYTE, ONE - 2ND BYTE
         SR    REPBYTE,REPBYTE         CLEAR REGISTER WHICH WILL       C
                                       CONTAIN BYTE OF REP DATA BEING  C
                                       PROCESSED
         SPACE 1
LDCNV011 EQU   *
         IC    REPBYTE,0(FROMADDR)     PUT CHARACTER TO BE CONVERTED   C
                                       INTO REP DATA BYTE REG
         LA    INDEX,16                PUT 16 INTO INDEX REGISTER IN   C
                                       PREPARATION FOR SEARCH OF TABLE
         SPACE 1
LDCNV016 EQU   *
         IC    CHAR,CHARTBL-1(INDEX)   GET A CHARACTER FROM TABLE AND  C
                                       PUT IT IN REG USED FOR SEARCH
         CLR   CHAR,REPBYTE            DOES CHAR ON REP CARD EQUAL     C
                                       THIS CHAR FROM TABLE
         BE    LDCNV021                YES, GO TO ROUTINE WHICH HANDLESC
                                       A SUCCESSFUL MATCH
         BCT   INDEX,LDCNV016          TRY NEXT CHARACTER IN TABLE, IF C
                                       ANY LEFT
         B     LDREP021                IF NONE ARE LEFT, GO TO ROUTINE C
                                       WHICH WILL INDICATE REP CARD    C
                                       ERROR
         SPACE 1
LDCNV021 EQU   *
         LA    FROMADDR,1(FROMADDR)    ADVANCE FROM ADDR REG BY ONE TO C
                                       POINT TO NEXT CHARACTER TO BE   C
                                       CONVERTED
         BCTR  INDEX,0                 DECREMENT INDEX BY ONE AS THIS  C
                                       IS THE HEX EQUIVALENT OF EBCDIC C
                                       CHARACTER ON REP CARD
         SPACE 1
LDCNV026 EQU   *
         TM    LDSWITCH,SECOND         HAVE TWO BYTES OF REP DATA BEEN C
                                       CONVERTED
         BO    LDCNV031                YES, GO TO ROUTINE WHICH WILL   C
                                       PLACE REP DATA IN SPECIFIED AREA
         LR    R14,INDEX               SAVE FIRST CONVERSION RESULT IN C
                                       REG 14
         SR    REPBYTE,REPBYTE         CLEAR REGISTER USED TO CONTAIN  C
                                       BYTE OF REP DATA BEING PROCESSED
         OI    LDSWITCH,SECOND         SET FLAG WHICH INDICATES WHICH  C
                                       BYTE OF DATA IS BEING CONVERTED C
                                       TO 1, 1 IMPLIES THIS IS 2ND BYTE
         SLL   R14,4                   LEFT JUSTIFY FIRST CONVERTED    C
                                       BYTE IN REG 14
         BCT   COUNT,LDCNV011          GO CONVERT NEXT BYTE OF REP DATAC
                                       IF THERE IS ANY
         LA    COUNT,1                 SINCE THERE ARE NONE, SET COUNT C
                                       TO 1 SO PROCESSING WILL NOT LOOPC
                                       FOREVER BELOW
         SPACE 1
LDCNV031 EQU   *
         OR    R14,INDEX               COMBINE TWO CONVERSIONS TO BE   C
                                       ONE BYTE
         STC   R14,0(TOADDR)           PUT TWO CONVERTED BY INTO AREA  C
                                       SPECIFIED BY TO ADDR REG
         LA    TOADDR,1(TOADDR)        BUMP TO ADDR REG BY ONE TO POINTC
                                       TO NEXT BYTE IN TOADDR FIELD
         BCT   R7,LDCNV006             GO CONVERT NEXT CHARACTER, IF   C
                                       THERE IS ONE
         BR    R4                      NONE LEFT, RETURN TO CALLER
         SPACE 3
***********************************************************************
*                TABLE USED TO VALIDATE REP INFORMATION               *
***********************************************************************
CHARTBL  DC    C'0123456789ABCDEF'
         EJECT
***********************************************************************
*                         RLD CARD HANDLING                           *
***********************************************************************
         SPACE 1
LDRLD001 EQU   *
         SR    RLDBTCNT,RLDBTCNT       CLEAR RLD BYTE COUNT REG
         IC    RLDBTCNT,BUFFER+11      GET RLD DATA BYTE COUNT
         SRL   RLDBTCNT,TWICE          DIVIDE COUNT BY FOUR AND GET    C
                                       NUMBER OF POSSIBLE 4 BYTE RLD   C
                                       DATA ITEMS
         LA    DATAPTR,BUFFER+16       GET ADDRESS OF FIRST BYTE OF    C
                                       RLD DATA
         BCT   RLDBTCNT,LDRLD016       SINCE THIS IS FIRST DATA FIELD, C
                                       DECREMENT NO. OF 4 BYTE RLD DATAC
                                       ITEMS BY 1, GO DECODE RLD DATA
         SPACE 1
LDRLD006 EQU   *
         TM    D0(DATAPTR),SAMEPTR     DOES RLD HAVE SAME R OR P PTR
         BO    LDRLD016                BRANCH IF YES
         SPACE 1
LDRLD011 EQU   *
         LA    DATAPTR,D4(DATAPTR)     BUMP RLD DATA POINTER BY 4 TO   C
                                       AVOID THE ESD ID INDICATORS AND C
                                       TO POINT TO DATA FIELD
         BCTR  RLDBTCNT,0              DECREMENT NUMBER OF 4 BYTE RLD  C
                                       DATA ITEMS BY ONE
         SPACE 1
LDRLD016 EQU   *
         LA    DATAPTR,D4(DATAPTR)     BUMP RLD DATA POINTER BY 4
         MVC   B28WORK+1(L3),D1(DATAPTR) GET ADDRESS THAT MUST BE      C
                                       UPDATED
         L     R6,B28WORK              PLACE THIS ADDRESS IN REG 6
         A     R6,RELFT                ADD RELOCATION FACTOR
         SPACE 1
LDRLD021 EQU   *
         TM    D0(DATAPTR),HIHALF      IS THIS AN ADCON OR CCW
         BNZ   LDRLD036                NO, BRANCH TO DECODE NEXT RLD   C
                                       DATA ITEM IF NECESSARY
         XC    WORK(4),WORK            CLEAR WORK AREA
         IC    R7,D0(DATAPTR)          GET LENGTH OF DATA ITEM
         N     R7,FULL15               STRIP INDICATORS FROM LENGTH
         SRL   R7,TWICE                ADJUST LENGTH
         EX    R7,MVC01                MOVE DATA REQUIRING UPDATE TO   C
                                       WORK AREA
         L     R5,WORK                 PUT DATA REQUIRING UPDATE IN    C
                                       REG 5
         LA    R1,3                    PLACE MAX SIZE ADDRESS THAT     C
                                       COULD BE UPDATED, THREE IMPLIES C
                                       A FOUR BYTE ADDRESS
         SR    R1,R7                   SUBTRACT LNGTH OF ITEM FROM MAX C
                                       LNGTH, REMAINDER IS NO. OF BYTESC
                                       NOT USED, I.E. 1 EQ. 3 BYTE ADDR
         SLL   R1,3                    TAKE REMAINDER AND CONVERT IT TOC
                                       THE BIT SHIFT REQUIRED TO RIGHT C
                                       JUSTIFY ADDR BEING WORKED ON
         SRL   R5,D0(R1)               RIGHT JUSTIFY THE ADDRESS IN    C
                                       REG 5
         TM    D0(DATAPTR),RLDFLG      TEST RLD FLAG BIT- POS OR NEG
         BO    LDRLD026                BRANCH IF NEGATIVE
         A     R5,RELFT                ADD RELOCATION FACTOR
         B     LDRLD031                GO TO ROUTINE THAT STORES       C
                                       UPDATED ADDRESS IN THE PROGRAM
         SPACE 1
LDRLD026 EQU   *
         S     R5,RELFT                SUBTRACT RELOCATION FACTOR
         SPACE 1
LDRLD031 EQU   *
         SLL   R5,D0(R1)               LEFT JUSTIFY UPDATED ADDRESS
         ST    R5,WORK                 STORE UPDATED ADDRESS IN WORK   C
                                       AREA
         EX    R7,MVC02                MOVE UPDATED ADDRESS IN WORK    C
                                       AREA TO ITS HOME IN PROGRAM
         SPACE 1
LDRLD036 EQU   *
         BCT   RLDBTCNT,LDRLD006       DECREMENT NUMBER OF 4 BYTE RLD  C
                                       DATA ITEMS BY ONE, IF THERE ARE C
                                       ANY LEFT, GO DECODE THEM
         SPACE 1
         BAL   R4,LDIOSUB              GO TO IO SUBROUTINE AND GET     C
                                       NEXT CARD
         SPACE 1
LDRLD041 EQU   *
         CLC   BUFFER+1(L3),=C'RLD'    IS THIS CARD AN RLD CARD
         BE    LDRLD001                YES, GO TO RLD CARD HANDLER
         CLC   BUFFER+1(L3),=C'END'    IS THIS CARD AN END CARD
         BE    LDRLD051                YES, END LOADER, GO TO FINISH   C
                                       ROUTINE
         SPACE 1
LDRLD046 EQU   *
         LA    R14,MRT911               POINT TO MESSAGE ROUTINE
         LA    R1,NAME(PLISTREG)        POINT TO MODULE NAME
         LA    R15,24                  PUT 24 IN RETURN CODE REGISTER, C
                                       INDICATING ORDER ERROR OR       C
                                       GARBAGE
         B     LDRETMSG                GO TO ERROR EXIT LINKAGE
         SPACE 1
LDRLD051 EQU   *
         L     R1,RLCOREAD             PLACE ADDRESS OF WHERE MODULE   C
                                       WAS LOADED IN REGISTER ONE
         L     R0,SIZEAREA             GET SIZE OF THE MODULE
         B     LDRET00                 GO TO SUCCESSFUL EXIT LINKAGE
MVC01    MVC   WORK(0),D0(R6)          MOVE ADDRESS TO WORK AREA
MVC02    MVC   D0(0,R6),WORK           MOVE UPDATED ADDRESS TO ITS     C
                                       PLACE IN PROGRAM
         EJECT
***********************************************************************
*                           IO SUBROUTINE                             *
***********************************************************************
LDIOSUB  EQU   *
         LA    DCBPTR,OLTDCB           GET POINTER TO DCB FOR OLT      C
                                       LIBRARY IN DCB REG
         TM    48(DCBPTR),OFLGS        IS OLT LIB OPEN
         BO    LDIO0010                YES, BYPASS DOING OPEN
         OPEN  ((DCBPTR),(INPUT))      ATTEMPT TO OPEN OLT DCB
         TM    48(DCBPTR),OFLGS        DID OLT LIB OPEN
         BO    LDIO0010                YES, CONTINUE
         LA    R1,=C'OLTCDSDD'         POINT TO DD CARD NAME
LDIO0005 EQU   *
         LA    R14,MRT901              POINT TO MESSAGE ROUTINE
         LA    R15,12                  SET MODULE NOT FOUND RC
         NI    LDSWITCH,ALL-CPTSW      TURN OFF COMPUTE SWITCH
         B     LDRETMSG                GO TO ERROR EXIT LINKAGE
         SPACE 1
LDIO0010 EQU   *
         USING DEBBASIC,DEBREG     SET UP ADDRESSABILITY
         L     DEBREG,D44(DCBPTR)  GET ASSOCIATED DEB ADDRESS
         LA    DEBREG,D0(DEBREG)   CLEAR HIGH ORDER BYTE
         TM    DEBFLGS1,DEBAPFIN   IS LIBRARY AUTHORIZED
         BO    LDIO0015            YES,CONTINUE LOAD REQ
LDIO0013 CLOSE ((DCBPTR))          CLOSE OUT THE DATA SET
         LA    RC,34               SET THE NOT AUTH RC        @ZA31031
         B     MRT899              LEAVE MODULE
LDIO0015 EQU   *
         TM    FLAG(PLISTREG),SYMBOLIC IS THIS A SYMBOLIC CDS REQUEST
         BNO   LDIO0020                NO, PERFORM REQUESTED LOAD
         LA    DCBPTR,SYMDCB           GET POINTER TO DCB FOR SYMBOLIC C
                                       CDS IN DCB REG
         TM    48(DCBPTR),OFLGS        SEE IF ALREADY OPENED.
         BO    LDIO0020                IF ON ITS OPEN ALREADY
         OPEN  ((DCBPTR),(INPUT))      ATTEMPT TO OPEN OLT DCB
         LA    R1,=C'SYMSYM  '         POINT TO DD CARD NAME
         TM    48(DCBPTR),OFLGS        IS SYMBOLIC DCB OPEN
         BNO   LDIO0005                NO, INDICATE SYMSYM DD CARD     C
                                       FAILED TO OPEN
         L     DEBREG,D44(DCBPTR)  GET ASSOCIATED DEB ADDRESS
         LA    DEBREG,D0(DEBREG)   CLEAR HIGH ORDER BYTE
         TM    DEBFLGS1,DEBAPFIN   IS LIBRARY AUTHORIZED
         BNO   LDIO0013            NO, PRINT EIROR MESSAGE
         DROP  DEBREG
         SPACE 1
LDIO0020 EQU   *
         TM    FLAG(PLISTREG),CMPTE    IS CALLER ASKING FOR A COMPUTE
         BNO   LDIO0040                NO, READ NEXT RECORD OF MODULE
         TM    LDSWITCH,CMPTSTRT       HAS COMPUTE BEEN STARTED
         BO    LDIO0040                YES, GO TO ROUTINE TO READ NEXT C
                                       RECORD
         LA    NAMEPTR,NAME(PLISTREG)  GET POINTER TO REQUESTED DATA   C
                                       SET MEMBER NAME
         FIND  (DCBPTR),(NAMEPTR),D    ISSUE FIND FOR REQUESTED MEMBER
         OI    LDSWITCH,CMPTSTRT       INDICATE COMPUTE HAS STARTED
         LTR   R15,R15                 WAS FIND SUCCESSFUL
         BZ    LDIO0050                SUCCESSFUL FIND, GO READ FIRST  C
                                       CARD IN MODULE
         SPACE 1
LDIO0030 EQU   *
         SR    R0,R0                   CLEAR REGISTER ZERO INDICATING  C
                                       MODULE NOT FOUND
         LA    R15,12                  PUT 0C IN REG 15 TO INDICATE    C
                                       MODULE NOT FOUND
         B     LDRESET                 RETURN TO CALLER
         SPACE 1
LDIO0040 EQU   *
         LA    TTRZPTR,TTRZ            GET POINTER TO TTRZ FOR POINT
         POINT (DCBPTR),(TTRZPTR)      POINT TO RECORD THAT MUST BE    C
                                       READ
         SPACE 1
LDIO0050 EQU   *
         TM    LDSWITCH,TWOREADS       IS THIS REQUEST FOR TWO READS
         BNO   LDIO0060                NO, SET UP TO PERFORM ONE READ
         L     AREAPTR,RDBUFAD         GET POINTER TO BUFFER AREA IN   C
                                       AREA POINTER REG
         L     LNGTHREG,RDLNGTH        GET LENGTH OF READ IN LENGTH REG
         B     LDIO0070                GO TO READ ROUTINE
         SPACE 1
LDIO0060 EQU   *
         LA    AREAPTR,BUFFER          GET POINTER TO MY BUFFER AREA   C
                                       IN  AREA POINTER REG
         LA    LNGTHREG,80             PUT LENGTH OF 80 IN LENGTH REG
         SPACE 1
LDIO0070 EQU   *
         READ  DECB,SF,(DCBPTR),(AREAPTR),(LNGTHREG) READ A RECORD
         CHECK DECB                    WAIT UNTIL READ COMPLETES
         TM    LDSWITCH,IOERROR        WAS THERE AN I/O ERROR
         BNO   LDIO0075                NO, CONTINUE NORMALLY
         LA    R14,MRT205              POINT TO MESSAGE ROUTINE
         NI    LDSWITCH,ALL-IOERROR    CLEAR I/O ERROR FLAG
         LA    R15,8                   PLACE 08 RETURN CODE IN REG 15
         B     LDRETMSG                RETURN TO CALLER INDICATING     C
                                       READ ERROR
         SPACE 1
LDIO0075 EQU   *
         NOTE  (DCBPTR)                FIND OUT WHERE THIS READ WAS
         ST    R1,TTRZ                 SAVE IT TO PERFORM NEXT READ
         MVI   TTRZ+3,X'01'            UPDATE TTRZ SO NEXT RECORD MAY  C
                                       BE READ
         TM    LDSWITCH,TWOREADS       IS THIS A REQUEST TO DO TWO     C
                                       READS
         BNO   LDIO0080                GO TO ROUTINE WHICH RETURNS TO  C
                                       CALLER
         NI    LDSWITCH,ALL-TWOREADS   CLEAR TWO READ REQUEST FLAG SO  C
                                       NEXT READ WILL BE LAST
         B     LDIO0040                GO TO ROUTINE WHICH WILL POINT  C
                                       TO NEXT RECORD AND READ IT
         SPACE 1
LDIO0080 EQU   *
         BR    R4                      RETURN TO CALLER
         EJECT
***********************************************************************
*                    RETURN TO CALLER EXIT ROUTINE                    *
***********************************************************************
CMPTDONE EQU   *
         L     R1,ASSEMAD              GET THE DELTA INTO CORE FOR MOD.
         A     R1,RLCOREAD             ADD BEGINNING OF AREA
         LR    R0,R7                   PLACE SIZE OF MODULE IN REGISTERC
                                       ZERO
         B     LDRET00                 INDICATE TO CALLER SUCCESSFUL   C
                                       COMPUTE
         SPACE 1
LDEXT006 EQU   *
         A     R7,ONE                  ADD ONE TO SIZE OF MODULE
         ST    R7,SIZEAREA             PLACE SIZE OF MODULE IN SIZE    C
                                       AREA
         NI    SIZEAREA+3,ALL-TMFLG    INDICATE TO TRANS. MGR. THAT    C
                                       THIS IS A NEW OLT BY SETTING    C
                                       LAST BIT IN MOD. SIZE FLD TO 0
         L     R0,SIZEAREA             PLACE SIZE OF MODULE IN REGISTERC
                                       ZERO
         SPACE 1
LDRET00  EQU   *
         SR    R15,R15                 INDICATE TO CALLER SUCCESSFUL   C
                                       LOAD
         SPACE 1
LDRETERR EQU   *
         TM    FLAG(PLISTREG),CMPTE    IS THIS A COMPUTE REQUEST
         BO    LDEXTRET                YES, EVERYTHING OK
LDRESET  EQU   *
         NI    LDSWITCH,ALL-CPTSW      CLEAR INTERNAL COMPUTE FLAG
         SPACE 1
LDEXTRET EQU   *
         ST    R15,RETCODE             SAVE RET CODE FOR DEBUGGING
         B     C13C0091                EXIT LOADER MODULE
         EJECT
***********************************************************************
*                           EODAD ROUTINE                             *
***********************************************************************
ENDATA   EQU   *
         CLOSE ((DCBPTR))              CLOSE OLT LIB DCB
         LA    R14,MRT203               POINT TO MESSAGE ROUTINE
         LA    R15,24                  PLACE 24 RETURN CODE IN REG 15
         B     LDRETMSG                RETURN TO CALLER INDICATING     C
                                       ORDER ERROR OR GARBAGE
***********************************************************************
*                           SYNAD ROUTINE                             *
***********************************************************************
ERROR    EQU   *
         OI    LDSWITCH,IOERROR        INDICATE TO SELF THAT AN I/O    C
                                       ERROR HAS OCCURRED
         CLOSE ((DCBPTR))              CLOSE OLT LIB DCB
         BR    R14                     RETURN TO CALLER
         EJECT
***********************************************************************
*                              DECLARES                               *
***********************************************************************
SAVEAREA DC    18F'0'                  SAVE AREA
BUFFER   DC    20F'0'                  READ BUFFER
RLCOREAD DC    F'0'                    REAL CORE ADDRESS OF MODULE
ASSEMAD  DC    F'0'                    ASSEMBLED ADDRESS OF MODULE
B28WORK  DC    F'0'                    FULLWORD WORK AREA
WORK     DC    F'0'                    FULLWORD WORK AREA
RELFT    DC    F'0'                    RELOCATION FACTOR
RDBUFAD  DC    F'0'                    BUFFER ADDRESS
RDLNGTH  DC    F'0'                    LENGTH OF READ
RETCODE  DC    F'0'                    RETURN CODE AREA
FULL15   DC    F'15'                   FULLWORD CONSTANT EQUAL 15
ONE      DC    F'1'                    FULLWORD CONSTANT EQUAL 1
ONE1     EQU   ONE+2                   HALFWORD CONSTANT EQUAL 1
TTRZ     DC    F'0'                    TTRZ FOR READ ROUTINE
SIZEAREA DC    F'0'                    SIZE WORK AREA
ENDMIN2  DC    F'0'                    END OF MODULE
LDSWITCH DC    X'00'                   INTERNAL FLAGS
***********************************************************************
*                          SYMBOLIC CDS DCB                           *
***********************************************************************
SYMDCB   DCB   BLKSIZE=3600,LRECL=80,DDNAME=SYMSYM,DSORG=PO,           C
               MACRF=R,RECFM=UT,EODAD=ENDATA,SYNAD=ERROR
***********************************************************************
*                           OLT LIB DCB                               *
***********************************************************************
OLTDCB   DCB   BLKSIZE=3600,LRECL=80,DDNAME=OLTCDSDD,DSORG=PO,         C
               MACRF=R,RECFM=UT,EODAD=ENDATA,SYNAD=ERROR
***********************************************************************
*                        DEB AREA DSECT                               *
***********************************************************************
         IEZDEB
ISTCC013 CSECT
         LTORG
*LDRETMSG:                                                         0032
*   RC=RCGEN;                       /* SAVE RETURNCODE PASSED        */
LDRETMSG LR    RC,RCGEN                                            0032
*   GO TO EXITPTR;                  /* GO TO ROUTINE POINTED TO      */
         BR    EXITPTR                                             0033
*MRT202:                                                           0034
*                                                                  0034
*   /*****************************************************************/
*   /*                                                               */
*   /* TCEC MSGN(202) INVOKED                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0034
*   $TCECM='1'B;                    /* SET TCEC SW IN RCA            */
MRT202   OI    $TCECM(WAPTR),B'00000001'                           0034
*   R1=ADDR($TCA04);                /* SET UP PARM LIST $TR          */
         LA    R1,$TCA04                                           0035
*   CALL #EXIT;                     /* CALL CECOM                    */
         L     @15,#EXITA(,WAPTR)                                  0036
         BALR  @14,@15                                             0036
*   DCL                                                            0037
*     1 $TCA04,                     /* TCEC PARM LIST                */
*      2 $TCB04 FIXED(32) INIT(202),/* MSG NUMBER                    */
*      2 $TCC04 FIXED(32) INIT(0),  /* INCT LEN                      */
*      2 $TCD04 BIT(8) INIT('00000000'B),/* FLAG                     */
*      2 $TCE04 CHAR(4) INIT('FFFFFFFF'X);/* MSSAGE MASK             */
*   GO TO C13C0090;                 /* EXIT THE LOADER               */
         B     C13C0090                                            0038
*MRT203:                                                           0039
*                                                                  0039
*   /*****************************************************************/
*   /*                                                               */
*   /* TCEC MSGN(203) INVOKED                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0039
*   $TCECM='1'B;                    /* SET TCEC SW IN RCA            */
MRT203   OI    $TCECM(WAPTR),B'00000001'                           0039
*   R1=ADDR($TCA05);                /* SET UP PARM LIST $TR          */
         LA    R1,$TCA05                                           0040
*   CALL #EXIT;                     /* CALL CECOM                    */
         L     @15,#EXITA(,WAPTR)                                  0041
         BALR  @14,@15                                             0041
*   DCL                                                            0042
*     1 $TCA05,                     /* TCEC PARM LIST                */
*      2 $TCB05 FIXED(32) INIT(203),/* MSG NUMBER                    */
*      2 $TCC05 FIXED(32) INIT(0),  /* INCT LEN                      */
*      2 $TCD05 BIT(8) INIT('00000000'B),/* FLAG                     */
*      2 $TCE05 CHAR(4) INIT('FFFFFFFF'X);/* MSSAGE MASK             */
*   GO TO C13C0090;                 /* EXIT THE LOADER               */
         B     C13C0090                                            0043
*MRT205:                                                           0044
*                                                                  0044
*   /*****************************************************************/
*   /*                                                               */
*   /* TCEC MSGN(205) INVOKED                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0044
*   $TCECM='1'B;                    /* SET TCEC SW IN RCA            */
MRT205   OI    $TCECM(WAPTR),B'00000001'                           0044
*   R1=ADDR($TCA06);                /* SET UP PARM LIST $TR          */
         LA    R1,$TCA06                                           0045
*   CALL #EXIT;                     /* CALL CECOM                    */
         L     @15,#EXITA(,WAPTR)                                  0046
         BALR  @14,@15                                             0046
*   DCL                                                            0047
*     1 $TCA06,                     /* TCEC PARM LIST                */
*      2 $TCB06 FIXED(32) INIT(205),/* MSG NUMBER                    */
*      2 $TCC06 FIXED(32) INIT(0),  /* INCT LEN                      */
*      2 $TCD06 BIT(8) INIT('00000000'B),/* FLAG                     */
*      2 $TCE06 CHAR(4) INIT('FFFFFFFF'X);/* MSSAGE MASK             */
*   GO TO C13C0090;                 /* EXIT THE LOADER               */
         B     C13C0090                                            0048
*MRT899:                                                           0049
*                                                                  0049
*   /*****************************************************************/
*   /*                                                               */
*   /* TCEC MSGN(899) INVOKED                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0049
*   $TCECM='1'B;                    /* SET TCEC SW IN RCA            */
MRT899   OI    $TCECM(WAPTR),B'00000001'                           0049
*   R1=ADDR($TCA07);                /* SET UP PARM LIST $TR          */
         LA    R1,$TCA07                                           0050
*   CALL #EXIT;                     /* CALL CECOM                    */
         L     @15,#EXITA(,WAPTR)                                  0051
         BALR  @14,@15                                             0051
*   DCL                                                            0052
*     1 $TCA07,                     /* TCEC PARM LIST                */
*      2 $TCB07 FIXED(32) INIT(899),/* MSG NUMBER                    */
*      2 $TCC07 FIXED(32) INIT(0),  /* INCT LEN                      */
*      2 $TCD07 BIT(8) INIT('00000000'B),/* FLAG                     */
*      2 $TCE07 CHAR(4) INIT('FFFFFFFF'X);/* MSSAGE MASK             */
*   GO TO C13C0090;                 /* RETURN TO CALLER WITH A BAD 0053
*                                      RETURN CODE                   */
         B     C13C0090                                            0053
*MRT901:                                                           0054
*   $INBUFR(1:8)=SUBCHAR;           /* PUT SUB CHAR. IN BUFFER       */
*                                                                  0054
MRT901   MVC   $INBUFR(8,WAPTR),SUBCHAR(R1)                        0054
*   /*****************************************************************/
*   /*                                                               */
*   /* TCEC MSGN(901)SUB(YES) INVOKED                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0055
*   $TCECM='1'B;                    /* SET TCEC SW IN RCA            */
         OI    $TCECM(WAPTR),B'00000001'                           0055
*   R1=ADDR($TCA08);                /* SET UP PARM LIST $TR          */
         LA    R1,$TCA08                                           0056
*   CALL #EXIT;                     /* CALL CECOM                    */
         L     @15,#EXITA(,WAPTR)                                  0057
         BALR  @14,@15                                             0057
*   DCL                                                            0058
*     1 $TCA08,                     /* TCEC PARM LIST                */
*      2 $TCB08 FIXED(32) INIT(901),/* MSG NUMBER                    */
*      2 $TCC08 FIXED(32) INIT(0),  /* INCT LEN                      */
*      2 $TCD08 BIT(8) INIT('10000000'B),/* FLAG                     */
*      2 $TCE08 CHAR(4) INIT('FFFFFFFF'X);/* MSSAGE MASK             */
*   GO TO C13C0090;                 /* EXIT THE LOADER               */
         B     C13C0090                                            0059
*MRT911:                                                           0060
*   $INBUFR(1:8)=SUBCHAR;           /* PUT SUB CHAR. IN BUFFER       */
*                                                                  0060
MRT911   MVC   $INBUFR(8,WAPTR),SUBCHAR(R1)                        0060
*   /*****************************************************************/
*   /*                                                               */
*   /* TCEC MSGN(911)SUB(YES) INVOKED                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0061
*   $TCECM='1'B;                    /* SET TCEC SW IN RCA            */
         OI    $TCECM(WAPTR),B'00000001'                           0061
*   R1=ADDR($TCA09);                /* SET UP PARM LIST $TR          */
         LA    R1,$TCA09                                           0062
*   CALL #EXIT;                     /* CALL CECOM                    */
         L     @15,#EXITA(,WAPTR)                                  0063
         BALR  @14,@15                                             0063
*   DCL                                                            0064
*     1 $TCA09,                     /* TCEC PARM LIST                */
*      2 $TCB09 FIXED(32) INIT(911),/* MSG NUMBER                    */
*      2 $TCC09 FIXED(32) INIT(0),  /* INCT LEN                      */
*      2 $TCD09 BIT(8) INIT('10000000'B),/* FLAG                     */
*      2 $TCE09 CHAR(4) INIT('FFFFFFFF'X);/* MSSAGE MASK             */
*C13C0090:                                                         0065
*   RCGEN=RC;                       /* RESTORE RETURN TO BE GIVEN    */
C13C0090 LR    RCGEN,RC                                            0065
*   GEN( NI LDSWITCH,ALL-CPTSW );   /* RESET THE COMPUTE REQUEST     */
          NI LDSWITCH,ALL-CPTSW
*C13C0091:                                                         0067
*   SAVPTR=SVECC013(2);             /* RESTORE SAVEAREA PTR          */
C13C0091 L     SAVPTR,SVECC013+4(,WAPTR)                           0067
*   RETURN;                                                        0068
@EL00001 DS    0H                                                  0068
@EF00001 DS    0H                                                  0068
@ER00001 L     @14,12(,@13)                                        0068
         LM    @02,@12,28(@13)                                     0068
         BR    @14                                                 0068
*   END ISTCC013;                   /* END OF THE OS/VS LOADER       */
@DATA    DS    0H
         DS    0F
         DS    0F
         DS    0D
$TCA04   DS    CL13
         ORG   $TCA04
$TCB04   DC    A(202)
$TCC04   DC    A(0)
$TCD04   DC    B'00000000'
$TCE04   DC    X'FFFFFFFF'
         ORG   $TCA04+13
         DS    CL3
$TCA05   DS    CL13
         ORG   $TCA05
$TCB05   DC    A(203)
$TCC05   DC    A(0)
$TCD05   DC    B'00000000'
$TCE05   DC    X'FFFFFFFF'
         ORG   $TCA05+13
         DS    CL3
$TCA06   DS    CL13
         ORG   $TCA06
$TCB06   DC    A(205)
$TCC06   DC    A(0)
$TCD06   DC    B'00000000'
$TCE06   DC    X'FFFFFFFF'
         ORG   $TCA06+13
         DS    CL3
$TCA07   DS    CL13
         ORG   $TCA07
$TCB07   DC    A(899)
$TCC07   DC    A(0)
$TCD07   DC    B'00000000'
$TCE07   DC    X'FFFFFFFF'
         ORG   $TCA07+13
         DS    CL3
$TCA08   DS    CL13
         ORG   $TCA08
$TCB08   DC    A(901)
$TCC08   DC    A(0)
$TCD08   DC    B'10000000'
$TCE08   DC    X'FFFFFFFF'
         ORG   $TCA08+13
         DS    CL3
$TCA09   DS    CL13
         ORG   $TCA09
$TCB09   DC    A(911)
$TCC09   DC    A(0)
$TCD09   DC    B'10000000'
$TCE09   DC    X'FFFFFFFF'
         ORG   $TCA09+13
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
WAPTR    EQU   @02
R1       EQU   @01
EXITPTR  EQU   @14
SAVPTR   EQU   @13
RCGEN    EQU   @15
RC       EQU   @10
TOLTEPWA EQU   0
$CDA     EQU   TOLTEPWA+100
$RCA     EQU   $CDA+44
$OLTPTR  EQU   $CDA+52
$HIMOREC EQU   $CDA+60
$COMMFLG EQU   TOLTEPWA+224
$FLAG8   EQU   $COMMFLG+7
$TCECM   EQU   $FLAG8
$INBUFR  EQU   TOLTEPWA+2104
#EXITA   EQU   TOLTEPWA+2632
$CCOMDAT EQU   TOLTEPWA+2644
$CFLGS   EQU   $CCOMDAT+16
$24FEMSG EQU   TOLTEPWA+2681
$24CATMG EQU   $24FEMSG+11
@NM00022 EQU   TOLTEPWA+2776
$OUNTPTR EQU   @NM00022+4
$NSPTR   EQU   $OUNTPTR
$NSCNT   EQU   @NM00022+10
$ENXX    EQU   @NM00022+15
$IMITX   EQU   $ENXX
SVESC033 EQU   TOLTEPWA+3160
SVECC013 EQU   TOLTEPWA+3232
SVEIC003 EQU   TOLTEPWA+3592
SVESC022 EQU   TOLTEPWA+3736
SVECC011 EQU   TOLTEPWA+4024
#EXIT    EQU   0
SUBCHAR  EQU   0
BACKSAVE EQU   0
SVECC012 EQU   SVESC022
SVEIC00A EQU   SVEIC003
SVEIC004 EQU   SVEIC003
SVEIC005 EQU   SVEIC003
SVESC02A EQU   SVESC022
SVESC02B EQU   SVESC022
SVESC02D EQU   SVESC022
SVESC02E EQU   SVESC022
SVESC02F EQU   SVECC013
SVESC024 EQU   SVESC022
SVESC027 EQU   SVESC022
SVESC029 EQU   SVESC033
SVESC031 EQU   SVECC013
SVESC032 EQU   SVECC011
SVETC037 EQU   SVEIC003
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
SVECC010 EQU   TOLTEPWA+3952
SVETC035 EQU   TOLTEPWA+3880
SVESC030 EQU   TOLTEPWA+3808
SVESC020 EQU   TOLTEPWA+3664
SVEIC002 EQU   TOLTEPWA+3520
SVECC014 EQU   TOLTEPWA+3376
SVESC120 EQU   TOLTEPWA+3304
SVESC025 EQU   TOLTEPWA+3088
@NM00024 EQU   TOLTEPWA+2980
$RPLERR  EQU   TOLTEPWA+2977
@NM00023 EQU   TOLTEPWA+2976
$R13PR3  EQU   TOLTEPWA+2972
$CEINT2  EQU   TOLTEPWA+2968
$CEINT1  EQU   TOLTEPWA+2964
$MSGGET  EQU   TOLTEPWA+2960
$ACQLIST EQU   TOLTEPWA+2956
$R4SAVE1 EQU   TOLTEPWA+2952
$CLSISS  EQU   TOLTEPWA+2950
$CLSCNT  EQU   TOLTEPWA+2948
$CUTABLE EQU   TOLTEPWA+2868
$BUFSZ2  EQU   TOLTEPWA+2864
$RESID2  EQU   TOLTEPWA+2860
$OLTCCW2 EQU   TOLTEPWA+2856
$ENDBFR2 EQU   TOLTEPWA+2852
$1STBFR2 EQU   TOLTEPWA+2848
$TECB2   EQU   TOLTEPWA+2844
$BUFSZ1  EQU   TOLTEPWA+2840
$RESID1  EQU   TOLTEPWA+2836
$OLTCCW1 EQU   TOLTEPWA+2832
$ENDBFR1 EQU   TOLTEPWA+2828
$1STBFR1 EQU   TOLTEPWA+2824
$TECB1   EQU   TOLTEPWA+2820
$WAITIME EQU   TOLTEPWA+2816
$TRTN#   EQU   TOLTEPWA+2815
$WIODEV  EQU   TOLTEPWA+2814
$RQSTSZE EQU   TOLTEPWA+2812
$RQSTPTR EQU   TOLTEPWA+2808
$R4SAVE  EQU   TOLTEPWA+2804
$PARTADR EQU   TOLTEPWA+2800
$TBSDATA EQU   TOLTEPWA+2796
$CTWIDTH EQU   TOLTEPWA+2795
$CTLINE  EQU   TOLTEPWA+2794
$APWIDTH EQU   TOLTEPWA+2793
$APLINE  EQU   TOLTEPWA+2792
$INDEX   EQU   $IMITX
$UMXX    EQU   @NM00022+14
$NSXX    EQU   @NM00022+12
$ATACNT  EQU   $NSCNT
$CTR     EQU   @NM00022+8
$ATAPTR  EQU   $NSPTR
$DDRPTR  EQU   @NM00022
$DTORESP EQU   TOLTEPWA+2712
$APNAME  EQU   TOLTEPWA+2704
$24SYMNE EQU   $24CATMG+4
$24DEVAD EQU   $24CATMG
$24RTN#  EQU   $24FEMSG+8
$ESECTID EQU   $24FEMSG
$24FLGS  EQU   TOLTEPWA+2680
$24SAVE2 EQU   TOLTEPWA+2676
$24SAVE1 EQU   TOLTEPWA+2672
$24UNADR EQU   TOLTEPWA+2668
$24SAV13 EQU   TOLTEPWA+2664
$24RETCD EQU   TOLTEPWA+2663
$MACID   EQU   TOLTEPWA+2661
$CSPARE  EQU   $CFLGS
$C2WAY   EQU   $CFLGS
$CINCT   EQU   $CCOMDAT+12
$CINADR  EQU   $CCOMDAT+8
$COUTCT  EQU   $CCOMDAT+4
$COUTAD  EQU   $CCOMDAT
ROOTLOC  EQU   TOLTEPWA+2640
$RETREG  EQU   TOLTEPWA+2636
$WORK    EQU   TOLTEPWA+2376
$EXTA    EQU   TOLTEPWA+2320
$PASSONA EQU   TOLTEPWA+2264
$TRMINPT EQU   TOLTEPWA+2184
$BUFFER  EQU   TOLTEPWA+1976
$TLTRPL3 EQU   TOLTEPWA+1856
$TLTRPL2 EQU   TOLTEPWA+1736
$TLTRPL1 EQU   TOLTEPWA+1616
$SLTBL   EQU   TOLTEPWA+1468
@NM00021 EQU   TOLTEPWA+1464
$DEVTBLE EQU   TOLTEPWA+240
@NM00020 EQU   $COMMFLG+15
@NM00019 EQU   $COMMFLG+14
@NM00018 EQU   $COMMFLG+13
@NM00017 EQU   $COMMFLG+12
@NM00016 EQU   $COMMFLG+11
@NM00015 EQU   $COMMFLG+10
@NM00014 EQU   $COMMFLG+9
@NM00013 EQU   $COMMFLG+8
$VS2     EQU   $FLAG8
$VS1     EQU   $FLAG8
$EDOS    EQU   $FLAG8
@NM00012 EQU   $FLAG8
$TWOWAY  EQU   $FLAG8
@NM00011 EQU   $FLAG8
@NM00010 EQU   $COMMFLG+6
@NM00009 EQU   $COMMFLG+5
@NM00008 EQU   $COMMFLG+4
@NM00007 EQU   $COMMFLG+3
@NM00006 EQU   $COMMFLG+2
@NM00005 EQU   $COMMFLG+1
@NM00004 EQU   $COMMFLG
@NM00003 EQU   $CDA+120
$CUCNT   EQU   $CDA+118
@NM00002 EQU   $CDA+117
$PRTFORM EQU   $CDA+116
$OPISCNT EQU   $CDA+114
$OPNDCNT EQU   $CDA+112
$GETMSZE EQU   $CDA+110
$GRCNTS  EQU   $CDA+108
$CTLCNT  EQU   $CDA+106
$ACTLVL  EQU   $CDA+105
$PRNTLVL EQU   $CDA+104
$ERRCNTA EQU   $CDA+102
$TLCNT   EQU   $CDA+100
$TIMEALW EQU   $CDA+96
$PTRAREA EQU   $CDA+92
$GETMPTR EQU   $CDA+88
$R13PTRT EQU   $CDA+84
$R13PTR  EQU   $CDA+80
$TEPEND  EQU   $CDA+76
$PLINKDL EQU   $CDA+72
$TEPBEGN EQU   $CDA+68
$FRELPTR EQU   $CDA+64
$HIGHADR EQU   $HIMOREC
$LOMOREC EQU   $CDA+56
$LOWADDR EQU   $OLTPTR
$ENDCOMM EQU   $CDA+48
$COMMON  EQU   $RCA
$SLASHAD EQU   $CDA+32
$PASSON  EQU   $CDA+28
$TOLBRTB EQU   $CDA+24
$SCTPTR8 EQU   $CDA+20
$SCTPTR  EQU   $CDA+16
$TBWDPTR EQU   $CDA+12
$TFWDPTR EQU   $CDA+8
@NM00001 EQU   $CDA
$SCTTBLE EQU   TOLTEPWA
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@ENDDATA EQU   *
         END   ISTCC013,(C'PLS2032',0702,80232)
