         TITLE 'ISTIC00A,PROMPT - IT PROMPTS USER FOR CDS INFO'
ISTIC00A CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'ISTIC00A  80.232'                                 0001
         DROP  @15
@PROLOG  ST    @14,12(,@13)                                        0001
         STM   @00,@12,20(@13)                                     0001
         BALR  @11,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@11                                         0001
         ST    @13,@SA00001+4                                      0001
         LA    @12,@SA00001                                        0001
         ST    @12,8(,@13)                                         0001
         LR    @13,@12                                             0001
         EJECT
         EJECT
         EJECT
I00AC01  DS    0H                                                  0096
*   I00ACWK=$LOWADDR;               /* SET UP BASE FOR SWITHES       */
         L     @15,$LOWADDR(,WAPTR)                                0096
         ST    @15,I00ACWK                                         0096
*   CDSWKPTR=I00ACWK+80;            /* SET UP BASE FOR CDS WK        */
         AL    @15,@CF00050                                        0097
         ST    @15,CDSWKPTR                                        0097
*   TOADRPTR=ADDR(CDSEXARA)+256;    /* SET UP TOADDR BASE            */
         LA    @15,CDSEXARA(,@15)                                  0098
         AL    @15,@CF00084                                        0098
         ST    @15,TOADRPTR                                        0098
*   $INBUFR(1:1+LENGTH($INBUFR)-1)='';/* BLANK OUT IN BUFFER ENTER 0099
*                                      CDS PARM OR PROMPT            */
         MVI   $INBUFR(WAPTR),C' '                                 0099
         MVC   $INBUFR+1(79,WAPTR),$INBUFR(WAPTR)                  0099
*   IF $COPY='1'B THEN              /* IF THIS IS A COPY REQUEST     */
         TM    $COPY(WAPTR),B'00001000'                            0100
         BO    @RT00100                                            0100
*     GOTO I00AC01C;                /* THEN BR AROUND                */
*                                                                  0101
*   /*****************************************************************/
*   /*                                                               */
*   /* TCEC MSGN(580)INCT(61)MSGMSK('80000000'X) INVOKED             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0102
*   $TCECM='1'B;                    /* SET TCEC SW IN RCA            */
         OI    $TCECM(WAPTR),B'00000001'                           0102
*   R1=ADDR($TCA09);                /* SET UP PARM LIST $TR          */
         LA    R1,$TCA09                                           0103
*   CALL S20CEC03;                  /* CALL TCEC-MULTIPLE LN         */
         L     @15,@CV00781                                        0104
         BALR  @14,@15                                             0104
*   DCL                                                            0105
*     1 $TCA09,                     /* TCEC PARM LIST                */
*      2 $TCB09 FIXED(32) INIT(580),/* MSG NUMBER                    */
*      2 $TCC09 FIXED(32) INIT(61), /* INCT LEN                      */
*      2 $TCD09 BIT(8) INIT('01000000'B),/* FLAG                     */
*      2 $TCE09 CHAR(4) INIT('80000000'X);/* MSSAGE MASK             */
*   IF PROMPT^=$INBUFR(2:2) THEN    /* IF PROMPT WAS NOT REQUESTED   */
         CLC   PROMPT(1),$INBUFR+1(WAPTR)                          0106
         BNE   @RT00106                                            0106
*     GOTO I00AC03;                 /* THEN BR AROUND PROMPT RTN     */
*   IF $REMSW='1'B                  /* IF THIS IS A REMOTE ADD       */
*     THEN                          /* REQUEST THEN PRINT PROMPT     */
         TM    $REMSW(WAPTR),B'01000000'                           0108
         BNO   @RF00108                                            0108
*     DO;                           /* MESSAGES MINUS THE SYMB NME   */
*                                                                  0109
*       /*************************************************************/
*       /*                                                           */
*       /* TCEC MSGN(580)MSGMSK('3FDFFC00'X) INVOKED                 */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0110
*       $TCECM='1'B;                /* SET TCEC SW IN RCA            */
         OI    $TCECM(WAPTR),B'00000001'                           0110
*       R1=ADDR($TCA10);            /* SET UP PARM LIST $TR          */
         LA    R1,$TCA10                                           0111
*       CALL S20CEC03;              /* CALL TCEC-MULTIPLE LN         */
         L     @15,@CV00781                                        0112
         BALR  @14,@15                                             0112
*       DCL                                                        0113
*         1 $TCA10,                 /* TCEC PARM LIST                */
*          2 $TCB10 FIXED(32) INIT(580),/* MSG NUMBER                */
*          2 $TCC10 FIXED(32) INIT(0),/* INCT LEN                    */
*          2 $TCD10 BIT(8) INIT('00000000'B),/* FLAG                 */
*          2 $TCE10 CHAR(4) INIT('3FDFFC00'X);/* MSSAGE MASK         */
*     END;                                                         0114
*   ELSE                            /* OTHERWISE PRINT THE PROMPT    */
*     DO;                           /* MSG MINUS THE LINE ADR MSG    */
*                                                                  0115
         B     @RC00108                                            0115
@RF00108 DS    0H                                                  0116
*       /*************************************************************/
*       /*                                                           */
*       /* TCEC MSGN(580)MSGMSK('3FBFFC00'X) INVOKED                 */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0116
*       $TCECM='1'B;                /* SET TCEC SW IN RCA            */
         OI    $TCECM(WAPTR),B'00000001'                           0116
*       R1=ADDR($TCA11);            /* SET UP PARM LIST $TR          */
         LA    R1,$TCA11                                           0117
*       CALL S20CEC03;              /* CALL TCEC-MULTIPLE LN         */
         L     @15,@CV00781                                        0118
         BALR  @14,@15                                             0118
*       DCL                                                        0119
*         1 $TCA11,                 /* TCEC PARM LIST                */
*          2 $TCB11 FIXED(32) INIT(580),/* MSG NUMBER                */
*          2 $TCC11 FIXED(32) INIT(0),/* INCT LEN                    */
*          2 $TCD11 BIT(8) INIT('00000000'B),/* FLAG                 */
*          2 $TCE11 CHAR(4) INIT('3FBFFC00'X);/* MSSAGE MASK         */
*     END;                                                         0120
*I00AC01B:                                                         0121
*   INDX1=HWONE;                    /* SET UP INDEX VALUE            */
@RC00108 DS    0H                                                  0121
I00AC01B MVC   INDX1(2),HWONE                                      0121
*   GOTO I00AC01;                   /* GO GET CDS PARAMETERS         */
         B     I00AC01                                             0122
*I00AC01C:                                                         0123
*                                                                  0123
*   /*****************************************************************/
*   /*                                                               */
*   /* TCEC MSGN(582)INCT(61)MSGMSK('80000000'X) INVOKED             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0123
*   $TCECM='1'B;                    /* SET TCEC SW IN RCA            */
I00AC01C OI    $TCECM(WAPTR),B'00000001'                           0123
*   R1=ADDR($TCA12);                /* SET UP PARM LIST $TR          */
         LA    R1,$TCA12                                           0124
*   CALL S20CEC03;                  /* CALL TCEC-MULTIPLE LN         */
         L     @15,@CV00781                                        0125
         BALR  @14,@15                                             0125
*   DCL                                                            0126
*     1 $TCA12,                     /* TCEC PARM LIST                */
*      2 $TCB12 FIXED(32) INIT(582),/* MSG NUMBER                    */
*      2 $TCC12 FIXED(32) INIT(61), /* INCT LEN                      */
*      2 $TCD12 BIT(8) INIT('01000000'B),/* FLAG                     */
*      2 $TCE12 CHAR(4) INIT('80000000'X);/* MSSAGE MASK ENTER SYM 0126
*                                      NME OR CUA                    */
*I00AC01D:                                                         0127
*   INDX1=HWONE;                    /* GET PTR TO ENTRY              */
I00AC01D SLR   @15,@15                                             0127
         ICM   @15,3,HWONE                                         0127
         STH   @15,INDX1                                           0127
*   IF $REMSW='1'B                  /* IF THIS IS A REMOTE REQUEST   */
*     THEN                                                         0128
         TM    $REMSW(WAPTR),B'01000000'                           0128
         BNO   @RF00128                                            0128
*     DO;                           /* THEN VALIDITY CK ENTRY        */
*       IF $INBUFR(INDX1+1:INDX1+LENGTH(SYMNME))=SYMNME THEN       0130
         ALR   @15,WAPTR                                           0130
         CLC   $INBUFR(3,@15),SYMNME                               0130
         BE    @RT00130                                            0130
*         GOTO I00AC09A;                                           0131
*                                                                  0131
*       /*************************************************************/
*       /*                                                           */
*       /* TCEC MSGN(581)MSGMSK('02000000'X) INVOKED                 */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0132
*       $TCECM='1'B;                /* SET TCEC SW IN RCA            */
         OI    $TCECM(WAPTR),B'00000001'                           0132
*       R1=ADDR($TCA13);            /* SET UP PARM LIST $TR          */
         LA    R1,$TCA13                                           0133
*       CALL S20CEC03;              /* CALL TCEC-MULTIPLE LN         */
         L     @15,@CV00781                                        0134
         BALR  @14,@15                                             0134
*       DCL                                                        0135
*         1 $TCA13,                 /* TCEC PARM LIST                */
*          2 $TCB13 FIXED(32) INIT(581),/* MSG NUMBER                */
*          2 $TCC13 FIXED(32) INIT(0),/* INCT LEN                    */
*          2 $TCD13 BIT(8) INIT('00000000'B),/* FLAG                 */
*          2 $TCE13 CHAR(4) INIT('02000000'X);/* MSSAGE MASK INVALID
*                                      ENTRY                         */
*       GOTO I00AC01;               /* BR BACK AND TRY AGAIN         */
         B     I00AC01                                             0136
*     END;                                                         0137
*   ELSE                                                           0138
*     DO;                           /* VALIDITY CK CUA ENTRY         */
@RF00128 DS    0H                                                  0139
*       IF $INBUFR(INDX1+1:INDX1+LENGTH(UADR))=UADR THEN           0139
         LH    @15,INDX1                                           0139
         N     @15,@CF00965                                        0139
         ALR   @15,WAPTR                                           0139
         CLC   $INBUFR(3,@15),UADR                                 0139
         BE    @RT00139                                            0139
*         GOTO I00AC08A;            /* IF OK THEN BR AROUND          */
*                                                                  0140
*       /*************************************************************/
*       /*                                                           */
*       /* TCEC MSGN(581)MSGMSK('04000000'X) INVOKED                 */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0141
*       $TCECM='1'B;                /* SET TCEC SW IN RCA            */
         OI    $TCECM(WAPTR),B'00000001'                           0141
*       R1=ADDR($TCA14);            /* SET UP PARM LIST $TR          */
         LA    R1,$TCA14                                           0142
*       CALL S20CEC03;              /* CALL TCEC-MULTIPLE LN         */
         L     @15,@CV00781                                        0143
         BALR  @14,@15                                             0143
*       DCL                                                        0144
*         1 $TCA14,                 /* TCEC PARM LIST                */
*          2 $TCB14 FIXED(32) INIT(581),/* MSG NUMBER                */
*          2 $TCC14 FIXED(32) INIT(0),/* INCT LEN                    */
*          2 $TCD14 BIT(8) INIT('00000000'B),/* FLAG                 */
*          2 $TCE14 CHAR(4) INIT('04000000'X);/* MSSAGE MASK INVALID
*                                      ENTRY                         */
*       GOTO I00AC01;               /* BR BACK AND TRY AGAIN         */
         B     I00AC01                                             0145
*     END;                                                         0146
*   GEN(EJECT);                                                    0147
         EJECT
*I00AC02:                           /* CONTINUE ENTER'G CDS DATA     */
*   $INBUFR(1:1+LENGTH($INBUFR)-1)='';/* ZERO OUT BUFFER             */
*                                                                  0148
I00AC02  MVI   $INBUFR(WAPTR),C' '                                 0148
         MVC   $INBUFR+1(79,WAPTR),$INBUFR(WAPTR)                  0148
*   /*****************************************************************/
*   /*                                                               */
*   /* TCEC MSGN(580)INCT(61)MSGMSK('40000000'X) INVOKED             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0149
*   $TCECM='1'B;                    /* SET TCEC SW IN RCA            */
         OI    $TCECM(WAPTR),B'00000001'                           0149
*   R1=ADDR($TCA15);                /* SET UP PARM LIST $TR          */
         LA    R1,$TCA15                                           0150
*   CALL S20CEC03;                  /* CALL TCEC-MULTIPLE LN         */
         L     @15,@CV00781                                        0151
         BALR  @14,@15                                             0151
*   DCL                                                            0152
*     1 $TCA15,                     /* TCEC PARM LIST                */
*      2 $TCB15 FIXED(32) INIT(580),/* MSG NUMBER                    */
*      2 $TCC15 FIXED(32) INIT(61), /* INCT LEN                      */
*      2 $TCD15 BIT(8) INIT('01000000'B),/* FLAG                     */
*      2 $TCE15 CHAR(4) INIT('40000000'X);/* MSSAGE MASK             */
*I00AC03:                                                          0153
*   INDX1=HWONE;                    /* SET UP INDEX VALUE            */
I00AC03  MVC   INDX1(2),HWONE                                      0153
*I00AC03A:                                                         0154
*   IF $INBUFR(INDX1+1:INDX1+LENGTH(MODEL))^=MODEL THEN            0154
I00AC03A LH    @15,INDX1                                           0154
         N     @15,@CF00965                                        0154
         ALR   @15,WAPTR                                           0154
         CLC   $INBUFR(2,@15),MODEL                                0154
         BNE   @RT00154                                            0154
*     GOTO I00AC04;                 /* IF NOT MODEL ENTRY-BR         */
*   GEN(BAL LINKR,I00ACLEN);        /* GO GET LENGTH OF MODEL I/P    */
         BAL LINKR,I00ACLEN
*   IF IPLEN^=MLNGTH THEN           /* IF IT DOESN'T = EXPECTED      */
         CLC   IPLEN(1),MLNGTH                                     0157
         BNE   @RT00157                                            0157
*     GOTO I00AC03B;                /* THEN BR AND PRINT ERROR       */
*   GEN(BAL LINKR,I00ACONV);        /* OTHERWISE CONVERT IT          */
         BAL LINKR,I00ACONV
*   IF R15^=0 THEN                  /* IF IT DID NOT CNV OK THEN     */
         LTR   R15,R15                                             0160
         BNZ   @RT00160                                            0160
*     GOTO I00AC03B;                /* WE MUST HAVE INVALID I/P-BR   */
*   CDSMODEL=TOADR(1:1);            /* SET UP MODEL FLD-CNV OK       */
         L     @15,TOADRPTR                                        0162
         IC    @12,TOADR(,@15)                                     0162
         L     @15,CDSWKPTR                                        0162
         STC   @12,CDSMODEL(,@15)                                  0162
*   IF CONTSCAN='0'B THEN           /* IF CONT SCAN SW IS NOT ON     */
         L     @15,I00ACWK                                         0163
         TM    CONTSCAN(@15),B'10000000'                           0163
         BZ    @RT00163                                            0163
*     GOTO I00AC02;                 /* THEN GO GET NXT LINE DATA     */
*   CONTSCAN='0'B;                  /* OTHERWISE RESET SWITCH AND    */
         NI    CONTSCAN(@15),B'01111111'                           0165
*   GOTO I00AC03A;                  /* CONTINUE ON                   */
         B     I00AC03A                                            0166
*I00AC03B:                                                         0167
*                                                                  0167
*   /*****************************************************************/
*   /*                                                               */
*   /* TCEC MSGN(581)MSGMSK('80000000'X) INVOKED                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0167
*   $TCECM='1'B;                    /* SET TCEC SW IN RCA            */
I00AC03B OI    $TCECM(WAPTR),B'00000001'                           0167
*   R1=ADDR($TCA16);                /* SET UP PARM LIST $TR          */
         LA    R1,$TCA16                                           0168
*   CALL S20CEC03;                  /* CALL TCEC-MULTIPLE LN         */
         L     @15,@CV00781                                        0169
         BALR  @14,@15                                             0169
*   DCL                                                            0170
*     1 $TCA16,                     /* TCEC PARM LIST                */
*      2 $TCB16 FIXED(32) INIT(581),/* MSG NUMBER                    */
*      2 $TCC16 FIXED(32) INIT(0),  /* INCT LEN                      */
*      2 $TCD16 BIT(8) INIT('00000000'B),/* FLAG                     */
*      2 $TCE16 CHAR(4) INIT('80000000'X);/* MSSAGE MASK INVALID   0170
*                                      MODEL FLD                     */
*   GOTO I00AC01;                   /* GO GET ENTIRE LAST LINE       */
         B     I00AC01                                             0171
*I00AC04:                                                          0172
*   IF $INBUFR(INDX1+1:INDX1+LENGTH(FEAT))^=FEAT THEN              0172
I00AC04  LH    @15,INDX1                                           0172
         N     @15,@CF00965                                        0172
         ALR   @15,WAPTR                                           0172
         CLC   $INBUFR(2,@15),FEAT                                 0172
         BNE   @RT00172                                            0172
*     GOTO I00AC05;                 /* IF NOT FEAT ENTRY BE          */
*   GEN(BAL LINKR,I00ACLEN);        /* GO GET LENGTH OF FEAT I/P     */
         BAL LINKR,I00ACLEN
*   IF IPLEN^=FLNGTH THEN           /* IF IT DOESN'T = EXPECTED      */
         CLC   IPLEN(1),FLNGTH                                     0175
         BNE   @RT00175                                            0175
*     GOTO I00AC04A;                /* THEN BR AND PRINT ERROR       */
*   GEN(BAL LINKR,I00ACONV);        /* OTHERWISE CONVERT IT          */
         BAL LINKR,I00ACONV
*   IF R15^=0 THEN                  /* IF IT DID NOT CNV OK THEN     */
         LTR   R15,R15                                             0178
         BNZ   @RT00178                                            0178
*     GOTO I00AC04A;                /* WE MUST HAVE INVALID I/P-BR   */
*   CDSFEAT=TOADR(1:1);             /* SET UP REATURE FLD-CNV OK     */
         L     @15,TOADRPTR                                        0180
         IC    @12,TOADR(,@15)                                     0180
         L     @15,CDSWKPTR                                        0180
         STC   @12,CDSFEAT(,@15)                                   0180
*   IF CONTSCAN='0'B THEN           /* IF CONT SCAN SW IS NOT ON     */
         L     @15,I00ACWK                                         0181
         TM    CONTSCAN(@15),B'10000000'                           0181
         BZ    @RT00181                                            0181
*     GOTO I00AC02;                 /* THEN GO GET NXT LINE DATA     */
*   CONTSCAN='0'B;                  /* OTHERWISE RESET SWITCH AND    */
         NI    CONTSCAN(@15),B'01111111'                           0183
*   GOTO I00AC03A;                  /* CONTINUE ON                   */
         B     I00AC03A                                            0184
*I00AC04A:                                                         0185
*                                                                  0185
*   /*****************************************************************/
*   /*                                                               */
*   /* TCEC MSGN(581)MSGMSK('40000000'X) INVOKED                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0185
*   $TCECM='1'B;                    /* SET TCEC SW IN RCA            */
I00AC04A OI    $TCECM(WAPTR),B'00000001'                           0185
*   R1=ADDR($TCA17);                /* SET UP PARM LIST $TR          */
         LA    R1,$TCA17                                           0186
*   CALL S20CEC03;                  /* CALL TCEC-MULTIPLE LN         */
         L     @15,@CV00781                                        0187
         BALR  @14,@15                                             0187
*   DCL                                                            0188
*     1 $TCA17,                     /* TCEC PARM LIST                */
*      2 $TCB17 FIXED(32) INIT(581),/* MSG NUMBER                    */
*      2 $TCC17 FIXED(32) INIT(0),  /* INCT LEN                      */
*      2 $TCD17 BIT(8) INIT('00000000'B),/* FLAG                     */
*      2 $TCE17 CHAR(4) INIT('40000000'X);/* MSSAGE MASK INVALID FEAT
*                                      FLD                           */
*   GOTO I00AC01;                   /* GO GET ENTIRE LAST LINE       */
         B     I00AC01                                             0189
*I00AC05:                                                          0190
*   IF $INBUFR(INDX1+1:INDX1+LENGTH(CLASS))^=CLASS THEN            0190
I00AC05  LH    @15,INDX1                                           0190
         N     @15,@CF00965                                        0190
         ALR   @15,WAPTR                                           0190
         CLC   $INBUFR(2,@15),CLASS                                0190
         BNE   @RT00190                                            0190
*     GOTO I00AC06;                 /* IF NOT CLASS ENTRY - BR       */
*   GEN(BAL LINKR,I00ACLEN);        /* GO GET LENGTH OF FEAT I/P     */
         BAL LINKR,I00ACLEN
*   IF IPLEN^=CLNGTH THEN           /* IF IT DOESN'T = EXPECTED      */
         CLC   IPLEN(1),CLNGTH                                     0193
         BNE   @RT00193                                            0193
*     GOTO I00AC05A;                /* THEN BR AND PRINT ERROR       */
*   GEN(BAL LINKR,I00ACONV);        /* OTHERWISE CONVERT IT          */
         BAL LINKR,I00ACONV
*   IF R15^=0 THEN                  /* IF IT DID NOT CNV OK THEN     */
         LTR   R15,R15                                             0196
         BNZ   @RT00196                                            0196
*     GOTO I00AC05A;                /* WE MUST HAVE INVALID I/P-BR   */
*   CDSCLASS=TOADR(1:1);            /* SET UP CLASS FLD-CONV OK      */
         L     @15,TOADRPTR                                        0198
         IC    @12,TOADR(,@15)                                     0198
         L     @15,CDSWKPTR                                        0198
         STC   @12,CDSCLASS(,@15)                                  0198
*   CLASSSW='1'B;                   /* TURN ON CLASS SW              */
         L     @15,I00ACWK                                         0199
         OI    CLASSSW(@15),B'01000000'                            0199
*   IF CONTSCAN='0'B THEN           /* IF CONT SCAN SW IS NOT ON     */
         TM    CONTSCAN(@15),B'10000000'                           0200
         BZ    @RT00200                                            0200
*     GOTO I00AC02;                 /* THEN GO GET NXT LINE DATA     */
*   CONTSCAN='0'B;                  /* OTHERWISE RESET SWITCH AND    */
         NI    CONTSCAN(@15),B'01111111'                           0202
*   GOTO I00AC03A;                  /* CONTINUE ON                   */
         B     I00AC03A                                            0203
*I00AC05A:                                                         0204
*                                                                  0204
*   /*****************************************************************/
*   /*                                                               */
*   /* TCEC MSGN(581)MSGMSK('20000000'X) INVOKED                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0204
*   $TCECM='1'B;                    /* SET TCEC SW IN RCA            */
I00AC05A OI    $TCECM(WAPTR),B'00000001'                           0204
*   R1=ADDR($TCA18);                /* SET UP PARM LIST $TR          */
         LA    R1,$TCA18                                           0205
*   CALL S20CEC03;                  /* CALL TCEC-MULTIPLE LN         */
         L     @15,@CV00781                                        0206
         BALR  @14,@15                                             0206
*   DCL                                                            0207
*     1 $TCA18,                     /* TCEC PARM LIST                */
*      2 $TCB18 FIXED(32) INIT(581),/* MSG NUMBER                    */
*      2 $TCC18 FIXED(32) INIT(0),  /* INCT LEN                      */
*      2 $TCD18 BIT(8) INIT('00000000'B),/* FLAG                     */
*      2 $TCE18 CHAR(4) INIT('20000000'X);/* MSSAGE MASK INVALID   0207
*                                      CLASS FLD                     */
*   GOTO I00AC01;                   /* GO GET ENTIRE LAST LINE       */
         B     I00AC01                                             0208
*I00AC06:                                                          0209
*   IF $INBUFR(INDX1+1:INDX1+LENGTH(TYPE))^=TYPE THEN              0209
I00AC06  LH    @15,INDX1                                           0209
         N     @15,@CF00965                                        0209
         ALR   @15,WAPTR                                           0209
         CLC   $INBUFR(2,@15),TYPE                                 0209
         BNE   @RT00209                                            0209
*     GOTO I00AC07;                 /* IF NOT TYPE ENTRY - BR        */
*   GEN(BAL LINKR,I00ACLEN);        /* GO GET LENGTH OF TYPE I/P     */
         BAL LINKR,I00ACLEN
*   IF IPLEN^=TLNGTH THEN           /* IF IT DOESN'T = EXPECTED      */
         CLC   IPLEN(1),TLNGTH                                     0212
         BNE   @RT00212                                            0212
*     GOTO I00AC06A;                /* THEN BR AND PRINT ERROR       */
*   GEN(BAL LINKR,I00ACONV);        /* OTHERWISE CONVERT IT          */
         BAL LINKR,I00ACONV
*   IF R15^=0 THEN                  /* IF IT DID NOT CNV OK THE      */
         LTR   R15,R15                                             0215
         BNZ   @RT00215                                            0215
*     GOTO I00AC06A;                /* WE MUST HAVE INVALID I/P-BR   */
*   CDSTYPE=TOADR(1:1);             /* SET UP TYPE FLD-CONV OK       */
         L     @15,TOADRPTR                                        0217
         IC    @12,TOADR(,@15)                                     0217
         L     @15,CDSWKPTR                                        0217
         STC   @12,CDSTYPE(,@15)                                   0217
*   TYPESW='1'B;                    /* TURN ON TYPE SW               */
         L     @15,I00ACWK                                         0218
         OI    TYPESW(@15),B'00100000'                             0218
*   IF CONTSCAN='0'B THEN           /* IF CONT SCAN SW IS NOT ON     */
         TM    CONTSCAN(@15),B'10000000'                           0219
         BZ    @RT00219                                            0219
*     GOTO I00AC02;                 /* THEN GO GET NXT LINE DATA     */
*   CONTSCAN='0'B;                  /* OTHERWISE RESET SWITCH AND    */
         NI    CONTSCAN(@15),B'01111111'                           0221
*   GOTO I00AC03A;                  /* CONTINUE ON                   */
         B     I00AC03A                                            0222
*I00AC06A:                                                         0223
*                                                                  0223
*   /*****************************************************************/
*   /*                                                               */
*   /* TCEC MSGN(581)MSGMSK('10000000'X) INVOKED                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0223
*   $TCECM='1'B;                    /* SET TCEC SW IN RCA            */
I00AC06A OI    $TCECM(WAPTR),B'00000001'                           0223
*   R1=ADDR($TCA19);                /* SET UP PARM LIST $TR          */
         LA    R1,$TCA19                                           0224
*   CALL S20CEC03;                  /* CALL TCEC-MULTIPLE LN         */
         L     @15,@CV00781                                        0225
         BALR  @14,@15                                             0225
*   DCL                                                            0226
*     1 $TCA19,                     /* TCEC PARM LIST                */
*      2 $TCB19 FIXED(32) INIT(581),/* MSG NUMBER                    */
*      2 $TCC19 FIXED(32) INIT(0),  /* INCT LEN                      */
*      2 $TCD19 BIT(8) INIT('00000000'B),/* FLAG                     */
*      2 $TCE19 CHAR(4) INIT('10000000'X);/* MSSAGE MASK INVALID TYPE
*                                      FLD                           */
*   GOTO I00AC01;                   /* GO GET ENTIRE LAST LINE       */
         B     I00AC01                                             0227
*I00AC07:                                                          0228
*   IF $INBUFR(INDX1+1:INDX1+LENGTH(FLAGS))^=FLAGS THEN            0228
I00AC07  LH    @15,INDX1                                           0228
         N     @15,@CF00965                                        0228
         ALR   @15,WAPTR                                           0228
         CLC   $INBUFR(3,@15),FLAGS                                0228
         BNE   @RT00228                                            0228
*     GOTO I00AC08;                 /* IF NOT FLAG ENTRY BR          */
*   GEN(BAL LINKR,I00ACLEN);        /* GO GET LENGTH OF FLAG ENTRY   */
         BAL LINKR,I00ACLEN
*   IF IPLEN^=FLGLNGTH THEN         /* IF IT DOESN'T EQ EXPECTED     */
         CLC   IPLEN(1),FLGLNGTH                                   0231
         BNE   @RT00231                                            0231
*     GOTO I00AC07A;                /* THEN BR AND PRINT ERROR       */
*   GEN(BAL LINKR,I00ACONV);        /* OTHERWISE CONVERT IT          */
         BAL LINKR,I00ACONV
*   IF R15^=0 THEN                  /* IF IT DID NOT CONV OK THEN    */
         LTR   R15,R15                                             0234
         BNZ   @RT00234                                            0234
*     GOTO I00AC07A;                /* WE MUST HAVE INVALID I/P-BR   */
*   CDSFLAG=TOADR(1:3);             /* CONV OK-SET UP FLAG FLO       */
         L     @15,CDSWKPTR                                        0236
         L     @12,TOADRPTR                                        0236
         MVC   CDSFLAG(3,@15),TOADR(@12)                           0236
*   FLAGSW='1'B;                    /* TURN ON FLAG SW               */
         L     @15,I00ACWK                                         0237
         OI    FLAGSW(@15),B'00010000'                             0237
*   IF CONTSCAN='0'B THEN           /* IF CONT SCAN SW IS NOT ON     */
         TM    CONTSCAN(@15),B'10000000'                           0238
         BZ    @RT00238                                            0238
*     GOTO I00AC02;                 /* THEN GO GET NXT LINE DATA     */
*   CONTSCAN='0'B;                  /* OTHERWISE RESET SWITCH AND    */
         NI    CONTSCAN(@15),B'01111111'                           0240
*   GOTO I00AC03A;                  /* CONTINUE ON                   */
         B     I00AC03A                                            0241
*I00AC07A:                                                         0242
*                                                                  0242
*   /*****************************************************************/
*   /*                                                               */
*   /* TCEC MSGN(581)MSGMSK('08000000'X) INVOKED                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0242
*   $TCECM='1'B;                    /* SET TCEC SW IN RCA            */
I00AC07A OI    $TCECM(WAPTR),B'00000001'                           0242
*   R1=ADDR($TCA20);                /* SET UP PARM LIST $TR          */
         LA    R1,$TCA20                                           0243
*   CALL S20CEC03;                  /* CALL TCEC-MULTIPLE LN         */
         L     @15,@CV00781                                        0244
         BALR  @14,@15                                             0244
*   DCL                                                            0245
*     1 $TCA20,                     /* TCEC PARM LIST                */
*      2 $TCB20 FIXED(32) INIT(581),/* MSG NUMBER                    */
*      2 $TCC20 FIXED(32) INIT(0),  /* INCT LEN                      */
*      2 $TCD20 BIT(8) INIT('00000000'B),/* FLAG                     */
*      2 $TCE20 CHAR(4) INIT('08000000'X);/* MSSAGE MASK INVALID FLAG
*                                      FLD                           */
*   GOTO I00AC01;                   /* GO GET ENTIRE LAST LINE       */
         B     I00AC01                                             0246
*I00AC08:                                                          0247
*   IF $INBUFR(INDX1+1:INDX1+LENGTH(UADR))^=UADR THEN              0247
I00AC08  LH    @15,INDX1                                           0247
         N     @15,@CF00965                                        0247
         ALR   @15,WAPTR                                           0247
         CLC   $INBUFR(3,@15),UADR                                 0247
         BNE   @RT00247                                            0247
*     GOTO I00AC09;                 /* IF NOT UNIT ADR ENTRY-BR      */
*   IF $REMSW='0'B THEN             /* IF NOT A REMOTE REQUEST       */
         TM    $REMSW(WAPTR),B'01000000'                           0249
         BZ    @RT00249                                            0249
*     GOTO I00AC08B;                /* THEN PRINT INVALID ENTRY      */
*I00AC08A:                                                         0251
*   GEN(BAL LINKR,I00ACLEN);        /* GO GET LENGTH OF UA ENTRY     */
I00AC08A BAL LINKR,I00ACLEN
*   IF IPLEN=UALNGTH                /* IF 4 DIGITS INPUT             */
*     THEN                          /* THEN                          */
         CLC   IPLEN(1),UALNGTH                                    0252
         BE    @RT00252                                            0252
*     GOTO I00AC081;                /* GO CONVERT IT AS IS           */
*   IF IPLEN^=3                     /* IF NOT 3 OR 4 CHAR ENTERED    */
*     THEN                          /* THEN                          */
         CLI   IPLEN,3                                             0254
         BNE   @RT00254                                            0254
*     GOTO I00AC08B;                /* PRINT ERROR                   */
*   IPLEN=4;                        /* SET LENGTH FOR 4 CHARS      0256
*                                                            @OX05734*/
         MVI   IPLEN,X'04'                                         0256
*   FRADRPTR=FRADRPTR-1;            /* ELSE BACK UP PTR TO = SIGN    */
         L     @15,FRADRPTR                                        0257
         BCTR  @15,0                                               0257
         ST    @15,FRADRPTR                                        0257
*   FRADR(1:1)='F0'X;               /* OVERLAY EQU SIGN WITH 0     0258
*                                                            @OX05734*/
         MVI   FRADR(@15),X'F0'                                    0258
*I00AC081:                                                         0259
*   GEN(BAL LINKR,I00ACONV);        /* OTHERWISE CONVERT IT          */
I00AC081 BAL LINKR,I00ACONV
*   IF R15^=0 THEN                  /* IF IT DID NOT CNV OK THEN     */
         LTR   R15,R15                                             0260
         BNZ   @RT00260                                            0260
*     GOTO I00AC08B;                /* WE MUST HAVE INVALID I/P-BR   */
*   GEN(XC CDSWORK,CDSWORK);        /* ZERO OUT CDS WORK AREA        */
         XC CDSWORK,CDSWORK
*   CDSWORK(3:4)=TOADR(1:2);        /* GET CONVERTED 2-BYTE ADDR     */
         L     @15,TOADRPTR                                        0263
         MVC   CDSWORK+2(2),TOADR(@15)                             0263
*   CDSUA=CDSWORK(1:4);             /* SET UP 4-BYTE ADDR            */
         L     @15,CDSWKPTR                                        0264
         MVC   CDSUA(4,@15),CDSWORK                                0264
*   IF $COPY='1'B                   /* IF THIS IS A COPY REQUEST     */
*     THEN                          /* THEN DO THE FOLLOWING         */
         TM    $COPY(WAPTR),B'00001000'                            0265
         BNO   @RF00265                                            0265
*     DO;                                                          0266
*       R1=ADDR(VERYTBL);           /* SET UP PARM LIST PTR          */
         LA    R1,VERYTBL                                          0267
*       CDSPTR=ADDR(CDSUA);         /* GET PTR TO CDS DATA           */
         ST    @15,CDSPTR                                          0268
*       CALL ISTSC030;              /* GO VERIFY CDS ADDR-VTAM       */
         L     @15,@CV00896                                        0269
         BALR  @14,@15                                             0269
*       IF R15^=0 THEN              /* IF RET CODE DOESN'T EQ ZERO   */
         LTR   R15,R15                                             0270
         BNZ   @RT00270                                            0270
*         GOTO I00AC08B;            /* INVALID ENTRY - ERROR         */
*       RETURN;                     /* RETURN TO CALLER              */
@EL00001 L     @13,4(,@13)                                         0272
@EF00001 DS    0H                                                  0272
@ER00001 L     @14,12(,@13)                                        0272
         LM    @00,@12,20(@13)                                     0272
         BR    @14                                                 0272
*     END;                                                         0273
*   UASW='1'B;                      /* TURN ON UNIT ADR SW           */
@RF00265 L     @15,I00ACWK                                         0274
         OI    UASW(@15),B'00001000'                               0274
*   IF CONTSCAN='0'B THEN           /* IF CONT SCAN SWITCH IS OFF    */
         TM    CONTSCAN(@15),B'10000000'                           0275
         BZ    @RT00275                                            0275
*     GOTO I00AC02;                 /* THEN GO GET NXT LINE          */
*   CONTSCAN='0'B;                  /* OTHERWISE RESET IT AND        */
         NI    CONTSCAN(@15),B'01111111'                           0277
*   GOTO I00AC03A;                  /* CONTINUE ON                   */
         B     I00AC03A                                            0278
*I00AC08B:                                                         0279
*                                                                  0279
*   /*****************************************************************/
*   /*                                                               */
*   /* TCEC MSGN(581)MSGMSK('04000000'X) INVOKED                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0279
*   $TCECM='1'B;                    /* SET TCEC SW IN RCA            */
I00AC08B OI    $TCECM(WAPTR),B'00000001'                           0279
*   R1=ADDR($TCA21);                /* SET UP PARM LIST $TR          */
         LA    R1,$TCA21                                           0280
*   CALL S20CEC03;                  /* CALL TCEC-MULTIPLE LN         */
         L     @15,@CV00781                                        0281
         BALR  @14,@15                                             0281
*   DCL                                                            0282
*     1 $TCA21,                     /* TCEC PARM LIST                */
*      2 $TCB21 FIXED(32) INIT(581),/* MSG NUMBER                    */
*      2 $TCC21 FIXED(32) INIT(0),  /* INCT LEN                      */
*      2 $TCD21 BIT(8) INIT('00000000'B),/* FLAG                     */
*      2 $TCE21 CHAR(4) INIT('04000000'X);/* MSSAGE MASK INVALID UNIT
*                                      ADR FLD                       */
*   IF $COPY='1'B THEN              /* IF THIS IS A COPY REQUEST     */
         TM    $COPY(WAPTR),B'00001000'                            0283
         BO    @RT00283                                            0283
*     GOTO I00AC01C;                /* THEN GO GET NAME AGAIN        */
*   GOTO I00AC01;                   /* GO GET ENTIRE LAST LINE       */
         B     I00AC01                                             0285
*I00AC09:                                                          0286
*   IF $INBUFR(INDX1+1:INDX1+LENGTH(SYMNME))^=SYMNME THEN          0286
I00AC09  LH    @15,INDX1                                           0286
         N     @15,@CF00965                                        0286
         ALR   @15,WAPTR                                           0286
         CLC   $INBUFR(3,@15),SYMNME                               0286
         BNE   @RT00286                                            0286
*     GOTO I00AC0A;                 /* IF NOT SYMB NEM ENTRY-BR      */
*   IF $REMSW='1'B THEN             /* IF ITS A REMOTE REQUEST       */
         TM    $REMSW(WAPTR),B'01000000'                           0288
         BO    @RT00288                                            0288
*     GOTO I00AC09B;                /* THEM PRINT INVALID ENTRY      */
*I00AC09A:                                                         0290
*   GEN(BAL LINKR,I00ACLEN);        /* GO GET LENGTH OF SYM NAME     */
I00AC09A BAL LINKR,I00ACLEN
*   IF IPLEN>SNLNGTH THEN           /* IF I/P LEN IS GREATER THAN    */
         CLC   IPLEN(1),SNLNGTH                                    0291
         BH    @RT00291                                            0291
*     GOTO I00AC09B;                /* EXPECTED THEN PRINT ERROR     */
*   CDSSYMBN='        ';            /* BLANK OUT SYMBOLIC NAME     0293
*                                                            @DM44548*/
         L     @15,CDSWKPTR                                        0293
         MVC   CDSSYMBN(8,@15),@CC00907                            0293
*   CDSSYMBN(1:IPLEN)=FRADR(1:IPLEN);/* SET UP SYMBOLIC NAME         */
         SLR   @12,@12                                             0294
         IC    @12,IPLEN                                           0294
         BCTR  @12,0                                               0294
         L     @10,FRADRPTR                                        0294
         EX    @12,@SM00970                                        0294
*   IF $COPY='1'B                   /* IF THIS IS A COPY REQUEST     */
*     THEN                          /* THEN DO THE FOLLOWING         */
         TM    $COPY(WAPTR),B'00001000'                            0295
         BNO   @RF00295                                            0295
*     DO;                                                          0296
*       R1=ADDR(VERYTBL);           /* SET UP PARM LIST PTR          */
         LA    R1,VERYTBL                                          0297
*       CDSPTR=ADDR(CDSUA);         /* GET PTR TO CDS DATA           */
         ST    @15,CDSPTR                                          0298
*       CALL ISTSC030;              /* GO VERIFY CDS EXIST TO VTAM   */
         L     @15,@CV00896                                        0299
         BALR  @14,@15                                             0299
*       IF R15^=0 THEN              /* IF RET CODE ^= ZERO-ERROR     */
         LTR   R15,R15                                             0300
         BNZ   @RT00300                                            0300
*         GOTO I00AC09B;            /* INVALID ENTRY                 */
*       RETURN;                     /* RETURN TO CALLER              */
         B     @EL00001                                            0302
*     END;                                                         0303
*   IF CONTSCAN='0'B THEN           /* IF CONT SCAN SWITCH IS OFF    */
@RF00295 L     @15,I00ACWK                                         0304
         TM    CONTSCAN(@15),B'10000000'                           0304
         BZ    @RT00304                                            0304
*     GOTO I00AC02;                 /* THEN GO GET NXT LINE          */
*   CONTSCAN='0'B;                  /* OTHERWISE RESET IT AND        */
         NI    CONTSCAN(@15),B'01111111'                           0306
*   GOTO I00AC03A;                  /* CONTINUE ON                   */
         B     I00AC03A                                            0307
*I00AC09B:                                                         0308
*                                                                  0308
*   /*****************************************************************/
*   /*                                                               */
*   /* TCEC MSGN(581)MSGMSK('02000000'X) INVOKED                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0308
*   $TCECM='1'B;                    /* SET TCEC SW IN RCA            */
I00AC09B OI    $TCECM(WAPTR),B'00000001'                           0308
*   R1=ADDR($TCA22);                /* SET UP PARM LIST $TR          */
         LA    R1,$TCA22                                           0309
*   CALL S20CEC03;                  /* CALL TCEC-MULTIPLE LN         */
         L     @15,@CV00781                                        0310
         BALR  @14,@15                                             0310
*   DCL                                                            0311
*     1 $TCA22,                     /* TCEC PARM LIST                */
*      2 $TCB22 FIXED(32) INIT(581),/* MSG NUMBER                    */
*      2 $TCC22 FIXED(32) INIT(0),  /* INCT LEN                      */
*      2 $TCD22 BIT(8) INIT('00000000'B),/* FLAG                     */
*      2 $TCE22 CHAR(4) INIT('02000000'X);/* MSSAGE MASK INVALID SYM
*                                      NAME FLD                      */
*   IF $COPY='1'B THEN              /* IF THIS IS A COPY REQUEST     */
         TM    $COPY(WAPTR),B'00001000'                            0312
         BO    @RT00312                                            0312
*     GOTO I00AC01C;                /* THEN GO GET NAME AGAIN        */
*   GOTO I00AC01;                   /* GO GET ENTIRE LAST LINE       */
         B     I00AC01                                             0314
*I00AC0A:                                                          0315
*   IF $INBUFR(INDX1+1:INDX1+LENGTH(DB))^=DB THEN                  0315
I00AC0A  LH    @15,INDX1                                           0315
         N     @15,@CF00965                                        0315
         ALR   @15,WAPTR                                           0315
         CLC   $INBUFR(2,@15),DB                                   0315
         BNE   @RT00315                                            0315
*     GOTO I00AC0B;                 /* IF NOT A DATA GROUP THEN BR   */
*   DBCOUNT=0;                      /* INITIALIZE DATA BYTE CT       */
         MVI   DBCOUNT,X'00'                                       0317
*   IF $INBUFR(INDX1+LENGTH(DB)+3:INDX1+LENGTH(DB)+3)=EQSIGN THEN  0318
         LH    @15,INDX1                                           0318
         N     @15,@CF00965                                        0318
         ALR   @15,WAPTR                                           0318
         CLC   $INBUFR+4(1,@15),EQSIGN                             0318
         BE    @RT00318                                            0318
*     GOTO I00AC0AA;                /* IF ITS -DBXX=-ITS OK          */
*   IF $INBUFR(INDX1+LENGTH(DB)+4:INDX1+LENGTH(DB)+4)^=EQSIGN THEN 0320
         LH    @15,INDX1                                           0320
         N     @15,@CF00965                                        0320
         ALR   @15,WAPTR                                           0320
         CLC   $INBUFR+5(1,@15),EQSIGN                             0320
         BNE   @RT00320                                            0320
*     GOTO I00AC0AC;                                               0321
*I00AC0AA:                                                         0322
*   DBSW='1'B;                      /* TURN ON DATA BYTE SW          */
I00AC0AA DS    0H                                                  0323
*   DATASW='1'B;                    /* SET DATA SW                   */
         L     @15,I00ACWK                                         0323
         OI    DBSW(@15),B'00000011'                               0323
*   GEN(BAL LINKR,I00ACLEN);        /* GO GET LENGTH OF DATA BYTES   */
         BAL LINKR,I00ACLEN
*   IF ERROR=ON                     /* IF NOT NUMERICAL DISPLACEMENT */
*     THEN                          /* THEN                          */
         L     @15,I00ACWK                                         0325
         TM    ERROR(@15),B'10000000'                              0325
         BO    @RT00325                                            0325
*     GOTO I00AC0AC;                /* REJECT ENTRY                  */
*   IF $REMSW=OFF                   /* IF LOCAL CDS                  */
*     THEN                          /* THEN                          */
         TM    $REMSW(WAPTR),B'01000000'                           0327
         BNZ   @RF00327                                            0327
*     INDX2=DB#-12;                 /* START EXTRA DATA IN BYTE 12   */
         LH    @15,DB#                                             0328
         N     @15,@CF00965                                        0328
         SL    @15,@CF00137                                        0328
         STC   @15,INDX2                                           0328
*   ELSE                            /* ELSE FOR REMOTE BYTE 20       */
*     INDX2=DB#-20;                 /* SET UP CDSEXARA OFFSET        */
         B     @RC00327                                            0329
@RF00327 LH    @15,DB#                                             0329
         N     @15,@CF00965                                        0329
         SL    @15,@CF00379                                        0329
         STC   @15,INDX2                                           0329
*   IF EBCDICSW='1'B THEN                                          0330
@RC00327 L     @15,I00ACWK                                         0330
         TM    EBCDICSW(@15),B'00000100'                           0330
         BNO   @RF00330                                            0330
*     DO;                           /* IF IT WAS EBCDIC CHAR THEN    */
*       EBCDICSW='0'B;              /* RESET SW AND                  */
         NI    EBCDICSW(@15),B'11111011'                           0332
*       IF(DB#+IPLEN)>255 THEN                                     0333
         SLR   @15,@15                                             0333
         IC    @15,IPLEN                                           0333
         LH    @12,DB#                                             0333
         N     @12,@CF00965                                        0333
         ALR   @12,@15                                             0333
         C     @12,@CF00919                                        0333
         BH    @RT00333                                            0333
*         GOTO I00AC0AC;            /*                       @YA04053*/
*       IF $REMSW=OFF THEN                                         0335
         TM    $REMSW(WAPTR),B'01000000'                           0335
         BNZ   @RF00335                                            0335
*         CDSSYMBN(INDX2+1:INDX2+IPLEN)=FRADR;                     0336
         SLR   @12,@12                                             0336
         IC    @12,INDX2                                           0336
         L     @10,CDSWKPTR                                        0336
         ALR   @10,@12                                             0336
         BCTR  @15,0                                               0336
         L     @12,FRADRPTR                                        0336
         EX    @15,@SM00973                                        0336
*       ELSE                                                       0337
*         CDSEXARA(INDX2+1:INDX2+IPLEN)=FRADR;/* MOVE IN EBCDIC      */
         B     @RC00335                                            0337
@RF00335 SLR   @15,@15                                             0337
         IC    @15,INDX2                                           0337
         L     @12,CDSWKPTR                                        0337
         ALR   @12,@15                                             0337
         SLR   @15,@15                                             0337
         IC    @15,IPLEN                                           0337
         BCTR  @15,0                                               0337
         L     @10,FRADRPTR                                        0337
         EX    @15,@SM00975                                        0337
*     END;                                                         0338
*   ELSE                                                           0339
*     DO;                                                          0339
         B     @RC00330                                            0339
@RF00330 DS    0H                                                  0340
*       GEN(BAL  LINKR,I00ACONV);   /* GO CONVERT DATA TO HEX        */
         BAL  LINKR,I00ACONV
*       IF R15^=ZERO THEN           /* FI IT DID NOT CONV OK THEN    */
         SLR   @12,@12                                             0341
         IC    @12,ZERO                                            0341
         CR    R15,@12                                             0341
         BNE   @RT00341                                            0341
*         GOTO I00AC0AC;            /* WE MUST HAVE INV I/P          */
*       I=IPLEN/2;                  /* DIVIDE INPUT LENGTH IN HALF   */
         SLR   @15,@15                                             0343
         IC    @15,IPLEN                                           0343
         LR    @12,@15                                             0343
         SRL   @12,1                                               0343
         STC   @12,I                                               0343
*       R=IPLEN//2;                 /* GET REMAINDER                 */
         LR    @00,@15                                             0344
         SRDA  @00,32                                              0344
         D     @00,@CF00140                                        0344
         STC   @00,R                                               0344
*       IF R^=ZERO THEN             /* IF THERE WAS A REMAINDER      */
         CLC   R(1),ZERO                                           0345
         BNE   @RT00345                                            0345
*         GOTO I00AC0AC;            /* THEN ITS INVALID ENTRY        */
*       IPLEN=I;                    /* SET UP NEW INPUT LENGTH       */
         MVC   IPLEN(1),I                                          0347
*       IF(DB#+IPLEN)>255 THEN      /* IF 255 LIMIT EXCEEDED @YA04053*/
         SLR   @15,@15                                             0348
         IC    @15,IPLEN                                           0348
         LH    @12,DB#                                             0348
         N     @12,@CF00965                                        0348
         ALR   @12,@15                                             0348
         C     @12,@CF00919                                        0348
         BH    @RT00348                                            0348
*         GOTO I00AC0AC;            /* CDS LIMIT THEN BR-INVALID     */
*       IF $REMSW=OFF               /* IF LOCAL                      */
*         THEN                      /* THEN                          */
         TM    $REMSW(WAPTR),B'01000000'                           0350
         BNZ   @RF00350                                            0350
*         CDSSYMBN(INDX2+1:INDX2+IPLEN)=TOADR;                     0351
         SLR   @12,@12                                             0351
         IC    @12,INDX2                                           0351
         L     @10,CDSWKPTR                                        0351
         ALR   @10,@12                                             0351
         BCTR  @15,0                                               0351
         L     @12,TOADRPTR                                        0351
         EX    @15,@SM00977                                        0351
*       ELSE                                                       0352
*         CDSEXARA(INDX2+1:INDX2+IPLEN)=TOADR;/* MIVE IN DATA BYTE   */
         B     @RC00350                                            0352
@RF00350 SLR   @15,@15                                             0352
         IC    @15,INDX2                                           0352
         L     @12,CDSWKPTR                                        0352
         ALR   @12,@15                                             0352
         SLR   @15,@15                                             0352
         IC    @15,IPLEN                                           0352
         BCTR  @15,0                                               0352
         L     @10,TOADRPTR                                        0352
         EX    @15,@SM00979                                        0352
*     END;                                                         0353
@RC00350 DS    0H                                                  0354
*I00AC0AB:                                                         0354
*   IF DBCOUNT<DB#+IPLEN            /* IF THE LAST DATA COUNT IS   0354
*                                                            @YA04053*/
*     THEN                          /* LESS THAN THE PRESENT ONE     */
@RC00330 DS    0H                                                  0354
I00AC0AB LH    @15,DB#                                             0354
         N     @15,@CF00965                                        0354
         SLR   @12,@12                                             0354
         IC    @12,IPLEN                                           0354
         ALR   @15,@12                                             0354
         SLR   @12,@12                                             0354
         IC    @12,DBCOUNT                                         0354
         CR    @15,@12                                             0354
         BNH   @RF00354                                            0354
*     DO;                           /* THEN UPDATE THAT COUNT BY     */
*       DBCOUNT=DB#+IPLEN;          /* ADDING THE DB # TO THE I/P  0356
*                                                            @YA04053*/
         STC   @15,DBCOUNT                                         0356
*     END;                          /* LENGTH                        */
*   IF CONTSCAN='0'B THEN                                          0358
@RF00354 L     @15,I00ACWK                                         0358
         TM    CONTSCAN(@15),B'10000000'                           0358
         BZ    @RT00358                                            0358
*     GOTO I00AC02;                                                0359
*   CONTSCAN='0'B;                                                 0360
         NI    CONTSCAN(@15),B'01111111'                           0360
*   GOTO I00AC03A;                                                 0361
         B     I00AC03A                                            0361
*I00AC0AC:                                                         0362
*                                                                  0362
*   /*****************************************************************/
*   /*                                                               */
*   /* TCEC MSGN(581)MSGMSK('01000000'X) INVOKED                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0362
*   $TCECM='1'B;                    /* SET TCEC SW IN RCA            */
I00AC0AC OI    $TCECM(WAPTR),B'00000001'                           0362
*   R1=ADDR($TCA23);                /* SET UP PARM LIST $TR          */
         LA    R1,$TCA23                                           0363
*   CALL S20CEC03;                  /* CALL TCEC-MULTIPLE LN         */
         L     @15,@CV00781                                        0364
         BALR  @14,@15                                             0364
*   DCL                                                            0365
*     1 $TCA23,                     /* TCEC PARM LIST                */
*      2 $TCB23 FIXED(32) INIT(581),/* MSG NUMBER                    */
*      2 $TCC23 FIXED(32) INIT(0),  /* INCT LEN                      */
*      2 $TCD23 BIT(8) INIT('00000000'B),/* FLAG                     */
*      2 $TCE23 CHAR(4) INIT('01000000'X);/* MSSAGE MASK INVALID DATA
*                                      FLD                           */
*   GOTO I00AC01;                   /* GO GET ENTIRE LAST LINE       */
         B     I00AC01                                             0366
*I00AC0B:                                                          0367
*   IF $INBUFR(INDX1+1:INDX1+LENGTH(ENDATA))=ENDATA THEN           0367
I00AC0B  LH    @15,INDX1                                           0367
         N     @15,@CF00965                                        0367
         ALR   @15,WAPTR                                           0367
         CLC   $INBUFR(3,@15),ENDATA                               0367
         BE    @RT00367                                            0367
*     GOTO I00ACRET;                /* IF EOD THEN RETURN TO CALL    */
*                                                                  0368
*   /*****************************************************************/
*   /*                                                               */
*   /* TCEC MSGN(581)MSGMSK('00800000'X) INVOKED                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0369
*   $TCECM='1'B;                    /* SET TCEC SW IN RCA            */
         OI    $TCECM(WAPTR),B'00000001'                           0369
*   R1=ADDR($TCA24);                /* SET UP PARM LIST $TR          */
         LA    R1,$TCA24                                           0370
*   CALL S20CEC03;                  /* CALL TCEC-MULTIPLE LN         */
         L     @15,@CV00781                                        0371
         BALR  @14,@15                                             0371
*   DCL                                                            0372
*     1 $TCA24,                     /* TCEC PARM LIST                */
*      2 $TCB24 FIXED(32) INIT(581),/* MSG NUMBER                    */
*      2 $TCC24 FIXED(32) INIT(0),  /* INCT LEN                      */
*      2 $TCD24 BIT(8) INIT('00000000'B),/* FLAG                     */
*      2 $TCE24 CHAR(4) INIT('00800000'X);/* MSSAGE MASK INVALID PARM*/
*   GOTO I00AC01;                   /* RE-ENTER LAST LINE            */
         B     I00AC01                                             0373
*I00ACRET:                                                         0374
*   IF DATASW='1'B                  /* IF THE DATA SW IS ON          */
*     THEN                          /* THEN DO THE FOLLOWING         */
I00ACRET L     @15,I00ACWK                                         0374
         TM    DATASW(@15),B'00000001'                             0374
         BNO   @RF00374                                            0374
*     DO;                                                          0375
*       DATASW='0'B;                /* TURN OF DATA SW               */
         NI    DATASW(@15),B'11111110'                             0376
*       IF $CHANGE^='1'B            /* IF THIS IS NOT A CHANGE       */
*         THEN                      /* THEN DO THE FOLLOWING         */
         TM    $CHANGE(WAPTR),B'00100000'                          0377
         BO    @RF00377                                            0377
*         DO;                                                      0378
*           CDSBYTCT=DBCOUNT;       /* SET UP NEW BYTE COUNT         */
         IC    @15,DBCOUNT                                         0379
         L     @12,CDSWKPTR                                        0379
         STC   @15,CDSBYTCT(,@12)                                  0379
*         END;                                                     0380
*       ELSE                        /* IF IT IS A CHANGE REQ         */
*         DO;                       /* THEN DO THE FOLLOWING         */
         B     @RC00377                                            0381
@RF00377 DS    0H                                                  0382
*           IF CDSBYTCT<DBCOUNT     /* IF ORIG COUNT IS LESS         */
*             THEN                  /* THEN DO THE FOLLOWING         */
         L     @15,CDSWKPTR                                        0382
         CLC   CDSBYTCT(1,@15),DBCOUNT                             0382
         BNL   @RF00382                                            0382
*             DO;                                                  0383
*               CDSBYTCT=DBCOUNT;   /* SET UP NEW BYTE COUNT         */
         IC    @12,DBCOUNT                                         0384
         STC   @12,CDSBYTCT(,@15)                                  0384
*             END;                                                 0385
*         END;                                                     0386
*     END;                                                         0387
*   ELSE                            /* IF THE DATA SW WAS OFF        */
*     DO;                           /* DO THE FOLLOWING              */
         B     @RC00374                                            0388
@RF00374 DS    0H                                                  0389
*       IF $CHANGE^='1'B&$COPY^='1'B/* IF NOT CHNG OR COPY           */
*         THEN                      /* THEN DO THE FOLLOWING         */
         TM    $CHANGE(WAPTR),B'00100000'                          0389
         BO    @RF00389                                            0389
         TM    $COPY(WAPTR),B'00001000'                            0389
         BO    @RF00389                                            0389
*         DO;                                                      0390
*           CDSBYTCT=20;            /* SET MINIMUM BYTE COUNT        */
         L     @15,CDSWKPTR                                        0391
         MVI   CDSBYTCT(@15),X'14'                                 0391
*         END;                                                     0392
*     END;                                                         0393
*   RETURN;                         /* RETURN TO CALLER              */
         B     @EL00001                                            0394
*   GEN(EJECT);                                                    0395
*                                                                  0395
         EJECT
*/********************************************************************/
*/*  THIS ROUTINE DETERMINES THE LENGTH OF THE ACTUAL INPUT WHICH    */
*/*  IS TO BE PLACED IN THE CDS. IT USES THE EQUAL (=) SIGN AS IT    */
*/*  STARTING DELIMETER AND EITHER A BLANK OR A COMMA AS ITS ENDING  */
*/*  DELIMETER                                                       */
*/********************************************************************/
*                                                                  0396
*I00ACLEN:                                                         0396
*   RETSAV1=LINKR;                  /* SAVE RET ADR PTR              */
I00ACLEN ST    LINKR,RETSAV1                                       0396
*   EBCDICSW=OFF;                   /* RESET EBCDIC INPUT FLAG       */
         L     @15,I00ACWK                                         0397
         NI    EBCDICSW(@15),B'11111011'                           0397
*   ERROR=OFF;                      /* RESET ERROR FLAG              */
         NI    ERROR(@15),B'01111111'                              0398
*   IPLEN='0'X;                     /* ZERO OUT INPUT LEN FLD        */
         MVI   IPLEN,X'00'                                         0399
*   IF DBSW='1'B THEN               /* IF THIS IS A DATA REQ         */
         TM    DBSW(@15),B'00000010'                               0400
         BO    @RT00400                                            0400
*     GOTO I00ACL02;                /* THEN BR AND HANDLE            */
*   DO WHILE($INBUFR(INDX1+1:INDX1+1)^=EQSIGN);                    0402
         B     @DE00402                                            0402
@DL00402 DS    0H                                                  0403
*     INDX1=INDX1+1;                /* UPDATE INDEX PTR              */
         LH    @15,INDX1                                           0403
         LA    @15,1(,@15)                                         0403
         STH   @15,INDX1                                           0403
*   END;                                                           0404
@DE00402 LH    @15,INDX1                                           0404
         N     @15,@CF00965                                        0404
         ALR   @15,WAPTR                                           0404
         CLC   $INBUFR(1,@15),EQSIGN                               0404
         BNE   @DL00402                                            0404
*   INDX1=INDX1+1;                  /* GET PAST EQ SIGN              */
         LH    @15,INDX1                                           0405
         N     @15,@CF00965                                        0405
         LA    @15,1(,@15)                                         0405
         STH   @15,INDX1                                           0405
*I00ACL01:                                                         0406
*   FRADRPTR=ADDR($INBUFR)+INDX1;   /* SET UP FROM ADDR FOR ITACONV  */
I00ACL01 LA    @15,$INBUFR(,WAPTR)                                 0406
         LH    @12,INDX1                                           0406
         N     @12,@CF00965                                        0406
         ALR   @15,@12                                             0406
         ST    @15,FRADRPTR                                        0406
*   DO WHILE(($INBUFR(INDX1+1:INDX1+1)^=BLANK)&($INBUFR(INDX1+1:INDX1+1
*         )^=COMMA)&($INBUFR(INDX1+1:INDX1+1)^='00'X));            0407
         B     @DE00407                                            0407
@DL00407 DS    0H                                                  0408
*     INDX1=INDX1+1;                /* UPDATE INDEX PTR              */
         LA    @15,1                                               0408
         LH    @12,INDX1                                           0408
         N     @12,@CF00965                                        0408
         ALR   @12,@15                                             0408
         STH   @12,INDX1                                           0408
*     IPLEN=IPLEN+1;                /* ADD ONE TO I/P LENGTH CTR     */
         SLR   @12,@12                                             0409
         IC    @12,IPLEN                                           0409
         ALR   @15,@12                                             0409
         STC   @15,IPLEN                                           0409
*   END;                                                           0410
@DE00407 LH    @15,INDX1                                           0410
         N     @15,@CF00965                                        0410
         ALR   @15,WAPTR                                           0410
         CLC   $INBUFR(1,@15),BLANK                                0410
         BE    @DC00407                                            0410
         LH    @15,INDX1                                           0410
         N     @15,@CF00965                                        0410
         ALR   @15,WAPTR                                           0410
         CLC   $INBUFR(1,@15),COMMA                                0410
         BE    @DC00407                                            0410
         LH    @15,INDX1                                           0410
         N     @15,@CF00965                                        0410
         ALR   @15,WAPTR                                           0410
         CLI   $INBUFR(@15),X'00'                                  0410
         BNE   @DL00407                                            0410
@DC00407 DS    0H                                                  0411
*   GOTO I00ACL03;                  /* BR AROUND                     */
         B     I00ACL03                                            0411
*I00ACL02:                                                         0412
*   DBSW='0'B;                      /* RESET DATA BYTE SW            */
I00ACL02 L     @15,I00ACWK                                         0412
         NI    DBSW(@15),B'11111101'                               0412
*   INDX1=INDX1+2;                  /* GET PAST 'DB'                 */
         LH    @15,INDX1                                           0413
         N     @15,@CF00965                                        0413
         LA    @15,2(,@15)                                         0413
         STH   @15,INDX1                                           0413
*   DB#='0000'X;                    /* ZERO OUT DATA BYTE NUMBER     */
         SLR   @12,@12                                             0414
         STH   @12,DB#                                             0414
*   DB#LEN='0'X;                    /* ZERO OUT DATA BYTE # LEN      */
         MVI   DB#LEN,X'00'                                        0415
*   FRADRPTR=ADDR($INBUFR)+INDX1;   /* SET UP FROM ADDR FOR ITACONV  */
         LA    @12,$INBUFR(,WAPTR)                                 0416
         ALR   @12,@15                                             0416
         ST    @12,FRADRPTR                                        0416
*   INPTR=FRADRPTR;                 /* POINT TO DISPLACEMNT          */
         ST    @12,INPTR                                           0417
*   DO WHILE($INBUFR(INDX1+1:INDX1+1)^=EQSIGN);                    0418
         B     @DE00418                                            0418
@DL00418 DS    0H                                                  0419
*     INDX1=INDX1+1;                /* UPDATE INDEX PTR              */
         LA    @15,1                                               0419
         LH    @12,INDX1                                           0419
         N     @12,@CF00965                                        0419
         ALR   @12,@15                                             0419
         STH   @12,INDX1                                           0419
*     DB#LEN=DB#LEN+1;              /* ADD ONE TO DATA BYTE # LEN    */
         SLR   @12,@12                                             0420
         IC    @12,DB#LEN                                          0420
         ALR   @15,@12                                             0420
         STC   @15,DB#LEN                                          0420
*   END;                                                           0421
@DE00418 LH    @15,INDX1                                           0421
         N     @15,@CF00965                                        0421
         ALR   @15,WAPTR                                           0421
         CLC   $INBUFR(1,@15),EQSIGN                               0421
         BNE   @DL00418                                            0421
*   DO INPTR=INPTR TO FRADRPTR+DB#LEN-1;/* LOOK AT DISPLACEMNT       */
         L     @15,INPTR                                           0422
         B     @DE00422                                            0422
@DL00422 DS    0H                                                  0423
*     IF INPUT(1:4)^='1111'B        /* IF INPUT NOT NUMBERS          */
*       THEN                        /* THEN                          */
         TM    INPUT(@15),B'11110000'                              0423
         BO    @RF00423                                            0423
*       DO;                                                        0424
*         ERROR=ON;                 /* ERROR FLAG SET                */
         L     @15,I00ACWK                                         0425
         OI    ERROR(@15),B'10000000'                              0425
*         GOTO I00ACL04;            /* RETURN                        */
         B     I00ACL04                                            0426
*       END;                                                       0427
*   END;                                                           0428
@RF00423 LA    @15,1                                               0428
         AL    @15,INPTR                                           0428
         ST    @15,INPTR                                           0428
@DE00422 SLR   @12,@12                                             0428
         IC    @12,DB#LEN                                          0428
         AL    @12,FRADRPTR                                        0428
         BCTR  @12,0                                               0428
         CR    @15,@12                                             0428
         BNH   @DL00422                                            0428
*   IF DB#LEN=2                     /* IF DB# IS 20 TO 99            */
*     THEN                                                         0429
         CLI   DB#LEN,2                                            0429
         BNE   @RF00429                                            0429
*     DO;                                                          0430
*       PACK(PKTO(1:2),FRADR(1:2)); /* PACK DB NUMBER                */
         L     @15,FRADRPTR                                        0431
         PACK  PKTO(2),FRADR(2,@15)                                0431
*     END;                                                         0432
*   ELSE                            /* IF DB# IS 100-255 THEN DO     */
*     DO;                                                          0433
         B     @RC00429                                            0433
@RF00429 DS    0H                                                  0434
*       PACK(PKTO(1:2),FRADR(1:3)); /* PACK 3-BYTE ENTRY             */
         L     @15,FRADRPTR                                        0434
         PACK  PKTO(2),FRADR(3,@15)                                0434
*     END;                                                         0435
*   CVB(DB#,PKTO(1:2));             /* CONVERT DB# TO BINARY         */
@RC00429 XC    @TS00001(8),@TS00001                                0436
         MVC   @TS00001+6(2),PKTO                                  0436
         CVB   @15,@TS00001                                        0436
         STH   @15,DB#                                             0436
*   INDX1=INDX1+1;                  /* GET PAST EQUAL SIGN           */
         LH    @15,INDX1                                           0437
         N     @15,@CF00965                                        0437
         LA    @15,1(,@15)                                         0437
         STH   @15,INDX1                                           0437
*   IF $INBUFR(INDX1+1:INDX1+LENGTH(EBCDICEN))^=EBCDICEN THEN      0438
         ALR   @15,WAPTR                                           0438
         CLC   $INBUFR(2,@15),EBCDICEN                             0438
         BNE   @RT00438                                            0438
*     GOTO I00ACL01;                /* IF NOT EBCDIC THEN BR         */
*   EBCDICSW='1'B;                  /* TURN ON EBCDIC SW             */
         L     @15,I00ACWK                                         0440
         OI    EBCDICSW(@15),B'00000100'                           0440
*   INDX1=INDX1+2;                  /* GET TO FIRST EBCDIC CHAR      */
         LH    @15,INDX1                                           0441
         N     @15,@CF00965                                        0441
         LA    @15,2(,@15)                                         0441
         STH   @15,INDX1                                           0441
*   FRADRPTR=ADDR($INBUFR)+INDX1;   /* GET STARTING ADDR OF EBCDIC   */
         LA    @12,$INBUFR(,WAPTR)                                 0442
         ALR   @12,@15                                             0442
         ST    @12,FRADRPTR                                        0442
*   DO WHILE($INBUFR(INDX1+1:INDX1+1)^=SINSLASH);                  0443
         B     @DE00443                                            0443
@DL00443 DS    0H                                                  0444
*     INDX1=INDX1+1;                /* UPDATE INDEX PTR              */
         LA    @15,1                                               0444
         LH    @12,INDX1                                           0444
         N     @12,@CF00965                                        0444
         ALR   @12,@15                                             0444
         STH   @12,INDX1                                           0444
*     IPLEN=IPLEN+1;                /* ADD ONE TO I/P LENGTH CTR     */
         SLR   @12,@12                                             0445
         IC    @12,IPLEN                                           0445
         ALR   @15,@12                                             0445
         STC   @15,IPLEN                                           0445
*   END;                                                           0446
@DE00443 LH    @15,INDX1                                           0446
         N     @15,@CF00965                                        0446
         ALR   @15,WAPTR                                           0446
         CLC   $INBUFR(1,@15),SINSLASH                             0446
         BNE   @DL00443                                            0446
*   INDX1=INDX1+1;                  /* GET PAST SINGLE SLASH         */
         LH    @15,INDX1                                           0447
         N     @15,@CF00965                                        0447
         LA    @15,1(,@15)                                         0447
         STH   @15,INDX1                                           0447
*   GOTO I00ACL03;                                                 0448
         B     I00ACL03                                            0448
*I00ACL03:                                                         0449
*   IF $INBUFR(INDX1+1:INDX1+1)=COMMA THEN                         0449
I00ACL03 LH    @15,INDX1                                           0449
         N     @15,@CF00965                                        0449
         ALR   @15,WAPTR                                           0449
         CLC   $INBUFR(1,@15),COMMA                                0449
         BNE   @RF00449                                            0449
*     DO;                                                          0450
*       INDX1=INDX1+1;              /* UPDATE INDEX PTR              */
         LH    @15,INDX1                                           0451
         N     @15,@CF00965                                        0451
         LA    @15,1(,@15)                                         0451
         STH   @15,INDX1                                           0451
*       CONTSCAN='1'B;              /* SET THE CONTINUE SCAN SW      */
         L     @15,I00ACWK                                         0452
         OI    CONTSCAN(@15),B'10000000'                           0452
*     END;                                                         0453
*I00ACL04:                                                         0454
*   LINKR=RETSAV1;                  /* GET RET ADDR                  */
@RF00449 DS    0H                                                  0454
I00ACL04 L     LINKR,RETSAV1                                       0454
*   GEN(BR LINKR);                  /* RETURN TO CALLER              */
         BR LINKR
*   GEN(EJECT);                                                    0456
*                                                                  0456
         EJECT
*/********************************************************************/
*/*                  C O N V E R T  R O U T I N E                    */
*/********************************************************************/
*                                                                  0457
*I00ACONV:                                                         0457
*   RETSAV1=LINKR;                  /* SAVE RETURN ADDR              */
*                                                                  0457
I00ACONV ST    LINKR,RETSAV1                                       0457
*   /*****************************************************************/
*   /*                                                               */
*   /* ITACONV FROM(FRADR)TO(TOADR)COUNT(IPLEN)TYPE(EH) INVOKED      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0458
*   DCL                                                            0458
*     1 ITATCPRM BDY(WORD),         /* CONVERT PARAMETER LIST        */
*      2 * CHAR(4) INIT('0102F4F1'X),                              0458
*      2 ITATCFR PTR,               /* ADDRESS OF FROM FIELD         */
*      2 ITATCTO PTR,               /* ADDRESS OF TO FIELD           */
*      2 * BIT(8) INIT(0),          /* FLAGS FOR CONVERT MODULE      */
*       3 ITATCTP BIT(1),           /* TYPE OF CONVERT REQUIRED      */
*      2 ITATCNT FIXED(8);          /* NUMBER OF BYTES TO CONVERT    */
*   ITATCFR=ADDR(FRADR);            /* SET THE FROM ADDRESS          */
         L     @15,FRADRPTR                                        0459
         ST    @15,ITATCFR                                         0459
*   ITATCTO=ADDR(TOADR);            /* SET THE TO ADDRESS            */
         L     @15,TOADRPTR                                        0460
         ST    @15,ITATCTO                                         0460
*   ITATCTP='0'B;                   /* SET THE TYPE OF CONVERT BIT   */
         NI    ITATCTP,B'01111111'                                 0461
*   ITATCNT=IPLEN;                  /* GIVE THE CONVERT BYTE COUNT   */
         IC    @15,IPLEN                                           0462
         STC   @15,ITATCNT                                         0462
*   R1=ADDR(ITATCPRM);              /* POINT TO CONVERT PARM LIST    */
         LA    R1,ITATCPRM                                         0463
*   CALL ISTSC021;                  /* CALL CONVERT DIRECTLY         */
         L     @15,@CV00961                                        0464
         BALR  @14,@15                                             0464
*   LINKR=RETSAV1;                  /* GET RETURN ADDR               */
         L     LINKR,RETSAV1                                       0465
*   GEN(BR LINKR);                  /* RETURN TO CALLER              */
         BR LINKR
*   DO;                             /* ATDSPLY                       */
*   END;                            /* ATDSPLY                       */
*   END ISTIC00A;                                                  0469
         B     @EL00001                                            0469
@DATA    DS    0H
@SM00970 MVC   CDSSYMBN(0,@15),FRADR(@10)
@SM00973 MVC   CDSSYMBN(0,@10),FRADR(@12)
@SM00975 MVC   CDSEXARA(0,@12),FRADR(@10)
@SM00977 MVC   CDSSYMBN(0,@10),TOADR(@12)
@SM00979 MVC   CDSEXARA(0,@12),TOADR(@10)
         DS    0F
@SA00001 DS    18F
         DS    0F
@CF00140 DC    F'2'
@CF00137 DC    F'12'
@CF00379 DC    F'20'
@CF00050 DC    F'80'
@CF00919 DC    F'255'
@CF00084 DC    F'256'
@CF00965 DC    XL4'0000FFFF'
@CV00781 DC    V(S20CEC03)
@CV00896 DC    V(ISTSC030)
@CV00961 DC    V(ISTSC021)
         DS    0D
RCAPTR   DS    A
CECMAP   DS    A
CDSWKPTR DS    A
FRADRPTR DS    A
TOADRPTR DS    A
INPTR    DS    A
I00ACWK  DS    A
DB#      DC    XL2'0000'
INDX1    DS    H
INDX2    DC    XL1'00'
MLNGTH   DC    XL1'2'
FLNGTH   DC    XL1'2'
CLNGTH   DC    XL1'2'
TLNGTH   DC    XL1'2'
FLGLNGTH DC    XL1'6'
UALNGTH  DC    XL1'4'
SNLNGTH  DC    XL1'8'
DBLNGTH  DC    XL1'EB'
         DS    0D
@TS00001 DS    CL8
@CC00907 DC    C'        '
BLANK    DC    CL1' '
HWONE    DC    X'0001'
ZERO     DC    X'00'
I        DC    X'00'
R        DC    X'00'
         DS    CL2
RETSAV1  DS    CL4
PROMPT   DC    CL1'P'
EQSIGN   DC    CL1'='
COMMA    DC    CL1','
MODEL    DC    CL2'M='
FEAT     DC    CL2'F='
CLASS    DC    CL2'C='
TYPE     DC    CL2'T='
FLAGS    DC    CL3'FL='
UADR     DC    CL3'UA='
SYMNME   DC    CL3'SN='
DB       DC    CL2'DB'
CDSWORK  DS    CL20
DB#LEN   DS    CL1
DBCOUNT  DC    X'00'
EBCDICEN DC    CL2'E/'
ENDATA   DC    CL3'END'
IPLEN    DS    CL1
PKTO     DS    CL2
SINSLASH DC    CL1'/'
         DS    CL3
VERYTBL  DS    CL5
         ORG   VERYTBL
CDSPTR   DS    AL4
@NM00053 DC    X'00'
         ORG   VERYTBL+5
         DS    CL3
$TCA09   DS    CL13
         ORG   $TCA09
$TCB09   DC    A(580)
$TCC09   DC    A(61)
$TCD09   DC    B'01000000'
$TCE09   DC    X'80000000'
         ORG   $TCA09+13
         DS    CL3
$TCA10   DS    CL13
         ORG   $TCA10
$TCB10   DC    A(580)
$TCC10   DC    A(0)
$TCD10   DC    B'00000000'
$TCE10   DC    X'3FDFFC00'
         ORG   $TCA10+13
         DS    CL3
$TCA11   DS    CL13
         ORG   $TCA11
$TCB11   DC    A(580)
$TCC11   DC    A(0)
$TCD11   DC    B'00000000'
$TCE11   DC    X'3FBFFC00'
         ORG   $TCA11+13
         DS    CL3
$TCA12   DS    CL13
         ORG   $TCA12
$TCB12   DC    A(582)
$TCC12   DC    A(61)
$TCD12   DC    B'01000000'
$TCE12   DC    X'80000000'
         ORG   $TCA12+13
         DS    CL3
$TCA13   DS    CL13
         ORG   $TCA13
$TCB13   DC    A(581)
$TCC13   DC    A(0)
$TCD13   DC    B'00000000'
$TCE13   DC    X'02000000'
         ORG   $TCA13+13
         DS    CL3
$TCA14   DS    CL13
         ORG   $TCA14
$TCB14   DC    A(581)
$TCC14   DC    A(0)
$TCD14   DC    B'00000000'
$TCE14   DC    X'04000000'
         ORG   $TCA14+13
         DS    CL3
$TCA15   DS    CL13
         ORG   $TCA15
$TCB15   DC    A(580)
$TCC15   DC    A(61)
$TCD15   DC    B'01000000'
$TCE15   DC    X'40000000'
         ORG   $TCA15+13
         DS    CL3
$TCA16   DS    CL13
         ORG   $TCA16
$TCB16   DC    A(581)
$TCC16   DC    A(0)
$TCD16   DC    B'00000000'
$TCE16   DC    X'80000000'
         ORG   $TCA16+13
         DS    CL3
$TCA17   DS    CL13
         ORG   $TCA17
$TCB17   DC    A(581)
$TCC17   DC    A(0)
$TCD17   DC    B'00000000'
$TCE17   DC    X'40000000'
         ORG   $TCA17+13
         DS    CL3
$TCA18   DS    CL13
         ORG   $TCA18
$TCB18   DC    A(581)
$TCC18   DC    A(0)
$TCD18   DC    B'00000000'
$TCE18   DC    X'20000000'
         ORG   $TCA18+13
         DS    CL3
$TCA19   DS    CL13
         ORG   $TCA19
$TCB19   DC    A(581)
$TCC19   DC    A(0)
$TCD19   DC    B'00000000'
$TCE19   DC    X'10000000'
         ORG   $TCA19+13
         DS    CL3
$TCA20   DS    CL13
         ORG   $TCA20
$TCB20   DC    A(581)
$TCC20   DC    A(0)
$TCD20   DC    B'00000000'
$TCE20   DC    X'08000000'
         ORG   $TCA20+13
         DS    CL3
$TCA21   DS    CL13
         ORG   $TCA21
$TCB21   DC    A(581)
$TCC21   DC    A(0)
$TCD21   DC    B'00000000'
$TCE21   DC    X'04000000'
         ORG   $TCA21+13
         DS    CL3
$TCA22   DS    CL13
         ORG   $TCA22
$TCB22   DC    A(581)
$TCC22   DC    A(0)
$TCD22   DC    B'00000000'
$TCE22   DC    X'02000000'
         ORG   $TCA22+13
         DS    CL3
$TCA23   DS    CL13
         ORG   $TCA23
$TCB23   DC    A(581)
$TCC23   DC    A(0)
$TCD23   DC    B'00000000'
$TCE23   DC    X'01000000'
         ORG   $TCA23+13
         DS    CL3
$TCA24   DS    CL13
         ORG   $TCA24
$TCB24   DC    A(581)
$TCC24   DC    A(0)
$TCD24   DC    B'00000000'
$TCE24   DC    X'00800000'
         ORG   $TCA24+13
         DS    CL3
ITATCPRM DS    CL14
         ORG   ITATCPRM
@NM00057 DC    X'0102F4F1'
ITATCFR  DS    AL4
ITATCTO  DS    AL4
@NM00058 DC    AL1(0)
         ORG   @NM00058
ITATCTP  DS    BL1
         ORG   ITATCPRM+13
ITATCNT  DS    FL1
         ORG   ITATCPRM+14
         DS    CL2
PATCH    DC    40F'0'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
WAPTR    EQU   @02
R1       EQU   @01
R15      EQU   @15
LINKR    EQU   @14
R0       EQU   @00
R10      EQU   @10
R11      EQU   @11
R12      EQU   @12
R13      EQU   @13
R14      EQU   @14
R2       EQU   @02
R3       EQU   @03
R4       EQU   @04
R5       EQU   @05
R6       EQU   @06
R7       EQU   @07
R8       EQU   @08
R9       EQU   @09
$RCAAREA EQU   0
$POINTER EQU   $RCAAREA+100
$TRTBLA  EQU   $POINTER+124
$CONSTNT EQU   $RCAAREA+244
$RCAFLG  EQU   $RCAAREA+604
TOLTEPWA EQU   0
$SCTTBLE EQU   TOLTEPWA
$TESTOPT EQU   $SCTTBLE+2
$ERROPT  EQU   $SCTTBLE+3
$PDEVFLG EQU   $SCTTBLE+10
$CDSFLGS EQU   $SCTTBLE+11
$CDS8T19 EQU   $SCTTBLE+20
$EXECFLG EQU   $SCTTBLE+33
$OLTFLGS EQU   $SCTTBLE+36
$OLTFLG2 EQU   $SCTTBLE+37
$TOTFLG1 EQU   $SCTTBLE+38
$ROUTMSK EQU   $SCTTBLE+40
$CDA     EQU   TOLTEPWA+100
$RCA     EQU   $CDA+44
$OLTPTR  EQU   $CDA+52
$LOWADDR EQU   $OLTPTR
$HIMOREC EQU   $CDA+60
$COMMFLG EQU   TOLTEPWA+224
$FLAG1   EQU   $COMMFLG
$FLAG2   EQU   $COMMFLG+1
$FLAG3   EQU   $COMMFLG+2
$FLAG4   EQU   $COMMFLG+3
$FLAG5   EQU   $COMMFLG+4
$EOJ     EQU   $FLAG5
$CANCEL  EQU   $EOJ
$FLAG6   EQU   $COMMFLG+5
$CHANGE  EQU   $FLAG6
$ABNDBIT EQU   $FLAG6
$FLAG7   EQU   $COMMFLG+6
$FLAG8   EQU   $COMMFLG+7
$TCECM   EQU   $FLAG8
$FLAG9   EQU   $COMMFLG+8
$REMSW   EQU   $FLAG9
$COPY    EQU   $FLAG9
$FLAG10  EQU   $COMMFLG+9
$FLAG11  EQU   $COMMFLG+10
$FLAG12  EQU   $COMMFLG+11
$FLAG13  EQU   $COMMFLG+12
$DEVTBLE EQU   TOLTEPWA+240
$DEVCDS  EQU   $DEVTBLE
$DEVUNAD EQU   $DEVCDS
@NM00039 EQU   $DEVUNAD+2
$DEVFEAT EQU   $DEVCDS+4
$DEVCDSF EQU   $DEVCDS+9
$DEVSDCF EQU   $DEVCDS+10
$$SYMNME EQU   $DEVCDS+12
$DEVFLG1 EQU   $DEVTBLE+20
$EVNCPLT EQU   $DEVFLG1
$ATTNEXP EQU   $DEVFLG1
$INTOCC  EQU   $DEVFLG1
$DEVFLG2 EQU   $DEVTBLE+21
$DEVTECB EQU   $DEVTBLE+22
$OPIS    EQU   $DEVTECB
$OPND    EQU   $DEVTECB+2
$DEVFLG3 EQU   $DEVTBLE+27
$SIOFLG  EQU   $DEVFLG3
$IFTOUT  EQU   $DEVTBLE+36
$DEVSESP EQU   $IFTOUT
$SSCPDAF EQU   $IFTOUT+6
$LDNCBPT EQU   $DEVTBLE+48
$RNINFO  EQU   $DEVTBLE+56
$DEVFLG5 EQU   $RNINFO+8
$DEVFLG4 EQU   $DEVTBLE+65
$SLTBL   EQU   TOLTEPWA+1468
$RUNTEST EQU   $SLTBL+13
$TESTFLG EQU   $SLTBL+21
$SECLST  EQU   $SLTBL+22
$INBUFR  EQU   TOLTEPWA+2104
#EXITA   EQU   TOLTEPWA+2632
$CCOMDAT EQU   TOLTEPWA+2644
$CFLGS   EQU   $CCOMDAT+16
$24FEMSG EQU   TOLTEPWA+2681
$24CATMG EQU   $24FEMSG+11
@NM00048 EQU   TOLTEPWA+2776
$OUNTPTR EQU   @NM00048+4
$NSPTR   EQU   $OUNTPTR
$NSCNT   EQU   @NM00048+10
$ENXX    EQU   @NM00048+15
$IMITX   EQU   $ENXX
SVESC033 EQU   TOLTEPWA+3160
SVECC013 EQU   TOLTEPWA+3232
SVEIC003 EQU   TOLTEPWA+3592
SVESC022 EQU   TOLTEPWA+3736
SVECC011 EQU   TOLTEPWA+4024
CECOMMAP EQU   0
CDSMAP   EQU   0
CDSUA    EQU   CDSMAP
CDSMFCT  EQU   CDSMAP+4
CDSMODEL EQU   CDSMFCT
CDSFEAT  EQU   CDSMFCT+1
CDSCLASS EQU   CDSMFCT+2
CDSTYPE  EQU   CDSMFCT+3
CDSBYTCT EQU   CDSMAP+8
CDSFLAG  EQU   CDSMAP+9
CDSSYMBN EQU   CDSMAP+12
CDSEXARA EQU   CDSMAP+20
FRADR    EQU   0
TOADR    EQU   0
INPUT    EQU   0
@NM00054 EQU   0
I00ACSW  EQU   @NM00054
CONTSCAN EQU   I00ACSW
CLASSSW  EQU   I00ACSW
TYPESW   EQU   I00ACSW
FLAGSW   EQU   I00ACSW
UASW     EQU   I00ACSW
EBCDICSW EQU   I00ACSW
DBSW     EQU   I00ACSW
DATASW   EQU   I00ACSW
@NM00055 EQU   @NM00054+1
ERROR    EQU   @NM00055
$TRTBL   EQU   0
#EXIT    EQU   0
SVECC012 EQU   SVESC022
SVEIC00A EQU   SVEIC003
SVEIC004 EQU   SVEIC003
SVEIC005 EQU   SVEIC003
SVESC02A EQU   SVESC022
SVESC02B EQU   SVESC022
SVESC02D EQU   SVESC022
SVESC02E EQU   SVESC022
SVESC02F EQU   SVECC013
SVESC024 EQU   SVESC022
SVESC027 EQU   SVESC022
SVESC029 EQU   SVESC033
SVESC031 EQU   SVECC013
SVESC032 EQU   SVECC011
SVETC037 EQU   SVEIC003
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
@NM00056 EQU   @NM00055
CDSEXTM  EQU   CDSFLAG+2
CDSEXTB  EQU   CDSFLAG+2
CDSTMERB EQU   CDSFLAG+2
@NM00052 EQU   CDSFLAG+1
CDSDVPRO EQU   CDSFLAG+1
CDSNTPRI EQU   CDSFLAG+1
CDSLINCN EQU   CDSFLAG
CDSREMSY EQU   CDSFLAG
CDS2CHAN EQU   CDSFLAG
CDSSYMB  EQU   CDSFLAG
CDSEXTPR EQU   CDSFLAG
CDSFEVOL EQU   CDSFLAG
CDSSHAR  EQU   CDSFLAG
CDSFPMD  EQU   CDSFLAG
@NM00051 EQU   CDSFEAT
CDSDEVM  EQU   CDSFEAT
CDSDEVT  EQU   CDSFEAT
CDSASCII EQU   CDSFEAT
$CECFLAG EQU   CECOMMAP+20
$CEINCT  EQU   CECOMMAP+16
$CEINADR EQU   CECOMMAP+12
$CEOUTCT EQU   CECOMMAP+8
$CEOUTAD EQU   CECOMMAP+4
$CECIDNT EQU   CECOMMAP+2
$CECLEVL EQU   CECOMMAP+1
$CECTRMG EQU   CECOMMAP
SVECC010 EQU   TOLTEPWA+3952
SVETC035 EQU   TOLTEPWA+3880
SVESC030 EQU   TOLTEPWA+3808
SVESC020 EQU   TOLTEPWA+3664
SVEIC002 EQU   TOLTEPWA+3520
SVECC014 EQU   TOLTEPWA+3376
SVESC120 EQU   TOLTEPWA+3304
SVESC025 EQU   TOLTEPWA+3088
@NM00050 EQU   TOLTEPWA+2980
$RPLERR  EQU   TOLTEPWA+2977
@NM00049 EQU   TOLTEPWA+2976
$R13PR3  EQU   TOLTEPWA+2972
$CEINT2  EQU   TOLTEPWA+2968
$CEINT1  EQU   TOLTEPWA+2964
$MSGGET  EQU   TOLTEPWA+2960
$ACQLIST EQU   TOLTEPWA+2956
$R4SAVE1 EQU   TOLTEPWA+2952
$CLSISS  EQU   TOLTEPWA+2950
$CLSCNT  EQU   TOLTEPWA+2948
$CUTABLE EQU   TOLTEPWA+2868
$BUFSZ2  EQU   TOLTEPWA+2864
$RESID2  EQU   TOLTEPWA+2860
$OLTCCW2 EQU   TOLTEPWA+2856
$ENDBFR2 EQU   TOLTEPWA+2852
$1STBFR2 EQU   TOLTEPWA+2848
$TECB2   EQU   TOLTEPWA+2844
$BUFSZ1  EQU   TOLTEPWA+2840
$RESID1  EQU   TOLTEPWA+2836
$OLTCCW1 EQU   TOLTEPWA+2832
$ENDBFR1 EQU   TOLTEPWA+2828
$1STBFR1 EQU   TOLTEPWA+2824
$TECB1   EQU   TOLTEPWA+2820
$WAITIME EQU   TOLTEPWA+2816
$TRTN#   EQU   TOLTEPWA+2815
$WIODEV  EQU   TOLTEPWA+2814
$RQSTSZE EQU   TOLTEPWA+2812
$RQSTPTR EQU   TOLTEPWA+2808
$R4SAVE  EQU   TOLTEPWA+2804
$PARTADR EQU   TOLTEPWA+2800
$TBSDATA EQU   TOLTEPWA+2796
$CTWIDTH EQU   TOLTEPWA+2795
$CTLINE  EQU   TOLTEPWA+2794
$APWIDTH EQU   TOLTEPWA+2793
$APLINE  EQU   TOLTEPWA+2792
$INDEX   EQU   $IMITX
$UMXX    EQU   @NM00048+14
$NSXX    EQU   @NM00048+12
$ATACNT  EQU   $NSCNT
$CTR     EQU   @NM00048+8
$ATAPTR  EQU   $NSPTR
$DDRPTR  EQU   @NM00048
$DTORESP EQU   TOLTEPWA+2712
$APNAME  EQU   TOLTEPWA+2704
$24SYMNE EQU   $24CATMG+4
$24DEVAD EQU   $24CATMG
$24RTN#  EQU   $24FEMSG+8
$ESECTID EQU   $24FEMSG
$24FLGS  EQU   TOLTEPWA+2680
$24SAVE2 EQU   TOLTEPWA+2676
$24SAVE1 EQU   TOLTEPWA+2672
$24UNADR EQU   TOLTEPWA+2668
$24SAV13 EQU   TOLTEPWA+2664
$24RETCD EQU   TOLTEPWA+2663
$MACID   EQU   TOLTEPWA+2661
$CSPARE  EQU   $CFLGS
$C2WAY   EQU   $CFLGS
$CINCT   EQU   $CCOMDAT+12
$CINADR  EQU   $CCOMDAT+8
$COUTCT  EQU   $CCOMDAT+4
$COUTAD  EQU   $CCOMDAT
ROOTLOC  EQU   TOLTEPWA+2640
$RETREG  EQU   TOLTEPWA+2636
$WORK    EQU   TOLTEPWA+2376
$EXTA    EQU   TOLTEPWA+2320
$PASSONA EQU   TOLTEPWA+2264
$TRMINPT EQU   TOLTEPWA+2184
$BUFFER  EQU   TOLTEPWA+1976
$TLTRPL3 EQU   TOLTEPWA+1856
$TLTRPL2 EQU   TOLTEPWA+1736
$TLTRPL1 EQU   TOLTEPWA+1616
@NM00047 EQU   $SLTBL+135
$HIGHRTN EQU   $SLTBL+134
$PRIMADR EQU   $SLTBL+130
$CTSTPT  EQU   $SLTBL+128
$TSTCNT  EQU   $SLTBL+126
$SECFLGS EQU   $SECLST+3
$SECTION EQU   $SECLST
$SECACT  EQU   $TESTFLG
$CANTRUN EQU   $TESTFLG
$FINAL   EQU   $TESTFLG
$TESTSUF EQU   $RUNTEST+5
$TESTNUM EQU   $RUNTEST+1
$LETPRF  EQU   $RUNTEST
$SYMBOLC EQU   $SLTBL+5
$FAMILY  EQU   $SLTBL
$CDEVPT  EQU   TOLTEPWA+1466
$DEVCNTS EQU   TOLTEPWA+1464
$FEEDBCK EQU   $DEVTBLE+66
$WTISUED EQU   $DEVFLG4
$EXIOISD EQU   $DEVFLG4
$REMWRIT EQU   $DEVFLG4
$REMDONE EQU   $DEVFLG4
$2NDUSED EQU   $DEVFLG4
$1STUSED EQU   $DEVFLG4
$IGLXIFB EQU   $DEVFLG4
$EXIOLV3 EQU   $DEVFLG4
@NM00046 EQU   $DEVFLG5
$DVBASIC EQU   $DEVFLG5
$ASCII   EQU   $DEVFLG5
$DEVLU   EQU   $DEVFLG5
$OPNDFAL EQU   $DEVFLG5
$ACQNCB  EQU   $DEVFLG5
$REMOTE  EQU   $DEVFLG5
$ENDNODE EQU   $DEVFLG5
$LINENME EQU   $RNINFO
$CID     EQU   $DEVTBLE+52
$DVCOL   EQU   $LDNCBPT+2
$DVROW   EQU   $LDNCBPT
$NCSPLP  EQU   $DEVTBLE+44
$DVLN    EQU   $SSCPDAF
$DAF     EQU   $DEVSESP+4
$VARYPAB EQU   $DEVSESP
$SYSMN   EQU   $DEVTBLE+28
@NM00045 EQU   $DEVFLG3
$CLRSNT  EQU   $DEVFLG3
$OLTERR  EQU   $DEVFLG3
$SRTEST  EQU   $DEVFLG3
$DVSNDOK EQU   $SIOFLG
$POLLREQ EQU   $DEVFLG3
$ACQRED  EQU   $DEVFLG3
$NOTDEV  EQU   $DEVFLG3
$DVINCT  EQU   $DEVTBLE+26
$DVBRKST EQU   $OPND+1
$DVBRKSN EQU   $OPND
$DVSEQNO EQU   $OPIS
$CEINTRP EQU   $DEVFLG2
$TESTMDE EQU   $DEVFLG2
$DEVALOC EQU   $DEVFLG2
$ALLDATA EQU   $DEVFLG2
$ENDCNTL EQU   $DEVFLG2
$CTLDEV  EQU   $DEVFLG2
$NOCDS   EQU   $DEVFLG2
$DATAIN  EQU   $DEVFLG2
$PRIMARY EQU   $DEVFLG1
$DVCTBYT EQU   $INTOCC
$DEVACT  EQU   $DEVFLG1
$DVLGMDE EQU   $ATTNEXP
$DVSPRM  EQU   $EVNCPLT
$GRABBED EQU   $DEVFLG1
$CATASTR EQU   $DEVFLG1
$LETGO   EQU   $DEVFLG1
$CURELEM EQU   $$SYMNME+4
$MSGOTSD EQU   $$SYMNME
$EXTDEV  EQU   $DEVCDS+11
@NM00044 EQU   $DEVSDCF
$NOTPRIM EQU   $DEVSDCF
@NM00043 EQU   $DEVCDSF
@NM00042 EQU   $DEVCDSF
@NM00041 EQU   $DEVCDSF
$CDSNAME EQU   $DEVCDSF
$EXTRN   EQU   $DEVCDSF
$CEVOLUM EQU   $DEVCDSF
$SHARD   EQU   $DEVCDSF
$DEVFPM  EQU   $DEVCDSF
$DEVCNT  EQU   $DEVCDS+8
$DEVTYPE EQU   $DEVFEAT+3
$DEVCLAS EQU   $DEVFEAT+2
$DEVFRRS EQU   $DEVFEAT+1
$DEVMOD  EQU   $DEVFEAT
$DEVRDGT EQU   @NM00039+1
$DEVCTLU EQU   @NM00039+1
$DEVCHAN EQU   @NM00039
@NM00040 EQU   @NM00039
$CTINDX  EQU   $DEVUNAD
$FLAG16  EQU   $COMMFLG+15
$FLAG15  EQU   $COMMFLG+14
$FLAG14  EQU   $COMMFLG+13
$TEP2ND  EQU   $FLAG13
$TEP1ST  EQU   $FLAG13
$CATMSG  EQU   $FLAG13
$PRMPTSW EQU   $FLAG13
$DEVENT  EQU   $FLAG13
$OLTMACC EQU   $FLAG13
$LGON    EQU   $FLAG13
$CTLOGON EQU   $FLAG13
@NM00038 EQU   $FLAG12
$VARYINP EQU   $FLAG12
$ENDTEST EQU   $FLAG12
$VRYHRD  EQU   $FLAG12
$VRYSFT  EQU   $FLAG12
$POSTFLG EQU   $FLAG12
$OPTMSG  EQU   $FLAG12
$FEORCAT EQU   $FLAG11
@NM00037 EQU   $FLAG11
@NM00036 EQU   $FLAG10
$INBND   EQU   $FLAG10
$WAITFLG EQU   $FLAG10
$DPRINT  EQU   $FLAG10
$HOLD    EQU   $FLAG9
$NOTRRCH EQU   $FLAG9
@NM00035 EQU   $FLAG9
$LSTLNSW EQU   $FLAG9
$MULLNSW EQU   $FLAG9
$IGRES   EQU   $FLAG9
$VS2     EQU   $FLAG8
$VS1     EQU   $FLAG8
$EDOS    EQU   $FLAG8
@NM00034 EQU   $FLAG8
$TWOWAY  EQU   $FLAG8
@NM00033 EQU   $FLAG8
$RCVMSG  EQU   $FLAG7
$RCVRFLG EQU   $FLAG7
$SNDRFLG EQU   $FLAG7
$LDOIS   EQU   $FLAG7
$DCONTCT EQU   $FLAG7
$EXIOWAT EQU   $FLAG7
$2NDDATA EQU   $FLAG7
$1STDATA EQU   $FLAG7
$CIREQ   EQU   $FLAG6
$ABTERM  EQU   $ABNDBIT
$FSTMCIS EQU   $FLAG6
$DISCREQ EQU   $FLAG6
$DISCISS EQU   $FLAG6
$CTERROR EQU   $FLAG6
$RECAL11 EQU   $FLAG6
@NM00032 EQU   $FLAG5
$PROGCK  EQU   $CANCEL
$PRINTAP EQU   $FLAG5
@NM00031 EQU   $FLAG5
$MSG922  EQU   $FLAG5
$CT924   EQU   $FLAG5
$FSTCAT  EQU   $FLAG5
$FSTFE   EQU   $FLAG5
$ACTOPND EQU   $FLAG4
$ACQCUTT EQU   $FLAG4
$CLSSACT EQU   $FLAG4
$BACKINT EQU   $FLAG4
$DMSGSW  EQU   $FLAG4
$TSTDEVP EQU   $FLAG4
$APRQPER EQU   $FLAG4
$OPCOM   EQU   $FLAG4
$NEWAP   EQU   $FLAG3
$ALTPRTR EQU   $FLAG3
$OPTERR  EQU   $FLAG3
$PRTONLY EQU   $FLAG3
$REQSTOR EQU   $FLAG3
$LOGOFFE EQU   $FLAG3
$TSTERR  EQU   $FLAG3
$DEVERR  EQU   $FLAG3
$PARTIAL EQU   $FLAG2
$NRMTERM EQU   $FLAG2
$VALDTST EQU   $FLAG2
$VALDDEV EQU   $FLAG2
$DBLSLSH EQU   $FLAG2
$NDR     EQU   $FLAG2
@NM00030 EQU   $FLAG2
$FTTHR   EQU   $FLAG2
$OLTACT  EQU   $FLAG1
$NORELDV EQU   $FLAG1
@NM00029 EQU   $FLAG1
$OPTCHNG EQU   $FLAG1
$DEVCHNG EQU   $FLAG1
$TESTCNG EQU   $FLAG1
$CNSLFG  EQU   $FLAG1
$TEP3RD  EQU   $FLAG1
@NM00028 EQU   $CDA+120
$CUCNT   EQU   $CDA+118
@NM00027 EQU   $CDA+117
$PRTFORM EQU   $CDA+116
$OPISCNT EQU   $CDA+114
$OPNDCNT EQU   $CDA+112
$GETMSZE EQU   $CDA+110
$GRCNTS  EQU   $CDA+108
$CTLCNT  EQU   $CDA+106
$ACTLVL  EQU   $CDA+105
$PRNTLVL EQU   $CDA+104
$ERRCNTA EQU   $CDA+102
$TLCNT   EQU   $CDA+100
$TIMEALW EQU   $CDA+96
$PTRAREA EQU   $CDA+92
$GETMPTR EQU   $CDA+88
$R13PTRT EQU   $CDA+84
$R13PTR  EQU   $CDA+80
$TEPEND  EQU   $CDA+76
$PLINKDL EQU   $CDA+72
$TEPBEGN EQU   $CDA+68
$FRELPTR EQU   $CDA+64
$HIGHADR EQU   $HIMOREC
$LOMOREC EQU   $CDA+56
$ENDCOMM EQU   $CDA+48
$COMMON  EQU   $RCA
$SLASHAD EQU   $CDA+32
$PASSON  EQU   $CDA+28
$TOLBRTB EQU   $CDA+24
$SCTPTR8 EQU   $CDA+20
$SCTPTR  EQU   $CDA+16
$TBWDPTR EQU   $CDA+12
$TFWDPTR EQU   $CDA+8
@NM00026 EQU   $CDA
@NM00025 EQU   $SCTTBLE+98
$SCTLWTC EQU   $SCTTBLE+96
$SCTLWTA EQU   $SCTTBLE+92
#EXT     EQU   $SCTTBLE+88
#PASS    EQU   $SCTTBLE+84
#TABLE   EQU   $SCTTBLE+80
#MSGIDAC EQU   $SCTTBLE+78
@NM00024 EQU   $SCTTBLE+71
$RETMASK EQU   $SCTTBLE+70
$R249255 EQU   $ROUTMSK+29
$R241248 EQU   $ROUTMSK+28
$R233240 EQU   $ROUTMSK+27
$R225232 EQU   $ROUTMSK+26
$R217224 EQU   $ROUTMSK+25
$R209216 EQU   $ROUTMSK+24
$R201208 EQU   $ROUTMSK+23
$R193200 EQU   $ROUTMSK+22
$R185192 EQU   $ROUTMSK+21
$R177184 EQU   $ROUTMSK+20
$R169176 EQU   $ROUTMSK+19
$R161168 EQU   $ROUTMSK+18
$R153160 EQU   $ROUTMSK+17
$R145152 EQU   $ROUTMSK+16
$R137144 EQU   $ROUTMSK+15
$R129136 EQU   $ROUTMSK+14
$R121128 EQU   $ROUTMSK+13
$R113120 EQU   $ROUTMSK+12
$R105112 EQU   $ROUTMSK+11
$R097104 EQU   $ROUTMSK+10
$R089096 EQU   $ROUTMSK+9
$R081088 EQU   $ROUTMSK+8
$R073080 EQU   $ROUTMSK+7
$R065072 EQU   $ROUTMSK+6
$R057064 EQU   $ROUTMSK+5
$R049056 EQU   $ROUTMSK+4
$R041048 EQU   $ROUTMSK+3
$R033040 EQU   $ROUTMSK+2
$R025032 EQU   $ROUTMSK+1
$R017024 EQU   $ROUTMSK
$TOTFLG2 EQU   $SCTTBLE+39
@NM00023 EQU   $TOTFLG1
@NM00022 EQU   $TOTFLG1
@NM00021 EQU   $TOTFLG1
$CURELOD EQU   $TOTFLG1
$CTEQTT  EQU   $TOTFLG1
@NM00020 EQU   $TOTFLG1
@NM00019 EQU   $TOTFLG1
$LINESHR EQU   $TOTFLG1
@NM00018 EQU   $OLTFLG2
@NM00017 EQU   $OLTFLG2
@NM00016 EQU   $OLTFLG2
@NM00015 EQU   $OLTFLG2
@NM00014 EQU   $OLTFLG2
@NM00013 EQU   $OLTFLG2
@NM00012 EQU   $OLTFLG2
$TALK    EQU   $OLTFLG2
$DYCOM   EQU   $OLTFLGS
@NM00011 EQU   $OLTFLGS
$TRACE   EQU   $OLTFLGS
$RETCODE EQU   $OLTFLGS
$CONTCB  EQU   $OLTFLGS
$RETAIN  EQU   $OLTFLGS
$CLEANRT EQU   $OLTFLGS
$MANINTV EQU   $OLTFLGS
$OLTSIZE EQU   $SCTTBLE+34
$QSCTMOD EQU   $EXECFLG
$CTRLMOD EQU   $EXECFLG
$CLEANUP EQU   $EXECFLG
$LSTPDEV EQU   $EXECFLG
$ERRCNT  EQU   $EXECFLG
$RTNSLCT EQU   $EXECFLG
$MULTDEV EQU   $EXECFLG
@NM00010 EQU   $EXECFLG
$RMSKCNT EQU   $SCTTBLE+32
$SYNAME  EQU   $CDS8T19+4
$EXTSIG  EQU   $CDS8T19+3
$CDFLGS  EQU   $CDS8T19+1
$CDSCNT  EQU   $CDS8T19
$PDEVDSC EQU   $SCTTBLE+16
$PDEVADR EQU   $SCTTBLE+12
$COMMCN  EQU   $CDSFLGS
$CUSTSYM EQU   $CDSFLGS
$TWOCHSW EQU   $CDSFLGS
$SYMNAME EQU   $CDSFLGS
$EXTINTC EQU   $CDSFLGS
$CEVOL   EQU   $CDSFLGS
$SHARED  EQU   $CDSFLGS
$FPM     EQU   $CDSFLGS
$LASTSUB EQU   $PDEVFLG
@NM00009 EQU   $PDEVFLG
@NM00008 EQU   $PDEVFLG
@NM00007 EQU   $PDEVFLG
$LASTDEV EQU   $PDEVFLG
@NM00006 EQU   $PDEVFLG
$EXFILPT EQU   $PDEVFLG
$FPMOLD  EQU   $PDEVFLG
$TSSSYM  EQU   $SCTTBLE+8
$SCTLEVL EQU   $SCTTBLE+7
$DRIVER  EQU   $SCTTBLE+6
$RT0916  EQU   $SCTTBLE+5
$RT0108  EQU   $SCTTBLE+4
$LOOPTST EQU   $ERROPT
$LOOPERR EQU   $ERROPT
$NERRPRT EQU   $ERROPT
$NOCNTRL EQU   $ERROPT
$ALTPRNT EQU   $ERROPT
$CATERR  EQU   $ERROPT
$ASTERIK EQU   $ERROPT
$TESTERR EQU   $ERROPT
$FSTCOMM EQU   $TESTOPT
$INDEFLP EQU   $TESTOPT
$NOPRT   EQU   $TESTOPT
$PARAPRT EQU   $TESTOPT
@NM00005 EQU   $TESTOPT
$ERRLPCT EQU   $SCTTBLE
$TLTEND  EQU   $RCAAREA+945
$CNSLID  EQU   $RCAAREA+936
$EXITSAV EQU   $RCAAREA+864
$TRASCII EQU   $RCAAREA+608
@NM00004 EQU   $RCAAREA+605
$VTAMEND EQU   $RCAFLG
$TPPOSTD EQU   $RCAFLG
$NEWCT   EQU   $RCAFLG
$ABNDALL EQU   $RCAFLG
$CUTESTB EQU   $RCAFLG
$CONSOLE EQU   $RCAFLG
$TPLOGON EQU   $RCAFLG
$UPDATE  EQU   $RCAFLG
$DEVAREA EQU   $RCAAREA+600
$CTDVAR  EQU   $RCAAREA+596
$BUFFS   EQU   $RCAAREA+464
$TLTNIB  EQU   $CONSTNT+140
$TLTPRPL EQU   $CONSTNT+20
@NM00003 EQU   $CONSTNT+4
@NM00002 EQU   $CONSTNT+2
$USECNT  EQU   $CONSTNT
$CURRTWA EQU   $POINTER+140
$CTNAME  EQU   $POINTER+132
$CTARGX  EQU   $POINTER+128
$COMINT  EQU   $POINTER+120
$QUEHNDL EQU   $POINTER+116
@NM00001 EQU   $POINTER+36
$RTNPTR  EQU   $POINTER+32
$TLTECB2 EQU   $POINTER+28
$TLTECB1 EQU   $POINTER+24
$CLEANP  EQU   $POINTER+20
$ABEND   EQU   $POINTER+16
$LSTAREA EQU   $POINTER+12
$FSTAREA EQU   $POINTER+8
$CVTSAVE EQU   $POINTER+4
$TOLTEP  EQU   $POINTER
$TLTACB  EQU   $RCAAREA
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00100 EQU   I00AC01C
@RT00106 EQU   I00AC03
@RT00130 EQU   I00AC09A
@RT00139 EQU   I00AC08A
@RT00154 EQU   I00AC04
@RT00157 EQU   I00AC03B
@RT00160 EQU   I00AC03B
@RT00163 EQU   I00AC02
@RT00172 EQU   I00AC05
@RT00175 EQU   I00AC04A
@RT00178 EQU   I00AC04A
@RT00181 EQU   I00AC02
@RT00190 EQU   I00AC06
@RT00193 EQU   I00AC05A
@RT00196 EQU   I00AC05A
@RT00200 EQU   I00AC02
@RT00209 EQU   I00AC07
@RT00212 EQU   I00AC06A
@RT00215 EQU   I00AC06A
@RT00219 EQU   I00AC02
@RT00228 EQU   I00AC08
@RT00231 EQU   I00AC07A
@RT00234 EQU   I00AC07A
@RT00238 EQU   I00AC02
@RT00247 EQU   I00AC09
@RT00249 EQU   I00AC08B
@RT00252 EQU   I00AC081
@RT00254 EQU   I00AC08B
@RT00260 EQU   I00AC08B
@RT00270 EQU   I00AC08B
@RT00275 EQU   I00AC02
@RT00283 EQU   I00AC01C
@RT00286 EQU   I00AC0A
@RT00288 EQU   I00AC09B
@RT00291 EQU   I00AC09B
@RT00300 EQU   I00AC09B
@RT00304 EQU   I00AC02
@RT00312 EQU   I00AC01C
@RT00315 EQU   I00AC0B
@RT00318 EQU   I00AC0AA
@RT00320 EQU   I00AC0AC
@RT00325 EQU   I00AC0AC
@RT00333 EQU   I00AC0AC
@RC00335 EQU   @RC00330
@RT00341 EQU   I00AC0AC
@RT00345 EQU   I00AC0AC
@RT00348 EQU   I00AC0AC
@RT00358 EQU   I00AC02
@RT00367 EQU   I00ACRET
@RC00374 EQU   @EL00001
@RF00389 EQU   @EL00001
@RT00400 EQU   I00ACL02
@RT00438 EQU   I00ACL01
@RC00377 EQU   @RC00374
@RF00382 EQU   @RC00374
@ENDDATA EQU   *
         END   ISTIC00A,(C'PLS2056',0702,80232)
