         TITLE 'ISTIC006,UPDATE CTL && EXHIBIT'
ISTIC006 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'ISTIC006  80.232'                                 0001
         DROP  @15
@PROLOG  ST    @14,12(,@13)                                        0001
         STM   @00,@12,20(@13)                                     0001
         BALR  @11,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@11                                         0001
         ST    @13,@SA00001+4                                      0001
         LA    @12,@SA00001                                        0001
         ST    @12,8(,@13)                                         0001
         LR    @13,@12                                             0001
         EJECT
         EJECT
         EJECT
*                                                                  0076
*/*  UPDATE CONTROL SECTION                                          */
*                                                                  0076
*I006C01:                                                          0076
*   $INBUFR(1:80)='';               /* BLANK OUT INPUT BUFFER        */
*                                                                  0076
I006C01  MVI   $INBUFR(WAPTR),C' '                                 0076
         MVC   $INBUFR+1(79,WAPTR),$INBUFR(WAPTR)                  0076
*   /*****************************************************************/
*   /*                                                               */
*   /* TCEC MSGN(560)INCT(8) INVOKED                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0077
*   $TCECM='1'B;                    /* SET TCEC SW IN RCA            */
         OI    $TCECM(WAPTR),B'00000001'                           0077
*   R1=ADDR($TCA09);                /* SET UP PARM LIST $TR          */
         LA    R1,$TCA09                                           0078
*   CALL #EXIT;                     /* CALL CECOM                    */
         L     @15,#EXITA(,WAPTR)                                  0079
         BALR  @14,@15                                             0079
*   DCL                                                            0080
*     1 $TCA09,                     /* TCEC PARM LIST                */
*      2 $TCB09 FIXED(32) INIT(560),/* MSG NUMBER                    */
*      2 $TCC09 FIXED(32) INIT(8),  /* INCT LEN                      */
*      2 $TCD09 BIT(8) INIT('01000000'B),/* FLAG                     */
*      2 $TCE09 CHAR(4) INIT('FFFFFFFF'X);/* MSSAGE MASK ENTER     0080
*                                      FUNCTION ID                   */
*   WKREG1=ADDR(FNCTBL);            /* GET PTR TO FUNCTION TBL       */
         LA    WKREG1,FNCTBL                                       0081
*   RESPECIFY                                                      0082
*     CDSMAP BASED(CDSWKPTR);                                      0082
*   CDSWKPTR=$LOWADDR;              /* SET UP BASE                   */
         L     @15,$LOWADDR(,WAPTR)                                0083
         ST    @15,CDSWKPTR                                        0083
*   CDSWKPTR=CDSWKPTR+80;           /* GET CDS WORK AREA OFFSET      */
         AH    @15,@CH00181                                        0084
         ST    @15,CDSWKPTR                                        0084
*   R1=ADDR(CDSUA);                 /* INITIALIZE BASE FOR XC INST   */
         LR    R1,@15                                              0085
*   GEN;                                                           0086
*                                                                  0086
         XC  0(255,R1),0(R1)            /*ZERO OUT CDS WORK AREA     */
*/* LOCATE FUNCTION                                                  */
*                                                                  0087
*   IF NONE=$INBUFR(2:LENGTH(NONE)+1) THEN                         0087
         CLC   NONE(4),$INBUFR+1(WAPTR)                            0087
         BE    @RT00087                                            0087
*     GOTO I006CRET;                                               0088
*   CALLREG=ADDR(CALLTBL);          /* GET PTR TO CALL TABLE         */
         LA    CALLREG,CALLTBL                                     0089
*   DO X=1 TO DIM(FNCTBL);          /* CHECK FOR VALID ENTRY         */
         LA    @15,1                                               0090
         ST    @15,X                                               0090
@DL00090 DS    0H                                                  0091
*     IF TBLENTLN=$INBUFR THEN      /* COMPARE LENGTH FIRST          */
         CLC   TBLENTLN(1,WKREG1),$INBUFR(WAPTR)                   0091
         BNE   @RF00091                                            0091
*       DO;                                                        0092
*         WKREG1=ADDR(FNCTBL);      /* REINITIALIZE WKREG1           */
         LA    WKREG1,FNCTBL                                       0093
*         I=$INBUFR(1:1);           /* GET INPUT LENGTH              */
         MVC   I(1),$INBUFR(WAPTR)                                 0094
*         DO X=1 TO DIM(FNCTBL);    /* COMPARE ACTUAL ENTRY          */
         LA    @15,1                                               0095
         ST    @15,X                                               0095
@DL00095 DS    0H                                                  0096
*           IF TBLENTRY(2:4)=$INBUFR(2:4) THEN                     0096
         CLC   TBLENTRY+1(3,WKREG1),$INBUFR+1(WAPTR)               0096
         BE    @RT00096                                            0096
*             GOTO I006C02;         /* IF FOUND-GET OUT              */
*           CALLREG=CALLREG+4;      /* UPDATE CALL REG PTR           */
         AH    CALLREG,@CH00045                                    0098
*           WKREG1=WKREG1+TBLENTLN; /* POINT TO NXT FNCTBL ENTRY     */
         SLR   @12,@12                                             0099
         IC    @12,TBLENTLN(,WKREG1)                               0099
         ALR   WKREG1,@12                                          0099
*           WKREG1=WKREG1+1;        /* AND UPDATE THAT PTR BY 1      */
         AH    WKREG1,@CH00036                                     0100
*         END;                                                     0101
         AH    @15,@CH00036                                        0101
         ST    @15,X                                               0101
         CH    @15,@CH00080                                        0101
         BNH   @DL00095                                            0101
*         GOTO I006C01A;            /* BR AROUND                     */
         B     I006C01A                                            0102
*       END;                                                       0103
*     WKREG1=WKREG1+TBLENTLN;       /* POINT TO NXT FUNCT TBL ENT    */
@RF00091 SLR   @15,@15                                             0104
         IC    @15,TBLENTLN(,WKREG1)                               0104
         ALR   WKREG1,@15                                          0104
*     WKREG1=WKREG1+1;              /* UPDATE THAT PTR BY ONE        */
         AH    WKREG1,@CH00036                                     0105
*   END;                                                           0106
         LA    @15,1                                               0106
         AL    @15,X                                               0106
         ST    @15,X                                               0106
         CH    @15,@CH00080                                        0106
         BNH   @DL00090                                            0106
*I006C01A:                                                         0107
*                                                                  0107
*   /*****************************************************************/
*   /*                                                               */
*   /* TCEC MSGN(299) INVOKED                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0107
*   $TCECM='1'B;                    /* SET TCEC SW IN RCA            */
I006C01A OI    $TCECM(WAPTR),B'00000001'                           0107
*   R1=ADDR($TCA10);                /* SET UP PARM LIST $TR          */
         LA    R1,$TCA10                                           0108
*   CALL #EXIT;                     /* CALL CECOM                    */
         L     @15,#EXITA(,WAPTR)                                  0109
         BALR  @14,@15                                             0109
*   DCL                                                            0110
*     1 $TCA10,                     /* TCEC PARM LIST                */
*      2 $TCB10 FIXED(32) INIT(299),/* MSG NUMBER                    */
*      2 $TCC10 FIXED(32) INIT(0),  /* INCT LEN                      */
*      2 $TCD10 BIT(8) INIT('00000000'B),/* FLAG                     */
*      2 $TCE10 CHAR(4) INIT('FFFFFFFF'X);/* MSSAGE MASK INVALID   0110
*                                      ENTRY,RE-ENTER                */
*   GOTO I006C01;                   /* GO GET NEW RESPONSE           */
         B     I006C01                                             0111
*/* THIS SECTION SETS UP THE UNIT ADDRESS OR SYMBOLIC NAME IN THE    */
*/* CDS BUILD AREA AND INITIALIZES THE PROPER SWITCHES               */
*                                                                  0112
*I006C02:                                                          0112
*   R1=ADDR(CDSUA);                 /* SET UP SECONDARY BASE         */
I006C02  L     R1,CDSWKPTR                                         0112
*   GEN;                                                           0113
*                                                                  0113
         XC  0(255,R1),0(R1)            /*ZERO OUT CDS WORK AREA     */
*   /*****************************************************************/
*   /*                                                               */
*   /* TCEC MSGN(578)INCT(8) INVOKED                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0114
*   $TCECM='1'B;                    /* SET TCEC SW IN RCA            */
         OI    $TCECM(WAPTR),B'00000001'                           0114
*   R1=ADDR($TCA11);                /* SET UP PARM LIST $TR          */
         LA    R1,$TCA11                                           0115
*   CALL #EXIT;                     /* CALL CECOM                    */
         L     @15,#EXITA(,WAPTR)                                  0116
         BALR  @14,@15                                             0116
*   DCL                                                            0117
*     1 $TCA11,                     /* TCEC PARM LIST                */
*      2 $TCB11 FIXED(32) INIT(578),/* MSG NUMBER                    */
*      2 $TCC11 FIXED(32) INIT(8),  /* INCT LEN                      */
*      2 $TCD11 BIT(8) INIT('01000000'B),/* FLAG                     */
*      2 $TCE11 CHAR(4) INIT('FFFFFFFF'X);/* MSSAGE MASK GET SYMBOLIC
*                                      NAME OR CUA                   */
*   IF $INBUFR(2:LENGTH(NUMBERIC)+1)<NUMBERIC THEN/* WHICH WOULD   0118
*                                      INDICATE A                    */
         CLC   $INBUFR+1(1,WAPTR),NUMBERIC                         0118
         BNL   @RF00118                                            0118
*     DO;                                                          0119
*       $REMSW='1'B;                /* TURN ON REMOTE SW IN RCA      */
         OI    $REMSW(WAPTR),B'01000000'                           0120
*       CDSREMSY='1'B;              /* TURN ON REMOTE SW IN CDS      */
*       CDSSYMB='1'B;               /* TURN ON SYMBOLIC SW IN CDS    */
         L     @15,CDSWKPTR                                        0122
         OI    CDSREMSY(@15),B'00001010'                           0122
*       CDSSYMBN='        ';        /* BLANK OUT NAME        @DM44548*/
         MVC   CDSSYMBN(8,@15),@CC00835                            0123
*       CDSSYMBN=$INBUFR(2:(($INBUFR(1:1)+1)));/* MOVE NAME TO CDS   */
         MVI   CDSSYMBN+1(@15),C' '                                0124
         MVC   CDSSYMBN+2(6,@15),CDSSYMBN+1(@15)                   0124
         SLR   @12,@12                                             0124
         IC    @12,$INBUFR(,WAPTR)                                 0124
         BCTR  @12,0                                               0124
         EX    @12,@SM00895                                        0124
*     END;                                                         0125
*   ELSE                                                           0126
*     DO;                           /* CUA ENTRY                     */
         B     @RC00118                                            0126
@RF00118 DS    0H                                                  0127
*       $REMSW='0'B;                /* TURN OFF REMOTE FLAG          */
         NI    $REMSW(WAPTR),B'10111111'                           0127
*       IF THREE=$INBUFR(1:1)       /* IF HE ENTERED ONLY A 3-BYTE   */
*         THEN                      /* ADDRESS THEN MAKE IT LOOK     */
         CLC   THREE(1),$INBUFR(WAPTR)                             0128
         BNE   @RF00128                                            0128
*         DO;                       /* LIKE A FOUR BYTE ENTRY        */
*           WKAREA(1:2)=NUMBERIC;                                  0130
         MVI   WKAREA+1,C' '                                       0130
         MVC   WKAREA(1),NUMBERIC                                  0130
*           WKAREA(2:4)=$INBUFR(2:5);                              0131
         MVC   WKAREA+1(3),$INBUFR+1(WAPTR)                        0131
*         END;                                                     0132
*       ELSE                        /* IF IT WAS A 4-BYTE ENTRY      */
*         DO;                       /* THEN JUST MOVE IT IN          */
         B     @RC00128                                            0133
@RF00128 DS    0H                                                  0134
*           WKAREA(1:4)=$INBUFR(2:5);                              0134
         MVC   WKAREA(4),$INBUFR+1(WAPTR)                          0134
*         END;                                                     0135
*                                                                  0135
*       /*************************************************************/
*       /*                                                           */
*       /* ITACONV FROM(WKAREA)TO(WKAREA1)COUNT(4)TYPE(EH) INVOKED   */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0136
*       DCL                                                        0136
*         1 ITATCPRM BDY(WORD),     /* CONVERT PARAMETER LIST        */
*          2 * CHAR(4) INIT('0102F4F1'X),                          0136
*          2 ITATCFR PTR,           /* ADDRESS OF FROM FIELD         */
*          2 ITATCTO PTR,           /* ADDRESS OF TO FIELD           */
*          2 * BIT(8) INIT(0),      /* FLAGS FOR CONVERT MODULE      */
*           3 ITATCTP BIT(1),       /* TYPE OF CONVERT REQUIRED      */
*          2 ITATCNT FIXED(8);      /* NUMBER OF BYTES TO CONVERT    */
@RC00128 DS    0H                                                  0137
*       ITATCFR=ADDR(WKAREA);       /* SET THE FROM ADDRESS          */
         LA    @15,WKAREA                                          0137
         ST    @15,ITATCFR                                         0137
*       ITATCTO=ADDR(WKAREA1);      /* SET THE TO ADDRESS            */
         LA    @15,WKAREA1                                         0138
         ST    @15,ITATCTO                                         0138
*       ITATCTP='0'B;               /* SET THE TYPE OF CONVERT BIT   */
         NI    ITATCTP,B'01111111'                                 0139
*       ITATCNT=4;                  /* GIVE THE CONVERT BYTE COUNT   */
         MVI   ITATCNT,X'04'                                       0140
*       R1=ADDR(ITATCPRM);          /* POINT TO CONVERT PARM LIST    */
         LA    R1,ITATCPRM                                         0141
*       CALL ISTSC021;              /* CALL CONVERT DIRECTLY         */
         L     @15,@CV00845                                        0142
         BALR  @14,@15                                             0142
*       WKREG1=ADDR(CDSUA);         /* SET UP BASE FOR NXT INSTR     */
         L     WKREG1,CDSWKPTR                                     0143
*       GEN;                                                       0144
*                                       /*
               XC  0(4,WKREG1),0(WKREG1)  ZERO OUT CDSUA
               MVC 2(2,WKREG1),WKAREA1    MOVE IN CONVERTED ADDR
*     END;                                                         0145
*                                                                  0145
*/* CHECK TO SEE IF THE CDS REQUESTED IS KNOWN TO VTAM               */
*                                                                  0146
*   R1=ADDR(VERYTBL);               /* SET UP PARM LIST PTR AND      */
@RC00118 LA    R1,VERYTBL                                          0146
*   CDSPTR=ADDR(CDSUA);             /* CDS PTR FOR VERIFY            */
         MVC   CDSPTR(4),CDSWKPTR                                  0147
*   CALL ISTSC030;                  /* CALL VERIFY MODULE            */
         L     @15,@CV00846                                        0148
         BALR  @14,@15                                             0148
*   IF R15=0                        /* IF VERIFY WAS GOOD            */
*     THEN                          /* THEN PUT CDS DATA IN $WORK    */
         LTR   R15,R15                                             0149
         BNZ   @RF00149                                            0149
*     DO;                           /* AND CALL RESPECTIVE FUNCT     */
*       GEN;                                                       0151
*                                       /*
               BR  CALLREG                                           */
*     END;                                                         0152
*I006C02A:                                                         0153
*   GOTO I006C01;                   /* PRT HEADER LINE               */
         B     I006C01                                             0153
*I006CRET:                                                         0154
*   RETURN;                                                        0154
*   GEN(EJECT);                                                    0155
*                                                                  0155
         EJECT
*/* BRANCH TABLE                                                     */
*                                                                  0156
*   GEN;                                                           0156
CALLTBL  DS   0H
          B    I006C03                    GO CALL DELETE
          B    I006C03A                   GO CALL ADD
          B    I006C03B                   GO CALL CHANGE
          B    I006C03C                   GO CALL COPY
          B    I006C03D                   GO EXEC EXHIBIT
*I006C03:                                                          0157
*   CALL ISTIC007;                  /* CALL DELETE                   */
I006C03  L     @15,@CV00851                                        0157
         BALR  @14,@15                                             0157
*   GOTO I006C02A;                  /* GO CK FOR CONTINUATION        */
         B     I006C02A                                            0158
*I006C03A:                                                         0159
*   CALL ISTIC008;                  /* CALL ADD                      */
I006C03A L     @15,@CV00854                                        0159
         BALR  @14,@15                                             0159
*   GOTO I006C02A;                  /* GO CK FOR CONTINUATION        */
         B     I006C02A                                            0160
*I006C03B:                                                         0161
*   $CHANGE='1'B;                   /* TURN ON CHANGE BIT            */
I006C03B OI    $CHANGE(WAPTR),B'00100000'                          0161
*   CALL ISTIC009;                  /* CALL CHANGE                   */
         L     @15,@CV00858                                        0162
         BALR  @14,@15                                             0162
*   GOTO I006C02A;                  /* GO CK FOR CONTINUATION        */
         B     I006C02A                                            0163
*I006C03C:                                                         0164
*   $COPY='1'B;                     /* TURN ON COPY BIT              */
I006C03C OI    $COPY(WAPTR),B'00001000'                            0164
*   CALL ISTIC009;                  /* CALL COPY                     */
         L     @15,@CV00858                                        0165
         BALR  @14,@15                                             0165
*   GOTO I006C02A;                  /* GO CK FOR CONTINUATION        */
         B     I006C02A                                            0166
*I006C03D:                                                         0167
*   DCL                                                            0167
*     1 ZZZGTPRM BDY(WORD),         /* GETCONFG PARAMETER LIST       */
*      2 * CHAR(4) INIT('0102F1F6'X),                              0167
*      2 ZZZGTCD PTR,               /* POINTER TO BASIC CDS INFO     */
*      2 ZZZGTAD PTR,               /* POINTER TO RECEIVING BUFFER   */
*      2 ZZZGTCT FIXED(8);          /* NUMBER OF CDS BYTES NEEDED    */
I006C03D DS    0H                                                  0168
*   ZZZGTAD=ADDR(CDSUA);            /* POINTER TO RECEIVING BUFFER   */
         L     @15,CDSWKPTR                                        0168
         ST    @15,ZZZGTAD                                         0168
*   ZZZGTCD=ADDR(CDSUA);            /* POINTER TO BASIC CDS INFO     */
         ST    @15,ZZZGTCD                                         0169
*   ZZZGTCT=255;                    /* NUMBER OF BYTES NEEDED        */
         MVI   ZZZGTCT,X'FF'                                       0170
*   R1=ADDR(ZZZGTPRM);              /* POINT TO THE PARM LIST        */
         LA    R1,ZZZGTPRM                                         0171
*   CALL ISTSC029;                  /* CALL THE GETCONFG FUNCTION    */
         L     @15,@CV00870                                        0172
         BALR  @14,@15                                             0172
*/* START OF EXHIBIT FUNCTION                                        */
*                                                                  0173
*   IF R15=0 THEN                   /* IF WE FOUND CDS THEN          */
         LTR   R15,R15                                             0173
         BZ    @RT00173                                            0173
*     GOTO I006C04;                 /* CONTINUE                      */
*                                                                  0174
*   /*****************************************************************/
*   /*                                                               */
*   /* TCEC MSGN(574) INVOKED                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0175
*   $TCECM='1'B;                    /* SET TCEC SW IN RCA            */
         OI    $TCECM(WAPTR),B'00000001'                           0175
*   R1=ADDR($TCA14);                /* SET UP PARM LIST $TR          */
         LA    R1,$TCA14                                           0176
*   CALL #EXIT;                     /* CALL CECOM                    */
         L     @15,#EXITA(,WAPTR)                                  0177
         BALR  @14,@15                                             0177
*   DCL                                                            0178
*     1 $TCA14,                     /* TCEC PARM LIST                */
*      2 $TCB14 FIXED(32) INIT(574),/* MSG NUMBER                    */
*      2 $TCC14 FIXED(32) INIT(0),  /* INCT LEN                      */
*      2 $TCD14 BIT(8) INIT('00000000'B),/* FLAG                     */
*      2 $TCE14 CHAR(4) INIT('FFFFFFFF'X);/* MSSAGE MASK DEVICE NOT
*                                      CONFIGURED                    */
*   GOTO I006C02A;                  /* SEE IF HE WANTS TO CONT       */
         B     I006C02A                                            0179
*   GEN(EJECT);                                                    0180
         EJECT
*I006C04:                                                          0181
*   PRNTBUF1=TERMHD;                /* SET UP TERMINAL CONFIG HD     */
I006C04  MVC   PRNTBUF1(22,WAPTR),TERMHD                           0181
*   FILLER(1:22)=BLANKHD;           /* BLANK OUT REST OF AREA        */
         MVC   FILLER(22,WAPTR),BLANKHD                            0182
*   GEN(BAL LINKR,I006CMSG);        /* GO PRINT HEADINGS             */
         BAL LINKR,I006CMSG
*   PRNTBUF1=SUBHD01;               /* 'FIELD BYTES'                 */
         MVC   PRNTBUF1(22,WAPTR),SUBHD01                          0184
*   FILLER(1:22)=CONTNTHD;          /* CONTENTS                      */
         MVC   FILLER(22,WAPTR),CONTNTHD                           0185
*   GEN(BAL LINKR,I006CMSG);        /* GO PRINT SUB-HEADING          */
         BAL LINKR,I006CMSG
*   PRNTBUF1=UNITADHD;              /* SET UP UNIT ADDR HEADING      */
*                                                                  0187
         MVC   PRNTBUF1(22,WAPTR),UNITADHD                         0187
*   /*****************************************************************/
*   /*                                                               */
*   /* ITACONV FROM(CDSUA)TO(PRNTBUF2)COUNT(4)TYPE(HE) INVOKED       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0188
*   ITATCFR=ADDR(CDSUA);            /* SET THE FROM ADDRESS          */
         MVC   ITATCFR(4),CDSWKPTR                                 0188
*   ITATCTO=ADDR(PRNTBUF2);         /* SET THE TO ADDRESS            */
         LA    @15,PRNTBUF2(,WAPTR)                                0189
         ST    @15,ITATCTO                                         0189
*   ITATCTP='1'B;                   /* SET THE TYPE OF CONVERT BIT   */
         OI    ITATCTP,B'10000000'                                 0190
*   ITATCNT=4;                      /* GIVE THE CONVERT BYTE COUNT   */
         MVI   ITATCNT,X'04'                                       0191
*   R1=ADDR(ITATCPRM);              /* POINT TO CONVERT PARM LIST    */
         LA    R1,ITATCPRM                                         0192
*   CALL ISTSC021;                  /* CALL CONVERT DIRECTLY         */
         L     @15,@CV00845                                        0193
         BALR  @14,@15                                             0193
*   GEN(BAL LINKR,I006CMSG);        /* GO PRINT UNIT ADDR LINE       */
         BAL LINKR,I006CMSG
*   PRNTBUF1=MODELHD;               /* SET UP MODEL HEADING          */
*                                                                  0195
         MVC   PRNTBUF1(22,WAPTR),MODELHD                          0195
*   /*****************************************************************/
*   /*                                                               */
*   /* ITACONV FROM(CDSMODEL)TO(PRNTBUF2)COUNT(1)TYPE(HE) INVOKED    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0196
*   ITATCFR=ADDR(CDSMODEL);         /* SET THE FROM ADDRESS          */
         L     @15,CDSWKPTR                                        0196
         LA    @15,CDSMODEL(,@15)                                  0196
         ST    @15,ITATCFR                                         0196
*   ITATCTO=ADDR(PRNTBUF2);         /* SET THE TO ADDRESS            */
         LA    @15,PRNTBUF2(,WAPTR)                                0197
         ST    @15,ITATCTO                                         0197
*   ITATCTP='1'B;                   /* SET THE TYPE OF CONVERT BIT   */
         OI    ITATCTP,B'10000000'                                 0198
*   ITATCNT=1;                      /* GIVE THE CONVERT BYTE COUNT   */
         MVI   ITATCNT,X'01'                                       0199
*   R1=ADDR(ITATCPRM);              /* POINT TO CONVERT PARM LIST    */
         LA    R1,ITATCPRM                                         0200
*   CALL ISTSC021;                  /* CALL CONVERT DIRECTLY         */
         L     @15,@CV00845                                        0201
         BALR  @14,@15                                             0201
*   GEN(BAL LINKR,I006CMSG);        /* GO PRINT MODEL LINE           */
         BAL LINKR,I006CMSG
*   PRNTBUF1=FEATHD;                /* SET UP FEATURE HEADING        */
*                                                                  0203
         MVC   PRNTBUF1(22,WAPTR),FEATHD                           0203
*   /*****************************************************************/
*   /*                                                               */
*   /* ITACONV FROM(CDSFEAT)TO(PRNTBUF2)COUNT(1)TYPE(HE) INVOKED     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0204
*   ITATCFR=ADDR(CDSFEAT);          /* SET THE FROM ADDRESS          */
         L     @15,CDSWKPTR                                        0204
         LA    @15,CDSFEAT(,@15)                                   0204
         ST    @15,ITATCFR                                         0204
*   ITATCTO=ADDR(PRNTBUF2);         /* SET THE TO ADDRESS            */
         LA    @15,PRNTBUF2(,WAPTR)                                0205
         ST    @15,ITATCTO                                         0205
*   ITATCTP='1'B;                   /* SET THE TYPE OF CONVERT BIT   */
         OI    ITATCTP,B'10000000'                                 0206
*   ITATCNT=1;                      /* GIVE THE CONVERT BYTE COUNT   */
         MVI   ITATCNT,X'01'                                       0207
*   R1=ADDR(ITATCPRM);              /* POINT TO CONVERT PARM LIST    */
         LA    R1,ITATCPRM                                         0208
*   CALL ISTSC021;                  /* CALL CONVERT DIRECTLY         */
         L     @15,@CV00845                                        0209
         BALR  @14,@15                                             0209
*   GEN(BAL LINKR,I006CMSG);        /* GO PRINT FEATURE LINE         */
         BAL LINKR,I006CMSG
*   PRNTBUF1=CLASSHD;               /* SET UP CLASS HEADING          */
*                                                                  0211
         MVC   PRNTBUF1(22,WAPTR),CLASSHD                          0211
*   /*****************************************************************/
*   /*                                                               */
*   /* ITACONV FROM(CDSCLASS)TO(PRNTBUF2)COUNT(1)TYPE(HE) INVOKED    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0212
*   ITATCFR=ADDR(CDSCLASS);         /* SET THE FROM ADDRESS          */
         L     @15,CDSWKPTR                                        0212
         LA    @15,CDSCLASS(,@15)                                  0212
         ST    @15,ITATCFR                                         0212
*   ITATCTO=ADDR(PRNTBUF2);         /* SET THE TO ADDRESS            */
         LA    @15,PRNTBUF2(,WAPTR)                                0213
         ST    @15,ITATCTO                                         0213
*   ITATCTP='1'B;                   /* SET THE TYPE OF CONVERT BIT   */
         OI    ITATCTP,B'10000000'                                 0214
*   ITATCNT=1;                      /* GIVE THE CONVERT BYTE COUNT   */
         MVI   ITATCNT,X'01'                                       0215
*   R1=ADDR(ITATCPRM);              /* POINT TO CONVERT PARM LIST    */
         LA    R1,ITATCPRM                                         0216
*   CALL ISTSC021;                  /* CALL CONVERT DIRECTLY         */
         L     @15,@CV00845                                        0217
         BALR  @14,@15                                             0217
*   GEN(BAL LINKR,I006CMSG);        /* GO PRINT CLASS LINE           */
         BAL LINKR,I006CMSG
*   PRNTBUF1=TYPEHD;                /* SET UP TYPE HEADING           */
*                                                                  0219
         MVC   PRNTBUF1(22,WAPTR),TYPEHD                           0219
*   /*****************************************************************/
*   /*                                                               */
*   /* ITACONV FROM(CDSTYPE)TO(PRNTBUF2)COUNT(1)TYPE(HE) INVOKED     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0220
*   ITATCFR=ADDR(CDSTYPE);          /* SET THE FROM ADDRESS          */
         L     @15,CDSWKPTR                                        0220
         LA    @15,CDSTYPE(,@15)                                   0220
         ST    @15,ITATCFR                                         0220
*   ITATCTO=ADDR(PRNTBUF2);         /* SET THE TO ADDRESS            */
         LA    @15,PRNTBUF2(,WAPTR)                                0221
         ST    @15,ITATCTO                                         0221
*   ITATCTP='1'B;                   /* SET THE TYPE OF CONVERT BIT   */
         OI    ITATCTP,B'10000000'                                 0222
*   ITATCNT=1;                      /* GIVE THE CONVERT BYTE COUNT   */
         MVI   ITATCNT,X'01'                                       0223
*   R1=ADDR(ITATCPRM);              /* POINT TO CONVERT PARM LIST    */
         LA    R1,ITATCPRM                                         0224
*   CALL ISTSC021;                  /* CALL CONVERT DIRECTLY         */
         L     @15,@CV00845                                        0225
         BALR  @14,@15                                             0225
*   GEN(BAL LINKR,I006CMSG);        /* PRINT TYPE LINE               */
         BAL LINKR,I006CMSG
*   PRNTBUF1=BYTECTHD;              /* SET UP BYTE COUNT HEADING     */
*                                                                  0227
         MVC   PRNTBUF1(22,WAPTR),BYTECTHD                         0227
*   /*****************************************************************/
*   /*                                                               */
*   /* ITACONV FROM(CDSBYTCT)TO(PRNTBUF2)COUNT(1)TYPE(HE) INVOKED    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0228
*   ITATCFR=ADDR(CDSBYTCT);         /* SET THE FROM ADDRESS          */
         L     @15,CDSWKPTR                                        0228
         LA    @15,CDSBYTCT(,@15)                                  0228
         ST    @15,ITATCFR                                         0228
*   ITATCTO=ADDR(PRNTBUF2);         /* SET THE TO ADDRESS            */
         LA    @15,PRNTBUF2(,WAPTR)                                0229
         ST    @15,ITATCTO                                         0229
*   ITATCTP='1'B;                   /* SET THE TYPE OF CONVERT BIT   */
         OI    ITATCTP,B'10000000'                                 0230
*   ITATCNT=1;                      /* GIVE THE CONVERT BYTE COUNT   */
         MVI   ITATCNT,X'01'                                       0231
*   R1=ADDR(ITATCPRM);              /* POINT TO CONVERT PARM LIST    */
         LA    R1,ITATCPRM                                         0232
*   CALL ISTSC021;                  /* CALL CONVERT DIRECTLY         */
         L     @15,@CV00845                                        0233
         BALR  @14,@15                                             0233
*   GEN(BAL LINKR,I006CMSG);        /* GO PRINT BYTE COUNT LINE      */
         BAL LINKR,I006CMSG
*   PRNTBUF1=FLAG01HD;              /* SET UP FLAG HEADING           */
*                                                                  0235
         MVC   PRNTBUF1(22,WAPTR),FLAG01HD                         0235
*   /*****************************************************************/
*   /*                                                               */
*   /* ITACONV FROM(CDSFLAG)TO(PRNTBUF2)COUNT(3)TYPE(HE) INVOKED     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0236
*   ITATCFR=ADDR(CDSFLAG);          /* SET THE FROM ADDRESS          */
         L     @15,CDSWKPTR                                        0236
         LA    @15,CDSFLAG(,@15)                                   0236
         ST    @15,ITATCFR                                         0236
*   ITATCTO=ADDR(PRNTBUF2);         /* SET THE TO ADDRESS            */
         LA    @15,PRNTBUF2(,WAPTR)                                0237
         ST    @15,ITATCTO                                         0237
*   ITATCTP='1'B;                   /* SET THE TYPE OF CONVERT BIT   */
         OI    ITATCTP,B'10000000'                                 0238
*   ITATCNT=3;                      /* GIVE THE CONVERT BYTE COUNT   */
         MVI   ITATCNT,X'03'                                       0239
*   R1=ADDR(ITATCPRM);              /* POINT TO CONVERT PARM LIST    */
         LA    R1,ITATCPRM                                         0240
*   CALL ISTSC021;                  /* CALL CONVERT DIRECTLY         */
         L     @15,@CV00845                                        0241
         BALR  @14,@15                                             0241
*   GEN(BAL LINKR,I006CMSG);        /* GO PRINT FLAG LINE            */
         BAL LINKR,I006CMSG
*   IF $REMSW^='1'B THEN            /* IF ITS NOT REMOTE RUN         */
         TM    $REMSW(WAPTR),B'01000000'                           0243
         BO    @RF00243                                            0243
*     DO;                                                          0244
*       IF CDSBYTCT<12              /* IF NO EXTRA DATA              */
*         THEN                      /* THEN                          */
         L     @15,CDSWKPTR                                        0245
         CLI   CDSBYTCT(@15),12                                    0245
         BL    @RT00245                                            0245
*         GOTO I006C02A;            /* GO BACK AROUND                */
*       ELSE                        /* ELSE                          */
*         Z=CDSBYTCT-12;            /* POINT TO REMAINING DATA     0247
*                                                            @YA04055*/
         SLR   @12,@12                                             0247
         IC    @12,CDSBYTCT(,@15)                                  0247
         SH    @12,@CH00263                                        0247
         STC   @12,Z                                               0247
*       REMPTR=ADDR(CDSSYMBN);      /* PT YO BYTE 12                 */
         LA    REMPTR,CDSSYMBN(,@15)                               0248
*       GOTO I006C04C;              /* THEN BR AROUND                */
         B     I006C04C                                            0249
*     END;                                                         0250
*   PRNTBUF1=SYMNMEHD;              /* SET UP SYM NME HEADING        */
@RF00243 MVC   PRNTBUF1(22,WAPTR),SYMNMEHD                         0251
*   PRNTBUF2=CDSSYMBN;              /* SET UP SYMBOLIC NAME          */
         MVI   PRNTBUF2+8(WAPTR),C' '                              0252
         MVC   PRNTBUF2+9(9,WAPTR),PRNTBUF2+8(WAPTR)               0252
         L     @15,CDSWKPTR                                        0252
         MVC   PRNTBUF2(8,WAPTR),CDSSYMBN(@15)                     0252
*   GEN(BAL LINKR,I006CMSG);        /* GO PRINT SYMBOLIC NAME LN     */
         BAL LINKR,I006CMSG
*   IF CDSBYTCT<20                  /* IF WE DO NOT HAVE CDS DATA    */
*     THEN                                                         0254
         L     @15,CDSWKPTR                                        0254
         CLI   CDSBYTCT(@15),20                                    0254
         BL    @RT00254                                            0254
*     GOTO I006C02A;                /* THEN BR AROUND                */
*   ELSE                                                           0256
*     DO;                           /* PRINT THAT DATA (MAX-235)     */
*       REMPTR=ADDR(CDSEXARA);      /* PT TO BYTE 20                 */
         LA    REMPTR,CDSEXARA(,@15)                               0257
*       Z=CDSBYTCT-20;              /* ADJUST FOR 0-20 BYTES @YA04055*/
         SLR   @12,@12                                             0258
         IC    @12,CDSBYTCT(,@15)                                  0258
         SH    @12,@CH00068                                        0258
         STC   @12,Z                                               0258
*I006C04C:                                                         0259
*       PRNTBUF1=REMGHD;            /* SET UP 'REMAINING' HD         */
I006C04C MVC   PRNTBUF1(22,WAPTR),REMGHD                           0259
*       I=Z/8;                      /* GET NUMBER OF DO LOOPS        */
         SLR   @15,@15                                             0260
         IC    @15,Z                                               0260
         LR    @12,@15                                             0260
         SRL   @12,3                                               0260
         STC   @12,I                                               0260
*       R=Z//8;                     /* GET REMAINDER                 */
         LR    @00,@15                                             0261
         SRDA  @00,32                                              0261
         D     @00,@CF00055                                        0261
         STC   @00,R                                               0261
*       X=0;                        /* RESET INDEX VALUE             */
         SLR   @15,@15                                             0262
         ST    @15,X                                               0262
*       IF I<1 THEN                                                0263
         CLI   I,1                                                 0263
         BL    @RT00263                                            0263
*         GOTO I006C05;             /* SKIP LOOP IF DATA < 8         */
*       DO Y=1 TO I BY 1;           /* CONVERT AND PRINT DATA        */
*                                                                  0265
         LA    @15,1                                               0265
         ST    @15,Y                                               0265
         B     @DE00265                                            0265
@DL00265 DS    0H                                                  0266
*         /***********************************************************/
*         /*                                                         */
*         /* ITACONV FROM(REMAREA)TO(PRNTBUF2)COUNT(8)TYPE(HE)       */
*         /* INVOKED                                                 */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0266
*         ITATCFR=ADDR(REMAREA);    /* SET THE FROM ADDRESS          */
         ST    REMPTR,ITATCFR                                      0266
*         ITATCTO=ADDR(PRNTBUF2);   /* SET THE TO ADDRESS            */
         LA    @15,PRNTBUF2(,WAPTR)                                0267
         ST    @15,ITATCTO                                         0267
*         ITATCTP='1'B;             /* SET THE TYPE OF CONVERT BIT   */
         OI    ITATCTP,B'10000000'                                 0268
*         ITATCNT=8;                /* GIVE THE CONVERT BYTE COUNT   */
         MVI   ITATCNT,X'08'                                       0269
*         R1=ADDR(ITATCPRM);        /* POINT TO CONVERT PARM LIST    */
         LA    R1,ITATCPRM                                         0270
*         CALL ISTSC021;            /* CALL CONVERT DIRECTLY         */
         L     @15,@CV00845                                        0271
         BALR  @14,@15                                             0271
*         GEN(BAL LINKR,I006CMSG);  /* GO PRINT DATA                 */
         BAL LINKR,I006CMSG
*         X=X+8;                    /* UPDATE INDEX VALUE            */
         LA    @15,8                                               0273
         L     @12,X                                               0273
         ALR   @12,@15                                             0273
         ST    @12,X                                               0273
*         REMPTR=REMPTR+8;                                         0274
         ALR   REMPTR,@15                                          0274
*       END;                                                       0275
         LA    @15,1                                               0275
         AL    @15,Y                                               0275
         ST    @15,Y                                               0275
@DE00265 SLR   @12,@12                                             0275
         IC    @12,I                                               0275
         CR    @15,@12                                             0275
         BNH   @DL00265                                            0275
*     END;                                                         0276
*I006C05:                                                          0277
*   IF R=0 THEN                     /* IF REMAINDER = 0, THEN BR     */
I006C05  CLI   R,0                                                 0277
         BE    @RT00277                                            0277
*     GO TO I006C02A;               /* BR AROUND CONVERT             */
*                                                                  0278
*   /*****************************************************************/
*   /*                                                               */
*   /* ITACONV FROM(REMAREA)TO(PRNTBUF2)COUNT(R)TYPE(HE) INVOKED     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0279
*   ITATCFR=ADDR(REMAREA);          /* SET THE FROM ADDRESS          */
         ST    REMPTR,ITATCFR                                      0279
*   ITATCTO=ADDR(PRNTBUF2);         /* SET THE TO ADDRESS            */
         LA    @15,PRNTBUF2(,WAPTR)                                0280
         ST    @15,ITATCTO                                         0280
*   ITATCTP='1'B;                   /* SET THE TYPE OF CONVERT BIT   */
         OI    ITATCTP,B'10000000'                                 0281
*   ITATCNT=R;                      /* GIVE THE CONVERT BYTE COUNT   */
         MVC   ITATCNT(1),R                                        0282
*   R1=ADDR(ITATCPRM);              /* POINT TO CONVERT PARM LIST    */
         LA    R1,ITATCPRM                                         0283
*   CALL ISTSC021;                  /* CALL CONVERT DIRECTLY         */
         L     @15,@CV00845                                        0284
         BALR  @14,@15                                             0284
*   GEN(BAL LINKR,I006CMSG);        /* GO PRINT LAST DATA BYTES      */
         BAL LINKR,I006CMSG
*   GOTO I006C02A;                  /* GO CK FOR MORE TO EXHIBIT     */
         B     I006C02A                                            0286
*   GEN(EJECT);                                                    0287
         EJECT
*I006CMSG:                                                         0288
*   GEN(ST LINKR,RETSAV);           /* SAVE RETURN ADDR              */
I006CMSG ST LINKR,RETSAV
*   $INBUFR(1:80)='';               /* BLANK OUT INBUFR              */
         MVI   $INBUFR(WAPTR),C' '                                 0289
         MVC   $INBUFR+1(79,WAPTR),$INBUFR(WAPTR)                  0289
*   $INBUFR(1:44)=PRNTBUF;          /* SET UP SUBSTITUTION CHAR      */
*                                                                  0290
         MVC   $INBUFR(44,WAPTR),PRNTBUF(WAPTR)                    0290
*   /*****************************************************************/
*   /*                                                               */
*   /* TCEC MSGN(579)SUB(YES) INVOKED                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0291
*   $TCECM='1'B;                    /* SET TCEC SW IN RCA            */
         OI    $TCECM(WAPTR),B'00000001'                           0291
*   R1=ADDR($TCA24);                /* SET UP PARM LIST $TR          */
         LA    R1,$TCA24                                           0292
*   CALL #EXIT;                     /* CALL CECOM                    */
         L     @15,#EXITA(,WAPTR)                                  0293
         BALR  @14,@15                                             0293
*   DCL                                                            0294
*     1 $TCA24,                     /* TCEC PARM LIST                */
*      2 $TCB24 FIXED(32) INIT(579),/* MSG NUMBER                    */
*      2 $TCC24 FIXED(32) INIT(0),  /* INCT LEN                      */
*      2 $TCD24 BIT(8) INIT('10000000'B),/* FLAG                     */
*      2 $TCE24 CHAR(4) INIT('FFFFFFFF'X);/* MSSAGE MASK PRINT MSG   */
*   PRNTBUF1=BLANKHD;               /* BLANK OUT PRNTBUF             */
         MVC   PRNTBUF1(22,WAPTR),BLANKHD                          0295
*   FILLER=BLANKHD;                 /* BLANK OUT PRNTBUF             */
         MVC   FILLER(4,WAPTR),BLANKHD                             0296
*   PRNTBUF2(1:18)=BLANKHD(1:18);   /* BLANK OUT PRNT BUFFER 2       */
         MVC   PRNTBUF2(18,WAPTR),BLANKHD                          0297
*   GEN(L  LINKR,RETSAV);           /* RESTORE RETURN REG            */
         L  LINKR,RETSAV
*   GEN(BR LINKR);                  /* RETURN TO CALLER              */
         BR LINKR
*   DO;                             /* ATDSPLY                       */
*   END;                            /* ATDSPLY                       */
*   END ISTIC006;                                                  0302
@EL00001 L     @13,4(,@13)                                         0302
@EF00001 DS    0H                                                  0302
@ER00001 L     @14,12(,@13)                                        0302
         LM    @00,@12,20(@13)                                     0302
         BR    @14                                                 0302
@DATA    DS    0H
@CH00036 DC    H'1'
@CH00045 DC    H'4'
@CH00080 DC    H'5'
@CH00263 DC    H'12'
@CH00068 DC    H'20'
@CH00181 DC    H'80'
@SM00895 MVC   CDSSYMBN(0,@15),$INBUFR+1(WAPTR)
         DS    0F
@SA00001 DS    18F
         DS    0F
@CF00055 DC    F'8'
@CV00845 DC    V(ISTSC021)
@CV00846 DC    V(ISTSC030)
@CV00851 DC    V(ISTIC007)
@CV00854 DC    V(ISTIC008)
@CV00858 DC    V(ISTIC009)
@CV00870 DC    V(ISTSC029)
         DS    0D
X        DC    F'0'
Y        DC    F'0'
RCAPTR   DS    A
CDSWKPTR DS    A
RETSAV   DS    F
Z        DC    XL1'0'
         DS    CL3
I        DC    XL1'0'
         DS    CL3
R        DC    XL1'0'
@CC00835 DC    C'        '
BLANK    DC    CL1' '
YES      DC    CL3'YES'
NO       DC    CL2'NO'
NONE     DC    CL4'NONE'
NUMBERIC DC    CL1'0'
DSPLYMSG DC    CL7'EXHIBIT'
THREE    DC    X'03'
WKAREA   DS    CL8
WKAREA1  DS    CL4
VERYTBL  DS    CL5
         ORG   VERYTBL
CDSPTR   DS    AL4
@NM00001 DC    X'00'
         ORG   VERYTBL+5
CDSTITLE DS    CL286
         ORG   CDSTITLE
TERMHD   DS    CL22
         ORG   TERMHD
@NM00012 DC    CL22'CONFIGURATION DATA    '
         ORG   CDSTITLE+22
SUBHD01  DS    CL22
         ORG   SUBHD01
@NM00013 DC    CL22'   FIELD         BYTES'
         ORG   CDSTITLE+44
UNITADHD DS    CL22
         ORG   UNITADHD
@NM00014 DC    CL22'UNIT ADDRESS     00-03'
         ORG   CDSTITLE+66
MODELHD  DS    CL22
         ORG   MODELHD
@NM00015 DC    CL22'MODEL               04'
         ORG   CDSTITLE+88
FEATHD   DS    CL22
         ORG   FEATHD
@NM00016 DC    CL22'FEATURE             05'
         ORG   CDSTITLE+110
CLASSHD  DS    CL22
         ORG   CLASSHD
@NM00017 DC    CL22'CLASS               06'
         ORG   CDSTITLE+132
TYPEHD   DS    CL22
         ORG   TYPEHD
@NM00018 DC    CL22'TYPE                07'
         ORG   CDSTITLE+154
BYTECTHD DS    CL22
         ORG   BYTECTHD
@NM00019 DC    CL22'BYTE COUNT          08'
         ORG   CDSTITLE+176
FLAG01HD DS    CL22
         ORG   FLAG01HD
@NM00020 DC    CL22'FLAGS            09-11'
         ORG   CDSTITLE+198
SYMNMEHD DS    CL22
         ORG   SYMNMEHD
@NM00021 DC    CL22'SYMBOLIC NAME    12-19'
         ORG   CDSTITLE+220
REMGHD   DS    CL22
         ORG   REMGHD
@NM00022 DC    CL22'REMAINING             '
         ORG   CDSTITLE+242
BLANKHD  DS    CL22
         ORG   BLANKHD
@NM00023 DC    CL22'                      '
         ORG   CDSTITLE+264
CONTNTHD DS    CL22
         ORG   CONTNTHD
@NM00024 DC    CL22'    CONTENTS          '
         ORG   CDSTITLE+286
         DS    CL1
$TCA09   DS    CL13
         ORG   $TCA09
$TCB09   DC    A(560)
$TCC09   DC    A(8)
$TCD09   DC    B'01000000'
$TCE09   DC    X'FFFFFFFF'
         ORG   $TCA09+13
         DS    CL3
$TCA10   DS    CL13
         ORG   $TCA10
$TCB10   DC    A(299)
$TCC10   DC    A(0)
$TCD10   DC    B'00000000'
$TCE10   DC    X'FFFFFFFF'
         ORG   $TCA10+13
         DS    CL3
$TCA11   DS    CL13
         ORG   $TCA11
$TCB11   DC    A(578)
$TCC11   DC    A(8)
$TCD11   DC    B'01000000'
$TCE11   DC    X'FFFFFFFF'
         ORG   $TCA11+13
         DS    CL3
ITATCPRM DS    CL14
         ORG   ITATCPRM
@NM00077 DC    X'0102F4F1'
ITATCFR  DS    AL4
ITATCTO  DS    AL4
@NM00078 DC    AL1(0)
         ORG   @NM00078
ITATCTP  DS    BL1
         ORG   ITATCPRM+13
ITATCNT  DS    FL1
         ORG   ITATCPRM+14
         DS    CL2
ZZZGTPRM DS    CL13
         ORG   ZZZGTPRM
@NM00079 DC    X'0102F1F6'
ZZZGTCD  DS    AL4
ZZZGTAD  DS    AL4
ZZZGTCT  DS    FL1
         ORG   ZZZGTPRM+13
         DS    CL3
$TCA14   DS    CL13
         ORG   $TCA14
$TCB14   DC    A(574)
$TCC14   DC    A(0)
$TCD14   DC    B'00000000'
$TCE14   DC    X'FFFFFFFF'
         ORG   $TCA14+13
         DS    CL3
$TCA24   DS    CL13
         ORG   $TCA24
$TCB24   DC    A(579)
$TCC24   DC    A(0)
$TCD24   DC    B'10000000'
$TCE24   DC    X'FFFFFFFF'
         ORG   $TCA24+13
CDSWORK  DS    CL20
FNCTBL   DS    CL31
         ORG   FNCTBL+0
DELETE   DS    CL7
         ORG   DELETE+0
@NM00002 DC    AL1(6)
@NM00003 DC    CL6'DELETE'
         ORG   FNCTBL+7
ADD      DS    CL4
         ORG   ADD+0
@NM00004 DC    AL1(3)
@NM00005 DC    CL3'ADD'
         ORG   FNCTBL+11
CHANGE   DS    CL7
         ORG   CHANGE+0
@NM00006 DC    AL1(6)
@NM00007 DC    CL6'CHANGE'
         ORG   FNCTBL+18
COPY     DS    CL5
         ORG   COPY+0
@NM00008 DC    AL1(4)
@NM00009 DC    CL4'COPY'
         ORG   FNCTBL+23
EXHIBIT  DS    CL8
         ORG   EXHIBIT+0
@NM00010 DC    AL1(7)
@NM00011 DC    CL7'EXHIBIT'
         ORG   FNCTBL+155
PATCH    DC    40F'0'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
REMPTR   EQU   @03
WKREG1   EQU   @05
WKREG2   EQU   @06
CALLREG  EQU   @07
LINKR    EQU   @14
CECMAP   EQU   @04
WAPTR    EQU   @02
R1       EQU   @01
R15      EQU   @15
R0       EQU   @00
R10      EQU   @10
R11      EQU   @11
R12      EQU   @12
R13      EQU   @13
R14      EQU   @14
R2       EQU   @02
R3       EQU   @03
R4       EQU   @04
R5       EQU   @05
R6       EQU   @06
R7       EQU   @07
R8       EQU   @08
R9       EQU   @09
TBLENTLN EQU   0
TBLENTRY EQU   0
REMAREA  EQU   0
$RCAAREA EQU   0
$POINTER EQU   $RCAAREA+100
$TRTBLA  EQU   $POINTER+124
$CONSTNT EQU   $RCAAREA+244
$RCAFLG  EQU   $RCAAREA+604
TOLTEPWA EQU   0
$SCTTBLE EQU   TOLTEPWA
$TESTOPT EQU   $SCTTBLE+2
$ERROPT  EQU   $SCTTBLE+3
$PDEVFLG EQU   $SCTTBLE+10
$CDSFLGS EQU   $SCTTBLE+11
$CDS8T19 EQU   $SCTTBLE+20
$EXECFLG EQU   $SCTTBLE+33
$OLTFLGS EQU   $SCTTBLE+36
$OLTFLG2 EQU   $SCTTBLE+37
$TOTFLG1 EQU   $SCTTBLE+38
$ROUTMSK EQU   $SCTTBLE+40
$CDA     EQU   TOLTEPWA+100
$RCA     EQU   $CDA+44
$OLTPTR  EQU   $CDA+52
$LOWADDR EQU   $OLTPTR
$HIMOREC EQU   $CDA+60
$COMMFLG EQU   TOLTEPWA+224
$FLAG1   EQU   $COMMFLG
$FLAG2   EQU   $COMMFLG+1
$FLAG3   EQU   $COMMFLG+2
$FLAG4   EQU   $COMMFLG+3
$FLAG5   EQU   $COMMFLG+4
$EOJ     EQU   $FLAG5
$CANCEL  EQU   $EOJ
$FLAG6   EQU   $COMMFLG+5
$CHANGE  EQU   $FLAG6
$ABNDBIT EQU   $FLAG6
$FLAG7   EQU   $COMMFLG+6
$FLAG8   EQU   $COMMFLG+7
$TCECM   EQU   $FLAG8
$FLAG9   EQU   $COMMFLG+8
$REMSW   EQU   $FLAG9
$COPY    EQU   $FLAG9
$FLAG10  EQU   $COMMFLG+9
$FLAG11  EQU   $COMMFLG+10
$FLAG12  EQU   $COMMFLG+11
$FLAG13  EQU   $COMMFLG+12
$DEVTBLE EQU   TOLTEPWA+240
$DEVCDS  EQU   $DEVTBLE
$DEVUNAD EQU   $DEVCDS
@NM00063 EQU   $DEVUNAD+2
$DEVFEAT EQU   $DEVCDS+4
$DEVCDSF EQU   $DEVCDS+9
$DEVSDCF EQU   $DEVCDS+10
$$SYMNME EQU   $DEVCDS+12
$DEVFLG1 EQU   $DEVTBLE+20
$EVNCPLT EQU   $DEVFLG1
$ATTNEXP EQU   $DEVFLG1
$INTOCC  EQU   $DEVFLG1
$DEVFLG2 EQU   $DEVTBLE+21
$DEVTECB EQU   $DEVTBLE+22
$OPIS    EQU   $DEVTECB
$OPND    EQU   $DEVTECB+2
$DEVFLG3 EQU   $DEVTBLE+27
$SIOFLG  EQU   $DEVFLG3
$IFTOUT  EQU   $DEVTBLE+36
$DEVSESP EQU   $IFTOUT
$SSCPDAF EQU   $IFTOUT+6
$LDNCBPT EQU   $DEVTBLE+48
$RNINFO  EQU   $DEVTBLE+56
$DEVFLG5 EQU   $RNINFO+8
$DEVFLG4 EQU   $DEVTBLE+65
$SLTBL   EQU   TOLTEPWA+1468
$RUNTEST EQU   $SLTBL+13
$TESTFLG EQU   $SLTBL+21
$SECLST  EQU   $SLTBL+22
$BUFFER  EQU   TOLTEPWA+1976
$INBUFR  EQU   TOLTEPWA+2104
#EXITA   EQU   TOLTEPWA+2632
$CCOMDAT EQU   TOLTEPWA+2644
$CFLGS   EQU   $CCOMDAT+16
$24FEMSG EQU   TOLTEPWA+2681
$24CATMG EQU   $24FEMSG+11
@NM00072 EQU   TOLTEPWA+2776
$OUNTPTR EQU   @NM00072+4
$NSPTR   EQU   $OUNTPTR
$NSCNT   EQU   @NM00072+10
$ENXX    EQU   @NM00072+15
$IMITX   EQU   $ENXX
SVESC033 EQU   TOLTEPWA+3160
SVECC013 EQU   TOLTEPWA+3232
SVEIC003 EQU   TOLTEPWA+3592
SVESC022 EQU   TOLTEPWA+3736
SVECC011 EQU   TOLTEPWA+4024
#EXIT    EQU   0
CECOMMAP EQU   0
CDSMAP   EQU   0
CDSUA    EQU   CDSMAP
CDSMFCT  EQU   CDSMAP+4
CDSMODEL EQU   CDSMFCT
CDSFEAT  EQU   CDSMFCT+1
CDSCLASS EQU   CDSMFCT+2
CDSTYPE  EQU   CDSMFCT+3
CDSBYTCT EQU   CDSMAP+8
CDSFLAG  EQU   CDSMAP+9
CDSSYMB  EQU   CDSFLAG
CDSREMSY EQU   CDSFLAG
CDSSYMBN EQU   CDSMAP+12
CDSEXARA EQU   CDSMAP+20
$TRTBL   EQU   0
PRNTBUF  EQU   $BUFFER
PRNTBUF1 EQU   PRNTBUF
FILLER   EQU   PRNTBUF+22
PRNTBUF2 EQU   PRNTBUF+26
SVECC012 EQU   SVESC022
SVEIC00A EQU   SVEIC003
SVEIC004 EQU   SVEIC003
SVEIC005 EQU   SVEIC003
SVESC02A EQU   SVESC022
SVESC02B EQU   SVESC022
SVESC02D EQU   SVESC022
SVESC02E EQU   SVESC022
SVESC02F EQU   SVECC013
SVESC024 EQU   SVESC022
SVESC027 EQU   SVESC022
SVESC029 EQU   SVESC033
SVESC031 EQU   SVECC013
SVESC032 EQU   SVECC011
SVETC037 EQU   SVEIC003
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
CDSEXTM  EQU   CDSFLAG+2
CDSEXTB  EQU   CDSFLAG+2
CDSTMERB EQU   CDSFLAG+2
@NM00076 EQU   CDSFLAG+1
CDSDVPRO EQU   CDSFLAG+1
CDSNTPRI EQU   CDSFLAG+1
CDSLINCN EQU   CDSFLAG
CDS2CHAN EQU   CDSFLAG
CDSEXTPR EQU   CDSFLAG
CDSFEVOL EQU   CDSFLAG
CDSSHAR  EQU   CDSFLAG
CDSFPMD  EQU   CDSFLAG
@NM00075 EQU   CDSFEAT
CDSDEVM  EQU   CDSFEAT
CDSDEVT  EQU   CDSFEAT
CDSASCII EQU   CDSFEAT
$CECFLAG EQU   CECOMMAP+20
$CEINCT  EQU   CECOMMAP+16
$CEINADR EQU   CECOMMAP+12
$CEOUTCT EQU   CECOMMAP+8
$CEOUTAD EQU   CECOMMAP+4
$CECIDNT EQU   CECOMMAP+2
$CECLEVL EQU   CECOMMAP+1
$CECTRMG EQU   CECOMMAP
SVECC010 EQU   TOLTEPWA+3952
SVETC035 EQU   TOLTEPWA+3880
SVESC030 EQU   TOLTEPWA+3808
SVESC020 EQU   TOLTEPWA+3664
SVEIC002 EQU   TOLTEPWA+3520
SVECC014 EQU   TOLTEPWA+3376
SVESC120 EQU   TOLTEPWA+3304
SVESC025 EQU   TOLTEPWA+3088
@NM00074 EQU   TOLTEPWA+2980
$RPLERR  EQU   TOLTEPWA+2977
@NM00073 EQU   TOLTEPWA+2976
$R13PR3  EQU   TOLTEPWA+2972
$CEINT2  EQU   TOLTEPWA+2968
$CEINT1  EQU   TOLTEPWA+2964
$MSGGET  EQU   TOLTEPWA+2960
$ACQLIST EQU   TOLTEPWA+2956
$R4SAVE1 EQU   TOLTEPWA+2952
$CLSISS  EQU   TOLTEPWA+2950
$CLSCNT  EQU   TOLTEPWA+2948
$CUTABLE EQU   TOLTEPWA+2868
$BUFSZ2  EQU   TOLTEPWA+2864
$RESID2  EQU   TOLTEPWA+2860
$OLTCCW2 EQU   TOLTEPWA+2856
$ENDBFR2 EQU   TOLTEPWA+2852
$1STBFR2 EQU   TOLTEPWA+2848
$TECB2   EQU   TOLTEPWA+2844
$BUFSZ1  EQU   TOLTEPWA+2840
$RESID1  EQU   TOLTEPWA+2836
$OLTCCW1 EQU   TOLTEPWA+2832
$ENDBFR1 EQU   TOLTEPWA+2828
$1STBFR1 EQU   TOLTEPWA+2824
$TECB1   EQU   TOLTEPWA+2820
$WAITIME EQU   TOLTEPWA+2816
$TRTN#   EQU   TOLTEPWA+2815
$WIODEV  EQU   TOLTEPWA+2814
$RQSTSZE EQU   TOLTEPWA+2812
$RQSTPTR EQU   TOLTEPWA+2808
$R4SAVE  EQU   TOLTEPWA+2804
$PARTADR EQU   TOLTEPWA+2800
$TBSDATA EQU   TOLTEPWA+2796
$CTWIDTH EQU   TOLTEPWA+2795
$CTLINE  EQU   TOLTEPWA+2794
$APWIDTH EQU   TOLTEPWA+2793
$APLINE  EQU   TOLTEPWA+2792
$INDEX   EQU   $IMITX
$UMXX    EQU   @NM00072+14
$NSXX    EQU   @NM00072+12
$ATACNT  EQU   $NSCNT
$CTR     EQU   @NM00072+8
$ATAPTR  EQU   $NSPTR
$DDRPTR  EQU   @NM00072
$DTORESP EQU   TOLTEPWA+2712
$APNAME  EQU   TOLTEPWA+2704
$24SYMNE EQU   $24CATMG+4
$24DEVAD EQU   $24CATMG
$24RTN#  EQU   $24FEMSG+8
$ESECTID EQU   $24FEMSG
$24FLGS  EQU   TOLTEPWA+2680
$24SAVE2 EQU   TOLTEPWA+2676
$24SAVE1 EQU   TOLTEPWA+2672
$24UNADR EQU   TOLTEPWA+2668
$24SAV13 EQU   TOLTEPWA+2664
$24RETCD EQU   TOLTEPWA+2663
$MACID   EQU   TOLTEPWA+2661
$CSPARE  EQU   $CFLGS
$C2WAY   EQU   $CFLGS
$CINCT   EQU   $CCOMDAT+12
$CINADR  EQU   $CCOMDAT+8
$COUTCT  EQU   $CCOMDAT+4
$COUTAD  EQU   $CCOMDAT
ROOTLOC  EQU   TOLTEPWA+2640
$RETREG  EQU   TOLTEPWA+2636
$WORK    EQU   TOLTEPWA+2376
$EXTA    EQU   TOLTEPWA+2320
$PASSONA EQU   TOLTEPWA+2264
$TRMINPT EQU   TOLTEPWA+2184
$TLTRPL3 EQU   TOLTEPWA+1856
$TLTRPL2 EQU   TOLTEPWA+1736
$TLTRPL1 EQU   TOLTEPWA+1616
@NM00071 EQU   $SLTBL+135
$HIGHRTN EQU   $SLTBL+134
$PRIMADR EQU   $SLTBL+130
$CTSTPT  EQU   $SLTBL+128
$TSTCNT  EQU   $SLTBL+126
$SECFLGS EQU   $SECLST+3
$SECTION EQU   $SECLST
$SECACT  EQU   $TESTFLG
$CANTRUN EQU   $TESTFLG
$FINAL   EQU   $TESTFLG
$TESTSUF EQU   $RUNTEST+5
$TESTNUM EQU   $RUNTEST+1
$LETPRF  EQU   $RUNTEST
$SYMBOLC EQU   $SLTBL+5
$FAMILY  EQU   $SLTBL
$CDEVPT  EQU   TOLTEPWA+1466
$DEVCNTS EQU   TOLTEPWA+1464
$FEEDBCK EQU   $DEVTBLE+66
$WTISUED EQU   $DEVFLG4
$EXIOISD EQU   $DEVFLG4
$REMWRIT EQU   $DEVFLG4
$REMDONE EQU   $DEVFLG4
$2NDUSED EQU   $DEVFLG4
$1STUSED EQU   $DEVFLG4
$IGLXIFB EQU   $DEVFLG4
$EXIOLV3 EQU   $DEVFLG4
@NM00070 EQU   $DEVFLG5
$DVBASIC EQU   $DEVFLG5
$ASCII   EQU   $DEVFLG5
$DEVLU   EQU   $DEVFLG5
$OPNDFAL EQU   $DEVFLG5
$ACQNCB  EQU   $DEVFLG5
$REMOTE  EQU   $DEVFLG5
$ENDNODE EQU   $DEVFLG5
$LINENME EQU   $RNINFO
$CID     EQU   $DEVTBLE+52
$DVCOL   EQU   $LDNCBPT+2
$DVROW   EQU   $LDNCBPT
$NCSPLP  EQU   $DEVTBLE+44
$DVLN    EQU   $SSCPDAF
$DAF     EQU   $DEVSESP+4
$VARYPAB EQU   $DEVSESP
$SYSMN   EQU   $DEVTBLE+28
@NM00069 EQU   $DEVFLG3
$CLRSNT  EQU   $DEVFLG3
$OLTERR  EQU   $DEVFLG3
$SRTEST  EQU   $DEVFLG3
$DVSNDOK EQU   $SIOFLG
$POLLREQ EQU   $DEVFLG3
$ACQRED  EQU   $DEVFLG3
$NOTDEV  EQU   $DEVFLG3
$DVINCT  EQU   $DEVTBLE+26
$DVBRKST EQU   $OPND+1
$DVBRKSN EQU   $OPND
$DVSEQNO EQU   $OPIS
$CEINTRP EQU   $DEVFLG2
$TESTMDE EQU   $DEVFLG2
$DEVALOC EQU   $DEVFLG2
$ALLDATA EQU   $DEVFLG2
$ENDCNTL EQU   $DEVFLG2
$CTLDEV  EQU   $DEVFLG2
$NOCDS   EQU   $DEVFLG2
$DATAIN  EQU   $DEVFLG2
$PRIMARY EQU   $DEVFLG1
$DVCTBYT EQU   $INTOCC
$DEVACT  EQU   $DEVFLG1
$DVLGMDE EQU   $ATTNEXP
$DVSPRM  EQU   $EVNCPLT
$GRABBED EQU   $DEVFLG1
$CATASTR EQU   $DEVFLG1
$LETGO   EQU   $DEVFLG1
$CURELEM EQU   $$SYMNME+4
$MSGOTSD EQU   $$SYMNME
$EXTDEV  EQU   $DEVCDS+11
@NM00068 EQU   $DEVSDCF
$NOTPRIM EQU   $DEVSDCF
@NM00067 EQU   $DEVCDSF
@NM00066 EQU   $DEVCDSF
@NM00065 EQU   $DEVCDSF
$CDSNAME EQU   $DEVCDSF
$EXTRN   EQU   $DEVCDSF
$CEVOLUM EQU   $DEVCDSF
$SHARD   EQU   $DEVCDSF
$DEVFPM  EQU   $DEVCDSF
$DEVCNT  EQU   $DEVCDS+8
$DEVTYPE EQU   $DEVFEAT+3
$DEVCLAS EQU   $DEVFEAT+2
$DEVFRRS EQU   $DEVFEAT+1
$DEVMOD  EQU   $DEVFEAT
$DEVRDGT EQU   @NM00063+1
$DEVCTLU EQU   @NM00063+1
$DEVCHAN EQU   @NM00063
@NM00064 EQU   @NM00063
$CTINDX  EQU   $DEVUNAD
$FLAG16  EQU   $COMMFLG+15
$FLAG15  EQU   $COMMFLG+14
$FLAG14  EQU   $COMMFLG+13
$TEP2ND  EQU   $FLAG13
$TEP1ST  EQU   $FLAG13
$CATMSG  EQU   $FLAG13
$PRMPTSW EQU   $FLAG13
$DEVENT  EQU   $FLAG13
$OLTMACC EQU   $FLAG13
$LGON    EQU   $FLAG13
$CTLOGON EQU   $FLAG13
@NM00062 EQU   $FLAG12
$VARYINP EQU   $FLAG12
$ENDTEST EQU   $FLAG12
$VRYHRD  EQU   $FLAG12
$VRYSFT  EQU   $FLAG12
$POSTFLG EQU   $FLAG12
$OPTMSG  EQU   $FLAG12
$FEORCAT EQU   $FLAG11
@NM00061 EQU   $FLAG11
@NM00060 EQU   $FLAG10
$INBND   EQU   $FLAG10
$WAITFLG EQU   $FLAG10
$DPRINT  EQU   $FLAG10
$HOLD    EQU   $FLAG9
$NOTRRCH EQU   $FLAG9
@NM00059 EQU   $FLAG9
$LSTLNSW EQU   $FLAG9
$MULLNSW EQU   $FLAG9
$IGRES   EQU   $FLAG9
$VS2     EQU   $FLAG8
$VS1     EQU   $FLAG8
$EDOS    EQU   $FLAG8
@NM00058 EQU   $FLAG8
$TWOWAY  EQU   $FLAG8
@NM00057 EQU   $FLAG8
$RCVMSG  EQU   $FLAG7
$RCVRFLG EQU   $FLAG7
$SNDRFLG EQU   $FLAG7
$LDOIS   EQU   $FLAG7
$DCONTCT EQU   $FLAG7
$EXIOWAT EQU   $FLAG7
$2NDDATA EQU   $FLAG7
$1STDATA EQU   $FLAG7
$CIREQ   EQU   $FLAG6
$ABTERM  EQU   $ABNDBIT
$FSTMCIS EQU   $FLAG6
$DISCREQ EQU   $FLAG6
$DISCISS EQU   $FLAG6
$CTERROR EQU   $FLAG6
$RECAL11 EQU   $FLAG6
@NM00056 EQU   $FLAG5
$PROGCK  EQU   $CANCEL
$PRINTAP EQU   $FLAG5
@NM00055 EQU   $FLAG5
$MSG922  EQU   $FLAG5
$CT924   EQU   $FLAG5
$FSTCAT  EQU   $FLAG5
$FSTFE   EQU   $FLAG5
$ACTOPND EQU   $FLAG4
$ACQCUTT EQU   $FLAG4
$CLSSACT EQU   $FLAG4
$BACKINT EQU   $FLAG4
$DMSGSW  EQU   $FLAG4
$TSTDEVP EQU   $FLAG4
$APRQPER EQU   $FLAG4
$OPCOM   EQU   $FLAG4
$NEWAP   EQU   $FLAG3
$ALTPRTR EQU   $FLAG3
$OPTERR  EQU   $FLAG3
$PRTONLY EQU   $FLAG3
$REQSTOR EQU   $FLAG3
$LOGOFFE EQU   $FLAG3
$TSTERR  EQU   $FLAG3
$DEVERR  EQU   $FLAG3
$PARTIAL EQU   $FLAG2
$NRMTERM EQU   $FLAG2
$VALDTST EQU   $FLAG2
$VALDDEV EQU   $FLAG2
$DBLSLSH EQU   $FLAG2
$NDR     EQU   $FLAG2
@NM00054 EQU   $FLAG2
$FTTHR   EQU   $FLAG2
$OLTACT  EQU   $FLAG1
$NORELDV EQU   $FLAG1
@NM00053 EQU   $FLAG1
$OPTCHNG EQU   $FLAG1
$DEVCHNG EQU   $FLAG1
$TESTCNG EQU   $FLAG1
$CNSLFG  EQU   $FLAG1
$TEP3RD  EQU   $FLAG1
@NM00052 EQU   $CDA+120
$CUCNT   EQU   $CDA+118
@NM00051 EQU   $CDA+117
$PRTFORM EQU   $CDA+116
$OPISCNT EQU   $CDA+114
$OPNDCNT EQU   $CDA+112
$GETMSZE EQU   $CDA+110
$GRCNTS  EQU   $CDA+108
$CTLCNT  EQU   $CDA+106
$ACTLVL  EQU   $CDA+105
$PRNTLVL EQU   $CDA+104
$ERRCNTA EQU   $CDA+102
$TLCNT   EQU   $CDA+100
$TIMEALW EQU   $CDA+96
$PTRAREA EQU   $CDA+92
$GETMPTR EQU   $CDA+88
$R13PTRT EQU   $CDA+84
$R13PTR  EQU   $CDA+80
$TEPEND  EQU   $CDA+76
$PLINKDL EQU   $CDA+72
$TEPBEGN EQU   $CDA+68
$FRELPTR EQU   $CDA+64
$HIGHADR EQU   $HIMOREC
$LOMOREC EQU   $CDA+56
$ENDCOMM EQU   $CDA+48
$COMMON  EQU   $RCA
$SLASHAD EQU   $CDA+32
$PASSON  EQU   $CDA+28
$TOLBRTB EQU   $CDA+24
$SCTPTR8 EQU   $CDA+20
$SCTPTR  EQU   $CDA+16
$TBWDPTR EQU   $CDA+12
$TFWDPTR EQU   $CDA+8
@NM00050 EQU   $CDA
@NM00049 EQU   $SCTTBLE+98
$SCTLWTC EQU   $SCTTBLE+96
$SCTLWTA EQU   $SCTTBLE+92
#EXT     EQU   $SCTTBLE+88
#PASS    EQU   $SCTTBLE+84
#TABLE   EQU   $SCTTBLE+80
#MSGIDAC EQU   $SCTTBLE+78
@NM00048 EQU   $SCTTBLE+71
$RETMASK EQU   $SCTTBLE+70
$R249255 EQU   $ROUTMSK+29
$R241248 EQU   $ROUTMSK+28
$R233240 EQU   $ROUTMSK+27
$R225232 EQU   $ROUTMSK+26
$R217224 EQU   $ROUTMSK+25
$R209216 EQU   $ROUTMSK+24
$R201208 EQU   $ROUTMSK+23
$R193200 EQU   $ROUTMSK+22
$R185192 EQU   $ROUTMSK+21
$R177184 EQU   $ROUTMSK+20
$R169176 EQU   $ROUTMSK+19
$R161168 EQU   $ROUTMSK+18
$R153160 EQU   $ROUTMSK+17
$R145152 EQU   $ROUTMSK+16
$R137144 EQU   $ROUTMSK+15
$R129136 EQU   $ROUTMSK+14
$R121128 EQU   $ROUTMSK+13
$R113120 EQU   $ROUTMSK+12
$R105112 EQU   $ROUTMSK+11
$R097104 EQU   $ROUTMSK+10
$R089096 EQU   $ROUTMSK+9
$R081088 EQU   $ROUTMSK+8
$R073080 EQU   $ROUTMSK+7
$R065072 EQU   $ROUTMSK+6
$R057064 EQU   $ROUTMSK+5
$R049056 EQU   $ROUTMSK+4
$R041048 EQU   $ROUTMSK+3
$R033040 EQU   $ROUTMSK+2
$R025032 EQU   $ROUTMSK+1
$R017024 EQU   $ROUTMSK
$TOTFLG2 EQU   $SCTTBLE+39
@NM00047 EQU   $TOTFLG1
@NM00046 EQU   $TOTFLG1
@NM00045 EQU   $TOTFLG1
$CURELOD EQU   $TOTFLG1
$CTEQTT  EQU   $TOTFLG1
@NM00044 EQU   $TOTFLG1
@NM00043 EQU   $TOTFLG1
$LINESHR EQU   $TOTFLG1
@NM00042 EQU   $OLTFLG2
@NM00041 EQU   $OLTFLG2
@NM00040 EQU   $OLTFLG2
@NM00039 EQU   $OLTFLG2
@NM00038 EQU   $OLTFLG2
@NM00037 EQU   $OLTFLG2
@NM00036 EQU   $OLTFLG2
$TALK    EQU   $OLTFLG2
$DYCOM   EQU   $OLTFLGS
@NM00035 EQU   $OLTFLGS
$TRACE   EQU   $OLTFLGS
$RETCODE EQU   $OLTFLGS
$CONTCB  EQU   $OLTFLGS
$RETAIN  EQU   $OLTFLGS
$CLEANRT EQU   $OLTFLGS
$MANINTV EQU   $OLTFLGS
$OLTSIZE EQU   $SCTTBLE+34
$QSCTMOD EQU   $EXECFLG
$CTRLMOD EQU   $EXECFLG
$CLEANUP EQU   $EXECFLG
$LSTPDEV EQU   $EXECFLG
$ERRCNT  EQU   $EXECFLG
$RTNSLCT EQU   $EXECFLG
$MULTDEV EQU   $EXECFLG
@NM00034 EQU   $EXECFLG
$RMSKCNT EQU   $SCTTBLE+32
$SYNAME  EQU   $CDS8T19+4
$EXTSIG  EQU   $CDS8T19+3
$CDFLGS  EQU   $CDS8T19+1
$CDSCNT  EQU   $CDS8T19
$PDEVDSC EQU   $SCTTBLE+16
$PDEVADR EQU   $SCTTBLE+12
$COMMCN  EQU   $CDSFLGS
$CUSTSYM EQU   $CDSFLGS
$TWOCHSW EQU   $CDSFLGS
$SYMNAME EQU   $CDSFLGS
$EXTINTC EQU   $CDSFLGS
$CEVOL   EQU   $CDSFLGS
$SHARED  EQU   $CDSFLGS
$FPM     EQU   $CDSFLGS
$LASTSUB EQU   $PDEVFLG
@NM00033 EQU   $PDEVFLG
@NM00032 EQU   $PDEVFLG
@NM00031 EQU   $PDEVFLG
$LASTDEV EQU   $PDEVFLG
@NM00030 EQU   $PDEVFLG
$EXFILPT EQU   $PDEVFLG
$FPMOLD  EQU   $PDEVFLG
$TSSSYM  EQU   $SCTTBLE+8
$SCTLEVL EQU   $SCTTBLE+7
$DRIVER  EQU   $SCTTBLE+6
$RT0916  EQU   $SCTTBLE+5
$RT0108  EQU   $SCTTBLE+4
$LOOPTST EQU   $ERROPT
$LOOPERR EQU   $ERROPT
$NERRPRT EQU   $ERROPT
$NOCNTRL EQU   $ERROPT
$ALTPRNT EQU   $ERROPT
$CATERR  EQU   $ERROPT
$ASTERIK EQU   $ERROPT
$TESTERR EQU   $ERROPT
$FSTCOMM EQU   $TESTOPT
$INDEFLP EQU   $TESTOPT
$NOPRT   EQU   $TESTOPT
$PARAPRT EQU   $TESTOPT
@NM00029 EQU   $TESTOPT
$ERRLPCT EQU   $SCTTBLE
$TLTEND  EQU   $RCAAREA+945
$CNSLID  EQU   $RCAAREA+936
$EXITSAV EQU   $RCAAREA+864
$TRASCII EQU   $RCAAREA+608
@NM00028 EQU   $RCAAREA+605
$VTAMEND EQU   $RCAFLG
$TPPOSTD EQU   $RCAFLG
$NEWCT   EQU   $RCAFLG
$ABNDALL EQU   $RCAFLG
$CUTESTB EQU   $RCAFLG
$CONSOLE EQU   $RCAFLG
$TPLOGON EQU   $RCAFLG
$UPDATE  EQU   $RCAFLG
$DEVAREA EQU   $RCAAREA+600
$CTDVAR  EQU   $RCAAREA+596
$BUFFS   EQU   $RCAAREA+464
$TLTNIB  EQU   $CONSTNT+140
$TLTPRPL EQU   $CONSTNT+20
@NM00027 EQU   $CONSTNT+4
@NM00026 EQU   $CONSTNT+2
$USECNT  EQU   $CONSTNT
$CURRTWA EQU   $POINTER+140
$CTNAME  EQU   $POINTER+132
$CTARGX  EQU   $POINTER+128
$COMINT  EQU   $POINTER+120
$QUEHNDL EQU   $POINTER+116
@NM00025 EQU   $POINTER+36
$RTNPTR  EQU   $POINTER+32
$TLTECB2 EQU   $POINTER+28
$TLTECB1 EQU   $POINTER+24
$CLEANP  EQU   $POINTER+20
$ABEND   EQU   $POINTER+16
$LSTAREA EQU   $POINTER+12
$FSTAREA EQU   $POINTER+8
$CVTSAVE EQU   $POINTER+4
$TOLTEP  EQU   $POINTER
$TLTACB  EQU   $RCAAREA
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00096 EQU   I006C02
@RF00149 EQU   I006C01
I006C02A EQU   I006C01
I006CRET EQU   @EL00001
@RT00173 EQU   I006C04
@RT00245 EQU   I006C02A
@RT00254 EQU   I006C02A
@RT00263 EQU   I006C05
@RT00277 EQU   I006C02A
@RT00087 EQU   I006CRET
@ENDDATA EQU   *
         END   ISTIC006,(C'PLS2104',0702,80232)
