         TITLE 'I F C E M A D 1  EDIT TABLE FOR 3350 SNB''S 0-7 AND FMTC
                1 8-23'
***  DSGEN MACRO     DSGEN MACRO     DSGEN MACRO     DSGEN MACRO    ***
         SPACE
         MACRO
&NAME    DSGEN
.*                            THIS MACRO GENERATES ONE DSECT WORD
.*                                 FORMATTED FOR THE SUBJECT LOG RECORD
.*                                 EACH OPERAND HAS TWO SUB LISTS. THE
.*                                 FIRST IS THE NAME OF THE LOG ITEM
.*                                 WHILE THE SECOND IS THE # OF BITS TO
.*                                 ALLOCATE FOR THIS ITEM. ITEMS MUST
.*                                 BE DEFINED CONTIGUOUSLY WITHOUT GAPS
.*                                 UNUSED BIT GROUPS MUST BE GIVEN
.*                                 DUMMY NAMES. THE NAMES PROVIDED FOR
.*                                 THE LOG ITEMS MAY THEN BE USED IN
.*                                 THE CONVERSION MACRO INSTRUCTIONS.
         GBLA  &BITS(3000),&ITEMNBR,&SHIFT(3000)
         GBLC  &ITEM(3000)
         LCLB  &ONLY1,&CTIND
         LCLA  &START1,&START2,&END1,&END2
         LCLC  &SYMBOL,&EQUSYM
         LCLA  &OP,&COUNT,&BYTE,&EQUCNT
         ACTR  100000
.START   AIF   (N'&SYSLIST(&OP+1) LT 3).LOOP
         AIF   ('&SYSLIST(&OP+1,3)' EQ 'EQU').LOOP     TEST FOR EQU
  AIF   ('&SYSLIST(&OP+1,3)' EQ '' OR '&SYSLIST(&OP+1,4)' EQ '').ERR1
         AIF   ('&SYSLIST(&OP+1,3)' GT '&SYSLIST(&OP+1,4)').ERR3
&START1  SETA  &SYSLIST(&OP+1,3)        GET START COUNT OF 1
&START2  SETA  &SYSLIST(&OP+1,4)        GET FIRST END COUNT
         AGO   .SET2A                   BRANCH AROUND
.ERR1    MNOTE '**FIRST SYMBOL CONCATENATION INCOMPLETE**'
         MEXIT
.SET2A   AIF   ('&SYSLIST(&OP+1,5)' EQ ''AND '&SYSLIST(&OP+1,6)' EQ '' X
               ).SET2                   TEST FOR NO SECOND
  AIF   ('&SYSLIST(&OP+1,5)' EQ '' OR '&SYSLIST(&OP+1,6)' EQ '').ERR2
         AIF   ('&SYSLIST(&OP+1,5)' GT '&SYSLIST(&OP+1,6)').ERR3
&END1    SETA  &SYSLIST(&OP+1,5)        GET START COUNT OF 2
&END2    SETA  &SYSLIST(&OP+1,6)        GET END COUNT OF 2
         AGO   .LOOP
.SET2    ANOP
&ONLY1   SETB  1                        INDICATE ONLY ONE CONCATENATION
         AGO   .LOOP
.ERR2    MNOTE '**SECOND SYMBOL CONCATENATION INCOMPLETE**'
         MEXIT
.ERR3    MNOTE '**START GREATER THAN END CONCATENATION**'
         MEXIT
.LOOP    ANOP
&OP      SETA  &OP+1
         AIF   (&OP GT N'&SYSLIST).DONE      TEST IF ALL DONE
&ITEMNBR SETA  &ITEMNBR+1
         AIF   ('&SYSLIST(&OP,2)' NE '').OK1
         MNOTE '**NULL BIT COUNT FIELD**'
         MEXIT
.OK1     ANOP
&SYMBOL  SETC  '&SYSLIST(&OP,1)'
         AIF   ('&SYMBOL' NE '').OK
*              *****     LOG ITEM SYMBOL NOT PROVIDED     *****
         AIF   ('&SYSLIST(&OP,3)' NE 'EQU').CNT
         AGO   .START                   GET NEXT
.OK      AIF   (N'&SYSLIST(&OP) LT 3).NO3    TEST FOR OLD FORMAT
         AIF   ('&SYSLIST(&OP,3)' EQ 'EQU').EQU   TEST FOR EQU
         AIF   (&ONLY1).OK2             TEST FOR ONLY ONE CONCAT
&SYMBOL  SETC  '&SYMBOL.&START1.&END1'       GET 1 AND 2 CONCAT
         AGO   .NO3                     BRANCH AROUND
.OK2     ANOP
&SYMBOL  SETC  '&SYMBOL.&START1'        GET 1 CONCATENATED
.NO3     ANOP
&SYMBOL  EQU   *+&BYTE
&ITEM(&ITEMNBR) SETC '&SYMBOL'          GET LABEL IN GLOBAL
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)
&SHIFT(&ITEMNBR) SETA &COUNT-&BYTE*8
.CNT     ANOP
&CTIND   SETB  1                        SET COUNT INDICATOR
&COUNT   SETA  &COUNT+&SYSLIST(&OP,2)
&BYTE    SETA  &COUNT/8
         AIF   (N'&SYSLIST(&OP) LT 3).START  TEST FOR OLD FORMAT
         AIF   (&ONLY1).TSTST           TEST FOR ONLY ONE CONCAT
         AIF   (&END1 EQ &END2).TSTST   TEST FOR SECOND END
&END1    SETA  &END1+1                  INCREMENT COUNT
&OP      SETA  &OP-1                    DECREMENT INCREMENT
         AGO   .LOOP                    GENERATE NEXT
.TSTST   ANOP
         AIF   (&START1 EQ &START2).LPDONE   TEST FOR END
         AIF   (&ONLY1).NSET1           TEST FOR ONLY ONE CONCAT
&END1    SETA  &SYSLIST(&OP,5)          RE-INIT SECOND START COUNT
.NSET1   ANOP
&OP      SETA  &OP-1                    DECREMENT INDEX
&START1  SETA  &START1+1                INCREMENT FIRST COUNT
         AGO   .LOOP                    GO DO NEXT
.LPDONE  ANOP
&ONLY1   SETB  0                        CLEAR INDICATOR
         AGO   .START                   GO TEST FOR MORE SUB-LISTS
.DONE    AIF   (&COUNT-&COUNT/8*8 NE 0).ERR  TEST FOR MULTIPLE OF EIGHT
         AIF   (&CTIND EQ 0).END        NO DS IF NO COUNT
&COUNT   SETA  &COUNT/8                 GET NUMBER OF BYTES
&NAME    DS    &COUNT.C
.END     MEXIT
.ERR     MNOTE '**BIT COUNT FLDS DO NOT TOTAL MULTIPLE OF 8**'
         MEXIT
.EQU     AIF   ('&SYSLIST(&OP,4)' NE '').EQU1     TEST FOR NULL LABEL
.ERR4    MNOTE '**EQU OPERAND OMITTED OR NOT FOUND**'
         MEXIT
.EQU1    AIF   (&SYSLIST(&OP,2) LT 16).EQU2  COUNT OVER FIFTEEN
*****               THE FOLLOWING STATEMENT                *****
*****     NUMBER OF BITS EXCEED 15 - DO NOT USE AS BIN     *****
.EQU2    ANOP
&EQUCNT  SETA  0                        CLEAR COUNTER
&EQUSYM  SETC  '&SYSLIST(&OP,4)'        GET EQU OPERAND
.EQULOP  ANOP
&EQUCNT  SETA  &EQUCNT+1                INCREMENT INDEX
         AIF   ('&ITEM(&EQUCNT)' EQ '&EQUSYM').EQUOUT  LABEL FOUND?
         AIF   (&EQUCNT EQ &ITEMNBR).ERR4    ALL TESTED?
         AGO   .EQULOP                  NO-GET NEXT
.EQUOUT  ANOP
&ITEM(&ITEMNBR) SETC '&SYMBOL'          GET LABEL NAME
&BITS(&ITEMNBR) SETA &SYSLIST(&OP,2)    GET NUMBER OF BITS
&SHIFT(&ITEMNBR) SETA &SHIFT(&EQUCNT)   GET SHIFT COUNT
&SYMBOL  EQU   &EQUSYM                  THIS SYMBOL EQUATED
         AGO   .START                   RETURN FOR NEXT
         MEND
         EJECT
***  BIN MACRO       BIN MACRO       BIN MACRO       BIN MACRO      ***
         SPACE
         MACRO
         BIN
.*                                 &SYSLIST(&OP,1) - NAME OF LOG ITEM
.*                                      RECORD DSECT
.*                                 $SYSLIST(&OP,2) - NBR OF SPACES
.*                                      TO SKIP ON MULTIPLE
.*                                      PRINT OR NBR OF SPACES
.*                                      TO BACK UP FROM COLUMN FOR
.*                                      START OF PRINTING. THE LETTER
.*                                      B PRECEEDS THE NUMBER (B5) IF
.*                                      THE LATTER IS DESIRED. OMISSION
.*                                      OF THIS OPERAND FORCES OPTION 2
.*                                      WITH BACKUP SPACING EQUAL TO
.*                                 THE NUMBER OF BITS IN THE ITEM
.*                                 DEFINITION (VIA MACRO 'DSGEN').
.*                            A LIMIT OF 15 BITS IS IMPOSED FOR THE
.*                                 TOTAL NUMBER OF BITS TO PRINT.
         GBLA  &INITIAL
         GBLB  &DIAGTST,&DIAGSET,&DIAGLIN
         GBLC  &ITEM(3000),&DSECT
         GBLA  &BITS(3000),&ITEMNBR,&SHIFT(3000),&NRENTS
         LCLB  &B,&SUB
         LCLA  &IBITS,&NDX,&ISHIFT,&K
         LCLA  &TEMP,&T,&OP
         LCLC  &S
         ACTR  500000
         AIF   (&DIAGTST EQ 0).NOMSG
         AIF   (&INITIAL EQ 0).NOMSG
         AIF   (&DIAGLIN EQ 1).NOMSG
         MNOTE '**NO LINE ASSOCIATED WITH THIS DATA**'
*****THE FOLLOWING GENERATED FOR TEST PURPOSES*****
*        LINE
         LINE
.NOMSG   ANOP
         AIF   (K'&SYSLIST(1) EQ K'&SYSLIST(1,1)).LOOP
&SUB     SETB  1
.LOOP    ANOP
&OP      SETA  &OP+1
.LOOP1   ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&SYSLIST(&OP,1)').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP1
         MNOTE '**LOG ITEM NOT DEFINED**'
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
         AIF   (&SUB EQ 1).SUB00
         AIF   ('&SYSLIST(3)' EQ '').SETT
&IBITS   SETA  &SYSLIST(3)
         AGO   .SETT
.SUB00   AIF   ('&SYSLIST(&OP,3)' EQ '').SETT
&IBITS   SETA  &SYSLIST(&OP,3)
.SETT    ANOP
&T       SETA  &IBITS-1
&B       SETB  0
         AIF   (&IBITS GT 0 AND &IBITS LT 16).SUB0
         MNOTE '**NO. OF BITS OUTSIDE RANGE OF 1-15**'
         MEXIT
.SUB0    AIF   (&SUB EQ 1).SUBA
         AIF   ('&SYSLIST(2)' EQ '').BACKUP
&K       SETA  K'&SYSLIST(2)
&B       SETB  ('&SYSLIST(2)'(1,1) EQ 'B')
&S       SETC  '&SYSLIST(2)'(&B+1,&K-&B)
         AGO   .SUBB
.SUBA    ANOP
         AIF   ('&SYSLIST(&OP,2)' EQ '').BACKUP
&K       SETA  K'&SYSLIST(&OP,2)
&B       SETB  ('&SYSLIST(&OP,2)'(1,1) EQ 'B')
&S       SETC  '&SYSLIST(&OP,2)'(&B+1,&K-&B)
.SUBB    ANOP
&T       SETA  &S
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
&TEMP    SETA  &ISHIFT
         AIF   (&IBITS NE 1 OR &B NE 0).BIN2
         DC    AL.12(&SYSLIST(&OP,1)-&DSECT),XL.4'&TEMP'
         AGO   .OUT
.BIN2    AIF   (&SUB EQ 1).BIN2A
         AIF   ('&SYSLIST(2)' NE '').BIN3
         AGO   .BIN2B
.BIN2A   AIF   ('&SYSLIST(&OP,2)' NE '').BIN3
.BIN2B   ANOP
&B       SETB  1
.BIN3    ANOP
         DC    AL.12(&SYSLIST(&OP,1)-&DSECT),XL.4'C'
         DC    BL.1'&B',AL.7(&T),AL.4(&IBITS),FL.4'&ISHIFT'
.OUT     ANOP
&NDX     SETA  0
         AIF   (&SUB EQ 0).OUTA
         AIF   (&OP LT N'&SYSLIST).LOOP
.OUTA    ANOP
         MEND
         EJECT
***  HEX MACRO       HEX MACRO       HEX MACRO       HEX MACRO      ***
         SPACE
         MACRO
         HEX
.*                            THIS MACRO FACILITATES GENERATION OF THE
.*                                 TABLE ENTRIES SPECIFYING HEX TYPE
.*                                 CONVERSIONS.
.*                            &SYSLIST(&OP,1) - NAME OF DATA ITEM TO BE
.*                                 CONVERTED
.*                            &SYSLIST(&OP,2) - # OF SPACES TO SKIP ON
.*                                 MULTIPLE PRINT OR NBR OF SPACES TO
.*                                 BACK UP FROM COLUMN FOR START OF
.*                                 PRINTING. THE LETTER B PRECEEDS THE
.*                                 NUMBER (B8) IF THE LATTER OPTION IS
.*                                 DESIRED. OMISSION OF THIS OPERAND
.*                                 FORCES OPTION 2 WITH BACKUP SPACING
.*                                 EQUAL TO THE NUMBER OF BYTES SPECI-
.*                                 FIED BY THE NEXT OPERAND (TWICE THIS
.*                                 NUMBER IF SUFFIX IS EXPLICITLY OR
.*                                 IMPLICITLY B).
.*                            &SYSLIST(&OP,3) - NUMBER OF BYTES TO
.*                                 PROCESS. THIS NUMBER IS SUFFIXED
.*                                 WITH AN L,R, OR B TO STIPULATE
.*                                 PRINTING OF THE LEFT HALF, RIGHT
.*                                 HALF, OR BOTH HALVES OF THE BYTE
.*                                 RESPECTIVELY. OMISSION OF THIS
.*                                 OPERAND DEFAULTS TO B WITH THE NUM-
.*                                 BER OF BYTES EQUAL TO THE ITEM LNGTH
.*                            A NEW ENTRY IS GENERATED ONLY WHEN NECES-
.*                                 SARY. THIS MACRO MUST BE THE FIRST
.*                                 MACRO INSTRUCTION ISSUED FOR THE
.*                                 SUBJECT LINE(S).
         GBLA  &BITS(3000),&ITEMNBR,&SHIFT(3000),&NRENTS
         GBLC  &ITEM(3000),&DSECT
         GBLA  &INITIAL
         GBLB  &DIAGTST,&DIAGSET,&DIAGLIN
         LCLB  &B,&SUB
         LCLA  &IBITS,&NDX,&ISHIFT,&K,&T,&CODE,&BYTESP,&OP
         LCLC  &S,&LETTER
         ACTR  500000
         AIF   (&DIAGTST EQ 0).NOMSG
         AIF   (&INITIAL EQ 0).NOMSG
         AIF   (&DIAGLIN EQ 1).NOMSG
         MNOTE '**NO LINE ASSOCIATED WITH THIS DATA**'
*****THE FOLLOWING GENERATED FOR TEST PURPOSES*****
*        LINE
         LINE
.NOMSG   ANOP
         AIF   (K'&SYSLIST(1) EQ K'&SYSLIST(1,1)).LOOP
&SUB     SETB  1
.LOOP    ANOP
&OP      SETA  &OP+1
.LOOP1   ANOP
&NDX     SETA  &NDX+1
         AIF   ('&ITEM(&NDX)' EQ '&SYSLIST(&OP,1)').FOUND
         AIF   (&NDX LT &ITEMNBR).LOOP1
         MNOTE '**LOG ITEM NOT DEFINED**'
         MEXIT
.FOUND   ANOP
&ISHIFT  SETA  &SHIFT(&NDX)
&IBITS   SETA  &BITS(&NDX)
         AIF   (&ISHIFT EQ 0 OR &ISHIFT EQ 4).ALIGN
.ERR     MNOTE '**DATA NOT ALLIGNED ON HEX OR BYTE BOUNDARY**'
         MEXIT
.ALIGN   ANOP
&CODE    SETA  1
         AIF   (&SUB EQ 1).SUBA
&K       SETA  K'&SYSLIST(3)
         AGO   .SUBB
.SUBA    ANOP
&K       SETA  K'&SYSLIST(&OP,3)
.SUBB    ANOP
         AIF   (&K EQ 1).ERR3
         AIF   (&IBITS-(&IBITS/4)*4 EQ 0).OK
         MNOTE '**BIT LENGTH SPECIFICATION INCONSISTENT WITH CONTROL**'
         MEXIT
.OK      AIF   (&SUB EQ 1).SUBC
         AIF   ('&SYSLIST(3)' EQ '').USEDEFN
&LETTER  SETC  '&SYSLIST(3)'(&K,1)
&S       SETC  '&SYSLIST(3)'(1,&K-1)
         AGO   .SUBD
.SUBC    ANOP
         AIF   ('&SYSLIST(&OP,3)' EQ '').USEDEFN
&LETTER  SETC  '&SYSLIST(&OP,3)'(&K,1)
&S       SETC  '&SYSLIST(&OP,3)'(1,&K-1)
.SUBD    ANOP
&BYTESP  SETA  &S
         AIF   ('&LETTER' EQ 'B').BOTH
         AIF   ('&LETTER' EQ 'L').LEFT
         AIF   ('&LETTER' EQ 'R').RIGHT
.ERR3    MNOTE '**PARAMETER 3 INCOMPLETE-DSGEN DEFINITION USED**'
         AGO   .USEDEFN
.RIGHT   ANOP
&CODE    SETA  2
         AGO   .L
.LEFT    ANOP
&CODE    SETA  1
         AGO   .L
.USEDEFN ANOP
&BYTESP  SETA  &IBITS/8
.BOTH    AIF   (&ISHIFT NE 0).ERR
&CODE    SETA  3
&T       SETA  &BYTESP*2-1
&S       SETC  '&T'
.OK2     AIF   (&ISHIFT EQ 0).L
&CODE    SETA  2
.L       ANOP
&B       SETB  1
         AIF   (&SUB EQ 1).SUBE
         AIF   ('&SYSLIST(2)' EQ '').BACKUP
&K       SETA  K'&SYSLIST(2)
&B       SETB  ('&SYSLIST(2)'(1,1) EQ 'B')
&S       SETC  '&SYSLIST(2)'(&B+1,&K-&B)
         AGO   .SUBF
.SUBE    ANOP
         AIF   ('&SYSLIST(&OP,2)' EQ '').BACKUP
&K       SETA  K'&SYSLIST(&OP,2)
&B       SETB  ('&SYSLIST(&OP,2)'(1,1) EQ 'B')
&S       SETC  '&SYSLIST(&OP,2)'(&B+1,&K-&B)
.SUBF    ANOP
.BACKUP  ANOP
&NRENTS  SETA  &NRENTS+1
         AIF   (&BYTESP GT 0 AND &BYTESP LT 16).SUB0
         MNOTE '**NO. OF BYTES OUTSIDE RANGE OF 1-15**'
         MEXIT
.SUB0    AIF   (&SUB EQ 1).SUBG
         DC    AL.12(&SYSLIST(1)-&DSECT),XL.4'A'
         AGO   .SUBH
.SUBG    ANOP
         DC    AL.12(&SYSLIST(&OP,1)-&DSECT),XL.4'A'
.SUBH    ANOP
         DC    BL.1'&B',FL.7'&S',AL.4(&BYTESP),FL.4'&CODE'
.OUT     ANOP
&NDX     SETA  0
         AIF   (&SUB EQ 0).OUTA
         AIF   (&OP LT N'&SYSLIST).LOOP
.OUTA    ANOP
         MEND
         EJECT
***  LINE MACRO      LINE MACRO      LINE MACRO      LINE MACRO     ***
         SPACE
         MACRO
&NAME    LINE  &DATA,&LABEL,&SKIP=
.*                            THIS MACRO ESTABLISHES THE MARGINS OR
.*                                 COLUMN SETTINGS FOR EACH LINE. IT
.*                                 GENERATES NECESSARY CARRIAGE CONTROL
.*                                 ENTRIES. LASTLY IT DETERMINES THE
.*                                 NUMBER OF ENTRIES ASSOCIATED WITH
.*                                 THE PREVIOUS LINE AND STORES THAT #
.*                                 INTO THE APPROPRIATE BYTE.
.*                            &DATA(1) - CHARACTER POSITION TO BEGIN
.*                                 DATA.
.*                            &DATA(2) - # OF SPACES BETWEEN SUCCESSIVE
.*                                 DATA COLUMN STARTING CHARACTERS.
.*                            &LABEL(1) - CHAR. POS. TO BEGIN LABELS.
.*                            &LABEL(2) - # SPACES BETWEEN LINE'S LABEL
.*                                 STARTING CHARACTERS.
.*                            &SKIP= - # OF LINES TO ADVANCE CARRIAGE
.*                                 TO BEGIN NEXT PRINTED LINE.
.*                            NEW ENTRIES ARE GENERATED ONLY WHEN
.*                                 NECESSARY. OMISSION OF ITEMS MEANS
.*                                 THEY HAVE NOT CHANGED SINCE PREVIOUS
.*                                 SETTINGS. A LINE MACRO IS REQUIRED
.*                                 FOR EACH PRINTED LINE. IF NO SETTING
.*                                 CHANGES ARE REQUIRED ALL OPERANDS
.*                                 ARE OMITTED IN WHICH CASE ONLY THE
.*                                 # OF ENTRIES FOR THE PREVIOUS LINE
.*                                 IS COMPUTED. THIS MACRO MUST BE THE
.*                                 FIRST MACRO INSTRUCTION ISSUED FOR
.*                                 THE SUBJECT LINE
         GBLA  &DB,&DT,&LB,&LT,&NRENTS
         GBLA  &LASTCC,&INITIAL
         GBLC  &NRENTSX
         GBLC  &CARRCON
         GBLB  &TEST
         GBLB  &DIAGTST,&DIAGSET,&DIAGLIN
         LCLA  &S
         AIF   (&INITIAL EQ 0 OR &DIAGTST EQ 0).DIAGSET
         AIF   (&DIAGSET EQ 0).DIAGSET
         MNOTE '**NO LABEL ASSOCIATED WITH LAST SET**'
***** THE FOLLOWING GENERATED FOR TEST PURPOSES *****
*        LABEL '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
               LABEL '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
.DIAGSET ANOP
&DIAGSET SETB  1
&DIAGLIN SETB  1
&NAME    DS    0C
         AIF   (&INITIAL EQ 0).FIRSTLN
         LINEND
         AGO   .NTFIRST
.FIRSTLN ANOP
&NRENTSX SETC  'N&SYSNDX'
&INITIAL SETA  1
N&SYSNDX EQU   *
.NTFIRST ANOP
         DC    AL1(0)
         AIF   ('&DATA(1)' EQ '').CKDTABS
         AIF   (&DATA(1) EQ &DB).CKDTABS
&DB      SETA  &DATA(1)
         AGO   .AA
.CKDTABS AIF   ('&DATA(2)' EQ '').NCDATA
         AIF   (&DATA(2) EQ &DT).NCDATA
         AGO   .CC
.AA      AIF   ('&DATA(2)' EQ '').BB
         AIF   (&DATA(2) EQ &DT).BB
.CC      ANOP
&DT      SETA  &DATA(2)
.BB      DC    XL2'FFFE'
         DC    FL1'&DB'
         DC    FL1'&DT'
&NRENTS  SETA  &NRENTS+1
.NCDATA  ANOP
         AIF   ('&LABEL(1)' EQ '').CKLTABS
         AIF   (&LABEL(1) EQ &LB).CKLTABS
&LB      SETA  &LABEL(1)
         AGO   .AAA
.CKLTABS AIF   ('&LABEL(2)' EQ '').NCLABEL
         AIF   (&LABEL(2) EQ &LT).NCLABEL
         AGO   .CCC
.AAA     AIF   ('&LABEL(2)' EQ '').BBB
         AIF   (&LABEL(2) EQ &LT).BBB
.CCC     ANOP
&LT      SETA  &LABEL(2)
.BBB     DC    XL2'FFFF'
         DC    FL1'&LB'
         DC    FL1'&LT'
&NRENTS  SETA  &NRENTS+1
.NCLABEL ANOP
         AIF   ('&SKIP' NE '').CONT
         AIF   (&TEST EQ 0).NOCHANG
         AGO   .DEFALTA
.CONT    ANOP
         AIF   (&TEST EQ 0).AB
         AIF   ('&SKIP' EQ 'E').AB
&S       SETA  &SKIP
.DEFAULT ANOP
         AIF   (&SKIP EQ &LASTCC).DEFALTA
         ORG   &CARRCON+3
         DC    AL.3(0),AL.2(&S),AL.3(1)
         ORG
&LASTCC  SETA  &S
.DEFALTA ANOP
&TEST    SETB  0
         AGO   .DD
.AB      AIF   ('&SKIP' NE 'E').ABB
A&SYSNDX DC    X'FFFB8B00'              EJECT
         AGO   .ABC
.ABB     AIF   (&SKIP EQ &LASTCC).NOCHANG
A&SYSNDX DC    XL2'FFFB'
         DC    AL.3(0),AL.2(&SKIP),AL.3(1)
         DC    AL.3(0),AL.2(&SKIP),AL.3(1)
&LASTCC  SETA  &SKIP
&TEST    SETB  1
.ABC     ANOP
&CARRCON SETC  'A&SYSNDX'
&NRENTS  SETA  &NRENTS+1
.DD      ANOP
.NOCHANG ANOP
         MEND
         SPACE 3
***  ROUTINE MACRO   ROUTINE MACRO   ROUTINE MACRO   ROUTINE MACRO  ***
         SPACE
         MACRO
&NAME    ROUTINE &LOGITEM,&RNAME
         GBLA  &NRENTS
         GBLC  &DSECT,&CSECT
         GBLA  &INITIAL
         GBLB  &DIAGTST,&DIAGSET,&DIAGLIN
         AIF   (&DIAGTST EQ 0).NOMSG
         AIF   (&INITIAL EQ 0).NOMSG
         AIF   (&DIAGLIN EQ 1).NOMSG
         MNOTE '**NO LINE ASSOCIATED WITH THIS ROUTINE**'
*****THE FOLLOWING GENERATED FOR TEST PURPOSES*****
*        LINE
         LINE
.NOMSG   ANOP
&NAME    DC    AL.12(&LOGITEM-&DSECT),XL.4'D'
         DC    AL2(&RNAME-&CSECT)
&NRENTS  SETA  &NRENTS+1
         MEND
         EJECT
***  LABEL MACRO     LABEL MACRO     LABEL MACRO     LABEL MACRO    ***
         SPACE
         MACRO
&NAME    LABEL &LABEL1,&LABEL2,&LABEL3,&LABEL4,&LABEL5,&LABEL6,        C
               &LABEL7,&LABEL8
.*                                 THIS MACRO ALLOWS LABELS TO
.*                                 BE SPECIFIED FOR A GIVEN LINE. THE
.*                                 LABELS SHOULD BE ENCLOSED IN QUOTA-
.*                                 TION MARKS. THE COLUMN AND LINE END
.*                                 CONTROLS WILL BE INSERTED BY THE
.*                                 MACRO. OMITTED OPERANDS MEAN NO
.*                                 LABEL REQUIRED FOR RESPECTIVE
.*                                 COLUMN.
         GBLC &LABELS(2000)
         GBLC  &LBL(100)
         GBLA  &LBLCTR(100)
         GBLA  &LABELNR
         GBLA  &NRENTS,&LPTR,&INITIAL
         GBLB  &DIAGTST,&DIAGSET,&DIAGLIN
         LCLC  &MARGIN,&TACK
         LCLC  &TEXT
         LCLA  &OP,&K,&START,&NRCHAR,&REMAIN
         AIF   (&INITIAL EQ 0).DIAGCLR
         AIF   (&DIAGTST EQ 0).DIAGCLR
         AIF   (&DIAGLIN EQ 1).DIAGCLR
         MNOTE '**NO LINE ASSOCIATED WITH PREVIOUS LABEL**'
***** THE FOLLOWING GENERATED FOR TEST PURPOSES *****
*        LINE
         LINE
.DIAGCLR ANOP
&DIAGSET SETB  0
&DIAGLIN SETB  0
&MARGIN  SETC  '*'
         AIF   ('&NAME' EQ '').LOOPOUT
&LPTR    SETA  &LPTR+1
&LBL(&LPTR) SETC '&NAME'
&LBLCTR(&LPTR) SETA &LABELNR+1
.LOOPOUT ANOP
&OP      SETA  &OP+1
&K       SETA  K'&SYSLIST(&OP)
         AIF (&K GE 2).NORM
&K       SETA  2
.NORM    ANOP
&START   SETA  2
         AIF (&OP LT N'&SYSLIST).NOTLAST
&MARGIN  SETC  '$'
.NOTLAST ANOP
&NRCHAR  SETA  8
&TACK    SETC  ''
.LOOPIN  ANOP
&REMAIN  SETA  &K-&START
         AIF (&REMAIN GE 8).MORE
&TACK    SETC  '&MARGIN'
&NRCHAR  SETA  &REMAIN
.MORE    ANOP
&TEXT    SETC  ''
         AIF (&REMAIN EQ 0).ENDTEXT
&TEXT    SETC  '&SYSLIST(&OP)'(&START,&NRCHAR)
.ENDTEXT ANOP
&LABELNR SETA  &LABELNR+1
&LABELS(&LABELNR) SETC '&TEXT'.'&TACK'
&START   SETA  &START+8
         AIF ('&TACK' EQ '').LOOPIN
         AIF ('&TACK' EQ '*').LOOPOUT
         MEND
         EJECT
***  LSTART MACRO    LSTART MACRO    LSTART MACRO    LSTART MACRO   ***
         SPACE
         MACRO
         LSTART
.*                            THIS MACRO IS ISSUED WHEN THE LABEL AREA
.*                                 OF THE TABLE IS TO BEGIN.
         GBLA  &LABELNR
         GBLC  &LBL(100)
         GBLC &LABELS(2000)
         GBLA  &LBLCTR(100)
         GBLB  &DIAGTST,&DIAGSET,&DIAGLIN
         LCLA  &NDX,&CTR
         AIF   (&DIAGTST EQ 0).NODIAG
         AIF   (&DIAGSET EQ 0).NODIAG
         MNOTE '**NO LABEL ASSOCIATED WITH LAST SET**'
***** THE FOLLOWING GENERATED FOR TEST PURPOSES *****
*        LABEL '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
               LABEL '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'
.NODIAG  ANOP
         LINEND
&CTR     SETA  1
.LOOP    ANOP
&NDX     SETA  &NDX+1
         AIF   (&LBLCTR(&CTR) NE &NDX).NOLBL
&LBL(&CTR) DC  C'&LABELS(&NDX)'
&CTR     SETA  &CTR+1
         AGO   .LOOPCTL
.NOLBL   ANOP
         DC    C'&LABELS(&NDX)'
.LOOPCTL AIF   (&NDX LT &LABELNR).LOOP
         MEND
         SPACE 3
***  LINEND MACRO    LINEND MACRO    LINEND MACRO    LINEND MACRO   ***
         SPACE
         MACRO
         LINEND
.*                            THIS MACRO IS USED ONLY BY THE LINE
.*                                 MACRO TO SET THE NUMBER OF ENTRIES
.*                                 ASSOCIATED WITH EACH LINE.
         GBLA  &NRENTS
         GBLC &NRENTSX
         AIF   (&NRENTS EQ 0).NORENTS   TEST FOR NO COUNT
         ORG   &NRENTSX
         DC    FL1'&NRENTS'
         ORG
&NRENTS  SETA  0
.NORENTS ANOP
B&SYSNDX EQU   *
&NRENTSX SETC  'B&SYSNDX'
         MEND
         EJECT
         GBLC  &DSECT,&CSECT
IFCEMAD1 CSECT
&CSECT   SETC  'IFCEMAD1'
&DSECT   SETC  'MAD1'
*
*        SENSE 0-7 AND 8-23 FOR FORMAT 1
*
MAD1     DSECT
         DSGEN (CLASRC,8),(SYSREL,8),(SWITCHES,8),(SW1,8)
         DSGEN (SW2,8),(SW3,8),(SPARE1,16)
         DSGEN (DAY,32),(HOUR,32)
         DSGEN (SPARE2,8),(CPUSERL,24),(CPUID,16),(SPARE3,16)
         DSGEN (JOBID,64)
         DSGEN (FAILCCW,64)
         DSGEN (CSW,64)
         DSGEN (DEVDPD,8),(SECCUA,24),(DEVTYP1,16),(DEVTYP2,16)
         DSGEN (SDRCNT,8),(CUA,24),(IORET,16),(SBCNT,16)
         DSGEN (VOLLABL,48),(SPARE4,16)
         DSGEN (LASTSK,64)
         DSGEN (HOMEADR,32),(SPARE5,32)
         DSGEN (SNB,1,0,23,0,7)
         EJECT
***********************************************************************
*                                                                     *
*                                                                     *
*                THIS ENTIRE MODULE IS IN SUPPORT OF @Z30RSAG         *
*                                                                     *
*                                                                     *
***********************************************************************
         SPACE
IFCEMAD1 CSECT
         USING *,R9
         SPACE
R0       EQU   0                       R
R1       EQU   1                        E
R2       EQU   2                         G
R3       EQU   3                          I
R4       EQU   4                           S
R5       EQU   5                            T
R6       EQU   6                             E
R7       EQU   7                              R
R8       EQU   8
R9       EQU   9                                E
R10      EQU   10                                Q
R11      EQU   11                                 U
R12      EQU   12                                  A
R13      EQU   13                                   T
R14      EQU   14                                    E
R15      EQU   15                                     S
         SPACE 2
L0       EQU   0                       EQUATES
L1       EQU   1
L2       EQU   2
L3       EQU   3                               FOR
L4       EQU   4
L5       EQU   5
L6       EQU   6                                   LENGTHS
L7       EQU   7
L8       EQU   8
L9       EQU   9                               AND
L10      EQU   10
L11      EQU   11
L12      EQU   12                                  DISPLACEMENTS
L13      EQU   13
L14      EQU   14
L15      EQU   15
L24      EQU   24
         EJECT
H10      EQU   X'10'                   H
H20      EQU   X'20'                    E
H30      EQU   X'30'                     X
H40      EQU   X'40'
H50      EQU   X'50'
H08      EQU   X'08'                        VALUES
H80      EQU   X'80'
         EJECT
         DC    A(ENTRIES)
         DC    CL8'IFCEMAD1'
XR9PTR   DC    F'0'
XLABELP  DC    F'0'
         SPACE 2
*
*        ALL THE FOLLOWING ROUTINES ARE EXECUTED
*              VIA THE 'ROUTINE' MACRO - NOTE: R3=ADR OF PRINT POSITION
*                                              R4=ADR OF DATA IN RECORD
         SPACE
*      SET HEX - PRINTS ONE CHARACTER HEX
SETHEX   STM   R5,R8,XSAVE             SAVE REGS
         LA    R8,CHARS                LOAD ADDR OF CHAR. TABLE
         IC    R7,L0(R4)               INSERT BYTE TO BE CONVERTED
         SLL   R7,L24                  SHIFT TO HIGH ORDER BYTE
         SR    R6,R6                   CLEAR REG
         SLDL  R6,L4                   SHIFT IN 4 BITS
         AR    R6,R8                   ADD ADDR TO OFFSET
         MVC   L0(L1,R3),L0(R6)        MOVE CHARACTER TO PRINT LINE
         SR    R6,R6                   CLEAR REG
         SLDL  R6,L4                   SHIFT IN NEXT 4 BITS
         AR    R6,R8                   ADD ADDR OT OFFSET
         MVC   L1(L1,R3),L0(R6)        MOVE CHAR TO PRINT LINE
         B     RETURN                  RETURN
*
*      THE FOLLOWING SETS BINARY DIGITS TO PRINTABLE HEX
*
SETBIN   STM   R5,R8,XSAVE             SAVE REGS
         IC    R7,L0(R4)               INSERT BYTE
         SLL   R7,L24                  SHIFT BYTE TO HIGH ORDER
         LR    R8,R3                   LOAD ADDR OF PRINT POSITION
         LA    R5,L8                   LOAD LOOP COUNT
SETBINA  SR    R6,R6                   CLEAR REG
         SLDL  R6,L1                   SHIFT ONE BIT TO REG
         STC   R6,L0(R8)               STORE BIT IN PRINT POSITION
         MVZ   L0(L1,R8),CHAR0         MOVE 'F' IN FRONT OF BIT
         LA    R8,L1(R8)               BUMP PRINT POS PTR
         BCT   R5,SETBINA              BR TO DO NEXT BIT
         B     RETURN                  RETURN
         SPACE
SETBIN2  STM   R5,R8,XSAVE             SAVE REGS
         IC    R7,L0(R4)               INSERT BYTE
         SLL   R7,L24                  SHIFT IT TO HIGH ORDER
         LR    R8,R3                   LOAD PRINT POSITION ADDR
         LA    R5,L8                   LOAD LOOP COUNT
         S     R8,ELEVEN               SUBTRACT FROM PRINT POSITION
         B     SETBINA                 BR TO CONVERT
         EJECT
*
*      CHECK FORMAT OF RECORD - IF ITS FORMAT 1,CONTINUE
*                             - IF ITS FORMAT 0 OR 2-5 CALL A NEW MOD
*
CHKFMT   STM   R5,R8,XSAVE             SAVE REGS
         SR    R15,R15                 DONT PRINT THIS LINE
         SR    R5,R5                   CLEAR REG
         TM    L0(R4),H50              IS IT FORMAT 5
         BO    CALLFMT5                YES - BR
         SPACE
         TM    L0(R4),H40              IS IT FORMAT 4
         BO    CALLFMT4                YES - BR
         SPACE
         TM    L0(R4),H30              IS IT FORMAT 3
         BO    CALLFMT3                YES - BR
         SPACE
         TM    L0(R4),H20              IS IT FORMAT 2
         BO    CALLFMT2                YES - BR
         SPACE
         TM    L0(R4),H10              IS IT FORMAT 1
         BO    RETURN                  YES - BR TO RETURN - CONTINUE
         SPACE 2
CALLFMT0 LA    R5,FE0-L4               LOAD ADDR OF MODULE NAME
         ST    R5,XR9PTR               STORE ADDR FOR EREP
         B     RETURN                  RETURN TO CALL MODULE
         SPACE
CALLFMT2 LA    R5,FE2-L4               LOAD ADDR OF MODULE NAME
         ST    R5,XR9PTR               STORE ADDR FOR EREP
         B     RETURN                  RETURN TO CALL MODULE
         SPACE
CALLFMT3 LA    R5,FE3-L4               LOAD ADDR OF MODULE NAME
         ST    R5,XR9PTR               STORE ADDR FOR EREP
         B     RETURN                  RETURN TO CALL MODULE
         SPACE
CALLFMT4 LA    R5,FE4-L4               LOAD ADDR OF MODULE NAME
         ST    R5,XR9PTR               STORE ADDR FOR EREP
         B     RETURN                  RETURN TO CALL MODULE
         SPACE
CALLFMT5 LA    R5,FE5-L4               LOAD ADDR OF MODULE NAME
         ST    R5,XR9PTR               STORE ADDR FOR EREP
         B     RETURN                  RETURN TO CALL MODULE
         EJECT
FE0      DC    X'FE'
         DC    CL8'IFCEMER0'           FORMAT 0 EDIT TABLE
         SPACE
FE2      DC    X'FE'
         DC    CL8'IFCEMER2'           FORMAT 2 EDIT TABLE
         SPACE
FE3      DC    X'FE'
         DC    CL8'IFCEMER3'           FORMAT 3 EDIT TABLE
         SPACE
FE4      DC    X'FE'
         DC    CL8'IFCEMER4'           FORMAT 4 EDIT TABLE
         SPACE
FE5      DC    X'FE'
         DC    CL8'IFCEMER5'           FORMAT 5 EDIT TABLE
         SPACE
*
*      THE FOLLOWING MOVES A UNIQUE LABEL FOR BYTE 8,BIT 5
*        DEPENDING ON THE SETTING OF BYTE 19 BIT 0.
*
         SPACE
SETLAB   S     R3,TOCOLONE             SUBTRACT TO PT TO COL ONE
         TM    L0(R4),H80              IS THE R/W BIT ON
         BO    MOVEWRSN                YES - BR TO MOVE LABEL
         MVC   L0(L11,R3),MODA         MOVE LABEL
         BR    R14                     RETURN
         SPACE
MOVEWRSN MVC   L0(L11,R3),WRSN         MOVE LABEL
         BR    R14                     RETURN
         SPACE 2
*
*      THE FOLLOWING MOVES A UNIQUE LABEL FOR BYTE 8,BIT 6
*        DEPENDING ON THE SETTING OF BYTE 19 BIT 0
*
SETLAB1  S     R3,TOCOLONE             SUBTRACT TO PT TO COLUMN ONE
         TM    L0(R4),H80              IS THE R/W BIT ON
         BO    MOVEINMK                YES - BR TO MOVE LABEL
         MVC   L0(L11,R3),BUSY         MOVE LABEL
         BR    R14                     RETURN
         SPACE
MOVEINMK MVC   L0(L11,R3),INMK         MOVE LABEL
         BR    R14                     RETURN
         EJECT
*
*      THE FOLLOWING MOVES A UNIQUE LABEL FOR BYTE 8,BIT 7
*        DEPENDING ON THE SETTING OF BYTE 19 BIT 0
*
SETLAB2  S     R3,TOCOLONE             SUBTRACT TO PT TO COLUMN ONE
         TM    L0(R4),H80              IS THE R/W BIT ON
         BO    MOVEACTK                YES - BR
         MVC   L0(L11,R3),SSCM         MOVE LABEL
         BR    R14                     RETURN
         SPACE
MOVEACTK MVC   L0(L11,R3),ACTK         MOVE LABEL
         BR    R14                     RETURN
         SPACE 2
*
*      THE FOLLOWING RESTORES REGISTERS USED BY ROUTINES IN THIS
*        MODULE AND RETURNS TO EREP0
*
RETURN   LM    R5,R8,XSAVE             RESTORE REGS
SKIPPER  BR    R14                     RETURN TO EREP
         SPACE 5
*
*      THE FOLLOWING STORAGE CONSTANTS ARE USED IN THE
*        PREVIOUS ROUTINES
*
         SPACE
         DS    0F
XSAVE    DC    5F'0'                   REG SAVE AREA
         SPACE
ELEVEN   DC    F'11'
TOCOLONE DC    F'132'
         SPACE
CHARS    DC    C'0123456789ABCDEF'     HEX CHARACTER TABLE
CHAR0    DC    C'0'
         SPACE
MODA     DC    CL11'MOD ATTENTN'
WRSN     DC    CL11'I WR SENSE'
BUSY     DC    CL11'BUSY'
INMK     DC    CL11'INDEX MARK'
SSCM     DC    CL11'SK/SCTR COM'
ACTK     DC    CL11'ACTIVE TRK'
         EJECT
*                                                                     *
*   E D I T  T A B L E  F O R  S E N S E  B Y T E S  0 - 7            *
*                                                                     *
*        O N  A  3 3 5 0 ( M A D R I D )                              *
*                                                                     *
ENTRIES  DS    0F
         DC    XL4'00010001'
         DC    XL4'00010001'
         DC    A(LABELS)               LABEL POINTER
         DC    H'0'
         SPACE
*
*        SKIP TO CHANNEL 1
*
         DC    X'01'
         DC    X'000B0B00'
         SPACE 2
         LINE  (12,15),(3,15),SKIP=1
         ROUTINE   SNB00,SETHEX
         ROUTINE   SNB10,SETHEX
         ROUTINE   SNB20,SETHEX
         ROUTINE   SNB30,SETHEX
         ROUTINE   SNB40,SETHEX
         ROUTINE   SNB50,SETHEX
         ROUTINE   SNB60,SETHEX
         ROUTINE   SNB70,SETHEX
         LABEL 'BYTE 0','BYTE 1','BYTE 2','BYTE 3','BYTE 4','BYTE 5',  C
               'BYTE 6','BYTE 7'
         LINE  ,(1,1),SKIP=2
         ROUTINE   SPARE1,SKIPPER
         LABEL '----------UNIT CHECK DESCRIPTION-----------  RESTART CMC
               D    PHYSICAL ID    LOW CYLINDER   HI CYL/LOG TRK FORMATC
               /MSG'
         LINE  (13,15),(1,15),SKIP=1
         BIN   (SNB00),(SNB10),(SNB20)
         ROUTINE   SNB30,SETBIN2
         BIN   (SNB40),(SNB50),(SNB60),(SNB70)
         LABEL 'COMMAND REJ','PERM ERROR','           ',' ','DRIVE A', C
               'CYL 128','CYL 1024','FORMAT  8'
         LINE  (13,15),(1,15)
         BIN   (SNB01),(SNB11),(SNB21),(SNB31)
         BIN   (SNB41),(SNB51),(SNB61),(SNB71)
         LABEL 'INTERVN REQ','INV TRK FMT','CORRECTABLE','             X
               ','DRIVE B','CYL  64','CYL 512  ','FORMAT  4'   @XM09337
         LINE
         BIN   (SNB02),(SNB12),(SNB22),(SNB32)
         BIN   (SNB42),(SNB52),(SNB62),(SNB72)
         LABEL 'BUS OUT PAR','END OF CYL','ALT. CNTLR','             ',C
               'DRIVE C','CYL  32','CYL 256  ','FORMAT  2'     @XM09337
         LINE
         BIN   (SNB03),(SNB13),(SNB23),(SNB33)
         BIN   (SNB43),(SNB53),(SNB63),(SNB73)
         LABEL 'EQUIPMNT CK',' ','ENV DATA PR','             ',        C
               'DRIVE D','CYL  16','LOG TRK 16','FORMAT  1'
         LINE
         BIN   (SNB04),(SNB14),(SNB24),(SNB34)
         BIN   (SNB44),(SNB54),(SNB64),(SNB74)
         LABEL 'DATA CHECK','NO REC FND','COMPAT MODE',       *@X12827WC
               '             ',                               *@X12827WC
               'DRIVE E','CYL   8','LOG TRK 8','MESSAGE 8'
         LINE
         BIN   (SNB05),(SNB15),(SNB25),(SNB35)
         BIN   (SNB45),(SNB55),(SNB65),(SNB75)
         LABEL 'OVERRUN','FILE PROTCT','FIXED HEAD',          *@X12827WC
               '             ','DRIVE F',                              *
               'CYL   4','LOG TRK 4','MESSAGE 4'
         LINE
         BIN   (SNB06),(SNB16),(SNB26)                         @XA11914
         ROUTINE SNB36,SKIPPER                                 @XA11914
         BIN   (SNB46),(SNB56),(SNB66),(SNB76)
         LABEL '           ','WRT INHIBIT','           ',              X
               '           ',                                          C
               'DRIVE G','CYL   2','LOG TRK 2','MESSAGE 2'
         LINE  ,,SKIP=3
         BIN   (SNB07),(SNB17),(SNB27),(SNB37)
         BIN   (SNB47),(SNB57),(SNB67),(SNB77)
         LABEL '          ','OP INCOMPLT','           ',               X
               '             ',                                        C
               'DRIVE H','CYL   1','LOG TRK 1','MESSAGE 1'
         LINE  ,,SKIP=1
         ROUTINE   SNB70,CHKFMT
         LABEL ' '
         EJECT
*
*   E D I T  T A B L E  F O R  S E N S E  B Y T E S  8 - 2 3
*
*        F O R  F O R M A T  1
*
         LINE  (12,15),(3,15),SKIP=1
         ROUTINE   SNB80,SETHEX
         ROUTINE   SNB90,SETHEX
         ROUTINE   SNB100,SETHEX
         ROUTINE   SNB110,SETHEX
         ROUTINE   SNB120,SETHEX
         ROUTINE   SNB130,SETHEX
         ROUTINE   SNB140,SETHEX
         ROUTINE   SNB150,SETHEX
         LABEL 'BYTE 8','BYTE 9','BYTE 10','BYTE 11','BYTE 12',        C
               'BYTE 13','BYTE 14','BYTE 15'
         LINE  ,(1,1),SKIP=2
         ROUTINE   SPARE1,SKIPPER
         LABEL 'DRIVE STATUS   DRIVE CK/STAT  SEQUENCE CNTRL LOAD SW STC
               ATUS R/W SAFETY     DCI BUS OUT    DCI BUS IN     DCI TAC
               G BUS'
         LINE  (13,15),(1,15),SKIP=1
         BIN   (SNB80),(SNB90),(SNB100),(SNB110)
         BIN   (SNB120),(SNB130),(SNB140),(SNB150)
         LABEL 'CNTRLR CK','PAD-IN-PROG','HDA MODEPAR','DR START SW',  C
               'MULTI-HD CK','BIT 0','BIT 0','BIT 0'           @XA11915
         LINE
         BIN   (SNB81),(SNB91),(SNB101),(SNB111)
         BIN   (SNB121),(SNB131),(SNB141),(SNB151)
         LABEL 'INTRFACE CK','SECT COM CK','HDA 4 LATCH',      @XA11915C
               'GUARD BAND','CAP/ENAB CK','BIT 1','BIT 1','BIT 1'
         LINE
         BIN   (SNB82),(SNB92),(SNB102),(SNB112)
         BIN   (SNB122),(SNB132),(SNB142),(SNB152)
         LABEL 'DRIVE CHECK','MOT AT SP L','HDA 2 LATCH',      @XA11915C
               'TARGET VELO','WRITE OVRUN','BIT 2','BIT 2','BIT 2'
         LINE
         BIN   (SNB83),(SNB93),(SNB103),(SNB113)
         BIN   (SNB123),(SNB133),(SNB143),(SNB153)
         LABEL 'R/W CHECK','AIR BT SW L','HDA 1 LATCH',        @XA11915C
               'TRACK CROSS','INDEX CHECK','BIT 3','BIT 3','BIT 3'
         LINE
         BIN   (SNB84),(SNB94),(SNB104),(SNB114)
         BIN   (SNB124),(SNB134),(SNB144),(SNB154)
         LABEL 'ON LINE','WRT ENABLE','HDA TMR CHK','        ',        C
               'R/W INTR CK','BIT 4','BIT 4','BIT 4'           @XA11915
         LINE
         BIN   (SNB85),(SNB95),(SNB105),(SNB115)
         BIN   (SNB125),(SNB135),(SNB145),(SNB155)
         ROUTINE   SNB190,SETLAB
         LABEL 'HDA ATN PIP','FIX HD INST','HDA SEQ LAT',      @XA11915C
               'AIR SW','CONTROL CK','BIT 5','BIT 5','BIT 5'   X12827MD
         LINE  (13,15),(1,15)
         BIN   (SNB86),(SNB96),(SNB106),(SNB116)
         BIN   (SNB126),(SNB136),(SNB146),(SNB156)
         ROUTINE   SNB190,SETLAB1
         LABEL 'BUSY','3330','   ','   ','TRANSINT CK',        @XA11915C
               'BIT 6','BIT 6','BIT 6'                         @XA11915
         LINE  ,,SKIP=3
         BIN   (SNB87),(SNB97),(SNB107),(SNB117)
         BIN   (SNB127),(SNB137),(SNB147),(SNB157)
         ROUTINE   SNB190,SETLAB2
         LABEL 'SK COMP','3350 NATIVE','ODD TRACK','MT AT SP SW',      C
               'I WRT RD CK','BIT 7','BIT 7','BIT 7'           @XA11915
         LINE  (12,15),(3,15),SKIP=1
         ROUTINE   SNB160,SETHEX
         ROUTINE   SNB170,SETHEX
         ROUTINE   SNB180,SETHEX
         ROUTINE   SNB190,SETHEX
         ROUTINE   SNB200,SETHEX
         ROUTINE   SNB210,SETHEX
         ROUTINE   SNB220,SETHEX
         ROUTINE   SNB230,SETHEX
         LABEL 'BYTE 16','BYTE 17','BYTE 18','BYTE 19','BYTE 20',      C
               'BYTE 21','BYTE 22','BYTE 23'
         LINE  ,(1,15),SKIP=2
         ROUTINE   SPARE1,SKIPPER
         LABEL 'ACCESS STATUS','CNTRLR CHKS','MICRO DETCD ER',         C
               'STATUS','INTERFACE CKS','DR INTF CK',                  *
               '-----ERROR SYMPTOM CODE-----'
         LINE  (13,15),(1,15),SKIP=1
         BIN   (SNB160),(SNB170),(SNB180),(SNB190),(SNB200)
         ROUTINE   SNB210,SETBIN2
         ROUTINE   SNB220,SETBIN2
         ROUTINE   SNB230,SETBIN2
         LABEL 'TIME-OUT CK','VFO PH CK','   ','SET R/W ON',   @XA11915C
               'CTL TAG CK',' '
         LINE
         BIN   (SNB161),(SNB171),(SNB181),(SNB191),(SNB201)
         LABEL 'OVRSHOOT CK','TR REOR CK ',' ',' ','CTL B/O CK',' '
         LINE
         BIN   (SNB162),(SNB172),(SNB182),(SNB192),(SNB202)
         LABEL 'SERVO OFF TK','SER/DES CK',' ',' ',            X12827MDC
               'DEV SEL CK ',' '
         LINE
         BIN   (SNB163),(SNB173),(SNB183),(SNB193),(SNB203)
         LABEL 'REZERO MODE','COUNTER CHK',' ',' ','DEV B/I CK',' '
         LINE
         BIN   (SNB164),(SNB174),(SNB184),(SNB194),(SNB204)
         LABEL 'SERVO LATCH','WRT DATA CK','MESSAGE  8','HD SHRT CK',  C
               'CTL B/I CK',' '
         LINE
         BIN   (SNB165),(SNB175),(SNB185),(SNB195),(SNB205)
         LABEL 'LIN MOD LAT','MONITOR CK','MESSAGE  4','PAD GATE CK',  *
               'I WRT FAIL ',' '
         LINE
         BIN   (SNB166),(SNB176),(SNB186),(SNB196),(SNB200)
         LABEL 'CONTROL LAT','ECC CHECK','MESSAGE 2','1.2 MB FILE',    C
               '3330 IND CHK','BO PAR CK'                      @XA11915
         LINE  ,,SKIP=1
         BIN   (SNB167),(SNB177),(SNB187),(SNB197),(SNB207)
         LABEL 'WAIT LATCH','ECC ZEROES','MESSAGE  1','FHF',           *
               'REOR CTL CK','TAG PAR CK'
         LINE
         ROUTINE   SPARE1,SKIPPER
         LABEL ' '
         SPACE 2
         DC    X'FF'
         DC    XL2'0070'
         DC    XL2'0018'
         DC    XL2'0000'
*
LABELS   DS    0F
         DC    C'$'
         LSTART
         SPACE 2
         END
