         TITLE 'IFCESUMS-SUMMARY MODULE FOR IFCEREP0'
IFCESUMS CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IFCESUMS  79.010'                                 0001
         DROP  @15
@PROLOG  ST    @14,12(,@13)                                        0001
         STM   @00,@04,20(@13)                                     0001
         STM   @06,@12,44(@13)                                     0001
         BALR  @11,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@11                                         0001
         ST    @13,@SA00001+4                                      0001
         LA    @14,@SA00001                                        0001
         ST    @14,8(,@13)                                         0001
         LR    @13,@14                                             0001
*/********************************************************************/
*/*                                                          @Z427VLS*/
*/*      SECTION CONSTRUCTS A PART OF THE HEADER FROM THE RECORD     */
*/*      AND CCHHR TABLE TO DETERMINE IF ANOTHER REC HAS BEEN SUMMED */
*/*      AND MATCHES THIS REC. IF SO NO NEW AREA IS GOTTEN. IF NO    */
*/*      MATCH A NEW AREA IS GOTTEN AND CHAINED TO THIS ONE  @Z427VLS*/
*/*                                                          @Z427VLS*/
*/********************************************************************/
*   SAVE4 = R4;                                            /*@D3506GB*/
         ST    R4,SAVE4                                            0090
*RETCODE = ZERO;                                           /*@Z427VLS*/
         SLR   @12,@12                                             0091
         STH   @12,RETCODE                                         0091
* SWES = '00'X;                                            /*@Z427VLS*/
         MVI   SWES,X'00'                                          0092
* IF LRTTYP = '34'X × LRTTYP = '32'X THEN  /* TCAM OR CONVERTED REC  */
         CLI   LRTTYP(REG7),X'34'                                  0093
         BE    @RT00093                                            0093
         CLI   LRTTYP(REG7),X'32'                                  0093
         BNE   @RF00093                                            0093
@RT00093 DS    0H                                                  0094
*   IF LRDISMNT = OFF &                 /* MUST BE AN OBR(30) WITH   */
*      SHRTSW  = OFF &                  /* SHORT SW & DISMOUNT SW OFF*/
*      (LRTCAMID & '0F'X)='0F'X THEN    /* AND TCAM ID SW EQUAL TO 0F*/
         TM    LRDISMNT(REG7),B'00100100'                          0094
         BNZ   @RF00094                                            0094
         MVC   @TS00001(1),LRTCAMID(REG7)                          0094
         NI    @TS00001,X'0F'                                      0094
         CLI   @TS00001,X'0F'                                      0094
         BNE   @RF00094                                            0094
*         TCAMSWIT = ON;                /* THEN TCAM SW IS SET       */
         OI    TCAMSWIT,B'10000000'                                0095
* IF  LRTTYP='36'X THEN                 /* SEE IF VTAM       @Z427VLS*/
@RF00094 DS    0H                                                  0096
@RF00093 CLI   LRTTYP(REG7),X'36'                                  0096
         BNE   @RF00096                                            0096
*   TCAMSWIT = ON;                      /* IF YES, TURN ON TCAM SWITC*/
         OI    TCAMSWIT,B'10000000'                                0097
* SAVERTYP = LRTTYP & FOXZERO;                             /*@Z427VLS*/
@RF00096 MVC   SAVERTYP(1),LRTTYP(REG7)                            0098
         NI    SAVERTYP,X'F0'                                      0098
* IF SAVERTYP = '90'X THEN              /* TEST FOR T-TYPE RECORD    */
         CLI   SAVERTYP,X'90'                                      0099
         BNE   @RF00099                                            0099
*   DO;                                                    /*@Z427VLS*/
*     /*                                                     @Z427VLS*/
*     /* IF DEVICE ID IS ANY OF THE FOLLOWING, THEN THE RECORD IS    */
*     /* TREATED AS AN OBR AND THE EXTRA 8 BYTES IS NOT NEEDED.      */
*     /* OTHERWISE THE MDR-TYPE SWITCH IS SET.               @Z427VLS*/
*     /*                                                     @Z427VLS*/
*     IF LRTRECID = '03'X ×            /* 3277               @D3503VS*/
*        LRTRECID = '06'X ×            /* 3670               @D3503VS*/
*        LRTRECID = '07'X ×            /* 3168               @D3503VS*/
*        LRTRECID = '08'X ×            /* 2715               @D3503VS*/
*        LRTRECID = '0B'X ×            /* 3277               @D3503VS*/
*        LRTRECID = '13'X THEN         /* 3277               @D3503VS*/
         CLI   LRTRECID(REG7),X'03'                                0101
         BE    @RT00101                                            0101
         CLI   LRTRECID(REG7),X'06'                                0101
         BE    @RT00101                                            0101
         CLI   LRTRECID(REG7),X'07'                                0101
         BE    @RT00101                                            0101
         CLI   LRTRECID(REG7),X'08'                                0101
         BE    @RT00101                                            0101
         CLI   LRTRECID(REG7),X'0B'                                0101
         BE    @RT00101                                            0101
         CLI   LRTRECID(REG7),X'13'                                0101
         BNE   @RF00101                                            0101
@RT00101 DS    0H                                                  0102
*          TTYPSWIT = ON;                                  /*@Z427VLS*/
         OI    TTYPSWIT,B'01000000'                                0102
*   END;                                                   /*@Z427VLS*/
@RF00101 DS    0H                                                  0104
* IF TTYPSWIT = ON ×                    /* TEST FOR T TYPE OR TCAM   */
*    TCAMSWIT = ON THEN                 /* RECORDS           @Z427VLS*/
@RF00099 TM    TTYPSWIT,B'11000000'                                0104
         BZ    @RF00104                                            0104
*      IF TTYPSWIT = ON &               /* TEST FOR T TYPE & VAR SUB */
*         LRVARIDS = ON THEN            /* ID FIELD.  IF VAR SUB ID  */
         TM    TTYPSWIT,B'01000000'                                0105
         BNO   @RF00105                                            0105
         TM    LRVARIDS(REG7),B'10000000'                          0105
         BNO   @RF00105                                            0105
*           HDRBUMP=16;                 /* SET BUMP VALUE TO 16      */
         MVC   HDRBUMP(4),@CF00086                                 0106
*      ELSE                             /* IF IT IS T TYPE OR TCAM   */
*           HDRBUMP=8;                  /* SET VALUE TO 8    @Z427VLS*/
         B     @RC00105                                            0107
@RF00105 MVC   HDRBUMP(4),@CF00063                                 0107
* ELSE                                  /* IF IT NEITHER T TYPE OR   */
*    HDRBUMP = ZERO;                    /* TCAM SET VALUE TO ZERO    */
         B     @RC00104                                            0108
@RF00104 SLR   @12,@12                                             0108
         ST    @12,HDRBUMP                                         0108
* HOLDTYPE=SMACCTAB;                    /* BUILD COMPARE VALUE FROM  */
@RC00104 MVC   HOLDTYPE(5),SMACCTAB(REG4)                          0109
* HOLDCPUN=LRCPUNOS;               /* CCHHR TABLE(R4) AND CPUSER (R2)*/
         MVC   HOLDCPUN(5),LRCPUNOS(REG7)                          0110
* /*                                                         @Z427VLS*/
* /* CHECK FOR SHARED I/O AND CHANGE CUA AND CPU IF REQUIRED @Z427VLS*/
* /*                                                         @Z427VLS*/
* IF SHAREPTR ^= ZERO & (SAVERTYP = '30'X × SAVERTYP = '90'X) THEN 0111
         L     @12,SHAREPTR(,R2)                                   0111
         LTR   @12,@12                                             0111
         BZ    @RF00111                                            0111
         CLI   SAVERTYP,X'30'                                      0111
         BE    @RT00111                                            0111
         CLI   SAVERTYP,X'90'                                      0111
         BNE   @RF00111                                            0111
@RT00111 DS    0H                                                  0112
*   DO;                                                    /*@Z427VLS*/
*     VALIDSHR = OFF;                        /* TURN OFF FOR SEARCH  */
         NI    VALIDSHR,B'11101111'                                0113
*     IF SAVERTYP = '90'X THEN               /* MDR RECORD   @Z427VLS*/
         CLI   SAVERTYP,X'90'                                      0114
         BNE   @RF00114                                            0114
*       SHR34CUA = LRTMCUA;                                /*@Z427VLS*/
         MVC   SHR34CUA(2),LRTMCUA(REG7)                           0115
*     ELSE                                                         0116
*       IF SHRTSW = ON THEN                                        0116
         B     @RC00114                                            0116
@RF00114 TM    SHRTSW(REG7),B'00100000'                            0116
         BNO   @RF00116                                            0116
*         SHR34CUA = LRTSCUA;                /* CUA FOR SHORT OBR    */
         MVC   SHR34CUA(2),LRTSCUA(REG7)                           0117
*       ELSE                                                       0118
*         SHR34CUA = LRTCUA;                 /* CUA FOR LONG OBR     */
         B     @RC00116                                            0118
@RF00116 MVC   SHR34CUA(2),LRTCUA(REG7)                            0118
*     SHR34CPU = LRCPUNOS(1:3);              /* CPU FOR COMPARISON   */
@RC00116 DS    0H                                                  0119
@RC00114 MVC   SHR34CPU(3),LRCPUNOS(REG7)                          0119
*     DO J = 1 TO SHARENUM BY 1 WHILE(VALIDSHR = OFF);     /*@Z427VLS*/
         LA    @12,1                                               0120
         STH   @12,J                                               0120
         B     @DE00120                                            0120
@DL00120 TM    VALIDSHR,B'00010000'                                0120
         BNZ   @DC00120                                            0120
*       IF SHAREFLG(J)=LETTERS&SHARSERA(J)=SHR34CPU&               0121
*         SHR34CUA>=SHRCUAAL(J)&SHR34CUA<=SHRCUAAH(J)  THEN        0121
         SLA   @12,4                                               0121
         L     @10,SHAREPTR(,R2)                                   0121
         ST    @12,@TF00001                                        0121
         ALR   @12,@10                                             0121
         AL    @12,@CF00654                                        0121
         CLC   SHAREFLG-2(1,@12),LETTERS                           0121
         BNE   @RF00121                                            0121
         LR    @12,@10                                             0121
         AL    @12,@TF00001                                        0121
         AL    @12,@CF00655                                        0121
         CLC   SHARSERA-10(3,@12),SHR34CPU                         0121
         BNE   @RF00121                                            0121
         LR    @12,@10                                             0121
         AL    @12,@TF00001                                        0121
         AL    @12,@CF00656                                        0121
         CLC   SHR34CUA(2),SHRCUAAL-13(@12)                        0121
         BL    @RF00121                                            0121
         LR    @12,@10                                             0121
         AL    @12,@TF00001                                        0121
         BCTR  @12,0                                               0121
         CLC   SHR34CUA(2),SHRCUAAH-15(@12)                        0121
         BH    @RF00121                                            0121
*           DO;                              /* CUA ONLY.    @Z427VLS*/
*             HOLDCPUN(4:5) = HOLDCPUN(4:5) && HOLDCPUN(4:5);      0123
         XC    HOLDCPUN+3(2),HOLDCPUN+3                            0123
*             HOLDCPUN(1:3) = SHARSERB(J);                 /*@Z427VLS*/
         LR    @12,@10                                             0124
         AL    @12,@TF00001                                        0124
         AL    @12,@CF00657                                        0124
         MVC   HOLDCPUN(3),SHARSERB-3(@12)                         0124
*             VALIDSHR = ON;                               /*@Z427VLS*/
         OI    VALIDSHR,B'00010000'                                0125
*             SHR34CUA=SHRCUABL(J)+SHR34CUA-SHRCUAAL(J);   /*@D3506GB*/
         LR    @12,@10                                             0126
         AL    @12,@TF00001                                        0126
         AL    @12,@CF00659                                        0126
         SLR   @08,@08                                             0126
         ICM   @08,3,SHRCUABL-6(@12)                               0126
         SLR   @12,@12                                             0126
         ICM   @12,3,SHR34CUA                                      0126
         ALR   @08,@12                                             0126
         AL    @10,@TF00001                                        0126
         AL    @10,@CF00656                                        0126
         SLR   @12,@12                                             0126
         ICM   @12,3,SHRCUAAL-13(@10)                              0126
         SLR   @08,@12                                             0126
         STCM  @08,3,SHR34CUA                                      0126
*           END;                                           /*@Z427VLS*/
*     END;                                                 /*@Z427VLS*/
@RF00121 LA    @12,1                                               0128
         AH    @12,J                                               0128
         STH   @12,J                                               0128
@DE00120 L     @10,SHAREPTR(,R2)                                   0128
         CH    @12,SHARENUM(,@10)                                  0128
         BNH   @DL00120                                            0128
@DC00120 DS    0H                                                  0129
*     IF VALIDSHR = ON THEN                                        0129
         TM    VALIDSHR,B'00010000'                                0129
         BNO   @RF00129                                            0129
*       DO;                                                /*@Z427VLS*/
*         IF SAVERTYP = '90'X THEN                                 0131
         CLI   SAVERTYP,X'90'                                      0131
         BNE   @RF00131                                            0131
*           LRTMCUA = SHR34CUA;           /* REPLACE IN RECORD       */
         MVC   LRTMCUA(2,REG7),SHR34CUA                            0132
*         ELSE                                                     0133
*           IF SHRTSW = ON THEN                                    0133
         B     @RC00131                                            0133
@RF00131 TM    SHRTSW(REG7),B'00100000'                            0133
         BNO   @RF00133                                            0133
*             LRTSCUA = SHR34CUA;         /* REPLACE IN RECORD       */
         MVC   LRTSCUA(2,REG7),SHR34CUA                            0134
*           ELSE                                                   0135
*             LRTCUA = SHR34CUA;          /* REPLACE IN RECORD       */
         B     @RC00133                                            0135
@RF00133 MVC   LRTCUA(2,REG7),SHR34CUA                             0135
*       END;                                               /*@Z427VLS*/
@RC00133 DS    0H                                                  0136
@RC00131 DS    0H                                                  0137
*   END;                                                   /*@Z427VLS*/
@RF00129 DS    0H                                                  0138
* RESPECIFY (REG4) UNRESTRICTED;                           /*@Z427VLS*/
@RF00111 DS    0H                                                  0139
*/********************************************************************/
*/* SET UP FOR SEARCH ON MATCH.  FOUND SWITCH IS SET OFF.  IF A MATCH*/
*/* IS FOUND THEN IT IS SET ON.  OTHERWISE, THE FORWARD POINTER IS   */
*/* SET TO REG6.  THE SEARCH STOPS WHEN A MATCH IS FOUND OR REG6 = 0.*/
*/********************************************************************/
*RESPECIFY (REG6) RESTRICTED;                              /*@Z427VLS*/
*FOUND = OFF;                                              /*@Z427VLS*/
         NI    FOUND,B'11011111'                                   0140
*REG6 = REG5;                                              /*@Z427VLS*/
         LR    REG6,REG5                                           0141
*DO WHILE (REG6 ^= ZERO & FOUND = OFF);                    /*@Z427VLS*/
         B     @DE00142                                            0142
@DL00142 DS    0H                                                  0143
*  SAVER6 = REG6;                                          /*@Z427VLS*/
         ST    REG6,SAVER6                                         0143
*  IF HOLDID = RECORDID THEN       /* DOES THIS REC MATCH PREV RECS  */
         CLC   HOLDID(10),RECORDID(REG6)                           0144
         BNE   @RF00144                                            0144
*    DO;                                                   /*@Z427VLS*/
*      IF TCAMSWIT = ON & SMCTCAM = ON THEN                        0146
         TM    TCAMSWIT,B'10000000'                                0146
         BNO   @RF00146                                            0146
         TM    SMCTCAM(REG6),B'10000000'                           0146
         BNO   @RF00146                                            0146
*        DO;                                               /*@Z427VLS*/
*           IF (SHRTSW = ON & LRTTYPID ^= X3790) ×                 0148
*              (SHRTSW = OFF & LRDEVTYP ^= X3790) THEN             0148
         TM    SHRTSW(REG7),B'00100000'                            0148
         BNO   @GL00015                                            0148
         CLC   LRTTYPID(2,REG7),X3790                              0148
         BNE   @RT00148                                            0148
@GL00015 TM    SHRTSW(REG7),B'00100000'                            0148
         BNZ   @RF00148                                            0148
         CLC   LRDEVTYP(2,REG7),X3790                              0148
         BE    @RF00148                                            0148
@RT00148 DS    0H                                                  0149
*              IF LRTERMNL = SMTERMNL THEN   /* SAME TERMINAL NAME   */
         CLC   LRTERMNL(8,REG7),SMTERMNL(REG6)                     0149
         BNE   @RF00149                                            0149
*                 FOUND = ON;                              /*@Z427VLS*/
         OI    FOUND,B'00100000'                                   0150
*              ELSE                                                0151
*                 REG6 = FWARDPTR;                         /*@Z427VLS*/
         B     @RC00149                                            0151
@RF00149 L     REG6,FWARDPTR(,REG6)                                0151
*           ELSE                                                   0152
*              FOUND = ON;                                 /*@Z427VLS*/
         B     @RC00148                                            0152
@RF00148 OI    FOUND,B'00100000'                                   0152
*        END;                                              /*@Z427VLS*/
*      ELSE                                                        0154
*        IF TCAMSWIT = ON ×                  /* TCAM OR 8 BYTE SW ON */
*           SMCTCAM  = ON THEN               /* BOTH THEN NEXT AREA  */
         B     @RC00146                                            0154
@RF00146 TM    TCAMSWIT,B'10000000'                                0154
         BO    @RT00154                                            0154
         TM    SMCTCAM(REG6),B'10000000'                           0154
         BNO   @RF00154                                            0154
@RT00154 DS    0H                                                  0155
*             REG6 = FWARDPTR;                             /*@Z427VLS*/
         L     REG6,FWARDPTR(,REG6)                                0155
*        ELSE                                                      0156
*           IF TTYPSWIT = ON &               /* TEST FOR VAR SUB ID  */
*              LRVARIDS = ON THEN                                  0156
         B     @RC00154                                            0156
@RF00154 TM    TTYPSWIT,B'01000000'                                0156
         BNO   @RF00156                                            0156
         TM    LRVARIDS(REG7),B'10000000'                          0156
         BNO   @RF00156                                            0156
*              DO;                           /* TEST VAR SUB ID FLDS */
*                K = (LRVARIDF & '0F'X) + 1; /* PICK UP NO.  @Z427VLS*/
         LA    @12,15                                              0158
         SLR   @10,@10                                             0158
         IC    @10,LRVARIDF(,REG7)                                 0158
         NR    @12,@10                                             0158
         AL    @12,@CF00052                                        0158
         ST    @12,K                                               0158
*                IF SMVARID(1:K) = LRVARID(1:K) THEN               0159
         BCTR  @12,0                                               0159
         EX    @12,@SC00662                                        0159
         BNE   @RF00159                                            0159
*                   FOUND = ON;                            /*@Z427VLS*/
         OI    FOUND,B'00100000'                                   0160
*                ELSE                                              0161
*                   REG6 = FWARDPTR;                       /*@Z427VLS*/
         B     @RC00159                                            0161
@RF00159 L     REG6,FWARDPTR(,REG6)                                0161
*              END;                                        /*@Z427VLS*/
*           ELSE                                                   0163
*              /*                                            @Z427VLS*/
*              /* IF BOTH ARE OFF, TEST FOR T-TYPE SW ON.  IF NOT ON */
*              /* ON, SKIP TO NEXT AREA.  IF BOTH NOT OFF, TEST SUB  */
*              /* IS FOR MATCH.  IF NO MATCH, TRY NEXT AREA. @Z427VLS*/
*              /*                                            @Z427VLS*/
*              IF TTYPSWIT = ON THEN                               0163
         B     @RC00156                                            0163
@RF00156 TM    TTYPSWIT,B'01000000'                                0163
         BNO   @RF00163                                            0163
*                 IF LRTTYPID = SMTTYPID THEN                      0164
         CLC   LRTTYPID(2,REG7),SMTTYPID(REG6)                     0164
         BNE   @RF00164                                            0164
*                    FOUND = ON;                           /*@Z427VLS*/
         OI    FOUND,B'00100000'                                   0165
*                 ELSE                                             0166
*                    REG6 = FWARDPTR;                      /*@Z427VLS*/
         B     @RC00164                                            0166
@RF00164 L     REG6,FWARDPTR(,REG6)                                0166
*              ELSE                                                0167
*                 FOUND = ON;                              /*@Z427VLS*/
         B     @RC00163                                            0167
@RF00163 OI    FOUND,B'00100000'                                   0167
*    END;                                                  /*@Z427VLS*/
*  ELSE                                                            0169
*    REG6 = FWARDPTR;                                      /*@Z427VLS*/
         B     @RC00144                                            0169
@RF00144 L     REG6,FWARDPTR(,REG6)                                0169
*END;                                                      /*@Z427VLS*/
@RC00144 DS    0H                                                  0170
@DE00142 LTR   REG6,REG6                                           0170
         BZ    @DC00142                                            0170
         TM    FOUND,B'00100000'                                   0170
         BZ    @DL00142                                            0170
@DC00142 DS    0H                                                  0171
*/*                                                          @Z427VLS*/
*/*      BUILD A NEW COUNTER AREA, IF ONE DID NOT EXIST      @Z427VLS*/
*/*                                                          @Z427VLS*/
*RESPECIFY (REG3) RESTRICTED;                              /*@Z427VLS*/
*IF REG6 = ZERO THEN                                               0172
         SLR   @12,@12                                             0172
         CR    REG6,@12                                            0172
         BNE   @RF00172                                            0172
*  DO;                                                     /*@Z427VLS*/
*      IF SCNTSIZE ^= ZERO THEN              /* IF NO. CTRS ZERO EXIT*/
         LH    @10,SCNTSIZE(,REG9)                                 0174
         CR    @10,@12                                             0174
         BE    @RF00174                                            0174
*        DO;                                               /*@Z427VLS*/
*          REG3=HEADRLEN+(2*SCNTSIZE)+HDRBUMP; /* COMPUTE AREA SIZE  */
         ALR   @10,@10                                             0176
         AL    @10,@CF00481                                        0176
         AL    @10,HDRBUMP                                         0176
         LR    REG3,@10                                            0176
*          RESPECIFY (REG15) RESTRICTED;                   /*@Z427VLS*/
*          GEN(GETMAIN EC,LV=(REG3),A=SMWHERE); /* GET AREA CONDIT'AL*/
         GETMAIN EC,LV=(REG3),A=SMWHERE
*          RETCODE = REG15;                  /* SAVE RETURN CODE     */
         STH   REG15,RETCODE                                       0179
*          RESPECIFY (REG15) UNRESTRICTED;                 /*@Z427VLS*/
*          IF RETCODE = ZERO THEN            /* IF R15 ZERO BUILD CTR*/
         LH    @12,RETCODE                                         0181
         LTR   @12,@12                                             0181
         BNZ   @RF00181                                            0181
*            DO;                                           /*@Z427VLS*/
*/*  THE FOLLOWING CODE WILL STORE IN THE COMM TABLE THE ADDRESS OF*/
*/*  GETMAIN AND THE LENGTH THES DATA WILL BE USED BY EDSUM TO DUMP*/
*/*  THE COUNTERS TO TOURIST DATA SET JUST PRIOR TO CALL IFCEEDIT TO*/
*/*  PRINT THE RESULTS SIZE SHOULD ALWAYS BE THE SAME IT IS SAVED   */
*/*  FOR EACH GETMAIN IN CASE THIS SHOULD CHANGE WE WILL AVOID A C4 */
*             IF DEBUG14 = ON & DUMPNUM ^= TWELVE THEN             0183
         TM    DEBUG14(R2),B'00000010'                             0183
         BNO   @RF00183                                            0183
         LH    @12,DUMPNUM(,R2)                                    0183
         C     @12,@CF00065                                        0183
         BE    @RF00183                                            0183
*               DO;                                        /*@Z427VLS*/
*                 DUMPADR(DUMPNUM) = SMWHERE;              /*@Z427VLS*/
         LR    @10,@12                                             0185
         SLA   @10,3                                               0185
         L     @08,SMWHERE                                         0185
         ST    @08,DUMPADR-8(@10,R2)                               0185
*                 DUMPSIZE(DUMPNUM) = REG3;                /*@Z427VLS*/
         ST    REG3,DUMPSIZE-8(@10,R2)                             0186
*                 DUMPNUM = DUMPNUM + 1;                   /*@Z427VLS*/
         AL    @12,@CF00052                                        0187
         STH   @12,DUMPNUM(,R2)                                    0187
*               END;                                       /*@Z427VLS*/
*              /******************************************************/
*              /*                                            @Z427VLS*/
*              /*  IF NO CHAIN EXISTS BUILD A CHAIN WITH ONE ELEMENT */
*              /*                                            @Z427VLS*/
*              /******************************************************/
*              IF REG5 = ZERO THEN           /* DOES CHAIN EXIST     */
@RF00183 LTR   REG5,REG5                                           0189
         BNZ   @RF00189                                            0189
*                  REG5 = SMWHERE;           /* BUILD W/PTR TO FIRST */
         L     REG5,SMWHERE                                        0190
*               ELSE                                               0191
*                  SAVER6 -> FWARDPTR = SMWHERE; /* SET FORWARD PTR  */
         B     @RC00189                                            0191
@RF00189 L     @12,SMWHERE                                         0191
         L     @10,SAVER6                                          0191
         ST    @12,FWARDPTR(,@10)                                  0191
*               REG6 = SMWHERE;              /* PTR TO CHAIN AREAS   */
@RC00189 L     REG6,SMWHERE                                        0192
*               EDTABPTR = REG9;             /* INITIALIZING HEADER  */
         ST    REG9,EDTABPTR(,REG6)                                0193
*               FWARDPTR = ZERO;             /* ZERO FWARDPTR TO LAST*/
         SLR   @12,@12                                             0194
         ST    @12,FWARDPTR(,REG6)                                 0194
*               SCCOUNT = ZERO;              /* SET COUNT TO 0       */
         STH   @12,SCCOUNT(,REG6)                                  0195
*               RECORDID = HOLDID;           /* SET UP HEADER AREA   */
         MVC   RECORDID(10,REG6),HOLDID                            0196
*                IF (RECORDID & FOXZERO) = '40'X THEN              0197
         MVC   @TS00001(1),RECORDID(REG6)                          0197
         NI    @TS00001,X'F0'                                      0197
         CLI   @TS00001,X'40'                                      0197
         BNE   @RF00197                                            0197
*                 RECORDID(1) = '40'X;                    /* @ZA17693*/
         MVI   RECORDID(REG6),X'40'                                0198
*               SMCWITCH = SMCWITCH&&SMCWITCH;  /* SET SWITCHES TO 0 */
@RF00197 XC    SMCWITCH(2,REG6),SMCWITCH(REG6)                     0199
*               /*                                           @Z427VLS*/
*               /*      ZERO  COUNTERS. INITIALIZE TERM NAME AND     */
*               /*      TCAM SWITCHES IN COUNTER.            @Z427VLS*/
*               /*                                           @Z427VLS*/
*               REG3 = REG6;                 /* SET WORK REG @Z427VLS*/
         LR    REG3,REG6                                           0200
*               IF TCAMSWIT = ON THEN        /* IF TCAM INITIALIZE AS*/
         TM    TCAMSWIT,B'10000000'                                0201
         BNO   @RF00201                                            0201
*                 DO;                                      /*@Z427VLS*/
*                   SMCTCAM = ON;            /* SET TCAM SWITCH      */
         OI    SMCTCAM(REG6),B'10000000'                           0203
*                   SMTERMNL = LRTERMNL;     /* BRING OVER TERM NAME */
         MVC   SMTERMNL(8,REG6),LRTERMNL(REG7)                     0204
*                   REG3 = REG3+8;                         /*@Z427VLS*/
         AL    REG3,@CF00063                                       0205
*                 END;                                     /*@Z427VLS*/
*               ELSE                                               0207
*                 /*                                         @Z427VLS*/
*                 /*    INITIALIZE FOR T-TYPE RECORD         @Z427VLS*/
*                 /*                                         @Z427VLS*/
*                 IF TTYPSWIT = ON THEN      /* IF T-TYPE REC        */
         B     @RC00201                                            0207
@RF00201 TM    TTYPSWIT,B'01000000'                                0207
         BNO   @RF00207                                            0207
*                   DO;                                    /*@Z427VLS*/
*                     SMTRECID = LRTRECID;   /* SET RECORD ID        */
         MVC   SMTRECID(1,REG6),LRTRECID(REG7)                     0209
*                     SMTTYPID = LRTTYPID;   /* T-TYPE SUB ID        */
         MVC   SMTTYPID(2,REG6),LRTTYPID(REG7)                     0210
*                     SMTTYP0 = SMTTYP0 && SMTTYP0;        /*@Z427VLS*/
         XC    SMTTYP0(5,REG6),SMTTYP0(REG6)                       0211
*                     REG3 = REG3 + 8;                     /*@Z427VLS*/
         LA    @12,8                                               0212
         ALR   REG3,@12                                            0212
*                     IF LRVARIDS = ON THEN   /* VAR SUB ID? @Z427VLS*/
         TM    LRVARIDS(REG7),B'10000000'                          0213
         BNO   @RF00213                                            0213
*                       DO;                                /*@Z427VLS*/
*                         K = (LRVARIDF & '0F'X) + 1; /* SET SIZE    */
         LA    @10,15                                              0215
         SLR   @08,@08                                             0215
         IC    @08,LRVARIDF(,REG7)                                 0215
         NR    @10,@08                                             0215
         AL    @10,@CF00052                                        0215
         ST    @10,K                                               0215
*                         SMVARID(1:K) = LRVARID(1:K);     /*@Z427VLS*/
         BCTR  @10,0                                               0216
         EX    @10,@SM00664                                        0216
*                         REG3 = REG3 + 8;    /* ADJUST CTR PTR      */
         ALR   REG3,@12                                            0217
*                       END;                               /*@Z427VLS*/
*                   END;                                   /*@Z427VLS*/
@RF00213 DS    0H                                                  0220
*                 /*                                         @Z427VLS*/
*                 /*  ZERO COUNTER LOOP                      @Z427VLS*/
*                 /*                                         @Z427VLS*/
*                 DO J=SCNTSIZE TO 1 BY -1 ;     /* ZERO NO. CTRS    */
@RF00207 DS    0H                                                  0220
@RC00201 LH    @12,SCNTSIZE(,REG9)                                 0220
         STH   @12,J                                               0220
         B     @DE00220                                            0220
@DL00220 DS    0H                                                  0221
*                   REG3 -> SCCOUNTR(J) = ZERO;  /* FOUND IN TABLE   */
         LR    @10,@12                                             0221
         ALR   @10,@10                                             0221
         SLR   @08,@08                                             0221
         STH   @08,SCCOUNTR-2(@10,REG3)                            0221
*                 END;                                     /*@Z427VLS*/
         BCTR  @12,0                                               0222
         STH   @12,J                                               0222
@DE00220 LTR   @12,@12                                             0222
         BP    @DL00220                                            0222
*            END;                                          /*@Z427VLS*/
*          ELSE                                                    0224
*            EXIT = ON;                      /* CAN'T BUILD CTRS,EXIT*/
         B     @RC00181                                            0224
@RF00181 OI    EXIT,B'00001000'                                    0224
*        END;                                              /*@Z427VLS*/
*      ELSE                                                        0226
*        DO;                                               /*@Z427VLS*/
         B     @RC00174                                            0226
@RF00174 DS    0H                                                  0227
*           EXIT = ON;                       /* EXIT, NO COUNTERS    */
         OI    EXIT,B'00001000'                                    0227
*           RETCODE = ZERO;                  /* GOOD RETURN CODE     */
         SLR   @12,@12                                             0228
         STH   @12,RETCODE                                         0228
*        END;                                              /*@Z427VLS*/
*  END;                                                    /*@Z427VLS*/
@RC00174 DS    0H                                                  0231
*/********************************************************************/
*/*                                                          @Z427VLS*/
*/*      SUM RECORD SECTION                                  @Z427VLS*/
*/*                                                          @Z427VLS*/
*/********************************************************************/
*IF EXIT = OFF THEN                                                0231
@RF00172 TM    EXIT,B'00001000'                                    0231
         BNZ   @RF00231                                            0231
*  DO;                                                     /*@Z427VLS*/
*  RESPECIFY (R4,R8) RESTRICTED;                           /*@D3505GB*/
*  R4 = R2;                  /*PASS THE COMM TABLE ADDRESS TO SUMMARY*/
         LR    R4,R2                                               0234
*  R4 = R2;                  /*PASS THE COMM TABLE ADDRESS TO SUMMARY*/
         LR    R4,R2                                               0235
*    R2 = REG7;   /*SET ADDRESSABILITY FOR SUM TABLE R2 WILL BE      */
         LR    R2,REG7                                             0236
*                 /*RESTORED UPON EXIT FROM ESUMS            @Z427VLS*/
*    SCCOUNT = SCCOUNT + 1;                                /*@Z427VLS*/
         LA    @12,1                                               0237
         AH    @12,SCCOUNT(,REG6)                                  0237
         STH   @12,SCCOUNT(,REG6)                                  0237
*    DO REG8 = CONTRPTR BY 6 WHILE( STFLAG ^= 'FF'X);      /*@Z427VLS*/
         L     REG8,CONTRPTR(,REG9)                                0238
         B     @DE00238                                            0238
@DL00238 DS    0H                                                  0239
*      IF SUMFLAG = ON THEN        /* IS THIS ENTRY A NORMAL SUM     */
         TM    SUMFLAG(REG8),B'10000000'                           0239
         BNO   @RF00239                                            0239
*        DO;                                               /*@Z427VLS*/
*          /*                                                @Z427VLS*/
*          /*      SUM-SPECIAL ROUTINE ENTRY                 @Z427VLS*/
*          /*      SETS REGS AS FOLLOWS                      @Z427VLS*/
*          /*            R3   PTR TO COUNTER TO BE USED      @Z427VLS*/
*          /*            R8   PTR TO CURRENT ELEMENT OF TABLE        */
*          /*            R9   PTR TO SUMMARY TABLE           @Z427VLS*/
*          /*            R14  TRN POINT                      @Z427VLS*/
*          /*            R15  ENTRY POINT                    @Z427VLS*/
*          /*                                                @Z427VLS*/
*          SMTABELM=REG8 ;                   /* SAVE CURR ENTRY PTR  */
         ST    REG8,SMTABELM(,REG9)                                0241
*          REG3=REG6+HEADRLEN+(2*SCOFFSET)+HDRBUMP;        /*@Z427VLS*/
         LA    REG3,22                                             0242
         ALR   REG3,REG6                                           0242
         LH    @12,SCOFFSET(,REG8)                                 0242
         ALR   @12,@12                                             0242
         ALR   REG3,@12                                            0242
         AL    REG3,HDRBUMP                                        0242
*          SUMSPEC = REG9 + STSPCPTR;        /* SET ENTRY PTR R9+    */
         LR    @12,REG9                                            0243
         AH    @12,STSPCPTR(,REG8)                                 0243
         ST    @12,SUMSPEC                                         0243
*          CALL SPECIAL;                     /* OFFSET FROM TAB ENTRY*/
         LR    @15,@12                                             0244
         BALR  @14,@15                                             0244
*                            RESPECIFY (R4) UNRESTRICTED;          0245
*       IF SAVERTYP = '30'X THEN                                   0246
         CLI   SAVERTYP,X'30'                                      0246
         BNE   @RF00246                                            0246
*         DO;                                                      0247
*           IF LRDEVTYP =  '2102'X  THEN                           0248
         CLC   LRDEVTYP(2,REG7),@CB00609                           0248
         BNE   @RF00248                                            0248
*            DO;                                                   0249
*             R2 = R4;     /*RESET THE COMM TABLE ADDRESSABILITY*/ 0250
         LR    R2,R4                                               0250
*             RDTHRSH =    LRCPUNOS ;                              0251
         MVC   RDTHRSH(3,R2),LRCPUNOS(REG7)                        0251
*             ANALYSIS = ON;          /*TELL IFCEDSUM TO CALL IFCNFPDR*
         OI    ANALYSIS(R2),B'00001000'                            0252
*             CLEAR = CLEAR && CLEAR; /*CLEAR THE FIRST PART */    0253
         L     @12,SAVE4                                           0253
         XC    CLEAR(6,@12),CLEAR(@12)                             0253
*             IF VALIDSHR = ON THEN /*SHARE CARDS APPLY THIS REC*/ 0254
         TM    VALIDSHR,B'00010000'                                0254
         BNO   @RF00254                                            0254
*               ISSHARED = ON;        /*TELL IFCNFPDR ABOUT THIS*/ 0255
         OI    ISSHARED(@12),B'01000000'                           0255
*             IF (FSCCODE2&'F0'X)='10'X THEN                       0256
@RF00254 LR    @12,R7                                              0256
         AH    @12,RECLNGTH(,R2)                                   0256
         LR    @10,@12                                             0256
         AL    @10,@CF00667                                        0256
         MVC   @TS00001(1),FSCCODE2(@10)                           0256
         NI    @TS00001,X'F0'                                      0256
         CLI   @TS00001,X'10'                                      0256
         BNE   @RF00256                                            0256
*               DO;                                                0257
*                   IF FSCCODE = '9001'X ×                         0258
*                      FSCCODE = '9002'X ×                         0258
*                      FSCCODE = '9003'X ×                         0258
*                      FSCCODE = '9006'X ×                         0258
*                      FSCCODE = '9007'X ×                         0258
*                      FSCCODE = '900E'X ×                         0258
*                      FSCCODE1 = '93'X ×                          0258
*                      FSCCODE1 = '9A'X  THEN                      0258
         BCTR  @12,0                                               0258
         BCTR  @12,0                                               0258
         CLC   FSCCODE(2,@12),@CB00611                             0258
         BE    @RT00258                                            0258
         CLC   FSCCODE(2,@12),@CB00612                             0258
         BE    @RT00258                                            0258
         CLC   FSCCODE(2,@12),@CB00613                             0258
         BE    @RT00258                                            0258
         CLC   FSCCODE(2,@12),@CB00614                             0258
         BE    @RT00258                                            0258
         CLC   FSCCODE(2,@12),@CB00615                             0258
         BE    @RT00258                                            0258
         CLC   FSCCODE(2,@12),@CB00616                             0258
         BE    @RT00258                                            0258
         CLI   FSCCODE1(@12),X'93'                                 0258
         BE    @RT00258                                            0258
         CLI   FSCCODE1(@12),X'9A'                                 0258
         BNE   @RF00258                                            0258
@RT00258 DS    0H                                                  0259
*                         GROUP = '01'X;                           0259
         L     @12,SAVE4                                           0259
         MVI   GROUP(@12),X'01'                                    0259
*                   ELSE                                           0260
*                        IF FSCCODE = '1901'X ×                    0260
*                           FSCCODE = '1903'X ×                    0260
*                           FSCCODE = '1905'X ×                    0260
*                           FSCCODE = '1907'X ×                    0260
*                           FSCCODE = '1908'X ×                    0260
*                           FSCCODE = '900B'X ×                    0260
*                           FSCCODE = '900F'X ×                    0260
*                           FSCCODE1 = '10'X ×                     0260
*                           FSCCODE1 = '94'X ×                     0260
*                           FSCCODE1 = '96'X ×                     0260
*                           FSCCODE1 = '98'X  THEN                 0260
         B     @RC00258                                            0260
@RF00258 LR    @12,R7                                              0260
         AH    @12,RECLNGTH(,R2)                                   0260
         BCTR  @12,0                                               0260
         BCTR  @12,0                                               0260
         CLC   FSCCODE(2,@12),@CB00620                             0260
         BE    @RT00260                                            0260
         CLC   FSCCODE(2,@12),@CB00621                             0260
         BE    @RT00260                                            0260
         CLC   FSCCODE(2,@12),@CB00622                             0260
         BE    @RT00260                                            0260
         CLC   FSCCODE(2,@12),@CB00623                             0260
         BE    @RT00260                                            0260
         CLC   FSCCODE(2,@12),@CB00624                             0260
         BE    @RT00260                                            0260
         CLC   FSCCODE(2,@12),@CB00625                             0260
         BE    @RT00260                                            0260
         CLC   FSCCODE(2,@12),@CB00626                             0260
         BE    @RT00260                                            0260
         CLI   FSCCODE1(@12),X'10'                                 0260
         BE    @RT00260                                            0260
         CLI   FSCCODE1(@12),X'94'                                 0260
         BE    @RT00260                                            0260
         CLI   FSCCODE1(@12),X'96'                                 0260
         BE    @RT00260                                            0260
         CLI   FSCCODE1(@12),X'98'                                 0260
         BNE   @RF00260                                            0260
@RT00260 DS    0H                                                  0261
*                             GROUP = '02'X;                       0261
         L     @12,SAVE4                                           0261
         MVI   GROUP(@12),X'02'                                    0261
*                        ELSE                                      0262
*                             IF FSCCODE = '191A'X THEN            0262
         B     @RC00260                                            0262
@RF00260 LR    @12,R7                                              0262
         AH    @12,RECLNGTH(,R2)                                   0262
         LR    @10,@12                                             0262
         BCTR  @10,0                                               0262
         BCTR  @10,0                                               0262
         CLC   FSCCODE(2,@10),@CB00631                             0262
         BNE   @RF00262                                            0262
*                                DO;                               0263
*                                   IF BYTE0304 = BYTE0809 THEN    0264
         LR    @10,@12                                             0264
         AL    @10,@CF00668                                        0264
         AL    @12,@CF00669                                        0264
         CLC   BYTE0304(2,@10),BYTE0809(@12)                       0264
         BNE   @RF00264                                            0264
*                                      EQUAL = ON;                 0265
         L     @12,SAVE4                                           0265
         OI    EQUAL(@12),B'00100000'                              0265
*                                      GROUP = '03'X;              0266
@RF00264 L     @12,SAVE4                                           0266
         MVI   GROUP(@12),X'03'                                    0266
*                                END;                              0267
*                             ELSE                                 0268
*                                IF FSCCODE = '1444'X ×            0268
*                                   FSCCODE = '1448'X ×            0268
*                                   FSCCODE = '152C'X ×            0268
*                                   FSCCODE = '154E'X ×            0268
*                                   FSCCODE = '162A'X ×            0268
*                                   FSCCODE = '164A'X THEN         0268
         B     @RC00262                                            0268
@RF00262 LR    @12,R7                                              0268
         AH    @12,RECLNGTH(,R2)                                   0268
         BCTR  @12,0                                               0268
         BCTR  @12,0                                               0268
         CLC   FSCCODE(2,@12),@CB00632                             0268
         BE    @RT00268                                            0268
         CLC   FSCCODE(2,@12),@CB00633                             0268
         BE    @RT00268                                            0268
         CLC   FSCCODE(2,@12),@CB00634                             0268
         BE    @RT00268                                            0268
         CLC   FSCCODE(2,@12),@CB00635                             0268
         BE    @RT00268                                            0268
         CLC   FSCCODE(2,@12),@CB00636                             0268
         BE    @RT00268                                            0268
         CLC   FSCCODE(2,@12),@CB00637                             0268
         BNE   @RF00268                                            0268
@RT00268 DS    0H                                                  0269
*                                     GROUP = '04'X;               0269
         L     @12,SAVE4                                           0269
         MVI   GROUP(@12),X'04'                                    0269
*                                ELSE                              0270
*                                      IF FSCCODE1= '1A'X ×        0270
*                                         FSCCODE1= '1B'X THEN     0270
         B     @RC00268                                            0270
@RF00268 LR    @12,R7                                              0270
         AH    @12,RECLNGTH(,R2)                                   0270
         BCTR  @12,0                                               0270
         BCTR  @12,0                                               0270
         CLI   FSCCODE1(@12),X'1A'                                 0270
         BE    @RT00270                                            0270
         CLI   FSCCODE1(@12),X'1B'                                 0270
         BNE   @RF00270                                            0270
@RT00270 DS    0H                                                  0271
*                                            GROUP = '05'X;        0271
         L     @12,SAVE4                                           0271
         MVI   GROUP(@12),X'05'                                    0271
*                                      ELSE                        0272
*                                            GROUP = 'FF'X;        0272
         B     @RC00270                                            0272
@RF00270 L     @12,SAVE4                                           0272
         MVI   GROUP(@12),X'FF'                                    0272
*                 END;                                             0273
*               ELSE                                               0274
*                    IF (FSCCODE&'FFF0'X)='4940'X THEN             0274
         B     @RC00256                                            0274
@RF00256 LR    @12,R7                                              0274
         AH    @12,RECLNGTH(,R2)                                   0274
         BCTR  @12,0                                               0274
         BCTR  @12,0                                               0274
         MVC   @TS00001(2),FSCCODE(@12)                            0274
         NC    @TS00001(2),@CB00642                                0274
         CLC   @TS00001(2),@CB00643                                0274
         BNE   @RF00274                                            0274
*                        DO;                                       0275
*                          GROUP = '06'X;                          0276
         L     @12,SAVE4                                           0276
         MVI   GROUP(@12),X'06'                                    0276
*                          FORMAT4 = ON;                           0277
         OI    FORMAT4(@12),B'00010000'                            0277
*                        END;                                      0278
*                    ELSE                                          0279
*                       IF (FSCCODE2&'F0'X)= '50'X THEN            0279
         B     @RC00274                                            0279
@RF00274 LR    @12,R7                                              0279
         AH    @12,RECLNGTH(,R2)                                   0279
         AL    @12,@CF00667                                        0279
         MVC   @TS00001(1),FSCCODE2(@12)                           0279
         NI    @TS00001,X'F0'                                      0279
         CLI   @TS00001,X'50'                                      0279
         BNE   @RF00279                                            0279
*                           GROUP = '06'X;                         0280
         L     @12,SAVE4                                           0280
         MVI   GROUP(@12),X'06'                                    0280
*                       ELSE                                       0281
*                           GROUP = 'FF'X;                         0281
         B     @RC00279                                            0281
@RF00279 L     @12,SAVE4                                           0281
         MVI   GROUP(@12),X'FF'                                    0281
*           CUA3  = LRTCUA;                                        0282
@RC00279 DS    0H                                                  0282
@RC00274 DS    0H                                                  0282
@RC00256 L     @12,SAVE4                                           0282
         MVC   CUA3(2,@12),LRTCUA(REG7)                            0282
*           FSCTAB = FSCCODE;                                      0283
         LR    @10,R7                                              0283
         AH    @10,RECLNGTH(,R2)                                   0283
         LR    @04,@10                                             0283
         BCTR  @04,0                                               0283
         BCTR  @04,0                                               0283
         MVC   FSCTAB(2,@12),FSCCODE(@04)                          0283
*           IF(BYT2BIT3 & '10'X ) = '10'X THEN                     0284
         AL    @10,@CF00670                                        0284
         MVC   @TS00001(1),BYT2BIT3(@10)                           0284
         NI    @TS00001,X'10'                                      0284
         CLI   @TS00001,X'10'                                      0284
         BNE   @RF00284                                            0284
*             EVD = ON;                                            0285
         OI    EVD(@12),B'10000000'                                0285
*             END;                                                 0286
*        END;                                                      0287
*      ELSE                                                        0288
*        IF SAVERTYP = '90'X & LRTRECID = '17'X THEN               0288
         B     @RC00246                                            0288
@RF00246 CLI   SAVERTYP,X'90'                                      0288
         BNE   @RF00288                                            0288
         CLI   LRTRECID(REG7),X'17'                                0288
         BNE   @RF00288                                            0288
*          GROUP = 'FF'X;                                          0289
         L     @12,SAVE4                                           0289
         MVI   GROUP(@12),X'FF'                                    0289
*  RESPECIFY (R4) UNRESTRICTED;                            /*@D3505GB*/
@RF00288 DS    0H                                                  0290
@RC00246 DS    0H                                                  0291
*                            RESPECIFY (R4) UNRESTRICTED;  /*@D35UGGB*/
*          REG8=SMTABELM;                    /* RESET REG 8  @Z427VLS*/
         L     REG8,SMTABELM(,REG9)                                0292
*        END;                                              /*@Z427VLS*/
*      ELSE                                                        0294
*        DO;                                               /*@Z427VLS*/
         B     @RC00239                                            0294
@RF00239 DS    0H                                                  0295
*          /**********************************************************/
*          /*                                                @Z427VLS*/
*          /* NORMAL SUMMARY PROCESSING - A MASK IS USED.  IF THE    */
*          /* FLAG IS OFF, NOTHING WILL BE DONE.  IF IT IS ON, ONE   */
*          /* WILL BE ADDED TO THE INDICATED COUNTER.        @Z427VLS*/
*          /*                                                @Z427VLS*/
*          /**********************************************************/
*          IF STFLAG = '00'X THEN       /* SUM TO ADD > ONE BIT?     */
         CLI   STFLAG(REG8),X'00'                                  0295
         BNE   @RF00295                                            0295
*            DO;                                           /*@Z427VLS*/
*              SUMSPEC = LROFFSET + R2;   /* OFFSET FROM ENTRY       */
         LR    @12,R2                                              0297
         AH    @12,LROFFSET(,REG8)                                 0297
         ST    @12,SUMSPEC                                         0297
*              IF (SUMMARY & STMASK) = STMASK THEN                 0298
         MVC   @TS00001(1),SUMMARY(@12)                            0298
         NC    @TS00001(1),STMASK(REG8)                            0298
         CLC   @TS00001(1),STMASK(REG8)                            0298
         BNE   @RF00298                                            0298
*                DO;                                       /*@Z427VLS*/
*                  REG3=REG6+HDRBUMP;   /* UP PTR BY COMPUTED VALUE  */
         LR    REG3,REG6                                           0300
         AL    REG3,HDRBUMP                                        0300
*                  REG3 -> SCCOUNTR(SCOFFSET+1) =                  0301
*                          REG3 -> SCCOUNTR(SCOFFSET+1) + 1;       0301
         LH    @12,SCOFFSET(,REG8)                                 0301
         ALR   @12,@12                                             0301
         LA    @10,1                                               0301
         AH    @10,SCCOUNTR(@12,REG3)                              0301
         STH   @10,SCCOUNTR(@12,REG3)                              0301
*                END;                                      /*@Z427VLS*/
*            END;                                          /*@Z427VLS*/
*          ELSE                                                    0304
*            DO;                                           /*@Z427VLS*/
         B     @RC00295                                            0304
@RF00295 DS    0H                                                  0305
*              RESPECIFY (REG12) RESTRICTED;               /*@Z427VLS*/
*              SHIFT = REG8 -> SUMMARY; /*GET FIRST BYTE OF SUM ENTRY*/
         SLR   @10,@10                                             0306
         IC    @10,SUMMARY(,REG8)                                  0306
         STH   @10,SHIFT                                           0306
*              SRL(SHIFT,4);            /* ISOLATE SHIFT BITS@ZA32228*/
         LR    @04,@10                                             0307
         SRL   @04,4                                               0307
         STH   @04,SHIFT                                           0307
*              SHIFT = SHIFT + 24;      /* INCR TO ISOLATE BITS      */
         LA    @04,24                                              0308
         AH    @04,SHIFT                                           0308
         STH   @04,SHIFT                                           0308
*              REG12 = LROFFSET + REG7; /* POINT TO LOGREC BYTE      */
         LR    REG12,REG7                                          0309
         AH    REG12,LROFFSET(,REG8)                               0309
*              REG12 = REG12->SUMMARY;  /* PUT BYTE FROM LOGREC IN 12*/
         SLR   @15,@15                                             0310
         IC    @15,SUMMARY(,REG12)                                 0310
         LR    REG12,@15                                           0310
*              SLL(REG12,SHIFT);        /* ISOLATE BITS TO BE ADDED  */
         SLL   REG12,0(@04)                                        0311
*              SHIFT = 32 - ((REG8 -> SUMMARY) & '0F'X);   /*@Z427VLS*/
         N     @10,@CF00597                                        0312
         LCR   @10,@10                                             0312
         AL    @10,@CF00648                                        0312
         STH   @10,SHIFT                                           0312
*                                       /* SUBTRACT THE LENGTH OF FLD*/
*              SRL(REG12,SHIFT);        /* RIGHT ALIGN THE BITS      */
         SRL   REG12,0(@10)                                        0313
*              REG3 = REG6 + HDRBUMP;   /* POINT TO CTRS TO BE UPDTED*/
         LR    REG3,REG6                                           0314
         AL    REG3,HDRBUMP                                        0314
*              REG3 -> SCCOUNTR(SCOFFSET+1) =                      0315
*                      REG3 -> SCCOUNTR(SCOFFSET+1) + REG12;       0315
         LH    @10,SCOFFSET(,REG8)                                 0315
         ALR   @10,@10                                             0315
         LR    @04,REG12                                           0315
         AH    @04,SCCOUNTR(@10,REG3)                              0315
         STH   @04,SCCOUNTR(@10,REG3)                              0315
*              RESPECIFY (REG12) UNRESTRICTED;             /*@Z427VLS*/
*            END;                                          /*@Z427VLS*/
*        END;                                              /*@Z427VLS*/
@RC00295 DS    0H                                                  0319
*    END;                                                  /*@Z427VLS*/
@RC00239 AL    REG8,@CF00078                                       0319
@DE00238 CLI   STFLAG(REG8),X'FF'                                  0319
         BNE   @DL00238                                            0319
*    RETCODE = ZERO;                    /* SET RTN CODE SUCCESSFUL   */
         SLR   @12,@12                                             0320
         STH   @12,RETCODE                                         0320
*    RESPECIFY (REG8) UNRESTRICTED;                        /*@Z427VLS*/
*  END;                                                    /*@Z427VLS*/
*RESPECIFY (REG15) RESTRICTED;                             /*@Z427VLS*/
@RF00231 DS    0H                                                  0324
*REG15 = RETCODE;                                          /*@Z427VLS*/
         LH    REG15,RETCODE                                       0324
*RETURN;                                                   /*@Z427VLS*/
@EL00001 L     @13,4(,@13)                                         0325
@EF00001 DS    0H                                                  0325
@ER00001 L     @14,12(,@13)                                        0325
         LM    @00,@04,20(@13)                                     0325
         LM    @06,@12,44(@13)                                     0325
         BR    @14                                                 0325
*RESPECIFY (R2,REG7,REG3,REG5,REG6,REG8,REG9,REG15) UNRESTRICTED;  0326
*END   IFCESUMS                                            /*@Z427VLS*/
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (COMTABLE)                                        *
*;                                                                 0327
@DATA    DS    0H
@SC00662 CLC   SMVARID(0,REG6),LRVARID(REG7)
@SM00664 MVC   SMVARID(0,REG6),LRVARID(REG7)
         DS    0F
@SA00001 DS    18F
@TF00001 DS    F
         DS    0F
@CF00052 DC    F'1'
@CF00078 DC    F'6'
@CF00063 DC    F'8'
@CF00065 DC    F'12'
@CF00086 DC    F'16'
@CF00481 DC    F'22'
@CF00648 DC    F'32'
@CF00670 DC    F'-22'
@CF00668 DC    F'-21'
@CF00667 DC    F'-17'
@CF00669 DC    F'-16'
@CF00654 DC    F'-14'
@CF00657 DC    F'-13'
@CF00659 DC    F'-10'
@CF00655 DC    F'-6'
@CF00656 DC    F'-3'
@CF00597 DC    XL4'0F'
         DS    0D
SAVER6   DS    A
K        DS    F
SUMSPEC  DS    A
HDRBUMP  DS    F
SMWHERE  DS    A
SAVE4    DC    A(0)
J        DS    H
RETCODE  DS    H
SHIFT    DS    H
@TS00001 DS    CL2
@CB00609 DC    X'2102'
@CB00611 DC    X'9001'
@CB00612 DC    X'9002'
@CB00613 DC    X'9003'
@CB00614 DC    X'9006'
@CB00615 DC    X'9007'
@CB00616 DC    X'900E'
@CB00620 DC    X'1901'
@CB00621 DC    X'1903'
@CB00622 DC    X'1905'
@CB00623 DC    X'1907'
@CB00624 DC    X'1908'
@CB00625 DC    X'900B'
@CB00626 DC    X'900F'
@CB00631 DC    X'191A'
@CB00632 DC    X'1444'
@CB00633 DC    X'1448'
@CB00634 DC    X'152C'
@CB00635 DC    X'154E'
@CB00636 DC    X'162A'
@CB00637 DC    X'164A'
@CB00642 DC    X'FFF0'
@CB00643 DC    X'4940'
SWES     DC    X'00'
         ORG   SWES
TCAMSWIT DS    BL1
TTYPSWIT EQU   SWES+0
FOUND    EQU   SWES+0
VALIDSHR EQU   SWES+0
EXIT     EQU   SWES+0
         ORG   SWES+1
HOLDID   DS    CL10
         ORG   HOLDID
HOLDTYPE DS    CL5
HOLDCPUN DS    CL5
         ORG   HOLDID+10
X3790    DC    X'40F1'
LETTERS  DC    CL1'S'
@NM00012 DS    CL5
         ORG   @NM00012
SHR34XXX DS    CL5
         ORG   SHR34XXX
SHR34CUA DS    CL2
SHR34CPU DS    CL3
         ORG   @NM00012+5
SAVERTYP DS    CL1
SAVECUA  DS    CL3
SUPERZAP DC    3CL10'SUPERZAP'
         DS    CL1
PATCH    DC    20H'0'
IFCESUMS CSECT
         DC    S(SUPERZAP)
IFCESUMS CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
R2       EQU   @02
R4       EQU   @04
R7       EQU   @07
R8       EQU   @08
REG3     EQU   @03
REG4     EQU   @04
REG5     EQU   @05
REG6     EQU   @06
REG7     EQU   @07
REG8     EQU   @08
REG9     EQU   @09
REG12    EQU   @12
REG15    EQU   @15
R0       EQU   @00
R1       EQU   @01
R10      EQU   @10
R11      EQU   @11
R12      EQU   @12
R13      EQU   @13
R14      EQU   @14
R15      EQU   @15
R3       EQU   @03
R5       EQU   @05
R6       EQU   @06
R9       EQU   @09
PARM     EQU   0
RECTYPE  EQU   PARM
SWITCHES EQU   PARM+2
ANALYSIS EQU   SWITCHES+1
DEBUG    EQU   PARM+4
DEBUG14  EQU   DEBUG+1
DEBUGA   EQU   PARM+8
MISC     EQU   PARM+12
PRINTES  EQU   MISC
OPENCLSE EQU   PARM+13
OPENIO   EQU   OPENCLSE
CLOSEIO  EQU   OPENCLSE+2
DATENOW  EQU   PARM+17
STDT     EQU   PARM+23
STDATE   EQU   STDT
PSTD     EQU   STDATE+1
ENDDT    EQU   PARM+31
ENDDATE  EQU   ENDDT
PEND     EQU   ENDDATE+1
STTIME1  EQU   PARM+39
ENDTIME1 EQU   PARM+43
STTIME2  EQU   PARM+47
ENDTIME2 EQU   PARM+51
STRTDATE EQU   PARM+55
RDTHRSH  EQU   PARM+66
@NM00006 EQU   PARM+72
@NM00007 EQU   PARM+75
ERRID    EQU   PARM+92
IDTIMEA  EQU   ERRID+6
IDTIME   EQU   IDTIMEA
CCHHRLNG EQU   PARM+112
RECLNGTH EQU   CCHHRLNG+6
ADIOHND  EQU   PARM+124
ADIFCMSG EQU   PARM+128
ADEDITB  EQU   PARM+132
EVPTR    EQU   PARM+136
SORTADR  EQU   PARM+140
CUAPTR   EQU   PARM+152
DEVPTR   EQU   PARM+156
MODPTR   EQU   PARM+160
SERPTR   EQU   PARM+164
VOLPTR   EQU   PARM+168
CPUPTR   EQU   PARM+172
CPCUAPTR EQU   PARM+176
LIBADPTR EQU   PARM+180
SYMCDPTR EQU   PARM+184
SYSUMPTR EQU   PARM+188
TRENPTR  EQU   PARM+192
SHAREPTR EQU   PARM+196
MERDCPTR EQU   PARM+208
DUMPTABL EQU   PARM+228
DUMPNUM  EQU   DUMPTABL
DUMPINFO EQU   DUMPTABL+4
DUMPADR  EQU   DUMPINFO
DUMPSIZE EQU   DUMPINFO+4
TRENDONE EQU   0
TREGEN   EQU   TRENDONE+8
TRECCH0  EQU   TREGEN+8
TREND2   EQU   0
TRENDKEY EQU   TREND2
TRENDRT  EQU   TRENDKEY+1
TRENCPUS EQU   TRENDKEY+3
TRENDITM EQU   TRENDKEY+4
EVTABLE  EQU   0
EVSTOP   EQU   EVTABLE
EVKEY    EQU   EVTABLE+6
SORTABLE EQU   0
SORTKEY  EQU   SORTABLE
SORTCCHR EQU   SORTABLE+5
SYSUMONE EQU   0
SYSUM2   EQU   0
SYSUMKEY EQU   SYSUM2
SYSRT    EQU   SYSUMKEY+1
SYSCPUS  EQU   SYSUMKEY+3
SYSITEM  EQU   SYSUMKEY+4
SHARE    EQU   0
SHARENUM EQU   SHARE
SHAREIO  EQU   SHARE+2
SHAREFLG EQU   SHAREIO
SHRBASE  EQU   SHAREIO+1
SHARSERB EQU   SHRBASE
SHRCUABL EQU   SHRBASE+3
SHRCUCPU EQU   SHAREIO+8
SHARSERA EQU   SHRCUCPU
SHRCUAAL EQU   SHRCUCPU+3
SHRCUAAH EQU   SHRCUCPU+5
EDITLOAD EQU   0
EDITABLE EQU   EDITLOAD+4
CUA      EQU   0
CUAVAL   EQU   CUA+2
DEVICE   EQU   0
MODELS   EQU   0
DEVSERAL EQU   0
VOLUME   EQU   0
CPUS     EQU   0
CPUCUAS  EQU   0
CPUCUAV  EQU   CPUCUAS+2
LIBADR   EQU   0
SYMCODE  EQU   0
SYMVAL   EQU   SYMCODE+2
MERIDIAN EQU   0
SPECIAL  EQU   0
SUMMARY  EQU   0
FSCCODE  EQU   0
FSCCODE1 EQU   0
FSCCODE2 EQU   0
BYT2BIT3 EQU   0
BYTE0304 EQU   0
BYTE0809 EQU   0
NEWTABLE EQU   0
CLEAR    EQU   NEWTABLE
CUAGP    EQU   CLEAR
CUA3     EQU   CUAGP
GROUP    EQU   CUAGP+2
SWTCH    EQU   CUAGP+3
EVD      EQU   SWTCH
ISSHARED EQU   SWTCH
EQUAL    EQU   SWTCH
FORMAT4  EQU   SWTCH
FSCTAB   EQU   CLEAR+4
SMCOUNTS EQU   0
EDTABPTR EQU   SMCOUNTS
FWARDPTR EQU   SMCOUNTS+4
SCCOUNT  EQU   SMCOUNTS+8
RECORDID EQU   SMCOUNTS+10
SMCWITCH EQU   SMCOUNTS+20
SMCTCAM  EQU   SMCWITCH
SCCOUNTR EQU   SMCOUNTS+22
@NM00015 EQU   0
SMTERMNL EQU   @NM00015+22
@NM00017 EQU   0
SMVARID  EQU   @NM00017+22
SMTRECID EQU   SMVARID
SMTTYPID EQU   SMVARID+1
SMTTYP0  EQU   SMVARID+3
SMLOGREC EQU   0
@NM00019 EQU   SMLOGREC
LRTTYP   EQU   @NM00019
LRSWITCH EQU   @NM00019+2
LRSWCH2  EQU   LRSWITCH+1
SHRTSW   EQU   LRSWCH2
LRDISMNT EQU   LRSWCH2
LRTRECID EQU   SMLOGREC+4
@NM00024 EQU   SMLOGREC+5
LRVARIDF EQU   @NM00024
LRVARIDS EQU   LRVARIDF
LRCPUNOS EQU   SMLOGREC+17
LRTMCUA  EQU   SMLOGREC+24
LRVARID  EQU   SMLOGREC+26
LRTTYPID EQU   LRVARID
LRTSCUA  EQU   LRVARID+4
LRDEVTYP EQU   SMLOGREC+54
LRTCUA   EQU   SMLOGREC+58
LRTCAMID EQU   SMLOGREC+70
LRTERMNL EQU   SMLOGREC+72
SMACCTAB EQU   0
SMSUMTAB EQU   0
STHEADER EQU   SMSUMTAB
CONTRPTR EQU   STHEADER
SMTABELM EQU   STHEADER+8
SCNTSIZE EQU   STHEADER+12
STCNTROL EQU   0
STFLAG   EQU   STCNTROL
SUMFLAG  EQU   STFLAG
STMASK   EQU   STCNTROL+1
LROFFSET EQU   STCNTROL+2
STSPCPTR EQU   LROFFSET
SCOFFSET EQU   STCNTROL+4
IFCMSG   EQU   0
IOHND    EQU   0
TRECCH   EQU   TRECCH0
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
@NM00031 EQU   STHEADER+4
@NM00030 EQU   SMLOGREC+71
@NM00029 EQU   SMLOGREC+60
@NM00028 EQU   SMLOGREC+56
@NM00027 EQU   SMLOGREC+42
@NM00026 EQU   LRVARID+2
@NM00025 EQU   SMLOGREC+22
@NM00023 EQU   LRSWCH2
@NM00022 EQU   LRSWCH2
@NM00021 EQU   LRSWITCH
@NM00020 EQU   @NM00019+1
@NM00018 EQU   @NM00017
@NM00016 EQU   @NM00015
@NM00014 EQU   SMCWITCH
@NM00013 EQU   NEWTABLE+6
MODEL    EQU   MERIDIAN+2
MRDNUMBR EQU   MERIDIAN
SYMVAL2  EQU   SYMVAL+2
SYMVAL1  EQU   SYMVAL
SYMCDNUM EQU   SYMCODE
LIBVAL   EQU   LIBADR+2
LIBADNUM EQU   LIBADR
CPUCUX3  EQU   CPUCUAV+5
CPUCUX2  EQU   CPUCUAV+3
CPUCUX1  EQU   CPUCUAV
CPCUANUM EQU   CPUCUAS
CPUVAL   EQU   CPUS+2
CPUNUM   EQU   CPUS
VOLVAL   EQU   VOLUME+2
VOLNUM   EQU   VOLUME
SERVAL   EQU   DEVSERAL+2
SERNUM   EQU   DEVSERAL
MODVAL   EQU   MODELS+2
MODNUM   EQU   MODELS
MDRVAL   EQU   DEVICE+204
MDRNUM   EQU   DEVICE+202
DEVVAL   EQU   DEVICE+2
DEVNUM   EQU   DEVICE
CUA2     EQU   CUAVAL+2
CUA1     EQU   CUAVAL
CUANUM   EQU   CUA
LOADPTR  EQU   EDITABLE+8
LOADNAME EQU   EDITABLE
EDITNUM  EQU   EDITLOAD
SHARLET  EQU   SHAREIO+15
SHRCUABH EQU   SHRBASE+5
SYSTEMP  EQU   SYSUM2+10
SYSPERM  EQU   SYSUM2+8
SYSRANGE EQU   SYSUM2+7
SYSDEV   EQU   SYSUM2+5
SYSOLDA  EQU   SYSITEM
SYS3705  EQU   SYSITEM
SYSOLD   EQU   SYSCPUS
SYSCPU   EQU   SYSCPUS
SYSTROLL EQU   SYSRT+1
SYSSPAN  EQU   SYSRT+1
SYSCUA   EQU   SYSRT
SYSGROUP EQU   SYSUMKEY
SYSUMEOD EQU   SYSUMONE+96
SYSUMPER EQU   SYSUMONE+92
SYSUMPEA EQU   SYSUMONE+88
SYSUMPEI EQU   SYSUMONE+84
SYSUMCH  EQU   SYSUMONE+20
SYSUMMCN EQU   SYSUMONE+16
SYSUMMCR EQU   SYSUMONE+12
SYSUMNXT EQU   SYSUMONE+8
SYSUMIPL EQU   SYSUMONE+4
SYSUMNUM EQU   SYSUMONE
SORTCORE EQU   SORTCCHR
SORTTIME EQU   SORTKEY+1
SORTYEAR EQU   SORTKEY
EVLETTER EQU   EVKEY+5
EVSERIAL EQU   EVKEY+2
EVMODEL  EQU   EVKEY
EVNUM    EQU   EVTABLE+4
EVDAY    EQU   EVSTOP+1
EVYEAR   EQU   EVSTOP
TRETMP   EQU   TREND2+10
TREPRM   EQU   TREND2+8
TRENDDEV EQU   TREND2+6
TRENDDAT EQU   TRENDKEY+5
TRENDOD  EQU   TRENDITM
TREND037 EQU   TRENDITM
TRENDOLD EQU   TRENCPUS
TRENDCPU EQU   TRENCPUS
@NM00011 EQU   TRENDRT+1
TRENDCUA EQU   TRENDRT
TRENDGRP EQU   TRENDKEY
TREPRE   EQU   TREGEN+72
TRECCHF  EQU   TREGEN+68
TRECCHE  EQU   TREGEN+64
TRECCHD  EQU   TREGEN+60
TRECCHC  EQU   TREGEN+56
TRECCHB  EQU   TREGEN+52
TRECCHA  EQU   TREGEN+48
TRECCH9  EQU   TREGEN+44
TRECCH8  EQU   TREGEN+40
TRECCH7  EQU   TREGEN+36
TRECCH6  EQU   TREGEN+32
TRECCH5  EQU   TREGEN+28
TRECCH4  EQU   TREGEN+24
TRECCH3  EQU   TREGEN+20
TRECCH2  EQU   TREGEN+16
TRECCH1  EQU   TREGEN+12
TREMCH   EQU   TREGEN+4
TREIPL   EQU   TREGEN
TRENUM   EQU   TRENDONE+4
TRENEXT  EQU   TRENDONE
@NM00010 EQU   PARM+212
RECLNGT1 EQU   PARM+204
FRAMEPTR EQU   PARM+200
PRINTADR EQU   PARM+148
ADCPUT   EQU   PARM+144
LINECT   EQU   PARM+120
@NM00009 EQU   CCHHRLNG+5
RECCCHHR EQU   CCHHRLNG
USERPGM  EQU   PARM+102
IDTSEC   EQU   IDTIME+3
IDSEC    EQU   IDTIME+2
IDMIN    EQU   IDTIME+1
IDHOUR   EQU   IDTIME
IDASID   EQU   ERRID+4
IDCPU    EQU   ERRID+3
@NM00008 EQU   ERRID+2
IDVALUE  EQU   ERRID
NUMDAYS  EQU   PARM+88
SORTNUM  EQU   PARM+84
TABSIZE  EQU   PARM+80
SYSRETRN EQU   @NM00007
NUMIN222 EQU   @NM00006
WRTHRSH  EQU   PARM+69
TERM     EQU   PARM+58
EVSDAY   EQU   STRTDATE+1
EVSYEAR  EQU   STRTDATE
PENSEC2  EQU   ENDTIME2+2
PENMIN2  EQU   ENDTIME2+1
PENHOUR2 EQU   ENDTIME2
PSTSEC2  EQU   STTIME2+2
PSTMIN2  EQU   STTIME2+1
PSTHOUR2 EQU   STTIME2
PENSEC1  EQU   ENDTIME1+2
PENMIN1  EQU   ENDTIME1+1
PENHOUR1 EQU   ENDTIME1
PSTSEC1  EQU   STTIME1+2
PSTMIN1  EQU   STTIME1+1
PSTHOUR1 EQU   STTIME1
@NM00005 EQU   ENDDT+4
PENDY    EQU   PEND+1
PENYR    EQU   PEND
@NM00004 EQU   ENDDATE
@NM00003 EQU   STDT+4
PSTDY    EQU   PSTD+1
PSTYR    EQU   PSTD
@NM00002 EQU   STDATE
YEARNOW  EQU   DATENOW+4
@NM00001 EQU   DATENOW+3
DAYNOW   EQU   DATENOW
CSNAP    EQU   CLOSEIO
CDRCTWRK EQU   CLOSEIO
CSYSIN   EQU   CLOSEIO
CACCDEV  EQU   CLOSEIO
CACCIN   EQU   CLOSEIO
CSERLOG  EQU   CLOSEIO
CEREPPT  EQU   CLOSEIO
CTOURIST EQU   CLOSEIO
OSNAP    EQU   OPENIO
ODRCTWRK EQU   OPENIO
OSYSIN   EQU   OPENIO
OACCDEV  EQU   OPENIO
OACCIN   EQU   OPENIO
OSERLOG  EQU   OPENIO
OEREPPT  EQU   OPENIO
OTOURIST EQU   OPENIO
PASSFLAG EQU   MISC
PLOGREC  EQU   MISC
ERRORID  EQU   MISC
PSUM     EQU   PRINTES
PEDIT    EQU   PRINTES
PHIST    EQU   MISC
PACC     EQU   MISC
PZERO    EQU   MISC
DEBUG63  EQU   DEBUGA+3
DEBUG62  EQU   DEBUGA+3
DEBUG61  EQU   DEBUGA+3
DEBUG60  EQU   DEBUGA+3
DEBUG59  EQU   DEBUGA+3
DEBUG58  EQU   DEBUGA+3
DEBUG57  EQU   DEBUGA+3
DEBUG56  EQU   DEBUGA+3
DEBUG55  EQU   DEBUGA+2
DEBUG54  EQU   DEBUGA+2
DEBUG53  EQU   DEBUGA+2
DEBUG52  EQU   DEBUGA+2
DEBUG51  EQU   DEBUGA+2
DEBUG50  EQU   DEBUGA+2
DEBUG49  EQU   DEBUGA+2
DEBUG48  EQU   DEBUGA+2
DEBUG47  EQU   DEBUGA+1
DEBUG46  EQU   DEBUGA+1
DEBUG45  EQU   DEBUGA+1
DEBUG44  EQU   DEBUGA+1
DEBUG43  EQU   DEBUGA+1
DEBUG42  EQU   DEBUGA+1
DEBUG41  EQU   DEBUGA+1
DEBUG40  EQU   DEBUGA+1
DEBUG39  EQU   DEBUGA
DEBUG38  EQU   DEBUGA
DEBUG37  EQU   DEBUGA
DEBUG36  EQU   DEBUGA
DEBUG35  EQU   DEBUGA
DEBUG34  EQU   DEBUGA
DEBUG33  EQU   DEBUGA
DEBUG32  EQU   DEBUGA
DEBUG31  EQU   DEBUG+3
DEBUG30  EQU   DEBUG+3
DEBUG29  EQU   DEBUG+3
DEBUG28  EQU   DEBUG+3
DEBUG27  EQU   DEBUG+3
DEBUG26  EQU   DEBUG+3
DEBUG25  EQU   DEBUG+3
DEBUG24  EQU   DEBUG+3
DEBUG23  EQU   DEBUG+2
DEBUG22  EQU   DEBUG+2
DEBUG21  EQU   DEBUG+2
DEBUG20  EQU   DEBUG+2
DEBUG19  EQU   DEBUG+2
DEBUG18  EQU   DEBUG+2
DEBUG17  EQU   DEBUG+2
DEBUG16  EQU   DEBUG+2
DEBUG15  EQU   DEBUG+1
DEBUG13  EQU   DEBUG+1
DEBUG12  EQU   DEBUG+1
DEBUG11  EQU   DEBUG+1
DEBUG10  EQU   DEBUG+1
DEBUG9   EQU   DEBUG+1
DEBUG8   EQU   DEBUG+1
DEBUG7   EQU   DEBUG
DEBUG6   EQU   DEBUG
DEBUG5   EQU   DEBUG
DEBUG4   EQU   DEBUG
DEBUG3   EQU   DEBUG
DEBUG2   EQU   DEBUG
DEBUG1   EQU   DEBUG
DEBUG0   EQU   DEBUG
SORTBRK  EQU   SWITCHES+1
COREFAIL EQU   SWITCHES+1
SHIFT3RD EQU   SWITCHES+1
DEVEXCL  EQU   SWITCHES+1
ZEROALL  EQU   SWITCHES+1
NOTALL   EQU   SWITCHES+1
NOSDR    EQU   SWITCHES
TIMESEQ  EQU   SWITCHES
SYSUM    EQU   SWITCHES
PARMTHR  EQU   SWITCHES
TREND    EQU   SWITCHES
SHORTOBR EQU   SWITCHES
PARMMES  EQU   SWITCHES
RDESUM   EQU   SWITCHES
PCCHFRAM EQU   RECTYPE+1
PMCHFRAM EQU   RECTYPE+1
PTTYP    EQU   RECTYPE+1
PEOD     EQU   RECTYPE
PMIH     EQU   RECTYPE
PDDR     EQU   RECTYPE
PIPL     EQU   RECTYPE
PSOFT    EQU   RECTYPE
POBR     EQU   RECTYPE
PCHAN    EQU   RECTYPE
PMCH     EQU   RECTYPE
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00105 EQU   @RC00104
@RC00163 EQU   @RC00144
@RC00156 EQU   @RC00144
@RC00154 EQU   @RC00144
@RC00146 EQU   @RC00144
@RC00181 EQU   @RC00174
@RC00270 EQU   @RC00256
@RC00268 EQU   @RC00256
@RC00262 EQU   @RC00256
@RC00260 EQU   @RC00256
@RC00258 EQU   @RC00256
@RF00248 EQU   @RC00246
@RF00284 EQU   @RC00246
@RF00298 EQU   @RC00295
@RC00148 EQU   @RC00146
@RC00159 EQU   @RC00156
@RC00164 EQU   @RC00163
@RC00149 EQU   @RC00148
@ENDDATA EQU   *
         END   IFCESUMS
