         TITLE 'IEFQB550-SWA MANAGER-MOVE MODE                         *
                        '
IEFQB550 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IEFQB550  78.059'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
         MODESET EXTKEY=SCHED,SAVEKEY=(2)
*                                  /*
*        BECAUSE OF PROLOGUE CODE GENERATED BY PLS,             Y02669
*        R2 NOW CONTAINS THE CALLER'S KEY, AND CANNOT BE USED   Y02669
*        UNTIL IT IS SAVED IN CALLRKEY.                         Y02669
         L     R3,PSATOLD          POINT TO CURRENT TCB         Y02669
         L     @11,TCBSWASA(R3)    POINT TO WORK AREA PREFIX    Y02669
*                                  (OR 0)                       Y02669
         LTR   @11,@11             CHECK FOR A WORK AREA        Y02669
         BNZ   CHECKUSE            CHECK WHETHER WORK AREA IS  YM08504
*                                  IN USE                      YM08504
*        GET STORAGE FOR A WORK AREA FOR THIS TCB.             YM08504
*        CHECK WHETHER THIS MODULE'S WORK AREA WOULD BE LARGE  YM08504
*        ENOUGH FOR EITHER IEFQB550 OR IEFQB555.               YM08504
         L     R4,@SIZDATD         GET SIZE REQUIRED FOR THIS   Y02669
*                                  MODULE'S WORK AREA           Y02669
         LA    R4,0(,R4)           CLEAR SUBPOOL FROM HIGH      Y02669
*                                  ORDER BYTE                   Y02669
         L     R1,SPSZ55N          PT. TO ADCON IN QB555       YM08504
         L     R1,0(,R1)           PT. TO VALUE IN QB555       YM08504
         L     R1,0(,R1)           GET VALUE IN QB555          YM08504
         LA    R1,0(,R1)           CLEAR HIGH ORDER BYTE       YM08504
         CR    R4,R1                                           YM08504
         BM    GETOTHER            GO GET SIZE REQUIRED FOR    YM08504
*                                  OTHER MODULE                YM08504
*        IN EITHER CASE, RESTORE R4 TO GET THE SUBPOOL.        YM08504
         L     R4,@SIZDATD         USE THIS MODULE'S SIZE      YM08504
         B     GETPERM             SKIP ELSE CLAUSE            YM08504
GETOTHER EQU   *                                               YM08504
         L     R1,SPSZ55N          PT. TO ADCON IN QB555       YM08504
         L     R1,0(,R1)           PT. TO VALUE IN QB555       YM08504
         L     R4,0(,R1)           GET VALUE IN QB555          YM08504
GETPERM  EQU   *                                               YM08504
         LA    R1,WKPFEX                                        Y02669
         ALR   R4,R1               ADD SIZE OF PREFIX TO AMOUNT Y02669
*                                  OF STORAGE REQUIRED BY PLS   Y02669
*                                  TO GET THE SIZE REQUIRED FOR Y02669
*                                  THE WORKAREA. (THE SUBPOOL   Y02669
*                                  IN THE HIGH ORDER BYTE IS    Y02669
*                                  PRESERVED.)                  Y02669
         GETMAIN R,LV=(R4)         GET WORK AREA                Y02669
         ST    R4,SPSIZE(,R1)      PUT SIZE AND SUBPOOL OF      Y02669
*                                  WORK AREA IN PREFIX          Y02669
         MVI   FLAGS(R1),ZERO      CLEAR FLAGE                 YM08504
         MODESET EXTKEY=ZERO       GET IN KEY ZERO TO STORE           **
                                   IN TCB                       Y02669
         ST    R1,TCBSWASA(,R3)    SAVE PTR. TO WORKAREA PREFIX Y02669
         LR    @11,R1              POINT TO WORK AREA PREFIX    Y02669
*                                  (EXPECTED BY THE FOLLOWING   Y02669
*                                  PIECE OF CODE)               Y02669
         MODESET EXTKEY=SCHED      GET IN KEY FOR GETMAIN      YM08504
CHECKUSE EQU   *                                               YM08504
         TM    FLAGS(@11),INUSE    CHECK WHETHER WORK AREA     YM08504
*                                  IS IN USE                   YM08504
         BNO   PROLOG              NOT IN USE, USE IT          YM08504
*        WORK AREA IS IN USE (BY AN INTERRUPTED RB ALSO UNDER  YM08504
*        THIS TCB). GET A WORK AREA TO BE USED JUST FOR THIS   YM08504
*        INVOCATION OF THIS MODULE.                            YM08504
         L     R4,@SIZDATD                                     YM08504
         LA    R1,WKPFEX                                       YM08504
         ALR   R4,R1                                           YM08504
         GETMAIN R,LV=(R4)                                     YM08504
         LR    @11,R1              SAVE PTR. TO WORK AREA      YM08504
         ST    R4,SPSIZE(,@11)     SAVE FOR FREEMAIN           YM08504
         MVI   FLAGS(@11),MUSTFREE INDICATE MUST BE FREED ON   YM08504
*                                  EXIT                        YM08504
PROLOG   EQU   *                                                Y02669
         OI    FLAGS(@11),INUSE    SET IN USE                  YM08504
         LA    @11,WKPFEX(,@11)    POINT TO ACTUAL WORK AREA    Y02669
*                                  (SKIP THE PREFIX)            Y02669
         USING @DATD,@11           PROVIDE ADDRESSABILITY       Y02669
         ST    @13,@SA00001+SLOTBACK  BACKWARD CHAIN SAVE AREAS Y02669
         STC   @02,CALLRKEY        SAVE CALLER'S KEY            Y02669
*        NOTE THAT THE MODESET MACRO DOES NOT SUPPORT SYMBOLIC  Y02669
*        REGISTER NAMES.                                        Y02669
         MODESET KEYADDR=(2)       GET IN CALLER'S KEY TO             **
                                   STORE IN CALLER'S SAVE AREA  Y02669
         LM    @00,@04,SLOTR0(@13) RESTORE INPUT REGISTERS      Y02669
         ST    @11,SLOTFORE(,@13)  FOREWARD CHAIN SAVE AREAS    Y02669
         LR    @13,@11             POINT TO CURRENT SAVE AREA   Y02669
         MODESET EXTKEY=SCHED      RETURN TO SCHEDULER KEY FOR        **
                                   NORMAL PROCESSING            Y02669
*   QMPAPTR=R1;                     /* SET QMPA BASE POINTER         */
         LR    QMPAPTR,R1                                          0078
*   RFY                                                            0079
*    (R0,                                                          0079
*     R1,                                                          0079
*     R2,                                                          0079
*     R3,                                                          0079
*     R4) UNRSTD;                   /*                         Y02669*/
*   RETNCODE=ZERO;                  /* INITIALIZE RETURN CODE TO 0   */
         SLR   @10,@10                                             0080
         ST    @10,RETNCODE                                        0080
*   IF QMPOP=ASGNST×QMPOP=ASSIGN THEN/* ASSIGN OR ASSIGN/START       */
         CLI   QMPOP(QMPAPTR),X'00'                                0081
         BE    @RT00081                                            0081
         CLI   QMPOP(QMPAPTR),X'01'                                0081
         BNE   @RF00081                                            0081
@RT00081 DS    0H                                                  0082
*     CALL QB550AST;                /* CALL INTERNAL PROCEDURE       */
         BAL   @14,QB550AST                                        0082
*   ELSE                                                           0083
*     IF QMPOP=WRITE THEN           /* IS THIS A WRITE REQUEST       */
         B     @RC00081                                            0083
@RF00081 CLI   QMPOP(QMPAPTR),X'03'                                0083
         BNE   @RF00083                                            0083
*       CALL QB550WRT;              /* YES, CALL INTERNAL PROCEDURE  */
         BAL   @14,QB550WRT                                        0084
*     ELSE                                                         0085
*       IF QMPOP=READ THEN          /* IS THIS A READ REQUEST        */
         B     @RC00083                                            0085
@RF00083 CLI   QMPOP(QMPAPTR),X'04'                                0085
         BNE   @RF00085                                            0085
*         CALL QB550RD;             /* YES, CALL INTERNAL PROCEDURE  */
         BAL   @14,QB550RD                                         0086
*       ELSE                                                       0087
*         IF QMPOP=DELETE THEN      /* IS THIS A DELETE REQUEST      */
         B     @RC00085                                            0087
@RF00085 CLI   QMPOP(QMPAPTR),X'08'                                0087
         BNE   @RF00087                                            0087
*           CALL QB550DEL;          /* YES, CALL INTERNAL PROCEDURE  */
         BAL   @14,QB550DEL                                        0088
*         ELSE                                                     0089
*           IF QMPOP=WRTASGN THEN   /* IS THIS A WRITE/ASSIGN REQ.   */
         B     @RC00087                                            0089
@RF00087 CLI   QMPOP(QMPAPTR),X'02'                                0089
         BNE   @RF00089                                            0089
*             IF QMPNC^='0000'B×QMPCM^='0000'B THEN/* YES, IS EITHER
*                                      NON 0                         */
         TM    QMPNC(QMPAPTR),B'00001111'                          0090
         BNZ   @RT00090                                            0090
         TM    QMPCM(QMPAPTR),B'11110000'                          0090
         BZ    @RF00090                                            0090
@RT00090 DS    0H                                                  0091
*               DO;                                                0091
*                 IF QMPNC^='0000'B THEN/* YES, IS WRITE NON 0       */
         TM    QMPNC(QMPAPTR),B'00001111'                          0092
         BZ    @RF00092                                            0092
*                   CALL QB550WRT;  /* YES, CALL INT. PROC.          */
         BAL   @14,QB550WRT                                        0093
*                 IF RETNCODE=ZERO& /* IF NO ERROR YET AND           */
*                     QMPCM^='0000'B THEN/* ASSIGN COUNT NOT = 0     */
@RF00092 L     @10,RETNCODE                                        0094
         LTR   @10,@10                                             0094
         BNZ   @RF00094                                            0094
         TM    QMPCM(QMPAPTR),B'11110000'                          0094
         BZ    @RF00094                                            0094
*                   CALL QB550AST;  /* CALL INTERNAL PROC.           */
         BAL   @14,QB550AST                                        0095
*               END;                                               0096
*             ELSE                  /* IF BOTH WRITE AND ASSIGN COUNT
*                                      ARE 0                         */
*               RETNCODE=INVCOUNT;  /* THAT IS AN ERROR              */
         B     @RC00090                                            0097
@RF00090 LA    @10,20                                              0097
         ST    @10,RETNCODE                                        0097
*           ELSE                                                   0098
*             RETNCODE=INVFUNCT;    /* INVALID FUNCTION REQUEST      */
         B     @RC00089                                            0098
@RF00089 LA    @10,4                                               0098
         ST    @10,RETNCODE                                        0098
*   IF RETNCODE^=ZERO THEN          /* ANY ERROR                     */
@RC00089 DS    0H                                                  0099
@RC00087 DS    0H                                                  0099
@RC00085 DS    0H                                                  0099
@RC00083 DS    0H                                                  0099
@RC00081 L     @10,RETNCODE                                        0099
         LTR   @10,@10                                             0099
         BZ    @RF00099                                            0099
*     DO;                           /* YES, DO THE FOLLOWING         */
*       RESPECIFY                                                  0101
*        (R1,                                                      0101
*         R15) RESTRICTED;                                         0101
*       R15=RETNCODE;               /* LOAD ERROR INDICATION         */
         L     R15,RETNCODE                                        0102
*       R1=ZEROBZER;                /* LOAD ABEND CODE               */
         LA    R1,176                                              0103
*       GEN(ABEND (1),,,SYSTEM);    /* ISSUE 0B0 ABEND               */
         ABEND (1),,,SYSTEM
*       RESPECIFY                                                  0105
*        (R1,                                                      0105
*         R15) UNRESTRICTED;                                       0105
*     END;                                                         0106
*   GEN REFS(CALLRKEY,RETNCODE);                                   0107
@RF00099 DS    0H                                                  0107
*                                     /*
*        THE EPILOG CODE MUST BE CODED IN ASSEMBLER BECAUSE    YM08504
*        EITHER THE 'IN USE' FLAG MUST BE TURNED OFF OR THE    YM08504
*        WORK AREA WAS A TEMPORARY ONE AND MUST BE FREED.      YM08504
         L     R4,RETNCODE         SAVE RETURN CODE            YM08504
         IC    @02,CALLRKEY        SAVE CALLER'S PROTECT KEY   YM08504
         L     @13,SLOTBACK(,@13)  SAVE PTR. TO THE CALLER'S   YM08504
*                                  SAVE AREA                   YM08504
         LA    @01,WKPFEX                                      YM08504
         SR    @11,@01             SUBTRACT SIZE OF PREFIX TO  YM08504
*                                  POINT TO ACTUAL BEGINNING   YM08504
*                                  OF WORK AREA                YM08504
         TM    FLAGS(@11),MUSTFREE CHECK WHETHER AREA IS TO BE YM08504
*                                  FREED                       YM08504
         BO    GOFREE              YES, GO FREE                YM08504
         NI    FLAGS(@11),X'FF'-INUSE DO NOT FREE, TURN OFF IN YM08504
*                                  USE FLAG                    YM08504
         B     EPILOG              SKIP ELSE CLAUSE            YM08504
GOFREE   EQU   *                                               YM08504
         L     @00,SPSIZE(,@11)                                YM08504
         FREEMAIN R,LV=(0),A=(@11)                             YM08504
EPILOG   EQU   *                                               YM08504
         MODESET KEYADDR=(2)       SET CALLER'S KEY            YM08504
         LR    @15,R4              SET RETURN CODE             YM08504
         L     @14,SLOTR14(,@13)   RESTORE REGISTERS           YM08504
         LM    @00,@12,SLOTR0(@13)                             YM08504
         BR    @14                 RETURN                      YM08504
*                                                                  0108
*/********************************************************************/
*/* THIS IS THE INTERNAL PROCEDURE THAT DOES THE ASSIGNS AND ASSIGN/ */
*/* STARTS.  IT GETS THE ASSIGN COUNT FROM THE QMPA.  IF IT IS AN    */
*/* ASSIGN/START IT SETS THE RELATIVE BLOCK NUMBER IN THE QMPA TO 0. */
*/* THIS FIELD IS INCREMENTED BEFORE EACH ASSIGN SO THAT THE FIRST   */
*/* BLOCK IS ASSIGNED AN RBN OF 1.  THERE IS A 4 BYTE EPA ENTRY      */
*/* FOR EACH BLOCK TO BE ASSIGNED. IT WILL RECEIVE THE SVA FOR THAT  */
*/* BLOCK. FOR EACH BLOCK TO BE                                      */
*/* ASSIGNED, A 192 BYTE GETMAIN IS ISSUED FOR THE SUBPOOL AS        */
*/* INDICATED BY THE QMPA. INFO IS PUT IN THE SWA PREFIX AND IN THE  */
*/* CALLERS EPA. THE BLOCK SPACE IN SWA IS NOT CLEARED. THE ONLY     */
*/* ERROR CONDITION IS A 0 COUNT FOR AN ASSIGN REQUEST. IN THAT      */
*/* CASE RETNCODE IS SET TO AN ERROR VALUE FOR PROCESSING BY THE     */
*/* EXTERNAL PROCEDURE.                                              */
*/********************************************************************/
*                                                                  0108
*QB550AST:                                                         0108
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/* ASSIGN PROCEDURE        Y02669*/
QB550AST DS    0H                                                  0109
*   RFY                                                            0109
*    (R14) RSTD;                    /*                        YM08414*/
*   EPAPTR=QMPACL;                  /* SET EPA BASE POINTER          */
         L     EPAPTR,QMPACL-1(,QMPAPTR)                           0110
         LA    EPAPTR,0(,EPAPTR)                                   0110
*   ASGNCNT=(QMPCMNC&FOXZERO)/SIXTEEN;/* GET # OF BLOCKS             */
         LA    @00,240                                             0111
         SLR   ASGNCNT,ASGNCNT                                     0111
         IC    ASGNCNT,QMPCMNC(,QMPAPTR)                           0111
         NR    @00,ASGNCNT                                         0111
         SRL   @00,4                                               0111
         LR    ASGNCNT,@00                                         0111
*   GEN(MODESET EXTKEY=SUPR);       /* SWITCH TO SUPERVISOR KEY      */
         MODESET EXTKEY=SUPR
*   IF QMPOP=ASGNST THEN            /* IF ASSIGN/START               */
         CLI   QMPOP(QMPAPTR),X'00'                                0113
         BNE   @RF00113                                            0113
*     QMRBN=ZERO;                   /* SET RBN TO INDICATE START OF A
*                                      JOB                           */
         SLR   @15,@15                                             0114
         ST    @15,QMRBN(,QMPAPTR)                                 0114
*   GEN(MODESET EXTKEY=SCHED);      /* SWITCH BACK TO SCHEDULER KEY  */
@RF00113 DS    0H                                                  0115
         MODESET EXTKEY=SCHED
*   IF QMPOP=ASSIGN&                /* IF ASSIGN REQUEST             */
*       ASGNCNT=ZERO THEN           /* AND ASSIGN COUNT = 0          */
         CLI   QMPOP(QMPAPTR),X'01'                                0116
         BNE   @RF00116                                            0116
         LTR   ASGNCNT,ASGNCNT                                     0116
         BNZ   @RF00116                                            0116
*     RETNCODE=INVCOUNT;            /* THIS IS AN ERROR CONDITION    */
         LA    @15,20                                              0117
         ST    @15,RETNCODE                                        0117
*   DO WHILE ASGNCNT^=ZERO;         /* LOOP CONTROL                  */
@RF00116 B     @DE00118                                            0118
@DL00118 DS    0H                                                  0119
*     LNGTH=BLKLNGTH+SWPRELNG;      /* BLOCK LENGTH + SWA PREFIX   0119
*                                      LENGTH                        */
         MVC   LNGTH(3),@CF00949+1                                 0119
*     SPNUM=QMSWSP;                 /* GET SUBPOOL NUMBER FROM QMPA  */
         MVC   SPNUM(1),QMSWSP(QMPAPTR)                            0120
*     RESPECIFY                                                    0121
*      (R0,                                                        0121
*       R1) RESTRICTED;             /* RESTRICT FOR GETMAIN          */
*     R0=GETFREES;                  /* LOAD INTO REGISTER 0          */
         L     R0,GETFREES                                         0122
*     GEN(GETMAIN R,LV=(0));        /* GET SPACE FOR 1 BLOCK AND   0123
*                                      BLOCK PREFIX                  */
         GETMAIN R,LV=(0)
*     SPFXPTR=R1;                   /* INTIALIZE SWA PREFIX PTR.     */
         LR    SPFXPTR,R1                                          0124
*     GOTSPACE=R1;                  /* SAVE FOR USE AS 3 BYTE SVA    */
         ST    R1,GOTSPACE                                         0125
*     GEN(MODESET KEYADDR=CALLRKEY,WORKREG=1);/* SWITCH TO CALLERS 0126
*                                      KEY TO STORE IN HIS EPA       */
         MODESET KEYADDR=CALLRKEY,WORKREG=1
*     RESPECIFY                                                    0127
*      (R0,                                                        0127
*       R1) UNRESTRICTED;                                          0127
*     SWASNVA=SWPREADR;             /* PUT SVA IN CALLERS EPA        */
         MVC   SWASNVA(3,EPAPTR),SWPREADR                          0128
*     SWASNZO=ZERO;                 /* ZERO OUT LOW ORDER BYTE       */
         MVI   SWASNZO(EPAPTR),X'00'                               0129
*     GEN(MODESET EXTKEY=SUPR);     /* SWITCH TO KEY 0 TO STORE INTO
*                                      THE QMPA                      */
         MODESET EXTKEY=SUPR
*     TEMPSAV1=QMRBN;               /* PICK UP CURRENT RBN FROM QMPA */
         L     TEMPSAV1,QMRBN(,QMPAPTR)                            0131
*LOOP:                                                             0132
*     TEMPSAV2=TEMPSAV1+ONE;        /* INCREMENT IT BY ONE           */
LOOP     LA    TEMPSAV2,1                                          0132
         ALR   TEMPSAV2,TEMPSAV1                                   0132
*     CS(TEMPSAV1,TEMPSAV2,QMRBN);  /* REPLACE RBN FIELD OF QMPA IF
*                                      IT HASN'T BEEN UPDATED SINCE
*                                      IT WAS LOADED INTO TEMPSAV1   */
         CS    TEMPSAV1,@02,QMRBN(QMPAPTR)                         0133
*     BC(4,LOOP);                   /* IF THE SWAP WASN'T MADE GO  0134
*                                      BACK AND TRY AGAIN            */
         BC    4,LOOP                                              0134
*     GEN(MODESET EXTKEY=SCHED);    /* SWITCH BACK TO KEY 1          */
         MODESET EXTKEY=SCHED
*     SWAPFX=(SWAPFX&&SWAPFX);      /* CLEAR SWA PREFIX              */
         XC    SWAPFX(16,SPFXPTR),SWAPFX(SPFXPTR)                  0136
*     SWPRBN=TEMPSAV2;              /* PUT RBN IN SWA PREFIX         */
         ST    TEMPSAV2,SWPRBN(,SPFXPTR)                           0137
*     SWPVA=SWPREADR;               /* PUT SELF SVA IN SWA PREFIX    */
         MVC   SWPVA(3,SPFXPTR),SWPREADR                           0138
*     SWPLNGTH=BLKLNGTH;            /* PUT LENGTH IN SWA PREFIX      */
         MVC   SWPLNGTH(3,SPFXPTR),@CF00854+1                      0139
*     EPAPTR=EPAPTR+FOUR;           /* UP EPA POINTER TO NEXT ENTRY  */
         AL    EPAPTR,@CF00058                                     0140
*     ASGNCNT=ASGNCNT-ONE;          /* DECREMENT ASSIGN COUNT        */
         BCTR  ASGNCNT,0                                           0141
*   END;                                                           0142
@DE00118 LTR   ASGNCNT,ASGNCNT                                     0142
         BNZ   @DL00118                                            0142
*   RFY                                                            0143
*    (R14) UNRSTD;                  /*                        YM08414*/
*   END QB550AST;                   /* END OF ASSIGN PROCEDURE       */
@EL00002 DS    0H                                                  0144
@EF00002 DS    0H                                                  0144
@ER00002 BR    @14                                                 0144
*                                                                  0145
*/********************************************************************/
*/* THIS IS THE INTERNAL PROCEDURE THAT DOES THE WRITES (MOVES INTO  */
*/* SWA). THE WRITE COUNT IS PICKED UP FROM THE QMPA. THE EPA        */
*/* ADDRESS IS ALSO PICKED UP FROM THE QMPA. THERE MUST BE ONE       */
*/* EIGHT BYTE ENTRY IN THE EPA FOR EACH BLOCK TO BE WRITTEN.  IT    */
*/* CONTAINS THE ADDRESS OF THE BLOCK TO BE MOVED, THE SVA THAT WAS  */
*/* GIVEN AT ASSIGN TIME AND THE ID OF THE BLOCK, IF THIS IS THE     */
*/* FIRST TIME THAT THIS BLOCK WAS WRITTEN.  HOWEVER, IF THE BLOCK   */
*/* HAS AN EMBEDDED ID THIS FIELD MAY BE 0.  WHEN ALL THE BLOCKS     */
*/* HAVE BEEN WRITTEN, THE JOURNAL ROUTINE IS CALLED. IF ANY ERROR   */
*/* CONDITION IS DETECTED, RETNCODE WILL BE SET TO THE APPROPRIATE   */
*/* VALUE FOR PROCESSING BY THE EXTERNAL PROCEDURE. THE OPERATION    */
*/* WILL BE TERMINATED AT THAT POINT.                                */
*/********************************************************************/
*                                                                  0145
*QB550WRT:                                                         0145
*   PROC;                           /* WRITE PROCEDURE               */
QB550WRT STM   @14,@12,@SA00003                                    0145
*   RDWRTCNT=(QMPCMNC&ZEROFOX);     /* GET WRITE COUNT               */
         LA    RDWRTCNT,15                                         0146
         SLR   @10,@10                                             0146
         IC    @10,QMPCMNC(,QMPAPTR)                               0146
         NR    RDWRTCNT,@10                                        0146
*   EPAPTR=QMPACL;                  /* SET EPA BASE POINTER          */
         L     EPAPTR,QMPACL-1(,QMPAPTR)                           0147
         LA    EPAPTR,0(,EPAPTR)                                   0147
*   IF RDWRTCNT=ZERO THEN                                          0148
         LTR   RDWRTCNT,RDWRTCNT                                   0148
         BNZ   @RF00148                                            0148
*     RETNCODE=INVCOUNT;            /* WRITE 0 BLOCKS IS INVALID     */
         LA    @10,20                                              0149
         ST    @10,RETNCODE                                        0149
*   ELSE                                                           0150
*     DO WHILE(RDWRTCNT^=ZERO&      /* SET UP LOOP CONTROL           */
*           RETNCODE=ZERO);         /* ESCAPE HATCH FOR ERROR        */
         B     @RC00148                                            0150
@RF00148 B     @DE00150                                            0150
@DL00150 DS    0H                                                  0151
*       SPFXPTR=SWROWVA;            /* SET UP SWA PREFIX POINTER     */
         SLR   @10,@10                                             0151
         ICM   @10,7,SWROWVA(EPAPTR)                               0151
         LR    SPFXPTR,@10                                         0151
*       IF SWROWVA^=SWPVA THEN      /* IS SVA INVALID                */
         L     @06,SWPVA-1(,SPFXPTR)                               0152
         LA    @06,0(,@06)                                         0152
         CR    @10,@06                                             0152
         BE    @RF00152                                            0152
*         RETNCODE=INVSVA;          /* YES, SET ERROR CODE           */
         LA    @10,8                                               0153
         ST    @10,RETNCODE                                        0153
*       ELSE                                                       0154
*         DO;                                                      0154
         B     @RC00152                                            0154
@RF00152 DS    0H                                                  0155
*           IF SWPLNGTH^=BLKLNGTH THEN/* LENGTH O.K.                 */
         CLC   SWPLNGTH(3,SPFXPTR),@CF00854+1                      0155
         BE    @RF00155                                            0155
*             RETNCODE=INVLNGTH;    /* NO, SET ERROR CODE            */
         LA    @10,16                                              0156
         ST    @10,RETNCODE                                        0156
*           ELSE                                                   0157
*             DO;                                                  0157
         B     @RC00155                                            0157
@RF00155 DS    0H                                                  0158
*               IF SWPWRT='0'B THEN /* HAS BLOCK BEEN WRITTEN        */
         TM    SWPWRT(SPFXPTR),B'10000000'                         0158
         BNZ   @RF00158                                            0158
*                 DO;               /* NO                            */
*                   IF SWWRTID=CHARZERO THEN/* IS ID BEING PASSED    */
         CLI   SWWRTID(EPAPTR),X'00'                               0160
         BNE   @RF00160                                            0160
*                     TEMPID=EMBBLKID;/* NO - GET IT FROM BLOCK      */
         L     @10,SWBUFPTR(,EPAPTR)                               0161
         MVC   TEMPID(1),EMBBLKID(@10)                             0161
*                   ELSE                                           0162
*                     TEMPID=SWWRTID;/* YES - TAKE IT FROM EPA       */
         B     @RC00160                                            0162
@RF00160 MVC   TEMPID(1),SWWRTID(EPAPTR)                           0162
*                   FOUND=ZERO;     /* INITIALIZE TO NOT FOUND       */
@RC00160 SLR   FOUND,FOUND                                         0163
*                   DO I=1 TO TBLSIZE WHILE(FOUND=ZERO);/* SEARCH  0164
*                                      TABLE FOR ID                  */
         LA    I,1                                                 0164
@DL00164 C     FOUND,@CF00111                                      0164
         BNE   @DC00164                                            0164
*                     IF TEMPID=BLOCKID(I) THEN/* FOR A MATCH        */
         LA    @10,BLOCKID-1(I)                                    0165
         CLC   TEMPID(1),0(@10)                                    0165
         BNE   @RF00165                                            0165
*                       DO;                                        0166
*                         FOUND=ONE;/* INDICATE FOUND                */
         LA    FOUND,1                                             0167
*                         SWPID=TEMPID;/* PUT ID IN SWA PREFIX       */
         MVC   SWPID(1,SPFXPTR),TEMPID                             0168
*                         SWPACRO=TABLE(I);/* PUT ACRONYM IN PREFIX  */
         LR    @10,I                                               0169
         SLA   @10,2                                               0169
         LA    @01,TABLE-4(@10)                                    0169
         MVC   SWPACRO(4,SPFXPTR),0(@01)                           0169
*                         SWPWRT='1'B;/* INDICATE WRITTEN            */
         OI    SWPWRT(SPFXPTR),B'10000000'                         0170
*                       END;                                       0171
*                   END;                                           0172
@RF00165 AL    I,@CF00045                                          0172
         C     I,@CF00887                                          0172
         BNH   @DL00164                                            0172
@DC00164 DS    0H                                                  0173
*                   IF FOUND=ZERO THEN/* DID WE FIND A MATCHING ID   */
         C     FOUND,@CF00111                                      0173
         BNE   @RF00173                                            0173
*                     RETNCODE=INVID;/* NO - IT MUST BE INVALID      */
         LA    @10,28                                              0174
         ST    @10,RETNCODE                                        0174
*                 END;                                             0175
@RF00173 DS    0H                                                  0176
*               IF RETNCODE=ZERO THEN/* IF NO ERROR DETECTED YET     */
@RF00158 L     @10,RETNCODE                                        0176
         LTR   @10,@10                                             0176
         BNZ   @RF00176                                            0176
*                 DO;                                              0177
*                   SWABLOCK=USERBUF;/* MOVE BLOCK TO SWA            */
         L     @10,SWBUFPTR(,EPAPTR)                               0178
         MVC   SWABLOCK+16(176,SPFXPTR),USERBUF(@10)               0178
*                   RDWRTCNT=RDWRTCNT-ONE;/* DECREMENT WRITE COUNT   */
         BCTR  RDWRTCNT,0                                          0179
*                   EPAPTR=EPAPTR+EIGHT;/* MOVE TO NEXT EPA ENTRY    */
         AL    EPAPTR,@CF00042                                     0180
*                 END;                                             0181
*             END;                                                 0182
@RF00176 DS    0H                                                  0183
*         END;                                                     0183
@RC00155 DS    0H                                                  0184
*     END;                                                         0184
@RC00152 DS    0H                                                  0184
@DE00150 SLR   @10,@10                                             0184
         CR    RDWRTCNT,@10                                        0184
         BE    @DC00150                                            0184
         C     @10,RETNCODE                                        0184
         BE    @DL00150                                            0184
@DC00150 DS    0H                                                  0185
*   IF RETNCODE=ZERO THEN           /* WERE ANY PARAMETERS INVALID   */
@RC00148 L     @10,RETNCODE                                        0185
         LTR   @10,@10                                             0185
         BNZ   @RF00185                                            0185
*     DO;                           /* NO                            */
*       JNLPTR=ADDR(PARMLST);       /* SET BASE FOR JNLPARM          */
         LA    JNLPTR,PARMLST                                      0187
*       JNLPARM=(JNLPARM&&JNLPARM); /* CLEAR PARM LIST               */
         XC    JNLPARM(16,JNLPTR),JNLPARM(JNLPTR)                  0188
*       JNLSWAMI='1'B;              /* INDICATE SWA MOVE MODE        */
         OI    JNLSWAMI(JNLPTR),B'10000000'                        0189
*       JNLPPTRX=QMPAPTR;           /* SET UP JOURNAL PARAMETER      */
         ST    QMPAPTR,JNLPPTRX(,JNLPTR)                           0190
*       CALL IEFXB500(PARMLST);     /* CALL JOURNAL WRITE            */
         LA    @10,PARMLST                                         0191
         ST    @10,@AL00001                                        0191
         L     @15,@CV00809                                        0191
         LA    @01,@AL00001                                        0191
         BALR  @14,@15                                             0191
*     END;                                                         0192
*   END QB550WRT;                   /* END OF WRITE PROCEDURE        */
@EL00003 DS    0H                                                  0193
@EF00003 DS    0H                                                  0193
@ER00003 LM    @14,@12,@SA00003                                    0193
         BR    @14                                                 0193
*                                                                  0194
*/********************************************************************/
*/* THIS IS THE INTERNAL PROCEDURE THAT DOES THE READS (MOVES BLOCKS */
*/* FROM SWA TO THE CALLERS BUFFERS). THE READ COUNT AND THE EPA     */
*/* ADDRESS ARE PICKED UP FROM THE QMPA. THERE MUST BE ONE 8 BYTE    */
*/* EPA ENTRY FOR EACH BLOCK TO BE READ. IT CONTAINS THE ADDRESS     */
*/* OF THE BUFFER, TO WHICH THE BLOCK WILL BE MOVED, AND THE SVA     */
*/* OF THE BLOCK. THE BLOCK WILL BE MOVED INTO THE SPECIFIED BUFFER. */
*/* THE BLOCK ID WILL BE PLACED IN THE EPA. IF ANY ERROR IS DETECTED */
*/* RETNCODE WILL BE SET TO AN APPROPRIATE VALUE FOR PROCESSING BY   */
*/* THE EXTERNAL PROCEDURE. THE OPERATION WILL BE TERMINATED AT THAT */
*/* POINT.                                                           */
*/********************************************************************/
*                                                                  0194
*QB550RD:                                                          0194
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/* READ PROCEDURE          Y02669*/
QB550RD  DS    0H                                                  0195
*   RFY                                                            0195
*    (R14) RSTD;                    /*                        YM08414*/
*   RDWRTCNT=(QMPCMNC&ZEROFOX);     /* GET READ COUNT                */
         LA    RDWRTCNT,15                                         0196
         SLR   @15,@15                                             0196
         IC    @15,QMPCMNC(,QMPAPTR)                               0196
         NR    RDWRTCNT,@15                                        0196
*   EPAPTR=QMPACL;                  /* SET EPA BASE POINTER          */
         L     EPAPTR,QMPACL-1(,QMPAPTR)                           0197
         LA    EPAPTR,0(,EPAPTR)                                   0197
*   IF RDWRTCNT=ZERO THEN                                          0198
         LTR   RDWRTCNT,RDWRTCNT                                   0198
         BNZ   @RF00198                                            0198
*     RETNCODE=INVCOUNT;            /* READ 0 BLOCKS IS INVALID      */
         LA    @15,20                                              0199
         ST    @15,RETNCODE                                        0199
*   ELSE                                                           0200
*     DO WHILE(RDWRTCNT^=ZERO&      /* SET UP LOOP CONTROL           */
*           RETNCODE=ZERO);         /* ESCAPE HATCH FOR ERROR        */
         B     @RC00198                                            0200
@RF00198 B     @DE00200                                            0200
@DL00200 DS    0H                                                  0201
*       SPFXPTR=SWROWVA;            /* SET UP SWA PREFIX POINTER     */
         SLR   @15,@15                                             0201
         ICM   @15,7,SWROWVA(EPAPTR)                               0201
         LR    SPFXPTR,@15                                         0201
*       IF SWROWVA^=SWPVA THEN      /* IS SVA INVALID                */
         L     @10,SWPVA-1(,SPFXPTR)                               0202
         LA    @10,0(,@10)                                         0202
         CR    @15,@10                                             0202
         BE    @RF00202                                            0202
*         RETNCODE=INVSVA;          /* YES, SET ERROR CODE           */
         LA    @15,8                                               0203
         ST    @15,RETNCODE                                        0203
*       ELSE                                                       0204
*         IF SWPWRT='0'B THEN       /* HAS BLOCK BEEN WRITTEN        */
         B     @RC00202                                            0204
@RF00202 TM    SWPWRT(SPFXPTR),B'10000000'                         0204
         BNZ   @RF00204                                            0204
*           RETNCODE=INVREAD;       /* NO, SET ERROR CODE            */
         LA    @15,12                                              0205
         ST    @15,RETNCODE                                        0205
*         ELSE                                                     0206
*           IF SWPLNGTH^=BLKLNGTH THEN/* IS LENGTH OTHER THAN 176    */
         B     @RC00204                                            0206
@RF00204 CLC   SWPLNGTH(3,SPFXPTR),@CF00854+1                      0206
         BE    @RF00206                                            0206
*             RETNCODE=INVLNGTH;    /* YES, SET ERROR CODE           */
         LA    @15,16                                              0207
         ST    @15,RETNCODE                                        0207
*           ELSE                                                   0208
*             DO;                   /* EVERYTHING IS VALID           */
         B     @RC00206                                            0208
@RF00206 DS    0H                                                  0209
*               RESPECIFY                                          0209
*                (R2) RESTRICTED;   /* RESTRICT FOR MODESET USAGE    */
*               GEN(MODESET KEYADDR=CALLRKEY,WORKREG=2);/* SWITCH TO
*                                      CALLERS KEY TO MOVE BLOCK AND
*                                      PUT ID IN EPA                 */
         MODESET KEYADDR=CALLRKEY,WORKREG=2
*               RESPECIFY                                          0211
*                (R2) UNRESTRICTED; /* RELEASE FOR PLS USE           */
*               SWWRTID=SWPID;      /* INSERT BLOCK ID IN EPA        */
         MVC   SWWRTID(1,EPAPTR),SWPID(SPFXPTR)                    0212
*               USERBUF=SWABLOCK;   /* MOVE BLOCK TO USERS BUFFER    */
         L     @15,SWBUFPTR(,EPAPTR)                               0213
         MVC   USERBUF(176,@15),SWABLOCK+16(SPFXPTR)               0213
*               GEN(MODESET EXTKEY=SCHED);/* SWITCH BACK TO KEY 1    */
         MODESET EXTKEY=SCHED
*               RDWRTCNT=RDWRTCNT-ONE;/* DECREMENT READ COUNT        */
         BCTR  RDWRTCNT,0                                          0215
*               EPAPTR=EPAPTR+EIGHT;/* MOVE TO NEXT EPA ENTRY        */
         AL    EPAPTR,@CF00042                                     0216
*             END;                                                 0217
*     END;                                                         0218
@RC00206 DS    0H                                                  0218
@RC00204 DS    0H                                                  0218
@RC00202 DS    0H                                                  0218
@DE00200 SLR   @15,@15                                             0218
         CR    RDWRTCNT,@15                                        0218
         BE    @DC00200                                            0218
         C     @15,RETNCODE                                        0218
         BE    @DL00200                                            0218
@DC00200 DS    0H                                                  0219
*   RFY                                                            0219
*    (R14) UNRSTD;                  /*                        YM08414*/
*   END QB550RD;                    /* END OF READ PROCEDURE         */
@EL00004 DS    0H                                                  0220
@EF00004 DS    0H                                                  0220
@ER00004 BR    @14                                                 0220
*                                                                  0221
*/********************************************************************/
*/* THIS IS THE INTERNAL PROCEDURE THAT DOES A DELETE. THE SUBPOOL   */
*/* NUMBER IS GOTTEN FROM THE QMPA AND A FREE SUBPOOL IS ISSUED.     */
*/* THERE ARE NO ERROR CONDITIONS TESTED. THE FREEMAIN IS            */
*/* UNCONDITIONAL.                                                   */
*/********************************************************************/
*                                                                  0221
*QB550DEL:                                                         0221
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/* DELETE PROCEDURE        Y02669*/
QB550DEL DS    0H                                                  0222
*   RFY                                                            0222
*    (R14) RSTD;                    /*                        YM08414*/
*   LNGTH=ZERO;                     /* MUST BE 0 FOR FREE SUBPOOL    */
         SLR   @15,@15                                             0223
         STCM  @15,7,LNGTH                                         0223
*   SPNUM=QMSWSP;                   /* GET SUBPOOL # FROM QMPA       */
         MVC   SPNUM(1),QMSWSP(QMPAPTR)                            0224
*   RESPECIFY                                                      0225
*    (R0) RESTRICTED;               /* RESTRICT REGISTER 0           */
*   R0=GETFREES;                    /* LOAD REGISTER 0 FOR FREEMAIN  */
         L     R0,GETFREES                                         0226
*   GEN(FREEMAIN R,SP=(0));         /* FREE SUBPOOL                  */
         FREEMAIN R,SP=(0)
*   RESPECIFY                                                      0228
*    (R0) UNRESTRICTED;             /* FREE REGISTER 0               */
*   RFY                                                            0229
*    (R14) UNRSTD;                  /*                        YM08414*/
*   END QB550DEL;                   /* END OF DELETE PROCEDURE       */
@EL00005 DS    0H                                                  0230
@EF00005 DS    0H                                                  0230
@ER00005 BR    @14                                                 0230
@PB00005 DS    0H                                                  0230
*   END IEFQB550                    /* END OF EXTERNAL PROCEDURE     */
*                                                                  0231
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IEFZB506)                                       */
*/*%INCLUDE SYSLIB  (IEFZB502)                                       */
*/*%INCLUDE SYSLIB  (IEFQMNGR)                                       */
*/*%INCLUDE SYSLIB  (IEFZB507)                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (IKJTCB  )                                       */
*/*%INCLUDE SYSLIB  (IEFZB504)                                       */
*                                                                  0231
*       ;                                                          0231
@DATA    DS    0H
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@SA00003 DS    0F
         DS    15F
@AL00001 DS    1A
IEFQB550 CSECT
         DS    0F
@CF00111 DC    F'0'
@CF00045 DC    F'1'
@CF00058 DC    F'4'
@CF00042 DC    F'8'
@CF00887 DC    F'22'
@CF00854 DC    F'176'
@CF00949 DC    F'192'
@DATD    DSECT
         DS    0D
RETNCODE DS    F
GETFREES DS    FL4
         ORG   GETFREES
SPNUM    DS    CL1
LNGTH    DS    AL3
         ORG   GETFREES+4
GOTSPACE DS    FL4
         ORG   GOTSPACE
@NM00038 DS    CL1
SWPREADR DS    CL3
         ORG   GOTSPACE+4
CALLRKEY DS    FL1
TEMPID   DS    CL1
         DS    CL2
PARMLST  DS    CL16
IEFQB550 CSECT
         DS    0F
@SIZDATD DC    AL1(230)
         DC    AL3(@ENDDATD-@DATD)
@CV00809 DC    V(IEFXB500)
         DS    0D
BLOCKID  DC    X'00'
         DC    X'01'
         DC    X'02'
         DC    X'03'
         DC    X'07'
         DC    X'0A'
         DC    X'0C'
         DC    X'0F'
         DC    X'1B'
         DC    X'1C'
         DC    X'1D'
         DC    X'20'
         DC    X'21'
         DC    X'22'
         DC    X'23'
         DC    X'25'
         DC    X'26'
         DC    X'27'
         DC    X'28'
         DC    X'29'
         DC    X'30'
         DC    X'31'
TABLE    DC    CL4'JCT '
         DC    CL4'ACT '
         DC    CL4'SCT '
         DC    CL4'SIOT'
         DC    CL4'DSNT'
         DC    CL4'POT '
         DC    CL4'SCTX'
         DC    CL4'DSEN'
         DC    CL4'JMR '
         DC    CL4'JFCB'
         DC    CL4'JFCX'
         DC    CL4'PDID'
         DC    CL4'PDIB'
         DC    CL4'PDIQ'
         DC    CL4'GDGN'
         DC    CL4'IWAB'
         DC    CL4'VUT '
         DC    CL4'DDNT'
         DC    CL4'AMPX'
         DC    CL4'JFCE'
         DC    CL4'JCTX'
         DC    CL4'SSWA'
IEFQB550 CSECT
*                                     /*
WKPFEX   EQU   8                   LENGTH OF WORK AREA'S PREFIX Y02669
SPSIZE   EQU   0                   DISPLACEMENT IN PREFIX OF   YM08504
*                                  SP AND SIZE OF THIS WORK    YM08504
*                                  AREA                        YM08504
FLAGS    EQU   4                   DISP. OF FLAGS              YM08504
ZERO     EQU   0                   TO CLEAR FLAGS              YM08504
INUSE    EQU   X'80'               WORK AREA IS IN USE         YM08504
MUSTFREE EQU   X'40'               FREE THIS AREA ON EXIT      YM08504
SLOTBACK EQU   4                   SLOT IN REG SAVE AREA TO     Y02669
*                                  BACKWARD CHAIN SAVE AREAS    Y02669
SLOTFORE EQU   8                   SLOT IN REG SAVE AREA TO     Y02669
*                                  FOREWARD CHAIN SAVE AREAS    Y02669
SLOTR14  EQU   12                  SLOT IN REG SAVE AREA FOR    Y02669
*                                  R14                          Y02669
SLOTR0   EQU   20                  SLOT IN REG SAVE AREA FOR R0 Y02669
SLOTR1   EQU   24                  SLOT IN REG SAVE AREA FOR R1 Y02669
SPSZ50L  DC    A(@SIZDATD)         POINTER TO SIZE OF THIS     YM08504
*                                  MODULE'S WORK AREA, TO BE   YM08504
*                                  USED BY IEFQB555            YM08504
         ENTRY SPSZ50L                                         YM08504
SPSZ55N  DC    A(SPSZ55L)          PTR. TO WORD WITHIN         YM08504
*                                  IEFQB555 WHICH POINTS TO    YM08504
*                                  SIZE IT REQUIRES            YM08504
         EXTRN SPSZ55L                                         YM08504
IEFQB550 CSECT
         DS   0H
PATCHLOC DC ((@DATA-@PSTART)/20)X'00'
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IEFQB550 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
TEMPSAV2 EQU   @02
TEMPSAV1 EQU   @09
RDWRTCNT EQU   @03
ASGNCNT  EQU   @08
I        EQU   @06
FOUND    EQU   @02
JNLPTR   EQU   @02
QMPAPTR  EQU   @07
SPFXPTR  EQU   @04
EPAPTR   EQU   @05
R0       EQU   @00
R1       EQU   @01
R2       EQU   @02
R3       EQU   @03
R4       EQU   @04
R11      EQU   @11
R14      EQU   @14
R15      EQU   @15
         ENTRY TABLE
         ENTRY BLOCKID
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSATOLD  EQU   PSA+540
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
SWAMMEPA EQU   0
SWBUFPTR EQU   SWAMMEPA
SWASNVA  EQU   SWBUFPTR
SWASNZO  EQU   SWBUFPTR+3
SWROWVA  EQU   SWAMMEPA+4
SWWRTID  EQU   SWAMMEPA+7
SWAPFX   EQU   0
SWPRBN   EQU   SWAPFX
SWPSTA   EQU   SWAPFX+4
SWPWRT   EQU   SWPSTA
SWPVA    EQU   SWAPFX+5
SWPID    EQU   SWAPFX+8
SWPLNGTH EQU   SWAPFX+9
SWPACRO  EQU   SWAPFX+12
QMPA     EQU   0
QMNAM    EQU   QMPA
QMPOP    EQU   QMPA+8
QMSTA    EQU   QMPA+16
QMPCL    EQU   QMPA+32
QMPCMNC  EQU   QMPCL
QMPCM    EQU   QMPCMNC
QMPNC    EQU   QMPCMNC
QMPACL   EQU   QMPCL+1
SWAQMPA  EQU   0
QMSWSP   EQU   SWAQMPA
QMRBN    EQU   SWAQMPA+12
JNLPARM  EQU   0
JNLPCALL EQU   JNLPARM
JNLSWAMI EQU   JNLPCALL
JNLPRTCD EQU   JNLPARM+1
JNLPPTRX EQU   JNLPARM+4
TCBFIX   EQU   0
TCBFRS   EQU   TCBFIX
TCB      EQU   0
TCBPIE   EQU   TCB+4
TCBPMASK EQU   TCBPIE
TCBCMP   EQU   TCB+16
TCBCMPF  EQU   TCBCMP
TCBCPP   EQU   TCBCMPF
TCBSTCC  EQU   TCBCMPF
TCBCDBL  EQU   TCBCMPF
TCBCWTO  EQU   TCBCMPF
TCBCIND  EQU   TCBCMPF
TCBCMSG  EQU   TCBCMPF
TCBTRN   EQU   TCB+20
TCBABF   EQU   TCBTRN
TCBMSS   EQU   TCB+24
TCBPKF   EQU   TCB+28
TCBFLGS  EQU   TCB+29
TCBFLGS1 EQU   TCBFLGS
TCBFLGS2 EQU   TCBFLGS+1
TCBFLGS3 EQU   TCBFLGS+2
TCBFLGS4 EQU   TCBFLGS+3
TCBFLGS5 EQU   TCBFLGS+4
TCBABWF  EQU   TCBFLGS5
TCBJPQ   EQU   TCB+44
TCBPURGE EQU   TCBJPQ
TCBGRS   EQU   TCB+48
TCBFSA   EQU   TCB+112
TCBTME   EQU   TCB+120
TCBJSTCB EQU   TCB+124
TCBTSFLG EQU   TCB+148
TCBTSTSK EQU   TCBTSFLG
TCBSTAB  EQU   TCB+160
TCBNSTAE EQU   TCBSTAB
TCBTCT   EQU   TCB+164
TCBTCTGF EQU   TCBTCT
TCBSCNDY EQU   TCB+172
TCBNDSP  EQU   TCBSCNDY
TCBNDSP1 EQU   TCBNDSP+1
TCBNDSP2 EQU   TCBNDSP+2
TCBNDSP3 EQU   TCBNDSP+3
TCBJSCB  EQU   TCB+180
TCBRECDE EQU   TCBJSCB
TCBEXT1  EQU   TCB+196
TCBBITS  EQU   TCB+200
TCBNDSP4 EQU   TCBBITS
TCBNDSP5 EQU   TCBBITS+1
TCBFLGS6 EQU   TCBBITS+2
TCBFLGS7 EQU   TCBBITS+3
TCBDAR   EQU   TCB+204
TCBDARC  EQU   TCBDAR
TCBEXT2  EQU   TCB+208
TCBFOE   EQU   TCB+244
TCBESTAE EQU   TCB+264
TCBESTRM EQU   TCBESTAE+1
TCBFBYT1 EQU   TCB+276
TCBFBYT2 EQU   TCB+277
TCBRV124 EQU   TCB+278
TCBRV133 EQU   TCB+279
TCBSWASA EQU   TCB+288
TCBXTNT2 EQU   0
TCBGTF   EQU   TCBXTNT2
TCBTFLG  EQU   TCBGTF
TCBRV146 EQU   TCBXTNT2+28
TCBRV155 EQU   TCBXTNT2+29
TCBRV164 EQU   TCBXTNT2+30
TCBRV173 EQU   TCBXTNT2+31
USERBUF  EQU   0
EMBBLKID EQU   USERBUF+3
SWABLOCK EQU   0
PSARSVTE EQU   PSARSVT
FLC      EQU   PSA
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
@NM00037 EQU   USERBUF+4
@NM00036 EQU   USERBUF
@NM00035 EQU   TCBXTNT2+32
TCBRV181 EQU   TCBRV173
TCBRV180 EQU   TCBRV173
TCBRV179 EQU   TCBRV173
TCBRV178 EQU   TCBRV173
TCBRV177 EQU   TCBRV173
TCBRV176 EQU   TCBRV173
TCBRV175 EQU   TCBRV173
TCBRV174 EQU   TCBRV173
TCBRV172 EQU   TCBRV164
TCBRV171 EQU   TCBRV164
TCBRV170 EQU   TCBRV164
TCBRV169 EQU   TCBRV164
TCBRV168 EQU   TCBRV164
TCBRV167 EQU   TCBRV164
TCBRV166 EQU   TCBRV164
TCBRV165 EQU   TCBRV164
TCBRV163 EQU   TCBRV155
TCBRV162 EQU   TCBRV155
TCBRV161 EQU   TCBRV155
TCBRV160 EQU   TCBRV155
TCBRV159 EQU   TCBRV155
TCBRV158 EQU   TCBRV155
TCBRV157 EQU   TCBRV155
TCBRV156 EQU   TCBRV155
TCBRV154 EQU   TCBRV146
TCBRV153 EQU   TCBRV146
TCBRV152 EQU   TCBRV146
TCBRV151 EQU   TCBRV146
TCBRV150 EQU   TCBRV146
TCBRV149 EQU   TCBRV146
TCBRV148 EQU   TCBRV146
TCBRV147 EQU   TCBRV146
TCBRV145 EQU   TCBXTNT2+26
TCBRV144 EQU   TCBXTNT2+24
TCBCAUF  EQU   TCBXTNT2+20
TCBRV142 EQU   TCBXTNT2+16
TCBRSV49 EQU   TCBXTNT2+12
TCBEVENT EQU   TCBXTNT2+8
TCBRCMP  EQU   TCBXTNT2+5
TCBRSVAB EQU   TCBXTNT2+4
TCBGTFA  EQU   TCBGTF+1
TCBRSV47 EQU   TCBTFLG
TCBRSV46 EQU   TCBTFLG
TCBRSV45 EQU   TCBTFLG
TCBRSV44 EQU   TCBTFLG
TCBRSV43 EQU   TCBTFLG
TCBDSPIT EQU   TCBTFLG
TCBERRTN EQU   TCBTFLG
TCBASYNC EQU   TCBTFLG
@NM00034 EQU   TCB+296
TCBSVCA2 EQU   TCB+292
TCBDBTB  EQU   TCB+284
TCBRPT   EQU   TCB+280
TCBRV141 EQU   TCBRV133
TCBRV140 EQU   TCBRV133
TCBRV139 EQU   TCBRV133
TCBRV138 EQU   TCBRV133
TCBRV137 EQU   TCBRV133
TCBRV136 EQU   TCBRV133
TCBRV135 EQU   TCBRV133
TCBRV134 EQU   TCBRV133
TCBRV132 EQU   TCBRV124
TCBRV131 EQU   TCBRV124
TCBRV130 EQU   TCBRV124
TCBRV129 EQU   TCBRV124
TCBRV128 EQU   TCBRV124
TCBRV127 EQU   TCBRV124
TCBRV126 EQU   TCBRV124
TCBRV125 EQU   TCBRV124
TCBRV123 EQU   TCBFBYT2
TCBRV122 EQU   TCBFBYT2
TCBECBNV EQU   TCBFBYT2
TCBSSSYN EQU   TCBFBYT2
TCBFPRAP EQU   TCBFBYT2
TCBFDW   EQU   TCBFBYT2
TCBFMW   EQU   TCBFBYT2
TCBCNCB  EQU   TCBFBYT2
TCBLLH   EQU   TCBFBYT1
TCBRV113 EQU   TCBFBYT1
TCBEOT   EQU   TCBFBYT1
TCBRTM2  EQU   TCBFBYT1
TCBPGNLY EQU   TCBFBYT1
TCBNDIOS EQU   TCBFBYT1
TCBACTIV EQU   TCBFBYT1
TCBEOTFM EQU   TCBFBYT1
TCBAFFN  EQU   TCB+274
TCBCCPVI EQU   TCB+272
TCBUKYSP EQU   TCB+268
TCBMODE  EQU   TCBESTAE+3
TCBERTYP EQU   TCBESTAE+2
TCBRV314 EQU   TCBESTRM
TCBRV313 EQU   TCBESTRM
TCBRV312 EQU   TCBESTRM
TCBRV311 EQU   TCBESTRM
TCBRV310 EQU   TCBESTRM
TCBRV309 EQU   TCBESTRM
TCBRV308 EQU   TCBESTRM
TCBETERM EQU   TCBESTRM
TCBSCBKY EQU   TCBESTAE
TCBRTM12 EQU   TCB+260
TCBTCBID EQU   TCB+256
TCBRSV96 EQU   TCB+252
TCBSWA   EQU   TCB+248
TCBFOEA  EQU   TCBFOE+1
TCBRSV42 EQU   TCBFOE
TCBRV306 EQU   TCB+240
TCBRSV41 EQU   TCB+239
TCBTID   EQU   TCB+238
TCBRSVAA EQU   TCB+237
TCBABCUR EQU   TCB+236
TCBTMSAV EQU   TCB+232
TCBIOTIM EQU   TCB+228
TCBRTWA  EQU   TCB+224
TCBBACK  EQU   TCB+220
TCBTIRB  EQU   TCB+216
TCBAECB  EQU   TCB+212
TCBEXT2A EQU   TCBEXT2+1
TCBRSV39 EQU   TCBEXT2
TCBSTMCT EQU   TCB+207
TCBSYSCT EQU   TCB+206
TCBRSV37 EQU   TCB+205
TCBEXSVC EQU   TCBDAR
TCBDARMS EQU   TCBDAR
TCBDARWT EQU   TCBDAR
TCBDARO  EQU   TCBDAR
TCBDARMC EQU   TCBDARC
TCBDARD  EQU   TCBDAR
TCBDARS  EQU   TCBDAR
TCBDARP  EQU   TCBDAR
TCBGTOFM EQU   TCBFLGS7
TCBADMP  EQU   TCBFLGS7
TCBRSTSK EQU   TCBFLGS7
TCBSVCS  EQU   TCBFLGS7
TCBSTACK EQU   TCBFLGS7
TCBRSV34 EQU   TCBFLGS7
TCBRSV33 EQU   TCBFLGS7
TCBGPECB EQU   TCBFLGS7
TCBNTJS  EQU   TCBFLGS6
TCBAPG   EQU   TCBFLGS6
TCBMIGR  EQU   TCBFLGS6
TCBRV303 EQU   TCBFLGS6
TCBSPVLK EQU   TCBFLGS6
TCBCPU   EQU   TCBFLGS6
TCBPIE17 EQU   TCBFLGS6
TCBRV    EQU   TCBFLGS6
TCBRSV79 EQU   TCBNDSP5
TCBRSV78 EQU   TCBNDSP5
TCBRSV77 EQU   TCBNDSP5
TCBRSV76 EQU   TCBNDSP5
TCBRSV75 EQU   TCBNDSP5
TCBRSV74 EQU   TCBNDSP5
TCBRSV95 EQU   TCBNDSP5
TCBRSV94 EQU   TCBNDSP5
TCBRSV93 EQU   TCBNDSP4
TCBRSV92 EQU   TCBNDSP4
TCBRSV91 EQU   TCBNDSP4
TCBRSV90 EQU   TCBNDSP4
TCBRSV89 EQU   TCBNDSP4
TCBRSV88 EQU   TCBNDSP4
TCBRSV87 EQU   TCBNDSP4
TCBRSV86 EQU   TCBNDSP4
TCBEXT1A EQU   TCBEXT1+1
TCBRSV32 EQU   TCBEXT1
TCBEXCPD EQU   TCB+192
TCBIOBRC EQU   TCB+188
TCBDDWTC EQU   TCB+186
TCBDDEXC EQU   TCB+184
TCBJSCBB EQU   TCBJSCB+1
@NM00033 EQU   TCBRECDE
TCBREC   EQU   TCBRECDE
TCBMDIDS EQU   TCB+176
TCBNDINT EQU   TCBNDSP3
TCBRSV27 EQU   TCBNDSP3
TCBRSV26 EQU   TCBNDSP3
TCBRSV25 EQU   TCBNDSP3
TCBRSV24 EQU   TCBNDSP3
TCBSRBND EQU   TCBNDSP3
TCBRV302 EQU   TCBNDSP3
TCBLJSND EQU   TCBNDSP3
TCBABE   EQU   TCBNDSP2
TCBDSS   EQU   TCBNDSP2
TCBOWAIT EQU   TCBNDSP2
TCBIWAIT EQU   TCBNDSP2
TCBNDTS  EQU   TCBNDSP2
TCBNDSVC EQU   TCBNDSP2
TCBSTPP  EQU   TCBNDSP2
TCBABD   EQU   TCBNDSP2
TCBRSV22 EQU   TCBNDSP1
TCBPIEND EQU   TCBNDSP1
TCBTPSP  EQU   TCBNDSP1
TCBDDRND EQU   TCBNDSP1
TCBRSPND EQU   TCBNDSP1
TCBRSTND EQU   TCBNDSP1
TCBDARPN EQU   TCBNDSP1
TCBDARTN EQU   TCBNDSP1
TCBNDSP0 EQU   TCBNDSP
TCBUSER  EQU   TCB+168
TCBTCTB  EQU   TCBTCT+1
TCBRSV9C EQU   TCBTCTGF
TCBRSV9B EQU   TCBTCTGF
TCBRSV9A EQU   TCBTCTGF
TCBRSV99 EQU   TCBTCTGF
TCBRSV98 EQU   TCBTCTGF
TCBRSV97 EQU   TCBTCTGF
TCBRSV20 EQU   TCBTCTGF
TCBSMFGF EQU   TCBTCTGF
TCBSTABB EQU   TCBSTAB+1
TCBSTCUR EQU   TCBNSTAE
TCBRV301 EQU   TCBNSTAE
TCBSYNCH EQU   TCBNSTAE
TCBHALT  EQU   TCBNSTAE
TCBPPSUP EQU   TCBNSTAE
TCB33E   EQU   TCBNSTAE
TCBQUIES EQU   TCBNSTAE
TCBSTABE EQU   TCBNSTAE
TCBAQE   EQU   TCB+156
TCBPQE   EQU   TCB+152
TCBTSDP  EQU   TCB+151
TCBTSLP  EQU   TCB+150
TCBSTPCT EQU   TCB+149
TCBCPUBN EQU   TCBTSFLG
TCBDYDSP EQU   TCBTSFLG
TCBRSV18 EQU   TCBTSFLG
TCBRSV17 EQU   TCBTSFLG
TCBTIOTG EQU   TCBTSFLG
TCBATT   EQU   TCBTSFLG
TCBSTPPR EQU   TCBTSFLG
TCBRV300 EQU   TCBTSTSK
TCBECB   EQU   TCB+144
TCBIQE   EQU   TCB+140
TCBLTC   EQU   TCB+136
TCBOTC   EQU   TCB+132
TCBNTC   EQU   TCB+128
TCBJSTCA EQU   TCBJSTCB+1
TCBRSV16 EQU   TCBJSTCB
TCBTQET  EQU   TCBTME
TCBTCB   EQU   TCB+116
TCBFSAB  EQU   TCBFSA+1
TCBQEL   EQU   TCBFSA
TCBGRS15 EQU   TCBGRS+60
TCBGRS14 EQU   TCBGRS+56
TCBGRS13 EQU   TCBGRS+52
TCBGRS12 EQU   TCBGRS+48
TCBGRS11 EQU   TCBGRS+44
TCBGRS10 EQU   TCBGRS+40
TCBGRS9  EQU   TCBGRS+36
TCBGRS8  EQU   TCBGRS+32
TCBGRS7  EQU   TCBGRS+28
TCBGRS6  EQU   TCBGRS+24
TCBGRS5  EQU   TCBGRS+20
TCBGRS4  EQU   TCBGRS+16
TCBGRS3  EQU   TCBGRS+12
TCBGRS2  EQU   TCBGRS+8
TCBGRS1  EQU   TCBGRS+4
TCBGRS0  EQU   TCBGRS
TCBJPQB  EQU   TCBJPQ+1
TCBRSV15 EQU   TCBPURGE
TCBRSV14 EQU   TCBPURGE
TCBRSV13 EQU   TCBPURGE
TCBRSV12 EQU   TCBPURGE
TCBRSV11 EQU   TCBPURGE
TCBRSV10 EQU   TCBPURGE
TCBRSV09 EQU   TCBPURGE
TCBJPQF  EQU   TCBPURGE
TCBJLB   EQU   TCB+40
TCBLLS   EQU   TCB+36
TCBDSP   EQU   TCB+35
TCBLMP   EQU   TCB+34
TCBPNDSP EQU   TCBFLGS5
TCBFCD1  EQU   TCBFLGS5
TCBSTP   EQU   TCBFLGS5
TCBSYS   EQU   TCBFLGS5
TCBANDSP EQU   TCBFLGS5
TCBPAGE  EQU   TCBFLGS5
TCBUXNDF EQU   TCBABWF
TCBFC    EQU   TCBFLGS5
TCBONDSP EQU   TCBFLGS4
TCBMPCND EQU   TCBFLGS4
TCBMPCVQ EQU   TCBFLGS4
TCBUXNDV EQU   TCBFLGS4
TCBHNDSP EQU   TCBFLGS4
TCBRQENA EQU   TCBFLGS4
TCBSER   EQU   TCBFLGS4
TCBNDUMP EQU   TCBFLGS4
TCBDWSTA EQU   TCBFLGS3
TCBRSV08 EQU   TCBFLGS3
TCBRSV07 EQU   TCBFLGS3
TCBRSV06 EQU   TCBFLGS3
TCBABGM  EQU   TCBFLGS3
TCBABTRM EQU   TCBFLGS3
TCBADINP EQU   TCBFLGS3
TCBFSM   EQU   TCBFLGS3
TCBFTS   EQU   TCBFLGS2
TCBFETXR EQU   TCBFLGS2
TCBFDSOP EQU   TCBFLGS2
TCBFJMC  EQU   TCBFLGS2
TCBFSMC  EQU   TCBFLGS2
TCBFABOP EQU   TCBFLGS2
TCBFSTI  EQU   TCBFLGS2
TCBFOINP EQU   TCBFLGS2
TCBFX    EQU   TCBFLGS1
TCBFS    EQU   TCBFLGS1
TCBFT    EQU   TCBFLGS1
TCBPDUMP EQU   TCBFLGS1
TCBNONPR EQU   TCBFLGS1
TCBFERA  EQU   TCBFLGS1
TCBFE    EQU   TCBFLGS1
TCBFA    EQU   TCBFLGS1
TCBZERO  EQU   TCBPKF
TCBFLAG  EQU   TCBPKF
TCBMSSB  EQU   TCBMSS+1
TCBRSV03 EQU   TCBMSS
TCBTRNB  EQU   TCBTRN+1
TCBRSV02 EQU   TCBABF
TCBOLTEP EQU   TCBABF
TCBTCP   EQU   TCBABF
TCBTCPP  EQU   TCBABF
TCBRSV01 EQU   TCBABF
TCBGRPH  EQU   TCBABF
TCBNOCHK EQU   TCBABF
TCBMOD91 EQU   TCBABF
TCBCMPC  EQU   TCBCMP+1
TCBRV318 EQU   TCBCMSG
TCBRV317 EQU   TCBCIND
TCBRV316 EQU   TCBCWTO
TCBCASID EQU   TCBCDBL
TCBNOCC  EQU   TCBSTCC
TCBDMPO  EQU   TCBCPP
TCBCSTEP EQU   TCBCMPF
TCBCREQ  EQU   TCBCMPF
TCBTIO   EQU   TCB+12
TCBDEB   EQU   TCB+8
TCBPIEA  EQU   TCBPIE+1
TCBPM    EQU   TCBPMASK
@NM00032 EQU   TCBPMASK
TCBRBP   EQU   TCB
TCBFRS6  EQU   TCBFRS+24
TCBFRS4  EQU   TCBFRS+16
TCBFRS2  EQU   TCBFRS+8
TCBFRS0  EQU   TCBFRS
JNLRBN   EQU   JNLPARM+12
JNLPRLNG EQU   JNLPARM+9
JNLPID   EQU   JNLPARM+8
@NM00007 EQU   JNLPARM+2
@NM00006 EQU   JNLPRTCD
JNLABSNT EQU   JNLPRTCD
JNLERR   EQU   JNLPRTCD
@NM00005 EQU   JNLPCALL
JNLDRCT  EQU   JNLPCALL
JNLINIT  EQU   JNLPCALL
JNLSWALI EQU   JNLPCALL
@NM00004 EQU   SWAQMPA+1
QMEIA    EQU   QMPA+28
QMWTQ    EQU   QMPA+24
QMRSD1   EQU   QMPA+22
QMTID    EQU   QMPA+20
QMLNK    EQU   QMPA+18
QMPRI    EQU   QMPA+17
@NM00003 EQU   QMSTA
QMSJNL   EQU   QMSTA
@NM00002 EQU   QMSTA
QMTPY    EQU   QMPA+15
QMNOT    EQU   QMPA+14
QMTLN    EQU   QMPA+12
QMTST    EQU   QMPA+11
QMFLT    EQU   QMPA+9
QMPEB    EQU   QMNAM+4
QMCAN    EQU   QMNAM
@NM00001 EQU   SWPSTA
@NM00031 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00030 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSALITA  EQU   PSA+764
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00029 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00028 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSAULCMS EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAAOLD  EQU   PSA+548
PSAANEW  EQU   PSA+544
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00027 EQU   FLCFSA
@NM00026 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00025 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00024 EQU   FLCIOA
@NM00023 EQU   FLCMCLA+15
@NM00022 EQU   FLCMCLA+14
@NM00021 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00020 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00019 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00018 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00017 EQU   FLCPER
@NM00016 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00015 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00014 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00013 EQU   FLCPIILC
@NM00012 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00011 EQU   FLCSVILC
@NM00010 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00009 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00008 EQU   FLCICCW2+4
FLCCVT   EQU   FLCICCW2
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00090 EQU   @RC00089
@RF00185 EQU   @EL00003
@RC00198 EQU   @EL00004
@PB00004 EQU   @PB00005
@RF00094 EQU   @RC00090
@PB00003 EQU   @PB00004
@PB00002 EQU   @PB00003
@ENDDATA EQU   *
         END   IEFQB550,(C'PLS1759',0701,78059)
