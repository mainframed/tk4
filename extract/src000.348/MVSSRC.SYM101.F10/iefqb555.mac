         TITLE 'IEFQB555-SWA MGR-LOCATE MODE                           *
                        '
IEFQB555 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IEFQB555  78.059'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
         MODESET EXTKEY=SCHED,SAVEKEY=(2)
JSCBDISP EQU 188
JSCBAOS1 EQU  72
JSCBAOS2 EQU 192
*                                  /*
*        BECAUSE OF PROLOGUE CODE GENERATED BY PLS,             Y02669
*        R2 NOW CONTAINS THE CALLER'S KEY, AND CANNOT BE USED   Y02669
*        UNTIL IT IS SAVED IN CALLRKEY.                         Y02669
         L     R3,PSATOLD          POINT TO CURRENT TCB         Y02669
         L     @11,TCBSWASA(R3)    POINT TO WORK AREA PREFIX    Y02669
*                                  (OR 0)                       Y02669
         LTR   @11,@11             CHECK FOR A WORK AREA        Y02669
         BNZ   CHECKUSE            CHECK WHETHER WORK AREA IS  YM08504
*                                  IN USE                      YM08504
*        GET STORAGE FOR A WORK AREA FOR THIS TCB.             YM08504
*        CHECK WHETHER THIS MODULE'S WORK AREA WOULD BE LARGE  YM08504
*        ENOUGH FOR EITHER IEFQB550 OR IEFQB555.               YM08504
         L     R4,@SIZDATD         GET SIZE REQUIRED FOR THIS   Y02669
*                                  MODULE'S WORK AREA           Y02669
         LA    R4,0(,R4)           CLEAR SUBPOOL FROM HIGH      Y02669
*                                  ORDER BYTE                   Y02669
         L     R1,SPSZ50N          PT. TO ADCON IN QB550       YM08504
         L     R1,0(,R1)           PT. TO VALUE IN QB550       YM08504
         L     R1,0(,R1)           GET VALUE IN QB550          YM08504
         LA    R1,0(,R1)           CLEAR HIGH ORDER BYTE       YM08504
         CR    R4,R1                                           YM08504
         BM    GETOTHER            GO GET SIZE REQUIRED FOR    YM08504
*                                  OTHER MODULE                YM08504
*        IN EITHER CASE, RESTORE R4 TO GET THE SUBPOOL.        YM08504
         L     R4,@SIZDATD         USE THIS MODULE'S SIZE      YM08504
         B     GETPERM             SKIP ELSE CLAUSE            YM08504
GETOTHER EQU   *                                               YM08504
         L     R1,SPSZ50N          PT. TO ADCON IN QB555       YM08504
         L     R1,0(,R1)           PT. TO VALUE IN QB555       YM08504
         L     R4,0(,R1)           GET VALUE IN QB555          YM08504
GETPERM  EQU   *                                               YM08504
         LA    R1,WKPFEX                                        Y02669
         ALR   R4,R1               ADD SIZE OF PREFIX TO AMOUNT Y02669
*                                  OF STORAGE REQUIRED BY PLS   Y02669
*                                  TO GET THE SIZE REQUIRED FOR Y02669
*                                  THE WORK AREA. (THE SUBPOOL  Y02669
*                                  NUMBER IN THE HIGH ORDER     Y02669
*                                  BYTE IS PRESERVED.)          Y02669
         GETMAIN R,LV=(R4)         GET WORK AREA                Y02669
         ST    R4,SPSIZE(,R1)      PUT SIZE AND SUBPOOL OF     YM08504
*                                  WORK AREA IN PREFIX          Y02669
         MVI   FLAGS(R1),ZERO      CLEAR FLAGS                 YM08504
         MODESET EXTKEY=ZERO       GET IN KEY ZERO TO STORE           **
                                   IN TCB                       Y02669
         ST    R1,TCBSWASA(,R3)    SAVE PTR. TO WORKAREA PREFIX Y02669
         LR    @11,R1              POINT TO WORK AREA PREFIX    Y02669
*                                  (EXPECTED BY THE FOLLOWING   Y02669
*                                  PIECE OF CODE)               Y02669
         MODESET EXTKEY=SCHED      GET IN KEY FOR GETMAIN      YM08504
CHECKUSE EQU   *                                               YM08504
         TM    FLAGS(@11),INUSE    CHECK WHETHER WORK AREA     YM08504
*                                  IS IN USE                   YM08504
         BNO   PROLOG              NOT IN USE, USE IT          YM08504
*        WORK AREA IS IN USE (BY AN INTERRUPTED RB ALSO UNDER  YM08504
*        THIS TCB). GET A WORK AREA TO BE USED JUST FOR THIS   YM08504
*        INVOCATION OF THIS MODULE.                            YM08504
         L     R4,@SIZDATD                                     YM08504
         LA    R1,WKPFEX                                       YM08504
         ALR   R4,R1                                           YM08504
         GETMAIN R,LV=(R4)                                     YM08504
         LR    @11,R1              SAVE PTR. TO WORK AREA      YM08504
         ST    R4,SPSIZE(,@11)     SAVE FOR FREEMAIN           YM08504
         MVI   FLAGS(@11),MUSTFREE INDICATE MUST BE FREED ON   YM08504
*                                  EXIT                        YM08504
PROLOG   EQU   *                                                Y02669
         OI    FLAGS(@11),INUSE    SET IN USE                  YM08504
         LA    @11,WKPFEX(,@11)    POINT TO ACTUAL WORK AREA    Y02669
*                                  (SKIP THE PREFIX)            Y02669
         USING @DATD,@11           PROVIDE ADDRESSABILITY       Y02669
         ST    @13,@SA00001+SLOTBACK  BACKWARD CHAIN SAVE AREAS Y02669
         STC   @02,CALLRKEY        SAVE CALLER'S KEY            Y02669
*        NOTE THAT THE MODESET MACRO DOES NOT SUPPORT SYMBOLIC  Y02669
*        REGISTER NAMES.                                        Y02669
         MODESET KEYADDR=(2)       GET IN CALLER'S KEY TO             **
                                   STORE IN CALLER'S SAVE AREA  Y02669
         LM    @00,@04,SLOTR0(@13) RESTORE INPUT REGISTERS      Y02669
         ST    @11,SLOTFORE(,@13)  FOREWARD CHAIN SAVE AREAS    Y02669
         LR    @13,@11             POINT TO CURRENT SAVE AREA   Y02669
*        GET IN KEY 0, IN CASE THE PARAMETER LIST IS IN STORAGE Y02669
*        WHICH IS FETCH PROTECTED BUT NOT KEY 1.                Y02669
         MODESET EXTKEY=ZERO                                    Y02669
         MVC   @PC00001(PARMLEN),0(@01) COPY PARAMETER LIST TO  Y02669
*                                  WORK AREA                    Y02669
         MODESET EXTKEY=SCHED      RETURN TO SCHEDULER KEY FOR        **
                                   NORMAL PROCESSING            Y02669
*   SWEPAPTR=EPAPTR;                /* INITIALIZE EPA BASE POINTER   */
         L     @10,@PC00001                                        0083
         L     SWEPAPTR,EPAPTR(,@10)                               0083
*   RETNCODE=ZERO;                  /* INITIALIZE RETURN CODE TO 0   */
         SLR   @10,@10                                             0084
         ST    @10,RETNCODE                                        0084
*   IF FCODE=ASGNLOC THEN           /* IF THIS IS AN ASSIGN LOCATE   */
         L     @10,@PC00001+4                                      0085
         CLC   FCODE(2,@10),@CC00962                               0085
         BNE   @RF00085                                            0085
*     CALL QB555ASN;                /* CALL THAT INTERNAL PROCEDURE  */
         BAL   @14,QB555ASN                                        0086
*   ELSE                                                           0087
*     IF FCODE=WRTLOC THEN          /* IF THIS IS A WRITE LOCATE     */
         B     @RC00085                                            0087
@RF00085 L     @10,@PC00001+4                                      0087
         CLC   FCODE(2,@10),@CC00964                               0087
         BNE   @RF00087                                            0087
*       CALL QB555WRT;              /* CALL THAT INTERNAL PROCEDURE  */
         BAL   @14,QB555WRT                                        0088
*     ELSE                                                         0089
*       IF FCODE=READLOC THEN       /* IF THIS IS A READ LOCATE      */
         B     @RC00087                                            0089
@RF00087 L     @10,@PC00001+4                                      0089
         CLC   FCODE(2,@10),@CC00966                               0089
         BNE   @RF00089                                            0089
*         CALL QB555RD;             /* CALL THAT INTERNAL PROCEDURE  */
         BAL   @14,QB555RD                                         0090
*       ELSE                                                       0091
*         IF FCODE=DELBLOCK THEN    /* IF THIS IS A DELETE BLOCK     */
         B     @RC00089                                            0091
@RF00089 L     @10,@PC00001+4                                      0091
         CLC   FCODE(2,@10),@CC00968                               0091
         BNE   @RF00091                                            0091
*           CALL QB555DEL;          /* CALL THAT INTERNAL PROCEDURE  */
         BAL   @14,QB555DEL                                        0092
*         ELSE                                                     0093
*           RETNCODE=INVFUNCT;      /* THEN IT'S AN INVALID REQUEST  */
         B     @RC00091                                            0093
@RF00091 LA    @10,4                                               0093
         ST    @10,RETNCODE                                        0093
*   IF RETNCODE^=ZERO THEN          /* IF ANY ERRORS                 */
@RC00091 DS    0H                                                  0094
@RC00089 DS    0H                                                  0094
@RC00087 DS    0H                                                  0094
@RC00085 L     @10,RETNCODE                                        0094
         LTR   @10,@10                                             0094
         BZ    @RF00094                                            0094
*     DO;                                                          0095
*       RESPECIFY                                                  0096
*        (R1,                                                      0096
*         R15) RESTRICTED;                                         0096
*       R15=RETNCODE;               /* LOAD ERROR INDICATION         */
         L     R15,RETNCODE                                        0097
*       R1=ZEROBZER;                /* LOAD ABEND CODE OF 0B0 SYSTEM */
         ICM   R1,15,ZEROBZER                                      0098
*       GEN(ABEND (1),,,SYSTEM);    /* ISSUE ABEND                   */
         ABEND (1),,,SYSTEM
*       RESPECIFY                                                  0100
*        (R1,                                                      0100
*         R15) UNRESTRICTED;        /* RELEASE FOR PLS USE           */
*     END;                                                         0101
*   GEN REFS(CALLRKEY,RETNCODE);                                   0102
@RF00094 DS    0H                                                  0102
*                                     /*
*        THE EPILOG CODE MUST BE CODED IN ASSEMBLER BECAUSE    YM08504
*        EITHER THE 'IN USE' FLAG MUST BE TURNED OFF OR THE    YM08504
*        WORK AREA WAS A TEMPORARY ONE AND MUST BE FREED.      YM08504
         L     R4,RETNCODE         SAVE RETURN CODE            YM08504
         IC    @02,CALLRKEY        SAVE CALLER'S PROTECT KEY   YM08504
         L     @13,SLOTBACK(,@13)  SAVE PTR. TO THE CALLER'S   YM08504
*                                  SAVE AREA                   YM08504
         LA    @01,WKPFEX                                      YM08504
         SR    @11,@01             SUBTRACT SIZE OF PREFIX TO  YM08504
*                                  POINT TO ACTUAL BEGINNING   YM08504
*                                  OF WORK AREA                YM08504
         TM    FLAGS(@11),MUSTFREE CHECK WHETHER AREA IS TO BE YM08504
*                                  FREED                       YM08504
         BO    GOFREE              YES, GO FREE                YM08504
         NI    FLAGS(@11),X'FF'-INUSE DO NOT FREE, TURN OFF IN YM08504
*                                  USE FLAG                    YM08504
         B     EPILOG              SKIP ELSE CLAUSE            YM08504
GOFREE   EQU   *                                               YM08504
         L     @00,SPSIZE(,@11)                                YM08504
         FREEMAIN R,LV=(0),A=(@11)                             YM08504
EPILOG   EQU   *                                               YM08504
         MODESET KEYADDR=(2)       SET CALLER'S KEY            YM08504
         LR    @15,R4              SET RETURN CODE             YM08504
         L     @14,SLOTR14(,@13)   RESTORE REGISTERS           YM08504
         LM    @00,@12,SLOTR0(@13)                             YM08504
         BR    @14                 RETURN                      YM08504
*                                                                  0103
*/********************************************************************/
*/* THIS IS THE INTERNAL PROCEDURE WHICH DOES THE ASSIGNS. THERE IS  */
*/* A 16 BYTE EPA FOR EACH BLOCK TO BE ASSIGNED. THEY ARE CHAINED    */
*/* TOGETHER WITH THE END OF THE CHAIN INDICATED BY A ZERO CHAIN     */
*/* POINTER. THERE IS NO LIMIT ON THE NUMBER OF BLOCKS TO BE         */
*/* ASSIGNED. EACH EPA CONTAINS THE LENGTH OF THAT BLOCK TO BE       */
*/* ASSIGNED. THE SUBPOOL NUMBER FOR THE BLOCK IS OBTAINED FROM THE  */
*/* QMPA. THE QMPA IS LOCATED VIA THE 'ACTIVE JSCB'. THIS JSCB       */
*/* IS POINTED TO BY THE JSCBACT FIELD OF THE JSCB WHICH IS LOCATED  */
*/* VIA THE CURRENT TCB. AFTER EACH GETMAIN IS ACCOMPLISHED THE      */
*/* ASSOCIATED SWA PREFIX IS PARTIALLY INITIALIZED AND INFO IS       */
*/* RETURNED IN THE EPA. A MODESET IS ISSUED TO PUT US IN THE        */
*/* CALLERS KEY BEFORE PUTTING INFO IN THE EPA. ANOTHER MODESET PUTS */
*/* US IN SUPERVISOR KEY BEFORE UPDATING THE RBN FIELD OF THE QMPA.  */
*/* THE ONLY ERROR CONDITION DETECTED IS A ZERO OR NEGATIVE LENGTH   */
*/* VALUE BEING PASSED. THE GETMAINS ARE UNCONDITIONAL. UPON         */
*/* COMPLETION, CONTROL IS RETURNED TO THE EXTERNAL PROCEDURE.       */
*/********************************************************************/
*                                                                  0103
*QB555ASN:                                                         0103
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/* ASSIGN PROCEDURE        Y02669*/
QB555ASN DS    0H                                                  0104
*   RFY                                                            0104
*    (R14) RSTD;                    /*                        YM08414*/
*   RESPECIFY                                                      0105
*     IEZJSCB BASED(JSCBPTR);       /* BASE ON POINTER INTERNAL TO 0105
*                                      THIS MODULE                   */
*   JSCBPTR=TCBJSCB;                /* GET CURRENT JSCB POINTER      */
         L     @15,PSATOLD                                         0106
         L     JSCBPTR,TCBJSCB(,@15)                               0106
*   JSCBPTR=JSCBACT;                /* SET POINTER TO JSCB TO BE USED
*                                      FOR THIS ASSIGN               */
         L     JSCBPTR,JSCBACT(,JSCBPTR)                           0107
*   QMPAPTR=JSCBQMPI;               /* SET QMPA BASE POINTER         */
         L     QMPAPTR,JSCBQMPI(,JSCBPTR)                          0108
*   DO WHILE(SWEPAPTR^=ZERO&RETNCODE=ZERO);/* LOOP UNTIL DONE OR   0109
*                                      UNTIL ERROR                   */
         B     @DE00109                                            0109
@DL00109 DS    0H                                                  0110
*     IF SWLNGTH>ZERO THEN          /* IS LENGTH A POSITIVE VALUE    */
         L     @15,SWLNGTH(,SWEPAPTR)                              0110
         LTR   @15,@15                                             0110
         BNP   @RF00110                                            0110
*       DO;                                                        0111
*         LNGTH=SWLNGTH+SWPRELNG;   /* GET LENGTH FROM EPA AND ADD 0112
*                                      SWA PREFIX LENGTH             */
         LA    @15,16(,@15)                                        0112
         STCM  @15,7,LNGTH                                         0112
*         SPNUM=QMSWSP;             /* GET SUBPOOL # FROM QMPA       */
         MVC   SPNUM(1),QMSWSP(QMPAPTR)                            0113
*         RESPECIFY                                                0114
*          (R0,                                                    0114
*           R1) RESTRICTED;         /* RESTRICT FOR GETMAIN          */
*         R0=GETFRSPC;              /* LOAD INTO REGISTER 0          */
         L     R0,GETFRSPC                                         0115
*         GEN(GETMAIN R,LV=(0));    /* GET SPACE FOR 1 BLOCK AND   0116
*                                      BLOCK PREFIX                  */
         GETMAIN R,LV=(0)
*         SPFXPTR=R1;               /* INITIALIZE SWA PREFIX PTR     */
         LR    SPFXPTR,R1                                          0117
*         GOTSPACE=R1;              /* SAVE FOR USE AS 3 BYTE SVA    */
         ST    R1,GOTSPACE                                         0118
*         GEN(MODESET KEYADDR=CALLRKEY,WORKREG=1);/* SWITCH TO CALLER
*                                      KEY                           */
         MODESET KEYADDR=CALLRKEY,WORKREG=1
*         RESPECIFY                                                0120
*          (R0,                                                    0120
*           R1) UNRESTRICTED;       /* RELEASE FOR PL/S USE          */
*         SWVA=SWPREADR;            /* PUT SVA IN CALLERS EPA        */
         L     @15,SWPREADR-1                                      0121
         LA    @15,0(,@15)                                         0121
         STCM  @15,7,SWVA(SWEPAPTR)                                0121
*         SWBLKPTR=SWPREADR+SWPRELNG;/* SWA BLOCK ADDRESS = PREFIX 0122
*                                      ADDRESS + PREFIX LENGTH       */
         AL    @15,@CF00183                                        0122
         ST    @15,SWBLKPTR(,SWEPAPTR)                             0122
*         GEN(MODESET EXTKEY=SUPR); /* SWITCH TO KEY 0               */
         MODESET EXTKEY=SUPR
*         TEMPSAV1=QMRBN;           /* GET RBN FROM QMPA             */
         L     TEMPSAV1,QMRBN(,QMPAPTR)                            0124
*LOOP:                                                             0125
*         TEMPSAV2=TEMPSAV1+ONE;    /* INCREMENT RBN BY 1            */
LOOP     LA    TEMPSAV2,1                                          0125
         ALR   TEMPSAV2,TEMPSAV1                                   0125
*         CS(TEMPSAV1,TEMPSAV2,QMRBN);/* COMPARE AND SWAP IF QMRBN 0126
*                                      HAS NOT CHANGED               */
         CS    TEMPSAV1,@09,QMRBN(QMPAPTR)                         0126
*         BC(4,LOOP);               /* TRY AGAIN IF QMRBN HAS CHANGED*/
         BC    4,LOOP                                              0127
*         GEN(MODESET EXTKEY=SCHED);/* SWITCH BACK TO SCHEDULER KEY  */
         MODESET EXTKEY=SCHED
*         CLEARPTR=SPFXPTR;         /* SET BASE FOR SWASPACE         */
         LR    CLEARPTR,SPFXPTR                                    0129
*         IF LNGTH>TWOFIFSX THEN    /* WAS GETMAIN > 256             */
         L     @15,LNGTH-1                                         0130
         LA    @15,0(,@15)                                         0130
         C     @15,@CF00959                                        0130
         BNH   @RF00130                                            0130
*           DO;                                                    0131
*             QUOTIENT=LNGTH/TWOFIFSX;/* 256 BYTE MULTIPLES          */
         LR    QUOTIENT,@15                                        0132
         SRL   QUOTIENT,8                                          0132
*             REMAINDR=LNGTH//TWOFIFSX;/* REMAINDER                  */
         LR    @00,@15                                             0133
         SRDA  @00,32                                              0133
         D     @00,@CF00959                                        0133
         LR    REMAINDR,@00                                        0133
*             DO I=1 TO QUOTIENT;   /* ONCE PER 256 BYTE AREA        */
         LA    I,1                                                 0134
         B     @DE00134                                            0134
@DL00134 DS    0H                                                  0135
*               SWASPACE=SWASPACE&&SWASPACE;/* CLEAR 256 BYTES       */
         XC    SWASPACE(256,CLEARPTR),SWASPACE(CLEARPTR)           0135
*               CLEARPTR=CLEARPTR+TWOFIFSX;/* UP BASE POINTER        */
         AL    CLEARPTR,@CF00959                                   0136
*             END;                                                 0137
         AL    I,@CF00046                                          0137
@DE00134 CR    I,QUOTIENT                                          0137
         BNH   @DL00134                                            0137
*           END;                                                   0138
*         ELSE                                                     0139
*           REMAINDR=LNGTH;         /* PICK UP LENGTH IF 256 OR LESS */
         B     @RC00130                                            0139
@RF00130 L     REMAINDR,LNGTH-1                                    0139
         LA    REMAINDR,0(,REMAINDR)                               0139
*         IF REMAINDR^=ZERO THEN    /* WAS THERE ANY REMAINDR        */
@RC00130 LTR   REMAINDR,REMAINDR                                   0140
         BZ    @RF00140                                            0140
*           SWASPACE(1:REMAINDR)=SWASPACE(1:REMAINDR)&&SWASPACE(1: 0141
*               REMAINDR);          /* CLEAR THE REMAINDER           */
         LR    @15,REMAINDR                                        0141
         BCTR  @15,0                                               0141
         EX    @15,@SX01044                                        0141
*         SWPRBN=TEMPSAV2;          /* PUT RBN IN SWA PREFIX         */
@RF00140 ST    TEMPSAV2,SWPRBN(,SPFXPTR)                           0142
*         SWPVA=SWPREADR;           /* PUT SELF SVA IN SWA PREFIX    */
         MVC   SWPVA(3,SPFXPTR),SWPREADR                           0143
*         SWPLNGTH=SWLNGTH;         /* PUT LENGTH IN SWA PREFIX      */
         MVC   SWPLNGTH(3,SPFXPTR),SWLNGTH+1(SWEPAPTR)             0144
*         SWEPAPTR=SWCHNPTR;        /* UPDATE BASE TO NEXT EPA       */
         L     SWEPAPTR,SWCHNPTR(,SWEPAPTR)                        0145
*       END;                        /* END OF DO LOOP                */
*     ELSE                                                         0147
*       RETNCODE=INVLNGTH;          /* INVALID LENGTH ERROR          */
         B     @RC00110                                            0147
@RF00110 LA    @15,16                                              0147
         ST    @15,RETNCODE                                        0147
*   END;                                                           0148
@RC00110 DS    0H                                                  0148
@DE00109 SLR   @15,@15                                             0148
         CR    SWEPAPTR,@15                                        0148
         BE    @DC00109                                            0148
         C     @15,RETNCODE                                        0148
         BE    @DL00109                                            0148
@DC00109 DS    0H                                                  0149
*   RFY                                                            0149
*    (R14) UNRSTD;                  /*                        YM08414*/
*   END QB555ASN;                   /* END OF ASSIGN INT. PROCEDURE  */
@EL00002 DS    0H                                                  0150
@EF00002 DS    0H                                                  0150
@ER00002 BR    @14                                                 0150
*                                                                  0151
*/********************************************************************/
*/* THIS IS THE INTERNAL PROCEDURE THAT DOES THE WRITES. AS WITH     */
*/* OTHER LOCATE MODE FUNCTIONS THERE IS A 16 BYTE EPA FOR EACH      */
*/* BLOCK. THEY ARE CHAINED TOGETHER WITH THE END OF CHAIN INDICATED */
*/* BY A ZERO CHAIN POINTER. THERE IS NO LIMIT ON THE NUMBER OF      */
*/* EPAS. EACH EPA IS CHECKED FOR A VALID SVA AND BLOCK POINTER.     */
*/* IF EITHER ERROR CONDITION EXISTS THE APPROPRIATE ERROR CODE IS   */
*/* SET AND RETURN IS MADE TO THE EXTERNAL PROCEDURE WITHOUT FURTHER */
*/* PROCESSING. IF NO ERROR IS DETECTED THE SWA PREFIX IS TESTED TO  */
*/* SEE IF THIS BLOCK HAS BEEN PREVIOUSLY WRITTEN. IF NOT, THE SWA   */
*/* PREFIX INITIALIZATION IS COMPLETED. IN THE PROCESS OF DOING THIS */
*/* A CHECK IS MADE FOR A VALID ID. WHEN ALL EPAS HAVE BEEN          */
*/* PROCESSED WITHOUT ERROR THE JOURNAL WRITE ROUTINE IS CALLED      */
*/* BEFORE RETURNING TO THE EXTERNAL PROCEDURE.                      */
*/********************************************************************/
*                                                                  0151
*QB555WRT:                                                         0151
*   PROC;                           /* WRITE PROCEDURE               */
QB555WRT STM   @14,@12,@SA00003                                    0151
*   DO WHILE(SWEPAPTR^=ZERO&RETNCODE=ZERO);/* SET UP LOOP            */
         B     @DE00152                                            0152
@DL00152 DS    0H                                                  0153
*     SPFXPTR=SWVA;                 /* INITIALIZE SWA PREFIX PTR.    */
         SLR   @10,@10                                             0153
         ICM   @10,7,SWVA(SWEPAPTR)                                0153
         LR    SPFXPTR,@10                                         0153
*     IF SWBLKPTR^=SWVA+SWPRELNG THEN/* IS BLOCK PTR INVALID         */
         AL    @10,@CF00183                                        0154
         C     @10,SWBLKPTR(,SWEPAPTR)                             0154
         BE    @RF00154                                            0154
*       RETNCODE=INVBKPTR;          /* YES, SET ERROR CODE           */
         LA    @10,32                                              0155
         ST    @10,RETNCODE                                        0155
*     ELSE                          /* IF BOTH ARE VALID             */
*       IF SWVA^=SWPVA THEN         /* IS SVA INVALID                */
         B     @RC00154                                            0156
@RF00154 CLC   SWVA(3,SWEPAPTR),SWPVA(SPFXPTR)                     0156
         BE    @RF00156                                            0156
*         RETNCODE=INVSVA;          /* YES, SET ERROR CODE           */
         LA    @10,8                                               0157
         ST    @10,RETNCODE                                        0157
*       ELSE                        /* SVA WAS O.K.                  */
*         DO;                                                      0158
         B     @RC00156                                            0158
@RF00156 DS    0H                                                  0159
*           IF SWPWRT='0'B THEN     /* HAS THIS BLOCK BEEN WRITTEN   */
         TM    SWPWRT(SPFXPTR),B'10000000'                         0159
         BNZ   @RF00159                                            0159
*             DO;                                                  0160
*               IF SWBLKID=HEXZERO THEN/* NO, IS ID BEING PASSED     */
         CLI   SWBLKID(SWEPAPTR),X'00'                             0161
         BNE   @RF00161                                            0161
*                 TEMPID=EMBBLKID;  /* NO, GET IT FROM BLOCK         */
         L     @10,SWBLKPTR(,SWEPAPTR)                             0162
         MVC   TEMPID(1),EMBBLKID(@10)                             0162
*               ELSE                                               0163
*                 TEMPID=SWBLKID;   /* YES, TAKE IT FROM EPA         */
         B     @RC00161                                            0163
@RF00161 MVC   TEMPID(1),SWBLKID(SWEPAPTR)                         0163
*               DO I=1 TO TBLSIZE WHILE/* SEARCH UNITIL FOUND OR     */
*                     (SWPACRO=ZERO);/* TABLE EXHAUSTED              */
@RC00161 LA    I,1                                                 0164
@DL00164 L     @10,SWPACRO(,SPFXPTR)                               0164
         LTR   @10,@10                                             0164
         BNZ   @DC00164                                            0164
*                 IF TEMPID=BLOCKID(I) THEN/* IS IT THIS ID          */
         L     @10,@CA01019                                        0165
         ALR   @10,I                                               0165
         BCTR  @10,0                                               0165
         CLC   TEMPID(1),BLOCKID-BLOCKID(@10)                      0165
         BNE   @RF00165                                            0165
*                   DO;                                            0166
*                     SWPID=TEMPID; /* PUT IN SWA PREFIX             */
         MVC   SWPID(1,SPFXPTR),TEMPID                             0167
*                     SWPACRO=TABLE(I);/* PUT ACRONYM IN PREFIX      */
         LR    @10,I                                               0168
         SLA   @10,2                                               0168
         L     @06,@CA01020                                        0168
         ALR   @06,@10                                             0168
         AL    @06,@CF01046                                        0168
         MVC   SWPACRO(4,SPFXPTR),TABLE-TABLE(@06)                 0168
*                     SWPWRT='1'B;  /* SET WRITTEN BIT               */
         OI    SWPWRT(SPFXPTR),B'10000000'                         0169
*                   END;                                           0170
*               END;                                               0171
@RF00165 AL    I,@CF00046                                          0171
         C     I,@CF01018                                          0171
         BNH   @DL00164                                            0171
@DC00164 DS    0H                                                  0172
*               IF SWPACRO=ZERO THEN/* DID WE FIND MATCHING ID       */
         L     @10,SWPACRO(,SPFXPTR)                               0172
         LTR   @10,@10                                             0172
         BNZ   @RF00172                                            0172
*                 RETNCODE=INVID;   /* NO, SET ERROR CODE            */
         LA    @10,28                                              0173
         ST    @10,RETNCODE                                        0173
*             END;                                                 0174
@RF00172 DS    0H                                                  0175
*           IF RETNCODE=ZERO THEN                                  0175
@RF00159 L     @10,RETNCODE                                        0175
         LTR   @10,@10                                             0175
         BNZ   @RF00175                                            0175
*             SWEPAPTR=SWCHNPTR;    /* IF THERE WAS AN ERROR LEAVE 0176
*                                      THE POINTER AT THE EPA      0176
*                                      ASSOCIATED WITH THE ERROR     */
         L     SWEPAPTR,SWCHNPTR(,SWEPAPTR)                        0176
*         END;                                                     0177
@RF00175 DS    0H                                                  0178
*   END;                                                           0178
@RC00156 DS    0H                                                  0178
@RC00154 DS    0H                                                  0178
@DE00152 SLR   @10,@10                                             0178
         CR    SWEPAPTR,@10                                        0178
         BE    @DC00152                                            0178
         C     @10,RETNCODE                                        0178
         BE    @DL00152                                            0178
@DC00152 DS    0H                                                  0179
*   IF RETNCODE=ZERO THEN           /* DID WE ENCOUNTER ANY ERROR    */
         L     @10,RETNCODE                                        0179
         LTR   @10,@10                                             0179
         BNZ   @RF00179                                            0179
*     DO;                           /* NO, SET UP PARAMETER LIST     */
*       JNLPTR=ADDR(PARMLST);       /* SET BASE FOR JNLPARM          */
         LA    JNLPTR,PARMLST                                      0181
*       JNLPARM=(JNLPARM&&JNLPARM); /* CLEAR PARAMETER LIST          */
         XC    JNLPARM(16,JNLPTR),JNLPARM(JNLPTR)                  0182
*       JNLSWALI='1'B;              /* INDICATE SWA LOCATE MODE      */
         OI    JNLSWALI(JNLPTR),B'01000000'                        0183
*       JNLPPTRX=EPAPTR;            /* SET EPA POINTER               */
         L     @10,@PC00001                                        0184
         L     @10,EPAPTR(,@10)                                    0184
         ST    @10,JNLPPTRX(,JNLPTR)                               0184
*       CALL IEFXB500(PARMLST);     /* CALL JOURNAL WRITE            */
         LA    @10,PARMLST                                         0185
         ST    @10,@AL00001                                        0185
         L     @15,@CV00951                                        0185
         LA    @01,@AL00001                                        0185
         BALR  @14,@15                                             0185
*     END;                                                         0186
*   END QB555WRT;                   /* END OF INTERNAL PROC          */
@EL00003 DS    0H                                                  0187
@EF00003 DS    0H                                                  0187
@ER00003 LM    @14,@12,@SA00003                                    0187
         BR    @14                                                 0187
*                                                                  0188
*/********************************************************************/
*/* THIS IS THE INTERNAL PROCEDURE THAT DOES THE READS. AS WITH      */
*/* OTHER LOCATE MODE FUNCTIONS THERE IS A 16 BYTE EPA FOR EACH      */
*/* BLOCK. THEY ARE CHAINED TOGETHER WITH THE END OF THE CHAIN       */
*/* INDICATED BY A ZERO CHAIN POINTER. THERE IS NO LIMIT ON THE      */
*/* NUMBER OF EPAS. EACH EPA IS CHECKED FOR A VALID SVA AND THE      */
*/* ASSOCIATED SWA PREFIX IS TESTED TO SEE IF THIS BLOCK HAS BEEN    */
*/* PREVIOUSLY WRITTEN. IF EITHER ERROR CONDITION EXISTS, AN ERROR   */
*/* CODE IS SET AND RETURN IS MADE WITHOUT FURTHER PROCESSING.       */
*/* MODESET IS USED TO PUT US IN THE CALLERS KEY BEFORE PUTTING THE  */
*/* BLOCK POINTER, BLOCK ID AND BLOCK LENGTH IN THE CALLERS EPA.     */
*/* WHEN THE ENTIRE OPERATION IS COMPLETED SUCCESSFULLY A RETURN     */
*/* IS MADE TO THE EXTERNAL PROCEDURE WITH RETNCODE UNCHANGED.       */
*/********************************************************************/
*                                                                  0188
*QB555RD:                                                          0188
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/* READ PROCEDURE          Y02669*/
QB555RD  DS    0H                                                  0189
*   RFY                                                            0189
*    (R14) RSTD;                    /*                        YM08414*/
*   DO WHILE(SWEPAPTR^=ZERO&RETNCODE=ZERO);/* SET UP LOOP            */
         B     @DE00190                                            0190
@DL00190 DS    0H                                                  0191
*     SPFXPTR=SWVA;                 /* INITIALIZE SWA PREFIX PTR.    */
         SLR   @15,@15                                             0191
         ICM   @15,7,SWVA(SWEPAPTR)                                0191
         LR    SPFXPTR,@15                                         0191
*     IF SWVA^=SWPVA THEN           /* IS SVA INVALID                */
         L     @10,SWPVA-1(,SPFXPTR)                               0192
         LA    @10,0(,@10)                                         0192
         CR    @15,@10                                             0192
         BE    @RF00192                                            0192
*       RETNCODE=INVSVA;            /* SET ERROR CODE                */
         LA    @15,8                                               0193
         ST    @15,RETNCODE                                        0193
*     ELSE                                                         0194
*       IF SWPWRT^='1'B THEN        /* HAS BLOCK BEEN WRITTEN        */
         B     @RC00192                                            0194
@RF00192 TM    SWPWRT(SPFXPTR),B'10000000'                         0194
         BO    @RF00194                                            0194
*         RETNCODE=INVREAD;         /* SET ERROR CODE                */
         LA    @15,12                                              0195
         ST    @15,RETNCODE                                        0195
*       ELSE                        /* IF NO ERROR                   */
*         DO;                                                      0196
         B     @RC00194                                            0196
@RF00194 DS    0H                                                  0197
*           RESPECIFY                                              0197
*            (R2) RESTRICTED;       /* FOR USE BY MODESET MACRO      */
*           GEN(MODESET KEYADDR=CALLRKEY,WORKREG=2);/* SWITCH TO   0198
*                                      CALLER KEY                    */
         MODESET KEYADDR=CALLRKEY,WORKREG=2
*           RESPECIFY                                              0199
*            (R2) UNRESTRICTED;     /* RELEASE FOR PLS USE           */
*           SWBLKPTR=SWPVA+SWPRELNG;/* PUT BLOCK POINTER IN EPA      */
         LA    @15,16                                              0200
         L     @10,SWPVA-1(,SPFXPTR)                               0200
         LA    @10,0(,@10)                                         0200
         ALR   @15,@10                                             0200
         ST    @15,SWBLKPTR(,SWEPAPTR)                             0200
*           SWBLKID=SWPID;          /* PUT BLOCK ID IN EPA           */
         MVC   SWBLKID(1,SWEPAPTR),SWPID(SPFXPTR)                  0201
*           SWLNGTH=SWPLNGTH;       /* PUT BLOCK LENGTH IN EPA       */
         L     @15,SWPLNGTH-1(,SPFXPTR)                            0202
         LA    @15,0(,@15)                                         0202
         ST    @15,SWLNGTH(,SWEPAPTR)                              0202
*           GEN(MODESET EXTKEY=SCHED);/* SWITCH BACK TO SCHEDULER KEY*/
         MODESET EXTKEY=SCHED
*         END;                                                     0204
*     IF RETNCODE=ZERO THEN                                        0205
@RC00194 DS    0H                                                  0205
@RC00192 L     @15,RETNCODE                                        0205
         LTR   @15,@15                                             0205
         BNZ   @RF00205                                            0205
*       SWEPAPTR=SWCHNPTR;          /* SET BASE TO NEXT EPA ONLY IF
*                                      THERE HAS NOT BEEN AN ERROR   */
         L     SWEPAPTR,SWCHNPTR(,SWEPAPTR)                        0206
*   END;                            /* END FOR DO WHILE              */
@RF00205 DS    0H                                                  0207
@DE00190 SLR   @15,@15                                             0207
         CR    SWEPAPTR,@15                                        0207
         BE    @DC00190                                            0207
         C     @15,RETNCODE                                        0207
         BE    @DL00190                                            0207
@DC00190 DS    0H                                                  0208
*   RFY                                                            0208
*    (R14) UNRSTD;                  /*                        YM08414*/
*   END QB555RD;                    /* END OF INTERNAL PROC.         */
@EL00004 DS    0H                                                  0209
@EF00004 DS    0H                                                  0209
@ER00004 BR    @14                                                 0209
*                                                                  0210
*/********************************************************************/
*/* THIS IS THE INTERNAL PROCEDURE THAT FREES INDIVIDUAL BLOCKS.     */
*/* AS WITH THE OTHER LOCATE MODE FUNCTIONS THERE IS A 16 BYTE EPA   */
*/* FOR EACH BLOCK. THEY ARE CHAINED TOGETHER WITH THE END OF THE    */
*/* CHAIN INDICATED BY A ZERO CHAIN POINTER. THERE IS NO LIMIT ON    */
*/* THE NUMBER OF EPAS. EACH EPA IS CHECKED FOR A VALID SVA. IF IT   */
*/* IS INVALID AN APPROPRIATE ERROR CODE IS SET AND RETURN IS MADE   */
*/* WITHOUT FURTHER PROCESSING. IF IT IS VALID, THE SUBPOOL NUMBER   */
*/* IS OBTAINED FROM THE QMPA IN THE SAME MANNER AS FOR THE ASSIGN   */
*/* FUNCTION. THE BLOCK LENGTH IS GOTTEN FROM THE SWA PREFIX. THE    */
*/* PREFIX LENGTH IS ADDED TO IT AND IT IS FREED. THE FREEMAINS ARE  */
*/* UNCONDITIONAL. WHEN THE ENTIRE OPERATION IS COMPLETED            */
*/* SUCCESSFULLY A RETURN IS MADE TO THE EXTERNAL PROCEDURE WITH     */
*/* RETNCODE UNCHANGED.                                              */
*/********************************************************************/
*                                                                  0210
*QB555DEL:                                                         0210
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/* DELETE PROCEDURE        Y02669*/
QB555DEL DS    0H                                                  0211
*   RFY                                                            0211
*    (R14) RSTD;                    /*                        YM08414*/
*   RESPECIFY                                                      0212
*     IEZJSCB BASED(JSCBPTR);       /* USE INTERNAL BASE POINTER     */
*   JSCBPTR=TCBJSCB;                /* GET POINTER TO CURRENT JSCB   */
         L     @15,PSATOLD                                         0213
         L     JSCBPTR,TCBJSCB(,@15)                               0213
*   JSCBPTR=JSCBACT;                /* GET POINTER TO JSCB TO BE USED
*                                      FOR THIS DELETE BLOCK       0214
*                                      OPERATION                     */
         L     JSCBPTR,JSCBACT(,JSCBPTR)                           0214
*   QMPAPTR=JSCBQMPI;               /* GET POINTER TO QMPA           */
         L     QMPAPTR,JSCBQMPI(,JSCBPTR)                          0215
*   DO WHILE(SWEPAPTR^=ZERO&RETNCODE=ZERO);/* SET UP LOOP            */
         B     @DE00216                                            0216
@DL00216 DS    0H                                                  0217
*     SPFXPTR=SWVA;                 /* SET SWA PREFIX BASE POINTER   */
         SLR   @15,@15                                             0217
         ICM   @15,7,SWVA(SWEPAPTR)                                0217
         LR    SPFXPTR,@15                                         0217
*     IF SWVA=SWPVA THEN            /* IS THIS A VALID SVA           */
         L     @10,SWPVA-1(,SPFXPTR)                               0218
         LA    @10,0(,@10)                                         0218
         CR    @15,@10                                             0218
         BNE   @RF00218                                            0218
*       DO;                         /* YES, PREPARE TO FREE BLOCK    */
*         LNGTH=SWPLNGTH+SWPRELNG;  /* FREEMAIN LENGTH IS LENGTH OF
*                                      BLOCK + LENGTH OF SWA PREFIX  */
         L     @10,SWPLNGTH-1(,SPFXPTR)                            0220
         LA    @10,16(,@10)                                        0220
         STCM  @10,7,LNGTH                                         0220
*         SPNUM=QMSWSP;             /* GET SUBPOOL # FROM QMPA       */
         MVC   SPNUM(1),QMSWSP(QMPAPTR)                            0221
*         RESPECIFY                                                0222
*          (R0,                                                    0222
*           R1) RESTRICTED;         /* RESTRICT FOR FREEMAIN         */
*         R0=GETFRSPC;              /* LOAD WITH SUBPOOL NUMBER AND
*                                      LENGTH                        */
         L     R0,GETFRSPC                                         0223
*         GOTSPACE=(GOTSPACE&&GOTSPACE);/* CLEAR AREA                */
         L     @10,GOTSPACE                                        0224
         LR    @09,@10                                             0224
         XR    @09,@10                                             0224
         ST    @09,GOTSPACE                                        0224
*         SWPREADR=SWVA;            /* PUT IN BLOCK ADDRESS          */
         STCM  @15,7,SWPREADR                                      0225
*         R1=GOTSPACE;              /* LOAD BLOCK ADDRESS IN R1      */
         L     R1,GOTSPACE                                         0226
*         GEN(FREEMAIN R,LV=(0),A=(1));/* FREE BLOCK                 */
         FREEMAIN R,LV=(0),A=(1)
*         RESPECIFY                                                0228
*          (R0,                                                    0228
*           R1) UNRESTRICTED;       /* RELEASE REGISTERS TO PLS      */
*         SWEPAPTR=SWCHNPTR;        /* UP POINTER TO NEXT EPA        */
         L     SWEPAPTR,SWCHNPTR(,SWEPAPTR)                        0229
*       END;                                                       0230
*     ELSE                                                         0231
*       RETNCODE=INVSVA;            /* SET PROPER ERROR CODE         */
         B     @RC00218                                            0231
@RF00218 LA    @15,8                                               0231
         ST    @15,RETNCODE                                        0231
*   END;                                                           0232
@RC00218 DS    0H                                                  0232
@DE00216 SLR   @15,@15                                             0232
         CR    SWEPAPTR,@15                                        0232
         BE    @DC00216                                            0232
         C     @15,RETNCODE                                        0232
         BE    @DL00216                                            0232
@DC00216 DS    0H                                                  0233
*   RFY                                                            0233
*    (R14) UNRSTD;                  /*                        YM08414*/
*   END QB555DEL;                   /* END OF INTERNAL PROCEDURE     */
@EL00005 DS    0H                                                  0234
@EF00005 DS    0H                                                  0234
@ER00005 BR    @14                                                 0234
@PB00005 DS    0H                                                  0234
*   END IEFQB555                    /* END OF EXTERNAL PROCEDURE     */
*                                                                  0235
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IEFZB502)                                       */
*/*%INCLUDE SYSLIB  (IEFZB505)                                       */
*/*%INCLUDE SYSLIB  (IEFQMNGR)                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (IKJTCB  )                                       */
*/*%INCLUDE SYSLIB  (IEZJSCB )                                       */
*/*%INCLUDE SYSLIB  (IEFZB507)                                       */
*/*%INCLUDE SYSLIB  (IEFZB504)                                       */
*                                                                  0235
*       ;                                                          0235
@DATA    DS    0H
@SX01044 XC    SWASPACE(0,CLEARPTR),SWASPACE(CLEARPTR)
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    2F
@SA00003 DS    0F
         DS    15F
@AL00001 DS    1A
IEFQB555 CSECT
         DS    0F
@CF00046 DC    F'1'
@CF00183 DC    F'16'
@CF01018 DC    F'22'
@CF00959 DC    F'256'
@CF01046 DC    F'-4'
@DATD    DSECT
         DS    0D
RETNCODE DS    F
GETFRSPC DS    FL4
         ORG   GETFRSPC
SPNUM    DS    CL1
LNGTH    DS    AL3
         ORG   GETFRSPC+4
GOTSPACE DS    FL4
         ORG   GOTSPACE
@NM00040 DS    CL1
SWPREADR DS    CL3
         ORG   GOTSPACE+4
CALLRKEY DS    FL1
TEMPID   DS    CL1
         DS    CL2
PARMLST  DS    CL16
IEFQB555 CSECT
         DS    0F
@SIZDATD DC    AL1(230)
         DC    AL3(@ENDDATD-@DATD)
@CV00951 DC    V(IEFXB500)
@CA01019 DC    A(BLOCKID)
@CA01020 DC    A(TABLE)
         DS    0D
@CC00962 DC    C'AL'
@CC00964 DC    C'WL'
@CC00966 DC    C'RL'
@CC00968 DC    C'DB'
ZEROBZER DC    X'000000B0'
IEFQB555 CSECT
*                                     /*
WKPFEX   EQU   8                   LENGTH OF WORK AREA'S PREFIX Y02669
SPSIZE   EQU   0                   DISPLACEMENT IN PREFIX OF   YM08504
*                                  SP AND SIZE OF THIS WORK    YM08504
*                                  AREA                        YM08504
FLAGS    EQU   4                   DISP. OF FLAGS              YM08504
ZERO     EQU   0                   TO CLEAR FLAGS              YM08504
INUSE    EQU   X'80'               WORK AREA IS IN USE         YM08504
MUSTFREE EQU   X'40'               FREE THIS AREA ON EXIT      YM08504
SLOTBACK EQU   4                   SLOT IN REG SAVE AREA TO     Y02669
*                                  BACKWARD CHAIN SAVE AREAS    Y02669
SLOTFORE EQU   8                   SLOT IN REG SAVE AREA TO     Y02669
*                                  FOREWARD CHAIN SAVE AREAS    Y02669
SLOTR14  EQU   12                  SLOT IN REG SAVE AREA FOR    Y02669
*                                  R14                          Y02669
SLOTR0   EQU   20                  SLOT IN REG SAVE AREA FOR R0 Y02669
SLOTR1   EQU   24                  SLOT IN REG SAVE AREA FOR R1 Y02669
PARMLEN  EQU   8                   LENGTH OF PARM LIST          Y02669
SPSZ55L  DC    A(@SIZDATD)         POINTER TO SIZE OF THIS     YM08504
*                                  MODULE'S WORK AREA, TO BE   YM08504
*                                  USED BY IEFQB550            YM08504
         ENTRY SPSZ55L                                         YM08504
SPSZ50N  DC    A(SPSZ50L)          PTR. TO WORD WITHIN         YM08504
*                                  IEFQB550 WHICH POINTS TO    YM08504
*                                  SIZE IT REQUIRES            YM08504
         EXTRN SPSZ50L                                         YM08504
IEFQB555 CSECT
         DS   0H
PATCHLOC DC ((@DATA-@PSTART)/20)X'00'
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IEFQB555 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
REMAINDR EQU   @05
QUOTIENT EQU   @10
TEMPSAV2 EQU   @09
TEMPSAV1 EQU   @05
CLEARPTR EQU   @02
JSCBPTR  EQU   @02
I        EQU   @03
JNLPTR   EQU   @02
QMPAPTR  EQU   @08
SWEPAPTR EQU   @07
SPFXPTR  EQU   @04
R0       EQU   @00
R1       EQU   @01
R2       EQU   @02
R3       EQU   @03
R4       EQU   @04
R11      EQU   @11
R14      EQU   @14
R15      EQU   @15
         EXTRN BLOCKID
         EXTRN TABLE
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSATOLD  EQU   PSA+540
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
SWAPFX   EQU   0
SWPRBN   EQU   SWAPFX
SWPSTA   EQU   SWAPFX+4
SWPWRT   EQU   SWPSTA
SWPVA    EQU   SWAPFX+5
SWPID    EQU   SWAPFX+8
SWPLNGTH EQU   SWAPFX+9
SWPACRO  EQU   SWAPFX+12
SWAEPA   EQU   0
SWBLKPTR EQU   SWAEPA
SWVAFW   EQU   SWAEPA+4
SWVA     EQU   SWVAFW
SWBLKID  EQU   SWVAFW+3
SWLNGTH  EQU   SWAEPA+8
SWCHNPTR EQU   SWAEPA+12
QMPA     EQU   0
QMNAM    EQU   QMPA
QMSTA    EQU   QMPA+16
QMPCL    EQU   QMPA+32
QMPCMNC  EQU   QMPCL
SWAQMPA  EQU   0
QMSWSP   EQU   SWAQMPA
QMRBN    EQU   SWAQMPA+12
TCBFIX   EQU   0
TCBFRS   EQU   TCBFIX
TCB      EQU   0
TCBPIE   EQU   TCB+4
TCBPMASK EQU   TCBPIE
TCBCMP   EQU   TCB+16
TCBCMPF  EQU   TCBCMP
TCBCPP   EQU   TCBCMPF
TCBSTCC  EQU   TCBCMPF
TCBCDBL  EQU   TCBCMPF
TCBCWTO  EQU   TCBCMPF
TCBCIND  EQU   TCBCMPF
TCBCMSG  EQU   TCBCMPF
TCBTRN   EQU   TCB+20
TCBABF   EQU   TCBTRN
TCBMSS   EQU   TCB+24
TCBPKF   EQU   TCB+28
TCBFLGS  EQU   TCB+29
TCBFLGS1 EQU   TCBFLGS
TCBFLGS2 EQU   TCBFLGS+1
TCBFLGS3 EQU   TCBFLGS+2
TCBFLGS4 EQU   TCBFLGS+3
TCBFLGS5 EQU   TCBFLGS+4
TCBABWF  EQU   TCBFLGS5
TCBJPQ   EQU   TCB+44
TCBPURGE EQU   TCBJPQ
TCBGRS   EQU   TCB+48
TCBFSA   EQU   TCB+112
TCBTME   EQU   TCB+120
TCBJSTCB EQU   TCB+124
TCBTSFLG EQU   TCB+148
TCBTSTSK EQU   TCBTSFLG
TCBSTAB  EQU   TCB+160
TCBNSTAE EQU   TCBSTAB
TCBTCT   EQU   TCB+164
TCBTCTGF EQU   TCBTCT
TCBSCNDY EQU   TCB+172
TCBNDSP  EQU   TCBSCNDY
TCBNDSP1 EQU   TCBNDSP+1
TCBNDSP2 EQU   TCBNDSP+2
TCBNDSP3 EQU   TCBNDSP+3
TCBJSCB  EQU   TCB+180
TCBRECDE EQU   TCBJSCB
TCBEXT1  EQU   TCB+196
TCBBITS  EQU   TCB+200
TCBNDSP4 EQU   TCBBITS
TCBNDSP5 EQU   TCBBITS+1
TCBFLGS6 EQU   TCBBITS+2
TCBFLGS7 EQU   TCBBITS+3
TCBDAR   EQU   TCB+204
TCBDARC  EQU   TCBDAR
TCBEXT2  EQU   TCB+208
TCBFOE   EQU   TCB+244
TCBESTAE EQU   TCB+264
TCBESTRM EQU   TCBESTAE+1
TCBFBYT1 EQU   TCB+276
TCBFBYT2 EQU   TCB+277
TCBRV124 EQU   TCB+278
TCBRV133 EQU   TCB+279
TCBSWASA EQU   TCB+288
TCBXTNT2 EQU   0
TCBGTF   EQU   TCBXTNT2
TCBTFLG  EQU   TCBGTF
TCBRV146 EQU   TCBXTNT2+28
TCBRV155 EQU   TCBXTNT2+29
TCBRV164 EQU   TCBXTNT2+30
TCBRV173 EQU   TCBXTNT2+31
IEZJSCB  EQU   0
JSCBSEC1 EQU   IEZJSCB+188
JSCHPCE  EQU   JSCBSEC1+4
JSCBDCB  EQU   JSCBSEC1+36
JSCBOPTS EQU   JSCBSEC1+48
JSCBSWT1 EQU   JSCBSEC1+55
JSCBQMPI EQU   JSCBSEC1+56
JSCBWTP  EQU   JSCBSEC1+64
JSCBWTFG EQU   JSCBWTP
JSCBEND1 EQU   IEZJSCB+260
JNLPARM  EQU   0
JNLPCALL EQU   JNLPARM
JNLSWALI EQU   JNLPCALL
JNLPRTCD EQU   JNLPARM+1
JNLPPTRX EQU   JNLPARM+4
SWASPACE EQU   0
USERBLK  EQU   0
EMBBLKID EQU   USERBLK+3
CVTPTR   EQU   0
EPAPTR   EQU   0
FCODE    EQU   0
PSARSVTE EQU   PSARSVT
JSCBSEC2 EQU   JSCBEND1
JSCBSEC3 EQU   JSCBEND1
JSCBJCT  EQU   JSCBSEC3
JSCBJCTA EQU   JSCBJCT+1
JSCBASID EQU   JSCBSEC3+8
JSCBFBYT EQU   JSCBSEC3+10
JSCBJNL  EQU   JSCBSEC3+28
JSCBJJSB EQU   JSCBJNL
JSCBSUB  EQU   JSCBSEC3+40
JSCSCT   EQU   JSCBSEC3+68
JSCBACT  EQU   JSCBSEC3+88
JSCRSV45 EQU   JSCBSEC3+112
JSCRSV46 EQU   JSCRSV45
JSCRSV47 EQU   JSCRSV45+2
FLC      EQU   PSA
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
JSCBEND3 EQU   JSCBSEC3+120
JSCRSV52 EQU   JSCBSEC3+116
JSCRSV51 EQU   JSCRSV47+1
JSCRSV50 EQU   JSCRSV47
JSCRSV49 EQU   JSCRSV46+1
JSCRSV48 EQU   JSCRSV46
JSCRSV44 EQU   JSCBSEC3+108
JSCRSV43 EQU   JSCBSEC3+104
JSCRSV42 EQU   JSCBSEC3+100
JSCBASWA EQU   JSCBSEC3+96
JSCBUFPT EQU   JSCBSEC3+92
JSCBSWSP EQU   JSCBSEC3+87
JSCRSV33 EQU   JSCBSEC3+86
JSCDDNUM EQU   JSCBSEC3+84
JSCRSV53 EQU   JSCBSEC3+82
JSCDDNNO EQU   JSCBSEC3+80
JSCBVATA EQU   JSCBSEC3+76
JSCTMCOR EQU   JSCBSEC3+72
JSCSCTP  EQU   JSCSCT+1
JSCRSV55 EQU   JSCSCT
JSCRSV54 EQU   JSCBSEC3+64
JSCDSABQ EQU   JSCBSEC3+60
JSCBSSIB EQU   JSCBSEC3+56
JSCBFRBA EQU   JSCBSEC3+48
JSCRSV28 EQU   JSCBSEC3+46
JSCBSONO EQU   JSCBSEC3+44
JSCBSUBA EQU   JSCBSUB+1
JSCRSV31 EQU   JSCBSUB
JSCBSMLR EQU   JSCBSEC3+36
JSCBJNLR EQU   JSCBSEC3+32
JSCBJNLA EQU   JSCBJNL+1
JSCBJSBT EQU   JSCBJJSB
JSCBJSBX EQU   JSCBJJSB
JSCBJSBA EQU   JSCBJJSB
JSCBJSBI EQU   JSCBJJSB
@NM00036 EQU   JSCBJJSB
JSCBJNLE EQU   JSCBJJSB
JSCBJNLF EQU   JSCBJJSB
JSCBJNLN EQU   JSCBJJSB
@NM00035 EQU   JSCBSEC3+24
JSCBJRBA EQU   JSCBSEC3+16
JSCBIECB EQU   JSCBSEC3+12
JSCBRV08 EQU   JSCBSEC3+11
JSCBRV07 EQU   JSCBFBYT
JSCBRV06 EQU   JSCBFBYT
JSCBRV05 EQU   JSCBFBYT
JSCBRV04 EQU   JSCBFBYT
JSCBRV03 EQU   JSCBFBYT
JSCBRV02 EQU   JSCBFBYT
JSCBADSP EQU   JSCBFBYT
JSCBRV01 EQU   JSCBFBYT
JSCBTJID EQU   JSCBASID
JSCBPSCB EQU   JSCBSEC3+4
JSCJCTP  EQU   JSCBJCTA
JSCRSV24 EQU   JSCBJCT
JSCBEND2 EQU   JSCBSEC2
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
@NM00041 EQU   USERBLK
JNLRBN   EQU   JNLPARM+12
JNLPRLNG EQU   JNLPARM+9
JNLPID   EQU   JNLPARM+8
@NM00039 EQU   JNLPARM+2
@NM00038 EQU   JNLPRTCD
JNLABSNT EQU   JNLPRTCD
JNLERR   EQU   JNLPRTCD
@NM00037 EQU   JNLPCALL
JNLDRCT  EQU   JNLPCALL
JNLINIT  EQU   JNLPCALL
JNLSWAMI EQU   JNLPCALL
JSCBCSCB EQU   JSCBSEC1+68
JSCBPMG  EQU   JSCBWTP+2
JSCBWTSP EQU   JSCBWTP+1
JSCRSV23 EQU   JSCBWTFG
JSCRSV22 EQU   JSCBWTFG
JSCRSV21 EQU   JSCBWTFG
JSCRSV20 EQU   JSCBWTFG
JSCRSV19 EQU   JSCBWTFG
JSCRSV18 EQU   JSCBWTFG
JSCBRET  EQU   JSCBWTFG
JSCBIOFG EQU   JSCBWTFG
@NM00034 EQU   JSCBSEC1+60
JSCBPMSG EQU   JSCBSWT1
JSCRSV16 EQU   JSCBSWT1
JSCRSV15 EQU   JSCBSWT1
JSCRSV14 EQU   JSCBSWT1
JSCRSV13 EQU   JSCBSWT1
JSCRSV12 EQU   JSCBSWT1
JSCRSV11 EQU   JSCBSWT1
JSCBPASS EQU   JSCBSWT1
JSCBTTTR EQU   JSCBSEC1+52
JSCRSV10 EQU   JSCBSEC1+49
JSCBAUTH EQU   JSCBOPTS
JSCSIOTS EQU   JSCBOPTS
JSCRSV08 EQU   JSCBOPTS
JSCRSV07 EQU   JSCBOPTS
JSCRSV06 EQU   JSCBOPTS
JSCBLONG EQU   JSCBOPTS
JSCRSV05 EQU   JSCBOPTS
JSCRSV04 EQU   JSCBOPTS
JSCBSECB EQU   JSCBSEC1+44
JSCRSV03 EQU   JSCBSEC1+41
JSCBSTEP EQU   JSCBSEC1+40
JSCBDCBA EQU   JSCBDCB+1
JSCRSV02 EQU   JSCBDCB
JSCBID   EQU   JSCBSEC1+32
JSCBDBTB EQU   JSCBSEC1+28
JSCBIJSC EQU   JSCBSEC1+24
JSCBTCBP EQU   JSCBSEC1+20
JSCBPCC  EQU   JSCBSEC1+16
JSCBTCP  EQU   JSCBSEC1+12
JSCBSHR  EQU   JSCBSEC1+8
JSCHPCEA EQU   JSCHPCE+1
JSCRSV32 EQU   JSCHPCE
JSCRSV01 EQU   JSCBSEC1
@NM00033 EQU   IEZJSCB
@NM00032 EQU   TCBXTNT2+32
TCBRV181 EQU   TCBRV173
TCBRV180 EQU   TCBRV173
TCBRV179 EQU   TCBRV173
TCBRV178 EQU   TCBRV173
TCBRV177 EQU   TCBRV173
TCBRV176 EQU   TCBRV173
TCBRV175 EQU   TCBRV173
TCBRV174 EQU   TCBRV173
TCBRV172 EQU   TCBRV164
TCBRV171 EQU   TCBRV164
TCBRV170 EQU   TCBRV164
TCBRV169 EQU   TCBRV164
TCBRV168 EQU   TCBRV164
TCBRV167 EQU   TCBRV164
TCBRV166 EQU   TCBRV164
TCBRV165 EQU   TCBRV164
TCBRV163 EQU   TCBRV155
TCBRV162 EQU   TCBRV155
TCBRV161 EQU   TCBRV155
TCBRV160 EQU   TCBRV155
TCBRV159 EQU   TCBRV155
TCBRV158 EQU   TCBRV155
TCBRV157 EQU   TCBRV155
TCBRV156 EQU   TCBRV155
TCBRV154 EQU   TCBRV146
TCBRV153 EQU   TCBRV146
TCBRV152 EQU   TCBRV146
TCBRV151 EQU   TCBRV146
TCBRV150 EQU   TCBRV146
TCBRV149 EQU   TCBRV146
TCBRV148 EQU   TCBRV146
TCBRV147 EQU   TCBRV146
TCBRV145 EQU   TCBXTNT2+26
TCBRV144 EQU   TCBXTNT2+24
TCBCAUF  EQU   TCBXTNT2+20
TCBRV142 EQU   TCBXTNT2+16
TCBRSV49 EQU   TCBXTNT2+12
TCBEVENT EQU   TCBXTNT2+8
TCBRCMP  EQU   TCBXTNT2+5
TCBRSVAB EQU   TCBXTNT2+4
TCBGTFA  EQU   TCBGTF+1
TCBRSV47 EQU   TCBTFLG
TCBRSV46 EQU   TCBTFLG
TCBRSV45 EQU   TCBTFLG
TCBRSV44 EQU   TCBTFLG
TCBRSV43 EQU   TCBTFLG
TCBDSPIT EQU   TCBTFLG
TCBERRTN EQU   TCBTFLG
TCBASYNC EQU   TCBTFLG
@NM00031 EQU   TCB+296
TCBSVCA2 EQU   TCB+292
TCBDBTB  EQU   TCB+284
TCBRPT   EQU   TCB+280
TCBRV141 EQU   TCBRV133
TCBRV140 EQU   TCBRV133
TCBRV139 EQU   TCBRV133
TCBRV138 EQU   TCBRV133
TCBRV137 EQU   TCBRV133
TCBRV136 EQU   TCBRV133
TCBRV135 EQU   TCBRV133
TCBRV134 EQU   TCBRV133
TCBRV132 EQU   TCBRV124
TCBRV131 EQU   TCBRV124
TCBRV130 EQU   TCBRV124
TCBRV129 EQU   TCBRV124
TCBRV128 EQU   TCBRV124
TCBRV127 EQU   TCBRV124
TCBRV126 EQU   TCBRV124
TCBRV125 EQU   TCBRV124
TCBRV123 EQU   TCBFBYT2
TCBRV122 EQU   TCBFBYT2
TCBECBNV EQU   TCBFBYT2
TCBSSSYN EQU   TCBFBYT2
TCBFPRAP EQU   TCBFBYT2
TCBFDW   EQU   TCBFBYT2
TCBFMW   EQU   TCBFBYT2
TCBCNCB  EQU   TCBFBYT2
TCBLLH   EQU   TCBFBYT1
TCBRV113 EQU   TCBFBYT1
TCBEOT   EQU   TCBFBYT1
TCBRTM2  EQU   TCBFBYT1
TCBPGNLY EQU   TCBFBYT1
TCBNDIOS EQU   TCBFBYT1
TCBACTIV EQU   TCBFBYT1
TCBEOTFM EQU   TCBFBYT1
TCBAFFN  EQU   TCB+274
TCBCCPVI EQU   TCB+272
TCBUKYSP EQU   TCB+268
TCBMODE  EQU   TCBESTAE+3
TCBERTYP EQU   TCBESTAE+2
TCBRV314 EQU   TCBESTRM
TCBRV313 EQU   TCBESTRM
TCBRV312 EQU   TCBESTRM
TCBRV311 EQU   TCBESTRM
TCBRV310 EQU   TCBESTRM
TCBRV309 EQU   TCBESTRM
TCBRV308 EQU   TCBESTRM
TCBETERM EQU   TCBESTRM
TCBSCBKY EQU   TCBESTAE
TCBRTM12 EQU   TCB+260
TCBTCBID EQU   TCB+256
TCBRSV96 EQU   TCB+252
TCBSWA   EQU   TCB+248
TCBFOEA  EQU   TCBFOE+1
TCBRSV42 EQU   TCBFOE
TCBRV306 EQU   TCB+240
TCBRSV41 EQU   TCB+239
TCBTID   EQU   TCB+238
TCBRSVAA EQU   TCB+237
TCBABCUR EQU   TCB+236
TCBTMSAV EQU   TCB+232
TCBIOTIM EQU   TCB+228
TCBRTWA  EQU   TCB+224
TCBBACK  EQU   TCB+220
TCBTIRB  EQU   TCB+216
TCBAECB  EQU   TCB+212
TCBEXT2A EQU   TCBEXT2+1
TCBRSV39 EQU   TCBEXT2
TCBSTMCT EQU   TCB+207
TCBSYSCT EQU   TCB+206
TCBRSV37 EQU   TCB+205
TCBEXSVC EQU   TCBDAR
TCBDARMS EQU   TCBDAR
TCBDARWT EQU   TCBDAR
TCBDARO  EQU   TCBDAR
TCBDARMC EQU   TCBDARC
TCBDARD  EQU   TCBDAR
TCBDARS  EQU   TCBDAR
TCBDARP  EQU   TCBDAR
TCBGTOFM EQU   TCBFLGS7
TCBADMP  EQU   TCBFLGS7
TCBRSTSK EQU   TCBFLGS7
TCBSVCS  EQU   TCBFLGS7
TCBSTACK EQU   TCBFLGS7
TCBRSV34 EQU   TCBFLGS7
TCBRSV33 EQU   TCBFLGS7
TCBGPECB EQU   TCBFLGS7
TCBNTJS  EQU   TCBFLGS6
TCBAPG   EQU   TCBFLGS6
TCBMIGR  EQU   TCBFLGS6
TCBRV303 EQU   TCBFLGS6
TCBSPVLK EQU   TCBFLGS6
TCBCPU   EQU   TCBFLGS6
TCBPIE17 EQU   TCBFLGS6
TCBRV    EQU   TCBFLGS6
TCBRSV79 EQU   TCBNDSP5
TCBRSV78 EQU   TCBNDSP5
TCBRSV77 EQU   TCBNDSP5
TCBRSV76 EQU   TCBNDSP5
TCBRSV75 EQU   TCBNDSP5
TCBRSV74 EQU   TCBNDSP5
TCBRSV95 EQU   TCBNDSP5
TCBRSV94 EQU   TCBNDSP5
TCBRSV93 EQU   TCBNDSP4
TCBRSV92 EQU   TCBNDSP4
TCBRSV91 EQU   TCBNDSP4
TCBRSV90 EQU   TCBNDSP4
TCBRSV89 EQU   TCBNDSP4
TCBRSV88 EQU   TCBNDSP4
TCBRSV87 EQU   TCBNDSP4
TCBRSV86 EQU   TCBNDSP4
TCBEXT1A EQU   TCBEXT1+1
TCBRSV32 EQU   TCBEXT1
TCBEXCPD EQU   TCB+192
TCBIOBRC EQU   TCB+188
TCBDDWTC EQU   TCB+186
TCBDDEXC EQU   TCB+184
TCBJSCBB EQU   TCBJSCB+1
@NM00030 EQU   TCBRECDE
TCBREC   EQU   TCBRECDE
TCBMDIDS EQU   TCB+176
TCBNDINT EQU   TCBNDSP3
TCBRSV27 EQU   TCBNDSP3
TCBRSV26 EQU   TCBNDSP3
TCBRSV25 EQU   TCBNDSP3
TCBRSV24 EQU   TCBNDSP3
TCBSRBND EQU   TCBNDSP3
TCBRV302 EQU   TCBNDSP3
TCBLJSND EQU   TCBNDSP3
TCBABE   EQU   TCBNDSP2
TCBDSS   EQU   TCBNDSP2
TCBOWAIT EQU   TCBNDSP2
TCBIWAIT EQU   TCBNDSP2
TCBNDTS  EQU   TCBNDSP2
TCBNDSVC EQU   TCBNDSP2
TCBSTPP  EQU   TCBNDSP2
TCBABD   EQU   TCBNDSP2
TCBRSV22 EQU   TCBNDSP1
TCBPIEND EQU   TCBNDSP1
TCBTPSP  EQU   TCBNDSP1
TCBDDRND EQU   TCBNDSP1
TCBRSPND EQU   TCBNDSP1
TCBRSTND EQU   TCBNDSP1
TCBDARPN EQU   TCBNDSP1
TCBDARTN EQU   TCBNDSP1
TCBNDSP0 EQU   TCBNDSP
TCBUSER  EQU   TCB+168
TCBTCTB  EQU   TCBTCT+1
TCBRSV9C EQU   TCBTCTGF
TCBRSV9B EQU   TCBTCTGF
TCBRSV9A EQU   TCBTCTGF
TCBRSV99 EQU   TCBTCTGF
TCBRSV98 EQU   TCBTCTGF
TCBRSV97 EQU   TCBTCTGF
TCBRSV20 EQU   TCBTCTGF
TCBSMFGF EQU   TCBTCTGF
TCBSTABB EQU   TCBSTAB+1
TCBSTCUR EQU   TCBNSTAE
TCBRV301 EQU   TCBNSTAE
TCBSYNCH EQU   TCBNSTAE
TCBHALT  EQU   TCBNSTAE
TCBPPSUP EQU   TCBNSTAE
TCB33E   EQU   TCBNSTAE
TCBQUIES EQU   TCBNSTAE
TCBSTABE EQU   TCBNSTAE
TCBAQE   EQU   TCB+156
TCBPQE   EQU   TCB+152
TCBTSDP  EQU   TCB+151
TCBTSLP  EQU   TCB+150
TCBSTPCT EQU   TCB+149
TCBCPUBN EQU   TCBTSFLG
TCBDYDSP EQU   TCBTSFLG
TCBRSV18 EQU   TCBTSFLG
TCBRSV17 EQU   TCBTSFLG
TCBTIOTG EQU   TCBTSFLG
TCBATT   EQU   TCBTSFLG
TCBSTPPR EQU   TCBTSFLG
TCBRV300 EQU   TCBTSTSK
TCBECB   EQU   TCB+144
TCBIQE   EQU   TCB+140
TCBLTC   EQU   TCB+136
TCBOTC   EQU   TCB+132
TCBNTC   EQU   TCB+128
TCBJSTCA EQU   TCBJSTCB+1
TCBRSV16 EQU   TCBJSTCB
TCBTQET  EQU   TCBTME
TCBTCB   EQU   TCB+116
TCBFSAB  EQU   TCBFSA+1
TCBQEL   EQU   TCBFSA
TCBGRS15 EQU   TCBGRS+60
TCBGRS14 EQU   TCBGRS+56
TCBGRS13 EQU   TCBGRS+52
TCBGRS12 EQU   TCBGRS+48
TCBGRS11 EQU   TCBGRS+44
TCBGRS10 EQU   TCBGRS+40
TCBGRS9  EQU   TCBGRS+36
TCBGRS8  EQU   TCBGRS+32
TCBGRS7  EQU   TCBGRS+28
TCBGRS6  EQU   TCBGRS+24
TCBGRS5  EQU   TCBGRS+20
TCBGRS4  EQU   TCBGRS+16
TCBGRS3  EQU   TCBGRS+12
TCBGRS2  EQU   TCBGRS+8
TCBGRS1  EQU   TCBGRS+4
TCBGRS0  EQU   TCBGRS
TCBJPQB  EQU   TCBJPQ+1
TCBRSV15 EQU   TCBPURGE
TCBRSV14 EQU   TCBPURGE
TCBRSV13 EQU   TCBPURGE
TCBRSV12 EQU   TCBPURGE
TCBRSV11 EQU   TCBPURGE
TCBRSV10 EQU   TCBPURGE
TCBRSV09 EQU   TCBPURGE
TCBJPQF  EQU   TCBPURGE
TCBJLB   EQU   TCB+40
TCBLLS   EQU   TCB+36
TCBDSP   EQU   TCB+35
TCBLMP   EQU   TCB+34
TCBPNDSP EQU   TCBFLGS5
TCBFCD1  EQU   TCBFLGS5
TCBSTP   EQU   TCBFLGS5
TCBSYS   EQU   TCBFLGS5
TCBANDSP EQU   TCBFLGS5
TCBPAGE  EQU   TCBFLGS5
TCBUXNDF EQU   TCBABWF
TCBFC    EQU   TCBFLGS5
TCBONDSP EQU   TCBFLGS4
TCBMPCND EQU   TCBFLGS4
TCBMPCVQ EQU   TCBFLGS4
TCBUXNDV EQU   TCBFLGS4
TCBHNDSP EQU   TCBFLGS4
TCBRQENA EQU   TCBFLGS4
TCBSER   EQU   TCBFLGS4
TCBNDUMP EQU   TCBFLGS4
TCBDWSTA EQU   TCBFLGS3
TCBRSV08 EQU   TCBFLGS3
TCBRSV07 EQU   TCBFLGS3
TCBRSV06 EQU   TCBFLGS3
TCBABGM  EQU   TCBFLGS3
TCBABTRM EQU   TCBFLGS3
TCBADINP EQU   TCBFLGS3
TCBFSM   EQU   TCBFLGS3
TCBFTS   EQU   TCBFLGS2
TCBFETXR EQU   TCBFLGS2
TCBFDSOP EQU   TCBFLGS2
TCBFJMC  EQU   TCBFLGS2
TCBFSMC  EQU   TCBFLGS2
TCBFABOP EQU   TCBFLGS2
TCBFSTI  EQU   TCBFLGS2
TCBFOINP EQU   TCBFLGS2
TCBFX    EQU   TCBFLGS1
TCBFS    EQU   TCBFLGS1
TCBFT    EQU   TCBFLGS1
TCBPDUMP EQU   TCBFLGS1
TCBNONPR EQU   TCBFLGS1
TCBFERA  EQU   TCBFLGS1
TCBFE    EQU   TCBFLGS1
TCBFA    EQU   TCBFLGS1
TCBZERO  EQU   TCBPKF
TCBFLAG  EQU   TCBPKF
TCBMSSB  EQU   TCBMSS+1
TCBRSV03 EQU   TCBMSS
TCBTRNB  EQU   TCBTRN+1
TCBRSV02 EQU   TCBABF
TCBOLTEP EQU   TCBABF
TCBTCP   EQU   TCBABF
TCBTCPP  EQU   TCBABF
TCBRSV01 EQU   TCBABF
TCBGRPH  EQU   TCBABF
TCBNOCHK EQU   TCBABF
TCBMOD91 EQU   TCBABF
TCBCMPC  EQU   TCBCMP+1
TCBRV318 EQU   TCBCMSG
TCBRV317 EQU   TCBCIND
TCBRV316 EQU   TCBCWTO
TCBCASID EQU   TCBCDBL
TCBNOCC  EQU   TCBSTCC
TCBDMPO  EQU   TCBCPP
TCBCSTEP EQU   TCBCMPF
TCBCREQ  EQU   TCBCMPF
TCBTIO   EQU   TCB+12
TCBDEB   EQU   TCB+8
TCBPIEA  EQU   TCBPIE+1
TCBPM    EQU   TCBPMASK
@NM00029 EQU   TCBPMASK
TCBRBP   EQU   TCB
TCBFRS6  EQU   TCBFRS+24
TCBFRS4  EQU   TCBFRS+16
TCBFRS2  EQU   TCBFRS+8
TCBFRS0  EQU   TCBFRS
@NM00004 EQU   SWAQMPA+1
QMPACL   EQU   QMPCL+1
QMPNC    EQU   QMPCMNC
QMPCM    EQU   QMPCMNC
QMEIA    EQU   QMPA+28
QMWTQ    EQU   QMPA+24
QMRSD1   EQU   QMPA+22
QMTID    EQU   QMPA+20
QMLNK    EQU   QMPA+18
QMPRI    EQU   QMPA+17
@NM00003 EQU   QMSTA
QMSJNL   EQU   QMSTA
@NM00002 EQU   QMSTA
QMTPY    EQU   QMPA+15
QMNOT    EQU   QMPA+14
QMTLN    EQU   QMPA+12
QMTST    EQU   QMPA+11
QMFLT    EQU   QMPA+9
QMPOP    EQU   QMPA+8
QMPEB    EQU   QMNAM+4
QMCAN    EQU   QMNAM
@NM00001 EQU   SWPSTA
@NM00028 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00027 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSALITA  EQU   PSA+764
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00026 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00025 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSAULCMS EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAAOLD  EQU   PSA+548
PSAANEW  EQU   PSA+544
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00024 EQU   FLCFSA
@NM00023 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00022 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00021 EQU   FLCIOA
@NM00020 EQU   FLCMCLA+15
@NM00019 EQU   FLCMCLA+14
@NM00018 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00017 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00016 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00015 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00014 EQU   FLCPER
@NM00013 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00012 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00011 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00010 EQU   FLCPIILC
@NM00009 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00008 EQU   FLCSVILC
@NM00007 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00006 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00005 EQU   FLCICCW2+4
FLCCVT   EQU   FLCICCW2
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00179 EQU   @EL00003
@PB00004 EQU   @PB00005
@PB00003 EQU   @PB00004
@PB00002 EQU   @PB00003
@ENDDATA EQU   *
         END   IEFQB555,(C'PLS1820',0701,78059)
