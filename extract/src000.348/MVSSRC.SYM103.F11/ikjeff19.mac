         TITLE 'IKJEFF19 - VSAM AND GENERAL FAILURE MESSAGE ROUTINE    *
                        '
IKJEFF19 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IKJEFF19  78.088'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @11,0                                               0001
@PSTART  LA    @12,4095(,@11)                                      0001
         USING @PSTART,@11                                         0001
         USING @PSTART+4095,@12                                    0001
         L     @00,@SIZDATD                                        0001
         GETMAIN  R,LV=(0)
         LR    @10,@01                                             0001
         USING @DATD,@10                                           0001
         ST    @13,@SA00001+4                                      0001
         LM    @00,@01,20(@13)                                     0001
         ST    @10,8(,@13)                                         0001
         LR    @13,@10                                             0001
         MVC   @PC00001(4),0(@01)                                  0001
DUMYLBL2 DS    0H                                                  0003
DUMYLBL  DS    0H                                                  0076
*                                                                  0239
*   /*****************************************************************/
*   /*                                                               */
*   /* INITIALIZATION                                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0239
*   INTSWS=ZERO;                    /* INITIALIZE INTERNAL SWITCHES  */
         MVI   INTSWS,X'00'                                        0239
*   MSGTABLE=MSGTABLE&&MSGTABLE;    /* ZERO OUT MESSAGE PARAMETER  0240
*                                      LIST                          */
         XC    MSGTABLE(80),MSGTABLE                               0240
*   GFPLPTR=ADDR(INPUTPL);          /* USE LOCAL POINTER TO GFPARMS  */
         L     GFPLPTR,@PC00001                                    0241
*   RFY                                                            0242
*     R1 RSTD;                                                     0242
*   IF R1=ZERO×GFPLPTR=ZERO THEN    /* CHECK FOR BAD INPUT POINTER   */
         SLR   @15,@15                                             0243
         CR    R1,@15                                              0243
         BE    @RT00243                                            0243
         CR    GFPLPTR,@15                                         0243
         BNE   @RF00243                                            0243
@RT00243 DS    0H                                                  0244
*     DO;                                                          0244
*       BADPLPTB=ON;                /* REMEMBER HAVE THIS ERROR CASE */
         OI    BADPLPTB,B'00000010'                                0245
*       MTADDR(3)=ADDR(INSRTB3E);   /* INSERT ERROR DESCR FOR MESSAGE*/
         LA    @09,INSRTB3E                                        0246
         STCM  @09,7,MTADDR+8                                      0246
*       MTLEN(3)=LENGTH(INSRTB3E);                                 0247
         MVI   MTLEN+8,X'40'                                       0247
*       CALL PLERPROC;              /* INTERNAL PROC FOR COMMON    0248
*                                      INSERTS                       */
         BAL   @14,PLERPROC                                        0248
*       RFY                                                        0249
*         R1 UNRSTD;                                               0249
*     END;                                                         0250
*   ELSE                            /* LINKAGE IS O.K.               */
*     DO;                           /* GOOD PTRTOPL DO/END GROUP     */
         B     @RC00243                                            0251
@RF00243 DS    0H                                                  0252
*       RETCODE=ZERO;               /* ZERO RETURN CODE TO CALLER    */
*                                                                  0252
         SLR   @15,@15                                             0252
         ST    @15,RETCODE                                         0252
*       /*************************************************************/
*       /*                                                           */
*       /* ISSUE MODESET, IF NECESSARY                               */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0253
*       IF GFKEYN08=ON THEN         /* MODESET IS NEEDED (IF CALLED
*                                      IN KEY 1 - 7) IN ORDER TO   0253
*                                      REFERENCE COMMAND NAME IN TSO
*                                      CONTROL BLOCKS AND ISSUE    0253
*                                      SECOND LEVEL MESSAGE AS     0253
*                                      PUTLINE                       */
         TM    GFKEYN08(GFPLPTR),B'10000000'                       0253
         BNO   @RF00253                                            0253
*         DO;                                                      0254
*           RFY                                                    0255
*            (R2,                                                  0255
*             R3,                                                  0255
*             R4) RSTD;                                            0255
*           R3=ADDR(SAVEKEY);       /* ONE-BYTE FIELD FOR SAVING KEY */
         LA    R3,SAVEKEY                                          0256
*           GEN;                                                   0257
*                                   /* COMMENT FOR UNPAIRED APOSTROPHES
*                                   CHANGE TO KEY 0 = SUPERVISOR
MODESET1  MODESET EXTKEY=SUPR,SAVEKEY=SAVEKEY,WORKREG=4,               +
               RELATED=(KEY0,IKJEFF19(MODESET2))
*           RFY                                                    0258
*            (R2,                                                  0258
*             R3,                                                  0258
*             R4) UNRSTD;                                          0258
*         END;                                                     0259
*                                                                  0259
*       /*************************************************************/
*       /*                                                           */
*       /* CHECK FOR INVALID CALLER ID                               */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0260
*       IF(GFCALLID>VSAMMAX&^(GFCALLID=GFPARSE×GFCALLID=GFPUTL×GFCALLID
*           =GFABEND×GFCALLID=GFSSREQ))×GFCALLID=ZERO THEN/* IF    0260
*                                      UNDEFINED CALLER ID           */
@RF00253 LH    @15,GFCALLID(,GFPLPTR)                              0260
         CH    @15,@CH00044                                        0260
         BNH   @GL00002                                            0260
         CH    @15,@CH00364                                        0260
         BE    @GL00002                                            0260
         CH    @15,@CH00380                                        0260
         BE    @GL00002                                            0260
         CH    @15,@CH00051                                        0260
         BE    @GL00002                                            0260
         CH    @15,@CH00238                                        0260
         BNE   @RT00260                                            0260
@GL00002 ICM   @15,3,GFCALLID(GFPLPTR)                             0260
         BNZ   @RF00260                                            0260
@RT00260 DS    0H                                                  0261
*         DO;                                                      0261
*           BADIDBIT=ON;                                           0262
         OI    BADIDBIT,B'00000001'                                0262
*           MTADDR(3)=ADDR(INSRTB3A);/* INSERT 'INVALID ID FROM    0263
*                                      CALLER' TEXT                  */
         LA    @15,INSRTB3A                                        0263
         STCM  @15,7,MTADDR+8                                      0263
*           MTLEN(3)=LENGTH(INSRTB3A);                             0264
         MVI   MTLEN+8,X'11'                                       0264
*           CALL PLERPROC;          /* SET UP COMMON MESSAGE INSERTS */
         BAL   @14,PLERPROC                                        0265
*         END;                                                     0266
*       ELSE                        /* IF ID IS O.K.                 */
*                                                                  0267
*         /***********************************************************/
*         /*                                                         */
*         /* CHECK FOR ZERO CONTROL BLOCK POINTER WHEN NEED NONZERO  */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0267
*         IF GFCALLID<=VSAMMAX×GFCALLID=GFSSREQ THEN               0267
         B     @RC00260                                            0267
@RF00260 LH    @15,GFCALLID(,GFPLPTR)                              0267
         CH    @15,@CH00044                                        0267
         BNH   @RT00267                                            0267
         CH    @15,@CH00238                                        0267
         BNE   @RF00267                                            0267
@RT00267 DS    0H                                                  0268
*           DO;                                                    0268
*             IF GFCBPTR=ZERO THEN  /* CONTROL BLOCK POINTER MUST BE
*                                      NONZERO, OR HAVE ERROR        */
         ICM   @15,15,GFCBPTR(GFPLPTR)                             0269
         BNZ   @RF00269                                            0269
*               BADCBBIT=ON;        /* WILL ISSUE INCOMPLETE MSG     */
         OI    BADCBBIT,B'00010000'                                0270
*           END;                                                   0271
@RF00269 DS    0H                                                  0272
*                                                                  0272
*       /*************************************************************/
*       /*                                                           */
*       /* IF INPUT PARAMETER LIST O.K. SET UP COMMAND NAME OR       */
*       /* PROGRAM NAME INSERT, THEN SET UP GFCALLID-DEPENDENT       */
*       /* INSERTS FOR FAILURE MESSAGE                               */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0272
*       IF PLERRBIT=OFF×BADCBBIT=ON THEN                           0272
@RF00267 DS    0H                                                  0272
@RC00260 TM    BADCBBIT,B'00010000'                                0272
         BNZ   @RT00272                                            0272
         TM    PLERRBIT,B'00100000'                                0272
         BO    @RF00272                                            0272
@RT00272 DS    0H                                                  0273
*         DO;                       /* GOODID DO/END GROUP           */
*           IF GFPGMNL^=ZERO&GFPGMNP^=ZERO THEN/* INSERT PROGRAM NAME
*                                      IF ONE IS SUPPLIED            */
         SLR   @08,@08                                             0274
         LH    @15,GFPGMNL(,GFPLPTR)                               0274
         CR    @15,@08                                             0274
         BE    @RF00274                                            0274
         L     @14,GFPGMNP(,GFPLPTR)                               0274
         CR    @14,@08                                             0274
         BE    @RF00274                                            0274
*             DO;                                                  0275
*               MTADDR(4)=GFPGMNP;                                 0276
         STCM  @14,7,MTADDR+12                                     0276
*               MTLEN(4)=GFPGMNL;                                  0277
         STC   @15,MTLEN+12                                        0277
*             END;                                                 0278
*           ELSE                    /* NO PROGRAM NAME SUPPLIED      */
*             DO;                                                  0279
         B     @RC00274                                            0279
@RF00274 DS    0H                                                  0280
*               IF GFCPPLP^=ZERO THEN/* IF CAN ACCESS TSO COMMAND  0280
*                                      NAME THRU CPPL THEN           */
         ICM   @08,15,GFCPPLP(GFPLPTR)                             0280
         BZ    @RF00280                                            0280
*                 DO;                                              0281
*                   IF ECTSCMD='        ' THEN/* IF NOT A SUBCOMMAND */
         L     @08,CPPLPTR(,GFPLPTR)                               0282
         L     @08,ECTPTR(,@08)                                    0282
         CLC   ECTSCMD(8,@08),@CC02225                             0282
         BNE   @RF00282                                            0282
*                     DO;                                          0283
*                       MTADDR(4)=ADDR(ECTPCMD);/* INSERT PRIMARY  0284
*                                      COMMAND NAME                  */
         LA    @08,ECTPCMD(,@08)                                   0284
         STCM  @08,7,MTADDR+12                                     0284
*                       MTLEN(4)=LENGTH(ECTPCMD);                  0285
         MVI   MTLEN+12,X'08'                                      0285
*                     END;                                         0286
*                   ELSE            /* IF TSO SUBCOMMAND IS ACTIVE   */
*                     DO;                                          0287
         B     @RC00282                                            0287
@RF00282 DS    0H                                                  0288
*                       MTADDR(4)=ADDR(ECTSCMD);/* INSERT SECONDARY
*                                      COMMAND NAME                  */
         L     @08,CPPLPTR(,GFPLPTR)                               0288
         L     @08,ECTPTR(,@08)                                    0288
         LA    @08,ECTSCMD(,@08)                                   0288
         STCM  @08,7,MTADDR+12                                     0288
*                       MTLEN(4)=LENGTH(ECTSCMD);                  0289
         MVI   MTLEN+12,X'08'                                      0289
*                     END;                                         0290
*                 END;                                             0291
*               ELSE                /* IF CAN'T INSERT ANY NAME      */
*                 DO;                                              0292
         B     @RC00280                                            0292
@RF00280 DS    0H                                                  0293
*                   MTADDR(4)=ADDR(INSTUPGM);/* INSERT 'UNSPECIFIED
*                                      PROGRAM'                      */
         LA    @08,INSTUPGM                                        0293
         STCM  @08,7,MTADDR+12                                     0293
*                   MTLEN(4)=LENGTH(INSTUPGM);                     0294
         MVI   MTLEN+12,X'13'                                      0294
*                 END;                                             0295
*             END;                                                 0296
@RC00280 DS    0H                                                  0297
*           SAVEPGMN=MTINSRT(4);    /* SAVE COMMAND NAME/PROGRAM NAME
*                                      INSERT                        */
@RC00274 L     SAVEPGMN,MTINSRT+12                                 0297
*                                                                  0298
*           /*********************************************************/
*           /*                                                       */
*           /* SET UP FOR TSO SERVICE ROUTINE FAILURE MESSAGE (19C)  */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0298
*           IF GFCALLID=GFPARSE×GFCALLID=GFPUTL THEN               0298
         LH    @15,GFCALLID(,GFPLPTR)                              0298
         CH    @15,@CH00364                                        0298
         BE    @RT00298                                            0298
         CH    @15,@CH00380                                        0298
         BNE   @RF00298                                            0298
@RT00298 DS    0H                                                  0299
*             DO;                                                  0299
*               IF GFCALLID=GFPARSE THEN/* ***** PARSE ID *****      */
         CLC   GFCALLID(2,GFPLPTR),@CH00364                        0300
         BNE   @RF00300                                            0300
*                 DO;               /* GFPARSEI DO/END GROUP         */
*                   IF GFRCODE=PARSER4×GFRCODE=PARSER20 THEN/* DON'T
*                                      ISSUE MESSAGE IF MESSAGE    0302
*                                      ALREADY ISSUED BY PARSE (=4,
*                                      NO PROMPT) OR ISSUED BY PARSE
*                                      VALIDITY CHECK EXIT (=20, EXIT
*                                      FOUND ERROR)                  */
         L     @15,GFRCODE(,GFPLPTR)                               0302
         CH    @15,@CH00054                                        0302
         BE    @RT00302                                            0302
         CH    @15,@CH00056                                        0302
         BNE   @RF00302                                            0302
@RT00302 DS    0H                                                  0303
*                     DO;                                          0303
*                       NOMSGBIT=ON;/* WILL BYPASS PUTLINE/WTP CODE  */
         OI    NOMSGBIT,B'01000000'                                0304
*                       RETCODE=GFRCODE;/* CALLER CAN TEST FOR PARSE
*                                      R.C.                          */
         MVC   RETCODE(4),GFRCODE(GFPLPTR)                         0305
*                     END;                                         0306
*                   ELSE            /* ISSUE MSG FOR ANY OTHER R.C.  */
*                     DO;           /* PARSEMSG DO/END GROUP         */
         B     @RC00302                                            0307
@RF00302 DS    0H                                                  0308
*                       CALL PROC19C;/* PARSE ERROR MESSAGE          */
         BAL   @14,PROC19C                                         0308
*                       MTADDR(3)=ADDR(INSRTC3A);/* INSERT 'PARSE'   */
         LA    @15,INSRTC3A                                        0309
         STCM  @15,7,MTADDR+8                                      0309
*                       MTLEN(3)=LENGTH(INSRTC3A);                 0310
*                                                                  0310
         MVI   MTLEN+8,X'05'                                       0310
*                       /*********************************************/
*                       /*                                           */
*                       /* INSERT MEANING OF PARSE ERROR CODE        */
*                       /*                                           */
*                       /*********************************************/
*                                                                  0311
*                       DO I=1 TO DIM(PARSERCS) WHILE PARSERCS(I)^=
*                             GFRCODE;/* SEARCH PARSERCS TABLE FOR 0311
*                                      MATCH WITH THE PARSE R.C.     */
         LA    I,1                                                 0311
@DL00311 SLR   @05,@05                                             0311
         IC    @05,PARSERCS-1(I)                                   0311
         C     @05,GFRCODE(,GFPLPTR)                               0311
         BE    @DC00311                                            0311
*                       END;        /* END THE SEARCH WHEN MATCH OR
*                                      I=7, WHICH IS THE 'UNDEFINED'
*                                      RETURN CODE ENTRY IN SRTNINST */
         AH    I,@CH00035                                          0312
         CH    I,@CH00102                                          0312
         BNH   @DL00311                                            0312
@DC00311 DS    0H                                                  0313
*                       MTINSRT(5)=SRTNINST(I);/* USE INDEX FROM   0313
*                                      PARSERCS TABLE TO PICK UP   0313
*                                      MESSAGE INSERT INFO FROM    0313
*                                      SRTNINST TABLE                */
         LR    @05,I                                               0313
         SLA   @05,2                                               0313
         L     @05,SRTNINST-4(@05)                                 0313
         ST    @05,MTINSRT+16                                      0313
*                     END;          /* END PARSEMSG DO/END GROUP     */
*                 END;              /* END GFPARSEI DO/END GROUP     */
*               ELSE                /* ***** PUTLINE ID *****        */
*                 CALL PUTLPROC;    /* SETS UP PUTLINE FAILURE     0316
*                                      MESSAGE                       */
         B     @RC00300                                            0316
@RF00300 BAL   @14,PUTLPROC                                        0316
*             END;                  /* CODE FOR SERVICE RTN ID       */
*           ELSE                    /* CONTINUE CHECKING ID TYPE     */
*             DO;                                                  0318
*                                                                  0318
         B     @RC00298                                            0318
@RF00298 DS    0H                                                  0319
*               /*****************************************************/
*               /*                                                   */
*               /* SET UP FOR SSREQ (SUBSYSTEM INTERFACE REQUEST)    */
*               /* FAILURE MESSAGE (19C OR 19E)                      */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0319
*               IF GFCALLID=GFSSREQ THEN/* ANALYZE SSREQ R.C. IN R.15
*                                      (GFRCODE)                     */
         CLC   GFCALLID(2,GFPLPTR),@CH00238                        0319
         BNE   @RF00319                                            0319
*                 DO;                                              0320
*                   CALL PROC19C;   /* DO COMMON INSERTS FOR THE   0321
*                                      MESSAGE                       */
         BAL   @14,PROC19C                                         0321
*                   MTHEXSW=ON;     /* CONVERT ERROR CODES TO      0322
*                                      PRINTABLE HEX, NOT PRINTABLE
*                                      DECIMAL                       */
*                                                                  0322
         OI    MTHEXSW,B'00010000'                                 0322
*                   /*************************************************/
*                   /*                                               */
*                   /* ANALYZE THE RETURN CODE FROM SSREQ            */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0323
*                   IF GFRCODE=SSRTOK THEN/* IF R15 = 0              */
         ICM   @15,15,GFRCODE(GFPLPTR)                             0323
         BNZ   @RF00323                                            0323
*                     DO;                                          0324
*                       MTADDR(5)=ADDR(INSTS0);/* INSERT 'HAD NO   0325
*                                      ERROR'                        */
         LA    @15,INSTS0                                          0325
         STCM  @15,7,MTADDR+16                                     0325
*                       MTLEN(5)=LENGTH(INSTS0);                   0326
         MVI   MTLEN+16,X'0C'                                      0326
*                     END;                                         0327
*                   ELSE            /* NOT MATCH R.C. YET            */
*                     IF GFRCODE=SSRTNSUP THEN/* IF R15 = 4          */
         B     @RC00323                                            0328
@RF00323 CLC   GFRCODE(4,GFPLPTR),@CF00054                         0328
         BNE   @RF00328                                            0328
*                       DO;                                        0329
*                         MSGID='19E';/* NEED THIS MESSAGE, SINCE  0330
*                                      WILL INSERT THE SUBSYSTEM   0330
*                                      FUNCTION REQUESTED            */
         MVI   MSGID+3,C' '                                        0330
         MVC   MSGID(3),@CC02229                                   0330
*                         MTLEN(4)=LENGTH(INSTSSYS);/* INSERT      0331
*                                      'SUBSYSTEM' ONLY              */
         MVI   MTLEN+12,X'09'                                      0331
*                         MTADDR(5)=ADDR(INSTS4A);/* INSERT 'DOES NOT
*                                      SUPPORT THIS FUNCTION       0332
*                                      (SSOBFUNC='                   */
         LA    @15,INSTS4A                                         0332
         STCM  @15,7,MTADDR+16                                     0332
*                         MTLEN(5)=LENGTH(INSTS4A);                0333
         MVI   MTLEN+16,X'29'                                      0333
*                         MTADDR(7)=ADDR(INSTS4B);/* INSERT ')'      */
         LA    @15,INSTS4B                                         0334
         STCM  @15,7,MTADDR+24                                     0334
*                         MTLEN(7)=LENGTH(INSTS4B);                0335
         MVI   MTLEN+24,X'01'                                      0335
*                       END;                                       0336
*                     ELSE          /* NOT MATCH R.C. YET            */
*                       IF GFRCODE=SSRTNTUP THEN/* IF R15 = 8        */
         B     @RC00328                                            0337
@RF00328 CLC   GFRCODE(4,GFPLPTR),@CF00044                         0337
         BNE   @RF00337                                            0337
*                         DO;                                      0338
*                           MTLEN(4)=LENGTH(INSTSSYS);/* INSERT    0339
*                                      'SUBSYSTEM' ONLY              */
         MVI   MTLEN+12,X'09'                                      0339
*                           MTADDR(5)=ADDR(INSTS8);/* INSERT 'IS NOT
*                                      ACTIVE, RETRY WHEN SUBSYSTEM
*                                      IS RUNNING'                   */
         LA    @15,INSTS8                                          0340
         STCM  @15,7,MTADDR+16                                     0340
*                           MTLEN(5)=LENGTH(INSTS8);               0341
         MVI   MTLEN+16,X'0D'                                      0341
*                         END;                                     0342
*                       ELSE        /* NOT MATCH R.C. YET            */
*                         IF GFRCODE=SSRTNOSS THEN/* IF R15 = 12     */
         B     @RC00337                                            0343
@RF00337 CLC   GFRCODE(4,GFPLPTR),@CF00034                         0343
         BNE   @RF00343                                            0343
*                           DO;                                    0344
*                             MTLEN(4)=LENGTH(INSTSSYS);/* INSERT  0345
*                                      'SUBSYSTEM' ONLY              */
         MVI   MTLEN+12,X'09'                                      0345
*                             MTADDR(5)=ADDR(INSTS12);/* INSERT 'DOES
*                                      NOT EXIST'                    */
         LA    @15,INSTS12                                         0346
         STCM  @15,7,MTADDR+16                                     0346
*                             MTLEN(5)=LENGTH(INSTS12);            0347
         MVI   MTLEN+16,X'0E'                                      0347
*                           END;                                   0348
*                         ELSE      /* NOT MATCH R.C. YET            */
*                           IF GFRCODE=SSRTDIST THEN/* IF R15 = 16   */
         B     @RC00343                                            0349
@RF00343 CLC   GFRCODE(4,GFPLPTR),@CF00223                         0349
         BNE   @RF00349                                            0349
*                             DO;                                  0350
*                               MSGID='19E';/* NEED THIS MESSAGE,  0351
*                                      SINCE WILL INSERT THE       0351
*                                      SUBSYSTEM FUNCTION REQUESTED  */
         MVI   MSGID+3,C' '                                        0351
         MVC   MSGID(3),@CC02229                                   0351
*                               MTADDR(5)=ADDR(INSTS16A);/* INSERT 0352
*                                      'COULD NOT COMPLETE'          */
         LA    @15,INSTS16A                                        0352
         STCM  @15,7,MTADDR+16                                     0352
*                               MTLEN(5)=LENGTH(INSTS16A);         0353
         MVI   MTLEN+16,X'12'                                      0353
*                               MTADDR(7)=ADDR(INSTS16B);/* INSERT 0354
*                                      'FUNCTION, DISASTROUS ERROR'  */
         LA    @15,INSTS16B                                        0354
         STCM  @15,7,MTADDR+24                                     0354
*                               MTLEN(7)=LENGTH(INSTS16B);         0355
         MVI   MTLEN+24,X'1A'                                      0355
*                             END;                                 0356
*                           ELSE    /* NOT MATCH R.C. YET            */
*                             IF GFRCODE=SSRTLERR THEN/* IF R15 = 20 */
         B     @RC00349                                            0357
@RF00349 CLC   GFRCODE(4,GFPLPTR),@CF00056                         0357
         BNE   @RF00357                                            0357
*                               DO;                                0358
*                                 MSGID='19E';/* NEED THIS MESSAGE,
*                                      SINCE WILL INSERT THE       0359
*                                      SUBSYSTEM FUNCTION REQUESTED  */
         MVI   MSGID+3,C' '                                        0359
         MVC   MSGID(3),@CC02229                                   0359
*                                 MTADDR(5)=ADDR(INSTS20A);/* INSERT
*                                      'FOUND A LOGICAL ERROR IN THE
*                                      SSOB C.B. OR THE'             */
         LA    @15,INSTS20A                                        0360
         STCM  @15,7,MTADDR+16                                     0360
*                                 MTLEN(5)=LENGTH(INSTS20A);       0361
         MVI   MTLEN+16,X'24'                                      0361
*                                 MTADDR(7)=ADDR(INSTS20B);/* INSERT
*                                      'FUNCTION EXTENSION'          */
         LA    @15,INSTS20B                                        0362
         STCM  @15,7,MTADDR+24                                     0362
*                                 MTLEN(7)=LENGTH(INSTS20B);       0363
         MVI   MTLEN+24,X'12'                                      0363
*                               END;                               0364
*                             ELSE  /* NOT MATCH R.C. YET            */
*                               DO;                                0365
         B     @RC00357                                            0365
@RF00357 DS    0H                                                  0366
*                                 MSGID='19E';/* NEED THIS MESSAGE,
*                                      SINCE WILL INSERT THE       0366
*                                      SUBSYSTEM FUNCTION REQUESTED  */
         MVI   MSGID+3,C' '                                        0366
         MVC   MSGID(3),@CC02229                                   0366
*                                 MTADDR(5)=ADDR(INSTSU);/* INSERT 0367
*                                      'RETURNED AN UNDEFINED CODE IN
*                                      REGISTER 15 FOR'              */
         LA    @15,INSTSU                                          0367
         STCM  @15,7,MTADDR+16                                     0367
*                                 MTLEN(5)=LENGTH(INSTSU);         0368
         MVI   MTLEN+16,X'1E'                                      0368
*                                 MTADDR(7)=ADDR(INSTS20B);/* INSERT
*                                      'FUNCTION'                    */
         LA    @15,INSTS20B                                        0369
         STCM  @15,7,MTADDR+24                                     0369
*                                 MTLEN(7)=LENGTH('FUNCTION');     0370
         MVI   MTLEN+24,X'08'                                      0370
*                               END;                               0371
*                                                                  0371
*                   /*************************************************/
*                   /*                                               */
*                   /* CHECK FOR NONZERO POINTER TO THE SSOB         */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0372
*                   IF BADCBBIT=OFF THEN                           0372
@RC00357 DS    0H                                                  0372
@RC00349 DS    0H                                                  0372
@RC00343 DS    0H                                                  0372
@RC00337 DS    0H                                                  0372
@RC00328 DS    0H                                                  0372
@RC00323 TM    BADCBBIT,B'00010000'                                0372
         BNZ   @RF00372                                            0372
*                     DO;                                          0373
*                       SSOBPTR=GFCBPTR;/* USE LOCAL POINTER TO SSOB
*                                      FOR EFFICIENCY                */
*                                                                  0374
         L     SSOBPTR,GFCBPTR(,GFPLPTR)                           0374
*                       /*********************************************/
*                       /*                                           */
*                       /* INSERT SUBSYSTEM NAME                     */
*                       /*                                           */
*                       /*********************************************/
*                                                                  0375
*                       IF SSOBSSIB^=ZERO THEN                     0375
         ICM   @03,15,SSOBSSIB(SSOBPTR)                            0375
         BZ    @RF00375                                            0375
*                         DO;                                      0376
*                           MTADDR(3)=ADDR(SSIBSSNM);              0377
         L     @03,SSIBPTR(,SSOBPTR)                               0377
         LA    @03,SSIBSSNM(,@03)                                  0377
         STCM  @03,7,MTADDR+8                                      0377
*                           MTLEN(3)=LENGTH(SSIBSSNM);             0378
         MVI   MTLEN+8,X'04'                                       0378
*                         END;                                     0379
*                                                                  0379
*                       /*********************************************/
*                       /*                                           */
*                       /* INSERT SUBSYSTEM FUNCTION, IF NEEDED FOR  */
*                       /* MESSAGE                                   */
*                       /*                                           */
*                       /*********************************************/
*                                                                  0380
*                       IF MSGID(1:3)='19E' THEN                   0380
@RF00375 CLC   MSGID(3),@CC02229                                   0380
         BNE   @RF00380                                            0380
*                         DO;                                      0381
*                           IF SSOBFUNC>ZERO&SSOBFUNC<=DIM(TSSOBFN)
*                             THEN  /* INSERT FUNCTION DESCRIPTION IF
*                                      HAVE ENTRY FOR IT IN TSSOBFN  */
         LH    @03,SSOBFUNC(,SSOBPTR)                              0382
         LTR   @03,@03                                             0382
         BNP   @RF00382                                            0382
         CH    @03,@CH00364                                        0382
         BH    @RF00382                                            0382
*                             MTINSRT(6)=TSSOBFN(SSOBFUNC);/* USE  0383
*                                      SSOBFUNC AS INDEX INTO TABLE
*                                      WITH MESSAGE INSERT INFO      */
         SLA   @03,2                                               0383
         L     @03,TSSOBFN-4(@03)                                  0383
         ST    @03,MTINSRT+20                                      0383
*                           ELSE    /* IF NO MATCH FOR FUNCTION      */
*                             DO;                                  0384
         B     @RC00382                                            0384
@RF00382 DS    0H                                                  0385
*                               MTADDR(6)=ADDR(SSOBFUNC);/* JUST   0385
*                                      INSERT THE FUNCTION CODE      */
         LA    @03,SSOBFUNC(,SSOBPTR)                              0385
         STCM  @03,7,MTADDR+20                                     0385
*                               MTLEN(6)=LENGTH(SSOBFUNC);         0386
         MVI   MTLEN+20,X'02'                                      0386
*                               MTHIGHL(6)=ON;                     0387
         OI    MTHIGHL+20,B'10000000'                              0387
*                             END;                                 0388
*                         END;                                     0389
*                     END;          /* END CODE FOR GOOD CB POINTER  */
*                 END;              /* END CODE FOR GFCALLID=GFSSREQ */
*                                                                  0392
*/********************************************************************/
*/*                                                                  */
*/*  SET UP FOR ABEND MESSAGE (19D)                                  */
*/*                                                                  */
*/*      ABEND CODE FORMAT (FOR GFRCODE)                             */
*/*      ***** **** ******                                           */
*/*                                                                  */
*/*      .------------------------------------------.                */
*/*      × FUNCTION × SYSTEM        × USER          ×                */
*/*      ×   BITS   × COMPLETION    × COMPLETION    ×                */
*/*      ×   0 - 7  × CODE   8 - 19 × CODE  20 - 31 ×                */
*/*      '------------------------------------------'                */
*/*         D    D     D    D    D     D    D    D    = 8 DIGITS     */
*/*                   PACKED,       HEXADECIMAL        (FROM MACRO   */
*/*                   UNSIGNED,                         SERVICES SRL)*/
*/*                   DECIMAL                                        */
*/*                   (REALLY HEX)                                   */
*/*                                                                  */
*/*      EXAMPLES:  800C1000  =  SYSTEM 0C1 ABEND                    */
*/*                 800001FF  =  USER 1FF ABEND                      */
*/*                                                                  */
*/********************************************************************/
*                                                                  0392
*               ELSE                                               0392
*                 DO;                                              0392
         B     @RC00319                                            0392
@RF00319 DS    0H                                                  0393
*                   IF GFCALLID=GFABEND THEN/* CALLER WANTS ABEND MSG*/
         CLC   GFCALLID(2,GFPLPTR),@CH00051                        0393
         BNE   @RF00393                                            0393
*                     DO;                                          0394
*                       MSGID='19D';                               0395
         MVI   MSGID+3,C' '                                        0395
         MVC   MSGID(3),@CC02231                                   0395
*                       MTHEXSW=ON; /* CONVERT ABEND CODE TO       0396
*                                      PRINTABLE HEX, NOT PRINTABLE
*                                      DECIMAL                       */
         OI    MTHEXSW,B'00010000'                                 0396
*                       MTINSRT(1)=SAVEPGMN;/* GET COMMAND         0397
*                                      NAME/PROGRAM NAME INSERT FOR
*                                      ERROR MESSAGE                 */
         ST    SAVEPGMN,MTINSRT                                    0397
*                       MTADDR(3)=ADDR(ABNDCODE);/* WILL PLACE CODE
*                                      IN ABNDCODE                   */
         LA    @15,ABNDCODE                                        0398
         STCM  @15,7,MTADDR+8                                      0398
*                       MTLEN(3)=LENGTH(ABNDCODE);                 0399
         MVI   MTLEN+8,X'03'                                       0399
*                       RFY                                        0400
*                        (R2,                                      0400
*                         R3) RSTD;                                0400
*                       R2=GFRCODE;                                0401
         L     R2,GFRCODE(,GFPLPTR)                                0401
*                       GEN;                                       0402
*                                                                  0402
*                                   /* <COMMENT OUT APOSTROPHES IN BAL>
         SRDL  R2,12                SHIFT USER CODE (3 DIGITS) INTO R3
         SRL   R3,20                RIGHT-JUSTIFY THE DIGITS
*                       /*********************************************/
*                       /*                                           */
*                       /* HAVE USER CODE IF USER DIGITS ARE NONZERO */
*                       /*                                           */
*                       /*********************************************/
*                                                                  0403
*                       IF R3^=ZERO THEN                           0403
         LTR   R3,R3                                               0403
         BZ    @RF00403                                            0403
*                         DO;                                      0404
*                           R2=R3;  /* WILL CONVERT THE THREE-DIGIT
*                                      CODE IN R2                    */
         LR    R2,R3                                               0405
*                           MTADDR(2)=ADDR(USERWORD);/* INSERT 'USER'*/
         LA    @15,USERWORD                                        0406
         STCM  @15,7,MTADDR+4                                      0406
*                           MTLEN(2)=LENGTH(USERWORD);             0407
         MVI   MTLEN+4,X'04'                                       0407
*                         END;                                     0408
*                                                                  0408
*                       /*********************************************/
*                       /*                                           */
*                       /* IF ZERO USER CODE, MUST BE SYSTEM CODE    */
*                       /*                                           */
*                       /*********************************************/
*                                                                  0409
*                       ELSE                                       0409
*                         DO;       /* INSERT 'SYSTEM'               */
         B     @RC00403                                            0409
@RF00403 DS    0H                                                  0410
*                           MTADDR(2)=ADDR(SYSTWORD);              0410
         LA    @15,SYSTWORD                                        0410
         STCM  @15,7,MTADDR+4                                      0410
*                           MTLEN(2)=LENGTH(SYSTWORD);             0411
         MVI   MTLEN+4,X'06'                                       0411
*                         END;                                     0412
*                                                                  0412
*                       /*********************************************/
*                       /*                                           */
*                       /* CONVERT THE THREE-DIGIT CODE TO PRINTABLE */
*                       /* (80A -> F8F0C1='80A')                     */
*                       /*                                           */
*                       /*********************************************/
*                                                                  0413
*                       DO I=3 TO 1 BY-1;                          0413
@RC00403 LA    I,3                                                 0413
@DL00413 DS    0H                                                  0414
*                         GEN;                                     0414
*                                   /* <COMMENT OUT APOSTROPHES IN BAL>
         SRDL  R2,4                 MOVE ONE DIGIT OF CODE INTO R3
         SRL   R3,28                RIGHT-JUSTIFY THE DIGIT IN R3
*                         IF R3<HEXTEN THEN/* CONVERT DIGIT = 0 - 9
*                                      TO PRINTABLE (0 -> F0, ETC.)  */
         CH    R3,@CH00049                                         0415
         BNL   @RF00415                                            0415
*                           ABDIGIT(I)=R3+FOXZERO;                 0416
         LA    @05,240                                             0416
         ALR   @05,R3                                              0416
         STC   @05,ABDIGIT-1(I)                                    0416
*                         ELSE      /* CONVERT DIGIT = HEX A - F TO
*                                      PRINTABLE (A -> C1, ETC.)     */
*                           ABDIGIT(I)=R3+'B7'X;                   0417
         B     @RC00415                                            0417
@RF00415 LA    @05,183                                             0417
         ALR   @05,R3                                              0417
         STC   @05,ABDIGIT-1(I)                                    0417
*                       END;        /* END OF DO LOOP                */
@RC00415 BCTR  I,0                                                 0418
         LTR   I,I                                                 0418
         BP    @DL00413                                            0418
*                       RFY                                        0419
*                        (R2,                                      0419
*                         R3) UNRSTD;                              0419
*                     END;          /* END ABEND CODE DO/END         */
*                   ELSE            /* MUST BE VSAM CALLER ID        */
*                     VSAMBIT=ON;                                  0421
         B     @RC00393                                            0421
@RF00393 OI    VSAMBIT,B'10000000'                                 0421
*                 END;              /* END CODE FOR ID NOT GFPARSE OR
*                                      GFSSREQ                       */
@RC00393 DS    0H                                                  0423
*             END;                  /* END CODE FOR ID NOT GFPARSE   */
@RC00319 DS    0H                                                  0424
*                                                                  0424
*           /*********************************************************/
*           /*                                                       */
*           /* SET UP FOR VSAM FAILURE MESSAGE (19A)                 */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0424
*           IF VSAMBIT=ON THEN                                     0424
@RC00298 TM    VSAMBIT,B'10000000'                                 0424
         BNO   @RF00424                                            0424
*             DO;                   /* VSAMFAIL DO/END GROUP         */
*               MSGID='19A';        /* USE VSAM SKELETON MESSAGE     */
         MVI   MSGID+3,C' '                                        0426
         MVC   MSGID(3),@CC02234                                   0426
*               MTHEXSW=ON;         /* CONVERT ERROR CODES TO      0427
*                                      PRINTABLE HEX, NOT PRINTABLE
*                                      DECIMAL                       */
         OI    MTHEXSW,B'00010000'                                 0427
*               MTADDR(3)=ADDR(GFRCODE);/* CODE FROM REGISTER 15     */
         LA    @15,GFRCODE(,GFPLPTR)                               0428
         STCM  @15,7,MTADDR+8                                      0428
*               MTLEN(3)=LENGTH(GFRCODE);                          0429
         MVI   MTLEN+8,X'04'                                       0429
*               MTHIGHL(3)=ON;                                     0430
         OI    MTHIGHL+8,B'10000000'                               0430
*               MTLEN(8)=LENGTH(VFCALLID(GFCALLID));/* USE INPUT   0431
*                                      CALLER ID TO INDEX INTO TABLE
*                                      WITH DC'S FOR MACRO NAMES - 0431
*                                      THIS IS INSERT WITH NAME OF 0431
*                                      FAILING VSAM MACRO            */
         MVI   MTLEN+28,X'06'                                      0431
*               MTADDR(8)=ADDR(VFCALLID(GFCALLID));                0432
*                                                                  0432
         LA    @15,6                                               0432
         LH    @14,GFCALLID(,GFPLPTR)                              0432
         LR    @01,@14                                             0432
         MR    @00,@15                                             0432
         LA    @05,VFCALLID-6(@01)                                 0432
         STCM  @05,7,MTADDR+28                                     0432
*               /*****************************************************/
*               /*                                                   */
*               /* CONTINUE WITH INSERTIONS IF HAVE A POINTER TO ACB */
*               /* OR RPL CONTROL BLOCK                              */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0433
*               IF BADCBBIT=OFF THEN                               0433
         TM    BADCBBIT,B'00010000'                                0433
         BNZ   @RF00433                                            0433
*                 DO;                                              0434
*                   RFY                                            0435
*                     IFGACB BASED(ACBPTR);                        0435
*                                                                  0435
*                   /*************************************************/
*                   /*                                               */
*                   /* SET UP ERROR MESSAGE FOR VSAM OPEN OR CLOSE   */
*                   /* FAILURE                                       */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0436
*                   IF GFCALLID=GFOPEN×GFCALLID=GFCLOSE THEN/* CODE
*                                      TO HANDLE OPEN OR CLOSE ERROR
*                                      MESSAGE                       */
         CR    @14,@15                                             0436
         BE    @RT00436                                            0436
         CH    @14,@CH00681                                        0436
         BNE   @RF00436                                            0436
@RT00436 DS    0H                                                  0437
*                     DO;           /* OPENCLOS DO/END GROUP         */
*                       ACBPTR=GFCBPTR;/* USE LOCAL POINTER TO ACB   */
         L     ACBPTR,GFCBPTR(,GFPLPTR)                            0438
*                       MTLEN(1)=LENGTH(INSRTA1A);/* INSERT 'ACBERFL'
*                                      TEXT                          */
         MVI   MTLEN,X'07'                                         0439
*                       MTADDR(1)=ADDR(INSRTA1A);                  0440
         LA    @03,INSRTA1A                                        0440
         STCM  @03,7,MTADDR                                        0440
*                       MTLEN(2)=LACBERFL;/* INSERT ERROR CODE FROM
*                                      ACB                           */
         MVI   MTLEN+4,X'01'                                       0441
*                       MTHIGHL(2)=ON;/* TELL MESSAGE RTN TO CONVERT
*                                      TO PRINTABLE                  */
         OI    MTHIGHL+4,B'10000000'                               0442
*                       MTADDR(2)=ADDR(ACBERFLG);/*          @ZA30301*/
*                                                                  0443
         LA    @03,ACBERFLG(,ACBPTR)                               0443
         STCM  @03,7,MTADDR+4                                      0443
*                       /*********************************************/
*                       /*                                           */
*                       /* INSERT MEANING OF OPEN ERROR CODE         */
*                       /*                                           */
*                       /*********************************************/
*                                                                  0444
*                       IF GFCALLID=GFOPEN THEN                    0444
         CLC   GFCALLID(2,GFPLPTR),@CH00112                        0444
         BNE   @RF00444                                            0444
*                         DO;                                      0445
*                           DO I=1 TO DIM(VSAMOPEN) WHILE ACBERFLG^=
*                                 VSAMOPEN(I);/* SEE IF THE OPEN   0446
*                                      ERROR CODE HAS A DEFINED    0446
*                                      MEANING               @ZA30301*/
         LA    I,1                                                 0446
@DL00446 SLR   @05,@05                                             0446
         IC    @05,ACBERFLG(,ACBPTR)                               0446
         SLR   @03,@03                                             0446
         IC    @03,VSAMOPEN-1(I)                                   0446
         CR    @05,@03                                             0446
         BE    @DC00446                                            0446
*                           END;                                   0447
         AH    I,@CH00035                                          0447
         CH    I,@CH00282                                          0447
         BNH   @DL00446                                            0447
@DC00446 DS    0H                                                  0448
*                           IF I>DIM(VSAMOPEN)×^(GFRCODE=VSAMOPN4× 0448
*                               GFRCODE=VSAMOPN8×GFRCODE=VSAMOPNC×(
*                               GFRCODE=ACBNOERR&ACBERFLG=ZERO)) THEN
         CH    I,@CH00282                                          0448
         BH    @RT00448                                            0448
         L     @05,GFRCODE(,GFPLPTR)                               0448
         CH    @05,@CH00054                                        0448
         BE    @RF00448                                            0448
         CH    @05,@CH00044                                        0448
         BE    @RF00448                                            0448
         CH    @05,@CH00034                                        0448
         BE    @RF00448                                            0448
         LTR   @05,@05                                             0448
         BNZ   @RT00448                                            0448
         CLI   ACBERFLG(ACBPTR),0                                  0448
         BE    @RF00448                                            0448
@RT00448 DS    0H                                                  0449
*                                   /*                       @ZA30301
*                                      CHECK FOR UNIDENTIFIED RETURN
*                                      CODE                          */
*                             DO;   /* INSERT 'UNDEFINED ERROR'      */
*                               MTLEN(9)=LENGTH(INSERTU);          0450
         MVI   MTLEN+32,X'0F'                                      0450
*                               MTADDR(9)=ADDR(INSERTU);           0451
         LA    @03,INSERTU                                         0451
         STCM  @03,7,MTADDR+32                                     0451
*                             END;                                 0452
*                           ELSE    /* HAVE IDENTIFIED RETURN CODE   */
*                             DO;   /* OPENRCOK DO/END GROUP         */
         B     @RC00448                                            0453
@RF00448 DS    0H                                                  0454
*                               IF GFRCODE=VSAMOPN8&ACBERFLG=ZERO THEN
         CLC   GFRCODE(4,GFPLPTR),@CF00044                         0454
         BNE   @RF00454                                            0454
         CLI   ACBERFLG(ACBPTR),0                                  0454
         BNE   @RF00454                                            0454
*                                   /*                       @ZA30301
*                                      INSERT SECOND POSSIBLE MEANING
*                                      FOR ACBERFLG=0 (TEXT IN TABLE
*                                      IS FOR R15=0)                 */
*                                 DO;                              0455
*                                   MTLEN(9)=LENGTH(INSTABAD);     0456
         MVI   MTLEN+32,X'1E'                                      0456
*                                   MTADDR(9)=ADDR(INSTABAD);      0457
         LA    @03,INSTABAD                                        0457
         STCM  @03,7,MTADDR+32                                     0457
*                                 END;                             0458
*                               ELSE/* INSERT ERROR TEXT FROM TABLE  */
*                                 DO;                              0459
         B     @RC00454                                            0459
@RF00454 DS    0H                                                  0460
*                                   MTLEN(9)=LENGTH(VSAMERRS(I));/*
*                                      INSERT MEANING OF ERROR CODE
*                                      (USE I VALUE FOUND IN FIRST 0460
*                                      LOOP THRU TABLE OF ERROR CODES
*                                      TO INDEX INTO SECOND TABLE  0460
*                                      WITH MEANINGS)                */
         MVI   MTLEN+32,X'2F'                                      0460
*                                   MTADDR(9)=ADDR(VSAMERRS(I));   0461
         LR    @05,I                                               0461
         MH    @05,@CH00476                                        0461
         LA    @05,VSAMERRS-47(@05)                                0461
         STCM  @05,7,MTADDR+32                                     0461
*                                 END;                             0462
*                             END;  /* OPENRCOK DO/END GROUP         */
*                         END;                                     0464
*                                                                  0465
*                       /*********************************************/
*                       /*                                           */
*                       /* INSERT MEANING OF CLOSE ERROR CODE        */
*                       /*                                           */
*                       /*********************************************/
*                                                                  0465
*                       ELSE                                       0465
*                         DO;                                      0465
         B     @RC00444                                            0465
@RF00444 DS    0H                                                  0466
*                           DO I=1 TO DIM(VSAMCLOS) WHILE ACBERFLG^=
*                                 VSAMCLOS(I);/* SEE IF THE CLOSE  0466
*                                      ERROR CODE HAS A DEFINED    0466
*                                      MEANING               @ZA30301*/
         LA    I,1                                                 0466
@DL00466 SLR   @05,@05                                             0466
         IC    @05,ACBERFLG(,ACBPTR)                               0466
         SLR   @03,@03                                             0466
         IC    @03,VSAMCLOS-1(I)                                   0466
         CR    @05,@03                                             0466
         BE    @DC00466                                            0466
*                           END;                                   0467
         AH    I,@CH00035                                          0467
         CH    I,@CH00102                                          0467
         BNH   @DL00466                                            0467
@DC00466 DS    0H                                                  0468
*                           IF I>DIM(VSAMCLOS)×^(GFRCODE=VSAMCLS4×(
*                               GFRCODE=ACBNOERR&ACBERFLG=ZERO)) THEN
         CH    I,@CH00102                                          0468
         BH    @RT00468                                            0468
         L     @05,GFRCODE(,GFPLPTR)                               0468
         CH    @05,@CH00054                                        0468
         BE    @RF00468                                            0468
         LTR   @05,@05                                             0468
         BNZ   @RT00468                                            0468
         CLI   ACBERFLG(ACBPTR),0                                  0468
         BE    @RF00468                                            0468
@RT00468 DS    0H                                                  0469
*                                   /*                       @ZA30301
*                                      IF HAVE UNDEFINED ERROR,    0469
*                                      INSERT THAT TEXT              */
*                             DO;                                  0469
*                               MTLEN(9)=LENGTH(INSERTU);          0470
         MVI   MTLEN+32,X'0F'                                      0470
*                               MTADDR(9)=ADDR(INSERTU);           0471
         LA    @03,INSERTU                                         0471
         STCM  @03,7,MTADDR+32                                     0471
*                             END;                                 0472
*                           ELSE    /* HAVE IDENTIFIED RETURN CODE   */
*                             DO;                                  0473
         B     @RC00468                                            0473
@RF00468 DS    0H                                                  0474
*                               I=VSAMCMI(I);/* VSAMCMI (VSAM CLOSE
*                                      MEANING INDEX) TABLE HAS    0474
*                                      INDEXES INTO VSAMERRS TABLE   */
         SLR   @05,@05                                             0474
         IC    @05,VSAMCMI-1(I)                                    0474
         LR    I,@05                                               0474
*                               MTLEN(9)=LENGTH(VSAMERRS(I));/*    0475
*                                      INSERT MEANING OF ERROR CODE
*                                      (USE I VALUE FOUND IN FIRST 0475
*                                      LOOP THRU TABLE OF ERROR CODES
*                                      TO INDEX INTO SECOND TABLE  0475
*                                      WITH INDEX INTO THIRD TABLE 0475
*                                      WITH MEANINGS)                */
         MVI   MTLEN+32,X'2F'                                      0475
*                               MTADDR(9)=ADDR(VSAMERRS(I));       0476
         LR    @05,I                                               0476
         MH    @05,@CH00476                                        0476
         LA    @05,VSAMERRS-47(@05)                                0476
         STCM  @05,7,MTADDR+32                                     0476
*                             END;                                 0477
*                         END;                                     0478
*                     END;          /* END OPENCLOS DO/END GROUP     */
*                                                                  0480
*                   /*************************************************/
*                   /*                                               */
*                   /* SET UP ERROR MESSAGE FOR VSAM I/O MACRO       */
*                   /* FAILURE                                       */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0480
*                   ELSE            /* FUNCTION NOT VSAM OPEN OR   0480
*                                      CLOSE                         */
*                     DO;           /* IOMAC DO/END GROUP            */
         B     @RC00436                                            0480
@RF00436 DS    0H                                                  0481
*                       RFY                                        0481
*                         IFGRPL BASED(RPLPTR);                    0481
*                       RPLPTR=GFCBPTR;/* USE LOCAL POINTER TO RPL   */
         L     RPLPTR,GFCBPTR(,GFPLPTR)                            0482
*                       ACBPTR=RPLDACB;/* LOCAL POINTER TO ACB       */
         L     ACBPTR,RPLDACB(,RPLPTR)                             0483
*                       MTLEN(1)=LENGTH(INSRTA1B);/* INSERT        0484
*                                      'RPLERRCD' TEXT               */
         MVI   MTLEN,X'08'                                         0484
*                       MTADDR(1)=ADDR(INSRTA1B);                  0485
         LA    @03,INSRTA1B                                        0485
         STCM  @03,7,MTADDR                                        0485
*                       MTLEN(2)=LENGTH(RPLERRCD);/* INSERT ERROR  0486
*                                      CODE                          */
         MVI   MTLEN+4,X'01'                                       0486
*                       MTHIGHL(2)=ON;/* TELL MSG RTN TO CONVERT TO
*                                      PRINTABLE                     */
         OI    MTHIGHL+4,B'10000000'                               0487
*                       MTADDR(2)=ADDR(RPLERRCD);                  0488
*                                                                  0488
         LA    @03,RPLERRCD(,RPLPTR)                               0488
         STCM  @03,7,MTADDR+4                                      0488
*                       /*********************************************/
*                       /*                                           */
*                       /* INSERT MEANING OF THE ERROR CODE (USE     */
*                       /* REGISTER 15 TO DETERMINE THE ERROR TYPE)  */
*                       /*                                           */
*                       /*********************************************/
*                                                                  0489
*                       IF GFRCODE='00'X&RPLERRCD='00'X THEN/* INSERT
*                                      MEANING = 'NO ERROR'          */
         ICM   @03,15,GFRCODE(GFPLPTR)                             0489
         BNZ   @RF00489                                            0489
         CLI   RPLERRCD(RPLPTR),0                                  0489
         BNE   @RF00489                                            0489
*                         DO;                                      0490
*                           MTLEN(9)=LENGTH(VSAMERRS(1));          0491
         MVI   MTLEN+32,X'2F'                                      0491
*                           MTADDR(9)=ADDR(VSAMERRS(1));           0492
         LA    @03,VSAMERRS                                        0492
         STCM  @03,7,MTADDR+32                                     0492
*                         END;                                     0493
*                       ELSE        /* DIDN'T MATCH GFRCODE VALUE YET*/
*                         IF GFRCODE='00'X&RPLERRCD=RPLDVOL THEN/* 0494
*                                      INSERT MEANING = 'NO ERROR -
*                                      MOUNTED VOLUME OR ALLOCATED 0494
*                                      MORE SPACE'                   */
         B     @RC00489                                            0494
@RF00489 ICM   @03,15,GFRCODE(GFPLPTR)                             0494
         BNZ   @RF00494                                            0494
         CLI   RPLERRCD(RPLPTR),4                                  0494
         BNE   @RF00494                                            0494
*                           DO;                                    0495
*                             MTLEN(9)=LENGTH(INSTDVOL);           0496
         MVI   MTLEN+32,X'31'                                      0496
*                             MTADDR(9)=ADDR(INSTDVOL);            0497
         LA    @03,INSTDVOL                                        0497
         STCM  @03,7,MTADDR+32                                     0497
*                           END;                                   0498
*                         ELSE      /* DIDN'T MATCH GFRCODE VALUE YET*/
*                           IF GFRCODE='04'X THEN/* INSERT MEANING =
*                                      'RPL IN USE OR ACB NOT OPEN'  */
         B     @RC00494                                            0499
@RF00494 CLC   GFRCODE(4,GFPLPTR),@CF00423                         0499
         BNE   @RF00499                                            0499
*                             DO;                                  0500
*                               MTLEN(9)=LENGTH(INSTRBAD);         0501
         MVI   MTLEN+32,X'1A'                                      0501
*                               MTADDR(9)=ADDR(INSTRBAD);          0502
         LA    @03,INSTRBAD                                        0502
         STCM  @03,7,MTADDR+32                                     0502
*                             END;                                 0503
*                                                                  0504
*                       /*********************************************/
*                       /*                                           */
*                       /* LOGICAL ERROR IN THE I/O MACRO            */
*                       /*                                           */
*                       /*********************************************/
*                                                                  0504
*                           ELSE    /* DIDN'T MATCH GFRCODE VALUE YET*/
*                             IF GFRCODE='08'X THEN/* INSERT MEANING
*                                      FOR LOGICAL ERROR CODE        */
         B     @RC00499                                            0504
@RF00499 CLC   GFRCODE(4,GFPLPTR),@CF02237                         0504
         BNE   @RF00504                                            0504
*                               DO;                                0505
*                                 DO I=1 TO DIM(VSAMIO8) WHILE RPLERRCD
*                                       ^=VSAMIO8(I);/* SEE IF THE 0506
*                                      LOGICAL ERROR CODE HAS A    0506
*                                      DEFINED MEANING               */
         LA    I,1                                                 0506
@DL00506 SLR   @05,@05                                             0506
         IC    @05,RPLERRCD(,RPLPTR)                               0506
         SLR   @03,@03                                             0506
         IC    @03,VSAMIO8-1(I)                                    0506
         CR    @05,@03                                             0506
         BE    @DC00506                                            0506
*                                 END;                             0507
         AH    I,@CH00035                                          0507
         CH    I,@CH00229                                          0507
         BNH   @DL00506                                            0507
@DC00506 DS    0H                                                  0508
*                                 IF I>DIM(VSAMIO8) THEN/* IF HAVE AN
*                                      UNIDENTIFIED RETURN CODE,   0508
*                                      INSERT THAT TEXT              */
         CH    I,@CH00229                                          0508
         BNH   @RF00508                                            0508
*                                   DO;                            0509
*                                    MTLEN(9)=LENGTH(INSERTU);     0510
         MVI   MTLEN+32,X'0F'                                      0510
*                                    MTADDR(9)=ADDR(INSERTU);      0511
         LA    @03,INSERTU                                         0511
         STCM  @03,7,MTADDR+32                                     0511
*                                   END;                           0512
*                                 ELSE/* HAVE IDENTIFIED RETURN CODE */
*                                   DO;                            0513
         B     @RC00508                                            0513
@RF00508 DS    0H                                                  0514
*                                    MTLEN(9)=LENGTH(VSAMTXT8(I));/*
*                                      INSERT MEANING OF ERROR CODE
*                                      (USE OFFSET FOUND IN FIRST  0514
*                                      LOOP THRU TABLE OF ERROR CODES
*                                      TO INDEX INTO SECOND TABLE  0514
*                                      WITH MEANINGS                 */
         MVI   MTLEN+32,X'33'                                      0514
*                                    MTADDR(9)=ADDR(VSAMTXT8(I));  0515
         LR    @05,I                                               0515
         MH    @05,@CH00565                                        0515
         LA    @05,VSAMTXT8-51(@05)                                0515
         STCM  @05,7,MTADDR+32                                     0515
*                                   END;                           0516
*                               END;                               0517
*                                                                  0517
*                       /*********************************************/
*                       /*                                           */
*                       /* PHYSICAL (I/O) ERROR IN THE I/O MACRO     */
*                       /*                                           */
*                       /*********************************************/
*                                                                  0518
*                             ELSE  /* DIDN'T MATCH GFRCODE VALUE YET*/
*                               IF GFRCODE='0C'X THEN/* INSERT     0518
*                                      MEANING FOR PHYSICAL ERROR  0518
*                                      CODE                          */
         B     @RC00504                                            0518
@RF00504 CLC   GFRCODE(4,GFPLPTR),@CF02238                         0518
         BNE   @RF00518                                            0518
*                                 DO;                              0519
*                                   DO I=1 TO DIM(VSAMIOC) WHILE   0520
*                                        RPLERRCD^=VSAMIOC(I);/* SEE
*                                      IF THE PHYSICAL ERROR CODE HAS
*                                      A DEFINED MEANING             */
         LA    I,1                                                 0520
@DL00520 SLR   @05,@05                                             0520
         IC    @05,RPLERRCD(,RPLPTR)                               0520
         SLR   @03,@03                                             0520
         IC    @03,VSAMIOC-1(I)                                    0520
         CR    @05,@03                                             0520
         BE    @DC00520                                            0520
*                                   END;                           0521
         AH    I,@CH00035                                          0521
         CH    I,@CH00112                                          0521
         BNH   @DL00520                                            0521
@DC00520 DS    0H                                                  0522
*                                   IF I>DIM(VSAMIOC) THEN/* IF HAVE
*                                      AN UNIDENTIFIED RETURN CODE,
*                                      INSERT THAT TEXT              */
         CH    I,@CH00112                                          0522
         BNH   @RF00522                                            0522
*                                    DO;                           0523
*                                     MTLEN(9)=LENGTH(INSERTU);    0524
         MVI   MTLEN+32,X'0F'                                      0524
*                                     MTADDR(9)=ADDR(INSERTU);     0525
         LA    @03,INSERTU                                         0525
         STCM  @03,7,MTADDR+32                                     0525
*                                    END;                          0526
*                                   ELSE/* HAVE IDENTIFIED RETURN  0527
*                                      CODE                          */
*                                    DO;                           0527
         B     @RC00522                                            0527
@RF00522 DS    0H                                                  0528
*                                     MTLEN(9)=LENGTH(VSAMTXTC(I));/*
*                                      INSERT MEANING OF ERROR CODE
*                                      (USE OFFSET FOUND IN FIRST  0528
*                                      LOOP THRU TABLE OF ERROR CODES
*                                      TO INDEX INTO SECOND TABLE  0528
*                                      WITH MEANINGS                 */
         MVI   MTLEN+32,X'23'                                      0528
*                                     MTADDR(9)=ADDR(VSAMTXTC(I)); 0529
*                                                                  0529
         LR    @05,I                                               0529
         MH    @05,@CH00539                                        0529
         LA    @05,VSAMTXTC-35(@05)                                0529
         STCM  @05,7,MTADDR+32                                     0529
*                                     /*******************************/
*                                     /*                             */
*                                     /* INSERT SYNADAF-TYPE INFO, IF*/
*                                     /* SUPPLIED                    */
*                                     /*                             */
*                                     /*******************************/
*                                                                  0530
*                                     IF RPLEMLEN^=ZERO&RPLERMSA^=ZERO&
*                                         VSAMMSGL^=ZERO THEN/* CHECK
*                                      FOR USER-SUPPLIED FEEDBACK  0530
*                                      AREA - IF ONE IS SUPPLIED AND
*                                      THERE IS A PHYSICAL (I/O)   0530
*                                      ERROR VSAM WILL PLACE       0530
*                                      'SYNADAF-LIKE' DATA IN THE  0530
*                                      AREA (NOTE THAT THE VSAM/JOB
*                                      ENTRY SUBSYSTEM INTERFACE MAY
*                                      NOT USE IT)                   */
         ICM   @03,3,RPLEMLEN(RPLPTR)                              0530
         BZ    @RF00530                                            0530
         SLR   @03,@03                                             0530
         L     @15,RPLERMSA(,RPLPTR)                               0530
         CR    @15,@03                                             0530
         BE    @RF00530                                            0530
         LH    @14,VSAMMSGL(,@15)                                  0530
         CR    @14,@03                                             0530
         BE    @RF00530                                            0530
*                                      DO;/* 'PHYSICAL ERROR TEXT'   */
*                                       MTLEN(1)=LENGTH(INSRTA1C); 0532
         MVI   MTLEN,X'13'                                         0532
*                                       MTADDR(1)=ADDR(INSRTA1C);  0533
         LA    @03,INSRTA1C                                        0533
         STCM  @03,7,MTADDR                                        0533
*                                       MTLEN(2)=VSAMMSGL-LENGTH(  0534
*                                           VSAMMHDR);             0534
         SL    @14,@CF00034                                        0534
         STC   @14,MTLEN+4                                         0534
*                                       MTADDR(2)=ADDR(VSAMTEXT);  0535
         LA    @03,VSAMTEXT(,@15)                                  0535
         STCM  @03,7,MTADDR+4                                      0535
*                                      END;/* = PHYSICAL ERROR MSG   */
*                                    END;/* END IDENTIFIED RPLERRCD  */
*                                 END;/* END PHYSICAL ERROR          */
*                                                                  0538
*                       /*********************************************/
*                       /*                                           */
*                       /* INSERT 'UNDEFINED ERROR' IF REGISTER 15   */
*                       /* HAS UNUSUAL VALUE FOR I/O MACRO           */
*                       /*                                           */
*                       /*********************************************/
*                                                                  0539
*                               ELSE                               0539
*                                 DO;                              0539
         B     @RC00518                                            0539
@RF00518 DS    0H                                                  0540
*                                   MTLEN(9)=LENGTH(INSERTU);      0540
         MVI   MTLEN+32,X'0F'                                      0540
*                                   MTADDR(9)=ADDR(INSERTU);       0541
         LA    @03,INSERTU                                         0541
         STCM  @03,7,MTADDR+32                                     0541
*                                 END;                             0542
*                     END;          /* END IOMAC DO/END GROUP        */
@RC00518 DS    0H                                                  0543
@RC00504 DS    0H                                                  0543
@RC00499 DS    0H                                                  0543
@RC00494 DS    0H                                                  0543
@RC00489 DS    0H                                                  0544
*                                                                  0544
*                   /*************************************************/
*                   /*                                               */
*                   /* INSERT DDNAME INTO VSAM MESSAGE               */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0544
*                   IF GFDSNLEN=ZERO×GFDSNP=ZERO THEN/* INSERT DDNAME
*                                      IF DSNAME NOT SUPPLIED BY   0544
*                                      CALLER                        */
@RC00436 SLR   @03,@03                                             0544
         CH    @03,GFDSNLEN(,GFPLPTR)                              0544
         BE    @RT00544                                            0544
         C     @03,GFDSNP(,GFPLPTR)                                0544
         BNE   @RF00544                                            0544
@RT00544 DS    0H                                                  0545
*                     DO;                                          0545
*                       MTLEN(5)=LENGTH(INSRTA5B);/* INSERT 'DDNAME'
*                                      TEXT                          */
         MVI   MTLEN+16,X'06'                                      0546
*                       MTADDR(5)=ADDR(INSRTA5B);                  0547
         LA    @03,INSRTA5B                                        0547
         STCM  @03,7,MTADDR+16                                     0547
*                       IF ACBOPEN^='1'B THEN/* SEE IF ACB OPEN    0548
*                                                            @ZA30301*/
         TM    ACBOPEN(ACBPTR),B'00010000'                         0548
         BO    @RF00548                                            0548
*                         DO;       /*                       @ZA30301*/
*                           MTLEN(6)=LENGTH(ACBDDNM);/* IF OPEN GET
*                                                            @ZA30301*/
         MVI   MTLEN+20,X'08'                                      0550
*                           MTADDR(6)=ADDR(ACBDDNM);/* DDNAME      0551
*                                                            @ZA30301*/
         LA    @03,ACBDDNM(,ACBPTR)                                0551
         STCM  @03,7,MTADDR+20                                     0551
*                         END;                                     0552
*                       ELSE                                       0553
*                                                                  0553
*                         /*******************************************/
*                         /*                                         */
*                         /* GET DDNAME FROM TIOT CONTROL BLOCK (ACB */
*                         /* HAS OFFSET INTO TIOT AND TCB -> TIOT)   */
*                         /*                                         */
*                         /*******************************************/
*                                                                  0553
*                         TIOTEPTR=TIOTPTR/* TCB -> TIOT             */
*                             +ACBTIOT;/* OFFSET FROM THE TIOT ORIGIN
*                                      TO THE TIOELNGH FIELD IN THE
*                                      TIOT ENTRY FOR THE DD       0553
*                                      STATEMENT ASSOCIATED WITH THIS
*                                      ACB                           */
         B     @RC00548                                            0553
@RF00548 L     @03,CVTPTR                                          0553
         L     @03,CVTTCBP(,@03)                                   0553
         L     @03,TCBPTR(,@03)                                    0553
         LH    TIOTEPTR,ACBTIOT(,ACBPTR)                           0553
         AL    TIOTEPTR,TIOTPTR(,@03)                              0553
*                       MTLEN(6)=LENGTH(TIOEDDNM);                 0554
@RC00548 MVI   MTLEN+20,X'08'                                      0554
*                       MTADDR(6)=ADDR(TIOEDDNM);                  0555
         LA    @03,TIOEDDNM(,TIOTEPTR)                             0555
         STCM  @03,7,MTADDR+20                                     0555
*                     END;                                         0556
*                                                                  0556
*                   /*************************************************/
*                   /*                                               */
*                   /* INSERT TYPE OF VSAM I/O - 'VSAM',             */
*                   /* 'VSAM/SUBSYSTEM', OR 'VSAM/JES<N>'            */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0557
*                   IF GFCALLID=GFOPEN×GFCALLID=GFCLOSE THEN       0557
@RF00544 LH    @09,GFCALLID(,GFPLPTR)                              0557
         CH    @09,@CH00112                                        0557
         BE    @RT00557                                            0557
         CH    @09,@CH00681                                        0557
         BNE   @RF00557                                            0557
@RT00557 DS    0H                                                  0558
*                     DO;                                          0558
*                       IF GFSUBSYS=ON×ACBAMETH='41'X THEN/* INSERT
*                                      'VSAM/SUBSYSTEM'              */
         TM    GFSUBSYS(GFPLPTR),B'01000000'                       0559
         BO    @RT00559                                            0559
         CLI   ACBAMETH(ACBPTR),65                                 0559
         BNE   @RF00559                                            0559
@RT00559 DS    0H                                                  0560
*                         DO;                                      0560
*                           MTLEN(7)=LENGTH(INSTVSSM);             0561
         MVI   MTLEN+24,X'0E'                                      0561
*                           MTADDR(7)=ADDR(INSTVSSM);              0562
         LA    @09,INSTVSSM                                        0562
         STCM  @09,7,MTADDR+24                                     0562
*                         END;                                     0563
*                     END;                                         0564
*                   ELSE            /* FOR VSAM I/O CALLER ID        */
*                     DO;                                          0565
         B     @RC00557                                            0565
@RF00557 DS    0H                                                  0566
*                       IF GFSUBSYS=ON THEN/* INSERT 'VSAM/JES<N>'   */
         TM    GFSUBSYS(GFPLPTR),B'01000000'                       0566
         BNO   @RF00566                                            0566
*                         DO;                                      0567
*                           IF RPLCMPON<HEXTEN THEN/* IF SIMPLE TO 0568
*                                      CONVERT <N>                   */
         CLI   RPLCMPON(RPLPTR),10                                 0568
         BNL   @RF00568                                            0568
*                             DO;                                  0569
*                               INSTJESI='VSAM/JES';               0570
         MVC   INSTJESI(8),@CC02240                                0570
*                               INSTJESN=RPLCMPON×FOXZERO;/*       0571
*                                      PRINTABLE NUMBER              */
         LA    @09,240                                             0571
         SLR   @15,@15                                             0571
         IC    @15,RPLCMPON(,RPLPTR)                               0571
         OR    @09,@15                                             0571
         STC   @09,INSTJESN                                        0571
*                               MTLEN(7)=LENGTH(INSTVJES);         0572
         MVI   MTLEN+24,X'09'                                      0572
*                               MTADDR(7)=ADDR(INSTVJES);          0573
         LA    @09,INSTVJES                                        0573
         STCM  @09,7,MTADDR+24                                     0573
*                             END;                                 0574
*                           ELSE    /* OR ELSE INSERT VSAM/SUBSYSTEM */
*                             DO;                                  0575
         B     @RC00568                                            0575
@RF00568 DS    0H                                                  0576
*                               MTLEN(7)=LENGTH(INSTVSSM);         0576
         MVI   MTLEN+24,X'0E'                                      0576
*                               MTADDR(7)=ADDR(INSTVSSM);          0577
         LA    @09,INSTVSSM                                        0577
         STCM  @09,7,MTADDR+24                                     0577
*                             END;                                 0578
*                         END;                                     0579
@RC00568 DS    0H                                                  0580
*                     END;                                         0580
@RF00566 DS    0H                                                  0581
*                 END;              /* END CODE FOR BADCBBIT OFF FOR
*                                      VSAM ID                       */
*                                                                  0581
@RC00557 DS    0H                                                  0582
*               /*****************************************************/
*               /*                                                   */
*               /* DEFAULT I/O TYPE IS 'VSAM'                        */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0582
*               IF MTINSRT(7)=ZERO THEN                            0582
@RF00433 ICM   @09,15,MTINSRT+24                                   0582
         BNZ   @RF00582                                            0582
*                 DO;                                              0583
*                   MTLEN(7)=LENGTH(INSTVSAM);/* INSERT 'VSAM'       */
         MVI   MTLEN+24,X'04'                                      0584
*                   MTADDR(7)=ADDR(INSTVSAM);                      0585
         LA    @09,INSTVSAM                                        0585
         STCM  @09,7,MTADDR+24                                     0585
*                 END;                                             0586
*                                                                  0586
*               /*****************************************************/
*               /*                                                   */
*               /* INSERT DATA SET NAME INTO VSAM MESSAGE            */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0587
*               IF GFDSNLEN^=ZERO&GFDSNP^=ZERO THEN/* INSERT DATA SET
*                                      NAME IF SUPPLIED BY CALLER    */
@RF00582 SLR   @09,@09                                             0587
         LH    @07,GFDSNLEN(,GFPLPTR)                              0587
         CR    @07,@09                                             0587
         BE    @RF00587                                            0587
         L     @15,GFDSNP(,GFPLPTR)                                0587
         CR    @15,@09                                             0587
         BE    @RF00587                                            0587
*                 DO;                                              0588
*                   MTLEN(5)=LENGTH(INSRTA5A);/* INSERT 'DATA SET' 0589
*                                      TEXT                          */
         MVI   MTLEN+16,X'08'                                      0589
*                   MTADDR(5)=ADDR(INSRTA5A);                      0590
         LA    @09,INSRTA5A                                        0590
         STCM  @09,7,MTADDR+16                                     0590
*                   MTLEN(6)=GFDSNLEN;/* INSERT DATA SET NAME        */
         STC   @07,MTLEN+20                                        0591
*                   MTADDR(6)=GFDSNP;                              0592
         STCM  @15,7,MTADDR+20                                     0592
*                 END;                                             0593
*             END;                  /* END VSAMFAIL DO/END GROUP     */
@RF00587 DS    0H                                                  0595
*         END;                      /* END GOODID DO/END GROUP       */
@RF00424 DS    0H                                                  0596
*     END;                          /* GOOD PTRTOPL DO/END GROUP     */
@RF00272 DS    0H                                                  0597
*                                                                  0597
*   /*****************************************************************/
*   /*                                                               */
*   /* CHECK WHETHER NEED TO ISSUE A FAILURE OR ERROR MESSAGE        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0597
*   IF NOMSGBIT=OFF THEN                                           0597
@RC00243 TM    NOMSGBIT,B'01000000'                                0597
         BNZ   @RF00597                                            0597
*     DO;                           /* ISSUEMSG DO/END GROUP         */
*                                                                  0598
*       /*************************************************************/
*       /*                                                           */
*       /* SET UP COMMON PARAMETERS TO MESSAGE ROUTINE (IKJEFF02)    */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0599
*       LISTPTR=ADDR(MSGCSECT);     /* PTR TO MSGPARMS SECTION OF  0599
*                                      MSGTABLE                      */
         LA    @09,MSGCSECT                                        0599
         ST    @09,LISTPTR                                         0599
*       MTHIGH=ON;                  /* H-O BIT ON IN POINTER LIST    */
         OI    MTHIGH,B'10000000'                                  0600
*       MSGCSECT=ADDR(IKJEFF21);    /* CSECT WITH MESSAGE TEXTS      */
         L     @09,@CV00076                                        0601
         ST    @09,MSGCSECT                                        0601
*       MTNPLMSW=ON;                /* WILL ISSUE OWN PUTLINE ERROR
*                                      MESSAGE                       */
*       MTDOMSW=ON;                 /* IF ISSUE THIS MESSAGE, OR A 0603
*                                      LATER ERROR MESSAGE, AS A   0603
*                                      WRITE TO PROGRAMMER, TELL   0603
*                                      IKJEFF02 TO ERASE THE MESSAGE
*                                      FROM OPERATOR DISPLAY TUBE  0603
*                                      RIGHT AFTER IT IS ISSUED      */
         OI    MTNPLMSW,B'01010000'                                0603
*       RFY                                                        0604
*        (R0,                                                      0604
*         R1) RSTD;                                                0604
*       IF(BADPLPTB=OFF&GF02PTR^=ZERO) THEN/* CHECK FOR IKJEFF02   0605
*                                      PRELOADED                     */
         TM    BADPLPTB,B'00000010'                                0605
         BNZ   @RF00605                                            0605
         L     @09,GF02PTR(,GFPLPTR)                               0605
         LTR   @09,@09                                             0605
         BZ    @RF00605                                            0605
*         R0=GF02PTR;                                              0606
         LR    R0,@09                                              0606
*       ELSE                        /* OTHERWISE MUST LOAD IKJEFF02  */
*         GEN(LOAD EP=IKJEFF02);                                   0607
         B     @RC00605                                            0607
@RF00605 DS    0H                                                  0607
         LOAD EP=IKJEFF02
*       R1=ADDR(MSGTABLE);          /* POINT TO PARAMETER LIST FOR 0608
*                                      IKJEFF02                      */
@RC00605 LA    R1,MSGTABLE                                         0608
*                                                                  0609
*       /*************************************************************/
*       /*                                                           */
*       /* SPECIAL LOGIC FOR WRITE TO PROGRAMMER MESSAGE             */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0609
*       IF(BADPLPTB=ON×GFWTPSW=ON) THEN/* SET UP FOR WRITE TO      0609
*                                      PROGRAMMER IF THAT'S WHAT   0609
*                                      CALLER WANTS (OR ERROR)       */
         TM    BADPLPTB,B'00000010'                                0609
         BO    @RT00609                                            0609
         TM    GFWTPSW(GFPLPTR),B'00100000'                        0609
         BNO   @RF00609                                            0609
@RT00609 DS    0H                                                  0610
*         MTWTPSW=ON;                                              0610
*                                                                  0610
         OI    MTWTPSW,B'00000010'                                 0610
*       /*************************************************************/
*       /*                                                           */
*       /* SPECIAL LOGIC FOR PUTLINE MESSAGE                         */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0611
*       ELSE                        /* OTHERWISE DEFAULT TO ISSUE  0611
*                                      PUTLINE MACRO TO TERMINAL     */
*         DO;                                                      0611
         B     @RC00609                                            0611
@RF00609 DS    0H                                                  0612
*           MTCPPL=GFCPPLP;         /* PTR TO TMP'S CPPL C.B.        */
         L     @09,GFCPPLP(,GFPLPTR)                               0612
         ST    @09,MTCPPL                                          0612
*           IF MTCPPL=ZERO THEN     /* CAN'T ISSUE PUTLINE IF NO CPPL
*                                      POINTER                       */
         LTR   @09,@09                                             0613
         BNZ   @RF00613                                            0613
*             DO;                                                  0614
*               BADCPPLB=ON;                                       0615
         OI    BADCPPLB,B'00001000'                                0615
*               MTWTPSW=ON;         /* ISSUE WTP INSTEAD, THEN WILL
*                                      ISSUE ERROR MSG FOR INVALID 0616
*                                      INPUT PARAMETER               */
         OI    MTWTPSW,B'00000010'                                 0616
*             END;                                                 0617
*           ELSE                    /* IF O.K. TO DO PUTLINE         */
*             DO;                                                  0618
         B     @RC00613                                            0618
@RF00613 DS    0H                                                  0619
*               MTPUTLSW=ON;                                       0619
         OI    MTPUTLSW,B'01000000'                                0619
*               IF GFECBP^=ZERO THEN/* CALLER-SUPPLIED ECB           */
         L     @09,GFECBP(,GFPLPTR)                                0620
         LTR   @09,@09                                             0620
         BZ    @RF00620                                            0620
*                 ECBPTR=GFECBP;                                   0621
         ST    @09,ECBPTR                                          0621
*               ELSE                /* LOCAL ECB USED FOR PUTLINE    */
*                 DO;                                              0622
         B     @RC00620                                            0622
@RF00620 DS    0H                                                  0623
*                   LOCALECB=ZERO;                                 0623
         SLR   @09,@09                                             0623
         ST    @09,LOCALECB                                        0623
*                   ECBPTR=ADDR(LOCALECB);                         0624
         LA    @09,LOCALECB                                        0624
         ST    @09,ECBPTR                                          0624
*                 END;                                             0625
*             END;                  /* END GOOD PUTLINE DO/END GROUP */
@RC00620 DS    0H                                                  0627
*         END;                      /* END PUTLINE DO/END GROUP      */
@RC00613 DS    0H                                                  0628
*                                                                  0628
*       /*************************************************************/
*       /*                                                           */
*       /* ISSUE THE FAILURE OR INPUT PARAMETER LIST ERROR MESSAGE   */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0628
*       RFY                                                        0628
*         R15 RSTD;                                                0628
@RC00609 DS    0H                                                  0629
*       CALL IKJEFF02;              /* NOW ISSUE THE MESSAGE         */
*                                                                  0629
         LR    @15,R0                                              0629
         BALR  @14,@15                                             0629
*       /*************************************************************/
*       /*                                                           */
*       /* CHECK FOR BAD RETURN CODE FROM PUTLINE                    */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0630
*       IF R15^=ZERO THEN                                          0630
         LTR   R15,R15                                             0630
         BZ    @RF00630                                            0630
*         DO;                                                      0631
*           RETCODE=R15;            /* USE THE BAD R.C. AS IKJEFF19'S
*                                      R.C.                          */
         ST    R15,RETCODE                                         0632
*           IF R15^=BAD02PL THEN    /* ISSUE ERROR MESSAGE IF      0633
*                                      IKJEFF02 DIDN'T               */
         CH    R15,@CH00063                                        0633
         BE    @RF00633                                            0633
*             DO;                                                  0634
*               BADPUTLB=ON;                                       0635
         OI    BADPUTLB,B'00000100'                                0635
*               MTWTPSW=ON;         /* WILL ISSUE MESSAGE AS       0636
*                                      WRITE-TO-PROGRAMMER SINCE   0636
*                                      PUTLINE FAILED                */
         OI    MTWTPSW,B'00000010'                                 0636
*               CALL IKJEFF02;      /* ISSUE THE FAILURE MESSAGE     */
         LR    @15,R0                                              0637
         BALR  @14,@15                                             0637
*               MTADDR(3)=ADDR(INSRTB3D);/* INSERT 'PUTLINE WAS    0638
*                                      UNSUCCESSFUL'                 */
         LA    @14,INSRTB3D                                        0638
         STCM  @14,7,MTADDR+8                                      0638
*               MTLEN(3)=LENGTH(INSRTB3D);                         0639
         MVI   MTLEN+8,X'18'                                       0639
*               CALL PLERPROC;      /* SETS UP COMMON INSERTS FOR  0640
*                                      MESSAGE 19B                   */
         BAL   @14,PLERPROC                                        0640
*               CALL IKJEFF02;      /* ISSUE 'UNABLE TO ISSUE MESSAGE
*                                      AS PUTLINE' MESSAGE           */
         LR    @15,R0                                              0641
         BALR  @14,@15                                             0641
*               CALL PUTLPROC;      /* SET UP INSERTS FOR MESSAGE  0642
*                                      WITH MEANING OF PUTLINE ERROR
*                                      CODE                          */
         BAL   @14,PUTLPROC                                        0642
*               CALL IKJEFF02;      /* ISSUE THE PUTLINE ERROR     0643
*                                      MESSAGE                       */
         LR    @15,R0                                              0643
         BALR  @14,@15                                             0643
*               BADPUTLB=OFF;       /* DON'T WANT PUTLINE INSERTS IF
*                                      ISSUE OTHER ERROR MESSAGES    */
         NI    BADPUTLB,B'11111011'                                0644
*             END;                  /* END CODE FOR NOT BAD02PRM     */
*         END;                      /* END CODE FOR R15 ^= 0         */
@RF00633 DS    0H                                                  0647
*                                                                  0647
*       /*************************************************************/
*       /*                                                           */
*       /* ISSUE ERROR MESSAGE FOR ANY PREVIOUSLY DETECTED           */
*       /* NON-TERMINATING ERROR                                     */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0647
*       IF BADCBBIT=ON THEN         /* ISSUE ERROR MESSAGE IF GFCBPTR
*                                      WAS ZERO WHEN NEEDED NONZERO
*                                      (PARTIAL FAILURE MESSAGE WAS
*                                      ISSUED)                       */
@RF00630 TM    BADCBBIT,B'00010000'                                0647
         BNO   @RF00647                                            0647
*         DO;                                                      0648
*           MTADDR(3)=ADDR(INSRTB3B);/* INSERT 'ZERO CONTROL BLOCK 0649
*                                      POINTER' TEXT                 */
         LA    @14,INSRTB3B                                        0649
         STCM  @14,7,MTADDR+8                                      0649
*           MTLEN(3)=LENGTH(INSRTB3B);                             0650
         MVI   MTLEN+8,X'1A'                                       0650
*           CALL PLERPROC;          /* SET UP COMMON MESSAGE INSERTS */
         BAL   @14,PLERPROC                                        0651
*           CALL IKJEFF02;          /* ISSUE PARAMETER LIST ERROR MSG*/
         LR    @15,R0                                              0652
         BALR  @14,@15                                             0652
*           BADCBBIT=OFF;           /* TURN OFF BECAUSE MIGHT HAVE 0653
*                                      BADCPPLB ON, TOO, AND IT NEEDS
*                                      DIFFERENT FIRST INSERT        */
         NI    BADCBBIT,B'11101111'                                0653
*         END;                                                     0654
*       IF BADCPPLB=ON THEN         /* ISSUE ERROR MESSAGE IF HAD TO
*                                      ISSUE WTP, NOT PUTLINE,     0655
*                                      BECAUSE GFCPPLP=0 (MTWTPSW  0655
*                                      ALREADY ON FOR ERROR)         */
@RF00647 TM    BADCPPLB,B'00001000'                                0655
         BNO   @RF00655                                            0655
*         DO;                                                      0656
*           MTADDR(3)=ADDR(INSRTB3C);/* INSERT 'ZERO CPPL POINTER  0657
*                                      WHEN PUTLINE'                 */
         LA    @14,INSRTB3C                                        0657
         STCM  @14,7,MTADDR+8                                      0657
*           MTLEN(3)=LENGTH(INSRTB3C);                             0658
         MVI   MTLEN+8,X'1E'                                       0658
*           CALL PLERPROC;          /* SET UP COMMON MESSAGE INSERTS */
         BAL   @14,PLERPROC                                        0659
*           CALL IKJEFF02;          /* ISSUE ERROR MESSAGE AS WTP    */
         LR    @15,R0                                              0660
         BALR  @14,@15                                             0660
*         END;                                                     0661
*                                                                  0662
*       /*************************************************************/
*       /*                                                           */
*       /* IKJEFF19 CLEANUP                                          */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0662
*       IF BADPLPTB=OFF             /* IF HAVE POINTER TO GFPARMS    */
*           &GF02PTR=ZERO THEN      /* DELETE IKJEFF02 IF LOADED IT  */
@RF00655 TM    BADPLPTB,B'00000010'                                0662
         BNZ   @RF00662                                            0662
         ICM   @14,15,GF02PTR(GFPLPTR)                             0662
         BNZ   @RF00662                                            0662
*         GEN(DELETE EP=IKJEFF02);                                 0663
         DELETE EP=IKJEFF02
*       RFY                                                        0664
*        (R0,                                                      0664
*         R1,                                                      0664
*         R15) UNRSTD;                                             0664
@RF00662 DS    0H                                                  0665
*     END;                          /* END ISSUEMSG DO/END GROUP     */
*                                                                  0665
*   /*****************************************************************/
*   /*                                                               */
*   /* ISSUE MODESET IF NECESSARY                                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0666
*   IF BADPLPTB=OFF&GFKEYN08=ON THEN/* DO MODESET BACK TO CALLER'S 0666
*                                      KEY                           */
@RF00597 TM    BADPLPTB,B'00000010'                                0666
         BNZ   @RF00666                                            0666
         TM    GFKEYN08(GFPLPTR),B'10000000'                       0666
         BNO   @RF00666                                            0666
*     DO;                                                          0667
*       RFY                                                        0668
*        (R3,                                                      0668
*         R4) RSTD;                                                0668
*       R3=ADDR(SAVEKEY);           /* POINT TO CALLER KEY           */
         LA    R3,SAVEKEY                                          0669
*       GEN;                                                       0670
*                                   /* COMMENT FOR UNPAIRED APOSTROPHES
*                                   MODESET TO RESTORE CALLER'S KEY
MODESET2  MODESET KEYADDR=SAVEKEY,WORKREG=4,                           +
               RELATED=(CALLRKEY,IKJEFF19(MODESET1))
*       RFY                                                        0671
*        (R3,                                                      0671
*         R4) UNRSTD;                                              0671
*     END;                                                         0672
*   RETURN CODE(RETCODE);           /* RETURN 0 OR ERROR CODE        */
@RF00666 L     @09,RETCODE                                         0673
         L     @13,4(,@13)                                         0673
         L     @00,@SIZDATD                                        0673
         LR    @01,@10                                             0673
         FREEMAIN R,LV=(0),A=(1)
         LR    @15,@09                                             0673
         L     @14,12(,@13)                                        0673
         LM    @00,@12,20(@13)                                     0673
         BR    @14                                                 0673
*                                                                  0674
*/********************************************************************/
*/*  PLERPROC INTERNAL PROCEDURE                                     */
*/*   - SETS UP COMMON INSERTS FOR 'INVALID PUTLINE/PARAMETER ERROR' */
*/*     MESSAGE 19B.                                                 */
*/*   - CALLER MUST SET UP MTINSRT(3) FIELD                          */
*/********************************************************************/
*                                                                  0674
*PLERPROC:                                                         0674
*   PROC OPTIONS(DONTSAVE,NOSAVEAREA,RETREG);                      0674
@EL00001 L     @13,4(,@13)                                         0674
@EF00001 L     @00,@SIZDATD                                        0674
         LR    @01,@10                                             0674
         FREEMAIN R,LV=(0),A=(1)
@ER00001 LM    @14,@12,12(@13)                                     0674
         BR    @14                                                 0674
PLERPROC DS    0H                                                  0675
*   RFY                                                            0675
*     R14 RSTD;                                                    0675
*   MSGID='19B';                                                   0676
         MVI   MSGID+3,C' '                                        0676
         MVC   MSGID(3),@CC02244                                   0676
*   IF BADPUTLB=OFF THEN            /* SKIP IF HAD BAD PUTLINE R.C.  */
         TM    BADPUTLB,B'00000100'                                0677
         BNZ   @RF00677                                            0677
*     RETCODE=BAD19PL;              /* TELL CALLER HAD BAD PARAM LIST*/
         MVC   RETCODE(4),@CF00065                                 0678
*   PLERRBIT=ON;                    /* INDICATE INTERNAL ERROR FOUND */
@RF00677 OI    PLERRBIT,B'00100000'                                0679
*   MTHEXSW=ON;                     /* CONVERT ID INSERT TO PRINTABLE
*                                      HEX, NOT PRINTABLE DECIMAL    */
         OI    MTHEXSW,B'00010000'                                 0680
*   TEMPSAVE=MTINSRT(3);            /* SAVE INSERT 3 WHILE ZEROING   */
         L     TEMPSAVE,MTINSRT+8                                  0681
*   MTINSRTS=''X;                   /* ZERO INSERT AREA IN CASE PRIOR
*                                      MESSAGE WAS ISSUED            */
         XC    MTINSRTS(36),MTINSRTS                               0682
*   MTINSRT(3)=TEMPSAVE;                                           0683
         ST    TEMPSAVE,MTINSRT+8                                  0683
*   IF BADCBBIT=ON&BADPUTLB=OFF THEN/* INSERT 'INCOMPLETE FAILURE  0684
*                                      MESSAGE ISSUED' TEXT          */
         TM    BADCBBIT,B'00010000'                                0684
         BNO   @RF00684                                            0684
         TM    BADPUTLB,B'00000100'                                0684
         BNZ   @RF00684                                            0684
*     DO;                                                          0685
*       MTADDR(1)=ADDR(INSRTB1B);                                  0686
         LA    @15,INSRTB1B                                        0686
         STCM  @15,7,MTADDR                                        0686
*       MTLEN(1)=LENGTH(INSRTB1B);                                 0687
         MVI   MTLEN,X'21'                                         0687
*       MTADDR(2)=ADDR(INSTDASH);   /* INSERT '-'                    */
         LA    @15,INSTDASH                                        0688
         STCM  @15,7,MTADDR+4                                      0688
*       MTLEN(2)=LENGTH(INSTDASH);                                 0689
         MVI   MTLEN+4,X'01'                                       0689
*     END;                                                         0690
*   ELSE                            /* IF NOT THAT CASE              */
*     DO;                                                          0691
         B     @RC00684                                            0691
@RF00684 DS    0H                                                  0692
*       MTADDR(1)=ADDR(INSRTB1A);   /* INSERT 'UNABLE TO ISSUE     0692
*                                      FAILURE MESSAGE'              */
         LA    @15,INSRTB1A                                        0692
         STCM  @15,7,MTADDR                                        0692
*       IF BADIDBIT=ON THEN         /* WILL INSERT BAD ID            */
         TM    BADIDBIT,B'00000001'                                0693
         BNO   @RF00693                                            0693
*         DO;                                                      0694
*           MTLEN(1)=LENGTH(INSRTB1C);/* INSERT ' FOR ID' TEXT       */
         MVI   MTLEN,X'26'                                         0695
*           MTADDR(2)=ADDR(GFCALLID);/* INSERT ID FROM INPUT       0696
*                                      PARAMETER LIST                */
         LA    @15,GFCALLID(,GFPLPTR)                              0696
         STCM  @15,7,MTADDR+4                                      0696
*           MTLEN(2)=LENGTH(GFCALLID);                             0697
         MVI   MTLEN+4,X'02'                                       0697
*           MTHIGHL(2)=ON;          /* CONVERT TO PRINTABLE HEX      */
         OI    MTHIGHL+4,B'10000000'                               0698
*         END;                                                     0699
*       ELSE                        /* IF NOT THAT CASE              */
*         DO;                                                      0700
         B     @RC00693                                            0700
@RF00693 DS    0H                                                  0701
*           MTLEN(1)=LENGTH(INSRTB1A);/* USE NORMAL LENGTH           */
         MVI   MTLEN,X'1F'                                         0701
*           IF(BADCPPLB=ON×BADPUTLB=ON) THEN/* INSERT 'TO TERMINAL'  */
         TM    BADCPPLB,B'00001100'                                0702
         BZ    @RF00702                                            0702
*             DO;                                                  0703
*               MTADDR(2)=ADDR(INSRTB2);                           0704
         LA    @15,INSRTB2                                         0704
         STCM  @15,7,MTADDR+4                                      0704
*               MTLEN(2)=LENGTH(INSRTB2);                          0705
         MVI   MTLEN+4,X'0B'                                       0705
*             END;                                                 0706
*         END;                                                     0707
*     END;                                                         0708
*   RFY                                                            0709
*     R14 UNRSTD;                                                  0709
*   END PLERPROC;                                                  0710
@EL00002 DS    0H                                                  0710
@EF00002 DS    0H                                                  0710
@ER00002 BR    @14                                                 0710
*                                                                  0711
*/********************************************************************/
*/*  PROC19C INTERNAL PROCEDURE                                      */
*/*   - SETS UP COMMON INSERTS FOR MESSAGE 19C.  (TSO SERVICE        */
*/*     ROUTINE OR SUBSYSTEM INTERFACE ROUTINE FAILURE MESSAGE.)     */
*/********************************************************************/
*                                                                  0711
*PROC19C:                                                          0711
*   PROC OPTIONS(DONTSAVE,NOSAVEAREA,RETREG);                      0711
PROC19C  DS    0H                                                  0712
*   RFY                                                            0712
*     R14 RSTD;                                                    0712
*   MSGID='19C';                    /* DEFAULT MESSAGE ID (MAY CHANGE
*                                      TO '19E' FOR GFSSREQ ID)      */
         MVI   MSGID+3,C' '                                        0713
         MVC   MSGID(3),@CC02249                                   0713
*   MTADDR(1)=ADDR(GFRCODE);        /* CODE FROM REGISTER 15         */
         LA    @15,GFRCODE(,GFPLPTR)                               0714
         STCM  @15,7,MTADDR                                        0714
*   MTLEN(1)=LENGTH(GFRCODE);                                      0715
         MVI   MTLEN,X'04'                                         0715
*   MTHIGHL(1)=ON;                  /* CONVERT CODE TO PRINTABLE     */
         OI    MTHIGHL,B'10000000'                                 0716
*   MTINSRT(2)=SAVEPGMN;            /* INSERT COMMAND/PROGRAM NAME   */
         ST    SAVEPGMN,MTINSRT+4                                  0717
*   IF GFCALLID=GFSSREQ&BADPUTLB=OFF THEN/* INSERT VARIES WITH ID    */
         CLC   GFCALLID(2,GFPLPTR),@CH00238                        0718
         BNE   @RF00718                                            0718
         TM    BADPUTLB,B'00000100'                                0718
         BNZ   @RF00718                                            0718
*     DO;                                                          0719
*       MTADDR(4)=ADDR(INSTSSIF);   /* INSERT 'SUBSYSTEM INTERFACE'  */
         LA    @15,INSTSSIF                                        0720
         STCM  @15,7,MTADDR+12                                     0720
*       MTLEN(4)=LENGTH(INSTSSIF);  /* WILL CHANGE IF JUST INSERT  0721
*                                      'SUBSYSTEM'                   */
         MVI   MTLEN+12,X'13'                                      0721
*     END;                                                         0722
*   ELSE                            /* FOR SERVICE ROUTINE           */
*     DO;                                                          0723
         B     @RC00718                                            0723
@RF00718 DS    0H                                                  0724
*       MTADDR(4)=ADDR(INSRTC4);    /* INSERT 'SERVICE ROUTINE HAD'  */
         LA    @15,INSRTC4                                         0724
         STCM  @15,7,MTADDR+12                                     0724
*       MTLEN(4)=LENGTH(INSRTC4);                                  0725
         MVI   MTLEN+12,X'13'                                      0725
*     END;                                                         0726
*   RFY                                                            0727
*     R14 UNRSTD;                                                  0727
*   END PROC19C;                                                   0728
@EL00003 DS    0H                                                  0728
@EF00003 DS    0H                                                  0728
@ER00003 BR    @14                                                 0728
*                                                                  0729
*/********************************************************************/
*/*  PUTLPROC INTERNAL PROCEDURE                                     */
*/*   - SETS UP INSERTS FOR TSO PUTLINE SERVICE ROUTINE FAILURE      */
*/*     (MESSAGE 19C).                                               */
*/********************************************************************/
*                                                                  0729
*PUTLPROC:                                                         0729
*   PROC;                                                          0729
PUTLPROC STM   @14,@12,@SA00004                                    0729
*   CALL PROC19C;                   /* SET UP COMMON INSERTS FOR   0730
*                                      MESSAGE 19C                   */
         BAL   @14,PROC19C                                         0730
*   MTLEN(3)=LENGTH(INSRTC3B);      /* INSERT 'PUTLINE'              */
         MVI   MTLEN+8,X'07'                                       0731
*   MTADDR(3)=ADDR(INSRTC3B);                                      0732
         LA    @07,INSRTC3B                                        0732
         STCM  @07,7,MTADDR+8                                      0732
*   IF BADPUTLB=ON THEN             /* OVERRIDE-INSERT BAD PUTLINE 0733
*                                      R.C.                          */
         TM    BADPUTLB,B'00000100'                                0733
         BNO   @RF00733                                            0733
*     DO;                                                          0734
*       MTLEN(1)=LENGTH(RETCODE);                                  0735
         MVI   MTLEN,X'04'                                         0735
*       MTADDR(1)=ADDR(RETCODE);                                   0736
         LA    @07,RETCODE                                         0736
         STCM  @07,7,MTADDR                                        0736
*       MTHIGHL(1)=ON;                                             0737
         OI    MTHIGHL,B'10000000'                                 0737
*       TEMPRC=RETCODE;             /* USE TEMPRC FOR LOOP THRU TABLE
*                                      OF RETURN CODES               */
         L     TEMPRC,RETCODE                                      0738
*     END;                                                         0739
*   ELSE                            /* GFRCODE IS USED IF          0740
*                                      GFCALLID=GFPUTL AND BADPUTLB =
*                                      OFF                           */
*     TEMPRC=GFRCODE;                                              0740
*                                                                  0740
         B     @RC00733                                            0740
@RF00733 L     TEMPRC,GFRCODE(,GFPLPTR)                            0740
*   /*****************************************************************/
*   /*                                                               */
*   /* INSERT MEANING OF PUTLINE ERROR CODE                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0741
*   DO I=1 TO DIM(PUTLRCS) WHILE PUTLRCS(I)^=TEMPRC;/* SEARCH PUTLRCS
*                                      TABLE FOR MATCH WITH THE    0741
*                                      PUTLINE R.C.                  */
@RC00733 LA    I,1                                                 0741
@DL00741 SLR   @07,@07                                             0741
         IC    @07,PUTLRCS-1(I)                                    0741
         CR    TEMPRC,@07                                          0741
         BE    @DC00741                                            0741
*   END;                            /* END THE SEARCH WHEN MATCH OR
*                                      I=7, WHICH IS THE 'UNDEFINED'
*                                      RETURN CODE ENTRY IN SRTNINST */
         AH    I,@CH00035                                          0742
         CH    I,@CH00102                                          0742
         BNH   @DL00741                                            0742
@DC00741 DS    0H                                                  0743
*   MTINSRT(5)=SRTNINST(I);         /* USE INDEX FROM PUTLRCS TABLE
*                                      TO PICK UP MESSAGE INSERT INFO
*                                      FROM SRTNINST TABLE           */
         LR    @07,I                                               0743
         SLA   @07,2                                               0743
         L     @07,SRTNINST-4(@07)                                 0743
         ST    @07,MTINSRT+16                                      0743
*   END PUTLPROC;                                                  0744
@EL00004 DS    0H                                                  0744
@EF00004 DS    0H                                                  0744
@ER00004 LM    @14,@12,@SA00004                                    0744
         BR    @14                                                 0744
*   END IKJEFF19                    /* END OF VSAMFAIL MODULE        */
*                                                                  0745
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IKJEFFGF)                                       */
*/*%INCLUDE SYSLIB  (IKJEFFMT)                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IDARMRCD)                                       */
*/*%INCLUDE SYSLIB  (IEFJSSIB)                                       */
*/*%INCLUDE SYSLIB  (IEFJSSOB)                                       */
*/*%INCLUDE SYSLIB  (IEFTIOT1)                                       */
*/*%INCLUDE SYSLIB  (IFGACB  )                                       */
*/*%INCLUDE SYSLIB  (IFGRPL  )                                       */
*/*%INCLUDE SYSLIB  (IKJCPPL )                                       */
*/*%INCLUDE SYSLIB  (IKJECT  )                                       */
*/*%INCLUDE SYSLIB  (IKJTCB  )                                       */
*                                                                  0745
*       ;                                                          0745
@DATA    DS    0H
@CH00035 DC    H'1'
@CH00681 DC    H'2'
@CH00112 DC    H'6'
@CH00102 DC    H'7'
@CH00049 DC    H'10'
@CH00282 DC    H'18'
@CH00364 DC    H'21'
@CH00380 DC    H'22'
@CH00229 DC    H'25'
@CH00051 DC    H'31'
@CH00238 DC    H'32'
@CH00539 DC    H'35'
@CH00476 DC    H'47'
@CH00565 DC    H'51'
@CH00063 DC    H'76'
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    1F
@SA00004 DS    15F
IKJEFF19 CSECT
         DS    0F
@CF00054 DC    F'4'
@CH00054 EQU   @CF00054+2
@CF00044 DC    F'8'
@CH00044 EQU   @CF00044+2
@CF00034 DC    F'12'
@CH00034 EQU   @CF00034+2
@CF00223 DC    F'16'
@CF00056 DC    F'20'
@CH00056 EQU   @CF00056+2
@CF00065 DC    F'80'
@CF00423 DC    XL4'04'
@CF02237 DC    XL4'08'
@CF02238 DC    XL4'0C'
@DATD    DSECT
         DS    0D
RETCODE  DS    F
LOCALECB DS    F
SAVEKEY  DS    AL1
INTSWS   DS    AL1
         ORG   INTSWS
VSAMBIT  DS    BL1
NOMSGBIT EQU   INTSWS+0
PLERRBIT EQU   INTSWS+0
BADCBBIT EQU   INTSWS+0
BADCPPLB EQU   INTSWS+0
BADPUTLB EQU   INTSWS+0
BADPLPTB EQU   INTSWS+0
BADIDBIT EQU   INTSWS+0
         ORG   INTSWS+1
         DS    CL3
ABNDCODE DS    AL3
         ORG   ABNDCODE
ABDIGIT  DS    3BL1
         ORG   ABNDCODE+3
MSGTABLE DS    CL80
         ORG   MSGTABLE
LISTPTR  DS    AL4
TMCTPTR  DS    AL4
         ORG   TMCTPTR
MTCPPL   DS    AL4
         ORG   MSGTABLE+8
ECBPTR   DS    AL4
@NM00012 DS    AL4
         ORG   @NM00012
MTHIGH   DS    BL1
         ORG   MSGTABLE+16
MSGCSECT DS    AL4
SW       DS    AL1
         ORG   SW
MTNOIDSW DS    BL1
MTPUTLSW EQU   SW+0
MTWTOSW  EQU   SW+0
MTHEXSW  EQU   SW+0
MTKEY1SW EQU   SW+0
MTJOBISW EQU   SW+0
MTWTPSW  EQU   SW+0
MTNHEXSW EQU   SW+0
         ORG   MSGTABLE+21
RETMSG   DS    AL3
SW2      DS    AL1
         ORG   SW2
MT2OLDSW DS    BL1
MTDOMSW  EQU   SW2+0
MTNOXQSW EQU   SW2+0
MTNPLMSW EQU   SW2+0
MTPGMSW  EQU   SW2+0
@NM00013 EQU   SW2+0
         ORG   MSGTABLE+25
@NM00014 DS    AL3
MTOLDPTR DS    AL4
@NM00015 DS    AL4
@NM00016 DS    AL4
MSGID    DS    CL4
MTINSRTS DS    CL36
         ORG   MTINSRTS
MTINSRT  DS    CL4
         ORG   MTINSRT+0
MTLEN    DS    AL1
         ORG   MTLEN+0
MTHIGHL  DS    BL1
         ORG   MTINSRT+1
MTADDR   DS    AL3
         ORG   MSGTABLE+80
IKJEFF19 CSECT
         DS    0F
@SIZDATD DC    AL1(1)
         DC    AL3(@ENDDATD-@DATD)
@CV00076 DC    V(IKJEFF21)
         DS    0D
@CC02225 DC    C'        '
@CC02240 DC    C'VSAM/JES'
@CC02229 DC    C'19E'
@CC02231 DC    C'19D'
@CC02234 DC    C'19A'
@CC02244 DC    C'19B'
@CC02249 DC    C'19C'
INSTUPGM DC    CL19'UNSPECIFIED PROGRAM'
INSRTA1A DC    CL7'ACBERFL'
INSRTA1B DC    CL8'RPLERRCD'
INSRTA1C DC    CL19'PHYSICAL ERROR TEXT'
INSRTA5A DC    CL8'DATA SET'
INSRTA5B DC    CL6'DDNAME'
INSTDVOL DC    CL49'NO ERROR - MOUNTED VOLUME OR ALLOCATED MORE SPACE'
INSTRBAD DC    CL26'RPL IN USE OR ACB NOT OPEN'
INSTABAD DC    CL30'NO DDNAME IN ACB OR ACB IN USE'
SRTNI00U DS    CL18
         ORG   SRTNI00U
@NM00001 DC    CL3'AN '
INSERTU  DC    CL15'UNDEFINED ERROR'
         ORG   SRTNI00U+18
INSTVJES DS    CL9
         ORG   INSTVJES
INSTJESI DS    CL8
INSTJESN DS    CL1
         ORG   INSTVJES+9
INSTVSSM DS    CL14
         ORG   INSTVSSM
INSTVSAM DC    CL4'VSAM'
@NM00002 DC    CL10'/SUBSYSTEM'
         ORG   INSTVSSM+14
INSRTB1C DS    CL38
         ORG   INSRTB1C
INSRTB1A DC    CL31'UNABLE TO ISSUE FAILURE MESSAGE'
@NM00003 DC    CL7' FOR ID'
         ORG   INSRTB1C+38
INSRTB1B DC    CL33'INCOMPLETE FAILURE MESSAGE ISSUED'
INSRTB2  DC    CL11'TO TERMINAL'
INSRTB3A DC    CL17'INVALID CALLER ID'
INSRTB3B DC    CL26'ZERO CONTROL BLOCK POINTER'
INSRTB3C DC    CL30'ZERO CPPL POINTER WHEN PUTLINE'
INSRTB3D DC    CL24'PUTLINE WAS UNSUCCESSFUL'
INSRTB3E DC    CL64'INVALID PARAMETER LIST PTR (REG. 1 MUST POINT TO PTC
               R TO GFPARMS)'
INSTDASH DC    CL1'-'
INSRTC3A DC    CL5'PARSE'
INSRTC3B DC    CL7'PUTLINE'
INSRTC4  DC    CL19'SERVICE ROUTINE HAD'
         DS    CL1
SRTNINFO DS    CL32
         ORG   SRTNINFO
SR1L     DC    AL1(8)
SR1A     DC    AL3(SRTNI001)
SR2L     DC    AL1(25)
SR2A     DC    AL3(SRTNI002)
SR3L     DC    AL1(55)
SR3A     DC    AL3(SRTNI003)
SR4L     DC    AL1(32)
SR4A     DC    AL3(SRTNI004)
SR5L     DC    AL1(26)
SR5A     DC    AL3(SRTNI005)
SR6L     DC    AL1(37)
SR6A     DC    AL3(SRTNI006)
SR7L     DC    AL1(30)
SR7A     DC    AL3(SRTNI007)
SRUL     DC    AL1(18)
SRUA     DC    AL3(SRTNI00U)
         ORG   SRTNINFO+32
SRTNI002 DC    CL25'AN ATTENTION INTERRUPTION'
SRTNI003 DC    CL55'NOWAIT OPTION SPECIFIED SO LINE NOT WRITTEN TO TERMC
               INAL'
SRTNI004 DC    CL32'AN INVALID INPUT PARAMETER BLOCK'
SRTNI005 DC    CL26'NOT ENOUGH VIRTUAL STORAGE'
SRTNI006 DC    CL37'CONFLICTING PARAMETERS ON INPUT MACRO'
SRTNI007 DC    CL30'DISCONNECTED TERMINAL DETECTED'
INSTSSIF DS    CL19
         ORG   INSTSSIF
INSTSSYS DC    CL9'SUBSYSTEM'
@NM00004 DC    CL10' INTERFACE'
         ORG   INSTSSIF+19
INSTS0   DS    CL12
         ORG   INSTS0
@NM00005 DC    CL4'HAD '
SRTNI001 DC    CL8'NO ERROR'
         ORG   INSTS0+12
INSTS4A  DC    CL41'DOES NOT SUPPORT THIS FUNCTION (SSOBFUNC='
INSTS4B  DC    CL1')'
INSTS8   DC    CL13'IS NOT ACTIVE'
INSTS12  DC    CL14'DOES NOT EXIST'
INSTS16A DC    CL18'COULD NOT COMPLETE'
INSTS16B DC    CL26'FUNCTION, DISASTROUS ERROR'
INSTS20A DC    CL36'FOUND A LOGICAL ERROR IN THE SSOB OR'
INSTS20B DC    CL18'FUNCTION EXTENSION'
INSTSU   DC    CL30'RETURNED AN UNDEFINED CODE FOR'
         DS    CL3
TSSOBFNI DS    CL84
         ORG   TSSOBFNI
TS1L     DC    AL1(24)
TS1A     DC    AL3(FNTEXT1)
TS2L     DC    AL1(10)
TS2A     DC    AL3(FNTEXT2)
TS3L     DC    AL1(10)
TS3A     DC    AL3(FNTEXT3)
TS4L     DC    AL1(11)
TS4A     DC    AL3(FNTEXT4)
TS5L     DC    AL1(23)
TS5A     DC    AL3(FNTEXT5)
TS6L     DC    AL1(20)
TS6A     DC    AL3(FNTEXT6)
TS7L     DC    AL1(22)
TS7A     DC    AL3(FNTEXT7)
TS8L     DC    AL1(13)
TS8A     DC    AL3(FNTEXT8)
TS9L     DC    AL1(17)
TS9A     DC    AL3(FNTEXT9)
TS10L    DC    AL1(18)
TS10A    DC    AL3(FNTEXT10)
TS11L    DC    AL1(26)
TS11A    DC    AL3(FNTEXT11)
TS12L    DC    AL1(12)
TS12A    DC    AL3(FNTEXT12)
TS13L    DC    AL1(16)
TS13A    DC    AL3(FNTEXT13)
TS14L    DC    AL1(24)
TS14A    DC    AL3(FNTEXT14)
TS15L    DC    AL1(22)
TS15A    DC    AL3(FNTEXT15)
TS16L    DC    AL1(4)
TS16A    DC    AL3(FNTEXT16)
TS17L    DC    AL1(5)
TS17A    DC    AL3(FNTEXT17)
TS18L    DC    AL1(10)
TS18A    DC    AL3(FNTEXT18)
TS19L    DC    AL1(18)
TS19A    DC    AL3(FNTEXT19)
TS20L    DC    AL1(14)
TS20A    DC    AL3(FNTEXT20)
TS21L    DC    AL1(13)
TS21A    DC    AL3(FNTEXT21)
         ORG   TSSOBFNI+84
FNTEXT1  DC    CL24'PROCESS SYSOUT DATA SETS'
FNTEXT2  DC    CL10'CANCEL JOB'
FNTEXT3  DC    CL10'JOB STATUS'
FNTEXT4  DC    CL11'END OF TASK'
FNTEXT5  DC    CL23'SUBSYSTEM JOB SELECTION'
FNTEXT6  DC    CL20'ALLOCATION OF SYSOUT'
FNTEXT7  DC    CL22'UNALLOCATION OF SYSOUT'
FNTEXT8  DC    CL13'END OF MEMORY'
FNTEXT9  DC    CL17'WRITE TO OPERATOR'
FNTEXT10 DC    CL18'COMMAND PROCESSING'
FNTEXT11 DC    CL26'REMOTE DEST VALIDITY CHECK'
FNTEXT12 DC    CL12'JOB DELETION'
FNTEXT13 DC    CL16'RE-ENQUEUE A JOB'
FNTEXT14 DC    CL24'DELETE OPERATOR MESSAGES'
FNTEXT15 DC    CL22'SUBSYSTEM VERIFICATION'
FNTEXT16 DC    CL4'OPEN'
FNTEXT17 DC    CL5'CLOSE'
FNTEXT18 DC    CL10'CHECKPOINT'
FNTEXT19 DC    CL18'CHECKPOINT RESTART'
FNTEXT20 DC    CL14'REQUEST JOB ID'
FNTEXT21 DC    CL13'RETURN JOB ID'
USERWORD DC    CL4'USER'
SYSTWORD DC    CL6'SYSTEM'
PATCH    DS    CL51
         ORG   PATCH
@NM00006 DC    17CL3'ZAP'
         ORG   PATCH+51
PUTLRCS  DC    AL1(0)
         DC    AL1(4)
         DC    AL1(8)
         DC    AL1(12)
         DC    AL1(16)
         DC    AL1(0)
         DC    AL1(20)
PARSERCS DC    AL1(0)
         DC    AL1(8)
         DC    AL1(0)
         DC    AL1(12)
         DC    AL1(16)
         DC    AL1(24)
         DC    AL1(28)
VFCALLID DC    CL6'CHECK'
         DC    CL6'CLOSE'
         DC    CL6'ENDREQ'
         DC    CL6'ERASE'
         DC    CL6'GET'
         DC    CL6'OPEN'
         DC    CL6'POINT'
         DC    CL6'PUT'
VSAMOPEN DC    XL1'00'
         DC    XL1'04'
         DC    XL1'68'
         DC    XL1'6C'
         DC    XL1'74'
         DC    XL1'80'
         DC    XL1'84'
         DC    XL1'88'
         DC    XL1'90'
         DC    XL1'94'
         DC    XL1'98'
         DC    XL1'A0'
         DC    XL1'A4'
         DC    XL1'A8'
         DC    XL1'B0'
         DC    XL1'B4'
         DC    XL1'B8'
         DC    XL1'BC'
VSAMCLOS DC    XL1'00'
         DC    XL1'04'
         DC    XL1'84'
         DC    XL1'88'
         DC    XL1'90'
         DC    XL1'94'
         DC    XL1'B8'
VSAMCMI  DC    AL1(1)
         DC    AL1(19)
         DC    AL1(7)
         DC    AL1(8)
         DC    AL1(9)
         DC    AL1(20)
         DC    AL1(17)
VSAMIO8  DC    AL1(4)
         DC    AL1(8)
         DC    AL1(12)
         DC    AL1(16)
         DC    AL1(20)
         DC    AL1(24)
         DC    AL1(28)
         DC    AL1(32)
         DC    AL1(36)
         DC    AL1(40)
         DC    AL1(44)
         DC    AL1(64)
         DC    AL1(68)
         DC    AL1(72)
         DC    AL1(76)
         DC    AL1(80)
         DC    AL1(84)
         DC    AL1(88)
         DC    AL1(92)
         DC    AL1(96)
         DC    AL1(100)
         DC    AL1(104)
         DC    AL1(108)
         DC    AL1(112)
         DC    AL1(116)
VSAMIOC  DC    AL1(4)
         DC    AL1(8)
         DC    AL1(12)
         DC    AL1(16)
         DC    AL1(20)
         DC    AL1(24)
VSAMERRS DC    CL47'NO ERROR'
         DC    CL47'DATA SET ALREADY OPEN'
         DC    CL47'WARNING - MAY HAVE INCOMPATABLE EXTENTS'
         DC    CL47'WARNING - DATA SET/INDEX UPDATED SEPARATELY'
         DC    CL47'WARNING - DATA SET NOT PROPERLY CLOSED'
         DC    CL47'NO DD STATEMENT OR DDNAME DOESN''T MATCH ACB'
         DC    CL47'I/O ERROR WHEN READ JFCB'
         DC    CL47'NOT ENOUGH VIRTUAL STORAGE SPACE'
         DC    CL47'I/O ERROR ON READ/WRITE OF CATALOG RECORD'
         DC    CL47'NO CATALOG RECORD OR ERROR IN SEARCH OF CATALOG'
         DC    CL47'ACB PASSWORD DOESN''T MATCH CATALOG PASSWORD'
         DC    CL47'INCONSISTENT ACB/CATALOG RECORD OPERANDS'
         DC    CL47'I/O ERROR DURING READ OF VOLUME LABEL'
         DC    CL47'DATA SET NOT AVAILABLE FOR SPECIFIED PROCESSING'
         DC    CL47'ERROR IN FIXING A PAGE OF STORAGE'
         DC    CL47'NONEXISTENT OR UNOPENED VSAM CATALOG'
         DC    CL47'I/O ERROR WHILE COMPLETING I/O REQUEST'
         DC    CL47'DATA SET IS WRONG TYPE FOR ACB REQUEST'
         DC    CL47'DATA SET ALREADY CLOSED'
         DC    CL47'UNIDENTIFIED I/O ERROR DURING SEARCH OF CATALOG'
VSAMTXTC DC    CL35'READ I/O ERROR FOR DATA SET'
         DC    CL35'READ I/O ERROR FOR INDEX SET'
         DC    CL35'READ I/O ERROR FOR SEQUENCE SET'
         DC    CL35'WRITE I/O ERROR FOR DATA SET'
         DC    CL35'WRITE I/O ERROR FOR INDEX SET'
         DC    CL35'WRITE I/O ERROR FOR SEQUENCE SET'
VSAMTXT8 DC    CL51'END OF DATA SET AND NO EODAD RTN OR SECOND GET'
         DC    CL51'CANNOT STORE RECORD WITH DUPLICATE KEY'
         DC    CL51'CANNOT PROCESS RECORD OUT OF ASCENDING KEY SEQUENCEC
               '
         DC    CL51'RECORD NOT FOUND'
         DC    CL51'RECORD IN EXCLUSIVE USE BY ANOTHER REQUESTOR'
         DC    CL51'RECORD ON UNMOUNTABLE VOLUME'
         DC    CL51'INSUFFICIENT DIRECT-ACCESS SPACE TO EXTEND DATA SETC
               '
         DC    CL51'INVALID RBA ADDRESS'
         DC    CL51'NO KEY RANGE FOR THIS RECORD'
         DC    CL51'INSUFFICIENT VIRTUAL STORAGE'
         DC    CL51'WORK AREA TOO SMALL FOR RECORD'
         DC    CL51'REACHED STRNO MAXIMUM IN ACB'
         DC    CL51'THIS PROCESSING TYPE NOT SPECIFIED AT OPEN'
         DC    CL51'KEYED REQUEST FOR ENTRY-SEQUENCED DATA SET'
         DC    CL51'ADD/CONVERT PUT ADDRESS TO KSDS'
         DC    CL51'ERASE REQUEST FOR ENTRY-SEQUENCED DATA SET'
         DC    CL51'OPTCD=LOC FOR A PUT OR RPL IN A CHAIN'
         DC    CL51'UNPOSITIONED SEQUENTIAL GET OR KEYED SEQUENTIAL'
         DC    CL51'PUT UPDATE OR ERASE WITHOUT PREVIOUS GET UPDATE'
         DC    CL51'CANNOT CHANGE KEY ON UPDATE REQUEST'
         DC    CL51'CANNOT CHANGE RECORD LENGTH ON ADDRESSED UPDATE'
         DC    CL51'INVALID OR CONFLICTING RPL OPTIONS'
         DC    CL51'RECLEN TOO LARGE, 0, OR TOO SMALL'
         DC    CL51'KEYLEN TOO LARGE OR 0'
         DC    CL51'INVALID I/O REQUEST DURING FIRST OPEN FOR DATA SET'
IKJEFF19 CSECT
*                         /* AVOID PLS2 PROB W/ PAIRING QUOTES
IKJEFF21 CSECT
      PRINT OFF
*** * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
**                                                                    *
**      IKJEFF19 MESSAGE TEXTS, DETECTOR MODULES, AND DESCRIPTIONS    *
**                                                                    *
**        (IDS IKJ56290I - IKJ56299I ARE ASSIGNED TO IKJEFF19 OUT OF  *
**        SUBMIT'S RANGE OF NUMBERS - SEE IKJEFF03 FOR DETAILS)       *
**                                                                    *
**        < > INDICATES AN INSERTION                                  *
**                                                                    *
*** * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
**
**  MESSAGE   DETECTED   ISSUED     LOCATED    PROGRAM
**    ID         IN        BY         IN
**
**  IKJ56291I IKJEFF19   IKJEFF02   IKJEFF19   SUBMIT
**
**            <COMMANDNAME/PROGRAMNAME> FAILED -
**            <'DATA SET'/'DDNAME'> <DATA SET NAME/DDNAME>
**            HAD A <VSAMTYPE> <MACRONAME> ERROR (<ERRORDESCRIPTION>)+
**              RETRY, THEN IF ERROR CALL YOUR SYSTEM PROGRAMMER
**              (<ERRORFIELD> = <X'NNNN'>, REG.15 = <X'RRRR'>)
**
**    EXPLANATION-
**      THE MESSAGE IS IN RESPONSE TO THE INDICATED COMMAND NAME
**      OR PROGRAM NAME.
**
**      FOR THE SUBMIT COMMAND IT INDICATES THAT THE INTRDR
**      DATA SET, USED TO PASS JCL TO THE JOB ENTRY SUBSYSTEM,
**      HAD AN ERROR DETECTED BY THE INDICATED VSAM I/O MACRO.
**      NOTE THAT THE JOB ENTRY SUBSYSTEM (NOT VSAM) HANDLES I/O
**      TO SUBMIT'S INTRDR, AND USES ONLY A SUBSET OF THE VSAM
**      ERROR CODES.
**
**      A DATA SET NAME MAY BE SUPPLIED BY THE CALLER OF IKJEFF19
**      IN THE INPUT PARAMETER LIST.  IF NO DATA SET NAME IS
**      SPECIFIED THE DDNAME, WHICH IS INDIRECTLY POINTED TO BY
**      THE VSAM ACB CONTROL BLOCK, IS INSERTED.
**
**      THE VSAMTYPE INSERT INDICATES WHETHER VSAM OR VSAM'S JOB
**      ENTRY SUBSYSTEM INTERFACE (VSAM/SUBSYSTEM OR VSAM/JES2, ETC.)
**      WAS USED FOR I/O.
**
**      MACRONAME CAN BE OPEN, CLOSE, PUT, OR ENDREQ FOR THE
**      SUBMIT COMMAND.  OTHER POSSIBLE NAMES ARE CHECK, ERASE,
**      GET, AND POINT.
**
**      ERRORDESCRIPTION IS THE REASON FOR THE ERROR, UNLESS
**      THE CODE IS UNDEFINED.
**
**      NNNN IS THE RETURN CODE FROM THE MACRO, TAKEN FROM
**      THE ACBERFL FIELD IN THE ACB CONTROL BLOCK
**      IF THE MACRO WAS OPEN OR CLOSE, AND
**      OTHERWISE TAKEN FROM THE RPLERRCD FIELD.  RRRR IS THE
**      MACRO'S RETURN CODE FROM REGISTER 15.  IT SHOULD BE NONZERO.
**
**      NNNN IS VSAM 'SYNADAF-LIKE' ERROR INFORMATION IF
**      THE ERRORDESCRIPTION IS FOR A PHYSICAL I/O ERROR
**      AND A RPLERMSA AREA WAS SUPPLIED, UNLESS THE
**      VSAM/JOB ENTRY SUBSYSTEM INTERFACE DIDN'T USE IT.
**
**      SEE THE OS/VS VSAM PROGRAMMER'S GUIDE (GC26-3818-0)
**      FOR MORE DETAILED DESCRIPTIONS OF THE ERROR CODE MEANINGS
**      AND THE FORMAT OF PHYSICAL I/O ERROR INFORMATION.  THE
**      OS/VS VSAM SYSTEM INFORMATION PUBLICATION (GC26-3835-0)
**      HAS PROBLEM DETERMINATION INFORMATION FOR VSAM OPEN,
**      CLOSE, AND END-OF-VOLUME WRITE-TO-PROGRAMMER MESSAGES
**      IEC250I THRU IEC253I.
**
**    SYSTEM ACTION-
**      THE COMMAND (OR PROGRAM) SHOULD BE TERMINATED IF THE ERROR
**      CANNOT BE CORRECTED.
**    USER RESPONSE-
**      SEE SECOND LEVEL MESSAGE.
**
**
**  MESSAGE   DETECTED   ISSUED     LOCATED    PROGRAM
**    ID         IN        BY         IN
**
**  IKJ56292I IKJEFF19   IKJEFF02   IKJEFF19   SUBMIT
**
**            <UNABLE TO ISSUE FAILURE MESSAGE <TO TERMINAL>/
**                                             <FOR ID <III>>/
**            INCOMPLETE FAILURE MESSAGE ISSUED <->>
**
**            BECAUSE
**
**            <INVALID PARAMETER LIST PTR (REG.1 MUST POINT TO PTR
**                                                    TO GFPARMS)/
**            INVALID CALLER ID/
**            ZERO CONTROL BLOCK POINTER/
**            ZERO CPPL POINTER WHEN PUTLINE/
**            PUTLINE WAS UNSUCCESSFUL>
**
**            FOR IKJEFF19 GNRLFAIL/VSAMFAIL ROUTINE
**
**    EXPLANATION-
**      THE INPUT PARAMETER LIST TO MODULE IKJEFF19 CONTAINED AN
**      ERROR - EITHER THE REGISTER 1 DID NOT POINT TO A POINTER
**      TO THE GFPARMS PARAMETER LIST FOR IKJEFF19 OR THE
**      GFCALLID FIELD WAS OUTSIDE THE DEFINED RANGE (SEE
**      IKJEFFGF MAPPING MACRO), OR THE GFCBPTR FIELD WAS ZERO
**      WHEN GFCALLID INDICATED A VSAM OR SSREQ ID, OR THE
**      GFCPPLP FIELD WAS ZERO WHEN GFWTPSW WAS OFF (DEFAULT OF
**      PUTLINE).
**
**      IN ADDITION TO THESE INPUT PARAMETER LIST ERRORS,
**      THIS MESSAGE IS ISSUED IF IKJEFF02 MESSAGE ISSUER ROUTINE
**      RETURNED A NONZERO RETURN CODE FROM PUTLINE.
**
**    SYSTEM ACTION-
**      THE PROGRAM SHOULD BE TERMINATED.  THE MODULE WHICH CALLED
**      IKJEFF19 WILL BE PASSED A RETURN CODE OF DECIMAL 80,
**      OR THE NONZERO PUTLINE RETURN CODE, IN REGISTER 15.
**
**    USER RESPONSE-
**      CORRECT THE ERROR IN THE PARAMETER LIST PASSED TO IKJEFF19
**      OR CORRECT THE PROBLEM WITH THE PUTLINE SERVICE ROUTINE.
**
**
**  IKJ56293I IKJEFF19   IKJEFF02   IKJEFF19   SUBMIT
**
**            <COMMANDNAME/PROGRAMNAME> FAILED -
**
**            <<SSNAME> SUBSYSTEM/
**            <SSNAME> SUBSYSTEM INTERFACE/
**            <SRTNNAME> SERVICE ROUTINE HAD>
**
**            <ERRORDESCRIPTION>+
**              RETRY, THEN IF ERROR CALL YOUR SYSTEM
**              PROGRAMMER (REGISTER 15 = <RRRR>)
**
**    EXPLANATION-
**      THE MESSAGE IS IN RESPONSE TO THE INDICATED COMMAND NAME
**      OR PROGRAM NAME.
**
**      IF THE MESSAGE DESCRIBES AN ERROR DETECTED BY THE TSO
**      PARSE OR PUTLINE SERVICE ROUTINE, REGISTER 15 SHOULD
**      HAVE BEEN NONZERO.  IF THE CODE IN REGISTER 15 IS 4
**      OR 20 FOR PARSE NO MESSAGE IS ISSUED.
**
**      SEE THE 'OS/VS2 TSO GUIDE TO WRITING A TERMINAL MONITOR
**      PROGRAM OR A COMMAND PROCESSOR' PUBLICATION FOR MORE
**      INFORMATION ABOUT PARSE AND PUTLINE RETURN CODES.
**
**      IF THE MESSAGE DESCRIBES AN ERROR DETECTED BY THE
**      SUBSYSTEM INTERFACE REQUEST ROUTINE (IEFSSREQ), REGISTER
**      15 SHOULD HAVE BEEN NONZERO.  THE OS/VS2 RELEASE 2
**      SCHEDULER PLM HAS A DESCRIPTION OF THE IEFSSREQ ROUTINE'S
**      LOGIC.  THE OS/VS2 RELEASE 2 DATA AREAS SRL (IN
**      MICROFICHE) CONTAINS THE MAPPING MACRO IEFJSSOB, WHICH
**      HAS COMMENTS GIVING THE MEANINGS OF THE RETURN CODES
**      FROM SSREQ.
**
**    SYSTEM ACTION-
**      THE COMMAND (OR PROGRAM) SHOULD BE TERMINATED.
**
**    USER RESPONSE-
**      CORRECT THE ERROR DETECTED BY THE INDICATED ROUTINE.
**
**
**  IKJ56294I IKJEFF19   IKJEFF02   IKJEFF19   SUBMIT
**
**            <COMMANDNAME/PROGRAMNAME> ENDED DUE TO ERROR,
**            <SYSTEM/USER> ABEND CODE <CCCC>
**
**    EXPLANATION-
**      THE MESSAGE IS IN RESPONSE TO THE INDICATED COMMAND NAME
**      OR PROGRAM NAME.
**
**      THE MESSAGE INDICATES THE ABEND DETECTED BY THE CALLING
**      ROUTINE (WHICH WOULD NORMALLY BE A STAE/STAI/ESTAE/ESTAI
**      ROUTINE).  THIS MESSAGE IS ONLY NEEDED IF THE TSO TERMINAL
**      MONITOR PROGRAM (TMP)'S STAI ROUTINE IS BEING BYPASSED.
**
**    SYSTEM ACTION-
**      THE COMMAND (OR PROGRAM) SHOULD BE TERMINATED.
**
**    USER RESPONSE-
**      CORRECT THE ABEND CONDITION OR CALL YOUR SYSTEM PROGRAMMER.
**
**
         PRINT ON
**
A1    IKJTSMSG ('IKJ56291I ',,' FAILED - ',,' ',,' HAD A ',,' ',,' ERRO+
               R (',,')+'),R4
A2    IKJTSMSG ('IKJ56291I RETRY, THEN IF ERROR CALL YOUR SYSTEM PROGRA+
               MMER (',,' = ',,', REG.15 = ',,')'),19A,R4
**
**
B     IKJTSMSG ('IKJ56292I ',,' ',,' BECAUSE ',,' FOR IKJEFF19 GNRLFAIL+
               /VSAMFAIL ROUTINE'),19B
**
**
C1    IKJTSMSG ('IKJ56293I ',,' FAILED - ',,' ',,' ',,'+'),R5
C2    IKJTSMSG ('IKJ56293I RETRY, THEN IF ERROR CALL YOUR SYSTEM PROGRA+
               MMER (REGISTER 15 = ',,')'),19C,R5
**    NOTE 19E ALSO IS IKJ56293I (HAS ROOM FOR TWO MORE INSERTS)
**
D     IKJTSMSG ('IKJ56294I ',,' ENDED DUE TO ERROR, ',,' ABEND CODE ',)+
               ,19D
**
**
E1    IKJTSMSG ('IKJ56293I ',,' FAILED - ',,' ',,' ',,' ',,' ',,'+'),R6
E2    IKJTSMSG ('IKJ56293I RETRY, THEN IF ERROR CALL YOUR SYSTEM PROGRA+
               MMER (REGISTER 15 = ',,')'),19E,R6
**    NOTE 19C ALSO IS IKJ56293I (HAS ROOM FOR TWO FEWER INSERTS)
**
LAST     IKJTSMSG
IKJEFF19 CSECT
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IKJEFF19 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
SSOBPTR  EQU   @02
TEMPSAVE EQU   @02
TEMPRC   EQU   @02
RPLPTR   EQU   @07
ACBPTR   EQU   @02
SAVEPGMN EQU   @08
I        EQU   @04
TIOTEPTR EQU   @09
GFPLPTR  EQU   @06
R0       EQU   @00
R1       EQU   @01
R2       EQU   @02
R3       EQU   @03
R4       EQU   @04
R14      EQU   @14
R15      EQU   @15
R11      EQU   @11
R12      EQU   @12
CVTPTR   EQU   16
IKJEFF02 EQU   0
VSAMEMSG EQU   0
VSAMMHDR EQU   VSAMEMSG
VSAMMSGL EQU   VSAMMHDR
VSAMTEXT EQU   VSAMEMSG+12
NEWOLDPT EQU   0
CURTCBPT EQU   NEWOLDPT+4
GFPARMS  EQU   0
GFCBPTR  EQU   GFPARMS
GFRCODE  EQU   GFPARMS+4
GF02PTR  EQU   GFPARMS+8
GFCALLID EQU   GFPARMS+12
GFBITS   EQU   GFPARMS+14
GFKEYN08 EQU   GFBITS
GFSUBSYS EQU   GFBITS
GFWTPSW  EQU   GFBITS
GFCPPLP  EQU   GFPARMS+16
GFECBP   EQU   GFPARMS+20
GFDSNLEN EQU   GFPARMS+24
GFPGMNL  EQU   GFPARMS+26
GFDSNP   EQU   GFPARMS+28
GFPGMNP  EQU   GFPARMS+32
RET      EQU   0
CVTMAP   EQU   0
CVTTCBP  EQU   CVTMAP
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIERLC EQU   CVTMAP+144
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
SSIB     EQU   0
SSIBFLG1 EQU   SSIB+6
SSIBSSNM EQU   SSIB+8
SSOB     EQU   0
SSOBFUNC EQU   SSOB+6
SSOBSSIB EQU   SSOB+8
TIOT1    EQU   0
TIOENTRY EQU   0
TIOESTTA EQU   TIOENTRY+1
TIOERLOC EQU   TIOENTRY+2
TIOELINK EQU   TIOERLOC+1
TIOESYOT EQU   TIOELINK
TIOEDDNM EQU   TIOENTRY+4
TIOESTTC EQU   TIOENTRY+15
TIOESTTB EQU   TIOENTRY+16
POOLSTAR EQU   TIOENTRY+20
IFGACB   EQU   0
ACBCOMN  EQU   IFGACB
ACBLENG  EQU   ACBCOMN+2
ACBLENG2 EQU   ACBLENG
ACBAMBL  EQU   ACBCOMN+4
ACBJWA   EQU   ACBAMBL
ACBMACRF EQU   ACBCOMN+12
ACBMACR1 EQU   ACBMACRF
ACBADR   EQU   ACBMACR1
ACBCNV   EQU   ACBMACR1
ACBMACR2 EQU   ACBMACRF+1
ACBBUFPL EQU   ACBCOMN+20
ACBMACR3 EQU   ACBBUFPL
ACBRECFM EQU   ACBCOMN+24
ACBCCTYP EQU   ACBCOMN+25
ACBOPT   EQU   ACBCOMN+26
ACBDSORG EQU   ACBOPT
ACBCROPS EQU   ACBDSORG
ACBDVIND EQU   ACBDSORG
ACBEXLST EQU   ACBCOMN+36
ACBDDNM  EQU   ACBCOMN+40
ACBTIOT  EQU   ACBDDNM
ACBAMETH EQU   ACBDDNM+3
ACBOFLGS EQU   ACBCOMN+48
ACBOPEN  EQU   ACBOFLGS
ACBEXFG  EQU   ACBOFLGS
ACBIOSFG EQU   ACBOFLGS
ACBERFLG EQU   ACBCOMN+49
ACBINFLG EQU   ACBCOMN+50
ACBVVIC  EQU   ACBINFLG
ACBUJFCB EQU   ACBCOMN+52
ACBBLKSZ EQU   ACBCOMN+60
IFGRPL   EQU   0
RPLCOMN  EQU   IFGRPL
RPLIDWD  EQU   RPLCOMN
RPLLEN   EQU   RPLIDWD+3
RPLECB   EQU   RPLCOMN+8
RPLFDBWD EQU   RPLCOMN+12
RPLFDBK  EQU   RPLFDBWD+1
RPLRTNCD EQU   RPLFDBK
RPLCNDCD EQU   RPLFDBK+1
RPLCMPON EQU   RPLCNDCD
RPLFDB2  EQU   RPLCMPON
RPLERRCD EQU   RPLCNDCD+1
RPLFDB3  EQU   RPLERRCD
RPLKEYLE EQU   RPLCOMN+16
RPLDACB  EQU   RPLCOMN+24
RPLARG   EQU   RPLCOMN+36
RPLOPTCD EQU   RPLCOMN+40
RPLOPT1  EQU   RPLOPTCD
RPLECBSW EQU   RPLOPT1
RPLOPT2  EQU   RPLOPTCD+1
RPLADR   EQU   RPLOPT2
RPLOPT3  EQU   RPLOPTCD+2
RPLOPT4  EQU   RPLOPTCD+3
RPLNXTRP EQU   RPLCOMN+44
RPLOPTC2 EQU   RPLCOMN+56
RPLOPT5  EQU   RPLOPTC2
RPLWRTYP EQU   RPLOPT5
RPLOPT6  EQU   RPLOPTC2+1
RPLUNTYP EQU   RPLOPT6
RPLOPT7  EQU   RPLOPTC2+2
RPLCNOPT EQU   RPLOPT7
RPLOPT8  EQU   RPLOPTC2+3
RPLRBAR  EQU   RPLCOMN+60
RPLAIXID EQU   RPLRBAR+2
RPLEXTDS EQU   RPLCOMN+68
RPLEXTD1 EQU   RPLEXTDS
RPLEMLEN EQU   RPLCOMN+70
RPLERMSA EQU   RPLCOMN+72
CPPL     EQU   0
CPPLECT  EQU   CPPL+12
ECT      EQU   0
ECTPCMD  EQU   ECT+12
ECTSCMD  EQU   ECT+20
ECTSWS   EQU   ECT+28
ECTSWS2  EQU   ECT+40
ECTSWS21 EQU   ECTSWS2
TCBFIX   EQU   0
TCBFRS   EQU   TCBFIX
TCB      EQU   0
TCBPIE   EQU   TCB+4
TCBPMASK EQU   TCBPIE
TCBTIO   EQU   TCB+12
TCBCMP   EQU   TCB+16
TCBCMPF  EQU   TCBCMP
TCBCPP   EQU   TCBCMPF
TCBSTCC  EQU   TCBCMPF
TCBCDBL  EQU   TCBCMPF
TCBCWTO  EQU   TCBCMPF
TCBCIND  EQU   TCBCMPF
TCBCMSG  EQU   TCBCMPF
TCBTRN   EQU   TCB+20
TCBABF   EQU   TCBTRN
TCBMSS   EQU   TCB+24
TCBPKF   EQU   TCB+28
TCBFLGS  EQU   TCB+29
TCBFLGS1 EQU   TCBFLGS
TCBFLGS2 EQU   TCBFLGS+1
TCBFLGS3 EQU   TCBFLGS+2
TCBFLGS4 EQU   TCBFLGS+3
TCBFLGS5 EQU   TCBFLGS+4
TCBABWF  EQU   TCBFLGS5
TCBJPQ   EQU   TCB+44
TCBPURGE EQU   TCBJPQ
TCBGRS   EQU   TCB+48
TCBFSA   EQU   TCB+112
TCBTME   EQU   TCB+120
TCBJSTCB EQU   TCB+124
TCBTSFLG EQU   TCB+148
TCBTSTSK EQU   TCBTSFLG
TCBSTAB  EQU   TCB+160
TCBNSTAE EQU   TCBSTAB
TCBTCT   EQU   TCB+164
TCBTCTGF EQU   TCBTCT
TCBSCNDY EQU   TCB+172
TCBNDSP  EQU   TCBSCNDY
TCBNDSP1 EQU   TCBNDSP+1
TCBNDSP2 EQU   TCBNDSP+2
TCBNDSP3 EQU   TCBNDSP+3
TCBJSCB  EQU   TCB+180
TCBRECDE EQU   TCBJSCB
TCBEXT1  EQU   TCB+196
TCBBITS  EQU   TCB+200
TCBNDSP4 EQU   TCBBITS
TCBNDSP5 EQU   TCBBITS+1
TCBFLGS6 EQU   TCBBITS+2
TCBFLGS7 EQU   TCBBITS+3
TCBDAR   EQU   TCB+204
TCBDARC  EQU   TCBDAR
TCBEXT2  EQU   TCB+208
TCBFOE   EQU   TCB+244
TCBESTAE EQU   TCB+264
TCBESTRM EQU   TCBESTAE+1
TCBFBYT1 EQU   TCB+276
TCBFBYT2 EQU   TCB+277
TCBRV124 EQU   TCB+278
TCBRV133 EQU   TCB+279
TCBXTNT2 EQU   0
TCBGTF   EQU   TCBXTNT2
TCBTFLG  EQU   TCBGTF
TCBRV146 EQU   TCBXTNT2+28
TCBRV155 EQU   TCBXTNT2+29
TCBRV164 EQU   TCBXTNT2+30
TCBRV173 EQU   TCBXTNT2+31
MSGECB   EQU   0
MSGTMCT  EQU   0
INPUTPL  EQU   0
SRTNINST EQU   SRTNINFO
TSSOBFN  EQU   TSSOBFNI
TCBPTR   EQU   CURTCBPT
TIOTPTR  EQU   TCBTIO
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
SSIBPTR  EQU   SSOBSSIB
TIOEDEVE EQU   TIOESTTB
TIOSTTB  EQU   TIOEDEVE
CPPLPTR  EQU   GFCPPLP
ECTPTR   EQU   CPPLECT
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
TIOUCBP  EQU   TIOEDEVE+1
TIOVERF  EQU   TIOSTTB
TIOUNLD  EQU   TIOSTTB
TIOMNTD  EQU   TIOSTTB
TIOSETU  EQU   TIOSTTB
TIOVLSR  EQU   TIOSTTB
TIOPVIO  EQU   TIOSTTB
TIOREQD  EQU   TIOSTTB
TIOUSED  EQU   TIOSTTB
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTRV619 EQU   CVTS01+692
CVTRV618 EQU   CVTS01+688
CVTRV617 EQU   CVTS01+684
CVTRV616 EQU   CVTS01+680
CVTRV615 EQU   CVTS01+676
CVTRV614 EQU   CVTS01+672
CVTRV613 EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
@NM00049 EQU   TCBXTNT2+32
TCBRV181 EQU   TCBRV173
TCBRV180 EQU   TCBRV173
TCBRV179 EQU   TCBRV173
TCBRV178 EQU   TCBRV173
TCBRV177 EQU   TCBRV173
TCBRV176 EQU   TCBRV173
TCBRV175 EQU   TCBRV173
TCBRV174 EQU   TCBRV173
TCBRV172 EQU   TCBRV164
TCBRV171 EQU   TCBRV164
TCBRV170 EQU   TCBRV164
TCBRV169 EQU   TCBRV164
TCBRV168 EQU   TCBRV164
TCBRV167 EQU   TCBRV164
TCBRV166 EQU   TCBRV164
TCBRV165 EQU   TCBRV164
TCBRV163 EQU   TCBRV155
TCBRV162 EQU   TCBRV155
TCBRV161 EQU   TCBRV155
TCBRV160 EQU   TCBRV155
TCBRV159 EQU   TCBRV155
TCBRV158 EQU   TCBRV155
TCBRV157 EQU   TCBRV155
TCBRV156 EQU   TCBRV155
TCBRV154 EQU   TCBRV146
TCBRV153 EQU   TCBRV146
TCBRV152 EQU   TCBRV146
TCBRV151 EQU   TCBRV146
TCBRV150 EQU   TCBRV146
TCBRV149 EQU   TCBRV146
TCBRV148 EQU   TCBRV146
TCBRV147 EQU   TCBRV146
TCBRV145 EQU   TCBXTNT2+26
TCBRV144 EQU   TCBXTNT2+24
TCBRV143 EQU   TCBXTNT2+20
TCBRV142 EQU   TCBXTNT2+16
TCBRSV49 EQU   TCBXTNT2+12
TCBEVENT EQU   TCBXTNT2+8
TCBRCMP  EQU   TCBXTNT2+5
TCBRSVAB EQU   TCBXTNT2+4
TCBGTFA  EQU   TCBGTF+1
TCBRSV47 EQU   TCBTFLG
TCBRSV46 EQU   TCBTFLG
TCBRSV45 EQU   TCBTFLG
TCBRSV44 EQU   TCBTFLG
TCBRSV43 EQU   TCBTFLG
TCBDSPIT EQU   TCBTFLG
TCBERRTN EQU   TCBTFLG
TCBASYNC EQU   TCBTFLG
@NM00048 EQU   TCB+296
TCBSVCA2 EQU   TCB+292
TCBSWASA EQU   TCB+288
TCBDBTB  EQU   TCB+284
TCBRPT   EQU   TCB+280
TCBRV141 EQU   TCBRV133
TCBRV140 EQU   TCBRV133
TCBRV139 EQU   TCBRV133
TCBRV138 EQU   TCBRV133
TCBRV137 EQU   TCBRV133
TCBRV136 EQU   TCBRV133
TCBRV135 EQU   TCBRV133
TCBRV134 EQU   TCBRV133
TCBRV132 EQU   TCBRV124
TCBRV131 EQU   TCBRV124
TCBRV130 EQU   TCBRV124
TCBRV129 EQU   TCBRV124
TCBRV128 EQU   TCBRV124
TCBRV127 EQU   TCBRV124
TCBRV126 EQU   TCBRV124
TCBRV125 EQU   TCBRV124
TCBRV123 EQU   TCBFBYT2
TCBRV122 EQU   TCBFBYT2
TCBECBNV EQU   TCBFBYT2
TCBSSSYN EQU   TCBFBYT2
TCBFPRAP EQU   TCBFBYT2
TCBFDW   EQU   TCBFBYT2
TCBFMW   EQU   TCBFBYT2
TCBCNCB  EQU   TCBFBYT2
TCBLLH   EQU   TCBFBYT1
TCBRV113 EQU   TCBFBYT1
TCBEOT   EQU   TCBFBYT1
TCBRTM2  EQU   TCBFBYT1
TCBPGNLY EQU   TCBFBYT1
TCBNDIOS EQU   TCBFBYT1
TCBACTIV EQU   TCBFBYT1
TCBEOTFM EQU   TCBFBYT1
TCBAFFN  EQU   TCB+274
TCBCCPVI EQU   TCB+272
TCBUKYSP EQU   TCB+268
TCBMODE  EQU   TCBESTAE+3
TCBERTYP EQU   TCBESTAE+2
TCBRV314 EQU   TCBESTRM
TCBRV313 EQU   TCBESTRM
TCBRV312 EQU   TCBESTRM
TCBRV311 EQU   TCBESTRM
TCBRV310 EQU   TCBESTRM
TCBRV309 EQU   TCBESTRM
TCBRV308 EQU   TCBESTRM
TCBETERM EQU   TCBESTRM
TCBSCBKY EQU   TCBESTAE
TCBRTM12 EQU   TCB+260
TCBTCBID EQU   TCB+256
TCBRSV96 EQU   TCB+252
TCBSWA   EQU   TCB+248
TCBFOEA  EQU   TCBFOE+1
TCBRSV42 EQU   TCBFOE
TCBRV306 EQU   TCB+240
TCBRSV41 EQU   TCB+239
TCBTID   EQU   TCB+238
TCBRSVAA EQU   TCB+237
TCBABCUR EQU   TCB+236
TCBTMSAV EQU   TCB+232
TCBIOTIM EQU   TCB+228
TCBRTWA  EQU   TCB+224
TCBBACK  EQU   TCB+220
TCBTIRB  EQU   TCB+216
TCBAECB  EQU   TCB+212
TCBEXT2A EQU   TCBEXT2+1
TCBRSV39 EQU   TCBEXT2
TCBSTMCT EQU   TCB+207
TCBSYSCT EQU   TCB+206
TCBRSV37 EQU   TCB+205
TCBEXSVC EQU   TCBDAR
TCBDARMS EQU   TCBDAR
TCBDARWT EQU   TCBDAR
TCBDARO  EQU   TCBDAR
TCBDARMC EQU   TCBDARC
TCBDARD  EQU   TCBDAR
TCBDARS  EQU   TCBDAR
TCBDARP  EQU   TCBDAR
TCBGTOFM EQU   TCBFLGS7
TCBADMP  EQU   TCBFLGS7
TCBRSTSK EQU   TCBFLGS7
TCBSVCS  EQU   TCBFLGS7
TCBSTACK EQU   TCBFLGS7
TCBRSV34 EQU   TCBFLGS7
TCBRSV33 EQU   TCBFLGS7
TCBGPECB EQU   TCBFLGS7
TCBNTJS  EQU   TCBFLGS6
TCBAPG   EQU   TCBFLGS6
TCBMIGR  EQU   TCBFLGS6
TCBRV303 EQU   TCBFLGS6
TCBSPVLK EQU   TCBFLGS6
TCBCPU   EQU   TCBFLGS6
TCBPIE17 EQU   TCBFLGS6
TCBRV    EQU   TCBFLGS6
TCBRSV79 EQU   TCBNDSP5
TCBRSV78 EQU   TCBNDSP5
TCBRSV77 EQU   TCBNDSP5
TCBRSV76 EQU   TCBNDSP5
TCBRSV75 EQU   TCBNDSP5
TCBRSV74 EQU   TCBNDSP5
TCBRSV95 EQU   TCBNDSP5
TCBRSV94 EQU   TCBNDSP5
TCBRSV93 EQU   TCBNDSP4
TCBRSV92 EQU   TCBNDSP4
TCBRSV91 EQU   TCBNDSP4
TCBRSV90 EQU   TCBNDSP4
TCBRSV89 EQU   TCBNDSP4
TCBRSV88 EQU   TCBNDSP4
TCBRSV87 EQU   TCBNDSP4
TCBRSV86 EQU   TCBNDSP4
TCBEXT1A EQU   TCBEXT1+1
TCBRSV32 EQU   TCBEXT1
TCBEXCPD EQU   TCB+192
TCBIOBRC EQU   TCB+188
TCBDDWTC EQU   TCB+186
TCBDDEXC EQU   TCB+184
TCBJSCBB EQU   TCBJSCB+1
@NM00047 EQU   TCBRECDE
TCBREC   EQU   TCBRECDE
TCBMDIDS EQU   TCB+176
TCBNDINT EQU   TCBNDSP3
TCBRSV27 EQU   TCBNDSP3
TCBRSV26 EQU   TCBNDSP3
TCBRSV25 EQU   TCBNDSP3
TCBRSV24 EQU   TCBNDSP3
TCBSRBND EQU   TCBNDSP3
TCBRV302 EQU   TCBNDSP3
TCBLJSND EQU   TCBNDSP3
TCBABE   EQU   TCBNDSP2
TCBDSS   EQU   TCBNDSP2
TCBOWAIT EQU   TCBNDSP2
TCBIWAIT EQU   TCBNDSP2
TCBNDTS  EQU   TCBNDSP2
TCBNDSVC EQU   TCBNDSP2
TCBSTPP  EQU   TCBNDSP2
TCBABD   EQU   TCBNDSP2
TCBRSV22 EQU   TCBNDSP1
TCBPIEND EQU   TCBNDSP1
TCBTPSP  EQU   TCBNDSP1
TCBDDRND EQU   TCBNDSP1
TCBRSPND EQU   TCBNDSP1
TCBRSTND EQU   TCBNDSP1
TCBDARPN EQU   TCBNDSP1
TCBDARTN EQU   TCBNDSP1
TCBNDSP0 EQU   TCBNDSP
TCBUSER  EQU   TCB+168
TCBTCTB  EQU   TCBTCT+1
TCBRSV9C EQU   TCBTCTGF
TCBRSV9B EQU   TCBTCTGF
TCBRSV9A EQU   TCBTCTGF
TCBRSV99 EQU   TCBTCTGF
TCBRSV98 EQU   TCBTCTGF
TCBRSV97 EQU   TCBTCTGF
TCBRSV20 EQU   TCBTCTGF
TCBSMFGF EQU   TCBTCTGF
TCBSTABB EQU   TCBSTAB+1
TCBSTCUR EQU   TCBNSTAE
TCBRV301 EQU   TCBNSTAE
TCBSYNCH EQU   TCBNSTAE
TCBHALT  EQU   TCBNSTAE
TCBPPSUP EQU   TCBNSTAE
TCB33E   EQU   TCBNSTAE
TCBQUIES EQU   TCBNSTAE
TCBSTABE EQU   TCBNSTAE
TCBAQE   EQU   TCB+156
TCBPQE   EQU   TCB+152
TCBTSDP  EQU   TCB+151
TCBTSLP  EQU   TCB+150
TCBSTPCT EQU   TCB+149
TCBCPUBN EQU   TCBTSFLG
TCBDYDSP EQU   TCBTSFLG
TCBRSV18 EQU   TCBTSFLG
TCBRSV17 EQU   TCBTSFLG
TCBTIOTG EQU   TCBTSFLG
TCBATT   EQU   TCBTSFLG
TCBSTPPR EQU   TCBTSFLG
TCBRV300 EQU   TCBTSTSK
TCBECB   EQU   TCB+144
TCBIQE   EQU   TCB+140
TCBLTC   EQU   TCB+136
TCBOTC   EQU   TCB+132
TCBNTC   EQU   TCB+128
TCBJSTCA EQU   TCBJSTCB+1
TCBRSV16 EQU   TCBJSTCB
TCBTQET  EQU   TCBTME
TCBTCB   EQU   TCB+116
TCBFSAB  EQU   TCBFSA+1
TCBQEL   EQU   TCBFSA
TCBGRS15 EQU   TCBGRS+60
TCBGRS14 EQU   TCBGRS+56
TCBGRS13 EQU   TCBGRS+52
TCBGRS12 EQU   TCBGRS+48
TCBGRS11 EQU   TCBGRS+44
TCBGRS10 EQU   TCBGRS+40
TCBGRS9  EQU   TCBGRS+36
TCBGRS8  EQU   TCBGRS+32
TCBGRS7  EQU   TCBGRS+28
TCBGRS6  EQU   TCBGRS+24
TCBGRS5  EQU   TCBGRS+20
TCBGRS4  EQU   TCBGRS+16
TCBGRS3  EQU   TCBGRS+12
TCBGRS2  EQU   TCBGRS+8
TCBGRS1  EQU   TCBGRS+4
TCBGRS0  EQU   TCBGRS
TCBJPQB  EQU   TCBJPQ+1
TCBRSV15 EQU   TCBPURGE
TCBRSV14 EQU   TCBPURGE
TCBRSV13 EQU   TCBPURGE
TCBRSV12 EQU   TCBPURGE
TCBRSV11 EQU   TCBPURGE
TCBRSV10 EQU   TCBPURGE
TCBRSV09 EQU   TCBPURGE
TCBJPQF  EQU   TCBPURGE
TCBJLB   EQU   TCB+40
TCBLLS   EQU   TCB+36
TCBDSP   EQU   TCB+35
TCBLMP   EQU   TCB+34
TCBPNDSP EQU   TCBFLGS5
TCBFCD1  EQU   TCBFLGS5
TCBSTP   EQU   TCBFLGS5
TCBSYS   EQU   TCBFLGS5
TCBANDSP EQU   TCBFLGS5
TCBPAGE  EQU   TCBFLGS5
TCBUXNDF EQU   TCBABWF
TCBFC    EQU   TCBFLGS5
TCBONDSP EQU   TCBFLGS4
TCBMPCND EQU   TCBFLGS4
TCBMPCVQ EQU   TCBFLGS4
TCBUXNDV EQU   TCBFLGS4
TCBHNDSP EQU   TCBFLGS4
TCBRQENA EQU   TCBFLGS4
TCBSER   EQU   TCBFLGS4
TCBNDUMP EQU   TCBFLGS4
TCBDWSTA EQU   TCBFLGS3
TCBRSV08 EQU   TCBFLGS3
TCBRSV07 EQU   TCBFLGS3
TCBRSV06 EQU   TCBFLGS3
TCBABGM  EQU   TCBFLGS3
TCBABTRM EQU   TCBFLGS3
TCBADINP EQU   TCBFLGS3
TCBFSM   EQU   TCBFLGS3
TCBFTS   EQU   TCBFLGS2
TCBFETXR EQU   TCBFLGS2
TCBFDSOP EQU   TCBFLGS2
TCBFJMC  EQU   TCBFLGS2
TCBFSMC  EQU   TCBFLGS2
TCBFABOP EQU   TCBFLGS2
TCBFSTI  EQU   TCBFLGS2
TCBFOINP EQU   TCBFLGS2
TCBFX    EQU   TCBFLGS1
TCBFS    EQU   TCBFLGS1
TCBFT    EQU   TCBFLGS1
TCBPDUMP EQU   TCBFLGS1
TCBNONPR EQU   TCBFLGS1
TCBFERA  EQU   TCBFLGS1
TCBFE    EQU   TCBFLGS1
TCBFA    EQU   TCBFLGS1
TCBZERO  EQU   TCBPKF
TCBFLAG  EQU   TCBPKF
TCBMSSB  EQU   TCBMSS+1
TCBRSV03 EQU   TCBMSS
TCBTRNB  EQU   TCBTRN+1
TCBRSV02 EQU   TCBABF
TCBOLTEP EQU   TCBABF
TCBTCP   EQU   TCBABF
TCBTCPP  EQU   TCBABF
TCBRSV01 EQU   TCBABF
TCBGRPH  EQU   TCBABF
TCBNOCHK EQU   TCBABF
TCBMOD91 EQU   TCBABF
TCBCMPC  EQU   TCBCMP+1
TCBRV318 EQU   TCBCMSG
TCBRV317 EQU   TCBCIND
TCBRV316 EQU   TCBCWTO
TCBCASID EQU   TCBCDBL
TCBNOCC  EQU   TCBSTCC
TCBDMPO  EQU   TCBCPP
TCBCSTEP EQU   TCBCMPF
TCBCREQ  EQU   TCBCMPF
TCBDEB   EQU   TCB+8
TCBPIEA  EQU   TCBPIE+1
TCBPM    EQU   TCBPMASK
@NM00046 EQU   TCBPMASK
TCBRBP   EQU   TCB
TCBFRS6  EQU   TCBFRS+24
TCBFRS4  EQU   TCBFRS+16
TCBFRS2  EQU   TCBFRS+8
TCBFRS0  EQU   TCBFRS
@NM00045 EQU   ECT+52
@NM00044 EQU   ECT+48
@NM00043 EQU   ECT+44
@NM00042 EQU   ECTSWS2+1
@NM00041 EQU   ECTSWS21
ECTTABND EQU   ECTSWS21
ECTDEFCS EQU   ECTSWS21
ECTBKPB  EQU   ECT+36
ECTUSER  EQU   ECT+32
ECTDDNUM EQU   ECT+29
ECTATTN  EQU   ECTSWS
ECTBKGRD EQU   ECTSWS
ECTNNOT  EQU   ECTSWS
ECTNMAL  EQU   ECTSWS
ECTLOGF  EQU   ECTSWS
ECTATRM  EQU   ECTSWS
@NM00040 EQU   ECTSWS
ECTNOPD  EQU   ECTSWS
ECTSMSG  EQU   ECT+9
ECTMSGF  EQU   ECT+8
ECTIOWA  EQU   ECT+4
ECTRTCD  EQU   ECT+1
ECTRCDF  EQU   ECT
CPPLPSCB EQU   CPPL+8
CPPLUPT  EQU   CPPL+4
CPPLCBUF EQU   CPPL
RPLACTIV EQU   RPLCOMN+69
RPLBRANC EQU   RPLEXTD1
RPLNIB   EQU   RPLEXTD1
@NM00039 EQU   RPLEXTD1
RPLEXIT  EQU   RPLEXTD1
RPLNEXIT EQU   RPLEXTD1
RPLEXSCH EQU   RPLEXTD1
RPLDDDD  EQU   RPLRBAR+4
@NM00038 EQU   RPLRBAR+3
@NM00037 EQU   RPLAIXID
RPLAXPKP EQU   RPLAIXID
RPLAIXPC EQU   RPLRBAR
RPLRSV88 EQU   RPLOPT8
RPLUNCON EQU   RPLOPT8
RPLACTV  EQU   RPLOPT8
RPLSESS  EQU   RPLOPT8
RPLPEND  EQU   RPLOPT8
RPLODPRM EQU   RPLOPT8
RPLODACP EQU   RPLOPT8
RPLODACQ EQU   RPLOPT8
RPLRSV78 EQU   RPLOPT7
RPLRSV77 EQU   RPLOPT7
RPLRLSOP EQU   RPLOPT7
RPLTPOST EQU   RPLOPT7
RPLQOPT  EQU   RPLOPT7
RPLCNIMM EQU   RPLCNOPT
RPLCNANY EQU   RPLCNOPT
RPLCNALL EQU   RPLCNOPT
RPLRSV68 EQU   RPLOPT6
RPLRSV67 EQU   RPLOPT6
RPLLOCK  EQU   RPLOPT6
RPLNCOND EQU   RPLOPT6
RPLCOND  EQU   RPLOPT6
RPLEOT   EQU   RPLUNTYP
RPLEOM   EQU   RPLUNTYP
RPLEOB   EQU   RPLUNTYP
RPLWROPT EQU   RPLOPT5
RPLNODE  EQU   RPLOPT5
RPLERACE EQU   RPLWRTYP
RPLEAU   EQU   RPLWRTYP
RPLNERAS EQU   RPLWRTYP
RPLPSOPT EQU   RPLOPT5
@NM00036 EQU   RPLOPT5
RPLDLGIN EQU   RPLOPT5
RPLBUFL  EQU   RPLCOMN+52
RPLRLEN  EQU   RPLCOMN+48
RPLCHAIN EQU   RPLNXTRP
RPLBOP   EQU   RPLOPT4
@NM00035 EQU   RPLOPT4
RPLMKFRM EQU   RPLOPT4
RPLENDTR EQU   RPLOPT4
RPLALIGN EQU   RPLOPT3
RPLFMT   EQU   RPLOPT3
RPLFLD   EQU   RPLOPT3
RPLVFY   EQU   RPLOPT3
RPLBLK   EQU   RPLOPT3
RPLSFORM EQU   RPLOPT3
RPLEODS  EQU   RPLOPT3
RPLNSP   EQU   RPLOPT2
RPLUPD   EQU   RPLOPT2
@NM00034 EQU   RPLOPT2
RPLLRD   EQU   RPLOPT2
RPLBWD   EQU   RPLOPT2
RPLCNV   EQU   RPLOPT2
RPLADD   EQU   RPLADR
RPLKEY   EQU   RPLOPT2
RPLECBIN EQU   RPLECBSW
RPLGEN   EQU   RPLOPT1
RPLKGE   EQU   RPLOPT1
RPLASY   EQU   RPLOPT1
RPLSKP   EQU   RPLOPT1
RPLSEQ   EQU   RPLOPT1
RPLDIR   EQU   RPLOPT1
RPLLOC   EQU   RPLOPT1
RPLDAF   EQU   RPLARG+2
RPLSAF   EQU   RPLARG
RPLAREA  EQU   RPLCOMN+32
RPLTCBPT EQU   RPLCOMN+28
RPLCCHAR EQU   RPLCOMN+20
RPLSTRID EQU   RPLCOMN+18
RPLKEYL  EQU   RPLKEYLE
RPLRDSOH EQU   RPLFDB3
RPLRLG   EQU   RPLFDB3
RPLLGFRC EQU   RPLFDB3
RPLREOT  EQU   RPLFDB3
RPLREOM  EQU   RPLFDB3
RPLREOB  EQU   RPLFDB3
RPLSV32  EQU   RPLFDB3
RPLUINPT EQU   RPLFDB3
RPLSTSAV EQU   RPLFDB2
RPLCUERR EQU   RPLFDB2
RPLDLGFL EQU   RPLFDB2
RPLIOERR EQU   RPLFDB2
RPLDVUNS EQU   RPLFDB2
RPLATND  EQU   RPLFDB2
RPLRVID  EQU   RPLFDB2
RPLERLK  EQU   RPLFDB2
RPLERREG EQU   RPLRTNCD
RPLSTAT  EQU   RPLFDBWD
RPLPOST  EQU   RPLECB
RPLWAIT  EQU   RPLECB
RPLPLHPT EQU   RPLCOMN+4
RPLLEN2  EQU   RPLLEN
RPLREQ   EQU   RPLIDWD+2
RPLSTYP  EQU   RPLIDWD+1
RPLID    EQU   RPLIDWD
ACBAPID  EQU   ACBCOMN+72
ACBCBMWA EQU   ACBCOMN+68
ACBUAPTR EQU   ACBCOMN+64
ACBLRECL EQU   ACBCOMN+62
ACBMSGLN EQU   ACBBLKSZ
ACBBUFSP EQU   ACBCOMN+56
@NM00033 EQU   ACBUJFCB+1
ACBOPTN  EQU   ACBUJFCB
@NM00032 EQU   ACBINFLG+1
ACBBYPSS EQU   ACBINFLG
ACBSDS   EQU   ACBVVIC
ACBUCRA  EQU   ACBINFLG
ACBSCRA  EQU   ACBINFLG
ACBCAT   EQU   ACBINFLG
ACBIJRQE EQU   ACBINFLG
ACBJEPS  EQU   ACBINFLG
@NM00031 EQU   ACBINFLG
ACBBUSY  EQU   ACBIOSFG
ACBLOCK  EQU   ACBEXFG
@NM00030 EQU   ACBOFLGS
ACBDSERR EQU   ACBOFLGS
ACBEOV   EQU   ACBOFLGS
@NM00029 EQU   ACBOFLGS
ACBDEB   EQU   ACBDDNM+5
ACBERFL  EQU   ACBDDNM+4
ACBAM    EQU   ACBAMETH
ACBINFL  EQU   ACBDDNM+2
ACBUEL   EQU   ACBEXLST
ACBPASSW EQU   ACBCOMN+32
ACBMSGAR EQU   ACBCOMN+28
@NM00028 EQU   ACBDSORG+1
ACBDORGA EQU   ACBDSORG+1
@NM00027 EQU   ACBDSORG
ACBOPTJ  EQU   ACBDVIND
ACBCRNRE EQU   ACBCROPS
ACBCRNCK EQU   ACBCROPS
ACBASA   EQU   ACBCCTYP
@NM00026 EQU   ACBCCTYP
ACBTRCID EQU   ACBCCTYP
@NM00025 EQU   ACBRECFM
ACBRECAF EQU   ACBRECFM
ACBJBUF  EQU   ACBBUFPL+2
ACBMACR4 EQU   ACBBUFPL+1
@NM00024 EQU   ACBMACR3
ACBNCFX  EQU   ACBMACR3
ACBSIS   EQU   ACBMACR3
ACBDFR   EQU   ACBMACR3
ACBICI   EQU   ACBMACR3
ACBGSR   EQU   ACBMACR3
ACBLSR   EQU   ACBMACR3
@NM00023 EQU   ACBMACR3
ACBBUFNI EQU   ACBCOMN+18
ACBBUFND EQU   ACBCOMN+16
ACBSTRNO EQU   ACBCOMN+15
ACBBSTNO EQU   ACBCOMN+14
ACBAIX   EQU   ACBMACR2
ACBDSN   EQU   ACBMACR2
ACBRST   EQU   ACBMACR2
ACBLOGON EQU   ACBMACR2
ACBSKP   EQU   ACBMACR2
@NM00022 EQU   ACBMACR2
ACBUBF   EQU   ACBMACR1
ACBOUT   EQU   ACBMACR1
ACBIN    EQU   ACBMACR1
ACBDIR   EQU   ACBMACR1
ACBSEQ   EQU   ACBMACR1
ACBBLK   EQU   ACBCNV
ACBADD   EQU   ACBADR
ACBKEY   EQU   ACBMACR1
ACBINRTN EQU   ACBCOMN+8
ACBIBCT  EQU   ACBJWA
ACBLEN2  EQU   ACBLENG2
ACBSTYP  EQU   ACBCOMN+1
ACBID    EQU   ACBCOMN
TIOTFEND EQU   POOLSTAR+16
TIOPSLOT EQU   POOLSTAR+13
TIOPSTTB EQU   POOLSTAR+12
TIOPPOOL EQU   POOLSTAR+4
TIOPNSRT EQU   POOLSTAR+3
@NM00021 EQU   POOLSTAR+2
TIOPNSLT EQU   POOLSTAR+1
@NM00020 EQU   POOLSTAR
TIOEFSRT EQU   TIOENTRY+17
TIOSVERF EQU   TIOESTTB
TIOSUNLD EQU   TIOESTTB
TIOSMNTD EQU   TIOESTTB
TIOSSETU EQU   TIOESTTB
TIOSVLSR EQU   TIOESTTB
TIOSPVIO EQU   TIOESTTB
TIOSREQD EQU   TIOESTTB
TIOSUSED EQU   TIOESTTB
TIOSBALS EQU   TIOESTTC
TIOSBALP EQU   TIOESTTC
TIOSVOLS EQU   TIOESTTC
TIOSVOLP EQU   TIOESTTC
TIOSAFFS EQU   TIOESTTC
TIOSAFFP EQU   TIOESTTC
TIOSDEFR EQU   TIOESTTC
TIOSDKCR EQU   TIOESTTC
TIOEJFCB EQU   TIOENTRY+12
TIOTREM  EQU   TIOELINK
TIOESSDS EQU   TIOESYOT
TIOESYIN EQU   TIOELINK
TIOEQNAM EQU   TIOELINK
TIOEDYNM EQU   TIOELINK
TIOTTERM EQU   TIOELINK
TIOTRV01 EQU   TIOELINK
TIOSYOUT EQU   TIOELINK
TIOEWTCT EQU   TIOERLOC
TIOSDSP2 EQU   TIOESTTA
TIOSDSP1 EQU   TIOESTTA
TIOSLABL EQU   TIOESTTA
TIOSDADS EQU   TIOESTTA
TIOSJBLB EQU   TIOESTTA
TIOSPLTS EQU   TIOESTTA
TIOSPLTP EQU   TIOESTTA
TIOSLTYP EQU   TIOESTTA
TIOELNGH EQU   TIOENTRY
TIOCSTEP EQU   TIOT1+8
TIOCNJOB EQU   TIOT1
SSOBINDV EQU   SSOB+16
SSOBRETN EQU   SSOB+12
SSOBLEN  EQU   SSOB+4
SSOBID   EQU   SSOB
SSIBSUSE EQU   SSIB+32
SSIBRSV1 EQU   SSIB+28
SSIBDEST EQU   SSIB+20
SSIBJBID EQU   SSIB+12
SSIBRESV EQU   SSIB+7
@NM00019 EQU   SSIBFLG1
SSIBPJES EQU   SSIBFLG1
SSIBLEN  EQU   SSIB+4
SSIBID   EQU   SSIB
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00018 EQU   CVTFIX+248
@NM00017 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTRSV99 EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTRSV28 EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTHEAD  EQU   CVTMAP+160
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTIOQET EQU   CVTMAP+120
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVT      EQU   CVTMAP
RETCHAR  EQU   RET+2
RETSIZE  EQU   RET
@NM00011 EQU   GFPARMS+40
@NM00010 EQU   GFPARMS+36
@NM00009 EQU   GFPARMS+15
@NM00008 EQU   GFBITS
@NM00007 EQU   NEWOLDPT
VSAMMISC EQU   VSAMMHDR+2
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00282 EQU   @RC00280
@RC00300 EQU   @RC00298
@RF00372 EQU   @RC00319
@RF00380 EQU   @RC00319
@RC00382 EQU   @RC00319
@RC00444 EQU   @RC00436
@RC00468 EQU   @RC00436
@RC00508 EQU   @RC00504
@RC00522 EQU   @RC00518
@RF00530 EQU   @RC00518
@RF00559 EQU   @RC00557
@RC00684 EQU   @EL00002
@RC00693 EQU   @EL00002
@RF00702 EQU   @EL00002
@RC00718 EQU   @EL00003
@RC00302 EQU   @RC00300
@RC00448 EQU   @RC00444
@RC00454 EQU   @RC00444
@ENDDATA EQU   *
         END   IKJEFF19,(C'PLS1601',0701,78088)
