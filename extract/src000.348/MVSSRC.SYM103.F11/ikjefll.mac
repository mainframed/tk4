         TITLE 'IKJEFLL, LOGOFF PROCESSOR                              *
                        '
IKJEFLL  CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IKJEFLL   78.177'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
         L     @00,@SIZDATD                                        0001
         GETMAIN  R,LV=(0)
         LR    @11,@01                                             0001
         USING @DATD,@11                                           0001
         ST    @13,@SA00001+4                                      0001
         LM    @00,@01,20(@13)                                     0001
         ST    @11,8(,@13)                                         0001
         LR    @13,@11                                             0001
         XC    @ZTEMPS(@ZLEN),@ZTEMPS
         MVC   @PC00001(4),0(@01)                                  0001
LWASWAR  EQU   4
LWAMSPE  EQU   16
INITDONE EQU  4
NQUSERID EQU  8
DQUSERID EQU  12
SCHEDULE EQU  16
BCDONE   EQU  20
TERMINAT EQU  24
NQDQ0    EQU  0
NQDQ4    EQU  4
NQDQ8    EQU  8
STARTP2  EQU  16
INITRDY  EQU  20
ENDTASK  EQU  24
JSCBDISP EQU 188
JSCBAOS1 EQU  72
JSCBAOS2 EQU 192
RNAMELEN EQU  8
UNPKLEN  EQU  8
*                                                                  0064
*                                                                  0064
*        LWAPTR=ADDR(LOGONWA);    /* SET UP A REGISTER PTR TO LWA    */
*                                                                  0064
         L     LWAPTR,@PC00001                                     0064
*        CALL INITWKAR;           /* GOTO INITIALIZE LOCAL WORK AREAS*/
         BAL   @14,INITWKAR                                        0065
*        IF LWANOPR='0'B × LWANUAD='0'B THEN  /* UPDATE THE UADS?    */
         TM    LWANOPR(LWAPTR),B'00001100'                         0066
         BO    @RF00066                                            0066
*          CALL UPDTUADS;         /* YES, CALL UPDATE ROUTINE        */
         BAL   @14,UPDTUADS                                        0067
*        CALL DEQUSER;            /* DEQUEUE FROM THE USERID         */
@RF00066 BAL   @14,DEQUSER                                         0068
*        CALL LGMSETUP;           /* SETUP PARAMETERS FOR IKJEFLGM   */
*                                                                  0069
         BAL   @14,LGMSETUP                                        0069
*        IF JSXLRCOD ^= 0              /* JOB SCHED SUBRTN ERROR ?   */
*          THEN                        /* YES                        */
         L     @10,LWAJSEL(,LWAPTR)                                0070
         L     @10,JSELJSXL(,@10)                                  0070
         CLI   JSXLRCOD(@10),0                                     0070
         BE    @RF00070                                            0070
*            DO;                                                   0071
*              IF JSXLRCOD = 36        /* SOMEONE HAVE PGM ERROR     */
*                THEN                  /* YES                        */
         CLI   JSXLRCOD(@10),36                                    0072
         BNE   @RF00072                                            0072
*                  SEGMSG1 = ADDR(PGMERR); /* ADDR PGM ERROR MSG     */
         LA    @10,PGMERR                                          0073
         ST    @10,SEGMSG1                                         0073
*                ELSE                  /* NOT PGM ERROR              */
*                  DO;                                             0074
         B     @RC00072                                            0074
@RF00072 DS    0H                                                  0075
*                    SEGMSG1 = ADDR(SYSTEMER); /* DEFAULT SYSTEM ERR */
         LA    @10,SYSTEMER                                        0075
         ST    @10,SEGMSG1                                         0075
*                    IF JSXLRCXT = 2   /* CONVERT, SWA-CREATE ERR    */
*                      THEN            /* YES                        */
         L     @10,LWAJSEL(,LWAPTR)                                0076
         L     @10,JSELJSXL(,@10)                                  0076
         CLI   JSXLRCXT(@10),2                                     0076
         BNE   @RF00076                                            0076
*                        CALL CONVSWAE;/* HANDLE ERR                 */
         BAL   @14,CONVSWAE                                        0077
*                    IF JSXLRCXT = 3   /* INITIATOR ERROR            */
*                      THEN            /*YES                         */
@RF00076 L     @10,LWAJSEL(,LWAPTR)                                0078
         L     @10,JSELJSXL(,@10)                                  0078
         CLI   JSXLRCXT(@10),3                                     0078
         BNE   @RF00078                                            0078
*                        CALL INITERR; /* HANDLE ERROR               */
         BAL   @14,INITERR                                         0079
*                  END;                                            0080
@RF00078 DS    0H                                                  0081
*              LWCMSGNO = 19;          /* LOGON-FAILED MSG           */
@RC00072 MVC   LWCMSGNO(2),@CH00146                                0081
*            END;                                                  0082
*          ELSE                        /* EVERYTHING IS OK - LOGOFF  */
*            CALL CNVTCODE;            /* CONVERT SYS/USER CODE      */
*                                                                  0083
         B     @RC00070                                            0083
@RF00070 BAL   @14,CNVTCODE                                        0083
*        PARMPTR=ADDR(IKJEFLWC);  /* GET INPUT TO IKJEFLGM           */
@RC00070 LA    PARMPTR,IKJEFLWC                                    0084
*        CALL IKJEFLGM;           /* GOTO TELL USER STATUS OF SEESION*/
         L     @15,@CV00035                                        0085
         BALR  @14,@15                                             0085
*        RTNCODE=RETCODE;         /* SAVE RETURN CODE CODE FROM GM   */
         LR    RTNCODE,RETCODE                                     0086
*        IF RTNCODE^=0 THEN       /* IS RETURN CODE BAD              */
         LTR   RTNCODE,RTNCODE                                     0087
         BZ    @RF00087                                            0087
*          CALL MSGDUMP;          /* YES, PUT MSG AND DUMP           */
         BAL   @14,MSGDUMP                                         0088
*        LWARCDE=0;               /* ZERO OUT RETURN CODE FIELD  LWA */
@RF00087 SLR   @10,@10                                             0089
         ST    @10,LWARCDE(,LWAPTR)                                0089
*        JSXLRCXT=0;              /* ZERO OUT RETURN CODE FIELD  JSXL*/
         L     @10,LWAJSEL(,LWAPTR)                                0090
         L     @10,JSELJSXL(,@10)                                  0090
         MVI   JSXLRCXT(@10),X'00'                                 0090
*        JSXLRCOD=0;              /* ZERO OUT RETURN CODE FIELD  JSXL*/
         MVI   JSXLRCOD(@10),X'00'                                 0091
*        RETURN;                                                   0092
@EL00001 L     @13,4(,@13)                                         0092
@EF00001 L     @00,@SIZDATD                                        0092
         LR    @01,@11                                             0092
         FREEMAIN R,LV=(0),A=(1)
@ER00001 LM    @14,@12,12(@13)                                     0092
         BR    @14                                                 0092
*INITWKAR:                                                         0093
*        PROC  OPTIONS(NOSAVEAREA);                                0093
*                                                                  0093
*                                                                  0093
INITWKAR STM   @14,@06,12(@13)                                     0093
         STM   @08,@12,52(@13)                                     0093
*        RESPECIFY  LWAPTR RSTD;                                   0094
*                                                                  0094
*        BITSFORL=0;              /* INITIALIZE BIT SWITCHES TO 0    */
         MVI   BITSFORL,X'00'                                      0095
*        ZEROFELD=ZEROFELD&&ZEROFELD; /* INIT ZERO ECB, NEVER POSTED */
         XC    ZEROFELD(8),ZEROFELD                                0096
*        GEN(MVC   UADSDCB(DSECTLEN),MACDSECT); /* MOVE L-FORM MACROS*/
         MVC   UADSDCB(DSECTLEN),MACDSECT
*        MSGDSEC1=MSGCSEC1;       /* MOVE MSGS INTO DYNAMIC STORAGE  */
         L     @10,@CA00311                                        0098
         MVC   MSGDSEC1(191),MSGCSEC1-IKJEFLLN(@10)                0098
*        MSGDSEC2=MSGCSEC2;       /* MOVE MSGS INTO DYNAMIC STORAGE  */
         MVC   MSGDSEC2(116),MSGCSEC2-IKJEFLLN(@10)                0099
*        MSGDSEC3=MSGCSEC3;       /* MOVE MSGS INTO DYNAMIC STORAGE  */
         MVC   MSGDSEC3(144),MSGCSEC3-IKJEFLLN(@10)                0100
*        MSGDSEC4=MSGCSEC4;       /* MOVE MSGS INTO DYNAMIC STORAGE  */
         MVC   MSGDSEC4(56),MSGCSEC4-IKJEFLLN(@10)                 0101
*        LWCECBP=ADDR(ZEROECB);   /* SET PTR TO ZERO ECB             */
         LA    @10,ZEROECB                                         0102
         ST    @10,LWCECBP                                         0102
*        LWCUPTP=PSCBUPT;         /* SET PTR TO USER'S UPT FOR MSG   */
         L     @10,LWAPSCB(,LWAPTR)                                0103
         MVC   LWCUPTP(4),PSCBUPT(@10)                             0103
*        LWCECTP=LWAPECT;         /* SET PTR TO USER'S ECT FOR MSG   */
         MVC   LWCECTP(4),LWAPECT(LWAPTR)                          0104
*        LWCMSGP=ADDR(LWCMSGNO);  /* SET PTR TO MESSAGE NUMBER       */
         LA    @06,LWCMSGNO                                        0105
         ST    @06,LWCMSGP                                         0105
*        MSGUSID=PSCBUSER;        /* GET THE USER ID OF USER         */
         MVC   MSGUSID(7),PSCBUSER(@10)                            0106
*        LENUSID=PSCBUSRL+4;      /* SET LENGTH OF THE USER ID       */
         SLR   @06,@06                                             0107
         IC    @06,PSCBUSRL(,@10)                                  0107
         LA    @10,4(,@06)                                         0107
         STH   @10,LENUSID                                         0107
*        INDEXPTR=ADDR(MEMBERID)+PSCBUSRL; /* LOCATE POSITION OF   0108
*                                    SYSTEM INDEX IN MSGUSID         */
         LA    INDEXPTR,MEMBERID                                   0108
         ALR   INDEXPTR,@06                                        0108
*        PROCNAME=CHCLS;          /* GET THE NAME OF THE USER'S PROC */
         L     @10,LWAJSEL(,LWAPTR)                                0109
         L     @10,JSELCSCB(,@10)                                  0109
         MVC   PROCNAME(8),CHCLS(@10)                              0109
*        END  INITWKAR;                                            0110
@EL00002 DS    0H                                                  0110
@EF00002 DS    0H                                                  0110
@ER00002 LM    @14,@06,12(@13)                                     0110
         LM    @08,@12,52(@13)                                     0110
         BR    @14                                                 0110
*UPDTUADS:                                                         0111
*        PROC;                                                     0111
*                                                                  0111
*                                                                  0111
UPDTUADS STM   @14,@12,@SA00003                                    0111
*        RESPECIFY  LWAPTR RSTD;                                   0112
*        WRITE='0'B;            /* WRITE FUNCTION NOT REQUESTED    */
*        READ='1'B;               /* READ FUNCTION REQUESTED         */
         OI    READ,B'00100000'                                    0114
         NI    WRITE,B'10111111'                                   0114
*        SYSINDEX=250;            /* FORCE FIRST READ                */
         MVI   SYSINDEX(INDEXPTR),X'FA'                            0115
*        CALL OPENUADS;           /* OPEN UADS DCB                   */
         BAL   @14,OPENUADS                                        0116
*        IF OPENERR='0'B THEN     /* OPEN OK, CONTINUE UPDATE        */
         TM    OPENERR,B'00001000'                                 0117
         BNZ   @RF00117                                            0117
*          DO;                                                     0118
*            IF LWAATR1='0'B ×    /* ANY INFO NEEDED FROM HEADER     */
*               LWAATR2='0'B ×                                     0119
*               LWABUPT='0'B THEN                                  0119
         TM    LWAATR1(LWAPTR),B'11010000'                         0119
         BO    @RF00119                                            0119
*              DO;                /* YES, READ IN HEADER BLOCK       */
*                MEMBEXTN=0;      /* INDICATE FIRST EXTENT           */
         MVI   MEMBEXTN,X'00'                                      0121
*                CALL RDWTUADS;   /* GOTO GET BLOCK                  */
         BAL   @14,RDWTUADS                                        0122
*                IF IOERR='0'B THEN /* CONTINUE UPDATE IF NO ERROR   */
         TM    IOERR,B'00010000'                                   0123
         BNZ   @RF00123                                            0123
*                  DO;                                             0124
*                    IF LWAATR1='0'B THEN /* ATR1 FLD UPDATE ?       */
         TM    LWAATR1(LWAPTR),B'10000000'                         0125
         BNZ   @RF00125                                            0125
*                      UADSATTR=PSCBATR1; /* YES, MOVE ATR1 TO BUFFER*/
         L     @10,BUFFER                                          0126
         L     @03,LWAPSCB(,LWAPTR)                                0126
         MVC   UADSATTR(2,@10),PSCBATR1(@03)                       0126
*                    IF LWAATR2='0'B THEN /* ATR2 FLD UPDATE ?       */
@RF00125 TM    LWAATR2(LWAPTR),B'01000000'                         0127
         BNZ   @RF00127                                            0127
*                      UADSINST=PSCBATR2; /* YES, MOVE ATR2 TO BUFFER*/
         L     @10,BUFFER                                          0128
         L     @03,LWAPSCB(,LWAPTR)                                0128
         MVC   UADSINST(2,@10),PSCBATR2(@03)                       0128
*                    IF LWABUPT='0'B THEN /* UPT FLD UPDATE ?        */
@RF00127 TM    LWABUPT(LWAPTR),B'00010000'                         0129
         BNZ   @RF00129                                            0129
*                      DO;        /* YES, PROCCES UPT FLD            */
*                        IF UADSEXPF = '1'B /* COPY            Y02669*/
*                          THEN             /*   NEW           Y02669*/
         L     @10,BUFFER                                          0131
         TM    UADSEXPF(@10),B'01000000'                           0131
         BNO   @RF00131                                            0131
*                            UADSEXP = '1'B; /*    STYLE       Y02669*/
         OI    UADSEXP,B'00000100'                                 0132
*                          ELSE             /*       UADS      Y02669*/
*                            UADSEXP = '0'B; /*      INDICATOR Y02669*/
         B     @RC00131                                            0133
@RF00131 NI    UADSEXP,B'11111011'                                 0133
*                        MEMBEXTN=UADSUPTP/DCBBLKSI; /* GET EXTENT # */
@RC00131 L     @10,BUFFER                                          0134
         L     @04,UADSUPTP(,@10)                                  0134
         LH    @03,DCBBLKSI(,UADSDCBP)                             0134
         LR    @01,@04                                             0134
         SLR   @00,@00                                             0134
         DR    @00,@03                                             0134
         STC   @01,MEMBEXTN                                        0134
*                        /* GET ADDRESS OF UPT IN BUFFER             */
*                        DATAADDR=BUFFER+(UADSUPTP//DCBBLKSI);     0135
         SRDA  @04,32                                              0135
         DR    @04,@03                                             0135
         ALR   @10,@04                                             0135
         LR    DATAADDR,@10                                        0135
*                        CALL RDWTUADS;   /* READ EXTENT             */
         BAL   @14,RDWTUADS                                        0136
*                        IF IOERR='0'B THEN /* CONTINUE IF NO ERROR  */
         TM    IOERR,B'00010000'                                   0137
         BNZ   @RF00137                                            0137
*                          DO;                                     0138
*                            UPTCDEL = PSCBCHAR; /* COPY LINE DEL CHAR
*                                                              Y02669*/
         L     @10,LWAPSCB(,LWAPTR)                                0139
         L     @04,PSCBUPT(,@10)                                   0139
         MVC   UPTCDEL(1,@04),PSCBCHAR(@10)                        0139
*                            UPTLDEL = PSCBLINE; /* COPY CHAR DEL CHAR
*                                                              Y02669*/
         MVC   UPTLDEL(1,@04),PSCBLINE(@10)                        0140
*                            IF PSCBATTN = '1'B THEN /* COPY   Y02669*/
         TM    PSCBATTN(@10),B'00001000'                           0141
         BNO   @RF00141                                            0141
*                              UPTALD = '1'B; /*      ATN      Y02669*/
         OI    UPTALD(@04),B'00000100'                             0142
*                            ELSE            /*         DELETE Y02669*/
*                              UPTALD = '0'B; /*     INDICATOR Y02669*/
         B     @RC00141                                            0143
@RF00141 L     @10,LWAPSCB(,LWAPTR)                                0143
         L     @10,PSCBUPT(,@10)                                   0143
         NI    UPTALD(@10),B'11111011'                             0143
*                            IF UADSEXP = '1'B THEN /* COPY THEY02669*/
@RC00141 TM    UADSEXP,B'00000100'                                 0144
         BNO   @RF00144                                            0144
*                              DATAADDR->UPT(1:24)=UPT; /* EXPANDED
*                                                              Y02669*/
         L     @10,LWAPSCB(,LWAPTR)                                0145
         L     @10,PSCBUPT(,@10)                                   0145
         MVC   UPT(24,DATAADDR),UPT(@10)                           0145
*                            ELSE                   /* OR      Y02669*/
*                              DATAADDR->UPT(1:16)=UPT; /* NON EXPANDED
*                                                          UPT Y02669*/
         B     @RC00144                                            0146
@RF00144 L     @10,LWAPSCB(,LWAPTR)                                0146
         L     @10,PSCBUPT(,@10)                                   0146
         MVC   UPT(16,DATAADDR),UPT(@10)                           0146
*                          END;                                    0147
@RC00144 DS    0H                                                  0148
*                      END;                                        0148
@RF00137 DS    0H                                                  0149
*                  END;                                            0149
@RF00129 DS    0H                                                  0150
*              END;                                                0150
@RF00123 DS    0H                                                  0151
*            IF IOERR='0'B THEN   /* CONTINUE IF NO I/O ERROR        */
@RF00119 TM    IOERR,B'00010000'                                   0151
         BNZ   @RF00151                                            0151
*              IF LWAACCT^=0 THEN /* IF  ACCOUNT INFO SUPPORTED      */
         L     @10,LWAACCT(,LWAPTR)                                0152
         LTR   @10,@10                                             0152
         BZ    @RF00152                                            0152
*                DO;              /* UPDATE ACCT FLD                 */
*                  MEMBEXTN=LWAACCT/DCBBLKSI; /* GET ACCT EXTENT #   */
         LH    @04,DCBBLKSI(,UADSDCBP)                             0154
         LR    @01,@10                                             0154
         SLR   @00,@00                                             0154
         DR    @00,@04                                             0154
         STC   @01,MEMBEXTN                                        0154
*                  /* GET ADDRESS OF ACCT INFO IN BUFFER             */
*                  DATAADDR=BUFFER+(LWAACCT//DCBBLKSI)+4;          0155
         LR    @00,@10                                             0155
         SRDA  @00,32                                              0155
         DR    @00,@04                                             0155
         AL    @00,BUFFER                                          0155
         AH    @00,@CH00040                                        0155
         LR    DATAADDR,@00                                        0155
*                  CALL RDWTUADS; /* GOTO READ EXTENT                */
         BAL   @14,RDWTUADS                                        0156
*                  IF IOERR='0'B THEN  /* CONTINUE IF NO ERROR       */
         TM    IOERR,B'00010000'                                   0157
         BNZ   @RF00157                                            0157
*                    DO;          /* MOVE ACCT INFO TO BUFFER        */
*                      UADSTCPU = LWATCPU;                 /* Y02669 */
         MVC   UADSTCPU(4,DATAADDR),LWATCPU(LWAPTR)                0159
*                      UADSTCP1 = LWATCPU1;                /* Y02669 */
         MVC   UADSTCP1(4,DATAADDR),LWATCPU1(LWAPTR)               0160
*                      UADSTSRU = LWATSRU;                 /* Y02669 */
         MVC   UADSTSRU(4,DATAADDR),LWATSRU(LWAPTR)                0161
*                      UADSTSR1 = LWATSRU1;                /* Y02669 */
         MVC   UADSTSR1(4,DATAADDR),LWATSRU1(LWAPTR)               0162
*                      UADSTCON = LWATCON;                 /* Y02669 */
         MVC   UADSTCON(4,DATAADDR),LWATCON(LWAPTR)                0163
*                      UADSTCO1 = LWATCON1;                /* Y02669 */
         MVC   UADSTCO1(4,DATAADDR),LWATCON1(LWAPTR)               0164
*                    END;                                          0165
*                END;                                              0166
@RF00157 DS    0H                                                  0167
*              SYSINDEX=250;      /* FORCE WRITE OF BUFFER           */
@RF00152 DS    0H                                                  0167
@RF00151 MVI   SYSINDEX(INDEXPTR),X'FA'                            0167
*              READ='0'B;         /* INDICATE READ NOT REQUESTED     */
         NI    READ,B'11011111'                                    0168
*              IF IOERR='0'B THEN /* IF NO I/O ERROR                 */
         TM    IOERR,B'00010000'                                   0169
         BNZ   @RF00169                                            0169
*                CALL RDWTUADS;   /* GOTO WRITE BUFFER               */
         BAL   @14,RDWTUADS                                        0170
*           END;                                                   0171
@RF00169 DS    0H                                                  0172
*      IF IOERR='1'B THEN         /* IF THERE WAS AN I/O ERROR, THEN */
@RF00117 TM    IOERR,B'00010000'                                   0172
         BNO   @RF00172                                            0172
*        CALL IOERRMSG;           /* GOTO PUT OUT ERROR MESSAGE      */
         BAL   @14,IOERRMSG                                        0173
*      CALL CLOSUADS;             /* CLOSE UADS DCB                  */
@RF00172 BAL   @14,CLOSUADS                                        0174
*      END UPDTUADS;                                               0175
@EL00003 DS    0H                                                  0175
@EF00003 DS    0H                                                  0175
@ER00003 LM    @14,@12,@SA00003                                    0175
         BR    @14                                                 0175
*OPENUADS:                                                         0176
*      PROC;                                                       0176
*                                                                  0176
*                                                                  0176
OPENUADS STM   @14,@05,@SA00004                                    0176
         STM   @07,@12,@SA00004+32                                 0176
*        RESPECIFY  LWAPTR RSTD;                                   0177
*        JSCBPASS = '1'B;          /* SET NO PASSWORD REQUIRED BIT 0178
*                                     ON IN THE JSCB.         A41867 */
         L     @10,CVTPTR                                          0178
         L     @10,CVTTCBP(,@10)                                   0178
         L     @10,TCBCPTR(,@10)                                   0178
         L     @10,TCBJSCB(,@10)                                   0178
         OI    JSCBPASS(@10),B'10000000'                           0178
*        DO;  /*ENQ (QNAME,RNAME,S,LENGTH(RNAME),SYSTEM)*/         0179
*        RESPECIFY (GPR01P) RESTRICTED;                            0180
*        I056(1:20)=I056(1:20) &&I056(1:20);  /*ZERO OUT THE TABLE*/
         XC    I056(20),I056                                       0181
*        I05604(1)=LENGTH(RNAME);  /*LENGTH OF MINOR RESOURCE NAME*/
         MVI   I05604,X'08'                                        0182
*        I05606(1)=ADDR(QNAME);  /*ADDRESS OF MAJOR RESOURCE NAME*/
         LA    @10,QNAME                                           0183
         ST    @10,I05606                                          0183
*        I05607(1)=ADDR(RNAME);  /*ADDRESS OF MINOR RESOURCE NAME*/
         LA    @10,RNAME                                           0184
         ST    @10,I05607                                          0184
*        I05603(1)='01000000'B;  /*SET BIT STRING 1 FOR RESOURCE ELEMEN
**/      I05605(1)='11000000'B;  /*SET BIT STRING 2 FOR RESOURCE ELEMEN
**/      I05603(1,1)='1'B;  /*SET END OF LIST BIT*/                0185
         MVI   I05603,B'01000000'                                  0185
         MVI   I05605,B'11000000'                                  0186
         OI    I05603,B'10000000'                                  0187
*        GPR01P=ADDR(I05602);  /*LOAD LIST ADDRESS*/               0188
         LA    GPR01P,I05602                                       0188
*        SVC (56);  /*ISSUE ENQ SVC*/                              0189
         SVC   56                                                  0189
*        RESPECIFY (GPR01P) UNRESTRICTED;                          0190
*        END;  /*ENQ (QNAME,RNAME,S,LENGTH(RNAME),SYSTEM)*/        0191
*        MEMBERID=PSCBUSER;       /* GET USER ID FOR UADS FIND       */
         MVI   MEMBERID+7,C' '                                     0192
         L     @10,LWAPSCB(,LWAPTR)                                0192
         MVC   MEMBERID(7),PSCBUSER(@10)                           0192
*        PARMPTR=ADDR(UADSOPEN);  /* GET PTR TO LIST FORM OF OPEN    */
         LA    PARMPTR,UADSOPEN                                    0193
*        GEN(OPEN  (UADSDCB,(UPDAT)),MF=(E,(1))); /* OPEN UADS DCB   */
         OPEN  (UADSDCB,(UPDAT)),MF=(E,(1))
*        UADSDCBP = ADDR(UADSDCB);      /*  GET ADDR OF UADSDCB  */
         LA    UADSDCBP,UADSDCB                                    0195
*        IF DCBOFLGS(4)='0'B THEN /* WAS UADS OPENED                 */
         TM    DCBOFLGS(UADSDCBP),B'00010000'                      0196
         BNZ   @RF00196                                            0196
*          DO;                    /* NO, PUT MSG AND CANCEL          */
*            CALL IOERRMSG;                                        0198
         BAL   @14,IOERRMSG                                        0198
*            OPENERR='1'B;                                         0199
         OI    OPENERR,B'00001000'                                 0199
*          END;                                                    0200
*        ELSE                                                      0201
*          DO;                    /* YES, GET INPUT BUFFER           */
         B     @RC00196                                            0201
@RF00196 DS    0H                                                  0202
*            RESPECIFY BUFRLEN RSTD;                               0202
*            BUFRLEN=DCBBLKSI;    /* PUT BUFFER LENGTH IN A REGISTER */
         LH    BUFRLEN,DCBBLKSI(,UADSDCBP)                         0203
*            GEN(GETMAIN R,LV=(BUFRLEN),SP=1); /* GET INPUT BUFFER   */
         GETMAIN R,LV=(BUFRLEN),SP=1
*            BUFFER=GMAPTR;       /* SAVE POINTER TO INPUT BUFFER    */
         ST    GMAPTR,BUFFER                                       0205
*            RESPECIFY BUFRLEN UNRSTD;                             0206
*          END;                                                    0207
*        END OPENUADS;                                             0208
@EL00004 DS    0H                                                  0208
@EF00004 DS    0H                                                  0208
@ER00004 LM    @14,@05,@SA00004                                    0208
         LM    @07,@12,@SA00004+32                                 0208
         BR    @14                                                 0208
*/********************************************************************/
*/*                                                                  */
*/*RDWTUADS-                                                         */
*/*          RDWTUADS                                                */
*/*                                                                  */
*/*FUNCTION-                                                         */
*/*          READ AND WRITE SYS1.UADS                                */
*/*                                                                  */
*/********************************************************************/
*                                                                  0209
*RDWTUADS:                                                         0209
*        PROCEDURE;                                                0209
*                                                                  0209
RDWTUADS STM   @14,@05,@SA00005                                    0209
         STM   @07,@12,@SA00005+32                                 0209
*        RESPECIFY (BUFRPTR,LWAPTR) RSTD;                          0210
*        BUFRPTR=BUFFER;          /* PLACE BUFFER ADDR IN REGISTER   */
         L     BUFRPTR,BUFFER                                      0211
*        SAVEEXTN=MEMBEXTN×240;      /* SAVE NEW EXTENT NUMBER       */
         SLR   SAVEEXTN,SAVEEXTN                                   0212
         IC    SAVEEXTN,MEMBEXTN                                   0212
         O     SAVEEXTN,@CF02112                                   0212
*        IF SYSINDEX^=SAVEEXTN THEN  /* IF BLK NOT IN CORE,          */
         MVC   @ZT00003+3(1),SYSINDEX(INDEXPTR)                    0213
         C     SAVEEXTN,@ZT00003                                   0213
         BE    @RF00213                                            0213
*          DO;                    /* OR FINAL UPDATE, CONTINUE       */
*            IF WRITE='1'B THEN   /* SOMETHING TO WRITE OR           */
         TM    WRITE,B'01000000'                                   0215
         BNO   @RF00215                                            0215
*              DO;                /* FINAL UPDATE, CONTINUE          */
*                GEN(WRITE UADSDECB,SF,UADSDCB,(BUFRPTR),,,,MF=E); 0217
         WRITE UADSDECB,SF,UADSDCB,(BUFRPTR),,,,MF=E
*                GEN(CHECK UADSDECB);                              0218
         CHECK UADSDECB
*              END;                                                0219
*            IF IOERR='0'B &      /* IF NO I/O ERROR AND             */
*               READ='1'B THEN    /* READ REQUESTED THEN             */
@RF00215 TM    READ,B'00100000'                                    0220
         BNO   @RF00220                                            0220
         TM    IOERR,B'00010000'                                   0220
         BNZ   @RF00220                                            0220
*              DO;                /* READ NEW EXTENT                 */
*                SYSINDEX=SAVEEXTN; /* PUT NEW EXTENT # IN USERID    */
         STC   SAVEEXTN,SYSINDEX(,INDEXPTR)                        0222
*                GEN(FIND  UADSDCB,MEMBERID,D); /*POSITION TO EXTENT */
         FIND  UADSDCB,MEMBERID,D
*                IF RETCODE^=0 THEN /* IF I/O ERROR ON DIRECTORY OR
*                                      MEMBER NOT FOUND,             */
         LTR   RETCODE,RETCODE                                     0224
         BZ    @RF00224                                            0224
*                  CALL IOERRMSG; /* PUT MESSAGE AND CANCEL          */
         BAL   @14,IOERRMSG                                        0225
*                ELSE             /* IF NO ERROR,                    */
*                  DO;            /* READ IN NEW MEMBER              */
         B     @RC00224                                            0226
@RF00224 DS    0H                                                  0227
*                    GEN(READ  UADSDECB,SF,UADSDCB,(BUFRPTR),,,,MF=E);
         READ  UADSDECB,SF,UADSDCB,(BUFRPTR),,,,MF=E
*                    GEN(CHECK UADSDECB);                          0228
         CHECK UADSDECB
*                    WRITE='1'B;  /* SINCE WE READ, INDICATE       0229
*                                    SOMETHING TO BE WRITTEN         */
         OI    WRITE,B'01000000'                                   0229
*                  END;                                            0230
*              END;                                                0231
*          END;                                                    0232
*                                                                  0232
*END RDWTUADS;                                                     0233
@EL00005 DS    0H                                                  0233
@EF00005 DS    0H                                                  0233
@ER00005 LM    @14,@05,@SA00005                                    0233
         LM    @07,@12,@SA00005+32                                 0233
         BR    @14                                                 0233
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT-                                                          */
*/*          RACINIT                                                 */
*/*                                                                  */
*/*FUNCTION-                                                         */
*/*          ISSUE RACINIT TO DELETE SECURITY RELATED CNTL BLOCKS    */
*/*                                                                  */
*/*CHANGE ACTIVITY-                                                  */
*/*      @Z40RQKC-                                                   */
*/*          NEW FOR RELEASE 4 RACF SUPPORT                          */
*/*                                                                  */
*/********************************************************************/
*                                                                  0234
*RACINIT:                                                          0234
*        PROCEDURE;                                                0234
*                                                                  0234
RACINIT  STM   @14,@12,@SA00006                                    0234
*   IF LWARACF = YES                 /* RACINIT DONE IN IKJEFLE      */
*     THEN DO;                                                     0235
         TM    LWARACF(LWAPTR),B'01000000'                         0235
         BNO   @RF00235                                            0235
*       LWARACF = NO;                 /* NO RACF ENVIRONMENT         */
*                                                                  0237
         NI    LWARACF(LWAPTR),B'10111111'                         0237
*       RESPECIFY (RETCODE) RSTD;                                  0238
*       DO; /* RACINIT  ENVIR(DELETE)*/                            0239
*       I131 = I131 && I131;/*INIT. LIST*/                         0240
         L     @14,I131                                            0240
         LR    @10,@14                                             0240
         XR    @10,@14                                             0240
         ST    @10,I131                                            0240
*       I13101 = 48;/*PARM LIST LENGTH*/                           0241
         LA    I13101,48                                           0241
*       I13102 = '00000000'B;/*RESERVED FIELD*/                    0242
         SLR   @14,@14                                             0242
         LR    I13102,@14                                          0242
*       I13103 = '00000000'B;/*RESERVED FIELD*/                    0243
         LR    I13103,@14                                          0243
*       I13104 = '10000000'B; /*SET ENVIR FLAGS*/                  0244
         LA    I13104,128                                          0244
*       RESPECIFY GPR01P RESTRICTED;                               0245
*       GPR01P = ADDR(I131); /*ADDR OF RACINIT LIST*/              0246
         LA    GPR01P,I131                                         0246
*       IF CVTRAC^=0 & RCVTRNA='0'B THEN/*RACF ACTIVE*/            0247
         L     @14,CVTPTR                                          0247
         L     @14,CVTRAC(,@14)                                    0247
         LTR   @14,@14                                             0247
         BZ    @RF00247                                            0247
         TM    RCVTRNA(@14),B'10000000'                            0247
         BNZ   @RF00247                                            0247
*       SVC (131); /*ISSUE RACINIT SVC*/                           0248
         SVC   131                                                 0248
*       ELSE/*RACF NOT ACTIVE*/                                    0249
*       DO;                                                        0249
         B     @RC00247                                            0249
@RF00247 DS    0H                                                  0250
*       RFY GPR15P RSTD;                                           0250
*       GPR15P=32;/*SET RACF NOT ACTIVE RET CODE*/                 0251
         LA    GPR15P,32                                           0251
*       RFY GPR15P UNRSTD;                                         0252
*       END;                                                       0253
*       RESPECIFY GPR01P UNRESTRICTED;                             0254
@RC00247 DS    0H                                                  0255
*       END; /* RACINIT  ENVIR(DELETE)*/                           0255
*       STATUS = RETCODE;            /* SAVE RETURN CODE             */
         LR    STATUS,RETCODE                                      0256
*       RESPECIFY (RETCODE) UNRSTD;                                0257
*                                                                  0257
*       IF STATUS ^= CONTINUE         /* ARE THERE RACERRORS         */
*         THEN CALL RACERROR;         /*   HANDLE RAC ERRORS         */
         LTR   STATUS,STATUS                                       0258
         BZ    @RF00258                                            0258
         BAL   @14,RACERROR                                        0259
*       END;                                                       0260
*                                                                  0260
*END RACINIT;                                                      0261
@EL00006 DS    0H                                                  0261
@EF00006 DS    0H                                                  0261
@ER00006 LM    @14,@12,@SA00006                                    0261
         BR    @14                                                 0261
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT-                                                          */
*/*          RACERROR                                                */
*/*                                                                  */
*/*FUNCTION-                                                         */
*/*          HANDLE RAC ERRORS                                       */
*/*                                                                  */
*/*OPERATION-                                                        */
*/*          NO MEANINGFUL MESSAGES CAN BE SENT IF THERE IS A        */
*/*          RACINIT ENVIR=DELETE ERROR,THEREFORE WE WILL SIMPLY     */
*/*          SEND THE ERROR CODE                                     */
*/*                                                                  */
*/*MESSAGES-                                                         */
*/*      IKJ56416-                                                   */
*/*          TSO LOGOFF RACF ERROR NN                                */
*/*                                                                  */
*/*CHANGE ACTIVITY-                                                  */
*/*      @Z40RQKC-                                                   */
*/*          NEW FOR RELEASE 4 RAC4 SUPPORT                          */
*/*                                                                  */
*/********************************************************************/
*                                                                  0262
*RACERROR:                                                         0262
*        PROCEDURE;                                                0262
*                                                                  0262
RACERROR STM   @14,@12,@SA00007                                    0262
*   LWCOLDP(1) = ADDR(SEGMSG);                                     0263
*                                                                  0263
         LA    @10,SEGMSG                                          0263
         ST    @10,LWCOLDP                                         0263
*   SEGMSG2 = ADDR(INSLOGOF);        /* LOGOFF TERMINATED            */
         LA    @10,INSLOGOF                                        0264
         ST    @10,SEGMSG2                                         0264
*   SEGMSG1 = ADDR(RCINSERT);        /* PT TO TEXT INSERT            */
         LA    @10,RCINSERT                                        0265
         ST    @10,SEGMSG1                                         0265
*   CALL CONVRC(RCINSERT);           /* CONVERT RETURN CODE          */
*                                                                  0266
         LA    @10,RCINSERT                                        0266
         ST    @10,@AL00001                                        0266
         LA    @01,@AL00001                                        0266
         BAL   @14,CONVRC                                          0266
*   LWCMSGNO = MSG56416;             /* THE MSG NUMBER               */
*                                                                  0267
         MVC   LWCMSGNO(2),@CH00470                                0267
*   RESPECIFY (PARMPTR) RSTD;                                      0268
*   PARMPTR = ADDR(IKJEFLWC);        /* IKJEFLGM PARAMETERS          */
*                                                                  0269
         LA    PARMPTR,IKJEFLWC                                    0269
*   CALL IKJEFLGM;                   /* SEND THE MESSAGE             */
         L     @15,@CV00035                                        0270
         BALR  @14,@15                                             0270
*   RESPECIFY (PARMPTR) UNRSTD;                                    0271
*                                                                  0271
*   STATUS = CONTINUE;               /* CONTINUE WITH LOGOFF         */
*                                                                  0272
         SLR   STATUS,STATUS                                       0272
*END RACERROR;                                                     0273
@EL00007 DS    0H                                                  0273
@EF00007 DS    0H                                                  0273
@ER00007 LM    @14,@12,@SA00007                                    0273
         BR    @14                                                 0273
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT-                                                          */
*/*          CLOSUADS                                                */
*/*                                                                  */
*/*FUNCTION-                                                         */
*/*          CLOSE SYS1.UADS                                         */
*/*                                                                  */
*/********************************************************************/
*                                                                  0274
*CLOSUADS:                                                         0274
*        PROCEDURE;                                                0274
*                                                                  0274
CLOSUADS STM   @14,@12,@SA00008                                    0274
*        IF OPENERR='0'B THEN     /* IF NO OPEN PROBLEMS,            */
         TM    OPENERR,B'00001000'                                 0275
         BNZ   @RF00275                                            0275
*          DO;                    /* FREE INPUT BUFFER               */
*            RESPECIFY (BUFRLEN,BUFRPTR,LWAPTR) RSTD;              0277
*            BUFRLEN=DCBBLKSI;    /* PUT BUFFER LENGTH IN A REGISTER */
         LH    BUFRLEN,DCBBLKSI(,UADSDCBP)                         0278
*            BUFRPTR=BUFFER;      /* GET ADDRESS OF BUFFER IN REG    */
         L     BUFRPTR,BUFFER                                      0279
*            GEN(FREEMAIN R,LV=(BUFRLEN),A=(BUFRPTR),SP=1);        0280
         FREEMAIN R,LV=(BUFRLEN),A=(BUFRPTR),SP=1
*            RESPECIFY BUFRLEN UNRSTD;                             0281
*            PARMPTR=ADDR(UADSCLOS); /* GET PTR TO LIST FORM CLOSE   */
         LA    PARMPTR,UADSCLOS                                    0282
*            GEN(CLOSE (UADSDCB),MF=(E,(1)));  /* CLOSE UADS DCB     */
         CLOSE (UADSDCB),MF=(E,(1))
*          END;                                                    0284
*        JSCBPASS = '0'B;         /* SET NO PASSWORD REQUIRED BIT  0285
*                                    OFF IN THE JSCB.         A41867 */
@RF00275 L     @10,CVTPTR                                          0285
         L     @10,CVTTCBP(,@10)                                   0285
         L     @10,TCBCPTR(,@10)                                   0285
         L     @10,TCBJSCB(,@10)                                   0285
         NI    JSCBPASS(@10),B'01111111'                           0285
*        DO; /* DEQ (QNAME,RNAME,LENGTH(RNAME),SYSTEM)*/           0286
*           I048(1:20)=I048(1:20)&&I048(1:20);                     0287
         XC    I048(20),I048                                       0287
*           RFY GPR01F RESTRICTED;                                 0288
*           I04804(1)='11000000'B;     /*LISTEND BYTE*/            0289
         MVI   I04804,B'11000000'                                  0289
*           I04805(1)=LENGTH(RNAME);   /*SET LENGTH*/              0290
         MVI   I04805,X'08'                                        0290
*           I04806(1)='01000000'B;    /*OPTIONS*/                  0291
         MVI   I04806,B'01000000'                                  0291
*           I04807(1)=ADDR(QNAME);   /*QNAME ADDRESS*/             0292
         LA    @10,QNAME                                           0292
         ST    @10,I04807                                          0292
*           I04808(1)=ADDR(RNAME);   /*RNAME ADDRESS*/             0293
         LA    @10,RNAME                                           0293
         ST    @10,I04808                                          0293
*           GPR01F=ADDR(I04802);                                   0294
         LA    GPR01F,I04802                                       0294
*           SVC  (48);                                             0295
         SVC   48                                                  0295
*           RFY GPR01F UNRESTRICTED;                               0296
*        END; /* DEQ (QNAME,RNAME,LENGTH(RNAME),SYSTEM)*/          0297
*        END CLOSUADS;                                             0298
@EL00008 DS    0H                                                  0298
@EF00008 DS    0H                                                  0298
@ER00008 LM    @14,@12,@SA00008                                    0298
         BR    @14                                                 0298
*DEQUSER:                                                          0299
*        PROC;                                                     0299
*                                                                  0299
*                                                                  0299
DEQUSER  STM   @14,@12,@SA00009                                    0299
*        RESPECIFY  LWAPTR RSTD;                                   0300
*        IF LWANONQ='0'B ×        /* IS AN ENQ MAINTAINED ON THE     */
*           LWANOPR='0'B ×        /* USERID OR ARE THE LWACTLS       */
*           LWANUAD='0'B THEN     /* BITS TO BE IGNORED              */
         TM    LWANONQ(LWAPTR),B'00001000'                         0301
         BZ    @RT00301                                            0301
         TM    LWANOPR(LWAPTR),B'00001100'                         0301
         BO    @RF00301                                            0301
@RT00301 DS    0H                                                  0302
*          DO;                    /* WE ARE TO ENQ/DEQ FROM USER ID  */
*            DO; /* DEQ (SYSIKJUA,LWARNM,LWARNML,SYSTEM) RET(HAVE) TCB(
*WASTCB->LOGONTCB)*/                                               0303
*               I048(1:20)=I048(1:20)&&I048(1:20);                 0304
         XC    I048(20),I048                                       0304
*               RFY GPR01F RESTRICTED;                             0305
*               I04804(1)='10000001'B;     /*LISTEND BYTE*/        0306
         MVI   I04804,B'10000001'                                  0306
*               I04805(1)=LWARNML;   /*SET LENGTH*/                0307
         MVC   I04805(1),LWARNML(LWAPTR)                           0307
*               I04806(1)='01000001'B;    /*OPTIONS*/              0308
         MVI   I04806,B'01000001'                                  0308
*               I04807(1)=ADDR(SYSIKJUA);   /*QNAME ADDRESS*/      0309
         LA    @10,SYSIKJUA                                        0309
         ST    @10,I04807                                          0309
*               I04808(1)=ADDR(LWARNM);   /*RNAME ADDRESS*/        0310
         LA    @10,LWARNM(,LWAPTR)                                 0310
         ST    @10,I04808                                          0310
*               I04801=ADDR(LWASTCB->LOGONTCB);   /*TCB ADDRESS*/  0311
         MVC   I04801(4),LWASTCB(LWAPTR)                           0311
*               GPR01F=ADDR(I04802);                               0312
         LA    GPR01F,I04802                                       0312
*               SVC  (48);                                         0313
         SVC   48                                                  0313
*               RFY GPR01F UNRESTRICTED;                           0314
*            END; /* DEQ (SYSIKJUA,LWARNM,LWARNML,SYSTEM) RET(HAVE) TCB
*LWASTCB->LOGONTCB)*/                                              0315
*            LWARNML = ''B;                                        0316
         MVI   LWARNML(LWAPTR),X'00'                               0316
*            PSCBUSRL = ''B;                                       0317
         L     @10,LWAPSCB(,LWAPTR)                                0317
         SLR   @15,@15                                             0317
         STC   @15,PSCBUSRL(,@10)                                  0317
*          END;                                                    0318
*                                                                  0318
*        CALL RACINIT;            /* INVOKE RACINIT          @Z40RQKC*/
@RF00301 BAL   @14,RACINIT                                         0319
*END DEQUSER;                                                      0320
@EL00009 DS    0H                                                  0320
@EF00009 DS    0H                                                  0320
@ER00009 LM    @14,@12,@SA00009                                    0320
         BR    @14                                                 0320
*LGMSETUP: PROC;                                                   0321
*                                                                  0321
LGMSETUP STM   @14,@12,@SA00010                                    0321
*        RESPECIFY LWAPTR RSTD;                                    0322
*        LWCOLDP(1)=ADDR(SEGWTO1);/* SET PTR TO TEXT PTRS            */
         LA    @10,SEGWTO1                                         0323
         ST    @10,LWCOLDP                                         0323
*        SEGWTO1=ADDR(STRTUSID);  /* SET PTR TO USER ID TEXT         */
         LA    @10,STRTUSID                                        0324
         ST    @10,SEGWTO1                                         0324
*        SEGWTO2=ADDR(STRTTOD);   /* SET PTR TO TIME OF DAY TEXT     */
         LA    @10,STRTTOD                                         0325
         ST    @10,SEGWTO2                                         0325
*        SEGWTO3=ADDR(STRTDATE);  /* SET PTR TO DATE TEXT            */
         LA    @10,STRTDATE                                        0326
         ST    @10,SEGWTO3                                         0326
*        PARMPTR=ADDR(SEGWTO2);   /* SET PTR TO TOD & DATE BUFFERS   */
         LA    PARMPTR,SEGWTO2                                     0327
*        CALL IKJEFLPA;                /* GET TIME OF DAY            */
         L     @15,@CV00036                                        0328
         BALR  @14,@15                                             0328
*        SEGMSG2=ADDR(STRTCODE);  /* SET PTR TO STEP COMP CODE       */
         LA    @10,STRTCODE                                        0329
         ST    @10,SEGMSG2                                         0329
*        LWCOLDP(2)=ADDR(SEGMSG1);/* SET PTR TO MSG TEXT             */
         LA    @10,SEGMSG1                                         0330
         ST    @10,LWCOLDP+4                                       0330
*        END LGMSETUP;                                             0331
@EL00010 DS    0H                                                  0331
@EF00010 DS    0H                                                  0331
@ER00010 LM    @14,@12,@SA00010                                    0331
         BR    @14                                                 0331
*IOERRMSG:                                                         0332
*        PROC;                                                     0332
*                                                                  0332
*                                                                  0332
IOERRMSG STM   @14,@05,@SA00011                                    0332
         STM   @07,@12,@SA00011+32                                 0332
*        RESPECIFY  (LWAPTR,PARMPTR) RSTD;                         0333
*        LWCMSGNO=18;             /* SET NUMBER OF DESIRED MESSAGE   */
         MVC   LWCMSGNO(2),@CH02156                                0334
*        SEGWTO2=ADDR(START5);    /* SET PTR TO ERROR TEXT           */
         LA    @10,START5                                          0335
         ST    @10,SEGWTO2                                         0335
*        SEGWTO3=ADDR(STRTUSID);  /* SET PTR TO USER ID TEXT         */
         LA    @10,STRTUSID                                        0336
         ST    @10,SEGWTO3                                         0336
*        SEGWTO4=ADDR(STRTPROC);  /* SET PTR TO PROCEDURE TEXT       */
         LA    @10,STRTPROC                                        0337
         ST    @10,SEGWTO4                                         0337
*        LWCOLDP(1)=ADDR(SEGWTO1); /* SET PTR TO MSG TEXT PTRS       */
         LA    @10,SEGWTO1                                         0338
         ST    @10,LWCOLDP                                         0338
*        SEGMSG1 = ADDR(TERMTEXT); /* TERMINATE                Y02669*/
         LA    @10,TERMTEXT                                        0339
         ST    @10,SEGMSG1                                         0339
*        LWCOLDP(2) = ADDR(SEGMSG);/* PTR TO MESSAGE TEXTS     Y02669*/
         LA    @10,SEGMSG                                          0340
         ST    @10,LWCOLDP+4                                       0340
*        UADSDCBP = ADDR(UADSDCB); /* GET ADDR OF UADSDCB            */
         LA    UADSDCBP,UADSDCB                                    0341
*        IF DCBOFLGS(4)='1'B THEN /* HAS DCB BEEN OPENED             */
         TM    DCBOFLGS(UADSDCBP),B'00010000'                      0342
         BNO   @RF00342                                            0342
*          SEGWTO1=ADDR(START1);  /* YES: ERROR IS AN I/O ERROR      */
         LA    @10,START1                                          0343
         ST    @10,SEGWTO1                                         0343
*        ELSE                                                      0344
*          SEGWTO1=ADDR(START2);  /* DCB NOT OPEN: IS AN OPEN ERROR  */
         B     @RC00342                                            0344
@RF00342 LA    @10,START2                                          0344
         ST    @10,SEGWTO1                                         0344
*        PARMPTR=ADDR(IKJEFLWC);  /* SET PTR TO THE LWC              */
@RC00342 LA    PARMPTR,IKJEFLWC                                    0345
*        CALL IKJEFLGM;           /* GO TO MESSAGE MODULE TO       0346
*                                    TELL USER ABOUT I/O ERROR       */
         L     @15,@CV00035                                        0346
         BALR  @14,@15                                             0346
*        RTNCODE=RETCODE;         /* SAVE RETURN CODE CODE FROM GM   */
         LR    RTNCODE,RETCODE                                     0347
*        IF RTNCODE^=0 THEN       /* IS RETURN CODE BAD              */
         LTR   RTNCODE,RTNCODE                                     0348
         BZ    @RF00348                                            0348
*          CALL MSGDUMP;          /* YES, PUT MSG AND DUMP           */
         BAL   @14,MSGDUMP                                         0349
*        CHDISC='1'B;             /* SET CANCEL BIT AND CANCEL       */
@RF00348 L     @10,LWAJSEL(,LWAPTR)                                0350
         L     @10,JSELCSCB(,@10)                                  0350
         OI    CHDISC(@10),B'00100000'                             0350
*        END IOERRMSG;                                             0351
@EL00011 DS    0H                                                  0351
@EF00011 DS    0H                                                  0351
@ER00011 LM    @14,@05,@SA00011                                    0351
         LM    @07,@12,@SA00011+32                                 0351
         BR    @14                                                 0351
*MSGDUMP:                                                          0352
*        PROC;                                                     0352
*                                                                  0352
*                                                                  0352
MSGDUMP  STM   @14,@12,@SA00012                                    0352
*        RESPECIFY (LWAPTR,PARMPTR) RSTD;                          0353
*        CHDISC ='1'B;            /* SET CANCEL ECB                  */
         L     @10,LWAJSEL(,LWAPTR)                                0354
         L     @10,JSELCSCB(,@10)                                  0354
         OI    CHDISC(@10),B'00100000'                             0354
*        SEGWTO1=ADDR(START6);    /* SET PTR TO SRNAME               */
         LA    @10,START6                                          0355
         ST    @10,SEGWTO1                                         0355
*        LWCMSGNO=20;             /* SET NUMBER OF DESIRED MESSAGE   */
         MVC   LWCMSGNO(2),@CH02067                                0356
*        RETCODE=RTNCODE;         /* GET THE RETURN CODE TO PRINT    */
         LR    RETCODE,RTNCODE                                     0357
*        GEN(CVD   RETCODE,PACKDEC); /* CONVERT RET. CODE TO DECIMAL */
         CVD   RETCODE,PACKDEC
*        GEN(UNPK  ZONEDEC(UNPKLEN),PACKDEC(UNPKLEN));             0359
         UNPK  ZONEDEC(UNPKLEN),PACKDEC(UNPKLEN)
*        GEN(OI    ZONEDEC+7,X'F0'); /* CHANGE SIGN FOR PRINTING     */
         OI    ZONEDEC+7,X'F0'
*        GEN(MVC   CODESTEP(3),ZONEDEC+5); /* R.C. TO OUTPUT BUFFER  */
         MVC   CODESTEP(3),ZONEDEC+5
*        LWCOLDP(1)=ADDR(SEGWTO1); /* SET PTR TO INSERT SEGMENTS     */
         LA    @10,SEGWTO1                                         0362
         ST    @10,LWCOLDP                                         0362
*        LWCOLDP(2)=ADDR(SEGWTO1); /* SET PTR TO INSERT SEGMENTS     */
         ST    @10,LWCOLDP+4                                       0363
*        SEGWTO2=ADDR(STRTCODE);  /* SET PTR TO COMP CODE TEXT       */
         LA    @10,STRTCODE                                        0364
         ST    @10,SEGWTO2                                         0364
*        SEGWTO3=ADDR(STRTUSID);  /* SET PTR TO USER ID TEXT         */
         LA    @10,STRTUSID                                        0365
         ST    @10,SEGWTO3                                         0365
*        SEGWTO4=ADDR(STRTPROC);  /* SET PTR TO PROC INSERT TEXT     */
         LA    @10,STRTPROC                                        0366
         ST    @10,SEGWTO4                                         0366
*        PARMPTR=ADDR(IKJEFLWC);  /* SET PTR TO THE LWC              */
         LA    PARMPTR,IKJEFLWC                                    0367
*        CALL IKJEFLGM;           /* GO TO MESSAGE MODULE TO TELL  0368
*                                    USER OF BAD S.R. CODE           */
         L     @15,@CV00035                                        0368
         BALR  @14,@15                                             0368
*        END   MSGDUMP;                                            0369
@EL00012 DS    0H                                                  0369
@EF00012 DS    0H                                                  0369
@ER00012 LM    @14,@12,@SA00012                                    0369
         BR    @14                                                 0369
*CONVSWAE:                                                         0370
*        PROC  OPTIONS(NOSAVEAREA);                                0370
*                                                                  0370
*                                                                  0370
CONVSWAE STM   @14,@12,12(@13)                                     0370
*        RESPECIFY  LWAPTR RSTD;                                   0371
*        IF JSXLRCOD=4 THEN       /* IF RETURN CODE FROM INTERP IS 4 */
         L     @10,LWAJSEL(,LWAPTR)                                0372
         L     @10,JSELJSXL(,@10)                                  0372
         CLI   JSXLRCOD(@10),4                                     0372
         BNE   @RF00372                                            0372
*          SEGMSG1=ADDR(JCLERROR);/* POINT TO JCL EROR MESSAGE       */
         LA    @10,JCLERROR                                        0373
         ST    @10,SEGMSG1                                         0373
*        IF JSXLRCOD=8 THEN       /* IF RETURN CODE FROM INTERP IS 8 */
@RF00372 L     @10,LWAJSEL(,LWAPTR)                                0374
         L     @10,JSELJSXL(,@10)                                  0374
         CLI   JSXLRCOD(@10),8                                     0374
         BNE   @RF00374                                            0374
*          SEGMSG1=ADDR(PRCLIBER);/* SEG = PROCLIB OPEN ERROR        */
*                                                                  0375
         LA    @10,PRCLIBER                                        0375
         ST    @10,SEGMSG1                                         0375
*        END CONVSWAE;            /* END CONVERT, SWA CREATE ERR     */
@EL00013 DS    0H                                                  0376
@EF00013 DS    0H                                                  0376
@ER00013 LM    @14,@12,12(@13)                                     0376
         BR    @14                                                 0376
*INITERR:                                                          0377
*        PROC  OPTIONS(NOSAVEAREA);                                0377
*                                                                  0377
*                                                                  0377
INITERR  STM   @14,@12,12(@13)                                     0377
*        RESPECIFY  LWAPTR RSTD;                                   0378
*        IF JSXLRCOD=4 THEN       /*IF RETURN CODE FROM THE INIT IS 4*/
         L     @10,LWAJSEL(,LWAPTR)                                0379
         L     @10,JSELJSXL(,@10)                                  0379
         CLI   JSXLRCOD(@10),4                                     0379
         BNE   @RF00379                                            0379
*          SEGMSG1=ADDR(ALLOCERR);/* PNT TO ALLOC ERROR MESSGE       */
         LA    @10,ALLOCERR                                        0380
         ST    @10,SEGMSG1                                         0380
*        IF JSXLRCOD=12 THEN      /* IF RCODE IS 12                  */
@RF00379 L     @10,LWAJSEL(,LWAPTR)                                0381
         L     @10,JSELJSXL(,@10)                                  0381
         CLI   JSXLRCOD(@10),12                                    0381
         BNE   @RF00381                                            0381
*          SEGMSG1=ADDR(DATAUSED);/* SAY A DATA SET WAS IN USE       */
         LA    @10,DATAUSED                                        0382
         ST    @10,SEGMSG1                                         0382
*        IF JSXLRCOD=16 THEN      /* IF RCODE IS 16                  */
@RF00381 L     @10,LWAJSEL(,LWAPTR)                                0383
         L     @10,JSELJSXL(,@10)                                  0383
         CLI   JSXLRCOD(@10),16                                    0383
         BNE   @RF00383                                            0383
*          DO;                                                     0384
*            IF LWARCDE=ADDR(LWAMSPE) THEN /*IKJEFLJ RETRN CODE=16   */
         LA    @10,LWAMSPE                                         0385
         C     @10,LWARCDE(,LWAPTR)                                0385
         BNE   @RF00385                                            0385
*              SEGMSG1=ADDR(MULTSTEP); /* FILL IN SEG ADDR         0386
*                                              WITH MULTI MSG        */
         LA    @10,MULTSTEP                                        0386
         ST    @10,SEGMSG1                                         0386
*          END;                   /* END RCODE OF 16 PROCESS         */
@RF00385 DS    0H                                                  0388
*        IF JSXLRCOD=20 THEN      /* IF RCODE IS 20                  */
@RF00383 L     @10,LWAJSEL(,LWAPTR)                                0388
         L     @10,JSELJSXL(,@10)                                  0388
         CLI   JSXLRCOD(@10),20                                    0388
         BNE   @RF00388                                            0388
*          SEGMSG1=ADDR(SYSTEMER);/* RC FROM IKJEFLK,'K' HAS NO RC'S */
         LA    @10,SYSTEMER                                        0389
         ST    @10,SEGMSG1                                         0389
*        IF JSXLRCOD=24 THEN      /* IF RCODE IS 24                  */
@RF00388 L     @10,LWAJSEL(,LWAPTR)                                0390
         L     @10,JSELJSXL(,@10)                                  0390
         CLI   JSXLRCOD(@10),24                                    0390
         BNE   @RF00390                                            0390
*          SEGMSG1=ADDR(JOBLIBER);/* JOBLIB COULDNOT BE OPENED       */
         LA    @10,JOBLIBER                                        0391
         ST    @10,SEGMSG1                                         0391
*        IF JSXLRCOD=28 THEN      /* IF RCODE IS 24                  */
@RF00390 L     @10,LWAJSEL(,LWAPTR)                                0392
         L     @10,JSELJSXL(,@10)                                  0392
         CLI   JSXLRCOD(@10),28                                    0392
         BNE   @RF00392                                            0392
*          SEGMSG1=ADDR(STEPLBER);/* POINT  TO OPEN ERROR MSG        */
         LA    @10,STEPLBER                                        0393
         ST    @10,SEGMSG1                                         0393
*        IF JSXLRCOD=32 THEN      /* IF RCODE IS 32                  */
@RF00392 L     @10,LWAJSEL(,LWAPTR)                                0394
         L     @10,JSELJSXL(,@10)                                  0394
         CLI   JSXLRCOD(@10),32                                    0394
         BNE   @RF00394                                            0394
*          SEGMSG1=ADDR(FTCHLBER);/* POINT  TO OPEN ERROR MSG        */
*                                                                  0395
         LA    @10,FTCHLBER                                        0395
         ST    @10,SEGMSG1                                         0395
*        END INITERR;                                              0396
@EL00014 DS    0H                                                  0396
@EF00014 DS    0H                                                  0396
@ER00014 LM    @14,@12,12(@13)                                     0396
         BR    @14                                                 0396
*CNVTCODE:                                                         0397
*        PROC  OPTIONS(NOSAVEAREA);                                0397
*                                                                  0397
*                                                                  0397
CNVTCODE STM   @14,@12,12(@13)                                     0397
*        RESPECIFY  LWAPTR RSTD;                                   0398
*        COMPCODE=LWARTCD;        /* GET LAST STEP COMPLETION CODE   */
         MVC   COMPCODE(4),LWARTCD(LWAPTR)                         0399
*        INITBUFR='0'B;           /* DON'T BLANK RELOGON BUFFER      */
         NI    INITBUFR,B'01111111'                                0400
*        IF SYSCODE(1:8)^='00000000'B × /* IS THIS SYSTEM COMP CODE  */
*           SYSCODE(9:12)^='0000'B THEN                            0401
         CLI   SYSCODE,B'00000000'                                 0401
         BNE   @RT00401                                            0401
         TM    SYSCODE+1,B'11110000'                               0401
         BZ    @RF00401                                            0401
@RT00401 DS    0H                                                  0402
*          DO;                    /* PROCCES SYSTEM COMP CODE        */
*            SEGMSG1=ADDR(START4);/* SET ADDR OF MSG SEGMENT         */
         LA    @10,START4                                          0403
         ST    @10,SEGMSG1                                         0403
*            /* CONVERT SYSTEM CODE FOR PRINTING                     */
*            GEN(UNPK  ZONEDEC(UNPKLEN),COMPCODE(4));              0404
         UNPK  ZONEDEC(UNPKLEN),COMPCODE(4)
*            GEN(MVC   CODESTEP(3),ZONEDEC+3);                     0405
         MVC   CODESTEP(3),ZONEDEC+3
*            GEN REFS(NOZONE)(NC    CODESTEP(3),NOZONE);   /*@Z40RQKC*/
         NC    CODESTEP(3),NOZONE
*            GEN(TR    CODESTEP(3),EBCDCHAR);                      0407
         TR    CODESTEP(3),EBCDCHAR
*            IF LWATNBT='0'B THEN /*SYS COMP CODE FOR ATTN?          */
         TM    LWATNBT(LWAPTR),B'00000100'                         0408
         BNZ   @RF00408                                            0408
*              INITBUFR='1'B;     /* NO,SET BIT: REINITIALIZE RLGB   */
         OI    INITBUFR,B'10000000'                                0409
*          END;                                                    0410
*        ELSE                     /* MUST BE A USER COMPLETION CODE  */
*          DO;                    /* PROCCES USER COMP CODE          */
         B     @RC00401                                            0411
@RF00401 DS    0H                                                  0412
*            SEGMSG1=ADDR(START3); /* SET ADDR OF USER TEXT          */
         LA    @10,START3                                          0412
         ST    @10,SEGMSG1                                         0412
*            /* CONVERT USER CODE FOR PRINTING                       */
*            GEN(L     RETCODE,COMPCODE);                          0413
         L     RETCODE,COMPCODE
*            GEN(LA    RETCODE,0(RETCODE));                        0414
         LA    RETCODE,0(RETCODE)
*            GEN(CVD   RETCODE,PACKDEC);                           0415
         CVD   RETCODE,PACKDEC
*            GEN(UNPK  ZONEDEC(UNPKLEN),PACKDEC(UNPKLEN));         0416
         UNPK  ZONEDEC(UNPKLEN),PACKDEC(UNPKLEN)
*            GEN(OI    ZONEDEC+7,X'F0');                           0417
         OI    ZONEDEC+7,X'F0'
*            GEN(MVC   CODESTEP(3),ZONEDEC+5);                     0418
         MVC   CODESTEP(3),ZONEDEC+5
*          END;                   /* USER COMP CODE MESSAGE READY    */
*        IF RLGBLEN^=256 ×        /* LENGTH OF RLGB BEEN CHANGED OR  */
*           RLGBZERO^=0  ×        /* OFFSET NOT ZERO OR              */
*           INITBUFR='1'B THEN    /* SYSTEM COMP CODE BEEN DETECTED  */
@RC00401 L     @10,LWAPSCB(,LWAPTR)                                0420
         L     @10,PSCBRLGB(,@10)                                  0420
         CLC   RLGBLEN(2,@10),@CH00648                             0420
         BNE   @RT00420                                            0420
         LH    @10,RLGBZERO(,@10)                                  0420
         LTR   @10,@10                                             0420
         BNZ   @RT00420                                            0420
         TM    INITBUFR,B'10000000'                                0420
         BNO   @RF00420                                            0420
@RT00420 DS    0H                                                  0421
*          DO;                    /* REINITIALIZE THE RELOGON BUFFER */
*            RLGBFLD=' ';         /* BLANK OUT THE BUFFER TEXT       */
         L     @10,LWAPSCB(,LWAPTR)                                0422
         L     @10,PSCBRLGB(,@10)                                  0422
         MVI   RLGBFLD+1(@10),C' '                                 0422
         MVC   RLGBFLD+2(250,@10),RLGBFLD+1(@10)                   0422
         MVI   RLGBFLD(@10),C' '                                   0422
*            RLGBZERO=0;          /* ZERO THE NULL OFFSET            */
         SLR   @00,@00                                             0423
         STH   @00,RLGBZERO(,@10)                                  0423
*            RLGBLEN=256;         /* RESET THE BUFFER LENGTH         */
         MVC   RLGBLEN(2,@10),@CH00648                             0424
*            LWCMSGNO=30;         /* SET NUMBER OF DESIRED MESSAGE   */
         MVC   LWCMSGNO(2),@CH02172                                0425
*          END;                                                    0426
*        ELSE                     /* ELSE IF BUFFER NOT RE-INITIALZD */
*          LWCMSGNO=28;           /* SET NUMBER OF DESIRED MESSAGE   */
         B     @RC00420                                            0427
@RF00420 MVC   LWCMSGNO(2),@CH02166                                0427
*        LWATNBT='0'B;            /* RESET ATTN BIT                  */
@RC00420 NI    LWATNBT(LWAPTR),B'11111011'                         0428
*        END CNVTCODE;                                             0429
@EL00015 DS    0H                                                  0429
@EF00015 DS    0H                                                  0429
@ER00015 LM    @14,@12,12(@13)                                     0429
         BR    @14                                                 0429
*/********************************************************************/
*/*                                                                  */
*/*SEGMENT-                                                          */
*/*          CONVRC                                                  */
*/*                                                                  */
*/*FUNCTION-                                                         */
*/*          BUILD A RETURN CODE TEXT INSERT                         */
*/*                                                                  */
*/*OPERATION-                                                        */
*/*          CONVERT THE RETURN CODE FROM BINARY TO PACKED DECIMAL   */
*/*                                                                  */
*/*          EDMK WILL CONVERT THE RETURN CODE FROM PACKED DECIMAL   */
*/*          TO ZONED DECIMAL AND POINT REGISTER ONE TO THE FIRST    */
*/*          SIGNIFICANT CHARACTER                                   */
*/*                                                                  */
*/*          LEFT JUSTIFY THE RETURN CODE IN THE TEXT FIELD AND      */
*/*          UPDATE THE TEXT INSER LENGTH                            */
*/*                                                                  */
*/*CHANGE ACTIVITY-                                                  */
*/*      @Z40RQKC-                                                   */
*/*          NEW FOR RELEASE 4 RAC4 SUPPORT                          */
*/*                                                                  */
*/********************************************************************/
*                                                                  0430
*CONVRC:                                                           0430
*        PROCEDURE(CONINS);                                        0430
*                                                                  0430
CONVRC   STM   @14,@12,@SA00016                                    0430
         MVC   @PC00016(4),0(@01)                                  0430
*DECLARE                                                           0431
*  1 CONINS,                         /* AN INSERT                    */
*    2 CONHEAD,                                                    0431
*      3 CONLEN FIXED(15),                                         0431
*      3 CONOFF FIXED(15),                                         0431
*    2 CONTEXT CHAR(16);                                           0431
*                                                                  0431
*   CVD(STATUS,PACKDEC);             /* BINARY TO PACKED DECIMAL     */
         CVD   STATUS,PACKDEC                                      0432
*   CONTEXT = EDITMASK;              /* INITIALIZE THE EDIT MASK     */
*                                                                  0433
         L     @10,@PC00016                                        0433
         MVC   CONTEXT(16,@10),@CB00181                            0433
*   RESPECIFY (GPR01P) RSTD;                                       0434
*   GPR01P = ADDR(CONTEXT);          /* ADDR OF TEXT                 */
         LA    GPR01P,CONTEXT(,@10)                                0435
*   GEN REFS(PACKDEC)                /* EDIT THE RETURN CODE         */
*       (EDMK 0(16,1),PACKDEC);                                    0436
*                                                                  0436
         EDMK 0(16,1),PACKDEC
*   CONLEN = LENGTH(CONTEXT) -       /* ORIGINAL LENGTH              */
*           (GPR01P -                /* FIRST NON-ZERO DIGIT         */
*           ADDR(CONTEXT));          /* FIRST ZERO DIGIT             */
         L     @10,@PC00016                                        0437
         LA    @15,CONTEXT(,@10)                                   0437
         LR    @00,@15                                             0437
         SLR   @00,GPR01P                                          0437
         AH    @00,@CH00124                                        0437
         STH   @00,CONLEN(,@10)                                    0437
*   CONTEXT(1:CONLEN) =              /* LEFT JUSTIFY THE RETURN CODE */
*       CONTEXT(GPR01P-ADDR(CONTEXT)+1:LENGTH(CONTEXT));           0438
         LR    @14,@00                                             0438
         BCTR  @14,0                                               0438
         LCR   @15,@15                                             0438
         ALR   @15,GPR01P                                          0438
         ALR   @15,@10                                             0438
         MVC   @TS00001(16),CONTEXT(@15)                           0438
         EX    @14,@SM02213                                        0438
*   RESPECIFY (GPR01P) UNRSTD;                                     0439
*                                                                  0439
*   CONLEN = CONLEN +                /* RETURN CODE LENGTH           */
*           LENGTH(CONHEAD);         /* TEXT INSERT HEADER LENGTH    */
         AH    @00,@CH00040                                        0440
         STH   @00,CONLEN(,@10)                                    0440
*END CONVRC;                                                       0441
@EL00016 DS    0H                                                  0441
@EF00016 DS    0H                                                  0441
@ER00016 LM    @14,@12,@SA00016                                    0441
         BR    @14                                                 0441
*SYNAD:                                                            0442
*        PROC OPTIONS(DONTSAVE,NOSAVEAREA);                        0442
*                                                                  0442
*                                                                  0442
SYNAD    DS    0H                                                  0443
*        IOERR='1'B;              /* INDICATE I/O ERROR HAS OCCURED  */
         OI    IOERR,B'00010000'                                   0443
*        END SYNAD;                                                0444
@EL00017 DS    0H                                                  0444
@EF00017 DS    0H                                                  0444
@ER00017 BR    @14                                                 0444
*/********************************************************************/
*/*                                                                  */
*/*DECLARE-                                                          */
*/*          EPILOG                                                  */
*/*                                                                  */
*/********************************************************************/
*                                                                  0445
*                                                                  0445
*  DECLARE /*GENERAL PURPOSE REGISTERS */                          0445
*    GPR01F FIXED(31) REG(1),                                      0445
*    GPR01P PTR(31) REG(1),                                        0445
*    GPR15P PTR(31) REG(15);                                       0445
*  DCL 1 I056 DEF(ILIST) BDY(WORD) CHAR(32767),  /*LIST FOR ENQ*/  0446
*    3 I05600 PTR(31),  /*TCB ADDR IF BOTH TCB AND ECB*/           0446
*    3 I05601 PTR(31),  /*TCB OR ECB ADDRESS*/                     0446
*    3 I05602 (*) CHAR(12) BDY(WORD),  /*ARRAY OF RESOURCE ELEMENTS*/
*      5 I05603 BIT(8),  /*BIT FLAGS 1*/                           0446
*      5 I05604 PTR(8),  /*MINOR RESOURCE NAME LENGTH*/            0446
*      5 I05605 BIT(8),  /*BIT FLAGS 2*/                           0446
*      5 I05655 CHAR(1),  /*CONTROL PGM USE*/                      0446
*      5 I05606 PTR(31),  /*MAJOR RESOURCE NAME ADDR*/             0446
*      5 I05607 PTR(31);  /*MINOR RESOURCE NAME ADDR*/             0446
*  DCL 1 I048 DEF(ILIST) CHAR(32767) BDY(WORD),                    0447
*     3 I04801 PTR(31) , /* TCB ADDR */                            0447
*     3 I04802(*) CHAR(12) BDY(WORD),                              0447
*        5 I04803 PTR(31), /* UCB @ IN LAST ENTRY */               0447
*           7 I04804 BIT(8),   /* FLAGS */                         0447
*           7 I04805 PTR(8),   /*MINOR RESOURCE NAME LENGTH*/      0447
*           7 I04806 BIT(8),   /* FLAGS */                         0447
*           7 *      CHAR(1),  /* CONTROL PROGRAM USE */           0447
*        5 I04807 PTR(31),  /* MAJOR RESOURCE NAME @ */            0447
*        5 I04808 PTR(31); /* MINOR RESOURCE NAME @ */             0447
*                                                                  0447
*  DECLARE ILIST CHAR(48) BDY(DWORD); /*STANDARD LIST*/            0448
*                                                                  0448
*  DECLARE /* COMMON VARIABLES */                                  0449
*    I256C CHAR(256) BASED,                                        0449
*    I031F FIXED(31) BASED,                                        0449
*    I031P PTR(31)   BASED,                                        0449
*    I015F FIXED(15) BASED,                                        0449
*    I015P PTR(15)   BASED,                                        0449
*    I008P PTR(8)    BASED,                                        0449
*    I001C CHAR(1)   BASED;                                        0449
* END IKJEFLL                                                      0450
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (ICHPRCVT)                                        *
*/*%INCLUDE SYSLIB  (IKJEFLWA)                                        *
*/*%INCLUDE SYSLIB  (IHAASCB )                                        *
*/*%INCLUDE SYSLIB  (IKJECT  )                                        *
*/*%INCLUDE SYSLIB  (IEFVJSEL)                                        *
*/*%INCLUDE SYSLIB  (IEFVJSXL)                                        *
*/*%INCLUDE SYSLIB  (IEECHAIN)                                        *
*/*%INCLUDE SYSLIB  (IKJPSCB )                                        *
*/*%INCLUDE SYSLIB  (IKJUPT  )                                        *
*/*%INCLUDE SYSLIB  (CVT     )                                        *
*/*%INCLUDE SYSLIB  (IKJTCB  )                                        *
*/*%INCLUDE SYSLIB  (IEZJSCB )                                        *
*/*%INCLUDE SYSLIB  (IKJEFLWC)                                        *
*/*%INCLUDE SYSLIB  (IKJEFUAD)                                        *
*;                                                                 0450
@DATA    DS    0H
@CH00040 DC    H'4'
@CH00124 DC    H'16'
@CH02156 DC    H'18'
@CH00146 DC    H'19'
@CH02067 DC    H'20'
@CH02166 DC    H'28'
@CH02172 DC    H'30'
@CH00470 DC    H'53'
@CH00648 DC    H'256'
@SM02213 MVC   CONTEXT(0,@10),@TS00001
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    1F
@SA00003 DS    15F
@SA00009 DS    15F
@SA00012 DS    15F
@SA00004 DS    14F
@SA00005 DS    14F
@SA00011 DS    14F
@SA00008 DS    15F
@SA00006 DS    15F
@SA00007 DS    15F
@SA00016 DS    15F
@PC00016 DS    1F
@SA00010 DS    0F
         DS    15F
@AL00001 DS    1A
@ZTEMPS  DS    0F
@ZT00003 DC    F'0'
@ZTEMPND EQU   *
@ZLEN    EQU   @ZTEMPND-@ZTEMPS
IKJEFLL  CSECT
         DS    0F
@CF02112 DC    F'240'
@DATD    DSECT
         DS    0D
BUFFER   DS    A
AREAPTR  DS    A
I131     DS    F
I        DS    A
LWCOLDPT DS    F
TJBSAVE  DS    A
UPDSW    DS    F
UPTSAVE  DS    A
LWCMSGNO DS    H
BITSFORL DS    AL1
         ORG   BITSFORL
INITBUFR DS    BL1
WRITE    EQU   BITSFORL+0
READ     EQU   BITSFORL+0
IOERR    EQU   BITSFORL+0
OPENERR  EQU   BITSFORL+0
UADSEXP  EQU   BITSFORL+0
         ORG   BITSFORL+1
MEMBEXTN DS    AL1
@TS00001 DS    CL16
MEMBERID DS    CL8
SEGWTO   DS    CL16
         ORG   SEGWTO
SEGWTO1  DS    AL4
SEGWTO2  DS    AL4
SEGWTO3  DS    AL4
SEGWTO4  DS    AL4
         ORG   SEGWTO+16
SEGMSG   DS    CL16
         ORG   SEGMSG
SEGMSG1  DS    AL4
SEGMSG2  DS    AL4
SEGMSG3  DS    AL4
SEGMSG4  DS    AL4
         ORG   SEGMSG+16
RCINSERT DS    CL19
         DS    CL1
PACKDEC  DS    CL8
COMPCODE DS    BL4
         ORG   COMPCODE
@NM00005 DS    BL1
SYSCODE  DS    BL2
USERCODE EQU   COMPCODE+2
         ORG   COMPCODE+4
ZEROFELD DS    CL8
         ORG   ZEROFELD
ZEROECB  DS    BL4
@NM00006 DS    BL4
         ORG   ZEROFELD+8
MSGDSEC1 DS    CL191
         ORG   MSGDSEC1
STRTUSID DS    FL2
         ORG   STRTUSID
LENUSID  DS    AL2
         ORG   MSGDSEC1+2
@NM00007 DS    FL2
MSGUSID  DS    CL7
         DS    CL1
STRTPROC DS    FL2
@NM00008 DS    FL2
PROCNAME DS    CL8
STRTTOD  DS    FL2
@NM00009 DS    FL2
TOD      DS    CL8
STRTDATE DS    FL2
@NM00010 DS    FL2
DATE     DS    CL18
STRTCODE DS    FL2
@NM00011 DS    FL2
CODESTEP DS    CL3
         DS    CL1
START1   DS    FL2
@NM00012 DS    FL2
@NM00013 DS    CL4
START2   DS    FL2
@NM00014 DS    FL2
@NM00015 DS    CL5
         DS    CL1
START3   DS    FL2
@NM00016 DS    FL2
TEXT8    DS    CL6
START4   DS    FL2
@NM00017 DS    FL2
@NM00018 DS    CL6
START5   DS    FL2
@NM00019 DS    FL2
TEXT10   DS    CL7
         DS    CL1
START6   DS    FL2
@NM00020 DS    FL2
@NM00021 DS    CL8
SYSTEMER DS    FL2
@NM00022 DS    FL2
@NM00023 DS    CL12
MULTSTEP DS    FL2
@NM00024 DS    FL2
@NM00025 DS    CL43
         ORG   MSGDSEC1+191
         DS    CL1
MSGDSEC2 DS    CL116
         ORG   MSGDSEC2
JCLERROR DS    FL2
@NM00026 DS    FL2
@NM00027 DS    CL28
ALLOCERR DS    FL2
@NM00028 DS    FL2
@NM00029 DS    CL23
         DS    CL1
DATAUSED DS    FL2
@NM00030 DS    FL2
@NM00031 DS    CL52
         ORG   MSGDSEC2+116
MSGDSEC3 DS    CL144
         ORG   MSGDSEC3
STEPLBER DS    FL2
@NM00032 DS    FL2
@NM00033 DS    CL36
JOBLIBER DS    FL2
@NM00034 DS    FL2
@NM00035 DS    CL35
         DS    CL1
PRCLIBER DS    FL2
@NM00036 DS    FL2
@NM00037 DS    CL20
PRCOPNER DS    FL2
@NM00038 DS    FL2
@NM00039 DS    CL36
         ORG   MSGDSEC3+144
MSGDSEC4 DS    CL56
         ORG   MSGDSEC4
FTCHLBER DS    FL2
@NM00040 DS    FL2
@NM00041 DS    CL19
         DS    CL1
PGMERR   DS    FL2
@NM00042 DS    FL2
@NM00043 DS    CL13
         DS    CL1
TERMTEXT DS    FL2
@NM00044 DS    FL2
@NM00045 DS    CL10
         ORG   MSGDSEC4+56
IKJEFLWC DS    CL28
         ORG   IKJEFLWC
LWCUPTP  DS    AL4
LWCECTP  DS    AL4
LWCECBP  DS    AL4
LWCMSGP  DS    AL4
LWCINPP  DS    AL4
LWCOLDP  DS    2A
         ORG   IKJEFLWC+28
         DS    CL4
ILIST    DS    CL48
ZONEDEC  DS    CL8
IKJEFLL  CSECT
         DS    0F
@SIZDATD DC    AL1(1)
         DC    AL3(@ENDDATD-@DATD)
@CV00035 DC    V(IKJEFLGM)
@CV00036 DC    V(IKJEFLPA)
@CA00311 DC    A(IKJEFLLN)
         DS    0D
@CB00181 DC    X'40202020202020202020202020202020'
QNAME    DC    CL8'SYSIKJUA'
RNAME    DC    CL8'OPENUADS'
NOZONE   DC    X'0F0F0F'
STARTING DC    CL8'STARTING'
         DS    CL1
EBCDCHAR DC    CL16'0123456789ABCDEF'
INSLOGOF DS    CL10
         ORG   INSLOGOF
@NM00046 DC    H'10'
@NM00047 DS    FL2
@NM00048 DC    CL6'LOGOFF'
         ORG   INSLOGOF+10
SYSIKJUA DC    CL8'SYSIKJUA'
@DATD    DSECT
         DS    0F
UADSDCB  DCB   DDNAME=SYSUADS,DSORG=PO,MACRF=(R,W),OPTCD=W,            *
               SYNAD=SYNAD,KEYLEN=0 DCB MACRO FOR SYSUADS
         DS    0F
UADSREAD READ  UADSDECB,SF,,,,'S',,MF=L READ MACRO
         DS    0F
UADSOPEN OPEN  (,(UPDAT)),MF=L         OPEN MACRO FOR SYSUADS
         DS    0F
UADSCLOS CLOSE (,),MF=L          CLOSE MACRO FOR SYSUADS
IKJEFLL  CSECT
         DS    0F
MACDSECT EQU   *
         DCB   DDNAME=SYSUADS,DSORG=PO,MACRF=(R,W),OPTCD=W,            *
               SYNAD=SYNAD,KEYLEN=0 DCB MACRO FOR SYSUADS
         DS    0F
         READ  DUMYDECB,SF,,,,'S',,MF=L READ MACRO
         DS    0F
         OPEN  (,(UPDAT)),MF=L         OPEN MACRO FOR SYSUADS
         DS    0F
         CLOSE (,),MF=L          CLOSE MACRO FOR SYSUADS
DSECTLEN EQU   *-MACDSECT        CALCULATE LENGTH OF MACRO STORAGE
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IKJEFLL  CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
I13104   EQU   @05
I13103   EQU   @05
I13102   EQU   @05
I13101   EQU   @05
UADSDCBP EQU   @06
STATUS   EQU   @05
SAVEEXTN EQU   @05
RTNCODE  EQU   @05
INDEXPTR EQU   @07
DATAADDR EQU   @05
GMAPTR   EQU   @01
PARMPTR  EQU   @01
LWAPTR   EQU   @02
BUFRPTR  EQU   @03
BUFRLEN  EQU   @04
RETCODE  EQU   @15
GPR01P   EQU   @01
GPR15P   EQU   @15
GPR01F   EQU   @01
PECBPTR  EQU   @01
TJIDREG  EQU   @00
WECBPTR  EQU   @01
         EXTRN IKJEFLLN
CVTPTR   EQU   16
RCVT     EQU   0
RCVTSTAT EQU   RCVT+53
RCVTRNA  EQU   RCVTSTAT
RCVTSTA1 EQU   RCVT+150
RCVTAUOP EQU   RCVT+151
RCVTFLGS EQU   RCVT+153
RCVTEROP EQU   RCVT+154
SYSINDEX EQU   0
EVTCB    EQU   0
ECBITS   EQU   EVTCB
DCBOFLGS EQU   48
DCBBLKSI EQU   62
ACCTINFO EQU   0
UADSTCPU EQU   ACCTINFO
UADSTCP1 EQU   ACCTINFO+4
UADSTCON EQU   ACCTINFO+8
UADSTCO1 EQU   ACCTINFO+12
UADSTSRU EQU   ACCTINFO+16
UADSTSR1 EQU   ACCTINFO+20
LWA      EQU   0
LWAPASCB EQU   LWA+16
LWAACCT  EQU   LWA+20
LWAPSCB  EQU   LWA+24
LWAJSEL  EQU   LWA+28
LWAPECT  EQU   LWA+32
LWAAECB  EQU   LWA+36
LWAPECB  EQU   LWA+40
LWASECB  EQU   LWA+44
LWAFLGS  EQU   LWA+56
@NM00052 EQU   LWAFLGS
@NM00053 EQU   LWAFLGS+1
@NM00055 EQU   LWAFLGS+2
LWARACF  EQU   @NM00055
LWAFLGS4 EQU   LWAFLGS+3
LWATNBT  EQU   LWAFLGS4
LWACTLS  EQU   LWA+64
LWANOPR  EQU   LWACTLS
LWANUAD  EQU   LWACTLS
LWAATR1  EQU   LWACTLS+1
LWAATR2  EQU   LWACTLS+1
LWABUPT  EQU   LWACTLS+1
LWANONQ  EQU   LWACTLS+1
LWARTCD  EQU   LWA+68
LWANAME  EQU   LWA+72
LWARNML  EQU   LWANAME
LWARNM   EQU   LWANAME+1
LWAELST  EQU   LWA+92
LWAPECBP EQU   LWAELST+4
LWARCDE  EQU   LWA+100
LWATCPU  EQU   LWA+104
LWATCPU1 EQU   LWA+108
LWATSRU  EQU   LWA+112
LWATSRU1 EQU   LWA+116
LWATCON  EQU   LWA+120
LWATCON1 EQU   LWA+124
LWASTCB  EQU   LWA+128
LOGONTCB EQU   0
ASCB     EQU   0
ASCBFW1  EQU   ASCB+100
ASCBRCTF EQU   ASCBFW1+2
ASCBFLG1 EQU   ASCBFW1+3
ASCBDSP1 EQU   ASCB+114
ASCBFLG2 EQU   ASCB+115
ECT      EQU   0
ECTSWS   EQU   ECT+28
ECTSWS2  EQU   ECT+40
ECTSWS21 EQU   ECTSWS2
JSEL     EQU   0
JSELCSCB EQU   JSEL+8
JSELJSXL EQU   JSEL+16
JSELASCB EQU   JSEL+20
JSXL     EQU   0
JSXLHDR  EQU   JSXL
JSXLRCOD EQU   JSXLHDR+2
JSXLRCXT EQU   JSXLHDR+3
JSXLLDEF EQU   JSXL+8
JSXLID   EQU   JSXLLDEF+1
CHAIN    EQU   0
CHFLG    EQU   CHAIN+4
CHSTS    EQU   CHFLG+2
CHACT    EQU   CHFLG+3
CHDISC   EQU   CHACT
CHKEY    EQU   CHAIN+8
CHPARM   EQU   CHKEY
CHCLS    EQU   CHAIN+16
CHPKE    EQU   CHAIN+28
CHTJID   EQU   CHAIN+30
CHPROCSN EQU   CHAIN+32
CHACT1   EQU   CHPROCSN+3
CHASM    EQU   CHAIN+40
CHCIBP   EQU   CHASM+4
CHRGNSZ  EQU   CHASM+8
CHSTEP   EQU   CHASM+24
CHSWT    EQU   CHSTEP
CHSHORT  EQU   CHASM+32
PSCB     EQU   0
PSCBUSER EQU   PSCB
PSCBUSRL EQU   PSCB+7
PSCBATR1 EQU   PSCB+16
PSCBATTN EQU   PSCBATR1
PSCBATR2 EQU   PSCB+18
PSCBRLGB EQU   PSCB+48
PSCBUPT  EQU   PSCB+52
PSCBCHAR EQU   PSCB+58
PSCBLINE EQU   PSCB+59
RLGBUFR  EQU   0
RLGBLEN  EQU   RLGBUFR
RLGBZERO EQU   RLGBUFR+2
RLGBFLD  EQU   RLGBUFR+4
UPT      EQU   0
UPTSWS   EQU   UPT+12
UPTALD   EQU   UPTSWS
UPTCDEL  EQU   UPT+13
UPTLDEL  EQU   UPT+14
CVTMAP   EQU   0
CVTTCBP  EQU   CVTMAP
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIOQET EQU   CVTMAP+120
CVTIERLC EQU   CVTMAP+144
CVTHEAD  EQU   CVTMAP+160
CVTSV76C EQU   CVTHEAD
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
TCBPTRS  EQU   0
TCBCPTR  EQU   TCBPTRS+4
TCBFIX   EQU   0
TCBFRS   EQU   TCBFIX
TCB      EQU   0
TCBPIE   EQU   TCB+4
TCBPMASK EQU   TCBPIE
TCBCMP   EQU   TCB+16
TCBCMPF  EQU   TCBCMP
TCBCPP   EQU   TCBCMPF
TCBSTCC  EQU   TCBCMPF
TCBCDBL  EQU   TCBCMPF
TCBCWTO  EQU   TCBCMPF
TCBCIND  EQU   TCBCMPF
TCBCMSG  EQU   TCBCMPF
TCBTRN   EQU   TCB+20
TCBABF   EQU   TCBTRN
TCBMSS   EQU   TCB+24
TCBPKF   EQU   TCB+28
TCBFLGS  EQU   TCB+29
TCBFLGS1 EQU   TCBFLGS
TCBFLGS2 EQU   TCBFLGS+1
TCBFLGS3 EQU   TCBFLGS+2
TCBFLGS4 EQU   TCBFLGS+3
TCBFLGS5 EQU   TCBFLGS+4
TCBABWF  EQU   TCBFLGS5
TCBJPQ   EQU   TCB+44
TCBPURGE EQU   TCBJPQ
TCBGRS   EQU   TCB+48
TCBFSA   EQU   TCB+112
TCBTME   EQU   TCB+120
TCBJSTCB EQU   TCB+124
TCBTSFLG EQU   TCB+148
TCBTSTSK EQU   TCBTSFLG
TCBSTAB  EQU   TCB+160
TCBNSTAE EQU   TCBSTAB
TCBTCT   EQU   TCB+164
TCBTCTGF EQU   TCBTCT
TCBSCNDY EQU   TCB+172
TCBNDSP  EQU   TCBSCNDY
TCBNDSP1 EQU   TCBNDSP+1
TCBNDSP2 EQU   TCBNDSP+2
TCBNDSP3 EQU   TCBNDSP+3
TCBJSCB  EQU   TCB+180
TCBRECDE EQU   TCBJSCB
TCBEXT1  EQU   TCB+196
TCBBITS  EQU   TCB+200
TCBNDSP4 EQU   TCBBITS
TCBNDSP5 EQU   TCBBITS+1
TCBFLGS6 EQU   TCBBITS+2
TCBFLGS7 EQU   TCBBITS+3
TCBDAR   EQU   TCB+204
TCBDARC  EQU   TCBDAR
TCBEXT2  EQU   TCB+208
TCBFOE   EQU   TCB+244
TCBESTAE EQU   TCB+264
TCBESTRM EQU   TCBESTAE+1
TCBFBYT1 EQU   TCB+276
TCBFBYT2 EQU   TCB+277
TCBRV124 EQU   TCB+278
TCBRV133 EQU   TCB+279
TCBXTNT2 EQU   0
TCBGTF   EQU   TCBXTNT2
TCBTFLG  EQU   TCBGTF
TCBRV146 EQU   TCBXTNT2+28
TCBRV155 EQU   TCBXTNT2+29
TCBRV164 EQU   TCBXTNT2+30
TCBRV173 EQU   TCBXTNT2+31
IEZJSCB  EQU   0
JSCBSEC1 EQU   IEZJSCB+188
JSCHPCE  EQU   JSCBSEC1+4
JSCBDCB  EQU   JSCBSEC1+36
JSCBOPTS EQU   JSCBSEC1+48
JSCBSWT1 EQU   JSCBSEC1+55
JSCBPASS EQU   JSCBSWT1
JSCBWTP  EQU   JSCBSEC1+64
JSCBWTFG EQU   JSCBWTP
JSCBEND1 EQU   IEZJSCB+260
LWCIBUFP EQU   0
LWCIBUF  EQU   0
LWCSEG   EQU   0
DHED     EQU   0
UADSMHDR EQU   DHED
UADSBN01 EQU   UADSMHDR+12
UADSEXPF EQU   UADSBN01+1
UADSATTR EQU   DHED+16
UADSINST EQU   DHED+18
UADSUPTP EQU   DHED+20
FIELD    EQU   0
I001C    EQU   0
I008P    EQU   0
I015F    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
I256C    EQU   0
LWCECB   EQU   0
ZEROFLD  EQU   0
MSGCSEC1 EQU   IKJEFLLN
MSGCSEC2 EQU   IKJEFLLN+192
MSGCSEC3 EQU   IKJEFLLN+308
MSGCSEC4 EQU   IKJEFLLN+452
LOGONWA  EQU   0
CONINS   EQU   0
CONHEAD  EQU   CONINS
CONLEN   EQU   CONHEAD
CONTEXT  EQU   CONINS+4
CHAINS01 EQU   CHASM
CHTYPE   EQU   CHAINS01+124
CHTRSTAT EQU   CHAINS01+125
CHCSYSO  EQU   CHAINS01+134
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
CVTRAC   EQU   CVTS01+644
JSCBSEC2 EQU   JSCBEND1
JSCBSEC3 EQU   JSCBEND1
JSCBJCT  EQU   JSCBSEC3
JSCBJCTA EQU   JSCBJCT+1
JSCBASID EQU   JSCBSEC3+8
JSCBFBYT EQU   JSCBSEC3+10
JSCBJNL  EQU   JSCBSEC3+28
JSCBJJSB EQU   JSCBJNL
JSCBSUB  EQU   JSCBSEC3+40
JSCSCT   EQU   JSCBSEC3+68
JSCRSV45 EQU   JSCBSEC3+112
JSCRSV46 EQU   JSCRSV45
JSCRSV47 EQU   JSCRSV45+2
I056     EQU   ILIST
I05602   EQU   I056+8
I05603   EQU   I05602
I05604   EQU   I05602+1
I05605   EQU   I05602+2
I05606   EQU   I05602+4
I05607   EQU   I05602+8
I048     EQU   ILIST
I04801   EQU   I048
I04802   EQU   I048+4
I04803   EQU   I04802
I04804   EQU   I04803
I04805   EQU   I04803+1
I04806   EQU   I04803+2
I04807   EQU   I04802+4
I04808   EQU   I04802+8
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
@NM00094 EQU   I04803+3
I05655   EQU   I05602+3
I05601   EQU   I056+4
I05600   EQU   I056
JSCBEND3 EQU   JSCBSEC3+120
JSCRSV52 EQU   JSCBSEC3+116
JSCRSV51 EQU   JSCRSV47+1
JSCRSV50 EQU   JSCRSV47
JSCRSV49 EQU   JSCRSV46+1
JSCRSV48 EQU   JSCRSV46
JSCRSV44 EQU   JSCBSEC3+108
JSCRSV43 EQU   JSCBSEC3+104
JSCRSV42 EQU   JSCBSEC3+100
JSCBASWA EQU   JSCBSEC3+96
JSCBUFPT EQU   JSCBSEC3+92
JSCBACT  EQU   JSCBSEC3+88
JSCBSWSP EQU   JSCBSEC3+87
JSCRSV33 EQU   JSCBSEC3+86
JSCDDNUM EQU   JSCBSEC3+84
JSCRSV53 EQU   JSCBSEC3+82
JSCDDNNO EQU   JSCBSEC3+80
JSCBVATA EQU   JSCBSEC3+76
JSCTMCOR EQU   JSCBSEC3+72
JSCSCTP  EQU   JSCSCT+1
JSCRSV55 EQU   JSCSCT
JSCRSV54 EQU   JSCBSEC3+64
JSCDSABQ EQU   JSCBSEC3+60
JSCBSSIB EQU   JSCBSEC3+56
JSCBFRBA EQU   JSCBSEC3+48
JSCRSV28 EQU   JSCBSEC3+46
JSCBSONO EQU   JSCBSEC3+44
JSCBSUBA EQU   JSCBSUB+1
JSCRSV31 EQU   JSCBSUB
JSCBSMLR EQU   JSCBSEC3+36
JSCBJNLR EQU   JSCBSEC3+32
JSCBJNLA EQU   JSCBJNL+1
JSCBJSBT EQU   JSCBJJSB
JSCBJSBX EQU   JSCBJJSB
JSCBJSBA EQU   JSCBJJSB
JSCBJSBI EQU   JSCBJJSB
@NM00088 EQU   JSCBJJSB
JSCBJNLE EQU   JSCBJJSB
JSCBJNLF EQU   JSCBJJSB
JSCBJNLN EQU   JSCBJJSB
@NM00087 EQU   JSCBSEC3+24
JSCBJRBA EQU   JSCBSEC3+16
JSCBIECB EQU   JSCBSEC3+12
JSCBRV08 EQU   JSCBSEC3+11
JSCBRV07 EQU   JSCBFBYT
JSCBRV06 EQU   JSCBFBYT
JSCBRV05 EQU   JSCBFBYT
JSCBRV04 EQU   JSCBFBYT
JSCBRV03 EQU   JSCBFBYT
JSCBRV02 EQU   JSCBFBYT
JSCBADSP EQU   JSCBFBYT
JSCBRV01 EQU   JSCBFBYT
JSCBTJID EQU   JSCBASID
JSCBPSCB EQU   JSCBSEC3+4
JSCJCTP  EQU   JSCBJCTA
JSCRSV24 EQU   JSCBJCT
JSCBEND2 EQU   JSCBSEC2
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTRV619 EQU   CVTS01+692
CVTRV618 EQU   CVTS01+688
CVTRV617 EQU   CVTS01+684
CVTRV616 EQU   CVTS01+680
CVTRV615 EQU   CVTS01+676
CVTRV614 EQU   CVTS01+672
CVTRV613 EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTHSM   EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
CHLAST   EQU   CHAINS01+136
CHSPA    EQU   CHAINS01+135
CHUSERID EQU   CHCSYSO
CHJB     EQU   CHCSYSO
CHDUMP   EQU   CHCSYSO
CHQUE    EQU   CHCSYSO
CHHOLD   EQU   CHCSYSO
CHOUT    EQU   CHCSYSO
CHINN    EQU   CHCSYSO
CHALL    EQU   CHCSYSO
CHINC    EQU   CHAINS01+132
CHPEND   EQU   CHAINS01+128
CHARID   EQU   CHAINS01+127
CHCNID   EQU   CHAINS01+126
@NM00072 EQU   CHTRSTAT
CHTSL    EQU   CHTRSTAT
CHTS     EQU   CHTRSTAT
CHINITL  EQU   CHTRSTAT
CHINIT   EQU   CHTRSTAT
CHJOBSL  EQU   CHTRSTAT
CHJOBS   EQU   CHTRSTAT
CHDEF    EQU   CHTYPE
CHHIAR   EQU   CHTYPE
CHARSV29 EQU   CHTYPE
CHARSV28 EQU   CHTYPE
CHARSV27 EQU   CHTYPE
CHARSV26 EQU   CHTYPE
CHARSV25 EQU   CHTYPE
CHDSTAT  EQU   CHTYPE
CHBUF    EQU   CHAINS01
CONOFF   EQU   CONHEAD+2
@NM00093 EQU   DHED+44
UADSSOUT EQU   DHED+43
UADSSUBM EQU   DHED+42
UADSSUBC EQU   DHED+41
UADSSUBH EQU   DHED+40
UADSDEST EQU   DHED+32
UADSPERP EQU   DHED+28
UADSPWD1 EQU   DHED+24
@NM00092 EQU   UADSATTR
USATR04  EQU   UADSATTR
@NM00091 EQU   UADSATTR
USATR03  EQU   UADSATTR
USATR02  EQU   UADSATTR
USATR01  EQU   UADSATTR
USATR00  EQU   UADSATTR
UADSMAXC EQU   UADSMHDR+14
@NM00090 EQU   UADSBN01+1
UADSXUSD EQU   UADSBN01+1
UADSXBLK EQU   UADSBN01+1
UADSNUSP EQU   UADSBN01+1
@NM00089 EQU   UADSBN01
UADSUSER EQU   UADSMHDR+4
UADSFSQP EQU   UADSMHDR+2
UADSBLNG EQU   UADSMHDR
LWCSEGTX EQU   LWCSEG+4
LWCSEGST EQU   LWCSEG+2
LWCSEGLN EQU   LWCSEG
LWCIBFTX EQU   LWCIBUF+4
LWCIBFST EQU   LWCIBUF+2
LWCIBFLN EQU   LWCIBUF
JSCBCSCB EQU   JSCBSEC1+68
JSCBPMG  EQU   JSCBWTP+2
JSCBWTSP EQU   JSCBWTP+1
JSCRSV23 EQU   JSCBWTFG
JSCRSV22 EQU   JSCBWTFG
JSCRSV21 EQU   JSCBWTFG
JSCRSV20 EQU   JSCBWTFG
JSCRSV19 EQU   JSCBWTFG
JSCRSV18 EQU   JSCBWTFG
JSCBRET  EQU   JSCBWTFG
JSCBIOFG EQU   JSCBWTFG
@NM00086 EQU   JSCBSEC1+60
JSCBQMPI EQU   JSCBSEC1+56
JSCBPMSG EQU   JSCBSWT1
JSCRSV16 EQU   JSCBSWT1
JSCRSV15 EQU   JSCBSWT1
JSCRSV14 EQU   JSCBSWT1
JSCRSV13 EQU   JSCBSWT1
JSCRSV12 EQU   JSCBSWT1
JSCRSV11 EQU   JSCBSWT1
JSCBTTTR EQU   JSCBSEC1+52
JSCRSV10 EQU   JSCBSEC1+49
JSCBAUTH EQU   JSCBOPTS
JSCSIOTS EQU   JSCBOPTS
JSCRSV08 EQU   JSCBOPTS
JSCRSV07 EQU   JSCBOPTS
JSCRSV06 EQU   JSCBOPTS
JSCBLONG EQU   JSCBOPTS
JSCRSV05 EQU   JSCBOPTS
JSCRSV04 EQU   JSCBOPTS
JSCBSECB EQU   JSCBSEC1+44
JSCRSV03 EQU   JSCBSEC1+41
JSCBSTEP EQU   JSCBSEC1+40
JSCBDCBA EQU   JSCBDCB+1
JSCRSV02 EQU   JSCBDCB
JSCBID   EQU   JSCBSEC1+32
JSCBDBTB EQU   JSCBSEC1+28
JSCBIJSC EQU   JSCBSEC1+24
JSCBTCBP EQU   JSCBSEC1+20
JSCBPCC  EQU   JSCBSEC1+16
JSCBTCP  EQU   JSCBSEC1+12
JSCBSHR  EQU   JSCBSEC1+8
JSCHPCEA EQU   JSCHPCE+1
JSCRSV32 EQU   JSCHPCE
JSCRSV01 EQU   JSCBSEC1
@NM00085 EQU   IEZJSCB
@NM00084 EQU   TCBXTNT2+32
TCBRV181 EQU   TCBRV173
TCBRV180 EQU   TCBRV173
TCBRV179 EQU   TCBRV173
TCBRV178 EQU   TCBRV173
TCBRV177 EQU   TCBRV173
TCBRV176 EQU   TCBRV173
TCBRV175 EQU   TCBRV173
TCBRV174 EQU   TCBRV173
TCBRV172 EQU   TCBRV164
TCBRV171 EQU   TCBRV164
TCBRV170 EQU   TCBRV164
TCBRV169 EQU   TCBRV164
TCBRV168 EQU   TCBRV164
TCBRV167 EQU   TCBRV164
TCBRV166 EQU   TCBRV164
TCBRV165 EQU   TCBRV164
TCBRV163 EQU   TCBRV155
TCBRV162 EQU   TCBRV155
TCBRV161 EQU   TCBRV155
TCBRV160 EQU   TCBRV155
TCBRV159 EQU   TCBRV155
TCBRV158 EQU   TCBRV155
TCBRV157 EQU   TCBRV155
TCBRV156 EQU   TCBRV155
TCBRV154 EQU   TCBRV146
TCBRV153 EQU   TCBRV146
TCBRV152 EQU   TCBRV146
TCBRV151 EQU   TCBRV146
TCBRV150 EQU   TCBRV146
TCBRV149 EQU   TCBRV146
TCBRV148 EQU   TCBRV146
TCBRV147 EQU   TCBRV146
TCBRV145 EQU   TCBXTNT2+26
TCBRV144 EQU   TCBXTNT2+24
TCBCAUF  EQU   TCBXTNT2+20
TCBRV142 EQU   TCBXTNT2+16
TCBRSV49 EQU   TCBXTNT2+12
TCBEVENT EQU   TCBXTNT2+8
TCBRCMP  EQU   TCBXTNT2+5
TCBRSVAB EQU   TCBXTNT2+4
TCBGTFA  EQU   TCBGTF+1
TCBRSV47 EQU   TCBTFLG
TCBRSV46 EQU   TCBTFLG
TCBRSV45 EQU   TCBTFLG
TCBRSV44 EQU   TCBTFLG
TCBRSV43 EQU   TCBTFLG
TCBDSPIT EQU   TCBTFLG
TCBERRTN EQU   TCBTFLG
TCBASYNC EQU   TCBTFLG
@NM00083 EQU   TCB+296
TCBSVCA2 EQU   TCB+292
TCBSWASA EQU   TCB+288
TCBDBTB  EQU   TCB+284
TCBRPT   EQU   TCB+280
TCBRV141 EQU   TCBRV133
TCBRV140 EQU   TCBRV133
TCBRV139 EQU   TCBRV133
TCBRV138 EQU   TCBRV133
TCBRV137 EQU   TCBRV133
TCBRV136 EQU   TCBRV133
TCBRV135 EQU   TCBRV133
TCBRV134 EQU   TCBRV133
TCBRV132 EQU   TCBRV124
TCBRV131 EQU   TCBRV124
TCBRV130 EQU   TCBRV124
TCBRV129 EQU   TCBRV124
TCBRV128 EQU   TCBRV124
TCBRV127 EQU   TCBRV124
TCBRV126 EQU   TCBRV124
TCBRV125 EQU   TCBRV124
TCBRV123 EQU   TCBFBYT2
TCBRV122 EQU   TCBFBYT2
TCBECBNV EQU   TCBFBYT2
TCBSSSYN EQU   TCBFBYT2
TCBFPRAP EQU   TCBFBYT2
TCBFDW   EQU   TCBFBYT2
TCBFMW   EQU   TCBFBYT2
TCBCNCB  EQU   TCBFBYT2
TCBLLH   EQU   TCBFBYT1
TCBRV113 EQU   TCBFBYT1
TCBEOT   EQU   TCBFBYT1
TCBRTM2  EQU   TCBFBYT1
TCBPGNLY EQU   TCBFBYT1
TCBNDIOS EQU   TCBFBYT1
TCBACTIV EQU   TCBFBYT1
TCBEOTFM EQU   TCBFBYT1
TCBAFFN  EQU   TCB+274
TCBCCPVI EQU   TCB+272
TCBUKYSP EQU   TCB+268
TCBMODE  EQU   TCBESTAE+3
TCBERTYP EQU   TCBESTAE+2
TCBRV314 EQU   TCBESTRM
TCBRV313 EQU   TCBESTRM
TCBRV312 EQU   TCBESTRM
TCBRV311 EQU   TCBESTRM
TCBRV310 EQU   TCBESTRM
TCBRV309 EQU   TCBESTRM
TCBRV308 EQU   TCBESTRM
TCBETERM EQU   TCBESTRM
TCBSCBKY EQU   TCBESTAE
TCBRTM12 EQU   TCB+260
TCBTCBID EQU   TCB+256
TCBRSV96 EQU   TCB+252
TCBSWA   EQU   TCB+248
TCBFOEA  EQU   TCBFOE+1
TCBRSV42 EQU   TCBFOE
TCBRV306 EQU   TCB+240
TCBRSV41 EQU   TCB+239
TCBTID   EQU   TCB+238
TCBRSVAA EQU   TCB+237
TCBABCUR EQU   TCB+236
TCBTMSAV EQU   TCB+232
TCBIOTIM EQU   TCB+228
TCBRTWA  EQU   TCB+224
TCBBACK  EQU   TCB+220
TCBTIRB  EQU   TCB+216
TCBAECB  EQU   TCB+212
TCBEXT2A EQU   TCBEXT2+1
TCBRSV39 EQU   TCBEXT2
TCBSTMCT EQU   TCB+207
TCBSYSCT EQU   TCB+206
TCBRSV37 EQU   TCB+205
TCBEXSVC EQU   TCBDAR
TCBDARMS EQU   TCBDAR
TCBDARWT EQU   TCBDAR
TCBDARO  EQU   TCBDAR
TCBDARMC EQU   TCBDARC
TCBDARD  EQU   TCBDAR
TCBDARS  EQU   TCBDAR
TCBDARP  EQU   TCBDAR
TCBGTOFM EQU   TCBFLGS7
TCBADMP  EQU   TCBFLGS7
TCBRSTSK EQU   TCBFLGS7
TCBSVCS  EQU   TCBFLGS7
TCBSTACK EQU   TCBFLGS7
TCBRSV34 EQU   TCBFLGS7
TCBRSV33 EQU   TCBFLGS7
TCBGPECB EQU   TCBFLGS7
TCBNTJS  EQU   TCBFLGS6
TCBAPG   EQU   TCBFLGS6
TCBMIGR  EQU   TCBFLGS6
TCBRV303 EQU   TCBFLGS6
TCBSPVLK EQU   TCBFLGS6
TCBCPU   EQU   TCBFLGS6
TCBPIE17 EQU   TCBFLGS6
TCBRV    EQU   TCBFLGS6
TCBRSV79 EQU   TCBNDSP5
TCBRSV78 EQU   TCBNDSP5
TCBRSV77 EQU   TCBNDSP5
TCBRSV76 EQU   TCBNDSP5
TCBRSV75 EQU   TCBNDSP5
TCBRSV74 EQU   TCBNDSP5
TCBRSV95 EQU   TCBNDSP5
TCBRSV94 EQU   TCBNDSP5
TCBRSV93 EQU   TCBNDSP4
TCBRSV92 EQU   TCBNDSP4
TCBRSV91 EQU   TCBNDSP4
TCBRSV90 EQU   TCBNDSP4
TCBRSV89 EQU   TCBNDSP4
TCBRSV88 EQU   TCBNDSP4
TCBRSV87 EQU   TCBNDSP4
TCBRSV86 EQU   TCBNDSP4
TCBEXT1A EQU   TCBEXT1+1
TCBRSV32 EQU   TCBEXT1
TCBEXCPD EQU   TCB+192
TCBIOBRC EQU   TCB+188
TCBDDWTC EQU   TCB+186
TCBDDEXC EQU   TCB+184
TCBJSCBB EQU   TCBJSCB+1
@NM00082 EQU   TCBRECDE
TCBREC   EQU   TCBRECDE
TCBMDIDS EQU   TCB+176
TCBNDINT EQU   TCBNDSP3
TCBRSV27 EQU   TCBNDSP3
TCBRSV26 EQU   TCBNDSP3
TCBRSV25 EQU   TCBNDSP3
TCBRSV24 EQU   TCBNDSP3
TCBSRBND EQU   TCBNDSP3
TCBRV302 EQU   TCBNDSP3
TCBLJSND EQU   TCBNDSP3
TCBABE   EQU   TCBNDSP2
TCBDSS   EQU   TCBNDSP2
TCBOWAIT EQU   TCBNDSP2
TCBIWAIT EQU   TCBNDSP2
TCBNDTS  EQU   TCBNDSP2
TCBNDSVC EQU   TCBNDSP2
TCBSTPP  EQU   TCBNDSP2
TCBABD   EQU   TCBNDSP2
TCBRSV22 EQU   TCBNDSP1
TCBPIEND EQU   TCBNDSP1
TCBTPSP  EQU   TCBNDSP1
TCBDDRND EQU   TCBNDSP1
TCBRSPND EQU   TCBNDSP1
TCBRSTND EQU   TCBNDSP1
TCBDARPN EQU   TCBNDSP1
TCBDARTN EQU   TCBNDSP1
TCBNDSP0 EQU   TCBNDSP
TCBUSER  EQU   TCB+168
TCBTCTB  EQU   TCBTCT+1
TCBRSV9C EQU   TCBTCTGF
TCBRSV9B EQU   TCBTCTGF
TCBRSV9A EQU   TCBTCTGF
TCBRSV99 EQU   TCBTCTGF
TCBRSV98 EQU   TCBTCTGF
TCBRSV97 EQU   TCBTCTGF
TCBRSV20 EQU   TCBTCTGF
TCBSMFGF EQU   TCBTCTGF
TCBSTABB EQU   TCBSTAB+1
TCBSTCUR EQU   TCBNSTAE
TCBRV301 EQU   TCBNSTAE
TCBSYNCH EQU   TCBNSTAE
TCBHALT  EQU   TCBNSTAE
TCBPPSUP EQU   TCBNSTAE
TCB33E   EQU   TCBNSTAE
TCBQUIES EQU   TCBNSTAE
TCBSTABE EQU   TCBNSTAE
TCBAQE   EQU   TCB+156
TCBPQE   EQU   TCB+152
TCBTSDP  EQU   TCB+151
TCBTSLP  EQU   TCB+150
TCBSTPCT EQU   TCB+149
TCBCPUBN EQU   TCBTSFLG
TCBDYDSP EQU   TCBTSFLG
TCBRSV18 EQU   TCBTSFLG
TCBRSV17 EQU   TCBTSFLG
TCBTIOTG EQU   TCBTSFLG
TCBATT   EQU   TCBTSFLG
TCBSTPPR EQU   TCBTSFLG
TCBRV300 EQU   TCBTSTSK
TCBECB   EQU   TCB+144
TCBIQE   EQU   TCB+140
TCBLTC   EQU   TCB+136
TCBOTC   EQU   TCB+132
TCBNTC   EQU   TCB+128
TCBJSTCA EQU   TCBJSTCB+1
TCBRSV16 EQU   TCBJSTCB
TCBTQET  EQU   TCBTME
TCBTCB   EQU   TCB+116
TCBFSAB  EQU   TCBFSA+1
TCBQEL   EQU   TCBFSA
TCBGRS15 EQU   TCBGRS+60
TCBGRS14 EQU   TCBGRS+56
TCBGRS13 EQU   TCBGRS+52
TCBGRS12 EQU   TCBGRS+48
TCBGRS11 EQU   TCBGRS+44
TCBGRS10 EQU   TCBGRS+40
TCBGRS9  EQU   TCBGRS+36
TCBGRS8  EQU   TCBGRS+32
TCBGRS7  EQU   TCBGRS+28
TCBGRS6  EQU   TCBGRS+24
TCBGRS5  EQU   TCBGRS+20
TCBGRS4  EQU   TCBGRS+16
TCBGRS3  EQU   TCBGRS+12
TCBGRS2  EQU   TCBGRS+8
TCBGRS1  EQU   TCBGRS+4
TCBGRS0  EQU   TCBGRS
TCBJPQB  EQU   TCBJPQ+1
TCBRSV15 EQU   TCBPURGE
TCBRSV14 EQU   TCBPURGE
TCBRSV13 EQU   TCBPURGE
TCBRSV12 EQU   TCBPURGE
TCBRSV11 EQU   TCBPURGE
TCBRSV10 EQU   TCBPURGE
TCBRSV09 EQU   TCBPURGE
TCBJPQF  EQU   TCBPURGE
TCBJLB   EQU   TCB+40
TCBLLS   EQU   TCB+36
TCBDSP   EQU   TCB+35
TCBLMP   EQU   TCB+34
TCBPNDSP EQU   TCBFLGS5
TCBFCD1  EQU   TCBFLGS5
TCBSTP   EQU   TCBFLGS5
TCBSYS   EQU   TCBFLGS5
TCBANDSP EQU   TCBFLGS5
TCBPAGE  EQU   TCBFLGS5
TCBUXNDF EQU   TCBABWF
TCBFC    EQU   TCBFLGS5
TCBONDSP EQU   TCBFLGS4
TCBMPCND EQU   TCBFLGS4
TCBMPCVQ EQU   TCBFLGS4
TCBUXNDV EQU   TCBFLGS4
TCBHNDSP EQU   TCBFLGS4
TCBRQENA EQU   TCBFLGS4
TCBSER   EQU   TCBFLGS4
TCBNDUMP EQU   TCBFLGS4
TCBDWSTA EQU   TCBFLGS3
TCBRSV08 EQU   TCBFLGS3
TCBRSV07 EQU   TCBFLGS3
TCBRSV06 EQU   TCBFLGS3
TCBABGM  EQU   TCBFLGS3
TCBABTRM EQU   TCBFLGS3
TCBADINP EQU   TCBFLGS3
TCBFSM   EQU   TCBFLGS3
TCBFTS   EQU   TCBFLGS2
TCBFETXR EQU   TCBFLGS2
TCBFDSOP EQU   TCBFLGS2
TCBFJMC  EQU   TCBFLGS2
TCBFSMC  EQU   TCBFLGS2
TCBFABOP EQU   TCBFLGS2
TCBFSTI  EQU   TCBFLGS2
TCBFOINP EQU   TCBFLGS2
TCBFX    EQU   TCBFLGS1
TCBFS    EQU   TCBFLGS1
TCBFT    EQU   TCBFLGS1
TCBPDUMP EQU   TCBFLGS1
TCBNONPR EQU   TCBFLGS1
TCBFERA  EQU   TCBFLGS1
TCBFE    EQU   TCBFLGS1
TCBFA    EQU   TCBFLGS1
TCBZERO  EQU   TCBPKF
TCBFLAG  EQU   TCBPKF
TCBMSSB  EQU   TCBMSS+1
TCBRSV03 EQU   TCBMSS
TCBTRNB  EQU   TCBTRN+1
TCBRSV02 EQU   TCBABF
TCBOLTEP EQU   TCBABF
TCBTCP   EQU   TCBABF
TCBTCPP  EQU   TCBABF
TCBRSV01 EQU   TCBABF
TCBGRPH  EQU   TCBABF
TCBNOCHK EQU   TCBABF
TCBMOD91 EQU   TCBABF
TCBCMPC  EQU   TCBCMP+1
TCBRV318 EQU   TCBCMSG
TCBRV317 EQU   TCBCIND
TCBRV316 EQU   TCBCWTO
TCBCASID EQU   TCBCDBL
TCBNOCC  EQU   TCBSTCC
TCBDMPO  EQU   TCBCPP
TCBCSTEP EQU   TCBCMPF
TCBCREQ  EQU   TCBCMPF
TCBTIO   EQU   TCB+12
TCBDEB   EQU   TCB+8
TCBPIEA  EQU   TCBPIE+1
TCBPM    EQU   TCBPMASK
@NM00081 EQU   TCBPMASK
TCBRBP   EQU   TCB
TCBFRS6  EQU   TCBFRS+24
TCBFRS4  EQU   TCBFRS+16
TCBFRS2  EQU   TCBFRS+8
TCBFRS0  EQU   TCBFRS
TCBNPTR  EQU   TCBPTRS
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00080 EQU   CVTFIX+248
@NM00079 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTCCVT  EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTRSV28 EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTSV76Q EQU   CVTSV76C
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTSV76M EQU   CVTIOQET
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVT      EQU   CVTMAP
UPTPREFL EQU   UPT+23
UPTPREFX EQU   UPT+16
@NM00078 EQU   UPT+15
UPTWTP   EQU   UPTSWS
UPTMODE  EQU   UPTSWS
UPTPAUS  EQU   UPTSWS
UPTNCOM  EQU   UPTSWS
UPTMID   EQU   UPTSWS
UPTNPRM  EQU   UPTSWS
UPTRCVR  EQU   UPTSWS
UPTUSER  EQU   UPT+2
@NM00077 EQU   UPT
PSCBU    EQU   PSCB+64
PSCBRSZ  EQU   PSCB+60
PSCBUPTL EQU   PSCB+56
PSCBDEST EQU   PSCB+40
@NM00076 EQU   PSCB+36
@NM00075 EQU   PSCB+32
PSCBSOUT EQU   PSCB+31
PSCBSUBM EQU   PSCB+30
PSCBSUBC EQU   PSCB+29
PSCBSUBH EQU   PSCB+28
PSCBLTI2 EQU   PSCB+24
PSCBLTIM EQU   PSCB+20
@NM00074 EQU   PSCBATR1
@NM00073 EQU   PSCBATR1
PSCBRCVR EQU   PSCBATR1
PSCBVMNT EQU   PSCBATR1
PSCBJCL  EQU   PSCBATR1
PSCBACCT EQU   PSCBATR1
PSCBCTRL EQU   PSCBATR1
PSCBGPNM EQU   PSCB+8
CHARSV16 EQU   CHSHORT+100
CHARSV15 EQU   CHSHORT+96
CHJSCBVS EQU   CHSHORT+92
CHUSCVS  EQU   CHSHORT+88
@NM00071 EQU   CHSHORT+84
@NM00070 EQU   CHSHORT+80
CHSQA    EQU   CHSHORT+44
CHQPA    EQU   CHSHORT+8
CHJCL    EQU   CHSHORT+4
CHSPC    EQU   CHSHORT
CHSPB    EQU   CHSTEP+4
CHTCB    EQU   CHSTEP+1
CHARSV23 EQU   CHSWT
CHARSV22 EQU   CHSWT
CHARSV21 EQU   CHSWT
CHAC     EQU   CHSWT
CHPSF    EQU   CHSWT
CHPSD    EQU   CHSWT
CHJCT    EQU   CHSWT
CHARSV20 EQU   CHSWT
CHCECB   EQU   CHASM+20
CHECB    EQU   CHASM+16
CHRGNAD  EQU   CHASM+12
CHARSV18 EQU   CHRGNSZ+1
CHRPRTY  EQU   CHRGNSZ
@NM00069 EQU   CHCIBP
CHEND    EQU   CHCIBP
CHECBP   EQU   CHASM
CHDER    EQU   CHPROCSN+4
CHARSV10 EQU   CHACT1
CHARSV09 EQU   CHACT1
CHARSV08 EQU   CHACT1
CHARSV07 EQU   CHACT1
CHARSV06 EQU   CHACT1
CHARSV05 EQU   CHACT1
CHARSV04 EQU   CHACT1
CHRDWTR  EQU   CHACT1
CHARSV30 EQU   CHPROCSN+2
CHQID    EQU   CHPROCSN
CHASID   EQU   CHTJID
CHUCMP   EQU   CHAIN+29
CHTRKID  EQU   CHPKE
CHCIBCTR EQU   CHAIN+27
CHUNIT   EQU   CHAIN+24
CHPCOI   EQU   CHPARM
CHIFY    EQU   CHACT
CHAIFX   EQU   CHACT
CHCLD    EQU   CHACT
CHCL     EQU   CHACT
CHDSI    EQU   CHACT
CHTERM   EQU   CHACT
CHSWAP   EQU   CHACT
CHABTERM EQU   CHSTS
CHFC     EQU   CHSTS
CHDL     EQU   CHSTS
CHAD     EQU   CHSTS
CHQSPC   EQU   CHSTS
CHSOUT   EQU   CHSTS
CHSYS    EQU   CHSTS
CHAP     EQU   CHSTS
CHSZE    EQU   CHFLG+1
CHVCD    EQU   CHFLG
CHPTR    EQU   CHAIN
JSXLDATA EQU   JSXLLDEF+2
@NM00068 EQU   JSXLID
JSXPRFRE EQU   JSXLID
JSXPTINI EQU   JSXLID
JSXPRINI EQU   JSXLID
JSXPOST  EQU   JSXLID
JSXLLINK EQU   JSXLLDEF
JSXLCOMM EQU   JSXLHDR+4
JSXLLGTH EQU   JSXLHDR
JSELEOL  EQU   JSELASCB
JSELJCL  EQU   JSEL+12
JSELJSOL EQU   JSEL+4
@NM00067 EQU   JSEL
@NM00066 EQU   ECT+52
@NM00065 EQU   ECT+48
@NM00064 EQU   ECT+44
@NM00063 EQU   ECTSWS2+1
@NM00062 EQU   ECTSWS21
ECTTABND EQU   ECTSWS21
ECTDEFCS EQU   ECTSWS21
ECTBKPB  EQU   ECT+36
ECTUSER  EQU   ECT+32
ECTDDNUM EQU   ECT+29
ECTATTN  EQU   ECTSWS
ECTBKGRD EQU   ECTSWS
ECTNNOT  EQU   ECTSWS
ECTNMAL  EQU   ECTSWS
ECTLOGF  EQU   ECTSWS
ECTATRM  EQU   ECTSWS
@NM00061 EQU   ECTSWS
ECTNOPD  EQU   ECTSWS
ECTSCMD  EQU   ECT+20
ECTPCMD  EQU   ECT+12
ECTSMSG  EQU   ECT+9
ECTMSGF  EQU   ECT+8
ECTIOWA  EQU   ECT+4
ECTRTCD  EQU   ECT+1
ECTRCDF  EQU   ECT
ASCBEND  EQU   ASCB+208
ASCBSRBT EQU   ASCB+200
ASCBSWTL EQU   ASCB+196
ASCBRS14 EQU   ASCB+195
ASCBSMCT EQU   ASCB+194
ASCBRS12 EQU   ASCB+192
ASCBPCTT EQU   ASCB+188
ASCBVGTT EQU   ASCB+184
ASCBLGCB EQU   ASCB+180
ASCBJBNS EQU   ASCB+176
ASCBJBNI EQU   ASCB+172
ASCBMCC  EQU   ASCB+168
ASCBRTWA EQU   ASCB+164
ASCBIQEA EQU   ASCB+160
ASCBXMPQ EQU   ASCB+156
ASCBRS01 EQU   ASCB+154
ASCBFMCT EQU   ASCB+152
ASCBOUXB EQU   ASCB+148
ASCBOUCB EQU   ASCB+144
ASCBMECB EQU   ASCB+140
ASCBQECB EQU   ASCB+136
ASCBCMSB EQU   ASCB+132
ASCBCMSF EQU   ASCB+128
ASCBTCBS EQU   ASCB+124
ASCBNVSC EQU   ASCB+122
ASCBVSC  EQU   ASCB+120
ASCBSRBS EQU   ASCB+118
ASCBSSRB EQU   ASCB+116
ASCBRV06 EQU   ASCBFLG2
ASCBRV05 EQU   ASCBFLG2
ASCBRV04 EQU   ASCBFLG2
ASCBSNQS EQU   ASCBFLG2
ASCBS2S  EQU   ASCBFLG2
ASCBCEXT EQU   ASCBFLG2
ASCBPXMT EQU   ASCBFLG2
ASCBXMPT EQU   ASCBFLG2
ASCBRF07 EQU   ASCBDSP1
ASCBRF06 EQU   ASCBDSP1
ASCBRF05 EQU   ASCBDSP1
ASCBRF04 EQU   ASCBDSP1
ASCBRF03 EQU   ASCBDSP1
ASCBRF02 EQU   ASCBDSP1
ASCBFAIL EQU   ASCBDSP1
ASCBNOQ  EQU   ASCBDSP1
ASCBSWCT EQU   ASCB+112
ASCBASXB EQU   ASCB+108
ASCBTMCH EQU   ASCB+104
ASCBNSWP EQU   ASCBFLG1
ASCBTYP1 EQU   ASCBFLG1
ASCBSTND EQU   ASCBFLG1
ASCBABNT EQU   ASCBFLG1
ASCBTERM EQU   ASCBFLG1
ASCBS3S  EQU   ASCBFLG1
ASCBCMSH EQU   ASCBFLG1
ASCBTOFF EQU   ASCBFLG1
ASCBRF01 EQU   ASCBRCTF
ASCBTMLW EQU   ASCBRCTF
ASCBOUT  EQU   ASCBRCTF
ASCBWAIT EQU   ASCBRCTF
ASCBRV08 EQU   ASCBRCTF
ASCBFQU  EQU   ASCBRCTF
ASCBFRS  EQU   ASCBRCTF
ASCBTMNO EQU   ASCBRCTF
ASCBAFFN EQU   ASCBFW1
ASCBDUMP EQU   ASCB+96
ASCBQSVC EQU   ASCB+92
ASCBUBET EQU   ASCB+88
ASCBECB  EQU   ASCB+84
ASCBJSTL EQU   ASCB+80
ASCBEWST EQU   ASCB+72
ASCBEJST EQU   ASCB+64
ASCBTSB  EQU   ASCB+60
ASCBCSCB EQU   ASCB+56
ASCBRSM  EQU   ASCB+52
ASCBLDA  EQU   ASCB+48
ASCBSTOR EQU   ASCB+44
ASCBDP   EQU   ASCB+43
ASCBRV07 EQU   ASCB+42
ASCBIOSM EQU   ASCB+40
ASCBSEQN EQU   ASCB+38
ASCBASID EQU   ASCB+36
ASCBCPUS EQU   ASCB+32
ASCBSPL  EQU   ASCB+28
ASCBLSLQ EQU   ASCB+24
ASCBFSLQ EQU   ASCB+20
ASCBIOSP EQU   ASCB+16
ASCBLOCK EQU   ASCB+12
ASCBBWDP EQU   ASCB+8
ASCBFWDP EQU   ASCB+4
ASCBASCB EQU   ASCB
ASCBEGIN EQU   ASCB
@NM00060 EQU   LWA+152
LWASPF   EQU   LWA+148
LWASWKA  EQU   LWA+144
LWAGBWKA EQU   LWA+140
LWADEST2 EQU   LWA+132
LWAEOEL  EQU   LWAPECBP
LWAAECBP EQU   LWAELST
LWANQDQ  EQU   LWA+80
@NM00059 EQU   LWACTLS+1
LWABEND  EQU   LWACTLS+1
LWADEST  EQU   LWACTLS+1
LWAUNIT  EQU   LWACTLS+1
@NM00058 EQU   LWACTLS
LWAJJCL  EQU   LWACTLS
LWADISC  EQU   LWACTLS
LWAFAIL  EQU   LWACTLS
LWAMOUNT EQU   LWACTLS
LWAUFAI  EQU   LWACTLS
LWAPTID  EQU   LWA+60
LWAILGN  EQU   LWAFLGS4
LWAINX1  EQU   LWAFLGS4
LWALTBC  EQU   LWAFLGS4
LWASICSP EQU   LWAFLGS4
LWAQTIP  EQU   LWAFLGS4
LWANORDR EQU   LWAFLGS4
@NM00057 EQU   LWAFLGS4
LWABND   EQU   @NM00055
LWAMCK   EQU   @NM00055
LWAPCK   EQU   @NM00055
LWAPSW   EQU   @NM00055
LWAPHASE EQU   @NM00055
LWAVTAM  EQU   @NM00055
@NM00056 EQU   @NM00055
@NM00054 EQU   @NM00053
LWALS    EQU   @NM00053
LWALGB   EQU   @NM00053
LWALG    EQU   @NM00053
LWALK    EQU   @NM00053
LWALJ    EQU   @NM00053
LWALGM   EQU   @NM00053
LWALL    EQU   @NM00052
LWALH    EQU   @NM00052
LWALI    EQU   @NM00052
LWALEA   EQU   @NM00052
LWALE    EQU   @NM00052
LWALC    EQU   @NM00052
LWALB    EQU   @NM00052
LWALA    EQU   @NM00052
LWAPDCB  EQU   LWA+52
LWALPCNT EQU   LWA+48
LWASBCE  EQU   LWASECB+3
@NM00051 EQU   LWASECB
LWAPBCE  EQU   LWAPECB+3
@NM00050 EQU   LWAPECB
LWAABCE  EQU   LWAAECB+3
@NM00049 EQU   LWAAECB
LWATEST  EQU   LWA+12
LWALWA   EQU   LWA+4
LWAPPTR  EQU   LWA
POSTCOD2 EQU   EVTCB+1
POSTCOD1 EQU   ECBITS
POSTBIT  EQU   ECBITS
WAITBIT  EQU   ECBITS
RCVTEXTA EQU   RCVT+173
RCVTVERS EQU   RCVT+172
RCVTRID0 EQU   RCVT+168
RCVTRCXP EQU   RCVT+164
RCVTRIXP EQU   RCVT+160
RCVTRAU0 EQU   RCVT+156
RCVTPINV EQU   RCVT+155
@NM00004 EQU   RCVTEROP
RCVTSAUD EQU   RCVTEROP
RCVTAVIO EQU   RCVTEROP
RCVTTUAC EQU   RCVTEROP
RCVTTERP EQU   RCVTEROP
RCVTNDUP EQU   RCVTFLGS
RCVTSHR  EQU   RCVTFLGS
RCVTRDHD EQU   RCVTFLGS
RCVTROFF EQU   RCVTFLGS
RCVTAXTA EQU   RCVT+152
RCVTATER EQU   RCVTAUOP
RCVTATAP EQU   RCVTAUOP
RCVTADAS EQU   RCVTAUOP
RCVTADAT EQU   RCVTAUOP
RCVTAUSE EQU   RCVTAUOP
RCVTAGRO EQU   RCVTAUOP
@NM00003 EQU   RCVTAUOP
@NM00002 EQU   RCVTSTA1
RCVTTAPE EQU   RCVTSTA1
RCVTUVOL EQU   RCVT+144
RCVTUADS EQU   RCVT+100
RCVTDSN  EQU   RCVT+56
RCVTNREC EQU   RCVT+54
@NM00001 EQU   RCVTSTAT
RCVTNTMS EQU   RCVTSTAT
RCVTNDVS EQU   RCVTSTAT
RCVTNTVS EQU   RCVTSTAT
RCVTNDSS EQU   RCVTSTAT
RCVTNLS  EQU   RCVTSTAT
RCVTDSNL EQU   RCVT+52
RCVTISTL EQU   RCVT+48
RCVTBAM  EQU   RCVT+44
RCVTXLEN EQU   RCVT+40
RCVTRUCB EQU   RCVT+36
RCVTRDX  EQU   RCVT+32
RCVTRCX  EQU   RCVT+28
RCVTRIX  EQU   RCVT+24
RCVTHDR  EQU   RCVT+20
RCVTTEMP EQU   RCVT+16
RCVTINDX EQU   RCVT+12
RCVTDEB  EQU   RCVT+8
RCVTDCB  EQU   RCVT+4
RCVTID   EQU   RCVT
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00196 EQU   @EL00004
@RF00213 EQU   @EL00005
@RF00220 EQU   @EL00005
@RC00224 EQU   @EL00005
@RF00235 EQU   @EL00006
@RF00258 EQU   @EL00006
@RF00374 EQU   @EL00013
@RF00394 EQU   @EL00014
@RF00408 EQU   @RC00401
@ENDDATA EQU   *
         END   IKJEFLL,(C'PLS1852',0701,78177)
