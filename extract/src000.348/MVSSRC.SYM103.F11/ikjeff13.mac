         TITLE 'IKJEFF13 - USERID PROMPT JOB ROUTINE'
*      GEN (TITLE    'IKJEFF13    ---  USERID PROMPT JOB ROUTINE  ');
         TITLE    'IKJEFF13    ---  USERID PROMPT JOB ROUTINE  '
*  /*******************************************************************
*  /*                                                                 *
*  /*     MODULE NAME = IKJEFF13                                      *
*  /*                                                                 *
*  /*     DESCRIPTIVE NAME = PROMPT JOB CHARACTER ROUTINE             *
*  /*                                                                 *
*  /*******************************************************************
*  /*     STATUS                                                      *
*  /*               VS2 RELEASE 02.0                                  *
*  /*                                                                 *
*  /*     COPYRIGHT = NONE                                            *
*  /*                                                                 *
*  /*     PATCH NAME = PATCH (INITIALIZED WITH 'ZAP'S)                *
*  /*                                                                 *
*  /*     CHANGE ACTIVITY = Y02656 (NO APARS)                         *
*  /*                                                                 *
*  /*     FUNCTION                                                    *
*  /*               . PROMPTJOB  COMPARES   THE   JOB   NAME          *
*  /*                 AGAINST  THE  USERID  AND  PROMPTS THE          *
*  /*                 USER, BY WAY OF THE  MESSAGE  ROUTINE,          *
*  /*                 FOR   AN   ALPHANUMERIC  IF  THE  NAME          *
*  /*                 CONSISTS  OF  THE  USERID  ONLY.   THE          *
*  /*                 ALPHANUMERIC  WILL  BE APPENDED TO THE          *
*  /*                 USERID TO COMPLETE  THE  JOBNAME.   IN          *
*  /*                 SUCH   A  CASE,  THE  CONTROL  ROUTINE          *
*  /*                 IKJEFF06 IS CALLED TO HAVE THE CHANGED          *
*  /*                 JOB CARD PROCESSED.                             *
*  /*                                                                 *
*  /*               . IF  THERE  IS  NO  ROOM   TO   ADD   A          *
*  /*                 CHARACTER, THE GENJOB ROUTINE IKJEFF08          *
*  /*                 IS  CALLED  TO  GENERATE A DEFAULT JOB          *
*  /*                 STATEMENT.   THE  ORIGINAL  IS  TURNED          *
*  /*                 INTO A COMMENT.                                 *
*  /*                                                                 *
*  /*     ENTRY POINT                                                 *
*  /*              IKJEFF13                                           *
*  /*                                                                 *
*  /*     INPUT                                                       *
*  /*               . REGISTER  1  POINTS  TO  A   LIST   OF          *
*  /*                 POINTERS TO THE FOLLOWING PARAMETERS            *
*  /*                                                                 *
*  /*                             MESSAGE ROUTINE LIST POINTER        *
*  /*                             CURRENT STATEMENT POINTER           *
*  /*                             USERID                              *
*  /*                             CONTROL TABLE POINTER               *
*  /*                             CURRENT JOBNAME                     *
*  /*                             HISTORY TABLE                       *
*  /*                                                                 *
*  /*                                                                 *
*  /*                                                                 *
*  /*                                                                 *
*  /*     EXTERNAL REFERENCES                                         *
*  /*              IKJEFF02 (VIA ADDRESS)                             *
*  /*              IKJEFF06                                           *
*  /*              IKJEFF08                                           *
*  /*                                                                 *
*  /*     EXITS, NORMAL                                               *
*  /*              RETURN TO CALLER                                   *
*  /*                                                                 *
*  /*     EXITS,ERROR                                                 *
*  /*              RETURN TO CALLER                                   *
*  /*                                                                 *
*  /*     TABLE/WORK AREAS                                            *
*  /*              HISTORY TABLE                                      *
*  /*              MESSAGE INTERFACE                                  *
*  /*                                                                 *
*  /*     ATTRIBUTES                                                  *
*  /*              REENTRANT AND REFRESHABLE                          *
*  /*                                                                 *
*  /*     NOTES                                                       *
*  /*              CHARACTER CODE DEPENDENCY - EBCDIC CHARACTER SET   *
*  /*              USED IN ASSEMBLING, MODULE MUST BE REASSEMBLED IF  *
*  /*              A DIFFERENT CHARACTER SET IS TO BE USED DURING     *
*  /*              EXECUTION.                                         *
*  /*                                                                 *
*  /*     MESSAGES (SEE MESSAGE MODULE IKJEFF03 FOR DETAILS)          *
*  /*              13A  'ENTER JOBNAME CHARACTER+ -'        (PUTGET)  *
*  /*              13B  'MISSING JOBNAME CHARACTER AND UNABLE TO      *
*  /*                    PROMPT'                                      *
*  /*              13C  'INVALID CHARACTER -'                         *
*  /*              13D  'REENTER+ -'                        (PUTGET)  *
*  /*                                                                 *
*  /*     CHANGE ACTIVITY                                             *
*  /*        ***RELEASE 2 SUPPORT CODES***                            *
*  /*           Y02993 MODULE OWNERSHIP                               *
*  /*           Y02656 SCHEDULER PROTECTION                           *
*  /*                                                                 *
*  /*        ***APAR HISTORY***                                       *
*  /*          NONE                                                   *
*  /*                                                                 *
*  /*        ***PTM HISTORY***                                        *
*  /*          OS/VS2 RELEASE 2 -                                     *
*  /*            YM7267 - MESSAGE 13B SHOULD BE PUTLINE, NOT PUTGET   *
*  /*                                                                 *
*  /*******************************************************************
*     GEN;
         LCLA  &T,&SPN
IKJEFF13 CSECT
         B     18(0,15)
         DC    AL1(8)
         DC    CL8'IKJEFF13'
         DC    CL5'02/74'                                       @Y02993
         AGO   .@001
*
*     IKJEFF13:
*         PROC (MSGPTR, STMTPT, USERID, CONTABPT, JOBNAME, HISTFLD)
*               OPTIONS (REENTRANT);
         LCLA  &T,&SPN                                            0003
.@001    ANOP                                                     0003
IKJEFF13 CSECT ,                                                  0003
         STM   @E,@C,12(@D)                                       0003
         BALR  @B,0                                               0003
@PSTART  DS    0H                                                 0003
         USING @PSTART+00000,@B                                   0003
         L     @0,@SIZ001                                         0003
         GETMAIN  R,LV=(0)                                        0003
         LR    @C,@1                                              0003
         USING @DATD+00000,@C                                     0003
         LM    @0,@1,20(@D)                                       0003
         XC    @TEMPS(@L),@TEMPS                                  0003
         ST    @D,@SAV001+4                                       0003
         LA    @F,@SAV001                                         0003
         ST    @F,8(0,@D)                                         0003
         LR    @D,@F                                              0003
* /********************************************************************
* /*  *** IKJEFFHT ***   LEVEL=08/21/73  SYSTEMS=OS/VS2 RELEASE 2.0   *
* /*                                       SUPPORT CODE=Y02064        *
* /*                                       SUPPORT CODE=Y02993        *
* /*      PLS MAPPING MACRO FOR SUBMIT'S INTERNAL HISTORY TABLE       *
* /*      USAGE - %HTNEW='1' - - - - - - - IF DON'T WANT BASED        *
* /*              %INCLUDE SYSLIB(IKJEFFHT)                           *
* /********************************************************************
*    DCL 1 HISTORY
*            BASED(ADDR(HISTFLD))
*                 ,                  /* *** HISTORY TABLE ***         *
*               2 SUBTAB CHAR (12),           /* SUBMIT TABLE         *
*               2 WHATMOD CHAR (4),           /* WHAT MODULE          *
*                 (3  INCONTRL,               /*   CONTROL = IKJEFF06 *
*                  3 INPROMPT,                /*   PROMPTJOB=IKJEFF13 *
*                  3 INGEN) PTR (8),          /*   GENJOB  = IKJEFF08 *
*                 (3 INREAD,                  /*   READER  = IKJEFF05 *
*                  3 INIDENT,                 /*   IDENTIFY= IKJEFF07 *
*                  3 INEXIT,                  /*   EXITINT = IKJEFF09 *
*                  3 INWRMGR,                 /*   WRMGR   = IKJEFF12 *
*                  3 INDAIRIN,                /*   (UNUSED IN REL.2)  *
*                  3 INMSG,                   /*   (UNUSED IN REL.2)  *
*                  3 INCOMPIN,                /*   (UNUSED IN REL.2)  *
*                  3 INOINIT) BIT (1),        /*   OUTPUTINIT = IKJEFF1
*                                                  -            Y02064*
*               2 JCLSWITS CHAR(8),           /* JCL SWITCHES   Y02993*
*                 3 PRIORJCL CHAR (4),        /*   PRIOR CARD         *
*                   4 PVERB CHAR(2),          /*     VERB TYPE        *
*                     (5 PDELIM,              /*        DELIMITER     *
*                      5 PDATA,               /*        DATA          *
*                      5 PNULL,               /*        NULL          *
*                      5 PJOB,                /*        JOB           *
*                      5 PEXEC,               /*        EXEC          *
*                      5 PDD,                 /*        DD            *
*                      5 PCOMMAND,            /*        COMMAND       *
*                      5 PCOMMENT,            /*        COMMENT       *
*                      5 PJES,                /*        SLASH-ASTERISK
*                                                       NONBLANK      *
*                      5 *) BIT(1),
*                      5 * BIT(6),
*                   4 PDTYPE CHAR (1),        /*     DATA TYPE        *
*                      (5 PDDAST,             /*        ASTERISK      *
*                       5 PDDDATA) BIT (1),   /*        DATE          *
*                   4 PMISC CHAR (1),         /*     MISC SWITS       *
*                     (5 PCONEX,              /*        CON EXPECTED  *
*                      5 POPCONEX,            /*        OPERAND CONEXP*
*                      5 PCONERR,             /*        CON EXPECT ERR*
*                      5 PNAME,               /*        HAS NAME      *
*                      5 PVERBCOP,            /*        VERB COPIED   *
*                      5 PCOMCON,             /*        MAKE NEXT STMT
*                                                         A COMMENT   *
*                      5 PNOTHING,            /*        UNKNOWN       *
*                      5 PDLMFND) BIT(1),     /*        DLM= FOUND
*                                       - (BUT MAY HAVE BAD VALUE)
*                                       -                       Y02993*
*                 3 CURRJCL CHAR (4),         /*   CURRENT JCL        *
*                   4 CVERB CHAR (2),         /*    SAME AS FOR PVERB *
*                     (5 CDELIM,              /*    SAME AS FOR PVERB *
*                      5 CDATA,               /*    SAME AS FOR PVERB *
*                      5 CNULL,               /*    SAME AS FOR PVERB *
*                      5 CJOB,                /*    SAME AS FOR PVERB *
*                      5 CEXEC,               /*    SAME AS FOR PVERB *
*                      5 CDD,                 /*    SAME AS FOR PVERB *
*                      5 CCOMMAND,            /*    SAME AS FOR PVERB *
*                      5 CCOMMENT,            /*    SAME AS FOR PVERB *
*                      5 CJES,                /*    SAME AS FOR PVERB *
*                      5 *) BIT(1),
*                      5 * BIT(6),
*                   4 CDTYPE CHAR (1),        /*   CURRENT DATA TYPE  *
*                     (5 CDDAST,              /*    SAME AS FOR PDTYPE*
*                      5 CDDDATA) BIT (1),    /*    SAME AS FOR PDTYPE*
*                   4 CMISC CHAR (1),         /*    SAME AS FOR PMISC *
*                     (5 CCONEX,              /*    SAME AS FOR PMISC *
*                      5 COPCONEX,            /*    SAME AS FOR PMISC *
*                      5 CCONERR,             /*    SAME AS FOR PMISC *
*                      5 CNAME,               /*    SAME AS FOR PMISC *
*                      5 CVERBCOP,            /*    SAME AS FOR PMISC *
*                      5 CCOMCON,             /*    SAME AS FOR PMISC *
*                      5 CNOTHING,            /*    SAME AS FOR PMISC *
*                      5 CDLMFND) BIT(1),     /*    SAME AS FOR PMISC *
*                2 STATICSW CHAR(4),          /* STATIC SWITCHES      *
*                 3 GENL CHAR (1),            /*   GENERAL            *
*                   (4 QUIT,                  /*        QUIT          *
*                    4 FLUSH,                 /*        FLUSH         *
*                    4 FIRST,                 /*        FIRST SWITCH  *
*                    4 NONOTIFY) BIT (1),     /*        DON'T PUT NOTIF
*                                                       KEYWORD ON
*                                                       GENERATED JOB
*                                                       CARD */
*                 3 TAKEXITS CHAR (1),        /*   TAKE EXITS ON      *
*                   (4 JOBX,                  /*        JOB           *
*                    4 EXECX,                 /*        EXEC          *
*                    4 DDX,                   /*        DD            *
*                    4 CMDX,                  /*        COMMAND       *
*                    4 NULLX,                 /*        NULL          *
*                    4 JESX,                  /*        JES2 CTL CARD *
*                    4 COMNTX,                /*        COMMENT (JES3)*
*                    4 *) BIT(1),
*                 3 OPOFF PTR (8),            /*   OPERAND OFFSET     *
*                 3 CODEFLD  PTR(8), /* FUNCTION CODES          Y02993*
*                  4 HTCODE PTR(8),  /* SEE DCLS FOR CONSTANTS  Y02064*
*           2 * PTR(31),             /* **RESERVED**                  *
*           2 DLMONJCL CHAR(2),      /* FOR DLM KWD ON DD * OR DD DATA*
*             3 HTDLM   CHAR(2),     /* DLM = 2 CHARACTER VALUE Y02993*
*           2 HTSWITCH CHAR(1),      /* SWITCH BYTE FOR SUBMIT        *
*             3 HTDLMSW BIT(1),      /* ON IF DLM= FOUND ON DD  Y02993*
*             3 * BIT(7),            /* **RESERVED**                  *
*           2 * CHAR(1),             /* **RESERVED**                  *
*           2 * BDY(BYTE)  PTR(31),  /* **RESERVED**                  *
*           2 HTACCNTP PTR(31),      /* PTR TO USER'S JOB ACCOUNTING
*                                       INFORMATION             Y02993*
*           2 HTACCNTL BDY(BYTE) FIXED(15), /* LENGTH OF ACCOUNT
*                                       INFORMATION (MAX OF 142 + QUOTE
*                                       +/OR PARENTHESES)       Y02993*
*           2 HTACNTC1 BDY(BYTE) FIXED(15), /* END COLUMN OF ACCOUNT
*                                       INFO TO INSERT IN FIRST CARD OF
*                                       GENERATED JOB STMT (0 IF ACCOUN
*                                       INFO FITS ON ONE CARD)  Y02993*
*           2 HTACNTC2 BDY(BYTE) FIXED(15), /* END COLUMN OF ACCOUNT
*                                       INFO TO INSERT IN SECOND CARD O
*                                       GENERATED JOB STMT (0 IF ACCOUN
*                                       INFO FITS ON TWO CARDS) Y02993*
*           2 * BDY(BYTE) FIXED(15); /* **RESERVED**                  *
*
*        DCL HTACCNTI
*                      BASED(HTACCNTP)
*                      CHAR(190);    /* USER'S ACCOUNTING INFORMATION A
*                                       LOGON (RECONSTRUCTED)   Y02993*
*    /*****************************************************************
*    /*  END OF THE IKJEFFHT MAPPING MACRO                            *
*    /*****************************************************************
*         DCL
*               USERID CHAR (8);
*         DCL
*               JOBNAME CHAR (8);    /* FIELD FOR THE NAME OF THE
*                                       CURRENT JOB */
*         DCL
*               STMTPT PTR;          /* POINTER TO THE CURRENT (JOB)
*                                       STATEMENT */
*         DCL
*               CARD CHAR (80) BASED (STMTPT);
*         DCL
*               CARD2 CHAR (80);     /* THIS IS A WORK FIELD TO BE
*                                       USED IF THE INPUT JOB CARD HAS
*                                       TO BE CHANGED */
*         DCL
*               SAVEJCL CHAR(4);     /* SAVE CURRJCL WHILE PROCESSING
*                                       NULL CARD TO DELIMIT JOBS
*                                                              @Y02993*
*         DCL
*               MSGPTR PTR;
**/********************************************************************
**/*                                                                  *
**/* *** IKJEFFMT ***     LEVEL= 2/12/74     OS/VS2 RELEASE 02.0      *
**/*                                                                  *
**/* DESCRIPTION - BILINGUAL MAPPING MACRO FOR PARAMETER LIST TO      *
**/*               IKJEFF02 (TSO MESSAGE ISSUER SERVICE ROUTINE)      *
**/*                                                                  *
**/* FUNCTION    - THE PARAMETER LIST IDENTIFIES A MESSAGE (WHICH     *
**/*               MAY HAVE A SECOND LEVEL MESSAGE), DESCRIBES        *
**/*               INSERT(S) FOR THE MESSAGE, AND INDICATES WHETHER   *
**/*               TO ISSUE THE MESSAGE AS A PUTLINE, PUTGET, WTO,    *
**/*               OR A WRITE TO PROGRAMMER.                          *
**/*                                                                  *
**/*               THE PARAMETER LIST ALSO POINTS TO A MESSAGE        *
**/*               CSECT CONTAINING THE MESSAGE'S TEXT.  THE          *
**/*               IKJTSMSG MACRO IS USED TO GENERATE THE             *
**/*               NECESSARY DC'S FOR THE TEXT AND THE OFFSETS        *
**/*               TO INSERTS IN THE MESSAGE.  THE LAST ENTRY IN      *
**/*               THE CSECT MUST BE AN IKJTSMSG MACRO WITH NO        *
**/*               OPERANDS.  SEE THE MICROFICHE LISTING OF MODULE    *
**/*               IKJEFF55 FOR EXAMPLES OF MESSAGE TEXTS GENERATED   *
**/*               BY THE IKJTSMSG MACRO.                             *
**/*                                                                  *
**/*               REGISTER 1 -> MTPARML = MSGTABLE PARMLIST          *
**/*               REGISTER 15 WILL CONTAIN IKJEFF02'S RETURN CODE    *
**/*                           TO THE CALLER (0 IF SUCCESSFUL,        *
**/*                           76 IF PARAMETER LIST ERROR (MESSAGE    *
**/*                           ALSO ISSUED), OR ERROR RETURN CODE     *
**/*                           FROM PUTLINE OR PUTGET)                *
**/*                                                                  *
**/* METHOD OF ACCESS                                                 *
**/*      PL/S   - %MTNEW='1' - - - - - - IF DON'T WANT BASED         *
**/*               %MTBASE='ANY BASE' - - IF MTNEW ISN'T SPECIFIED,   *
**/*                                       DEFAULTS TO BASED(MSGPTR)  *
**/*               %MTINSRTN='N'  - - - - TO GET INSERT ARRAY WITH N  *
**/*                                       ELEMENTS - DEFAULTS TO     *
**/*                                       4 INSERTS, NO ARRAY        *
**/*               %INCLUDE SYSLIB(IKJEFFMT)                          *
**/*                                                                  *
**/*      BAL    - <<MACRO SPECIFICATION IS                           *
**/*                       IKJEFFMT MTDSECT=XX,MTNINST=XX>>           *
**/*               MTDSECT=YES  IF DON'T WANT TO GET CORE,            *
**/*                 THEN CODE      LA    REG,MYMTCORE  *CALLER AREA* *
**/*                                USING MTDSECTD,REG                *
**/*               MTDSECT=NO  IS THE DEFAULT.                        *
**/*                                                                  *
**/*               MTNINST=NUMBER  SPECIFIES NUMBER OF INSERT ENTRIES *
**/*               IN THE PARAMETER LIST.  MTNINST=4 IS THE DEFAULT.  *
**/*                                                                  *
**/* F.E.'S      - MICROFICHE LISTING = IKJEFFMT                      *
**/*                                                                  *
**/********************************************************************
**       DCL 1 MSGTABLE
**           BASED(MSGPTR)
**         ,              /* <<MESSAGE TABLE FOR IKJEFF02>>  UNUSED
**                           FIELDS MUST BE ZEROED */
**    2 LISTPTR  PTR(31), /* POINTER TO MESSAGE DESCRIPTION SECTION OF
**                           PARAMETER LIST */
**    2 TMCTPTR  PTR (31),/* POINTER TO TMP'S TMCT CONTROL BLOCK
**                           (REQUIRED FOR PUTLINE OR PUTGET) */
**     3 MTCPPL  PTR(31), /* (ALSO CALLED CPPL)   */
**    2 ECBPTR   PTR(31), /* OPTIONAL PUTLINE/PUTGET ECB POINTER */
**    2 *        PTR(31), /* ** RESERVED FOR FUTURE USE **       */
**     3 MTHIGH  BIT(1),  /* CAN TURN ON FOR STANDARD LINKAGE */
**    2 MSGCSECT PTR(31), /* <<MESSAGE DESCRIPTION SECTION STARTS HERE>
**                           POINTER TO CSECT WITH CALLER'S MESSAGE
**                           TEXTS, BUILT WITH IKJTSMSG MACRO */
**    2 SW        PTR(8), /* FIRST BYTE OF SWITCHES */
**     3 MTNOIDSW BIT(1), /* ON IF PRINTING DATA (SEE IKJEFF02'S
**                           PROLOGUE FOR DETAILS) */
**     3 MTPUTLSW BIT(1), /* ON IF ISSUE PUTLINE, NOT DEFAULT OF PUTGET
**                           FOR PUTLINE, MESSAGE INSERTS FOR A SECOND
**                           LEVEL MESSAGE MUST BE LISTED BEFORE INSERT
**                           FOR A FIRST LEVEL. PUTGET MESSAGES MUST
**                           HAVE A SECOND LEVEL. */
**     3 MTWTOSW  BIT(1), /* ON IF ISSUE MESSAGE AS A WTO WITH
**                           ROUTCDE=(2), DESC=(6).  MESSAGE IS
**                           TRUNCATED IF IT EXCEEDS 124 CHARACTERS. */
**     3 MTHEXSW  BIT(1), /* ON IF TRANSLATE NUMERIC INSERTS TO
**                           PRINTABLE HEX (X'VALUE'), NOT DECIMAL */
**     3 MTKEY1SW BIT(1), /* ON IF DO MODESET TO KEY 0 BEFORE ISSUE
**                           A PUTLINE OR PUTGET, THEN RETURN TO KEY 1
**                           (IF KEY 0 OR 8, DON'T NEED MODESET) */
**     3 MTJOBISW BIT(1), /* ON IF COMPRESS BLANKS OUT OF XX(YY)
**                           TYPE INSERT */
**     3 MTWTPSW BIT(1),  /* ON IF ISSUE MESSAGE AS A WRITE TO
**                           PROGRAMMER (WITH DESC=(7).  IF MESSAGE IS
**                           LONGER THAN 124 CHARACTERS, SEVERAL WTP'S
**                           ARE ISSUED. */
**     3 MTNHEXSW BIT(1), /* ON IF TRANSLATE ALL NUMERIC INSERTS
**                           TO PRINTABLE DECIMAL (DEFAULT IS
**                           DECIMAL IF VALUE LESS THAN X'FFFF',
**                           OTHERWISE TRANSLATE TO PRINTABLE HEX) */
**    2 RETMSG   PTR(24), /* POINTER TO REPLY FROM PUTGET */
**    2 SW2      PTR(8),  /* SECOND BYTE OF SWITCHES */
**     3 MT2OLDSW BIT(1), /* ON IF MTOLDPTR POINTS TO SECOND LEVEL
**                           MESSAGE ALREADY IN PUTLINE/PUTGET O.L.D.
**                           FORMAT.  IKJEFF02 WILL COPY IKJ MSG ID FRO
**                           FIRST LEVEL INTO FIRST SEGMENT OF SECOND
**                           LEVEL MESSAGE.  (FOR TSO STATUS COMMAND.)*
**     3 MTDOMSW BIT(1),  /* ON IF DELETE WRITE TO PROGRAMMER OR WTO
**                           MESSAGES FROM DISPLAY CONSOLE */
**     3 MTNOXQSW BIT(1), /* ON IF OVERRIDE DEFAULT OF X' ' AROUND
**                           INSERTS CONVERTED TO PRINTABLE HEX */
**     3 MTNPLMSW BIT(1), /* ON IF OVERRIDE DEFAULT OF WRITE TO
**                           PROGRAMMER ERROR MESSAGE IF PUTLINE FAILS*
**     3 MTPGMSW  BIT(1), /* ON IF WANT AN ERROR MSG IF PUTGET FAILS */
**     3 *        BIT(3), /* ** RESERVED **       */
**    2 *        PTR(24), /* ** RESERVED **       */
**    2 MTOLDPTR PTR(31), /* POINTS TO O.L.D. IF MT2OLDSW IS ON */
**    2 *        PTR(31), /* ** RESERVED **       */
**    2 *        PTR(31), /* ** RESERVED **       */
**    2 MSGID CHAR (4),   /* MESSAGE ID USED TO SEARCH FOR MESSAGE
**                           TEXT IN THE MESSAGE CSECT */
**    2 MTINSRTS,         /* USE THIS NAME TO ZERO INSERT AREA.  HAVE
**                           MAXIMUM OF 255 PARTS TO A FIRST OR LATER
**                           LEVEL MESSAGE, BUT IF A MESSAGE LEVEL
**                           EXCEEDS 256 CHARACTERS, IT IS TRUNCATED.
**                           TRAILING BLANKS ARE DELETED FROM INSERTS.
**                           EXTRA INSERT FIELDS NEED NOT BE ZEROED.
**                           IF AN INSERT LENGTH (OR ADDRESS) FIELD IS
**                           ZERO, NO INSERT IS DONE FOR THE ENTRY, BUT
**                           FOLLOWING INSERTS ARE DONE.              *
**     3 L1       PTR  (8),       /* LENGTH OF INSERT 1.  MAXIMUM
**                           LENGTH IS 127. */
**      4 HIGHL1 BIT (1), /* ON IF TRANSLATE FIRST
**                           4 BYTES OF INSERT
**                           FROM HEX TO CHARACTER
**                           (IGNORE REST).  SEE MTHEXSW. */
**     3 VAR1     PTR (24),       /* ADDRESS OF INSERT1
**                           -NOTE- INSERTS FOR
**                           SECOND LEVEL MSG MUST
**                           BE FIRST IF PUTLINE OR WTP */
**     3 L2       PTR  (8),/* LEN OF INSERT2       */
**      4 HIGHL2 BIT (1), /* BIT FOR INSERT2      */
**     3 VAR2     PTR (24),/* ADDR OF INSERT2      */
**     3 L3 PTR (8),      /* LEN OF INSERT3       */
**      4 HIGHL3 BIT (1), /* BIT FOR INSERT3      */
**     3 VAR3 PTR (24),   /* ADDR OF INSERT3      */
**     3 L4 PTR (8),      /* LEN OF INSERT4       */
**      4 HIGHL4 BIT (1), /* BIT FOR INSERT4      */
**     3 VAR4 PTR (24),   /* ADDR OF INSERT4      */
**    2 MSGRTN   PTR (31);/* MESSAGE ROUTINE ADDRESS - NOT USED
**                                   BY IKJEFF02          */
**
**/********************************************************************
**/*  IKJEFFMT - FORMAT OF REPLY FROM TSO USER                        *
**/********************************************************************
**   DCL 1 RET BDY(WORD) BASED(RETMSG), /* MESSAGE REPLY BUFFER.
**                           IKJEFF02 OBTAINS THE BUFFER IN SUBPOOL 0
**                           AND THE CALLER MAY FREE THIS BUFFER. */
**         2 RETSIZE FIXED(15), /* BUFFER SIZE, INCLUDING THESE TWO
**                           BYTES  */
**         2 RETCHAR CHAR(999); /* REPLY TEXT FROM PUTGET.  IKJEFF02
**                           CONVERTS REPLY TO UPPER CASE. */
**
**/********************************************************************
**/*  IKJEFFMT - CPPL AND ECB POINTED TO BY MESSAGE TABLE             *
**/********************************************************************
**   DCL MSGTMCT BASED (TMCTPTR);  /* TMP'S CPPL CONTROL BLOCK   */
**   DCL MSGECB BASED (ECBPTR);    /* ECB FOR PUTLINE/PUTGET  */
**/********************************************************************
**/*  END OF IKJEFFMT MAPPING MACRO                                   *
**/********************************************************************
*         DCL
*               MSGSW CHAR (1) BASED (ADDR(SW));
*                                    /* CHAR DESCRIP OF 'SW' */
*         DCL
*               MSGADDR PTR;
*         DCL
*               JEFF02 ENTRY BASED (MSGADDR);
*                                    /* MESSAGE PROCESSING ROUTINE */
*         DCL
*               CT;                  /* LOOP CONTROL USED IN
*                                       CONVERSING WITH THE USER */
*         DCL
*               HOLD;                /* USED TO HOLD THE POINTER TO
*                                       THE CURRENT STATEMENT IF IT
*                                       BECOMES NECESSARY TO GENERATE
*                                       A NEW ONE */
*         DCL
*               I;                   /* USED TO INDEX THROUGH THE
*                                       USER'S REPLY BUFFER */
*         DCL
*               K;                   /* CARD INDEX */
*         DCL
*               R1 PTR REG (1);
*         DCL
*               R15 REG (15);
*         DCL
*               R0 REG (0);
*         DCL
*               ADDCHAR CHAR (1);    /* THIS IS THE ADDED CHARACTER
*                                       THAT IS TO BE APPENDED TO THE
*                                       USERID JOBNAME -- TAKEN FROM
*                                       THE FIRST NON-BLANK IN THE
*                                       USER'S RESPONSE TO PROMPTING
*                                       */
*    DCL 1 PATCH STATIC LOCAL,       /* F.E. PATCH AREA        @Y02993*
*         2 PTCHINIT(17) CHAR(3) INIT((17)'ZAP');
*         INPROMPT = INPROMPT+1;
         LA    @F,1                                               0029
         L     @8,20(0,@1)         ADDRESS OF HISTFLD             0029
         SR    @0,@0                                              0029
         IC    @0,13(0,@8)                                        0029
         AR    @F,@0                                              0029
         STC   @F,13(0,@8)                                        0029
*         IF FIRST='0'B &
*              PNULL='0'B THEN       /* IF NOT FIRST JOB CARD AND IF
*                                       HAD NO PRIOR NULL CARD @Y02993*
         TM    24(@8),B'00100000'                                 0030
         BC    05,@9FF                                            0030
         TM    16(@8),B'00100000'                                 0030
         BC    05,@9FE                                            0030
*             DO;
*               CARD2='//';          /* FIRST PROCESS A NULL CARD TO
*                                       CUT OFF THE PRECEDING JOB
*                                       PRIOR TO LOOKING AT THE
*                                       CURRENT ONE -- OTHERWISE THE
*                                       USER WILL SEE THE PROMPT MSG
*                                       BEFORE HE SEES THE
*                                       CONFIRMATION JOB SUBMITTED
*                                       MSG FOR THE LAST JOB  @Y02993*/
         MVC   CARD2(2),@C2                                       0032
         MVI   CARD2+2,C' '                                       0032
         MVC   CARD2+3(77),CARD2+2                                0032
*               SAVEJCL=CURRJCL;     /* WON'T GO THROUGH JCL ID RTN
*                                       AGAIN FOR JOB CARD    @Y02993*/
         MVC   SAVEJCL(4),20(@8)                                  0033
*               CURRJCL=PRIORJCL;    /*BUT GO TO JCL ID FOR NULLY02993*
         MVC   20(4,@8),16(@8)                                    0034
*               HOLD=STMTPT;         /* SAVE PTR TO JOB CARD   @Y02993*
         L     @9,4(0,@1)          ADDRESS OF STMTPT              0035
         MVC   HOLD(4),0(@9)                                      0035
*               STMTPT=ADDR(CARD2);  /* STORE ADDR OF // CARD  @Y02993*
         LA    @F,CARD2                                           0036
         ST    @F,0(0,@9)                                         0036
*               CALL IKJEFF06 (CONTABPT); /* PROCESS NULL CARD @Y02993*
         L     @6,12(0,@1)         ADDRESS OF CONTABPT            0037
         ST    @6,@PL001                                          0037
         L     @F,@V1              ADDRESS OF IKJEFF06            0037
         LA    @1,@PL001                                          0037
         BALR  @E,@F                                              0037
         L     @1,4(0,@D)                                         0037
         L     @1,24(0,@1)                                        0037
*               STMTPT=HOLD;         /* RESTORE JOB CARD       @Y02993*
         L     @8,4(0,@1)          ADDRESS OF STMTPT              0038
         MVC   0(4,@8),HOLD                                       0038
*               PRIORJCL=CURRJCL;    /* SHOULD BE NULL CARD    @Y02993*
         L     @9,20(0,@1)         ADDRESS OF HISTFLD             0039
         MVC   16(4,@9),20(@9)                                    0039
*               CURRJCL=SAVEJCL;     /* RESTORE IDENTITY OF JOB CARD
*                                                              @Y02993*
         MVC   20(4,@9),SAVEJCL                                   0040
*             END;                   /* END OF CHANGED LOGIC   @Y02993*
*         IF USERID ^= JOBNAME THEN
@9FE     EQU   *                                                  0042
@9FF     L     @8,16(0,@1)         ADDRESS OF JOBNAME             0042
         L     @9,8(0,@1)          ADDRESS OF USERID              0042
         CLC   0(8,@9),0(@8)                                      0042
         BC    08,@9FB                                            0042
*           DO;                      /* RETURN IF JOBNAME IS NOT
*                                       EXACTLY SAME AS USERID -- BUT
*                                       IF IT IS THE SAME, THEN A
*                                       CHARACTER MUST BE ADDED TO
*                                       MAKE IT UNIQUE -- NOTE - THE
*                                       USER AT HIS TERMINAL IS
*                                       ALREADY KNOWN TO THE SYSTEM AS
*                                       'USERID' */
*
*     OUT:
*             INPROMPT = INPROMPT-1;
OUT      LH    @F,@D1                                             0044
         L     @8,20(0,@1)         ADDRESS OF HISTFLD             0044
         SR    @0,@0                                              0044
         IC    @0,13(0,@8)                                        0044
         AR    @F,@0                                              0044
         STC   @F,13(0,@8)                                        0044
*             RETURN;
         BC    15,@EL01                                           0045
*           END;                     /* AN EXTRA CHARACTER IS TO BE
*                                       ADDED TO NAME BUT FIRST CHECK
*                                       TO SEE IF HAVE ROOM FOR IT */
*         K=3;
@9FB     LA    @F,3                                               0047
         ST    @F,K                                               0047
*
*     LOOP:
*         K=K+1;
LOOP     LA    @F,1                                               0048
         A     @F,K                                               0048
         ST    @F,K                                               0048
*         IF CARD(K) ^=' ' THEN
         LR    @8,@F                                              0049
         L     @9,4(0,@1)          ADDRESS OF STMTPT              0049
         L     @6,0(0,@9)          STMTPT                         0049
         LA    @A,0(@8,@6)                                        0049
         BCTR  @A,0                                               0049
         CLI   0(@A),C' '                                         0049
*           GO TO LOOP;              /* LOOP ACROSS THE NAME FIELD TO
*                                       FIND THE BLANK -- IF CARD(K)
*                                       IS NOT BLANK THEN KEEP LOOPING
*                                       */
         BC    07,LOOP                                            0050
*         IF CARD(K+1)=' ' THEN
         LA    @7,1                                               0051
         A     @7,K                                               0051
         LA    @A,0(@7,@6)                                        0051
         BCTR  @A,0                                               0051
         CLI   0(@A),C' '                                         0051
*           GO TO PROMPT;            /* OK TO PROMPT IF TWO BLANKS
*                                       FOUND -- OTHERWISE K+1 PTS TO
*                                       J OF JOB */
         BC    08,PROMPT                                          0052
*         IF CARD(K+5)=' ' THEN
         LA    @4,5                                               0053
         A     @4,K                                               0053
         LA    @A,0(@4,@6)                                        0053
         BCTR  @A,0                                               0053
         CLI   0(@A),C' '                                         0053
*           GO TO MOVEJOB;           /* ALSO OK IF HAVE ROOM AFTER
*                                       'JOB' -- IN WHICH CASE MOVE
*                                       'JOB' OVER AND THEN PROCEED TO
*                                       PROMPT FOR A CHAR TO BE ADDED
*                                       */
         BC    08,MOVEJOB                                         0054
*         IF CARD(70:71)='  ' THEN
         CLC   69(2,@6),@C4                                       0055
         BC    07,@9FA                                            0055
*           DO;                      /* STILL OK IF COLS 70-71 ARE
*                                       BLANK */
*             CARD2(1:65-K) = CARD(K+5:69);
         LA    @5,5                                               0057
         A     @5,K                                               0057
         LA    @E,0(@5,@6)                                        0057
         BCTR  @E,0                                               0057
         LR    @2,@F                                              0057
         LCR   @2,@2                                              0057
         AH    @2,@D2                                             0057
         BCTR  @2,0                                               0057
         LA    @A,CARD2                                           0057
         EX    @2,@MVC                                            0057
*                                    /* COPY OPERANDS AND COMMENTS TO
*                                       CARD2 AND BACK AGAIN ONE BYTE
*                                       TO THE RIGHT */
*             CARD(K+6:70) = CARD2(1:65-K);
         LA    @E,CARD2                                           0058
         LA    @2,70                                              0058
         LA    @3,6                                               0058
         A     @3,K                                               0058
         SR    @2,@3                                              0058
         LA    @A,0(@3,@6)                                        0058
         BCTR  @A,0                                               0058
         EX    @2,@MVC                                            0058
*             GO TO MOVEJOB;         /* AFTER THIS SHUFFLE, NOW GO TO
*                                       MOVE 'JOB' AND PROMPT */
         BC    15,MOVEJOB                                         0059
*           END;
*         HOLD = STMTPT;             /* FAILING THESE MOVES IT WILL BE
*                                       NECESSARY TO CALL GENJOB FOR A
*                                       DEFAULT JOB CARD AND THEN TURN
*                                       THE CURRENT ONE INTO A COMMENT
*                                       */
@9FA     L     @8,4(0,@1)          ADDRESS OF STMTPT              0061
         MVC   HOLD(4),0(@8)                                      0061
*         STMTPT= ADDR(CARD2);
         LA    @F,CARD2                                           0062
         ST    @F,0(0,@8)                                         0062
*         CARD2='//* ORIGINAL JOB CARD FOLLOWS';
         MVC   CARD2(29),@C5                                      0063
         MVI   CARD2+29,C' '                                      0063
         MVC   CARD2+30(50),CARD2+29                              0063
*         CALL IKJEFF08 (HISTFLD, STMTPT, USERID, CONTABPT,MSGPTR);
         L     @9,20(0,@1)         ADDRESS OF HISTFLD             0064
         ST    @9,@PL001                                          0064
         ST    @8,@PL001+4                                        0064
         L     @6,8(0,@1)          ADDRESS OF USERID              0064
         ST    @6,@PL001+8                                        0064
         L     @7,12(0,@1)         ADDRESS OF CONTABPT            0064
         ST    @7,@PL001+12                                       0064
         L     @4,0(0,@1)          ADDRESS OF MSGPTR              0064
         ST    @4,@PL001+16                                       0064
         L     @F,@V2              ADDRESS OF IKJEFF08            0064
         LA    @1,@PL001                                          0064
         BALR  @E,@F                                              0064
         L     @1,4(0,@D)                                         0064
         L     @1,24(0,@1)                                        0064
*                                    /* CALL GENJOB ROUTINE TO
*                                       GENERATE A NEW JOB CARD --
*                                       NOTE THAT GENJOB WILL ALSO
*                                       HAVE THE COMMENT CARD BUILT
*                                       HERE (CARD2) TO BE PROCESSED
*                                                              @Y02993*
*         CCOMCON='1'B;              /* TURN COMMENT CONTINUATION
*                                       SWITCH ON, MEANING THAT THIS
*                                       CARD AND ALL CONS OF IT ARE TO
*                                       BE TURNED INTO COMMENTS (BY
*                                       IDENT IKJEFF07) -- RESTORE THE
*                                       POINTER TO THE ORIGINAL INPUT
*                                       JOB CARD */
         L     @8,20(0,@1)         ADDRESS OF HISTFLD             0065
         OI    23(@8),B'00000100'                                 0065
*         STMTPT=HOLD;
         L     @9,4(0,@1)          ADDRESS OF STMTPT              0066
         MVC   0(4,@9),HOLD                                       0066
*
*     CALLCON:
*         CALL IKJEFF06 (CONTABPT);  /* CALL THE CONTROL ROUTINE TO
*                                       PROCESS THE CARD AND THEN QUIT
*                                       */
CALLCON  L     @8,12(0,@1)         ADDRESS OF CONTABPT            0067
         ST    @8,@PL001                                          0067
         L     @F,@V1              ADDRESS OF IKJEFF06            0067
         LA    @1,@PL001                                          0067
         BALR  @E,@F                                              0067
         L     @1,4(0,@D)                                         0067
         L     @1,24(0,@1)                                        0067
*         GO TO OUT;
         BC    15,OUT                                             0068
*
*     MOVEJOB:
*         CARD(K+1:K+5)=' JOB ';     /* MOVE JOB OVER */
MOVEJOB  LA    @E,@C7                                             0069
         LA    @8,5                                               0069
         A     @8,K                                               0069
         LA    @9,1                                               0069
         A     @9,K                                               0069
         SR    @8,@9                                              0069
         L     @6,4(0,@1)          ADDRESS OF STMTPT              0069
         L     @7,0(0,@6)          STMTPT                         0069
         LA    @A,0(@9,@7)                                        0069
         BCTR  @A,0                                               0069
         EX    @8,@MVC                                            0069
*
*     PROMPT:
*                                    /* ASK USER FOR A CHARACTER -- K
*                                       POINTS TO WHERE IT GOES */
*         CT=0;
PROMPT   SR    @F,@F                                              0070
         ST    @F,CT                                              0070
*         MSGID='13A ';              /*ENTER JOBNAME CHAR MSG*/
         L     @8,0(0,@1)          ADDRESS OF MSGPTR              0071
         L     @9,0(0,@8)          MSGPTR                         0071
         MVC   40(4,@9),@C8                                       0071
*
*     CALLMSG:
*         MTPUTLSW = '0'B;           /* CALL THE MESSAGE PROCESSING
*                                       ROUTINE TO PUT OUT A PROMPT MSG
*                                                              @Y02656*
CALLMSG  L     @8,0(0,@1)          ADDRESS OF MSGPTR              0072
         L     @9,0(0,@8)          MSGPTR                         0072
         NI    20(@9),B'10111111'                                 0072
*     CALLMSG2:
*         MSGADDR = MSGRTN;
CALLMSG2 L     @8,0(0,@1)          ADDRESS OF MSGPTR              0073
         L     @9,0(0,@8)          MSGPTR                         0073
         MVC   MSGADDR(4),60(@9)                                  0073
*         HOLD=R1;                   /* NEED TO SAVE R1 */
         ST    @1,HOLD                                            0074
*         R1 = MSGPTR;               /* SET UP REG ONE WITH CORRECT
*                                       PARAMETER LIST  */
         L     @1,0(0,@8)                                         0075
*         CALL JEFF02;               /* CALL MESSAGE PROCESSOR  */
         L     @6,MSGADDR                                         0076
         LR    @F,@6                                              0076
         BALR  @E,@F                                              0076
*         R1 = HOLD;                 /* RESTORE REGISTER ONE    */
         L     @1,HOLD                                            0077
*         IF QUIT='1'B THEN
         L     @8,20(0,@1)         ADDRESS OF HISTFLD             0078
         TM    24(@8),B'10000000'                                 0078
*           GO TO OUT;               /* QUIT INDICATES THAT AN ERROR WA
*                                       ENCOUNTERED SOMEWHERE IN THE
*                                       SUBMIT PROCESSING    */
         BC    01,OUT                                             0079
*         IF MSGID='13C ' THEN DO;   /* INVALID CHARACTER MESSAGE */
         L     @9,0(0,@1)          ADDRESS OF MSGPTR              0080
         L     @6,0(0,@9)          MSGPTR                         0080
         CLC   40(4,@6),@C9                                       0080
         BC    07,@9F5                                            0080
*           MSGID='13D ';            /* SET MSG ID FOR REENTER MESSAGE*
         MVC   40(4,@6),@C10                                      0082
*           GOTO CALLMSG;
         BC    15,CALLMSG                                         0083
*           END;
*         MTPUTLSW = '1'B;           /* INDICATE PUTLINE NOW, NOT
*                                       PUTGET                 @Y02656*
@9F5     L     @8,0(0,@1)          ADDRESS OF MSGPTR              0085
         L     @9,0(0,@8)          MSGPTR                         0085
         OI    20(@9),B'01000000'                                 0085
*         IF R15 ^=0 THEN
         LTR   @F,@F                                              0086
         BC    08,@9F4                                            0086
*           DO;
*
*     BAD:
*                                    /* IF THE RETURN CODE IS NOT
*                                       ZERO, ISSUE A MESSAGE TO SAY
*                                       'MISSING JOB CHAR' AND THEN
*                                       QUIT */
*             QUIT='1'B;
BAD      L     @8,20(0,@1)         ADDRESS OF HISTFLD             0088
         OI    24(@8),B'10000000'                                 0088
*             MSGID='13B ';
         L     @9,0(0,@1)          ADDRESS OF MSGPTR              0089
         L     @6,0(0,@9)          MSGPTR                         0089
         MVC   40(4,@6),@C11                                      0089
*             GO TO CALLMSG2;        /* ISSUE MESSAGE AS PUTLINE, NOT
*                                       PUTGET                 @Y02993*
         BC    15,CALLMSG2                                        0090
*           END;
*         CT=CT+1;
@9F4     LA    @F,1                                               0092
         A     @F,CT                                              0092
         ST    @F,CT                                              0092
*         DO I =1 TO RETSIZE-2;      /* LOOP THROUGH THE USER'S
*                                       RESPONSE LOOKING FOR THE FIRST
*                                       NON-BLANK */
         LA    @F,1                                               0093
         ST    @F,I                                               0093
@DO9F3   LH    @F,@D3                                             0093
         L     @8,0(0,@1)          ADDRESS OF MSGPTR              0093
         L     @9,0(0,@8)          MSGPTR                         0093
         L     @9,20(0,@9)         MSGTABLE                       0093
         AH    @F,0(0,@9)                                         0093
         C     @F,I                                               0093
         BC    04,@DO9F0                                          0093
         BC    15,@DO9F1                                          0093
@DO9F2   LA    @F,1                                               0093
         A     @F,I                                               0093
         ST    @F,I                                               0093
         BC    15,@DO9F3                                          0093
*           IF RETCHAR(I) ^=' ' THEN
@DO9F1   L     @8,I                                               0094
         L     @9,0(0,@1)          ADDRESS OF MSGPTR              0094
         L     @6,0(0,@9)          MSGPTR                         0094
         L     @6,20(0,@6)         MSGTABLE                       0094
         LA    @A,1(@8,@6)                                        0094
         CLI   0(@A),C' '                                         0094
*             GO TO VALIDCHK;
         BC    07,VALIDCHK                                        0095
         BC    15,@DO9F2                                          0096
*         END;
*         ADDCHAR=' ';               /* INITIALIZE ADDCHAR TO A BLANK
*                                       BECAUSE THIS WILL ONLY BE EXE-
*                                       CUTED IF THERE IS A FALL THROUG
*                                       FROM THE ABOVE DO LOOP, HENCE
*                                       INDICATING THAT A BLANK LINE WA
*                                       ENTERED.  */
@DO9F0   MVI   ADDCHAR,C' '                                       0097
*     AGAIN:
*         R0=RETSIZE;                /* SET UP REG ZERO TO CONTAIN SIZE
*                                       OF THE AREA TO BE FREED */
AGAIN    L     @8,0(0,@1)          ADDRESS OF MSGPTR              0098
         L     @9,0(0,@8)          MSGPTR                         0098
         L     @9,20(0,@9)         MSGTABLE                       0098
         LH    @0,0(0,@9)                                         0098
*         HOLD=R1;                   /* SAVE ORIGINAL REGISTER ONE  */
         ST    @1,HOLD                                            0099
*         R1=ADDR(RET);              /* FREE THE RESPONSE BUFFER */
         LR    @1,@9                                              0100
*         GEN (FREEMAIN R,LV=(0),A=(1));
         FREEMAIN R,LV=(0),A=(1)
         DS    0H
*         R1=HOLD;                   /* RESTORE THE ORIGINAL CONTENTS O
*                                       REGISTER ONE  */
         L     @1,HOLD                                            0102
*         IF CT=0 THEN
         SR    @F,@F                                              0103
         C     @F,CT                                              0103
*           GO TO CALLCON;           /* IF CT=0 THEN ALL DONE */
         BC    08,CALLCON                                         0104
*         MSGID='13C ';              /* MSG ID INDICATES INVALID
*                                       CHARACTER MESSAGE  */
         L     @6,0(0,@8)          MSGPTR                         0105
         MVC   40(4,@6),@C9                                       0105
*         VAR1=ADDR(ADDCHAR);        /* VARIABLE TO BE INSERTED WITHIN
*                                       THE MSG IS THE RESPONSE GIVEN B
*                                       THE USER  */
         LA    @F,ADDCHAR                                         0106
         ST    @F,@TEMP4                                          0106
         MVC   45(3,@6),@TEMP4+1                                  0106
*         L1=1;                      /* LENGTH OF VARIABLE IS ONE  */
         MVI   44(@6),1                                           0107
*         GO TO CALLMSG2;
         BC    15,CALLMSG2                                        0108
*
*     VALIDCHK:
*                                    /* CHECK THE RESPONSE CHAR TO SEE
*                                       IF IT IS A VALID ALPHANUMERIC
*                                       */
*         ADDCHAR=RETCHAR(I);
VALIDCHK L     @8,I                                               0109
         L     @9,0(0,@1)          ADDRESS OF MSGPTR              0109
         L     @6,0(0,@9)          MSGPTR                         0109
         L     @6,20(0,@6)         MSGTABLE                       0109
         LA    @E,1(@8,@6)                                        0109
         MVC   ADDCHAR(1),0(@E)                                   0109
*         IF ADDCHAR='#' THEN
         CLI   ADDCHAR,C'#'                                       0110
*           GO TO APPEND;
         BC    08,APPEND                                          0111
*         IF ADDCHAR='$' THEN
         CLI   ADDCHAR,C'$'                                       0112
*           GO TO APPEND;
         BC    08,APPEND                                          0113
*         IF ADDCHAR='@' THEN
         CLI   ADDCHAR,C'@'                                       0114
*           GO TO APPEND;
         BC    08,APPEND                                          0115
*         IF ADDCHAR>= '0' THEN
         CLI   ADDCHAR,C'0'                                       0116
         BC    04,@9EF                                            0116
*           IF ADDCHAR <= '9' THEN
         CLI   ADDCHAR,C'9'                                       0117
*             GO TO APPEND;
         BC    12,APPEND                                          0118
*         IF ADDCHAR>='A' THEN
@9EF     CLI   ADDCHAR,C'A'                                       0119
         BC    04,@9EE                                            0119
*           IF ADDCHAR <='Z' THEN
         CLI   ADDCHAR,C'Z'                                       0120
*             GO TO APPEND;
*         GO TO AGAIN;
         BC    03,AGAIN                                           0122
*
*     APPEND:
*         CARD(K)=ADDCHAR;           /* COPY THE CHARACTER TO WHERE K
*                                       POINTS */
APPEND   L     @8,K                                               0123
         L     @9,4(0,@1)          ADDRESS OF STMTPT              0123
         L     @6,0(0,@9)          STMTPT                         0123
         LA    @A,0(@8,@6)                                        0123
         BCTR  @A,0                                               0123
         MVC   0(1,@A),ADDCHAR                                    0123
*         CURRJCL=PRIORJCL;
         L     @7,20(0,@1)         ADDRESS OF HISTFLD             0124
         MVC   20(4,@7),16(@7)                                    0124
*         CT=0;
         SR    @F,@F                                              0125
         ST    @F,CT                                              0125
*         GO TO AGAIN;               /* NEED TO FREE RETURN MSG AND
*                                       FROM THERE CALL CONTROL TO
*                                       REPROCESS THE CARD */
         BC    15,AGAIN                                           0126
**/*IKJEFF13:     CHART */
**/*HEADER
**/*IKJEFF13            ---              PROMPTJOB RTN */
**/*E ENTER */
**/*P INCREMENT THE INPROMPT JOB RTN CTR, PROCESS A NULL CARD */
**/*S IKJEFF06: CALL IKJEFF06 */
**/*D (NO,,YES,LOOP) IS USERID=JOB NAME? */
**/*OUT: P DECREMENT THE 'INPROMPT-JOB' CTR */
**/*R RETURN TO CALLER */
**/*LOOP: D (NO,,YES,%D3) ROOM FOR AN EXTRA CHARACTER? */
**/*N TWO BLANKS AFTER USERID OR 2 BEFORE VERB JOB */
**/*P SAVE ORIGINAL JOB CARD;INIT COMMENT CARD FOR JEFF08 */
**/*N COMMENT SAYS 'ORIGINAL JOB CARD FOLLOWS' */
**/*S IKJEFF08:  CALL IKJEFF08 */
**/*P TURN ON 'JOB COMMENT SW' */
**/*CALLCON: S (,OUT) IKJEFF06: CALL IKJEFF06 */
**/*%D3: D (NO,,YES,PROMPT) IS THE BLANK BEFORE THE VERB JOB */
**/*MOVEJOB: P MOVE THE VERB JOB OVER */
**/*PROMPT: P INITIALIZE A CHARACTER PROMPT MSG */
**/*CALLMSG: S IKJEFF02: CALL IKJEFF02 */
**/*D (YES,OUT,NO,%J3) IS THE QUIT SW ON? */
**/*%J3: D (NZERO,,ZERO,%LLB2) TEST RETURN CODE FROM MSG RTN */
**/*BAD: P SET THE QUIT SW TO 1 */
**/*P (,CALLMSG) SET MSGID TO SAY THERE WAS A MISSING JOBCHAR */
**/*%LLB2: P INCREMENT THE COUNT */
**/*N WHEN VALID CHAR IS FOUND CT ACTS LIKE A SWITCH */
**/*D (NONB,,BLANK,AGAIN) TEST FOR USER'S RESPONSE */
**/*VALIDCHK: D (YES,,NO,AGAIN) IS THE CHARACTER VALID */
**/*APPEND: P COPY THE CHARACTER THAT THE USER GAVE */
**/*P (,AGAIN) SET THE CT TO ZERO */
**/*AGAIN: P FREE THE RESPONSE BUFFER */
**/*D (NO,,YES,CALLCON) IS THE CT ZERO? */
**/*P (,CALLMSG) MSGID = '13C' -- INVALID CHAR MSG */
**/*IKJEFF13:          END */
*         END
* /* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.
* /*%INCLUDE SYSLIB  (IKJEFFHT)
* /*%INCLUDE SYSLIB  (IKJEFFMT)
* ;
@EL01    L     @D,4(0,@D)                                         0127
         LR    @1,@C                                              0127
         L     @0,@SIZ001                                         0127
         FREEMAIN R,LV=(0),A=(1)                                  0127
         LM    @E,@C,12(@D)                                       0127
         BCR   15,@E                                              0127
@DATA1   EQU   *
@0       EQU   00                  EQUATES FOR REGISTERS 0-15
@1       EQU   01
@2       EQU   02
@3       EQU   03
@4       EQU   04
@5       EQU   05
@6       EQU   06
@7       EQU   07
@8       EQU   08
@9       EQU   09
@A       EQU   10
@B       EQU   11
@C       EQU   12
@D       EQU   13
@E       EQU   14
@F       EQU   15
@D1      DC    H'-1'
@D2      DC    H'65'
@D3      DC    H'-2'
@MVC     MVC   0(1,@A),0(@E)
@V1      DC    V(IKJEFF06)
@V2      DC    V(IKJEFF08)
         DS    0F
@SIZ001  DC    AL1(&SPN)
         DC    AL3(@DATEND-@DATD)
         DS    0F
@C8      DC    C'13A '
@C9      DC    C'13C '
@C10     DC    C'13D '
@C11     DC    C'13B '
@C2      DC    C'//'
@C4      DC    C'  '
@C5      DC    C'//* ORIGINAL JOB CARD FOLLOWS'
@C7      DC    C' JOB '
         DS    0D
@DATA    EQU   *
CONTABPT EQU   00000000            FULLWORD INTEGER
HISTFLD  EQU   00000000            FULLWORD INTEGER
HISTORY  EQU   HISTFLD+00000000    52 BYTE(S) ON WORD
SUBTAB   EQU   HISTORY+00000000    12 BYTE(S)
WHATMOD  EQU   HISTORY+00000012    4 BYTE(S)
INCONTRL EQU   HISTORY+00000012    1  BYTE  POINTER
INPROMPT EQU   HISTORY+00000013    1  BYTE  POINTER
INGEN    EQU   HISTORY+00000014    1  BYTE  POINTER
INREAD   EQU   HISTORY+00000015    1 BIT(S)
INIDENT  EQU   HISTORY+00000015    1 BIT(S)
INEXIT   EQU   HISTORY+00000015    1 BIT(S)
INWRMGR  EQU   HISTORY+00000015    1 BIT(S)
INDAIRIN EQU   HISTORY+00000015    1 BIT(S)
INMSG    EQU   HISTORY+00000015    1 BIT(S)
INCOMPIN EQU   HISTORY+00000015    1 BIT(S)
INOINIT  EQU   HISTORY+00000015    1 BIT(S)
JCLSWITS EQU   HISTORY+00000016    8 BYTE(S)
PRIORJCL EQU   HISTORY+00000016    4 BYTE(S)
PVERB    EQU   HISTORY+00000016    2 BYTE(S)
PDELIM   EQU   HISTORY+00000016    1 BIT(S)
PDATA    EQU   HISTORY+00000016    1 BIT(S)
PNULL    EQU   HISTORY+00000016    1 BIT(S)
PJOB     EQU   HISTORY+00000016    1 BIT(S)
PEXEC    EQU   HISTORY+00000016    1 BIT(S)
PDD      EQU   HISTORY+00000016    1 BIT(S)
PCOMMAND EQU   HISTORY+00000016    1 BIT(S)
PCOMMENT EQU   HISTORY+00000016    1 BIT(S)
PJES     EQU   HISTORY+00000017    1 BIT(S)
A00000   EQU   HISTORY+00000017    1 BIT(S)
A00001   EQU   HISTORY+00000017    6 BIT(S)
PDTYPE   EQU   HISTORY+00000018    1 BYTE(S)
PDDAST   EQU   HISTORY+00000018    1 BIT(S)
PDDDATA  EQU   HISTORY+00000018    1 BIT(S)
PMISC    EQU   HISTORY+00000019    1 BYTE(S)
PCONEX   EQU   HISTORY+00000019    1 BIT(S)
POPCONEX EQU   HISTORY+00000019    1 BIT(S)
PCONERR  EQU   HISTORY+00000019    1 BIT(S)
PNAME    EQU   HISTORY+00000019    1 BIT(S)
PVERBCOP EQU   HISTORY+00000019    1 BIT(S)
PCOMCON  EQU   HISTORY+00000019    1 BIT(S)
PNOTHING EQU   HISTORY+00000019    1 BIT(S)
PDLMFND  EQU   HISTORY+00000019    1 BIT(S)
CURRJCL  EQU   HISTORY+00000020    4 BYTE(S)
CVERB    EQU   HISTORY+00000020    2 BYTE(S)
CDELIM   EQU   HISTORY+00000020    1 BIT(S)
CDATA    EQU   HISTORY+00000020    1 BIT(S)
CNULL    EQU   HISTORY+00000020    1 BIT(S)
CJOB     EQU   HISTORY+00000020    1 BIT(S)
CEXEC    EQU   HISTORY+00000020    1 BIT(S)
CDD      EQU   HISTORY+00000020    1 BIT(S)
CCOMMAND EQU   HISTORY+00000020    1 BIT(S)
CCOMMENT EQU   HISTORY+00000020    1 BIT(S)
CJES     EQU   HISTORY+00000021    1 BIT(S)
A00002   EQU   HISTORY+00000021    1 BIT(S)
A00003   EQU   HISTORY+00000021    6 BIT(S)
CDTYPE   EQU   HISTORY+00000022    1 BYTE(S)
CDDAST   EQU   HISTORY+00000022    1 BIT(S)
CDDDATA  EQU   HISTORY+00000022    1 BIT(S)
CMISC    EQU   HISTORY+00000023    1 BYTE(S)
CCONEX   EQU   HISTORY+00000023    1 BIT(S)
COPCONEX EQU   HISTORY+00000023    1 BIT(S)
CCONERR  EQU   HISTORY+00000023    1 BIT(S)
CNAME    EQU   HISTORY+00000023    1 BIT(S)
CVERBCOP EQU   HISTORY+00000023    1 BIT(S)
CCOMCON  EQU   HISTORY+00000023    1 BIT(S)
CNOTHING EQU   HISTORY+00000023    1 BIT(S)
CDLMFND  EQU   HISTORY+00000023    1 BIT(S)
STATICSW EQU   HISTORY+00000024    4 BYTE(S)
GENL     EQU   HISTORY+00000024    1 BYTE(S)
QUIT     EQU   HISTORY+00000024    1 BIT(S)
FLUSH    EQU   HISTORY+00000024    1 BIT(S)
FIRST    EQU   HISTORY+00000024    1 BIT(S)
NONOTIFY EQU   HISTORY+00000024    1 BIT(S)
TAKEXITS EQU   HISTORY+00000025    1 BYTE(S)
JOBX     EQU   HISTORY+00000025    1 BIT(S)
EXECX    EQU   HISTORY+00000025    1 BIT(S)
DDX      EQU   HISTORY+00000025    1 BIT(S)
CMDX     EQU   HISTORY+00000025    1 BIT(S)
NULLX    EQU   HISTORY+00000025    1 BIT(S)
JESX     EQU   HISTORY+00000025    1 BIT(S)
COMNTX   EQU   HISTORY+00000025    1 BIT(S)
A00004   EQU   HISTORY+00000025    1 BIT(S)
OPOFF    EQU   HISTORY+00000026    1  BYTE  POINTER
CODEFLD  EQU   HISTORY+00000027    1  BYTE  POINTER
HTCODE   EQU   HISTORY+00000027    1  BYTE  POINTER
A00005   EQU   HISTORY+00000028    FULLWORD POINTER
DLMONJCL EQU   HISTORY+00000032    2 BYTE(S)
HTDLM    EQU   HISTORY+00000032    2 BYTE(S)
HTSWITCH EQU   HISTORY+00000034    1 BYTE(S)
HTDLMSW  EQU   HISTORY+00000034    1 BIT(S)
A00006   EQU   HISTORY+00000034    7 BIT(S)
A00007   EQU   HISTORY+00000035    1 BYTE(S)
A00008   EQU   HISTORY+00000036    4  BYTE  POINTER
HTACCNTP EQU   HISTORY+00000040    FULLWORD POINTER
HTACCNTL EQU   HISTORY+00000044    2  BYTE  INTEGER
HTACNTC1 EQU   HISTORY+00000046    2  BYTE  INTEGER
HTACNTC2 EQU   HISTORY+00000048    2  BYTE  INTEGER
A00009   EQU   HISTORY+00000050    2  BYTE  INTEGER
HTACCNTI EQU   00000000            190 BYTE(S)
USERID   EQU   00000000            8 BYTE(S)
JOBNAME  EQU   00000000            8 BYTE(S)
STMTPT   EQU   00000000            FULLWORD POINTER
CARD     EQU   00000000            80 BYTE(S)
MSGPTR   EQU   00000000            FULLWORD POINTER
MSGTABLE EQU   00000000            64 BYTE(S) ON WORD
LISTPTR  EQU   MSGTABLE+00000000   FULLWORD POINTER
TMCTPTR  EQU   MSGTABLE+00000004   FULLWORD POINTER
MTCPPL   EQU   MSGTABLE+00000004   FULLWORD POINTER
ECBPTR   EQU   MSGTABLE+00000008   FULLWORD POINTER
A00010   EQU   MSGTABLE+00000012   FULLWORD POINTER
MTHIGH   EQU   MSGTABLE+00000012   1 BIT(S)
MSGCSECT EQU   MSGTABLE+00000016   FULLWORD POINTER
SW       EQU   MSGTABLE+00000020   1  BYTE  POINTER
MTNOIDSW EQU   MSGTABLE+00000020   1 BIT(S)
MTPUTLSW EQU   MSGTABLE+00000020   1 BIT(S)
MTWTOSW  EQU   MSGTABLE+00000020   1 BIT(S)
MTHEXSW  EQU   MSGTABLE+00000020   1 BIT(S)
MTKEY1SW EQU   MSGTABLE+00000020   1 BIT(S)
MTJOBISW EQU   MSGTABLE+00000020   1 BIT(S)
MTWTPSW  EQU   MSGTABLE+00000020   1 BIT(S)
MTNHEXSW EQU   MSGTABLE+00000020   1 BIT(S)
RETMSG   EQU   MSGTABLE+00000021   3  BYTE  POINTER ON WORD+1
SW2      EQU   MSGTABLE+00000024   1  BYTE  POINTER
MT2OLDSW EQU   MSGTABLE+00000024   1 BIT(S)
MTDOMSW  EQU   MSGTABLE+00000024   1 BIT(S)
MTNOXQSW EQU   MSGTABLE+00000024   1 BIT(S)
MTNPLMSW EQU   MSGTABLE+00000024   1 BIT(S)
MTPGMSW  EQU   MSGTABLE+00000024   1 BIT(S)
A00011   EQU   MSGTABLE+00000024   3 BIT(S)
A00012   EQU   MSGTABLE+00000025   3  BYTE  POINTER ON WORD+1
MTOLDPTR EQU   MSGTABLE+00000028   FULLWORD POINTER
A00013   EQU   MSGTABLE+00000032   FULLWORD POINTER
A00014   EQU   MSGTABLE+00000036   FULLWORD POINTER
MSGID    EQU   MSGTABLE+00000040   4 BYTE(S)
MTINSRTS EQU   MSGTABLE+00000044   16 BYTE(S) ON WORD
L1       EQU   MSGTABLE+00000044   1  BYTE  POINTER
HIGHL1   EQU   MSGTABLE+00000044   1 BIT(S)
VAR1     EQU   MSGTABLE+00000045   3  BYTE  POINTER ON WORD+1
L2       EQU   MSGTABLE+00000048   1  BYTE  POINTER
HIGHL2   EQU   MSGTABLE+00000048   1 BIT(S)
VAR2     EQU   MSGTABLE+00000049   3  BYTE  POINTER ON WORD+1
L3       EQU   MSGTABLE+00000052   1  BYTE  POINTER
HIGHL3   EQU   MSGTABLE+00000052   1 BIT(S)
VAR3     EQU   MSGTABLE+00000053   3  BYTE  POINTER ON WORD+1
L4       EQU   MSGTABLE+00000056   1  BYTE  POINTER
HIGHL4   EQU   MSGTABLE+00000056   1 BIT(S)
VAR4     EQU   MSGTABLE+00000057   3  BYTE  POINTER ON WORD+1
MSGRTN   EQU   MSGTABLE+00000060   FULLWORD POINTER
RET      EQU   00000000            1001 BYTE(S) ON WORD
RETSIZE  EQU   RET+00000000        HALFWORD INTEGER
RETCHAR  EQU   RET+00000002        999 BYTE(S)
MSGTMCT  EQU   00000000            FULLWORD INTEGER
MSGECB   EQU   00000000            FULLWORD INTEGER
MSGSW    EQU   00000020            1 BYTE(S)
R1       EQU   00000001            FULLWORD POINTER REGISTER
R15      EQU   00000015            FULLWORD INTEGER REGISTER
R0       EQU   00000000            FULLWORD INTEGER REGISTER
PATCH    EQU   @DATA+00000000      51 BYTE(S) ON WORD
PTCHINIT EQU   *                   17*3 BYTE(S)
         DC    00017C'ZAP'
         ORG   @DATA
         DS    00000051C
@L       EQU   1
@DATD    DSECT
@SAV001  EQU   @DATD+00000000      72 BYTE(S) ON WORD
CARD2    EQU   @DATD+00000072      80 BYTE(S)
SAVEJCL  EQU   @DATD+00000152      4 BYTE(S)
MSGADDR  EQU   @DATD+00000156      FULLWORD POINTER
CT       EQU   @DATD+00000160      FULLWORD INTEGER
HOLD     EQU   @DATD+00000164      FULLWORD INTEGER
I        EQU   @DATD+00000168      FULLWORD INTEGER
K        EQU   @DATD+00000172      FULLWORD INTEGER
ADDCHAR  EQU   @DATD+00000176      1 BYTE(S)
         DS    00000177C
@TEMPS   DS    0F
@TEMP4   DC    F'0'
@PL001   DS    05F
@DATEND  EQU   *
IKJEFF13 CSECT ,
@9EE     EQU   AGAIN
         END
