TD60     TITLE 'IGTD60 --- DISPLAY COMMAND PROCESSING                  *
                        '
IGTD60   CSECT ,                                                01S0001
@MAINENT DS    0H                                               01S0001
         USING *,@15                                            01S0001
         B     @PROLOG                                          01S0001
         DC    AL1(16)                                          01S0001
         DC    C'IGTD60    77.174'                              01S0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                  01S0001
         BALR  @07,0                                            01S0001
@PSTART  LA    @08,4095(,@07)                                   01S0001
         LA    @05,4095(,@08)                                   01S0001
         USING @PSTART,@07                                      01S0001
         USING @PSTART+4095,@08                                 01S0001
         USING @PSTART+8190,@05                                 01S0001
         L     @00,@SIZDATD                                     01S0001
         IGTYGSV  R,LV=(0)
         LR    @06,@01                                          01S0001
         USING @DATD,@06                                        01S0001
         ST    @13,@SA00001+4                                   01S0001
         LM    @00,@01,20(@13)                                  01S0001
         ST    @06,8(,@13)                                      01S0001
         LR    @13,@06                                          01S0001
*  DO;                                                          01S0132
*  APES(1:APESLN-LENGTH(APESSDWA)) = ''X; /* CLEAR OUT ALL OF APES   */
         XC    APES(136),APES                                   02S0133
*  APESID = APESIDC;                /* INDICATE STAE EXIT CASE       */
         MVC   APESID(4),@CC00967                               02S0134
*  APESADDR = ADDR(APES);           /* SET ADDR OF APES IN POSITION  */
         LA    @04,APES                                         02S0135
         ST    @04,APESADDR                                     02S0135
*  APESAPMV = ADDR(STAEMSGS);       /* LOCATE THE ARRAY OF MESSAGES  */
         LA    @04,STAEMSGS                                     02S0136
         ST    @04,APESAPMV                                     02S0136
*  APESFLG0 = '60'X;                /* SET BITS                      */
         MVI   APESFLG0,X'60'                                   02S0137
*  APESCODE = CERRN99;              /* MESSAGE CODE                  */
         MVI   APESCODE,X'01'                                   02S0138
*  APESMXCD = CERRN99;              /* MSG ARRAY ENTRY TO BE USED    */
         MVI   APESMXCD,X'01'                                   02S0139
*  APESREGP = ADDR(APESREGZ);       /* SET IT UP                     */
         LA    @04,APESREGZ                                     02S0140
         ST    @04,APESREGP                                     02S0140
*  APESMOD = 'IGTD60  ';            /* ROUTINE TO BE SERVICED        */
         MVC   APESMOD(8),@CC02604                              02S0141
*  APESPROC = 'IGTD60  ';           /* PROCEDURE NAME OF SAME        */
         MVC   APESPROC(8),@CC02604                             02S0142
*  RFY (R14P,R15P) RSTD;            /* SECURE PARAMETER REGISTERS    */
*  R14P = ADDR(RETURN41);           /* POINT TO ADDR OF NORMAL RTRN  */
         LA    R14P,RETURN41                                    02S0144
*  R15P = ADDR(STAERTRY);           /* POINT TO ADDR OF ENTRYPOINT   */
         LA    R15P,STAERTRY                                    02S0145
*  STM(R0P,R15P,APESREGZ);          /* SAVE EVERY ONE OF THEM        */
         STM   R0P,R15P,APESREGZ                                02S0146
*  RFY (R14P,R15P) UNRSTD;          /* GIVE BACK THE ALTERED REGS    */
*  RFY (R3P,R4P) RSTD;              /* SECURE REGS FOR STAE MACRO    */
*  R3P = APCTZUKA;                  /* EXIT ROUTINE IS IGTUKA        */
         L     R3P,APCTZUKA(,APCTPTR)                           02S0149
*  R4P = ADDR(APESADDR);            /* PASS ON ADDR OF APES          */
         LA    R4P,APESADDR                                     02S0150
*  GENERATE  CODE                   /* ESTABLISH ERROR RECOVERY MODE */
*      REFS(D60STAEE,D60STAES,R3P,R4P)                          02S0151
*      SETS(D60STAEA)                                           02S0151
*      FLOWS(RETURN41);             /*                          02S0151
     MVC    D60STAEA(D60STAEE),D60STAES
     IGTYSTAE   (3),CT,PARAM=(4),PURGE=NONE,MF=(E,D60STAEA)
*  RFY (R3P,R4P) UNRSTD;            /* GIVE BACK THE TWO TURKEYS     */
*        /* SET CONTROL BLOCK POINTERS AND INITIALIZE VARIABLES      */
*  AIDERROR = FALSE;                /* NO ERROR YET ON AREA ID       */
         NI    AIDERROR,B'01111111'                             02S0153
*  AIDGIVEN = FALSE;                /* AREA ID NOT YET INPUT         */
         NI    AIDGIVEN,B'01111111'                             02S0154
*  CIDERROR = FALSE;                /* NO ERROR YET ON CONSOLE ID    */
         NI    CIDERROR,B'01111111'                             02S0155
*  CIDGIVEN = FALSE;                /* CONSOLE ID NOT YET INPUT      */
         NI    CIDGIVEN,B'01111111'                             02S0156
*  CMDERROR = FALSE;                /* NO ERROR YET ON DISPLAY CMND  */
         NI    CMDERROR,B'01111111'                             02S0157
*  DISPACTV = FALSE;                /* NO REQUEST FOR DISPLAY ACTIVE */
         NI    DISPACTV,B'01111111'                             02S0158
*  DISPUNIT = FALSE;                /* NO REQUEST FOR DISPLAY UNITS  */
         NI    DISPUNIT,B'01111111'                             02S0159
*  DSPBEGUN = FALSE;                /* NO WTO'S YET INITIATED        */
         NI    DSPBEGUN,B'01111111'                             02S0160
*  DSPENDED = FALSE;                /* THEREFORE, NO FINISH TO THEM  */
         NI    DSPENDED,B'01111111'                             02S0161
*  DVACOUNT = ZERO;                 /* NO UNIT ADDR RANGES INPUT     */
         SLR   @04,@04                                          02S0162
         STH   @04,DVACOUNT                                     02S0162
*  DVAERROR = FALSE;                /* NO ERROR ON AN INPUT DEV ADDR */
         NI    DVAERROR,B'01111111'                             02S0163
*  ENQDAPUB = FALSE;                /* NOT ENQUEUED ON APUB CHAIN    */
         NI    ENQDAPUB,B'01111111'                             02S0164
*  OFFSET#1 = 14;                   /* FIRST OFFSET FOR IGT27X MSGS  */
         MVC   OFFSET#1(4),@CF00311                             02S0165
*  STOPDSPL = FALSE;                /* NO WTO ERROR TO END DISPLAY   */
         NI    STOPDSPL,B'01111111'                             02S0166
*  ITLOADED = FALSE;                /* IEE7603D NOT YET LOADED       */
         NI    ITLOADED,B'01111111'                             02S0167
*  DO INDEX =1 TO LENGTH(XSAMAP) BY 1; /* INITIALIZE XSA STRUCTURE   */
         LA    INDEX,1                                          02S0168
@DL00168 DS    0H                                               02S0169
*    INITXSA(INDEX:INDEX) = '00'X;  /* MAKE ALL CHAR'S HEX 0         */
         LA    @04,INITXSA-1(INDEX)                             02S0169
         MVI   0(@04),X'00'                                     02S0169
*  END;                                                         02S0170
         AL    INDEX,@CF00296                                   02S0170
         C     INDEX,@CF01053                                   02S0170
         BNH   @DL00168                                         02S0170
*  XSAPTR = ADDR(INITXSA);          /* LOCATEE XSA AT INITXSA        */
         LA    @04,INITXSA                                      02S0171
         ST    @04,XSAPTR                                       02S0171
*  CVD(APCQSCID,HALFWORD);          /* CONVERT FROM BINARY TO PACKDEC*/
         SLR   @02,@02                                          02S0172
         IC    @02,APCQSCID(,APCQPTR)                           02S0172
         CVD   @02,@TS00001                                     02S0172
         MVC   HALFWORD(2),@TS00001+6                           02S0172
*  HALFWORD = HALFWORD × '000F'X;   /* ENSURE PROPER SIGN IN ZONE    */
         OC    HALFWORD(2),@CB02615                             02S0173
*  UNPK(CIDCHAR,HALFWORD);          /* UNPACK INTO PRINTABLE FROM    */
         UNPK  CIDCHAR(2),HALFWORD(2)                           02S0174
*  XASCID = APCQSCID;               /* PROVIDE DEFAULT FOR CONSOLE ID*/
         AL    @04,@CF00124                                     02S0175
         STC   @02,XASCID(,@04)                                 02S0175
*  XASDID = APCTDAID;               /* PROVIDE DEFAULT FOR AREA ID   */
         MVC   XASDID(1,@04),APCTDAID(APCTPTR)                  02S0176
*        /* EXAMINE INPUT COMMAND FOR SYNTAX OR PARAMETER ERROR      */
*  PLENLEFT = APCQPLEN;             /* COUNT DOWN ON LENGTH OF PARMS */
         LH    @04,APCQPLEN(,APCQPTR)                           02S0177
         STH   @04,PLENLEFT                                     02S0177
*  CMNDPSTR = APCQPSTR;             /* SET INDEX TO CHECK NEXT PARM  */
         LH    CMNDPSTR,APCQPSTR(,APCQPTR)                      02S0178
*  IF APCQCMND(CMNDPSTR:CMNDPSTR+5)='ACTIVE' THEN /* IF DISP AACTIVE */
         LR    @04,APCQPTR                                      02S0179
         ALR   @04,CMNDPSTR                                     02S0179
         CLC   APCQCMND-1(6,@04),@CC02589                       02S0179
         BNE   @RF00179                                         02S0179
*    DO;                                                        02S0180
*      DISPACTV = TRUE;             /* SET INDICATOR                 */
         OI    DISPACTV,B'10000000'                             02S0181
*      PARMLEN = 6;                 /* RECORD LENGTH                 */
         MVC   PARMLEN(2),@CH00292                              02S0182
*    END;                                                       02S0183
*  ELSE                                                         02S0184
*    IF APCQCMND(CMNDPSTR:CMNDPSTR)='A' THEN /* IF DISPLAY A         */
         B     @RC00179                                         02S0184
@RF00179 LR    @04,APCQPTR                                      02S0184
         ALR   @04,CMNDPSTR                                     02S0184
         CLI   APCQCMND-1(@04),C'A'                             02S0184
         BNE   @RF00184                                         02S0184
*      DO;                                                      02S0185
*        DISPACTV = TRUE;           /* SET INDICATOR                 */
         OI    DISPACTV,B'10000000'                             02S0186
*        PARMLEN = 1;               /* RECORD LENGTH                 */
         MVC   PARMLEN(2),@CH00296                              02S0187
*      END;                                                     02S0188
*    ELSE                                                       02S0189
*      IF APCQCMND(CMNDPSTR:CMNDPSTR+4)='UNITS' THEN /* IF D UNITS   */
         B     @RC00184                                         02S0189
@RF00184 LR    @04,APCQPTR                                      02S0189
         ALR   @04,CMNDPSTR                                     02S0189
         CLC   APCQCMND-1(5,@04),@CC02618                       02S0189
         BNE   @RF00189                                         02S0189
*        DO;                                                    02S0190
*          DISPUNIT = TRUE;         /* SET INDICATOR                 */
         OI    DISPUNIT,B'10000000'                             02S0191
*          PARMLEN = 5;             /* RECORD LENGTH                 */
         MVC   PARMLEN(2),@CH00303                              02S0192
*        END;                                                   02S0193
*      ELSE                                                     02S0194
*        IF APCQCMND(CMNDPSTR:CMNDPSTR)='U' THEN /* IF DISPLAY U     */
         B     @RC00189                                         02S0194
@RF00189 LR    @04,APCQPTR                                      02S0194
         ALR   @04,CMNDPSTR                                     02S0194
         CLI   APCQCMND-1(@04),C'U'                             02S0194
         BNE   @RF00194                                         02S0194
*          DO;                                                  02S0195
*            DISPUNIT = TRUE;       /* SET INDICATOR                 */
         OI    DISPUNIT,B'10000000'                             02S0196
*            PARMLEN = 1;           /* RECORD LENGTH                 */
         MVC   PARMLEN(2),@CH00296                              02S0197
*          END;                                                 02S0198
*        ELSE                                                   02S0199
*          DO;                                                  02S0199
         B     @RC00194                                         02S0199
@RF00194 DS    0H                                               02S0200
*            CMDERROR = TRUE;       /* SIGNAL ERROR IN COMMAND       */
         OI    CMDERROR,B'10000000'                             02S0200
*          END;                                                 02S0201
*  IF CMDERROR=FALSE THEN           /* IF STILL IN BUSINESS          */
@RC00194 DS    0H                                               02S0202
@RC00189 DS    0H                                               02S0202
@RC00184 DS    0H                                               02S0202
@RC00179 TM    CMDERROR,B'10000000'                             02S0202
         BNZ   @RF00202                                         02S0202
*    DO;                                                        02S0203
*      PLENLEFT = PLENLEFT - PARMLEN; /* DECREMENT LENGTH LEFT TO GO */
         LH    @04,PARMLEN                                      02S0204
         LH    @02,PLENLEFT                                     02S0204
         SLR   @02,@04                                          02S0204
         STH   @02,PLENLEFT                                     02S0204
*      CMNDPSTR = CMNDPSTR + PARMLEN; /* INCREMENT COMMAND PRM INDEX */
         ALR   CMNDPSTR,@04                                     02S0205
*      PARMLEN = ZERO;              /* CLEAR PARMLEN AFTER + AND -   */
         SLR   @04,@04                                          02S0206
         STH   @04,PARMLEN                                      02S0206
*                /* SCAN TO END OF PARAMETER LIST OR UNTIL ERROR     */
*      DO WHILE(PLENLEFT>ZERO & CMDERROR=FALSE); /* CONTINUE SCAN    */
         B     @DE00207                                         02S0207
@DL00207 DS    0H                                               02S0208
*        IF APCQCMND(CMNDPSTR:CMNDPSTR+2)=',L=' & PLENLEFT>3 THEN /* */
         LR    @04,APCQPTR                                      02S0208
         ALR   @04,CMNDPSTR                                     02S0208
         CLC   APCQCMND-1(3,@04),@CC02620                       02S0208
         BNE   @RF00208                                         02S0208
         LA    @04,3                                            02S0208
         CH    @04,PLENLEFT                                     02S0208
         BNL   @RF00208                                         02S0208
*          DO;                                                  02S0209
*  PARMLEN = 3;                     /* COUNT FOR ,L= KEYWORD         */
         LA    @02,3                                            03S0210
         STH   @02,PARMLEN                                      03S0210
*  DLMCOUNT = 2;                    /* SCAN ONLY FOR , OR BLANK      */
         MVI   DLMCOUNT,X'02'                                   03S0211
*  CALL DELMSCAN;                   /* SCAN TO NEXT DELIMITER        */
         BAL   @14,DELMSCAN                                     03S0212
*  IF CHRCOUNT=2 × CHRCOUNT=3 THEN  /* CONSOLE ID MUST BE INCLUDED   */
         C     CHRCOUNT,@CF00298                                03S0213
         BE    @RT00213                                         03S0213
         C     CHRCOUNT,@CF00047                                03S0213
         BNE   @RF00213                                         03S0213
@RT00213 DS    0H                                               03S0214
*    DO;                                                        03S0214
*      CIDGIVEN = TRUE;             /* INDICATE THAT CONSOLE ID GIVEN*/
         OI    CIDGIVEN,B'10000000'                             03S0215
*      CIDCHAR = APCQCMND(CMNDPSTR+PARMLEN:CMNDPSTR+PARMLEN+1); 03S0216
         LR    @02,CMNDPSTR                                     03S0216
         AH    @02,PARMLEN                                      03S0216
         ALR   @02,APCQPTR                                      03S0216
         MVC   CIDCHAR(2),APCQCMND-1(@02)                       03S0216
*      DO INDEX=0 TO 1 BY 1 WHILE(CMDERROR=FALSE);/* INSPECT DIGITS  */
         SLR   INDEX,INDEX                                      03S0217
@DL00217 TM    CMDERROR,B'10000000'                             03S0217
         BNZ   @DC00217                                         03S0217
*        IF APCQCMND(CMNDPSTR+PARMLEN+INDEX:CMNDPSTR+PARMLEN+INDEX)
*            <'0' × APCQCMND(CMNDPSTR+PARMLEN+INDEX:CMNDPSTR+PARMLEN
*            +INDEX)>'9' THEN       /* IF ID DIGITS NOT VALID DECIMAL*/
         LR    @15,CMNDPSTR                                     03S0218
         AH    @15,PARMLEN                                      03S0218
         ALR   @15,INDEX                                        03S0218
         ST    @15,@TF00001                                     03S0218
         ALR   @15,APCQPTR                                      03S0218
         CLI   APCQCMND-1(@15),C'0'                             03S0218
         BL    @RT00218                                         03S0218
         LR    @01,APCQPTR                                      03S0218
         AL    @01,@TF00001                                     03S0218
         CLI   APCQCMND-1(@01),C'9'                             03S0218
         BNH   @RF00218                                         03S0218
@RT00218 DS    0H                                               03S0219
*          DO;                                                  03S0219
*            CIDERROR = TRUE;       /* CONSOLE ID IS INVALID         */
         OI    CIDERROR,B'10000000'                             03S0220
*            CMDERROR = TRUE;       /* THEREFORE COMMAND IS INVALID  */
         OI    CMDERROR,B'10000000'                             03S0221
*          END;                                                 03S0222
*        ELSE;                                                  03S0223
@RF00218 DS    0H                                               03S0224
*      END;                                                     03S0224
         AL    INDEX,@CF00296                                   03S0224
         C     INDEX,@CF00296                                   03S0224
         BNH   @DL00217                                         03S0224
@DC00217 DS    0H                                               03S0225
*      IF CMDERROR=FALSE THEN       /* IF STILL IN BUSINESS          */
         TM    CMDERROR,B'10000000'                             03S0225
         BNZ   @RF00225                                         03S0225
*        DO;                        /* CONVERT & STORE TARGET CID    */
*          PACK(HALFWORD,CIDCHAR);  /* CONVERT TO PACKED DECIMAL     */
         PACK  HALFWORD(2),CIDCHAR(2)                           03S0227
*          HALFWORD = HALFWORD × '000F'X; /* ENSURE POSITIVE SIGN    */
         OC    HALFWORD(2),@CB02615                             03S0228
*          RFY R2F RSTD;            /* SECURE REG 2 FOR CONVERSION   */
*          CVB(R2F,HALFWORD);       /* CONVERT PACKED DECIMAL TO BIN */
         XC    @TS00001(8),@TS00001                             03S0230
         MVC   @TS00001+6(2),HALFWORD                           03S0230
         CVB   R2F,@TS00001                                     03S0230
*          XASCID = R2F;            /* SAVE CONVERTED CID FOR CALL   */
         L     @01,XSAPTR                                       03S0231
         STC   R2F,XASCID+32(,@01)                              03S0231
*          RFY R2F UNRSTD;          /* UNRESTRICT REG 2              */
*        END;                                                   03S0233
*      ELSE;                        /* OTHERWISE NO NEED TO BOTHER   */
@RF00225 DS    0H                                               03S0235
*    END;                                                       03S0235
*  ELSE;                                                        03S0236
@RF00213 DS    0H                                               03S0237
*  IF CHRCOUNT=1 × CHRCOUNT=3 THEN  /* AREA ID MUST BE INCLUDED      */
         C     CHRCOUNT,@CF00296                                03S0237
         BE    @RT00237                                         03S0237
         C     CHRCOUNT,@CF00047                                03S0237
         BNE   @RF00237                                         03S0237
@RT00237 DS    0H                                               03S0238
*    DO;                                                        03S0238
*      AIDGIVEN = TRUE;             /* INDICATE THAT AREA ID GIVEN   */
         OI    AIDGIVEN,B'10000000'                             03S0239
*      XASDID = APCQCMND(CMNDPSTR+PARMLEN+CHRCOUNT-1:CMNDPSTR+PARMLEN
*          +CHRCOUNT-1);            /* SAVE AID FOR FUTURE CALL      */
         LA    @02,32                                           03S0240
         AL    @02,XSAPTR                                       03S0240
         LR    @15,CMNDPSTR                                     03S0240
         AH    @15,PARMLEN                                      03S0240
         ALR   @15,CHRCOUNT                                     03S0240
         ALR   @15,APCQPTR                                      03S0240
         MVC   XASDID(1,@02),APCQCMND-2(@15)                    03S0240
*      IF (XASDID>='A' & XASDID<='I' ×  /* IF AREA ID IS A VALID     */
*          XASDID>='J' & XASDID<='R' ×  /* ALPHA CHAR., THEN FINE    */
*          XASDID>='S' & XASDID<='Z' ) THEN; /* INPUT AREA ID IS O.K.*/
         CLI   XASDID(@02),C'A'                                 03S0241
         BL    @GL00006                                         03S0241
         CLI   XASDID(@02),C'I'                                 03S0241
         BNH   @RT00241                                         03S0241
@GL00006 LA    @02,32                                           03S0241
         AL    @02,XSAPTR                                       03S0241
         CLI   XASDID(@02),C'J'                                 03S0241
         BL    @GL00005                                         03S0241
         CLI   XASDID(@02),C'R'                                 03S0241
         BNH   @RT00241                                         03S0241
@GL00005 LA    @02,32                                           03S0241
         AL    @02,XSAPTR                                       03S0241
         CLI   XASDID(@02),C'S'                                 03S0241
         BL    @RF00241                                         03S0241
         CLI   XASDID(@02),C'Z'                                 03S0241
         BNH   @RT00241                                         03S0241
*      ELSE                                                     03S0243
*        DO;                                                    03S0243
@RF00241 DS    0H                                               03S0244
*          AIDERROR = TRUE;         /* AREA ID IS INVALID VALUE      */
         OI    AIDERROR,B'10000000'                             03S0244
*          CMDERROR = TRUE;         /* THEREFORE COMMAND IS INVALID  */
         OI    CMDERROR,B'10000000'                             03S0245
*        END;                                                   03S0246
*    END;                                                       03S0247
*  ELSE;                                                        03S0248
@RF00237 DS    0H                                               03S0249
*  IF CHRCOUNT<1 × CHRCOUNT>3 THEN  /* INVALID L= FIELD              */
@RC00237 LTR   CHRCOUNT,CHRCOUNT                                03S0249
         BNP   @RT00249                                         03S0249
         C     CHRCOUNT,@CF00047                                03S0249
         BNH   @RF00249                                         03S0249
@RT00249 DS    0H                                               03S0250
*    DO;                                                        03S0250
*      CMDERROR = TRUE;             /* INDICATE INVALID COMMAND      */
         OI    CMDERROR,B'10000000'                             03S0251
*    END;                                                       03S0252
*  ELSE                                                         03S0253
*    PARMLEN = PARMLEN + CHRCOUNT;  /* INCREMENT FOR INPUT ID(S)     */
         B     @RC00249                                         03S0253
@RF00249 LR    @02,CHRCOUNT                                     03S0253
         AH    @02,PARMLEN                                      03S0253
         STH   @02,PARMLEN                                      03S0253
*          END;                                                 02S0254
*        ELSE                                                   02S0255
*          IF APCQCMND(CMNDPSTR:CMNDPSTR+7)=',DEVICE=' & PLENLEFT>10
*              THEN                 /* 3 DIGIT ADDRESS REQUIRED TOO  */
         B     @RC00208                                         02S0255
@RF00208 LR    @04,APCQPTR                                      02S0255
         ALR   @04,CMNDPSTR                                     02S0255
         CLC   APCQCMND-1(8,@04),@CC02632                       02S0255
         BNE   @RF00255                                         02S0255
         LH    @04,PLENLEFT                                     02S0255
         C     @04,@CF00099                                     02S0255
         BNH   @RF00255                                         02S0255
*            DO;                                                02S0256
*  PARMLEN = 8;                     /* COUNT FOR ,DEVICE= KEYWORD    */
         MVC   PARMLEN(2),@CH00307                              03S0257
*  DLMCOUNT = 3;                    /* SCAN FOR , OR BLANK OR -      */
         MVI   DLMCOUNT,X'03'                                   03S0258
*  DVSCANNG = TRUE;                 /* CONTROL FOR LOOP ON ADDR SCAN */
         OI    DVSCANNG,B'10000000'                             03S0259
*  DO WHILE (DVSCANNG=TRUE & PLENLEFT-PARMLEN>0); /*SCAN FOR DEV ADDR*/
         B     @DE00260                                         03S0260
@DL00260 DS    0H                                               03S0261
*    CALL DELMSCAN;                 /* SCAN FOR NEXT DELIMITER       */
         BAL   @14,DELMSCAN                                     03S0261
*    IF PARMLEN=8 & CHRCOUNT^=3 THEN    /*           IF ,DEVICE= NOT */
         CLC   PARMLEN(2),@CH00307                              03S0262
         BNE   @RF00262                                         03S0262
         C     CHRCOUNT,@CF00047                                03S0262
         BE    @RF00262                                         03S0262
*      DO;                          /* FOLLOWED BY AT LEAST ONE ADDR */
*        CMDERROR = TRUE;           /* OR ADDR RANGE, THEN AN ERROR  */
         OI    CMDERROR,B'10000000'                             03S0264
*        DVAERROR = TRUE;           /* INDICATE INVALID DEVICE ADDR  */
         OI    DVAERROR,B'10000000'                             03S0265
*        DVSCANNG = FALSE;          /* SHUT DOWN THE ADDR SCAN LOOP  */
         NI    DVSCANNG,B'01111111'                             03S0266
*      END;                                                     03S0267
*    ELSE                                                       03S0268
*      IF CHRCOUNT=3 THEN           /* 3 CHAR FIELD MUST BE AN ADDR  */
         B     @RC00262                                         03S0268
@RF00262 C     CHRCOUNT,@CF00047                                03S0268
         BNE   @RF00268                                         03S0268
*        DO;                                                    03S0269
*          CALL HEXCHECK;           /* VERIFY HEX DIGITS IN ADDR     */
         BAL   @14,HEXCHECK                                     03S0270
*          IF CMDERROR=FALSE THEN   /* IF NO DIGITS WERE NON-HEXADEC */
         TM    CMDERROR,B'10000000'                             03S0271
         BNZ   @RF00271                                         03S0271
*            DO;                                                03S0272
*              DVACOUNT = DVACOUNT + 1; /* INCR COUNT OF ADDR PARMS  */
         LA    @04,1                                            03S0273
         AH    @04,DVACOUNT                                     03S0273
         STH   @04,DVACOUNT                                     03S0273
*              LOWADDR(DVACOUNT) = APCQCMND(CMNDPSTR+PARMLEN:   03S0274
*                  CMNDPSTR+PARMLEN+2); /* SECURE FIRST ADDR         */
         LA    @02,3                                            03S0274
         LR    @01,@04                                          03S0274
         MR    @00,@02                                          03S0274
         LA    @04,LOWADDR-3(@01)                               03S0274
         LH    @15,PARMLEN                                      03S0274
         LR    @14,CMNDPSTR                                     03S0274
         ALR   @14,@15                                          03S0274
         ALR   @14,APCQPTR                                      03S0274
         MVC   0(3,@04),APCQCMND-1(@14)                         03S0274
*              IF DELIMITR(DLMINDEX)=',' THEN  /* IF NOT A RANGE     */
         SLR   @04,@04                                          03S0275
         IC    @04,DLMINDEX                                     03S0275
         LA    @14,DELIMITR-1(@04)                              03S0275
         CLI   0(@14),C','                                      03S0275
         BNE   @RF00275                                         03S0275
*                DO;                                            03S0276
*                  HIGHADDR(DVACOUNT) = LOWADDR(DVACOUNT); /*ONE ADDR*/
         LA    @04,HIGHADDR-3(@01)                              03S0277
         LA    @14,LOWADDR-3(@01)                               03S0277
         MVC   0(3,@04),0(@14)                                  03S0277
*                  PARMLEN = PARMLEN + 3; /* ADV FOR 3 MORE GOOD CHRS*/
         ALR   @15,@02                                          03S0278
         STH   @15,PARMLEN                                      03S0278
*                  IF APCQCMND(CMNDPSTR+PARMLEN+1:CMNDPSTR+PARMLEN+1)
*                      ='L' × APCQCMND(CMNDPSTR+PARMLEN+1:CMNDPSTR+
*                      PARMLEN+3)='DEV' THEN /*IF A KEYWORD COMING UP*/
         ALR   @15,CMNDPSTR                                     03S0279
         ST    @15,@TF00001                                     03S0279
         ALR   @15,APCQPTR                                      03S0279
         CLI   APCQCMND(@15),C'L'                               03S0279
         BE    @RT00279                                         03S0279
         LR    @04,APCQPTR                                      03S0279
         AL    @04,@TF00001                                     03S0279
         CLC   APCQCMND(3,@04),@CC02635                         03S0279
         BNE   @RF00279                                         03S0279
@RT00279 DS    0H                                               03S0280
*                    DVSCANNG = FALSE; /* END OF THE ADDRESS SCANNING*/
         NI    DVSCANNG,B'01111111'                             03S0280
*                  ELSE             /* ASSUME ANOTHER ADDRESS COMING */
*                    PARMLEN = PARMLEN + 1; /* OTHERWISE SKIP COMMA  */
         B     @RC00279                                         03S0281
@RF00279 LH    @04,PARMLEN                                      03S0281
         LA    @04,1(,@04)                                      03S0281
         STH   @04,PARMLEN                                      03S0281
*                END;                                           03S0282
*              ELSE                                             03S0283
*               IF DELIMITR(DLMINDEX)='-' THEN /* IF AN ADDR RANGE   */
         B     @RC00275                                         03S0283
@RF00275 SLR   @04,@04                                          03S0283
         IC    @04,DLMINDEX                                     03S0283
         LA    @02,DELIMITR-1(@04)                              03S0283
         CLI   0(@02),C'-'                                      03S0283
         BNE   @RF00283                                         03S0283
*                DO;                                            03S0284
*                  PARMLEN = PARMLEN + 4; /* ADVANCE OVER FIRST ADDR */
         LH    @02,PARMLEN                                      03S0285
         LA    @02,4(,@02)                                      03S0285
         STH   @02,PARMLEN                                      03S0285
*                  DLMCOUNT = 2;    /* - NOT A VALID NEXT DELIMITER  */
         MVI   DLMCOUNT,X'02'                                   03S0286
*                  CALL DELMSCAN;   /* SCAN FOR NEXT VALID DELIMITER */
         BAL   @14,DELMSCAN                                     03S0287
*                  IF CHRCOUNT^=3 THEN /* NOT A CORRECT RANGE ADDR   */
         C     CHRCOUNT,@CF00047                                03S0288
         BE    @RF00288                                         03S0288
*                    DO;                                        03S0289
*                      CMDERROR = TRUE; /* SIGNAL COMMAND ERROR      */
         OI    CMDERROR,B'10000000'                             03S0290
*                      DVSCANNG = TRUE; /* SHUT DOWN ADDR SCAN LOOP  */
         OI    DVSCANNG,B'10000000'                             03S0291
*                      DVAERROR = TRUE; /* INDICATE DEV ADDR ERROR   */
         OI    DVAERROR,B'10000000'                             03S0292
*                    END;                                       03S0293
*                  ELSE             /* 3 DIGITS FOR SECOND ADDR      */
*                    DO;                                        03S0294
         B     @RC00288                                         03S0294
@RF00288 DS    0H                                               03S0295
*                      CALL HEXCHECK; /* VERIFY DIGITS IN 2ND ADDR   */
         BAL   @14,HEXCHECK                                     03S0295
*                      IF CMDERROR=FALSE THEN /* IF NO DIGIT NON-HEX */
         TM    CMDERROR,B'10000000'                             03S0296
         BNZ   @RF00296                                         03S0296
*                        DO;                                    03S0297
*                          TEMPADDR = APCQCMND(CMNDPSTR+PARMLEN:
*                              CMNDPSTR+PARMLEN+2);/*PICK UP 2ND ADDR*/
         LR    @04,CMNDPSTR                                     03S0298
         AH    @04,PARMLEN                                      03S0298
         ALR   @04,APCQPTR                                      03S0298
         MVC   TEMPADDR(3),APCQCMND-1(@04)                      03S0298
*                          IF TEMPADDR<LOWADDR(DVACOUNT) THEN   03S0299
         LH    @04,DVACOUNT                                     03S0299
         MH    @04,@CH00047                                     03S0299
         LA    @02,LOWADDR-3(@04)                               03S0299
         CLC   TEMPADDR(3),0(@02)                               03S0299
         BNL   @RF00299                                         03S0299
*                            DO;    /* IF 2ND LESS THAN 1ST, SWITCH  */
*                              HIGHADDR(DVACOUNT) = LOWADDR(DVACOUNT);
         LA    @02,HIGHADDR-3(@04)                              03S0301
         LA    @01,LOWADDR-3(@04)                               03S0301
         MVC   0(3,@02),0(@01)                                  03S0301
*                              LOWADDR(DVACOUNT) = TEMPADDR;    03S0302
         LA    @02,LOWADDR-3(@04)                               03S0302
         MVC   0(3,@02),TEMPADDR                                03S0302
*                            END;                               03S0303
*                          ELSE                                 03S0304
*                            DO;                                03S0304
         B     @RC00299                                         03S0304
@RF00299 DS    0H                                               03S0305
*                              HIGHADDR(DVACOUNT) = TEMPADDR;   03S0305
         LH    @04,DVACOUNT                                     03S0305
         MH    @04,@CH00047                                     03S0305
         LA    @02,HIGHADDR-3(@04)                              03S0305
         MVC   0(3,@02),TEMPADDR                                03S0305
*                            END;                               03S0306
*                          PARMLEN = PARMLEN + 3; /*INCR FOR 2ND ADDR*/
@RC00299 LA    @04,3                                            03S0307
         AH    @04,PARMLEN                                      03S0307
         STH   @04,PARMLEN                                      03S0307
*                          IF APCQCMND(CMNDPSTR+PARMLEN+1:CMNDPSTR+
*                              PARMLEN+1)='L' × APCQCMND(CMNDPSTR+
*                              PARMLEN+1:CMNDPSTR+PARMLEN+3)='DEV' THEN
         ALR   @04,CMNDPSTR                                     03S0308
         ST    @04,@TF00001                                     03S0308
         ALR   @04,APCQPTR                                      03S0308
         CLI   APCQCMND(@04),C'L'                               03S0308
         BE    @RT00308                                         03S0308
         LR    @04,APCQPTR                                      03S0308
         AL    @04,@TF00001                                     03S0308
         CLC   APCQCMND(3,@04),@CC02635                         03S0308
         BNE   @RF00308                                         03S0308
@RT00308 DS    0H                                               03S0309
*                            DVSCANNG = FALSE; /*END OF ADDR SCANNING*/
         NI    DVSCANNG,B'01111111'                             03S0309
*                          ELSE     /* ASSUME ANOTHER ADDRESS COMING */
*                            PARMLEN = PARMLEN + 1; /*ELSE SKIP COMMA*/
         B     @RC00308                                         03S0310
@RF00308 LH    @04,PARMLEN                                      03S0310
         LA    @04,1(,@04)                                      03S0310
         STH   @04,PARMLEN                                      03S0310
*                        END;                                   03S0311
*                      ELSE         /* ERROR FOUND ON 2ND DIGIT CHECK*/
*                        DO;                                    03S0312
         B     @RC00296                                         03S0312
@RF00296 DS    0H                                               03S0313
*                          DVSCANNG = FALSE;/* EXIT LOOP AFTER ERROR */
         NI    DVSCANNG,B'01111111'                             03S0313
*                          DVAERROR = TRUE; /*INDICATE DEV ADDR ERROR*/
         OI    DVAERROR,B'10000000'                             03S0314
*                        END;                                   03S0315
*                    END;           /* END OF 2ND ADDR DIGIT CHECK   */
*                END;               /* END OF 2ND ADDR PROCESSING    */
*               ELSE                /* MUST BE A BLANK - END OF COMND*/
*                 DO;                                           03S0318
         B     @RC00283                                         03S0318
@RF00283 DS    0H                                               03S0319
*                   PARMLEN = PARMLEN + 3; /* INCREMENT FOR ADDRESS  */
         LA    @04,3                                            03S0319
         LH    @02,PARMLEN                                      03S0319
         ALR   @02,@04                                          03S0319
         STH   @02,PARMLEN                                      03S0319
*                   HIGHADDR(DVACOUNT) = LOWADDR(DVACOUNT); /* RANGE */
         MH    @04,DVACOUNT                                     03S0320
         LA    @02,HIGHADDR-3(@04)                              03S0320
         LA    @01,LOWADDR-3(@04)                               03S0320
         MVC   0(3,@02),0(@01)                                  03S0320
*                 END;                                          03S0321
*            END;                   /* END OF 1ST ADDR DIGIT CHECK   */
*          ELSE                     /* ERROR FOUND ON 1ST DIGIT CHECK*/
*            DO;                                                03S0323
         B     @RC00271                                         03S0323
@RF00271 DS    0H                                               03S0324
*              DVSCANNG = FALSE;    /* EXIT LOOP AFTER ERROR         */
         NI    DVSCANNG,B'01111111'                             03S0324
*              DVAERROR = TRUE;     /* INDICATE DEV ADDR ERROR       */
         OI    DVAERROR,B'10000000'                             03S0325
*            END;                                               03S0326
*        END;                       /* END OF 1ST ADDR PROCESSING    */
*      ELSE                         /* CHRCOUNT^=3 AFTER 1ST ADDR    */
*        DO;                        /* POSSIBLY A VALID NEW KEYWORD  */
         B     @RC00268                                         03S0328
@RF00268 DS    0H                                               03S0329
*          DVSCANNG = FALSE;        /* SO, EXIT DVSCAN LOOP          */
         NI    DVSCANNG,B'01111111'                             03S0329
*        END;                                                   03S0330
*  END;                             /* END OF DVSCANNG DO WHILE      */
@RC00268 DS    0H                                               03S0331
@RC00262 DS    0H                                               03S0331
@DE00260 TM    DVSCANNG,B'10000000'                             03S0331
         BNO   @DC00260                                         03S0331
         LH    @04,PLENLEFT                                     03S0331
         SH    @04,PARMLEN                                      03S0331
         LTR   @04,@04                                          03S0331
         BP    @DL00260                                         03S0331
@DC00260 DS    0H                                               03S0332
*            END;                                               02S0332
*          ELSE                     /* OTHERWISE KEYWORD IS IN ERROR */
*            DO;                                                02S0333
         B     @RC00255                                         02S0333
@RF00255 DS    0H                                               02S0334
*              CMDERROR = TRUE;     /* SIGNAL PARAMETER ERROR        */
         OI    CMDERROR,B'10000000'                             02S0334
*            END;                                               02S0335
*        IF CMDERROR=FALSE THEN     /* IF PARAMETER SURVIVED SCAN    */
@RC00255 DS    0H                                               02S0336
@RC00208 TM    CMDERROR,B'10000000'                             02S0336
         BNZ   @RF00336                                         02S0336
*          DO;                                                  02S0337
*            PLENLEFT = PLENLEFT - PARMLEN; /* REDUCE CHARCOUNT TO GO*/
         LH    @04,PARMLEN                                      02S0338
         LH    @02,PLENLEFT                                     02S0338
         SLR   @02,@04                                          02S0338
         STH   @02,PLENLEFT                                     02S0338
*            CMNDPSTR = CMNDPSTR + PARMLEN; /* INCREMENT CMND INDEX  */
         ALR   CMNDPSTR,@04                                     02S0339
*            PARMLEN = ZERO;        /* RESET MEASURE OF FIELD LENGTH */
         SLR   @04,@04                                          02S0340
         STH   @04,PARMLEN                                      02S0340
*          END;                                                 02S0341
*        ELSE;                      /* NO NEED NOW TO PLAY WITH COUNT*/
@RF00336 DS    0H                                               02S0343
*      END;                         /* END DO WHILE (ETC.)           */
@DE00207 LH    @04,PLENLEFT                                     02S0343
         LTR   @04,@04                                          02S0343
         BNP   @DC00207                                         02S0343
         TM    CMDERROR,B'10000000'                             02S0343
         BZ    @DL00207                                         02S0343
@DC00207 DS    0H                                               02S0344
*    END;                                                       02S0344
*  ELSE;                            /* ERROR OCCURRED ON 1ST PARM    */
@RF00202 DS    0H                                               02S0346
*  IF CMDERROR=FALSE THEN           /* IF PARM SCANNING WAS SURVIVED */
         TM    CMDERROR,B'10000000'                             02S0346
         BNZ   @RF00346                                         02S0346
*    DO;                                                        02S0347
*  ITLOADED = FALSE;                /* INITIALIZE SUCCESS INDICATOR  */
         NI    ITLOADED,B'01111111'                             03S0348
*  GENERATE  CODE                                               03S0349
*      REFS(LOADFAIL)                                           03S0349
*      SETS(R0F,R1P)                                            03S0349
*      FLOWS(LOADFAIL);             /*                          03S0349
     LOAD  EP=IEE7603D,ERRET=LOADFAIL
*  RFY R0P RSTD;                    /* SECURE RETURN ADDRESS REG     */
*  ADDR7603 = R0P;                  /* SAVE ADDRESS OF IEE7603D      */
         ST    R0P,ADDR7603                                     03S0351
*  RFY R0P UNRSTD;                  /* NOW GIVE BACK THE RETURN REG  */
*  ITLOADED = TRUE;                 /* INDICATE SUCCESSFUL LOAD      */
         OI    ITLOADED,B'10000000'                             03S0353
*LOADFAIL: ;                        /* NO SETTING IF LOAD FAILED     */
LOADFAIL DS    0H                                               03S0355
*      IF ITLOADED=TRUE THEN        /* IF LOAD WAS SUCCESSFUL        */
         TM    ITLOADED,B'10000000'                             02S0355
         BNO   @RF00355                                         02S0355
*        DO;                                                    02S0356
*  GENERATE  CODE                                               04S0357
*      REFS(MODESETS)                                           04S0357
*      SETS(MODESETA);              /*                          04S0357
     MVC   MODESETA(MODESETE),MODESETS
     MODESET   MF=(E,MODESETA)
*  XAU = APCQSCID;                  /* SET SOURCE CONSOLE ID INTO XSA*/
         L     @04,XSAPTR                                       03S0358
         IC    @02,APCQSCID(,APCQPTR)                           03S0358
         STC   @02,XAU(,@04)                                    03S0358
*  XAN = '22'X;                     /* VERB FOR ID VERIFICATION CALL */
         MVI   XAN(@04),X'22'                                   03S0359
*  CALL IDVERIFY;                   /* EXAMINE THE CID-AID COMBINATN */
         BAL   @14,IDVERIFY                                     03S0360
*  GENERATE  CODE                                               04S0361
*      REFS(MODRSETS)                                           04S0361
*      SETS(MODRSETA);              /*                          04S0361
     MVC   MODRSETA(MODRSETE),MODRSETS
     MODESET   MF=(E,MODRSETA)
*          GENERATE  CODE;          /* NOW DELETE THE LOADED PROGRAM */
             DELETE  EP=IEE7603D
*        END;                                                   02S0363
*      ELSE;                                                    02S0364
@RF00355 DS    0H                                               02S0365
*    END;                                                       02S0365
*  ELSE;                            /* ERROR ALREADY DISCOVERED      */
@RF00346 DS    0H                                               02S0367
*        /* IF AN ERROR WAS FOUND, WTO AN APPROPRIATE MESSAGE        */
*    IF CMDERROR=TRUE THEN          /* IF AN ERROR DETECTED IN CMND  */
         TM    CMDERROR,B'10000000'                             01S0367
         BNO   @RF00367                                         01S0367
*      DO;                          /* IF COMMAND OR AN ID WAS ERROR */
*  IF CMDERROR=TRUE THEN                                        02S0369
         TM    CMDERROR,B'10000000'                             02S0369
         BNO   @RF00369                                         02S0369
*    DO;                                                        02S0370
*      ERSNCODE = '16';             /* SET IGT213I ERROR REASON CODE */
         MVC   ERSNCODE(2),@CC02642                             02S0371
*      OFFSET#2 = 41;               /* POINT TO CODE POSITION IN MSG */
         MVC   OFFSET#2(4),@CF00181                             02S0372
*      OFFSET#3 = 66;               /* POINT TO TEXT POSITION IN MSG */
         MVC   OFFSET#3(4),@CF00231                             02S0373
*      CALL APCVZDWT(IGT213I,OFFSET#1,APCTSSID,LENGTH(APCTSSID),
*          OFFSET#2,ERSNCODE,LENGTH(ERSNCODE),                  02S0374
*          OFFSET#3,APCQCMND,APCQTXLN);  /* PUT OUT THE ERROR MESSAGE*/
         LA    @04,@CF00213                                     02S0374
         ST    @04,@AL00001                                     02S0374
         LA    @04,OFFSET#1                                     02S0374
         ST    @04,@AL00001+4                                   02S0374
         LA    @04,APCTSSID(,APCTPTR)                           02S0374
         ST    @04,@AL00001+8                                   02S0374
         LA    @04,@CF00301                                     02S0374
         ST    @04,@AL00001+12                                  02S0374
         LA    @04,OFFSET#2                                     02S0374
         ST    @04,@AL00001+16                                  02S0374
         LA    @04,ERSNCODE                                     02S0374
         ST    @04,@AL00001+20                                  02S0374
         LA    @04,@CF00298                                     02S0374
         ST    @04,@AL00001+24                                  02S0374
         LA    @04,OFFSET#3                                     02S0374
         ST    @04,@AL00001+28                                  02S0374
         LA    @04,APCQCMND(,APCQPTR)                           02S0374
         ST    @04,@AL00001+32                                  02S0374
         LA    @04,APCQTXLN(,APCQPTR)                           02S0374
         ST    @04,@AL00001+36                                  02S0374
         MVI   @AL00001+36,X'80'                                02S0374
         L     @15,APCTZDWT(,APCTPTR)                           02S0374
         LA    @01,@AL00001                                     02S0374
         BALR  @14,@15                                          02S0374
*    END;                                                       02S0375
*  ELSE;                            /*ERROR OCCURRED IN AN INVALID ID*/
@RF00369 DS    0H                                               02S0377
*  IF CIDERROR=TRUE THEN            /* IF IT WAS A BAD CONSOLE ID    */
         TM    CIDERROR,B'10000000'                             02S0377
         BNO   @RF00377                                         02S0377
*    DO;                                                        02S0378
*      OFFSET#2 = 52;               /* POINT TO ID POSITION IN MSG   */
         MVC   OFFSET#2(4),@CF00205                             02S0379
*      CALL APCVZDWT(IGT272I,OFFSET#1,APCTSSID,LENGTH(APCTSSID),
*          OFFSET#2,CIDCHAR,LENGTH(CIDCHAR)); /* WTO IGT272I         */
         LA    @04,@CF01059                                     02S0380
         ST    @04,@AL00001                                     02S0380
         LA    @04,OFFSET#1                                     02S0380
         ST    @04,@AL00001+4                                   02S0380
         LA    @04,APCTSSID(,APCTPTR)                           02S0380
         ST    @04,@AL00001+8                                   02S0380
         LA    @04,@CF00301                                     02S0380
         ST    @04,@AL00001+12                                  02S0380
         LA    @04,OFFSET#2                                     02S0380
         ST    @04,@AL00001+16                                  02S0380
         LA    @04,CIDCHAR                                      02S0380
         ST    @04,@AL00001+20                                  02S0380
         LA    @04,@CF00298                                     02S0380
         ST    @04,@AL00001+24                                  02S0380
         MVI   @AL00001+24,X'80'                                02S0380
         L     @15,APCTZDWT(,APCTPTR)                           02S0380
         LA    @01,@AL00001                                     02S0380
         BALR  @14,@15                                          02S0380
*    END;                                                       02S0381
*  ELSE                             /* MUST BE AREA ID IN ERROR      */
*    IF AIDERROR=TRUE THEN          /* IF AN ERROR OCCURRED ON AREAID*/
         B     @RC00377                                         02S0382
@RF00377 TM    AIDERROR,B'10000000'                             02S0382
         BNO   @RF00382                                         02S0382
*      DO;                                                      02S0383
*        OFFSET#2 = 49;             /* POINT TO ID POSITION IN MSG   */
         MVC   OFFSET#2(4),@CF00199                             02S0384
*        CALL APCVZDWT(IGT273I,OFFSET#1,APCTSSID,LENGTH(APCTSSID),
*            OFFSET#2,XASDID,LENGTH(XASDID));     /* WTO IGT273I     */
         LA    @04,@CF01061                                     02S0385
         ST    @04,@AL00001                                     02S0385
         LA    @04,OFFSET#1                                     02S0385
         ST    @04,@AL00001+4                                   02S0385
         LA    @04,APCTSSID(,APCTPTR)                           02S0385
         ST    @04,@AL00001+8                                   02S0385
         LA    @04,@CF00301                                     02S0385
         ST    @04,@AL00001+12                                  02S0385
         LA    @04,OFFSET#2                                     02S0385
         ST    @04,@AL00001+16                                  02S0385
         L     @04,XSAPTR                                       02S0385
         LA    @04,XASDID+32(,@04)                              02S0385
         ST    @04,@AL00001+20                                  02S0385
         LA    @04,@CF00296                                     02S0385
         ST    @04,@AL00001+24                                  02S0385
         MVI   @AL00001+24,X'80'                                02S0385
         L     @15,APCTZDWT(,APCTPTR)                           02S0385
         LA    @01,@AL00001                                     02S0385
         BALR  @14,@15                                          02S0385
*      END;                                                     02S0386
*    ELSE                           /* IF NEITHER CID NOR AID ERROR  */
*      IF DVAERROR=TRUE THEN        /* THEN IF ERROR ON A DEVICE ADDR*/
         B     @RC00382                                         02S0387
@RF00382 TM    DVAERROR,B'10000000'                             02S0387
         BNO   @RF00387                                         02S0387
*        DO;                                                    02S0388
*          OFFSET#2 = 39;           /* POINT TO PARM FIELD IN MESSAGE*/
         MVC   OFFSET#2(4),@CF00088                             02S0389
*          CALL APCVZDWT(IGT275I,OFFSET#1,APCTSSID,LENGTH(APCTSSID),
*              OFFSET#2,APCQCMND(CMNDPSTR+PARMLEN:CMNDPSTR+PARMLEN+2),
*              3);                  /* NOTIFY OPERATOR OF BUM ADDR   */
         LA    @04,@CF01065                                     02S0390
         ST    @04,@AL00001                                     02S0390
         LA    @04,OFFSET#1                                     02S0390
         ST    @04,@AL00001+4                                   02S0390
         LA    @04,APCTSSID(,APCTPTR)                           02S0390
         ST    @04,@AL00001+8                                   02S0390
         LA    @04,@CF00301                                     02S0390
         ST    @04,@AL00001+12                                  02S0390
         LA    @04,OFFSET#2                                     02S0390
         ST    @04,@AL00001+16                                  02S0390
         LR    @04,CMNDPSTR                                     02S0390
         AH    @04,PARMLEN                                      02S0390
         LA    @04,APCQCMND-1(@04,APCQPTR)                      02S0390
         ST    @04,@AL00001+20                                  02S0390
         LA    @04,@CF00047                                     02S0390
         ST    @04,@AL00001+24                                  02S0390
         MVI   @AL00001+24,X'80'                                02S0390
         L     @15,APCTZDWT(,APCTPTR)                           02S0390
         LA    @01,@AL00001                                     02S0390
         BALR  @14,@15                                          02S0390
*        END;                                                   02S0391
*      ELSE;                        /* CANNOT HELP THE GUY ANY MORE  */
@RF00387 DS    0H                                               02S0393
*      END;                                                     01S0393
*    ELSE                                                       01S0394
*        /* IF NO ERROR APPEARED IN COMMAND, PROCEED WITH DISPLAY    */
*      DO;                                                      01S0394
         B     @RC00367                                         01S0394
@RF00367 DS    0H                                               01S0395
*        CALL APCVZDEQ;             /* ENQUEUE ON APUB CHAIN         */
         L     @15,APCTZDEQ(,APCTPTR)                           01S0395
         BALR  @14,@15                                          01S0395
*        ENQDAPUB = TRUE;           /* INDICATE THAT ENQUEUED ON APUB*/
         OI    ENQDAPUB,B'10000000'                             01S0396
*            /* IF DISPLAY ACTIVE WAS REQUESTED, DISPLAY JOBNAMES    */
*        IF DISPACTV=TRUE THEN                                  01S0397
         TM    DISPACTV,B'10000000'                             01S0397
         BNO   @RF00397                                         01S0397
*          DO;                                                  01S0398
*  GENERATE  CODE                                               02S0399
*      REFS(WTO2701A,WTO270S)                                   02S0399
*      SETS(WTO2701A);              /* PREPARE FOR THE 1ST WTO  02S0399
     MVC  WTO2701A(WTO270E),WTO270S    MOVE NAMES CONTROL & LABEL MSG
*  CALL WTOCNTRL;                   /* FILL IN FIELDS & MAKE 1ST CALL*/
         BAL   @14,WTOCNTRL                                     02S0400
*  IF STOPDSPL=FALSE THEN           /* IF DISPLAY CAN PROCEED        */
         TM    STOPDSPL,B'10000000'                             02S0401
         BNZ   @RF00401                                         02S0401
*    DO;                                                        02S0402
*  BLKCOUNT = ZERO;                 /* INIT COUNT OF <=3 BLKS/LINE   */
         SLR   BLKCOUNT,BLKCOUNT                                03S0403
*  LINCOUNT = ZERO;                 /* INIT COUNT OF <=10 LINES/DSPL */
         SLR   LINCOUNT,LINCOUNT                                03S0404
*  LINESOUT = ZERO;                 /* INIT SUM OF ALL LINCOUNTS     */
         SLR   @02,@02                                          03S0405
         STH   @02,LINESOUT                                     03S0405
*  IF APCTAPDS^=ZERO THEN           /* IF THERE IS AT LEAST ONE APDS */
         L     @15,APCTAPDS(,APCTPTR)                           03S0406
         CR    @15,@02                                          03S0406
         BE    @RF00406                                         03S0406
*    DO;                                                        03S0407
*      APDSPTR = APCTAPDS;          /* SET PTR TO FIRST APDS         */
         LR    APDSPTR,@15                                      03S0408
*      LOOPING = TRUE;              /* CONTROL FOR LOOPING ON APDS'S */
         OI    LOOPING,B'10000000'                              03S0409
*      DO WHILE (LOOPING=TRUE);     /* COMMENCE APDS LOOPING         */
         B     @DE00410                                         03S0410
@DL00410 DS    0H                                               03S0411
*  ACTVQLFY = FALSE;                /* BEGIN BY ASSUMING NO QUALIFY  */
         NI    ACTVQLFY,B'01111111'                             04S0411
*  IF APDSOWN=FALSE THEN            /* IF USER PORT REQUEST IS SHR   */
         TM    APDSOWN(APDSPTR),B'10000000'                     04S0412
         BNZ   @RF00412                                         04S0412
*    IF DVACOUNT>ZERO THEN          /* IF AN ADDR RANGE WAS GIVEN    */
         LH    @02,DVACOUNT                                     04S0413
         LTR   @02,@02                                          04S0413
         BNP   @RF00413                                         04S0413
*      DO;                          /* SEE IF A SHR PORT IN RANGE    */
*        ACTVQLFY = TRUE;           /* 3838383838383838383838383838$ */
         OI    ACTVQLFY,B'10000000'                             04S0415
*      END;                                                     04S0416
*    ELSE                           /* NO ADDR RANGE GIVEN           */
*      ACTVQLFY = TRUE;             /* SHOW ALL SHR JOBS             */
         B     @RC00413                                         04S0417
@RF00413 OI    ACTVQLFY,B'10000000'                             04S0417
*  ELSE                             /* OTHERWISE, EXCLUSIVELY OWNED  */
*    IF DVACOUNT=ZERO THEN          /* IF COMMAND DIDN'T GIVE ADDR'S */
         B     @RC00412                                         04S0418
@RF00412 LH    @02,DVACOUNT                                     04S0418
         LTR   @02,@02                                          04S0418
         BNZ   @RF00418                                         04S0418
*      ACTVQLFY = TRUE;             /* THEN ANYONE QUALIFIES         */
         OI    ACTVQLFY,B'10000000'                             04S0419
*    ELSE                           /* OTHERWISE, SEE IF IN RANGE    */
*      DO INDEX=1 TO DVACOUNT BY 1 WHILE(ACTVQLFY=FALSE);/* SEARCH   */
         B     @RC00418                                         04S0420
@RF00418 LA    INDEX,1                                          04S0420
         B     @DE00420                                         04S0420
@DL00420 TM    ACTVQLFY,B'10000000'                             04S0420
         BNZ   @DC00420                                         04S0420
*        IF APDSAPUB->APUBUCB->UCBNAME>=LOWADDR(INDEX) &        04S0421
*           APDSAPUB->APUBUCB->UCBNAME<=HIGHADDR(INDEX) THEN    04S0421
         L     @01,APDSAPUB(,APDSPTR)                           04S0421
         L     @15,APUBUCB(,@01)                                04S0421
         LR    @14,INDEX                                        04S0421
         MH    @14,@CH00047                                     04S0421
         LA    @01,LOWADDR-3(@14)                               04S0421
         CLC   UCBNAME(3,@15),0(@01)                            04S0421
         BL    @RF00421                                         04S0421
         LA    @01,HIGHADDR-3(@14)                              04S0421
         CLC   UCBNAME(3,@15),0(@01)                            04S0421
         BH    @RF00421                                         04S0421
*          DO;                      /* IF UNIT ADDR WITHIN RANGE     */
*            ACTVQLFY = TRUE;       /* THEN EXC PORT QUALIFIES       */
         OI    ACTVQLFY,B'10000000'                             04S0423
*          END;                                                 04S0424
*        ELSE;                      /* MOVE ON TO NEXT RANGE         */
@RF00421 DS    0H                                               04S0426
*      END;                                                     04S0426
         AL    INDEX,@CF00296                                   04S0426
@DE00420 CH    INDEX,DVACOUNT                                   04S0426
         BNH   @DL00420                                         04S0426
@DC00420 DS    0H                                               04S0427
*  IF ACTVQLFY=TRUE THEN            /* IF,AFTER ALL THAT,USER QUALFYS*/
@RC00418 DS    0H                                               04S0427
@RC00412 TM    ACTVQLFY,B'10000000'                             04S0427
         BNO   @RF00427                                         04S0427
*    DO;                            /* THEN SET UP NEXT DISPLAY ENTRY*/
*      ACTIVTXT(1:LENGTH(APDSJBNM)) = APDSJBNM; /* INSERT JOBNAME    */
         LA    @02,DSPLLINE                                     04S0429
         MVC   ACTIVTXT(8,@02),APDSJBNM(APDSPTR)                04S0429
*      CVD(APDSREG,FULLWORD);       /* CVD USER REG - MAX 9999K BYTES*/
         L     @15,APDSREG(,APDSPTR)                            04S0430
         CVD   @15,@TS00001                                     04S0430
         MVC   FULLWORD(4),@TS00001+4                           04S0430
*      FULLWORD = FULLWORD × '0000000F'X; /* ENSURE CORRECT SIGN     */
         OC    FULLWORD(4),@CB02644                             04S0431
*      UNPK(ACTIVTXT(LENGTH(APDSJBNM)+1:LENGTH(APDSJBNM)+4),FULLWORD);
         UNPK  ACTIVTXT+8(4,@02),FULLWORD(4)                    04S0432
*      DO INDEX=1 TO 3 BY 1 WHILE(ACTIVTXT(LENGTH(APDSJBNM)+INDEX)='0')
         LA    INDEX,1                                          04S0433
@DL00433 LA    @15,DSPLLINE                                     04S0433
         LR    @14,@15                                          04S0433
         ALR   @14,INDEX                                        04S0433
         CLI   ACTIVTXT+7(@14),C'0'                             04S0433
         BNE   @DC00433                                         04S0433
*        ACTIVTXT(LENGTH(APDSJBNM)+INDEX) = ''; /* BLANK LEADING 0'S */
         ALR   @15,INDEX                                        04S0434
         MVI   ACTIVTXT+7(@15),C' '                             04S0434
*      END;                                                     04S0435
         AL    INDEX,@CF00296                                   04S0435
         C     INDEX,@CF00047                                   04S0435
         BNH   @DL00433                                         04S0435
@DC00433 DS    0H                                               04S0436
*      ACTIVTXT(LENGTH(APDSJBNM)+5:LENGTH(APDSJBNM)+6) = 'K ';/*ADD K*/
         LA    @02,DSPLLINE                                     04S0436
         MVC   ACTIVTXT+12(2,@02),@CC02646                      04S0436
*      ACTIVTXT(LENGTH(APDSJBNM)+7:LENGTH(ACTIVTXT)) = '';/*BLANKREST*/
         MVI   ACTIVTXT+14(@02),C' '                            04S0437
         MVC   ACTIVTXT+15(2,@02),ACTIVTXT+14(@02)              04S0437
*      IF APDSOWN=TRUE & APDSARS=TRUE THEN /* IF AN EXCLUSIVE PORT   */
         TM    APDSOWN(APDSPTR),B'10001000'                     04S0438
         BNO   @RF00438                                         04S0438
*        DO;                                                    04S0439
*          ACTIVTXT(LENGTH(APDSJBNM)+7:LENGTH(APDSJBNM)+7+LENGTH
*              (UCBNAME)-1) = APDSAPUB->APUBUCB->UCBNAME; /*UNIT ADDR*/
         L     @01,APDSAPUB(,APDSPTR)                           04S0440
         L     @01,APUBUCB(,@01)                                04S0440
         MVC   ACTIVTXT+14(3,@02),UCBNAME(@01)                  04S0440
*        END;                                                   04S0441
*      ELSE;                        /* OTHERWISE, SEEKS SHR PORT     */
@RF00438 DS    0H                                               04S0443
*    END;                           /* END OF SETUP FOR QUALIFIER    */
*  ELSE;                            /* USER DOESN'T QLFY - NO ENTRY  */
@RF00427 DS    0H                                               04S0445
*        IF ACTVQLFY=TRUE THEN      /* IF A NEW BLOCK WAS PREPARED   */
         TM    ACTVQLFY,B'10000000'                             03S0445
         BNO   @RF00445                                         03S0445
*          DO;                                                  03S0446
*            IF LINCOUNT=ZERO THEN  /* IF WORKING ON 1ST OF 10 LINES */
         SLR   @02,@02                                          03S0447
         CR    LINCOUNT,@02                                     03S0447
         BNE   @RF00447                                         03S0447
*              IF BLKCOUNT=ZERO THEN /* IF THIS IS 1ST BLK ON 1ST LIN*/
         CR    BLKCOUNT,@02                                     03S0448
         BNE   @RF00448                                         03S0448
*                DO;                                            03S0449
*                  WPLPTR = ADDR(ACTVAREA); /* POINT TO MSG AREA     */
         LA    @02,DATAAREA                                     03S0450
         ST    @02,WPLPTR                                       03S0450
*                  WPLLGH = 4 + LINELENA; /* LENGTH OF THIS WPL      */
         MVC   WPLLGH(2,@02),@CH00254                           03S0451
*                  WPLMCSF = '0040'X; /* INDICATE MLWTO              */
         MVC   WPLMCSF(2,@02),@CB02647                          03S0452
*                  WPLTXT(1:LINELENA) = '';   /* CLEAR LEFT COLUMNS  */
         MVI   WPLTXT(@02),C' '                                 03S0453
         MVC   WPLTXT+1(69,@02),WPLTXT(@02)                     03S0453
*                  WPLTXT(ABLK1CL1:ABLK1CL1+ABLKLEN-1) = ACTIVTXT; /**/
         LA    @15,DSPLLINE                                     03S0454
         MVC   WPLTXT+2(17,@02),ACTIVTXT(@15)                   03S0454
*                  BLKCOUNT = 1;    /* 1 BLOCK NOW PLACED ON 1ST LINE*/
         LA    BLKCOUNT,1                                       03S0455
*                END;                                           03S0456
*              ELSE                 /* 1ST BLK ON 1ST LINE ALREADY IN*/
*                IF BLKCOUNT=1 THEN /* IF ONLY 1 BLK ALREADY IN      */
         B     @RC00448                                         03S0457
@RF00448 C     BLKCOUNT,@CF00296                                03S0457
         BNE   @RF00457                                         03S0457
*                  DO;                                          03S0458
*                    WPLTXT(ABLK2CL1:ABLK2CL1+ABLKLEN-1) = ACTIVTXT;
         L     @02,WPLPTR                                       03S0459
         LA    @15,DSPLLINE                                     03S0459
         MVC   WPLTXT+27(17,@02),ACTIVTXT(@15)                  03S0459
*                    BLKCOUNT = 2;  /* INCREASE COUNT TO 2 ON 1ST LIN*/
         LA    BLKCOUNT,2                                       03S0460
*                  END;                                         03S0461
*                ELSE               /* BLKCOUNT=2                    */
*                  DO;              /* NOW COMPLETE THE 1ST LINE     */
         B     @RC00457                                         03S0462
@RF00457 DS    0H                                               03S0463
*                    WPLTXT(ABLK3CL1:ABLK3CL1+ABLKLEN-1) = ACTIVTXT;
         L     @02,WPLPTR                                       03S0463
         LA    @15,DSPLLINE                                     03S0463
         MVC   WPLTXT+52(17,@02),ACTIVTXT(@15)                  03S0463
*                    WPLPTR = WPLPTR + WPLLGH; /* MOVE TO WPLLS01    */
         LH    @15,WPLLGH(,@02)                                 03S0464
         ALR   @15,@02                                          03S0464
         ST    @15,WPLPTR                                       03S0464
*                    WPLLTF = '2000'X; /* INDICATE DATA LINE         */
         MVC   WPLLTF(2,@15),@CB02648                           03S0465
*                    WPLAREA = XASDID; /* MOVE IN AREA ID            */
         L     @02,XSAPTR                                       03S0466
         MVC   WPLAREA(1,@15),XASDID+32(@02)                    03S0466
*                                   /* WPLLINES WILL BE FILLED LATER */
*                    WPLPTR = WPLPTR + LENGTH(WPLLS01); /*PT TO WPLML*/
         AL    @15,@CF00301                                     03S0467
         ST    @15,WPLPTR                                       03S0467
*                    BLKCOUNT = ZERO; /* DONE WITH 1ST LINE          */
         SLR   BLKCOUNT,BLKCOUNT                                03S0468
*                    LINCOUNT = 1;  /* ONE LINE NOW COMPLETE         */
         LA    LINCOUNT,1                                       03S0469
*                  END;                                         03S0470
*            ELSE                   /* LINCOUNT ALREADY > ZERO       */
*              IF BLKCOUNT=ZERO THEN /* IF THIS IS 1ST BLOCK         */
         B     @RC00447                                         03S0471
@RF00447 C     BLKCOUNT,@CF00041                                03S0471
         BNE   @RF00471                                         03S0471
*                DO;                /* WPLPTR IS ALREADY SET TO WPLML*/
*                  WPLML0 = ZERO;   /* THIS DUDE ALWAYS SET TO ZERO  */
         L     @02,WPLPTR                                       03S0473
         MVI   WPLML0(@02),X'00'                                03S0473
*                  WPLMLLEN = 4 + LINELENA; /* LENGTH OF THIS WPLML  */
         MVI   WPLMLLEN(@02),X'4A'                              03S0474
*                  WPLMLLTF = '2000'X; /* INDICATE DATA LINE         */
         MVC   WPLMLLTF(2,@02),@CB02648                         03S0475
*                  WPLMLTXT(1:LINELENA) = '';   /* CLEAR LEFT COLUMNS*/
         MVI   WPLMLTXT(@02),C' '                               03S0476
         MVC   WPLMLTXT+1(69,@02),WPLMLTXT(@02)                 03S0476
*                  WPLMLTXT(ABLK1CL1:ABLK1CL1+ABLKLEN-1) = ACTIVTXT;
         LA    @15,DSPLLINE                                     03S0477
         MVC   WPLMLTXT+2(17,@02),ACTIVTXT(@15)                 03S0477
*                  BLKCOUNT = 1;    /* 1ST BLOCK NOW IN PLACE        */
         LA    BLKCOUNT,1                                       03S0478
*                END;                                           03S0479
*              ELSE                 /* 2ND OR 3RD BLK OF NON-1ST LINE*/
*                IF BLKCOUNT=1 THEN /* 2ND BLOCK COMING IN           */
         B     @RC00471                                         03S0480
@RF00471 C     BLKCOUNT,@CF00296                                03S0480
         BNE   @RF00480                                         03S0480
*                  DO;                                          03S0481
*                    WPLMLTXT(ABLK2CL1:ABLK2CL1+ABLKLEN-1) = ACTIVTXT;
         L     @02,WPLPTR                                       03S0482
         LA    @15,DSPLLINE                                     03S0482
         MVC   WPLMLTXT+27(17,@02),ACTIVTXT(@15)                03S0482
*                    BLKCOUNT = 2;  /* INCREMENT BLOCK COUNT         */
         LA    BLKCOUNT,2                                       03S0483
*                  END;                                         03S0484
*                ELSE               /* 3RD BLOCK COMING IN           */
*                  DO;              /* FINISH OFF THIS NON-1ST LINE  */
         B     @RC00480                                         03S0485
@RF00480 DS    0H                                               03S0486
*                    WPLMLTXT(ABLK3CL1:ABLK3CL1+ABLKLEN-1) = ACTIVTXT;
         L     @02,WPLPTR                                       03S0486
         LA    @15,DSPLLINE                                     03S0486
         MVC   WPLMLTXT+52(17,@02),ACTIVTXT(@15)                03S0486
*                    WPLPTR = WPLPTR + WPLMLLEN;/* ADV TO NEXT LINE  */
         SLR   @15,@15                                          03S0487
         IC    @15,WPLMLLEN(,@02)                               03S0487
         ALR   @15,@02                                          03S0487
         ST    @15,WPLPTR                                       03S0487
*                    BLKCOUNT = ZERO; /* RESET TO BEGIN NEXT LINE    */
         SLR   BLKCOUNT,BLKCOUNT                                03S0488
*                    LINCOUNT = LINCOUNT + 1;/* INCREMENT LINE COUNT */
         LA    LINCOUNT,1(,LINCOUNT)                            03S0489
*                  END;                                         03S0490
*          END;                     /* END OF ACTVQLFY=TRUE          */
*        ELSE;                      /* OTHERWISE APDS ISN'T INTRSTNG */
@RF00445 DS    0H                                               03S0493
*        IF LINCOUNT=10 × APDSAPDS=ZERO THEN /* WTO ALL OF THE LINES */
@RC00445 C     LINCOUNT,@CF00099                                03S0493
         BE    @RT00493                                         03S0493
         L     @02,APDSAPDS(,APDSPTR)                           03S0493
         LTR   @02,@02                                          03S0493
         BNZ   @RF00493                                         03S0493
@RT00493 DS    0H                                               03S0494
*          DO;                                                  03S0494
*            IF APDSAPDS=ZERO THEN /* THIS WILL BE FINAL WTO         */
         SLR   @02,@02                                          03S0495
         C     @02,APDSAPDS(,APDSPTR)                           03S0495
         BNE   @RF00495                                         03S0495
*              DO;                                              03S0496
*                IF LINCOUNT=ZERO THEN /* IF NO LINES COMPLETED      */
         CR    LINCOUNT,@02                                     03S0497
         BNE   @RF00497                                         03S0497
*                  IF BLKCOUNT=ZERO THEN /* AND 1ST LINE  NOT BEGUN  */
         CR    BLKCOUNT,@02                                     03S0498
         BNE   @RF00498                                         03S0498
*                    IF LINESOUT=ZERO THEN /* AND NONE OUT AT ALL    */
         CH    @02,LINESOUT                                     03S0499
         BNE   @RF00499                                         03S0499
*                      DO;          /* OUTPUT NOTICE OF NO LINES     */
*                        CALL NULLACTV; /* OUTPUT MSG OF NO JOBS     */
         BAL   @14,NULLACTV                                     03S0501
*                      END;         /* END OF NO LINES CASE          */
*                    ELSE           /* >=10 LINES PREVIOUSLY WTO'ED  */
*                      DO;                                      03S0503
         B     @RC00499                                         03S0503
@RF00499 DS    0H                                               03S0504
*                        WPLPTR = ADDR(ACTVAREA);/* PT TO MSGAREA    */
         LA    @02,DATAAREA                                     03S0504
         ST    @02,WPLPTR                                       03S0504
*                        WPLLGH = 4 + ZERO; /* THIS WILL BE NULL LINE*/
         LA    @15,4                                            03S0505
         STH   @15,WPLLGH(,@02)                                 03S0505
*                        WPLMCSF = '0040'X; /* DENOTES MLWTO         */
         MVC   WPLMCSF(2,@02),@CB02647                          03S0506
*                                   /* NO TEXT ON THE NULL END LINE  */
*                        WPLPTR = WPLPTR + WPLLGH;/* ADV TO WPLLS01  */
         ALR   @02,@15                                          03S0507
         ST    @02,WPLPTR                                       03S0507
*                        WPLLTF = '1000'X; /* MERELY AN END LINE     */
         MVC   WPLLTF(2,@02),@CB02650                           03S0508
*                        WPLAREA = XASDID; /* MOVE IN AREA ID        */
         L     @01,XSAPTR                                       03S0509
         MVC   WPLAREA(1,@02),XASDID+32(@01)                    03S0509
*                        WPLLINES = 1; /* ACTUAL NO. OF LINES        */
         MVI   WPLLINES(@02),X'01'                              03S0510
*                      END;                                     03S0511
*                  ELSE             /*BLKCOUNT>ZERO - FINISH 1ST LINE*/
*                    DO;            /* WHETHER LINESOUT =ZERO OR ^=0 */
         B     @RC00498                                         03S0512
@RF00498 DS    0H                                               03S0513
*                      WPLPTR = WPLPTR + WPLLGH; /* ADV TO WPLLS01   */
         L     @02,WPLPTR                                       03S0513
         LH    @15,WPLLGH(,@02)                                 03S0513
         ALR   @15,@02                                          03S0513
         ST    @15,WPLPTR                                       03S0513
*                      WPLLTF = '3000'X; /* DATA LINE & ALSO END LINE*/
         MVC   WPLLTF(2,@15),@CB02651                           03S0514
*                      WPLAREA = XASDID; /* MOVE IN AREA ID          */
         L     @02,XSAPTR                                       03S0515
         MVC   WPLAREA(1,@15),XASDID+32(@02)                    03S0515
*                      WPLLINES = 1; /* ACTUAL NO. OF LINES          */
         MVI   WPLLINES(@15),X'01'                              03S0516
*                    END;                                       03S0517
*                ELSE               /* LINCOUNT>0                    */
*                  IF LINCOUNT=1 & BLKCOUNT=ZERO THEN /*IF 2ND UNBEGN*/
         B     @RC00497                                         03S0518
@RF00497 C     LINCOUNT,@CF00296                                03S0518
         BNE   @RF00518                                         03S0518
         C     BLKCOUNT,@CF00041                                03S0518
         BNE   @RF00518                                         03S0518
*                    DO;                                        03S0519
*                      WPLPTR = WPLPTR - LENGTH(WPLLS01);/* BACK UP  */
         L     @02,WPLPTR                                       03S0520
         SL    @02,@CF00301                                     03S0520
         ST    @02,WPLPTR                                       03S0520
*                      WPLLTF = '3000'X; /* DATA LINE & ALSO END LINE*/
         MVC   WPLLTF(2,@02),@CB02651                           03S0521
*                      WPLLINES = 1; /* ACTUAL NO. OF LINES          */
         MVI   WPLLINES(@02),X'01'                              03S0522
*                    END;                                       03S0523
*                  ELSE             /* SOMEWHERE BEYOND 1ST LINE     */
*                    DO;                                        03S0524
         B     @RC00518                                         03S0524
@RF00518 DS    0H                                               03S0525
*                      IF BLKCOUNT=ZERO THEN /* IF NEW LINE NOT BEGUN*/
         C     BLKCOUNT,@CF00041                                03S0525
         BNE   @RF00525                                         03S0525
*                        DO;                                    03S0526
*                          WPLPTR = WPLPTR - (4+LINELENA); /*BACK UP1*/
         L     @02,WPLPTR                                       03S0527
         SL    @02,@CF00254                                     03S0527
         ST    @02,WPLPTR                                       03S0527
*                        END;                                   03S0528
*                      ELSE         /* OTHERWISE, IN A PARTIAL LINE  */
*                        DO;                                    03S0529
         B     @RC00525                                         03S0529
@RF00525 DS    0H                                               03S0530
*                          LINCOUNT = LINCOUNT + 1;/*ADD FOR PARTIAL */
         LA    LINCOUNT,1(,LINCOUNT)                            03S0530
*                        END;                                   03S0531
*                      WPLMLLTF = '3000'X; /* LAST DATA LINE IS END  */
@RC00525 L     @02,WPLPTR                                       03S0532
         MVC   WPLMLLTF(2,@02),@CB02651                         03S0532
*                      WPLPTR = ADDR(ACTVAREA) + ADDR(ACTVAREA)->
*                          WPLLGH;  /* POINT TO WPLLS01              */
         LA    @02,DATAAREA                                     03S0533
         LH    @15,WPLLGH(,@02)                                 03S0533
         ALR   @15,@02                                          03S0533
         ST    @15,WPLPTR                                       03S0533
*                      WPLLINES = LINCOUNT; /* INSERT NO. OF LINES   */
         STC   LINCOUNT,WPLLINES(,@15)                          03S0534
*                    END;                                       03S0535
*                DSPENDED = TRUE;   /* INDICATE THAT WTO'S ALL OVER  */
@RC00518 DS    0H                                               03S0536
@RC00497 OI    DSPENDED,B'10000000'                             03S0536
*                LOOPING = FALSE;   /* LAST WTO - THE SHOW IS OVER   */
         NI    LOOPING,B'01111111'                              03S0537
*              END;                 /* END OF PREP FOR FINAL WTO     */
*            ELSE                   /* APDSAPDS^=0, HENCE LINCOUNT=10*/
*              DO;                  /* & NOT KNOWN TO BE END OF WTO'S*/
         B     @RC00495                                         03S0539
@RF00495 DS    0H                                               03S0540
*                WPLPTR = ADDR(ACTVAREA) + ADDR(ACTVAREA)->WPLLGH;/* */
         LA    @02,DATAAREA                                     03S0540
         LH    @15,WPLLGH(,@02)                                 03S0540
         ALR   @15,@02                                          03S0540
         ST    @15,WPLPTR                                       03S0540
*                WPLLINES = 10;     /* INSERT ACTUAL NO. OF LINES    */
         MVI   WPLLINES(@15),X'0A'                              03S0541
*              END;                                             03S0542
*            CALL DOTHEWTO;         /* NOW ACTUALLY DO THE MLWTO     */
@RC00495 BAL   @14,DOTHEWTO                                     03S0543
*            IF LOOPING=TRUE THEN   /* IF WTO'S STILL IN PROGRESS    */
         TM    LOOPING,B'10000000'                              03S0544
         BNO   @RF00544                                         03S0544
*              IF STOPDSPL=TRUE THEN /* AND DISPLAY IS TERMINATING   */
         TM    STOPDSPL,B'10000000'                             03S0545
         BNO   @RF00545                                         03S0545
*                DO;                                            03S0546
*                  LOOPING = FALSE; /* CEASE LOOPING - SHOW IS OVER  */
         NI    LOOPING,B'01111111'                              03S0547
*                  DSPENDED = TRUE; /* NO MORE WTO'S TO BE ISSUED    */
         OI    DSPENDED,B'10000000'                             03S0548
*                END;                                           03S0549
*              ELSE                 /* OTHERWISE, RESET COUNTERS     */
*                DO;                /* AND CONTINUE                  */
         B     @RC00545                                         03S0550
@RF00545 DS    0H                                               03S0551
*                  LINESOUT = LINESOUT + LINCOUNT; /*ADD ON NEW LINES*/
         LR    @02,LINCOUNT                                     03S0551
         AH    @02,LINESOUT                                     03S0551
         STH   @02,LINESOUT                                     03S0551
*                  LINCOUNT = ZERO; /* RESET FOR NEXT 10 LINES       */
         SLR   LINCOUNT,LINCOUNT                                03S0552
*                END;                                           03S0553
*            ELSE;                  /* OTHERWISE, FINAL LINES NOW OUT*/
@RF00544 DS    0H                                               03S0555
*          END;                     /* END LINCOUNT=10 × APDSPADS=0  */
*        ELSE                       /* ACTVQLFY=FALSE - NO MSG ENTRY */
*          APDSPTR = APDSAPDS;      /* THEN MOVE ON TO NEXT APDS     */
         B     @RC00493                                         03S0556
@RF00493 L     APDSPTR,APDSAPDS(,APDSPTR)                       03S0556
*      END;                         /* END DO WHILE(LOOPING=TRUE)    */
@RC00493 DS    0H                                               03S0557
@DE00410 TM    LOOPING,B'10000000'                              03S0557
         BO    @DL00410                                         03S0557
*    END;                           /* END FOR APCTAPDS^=ZERO        */
*  ELSE                             /* APCTAPDS=ZERO - NO JOBS AT ALL*/
*    DO;                                                        03S0559
         B     @RC00406                                         03S0559
@RF00406 DS    0H                                               03S0560
*      CALL NULLACTV;               /* SETUP MSG OF NO JOBS          */
         BAL   @14,NULLACTV                                     03S0560
*      DSPENDED = TRUE;             /* INDICATE THAT WTO'S ALL OVER  */
         OI    DSPENDED,B'10000000'                             03S0561
*      CALL DOTHEWTO;               /* OUTPUT THE NULL MESSAGE       */
         BAL   @14,DOTHEWTO                                     03S0562
*    END;                                                       03S0563
*    END;                                                       02S0564
*  ELSE;                                                        02S0565
@RF00401 DS    0H                                               02S0566
*  IF STOPDSPL=TRUE THEN            /* IF DISPLAY WAS CUT SHORT      */
@RC00401 TM    STOPDSPL,B'10000000'                             02S0566
         BNO   @RF00566                                         02S0566
*    DO;                            /* NOTIFY THE OPERATOR           */
*      OFFSET#2 = 20;               /* 2ND VARIABLE IN IGT274I       */
         MVC   OFFSET#2(4),@CF00276                             02S0568
*      SIXCHARS = OPERACTV;         /* OPERATION IS DISPLAY ACTIVE   */
         MVC   SIXCHARS(6),@CC02589                             02S0569
*      CALL APCVZDWT(IGT274I,OFFSET#1,APCTSSID,LENGTH(APCTSSID),
*          OFFSET#2,SIXCHARS,LENGTH(SIXCHARS)); /* CONSOLATION MSG   */
         LA    @04,@CF01063                                     02S0570
         ST    @04,@AL00001                                     02S0570
         LA    @04,OFFSET#1                                     02S0570
         ST    @04,@AL00001+4                                   02S0570
         LA    @04,APCTSSID(,APCTPTR)                           02S0570
         ST    @04,@AL00001+8                                   02S0570
         LA    @04,@CF00301                                     02S0570
         ST    @04,@AL00001+12                                  02S0570
         LA    @04,OFFSET#2                                     02S0570
         ST    @04,@AL00001+16                                  02S0570
         LA    @04,SIXCHARS                                     02S0570
         ST    @04,@AL00001+20                                  02S0570
         LA    @04,@CF00292                                     02S0570
         ST    @04,@AL00001+24                                  02S0570
         MVI   @AL00001+24,X'80'                                02S0570
         L     @15,APCTZDWT(,APCTPTR)                           02S0570
         LA    @01,@AL00001                                     02S0570
         BALR  @14,@15                                          02S0570
*    END;                                                       02S0571
*  ELSE;                                                        02S0572
@RF00566 DS    0H                                               02S0573
*          END;                                                 01S0573
*            /* OTHERWISE DISPLAY UNITS, AS WAS REQUESTED            */
*        ELSE                                                   01S0574
*          DO;                                                  01S0574
         B     @RC00397                                         01S0574
@RF00397 DS    0H                                               01S0575
*  GENERATE  CODE                                               02S0575
*      REFS(WTO2701A,WTO271S)                                   02S0575
*      SETS(WTO2701A);              /* PREPARE FOR THE 1ST WTO  02S0575
     MVC  WTO2701A(WTO271E),WTO271S
*  CALL WTOCNTRL;                   /* WTO THE CONTROL & LABEL LINES */
         BAL   @14,WTOCNTRL                                     02S0576
*  IF STOPDSPL=FALSE THEN           /* IF DISPLAY NOT TO BE ENDED    */
         TM    STOPDSPL,B'10000000'                             02S0577
         BNZ   @RF00577                                         02S0577
*    DO;                                                        02S0578
*  USRCOUNT = ZERO;                 /* INITIALLY, NO SHR USERS FOUND */
         SLR   USRCOUNT,USRCOUNT                                03S0579
*  IF APCTAPDS^=ZERO THEN           /* IF THERE IS AT LEAST 1 USER   */
         L     @04,APCTAPDS(,APCTPTR)                           03S0580
         LTR   @04,@04                                          03S0580
         BZ    @RF00580                                         03S0580
*    DO;                            /* COUNT SHR USERS IN APDS CHAIN */
*      APDSPTR = APCTAPDS;          /* POINT TO 1ST APDS             */
         LR    APDSPTR,@04                                      03S0582
*      DO WHILE(APDSPTR^=ZERO);     /* CONTINUE THROUGH ENTIRE TABLE */
         B     @DE00583                                         03S0583
@DL00583 DS    0H                                               03S0584
*        IF APDSOWN=FALSE THEN      /* IF REQUEST IS FOR SHR PORT    */
         TM    APDSOWN(APDSPTR),B'10000000'                     03S0584
         BNZ   @RF00584                                         03S0584
*          USRCOUNT = USRCOUNT + 1; /* CHALK UP ONE MORE USER        */
         AL    USRCOUNT,@CF00296                                03S0585
*        ELSE;                                                  03S0586
@RF00584 DS    0H                                               03S0587
*        APDSPTR = APDSAPDS;        /* ADV TO NEXT APDS IF THERE IS 1*/
         L     APDSPTR,APDSAPDS(,APDSPTR)                       03S0587
*      END;                                                     03S0588
@DE00583 SLR   @04,@04                                          03S0588
         CR    APDSPTR,@04                                      03S0588
         BNE   @DL00583                                         03S0588
*      IF USRCOUNT>ZERO THEN        /* IF AT LEAST 1 USER WAS FOUND  */
         CR    USRCOUNT,@04                                     03S0589
         BNH   @RF00589                                         03S0589
*        DO;                        /* THEN GET ENOUGH SHRTABLE MEMRY*/
*          RFY (R0F,R1P) RSTD;      /* SECURE PARAMETER REGISTERS    */
*          R0F = USRCOUNT * 12;     /* 12 BYTES IN TABLE FOR EACH USR*/
*                                                               03S0592
*                                                               03S0592
         LR    R0F,USRCOUNT                                     03S0592
         MH    R0F,@CH00105                                     03S0592
*            DO; /*IGTYGSTK LV(R0P)*/                           03S0593
*            RFY GPR00F RSTD; /* NEEDED REGISTER */             03S0594
*            GPR00F = R0P; /* SET REG 0 TO REQUIRED LENGTH */   03S0595
*            CALL APCVZUAD; /* OBTAIN A DYNAMIC AREA */         03S0596
         L     @15,APCTZUAD(,APCTPTR)                           03S0596
         BALR  @14,@15                                          03S0596
*            RFY (GPR00F) UNRSTD; /* FINISHED WITH REGISTERS */ 03S0597
*            END; /* REG_1 -> ACQUIRED DYNAMIC AREA */      /* GO GET T
*AT MEMORY            */                                        03S0598
*          SHRTABLP = R1P;          /* SECURE ADDR OF THE GOTTEN STG */
         ST    R1P,SHRTABLP                                     03S0599
*          RFY (R0F,R1P) UNRSTD;    /* GIVE BACK THE PARAMETER REG'RS*/
*        END;                                                   03S0601
*      ELSE;                                                    03S0602
@RF00589 DS    0H                                               03S0603
*    END;                                                       03S0603
*  ELSE;                            /* NO APDS'S AT ALL              */
@RF00580 DS    0H                                               03S0605
*  TABLSIZE = ZERO;                 /* INITIALLY, NO ENTRIES IN TABLE*/
         SLR   @04,@04                                          03S0605
         STH   @04,TABLSIZE                                     03S0605
*  IF APCTAPDS^=ZERO THEN           /* IF THERE IS AT LEAST 1 APDS   */
         L     @15,APCTAPDS(,APCTPTR)                           03S0606
         CR    @15,@04                                          03S0606
         BE    @RF00606                                         03S0606
*    DO;                            /* BUILD A TABLE                 */
*      APDSPTR = APCTAPDS;          /* POINT TO FIRST APDS           */
         LR    APDSPTR,@15                                      03S0608
*      DO WHILE(APDSPTR^=ZERO);     /* SEARCH TO END OF APDS CHAIN   */
         B     @DE00609                                         03S0609
@DL00609 DS    0H                                               03S0610
*        IF APDSOWN=BITZERO THEN    /* IF OWN=SHR                    */
         TM    APDSOWN(APDSPTR),B'10000000'                     03S0610
         BNZ   @RF00610                                         03S0610
*          DO;                      /* WE'RE INTERESTED              */
*            TABLSIZE = TABLSIZE + 1; /* INCREMENT # ENTRIES IN TABLE*/
         LA    @04,1                                            03S0612
         AH    @04,TABLSIZE                                     03S0612
         STH   @04,TABLSIZE                                     03S0612
*            USERNAME(TABLSIZE) = APDSJBNM; /* INSERT USER JOBNAME   */
         L     @15,SHRTABLP                                     03S0613
         MH    @04,@CH00105                                     03S0613
         ST    @04,@TF00001                                     03S0613
         ALR   @04,@15                                          03S0613
         AL    @04,@CF02790                                     03S0613
         MVC   USERNAME(8,@04),APDSJBNM(APDSPTR)                03S0613
*            USERREG(TABLSIZE) = APDSREG; /* SECURE USER'S REQ. REG. */
         L     @04,APDSREG(,APDSPTR)                            03S0614
         L     @14,@TF00001                                     03S0614
         AL    @15,@CF02791                                     03S0614
         ST    @04,USERREG-8(@14,@15)                           03S0614
*          END;                                                 03S0615
*        ELSE;                      /* NOT A SHR USER                */
@RF00610 DS    0H                                               03S0617
*        APDSPTR = APDSAPDS;        /* ADVANCE TO NEXT APDS          */
         L     APDSPTR,APDSAPDS(,APDSPTR)                       03S0617
*      END;                                                     03S0618
@DE00609 LTR   APDSPTR,APDSPTR                                  03S0618
         BNZ   @DL00609                                         03S0618
*    END;                                                       03S0619
*  ELSE;                            /* OTHERWISE, NOT EVEN 1 APDS    */
@RF00606 DS    0H                                               03S0621
*  LINESOUT = ZERO;                 /* INIT. SUM OF ALL LINES OUTPUT */
         SLR   @02,@02                                          03S0621
         STH   @02,LINESOUT                                     03S0621
*  LINCOUNT = ZERO;                 /* INIT. # LINES FOR NEXT MLWTO  */
         SLR   LINCOUNT,LINCOUNT                                03S0622
*  BLKCOUNT = ZERO;                 /* INIT. # UNITS ON NEXT LINE    */
         SLR   BLKCOUNT,BLKCOUNT                                03S0623
*  IF APCTAPUB^=ZERO THEN           /* IF WE HAVE AT LEAST ONE APUB  */
         L     @15,APCTAPUB(,APCTPTR)                           03S0624
         CR    @15,@02                                          03S0624
         BE    @RF00624                                         03S0624
*    DO;                            /* THEN PROCEED                  */
*      APUBPTR = APCTAPUB;          /* POINT TO 1ST APUB             */
         LR    APUBPTR,@15                                      03S0626
*      LOOPING = TRUE;              /* SET CONTROL VRBL FOR LOOPING  */
         OI    LOOPING,B'10000000'                              03S0627
*      DO WHILE(LOOPING=TRUE);      /* COMMENCE LOOPING              */
         B     @DE00628                                         03S0628
@DL00628 DS    0H                                               03S0629
*        UCBPTR = APUBUCB;          /* MOVE ON TO CORRECT UCB        */
         L     @02,APUBUCB(,APUBPTR)                            03S0629
         ST    @02,UCBPTR                                       03S0629
*        MULTISHR = FALSE;          /* INIT INDIC OF MULT SHR USERS  */
         NI    MULTISHR,B'01111111'                             03S0630
*  UNITQLFY = FALSE;                /* BEGIN BY ASSUMING NO QUALIFY  */
         NI    UNITQLFY,B'01111111'                             04S0631
*  IF DVACOUNT=ZERO THEN            /* IF NO ADDR RANGE(S) GIVEN     */
         LH    @02,DVACOUNT                                     04S0632
         LTR   @02,@02                                          04S0632
         BNZ   @RF00632                                         04S0632
*    UNITQLFY = TRUE;               /* THEN REPORT ON THIS UNIT      */
         OI    UNITQLFY,B'10000000'                             04S0633
*  ELSE                                                         04S0634
*    DO INDEX=1 TO DVACOUNT BY 1 WHILE(UNITQLFY=FALSE); /* SEARCH    */
         B     @RC00632                                         04S0634
@RF00632 LA    INDEX,1                                          04S0634
         B     @DE00634                                         04S0634
@DL00634 TM    UNITQLFY,B'10000000'                             04S0634
         BNZ   @DC00634                                         04S0634
*      IF APUBUCB->UCBNAME>=LOWADDR(INDEX) &                    04S0635
*         APUBUCB->UCBNAME<=HIGHADDR(INDEX) THEN /* TEST THE DEV ADDR*/
         L     @15,APUBUCB(,APUBPTR)                            04S0635
         LR    @14,INDEX                                        04S0635
         MH    @14,@CH00047                                     04S0635
         LA    @01,LOWADDR-3(@14)                               04S0635
         CLC   UCBNAME(3,@15),0(@01)                            04S0635
         BL    @RF00635                                         04S0635
         LA    @01,HIGHADDR-3(@14)                              04S0635
         CLC   UCBNAME(3,@15),0(@01)                            04S0635
         BH    @RF00635                                         04S0635
*        DO;                        /* IF UNIT ADDR WITHIN A RANGE   */
*          UNITQLFY = TRUE;         /* THEN UNIT QUALIFIES           */
         OI    UNITQLFY,B'10000000'                             04S0637
*        END;                                                   04S0638
*      ELSE;                                                    04S0639
@RF00635 DS    0H                                               04S0640
*    END;                                                       04S0640
         AL    INDEX,@CF00296                                   04S0640
@DE00634 CH    INDEX,DVACOUNT                                   04S0640
         BNH   @DL00634                                         04S0640
@DC00634 DS    0H                                               04S0641
*  IF UNITQLFY=TRUE THEN            /*IF THIS UNIT IS TO BE DISPLAYED*/
@RC00632 TM    UNITQLFY,B'10000000'                             04S0641
         BNO   @RF00641                                         04S0641
*    DO;                                                        04S0642
*      UCBPTR = APUBUCB;            /* SET UCB POINTER               */
         L     @02,APUBUCB(,APUBPTR)                            04S0643
         ST    @02,UCBPTR                                       04S0643
*      UNITSTXT(1:LENGTH(UCBNAME)) = UCBNAME; /* MOVE IN PORT ADDR   */
         LA    @15,DSPLLINE                                     04S0644
         MVC   UNITSTXT(3,@15),UCBNAME(@02)                     04S0644
*      UNITSTXT(LENGTH(UCBNAME)+1:LENGTH(UCBNAME)+2) = '';/* 2 BLANKS*/
         MVI   UNITSTXT+3(@15),C' '                             04S0645
         MVI   UNITSTXT+4(@15),C' '                             04S0645
*      CALL USTATUS;                                            04S0646
         BAL   @14,USTATUS                                      04S0646
*      CVD(APUBRGN,FULLWORD);       /* CONVERT PARTITION TO DECIMAL  */
         LH    @02,APUBRGN(,APUBPTR)                            04S0647
         CVD   @02,@TS00001                                     04S0647
         MVC   FULLWORD(4),@TS00001+4                           04S0647
*      FULLWORD = FULLWORD × '0000000F'X; /* ENSURE CORRECT SIGN     */
         OC    FULLWORD(4),@CB02644                             04S0648
*      UNPK(UNITSTXT(LENGTH(UCBNAME)+10:LENGTH(UCBNAME)+13),FULLWORD);
         LA    @02,DSPLLINE                                     04S0649
         UNPK  UNITSTXT+12(4,@02),FULLWORD(4)                   04S0649
*      DO INDEX=10 TO 12 BY 1 WHILE(UNITSTXT(LENGTH(UCBNAME)+INDEX))
*          = '0';                   /* LOOK FOR LEADING ZEROES       */
         LA    INDEX,10                                         04S0650
@DL00650 LA    @15,DSPLLINE                                     04S0650
         LR    @14,@15                                          04S0650
         ALR   @14,INDEX                                        04S0650
         CLI   UNITSTXT+2(@14),C'0'                             04S0650
         BNE   @DC00650                                         04S0650
*        UNITSTXT(LENGTH(UCBNAME)+INDEX) = ''; /* CLEAR LEADING ZEROS*/
         ALR   @15,INDEX                                        04S0651
         MVI   UNITSTXT+2(@15),C' '                             04S0651
*      END;                                                     04S0652
         AL    INDEX,@CF00296                                   04S0652
         C     INDEX,@CF00105                                   04S0652
         BNH   @DL00650                                         04S0652
@DC00650 DS    0H                                               04S0653
*      UNITSTXT(LENGTH(UCBNAME)+14:LENGTH(UCBNAME)+15) = 'K '; /* K  */
         LA    @02,DSPLLINE                                     04S0653
         MVC   UNITSTXT+16(2,@02),@CC02646                      04S0653
*      IF UCBNAME(3:3)='0' THEN     /* IF THIS IS A MASTER PORT      */
         L     @01,UCBPTR                                       04S0654
         CLI   UCBNAME+2(@01),C'0'                              04S0654
         BNE   @RF00654                                         04S0654
*        DO;                                                    04S0655
*          UNITSTXT(LENGTH(UCBNAME)+16:LENGTH(UCBNAME)+19) = 'EXC ';
         MVC   UNITSTXT+18(4,@02),@CC02655                      04S0656
*          UNITSTXT(LENGTH(UCBNAME)+20:LENGTH(UCBNAME)+27) = '**    **'
         MVC   UNITSTXT+22(8,@02),@CC02656                      04S0657
*          UNITSTXT(LENGTH(UCBNAME)+22:LENGTH(UCBNAME)+25) = APCTSSID;
         MVC   UNITSTXT+24(4,@02),APCTSSID(APCTPTR)             04S0658
*        END;                                                   04S0659
*      ELSE                         /* A USER PORT                   */
*        DO;                                                    04S0660
         B     @RC00654                                         04S0660
@RF00654 DS    0H                                               04S0661
*          IF APUBOWN=TRUE THEN     /* IF PORT IS FOR EXC USER       */
         TM    APUBOWN(APUBPTR),B'01000000'                     04S0661
         BNO   @RF00661                                         04S0661
*            DO;                    /* FILL IN 'EXC' & JOBNAME       */
*              UNITSTXT(LENGTH(UCBNAME)+16:LENGTH(UCBNAME)+19) = 'EXC '
         LA    @02,DSPLLINE                                     04S0663
         MVC   UNITSTXT+18(4,@02),@CC02655                      04S0663
*              UNITSTXT(LENGTH(UCBNAME)+20:LENGTH(UCBNAME)+27) =
*                  APUBAPDS->APDSJBNM; /* INSERT JOBNAME             */
         L     @01,APUBAPDS(,APUBPTR)                           04S0664
         MVC   UNITSTXT+22(8,@02),APDSJBNM(@01)                 04S0664
*            END;                                               04S0665
*          ELSE                     /* USER PORT NOT EXC OWNED       */
*            DO;                                                04S0666
         B     @RC00661                                         04S0666
@RF00661 DS    0H                                               04S0667
*              UNITSTXT(LENGTH(UCBNAME)+16:LENGTH(UCBNAME)+19) = 'SHR '
         LA    @02,DSPLLINE                                     04S0667
         MVC   UNITSTXT+18(4,@02),@CC02657                      04S0667
*              UNITSTXT(LENGTH(UCBNAME)+20:LENGTH(UCBNAME)+27) = '';
         MVI   UNITSTXT+22(@02),C' '                            04S0668
         MVC   UNITSTXT+23(7,@02),UNITSTXT+22(@02)              04S0668
*                                   /* CLEAR OUT REST OF IMAGE       */
*              IF APUBALF1(1:4)^='0'X THEN;/* IF PORT IS UNUSEABLE   */
         TM    APUBALF1(APUBPTR),B'11110000'                    04S0669
         BNZ   @RT00669                                         04S0669
*                                          /*THEN LEAVE BLANKS TO END*/
*              ELSE                 /* OTHERWISE, USEABLE SHR PORT   */
*                DO;                /* SO IDENTIFY POSSIBLE USERS    */
*                  MULTINBR = ZERO; /* INIT. COUNT OF POSSIBLE USERS */
         SLR   @02,@02                                          04S0672
         STH   @02,MULTINBR                                     04S0672
*                  DO INDEX=1 TO TABLSIZE BY 1; /* SCAN USER LIST    */
         LA    INDEX,1                                          04S0673
         B     @DE00673                                         04S0673
@DL00673 DS    0H                                               04S0674
*                    IF USERREG(INDEX)<=APUBRGN THEN /* IF USER CAN  */
         LR    @15,INDEX                                        04S0674
         MH    @15,@CH00105                                     04S0674
         L     @01,SHRTABLP                                     04S0674
         AL    @01,@CF02791                                     04S0674
         L     @15,USERREG-8(@15,@01)                           04S0674
         CH    @15,APUBRGN(,APUBPTR)                            04S0674
         BH    @RF00674                                         04S0674
*                      DO;                                      04S0675
*                        MULTINBR = MULTINBR + 1; /* INCREMENT COUNT */
         LA    @15,1                                            04S0676
         AH    @15,MULTINBR                                     04S0676
         STH   @15,MULTINBR                                     04S0676
*                        SHRSBRPT(MULTINBR) = INDEX;/*DOUBLE INDEXING*/
         ALR   @15,@15                                          04S0677
         STH   INDEX,SHRSBRPT-2(@15)                            04S0677
*                      END;                                     04S0678
*                    ELSE;          /* THIS USER WON'T FIT IN PART'N */
@RF00674 DS    0H                                               04S0680
*                  END;                                         04S0680
         AL    INDEX,@CF00296                                   04S0680
@DE00673 CH    INDEX,TABLSIZE                                   04S0680
         BNH   @DL00673                                         04S0680
*                  IF MULTINBR>ZERO THEN /* IF AT LEAST 1 CONTENDER  */
         LH    @02,MULTINBR                                     04S0681
         LTR   @02,@02                                          04S0681
         BNP   @RF00681                                         04S0681
*                    MULTISHR = TRUE; /* INDICATE CONTENDER(S)       */
         OI    MULTISHR,B'10000000'                             04S0682
*                  ELSE             /* NOONE SATISFIED BY THIS PORT  */
*                    MULTISHR = FALSE; /* ENSURE NO CONTENDERS SHOWN */
         B     @RC00681                                         04S0683
@RF00681 NI    MULTISHR,B'01111111'                             04S0683
*                END;                                           04S0684
*            END;                   /* END CODE FOR SHR USER PORT    */
*        END;                       /* END CODE FOR USER PORT        */
*    END;                           /* END CODE FOR UNITQLFY=TRUE    */
*  ELSE;                            /* USER DOESN'T QUAL. - NO ENTRY */
@RF00641 DS    0H                                               04S0689
*        IF UNITQLFY=TRUE THEN      /* IF UNIT WAS TO BE SHOWN       */
@RC00641 TM    UNITQLFY,B'10000000'                             03S0689
         BNO   @RF00689                                         03S0689
*          IF MULTISHR=TRUE THEN    /* IF A SHR PORT W/MULTI USERS   */
         TM    MULTISHR,B'10000000'                             03S0690
         BNO   @RF00690                                         03S0690
*           IF BYNAMES=TRUE THEN    /*IF JOBNAMES TO BE SHOWN FOR ALL*/
         TM    BYNAMES,B'10000000'                              03S0691
         BNO   @RF00691                                         03S0691
*            DO INDEX=1 TO MULTINBR BY 1 WHILE(STOPDSPL=FALSE); 03S0692
         LA    INDEX,1                                          03S0692
         B     @DE00692                                         03S0692
@DL00692 TM    STOPDSPL,B'10000000'                             03S0692
         BNZ   @DC00692                                         03S0692
*              UJOBNAME = USERNAME(SHRSBRPT(INDEX));/*GET NEXT JOBNAM*/
         LA    @15,DSPLLINE                                     03S0693
         LR    @14,INDEX                                        03S0693
         ALR   @14,@14                                          03S0693
         LH    @14,SHRSBRPT-2(@14)                              03S0693
         MH    @14,@CH00105                                     03S0693
         L     @01,SHRTABLP                                     03S0693
         ALR   @01,@14                                          03S0693
         AL    @01,@CF02790                                     03S0693
         MVC   UJOBNAME(8,@15),USERNAME(@01)                    03S0693
*              CALL PREPULIN;       /* PLACE NEXT BLK ON NEXT LINE   */
         BAL   @14,PREPULIN                                     03S0694
*            END;                                               03S0695
         AL    INDEX,@CF00296                                   03S0695
@DE00692 CH    INDEX,MULTINBR                                   03S0695
         BNH   @DL00692                                         03S0695
@DC00692 DS    0H                                               03S0696
*           ELSE                    /* ONLY USER COUNT TO BE SHOWN   */
*            DO;                                                03S0696
         B     @RC00691                                         03S0696
@RF00691 DS    0H                                               03S0697
*              CVD(MULTINBR,FULLWORD); /* CONVERT # USERS TO DECIMAL */
         LH    @02,MULTINBR                                     03S0697
         CVD   @02,@TS00001                                     03S0697
         MVC   FULLWORD(4),@TS00001+4                           03S0697
*              FULLWORD = FULLWORD × '0000000F'X; /* PRINTABLE SIGN  */
         OC    FULLWORD(4),@CB02644                             03S0698
*              UNPK(UJOBNAME(1:3),FULLWORD); /* MAKE IT PRINTABLE    */
         LA    @02,DSPLLINE                                     03S0699
         UNPK  UJOBNAME(3,@02),FULLWORD(4)                      03S0699
*              DO INDEX=1 TO 2 BY 1 WHILE(UJOBNAME(INDEX:INDEX)='0');
         LA    INDEX,1                                          03S0700
@DL00700 LA    @15,DSPLLINE                                     03S0700
         LR    @14,@15                                          03S0700
         ALR   @14,INDEX                                        03S0700
         CLI   UJOBNAME-1(@14),C'0'                             03S0700
         BNE   @DC00700                                         03S0700
*                UJOBNAME(INDEX:INDEX) = ' '; /* BLANK LEADING ZERO  */
         ALR   @15,INDEX                                        03S0701
         MVI   UJOBNAME-1(@15),C' '                             03S0701
*              END;                                             03S0702
         AL    INDEX,@CF00296                                   03S0702
         C     INDEX,@CF00298                                   03S0702
         BNH   @DL00700                                         03S0702
@DC00700 DS    0H                                               03S0703
*              UJOBNAME(4:8) = 'USERS'; /* FINISH OFF INDICATION     */
         LA    @02,DSPLLINE                                     03S0703
         MVC   UJOBNAME+3(5,@02),@CC02660                       03S0703
*              IF UJOBNAME(1:2)='  ' THEN /* IF # IS A UNITS DIGIT   */
         CLC   UJOBNAME(2,@02),@CC02661                         03S0704
         BNE   @RF00704                                         03S0704
*                DO;                /* MOVE IT LEFT OF WORD, USERS   */
*                  UJOBNAME(2:2) = UJOBNAME(3:3); /* SHIFT IT NOW    */
         MVC   UJOBNAME+1(1,@02),UJOBNAME+2(@02)                03S0706
*                  UJOBNAME(3:3) = ' '; /* INSERT A BLANK NEXT       */
         MVI   UJOBNAME+2(@02),C' '                             03S0707
*                  IF UJOBNAME(2:2)='1' THEN /* IF ONLY 1 USER THEN  */
         CLI   UJOBNAME+1(@02),C'1'                             03S0708
         BNE   @RF00708                                         03S0708
*                    UJOBNAME(8:8) = ' '; /* INDICATE THE SINGULAR   */
         MVI   UJOBNAME+7(@02),C' '                             03S0709
*                  ELSE;                                        03S0710
@RF00708 DS    0H                                               03S0711
*                END;                                           03S0711
*              ELSE                 /* OTHERWISE AT LEAST 2 DIGITS   */
*                IF UJOBNAME(1:1)=' ' THEN /* IF ONLY 2 DIGITS       */
         B     @RC00704                                         03S0712
@RF00704 LA    @02,DSPLLINE                                     03S0712
         CLI   UJOBNAME(@02),C' '                               03S0712
         BNE   @RF00712                                         03S0712
*                  DO;              /* MOVE NUMBER LEFT OF 'USERS'   */
*                    UJOBNAME(1:2) = UJOBNAME(2:3); /* SHIFT LEFT 1  */
         MVC   @TS00001(2),UJOBNAME+1(@02)                      03S0714
         MVC   UJOBNAME(2,@02),@TS00001                         03S0714
*                    UJOBNAME(3:3) = ' '; /*INSERT BLANK BEFORE USERS*/
         MVI   UJOBNAME+2(@02),C' '                             03S0715
*                  END;                                         03S0716
*                ELSE;                                          03S0717
@RF00712 DS    0H                                               03S0718
*              CALL PREPULIN;       /* PLACE NEXT BLK ON NEXT LINE   */
@RC00704 BAL   @14,PREPULIN                                     03S0718
*            END;                                               03S0719
*          ELSE                     /* OTHERWISE ONLY 1 BLK THIS APUB*/
*            DO;                                                03S0720
         B     @RC00690                                         03S0720
@RF00690 DS    0H                                               03S0721
*              CALL PREPULIN;       /* PLACE NEXT BLK ON NEXT LINE   */
         BAL   @14,PREPULIN                                     03S0721
*            END;                                               03S0722
*        ELSE;                      /* UNITQLFY=FLASE - NO NEW ENTRY */
@RF00689 DS    0H                                               03S0724
*        IF LOOPING=TRUE THEN       /*IF STILL WORKING DOWN APUBCHAIN*/
@RC00689 TM    LOOPING,B'10000000'                              03S0724
         BNO   @RF00724                                         03S0724
*          DO;                                                  03S0725
*            IF (UCBNAME(3:3)='0' & (APUBUNLD=FALSE × APUBUNLD=TRUE &
*                APUBUNLP=TRUE) × UCBNAME(3:3)^='0') & APUBAPUB^=ZERO
*                THEN               /* IF THERE IS ANOTHER USER PORT */
         L     @02,UCBPTR                                       03S0726
         CLI   UCBNAME+2(@02),C'0'                              03S0726
         BNE   @GL00022                                         03S0726
         TM    APUBUNLD(APUBPTR),B'00100000'                    03S0726
         BZ    @GL00021                                         03S0726
         TM    APUBUNLD(APUBPTR),B'00100100'                    03S0726
         BO    @GL00021                                         03S0726
@GL00022 L     @02,UCBPTR                                       03S0726
         CLI   UCBNAME+2(@02),C'0'                              03S0726
         BE    @RF00726                                         03S0726
@GL00021 L     @02,APUBAPUB(,APUBPTR)                           03S0726
         LTR   @02,@02                                          03S0726
         BZ    @RF00726                                         03S0726
*              APUBPTR = APUBAPUB;  /* ADVANCE TO NEXT USER PORT     */
         LR    APUBPTR,@02                                      03S0727
*            ELSE                                               03S0728
*              IF UCBNAME(3:3)='0' & APUBMSTR^=ZERO THEN /* IF MSTR  */
         B     @RC00726                                         03S0728
@RF00726 L     @02,UCBPTR                                       03S0728
         CLI   UCBNAME+2(@02),C'0'                              03S0728
         BNE   @RF00728                                         03S0728
         L     @02,APUBMSTR(,APUBPTR)                           03S0728
         LTR   @02,@02                                          03S0728
         BZ    @RF00728                                         03S0728
*                APUBPTR = APUBMSTR; /* ADVANCE TO NEXT MASTER PORT  */
         LR    APUBPTR,@02                                      03S0729
*              ELSE                                             03S0730
*                IF UCBNAME(3:3)^='0' & APUBAPUB=ZERO & APUBMSTR->
*                    APUBMSTR^=ZERO THEN /* IF USER PORT SHOWS MSTR  */
         B     @RC00728                                         03S0730
@RF00728 L     @02,UCBPTR                                       03S0730
         CLI   UCBNAME+2(@02),C'0'                              03S0730
         BE    @RF00730                                         03S0730
         SLR   @02,@02                                          03S0730
         C     @02,APUBAPUB(,APUBPTR)                           03S0730
         BNE   @RF00730                                         03S0730
         L     @01,APUBMSTR(,APUBPTR)                           03S0730
         L     @15,APUBMSTR(,@01)                               03S0730
         CR    @15,@02                                          03S0730
         BE    @RF00730                                         03S0730
*                  APUBPTR = APUBMSTR->APUBMSTR;/*ADV TO NEXT MASTER */
         LR    APUBPTR,@15                                      03S0731
*                ELSE               /* OTHERWISE THE SHOW IS OVER    */
*                  DO;                                          03S0732
         B     @RC00730                                         03S0732
@RF00730 DS    0H                                               03S0733
*                    LOOPING = FALSE;/* APUB TRAVERSAL IS ALL OVER   */
         NI    LOOPING,B'01111111'                              03S0733
*                    CALL UNITSOUT; /* ENSURE ENDLINE WTO IS SENT    */
         BAL   @14,UNITSOUT                                     03S0734
*                  END;                                         03S0735
*          END;                                                 03S0736
*        ELSE;                      /* LOOPING = FALSE               */
@RF00724 DS    0H                                               03S0738
*      END;                         /* END DO WHILE(LOOPING=TRUE)    */
@RC00724 DS    0H                                               03S0738
@DE00628 TM    LOOPING,B'10000000'                              03S0738
         BO    @DL00628                                         03S0738
*    END;                           /* END FOR APCTAPUB^=ZERO        */
*  ELSE                             /* APCTAPUB=ZERO - NO PORTS EXIST*/
*    DO;                                                        03S0740
         B     @RC00624                                         03S0740
@RF00624 DS    0H                                               03S0741
*      CALL NULLUNIT;               /* PREPARE MESSAGE OF NO PORTS   */
         BAL   @14,NULLUNIT                                     03S0741
*      DSPENDED = TRUE;             /* INDICATE THAT WTO'S ALL OVER  */
         OI    DSPENDED,B'10000000'                             03S0742
*      CALL DOTHEWTO;               /* OUTPUT THE NULL MESSAGE       */
         BAL   @14,DOTHEWTO                                     03S0743
*    END;                                                       03S0744
*                                   /* FREEMAIN NOT NEEDED           */
*    END;                                                       02S0745
*  ELSE;                                                        02S0746
@RF00577 DS    0H                                               02S0747
*  IF STOPDSPL=TRUE THEN            /* IF DISPLAY WAS TERMINATED     */
@RC00577 TM    STOPDSPL,B'10000000'                             02S0747
         BNO   @RF00747                                         02S0747
*    DO;                            /* LET THE OPERATOR KNOW         */
*      OFFSET#2 = 20;               /* 2ND VARIABLE IN IGT274I       */
         MVC   OFFSET#2(4),@CF00276                             02S0749
*      SIXCHARS = OPERUNIT;         /* OPERATION IS DISPLAY UNITS    */
         MVC   SIXCHARS(6),@CC02591                             02S0750
*      CALL APCVZDWT(IGT274I,OFFSET#1,APCTSSID,LENGTH(APCTSSID),
*          OFFSET#2,SIXCHARS,LENGTH(SIXCHARS)); /* CONSOLATION MSG   */
         LA    @04,@CF01063                                     02S0751
         ST    @04,@AL00001                                     02S0751
         LA    @04,OFFSET#1                                     02S0751
         ST    @04,@AL00001+4                                   02S0751
         LA    @04,APCTSSID(,APCTPTR)                           02S0751
         ST    @04,@AL00001+8                                   02S0751
         LA    @04,@CF00301                                     02S0751
         ST    @04,@AL00001+12                                  02S0751
         LA    @04,OFFSET#2                                     02S0751
         ST    @04,@AL00001+16                                  02S0751
         LA    @04,SIXCHARS                                     02S0751
         ST    @04,@AL00001+20                                  02S0751
         LA    @04,@CF00292                                     02S0751
         ST    @04,@AL00001+24                                  02S0751
         MVI   @AL00001+24,X'80'                                02S0751
         L     @15,APCTZDWT(,APCTPTR)                           02S0751
         LA    @01,@AL00001                                     02S0751
         BALR  @14,@15                                          02S0751
*    END;                                                       02S0752
*  ELSE;                                                        02S0753
@RF00747 DS    0H                                               02S0754
*          END;                                                 01S0754
*        CALL APCVZDDQ;             /* DEQUEUE FROM APUB CHAIN       */
@RC00397 L     @15,APCTZDDQ(,APCTPTR)                           01S0755
         BALR  @14,@15                                          01S0755
*        ENQDAPUB = FALSE;          /* INDICATE DEQUEUED FROM APUB'S */
         NI    ENQDAPUB,B'01111111'                             01S0756
*      END;                                                     01S0757
*    GENERATE  CODE                                             02S0758
*        REFS(D60STAEA)                                         02S0758
*        SETS(D60STAEA); /*            RESCIND OUTSTANDING IGTD60 STAE
@RC00367 DS    0H                                               02S0758
       IGTYSTAE  0,MF=(E,D60STAEA)
*RETURN41:                          /* USED BY STAE RETRY ROUTINE    */
*    RFY (R0P,R1P,R2P,R3P,R4P,R5P,R6P,R7P,R8P,R9P,              01S0759
*         R10P,R11P,R12P,R13P,R14P,R15P) RSTD;                  01S0759
RETURN41 DS    0H                                               01S0760
*      GENERATE CODE(NOP 0);        /* TO KEEP COMPILER HONEST       */
         NOP 0
*    RFY (R0P,R1P,R2P,R3P,R4P,R5P,R6P,R7P,R8P,R9P,              01S0761
*         R10P,R11P,R12P,R13P,R14P,R15P) UNRSTD;                01S0761
*    RETURN;                        /* RETURN TO CALLING PROGRAM     */
@EL00001 L     @13,4(,@13)                                      01S0762
@EF00001 L     @00,@SIZDATD                                     01S0762
         LR    @01,@06                                          01S0762
         IGTYFSV  R,LV=(0),A=(1)
@ER00001 LM    @14,@12,12(@13)                                  01S0762
         BR    @14                                              01S0762
*                                   /*                               */
*  END;                             /* END OF APCVZD60 PROCESSING    */
*  RFY APCTPTR RSTD;                /* ADD IN THE SUBROUTINES        */
*  RFY (APCTPTR,APCQPTR) RSTD;       /* HAVING LOST RESTRICTEDNESS   */
*DELMSCAN:                                                      03S0766
*  PROCEDURE;                                                   03S0766
DELMSCAN STM   @14,@03,12(@13)                                  03S0766
         STM   @05,@12,40(@13)                                  03S0766
*    CHRCOUNT = ZERO;               /* INIT DELIMITER OFFSET TO ZERO */
         SLR   CHRCOUNT,CHRCOUNT                                03S0767
*    DLMINDEX = ZERO;               /* IN THE EVENT NO DLMTR FOUND   */
         MVI   DLMINDEX,X'00'                                   03S0768
*    DO SCANOFST=ZERO TO PLENLEFT-PARMLEN-1 BY 1 WHILE(CHRCOUNT=ZERO);
         SLR   @02,@02                                          03S0769
         STH   @02,SCANOFST                                     03S0769
         B     @DE00769                                         03S0769
@DL00769 LTR   CHRCOUNT,CHRCOUNT                                03S0769
         BNZ   @DC00769                                         03S0769
*      DO INDEX=1 TO DLMCOUNT BY 1; /* CHECK AGAINST EACH DELIMITER  */
         LA    INDEX,1                                          03S0770
         B     @DE00770                                         03S0770
@DL00770 DS    0H                                               03S0771
*        IF  APCQCMND(CMNDPSTR+PARMLEN+SCANOFST:CMNDPSTR+PARMLEN+
*            SCANOFST)=DELIMITR(INDEX) THEN /* IF A MATCH FOUND      */
         LH    @15,SCANOFST                                     03S0771
         LR    @14,CMNDPSTR                                     03S0771
         AH    @14,PARMLEN                                      03S0771
         ALR   @14,@15                                          03S0771
         ALR   @14,APCQPTR                                      03S0771
         LA    @01,DELIMITR-1(INDEX)                            03S0771
         CLC   APCQCMND-1(1,@14),0(@01)                         03S0771
         BNE   @RF00771                                         03S0771
*          DO;                                                  03S0772
*            CHRCOUNT = SCANOFST;   /* MEASURE LENGTH OF FIELD       */
         LR    CHRCOUNT,@15                                     03S0773
*            DLMINDEX = INDEX;      /* SECURE INDEX TO DELIMITER     */
         STC   INDEX,DLMINDEX                                   03S0774
*          END;                                                 03S0775
*        ELSE;                      /* NO MATCH                      */
@RF00771 DS    0H                                               03S0777
*      END;                                                     03S0777
         AL    INDEX,@CF00296                                   03S0777
@DE00770 SLR   @15,@15                                          03S0777
         IC    @15,DLMCOUNT                                     03S0777
         CR    INDEX,@15                                        03S0777
         BNH   @DL00770                                         03S0777
*    END;                                                       03S0778
         LA    @02,1                                            03S0778
         AH    @02,SCANOFST                                     03S0778
         STH   @02,SCANOFST                                     03S0778
@DE00769 LH    @15,PLENLEFT                                     03S0778
         SH    @15,PARMLEN                                      03S0778
         BCTR  @15,0                                            03S0778
         CR    @02,@15                                          03S0778
         BNH   @DL00769                                         03S0778
@DC00769 DS    0H                                               03S0779
*    IF CHRCOUNT=ZERO & DLMINDEX=ZERO THEN /* IF NO DELIMITER FOUND  */
         LTR   CHRCOUNT,CHRCOUNT                                03S0779
         BNZ   @RF00779                                         03S0779
         CLI   DLMINDEX,0                                       03S0779
         BNE   @RF00779                                         03S0779
*      DO;                          /* FIELD CNSISTS OF ALL LAST CHRS*/
*        CHRCOUNT = PLENLEFT - PARMLEN; /* SET CHRCOUNT TO # LEFT    */
         LH    CHRCOUNT,PLENLEFT                                03S0781
         SH    CHRCOUNT,PARMLEN                                 03S0781
*        DLMINDEX = 2;              /* ASSUME BLANK AT END OF TEXT   */
         MVI   DLMINDEX,X'02'                                   03S0782
*      END;                                                     03S0783
*    ELSE;                                                      03S0784
@RF00779 DS    0H                                               03S0785
*  END DELMSCAN;                                                03S0785
@EL00002 DS    0H                                               03S0785
@EF00002 DS    0H                                               03S0785
@ER00002 LM    @14,@03,12(@13)                                  03S0785
         LM    @05,@12,40(@13)                                  03S0785
         BR    @14                                              03S0785
*DOTHEWTO:                                                      03S0786
*  PROCEDURE;                                                   03S0786
DOTHEWTO STM   @14,@12,@SA00003                                 03S0786
*    RFY (R0F,R1P) RSTD;            /* SECURE INPUT PARAMETER REG'S  */
*    R0F = MLWTOID;                 /* PLACE WTO ID IN REG 0         */
         L     R0F,MLWTOID                                      03S0788
*    IF DISPACTV=TRUE THEN          /* IF DISPLAY ACTIVE IS THE CMND */
         TM    DISPACTV,B'10000000'                             03S0789
         BNO   @RF00789                                         03S0789
*      R1P = ADDR(ACTVAREA);        /* THEN LINES ARE IN ACTIVE AREA */
         LA    R1P,DATAAREA                                     03S0790
*    ELSE                           /* ELSE DISPLAY UNITS WAS CMND   */
*      R1P = ADDR(UNITAREA);        /* SO LINES ARE IN UNITS AREA    */
         B     @RC00789                                         03S0791
@RF00789 LA    R1P,DATAAREA                                     03S0791
*    RFY (R0F,R1P) UNRSTD;          /* GIVE BACK INITIALIZED REGS    */
@RC00789 DS    0H                                               03S0793
*    GENERATE  CODE                                             03S0793
*        REFS(R0F,R1P)                                          03S0793
*        SETS(R1P,R15F);            /*                          03S0793
       WTO   MF=(E,(1))
*    RFY R15F RSTD;                 /* SECURE RETURN CODE REGISTER   */
*    IF R15F>=8 THEN                /* IF AN ERROR OCCURRED          */
         C     R15F,@CF00307                                    03S0795
         BL    @RF00795                                         03S0795
*      DO;                                                      03S0796
*        STOPDSPL = TRUE;           /* ARRANGE TO TERMINATE DISPLAY  */
         OI    STOPDSPL,B'10000000'                             03S0797
*      END;                                                     03S0798
*    ELSE;                          /* OTHERWISE, NO TERMINAL ERROR  */
@RF00795 DS    0H                                               03S0800
*    RFY R15F UNRSTD;               /* GIVE BACK THE RETURN CODE REG */
*  END DOTHEWTO;                                                03S0801
@EL00003 DS    0H                                               03S0801
@EF00003 DS    0H                                               03S0801
@ER00003 LM    @14,@12,@SA00003                                 03S0801
         BR    @14                                              03S0801
*HEXCHECK:                                                      03S0802
*  PROCEDURE;                                                   03S0802
HEXCHECK STM   @14,@12,12(@13)                                  03S0802
*    DO INDEX=0 TO 2 BY 1 WHILE(CMDERROR=FALSE);/*EXAMINE UP TO 3 DGT*/
         SLR   INDEX,INDEX                                      03S0803
@DL00803 TM    CMDERROR,B'10000000'                             03S0803
         BNZ   @DC00803                                         03S0803
*      TESTCHAR = APCQCMND(CMNDPSTR+PARMLEN+INDEX:CMNDPSTR+PARMLEN
*          +INDEX);                 /* ISOLATE CHAR OF INTEREST      */
         LR    @04,CMNDPSTR                                     03S0804
         AH    @04,PARMLEN                                      03S0804
         ALR   @04,INDEX                                        03S0804
         ALR   @04,APCQPTR                                      03S0804
         MVC   TESTCHAR(1),APCQCMND-1(@04)                      03S0804
*      IF (TESTCHAR<'0' × TESTCHAR>'9') &                       03S0805
*         (TESTCHAR<'A' × TESTCHAR>'F') THEN /* DIGIT IS NON-HEXADEC */
         CLI   TESTCHAR,C'0'                                    03S0805
         BL    @GL00029                                         03S0805
         CLI   TESTCHAR,C'9'                                    03S0805
         BNH   @RF00805                                         03S0805
@GL00029 CLI   TESTCHAR,C'A'                                    03S0805
         BL    @RT00805                                         03S0805
         CLI   TESTCHAR,C'F'                                    03S0805
         BNH   @RF00805                                         03S0805
@RT00805 DS    0H                                               03S0806
*        DO;                                                    03S0806
*          CMDERROR = TRUE;         /* SO INDICATE ERROR IN COMMAND  */
         OI    CMDERROR,B'10000000'                             03S0807
*        END;                                                   03S0808
*      ELSE;                                                    03S0809
@RF00805 DS    0H                                               03S0810
*    END;                                                       03S0810
         AL    INDEX,@CF00296                                   03S0810
         C     INDEX,@CF00298                                   03S0810
         BNH   @DL00803                                         03S0810
@DC00803 DS    0H                                               03S0811
*  END HEXCHECK;                                                03S0811
@EL00004 DS    0H                                               03S0811
@EF00004 DS    0H                                               03S0811
@ER00004 LM    @14,@12,12(@13)                                  03S0811
         BR    @14                                              03S0811
*IDVERIFY:                                                      03S0812
*  PROCEDURE;                                                   03S0812
IDVERIFY STM   @14,@12,@SA00005                                 03S0812
*    RFY R2P RSTD;                  /* REG 2 USED FOR XSA ADDRESS    */
*    R2P = XSAPTR;                  /* SET ADDR INTO REG 2 FOR CALL  */
         L     R2P,XSAPTR                                       03S0814
*    CALL IEE7603D;                 /* CALL FOR ID VERIFICATION      */
         L     @15,ADDR7603                                     03S0815
         BALR  @14,@15                                          03S0815
*    RFY R2P UNRSTD;                /* ALL DONE WITH REG 2           */
*    RFY R15F RSTD;                 /* RETURN CODE IS IN REG 15      */
*    IF R15F<8 THEN;                /* GOOD ID'S - PROCEED W/DISPLAY */
         C     R15F,@CF00307                                    03S0818
         BL    @RT00818                                         03S0818
*    ELSE                                                       03S0820
*      IF R15F=12 THEN              /* IF RC=12 THEN CID WAS BAD     */
         C     R15F,@CF00105                                    03S0820
         BNE   @RF00820                                         03S0820
*        DO;                                                    03S0821
*          CIDERROR = TRUE;         /* NOTE BAD CONSOLE ID           */
         OI    CIDERROR,B'10000000'                             03S0822
*          CMDERROR = TRUE;         /* NOTE COMMAND ERROR            */
         OI    CMDERROR,B'10000000'                             03S0823
*        END;                                                   03S0824
*      ELSE                                                     03S0825
*        DO;                                                    03S0825
         B     @RC00820                                         03S0825
@RF00820 DS    0H                                               03S0826
*          AIDERROR = TRUE;         /* NOTE BAD AREA ID              */
         OI    AIDERROR,B'10000000'                             03S0826
*          CMDERROR = TRUE;         /* NOTE COMMAND ERROR            */
         OI    CMDERROR,B'10000000'                             03S0827
*        END;                                                   03S0828
*    RFY R15F UNRSTD;               /* ALL DONE WITH RETURN CODE     */
*  END IDVERIFY;                                                03S0830
@EL00005 DS    0H                                               03S0830
@EF00005 DS    0H                                               03S0830
@ER00005 LM    @14,@12,@SA00005                                 03S0830
         BR    @14                                              03S0830
*NULLACTV:                                                      03S0831
*  PROCEDURE;                                                   03S0831
NULLACTV STM   @14,@12,12(@13)                                  03S0831
*    WPLPTR = ADDR(ACTVAREA);       /* POINT TO MSGAREA              */
         LA    @04,DATAAREA                                     03S0832
         ST    @04,WPLPTR                                       03S0832
*    WPLLGH = 4 + LINELENA;         /* LENGTH OF NULL MESSAGE WPL    */
         MVC   WPLLGH(2,@04),@CH00254                           03S0833
*    WPLMCSF = '0040'X;             /* INDICATES MLWTO               */
         MVC   WPLMCSF(2,@04),@CB02647                          03S0834
*    WPLTXT(1:ABLK1CL1-1) = '';     /* CLEAR LEFT COL'S              */
         MVI   WPLTXT(@04),C' '                                 03S0835
         MVI   WPLTXT+1(@04),C' '                               03S0835
*    IF DVACOUNT=ZERO × APCTAPDS=ZERO THEN/*NO RANGE DISQUALIFICATION*/
         SLR   @04,@04                                          03S0836
         CH    @04,DVACOUNT                                     03S0836
         BE    @RT00836                                         03S0836
         C     @04,APCTAPDS(,APCTPTR)                           03S0836
         BNE   @RF00836                                         03S0836
@RT00836 DS    0H                                               03S0837
*      DO;                                                      03S0837
*        WPLTXT(ABLK1CL1:ABLK1CL1+LENGTH(NULLAMG1)-1) = NULLAMG1; /* */
         L     @04,WPLPTR                                       03S0838
         MVC   WPLTXT+2(21,@04),@CC02575                        03S0838
*        WPLTXT(ABLK1CL1+LENGTH(NULLAMG1):ABLK1CL1+LENGTH(NULLAMG1)-1+
*            LENGTH(APCTSSID)) = APCTSSID; /* ADD SSID               */
         MVC   WPLTXT+23(4,@04),APCTSSID(APCTPTR)               03S0839
*        WPLTXT(ABLK1CL1+LENGTH(NULLAMG1)+LENGTH(APCTSSID):LINELENA) =
*            '';                    /* CLEAR OUT REST OF HEADING     */
         MVI   WPLTXT+27(@04),C' '                              03S0840
         MVC   WPLTXT+28(42,@04),WPLTXT+27(@04)                 03S0840
*      END;                                                     03S0841
*    ELSE                           /* COMMAND INCLUDED DV ADDRESSES */
*      DO;                                                      03S0842
         B     @RC00836                                         03S0842
@RF00836 DS    0H                                               03S0843
*        WPLTXT(ABLK1CL1:ABLK1CL1+LENGTH(NULLAMG2)-1) = NULLAMG2; /* */
         L     @04,WPLPTR                                       03S0843
         MVC   WPLTXT+2(38,@04),@CC02578                        03S0843
*        WPLTXT(ABLK1CL1+LENGTH(NULLAMG2):LINELENA) = ''; /* CLEAR IT*/
         MVI   WPLTXT+40(@04),C' '                              03S0844
         MVC   WPLTXT+41(29,@04),WPLTXT+40(@04)                 03S0844
*      END;                                                     03S0845
*    WPLPTR = WPLPTR + WPLLGH;      /* ADV TO WPLLS01                */
@RC00836 L     @04,WPLPTR                                       03S0846
         LH    @15,WPLLGH(,@04)                                 03S0846
         ALR   @15,@04                                          03S0846
         ST    @15,WPLPTR                                       03S0846
*    WPLLTF = '3000'X;              /* DATA LINE & END LINE          */
         MVC   WPLLTF(2,@15),@CB02651                           03S0847
*    WPLAREA = XASDID;              /* MOVE IN AREA ID               */
         L     @04,XSAPTR                                       03S0848
         MVC   WPLAREA(1,@15),XASDID+32(@04)                    03S0848
*    WPLLINES = 1;                  /* ACTUAL NO. OF DATA LINES      */
         MVI   WPLLINES(@15),X'01'                              03S0849
*  END NULLACTV;                                                03S0850
@EL00006 DS    0H                                               03S0850
@EF00006 DS    0H                                               03S0850
@ER00006 LM    @14,@12,12(@13)                                  03S0850
         BR    @14                                              03S0850
*NULLUNIT:                                                      03S0851
*  PROCEDURE;                                                   03S0851
NULLUNIT STM   @14,@12,12(@13)                                  03S0851
*    WPLPTR = ADDR(UNITAREA);       /* POINT TO MSGAREA              */
         LA    @04,DATAAREA                                     03S0852
         ST    @04,WPLPTR                                       03S0852
*    WPLLGH = 4 + LINELENU;         /* LENGTH OF NULL MESSAGE WPL    */
         MVC   WPLLGH(2,@04),@CH00254                           03S0853
*    WPLMCSF = '0040'X;             /* DENOTES A MLWTO               */
         MVC   WPLMCSF(2,@04),@CB02647                          03S0854
*    WPLTXT(1:LINELENU) = '';       /* CLEAR OUT REST OF LINE        */
         MVI   WPLTXT(@04),C' '                                 03S0855
         MVC   WPLTXT+1(69,@04),WPLTXT(@04)                     03S0855
*    IF DVACOUNT=ZERO × APCTAPUB=ZERO THEN /* NULL NOT DUE TO RANGES */
         SLR   @04,@04                                          03S0856
         CH    @04,DVACOUNT                                     03S0856
         BE    @RT00856                                         03S0856
         C     @04,APCTAPUB(,APCTPTR)                           03S0856
         BNE   @RF00856                                         03S0856
@RT00856 DS    0H                                               03S0857
*      DO;                                                      03S0857
*        WPLTXT(UBLK1CL1:UBLK1CL1+LENGTH(NULLUMG1)-1) = NULLUMG1; /* */
         L     @04,WPLPTR                                       03S0858
         MVC   WPLTXT+2(22,@04),@CC02582                        03S0858
*        WPLTXT(UBLK1CL1+LENGTH(NULLUMG1):UBLK1CL1+LENGTH(NULLUMG1)
*            +LENGTH(APCTSSID)-1) = APCTSSID; /* INSERT SUBSYS ID    */
         MVC   WPLTXT+24(4,@04),APCTSSID(APCTPTR)               03S0859
*        WPLTXT(UBLK1CL1+LENGTH(NULLUMG1)+LENGTH(APCTSSID):LINELENU) =
*            '';                    /* CLEAR OUT REST OF LINE        */
         MVI   WPLTXT+28(@04),C' '                              03S0860
         MVC   WPLTXT+29(41,@04),WPLTXT+28(@04)                 03S0860
*      END;                                                     03S0861
*    ELSE                           /* ADDRESS RANGES USED           */
*      DO;                                                      03S0862
         B     @RC00856                                         03S0862
@RF00856 DS    0H                                               03S0863
*        WPLTXT(UBLK1CL1:UBLK1CL1+LENGTH(NULLUMG2)-1) = NULLUMG2; /* */
         L     @04,WPLPTR                                       03S0863
         MVC   WPLTXT+2(27,@04),@CC02585                        03S0863
*        WPLTXT(UBLK1CL1+LENGTH(NULLUMG2):LINELENU) = ''; /* CLEAR IT*/
         MVI   WPLTXT+29(@04),C' '                              03S0864
         MVC   WPLTXT+30(40,@04),WPLTXT+29(@04)                 03S0864
*      END;                                                     03S0865
*    WPLPTR = WPLPTR + WPLLGH;      /* ADVANCE TO WPLLS01            */
@RC00856 L     @04,WPLPTR                                       03S0866
         LH    @15,WPLLGH(,@04)                                 03S0866
         ALR   @15,@04                                          03S0866
         ST    @15,WPLPTR                                       03S0866
*    WPLLTF = '3000'X;              /* BOTH A DATA LINE & AN END LINE*/
         MVC   WPLLTF(2,@15),@CB02651                           03S0867
*    WPLAREA = XASDID;              /* MOVE IN AREA ID               */
         L     @04,XSAPTR                                       03S0868
         MVC   WPLAREA(1,@15),XASDID+32(@04)                    03S0868
*    WPLLINES = 1;                  /* ACTUAL NO. OF DATA LINES      */
         MVI   WPLLINES(@15),X'01'                              03S0869
*  END NULLUNIT;                                                03S0870
@EL00007 DS    0H                                               03S0870
@EF00007 DS    0H                                               03S0870
@ER00007 LM    @14,@12,12(@13)                                  03S0870
         BR    @14                                              03S0870
*PREPULIN:                                                      03S0871
*  PROCEDURE;                                                   03S0871
PREPULIN STM   @14,@02,@SA00008                                 03S0871
         STM   @05,@12,@SA00008+20                              03S0871
*    IF LINCOUNT=ZERO THEN          /* IF WORKING ON 1ST OF 10 LINES */
         SLR   @02,@02                                          03S0872
         CR    LINCOUNT,@02                                     03S0872
         BNE   @RF00872                                         03S0872
*      IF BLKCOUNT=ZERO THEN        /* IF THIS IS 1ST BLK ON 1ST LINE*/
         CR    BLKCOUNT,@02                                     03S0873
         BNE   @RF00873                                         03S0873
*        DO;                                                    03S0874
*          WPLPTR = ADDR(UNITAREA); /* POINT TO MSG AREA             */
         LA    @02,DATAAREA                                     03S0875
         ST    @02,WPLPTR                                       03S0875
*          WPLLGH = 4 + LINELENU;   /* LENGTH OF THIS WPL            */
         MVC   WPLLGH(2,@02),@CH00254                           03S0876
*          WPLMCSF = '0040'X;       /* INDICATE MLWTO                */
         MVC   WPLMCSF(2,@02),@CB02647                          03S0877
*          WPLTXT(1:LINELENU) = ''; /* CLEAR OUT REST OF LINE        */
         MVI   WPLTXT(@02),C' '                                 03S0878
         MVC   WPLTXT+1(69,@02),WPLTXT(@02)                     03S0878
*          WPLTXT(UBLK1CL1:UBLK1CL1+UBLKLEN-1) = UNITSTXT; /*MOVE TXT*/
         LA    @15,DSPLLINE                                     03S0879
         MVC   WPLTXT+2(30,@02),UNITSTXT(@15)                   03S0879
*          BLKCOUNT = 1;            /* INDICATE 1 BLOCK NOW IN LINE  */
         LA    BLKCOUNT,1                                       03S0880
*        END;                                                   03S0881
*      ELSE                         /* BLKCOUNT=1 SO FINISH 1ST LINE */
*        DO;                                                    03S0882
         B     @RC00873                                         03S0882
@RF00873 DS    0H                                               03S0883
*          WPLTXT(UBLK2CL1:UBLK2CL1+UBLKLEN-1) = UNITSTXT; /*MOVE TXT*/
         L     @02,WPLPTR                                       03S0883
         LA    @15,DSPLLINE                                     03S0883
         MVC   WPLTXT+40(30,@02),UNITSTXT(@15)                  03S0883
*          WPLPTR = WPLPTR + WPLLGH; /* MOVE ON TO THE WPLLS01       */
         LH    @15,WPLLGH(,@02)                                 03S0884
         ALR   @15,@02                                          03S0884
         ST    @15,WPLPTR                                       03S0884
*          WPLLTF = '2000'X;        /* INDICATE IT WAS A DATA LINE   */
         MVC   WPLLTF(2,@15),@CB02648                           03S0885
*          WPLAREA = XASDID;        /* MOVE IN AREA ID               */
         L     @02,XSAPTR                                       03S0886
         MVC   WPLAREA(1,@15),XASDID+32(@02)                    03S0886
*                                   /* WPLLINES WILL BE FILLED LATER */
*          WPLPTR = WPLPTR + LENGTH(WPLLS01); /* POINT TO WPLML      */
         AL    @15,@CF00301                                     03S0887
         ST    @15,WPLPTR                                       03S0887
*          BLKCOUNT = ZERO;         /* DONE WITH THAT LINE           */
         SLR   BLKCOUNT,BLKCOUNT                                03S0888
*          LINCOUNT = 1;            /* ONE LINE NOW COMPLETE         */
         LA    LINCOUNT,1                                       03S0889
*        END;                                                   03S0890
*    ELSE                           /* LINCOUNT ALREADY > ZERO       */
*      IF BLKCOUNT=ZERO THEN        /* IF THIS IS 1ST BLOCK          */
         B     @RC00872                                         03S0891
@RF00872 C     BLKCOUNT,@CF00041                                03S0891
         BNE   @RF00891                                         03S0891
*        DO;                        /* WPLPTR ALREADY SET TO WPLML   */
*          WPLML0 = ZERO;           /* THIS DUDE ALWAYS SET TO ZERO  */
         L     @02,WPLPTR                                       03S0893
         MVI   WPLML0(@02),X'00'                                03S0893
*          WPLMLLEN = 4 + LINELENU; /* LENGTH OF THIS WPLML          */
         MVI   WPLMLLEN(@02),X'4A'                              03S0894
*          WPLMLLTF = '2000'X;       /* DENOTES A DATA LINE          */
         MVC   WPLMLLTF(2,@02),@CB02648                         03S0895
*          WPLMLTXT(1:LINELENU) = ''; /* CLEAR OUT REST OF LINE      */
         MVI   WPLMLTXT(@02),C' '                               03S0896
         MVC   WPLMLTXT+1(69,@02),WPLMLTXT(@02)                 03S0896
*          WPLMLTXT(UBLK1CL1:UBLK1CL1+UBLKLEN-1) = UNITSTXT; /* 1ST  */
         LA    @15,DSPLLINE                                     03S0897
         MVC   WPLMLTXT+2(30,@02),UNITSTXT(@15)                 03S0897
*          BLKCOUNT = 1;            /* 1ST BLOCK NOW IN PLACE        */
         LA    BLKCOUNT,1                                       03S0898
*        END;                                                   03S0899
*      ELSE                         /* 2ND BLOCK,TO COMPLETE THE LINE*/
*        DO;                                                    03S0900
         B     @RC00891                                         03S0900
@RF00891 DS    0H                                               03S0901
*          WPLMLTXT(UBLK2CL1:UBLK2CL1+UBLKLEN-1) = UNITSTXT; /*  END */
         L     @02,WPLPTR                                       03S0901
         LA    @15,DSPLLINE                                     03S0901
         MVC   WPLMLTXT+40(30,@02),UNITSTXT(@15)                03S0901
*          WPLPTR = WPLPTR + WPLMLLEN; /* ADVANCE TO NEXT LINE       */
         SLR   @15,@15                                          03S0902
         IC    @15,WPLMLLEN(,@02)                               03S0902
         ALR   @15,@02                                          03S0902
         ST    @15,WPLPTR                                       03S0902
*          BLKCOUNT = ZERO;         /* RESET COUNT TO BEGIN NEXT LINE*/
         SLR   BLKCOUNT,BLKCOUNT                                03S0903
*          LINCOUNT = LINCOUNT + 1; /* INCREMENT COUNT OF LINES      */
         LA    LINCOUNT,1(,LINCOUNT)                            03S0904
*        END;                                                   03S0905
*    IF LINCOUNT=10 THEN            /* IF 10 LINES ALREADY PREPARED  */
@RC00891 DS    0H                                               03S0906
@RC00872 C     LINCOUNT,@CF00099                                03S0906
         BNE   @RF00906                                         03S0906
*      CALL UNITSOUT;               /* HAVE THEM WTO'ED              */
         BAL   @14,UNITSOUT                                     03S0907
*    ELSE;                                                      03S0908
@RF00906 DS    0H                                               03S0909
*  END PREPULIN;                                                03S0909
@EL00008 DS    0H                                               03S0909
@EF00008 DS    0H                                               03S0909
@ER00008 LM    @14,@02,@SA00008                                 03S0909
         LM    @05,@12,@SA00008+20                              03S0909
         BR    @14                                              03S0909
*STAERTRY:                                                      03S0910
* PROCEDURE;                                                    03S0910
STAERTRY STM   @14,@12,@SA00009                                 03S0910
*        /* THIS (E)STAE RETRY (CLEANUP) CODE SERVES, IN THE EVENT   */
*        /* OF AN ABNORMAL OCCURRENCE IN IGTD60, TO NOTIFY WTO       */
*        /* ROUTINES THAT THE DISPLAY IS ENDED (IF NOT ALREADY NOTI- */
*        /* FIED), AND TO NOTIFY THE OPERATOR THAT THE DISPLAY HAS   */
*        /* CEASED.                                                  */
*  DO;                                                          03S0911
*    RFY (R0P,R1P,R2P,R3P,R4P,R5P,R6P,R7P,R8P,R9P,              03S0912
*         R10P,R11P,R12P,R13P,R14P,R15P) RSTD;                  03S0912
*      GENERATE CODE(NOP 0);        /* TO KEEP COMPILER HONEST       */
         NOP 0
*    RFY (R0P,R1P,R2P,R3P,R4P,R5P,R6P,R7P,R8P,R9P,              03S0914
*         R10P,R11P,R12P,R13P,R14P,R15P) UNRSTD;                03S0914
*    ERSNCODE = '04';               /* SET ERROR CODE FOR MESSAGE    */
         MVC   ERSNCODE(2),@CC02702                             03S0915
*    OFFSET#2 = 72;                 /* SET OFFSET FOR ERROR CODE     */
         MVC   OFFSET#2(4),@CF00241                             03S0916
*    CALL APCVZDWT(IGT276I,OFFSET#1,APCTSSID,LENGTH(APCTSSID),  03S0917
*        OFFSET#2,ERSNCODE,LENGTH(ERSNCODE)); /* WTO ERROR MESSAGE   */
         LA    @04,@CF01067                                     03S0917
         ST    @04,@AL00001                                     03S0917
         LA    @04,OFFSET#1                                     03S0917
         ST    @04,@AL00001+4                                   03S0917
         LA    @04,APCTSSID(,APCTPTR)                           03S0917
         ST    @04,@AL00001+8                                   03S0917
         LA    @04,@CF00301                                     03S0917
         ST    @04,@AL00001+12                                  03S0917
         LA    @04,OFFSET#2                                     03S0917
         ST    @04,@AL00001+16                                  03S0917
         LA    @04,ERSNCODE                                     03S0917
         ST    @04,@AL00001+20                                  03S0917
         LA    @04,@CF00298                                     03S0917
         ST    @04,@AL00001+24                                  03S0917
         MVI   @AL00001+24,X'80'                                03S0917
         L     @15,APCTZDWT(,APCTPTR)                           03S0917
         LA    @01,@AL00001                                     03S0917
         BALR  @14,@15                                          03S0917
*                    /* NOW CLEAN UP AND GET OUT                     */
*    IF ENQDAPUB=TRUE THEN          /* IF STILL ENQUEUED ON APUB CHN */
         TM    ENQDAPUB,B'10000000'                             03S0918
         BNO   @RF00918                                         03S0918
*      DO;                                                      03S0919
*        CALL APCVZDDQ;             /* DEQUEUE FROM APUB CHAIN       */
         L     @15,APCTZDDQ(,APCTPTR)                           03S0920
         BALR  @14,@15                                          03S0920
*        ENQDAPUB = FALSE;          /* THE DEED HAS FINALLY BEEN DONE*/
         NI    ENQDAPUB,B'01111111'                             03S0921
*      END;                                                     03S0922
*    ELSE;                                                      03S0923
@RF00918 DS    0H                                               03S0924
*    IF DSPBEGUN=TRUE & DSPENDED=FALSE THEN /* IF SVC35 STILL HANGING*/
         TM    DSPBEGUN,B'10000000'                             03S0924
         BNO   @RF00924                                         03S0924
         TM    DSPENDED,B'10000000'                             03S0924
         BNZ   @RF00924                                         03S0924
*      DO;                                                      03S0925
*                        WPLPTR = ADDR(ACTVAREA);/* PT TO MSGAREA    */
         LA    @04,DATAAREA                                     03S0926
         ST    @04,WPLPTR                                       03S0926
*                        WPLLGH = 4 + ZERO; /* THIS WILL BE NULL LINE*/
         LA    @15,4                                            03S0927
         STH   @15,WPLLGH(,@04)                                 03S0927
*                        WPLMCSF = '0040'X; /* DENOTES MLWTO         */
         MVC   WPLMCSF(2,@04),@CB02647                          03S0928
*                                   /* NO TEXT ON THE NULL END LINE  */
*                        WPLPTR = WPLPTR + WPLLGH;/* ADV TO WPLLS01  */
         ALR   @04,@15                                          03S0929
         ST    @04,WPLPTR                                       03S0929
*                        WPLLTF = '1000'X; /* MERELY AN END LINE     */
         MVC   WPLLTF(2,@04),@CB02650                           03S0930
*                        WPLAREA = XASDID; /* MOVE IN AREA ID        */
         L     @01,XSAPTR                                       03S0931
         MVC   WPLAREA(1,@04),XASDID+32(@01)                    03S0931
*                        WPLLINES = 1; /* ACTUAL NO. OF DATA LINES   */
         MVI   WPLLINES(@04),X'01'                              03S0932
*      END;                                                     03S0933
*    ELSE;                                                      03S0934
@RF00924 DS    0H                                               03S0935
*    RFY APCTPTR UNRSTD;                                        03S0935
*    GENERATE  CODE                                             04S0936
*        REFS(D60STAEA)                                         04S0936
*        SETS(D60STAEA); /*            RESCIND OUTSTANDING IGTD60 STAE
       IGTYSTAE  0,MF=(E,D60STAEA)
*  END;                             /* ABNORMAL RETURN TO IGTD41     */
* END STAERTRY;                                                 03S0938
@EL00009 DS    0H                                               03S0938
@EF00009 DS    0H                                               03S0938
@ER00009 LM    @14,@12,@SA00009                                 03S0938
         BR    @14                                              03S0938
*UNITSOUT:                                                      03S0939
*  PROCEDURE;                                                   03S0939
UNITSOUT STM   @14,@02,@SA00010                                 03S0939
         STM   @04,@12,@SA00010+20                              03S0939
*    IF LOOPING=FALSE THEN          /* THIS WILL BE FINAL WTO        */
         TM    LOOPING,B'10000000'                              03S0940
         BNZ   @RF00940                                         03S0940
*      DO;                                                      03S0941
*        IF LINCOUNT=ZERO THEN      /* IF NO LINES COMPLETED         */
         SLR   @12,@12                                          03S0942
         CR    LINCOUNT,@12                                     03S0942
         BNE   @RF00942                                         03S0942
*          IF BLKCOUNT=ZERO THEN    /* AND 1ST LINE NOT EVEN BEGUN   */
         CR    BLKCOUNT,@12                                     03S0943
         BNE   @RF00943                                         03S0943
*            IF LINESOUT=ZERO THEN  /* AND NO LINES PUT OUT AT ALL   */
         CH    @12,LINESOUT                                     03S0944
         BNE   @RF00944                                         03S0944
*              DO;                                              03S0945
*                CALL NULLUNIT;     /* PREPARE MESSAGE OF NO PORTS   */
         BAL   @14,NULLUNIT                                     03S0946
*              END;                 /* END OF NO LINES CASE          */
*            ELSE                   /* >=10 LINES PREVIOUSLY WTO'ED  */
*              DO;                  /* SO AN END LINE ONLY IS NEEDED */
         B     @RC00944                                         03S0948
@RF00944 DS    0H                                               03S0949
*                WPLPTR = ADDR(UNITAREA); /* POINT TO MSG AREA       */
         LA    @12,DATAAREA                                     03S0949
         ST    @12,WPLPTR                                       03S0949
*                WPLLGH = 4 + ZERO; /* THIS WILL BE A NULL LINE      */
         LA    @02,4                                            03S0950
         STH   @02,WPLLGH(,@12)                                 03S0950
*                WPLMCSF = '0040'X; /* INDICATES AN MLWTO            */
         MVC   WPLMCSF(2,@12),@CB02647                          03S0951
*                                   /* NO TEXT FOLLOWS FOR A NULL LIN*/
*                WPLPTR = WPLPTR + WPLLGH; /* MOVE ON TO WPLLS01     */
         ALR   @12,@02                                          03S0952
         ST    @12,WPLPTR                                       03S0952
*                WPLLTF = '1000'X;  /* MERELY AN END LINE            */
         MVC   WPLLTF(2,@12),@CB02650                           03S0953
*                WPLAREA = XASDID;  /* MOVE IN AREA ID               */
         L     @02,XSAPTR                                       03S0954
         MVC   WPLAREA(1,@12),XASDID+32(@02)                    03S0954
*                WPLLINES = 1;      /* ACTUAL NO. OF DATA LINES      */
         MVI   WPLLINES(@12),X'01'                              03S0955
*              END;                 /* END OF N*10 LINES CASE        */
*          ELSE                     /* BLKCOUNT>ZERO - FINISH 1ST LIN*/
*            DO;                    /* WHETHER LINESOUT = 0 OR ^= 0  */
         B     @RC00943                                         03S0957
@RF00943 DS    0H                                               03S0958
*              WPLPTR = WPLPTR + WPLLGH; /* ADVANCE TO WPLLS01       */
         L     @12,WPLPTR                                       03S0958
         LH    @02,WPLLGH(,@12)                                 03S0958
         ALR   @02,@12                                          03S0958
         ST    @02,WPLPTR                                       03S0958
*              WPLLTF = '3000'X;    /* BOTH A DATA LINE & AN END LINE*/
         MVC   WPLLTF(2,@02),@CB02651                           03S0959
*              WPLAREA = XASDID;    /* MOVE IN AREA ID               */
         L     @12,XSAPTR                                       03S0960
         MVC   WPLAREA(1,@02),XASDID+32(@12)                    03S0960
*              WPLLINES = 1;        /* ACTUAL NO. OF DATA LINES      */
         MVI   WPLLINES(@02),X'01'                              03S0961
*            END;                                               03S0962
*        ELSE                                                   03S0963
*          IF LINCOUNT=1 & BLKCOUNT=ZERO THEN /*IF 2ND LINE NOT BEGUN*/
         B     @RC00942                                         03S0963
@RF00942 C     LINCOUNT,@CF00296                                03S0963
         BNE   @RF00963                                         03S0963
         C     BLKCOUNT,@CF00041                                03S0963
         BNE   @RF00963                                         03S0963
*            DO;                                                03S0964
*              WPLPTR = WPLPTR - LENGTH(WPLLS01);/* BACK TO THE WPL  */
         L     @12,WPLPTR                                       03S0965
         SL    @12,@CF00301                                     03S0965
         ST    @12,WPLPTR                                       03S0965
*              WPLLTF = '3000'X;    /* DATA LINE AND ALSO END LINE   */
         MVC   WPLLTF(2,@12),@CB02651                           03S0966
*              WPLLINES = 1;        /* ACTUAL NO. OF DATA LINES      */
         MVI   WPLLINES(@12),X'01'                              03S0967
*            END;                                               03S0968
*          ELSE                     /* SOMEWHERE BEYOND 1ST LINE     */
*            DO;                                                03S0969
         B     @RC00963                                         03S0969
@RF00963 DS    0H                                               03S0970
*              IF BLKCOUNT=ZERO THEN /* IF NEW LINE NOT BEGUN        */
         C     BLKCOUNT,@CF00041                                03S0970
         BNE   @RF00970                                         03S0970
*                DO;                                            03S0971
*                  WPLPTR = WPLPTR - (4+LINELENU); /*BACK UP 1 WPLML */
         L     @12,WPLPTR                                       03S0972
         SL    @12,@CF00254                                     03S0972
         ST    @12,WPLPTR                                       03S0972
*                END;                                           03S0973
*              ELSE                 /* OTHERWISE, IN A PARTIAL LINE  */
*                DO;                                            03S0974
         B     @RC00970                                         03S0974
@RF00970 DS    0H                                               03S0975
*                  LINCOUNT = LINCOUNT + 1; /*ADD ON FOR PARTIAL LINE*/
         LA    LINCOUNT,1(,LINCOUNT)                            03S0975
*                END;                                           03S0976
*              WPLMLLTF = '3000'X;   /*LAST DATA LINE IS ALSO END LIN*/
@RC00970 L     @12,WPLPTR                                       03S0977
         MVC   WPLMLLTF(2,@12),@CB02651                         03S0977
*              WPLPTR = ADDR(UNITAREA) + ADDR(UNITAREA)->WPLLGH;
         LA    @12,DATAAREA                                     03S0978
         LH    @02,WPLLGH(,@12)                                 03S0978
         ALR   @02,@12                                          03S0978
         ST    @02,WPLPTR                                       03S0978
*                                   /* POINT TO THE WPLLS01          */
*              WPLLINES = LINCOUNT; /* INSERT ACTUAL NO. OF LINES    */
         STC   LINCOUNT,WPLLINES(,@02)                          03S0979
*            END;                                               03S0980
*        DSPENDED = TRUE;           /* INDICATE THAT WTO'S ALL OVER  */
@RC00963 DS    0H                                               03S0981
@RC00942 OI    DSPENDED,B'10000000'                             03S0981
*      END;                         /* END CODE FOR LOOPING=FALSE    */
*    ELSE                           /* LOOPING=TRUE, HENCE LINCOUNT  */
*      DO;                          /* = 10,& NOT KNOWN TO BE THE END*/
         B     @RC00940                                         03S0983
@RF00940 DS    0H                                               03S0984
*        WPLPTR = ADDR(UNITAREA) + ADDR(UNITAREA)->WPLLGH;/*PT TO S01*/
         LA    @12,DATAAREA                                     03S0984
         LH    @02,WPLLGH(,@12)                                 03S0984
         ALR   @02,@12                                          03S0984
         ST    @02,WPLPTR                                       03S0984
*        WPLLINES = 10;             /* INSERT ACTUAL NO. OF LINES    */
         MVI   WPLLINES(@02),X'0A'                              03S0985
*      END;                                                     03S0986
*    CALL DOTHEWTO;                 /* NOW ACTUALLY PERFORM THE WTO  */
@RC00940 BAL   @14,DOTHEWTO                                     03S0987
*    IF LOOPING=TRUE THEN           /* IF WTO'S STILL IN PROGRESS    */
         TM    LOOPING,B'10000000'                              03S0988
         BNO   @RF00988                                         03S0988
*      IF STOPDSPL=TRUE THEN        /* AND DISPLAY IS TO TERMINATE   */
         TM    STOPDSPL,B'10000000'                             03S0989
         BNO   @RF00989                                         03S0989
*        DO;                                                    03S0990
*          LOOPING = FALSE;         /* CEASE LOOPING                 */
         NI    LOOPING,B'01111111'                              03S0991
*          DSPENDED = TRUE;         /* NO MORE WTO'S TO BE ISSUED    */
         OI    DSPENDED,B'10000000'                             03S0992
*        END;                                                   03S0993
*      ELSE                         /* OTHERWISE, RESET COUNTERS     */
*        DO;                        /* AND CONTINUE                  */
         B     @RC00989                                         03S0994
@RF00989 DS    0H                                               03S0995
*          LINESOUT = LINESOUT + LINCOUNT; /* ADD ON LINES NOW WTO'ED*/
         LR    @12,LINCOUNT                                     03S0995
         AH    @12,LINESOUT                                     03S0995
         STH   @12,LINESOUT                                     03S0995
*          LINCOUNT = ZERO;         /* RESET FOR NEXT 10 LINES       */
         SLR   LINCOUNT,LINCOUNT                                03S0996
*        END;                                                   03S0997
*    ELSE;                          /* OTHERWISE, FINAL LINES NOW OUT*/
@RF00988 DS    0H                                               03S0999
*  END UNITSOUT;                                                03S0999
@EL00010 DS    0H                                               03S0999
@EF00010 DS    0H                                               03S0999
@ER00010 LM    @14,@02,@SA00010                                 03S0999
         LM    @04,@12,@SA00010+20                              03S0999
         BR    @14                                              03S0999
*USTATUS:                                                       03S1000
*  PROCEDURE;                                                   03S1000
USTATUS  STM   @14,@12,12(@13)                                  03S1000
*    IF UCBNAME(3:3)='0' & APUBUNLP=TRUE THEN/*IF MSTR UNLOAD PENDING*/
         L     @12,UCBPTR                                       03S1001
         CLI   UCBNAME+2(@12),C'0'                              03S1001
         BNE   @RF01001                                         03S1001
         TM    APUBUNLP(APUBPTR),B'00000100'                    03S1001
         BNO   @RF01001                                         03S1001
*      UNITSTXT(LENGTH(UCBNAME)+3:LENGTH(UCBNAME)+9) = 'UNLPDG ';
         LA    @12,DSPLLINE                                     03S1002
         MVC   UNITSTXT+5(7,@12),@CC02709                       03S1002
*    ELSE                                                       03S1003
*      IF UCBNAME(3:3)='0' & APUBUNLD=TRUE THEN/*IF MSTR WAS UNLOADED*/
         B     @RC01001                                         03S1003
@RF01001 L     @12,UCBPTR                                       03S1003
         CLI   UCBNAME+2(@12),C'0'                              03S1003
         BNE   @RF01003                                         03S1003
         TM    APUBUNLD(APUBPTR),B'00100000'                    03S1003
         BNO   @RF01003                                         03S1003
*        UNITSTXT(LENGTH(UCBNAME)+3:LENGTH(UCBNAME)+9) = 'UNLODD ';
         LA    @12,DSPLLINE                                     03S1004
         MVC   UNITSTXT+5(7,@12),@CC02710                       03S1004
*      ELSE                                                     03S1005
*        IF APUBDSBP=TRUE THEN      /* IF UNIT HAS DISABLE PENDING   */
         B     @RC01003                                         03S1005
@RF01003 TM    APUBDSBP(APUBPTR),B'00001000'                    03S1005
         BNO   @RF01005                                         03S1005
*          UNITSTXT(LENGTH(UCBNAME)+3:LENGTH(UCBNAME)+9) = 'DSBPDG ';
         LA    @12,DSPLLINE                                     03S1006
         MVC   UNITSTXT+5(7,@12),@CC02711                       03S1006
*        ELSE                                                   03S1007
*          IF APUBZRGN=TRUE × APUBDSBL=TRUE&UCBNAME(3:3)^='0' × 03S1007
*              APUBBERR=TRUE THEN   /* IF UNIT HAS BEEN DISABLED     */
         B     @RC01005                                         03S1007
@RF01005 TM    APUBZRGN(APUBPTR),B'10000000'                    03S1007
         BO    @RT01007                                         03S1007
         TM    APUBDSBL(APUBPTR),B'01000000'                    03S1007
         BNO   @GL00038                                         03S1007
         L     @12,UCBPTR                                       03S1007
         CLI   UCBNAME+2(@12),C'0'                              03S1007
         BNE   @RT01007                                         03S1007
@GL00038 TM    APUBBERR(APUBPTR),B'00010000'                    03S1007
         BNO   @RF01007                                         03S1007
@RT01007 DS    0H                                               03S1008
*            UNITSTXT(LENGTH(UCBNAME)+3:LENGTH(UCBNAME)+9) = 'DSABLD ';
         LA    @12,DSPLLINE                                     03S1008
         MVC   UNITSTXT+5(7,@12),@CC02712                       03S1008
*          ELSE                                                 03S1009
*            IF UCBNAME(3:3)='0' THEN   /* IF A MASTER PORT ENABLED  */
         B     @RC01007                                         03S1009
@RF01007 L     @12,UCBPTR                                       03S1009
         CLI   UCBNAME+2(@12),C'0'                              03S1009
         BNE   @RF01009                                         03S1009
*              UNITSTXT(LENGTH(UCBNAME)+3:LENGTH(UCBNAME)+9)='LOADED ';
         LA    @12,DSPLLINE                                     03S1010
         MVC   UNITSTXT+5(7,@12),@CC02713                       03S1010
*            ELSE                   /* OTHERWISE, USER PORT ENABLED  */
*              UNITSTXT(LENGTH(UCBNAME)+3:LENGTH(UCBNAME)+9)='ENABLD ';
         B     @RC01009                                         03S1011
@RF01009 LA    @12,DSPLLINE                                     03S1011
         MVC   UNITSTXT+5(7,@12),@CC02714                       03S1011
*  END USTATUS;                                                 03S1012
@EL00011 DS    0H                                               03S1012
@EF00011 DS    0H                                               03S1012
@ER00011 LM    @14,@12,12(@13)                                  03S1012
         BR    @14                                              03S1012
*WTOCNTRL:                                                      03S1013
*  PROCEDURE;                                                   03S1013
WTOCNTRL STM   @14,@12,@SA00012                                 03S1013
*                   /* OBTAIN DATE & TIME FOR DISPLAY IDENTIFICATION */
*    YEARDATE = '';                 /* INITIALIZE YEAR-DATE FIELD    */
         MVI   YEARDATE,C' '                                    03S1014
         MVC   YEARDATE+1(4),YEARDATE                           03S1014
*    HRMINSEC = '';                 /* INITIALIZE HOUR-MIN-SEC FIELD */
         MVI   HRMINSEC,C' '                                    03S1015
         MVC   HRMINSEC+1(6),HRMINSEC                           03S1015
*    RFY (R0F,R1F,R15F) RSTD;       /* ALL REGISTERS USED BY MACRO   */
*    GENERATE     CODE                                          03S1017
*        SETS(R0F,R1F,R15F)                                     03S1017
*        FLOWS(TIMERROR);           /*                          03S1017
     TIME   DEC,ERRET=TIMERROR
*    FULLWORD = R1F;                /* STORE YEAR & DATE FOR SS INSTR*/
         ST    R1F,FULLWORD                                     03S1018
*    UNPK(YEARDATE,FULLWORD);       /* UNPACK YEAR & DATE            */
         UNPK  YEARDATE(5),FULLWORD(4)                          03S1019
*    FULLWORD = R0F × '0000000F'X;  /* SET EBCDIC ZONE IN LOW 4 BITS */
         LR    @14,R0F                                          03S1020
         O     @14,@CF02644                                     03S1020
         ST    @14,FULLWORD                                     03S1020
*    UNPK(HRMINSEC,FULLWORD);       /* UNPACK TIME FROM FULLWORD     */
         UNPK  HRMINSEC(7),FULLWORD(4)                          03S1021
*    RFY (R0F,R1F,R15F) UNRSTD;     /* GIVE BACK REG'S 0 AND 1 AND 15*/
*TIMERROR: ;                        /* PRECEDING UNPACK'S ARE BYPASSD*/
TIMERROR DS    0H                                               03S1024
*                                   /* IN THE EVENT CLOCKS ARE DOWN  */
*    HOURS = HRMINSEC(1:2);         /* MOVE HOURS INTO MSG HEADING   */
         LA    @12,WTO2701A                                     03S1024
         LA    @04,4                                            03S1024
         ALR   @04,@12                                          03S1024
         MVC   HOURS(2,@04),HRMINSEC                            03S1024
*    MINUTES = HRMINSEC(3:4);       /* MOVE MINUTES INTO MSG HEADING */
         MVC   MINUTES(2,@04),HRMINSEC+2                        03S1025
*    SECONDS = HRMINSEC(5:6);       /* MOVE SECONDS INTO MSG HEADING */
         MVC   SECONDS(2,@04),HRMINSEC+4                        03S1026
*    MSGNMBR = 'IGT27 I';                                       03S1027
         MVC   MSGNMBR(7,@04),@CC02721                          03S1027
*    IF DISPACTV=TRUE THEN          /* IF DISPLAY ACTIVE WAS COMMAND */
         TM    DISPACTV,B'10000000'                             03S1028
         BNO   @RF01028                                         03S1028
*      DO;                                                      03S1029
*        MSGNMBR(6:6) = '0';        /* UNITS DIGIT FOR MSG #         */
         MVI   MSGNMBR+5(@04),C'0'                              03S1030
*        FUNCTION = 'ACTIVITY';     /* SET FUNCTION ON CONTROL LINE  */
         MVC   FUNCTION(8,@04),@CC02722                         03S1031
*        LABELINE(ABLK1CL1:ABLK1CL1+LENGTH(HEADINGA)-1) = HEADINGA;/**/
         AL    @12,@CF00201                                     03S1032
         MVC   LABELINE+2(18,@12),@CC02568                      03S1032
*        LABELINE(ABLK2CL1:ABLK2CL1+LENGTH(HEADINGA)-1) = HEADINGA;/**/
         MVC   LABELINE+27(18,@12),@CC02568                     03S1033
*        LABELINE(ABLK3CL1:LENGTH(LABELINE)) = HEADINGA; /*          */
         MVC   LABELINE+52(18,@12),@CC02568                     03S1034
*      END;                                                     03S1035
*    ELSE                           /* COMMAND MUST HAVE BEEN UNITS  */
*      DO;                                                      03S1036
         B     @RC01028                                         03S1036
@RF01028 DS    0H                                               03S1037
*        MSGNMBR(6:6) = '1';        /* UNITS DIGIT FOR MSG #         */
         LA    @12,WTO2701A                                     03S1037
         LA    @04,4                                            03S1037
         ALR   @04,@12                                          03S1037
         MVI   MSGNMBR+5(@04),C'1'                              03S1037
*        FUNCTION = 'UNITS';        /* SET FUNCTION ON CONTROL LINE  */
         MVI   FUNCTION+5(@04),C' '                             03S1038
         MVC   FUNCTION+6(2,@04),FUNCTION+5(@04)                03S1038
         MVC   FUNCTION(5,@04),@CC02618                         03S1038
*        LABELINE(UBLK1CL1:UBLK1CL1+LENGTH(HEADINGU)-1) = HEADINGU;/**/
         AL    @12,@CF00201                                     03S1039
         MVC   LABELINE+2(29,@12),@CC02571                      03S1039
*        LABELINE(UBLK2CL1:LENGTH(LABELINE)) = HEADINGU;/*           */
         MVI   LABELINE+69(@12),C' '                            03S1040
         MVC   LABELINE+40(29,@12),@CC02571                     03S1040
*      END;                                                     03S1041
*    SUBSYSID = APCTSSID;           /* INSERT SUBSYSTEM ID IN HEADER */
@RC01028 LA    @04,WTO2701A                                     03S1042
         MVC   SUBSYSID+4(4,@04),APCTSSID(APCTPTR)              03S1042
*    DUMMYPTR = ADDR(WTO2701A) + 44;/* POINT TO AREA ID FIELD IN WTO */
         AL    @04,@CF00189                                     03S1043
         LR    DUMMYPTR,@04                                     03S1043
*    DUMMYPTR->ONECHAR = XASDID;    /* MOVE AREA ID INTO WTO STORAGE */
         LA    @12,32                                           03S1044
         AL    @12,XSAPTR                                       03S1044
         MVC   ONECHAR(1,DUMMYPTR),XASDID(@12)                  03S1044
*    RFY (R0F,R1P,R15F) RSTD;       /* REGS 0 & 1 & 15 RSRVD FOR WTO */
*    R0F = ZERO;                    /* CLEAR ALL BYTES OF REG 0      */
         SLR   R0F,R0F                                          03S1046
*    IF CIDGIVEN=TRUE THEN          /* IF CID WAS INPUT WITH COMMAND */
         TM    CIDGIVEN,B'10000000'                             03S1047
         BNO   @RF01047                                         03S1047
*      R0F = XASCID;                /* INSERT CID IN REG 0           */
         SLR   R0F,R0F                                          03S1048
         IC    R0F,XASCID(,@12)                                 03S1048
*    ELSE                           /* OTHERWISE, A DEFAULT IS USED  */
*      R0F = APCQSCID;              /* USE SOURCE CONSOLE ID         */
         B     @RC01047                                         03S1049
@RF01047 SLR   R0F,R0F                                          03S1049
         IC    R0F,APCQSCID(,APCQPTR)                           03S1049
*    MLWTOID = R0F;                 /* SAVE ID FOR LATER USE OF WTOID*/
@RC01047 ST    R0F,MLWTOID                                      03S1050
*    R1P = ADDR(WTO2701A);          /* PASS ADDR OF PARM LIST FOR WTO*/
         LA    R1P,WTO2701A                                     03S1051
*    GENERATE  CODE                                             03S1052
*        REFS(R0F,R1P)                                          03S1052
*        SETS(R1F,R15F);            /*                          03S1052
       WTO   MF=(E,(1))
*    IF R15F>=8 THEN                /* IF SVC35 IS BENT OUT OF SHAPE */
         C     R15F,@CF00307                                    03S1053
         BL    @RF01053                                         03S1053
*      DO;                                                      03S1054
*        STOPDSPL = TRUE;           /* THEN CEASE DISPLAY ATTEMPT    */
         OI    STOPDSPL,B'10000000'                             03S1055
*      END;                                                     03S1056
*    ELSE                           /* OTHERWISE SECURE THE MLWTO ID */
*      DO;                                                      03S1057
         B     @RC01053                                         03S1057
@RF01053 DS    0H                                               03S1058
*        SLL (R1P,8);               /* SHIFT 3-BYTE ID TO HIGH ORDER */
         SLL   R1P,8                                            03S1058
*        MLWTOID = R1F × MLWTOID;   /* PRESERVE ID FOR FUTURE WTO'S  */
         LR    @14,R1F                                          03S1059
         O     @14,MLWTOID                                      03S1059
         ST    @14,MLWTOID                                      03S1059
*        DSPBEGUN = TRUE;           /* INDICATE THAT WTO'S HAVE BEGUN*/
         OI    DSPBEGUN,B'10000000'                             03S1060
*      END;                                                     03S1061
*    RFY (R0F,R1P,R15F) UNRSTD;     /*RELEASE THE PARAMETER REGISTERS*/
*  END WTOCNTRL;                                                03S1063
@EL00012 DS    0H                                               03S1063
@EF00012 DS    0H                                               03S1063
@ER00012 LM    @14,@12,@SA00012                                 03S1063
         BR    @14                                              03S1063
*  RFY APCTPTR UNRSTD;              /* RELEASE RESTRICTED REGISTER   */
*                                   /*                               */
*                                   /*IGTXEPLG*/                01S1065
*    /* SYSTEM DECLARES */                                      01S1065
*                                                               01S1065
*                                                               01S1065
*    DECLARE /*GENERAL PURPOSE REGISTERS */                     01S1065
*      GPR00F FIXED(31) REG(0);                                 01S1065
*                                                               01S1065
*    DECLARE /* COMMON VARIABLES */                             01S1066
*      I256C CHAR(256) BASED,                                   01S1066
*      I031F FIXED(31) BASED,                                   01S1066
*      I031P PTR(31)   BASED,                                   01S1066
*      I015F FIXED(15) BASED,                                   01S1066
*      I015P PTR(15)   BASED,                                   01S1066
*      I008P PTR(8)    BASED,                                   01S1066
*      I001C CHAR(1)   BASED;                                   01S1066
*                                                               01S1067
*                                                               01S1067
*    /* MODULE PATCH AREA */                                    01S1067
*    DCL APPATCH CHAR(*) INT STATIC LOCAL GEND;                 01S1067
*    GENERATE DATA DEFS(APPATCH);  /* GENERATE PATCH            01S1068
*    /* GENERAL REGISTER DECLARES */                            01S1069
*  DCL                                                          01S1069
*    R0F FIXED(31) REG(0),                                      01S1069
*    R0P   PTR(24) REG(0),                                      01S1069
*    R0RSTD PTR(31) REG(0),                                     01S1069
*    R1F FIXED(31) REG(1),                                      01S1069
*    R1P   PTR(24) REG(1),                                      01S1069
*    R1RSTD PTR(31) REG(1),                                     01S1069
*    R2F FIXED(31) REG(2),                                      01S1069
*    R2P   PTR(24) REG(2),                                      01S1069
*    R2RSTD PTR(31) REG(2),                                     01S1069
*    R3F FIXED(31) REG(3),                                      01S1069
*    R3P   PTR(24) REG(3),                                      01S1069
*    R3RSTD PTR(31) REG(3),                                     01S1069
*    R4F FIXED(31) REG(4),                                      01S1069
*    R4P   PTR(24) REG(4),                                      01S1069
*    R4RSTD PTR(31) REG(4),                                     01S1069
*    R5F FIXED(31) REG(5),                                      01S1069
*    R5P   PTR(24) REG(5),                                      01S1069
*    R5RSTD PTR(31) REG(5),                                     01S1069
*    R6F FIXED(31) REG(6),                                      01S1069
*    R6P   PTR(24) REG(6),                                      01S1069
*    R6RSTD PTR(31) REG(6),                                     01S1069
*    R7F FIXED(31) REG(7),                                      01S1069
*    R7P   PTR(24) REG(7),                                      01S1069
*    R7RSTD PTR(31) REG(7),                                     01S1069
*    R8F FIXED(31) REG(8),                                      01S1069
*    R8P   PTR(24) REG(8),                                      01S1069
*    R8RSTD PTR(31) REG(8),                                     01S1069
*    R9F FIXED(31) REG(9),                                      01S1069
*    R9P   PTR(24) REG(9),                                      01S1069
*    R9RSTD PTR(31) REG(9),                                     01S1069
*    R10F FIXED(31) REG(10),                                    01S1069
*    R10P   PTR(24) REG(10),                                    01S1069
*    R10RSTD PTR(31) REG(10),                                   01S1069
*    R11F FIXED(31) REG(11),                                    01S1069
*    R11P   PTR(24) REG(11),                                    01S1069
*    R11RSTD PTR(31) REG(11),                                   01S1069
*    R12F FIXED(31) REG(12),                                    01S1069
*    R12P   PTR(24) REG(12),                                    01S1069
*    R12RSTD PTR(31) REG(12),                                   01S1069
*    R13F FIXED(31) REG(13),                                    01S1069
*    R13P   PTR(24) REG(13),                                    01S1069
*    R13RSTD PTR(31) REG(13),                                   01S1069
*    R14F FIXED(31) REG(14),                                    01S1069
*    R14P   PTR(24) REG(14),                                    01S1069
*    R14RSTD PTR(31) REG(14),                                   01S1069
*    R15F FIXED(31) REG(15),                                    01S1069
*    R15P   PTR(24) REG(15),                                    01S1069
*    R15RSTD PTR(31) REG(15),                                   01S1069
*    /* VPSS CONTROL BLOCK POINTER DECLARES */                  01S1069
*    APSMPTR PTR(24) REG(01), /* STORAGE MANAGEMENT BLOCK (SUGGESTED PO
*NTER) */                                                       01S1069
*    APSCPTR PTR(24) REG(01), /* STORAGE MANAGEMENT CONTROL WORD (SUGGE
*TED POINTER) */                                                01S1069
*    APINPTR PTR(24) REG(01), /* USER'S INPUT PARAMETER LIST (SUGGESTED
*POINTER) */                                                    01S1069
*/*                       */                                    01S1069
*    APDATA  PTR(24) REG(06), /* ADDRESS OF DYNAMIC DATA WORKAREA (DATA
*EG) */                                                         01S1069
*    APCODE  PTR(24) REG(07), /* PROGRAM CODE BASE REGISTER (CODEREG) *
*    APDEBPTR PTR(24) REG(08), /* VPSS DEB (SUGGESTED POINTER) */
*    APNPPTR PTR(24) REG(08), /* SUBSYSTEM INITIALIZATION WORKAREA BLOC
* (ONLY USED BY SUBSYSTEM INITIALIZATION) */                    01S1069
*    APRLPTR PTR(24) REG(08), /* VPSS ACB REQUEST LIST (SUGGESTED POINT
*R) */                                                          01S1069
*    APCIPTR PTR(24) REG(08), /* 3838 CONTROL TABLE (SUGGESTED POINTER)
**/  APCWPTR PTR(24) REG(08), /* CALL INTERFACE WORKAREA (SUGGESTED POI
*TER) */                                                        01S1069
*    APERPTR PTR(24) REG(08), /* ERP/IO APPENDAGE WORKAREA (SUGGESTED P
*INTER) */                                                      01S1069
*    APACBPTR PTR(24) REG(09), /* VPSS ACB (SUGGESTED POINTER) */
*    APCQPTR PTR(24) REG(09), /* COMMAND QUEUE ELEMENT (SUGGESTED POINT
*R) */                                                          01S1069
*    APOTPTR PTR(24) REG(09), /* OPTION TABLE (SUGGESTED POINTER) */
*    APIOPTR PTR(24) REG(10), /* I/O ELEMENT (SUGGESTED POINTER) */
*    APEXLPTR PTR(24) REG(10), /* VPSS EXLST (SUGGESTED POINTER) */
*    APUBPTR PTR(24) REG(10), /* UNIT BLOCK (SUGGESTED POINTER) */
*    APAXPTR PTR(24) REG(10), /* VPSS ACB EXTENSION (SUGGESTED POINTER)
**/  APCPPTR PTR(24) REG(10), /* VPSS CALL PROCESSING INDICATORS (SUGGE
*TED POINTER) */                                                01S1069
*    APOCPTR PTR(24) REG(10), /* VPSS OPEN/CLOSE SUBSYSTEM WORKAREA (RE
*UIRED POINTER) */                                              01S1069
*    APATPTR PTR(24) REG(11), /* VPSS ACB TABLE (SUGGESTED POINTER) */
*    APLBPTR PTR(24) REG(11), /* LABEL RESOLUTION TABLE (SUGGESTED POIN
*ER) */                                                         01S1069
*    APUTPTR PTR(24) REG(11), /* USER TABLE (SUGGESTED POINTER) */
*    APDSPTR PTR(24) REG(11), /* VPSS DATASET ENTRY (SUGGESTED POINTER)
**/  APXLPTR PTR(24) REG(11), /* TRANSLATION TABLE (SUGGESTED POINTER)
*/   APDXPTR PTR(24) REG(11), /* VPSS DEB EXTENSION (SUGGESTED POINTER)
**/  APCTPTR PTR(24) REG(12) RSTD, /* CONTROL TABLE (REQUIRED POINTER)
*/   APSVPTR PTR(24) REG(13) RSTD, /* OS/VPSS SAVEAREA/WORKAREA (REQUIR
*D POINTER) */                                                  01S1069
*    APRETURN PTR(24) REG(14), /* RETURN ADDRESS FOR SUBROUTINE LINKAGE
**/  APENTRY PTR(24) REG(15), /* SUBROUTINE ENTRY POINT LINKAGE */
*    APRCODE PTR(24) REG(15); /* CONTAINS SUBROUTINE RETURN CODE */
*    /* USER REGISTER DECLARES */                               01S1070
*                                   /*                               */
*  END IGTD60                                                   01S1070
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSUT5  (DECLARES)                                        *
*/*%INCLUDE SYSUT5  (INCLUDES)                                        *
*/*%INCLUDE SYSLIB  (IGTXAPCM)                                        *
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                        *
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                        *
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                        *
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                        *
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                        *
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                        *
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                        *
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                        *
*/*%INCLUDE SYSLIB  (IGTXAPCQ)                                        *
*/*%INCLUDE SYSLIB  (IGTXAPCT)                                        *
*/*%INCLUDE SYSLIB  (IGTXAPCV)                                        *
*/*%INCLUDE SYSLIB  (IGTXAPDS)                                        *
*/*%INCLUDE SYSLIB  (IGTXAPES)                                        *
*/*%INCLUDE SYSLIB  (IGTXAPSV)                                        *
*/*%INCLUDE SYSLIB  (IGTXAPMM)                                        *
*/*%INCLUDE SYSLIB  (IGTXAPUB)                                        *
*/*%INCLUDE SYSLIB  (IEZWPL  )                                        *
*/*%INCLUDE SYSLIB  (IEFUCBOB)                                        *
*/*%INCLUDE SYSLIB  (IEECHAIN)                                        *
*/*%INCLUDE SYSLIB  (IEEXSA  )                                        *
*/*%INCLUDE SYSLIB  (IHAASCB )                                        *
*/*%INCLUDE SYSLIB  (IHASDWA )                                        *
*/*%INCLUDE SYSUT5  (AUTOMTCS)                                        *
*/*%INCLUDE SYSUT5  (STATICS )                                        *
*/*%INCLUDE SYSUT5  (CONSTNTS)                                        *
*/*%INCLUDE SYSUT5  (RSPECIFY)                                        *
*/*%INCLUDE SYSUT5  (SETSTAE )                                        *
*/*%INCLUDE SYSUT5  (INITLIZE)                                        *
*/*%INCLUDE SYSUT5  (CMNDSNTX)                                        *
*/*%INCLUDE SYSUT5  (IDOPTION)                                        *
*/*%INCLUDE SYSUT5  (DVOPTION)                                        *
*/*%INCLUDE SYSUT5  (LOAD7603)                                        *
*/*%INCLUDE SYSUT5  (VALIDATE)                                        *
*/*%INCLUDE SYSUT5  (MODESET )                                        *
*/*%INCLUDE SYSUT5  (MODERSET)                                        *
*/*%INCLUDE SYSUT5  (SNTXMSGS)                                        *
*/*%INCLUDE SYSUT5  (DISPLAYA)                                        *
*/*%INCLUDE SYSUT5  (WTOACTIV)                                        *
*/*%INCLUDE SYSUT5  (PREPATXT)                                        *
*/*%INCLUDE SYSUT5  (DISPLAYU)                                        *
*/*%INCLUDE SYSUT5  (GETTABLE)                                        *
*/*%INCLUDE SYSUT5  (SHRTABLE)                                        *
*/*%INCLUDE SYSUT5  (WTOUNITS)                                        *
*/*%INCLUDE SYSUT5  (PREPUTXT)                                        *
*/*%INCLUDE SYSUT5  (ENDSTAE )                                        *
*/*%INCLUDE SYSUT5  (ENDSTAE )                                        *
*/*%INCLUDE SYSUT5  (SUBRTNES)                                        *
*/*%INCLUDE SYSUT5  (DELMSCAN)                                        *
*/*%INCLUDE SYSUT5  (DOTHEWTO)                                        *
*/*%INCLUDE SYSUT5  (HEXCHECK)                                        *
*/*%INCLUDE SYSUT5  (IDVERIFY)                                        *
*/*%INCLUDE SYSUT5  (NULLACTV)                                        *
*/*%INCLUDE SYSUT5  (NULLUNIT)                                        *
*/*%INCLUDE SYSUT5  (PREPULIN)                                        *
*/*%INCLUDE SYSUT5  (STAERTRY)                                        *
*/*%INCLUDE SYSUT5  (UNITSOUT)                                        *
*/*%INCLUDE SYSUT5  (USTATUS )                                        *
*/*%INCLUDE SYSUT5  (WTOCNTRL)                                        *
*;                                                              01S1070
         B     @EL00001                                         01S1070
@DATA    DS    0H
@CH00303 DC    H'5'
@DATD    DSECT
         DS    0F
@SA00001 DS    20F
@SA00009 DS    15F
@SA00005 DS    15F
@SA00012 DS    15F
@SA00003 DS    15F
@SA00008 DS    13F
@SA00010 DS    14F
@AL00001 DS    10A
@TF00001 DS    F
IGTD60   CSECT
         DS    0F
@CF00041 DC    F'0'
@CF00296 DC    F'1'
@CH00296 EQU   @CF00296+2
@CF00298 DC    F'2'
@CF00047 DC    F'3'
@CH00047 EQU   @CF00047+2
@CF00301 DC    F'4'
@CF00292 DC    F'6'
@CH00292 EQU   @CF00292+2
@CF00307 DC    F'8'
@CH00307 EQU   @CF00307+2
@CF00099 DC    F'10'
@CF00105 DC    F'12'
@CH00105 EQU   @CF00105+2
@CF00311 DC    F'14'
@CF00276 DC    F'20'
@CF00124 DC    F'32'
@CF00088 DC    F'39'
@CF00181 DC    F'41'
@CF00189 DC    F'44'
@CF00199 DC    F'49'
@CF00201 DC    F'50'
@CF00205 DC    F'52'
@CF00213 DC    F'56'
@CF00231 DC    F'66'
@CF00241 DC    F'72'
@CF00254 DC    F'74'
@CH00254 EQU   @CF00254+2
@CF01053 DC    F'136'
@CF01059 DC    F'152'
@CF01061 DC    F'156'
@CF01063 DC    F'160'
@CF01065 DC    F'164'
@CF01067 DC    F'168'
@CF02790 DC    F'-12'
@CF02791 DC    F'-4'
@CF02644 DC    XL4'0000000F'
@DATD    DSECT
         DS    0D
WPLPTR   DS    A
UCBPTR   DS    A
CSCBPTR  DS    A
XSAPTR   DS    A
ASCBPTR  DS    A
SDWAPTR  DS    A
ADDR7603 DS    A
OFFSET#1 DS    F
OFFSET#2 DS    F
OFFSET#3 DS    F
SHRTABLP DS    A
DVACOUNT DS    H
LINESOUT DS    H
MULTINBR DS    H
PARMLEN  DS    H
PLENLEFT DS    H
TABLSIZE DS    H
SCANOFST DS    H
DLMCOUNT DS    FL1
DLMINDEX DS    FL1
         DS    0D
@TS00001 DS    CL8
APES     DS    CL648
         ORG   APES
APESID   DS    CL4
APESUSER DS    FL4
APESADDR DS    AL4
APESAPMV DS    AL4
APESFLGS DS    BL2
         ORG   APESFLGS
APESFLG0 DS    BL1
         ORG   APESFLG0
APESFDMP DS    BL1
APESFREC EQU   APESFLG0+0
APESFSDP EQU   APESFLG0+0
@NM00054 EQU   APESFLG0+0
APESFRTY EQU   APESFLG0+0
APESFEXR EQU   APESFLG0+0
@NM00055 EQU   APESFLG0+0
         ORG   APESFLGS+1
APESFLG1 DS    BL1
         ORG   APESFLG1
APESFFRR DS    BL1
APESFPRV EQU   APESFLG1+0
APESFLLK EQU   APESFLG1+0
APESFXLK EQU   APESFLG1+0
APESFGM  EQU   APESFLG1+0
APESFSDI EQU   APESFLG1+0
APESFSTE EQU   APESFLG1+0
APESUPSC EQU   APESFLG1+0
         ORG   APES+18
APESSUID DS    BL1
         ORG   APESSUID
APESSU33 DS    BL1
@NM00056 EQU   APESSUID+0
         ORG   APES+19
APESCODE DS    FL1
APESCOD1 DS    FL1
APESCNTR DS    FL1
APESMXCD DS    FL1
@NM00057 DS    FL1
@NM00058 DS    AL4
@NM00059 DS    AL4
@NM00060 DS    AL4
APESEXRA DS    AL4
APESR14S DS    AL4
APESREGP DS    AL4
APESREGZ DS    CL64
APESMOD  DS    CL8
APESPROC DS    CL8
APESFRR  DS    CL8
APESSDWA DS    CL512
         ORG   APES+648
ACTVQLFY DS    BL1
AIDERROR DS    BL1
AIDGIVEN DS    BL1
CIDERROR DS    BL1
CIDGIVEN DS    BL1
CMDERROR DS    BL1
DISPACTV DS    BL1
DISPUNIT DS    BL1
DSPBEGUN DS    BL1
DSPENDED DS    BL1
DVAERROR DS    BL1
DVSCANNG DS    BL1
ENQDAPUB DS    BL1
ITLOADED DS    BL1
LOOPING  DS    BL1
MULTISHR DS    BL1
STOPDSPL DS    BL1
UNITQLFY DS    BL1
         DS    CL2
DSPLLINE DS    CL70
DATAAREA DS    CL1304
CIDCHAR  DS    CL2
ERSNCODE DS    CL2
         DS    CL2
FULLWORD DS    CL4
HALFWORD DS    CL2
HRMINSEC DS    CL7
         DS    CL3
INITXSA  DS    CL136
MLWTOID  DS    CL4
SIXCHARS DS    CL6
TEMPADDR DS    CL3
TESTCHAR DS    CL1
YEARDATE DS    CL5
         DS    CL1
SHRSBRPT DS    34H
HIGHADDR DS    34CL3
LOWADDR  DS    34CL3
IGTD60   CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
@CC02578 DC    C'NO JOBS HAVING UNIT WITHIN GIVEN RANGE'
@CC02571 DC    C'UNIT STATUS PARTN USE JOBNAME'
@CC02585 DC    C'NO UNITS WITHIN GIVEN RANGE'
@CC02582 DC    C'NO UNITS ALLOCATED TO '
@CC02575 DC    C'NO JOBS ACTIVE UNDER '
@CC02568 DC    C'JOBNAME  REGN UNIT'
@CC02604 DC    C'IGTD60  '
@CC02632 DC    C',DEVICE='
@CC02656 DC    C'**    **'
@CC02722 DC    C'ACTIVITY'
@CC02709 DC    C'UNLPDG '
@CC02710 DC    C'UNLODD '
@CC02711 DC    C'DSBPDG '
@CC02712 DC    C'DSABLD '
@CC02713 DC    C'LOADED '
@CC02714 DC    C'ENABLD '
@CC02721 DC    C'IGT27 I'
@CC02589 DC    C'ACTIVE'
@CC02591 DC    C' UNITS'
@CC02618 DC    C'UNITS'
@CC02660 DC    C'USERS'
@CC00967 DC    C'APES'
@CC02655 DC    C'EXC '
@CC02657 DC    C'SHR '
@CC02620 DC    C',L='
@CC02635 DC    C'DEV'
@CC02642 DC    C'16'
@CC02646 DC    C'K '
@CC02661 DC    C'  '
@CC02702 DC    C'04'
@CB02644 DC    X'0000000F'
@CB02615 DC    X'000F'
@CB02647 DC    X'0040'
@CB02648 DC    X'2000'
@CB02650 DC    X'1000'
@CB02651 DC    X'3000'
BYNAMES  DC    B'00000000'
DELIMITR DC    CL1','
         DC    CL1' '
         DC    CL1'-'
STAEMSGS DS    CL8
         ORG   STAEMSGS+0
@NM00143 DC    H'36'
@NM00144 DC    H'0'
@NM00145 DC    H'0'
@NM00146 DC    H'0'
         ORG   STAEMSGS+8
@DATD    DSECT
*
D60STAEA IGTYSTAE  *-*,CT,PURGE=NONE,MF=L
MODESETA MODESET KEY=ZERO,MODE=SUP
MODRSETA MODESET KEY=NZERO,MODE=PROB
WTO2701A WTO   ('IGT27 I HH.MM.SS SSID FUNCTION    ',C),               *
               ('                                                      *
                               ',L),DESC=(5,8,9),AREAID=$,             *
               MCSFLAG=(REG0,RESP),MF=L
IGTD60   CSECT
*
D60STAES IGTYSTAE  *-*,CT,PURGE=NONE,MF=L
D60STAEE EQU   *-D60STAES
MODESETS MODESET KEY=ZERO,MODE=SUP,MF=L
MODESETE EQU   *-MODESETS
MODRSETS MODESET KEY=NZERO,MODE=PROB,MF=L
MODRSETE EQU   *-MODRSETS
WTO270S  WTO   ('IGT270I HH.MM.SS      ACTIVITY    ',C),               *
               ('                                                      *
                               ',L),DESC=(5,8,9),AREAID=$,             *
               MCSFLAG=(REG0,RESP),MF=L
WTO270E  EQU   *-WTO270S
WTO271S  WTO   ('IGT271I HH.MM.SS      UNITS       ',C),               *
               ('                                                      *
                               ',L),DESC=(5,8,9),AREAID=$,             *
               MCSFLAG=(REG0,RESP),MF=L
WTO271E  EQU   *-WTO271S
IGTD60   CSECT
         IGTXZAP ,                 GENERATE PATCH AREA
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IGTD60   CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
DUMMYPTR EQU   @02
CMNDPSTR EQU   @03
USRCOUNT EQU   @02
LINCOUNT EQU   @03
INDEX    EQU   @02
CHRCOUNT EQU   @04
BLKCOUNT EQU   @04
APDATA   EQU   @06
APCODE   EQU   @07
BREG2ND  EQU   @08
BREG3RD  EQU   @05
APCTPTR  EQU   @12
APSVPTR  EQU   @13
APCQPTR  EQU   @09
APDSPTR  EQU   @11
APUBPTR  EQU   @10
R14P     EQU   @14
R15P     EQU   @15
R0P      EQU   @00
R3P      EQU   @03
R4P      EQU   @04
R2F      EQU   @02
R0F      EQU   @00
R1P      EQU   @01
GPR00F   EQU   @00
R2P      EQU   @02
R5P      EQU   @05
R6P      EQU   @06
R7P      EQU   @07
R8P      EQU   @08
R9P      EQU   @09
R10P     EQU   @10
R11P     EQU   @11
R12P     EQU   @12
R13P     EQU   @13
R15F     EQU   @15
R1F      EQU   @01
APACBPTR EQU   @09
APATPTR  EQU   @11
APAXPTR  EQU   @10
APCIPTR  EQU   @08
APCPPTR  EQU   @10
APCWPTR  EQU   @08
APDEBPTR EQU   @08
APDXPTR  EQU   @11
APENTRY  EQU   @15
APERPTR  EQU   @08
APEXLPTR EQU   @10
APINPTR  EQU   @01
APIOPTR  EQU   @10
APLBPTR  EQU   @11
APNPPTR  EQU   @08
APOCPTR  EQU   @10
APOTPTR  EQU   @09
APRCODE  EQU   @15
APRETURN EQU   @14
APRLPTR  EQU   @08
APSCPTR  EQU   @01
APSMPTR  EQU   @01
APUTPTR  EQU   @11
APXLPTR  EQU   @11
R0RSTD   EQU   @00
R1RSTD   EQU   @01
R10F     EQU   @10
R10RSTD  EQU   @10
R11F     EQU   @11
R11RSTD  EQU   @11
R12F     EQU   @12
R12RSTD  EQU   @12
R13F     EQU   @13
R13RSTD  EQU   @13
R14F     EQU   @14
R14RSTD  EQU   @14
R15RSTD  EQU   @15
R2RSTD   EQU   @02
R3F      EQU   @03
R3RSTD   EQU   @03
R4F      EQU   @04
R4RSTD   EQU   @04
R5F      EQU   @05
R5RSTD   EQU   @05
R6F      EQU   @06
R6RSTD   EQU   @06
R7F      EQU   @07
R7RSTD   EQU   @07
R8F      EQU   @08
R8RSTD   EQU   @08
R9F      EQU   @09
R9RSTD   EQU   @09
APCQ     EQU   0
APCQPLEN EQU   APCQ+20
APCQPSTR EQU   APCQ+22
APCQSW   EQU   APCQ+24
APCQSCID EQU   APCQ+25
APCQTXLN EQU   APCQ+26
APCQCMND EQU   APCQ+28
APCT     EQU   0
APCTENQM EQU   APCT+12
APCTSSID EQU   APCTENQM+4
APCTSMIN EQU   APCT+32
APCTSMAD EQU   APCT+36
APCTZ@@@ EQU   APCT+40
APCTU@@@ EQU   APCT+440
APCTBR14 EQU   APCT+840
APCTAPUB EQU   APCT+848
APCTAPDS EQU   APCT+860
APCTERRS EQU   APCT+876
APCTDAID EQU   APCT+933
@NM00016 EQU   APCT+936
APCTSTAT EQU   @NM00016
APCTPRSW EQU   @NM00016+1
APCTAPCQ EQU   APCT+944
APCTCQAQ EQU   APCT+952
APCTZ@@1 EQU   APCT+1120
APCVZUAD EQU   0
APCVZDWT EQU   0
APCVZDEQ EQU   0
APCVZDDQ EQU   0
APDS     EQU   0
APDSAPDS EQU   APDS+4
APDSTD   EQU   APDS+16
APDSAPUB EQU   APDS+48
APDSREG  EQU   APDS+56
APDSFLGS EQU   APDS+64
APDSFLG0 EQU   APDSFLGS
APDSOWN  EQU   APDSFLG0
APDSARS  EQU   APDSFLG0
APDSFLG1 EQU   APDSFLGS+1
APDSJBNM EQU   APDS+84
APESREGS EQU   0
APESREGF EQU   APESREGS+60
APESMV   EQU   0
APSV     EQU   0
APSVREGS EQU   APSV+12
APUB     EQU   0
APUBAPUB EQU   APUB+4
APUBMSTR EQU   APUB+8
APUBUCB  EQU   APUB+28
APUBAPDS EQU   APUB+32
APUBRGN  EQU   APUB+48
APUBERRS EQU   APUB+52
APUBALFG EQU   APUB+80
APUBALF0 EQU   APUBALFG
APUBOWN  EQU   APUBALF0
APUBALF1 EQU   APUBALFG+1
APUBZRGN EQU   APUBALF1
APUBDSBL EQU   APUBALF1
APUBUNLD EQU   APUBALF1
APUBBERR EQU   APUBALF1
APUBDSBP EQU   APUBALF1
APUBUNLP EQU   APUBALF1
APUBALF2 EQU   APUBALFG+2
APUBALF3 EQU   APUBALFG+3
APUBSTAT EQU   APUB+84
APUBIOFG EQU   APUB+88
APUBIOF0 EQU   APUBIOFG
APUBIOF1 EQU   APUBIOFG+1
APUBIOF2 EQU   APUBIOFG+2
APUBIOF3 EQU   APUBIOFG+3
APUBDCB  EQU   APUB+96
WPLRF    EQU   0
WPLRPTR  EQU   WPLRF
WPL      EQU   0
WPLLGH   EQU   WPL
WPLMCSF  EQU   WPL+2
WPLMCSF1 EQU   WPLMCSF
WPLMCSF2 EQU   WPLMCSF+1
WPLTXT   EQU   WPL+4
WPLFLGS  EQU   0
WPLDESC  EQU   WPLFLGS
WPLDESC1 EQU   WPLDESC
WPLDESC2 EQU   WPLDESC+1
WPLROUT  EQU   WPLFLGS+2
WPLROUT1 EQU   WPLROUT
WPLROUT2 EQU   WPLROUT+1
WPLMSGTY EQU   WPLFLGS+4
WPLMSGT1 EQU   WPLMSGTY
WPLMSGT2 EQU   WPLMSGTY+1
WPLLS01  EQU   0
WPLLTF   EQU   WPLLS01
WPLLTF1  EQU   WPLLTF
WPLAREA  EQU   WPLLS01+2
WPLLINES EQU   WPLLS01+3
WPLML    EQU   0
WPLML0   EQU   WPLML
WPLMLLEN EQU   WPLML+1
WPLMLLTF EQU   WPLML+2
WPLMLLT1 EQU   WPLMLLTF
WPLMLTXT EQU   WPLML+4
UCB      EQU   0
UCBOB    EQU   0
UCBJBNR  EQU   UCBOB
UCBFL5   EQU   UCBOB+1
UCBAF    EQU   UCBFL5
UCBSTAT  EQU   UCBOB+3
UCBCHAN  EQU   UCBOB+4
UCBSFLS  EQU   UCBOB+6
UCBFLA   EQU   UCBSFLS
UCBFL1   EQU   UCBFLA
UCBBSY   EQU   UCBFL1
UCBNRY   EQU   UCBFL1
UCBPST   EQU   UCBFL1
UCBCUB   EQU   UCBFL1
UCBFLB   EQU   UCBSFLS+1
UCBCHM   EQU   UCBOB+8
UCBCHM1  EQU   UCBCHM
UCBPTH0  EQU   UCBCHM1
UCBPTH1  EQU   UCBCHM1
UCBWGT   EQU   UCBOB+12
UCBNAME  EQU   UCBOB+13
UCBTYP   EQU   UCBOB+16
UCBTBYT1 EQU   UCBTYP
UCB1FEA5 EQU   UCBTBYT1
UCB1FEA6 EQU   UCBTBYT1
UCBTBYT2 EQU   UCBTYP+1
UCB2OPT2 EQU   UCBTBYT2
UCBDUDN1 EQU   UCB2OPT2
UCB2OPT3 EQU   UCBTBYT2
UCBDUDN2 EQU   UCB2OPT3
UCB2OPT4 EQU   UCBTBYT2
UCBRWTAU EQU   UCB2OPT4
UCB2OPT6 EQU   UCBTBYT2
UCB2OPT7 EQU   UCBTBYT2
UCBTBYT3 EQU   UCBTYP+2
UCBDVCLS EQU   UCBTBYT3
UCBTBYT4 EQU   UCBTYP+3
UCBEXTPT EQU   UCBOB+20
UCBFLC   EQU   UCBEXTPT
UCBDEV   EQU   UCBOB+24
UCBCMEXT EQU   0
UCBATI   EQU   UCBCMEXT+3
@NM00083 EQU   UCBATI
UCBFLP1  EQU   UCBCMEXT+5
UCBMT    EQU   0
UCBOCR   EQU   0
UCB3540X EQU   0
UCBDKBYT EQU   UCB3540X+6
UCB3800X EQU   0
UCBOPTNS EQU   UCB3800X
UCBACTIV EQU   UCB3800X+3
UCBMDRBF EQU   UCB3800X+36
UCBUCS   EQU   0
UCBUCSOP EQU   UCBUCS+4
UCBFCBOP EQU   UCBUCS+5
CHAIN    EQU   0
CHFLG    EQU   CHAIN+4
CHSTS    EQU   CHFLG+2
CHACT    EQU   CHFLG+3
CHKEY    EQU   CHAIN+8
CHPARM   EQU   CHKEY
CHPKE    EQU   CHAIN+28
CHTJID   EQU   CHAIN+30
CHPROCSN EQU   CHAIN+32
CHACT1   EQU   CHPROCSN+3
CHASM    EQU   CHAIN+40
CHCIBP   EQU   CHASM+4
CHRGNSZ  EQU   CHASM+8
CHSTEP   EQU   CHASM+24
CHSWT    EQU   CHSTEP
CHSHORT  EQU   CHASM+32
XSAMAP   EQU   0
XASVRB   EQU   XSAMAP
XSA      EQU   XASVRB
XAD      EQU   XSA+4
XAX      EQU   XASVRB+8
@NM00088 EQU   XASVRB+16
@NM00089 EQU   XASVRB+20
XAN      EQU   @NM00089
XAS      EQU   XASVRB+32
XAU      EQU   XASVRB+40
XAA      EQU   XASVRB+42
XASAVLOC EQU   XSAMAP+48
XASAVLOX EQU   XASAVLOC
XASAVSTD EQU   XSAMAP+64
XASAVSTR EQU   XASAVSTD
EEXSAS01 EQU   0
EEXSAS02 EQU   0
XADUSWIT EQU   EEXSAS02
EEXSAS03 EQU   0
XASCID   EQU   EEXSAS03
XASDID   EQU   EEXSAS03+1
XASDS    EQU   EEXSAS03+2
@NM00092 EQU   EEXSAS03+4
EEXSAS04 EQU   0
XAXMASK  EQU   EEXSAS04
EEXSAS05 EQU   0
XASOPCOD EQU   EEXSAS05
XASWITCH EQU   EEXSAS05+1
XALTCHG  EQU   XASWITCH
XACOMPMS EQU   XASWITCH
XARESV   EQU   EEXSAS05+2
EEXSAS06 EQU   0
XAAVRANG EQU   EEXSAS06
XAAVRNG2 EQU   EEXSAS06+1
ASCB     EQU   0
ASCBSUPC EQU   ASCB+16
ASCBFW1  EQU   ASCB+100
ASCBRCTF EQU   ASCBFW1+2
ASCBFLG1 EQU   ASCBFW1+3
ASCBDSP1 EQU   ASCB+114
ASCBFLG2 EQU   ASCB+115
ASCBLKGP EQU   ASCB+128
ASCBSRQ  EQU   ASCB+180
ASCBSRQ1 EQU   ASCBSRQ
ASCBSRQ2 EQU   ASCBSRQ+1
ASCBSRQ3 EQU   ASCBSRQ+2
ASCBSRQ4 EQU   ASCBSRQ+3
SDWA     EQU   0
SDWAFIOB EQU   SDWA+4
SDWAABCC EQU   SDWAFIOB
SDWACMPF EQU   SDWAABCC
SDWACTL1 EQU   SDWA+8
SDWACMKA EQU   SDWACTL1
SDWAMWPA EQU   SDWACTL1+1
SDWAPMKA EQU   SDWACTL1+4
SDWACTL2 EQU   SDWA+16
SDWACMKP EQU   SDWACTL2
SDWAMWPP EQU   SDWACTL2+1
SDWAPMKP EQU   SDWACTL2+4
SDWAGRSV EQU   SDWA+24
SDWANAME EQU   SDWA+88
SDWAEC1  EQU   SDWA+104
SDWAEMK1 EQU   SDWAEC1
SDWAMWP1 EQU   SDWAEC1+1
SDWAINT1 EQU   SDWAEC1+2
SDWANXT1 EQU   SDWAEC1+4
SDWAAEC1 EQU   SDWA+112
SDWAILC1 EQU   SDWAAEC1+1
SDWAINC1 EQU   SDWAAEC1+2
SDWAICD1 EQU   SDWAINC1+1
SDWAEC2  EQU   SDWA+120
SDWAEMK2 EQU   SDWAEC2
SDWAMWP2 EQU   SDWAEC2+1
SDWAINT2 EQU   SDWAEC2+2
SDWANXT2 EQU   SDWAEC2+4
SDWAAEC2 EQU   SDWA+128
SDWAILC2 EQU   SDWAAEC2+1
SDWAINC2 EQU   SDWAAEC2+2
SDWAICD2 EQU   SDWAINC2+1
SDWASRSV EQU   SDWA+136
SDWAIDNT EQU   SDWA+200
SDWAMCH  EQU   SDWA+204
SDWASTCK EQU   SDWAMCH
SDWAMCHI EQU   SDWAMCH+8
SDWAMCHS EQU   SDWAMCHI
SDWAMCHD EQU   SDWAMCHI+1
SDWARSR1 EQU   SDWAMCH+12
SDWARSR2 EQU   SDWAMCH+13
SDWAFLGS EQU   SDWA+232
SDWAERRA EQU   SDWAFLGS
SDWAERRB EQU   SDWAFLGS+1
SDWAERRC EQU   SDWAFLGS+2
SDWAERRD EQU   SDWAFLGS+3
SDWAIOFS EQU   SDWA+238
SDWACPUA EQU   SDWA+248
SDWAPARQ EQU   SDWA+252
SDWAACF2 EQU   SDWAPARQ+1
SDWAACF3 EQU   SDWAPARQ+2
SDWAACF4 EQU   SDWAPARQ+3
SDWALKWA EQU   SDWA+256
SDWALKWS EQU   SDWALKWA
SDWARECP EQU   SDWA+292
SDWASNPA EQU   SDWA+320
SDWADUMP EQU   SDWASNPA
SDWADPFS EQU   SDWADUMP+1
SDWADDAT EQU   SDWASNPA+4
SDWASDAT EQU   SDWADDAT
SDWASDA0 EQU   SDWASDAT
SDWASDA1 EQU   SDWASDAT+1
SDWAPDAT EQU   SDWADDAT+2
SDWADPSA EQU   SDWA+328
SDWADPSL EQU   SDWADPSA
SDWARA   EQU   SDWA+400
SDWADPVA EQU   SDWARA+2
IEE7603D EQU   0
ACTIVTXT EQU   0
ACTVAREA EQU   0
LABELINE EQU   0
ONECHAR  EQU   0
UNITAREA EQU   0
SHRUSERS EQU   0
USERNAME EQU   SHRUSERS
USERREG  EQU   SHRUSERS+8
UNITSTXT EQU   0
UJOBNAME EQU   UNITSTXT+22
CNTRLINE EQU   0
MSGNMBR  EQU   CNTRLINE
HOURS    EQU   CNTRLINE+8
MINUTES  EQU   CNTRLINE+11
SECONDS  EQU   CNTRLINE+14
SUBSYSID EQU   CNTRLINE+17
FUNCTION EQU   CNTRLINE+22
APCVZDAL EQU   0
APCVZDAP EQU   0
APCVZDBK EQU   0
APCVZDDA EQU   0
APCVZDID EQU   0
APCVZDIO EQU   0
APCVZDIP EQU   0
APCVZDMD EQU   0
APCVZDMM EQU   0
APCVZDQR EQU   0
APCVZDRI EQU   0
APCVZDUA EQU   0
APCVZDUL EQU   0
APCVZDWI EQU   0
APCVZDX1 EQU   0
APCVZDX2 EQU   0
APCVZDX3 EQU   0
APCVZDX4 EQU   0
APCVZD10 EQU   0
APCVZD20 EQU   0
APCVZD4E EQU   0
APCVZD40 EQU   0
APCVZD41 EQU   0
APCVZD42 EQU   0
APCVZD43 EQU   0
APCVZD44 EQU   0
APCVZD45 EQU   0
APCVZD46 EQU   0
APCVZD47 EQU   0
APCVZD48 EQU   0
APCVZD49 EQU   0
APCVZD60 EQU   0
APCVZD80 EQU   0
APCVZD81 EQU   0
APCVZD82 EQU   0
APCVZD83 EQU   0
APCVZJAA EQU   0
APCVZJAD EQU   0
APCVZJAG EQU   0
APCVZJAJ EQU   0
APCVZJAM EQU   0
APCVZJAP EQU   0
APCVZJAX EQU   0
APCVZJAY EQU   0
APCVZJBA EQU   0
APCVZJBD EQU   0
APCVZJBG EQU   0
APCVZJBJ EQU   0
APCVZJBM EQU   0
APCVZJDA EQU   0
APCVZJDD EQU   0
APCVZJDG EQU   0
APCVZJDJ EQU   0
APCVZJDM EQU   0
APCVZJHC EQU   0
APCVZJHE EQU   0
APCVZJHF EQU   0
APCVZJHO EQU   0
APCVZJHQ EQU   0
APCVZJHR EQU   0
APCVZJHT EQU   0
APCVZJHW EQU   0
APCVZJH0 EQU   0
APCVZJH6 EQU   0
APCVZJI0 EQU   0
APCVZJI3 EQU   0
APCVZJJ0 EQU   0
APCVZKAA EQU   0
APCVZKBA EQU   0
APCVZKBB EQU   0
APCVZKBC EQU   0
APCVZKBD EQU   0
APCVZKBE EQU   0
APCVZKBF EQU   0
APCVZKCA EQU   0
APCVZKDA EQU   0
APCVZKGA EQU   0
APCVZKGB EQU   0
APCVZKGC EQU   0
APCVZKGD EQU   0
APCVZLCA EQU   0
APCVZLCB EQU   0
APCVZMBA EQU   0
APCVZMBD EQU   0
APCVZMBG EQU   0
APCVZMBH EQU   0
APCVZMBK EQU   0
APCVZMBM EQU   0
APCVZMIB EQU   0
APCVZMIC EQU   0
APCVZMIF EQU   0
APCVZMJB EQU   0
APCVZMJC EQU   0
APCVZMJH EQU   0
APCVZMJI EQU   0
APCVZMMA EQU   0
APCVZUAA EQU   0
APCVZUAB EQU   0
APCVZUAC EQU   0
APCVZUAE EQU   0
APCVZUAF EQU   0
APCVZUAG EQU   0
APCVZUBB EQU   0
APCVZUFA EQU   0
APCVZUHA EQU   0
APCVZUHB EQU   0
APCVZUJA EQU   0
APCVZUKA EQU   0
APCV1CMD EQU   0
APCV1JAA EQU   0
APCV1JBJ EQU   0
APCV1JHC EQU   0
APCV1JHL EQU   0
APCV1JHT EQU   0
APCV1MAB EQU   0
APCV1MBD EQU   0
APCV2JHC EQU   0
APCV2JHL EQU   0
APCV2MBD EQU   0
I001C    EQU   0
I008P    EQU   0
I015F    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
I256C    EQU   0
UCBBGN   EQU   0
APCTZ    EQU   APCTZ@@@
APCTZUAA EQU   APCTZ
APCTZUAB EQU   APCTZ+4
APCTZUAC EQU   APCTZ+8
APCTZUAD EQU   APCTZ+12
APCTZUAE EQU   APCTZ+16
APCTZUBB EQU   APCTZ+24
APCTZD10 EQU   APCTZ+28
APCTZD20 EQU   APCTZ+32
APCTZD40 EQU   APCTZ+36
APCTZD41 EQU   APCTZ+40
APCTZD42 EQU   APCTZ+44
APCTZD43 EQU   APCTZ+48
APCTZD44 EQU   APCTZ+52
APCTZD45 EQU   APCTZ+56
APCTZD46 EQU   APCTZ+60
APCTZD47 EQU   APCTZ+64
APCTZD48 EQU   APCTZ+68
APCTZD49 EQU   APCTZ+72
APCTZD60 EQU   APCTZ+76
APCTZD80 EQU   APCTZ+80
APCTZD4E EQU   APCTZ+84
APCTZMBA EQU   APCTZ+88
APCTZMBD EQU   APCTZ+92
APCTZMBG EQU   APCTZ+96
APCTZDX1 EQU   APCTZ+104
APCTZDX2 EQU   APCTZ+108
APCTZDX3 EQU   APCTZ+112
APCTZDX4 EQU   APCTZ+116
APCTZMBH EQU   APCTZ+120
APCTZMBK EQU   APCTZ+124
APCTZMBM EQU   APCTZ+128
APCTZMJB EQU   APCTZ+132
APCTZMJC EQU   APCTZ+136
APCTZMJH EQU   APCTZ+140
APCTZMMA EQU   APCTZ+144
APCTZDMD EQU   APCTZ+148
APCTZD81 EQU   APCTZ+152
APCTZDID EQU   APCTZ+156
APCTZDRI EQU   APCTZ+160
APCTZMJI EQU   APCTZ+164
APCTZDWT EQU   APCTZ+168
APCTZDMM EQU   APCTZ+172
APCTZDAL EQU   APCTZ+176
APCTZDBK EQU   APCTZ+180
APCTZDIP EQU   APCTZ+184
APCTZDDA EQU   APCTZ+188
APCTZDUL EQU   APCTZ+192
APCTZDEQ EQU   APCTZ+196
APCTZDDQ EQU   APCTZ+200
APCTZDUA EQU   APCTZ+204
APCTZUAF EQU   APCTZ+208
APCTZUAG EQU   APCTZ+212
APCTZDIO EQU   APCTZ+216
APCTZUHA EQU   APCTZ+220
APCTZUHB EQU   APCTZ+224
APCTZJAA EQU   APCTZ+232
APCTZJAD EQU   APCTZ+236
APCTZJAG EQU   APCTZ+240
APCTZJAJ EQU   APCTZ+244
APCTZJAM EQU   APCTZ+248
APCTZJAP EQU   APCTZ+252
APCTZJAY EQU   APCTZ+256
APCTZUFA EQU   APCTZ+260
APCTZUJA EQU   APCTZ+264
APCTZDAP EQU   APCTZ+268
APCTZKAA EQU   APCTZ+272
APCTZD82 EQU   APCTZ+276
APCTZMIB EQU   APCTZ+280
APCTZMIC EQU   APCTZ+284
APCTZD83 EQU   APCTZ+288
APCTZMIF EQU   APCTZ+296
APCTZJH0 EQU   APCTZ+300
APCTZJI0 EQU   APCTZ+304
APCTZJI3 EQU   APCTZ+308
APCTZJJ0 EQU   APCTZ+312
APCTZJBA EQU   APCTZ+316
APCTZJBD EQU   APCTZ+320
APCTZJBG EQU   APCTZ+324
APCTZJBJ EQU   APCTZ+328
APCTZJBM EQU   APCTZ+332
APCTZKCA EQU   APCTZ+340
APCTZKDA EQU   APCTZ+344
APCTZJDA EQU   APCTZ+356
APCTZJDJ EQU   APCTZ+360
APCTZJH6 EQU   APCTZ+364
APCTZJHO EQU   APCTZ+368
APCTZJHF EQU   APCTZ+372
APCTZJHE EQU   APCTZ+376
APCTZDQR EQU   APCTZ+380
APCTZJHR EQU   APCTZ+384
APCTZJHT EQU   APCTZ+388
APCTZJHW EQU   APCTZ+392
APCTZ1   EQU   APCTZ@@1
APCTZKBA EQU   APCTZ1
APCTZKBC EQU   APCTZ1+4
APCTZKBB EQU   APCTZ1+8
APCTZJHC EQU   APCTZ1+20
APCTZJHQ EQU   APCTZ1+24
APCTZKBD EQU   APCTZ1+28
APCTZKBE EQU   APCTZ1+40
APCTZUKA EQU   APCTZ1+56
APCTZKBF EQU   APCTZ1+60
APCTZJDD EQU   APCTZ1+64
APCTZJDG EQU   APCTZ1+68
APCTZJDM EQU   APCTZ1+72
APCTZLCA EQU   APCTZ1+76
APCTZLCB EQU   APCTZ1+80
APCTZDWI EQU   APCTZ1+84
APCTZJAX EQU   APCTZ1+88
APCTZKGA EQU   APCTZ1+92
APCTZKGB EQU   APCTZ1+96
APCTZKGC EQU   APCTZ1+100
APCTZKGD EQU   APCTZ1+104
APCTU    EQU   APCTU@@@
APCT1MAB EQU   APCTU
APCT1MBD EQU   APCTU+4
APCT2MBD EQU   APCTU+8
APCT1CMD EQU   APCTU+12
APCT1JAA EQU   APCTU+20
APCT1JHC EQU   APCTU+24
APCT2JHC EQU   APCTU+28
APCT1JHT EQU   APCTU+32
APCT1JHL EQU   APCTU+36
APCT2JHL EQU   APCTU+40
APCT1JBJ EQU   APCTU+44
UCBOBS01 EQU   UCBDEV
UCBSTAB  EQU   UCBOBS01+10
UCBBSVL  EQU   UCBSTAB
UCBPRSRS EQU   UCBSTAB
UCBDMCT  EQU   UCBOBS01+11
UCBFL4   EQU   UCBOBS01+13
UCBOBS02 EQU   UCBDEV
UCBTFL1  EQU   UCBOBS02+19
UCBXTN   EQU   UCBOBS02+20
UCBVOPT  EQU   UCBXTN
UCBOBS03 EQU   UCBDEV
UCBXTADR EQU   UCBOBS03
UCBOBS04 EQU   UCBDEV
UCBBTA   EQU   UCBOBS04+12
UCBOBS06 EQU   UCBDEV
UCBAOF   EQU   UCBOBS06
UCBAOF1  EQU   UCBAOF
UCBAOF2  EQU   UCBAOF+1
@NM00082 EQU   UCBOBS06+3
UCBIRB   EQU   UCBOBS06+4
UCBGRAF  EQU   UCBIRB
UCBLDNCA EQU   UCBOBS06+8
UCBRDYQ  EQU   UCBLDNCA
UCBIRLN  EQU   UCBRDYQ
UCBLDNCB EQU   UCBRDYQ+1
UCBCTLNK EQU   UCBOBS06+12
UCBOBS07 EQU   UCBDEV
UCBOBS08 EQU   UCBDEV
UCBCTCAD EQU   UCBOBS08
UCBCTCF1 EQU   UCBOBS08+4
UCBOBS09 EQU   UCBDEV
CHAINS01 EQU   CHASM
CHTYPE   EQU   CHAINS01+124
CHTRSTAT EQU   CHAINS01+125
CHCSYSO  EQU   CHAINS01+134
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
CHLAST   EQU   CHAINS01+136
CHSPA    EQU   CHAINS01+135
CHUSERID EQU   CHCSYSO
CHJB     EQU   CHCSYSO
CHDUMP   EQU   CHCSYSO
CHQUE    EQU   CHCSYSO
CHHOLD   EQU   CHCSYSO
CHOUT    EQU   CHCSYSO
CHINN    EQU   CHCSYSO
CHALL    EQU   CHCSYSO
CHINC    EQU   CHAINS01+132
CHPEND   EQU   CHAINS01+128
CHARID   EQU   CHAINS01+127
CHCNID   EQU   CHAINS01+126
@NM00087 EQU   CHTRSTAT
CHTSL    EQU   CHTRSTAT
CHTS     EQU   CHTRSTAT
CHINITL  EQU   CHTRSTAT
CHINIT   EQU   CHTRSTAT
CHJOBSL  EQU   CHTRSTAT
CHJOBS   EQU   CHTRSTAT
CHDEF    EQU   CHTYPE
CHHIAR   EQU   CHTYPE
CHARSV29 EQU   CHTYPE
CHARSV28 EQU   CHTYPE
CHARSV27 EQU   CHTYPE
CHARSV26 EQU   CHTYPE
CHARSV25 EQU   CHTYPE
CHDSTAT  EQU   CHTYPE
CHBUF    EQU   CHAINS01
UCBRV066 EQU   UCBOBS09+4
UCBIOSBA EQU   UCBOBS09
UCBRV042 EQU   UCBOBS08+5
UCBRV082 EQU   UCBCTCF1
UCBRV081 EQU   UCBCTCF1
UCBRV080 EQU   UCBCTCF1
UCBRV079 EQU   UCBCTCF1
UCBRV078 EQU   UCBCTCF1
UCBRV077 EQU   UCBCTCF1
UCBRV076 EQU   UCBCTCF1
UCBCTC80 EQU   UCBCTCF1
UCBCTCAL EQU   UCBCTCAD
UCBICNCB EQU   UCBOBS07+4
UCBRV040 EQU   UCBOBS07
UCBCTLNA EQU   UCBCTLNK+1
UCBRLN   EQU   UCBCTLNK
UCBRDYQA EQU   UCBLDNCB
UCBINRLN EQU   UCBIRLN
UCBIRBA  EQU   UCBIRB+1
UCBRV039 EQU   UCBGRAF
UCBDWNR  EQU   UCBGRAF
UCBRPND  EQU   UCBGRAF
UCBUPM   EQU   UCBGRAF
UCBBTAM  EQU   UCBGRAF
UCBDRNO  EQU   UCBGRAF
UCBDRO   EQU   UCBGRAF
UCBOIP   EQU   UCBGRAF
UCBATRCD EQU   @NM00082
UCBSKPFG EQU   @NM00082
UCBRIPND EQU   @NM00082
UCBRTIAC EQU   @NM00082
UCBRSV79 EQU   @NM00082
UCBRSV78 EQU   @NM00082
UCBRSV77 EQU   @NM00082
UCBOLTEP EQU   @NM00082
UCBATNCT EQU   UCBOBS06+2
UCBRSV76 EQU   UCBAOF2
UCBRSV75 EQU   UCBAOF2
UCBRSV74 EQU   UCBAOF2
UCBRSV73 EQU   UCBAOF2
UCBRSV72 EQU   UCBAOF2
UCBRSV71 EQU   UCBAOF2
UCBRSV70 EQU   UCBAOF2
UCBRSV69 EQU   UCBAOF2
UCBRSV68 EQU   UCBAOF1
UCBRSV67 EQU   UCBAOF1
UCBRSV66 EQU   UCBAOF1
UCBRSV65 EQU   UCBAOF1
UCBRSV64 EQU   UCBAOF1
UCBOFNL  EQU   UCBAOF1
UCBOFSP  EQU   UCBAOF1
UCBOFMCR EQU   UCBAOF1
UCBBTB   EQU   UCBBTA+1
UCBDI    EQU   UCBBTA
UCBSNS   EQU   UCBOBS04+8
UCBTEB   EQU   UCBOBS04+4
UCBGCB   EQU   UCBOBS04+3
UCBOPEN  EQU   UCBOBS04+2
UCBSTART EQU   UCBOBS04
UCBXTNB  EQU   UCBXTN+1
UCBRSV22 EQU   UCBVOPT
UCBRSV21 EQU   UCBVOPT
UCBRSV20 EQU   UCBVOPT
UCBESVE  EQU   UCBVOPT
UCBERPC  EQU   UCBVOPT
UCBESVC  EQU   UCBVOPT
UCBEVA   EQU   UCBVOPT
UCBESV   EQU   UCBVOPT
UCBRV009 EQU   UCBTFL1
UCBRV008 EQU   UCBTFL1
UCBRV007 EQU   UCBTFL1
UCBRV006 EQU   UCBTFL1
UCBRV005 EQU   UCBTFL1
UCBDQDSP EQU   UCBTFL1
UCBNSLTP EQU   UCBTFL1
UCBNLTP  EQU   UCBTFL1
UCBRES1B EQU   UCBOBS02+18
UCBFSER  EQU   UCBOBS02+12
@NM00081 EQU   UCBOBS02+4
UCBFSEQ  EQU   UCBOBS02+2
UCBFSCT  EQU   UCBOBS02
UCBNEXP  EQU   UCBOBS01+20
UCBBASE  EQU   UCBOBS01+16
UCBRES1A EQU   UCBOBS01+15
UCBUSER  EQU   UCBOBS01+14
UCBFL47  EQU   UCBFL4
UCBMAT   EQU   UCBFL4
UCBHOLD  EQU   UCBFL4
UCBATTN  EQU   UCBFL4
UCBDSS   EQU   UCBFL4
UCBRESVP EQU   UCBFL4
UCBWDAV  EQU   UCBFL4
UCBDAVV  EQU   UCBFL4
UCBSQC   EQU   UCBOBS01+12
UCBDATP  EQU   UCBOBS01+12
UCBDMC   EQU   UCBDMCT
UCBMOUNT EQU   UCBDMCT
UCBBNUL  EQU   UCBSTAB
UCBSHAR  EQU   UCBSTAB
UCBBSTR  EQU   UCBSTAB
UCBBPUB  EQU   UCBSTAB
UCBBPRV  EQU   UCBSTAB
UCBBALB  EQU   UCBPRSRS
UCBPGFL  EQU   UCBSTAB
UCBDVSHR EQU   UCBBSVL
UCBVOLI  EQU   UCBOBS01+4
UCBVTOC  EQU   UCBOBS01
@NM00048 EQU   APCTU+48
APCT1MBM EQU   APCTU+16
@NM00047 EQU   APCTZ1+108
@NM00046 EQU   APCTZ1+52
@NM00045 EQU   APCTZ1+48
@NM00044 EQU   APCTZ1+44
@NM00043 EQU   APCTZ1+36
@NM00042 EQU   APCTZ1+32
@NM00041 EQU   APCTZ1+16
@NM00040 EQU   APCTZ1+12
@NM00039 EQU   APCTZ+396
@NM00038 EQU   APCTZ+352
@NM00037 EQU   APCTZ+348
@NM00036 EQU   APCTZ+336
@NM00035 EQU   APCTZ+292
APCTZJFA EQU   APCTZ+228
APCTZMBR EQU   APCTZ+100
@NM00034 EQU   APCTZ+20
@NM00142 EQU   CNTRLINE+30
@NM00141 EQU   CNTRLINE+21
@NM00140 EQU   CNTRLINE+16
DOT#2    EQU   CNTRLINE+13
DOT#1    EQU   CNTRLINE+10
@NM00139 EQU   CNTRLINE+7
@NM00138 EQU   UNITSTXT
@NM00137 EQU   SDWA+512
SDWAVRA  EQU   SDWARA+4
SDWAURAL EQU   SDWARA+3
@NM00136 EQU   SDWADPVA
SDWAEBC  EQU   SDWADPVA
SDWAHEX  EQU   SDWADPVA
SDWAVRAL EQU   SDWARA
SDWAERTM EQU   SDWA+396
SDWACOMP EQU   SDWA+392
SDWARCPL EQU   SDWA+364
@NM00135 EQU   SDWADPSA+32
SDWATO4  EQU   SDWADPSL+28
SDWAFRM4 EQU   SDWADPSL+24
SDWATO3  EQU   SDWADPSL+20
SDWAFRM3 EQU   SDWADPSL+16
SDWATO2  EQU   SDWADPSL+12
SDWAFRM2 EQU   SDWADPSL+8
SDWATO1  EQU   SDWADPSL+4
SDWAFRM1 EQU   SDWADPSL
@NM00134 EQU   SDWADDAT+3
@NM00133 EQU   SDWAPDAT
SDWAUSPL EQU   SDWAPDAT
SDWADPSW EQU   SDWAPDAT
SDWATJPA EQU   SDWAPDAT
SDWATLPA EQU   SDWAPDAT
SDWADREG EQU   SDWAPDAT
SDWADSAH EQU   SDWAPDAT
SDWADSAS EQU   SDWAPDAT
@NM00132 EQU   SDWASDA1
SDWAERR  EQU   SDWASDA1
SDWAIO   EQU   SDWASDA1
SDWADM   EQU   SDWASDA0
SDWAQQS  EQU   SDWASDA0
SDWACBS  EQU   SDWASDA0
SDWAGTF  EQU   SDWASDA0
SDWASWA  EQU   SDWASDA0
SDWALSQA EQU   SDWASDA0
SDWASQA  EQU   SDWASDA0
SDWANUC  EQU   SDWASDA0
@NM00131 EQU   SDWADUMP+2
@NM00130 EQU   SDWADPFS
SDWASLST EQU   SDWADPFS
@NM00129 EQU   SDWADPFS
SDWAENSN EQU   SDWADPFS
SDWADLST EQU   SDWADPFS
SDWADPT  EQU   SDWADPFS
SDWADPID EQU   SDWADUMP
SDWADPLA EQU   SDWA+316
SDWAREXN EQU   SDWARECP+16
SDWACSCT EQU   SDWARECP+8
SDWAMODN EQU   SDWARECP
SDWASEQ# EQU   SDWA+290
SDWAASID EQU   SDWA+288
SDWATALW EQU   SDWALKWS+28
SDWATDLW EQU   SDWALKWS+24
SDWATNLW EQU   SDWALKWS+20
SDWAAPLW EQU   SDWALKWS+16
SDWAIPLW EQU   SDWALKWS+12
SDWAILLW EQU   SDWALKWS+8
SDWAIULW EQU   SDWALKWS+4
SDWAICLW EQU   SDWALKWS
SDWAFLLK EQU   SDWAACF4
SDWACMS  EQU   SDWAACF4
SDWAOPTM EQU   SDWAACF4
SDWATADB EQU   SDWAACF4
SDWATDNB EQU   SDWAACF4
SDWATNCB EQU   SDWAACF4
SDWAILCH EQU   SDWAACF4
SDWAIUCB EQU   SDWAACF4
SDWAICAT EQU   SDWAACF3
SDWAIPRG EQU   SDWAACF3
SDWASALL EQU   SDWAACF3
SDWAASMP EQU   SDWAACF3
SDWADISP EQU   SDWAACF3
@NM00128 EQU   SDWAACF3
@NM00127 EQU   SDWAACF2
SDWAFREE EQU   SDWAACF2
SDWAUPRG EQU   SDWAACF2
@NM00126 EQU   SDWAACF2
SDWASPIN EQU   SDWAACF2
@NM00125 EQU   SDWAACF2
SDWARCRD EQU   SDWAACF2
SDWARCDE EQU   SDWAPARQ
SDWALCPU EQU   SDWACPUA+2
@NM00124 EQU   SDWACPUA
SDWARECA EQU   SDWA+244
SDWARTYA EQU   SDWA+240
SDWACPUI EQU   SDWA+239
@NM00123 EQU   SDWAIOFS
SDWANIOP EQU   SDWAIOFS
SDWANOIO EQU   SDWAIOFS
SDWAIOHT EQU   SDWAIOFS
SDWAIOQR EQU   SDWAIOFS
SDWAFMID EQU   SDWA+236
SDWAERFL EQU   SDWAERRD
SDWAMCIV EQU   SDWAERRD
SDWARPIV EQU   SDWAERRD
SDWAMABD EQU   SDWAERRD
SDWACTS  EQU   SDWAERRD
SDWASTAE EQU   SDWAERRD
SDWANRBE EQU   SDWAERRD
SDWACLUP EQU   SDWAERRD
@NM00122 EQU   SDWAERRC
SDWAEAS  EQU   SDWAERRC
SDWAPERC EQU   SDWAERRC
SDWAIRB  EQU   SDWAERRC
SDWASTAI EQU   SDWAERRC
SDWASTAF EQU   SDWAERRC
SDWASRBM EQU   SDWAERRB
SDWALDIS EQU   SDWAERRB
SDWAENRB EQU   SDWAERRB
SDWATYP1 EQU   SDWAERRB
@NM00121 EQU   SDWAERRB
SDWAPGIO EQU   SDWAERRA
SDWATEXC EQU   SDWAERRA
SDWASVCE EQU   SDWAERRA
SDWAABTM EQU   SDWAERRA
SDWASVCD EQU   SDWAERRA
SDWARKEY EQU   SDWAERRA
SDWAPCHK EQU   SDWAERRA
SDWAMCHK EQU   SDWAERRA
SDWATIME EQU   SDWAMCH+20
SDWARFSA EQU   SDWAMCH+16
@NM00120 EQU   SDWAMCH+14
SDWAVEQR EQU   SDWARSR2
SDWAPGFX EQU   SDWARSR2
SDWAFLSQ EQU   SDWARSR2
SDWAFSQA EQU   SDWARSR2
SDWANUCL EQU   SDWARSR2
SDWASPER EQU   SDWARSR2
SDWAINTC EQU   SDWARSR2
SDWAOFLN EQU   SDWARSR2
SDWACHNG EQU   SDWARSR1
SDWAMSER EQU   SDWARSR1
@NM00119 EQU   SDWARSR1
SDWACPID EQU   SDWAMCH+10
SDWATERR EQU   SDWAMCHD
SDWAFPRX EQU   SDWAMCHD
SDWAINSF EQU   SDWAMCHD
SDWAACR  EQU   SDWAMCHD
SDWASCK  EQU   SDWAMCHD
SDWAPSWU EQU   SDWAMCHD
SDWAREGU EQU   SDWAMCHD
SDWASKYF EQU   SDWAMCHD
@NM00118 EQU   SDWAMCHS
SDWARSRF EQU   SDWAMCHS
SDWARSRC EQU   SDWAMCHS
SDWAINVP EQU   SDWAMCHS
SDWATSVL EQU   SDWAMCHS
SDWARCDF EQU   SDWAMCHS
SDWASRVL EQU   SDWAMCHS
SDWASCKE EQU   SDWASTCK+4
SDWASCKB EQU   SDWASTCK
SDWALNTH EQU   SDWAIDNT+1
SDWASPID EQU   SDWAIDNT
SDWASR15 EQU   SDWASRSV+60
SDWASR14 EQU   SDWASRSV+56
SDWASR13 EQU   SDWASRSV+52
SDWASR12 EQU   SDWASRSV+48
SDWASR11 EQU   SDWASRSV+44
SDWASR10 EQU   SDWASRSV+40
SDWASR09 EQU   SDWASRSV+36
SDWASR08 EQU   SDWASRSV+32
SDWASR07 EQU   SDWASRSV+28
SDWASR06 EQU   SDWASRSV+24
SDWASR05 EQU   SDWASRSV+20
SDWASR04 EQU   SDWASRSV+16
SDWASR03 EQU   SDWASRSV+12
SDWASR02 EQU   SDWASRSV+8
SDWASR01 EQU   SDWASRSV+4
SDWASR00 EQU   SDWASRSV
SDWATRN2 EQU   SDWAAEC2+4
SDWAIPC2 EQU   SDWAICD2
SDWAIMC2 EQU   SDWAICD2
SDWAIPR2 EQU   SDWAICD2
@NM00117 EQU   SDWAINC2
@NM00116 EQU   SDWAILC2
SDWAIL2  EQU   SDWAILC2
@NM00115 EQU   SDWAILC2
@NM00114 EQU   SDWAAEC2
SDWAADD2 EQU   SDWANXT2+1
@NM00113 EQU   SDWANXT2
@NM00112 EQU   SDWAEC2+3
SDWASGN2 EQU   SDWAINT2
SDWAEXP2 EQU   SDWAINT2
SDWADEC2 EQU   SDWAINT2
SDWAFPO2 EQU   SDWAINT2
SDWACC2  EQU   SDWAINT2
@NM00111 EQU   SDWAINT2
SDWAPGM2 EQU   SDWAMWP2
SDWAWAT2 EQU   SDWAMWP2
SDWAMCK2 EQU   SDWAMWP2
SDWAECT2 EQU   SDWAMWP2
SDWAKEY2 EQU   SDWAMWP2
SDWAEXT2 EQU   SDWAEMK2
SDWAIO2  EQU   SDWAEMK2
SDWATRM2 EQU   SDWAEMK2
@NM00110 EQU   SDWAEMK2
SDWAPER2 EQU   SDWAEMK2
@NM00109 EQU   SDWAEMK2
SDWATRAN EQU   SDWAAEC1+4
SDWAIPC1 EQU   SDWAICD1
SDWAIMC1 EQU   SDWAICD1
SDWAIPR1 EQU   SDWAICD1
@NM00108 EQU   SDWAINC1
@NM00107 EQU   SDWAILC1
SDWAIL1  EQU   SDWAILC1
@NM00106 EQU   SDWAILC1
@NM00105 EQU   SDWAAEC1
SDWAADD1 EQU   SDWANXT1+1
@NM00104 EQU   SDWANXT1
@NM00103 EQU   SDWAEC1+3
SDWASGN1 EQU   SDWAINT1
SDWAEXP1 EQU   SDWAINT1
SDWADEC1 EQU   SDWAINT1
SDWAFPO1 EQU   SDWAINT1
SDWACC1  EQU   SDWAINT1
@NM00102 EQU   SDWAINT1
SDWAPGM1 EQU   SDWAMWP1
SDWAWAT1 EQU   SDWAMWP1
SDWAMCK1 EQU   SDWAMWP1
SDWAECT1 EQU   SDWAMWP1
SDWAKEY1 EQU   SDWAMWP1
SDWAEXT1 EQU   SDWAEMK1
SDWAIO1  EQU   SDWAEMK1
SDWATRM1 EQU   SDWAEMK1
@NM00101 EQU   SDWAEMK1
SDWAPER1 EQU   SDWAEMK1
@NM00100 EQU   SDWAEMK1
SDWAIOBR EQU   SDWA+100
SDWAEPA  EQU   SDWA+96
@NM00099 EQU   SDWANAME+4
SDWARBAD EQU   SDWANAME
SDWAGR15 EQU   SDWAGRSV+60
SDWAGR14 EQU   SDWAGRSV+56
SDWAGR13 EQU   SDWAGRSV+52
SDWAGR12 EQU   SDWAGRSV+48
SDWAGR11 EQU   SDWAGRSV+44
SDWAGR10 EQU   SDWAGRSV+40
SDWAGR09 EQU   SDWAGRSV+36
SDWAGR08 EQU   SDWAGRSV+32
SDWAGR07 EQU   SDWAGRSV+28
SDWAGR06 EQU   SDWAGRSV+24
SDWAGR05 EQU   SDWAGRSV+20
SDWAGR04 EQU   SDWAGRSV+16
SDWAGR03 EQU   SDWAGRSV+12
SDWAGR02 EQU   SDWAGRSV+8
SDWAGR01 EQU   SDWAGRSV+4
SDWAGR00 EQU   SDWAGRSV
SDWANXTP EQU   SDWACTL2+5
SDWASGP  EQU   SDWAPMKP
SDWAEUP  EQU   SDWAPMKP
SDWADOP  EQU   SDWAPMKP
SDWAFPP  EQU   SDWAPMKP
SDWACCP  EQU   SDWAPMKP
SDWAILP  EQU   SDWAPMKP
SDWAINTP EQU   SDWACTL2+2
SDWASPVP EQU   SDWAMWPP
SDWAWATP EQU   SDWAMWPP
SDWAMCKP EQU   SDWAMWPP
@NM00098 EQU   SDWAMWPP
SDWAKEYP EQU   SDWAMWPP
SDWAEXTP EQU   SDWACMKP
SDWAIOP  EQU   SDWACMKP
SDWANXTA EQU   SDWACTL1+5
SDWASGA  EQU   SDWAPMKA
SDWAEUA  EQU   SDWAPMKA
SDWADOA  EQU   SDWAPMKA
SDWAFPA  EQU   SDWAPMKA
SDWACCA  EQU   SDWAPMKA
SDWAILA  EQU   SDWAPMKA
SDWAINTA EQU   SDWACTL1+2
SDWASPVA EQU   SDWAMWPA
SDWAWATA EQU   SDWAMWPA
SDWAMCKA EQU   SDWAMWPA
@NM00097 EQU   SDWAMWPA
SDWAKEYA EQU   SDWAMWPA
SDWAEXTA EQU   SDWACMKA
SDWAIOA  EQU   SDWACMKA
SDWACMPC EQU   SDWAABCC+1
@NM00096 EQU   SDWACMPF
SDWASTCC EQU   SDWACMPF
@NM00095 EQU   SDWACMPF
SDWASTEP EQU   SDWACMPF
SDWAREQ  EQU   SDWACMPF
SDWAPARM EQU   SDWA
ASCBEND  EQU   ASCB+208
ASCBSRBT EQU   ASCB+200
ASCBSWTL EQU   ASCB+196
ASCBRS14 EQU   ASCB+195
ASCBSMCT EQU   ASCB+194
ASCBRS12 EQU   ASCB+192
ASCBPCTT EQU   ASCB+188
ASCBVGTT EQU   ASCB+184
ASCBRV43 EQU   ASCBSRQ4
ASCBRV42 EQU   ASCBSRQ4
ASCBRV41 EQU   ASCBSRQ4
ASCBRV40 EQU   ASCBSRQ4
ASCBRV39 EQU   ASCBSRQ4
ASCBRV38 EQU   ASCBSRQ4
ASCBRV37 EQU   ASCBSRQ4
ASCBRV36 EQU   ASCBSRQ4
ASCBRV35 EQU   ASCBSRQ3
ASCBRV34 EQU   ASCBSRQ3
ASCBRV33 EQU   ASCBSRQ3
ASCBRV32 EQU   ASCBSRQ3
ASCBRV31 EQU   ASCBSRQ3
ASCBRV30 EQU   ASCBSRQ3
ASCBRV29 EQU   ASCBSRQ3
ASCBRV28 EQU   ASCBSRQ3
ASCBRV27 EQU   ASCBSRQ2
ASCBRV26 EQU   ASCBSRQ2
ASCBRV25 EQU   ASCBSRQ2
ASCBRV24 EQU   ASCBSRQ2
ASCBRV23 EQU   ASCBSRQ2
ASCBRV22 EQU   ASCBSRQ2
ASCBRV21 EQU   ASCBSRQ2
ASCBRV20 EQU   ASCBSRQ2
ASCBRV19 EQU   ASCBSRQ1
ASCBRV18 EQU   ASCBSRQ1
ASCBRV17 EQU   ASCBSRQ1
ASCBRV16 EQU   ASCBSRQ1
ASCBRV15 EQU   ASCBSRQ1
ASCBRV14 EQU   ASCBSRQ1
ASCBRV13 EQU   ASCBSRQ1
ASCBSTA  EQU   ASCBSRQ1
ASCBJBNS EQU   ASCB+176
ASCBJBNI EQU   ASCB+172
ASCBMCC  EQU   ASCB+168
ASCBRTWA EQU   ASCB+164
ASCBIQEA EQU   ASCB+160
ASCBXMPQ EQU   ASCB+156
ASCBRS01 EQU   ASCB+154
ASCBFMCT EQU   ASCB+152
ASCBOUXB EQU   ASCB+148
ASCBOUCB EQU   ASCB+144
ASCBMECB EQU   ASCB+140
ASCBQECB EQU   ASCB+136
ASCBLSQH EQU   ASCBLKGP+4
ASCBLOCK EQU   ASCBLKGP
ASCBTCBS EQU   ASCB+124
ASCBNVSC EQU   ASCB+122
ASCBVSC  EQU   ASCB+120
ASCBSRBS EQU   ASCB+118
ASCBSSRB EQU   ASCB+116
ASCBRV06 EQU   ASCBFLG2
ASCBRV05 EQU   ASCBFLG2
ASCBRV04 EQU   ASCBFLG2
ASCBSNQS EQU   ASCBFLG2
ASCBS2S  EQU   ASCBFLG2
ASCBCEXT EQU   ASCBFLG2
ASCBPXMT EQU   ASCBFLG2
ASCBXMPT EQU   ASCBFLG2
ASCBRF07 EQU   ASCBDSP1
ASCBRF06 EQU   ASCBDSP1
ASCBRF05 EQU   ASCBDSP1
ASCBRF04 EQU   ASCBDSP1
ASCBRF03 EQU   ASCBDSP1
ASCBRF02 EQU   ASCBDSP1
ASCBFAIL EQU   ASCBDSP1
ASCBNOQ  EQU   ASCBDSP1
ASCBSWCT EQU   ASCB+112
ASCBASXB EQU   ASCB+108
ASCBTMCH EQU   ASCB+104
ASCBNSWP EQU   ASCBFLG1
ASCBTYP1 EQU   ASCBFLG1
ASCBSTND EQU   ASCBFLG1
ASCBABNT EQU   ASCBFLG1
ASCBTERM EQU   ASCBFLG1
ASCBS3S  EQU   ASCBFLG1
ASCBCMSH EQU   ASCBFLG1
ASCBTOFF EQU   ASCBFLG1
ASCBRF01 EQU   ASCBRCTF
ASCBTMLW EQU   ASCBRCTF
ASCBOUT  EQU   ASCBRCTF
ASCBWAIT EQU   ASCBRCTF
ASCBRV08 EQU   ASCBRCTF
ASCBFQU  EQU   ASCBRCTF
ASCBFRS  EQU   ASCBRCTF
ASCBTMNO EQU   ASCBRCTF
ASCBAFFN EQU   ASCBFW1
ASCBDUMP EQU   ASCB+96
ASCBRV44 EQU   ASCB+92
ASCBUBET EQU   ASCB+88
ASCBECB  EQU   ASCB+84
ASCBJSTL EQU   ASCB+80
ASCBEWST EQU   ASCB+72
ASCBEJST EQU   ASCB+64
ASCBTSB  EQU   ASCB+60
ASCBCSCB EQU   ASCB+56
ASCBRSM  EQU   ASCB+52
ASCBLDA  EQU   ASCB+48
ASCBSTOR EQU   ASCB+44
ASCBDP   EQU   ASCB+43
ASCBRV07 EQU   ASCB+42
ASCBIOSM EQU   ASCB+40
ASCBSEQN EQU   ASCB+38
ASCBASID EQU   ASCB+36
ASCBCPUS EQU   ASCB+32
ASCBSPL  EQU   ASCB+28
ASCBIOSP EQU   ASCB+24
ASCBSYNC EQU   ASCBSUPC+4
ASCBSVRB EQU   ASCBSUPC
ASCBCMSF EQU   ASCB+12
ASCBBWDP EQU   ASCB+8
ASCBFWDP EQU   ASCB+4
ASCBASCB EQU   ASCB
ASCBEGIN EQU   ASCB
XAARNG16 EQU   XAAVRNG2
XAARNG15 EQU   XAAVRNG2
XAARNG14 EQU   XAAVRNG2
XAARNG13 EQU   XAAVRNG2
XAARNG12 EQU   XAAVRNG2
XAARNG11 EQU   XAAVRNG2
XAARNG10 EQU   XAAVRNG2
XAARNG9  EQU   XAAVRNG2
XAARNG8  EQU   XAAVRANG
XAARNG7  EQU   XAAVRANG
XAARNG6  EQU   XAAVRANG
XAARNG5  EQU   XAAVRANG
XAARNG4  EQU   XAAVRANG
XAARNG3  EQU   XAAVRANG
XAARNG2  EQU   XAAVRANG
XAARNG1  EQU   XAAVRANG
XARTCODE EQU   EEXSAS05+6
XACMDATH EQU   EEXSAS05+4
XALTPTR  EQU   EEXSAS05+3
XACRT2   EQU   XARESV
XACENDCK EQU   XARESV
XARES1   EQU   XASWITCH
XASMF44  EQU   XASWITCH
XASMF42  EQU   XASWITCH
XAHRDREQ EQU   XASWITCH
XASTHDCP EQU   XACOMPMS
XAINHDCP EQU   XALTCHG
XAHRDCMD EQU   XASWITCH
XAROUT   EQU   XASWITCH
XALTCON  EQU   XASOPCOD
XACMD    EQU   XASOPCOD
XALTCOM  EQU   XASOPCOD
XARESB   EQU   XASOPCOD
XAOFF    EQU   XASOPCOD
XAON     EQU   XASOPCOD
XARESA   EQU   XASOPCOD
XACON    EQU   XASOPCOD
XAXSACB  EQU   EEXSAS04+4
XAXUTME  EQU   EEXSAS04+2
XAXFREE  EQU   EEXSAS04+1
@NM00094 EQU   XAXMASK
XAXTSL   EQU   XAXMASK
XAXTS    EQU   XAXMASK
@NM00093 EQU   XAXMASK
XAXJOBSL EQU   XAXMASK
XAXJOBS  EQU   XAXMASK
XASOPTR  EQU   @NM00092+1
XASTSAVE EQU   @NM00092
XASPLS3  EQU   EEXSAS03+3
XASSDS8  EQU   XASDS
XASSDS7  EQU   XASDS
XASSDS6  EQU   XASDS
XASSDS5  EQU   XASDS
XASSDS4  EQU   XASDS
XASSDS3  EQU   XASDS
XASSDS2  EQU   XASDS
XASSDS1  EQU   XASDS
XACAHOLD EQU   EEXSAS02+2
XADRES1  EQU   EEXSAS02+1
XAUBLANK EQU   XADUSWIT
XAOUNIT  EQU   XADUSWIT
XAIOCOMP EQU   XADUSWIT
XARES3   EQU   XADUSWIT
XAUDVC   EQU   XADUSWIT
XARES2   EQU   XADUSWIT
XAIPAREN EQU   XADUSWIT
XAXPAREN EQU   XADUSWIT
@NM00091 EQU   EEXSAS01+44
XAT      EQU   EEXSAS01+20
XAF      EQU   EEXSAS01+12
XAI      EQU   EEXSAS01+4
XAH      EQU   EEXSAS01
XASAVSDR EQU   XASAVSTR+68
XASAVSDQ EQU   XASAVSTR+64
XASAVSDP EQU   XASAVSTR+60
XASAVSDO EQU   XASAVSTR+56
XASAVSDN EQU   XASAVSTR+52
XASAVSDM EQU   XASAVSTR+48
XASAVSDL EQU   XASAVSTR+44
XASAVSDK EQU   XASAVSTR+40
XASAVSDJ EQU   XASAVSTR+36
XASAVSDI EQU   XASAVSTR+32
XASAVSDH EQU   XASAVSTR+28
XASAVSDG EQU   XASAVSTR+24
XASAVSDF EQU   XASAVSTR+20
XASAVSDE EQU   XASAVSTR+16
XASAVSDD EQU   XASAVSTR+12
XASAVSDC EQU   XASAVSTR+8
XASAVSDB EQU   XASAVSTR+4
XASAVSDA EQU   XASAVSTR
XASAVLC4 EQU   XASAVLOX+12
XASAVLC3 EQU   XASAVLOX+8
XASAVLC2 EQU   XASAVLOX+4
XASAVLC1 EQU   XASAVLOX
XAK      EQU   XASVRB+44
@NM00090 EQU   XASVRB+41
XAV      EQU   XASVRB+24
XAL      EQU   @NM00089+1
XAR      EQU   @NM00088+1
XAE      EQU   @NM00088
XAP      EQU   XSA
CHARSV16 EQU   CHSHORT+100
CHARSV15 EQU   CHSHORT+96
CHJSCBVS EQU   CHSHORT+92
CHUSCVS  EQU   CHSHORT+88
@NM00086 EQU   CHSHORT+84
@NM00085 EQU   CHSHORT+80
CHSQA    EQU   CHSHORT+44
CHQPA    EQU   CHSHORT+8
CHJCL    EQU   CHSHORT+4
CHSPC    EQU   CHSHORT
CHSPB    EQU   CHSTEP+4
CHTCB    EQU   CHSTEP+1
CHARSV23 EQU   CHSWT
CHARSV22 EQU   CHSWT
CHARSV21 EQU   CHSWT
CHAC     EQU   CHSWT
CHPSF    EQU   CHSWT
CHPSD    EQU   CHSWT
CHJCT    EQU   CHSWT
CHARSV20 EQU   CHSWT
CHCECB   EQU   CHASM+20
CHECB    EQU   CHASM+16
CHRGNAD  EQU   CHASM+12
CHARSV18 EQU   CHRGNSZ+1
CHRPRTY  EQU   CHRGNSZ
@NM00084 EQU   CHCIBP
CHEND    EQU   CHCIBP
CHECBP   EQU   CHASM
CHDER    EQU   CHPROCSN+4
CHARSV10 EQU   CHACT1
CHARSV09 EQU   CHACT1
CHARSV08 EQU   CHACT1
CHARSV07 EQU   CHACT1
CHARSV06 EQU   CHACT1
CHARSV05 EQU   CHACT1
CHARSV04 EQU   CHACT1
CHRDWTR  EQU   CHACT1
CHARSV30 EQU   CHPROCSN+2
CHQID    EQU   CHPROCSN
CHASID   EQU   CHTJID
CHUCMP   EQU   CHAIN+29
CHTRKID  EQU   CHPKE
CHCIBCTR EQU   CHAIN+27
CHUNIT   EQU   CHAIN+24
CHCLS    EQU   CHAIN+16
CHPCOI   EQU   CHPARM
CHIFY    EQU   CHACT
CHAIFX   EQU   CHACT
CHCLD    EQU   CHACT
CHCL     EQU   CHACT
CHDSI    EQU   CHACT
CHDISC   EQU   CHACT
CHTERM   EQU   CHACT
CHSWAP   EQU   CHACT
CHABTERM EQU   CHSTS
CHFC     EQU   CHSTS
CHDL     EQU   CHSTS
CHAD     EQU   CHSTS
CHQSPC   EQU   CHSTS
CHSOUT   EQU   CHSTS
CHSYS    EQU   CHSTS
CHAP     EQU   CHSTS
CHSZE    EQU   CHFLG+1
CHVCD    EQU   CHFLG
CHPTR    EQU   CHAIN
UCBERADR EQU   UCBUCS+12
UCBFCBID EQU   UCBUCS+8
UCBERCNT EQU   UCBUCS+7
UCBRSV51 EQU   UCBUCS+6
UCBRSV50 EQU   UCBFCBOP
UCBRSV49 EQU   UCBFCBOP
UCBRSV48 EQU   UCBFCBOP
UCBRSV47 EQU   UCBFCBOP
UCBRSV46 EQU   UCBFCBOP
UCBRSV45 EQU   UCBFCBOP
UCBRSV44 EQU   UCBFCBOP
UCBFCBO1 EQU   UCBFCBOP
UCBUCSPE EQU   UCBUCSOP
UCBRSV43 EQU   UCBUCSOP
UCBRSV42 EQU   UCBUCSOP
UCBRSV41 EQU   UCBUCSOP
UCBRSV40 EQU   UCBUCSOP
UCBRSV39 EQU   UCBUCSOP
UCBUCSO2 EQU   UCBUCSOP
UCBUCSO1 EQU   UCBUCSOP
UCBUCSID EQU   UCBUCS
UCBMDRBA EQU   UCBMDRBF+1
UCBRV075 EQU   UCBMDRBF
UCBRV074 EQU   UCB3800X+32
UCBIMAGE EQU   UCB3800X+28
UCBFCBNM EQU   UCB3800X+24
UCBCHAR4 EQU   UCB3800X+20
UCBCHAR3 EQU   UCB3800X+16
UCBCHAR2 EQU   UCB3800X+12
UCBCHAR1 EQU   UCB3800X+8
UCBCGMID EQU   UCB3800X+4
UCBBRSTA EQU   UCBACTIV
UCBRV063 EQU   UCBACTIV
UCBRV062 EQU   UCBACTIV
UCBRV061 EQU   UCBACTIV
UCBRV060 EQU   UCBACTIV
UCBRV059 EQU   UCBACTIV
UCBRV058 EQU   UCBACTIV
UCBRV057 EQU   UCBACTIV
UCBRV050 EQU   UCB3800X+2
UCBCGMNO EQU   UCB3800X+1
UCBRV083 EQU   UCBOPTNS
UCBBRSTR EQU   UCBOPTNS
UCBRV056 EQU   UCBOPTNS
UCBRV055 EQU   UCBOPTNS
UCBRV054 EQU   UCBOPTNS
UCBRV053 EQU   UCBOPTNS
UCBRV052 EQU   UCBOPTNS
UCBRV051 EQU   UCBOPTNS
UCBRV073 EQU   UCB3540X+7
UCBRV072 EQU   UCBDKBYT
UCBRV071 EQU   UCBDKBYT
UCBRV070 EQU   UCBDKBYT
UCBRV069 EQU   UCBDKBYT
UCBRV068 EQU   UCBDKBYT
UCBRV067 EQU   UCBDKBYT
UCBVLVER EQU   UCBDKBYT
UCBDKAMX EQU   UCBDKBYT
UCBVLSER EQU   UCB3540X
UCBRDATA EQU   UCBOCR+4
UCBFRID  EQU   UCBOCR
UCBCLN   EQU   UCBMT+14
UCBERG   EQU   UCBMT+12
UCBMS    EQU   UCBMT+11
UCBNB    EQU   UCBMT+10
UCBPW    EQU   UCBMT+9
UCBPR    EQU   UCBMT+8
UCBSIO   EQU   UCBMT+6
UCBTW    EQU   UCBMT+5
UCBTR    EQU   UCBMT+4
UCBTWT   EQU   UCBMT+3
UCBTRT   EQU   UCBMT+2
UCBCTD   EQU   UCBMT
UCBWTOID EQU   UCBCMEXT+17
UCBMIHTI EQU   UCBCMEXT+16
UCBASID  EQU   UCBCMEXT+14
UCBMFCNT EQU   UCBCMEXT+12
UCBPMSK  EQU   UCBCMEXT+10
UCBCCWOF EQU   UCBCMEXT+8
UCBRV041 EQU   UCBCMEXT+6
UCBRV036 EQU   UCBFLP1
UCBRV035 EQU   UCBFLP1
UCBERLOG EQU   UCBFLP1
UCBRV033 EQU   UCBFLP1
UCBINHIO EQU   UCBFLP1
UCBNSWAP EQU   UCBFLP1
UCBSHRUP EQU   UCBFLP1
UCBNSRCH EQU   UCBFLP1
UCBSNSCT EQU   UCBCMEXT+4
UCBHPDV  EQU   @NM00083
UCBHALI  EQU   @NM00083
UCBRSV09 EQU   @NM00083
UCBRSV08 EQU   @NM00083
UCBRSV07 EQU   @NM00083
UCBRSV06 EQU   @NM00083
UCBRSV05 EQU   @NM00083
UCBRSV04 EQU   @NM00083
UCBDTI   EQU   UCBCMEXT+2
UCBSTI   EQU   UCBCMEXT+1
UCBETI   EQU   UCBCMEXT
UCBEXTP  EQU   UCBEXTPT+1
UCBDDRSW EQU   UCBFLC
UCBTICBT EQU   UCBFLC
UCBIVRR  EQU   UCBFLC
UCBIVRS  EQU   UCBFLC
UCBITF   EQU   UCBFLC
UCBUDE   EQU   UCBFLC
UCBWAA   EQU   UCBFLC
UCBATTP  EQU   UCBFLC
UCBUNTYP EQU   UCBTBYT4
UCBRSV11 EQU   UCBDVCLS
UCBRSV10 EQU   UCBDVCLS
UCB3CHAR EQU   UCBDVCLS
UCB3UREC EQU   UCBDVCLS
UCB3DISP EQU   UCBDVCLS
UCB3DACC EQU   UCBDVCLS
UCB3COMM EQU   UCBDVCLS
UCB3TAPE EQU   UCBDVCLS
UCBDVPWR EQU   UCB2OPT7
UCBVLPWR EQU   UCB2OPT6
UCB2OPT5 EQU   UCBTBYT2
UCBRVDEV EQU   UCBRWTAU
UCBRPS   EQU   UCBDUDN2
UCBRR    EQU   UCBDUDN1
UCB2OPT1 EQU   UCBTBYT2
UCB2OPT0 EQU   UCBTBYT2
UCB1FEA7 EQU   UCBTBYT1
UCBD6250 EQU   UCB1FEA6
UCBD1600 EQU   UCB1FEA5
UCB1FEA4 EQU   UCBTBYT1
UCB1FEA3 EQU   UCBTBYT1
UCB1FEA2 EQU   UCBTBYT1
UCB1FEA1 EQU   UCBTBYT1
UCB1FEA0 EQU   UCBTBYT1
UCBRV029 EQU   UCBWGT
UCBVHRSN EQU   UCBWGT
UCBVORSN EQU   UCBWGT
UCBMTPXP EQU   UCBWGT
UCBREW   EQU   UCBWGT
UCBPUB   EQU   UCBWGT
UCBOUT   EQU   UCBWGT
UCBIN    EQU   UCBWGT
UCBCPU   EQU   UCBOB+11
UCBLCI   EQU   UCBOB+10
UCBCNT   EQU   UCBOB+9
UCBRV017 EQU   UCBCHM1
UCBRV016 EQU   UCBCHM1
UCBRV015 EQU   UCBCHM1
UCBRV014 EQU   UCBCHM1
UCBSPB   EQU   UCBPTH1
UCBPPB   EQU   UCBPTH1
UCBSPA   EQU   UCBPTH0
UCBPPA   EQU   UCBPTH0
UCBSIGP  EQU   UCBFLB
UCBVALPH EQU   UCBFLB
UCBCRHSN EQU   UCBFLB
UCBCRHRV EQU   UCBFLB
UCBRESVH EQU   UCBFLB
UCBSPST  EQU   UCBFLB
UCBASNS  EQU   UCBFLB
UCBIORST EQU   UCBFLB
UCBQISCE EQU   UCBFL1
UCBACTV  EQU   UCBFL1
UCBSAP   EQU   UCBFL1
UCBNOTRC EQU   UCBCUB
UCBPSNS  EQU   UCBFL1
UCBUSING EQU   UCBPST
UCBNOTRD EQU   UCBNRY
UCBBUSYD EQU   UCBBSY
UCBUA    EQU   UCBCHAN+1
UCBCHA   EQU   UCBCHAN
UCBDADI  EQU   UCBSTAT
UCBSYSR  EQU   UCBSTAT
UCBPRES  EQU   UCBSTAT
UCBALOC  EQU   UCBSTAT
UCBUNLD  EQU   UCBSTAT
UCBRESV  EQU   UCBSTAT
UCBCHGS  EQU   UCBSTAT
UCBONLI  EQU   UCBSTAT
UCBID    EQU   UCBOB+2
UCBALTPH EQU   UCBFL5
UCBALTCU EQU   UCBFL5
UCBNALOC EQU   UCBFL5
UCBENVRD EQU   UCBFL5
UCBVSDR  EQU   UCBFL5
UCBSASK  EQU   UCBFL5
UCBAMV   EQU   UCBAF
UCBDCC   EQU   UCBFL5
UCBMONT  EQU   UCBJBNR
UCBRV011 EQU   UCBJBNR
UCBMMSGP EQU   UCBJBNR
UCBOLDSM EQU   UCBJBNR
UCBRV003 EQU   UCBJBNR
UCBDUC   EQU   UCBJBNR
UCBJES3  EQU   UCBJBNR
UCBVRDEV EQU   UCBJBNR
UCBCMSEG EQU   UCBOB
UCBPFXND EQU   UCB+512
UCBIOQ   EQU   UCB+508
UCBLOCK  EQU   UCB+504
UCBPXST  EQU   UCB+504
@NM00080 EQU   UCB
WPLMLLT2 EQU   WPLMLLTF+1
WPLRSV24 EQU   WPLMLLT1
WPLRSV23 EQU   WPLMLLT1
WPLRSV22 EQU   WPLMLLT1
WPLRSV21 EQU   WPLMLLT1
WPLMLLTD EQU   WPLMLLT1
WPLMLLTC EQU   WPLMLLT1
WPLMLLTB EQU   WPLMLLT1
WPLMLLTA EQU   WPLMLLT1
WPLLTF2  EQU   WPLLTF+1
WPLRSV20 EQU   WPLLTF1
WPLRSV19 EQU   WPLLTF1
WPLRSV18 EQU   WPLLTF1
WPLRSV17 EQU   WPLLTF1
WPLLTFD  EQU   WPLLTF1
WPLLTFC  EQU   WPLLTF1
WPLLTFB  EQU   WPLLTF1
WPLLTFA  EQU   WPLLTF1
WPLQID   EQU   WPLFLGS+6
WPLRSV32 EQU   WPLMSGT2
WPLRSV31 EQU   WPLMSGT2
WPLRSV30 EQU   WPLMSGT2
WPLRSV29 EQU   WPLMSGT2
WPLRSV28 EQU   WPLMSGT2
WPLRSV27 EQU   WPLMSGT2
WPLRSV26 EQU   WPLMSGT2
WPLRSV25 EQU   WPLMSGT2
WPLRSV16 EQU   WPLMSGT1
WPLRSV15 EQU   WPLMSGT1
WPLMSGTF EQU   WPLMSGT1
WPLRSV14 EQU   WPLMSGT1
WPLMSGTD EQU   WPLMSGT1
WPLMSGTC EQU   WPLMSGT1
WPLMSGTB EQU   WPLMSGT1
WPLMSGTA EQU   WPLMSGT1
WPLRSV13 EQU   WPLROUT2
WPLROUTO EQU   WPLROUT2
WPLROUTN EQU   WPLROUT2
WPLROUTM EQU   WPLROUT2
WPLROUTL EQU   WPLROUT2
WPLROUTK EQU   WPLROUT2
WPLROUTJ EQU   WPLROUT2
WPLROUTI EQU   WPLROUT2
WPLROUTH EQU   WPLROUT1
WPLROUTG EQU   WPLROUT1
WPLROUTF EQU   WPLROUT1
WPLROUTE EQU   WPLROUT1
WPLROUTD EQU   WPLROUT1
WPLROUTC EQU   WPLROUT1
WPLROUTB EQU   WPLROUT1
WPLROUTA EQU   WPLROUT1
WPLRSV12 EQU   WPLDESC2
WPLRSV11 EQU   WPLDESC2
WPLRSV10 EQU   WPLDESC2
WPLRSV09 EQU   WPLDESC2
WPLRSV08 EQU   WPLDESC2
WPLRSV07 EQU   WPLDESC2
WPLDESCJ EQU   WPLDESC2
WPLDESCI EQU   WPLDESC2
WPLDESCH EQU   WPLDESC1
WPLDESCG EQU   WPLDESC1
WPLDESCF EQU   WPLDESC1
WPLDESCE EQU   WPLDESC1
WPLDESCD EQU   WPLDESC1
WPLDESCC EQU   WPLDESC1
WPLDESCB EQU   WPLDESC1
WPLDESCA EQU   WPLDESC1
WPLTXTL  EQU   WPLTXT+125
@NM00079 EQU   WPLTXT
WPLRSV05 EQU   WPLMCSF2
WPLRSV04 EQU   WPLMCSF2
WPLMCSFN EQU   WPLMCSF2
WPLRSV03 EQU   WPLMCSF2
WPLNOWTP EQU   WPLMCSF2
WPLMCSFK EQU   WPLMCSF2
WPLMCSFJ EQU   WPLMCSF2
WPLMCSFI EQU   WPLMCSF2
WPLMCSFH EQU   WPLMCSF1
WPLMCSFG EQU   WPLMCSF1
WPLMCSFF EQU   WPLMCSF1
WPLMCSFE EQU   WPLMCSF1
WPLMCSFD EQU   WPLMCSF1
WPLMCSFC EQU   WPLMCSF1
WPLMCSFB EQU   WPLMCSF1
WPLMCSFA EQU   WPLMCSF1
WPLRECB  EQU   WPLRF+4
WPLRPTRA EQU   WPLRPTR+1
WPLRLN   EQU   WPLRPTR
@NM00078 EQU   APUB+120
@NM00077 EQU   APUB+112
APUBJBNM EQU   APUB+104
APUBSIZE EQU   APUB+102
APUBRSVD EQU   APUB+100
APUBASCB EQU   APUBDCB
@NM00076 EQU   APUBIOFG+4
@NM00075 EQU   APUBIOF3
APUBISHR EQU   APUBIOF3
APUBIRIP EQU   APUBIOF3
@NM00074 EQU   APUBIOF2
APUBIEXC EQU   APUBIOF2
@NM00073 EQU   APUBIOF1
APUBIIPL EQU   APUBIOF1
APUBIERR EQU   APUBIOF1
@NM00072 EQU   APUBIOF0
APUBICNL EQU   APUBIOF0
APUBINRG EQU   APUBIOF0
APUBIDAB EQU   APUBIOF0
APUBIDWN EQU   APUBIOF0
@NM00071 EQU   APUB+85
@NM00070 EQU   APUBSTAT
APUBQISC EQU   APUBSTAT
APUBPDMP EQU   APUBSTAT
APUBFDMP EQU   APUBSTAT
APUBRIPL EQU   APUBSTAT
@NM00069 EQU   APUBALF3
APUBSCAL EQU   APUBALF3
APUBSCAV EQU   APUBALF3
APUBBIST EQU   APUBALF3
APUBBTST EQU   APUBALF3
@NM00068 EQU   APUBALF2
APUBBOPT EQU   APUBALF2
APUBBREQ EQU   APUBALF2
APUBBYT1 EQU   APUBALF2
@NM00067 EQU   APUBALF1
@NM00066 EQU   APUBALF0
APUBSBCH EQU   APUBALF0
APUBCPU  EQU   APUB+78
APUBINIT EQU   APUB+76
APUBIPL  EQU   APUB+74
APUBERRJ EQU   APUBERRS+20
APUBERRD EQU   APUBERRS+18
APUBERRC EQU   APUBERRS+16
APUBERRB EQU   APUBERRS+14
APUBERRA EQU   APUBERRS+12
APUBERR9 EQU   APUBERRS+10
APUBERR3 EQU   APUBERRS+8
APUBERR2 EQU   APUBERRS+6
APUBERR1 EQU   APUBERRS+4
APUBERR0 EQU   APUBERRS+2
@NM00065 EQU   APUBERRS
@NM00064 EQU   APUB+50
APUBERRT EQU   APUB+44
APUBMSTP EQU   APUB+40
APUBUBAP EQU   APUB+36
APUBIOCT EQU   APUB+24
APUBAPCT EQU   APUB+20
APUBUSER EQU   APUB+16
APUBNXIO EQU   APUB+12
APUBID   EQU   APUB
APSVWORK EQU   APSV+80
@NM00063 EQU   APSV+80
APSVFREE EQU   APSV+76
APSVAPSM EQU   APSV+72
APSVRG12 EQU   APSVREGS+56
APSVRG11 EQU   APSVREGS+52
APSVRG10 EQU   APSVREGS+48
APSVRG9  EQU   APSVREGS+44
APSVRG8  EQU   APSVREGS+40
APSVRG7  EQU   APSVREGS+36
APSVRG6  EQU   APSVREGS+32
APSVRG5  EQU   APSVREGS+28
APSVRG4  EQU   APSVREGS+24
APSVRG3  EQU   APSVREGS+20
APSVRG2  EQU   APSVREGS+16
APSVRG1  EQU   APSVREGS+12
APSVRG0  EQU   APSVREGS+8
APSVRG15 EQU   APSVREGS+4
APSVRG14 EQU   APSVREGS
APSVNEXT EQU   APSV+8
APSVPREV EQU   APSV+4
APSVAPSC EQU   APSV
@NM00062 EQU   APESMV+6
@NM00061 EQU   APESMV+4
APESMVKW EQU   APESMV+2
APESMVMS EQU   APESMV
APESRTRY EQU   APESREGF
APESREGE EQU   APESREGS+56
APESREGD EQU   APESREGS+52
APESREGC EQU   APESREGS+48
APESREGB EQU   APESREGS+44
APESREGA EQU   APESREGS+40
APESREG9 EQU   APESREGS+36
APESREG8 EQU   APESREGS+32
APESREG7 EQU   APESREGS+28
APESREG6 EQU   APESREGS+24
APESREG5 EQU   APESREGS+20
APESREG4 EQU   APESREGS+16
APESREG3 EQU   APESREGS+12
APESREG2 EQU   APESREGS+8
APESREG1 EQU   APESREGS+4
APESREG0 EQU   APESREGS
@NM00053 EQU   APDS+144
@NM00052 EQU   APDS+100
APDSAPEP EQU   APDS+96
@NM00051 EQU   APDS+94
APDSSIZE EQU   APDS+92
APDSITCB EQU   APDS+80
APDSMSK  EQU   APDS+72
@NM00050 EQU   APDS+69
APDSIOFS EQU   APDS+68
APDSDUMP EQU   APDS+67
APDSPGFX EQU   APDS+66
@NM00049 EQU   APDSFLG1
APDSFRST EQU   APDSFLG1
APDSSLPS EQU   APDSFLG0
APDSLSR  EQU   APDSFLG0
APDSIER  EQU   APDSFLG0
APDSVPER EQU   APDSFLG0
APDSVLER EQU   APDSFLG0
APDSTPGM EQU   APDSFLG0
APDSDSAP EQU   APDS+60
APDSASCB EQU   APDS+52
APDSPERR EQU   APDS+40
APDSLERR EQU   APDS+32
APDSDDNM EQU   APDS+24
APDSDEB  EQU   APDSTD+4
APDSTCB  EQU   APDSTD
APDSAPCT EQU   APDS+12
APDSUSER EQU   APDS+8
APDSID   EQU   APDS
@NM00033 EQU   APCT+1556
APCTSVCT EQU   APCT+1552
APCTDAVT EQU   APCT+1548
APCTLOGL EQU   APCT+1544
@NM00032 EQU   APCT+1540
APCTDMPU EQU   APCT+1536
APCTDMPM EQU   APCT+1532
APCTNDMP EQU   APCT+1530
APCTASID EQU   APCT+1528
APCTLGPG EQU   APCT+1526
APCTLGLN EQU   APCT+1524
APCTAPVU EQU   APCT+1520
APCTABR  EQU   APCT+1116
APCTACTR EQU   APCT+1112
APCTLOGD EQU   APCT+1108
APCTDCLD EQU   APCT+1104
APCTIOAP EQU   APCT+1100
@NM00031 EQU   APCT+1080
@NM00030 EQU   APCT+1078
APCTKCAX EQU   APCT+1076
APCTABND EQU   APCT+1072
@NM00029 EQU   APCT+1068
APCTAPIO EQU   APCT+1064
APCTCSCT EQU   APCT+1060
APCTSTDF EQU   APCT+1056
APCTSTMX EQU   APCT+1052
APCTRGMX EQU   APCT+1048
APCTSIZE EQU   APCT+1046
APCTCTUB EQU   APCT+1045
APCTMFID EQU   APCT+1044
APCTMFSZ EQU   APCT+1040
APCTCRTN EQU   APCT+1036
APCTAPCP EQU   APCT+1032
APCTAMNA EQU   APCT+1028
APCTEMNA EQU   APCT+1024
APCTAALP EQU   APCT+1020
APCTEALP EQU   APCT+1016
@NM00028 EQU   APCT+1012
@NM00027 EQU   APCT+1008
@NM00026 EQU   APCT+1004
APCTEIPL EQU   APCT+1000
@NM00025 EQU   APCT+996
@NM00024 EQU   APCT+992
@NM00023 EQU   APCT+988
@NM00022 EQU   APCT+984
@NM00021 EQU   APCT+980
APCTECPW EQU   APCT+976
APCTEULD EQU   APCT+972
APCTECPT EQU   APCT+968
APCTEALC EQU   APCT+964
APCTECBL EQU   APCT+960
APCTECIT EQU   APCT+956
APCTCQAF EQU   APCTCQAQ
APCTCQL  EQU   APCTAPCQ+4
APCTCQF  EQU   APCTAPCQ
APCTCQLK EQU   APCT+940
@NM00020 EQU   @NM00016+2
@NM00019 EQU   APCTPRSW
APCTAPST EQU   APCTPRSW
@NM00018 EQU   APCTPRSW
@NM00017 EQU   APCTSTAT
APCTWARM EQU   APCTSTAT
APCTTERM EQU   APCTSTAT
APCTHALT EQU   APCTSTAT
APCTQSCE EQU   APCTSTAT
APCTSTRT EQU   APCTSTAT
APCTACT  EQU   APCTSTAT
APCTVUNX EQU   APCT+935
APCTSOUT EQU   APCT+934
APCTSV34 EQU   APCT+932
APCTMJOB EQU   APCT+928
APCTTCB  EQU   APCT+924
APCTASCB EQU   APCT+920
APCTDCNW EQU   APCT+918
APCTDCNR EQU   APCT+916
@NM00015 EQU   APCT+912
@NM00014 EQU   APCT+908
@NM00013 EQU   APCT+904
@NM00012 EQU   APCT+900
@NM00011 EQU   APCTERRS+22
APCTERTJ EQU   APCTERRS+20
APCTERTD EQU   APCTERRS+18
APCTERTC EQU   APCTERRS+16
APCTERTB EQU   APCTERRS+14
APCTERTA EQU   APCTERRS+12
APCTERT9 EQU   APCTERRS+10
APCTERT3 EQU   APCTERRS+8
APCTERT2 EQU   APCTERRS+6
APCTERT1 EQU   APCTERRS+4
APCTERT0 EQU   APCTERRS+2
APCTERTT EQU   APCTERRS
APCTDSAP EQU   APCT+872
APCTISUB EQU   APCT+868
APCTUBAP EQU   APCT+864
APCTUBIC EQU   APCT+856
APCTUBIS EQU   APCT+852
APCTUBLK EQU   APCT+844
APCTBR1A EQU   APCTBR14+2
@NM00010 EQU   APCTBR14
APCTSMSZ EQU   APCTSMAD+2
@NM00009 EQU   APCTSMAD+1
@NM00008 EQU   APCTSMAD
APCTSMIS EQU   APCTSMIN+2
@NM00007 EQU   APCTSMIN+1
APCTSMSP EQU   APCTSMIN
@NM00006 EQU   APCT+30
APCTLINE EQU   APCT+28
APCTLBSZ EQU   APCT+24
APCTREG  EQU   APCT+20
@NM00005 EQU   APCTENQM
APCTSSVT EQU   APCT+8
APCTUSER EQU   APCT+4
APCTID   EQU   APCT
@NM00004 EQU   APCQ+176
@NM00003 EQU   APCQ+172
@NM00002 EQU   APCQ+168
APCQNEMG EQU   APCQSW
APCQNMSG EQU   APCQSW
@NM00001 EQU   APCQSW
APCQPRTY EQU   APCQSW
APCQINT  EQU   APCQSW
APCQCQAP EQU   APCQ+16
APCQIINF EQU   APCQ+12
APCQUSER EQU   APCQ+8
APCQAPCQ EQU   APCQ+4
APCQID   EQU   APCQ
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00241 EQU   @RC00237
@RC00249 EQU   @RC00208
@RC00271 EQU   @RC00268
@RC00382 EQU   @RC00367
@RC00377 EQU   @RC00367
@RC00413 EQU   @RC00412
@RC00480 EQU   @RC00445
@RC00471 EQU   @RC00445
@RC00447 EQU   @RC00445
@RC00498 EQU   @RC00497
@RC00544 EQU   @RC00493
@RC00406 EQU   @RC00401
@RC00654 EQU   @RC00641
@RC00661 EQU   @RC00641
@RT00669 EQU   @RC00641
@RC00681 EQU   @RC00641
@RC00690 EQU   @RC00689
@RC00730 EQU   @RC00724
@RC00728 EQU   @RC00724
@RC00726 EQU   @RC00724
@RC00624 EQU   @RC00577
@RC00820 EQU   @EL00005
@RT00818 EQU   @EL00005
@RC00873 EQU   @RC00872
@RC00943 EQU   @RC00942
@RC00988 EQU   @EL00010
@RC01009 EQU   @EL00011
@RC01007 EQU   @EL00011
@RC01005 EQU   @EL00011
@RC01003 EQU   @EL00011
@RC01001 EQU   @EL00011
@RC01053 EQU   @EL00012
@RC00283 EQU   @RC00271
@RC00275 EQU   @RC00271
@RC00457 EQU   @RC00447
@RC00448 EQU   @RC00447
@RC00499 EQU   @RC00498
@RC00545 EQU   @RC00544
@RC00691 EQU   @RC00690
@RC00944 EQU   @RC00943
@RC00989 EQU   @RC00988
@RC00279 EQU   @RC00275
@RC00288 EQU   @RC00283
@RC00296 EQU   @RC00283
@RC00308 EQU   @RC00296
@ENDDATA EQU   *
         END   IGTD60,(C'PLS1615',0701,77174)
