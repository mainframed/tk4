* /* START OF SPECIFICATIONS ******************************************
*
*01*  MODULE-NAME = IEECVETJ
*
*01*  DESCRIPTIVE-NAME = ROLL MODE ROUTINE
*
*01*  COPYRIGHT = NONE
*
*01*  STATUS = CHANGE LEVEL 1 FOR VS2 RELEASE 2
*
*     APARS FIXED = OZ14058
*
*01*  FUNCTION = TO ROLL MESSAGES OFF THE SCREEN BASED ON A TIME
*     INTERVAL, RTME, AND A NUMBER OF LINES TO BE ROLLED, RNUM. ALSO,
*     TO CALCULATE THE APPROPRIATE POSITION AND VALUE OF QNUM, THE
*     NUMBER OF MESSAGE LINES WAITING TO ROLL ONTO THE SCREEN WHEN EACH
*     ROLL COMPLETES.
*
*01*  NOTES = LOCAL AND CROSS-MEMORY LOCKS ARE RELEASED ON ENTRY VIA
*     THE FREELOCK SUBROUTINE ADDRESSED IN THE CXSA (CSAXC).
*
*02*    CHARACTER-CODE-DEPENDENCIES = NONE
*
*02*    DEPENDENCIES = NONE
*
*02*    RESTRICTIONS = NONE
*
*02*    REGISTER-CONVENTIONS = SEE REGISTER EQUATES
*
*02*    PATCH-LABEL = ICATCH A DC STATEMENT
*
*01*  MODULE-TYPE = MODULE
*
*02*    PROCESSOR = ASSEMF-370R
*
*02*    MODULE-SIZE = X'496' BYTES
*
*02*    ATTRIBUTES = REENTERABLE
*
*01*  ENTRY-POINT = IEECVETJ
*
*02*    PURPOSE = ALL FUNCTIONS
*
*02*    LINKAGE = BALR
*
*02*    INPUT = REGISTER 1 ADDRESSES THE CXSA AND DCMRNUM INDICATES THE
*       MAXIMUM NUMBER OF LINES TO ROLL.
*
*02*    OUTPUT = REGISTER 1 ADDRESSES THE CXSA, MESSAGES ARE MOVED IN
*       THE PAGEABLE DCM, AND QNUM IS ADJUSTED AND POSITIONED
*
*02*    EXIT-NORMAL = IEECVET2 - DISPLAY ROUTINE 1
*       TO DISPLAY ANY WAITING LINES IF SCREEN MESSAGES WERE MOVED UP
*       TO MAKE ROOM FOR MORE.
*
*02*    EXIT-NORMAL = IEECVETH, P, R, OR U - I/O ROUTINE
*       TO WRITE THE SCREEN MESSAGE AREA IF ONLY THE QNUM UPDATE WAS
*       DONE, AND TO WRITE THE MESSAGE WAITING WARNING LINE IF NO ROLL
*       WAS POSSIBLE AND THERE ARE MESSAGES WAITING TO BE SEEN.
*
*02*    EXIT-ERROR = NONE
*
*01*  EXTERNAL-REFERENCES = NONE
*
*02*    ROUTINES = FREELOCK SUBROUTINE - DEFINED IN IEECVET1, AND
*       ADDRESSED BY WORD CSAXC OF THE CXSA ON ENTRY.
*
*02*    DATA-SETS = NONE
*
*02*    DATA-AREA = NONE
*
*02*    CONTROL-BLOCKS = CXSA,UCM,WQE,CQE,RDCM,TDCM
*
*01*  TABLES = NONE
*
*01*  MACROS = EXECUTABLE - NONE
*     MAPPING - IHAWQE  WQE DSECT
*               IHACTM  CXSA DSECT
*               IHACTM  CQE DSECT
*               IEECUCM UCM DSECT
*               IEERDCM RESIDENT DCM DSECT
*               IEETDCM PAGEABLE DCM DSECT
*
*01*  CHANGE-ACTIVITY = MODULE REWRITTEN COMPLETELY FOR VS2 RELEASE 2.
*     SUPPORT CODE Y02958.
*
**** END OF SPECIFICATIONS *******************************************/
         TITLE 'IEECVETJ ROLL MODE'
IEECVETJ CSECT
         EJECT
***********************************************************************
*        REGISTER EQUATES                                             *
***********************************************************************
R0RNUM   EQU   0                   RNUM VALUE FOR THIS CONSOLE
R1UCME   EQU   1                   UCM ENTRY BASE REGISTER
R2QPTR   EQU   2                        QUEUE ENTRY POINTER
R2WORK   EQU   2                   WORK REGISTER
R3PTRA   EQU   3                   POINTS TO SCT BEYOND LAST VISABLE
R4SCTPTR EQU   4                   POINTS TO CURRENT WORKING SCT
R5MSGPTR EQU   5                   POINTS TO CURRENT WORKING MESSAGE
R6PTRB   EQU   6                   POINTS TO LAST MESSAGE TO MOVE UP
R7LINECT EQU   7                        COUNTER FOR LINES HANDLED
R7WORK   EQU   7                   WORK REGISTER
R8DEL    EQU   8                   COUNTER OF LINES REMOVED
R9QNUM   EQU   9                   COUNTER FOR MESSAGES NOT DISPLAYED
RAMAJOR  EQU   10                       WQE POINTER (MAJOR FOR MLWTO)
RASCT    EQU   10                       SCT ENTRY POINTER
RAWORK   EQU   10                  WORK REGISTER
RBMINOR  EQU   11                       MINOR WQE POINTER
RBWORK   EQU   11                  WORK REGISTER
RCPROG   EQU   12                  PROGRAM BASE REGISTER
RDTDCM   EQU   13                  TDCM BASE REGISTER
RERTN    EQU   14                  RETURN REGISTER
RFCODE   EQU   15                  RETURN CODE FROM SUBROUTINE
RFWORK   EQU   15                  WORK REGISTER
XFBRANCH EQU   15
XERTRN   EQU   14
X1PARM   EQU   1
         EJECT
***********************************************************************
*        PROGRAM INITIALIZATION                                       *
***********************************************************************
         BALR  RCPROG,N0            LOAD PROGRAM BASE REGISTER
         USING *,RCPROG             ESTABLISH ADDRESSABILITY
         B     PATCHEND             BRANCH AROUND PATCH AREA
ICATCH   DC    C'IEECVETJ'          EYE CATCHER
         DC    CL8'&SYSDATE',CL56' ' FOR FIELD MAINTENANCE
PATCHEND EQU   *
         LR    R2WORK,R1UCME        LOAD CXSA ADDRESS
         USING CXSA,R2WORK          ESTABLISH CXSA ADDRESSABILITY
         L     XFBRANCH,CSAXB       ADDRESS GETLOCK SUBROUTINE
         BALR  XERTRN,XFBRANCH      OBTAIN LOCKS
         L     R1UCME,CSAUCM        LOAD UCMENTRY ADDRESS
         USING UCMLIST,R1UCME       ESTABLISH ADDRESSABILITY
         DROP  R2WORK               NO LONGER NEED CXSA BASE
         L     RAWORK,UCMXB         LOAD R-DCM ADDRESS
         USING DCMTSRT,RAWORK       ESTABLISH ADDRESSABILITY
         NI    DCMR2FLG,X'FF'-DCMRXRLL HONOR READY TO ROLL
         L     RDTDCM,DCMADTRN      LOAD T-DCM ADDRESS
         USING DCMSTRT,RDTDCM       ESTABLISH ADDRESSABILITY
         DROP  RAWORK               NO LONGER NEED R-DCM
         MVC   DCMTRACE(DCMTRLEN),DCMTRAC2 SHIFT OLD TRACE ENTRIES
         MVI   DCMTREN1,ID1         PUT CSECT ID INTO
         MVI   DCMTREN2,ID2         NEW TRACE ENTRY
         SR    R8DEL,R8DEL          ZERO DELETED LINES COUNTER
         MVI   DCMUTILT,N0          ZERO OUT UTILITY BYTE
         XC    DCMDSAV(N20),DCMDSAV ZERO OUT WORK AREA
         SR    R0RNUM,R0RNUM            ZERO REGISTER
         IC    R0RNUM,DCMRNUM           LOAD RNUM FOR LATER COMPARE
         SR    R9QNUM,R9QNUM            ZERO REG., USED FOR QNUM COUNT
         EJECT
***********************************************************************
*        PTRA MADE TO POINT TO SCT JUST BEYOND LAST VISABLE MESSAGE   *
*        PTRB MADE TO POINT TO LAST DCM MESSAGE FOR MOVE SUBROUTINE   *
*        MESSAGE QUEUE INDEXED INTO TO ACCOUNT FOR BLANK SCREEN LINES *
***********************************************************************
         CLC   DCMWTBUF(N4),DCMASCRN    STATUS DISPLAY ON FIRST LINE
         BE    MSGWAIT              YES, NO ROLL POSSIBLE
         CLC   DCMWTBUF(N4),DCMLSCRN    ANY DISPLAYS ON SCREEN
         BNL   NOSD                 NO, SET FOR NONE
         L     R3PTRA,DCMWTBUF      POINT TO FIRST LINE OF DISPLAY
         S     R3PTRA,DCMASCRN          SUBTRACT FIRST MESSAGE LINE
         SR    R2WORK,R2WORK            ZERO DIVIDEND REGISTER
         LH    RAWORK,DCMCORLN          LOAD LENGTH OF A DISPLAY LINE
         DR    R2WORK,RAWORK            COMPUTE LINE COUNT
         LH    R2WORK,DCMSCTCN          LOAD LENGTH OF AN SCT ENTRY
         MR    R2WORK,R2WORK            COMPUTE SCT DISPLACEMENT
         A     R3PTRA,DCMAMTAB          POINT TO 1ST. DISPLAY SCT
BLPROC   L     R4SCTPTR,DCMAMTAB    POINT TO 1ST. MSG. SCT
         L     R5MSGPTR,DCMASCRN    POINT TO 1ST. MSG. LINE
         LR    R6PTRB,R4SCTPTR      SAVE PTR FOR MOVE SUBRTN  JE YM8354
ENDTEST  TM    N0(R4SCTPTR),DCMMSGST    END OF SCT ENTRIES
         BO    ADJUST               YES, GO TO NEXT FUNCTION
         TM    N0(R4SCTPTR),DCMMSGIN    LINE CONTAINS MESSAGE
         BZ    HIDDEN               NO, SEE IF LINE IS VISABLE
         LR    R6PTRB,R4SCTPTR      SAVE POINTER FOR MOVE SUBRTN
QBLANK   MVI   N0(R5MSGPTR),BLANK   BLANK FIRST CHAR OF OLD QNUM
         MVI   N1(R5MSGPTR),BLANK   BLANK SECOND CHAR OF OLD QNUM
         AH    R4SCTPTR,DCMSCTCN    BUMP POINTER TO NEXT SCT
         AH    R5MSGPTR,DCMCORLN    BUMP POINTER TO NEXT MESSAGE
         B     ENDTEST              LOOP TO CONTINUE PROCESSING
HIDDEN   CR    R4SCTPTR,R3PTRA      THIS LINE UNDER A DISPLAY
         BNL   ADJUST               YES, GO TO NEXT FUNCTION
         BAL   RERTN,SEARCH         GO TO SEARCH SUBROUTINE
         LTR   RFCODE,RFCODE        TEST RETURN CODE
         BNZ   QBLANK               MSG WAITING, CONTINUE PROC.
         B     QNUMPROC             NO MESSAGES, GO TO CLEANUP
NOSD     L     R3PTRA,DCMADDRL      POINT TO LAST SCT ENTRY
         AH    R3PTRA,DCMSCTCN      POINT TO ONE BEYOND LAST ENTRY
         B     BLPROC               GO TO CHECK BLANK LINES
ADJUST   LH    RBWORK,DCMSCTCN      LOAD SCT ENTRY LENGTH
         MR    RAWORK,R9QNUM        TIMES NUMBER VISABLE BLANKS
         SR    R3PTRA,RBWORK        FLOAT PTRA UP FOR EACH BLANK
         EJECT
***********************************************************************
*        MESSAGES ROLLED UP AND VACATED LINES BLANKED                 *
*        INTERVENTION REQUIRED COUNTER REDUCED IF APPROPRIATE         *
***********************************************************************
SCAN     L     R4SCTPTR,DCMAMTAB    POINT TO FIRST SCT ENTRY
TESTEND  TM    N0(R4SCTPTR),DCMMSGST    END OF SCT ENTRIES
         BO    QNUMPROC             YES, GO TO NEXT FUNCTION
         CR    R4SCTPTR,R3PTRA      IS/WAS LINE UNDER A DISPLAY
         BNL   QNUMPROC             YES, GO TO NEXT FUNCTION
         CR    R8DEL,R0RNUM         RNUM REACHED OR EXCEEDED
         BL    TESTMODE             NO, CHECK MODE=RD
         TM    N1(R4SCTPTR),DCMMSGCT IS THIS A CONTINUATION LINE
         BO    SCANSRCH             YES, ANY LINES LEFT
         B     QNUMPROC             NO, GO TO NEXT FUNCTION
TESTMODE CLI   DCMDEL+N1,ROLDEL     IS MODE EQ ROLL DELETABLE
         BNE   LONGMSG              GO SEE IF CONTINUED
         TM    N1(R4SCTPTR),DCMMSGAC  IS THIS AN ACTION MESSAGE
         BZ    LONGMSG              NO, GO SEE IF CONTINUED
         AH    R4SCTPTR,DCMSCTCN    BUMP POINTER TO NEXT SCT
         B     TESTEND              LOOP TO CONTINUE PROCESSING
LONGMSG  TM    N0(R4SCTPTR),DCMMSGCN IS THIS MESSAGE CONTINUED
         BO    SEEALL               YES, SEE IF ALL VISABLE
SCANSRCH BAL   RERTN,SEARCH         GO TO SEARCH SUBROUTINE
         LTR   RFCODE,RFCODE        TEST RETURN CODE
         BNZ   TESTIR               MSG. WAITING, CHECK I.R. COUNT
CONTLINE TM    N1(R4SCTPTR),DCMMSGCT    IS THIS A CONTINUATION LINE
         BZ    QNUMPROC             NO, GO TO NEXT FUNCTION
TESTIR   DS    0H
MOVEUP   BAL   RERTN,MOVER          GO TO MOVER SUBROUTINE
         B     TESTEND              LOOP TO CONTINUE PROCESSING
SEEALL   LR    R2WORK,R4SCTPTR      LOAD CURRENT SCT POINTER
LOOP     AH    R2WORK,DCMSCTCN      BUMP TO NEXT SCT ENTRY
         CR    R2WORK,R3PTRA        IS THIS LINE UNDER A DISPLAY
         BNL   QNUMPROC             YES, GO TO NEXT FUNCTION
         TM    N0(R2WORK),DCMMSGCN  IS LINE CONTINUED
         BZ    SCANSRCH             NO, ALL IS VISABLE
         B     LOOP                 LOOP TO CONTINUE SCAN
         EJECT
***********************************************************************
*        QNUM COMPUTED AND PUT ON PROPER DISPLAY MESSAGE LINE         *
*        EXIT IS DETERMINED BASED ON CONDITIONS DETERMINED            *
***********************************************************************
QNUMPROC SR    R9QNUM,R9QNUM        ZERO QNUM COUNTER
COUNTNUM BAL   RERTN,SEARCH         GO TO SEARCH SUBROUTINE
         LTR   RFCODE,RFCODE        TEST RETURN CODE
         BNZ   COUNTNUM             MORE MESSAGES, LOOP BACK
         CH    R9QNUM,MAXNUM        MORE THAN 99 MESSAGES ON QUEUE
         BH    BIGQ                 YES, QUEUE IS OVERLOADED
         CVD   R9QNUM,DCMPACK       CONVERT QNUM TO DECIMAL
         UNPK  DCMPACK(N4),DCMCVBIN(N4) UNPACK RESULT
         OI    DCMPACK+N3,ZONE      SET ZONE OF RESULT
CONVERT  S     R3PTRA,DCMAMTAB      GET SCT DISPLACEMENT OF PTRA
         SR    R2WORK,R2WORK        ZERO DIVIDEND REGISTER
         LH    RAWORK,DCMSCTCN      LOAD LENGTH OF SCT ENTRY
         DR    R2WORK,RAWORK        COMPUTE NUMBER OF SCT ENTRY
         LH    R2WORK,DCMCORLN          LOAD LENGTH OF DISPLAY LINE
         MR    R2WORK,R2WORK            GET MESSAGE LINE DISPLACEMENT
         A     R3PTRA,DCMASCRN          ADD POINTER TO 1ST. MESSAGE
         LTR   R8DEL,R8DEL          HAVE ANY MESSAGES BEEN ROLLED
         BZ    NOROLL               NO, JUST STORE UPDATED QNUM
         MVC   N0(N2,R3PTRA),DCMPACK+N2 MOVE QNUM TO PROPER LINE
         OI    DCMIOCM2,DCMBLWRR    BLANK RIGHT HALF OF WNG LINE
         OI    DCMIOCM1,DCMWRWRN+DCMWRMSG  WRITE WARNING LINE AND FULL *
                                    MESSAGE AREA
         L     RAWORK,UCMXB         ADDRESS RESIDENT DCM
         USING DCMTSRT,RAWORK       ESTABLISH ADDRESSABILITY
         NI    DCMR2FLG,X'FF'-DCMRXSFL TURN OFF SCREEN FULL
         NI    UCMDEVC,X'FF'-UCMDEVA ALSO UCM SCREEN FULL
         L     X1PARM,DCMCXSVE      PASS CXSA ADDRESS
         L     XFBRANCH,DCMNDSP1    LOAD DISPLAY 1 ADDRESS
         B     EXIT                 EXIT TO IEECVET2
BIGQ     MVI   DCMPACK+N2,BIGA      STORE MAX QNUM
         MVI   DCMPACK+N3,BIGA      INTO AREA FOR MOVE ONTO SCREEN
         B     CONVERT              BRANCH TO SEE IF ANY ROLLED
NOROLL   SH    R3PTRA,DCMCORLN      NONE ROLLED, REDUCE POINTER
         MVC   N0(N2,R3PTRA),DCMPACK+N2 STORE UPDATED QNUM IN LINE
ANYQNUM  LTR   R9QNUM,R9QNUM        IS QNUM NOW ZERO
         BZ    IOEXIT               YES, NO MESSAGES WAITING
         OI    DCMCMSG1,DCMMSGWT    INDICATE MESSAGE WAITING
         OI    DCMIOCM1,DCMWRMSG    WRITE FULL MESSAGE AREA
***********************************************************************
IOEXIT   EQU   *
         L     XFBRANCH,DCMIORTN    INIT FOR I/O ROUTINE EXIT
EXIT     L     X1PARM,DCMCXSVE      RESTORE CXSA ADDRESS
         BR    XFBRANCH             EXIT TO PROPER DIDOCS MODULE
MSGWAIT  SR    R9QNUM,R9QNUM        ZERO QNUM COUNTER
         BAL   RERTN,SEARCH         GO TO SEARCH SUBROUTINE
         B     ANYQNUM              GO SEE IF MSG WAITING REQUIRED
         EJECT
***********************************************************************
*        SEARCH SUBROUTINE                                            *
***********************************************************************
SEARCH   EQU   *                    SEARCH QUEUE & BEHIND DISPLAY
         L     R2QPTR,DCMDSAV+N8    PTR TO OUTPUT QUEUE
         USING CQE,R2QPTR          CQE ADDRESSABILITY
         LM    RAMAJOR,RBMINOR,DCMDSAV  MAJ & MIN PTRS
         TM    DCMUTILT,DCMUTILB    TEST PHASE SWITCH
         BO    SCHB                 GO TO PHASE B
SCHA     TM    DCMUTILT,DCMUTILA    IS THIS FIRST PASS
         BO    SCHLAST              NO, TEST SCT LIMIT
         OI    DCMUTILT,DCMUTILA    FIRST PASS DONE
         L     RBWORK,DCMWTBUF      POINT TO DISPLAY
         C     RBWORK,DCMWTINT      DOES A DISPLAY EXIST
         BE    SCHINITB             NO, PROCEED TO PHASE B
         SR    RASCT,RASCT          YES, DETERMINE SCREEN SIZE
         S     RBWORK,DCMASCRN      FROM TOP TO DISPLAY
         LH    RFWORK,DCMCORLN      BUFFER SIZE OF EACH LINE
         DR    RASCT,RFWORK         QUOTIENT DETERMINES LINE #
         LR    RASCT,RBWORK         OF FIRST DISPLAY LINE
         MH    RASCT,DCMSCTCN       MULT BY SCT ENTRY LENGTH
         A     RASCT,DCMAMTAB       ADD TO START OF SCT
SCHMSGIN TM    N0(RASCT),DCMMSGIN   IS A MSG IN LINE
         BNO   SCHINITB             NO, GO TO PHASE B
         AH    RASCT,DCMSCTCN       YES, POINT TO NEXT SCT
SCHRCYES LA    R9QNUM,N1(R9QNUM)    INCREMENT QNUM
         LA    RFCODE,N4            SET RETURN CODE = YES
SCHRET   ST    R2QPTR,DCMDSAV+N8    SAVE REGISTERS
         STM RAMAJOR,RBMINOR,DCMDSAV      FOR NEXT PASS
         BR    RERTN                RETURN TO CALLER
SCHLAST  C     RASCT,DCMADDRL       HAVE WE PASSED LAST SCT
         BNH   SCHMSGIN             NO, CHECK FOR MESSAGE
SCHINITB SR    RAMAJOR,RAMAJOR      CLEAR MAJOR AND
         SR    RBMINOR,RBMINOR      MINOR PTRS
         OI    DCMUTILT,DCMUTILB    PHASE B SWITCH
         SR    R7LINECT,R7LINECT    ZERO LINE COUNTER
         TM    UCMSTS,UCMTC         IS IN-LINE MLWTO PENDING
         BO    SCHMLWRK             YES, HANDLE
         L     R2QPTR,UCMOUTQ       LOAD OUTPUT QUEUE PTR
SCHB     LTR   R2QPTR,R2QPTR        IS QUEUE EMPTY
         BZ    SCHRCNO              YES, NO MORE LINES
         LTR   R7LINECT,R7LINECT    IS LINE CTR ZERO
         BNZ   SCHORWQE             NO, HANDLE
         LTR   RAMAJOR,RAMAJOR      IS MAJOR WQE PTR ZERO
         BNZ   SCHMINZR             NO, MLWTO - CHECK MINOR
SCHACTST TM    CQEFLAG,CQEENTR      IS THIS ENTRY ACTIVE
         BO    SCHGETWQ             YES, CHECK IT OUT
SCHNXTWQ SR    RAMAJOR,RAMAJOR      CLEAR WQE
         SR    RBMINOR,RBMINOR      POINTERS
         TM    CQEFLAG,CQEEOB       IS THIS END OF BLOCK
         BO    SCHNXTBK             YES, GET NEXT ONE
         TM    CQEFLAG,CQEEOQ       WAS THIS LAST ENTRY
         BO    SCHRCNO              YES, NO MORE LINES
         LA    R2QPTR,N4(R2QPTR)    POINT TO NEXT ENTRY
         B     SCHACTST             GO CHECK OUT NEXT ENTRY
SCHNXTBK L     R2QPTR,CQEWQE        POINT TO NEXT BLOCK
         LA    R2QPTR,N0(R2QPTR)    CLEAR FLAGS
         B     SCHACTST             GO CHECK NEXT ENTRY
SCHRCNO  SR    RFCODE,RFCODE        SET RETURN CODE = NO
         SR    R2QPTR,R2QPTR        NO MORE LINES LEFT
         B     SCHRET               RETURN TO CALLER
SCHGETWQ L     RAMAJOR,CQEWQE       POINT TO WQE
         LA    RAMAJOR,N0(RAMAJOR)  CLEAR FLAGS
SCHTSTML TM    CQEFLAG,CQEMAJOR     IS THIS AN MLWTO
         BO    SCHINTST             YES, TEST FOR INLINE
         USING WQE,RAMAJOR
         L     R7LINECT,WQENBR      WQE TEXT LENGTH
         TM    UCMDISP2,UCMDISPI TIME STAMP REQD             JE @YM8452
         BZ    TSTDISPJ            NO, TEST NEXT             JE @YM8452
         LA    R7LINECT,19(0,R7LINECT) ADJUST LENGTH         JE @YM8452
         B     SCHORWQE            CONTINUE                  JE @YM8452
TSTDISPJ TM    UCMDISP2,UCMDISPJ   JOB ID REQD               JE @YM8452
         BZ    SCHORWQE            NO, CONTINUE              JE @YM8452
         LA    R7LINECT,10(0,R7LINECT) ADJUST LENGTH         JE @YM8452
SCHORWQE SH    R7LINECT,DCMAXLGN    SUBTRACT 1 LINE LENGTH
         BNP   SCHLSTLN             MORE LINES NOT NEEDED
         LA    R7LINECT,N2(R7LINECT)  INCLUDE 2 EXTRA BLANKS FOR
*                                   EACH CONTINUATION LINE IN
*                                   REMAINING TEXT COUNT
         B     SCHRCYES             INDICATE LINE FOUND
SCHLSTLN SR    R7LINECT,R7LINECT    CLEAR LINE COUNTER
         SR    RAMAJOR,RAMAJOR      CLEAR MAJOR POINTER
         TM    CQEFLAG,CQEEOQ       WAS THIS LAST QUEUE ENTRY
         BNO   SCHENDBK             NO, CONTINUE
         SR    R2QPTR,R2QPTR        YES, ZERO POINTER
         B     SCHRCYES             INDICATE LINE FOUND
SCHENDBK TM    CQEFLAG,CQEEOB       IS THIS END OF BLOCK      @ZA14058
         BO    SCHNXTBL             YES, GET NEXT
         LA    R2QPTR,N4(R2QPTR)    NO, POINT TO NEXT CQE
         B     SCHRCYES             INDICATE LINE FOUND
SCHNXTBL L     R2QPTR,CQEWQE        POINT TO NEXT BLOCK
         LA    R2QPTR,N0(R2QPTR)    CLEAR FLAGS
         B     SCHRCYES             INDICATE LINE FOUND
SCHMLWRK L     R2QPTR,UCMWLAST      POINT TO MAJOR'S CQE
         L     RAMAJOR,CQEWQE       POINT TO MAJOR
         L     RBMINOR,UCMMLAST     POINT TO MINOR
         LTR   RBMINOR,RBMINOR      IS MINOR PTR ZERO
         BZ    SCHMAJCK             YES, CHECK MAJOR
         TM    UCMSDS5,UCMSDS5F IS MLAST THE NEXT TO OUTPUT   JE YM8408
         BO    SCHTXTZR            YES, GO CHECK TEXT LENGTH  JE YM8408
         L     RBMINOR,WMJMMIN     NO, IS MLAST STILL VALID ON MINOR   *
                                   CHAIN                      JE YM8408
SCHCMIN  C     RBMINOR,UCMMLAST    FOUND YET                  JE YM8408
         BE    SCHMINZR            YES, USE WHAT IT POINTS TO JE YM8408
         DROP  RAMAJOR                                        JE YM8408
         USING WQE,RBMINOR                                    JE YM8408
         ICM   RBMINOR,7,WMNMNX1   GET MINOR                  JE YM8408
         BNZ   SCHCMIN             GO CHECK THIS ONE          JE YM8408
         B     SCHMAJCK             CHECK TEXT LENGTH         JE YM8408
SCHMINZR LTR   RBMINOR,RBMINOR      IS MINOR PTR ZERO
         BZ    SCHMAJCK             YES, CHECK MAJOR
         L     RFWORK,N0(RBMINOR)   LOAD FORWARD PTR
         LA    RFWORK,N0(RFWORK)    CLEAR USE COUNT
         LTR   RFWORK,RFWORK        IS FORWARD PTR ZERO
         BZ    SCHMINEN             YES, CHECK END LINE
         LR    RBMINOR,RFWORK       POINT TO NEXT MINOR
         B     SCHTXTZR             CHECK FOR TEXT LENGTH
SCHMINEN TM    WMNMLT1,WMNMLT1D     IS THIS AN END LINE
         BO    SCHNXTWQ             YES, OK TO GET NEXT WQE
         B     SCHRCNO              NO, UNENDED MLWTO
         DROP  RBMINOR
         USING WQE,RAMAJOR
SCHMAJCK TM    WMJMMLW,WMJMMLWH     IS A NULL MINOR ATTACHED
         BO    SCHMAJEN             YES, TEST MAJOR FOR END
         L     RBMINOR,WMJMMIN      NO, POINT TO MINOR
         DROP  RAMAJOR
         USING WQE,RBMINOR
SCHTXTZR CLI   WMNMTL1,ZERO         IS MINOR TEXT LENGTH ZERO
         BE    SCHNXTWQ             YES, GET NEXT WQE
         B     SCHRCYES             NO, INDICATE LINE FOUND
         DROP  RBMINOR
         USING WQE,RAMAJOR
SCHMAJEN TM    WMJMLTYP,WMJMLTYD    IS MAJOR AN END LINE
         BO    SCHNXTWQ             YES, GET NEXT WQE
         B     SCHRCNO              NO, UNENDED MLWTO
SCHINTST TM    WMJMDEC,CODE8        IS
         BNO   SCHRCYES             MESSAGE
         TM    WMJMDEC+1,CODE9      TO GO
         BNO   SCHRCYES             IN
         CLI   WMJMAREA,AREAZ       LINE
         BE    SCHRCYES             YES, INDICATE LINE FOUND
         B     SCHNXTWQ             NO, GET NEXT WQE
         EJECT
***********************************************************************
*        MOVER SUBROUTINE               MESSAGE MOVE                  *
***********************************************************************
MOVER    SR    RAWORK,RAWORK            ZERO DIVIDEND REGISTER
         LR    RBWORK,R4SCTPTR          PUT CURRENT SCT PTR IN REG
         S     RBWORK,DCMAMTAB          COMPUTE DISP. OF CURRENT SCT
         LH    R2WORK,DCMSCTCN          LOAD LENGTH OF SCT ENTRY
         DR    RAWORK,R2WORK            COMPUTE NUMBER OF CURRENT SCT
         LH    RAWORK,DCMCORLN          LOAD LENGTH OF A MESSAGE LINE
         MR    RAWORK,RAWORK            COMPUTE NUMBER OF CURRENT LINE
         A     RBWORK,DCMASCRN          ADD START OF MESSAGES
         LR    RFWORK,RBWORK            SAVE CURRENT MESSAGE POINTER
         LR    RBWORK,R6PTRB            PUT LAST MSG SCT PTR IN REG
         SR    RBWORK,R4SCTPTR          SUBTRACT CURRENT SCT POINTER
         DR    RAWORK,R2WORK            COMPUTE COUNT FOR BCT LOOP
         LTR   R2WORK,RBWORK            LOAD BCT COUNT FOR MSG MOVE
         BNP   MOVRTRN             NOT POSITIVE, GET OUT      JE YM8354
         LR    RAWORK,RFWORK            INIT MOVE 'TO' POINTER
         LR    RBWORK,RAWORK            PUT 'TO' POINTER IN REGISTER
         AH    RBWORK,DCMCORLN          INIT MOVE 'FROM' POINTER
         LH    RFWORK,DCMLGNTH          LOAD MOVE LENGTH
         BCTR  RFWORK,N0                REDUCE FOR EXECUTE
MOVELOOP EX    RFWORK,MOVEITUP          MOVE UP ONE MESSAGE LINE
         AH    RAWORK,DCMCORLN          INCREMENT 'TO' POINTER
         AH    RBWORK,DCMCORLN          INCREMENT 'FROM' POINTER
         BCT   R2WORK,MOVELOOP          TEST FOR LAST, CONTINUE
         BCTR  RFWORK,N0                DECREMENT FOR BLANK EXECUTE
         MVI   N0(RAWORK),BLANK         BLANK FIRST CHAR VACATED LINE
         EX    RFWORK,BLANKIT           BLANK REST OF VACATED LINE
         EJECT
***********************************************************************
*        MOVER SUBROUTINE CONT.         DOM ELEMENT MOVE              *
***********************************************************************
         SR    RAWORK,RAWORK            ZERO DIVIDEND REGISTER
         LR    RBWORK,R4SCTPTR          PUT CURRENT SCT PTR IN REG
         S     RBWORK,DCMAMTAB          COMPUTE DISP. OF CURRENT SCT
         LH    R2WORK,DCMSCTCN          LOAD LENGTH OF SCT ENTRY
         DR    RAWORK,R2WORK            COMPUTE NUMBER OF CURRENT SCT
         LH    RAWORK,DOMLEN            LOAD LENGTH OF A DOM ENTRY
         MR    RAWORK,RAWORK            COMPUTE NUMBER OF CURRENT DOM
         A     RBWORK,DCMDOMPK          ADD START OF DOM ELEMENTS
         LR    RFWORK,RBWORK            SAVE CURRENT DOM POINTER
         LR    RBWORK,R6PTRB            PUT LAST MSG SCT PTR IN REG
         SR    RBWORK,R4SCTPTR          SUBTRACT CURRENT SCT POINTER
         DR    RAWORK,R2WORK            COMPUTE CURRENT-LAST COUNT
         LH    RAWORK,DOMLEN            LOAD LENGTH OF DOM ENTRY
         MR    RAWORK,RAWORK            COMPUTE DOM MOVE LENGTH
         LR    RAWORK,RFWORK            INIT 'TO' POINTER
         LR    RFWORK,RBWORK            SAVE DOM MOVE LENGTH
         BCTR  RFWORK,N0                REDUCE FOR EXECUTE MOVE
DOMOVE   EQU   *         LOOP UNTIL ALL DOM ELEMENTS ARE MOVED
         LA    RBWORK,LENDOM(RAWORK) INIT 'FROM' ADDR         MB YM4391
         CH    RFWORK,H256         OVER 256 TO MOVE           MB YM4391
         BL    EXMOVE              255 MOVES 256 BYTES        MB YM4391
         MVC   N0(N256,RAWORK),N0(RBWORK) MOVE 256            MB YM4391
         SH    RFWORK,H256         DROP COUNT BY 256          MB YM4391
         LA    RAWORK,N256(RAWORK) BUMP 'TO' ADDRESS          MB YM4391
         B     DOMOVE              CONTINUE MOVE              MB YM4391
EXMOVE   EQU   *                                              MB YM4391
         EX    RFWORK,MOVEITUP          MOVE UP DOM ENTRIES   MB YM4391
         LA    RAWORK,N1(RAWORK,RFWORK) LOCATE LAST ENTRY     MB YM4391
         LH    RFWORK,DOMLEN            LOAD DOM ENTRY LENGTH IN REG
         BCTR  RFWORK,N0                REDUCE FOR EXECUTE NULLING
         EX    RFWORK,NULLIT            NULL VACATED DOM ENTRY
         EJECT
***********************************************************************
*        MOVER SUBROUTINE CONT.         SCT ELEMENT MOVE              *
***********************************************************************
         LR    RBWORK,R6PTRB            PUT LAST MSG SCT PTR IN REG
         SR    RBWORK,R4SCTPTR          SUBTRACT CURRENT SCT POINTER
         LR    RFWORK,RBWORK            SAVE SCT MOVE LENGTH
         BCTR  RFWORK,N0                REDUCE FOR EXECUTE MOVE
         LR    RAWORK,R4SCTPTR          INIT 'TO' POINTER
         LR    RBWORK,RAWORK            LOAD 'TO' POINTER IN REGISTER
         AR    RBWORK,R2WORK            INIT 'FROM' POINTER
         EX    RFWORK,MOVEITUP          MOVE UP SCT ENTRIES
         AR    RAWORK,RFWORK            ADD MOVE LENGTH TO 'FROM' PTR
         LA    RAWORK,N1(RAWORK)        RESTORE FULL LENGHT
         LR    RFWORK,R2WORK            LOAD SCT ENTRY LENGTH IN REG
         BCTR  RFWORK,N0                REDUCE FOR EXECUTE NULLING
         EX    RFWORK,NULLIT            NULL VACATED SCT ENTRY
         LA    R8DEL,N1(R8DEL)          BUMPER MSG REMOVED COUNTER
         SH    R3PTRA,DCMSCTCN          FLOAT QNUM DISPLAY LINE UP
         TM    DCMUTILT,DCMUTILB    PHASE B OF SEARCH
         BOR   RERTN                YES, RETURN TO CALLER
         L     RFWORK,DCMDSAV       GET SEARCH'S SCT POINTER
         SH    RFWORK,DCMSCTCN      BACK UP ONE ENTRY
         ST    RFWORK,DCMDSAV       SAVE IT FOR SEARCH
MOVRTRN  BR    RERTN                    RETURN TO MAIN LINE PROCESSING
         EJECT
***********************************************************************
*        PROGRAM EQUATES                                              *
***********************************************************************
ID1      EQU   C'E'                 1ST CHARACTER OF CSECT ID
ID2      EQU   C'J'                 2ND CHARACTER OF CSECT ID
N0       EQU   0                   DISPLACEMENT VALUE
N1       EQU   1                   DISPLACEMENT VALUE
N2       EQU   2                   DISPLACEMENT VALUE
N3       EQU   3                   DISPLACEMENT VALUE
N4       EQU   4                   DISPLACEMENT VALUE
N8       EQU   8                   DISPLACEMENT VALUE
N20      EQU   20                  LENGTH VALUE
N256     EQU   256                 MAXIMUM MVC LENGTH         MB YM4391
LENDOM   EQU   8                   DOM ENTRY LENGTH           MB YM4391
AREAZ    EQU   C'Z'                     IN-LINE DISPLAY AREA
BIGA     EQU   C'A'                MAX VALUE FOR QNUM DISPLAY
BLANK    EQU   C' '                BLANK CHARACTER
CODE8    EQU   X'01'                    DESCRIPTOR CODE 8
CODE9    EQU   X'80'                    DESCRIPTOR CODE 9
ROLDEL   EQU   C'D'                CHARACTER TO TEST FOR ROLL DELETE
ZERO     EQU   X'00'                    NULL VALUE
ZONE     EQU   X'F0'               ZONE MASK FOR QNUM VALUE
         SPACE 5
***********************************************************************
*        PROGRAM CONSTANTS AND EXECUTED INSTRUCTIONS                  *
***********************************************************************
DOMLEN   DC    H'8'                     LENGTH OF DOM ELEMENT ENTRY
MAXNUM   DC    H'99'                    MAXIMUM VALUE OF QNUM DISPLAY
H256     DC    H'256'              COMPARE AND SUBTRACT       MB YM4391
         SPACE 4
BLANKIT  MVC   N1(N0,RAWORK),N0(RAWORK) TO BLANK VACATED MESSAGE LINES
MOVEITUP MVC   N0(N0,RAWORK),N0(RBWORK) TO MOVE UP ONE ENTITY
NULLIT   XC    N0(N0,RAWORK),N0(RAWORK) TO NULL VACATED SCT OR DOM
         EJECT
***********************************************************************
*        ALL DSECTS FOLLOW THIS POINT                                 *
***********************************************************************
         IHACTM   CXSA
         EJECT
         IHACTM CQE
         EJECT
         IEECUCM  FORMAT=NEW
         EJECT
         IEERDCM
         EJECT
         IEETDCM
         EJECT
         IHAWQE  DSECT=YES
         EJECT
         END
