         TITLE 'IEECVFTQ -- STATUS DISPLAY INTERFACE 6'
IEECVFTQ CSECT
*C 152100                                                     MB Y01958
*C 242800,242900                                             MC SA55716
*A 237820                                                    MC SA55716
         SPACE 2
* THIS ROUTINE WAS CREATED FOR STATUS DISPLAY SUPPORT, LINE ITEM 21002,
*    OS RELEASE 21
         SPACE 2
*
* STATUS -- CHANGE LEVEL 0
*
* APARS FIXED --- ZA14992
*
* FUNCTION -- OUTPUT OF A DISPLAY WHICH DOES NOT OVERLAY MESSAGES
*    1) SET UP FOR OUTPUT OF AS MUCH AS POSSIBLE OF AN OUT OF
*    LINE MULTIPLE LINE WRITE TO OPERATOR (MLWTO), USING THE
*    MESSAGE AREA PORTION OF THE SCREEN IMAGE BUFFER AS THE
*    OUTPUT BUFFER.  ALL ASSOCIATED WQE'S ARE FREED
*    2) ON THE LAST FRAME OF A DISPLAY, BLANK THE REMAINDER OF
*    THE DISPLAY AREA
*
* ENTRY POINT -- IEECVFTQ, FROM IEECVFTM
*
* INPUT
*    1) REGISTER 1 - POINTER TO CXSA
*    2) REGISTER 7 - POINTER TO SACB
*
* OUTPUT
*    1) REGISTER 1 - POINTER TO CXSA
*    2) SCREEN IMAGE BUFFER AND COMMUNICATION FIELDS SET
*    FOR A WRITE PARTIAL BY THE I/O ROUTINE
*    3) FIELDS IN THE SACB, SCT, SSCT TO REFLECT THE STATUS
*    OF THE DISPLAY
*
* EXTERNAL REFERENCES -- NONE
*
* EXITS,NORMAL
*    1) DEVICE-DEPENDENT I/O MODULE
*    2) IEECVFTM - STATUS DISPLAY INTERFACE 2, IF NO I/O
*    IS TO BE DONE
*
* EXITS,ERROR
*    NONE
*
* TABLES/WORKAREAS
*    1) UNIT CONTROL MODULE - UCM
*    2) TRANSIENT PORTION OF THE DISPLAY CONTROL MODULE - DCM
*    3) RESIDENT PORTION OF THE DISPLAY CONTROL MODULE
*    (INCLUDING SCREEN AREA CONTROL BLOCK - SACB)
*
* ATTRIBUTES -- REFRESHABLE, PRIVILEGED, TYPE 4 SVC
*
* CHARACTER CODE DEPENDENCY -- THE OPERATION OF THIS MODULE DOES
*    NOT DEPEND ON A PARTICULAR INTERNAL REPRESENTATION OF
*    THE EXTERNAL CHARACTER SET
*
         EJECT
* REGISTER USAGE
X1PARM   EQU   1
XERTRN   EQU   14
XFBRANCH EQU   15
R0       EQU   0                   REG 0
R1       EQU   1                   PARAMETER REGISTER
WORKR    EQU   2                   WORK REG
WORK1    EQU   3                   WORK REG
EVEN     EQU   4                   WORK REG
SCTPTR   EQU   4                   ADDRESS OF SCT ENTRY
ODD      EQU   5                   WORK REG
SSCTPTR  EQU   5                   ADDRESS OF SSCT ENTRY
RDCMBASE EQU   6                   RESIDENT PORTION OF DCM BASE
SACBBASE EQU   7                   SCREEN AREA CONTROL BLOCK BASE
TDCMBASE EQU   8                   TRANSIENT PORTION OF DCM BASE
OUTQREG  EQU   9                   POINTER TO CONSOLE OUTPUT           X
                                        QUEUE ENTRY
UCMEBASE EQU   10                  UCM ENTRY BASE
WQEBASE  EQU   11                  WQE BASE
MYBASE   EQU   12                  BASE REGISTER FOR THIS MODULE
CXSABASE EQU   13                  CXSA BASE
RETURNR  EQU   14                  RETURN REGISTER
LINKR    EQU   14                  FIRST LEVEL LINK REG
LINK1    EQU   15                  SECOND LEVEL LINK REGISTER
R15      EQU   15
         EJECT
* ESTABLISH ADDRESSABILITY
         SPACE 2
         BALR  MYBASE,0
         USING *,MYBASE            BASE THIS MODULE
         B     BEGIN
         DC    CL8'IEECVFTQ'        MODULE NAME
         DC    CL8'&SYSDATE',CL56' ' DATE AND PATCH AREA         Y02958
BEGIN    EQU   *
         LR    CXSABASE,R1         GET CXSA ADDRESS
         USING CXSA,CXSABASE       BASE CXSA
         L     UCMEBASE,CSAUCM     GET ADDRESS OF UCM ENTRY
         USING UCMLIST,UCMEBASE    BASE UCM ENTRY
         L     RDCMBASE,UCMXB      GET ADDRESS OF RESIDENT DCM
         USING DCMTSRT,RDCMBASE      BASE RESIDENT DCM
         L     TDCMBASE,DCMADTRN   GET ADDRESS OF TRANSIENT DCM
         USING DCMSTRT,TDCMBASE      BASE TRANSIENT DCM
*        SACBBASE IS PASSED FROM INTERFACE 2
         USING DCMACB,SACBBASE     BASE SACB
         USING WQE,WQEBASE         BASE WQE'S
         MVC   DCMTRACE(DCMTRLEN),DCMTRAC2 SHIFT OLD TRACE ENTRIES
         MVI   DCMTREN1,ID1        PUT CSECT ID INTO
         MVI   DCMTREN2,ID2        NEW TRACE ENTRY
         L     XFBRANCH,CSAXB      ADDRESS GETLOCK SUBROUTINE
         LR    X1PARM,CXSABASE     PASS CXSA ADDRESS IN REG 1
         BALR  XERTRN,XFBRANCH     OBTAIN LOCKS
         SPACE 3
* INITIALIZATION
         SPACE 2
         XC    DCMBYTCT(E2),DCMBYTCT ZERO BYTE COUNT FOR OUTPUT
         L     OUTQREG,DCMAMJWQ    GET POINTER TO CONSOLE OUTPUT       X
                                        QUEUE ENTRY
         USING CQE,OUTQREG         CONSOLE Q ADDRESSABILITY   MB Y02958
         EJECT
* SET UP TO BEGIN OR PICK UP WHERE WE LEFT OFF
         SPACE
         MVC   DCMLINEN(E1),DCMAROW  INDICATE WHERE TO WRITE TO
         BAL   LINKR,FINDSCT       GET POINTER TO SCT AND SSCT         X
                                        ENTRIES FOR NEXT ROW
*      COMPUTE ADDRESS OF SCREEN IMAGE BUFFER LINE TO USE
         SR    WORKR,WORKR         CLEAR REG
         IC    WORKR,DCMAROW       GET LINE NO.
         BCTR  WORKR,E0            SUBTRACT ONE
         MH    WORKR,DCMCORLN      MULTIPLY BY LINE LENGTH
         A     WORKR,DCMASCRN      ADD ADDRESS OF BEGINNING OF         X
                                        MSG AREA SCREEN IMAGE
         ST    WORKR,DCMDSAV+E8    SAVE POINTER TO SCREEN IMAGE        X
                                        LINE TO START WITH
         SPACE 2
* FIND OUT WHAT THERE IS TO DO
         SPACE
         TM    DCMAFLG1,DCMABL     Q. BLANK REST OF AREA
         BO    BLNKREST            GO BLANK REST OF AREA
         TM    DCMAFLG2,DCMAWCON   Q. CONTROL LINE TO BE WRITTEN
         BNO   WRMIN               NO, GO WRITE FROM MINOR WQE'S
*                                  FALL THROUGH TO WRITE CONTROL
         EJECT
WCON     EQU   *
* FIRST TIME THROUGH, CONTROL LINE MUST BE HANDLED
         SPACE
*    BUILD CONTROL LINE IN FIRST LINE
         BAL   LINKR,BLDCNTRL      BUILD CONTROL LINE
         SPACE
         OI    E0(SCTPTR),DCMMSGJK INDICATE JUNK IN LINE IN SCT
         OI    E0(SSCTPTR),DCMSECCL INDICATE CONTROL LINE IN           X
                                        SSCT
         TM    DCMADFLG,DCMADD     Q. DYNAMIC DISPLAY
         BNO   UPDTE               NO, BRANCH AROUND FLAG SET
         OI    DCMADFLG,DCMACSIB   INDICATE DYNAMIC DISPLAY            X
                                        CONTROL LINE IN SCREEN         X
                                        IMAGE BUFFER
         SPACE
UPDTE   EQU   *
*    INCREMENT BYTE COUNT FOR WRITE BY LENGTH OF ONE LINE
*    INCREMENT SCT ENTRY, SSCT ENTRY, NEXT ROW IN SACB, AND LINE
*      IN SCREEN IMAGE BUFFER FIELDS FOR NEXT LINE
         BAL   LINKR,NXTLINE       UPDATE DCMBYTCT, SCTPTR,            X
                                        SSCTPTR, DCMAROW, AND          X
                                        DCMDSAV+E8
         SPACE
         TM    WMJMLTYP,WMJMLTYD   Q.END INDICATED
         BNO   TSTMIN              NO, LOOK FOR MINORS TO WRITE
         OI    DCMAFLG1,DCMADEND   INDICATE END IN SACB
         B     END1                GO HANDLE END
         SPACE
TSTMIN   EQU   *
         L     WQEBASE,DCMAMIN     GET POINTER TO MINOR
         LTR   WQEBASE,WQEBASE     ANY MINORS TO BE WRITTEN
         BZ    WRPAREXT            NO, OUTPUT CONTROL LINE
         SPACE
         EJECT
WRMIN    EQU   *
*    MOVE AS MANY LINES AS POSSIBLE FROM THE MINOR WQE'S TO THE
* SCREEN IMAGE IN THE DCM
         SPACE
         SPACE 3
WRMIN1   EQU   *
         SPACE
*    THIS IS THE BEGINNING OF A LOOP WHICH MOVES LINES FROM THE
* MINOR WQE'S TO THE SCREEN IMAGE BUFFER UNTIL EITHER THE FRAME
* IS FULL OR THE QUEUE IS EXHAUSTED.  EACH PASS THROUGH THIS
* LOOP MOVES TEXT FROM ONE MINOR WQE INTO THE SCREEN IMAGE
* BUFFER AND DOES THE ASSOCIATED HOUSEKEEPING, INCLUDING FREEING
* THE MINOR WQE.
*    INPUT - DCMDSAV+E8 - POINTS TO THE LINE OF THE SCREEN IMAGE
*              TO BE USED
*            SCREEN AREA CONTROL BLOCK (SACB)
*            SSCTPTR - ADDRESS OF ASSOCIATED SSCT ENTRY
*            SCTPTR - ADDRESS OF ASSOCIATED SCT ENTRY
*            BASEREGS - SACBBASE, TDCMBASE, UCMBEBASE, OUTQREG
*    OUTPUT - INPUT FIELDS UPDATED FOR NEXT LINE (EVEN AT END
*              AND FRAME FULL CONDITIONS)
*            BIT SETTINGS IN SACB, SCT, SSCT
*            LINE OF DISPLAY MOVED INTO SCREEN IMAGE BUFFER
*            INCREMENTS DCMBYTCT BY LENGTH OF ONE LINE
*    EXITS FROM LOOP WHEN -
*            1) FRAME FULL CONDITION IS REACHED, OR
*            2) END CONDITION IS FOUND, OR
*            3) NO MINOR ON QUEUE AFTER THE ONE JUST MOVED
*    REGISTER USAGE - DESTROYS CONTENTS OF FOLLOWING REGS:
*                        WORKR, WORK1, SCTPTR, SSCTPTR, LINKR,
*                        LINK1
         SPACE 2
         L     WORKR,DCMDSAV+E8    GET POINTER TO SCREEN IMAGE         X
                                        BUFFER LINE TO BE USED
         DROP  WQEBASE
         USING WMNM,WQEBASE         BASE WQE
         L     WQEBASE,DCMAMIN     GET MINOR WQE POINTER
         CLI   WMNMTL1,E0          IS TEXT LENGTH ZERO
         BNE   TEXT                NO, HANDLE TEXT            MF
         TM    WMNMLT1,WMNMLT1D    Q. MINOR INDICATE END      MF
         BO    INDEND              YES, GO INDICATE END       MF
*     IF THE TEXT LENGTH IS ZERO AND THE MINOR DOES NOT       MF
*     INDICATE END, THEN THE MINOR IS STILL BEING BUILT AND   MF
*     MUST NOT BE USED.                                       MF
         NI    DCMAFLG2,XFF-DCMALMIN    TURN OFF LAST MINOR   MF       X
                                        SAVED FLAG            MF
         B     WRPAREXT            EXIT                       MF
         SPACE
TEXT     EQU   *
*    MOVE TEXT FROM MINOR WQE TO SCREEN IMAGE BUFFER
         BAL   LINK1,BLNKLINE      BLANK OUT LINE OF SCREEN            X
                                        IMAGE BUFFER
         SR    WORK1,WORK1         CLEAR REG
         IC    WORK1,WMNMTL1       GET LENGTH OF TEXT
         BCTR  WORK1,E0            DECREMENT BY ONE
         EX    WORK1,MOVETEXT      MOVE TEXT FROM MINOR TO             X
                                        SCREEN IMAGE BUFFER
         B     SETSSCT             BRANCH TO SET SSCT FLAGS
MOVETEXT MVC   E0(E0,WORKR),WMNMTXT1  MOVE TEXT
         SPACE 2
SETSSCT  EQU   *
*    INDICATE LABEL OR DATA LINE IN SSCT
         NI    E0(SSCTPTR),XFF-DCMSECBL TURN OFF BLANK LINE FLAG
         TM    WMNMLT1,WMNMLT1B    Q. MINOR WQE FOR LABEL LINE
         BO    LABEL               YES, BRANCH TO INDICATE LABEL
         OI    E0(SSCTPTR),DCMSECDL  INDICATE DATA LINE IN SSCT
         B     OVERLABL            BRANCH AROUND
LABEL    EQU   *
         OI    E0(SSCTPTR),DCMSECLL  INDICATE LABEL LINE IN SSCT
OVERLABL EQU   *
         SPACE 2
*    INDICATE JUNK IN LINE IN SCT
         OI    E0(SCTPTR),DCMMSGJK INDICATE JUNK
         SPACE 2
*    INCREMENT BYTE COUNT FOR WRITE BY LENGTH OF ONE LINE
*    INCREMENT SCT ENTRY, SSCT ENTRY, NEXT ROW IN SACB, AND LINE
*      IN SCREEN IMAGE BUFFER FIELDS FOR NEXT LINE
         BAL   LINKR,NXTLINE       UPDATE DCMBYTCT, SCTPTR,            X
                                        SSCTPTR, DCMAROW, AND          X
                                        DCMDSAV+E8
         SPACE 2
*    SAVE SOME INFORMATION BEFORE MINOR IS FREED
         TM    WMNMLT1,WMNMLT1D    Q. MINOR INDICATE END
         BO    INDEND              YES, GO INDICATE END IN SACB
         SPACE
SAVENEXT EQU   *
*    TEST FOR MORE MINORS ON QUEUE AND SAVE POINTER TO MINOR
         L     WORK1,WMNMNX1-E1    GET POINTER TO NEXT MINOR
         LA    WORK1,E0(WORK1)     ZERO HIGH ORDER BYTE
         LTR   WORK1,WORK1         Q. ANY MORE MINORS
         BZ    NOMORMIN            NO, BRANCH TO SAVE POINTER          X
                                        TO MINOR JUST USED
         NI    DCMAFLG2,N255-DCMALMIN  TF LAST MINOR SAVED    @ZA14992
         ST    WORK1,DCMAMIN       SAVE POINTER TO NEXT MINOR
         B     FREEMIN             BRANCH TO FREE MINOR JUST           X
                                        USED
NOMORMIN EQU   *
         OI    DCMAFLG2,DCMALMIN   INDICATE POINTER TO LAST            X
                                        MINOR OUTPUT SAVED             X
                                        (RATHER THAN NEXT ON Q)
         ST    WQEBASE,DCMAMIN     SAVE POINTER TO MINOR JUST          X
                                        USED
         B     FREEMIN             GO FREE MINOR
         SPACE 2
INDEND   EQU   *
         OI    DCMAFLG1,DCMADEND   INDICATE END OF DISPLAY
         SPACE
FREEMIN  EQU   *
*    FREE MINOR WQE
         SR    WORK1,WORK1         CLEAR REG
         IC    WORK1,WMNMUC1       GET USE COUNT FROM MINOR
         BCTR  WORK1,E0            DECREMENT USE COUNT BY ONE
         STC   WORK1,WMNMUC1       STORE NEW USE COUNT
         LTR   WORK1,WORK1         Q. IS USE COUNT ZERO
         BNZ   TESTEND             NO, BRANCH TO TEST FOR END
DEQ      EQU   *
         OI    UCMSTS,UCMTB        INDICATE DEQUEUE WORK TO DO
         L     WORK1,CQEWQE        GET POINTER TO MAJOR WQE   MB Y02958
         DROP  WQEBASE                                           Y02958
         USING WMJM,WORK1          BASE WQE                   MB Y01958
         OI    WMJMMLW,WMJMMLWG    INDICATE IN MAJOR THAT MLWTO
*                                  CHAIN NEEDS SERVICING.
         DROP  WORK1
         USING WMJM,WQEBASE                                      Y01958
         SPACE 2
TESTEND  EQU   *
*     TEST FOR  END OF DISPLAY
         TM    DCMAFLG1,DCMADEND   Q. END OF DISPLAY FOUND
         BO    END1                YES, BRANCH TO HANDLE END
         SPACE
*    TEST FOR FULL FRAME
         TM    DCMAFLG1,DCMAFULL   Q. FULL FRAME
         BO    FRAMFUL1            YES, BRANCH TO HANDLE
         SPACE 2
*    IF NO MORE MINORS ON QUEUE, OUTPUT WHAT WE HAVE.
*    IF MORE MINORS, GO BACK TO PROCESS NEXT ONE.
         TM    DCMAFLG2,DCMALMIN   Q. POINTER TO LAST MINOR            X
                                        SAVED (BECAUSE NO MORE         X
                                        ON QUEUE)
         BO    WRPAREXT            YES, OUTPUT WHAT WE HAVE
         B     WRMIN1              NO, GO PROCESS NEXT MINOR
         EJECT
FRAMFUL1 EQU   *
         BAL   LINK1,INDFRFL       GO INDICATE FRAME FULL     MF  M2073
         SPACE
CONTFF   EQU   *
         NI    DCMAFLG1,XFF-DCMAFRPR  TURN OFF FRAMING IN              X
                                        PROGRESS FLAG
         SPACE
*    FIND FIRST LINE TO BE WRITTEN NEXT FRAME (FIRST DATA LINE)
         SR    WORK1,WORK1         CLEAR REG
         IC    WORK1,DCMATOP       GET LINE NO. OF TOP LINE
         BCTR  WORK1,E0            SUBTRACT ONE
         L     WORKR,DCMADSEC      GET ADDRESS OF SSCT
         AR    WORKR,WORK1         WORKR NOW POINTS TO SSCT BYTE       X
                                        FOR TOP LINE
SRCHDATA EQU   *
         LA    WORK1,E1(WORK1)     UPDATE LINE NO.
         TM    E0(WORKR),DCMSECDL  Q. DATA LINE
         BO    DATALFND            YES, SAVE LINE NO.
         LA    WORKR,E1(WORKR)     POINT TO NEXT SSCT BYTE
         B     SRCHDATA            CONTINUE SEARCH (MUST ALWAYS        X
                                        FIND ONE SINCE FRAME           X
                                        FULL - AT LEAST 4 LINES-
*                                       CANNOT BE REACHED BY           X
                                        CONTROL LINE AND 2 LABEL       X
                                        LINES)
DATALFND EQU   *
         STC   WORK1,DCMAROW       STORE AS NEXT LINE TO BE            X
                                        WRITTEN (NEXT FRAME)
         SPACE
         B     WRPAREXT            EXIT TO I/O ROUTINE
         EJECT
END1     EQU   *
* END OF DISPLAY FOUND
         SPACE
*    CONTROL LINE MUST BE MARKED FRAME LAST
         TM    DCMAFLG2,DCMAWCON   WAS CONTROL LINE BUILT ON           X
                                        THIS ENTRY TO MODULE
         BO    MARKLAST            YES, INDICATE FRAME LAST
         TM    UCMDISP,UCMDISPG    IS THIS A STATUS DISPLAY ONLY       X
                                        CONSOLE
         BO    MARKLAST            YES, INDICATE FRAME LAST
         TM    DCMADFLG,DCMACSIB   Q. DYNAMIC DISPLAY WHOSE            X
                                        CONTROL LINE IS IN             X
                                        SCREEN IMAGE BUFFER
         BO    MARKLAST            YES, INDICATE FRAME LAST
         OI    DCMAFLG2,DCMARCON   OTHERWISE, INDICATE REWRITE         X
                                        CONTROL LINE LATER
         B     BLNKREST            BRANCH TO BLANK REST OF AREA
         SPACE
MARKLAST EQU   *
*      THE CONTROL LINE IS STILL IN THE DCM, SO JUST MARK LAST
*      AND INDICATE WRITE FROM BEGINNING OF FRAME
         SR    WORKR,WORKR         CLEAR REG
         IC    WORKR,DCMATOP       GET NO. OF TOP LINE OF AREA
         BCTR  WORKR,E0            SUBTRACT ONE
         MH    WORKR,DCMCORLN      MULTIPLY BY LINE LENGTH
         A     WORKR,DCMASCRN      ADD ADDRESS OF BEGINNING OF         X
                                        MSG AREA SCREEN IMAGE
         BAL   LINKR,MOVFRAME      REBUILD CONTROL LINE
         SPACE
         SR    WORK1,WORK1         CLEAR REG
         SR    WORKR,WORKR         CLEAR REG
         IC    WORK1,DCMATOP       GET TOP ROW NO.
         IC    WORKR,DCMAROW       GET NO. OF ROW TO BE WRITTEN        X
                                        NEXT
         SR    WORKR,WORK1         FIND NO. OF LINES FROM TITLE        X
                                        TO (AND INCLUDING) END
         MH    WORKR,DCMCORLN      MULTIPLY BY LENGTH OF LINE
         STH   WORKR,DCMBYTCT      STORE AS BYTE COUNT FOR WRITE
         MVC   DCMLINEN(E1),DCMATOP INDICATE WRITE FROM TOP LINE
*                                  FALL THROUGH TO BLNKREST
         EJECT
* BLANK REST OF AREA
*    AFTER THE LAST (END) LINE OF THE DISPLAY HAS BEEN WRITTEN,
* THE REST OF THE LINES OF THE FRAME MUST BE BLANKED OUT
* (DCMAROW, DCMDSAV+E8, SSCTPTR, AND SCTPTR ARE SET UP FOR THE
* FIRST LINE TO BE BLANKED)
         SPACE
BLNKREST EQU   *
         TM    DCMAFLG1,DCMAFULL   Q. FULL FRAME
         BO    HNDLFF              YES, GO FINISH UP
         SPACE
         L     WORKR,DCMDSAV+E8    GET POINTER TO NEXT LINE TO         X
                                        BE BLANKED
         BAL   LINK1,BLNKLINE      BLANK OUT LINE
         SPACE
*    INDICATE BLANKED LINE IN SSCT
         OI    E0(SSCTPTR),DCMSECBL  INDICATE BLANKED LINE
*    TURN OFF JUNK IN LINE BIT IN SCT
         NI    E0(SCTPTR),XFF-DCMMSGJK  INDICATE NO MORE JUNK
         SPACE
*    INCREMENT BYTE COUNT FOR WRITE BY LENGTH OF ONE LINE
*    INCREMENT SCT ENTRY, SSCT ENTRY, NEXT ROW IN SACB, AND LINE
*      IN SCREEN IMAGE BUFFER FIELDS FOR NEXT LINE
         BAL   LINKR,NXTLINE       UPDATE DCMBYTCT, SCTPTR,            X
                                        SSCTPTR, DCMAROW, AND          X
                                        DCMDSAV+E8
         B     BLNKREST            CONTINUE BLANKING
         SPACE
HNDLFF   EQU   *                   HANDLE FULL FRAME
         TM    DCMAFLG2,DCMARCON   Q. REWRITE CONTROL LINE             X
                                        NEEDED
         BO    WRPAREXT            YES, DO NOT FREE MAJOR YET
         NI    DCMAFLG1,XFF-DCMAFRPR  TURN OFF FRAMING IN     MF  M2073X
                                        PROGRESS FLAG         MF  M2073
*    FREE MAJOR WQE
FREEMAJ  EQU   *
         TM    DCMADFLG,DCMADD     Q. DYNAMIC DISPLAY         MF  M2073
         BO    ENDDD               YES, BRANCH TO HANDLE END  MF  M2073X
                                        OF DYNAMIC DISPLAY    MF  M2073
FREEMAJ2 EQU   *                   NOT A DYNAMIC DISPLAY     MC SA55716
         OI    CQEFLAG,CQEAVAIL    INDICATE MAJOR WQE NOT              X
                                   NEEDED BY THIS CONSOLE     MB Y02958
         NI    CQEFLAG,XFF-CQEENTR TURN OFF ENTRY FLAG        MB Y02958
         OI    UCMSTS,UCMTB        INDICATE DEQUEUE WORK NEEDED
         SPACE
         OI    DCMAFLG2,DCMAMJFR   INDICATE MAJOR FREED
         B     WRPAREXT            EXIT TO I/O ROUTINE
         SPACE
ENDDD    EQU   *                                              MF  M2073
         TM    DCMADFLG,DCMACSIB   Q. IS CONTROL LINE IN SIB MC SA55716
         BO    FREEMAJ2            YES, GO FREE MAJOR        MC SA55716
*      MAJOR WQE CANNOT BE FREED UNTIL THERE IS A COPY OF THE MF  M2073
*   TITLE IN CORE FOR POSSIBLE USE BY K D,H AND K D,U TO      MF  M2073
*   REBUILD THE CONTROL LINE.  THE FRAME FULL BIT IN THE      MF  M2073
*   MAJOR WQE IS TURNED ON SO THAT INTERFACE 2 WILL IGNORE    MF  M2073
*   THE MAJOR WHILE IT REMAINS ON THE QUEUE.                  MF  M2073
         BAL   LINK1,INDFRFL       TURN ON FRAME FULL BIT     MF  M2073
         B     WRPAREXT            EXIT TO I/O ROUTINE        MF  M2073
         EJECT
***********************************************************************
*                                                                     *
* NEXT LINE SUBROUTINE                                                *
*    INCREMENT BYTE COUNT FOR WRITE BY LENGTH OF ONE LINE             *
*    INCREMENT DCMAROW, SCTPTR, SSCTPTR, AND DCMDSAV+E8 TO            *
* INFORMATION FOR NEXT LINE                                           *
*    INPUT - DCMBYTCT - BYTE COUNT FOR WRITE, NOT INCLUDING LINE      *
*              JUST HANDLED                                           *
*            DCMAROW, SCTPTR, SSCTPTR, AND DCMDSAV+E8 SET UP FOR      *
*              LINE JUST HANDLED                                      *
*    OUTPUT- DCMBYTCT - BYTE COUNT FOR WRITE, INCLUDING LINE          *
*              JUST HANDLED                                           *
*            DCMAROW, SCTPTR, SSCTPTR, AND DCMDSAV+E8                 *
*              INCREMENTED FOR NEXT LINE                              *
*    REGISTER USAGE - DESTROYS CONTENTS OF FOLLOWING REGS:            *
*                   SCTPTR, SSCTPTR, WORKR, WORK1, LINK1              *
*              LINKR - LINK REGISTER                                  *
*                                                                     *
***********************************************************************
         SPACE 2
NXTLINE  EQU   *
         LH    WORK1,DCMBYTCT      GET CURRENT BYTE COUNT
         AH    WORK1,DCMCORLN           ADD LENGTH OF ONE LINE
         STH   WORK1,DCMBYTCT           STORE BYTE COUNT
         BAL   LINK1,UPDTEROW      INCREMENT ROW NUMBER AND SET        X
                                        FLAG IF FULL FRAME
         AH    SCTPTR,DCMSCTCN     UPDATE SET POINTER BY LENGTH        X
                                        OF AN SCT ENTRY
         LA    SSCTPTR,E1(SSCTPTR) INCREMENT SSCT POINTER BY ONE
         L     WORKR,DCMDSAV+E8    ADD LENGTH OF ONE LINE TO
         AH    WORKR,DCMCORLN           POINT TO NEXT LINE IN
         ST    WORKR,DCMDSAV+E8         SCREEN IMAGE BUFFER
         BR    LINKR
         EJECT
***********************************************************************
*                                                                     *
* FINDSCT SUBROUTINE                                                  *
*    COMPUTES ADDRESS OF SCREEN CONTROL TABLE (SCT) AND               *
* SECONDARY SCREEN CONTROL TABLE (SSCT) ENTRIES FOR LINE POINTED      *
* TO BE DCMAROW.                                                      *
*    INPUT - DCMAROW                                                  *
*            TDCMBASE                                                 *
*    OUTPUT - SCTPTR - ADDRESS OF SCT ENTRY                           *
*             SSCTPTR - ADDRESS OF SSCT ENTRY                         *
*    REGISTER USAGE - DESTROYS CONTENTS OF FOLLOWING REGS:            *
*                   SCTPTR, SSCTPTR                                   *
*                                                                     *
***********************************************************************
         SPACE 2
FINDSCT  EQU   *
         SR    SSCTPTR,SSCTPTR     CLEAR REG
         IC    SSCTPTR,DCMAROW     GET LINE NO.
         BCTR  SSCTPTR,E0          SUBTRACT ONE
         LR    SCTPTR,SSCTPTR      SAVE FOR FURTHER USE
         A     SSCTPTR,DCMADSEC    ADD ADDRESS OF SSCT
*    SSCTPTR NOW POINTS TO SSCT ENTRY
         SPACE
         MH    SCTPTR,DCMSCTCN     MULTIPLY BY LENGTH OF ONE           X
                                        SCT ENTRY
         A     SCTPTR,DCMAMTAB     ADD ADDRESS OF SCT
*    SCTPTR NOW POINTS TO SCT ENTRY
         BR    LINKR               RETURN FROM FINDSCT
         EJECT
***********************************************************************
*                                                                     *
* UPDATE ROW NUMBER                                                   *
*    THIS ROUTINE INCREMENTS THE NEXT ROW TO WRITE FIELD OF THE       *
* SACB AND TESTS FOR A FULL FRAME                                     *
*    INPUT - NONE OTHER THAN CONTROL BLOCKS AND BASE REGS             *
*    OUTPUT - DCMAROW - INCREMENTED BY ONE                            *
*             DCMAFLG1 - DCMAFULL FLAG IS TURNED ON IF UPDATED        *
*                        ROW NUMBER IS OUTSIDE AREA                   *
*    REGISTER USAGE - DESTROYS CONTENTS OF FOLLOWING REGS:            *
*                        WORKR, WORK1                                 *
*              LINK1 - LINK REGISTER                                  *
*                                                                     *
***********************************************************************
         SPACE 2
UPDTEROW EQU   *
*    INCREMENT ROW IN SACB BY ONE
         SR    WORK1,WORK1         CLEAR REG
         IC    WORK1,DCMAROW       GET CURRENT ROW
         LA    WORK1,E1(WORK1)     INCREMENT BY ONE
         STC   WORK1,DCMAROW       STORE IN SACB
         SPACE
*    TEST FOR FULL FRAME
         SR    WORKR,WORKR         CLEAR REG
         IC    WORKR,DCMATOP       GET NO. OF TOP ROW OF AREA
         AH    WORKR,DCMALN        ADD LENGTH OF AREA                  X
                                        WORKR NOW CONTAINS NO.         X
                                        OF FIRST ROW BELOW AREA.
*                                       WORK1 STILL CONTAINS           X
                                        NO. OF NEXT ROW TO BE          X
                                        WRITTEN
         CR    WORK1,WORKR         Q. OUTSIDE OF AREA
         BE    FRAMFUL3            YES, BRANCH TO INDICATE FULL        X
                                        FRAME
         BR    LINK1               RETURN FROM SUBROUTINE
         SPACE
FRAMFUL3 EQU   *
         OI    DCMAFLG1,DCMAFULL   INDICATE FULL FRAME
         BR    LINK1               RETURN FROM SUBROUTINE
         EJECT
***********************************************************************
*                                                                     *
* BUILD CONTROL LINE SUBROUTINE                                       *
*    THIS ROUTINE BUILDS THE CONTROL LINE IN THE DCM LINE             *
* INDICATED                                                           *
*    INPUT - WORKR - POINTS TO THE DCM LINE IN WHICH THE CONTROL      *
*                   LINE IS TO BE BUILT                               *
*            BASE REGISTERS FOR MAJOR WQE, SACB, TDCM                 *
*    OUTPUT - CONTROL LINE BUILT WHERE INDICATED                      *
*    REGISTER USAGE - LINKR - LINK REGISTER                           *
*            DESTROYS CONTENTS OF FOLLOWING REGS: WORK1               *
*                                                                     *
***********************************************************************
         SPACE 2
BLDCNTRL EQU   *
         BAL   LINK1,BLNKLINE      BLANK OUT LINE IN WHICH             X
                                        CONTROL LINE IS TO BE          X
                                        BUILT
         USING DCONTROL,WORKR      BASE CONTROL LINE DSECT
         DROP  WQEBASE
         USING WMJM,WQEBASE        BASE WQE
         L     WQEBASE,CQEWQE      BASE MAJOR WQE             MB Y02958
         LH    WORK1,WMJMTXTL      GET LENGTH OF TITLE
         SH    WORK1,C5            SUBTRACT 4 FOR MLWTO ID AND         X
                                        1 FOR EXECUTE
         EX    WORK1,MOVTITLE      MOVE TITLE INTO CONTROL LINE
         SPACE
MOVFRAME EQU   *
         MVC   FRAME+E1(L'CFRAME),CFRAME  MOVE 'FRAME' IN
         TM    DCMAFLG1,DCMADEND   Q. LAST FRAME ON SCREEN
         BO    LAST                YES, BRANCH TO MOVE IN 'LAST'
         CLI   DCMAFR,F0           Q. IS FIRST DIGIT OF FRAME          X
                                        NUMBER ZERO
         BE    ONEDIGIT            YES, BRANCH TO MOVE ONE DIGIT
         MVC   FRAME+E7(E2),DCMAFR MOVE 2-DIGIT FRAME NUMBER IN
         B     MVCNTRL             BRANCH TO MOVE CONTROL CHAR
ONEDIGIT EQU   *
         MVC   FRAME+E8(E1),DCMAFR+E1 MOVE 1-DIGIT FRAME NO. IN
         B     MVCNTRL             BRANCH TO MOVE CONTROL CHAR
LAST     EQU   *
         MVC   FRAME+E7(L'CLAST),CLAST  MOVE 'LAST' IN
         SPACE 2
MVCNTRL  EQU   *
         MVI   CNTRL2+E2,ASTERISK  PUT ASTERISK IN CONTROL 2
         MVI   CNTRL3+E2,ASTERISK  PUT ASTERISK IN CONTROL 3
         TM    DCMADFLG,DCMADD     Q. DYNAMIC DISPLAY
         BO    CNTRLDD             BRANCH TO BUILD DYNAMIC             X
                                        CONTROL CHARACTERS
*    STATIC DISPLAY -- MOVE IN 'F' AND 'E'
         MVI   CNTRL2+E3,FORWARD   MOVE IN 'F' FOR FRAME FORWARD
         MVI   CNTRL3+E3,ERASE     MOVE IN 'E' FOR ERASE
         B     MVAID               BRANCH TO MOVE IN AREA ID
         SPACE
CNTRLDD  EQU   *
         TM    DCMADFLG,DCMAHOLD   Q. DYNAMIC DISPLAY IN               X
                                        HOLD MODE
         BO    MVHOLD              BRANCH TO MOVE HOLD OPTIONS
         SPACE
*    DYNAMIC DISPLAY IN UPDATE MODE -- MOVE IN 'PT' AND 'H'   MB Y02958
         MVI   CNTRL2+E3,PT1       MOVE IN 'PT'               MB Y02958
         MVI   CNTRL2+E4,PT2            FOR STOPTR            MB Y02958
         MVI   CNTRL3+E3,HOLD      MOVE IN 'H' FOR HOLD
         B     MVAID               BRANCH TO MOVE IN AREA ID
         SPACE
MVHOLD   EQU   *
*    DYNAMIC DISPLAY IN HOLD MODE -- MOVE IN 'F' AND 'U'
         MVI   CNTRL2+E3,FORWARD   MOVE IN 'F' FOR FRAME FORWARD
         MVI   CNTRL2+E4,BLANK     MOVE IN BLANK (NEEDED IF            X
                                          ENTRY IS TO MOVFRAME)
         MVI   CNTRL3+E3,UPDATE    MOVE IN 'U' FOR UPDATE
         SPACE 2
MVAID    EQU   *
* MOVE AREA ID IN -- CCA
*    GET CONSOLE ID -CC- AND CONVERT TO EBCDIC
         SR    WORK1,WORK1         CLEAR REG
         IC    WORK1,UCMID         GET CONSOLE ID
         CVD   WORK1,DCMPACK       CONVERT IT TO DECIMAL
         UNPK  DCMPACK(E3),DCMPACK+E6(E2)  UNPACK IT
         MVC   AREAID+E1(E2),DCMPACK+E1  MOVE IN THE CONSOLE ID
         OI    AREAID+E2,F0        CONVERT SIGN TO ZONE
         CLI   AREAID+E1,F0        IS FIRST DIGIT ZERO
         BNE   GETAID              NO, GET AREA ID
         MVI   AREAID+E1,BLANK     YES, BLANK OUT ZERO
GETAID   EQU   *
*    GET AREA ID
         MVC   AREAID+E3(E1),DCMAID  MOVE AREA ID IN
         SPACE 2
* RETURN FROM SUBROUTINE
         BR    LINKR               RETURN FROM SUBROUTINE
         SPACE 2
* EXECUTED INSTRUCTION
MOVTITLE MVC   TITLE(E0),WMJMTXT   MOVE TITLE INTO CONTROL LINE
         SPACE 2
         DROP  WORKR
         EJECT
***********************************************************************
*                                                                     *
* BLANK LINE                                                          *
*    THIS ROUTINE BLANKS ONE LINE OF THE SCREEN IMAGE BUFFER IN       *
* THE DCM                                                             *
*    INPUT - WORKR - ADDRESS OF LINE TO BE BLANKED                    *
*    OUTPUT - BLANKED LINE                                            *
*    REGISTER USAGE - DESTROYS CONTENTS OF FOLLOWING REGS:            *
*                        WORK1                                        *
*             LINK1 - LINK REGISTER                                   *
*                                                                     *
***********************************************************************
BLNKLINE EQU   *
         MVI   E0(WORKR),BLANK     MOVE IN ONE BLANK
         LH    WORK1,DCMLGNTH      GET LENGTH OF LINE
         SH    WORK1,C2            DECREMENT LENGTH BY 2
         EX    WORK1,PROP          PROPAGATE BLANK
         BR    LINK1               RETURN FROM SUBROUTINE
PROP     MVC   E1(E0,WORKR),E0(WORKR)  PROPAGATE CHARACTER
     EJECT
***********************************************************************
*                                                                     *
* INDICATE FRAME FULL IN MAJOR WQE                                    *
*    THE FRAME FULL BIT INDICATES TO THE QUEUEING ROUTINE THAT        *
* EVEN IF MORE MINOR WQE'S ARE QUEUED, OUT OF LINE OUTPUT SHOULD      *
* NOT BE INDICATED SINCE NO MORE CAN BE DISPLAYED.  IT ALSO           *
* CAUSES THE MAJOR WQE TO BE IGNORED BY INTERFACE 2 SINCE NO          *
* MORE OF THE DISPLAY CAN BE OUTPUT.                                  *
*    THE ALGORITHM MANIPULATES THE CONSOLE ID TO FIND THE             *
* CORRESPONDING BIT POSITION IN THE DOUBLE WORD FRAME FULL            *
* FIELD.                                                              *
*    INPUT - NONE OTHER THAN CONTROL BLOCKS AND BASE REGS             *
*    OUTPUT - FRAME FULL BIT TURNED ON IN MAJOR WQE                   *
*    REGISTER USAGE - DESTROYS CONTENTS OF FOLLOWING REGS:            *
*                        WORKR, WORK1,WQEBASE                         *
*              LINK1 - LINK REGISTER                                  *
*    ALSO DESTROYS FIRST TWO WORDS OF DCMDSAV                         *
*                                                                     *
***********************************************************************
         SPACE 2
INDFRFL  EQU   *                                              MF  M2073
         STM   EVEN,ODD,DCMDSAV    SAVE CONTENTS OF EVEN/ODD           X
                                        REG PAIR
         SR    WORK1,WORK1         CLEAR REG
         IC    WORK1,UCMID         GET CONSOLE ID
         BCTR  WORK1,E0            REDUCE FOR ALGORITHM
         SR    WORKR,WORKR         CLEAR REG
         LA    ODD,E8              GET DIVISOR
         DR    WORKR,ODD           DIVIDE ID
*                                  WORKR IS BIT IN BYTE
*                                  WORK1 IS BYTE IN FIELD
         LA    EVEN,E1             GET BIT
         SRDL  EVEN,E25(WORKR)     CREATE MASK
         L     WQEBASE,CQEWQE      GET POINTER TO MAJOR WQE   MB Y02958
         LA    EVEN,WMJMCONS       POINT TO FRAME FULL BITS
         AR    EVEN,WORK1          POINT TO BYTE
         EX    ODD,INDFF           INDICATE FRAME FULL
         LM    EVEN,ODD,DCMDSAV    RESTORE CONTENTS OF EVEN/ODD        X
                                        REG PAIR
         BR    LINK1               RETURN FROM INDFRFL        MF  M2073
         SPACE 2
INDFF    OI    E0(EVEN),E0         INDICATE FRAME FULL IN WQE
         EJECT
INT2EXIT EQU   *
         L     XFBRANCH,DCMNINT2   LOAD INTERFACE 2 ADDRESS
         B     XCTL                EXIT TO IEECVFTM
         SPACE
WRPAREXT EQU   *
         NI    DCMAFLG1,XFF-DCMABL TURN OFF BLANK REST FLAG
         LH    WORK1,DCMBYTCT      GET BYTE COUNT FOR WRITE
         LTR   WORK1,WORK1         Q. ZERO
         BZ    INT2EXIT            YES. EXIT TO INTERFACE 2
         OI    DCMIOCM1,DCMWRPAR   INDICATE WRITE PARTIAL              X
                                        MESSAGE AREA
         NI    DCMAFLG2,XFF-DCMAWCON  TURN OFF WRITE CONTROL           X
                                        LINE FLAG
IOEXIT   EQU   *
         L     XFBRANCH,DCMIORTN   LOAD IO ROUTINE ADDRESS
*                                  FOR EXIT TO IEECVET(H,P,R, OR U)
         SPACE 2
XCTL     EQU   *
         L     X1PARM,DCMCXSVE     RESTORE CXSA ADDRESS
         BR    XFBRANCH            EXIT ADDRESS ALREADY SET
         EJECT
***********************************************************************
*                                                                     *
*                             CONSTANTS                               *
*                                                                     *
***********************************************************************
         SPACE 2
C2       DC    H'2'                CONSTANT
C5       DC    H'5'                CONSTANT
CFRAME   DC    CL5'FRAME'          FRAME
CLAST    DC    CL4'LAST'           LAST
         EJECT
***********************************************************************
*                                                                     *
*                             EQUATES                                 *
*                                                                     *
***********************************************************************
         SPACE 2
ID1      EQU   C'F'                1ST CHARACTER OF CSECT ID
ID2      EQU   C'Q'                2ND CHARACTER OF CSECT ID
E0       EQU   0                   NUMBER
E1       EQU   1                   NUMBER
E2       EQU   2                   NUMBER
E3       EQU   3                   NUMBER
E4       EQU   4                   NUMBER
E6       EQU   6                   NUMBER
E8       EQU   8                   NUMBER
E25      EQU   25                  NUMBER
E7       EQU   7                   NUMBER
BLANK    EQU   C' '                BLANK
F0       EQU   C'0'                EBCDIC 0
XFF      EQU   X'FF'               TO TURN OFF BITS
N255     EQU   255
         EJECT
DCONTROL DSECT
* CONTROL LINE OF AN OUT OF LINE DISPLAY
         DS    0XL74
TITLE    DS    XL37                TITLE
FRAME    DS    XL11                FRAME NUMBER
CNTRL1   DS    XL7                 CONTROL CHARACTER 1                 X
                                        (RESERVED FOR BACKWARD         X
                                        FRAMING)
ASTERISK EQU   C'*'                INDICATES DETECTABLE FIELD
CNTRL2   DS    XL8                 CONTROL CHARACTER 2
FORWARD  EQU   C'F'                     FRAME FORWARD
PT1      EQU   C'P'                     STOP                  MB Y02958
PT2      EQU   C'T'                          TRACK            MB Y02958
CNTRL3   DS    XL7                 CONTROL CHARACTER 3
ERASE    EQU   C'E'                     ERASE DISPLAY
HOLD     EQU   C'H'                     HOLD DYNAMIC DISPLAY
UPDATE   EQU   C'U'                     UPDATE DYNAMIC DISPLAY
AREAID   DS    XL4                 AREA ID - CCA
         EJECT
         IHACTM  CXSA
         EJECT
         IHACTM CQE                                           MB Y02958
         EJECT
         IEECUCM FORMAT=NEW
         EJECT
         IHAWQE  DSECT=YES
         EJECT
         IEERDCM
         EJECT
         IEETDCM
         EJECT
         END
