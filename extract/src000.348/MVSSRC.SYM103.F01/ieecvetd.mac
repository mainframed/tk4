         TITLE 'IEECVETD MESSAGE 1'
IEECVETD CSECT
* C 84500-85800                                              MC SA52530
*/*IEECVETD: CHART */
*/*HEADER
*/*      CHART 5D IEECVETD - MESSAGE MOD 1 */
         EJECT
***********************************************************************
*
* STATUS       CHANGE LEVEL 0
*
* FUNCTION     TO PLACE ERROR MESSAGES OR INFORMATIONAL MESSAGES
*              INTO THE WARNING LINE OR THE INSTRUCTION LINE.
*    IF IT IS AN OUTPUT ONLY CONSOLE, TO PLACE THE MESSAGE IN    S21003
*    THE WARNING LINE.                                           S21003
*
* ENTRY POINT  IEECVETD
*
* INPUT        BIT SETTINGS IN DCMCMSG1 OR DCMCMSG2 TO INDICATE WHICH
*              MESSAGE MUST BE MOVED INTO THE DCM.
*
* OUTPUT       INDICATIONS TO THE I/O RTN OF WHAT TO WRITE.
*
* EXTERNAL REFERENCES NONE
*
* EXITS - NORMAL IEECVETH OR P OR R DEVICE-DEPENDENT IO
*        IEECVET1 - PROCESSOR 1 - IF IN HOLD MODE
*        IEECVET3 - DISPLAY 2 - IF IN ROLL MODE AND UNV. MSG NEEDED
*       - ERROR  NONE
* TABLES/WORK AREAS DISPLAY CONTROL MODULE (CONTAINED IN DSECT)
*
* ATTRIBUTES   REFRESHABLE, PRIVILEGED, TYPE 4 SVC
*
* NOTES        THE OPERATION OF THIS MODULE DOES NOT DEPEND UPON A
*              PARTICULAR INTERNAL REPRESENTATION OF THE EXTERNAL
*              CHARACTER SET.
***********************************************************************
         EJECT
***********************************************************************
*
*  REGISTER EQUATES
*
XO       EQU   0         REGISTER 0
X1       EQU   1         REGISTER 1
X2       EQU   2         REGISTER 2
X3       EQU   3         REGISTER 3
XWORK1   EQU   4         WORK REGISTER
XWORK    EQU   5         WORK REG
X6       EQU   6         REGISTER 6
X7       EQU   7         UCM BASE REG
X8       EQU   8         REGISTER 8
X9       EQU   9         DCM BASE REG
XA       EQU   10        PROGRAM BASE REG
XB       EQU   11        CXSA BASE REG
XC       EQU   12        UCM ENTRY BASE REG
XD       EQU   13        USED TO SAVE REGISTER 14
XE       EQU   14        REGISTER 14
XF       EQU   15        REGISTER 15
RRDCM    EQU   15        R DCM BASE REGISTER
X1PARM   EQU   1
X8UCME   EQU   8
XFBRANCH EQU   15
***********************************************************************
         EJECT
***********************************************************************
*
*        EQUATES
*
ID1      EQU   C'E'                1ST CHARACTER OF CSECT ID
ID2      EQU   C'D'                2ND CHARACTER OF CSECT ID
CHARY    EQU   C'Y'                CHARACTER Y
N0       EQU   0                   NUMBER
N1       EQU   1                   NUMBER
N2       EQU   2                   NUMBER
N4       EQU   4                   NUMBER
N6       EQU   6                   NUMBER
N13      EQU   13                  NUMBER
N14      EQU   14                  NUMBER
N22      EQU   22                  FIELD INCREMENT               S21002
N26      EQU   26                  NUMBER
N27      EQU   27                  NUMBER
N31      EQU   31                  NUMBER
N32      EQU   32                  NUMBER
N33      EQU   33                  NUMBER
N36      EQU   36                  NUMBER
N15      EQU   15                  NUMBER
N59      EQU   59                  NUMBER
N255     EQU   255                 NUMBER
BLANK    EQU   C' '                BLANK CHARACTER
N54      EQU   54                  NUMBER
R        EQU   C'R'                                              S21002
***********************************************************************
         EJECT
*/*E IEECVETD */
*
* ESTABLISH BASES
*
*/*%A001: P (,%A002) ESTABLISH ADDRESSABILITY */
         BALR  XA,N0     ESTABLISH PROGRAM ADDRESSIBILITY
         USING *,XA
         B     BEGIN               BRANCH AROUND PATCH AREA
ICATCH   DC    CL72'IEECVETD'      EYECATCHER AND FIELD MAINTENANCE
BEGIN    EQU   *                   END OF PATCH AREA
         LR    XB,X1               ESTABLISH CXSA ADDRESS
         USING CXSA,XB
         LR    XD,XE               SAVE RETURN REGISTER
         L     XC,CSAUCM           ESTABLISH UCM ADDRESS
         USING UCMLIST,XC
         L     RRDCM,UCMXB         GET POINTER TO DCM
         USING DCMTSRT,RRDCM       ESTABLISH ADDRESSABILITY
         L     X9,N0(RRDCM)        LOAD PT TO TDCM               S21003
         USING DCMSTRT,X9          ESTABLISH DCM BASE REGISTER
         L     X7,CSACTLM          GET POINTER TO UCM
         USING UCM,X7              ESTABLISH UCM BASE REGISTER
         MVC   DCMTRACE(DCMTRLEN),DCMTRAC2 SHIFT OLD TRACE ENTRIES
         MVI   DCMTREN1,ID1        PUT CSECT ID INTO
         MVI   DCMTREN2,ID2        NEW TRACE ENTRY
         L     X2,DCMAWARN         GET ADDR OF WARNING LINE
         L     X3,DCMAINS          GET ADDR OF INSTRUCTION LINE
         LA    X6,IOEXIT           LOAD RETURN REG WITH IO EXIT ADDR
*/*%A002: D (YES,%A003,NO,NOTOUT) OUTPUT ONLY CONSOLE */
         TM    UCMDISP,UCMDISPF+UCMDISPG Q. OUTPUT ONLY CONSOLE  S21003
         BZ    NOTOUT              NO--                          S21003
*/*%A003: P (,NOTOUT) INSTRUCTION LINE PT = WARNING LINE */
         LR    X3,X2               YES-SET INSTR. LINE PT=WARN.  S21003
NOTOUT   EQU   *                                                 S21003
         SPACE 2
*  TEST FOR TYPE OF MESSAGE TO BE MOVED INTO WARNING OR INSTRUC LINE
*
*/*NOTOUT: D (YES,DELREQ,NO,%A005) DELETION REQUESTED MSG */
         TM    DCMCMSG2,DCMDLREQ   Q. MOVE IN DELETION REQUESTED MSG
         BO    DELREQ              YES
*/*%A005: D (YES,CHGOPT,NO,%A006) CHANGE OPTIONS MSG */
         TM    DCMCMSG1,DCMCHOPT   Q. MOVE IN CHANGE OPTIONS MSG
         BO    CHGOPT              YES
*/*%A006: D (YES,INVOP,NO,LONGTST) INVALID OP MSG */
         TM    DCMCMSG2,DCMINVOP   Q. MOVE IN INVALID OP MSG
         BO    INVOP               YES
LONGTST  EQU   *
*/*LONGTST: P (,%A007) PRIME REG 6 WITH IOEXIT ADDR */
         LA    X6,IOEXIT           LOAD RETURN REG WITH EXIT ADDR
*/*%A007: D (YES,UNVIEW,NO,%A010) UNVIEWABLE MSG */          MC SA52530
         TM    DCMCMSG1,DCMUNMSG   Q. MOVE IN UNVIEWABLE MSG MC SA52530
         BO    UNVIEW              YES                       MC SA52530
*/*%A009: D (YES,WARNCON,NO,%A009) CON=N,DEL=Y WARNING */    MC SA52530
         TM    DCMCMSG1,DCMWRCDL   Q. MOVE IN CON=N, DEL=Y   MC SA52530
         BO    WARNCON             YES                       MC SA52530
*/*%A010: D (YES,RQINC,NO,%A011) REQUEST INCONS MSG */
         TM    DCMCMSG2,DCMRQINC   Q. MOVE IN REQUEST INCONS MSG.
         BO    RQINC               YES
*/*%A011: D (YES,ILLCURS,NO,%A012) ILLEGAL CURSOR OP MSG */
         TM    DCMCMSG2,DCMMSGCR   Q. MOVE IN ILLEGAL CURSOR OP MSG
         BO    ILLCURS             YES
*/*%A012: D (YES,MODEM,NO,%A013) ROLL MODE MSG */
         TM    DCMCMSG3,DCMCMRLL    Q. MOVE IN ROLL MODE MSG
         BO    MODEM               YES
*/*%A013: R RETURN VIA REG 6 */
         BR    X6                  EXIT TO I/O RTN               S21002
         SPACE 2
UNVIEW   EQU   *
         L     XE,UCMXB            POINT TO RDCM              MD  M1687
         USING DCMTSRT,XE          BASE RDCM
         OI    DCMR2FLG,DCMRXUNV   SET UNV MSG IN RDCM        MD  M1687
*/*UNVIEW: D (YES,%A014,NO,NOROLL) IN ROLL MODE */
         CLI   DCMDEL,R            ARE WE IN ROLL MODE           S21002
         BNE   NOROLL              NO - WRITE UNVIEWABLE MSG     S21002
*/*%A014: P (,%A015) INDIC. SET TIMER AND SET ON FLAGS IN RDCM */
         OI    DCMR2FLG,DCMRXTMR   SET TIMER FLAG IN RDCM     MD  M1687
*/*%A015: P (,XCTL) MOVE DISPLAY 2 NAME INTO CXSA */
         L     XFBRANCH,DCMNDSP2   LOAD DISPLAY 2 ADDRESS
*                                  FOR EXIT TO IEECVET3
         B     XCTL                GO TO SET TIMER ON            S21002
NOROLL   EQU   *                                                 S21002
*/*NOROLL: S (,%A016) BLNKRHT: BLANK RIGHT HALF WARNING LINE */
         BAL   XE,BLNKRHT          GO BLANK RIGHT OF WARN LINE
*/*%A016: P (,WARNEXIT) MOVE UNVIEWABLE MSG AND INDIC. IT IS WRITTEN TO
*/* SCREEN */
         LH    XWORK,DCMLGNTH      GET LENGTH OF A LINE
         LH    XWORK1,H26          GET LENGTH OF WARNING MSG
         SR    XWORK,XWORK1        GET DIFFERENCE
         BCTR  XWORK,N0            DECRE BY 1
         AR    XWORK,X2            INCRE TO CORRECT DISP IN WARN LINE
         MVC   N0(N26,XWORK),UNVEWMSG  MOVE IN UNVIEWABLE MSG
         OI    DCMR2FLG,DCMRXUNV INDIC.UNVIEW MSG WRITTEN TO SCRNS21002
*/*WARNEXIT: P (,IOEXIT) INDICATE WARNING FLAG */
WARNEXIT EQU   *
         OI    DCMIOCM1,DCMWRWRN
IOEXIT   EQU   *
*/*IOEXIT: D (YES,TURNOFF,NO,%A017) UNVIEWABLE MSG MOVED */
         TM    DCMCMSG1,DCMUNMSG+DCMCHOPT UNVIEWABLE OR CHANGE OPTIONS
         BNZ   TURNOFF             YES, DO NOT SOUND ALARM
*/*%A017: D (YES,TURNOFF,NO,%A17) DELETE REQ. IN LINE */
         TM    DCMCMSG2,DCMDLREQ   Q  IS DELETE REQUESTED IN LINE
         BO    TURNOFF             YES, DO NOT SOUND ALARM
*/*%A17: P (,TURNOFF) TURN ON SOUND ALARM BIT */
         OI    DCMIOCM1,DCMSOUND   TURN ON SOUND ALARM BIT
TURNOFF  EQU   *
*/*TURNOFF: P (,XCTL) MOVE I/O NEME INTO CXSA */
         L     XFBRANCH,DCMIORTN   LOAD IO ROUTINE ADDRESS
*                                  FOR EXIT TO IEECVET(H,P,R, OR U)
XCTL     EQU   *
*/*XCTL: P (,%A018) TURN OFF MESSAGE INDICATORS */
         NI    DCMCMSG1,N255-DCMUNMSG-DCMSTEX-DCMCHOPT-DCMELONG-DCMWRCD*
               L-DCMDELNT          TURN OFF MESSAGE BITS
         MVI   DCMCMSG2,N0         ZERO MESSAGE INDICATORS
         L     X1PARM,DCMCXSVE     RESTORE CXSA ADDRESS
         BR    XFBRANCH            EXIT ADDRESS ALREADY SET
BLNKRHT  EQU   *
*/*E BLNKRHT */
*/*%A019: P (,%A020) BLANK RIGHT HALF OF WARNING LINE */
         LH    XWORK,DCMLGNTH      GET LENGTH OF LINE
         SRL   XWORK,N1            DIVIDE BY TWO              MH  M2070
         LR    XWORK1,X2           GET ADDR OF WARNING LINE   MH  M2070
         AR    XWORK1,XWORK        ADD HALF LINE              MH  M2070
         MVI   N0(XWORK1),BLANK    BLANK FIRST CHARACTER
         BCTR  XWORK,N0            REDUCE FOR ONE JUST BLANKEDMH  M2070
         BCTR  XWORK,N0               AND AGAIN FOR EXECUTE   MH  M2070
         EX    XWORK,BLWARN        BLANK WARN LINE
*/*%A020: P (,%A021) TURN OFF BLANKING BIT */
         NI    DCMIOCM2,N255-DCMBLWRR   TURN OFF BLANKING BIT
*/*%A021: R RETURN TO CALLER */
         BR    XE                  RETURN
BLLFT    EQU   *
*/*E BLLFT */
*/*%B01: P (,%A022) BLANK LEFT HALF OF WARNING LINE */
         MVI   N0(X2),BLANK        BLANK WARNING LINE
         MVC   N1(N36,X2),N0(X2)   PROPAGATE BLANKS
         NI    DCMIOCM2,N255-DCMBLWRL   TURN OFF BLANKING BIT
*/*%A022: R RETURN TO CALLER */
         BR    XE                  RETURN
BLINST   EQU   *
*/*E BLINST */
*/*%A023: P (,%A024) BLANK INSTRUCTION LINE */
         LR    XWORK1,X3           GET ADDR OF INSTRUC LINE
         LH    XWORK,DCMLGNTH      GET LENGTH OF LINE
         BCTR  XWORK,N0            SUBTRACT
         BCTR  XWORK,N0              TWO FROM LENGTH FOR MOVE
         MVI   N0(XWORK1),BLANK    BLANK FIRST CHARACTER
         EX    XWORK,BLWARN        EXECUTE INTO MOVE
*/*%A024: R RETURN TO CALLER */
         BR    XE                  RETURN
CHGOPT   EQU   *
*/*CHGOPT: P (,%A029) INDIC. 2260 CURSOR TO BE ADVANCED */
         OI    DCMIOUNQ,DCMRPCUR   INDICATE 2260 CURSOR TO BE ADVANCED
*/*%A029: S (,%A030) BLINST: BLANK INSTRUCTION LINE */
         BAL   XE,BLINST                BLANK INSTRUCTION LINE
*/*%A030: P (,CHGREG6) MOVE 'CHG OPTIONS' MSG */
         MVC   N0(N33,X3),CHGOPMSG MOVE IN ERROR MESSAGE
CHGREG6  EQU   *
*/*CHGREG6: P (,INSTWRIT) PRIME REG 6 WITH 'LONGTST' EXIT ADDR */
         LA    X6,LONGTST          GET EXIT ADDRESS
INSTWRIT EQU   *
*/*INSTWRIT: P (,%A031) INDIC. WRITE INSTRUCTION LINE */
         OI    DCMIOCM1,DCMWRINS        INDICATE WRITE INSTRUC LINE
*/*%A031: D (YES,%A032,NO,EXIT) DEVICE A LIGHT PEN DEVICE */
         TM    DCMIOUNQ,DCMW2250   Q. IS DEVICE A LIGHT PEN DEVICE
         BNO   EXIT                NO, EXIT
*/*%A032: P (,EXIT) MOVE *ENTER*CANCEL* & SET FLAGS ON */
         MVC   N59(N15,X3),ENCN    MOVE ENTER-CANCEL MESSAGE INTO LINE
         NI    DCMIOUNQ,N255-DCMINNOR   TURN OFF NORMAL LINE BIT
         OI    DCMIOUNQ,DCMINERR   INDICATE ERROR MSG IN INST LINE
EXIT     EQU   *
*/*EXIT: R BRANCH VIA REG 6 */
         BR    X6                  EXIT EITHER TO I/O RTN OR TO
*                                      CHECK FOR OTHER MESSAGES TO WRIT
WARNCON  EQU   *
*/*WARNCON: S (,%A033) BLLFT: BLANK WARNING LINE */
         BAL   XE,BLLFT            GO BLANK WARN LINE
*/*%A033: P (,WARNEXIT) MOVE 'WARNING - CON=Y,DEL=Y' MSG */
         MVC   N0(N27,X2),WARNCMSG MOVE IN ERROR MESSAGE
         B     WARNEXIT            EXIT TO I/O RTN
DELREQ   EQU   *
*/*DELREQ: P (,%A035) INDIC. 2260 CURSOR TO BE REPOSITIONED */
         OI    DCMIOUNQ,DCMRPCUR   INDICATE TO 2260 TO REPOSITION CURSO
*/*%A035: S (,%A036) BLINST: BLANK INSTRUCTION LINE */
         BAL   XE,BLINST           GO BLANK INSTRUC LINE
*/*%A036: P (,CHGREG6) MOVE 'DELETION REQUESTED' MSG */
         MVC   N0(N26,X3),DELRQMSG MOVE IN ERROR MESSAGE
         B     CHGREG6             GO SET X6 TO LONGTST          S21002
RQINC    EQU   *
*/*RQINC: S (,%A037) BLINST: BLANK INSTRUCTION LINE */
         BAL   XE,BLINST           GO BLANK INSTRUC LINE
*/*%A037: P (,%A0375) MOVE 'K REQ. INCONS.' MSG */
         MVC   N0(N31,X3),RQINCMSG MOVE IN ERROR MESSAGE
*/*%A0375: D (YES,%A0376,NO,INSTWRIT) ADD 'STATUS ALREADY EXISTS' */
         TM    DCMCMSG1,DCMSTEX    Q. ADD STATUS EXISTS       MF  M1680
         BNO   INSTWRIT            NO, EXIT TO I/O RTN        MF  M1680
*/*%A0376: P (,INSTWRIT) ADD 'STATUS ALREADY EXISTS' */
         MVC   N31(N22,X3),STATMSG ADD STATUS EXISTS MSG         S21002
         B     INSTWRIT            EXIT TO I/O RTN
ILLCURS  EQU   *
*/*ILLCURS: S (,%A038) BLINST: BLANK INSTRUCTION LINE */
         BAL   XE,BLINST           BLANK INSTRUC LINE
*/*%A038: P (,INSTWRIT) MOVE 'ILLEGAL CURSOR OP.' MSG */
         MVC   N0(N54,X3),ILLCRMSG MOVE IN ERROR MESSAGE
         B     INSTWRIT            EXIT TO I/O RTN
INVOP    EQU   *
*/*INVOP: S (,%A039) BLINST: BLANK INSTRUCTION LINE */
         BAL   XE,BLINST           BLANK INSTRUC LINE
*/*%A039: P (,%A040) MOVE 'K INVALID OPERAND' MSG */
         MVC   N0(N27,X3),INVOPMSG MOVE IN ERROR MESSAGE         S21002
         L     XWORK,DCMDSAV       GET ADDR OF BAD OPERAND
*/*%A040: P (,CHGREG6) MOVE BAD OPERAND NEXT TO IT */
         MVC   N26(N6,X3),N0(XWORK) MOVE INVALID OPERAND INTO LINE
         B     CHGREG6             GO SET X6 TO LONGTST          S21002
MODEM    EQU   *
*/*MODEM: P (,%A041) TURN OFF MSG INDICATOR */
         NI    DCMCMSG3,N255-DCMCMRLL  TURN OFF MSG INDICATOR
*/*%A041: S (,%A042) BLLFT: BLANK LEFT HALF OF WARNING LINE */
         BAL   XE,BLLFT            BLANK
*/*%A042: P (,WARNEXIT) MOVE 'MODE=' MSG AND R OR RD ALSO */
         MVC   N0(N13,X2),MODERMSG MOVE IN ERROR MESSAGE
         MVC   N14(N2,X2),DCMDEL   MOVE IN R OR RD
         B     WARNEXIT            EXIT TO I/O RTN
PROCEXIT EQU   *
*/*PROCEXIT: P (,XCTL) MOVE PROCESSOR 1 NAME INTO CXSA */
         L     XFBRANCH,DCMNPROC   LOAD PROC 1 ADDRESS
         B     XCTL                TURN OFF INDICATORS
         EJECT
**********************************************************************
BLWARN   MVC   N1(N0,XWORK1),N0(XWORK1)   USED FOR BLANKING
**********************************************************************
         SPACE 2
ENCN     DC    C'*ENTER**CANCEL*'  15 CHARACTERS                 S21002
NOHRDMSG DC    C'IEEI55I NO HARD COPY-CON=Y,DEL=N' 32 CHARACTERS S21002
UNVEWMSG DC    C'IEE160I UNVIEWABLE MESSAGE'          26 CHAR
CHGOPMSG DC    C'IEE150I CHANGE OPTIONS IF DESIRED'   33 CHAR
WARNCMSG DC    C'IEE161I WARNING-CON=N,DEL=Y'         27 CHAR
DELRQMSG DC    C'IEE157I DELETION REQUESTED' 26 CHARACTERS
RQINCMSG DC    C'IEE158I K  REQUEST INCONSISTENT' 31 CHARACTERS  S21002
STATMSG  DC    C'-STATUS ALREADY EXISTS'       22 CHARS          S21002
ILLCRMSG DC    C'IEE154I ILLEGAL CURSOR OPERATION - CURSOR REPOSITIONEDX
               '                                      53 CHAR
INVOPMSG DC    C'IEE156I K INVALID OPERAND-'  27 CHARS           S21002
MODERMSG DC    C'IEE163I MODE='                       13 CHAR
**********************************************************************
*
*        CONSTANTS
*
CHARNH   DC    C'N '               CHARACTER N
H38      DC    H'38'               CONSTANT OF 38
H37      DC    H'37'               CONSTANT OF 37
H26      DC    H'26'               CONSTANT
         EJECT
         IEERDCM
         EJECT
         IEETDCM
         EJECT
         IEECUCM  FORMAT=NEW
         EJECT
         IHACTM  CXSA
*/*IEECVETD: END */
         END
