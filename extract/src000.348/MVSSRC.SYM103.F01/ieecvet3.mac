IEECVET3 CSECT
*A162804,162846,162850                                        MH Y02137
*D162724-162803                                               MH Y02137
*C 076000                                                     MB YM4087
*A 161790,161929                                              MB YM1955
*C 036000                                                     MB YM1955
*A 035600,044100,069100,069200,069600                         MB YM1956
*C 069500-070500,162882                                       MB YM1956
*D 065500,066000,162405,162435,162485                         MB YM1956
         TITLE 'IEECVET3 DISPLAY 2'
***********************************************************************
*
* STATUS       CHANGE LEVEL=0
*
* FUNCTION     WHEN MESSAGES DISPLAYED ARE ACCEPTED REPLIES, THIS
*              ROUTINE WILL GET CONTROL TO MARK THE ACCEPTED REPLY AND
*              ITS ASSOCIATED WTOR WITH VERTICAL BAR.
*
* ENTRY POINT  IEECVET3
*
* INPUT        INDICATION OF ACCEPTED REPLIES IN SCREEN CONTROL TABLE
*
* OUTPUT       MARKING OF ACCEPTED REPLIES AND ASSOCIATED WTORS
*
* EXTERNAL REFERENCES NONE
*
* EXITS-NORMAL  IEECVET1 PROCESSOR
*      -ERROR   NONE
*
* TABLES/WORK AREAS DISPLAY CONTROL MODULE (CONTAINED IN DSECT)
*
* ATTRIBUTES   REFRESHABLE, PRIVILEGED, TYPE 4 SVC
*
* NOTES        THE OPERATION OF THIS MODULE DOES NOT DEPEND UPON A
*              PARTICULAR INTERNAL REPRESENTATION OF THE EXTERNAL
*              CHARACTER SET.
*
* NOTES:
*    CHANGES FOR SDS/DIDOCS LINE ITEMS S21002,S21003, RESPECTIVELY:
*    1.  EXTRA LOAD INSTRUCTION TO ACCESS TDCM.
*
*    2.  CHANGE SEQUENCE OF BRANCH INSTRUCTIONS AT PREPEXIT.
*
*    3.  IF A MESSAGE AREA BUFFER LINE CONTAINS JUNK, TO TURN OFF
*       JUNK BIT AND BLANK LINE, BEFORE MOVING TEXT INTO LINE FROM WQE.
*
***********************************************************************
         EJECT
***********************************************************************
*
*    REGISTER USAGE
***********************************************************************
*
XFBRANCH EQU   15
XFWORK   EQU   15
XERTRN   EQU   14
XEWORK   EQU   14
XDWORK   EQU   13
XCPBASE  EQU   12
XBTDCM   EQU   11
XARDCM   EQU   10
X9UCM    EQU   9
X8UCME   EQU   8
X7SUB    EQU   7
X6DOM    EQU   6
X5SCT    EQU   5
X4MSG    EQU   4
X3WORK   EQU   3
X2WORK   EQU   2
X1PARM   EQU   1
X0WORK   EQU   0
         EJECT
***********************************************************************
***                                                                 ***
*                        EQUATES                                      *
***                                                                 ***
ID1      EQU   C'E'                1ST CHARACTER OF CSECT ID
ID2      EQU   C'3'                2ND CHARACTER OF CSECT ID
ONQUE    EQU   X'80'               TIMER ELEMENT NOT ON QUEUE    S21003
ISSUETIM EQU   X'80'               STIMER BIT IN BASE DCM
LOWR     EQU   C'R'                LOWER CASE R
DOMLN    EQU   6                   LENGTH OF DOM TAB ENTRY    MB YM1956
N0       EQU   0                   NUMBER
N1       EQU   1                   NUMBER
N2       EQU   2                   NUMBER
N3       EQU   3                   NUMBER
N4       EQU   4                   NUMBER
N5       EQU   5             FIELD INCREMENT
N7       EQU   7                   NUMBER                     MC  M1457
N16      EQU   16                  NUMBER
N22      EQU   22                  NUMBER                     MC  M1457
N28      EQU   28                  NUMBER
N120     EQU   120                 DISPLACEMENT OF TCBTME        S21003
N255     EQU   255                 NUMBER
N6       EQU   6                   NUMBER
N21      EQU   21                  NUMBER
F0       EQU   C'0'                CHARACTER                  MC  M1457
SLASH    EQU   C'×'                SLASH FOR AUTOMATIC DELETE
R        EQU   C'R'                R FOR REPLY COMPARISOR
BLANK    EQU   C' '                BLANK
Y        EQU   C'Y'                LETTER Y
COMMA    EQU   C','                COMMA FOR SPLIT POINT
***********************************************************************
         EJECT
***********************************************************************
*
***                                                                 ***
*                        INITIALIZE PROGRAM                           *
***                                                                 ***
         BALR  XCPBASE,N0         SET UP
         USING *,XCPBASE                 PROGRAM ADDRESSABILITY
         B     BEGIN               BRANCH AROUND PATCH AREA
ICATCH   DC    CL72'IEECVET3'      EYECATCHER AND FIELD MAINTENANCE
BEGIN    EQU   *                   END OF PATCH AREA
         USING CXSA,X1PARM         ESTABLISH CXSA ADDRESSABILITY
         L     X9UCM,CSACTLM          GET UCB POINTER
         USING UCM,X9UCM              DECLARE IT
         L     X8UCME,CSAUCM        GET UCM ENTRY ADDRESS
         USING UCMLIST,X8UCME       DECLARE IT
         L     XARDCM,UCMXB         GET POINTER TO RES DCM
         DROP  X8UCME               DONT NEED UCM ENTRY PTR
         USING DCMTSRT,XARDCM          USE SAME REG FOR RES DCM
         L     XBTDCM,DCMADTRN    GET BASE FOR PAGEABLE DCM
         USING DCMSTRT,XBTDCM              DECLARE IT
         MVC   DCMTRACE(DCMTRLEN),DCMTRAC2 SHIFT OLD TRACE ENTRIES
         MVI   DCMTREN1,ID1        PUT CSECT ID INTO
         MVI   DCMTREN2,ID2        NEW TRACE ENTRY
         L     XFBRANCH,CSAXC      ADDRESS FREELOCK SUBROUTINE
         BALR  XERTRN,XFBRANCH     RELEASE LOCKS
         TM    DCMR2FLG,DCMRXTMR  SET TIMER
         BO    SETIMER            YES SEE IF TIMER IS SET
         B     IOEXIT              FALSE ENTRY EXIT           MB YM4087
MSGEXIT  EQU   *
         L     XFBRANCH,DCMNMSG1   LOAD MESSAGE 1 ADDRESS
         B     DISPEX              EXIT TO IEECVETD
PROCEXIT EQU   *
         L     XFBRANCH,DCMNPROC   LOAD PROC 1 ADDRESS
         B     DISPEX              EXIT TO IEECVET1
IOEXIT   EQU   *
         TM    DCMCMSG1,DCMUNMSG   WRITE UNVIEWABLE MSG
         BO    MSGEXIT            EXIT TO MSG MODULE
         CLI   DCMIOCM1,N0         ANY IO TO DO
         BE    PROCEXIT            NO EXIT
         L     XFBRANCH,DCMIORTN   YES GO TO IO RTN
DISPEX   EQU   *
         L     X1PARM,DCMCXSVE     PASS CXSA ADDRESS IN REG 1
         BR    XFBRANCH            EXIT ADDRESS ALREADY SET
SETIMER  EQU   *
         NI    DCMR2FLG,N255-DCMRXTMR-DCMRXRLL  FLAGS OFF
         L     X7SUB,DCMSUBAD       LOAD POINTER
         USING SUBDSECT,X7SUB       ADDRESS SUB
         L    X7SUB,SUBPBASE        ADDRESS BASE DCM
         DROP X7SUB
         USING SUBDCMB,X7SUB
         TM   DCMIND,DCMTMRST      IS AN STIMER IN EFFECT
         BZ    TIMESET             BRANCH NO TO SET TIMER
         L     XDWORK,UCMPXA       POINT TO COMM TASK TCB     MH Y02137
         L     XDWORK,N120(XDWORK)   GET TQE POINTER
         LTR   XDWORK,XDWORK       VALID POINTER              MH Y02137
         BZ    TIMESET             NO, RESTART TIMER          MH Y02137
         TM    N0(XDWORK),ONQUE     IS ELEMENT ON TIMER QUEUE
         BZ    IOEXIT              YES GO STRAIGHT TO IO
TIMESET  EQU   *
         NI    DCMDSTAT,N255-DCMDSINR   TURN OFF INT REQD
         LA    XDWORK,DCMSTART       GET EXIT ADDRESS
         STIMER REAL,(XDWORK),BINTVL=(X7SUB)
         OI    DCMIND,DCMTMRST          TURN ON STIMER BIT
         DROP X7SUB
GETOUT   EQU   *
         B     IOEXIT                   GO TO IO ROUTINE
         EJECT
***********************************************************************
***                                                                 ***
*                   CONSTANTS                                         *
***                                                                 ***
***********************************************************************
H126     DC    H'126'              NUMBER
TWO      DC    H'2'                NUMBER
H143     DC    H'143'              FIELD OF 2 LINES
HSIX     DC    H'6'                FIELD INCREMENT
EIGHT    DC    H'8'                CONSTANT
H1       DC    H'1'                CONSTANT
CON80    DC    H'80'                    BXLE INCREMENT
FOUR     DC    H'4'                FIELD CONSTANT
         EJECT
***********************************************************************
*        FLOW CHART STATEMENTS                                        *
***********************************************************************
*/*IEECVET3: CHART */
*/*%A: E (,%B) ENTRY POINT */
*/*%B: P (,%C) PROGRAM INITIALIZATION */
*/*%C: D (YES,SPLITMSG,NO,%D) ENTRY TO SPLIT MESSAGES */
*/*%D: D (YES,DISPCONT,NO,%E) ENTRY FOR ACCEPTED REPLY */
*/*%E: D (YES,SETIMER,NO,DISPEX) SET TIMER */
*/*DISPCONT: P (,FIND) INIT MESSAGE AND SCT POINTERS */
*/*FIND: D (YES,TEST,NO,TESTEND) IS MESSAGE IN LINE */
*/*TESTEND: D (YES,PREPEXIT,NO,%F) END OF TABLE */
*/*%F: P (,FIND) ADJUST POINTERS */
*/*TEST: D (YES,%G,NO,TESTEND) IS THIS AN ACCEPTED REPLY */
*/*%G: D (YES,DONTMARK,NO,%H) DELETE REQUEST PENDING */
*/*%H: P (,DONTMARK) FLAG MESSAGE */
*/*DONTMARK: P (,LOOP1) INIT FOR SCANNING */
*/*LOOP1: D (YES,%I,NO,NEXTMSG) IS THIS A WTOR */
*/*%I: D (YES,FLAG,NO,NEXTMSG) DO THE IDS MATCH */
*/*NEXTMSG: D (YES,%J,NO,REPLY) DID WE FIND WTOR */
*/*%J: P (,LOOP1) ADJUST POINTERS */
*/*REPLY: P (,REPLY1) INIT POINTERS FOR SCANNING */
*/*REPLY1: D (YES,FOUNDR,NO,%K) IS THIS CHARACTER AN R */
*/*%K: D (YES,TESTEND,NO,KICKLINE) END OF LIST */
*/*KICKLINE: P (,REPLY1) ADJUST POINTERS */
*/*FLAG: P (,%L) INIT CERTAIN DCM FIELDS */
*/*%L: D (YES,NOSLASH,NO,%M) DELETE REQUEST PENDING */
*/*%M: P (,NOSLASH) MARK AS AUTO DELETABLE */
*/*NOSLASH: D (YES,%N,NO,KICKLINE) IS THIS LINE CONTINUED */
*/*%N: P (,%O) GET NEXT LINE */
*/*%O: D (YES,DONTSLSH,NO,%P) DELETE REQUEST PENDING */
*/*%P: P (,DONTSLSH) FLAG AS AUTO DELETABLE */
*/*DONTSLSH: P (,KICKLINE) TURN OFF ACTION FLAGS  */
*/*FOUNDR: P (,LOOK) INIT FOR SCANNING */
*/*LOOK: D (YES,COMPARE,NO,%Q) IS THIS BYTE A NUMBER */
*/*%Q: D (YES,KICKLINE,NO,LOOK) ARE WE DONE */
*/*COMPARE: D (YES,%R,NO,KICKLINE) DO IDS MATCH */
*/*%R: P (,KICKLINE) MARK AS AUTO DELETABLE */
*/*PREPEXIT: D (YES,%S,NO,UNVTST) IS SCREEN FULL */
*/*%S: D (YES,%T,NO,NEXTEST) ANY INT REQ MSG ON SCREEN */
*/*%T: D (YES,NEXTEST,NO,DEL2EXIT) HAS INT DELETE BEEN TRIED */
*/*NEXTEST: D (YES,%U,NO,ROLLTST) DOES DELETE EQUAL YES */
*/*%U: D (YES,ROLLTST,NO,%V) DELETE REQUEST PENDING */
*/*%V: D (YES,IOEXIT,NO,%W) HAS DELETE BEEN TRIED */
*/*%W: P (,DISPEX) INIT FOR DELETE 4 EXIT */
*/*UNVTST: D (YES,NEXTEST,NO,ROLLTST) IS THERE AN UNVIEWABLE MESSAGE */
*/*ROLLTST: D (YES,SETIMER,NO,IOEXIT) ARE WE IN ROLL MODE */
*/*DEL2EXIT: P (,DISPEX) INIT FOR DELETE 2 EXIT */
*/*MSGEXIT: P (,DISPEX) INIT FOR MESSAGE MODULE EXIT */
*/*IOEXIT: D (YES,MSGEXIT,NO,%X) WRITE UNVIEWABLE MESSAGE MESSAGE */
*/*%X: D (YES,%Y,NO,DISPEX) ANY I/O TO DO */
*/*%Y: P (,DISPEX) INIT FOR I/O ROUTINE EXIT */
*/*DISPEX: R XCTL TO PROPER DIDOCS MODULE */
*/*SPLITMSG: P (,GOMOVE1) SPLIT MESSAGE */
*/*GOMOVE1: P (,MOVE) MOVE BOTH PARTS INTO DCM MESSAGE AREA */
*/*MOVE: P (,%Z) MARK DOM AND SCT TABLES */
*/*%Z: R RETURN TO CALLER */
*/*SETIMER: P (,%AA) SET OFF TIMER FLAGS */
*/*%AA: D (YES,%BB,NO,GETOUT) SHOULD TIMER BE ISSUED */
*/*%BB: P (,GETOUT) ISSUE TIMER MACRO */
*/*GETOUT: P (,IOEXIT) INIT FOR I/O ROUTINE EXIT */
*/*IEECVET3: END */
         EJECT
****                                                                ***
*                    DSECTS                                           *
***                                                                 ***
         IEERDCM
         EJECT
         IEETDCM
         EJECT
         IHACTM  CXSA
         EJECT
         IHAWQE  DSECT=YES
         EJECT
         IEECUCM  FORMAT=NEW
         EJECT
SUBDSECT DSECT
         IEECSUB Y,N,N,N,N,Y
NUMBMASK EQU   X'F0'                   NUMBER MASK
         END
