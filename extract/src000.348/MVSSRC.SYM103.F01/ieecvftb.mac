         TITLE 'IEECVFTB   IGC6B07B    DIDOCS PFK ROUTINE 2'
IEECVFTB CSECT
*D 251000,251500                                             ME  YM2527
*C 252000                                                    ME  YM2527
*/*IEECVFTB: CHART */
*/* HEADER
*/*CHART EA     IEECVFTB                  DIDOCS PFK ROUTINE
*/* 2                                             PAGE #             */
*/* E IEECVFTB */
         SPACE 5
* /* START OF SPECIFICATIONS ****
*02*  PROCESSOR = ASSEMBLER;
**** END OF SPECIFICATIONS ***/
         SPACE 4
* STATUS
*    CHANGE LEVEL 0
*    CREATED FOR RELEASE 21, LINE ITEM S21003.
         SPACE
* FUNCTION
*    TO PROCESS THE DEFINITION OR REDEFINITION, BY THE OPERATOR,
*    OF PROGRAM FUNTION KEYS ALLOCATED FOR AT SYSGEN TIME AND THE
*    DISPLAY OF THE PFK LINE ON THE SCREEN.
         SPACE
* ENTRY POINTS
*         IEECVFTB FOR ALL FUNCTIONS
*             FROM IEECVET4 WHEN A K D,PFK, K N,PFK OR K E,PFK COMMAND
*             IS ENTERED.
         SPACE
* INPUT
*    THE COMMAND AS ENTERED.
         SPACE
* OUTPUT
*    A NEW PFK DEFINITION IN THE DCM OR A FLAG BIT TO THE DEVICE
*    DEPENDENT I/O ROUTINE, INDICATING THAT THE PFK LINE MUST
*    BE ALTERED.
         SPACE
* EXITS, NORMAL
*         IEECVET1 (PROCESSOR 1) WHEN A KEY HAS BEEN DEFINED.
*         DEVICE DEPENDENT I/O ROUTINE TO WRITE THE PFK LINE.
         SPACE
* EXITS, ERROR
*         IEECVETD (MESSAGE MODULE 1) OR IEECVFTD (MESSAGE MODULE 3)
*         TO WRITE OUT ERROR MESSAGES.
         EJECT
* TABLES/WORK AREAS
*    PFK AREA
*     THIS MODULE USES THE PFK AREA WHICH IS CREATED BY
*    SYSGEN.  THERE WILL BE ONE AREA FOR EACH PFK WHICH WAS
*    ALLOCATED AT SYSGEN TIME.  THE DCMADPFK FIELD IN THE
*    RESIDENT DCM POINTS TO THE FIRST AREA AND ALL AREAS ARE
*    CONTIGUOUS.  FOLLOWING THE LAST AREA IS A ONE BYTE FIELD EQUAL TO
*    X'64', USED TO IDENTIFY THE END OF PFK WORKSPACE.
*     EACH PFK AREA IS 110 BYTES LONG FORMATTED AS FOLLOWS:
*
*      DCMNUM    A ONE BYTE FIELD CONTAINING THE KEY NUMBER
*                IN BINARY.
*
*      DCMSTS    A ONE BYTE FLAG FIELD.  FOR EXPLANATION SEE THE DCM
*                DSECT FOLLOWING THE CODE FOR THIS MODULE.
*
*      DCMVAL    A 108 BYTE FIELD WHICH IS EITHER:
*
*                 A.  A LIST OF KEYS IN THE FORM KFKF...KF/ WHERE K IS
*                      A ONE BYTE BINARY KEY NUMBER AND F IS A CONTROL
*                      BYTE WHICH CONTAINS C';' UNLESS PROCESSING
*                      IS TAKING PLACE.  THE SLASH (X'61')
*                      IDENTIFIES THE END OF THE LIST OF KEYS.
*                 B.  ONE OR MORE COMMANDS IN THE FORM
*                            COMMAND;COMMAND;...COMMAND
*                      WHERE SEMI-COLONS DELIMIT THE COMMANDS.  IF THE
*                      LAST COMMAND DOES NOT FILL THE BUFFER IT IS
*                      PADDED WITH BLANKS.
*
*    DCM   DESCRIBED IN DSECT AT END OF MODULE
         SPACE 2
* ATTRIBUTES
*    REFRESHABLE, PRIVILEGED, TYPE 4 SVC.
         SPACE
* CHARACTER CODE DEPENDENCY
*    THIS MODULE WAS ASSEMBLED WITH THE EBCDIC CHARACTER SET. IF A
*    DIFFERENT CHARACTER SET WILL BE USED AT EXECUTION THE MODULE
*    MUST BE RE-ASSEMBLED USING THAT CHARACTER SET. IN ADDITION THE
*    EQUATE 'DIGIT' MUST BE CHANGED TO INDICATE THE ZONE ASSIGNED
*    TO DIGIT CHARACTERS AND THE EQUATE 'PLUS' MUST BE CHANGED TO
*    A VALID POSITIVE DECIMAL SIGN.
         EJECT
* NOTES
*    THE FOLLOWING FLAG BITS ARE USED:
*     THE ACTION COLUMN INDICATES WHETHER THE BIT IS TURNED ON, OFF OR
*    JUST TESTED BY THIS MODULE.
*
*        NAME     ACTION            FUNCTION
*     DCMCMSG2
*      DCMRQINC     ON             REQUEST INCONSISTANT MESSAGE
*      DCMINVOP     ON             INVALID OPERAND MESSAGE
*     DCMCMSG4
*      DCMPFKNO     ON             NO PFK ALLOCATION MESSAGE
*     DCMIOCM1
*      DCMWRENT     ON             WRITE THE ENTRY AREA
*      DCMWRINS     ON             WRITE THE INSTRUCTION LINE
*      DCMINSC      ON             INSERT CURSOR
*     DCMIOCM2
*      DCMINSSH     ON             INITIALIZE THE INSTRUCTION LINE
*      DCMBLENT     ON             BLANK THE ENTRY AREA
*     DCMIOCM3
*      DCMOPRMI     ON             RESTORE KEYBOARD
*      DCMWRPFK     ON             ALTER PFK LINE
*     DCMCOM3
*      DCMPFKWR     ON             WRITE PFK AREA TO DISK
*     DCMUTILT
*      DCMUTILA ON/OFF/TEST        KEY= OPERAND USED
*      DCMUTILB ON/OFF/TEST        END OF OPERAND FOUND
*      DCMUTILC ON/OFF/TEST        CON= OPERAND EXPECTED
*      DCMUTILD ON/OFF/TEST        PREVIOUS QUOTE DETECTED
*      DCMUTILF ON/OFF/TEST        MASTER KEY IN PROCESS
*     PFK AREA
*      DCMPFKCN     ON             KEY DEFINED AS CONVERSATIONAL MODE
*      DCMPFKDF   ON/TEST          KEY HAS BEEN DEFINED
*      DCMPFKKY   ON/TEST          KEY IS A LIST OF KEYS
         EJECT
*       REGISTER EQUATES
         SPACE
X1PARM   EQU   1
XERTRN   EQU   14
XFBRANCH EQU   15
PFKPTR   EQU   0                   POINTER TO PFK AREA
CXSABASE EQU   1                   CXSA BASE REGISTER
OPER     EQU   2                   OPERAND POINTER
APFK     EQU   3                   PFK AREA POINTER OR BINARY KEY
LPFK     EQU   4                   PFK LINE POINTER
COMPARE  EQU   4                   KEY COMPARISON
BADPT    EQU   4                   WORK REG FOR ERROR MESG SETUP
LIMIT    EQU   5                   SCAN LIMIT REGISTER
LISTAPFK EQU   5                   PFK AREA POINTER
MPFK     EQU   6                   MASTER PFK
SCAN     EQU   7                   SCAN REGISTER
DCMB     EQU   8                   DCM BASE REGISTER
UCME     EQU   9                   UCM ENTRY ADDRESS (MOMENTARY)
STRTPT   EQU   9                   WORK REGISTER
SCAN2    EQU   10                  SUBSCAN POINTER
ENDREG   EQU   10                  END OF NEW DEFINITION
BASE     EQU   11                  PROGRAM BASE REGISTER
LENGTH   EQU   12                  LENGTH FOR MVC
OPSTART  EQU   12                  START OF OPERAND LIST
RET      EQU   13                  RETURN FROM SUBROUTINE
KEYLIST  EQU   14                  KEY NUMBER FROM LIST
BADOP    EQU   14                  NUMBER OF DELETED QUOTES
RETURN   EQU   14                  RETURN REG FOR XCTL
STORE    EQU   15                  DEFINITION INDEX
         EJECT
START    BALR  BASE,N0             ESTABLISH BASE REGISTER
         USING *,BASE
         B     BEGIN               BRANCH AROUND PATCH AREA
ICATCH   DC    CL72'IEECVFTB'      EYECATCHER AND FIELD MAINTENANCE
BEGIN    EQU   *                   END OF PATCH AREA
         USING CXSA,CXSABASE       CXSA BASE PASSED AS PARM
         L     UCME,N16(CXSABASE)  ESTABLISH UCM ENTRY ADDRESS
         L     DCMB,N28(UCME)      ESTABLISH DCM ADDRESS
         USING DCMTSRT,DCMB
         L     PFKPTR,DCMADPFK     SAVE PFK AREA POINTER
         L     DCMB,DCMADTRN       GET TRANSIENT DCM BASE
         DROP  DCMB
         USING DCMSTRT,DCMB
         MVC   DCMTRACE(DCMTRLEN),DCMTRAC2 SHIFT OLD TRACE ENTRIES
         MVI   DCMTREN1,ID1        PUT CSECT ID INTO
         MVI   DCMTREN2,ID2        NEW TRACE ENTRY
         L     XFBRANCH,CSAXC      ADDRESS FREELOCK SUBROUTINE
         LR    X1PARM,CXSABASE     PASS CXSA ADDRESS IN REG 1
         BALR  XERTRN,XFBRANCH     RELEASE LOCKS
         OI    DCMIOCM2,DCMBLENT   BLANK THE ENTRY AREA
         OI    DCMIOCM1,DCMINSC+DCMWRENT+DCMWRINS CLEAN UP ENTRY AREA
         OI    DCMIOCM3,DCMOPRMI   AND RESTORE KEYBOARD
         SPACE 5
*/*%START: D (YES,%CK,NO,%ERROR)              ANY PFK ALLOCATED? */
***********************************************************
         LTR   APFK,PFKPTR         ANY PFKS ALLOCATED
         BZ    ERROR1               NO, GO TO INDICATE ERROR
         SPACE 5
*/*%CK: D (E,ERSPFK,N,DEFPFK,D,DISPFK)       WHICH OPERAND USED? */
***********************************************************
*  AT ENTRY THE POINTER IN DCMADOPN POINTS TO THE FIRST CHARACTER
*  OF THE OPERAND IN THE ENTRY AREA.  THIS IS EQUIVALENT TO
*  THE FIRST POSITION IN THE INPUT AREA, WHERE THE SCAN
*  WILL ACTUALLY TAKE PLACE.  IF A BAD OPERAND IS FOUND THE SCAN
*  POINTER WILL BE CONVERTED BACK TO INDICATE A POSITION IN THE
*  ENTRY AREA SO THAT THE CURSOR CAN BE CORRECTLY POSITIONED.
*  NOTE THAT THE INPUT AREA IS MODIFIED AS THE SCAN PROGRESSES
*  BY CONVERTING NUMBERS FROM EBCDIC TO BINARY AND REMOVING
*  PAIRED QUOTES.  AS A RESULT IT CANNOT BE USED TO WRITE ERROR
*  INFORMATION TO THE SCREEN.
         LA    OPER,DCMINPUT       POINT TO INPUT AREA
         CLI   N0(OPER),EPFK       IS OPERAND E,PFK
         BE    ERSPFK               YES, ERASE PFK LINE
         CLI   N0(OPER),NPFK       IS OPERAND N,PFK=
         BE    DEFPFK               YES, GO TO DEFINE PFK
*                                   NO, ASSUME OPERAND D,PFK
         SPACE 5
*/*DISPFK: D (NO,ALTER,YES,%ERROR)           IS PFK LINE DISPLAYED? */
***********************************************************
DISPFK   EQU   *
         L     LPFK,DCMPFKLN       GET START OF PFK LINE
         CLC   N0(N6,LPFK),BLANKS  IS LINE NOW BLANK
         BNE   ERROR2              NO, INCONSISTANT REQUEST
         B     ALTER               EXIT TO I/O MODULE
         SPACE 5
*/*ERSPFK: D (YES,ALTER,NO,%ERROR)           IS PFK LINE DISPLAYED? */
***********************************************************
ERSPFK   EQU   *
         L     LPFK,DCMPFKLN       POINT TO PFK LINE
         CLC   N0(N6,LPFK),BLANKS  IS LINE NOW BLANK
         BE    ERROR2              YES, INCONSISTANT REQUEST
         SPACE 5
*/*ALTER: P (,IOEXIT)    INDICATE LINE TO BE ALTERED (DCMWRPFK) */
***********************************************************
ALTER    OI    DCMIOCM3,DCMWRPFK   INDICATE LINE MUST BE ALTERED
         SPACE 5
*/*IOEXIT: R DEV. DEP. I/O ROUTINE */
***********************************************************
IOEXIT   EQU   *
         L     XFBRANCH,DCMIORTN   LOAD IO ROUTINE ADDRESS
*                                  FOR EXIT TO IEECVET(H,P,R, OR U)
         OI    DCMIOCM2,DCMINSSH   RESTORE INSTRUCTION LINE
XCTL     EQU   *
         L     X1PARM,DCMCXSVE     RESTORE CXSA ADDRESS
         BR    XFBRANCH            EXIT ADDRESS ALREADY SET
         EJECT
*/*DEFPFK: D (YES,%DIG,NO,%ERROR)    LEADING KEYWORD OK? */
***********************************************************
DEFPFK   EQU   *
         NI    DCMUTILT,ZEROS      CLEAR ALL UTILITY FLAGS
         LA    OPER,N1(OPER)       POINT TO COMMA
         CLI   N0(OPER),COMMA      IS IT THERE
         BNE   INVALOP              NO, INVALID
         LA    OPER,N1(OPER)       POINT TO PFK= KEYWORD
         CLC   N0(N4,OPER),PFK     CHECK KEYWORD
         BNE   INVALOP             NOT VALID. TELL OPERATOR
         LA    OPER,N4(OPER)       POINT TO NEXT SEGMENT
         CLI   Z(OPER),LPAREN      IS IT LEFT PARENTHESIS
         BNE   INVALOP              NO, GO TO FLAG ERROR
         SPACE 5
*/*%DIG: S (,VALID) CKDIGIT:         CHECK MASTER KEY FOR VALIDITY */
***********************************************************
         LA    OPER,N1(OPER)       POINT TO KEY BEING DEFINED
         LR    STRTPT,OPER         SAVE POINTER FOR STORE
         OI    DCMUTILT,DCMUTILF   INDICATE MASTER KEY IN PROCESS
         BAL   RET,CKDIGIT         GO TO CHECK VALIDITY
         NI    DCMUTILT,X'FF'-DCMUTILF  MASTER KEY PROCESSING OVER
         LR    MPFK,SCAN2          SAVE MASTER KEY AREA POINTER
         STC   APFK,Z(STRTPT)      STORE MASTER KEY (DIAG. ONLY)
         NI    N1(STRTPT),ZEROS    CLEAR FLAG BYTE
         SPACE 5
*/*VALID: D (CMD=,TEXT,KEY=,LIST,NONE,%ERROR) WHICH OPERAND USED? */
***********************************************************
VALID    CLC   Z(N4,OPER),CE       IS OPERAND CMD=
         BE    TEXT                 YES, FORMAT TEXT
         CLC   Z(N4,OPER),KE       IS OPERAND KEY=
         BNE   INVALOP              NO, GO TO FLAG ERROR
         OI    DCMUTILT,DCMUTILA   REMEMBER KEY= OPERAND
         LA    COMPARE,N108(OPER)  POINT TO END OF LIST
         ST    COMPARE,DCMDSAV+N12 SAVE FOR LATER COMPARE
         EJECT
*/*LIST: D (NO,OK,YES,%ERROR) IS MASTER KEY PART OF ANOTHER LIST?
*/**/
***********************************************************
LIST     EQU   *
         SR    COMPARE,COMPARE     CLEAR COMPARE REGISTER
         LR    LISTAPFK,PFKPTR     POINT TO PFK AREA
CKEND    CLI   Z(LISTAPFK),STOPPER IS THIS END OF AREA
         BE    OK                   YES, OK TO CONTINUE
         TM    N1(LISTAPFK),DCMPFKDF+DCMPFKKY     IS IT DEFINED
*                                                 AS A LIST OF KEYS
         BNO   BUMP                 NO, GO TO NEXT KEY
         IC    COMPARE,N0(LISTAPFK)     GET KEY NUMBER
         CR    COMPARE,APFK        IS IT ONE WE ARE DEFINING
         BE    BUMP                 YES, GO TO NEXT KEY
         LA    KEYLIST,N2(LISTAPFK) NO, POINT TO FIRST
*                                      KEY IN LIST
DEFTEST  IC    COMPARE,N0(KEYLIST) GET KEY FROM LIST
         CR    COMPARE,APFK        IS IT ONE WE ARE DEFINING
         BE    INVAL                YES, CAN'T DEFINE THIS ONE AS LIST
         LA    KEYLIST,N2(KEYLIST) POINT TO NEXT KEY
         CLI   N0(KEYLIST),KEYSTOP IS THIS END OF LIST
         BNE   DEFTEST              NO, LOOK AT NEXT ONE
BUMP     LA    LISTAPFK,PFKLGN(LISTAPFK)   YES, POINT TO NEXT AREA
         B     CKEND               GO CHECK IT
INVAL    LR    OPER,STRTPT         POINT BACK TO MASTER KEY
         B     INVALOP             ISSUE ERROR MESSAGE
         SPACE 5
*/*OK: P (,NEXT)      GET KEYS FROM LIST */
*/*NEXT: S (,ENDEF)  CKDIGIT: KEY IN LIST MUST NOT BE A LIST OF KEYS */
***********************************************************
OK       EQU   *
         LA    OPER,N4(OPER)       POINT TO FIRST KEY IN LIST
         LR    OPSTART,OPER        SAVE POINTER TO START OF LIST
         LR    STORE,OPER          POINT TO START OF NEW DEFINITION
NEXT     BAL   RET,CKDIGIT         CHECK AND CONVERT A KEY
         STC   APFK,N0(STORE)      STORE KEY IN DEFINITION
         MVI   N1(STORE),SEMI      STORE SEPARATOR IN DEFINITION
         LA    STORE,N2(STORE)     POINT TO NEXT FIELD
         TM    DCMUTILT,DCMUTILB+DCMUTILC    IS THIS END OF OPERAND
         BNZ   ENDEF                YES, CHECK FOR CON=
         C     OPER,DCMDSAV+N12    IS THIS END OF WORK AREA
         BL    NEXT                 NO, GET NEXT KEY
         B     INVALOP               YES, INVALID, TOO LONG
         EJECT
*/*ENDEF: D (NO,MOVEIT,YES,PCON) IS CON= OPERAND EXPECTED? */
***********************************************************
ENDEF    EQU   *
         MVI   N0(STORE),KEYSTOP   STOP LIST OF KEYS
         LR    OPER,OPSTART        POINT TO START OF DEFINITION
         LA    ENDREG,N2(STORE)    POINT TO END OF OPERAND
         TM    DCMUTILT,DCMUTILC   IS CON= OPERAND EXPECTED
         BNO   MOVEIT               NO, GO TO MOVE DEFINITION
         SR    BADOP,BADOP          YES, CLEAR REMOVED QUOTE REG
         B     PCON                CHECK OUT CON= OPERAND
         SPACE 5
*/*     E (,CKDIGIT)                    CKDIGIT SUBROUTINE */
*/*CKDIGIT: D (NO,%A,YES,COMCK) ARE WE LOOKING AT THE MASTER KEY? */
***********************************************************
CKDIGIT  EQU   *
         LA    LIMIT,N3(LIMIT)     MAXIMUM TWO DIGITS
         XC    DCMPACK(N8),DCMPACK CLEAR WORK AREA
         MVC   DCMCVBIN(N2),Z(OPER)  MOVE IN NEXT TWO CHARACTERS
         LR    SCAN,OPER           POINT SCANNER TO OPERAND
         TM    DCMUTILT,DCMUTILF   IS THIS THE KEY BEING DEFINED
         BO    COMCK                YES, MUST BE A NUMBER
         SPACE 5
*/*%A:  D (NO,%B,YES,CONVERS) IS THIS A RIGHT PAREN AND COMMA? */
***********************************************************
CKNUMB   EQU   *
         CLI   N0(SCAN),RTPAREN    IS IT RIGHT PAREN
         BNE   COMCK                NO, CONTINUE TESTING
         CLI   N1(SCAN),COMMA       YES, IS NEXT ONE A COMMA
         BE    CONVERS               YES, CONVERSATIONAL SPEC FOLLOWS
         SPACE 5
*/*%B: D (NO,COMCK,YES,ENDOP) IS THIS A RIGHT PAREN ALONE? */
***********************************************************
         CLI   N1(SCAN),BLANK        NO, IS IT A BLANK
         BE    ENDOP                  YES, END OF REDEFINE OPERANDS
         LA    SCAN,N1(SCAN)          NO, POINT TO BAD OPERAND
         B     BADSCAN2            TELL OPERATOR
         SPACE 5
*/*COMCK: D (YES,CONVERT,NO,%ERROR) IS THIS A VALID NUMBER? */
***********************************************************
COMCK    CLI   Z(SCAN),COMMA       IS THIS A COMMA
         BE    CONVERT              YES, GO TO CONVERT DIGITS
         CLI   Z(SCAN),ZERO        IS DIGIT LESS THAN ZERO
         BL    BADSCAN2             YES, ERROR
         CLI   Z(SCAN),NINE        IS DIGIT MORE THAN NINE
         BH    BADSCAN2             YES, ERROR
         MVC   DCMPACK+N1(N5),DCMPACK+N2  SHIFT ONE CHARACTER
         LA    SCAN,N1(SCAN)       POINT TO NEXT DIGIT
         BCT   LIMIT,CKNUMB        DIGIT OK, CHECK NEXT ONE
         B     BADSCAN2            OVER TWO DIGITS IS ERROR
* NOTE  CURSOR WILL POINT TO THIRD DIGIT.  TO POINT TO FIRST
*       DIGIT CHANGE BRANCH TO INVALOP.
         SPACE 5
*/*CONVERS: P (,CONVERT)   INDICATE CON= OPERAND EXPECTED (DCMUTILC) */
***********************************************************
CONVERS  EQU   *
         OI    DCMUTILT,DCMUTILC   INDICATE CON= OPER EXPECTED
         B     CONVERT             GO TO EXIT
         SPACE 5
*/*ENDOP: P (,CONVERT)     INDICATE END OF OPERAND FOUND (DCMUTILB) */
***********************************************************
ENDOP    EQU   *
         OI    DCMUTILT,DCMUTILB   INDICATE END OF OPERAND
         B     CONVERT             GO TO EXIT
         SPACE 5
*/*CONVERT: P (,ALLOC)     CONVERT KEY NUMBER TO BINARY */
***********************************************************
CONVERT  EQU   *
         OI    DCMPACK+N3,PLUS     FORCE VALID SIGN
         CR    OPER,SCAN           WERE THERE ANY DIGITS
         BE    INVALOP              NO, ERROR
* NOTE  CURSOR WILL POINT TO WHERE FIRST DIGIT SHOULD HAVE BEEN
         SR    APFK,APFK            YES, CLEAR ANSWER REG
         PACK  DCMCVBIN(N4),DCMPACK(N4) CONVERT
         XC    DCMPACK(N4),DCMPACK         EBCDIC
         CVB   APFK,DCMPACK                   TO BINARY
         SPACE 5
*/*ALLOC: D (YES,GOOD,NO,%ERROR)      IS KEY ALLOCATED? */
***********************************************************
ALLOC    EQU   *
         LR    SCAN2,PFKPTR        POINT TO FIRST PFK AREA
         SR    COMPARE,COMPARE     CLEAR REGISTER
CHECK    EQU   *
         CLI   Z(SCAN2),STOPPER    IS THIS END OF AREA
         BE    INVALOP              YES, KEY NOT ALLOCATED
         IC    COMPARE,Z(SCAN2)    GET KEY NUMBER
         CR    COMPARE,APFK        IS IT THE ONE WE WANT
         BE    GOOD                 YES
         LA    SCAN2,PFKLGN(SCAN2)  NO, INCREMENT TO NEXT AREA
         B     CHECK               CHECK NEXT ONE
         SPACE 5
*/*GOOD: D (NO,POINT,YES,%C)  ARE WE DEFINING A LIST? */
***********************************************************
GOOD     EQU   *
*  NOTE  DCMUTILA WILL NEVER BE ON DURING PROCESSING OF THE
*           KEY BEING DEFINED.
         TM    DCMUTILT,DCMUTILA   ARE WE DEFINING A LIST
         BNO   POINT                NO, CONTINUE
         SPACE 5
*/*%C: D (NO,POINT,YES,%ERROR)  IS THIS KEY A LIST OF KEYS? */
***********************************************************
         TM    N1(SCAN2),DCMPFKKY   YES, IS THIS KEY A LIST
         BO    INVALOP               YES, INVALID
         CR    SCAN2,MPFK            NO, IS THIS THE KEY BEING DEFINED
         BE    INVALOP                YES, INVALID
* NOTE  CURSOR WILL POINT TO FIRST DIGIT OF KEY NUMBER
*                                     NO, CONTINUE
         SPACE 5
*/*POINT: R                        RETURN TO CALLER */
***********************************************************
POINT    LA    OPER,N1(SCAN)       POINT TO NEXT PART OF OPERAND
         BR    RET                 RETURN TO CALLER
         EJECT
*/*TEXT: P (,END)       SCAN TWO SINGLE QUOTES TO ONE */
***********************************************************
TEXT     EQU   *
         LA    OPER,N4(OPER)       UPDATE OPERAND POINTER
         CLI   Z(OPER),QUOTE       IS THIS A QUOTE
         BNE   INVALOP              NO, INVALID
         LA    OPER,N1(OPER)       POINT TO START OF TEXT
         SR    BADOP,BADOP         CLEAR QUOTE COUNTER
         SR    LIMIT,LIMIT         CLEAR LIMIT REGISTER
         LA    LIMIT,TEXTLGN(LIMIT)   MAXIMUM NUMBER OF CHARACTERS
         LR    SCAN,OPER           INITIALIZE SCAN REGISTER
CKQUOTE  EQU   *
         CLI   Z(SCAN),QUOTE       IS THIS A QUOTE
         BE    QUOTECK              YES, CHECK FOR PAIR
         TM    DCMUTILT,DCMUTILD   WAS THERE A PREVIOUS QUOTE
         BO    END                  YES, MUST BE END OF TEXT
CT       LA    SCAN,N1(SCAN)       POINT AT NEXT CHARACTER
         BCT   LIMIT,CKQUOTE       GO CHECK IT
         B     BADSCAN             TOO MANY CHARACTERS
* NOTE  CURSOR WILL POINT TO 127TH CHARACTER IN ENTRY AREA.
QUOTECK  EQU   *
         TM    DCMUTILT,DCMUTILD   WAS LAST CHAR A QUOTE
         BO    ADJUST               YES, ADJUST LINE
         OI    DCMUTILT,DCMUTILD    NO, INDICATE THIS ONE IS
         B     CT                  CONTINUE SCAN
ADJUST   EQU   *
         NI    DCMUTILT,X'FF'-DCMUTILD  TURN OFF QUOTE FLAG
         BCTR  SCAN,N0             POINT BACK TO FIRST QUOTE
         LA    LENGTH,DCMINPUT     POINT TO START OF INPUT AREA
         LA    LENGTH,N126(LENGTH) POINT TO END OF INPUT AREA
         SR    LENGTH,SCAN         CALC LENGTH OF TEXT TO MOVE
         EX    LENGTH,MVCENTRY     SHIFT LINE TO CLEAR
*                                    DOUBLE QUOTE
         LA    BADOP,N1(BADOP)     ADD TO COUNT OF QUOTES REMOVED
         B     CT                  CONTINUE SCAN
         EJECT
*/*END: D (YES,PCON,NO,MOVEIT)             CON= OPERAND? */
***********************************************************
END      EQU   *
         LR    ENDREG,SCAN         SAVE PTR TO END OF TEXT
         CLI   Z(SCAN),RTPAREN     IS THIS RTPAREN
         BNE   BADSCAN              NO, INVALID
         CLI   N1(SCAN),COMMA      IS THIS A COMMA
         BE    PCON                 YES, PCON EXPECTED
         CLI   N1(SCAN),BLANK      IS THIS A BLANK
         BE    MOVEIT               YES, GO TO MOVE TEXT
         LA    SCAN,N1(SCAN)        NO, POINT TO BAD CHAR
         B     BADSCAN             GO TO TELL OPERATOR INVALID
         EJECT
*/*PCON: P (,MOVEIT)  CHECK OPERAND AND SET FLAG AS REQUIRED */
***********************************************************
PCON     EQU   *
         LA    SCAN,N2(SCAN)       POINT TO OPERAND
         CLC   N0(N4,SCAN),CONV    IS OPERAND CON=
         BNE   BADSCAN              NO, INVALID
         LA    SCAN,N4(SCAN)       POINT TO NEXT OPERAND
         CLI   N0(SCAN),Y          IS OPERAND YES (Y)
         BE    YES                  YES, GO TO FLAG IT
         CLI   N0(SCAN),N          IS OPERAND NO (N)
         BE    MOVEIT               YES, IT IS NO. BYPASS FLAGGING
         B     BADSCAN             NONE OF ABOVE, ERROR
YES      OI    N1(STRTPT),DCMPFKCN INDICATE CONVERSATIONAL MODE
         SPACE 4
*/*MOVEIT: P (,MOVE)  MOVE DEFINITION TO PFK AREA */
***********************************************************
MOVEIT   EQU   *
         MVI   N2(MPFK),BLANK      CLEAR OUT OLD
         MVC   N3(CLRLGN,MPFK),N2(MPFK)    PFK AREA
         XR    LENGTH,LENGTH       CLEAR LENGTH REGISTER
         LR    LENGTH,ENDREG       COMPUTE LENGTH
         SR    LENGTH,OPER            OF MOVE
         BCTR  LENGTH,N0           REDUCE BY ONE BECAUSE WE
*                                    SCANNED TO DELIMITER
         LTR   LENGTH,LENGTH       WAS THERE ANY TEXT
         BZ    UNDEF                NO, FLAG KEY AS UNDEFINED
         BCTR  LENGTH,N0           REDUCE BY ONE FOR EXECUTE
         EX    LENGTH,MVCKEY       MOVE DEFINITION TO PFK AREA
         TM    DCMUTILT,DCMUTILA   IS THIS A LIST OF KEYS
         BNO   MOVE                 NO, GO TO MOVE FLAGS
         OI    N1(STRTPT),DCMPFKKY INDICATE LIST OF KEYS
         SPACE 4
*/*MOVE: P (,IOEXIT)     FLAG KEY AS DEFINED */
***********************************************************
MOVE     EQU   *
         OI    N1(STRTPT),DCMPFKDF INDICATE KEY NOW DEFINED
UNDEF    MVC   N1(N1,MPFK),N1(STRTPT)   MOVE FLAGS TO PFK AREA
         MVI   DCMCULNO,N1         RESTORE CURSOR TO
         MVI   DCMPOSCU,N1            POSITION 1 LINE 1
         OI    DCMCOM3,DCMPFKWR    INDICATE THAT PFK AREA MUST
*                                     BE RE-WRITTEN TO DISK
         B     IOEXIT              EXIT FROM MODULE           ME YM2527
        EJECT
*/*%ERROR: P (,MESG)            SET UP ERROR MESSAGE */
***********************************************************
ERROR2   EQU   *
         OI    DCMCMSG2,DCMRQINC   INDICATE REQUEST INCONSISTANT
         B     MESG1               GO TO ISSUE MESSAGE
BADSCAN  EQU   *
         AR    SCAN,BADOP           NO, COMPENSATE FOR REMOVED QUOTES
BADSCAN2 LR    OPER,SCAN           POINT OPERAND TO BAD SCAN CHAR
INVALOP  EQU   *
         LA    BADPT,DCMINPUT      POINT TO INPUT AREA
         SR    OPER,BADPT          CALC DISPLACEMENT IN OPERAND
         L     BADPT,DCMADOPN      POINT TO OPERAND IN ENTRY AREA
         AR    BADPT,OPER          POINT TO BAD OPERAND IN ENTRY
         ST    BADPT,DCMDSAV       PASS POINTER TO MESG MODULE
         S     BADPT,DCMAENTR      CALC DISPLACEMENT IN ENTRY
         CH    BADPT,DCMLGNTH      IS OPERAND IN LINE TWO
         BH    LINE2                YES, COMPENSATE
         MVI   DCMCULNO,N1          NO, SET LINE NUMBER TO ONE
STCURS   EQU   *
         LA    BADPT,N1(BADPT)     ADD ONE TO POSITION
         STC   BADPT,DCMPOSCU      STORE CURSOR POSITION
         NI    DCMIOCM2,X'FF'-DCMBLENT  DON'T BLANK ENTRY AREA
         OI    DCMIOCM1,DCMINSC    INDICATE INSERT CURSOR
         OI    DCMCMSG2,DCMINVOP   INVALID OPERAND MESSAGE BIT
         B     MESG1               GO TO WRITE MESSAGE
LINE2    EQU   *
         MVI   DCMCULNO,N2         SET LINE NUMBER TO TWO
         SH    BADPT,DCMLGNTH      CALC OFFSET WITHIN LINE
         B     STCURS              GO TO STORE VALUE
ERROR1   EQU   *
         OI    DCMCMSG4,DCMPFKNO   INDICATE NO PFK ALLOCATION
         SPACE 5
*/*MESG: R IEECVETD */
***********************************************************
MESG3    EQU   *
         L     XFBRANCH,DCMNMSG3   LOAD MESSAGE 3 ADDRESS
         B     XCTL                EXIT TO IEECVFTD
MESG1    EQU   *
         L     XFBRANCH,DCMNMSG1   LOAD MESSAGE 1 ADDRESS
         B     XCTL                EXIT TO IEECVETD
         EJECT
**********************************************************************
*         EXECUTED INSTRUCTIONS
MVCENTRY MVC   Z(N0,SCAN),N1(SCAN) SHIFT CHAR IN WORK AREA
MVCKEY   MVC   N2(N0,MPFK),Z(OPER) MOVE DEF TO PFK AREA
**********************************************************************
         SPACE 5
*/*IEECVFTB: END */
         EJECT
*      CONSTANTS
BLANKS   DC    6C' '               BLANKS
CE       DC    C'CMD='             CMD= OPERAND
CONV     DC    C'CON='             PCON= OPERAND
KE       DC    C'KEY='             KEY= OPERAND
PFK      DC    C'PFK='             PFK= KEYWORD
         SPACE 5
*      EQUATES
ID1      EQU   C'F'                1ST CHARACTER OF CSECT ID
ID2      EQU   C'B'                2ND CHARACTER OF CSECT ID
*     PFK AREA EQUATES
DCMPFKDF EQU   X'80'               KEY HAS BEEN DEFINED
DCMPFKCN EQU   X'20'               KEY DEFINED AS CONVERSATIONAL MODE
DCMPFKKY EQU   X'08'               KEY IS A LIST OF KEYS
*     MISCELLANEOUS EQUATES
BLANK    EQU   C' '                BLANK CHARACTER
COMMA    EQU   C','                CHARACTER
EPFK     EQU   C'E'                ERASE PFK LINE OPERAND
KEYSTOP  EQU   X'61'               STOPS LIST OF KEYS
LPAREN   EQU   C'('                LEFT PARENTHESIS
N        EQU   C'N'                CHARACTER
NINE     EQU   C'9'                CHARACTER
NPFK     EQU   C'N'                DEFINE PFK OPERAND
N0       EQU   0                   NUMBER
N1       EQU   1                   NUMBER
N2       EQU   2                   NUMBER
N3       EQU   3                   NUMBER
N4       EQU   4                   NUMBER
N5       EQU   5                   NUMBER
N6       EQU   6                   NUMBER
N8       EQU   8                   LENGTH OF DCMPACK + DCMCVBIN
N12      EQU   12                  DISPLACEMENT IN DCMDSAVE FOR REG SAV
N16      EQU   16                  NUMBER
N28      EQU   28                  NUMBER
N108     EQU   108                 NUMBER OF CHARS IN TEXT
N126     EQU   126                 LENGTH OF ENTRY AREA
PFKLGN   EQU   110                 LENGTH OF PFK AREA
CLRLGN   EQU   PFKLGN-3            LENGTH OF TEXT MINUS ONE
PLUS     EQU   X'F0'               PLUS SIGN VALUE
QUOTE    EQU   C''''               SINGLE QUOTE
RTPAREN  EQU   C')'                RIGHT PAREN
SEMI     EQU   C';'                SEMI-COLON
STOPPER  EQU   X'64'               END OF PFK AREAS
TEXTLGN  EQU   PFKLGN              LENGTH OF CMD= TEXT
Y        EQU   C'Y'                CHARACTER
Z        EQU   0                   ZERO
ZERO     EQU   C'0'                CHARACTER
ZEROS    EQU   X'00'               HEX ZEROS
         SPACE 5
         TITLE 'IEECVFTB  IGC6B07B   PFK ROUTINE 2  RESIDENT DISPLAY CO*
               NTROL MODULE'
         IEERDCM
         TITLE 'IEECVFTB   IGC6B07B   PFK ROUTINE 2  TRANSIENT DISPLAY *
               CONTROL MODULE'
         IEETDCM
         TITLE 'IEECVFTB  IGC6B07B  PFK ROUTINE 2     CXSA'
         IHACTM  CXSA
         END   START
