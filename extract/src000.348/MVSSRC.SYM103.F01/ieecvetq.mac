         TITLE 'IEECVETQ IGC5Q07B 2250 IO 2'
IEECVETQ CSECT
*A194100,194200                                               MH Y01566
*A086100,086200                                               MH Y01563
*C 271500                                                    ME SA52709
         EJECT
*/*IEECVETQ: CHART */
*/* HEADER
*/*       CHART TA     IEECVETQ     IGC5Q07B          DIDOCS 2250 I/
*/*O ROUTINE 2                                          PAGE #      */
*/* E IEECVETQ */
         SPACE 2
* /* START OF SPECIFICATIONS ****
*02* PROCESSOR = ASSEMBLER ;
**** END OF SPECIFICATIONS ***/
         EJECT
* STATUS
*    CHANGE LEVEL 1
*    COMPLETE REVISION FOR RELEASE 21, LINE ITEM S21003.
* FUNCTION
*    THIS IS A DEVICE DEPENDENT ROUTINE TO PERMORM THE REQUESTED I/O IN
*    PROPER SCREEN FORMAT.
*
* ENTRY POINTS
*         IEECVETQ FOR ALL FUNCTIONS
*
* OPERATION
*    THE COMMUNICATION BYTES IN THE DCM ARE CHECKED AGAINST
*    PRE-ESTABLISHED BIT SETTINGS TO DETERMINE WHICH TYPE/FORMAT OF
*    I/O IS TO BE PERFORMED. EACH POSSIBLE REQUEST IS CHECKED AND, IF
*    APPLICABLE, THE APPROPRIATE CCWS ARE BUILT UNTIL ALL OF THE
*    DESIRED I/O REQUESTS ARE SET UP IN THE CHANNEL PROGRAM. THEY MAY
*    BE TO: BLANK THE ENTRY AREA, BLANK THE WARNING LINE, INITIALIZE
*    THE INSTRUCTION LINE, READ THE ENTRY AREA, WRITE THE
*    INFORMATIONAL DISPLAY, ERASE THE SCREEN, WRITE THE ASYNCHRONOUS
*    ERROR MESSAGE, WRITE THE PFK LINE OR LIGHT THE PFKS. I/O IS THEN
*    INITIATED VIA AN EXCP AND CONTROL IS RETURNED TO PROCESSOR 1
*    (IEECVET1).
*
* INPUT
*    THE INDICATION OF THE DESIRED I/O IS RECEIVED IN I/O
*    COMMUNICATION BYTES 2 AND 3 IN THE DISPLAY CONTROL MODULE.
*
* OUTPUT
*    WRITING OF WHAT IS REQUESTED BY THE OTHER MODULES.
*
* EXTERNAL REFERENCES
*         NONE.
*
* EXITS, NORMAL
*         IEECVET1 PROCESSOR 1 WHEN WORK IS COMPLETE.
*
* EXITS, ERROR
*         NONE.
*
* TABLES/WORK AREAS
*    DISPLAY CONTROL MODULE (CONTAINED IN DSECT AT END OF LISTING).
*
* ATTRIBUTES
*    REFRESHABLE, PRIVILEGED, TYPE 4 SVC.
*
* CHARACTER CODE DEPENDENCY
*    NONE.
*
* NOTES
*    THE FOLLOWING FLAG BITS ARE USED:
*       THE ACTION COLUMN INDICATES WHETHER THE BIT IS TURNED ON, OFF
*       OR JUST TESTED BY THIS MODULE.
*
*         NAME         ACTION                 FUNCTION
*
*        DCMCOM1
*         DCMIOPRD      ON         READ HAS BEEN PERFORMED
*        DCMIOCM2
*         DCMBLENT   OFF/TEST      BLANK ENTRY AREA
*         DCMBLWRL   OFF/TEST      BLANK LEFT HALF WARNING LINE
*         DCMBLWRR   OFF/TEST      BLANK RIGHT HALF WARNING LINE
*         DCMINSSH   OFF/TEST      INITIALIZE INSTRUCTION LINE
*         DCMWINFD   OFF/TEST      WRITE INFORMATION DISPLAY
*         DCMERASE   OFF/TEST      ERASE SCREEN
*         DCMIOCRD   OFF/TEST      READ ENTRY AREA
*         DCMWRASY   OFF/TEST      WRITE ASYNCHRONOUS ERROR MESSAGE
*        DCMIOCM3
*         DCMWRPFK   OFF/TEST      ALTER PFK LINE
*         DCMLTPFK   OFF/TEST      LIGHT ALLOCATED PFKS
*         DCMACPFK   OFF/TEST      EXTINGUISH PFKS
*         DCMSSRG    OFF/TEST      SUPPRESS REGENERATION
*        DCMIOUNQ
*         DCMINERR    OFF          ERROR INSTRUCTION LINE
*         DCMINNOR     ON          NORMAL INSTRUCTION LINE
***********************************************************************
  EJECT
*             REGISTER EQUATES
***********************************************************************
X1PARM   EQU   1
XFBRANCH EQU   15
XPARM    EQU   1                   PARAMETER REGISTER
XWORK4   EQU   1                   WORK REGISTER
XMULT    EQU   2                   WORK REGISTER
X2       EQU   2                   WORK REGISTER
XWORK1   EQU   3                   WORK REGISTER
XWORK2   EQU   4                   WORK REGISTER
XPOINT   EQU   4                   WORK REGISTER
XKEEP    EQU   5                   WORK REGISTER
XPFK     EQU   6                   UCB POINTER
XDCM2NDB EQU   7                   BASE FOR 2ND HALF OF DCM
XCHPGM   EQU   8                   POINTER TO CHANNEL PROGRAM AREA
X8       EQU   8                   WORK REGISTER
PFKPTR   EQU   9                   POINTER TO PFK AREA
XDCMBASE EQU   10                  DCM BASE REGISTER
XBASE    EQU   11                  PROGRAM BASE REGISTER
XCXSA    EQU   12                  CXSA BASE REGISTER
XUCMENT  EQU   13                  UCMENTRY BASE REGISTER
XRTRN    EQU   14                  WORK REGISTER
XRESBASE EQU   15                  RESIDENT DCM BASE
         EJECT
START    BALR  XBASE,N0            SET UP
         USING *,XBASE             ADDRESSABILITY
         B     ICATCH              BRANCH AROUND EYECATCHER
         DC    C'   MODULE IGC5Q07B, FICHE IEECVETQ  ' EYECATCHER AND
ZAPAREA  DC    12C'ZAP'  RESERVED FOR FIELD MODIFICATION
ICATCH   LR    XCXSA,XPARM         SAVE CXSA BASE
         USING CXSA,XCXSA          DECLARE CXSA ADDRESS
         L     XUCMENT,CSAUCM      GET UCM ENTRY ADDRESS
         USING UCMLIST,XUCMENT     DECLARE UCMENTRY BASE
         L     XRESBASE,UCMXB      GET DCM POINTER
         USING DCMTSRT,XRESBASE
         L     PFKPTR,DCMADPFK     POINT TO PFK AREA
         L     XDCMBASE,DCMADTRN   GET BASE FOR TRANSIENT DCM
         USING DCMSTRT,XDCMBASE      DECLARE DCM BASE
         L     XDCM2NDB,DCMLSCRN   GET DCM ENTRY POINTER
         USING DCMMLAST,XDCM2NDB   DECLARE BASE
         MVC   DCMTRACE(DCMTRLEN),DCMTRAC2 SHIFT OLD TRACE ENTRIES
         MVI   DCMTREN1,ID1        PUT CSECT ID INTO
         MVI   DCMTREN2,ID2        NEW TRACE ENTRY
         L     X8,DCMDSAV          POINT TO CHANNEL PROGRAM
         EJECT
*/*ENTBLNK: D (NO,LEFTWARN,YES,BLNKENT)  ENTRY TO BLANK ENTRY AREA? */
***********************************************************
ENTBLNK  EQU   *
         TM    DCMIOCM2,DCMBLENT   BLANK ENTRY AREA
         BNO   LEFTWARN            NO, SEE IF BLANK LEFT HALF WARN LINE
         SPACE 5
*/*BLNKENT: P (,LEFTWARN) BLANK ENTRY AREA IN DCM */
***********************************************************
BLNKENT  EQU   *
         NI    DCMIOCM2,N255-DCMBLENT TURN OFF BIT
         MVI   DCMENTRY,BLANK      PUT BLANK IN ENTRY AREA
         MVC   DCMENTRY+N1(N147),DCMENTRY PROPAGATE IT
         SPACE 5
*/*LEFTWARN: D (NO,RGHTWARN,YES,WARNLEFT) ENTRY TO BLANK LEFT WARNING
*/*LINE? */
***********************************************************
LEFTWARN EQU   *
         TM    DCMIOCM2,DCMBLWRL   BLANK LEFT HALF WARNING LINE
         BNO   RGHTWARN             NO, SEE IF TO BLANK RIGHT SIDE
         SPACE 5
*/*WARNLEFT: P (,RGHTWARN) BLANK LEFT HALF OF WARNING LINE IN DCM */
***********************************************************
WARNLEFT EQU   *
         NI    DCMIOCM2,N255-DCMBLWRL TURN OFF BIT
         MVI   DCMWARN,BLANK       PUT BLANK IN WARNING LINE
         MVC   DCMWARN+N1(N36),DCMWARN PROPAGATE IT
         SPACE 5
*/*RGHTWARN: D (NO,INSTINIT,YES,WARNRGHT) ENTRY TO BLANK RIGHT WARNING
*/*LINE? */
***********************************************************
RGHTWARN EQU   *
         TM    DCMIOCM2,DCMBLWRR   BLANK RIGHT HALF WARNING LINE
         BNO   INSTINIT             NO, GO TEST FOR NEXT FUNCTION
         SPACE 5
*/*WARNRGHT: P (,INSTINIT) BLANK RIGHT HALF OF WARNING LINE IN DCM */
***********************************************************
WARNRGHT EQU   *
         NI    DCMIOCM2,N255-DCMBLWRR TURN OFF BIT
         MVI   DCMWARN+N37,NULL    PUT NULL IN RIGHT SIDE WARNING LINE
         MVC   DCMWARN+N38(N35),DCMWARN+N37 PROPAGATE IT
         MVI   DCMWARN+N73,NEWLINE MOVE IN NEWLINE CHARACTER
         NI    DCMR2FLG,X'FF'-DCMRXUNV  INDICATE 'UNVIEW      MH Y01563
         NI    DCMCOM3,X'FF'-DCMOLUNV   MSG' NOT ON SCREEN    MH Y01563
         SPACE 5
*/*INSTINIT: D (NO,INFOWRIT,YES,INITINST) ENTRY TO INIT.
*/*INST. LINE? */
***********************************************************
INSTINIT EQU   *
         TM    DCMIOCM2,DCMINSSH   INITIALIZE INSTRUCTION LINE
         BNO   INFOWRIT             NO, GO TEST FOR NEXT FUNCTION
         SPACE 5
*/*INITINST: P (,INFOWRIT) MOVE INSTRUCTION LINE TEXT TO INSTRUCTION
*/*LINE IN DCM */
***********************************************************
INITINST EQU   *
         NI    DCMIOCM2,N255-DCMINSSH TURN OFF BIT
         MVI   DCMINSTR,BLANK      BLANK INSTRUCTION LINE
         MVC   DCMINSTR+N1(N73),DCMINSTR PROPAGATE
         MVC   DCMINSTR(N35),INSLMESG MOVE IN MSG
         NI    DCMIOUNQ,N255-DCMINERR
         OI    DCMIOUNQ,DCMINNOR
         SPACE 5
*/*INFOWRIT: D (NO,ASYWRIT,YES,WRITINFO) ENTRY TO WRITE INFO DISPLAY?
*/**/
***********************************************************
INFOWRIT EQU   *
         TM    DCMIOCM2,DCMWINFD   SEE IF WRITE INFO DISPLAY
         BNO   ASYWRIT              NO, GO TEST FOR NEXT FUNCTION
         EJECT
*/*WRITINFO: P (,ASYWRIT) BUILD WRITE CCWS FOR UP TO THREE LINES */
***********************************************************
WRITINFO EQU   *
         SR    XWORK1,XWORK1       CLEAR WORK REG
         LH    XWORK2,DCMCORLN     GET LENGTH OF LINE
         IC    XWORK1,DCMLINEN     MULT BY LINE NUMBER
         BCTR  XWORK1,N0           DECREMENT LINE NUMBER
         MR    XMULT,XWORK2        AND
         AH    XWORK1,DCMBAM1      GET ID ADDRESS
         STH   XWORK1,DCMBADLN     HOLD IN BUFFER ADDR AREA
         LA    XPOINT,DCMBADLN     POINT TO BUFFER ADDR AREA
         BAL   XRTRN,BUILDSET      BUILDSET BUFFER CCW
         LH    XWORK1,DCMBYTCT     GET LENGTH TO WRITE
         LH    XWORK2,DCMCORLN     GET LENGTH OF LINE
         LA    XKEEP,DCMINSTR      POINT TO INSTRUCTION LINE
         CR    XWORK1,XWORK2       IS LENGTH OVER ONE LINE
         BNH   BUILD                NO, BUILD ONE CCW
*                                   YES, BUILD TWO CCWS
TWOLINE  LR    XWORK1,XWORK2       GET LENGTH OF LINE
         BAL   XRTRN,BUILDWRT      BUILD INSTRUCTION LINE CCW
         LH    XWORK1,DCMBYTCT     GET TOTAL LENGTH TO WRITE
         SR    XWORK1,XWORK2       SUBTRACT LENGTH JUST WRITTEN
         LA    XKEEP,DCMENTRY      POINT TO ENTRY AREA LINES
BUILD    BAL   XRTRN,BUILDWRT      BUILD CCW
         NI    DCMIOCM2,N255-DCMWINFD TURN OFF BIT
         LA    XWORK2,DCMINSTR     POINT TO START OF INST LINE
         BAL   XRTRN,LOOP2         GO TO INSERT NULLS
ENTRY1   LA    XWORK2,DCMENTRY     POINT TO START OF ENTRY AREA
         BAL   XRTRN,LOOP2         GO TO INSERT NULLS
ENTRY2   LA    XRTRN,ASYWRIT       POINT TO TEST OF NEXT FUNCTION
         LA    XWORK2,DCMENTR2     POINT TO SECOND LINE OF ENTRY
LOOP2    AH    XWORK2,DCMLGNTH     POINT TO LAST CHAR IN LINE + 1
         BCTR  XWORK2,N0           POINT TO LAST CHAR IN LINE
         CLI   N0(XWORK2),BLANK    IS THIS A BLANK
         BNE   LONGLINE             NO, TEXT FILLS LINE OR NEW LINE
*                                      CHARACTER IS STILL INTACT
         MVI   N0(XWORK2),NEWLINE   YES, INSERT NEW LINE CHARACTER
LONGLINE LA    XWORK4,NULLNG       SET LIMIT COUNT OF CHARS TO NULL
NEXTCHAR BCTR  XWORK2,N0           POINT TO NEXT TO LAST CHAR
         CLI   N0(XWORK2),BLANK    IS THIS CHARACTER BLANK
* NOTE  IT IS ASSUMED THAT IF THE LAST CHARACTER WAS A NONBLANK
*       VIEWABLE CHARACTER THE NEXT TO LAST CHARACTER IS ALSO
*       A NONBLANK CHARACTER.
         BNE   DATAFND              NO, MUST BE VIEWABLE DATA
         MVI   N0(XWORK2),NULL      YES, REPLACE WITH NULL
         BCT   XWORK4,NEXTCHAR     LOOP UNTIL LINE FINISHED
DATAFND  BR    XRTRN               GO TO NEXT LINE OR FUNCTION
         SPACE 5
*/*ASYWRIT: D (NO,ERASEPFM,YES,WRITASY) ENTRY TO WRITE ASYN ERROR
*/*MESSAGE? */
***********************************************************
ASYWRIT  EQU   *
         TM    DCMIOCM2,DCMWRASY   SEE IF WRITE ASYN ERROR
         BNO   ERASEPFM             NO, CHECK NEXT FUNCTION
         SPACE 5
*/*WRITASY: P (,STREGEN) BUILD CCWS TO REFRESH DEVICE BUFFER  */
***********************************************************
WRITASY  EQU   *
         LA    XWORK1,DCMDSAV      GET ADDRESS OF RMI READ AREA
         ST    XWORK1,N0(XCHPGM)   PUT RMI ADDR IN CHANNEL PGM
         MVI   N0(XCHPGM),RMICODE  PUT RMI CODE IN CHANNEL PROGRAM
         MVI   N7(XCHPGM),N3       PUT BYTE COUNT IN
         BAL   XRTRN,FINCCW        FINISH CCW
         LA    XWORK1,ERRMSGL      GET LINE NUMBER
         MH    XWORK1,DCMCORLN     GET INDEX
         AH    XWORK1,DCMBAM1      GET START OF MSG AREA
         STH   XWORK1,DCMBADLN     HOLD IN ADDR AREA
         LA    XPOINT,DCMBADLN     POINT TO BUFFER ADDR AREA
         LR    XWORK4,XPOINT       SAVE PTR TO BUFFER ADDR AREA
         BAL   XRTRN,BUILDSET      STOP CCW
         LA    XKEEP,DCMERR        POINT TO START ORDER PROGRAM
         LA    XWORK1,N10          PUT BYTE COUNT IN
         BAL   XRTRN,BUILDWRT      BUILD WRITE CCW
         L     XKEEP,DCMAENTR      POINT TO START OF MSG
         LH    XWORK1,DCMCORLN     GET LENGTH OF LINE
         SLL   XWORK1,N1           DOUBLE IT
         BAL   XRTRN,BUILDWRT      BUILD WRITE CCW
         LA    XKEEP,DCMWARN+N74   GET GTRU ADDR
         LA    XWORK1,N2           PUT BYTE COUNT IN
         BAL   XRTRN,BUILDWRT      BUILD WRITE CCW
         LA    XKEEP,DCMBADLN      GET START BUFFER ADDR FOR GTRU
         LA    XWORK1,N2           PUT BYTE COUNT IN
         BAL   XRTRN,BUILDWRT      BUILD WRITE CCW
         STH   XWORK4,DCMBADLN     STORE GTRU ADDR
         LA    XWORK1,DCMBADLN     GET GTRU ADDRESS
         NI    DCMIOCM2,N255-DCMWRASY-DCMERASE TURN BITS OFF
         B     ASYREGEN            GO TO START REGENERATION
         EJECT
*/*ERASEPFM: D (NO,STREAD,YES,PFMERASE) ENTRY TO ERASE SCREEN? */
***********************************************************
ERASEPFM EQU   *
         TM    DCMIOCM2,DCMERASE   SEE IF ERASE
         BNO   STREAD               NO, CHECK NEXT FUNCTION
         SPACE 5
*/*PFMERASE: P (,PFKEXT) BUILD STOP REGEN CCW & SUP REGEN */
***********************************************************
PFMERASE EQU   *
         MVI   N0(XCHPGM),SETBUF   MOVE STOP COMMAND IN
         BAL   XRTRN,B2CCW         GO BUILD CCW
         NI    DCMIOCM2,N255-DCMERASE TURN OFF ERASE BIT
         OI    DCMIOCM3,DCMSSRG    SUPPRESS START REGEN
         B     PFKEXT              CHECK PFKS
         SPACE 5
*/*STREAD: D (NO,PFKWRIT,YES,CURNREAD) ENTRY TO READ ENTRY AREA? */
***********************************************************
STREAD   EQU   *
         TM    DCMIOCM2,DCMIOCRD   ENTRY FOR READ
         BNO   PFKWRIT              NO, CHECK NEXT FUNCTION
         SPACE 5
*/*CURNREAD: P (,STREGEN) BUILD CCWS TO READ ENTRY AREA INTO DCM */
***********************************************************
CURNREAD EQU   *
         NI    DCMIOCM2,N255-DCMIOCRD TURN OFF BIT
         LA    XPOINT,DCMBAENT     GET INSERT CURSOR ADDRESS
         BAL   XRTRN,BUILDSET      BUILD STOP REGEN CCW
         BAL   XRTRN,BUILDSET      BUILD INSERT CCW
         MVI   DCMCHPGM+N8,INSERT
         BAL   XRTRN,BUILDSET      BUILD STOP REGEN CCW
         LA    XWORK1,DCMENTRY     POINT TO ENTRY AREA
         ST    XWORK1,DCMCHPGM+N24
         MVI   DCMCHPGM+N24,READ
         MVI   DCMCHPGM+N31,READLGNH
         BAL   XRTRN,FINCCW        FINISH BUILDING CCW
         OI    DCMCOM1,DCMIOPRD
         EJECT
*/*STREGEN: P (,ENEXCP) BUILD START REGENERATION CCW */
***********************************************************
STREGEN  EQU   *
         LA    XWORK1,DCMBASRT     GET START OF REGEN
ASYREGEN EQU   *
         ST    XWORK1,N0(XCHPGM)   PUT ADDRESS IN CCW
         MVI   N0(XCHPGM),STARTREG MOVE OP CODE IN
         MVI   N7(XCHPGM),N2       MOVE BYTE COUNT IN
         BAL   XRTRN,FINCCW        FINISH BUILDING CCW
         SPACE 5
*/*ENEXCP: P (,EXCP) REMOVE CHAIN FLAG FROM LAST CCW */
***********************************************************
ENEXCP   EQU   *
         SH    XCHPGM,EIGHT        UPDATE CCW POINTER
         MVI   N4(XCHPGM),STOP     STOP CCW CHAIN
         SPACE 5
*/*EXCP: I (,EXIT) EXCP */
***********************************************************
EXCP     EQU   *
         L     XFBRANCH,CSAXB      ADDR GETLOCK SBR           JE YM8371
         LR    X1PARM,XCXSA        COPY CSA PTR               JE YM8371
         BALR  XRTRN,XFBRANCH      OBTAIN LOCKS               JE YM8371
         XC    UCMECB,UCMECB       CLEAR ECB
         OI    UCMSTS,UCMBF        TURN ON BUSY BIT
         L     XWORK1,UCMDCB       GET DCB ADDRESS
         L     XFBRANCH,CSAXC      ADDR FREELOCK SBR          JE YM8371
         LR    X1PARM,XCXSA        COPY CSA PTR               JE YM8371
         BALR  XRTRN,XFBRANCH      RELEASE LOCKS              JE YM8371
         L     XPARM,N28(XWORK1)   GET IOB ADDRESS
         EXCP  (XPARM)             INITIATE I/O
         SPACE 5
*/*EXIT: R PROCESSOR 1 (IEECVET1) */
***********************************************************
EXIT     EQU   *
         L     XFBRANCH,DCMNPROC   LOAD PROC 1 ADDRESS
         L     X1PARM,DCMCXSVE     RESTORE CXSA ADDRESS
         BR    XFBRANCH            EXIT TO IEECVET1
         EJECT
*/*PFKWRIT: D (NO,PFKEXT,YES,WRITEPFK) ENTRY TO WRITE PFK LINE? */
***********************************************************
PFKWRIT  EQU   *
         TM    DCMIOCM3,DCMWRPFK   WRITE PFK AREA
         BNO   PFKEXT               NO, GO SEE IF LIGHT PFKS
         SPACE 5
*/*WRITEPFK: D (NO,BUILDIT,YES,ERASEIT) IS PFK LINE DISPLAYED NOW? */
***********************************************************
WRITEPFK EQU   *
* EACH TIME THIS ROUTINE IS ENTERED IT WILL CHANGE THE STATUS OF THE
*  DISPLAYED PFK LINE.  IF THE LINE IS DISPLAYED IT WILL BE ERASED
*   IF IT IS BLANK IT WILL BE BUILT AND WRITTEN TO THE SCREEN.
         SPACE
         LR    XPOINT,PFKPTR      GET POINTER TO PFK AREA
         L     XWORK1,DCMPFKLN    GET POINTER TO PFK LINE
         CLC   N0(N6,XWORK1),BLANKS    IS LINE NOW BLANK      MH  M2070
         BE    BUILDIT             YES, GO DISPLAY IT         MH  M2070
         SPACE 5
*/*ERASEIT: P (,WRITIT) BLANK PFK LINE IN DCM */
***********************************************************
ERASEIT  EQU   *                   YES, ERASE IT
         MVI   N0(XWORK1),BLANK   BLANK FIRST POSITION
         MVC   N1(N72,XWORK1),N0(XWORK1)    PROPAGATE NULL
         MVI   N73(XWORK1),NEWLINE INSERT NEW LINE CHARACTER
         B     WRITIT             GO TO WRITE THE SCREEN
         EJECT
*/*BUILDIT: P (,WRITIT) BUILD PFK LINE IN DCM */
***********************************************************
BUILDIT  EQU   *
         MVI   N0(XWORK1),BLANK    BLANK FIRST LINE POSITION
         MVC   N1(N72,XWORK1),N0(XWORK1)     BLANK REST OF LINE
         LA    X2,N12              SET LIMIT ON DISPLAYED KEYS
         LTR   XPOINT,XPOINT       ANY KEYS ALLOCATED         MH Y01566
         BZ    WRITIT               NO, JUST WRITE BLANK LINE MH Y01566
LOOP3    CLI   N0(XPOINT),STOPPER IS THIS END OF AREA
         BE    WRITIT              YES, STOP GENERATION
         SR    XKEEP,XKEEP         NO, CLEAR WORK REGISTER
         IC    XKEEP,N0(XPOINT)   GET KEY NUMBER
         CVD   XKEEP,DCMPACK      CONVERT IT TO DECIMAL
         UNPK  DCMCVBIN+N2(N2),DCMCVBIN+N2(N2)   UNPACK IT
         OI    DCMCVBIN+N3,ZONE   CHANGE SIGN TO EBCDIC
         MVC   N3(N2,XWORK1),DCMCVBIN+N2    MOVE KEY TO LINE
         CLI   N3(XWORK1),ZERO    IS FIRST DIGIT ZERO
         BNE   TWOCHAR             NO, CONTINUE
         MVI   N3(XWORK1),BLANK    YES, BLANK IT
TWOCHAR  EQU   *
         MVI   DCMCVBIN+N2,ZEROS  CLEAR OUT
         MVI   DCMCVBIN+N3,ZEROS     WORK AREA
         LA    XWORK1,N6(XWORK1)  POINT TO NEXT LINE SEGMENT
         LA    XPOINT,PFKLGN(XPOINT)     POINT TO NEXT PFK AREA
         BCT   X2,LOOP3           GO SEE IF ANY MORE
* NOTE  IF THERE ARE MORE THAN TWELVE KEYS ALLOCATED ONLY THE FIRST
*       TWELVE WILL BE DISPLAYED ON THE SCREEN.
         SPACE 5
*/*WRITIT: P (,PFKEXT) BUILD CCWS TO WRITE PFK LINE TO SCREEN */
***********************************************************
WRITIT   EQU   *
         NI    DCMIOCM3,X'FF'-DCMWRPFK  TURN OFF BIT
         LA    XPOINT,DCMBAPFK     POINT TO BUFFER ADDRESS OF PFK AREA
         BAL   XRTRN,BUILDSET      BUILD SET CCW
         LA    XKEEP,DCMPFKAR      GET ADDRESS TO WRITE FROM
         LH    XWORK1,DCMCORLN     GET LENGTH OF WRITE
         BAL   XRTRN,BUILDWRT      BUILD WRITE CCW
         EJECT
*/*PFKEXT: D (NO,SUPREG,YES,%KEYTEST) ENTRY TO LIGHT ANY PFKS? */
***********************************************************
PFKEXT   EQU   *
         TM    DCMIOCM3,DCMLTPFK+DCMACPFK   TRYING TO LIGHT PFKS
         BZ    SUPREG              NO, CONTINUE
         SPACE 5
*/*%KEYTEST: D (NO,SUPREG,YES,%LTACT) PFK KEYBOARD INSTALLED? (UCB) */
***********************************************************
         L     XPFK,UCMUCB         YES, GET UCB POINTER
         TM    OPFEAT(XPFK),PFKBD IS PFK KEYBOARD INSTALLED
         BNO   SUPREG              NO, DON'T TRY TO LIGHT IT
         SPACE 5
*/*%LTACT: D (NO,PFKLITE,YES,ONEPFK) ENTRY TO EXTINGUISH PFKS? */
***********************************************************
         TM    DCMIOCM3,DCMACPFK  SEE IF EXTINGUISH PFKS
         BNO   PFKLITE              NO, CHECK NEXT FUNCTION
         SPACE 5
*/*ONEPFK: P (,OUT) BUILD DATA TO EXTINGUISH KEYS */
***********************************************************
ONEPFK   EQU   *
         NI    DCMIOCM3,N255-DCMACPFK TURN OFF BIT
         SR    XWORK1,XWORK1       CLEAR KEY REGISTER
         SPACE 5
*/*OUT: P (,SUPREG) BUILD LIGHT PFK CCW */
***********************************************************
OUT      EQU   *
         ST    XWORK1,DCMDSAV+N4   STORE BYTES THAT INDICATE ASSOCIATED
*                                  PFK'S
         LA    XPOINT,DCMDSAV+N4   GET POINTER TO DATA FIELD
         ST    XPOINT,N0(XCHPGM)   SAVE POINTER IN CCW
         MVI   N0(XCHPGM),SETPFK   MOVE IN SET PFK INDICATOR
         MVI   N7(XCHPGM),N4       MOVE IN BYTE COUNT
         BAL   XRTRN,FINCCW        COMPLETE THE CCW
         SPACE 5
*/*SUPREG: D (YES,ENEXCP,NO,STREGEN) SUPPRESS REGENERATION? */
***********************************************************
SUPREG   EQU   *
         TM    DCMIOCM3,DCMSSRG    Q. SUPPRESS START REGENERATION
         BNO   STREGEN              NO, THEN START REGENERATION
         NI    DCMIOCM3,N255-DCMSSRG    YES.  TURN OFF BIT
         B     ENEXCP                GO TO DO I/O
         SPACE 5
*/*PFKLITE: D (NO,SUPREG,YES,LITEPFK) ENTRY TO LIGHT ALL ALLOCATED
*/*KEYS? */
***********************************************************
PFKLITE  EQU   *
         TM    DCMIOCM3,DCMLTPFK   LIGHT PFK'S
         BNO   SUPREG               NO, SEE IF SUPPRESS REGEN
         SPACE 5
*/*LITEPFK: P (,OUT) BUILD LIGHT PFK DATA FOR ALL ALLOCATED KEYS */
***********************************************************
LITEPFK  EQU   *
         NI    DCMIOCM3,N255-DCMLTPFK TURN OFF BIT
         LR    XKEEP,PFKPTR        GET POINTER TO PFK LIST
         SR    X2,X2               CLEAR
         SR    XWORK1,XWORK1          WORK
         SR    XWORK2,XWORK2             REGISTERS
LOOP     EQU   *
         CLI   N0(XKEEP),STOPPER   ANY MORE KEYS
         BE    OUT                  NO,GO BUILD CCW
         IC    XWORK2,N0(XKEEP)    GET PFK NUMBER
         SLDL  X2,N0(XWORK2)       ALIGN REGISTER
         O     XWORK1,ONPFK        TURN ON BIT
         SRDL  X2,N0(XWORK2)       REALIGN REGISTER
         LA    XKEEP,PFKLGN(XKEEP)   GET NEXT KEY NUMBER
         B     LOOP                GO TO TURN ON NEXT BIT
         EJECT
BUILDSET EQU   *
         ST    XPOINT,N0(XCHPGM)   PUT BUF ADD PTR INTO CCW
         MVI   N0(XCHPGM),SETBUF   PUT COMMAND CODE INTO CCW
B2CCW    MVI   N7(XCHPGM),N2       PUT BYTE COUNT IN
         B     FINCCW              FINISH BUILDING CCW
BUILDWRT EQU   *
         ST    XKEEP,N0(XCHPGM)    SAVE WRITE FROM ADDRESS
         MVI   N0(XCHPGM),WRITE    PUT OP CODE IN CCW
         STH   XWORK1,N6(XCHPGM)   PUT BYTE COUNT IN
FINCCW   MVI   N4(XCHPGM),CHAIN    CHAIN CCW'S
         LA    XCHPGM,N8(XCHPGM)   UPDATE CCW POINTER
         BR    XRTRN               RETURN
         SPACE 5
*/*IEECVETQ: END */
         EJECT
*        CONSTANTS
BLANKS   DC    6C' '              BLANKS                      MH  M2070
         DS    0F
ONPFK    DC    X'80000000'         FULLWORD TO LIGHT PFK
EIGHT    DC    H'8'                UPDATE CCW PTR
INSLMESG DC    C'IEE152I  *ENTER*  *CANCEL*  *D C,K*' INST LN MH  M2070
         EJECT
*      EQUATES
ID1      EQU   C'E'                1ST CHARACTER OF CSECT ID
ID2      EQU   C'Q'                2ND CHARACTER OF CSECT ID
BLANK    EQU   X'40'               BLANKING CHARACTER
CHAIN    EQU   X'60'               CCW CHAIN FLAG
DIGIT    EQU   X'F0'               ZONE FOR EBCDIC DIGIT
ERRMSGL  EQU   25                  LINE FOR ASYN ERROR MESG
INSERT   EQU   X'0F'               INSERT CURSOR
NEWLINE  EQU   X'15'               NEW LINE CHARACTER
NULL     EQU   X'00'               NULLING CHARACTER
NULLNG   EQU   69                  LENGTH OF CHARS TO NULL
N0       EQU   0                   NUMBER
N1       EQU   1                   NUMBER
N2       EQU   2                   NUMBER
N3       EQU   3                   NUMBER
N4       EQU   4                   NUMBER
N6       EQU   6                   NUMBER
N7       EQU   7                   NUMBER
N8       EQU   8                   NUMBER
N10      EQU   10                  BYTE COUNT OFF ERROR ORDERS
N12      EQU   12                  MAX NUMBER OF DISPLAYABLE KEYS
N24      EQU   24                  NUMBER
N28      EQU   28                  NUMBER
N31      EQU   31                  NUMBER
N35      EQU   35                  NUMBER
N36      EQU   36                  NUMBER
N37      EQU   37                  NUMBER
N38      EQU   38                  NUMBER
N72      EQU   72                  LENGTH OF LINE MINUS TWO
N73      EQU   73                  NUMBER
N74      EQU   74                  NUMBER
N147     EQU   147                 NUMBER
N255     EQU   255                 NUMBER
OPFEAT   EQU   17                  FEATURE BYTE IN UCB
PFKBD    EQU   X'10'               PFK KEYBOARD FEATURE
PFKLGN   EQU   110                 LENGTH OF PFK AREA
READ     EQU   X'02'               READ CODE
READLGNH EQU   148                READ LENGTH FOR ENTRY AREA ME SA52709
RMICODE  EQU   X'0E'               RMI CODE
SETBUF   EQU   X'07'               SET BUFFER COMMAND
SETPFK   EQU   X'1B'               SET PFK CODE
STARTREG EQU   X'27'
STOP     EQU   X'20'
STOPPER  EQU   X'64'               NO MORE PFK'S INDICATOR
WRITE    EQU   X'01'               WRITE
ZERO     EQU   C'0'                CHARACTER ZERO
ZEROS    EQU   X'00'               HEX ZEROS
ZONE     EQU   X'F0'               EBCDIC NUMERIC ZONE
         SPACE 2
         TITLE 'IEECVETQ  IGC5Q07B  2250 I/O 2   RESIDENT DISPLAY CONTR*
               OL MODULE'
         IEERDCM
         TITLE 'IEECVETQ  IGC5Q07B  2250 I/O 2   TRANSIENT DISPLAY DONT*
               ROL MODULE'
DCMSTRT  DSECT
         IEECDCM  DEVICE=B
         TITLE 'IEECVETQ  IGC5Q07B  2250 I/O 2     CXSA'
         IHACTM  CXSA
         TITLE 'IEECVETQ  IGC5Q07B  2250 I/O 2     UNIT CONTROL MODULE'
         IEECUCM  FORMAT=NEW
         END
