         TITLE 'IEECVFTA      DIDOCS PFK ROUTINE 1'
IEECVFTA CSECT
*C193000,193100                                               MH YM2960
*/*IEECVFTA: CHART */
*/* HEADER
*/*         CHART FA     IEECVFTA            DIDOCS PFK ROUTINE 1
*/*                                           PAGE #          */
*/* E IEECVFTA */
         SPACE 2
* /* START OF SPECIFICATIONS ****
*02*  PROCESSOR = ASSEMBLER;
**** END OF SPECIFICATIONS ***/
         SPACE 5
* STATUS
*    CHANGE LEVEL 0
*    CREATED FOR RELEASE 21, LINE ITEM S21003.
         SPACE
* FUNCTION
*    TO CONTROL AUTOMATIC COMMAND ENTRY AS A RESULT OF DEPRESSING A
*    PROGRAM FUNCTION KEY OR A LIGHT PEN DETECT ON THE PFK LINE.
         SPACE
* ENTRY POINTS
*         IEECVFTA FOR ALL FUNCTIONS
*             FROM IEECVET1 WHEN A PFK IS PRESSED OR THERE IS
*                  MORE WORK TO BE DONE ON A KEY.
*             FROM IEECVETF MODULE WHEN LIGHT PEN DETECTS
*                  ON THE PFK LINE.
         SPACE
* INPUT
*    A BINARY KEY NUMBER IN DCMDSAV, FLAGS IN THE PFK AREA FOR THAT
*    KEY AND FLAGS IN THE DCM.
         SPACE
* OUTPUT
*    DCM FLAGS TO THE PROCESSOR, DEVICE DEPENDENT I/O AND ERROR
*    MESSAGE ROUTINES INDICATING ACTION REQUIRED.
         SPACE
* EXITS, NORMAL
*         IEECVET4 (COMMAND) TO ISSUE A COMMAND.
*         DEVICE DEPENDENT I/O ROUTINE TO WRITE A COMMAND FOR
*         VERIFICATION.
         SPACE
* EXITS, ERROR
*         IEECVETD (MESSAGE MODULE 1) TO WRITE OUT ERROR MESSAGES.
         EJECT
* TABLES/WORK AREAS
*    PFK AREA
*     THIS MODULE USES THE PFK AREA IN THE DCM, WHICH IS CREATED BY
*    SYSGEN.  THERE WILL BE ONE AREA FOR EACH PFK WHICH WAS
*    ALLOCATED AT SYSGEN TIME.  THE DCMADPFK
*    FIELD IN THE DCM POINTS TO THE FIRST AREA AND ALL AREAS ARE
*    CONTIGUOUS.  FOLLOWING THE LAST AREA IS A ONE BYTE FIELD EQUAL TO
*    X'64', USED TO IDENTIFY THE END OF PFK WORKSPACE.
*     EACH PFK AREA IS 110 BYTES LONG FORMATTED AS FOLLOWS
*
*      DCMNUM    A ONE BYTE FIELD CONTAINING THE KEY NUMBER
*                IN BINARY.
*
*      DCMSTS    A ONE BYTE FLAG FIELD.  FOR EXPLANATION SEE THE DCM
*                DSECT FOLLOWING THE CODE FOR THIS MODULE.
*
*      DCMVAL    A 108 BYTE FIELD WHICH IS EITHER
*
*                 A.  A LIST OF KEYS IN THE FORM KFKF...KF/ WHERE K IS
*                      A ONE BYTE BINARY KEY NUMBER AND F IS A CONTROL
*                      BYTE WHICH CONTAINS C';' UNLESS PROCESSING
*                      IS TAKING PLACE.  THE SLASH (X'61')
*                      IDENTIFIES THE END OF THE LIST OF KEYS.
*                 B.  ONE OR MORE COMMANDS IN THE FORM
*                          COMMAND;COMMAND;...COMMAND
*                     WHERE SEMI-COLONS DELIMIT THE COMMANDS.  IF THE
*                     LAST COMMAND DOES NOT FILL THE BUFFER IT IS
*                     PADDED WITH BLANKS.
*
*     DURING PROCESSING OF A PFK THE CONTROL BYTE IN A LIST OF KEYS
*    OR THE SEMI-COLON IN A LIST OF COMMANDS WILL BE CHANGED TO X'FF'
*    TO INDICATE THAT THE PRECEEDING ITEM HAS BEEN PROCESSED.
*
*    DCM   DESCRIBED IN DSECT AT END OF MODULE
         SPACE 2
* ATTRIBUTES
*    REFRESHABLE, PRIVILEGED, TYPE 4 SVC.
         SPACE
* CHARACTER CODE DEPENDENCY
*    NONE
         EJECT
* NOTES
*    THE FOLLOWING FLAG BITS ARE USED:
*     THE ACTION COLUMN INDICATES WHETHER THE BIT IS TURNED ON, OFF OR
*    JUST TESTED BY THIS MODULE.
*
*        NAME     ACTION            FUNCTION
*      DCMIOCM1
*       DCMINSC     ON           INSERT CURSOR
*       DCMWRENT    ON           WRITE A COMMAND IN ENTRY AREA
*      DCMIOCM3
*       DCMPFKAT  OFF/TEST       KEY ATTENTION OCCURRED
*       DCMRDPFK  OFF/TEST       DETECT ON PFK LINE
*       DCMLTPFK    ON           LIGHT ALL ALLOCATED PFKS
*      DCMCOM1
*       DCMLPENT    ON           COMMAND IS TO BE ISSUED
*      DCMCOM3
*       DCMVLPFK ON/OFF/TEST     KEY IS BEING VERIFIED
*       DCMRTPFK ON/OFF/TEST     RETURN TO PFK 1 IS REQUIRED
*      DCMUTILT
*       DCMUTILA ON/OFF/TEST     USER DEFINED CURSOR IN COMMAND
*       DCMUTILB ON/OFF/TEST     CANCEL REQUESTED WITH MASTER KEY ACT
*       DCMUTILC ON/OFF/TEST     CANCEL REQUESTED
*       DCMUTILD   ON/TEST       MODIFIED CANCEL AND MESG EXIT
*      DCMCMSG3
*       DCMDTBSY    ON           ISSUE TASK BUSY MESSAGE
*      DCMCMSG4
*       DCMPFKNA    ON           ISSUE PFK NOT ALLOCATED MESSAGE
*       DCMPFKND    ON           ISSUE PFK NOT DEFINED MESSAGE
*      PFK AREA
*       DCMPFKDF   TEST          KEY HAS BEEN DEFINED
*       DCMPFKPR ON/OFF/TEST     KEY IS BEING PROCESSED
*       DCMPFKKY   TEST          KEY IS A LIST OF KEYS
*       DCMPFKCN   TEST          KEY DEFINED AS CONVERSATIONAL MODE
         EJECT
*                REGISTER EQUATES
         SPACE
X1PARM   EQU   1
XERTRN   EQU   14
XFBRANCH EQU   15
R0       EQU   0                   WORK REGISTER
PARM     EQU   1                   PARAMETER REGISTER (CXSA POINTER)
APFK     EQU   2                   PFK AREA POINTER
POSIT    EQU   2                   PFK POSITION IN LINE
SCAN     EQU   3                   SCAN REGISTER
INDEX    EQU   3                   PFK POSITION IN LINE
DECR     EQU   4                   DECREMENTING REG FOR COMMAND SEARCH
STOPRG   EQU   5                   END OF COMMAND
ENTRYPT  EQU   6                   PTR TO ENTRY AREA
CURSREG  EQU   6                   CURSOR POSITION REGISTER
MPFK     EQU   7                   PTR TO MASTER KEY AREA
STARTRG  EQU   8                   START OF COMMAND
CXSABASE EQU   9                   CXSA BASE REGISTER
UCME     EQU   10                  UCM ENTRY ADDRESS (MOMENTARY)
RETURN   EQU   10                  SUBROUTINE RETURN POINTER
DCMB     EQU   11                  DCM BASE REGISTER
BASE     EQU   12                  PROGRAM BASE REGISTER
PFKPTR   EQU   13                  POINTER TO PFK AREA
SWTCHREG EQU   15                  BRANCH REGISTER FOR KEY CANCEL
**************************************************
         EJECT
START    BALR  BASE,N0             ESTABLISH BASE REGISTER
         USING *,BASE
         B     BEGIN               BRANCH AROUND PATCH AREA
ICATCH   DC    CL72'IEECVFTA'      EYECATCHER AND FIELD MAINTENANCE
BEGIN    EQU   *                   END OF PATCH AREA
         LR    CXSABASE,PARM       ESTABLISH CXSA BASE REGISTER
         USING CXSA,CXSABASE
         L     UCME,N16(PARM)      ESTABLISH UCM ENTRY ADDRESS
         L     DCMB,N28(UCME)      ESTABLISH DCM ADDRESS
         USING DCMTSRT,DCMB
         L     PFKPTR,DCMADPFK     POINT TO PFK AREA
         L     DCMB,DCMADTRN       GET TRANSIENT DCM BASE
         DROP  DCMB
         USING DCMSTRT,DCMB
         MVC   DCMTRACE(DCMTRLEN),DCMTRAC2 SHIFT OLD TRACE ENTRIES
         MVI   DCMTREN1,ID1        PUT CSECT ID INTO
         MVI   DCMTREN2,ID2        NEW TRACE ENTRY
         L     XFBRANCH,CSAXC      ADDRESS FREELOCK SUBROUTINE
         LR    X1PARM,CXSABASE     PASS CXSA ADDRESS IN REG 1
         BALR  XERTRN,XFBRANCH     RELEASE LOCKS
         NI    DCMUTILT,Z          CLEAR ALL UTILITY FLAGS
         SPACE 5
*/*%START: P (,%BEGIN)  SET SWITCH REGISTER TO LABEL 'VALID' */
*****************************************************************
         LA    SWTCHREG,VALID      SET SWITCH REG FOR NORMAL OP
         SPACE 5
*/*%BEGIN: D (VER,TESTCANX,WORK,TESTERR,ATTN,ENTRY) REASON FOR ENTRY */
*****************************************************************
         TM    DCMCOM3,DCMVLPFK    RETURN FROM VERIFY
         BO    TESTCANX             YES, POSSIBLE CANCEL
         TM    DCMCOM3,DCMRTPFK    IS A KEY IN PROCESS
         BO    TESTERR              YES, SEE IF 2ND ATTENTION
         B     ENTRY                NO, DETERMINE REASON FOR ENTRY
         SPACE 5
*/*TESTCANX: D (NO,FIND,YES,CANX)            CANCEL REQUESTED? */
*****************************************************************
TESTCANX EQU   *
         TM    DCMIOCM3,DCMPFKAT+DCMRDPFK    2ND PFK ATTENTION
         BNZ   CANX                 YES, CANCEL CURRENT KEY
         B     FIND                 NO, CONTINUE WITH THIS KEY
         SPACE 5
*/*TESTERR: D (NO,FIND,YES,ERROR)           SECOND ATTENTION? */
*****************************************************************
TESTERR  EQU   *
         TM    DCMIOCM3,DCMPFKAT+DCMRDPFK    2ND PFK ATTENTION
         BNZ   ERROR3               YES, INVALID. ONE AT A TIME
         B     FIND                 NO, CONTINUE WITH THIS KEY
         SPACE 5
*/*CANX: D (YES,GETOUT,NO,%SETREG)   IS LAST COMMAND ON SCREEN? */
*****************************************************************
CANX     EQU   *
         NI    DCMIOCM3,X'FF'-DCMPFKAT-DCMRDPFK   CANCEL ATTENTIONS
         NI    DCMCOM3,X'FF'-DCMRTPFK-DCMVLPFK     AND IN PROCESS FLAGS
         OI    DCMUTILT,DCMUTILC   INDICATE CANCEL
         CLI   DCMPFKNM,FOXFLAG    IS LAST COMMAND ON SCREEN
         BE    GETOUT               YES, NO CLEANUP REQUIRED
         SPACE 5
*/*%SETREG: P (,FIND)  SET SWITCH REGISTER TO LABEL 'CANMAS' */
*****************************************************************
         BAL   SWTCHREG,FIND       LOCATE KEY IN PROCESS
         SPACE 5
*/*CANMAS: P (,MOPUP)   SET FLAG (DCMUTILB) IF MASTER KEY IN USE */
*****************************************************************
CANMAS   CLI   DCMPFKKN,FOXFLAG    IS A MASTER KEY IN USE
         BE    MOPUP                NO, CLEAR SINGLE KEY
CXMAS    EQU   *                    YES, CLEAR MASTER KEY
         OI    DCMUTILT,DCMUTILB   INDICATE CANCEL MASTER KEY
         B     MOPUP               GO TO IT
         SPACE 4
*/*ENTRY: D (L/P,LPPFK,KEY,ATTENT)      ATTENTION TYPE */
*****************************************************************
ENTRY    EQU   *
         TM    DCMIOCM3,DCMPFKAT   PFK ATTENTION
         BO    ATTENT               YES, HANDLE
*ASSUME LIGHT PEN DETECT ON PFK LINE
         B     LPPFK               GO TO HANDLE LIGHT PEN
         EJECT
*/*ATTENT: P (,FIND)           MOVE KEY TO WORK AREA */
*****************************************************************
ATTENT   EQU   *
         NI    DCMIOCM3,X'FF'-DCMPFKAT  TURN OFF ATTENTION FLAG
* START OF DEVICE DEPENDENT CODE *********
         TM    DCMDSAV,ANRPFK      IS THIS A 3270 DEVICE      MH  M1517
         BNO   G2250                NO, ASSUME 2250 TYPE
         MVC   DCMPFKNM(L'DCMPFKNM),DCMDSAV  YES, GET KEY #   MH  M1517
         NI    DCMPFKNM,X'FF'-STRIP  STRIP OFF ZONE           MH  M1517
         B     FIND                GO TO BEGIN PROCESSING     MH  M1517
G2250    MVC   DCMPFKNM(L'DCMPFKNM),DCMDSAV+N1  GET KEY #     MH  M1517
         B     FIND                GO TO BEGIN PROCESSING     MH  M1517
* END OF DEVICE DEPENDENT CODE ***********                    MH  M1517
         SPACE 5
*/*LPPFK: P (,FIND)           CONVERT LOCATION TO KEY NUMBER */
*****************************************************************
LPPFK    EQU   *
         NI    DCMIOCM3,X'FF'-DCMRDPFK  TURN OFF ATTN FLAG
         SR    POSIT,POSIT         CLEAR WORK
         SR    INDEX,INDEX              REGISTERS
         IC    INDEX,DCMDSAV+N1    GET CHARACTER POSITION
         D     POSIT,F6            DIVIDE BY SPACES PER KEY
* NOTE: RESULT NOW IN INDEX
         M     POSIT,FPFKLGN       MULTIPLY BY PFK AREA LENGTH
         AR    INDEX,PFKPTR        ADD TO START OF AREAS
         MVC   DCMPFKNM(L'DCMPFKNM),N0(INDEX)     GET KEY NUMBER
         B     FIND                GO TO PROCESS IT
         SPACE 5
*/*FIND: D (YES,%SWITCH,NO,ERROR)   IS KEY ALLOCATED?        */
************************************************************
FIND     EQU   *
         LR    APFK,PFKPTR         GET ADDRESS OF FIRST PFK AREA
         LTR   APFK,APFK           ANY KEYS ALLOCATED
         BZ    ERROR                NO, ERROR
CHECK    EQU   *
         CLI   Z(APFK),N100        HAVE WE CHECKED THEM ALL
         BE    ERROR                IF SO, PFK ENTRY IS INVALID
         CLC   Z(N1,APFK),DCMPFKNM IS THIS THE AREA FOR THE KEY
         EJECT
*/*%SWITCH: D (NORM,VALID,CANX,CANMAS) WHICH WAY IS SWITCH REGISTER
*/*SET? */
************************************************************
         BCR   EQUAL,SWTCHREG       IF SO, CONTINUE PROCESSING
* NOTE  BRANCH IS TO LABEL 'VALID' FOR NORMAL PROCESSING AND
*       TO LABEL 'CANMAS' FOR KEY CANCEL OPERATION.
         LA    APFK,PFKLGN(APFK)    ELSE, POINT TO NEXT PFK AREA
         B     CHECK               GO BACK AND CHECK IT OUT
         SPACE 5
*/*VALID: D (YES,%PROCTST,NO,ERROR)      IS KEY DEFINED? */
************************************************************
VALID    EQU   *
         TM    N1(APFK),DCMPFKDF   HAS THIS KEY BEEN DEFINED
         BZ    ERROR2               IF NOT, KEY CANNOT BE USED
         SR    DECR,DECR           CLEAR REGISTER
         LH    DECR,CHARPOS        NUMBER OF CHARACTER POSITIONS
         SPACE 5
*/*%PROCTST: D (NO,%INPROC,YES,KEYLIST) KEY ALREADY IN PROCESS? */
************************************************************
         TM    N1(APFK),DCMPFKPR   IS PROCESSING ALREADY IN PROGRESS
         BO    KEYLIST              YES, GET FIRST OR NEXT COMMAND
         SPACE 5
*/*%INPROC: P (,KEYLIST)  INDICATE IN PROCESS */
************************************************************
         OI    N1(APFK),DCMPFKPR   INDICATE PROCESSING IN PROGRESS
         EJECT
*/*KEYLIST: D (NO,SCANCOM,YES,%POINT) IS THIS KEY A LIST OF KEYS? */
************************************************************
KEYLIST  TM    N1(APFK),DCMPFKKY   IS THIS KEY A LIST OF KEYS
         BZ    SCANCOM              NO, GET FIRST OR NEXT COMMAND
         SPACE 5
*/*%POINT: P (,FIND)               POINT TO FIRST KEY IN LIST */
************************************************************
         SR    MPFK,MPFK           CLEAR MASTER KEY POINTER
         MVC   DCMPFKKN(L'DCMPFKKN),DCMPFKNM SAVE MASTER KEY
TESTIT   TM    N3(APFK),STOPPER    IS THIS KEY ALREADY PROCESSED
         BNO   FIRST                NO, HANDLE IT
         LA    APFK,N2(APFK)        YES, POINT TO NEXT ONE
         CLI   N2(APFK),KEYSTOP    IS THIS THE LIST STOPPER
         BE    MOPMAST              YES, CLEAN UP LIST
         B     TESTIT               NO, GO TO TEST IT
* NOTE  THE PRECEEDING SIX INSTRUCTIONS ARE USED ONLY WHEN A LIST OF
*       KEYS CONTAINED AN UNDEFINED KEY, WHICH STOPS PROCESSING OF THE
*       LIST. WHEN THE KEY IS DEPRESSED A SECOND TIME THIS CODE
*       INSURES THAT PROCESSING RESUMES WITH THE KEY AFTER THE ONE
*       WHICH WAS NOT DEFINED. IF THE UNDEFINED KEY WAS THE LAST
*       IN THE LIST THE LIST IS MOPPED UP.
FIRST    MVC   DCMPFKNM(L'DCMPFKNM),N2(APFK) SET UP 1ST KEY IN LIST
         MVI   N3(APFK),STOPPER    MARK IT AS PROCESSED
         B     FIND                GO TO PROCESS THIS KEY
         EJECT
*/*SCANCOM: P (,CON)  MOVE FIRST OR NEXT COMMAND TO ENTRY AREA   */
************************************************************
SCANCOM  LA    STARTRG,N2(APFK)    POINT TO START OF AREA
         LA    CURSREG,N3(STARTRG) SET DEFAULT CURSOR AT POS. 3
         SR    SCAN,SCAN           CLEAR SCAN REGISTER
         LR    SCAN,STARTRG        POINT SCAN REG TO START OF TEXT
FOXES    CLI   Z(SCAN),STOPPER     IS THIS A STOPPER
         BE    STARTPT              YES, THIS IS START OF NEXT COMMAND
         CLI   Z(SCAN),SEMI        IS THIS A SEMI-COLON
         BE    STOPPT               YES, THIS IS END OF NEXT COMMAND
         CLI   Z(SCAN),CURS        IS THIS A CURSOR
         BE    CURSE                YES, GO SAVE ITS LOCATION
INCR     LA    SCAN,N1(SCAN)        NO, POINT TO NEXT CHARACTER
         BCT   DECR,FOXES          LOOK AT NEXT CHARACTER
         LR    STOPRG,SCAN         STOP AT END OF AREA
         B     CALC                GO TO FIGURE COMMAND LENGTH
STARTPT  LA    STARTRG,N1(SCAN)    REMEMBER WHERE COMMAND STARTS
         NI    DCMUTILT,X'FF'-DCMUTILA  CLEAR USER CURSOR FLAG
         LA    CURSREG,N3(STARTRG) SET DEFAULT CURSOR AT POS. 3
         B     INCR                GO LOOK FOR END OF COMMAND
CURSE    LA    CURSREG,N1(SCAN)    SAVE CURSOR LOCATION
         OI    DCMUTILT,DCMUTILA   FLAG AS USER-DEFINED CURSOR
         B     INCR                GO LOOK FOR END OF COMMAND
STOPPT   LR    STOPRG,SCAN         REMEMBER WHERE COMMAND STOPS
         MVI   Z(SCAN),STOPPER     AND MARK IT AS PROCESSED
CALC     SR    STOPRG,STARTRG      CALCULATE COMMAND LENGTH IN STOPRG
         LTR   STOPRG,STOPRG       IS LENGTH ZERO
         BZ    ERROR2               YES, INDICATE ERROR
         BCTR  STOPRG,R0           REDUCE LENGTH BY ONE FOR EXECUTE
         SR    CURSREG,STARTRG     CALCULATE CURSOR POSITION + 1
         STC   CURSREG,DCMPOSCU    SAVE IT
         MVI   DCMCULNO,N1         CURSOR GOES IN LINE ONE
         L     ENTRYPT,DCMAENTR    POINT TO ENTRY AREA
         MVI   N0(ENTRYPT),BLANK   BLANK FIRST CHAR OF ENTRY AREA
         MVC   N1(N126,ENTRYPT),N0(ENTRYPT)  BLANK REST OF IT
         EX    STOPRG,MVCM         MOVE COMMAND TO ENTRY AREA
         TM    DCMUTILT,DCMUTILA   USER-DEFINED CURSOR
         BNO   CON                  NO, CONTINUE
         SR    SCAN,SCAN           CLEAR REGISTER
         IC    SCAN,DCMPOSCU       GET CURSOR POSITION + 1
         BCTR  SCAN,N0             GET CURSOR POSITION
         AR    ENTRYPT,SCAN        POINT TO CURSOR
         LA    STARTRG,N1(ENTRYPT) POINT TO NEXT CHARACTER
         LH    STOPRG,CHARPOS      GET NUMBER OF CHARS. PER LINE
         SR    STOPRG,SCAN         SUBTRACT TO GET MOVE LENGTH
         BCTR  STOPRG,R0           REDUCE BY ONE FOR EXECUTE
         EX    STOPRG,MVCM         SCRUNCH LINE TO LEFT TO
*                                   DELETE CURSOR CHARACTER
         EJECT
*/*CON: D (YES,WRIT,NO,ISSU)                CON- VERSATIONAL MODE? */
************************************************************
CON      OI    DCMCOM3,DCMRTPFK    TELL PROC TO RETURN TO PFK ROUT
         TM    N1(APFK),DCMPFKCN   KEY IN CONVERSATIONAL MODE
         BO    WRIT                 YES, GO TO WRITE ENTRY
         CLI   DCMPFKKN,FOXFLAG    IS THIS KEY PART OF A LIST
         BE    ISSU                 NO, GO TO ISSUE COMMAND
         BAL   RETURN,FINDKN        YES, GET MASTER KEY FOR INSPECTION
OUT      TM    N1(MPFK),DCMPFKCN   MASTER KEY IN CONVERSATIONAL MODE
         BO    WRIT                 YES, GO TO WRITE ENTRY
         B     ISSU                 NO, GO TO ISSUE COMMAND
         SPACE 5
*/*WRIT: P (,IO)    INDICATE VERIFY, WRITE ENTRY & INSERT CURSOR */
************************************************************
WRIT     OI    DCMIOCM1,DCMWRENT+DCMINSC+DCMWRINS     INDICATE
*                                  WRITE ENTRY, WRITE INST LINE AND
*                                  INSERT CURSOR
         OI    DCMIOCM2,DCMINSSH   INDICATE INIT INST LINE
         OI    DCMCOM3,DCMVLPFK    INDICATE VERIFY IN PROCESS
         SPACE 5
*/*IO: P (,ENDTEST)   SET EXIT FOR DEV.DEP. I/O ROUTINE */
************************************************************
IO       L     XFBRANCH,DCMIORTN   LOAD IO ROUTINE ADDRESS
*                                  FOR EXIT TO IEECVET(H,P,R, OR U)
         B     ENDTEST             GO WRITE THE COMMAND FOR VERIFY
         SPACE 5
*/*ISSU: P (,ENDTEST)  TURN ON ISSUE FLAG AND SET EXIT FOR COMMAND */
************************************************************
ISSU     OI    DCMCOM1,DCMLPENT    INDICATE COMMAND TO BE ISSUED
*                                  (DUMMY ENTER)
         L     XFBRANCH,DCMNCMD1   LOAD COMMAND ADDRESS       MH YM2960
*                                  FOR EXIT TO IEECVET4       MH YM2960
         EJECT
*/*ENDTEST: D (NO,XCTL,YES,MOPUP)  DONE WITH THIS KEY? */
************************************************************
ENDTEST  EQU   *
         LTR   DECR,DECR           WAS THIS LAST COMMAND OF A KEY
         BP    XCTL                 NO, EXIT TO REQUIRED MODULE
         SPACE 5
*/*MOPUP: P (,MORE)               CLEAN UP PFK AREA */
************************************************************
MOPUP    MVI   DCMPFKNM,FOXFLAG    CLEAR OLD KEY NUMBER
         SR    DECR,DECR           CLEAR LIMIT REGISTER
         LH    DECR,CHARPOS        SET LIMIT VALUE
         LA    SCAN,N2(APFK)       POINT TO START OF AREA
THERE    CLI   Z(SCAN),STOPPER     IS THIS A STOPPER
         BNE   BUMPIT               NO, LOOK AT NEXT CHARACTER
         MVI   Z(SCAN),SEMI         YES, CHANGE IT TO SEMI-COLON
BUMPIT   LA    SCAN,N1(SCAN)       POINT TO NEXT CHARACTER
         BCT   DECR,THERE          LOOP UNTIL FINISHED
         NI    N1(APFK),X'FF'-DCMPFKPR    TURN OFF IN PROGRESS BIT
         TM    DCMUTILT,DCMUTILB   CANCEL REQUESTED WITH LIST OF KEYS
         BNO   MORE                 NO, CONTINUE
         NI    DCMUTILT,X'FF'-DCMUTILB  TURN OFF CANCEL FLAG
         B     MOPMAST             GO TO CLEAN UP
         SPACE 5
*/*MORE: D (NO,GETOUT,YES,%NEXT)   MORE KEYS IN LIST? */
************************************************************
MORE     CLI   DCMPFKKN,FOXFLAG    IS A MASTER KEY IN USE
         BE    GETOUT               NO, WE ARE ALL DONE
         BAL   RETURN,FINDKN       LOCATE MASTER KEY AREA
         SR    SCAN,SCAN           CLEAR SCAN REG
         LA    SCAN,Z(MPFK)        POINT TO PFK AREA
LOOP     LA    SCAN,N2(SCAN)       POINT TO NEXT KEY
         CLI   N1(SCAN),STOPPER    HAS THIS KEY BEEN PROCESSED
         BE    LOOP                 YES, LOOK AT NEXT ONE
         CLI   Z(SCAN),KEYSTOP      NO, ANY MORE KEYS IN LIST
         BE    MOPMAST               NO, CLEAN UP MASTER KEY AREA
         EJECT
*/*%NEXT: P (,XCTL)        SET UP NEXT KEY */
************************************************************
         MVC   DCMPFKNM(L'DCMPFKNM),Z(SCAN)  YES, MOVE TO ENTRY
         MVI   N1(SCAN),STOPPER    FLAG THIS KEY AS HANDLED
         B     XCTL                RETURN TO PROCESSOR
MOPMAST  EQU   *
         MVC   DCMPFKNM(L'DCMPFKNM),DCMPFKKN  MAKE MASTER KEY ACTIVE
         BAL   RETURN,FINDKN       GO TO FIND MASTER PFK AREA
         LR    APFK,MPFK           POINT TO MASTER FOR MOPUP
         MVI   DCMPFKKN,FOXFLAG    CLEAR SAVED MASTER KEY
         B     MOPUP               GO TO MOP UP MASTER KEY AREA
         SPACE 5
*/*GETOUT: P (,XCTL)     INDICATE PROCESSING DONE   */
************************************************************
GETOUT   NI    DCMCOM3,X'FF'-DCMRTPFK   TELL PROCESSOR WE ARE DONE
         OI    DCMIOCM2,DCMINSSH   INDICATE INIT. INSTRUCTION LINE
         OI    DCMIOCM1,DCMWRINS   INDICATE WRITE INST. LINE
         L     XFBRANCH,DCMIORTN   LOAD IO ROUTINE ADDRESS
*                                  FOR EXIT TO IEECVET(H,P,R, OR U)
         TM    DCMUTILT,DCMUTILC   CANCEL IN PROGRESS
         BNO   XCTL                 NO, CONTINUE
         NI    DCMUTILT,X'FF'-DCMUTILC   YES, TURN OFF CANCEL FLAG
         MVI   DCMPOSCU,N1         RESTORE NORMAL CURSOR TO
         MVI   DCMCULNO,N1            LINE 1 POSITION 1
         OI    DCMIOCM2,DCMBLENT   INDICATE BLANK ENTRY AREA
         OI    DCMIOCM1,DCMWRENT+DCMINSC      AND WRITE TO SCREEN
         B     XCTL                GO TO DO IT
         SPACE 5
***************SUBROUTINE TO POINT TO AREA OF MASTER KEY*************
FINDKN   LR    MPFK,PFKPTR         ADDRESS OF FIRST PFK AREA
LP       EQU   *
         CLC   Z(N1,MPFK),DCMPFKKN IS THIS THE AREA FOR THE KEY
         BCR   EQUAL,RETURN         YES, RETURN TO CALLER
         LA    MPFK,PFKLGN(MPFK)    NO, POINT TO NEXT AREA
         B     LP                  SEE IF THIS IS IT
***************************END OF SUBROUTINE**************
         EJECT
*/*ERROR: P (,XCTL) SET UP ERROR MESSAGE & SET EXIT FOR MESSAGE MODULE
*/**/
************************************************************
ERROR    EQU   *
         OI    DCMCMSG4,DCMPFKNA   INDICATE PFK UNALLOCATED ERROR MSG
         B     MSG3NAME            GO TO WRITE ERROR MESG
ERROR2   EQU   *
         OI    DCMCMSG4,DCMPFKND   INDICATE PFK UNDEFINED ERROR MSG
CLEANUP  MVI   DCMPFKKN,FOXFLAG    ERASE MASTER KEY IF IN USE
         NI    DCMCOM3,X'FF'-DCMRTPFK-DCMVLPFK   DO NOT RETURN HERE
         B     MSG3NAME            GO TO PERFORM KEY CANCEL
ERROR3   EQU   *
         OI    DCMCMSG4,DCMPFKIP    INDICATE IN PROCESS
         NI    DCMIOCM3,X'FF'-DCMPFKAT-DCMRDPFK   TURN OFF FLAGS
MSG3NAME EQU   *
         L     XFBRANCH,DCMNMSG3   LOAD MESSAGE 3 ADDRESS
*                                  FOR EXIT TO IEECVFTD
         SPACE 5
*/*XCTL: R          PROCESSOR, I/O OR MESSAGE MODULE */
************************************************************
XCTL     EQU   *
         L     X1PARM,DCMCXSVE     RESTORE CXSA ADDRESS
         BR    XFBRANCH            EXIT ADDRESS ALREADY SET
         SPACE 5
*********  EXECUTED INSTRUCTION  **************
*     THIS INSTRUCTION IS EXECUTED FOR TWO PURPOSES:
*         1. TO MOVE A COMMAND FROM THE PFK AREA TO
*             THE COMMAND ENTRY AREA.
*         2. TO MOVE A PORTION OF A COMMAND WITHIN THE COMMAND
*             ENTRY AREA TO DELETE A USER-DEFINED CURSOR.
MVCM     MVC   Z(Z,ENTRYPT),Z(STARTRG)
***********************************************
         SPACE 5
*/*IEECVFTA: END */
***********************************************************
         EJECT
*      CONSTANTS
CHARPOS  DC    H'108'              NO. OF CHAR POSITIONS      MH  M0633
F6       DC    F'6'                NUMBER OF SPACES PER PFK ON SCREEN
FPFKLGN  DC    F'110'              MUST BE SAME AS PFKLGN
*      EQUATES
ID1      EQU   C'F'                1ST CHARACTER OF CSECT ID
ID2      EQU   C'A'                2ND CHARACTER OF CSECT ID
*      PFK AREA EQUATES
DCMPFKDF EQU   X'80'               KEY HAS BEEN DEFINED
DCMPFKPR EQU   X'40'               KEY IS BEING PROCESSED
DCMPFKCN EQU   X'20'               KEY DEFINED AS CONVERSATIONAL MODE
DCMPFKKY EQU   X'08'               KEY IS A LIST OF KEYS
ANRPFK   EQU   X'70'               3277 PFK ZONE
BLANK    EQU   C' '                BLANK CHARACTER
CURS     EQU   X'6D'               UNDERSCORE CHARACTER FOR CURSOR
EQUAL    EQU   8                   BRANCH CONDITION
FOXFLAG  EQU   X'FF'               NO MASTER KEY
KEYSTOP  EQU   X'61'               MASTER KEY STOPPER
N0       EQU   0                   NUMBER
N1       EQU   1                   NUMBER
N2       EQU   2                   NUMBER
N3       EQU   3                   NUMBER
N4       EQU   4                   NUMBER
N16      EQU   16                  NUMBER
N28      EQU   28                  NUMBER
N100     EQU   100                 NUMBER
N126     EQU   126                 LENGTH OF ENTRY AREA
PFKLGN   EQU   110                 LENGTH OF PFK AREA
SEMI     EQU   C';'                CHARACTER
STOPPER  EQU   X'FF'               STOPPER FLAG
STRIP    EQU   X'F0'               REMOVES ANR AID ZONE
Z        EQU   0                   NUMBER
         EJECT
* THE FOLLOWING STATEMENTS WILL GENERATE A FLOWCHART WHICH SHOWS THE
* RELATIONSHIP BETWEEN PFK 1 AND THE REST OF DIDOCS.
         SPACE 5
*/*PFKFLOW: CHART */
*/* HEADER
*/*                       PFK OPERATION - OVERALL FLOW
*/*                                                    PAGE #       */
*/* E (,%PROC) ATTENTION OR RETURN FROM OTHER MODULES */
*/*%PROC: S (,%LPATTN)   XCTL:         PROCESSOR 1 */
*/*%LPATTN: D (NO,%ECATTN,YES,%LP)      LIGHT PEN ATTENTION */
*/*%ECATTN: D (NO,%PFKATTN,YES,%CMD)     ENTER OR CANCEL ATTENTION */
*/*%PFKATTN: D (NO,%MRWRK,YES,%INDPFK)     PFK ATTENTION */
*/*%MRWRK: D (NO,%MCS,YES,%VERIP)     MORE PFK WORK TO DO */
*/*%MCS: R                            MCS ROUTER */
*/*%LP: S (,%PFKAR)    XCTL:  L/P CURSOR */
*/*%PFKAR: D (NO,%OTH,YES,%INDLP)    ATTENTION IN PFK AREA */
*/*%OTH: R                         OTHER L/P FUNCTIONS */
*/*%INDLP: P (,%PFK1)             INDICATE LIGHT PEN ATTENTION */
*/*%CMD: S (,%VEROFF)   XCTL:         COMMAND */
*/*%VEROFF: P (,%HANDLE)            TURN OFF VERIFY BIT */
*/*%HANDLE: P (,%PROC)              PROCESS ENTER OR CANCEL */
*/*%INDPFK: P (,%PFK1)              INDICATE PFK ATTENTION OCCURRED */
*/*%VERIP: D (YES,%MCS,NO,%PFK1)     VERIFY BIT ON */
*/*%PFK1: S (,%MVCOM) XCTL:           PFK 1 */
*/*%MVCOM: P (,%CONV) MOVE COMMAND TO ENTRY AREA IN DCM */
*/*%CONV: D (NO,%INDENT,YES,%INDWRT)    CON- VERSATIONAL MODE */
*/*%INDENT: P (,%PROC)        INDICATE ENTER ATTENTION OCCURRED */
*/*%INDWRT: P (,%VERBIT)      INDICATE WRITE ENTRY AREA TO SCREEN */
*/*%VERBIT: P (,%IO)              TURN ON VERIFY BIT */
*/*%IO: S (,%WRT)  XCTL: DEVICE DEPENDENT I/O ROUTINE */
*/*%WRT: P (,%PROC)  WRITE ENTRY AREA TO SCREEN */
*/*PFKFLOW: END */
         TITLE 'IEECVFTA   IGC6A07B    PFK ROUTINE 1     RESIDENT DISPL*
               AY CONTROL MODULE'
         IEERDCM
         TITLE 'IEECVFTA   IGC6A07B    PFK ROUTINE 1      TRANSIENT DIS*
               PLAY CONTROL MODULE'
         IEETDCM
         TITLE 'IEECVFTA   IGC6A07B     PFK ROUTINE 1      CXSA'
         IHACTM  CXSA
         END   START
