* /* START OF SPECIFICATIONS ****
*02*  PROCESSOR = ASSEMBLER;
**** END OF SPECIFICATIONS ***/
         TITLE 'IEECVETV IGC5V07B 3277 I/O 2'
IEECVETV CSECT
*A131600,131700                                               MH Y01566
*A261000,274000,274100                                        MH Y02159
*C163500,164000                                               MH Y02159
* STATUS
*    CHANGE LEVEL 0.012
*
* APARS FIXED = OZ13394
*
* FUNCTION
*    THIS IS A DEVICE DEPENDENT ROUTINE TO PERFORM THE REQUESTED I/O IN
*    PROPER SCREEN FORMAT.
*
* ENTRY POINTS
*         IEECVETV FOR ALL FUNCTIONS
*
* OPERATION
*    THE COMMUNICATION BYTES IN THE DCM ARE CHECKED AGAINST
*    PRE-ESTABLISHED BIT SETTINGS TO DETERMINE WHICH TYPE/FORMAT OF
*    I/O IS TO BE PERFORMED. EACH POSSIBLE REQUEST IS CHECKED AND, IF
*    APPLICABLE, THE APPROPRIATE CCWS ARE BUILT UNTIL ALL OF THE
*    DESIRED I/O REQUESTS ARE SET UP IN THE CHANNEL PROGRAM. THEY MAY
*    BE TO: WRITE THE FULL SCREEN, WRITE A PORTION OF THE SCREEN,
*    WRITE THE INSTRUCTION LINE, WRITE THE ENTRY AREA,
*    INSERT THE CURSOR, WRITE THE WARNING LINE, SOUND
*    THE ALARM, WRITE THE
*    INFORMATIONAL DISPLAY, ERASE THE SCREEN, WRITE THE ASYNCHRONOUS
*    ERROR MESSAGE OR WRITE THE PFK LINE. I/O IS THEN
*    INITIATED VIA AN EXCP AND CONTROL IS RETURNED TO PROCESSOR 1
*    (IEECVET1).
*
* INPUT
*    THE INDICATION OF THE DESIRED I/O IS RECEIVED IN I/O
*    COMMUNICATION BYTES 2 AND 3 IN THE DISPLAY CONTROL MODULE.
*
* OUTPUT
*    WRITING OF WHAT IS REQUESTED BY THE OTHER MODULES.
*
* EXTERNAL REFERENCES
*         NONE.
*
* EXITS, NORMAL
*         IEECVET1 PROCESSOR 1 WHEN WORK IS COMPLETE.
*
* EXITS, ERROR
*         NONE.
*
* TABLES/WORK AREAS
*    DISPLAY CONTROL MODULE (CONTAINED IN DSECT AT END OF LISTING).
*
* ATTRIBUTES
*    REFRESHABLE, PRIVILEGED, TYPE 4 SVC.
*
* CHARACTER CODE DEPENDENCY
*    NONE.
*
* NOTES
*    THE FOLLOWING FLAG BITS ARE USED:
*       THE ACTION COLUMN INDICATES WHETHER THE BIT IS TURNED ON, OFF
*       OR JUST TESTED BY THIS MODULE.
*
*         NAME         ACTION                 FUNCTION
*
*        DCMCOM1
*         DCMIOPRD      ON         READ HAS BEEN PERFORMED
*        DCMIOCM2
*         DCMBLENT   OFF/TEST      BLANK ENTRY AREA
*         DCMBLWRL   OFF/TEST      BLANK LEFT HALF WARNING LINE
*         DCMBLWRR   OFF/TEST      BLANK RIGHT HALF WARNING LINE
*         DCMINSSH   OFF/TEST      INITIALIZE INSTRUCTION LINE
*         DCMWINFD   OFF/TEST      WRITE INFORMATION DISPLAY
*         DCMERASE   OFF/TEST      ERASE SCREEN
*         DCMIOCRD   OFF/TEST      READ ENTRY AREA
*         DCMWRASY   OFF/TEST      WRITE ASYNCHRONOUS ERROR MESSAGE
*        DCMIOCM3
*         DCMWRPFK   OFF/TEST      ALTER PFK LINE
*         DCMLTPFK   OFF/TEST      LIGHT ALLOCATED PFKS
*         DCMACPFK   OFF/TEST      EXTINGUISH PFKS
*         DCMSSRG    OFF/TEST      SUPPRESS REGENERATION
*        DCMIOUNQ
*         DCMINERR    OFF          ERROR INSTRUCTION LINE
*         DCMINNOR     ON          NORMAL INSTRUCTION LINE
*        DCMUTILT
*         DCMUTILB  ON/OFF/TEST    WRITE CCW EXISTS
***********************************************************************
  EJECT
*             REGISTER EQUATES
***********************************************************************
X1PARM   EQU   1
XFBRANCH EQU   15
R1PARM   EQU   1                   PARAMETER REGISTER
R2BRANCH EQU   2                   BRANCH REGISTER
R3WORK   EQU   3                   WORK REGISTER
R3RMSGAL EQU   3                   STATUS SW WORK REG
R4WORK   EQU   4                   WORK REGISTER
R4POINT  EQU   4                   WORK REGISTER
R4ADDRL  EQU   4                   STATUS SW WORK REG
R5KEEP   EQU   5                   WORK REGISTER
R5WTINT  EQU   5                   STATUS SW WORK REG
R6WORK   EQU   6                   WORK REGISTER
R7DCMENT EQU   7                   DCM ENTRY BASE REGISTER
R8CHPGM  EQU   8                   POINTER TO CHANNEL PROGRAM AREA
R9PFKPTR EQU   9                   POINTER TO PFK AREA
RADCMBAS EQU   10                  TRANSIENT DCM BASE REGISTER
RBBASE   EQU   11                  PROGRAM BASE REGISTER
RCCXSA   EQU   12                  CXSA BASE REGISTER
RDUCMENT EQU   13                  UCMENTRY BASE REGISTER
RERTRN   EQU   14                  WORK REGISTER
RFRESBAS EQU   15                  RESIDENT DCM BASE
         EJECT
START    BALR  RBBASE,N0           SET UP
         USING *,RBBASE            ADDRESSABILITY
         B     ICATCH              BRANCH AROUND EYECATCHER
         DC    C'12 MODULE IGC5V07B, FICHE IEECVETV  ' EYECATCHER AND
ZAPAREA  DC    12C'ZAP'               RESERVED FOR FIELD MODIFICATION
ICATCH   LR    RCCXSA,R1PARM       SAVE CXSA BASE
         USING CXSA,RCCXSA         DECLARE CXSA ADDRESS
         L     RDUCMENT,CSAUCM     GET UCM ENTRY ADDRESS
         USING UCMLIST,RDUCMENT    DECLARE UCMENTRY BASE
         L     RFRESBAS,UCMXB      GET DCM POINTER
         USING DCMTSRT,RFRESBAS
         L     R9PFKPTR,DCMADPFK   POINT TO PFK AREA
         L     RADCMBAS,DCMADTRN   GET BASE FOR TRANSIENT DCM
         USING DCMSTRT,RADCMBAS      DECLARE DCM BASE
         L     R7DCMENT,DCMAENTR   GET DCM ENTRY POINTER
         USING DCMENTRY,R7DCMENT   DECLARE BASE
         MVC   DCMTRACE(DCMTRLEN),DCMTRAC2 SHIFT OLD TRACE ENTRIES
         MVI   DCMTREN1,ID1        PUT CSECT ID INTO
         MVI   DCMTREN2,ID2        NEW TRACE ENTRY
         L     R8CHPGM,DCMDSAV    POINT TO CHANNEL PROGRAM
         LA    R2BRANCH,BUMP1      SET BRANCH REG
         TM    DCMUTILT,DCMUTILB   DOES WRITE CCW EXIST
         BO    ERASEPFM             YES, DON'T BUILD ANOTHER
WRITE    BAL   RERTRN,WRITECCW     GO BUILD WRITE CCW
         OI    DCMUTILT,DCMUTILB   INDICATE WRITE CCW EXISTS
ERASEPFM EQU   *
         TM    DCMIOCM2,DCMERASE   SEE IF ERASE
         BNO   FULLWRT              NO, CHECK NEXT FUNCTION
PFMERASE EQU   *
         LA    R5KEEP,DCMERSDT     POINT TO ERASE DATA
         LA    R3WORK,N7           SET BYTE COUNT
         BAL   RERTRN,BUILDCCW     GO BUILD CCW
         NI    DCMIOCM2,X'FF'-DCMERASE TURN OFF ERASE BIT
         B     ASYWRIT             TEST NEXT FUNCTION
FULLWRT  EQU   *
         TM    DCMIOCM1,DCMWRMSG   WRITE FULL MESSAGE AREA
         BNO   PARTWRT              NO, TEST NEXT FUNCTION
FULLMSG  EQU   *
         L     R5KEEP,DCMASCRN     POINT TO START OF TEXT
         SH    R5KEEP,H6           BACK UP TO CONTROL CHARS
         L     R3WORK,DCMWTBUF     PT TO END OF BUFF
         SR    R3WORK,R5KEEP       CALC BYTE COUNT
         SH    R3WORK,H6           ACCOUNT FOR CONTROL CHARS
         LTR   R3WORK,R3WORK       IS BYTE COUNT ZERO
         BZ    PARTWRT              YES, DON'T BUILD CCW
         ST    R8CHPGM,DCMDSAV+N4  SAVE CHAN PGM ADDR          @ZA13394
         BAL   RERTRN,BUILDCCW     GO BUILD THE CCW
         BAL   RERTRN,XLATE        XLATE CTRL CHARAC FM TEXT   @ZA13394
         B     AANDD               INSERT ATTRIBUTE & DES AS REQ
PARTWRT  EQU   *
         TM    DCMIOCM1,DCMWRPAR   WRITE PARTIAL MESSAGE AREA
         BNO   ASYWRIT              NO, TEST NEXT FUNCTION
PARTMSG  EQU   *
         SR    R5KEEP,R5KEEP       CLEAR REG
         L     R4POINT,DCMASCRN    POINT TO START OF MESSAGE AREA
         SH    R4POINT,H6          BACK UP TO CONTROL CHARS
         IC    R5KEEP,DCMLINEN     GET LINE NO
         BCTR  R5KEEP,N0           DECREMENT BY 1
         MH    R5KEEP,DCMCORLN     MULT BY LINE LENGTH        MB
         AR    R5KEEP,R4POINT      ADD BEGINNING ADDR TO GET ID ADDR
         LH    R3WORK,DCMBYTCT     GET WRITE LENGTH
         ST    R8CHPGM,DCMDSAV+N4  SAVE CHAN PGM ADDR          @ZA13394
         BAL   RERTRN,BUILDCCW     BUILD CCW
         BAL   RERTRN,XLATE        XLATE CTRL CHARAC FM TEXT   @ZA13394
AANDD    NI    DCMIOCM1,X'FF'-DCMWRMSG-DCMWRPAR TURN BITS OFF
         L     R3WORK,DCMAMTAB     POINT TO START OF SCT
         L     R6WORK,DCMASCRN     POINT TO FIRST LINE OF TEXT
         L     R5KEEP,DCMADSEC     POINT TO START OF SSCT
TESTCTL1 TM    N1(R3WORK),DCMMSGCL IS THIS IN-LINE CONTROL LINE
         BO    INSERT1              YES, INSERT ATT. AND DES.
         TM    0(R5KEEP),DCMSECCL  IS THIS OUT-OF-LINE CONTROL LINE
*                                     (MOD 2 ONLY)
         BNO   BUMP1                NO, GET NEXT ENTRY
         TM    N0(R3WORK),DCMMSGJK  YES, IS IT STILL IN DCM
         BO    INSERT2               YES, INSERT CONTROL CHARS
BUMP1    LA    R3WORK,N2(R3WORK)   POINT TO NEXT SCT ENTRY
         TM    N0(R3WORK),DCMMSGST IS THIS END OF TABLE
         BO    ASYWRIT              YES, GO TO NEXT FUNCTION
         AH    R6WORK,DCMCORLN     POINT TO NEXT LINE
         LA    R5KEEP,N1(R5KEEP)   POINT TO NEXT SSCT ENTRY
         B     TESTCTL1            GO TEST NEXT ENTRY
INSERT1  CLI   DCMLGNTH+N1,MOD1LGN IS IT A MODEL 1
         BE    BUMP1                YES, NO CONTROL CHARS NEEDED
MOD2     MVC   N63(N3,R6WORK),DETAD    INSERT  SF, ATT & DES
         B     BUMP1               GO TO TEST NEXT ENTRY
ASYWRIT  EQU   *
         TM    DCMIOCM2,DCMWRASY   SEE IF WRITE ASYN ERROR
         BNO   PFKWRITE             NO, CHECK NEXT FUNCTION
WRITASY  EQU   *
         OI    DCMWCC,RESTORE+RESETMDT  RESTORE AND RESET MDT
         L     R5KEEP,DCMAENTR     POINT TO START OF MSG
         LH    R3WORK,DCMLGNTH     GET LENGTH OF LINE
         SLL   R3WORK,N1           DOUBLE IT
         BAL   RERTRN,BUILDCCW     BUILD CCW
*  NOTE  LINE WILL BE WRITTEN TO MID-SCREEN, WHERE
*        BLANKING DATA LEAVES CURSOR.
         NI    DCMIOCM2,X'FF'-DCMWRASY   TURN BIT OFF
         B     ENEXCP              GO TO EXECUTE
PFKWRITE EQU   *
         TM    DCMIOCM3,DCMWRPFK   WRITE PFK AREA
         BNO   INSTWRT              NO, TEST NEXT FUNCTION
WRITEPFK EQU   *
* EACH TIME THIS ROUTINE IS ENTERED IT WILL CHANGE THE STATUS OF THE
*  DISPLAYED PFK LINE.  IF THE LINE IS DISPLAYED IT WILL BE ERASED
*   IF IT IS BLANK IT WILL BE BUILT AND WRITTEN TO THE SCREEN.
         SPACE
         LR    R4POINT,R9PFKPTR   GET POINTER TO PFK AREA
         L     R3WORK,DCMPFKLN    GET POINTER TO PFK LINE
         CLI   N0(R3WORK),BLANK    IS LINE BLANK NOW
         MVI   N0(R3WORK),BLANK   BLANK FIRST POSITION
         MVC   N1(N83,R3WORK),N0(R3WORK)     PROPAGATE BLANK
         BNE   WRITIT             NO, IT WASN'T BUT WE JUST
*                                  BLANKED IT SO WRITE IT
         LTR   R4POINT,R4POINT     ANY KEYS ALLOCATED         MH Y01566
         BZ    WRITIT               NO, JUST WRITE BLANK LINE MH Y01566
LOOP3    CLI   N0(R4POINT),STOPPER IS THIS END OF AREA
         BE    WRITIT              YES, STOP GENERATION
         MVC   N0(N3,R3WORK),DETAD NO, INSERT SF, ATT AND DES CHARS
KEYSTART SR    R5KEEP,R5KEEP      CLEAR WORK REGISTER
         IC    R5KEEP,N0(R4POINT) GET KEY NUMBER
         CVD   R5KEEP,DCMPACK     CONVERT IT TO DECIMAL
         UNPK  DCMCVBIN+N2(N2),DCMCVBIN+N2(N2)   UNPACK IT
         OI    DCMCVBIN+N3,ZONE   CHANGE SIGN TO EBCDIC
         MVC   N3(N2,R3WORK),DCMCVBIN+N2    MOVE KEY TO LINE
         CLI   N3(R3WORK),ZERO    IS FIRST DIGIT ZERO
         BNE   TWOCHAR             NO, CONTINUE
         MVC   N3(N2,R3WORK),N4(R3WORK) SHIFT CHAR OVER
         BCTR  R3WORK,N0           ADJUST POINTER
TWOCHAR  EQU   *
         MVI   DCMCVBIN+N2,ZEROS  CLEAR OUT
         MVI   DCMCVBIN+N3,ZEROS     WORK AREA
         LA    R3WORK,N8(R3WORK)  POINT TO NEXT LINE SEGMENT
         LA    R4POINT,PFKLGN(R4POINT)     POINT TO NEXT PFK AREA
         B     LOOP3              GO SEE IF ANY MORE
WRITIT   EQU   *
         NI    DCMIOCM3,X'FF'-DCMWRPFK  TURN OFF BIT
         LA    R5KEEP,DCMPFKC      POINT TO CONTROL CHARS
         LA    R3WORK,N3           SET BYTE COUNT
         BAL   RERTRN,BUILDCCW     GO BUILD CCW
         L     R5KEEP,DCMPFKLN     POINT TO PFK LINE
         LH    R3WORK,DCMCORLN     GET LENGTH OF WRITE
         BAL   RERTRN,BUILDCCW     BUILD CCW
INSTWRT  EQU   *
         TM    DCMIOCM1,DCMWRINS   WRITE INSTR LINE
         BNO   ENTRYWRT             NO, TEST NEXT FUNCTION
WRITEINS EQU   *
         NI    DCMIOCM1,N255-DCMWRINS TURN OFF INS LINE WRITE BIT
         LA    R5KEEP,DCMINSTR-N6  POINT TO INST LINE
         LH    R3WORK,DCMCORLN     GET WRITE LENGTH
         BAL   RERTRN,BUILDCCW     BUILD WRITE SCREEN CCW
         TM    DCMIOUNQ,DCMINNOR   IS LINE NORMAL
         BO    NORMINST             YES, DE-INTENSIFY
         MVI   DCMINSTR-N2,HIGHINT  NO, INTENSIFY IT
         MVC   DCMINSTR+N57(N20),DETAD  PUT ENTER-CANCEL ON RIGHT
         B     ENTRYWRT            TEST NEXT FUNCTION
NORMINST MVI   DCMINSTR-N2,NORMINT SET NORMAL INTENSITY
ENTRYWRT EQU   *
         TM    DCMIOCM1,DCMWRENT   WRITE ENTRY AREA
         BNO   CURSORIN             NO, TEST NEXT FUNCTION
WRITENT  EQU   *
         NI    DCMIOCM1,X'FF'-DCMWRENT TURN OFF WRITE ENTRY AREA BIT
         MVI   DCMENTRY+N127,NULL  NULL BYTE PAST COMMAND     MH Y02159
         MVC   DCMENTRY+N128(N34),DCMENTRY+N127   AND REST OF LINE
         LA    R5KEEP,DCMENTRY-N6  POINT TO ENTRY LINE
         LA    R3WORK,ENTLGN       LOAD LENGTH OF ENTRY AREA
         BAL   RERTRN,BUILDCCW     BUILD WRITE CCW
CURSORIN EQU   *
         TM    DCMIOCM1,DCMINSC    INSERT CURSOR
         BNO   WARNWRIT             NO, TEST NEXT FUNCTION
INCURSOR EQU   *
         NI    DCMIOCM1,X'FF'-DCMINSC TURN OFF BIT
         SR    R5KEEP,R5KEEP       CLEAR WORK REG
         IC    R5KEEP,DCMCULNO     GET LINE NUMBER
         BCTR  R5KEEP,N0           REDUCE BY ONE
         MH    R5KEEP,H78          MULT BY LGN LINE 1
         SR    R3WORK,R3WORK       CLEAR WORK REG             MB
         IC    R3WORK,DCMPOSCU     GET CHARACTER POSITION
         LA    R5KEEP,EACHAR(R5KEEP,R3WORK) GET ADDR TO INS CURSOR
         STC   R5KEEP,DCMCRSDT+N2  STORE RIGHT HALF OF DATA
         SRL   R5KEEP,N6           ISOLATE LEFT HALF OF DATA
         STC   R5KEEP,DCMCRSDT+N1  STORE IT
         NI    DCMCRSDT+N2,CLEANIT CLEAN UP RIGHT HALF
         TR    DCMCRSDT+N1(N2),TRTABLE  TRANSLATE TO 3277 CODE
         LA    R5KEEP,DCMCRSDT     GET PTR FOR INSERT CURSOR
         LA    R3WORK,N4           SET BYTE COUNT
         BAL   RERTRN,BUILDCCW     BUILD CCW
WARNWRIT EQU   *
         TM    DCMIOCM1,DCMWRWRN   WRITE WARNING LINE
         BNO   INFOWRIT             NO, TEST NEXT FUNCTION
WRITWARN EQU   *
         NI    DCMIOCM1,X'FF'-DCMWRWRN TURN OFF WARNING LINE BIT
         L     R5KEEP,DCMAWARN     POINT TO WARNING LINE
         SH    R5KEEP,H6           BACK UP TO CONTROL CHARACTERS
         LH    R3WORK,DCMCORLN     LENGTH OF WRITE
         BAL   RERTRN,BUILDCCW     BUILD WRITE CCW
INFOWRIT EQU   *
         TM    DCMIOCM2,DCMWINFD   SEE IF WRITE INFO DISPLAY
         BNO   ALRMSND              NO, GO TEST FOR NEXT FUNCTION
WRITINFO EQU   *
         NI    DCMIOCM2,X'FF'-DCMWINFD  TURN OFF BIT
         SR    R4WORK,R4WORK       CLEAR REG
         IC    R4WORK,DCMLINEN     GET LINE NUMBER
         BCTR  R4WORK,N0           BACK UP TO LINE
         MH    R4WORK,DCMCORLN     INDEX TO THAT LINE
         A     R4WORK,DCMASCRN     ADD TO START OF BUFFER
         SH    R4WORK,H6           BACK UP TO CONTROL CHARS
         L     R6WORK,DCMAINS      POINT TO FIRST DATA LINE   MB
         CLI   N65(R6WORK),SPLAT   IS IT A CONTROL LINE
         BNE   BUILDEM              NO, CONTINUE
         LA    R2BRANCH,BUILDEM    LOAD SUBROUTINE RETURN
INSERT2  MVC   N55(N3,R6WORK),DETAD     YES, INSERT SF-ATT-DES
         MVC   N63(N3,R6WORK),DETAD           FOR DETECTION
         TM    N71(R6WORK),DIGIT   IS CCA STILL INTACT
         BCR   NOTONE,R2BRANCH      NO, WE'VE BEEN HERE BEFORE
         MVC   DCMDSAV(N3),N71(R6WORK)    SAVE CCA
         MVC   N75(N3,R6WORK),DCMDSAV     RESTORE IT
         MVC   N71(N3,R6WORK),NORMAT    MAKE IT UNDETECTABLE
         BR    R2BRANCH            RETURN TO CALLER
* NOTE  BRANCH IS A NO-OP IF WE ENTERED FROM THE WRITINFO ROUTINE
*       AND TO LABLE 'BUMP1' IF WE CAME FROM WRITE FULL OR PARTIAL
BUILDEM  LA    R3WORK,N6           SET BYTE COUNT
         LR    R5KEEP,R4WORK       SET WRITE FROM ADDRESS
         BAL   RERTRN,BUILDCCW     BUILD CCW TO WRITE CONTROL
         LH    R3WORK,DCMLGNTH     SET  BYTE COUNT FOR TEXT
         LR    R5KEEP,R6WORK       POINT TO DATA
         BAL   RERTRN,BUILDCCW     BUILD CCW TO WRITE DATA
         CLC   DCMBYTCT,DCMCORLN   WAS THIS LAST LINE
         BNH   ALRMSND              YES, ALL DONE
         LH    R3WORK,DCMBYTCT      NO, GET BYTE COUNT
         SH    R3WORK,DCMCORLN     SUBTRACT LENGTH OF LAST LINE
         STH   R3WORK,DCMBYTCT     UPDATE BYTE COUNT
         AH    R4WORK,DCMCORLN     UPDATE CONTROL POINTER
         AH    R6WORK,DCMCORLN     UPDATE DATA POINTER
         B     BUILDEM             GO DO NEXT LINE
ALRMSND  EQU   *
         TM    DCMIOCM1,DCMSOUND   SOUND ALARM
         BNO   ENEXCP               NO, STOP CCW CHAIN
SOUNDALM EQU   *
         NI    DCMIOCM1,X'FF'-DCMSOUND
         OI    DCMWCC,ALARM        TURN ON BIT IN WCC
ENEXCP   EQU   *
         SH    R8CHPGM,EIGHT       UPDATE CCW POINTER
         MVI   N4(R8CHPGM),STOP    STOP CCW CHAIN
         NI    DCMWCC,VALRNG       ENSURE VALID INPUT TO XLATE
*  NOTE HIGH ORDER TWO BITS MAY HAVE BEEN TURNED ON IN
*       I/O ROUTINE 1.
         TR    DCMWCC(N1),TRTABLE  CONVERT WCC CHARACTER
EXCP     EQU   *
         L     XFBRANCH,CSAXB      OBTAIN LOCKS               JE YM8371
         LR    R1PARM,RCCXSA       COPY CXSA ADDR             JE YM8371
         BALR  RERTRN,XFBRANCH     TO ROUTINE                 JE YM8371
         XC    UCMECB,UCMECB       CLEAR ECB
         OI    UCMSTS,UCMBF        TURN ON BUSY BIT
         L     R3WORK,UCMDCB       GET DCB ADDRESS
         L     XFBRANCH,CSAXC      RELEASE LOCKS              JE YM8371
         LR    R1PARM,RCCXSA       COPY CXSA ADDR             JE YM8371
         BALR  RERTRN,XFBRANCH     TO ROUTINE                 JE YM8371
         L     R1PARM,N28(R3WORK)  GET IOB ADDRESS
         EXCP  (R1PARM)            INITIATE I/O
PROCEXIT L     XFBRANCH,DCMNPROC   LOAD PROC 1 ADDRESS
*                                  FOR EXIT TO IEECVET1
EXIT     EQU   *
         L     X1PARM,DCMCXSVE     RESTORE CXSA ADDRESS
         BR    XFBRANCH            EXIT ADDRESS ALREADY SET
         SPACE 5
WRITECCW EQU   *
         LA    R5KEEP,DCMWCC       POINT TO WCC CHAR
         LA    R3WORK,N1           SET BYTE COUNT
BUILDCCW ST    R5KEEP,N0(R8CHPGM)  SAVE WRITE FROM ADDRESS
         MVI   N0(R8CHPGM),WRITCOD INSERT WRITE CCW CODE
         STH   R3WORK,N6(R8CHPGM)  PUT BYTE COUNT IN
         MVI   N4(R8CHPGM),CHAINDT CHAIN CCW'S
         LA    R8CHPGM,N8(R8CHPGM) UPDATE CCW POINTER
         BR    RERTRN              RETURN
XLATE    L     R6WORK,DCMDSAV+N4   GET CHAN PGM ADDR           @ZA13394
         LH    R5KEEP,N6(R6WORK)   GET TEXT LNGTH              @ZA13394
         L     R6WORK,N0(R6WORK)   GET TEXT BEGINING           @ZA13394
         LA    R6WORK,N0(R6WORK)   CLR HIGH ORDER BYTE         @ZA13394
         AR    R5KEEP,R6WORK       GET TEXT END+1              @ZA13394
         LH    R3WORK,DCMAXLGN     MAX LINE LGTH               @ZA13394
         BCTR  R3WORK,N0           DECREMENT BY ONE            @ZA13394
LOOP     EX    R3WORK,TRIN         BLANK OUT CTRL CHARC        @ZA13394
         AH    R6WORK,DCMCORLN     GET NEXT LINE               @ZA13394
         CR    R6WORK,R5KEEP       LAST LINE                   @ZA13394
         BL    LOOP                NO                          @ZA13394
         BR    RERTRN              RETURN TO PGM               @ZA13394
TRIN     TR    N6(0,R6WORK),TRTAB                              @ZA13394
         EJECT
*     CONSTANTS
BLANKS   DC    2C' '               BLANKS
DETAD    DC    X'1DE440'           SF-ATT-DES FOR DETECTION
         DC    C'ENTER   '         DETECTABLE FIELD
         DC    X'1DE440'           SF-ATT-DES FOR DETECTION
         DC    C'CANCEL'           DETECTABLE FIELD
EIGHT    DC    H'8'                COUNT FOR UPDATE CCW PTR
F80      DC    F'80'               LENGTH OF ONE LINE
H6       DC    H'6'                LENGTH OF CONTROL CHAR FIELD
H78      DC    H'78'               LENGTH OF ENT AREA LINE 1
NORMAT   DC    X'1D6040'           NON DETECT FIELD
TRTABLE  DC    X'40C1C2C3C4C5C6C7C8C94A4B4C4D4E4F'
         DC    X'50D1D2D3D4D5D6D7D8D95A5B5C5D5E5F'
         DC    X'6061E2E3E4E5E6E7E8E96A6B6C6D6E6F'
         DC    X'F0F1F2F3F4F5F6F7F8F97A7B7C7D7E7F'
TRTAB    DS    0CL256                                          @ZA13394
         DC    AL1(0)                                          @ZA13394
         DC    AL1(01,02,03,04,64,06,07,08,09,10)              @ZA13394
         DC    AL1(11,12,13,14,15,16,64,64,64,20)              @ZA13394
         DC    AL1(21,22,23,24,25,26,27,28,64,30)              @ZA13394
         DC    AL1(31,32,33,34,35,36,37,38,39,40)              @ZA13394
         DC    AL1(41,42,43,44,45,46,47,48,49,50)              @ZA13394
         DC    AL1(51,52,53,54,55,56,57,58,59,64)              @ZA13394
         DC    AL1(61,62,63,64,65,66,67,68,69,70)              @ZA13394
         DC    AL1(71,72,73,74,75,76,77,78,79,80)              @ZA13394
         DC    AL1(81,82,83,84,85,86,87,88,89,90)              @ZA13394
         DC    AL1(91,92,93,94,95,96,97,98,99,100)             @ZA13394
         DC    AL1(101,102,103,104,105,106,107,108,109,110)    @ZA13394
         DC    AL1(111,112,113,114,115,116,117,118,119,120)    @ZA13394
         DC    AL1(121,122,123,124,125,126,127,128,129,130)    @ZA13394
         DC    AL1(131,132,133,134,135,136,137,138,139,140)    @ZA13394
         DC    AL1(141,142,143,144,145,146,147,148,149,150)    @ZA13394
         DC    AL1(151,152,153,154,155,156,157,158,159,160)    @ZA13394
         DC    AL1(161,162,163,164,165,166,167,168,169,170)    @ZA13394
         DC    AL1(171,172,173,174,175,176,177,178,179,180)    @ZA13394
         DC    AL1(181,182,183,184,185,186,187,188,189,190)    @ZA13394
         DC    AL1(191,192,193,194,195,196,197,198,199,200)    @ZA13394
         DC    AL1(201,202,203,204,205,206,207,208,209,210)    @ZA13394
         DC    AL1(211,212,213,214,215,216,217,218,219,220)    @ZA13394
         DC    AL1(221,222,223,224,225,226,227,228,229,230)    @ZA13394
         DC    AL1(231,232,233,234,235,236,237,238,239,240)    @ZA13394
         DC    AL1(241,242,243,244,245,246,247,248,249,250)    @ZA13394
         DC    AL1(251,252,253,254)                            @ZA13394
TREND    DC    AL1(TREND-TRTAB)                                @ZA13394
*        EQUATES
ID1      EQU   C'E'                1ST CHARACTER OF CSECT ID
ID2      EQU   C'V'                2ND CHARACTER OF CSECT ID
ALARM    EQU   X'04'               WCC ALARM BIT
BLANK    EQU   C' '                BLANK
CHAINCOM EQU   X'60'               COMMAND CHAINING FLAG
CHAINDT  EQU   X'A0'               DATA CHAINING FLAG
CLEANIT  EQU   X'3F'               STRIPS LEFT TWO BITS IN BYTE
DIGIT    EQU   X'F0'               ZONE FOR EBCDIC DIGIT
EACHAR   EQU   1681                CHAR POS OF ENTRY AREA
ENTAID   EQU   X'7D'               ENTER AID CHAR
ENTLGN   EQU   164                 LENGTH OF ENTRY AREA WRITE
FRSTLINE EQU   21                  FIRST LINE OF ENTRY AREA
HIGHINT  EQU   X'E8'               ATTRIBUTE HIGH INTENSITY BYTE
LPAID    EQU   X'7E'               SEL. PEN AID CHAR
MOD1LGN  EQU   38                  LENGTH OF MODEL 1 LINE
NODIG    EQU   X'00'               NULL HEX VALUE
NORMINT  EQU   X'60'               ATTRIBUTE NORMAL INTENSITY BYTE
NOTONE   EQU   14                  BRANCH CONDITION
NULL     EQU   X'00'               NULL CHARACTER
N0       EQU   0                   NUMBER
N1       EQU   1                   NUMBER
N2       EQU   2                   NUMBER
N3       EQU   3                   NUMBER
N4       EQU   4                   NUMBER
N6       EQU   6                   NUMBER
N7       EQU   7                   NUMBER
N8       EQU   8                   NUMBER
N20      EQU   20                  NUMBER
N28      EQU   28                  NUMBER
N33      EQU   33                  NUMBER
N34      EQU   34                  NUMBER                     MH Y02159
N55      EQU   55                  NUMBER
N57      EQU   57                  NUMBER
N63      EQU   63                  NUMBER
N65      EQU   65                  NUMBER
N71      EQU   71                  NUMBER
N75      EQU   75                  NUMBER
N83      EQU   83                  NUMBER
N127     EQU   127                 ENTRY AREA CHAR PAST CMD   MH Y02159
N128     EQU   128                 NUMBER                     MH Y02159
N129     EQU   129                 NUMBER
N255     EQU   255                 NUMBER
PFKLGN   EQU   110                 LENGTH OF PFK AREA
READMD   EQU   X'06'               READ MODIFIED COMMAND CODE
RESETMDT EQU   X'01'               WCC RESET MOD DATA TAG
RESTORE  EQU   X'02'               WCC RESTORE KEYBOARD BIT
SECLINE  EQU   22                  SECOND LINE OF ENTRY AREA
SPLAT    EQU   C'*'                CHARACTER
STOP     EQU   X'20'               STOP CCW CODE
STOPPER  EQU   X'64'               NO MORE PFK'S INDICATOR
VALRNG   EQU   X'3F'               VALID RANGE FOR 64 BYTE TABLE
WRITCOD  EQU   X'01'               WRITE CCW COMMAND CODE
ZERO     EQU   C'0'                CHARACTER ZERO
ZEROS    EQU   X'00'               HEX ZEROS
ZONE     EQU   X'F0'               EBCDIC NUMERIC ZONE
         SPACE 5
         TITLE 'IEECVETV   IGC5V07B    3277 I/O 2     RESIDENT DISPLAY *
               CONTROL MODULE'
         IEERDCM
         TITLE 'IEECVETV   IGC5V07B        3277 I/O 2        TRANSIENT *
               DISPLAY CONTROL MODULE'
DCMSTRT  DSECT
         IEECDCM  DEVICE=D
         TITLE 'IEECVETV   IGC5V07B     3277 I/O 2      CXSA'
         IHACTM  CXSA
         TITLE 'IEECVETV   IGC5V07B        3277 I/O 2        UNIT CONTR*
               OL MODULE'
         IEECUCM  FORMAT=NEW
         END
