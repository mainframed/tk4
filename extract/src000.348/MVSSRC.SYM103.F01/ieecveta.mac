         TITLE 'IEECVETA OPTIONS'
IEECVETA CSECT
**********************************************************************
*
*  STATUS    CHANGE LEVEL 0
*
*  FUNCTION    TO EVALUATE THE OPTIONS SELECTED BY THE USER OF A
*            DEVICE, AND DETERMINE WHETHER THEY ARE LEGITIMATE.  IF SO,
*            INDICATORS ARE PASSED TO ALL OTHER ROUTINES AS TO WHAT THE
*            OPTIONS ARE.  IF AN ILLEGAL OPTION OR COMBINATION OF
*            OPTIONS IS ENCOUNTERED, INDICATORS ARE PASSED FOR THE
*            PRINTING OF THE APPROPRIATE ERROR MESSAGE.  THIS ROUTINE
*            ALSO, AT THE USER'S REQUEST, ARRANGES TO HAVE THE PRESENT
*            STATUS OF ALL OPTIONS DISPLAYED.
*
*  ENTRY POINT    CONTROL IS PASSED ONLY THROUGH THE CSECT LABEL,
*               IEECVETA.  THE FIRST EXECUTABLE INSTRUCTION IS LABELED
*               START.
*
*  INPUT    ALL OPERANDS OF ANY K S COMMAND ENTERED ON THE DEVICE BY A
*         USER.  THESE ARE RECEIVED IN EBCDIC IN THE FORMAT IN WHICH
*         THEY APPEAR ON THE SCREEN WHEN ENTERED.
*
*  OUTPUT    THE CURRENT VALUES OF ALL OPTIONS ARE KEPT UP IN THE DCM.
*          WHEN REQUESTED, ALL OF THE OPTIONS AND THEIR VALUES ARE
*          TRANSFERRED INTO A BUFFER AREA, FROM WHICH THEY WILL BE
*          DISPLAYED.
*
* EXTERNAL REFERENCES NONE
*
*  EXITS - NORMAL  IEECVETK TIMER INTERPRETER:  IF THE DISPLAY HAS JUST
*                  GONE INTO OR OUT OF ROLL MODE; OR, IF THE VALUE OF
*                  RTME HAS JUST BEEN CHANGED; OR, IF ALL THE ABOVE AND
*                  THE WARNING MESSAGE IS TO BE DISPLAYED
*                  IEECVETD MESSAGE MODULE 1:  IF A WARNING MESSAGE IS
*                  TO BE DISPLAYED
*                  IEECVETH OR P OR R DEVICE-DEPENDENT IO:  IF NONE OF
*                  THE ABOVE CONDITIONS EXIST
*       - ERROR    IEECVETD MESSAGE MODULE 1
*                  IEECVETK TIMER/INTERPRETER ROUTINE
*
* TABLES/WORK AREAS DISPLAY CONTROL MODULE (CONTAINED IN DSECT)
*                   RESIDENT DISPLAY CONTROL MODULE (CONTAINED   S21002
*                   IN DSECT)                                    S21002
*
* ATTRIBUTES   REFRESHABLE, PRIVILEGED, TYPE 4 SVC
*
* NOTES        THE OPERATION OF THIS MODULE DOES NOT DEPEND UPON A
*              PARTICULAR INTERNAL REPRESENTATION OF THE EXTERNAL
*              CHARACTER SET.
*
**********************************************************************
         EJECT
*/*IEECVETA: CHART */
*/*IEECVETA: E OPTIONS RTN */
*/*START: P ESTABLISH ADDRESSABILITY */
*/* P BASE THE RDCM, TDCM, UCM */
*/* P POINT TO THE COMMAND IN THE DCM */
*/* D (NO,,YES,OREF) IS SECOND CHARACTER A BLANK ? */
*/* D (NO,,YES,OREF) IS OPERAND 'S,REF' ? */
*/*NEXT: D (NO,,YES,OUT) IS OPERAND BLANK ? */
*/* D (NO,,YES,OCON) IS OPERAND ',CON=' ? */
*/* D (NO,,YES,ODEL) IS OPERAND ',DEL=' ? */
*/* D (NO,,YES,OSEG) IS OPERAND ',SEG=' ? */
*/* D (NO,,YES,ORNUM) IS OPERAND ',RNUM=' ? */
*/* D (NO,,YES,ORTME) IS OPERAND ',RTME=' ? */
*/* P POINT EXIT TO INVALID OPERAND */
*/*INVALOP: P INDICATE INVALID OPERAND AND POINT TO IT */
*/*ERRIND: P INDICATE EXIT TO MESSAGE MODULE */
*/* P (,INSRT) POINT TO CURSOR POSITION */
*/*OUT: P INDICATE BLANK ENTRY AREA AND INSTR LINE */
*/* P WRITE ENTRY AREA */
*/* P (,INSRT) INDICATE PUT CURSOR IN POS 1 OF ENTRY AREA */
*/*OREF: P BLANK THE ENTRY AREA */
*/* P INDICATE THIS IS AN OPTIONS MESSAGE */
*/* S UNDO RTN:CONVERT SEG VALUE TO EBCDIC */
*/* S UNDO RTN:CONVERT RNUM VALUE TO EBCDIC */
*/* S UNDO RTN:CONVERT RTME VALUE TO EBCDIC */
*/* P PUT ALL INFO IN ENTRY AREA FOR S,REF */
*/*PUT: P INDICATE WRITE ENTRY AREA */
*/* P SET EXIT TO MESSAGE MODULE */
*/* P SET INSERT CURSOR IN LINE 1 POS 9 */
*/*INSRT: P INDICATE WRITE INSTR LINE AND INSERT CURSOR */
*/* D (NO,,YES,WHERE) NO HARDCOPY BIT ON ? */
*/* D (NO,,YES,WHERE) DEL = R ? */
*/* D (NO,,YES,MORE) DEL = Y ? */
*/*THERE: P INDICATE WRITE WARNING LINE */
*/* P INDICATE BLANK 2ND HALF WARNING LINE */
*/*WHERE: D (NO,,YES,TI) GO TO TIMER INTERPRET RTN ? */
*/* D (NO,,YES,MM) EXIT TO MESSAGE MODULE ? */
*/* P (,XCTL) SET EXIT TO I/O RTN */
*/*MORE: D (NO,THERE,YES,) CON = N ? */
*/* P SET EXIT TO MESSAGE MODULE */
*/* P (,WHERE) DISPLAY WARNING CON=N,DEL=Y MESSAGE */
*/*TI: P (,XCTL) SET EXIT TO TIMER INTER RTN */
*/*MM: P RESET EXIT TO MSG MOD BIT */
*/* P PUT MSG MOD NAME IN XCTL LIST */
*/*XCTL: R EXIT TO PROPER MODULE */
*/*OCON: D (NO,NCON,YES,) CON = Y IN COMMAND ? */
*/* P (,MCON) INDICATE THAT FACT IN DCM */
*/*NCON: D (NO,INVALOP,YES,) CON = N IN COMMAND ? */
*/* D (NO,,YES,ERRHARD) IS NO HARD COPY BIT ON ? */
*/* P INDICATE CON = N IN DCM */
*/*MCON: P (,NEXT) PUT CON VALUE (Y OR N) IN DCM */
*/*ODEL: D (NO,NDEL,YES,) DEL = Y IN COMMAND ? */
*/* D (NO,,YES,ERRHARD) IS NO HARD COPY FLAG SET ? */
*/* P (,YN) INDICATE DEL = Y IN DCM */
*/*NDEL: D (NO,RDEL,YES,) DEL = N IN COMMAND */
*/* P RESET DEL = Y FLAG */
*/*YN: D (NO,SAME,YES,) DEL MODE = R/RD ? */
*/* P SET EXIT TO TIMER INT RTN */
*/*SAME: P INDICATE BLANK LEFT HALF WARN LINE AND WRITE SAME */
*/* P TURN OFF ROLL MODE AND MSG FLAGS */
*/*MDEL: P (,NEXT) SET DEL OPTION TO CORRECT STATE */
*/*RDEL: D (NO,INVALOP,YES,) DEL = R IN COMMAND */
*/* P INDICATE THAT IN THE DCM */
*/* D (NO,,YES,ERRHARD) NO HARD COPY FLAG SET ? */
*/* P SET EXIT TO TIMER INTER RTN */
*/*NOCH: D (NO,NOCH0,YES,) IS UNVIEWABLE MSG ON SCREEN ? */
*/* P INDICATE REMOVE MESSAGE */
*/*NOCH0: D (NO,NOTFUL,YES,) IS SCREEN FULL ? */
*/* P TURN OFF FLAG */
*/*NOCH1: P INDICATE REMOVE MSG WAITING MSG */
*/*NOTFUL: D (NO,MDEL,YES,) HAS D BEEN SPECIFIED ? */
*/* P (,NEXT) INDICATE SO IN DCM */
*/*ERRHARD: P (,ERRIND) INDICATE PUT OUT NO HARD COPY MSG */
*/*OSEG: S NUM RTN: CONVERT SEG VALUE TO BINARY */
*/* D (NO,,YES,INVALOP) DOES NEW SEG EXCEED MAX ? */
*/* D (NO,,YES,OFF) NEW SEG = 0 ? */
*/* P (,IN) INDICATE THAT IN DCM */
*/*OFF: P INDICATE THAT IN DCM */
*/*IN: P (,NEXT) PUT SEG VALUE IN DCM */
*/*ORNUM: S NUM RTN:CONVERT RNUM VALUE TO BINARY */
*/* D (NO,,YES,INVALOP) DOES RNUM EXCEED MAX ? */
*/* D (NO,,YES,INVALOP) IS RNUM = 0 ? */
*/* P (,NEXT) HOLD NEW VALUE */
*/*ORTME: S NUM RTN:CONVERT RTME VALUE TO BINARY */
*/* D (NO,,YES,INVALOP) IS RTME = 0 ? */
*/* P (,NEXT) HOLD NEW VALUE IN DCM */
*/*NUM: E NUMBER CONVERT RTN */
*/* P FIND END OF NUMBER */
*/* D (NO,,YES,INVALOP) NUMBER LESS THAT 0 ? */
*/* P CONVERT NUMBER TO BINARY */
*/* R BR 14 */
*/*UNDO: E NUMBER UNCONVERT RTN */
*/* P CONVERT NUMBER TO EBCDIC */
*/* R BR 14 */
*/*IEECVETA: END */
         EJECT
START    LR    BASERA,RF           ESTABLISH ADDRESSIBILITY
         USING START,BASERA
         B     BEGIN               BRANCH AROUND PATCH AREA
ICATCH   DC    CL72'IEECVETA'      EYECATCHER AND FIELD MAINTENANCE
BEGIN    EQU   *                   END OF PATCH AREA
         LR    CXSARB,R1           ESTABLISH CXSA ADDRESS
         USING CXSA,CXSARB
         L     UCMERC,CSAUCM       ESTABLISH UCM ADDRESS
         USING UCMLIST,UCMERC
         L     RRDCM,UCMXB         ESTABLISH RDCM                S21003
         USING DCMTSRT,RRDCM          ESTABLISH ADDRESSABILITY
         L     DCMR9,Z(RRDCM)      ESTABLISH TDCM                S21003
         USING DCMSTRT,DCMR9
         L     UCMR7,CSACTLM       ESTABLISH UCM BASE REG
         USING UCM,UCMR7           ESTABLISH UCM BASE
         MVC   DCMTRACE(DCMTRLEN),DCMTRAC2 SHIFT OLD TRACE ENTRIES
         MVI   DCMTREN1,ID1        PUT CSECT ID INTO
         MVI   DCMTREN2,ID2        NEW TRACE ENTRY
         L     ENTR2,DCMAENTR      ADDRESS OF DCMENTRY
         L     OPR3,DCMADOPN       ADDR OF OPERAND IN DCMENTRY
*     THIS ROUTINE WILL TEST WHICH OPTION HAS BEEN SPECIFIED
         CLI   I(OPR3),BLANK       IS SECOND CHAR BLANK
         BE    OREF                IF SO, DEFAULT = S,REF
         CLC   I(V,OPR3),CREF      IS OPERAND S,REF
         BE    OREF                YES
         LA    OPR3,I(OPR3)
         LA    RF,NUM              RTN TO WHICH NUMERICAL OPS BALR
NEXT     EQU   *
         CLI   Z(OPR3),BLANK       IS OPERAND BLANK
         BE    OUT                 IF SO, GO TO EXIT RTN
         LA    R1,V(OPR3)          THIS POINTS R1 TO A POSSIBLE INVALID
*     VALUE OF CON OR DEL.  FOR OTHER OPS, ANOTHER ADDR WILL GO IN R1.
         CLC   Z(V,OPR3),CCON      IS OPERAND ,CON=
         BE    OCON                YES
         CLC   Z(V,OPR3),CDEL      IS OPERAND ,DEL=
         BE    ODEL                YES
         CLC   Z(V,OPR3),CSEG      IS OPERAND ,SEG=
         BE    OSEG                YES
         CLC   Z(VI,OPR3),CRNUM    IS OPERAND ,RNUM=
         BE    ORNUM               YES
         CLC   Z(VI,OPR3),CRTME    IS OPERAND ,RTME=
         BE    ORTME               YES
         LA    R1,I(OPR3)          NOW POINT R1 TO INVALID OP
*     UPON BRANCH HERE, R1 ALWAYS POINTS TO INVALID OPERAND
INVALOP  EQU   *
         ST    R1,DCMDSAV          MOVE IN ADDR OF INVALID OP
         OI    DCMCMSG2,DCMINVOP   INVALID OP MSG BIT
ERRIND   EQU   *
         OI    DCMTIMES,DCMOTTMM   OPT OR TI SHOULD EXIT TO MM
         BCTR  ENTR2,R0            SUBTRACT ONE TO GET POSITION
         SR    R1,ENTR2            POS OF OP IN ENTRY AREA
         CH    R1,DCMLGNTH         OP ON SECOND LINE
         BL    ONE                 NO
         MVI   DCMCULNO,II         LINE TWO
         SH    R1,DCMLGNTH
         STC   R1,DCMPOSCU         STORE CURSOR POSITION
         B     INSRT               INSERT CURSOR
ONE      MVI   DCMCULNO,I          LINE ONE
         STC   R1,DCMPOSCU         STORE CURSOR POSITION
         B     INSRT               INSERT CURSOR
OUT      EQU   *
         OI    DCMIOCM2,BLENTINS   BLANK ENTRY AREA AND INST LINE BITS
         OI    DCMIOCM1,DCMWRENT   WRITE ENTRY AREA BIT
         MVI   DCMCULNO,I          LINE ONE
         MVI   DCMPOSCU,I            AND POS ONE FOR CURSOR
         B     INSRT               INSERT CURSOR
OREF     EQU   *
         MVI   Z(ENTR2),BLANK
         MVC   I(CXXV,ENTR2),Z(ENTR2)  BLANK ENTRY AREA
         OI    DCMCMSG1,DCMCHOPT   OPTIONS MSG BIT
         MVC   Z(XL,ENTR2),SCOMMAND   MOVE SKELETON LINE         S21002
         MVC   VIII(II,ENTR2),DCMDEL    VALUE OF DEL
         MVC   XXII(I,ENTR2),DCMCON     VALUE OF CON
         XR    R6,R6
         LA    RF,UNDO
         IC    R6,DCMSEG                     BINARY VALUE OF SEG
         BALR  RE,RF                         TO CONVERT TO EBCDIC
         MVC   XV(II,ENTR2),DCMPACK+II       VALUE OF SEG
         IC    R6,DCMRNUM                    BINARY VALUE OF RNUM
         BALR  RE,RF                         TO CONVERT TO EBCDIC
         MVC   XXIX(II,ENTR2),DCMPACK+II   VALUE OF RNUM         S21002
         LH    R6,DCMRTME                    BINARY VALUE OF RTME
         BALR  RE,RF                         TO CONVERT TO EBCDIC
         MVC   XXXVII(III,ENTR2),DCMPACK+I   VALUE OF RTME       S21002
         CLI   IX(ENTR2),BLANK     IS VALUE OF DEL ONE CHAR
         BNE   PUT                 IF NOT, CONTINUE
         MVC   IX(XXXVII,ENTR2),X(ENTR2)     ELSE, MOVE OVER RIGHT PART
PUT      EQU   *
         OI    DCMIOCM1,DCMWRENT   WRITE ENTRY AREA BIT
         OI    DCMTIMES,DCMOTTMM   OPT OR TI SHOULD EXIT TO MM
         MVI   DCMCULNO,I          LINE ONE
         MVI   DCMPOSCU,IX           AND POS NINE FOR CURSOR
INSRT    EQU   *
         OI    DCMIOCM1,WRININSC   WRITE INST LINE AND INSERT CURSOR
         CLI   DCMDEL,CHARR        Q. DEL=R
         BE    WHERE               YES,DEPART
         CLI   DCMDEL,CHARY        Q. DEL=Y
         BE    MORE                YES, TEST FOR CON=N
THERE    EQU   *
         OI    DCMIOCM1,DCMWRWRN   NO, INDICATE WRITE WARNING LINE
         OI    DCMIOCM2,DCMBLWRL   AND BLANK LEFT HALF OF WARNING LINE
WHERE    EQU   *
         TM    DCMTIMES,DCMOPTTI   OPT TO TI BIT SET
         BO    TI                  IF SO, EXIT TO TI RTN
         TM    DCMTIMES,DCMOTTMM   SHOULD RTN EXIT TO MSG MOD
         BO    MM                  IF SO, GO DO IT
         L     XFBRANCH,DCMIORTN   LOAD IO ROUTINE ADDRESS
         L     X1PARM,DCMCXSVE     RESTORE CXSA ADDRESS
         BR    XFBRANCH            EXIT TO IEECVET(H,P,R, OR U)
MORE     EQU   *
         CLI   DCMCON,CHARN        Q. CON=N
         BNE   THERE               NO, GO BLANK WARNING LINE
         OI    DCMTIMES,DCMOTTMM   YES, OPTIONS OR TIMER/INTERPRETER
*                                    SHOULD EXIT TO MESSAGE MODULE
         OI    DCMCMSG1,DCMWRCDL   MOVE IN WARNING CON=N,DEL=Y MESSAGE
         B     WHERE               DEPART
TI       EQU   *
         L     XFBRANCH,DCMNTIMR   LOAD TIMER INTERPRETER ADDRESS
         L     X1PARM,DCMCXSVE     RESTORE CXSA ADDRESS
         BR    XFBRANCH            EXIT TO IEECVETK
MM       EQU   *
         NI    DCMTIMES,OFFOTTMM   TURN OFF EXIT TO MM BIT
         L     XFBRANCH,DCMNMSG1   LOAD MESSAGE 1 ADDRESS
         L     X1PARM,DCMCXSVE     RESTORE CXSA ADDRESS
         BR    XFBRANCH            EXIT TO IEECVETD
OCON     EQU   *
         CLI   V(OPR3),CHARY       CON=Y
         BNE   NCON                NO
         OI    DCMOPTST,DCMOPTVR   CON BIT
         B     MCON                MOVE IN Y
NCON     EQU   *
         CLI   V(OPR3),CHARN       CON=N
         BNE   INVALOP             IT HAD BETTER BE
         NI    DCMOPTST,OFFOPTVR   CON BIT OFF
MCON     EQU   *
         MVC   DCMCON(I),V(OPR3)   MOVE VALUE IN
         LA    OPR3,VI(OPR3)       UPDATE OP PTR
         B     NEXT                HERE WE GO AGAIN
ODEL     EQU   *
         CLI   V(OPR3),CHARY       DEL=Y
         BNE   NDEL                NO
         OI    DCMOPTST,DCMOPTAD   DEL BIT
         B     YN                  FOR YES OR NO
NDEL     EQU   *
         CLI   V(OPR3),CHARN       DEL=N
         BNE   RDEL                NO
         NI    DCMOPTST,OFFOPTAD   DEL BIT OFF
YN       EQU   *
         CLI   DCMDEL,CHARR        IS MODE NOW R OR RD
         BNE   SAME                IF NOT, OK
         OI    DCMTIMES,DCMOPTTI   ELSE, TURN ON OPT TO TI BIT
SAME     EQU   *
         OI    DCMIOCM2,DCMBLWRL   BLANK LEFT HALF WARN LINE BIT
         OI    DCMIOCM1,DCMWRWRN   INDICATE WRITE WARNING LINE
         NI    DCMOPTST,OFFOPRLL   ROLL BIT OFF
         NI    DCMCMSG3,OFFCMRLL   ROLL MODE MSG BIT OFF
         NI    DCMR2FLG,N255-DCMRXUNV  TURN OFF BIT IF ON        S21002
MDEL     EQU   *
         MVC   DCMDEL(I),V(OPR3)   MOVE IN CHAR
         MVI   DCMDEL+I,BLANK      MOVE IN BLANK
         LA    OPR3,VI(OPR3)       UPDATE OP PTR
         B     NEXT                AND AGAIN
RDEL     EQU   *
         CLI   V(OPR3),CHARR       DEL=R
         BNE   INVALOP             NOT ANYTHING
         OI    DCMOPTST,DCMOPRLL   ROLL BIT
         OI    DCMTIMES,DCMOPTTI   ELSE, TURN ON OPT TO TI BIT
         TM    DCMR2FLG,DCMRXSFL   Q. IS SCREEN FULL
         BNO   NOTFUL              NO, LEAVE WARNING LINE AS IS
         OI    DCMIOCM2,DCMBLWRR   INDICATE REMOVE MSG WAITING MSG
NOTFUL   EQU   *
         NI    DCMOPTST,OFFOPTAD   DEL BIT OFF
         OI    DCMTIMES,DCMOTTMM   OPT OR TI SHOULD EXIT TO MM
         OI    DCMCMSG3,DCMCMRLL   ROLL MODE MSG BIT
         CLI   VI(OPR3),CHARD      HAS D BEEN SPECIFIED
         BNE   MDEL                IF NOT, MOVE IN CHAR
         MVC   DCMDEL(II),V(OPR3)       IF SO, DO MORE HERE
         LA    OPR3,VII(OPR3)      UPDATE PTR
         B     NEXT                AND GO BACK
OSEG     EQU   *
         LA    OPR3,V(OPR3)        POINT TO VALUE
         BALR  RE,RF               TO HANDLE VALUE
         CH    R6,DCMMSGAL         DOES VALUE EXCEED MAX
         BH    INVALOP             YES
         LTR   R6,R6               SEG=0
         BZ    OFF                 IF SO, SET BIT OFF
         OI    DCMOPTST,DCMOPTSG   ELSE, TURN BIT ON
         B     IN                  INSERT VALUE
OFF      NI    DCMOPTST,OFFOPTSG   TURN BIT OFF
IN       STC   R6,DCMSEG           STORE VALUE IN
         B     NEXT                FIND NEXT OPERAND
ORNUM    EQU   *
         LA    OPR3,VI(OPR3)       POINT TO VALUE
         BALR  RE,RF               TO HANDLE VALUE
         CH    R6,DCMMSGAL         DOES VALUE EXCEED MAX
         BH    INVALOP             YES
         LTR   R6,R6               RNUM=0
         BZ    INVALOP             IS NOT ALLOWED, SO DEPART
         STC   R6,DCMRNUM          STORE VALUE IN
         B     NEXT                FIND NEXT OPERAND
ORTME    EQU   *
         LA    OPR3,VI(OPR3)       POINT TO VALUE
         BALR  RE,RF               TO HANDLE VALUE
         LTR   R6,R6               RTME=0
         BZ    INVALOP             IS NOT ALLOWED, SO DEPART
         STH   R6,DCMRTME          STORE VALUE IN
         OI    DCMTIMES,DCMOPTTI   TURN ON OPT TO TI BIT
         B     NEXT                FIND NEXT OPERAND
NUM      EQU   *
         LR    R1,OPR3             POINT TO OP IN CASE IT IS INVALID
         MVC   DCMCVBIN(III),Z(OPR3)    MOVE IN UP TO THREE DIGITS
         XC    DCMPACK(IV),DCMPACK      ZERO OUT CONVERSION WORD
NDIG     EQU   *
         CLI   Z(OPR3),COMMA
         BE    DO                  IF COMMA HERE
         CLI   Z(OPR3),BLANK
         BE    DO                  IF BLANK HERE
         CLI   Z(OPR3),HF0
         BL    INVALOP             IF LESS THAN 0
         MVC   DCMPACK+I(V),DCMPACK+II       MOVE ONE DIGIT OVER
         LA    OPR3,I(OPR3)        UPDATE OP PTR
         B     NDIG                GO BACK FOR NEXT DIGIT
DO       EQU   *
         CR    OPR3,R1             Q. WAS THERE A NUMBER FOLLOWING OPER
         BE    INVALOP             NO, INVALID OPERAND
         SR    OPR3,R1             GET NUM DIGITS IN OPR3
         CH    OPR3,HW4            IS IT LESS THAN FOUR
         BNL   INVALOP             IF NOT, INVALID OP
         AR    OPR3,R1             ELSE, RESTORE OPR3
         PACK  DCMCVBIN(IV),DCMPACK(IV)      EBCDIC
         XC    DCMPACK(IV),DCMPACK           TO
         CVB   R6,DCMPACK                    BINARY
         BR    RE                            RETURN
UNDO     EQU   *
         CVD   R6,DCMPACK                    BINARY
         UNPK  DCMPACK(IV),DCMCVBIN(IV)      TO
         OI    DCMPACK+III,HF0               EBCDIC
         BR    RE                            RETURN
         EJECT
**********************************************************************
*
*        CONSTANTS
*
**********************************************************************
         SPACE 1
HW4      DC    H'4'                VALUE
SCOMMAND DC    C'K S'              K S COMMAND
CDEL     DC    C',DEL=  '          DEL OPERAND
CSEG     DC    C',SEG=  '          SEG OPERAND
CCON     DC    C',CON= '           CON OPERAND
CRNUM    DC    C',RNUM=  '         RNUM OPERAND
CRTME    DC    C',RTME='           RTME OPERAND
CREF     DC    C',REF '            REF OPERAND
         SPACE 3
**********************************************************************
*
*        REGISTER EQUATE STATEMENTS
*
**********************************************************************
         SPACE 1
R0       EQU   0                   REGISTER 0
R1       EQU   1                   REGISTER 1
ENTR2    EQU   2                   ADDRESS OF DCMENTRY
OPR3     EQU   3                   OPERAND PTR REG
RRDCM    EQU   5                   R DCM BASE REGISTER
R6       EQU   6                   REGISTER 6
UCMR7    EQU   7                   UCM BASE REG
UCMPR8   EQU   8                   UCM PREFIX BASE REG
DCMR9    EQU   9                   DCM BASE REG
BASERA   EQU   10                  MODULE BASE REG
CXSARB   EQU   11                  CXSA BASE REG
UCMERC   EQU   12                  UCM ENTRY BASE REG
RE       EQU   14                  REGISTER 14
RF       EQU   15                  REGISTER 15
X1PARM   EQU   1
XFBRANCH EQU   15
         EJECT
**********************************************************************
*
*        EQUATE STATEMENTS
*
**********************************************************************
         SPACE 1
ID1      EQU   C'E'                1ST CHARACTER OF CSECT ID
ID2      EQU   C'A'                2ND CHARACTER OF CSECT ID
BLANK    EQU   X'40'               CHARACTER BLANK
CHARD    EQU   C'D'                CHARACTER
CHARN    EQU   C'N'                CHARACTER
CHARR    EQU   C'R'                CHARACTER
CHARY    EQU   C'Y'                CHARACTER
COMMA    EQU   C','                CHARACTER
HF0      EQU   X'F0'               FOR EBCDIC DIGIT
Z        EQU   0                   NUMBER
I        EQU   1                   NUMBER
II       EQU   2                   NUMBER
III      EQU   3                   NUMBER
IV       EQU   4                   NUMBER
V        EQU   5                   NUMBER
VI       EQU   6                   NUMBER
VII      EQU   7                   NUMBER
VIII     EQU   8                   NUMBER
IX       EQU   9                   NUMBER
X        EQU   10                  NUMBER
XV       EQU   15                  NUMBER
XXII     EQU   22                  NUMBER
XXIX     EQU   29                  NUMBER                         21002
XXXVII   EQU   37                  NUMBER
XL       EQU   40                  NUMBER                         21002
CXXV     EQU   125                 NUMBER
N255     EQU   255                 MASK TO TURN BITS OFF         S21002
         EJECT
**********************************************************************
*
*        DSECTS
*
**********************************************************************
         IEERDCM
         EJECT
         IEETDCM
         EJECT
         IEECUCM  FORMAT=NEW
         EJECT
         IHACTM  CXSA
*   EXTRA EQUATES FOR BIT SETTINGS
BLENTINS EQU   DCMBLENT+DCMINSSH   TO TURN TWO BITS ON
OFFBLWRL EQU   255-DCMBLWRL        TO TURN BIT OFF
OFFCMRLL EQU   255-DCMCMRLL        TO TURN BIT OFF
OFFOPRLL EQU   255-DCMOPRLL        TO TURN BIT OFF
OFFOPTAD EQU   255-DCMOPTAD        TO TURN BIT OFF
OFFOPTSG EQU   255-DCMOPTSG        TO TURN BIT OFF
OFFOPTVR EQU   255-DCMOPTVR        TO TURN BIT OFF
OFFOTTMM EQU   255-DCMOTTMM        TO TURN BIT OFF
WRININSC EQU   DCMWRINS+DCMINSC    TO TURN TWO BITS ON
         EJECT
         END
