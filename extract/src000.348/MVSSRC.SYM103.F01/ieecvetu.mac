* /* START OF SPECIFICATIONS ****
*02*  PROCESSOR = ASSEMBLER;
**** END OF SPECIFICATIONS ***/
         TITLE 'IEECVETU IGC5U07B 3277 I/O 1'
IEECVETU CSECT
*A131600,131700,131800                                        MH Y02132
*D133500                                                      MH Y02132
*A157100                                                      MH Y01563
*/*IEECVETU: CHART */
*/* HEADER
*/*       CHART ??     IEECVETU     IGC5U07B          3277 I/O ROUTI
*/*NE 1                                                  PAGE #     */
*/* E IEECVETU */
* STATUS
*    CHANGE LEVEL 0.015
*
* FUNCTION
*    THIS IS A DEVICE DEPENDENT ROUTINE TO PERMORM THE REQUESTED I/O IN
*    PROPER SCREEN FORMAT.
*
* ENTRY POINTS
*         IEECVETU FOR ALL FUNCTIONS
*
* OPERATION
*    THE COMMUNICATION BYTES IN THE DCM ARE CHECKED AGAINST
*    PRE-ESTABLISHED BIT SETTINGS TO DETERMINE WHICH TYPE/FORMAT OF
*    I/O IS TO BE PERFORMED. EACH POSSIBLE REQUEST IS CHECKED AND, IF
*    APPLICABLE, THE APPROPRIATE CCWS ARE BUILT UNTIL ALL OF THE
*    DESIRED I/O REQUESTS ARE SET UP IN THE CHANNEL PROGRAM. THEY MAY
*    BE TO: BLANK THE ENTRY AREA, BLANK THE WARNING LINE, INITIALIZE
*    THE INSTRUCTION LINE, READ THE ENTRY AREA, WRITE 'MESSAGES
*    WAITING', RESTORE THE KEYBOARD. A TEST IS THEN MADE
*    TO DETERMINE IF ANY WORK NEEDS TO BE DONE BY 3277 I/O 2.
*    IF SO, AN XCTL IS TAKEN TO IEECVETV TO COMPLETE CCW BUILDING.
*    IF NOT AN EXCP IS ISSUED AND CONTROL IS RETURNED TO PROCESSOR
*    1 (IEECVET1).
*
* INPUT
*    THE INDICATION OF THE DESIRED I/O IS RECEIVED IN I/O
*    COMMUNICATION BYTES 2 AND 3 IN THE DISPLAY CONTROL MODULE.
*
* OUTPUT
*    WRITING OF WHAT IS REQUESTED BY THE OTHER MODULES.
*
* EXTERNAL REFERENCES
*         NONE.
*
* EXITS, NORMAL
*         IEECVET1 PROCESSOR 1 WHEN WORK IS COMPLETE.
*         IEECVETV 3277 I/O 1 WHEN MORE CCWS ARE TO BE BUILT.
*         IEECVETF L/P CURSOR ON A LIGHT PEN DETECT OR ENTER
*                             WITH CURSOR OUTSIDE THE ENTRY AREA.
*         IEECVFTG CLEANUP ON A STATUS SWITCH.
*
* EXITS, ERROR
*         NONE.
*
* TABLES/WORK AREAS
*    DISPLAY CONTROL MODULE (CONTAINED IN DSECT AT END OF LISTING).
*
* ATTRIBUTES
*    REFRESHABLE, PRIVILEGED, TYPE 4 SVC.
*
* CHARACTER CODE DEPENDENCY
*    NONE.
*
* NOTES
*    THE FOLLOWING FLAG BITS ARE USED:
*       THE ACTION COLUMN INDICATES WHETHER THE BIT IS TURNED ON, OFF
*       OR JUST TESTED BY THIS MODULE.
*
*         NAME         ACTION                 FUNCTION
*
*        DCMCOM1
*         DCMIOPRD      ON         READ HAS BEEN PERFORMED
*        DCMIOCM2
*         DCMBLENT   OFF/TEST      BLANK ENTRY AREA
*         DCMBLWRL   OFF/TEST      BLANK LEFT HALF WARNING LINE
*         DCMBLWRR   OFF/TEST      BLANK RIGHT HALF WARNING LINE
*         DCMINSSH   OFF/TEST      INITIALIZE INSTRUCTION LINE
*         DCMWINFD   OFF/TEST      WRITE INFORMATION DISPLAY
*         DCMERASE   OFF/TEST      ERASE SCREEN
*         DCMIOCRD   OFF/TEST      READ ENTRY AREA
*         DCMWRASY   OFF/TEST      WRITE ASYNCHRONOUS ERROR MESSAGE
*        DCMIOCM3
*         DCMWRPFK   OFF/TEST      ALTER PFK LINE
*         DCMLTPFK   OFF/TEST      LIGHT ALLOCATED PFKS
*         DCMACPFK   OFF/TEST      EXTINGUISH PFKS
*         DCMSSRG    OFF/TEST      SUPPRESS REGENERATION
*        DCMIOUNQ
*         DCMINERR    OFF          ERROR INSTRUCTION LINE
*         DCMINNOR     ON          NORMAL INSTRUCTION LINE
*        DCMUTILT
*         DCMUTILB    ON/TEST      WRITE CCW EXISTS
***********************************************************************
  EJECT
*             REGISTER EQUATES
***********************************************************************
X1PARM   EQU   1
XERTRN   EQU   14
XFBRANCH EQU   15
R1PARM   EQU   1                   PARAMETER REGISTER
R2COMP   EQU   2                   COMPENSATION REG
R3WORK   EQU   3                   WORK REGISTER
R3RMSGAL EQU   3                   STATUS SW WORK REG
R4WORK   EQU   4                   WORK REGISTER
R4ADDRL  EQU   4                   STATUS SW WORK REG
R5KEEP   EQU   5                   WORK REGISTER
R5WTINT  EQU   5                   STATUS SW WORK REG
R6WRTSUB EQU   6                   SUBROUTINE POINTER
R6LSCRN  EQU   6                   STATUS SW WORK REG
R7DCMENT EQU   7                   DCM ENTRY BASE REGISTER
R8CHPGM  EQU   8                   POINTER TO CHANNEL PROGRAM AREA
RADCMBAS EQU   10                  TRANSIENT DCM BASE REGISTER
RBBASE   EQU   11                  PROGRAM BASE REGISTER
RCCXSA   EQU   12                  CXSA BASE REGISTER
RDUCMENT EQU   13                  UCMENTRY BASE REGISTER
RERTRN   EQU   14                  WORK REGISTER
RFRESBAS EQU   15                  RESIDENT DCM BASE
         EJECT
START    BALR  RBBASE,N0           SET UP
         USING *,RBBASE            ADDRESSABILITY
         B     ICATCH              BRANCH AROUND EYECATCHER
         DC    C'15 MODULE IGC5U07B, FICHE IEECVETU  ' EYECATCHER AND
ZAPAREA  DC    12C'ZAP'      RESERVED FOR FIELD MODIFICATION
ICATCH   LR    RCCXSA,R1PARM       SAVE CXSA BASE
         USING CXSA,RCCXSA         DECLARE CXSA ADDRESS
         L     RDUCMENT,CSAUCM     GET UCM ENTRY ADDRESS
         USING UCMLIST,RDUCMENT    DECLARE UCMENTRY BASE
         L     RFRESBAS,UCMXB      GET DCM POINTER
         USING DCMTSRT,RFRESBAS
         L     RADCMBAS,DCMADTRN   GET BASE FOR TRANSIENT DCM
         USING DCMSTRT,RADCMBAS      DECLARE DCM BASE
         L     R7DCMENT,DCMAENTR   GET DCM ENTRY POINTER
         USING DCMENTRY,R7DCMENT   DECLARE BASE
         MVC   DCMTRACE(DCMTRLEN),DCMTRAC2 SHIFT OLD TRACE ENTRIES
         MVI   DCMTREN1,ID1        PUT CSECT ID INTO
         MVI   DCMTREN2,ID2        NEW TRACE ENTRY
         LR    R3WORK,XFBRANCH
         L     XFBRANCH,CSAXC      ADDRESS FREELOCK SUBROUTINE
         LR    X1PARM,RCCXSA       PASS CXSA ADDRESS IN REG 1
         BALR  XERTRN,XFBRANCH     RELEASE LOCKS
         LR    XFBRANCH,R3WORK
TOP      EQU   *
         NI    DCMUTILT,N0         CLEAR UTILITY FLAGS
         EJECT
*/*%START: P               CLEAR CHANNEL PROGRAM AREA */
************************************************************
         MVI   DCMCHPGM,N0         ZERO CHANNEL PROG AREA
         MVC   DCMCHPGM+N1(N95),DCMCHPGM   ZERO CHANNEL PROG. AREA
         MVI   DCMWCC,N0           CLEAR THE WCC
         LA    R8CHPGM,DCMCCWS     POINT TO CHANNEL PROGRAM
         MVC   N8(N8,R8CHPGM),N0(R8CHPGM)     RESTORE SELECT CCW
         LA    R8CHPGM,N16(R8CHPGM) POINT PAST SELECT CCW
         SPACE 5
*/* D (YES,,NO,TESTOUT)        IS STATUS SWITCH REQUIRED? */
************************************************************
         TM    DCMR3FLG,DCMSTSWT   IS STATUS SWITCH REQUIRED
         BNO   TESTOUT              NO, TEST NEXT FUNCTION
         SPACE 5
*/*TEST2: D (NO,TESTEXIT,YES,TYPE)   IS REOPEN BIT ON? */
************************************************************
TEST2    TM    DCMCS,DCMCSO        IS REOPEN BIT ON
         BNO   TESTEXIT             NO, TEST FOR SECOND PASS
         SPACE 5
*/*TYPE: D (YES,,NO,REOP)  IS THIS A MODEL 2 */
************************************************************
TYPE     CLI   DCMLGNTH+N1,MOD2LGN  YES, IS THIS A MODEL 2
         BNE   REOP                  NO, DON'T MODIFY DCM
         SPACE 5
*/* D (NO,OUTONLY,YES,)       CHANGING TO FULL CAPABIL? */
************************************************************
         TM    UCMDISP,UCMDISPE    ARE WE CHANGING TO FULL CAPACITY
         BNO   OUTONLY              NO, SET PARAMETERS
         SPACE 5
*/* P (,COMMON)   SET UP FULL CAPABILITY PARAMETERS */
************************************************************
         LA    R3RMSGAL,N19         YES, SET PARMS FOR FULL CAP
         LA    R4ADDRL,DCMMSG19    LAST MESSAGE LINE SCT
         LA    R5WTINT,DCMBLNK1    LAST MESSAGE LINE + 1
         LA    R6LSCRN,DCMMLAST    LAST LINE ON SCREEN
         MVI   DCMSEC20,DCMSECST    STOP SECONDARY SCT
         MVC   DCMENTRY-N3(N3),INENT       MODIFY ATT-DES FOR
*                                   FULL CAP OPERATION
         MVI   DCMPFKAR,DIGIT      MAKE PFK LINE LOOK FULL
         B     COMMON              GO TO INSERT VALUES
         SPACE 5
*/*OUTONLY: P (,COMMON) SET UP OUTPUT ONLY PARAMETERS */
************************************************************
OUTONLY  LA    R3RMSGAL,N23        NUMBER OF MESSAGE LINES
         LA    R4ADDRL,DCMMSG23    LAST MESSAGE LINE
         LA    R5WTINT,DCMWARN     LAST MESSAGE LINE + 1
         LA    R6LSCRN,DCMENTR2    LAST LINE ON SCREEN
         MVI   DCMSEC23+N1,DCMSECST STOP SECONDARY SCT
         MVI   DCMSEC20,N0         REMOVE OLD STOPPER
         MVI   DCMMSG20,N0         REMOVE OLD SCT STOPPER
         MVI   DCMINSTR-N2,DETECT  MAKE OLD INST LINE DETECTABLE
         MVC   DCMPFKAR(N6),SKELETON   INSERT ORDERS IN
         MVC   DCMENTR2-N6(N6),SKELETON    SPECIAL LINES
         MVC   DCMPFKAR+N1(N2),PFKADDR    PLUG ADDRESSES
         MVC   DCMENTR2-N5(N2),ENT2ADDR    INTO SKELETONS
         MVC   DCMENTRY-N3(N3),DCMENTR2-N3 DUP SF-ATT-DES
         SPACE 5
*/*COMMON:  P PUT PARAMETERS IN DCM */
************************************************************
COMMON   STH   R3RMSGAL,DCMMSGAL   UPDATE NUMBER OF MSG LINES
         MVC   DCMRMSAL(N2),DCMMSGAL       IN BOTH DCMS
         ST    R4ADDRL,DCMADDRL    UPDATE ADDR OF LAST SCT
         ST    R5WTINT,DCMWTINT    UPDATE END OF FULL SCREEN WRITE
         ST    R6LSCRN,DCMLSCRN    UPDATE LAST MESSAGE LINE
         MVI   N2(R4ADDRL),DCMMSGST  STOP SCT TABLE
         SPACE 5
*/*REOP: P INDICATE REOPEN AND SECOND PASS */
************************************************************
REOP     OI    DCMCS,DCMCSO        INDICATE REOPEN
         OI    DCMFLG1,DCMOUTPT    INDICATE SECOND PASS
         SPACE 5
*/*CLNEXIT: P (,EXIT) SET EXIT TO CLEANUP (IEECVFTG) */
************************************************************
CLNEXIT  L     XFBRANCH,DCMNCLN    LOAD CLEANUP ROUTINE ADDRESS
         B     EXIT                EXIT TO IEECVFTG
         SPACE 5
*/*TESTEXIT: D (NO,TYPE,YES,) IS THIS SECOND PASS? */
************************************************************
TESTEXIT TM    DCMFLG1,DCMOUTPT    IS THIS SECOND PASS
         BNO   TYPE                 NO, MODIFY DCM
         SPACE 5
*/*SWTCHOFF: P TURN OFF STATUS SWITCH AND SECOND PASS FLAGS */
************************************************************
SWTCHOFF NI    DCMR3FLG,X'FF'-DCMSTSWT  TURN OFF STATUS SWITCH BIT
         NI    DCMFLG1,X'FF'-DCMOUTPT   TURN OFF SECOND PASS SWITCH
         OI    DCMIOCM3,DCMWRPFK    FORCE PFK LINE WRITE
         SPACE 5
*/* D (NO,%START,YES,TIMEXIT) IS CONSOLE NOW MESSAGE STREAM? */
************************************************************
         TM    UCMDISP,UCMDISPF    IS IT NOW MESSAGE STREAM
         BNO   TOP                 NO, GO BACK TO DO I/O
         SPACE 5
*/*TIMEXIT: P SET UP ROLL DELETE MODE */
************************************************************
TIMEXIT  MVC   DCMDEL(N2),RD       FORCE ROLL DELETE MODE
         OI    DCMOPTST,DCMOPRLL   TURN ON ROLL BIT
         NI    DCMOPTST,X'FF'-DCMOPTAD  AUTO DELETE BIT OFF
         OI    DCMTIMES,DCMOTTMM+DCMOPTTI    GO FROM T/I TO MESG
         OI    DCMCMSG3,DCMCMRLL   WRITE ROLL MODE MESSAGE
         SPACE 5
*/* P (,EXIT) SET EXIT TO TIMER/ INTERPRETER (IEECVETK) */
************************************************************
         L     XFBRANCH,DCMNTIMR   LOAD TIMER INTERPRETER ADDRESS
         B     EXIT                EXIT TO IEECVETK
         SPACE 5
*/*TESTOUT: D (NO,WAITWRT,YES,) IS THIS AN OUTPUT ONLY DEVICE? */
************************************************************
TESTOUT  TM    UCMDISP,UCMDISPD    IS THIS AN OUTPUT ONLY DEVICE
         BNO   WAITWRT              NO, PERFORM ALL FUNCTIONS
         SPACE 5
*/* P CANCEL FUNCTIONS WHICH DO NOT APPLY */
************************************************************
         NI    DCMIOCM1,X'FF'-DCMWRINS-DCMWRENT-DCMINSC  YES, TURN OFF
         NI    DCMIOCM2,X'FF'-DCMBLENT-DCMINSSH-DCMIOCRD-DCMWINFD BITS
         NI    DCMIOCM3,X'FF'-DCMOPRMI-DCMWRPFK  WHICH DO NOT APPLY
         SPACE 5
*/*WAITWRT: D (NO,ENTBLNK,YES,WRITWAIT) ENTRY TO WRITE 'MESSAGES
*/*WAITING'
*/*?*/
************************************************************
WAITWRT  EQU   *
*  NOTE  THE FOLLOWING TEST APPLIES TO THE 3277 MOD 2 ONLY
         TM    DCMCMSG1,DCMMSGWT   SEE IF WRITE WAIT MSG
         BNO   ENTBLNK            NO, TEST NEXT FUNCTION
         SPACE 5
*/*WRITWAIT: P MOVE MSG IN. INDICATE WRITE WARN AND SOUND
*/*ALARM */
************************************************************
WRITWAIT EQU   *
         NI    DCMCMSG1,N255-DCMMSGWT TURN BIT OFF
         CLI   DCMLGNTH+N1,MOD2LGN      IS THIS A MODEL TWO   MH Y02132
         BNE   ENTBLNK              NO, DON'T OUTPUT MESSAGE  MH Y02132
         MVI   DCMWARN+N37,BLANK   MOVE BLANK IN
         MVC   DCMWARN+N38(N40),DCMWARN+N37 PROPAGATE IT
         MVC   DCMWARN+N55(N23),WAITMSG MOVE IN WAIT MSG
         NI    DCMIOCM2,X'FF'-DCMBLWRR DON'T ERASE WARNING LINE
         OI    DCMIOCM1,DCMSOUND+DCMWRWRN   WRITE LINE AND SOUND ALARM
         SPACE 5
*/*ENTBLNK: D (NO,LEFTWARN,YES,BLNKENT)  ENTRY TO BLANK ENTRY AREA? */
***********************************************************
ENTBLNK  EQU   *
         TM    DCMIOCM2,DCMBLENT   BLANK ENTRY AREA
         BNO   LEFTWARN            NO, SEE IF BLANK LEFT HALF WARN LINE
         SPACE 5
*/*BLNKENT: P (,LEFTWARN) BLANK ENTRY AREA IN DCM */
***********************************************************
BLNKENT  EQU   *
         MVI   DCMENTRY,BLANK      BLANK FIRST CHARACTER
         MVC   DCMENTRY+N1(N127),DCMENTRY  BLNK REST OF COM AREA
         MVI   DCMENTRY+N128,NULL  NULL THE NEXT BYTE
         MVC   DCMENTRY+N129(N33),DCMENTRY+N128     AND PROPAGATE IT
* NOTE  THE NULLS ARE NECESSARY TO ALLOW THE USE OF INSERT MODE.
         SPACE 5
*/*LEFTWARN: D (NO,RGHTWARN,YES,WARNLEFT) ENTRY TO BLANK LEFT WARNING
*/*LINE? */
***********************************************************
LEFTWARN EQU   *
         L     R3WORK,DCMAWARN     POINT TO WARNING LINE
         LH    R5KEEP,DCMLGNTH     GET LENGTH OF LINE
         SRL   R5KEEP,N1           DIVIDE BY TWO
         TM    DCMIOCM2,DCMBLWRL   BLANK LEFT HALF WARNING LINE
         BNO   RGHTWARN             NO, SEE IF TO BLANK RIGHT SIDE
         SPACE 5
*/*WARNLEFT: P (,RGHTWARN) BLANK LEFT HALF OF WARNING LINE IN DCM */
***********************************************************
WARNLEFT EQU   *
         BAL   RERTRN,BLANKIT      BLANK LEFT SIDE OF LINE
         SPACE 5
*/*RGHTWARN: D (NO,INSTINIT,YES,WARNRGHT) ENTRY TO BLANK RIGHT WARNING
*/*LINE? */
***********************************************************
RGHTWARN EQU   *
         TM    DCMIOCM2,DCMBLWRR   BLANK RIGHT HALF WARNING LINE
         BNO   INSTINIT             NO, GO TEST FOR NEXT FUNCTION
         SPACE 5
*/*WARNRGHT: P (,INSTINIT) BLANK RIGHT HALF OF WARNING LINE IN DCM */
***********************************************************
WARNRGHT EQU   *
         AR    R3WORK,R5KEEP       ADD 1/2 LGN TO START OF LINE
         BAL   RERTRN,BLANKIT      BLANK RIGHT SIDE OF LINE
         NI    DCMR2FLG,X'FF'-DCMRXUNV     UNV. MSG. NOT ON SCREEN
         NI    DCMCOM3,X'FF'-DCMOLUNV   IN EITHER DCM         MH Y01563
         SPACE 5
*/*INSTINIT: D (NO,READMOD,YES,INITINST) ENTRY TO INIT.
*/*INST. LINE? */
***********************************************************
INSTINIT EQU   *
         TM    DCMIOCM2,DCMINSSH   INITIALIZE INSTRUCTION LINE
         BNO   READMOD              NO, GO TEST FOR NEXT FUNCTION
         SPACE 4
*/*INITINST: P (,READMOD) MOVE INSTRUCTION LINE TEXT TO INSTRUCTION
*/*LINE IN DCM */
***********************************************************
INITINST EQU   *
         MVI   DCMINSTR,BLANK      BLANK FIRST CHAR
         MVC   DCMINSTR+N1(N77),DCMINSTR BLANK REST OF LINE
         MVC   DCMINSTR(N41),INSLMESG MOVE IN MESSAGE
         NI    DCMIOUNQ,X'FF'-DCMINERR ERROR MESG GONE
         OI    DCMIOUNQ,DCMINNOR   INSTRUCTION LINE IS NORMAL
         EJECT
         SPACE 5
*/*READMOD: D (NO,RMIKBD,YES,)  READ MODIFIED? */
************************************************************
READMOD  NI    DCMIOCM2,X'FF'-DCMBLENT-DCMBLWRL-DCMBLWRR-DCMINSSH
*                                  INDICATE BLANKING DONE
         TM    DCMIOCM1,DCMDORMI   WAS READ MODIFIED REQUESTED
         BNO   RMIKBD               NO, TEST NEXT FUNCTION
         SPACE 5
*/* P (,OPENKBD) INDICATE READ MODIFIED PERFORMED */
************************************************************
         OI    DCMCOM1,DCMCOMRM    INDICATE READ MODIFIED PERFORMED
         NI    DCMIOCM1,X'FF'-DCMDORMI  TURN OFF BIT
         OI    DCMIOUNQ,DCMRDARM   FORCE RETURN TO I/O
         B     OPENKBD             GO TO BUILD CCWS
         SPACE 5
*/*RMIKBD: D (NO,READ,YES,RESTIT)   ENTRY TO UNLOCK KEYBOARD? */
************************************************************
RMIKBD   EQU   *
         TM    DCMIOCM3,DCMOPRMI   SEE IF RMI
         BNO   READ                 NO, TEST NEXT FUNCTION
         B     RESTIT               YES, DO IT
         SPACE 5
*/*OPENKBD: P BUILD CCWS FOR READ MODIFIED */
************************************************************
OPENKBD  LA    R6WRTSUB,BUILDCCW   INIT SUBROUTINE POINTER
         LA    R5KEEP,DCMDSAV      POINT TO READ MOD DATA AREA
         LA    R3WORK,N6           PUT SIX BYTES THERE
*                                     (AID-C1-C2-SBA-A1-A2)
         BALR  RERTRN,R6WRTSUB     GO BUILD CCW
         MVI   0(R3WORK),READMD    INSERT READ MODIFIED COMMAND CODE
         MVI   N4(R3WORK),CHAINCOM CHANGE FLAG TO COMMAND CHAIN
         SPACE 5
*/* D (NO,,YES,RESTIT) IS THIS AN OUTPUT ONLY DEVICE? */
************************************************************
         TM    UCMDISP,UCMDISPD     OUTPUT ONLY DEVICE?
         BO    RESTIT                YES, DON'T READ ENTRY AREA
         SPACE 5
*/* P BUILD CCWS TO READ ENTRY AREA */
************************************************************
         LA    R5KEEP,DCMENTRY-N7  POINT TO ENTRY AREA SBA -1
* NOTE  THIS WILL CAUSE THE LAST CHARACTER OF THE INSTRUCTION
*       LINE, WHICH IS ALWAYS A BLANK, TO BE USED AS THE WCC.
         LA    R3WORK,N4           SET BYTE COUNT
         BALR  RERTRN,R6WRTSUB     BUILD THE CCW
         MVI   N4(R3WORK),CHAINCOM CHANGE FLAG TO COMMAND CHAIN
         LA    R3WORK,N6           SET COUNT FOR SKIP
*                                  SKIPPING AID-C1-C2-SF-ATT-DES
         BALR  RERTRN,R6WRTSUB     BUILD THE CCW
         MVI   0(R3WORK),READBUF   CHANGE COMMAND TO READ BUFFER
         MVI   N4(R3WORK),SKIPDAT  SKIP AND CHAIN DATA
         L     R5KEEP,DCMAENTR     POINT TO ENTRY AREA
         LA    R3WORK,N127         LOAD LENGTH OF ENTRY AREA
         BALR  RERTRN,R6WRTSUB     BUILD THE CCW
         MVI   N4(R3WORK),CHAINCOM CHANGE FLAGS TO COMMAND CHAIN
         SPACE 5
*/*RESTIT: P (,WRITES) BUILD CCWS TO RESTORE KEYBOARD */
************************************************************
RESTIT   BAL   RERTRN,WRITECCW     BUILD WRITE CCW
         OI    DCMUTILT,DCMUTILB    INDICATE WRITE CCW EXISTS
         OI    DCMWCC,RESTORE+RESETMDT+VALIDBIT
*               INDICATE KEYBOARD RESTORE AND RESET MDT
*  NOTE  WCC DOES NOT REQUIRE TRANSLATION BECAUSE ONLY ONE
*        VALUE (X'03') IS POSSIBLE WITHIN THIS MODULE.
*        THIS IS COMPATIBLE WITH KATAKANA DEVICES.
         NI    DCMIOCM3,X'FF'-DCMOPRMI  TURN OFF BIT
         SPACE 5
*/*WRITES: D (YES,WRITE,NO,TESTWRT) IS A WRITE CCW NEEDED? */
************************************************************
WRITES   TM    DCMIOCM1,DCMSOUND+DCMWRWRN+DCMWRMSG+DCMWRPAR+DCMWRINS+DC*
               MWRENT+DCMINSC                          IS
         BNZ    WRITE                                   A
         TM    DCMIOCM2,DCMWINFD+DCMERASE+DCMWRASY     WRITE
         BNZ   WRITE                                     CCW
         TM    DCMIOCM3,DCMWRPFK                       NEEDED?
         BNO   TESTWRT             NO, IS I/O NEEDED
         SPACE 5
*/*WRITE: P (,EXIT) SET EXIT TO 3277 I/O 2 (IEECVETV) */
***********************************************************
WRITE    ST    R8CHPGM,DCMDSAV SAVE CCW POINTER
         L     XFBRANCH,VCONIO2    GET SECOND LOAD ADDRESS
         B     EXIT                EXIT TO IEECVETV
         SPACE 5
*/*READ: D (NO,WRITES,YES,) PERFORM READ? */
************************************************************
READ     EQU   *
         TM    DCMIOCM2,DCMIOCRD   PERFORM READ
         BNO   WRITES               NO, TEST NEXT FUNCTION
         NI    DCMIOCM2,X'FF'-DCMIOCRD  TURN OFF BIT
         CLI   DCMDSAV,LPAID       IS THIS A SEL PEN ENTRY
         BE    LIGHT                YES, HANDLE
         CLI   DCMDSAV,ENTAID      IS THIS AN ENTER KEY
         BNE   WRITES               NO, IGNORE IT
         SPACE 5
*/*ENTER: P MOVE DETECT ADDRESS TO INPUT */
************************************************************
ENTER    EQU   *
         MVC   DCMDSAV(N2),DCMDSAV+N1   GET CURSOR POSITION
         LA    R2COMP,N2           ALLOW FOR ATT-DES CHARS
         B     ANREBC              GO CONVERT IT
LIGHT    MVC   DCMDSAV(N2),DCMDSAV+N4   GET DETECT POSITION
         LA    R2COMP,N1           ALLOW FOR ATT CHAR
         SPACE 5
*/*ANREBC: P CONVERT TO LINE/CHAR */
************************************************************
ANREBC   LH    R4WORK,DCMDSAV      GET 3277 ADDRESS
         SRDL  R4WORK,N8           STRIP OFF RIGHT BYTE
         SLL   R5KEEP,N2           REMOVE EXCESS BITS
         SLDL  R4WORK,N26          SPLICE IT BACK TOGETHER
         SRL   R4WORK,N20          ALIGN RESULT WITH NO GARBAGE
         LR    R5KEEP,R4WORK       ALIGN FOR DIVIDE
         SR    R4WORK,R4WORK       CLEAR ANSWER REG
         D     R4WORK,F80          DIVIDE BY LENGTH OF BUFFER LINE
         SR    R4WORK,R2COMP       APPLY COMPENSATION
         STC   R4WORK,DCMDSAV+N1   SAVE CHAR POS IN LINE
         STC   R5KEEP,DCMDSAV      SAVE LINE NUMBER
         SPACE 5
*/* D (YES,ENTRY,NO,) WAS DETECT IN ENTRY AREA? */
************************************************************
*  NOTE  FOLOWING TWO TESTS CAN BE TRUE ON 3277 MOD 2 ONLY.
         CLI   DCMDSAV,FRSTLINE    IS IT PTG TO FIRST LINE OF ENTRY
         BE    ENTRY                YES, HANDLE
         CLI   DCMDSAV,SECLINE     HOW ABOUT SECOND LINE
         BE    ENTRY                YES, HANDLE SAME WAY
         SPACE 5
*/*LPEXIT: P (,EXIT) SET EXIT TO L/P CURSOR ROUTINE (IEECVETF) */
************************************************************
LPEXIT   EQU   *
         L     XFBRANCH,DCMNLPCR   LOAD LIGHT-PEN/CURSOR ADDRESS
         B     EXIT                EXIT TO IEECVETF
         SPACE 5
*/*ENTRY: P (,PROCEXIT) INDICATE READ PERFORMED */
************************************************************
ENTRY    OI    DCMCOM1,DCMIOPRD    INDICATE READ PERFORMED
         B     PROCEXIT            RETURN TO PROCESSOR
         SPACE 5
*/*TESTWRT: D (YES,ENEXCP,NO,PROCEXIT) WAS A WRITE CCW BUILT? */
************************************************************
TESTWRT  TM    DCMUTILT,DCMUTILB    WAS A WRITE CCW BUILT
         BNO   PROCEXIT              NO, RETURN TO PROCESSOR
         SPACE 5
*/*ENEXCP: P (,EXCP) REMOVE CHAIN FLAG FROM LAST CCW */
***********************************************************
ENEXCP   EQU   *
         SH    R8CHPGM,EIGHT       UPDATE CCW POINTER
         MVI   N4(R8CHPGM),STOP    STOP CCW CHAIN
         SPACE 5
*/*EXCP: I (,EXIT) EXCP */
***********************************************************
EXCP     EQU   *
         L     XFBRANCH,CSAXB      OBTAIN LOCKS               JE YM8371
         LR    R1PARM,RCCXSA       COPY CXSA ADDR             JE YM8371
         BALR  RERTRN,XFBRANCH     TO ROUTINE                 JE YM8371
         XC    UCMECB,UCMECB       CLEAR ECB
         OI    UCMSTS,UCMBF        TURN ON BUSY BIT
         L     R3WORK,UCMDCB       GET DCB ADDRESS
         L     XFBRANCH,CSAXC      RELEASE LOCKS              JE YM8371
         LR    R1PARM,RCCXSA       COPY CXSA ADDR             JE YM8371
         BALR  RERTRN,XFBRANCH     TO ROUTINE                 JE YM8371
         L     R1PARM,N28(R3WORK)  GET IOB ADDRESS
         EXCP  (R1PARM)            INITIATE I/O
         SPACE 5
*/*PROCEXIT: P (,EXIT) SET EXIT TO PROCESSOR 1 (IEECVET1) */
***********************************************************
PROCEXIT L     XFBRANCH,DCMNPROC   LOAD PROC 1 ADDRESS
*                                  FOR EXIT TO IEECVET1
         SPACE 5
*/*EXIT: R XCTL */
***********************************************************
EXIT     EQU   *
         L     X1PARM,DCMCXSVE     RESTORE CXSA ADDRESS
         BR    XFBRANCH            EXIT ADDRESS ALREADY SET
         SPACE 5
********** CCW BUILDING SUBROUTINE *****************
WRITECCW EQU   *
         LA    R5KEEP,DCMWCC       POINT TO WCC CHAR
         LA    R3WORK,N1           SET BYTE COUNT
BUILDCCW ST    R5KEEP,N0(R8CHPGM)  SAVE WRITE FROM ADDRESS
         MVI   N0(R8CHPGM),WRITCOD INSERT WRITE CCW CODE
         STH   R3WORK,N6(R8CHPGM)  PUT BYTE COUNT IN
         MVI   N4(R8CHPGM),CHAINDT CHAIN CCW'S
         LR    R3WORK,R8CHPGM      SAVE PTR TO THIS CCW
*                                     FOR CALLER
         LA    R8CHPGM,N8(R8CHPGM) UPDATE CCW POINTER
         BR    RERTRN              RETURN
         SPACE 5
********** BLANKING SUBROUTINE *********************
BLANKIT  MVI   N0(R3WORK),BLANK    BLANK FIRST CHARACTER AND
         BCTR  R5KEEP,N0           REDUCE LENGTH BY ONE
         BCTR  R5KEEP,N0           ONCE MORE FOR EXECUTE
         EX    R5KEEP,BLKEX        PROPAGATE CHARACTER
         LA    R5KEEP,N2(R5KEEP)   RESTORE LENGTH REGISTER
         BR    RERTRN              RETURN TO CALLER
         SPACE 5
**************EXECUTED INSTRUCTION*************
BLKEX    MVC   N1(N0,R3WORK),N0(R3WORK) PROPAGATE CHARACTER
         EJECT
*     CONSTANTS
VCONIO2  DC    V(IEECVETV)         SECOND LOAD ADDRESS
EIGHT    DC    H'8'                COUNT FOR UPDATE CCW PTR
ENT2ADDR DC    X'5B60'             3277 BUFFER ADDR LINE 23
F80      DC    F'80'               LENGTH OF ONE LINE
INENT    DC    X'401DC4'           B-SF-ATT
PFKADDR  DC    X'D7F0'             PFK LINE ADDRESS
SKELETON DC    X'1140401DE440'     SBA-A1-A2-SF-ATT-DES
RD       DC    C'RD'
WAITMSG  DC    C'IEE159E MESSAGE WAITING' MSGS WAITING WARNING
INSLMESG DC    C'IEE152I   '       MESSAGE ID
         DC    X'1DE440'           SF-ATT-DES FOR DETECTION
         DC    C'ENTER   '         DETECTABLE FIELD
         DC    X'1DE440'           SF-ATT-DES FOR DETECTION
         DC    C'CANCEL   '        DETECTABLE FIELD
         DC    X'1DE440'           SF-ATT-DES FOR DETECTION
         DC    C'D C,K'            DETECTABLE FIELD
         EJECT
*        EQUATES
ID1      EQU   C'E'                1ST CHARACTER OF CSECT ID
ID2      EQU   C'U'                2ND CHARACTER OF CSECT ID
BLANK    EQU   X'40'               BLANK
CHAINCOM EQU   X'60'               COMMAND CHAINING FLAG
CHAINDT  EQU   X'A0'               DATA CHAINING FLAG
DETECT   EQU   X'E4'               DETECTABLE ATTRIBUTE
DIGIT    EQU   X'F0'               DECIMAL DIGIT
ENTAID   EQU   X'7D'               ENTER AID CHAR
FRSTLINE EQU   21                  FIRST LINE OF ENTRY AREA
LPAID    EQU   X'7E'               SEL. PEN AID CHAR
MOD2LGN  EQU   78                  VALUE OF DCMLGNTH FOR MODEL 2
NODET    EQU   X'60'               NON-DETECTABLE ATTRIBUTE
NULL     EQU   X'00'               NULL VALUE FOR INSERT MODE HARDWARE
N0       EQU   0                   NUMBER
N1       EQU   1                   NUMBER
N2       EQU   2                   NUMBER
N3       EQU   3                   NUMBER
N4       EQU   4                   NUMBER
N5       EQU   5                   NUMBER
N6       EQU   6                   NUMBER
N7       EQU   7                   NUMBER
N8       EQU   8                   NUMBER
N16      EQU   16                  NUMBER
N19      EQU   19                  NUMBER
N20      EQU   20                  NUMBER
N23      EQU   23                  NUMBER
N26      EQU   26                  NUMBER
N28      EQU   28                  NUMBER
N33      EQU   33                  NUMBER
N37      EQU   37                  NUMBER
N38      EQU   38                  NUMBER
N40      EQU   40                  NUMBER
N41      EQU   41                  NUMBER
N55      EQU   55                  NUMBER
N77      EQU   77                  NUMBER
N95      EQU   95                  NUMBER
N127     EQU   127                 LENGTH OF ENTRY AREA
N128     EQU   128                 NUMBER
N129     EQU   129                 NUMBER
N255     EQU   255                 NUMBER
READBUF  EQU   X'02'               READ BUFFER COMMAND CODE
READMD   EQU   X'06'               READ MODIFIED COMMAND CODE
RESETMDT EQU   X'01'               WCC RESET MOD DATA TAG
RESTORE  EQU   X'02'               WCC RESTORE KEYBOARD BIT
SECLINE  EQU   22                  SECOND LINE OF ENTRY AREA
SKIPDAT  EQU   X'90'               SKIP AND CHAIN DATA FLAGS
STOP     EQU   X'20'               STOP CCW CODE
VALIDBIT EQU   X'C0'               WCC VALID BIT PATTERN WITH X'03'
WRITCOD  EQU   X'01'               WRITE CCW COMMAND CODE
         SPACE 5
*/*IEECVETU: END */
         SPACE 5
         TITLE 'IEECVETU   IGC5U07B    327X I/O 1     RESIDENT DISPLAY *
               CONTROL MODULE'
         IEERDCM
         TITLE 'IEECVETU   IGC5U07B        3277 I/O 1        TRANSIENT *
               DISPLAY CONTROL MODULE'
DCMSTRT  DSECT
         IEECDCM  DEVICE=D
         TITLE 'IEECVETU   IGC5U07B     3277 I/O 1      CXSA'
         IHACTM  CXSA
         TITLE 'IEECVETU   IGC5U07B        3277 I/O 1        UNIT CONTR*
               OL MODULE'
         IEECUCM  FORMAT=NEW
         END
