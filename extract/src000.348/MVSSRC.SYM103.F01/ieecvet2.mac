* /* START OF SPECIFICATIONS ******************************************
*
*01*  MODULE-NAME = IEECVET2
*
*01*  DESCRIPTIVE-NAME = DISPLAY ROUTINE 1
*
*01*  COPYRIGHT = NONE
*
*01*  STATUS = CHANGE LEVEL 1 FOR VS2 RELEASE 3
*
*    APARS FIXED -- OZ00507, OZ02835
*
*01*  FUNCTION = TO ROUTE CONTROL TO THE PROPER ROUTINES TO HANDLE THE
*     OUTPUT OF IN-LINE MESSAGES. ON INTIAL ENTRY, THE LOCATION OF ANY
*     STATUS DISPLAY THAT MAY BE ON THE SCREEN IS DETERMINED AND SAVED
*     FOR USE BY THE OTHER DISPLAY ROUTINES.   INITIAL VALUES ARE ALSO
*     SET FOR THE PARAMETERS  THAT WILL EVENTUALLY BE USED  BY THE I/O
*     ROUTINES TO WRITE THE NEWLY DISPLAYED MESSAGES.
*
*01*  NOTES = LOCAL AND  CROSS-MEMORY  LOCKS ARE OBTAINED ON ENTRY VIA
*     THE GETLOCK SUBROUTINE ADDRESSED IN THE CXSA (CSAXB).
*
*02*    CHARACTER-CODE-DEPENDENCIES = NONE
*
*02*    DEPENDENCIES = NONE
*
*02*    RESTRICTIONS = NONE
*
*02*    REGISTER-CONVENTIONS = SEE REGISTER EQUATES
*
*02*    PATCH-LABEL = ICATCH A DC STATEMENT
*
*01*  MODULE-TYPE = MODULE
*
*02*    PROCESSOR = ASSEMF-370R
*
*02*    MODULE-SIZE = X'178' BYTES
*
*02*    ATTRIBUTES = REENTERABLE
*
*01*  ENTRY-POINT = IEECVET2
*
*02*    PURPOSE = TO ROUTE CONTROL TO OTHER ROUTINES DURING DISPLAY
*       PROCESSING
*
*02*    LINKAGE = BALR
*
*02*    INPUT = REGISTER 1 ADDRESSES THE CXSA
*       SEE ALSO CONTROL BLOCK USAGE
*
*02*    OUTPUT = REGISTER 1 ADDRESSES THE CXSA
*       SEE ALSO CONTROL BLOCK USAGE  AND EXITS
*
*02*    EXIT-NORMAL = IEECVFT2 - DISPLAY ROUTINE 3
*       TO DISPLAY ANY WAITING LINES IF THE SCREEN IS NOT FULL
*
*02*    EXIT-NORMAL = IEECVETH, P, R, OR U - I/O ROUTINE
*       IF ANY INDICATORS ARE SET IN  DCMIOCM1  THAT THERE IS SOMETHING
*       NEW TO BE WRITTEN.
*
*02*    EXIT-NORMAL = IEECVET3 - DISPLAY ROUTINE 2
*       FOR CONSOLES IN ROLL MODE TO SET THE TIMER.
*
*02*    EXIT-NORMAL = IEECVET7 - DELETE ROUTINE 2
*       IF THE SCREEN IS FULL AND DCMIRCTR, THE INTERVENTION REQUIRED
*       MESSAGE COUNT, IS NOT ZERO TO TRY DELETION OF INTERVENTION
*       REQUIRED ACTION MESSAGES IF DELETION HAS NOT BEEN TRIED YET.
*
*02*    EXIT-NORMAL = IEECVET9 - DELETE ROUTINE 4
*       FOR CONSOLES IN AUTO DELETE MODE, IF THE SCREEN IS FULL, IN
*       ORDER TO TRY DELETION OF ANY AUTOMATICALLY DELETABLE MESSAGES
*       IF DELETION HAS NOT BEEN TRIED YET.
*
*02*    EXIT-NORMAL = IEECVETD - MESSAGE ROUTINE 1
*       FOR CONSOLES NOT IN ROLL MODE, TO DISPLAY THE UNVIEWABLE
*       MESSAGE WARNING LINE IF DCMCMSG1, BIT DCMUNMSG REQUESTS IT.
*
*02*    EXIT-NORMAL = IEECVET1 - DIDOCS MAIN PROCESSOR ROUTINE
*       AS AN EXIT WHEN NO FURTHER INDICATION OF DISPLAY PROCESSING
*       WORK CAN BE FOUND.
*
*02*    EXIT-ERROR = NONE
*
*01*  EXTERNAL-REFERENCES = NONE
*
*02*    ROUTINES = GETLOCK SUBROUTINE - DEFINED IN IEECVET1, AND
*       ADDRESSED BY WORD CSAXB OF THE CXSA ON ENTRY.
*
*02*    DATA-SETS = NONE
*
*02*    DATA-AREA = NONE
*
*02*    CONTROL-BLOCKS = CXSA,UCM,WQE,CQE,RDCM,TDCM
*
*01*  TABLES = NONE
*
*01*  MACROS = EXECUTABLE - NONE
*              MAPPING - IHAWQE  WQE DSECT
*                        IHACTM  CXSA DSECT
*                        IEECUCM UCM DSECT
*                        IEERDCM RESIDENT DCM DSECT
*                        IEETDCM PAGEABLE DCM DSECT
*
*01*  CHANGE-ACTIVITY = MODULE REWRITTEN TO REPACKAGE DIDOCS
*     FOR VS2 RELEASE 2. - SUPPORT CODE Y02958.
*
**** END OF SPECIFICATIONS *******************************************/
         TITLE 'IEECVET2 DISPLAY 1'
*/*IEECVET2:     CHART */
*/*              HEADER
*/*          IEECVET2                   DISPLAY 1
*/*           CHART E2           PAGE #    */
*/*      E  IEECVET2 */
IEECVET2 CSECT
*A083520,083540,083560                                        MH Y02140
*C084000                                                      MH Y02140
*        REGISTER EQUATES
*
XFBRANCH EQU   15        BRANCH EXIT TO OTHER ROUTINES
*                        CONTENTS MAY CHANGE FOR SVC CALLS
XERTRN   EQU   14        RETURN BRANCH REG
*                        CONTENTS MAY CHANGE FOR SVC CALLS
XD       EQU   13
XCPBASE  EQU   12        PROGRAM BASE REG
XBTDCM   EQU   11        PAGEABLE DCM BASE REG
XARDCM   EQU   10        RESIDENT DCM BASE REG
X9UCM    EQU   9         UCM BASE REG
X8UCME   EQU   8         UCM ENTRY BASE REG
X7       EQU   7
X6       EQU   6
X5       EQU   5
X4       EQU   4
X3       EQU   3
X2SSCT   EQU   2         SSCT SEARCH REG
X1PARM   EQU   1         CXSA BASE REGISTER
X0ZERO   EQU   0         FOR ZEROING DCM FIELDS
*
**********************************************************************
         EJECT
         SPACE 2
*/*      P                         INITIALIZE BASE REGS */
***********************************************************************
         BALR  XCPBASE,N0          LOAD PROGRAM BASE REGISTER
         USING *,XCPBASE           ESTABLISH PROG ADDRESSABILITY
         B     BEGIN               BRANCH AROUND PATCH AREA
ICATCH   DC    CL8'IEECVET2'      EYECATCHER AND FIELD MAINTENANCE
         DC    CL8'&SYSDATE'       DATE LAST ASSEMBLY
         DC    XL2'5056'           DATE LAST CHANGE         JE @ZA02835
         DC    S(*)
         DC    CL52'ZAPS'          PATCH AREA
BEGIN    EQU   *                   END OF PATCH AREA
         USING UCMLIST,X8UCME      ESTABLISH UCMENTRY ADDRESSABILITY
         USING CXSA,X1PARM         ESTABLISH CXSA ADDRESSABILITY
         USING UCM,X9UCM           ESTABLISH UCM ADDRESSABILITY
         USING DCMTSRT,XARDCM      ESTABLISH R DCM ADDRESSABILITY
         USING DCMSTRT,XBTDCM      ESTABLISH DCM ADDRESS
         L     X8UCME,CSAUCM       ADDRESS UCM ENTRY
         L     X9UCM,CSACTLM       ADDRESS UCM BASE
         L     XARDCM,UCMXB        ADDRESS RESIDENT DCM
         L     XBTDCM,DCMADTRN     ADDRESS PAGEABLE DCM
         MVC   DCMTRACE(DCMTRLEN),DCMTRAC2 SHIFT OLD ENTRIES
         MVI   DCMTREN1,CE         MOVE IN MODULE ID OF
         MVI   DCMTREN2,C2         'E2' FOR IEECVET2
         SPACE 2
*/*      S     GETLOCK:OBTAIN LOCAL AND CROSS MEMORY LOCKS*/
**********************************************************************
         L     XFBRANCH,CSAXB      ADDRESS GETLOCK SUBROUTINE
         BALR  XERTRN,XFBRANCH     OBTAIN LOCKS
         SPACE 2
*/*      D     (NO,,YES,FINISH)    RETURN FROM DISP 3 */
***********************************************************************
*    CHECK IF ENTRY IS FROM DISPLAY 3 MODULE
         TM    DCMCOM3,DCMCDSP3    HAS WORK BEEN DONE
         BO    FINISH              YES--GO MOP UP
         SPACE 2
*/*      P     CLEAR FLAGS AND INITIALIZE I/O PARAMETERS */
***********************************************************************
         MVI   DCMUTILT,N0         ZERO OUT INTERNAL FLAGS
         SR    X0ZERO,X0ZERO       GET REG OF ZEROS
         STH   X0ZERO,DCMBYTCT     ZERO WRITE LENGTH
         MVI   DCMLINEN,N0         ZERO WRITE ADDRESS
         STH   X0ZERO,DCMBADLN     ZERO OUT WRITE BUFFER ADDR
         SPACE 2
*/*      D     (YES,,NO,ZAPITOUT)  DYNAMIC DISPLAY ON SCREEN */
***********************************************************************
         L     X2SSCT,DCMADSEC     GET SSCT ADDR
NEXTSSCT EQU   *
         TM    N0(X2SSCT),DCMSECDD IS DYNAMIC DISPLAY BIT ON
         BO    SAVEDYNM            YES-SAVE AREA ADDR OF LINE
         TM    N0(X2SSCT),DCMSECST IS IT END OF TABLE
         BO    ZAPITOUT            YES-SET PT TO 0
         LA    X2SSCT,N1(X2SSCT)   NO-- PT TO NEXT SSCT ENTRY
         B     NEXTSSCT
         SPACE 2
*/*      P     (,DISPTST) SAVE ADDR OF SCT ENTRY FOR DYN DISP */
***********************************************************************
SAVEDYNM EQU   *
         S     X2SSCT,DCMADSEC       GET DISPLACEMENT FROM START
         MH    X2SSCT,DCMSCTCN       MPY BY SCT ENTRY LENGTH
         A     X2SSCT,DCMAMTAB       ADD START OF SCT TABLE ADDR
         ST    X2SSCT,DCMDSAV+N16    SAVE ADDR FOR LATER
         B     DISPTST
         SPACE 2
*/*ZAPITOUT: P ZERO DYNAMIC DISPLAY SCT ADDRESS  */
***********************************************************************
ZAPITOUT EQU   *
         ST    X0ZERO,DCMDSAV+N16  SET DYNAMIC DISPLAY PT=0
         SPACE 2
*/*DISPTST: D (NO,,YES,DISPTST1) IS SCREEN FULL */
***********************************************************************
DISPTST  EQU   *
         TM    DCMR2FLG,DCMRXSFL   IS SCREEN FULL
         BO    DISPTST1            YES, CONTINUE
         SPACE 2
*/*      R     BRANCH IEECVFT2  */
***********************************************************************
         L     XFBRANCH,DCMNDSP3   LOAD DISPLAY 3 ADDRESS
         BR    XFBRANCH            EXIT TO IEECVFT2
         SPACE 2
DISPTST1 EQU   *
DISPTST3 EQU   *
*   8 LINES DELETED HERE FOR APAR OZ02835
         SPACE 2
*/*NEXTEST: D (YES,,NO,NOAUTO)     DOES DEL EQUAL YES */
***********************************************************************
NEXTEST  EQU   *
         CLI   DCMDEL,Y            IS DEL=Y
         BNE   NOAUTO              NO TEST FOR ROLL MODE
         CLI   DCMRQDEL,BLANK      YES IS A DEL REQUEST PENDING
         BNE   NOAUTO              YES TEST FOR TIMER DEFAULT
         SPACE 2
*/*      D (NO,,YES,MSGMOD) HAS AUTO DELETE BEEN TRIED */
***********************************************************************
         TM    DCMDSTAT,DCMDSAUT   HAS AUTO DEL BEEN TRIED
         BO    MSGMOD              YES WRITE MSG TO SCREEN
         SPACE 2
*/*      R     BRANCH IEECVET9  */
***********************************************************************
         OI    DCMDSTAT,DCMDSAUT   IND AUTO DEL TRIED
         OI    DCMCOM1,DCMCOMAU    IND TRY AUTO DEL
         NI    DCMCMSG1,N255-DCMUNMSG  TURN OFF UNVIEW MSG BIT
         L     XFBRANCH,DCMNDEL4   LOAD DELETE 4 ADDRESS
         BR    XFBRANCH            EXIT TO IEECVET9
         SPACE 2
*/*NOAUTO: D (NO,,YES,ROLLMODE)    ARE WE IN ROLL MODE */
***********************************************************************
NOAUTO   EQU   *
         CLI   DCMDEL,R            ARE WE IN ROLL MODE
         BE    ROLLMODE            YES, TEST FOR PROPER EXIT
         SPACE 2
*/*MSGMOD: D (YES,,NO,IOEXIT) WRITE UNVIEWABLE MESSAGE MESSAGE */
***********************************************************************
MSGMOD   EQU   *                   WRITE WARNING MESSAGE
         TM    DCMCMSG1,DCMUNMSG   UNVIEWABLE MESSAGES
         BNO   IOEXIT              NO,WRITE SCREEN FULL
         SPACE 2
*/*      R     BRANCH IEECVETD  */
***********************************************************************
         L     XFBRANCH,DCMNMSG1   LOAD MESSAGE 1 ADDRESS
         BR    XFBRANCH            EXIT TO IEECVETD
         SPACE 2
*/*ROLLMODE: P TURN ON DCM SET TIMER FLAG */
***********************************************************************
ROLLMODE OI    DCMR2FLG,DCMRXTMR   SET R DCM TIMER FLAG
         CLC   DCMASCRN(N4),DCMWTBUF    DO DISPLAYS FILL SCRN MH Y02140
         BL    REGPROC             NO, GO AHEAD               MH Y02140
         NI    DCMR2FLG,X'FF'-DCMRXTMR  YES, DONT ISSUE STMER MH Y02140
         SPACE 2
*/*      D     (YES,,NO,DISP2)     WAS UNVIEWABLE MSG FLAG ON */
***********************************************************************
REGPROC  TM    DCMCMSG1,DCMUNMSG WAS UNVIEW. MSG BIT TURNED ONMH Y02140
         BNO   DISP2               NO, NOT FROM PROC 1 FOR ROLL
         SPACE 2
*/*      P     SET ON ROLL FLAG FOR T/I ROUTINE */
***********************************************************************
         OI    DCMR2FLG,DCMRXUNV   TURN ON ROLL BIT FOR T-I
         SPACE 2
*/*DISP2: R     BRANCH IEECVET3  */
***********************************************************************
DISP2    EQU   *
         L     XFBRANCH,DCMNDSP2   LOAD DISPLAY 2 ADDRESS
         BR    XFBRANCH            EXIT TO IEECVET3
         SPACE 2
*/*FINISH: D   (NO,,YES,DISPTST1)  IS MESSAGE WAITING */
***********************************************************************
FINISH   EQU   *
         NI    DCMCOM3,N255-DCMCDSP3 TURN OFF WORK DONE FLAG
         TM    DCMCMSG1,DCMMSGWT   Q. IS MSG WAITING
         BO    DISPTST1            YES-
         CLI   DCMIOCM1,N0         ANY I/O TO DO            JE @ZA00507
         BNE   IOEXIT              YES, GO DO IT            JE @ZA00507
         SPACE 2
*/*      D     (NO,,YES,IOEXIT)   ANY I/O TO DO */
*/*      D     (NO,,YES,DISPTST1)   IS SCREEN FULL BIT ON */
***********************************************************************
         TM    DCMR2FLG,DCMRXSFL   IS SCREEN FULL BIT ON
         BO    DISPTST1            YES-
         SPACE 2
*/*      D     (NO,,YES,NEXTEST)   UNVIEWABLE MESSAGE */
***********************************************************************
         TM    DCMCMSG1,DCMUNMSG   IS THERE AN UNVIEWABLE MESSAGE
         BO    NEXTEST             YES CHECK EXIT POSSIBILITIES
         SPACE 2
*/*      D (YES,CHKROLL,NO,FINISH1) CONSOLE IN ROLL MODE */
***********************************************************************
         CLI   DCMDEL,R            CONSOLE IN ROLL MODE
         BNE   FINISH1             NO, READY TO EXIT
         SPACE 2
*/*CHKROLL: D (YES,DISP2,NO,FINISH1) DCM SET TIMER FLAG ON */
***********************************************************************
CHKROLL  EQU   *                   SEE IF SET TIMER NECESSARY
         TM    DCMR2FLG,DCMRXTMR   SET TIMER
         BO    DISP2               YES, GO TO DISPLAY 2
         SPACE 2
*/*FINISH1: D (YES,IOEXIT,NO,AROUND) ANY I/O TO DO */
***********************************************************************
FINISH1  EQU   *                   DETERMINE PROPER EXIT
         CLI   DCMIOCM1,N0         ANY IO TO DO
         BE    AROUND              NO SKIP IO EXIT
         SPACE 2
*/*IOEXIT: R     BRANCH I/O ROUTINE  */
***********************************************************************
IOEXIT   EQU   *
         L     XFBRANCH,DCMIORTN   LOAD IO ROUTINE ADDRESS
         BR    XFBRANCH            EXIT TO IEECVET(H,P,R, OR U)
         SPACE 2
*/*AROUND: D   (NO,,YES,DISPTST3) ANY INT REQ MESSAGES ON SCREEN */
AROUND   EQU   *
*    2 LINES DELETED HERE                                   ZA02835
         SPACE 2
*/*      D     (YES,,NO,PEXIT)     ECB POSTED FOR TIMER  */
***********************************************************************
         CLI   UCMECB,BLANK        IS ECB POSTED FOR TIMER
         BNE   PEXIT               NO, EXIT TO PROCESSOR 1
         CLI   UCMECB+N3,N255      IS LOW ORDER BYTE FF
         BNE   PEXIT               NO, EXIT TO PROCESSOR 1
         SPACE 2
*/*      P     CLEAR ECB  */
***********************************************************************
         XC    UCMECB(N1),UCMECB        ZERO ECB
         SPACE 2
*/*PEXIT: R    BRANCH IEECVET1  */
***********************************************************************
PEXIT    EQU   *                   CHECK FOR MORE WORK TO DO
*                                  FOR THIS CONSOLE
         L     X1PARM,DCMCXSVE     PASS CXSA ADDRESS IN REG 1
         L     XFBRANCH,DCMNPROC   LOAD PROC 1 ADDRESS
         BR    XFBRANCH            EXIT TO IEECVET1
         SPACE 2
*/*IEECVET2: END */
***********************************************************************
         EJECT
***********************************************************************
***                        EQUATES                                   **
****                                                               ****
***********************************************************************
CE       EQU   C'E'                1ST CHARACTER OF CSECT ID
C2       EQU   C'2'                2ND CHARACTER OF CSECT ID
N0       EQU   0                   FIELD INCREMENT
N1       EQU   1                   FIELD INCREMENT
N3       EQU   3                   FIELD INCREMENT
N4       EQU   4                   FULLWORD LENGTH
N16      EQU   16                  FIELD INCR
N255     EQU   255                 USED TO TURN OF SELECTED BITS
BLANK    EQU   C' '                BLANK COMPARAND
Y        EQU   C'Y'                CHARACTER FOR COMPARE
R        EQU   C'R'                R COMPARAND
***********************************************************************
         TITLE 'IEECVET2 DISPLAY 1 - - RESIDENT DCM'
         IEERDCM
         TITLE 'IEECVET2 DISPLAY 1 - - PAGEABLE DCM'
         IEETDCM
         TITLE 'IEECVET2 DISPLAY 1 - - CXSA '
         IHACTM  CXSA
         TITLE 'IEECVET2 DISPLAY 1 - - UCM '
         IEECUCM  FORMAT=NEW
         END
