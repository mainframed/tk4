         TITLE 'IEECVETP IGC5P07B 2250 IO 1'
IEECVETP CSECT
*/*IEECVETP: CHART */
*/* HEADER
*/*    CHART SA      IEECVETP     IGC5P07B                    DIDOCS
*/* 2250 I/O ROUTINE 1                               PAGE #          */
*/* E IEECVETP */
  SPACE   2
* /* START OF SPECIFICATIONS ****
*02* PROCESSOR = ASSEMBLER;
**** END OF SPECIFICATIONS ***/
         EJECT
* STATUS
*    CHANGE LEVEL 1
*    COMPLETELY REVISED FOR RELEASE 21, LINE ITEM S21003.
*
* FUNCTION
*    THIS IS A DEVICE DEPENDENT ROUTINE TO PERMORM THE REQUESTED I/O IN
*    PROPER SCREEN FORMAT.
*
* ENTRY POINTS
*         IEECVETP FOR ALL FUNCTIONS
*
* OPERATION
*    THE COMMUNICATION BYTES IN THE DCM ARE CHECKED AGAINST
*    PRE-ESTABLISHED BIT SETTINGS TO DETERMINE WHICH TYPE/FORMAT OF
*    I/O IS TO BE PERFORMED. EACH POSSIBLE REQUEST IS CHECKED AND, IF
*    APPLICABLE, THE APPROPRIATE CCWS ARE BUILT UNTIL ALL OF THE
*    DESIRED I/O REQUESTS ARE SET UP IN THE CHANNEL PROGRAM. THEY MAY
*    BE TO: DO AN RMI, WRITE THE 'MESSAGE WAITING' MESSAGE, SOUND THE
*    CONSOLE ALARM, WRITE THE WARNING LINE, WRITE THE FULL MESSAGE AREA
*    AREA, WRITE THE PARTIAL MESSAGE AREA, WRITE THE INSTRUCTION LINE,
*    WRITE THE ENTRY AREA OR INSERT THE CURSOR. THEN THE I/O IS
*    INITIATED VIA AN EXCP AND CONTROL IS RETURNED TO PROCESSOR 1
*    (IEECVET1) IF THERE IS NO MORE WORK TO BE DONE, OTHERWISE
*    CONTROL IS PASSED TO 2250 I/O ROUTINE 2 (IEECVETQ).
*
* INPUT
*    THE INDICATION OF THE DESIRED I/O IS RECEIVED IN I/O
*    COMMUNICATION BYTES 1, 2 AND 3 AND MESSAGE COMMUNICATION
*    BYTE 1 IN THE DISPLAY CONTROL MODULE.
*
* OUTPUT
*
*    WRITING OF WHAT IS REQUESTED BY THE OTHER MODULES.
* EXTERNAL REFERENCES
*         MACROS USED: EXCP, XCTL
*
* EXITS, NORMAL
*         IEECVET1 PROCESSOR 1 IF NO MORE WORK TO BE DONE.
*         IEECVETF LIGHT PEN CURSOR ROUTINE ON A LIGHT PEN DETECT.
*         IEECVETQ 2250 I/O ROUTINE 2 IF MORE WORK TO BE DONE.
*
* EXITS, ERROR
*         NONE.
         EJECT
*
* TABLES/WORK AREAS
*    DISPLAY CONTROL MODULE (CONTAINED IN DSECT AT END OF LISTING).
*
* ATTRIBUTES
*    REFRESHABLE, PRIVILEGED, TYPE 4 SVC.
*
* CHARACTER CODE DEPENDENCY
*    NONE.
*
* NOTES
*    THE FOLLOWING FLAG BITS ARE USED:
*       THE ACTION COLUMN INDICATES WHETHER THE BIT IS TURNED ON, OFF
*       OR JUST TESTED BY THIS MODULE.
*
*         NAME         ACTION                 FUNCTION
*
*        DCMCMSG1
*         DCMMSGWT   OFF/TEST      WRITE WAIT MESSAGE
*        DCMCOM1
*         DCMCOMRM      ON         RMI HAS BEEN PERFORMED
*        DCMIOUNQ
*         DCMRDARM      ON         READ HAS BEEN PERFORMED
*        DCMIOCM1
*         DCMDORMI   OFF/TEST      DO AN RMI
*         DCMSOUND  ON/OFF/TEST    SOUND ALARM
*         DCMWRWRN  ON/OFF/TEST    WRITE WARNING LINE
*         DCMWRMSG   OFF/TEST      WRITE FULL MESSAGE AREA
*         DCMWRPAR   OFF/TEST      WRITE PARTIAL MESSAGE AREA
*         DCMWRINS   OFF/TEST      WRITE INSTRUCTION LINE
*         DCMINSC    OFF/TEST      INSERT CURSOR
*         DCMWRENT   OFF/TEST      WRITE ENTRY AREA
*        DCMIOCM2
*         DCMBLWRR     OFF         BLANK WARNING LINE
*        DCMIOCM3
*         DCMOPRMI   OFF/TEST      RMI TO RESTORE KEYBOARD
*        DCMR3FLG
*         DCMSTSWT   OFF/TEST      STATUS SWITCH REQUIRED
***********************************************************************
         EJECT
**************** REGISTER EQUATES *****************
X1PARM   EQU   1
XFBRANCH EQU   15
XERTRN   EQU   14
XPARM    EQU   1                   PARAMETER REGISTER
XWORK4   EQU   1                   WORK REGISTER
XDCMBASR EQU   2                   RESIDENT DCM BASE REG
XWORK1   EQU   3                   WORK REGISTER
XWORK2   EQU   4                   WORK REGISTER
XNULLEND EQU   4                   END FOR NULLING
XPOINT   EQU   4                   WORK REGISTER
XKEEP    EQU   5                   WORK REGISTER
XWORK3   EQU   6                   WORK REGISTER
XDCM2NDB EQU   7                   BASE FOR 2ND HALF OF DCM
XCHPGM   EQU   8                   POINTER TO CHANNEL PROGRAM AREA
X8       EQU   8                   WORK REGISTER
XDCMBASE EQU   10                  DCM BASE REGISTER
XBASE    EQU   11                  PROGRAM BASE REGISTER
XCXSA    EQU   12                  CXSA BASE REGISTER
XUCMENT  EQU   13                  UCMENTRY BASE REGISTER
XRTRN    EQU   14                  RETURN REGISTER
XXCTL    EQU   15                  XCTL REGISTER
         EJECT
START    BALR  XBASE,N0            SET UP
         USING *,XBASE             ADDRESSABILITY
         B     ICATCH              BRANCH AROUND EYECATCHER
         DC    C'   MODULE IGC5P07B, FICHE IEECVETP  ' EYECATCHER AND
ZAPAREA  DC    12C'ZAP'            RESERVED FOR FIELD MODIFICATION
ICATCH   LR    XCXSA,XPARM         SAVE CXSA ADDRESS
         USING CXSA,XCXSA          DECLARE CXSA ADDRESS
         L     XUCMENT,CSAUCM      GET UCM ENTRY ADDRESS
         USING UCMLIST,XUCMENT     DECLARE UCMENTRY BASE
         L     XDCMBASR,UCMXB      GET DCM POINTER
         USING DCMTSRT,XDCMBASR
         L     XDCMBASE,DCMADTRN   TRANSIENT DCM LINKAGE
         USING DCMSTRT,XDCMBASE      DECLARE DCM BASE
         L     XDCM2NDB,DCMLSCRN   GET 2ND HALF BASE
         USING DCMMLAST,XDCM2NDB   DECLARE BASE
         MVC   DCMTRACE(DCMTRLEN),DCMTRAC2 SHIFT OLD TRACE ENTRIES
         MVI   DCMTREN1,ID1        PUT CSECT ID INTO
         MVI   DCMTREN2,ID2        NEW TRACE ENTRY
         L     XFBRANCH,CSAXC      ADDRESS FREELOCK SUBROUTINE
         LR    X1PARM,XCXSA        PASS CXSA ADDRESS IN REG 1
         BALR  XERTRN,XFBRANCH     RELEASE LOCKS
         SPACE 5
*/* P (,%STATSW)               CLEAR CHANNEL PROGRAM AREA */
************************************************************
         MVI   DCMCHPGM,N0         ZERO CHANNEL PROG AREA
         MVC   DCMCHPGM+N1(N111),DCMCHPGM   ZERO CHANNEL PROG. AREA
         L     X8,DCMADCHP         POINT TO CHANNEL PROGRAM
         SPACE 5
*/*%STATSW: D (NO,RMIKBD,YES,CLN)   IS STATUS SWITCH BIT ON? */
************************************************************
         TM    DCMR3FLG,DCMSTSWT   IS STATUS SWITCH BIT ON
         BNO   RMIKBD               NO, TEST NEXT FUNCTION
         NI    DCMR3FLG,X'FF'-DCMSTSWT   YES, TURN IT OFF
         SPACE 5
*/*CLN: R CLEANUP MODULE (IEECVFTG) */
************************************************************
         L     XFBRANCH,DCMNCLN        LOAD CLEANUP ROUTINE ADDRESS
         L     X1PARM,DCMCXSVE         RESTORE CXSA ADDRESS
         BR    XFBRANCH                EXIT TO IEECVFTG
         SPACE 5
*/*RMIKBD: D (NO,WAITWRT,YES,RMIKEYBD)   ENTRY TO UNLOCK KEYBOARD? */
************************************************************
RMIKBD   EQU   *
         TM    DCMIOCM3,DCMOPRMI   SEE IF RMI
         BO    RMIKEYBD             YES, GO DO IT
         SPACE 5
*/*WAITWRT: D (NO,BYTE1,YES,WRITWAIT) ENTRY TO WRITE 'MESSAGES WAITING'
*/*?*/
************************************************************
WAITWRT  EQU   *
         TM    DCMCMSG1,DCMMSGWT   SEE IF WRITE WAIT MSG
         BO    WRITWAIT             YES-GO DO IT
TSTBYTE1 EQU   *
         TM    DCMIOCM1,ANYBIT     ANY WORK FOR THIS MODULE
         BC    ANYBT,BYTE1          YES - DO IT
         SPACE 5
*/*TSTBYTE2: D (NO,STREGEN,YES,IORTN2) ANY WORK FOR 2250 I/O 2? */
************************************************************
TSTBYTE2 EQU   *
         TM    DCMIOCM2,ANYBIT     ANY WORK FOR MODULE 2A
         BC    ANYBT,IORTN2A        YES - DO IT
TSTBYTE3 EQU   *
         TM    DCMIOCM3,ANYBIT     ANY WORK FOR MODULE 2B
         BC    ANYBT,IORTN2B        YES - DO IT
         B     STREGEN             GO TO RESTORE SCREEN
         SPACE 5
*/*BYTE1: D (NO,ALRMSND,YES,LGTPEN)       ENTRY FOR RMI? */
************************************************************
BYTE1    EQU   *
         TM    DCMIOCM1,DCMDORMI   ENTRY FOR RMI
         BO    LGTPEN               YES-SEE IF LIGHT PEN DETECT
         EJECT
*/*ALRMSND: D (NO,WARNWRIT,YES,SOUNDALM)    ENTRY TO SOUND ALARM? */
************************************************************
ALRMSND  EQU   *
         TM    DCMIOCM1,DCMSOUND   SOUND ALARM
         BO    SOUNDALM             YES-GO DO IT
         SPACE 5
*/*WARNWRIT: D (NO,FULLWRT,YES,WRITWARN) ENTRY TO WRITE WARNING LINE?
*/**/
************************************************************
WARNWRIT EQU   *
         TM    DCMIOCM1,DCMWRWRN   WRITE WARNING LINE
         BO    WRITWARN             YES-GO WRITE IT
         SPACE 5
*/*FULLWRT: D (NO,PARTWRT,YES,FULLMSG) ENTRY TO WRITE FULL MESSAGE AREA
*/*?*/
************************************************************
FULLWRT  EQU   *
         TM    DCMIOCM1,DCMWRMSG   WRITE FULL MESSAGE AREA
         BO    FULLMSG              YES-GO WRITE FULL
         SPACE 5
*/*PARTWRT: D (NO,INSTWRT,YES,PARTMSG) ENTRY TO WRITE PARTIAL MESSAGE
*/*AREA? */
************************************************************
PARTWRT  EQU   *
         TM    DCMIOCM1,DCMWRPAR   WRITE PARTIAL MESSAGE AREA
         BO    PARTMSG              YES-GO WRITE PARTIAL
         EJECT
*/*INSTWRT: D (NO,ENTRYWRT,YES,WRITEINS) ENTRY TO WRITE INSTRUCTION
*/*LINE? */
************************************************************
INSTWRT  EQU   *
         TM    DCMIOCM1,DCMWRINS   WRITE INSTR LINE
         BO    WRITEINS             YES-GO WRITE IT
         SPACE 5
*/*ENTRYWRT: D (NO,CURSORIN,YES,WRITENT) INSERT CURSOR OR WRITE ENTRY
*/*AREA? */
************************************************************
ENTRYWRT EQU   *
         TM    DCMIOCM1,DCMINSC    INSERT CURSOR
         BO    WRITENT              YES-WRITE ENTRY AREA TO GET 1 CURS
         TM    DCMIOCM1,DCMWRENT   WRITE ENTRY AREA
         BO    WRITENT              YES-GO WRITE IT
         SPACE 5
*/*CURSORIN: D (NO,TSTBYTE2,YES,INCURSOR) ENTRY FOR INSERT CURSOR? */
************************************************************
CURSORIN EQU   *
         TM    DCMIOCM1,DCMINSC    INSERT CURSOR
         BO    INCURSOR             YES GO DO IT
         B     TSTBYTE2            GO TEST NEXT FUNCTION
         SPACE 5
*/*IORTN2: R   2250 I/O ROUTINE 2 (IEECVETQ) */
************************************************************
IORTN2A  EQU   *
IORTN2B  EQU   *
         ST    XCHPGM,DCMDSAV      SAVE PTR TO CHANNEL PROGRAM FOR IO2
         L     XFBRANCH,VCONIO2        LOAD SECOND LOAD ADDRESS
         L     X1PARM,DCMCXSVE         RESTORE CXSA ADDRESS
         BR    XFBRANCH                EXIT TO IEECVETQ
         EJECT
*/*WRITWAIT: P (,BYTE1) MOVE MSG IN. INDICATE WRITE WARN AND SOUND
*/*ALARM */
************************************************************
WRITWAIT EQU   *
         MVI   DCMWARN+N37,BLANK   MOVE BLANK IN
         MVC   DCMWARN+N38(N35),DCMWARN+N37 PROPAGATE IT
         MVC   DCMWARN+N51(N23),WAITMSG MOVE IN WAIT MSG
         NI    DCMCMSG1,N255-DCMMSGWT TURN BIT OFF
         NI    DCMIOCM2,X'FF'-DCMBLWRR DON'T ERASE WARNING LINE
         OI    DCMIOCM1,DCMSOUND+DCMWRWRN   WRITE LINE AND SOUND ALARM
         B     TSTBYTE1                GO TEST NEXT FUNCTION
         SPACE 5
*/*LGTPEN: D (NO,RMIKEYBD,YES,XYCOOR)      LIGHT PEN DETECT? */
************************************************************
LGTPEN   EQU   *
         NI    DCMIOCM1,N255-DCMDORMI TURN OFF BIT TO INDICATE RMI
         L     XWORK1,UCMUCB
         USING UCBOB,XWORK1        UCB ADDRESSABILITY         MB YM5671
         TM    UCBSNS+N1,LPDET                                MB YM5671
         BO    XYCOOR              YES-GET X,Y COORDINATES
         OI    DCMIOUNQ,DCMRDARM   INDICATE READ MUST BE PERFORMED
         OI    DCMCOM1,DCMCOMRM    INDICATE RMI HAS BEEN PERFORMED
         SPACE 5
*/*RMIKEYBD: P (,WAITWRT)     BUILD RMI CCW */
************************************************************
RMIKEYBD EQU   *
         LA    XWORK1,DCMDSAV      GET ADDRESS OF RMI READ AREA
         ST    XWORK1,DCMCHPGM     PUT RMI ADDR IN CHANNEL PGM
         MVI   DCMCHPGM,RMICODE    PUT RMI CODE IN  CHANNEL PROGRAM
         MVI   DCMCHPGM+N7,N3      PUT BYTE COUNT IN
         MVI   DCMCHPGM+N4,CHAIN   CHAIN CCW
         NI    DCMIOCM3,N255-DCMOPRMI TURN OFF BIT TO UNLOCK KEYBOARD
         LA    XCHPGM,N8(XCHPGM)   UPDATE CCW PTR
         B     WAITWRT             GO TO TEST NEXT FUNCTION
         EJECT
*/*XYCOOR: P (,%LPCURSX) GET X,Y COORDINATES & SAVE LINE & CHARACTER
*/*POSITION */
*/*%LPCURSX: R    L/P CURSOR  (IEECVETF) */
************************************************************
XYCOOR   EQU   *
         LH    XWORK2,UCBSNS+N2    XY DATA FOR LP DETECT      MB YM5671
         SH    XWORK2,DCMWARN+N76  GET START OF BUFFER
         SLA   XWORK2,N19          ISOLATE ADDRESS
         SRDA  XWORK2,N51          GET BEFINNING OF BUFFER
         SH    XKEEP,H10           ALLOW FOR GRAPHIC ORDERS
         D     XWORK2,F74          DIVIDE BY LINE LENGTH
         STC   XWORK2,DCMDSAV+N1   SAVE CHAR POS IN LINE
         STC   XKEEP,DCMDSAV       SAVE LINE NUMBER
         MVI   UCBSNS+N1,N0        ZERO LP INDICATOR IN UCB   MB YM5671
         L     XFBRANCH,DCMNLPCR   LOAD LIGHT-PEN/CURSOR ADDRESS
         L     X1PARM,DCMCXSVE     RESTORE CXSA ADDRESS
         BR    XFBRANCH            EXIT TO IEECVETF
         SPACE 5
*/*SOUNDALM: P (,WARNWRIT) BUILD SOUND ALARM CCW */
************************************************************
SOUNDALM EQU   *
         NI    DCMIOCM1,N255-DCMSOUND
         MVI   N0(XCHPGM),SOUND    PUT OP CODE INTO CCW
         MVI   N4(XCHPGM),CHAIN    CHAIN CCWS
         MVI   N7(XCHPGM),N2       DATA BYTES
         LA    XCHPGM,N8(XCHPGM)   UPDATE CCW ADDR
         B     WARNWRIT            SEE IF WRITE WARNING LINE
         EJECT
*/*WRITWARN: P (,FULLWRT) BUILD WRITE WARNING LINE CCWS */
************************************************************
WRITWARN EQU   *
         NI    DCMIOCM1,N255-DCMWRWRN TURN OFF WARNING LINE BIT
         LA    XPOINT,DCMBAWRN     WARNING LINE BUFFER ADDRESS
         BAL   XRTRN,BUILDSET      BUILD SET BUFFER CCW
         LA    XKEEP,DCMWARN       WARNING LINE
         LH    XWORK1,H78          LENGTH OF WRITE
         BAL   XRTRN,BUILDWRT      BUILD WRITE CCW
         B     FULLWRT             GO TEST NEXT FUNCTION
         EJECT
*/*FULLMSG: P (,NULLMSG) BUILD WRITE FULL SCREEN CCWS */
************************************************************
FULLMSG  EQU   *
         NI    DCMIOCM1,N255-DCMWRMSG-DCMWRPAR TURN BITS OFF
         LA    XPOINT,DCMBASRT     GET PTR TO SCREEN IMAGE BUFFER
         BAL   XRTRN,BUILDSET      BUILD SET BUFFER CCW
         L     XWORK1,DCMWTBUF     END OF BUFFER
         LA    XKEEP,DCMSRT        BEGINNING ORDERS
         SR    XWORK1,XKEEP
         BAL   XRTRN,BUILDWRT      BUILD WRITE CCWS
         BAL   XRTRN,NULLMSG       GO TO INSERT NULLS
         B     INSTWRT             GO TEST NEXT FUNCTION
         SPACE 5
*/*NULLMSG: P (,INSTWRT) NULL EACH LINE BEYOND TEXT */
************************************************************
NULLMSG  EQU   *
         LH    XKEEP,DCMMSGAL      TOTAL MSGS
         L     XWORK4,DCMLSCRN     LAST MSG LINE
         AH    XWORK4,DCMCORLN     END OF MSGS
         BCTR  XWORK4,N0           LAST CHACTER OF MSGS
         LR    XWORK1,XWORK4
         LH    XNULLEND,NULLNG     NUMBER OF CHARACTERS TO NULL
LOOP     EQU   *
         CLI   N0(XWORK4),NEWLINE  IS LAST CHAR N/L
         BE    NEXTCHAR             YES, CHECK FOR BLANKS
         CLI   N0(XWORK4),BLANK    IS CHAR BLANK
         BNE   NEXTLINE             NO, LINE FULL OF DATA
         MVI   N0(XWORK4),NEWLINE   YES, REPLACE WITH N/L CHAR
NEXTCHAR BCTR  XWORK4,N0           LOOK AT NEXT CHAR
         CLI   N0(XWORK4),BLANK    IS IT BLANK
         BNE   NEXTLINE             NO, DATA HAS BEEN REACHED
         MVI   N0(XWORK4),NULL      YES, REPLACE IT WITH NULL
         BCT   XNULLEND,NEXTCHAR   END OF CHAR SEARCH TO NULL
NEXTLINE EQU   *
         LH    XNULLEND,NULLNG     REINIT NULLING LENGTH
         SH    XWORK1,DCMCORLN     LOOK AT NEXT LINE
         LR    XWORK4,XWORK1       INITIALIZE CHAR POINTER
         BCT   XKEEP,LOOP          CHECK FOR END OF LINES
         BR    XRTRN                YES, RETURN TO CALLER
         EJECT
*/*PARTMSG: P (,INSTWRT) BUILD WRITE PARTIAL CCWS */
************************************************************
PARTMSG  EQU   *
         NI    DCMIOCM1,N255-DCMWRPAR TURN OFF BIT
         SR    XWORK1,XWORK1       CLEAR WORK1 REG
         LH    XPOINT,DCMBAM1      GET START OF MSG AREA
         IC    XWORK1,DCMLINEN     GET LINE NO
         BCTR  XWORK1,N0           DECREMENT BY 1
         MH    XWORK1,DCMCORLN     GET INDEX
         LR    XWORK3,XWORK1       SAVE LENGTH
         AR    XWORK1,XPOINT       ADD BEGINNING ADDR TO GET ID ADDR
         STH   XWORK1,DCMBADLN     HOLD IN BUFFER ADDR AREA
         LA    XPOINT,DCMBADLN     POINT TO BUFFER ADDR AREA
         BAL   XRTRN,BUILDSET      BUILD SET BUF CCW
         L     XKEEP,DCMASCRN      POINT TO START OF MESSAGE AREA
         AR    XKEEP,XWORK3        POINT TO LINE TO WRITE FROM
         LH    XWORK1,DCMBYTCT     GET WRITE LENGTH
         BAL   XRTRN,BUILDWRT      BUILD WRITE CCW
         BAL   XRTRN,NULLMSG       GO TO INSERT NULLS
         B     INSTWRT             GO TEST NEXT FUNCTION
         SPACE 5
*/*WRITEINS: P (,ENTRYWRT) BUILD WRITE INSTRUCTION LINE CCWS */
************************************************************
WRITEINS EQU   *
         NI    DCMIOCM1,N255-DCMWRINS TURN OFF INS LINE WRITE BIT
         LA    XPOINT,DCMBAINS     POINT TO BUFFER ADDRESS INS LINE
         BAL   XRTRN,BUILDSET      BUILD SET BUF CCW
         L     XKEEP,DCMAINS       GET ADDR TO WRITE FROM
         LH    XWORK1,H74          GET WRITE LENGTH
         AH    XWORK1,TWO          ADD LENGTH OF GRAPHIC ORDER
         BAL   XRTRN,BUILDWRT      BUILD WRITE SCREEN CCW
         B     ENTRYWRT            SEE IF ENTRY AREA IS TO BE WRITTEN
         EJECT
*/*WRITENT: P (,CURSORIN) BUILD WRITE ENTRY AREA CCWS */
************************************************************
WRITENT  EQU   *
         NI    DCMIOCM1,N255-DCMWRENT TURN OFF WRITE ENTRY AREA BIT
         LA    XPOINT,DCMBAENT     POINT TO ENTRY AREA BUFFER ADDRESS
         BAL   XRTRN,BUILDSET      BUILD
         LA    XKEEP,DCMENTRY      ADDRESS OF ENTRY AREA
         LH    XWORK1,DCMCORLN     GET LENGTH OF ONE LINE
         SLL   XWORK1,N1           DOUBLE LENGTH
         AH    XWORK1,TWO          ADD LENGTH OF GRAPHIC ORDER
         BAL   XRTRN,BUILDWRT      BUILD WRITE CCW
         B     CURSORIN            SEE IF INSERT CURSOR
         EJECT
*/*INCURSOR: P (,TSTBYTE2) BUILD INSERT CURSOR CCWS */
************************************************************
INCURSOR EQU   *
         NI    DCMIOCM1,N255-DCMINSC TURN OFF BIT
         SR    XWORK1,XWORK1       CLEAR WORK REG
         IC    XWORK1,DCMCULNO     GET LINE NUMBER
         BCTR  XWORK1,N0           DECREMENT IT BY ONE
         MH    XWORK1,DCMCORLN
         LH    XKEEP,DCMBAENT      GET ENTRY AREA BUFFER ADDR
         AR    XKEEP,XWORK1        GET CORRECT ENTRY AREA LINE
         IC    XWORK1,DCMPOSCU     GET CHARACTER POSITION
         BCTR  XWORK1,N0           DECREMENT BY ONE
         AR    XKEEP,XWORK1        GET ADDRESS TO INS CURSOR
         STH   XKEEP,DCMBAINC
         LA    XPOINT,DCMBAINC     GET PTR FOR INSERT CURSOR
         BAL   XRTRN,BUILDSET      BUILD SET BUFFER CCW
         MVI   N0(XCHPGM),INSERT   PUT OP CODE IN
         BAL   XRTRN,INCCW         BUILD CCW
         B     TSTBYTE2            GO TEST NEXT FUNCTION
         SPACE 5
BUILDSET EQU   *
         ST    XPOINT,N0(XCHPGM)   PUT BUF ADD PTR INTO CCW
         MVI   N0(XCHPGM),SETBUF   PUT COMMAND CODE INTO CCW
INCCW    EQU   *
         MVI   N4(XCHPGM),CHAIN    CHAIN CCW'S
         MVI   N7(XCHPGM),N2       PUT BYTE COUNT IN
         LA    XCHPGM,N8(XCHPGM)   UPDATE CCW POINTER
         BR    XRTRN               RETURN TO CALLER
BUILDWRT EQU   *
         ST    XKEEP,N0(XCHPGM)    SAVE WRITE FROM ADDRESS
         MVI   N0(XCHPGM),WRITE    PUT OP CODE IN CCW
         MVI   N4(XCHPGM),CHAIN    CHAIN CCW'S
         STH   XWORK1,N6(XCHPGM)   PUT BYTE COUNT IN
         LA    XCHPGM,N8(XCHPGM)   UPDATE CCW POINTER
         BR    XRTRN               RETURN
         EJECT
*/*STREGEN: P (,ENEXCP) BUILD START REGEN CCW */
************************************************************
STREGEN  EQU   *
         LA    XWORK1,DCMBASRT     GET START OF REGEN
         ST    XWORK1,N0(XCHPGM)   PUT ADDRESS IN CCW
         MVI   N0(XCHPGM),STARTREG MOVE OP CODE IN
         MVI   N4(XCHPGM),CHAIN    PUT CHAIN CCW
         MVI   N7(XCHPGM),N2       MOVE BYTE COUNT IN
         LA    XCHPGM,N8(XCHPGM)   UPDATE CCW POINTER
         B     ENEXCP              GO TO STOP CCW AND EXIT
         SPACE 5
*/*ENEXCP: P (,EXCP) REMOVE CHAIN FLAG FROM LAST CCW */
************************************************************
ENEXCP   EQU   *
         SH    XCHPGM,EIGHT        UPDATE CCW POINTER
         MVI   N4(XCHPGM),STOP     STOP CCW CHAIN
         SPACE 5
*/*EXCP: I (,%PRCEXIT)  EXCP */
************************************************************
EXCP     EQU   *
         L     XFBRANCH,CSAXB      ADDRESS GETLOCK SUBR       JE YM8371
         LR    X1PARM,XCXSA        PASS CXSA ADDRESS IN REG 1 JE YM8371
         BALR  XERTRN,XFBRANCH     OBTAIN  LOCKS              JE YM8371
         XC    UCMECB,UCMECB       CLEAR ECB
         OI    UCMSTS,UCMBF        TURN ON BUSY BIT
         L     XWORK1,UCMDCB       GET DCB ADDRESS
         L     XWORK1,N28(XWORK1)  GET IOB ADDRESS
         L     XFBRANCH,CSAXC      ADDRESS FREELOCK SUBR      JE YM8371
         LR    X1PARM,XCXSA        PASS CXSA ADDRESS IN REG 1 JE YM8371
         BALR  XERTRN,XFBRANCH     RELEASE LOCKS              JE YM8371
         EXCP  (XWORK1)            INITIATE I/O
         SPACE 5
*/*%PRCEXIT: R  PROCESSOR 1 (IEECVET1) */
************************************************************
EXIT     EQU   *
         L     XFBRANCH,DCMNPROC   LOAD PROC 1 ADDRESS
         L     X1PARM,DCMCXSVE     RESTORE CXSA ADDRESS
         BR    XFBRANCH            EXIT TO IEECVET1
         EJECT
*     CONSTANTS
VCONIO2  DC    V(IEECVETQ)         SECOND LOAD ADDRESS
EIGHT    DC    H'8'                COUNT FOR UPDATE CCW PTR
F74      DC    F'74'               LENGTH OF ONE LINE
H10      DC    H'10'               MINIMUM SHIFT LENGTH
H74      DC    H'74'               LENGTH FOR INSTR WRITE
H78      DC    H'78'               LENGTH OF WARNING LINE WRITE
NULLNG   DC    H'69'               NULLING LENGTH
TWO      DC    H'2'                INDEX FACTOR FOR COUNTS
WAITMSG  DC    C'IEE159E MESSAGE WAITING' MSGS WAITING WARNING
*        EQUATES
ID1      EQU   C'E'                1ST CHARACTER OF CSECT ID
ID2      EQU   C'P'                2ND CHARACTER OF CSECT ID
ANYBIT   EQU   X'FF'               MASK TO TEST ALL BITS
ANYBT    EQU   7                   BRANCH IF ANY BIT ON
BLANK    EQU   X'40'               BLANK
CHAIN    EQU   X'60'               CHAIN CCW CODE
INSERT   EQU   X'0F'               INSERT CURSOR
LPDET    EQU   X'A0'               BIT FOR LP DETECT
NEWLINE  EQU   X'15'
NULL     EQU   X'00'               NULL CHARACTER
N0       EQU   0                   NUMBER
N1       EQU   1                   NUMBER
N2       EQU   2                   NUMBER
N3       EQU   3                   NUMBER
N4       EQU   4                   NUMBER
N6       EQU   6                   NUMBER
N7       EQU   7                   NUMBER
N8       EQU   8                   NUMBER
N19      EQU   19                  NUMBER
N23      EQU   23                  NUMBER
N24      EQU   24                  NUMBER
N28      EQU   28                  NUMBER
N35      EQU   35                  NUMBER
N37      EQU   37                  NUMBER
N38      EQU   38                  NUMBER
N51      EQU   51                  NUMBER
N76      EQU   76                  NUMBER
N111     EQU   111                 LENGTH OF CCW AREA MINUS ONE
N255     EQU   255                 NUMBER
RMICODE  EQU   X'0E'               RMI CODE
SETBUF   EQU   X'07'               STOP REGEN CODE
SOUND    EQU   X'0B'               SOUND ALARM
STARTREG EQU   X'27'               START REGEN CODE
STOP     EQU   X'20'               STOP CCW CODE
WRITE    EQU   X'01'               WRITE
         SPACE 5
*/*IEECVETP: END */
         SPACE 2
         TITLE 'IEECVETP   IGC5P07B    2250 I/O 1   RESIDENT DISPLAY CO*
               NTROL MODULE'
         IEERDCM
         TITLE 'IEECVETP   IGC5P07B    2250 I/O 1   PAGEABLE DISPLAY C *
               ONTROL MODULE'
DCMSTRT  DSECT
         IEECDCM  DEVICE=B
         TITLE 'IEECVETP   IGC5P07B    2250 I/O 1      CXSA'
         IHACTM  CXSA
         TITLE 'IEECVETP   IGC5P07B    2250 I/O 1      UCB'
ETPUCB   DSECT
         IEFUCBOB
         TITLE 'IEECVETP   IGC5P07B    2250 I/O 1      UNIT CONTROL MOD*
               ULE'
         IEECUCM  FORMAT=NEW
         END
