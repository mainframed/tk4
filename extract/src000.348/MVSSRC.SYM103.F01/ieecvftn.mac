IEECVFTN CSECT
*D 069500-079500,101000,177500                                MB YM0664
*/*IEECVFTN: CHART */
*    THIS ROUTINE WAS CREATED FOR STATUS DISPLAY SUPPORT, LINE ITEM
*    21002, OS RELEASE 21.
*/*HEADER
*/*     CHART 6N  IEECVFTN - IGC6N07B - K D,H; K D,U; K D,F CONTROL
*/*COMMANDS FOR OUT-OF-LINE DISPLAYS */
         TITLE 'IEECVFTN STATUS DISPLAY INTERFACE 3'
***********************************************************************
*                                                                     *
* STATUS                                                              *
*    CHANGE LEVEL=0                                                   *
*                                                                     *
* FUNCTION                                                            *
*    TO HANDLE CONTROL (K) COMMANDS AFFECTING OUT-OF-LINE STATUS      *
*    DISPLAYS.   (K D,H K D,F K D,U)                                  *
*                                                                     *
* ENTRY POINT                                                         *
*    IEECVFTN (CSECT)                                                 *
*    IGC6N07B (LOAD MODULE NAME)                                      *
*                                                                     *
* INPUT                                                               *
*    REG 1 POINTS TO CXSA WHICH POINTS TO DCM  WHICH CONTAINS INDI-   *
*    CATORS.                                                          *
*    K COMMAND PARAMETER LIST POINTED TO IN THE DCM                   *
*    DCMADOPN POINTS TO OPERAND(S) IN PARAMETER LIST                  *
*                                                                     *
* OUTPUT                                                              *
*    ALTERATION OF THE CONTROL LINES OF OUT OF LINE DISPLAYS.         *
*    BIT SETTINGS IN DCM AND SACB FOR OTHER ROUTINES TO ANALYZE       *
*                                                                     *
* EXTERNAL REFERENCES                                                 *
*    SVC 34                                                           *
*    XCTL                                                             *
*                                                                     *
* EXITS,NORMAL                                                        *
*    I/O RTN    (DEVICE-DEPENDENT) TO OUTPUT A NEW CONTROL LINE       *
*                                                                     *
* EXITS,ERROR                                                         *
*    TO PROCCESOR 1 UPON INCORRECT COMMAND INPUT                      *
*                                                                     *
* ATTRIBUTES                                                          *
*    REFRESHABLE, PRIVILEGED, TYPE 4 SVC                              *
*                                                                     *
* TABLES/WORK AREAS                                                   *
*    UCM, RDCM, DCM, CXSA, WQE, SACB                                  *
*                                                                     *
***********************************************************************
         EJECT
*
***********************************************************************
*    REGISTERS
*
X1PARM   EQU   1
XERTRN   EQU   14
XFBRANCH EQU   15
XF       EQU   15                  WORK REG
X14      EQU   14                  RETURN REG
RETURN   EQU   14                  RETURN REG
XD       EQU   13                  WORK REG
SACBPT   EQU   13                  SACB BASE REG
XC       EQU   12                  THIS RTN'S BASE REG
XB       EQU   11                  CXSA BASE REG
XA       EQU   10                  UCM BASE REG
X9       EQU   9                   TRANSIENT DCM BASE REG
XRDCM    EQU   8                   RESIDENT DCM BASE REG
LIST     EQU   7                   UCMLIST BASE REG
X6       EQU   6                   WORK REG
PARMREG  EQU   1                   PARAMETER LIST BASE REG
FLDADR   EQU   15                  MASKING FIELD POINTER
MAJWQER  EQU   4                   MAJOR WQE BASE REG
X5       EQU   5                   WORK REG
X4       EQU   4                   WORK REG
X3       EQU   3                   WORK REG
X2       EQU   2                   WORK REG
X1       EQU   1                   WORK REG
X0       EQU   0                   WORK REG
R3       EQU   3                   WORK REG
R4       EQU   4                   WORK REG
R5       EQU   5                   WORK REG
R6       EQU   6                   WORK REG
********************************************************************
         EJECT
********************************************************************
*     EQUATES
********************************************************************
*
ID1      EQU   C'F'                1ST CHARACTER OF CSECT ID
ID2      EQU   C'N'                2ND CHARACTER OF CSECT ID
BLANK    EQU   X'40'
********************************************************************
*              FIELD INCREMENTS
N0       EQU   0
N1       EQU   1
N2       EQU   2
N3       EQU   3
N4       EQU   4
N5       EQU   5
N6       EQU   6
N7       EQU   7
N8       EQU   8
N9       EQU   9
ND       EQU   13                  FIELD LENGTH
N34      EQU   34
N64      EQU   64
N255     EQU   255
CF0      EQU   X'F0'
F0       EQU   X'F0'
***********************************************************************
         EJECT
*/* E IEECVFTN */
*
*    ESTABLISH ADDRESSABILITY
*
*/*%BASES: P (,%ANALYZ) ESTABLISH ADDRESSABILITY */
         BALR  XC,N0               ESTABLISH ROUTINE'S
         USING *,XC                BASE REGISTER
         LR    XB,X1               ESTABLISH CXSA
         USING CXSA,XB             ADDRESSABILITY
         L     XA,CSACTLM          ESTABLISH UCM BASE
         USING UCM,XA              ADDRESSABILITY
         L     LIST,CSAUCM         LOAD UCM ENTRY ADDRESS
         USING UCMLIST,LIST        ESTABLISH UCME  ADDRESSABILITY
         L     XRDCM,UCMXB         GET POINTER TO RESIDENT DCM
         USING DCMTSRT,XRDCM          ESTABLISH RDCM BASE REG
         L     X9,N0(XRDCM)        LOAD TRANSIENT DCM PT
         USING DCMSTRT,X9         ESTABLISH TDCM BASE REG
         USING DCMACB,SACBPT       SACB BASE REG
         USING KPARM,PARMREG       ESTABLISH PARAMETER BASE REG
         MVC   DCMTRACE(DCMTRLEN),DCMTRAC2 SHIFT OLD TRACE ENTRIES
         MVI   DCMTREN1,ID1        PUT CSECT ID INTO
         MVI   DCMTREN2,ID2        NEW TRACE ENTRY
         L     XFBRANCH,CSAXB      ADDRESS GETLOCK SUBROUTINE
         LR    X1PARM,XB           PASS CXSA ADDRESS IN REG 1
         BALR  XERTRN,XFBRANCH     OBTAIN LOCKS
*
***********************************************************************
         EJECT
***********************************************************************
*
*
*/*%ANALYZ: P (,%P01) GET POINTER TO OPERANDS */
*    ANALYZE COMMAND IN PARAMETER LIST
         L     PARMREG,DCMADOPN    LOAD POINTER TO OPERAND(S)
         SH    PARMREG,FOUR        DECREMENT POINTER BY 4
*/*%P01: S (,%P03) SACBINIT: FIND SACB TO MATCH AREA ID IN PARAM LIST
*/**/
         BAL   X14,SACBINIT        GO FIND SACB TO MATCH AREA ID
*/*%P03: P (,%COMP) BASE CONTROL LINE DSECT */
         USING DCONTROL,X5         BASE CONTROL LINE DSECT
*
*/*%COMP: D (NO,%COMP2,YES,KDFRTN) IS COMMAND K D,F */
         CLC   KOPN(N4),KDF        NO--IS COMMAND K D,F
         BE    KDFRTN              YES-GO SET FORWARD FRAME BITS
*/*%COMP2: D (NO,%COMP3,YES,BLDLINE) IS COMMAND K D,H */
         CLC   KOPN(N4),KDH        NO--IS COMMAND K D,H
         BE    BLDLINE              YES, UPDATE CONTROL LINE  MB Y02958
*/*%COMP3: D (NO,ERROR,YES,BLDLINE) IS COMMAND K D,U */
         CLC   KOPN(N4),KDU        NO--IS COMMAND K D,U
         BE    BLDLINE              YES, UPDATE CONTROL LINE  MB Y02958
*    IF NONE OF ABOVE, IT IS AN ERROR THAT SHOULD NEVER HAPPEN.
*    GO BACK TO PROCESSOR 1 SO THAT IT CAN CONTINUE PROCESSING
*    WITHOUT CAUSING POSSIBLE SYSTEM FAILURE.
         SPACE 2
*/*ERROR: P (,XCTL) GET PROCESSOR1 ADDRESS */                 MB Y02958
ERROR    EQU   *
         L     XFBRANCH,DCMNPROC   LOAD PROC 1 ADDRESS
         B     XCTL                EXIT TO IEECVET1
*
***********************************************************************
         EJECT
*/*KDFRTN: P (,FRAMEOFF) TURN OFF FRAME FULL BIT IN SACB */
KDFRTN   EQU   *
*    ON A K D,F COMMAND THE FRAME FULL BITS IN THE MAJOR WQE FOR THE
*    DISPLAY AND IN THE SACB ARE TURNED OFF.
*    THE OUT OF LINE DISPLAY PENDING BIT IS TURNED ON.
*    THE SETTING OF THESE BITS CAUSES CONTROL TO LATER BE PASSED TO THE
*    STATUS DISPLAY INTERFACE 2 MODULE TO OUTPUT THE NEXT FRAME.
*    THE FRAME NUMBER IS THEN UPDATED AND THE CONTROL LINE IS REWRITTEN
         TM    DCMAFLG1,DCMAFULL   IS FRAME FULL BIT ON IN SACB
         BZ    FRAMEOFF            NO--IF ZERO
         NI    DCMAFLG1,N255-DCMAFULL TURN OFF FRAME FULL BIT IN SACB
*                                  BIT
*/*FRAMEOFF: S (,%FRM01) MASKRTN: SET BIT IN WQE OFF */
FRAMEOFF EQU   *
         BAL   X14,MASKRTN         GO SET THE BIT IN WQE OFF
*/*%FRM01: P (,%FRM02) TURN ON OUT-OF-LINE DISP. PENDING BIT */
         OI    UCMSDS5,UCMSDS5C    TURN ON OUT-OF-LINE DISPLAY PENDING
*/*%FRM02: P (,BLDLINE) UPDATE FRAME NUMBER IN SACB */
         IC    X2,DCMAFR+N1         LOAD FIRST DIGIT
         SRDL  X2,N4               SHIFT OUT LOW NIBBLE
         SR    X2,X2               CLEAR REG
         SLDL  X2,N4               RESTORE LOW NIBBLE IN REG 2
         LA    X2,N1(X2)           BUMP NUMBER
         C     X2,TEN              IS NUMBER = TO 10
         BNL   NEXTBYTE            YES
         STC   X2,DCMAFR+N1        RESTORE NUMBER IN SACB
         OI    DCMAFR+N1,F0       RESTORE HIGH EBCDIC NIBBLE
         B     NORESET
NEXTBYTE EQU   *
         IC    X2,DCMAFR           LOAD SECOND DIGIT
         SRDL  X2,N4               SHIFT OUT LOW NIBBLE
         SR    X2,X2               CLEAR REG
         SLDL  X2,N4               RESTORE LOW NIBBLE IN REG 2
         LA    X2,N1(X2)           BUMP NUMBER
         C     X2,TEN              IS NUMBER = TO 10
         BNL   ZEROIT              REACHED 99 VALUE
         STC   X2,DCMAFR           RESTORE DIGIT
         OI    DCMAFR,F0           RESTORE HIGH NIBBLE
         B     RESETLOW
ZEROIT   MVI   DCMAFR,F0           SET SECOND DIGIT TO ZERO
RESETLOW MVI   DCMAFR+N1,F0          SET FIRST DIGIT TO ZERO
NORESET  EQU   *
         B     BLDLINE             GO BUILD LINE
*
***********************************************************************
         EJECT
*/* E BLANKET */
BLANKET  EQU   *
*/*%BLNK01: P (,%BLNK02) BLANK ONE LINE
*/**/
* INPUT: REG X3 CONTAINS LENGTH TO BE BLANKED.
* INPUT: REG X5 POINTS TO LINE OF DCM TO BE BLANKED.
         MVI   N0(X5),BLANK        MOVE A BLANK CHAR
         SH    X3,TWO              DECREMENT BY 2 (FOR MVI+EX)
         EX    X3,BLANKWRT         SPREAD BLANKS THROUGHOUT LINE
*/*%BLNK02: R RETURN TO CALLER */
         BR    XF
SACBINIT EQU   *
*/* E SACBINIT */
*    SET UP SACB POINTERS
*/*%ACB1: P (,IDLOOP) LOAD SACB POINTER FROM RDCM */
         L     SACBPT,DCMADSDS         LOAD SACB POINTER FROM RDCM
IDLOOP   EQU   *
*/*IDLOOP: D (NO,ERROR,YES,%ACB2) VALID ADDRESS */
         LTR   SACBPT,SACBPT       IS IT A VALID ADDR
         BZ    ERROR               NO--GO BACK TO PROCESSOR 1
*/*%ACB2: D (YES,FOUNDID,NO,%ACB3) AREA ID'S MATCH */
         CLC   KAID(N1),DCMAID    ARE AREA ID'S EQUAL
         BE    FOUNDID            YES-
*/*%ACB3: P (,IDLOOP) LOAD NEXT SACB POINTER */
         L     XD,N0(XD)          LOAD POINTER TO NEXT SACB
         B     IDLOOP
FOUNDID  EQU   *
*/*FOUNDID: R RETURN TO CALLER */
         BR    RETURN              RETURN TO CALLER
***********************************************************************
         EJECT
BLDLINE  EQU   *
*     THE FOLLOWING CODE BUILDS THE NEW CONTROL LINE IN THE DCM
*
*/*BLDLINE: P SET UP BYTE COUNT, LINE NO. FOR I/O */          MH  M2517
         MVC   DCMBYTCT(N2),DCMCORLN INDICATE WRITE 1 LINE    MH  M2517
         MVC   DCMLINEN(N1),DCMATOP INDIC. WRITE TOP LINE     MH  M2517
*/*%TESTSD: D (YES,%USESIB,NO,USEINSTR) CONSOLE USE = STATUS DISPLAY?
*/**/
         TM    UCMDISP,UCMDISPG    Q. STATUS DISPLAY CONSOLE  MF  M2057
         BNO   USEINSTR            NO, USE INSTRUCTION LINE   MF  M2057
* WRITE CONTROL LINE FROM SCREEN IMAGE BUFFER                 MF  M2057
*/*%USESIB: P (,IOPARM) INDICATE WRITE PARTIAL FROM SCREEN IMAGE BUFFER
*/**/
         SR    X5,X5               CLEAR REG                  MF  M2057
         IC    X5,DCMATOP          GET CONTROL LINE NUMBER    MF  M2057
         BCTR  X5,N0               SUBTRACT ONE               MF  M2057
         MH    X5,DCMCORLN         MULTIPLY BY LINE LENGTH    MF  M2057
         A     X5,DCMASCRN         ADD BEGINNING OF SCREEN    MF  M2057
*                                       IMAGE BUFFER          MF  M2057
         OI    DCMIOCM1,DCMWRPAR   INDICATE WRITE PARTIAL     MF  M2057
         B     MVCNTRL             GO SETUP CONTROL LINE      MH  M2517
USEINSTR EQU   *                                              MF  M2057
* WRITE CONTROL LINE FROM INSTRUCTION LINE                    MF  M2057
*/*USEINSTR: P INDICATE WRITE INFO DISPLAY FROM
*/* INSTRUCTION LINE */
         L     X5,DCMAINS          GET INSTRUCTION LINE ADDR  MF  M2057
         OI    DCMIOCM2,DCMWINFD   INDICATE WRITE INFO DISPLAYMF  M2057
*/*%P02: S (,%P03) BLANKET: BLANK LINE OF DCM FOR CONTROL LINE */
         LH    X3,DCMLGNTH         GET LENGTH OF A LINE       MF  M2057
         BAL   XF,BLANKET          GO BLANK LINE              MF  M2057
*/*%P03: P (,%BLD01) BASE CONTROL LINE DSECT */
         USING DCONTROL,X5         BASE CONTROL LINE DSECT    MF  M2057
*/*%BLD01: D (YES,IMAGE,NO,%BLD02) TITLE LINE IN SCREEN IMAGE BUFFER */
         TM    DCMADFLG,DCMACSIB       DYNAMIC DISPLAY CONTROL LINE
*              IN SRCEEN IMAGE BUFFER
         BO    IMAGE               YES -
*/*%BLD02: P (,MVCNTRL) MOVE TITLE FROM WQE BLOCK */
         SPACE 2
         L     X4,DCMAMJWQ         LOAD CONSOLE OUTPUT Q PT
         L     MAJWQER,N0(X4)    LOAD MAJOR WQE ADDR
         USING WMJM,MAJWQER         ESTABLISH MAJOR WQE BASE R
         LH    X3,WMJMTXTL          GET LENGTH OF TITLE
         SH    X3,FIVE              DECREMENT BY 5
         EX    X3,MVTITLE           MOVE TITLE TO LINE
         B     DROPIT
MVTITLE  MVC   TITLE(N0),WMJMTXT            CONTROL LINE TITLE MOVE
DROPIT   EQU   *
         DROP  MAJWQER
*/*MVCNTRL: P (,%BLD03) MOVE IN FIRST SET OF ASTERS AND FRAME NO. */
MVCNTRL  EQU   *
         MVC   FRAME+N1(N5),CFRAME       MOVE FRAME WORD
         TM    DCMAFLG1,DCMADEND   Q. LAST FRAME ON SCREEN
         BO    LAST                YES- GO MOVE IN LAST
         CLI   DCMAFR,CF0           Q. IS FIRST DIGIT OF FRAME
*                                     NUMBER ZERO
         BE    ONEDIGIT            YES- BRANCH TO MOVE ONE DIGIT
         MVC   FRAME+N7(N2),DCMAFR  MOVE FRAME NUMBER INTO LINE
         B     BLD             GO BUILD LINE
ONEDIGIT EQU   *
         MVC   FRAME+N8(N1),DCMAFR+N1 MOVE ONLY ONE FRAME DIGIT IN
         B     BLD             GO BUILD LINE
LAST     EQU   *
         MVC   FRAME+N7(N4),CLAST
BLD      EQU   *
         MVI   CNTRL2+N2,ASTERISK        PUT ASTERISK IN CONTROL 2
         MVI   CNTRL3+N2,ASTERISK        PUT ASTERISK IN CONTROL 2
*/*%BLD03: D (YES,CNTRLDD,NO,%BLD04) DYNAMIC DISPLAY */
         TM    DCMADFLG,DCMADD    Q. DYNAMIC DISPLAY
         BO    CNTRLDD             BR TO BUILD DYNAMIC LINE
*/*%BLD04: P (,MVAID) MOVE STATIC DISP. OPTIONS F AND E */
*    OPTIONS FOR STATIC DISPLAY ARE   *F   *E
         MVI   CNTRL2+N3,FORWARD  PUT F OPT.   IN CONTROL 2
         MVI   CNTRL3+N3,ERASE    PUT E OPT.   IN CONTROL 3
         B     MVAID               BR TO MOVE IN AREA ID
CNTRLDD  EQU   *
*/*CNTRLDD: D (YES,MVHOLD,NO,%BLD05) DYN. DISP. IN HOLD MODE */
         TM    DCMADFLG,DCMAHOLD   Q. DYNAMIC DISPLAY IN HOLD MODE
         BO    MVHOLD              BR TO MOVE HOLD OPTIONS
*    OPTIONS FOR DISPLAY IN UPDATE MODE ARE   *PT   *H
*/*%BLD05: P (,MVAID) MOVE UPDATE OPTIONS PT AND H INTO LINE */
         MVI   CNTRL2+N3,PT1      PUT P OPT.   IN CONTROL 2
         MVI   CNTRL2+N4,PT2        PUT M OPT.   IN CONTROL 2
         MVI   CNTRL3+N3,HOLD     PUT H OPT.   IN CONTROL 2
         B     MVAID               BR TO MOVE IN AREA ID
*/*MVHOLD: P (,MVAID) MOVE HOLD MODE OPTIONS F AND U INTO LINE */
MVHOLD   EQU   *
*    OPTIONS DYNAMIC SISPLAY IN HOLD MODE ARE   *F    *U
         MVI   CNTRL2+N3,FORWARD  PUT F OPT. IN CONTROL 2
         MVI   CNTRL2+N4,BLANK    MOVE IN BLANK               MH  M2517
         MVI   CNTRL3+N3,UPDATE   PUT U OPT.   IN CONTROL 2
MVAID    EQU   *
*/*MVAID: P (,IODISP) CONVERT CONS. ID AND MOVE IT AND AREA ID INTO
*/*LINE */
*   MOVE AREA ID IN -- CCA
*    THIS CODE WILL CONVERT HEX ID TO EBCDIC
         SR    X4,X4               CLEAR REG
         IC    X4,UCMID           GET CONSOLE ID (IN HEX)
         CVD   X4,DCMPACK         CONVERT TO PACKED DECIMAL
         UNPK  DCMPACK(N3),DCMPACK+N6(N2) UNPACK NUMBER
         OI    DCMPACK+N2,CF0    FIX SIGN
         CLI   DCMPACK+N1,CF0    IS FIRST DIGIT = TO ZERO
         BNE   MOVE               NO--
         MVI   DCMPACK+N1,BLANK  REPLACE ZERO WITH A BLANK
MOVE     EQU   *
         MVC   AREAID+N1(N2),DCMPACK+N1 MOVE CC NO. TO CONTROL LINE
         MVC   AREAID+N3(N1),DCMAID MOVE AREA ID TO CONTROL LINE
         EJECT
***********************************************************************
IODISP   EQU   *
*/*IODISP: P (,XCTL) INDICATE WRITE DISPLAY */
         L     XFBRANCH,DCMIORTN   LOAD IO ROUTINE ADDRESS
*                                  FOR EXIT TO IEECVET(H,P,R, OR U)
XCTL     EQU   *
*/*XCTL: R RETURN */
         L     X1PARM,DCMCXSVE     RESTORE CXSA ADDRESS
         BR    XFBRANCH            EXIT ADDRESS ALREADY SET
         SPACE 2
*
*    THE FOLLOWING CODE MOVES CONTROL LINE TITLE FROM SCREEN IMAGE
IMAGE    EQU   *
*/*IMAGE: P (,MVCNTRL) MOVE TITLE FROM SCREEN IMAGE BUFFER LINE */
         SR    X3,X3               CLEAR REG
         IC    X3,DCMATOP          PICK UP TOP LINE NO.
         BCTR  X3,N0               DECREMENT BY ONE
         MH    X3,DCMCORLN       GET DISPLACE MENT INTO MSG AREA S21003
         A     X3,DCMASCRN         ADD MSG AREA START ADDR
         MVC   TITLE(L'TITLE),N0(X3) MOVE TITLE
         B     MVCNTRL             CONTINUE
***********************************************************************
         EJECT
*    THIS ROUTINE WILL TURN THE MAJOR WQE BIT OFF WHICH
*    CORRESPONDS TO THE BIT NUMBER OF THE CONSOLE ID.
*    TURNING THE BIT OFF WILL TELL OTHER ROUTINES TO DEQUEUE
*    THE WQE FROM THIS CONSOLE'S WQE OUTPUT QUEUE.
*/* E MASKRTN */
MASKRTN  EQU   *
         L     X4,DCMAMJWQ         LOAD CONSOLE OUTPUT Q PT
*/*%MSK01: P (,%MSK02) LOAD OUTPUT QUEUE PT */
         L     MAJWQER,N0(X4)    LOAD MAJOR WQE ADDR
*/*%MSK02: P (,%MSK03) LOAD MAJOR WQE POINTER AND BASE IT */
         LA    MAJWQER,N0(MAJWQER) CLEAR HIGH BYTE
         USING WMJM,MAJWQER        ESTABLISH MAJOR WQE BASE R
*/*%MSK03: P (,%MSK04) GET ADDR OF CONSOLE'S FRAME FULL DBL WRD */
         LA    FLDADR,WMJMCONS      GET CONSOLE'S  FRAME FULL BIT
         DROP  MAJWQER
         SR    R4,R4              CLEAR REG
         SR    R6,R6              CLEAR REG
         IC    R6,UCMID           LOAD CONSOLE ID
*/*%MSK04: P (,%MSK05) LOAD CONSOLE ID; LOAD 64 MAX. BIT NO. */
         LA    R3,N64             PRIME REG WITH MAXIMUM BIT NO.
*/*%MSK05: P (,%MSK06) SHIFT DOUBLE REG BY DIFFERENCE BET. MAX. BIT NO.
*/*AND CONS. ID */
         LA    R5,N1              REG 5 = 1
         SR    R3,R6              SUBTRACT ID BIT FROM MAXIMUM BIT NO.
*    NOTE: THIS DYNAMIC SHIFT INSTRUCTION SHIFTS REGS 4 AND 5 TO THE
*          LEFT BY THE NUMBER CONTAINED IN REG 3.
         SLDL  R4,N0(R3)          SHIFT BIT BY REMAINDER IN REG 3
*/*%MSK06: D (YES,OK1,NO,NEXTREG) IS BIT IN FIRST 4 BYTES */
         N     R4,N0(FLDADR)      TEST FOR BIT IN FIELD 1
         BNZ   OK1                BRANCH IF FOUND TO BE ON
         N     R5,N4(FLDADR)      TEST FOR BIT IN FIELD 2
         BNZ   NEXTREG            BRANCH IF FOUND TO BE ON
NOTON    EQU   *
         BR    RETURN              THE BIT IS NOT ON
OK1      EQU   *
*/*OK1: P (,%MSK07) TURN BIT OFF IN FIRST WORD */
         ST    R4,DCMDSAV          STORE MASK
         XC    N0(N4,FLDADR),DCMDSAV EXCLUSIVE OR BIT OFF
*/*%MSK07: R RETURN TO CALLER */
         BR    RETURN
NEXTREG  EQU   *
*/*NEXTREG: P (,%MSK07) TURN BIT OFF IN SECOND WORD */
         ST    R5,DCMDSAV          STORE MASK
         XC    N4(N4,FLDADR),DCMDSAV EXCLUSIVE OR BIT OFF
         BR    RETURN
*
***********************************************************************
         EJECT
********************************************************************
*   EXECUTED INSTRUCTIONS
*
BLANKWRT MVC   N1(N0,X5),N0(X5) EXEC. FOR BLANKING WRITE AREA
*
********************************************************************
*       CONSTANTS
********************************************************************
TEN      DC    F'10'               CONSTANT
TWO      DC    H'2'                CONSTANT
FOUR     DC    H'4'                CONSTANT
FIVE     DC    H'5'                CONSTANT
CLAST    DC    C'LAST'             LAST
KDF      DC    C'D,F '             CONSTANT FOR K D,F
KDH      DC    C'D,H '             CONSTANT FOR K D,H
KDU      DC    C'D,U '             CONSTANT FOR K D,U
CFRAME   DC    C'FRAME'
********************************************************************
         EJECT
********************************************************************
*        DSECTS
*    ALL DSECTS FOLLOW THIS POINT
*
DCONTROL DSECT
* CONTROL LINE OF AN OUT OF LINE DISPLAY
         DS    0XL74
TITLE    DS    XL37                TITLE
FRAME    DS    XL11                FRAME NUMBER
CNTRL1   DS    XL7                 CONTROL CHARACTER 1                 X
                                        (RESERVED FOR BACKWARD         X
                                        FRAMING)
ASTERISK EQU   C'*'                INDICATES DETECTABLE FIELD
CNTRL2   DS    XL8                 CONTROL CHARACTER 2
FORWARD  EQU   C'F'                     FRAME FORWARD
PT1      EQU   C'P'                     STOP
PT2      EQU   C'T'                          TRACK
CNTRL3   DS    XL7                 CONTROL CHARACTER 3
ERASE    EQU   C'E'                     ERASE DISPLAY
HOLD     EQU   C'H'                     HOLD DYNAMIC DISPLAY
UPDATE   EQU   C'U'                     UPDATE DYNAMIC DISPLAY
AREAID   DS    XL4                 AREA ID - CCA
         EJECT
         IEERDCM
         EJECT
         IHACTM  CXSA
         EJECT
         IEECUCM FORMAT=NEW
         EJECT
         IEETDCM
         EJECT
KPARM    DSECT
         IEECVMAP KPARAM
         EJECT
         IHAWQE  DSECT=YES
***********************************************************************
*/*IEECVFTN: END */
         END
