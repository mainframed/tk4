         TITLE 'IEECVFTO -- STATUS DISPLAY INTERFACE 4'
IEECVFTO CSECT
         SPACE 2
* THIS ROUTINE WAS CREATED FOR STATUS DISPLAY SUPPORT, LINE ITEM 21002,
*    OS RELEASE 21
         SPACE 2
*
* STATUS -- CHANGE LEVEL 0
*
* APARS FIXED --- ZA14992
*
* FUNCTION -- OUTPUT OF A DISPLAY WHICH OVERLAYS MESSAGES
*    1) MOVE 3 LINES AT A TIME OF A STATUS DISPLAY FROM THE
*    WQE'S INTO A WRITE AREA IN THE DISPLAY CONTROL MODULE (DCM),
*    FREE THE WQE'S, AND INDICATE TO THE I/O MODULES TO WRITE
*    THE DISPLAY TO THE SCREEN.
*    2) ON THE LAST FRAME OF A DISPLAY, BLANK THE REMAINDER OF
*    THE DISPLAY AREA ON THE SCREEN, 3 LINES AT A TIME.
*
* ENTRY POINT -- IEECVFTO, FROM IEECVFTM
*
* INPUT
*    1) REGISTER 1 - POINTER TO CXSA
*    2) REGISTER 7 - POINTER TO SACB
*
* OUTPUT
*    1) REGISTER 1 - POINTER TO CXSA
*    2) WRITE AREA IN DCM SET UP FOR A WRITE INFORMATIONAL
*    DISPLAY BY THE I/O ROUTINE
*    3) FIELDS IN SACB AND SSCT TO REFLECT STATUS OF DISPLAY
*
* EXTERNAL REFERENCES -- NONE
*
* EXITS,NORMAL
*    1) DEVICE DEPENDENT I/O MODULE
*
* EXITS,ERROR -- NONE
*
* TABLES/WORK AREAS
*    1) UNIT CONTROL MODULE - UCM
*    2) RESIDENT PORTION OF THE DISPLAY CONTROL MODULE - DCM
*    (INCLUDING SCREEN AREA CONTROL BLOCKS - SACB'S)
*    3) TRANSIENT PORTION OF THE DISPLAY CONTROL MODULE
*
* ATTRIBUTES -- REFRESHABLE, PRIVILEGED, TYPE 4 SVC
*    DISABLED WHEN DECREMENTING USE COUNTS OF MINOR WQE'S
*
* CHARACTER CODE DEPENDENCY -- THE OPERATION OF THIS MODULE DOES
*    NOT DEPEND ON A PARTICULAR INTERNAL REPRESENTATION OF THE
*    EXTERNAL CHARACTER SET
*
         EJECT
* REGISTER USAGE
X1PARM   EQU   1
XERTRN   EQU   14
XFBRANCH EQU   15
R0       EQU   0                   REG 0
R1       EQU   1                   PARAMETER REGISTER
WORKR    EQU   2                   WORK REG
WORK1    EQU   3                   WORK REG
EVEN     EQU   4                   WORK REG
ODD      EQU   5                   WORK REG
RDCMBASE EQU   6                   RESIDENT PORTION OF DCM BASE
SACBBASE EQU   7                   SCREEN AREA CONTROL BLOCK BASE
TDCMBASE EQU   8                   TRANSIENT PORTION OF DCM BASE
OUTQREG  EQU   9                   POINTER TO CONSOLE OUTPUT           X
                                        QUEUE ENTRY
UCMEBASE EQU   10                  UCM ENTRY BASE
WQEBASE  EQU   11                  WQE BASE
MYBASE   EQU   12                  BASE REGISTER FOR THIS MODULE
CXSABASE EQU   13                  CXSA BASE
RETURNR  EQU   14                  RETURN REGISTER
LINKR    EQU   14                  FIRST LEVEL LINK REG
LINK1    EQU   15                  SECOND LEVEL LINK REGISTER
R15      EQU   15
         EJECT
* ESTABLISH ADDRESSABILITY
         SPACE 2
         BALR  MYBASE,0
         USING *,MYBASE            BASE THIS MODULE
         B     BEGIN
         DC    CL8'IEECVFTO'       MODULE NAME                 Y02958
         DC    CL8'&SYSDATE',CL56' '  DATE AND PATCH AREA      Y02958
BEGIN    EQU   *
         LR    CXSABASE,R1         GET CXSA ADDRESS
         USING CXSA,CXSABASE       BASE CXSA
         L     UCMEBASE,CSAUCM     GET ADDRESS OF UCM ENTRY
         USING UCMLIST,UCMEBASE    BASE UCM ENTRY
         L     RDCMBASE,UCMXB      GET ADDRESS OF RESIDENT DCM
         USING DCMTSRT,RDCMBASE      BASE RESIDENT DCM
         L     TDCMBASE,DCMADTRN   GET ADDRESS OF TRANSIENT DCM
         USING DCMSTRT,TDCMBASE      BASE TRANSIENT DCM
*        SACBBASE IS PASSED FROM INTERFACE 2
         USING DCMACB,SACBBASE     BASE SACB
         USING WMJM,WQEBASE        BASE WQE'S
         MVC   DCMTRACE(DCMTRLEN),DCMTRAC2 SHIFT OLD TRACE ENTRIES
         MVI   DCMTREN1,ID1        PUT CSECT ID INTO
         MVI   DCMTREN2,ID2        NEW TRACE ENTRY
         L     XFBRANCH,CSAXB      ADDRESS GETLOCK SUBROUTINE
         LR    X1PARM,CXSABASE     PASS  CXSA ADDRESS IN REG 1
         BALR  XERTRN,XFBRANCH     OBTAIN LOCKS
         SPACE 3
* INITIALIZATION
         SPACE 2
         L     OUTQREG,DCMAMJWQ    GET POINTER TO CONSOLE OUTPUT       X
                                        QUEUE ENTRY
         USING CQE,OUTQREG         CONSOLE Q ADDRESSABILITY   MB Y02958
         XC    DCMBYTCT(E2),DCMBYTCT ZERO BYTE COUNT FOR OUTPUT
         EJECT
         TM    DCMAFLG2,DCMARCON   Q. REWRITE CONTROL LINE
         BO    RCON                YES, BRANCH TO DO SO
         TM    DCMAFLG1,DCMABL     Q. BLANK REST OF AREA
         BO    BLNKREST            YES, GO BLANK IT
         TM    DCMAFLG2,DCMAWCON   Q. CONTROL LINE TO BE WRITTEN
         BNO   WRMIN               NO, BRANCH TO WRITE FROM            X
                                        MINOR WQE'S
         SPACE 2
* PUT CONTROL LINE IN FIRST LINE OF WRITE AREA FIRST TIME THROUGH
         NI    DCMAFLG2,XFF-DCMAWCON TURN OFF WRITE CONTROL FLAG
         L     WORKR,DCMAINS       GET ADDRESS OF FIRST LINE OF        X
                                        WRITE AREA (INSTRUCTION        X
                                        LINE)
         BAL   LINKR,BLDCNTRL      BUILD CONTROL LINE IN FIRST         X
                                        LINE OF WRITE AREA
         SPACE
*    INDICATE CONTROL LINE IN SSCT
         BAL   LINK1,FINDSSCT      GET SSCT ENTRY POINTER IN           X
                                        WORKR
         OI    E0(WORKR),DCMSECCL  INDICATE CONTROL LINE IN SSCT
         SPACE
*    INCREMENT ROW IN SACB BY ONE
         BAL   LINK1,UPDTEROW      INCREMENT ROW NUMBER
         SPACE
         TM    WMJMLTYP,WMJMLTYD   Q. END INDICATED
         BNO   TSTMIN              NO, LOOK FOR MINORS TO WRITE
         OI    DCMAFLG1,DCMADEND   INDICATE END IN SACB
         B     END1                GO HANDLE END
         DROP  WQEBASE
         USING WMNM,WQEBASE         BASE WQE
         SPACE
TSTMIN   EQU   *
         L     WQEBASE,DCMAMIN     GET POINTER TO NEXT MINOR TO        X
                                        BE WRITTEN
         LTR   WQEBASE,WQEBASE     ANY MINORS TO BE WRITTEN
         BZ    INFDEXIT            NO, OUTPUT CONTROL LINE
         B     LINE2               BRANCH TO FILL LINE 2 OF            X
                                        WRITE AREA
         EJECT
WRMIN    EQU   *
         MVC   DCMLINEN(E1),DCMAROW  INDICATE NEXT ROW TO              X
                                        WRITE TO
         L     WQEBASE,DCMAMIN     GET POINTER TO NEXT MINOR TO        X
                                        BE WRITTEN
         L     WORKR,DCMAINS       GET ADDRESS OF FIRST LINE OF        X
                                        WRITE AREA (INSTRUCTION        X
                                        LINE)
         BAL   LINKR,MOVELINE      MOVE LINE INTO WRITE AREA
         SPACE 2
LINE2    EQU   *
         L     WQEBASE,DCMAMIN     GET POINTER TO NEXT MINOR TO        X
                                        BE WRITTEN
         L     WORKR,DCMAENTR      GET ADDRESS OF SECOND LINE OF       X
                                        WRITE AREA (LINE 1 OF          X
                                        ENTRY AREA)
         BAL   LINKR,MOVELINE      MOVE LINE INTO WRITE AREA
         SPACE 2
LINE3    EQU   *
         L     WQEBASE,DCMAMIN     GET POINTER TO NEXT MINOR TO        X
                                        BE WRITTEN
         L     WORKR,DCMAENTR      GET ADDRESS OF ENTRY AREA
         AH    WORKR,DCMCORLN      ADD LENGTH OF A LINE TO GET         X
                                        POINTER TO THIRD LINE OF       X
                                        WRITE AREA
*                                       (LINE 2 OF ENTRY AREA)
         BAL   LINKR,MOVELINE      MOVE LINE INTO WRITE AREA
         SPACE 2
* WRITE AREA FULL
*    AT THIS POINT THE WRITE AREA IS FULL AND THERE ARE MORE
* LINES OF THE DISPLAY ON THE QUEUE.  THE WRITE AREA IS OUTPUT
* AND CONTROL WILL BE RETURNED TO CONTINUE WRITING THE DISPLAY.
         SPACE
         B     INFDEXIT            BRANCH TO ENABLE INTERRUPTS         X
                                        AND EXIT TO I/O ROUTINE        X
                                        TO WRITE 3 LINES
         EJECT
***********************************************************************
*                                                                     *
* MOVE LINE SUBROUTINE                                                *
*    MOVE TEXT FROM MINOR WQE TO INDICATED LINE OF WRITE AREA         *
* AND TAKE CARE OF ASSOCIATED HOUSEKEEPING.  FREE MINOR WQE.          *
*    INPUT - WORKR - POINTS TO LINE OF WRITE AREA                     *
*            WQEBASE - POINTS TO MINOR TO BE WRITTEN                  *
*            BASE REGS - SACBBASE, TDCMBASE, UCMEBASE, OUTQREG        *
*    OUTPUT - BIT SETTINGS IN SACB, SSCT                              *
*            LINE MOVED INTO WRITE AREA                               *
*            MINOR POINTER IN SACB                                    *
*            INCREMENTS DCMBYTCT BY LENGTH OF ONE LINE                *
*            UPDATES DCMAROW                                          *
*    EXITS - I/O MODULE IF ONE OF THE FOLLOWING:                      *
*              1) NO MINOR ON Q AFTER THE ONE JUST USED               *
*              2) FRAME FULL CONDITION IS REACHED                     *
*              3) END CONDITION IS FOUND (AND AT LEAST ONE LINE       *
*                 TO WRITE)                                           *
*            INTERFACE 2 - IF END IS FOUND AND ALL MINORS HAVE        *
*              ALREADY BEEN WRITTEN                                   *
*            RETURN - IF FRAME NOT FULL AND MORE MINORS ON QUEUE      *
*    REGISTER USAGE - DESTROYS CONTENTS OF FOLLOWING REGS:            *
*                        WORKR,WORK1,LINK1                            *
*            LINKR - LINK REGISTER                                    *
*                                                                     *
***********************************************************************
         SPACE 2
MOVELINE EQU   *
         CLI   WMNMTL1,E0          IS TEXT LENGTH ZERO
         BNE   TEXT                NO, TEXT PRESENT - BRANCH
         TM    WMNMLT1,WMNMLT1D    Q. MINOR INDICATE END      MF
         BO    INDEND              YES, GO INDICATE END       MF
*     IF THE TEXT LENGTH IS ZERO AND THE MINOR DOES NOT       MF
*     INDICATE END, THEN THE MINOR IS STILL BEING BUILT AND   MF
*     MUST NOT BE USED.                                       MF
         NI    DCMAFLG2,XFF-DCMALMIN    TURN OFF LAST MINOR   MF       X
                                        SAVED FLAG            MF
         B     INFDEXIT            EXIT                       MF
         SPACE
TEXT     EQU   *
*    MOVE TEXT FROM MINOR WQE TO WRITE AREA
         BAL   LINK1,BLNKLINE      BLANK OUT LINE OF WRITE AREA
         SR    WORK1,WORK1         CLEAR REG
         IC    WORK1,WMNMTL1       GET LENGTH OF TEXT
         BCTR  WORK1,E0            DECREMENT BY ONE
         EX    WORK1,MOVETEXT      MOVE TEXT FROM MINOR TO             X
                                        WRITE AREA
         B     SETSSCT             BRANCH TO SET SSCT FLAGS
MOVETEXT MVC   E0(E0,WORKR),WMNMTXT1  MOVE TEXT
         SPACE 2
SETSSCT  EQU   *
*    INDICATE LABEL OR DATA LINE IN SSCT
         BAL   LINK1,FINDSSCT      GET SSCT ENTRY POINTER IN           X
                                        WORKR
         NI    E0(WORKR),XFF-DCMSECBL   TURN OFF BLANK LINE FLAG
         TM    WMNMLT1,WMNMLT1B    Q. MINOR WQE FOR LABEL LINE
         BO    LABEL               YES, BRANCH TO INDICATE LABEL
         OI    E0(WORKR),DCMSECDL  INDICATE DATA LINE IN SSCT
         B     OVERLABL            BRANCH AROUND
LABEL    EQU   *
         OI    E0(WORKR),DCMSECLL  INDICATE LABEL LINE IN SSCT
OVERLABL EQU   *
         SPACE 2
*    INCREMENT ROW IN SACB BY ONE
         BAL   LINK1,UPDTEROW      INCREMENT ROW NUMBER AND SET        X
                                        FLAG IF FULL FRAME
         SPACE 2
*    ADD LENGTH OF ONE LINE TO BYTE COUNT FOR WRITE
         LH    WORK1,DCMBYTCT      GET CURRENT BYTE COUNT
         AH    WORK1,DCMCORLN      ADD LENGTH OF ONE LINE
         STH   WORK1,DCMBYTCT      STORE BYTE COUNT
         SPACE 2
*    SAVE SOME INFORMATION BEFORE MINOR IS FREED
         TM    WMNMLT1,WMNMLT1D    Q. MINOR INDICATE END
         BNO   SAVENEXT            NO, BRANCH TO SAVE ADDRESS          X
                                        OF NEXT MINOR
INDEND   EQU   *
         OI    DCMAFLG1,DCMADEND   YES, INDICATE END OF DISPLAY
         B     FREEMIN             BRANCH TO FREE MINOR
         SPACE 2
SAVENEXT EQU   *
*    TEST FOR MORE MINORS ON QUEUE AND SAVE POINTER TO MINOR
         L     WORK1,WMNMNX1-E1    GET POINTER TO NEXT MINOR
         LA    WORK1,E0(WORK1)     ZERO HIGH ORDER BYTE
         LTR   WORK1,WORK1         Q. ANY MORE MINORS
         BZ    NOMORMIN            NO, BRANCH TO SAVE POINTER          X
                                        TO MINOR JUST USED
         NI    DCMAFLG2,N255-DCMALMIN TF LAST MIN PTR SAVED   @ZA14992
         ST    WORK1,DCMAMIN       SAVE POINTER TO NEXT MINOR
         B     FREEMIN             BRANCH TO FREE MINOR JUST           X
                                        USED
NOMORMIN EQU   *
         OI    DCMAFLG2,DCMALMIN   INDICATE POINTER TO LAST            X
                                        MINOR OUTPUT SAVED             X
                                        (RATHER THAN NEXT ON Q)
         ST    WQEBASE,DCMAMIN     SAVE POINTER TO MINOR JUST          X
                                        USED
         SPACE 2
FREEMIN  EQU   *
*    FREE MINOR WQE
         SR    WORK1,WORK1         CLEAR REG
         IC    WORK1,WMNMUC1       GET USE COUNT FROM MINOR
         BCTR  WORK1,E0            DECREMENT USE COUNT BY ONE
         STC   WORK1,WMNMUC1       STORE NEW USE COUNT
         LTR   WORK1,WORK1         Q. IS USE COUNT ZERO
         BNZ   TESTEND             NO, BRANCH TO TEST FOR END
DEQ      EQU   *
         OI    UCMSTS,UCMTB        INDICATE DEQUEUE WORK TO DO
         L     WORK1,CQEWQE        GET POINTER TO MAJOR WQE   MB Y02958
         DROP  WQEBASE              DROP OLD REG             Y02958
         USING WMJM,WORK1          BASE WQE
         OI    WMJMMLW,WMJMMLWG    INDICATE IN MAJOR THAT MLWTO
*                                  CHAIN NEEDS SERVICING.
         DROP  WORK1
         USING WMNM,WQEBASE        RESET BASE           Y02958
         SPACE 2
TESTEND  EQU   *
*     TEST FOR  END OF DISPLAY
         TM    DCMAFLG1,DCMADEND   Q. END OF DISPLAY FOUND
         BO    END1                YES, BRANCH TO HANDLE END
         SPACE
*    TEST FOR FULL FRAME
         TM    DCMAFLG1,DCMAFULL   Q. FULL FRAME
         BO    FRAMFUL1            YES, BRANCH TO HANDLE
         SPACE 2
*    IF MORE MINORS ON Q, RETURN FROM SUBROUTINE, OTHERWISE
*    OUTPUT WHAT WE HAVE
         TM    DCMAFLG2,DCMALMIN   Q. POINTER TO LAST MINOR            X
                                        SAVED (BECAUSE NO MORE         X
                                        ON QUEUE)
         BO    INFDEXIT            YES, OUTPUT WHAT WE HAVE
         BR    LINKR               MORE MINORS SO RETURN FROM          X
                                        SUBROUTINE
         EJECT
FRAMFUL1 EQU   *
* FRAME FULL
         SPACE
         BAL   LINK1,INDFRFL       INDICATE FRAME FULL IN MAJOR
         SPACE
CONTFF   EQU   *
         NI    DCMAFLG1,XFF-DCMAFRPR  TURN OFF FRAMING IN              X
                                        PROGRESS FLAG
         SPACE
*    FIND FIRST LINE TO BE WRITTEN NEXT FRAME (FIRST DATA LINE)
         SR    WORK1,WORK1         CLEAR REG
         IC    WORK1,DCMATOP       GET LINE NO. OF TOP LINE
         BCTR  WORK1,E0            SUBTRACT ONE
         L     WORKR,DCMADSEC      GET ADDRESS OF SSCT
         AR    WORKR,WORK1         WORKR NOW POINTS TO SSCT BYTE       X
                                        FOR TOP LINE
SRCHDATA EQU   *
         LA    WORK1,E1(WORK1)     UPDATE LINE NO.
         TM    E0(WORKR),DCMSECDL  Q. DATA LINE
         BO    DATALFND            YES, SAVE LINE NO.
         LA    WORKR,E1(WORKR)     POINT TO NEXT SSCT BYTE
         B     SRCHDATA            CONTINUE SEARCH (MUST ALWAYS        X
                                        FIND ONE SINCE FRAME           X
                                        FULL - AT LEAST 4 LINES-
*                                       CANNOT BE REACHED BY           X
                                        CONTROL LINE AND 2 LABEL       X
                                        LINES)
DATALFND EQU   *
         STC   WORK1,DCMAROW       STORE AS NEXT LINE TO BE            X
                                        WRITTEN (NEXT FRAME)
         SPACE
         B     INFDEXIT            EXIT TO I/O ROUTINE
         EJECT
END1     EQU   *
* END OF DISPLAY FOUND
         OI    DCMAFLG2,DCMARCON   INDICATE REWRITE CONTROL LINE
         TM    DCMAFLG1,DCMAFULL   Q. FRAME FULL
         BO    TESTIO              YES, BRANCH TO TEST FOR I/O
         OI    DCMAFLG1,DCMABL     INDICATE IN SACB TO BLANK           X
                                        REST OF AREA
TESTIO   EQU   *
         LH    WORK1,DCMBYTCT      GET BYTE COUNT FOR WRITE
         LTR   WORK1,WORK1         Q. BYTE COUNT ZERO
         BZ    RCON                YES, NO I/O TO DO, SO BRANCH        X
                                        TO REWRITE CONTROL LINE
         B     INFDEXIT            BRANCH TO ENABLE INTERRUPTS         X
                                        AND EXIT TO I/O ROUTINE
         SPACE 5
* END OF MOVELINE SUBROUTINE
         EJECT
* BLANK REST OF AREA
*    AFTER THE LAST (END) LINE OF THE DISPLAY HAS BEEN WRITTEN,
* THE REST OF THE LINES OF THE FRAME MUST BE BLANKED OUT.
         SPACE
BLNKREST EQU   *
         SPACE
         MVC   DCMLINEN(E1),DCMAROW  INDICATE LINE TO WRITE TO
         L     WORKR,DCMAINS       GET ADDRESS OF FIRST LINE OF        X
                                        WRITE AREA (INSTRUCTION        X
                                        LINE)
         BAL   LINKR,MOVEBLNK      MOVE BLANKS INTO LINE
         L     WORKR,DCMAENTR      GET ADDRESS OF SECOND LINE OF       X
                                        WRITE AREA (LINE 1 OF          X
                                        ENTRY AREA)
         BAL   LINKR,MOVEBLNK      MOVE BLANKS INTO LINE
         L     WORKR,DCMAENTR      GET ADDRESS OF ENTRY AREA
         AH    WORKR,DCMCORLN      ADD LENGTH OF A LINE TO GET         X
                                        POINTER TO THIRD LINE OF       X
                                        WRITE AREA
*                                       (LINE 2 OF ENTRY AREA)
         BAL   LINKR,MOVEBLNK      MOVE BLANKS INTO LINE
         SPACE
*    AT THIS POINT THE WRITE AREA IS FULL OF BLANKS AND IS
* OUTPUT.
         B     INFDEXIT            EXIT TO I/O ROUTINE TO OUTPUT       X
                                        3 LINES OF BLANKS
         EJECT
***********************************************************************
*                                                                     *
* MOVE BLANK LINE INTO WRITE AREA                                     *
*    PARELLELS MOVE LINE SUBROUTINE BUT WRITES OUT BLANK LINES        *
* AT THE END OF THE LAST FRAME AND THEN FREES THE MAJOR WQE.          *
*    INPUT - WORKR - POINTS TO LINE OF WRITE AREA                     *
*            BASE REGS - SACBBASE, OUTQREG, TDCMBASE, UCMEBASE        *
*    OUTPUT - BLANK LINE IN WRITE AREA                                *
*            BIT SETTINGS IN SACB, SSCT                               *
*            INCREMENTS DCMBYTCT AND DCMAROW                          *
*    EXITS - I/O ROUTINE ON FULL FRAME                                *
*            RETURN WHEN NOT FULL FRAME                               *
*    REGISTER USAGE - DESTROYS CONTENTS OF FOLLOWING REGS:            *
*                   LINK1, WORK1, WORKR                               *
*            LINKR - LINK REG                                         *
*                                                                     *
***********************************************************************
         SPACE 2
MOVEBLNK EQU   *
         BAL   LINK1,BLNKLINE      BLANK OUT LINE OF WRITE AREA
         SPACE
*    INDICATE BLANKED LINE IN SSCT
         BAL   LINK1,FINDSSCT      GET SSCT ENTRY POINTER IN           X
                                        WORKR
         OI    E0(WORKR),DCMSECBL  INDICATE BLANKED LINE IN SSCT
         SPACE
*    INCREMENT ROW IN SACB BY ONE
         BAL   LINK1,UPDTEROW      INCREMENT ROW NO. AND SET           X
                                        FLAG IF FULL FRAME
         SPACE
*    ADD LENGTH OF ONE LINE TO BYTE COUNT FOR WRITE
         LH    WORK1,DCMBYTCT      GET CURRENT BYTE COUNT
         AH    WORK1,DCMCORLN      ADD LENGTH OF ONE LINE
         STH   WORK1,DCMBYTCT      STORE BYTE COUNT
         SPACE
*    TEST FOR FRAME FULL
         TM    DCMAFLG1,DCMAFULL   Q. FULL FRAME
         BNOR  LINKR               NO, RETURN FROM SUBROUTINE MB Y02958
         SPACE 2
FRAMFUL2 EQU   *
         NI    DCMAFLG1,XFF-DCMABL TURN OFF BLANK REST OF AREA         X
                                        FLAG IN SACB
FREEMAJ  EQU   *
         NI    DCMAFLG1,XFF-DCMAFRPR  TURN OFF FRAMING IN              X
                                        PROGRESS FLAG
         SPACE
         TM    DCMADFLG,DCMADD     Q. DYNAMIC DISPLAY
         BO    ENDDD               YES, BRANCH TO HANDLE END OF        X
                                        DYNAMIC DISPLAY
         SPACE
         OI    CQEFLAG,CQEAVAIL    INDICATE MAJOR WQE NO LONGER        X
                                   NEEDED BY THIS CONSOLE     MB Y02958
         NI    CQEFLAG,XFF-CQEENTR TURN OFF ENTRY FLAG        MB Y02958
         OI    UCMSTS,UCMTB        INDICATE DEQUEUE WORK NEEDED
         OI    DCMAFLG2,DCMAMJFR   INDICATE MAJOR FREED
         SPACE
         B     INFDEXIT            EXIT TO I/O ROUTINE
         SPACE 2
ENDDD    EQU   *
*      SINCE THIS MODULE HAS CONTROL AT THIS POINT, THE CONTROL
*    LINE IS NOT IN THE SCREEN IMAGE BUFFER AND THE MAJOR WQE
*    MUST BE SAVED FOR POSSIBLE USE BY K D,H OR K D,U TO REBUILD
*    THE CONTROL LINE.  THE FRAME FULL BIT IN THE MAJOR WQE IS
*    TURNED ON SO THAT INTERFACE 2 WILL IGNORE THE MAJOR WHILE
*    IT REMAINS ON THE QUEUE.
         BAL   LINK1,INDFRFL       TURN ON FRAME FULL BIT
         B     INFDEXIT            EXIT TO I/O ROUTINE
         SPACE 2
* END OF MOVEBLNK SUBROUTINE
         EJECT
RCON     EQU   *
* REWRITE CONTROL LINE
         NI    DCMAFLG2,XFF-DCMARCON  TURN REWRITE FLAG OFF
         L     WORKR,DCMAINS       GET ADDRESS OF FIRST LINE OF        X
                                        WRITE AREA (INSTRUCTION)       X
                                        LINE)
         BAL   LINKR,BLDCNTRL      BUILD CONTROL LINE IN FIRST         X
                                        LINE OF WRITE AREA,
*                                       INDICATE WRITE ONE LINE,       X
                                        INDICATE WRITE TO TOP          X
                                        LINE OF AREA
         TM    DCMAFLG1,DCMABL     Q. REENTRY REQUIRED TO BLANK        X
                                        REST OF AREA
         BO    INFDEXIT            YES, EXIT TO I/O ROUTINE
         B     FREEMAJ             NO, FREE MAJOR WQE
         EJECT
***********************************************************************
*                                                                     *
* UPDATE ROW NUMBER                                                   *
*    THIS ROUTINE INCREMENTS THE NEXT ROW TO WRITE FIELD OF THE       *
* SACB AND TESTS FOR A FULL FRAME                                     *
*    INPUT - NONE OTHER THAN CONTROL BLOCKS AND BASE REGS             *
*    OUTPUT - DCMAROW - INCREMENTED BY ONE                            *
*             DCMAFLG1 - DCMAFULL FLAG IS TURNED ON IF UPDATED        *
*                        ROW NUMBER IS OUTSIDE AREA                   *
*    REGISTER USAGE - DESTROYS CONTENTS OF FOLLOWING REGS:            *
*                        WORKR, WORK1                                 *
*              LINK1 - LINK REGISTER                                  *
*                                                                     *
***********************************************************************
         SPACE 2
UPDTEROW EQU   *
*    INCREMENT ROW IN SACB BY ONE
         SR    WORK1,WORK1         CLEAR REG
         IC    WORK1,DCMAROW       GET CURRENT ROW
         LA    WORK1,E1(WORK1)     INCREMENT BY ONE
         STC   WORK1,DCMAROW       STORE IN SACB
         SPACE
*    TEST FOR FULL FRAME
         SR    WORKR,WORKR         CLEAR REG
         IC    WORKR,DCMATOP       GET NO. OF TOP ROW OF AREA
         AH    WORKR,DCMALN        ADD LENGTH OF AREA                  X
                                        WORKR NOW CONTAINS NO.         X
                                        OF FIRST ROW BELOW AREA.
*                                       WORK1 STILL CONTAINS           X
                                        NO. OF NEXT ROW TO BE          X
                                        WRITTEN
         CR    WORK1,WORKR         Q. INSIDE AREA             MF
         BNER  LINK1               YES, RETURN FROM SUBROUTIN MB Y02958
         SPACE
FRAMFUL3 EQU   *
         OI    DCMAFLG1,DCMAFULL   INDICATE FULL FRAME
         BR    LINK1               RETURN FROM SUBROUTINE
     EJECT
***********************************************************************
*                                                                     *
* INDICATE FRAME FULL IN MAJOR WQE                                    *
*    THE FRAME FULL BIT INDICATES TO THE QUEUEING ROUTINE THAT        *
* EVEN IF MORE MINOR WQE'S ARE QUEUED, OUT OF LINE OUTPUT SHOULD      *
* NOT BE INDICATED SINCE NO MORE CAN BE DISPLAYED.  IT ALSO           *
* CAUSES THE MAJOR WQE TO BE IGNORED BY INTERFACE 2 SINCE NO          *
* MORE OF THE DISPLAY CAN BE OUTPUT.                                  *
*    THE ALGORITHM MANIPULATES THE CONSOLE ID TO FIND THE             *
* CORRESPONDING BIT POSITION IN THE DOUBLE WORD FRAME FULL            *
* FIELD.                                                              *
*    INPUT - NONE OTHER THAN CONTROL BLOCKS AND BASE REGS             *
*    OUTPUT - FRAME FULL BIT TURNED ON IN MAJOR WQE                   *
*    REGISTER USAGE - DESTROYS CONTENTS OF FOLLOWING REGS:            *
*                        WORKR, WORK1,ODD,EVEN,WQEBASE                *
*              LINK1 - LINK REGISTER                                  *
*                                                                     *
***********************************************************************
         SPACE 2
INDFRFL  EQU   *
         SR    WORK1,WORK1         CLEAR REG
         IC    WORK1,UCMID         GET CONSOLE ID
         BCTR  WORK1,E0            REDUCE FOR ALGORITHM
         SR    WORKR,WORKR         CLEAR REG
         LA    ODD,E8              GET DIVISOR
         DR    WORKR,ODD           DIVIDE ID
*                                  WORKR IS BIT IN BYTE
*                                  WORK1 IS BYTE IN FIELD
         LA    EVEN,E1             GET BIT
         SRDL  EVEN,E25(WORKR)     CREATE MASK
         DROP  WQEBASE
         USING WMJM,WQEBASE        BASE WQE
         L     WQEBASE,CQEWQE      GET POINTER TO MAJOR WQE   MB Y02958
         LA    EVEN,WMJMCONS(WORK1) POINT TO FRAME FULL BITS     Y02958
         EX    ODD,INDFF           INDICATE FRAME FULL
         BR    LINK1               RETURN FROM INDFRFL SUBROUTINE
         SPACE
INDFF    OI    E0(EVEN),E0         INDICATE FRAME FULL
         EJECT
***********************************************************************
*                                                                     *
* BUILD CONTROL LINE SUBROUTINE                                       *
*    THIS ROUTINE BUILDS THE CONTROL LINE IN THE DCM LINE             *
* INDICATED, INDICATES WRITE TO THE TOP LINE OF THE AREA, AND         *
* INDICATES WRITE ONE LINE.                                           *
*    INPUT - WORKR - POINTS TO THE DCM LINE IN WHICH THE CONTROL      *
*                   LINE IS TO BE BUILT                               *
*            BASE REGISTERS FOR MAJOR WQE, SACB, TDCM                 *
*    OUTPUT - CONTROL LINE BUILT WHERE INDICATED                      *
*            SETS FIELDS DCMBYTCT, DCMLINEN                           *
*    REGISTER USAGE - LINKR - LINK REGISTER                           *
*            DESTROYS CONTENTS OF FOLLOWING REGS: WORK1               *
*                                                                     *
***********************************************************************
         SPACE 2
BLDCNTRL EQU   *
         MVC   DCMBYTCT(E2),DCMCORLN  INDICATE WRITE ONE LINE
         MVC   DCMLINEN(E1),DCMATOP  INDICATE WRITE TO TOP LINE        X
                                        OF AREA
         BAL   LINK1,BLNKLINE      BLANK OUT LINE IN WHICH             X
                                        CONTROL LINE IS TO BE          X
                                        BUILT
         USING DCONTROL,WORKR      BASE CONTROL LINE DSECT
         L     WQEBASE,CQEWQE      BASE MAJOR WQE   MB Y02958
         LH    WORK1,WMJMTXTL      GET LENGTH OF TITLE
         SH    WORK1,C5            SUBTRACT 4 FOR MLWTO ID AND         X
                                        1 FOR EXECUTE
         EX    WORK1,MOVTITLE      MOVE TITLE INTO CONTROL LINE
         SPACE
MOVFRAME EQU   *
         MVC   FRAME+E1(L'CFRAME),CFRAME  MOVE 'FRAME' IN
         TM    DCMAFLG1,DCMADEND   Q. LAST FRAME ON SCREEN
         BO    LAST                YES, BRANCH TO MOVE IN 'LAST'
         CLI   DCMAFR,F0           Q. IS FIRST DIGIT OF FRAME          X
                                        NUMBER ZERO
         BE    ONEDIGIT            YES, BRANCH TO MOVE ONE DIGIT
         MVC   FRAME+E7(E2),DCMAFR MOVE 2-DIGIT FRAME NUMBER IN
         B     MVCNTRL             BRANCH TO MOVE CONTROL CHAR
ONEDIGIT EQU   *
         MVC   FRAME+E8(E1),DCMAFR+E1 MOVE 1-DIGIT FRAME NO. IN
         B     MVCNTRL             BRANCH TO MOVE CONTROL CHAR
LAST     EQU   *
         MVC   FRAME+E7(L'CLAST),CLAST  MOVE 'LAST' IN
         SPACE 2
MVCNTRL  EQU   *
         MVI   CNTRL2+E2,ASTERISK  PUT ASTERISK IN CONTROL 2
         MVI   CNTRL3+E2,ASTERISK  PUT ASTERISK IN CONTROL 3
         TM    DCMADFLG,DCMADD     Q. DYNAMIC DISPLAY
         BO    CNTRLDD             BRANCH TO BUILD DYNAMIC             X
                                        CONTROL CHARACTERS
*    STATIC DISPLAY -- MOVE IN 'F' AND 'E'
         MVI   CNTRL2+E3,FORWARD   MOVE IN 'F' FOR FRAME FORWARD
         MVI   CNTRL3+E3,ERASE     MOVE IN 'E' FOR ERASE
         B     MVAID               BRANCH TO MOVE IN AREA ID
         SPACE
CNTRLDD  EQU   *
         TM    DCMADFLG,DCMAHOLD   Q. DYNAMIC DISPLAY IN               X
                                        HOLD MODE
         BO    MVHOLD              BRANCH TO MOVE HOLD OPTIONS
         SPACE
*    DYNAMIC DISPLAY IN UPDATE MODE -- MOVE IN 'PT' AND 'H'   MB Y02958
         MVI   CNTRL2+E3,PT1       MOVE IN 'PT'               MB Y02958
         MVI   CNTRL2+E4,PT2            FOR STOPTR            MB Y02958
         MVI   CNTRL3+E3,HOLD      MOVE IN 'H' FOR HOLD
         B     MVAID               BRANCH TO MOVE IN AREA ID
         SPACE
MVHOLD   EQU   *
*    DYNAMIC DISPLAY IN HOLD MODE -- MOVE IN 'F' AND 'U'
         MVI   CNTRL2+E3,FORWARD   MOVE IN 'F' FOR FRAME FORWARD
         MVI   CNTRL3+E3,UPDATE    MOVE IN 'U' FOR UPDATE
         SPACE 2
MVAID    EQU   *
* MOVE AREA ID IN -- CCA
*    GET CONSOLE ID -CC- AND CONVERT TO EBCDIC
         SR    WORK1,WORK1         CLEAR REG
         IC    WORK1,UCMID         GET CONSOLE ID
         CVD   WORK1,DCMPACK       CONVERT IT TO DECIMAL
         UNPK  DCMPACK(E3),DCMPACK+E6(E2)  UNPACK IT
         MVC   AREAID+E1(E2),DCMPACK+E1  MOVE IN THE CONSOLE ID
         OI    AREAID+E2,F0        CONVERT SIGN TO ZONE
         CLI   AREAID+E1,F0        IS FIRST DIGIT ZERO
         BNE   GETAID              NO, GET AREA ID
         MVI   AREAID+E1,BLANK     YES, BLANK OUT ZERO
GETAID   EQU   *
*    GET AREA ID
         MVC   AREAID+E3(E1),DCMAID  MOVE AREA ID IN
         SPACE 2
* RETURN FROM SUBROUTINE
         BR    LINKR               RETURN FROM SUBROUTINE
         SPACE 2
* EXECUTED INSTRUCTION
MOVTITLE MVC   TITLE(E0),WMJMTXT   MOVE TITLE INTO CONTROL LINE
         SPACE 2
         DROP  WORKR
         EJECT
***********************************************************************
*                                                                     *
* FINDSSCT SUBROUTINE                                                 *
*    COMPUTES ADDRESS OF SECONDARY SCREEN CONTROL TABLE (SSCT)        *
* ENTRY FOR LINE POINTED TO BY DCMAROW.                               *
*    INPUT - DCMAROW                                                  *
*            TDCMBASE                                                 *
*    OUTPUT- WORKR - POINTER TO SSCT ENTRY                            *
*    REGISTER USAGE - WORKR - REGISTER FOR OUTPUT                     *
*            LINK1 - LINK REGISTER                                    *
*                                                                     *
***********************************************************************
         SPACE 2
FINDSSCT EQU   *
         SR    WORKR,WORKR         CLEAR REG
         IC    WORKR,DCMAROW       GET LINE NUMBER
         BCTR  WORKR,E0            SUBTRACT ONE
         A     WORKR,DCMADSEC      ADD ADDRESS OF BEGINNING OF         X
                                        SSCT
         BR    LINK1
         EJECT
***********************************************************************
*                                                                     *
* BLANK LINE                                                          *
*    THIS ROUTINE BLANKS ONE LINE OF THE SCREEN IMAGE BUFFER IN       *
* THE DCM                                                             *
*    INPUT - WORKR - ADDRESS OF LINE TO BE BLANKED                    *
*    OUTPUT - BLANKED LINE                                            *
*    REGISTER USAGE - DESTROYS CONTENTS OF FOLLOWING REGS:            *
*                        WORK1                                        *
*             LINK1 - LINK REGISTER                                   *
*                                                                     *
***********************************************************************
BLNKLINE EQU   *
         MVI   E0(WORKR),BLANK     MOVE IN ONE BLANK
         LH    WORK1,DCMLGNTH      GET LENGTH OF LINE
         SH    WORK1,C2            DECREMENT LENGTH BY 2
         EX    WORK1,PROP          PROPAGATE BLANK
         BR    LINK1               RETURN FROM SUBROUTINE
PROP     MVC   E1(E0,WORKR),E0(WORKR)  PROPAGATE CHARACTER
         EJECT
*                             EXITS
         SPACE 2
INFDEXIT EQU   *
         OI    DCMIOCM2,DCMWINFD   INDICATE WRITE INFORMATIONAL        X
                                        DISPLAY
IOEXIT   EQU   *
         L     XFBRANCH,DCMIORTN   LOAD IO ROUTINE ADDRESS
         SPACE 2
XCTL     EQU   *
         L     X1PARM,DCMCXSVE     RESTORE CXSA ADDRESS
         BR    XFBRANCH            EXIT TO IEECVET(H,P,R, OR U)
         EJECT
***********************************************************************
*                                                                     *
*                             CONSTANTS                               *
*                                                                     *
***********************************************************************
         SPACE 2
C2       DC    H'2'                CONSTANT
C5       DC    H'5'                CONSTANT
CFRAME   DC    CL5'FRAME'          FRAME
CLAST    DC    CL4'LAST'           LAST
         EJECT
***********************************************************************
*                                                                     *
*                             EQUATES                                 *
*                                                                     *
***********************************************************************
         SPACE 2
ID1      EQU   C'F'                1ST CHARACTER OF CSECT ID
ID2      EQU   C'O'                2ND CHARACTER OF CSECT ID
E0       EQU   0                   NUMBER
E1       EQU   1                   NUMBER
E2       EQU   2                   NUMBER
E3       EQU   3                   NUMBER
E4       EQU   4                   NUMBER
E6       EQU   6                   NUMBER
E8       EQU   8                   NUMBER
E20      EQU   20                  NUMBER
E25      EQU   25                  NUMBER
E7       EQU   7                   NUMBER
         SPACE
Z        EQU   C'Z'                MSG STREAM AREA ID
BLANK    EQU   C' '                BLANK
F0       EQU   C'0'                EBCDIC 0
F1       EQU   C'1'                EBCDIC 1
XFF      EQU   X'FF'               TO TURN OFF BITS
N255     EQU   255
         SPACE
* DESCRIPTOR CODES
DC8      EQU   X'01'               OUT OF LINE CANDIDATE
DC9      EQU   X'80'               INFORMATION REQUESTED BY            X
                                        DISPLAY OR MONITOR
         EJECT
DCONTROL DSECT
* CONTROL LINE OF AN OUT OF LINE DISPLAY
         DS    0XL74
TITLE    DS    XL37                TITLE
FRAME    DS    XL11                FRAME NUMBER
CNTRL1   DS    XL7                 CONTROL CHARACTER 1                 X
                                        (RESERVED FOR BACKWARD         X
                                        FRAMING)
ASTERISK EQU   C'*'                INDICATES DETECTABLE FIELD
CNTRL2   DS    XL8                 CONTROL CHARACTER 2
FORWARD  EQU   C'F'                     FRAME FORWARD
PT1      EQU   C'P'                     STOP
PT2      EQU   C'T'                          TRACK            MB Y02958
CNTRL3   DS    XL7                 CONTROL CHARACTER 3
ERASE    EQU   C'E'                     ERASE DISPLAY
HOLD     EQU   C'H'                     HOLD DYNAMIC DISPLAY
UPDATE   EQU   C'U'                     UPDATE DYNAMIC DISPLAY
AREAID   DS    XL4                 AREA ID - CCA
         EJECT
         IHACTM  CXSA
         EJECT
         IHACTM CQE                                           MB Y02958
         EJECT
         IEECUCM FORMAT=NEW
         EJECT
         IHAWQE  DSECT=YES
         EJECT
         IEERDCM
         EJECT
         IEETDCM
         EJECT
         END
