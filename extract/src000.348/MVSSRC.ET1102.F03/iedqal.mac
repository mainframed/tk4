IEDQAL   TITLE 'IEDQAL - COMPARE AT OFFSET ROUTINE'
IEDQAL   CSECT
***********************************************************************
*                                                                     *
*TITLE 'IEDQAL' - COMPARE AT OFFSET ROUTINE                           *
*                                                                     *
*STATUS -- CHANGE LEVEL                                               *
*                                                                     *
*FUNCTION -- FINDS AND COMPARES THE NEXT CHARACTERS FROM AN           *
*   OFFSET INTO THE BUFFER, TO THE CHARACTERS WHOSE ADDRESS           *
*   IS PASSED TO THE ROUTINE.                                         *
*                                                                     *
*ENTRY POINT -- 'IEDQAL'                                              *
*   CALLING SEQUENCE-                                                 *
*        L     R15,AVTAL                                              *
*        BALR  R14,R15                                                *
*                                                                     *
*   REGISTERS 2-12 ARE SAVED AND RESTORED IN PASSED R13               *
*                                                                     *
*INPUT --                                                             *
*   EXPECTED REGISTER CONTENTS                                        *
*        USING R6,BUFFER DSECT                                        *
*        USING R9,AVT BASE                                            *
*        USING R13,SAVE AREA                                          *
*        USING R15,BASE REGISTER                                      *
*                                                                     *
*   PARAMETERS PASSED -                                               *
*                                                                     *
*      REGISTER 0 - ADDRESS OF CHARACTER STRING FOR COMPARE WITH      *
*                   LENGTH OF STRING IN HI-ORDER BYTE.  (OR ZERO      *
*                   IF LENGTH IS THE FIRST BYTE OF STRING.            *
*      REGISTER 1 - OFFSET OF FIELD IN BUFFER                         *
*      REGISTER 2 - BLANK CHARACTER IF BLANKS ARE TO BE IGNORED       *
*                 - NEGATIVE IF BLANKS ARE CHARACTERS                 *
*                                                                     *
*OUTPUT --                                                            *
*   PARAMETERS RETURNED -                                             *
*      REGISTER 0 - UPDATED OFFSET                                    *
*      REGISTER 1 - ADDRESS OF LAST CHARACTER FOUND                   *
*      REGISTER 15- COUNT OF CHARACTERS COMPARED EQUAL                *
*      AVTDOUBL  -- CHARACTERS FOUND                                  *
*EXTERNAL REFERENCES --                                               *
*                                                                     *
*   TAVTD -- AVTDOUBL AS WORK AREA                                    *
*   BUFFER CURRENTLY BEING PROCESSED                                  *
*                                                                     *
*EXITS, NORMAL -- RETURN TO CALLER VIA A BRANCH REGISTER 14           *
*   PARAMETER LIST (IN RECB) AND REGISTER 15 RETURN CODE              *
*                                                                     *
***********************************************************************
         EJECT
********* REGISTER EQUATES *********
         SPACE
R0       EQU   0
RPARM    EQU   1
RBLANK   EQU   2
RUNIT    EQU   3
RCNTS    EQU   4
RDATA    EQU   5         DATA ADDR WITHIN UNIT
RPREFIX  EQU   6         BUFFER (PARAMETER REGISTER)
ROFF     EQU   7         OFFSET OF DATA
RCHAR    EQU   8         ADDR OF DATA TO COMPARE
RAVT     EQU   9         AVT BASE
RWORK    EQU   10        WORK REGISTER
RCNT     EQU   11        COUNT OF CHARACTERS COMPARED
R12      EQU   12
RSAVE    EQU   13        SAVE AREA ADDRESS
R14      EQU   14        RETURN REGISTER
RBASE    EQU   15        MODULE BASE REGISTER
         SPACE 2
********* OTHER EQUATES *********
         SPACE 1
TFOUR    EQU   24
EQ       EQU   8         CONDITION CODE EQUAL
SAVREG   EQU   12        OFFSET IN SAVE AREA FOR STORE MULTI
MAXCNT   EQU   8         MAX CHARACTER COUNT
ONE      EQU   1         INCREMENT AMOUNT
         EJECT
         USING IEDQAL01,R12
         USING IEDQAVTD,RAVT
         USING IEDQPRF,RPREFIX
         SPACE 2
IEDQAL01 EQU   *
         STM   R14,R12,SAVREG(RSAVE)   SAVE REGISTERS
         LR    R12,RBASE
IEDQAL   IEDHJN ENTER
         SR    RBASE,RBASE              INSURE POSITIVE RETURN
         LR    RCHAR,R0                 GET ADDR OF CHARS
         LR    RCNT,RPARM               SAVE COUNT
         SRL   RCNT,TFOUR               SHIFT TO LOW BYTE
         LTR   RCNT,RCNT                COUNT IN REG
         BNZ   COUNT                    YES
         IC    RCNT,0(,RCHAR)           NO, MUST BE IN DATA FIELD
         LA    RCHAR,ONE(,RCHAR)        BUMP PAST LENGTH
COUNT    EQU   *
         SR    RCNTS,RCNTS              CLEAR
         LA    R0,MAXCNT                GET MAXIMUM COUNT
         CR    RCNT,R0                  GREATER THAN MAXIMUM
         BNH   CNTOK                    NO
         LA    RCNT,MAXCNT              SET MAXIMUM
CNTOK    EQU   *
         LR    R0,RCNT                  SET COUNT
         N     RPARM,AVTCLRHI           CLEAR
         LA    RWORK,AVTDOUBL           GET WORKAREA PTR
         LR    ROFF,RPARM               SET OFFSET
         LR    RUNIT,RPREFIX            POINT TO UNIT
         B     LOOP                       AND LOOK AGAIN
NXTUNIT  EQU   *
         L     RUNIT,PRFTIC-IEDQPRF(,RUNIT) GET NEXT UNIT
         SH    ROFF,AVTKEYLE            SUBTRACT UNIT SIZE
LOOP     EQU   *
         CH    RPARM,PRFSIZE            OUT OF BUFFER
         BNL   DONE                     YES ,GET OUT
         CH    ROFF,AVTKEYLE            DATA IN THIS UNIT
         BNL   NXTUNIT                  NO, GET NEXT UNIT
MOVDATA  EQU   *
         LA    RDATA,AVTUMALN(RUNIT,ROFF)  DEVELOP ADDR OF BYTE
         LA    RCNTS,ONE(,RCNTS)        NUMBER SCANNED
         LA    ROFF,ONE(,ROFF)          OFFSET IN UNIT
         LA    RPARM,ONE(,RPARM)        OFFSET IN BUFFER
         LTR   RBLANK,RBLANK            BLANK SPECIFIED
         BM    NOBLK                    NO
         EX    RBLANK,COMPBLK           CHECK FOR BLANK
         BE    LOOP                     SKIP BLANK
NOBLK    EQU   *
         MVC   0(1,RWORK),0(RDATA)         MOVE TO WORK AREA
         LA    RWORK,ONE(RWORK)         INCR WORK AREA ADDRESS
         BCT   RCNT,LOOP                OUT OF COUNT
NOTOUT   EQU   *
         LNR   RCNT,RCNT                NO CHARS LEFT OVER
         AR    RCNT,R0                  NUMBER CHARS FOUND
         LR    RBASE,RCNT               NUMBER OF CHARS FOUND
         LR    R0,RPARM                 OFFSET OF NEXT BYTE
         LR    RPARM,RDATA              ADDR OF LAST IN STRING
         BCTR  RCNT,0                   DECR FOR COMPARE
         EX    RCNT,COMP                IS STRING IN BUFFER
         BE    SETOFF                  YES, SET DATOFF TO RETURN
         SR    RBASE,RBASE              NO, SET RETURN CODE
         SR    R0,RCNTS                 RESET TO ORIGINAL OFFSET
SETOFF   EQU   *
         LM    RBLANK,R12,28(RSAVE)     RESTORE REGS
         BR    R14                        AND RETURN
DONE     EQU   *
         LA    RPARM,ONE(,RPARM)        BUMP PAST END OF BUFFER
         LA    RCNTS,ONE(,RCNTS)        BUMP FOR LATER
         B     NOTOUT                   RETURN
         SPACE 1
COMPBLK  CLI   0(RDATA),0
         SPACE 2
COMP     CLC   0(0,RCHAR),AVTDOUBL      COMPARE CHAR TO AVTDOUBL
         EJECT
         TAVTD
         TPRFD
PRFDATAD EQU   PRFKEY
PRFDATOF EQU   PRFCOUNT
         END
