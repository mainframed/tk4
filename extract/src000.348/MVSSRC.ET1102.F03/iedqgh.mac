         TITLE 'IEDQGH - CTBFORM MODULE'
         SPACE 3
IEDQGH   CSECT
         SPACE 3
*  CHANGE ACTIVITY AS FOLLOWS
******************** MICROFICHE FLAGS *********************** SUPT CODE
*A352800                                                        SA54269
*A101600,867200                                                 SA56209
*C847200                                                        SA56209
*D870400                                                        SA56209
*C683200                                                        SA57673
*A878400                                                        S22027
*A465600,647200                                                 SA52971
*C308800                                                        SA59170
*A700880-701440,711200-715200                                   SA60814
*D70800,711200-716000                                           SA60814
*A354400                                                        SA59199
*A110800,131400-131600,186800,435600,436400,622000,637800-638200,Y01004
*A700400,703600,704400,705200,782800,783600,784400,833200,975600,Y01004
*A976400,986800                                                  Y01004
*C112000,131200,186400-188000,192000-192800,198400-199200,272000,Y01004
*C353600-354400,435200,436000,528400,559200-560800,621600-624000,Y01004
*C628800-629600,700000,700800,703200,704000,704800,705600,       Y01004
*C739200-740800,757600-758400,761600-762400,782400,783200,784000,Y01004
*C784800,806400-808800,814400-815200,821600-824000,832800,834400,Y01004
*C858400-859200,922400,942400                                    Y01004
*D010400-012000,087200,113600-114400,272800,282400,310400-311200,Y01004
*D334400-335200,513600,561600,609600,698400,796800,824800-825600,Y01004
*D835200-836000,860000,879200,923200-941600,943200-961600        Y01004
*C368800                                                         X02004
*D369600                                                         X02004
         SPACE 3
***********************************************************************
* TITLE -- 'IEDQGH' CTBFORM MODULE                                    *
*                                                                     *
*  MODULE NAME = IEDQGH                                               *
*                                                                     *
*  DESCRIPTIVE NAME = CTBFORM MODULE                                  *
*                                                                     *
*  COPYRIGHT = 'NONE'                                                 *
*                                                                     *
*  STATUS:  CHANGE LEVEL 5                                            *
*                                                                     *
* FUNCTION --                                                         *
*    AT ENTRY FROM CTBFORM: TO INSERT DATA AND DVCIDS                 *
*    IF SPECIFIED                                                     *
*                                                                     *
*    AT ENTRY FROM OUTMSG: TO DETERMINE CONCENTRATED END OF MESSAGE,  *
*    TO INSERT CTB ENDING CHARACTERS,TO MARK QUEUES TEMPORARILY HELD  *
*                                                                     *
* ENTRY POINTS --                                                     *
*         IEDQGH -- WHEN ENTERED FROM CTBFORM OR OUTMSG               *
*         THE CALLING SEQUENCE FROM USER INTERFACE IS:                *
*         L   R12,AVTMSGS-1            GET ADDR OF VCON TABLE         *
*         IC  R15,AVTEZERO(,R1)        GET INDEX TO ROUTINE ADDR      *
*         L   R12,AVTEZERO(R12,R15)    GET ROUTINE ADDRESS            *
*         BR  R12                       EXIT TO ROUTINE               *
*                                                                     *
*         IEDQGH01                                                    *
*                                                                     *
* INPUT --                                                            *
*
*    AT ENTRY IEDQGH                                                  *
*    R1  ADRESS OF A MACRO GENERATED PARAMETER LIST                   *
*    R3  ADDRESS OF SCB                                               *
*    R4  ADDRESS OF LCB                                               *
*    R6  ADDRESS OF CURRENT BUFFER                                    *
*    R9  ADDRESS OF AVT                                               *
*    R12 ENTRY POINT ADDRESS NAD BASE OF THIS ROUTINE                 *
*                                                                     *
*    AT ENTRY IEDQGH01                                                *
*                                                                     *
*    R1  ADDRESS OF ERB                                               *
*    R7  ADDRESS OF QCB                                               *
*    R13 ADDRESS OF AVTSAVE2                                          *
*    R11 DISPATCHER BASE                                              *
* OUTPUT --                                                           *
*                                                                     *
* EXTERNAL REFERENCES --                                              *
*                                                                     *
*         IEDQUI                                                      *
*         IEDQAF                                                      *
*         IEDQAO                                                      *
*         IEDQAE                                                      *
*         IEDQGD                                                      *
*         DSPPOSTR                                                    *
*         AVTRNMPT - TNT CODE                                         *
*                                                                     *
* EXITS,NORMAL --                                                     *
*    DSPDISP                                                          *
*    IEDQUI                                                           *
*                                                                     *
* EXITS,ERROR --                                                      *
*                                                                     *
*    NONE                                                             *
*                                                                     *
* TABLES/WORK AREAS --                                                *
*    AVT                                                              *
*    LCB                                                              *
*    QCB                                                              *
*    SCB                                                              *
*    DCB                                                              *
*    SCT                                                              *
*    TERMINAL ENTRY                                                   *
*    QCBE                                                             *
*    DRQ                                                              *
*    BUFFER PREFIX                                                    *
*    DVCID TABLE                                                      *
*                                                                     *
* ATTRIBUTES --                                                       *
*    SERIALLY REUSABLE, REFRESHABLE, ENABLED, PROBLEM PROGRAM MODE,   *
*    RESIDENT                                                         *
*                                                                     *
*                                                                     *
* CHARACTER CODE DEPENDENCY --                                        *
*    THE OPERATION OF THIS MODULE DOES NOT DEPEND UPON AN             *
*    INTERNAL REPRESENTATION OF THE EXTERNAL CHARACTER SET.           *
*                                                                     *
* NOTES --                                                            *
*    STANDARD TCAM LINKAGES AND DEVIATIONS FROM STANDARDS             *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*        REGISTER EQUATES                                             *
***********************************************************************
         SPACE 1
R0       EQU   0                        WORK REGISTER
R1       EQU   1                        WORK REG
RPARM    EQU   1                        PARAMETER REGISTER
RPQCB    EQU   1                        PRIORITY QCB BASE
R2       EQU   2                        WORK REG
RDRQ     EQU   2                        DATA READY QUEUE BASE
R3       EQU   3                        WORK REG
RSCB     EQU   3                        SCB  BASE
R4       EQU   4                        WORK REG
RLCB     EQU   4                        LCB  BASE
R5       EQU   5                        WORK REGISTER
RPREFIX  EQU   6                        BUFFER ADDRESS
R7       EQU   7                        WORK REG
RQCB     EQU   7                        QCB  BASE
R8       EQU   8                        WORK REG
RTERM    EQU   8                        TERMINAL ENTRY
RAVT     EQU   9                        AVT  BASE
R10      EQU   10                       RESERVED FOR ANOTHER BASE
R11      EQU   11                       WORK REG
RQCBE    EQU   11
RDISP    EQU   11                       DISPATCHER BASE
RBASE    EQU   12                       BASE REGISTER
R13      EQU   13                       ADDR OF AVTSAVB
R14      EQU   14                       LINK REG
R15      EQU   15                       WORK REG
         SPACE 1
CTBFMENT EQU   X'01'                    ENTRY FROM OUTMSG
CTBOPFLD EQU   X'01'                    OPFLD SPECIFIED
CTBDVCID EQU   X'02'                    DVCID = YES ON CTBFORM
CTBSPCHR EQU   X'04'                    ENDCHAR = YES ON CTBFORM
CTBINSRT EQU   X'08'                    INDICATES DATA NOT INSERTED
CTBINSFS EQU   X'10'                    INSERT = NO ON CTBFORM   S22027
CTBNULL  EQU   X'FF'                    NULL SEPARATOR CHARACTER
X0F      EQU   X'0F'                    CLEAR SCBQTYPE
ECD10    EQU   X'10'                    RETURN CODE
ECD20    EQU   X'20'                    INVALID FIELD RETURN CD SA56209
E48      EQU   X'48'                    SIZE OF SAVE AREA
LAST     EQU   X'02'                    LAST UNIT OF BUFFER FLAG
TIC      EQU   X'08'                    TIC
DCBPCISN EQU   X'04'                    PCI = N
SCTEOT   EQU   X'14'                    SCT INDEX BYTE TO EOT
INSOFF   EQU   4                        OFFSET
DATOFF   EQU   6                        OFFSET
ADDUNIT  EQU   X'80'                    UNIT NEEDED FOR INSERT  SA60814
ZERO     EQU   0                        ZERO
ONE      EQU   1                        ONE
TWO      EQU   2                        TWO
THREE    EQU   3                        THREE
HALF     EQU   3                        MASK TO ICM/STCM HALFWORDY01004
FOUR     EQU   4                        FOUR
ADDR     EQU   7                        MASK TO ICM/STCM ADDRESS Y01004
EIGHT    EQU   8                        EIGHT
TWELVE   EQU   12                       TWELVE
D15      EQU   15                       NO OF BITS TO SHIFT
FIFTEEN  EQU   15                       FIFTEEN
***********************************************************************
*        ESTABLISH CSECT AND CONTROL BLOCK ADDRSSABILITY              *
***********************************************************************
         SPACE 2
         USING IEDQPRF,RPREFIX          BUFFER PREFIX BASE
         USING IEDQDRQ,RDRQ             DRQ BASE
         USING IEDQLCB,RLCB             LCB BASE
         USING IEDQSCB,RSCB             SCB BASE
         USING IEDQQCBE,RQCBE           QCBE BASE
         USING IEDQTRM,RTERM            TERMINAL ENTRY BASE
         USING IEDQQCB,RQCB             QCB BASE
         USING IEDQPQCB,RPQCB           PRIORITY QCB BASE
         USING IEDQAVTD,RAVT            AVT BASE
         USING IEDQGH,RBASE             ROUTINE BASE
         SPACE 2
         B     ID                       BRANCH AROUND ID
         DC    AL2(SEOBSV-IEDQGH)       OFFSET TO FIELD REQUIRED Y01004
*                                       BY IEDQGD.               Y01004
         DC    X'0000'                  PADDING.                 Y01004
         DC    AL1(DSPMCPL4)            STCB
         DC    AL3(*-1)                 STCB ADDR
*******   FIRST TWO BRANCHES ARE THE QCB FOR THE STCB ***********
         SPACE 1
*    THE ERB IS POSTED TO GH WHEN ONLY CANCELED MSGS ARE LEFT ON
*    QUEUE INORDER FOR GH TO FORCE CONCENTRATED END OF MSG
         SPACE 1
IEDQGH01 EQU   *
         LR    RBASE,RQCB               SET BASE
         LA    R5,LCBERB-IEDQLCB        ERB OFFSET IN LCB
         LR    RLCB,RPARM               ERB ADDR
         SR    RLCB,R5                  SET LCB BASE
         LR    RAVT,R13                 ADDR OF AVTSAVE2
         LA    R0,E48                   SIZE OF SAVE AREA
         SR    RAVT,R0                  SET AVT BASE
         L     RSCB,LCBSCBA-1           SET SCB BASE
         L     RQCB,SCBDESTQ-1          SET DEST Q ADDR
         LH    RQCBE,QCBEXTO            GET QCBE OFFSET
         AR    RQCBE,RQCB               SET QCBE BASE
         L     RDRQ,QCBECONC-1          POINTER TO CONC TERM ENTRY
         L     RDRQ,ZERO(RDRQ)          SET DRQ BASE
         LA    R15,GODISP               SET EXIT ADDR
         BAL   R14,GETUNIT              GET A UNIT TO BUILD A BUF
         B     NONE                     BRANCH NO UNITS AVAIL
         LR    RPREFIX,R1               SET BUFFER ADDR
         SPACE 1
*    BUILD A BUFFER
         SPACE 1
         SR    R0,R0                    CLEAR WORK REG
         STC   R0,LCBISZE               SET ISZR TO NO RESERVES
         ST    RLCB,PRFLCB-1            SET LCB ADDR IN BUFFER
         MVI   PRFNBUNT,ONE             SET UNIT COUNT TO ONE
         LA    R8,AVTTXTSZ+ONE          TXT PREFIX SIZE
         MVI   PRFSTAT1,PRFNHDRN        SET NOT HEDR
         MVI   PRFTIC,TIC               SET TIC OPCODE
         MVI   PRFTIC+THREE,LAST        SET AS LAST
         L     R5,LCBDCBPT              GET PTR TO DCB
         USING IHADCB,R5
         L     R5,DCBSCTAD-1            GET SCT ADDR FROM DCB
         DROP  R5
         LA    R1,SCTEOT                SCT INDEX TO EOT
         IC    R1,ZERO(R1,R5)           INDEX TO EOT
         LA    R1,ZERO(R1,R5)           GET ADDR OF EOT
         CLI   ZERO(R1),TWO             IS SCT ENTRY LENGTH 2
         BNE   NOETX                    BRANCH IF NO
         LA    R8,ONE(R8)               INCR PRFSIZE
NOETX    EQU   *
         STH   R8,PRFSIZE               SET PRFSIZE
         LA    R0,AVTTXTSZ              TXT PREFIX SIZE
         SR    R8,R0                    LENGTH OF DATA TO MOVE
         EX    R8,MVCRS                 MOVE DATA
         L     R15,AVTGD                ADDR OF BUFFER ASSOCIATION
NONE     EQU   *
         L     R1,LCBSCBDA-1            GET LINE SCB ADDR
         XC    SCBEOBAC-IEDQSCB(TWO,R1),SCBEOBAC-IEDQSCB(R1)
*                                       CLEAR SCBEOBAC
         OI    SCBSTAT1-IEDQSCB(R1),SCBCEND
*                                       SET CONC END OF MSG
         NI    SCBSTAT1-IEDQSCB(R1),AVTEFF-SCBNIDLE
*                                       RESET SO BUF WILL BE HOOKED
*                                       IN IDLES LOOP
         OI    LCBERBST,LCBEOMSG        SET ERB AVAILABLE        S22027
         MVC   DRQCTBCT,DRQCTBMX        RESET MSG COUNT
         BR    R15                      RETURN
IEDQGH   IEDHJN
         DS    0H
         SPACE 1
ID       EQU   *
         ST    RPARM,PARMSAVE           SAVE ADDR OF PARMLIST
         ICM   R15,HALF,PRFSIZE         GET LENGTH OF DATA IN    Y01004
*                                       BUFFER.                  Y01004
         BZ    EXIT                     BRANCH IF IT'S A ZERO-   Y01004
*                                       LENGTH BUFFER.           Y01004
         TM    SCBQTYPE,SCBCONC         IS THIS CONCENTRATOR BUFF
         BZ    EXIT                     NO, EXIT
         LR    R5,RPARM                 SET PARM ADDR
         SPACE 1
         SR    RPARM,RPARM              CLEAR FOR ICM.           Y01004
         ICM   RPARM,HALF,LCBTTCIN      GET TERMNAME INDEX.      Y01004
         BZ    EXIT                     ERROR IF ZEROS
         SPACE 1
         L     R15,AVTRNMPT             GET ADDR OF TERMNAME RTN
         BALR  R14,R15                  GIVE IT CONTROL
         SPACE 2
         LR    RTERM,RPARM              SET BASE FOR TERM ENTRY
         SR    RQCB,RQCB                CLEAR FOR ICM.           Y01004
         ICM   RQCB,ADDR,TRMDESTQ       GET QCB ADDRESS.         Y01004
         LH    RQCBE,QCBEXTO            GET QCB EXTERNSION ADDR
         AR    RQCBE,RQCB               SET QCBE BASE
         TM    ZERO(R5),CTBFMENT        IS ENTRY FROM CTBFORM
         BO    COUNT                    BRANCH IF NO
         MVC   AVTCSCH(ONE),ZERO(R5)    SAVE VCON TABLE OFFSET
*                                       TO GH FOR GD USE
         TM    PRFSTAT1,PRFNHDRN        IS THIS A HEADER BUFFER
         BO    CKCTBBGN                 NO,CHECK FOR CTB BEGIN
         BAL   R14,EXTFIND              FIND CORRECT EXT
         MVC   QCBETCIN-IEDQQCBE(TWO,R5),LCBTTCIN
*                                       SAVE TTCIN FOR CONC SCHED
*                                       TO USE TO SET UP ON
*                                       RECALLED BUFFERS
         TM    QCBEFLG,QCBECNT          DOES QCNTRL = MSG OR ALL
         BZ    CKOPTFLD                 BRANCH IF YES
CKCTBBGN EQU   *
         TM    QCBEFLG,QCBECNT          IS INTEGER SPECFIED ON QCNTRL
         BZ    EXIT                     BRANCH IF NO TO RETURN
         CLC   SCBCTBSZ,QCBEDAMT        IS THIS CTB BEGIN
         BNE   EXIT                     BRANCH IF NO TO RETURN
         TM    QCBEFLG,QCBESRVC+QCBEHELD
*                                       IS THIS Q SERV OR HELD
         BNZ   EXIT                     BRANCH IF YES TO RETURN
         MVC   QCBEEOB,SCBEOB           SAVE PREVIOUS SCBEOB FOR MB
         MVC   QCBEDEOB,SCBDEOB         SAVE PREVIOUS DEOB VOR MB
         SPACE 1
CKOPTFLD EQU   *
         L     R5,PARMSAVE              RESTORE PTR TO PARMLIST
         MVC   SCBCTBSV(ONE),TWO(R5)    SAVE CTBFORM PARAMETERS
         SR    R5,R5                    CLEAR REG
         TM    SCBCTBSV,CTBSPCHR        IS INSERT SEPARATOR CHARACTER
*                                       SPECIFIED
         BZ    CKFLD                    BRANCH IF NO
         CLI   QCBERS,CTBNULL           IS A SEPARATOR CHAR DEFINED
         BNE   CKFLD                    BRANCH IF YES
         SPACE 1
         NI    SCBCTBSV,AVTEFF-CTBSPCHR RESET SEPARATOR
*                                       CHARACTER DEFINED BIT
         OI    RTNCDE,AVTECD4           SET RETURN CODE
CKFLD    EQU   *
         SR    R15,R15                  CLEAR REG IF NO INSERT DONE
         TM    SCBCTBSV,CTBOPFLD        IS OPTION FIELD SPECIFIED
         BZ    CKINSDVC                 BRANCH IF NO
         SPACE 2
*    THIS ROUTINE LOCATES THE OPTION FIELD. IF THE OPTION FIELD IS
*        NOT FOUND A RETURN CODE IS GIVEN IN REG 15
         SPACE 2
*    BUILD PARMLIST FOR AE
         SPACE 1
         L     R5,PARMSAVE              GET ADDR OF PARMLIST
         USING PRMLST,R5
         MVC   PRMOFFST,PRMAEOFF        SET AE OFFSET
         MVI   PRMLNGTH,FOUR            SET LENGTH OF PARM LIST
         MVC   PRMOPTN,PRMOPFLD         SET OPTION FIELD OFFSET
         MVI   PRMREGOF,FIFTEEN         SET RETURN REG OFFSET  @YM08438
         DROP  R5
         LA    RPARM,PARMLIST           GET ADDR OF PARAMETER LIST
         L     R15,AVTUI                GET USER INTERFACE ROUTINE
         BALR  R14,R15                  GO LOCATE OPTION FIELD
         LTR   R15,R15                  DID LOCATE OPTION FIELD
         BNZ   CKINSDVC                 YES SEE IF DVCID TO BE INSRTED
         SPACE 1
         NI    SCBCTBSV,AVTEFF-CTBOPFLD RESET OPFLD INSRT REQ BIT
         SR    R5,R5                    CLEAR REG
         OI    RTNCDE,AVTECD8           SET BAD RETURN CODE
         SPACE 2
CKINSDVC EQU   *
         TM    SCBCTBSV,CTBDVCID        IS DVCID TO BE INSERTED
         BZ    CKINSRT                  SEE IF ANY INSRTS TO BE DONE
         SPACE 1
*    THIS ROUTINE GETS THE ADDR OF THE DEVICE DEPENDENT FIELD
*     CONTAINING THE ADDRESS THE DVCID TABLE ENTRY FOR THIS TERMINAL
         SPACE 2
         LA    R1,TRMOPNO               PRT TO DEVICE DEPENDENT FIELD
*                                       IF NO OPTION FIELDS
         TM    TRMSTATE,TRMOPTFN        OPTION FIELDS USED
         BZ    NOOPT                    NO,GO FIND DEVICE DEPENP FIELD
         SPACE 1
         SR    R2,R2                    CLEAR WORK REG
         IC    R2,TRMOPNO               GET NUMBER OF OPTION ENTRIES
         LA    R1,THREE(R1,R2)          BUMP DVC DEPEND FIELD PTR
*                                       PAST OPTION OFFSETS
NOOPT    EQU   *
         SR    R2,R2                    CLEAR WORK REG
         LH    R0,TRMDEVFL              GET DVC DEPEND FIELD FLAGS
         SLL   R0,D15                   SHIFT FLAGS TO LEFT IN R0
         LA    R14,EIGHT                SET COUNTER TO TEST NINE
*                                       DEVICE DEPEND FIELD FLAGS
LOOP     EQU   *
         SLL   R0,ONE                   SHIFT TO TEST FOR PRESENCE
*                                       OF NEXT DEVICE DEPEND FIELD
         LTR   R0,R0                    THIS FIELD PRESENT
         BNM   BCTIT                    NO, DON'T BUMP POINTER
         SPACE 1
         IC    R2,ZERO(R1)              GET LENGTH OF THIS FIELD
         LA    R1,ONE(R1,R2)            BUMP PTR PAST THIS FIELD
         SPACE 1
BCTIT    EQU   *
         BCT   R14,LOOP                 REACHED DVCID TABLE PTR?
*                                       NO, TRY NEXT
         ICM   R1,ADDR,TWO(R1)          R1 = TABLE ADDRESS.      Y01004
         CLI   ONE(R1),CTBNULL          IS DVCID DEFINED
         BNE   INSDVCID                 BRANCH IF YES
         OI    RTNCDE,ECD10             SET BAD RETURN CODE
         NI    SCBCTBSV,AVTEFF-CTBDVCID RESET INSERTDVCID BIT
*                                       REQUESTED, NO DVCID DEFINED
         SR    R1,R1                    CLEAR REG
CKINSRT  EQU   *
         LTR   R5,R5                    ANY INSERTS TO BE DONE
         BZ    EXIT                     NO RETURN
INSDVCID EQU   *
         SPACE 1
         BAL   R14,INSERT               GO INSERT DVCID
EXIT     EQU   *
         L     R5,PARMSAVE              GET PTR TO PARM LIST
         TM    ZERO(R5),CTBFMENT        IS ENTRY FROM CTBFORM
         BO    EXIT2                    BRANCH IF NO EXIT
*                                       TO OUTMSG SUBGROUP
         SR    R15,R15                  CLEAR REG
         IC    R15,RTNCDE               GET RETURN CODE
         MVI   RTNCDE,ZERO              RESET FIELD
         L     RBASE,AVTUI              GET ADDR OF USER INTERFACE RTN
         B     FOUR(RBASE)              RETURN TO CALLER
         SPACE 2
*    THIS ROUTINE GAINS CONTROL AT OUTMSG TO UPDATE  ERB COUNTS
*    IN DRQ AND OTHEE THINGS
         SPACE 2
COUNT    EQU   *
         L     RDRQ,QCBECONC-1          GET PTR TO CONC TERM ENTRY
         L     RDRQ,ZERO(RDRQ)          SET DRQ BASE
         TR    DRQBUFCT,TABLE-1         DECR DRQBUFCT
         TR    DRQERBCT,TABLE-1         DECR DRQERBCT
         TM    QCBEFLG,QCBESRVC+QCBEHELD
*                                       IS THIS Q SERVICED OR HELD
         BNZ   RIDBUF                   BRANCH IF YES
         TM    PRFSTAT1,PRFNHDRN        HEADER BUFFER
         BO    NOTAHDR                  BRANCH IF NO
         SR    R1,R1                    CLEAR WORK REGISTER     SA59170
         L     R14,PARMSAVE             GET PARM LIST ADDRESS   SA59170
         IC    R1,ONE(R14)              PARM LIST LNGTH         SA59170
         AR    R14,R1                   BUMP TO END             SA59170
         ST    R14,AVTDOUBL             SAVE LAST ENTRY ADDRESS SA59170
         MVC   QCBEMACR(THREE),AVTDOUBL+1                       SA59170
*                                       SET SCBMACR
         TM    QCBEFLG-IEDQQCBE(RQCBE),QCBEOPL
*                                       IS NEW PRIORITY LEVEL SCHEME
*                                       BEING USED
         BZ    NOTAHDR                  BRAMCH IF NO
         BAL   R14,EXTFIND              GET CORRECT EXTENSION
         DROP  RQCBE
         USING IEDQQCBE,R5
         MVC   QCBEHDR(THREE),SCBSCHDR  SAVE CURRENT HDR POINTER
         MVC   QCBEOSEQ(TWO),SCBOSEQ    SAVE SEQ OUT NO
         MVC   QCBEPRI(ONE),SCBPRI      SAVE PRIORITY INDEX TO QCB
         MVC   QCBEFEFO(THREE),SCBFEFO  SAVE FEFO POINTER
         MVC   QCBEQTYP,SCBQTYPE        SAVE SCB QTYPE
         DROP  R5
         USING IEDQQCBE,RQCBE
         SPACE 1
NOTAHDR  EQU   *
         TM    QCBEFLG,QCBECNT          INTEGER SPECIFIED ON QCNTRL
         BZ    CKEOM                    NO GO SEE IF NEED TO INSERT
*                                       SEPARATOR CHARACTER
         SPACE 1
*    THIS ROUTINE DETERMINES IF THIS BUFFER IS CTBEND
         SPACE 2
         LA    R1,AVTTXTSZ              ASSUME TEXT BUFFER
         TM    PRFSTAT1,PRFNHDRN        HEADER BUFFER
         BO    SUBTRR                   NO
         IC    R1,LCBISZE               GET NO OF IDLES REMAINING
         LA    R1,AVTHDRSZ(R1)          AMT NOT TO WRITE
SUBTRR   EQU   *
         LH    R0,SCBCTBSZ              GET DATA LEFT IN THIS CTB
         LH    R5,PRFSIZE               GET DATA SIZE IN BUFFER
         SR    R5,R1                    MINUS PREFIX SIZE
         TM    PRFSTAT1,PRFCNCLN        RECALLED BUFFER?
         BNO   SETEND                   NO,GO DETERMINE CTBEND
         SPACE 1
         AR    R5,R1                    PLUS PREFIX SIZE
         SH    R5,SCBEOB                GET DATA COUNT LEFT IN BUFFER
         L     R14,LCBSCBDA-1           GET LINE SCB ADDR
         MVC   SCBEOB-IEDQSCB(TWO,R14),SCBEOB
*                                       SET EOB OFFSET FOR AK
         SPACE 1
SETEND   EQU   *
         SR    R0,R5                    IS DATA SIZE LESS THAN
*                                       AMT NEEDED FOR CTB
         BM    SETCTBND                 NO SET CTB END
         TM    PRFSTAT1,PRFNLSTN        EOM BUFFER
         BZ    UPDT                     YES GO SEE IF INSERT RS
         STH   R0,SCBCTBSZ              SAVE AMT DATA NEEDED TO FILL
*                                       CTB
         LTR   R0,R0                    NEED RECALL
         BNZ   IDLES                    NO
         OI    SCBCTBFL,SCBCTBND        SET CTB END             SA54269
         STCM  R0,FIFTEEN,SCBDEOB       CLEAR LAST EOB FOR 19Q9. Y01004
         STCM  R0,HALF,SEOBSV           CLEAR EOB OFFSET.        Y01004
         XC    SCBCTBAC,SCBCTBAC        CLEAR OUT COUNT OF DATA SA59199
         B     MVCCTBSZ                 RESET SIZE
UPDT     EQU   *
         MVC   SCBCTBSZ(TWO),QCBEDAMT   RESET CTB SIZE TO QCNTRL
         XC    DRQCURQ,DRQCURQ          CLEAR CURRENT QCB PTR
         NI    SCBQTYPE,AVTEFF-SCBBFMM  RESET MIDDLE OF MSG BIT
         B     CKRS                     CHECK FOR RS INSERTION
         SPACE 1
***********************************************************************
*    THIS ROUTINE IS ENTERED WHEN THE DATA IN THIS BUFFER WILL NOT
*    FIT INTO A CTB
         SPACE 1
*    THIS ROUTINE CHECKS FOR A RECALLED BUFFER
*    FOR A NON RECALLED BUFFER SCBEOB IS SET TO SCBCTBSZ,
*    SCBCTBSZ IS THE RESET TO SIZE SPECIIFIED ON QNCTRL OPERAND
*    OF TERM MACRO, AND PRFSIZE IS SET TO QCBCTBSZ
*
*    FOR A RECALLED BUFFER SCBEOB IS ADDED TO SCBCTBSZ AND SAVED
*    SCBEOB IS NOT UPDATED UNTIL CONTROL IS PASSED TO IEDQGD.    X02004
*    SCBCTBSZ IS RESET TO SIZE SPECIFIED ON QCNTRL OPERAND OF
*    TERMINAL MACRO
***********************************************************************
SETCTBND EQU   *
         SPACE 2
         OI    SCBCTBFL,SCBCTBND        SET CTB END
         TM    PRFSTAT1,PRFCNCLN        RECALLED BUFFER?
         BO    RECALL                   YES
         LH    R5,SCBCTBSZ              GET CTB SIZE AND SET AS
*                                       NEW DATA COUNT IN THIS
*                                       BUFFER
         AR    R5,R1                    ADD PREFIX SIZE
         B     MVC                      GO MOVE
         SPACE 2
RECALL   EQU   *
         LH    R5,SCBCTBSZ              GET CTB SIZE AND
         AH    R5,SCBEOB                CALCULATE NEW SCBEOB PTR
MVC      EQU   *
         STH   R5,SEOBSV                SAVE SCBEOB OFFSET
         STH   R5,PRFSIZE               RESET PRFSIZE TO REFLECT
         MVC   SCBDEOB(ONE),PRFNTXT     SET DISK RECORD
         MVC   SCBDEOB+ONE(THREE),PRFCRCD
*                                       SET DISK ADDRESS
MVCCTBSZ EQU   *
         MVC   SCBCTBSZ(TWO),QCBEDAMT   RESET CTB SIZE TO QCNTRL
         SPACE 1
         SPACE 2
         SPACE 1
CKRS     EQU   *
         TM    SCBCTBSV,CTBSPCHR        IS RS TO BE INSERTED
         BZ    CKSTAT                   NO GO SEE IF STATUS SPECIFIED
         SPACE 1
         LH    R5,PRFSIZE               AMT DATA IN BUFFER
         BAL   R14,INSERTRS             GO INSERT RS
         SPACE 2
         B     CKSTAT                   CHECK FOR STATUS
*    CONTROL IS GIVEN TO THIS ROUTINE WHEN INTEGER NOT SPECIFIED ON
*    QCNTRL
         SPACE 1
CKEOM    EQU   *
         TM    PRFSTAT1,PRFNLSTN        EOM BUFFER
         BO    IDLES                    NO GO HOOK BUFFER IN CHAIN
         NI    SCBQTYPE,AVTEFF-SCBBFMM  RESET MIDDLE MSG BIT
         SPACE 1
         TM    SCBCTBSV,CTBSPCHR        IS RS CHAR TO BE INSERTED
         BZ    INCRBFCT                 NO UPDATE DRQ BUFFER COUNT
         LH    R5,PRFSIZE               GET DATA COUNT IN BUFFER
         BAL   R14,INSERTRS             GO INSERT CTB CHARS
         SPACE 1
INCRBFCT EQU   *
         SPACE 2
         CLC   QCBEDAMT(TWO),MSGCNT1    DID QCNTRL SPECIFY ONE MSG
         BE    CKSTAT                   YES,SAYS ONE MSG FROM THIS Q
*                                       GO SEE IF STATUS SPECIFIED
*                                       NO ASSUME MULTI MSG
         LH    R5,SCBCTBSZ              GET NUMBER OF MESSAGES TO
         BCTR  R5,ZERO                  DECR NUMBER OF MSGS
         STH   R5,SCBCTBSZ              SAVE MSG COUNT
         BAL   R14,MSGSERV              GO MARK MSG SERVICED
         NI    QCBEFLG,AVTEFF-QCBEDATA  RESET DATA IN MSG LLAG
         SPACE 1
         CLC   SCBCTBSZ(TWO),AVTFZERO   IS MSG COUNT ZERO
         BE    QSERV                    YES GO MARK Q SERV
         NC    DRQCTBMX,DRQCTBMX        CTBMAX SPECIFIED
         BZ    CKPRILVL                 NO GO SEE IF UNSENT MSG
         SR    R0,R0                    CLEAR WORK REG
         IC    R0,DRQCTBCT              GET NO OF MSGS REMAINING
         BCTR  R0,ZERO                  DECR NO OF MSGS
         STC   R0,DRQCTBCT              AND SAVE
         LTR   R0,R0                    ANY LEFT
         BZ    SETCEOM                  NO GO SET CONC EOM
         SPACE 1
CKPRILVL EQU   *
         SR    R5,R5                    CLEAR WORK REG
         IC    R5,QCBENPLV              GET NO OF PRIORITY LEVELS
         LA    RPQCB,IEDQPQCB-IEDQQCB(ZERO,RQCB)
*                                       POINT TO FIRST PRIORITY
*                                       LEVEL QCB
LOOPPQCB EQU   *
         ICM   R14,ADDR,QCBFFEFO        GET RECORD NO. OF FIRST  Y01004
*                                       (FEFO) MESSAGE.          Y01004
         BNZ   IDLES                    BRANCH IF THERE IS AN    Y01004
*                                       UNSENT MESSAGE.          Y01004
         LA    RPQCB,QCBPEND            ADDR NEXT PRIORITY LEVEL QCB
         BCT   R5,LOOPPQCB              GO TEST NEXT PRI LEVEL
         SPACE 1
QSERV    EQU   *
         BAL   R14,EXTFIND              GO FIND CORRECT EXTENSION
         OI    QCBEFLG-IEDQQCBE(R5),QCBESRVC
*                                       SET Q SERVICED
         CLC   DRQCURQ(THREE),AVTFZERO  IS CURRENT PTR ZERO
         BE    OUTMSG                   YES SET OUTMSG PENDING
         XC    DRQCURQ(THREE),DRQCURQ   CLEAR CURRENT QCB POINTER
         CLC   QCBEDAMT,MSGCNT1         MULTI MSG
         BNE   CKCEOM                   YES SKIP SET OF OUTMSG
*                                       PENDING
OUTMSG   EQU   *
         OI    QCBEFLG-IEDQQCBE(R5),QCBEOMSG
*                                       SET OUTMSG PENDING
         OI    QCBEFLG-IEDQQCBE(RQCBE),QCBEOMSG
*                                       SET OUTMSG PENDING
         B     CKCEOM                   CHECK CONC EOM
         SPACE 1
EXTFIND  EQU   *
         LR    R5,RQCBE                 SET QCBE ADDR
         TM    QCBEFLG,QCBEOPL          IS NEW PRIORITY LEVEL
*                                       SCHEME BEING USED
         BCR   8,R14                    NO  RETURN
         SR    R15,R15                  CLEAR WORK REG
         SR    R1,R1                    ZERO WORK REG
         IC    R15,QCBELGTH             GET QCBE LENGTH
         AR    R5,R15                   POINT TO FIRST LEVEL EXT
         IC    R1,SCBPRI                GET INDEX TO CURRENT PRI LEVEL
         IC    R15,QCBELGTH-IEDQQCBE(R5)
*                                       GET LENGTH OF LEVEL QCB EXT
         MR    R0,R15                   MULTIPLY PRI LEVEL INDEX
*                                       BY LENGTH OF A PRI LEVEL EXT
         AR    R5,R1                    POINT TO CURRENT PRI LEVEL EXT
         BR    R14                      RETURN TO CALLER
CKSTAT   EQU   *
         TM    QCBEFLG,QCBEOPL          IS THIS MSG,L           SA52971
         BZ    NOZERO                   NO, EXTENSION NOT SET   SA52971
         XC    SCBSCHDR(3),SCBSCHDR     ZERO HDR PTR TO TELL    SA52971
*                                         HM03 IT'S IN EXTENSIONSA52971
*                                         ONLY                  SA52971
NOZERO   EQU   *                                                SA52971
         TM    QCBEFLG,QCBESTAT         IS STATUS SPECIFIED ON QCNTRL
         BZ    QSERV                    NO,GO MARK Q SERVICED
         BAL   R14,EXTFIND              GO FIND CORRECT EXTENSION
         DROP  RQCBE
         USING IEDQQCBE,R5
         OI    QCBEFLG,QCBEHELD         SET Q HELD
         CLC   DRQCURQ(THREE),AVTFZERO  CURRENT QCB PTR ZERO
         BE    OUTMSG1                  BRANCH IF YES
         TM    QCBEFLG,QCBECNT          BYTE CNT SPEC
         BO    NOOUTMSG                 BRANCH IF YES
OUTMSG1  EQU   *
         OI    QCBEFLG,QCBEOMSG         SET OUTMSG PENDING
         OI    QCBEFLG-IEDQQCBE(RQCBE),QCBEOMSG
*                                       SET OUTMSG PENDING
NOOUTMSG EQU   *
         XC    DRQCURQ,DRQCURQ          CLEAR CURRENT QCB PTR
         DROP  R5
         USING IEDQQCBE,RQCBE
         SPACE 1
*    THIS ROUTINE CHECKS FOR CONCENTRATED END OF MESSAGE
*    CONCENTRATED EOM IS SET WHEN
*        (1)  NO QUEUES ARE LEFT IN DRQ TO SERVICE
*        (2)  OR MAXCTB HAS BEEN REACHED
*    WHICH EVER OCCURS FIRST
         SPACE 1
CKCEOM   EQU   *
         LR    RQCB,RDRQ                INIT REG FOR LOOP
         SH    RQCB,HTWELVE             DECR REG FOR LOOP
LOOPDRQ  EQU   *
         LA    RQCB,EIGHT(RQCB)         INIT REG FOR LOP
         L     RQCB,FOUR(RQCB)          GET NEXT ELEMENT IN DRQ CHAIN
         CLI   FOUR(RQCB),ZERO          IS THIS LAST ELEMENT ON DRQ
         BE    SETCEOM                  YES,GO SET CONC EOM
         SH    RQCB,HEIGHT              POINT TO QCB
         LH    RQCBE,QCBEXTO            GET QCB EXTENSION
         AR    RQCBE,RQCB               ADDRESS
         TM    QCBDSFLG,QCBHELD         HAS REUS GOT Q
         BO    LOOPDRQ                  BRANCH IF YES
         TM    QCBSTAT,QCBTRMHO         IS Q HELD
         BO    LOOPDRQ                  BRANCH IF YES
         TM    QCBEFLG,QCBEHELD+QCBESRVC
*                                       IS THIS QCB AVAILABLE
         BNZ   LOOPDRQ                  NO GO CHECK NEXT
*                                       ELEMENT IN CHAIN
         TM    QCBEFLG,QCBEOPL          NEW PRI LEVEL USED
         BO    LEVEL                    YES GO SEE IF ANY LEVEL
*                                       WITH MESSAGES AVAILABLE
         SR    R5,R5                    CLEAR WORK REG
         IC    R5,QCBENPLV              GET NO OF PRI LEVELS
         LA    RPQCB,IEDQPQCB-IEDQQCB(ZERO,RQCB)
*                                       POINT TO FIRST PRIORITY
*                                       LEVEL QCB
LOOPP    EQU   *
         NC    QCBFFEFO,QCBFFEFO        IS THERE AN UNSENT MSG
         BNZ   RESETDRQ                 YES GO CHECK FOR CONC EOM
         LA    RPQCB,QCBPEND            ADDR NEXT PRIORITY LEVEL QCB
         BCT   R5,LOOPP                 BRANCH IF MORE LEVELS
         B     LOOPDRQ                  GO SEE IF ANY MORE MSGS
RESETDRQ EQU   *
         SR    R5,R5                    CLEAR WORK REG
         NC    DRQCTBMX,DRQCTBMX        ARE TO SEND TILL Q
*                                       EMPTY
         BZ    IDLES                    BRANCH IF YES
         IC    R5,DRQCTBCT              GET NO OF MESSAGES REMAINING
*                                       TO BE ADDED TO THIS CONC MSG
         BCTR  R5,ZERO                  DECR NO OF MESSAGES
         STC   R5,DRQCTBCT              AND SAVE
         LTR   R5,R5                    IS COUNT ZERO
         BP    IDLES                    NO
         SPACE 1
SETCEOM  EQU   *
         L     R1,LCBSCBDA-1            GET CONC SCB ADDR
         OI    SCBSTAT1-IEDQSCB(R1),SCBCEND
*                                       SET CONC EOM
         NI    SCBSTAT1-IEDQSCB(R1),AVTEFF-SCBNIDLE
*                                       RESET SO BUFS WILL BE HOOKED IN
         MVC   DRQCTBCT(ONE),DRQCTBMX   RESET MSG COUNT
         TM    LCBERBST,LCBDLNKN+LCBEOMSG
*                                       IS ERB AVAILABLE
         BNZ   EXIT1                    BRANCH IF YES
         OI    PRFSTAT1,PRFITCPN        SET NOT EOM.             Y01004
         B     EXIT1                    EXIT
IDLES    EQU   *
         L     R1,LCBSCBDA-1            GET  POINTER TO CONC SCB
         TM    SCBSTAT1-IEDQSCB(R1),SCBCBGN
*                                      IS THIS CONCENTRATED
*                                       MESSAGE BEGIN
         BZ    CKBUFOUT                 BRANCH IF NO
         OI    SCBSTAT1-IEDQSCB(R1),SCBNIDLE
*                                       SET FIRST TIME SW
*                                       SET SWITCH SO GD WILL NOT
*                                       LINK BUFFERS INTO WRITE
*                                       IDLE LOOP
CKBUFOUT EQU   *
         CLI   DRQBUFCT,ZERO            HAVE REACHED BUFFOUT
         BNE   NOBGN                    NO
         TM    SCBSTAT1-IEDQSCB(R1),SCBNIDLE
*                                       IS THIS BUFFOUT
         BZ    NOBGN                    NO SKIP PRI SET
         MVI   LCBERBPY,PRIINTRQ        SET PRI FOR FIRST PCI
*                                       FOR PCI POST
         NI    SCBSTAT1-IEDQSCB(R1),AVTEFF-SCBNIDLE
*                                       RESET FIRST TIME SW SO
*                                       GD WILL LINK BUFFERS
*                                       INTO CHAIN
NOBGN    EQU   *
         OI    DRQFLAG3,DRQERBAV        SET ERB NOT AVAIL
         TM    LCBERBST,LCBDLNKN+LCBEOMSG
*                                       IS ERB AVAILABLE
         BZ    CHKREQ                   BRANCH IF NO
         NI    LCBERBST,LCBDLNKF        SET ERB NOT POSTABLE
         TM    PRFSTAT1,PRFNLSTN        EOM BUFFER
         BZ    CKBUFCT                  YES CHECK DRQBUFCT
         TM    SCBCTBFL,SCBCTBND        IS THIS CTB END
         BO    CKBUFCT                  BRANCH IF YES
         LA    R14,EXIT1                SET EXIT ADDR
         CLI   DRQERBCT,ZERO            IS DRQ ERB COUNT ZERO
         BNE   SET                      BRANCH IF NO
CKBUFCT  EQU   *
         ICM   R5,ONE,DRQBUFCT          GET BUFFER COUNT.        Y01004
         BNZ   POST                     BRANCH IF COUNT IS NOT   Y01004
*                                       ZERO, TO POST ERB.       Y01004
         L     R5,LCBDCBPT              GET DCB PTR
         USING IHADCB,R5
         TM    DCBPCI,DCBPCISN          DCP = PCI = N
         BO    CKPOST                   YES SEE IF POST OR
*                                       FORCE CONC EOM
         LA    R14,EXIT1                SET EXIT A
SET      EQU   *
         NI    LCBERBST,AVTEFF-LCBEOMSG RESET SO ERB AVAIL
         OI    LCBERBST,LCBDLNKN        SET ERB AVAIL
         BR    R14                      EXIT
         SPACE 1
CHKREQ   EQU   *
         TM    LCBERBST,LCBCOMPL        OUTSTANDING CPB
         BZ    EXIT1                    BRANCH IF NO
         NI    SCBSTAT1-IEDQSCB(R1),AVTEFF-SCBNIDLE
*                                       SET TO LINK BUFFERS IN CHAIN
         L     R5,LCBDCBPT              DCB ADDR
         TM    DCBPCI-IHADCB(R5),DCBPCISN
*                                       PCI EQUAL N
         BZ    EXIT1                    BRANCH IF NO
CKPOST   EQU   *
         LA    R14,SETCEOM              SET EXIT ADDR
         TM    PRFSTAT1,PRFNLSTN        EOM BUFFER
         BZ    SET                      BRANCH IF YES
         TM    SCBCTBFL,SCBCTBND        IS THIS CTB END
         BO    SET                      BRANCH IF YES
         MVI   DRQBUFCT,ONE             SET SO GET A BUFFER
         DROP  R5
POST     EQU   *
         L     R5,AVTCSCH               GET ADDR OF CONC SCHED
         BCTR  R5,ZERO                  SUBTRACT 1
         BCTR  R5,ZERO                  SUBTRACT 1 TO POINT TO
*                                       CONC SCHED QCB
         ST    R5,LCBERB                SET QCB ADDR IN ERB
         MVI   LCBERBPY,PRIEDISP        SET PRIORITY
         LA    R1,LCBERB                SET ELEM ADDR FOR DISP
         BAL   R14,ENQUEUE              GO PUT ERB ON READY Q
         SPACE 2
*    THIS EXIT GOES TO AK  OR A4 IF NO MSGFORM
EXIT1    EQU   *
         NI    DRQFLAG3,AVTEFF-DRQERBAV SET ERB AVAIL
EXIT2    EQU   *
         L     R1,PARMSAVE              GET POINTER TO PARMLIST
         LA    R1,TWO(R1)               POINT TO NEXT PARMLIST
         LA    R13,AVTSAVE2             ADDR OF SAVE2
         L     R15,AVTUI                USER INTERFACE
         BR    R15                      EXIT
         SPACE 1
LEVEL    EQU   *
         LR    R5,RQCBE                 SAVE QCBE ADDR
         SR    R15,R15                  CLEAR WORK REG
         IC    R15,QCBENPLV             GET NO OF PRI LEVELS
CKNXTLVL EQU   *
         SR    R0,R0                    CLEAR WORK REG
         IC    R0,QCBELGTH-IEDQQCBE(R5) GET LENGTH OF EXTENSION
         AR    R5,R0                    POINT TO NEXT EXT
         TM    QCBEFLG-IEDQQCBE(R5),QCBEHELD+QCBESRVC
*                                       IS PRI LEVEL Q SERVICED
*                                       OR HELD
         BZ    CKFEFO                   NO SEE IF ANY UNSENT MSGS ON
*                                       THIS LEVEL
         BCT   R15,CKNXTLVL             YES GO CHECK NEXT EXT
         B     LOOPDRQ                  NO  EXTENSIONS AVAILABLE
*                                       GO CK NEXT ITEM ON DRQ
CKFEFO   EQU   *
         SR    R1,R1                    CLEAR WORK REG
         IC    R1,QCBENPLV              GET NO OF PRI LEVELS
         SR    R1,R15                   GET PRI LEVEL INDEX
         LA    R14,QCBPSIZE             GET SIZE OF PRI LEVEL QCB
         MR    R0,R14                   PRI LEVEL INDEX X SIZE
         LA    RPQCB,IEDQPQCB-IEDQQCB(R1,RQCB)
*                                       POINT TO FIRST PRI LEVEL Q
         NC    QCBFFEFO,QCBFFEFO        ANY UNSENT MESSAGES
         BNZ   RESETDRQ                 YES GO CHECK FOR CONC EOM
         BCT   R15,CKNXTLVL             YES GO CHECK NEXT EXT
         B     LOOPDRQ                  NO EXTENSIONS  HAVE UNSENT
*                                       MESSAGES. GO SEE IF ANY
*                                       ITEMS ON DRQ
*    THIS ROUTINE GETS A UNIT, SETS UP BUFFER PREFIX, AND POST THE
*    BUFFER TO DISK I/O TO MARK A MSG SERVICED
         SPACE 1
GETUNIT  EQU   *
         SR    R1,R1                    CLEAR FOR ICM.           Y01004
         ICM   R1,ADDR,AVTBFREB+ONE     GET ADDRESS OF FIRST     Y01004
*                                       AVAILABLE UNIT.          Y01004
         BZR   R14                      RETURN TO CALLER IF NO   Y01004
*                                       UNITS ARE AVAILABLE.     Y01004
         SPACE 1
         DROP  RPREFIX
         USING IEDQPRF,R1
         MVC   AVTBFREB+ONE(THREE),PRFLINK
*                                       DELINK BUFFER
         SR    R5,R5                    CLEAR FOR ICM.           Y01004
         ICM   R5,HALF,AVTAVFCT         GET BUFFER COUNT.        Y01004
         BCTR  R5,ZERO                  SUBTRACT ONE
         STH   R5,AVTAVFCT              RESTORE COUNT
         XC    PRFTIC+ONE(THREE),PRFTIC+ONE
*
         B     FOUR(R14)                RETURN TO CALLING RTN
*                                       WITH A UNIT
MSGSERV  EQU   *
         LR    R0,R14                   SAVE RETURN ADDR
         BAL   R14,GETUNIT              GO GET A UNIT
         B     NOUNITS                  NO UNITS ARE AVAILABLE
         SPACE 2
*   NOTE:  CONTROL RETURNS HERE FROM "GETUNIT" IF A UNIT IS      Y01004
*          AVAILABLE.  R1 CONTAINS ADDRESS OF AVAILABLE UNIT.    Y01004
         LR    R14,R0                   RESET RETURN REG
         SPACE 1
         MVC   ZERO(PRFSHDR-PRFRCB,R1),ZERO(RPREFIX)
*                                       COPY EOM PREFIX TO NEW UNIT
         MVI   PRFNBUNT,ONE             SET UNIT COUNT TO ONE
         SPACE 1
*    SET MESSAGE SERVICED
         SPACE 1
         XC    SCBTRANS,SCBTRANS        CLEAR FOR FA
         MVI   SCBHBFNO,ZERO            CLEAR RESIDUAL COUNTER
         MVZ   SCBHBFNO(ONE),SCBQTYPE   SAVE SCBQTYPE FOR FA
         NI    SCBQTYPE,X0F             CLEAR HIGH ORDER HALF
         MVC   PRFSRCE(3),SCBFEFO       SET FEFO CHAINING       SA52971
         MVC   PRFTQBCK(1),SCBPRI         FIELDS FOR FA         SA52971
         MVC   PRFTQBCK+1(2),SCBOSEQ                            SA52971
         SPACE 1
*    SET UP BUFFER TO POST TO DISK I/O
         SPACE 1
         LA    R5,AVTDSIOB              DISK I/O QUEUE ADDRESS
         ST    R5,PRFRCB                SET IN BUFFER
         MVI   PRFPRI,PRIDKSRV          SET PRIORITY TO MARK SERV
         SPACE 1
         DROP  R1
         USING IEDQPRF,RPREFIX
ENQUEUE  EQU   *
         STM   R14,RBASE,TWELVE(R13)    SAVE REGS IN AVTSAV3
         ST    R13,PARMLIST             SAVE PTR TO AVTSAV3
         L     RDISP,AVTEA              GET ADDR OF DISPATCHER
         DROP  RQCBE
         USING IEDQDISP,RDISP
         LA    R13,AVTSAVE2             SET FOR DISPATCHER
         BAL   R14,DSPPOSTR             GO ENQUEUE BUFFER ON RDY Q
         L     R13,PARMLIST             RESTORE SAVE AREA ADDR
         LM    R14,RBASE,TWELVE(R13)    RESTORE REGS FROM AVTSAV3
         BR    R14                      RETURN TO CALLING ROUTINE
RIDBUF   EQU   *
         LA    R5,AVTBFRTB              ADDR OF BUFFER RETURN
         ST    R5,PRFRCB                SET IN BUFFER
         MVI   PRFPRI,PRIBFRTB          SET PRIORITY
         LR    R1,RPREFIX               SET PARM REG
         BAL   R14,ENQUEUE              PUT ON RDY Q
         NC    SCBDEOB,SCBDEOB          IS THIS BUFFER A RCL ONE
         BNZ   GODISP                   BRANCH IF YES
         MVC   SCBDEOB(ONE),PRFNTXT     SET DISK RCD
         MVC   SCBDEOB+ONE(THREE),PRFCRCD
*                                       SET DISK ADDRESS
GODISP   EQU   *
         LA    R13,AVTSAVE2             SET FOR DISP
         L     RDISP,AVTEA              ADDR OF DISPATCHER
         B     DSPDISP                  GO AWAY
         SPACE 1
         DROP  RDISP
         USING IEDQQCBE,RQCBE
*    THIS SUBROUTINE FORCES CONCENTRATED END OF MESSAGE IF A BUFFER
*    UNIT IS NOT AVAILABLE FOR MARKING THIS MESSAGE SERVICED.
         SPACE 1
NOUNITS  EQU   *
         LR    R14,R0                   RESET RETURN REG
         MVI   DRQCTBCT,ZERO            RESET CTB COUNT
         MVC   SCBCTBSZ(TWO),AVTFZERO   RESET MSG COUNT         SA57673
         XC    SCBERRST,SCBERRST        CLEAR SCB ERROR WORD     S22027
         OI    QCBEFLG,QCBEOMSG         SET OUTMSG PENDING
         B     FOUR(R14)                RETURN
*     THIS ROUTINE INSERTS THE ENDING CHARACTERS SPECIFIED ON
*     THE QCNTRL OPERAND OF THE TERMINAL MACRO. WHEN ENTERED
*     R5 CONTAINS THE OFFSET INTO THE BUFFER TO INSERT THE CTB
*     END CHARS
         SPACE 2
INSERTRS EQU   *
         STM   R14,RBASE,TWELVE(R13)    SAVE REGS
         SR    R3,R3                    CLEAR WORK REG
         IC    R3,PRFNBUNT              GET NO UNITS THIS BUFFER
         LH    R7,AVTKEYLE              UNIT SIZE
         MR    R2,R7                    UNITS X UNIT ZIZE
         LA    R3,ONE(R3)               TRUE INSRT OFFSET
         STH   R3,DATOFF(,RPREFIX)      SPACE AVAILABLE
         BCTR  R3,ZERO                  RESTORE SPACE AVAIL
         SR    R3,R5                    SUBTRACT
         STH   R3,INSOFF(,RPREFIX)      OFFSET AT WHICH TO INSRT DATA
         LA    R3,QCBERS                ADDR OF DATA TO UNSRT
         ICM   R3,EIGHT,QCBELRS         LENGTH OF DATA TO INSERT Y01004
         ST    R3,AVTPARM3              SET ADDRESS AND LENGTH   Y01004
*                                       FOR AF.                  Y01004
         LA    R14,0(R14)               CLEAR HI ORDER BYTE     SA60814
         ST    R14,R14SAVE              SAVE RETURN REG         SA60814
         SR    R2,R2                    CLEAR REG               SA60814
         IC    R2,AVTPARM3              LNG OF DATA TO INSERT   SA60814
         CH    R2,INSOFF(RPREFIX)       ENOUGH SPACE FOR INSERT SA60814
         BNH   NOUNIT                   BR YES                  SA60814
         OI    R14SAVE,ADDUNIT          REMEMBER TO ADJUST SIZE SA60814
NOUNIT   EQU   *                                                SA60814
         L     R5,PARMSAVE              GET PARM LIST ADDR
         USING PRMLST,R5
         SR    R2,R2                    CLEAR FOR ICM'S.         Y01004
         ICM   R2,FOUR,PRMAOOFF         GET OFFSET TO IEDQAO.    Y01004
         ICM   R2,ONE,PRMAFOFF          GET OFFSET TO IEDQAF.    Y01004
         STCM  R2,ADDR,AVTPARM          STORE TWO OFFSETS AND A  Y01004
*                                       ZERO BYTE (INDICATING    Y01004
*                                       DATA TYPE = CHARS.) IN   Y01004
*                                       PARAMETER LIST.          Y01004
         DROP  R5
         LM    R14,RBASE,TWELVE(R13)    RESTORE REGS
         LA    RPARM,AVTPARM            PARAMETER LIST ADDR
         L     R15,AVTUI                USER INTERFACR
         BALR  R14,R15                  GO INSRT DATA
         L     R14,R14SAVE              RESTORE RETURN REG      SA60814
         MVI   RTNCDE,AVTECD4           ASSUME RAN OUT OF UNITS SA60814
         LTR   R15,R15                  RUN OUT OF UNITS        SA60814
         BNZR  R14                      BR YES                  SA60814
         MVI   RTNCDE,AVTEZERO          RESET RETURN CODE       SA60814
         SR    R1,R1                    CLEAR REG
         IC    R1,QCBELRS               LNGTH OD DATA INSRTED
         AH    R1,PRFSIZE               INCR PRFSIZE
         TM    R14SAVE,ADDUNIT          EXTRA UNIT ADDED        SA60814
         BZ    NOTADDED                 BR NO                   SA60814
         SH    R1,AVTKEYLE              ADJUST SIZE             SA60814
NOTADDED EQU   *                                                SA60814
         STH   R1,PRFSIZE               AND SAVE AS NEW DATA LNGTH
         BR    R14                      RETURN
INSERT   EQU   *
*    WHEN ENTERED R1 CONTAINS A POINTER TO DVCID ENTRY FOR THIS
*    TERMINAL OR ZERO, R15 CONTAINS A POINTER TO THE OPTION FIELD
*    OR ZERO
         SPACE 1
*        THE OPTION FIELD DATA IS CHECKED TO INSURE THAT THE INSERT
*    OFFSET IS LE 8
         SPACE 1
         STM   R14,RBASE,SAVE           SAVE REGS
         OI    SCBCTBSV,CTBINSRT        ASSUME NO INSERTS
         LR    R11,R15                  SAVE PTR TO OPFIELD
         TM    SCBCTBSV,CTBDVCID        ARE TO INSERT DVCID
         BZ    INSRTOP                  NO CHECK IF OPFIELD DATA
*                                       IS TO BE INSERTED
         SR    R7,R7                    CLEAR WORK REG
         SR    R0,R0                    CLEAR WORK REG
         IC    R0,ZERO(R1)              GET LNGTH OF DVCID FIELD
         LA    R8,ONE(R1)               SET ADDR OF DATA TO INSRT
         TM    PRFSTAT1,PRFCNCLN        RECALLED BUFFER
         BO    RECLLBUF                 YES
         TM    PRFSTAT1,PRFNHDRN        HEADER BUFFER
         BO    INSRT                    BRANCH IF NO
         SR    R2,R2                    CLEAR WORK REG
         ICM   R2,ONE,LCBISZE           GET NUMBER OF RESERVES   Y01004
*                                       REMAINING.               Y01004
         BZ    INSRT                    BRANCH IF NO RESERVES.   Y01004
         SR    R2,R0                    WILL DVCID FIT IN SPACE AVAIL
         BM    INSRT                    BRANCH IF NO
         STC   R2,LCBISZE               UPDATE RESERVE COUNT
         AR    R2,R0                    RESTORE PREVIOUS ISZE
         LA    R2,AVTHDRSZ+ONE(R2)      HDR SIZE + RESERVES
INSRT1   EQU   *
         STH   R2,DATOFF(,RPREFIX)      SET AS INSERT OFFSET
         STH   R0,INSOFF(,RPREFIX)      SET AS SPACE AVAILABLE
         LA    R2,TWO                   REQUEST INSERT AND RETURN FCN
         LR    R7,R0                    SET INSERT DATA LENGTH
         SR    R0,R0                    INDICATE DATA TYPE = CHARS
         BAL   R14,LINKAF               EXIT TO AF
         TM    SCBCTBSV,CTBOPFLD        ARE TO INSERT OPFLD DATA
         BO    INSRTOP                  BRANCH IF YES
         B     OUT                      RETURN
INSRTX   EQU   *
         AR    R7,R5                    TRUE INSERT OFFSET
INSRT    EQU   *
         SPACE 1
*    SET UP BUFFER FOR AO AND AF
         SR    R1,R1                    CLEAR FOR ICM.           Y01004
         ICM   R1,HALF,AVTKEYLE         GET UNIT SIZE.           Y01004
         SR    R2,R2                    CLEAR WORK REG
         ST    R2,INSOFF(,RPREFIX)      CLEAR WORK AREA
AGAIN    EQU   *
         SR    RLCB,RLCB                CLEAR FOR ICM.           Y01004
         ICM   RLCB,ADDR,PRFLCB         RESTORE LCB BASE.        Y01004
         IC    R2,LCBISZE               GET NO OF IDLES REMAIN
         LA    R2,AVTTXTSZ+ONE(R7,R2)   ASSUME TEXT BUFFER
         TM    PRFSTAT1,PRFNHDRN        HEADER BUFFER
         BO    NOHDR                    BRANCH IF NO
         LA    R2,AVTHDRSZ-AVTTXTSZ(R2) TEXT BUFFER
NOHDR    EQU   *
         SPACE 1
         STH   R2,DATOFF(,RPREFIX)      SET AS INSERT OFFSET
         SPACE 1
*    BUILD PARM LIST FOR AO AND AF
         SPACE 1
         LR    R7,R0                    SET INSERT DATA LENGTH
         CR    R0,R1                    WILL ALL DATA FIT IN
*                                       SPACE AVAIL
         BNH   ALLONE                   YES GO INSERT IT
         LR    R7,R1                    GET SPACE AVAIL
         SR    R0,R7                    SAVE REMAINING AMT OF DATA
*                                       TO INSERT
         LNR   R0,R0                    INDICATE MORE DATA TO INSRT
ALLONE   EQU   *
         L     R5,PARMSAVE              ADDR OF PARMLIST
         USING PRMLST,R5
         ST    R8,AVTPARM3              SET ADDR IN PARMLIST
         STC   R7,AVTPARM3              SET INSERT DATA LENGTH
         SR    RPARM,RPARM              CLEAR FOR ICM'S.         Y01004
         ICM   RPARM,FOUR,PRMAOOFF      GET OFFSET TO IEDQAO.    Y01004
         ICM   RPARM,ONE,PRMAFOFF       GET OFFSET TO IEDQAF.    Y01004
         STCM  RPARM,ADDR,AVTPARM       STORE TWO OFFSETS AND A  Y01004
*                                       ZERO BYTE (INDICATING    Y01004
*                                       DATA TYPE = CHARS.) IN   Y01004
*                                       PARAMETER LIST.          Y01004
         LA    RPARM,AVTPARM            GET PARAMETER LIST ADDR
         ST    R0,R14SAVE               SAVE REF
         L     R15,AVTUI                ADDR OF USER INTERFACE
         BALR  R14,R15                  GO INSERT DATA
         LTR   R15,R15                  HAVE WE RUN OUT OF INITS
         BNZ   ERREXIT                  BRANCH IF YES
         NI    SCBCTBSV,AVTEFF-CTBINSRT INDICATE INSERTS DONE
         LH    R5,SCBCTBAC              AMOUNT OF DATA INSERTED
         SR    R5,R7                    DECR BY AMT INSERTED NOW
         STH   R5,SCBCTBAC              AND SAVE
         L     R0,R14SAVE               RESTORE REG
         LTR   R0,R0                    ANY MORE DATA TO INSRT
         BP    FINALIZE                 BRANCH IF NO
         LPR   R0,R0                    SET REG POSITIVE
         AR    R8,R7                    UPDATE ADDR OF DATA TO INSERT
         TM    PRFSTAT1,PRFCNCLN        RECALLED BUFFER
         BO    RECLLBUF                 BRANCH IF YES
         B     INSRT                    GO INSERT DATA
         SPACE 1
FINALIZE EQU   *
         LA    R4,OUT                   ASSUME NO OPFLD INSERT
         TM    SCBCTBSV,CTBOPFLD        ARE TO INSERT OPFLD DATA
         BO    INSRTOP                  BRANCH IF YES
CLOSEUP  EQU   *
         OI    SCBCTBSV,CTBINSRT        ASSUME NO INSERTS
         SR    R5,R5                    CLEAR FOR ICM.           Y01004
         SR    R2,R2                    CLEAR FOR ICM.           Y01004
         ICM   R5,HALF,DATOFF(RPREFIX)  GET CURRENT DATA OFFSET. Y01004
         ICM   R2,HALF,PRFSIZE          GET TOTAL DATA SIZE.     Y01004
         LA    R2,ONE(R2)               POINT BEYOND LAST BYTE
         SR    R2,R5                    GET RESIDUAL COUNT
         LR    R8,R2                    SET FOR AF
         SR    R0,R0                    INDICATE DATA TYPE = CHARS
         LA    R2,ONE                   REQUEST SHIFT DATA FCN
         BAL   R14,LINKAF1              EXIT TO AF
         SR    R2,R2                    CLEAR FOR ICM.           Y01004
         ICM   R2,HALF,DATOFF(RPREFIX)  GET FINAL DATA OFFSET.   Y01004
         SH    R2,INSOFF(,RPREFIX)      GET FINAL DATA SIZE
         BCTR  R2,ZERO                  POINT TO LAST BYTE OD DATA
         STH   R2,PRFSIZE               SET IN BUFFER
         BR    R4                       RETURN
INSRTOP  EQU   *
         NI    SCBCTBSV,AVTEFF-CTBOPFLD RESET OPFLD INSRT REQ
         TM    SCBCTBSV,CTBINSFS        ARE TO INSERT OPFIELD    S22027
*                                       DATA IN FIRST CTB        S22027
         BZ    INSRTFST                 BRANCH IF YES            S22027
         TM    PRFSTAT1,PRFNHDRN        HEADER BUFFER            S22027
         BO    INSRTFST                 BRANCH IF NO             S22027
         TM    PRFSTAT1,PRFCNCLN        RECALLED BUFFER          S22027
         BO    INSRTFST                 BRANCH IF YES            S22027
         TM    SCBCTBSV,CTBINSRT        ANY INSERTS TO BE DONE   S22027
         BO    OUT                      BRANCH IF NO             S22027
         LA    R4,OUT                   SET EXIT ADDR            S22027
         B     CLOSEUP                  CLOSE BUFFER UP          S22027
INSRTFST EQU   *
         SR    R7,R7                    CLEAR WORK REG
         ICM   R7,HALF,ZERO(R11)        GET INSERT OFFSET.       Y01004
         BZ    OFFSTOK                  BRANCH IF OFFSET IS ZERO Y01004
*                                       TO INSERT AT END OF PRE- Y01004
*                                       FIX OR IMMED. AFTER ID.  Y01004
         CH    R7,HEIGHT                IS OFFSET LENGTH LE 8
         BH    ERREXIT                  BRANCH IF NO
         TM    SCBCTBSV,CTBINSRT        ANY INSERTS TO BE DONE
         BO    OFFSTOK                  BRANCH IF NO
         BAL   R4,CLOSEUP               GO SHIFT DATA
OFFSTOK  EQU   *
         LA    R8,FOUR(R11)             ADDR OF DATA TO INSRT
         SR    R0,R0                    CLEAR REG
         ICM   R0,ONE,THREE(R11)        LENGTH OF DATA TO INSERT Y01004
         BZ    ERREXIT                  BRANCH IF LENGTH IS ZERO Y01004
         CLI   THREE(R11),AVTEFF        IS LENGTH LE 255
         BH    ERREXIT                  BRANCH IF NO.            Y01004
         TM    PRFSTAT1,PRFCNCLN        RECALLED BUFFER
         BO    RECLLBUF                 BRANCH IF YES
         TM    PRFSTAT1,PRFNHDRN        HEADER BUFFER
         BNO   ISHDR                    BRANCH IF YES
         TM    SCBCTBSV,CTBINSRT        ANY INSERTS DONE
         BO    INSRT                    BRANCH IF NO
         LH    R1,DATOFF(,RPREFIX)      SPACE AVAIL
         B     AGAIN                    BRANCH
         SPACE 1
ISHDR    EQU   *
         SR    R2,R2                    CLEAR REG
         STC   R2,PRMOPTN               INDICATE ISZE NOT SAVES
         IC    R2,LCBISZE               GET RESERVES REMAINING
         LA    R2,AVTHDRSZ(R2,R7)       NEW SCAN PTR            SA56209
STSCAN   EQU   *
         LH    R5,PRFSCAN               GET SCAN PTR
         STH   R5,PARMLIST              SAVE SCAN PTR
         STH   R2,PRFSCAN               SET SCAN PTR FOR INSERT
         LR    R11,R0                   SAVE INSERT DATA LENGTH
         LA    R2,THREE                 REQUEST EXPAND BUF FCN
         BAL   R14,LINKAF1              EXIT TO AF
         LR    R0,R11                   RESTORE INSERT DATA LENGTH
         LH    R5,PARMLIST              ADDR OF PARM LIST
         STH   R5,PRFSCAN               RESTORE SCAN PTR
         LTR   R15,R15                  WAS EXPAND FCN PERFORMED
         BNZ   INSRT                    BRANCH IF NO
         SR    R2,R2                    CLEAR WORK REG
         ICM   R2,ONE,PRMOPTN           GET SAVED ISZE.          Y01004
         BZ    NTSVE                    BRANCH IF ISZE NOT SAVED Y01004
         STC   R2,LCBISZE               RESTORE ISZE
         SPACE 1
NTSVE    EQU   *
         LR    R7,R0                    SET INSERT DATA LENGTH
         SR    R0,R0                    INDICATE DATA TYPE = CHARS
         LA    R2,TWO                   REQUEST INSERT AND RETURN FCN
         BAL   R14,LINKAF               GO INSERT DATA
         B     OUT                      RETURN
ERREXIT  EQU   *
         OI    RTNCDE,ECD20             SET RETURN CODE         SA56209
         TM    SCBCTBSV,CTBINSRT        ANY INSERTS DONE
         BO    OUT                      BRANCH IF NO
         BAL   R4,CLOSEUP               GO SHIFT DATA
OUT      EQU   *
         NI    SCBCTBSV,AVTEFF-CTBINSRT INDICATE INSERTS DONE
         LM    R14,RBASE,SAVE           RESTORE REGS
         BR    R14                      RETURN
         SPACE 1
         SPACE 1
*    THIS ROUTINE HANDLES INSERTION IN RECALLED BUFFERS
         SPACE 1
RECLLBUF EQU   *
         LR    R5,R7                    SAVE OFFSET
         LH    R7,PRFSIZE               GET DATA SIZE            S22027
         CH    R7,SCBEOB                IS PRFSIZE LT EOB OFFSET S22027
         BH    SIZEOKNW                 BRANCH IF NO             S22027
         OI    RTNCDE,AVTECD20          INDICATE NO INSERTS      S22027
         B     OUT                      EXIT                     S22027
SIZEOKNW EQU   *                                                 S22027
         LH    R7,SCBEOB                GET OFFSET TO DATA
         LA    R1,AVTTXTSZ              ASSUME TEXT BUFFER
         TM    PRFSTAT1,PRFNHDRN        HEADER BUFFER
         BO    NTHDR                    BRANCH IF NO
         IC    R1,LCBISZE               GET NO RESERVES REMAINING
         LA    R1,AVTHDRSZ(R1)          ADD HDR PREFIX SIZE
NTHDR    EQU   *
         SR    R7,R1                    CALC SPACE AVAIL IN BUFFER
         TM    SCBCTBSV,CTBINSRT        ANY INSERTS DONE
         BZ    INSRTX                   BRANCH IF YES
         CR    R0,R7                    WILL DATA FIT IN AVAIL SPACE
         BH    INSRTX                   BRANCH IF NO
         LH    R2,SCBEOB                GET DATA OFFSET
         SR    R2,R0                    DECR SCBEOB BY AMT DATA
         STH   R2,SCBEOB                INSERTED AND SAVE
         TM    SCBCTBSV,CTBDVCID        ARE TO INSERT DVCID
         BZ    NOID                     BRANCH IF NO
         NI    SCBCTBSV,AVTEFF-CTBDVCID RESET DVCID INSRT REQ BIT
         LA    R2,ONE(R7,R1)            SET INSERT DATA OFFSET
         LR    R7,R0                    SET INSERT DATA LENGTH
         B     INSRT1                   GO INSERT DATA
         SPACE 1
NOID     EQU   *
         IC    R2,LCBISZE               GET RESERVES REMAINING
         STC   R2,PRMOPTN               SAVE ISZE
         LA    R15,AVTEFF               SET MAX ISZE
         CR    R7,R15                   IS SPACE IN BUF GT ISZE
         BH    STC                      BRANCH IF YES
         LR    R15,R7                   SET FAKE ISZE
STC      EQU   *
         STC   R15,LCBISZE              SET ISZE FOR AF
         AR    R7,R1                    RESTORE SCBEOB OFFSET
         AR    R7,R5                    TRUE INSERT OFFSET
         LR    R2,R7                    SET SCAN PTR
         B     STSCAN                   GO SAVE SCAN
         SPACE 1
*    WHEN ENTERED R2 CONTAINS THE INDEX FLAG FOR AF
LINKAF   EQU   *
         ST    R8,AVTPARM3              SET INSERT DATA ADDR
         STC   R7,AVTPARM3              SET INSERT DATA LENGTH
LINKAF1  EQU   *
         USING PRMLST,R5
         L     R5,PARMSAVE              GET POINTER TO PARMLIST
         SR    R15,R15                  CLEAR WORK REG
         IC    R15,PRMAFOFF             GET AF INDEX
         AR    R15,R2                   SET INDEX FLAGS
         STC   R15,AVTPARM              SET AF INDEX IN PARMLIST
         STC   R0,AVTPARM+ONE           SET DATA TYPE
         LA    RPARM,AVTPARM            POINT TO PARAMETER LIST
         L     R15,AVTUI                ADDR USER INTERFACE RTN
         BR    R15                      RETURN
         DROP  R5
         DROP  RQCBE
         EJECT
* C O N S T A N T S   A N D   W O R K   A R E A S.               Y01004
PARMSAVE DC    F'0'                     ADDR OF PARMLIST
PARMLIST DS    0F                       PARAMETER LIST
PRMOFFST DC    X'00'                    MODULE OFFSET
PRMLNGTH DC    X'00'                    LENGTH OF PARMLIST
PRMOPTN  DC    X'00'                    OFFSET TO OPTION FIELD
PRMREGOF DC    X'00'                    REG OFFSET
R14SAVE  DC    F'0'                     SAVE FOR R14
SAVE     DC    15F'0'                   SAVE AREA
HTWELVE  DC    H'12'                    CONSTANT
HEIGHT   DC    H'8'                     CONSTANT
MSGCNT1  DC    H'1'                     NO OF MSGS
SEOBSV   DC    H'0'                     SCBEOB SAVE
RTNCDE   DC    X'00'                    RETURN CODE
         DC    X'FAFBFCFDFE'            BEGINING OF X-LATE TBL
         DC    X'FF'                    MORE TRANSLATE TABLE
TABLE    EQU   *
         DC    X'000102030405060708090A0B0C0D0E0F' TABLE
         SPACE 2
MVCRS    MVC   PRFSTXT-IEDQPRF(ZERO,RPREFIX),ONE(R1)
         EJECT
*    DSECTS
         SPACE 2
         TPRIOR
         TAVTD
         TTRMD
         TQCBD
         TPRFD
         TLCBD
         TSCBD
         TDISPD
         TQCBED
         TDRQD
         DCBD  DSORG=TX
         EJECT
PRMLST   DSECT
PRMGHOFF DS    XL1                      OFFSET TO IEDQGH
PRMGHLN  DS    XL1                      LENGTH OF PARAMETER LIST
PRMCTBOP DS    XL1                      CTBFORM OPTIONS
PRMAVAIL DS    XL1                      RESERVED
PRMAFOFF DS    XL1                      OFFSET TO IEDQAF
PRMAOOFF DS    XL1                      OFFSET TO IEDQAO
PRMAEOFF DS    XL1                      OFFSET TO IEDQAE
PRMOPFLD DS    XL1                      OPTION FIELD OFFSET
         END
