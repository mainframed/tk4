         TITLE 'IEDQNP-CHECKPOINT DISK I/O ROUTINE'
IEDQNP   CSECT
         SPACE 3
*CHANGE ACTIVITY AS FOLLOWS
******************** MICROFICHE FLAGS *********************** SUPT CODE
*C232000-238000                                                @SA71964
         SPACE 3
***********************************************************************
*                                                                     *
*TITLE:'IEDQNP'-CHECKPOINT DISK I/O ROUTINE                           *
*                                                                     *
*        MODULE NAME = IEDQNP                                         *
*                                                                     *
*        DESCRIPTIVE NAME =  CHECKPOINT DISK I/O ROUTINE              *
*                                                                     *
*        COPYRIGHT = 'NONE'                                           *
*                                                                     *
*        STATUS: CHANGE LEVEL 5                                       *
*                                                                     *
*                                                                     *
*FUNCTION:THIS MODULE LOCATES THE NEXT DISK RECORD TO BE WRITTEN,     *
*   DETERMINES THE PROPER TTR FOR THE RECORD,AND ISSUES AN EXCP. IF   *
*   THERE IS A RECORD IN THE CURRENT EXCP SLOT(CKPEXCP),IT IS THE     *
*   RECORD WRITTEN.IT IS A CONTINUATION OF A CHECKPOINT WHICH         *
*   REQUIRED MORE THAN ONE SEGMENT. IF CKEXCP IS ZERO, THE FIRST      *
*   RECORD ON THE DISK I/O QUEUE(CKPIOQF) IS THE ONE WRITTEN. IT IS   *
*   REMOVED FROM THE QUEUE AND PUT INTO CKPEXCP. IF THE RECORD IS     *
*   AN ENVIRONMENT OR INCIDENT,THE TIME MACRO IS USED TO PUT THE      *
*   DATE AND TIME INTO THE RECORD. THE MOETHOD USED TO DETERMINE THE  *
*   TTR DEPENDS ON THE TYPE OF RECORD. FIRST SEGMENT OF AN ENVIRON-   *
*   MENT CHECKPOINT:THE CONTROL RECORD HAS THE TTR OF ALL FIRST       *
*   SEGMENTS AND AN INDEX TO THE LATEST ONE USED.THIS MODULE PICKS    *
*   UP THE TTR WHICH SEQUENTIALLY FOLLOWS THE LATEST ONE,AND          *
*   CHANGES THE INDEX TO POINT TO THE NEW FIRST SEGMENT. ANY          *
*   ENVIRONMENT SEGMENT OTHER THAN THE FIRST:THE CHECKPOINT WORK      *
*   AREA CONTAINS THE TTR OF THE LAST SEGMENT WRTI                    *
*   AREA CONTAINS THE TTR OF THE LAST SEGMENT WRITTEN.THIS MODULE     *
*   DETERMINES THE TTR OF THE NEXT SEQUENTIAL RECORD ON DISK.         *
*   INCIDENT RECORD:THE CHECKPOINT WORK AREA CONTAINS THE TTR OF      *
*   THE LAST INCIDENT WRITTEN.THIS MODULE DETERMINES THE TTR OF THE   *
*   NEXT SEQUENTIAL RECORD ON DISK. CKREQ RECORD:THE CHECKPOINT       *
*   WORK AREA CONTAINS A CKREQ-TTR TABLE WHICH ASSOCIATES A TERM-     *
*   NAME OFFSET WITH A PARTICULAR TTR. THIS MODULE USES THE TERM-     *
*   NAME OFFSET IN THE DISK RECORD TO LOCATE THE PROPER TTR IN THE    *
*   TABLE.                                                            *
*                                                                     *
*ENTRY POINT:                                                         *
*                                                                     *
*        IEDQNP                                                       *
*                                                                     *
*INPUT:REGISTERS 2,9,12,14,15 CONTAIN THE FOLLOWING VALUES            *
*                                                                     *
*   2-ADDRESS OF CKPT WORK AREA                                       *
*   9-ADDRESS OF AVT                                                  *
*   12-BASE REG FOR CHECKPOINT EXECUTOR-IEDQNF                        *
*   14-RETURN POINT-IN IEDQNF                                         *
*   15-ENTRY POINT OF THIS MODULE                                     *
*                                                                     *
*OUTPUT:THE ABOVE REGISTERS REMAIN UNCHANGED                          *
*                                                                     *
*   THE I/O IS STARTED TO WRITE ONE DISK RECORD.                      *
*                                                                     *
*EXTERNAL ROUTINES:                                                   *
*                                                                     *
*        IECPCNVT-CONVERTS RELATIVE TTR TO ABSOLUTE DISK ADDRESS      *
*                                                                     *
*EXITS-NORMAL:THIS MODULE BRANCHES TO 4 PLUS THE ADDRESS IN R14.      *
*                                                                     *
*EXITS-ERROR:THIS MODULE ISSUES AN ERROR MESSAGE VIA WTO AND          *
*   BRANCHES TO 4 PLUS THE ADDRESS IN R14. IT REGOGNIZES AN ERROR     *
*   IF THERE IS NO TTR AVAILABLE FOR ENVIRONMENT SEGMENTS OR CKREQ    *
*   RECORDS BECAUSE THEY ALL HAVE DISK ERRORS.                        *
*                                                                     *
*TABLES/WORK AREAS:                                                   *
*                                                                     *
*   AVT (AVTCLRHI,AVTCPRCD,AVTHA3,AVTNCKPR,AVTRNMPT)                  *
*   CHECKPOINT WORK AREA                                              *
*   TERMNAME TABLE                                                    *
*   DCB                                                               *
*   DEB                                                               *
*   CVT                                                               *
*                                                                     *
*ATTRIBUTES:REENTERABLE                                               *
*                                                                     *
*NOTES:THE OPERATION OF THIS MODULE DEPENDS UPON AN INTERNAL REPRE-   *
*   SENTATION OF THE EXTERNAL CHARACTER SET WHICH IS EQUIVALENT TO    *
*   THE ONE USED AT ASSEMBLY TIME. THE CODING HAS BEEN ARRANGED SO    *
*   THAT REDEFINITION OF 'CHARACTER' CONSTANTS,BY REASSEMBLY, WILL    *
*   RESULT IN A CORRECT MODULE FOR THE NEW DEFINITIONS.               *
*                                                                     *
***********************************************************************
         SPACE 3
*REGISTER ASSIGNMENTS
         SPACE
R0       EQU   0                        TIME
R1       EQU   1                        DATE,INDEX-NO.OF TOTAL RCDS
R2       EQU   2                        ADDR OF CKPT WORK AREA
R3       EQU   3
R4       EQU   4                        ADDR OF DISK RECORD
R5       EQU   5                        ADDR OF INACTIVE CKREQ-TTR
R6       EQU   6                        ADDR OF CKREQ-TTR TBL ENTRY
R7       EQU   7                        TTR OF LAST RECORD-THIS TRK
R8       EQU   8                        TTR OF LAST WRITTEN RECORD
RAVT     EQU   9                        ADDR OF AVT
R10      EQU   10                       LENGTH OF RECORD
R11      EQU   11                       INDEX-COUNT OF CKREQ-TTR       X
                                        TABLE ENTRIES
R12      EQU   12                       BRANCH REG
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE 3
*STANDARD LINKAGE
         SPACE
         USING *,R15                    BASE REG
         B     QNP00
         DC    CL8'IEDQNP'
         DC    CL6'050771'              MERLIN SUPPORT           S1101
QNP00    EQU   *
         USING IEDQAVTD,RAVT            BASE FOR AVT
         SPACE
         USING IEDQCKPD,R2              BASE FOR CKPT WORK AREA
         SPACE
         USING IEDQCDRD,R4
         L     R4,CKPEXCP               ADDR OF CURRENT EXCP RECRD
         LTR   R4,R4                    CHECK FOR CONTINUED RECORD
         BNZ   QNP15                    BRANCH IF CONTINUED
         MVC   CKPEXCP+1(3),CKPIOQF+1   FIRST READ TO EXCP SLOT@SA71964
         L     R4,CKPEXCP               GET FIRST RECORD ADDR  @SA71964
         MVC   CKPIOQF+1(3),1(R4)       DEQUEUE FIRST RECORD   @SA71964
         ST    R4,CKPRW                 PUT DATA ADDR IN WRITE CCW
         MVI   CKPRW,CKPWRITE           PUT WRITE COMMAND CODE IN
QNP15    EQU   *
         LH    R10,CKPINCLN             LENGTH OF INCIDENT OR CKREQ
         LA    R13,CKPSECLI             TRK DATA COUNT FOR INCIDNT 0416
         CLI   CDRKEY,CDRCKREQ          CHRCK FOR CKREQ RECORD
         BE    QNP70                    BRANCH IF CKREQ
         SPACE 3
*THIS DISK RECORD IS EITHER A TOTAL OR AN INCIDENT RECORD
         SPACE
         LR    R11,R15                  SAVE REG
         TIME  BIN                      GET TIME
         LR    R15,R11                  RESTORE REG
         SPACE
         ST    R0,CDRTIME               PUT TIME IN DISK RECORD
         ST    R1,CDRDATE               PUT DATE IN DISK RECORD
         CLI   CDRKEY,CDRTOTAL          CHECK FOR TOTAL RECORD
         BNL   QNP85                    BRANCH IF TOTAL
         SPACE 3
*THIS DISK RECORD IS AN INCIDENT
         SPACE
         L     R8,CKPTTRLI-1            GET TTR OF LAST INCIDENT
         LA    R8,0(0,R8)               CLEAR HIGH ORDER BYTE
         LTR   R7,R8                    CJECK NO LAST INCIDENT-AT      X
                                        END OF INCIDENTS,THIS TTR      X
                                        IS INITIALIZED TO ZERO
         BNZ   QNP25                    BRANCH IF NOT ZERO
         L     R0,CKPTTRIN-1            GET TTR OF 1ST INCIDENT
         B     QNP50                    CONVERT TTR
QNP25    EQU   *
         CLC   CKPTTRLI(2),CKPTTRIN     IS RCD ON FIRST TRACK WHICH    X
                                        CONTAINS INCIDENTS
         BNE   QNP30                    BRANCH IF NOT ON 1ST TRACK 0707
         L     R7,CKPTTRIN-1            GET 1ST INCIDENT ON 1ST TR50707
         LA    R7,0(,R7)                CLEAR HIGH ORDER BYTE      0908
         IC    R7,CKPINRNO              TTR OF LAST RCD ON 1ST TRK 0825
         B     QNP35                                               0707
QNP30    EQU   *                                                   0707
         SPACE 3
*THIS DISK RECORD IS EITHER INCIDENT OR TOTAL
         SPACE
         IC    R7,CKPIPERT              TTR OF LAST RCD ON TRACK
         SPACE
QNP35    EQU   *
         CR    R7,R8                    CHECK FOR LAST RCD
         BE    QNP45                    BRANCH IF END OF TRACK
         LA    R0,1(0,R8)               SET TTR-NEXT RCD SAME TRACK
         B     QNP50
QNP45    EQU   *
         LA    R0,CKP101(0,R8)          GET NEXT TRACK
         IC    R0,QNPONE                FIRST RECORD
         XC    0(2,R13),0(R13)          INITIALIZE DATA ON TRK     0421
QNP50    EQU   *
         ST    R0,CKPTRMAD
         CLI   CDRKEY,CDRTOTAL          CHECK FOR TOTAL
         BNL   QNP53                    BRANCH IF ENV RECORD
         MVC   CKPTTRLI(3),CKPTRMAD+1   SAVE RELATIVE TTR FOR INCID
         B     QNP55
QNP53    EQU   *
         MVC   CKPTTRLT(3),CKPTRMAD+1   MOVE TTR
         CLI   CDRKEY,CDRTOTLC          CHECK FOR CONTINUED SEG
         BE    QNP55                    BRANCH IF NOT LAST SEGMENT
         XC    CKPTTRLT(3),CKPTTRLT     CLEAR TTR OF LAST ENV RCD
         SPACE 3
*CONVERT RELATIVE TTR TO ABSOLUTE DISK ADDRESS
         SPACE
QNP55    EQU   *
         MVC   CKPTRMAD(2),0(R13)       PUT LENGTH ON WORD BNDRY   0430
         LH    R11,CKPTRMAD             GET DATA ON TRACK          0430
         LR    R1,R11                   SAVE DATA COUNT            0416
         AR    R1,R10                   ADD LENGTH OF RCD TO BE REA0430
         STH   R1,CKPTRMAD              STORE DATA LENGTH          0430
         MVC   0(2,R13),CKPTRMAD        RESTORE DATA LEN FOR TRACK 0430
QNP56    EQU   *                                                   0416
         LR    R6,R2                    CHANGE BASE OF WORK AREA
         DROP  R2
         USING IEDQCKPD,R6              TEMPORARY BASE
         L     R13,CKPCVTPT             ADDRESS OF CVT             0416
         STM   RAVT,R2,CKPSAVE2         SAVE REGS USED BY CONVERT
         L     R15,CKPCNTTR(,R13)       GET CONVERSION RTN ADDRESS 0416
         SLL   R0,8                     POSITION TTR
         LM    R1,R2,CKPCPARM
         BALR  R14,R15                  BRANCH TO CONVERSION RTN
         SPACE
         LM    RAVT,R2,CKPSAVE2         RESTORE REGS
         DROP  R6
         USING IEDQCKPD,R2              RESTORE BASE
         LR    R2,R6
         SPACE 3
*CHECK FOR RPS FEATURE AND IF PRESENT,CONVERT TRACK DATA COUNT INTO
*A SECTOR ID FOR THE SET SECTOR COMMAND. (MERLIN DEVICE)
         SPACE
         CLI   CKPSETSC,CKPNOOP         CHECK FOR RPS FEATURE      0416
         BE    QNP60                    BRANCH IF NOT PRESENT      0416
         LR    R0,R11                   GET TRACK DATA COUNT       0416
         O     R0,QNPFLAG-2             SET FLAG FOR CNVRT  0507 S21101
         SLL   R0,CKP2BYTE              MOVE TO LOW ORDER HALF WORD0416
         IC    R0,CKPIOR                GET RECORD NUMBER          0416
         L     R15,CKPCNSEC(,R13)       GET SECTOR CONVERSION RTN  0416
         L     R2,CKPPARM2              GET UCB INDEX AND ADDR     0416
         BALR  R14,R15                  CONVERT TO SECTOR ID       0416
         LR    R2,R6                    RESTORE CKPT BASE          0416
         LM    RAVT,R2,CKPSAVE2         RESTORE REGS
         SPACE 3
*WRITE DATA PORTION OF RECORD USING EXCP,THEN RETURN TO EXECUTOR
         SPACE
QNP60    EQU   *                                                   0416
         STH   R10,CKPRW+6              PUT LENGTH INTO CCW
         EXCP  CKPIOB
         SPACE 3
         B     4(R14)                   RETURN TO EXECUTOR-NO OTHER    X
                                        LOAD NEEDED FOR THIS FUNCTN
         SPACE 3
*THIS DISK RECORD IS A CKREQ RECORD
         SPACE
QNP70    EQU   *
         LH    R10,CKPCKRLN             LENGTH OF CKREQ RECORD
         L     R6,CKPCTTRB              ADDR OF CKREQ-TTR TABLE
         SR    R11,R11                  CLEAR
         IC    R11,CKPCKRQS             GET CKREQS VALUE ON INTRO      X
                                        AT LAST COLD START
         LA    R11,CKPCKRNO(0,R11)      ADD EXTRAS FOR DISK ERROR
         SR    R5,R5                    CLEAR-ADDR OF INACTIVE ENTY
*BEGINNING OF LOOP THROUGH CKREQ-TTR TABLE
QNP75    EQU   *
         TM    CKPCTFLG(R6),CKPCTDER    CHECK FOR DISK ERROR
         BO    QNP77                    BRANCH IF TTR UNUSABLE
         CLC   CDRCKOFF,CKPCTOFF(R6)    COMPARE OFFSETS-RECORD,TABL
         BNE   QNP76                    BRANCH NOT EQUAL
         LR    R5,R6                    SAVE ENTRY ADDR
         B     QNP80
QNP76    EQU   *
         TM    CKPCTFLG(R6),CKPCTACT    CHECK FOR INACTIVE ENTRY
         BO    QNP77                    BRANCH IF ACTIVE
         LR    R5,R6                    SAVE INACTIVE ENTRY
QNP77    EQU   *
         LA    R6,CKPCTTRL(0,R6)        MOVE TO NEXT ENTRY
         BCT   R11,QNP75                SUBTRACT FROM COUNT OF ENTR
         SPACE
*END OF LOOP
         SPACE 3
         LTR   R5,R5                    CHECK FOR INACTIVE ENTRY
         BZ    QNP96                    BRANCH IF NO INACTIVE ENTRY
         SPACE
         MVC   CKPCTOFF(2,R5),CDRCKOFF  PUT OFFSETT IN INACTIVE ENTY
QNP80    EQU   *
         OI    CKPCTFLG(R5),CKPCTACT    MARK ENTRY ACTIVE
         MVC   CKPTRMAD(2),CKPCTSEC(R15) GET TRK DATA LENGTH       0416
         LH    R11,CKPTRMAD             GET LENGTH IN REG          0416
         MVC   CKPTRMAD+1(3),CKPCTTTR(R5) PUT ON WORD BNDRY
         L     R0,CKPTRMAD              GET TTR
         B     QNP56                    WRITE CKREQ RECORD         0416
         SPACE 3
*THIS DISK RECORD IS A SEGMENT OF A TOTAL ENVIRONMENT CKPT RECORD
         SPACE
QNP85    EQU   *
         MVC   CDRTTRLI,CKPTTRLI        SAVE LAST INC AT TIME OF EN0922
         LH    R10,CKPBPERR             GET LENGTH OF TOTAL RCD SEG
         L     R8,CKPTTRLT-1            GET TTR OF LAST TOTL WRITTN
         LA    R8,0(0,R8)               CLEAR HIGH ORDER BYTE
         LTR   R7,R8                    CHECK FOR FIRST SEGMENT-       X
                                        FIELD IS SET TO ZERO WHEN      X
                                        LAST SEGMENT IS WRITTEN
         BZ    QNP87                    BRANCH IF 1ST SEGMENT
         SPACE 3
*THIS IS NOT THE FIRST SEGMENT
         SPACE
         IC    R7,CKPRPERT              RCDVNO. OF LAST RCD ON TRCK
         B     QNP35
         SPACE 3
*THIS IS THE FIRST SEGMENT-DETERMINE TTR FOR NEXT CURRENT ENV
         SPACE
QNP87    EQU   *
         SR    R3,R3                    INITIALIZE SWITCH
         SR    R11,R11                  CLEAR INDEX
         IC    R11,CKPTTRCT             GET NO. OF CURRENT TOTAL
         SR    R1,R1                    CLEAR INDEX
         IC    R1,CKPCPRCD              GET COUNT OF TOTALS (VALUE     X
                                        CPRCDS ON INTRO AT LAST        X
                                        COLD START
QNP875   EQU   *
         LR    R13,R11
         MH    R13,QNPHA5               MULTIPLY BY 5(LENGTH OF TTR)429
         LA    R13,CKPTTRT1(R13)        ADDRESS OF THE 1ST TTR
         SR    R1,R11                   GET INDEX FOR LOOP
         BZ    QNP90                    BRANCH IF LAST RCD IS CURNT
QNP88    EQU   *
         LA    R11,1(0,R11)             GET NEXT TOTAL RECORD
         CLI   2(R13),0                 CHECK FOR DISK ERROR. A        X
                                        VALID RECORD NO. CANNOT BE     X
                                        ZERO.
         BE    QNP89                    BRANCH IF THIS RCD UNUSABLE
         STC   R11,CKPTTRCT             NEW CURRENT ENV RECORD
         MVC   CKPSECLT,3(R13)          GET TRK DATA LENGTH FOR 1ST0416
         MVC   CKPTRMAD+1(3),0(R13)     MOVE TTR
         LA    R13,CKPSECLT             SET ADDRESS                0416
         L     R0,CKPTRMAD              GET TTR
         B     QNP50
         SPACE
QNP89    EQU   *
         LA    R13,CKPTTRLN(,R13)       GET ADDR OF NEXT TTR       0430
         BCT   R1,QNP88
         LTR   R3,R3                    CHECK SWITCH
         BNZ   QNP95                    BRANCH IF SECOND TIME THRU
         SPACE 3
*SET UP FOR LOOP TO CHECK TTRS BEFORE THE CURRENT TTR
         SPACE
         LR    R3,R15                   SET SWITCH TO NON-ZERO
QNP90    EQU   *                                                   0928
         IC    R1,CKPTTRCT              GET CURRENT ENV POSITION   0928
         SR    R11,R11                  GET FIRST TTR
         B     QNP875                   GO THROUGH LOOP AGAIN
         SPACE
*END OF LOOP THROUGH TTRS
         SPACE 3
*THERE IS NO AVAILABLE TTR-ALL HAVE DISK ERRORS
         SPACE
QNP95    EQU   *
         LA    R1,QNPTEXT               WTO MSG ADDRESS            0928
         MVI   CDRKEY,CDRTOTAL          MARK LAST SEG              0928
         B     QNP97
         SPACE 3
*THERE IS NO AVAILABLE CKREQ RECORD
         SPACE
QNP96    EQU   *
         MVC   CKPMSGTP,QNPCKREQ        FILL IN TYPE OF MSG
         LH    R0,CDRCKOFF              GET OFFSET FROM RECORD
         N     R0,AVTCLRHI              CLEAR HIGH ORDER HALF WORD
         BCTR  R0,0                     SUBTRACT ONE
         SR    R1,R1
         L     R3,AVTRNMPT              ADDR OF TERM NAME TABLE
         USING IEDQTNTD,R3              BASE
         IC    R1,TNTENLEN              LENGTH OF TERM NAME
         LR    R10,R1                   SAVE LENGTH
         LA    R1,3(0,R1)               ADD LENGTH OF ADDR
         MR    R0,R0
         LA    R1,TNTFIRST(R1)          ADDR OF ENTRY
         BCTR  R10,0                    SUBTRACT ONE
         EX    R10,QNPMOVE              MOVE TERM NAME TO MSG
         SPACE 3
*SEND ERROR MESSAGE TO CONSOLE
         SPACE
         MVC   CKPMSGTX-2(39),QNPTEXT+2 MOVE TEXT OF ERROR MSG     0706
         LA    R1,CKPMSG                ADDRESS OF MSG
QNP97    EQU   *                                                   0928
         SVC   35
         MVI   CKPECB,X'40'             POST ECB SO DISPOSITION        X
                                        WILL GET CONTROL
         SPACE 3
*RETURN TO CHECKPOINT EXECUTOR-NO MORE LOADS ARE NEEDED FOR THIS
*FUNCTION
         SPACE
         B     4(R14)                   RETURN
         SPACE 3
QNPONE   DC    X'1'                     1ST RECORD ON A TRACK
QNPTEXT  WTO   'IED086I CHECKPOINT DISK ERROR-       ENVIRONMENT',MF=L,X
               ROUTCDE=11,DESC=4
QNPCKREQ DC    CL20'CKREQ,'
QNPMOVE  MVC   CKPMSGPN(0),0(R1)
         DS    0F                                           0507 S21101
QNPHA5   DC    H'5'                     LENGTH OF ENV TTR ENTRY    0429
QNPFLAG  DC    X'8000'                  FLAG FOR CONVRT RTN 0507 S21101
         SPACE 3
         PRINT NOGEN
         TAVTD
         TCKPD 3330
         TTNTD
         DCBD  DSORG=DA
         END
