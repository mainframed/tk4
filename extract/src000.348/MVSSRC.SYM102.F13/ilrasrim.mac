         TITLE 'ILRASRIM-ASM INITIALIZATION MODULE                     *
                        '
ILRASRIM CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'ILRASRIM  77.272'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @09,0                                               0001
@PSTART  LA    @10,4095(,@09)                                      0001
         LA    @11,4095(,@10)                                      0001
         LA    @12,4095(,@11)                                      0001
         USING @PSTART,@09                                         0001
         USING @PSTART+4095,@10                                    0001
         USING @PSTART+8190,@11                                    0001
         USING @PSTART+12285,@12                                   0001
         ST    @13,@SA00001+4                                      0001
         LA    @14,@SA00001                                        0001
         ST    @14,8(,@13)                                         0001
         LR    @13,@14                                             0001
*
* REFS ARE GENERATED FOR NVT FIELDS THAT CONTAIN ADDRESSES OF
* NIP SERVICE ROUTINES, SO IEAPMNIP MACRO CALLS TO THESE ROUTINES
* WILL ASSEMBLE PROPERLY.
*                                                                  0165
*/*ILRASRIM: CHART                                                   */
*/*HEADER                                                          0165
*/*  ILRASRIM GENERAL FLOW OF CHART SEGMENTS                         */
*/*ILRASRIM: E ENTRY TO SHOW FLOW OF SEGMENTS                        */
*/*          S RIMINIT: SET UP                                       */
*/*          S OPENPLPA: OPEN PLPA DATA SET                          */
*/*          S OPENDPLX: OPEN DUPLEX DATA SET                        */
*/*          S OPENCOMM: OPEN COMMON DATA SET                        */
*/*          D (YES,,NO,%A1) QUICK OR WARM START?                    */
*/*          S RBLDPLPA: REBUILD THE PLPA PAGE INFO                  */
*/*          D (YES,,NO,%A1) WARM START?                             */
*/*          S NEEDLOCL: LOCATE AND OPEN PREVIOUS LOCALS             */
*/*%A1:      S OPENLOCL: OPEN ALL LOCAL DATA SETS                    */
*/*          S TIMESTMP: TIMESTAMP TPARB, QSR, COMMON & DUPLEX       */
*/*          S MOVEPCT: COPY PCT TO SQA                              */
*/*          S BLDPART: BUILD PART FROM ILRTPARB                     */
*/*          D (NO,,YES,%A3) COLD START?                             */
*/*          S QSRTPARB: FREE QSR AND WRITE TPARB                    */
*/*%A3:      S INITSART: BEGIN SWAP PROCESSING                       */
*/*          D (YES,,NO,%A4) ANY SWAP DATA SETS?                     */
*/*          S OPENSWAP: OPEN SWAP DATA SETS                         */
*/*%A4:      S INITSCCW: BUILD SCCW'S                                */
*/*          S LGVTSRB: INITIALIZE ILRLGVT AND SRB'S                 */
*/*          S MSGBUF:  BUILD ASM MESSAGE BUFFERS                    */
*/*          S BLDCELLS: BUILD CELLPOOLS AND INITIALIZE              */
*/*          S LISTMSG: LIST PAGING DATA SETS FOR THIS IPL           */
*/*          R RETURN TO IEAVNIPM                                    */
*/*ILRASRIM: END                                                     */
*                                                                  0165
*                                                                  0165
*/********************************************************************/
*/*                                                                  */
*/* RIMINIT: PRELIMINARY WORK IN ASM RIM                             */
*/*                                                                  */
*/* INPUT: ADDRESS OF NVT                                            */
*/*        ADDRESS OF CVT                                            */
*/*                                                                  */
*/* PROCESS: INIT RIM PROCESS SWITCHES.  GETMAIN PARSE LIST          */
*/*          (ILRDSTBL), 4K BUFFER, AREA FOR ILRTPARB(TEMPORARY      */
*/*          PAGE DATA SET INFORMATION, AND ILRQSTCD(QUICK START     */
*/*          RECORD).  PARSE PARAMETER STRINGS OF PAGNUM= AND        */
*/*          PAGE=.  CHECK THAT PLPA AND COMMON DATA SETS WERE       */
*/*          SPECIFIED. ALSO AT LEAST ONE LOCAL DATA SET IF COLD     */
*/*          START.                                                  */
*/*                                                                  */
*/* OUTPUT: ILRDSTBL, BUFFER, ILRTPARB, AND ILRQSRCD AREAS           */
*/*         ILRDSTBL CONTAINS PAGE DATA SET NAMES SPECIFIED AND      */
*/*              THIRD ENTRY RESERVED FOR ANY DUPLEX DATA SET        */
*/*         PAGE AND SWAP SPECIFIED EXPANSION NUMBERS                */
*/*                                                                  */
*/********************************************************************/
*/*RIMINIT: CHART (SEQ)                                              */
*/*HEADER                                                          0165
*/*  ILRASRIM                                                      0165
*/* RIMINIT: PRELIMINARY WORK IN ASM RIM                             */
*/*RIMINIT: E ENTRY TO ASM RIM                                       */
*/*         P ZERO PROCESS SWITCHES                                  */
*/*         M LOAD ILROPS00 AND ILRPREAD MODULES                     */
*/*         L UNCONDTIONAL GETMAIN FOR ILRDSTBL AND BUFFER           */
*/*         S GGETMAIN: OBTAIN SPACE FOR ILRTPARB AND ILRQSRCD       */
*/*         N WILL ZERO AREAS IF NECESSARY LATER                     */
*/*%A1:     P CHARPTR POINT TO PAGNUM STRING                         */
*/*         D (YES,,NO,%A2) CHARPTR IS ZERO?                         */
*/*         P (,%A3) PAGE AND SWAP DEFAULT TO 1                      */
*/*%A2:     D (NO,,YES,%A5) CHAR IS '('?                             */
*/*%A4:     S ILRIMMSG: ISSUE MESSAGE IEA916E(PAGNUM)                */
*/*         S (,%A1) NIPPRMPT: PROMPT OPERATOR FOR REPLY             */
*/*%A5:     P NEXT CHAR                                              */
*/*         P PAGE NUMBER STARTS AT CHARPTR                          */
*/*         D (YES,,NO,%A4) CHAR SOME NUMBER?                        */
*/*         P NEXT CHAR                                              */
*/*         D (YES,,NO,%A8) CHAR A COMMA?                            */
*/*         P (,%A9) PAGNUM LENGTH IS 1                              */
*/*%A8:     D (YES,,NO,%A4) CHAR SOME NUMBER?                        */
*/*         P PAGNUM LENGTH IS 2                                     */
*/*         P NEXT CHAR                                              */
*/*         D (YES,,NO,%A4) CHAR A COMMA?                            */
*/*%A9:     P NEXT CHAR                                              */
*/*         P SWAP NUMBER STARTS AT CHARPTR                          */
*/*         D (YES,,NO,%A4) CHAR SOME NUMBER?                        */
*/*         P NEXT CHAR                                              */
*/*         D (YES,,NO,%A4) CHAR A ')'?                              */
*/*         P NEXT CHAR                                              */
*/*         D (YES,,NO,%A4) CHAR A QUOTE?                            */
*/*         P PAGE AND SWAP NUMBERS SAVED                            */
*/*%A3:     S PARSE: PARSE THE PAGE= PARAMETER INFO                  */
*/*         D (YES,,NO,%A6) PLPA DATA SET SPECIFIED?                 */
*/*         D (YES,,NO,%A6) COMMON DATA SET SPECIFIED?               */
*/*         D (NO,,YES,%A7) WARM START?                              */
*/*         D (NO,,YES,%A7) LOCAL DATA SET SPECIFIED?                */
*/*%A6:     S ILRIMMSG: ISSUE MESSAGE IEA935W                        */
*/*         R WAIT STATE 3C                                          */
*/*%A7:     R FLOW CONTINUES AT OPENPLPA                             */
*/*RIMINIT: END                                                      */
*                                                                  0165
*                                                                  0165
*   /*****************************************************************/
*   /*                                                               */
*   /* RIMINIT                                                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0165
*   STM(R2,R3,NIPPTRS);             /* STORE NVT AND CVT ADDRESSES   */
         STM   R2,R3,NIPPTRS                                       0165
*   IF NVTFLQS=NO THEN                                             0166
         L     @08,NVTPTR                                          0166
         TM    NVTFLQS(@08),B'00001000'                            0166
         BNZ   @RF00166                                            0166
*     NVTFLWS=NO;                   /* CLPA IMPLIES CVIO             */
         NI    NVTFLWS(@08),B'11111011'                            0167
*   ASMBURST=BURSTIME;              /* BURST TIME SET FOR ALL OF ASM */
@RF00166 L     @08,CVTPTR                                          0168
         L     @08,ASMVTPTR(,@08)                                  0168
         MVC   ASMBURST(4,@08),@CF02525                            0168
*/* ASMPCMPD=ASMPCMPD × MASK;    -- THIS INSTRUCTION WAS DELETED IN  */
*/* SUPPORT OF APAR  AZ25620                                 @ZA25907*/
*                                                                  0169
*   DVTPTR=ADDR(DVTAB);             /* ADDRESS DEVICE TABLE          */
         LA    DVTPTR,DVTAB                                        0169
*   PRMTBPTR=NVTPTAB;               /* ADDRESS THE PARMTAB           */
         L     @08,NVTPTR                                          0170
         L     @08,NVTPTAB(,@08)                                   0170
         ST    @08,PRMTBPTR                                        0170
*   RFY                                                            0171
*     R0 RSTD;                                                     0171
*                                                                  0171
*/*      LOAD ILROPS00 AND ILRPREAD                                  */
*                                                                  0172
*   DO;                             /* LOAD EP('ILROPS00')           */
*     RESPECIFY                                                    0173
*      (GPR00P,                                                    0173
*       GPR01P) RESTRICTED;                                        0173
*     GPR00P=ADDR('ILROPS00');      /* LOAD ENTRY POINT NAME ADDRESS */
         LA    GPR00P,@CC02762                                     0174
*     GPR01P=0;                     /* JOBLIB OR LINKLIB DCB         */
         SLR   GPR01P,GPR01P                                       0175
*     SVC(8);                       /* ISSUE LOAD SVC                */
         SVC   8                                                   0176
*     RESPECIFY                                                    0177
*      (GPR00P,                                                    0177
*       GPR01P) UNRESTRICTED;                                      0177
*   END;                            /* LOAD EP('ILROPS00')           */
*   OPENPTR=R0;                     /* ILROPS00 LOADED               */
         ST    R0,OPENPTR                                          0179
*   DO;                             /* LOAD EP('ILRPREAD')           */
*     RESPECIFY                                                    0181
*      (GPR00P,                                                    0181
*       GPR01P) RESTRICTED;                                        0181
*     GPR00P=ADDR('ILRPREAD');      /* LOAD ENTRY POINT NAME ADDRESS */
         LA    GPR00P,@CC02764                                     0182
*     GPR01P=0;                     /* JOBLIB OR LINKLIB DCB         */
         SLR   GPR01P,GPR01P                                       0183
*     SVC(8);                       /* ISSUE LOAD SVC                */
         SVC   8                                                   0184
*     RESPECIFY                                                    0185
*      (GPR00P,                                                    0185
*       GPR01P) UNRESTRICTED;                                      0185
*   END;                            /* LOAD EP('ILRPREAD')           */
*   RDWTPTR=R0;                     /* ILRPREAD LOADED               */
         ST    R0,RDWTPTR                                          0187
*/*   GETMAIN ILRTPARB,ILRQSRCD,BUFFER, AND ILRDSTBL ON 4K BOUNDARY  */
*/*      (BUFFER TO READ AND WRITE TO COMMON AND DUPLEX DATA SETS)   */
*                                                                  0188
*   R0=LENGTH(TPARTBLE)+LENGTH(QSR)+FOURK+LENGTH(DSTBL);/* LENGTH    */
         L     R0,@CF02877                                         0188
*   CALL GGETMAIN;                  /* TPARB AND QSR AREA            */
         BAL   @14,GGETMAIN                                        0189
*   TPARPTR=R1;                     /* FIRST PART OF AREA IS ILRTPARB*/
         ST    R1,TPARPTR                                          0190
*   QSRPTR=TPARPTR+LENGTH(TPARTBLE);/* NEXT IS ILRQSRCD              */
         L     @08,TPARPTR                                         0191
         AL    @08,@CF02873                                        0191
         ST    @08,QSRPTR                                          0191
*   BUFFPTR=QSRPTR+LENGTH(QSR);     /* NEXT IS BUFFER                */
         AL    @08,@CF02874                                        0192
         ST    @08,BUFFPTR                                         0192
*   DSTBLPTR=BUFFPTR+FOURK;         /* REST IS ILRDSTBL(WORKAREA)    */
         AL    @08,@CF02516                                        0193
         ST    @08,DSTBLPTR                                        0193
*   RFY                                                            0194
*     R0 UNRSTD;                                                   0194
*                                                                  0195
*   /*****************************************************************/
*   /*                                                               */
*   /* PARSE PAGNUM PARAMETER                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0195
*   DO UNTIL PROBLEM=NO;            /* GET GOOD PAGNUM INFO          */
@DL00195 DS    0H                                                  0196
*     PAGEZONE=''B;                 /* CLEAR AREA FOR PAGE #         */
         XC    PAGEZONE(2),PAGEZONE                                0196
*     SWAPZONE=''B;                 /* CLEAR AREA FOR SWAP #         */
         XC    SWAPZONE(2),SWAPZONE                                0197
*     PAGEQPTR=ADDR(PAGNUM);        /* GET PAGNUM PARM ADDRESS       */
         L     @08,PRMTBPTR                                        0198
         LA    @08,PAGNUM(,@08)                                    0198
         ST    @08,PAGEQPTR                                        0198
*     CHARPTR=PGSTRNGP;             /* GET PAGNUM STRING ADDRESS     */
         L     CHARPTR,PGSTRNGP(,@08)                              0199
*     PROBLEM=NO;                   /* TO FLAG ERRORS                */
         NI    PROBLEM,B'11011111'                                 0200
*     IF CHARPTR=ZERO THEN                                         0201
         LTR   CHARPTR,CHARPTR                                     0201
         BNZ   @RF00201                                            0201
*       DO;                         /* NONE SPECIFIED?               */
*         PAGEEXP=ONE;              /* DEFAULT EXPANSION IS ONE      */
         LA    @08,1                                               0203
         STH   @08,PAGEEXP                                         0203
*         SWAPEXP=ONE;              /* DEFAULT EXPANSION IS ONE      */
         STH   @08,SWAPEXP                                         0204
*       END;                        /* NONE SPECIFIED                */
*     ELSE                                                         0206
*       DO;                         /* PAGNUM WAS SPECIFIED          */
         B     @RC00201                                            0206
@RF00201 DS    0H                                                  0207
*         IF PTCHAR=LEFTPAR THEN                                   0207
         CLI   PTCHAR(CHARPTR),C'('                                0207
         BNE   @RF00207                                            0207
*           DO;                     /* 1ST CHAR IS '('?              */
*             CHARPTR=CHARPTR+ONE;  /* SCAN ON                       */
         LA    @08,1                                               0209
         ALR   CHARPTR,@08                                         0209
*             PAGEPTR=CHARPTR;      /* EXPECT PAGE EXPANSION #       */
         LR    PAGEPTR,CHARPTR                                     0210
*             IF PTCHAR>='0'&PTCHAR<='9' THEN                      0211
         CLI   PTCHAR(CHARPTR),C'0'                                0211
         BL    @RF00211                                            0211
         CLI   PTCHAR(CHARPTR),C'9'                                0211
         BH    @RF00211                                            0211
*               DO;                 /* NUMBER?                       */
*                 CHARPTR=CHARPTR+ONE;/* SCAN ON                     */
         ALR   CHARPTR,@08                                         0213
*                 IF PTCHAR^=COMMA THEN                            0214
         CLI   PTCHAR(CHARPTR),C','                                0214
         BE    @RF00214                                            0214
*                   DO;             /* NOT END OF PAGE EXPAN?        */
*                     IF PTCHAR>='0'&PTCHAR<='9' THEN              0216
         CLI   PTCHAR(CHARPTR),C'0'                                0216
         BL    @RF00216                                            0216
         CLI   PTCHAR(CHARPTR),C'9'                                0216
         BH    @RF00216                                            0216
*                       DO;         /* NUMBER?                       */
*                         CHARPTR=CHARPTR+ONE;/* SCAN ON             */
         ALR   CHARPTR,@08                                         0218
*                         IF PTCHAR=COMMA THEN/* END OF PAGE EXPAN   */
         CLI   PTCHAR(CHARPTR),C','                                0219
         BNE   @RF00219                                            0219
*                           PAGEZONE=PAGEPTR->EXPAN;/* GET NUMBER    */
         MVC   PAGEZONE(2),EXPAN(PAGEPTR)                          0220
*                         ELSE                                     0221
*                           PROBLEM=YES;/* NOT END AFTER 2 NUMBERS   */
         B     @RC00219                                            0221
@RF00219 OI    PROBLEM,B'00100000'                                 0221
*                       END;        /* NUMBER                        */
*                     ELSE                                         0223
*                       PROBLEM=YES;/* NOT EXPECTED NUMBER           */
         B     @RC00216                                            0223
@RF00216 OI    PROBLEM,B'00100000'                                 0223
*                   END;            /* NOT END OF PAGE EXPAN         */
*                 ELSE                                             0225
*                   PAGEZONE(2)=PAGEPTR->EXPAN(1);/* GET 1 CHAR    0225
*                                      NUMBER                        */
         B     @RC00214                                            0225
@RF00214 MVC   PAGEZONE+1(1),EXPAN(PAGEPTR)                        0225
*               END;                /* NUMBER                        */
*             ELSE                                                 0227
*               PROBLEM=YES;        /* NOT EXPECTED NUMBER           */
         B     @RC00211                                            0227
@RF00211 OI    PROBLEM,B'00100000'                                 0227
*           END;                    /* 1ST CHAR IS '('               */
*         ELSE                                                     0229
*           PROBLEM=YES;            /* 1ST CHAR NOT AS EXPECTED      */
         B     @RC00207                                            0229
@RF00207 OI    PROBLEM,B'00100000'                                 0229
*         IF PROBLEM=NO THEN                                       0230
@RC00207 TM    PROBLEM,B'00100000'                                 0230
         BNZ   @RF00230                                            0230
*           DO;                     /* PAGEEXP O.K.?                 */
*             CHARPTR=CHARPTR+ONE;  /* SCAN ON                       */
         LA    @08,1                                               0232
         ALR   CHARPTR,@08                                         0232
*             SWAPPTR=CHARPTR;      /* EXPECT SWAP NUMBER HERE       */
         LR    SWAPPTR,CHARPTR                                     0233
*             IF PTCHAR>='0'&PTCHAR<='9' THEN                      0234
         CLI   PTCHAR(CHARPTR),C'0'                                0234
         BL    @RF00234                                            0234
         CLI   PTCHAR(CHARPTR),C'9'                                0234
         BH    @RF00234                                            0234
*               DO;                 /* NUMBER?                       */
*                 CHARPTR=CHARPTR+ONE;/* SCAN ON                     */
         ALR   CHARPTR,@08                                         0236
*                 IF PTCHAR=RIGHTPAR THEN                          0237
         CLI   PTCHAR(CHARPTR),C')'                                0237
         BNE   @RF00237                                            0237
*                   DO;             /* RIGHT PAREN?                  */
*                     CHARPTR=CHARPTR+ONE;/* NEXT CHAR               */
         ALR   CHARPTR,@08                                         0239
*                     IF PTCHAR=QUOTE THEN/* STRING SYNTAX IS O.K.   */
         CLI   PTCHAR(CHARPTR),C''''                               0240
         BNE   @RF00240                                            0240
*                       SWAPZONE(2)=SWAPPTR->EXPAN(1);/* GET SWAP  0241
*                                      NUMBER                        */
         MVC   SWAPZONE+1(1),EXPAN(SWAPPTR)                        0241
*                     ELSE                                         0242
*                       PROBLEM=YES;/* NOT END                       */
         B     @RC00240                                            0242
@RF00240 OI    PROBLEM,B'00100000'                                 0242
*                   END;            /* RIGHT PAREN                   */
*                 ELSE                                             0244
*                   PROBLEM=YES;    /* NOT ')' AS EXPECTED           */
         B     @RC00237                                            0244
@RF00237 OI    PROBLEM,B'00100000'                                 0244
*               END;                /* NUMBER                        */
*             ELSE                                                 0246
*               PROBLEM=YES;        /* NOT SWAP NUMBER AS EXPECTED   */
         B     @RC00234                                            0246
@RF00234 OI    PROBLEM,B'00100000'                                 0246
*           END;                    /* PAGEEXP O.K.                  */
*         ELSE                                                     0248
*           ;                       /* SOME PROBLEM, PASS IT ON      */
@RF00230 DS    0H                                                  0249
*         IF PROBLEM=YES THEN                                      0249
@RC00230 TM    PROBLEM,B'00100000'                                 0249
         BNO   @RF00249                                            0249
*           DO;                     /* ANY PROBLEMS IN PAGE OR SWAP
*                                      SCAN?                         */
*/*     PROMPT OPER TO RESPECIFY THE PAGNUM PARAMETER  AFTER MESSAGE */
*                                                                  0251
*             FLAGS=PAGEN;          /* PAGENUM IN MESSAGE            */
         MVI   FLAGS,X'10'                                         0251
*             MSGID=M916E;          /* SYNTAX ERROR IN PARAMETER     */
         MVC   MSGID(4),@CC02545                                   0252
*             R1=ADDR(MSGPL);       /* PARMS TO ILRIMMSG             */
         LA    R1,MSGPL                                            0253
*             CALL ILRIMMSG;        /* MESSAGE MODULE                */
         L     @15,@CV02592                                        0254
         BALR  @14,@15                                             0254
*             RFY                                                  0255
*              (R2,                                                0255
*               R3) RSTD;                                          0255
*             LM(R2,R3,NIPPTRS);    /* NEEDED BY NIP PROMPT          */
         LM    R2,R3,NIPPTRS                                       0256
*             GEN REFS(NIPPTRS,NVTPRMPT,PAGNUMPM) SETS(PAGNUM);    0257
*                                                 /* CALL NIP PROMPT*/
    IEAPMNIP TYPE=PRMPT,PARAM=PAGNUMPM,OPT=ERROR
*             RFY                                                  0258
*              (R2,                                                0258
*               R3) UNRSTD;                                        0258
*           END;                    /* END PROMPTPN                  */
*         ELSE                                                     0260
*           DO;                     /* NO PROBLEMS, CONVERT NUMBERS  */
         B     @RC00249                                            0260
@RF00249 DS    0H                                                  0261
*             PACK(WORKAREA,PAGEZONE);/* PACKED DECIMAL              */
         PACK  WORKAREA(8),PAGEZONE(2)                             0261
*             CVB(PAGEEXP,WORKAREA);/* BINARY NUMBER                 */
         CVB   @08,WORKAREA                                        0262
         STH   @08,PAGEEXP                                         0262
*             PACK(WORKAREA,SWAPZONE);/* PACKED DECIMAL              */
         PACK  WORKAREA(8),SWAPZONE(2)                             0263
*             CVB(SWAPEXP,WORKAREA);/* BINARY NUMBER                 */
         CVB   @08,WORKAREA                                        0264
         STH   @08,SWAPEXP                                         0264
*           END;                    /* NO PROBLEMS                   */
*       END;                        /* PAGNUM WAS SPECIFIED          */
@RC00249 DS    0H                                                  0267
*   END;                            /* GET GOOD PAGNUM INFO          */
@RC00201 DS    0H                                                  0267
@DE00195 TM    PROBLEM,B'00100000'                                 0267
         BNZ   @DL00195                                            0267
*                                                                  0268
*/*     SET UP ENTRY POINTERS                                        */
*                                                                  0268
*   PLPTPTR=ADDR(TPARPENT(PARTPLPN+ONE));/* PLPA ENTRY IN TPARB      */
         L     @08,TPARPTR                                         0268
         LA    @03,TPARPENT(,@08)                                  0268
         ST    @03,PLPTPTR                                         0268
*   COMTPTR=ADDR(TPARPENT(PARTCOMN+ONE));/* COMMON ENTRY IN TPARB    */
         LA    @03,TPARPENT+96(,@08)                               0269
         ST    @03,COMTPTR                                         0269
*   DPLTPTR=ADDR(TPARPENT(PARTDUPN+ONE));/* DUPLEX ENTRY IN TPARB    */
         LA    @03,TPARPENT+192(,@08)                              0270
         ST    @03,DPLTPTR                                         0270
*   LOCTPTR=ADDR(TPARPENT(PARTLOCN+ONE));/* 1ST LOCAL IN TPARB       */
         LA    @08,TPARPENT+288(,@08)                              0271
         ST    @08,LOCTPTR                                         0271
*   PLPAPTR=ADDR(DSTBENT(PARTPLPN+ONE));/* PLPA ENTRY IN ILRDSTBL    */
         L     @08,DSTBLPTR                                        0272
         LR    PLPAPTR,@08                                         0272
*   COMMPTR=ADDR(DSTBENT(PARTCOMN+ONE));/* COMMON ENTRY IN ILRDSTBL  */
         LA    @03,DSTBENT+48(,@08)                                0273
         ST    @03,COMMPTR                                         0273
*   DUPLPTR=ADDR(DSTBENT(PARTDUPN+ONE));/* DUPLEX ENTRY IN ILRDSTBL  */
         LA    @03,DSTBENT+96(,@08)                                0274
         ST    @03,DUPLPTR                                         0274
*   LOCLPTR=ADDR(DSTBENT(PARTLOCN+ONE));/* 1ST LOCAL IN ILRDSTBL     */
*                                                                  0275
         LA    @08,DSTBENT+144(,@08)                               0275
         ST    @08,LOCLPTR                                         0275
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCESS THE PAGE DATA SET NAMES STRINGS                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0276
*   CALL PARSE;                     /* PARSE PAGE DATA SET NAMES     */
         BAL   @14,PARSE                                           0276
*/*    CHECK FOR NECESSARY DATA SETS SPECIFIED                       */
*/*        PLPA, COMMON,(AND LOCAL, IF NOT WARM START)               */
*                                                                  0277
*   IF PLPAPTR->DSTDSNC=0×COMMPTR->DSTDSNC=0×(NVTFLWS=OFF&LOCLPTR->
*       DSTDSNC=0) THEN                                            0277
         CLI   DSTDSNC(PLPAPTR),0                                  0277
         BE    @RT00277                                            0277
         L     @08,COMMPTR                                         0277
         CLI   DSTDSNC(@08),0                                      0277
         BE    @RT00277                                            0277
         L     @08,NVTPTR                                          0277
         TM    NVTFLWS(@08),B'00000100'                            0277
         BNZ   @RF00277                                            0277
         L     @08,LOCLPTR                                         0277
         CLI   DSTDSNC(@08),0                                      0277
         BNE   @RF00277                                            0277
@RT00277 DS    0H                                                  0278
*     DO;                           /* PROBLEMS?                     */
*       MSGID=M935W;                /* TERMINATE IPL                 */
         MVC   MSGID(4),@CC02567                                   0279
*       R1=ADDR(MSGPL);             /* PARM TO ILRIMMSG              */
         LA    R1,MSGPL                                            0280
*       CALL ILRIMMSG;              /* MESSAGE MODULE                */
         L     @15,@CV02592                                        0281
         BALR  @14,@15                                             0281
*     END;                                                         0282
*   ELSE                                                           0283
*     ;                                                            0283
@RF00277 DS    0H                                                  0284
*                                                                  0284
*/********************************************************************/
*/*                                                                  */
*/* OPENPLPA: SEGMENT TO OPEN THE PLPA DATA SET. IF NECESSARY, READ  */
*/*           ILRTPARB AND ILRQSRCD FROM IT. AND PREPARE THESE       */
*/*           CONTROL BLOCKS FOR THIS IPL CONDITIONS.                */
*/*                                                                  */
*/* INPUT: OUTPUT OF RIMINIT                                         */
*/*                                                                  */
*/* PROCESS: ON PLPA OPEN, STOP IPL IF OPERATOR REPLIES 'IGNORE'     */
*/*          TO RESPECIFICATION OR IF TPARPATS SUBROUTINE FAILS.     */
*/*             USE ILRPREAD TO READ FIRST 6 SLOTS ON PLPA DATA SET, */
*/*          IF QUICK OR WARM START.  THESE SLOTS ARE THE PREVIOUS   */
*/*          ILRTPARB (2 SLOTS) AND ILRQSRCD (4 SLOTS)               */
*/*          RESPECTIVELY.  THE AREAS ARE MODIFIED FOR THIS IPL      */
*/*          OR, IF COLD START, INITIALIZED.                         */
*/*                                                                  */
*/* OUTPUT: PLPA DATA SET- OPEN AND ILRPAT BUILT FOR IT              */
*/*         ILRTPARB- ANY PREVIOUS ENTRIES, MODIFIED FLAGS           */
*/*                   PLPA ENTRY COMPLETELY FILLED IN                */
*/*         ILRQSRCD- IS AS IN PREVIOUS IPL OR HEADER INITIALIZED    */
*/*                                                                  */
*/********************************************************************/
*/*OPENPLPA: CHART (SEQ)                                             */
*/*HEADER                                                          0284
*/*  OPENPLPA SEGMENT                                                */
*/*OPENPLPA: E ENTRY TO OPEN AND POSSIBLY READ PLPA                  */
*/*%A2:      P USE FIRST ILRDSTBL ENTRY (PLPA)                       */
*/*          S OPEN: OPEN PLPA DATA SET                              */
*/*          D (NO,,YES,%A9) SUCCESSFUL OPEN?                        */
*/*          D (YES,,NO,%A1) MOUNT FAIL?                             */
*/*          S ILRIMMSG: ISSUE MOUNT MESSAGE                         */
*/*          D (YES,,NO,%A2) OPERATOR REPLY 'IGNORE'?                */
*/*          S OPENA: ASK FOR NEW NAME                               */
*/*          D (YES,,NO,%A2) IGNORE ON NEW NAME?                     */
*/*%A3:      S ILRIMMSG: ISSUE MESSAGE IEA935W                       */
*/*          R WAIT STATE 3C                                         */
*/*%A1:      N LOCATE FAILED                                         */
*/*          S OPENA: ASK FOR NEW NAME                               */
*/*          D (NO,,YES,%A3) IGNORE LOCATE FAILURE?                  */
*/*          N (,%A2) GIVEN NEW NAME                                 */
*/*%A9:      D (YES,,NO,%A5) QUICK OR WARM START?                    */
*/*          P DUMMY PART ENTRY WITH UCB, IORB, AND EDB              */
*/*          S ILRPREAD: READ PLPA GIVEN DUMMY PART                  */
*/*          D (NO,,YES,%A6) READ O.K.?                              */
*/*          S ILRIMMSG: ISSUE MESSAGE TO RE-IPL OR CONT.            */
*/*          N IF RE-IPL NO CONTROL IS RETURNED                      */
*/*          S ILRIMMSG: ISSUE FORCE COLD START MESSAGE              */
*/*          P (,%A5) CHANGE NVT IPL FLAGS TO COLD                   */
*/*%A6:      P MOVE PLPA RANGE FROM QSR TO NVT                       */
*/*          P ZERO SOME HEADER COUNTS IN ILRTPARB                   */
*/*          P EACH ACTIVE ILRTPARB ENTRY, MARK PREVIOUS IPL FLAG    */
*/*          D (YES,,NO,%A7) DUPLEX DATA SET NAME?                   */
*/*          P MARK ASMVT AS DUPLEXING IPL                           */
*/*          P MARK ENTRY NOT TO BE SKIPPED                          */
*/*%A7:      D (YES,,NO,%A8) QUICK START?                            */
*/*          P ZERO ALL LOCAL ENTRIES                                */
*/*          P (,%A8) CHANGE ENTRY USE COUNT TO 3                    */
*/*%A5:      N COLD START PROCESSING                                 */
*/*          P ZERO ILRTPARB                                         */
*/*          P FILL IN BLOCK ID, USE COUNT AT 3, PLPA NAME           */
*/*          P ZERO ILRQSRCD HEADER AND FILL IN ID                   */
*/*%A8:      N QUICK AND WARM PROCESSING COMMON TO COLD              */
*/*          S TPARPATS: FILL IN PLPA ENTRY AND ILRPAT               */
*/*          D (YES,,NO,%A3) O.K.?                                   */
*/*          S MARKPAT: MARK PLPA PAT--6 SLOTS                       */
*/*          N SLOTS THAT CONTAIN ILRTPARB AND ILRQSRCD              */
*/*          P SET PLPA USE COUNT TO 6                               */
*/*          P PAGE EXPAND NUMBER IN ILRTPARB                        */
*/*          R FLOW CONTINUES AT OPENDPLX                            */
*/*OPENPLPA: END                                                     */
*                                                                  0284
*                                                                  0284
*   /*****************************************************************/
*   /*                                                               */
*   /* OPENPLPA                                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0284
*   TPAEPTR=PLPTPTR;                /* PLPA ENTRY IN ILRTPARB        */
         L     @08,PLPTPTR                                         0284
         ST    @08,TPAEPTR                                         0284
*   DSTEPTR=PLPAPTR;                /* PLPA ENTRY IN ILRDSTBL        */
         LR    DSTEPTR,PLPAPTR                                     0285
*REDOPLPA:                                                         0286
*   PARMDSN=DSTDSN;                 /* PLPA DSN IN OPS PARMLIST      */
REDOPLPA MVC   PARMDSN(44),DSTDSN(DSTEPTR)                         0286
*   PARMFLG=PARMPG;                 /* FLAG AS REGULAR PAGE          */
         MVI   PARMFLG,X'80'                                       0287
*   RFY                                                            0288
*     R15 RSTD;                                                    0288
*   CALL OPEN;                      /* OPEN SUBROUTINE PLPA          */
         BAL   @14,OPEN                                            0289
*   IF R15^=ZERO THEN               /* NOT SUCCESSFUL?               */
         LTR   R15,R15                                             0290
         BZ    @RF00290                                            0290
*     DO;                                                          0291
*       IF R15=NOVOLMNT THEN        /* MOUNT FAILURE?                */
         C     R15,@CF00056                                        0292
         BNE   @RF00292                                            0292
*         DO;                                                      0293
*           MSGDATA1=ADDR(VOLSER);  /* VOL SER RETURNED ILROPS00     */
         LA    @14,PARMDSN                                         0294
         LA    @14,VOLSER(,@14)                                    0294
         ST    @14,MSGDATA1                                        0294
*           MSGID=M924D;            /* PLEASE MOUNT PACK             */
         MVC   MSGID(4),@CC02557                                   0295
*           FLAGS=PLPAEQ;           /* MSG TYPE FOR PLPA             */
         MVI   FLAGS,X'04'                                         0296
*           R1=ADDR(MSGPL);         /* PARM TO ILRIMMSG              */
         LA    R1,MSGPL                                            0297
*           CALL ILRIMMSG;          /* MESSAGE MODULE                */
         L     @15,@CV02592                                        0298
         BALR  @14,@15                                             0298
*           IF R1->MSGBUF(1:LENGTH(IGNORE))=IGNORE THEN            0299
         CLC   MSGBUF(6,R1),@CC02477                               0299
         BNE   @RF00299                                            0299
*             DO;                   /* OPER SAY TO IGNORE MOUNT?     */
*               CALL OPENA;         /* REQUEST NEW NAME              */
         BAL   @14,OPENA                                           0301
*               IF R15=IGNORVOL THEN                               0302
         C     R15,@CF00069                                        0302
         BNE   @RF00302                                            0302
*                 DO;               /* WAIT STATE SYSTEM             */
*                   MSGID=M935W;    /* MISSING RESOURCE              */
         MVC   MSGID(4),@CC02567                                   0304
*                   R1=ADDR(MSGPL); /* PARM TO ILRIMMSG              */
         LA    R1,MSGPL                                            0305
*                   CALL ILRIMMSG;  /* WAIT STATE                    */
         L     @15,@CV02592                                        0306
         BALR  @14,@15                                             0306
*                 END;              /* WAIT STATE SYSTEM             */
*               ELSE                                               0308
*                 GOTO REDOPLPA;    /* NEW NAME, TRY OPEN            */
*             END;                  /* END IGNORE TO MOUNT           */
*           ELSE                                                   0310
*             GOTO REDOPLPA;        /* TRY TO OPEN AGAIN             */
*         END;                      /* END MOUNT FAILURE             */
*       ELSE                                                       0312
*         DO;                       /* LOCATE FAILURE                */
         B     @RC00292                                            0312
@RF00292 DS    0H                                                  0313
*           CALL OPENA;             /* REQUEST NEW NAME              */
         BAL   @14,OPENA                                           0313
*           IF R15=IGNORVOL THEN    /* OPER SAYS IGNORE LOCATE?      */
         C     R15,@CF00069                                        0314
         BNE   @RF00314                                            0314
*             DO;                                                  0315
*               RFY                                                0316
*                 R15 UNRSTD;                                      0316
*               MSGID=M935W;        /* MISSING RESOURCES             */
         MVC   MSGID(4),@CC02567                                   0317
*               R1=ADDR(MSGPL);     /* PARM TO ILROPS00              */
         LA    R1,MSGPL                                            0318
*               CALL ILRIMMSG;      /* WAIT STATE                    */
         L     @15,@CV02592                                        0319
         BALR  @14,@15                                             0319
*             END;                  /* IGNORE LOCATE FAILURE         */
*           ELSE                                                   0321
*             GOTO REDOPLPA;        /* NEW UNIQUE NAME TO OPEN       */
*         END;                      /* END LOCATE FAILURE            */
*     END;                          /* NOT SUCCESSFUL                */
*   ELSE                                                           0324
*     ;                             /* OPENED SUCCESSFULLY           */
@RF00290 DS    0H                                                  0325
*   IF NVTFLQS=YES THEN             /* QUICK OR WARM START?          */
@RC00290 L     @08,NVTPTR                                          0325
         TM    NVTFLQS(@08),B'00001000'                            0325
         BNO   @RF00325                                            0325
*     DO;                                                          0326
*                                                                  0326
*/*       PREPARE FOR ILRPREAD                                       */
*                                                                  0327
*       PAREPTR=BUFFPTR;            /* USE BUFFER FOR DUMMY PARE     */
         L     PAREPTR,BUFFPTR                                     0327
*       PAREEDBP=RTNEDBP;           /* PLPA EDB FROM ILROPS00        */
         LA    @08,PARMDSN                                         0328
         L     @06,RTNEDBP(,@08)                                   0328
         ST    @06,PAREEDBP(,PAREPTR)                              0328
*       PAREUCBP=RTNUCBP;           /* PLPA UCB FROM ILROPS00        */
         L     @08,RTNUCBP(,@08)                                   0329
         ST    @08,PAREUCBP(,PAREPTR)                              0329
*       PWRITE=OFF;                 /* DO A READ                     */
*       PTPARB=OFF;                 /* USE A DUMMY PART ENTRY        */
         NI    PWRITE,B'00111111'                                  0331
*       PSLOTNO=(LENGTH(TPARTBLE)+LENGTH(QSR))/FOURK;/* # OF SLOTS   */
         MVI   PSLOTNO,X'06'                                       0332
*       PSLOT=''B;                  /* RELATIVE SLOT TO START        */
         SLR   @08,@08                                             0333
         STH   @08,PSLOT                                           0333
*       PENTRY=PAREPTR;             /* ADDR OF PART ENTRY            */
         ST    PAREPTR,PENTRY                                      0334
*       PBUFF=TPARPTR;              /* READ INTO TPAR AND QSR        */
         L     @08,TPARPTR                                         0335
         ST    @08,PBUFF                                           0335
*       R1=ADDR(READPARM);          /* PARM TO ILRPREAD              */
         LA    R1,READPARM                                         0336
*       RFY                                                        0337
*         R15 RSTD;                                                0337
*       CALL ILRPREAD;              /* CALL ILRPREAD TO READ         */
         L     @15,RDWTPTR                                         0338
         BALR  @14,@15                                             0338
*       IF R15^=ZERO×TPARIDNT^=TPARID×QSRIDNT^=QSRID THEN          0339
         LTR   R15,R15                                             0339
         BNZ   @RT00339                                            0339
         L     @14,TPARPTR                                         0339
         CLC   TPARIDNT(8,@14),@CC02481                            0339
         BNE   @RT00339                                            0339
         L     @14,QSRPTR                                          0339
         CLC   QSRIDNT(8,@14),@CC02483                             0339
         BE    @RF00339                                            0339
@RT00339 DS    0H                                                  0340
*         DO;                       /* READ FAIL?                    */
*           RFY                                                    0341
*             R15 UNRSTD;                                          0341
*           MSGID=M939D;            /* RE-IPL OR FORCE COLD?         */
         MVC   MSGID(4),@CC02573                                   0342
*           R1=ADDR(MSGPL);         /* PARM TO ILRIMMSG              */
         LA    R1,MSGPL                                            0343
*           CALL ILRIMMSG;          /* MESSAGE MODULE                */
*                                                                  0344
         L     @15,@CV02592                                        0344
         BALR  @14,@15                                             0344
*           /*********************************************************/
*           /*                                                       */
*           /* CONTROL RETURN HERE ONLY IF RE-IPL NOT DONE           */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0345
*           NVTFLWS=NO;             /* NO MORE WARM START            */
*           NVTFLQS=NO;             /* NO MORE QUICK START           */
         L     @08,NVTPTR                                          0346
         NI    NVTFLWS(@08),B'11110011'                            0346
*           MSGID=M929I;            /* FORCE COLD START              */
         MVC   MSGID(4),@CC02563                                   0347
*           R1=ADDR(MSGPL);         /* PARM TO ILRIMMSG              */
         LA    R1,MSGPL                                            0348
*           CALL ILRIMMSG;          /* MESSAGE MODULE                */
         L     @15,@CV02592                                        0349
         BALR  @14,@15                                             0349
*         END;                      /* END READ FAIL                 */
*       ELSE                                                       0351
*         DO;                       /* READ O.K.                     */
         B     @RC00339                                            0351
@RF00339 DS    0H                                                  0352
*           NVTLPAHA=QSRLPAHA;      /* MOVE PLPA INFO TO NVT         */
         L     @08,NVTPTR                                          0352
         L     @06,QSRPTR                                          0352
         L     @00,QSRLPAHA(,@06)                                  0352
         ST    @00,NVTLPAHA(,@08)                                  0352
*           NVTLPAND=QSRLPAHI;      /* HIGH RANGE OF PLPA            */
         L     @00,QSRLPAHI(,@06)                                  0353
         ST    @00,NVTLPAND(,@08)                                  0353
*           NVTLPALO=QSRLPALO;      /* LOW RANGE OF PLPA             */
         L     @06,QSRLPALO(,@06)                                  0354
         ST    @06,NVTLPALO(,@08)                                  0354
*           TPARFLAG=''B;           /* EMPTY HEADER FLAGS            */
         L     @06,TPARPTR                                         0355
         MVI   TPARFLAG(@06),X'00'                                 0355
*           TPARNPGS=''B;           /* NO D.S. ARE ACTIVE            */
         SLR   @15,@15                                             0356
         ST    @15,TPARNPGS(,@06)                                  0356
*           TPARPCTQ=''B;           /* PCT CHAIN EMPTY               */
         ST    @15,TPARPCTQ(,@06)                                  0357
*           IF NVTFLWS=NO THEN      /* QUICK START?                  */
         TM    NVTFLWS(@08),B'00000100'                            0358
         BNZ   @RF00358                                            0358
*             DO;                                                  0359
*               RFY                                                0360
*                (R0,                                              0360
*                 R14,                                             0360
*                 R15) RSTD;                                       0360
*                                                                  0360
*/*             ZERO ALL LOCAL ENTRIES FROM LAST IPL                 */
*                                                                  0361
*               R0=LOCTPTR;         /* 1ST LOCAL IN ILRTPARB 1ST     */
         L     R0,LOCTPTR                                          0361
*               R1=(TPARUSE-INITUSE)*(LENGTH(TPARENT));/* LENGTH     */
         L     R1,TPARUSE(,@06)                                    0362
         SL    R1,@CF00092                                         0362
         MH    R1,@CH00073                                         0362
*               R15=ZERO;                                          0363
         SLR   R15,R15                                             0363
*               MVCL(R0,R14);       /* ZEROES ALL PREVIOUS LOCALS    */
         MVCL  R0,R14                                              0364
*               RFY                                                0365
*                (R0,                                              0365
*                 R14,                                             0365
*                 R15) UNRSTD;                                     0365
*               TPARUSE=INITUSE;    /* ENTRIES IN USE NOW            */
         L     @08,TPARPTR                                         0366
         MVC   TPARUSE(4,@08),@CF00092                             0366
*             END;                  /* END QUICK START               */
*           ELSE                                                   0368
*             ;                     /* WARM START                    */
@RF00358 DS    0H                                                  0369
*           SCHPTR=ADDR(TPARPENT);  /* FIRST ENTRY                   */
         L     @06,TPARPTR                                         0369
         LA    SCHPTR,TPARPENT(,@06)                               0369
*           DO COUNT=TPARUSE TO 1 BY-1;/* LOOP THROUGH ILRTPARB      */
         L     @06,TPARUSE(,@06)                                   0370
         STH   @06,COUNT                                           0370
         B     @DE00370                                            0370
@DL00370 DS    0H                                                  0371
*             IF SCHPTR->TPAEVALD=ON THEN/* WAS VALID LAST IPL?      */
         TM    TPAEVALD(SCHPTR),B'00001000'                        0371
         BNO   @RF00371                                            0371
*               DO;                                                0372
*                 SCHPTR->TPAESTAT=''B;/* ZERO ALL STATUS FLAGS      */
         MVI   TPAESTAT(SCHPTR),X'00'                              0373
*                 SCHPTR->TPAEPRVI=ON;/* PUT ON STATUS ON- PREV.     */
         OI    TPAEPRVI(SCHPTR),B'01000000'                        0374
*               END;                /* END OF VALID ENTRY            */
*             ELSE                                                 0376
*               ;                   /* INVALID LEFT ALONE            */
@RF00371 DS    0H                                                  0377
*             IF SCHPTR->TPAEDPLX=ON THEN                          0377
         TM    TPAEDPLX(SCHPTR),B'00100000'                        0377
         BNO   @RF00377                                            0377
*               DO;                 /* DUPLEX ENTRY?                 */
*                 IF SCHPTR->TPAEDSN=ZERODSN THEN                  0379
         CLC   TPAEDSN(44,SCHPTR),ZERODSN                          0379
         BNE   @RF00379                                            0379
*                   SCHPTR->TPAESKIP=ON;/* SKIP ENTRY                */
         OI    TPAESKIP(SCHPTR),B'00010000'                        0380
*                 ELSE                                             0381
*                   ASMDUPLX=ON;    /* DUPLEX THIS TIME TOO          */
         B     @RC00379                                            0381
@RF00379 L     @06,CVTPTR                                          0381
         L     @06,ASMVTPTR(,@06)                                  0381
         OI    ASMDUPLX(@06),B'10000000'                           0381
*               END;                /* DUPLEX ENTRY                  */
*             ELSE                                                 0383
*               ;                   /* IGNORE IF NOT DUPLEX          */
@RF00377 DS    0H                                                  0384
*             SCHPTR=SCHPTR+LENGTH(TPARENT);/* NEXT ENTRY            */
@RC00377 AL    SCHPTR,@CF00073                                     0384
*           END;                    /* END DO WHILE                  */
         SLR   @06,@06                                             0385
         BCTR  @06,0                                               0385
         AH    @06,COUNT                                           0385
         STH   @06,COUNT                                           0385
@DE00370 LTR   @06,@06                                             0385
         BP    @DL00370                                            0385
*         END;                      /* READ O.K.                     */
*     END;                          /* QUICK OR WARM START           */
*   ELSE                                                           0388
*     ;                             /* COLD START (ORIGINALLY)       */
@RF00325 DS    0H                                                  0389
*   IF NVTFLQS=NO THEN                                             0389
@RC00325 L     @08,NVTPTR                                          0389
         TM    NVTFLQS(@08),B'00001000'                            0389
         BNZ   @RF00389                                            0389
*     DO;                           /* COLD START?                   */
*       RFY                                                        0391
*        (R0,                                                      0391
*         R14,                                                     0391
*         R15) RSTD;                                               0391
*       R0=TPARPTR;                 /* ZERO ALL ILRTPARB             */
         L     R0,TPARPTR                                          0392
*       R1=LENGTH(TPARTBLE);        /* GET LENGTH TO ZERO            */
         L     R1,@CF02873                                         0393
*       R15=ZERO;                                                  0394
         SLR   R15,R15                                             0394
*       MVCL(R0,R14);               /* ZEROED                        */
         MVCL  R0,R14                                              0395
*       RFY                                                        0396
*        (R0,                                                      0396
*         R14,                                                     0396
*         R15) UNRSTD;                                             0396
*       TPARIDNT=TPARID;            /* PUT TPARTBLE IN ILRTPARB      */
         L     @08,TPARPTR                                         0397
         MVC   TPARIDNT(8,@08),@CC02481                            0397
*       TPARUSE=INITUSE;            /* ENTRIES IN USE                */
         MVC   TPARUSE(4,@08),@CF00092                             0398
*       TPAEDSN=DSTDSN;             /* FROM WORKAREA TO ILRTPARB     */
         L     @08,TPAEPTR                                         0399
         MVC   TPAEDSN(44,@08),DSTDSN(DSTEPTR)                     0399
*       TPAEDSNL=DSTLNG;            /* LENGTH TOO                    */
         IC    @06,DSTLNG(,DSTEPTR)                                0400
         STC   @06,TPAEDSNL(,@08)                                  0400
*       TPAEPLPA=YES;               /* IT IS PLPA ENTRY              */
         OI    TPAEPLPA(@08),B'10000000'                           0401
*       QSRHDR=''B;                 /* ZERO QSR HEADER               */
         L     @08,QSRPTR                                          0402
         XC    QSRHDR(32,@08),QSRHDR(@08)                          0402
*       QSRIDNT=QSRID;              /* PUT IN IDENTIFIER             */
         MVC   QSRIDNT(8,@08),@CC02483                             0403
*     END;                          /* COLD START                    */
*   ELSE                                                           0405
*     ;                             /* QUICK OR WARM START           */
@RF00389 DS    0H                                                  0406
*   RFY                                                            0406
*     R15 RSTD;                                                    0406
*   CALL TPARPATS;                  /* FILL IN TPARB AND BUILD PAT   */
         BAL   @14,TPARPATS                                        0407
*   IF R15^=ZERO THEN               /* WARM START AND SLOTS NOT SAME */
         LTR   R15,R15                                             0408
         BZ    @RF00408                                            0408
*     DO;                                                          0409
*       RFY                                                        0410
*         R15 UNRSTD;                                              0410
*       MSGID=M935W;                /* RESOURCES PROBLEM             */
         MVC   MSGID(4),@CC02567                                   0411
*       R1=ADDR(MSGPL);             /* PARM TO ILRIMMSG              */
         LA    R1,MSGPL                                            0412
*       CALL ILRIMMSG;              /* WAIT STATE                    */
         L     @15,@CV02592                                        0413
         BALR  @14,@15                                             0413
*     END;                          /* END PROBLEM                   */
*   ELSE                                                           0415
*     DO;                                                          0415
         B     @RC00408                                            0415
@RF00408 DS    0H                                                  0416
*       TPAREXPD=PAGEEXP;           /* EXPANSION # FOR PAGES         */
         LH    @08,PAGEEXP                                         0416
         L     @15,TPARPTR                                         0416
         ST    @08,TPAREXPD(,@15)                                  0416
*       NVTQSBUF=QSRPTR;            /* SO ILRQSRIT CAN FIND QSR      */
*                                                                  0417
         L     @08,QSRPTR                                          0417
         L     @15,NVTPTR                                          0417
         ST    @08,NVTQSBUF(,@15)                                  0417
*       /*************************************************************/
*       /*                                                           */
*       /* MARK PLPA AS HAVING ILRTPARB AND ILRQSRCD IN 1ST SLOTS    */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0418
*       PATPTR=TPAEPATP;            /* GET PLPA PAT                  */
         L     @08,TPAEPTR                                         0418
         L     @08,TPAEPATP(,@08)                                  0418
         ST    @08,PATPTR                                          0418
*       COUNT=(LENGTH(TPARTBLE)+LENGTH(QSR))/FOURK;/* GET NUMBER OF
*                                      SLOTS THEY NEED               */
         LA    @08,6                                               0419
         STH   @08,COUNT                                           0419
*       ASMDSSFS=COUNT;             /* SAVE SLOT # OF FIRST SLOT   0420
*                                      RESERVED FOR DSS      @ZA14260*/
         L     @15,CVTPTR                                          0420
         L     @15,ASMVTPTR(,@15)                                  0420
         STH   @08,ASMDSSFS(,@15)                                  0420
*       COUNT=COUNT+16;             /* ADD NUMBER OF SLOTS RESERVED
*                                      FOR DSS USE           @ZA14260*/
         AL    @08,@CF00111                                        0421
         STH   @08,COUNT                                           0421
*       PLPASUSE=COUNT;             /* FIRST PLPA SLOTS USED         */
         ST    @08,PLPASUSE                                        0422
*       DO WHILE COUNT^=ZERO;       /* MARK THE SLOTS IN PAT         */
         B     @DE00423                                            0423
@DL00423 DS    0H                                                  0424
*         COUNT=COUNT-ONE;          /* RELATIVE SLOT                 */
         LH    @08,COUNT                                           0424
         BCTR  @08,0                                               0424
         STH   @08,COUNT                                           0424
*         SLOT=COUNT;               /* INPUT TO MARKPAT              */
         LR    SLOT,@08                                            0425
*         CALL MARKPAT;             /* MARK THIS BIT IN MAP          */
         BAL   @14,MARKPAT                                         0426
*       END;                        /* MARKING                       */
@DE00423 LH    @08,COUNT                                           0427
         LTR   @08,@08                                             0427
         BNZ   @DL00423                                            0427
*     END;                          /* TPARPATS O.K.                 */
*                                                                  0429
*/********************************************************************/
*/*                                                                  */
*/* OPENDPLX: SEGMENT PARSE DUPLEX NAME AND OPEN DATA SET            */
*/*                                                                  */
*/* INPUT: ILRTPARB FORM OPENPLPA SEGMENT                            */
*/*        ILRDSTBL WITH DUPLEX ENTRY RESERVED                       */
*/*        IHANVT AND ILRASMVT                                       */
*/*                                                                  */
*/* PROCESS: UTILIZE THIRD ENTRY IN ILRTPARB AND ILRDSTBL FOR DUPLEX */
*/*          DATA SET.  PARSE NAME INTO ILRDSTBL OR MOVE PREVIOUS ONE*/
*/*          IN ILRTPARB TO ILRDSTBL.  ATTEMPT TO OPEN DATA SET.     */
*/*          RESPECIFICATION IS ALLOWED ON COLD START--HAVEN'T USED  */
*/*          DATA SET, SO CAN BE REPLACED.  THERE WILL NOT BE        */
*/*          DUPLEXING THIS IPL IF:                                  */
*/*                 1. QUICK AND WARM START FOR WHICH THE COLD       */
*/*                       START HAD NONE                             */
*/*                 2. NO DUPLEX SPECIFIED ON COLD START             */
*/*                 3. OPERATOR SAYS IGNORE TO MOUNT OR LOCATE       */
*/*                 4. LOCATE FAILS ON QUICK OR WARM START           */
*/*                 5. TIMESTAMP NOT MATCH ON QUICK OR WARM          */
*/*                 6. NOT ENOUGH SLOTS                              */
*/*     IF NO DUPLEXING ON QUICK OR WARM START THAT A DUPLEX DATA    */
*/*     SET WAS IN TPARB, THE DUPLEX DATA SET NAME IS LEFT IN DSTBL  */
*/*     SO IT CAN NOT BE USED FOR RESPECIFICATION OF COMMON OR       */
*/*     LOCAL DATA SETS.  THE DUPLEX DATA SET WILL STILL BE GOOD FOR */
*/*     FOR NEXT QUICK OR WARM START.                                */
*/*                                                                  */
*/* OUTPUT: NO DUPLEXING THIS IPL OR DATA SET OPEN AND ILRTPARB ENTRY*/
*/*          FILLED IN                                               */
*/*                                                                  */
*/********************************************************************/
*/*OPENDPLX: CHART (SEQ)                                             */
*/*HEADER                                                          0429
*/*  OPENDPLX SEGMENT                                                */
*/*OPENDPLX: E ENTRY TO OPEN DUPLEX DATA SET                         */
*/*          P POINT TO 3RD ENTRY IN ILRTPARB AND ILRDSTBL           */
*/*          P TURN ON DUPLEX PROCESS SWITCH                         */
*/*          D (YES,,NO,%A1) QUICK OR WARM START?                    */
*/*          D (NO,,YES,%A2) PREVIOUS DATA SET NAME?                 */
*/*%A6:      D (YES,,NO,%E1) QUICK OR WARM START?                    */
*/*          D (YES,,NO,%E1) PLPA AND COMM OVERFLOW?                 */
*/*          S ILRIMMSG: DUPLEX DEPENDENCY MESSAGE                   */
*/*          D (YES,,NO,%E1) DUPLEXING?                              */
*/*          S ILRIMMSG: FORCE COLD START                            */
*/*          D (YES,,NO,%E2) WARM START?                             */
*/*          P ZERO ALL TPARB LOCAL ENTRIES                          */
*/*          P RESET ENTRIES IN USE COUNT                            */
*/*%E2:      P CHANGE NVT IPL FLAGS                                  */
*/*          P REINIT QSR                                            */
*/*          P ZERO PLPA INFORMATION IN NVT                          */
*/*%E1:      P TURN OFF DUPLEX PROCESS SWITCH                        */
*/*          R FLOW CONTINUES AT OPENCOMM                            */
*/*%A2:      P MOVE NAME FROM ILRTPARB TO ILRDSTBL                   */
*/*          P UNIQUE NAME IN ILRDSTBL?                              */
*/*          D (NO,,YES,%A3) NO MATCH?                               */
*/*          N MATCHES EITHER COMMON OR LOCAL DATA SET               */
*/*          D (NO,,YES,%A4) MATCHES COMMON DATA SET?                */
*/*          P (,%A3) MARK LOCAL AS ALREADY IN USE AS DUPLEX         */
*/*%A4:      P MOVE PREVIOUS COMMON TO ILRDSTBL ENTRY FOR COMMON     */
*/*          P (,%A3) TURN ON OLD COMMON SWITCH                      */
*/*%A1:      P POINT TO DUPLEX PARAMETER STRING                      */
*/*          D (YES,,NO,%A5) POINTING TO ZEROES?                     */
*/*          P (,%A6) MARK ILRTPARB DUPLEX ENTRY TO BE SKIPPED       */
*/*%A5:      D (YES,,NO,%A7) CHAR IS '('?                            */
*/*          P NEXT CHAR                                             */
*/*%A7:      N SCAN UNTIL QUOTE, ')', OR A PROBLEM                   */
*/*          D (NO,,YES,%A8) SCAN CONTINUE?                          */
*/*          D (YES,,NO,%A9) PROBLEMS?                               */
*/*          S ILRIMMSG: ASK FOR NEW STRING                          */
*/*          S (,%A1) NIPPRMPT: PROMPT OPERATOR FOR REPLY            */
*/*%A8:      D (YES,,NO,%B1) CHAR IS COMMA OR '('?                   */
*/*          P (,%A7) PROBLEMS                                       */
*/*%B1:      S NEXDSN: PARSE NAME                                    */
*/*          D (NO,,YES,%B5) NO PROBLEM AND NEXT CHAR IS QUOTE?      */
*/*          P (,%A7) MARK AS PROBLEM                                */
*/*%B5:      P MOVE NAME INTO ILRDSTBL                               */
*/*%A9:      P MATCH NAME IN ILRDSTBL?                               */
*/*          D (YES,,NO,%A3) MATCH?                                  */
*/*          S OPENB: NOT ACCEPTABLE NAME                            */
*/*          S OPENA: ASK FOR A NEW NAME                             */
*/*          D (NO,,YES,%B2) OPERATOR REPLY 'IGNORE'?                */
*/*%A3:      S OPEN: OPEN DUPLEX DATA SET                            */
*/*          D (NO,,YES,%D1) SUCCESSFUL OPEN?                        */
*/*          D (YES,,NO,%B3) MOUNT FAIL?                             */
*/*          S ILRIMMSG: ISSUE MOUNT MESSAGE                         */
*/*          D (YES,,NO,%A3) OPERATOR REPLY 'IGNORE'                 */
*/*%B2:      P REASON IS NO DATA SET (MESSAGE)                       */
*/*%B4:      P ASMVT DUPLEX FLAG OFF                                 */
*/*          N NAME IN ILRTPARB, IF ANY, IS NOT REMOVED              */
*/*          P MARK ILRTPARB ENTRY TO BE SKIPPED THOUGH              */
*/*          D (YES,,NO,%C1) COLD START?                             */
*/*          P ZERO NAME IN ILRDSTBL ENTRY                           */
*/*%C1:      S (,%A6) ILRIMMSG: 'NO DUPLEXING' MESSAGE               */
*/*%B3:      N LOCATE FAILED                                         */
*/*          D (YES,,NO,%B2) COLD START?                             */
*/*          S OPENA: ASK FOR NEW NAME                               */
*/*          D (NO,,YES,%B2) REPLY 'IGNORE'?                         */
*/*          N (,%A3) GIVEN NEW NAME                                 */
*/*%D1:      S TPARPATS: FILL IN ILRTPARB AND BUILD PAT              */
*/*          D (YES,,NO,%B2) FILLED O.K.?                            */
*/*          D (YES,,NO,%B6) QUICK OR WARM START?                    */
*/*          N PARMLIST HAS ILRTPARB ENTRY, BUFFER, AND 1 SLOT       */
*/*          S ILRPREAD: READ FIRST SLOT OF DUPLEX D.S.              */
*/*          D (YES,,NO,%B7) READ O.K.?                              */
*/*          D (NO,,YES,%B9) QSR AND DUPLEX TIMESTAMP MATCH?         */
*/*%B7:      N EVEN FURTHER IPLS WILL BE UNABLE TO USE DATA SET      */
*/*          P ZERO ILRTPARB DUPLEX ENTRY                            */
*/*          P (,%B4) REASON IS BAD TIMESTAMP                        */
*/*%B6:      P ASMVT DUPLEXING SWITCH ON                             */
*/*          P MOVE DUPLEX NAME TO ILRTPARB ENTRY                    */
*/*%B9:      S MARKPAT: MARK DUPLEX PAT-- 1 SLOT                     */
*/*          P (,%A6) SET DUPLEX USE COUNT TO 1                      */
*/*OPENDPLX: END                                                     */
*                                                                  0429
*                                                                  0429
*   /*****************************************************************/
*   /*                                                               */
*   /* OPENDPLX                                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0429
*   DSTEPTR=DUPLPTR;                /* DUPLEX IN WORKAREA            */
@RC00408 L     DSTEPTR,DUPLPTR                                     0429
*   TPAEPTR=DPLTPTR;                /* DUPLEX IN ILRTPARB            */
         L     @08,DPLTPTR                                         0430
         ST    @08,TPAEPTR                                         0430
*   DUPLEXSW=ON;                    /* PROCESSIN DUPLEX DATA SET     */
         OI    DUPLEXSW,B'00000100'                                0431
*   IF NVTFLQS=YES THEN                                            0432
         L     @06,NVTPTR                                          0432
         TM    NVTFLQS(@06),B'00001000'                            0432
         BNO   @RF00432                                            0432
*     DO;                           /* QUICK OR WARM START?          */
*       IF ASMDUPLX=YES THEN                                       0434
         L     @06,CVTPTR                                          0434
         L     @06,ASMVTPTR(,@06)                                  0434
         TM    ASMDUPLX(@06),B'10000000'                           0434
         BNO   @RF00434                                            0434
*         DO;                       /* DUPLEXING BEFORE?             */
*           DSTDSN=TPAEDSN;         /* MOVE TO WORKAREA              */
         L     @06,TPAEPTR                                         0436
         MVC   DSTDSN(44,DSTEPTR),TPAEDSN(@06)                     0436
*           DSTLNG=TPAEDSNL;                                       0437
         IC    @00,TPAEDSNL(,@06)                                  0437
         STC   @00,DSTLNG(,DSTEPTR)                                0437
*           SCHPTR=DSTBLPTR;        /* START AT TOP OF WORKAREA      */
         L     SCHPTR,DSTBLPTR                                     0438
*           DO WHILE                /* NOT MATCH & NOT LIST END      */
*                 (SCHPTR->DSTDSN^=DSTDSN&SCHPTR->DSTDSNC^=0)×SCHPTR=
*                 DSTEPTR;          /* OR IS THE SAME ENTRY          */
         B     @DE00439                                            0439
@DL00439 DS    0H                                                  0440
*             SCHPTR=SCHPTR+LENGTH(DSTENT);/* NEXT ENTRY             */
         AL    SCHPTR,@CF00076                                     0440
*           END;                    /* NO MATCH OR FOUND MATCH       */
@DE00439 CLC   DSTDSN(44,SCHPTR),DSTDSN(DSTEPTR)                   0441
         BE    @GL00009                                            0441
         CLI   DSTDSNC(SCHPTR),0                                   0441
         BNE   @DL00439                                            0441
@GL00009 CR    SCHPTR,DSTEPTR                                      0441
         BE    @DL00439                                            0441
*           IF SCHPTR->DSTDSNC^=0 THEN                             0442
         CLI   DSTDSNC(SCHPTR),0                                   0442
         BE    @RF00442                                            0442
*             DO;                   /* NOT UNIQUE?                   */
*               IF SCHPTR=COMMPTR THEN                             0444
         L     @06,COMMPTR                                         0444
         CR    SCHPTR,@06                                          0444
         BNE   @RF00444                                            0444
*                 DO;               /* MATCH COMMON IN W.A.?         */
*                   COMMPTR->DSTDSN=COMTPTR->TPAEDSN;/* MOVE COMMON  */
         L     @08,COMTPTR                                         0446
         MVC   DSTDSN(44,@06),TPAEDSN(@08)                         0446
*                   COMMPTR->DSTLNG=COMTPTR->TPAEDSNL;/* LENGTH TOO  */
         IC    @00,TPAEDSNL(,@08)                                  0447
         STC   @00,DSTLNG(,@06)                                    0447
*                   LIST=ON;        /* CHANGED -- ISSUE IEA940I      */
         OI    LIST,B'01000000'                                    0448
*                 END;              /* MATCH COMMON                  */
*               ELSE                                               0450
*                 DO;               /* MATCHES A LOCAL               */
         B     @RC00444                                            0450
@RF00444 DS    0H                                                  0451
*                   SCHPTR->DSTUSED=ON;/* NAME USED                  */
*                   SCHPTR->DSTDPLX=ON;/* USED AS DUPLEX DATA SET    */
         OI    DSTUSED(SCHPTR),B'11000000'                         0452
*                 END;              /* MATCH LOCAL                   */
*             END;                  /* NOT UNIQUE                    */
*           ELSE                                                   0455
*             ;                     /* OPEN NAME                     */
@RF00442 DS    0H                                                  0456
*         END;                      /* DUPLEXING ON                  */
*       ELSE                                                       0457
*         GOTO DUPCOMP;             /* Q OR WARM, BUT NO DUPLEXING   */
*     END;                          /* QUICK OR WARM                 */
*   ELSE                                                           0459
*     DO;                           /* COLD START                    */
         B     @RC00432                                            0459
@RF00432 DS    0H                                                  0460
*       TPAEDPLX=YES;               /* MARK AS DUPLEX ENTRY          */
         L     @08,TPAEPTR                                         0460
         OI    TPAEDPLX(@08),B'00100000'                           0460
*       PAGEQPTR=ADDR(DUPLEX);      /* DUPLEX IN PARMTAB             */
         L     @08,PRMTBPTR                                        0461
         LA    @08,DUPLEX(,@08)                                    0461
         ST    @08,PAGEQPTR                                        0461
*PARDP:                                                            0462
*       CHARPTR=PGSTRNGP;           /* ADDRESS OF STRING             */
PARDP    L     @08,PAGEQPTR                                        0462
         L     CHARPTR,PGSTRNGP(,@08)                              0462
*       PROBLEM=NO;                 /* FLAG FOR SYNTAX ERRORS        */
         NI    PROBLEM,B'11011111'                                 0463
*       IF CHARPTR^=ZERO THEN                                      0464
         LTR   CHARPTR,CHARPTR                                     0464
         BZ    @RF00464                                            0464
*         DO;                       /* NAME IN STRING                */
*           IF PTCHAR=LEFTPAR THEN  /* O.K. NEXT CHAR                */
         CLI   PTCHAR(CHARPTR),C'('                                0466
         BNE   @RF00466                                            0466
*             CHARPTR=CHARPTR+ONE;                                 0467
         AL    CHARPTR,@CF00059                                    0467
*           ELSE                                                   0468
*             ;                                                    0468
@RF00466 DS    0H                                                  0469
*           IF PTCHAR=LEFTPAR×PTCHAR=COMMA THEN                    0469
         CLI   PTCHAR(CHARPTR),C'('                                0469
         BE    @RT00469                                            0469
         CLI   PTCHAR(CHARPTR),C','                                0469
         BNE   @RF00469                                            0469
@RT00469 DS    0H                                                  0470
*             PROBLEM=YES;                                         0470
         OI    PROBLEM,B'00100000'                                 0470
*           ELSE                                                   0471
*             DO;                   /* THERE IS A DSNAME             */
         B     @RC00469                                            0471
@RF00469 DS    0H                                                  0472
*               CALL NEXDSN;        /* SCANS DSNAME                  */
         BAL   @14,NEXDSN                                          0472
*               IF PTCHAR=QUOTE&PROBLEM=NO THEN                    0473
         CLI   PTCHAR(CHARPTR),C''''                               0473
         BNE   @RF00473                                            0473
         TM    PROBLEM,B'00100000'                                 0473
         BNZ   @RF00473                                            0473
*                 DO;                                              0474
*                   DSTDSN='';      /* BLANK NAME AREA               */
         MVI   DSTDSN(DSTEPTR),C' '                                0475
         MVC   DSTDSN+1(43,DSTEPTR),DSTDSN(DSTEPTR)                0475
*                   DSTDSN=PTDSN(1:DSNLNG);/* OUTPUT OF NEXDSN       */
         MVI   DSTDSN+1(DSTEPTR),C' '                              0476
         MVC   DSTDSN+2(42,DSTEPTR),DSTDSN+1(DSTEPTR)              0476
         LR    @08,DSNLNG                                          0476
         BCTR  @08,0                                               0476
         L     @06,DSNPTR                                          0476
         EX    @08,@SM02904                                        0476
*                   DSTLNG=DSNLNG;  /* OUTPUT OF NEXDSN              */
         STC   DSNLNG,DSTLNG(,DSTEPTR)                             0477
*                 END;              /* END OF QUOTE AND NO PROB      */
*               ELSE                                               0479
*                 PROBLEM=YES;      /* IF NO QUOTE ALSO PROBLEM      */
         B     @RC00473                                            0479
@RF00473 OI    PROBLEM,B'00100000'                                 0479
*             END;                  /* THERE IS A DSNAME             */
@RC00473 DS    0H                                                  0481
*           IF PROBLEM=YES THEN                                    0481
@RC00469 TM    PROBLEM,B'00100000'                                 0481
         BNO   @RF00481                                            0481
*             DO;                   /* ASK FOR A RESPECIFICATION     */
*               FLAGS=DUPEQ;        /* DUPLEX SYNTAX                 */
         MVI   FLAGS,X'20'                                         0483
*               MSGID=M916E;        /* SYNTAX ERROR IN PARAMETER     */
         MVC   MSGID(4),@CC02545                                   0484
*               RFY                                                0485
*                (R2,                                              0485
*                 R3) RSTD;                                        0485
*               R1=ADDR(MSGPL);     /* PARM TO ILRIMMSG              */
         LA    R1,MSGPL                                            0486
*               CALL ILRIMMSG;      /* MESSAGE MODULE                */
         L     @15,@CV02592                                        0487
         BALR  @14,@15                                             0487
*               LM(R2,R3,NIPPTRS);                                 0488
         LM    R2,R3,NIPPTRS                                       0488
*               GEN REFS(NIPPTRS,NVTPRMPT,DPLXPARM) SETS(DUPLEX);  0489
           IEAPMNIP TYPE=PRMPT,PARAM=DPLXPARM,OPT=ERROR
*               RFY                                                0490
*                (R2,                                              0490
*                 R3) UNRSTD;                                      0490
*               GOTO PARDP;         /* PARSE THE NEXT STRING         */
         B     PARDP                                               0491
*             END;                  /* END RESPECIFICATION           */
*           ELSE                                                   0493
*             ;                     /* PROBLEM IS NO                 */
@RF00481 DS    0H                                                  0494
*         END;                      /* END STRING HAS SOMETHING      */
*       ELSE                                                       0495
*         DO;                       /* EMPTY STRING                  */
         B     @RC00464                                            0495
@RF00464 DS    0H                                                  0496
*           TPAESKIP=ON;            /* SKIP TPARB ENTRY              */
         L     @08,TPAEPTR                                         0496
         OI    TPAESKIP(@08),B'00010000'                           0496
*           GOTO DUPCOMP;           /* FINISHED WITH DUPLEX PROCESS  */
         B     DUPCOMP                                             0497
*         END;                      /* NOTHING IN STRING             */
*       SCHPTR=DSTBLPTR;            /* START AT TOP OF WORKAREA      */
@RC00464 L     SCHPTR,DSTBLPTR                                     0499
*       DO WHILE                    /* NOT MATCH & NOT LIST END      */
*             (SCHPTR->DSTDSN^=DSTDSN&SCHPTR->DSTDSNC^=0)×SCHPTR=  0500
*             DSTEPTR;              /* OR IS THE SAME ENTRY          */
         B     @DE00500                                            0500
@DL00500 DS    0H                                                  0501
*         SCHPTR=SCHPTR+LENGTH(DSTENT);/* NEXT ENTRY                 */
         AL    SCHPTR,@CF00076                                     0501
*       END;                        /* NO MATCH OR FOUND MATCH       */
@DE00500 CLC   DSTDSN(44,SCHPTR),DSTDSN(DSTEPTR)                   0502
         BE    @GL00013                                            0502
         CLI   DSTDSNC(SCHPTR),0                                   0502
         BNE   @DL00500                                            0502
@GL00013 CR    SCHPTR,DSTEPTR                                      0502
         BE    @DL00500                                            0502
*       IF SCHPTR->DSTDSNC^=0 THEN                                 0503
         CLI   DSTDSNC(SCHPTR),0                                   0503
         BE    @RF00503                                            0503
*         DO;                       /* NOT UNIQUE?                   */
*           CALL OPENB;             /* BAD NAME TRY AGAIN            */
         BAL   @14,OPENB                                           0505
*           CALL OPENA;             /* TRY AGAIN                     */
         BAL   @14,OPENA                                           0506
*           RFY                                                    0507
*             R15 RSTD;                                            0507
*           IF R15=IGNORVOL THEN                                   0508
         C     R15,@CF00069                                        0508
         BNE   @RF00508                                            0508
*             DO;                   /* OPER SAID TO IGNORE?          */
*               BADDS=YES;          /* TYPE OF MESSAGE               */
         OI    BADDS,B'00000001'                                   0510
*               CALL BADDUP;        /* MESSAGE AND NO DUPLEXING      */
         BAL   @14,BADDUP                                          0511
*               GOTO DUPCOMP;       /* FINISHED WITH DUPLEX PROCESS  */
         B     DUPCOMP                                             0512
*             END;                  /* OPER SAID TO IGNORE           */
*           ELSE                                                   0514
*             ;                     /* GIVEN NEW UNIQUE NAME         */
@RF00508 DS    0H                                                  0515
*         END;                      /* NOT UNIQUE                    */
*       ELSE                                                       0516
*         ;                         /* NAME UNIQUE                   */
@RF00503 DS    0H                                                  0517
*     END;                          /* COLD START                    */
*OPENDP:                                                           0518
*   PARMDSN=DSTDSN;                 /* NAME IN ILROPS00 PARMLIST     */
@RC00432 DS    0H                                                  0518
OPENDP   MVC   PARMDSN(44),DSTDSN(DSTEPTR)                         0518
*   PARMFLG=PARMPG;                 /* OPEN A PAGE DATA SET          */
         MVI   PARMFLG,X'80'                                       0519
*   CALL OPEN;                      /* OPEN SUBROUTINE               */
         BAL   @14,OPEN                                            0520
*   IF R15^=ZERO THEN                                              0521
         LTR   R15,R15                                             0521
         BZ    @RF00521                                            0521
*     DO;                           /* OPEN FAILED?                  */
*       IF R15=NOVOLMNT THEN                                       0523
         C     R15,@CF00056                                        0523
         BNE   @RF00523                                            0523
*         DO;                       /* MOUNT FAILURE?                */
*           MSGID=M941D;            /* ASK TO MOUNT                  */
         MVC   MSGID(4),@CC02577                                   0525
*           MSGDATA1=ADDR(VOLSER);  /* RETURNED FROM ILROPS00        */
         LA    @14,PARMDSN                                         0526
         LA    @14,VOLSER(,@14)                                    0526
         ST    @14,MSGDATA1                                        0526
*           R1=ADDR(MSGPL);         /* PARM TO ILRIMMSG              */
         LA    R1,MSGPL                                            0527
*           CALL ILRIMMSG;          /* MESSAGE MODULE                */
         L     @15,@CV02592                                        0528
         BALR  @14,@15                                             0528
*           IF R1->MSGBUF(1:LENGTH(IGNORE))=IGNORE THEN            0529
         CLC   MSGBUF(6,R1),@CC02477                               0529
         BNE   @RF00529                                            0529
*             DO;                                                  0530
*               BADDS=YES;          /* OPER SAID TO IGNORE FAILURE   */
         OI    BADDS,B'00000001'                                   0531
*               CALL BADDUP;        /* MESSAGE AND NO DUPLEXING      */
         BAL   @14,BADDUP                                          0532
*             END;                  /* OPER SAID TO IGNORE FAILURE   */
*           ELSE                                                   0534
*             GOTO OPENDP;          /* TRY NOW TO OPEN               */
*         END;                      /* MOUNT FAIL                    */
*       ELSE                                                       0536
*         DO;                       /* LOCATE FAIL                   */
         B     @RC00523                                            0536
@RF00523 DS    0H                                                  0537
*           IF NVTFLQS=NO THEN                                     0537
         L     @14,NVTPTR                                          0537
         TM    NVTFLQS(@14),B'00001000'                            0537
         BNZ   @RF00537                                            0537
*             DO;                   /* COLD START?                   */
*               CALL OPENA;         /* ASK FOR ANOTHER NAME          */
         BAL   @14,OPENA                                           0539
*               IF R15=IGNORVOL THEN                               0540
         C     R15,@CF00069                                        0540
         BNE   @RF00540                                            0540
*                 DO;               /* OPER SAID TO IGNORE           */
*                   BADDS=YES;      /* TYPE OF MESSAGE               */
         OI    BADDS,B'00000001'                                   0542
*                   CALL BADDUP;    /* MESSAGE AND NO DUPLEXING      */
         BAL   @14,BADDUP                                          0543
*                 END;              /* OPER SAID TO IGNORE           */
*               ELSE                                               0545
*                 GO TO OPENDP;     /* NEW UNIQUE NAME TO OPEN       */
*             END;                  /* COLD START                    */
*           ELSE                                                   0547
*             DO;                   /* CANNOT ASK FOR NEW ON Q OR W  */
         B     @RC00537                                            0547
@RF00537 DS    0H                                                  0548
*               BADDS=YES;          /* TYPE OF MESSAGE               */
         OI    BADDS,B'00000001'                                   0548
*               CALL BADDUP;        /* MESSAGE AND NO DUPLEXING      */
         BAL   @14,BADDUP                                          0549
*             END;                  /* CANNOT ASK FOR NEW ON Q OR W  */
*         END;                      /* LOCATE FAIL                   */
*     END;                          /* OPEN FAIL                     */
*   ELSE                                                           0553
*     DO;                           /* OPEN O.K.                     */
         B     @RC00521                                            0553
@RF00521 DS    0H                                                  0554
*       CALL TPARPATS;              /* FILL IN TPARB AND BUILD PAT   */
         BAL   @14,TPARPATS                                        0554
*       IF R15=ZERO THEN                                           0555
         SLR   @14,@14                                             0555
         CR    R15,@14                                             0555
         BNE   @RF00555                                            0555
*         DO;                       /* TPARPATS O.K.?                */
*           IF NVTFLQS=YES THEN                                    0557
         L     @08,NVTPTR                                          0557
         TM    NVTFLQS(@08),B'00001000'                            0557
         BNO   @RF00557                                            0557
*             DO;                   /* Q OR W START?                 */
*                                                                  0558
*               /*****************************************************/
*               /*                                                   */
*               /* PREPARE INPUT TO ILRPREAD                         */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0559
*               PWRITE=OFF;         /* READ                          */
*               PTPARB=ON;          /* TPARTBLE ENTRY                */
         OI    PTPARB,B'01000000'                                  0560
         NI    PWRITE,B'01111111'                                  0560
*               PSLOT=ZERO;         /* RELATIVE SLOT ZERO            */
         STH   @14,PSLOT                                           0561
*               PSLOTNO=ONE;        /* ONE SLOT TO READ              */
         MVI   PSLOTNO,X'01'                                       0562
*               PENTRY=TPAEPTR;     /* ADDR OF TPARB ENTRY           */
         L     @14,TPAEPTR                                         0563
         ST    @14,PENTRY                                          0563
*               PBUFF=BUFFPTR;      /* WHERE TO PUT READ DATA        */
         L     @14,BUFFPTR                                         0564
         ST    @14,PBUFF                                           0564
*               R1=ADDR(READPARM);  /* PARM TO ILRPREAD              */
         LA    R1,READPARM                                         0565
*               CALL ILRPREAD;      /* CALL ILRPREAD TO DO ONE READ  */
         L     @15,RDWTPTR                                         0566
         BALR  @14,@15                                             0566
*               IF R15=ZERO THEN                                   0567
         LTR   R15,R15                                             0567
         BNZ   @RF00567                                            0567
*                 DO;               /* READ O.K.?                    */
*                   RFY                                            0569
*                     R15 UNRSTD;                                  0569
*                   IF QSRSYNCH=BUFFPTR->TIMEBUF THEN              0570
         L     @08,QSRPTR                                          0570
         L     @06,BUFFPTR                                         0570
         CLC   QSRSYNCH(8,@08),TIMEBUF(@06)                        0570
         BNE   @RF00570                                            0570
*                     DO;           /* TIMESTAMPS MATCH?             */
*                       SLOT=ZERO;  /* 1ST SLOT ( RELATIVE 0)        */
         SLR   SLOT,SLOT                                           0572
*                       CALL MARKPAT;/* MARK SLOT IN USE             */
         BAL   @14,MARKPAT                                         0573
*                       DUPXSUSE=ONE;/* 1ST DUPLEX SLOT USED         */
         MVC   DUPXSUSE(4),@CF00059                                0574
*                     END;          /* END TIMESTAMP MATCH           */
*                   ELSE                                           0576
*                     DO;           /* FAIL                          */
         B     @RC00570                                            0576
@RF00570 DS    0H                                                  0577
*                       TPARENT=''B;/* ZERO ENTIRE TPARB ENTRY       */
         L     @08,TPAEPTR                                         0577
         XC    TPARENT(96,@08),TPARENT(@08)                        0577
*                       TPAEDPLX=ON;/* PUT ONE FLAG IN ENTRY         */
         OI    TPAEDPLX(@08),B'00100000'                           0578
*                       BADDS=NO;   /* TYPE OF MESSAGE               */
         NI    BADDS,B'11111110'                                   0579
*                       CALL BADDUP;/* NO DUPLEXING                  */
         BAL   @14,BADDUP                                          0580
*                     END;          /* FAILURES                      */
*                 END;              /* READ O.K.                     */
*               ELSE                                               0583
*                 DO;               /* FAILURES                      */
         B     @RC00567                                            0583
@RF00567 DS    0H                                                  0584
*                   TPARENT=''B;    /* ZERO ENTIRE TPARB ENTRY       */
         L     @08,TPAEPTR                                         0584
         XC    TPARENT(96,@08),TPARENT(@08)                        0584
*                   TPAEDPLX=ON;    /* PUT ONE FLAG IN ENTRY         */
         OI    TPAEDPLX(@08),B'00100000'                           0585
*                   BADDS=NO;       /* TYPE OF MESSAGE               */
         NI    BADDS,B'11111110'                                   0586
*                   CALL BADDUP;    /* NO DUPLEXING                  */
         BAL   @14,BADDUP                                          0587
*                 END;              /* FAILURES                      */
*             END;                  /* Q OR W START                  */
*           ELSE                                                   0590
*             DO;                   /* COLD START                    */
         B     @RC00557                                            0590
@RF00557 DS    0H                                                  0591
*               ASMDUPLX=YES;       /* WILL DUPLEX                   */
         L     @08,CVTPTR                                          0591
         L     @08,ASMVTPTR(,@08)                                  0591
         OI    ASMDUPLX(@08),B'10000000'                           0591
*               TPAEDSN=DSTDSN;     /* PUT NAME IN TPARB             */
         L     @08,TPAEPTR                                         0592
         MVC   TPAEDSN(44,@08),DSTDSN(DSTEPTR)                     0592
*               TPAEDSNL=DSTLNG;    /* PUT IN LENGTH                 */
         IC    @06,DSTLNG(,DSTEPTR)                                0593
         STC   @06,TPAEDSNL(,@08)                                  0593
*               SLOT=ZERO;          /* RELATIVE SLOT 0               */
         SLR   SLOT,SLOT                                           0594
*               CALL MARKPAT;       /* SLOT IN USE                   */
         BAL   @14,MARKPAT                                         0595
*               DUPXSUSE=ONE;       /* 1ST SLOT USED                 */
         MVC   DUPXSUSE(4),@CF00059                                0596
*             END;                  /* COLD START                    */
*         END;                      /* TPARPATS O.K.                 */
*       ELSE                                                       0599
*         DO;                       /* TPARPATS NOT O.K.             */
         B     @RC00555                                            0599
@RF00555 DS    0H                                                  0600
*           BADDS=YES;              /* TYPE OF MESSAGE               */
         OI    BADDS,B'00000001'                                   0600
*           CALL BADDUP;            /* MESSAGE AND NO DUPLEX         */
         BAL   @14,BADDUP                                          0601
*         END;                      /* TPARPATS NOT O.K.             */
*     END;                          /* OPEN O.K.                     */
@RC00555 DS    0H                                                  0604
*DUPCOMP:                                                          0604
*   DUPLEXSW=OFF;                   /* DONE PROCESSING               */
@RC00521 DS    0H                                                  0604
DUPCOMP  NI    DUPLEXSW,B'11111011'                                0604
*/*         IF QUICK OR WARM START AND PLPA HAD SLOTS SOLEY ON THE   */
*/*       DUPLEX DATA SET, A MESSAGE TO WARN OF THIS IS ISSUED. ALSO */
*/*       FORCE WAIT STATE, IF DUPLEXING WAS NOT OPENED THIS IPL.    */
*                                                                  0605
*   IF NVTFLQS=YES THEN                                            0605
         L     @08,NVTPTR                                          0605
         TM    NVTFLQS(@08),B'00001000'                            0605
         BNO   @RF00605                                            0605
*     DO;                           /* QUICK OR WARM START?          */
*       IF QSRPLPAF=ON&QSRCOMMF=ON THEN                            0607
         L     @08,QSRPTR                                          0607
         TM    QSRPLPAF(@08),B'11000000'                           0607
         BNO   @RF00607                                            0607
*         DO;                       /* BOTH OVERFLOW?                */
*           MSGID=M927I;            /* WARNING MESSAGE               */
         MVC   MSGID(4),@CC02561                                   0609
*           R1=ADDR(MSGPL);         /* PARM TO ILRIMMSG              */
         LA    R1,MSGPL                                            0610
*           CALL ILRIMMSG;          /* MESSAGE MODULE                */
         L     @15,@CV02592                                        0611
         BALR  @14,@15                                             0611
*           IF ASMDUPLX=NO THEN                                    0612
         L     @08,CVTPTR                                          0612
         L     @08,ASMVTPTR(,@08)                                  0612
         TM    ASMDUPLX(@08),B'10000000'                           0612
         BNZ   @RF00612                                            0612
*             DO;                   /* NO DUPLEX DATA SET?           */
*               MSGID=M935W;        /* RESOURCE NEEDED               */
         MVC   MSGID(4),@CC02567                                   0614
*               R1=ADDR(MSGPL);     /* PARM TO ILRIMMSG              */
         LA    R1,MSGPL                                            0615
*               CALL ILRIMMSG;      /* WAIT STATE                    */
         L     @15,@CV02592                                        0616
         BALR  @14,@15                                             0616
*             END;                  /* NO DUPLEX DATA SET            */
*           ELSE                                                   0618
*             ;                     /* WAS DUPLEX DATA SET           */
@RF00612 DS    0H                                                  0619
*         END;                      /* BOTH OVERFLOW                 */
*       ELSE                                                       0620
*         ;                         /* NOT BOTH OVERFLOWED           */
@RF00607 DS    0H                                                  0621
*     END;                          /* QUICK OR WARM START           */
*   ELSE                                                           0622
*     ;                             /* COLD START                    */
@RF00605 DS    0H                                                  0623
*                                                                  0623
*/********************************************************************/
*/*                                                                  */
*/* OPENCOMM: SEGMENT TO OPEN COMMON DATA SET                        */
*/*                                                                  */
*/* INPUT: ILRDSTBL WITH COMMON DATA SET TO OPEN                     */
*/*        ILRTPARB AS OUTPUT FROM OPENPLPA SEGMENT                  */
*/*        ILRQSRCD FLAGS                                            */
*/*        OLDCOM INTERNAL SWITCH                                    */
*/*        NVT                                                       */
*/*                                                                  */
*/* PROCESS: USE COMMON IN ILRDSTBL IF COLD START OR QUICK START, OR */
*/*          IF WARM START AND OLD ONE IS NOT NEEDED AND IS NOT      */
*/*          A NEEDED LOCAL DATA SET.  UPON FAILURE TO OPEN,         */
*/*          RESPECIFICATION IS ALLOWED.  IF THE OLD IS NEEDED, COLD */
*/*          START IS FORCED.                                        */
*/*              ON A NEEDED COMMON, THE TIMESTAMP OF DATA SET IS    */
*/*          CHECKED AGAINST QSR TIMESTAMP. FAILURE HERE FORCES A    */
*/*          COLD START.                                             */
*/*                                                                  */
*/* OUTPUT: A COMMON DATA SET OPEN, NAME IN ILRTPARB AND PAT BUILT   */
*/*         COLD START FORCED IF BAD TIMESTAMP ON A NEEDED COMMON    */
*/*         WAIT START IF UNABLE TO OPEN A COMMON DATA SET           */
*/*                                                                  */
*/********************************************************************/
*/*OPENCOMM: CHART                                                   */
*/*HEADER                                                          0623
*/*  OPENCOMM SEGMENT                                                */
*/*OPENCOMM: E ENTRY TO OPEN COMMON DATA SET                         */
*/*          D (YES,,NO,%A1) COMMONS MATCH?                          */
*/*          P (,%A2) TURN ON OLDCOM SWITCH                          */
*/*%A1:      D (YES,,NO,%A3) OLD COMMON NEEDED?                      */
*/*          P MOVE OLD COMMON TO WORKAREA                           */
*/*          P (,%A2) TURN ON OLDCOM SWITCH                          */
*/*%A3:      D (YES,,NO,%A2) LOCALS IN TPARB?                        */
*/*%A7:      D (YES,,NO,%A4) LOCAL MATCH COMMON?                     */
*/*          D (YES,,NO,%A5) OLDCOM SWITCH ON?                       */
*/*          S (,%A6) OPENB: NOT A GOOD COMMON                       */
*/*%A5:      P MOVE OLD COMMON TO WORKAREA                           */
*/*          P (,%A2) TURN ON OLDCOM SWITCH                          */
*/*%A4:      P NEXT LOCAL IN TPARB                                   */
*/*          D (NO,,YES,%A7) MORE LOCALS?                            */
*/*%A2:      S OPEN: OPEN THIS COMMON                                */
*/*          D (YES,,NO,%A8) OPEN O.K.?                              */
*/*          D (NO,,YES,%A9) COMMONS MATCH?                          */
*/*          P PUT NAME IN ILRTPARB                                  */
*/*          P TURN ON COMMON FLAG IN ILRTPARB                       */
*/*%A9:      S TPARPATS: FILL IN TPARB AND BUILD PAT                 */
*/*          D (NO,,YES,%B1) PROBLEM AND COMMON NEEDED?              */
*/*          D (YES,,NO,%B2) COMMON NEEDED?                          */
*/*          S ILRPREAD: READ COMMON TIMESTAMP                       */
*/*          D (YES,,NO,%B3) FAIL?                                   */
*/*          S ILRIMMSG: BAD COMMON TIMESTAMP                        */
*/*%B1:      S ILRIMMSG: RESOURCES NOT AVAILABLE                     */
*/*          R WAIT STATE                                            */
*/*%B3:      D (NO,,YES,%B2) TIMESTAMP O.K.?                         */
*/*          S ILRIMMSG: BAD COMMON TIMESTAMP                        */
*/*          S COMMCOLD: FORCE COLD START                            */
*/*%B2:      S MARKPAT: MARK 1ST SLOT IN USE                         */
*/*          P COMMON SLOT USE COUNT IS ONE                          */
*/*          D (NO,,YES,%B5)  COLD START?                            */
*/*          R FLOW CONTINUES AT RBLDPLPA                            */
*/*%B5:      R FLOW CONTINUES AT OPENLOCL                            */
*/*%A8:      D (YES,,NO,%B6) MOUNT FAIL?                             */
*/*          S ILRIMMSG: ASK TO MOUNT MESSAGE                        */
*/*          D (YES,,NO,%A2) OPER SAYS IGNORE IT?                    */
*/*%B6:      D (YES,,NO,%A6) LOCATE FAIL ON NEEDED?                  */
*/*          S COMMCOLD: FORCE COLD START                            */
*/*%A6:      S OPENA: ASK FOR ANOTHER NAME                           */
*/*          D (NO,,YES,%A3) NEW NAME?                               */
*/*          D (NO,,YES,%B1) OLDCOM SWITCH ON & ^CLPA ?              */
*/*          P MOVE OLD COMMON TO WORKAREA                           */
*/*          P (,%A2) TURN ON OLDCOM SWITCH                          */
*/*OPENCOMM: END                                                     */
*                                                                  0623
*                                                                  0623
*   /*****************************************************************/
*   /*                                                               */
*   /* OPENCOMM                                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0623
*   TPAEPTR=COMTPTR;                /* COMMON IN ILRTPARB            */
         L     @08,COMTPTR                                         0623
         ST    @08,TPAEPTR                                         0623
*   DSTEPTR=COMMPTR;                /* COMMON IN WORKAREA            */
         L     DSTEPTR,COMMPTR                                     0624
*   IF DSTDSN=TPAEDSN THEN                                         0625
         CLC   DSTDSN(44,DSTEPTR),TPAEDSN(@08)                     0625
         BNE   @RF00625                                            0625
*     OLDCOM=YES;                   /* OLD COMMON?                   */
         OI    OLDCOM,B'00010000'                                  0626
*   ELSE                                                           0627
*     DO;                           /* NOT OLD COMMON                */
         B     @RC00625                                            0627
@RF00625 DS    0H                                                  0628
*       IF QSRPLPAF=ON THEN                                        0628
         L     @08,QSRPTR                                          0628
         TM    QSRPLPAF(@08),B'10000000'                           0628
         BNO   @RF00628                                            0628
*         DO;                       /* PLPA SPILLED TO COMMON?       */
*           DSTDSN=TPAEDSN;         /* USE OLD COMMON                */
         L     @08,TPAEPTR                                         0630
         MVC   DSTDSN(44,DSTEPTR),TPAEDSN(@08)                     0630
*           DSTLNG=TPAEDSNL;        /* LENGTH OF NAME                */
         IC    @06,TPAEDSNL(,@08)                                  0631
         STC   @06,DSTLNG(,DSTEPTR)                                0631
*           LIST=ON;                /* CHANGED-- ISSUE IEA940I       */
*           OLDCOM=YES;             /* MARK AS USED                  */
         OI    LIST,B'01010000'                                    0633
*         END;                      /* PLPA SPILLED TO COMMON        */
*       ELSE                                                       0635
*         DO;                       /* PLPA NOT SPILLED              */
         B     @RC00628                                            0635
@RF00628 DS    0H                                                  0636
*           IF NVTFLWS=YES THEN                                    0636
         L     @08,NVTPTR                                          0636
         TM    NVTFLWS(@08),B'00000100'                            0636
         BNO   @RF00636                                            0636
*             DO;                   /* LOCALS IN ILRTPARB?           */
*CHKCOMM:                                                          0638
*               SCHPTR=LOCTPTR;     /* 1ST LOCAL IN ILRTPARB         */
CHKCOMM  L     SCHPTR,LOCTPTR                                      0638
*               MATCH=NO;           /* FLAG OFF                      */
         NI    MATCH,B'01111111'                                   0639
*               COUNT=TPARUSE-INITUSE;/* COUNT OF LOCALS TO CHECK    */
         L     @06,TPARPTR                                         0640
         L     @06,TPARUSE(,@06)                                   0640
         SL    @06,@CF00092                                        0640
         STH   @06,COUNT                                           0640
*               DO WHILE COUNT^=ZERO&MATCH=NO;/* LOCALS OR MATCH     */
         B     @DE00641                                            0641
@DL00641 DS    0H                                                  0642
*                 IF SCHPTR->TPAEDSN=DSTDSN THEN/* MATCH COMMON?     */
         CLC   TPAEDSN(44,SCHPTR),DSTDSN(DSTEPTR)                  0642
         BNE   @RF00642                                            0642
*                   IF OLDCOM=NO THEN                              0643
         TM    OLDCOM,B'00010000'                                  0643
         BNZ   @RF00643                                            0643
*                     DO;           /* NOT TRIED COMMON?             */
*                       DSTDSN=TPAEDSN;/* USE OLD COMMON             */
         L     @06,TPAEPTR                                         0645
         MVC   DSTDSN(44,DSTEPTR),TPAEDSN(@06)                     0645
*                       DSTLNG=TPAEDSNL;/* LENGTH TOO                */
         IC    @00,TPAEDSNL(,@06)                                  0646
         STC   @00,DSTLNG(,DSTEPTR)                                0646
*                       LIST=ON;    /* CHANGED -- ISSUE IEA940I      */
*                       OLDCOM=YES; /* MARK AS USED                  */
         OI    LIST,B'01010000'                                    0648
*                       COUNT=ZERO; /* DATA SET TO USE-- STOP LOOP   */
         SLR   @06,@06                                             0649
         STH   @06,COUNT                                           0649
*                     END;          /* NOT TRIED COMMON              */
*                   ELSE                                           0651
*                     MATCH=YES;    /* MATCH AND NO SUBSTITUTE       */
         B     @RC00643                                            0651
@RF00643 OI    MATCH,B'10000000'                                   0651
*                 ELSE                                             0652
*                   DO;             /* NOT MATCH                     */
         B     @RC00642                                            0652
@RF00642 DS    0H                                                  0653
*                     COUNT=COUNT-ONE;/* ONE LOCAL DONE              */
         LH    @06,COUNT                                           0653
         BCTR  @06,0                                               0653
         STH   @06,COUNT                                           0653
*                     SCHPTR=SCHPTR+LENGTH(TPARENT);/* NEXT LOCAL    */
         AL    SCHPTR,@CF00073                                     0654
*                   END;            /* NOT MATCH                     */
*               END;                /* LOCALS OR MATCH               */
@RC00642 DS    0H                                                  0656
@DE00641 LH    @06,COUNT                                           0656
         LTR   @06,@06                                             0656
         BZ    @DC00641                                            0656
         TM    MATCH,B'10000000'                                   0656
         BZ    @DL00641                                            0656
@DC00641 DS    0H                                                  0657
*               IF MATCH=YES THEN                                  0657
         TM    MATCH,B'10000000'                                   0657
         BNO   @RF00657                                            0657
*                 DO;               /* CANNOT USE THE COMMON         */
*                   CALL OPENB;     /* MESSAGE AND ASK FOR NEW NAME  */
         BAL   @14,OPENB                                           0659
*                   GOTO ASKNAME;   /* CODE TO CHECK THE REPLY       */
         B     ASKNAME                                             0660
*                 END;              /* CANNOT USE THE COMMON         */
*               ELSE                                               0662
*                 ;                 /* CAN USE THE COMMON            */
@RF00657 DS    0H                                                  0663
*             END;                  /* LOCALS IN ILRTPARB            */
*           ELSE                                                   0664
*             ;                     /* NO LOCALS IN ILRTPARB         */
@RF00636 DS    0H                                                  0665
*         END;                      /* PLPA NOT SPILLED              */
*     END;                          /* NOT OLD COMMON                */
@RC00628 DS    0H                                                  0667
*                                                                  0667
*/********************************************************************/
*/*       ACTUAL OPEN OF COMMON                                      */
*/********************************************************************/
*                                                                  0667
*OPENCM:                                                           0667
*   PARMDSN=DSTDSN;                 /* WORKAREA NAME TO ILROPS00     */
@RC00625 DS    0H                                                  0667
OPENCM   MVC   PARMDSN(44),DSTDSN(DSTEPTR)                         0667
*   PARMFLG=PARMPG;                 /* PAGE DATA SET TO OPEN         */
         MVI   PARMFLG,X'80'                                       0668
*   RFY                                                            0669
*     R15 RSTD;                                                    0669
*   CALL OPEN;                      /* OPEN SUBROUTINE               */
         BAL   @14,OPEN                                            0670
*   IF R15^=ZERO THEN                                              0671
         LTR   R15,R15                                             0671
         BZ    @RF00671                                            0671
*     DO;                           /* OPEN FAILED?                  */
*       IF R15=NOVOLMNT THEN                                       0673
         C     R15,@CF00056                                        0673
         BNE   @RF00673                                            0673
*         DO;                       /* MOUNT FAIL?                   */
*           MSGID=M924D;            /* ASK TO MOUNT                  */
         MVC   MSGID(4),@CC02557                                   0675
*           MSGDATA1=ADDR(VOLSER);  /* VOL SER TO ILRIMMSG           */
         LA    @14,PARMDSN                                         0676
         LA    @14,VOLSER(,@14)                                    0676
         ST    @14,MSGDATA1                                        0676
*           FLAGS=COMMEQ;           /* TYPE MSG FOR COMMON           */
         MVI   FLAGS,X'08'                                         0677
*           R1=ADDR(MSGPL);         /* ADDR OF PARM                  */
         LA    R1,MSGPL                                            0678
*           CALL ILRIMMSG;          /* MESSAGE MODULE                */
         L     @15,@CV02592                                        0679
         BALR  @14,@15                                             0679
*           IF R1->MSGBUF(1:LENGTH(IGNORE))^=IGNORE THEN           0680
         CLC   MSGBUF(6,R1),@CC02477                               0680
         BE    @RF00680                                            0680
*             DO;                   /* GO?                           */
*               GOTO OPENCM;        /* TRY TO OPEN AGAIN             */
         B     OPENCM                                              0682
*             END;                  /* GO                            */
*           ELSE                                                   0684
*             ;                     /* IGNORE WAS REPLY              */
@RF00680 DS    0H                                                  0685
*         END;                      /* MOUNT FAIL                    */
*       ELSE                                                       0686
*         ;                         /* LOCATE FAIL                   */
*                                                                  0686
@RF00673 DS    0H                                                  0687
*       /*************************************************************/
*       /*                                                           */
*       /* LOCATE FAILURE TREATED SAME AS MOUNT IGNORE               */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0687
*       IF QSRPLPAF=ON THEN         /* THIS COMMON NEEDED?           */
         L     @14,QSRPTR                                          0687
         TM    QSRPLPAF(@14),B'10000000'                           0687
         BNO   @RF00687                                            0687
*         CALL COMMCOLD;            /* FORCE COLD START              */
         BAL   @14,COMMCOLD                                        0688
*       ELSE                                                       0689
*         ;                         /* DID NOT NEED THIS ONE         */
@RF00687 DS    0H                                                  0690
*ASKNAME:                                                          0690
*       CALL OPENA;                 /* ASK FOR A NEW UNIQUE NAME     */
ASKNAME  BAL   @14,OPENA                                           0690
*       IF R15=IGNORVOL THEN                                       0691
         C     R15,@CF00069                                        0691
         BNE   @RF00691                                            0691
*         DO;                       /* OPER SAID IGNORE?             */
*           RFY                                                    0693
*             R15 UNRSTD;                                          0693
*           IF OLDCOM=NO&NVTFLQS=YES THEN                          0694
         TM    OLDCOM,B'00010000'                                  0694
         BNZ   @RF00694                                            0694
         L     @08,NVTPTR                                          0694
         TM    NVTFLQS(@08),B'00001000'                            0694
         BNO   @RF00694                                            0694
*             DO;                   /* PREVIOUS COMMON NOT TRIED?    */
*               DSTDSN=TPAEDSN;     /* NAME TO WORKAREA              */
         L     @08,TPAEPTR                                         0696
         MVC   DSTDSN(44,DSTEPTR),TPAEDSN(@08)                     0696
*               DSTLNG=TPAEDSNL;    /* LENGTH TO WORKAREA            */
         IC    @06,TPAEDSNL(,@08)                                  0697
         STC   @06,DSTLNG(,DSTEPTR)                                0697
*               LIST=ON;            /* CHANGED -- ISSUE IEA940I      */
*               OLDCOM=YES;         /* HAVE TRIED OLD COMMON NOW     */
         OI    LIST,B'01010000'                                    0699
*               GOTO OPENCM;        /* TRY TO OPEN AGAIN             */
         B     OPENCM                                              0700
*             END;                  /* PREVIOUS COMMON NOT TRIED     */
*           ELSE                                                   0702
*             DO;                   /* OLD COMMON TRIED              */
@RF00694 DS    0H                                                  0703
*               MSGID=M935W;        /* NO COMMON DATA SET            */
         MVC   MSGID(4),@CC02567                                   0703
*               R1=ADDR(MSGPL);     /* PARM TO ILRIMMSG              */
         LA    R1,MSGPL                                            0704
*               CALL ILRIMMSG;      /* WAIT STATE                    */
         L     @15,@CV02592                                        0705
         BALR  @14,@15                                             0705
*             END;                  /* OLD COMMON TRIED              */
*         END;                      /* OPER SAID IGNORE              */
*       ELSE                                                       0708
*         DO;                       /* NEW NAME GIVEN                */
         B     @RC00691                                            0708
@RF00691 DS    0H                                                  0709
*           IF NVTFLWS=YES THEN                                    0709
         L     @08,NVTPTR                                          0709
         TM    NVTFLWS(@08),B'00000100'                            0709
         BO    @RT00709                                            0709
*             GOTO CHKCOMM;         /* LOCALS TO CHECK?              */
*           ELSE                                                   0711
*             DO;                   /* QUICK OF COLD START           */
*               IF DSTDSN=TPAEDSN THEN                             0712
         L     @08,TPAEPTR                                         0712
         CLC   DSTDSN(44,DSTEPTR),TPAEDSN(@08)                     0712
         BNE   @RF00712                                            0712
*                 OLDCOM=YES;       /* USE IT NOW?                   */
         OI    OLDCOM,B'00010000'                                  0713
*               GOTO OPENCM;        /* OPEN NEW NAME                 */
         B     OPENCM                                              0714
*             END;                  /* QUICK OR COLD START           */
*         END;                      /* NEW NAME GIVEN                */
*     END;                          /* OPEN FAILED                   */
*   ELSE                                                           0718
*     DO;                           /* OPEN O.K.                     */
         B     @RC00671                                            0718
@RF00671 DS    0H                                                  0719
*       IF DSTDSN^=TPAEDSN THEN                                    0719
         L     @08,TPAEPTR                                         0719
         CLC   DSTDSN(44,DSTEPTR),TPAEDSN(@08)                     0719
         BE    @RF00719                                            0719
*         DO;                       /* NAME NOT ALREADY IN TPARB?    */
*           TPARENT=''B;            /* ZERO THE TPARB ENTRY          */
         XC    TPARENT(96,@08),TPARENT(@08)                        0721
*           TPAEDSN=DSTDSN;         /* NAME IN TPARB                 */
         MVC   TPAEDSN(44,@08),DSTDSN(DSTEPTR)                     0722
*           TPAEDSNL=DSTLNG;        /* LENGTH IN TPARB               */
         IC    @06,DSTLNG(,DSTEPTR)                                0723
         STC   @06,TPAEDSNL(,@08)                                  0723
*           TPAECOMM=ON;            /* THIS IS COMMON DATA SET       */
         OI    TPAECOMM(@08),B'01000000'                           0724
*         END;                      /* NAME NOT ALREADY IN TPARB     */
*       ELSE                                                       0726
*         ;                         /* NAME IN TPARB                 */
@RF00719 DS    0H                                                  0727
*       RFY                                                        0727
*         R15 RSTD;                                                0727
*       CALL TPARPATS;              /* FILL IN REST AND PAT          */
         BAL   @14,TPARPATS                                        0728
*       IF R15^=ZERO THEN                                          0729
         LTR   R15,R15                                             0729
         BZ    @RF00729                                            0729
*         DO;                       /* SLOTS DIFFERENT?              */
*           MSGID=M935W;            /* NEEDED RESOURCE NOT RIGHT     */
         MVC   MSGID(4),@CC02567                                   0731
*           R1=ADDR(MSGPL);         /* PARM TO ILRIMMSG              */
         LA    R1,MSGPL                                            0732
*           CALL ILRIMMSG;          /* WAIT STATE                    */
         L     @15,@CV02592                                        0733
         BALR  @14,@15                                             0733
*         END;                      /* SLOTS DIFFERENT & NEED SAME   */
*       ELSE                                                       0735
*         DO;                       /* TPARPATS O.K.                 */
         B     @RC00729                                            0735
@RF00729 DS    0H                                                  0736
*           IF QSRPLPAF=ON THEN                                    0736
         L     @14,QSRPTR                                          0736
         TM    QSRPLPAF(@14),B'10000000'                           0736
         BNO   @RF00736                                            0736
*             DO;                   /* NEED TO CHECK TIMESTAMP?      */
*               PWRITE=OFF;         /* READ                          */
*               PTPARB=ON;          /* TPARTBLE ENTRY                */
         OI    PTPARB,B'01000000'                                  0739
         NI    PWRITE,B'01111111'                                  0739
*               PSLOT=ZERO;         /* RELATIVE SLOT ZERO            */
         SLR   @14,@14                                             0740
         STH   @14,PSLOT                                           0740
*               PSLOTNO=ONE;        /* ONE SLOT TO READ              */
         MVI   PSLOTNO,X'01'                                       0741
*               PENTRY=TPAEPTR;     /* ADDR OF TPARB ENTRY           */
         L     @14,TPAEPTR                                         0742
         ST    @14,PENTRY                                          0742
*               PBUFF=BUFFPTR;      /* WHERE TO PUT READ DATA        */
         L     @14,BUFFPTR                                         0743
         ST    @14,PBUFF                                           0743
*               R1=ADDR(READPARM);  /* PARM TO ILRPREAD              */
         LA    R1,READPARM                                         0744
*               CALL ILRPREAD;      /* READ AND WRITE MODULE         */
         L     @15,RDWTPTR                                         0745
         BALR  @14,@15                                             0745
*               IF R15^=ZERO THEN                                  0746
         LTR   R15,R15                                             0746
         BZ    @RF00746                                            0746
*                 DO;               /* READ FAILED?                  */
*                   RFY                                            0748
*                     R15 UNRSTD;                                  0748
*                   MSGID=M937I;    /* TIMESTAMP PROBLEM             */
         MVC   MSGID(4),@CC02569                                   0749
*                   R1=ADDR(MSGPL); /* PARM TO ILRIMMSG              */
         LA    R1,MSGPL                                            0750
*                   CALL ILRIMMSG;  /* MESSAGE MODULE                */
         L     @15,@CV02592                                        0751
         BALR  @14,@15                                             0751
*                   MSGID=M935W;    /* COMMON NOT USEABLE            */
         MVC   MSGID(4),@CC02567                                   0752
*                   R1=ADDR(MSGPL); /* PARM TO ILRIMMSG              */
         LA    R1,MSGPL                                            0753
*                   CALL ILRIMMSG;  /* WAIT STATE                    */
         L     @15,@CV02592                                        0754
         BALR  @14,@15                                             0754
*                 END;              /* READ FAIL                     */
*               ELSE                                               0756
*                 DO;               /* READ O.K.                     */
         B     @RC00746                                            0756
@RF00746 DS    0H                                                  0757
*                   IF QSRSYNCH^=BUFFPTR->TIMEBUF THEN             0757
         L     @08,QSRPTR                                          0757
         L     @06,BUFFPTR                                         0757
         CLC   QSRSYNCH(8,@08),TIMEBUF(@06)                        0757
         BE    @RF00757                                            0757
*                     DO;           /* BAD TIMESTAMP?                */
*                       MSGID=M937I;/* BAD TIMESTAMP                 */
         MVC   MSGID(4),@CC02569                                   0759
*                       R1=ADDR(MSGPL);/* PARM TO ILRIMMSG           */
         LA    R1,MSGPL                                            0760
*                       CALL ILRIMMSG;/* MESSAGE MODULE              */
         L     @15,@CV02592                                        0761
         BALR  @14,@15                                             0761
*                       CALL COMMCOLD;/* FORCE COLD START            */
         BAL   @14,COMMCOLD                                        0762
*                     END;          /* BAD TIMESTAMP                 */
*                   ELSE                                           0764
*                     ;             /* NOT BAD TIMESTAMP             */
@RF00757 DS    0H                                                  0765
*                 END;              /* READ O.K.                     */
*             END;                  /* NEED TO CHECK TIMESTAMP       */
*           ELSE                                                   0767
*             ;                     /* NOT NEED TO CHECK TIMESTAMP   */
@RF00736 DS    0H                                                  0768
*           SLOT=ZERO;              /* RELATIVE SLOT ZERO- TIMESTAMP */
@RC00736 SLR   SLOT,SLOT                                           0768
*           CALL MARKPAT;           /* MARK THE PAT BIT ON           */
         BAL   @14,MARKPAT                                         0769
*           COMMSUSE=ONE;           /* SET COMMON USE COUNT TO ONE   */
         MVC   COMMSUSE(4),@CF00059                                0770
*           IF NVTFLQS=NO THEN                                     0771
         L     @08,NVTPTR                                          0771
         TM    NVTFLQS(@08),B'00001000'                            0771
         BZ    @RT00771                                            0771
*             GOTO OPENLOCL;        /* COLD IPL                      */
*           ELSE                                                   0773
*             ;                     /* CONTINUE                      */
*         END;                      /* TPARPATS O.K.                 */
*     END;                          /* COMMON DATA SET OPEN O.K.     */
@RC00729 DS    0H                                                  0776
*                                                                  0776
*/********************************************************************/
*/*                                                                  */
*/* RBLDPLPA: SEGMENT TO REBUILD PLPA SLOT INFORMATION IN XPTE'S     */
*/*                                                                  */
*/* INPUT: ILRQSRCD - SLOT INFORMATION FROM PREVIOUS IPL             */
*/*        ILRPAT FOR PLPA DATA SET                                  */
*/*        ILRPAT FOR COMMON DATA SET                                */
*/*        ILRPAT FOR DUPLEX DATA SET, IF ANY                        */
*/*        ILRASMVT AND ILRNVT                                       */
*/*                                                                  */
*/* PROCESS: ENTRY FROM OPENCOMM.  REBUILD PLPA ON QUICK OR WARM     */
*/*          STARTS.  CALLS RSM'S RIM (IEAVNPB5) TO BUILD PAGE AND   */
*/*          XPTE(EXTENDED PAGE) TABLES.  PUT SLOT INFORMATION INTO  */
*/*          THE XPTE'S AND MARK SLOT IN USE IN ILRPAT FOR PLPA.  IF */
*/*          DUPLEXING, ALSO MARK SLOT IN USE IN ILRPAT FOR DUPLEX.  */
*/*            IF PROBLEMS, AND OPERATOR SAYS TO CONTINUE, COLD      */
*/*          START IS FORCED, PAGE TABLES ARE FREED, AND ILRPAT(S)   */
*/*          REINITIALIZED.                                          */
*/*            IN ADDITION, ON ALL TYPES OF IPL, THE SLOTS IN PLPA   */
*/*            THAT ARE TO BE ILRTPARB AND ILRQSRCD AREAS ARE MARKED */
*/*            IN USE IN PLPA'S ILRPAT.                              */
*/*                                                                  */
*/* OUTPUT: ILRPAT'S OF PLPA AND DUPLEX ARE READY                    */
*/*         IF STILL QUICK OR WARM START: PLPA DATA SET PAGE TABLES  */
*/*         ARE BUILT AND SLOT INFORMATION FILLED IN                 */
*/*                                                                  */
*/********************************************************************/
*/*RBLDPLPA: CHART (SEQ)                                             */
*/*HEADER                                                          0776
*/*  RBLDPLPA SEGMENT                                                */
*/*RBLDPLPA: E ENTRY TO REBUILD PLPA                                 */
*/*          D (YES,,NO,%B5) PLPA D.S. FULL?                         */
*/*          P MARK TWO BITS IN ASMVT                                */
*/*          D (YES,,NO,%B5) COMMON D.S. FULL TOO?                   */
*/*          P MARK BIT IN ASMVT                                     */
*/*%B5:      S IEAVNPB5: BUILD PAGE TABLES                           */
*/*          N FILL IN PAGE TABLES AND MARK PATS                     */
*/*          P CALCULATE PAGES IN FIRST SEGMENT (PAGECTR)            */
*/*          N ALL OTHER SEGMENTS HAVE 16 PAGES                      */
*/*          P CALCULATE FIRST SEGMENT BOUNDARY                      */
*/*%A4:      S IEAVFP1: LOCATE PAGE TABLE FOR THE PAGE               */
*/*          D (NO,,YES,%A5) LOCATE IT?                              */
*/*%A7:      S ILRIMMSG: ISSUE 'PAGE TABLE PROBLEM' MESSAGE          */
*/*          R WAIT STATE                                            */
*/*%A5:      D (NO,,YES,%A6) PAGECTR ZERO?                           */
*/*          D (NO,,YES,%A7) EMPTY SLOT INFO?                        */
*/*          D (NO,%A7,YES,%A8) VALID SLOT INFO?                     */
*/*%A6:      P NEXT SEGMENT BOUNDARY                                 */
*/*          D (YES,,NO,%B3) REACHED PLPA RANGE LIMIT?               */
*/*          D (YES,,NO,%A2) WARM START?                             */
*/*          R FLOW CONTINUES AT NEEDLOCL                            */
*/*%A2:      R FLOW CONTINUES AT OPENLOCL                            */
*/*%B3:      P (,%A4) PROCESS 16 PAGES (PAGECTR)                     */
*/*%A8:      P MOVE QSR SLOT INFO INTO XPTE                          */
*/*          P VALIDATE XPTE (BIT ON)                                */
*/*          D (YES,,NO,%A1) FIRST PASS?                             */
*/*          D (YES,,NO,%A3) PLPA?                                   */
*/*          P (,%B1) INCREMENT PLPA COUNT                           */
*/*%A3:      D (YES,,NO,%B2) COMMON?                                 */
*/*          P (,%B1) INCREMENT COMMON COUNT                         */
*/*%B2:      P INCREMENT DUPLEX COUNT                                */
*/*%B1:      P (,%B4) PRIMARY SLOT INFORMATION PASSED                */
*/*%A1:      P INCREMENT DUPLEX COUNT                                */
*/*          P DUPLEX SLOT INFORMATION PASSED                        */
*/*%B4:      S MARKPAT: MARK THE PAT FOR THIS SLOT                   */
*/*          D (YES,,NO,%A5) CONE WITH THIS PAGE?                    */
*/*          P NEXT QSR SLOT INFO                                    */
*/*          P NEXT XPTE                                             */
*/*          P (,%A5) DECREMENT PAGECTR BY ONE                       */
*/*RBLDPLPA: END                                                     */
*                                                                  0776
*RBLDPLPA:                                                         0776
*   IF QSRPLPAF=ON THEN                                            0776
@RC00671 DS    0H                                                  0776
RBLDPLPA L     @08,QSRPTR                                          0776
         TM    QSRPLPAF(@08),B'10000000'                           0776
         BNO   @RF00776                                            0776
*     DO;                           /* PLPA FULL AT NIP TIME?        */
*       ASMPLPAF=ON;                /* MARK FULL IN ASMVT            */
*       ASMPLPAS=ON;                /* ALSO PLPA SPILLED TO COMM     */
         L     @06,CVTPTR                                          0779
         L     @06,ASMVTPTR(,@06)                                  0779
         OI    ASMPLPAF(@06),B'00000101'                           0779
*       IF QSRCOMMF=ON THEN                                        0780
         TM    QSRCOMMF(@08),B'01000000'                           0780
         BNO   @RF00780                                            0780
*         ASMCOMMF=ON;              /* COMMON FULL TOO               */
         OI    ASMCOMMF(@06),B'00000010'                           0781
*       ELSE                                                       0782
*         ;                         /* COMMON NOT FULL               */
@RF00780 DS    0H                                                  0783
*     END;                          /* PLPA FULL AT NIP TIME         */
*   ELSE                                                           0784
*     ;                             /* PLPA NOT FULL AT NIP TIME     */
@RF00776 DS    0H                                                  0785
*   RFY                                                            0785
*    (R2,                                                          0785
*     R3) RSTD;                                                    0785
*   LM(R2,R3,NIPPTRS);              /* NVT & CVT TO IEAVNPB5         */
         LM    R2,R3,NIPPTRS                                       0786
*   CALL IEAVNPB5;                  /* BUILD PLPA PAGE TABLES        */
         L     @15,@CV02597                                        0787
         BALR  @14,@15                                             0787
*   RFY                                                            0788
*    (R2,                                                          0788
*     R3) UNRSTD;                                                  0788
*   R1=QSRLPALO;                    /* LOW ADDRESS OF PLPA CORE      */
         L     @06,QSRPTR                                          0789
         L     @15,QSRLPALO(,@06)                                  0789
         LR    R1,@15                                              0789
*   SLL(R1,SIXTEEN);                /* MOVE OUT SEGMENT PART         */
         SLL   R1,16                                               0790
*   SRL(R1,28);                     /* MOVE PAGE PART WAY TO RGT     */
         SRL   R1,28                                               0791
*   PAGECTR=SIXTEEN-R1;             /* # OF PLPA PAGES IN SEG        */
         LA    @00,16                                              0792
         SLR   @00,R1                                              0792
         STH   @00,PAGECTR                                         0792
*   R1=QSRLPALO;                    /* LOW ADDRESS OF PLPA CORE      */
         LR    R1,@15                                              0793
*   R1=R1&SEGMASK;                  /* GET SEGMENT ADDRESS           */
         N     R1,SEGMASK                                          0794
*   SEGMAD=R1;                      /* FIRST SEGMENT ADDRESS         */
         ST    R1,SEGMAD                                           0795
*   QSREPTR=ADDR(QSRMAP);           /* 1ST PLPA MAP IN QSR           */
         LA    QSREPTR,QSRMAP(,@06)                                0796
*   FDPGPTR=QSRLPALO;               /* ADDRESS TO FIND XPTE FOR      */
         ST    @15,FDPGPTR                                         0797
*   PROBLEM=NO;                     /* NO FAILURES YET               */
         NI    PROBLEM,B'11011111'                                 0798
*   DO WHILE SEGMAD<QSRLPAHI&PROBLEM=NO;/* MARKING PATS              */
         B     @DE00799                                            0799
@DL00799 DS    0H                                                  0800
*     R1=FDPGPTR;                   /* XPTE FOR THIS ADDRESS         */
         L     R1,FDPGPTR                                          0800
*     RFY                                                          0801
*       R15 RSTD;                                                  0801
*     CALL IEAVFP1;                 /* FIND XPTE                     */
         L     @06,CVTPTR                                          0802
         L     @15,CVTVFP(,@06)                                    0802
         BALR  @14,@15                                             0802
*     IF R15^=ZERO THEN                                            0803
         LTR   R15,R15                                             0803
         BZ    @RF00803                                            0803
*       PROBLEM=YES;                /* TROUBLE IN RSM                */
         OI    PROBLEM,B'00100000'                                 0804
*     ELSE                                                         0805
*       DO;                         /* FOUND XPTE                    */
         B     @RC00803                                            0805
@RF00803 DS    0H                                                  0806
*         RFY                                                      0806
*           R15 UNRSTD;                                            0806
*         XPTEPTR=R1;               /* PICK UP XPTE ADDRESS          */
         ST    R1,XPTEPTR                                          0807
*         DO WHILE PAGECTR^=ZERO&PROBLEM=NO;/* DO PAGES IN SEGM      */
         B     @DE00808                                            0808
@DL00808 DS    0H                                                  0809
*           IF QSRENTRY=ZERODW×     /* NO PLPA SLOT INFO             */
*               QSRPTNN>PARTDUPN×   /* NOT VALID PRIMARY SLOT        */
*               (QSRPTNN2^=ZERO&QSRPTNN2^=PARTDUPN) THEN           0809
         CLC   QSRENTRY(8,QSREPTR),ZERODW                          0809
         BE    @RT00809                                            0809
         CLI   QSRPTNN(QSREPTR),2                                  0809
         BH    @RT00809                                            0809
         CLI   QSRPTNN2(QSREPTR),0                                 0809
         BE    @RF00809                                            0809
         CLI   QSRPTNN2(QSREPTR),2                                 0809
         BE    @RF00809                                            0809
@RT00809 DS    0H                                                  0810
*             PROBLEM=YES;          /* EMPTY OR VALID DUPLEX SLOT    */
         OI    PROBLEM,B'00100000'                                 0810
*           ELSE                                                   0811
*             DO;                   /* INFO IS O.K.                  */
         B     @RC00809                                            0811
@RF00809 DS    0H                                                  0812
*               XPTVALID=ON;        /* ASM VALID FLAG                */
         L     @06,XPTEPTR                                         0812
         OI    XPTVALID(@06),B'10000000'                           0812
*               XPTXAV=ON;          /* RSM VALID FLAG                */
         OI    XPTXAV(@06),B'01000000'                             0813
*               XPTLPID=QSRENTRY;   /* PUT LSIDS IN XPTE             */
         MVC   XPTLPID(8,@06),QSRENTRY(QSREPTR)                    0814
*               IF QSRPTNN=PARTPLPN THEN                           0815
         CLI   QSRPTNN(QSREPTR),0                                  0815
         BNE   @RF00815                                            0815
*                 DO;               /* PLPA DATA SET?                */
*                   PATPTR=PLPTPTR->TPAEPATP;/* PLPA PAT             */
         L     @06,PLPTPTR                                         0817
         L     @06,TPAEPATP(,@06)                                  0817
         ST    @06,PATPTR                                          0817
*                   PLPASUSE=PLPASUSE+ONE;/* ONE MORE SLOT           */
         LA    @06,1                                               0818
         AL    @06,PLPASUSE                                        0818
         ST    @06,PLPASUSE                                        0818
*                 END;              /* PLPA DATA SET                 */
*               ELSE                                               0820
*                 DO;               /* NOT PLPA DATA SET             */
         B     @RC00815                                            0820
@RF00815 DS    0H                                                  0821
*                   IF QSRPTNN=PARTCOMN THEN                       0821
         CLI   QSRPTNN(QSREPTR),1                                  0821
         BNE   @RF00821                                            0821
*                     DO;           /* COMMON DATA SET?              */
*                       PATPTR=COMTPTR->TPAEPATP;/* COMMON PAT       */
         L     @06,COMTPTR                                         0823
         L     @06,TPAEPATP(,@06)                                  0823
         ST    @06,PATPTR                                          0823
*                       COMMSUSE=COMMSUSE+ONE;/* ONE MORE SLOT       */
         LA    @06,1                                               0824
         AL    @06,COMMSUSE                                        0824
         ST    @06,COMMSUSE                                        0824
*                     END;          /* COMMON DATA SET               */
*                   ELSE                                           0826
*                     DO;           /* OVERFLOWED TO DUPLEX ONLY     */
         B     @RC00821                                            0826
@RF00821 DS    0H                                                  0827
*                       PATPTR=DPLTPTR->TPAEPATP;/* DUPLEX PAT       */
         L     @06,DPLTPTR                                         0827
         L     @06,TPAEPATP(,@06)                                  0827
         ST    @06,PATPTR                                          0827
*                       DUPXSUSE=DUPXSUSE+ONE;/* ONE MORE SLOT       */
         LA    @06,1                                               0828
         AL    @06,DUPXSUSE                                        0828
         ST    @06,DUPXSUSE                                        0828
*                     END;          /* DUPLEX DATA SET               */
*                 END;              /* NOT PLPA DATA SET             */
@RC00821 DS    0H                                                  0831
*               SLOT=QSRSLOT;       /* PRIMARY SLOT INFORMATION      */
@RC00815 LH    SLOT,QSRSLOT(,QSREPTR)                              0831
         N     SLOT,@CF02910                                       0831
*               CALL MARKPAT;       /* MARK IN PAT-SLOT IN USE       */
         BAL   @14,MARKPAT                                         0832
*               IF ASMDUPLX=YES&    /* SECONDARY SLOT TO DO?         */
*                   QSRPTNN2^=ZERO THEN                            0833
         L     @06,CVTPTR                                          0833
         L     @06,ASMVTPTR(,@06)                                  0833
         TM    ASMDUPLX(@06),B'10000000'                           0833
         BNO   @RF00833                                            0833
         CLI   QSRPTNN2(QSREPTR),0                                 0833
         BE    @RF00833                                            0833
*                 DO;                                              0834
*                   PATPTR=DPLTPTR->TPAEPATP;/* DUPLEX PAT           */
         L     @06,DPLTPTR                                         0835
         L     @06,TPAEPATP(,@06)                                  0835
         ST    @06,PATPTR                                          0835
*                   DUPXSUSE=DUPXSUSE+ONE;/* ONE MORE DUPLEX SLOT    */
         LA    @06,1                                               0836
         AL    @06,DUPXSUSE                                        0836
         ST    @06,DUPXSUSE                                        0836
*                   SLOT=QSRSLOT2;  /* SECONDARY SLOT                */
         LH    SLOT,QSRSLOT2(,QSREPTR)                             0837
         N     SLOT,@CF02910                                       0837
*                   CALL MARKPAT;   /* MARK IN PAT-SLOT              */
         BAL   @14,MARKPAT                                         0838
*                 END;              /* SECONDARY SLOT TO DO          */
*               ELSE                                               0840
*                 ;                 /* NO SECONDARY TO DO            */
@RF00833 DS    0H                                                  0841
*             END;                  /* INFO IS O.K.                  */
*           QSREPTR=QSREPTR+LENGTH(QSRENTRY);/* NEXT QSR MAP         */
@RC00809 AL    QSREPTR,@CF00056                                    0842
*           XPTEPTR=XPTEPTR+LENGTH(XPTE);/* NEXT XPTE                */
         LA    @06,12                                              0843
         AL    @06,XPTEPTR                                         0843
         ST    @06,XPTEPTR                                         0843
*           PAGECTR=PAGECTR-ONE;    /* ONE LESS PAGE                 */
         LH    @06,PAGECTR                                         0844
         BCTR  @06,0                                               0844
         STH   @06,PAGECTR                                         0844
*         END;                      /* DO PAGES IN SEGMENT           */
@DE00808 LH    @06,PAGECTR                                         0845
         LTR   @06,@06                                             0845
         BZ    @DC00808                                            0845
         TM    PROBLEM,B'00100000'                                 0845
         BZ    @DL00808                                            0845
@DC00808 DS    0H                                                  0846
*         SEGMAD=SEGMAD+SEGMENT;    /* NEXT SEGMENT ADDRESS          */
         L     @06,@CF02518                                        0846
         AL    @06,SEGMAD                                          0846
         ST    @06,SEGMAD                                          0846
*         PAGECTR=SIXTEEN;          /* PAGES IN A SEGMENT            */
         MVC   PAGECTR(2),@CH00111                                 0847
*         FDPGPTR=SEGMAD;           /* NEXT XPTE ADDRESS TO FINE     */
         ST    @06,FDPGPTR                                         0848
*       END;                        /* FOUND XPTE                    */
*   END;                            /* MARKING PATS                  */
@RC00803 DS    0H                                                  0850
@DE00799 L     @06,QSRPTR                                          0850
         CLC   SEGMAD(4),QSRLPAHI(@06)                             0850
         BNL   @DC00799                                            0850
         TM    PROBLEM,B'00100000'                                 0850
         BZ    @DL00799                                            0850
@DC00799 DS    0H                                                  0851
*   IF PROBLEM=YES THEN                                            0851
         TM    PROBLEM,B'00100000'                                 0851
         BNO   @RF00851                                            0851
*     DO;                           /* TROUBLES IN MARKING PATS      */
*       MSGID=M943W;                /* REBUILD PLPA FAILED           */
         MVC   MSGID(4),@CC02581                                   0853
*       R1=ADDR(MSGPL);             /* PARM TO ILRIMMSG              */
         LA    R1,MSGPL                                            0854
*       CALL ILRIMMSG;              /* WAIT STATE                    */
         L     @15,@CV02592                                        0855
         BALR  @14,@15                                             0855
*     END;                          /* TROUBLES IN MARKING PATS      */
*   ELSE                            /* COMPLETED MARKING O.K.        */
*     IF NVTFLWS=NO THEN                                           0857
         B     @RC00851                                            0857
@RF00851 L     @08,NVTPTR                                          0857
         TM    NVTFLWS(@08),B'00000100'                            0857
         BZ    @RT00857                                            0857
*       GOTO OPENLOCL;              /* NO NEEDED LOCALS?             */
*     ELSE                                                         0859
*       ;                           /* NEEDED LOCALS(WARM START)     */
*                                                                  0860
*/********************************************************************/
*/*                                                                  */
*/* NEEDLOCL: SEGMENT TO IDENTIFY LOCALS SPECIFIED IN BOTH ILRTPARB  */
*/*           (SPECIFIED PREVIOUS IPL) AND ILRDSTBL (SPECIFIED THIS  */
*/*           IPL).  ALSO VERIGY THAT PREVIOUSLY SPECIFIED LOCALS    */
*/*           ARE MOUNTED.                                           */
*/*                                                                  */
*/* INPUT: ILRTPARB AND ILRDSTBL UPON EXIT OF OPENDPLX               */
*/*                                                                  */
*/* PROCESS: LOOP THROUGH ILRDSTBL LOCAL ENTRIES FOR EACH ILRTPARB   */
*/*          LOCAL ENTRY.  ANY MATCHES MARK ILRDSTBL ENTRY AS        */
*/*          ALREADY BEING USED.  LOCATE AND MOUNT (ILROPS00) EACH   */
*/*          ILRTPARB LOCAL (NEEDED LOCAL).  IF ALL NEEDED LOCALS    */
*/*          ARE NOT MOUNTED, A CVIO START IS FORCED.                */
*/*                                                                  */
*/* OUTPUT: 1. CVIO FORCED IPL                                       */
*/*          OR                                                      */
*/*            NEEDED LOCALS MOUNTED                                 */
*/*            ANY DUPLICATE NAMES IN ILRDSTBL MARKED AS SUCH        */
*/*         2. NEEDEDL BIT ON                                        */
*/*                                                                  */
*/********************************************************************/
*/*NEEDLOCL: CHART (SEQ)                                             */
*/*HEADER                                                          0860
*/*  NEEDLOCL SEGMENT                                                */
*/*NEEDLOCL: E ENTRY TO VERIFY NEEDED LOCALS ON WARM START           */
*/*          P TURN ON NEEDEDL BIT                                   */
*/*          P POINT TO FIRST LOCAL ENTRY IN ILRTPARB                */
*/*%A1:      P POINT TO FIRST LOCAL ENTRY IN ILRDSTBL                */
*/*%A2:      D (NO,,YES,%A3) CHECKED ALL ILRDSTBL ENTRIES?           */
*/*          D (YES,,NO,%A4) MATCH LOCAL IN ILRTPARB?                */
*/*          P (,%A3) MARK ILRDSTBL ENTRY AS ALREADY USED            */
*/*%A4:      P (,%A2) NEXT ILRDSTBL ENTRY                            */
*/*%A3:      P DSTEPTR POINTS TO DSNAME IN ILRTPARB ENTRY            */
*/*          S LOCALN: LOCATE AND MOUNT LOCAL                        */
*/*          D (NO,,YES,%A5) CVIO FORCED?                            */
*/*          D (NO,,YES,%A6) MORE ILRTPARB ENTRIES?                  */
*/*          R FLOW CONTINUES AT CHCKCOMM                            */
*/*%A6:      P (,%A1) NEXT ILRTPARB ENTRY                            */
*/*%A5:      P ZERO ILRTPARB ENTRIES FOR LOCALS                      */
*/*          P REMOVE DUPLICATION MARKS IN ILRDSTBL                  */
*/*          N DO NOT REMOVE DUPLICATE MARK IF OF DUPLEX D.S.        */
*/*          R FLOW CONTINUES AT OPENLOCL                            */
*/*NEEDLOCL: END                                                     */
*                                                                  0860
*                                                                  0860
*   /*****************************************************************/
*   /*                                                               */
*   /* NEEDLOCL                                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0860
*   TPAEPTR=LOCTPTR;                /* 1ST LOCAL IN ILRTPARB         */
@RC00851 L     @08,LOCTPTR                                         0860
         ST    @08,TPAEPTR                                         0860
*   NEEDEDL=YES;                    /* PROCESSING NEEDED LOCALS      */
         OI    NEEDEDL,B'00000010'                                 0861
*   COUNT=TPARUSE-INITUSE;          /* COUNT OF LOCAL ENTRIES        */
         L     @08,TPARPTR                                         0862
         L     @08,TPARUSE(,@08)                                   0862
         SL    @08,@CF00092                                        0862
         STH   @08,COUNT                                           0862
*   DO WHILE COUNT^=ZERO;           /* FOR ALL LOCALS IN TPARB       */
         B     @DE00863                                            0863
@DL00863 DS    0H                                                  0864
*     SCHPTR=LOCLPTR;               /* 1ST LOCAL IN WORKAREA         */
         L     SCHPTR,LOCLPTR                                      0864
*     MATCH=NO;                     /* MATCH INDICATOR               */
         NI    MATCH,B'01111111'                                   0865
*     DO WHILE SCHPTR->DSTDSNC^=0&MATCH=NO;/* END OR MATCHES         */
         B     @DE00866                                            0866
@DL00866 DS    0H                                                  0867
*       IF TPAEDSN=SCHPTR->DSTDSN THEN                             0867
         L     @06,TPAEPTR                                         0867
         CLC   TPAEDSN(44,@06),DSTDSN(SCHPTR)                      0867
         BNE   @RF00867                                            0867
*         DO;                       /* MATCHES?                      */
*           SCHPTR->DSTUSED=ON;     /* NAME IS ALREADY BEING USED    */
         OI    DSTUSED(SCHPTR),B'01000000'                         0869
*           MATCH=YES;              /* STOP SEARCH FOR MATCH         */
         OI    MATCH,B'10000000'                                   0870
*         END;                      /* MATCHES                       */
*       ELSE                                                       0872
*         SCHPTR=SCHPTR+LENGTH(DSTENT);/* NEXT WORKAREA ENTRY        */
         B     @RC00867                                            0872
@RF00867 AL    SCHPTR,@CF00076                                     0872
*     END;                          /* END OR MATCH                  */
@RC00867 DS    0H                                                  0873
@DE00866 CLI   DSTDSNC(SCHPTR),0                                   0873
         BE    @DC00866                                            0873
         TM    MATCH,B'10000000'                                   0873
         BZ    @DL00866                                            0873
@DC00866 DS    0H                                                  0874
*     PARMFLG=PARMPGSH;             /* INDICATE PAGE AND NO OPEN TO
*                                      ILROPS00                      */
         MVI   PARMFLG,X'88'                                       0874
*     CALL LOCALN;                  /* HANDLE CALL TO ILROPS00       */
         BAL   @14,LOCALN                                          0875
*     IF NVTFLWS=NO THEN                                           0876
         L     @08,NVTPTR                                          0876
         TM    NVTFLWS(@08),B'00000100'                            0876
         BNZ   @RF00876                                            0876
*       DO;                         /* CVIO WAS FORCED--STOP         */
*         COUNT=ZERO;               /* STOP DO WHILE                 */
*                                                                  0878
         SLR   @08,@08                                             0878
         STH   @08,COUNT                                           0878
*         /***********************************************************/
*         /*                                                         */
*         /* ZERO ALL LOCAL ENTRIES FROM LAST IPL                    */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0879
*         RFY                                                      0879
*          (R0,                                                    0879
*           R14,                                                   0879
*           R15) RSTD;                                             0879
*         R0=LOCTPTR;               /* 1ST LOCAL IN ILRTPARB         */
         L     R0,LOCTPTR                                          0880
*         R1=(TPARUSE-INITUSE)*LENGTH(TPARENT);/* LENGTH OF LOCALS   */
         L     @08,TPARPTR                                         0881
         L     R1,TPARUSE(,@08)                                    0881
         SL    R1,@CF00092                                         0881
         MH    R1,@CH00073                                         0881
*         R15=ZERO;                                                0882
         SLR   R15,R15                                             0882
*         MVCL(R0,R14);             /* ZERO ALL THE LOCAL ENTRIES    */
         MVCL  R0,R14                                              0883
*         RFY                                                      0884
*          (R0,                                                    0884
*           R14,                                                   0884
*           R15) UNRSTD;                                           0884
*         TPARUSE=INITUSE;          /* ENTRIES IN USE NOW            */
*                                                                  0885
         L     @08,TPARPTR                                         0885
         MVC   TPARUSE(4,@08),@CF00092                             0885
*         /***********************************************************/
*         /*                                                         */
*         /* UNMARK ANY DSTUSED FLAGS SET HERE -- NOT ALREADY BEING  */
*         /* USED                                                    */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0886
*         DSTEPTR=LOCLPTR;          /* 1ST LOCAL ENTRY IN WORKAREA   */
         L     DSTEPTR,LOCLPTR                                     0886
*         DO WHILE DSTDSNC^=0;      /* LOCALS TO END OF WORKAREA     */
         B     @DE00887                                            0887
@DL00887 DS    0H                                                  0888
*           IF DSTUSED=ON&DSTDPLX=OFF/* MARKED IN NEEDLOCL?          */
*             THEN                                                 0888
         TM    DSTUSED(DSTEPTR),B'01000000'                        0888
         BNO   @RF00888                                            0888
         TM    DSTDPLX(DSTEPTR),B'10000000'                        0888
         BNZ   @RF00888                                            0888
*             DSTUSED=OFF;                                         0889
         NI    DSTUSED(DSTEPTR),B'10111111'                        0889
*           ELSE                                                   0890
*             ;                     /* NOT MARKED IN NEEDLOCL        */
@RF00888 DS    0H                                                  0891
*           DSTEPTR=DSTEPTR+LENGTH(DSTENT);/* NEXT LOCAL ENTRY       */
         AL    DSTEPTR,@CF00076                                    0891
*         END;                      /* LOCALS TO END OF WORKAREA     */
@DE00887 CLI   DSTDSNC(DSTEPTR),0                                  0892
         BNE   @DL00887                                            0892
*       END;                        /* CVIO WAS FORCED               */
*     ELSE                                                         0894
*       DO;                         /* LOCALN WAS SUCCESSFUL         */
         B     @RC00876                                            0894
@RF00876 DS    0H                                                  0895
*         COUNT=COUNT-ONE;          /* ONE LOCAL DONE                */
         LH    @08,COUNT                                           0895
         BCTR  @08,0                                               0895
         STH   @08,COUNT                                           0895
*         TPAEPTR=TPAEPTR+LENGTH(TPARENT);/* NEXT TPARB ENTRY        */
         LA    @08,96                                              0896
         AL    @08,TPAEPTR                                         0896
         ST    @08,TPAEPTR                                         0896
*       END;                        /* LOCALN WAS SUCCESSFUL         */
*   END;                            /* LOOP THROUGH TPARB ENTRIES    */
@RC00876 DS    0H                                                  0898
@DE00863 LH    @08,COUNT                                           0898
         LTR   @08,@08                                             0898
         BNZ   @DL00863                                            0898
*                                                                  0899
*/********************************************************************/
*/*                                                                  */
*/* OPENLOCL: OPEN BOTH NEEDED LOCALS AND THOSE SPECIFIED THIS IPL   */
*/*                                                                  */
*/* INPUT: ILRTPARB AND ILRDSTBL                                     */
*/*        NEEDEDL BIT                                               */
*/*                                                                  */
*/* PROCESS: ENTERED FROM OPENCOMM OR NEEDLOCL.                      */
*/*          OPEN ALL NEEDED LOCALS FIRST(THEY ARE IN ILRTPARB).     */
*/*          SINCE NEEDLOCL SEGMENT VERIFIED ALL WERE MOUNTED, OPEN  */
*/*          SHOULD NOT FAIL.  IF FAILURE DOES OCCUR LOCALS ALREADY  */
*/*          OPENED WILL BE UTILIZED BY THIS IPL AS EMPTY DATA SETS. */
*/*          THE ILRTPARB WILL BE CLEANED UP AND CVIO FORCED.        */
*/*              AFTER TURNING OFF NEEDEDL BIT, OPENS ALL OTHER      */
*/*          SPECIFIED LOCALS IN ILRDSTBL.  IF FAILURE AND NO NEW    */
*/*          NAME GIVEN, THE DATA SET WILL BE IGNORED AND THE NEXT   */
*/*          SPECIFIED DATA SET OPENED.                              */
*/*             ALL ILRTPARB ENTRIES COMPLETE AND PAT FOR EACH DATA  */
*/*          SET.                                                    */
*/*                                                                  */
*/* OUTPUT: NEEDEDL BIT OFF                                          */
*/*         ALL LOCALS OPEN AND ILRTPARB ENTRIES FILLED IN           */
*/*                                                                  */
*/********************************************************************/
*/*OPENLOCL: CHART                                                   */
*/*HEADER                                                          0899
*/*  OPENLOCL SEGMENT                                                */
*/*OPENLOCL: E ENTRY TO OPEN LOCAL PAGING DATA SETS                  */
*/*          P POINT TO FIRST LOCAL IN ILRTPARB                      */
*/*%A1:      D (YES,,NO,%A2) MORE LOCALS IN ILRTPARB?                */
*/*          S LOCALN: OPEN NEEDED LOCAL                             */
*/*          D (NO,,YES,%A3) CVIO FORCED?                            */
*/*          S TPARPATS: FILL IN ILRTPARB AND BUILD PAT              */
*/*          D (NO,,YES,%A4) TPARPATS O.K.?                          */
*/*          S ILRIMMSG: ISSUE 'FORCE CVIO' MESSAGE                  */
*/*          P (,%A3) CHANGE NVT IPL FLAGS                           */
*/*%A4:      P INCREASE ASMSLOTS BY SIZE OF DATA SET                 */
*/*          P (,%A1) NEXT ENTRY                                     */
*/*%A3:      P DECREASE ILRTPARB USE COUNT (LOCALS NOT OPENED)       */
*/*%A5:      D (NO,,YES,%A6) MORE LOCALS IN ILRTPARB?                */
*/*          P (,%A1) ZERO UNUSED ENTRIES NOW                        */
*/*%A6:      N LOOP THRU ILRDSTBL LOCALS FOR MATCH OF UNPROCESSED    */
*/*          P POINT TO FIRST LOCAL IN ILRDSTBL                      */
*/*%A8:      D (YES,,NO,%A5) MORE ILRDSTBL LOCALS?                   */
*/*          D (YES,,NO,%A7) NAMES MATCH?                            */
*/*          P (,%A5) UNMARK DUPLICATE NAMES (MARKED IN NEEDLOCL)    */
*/*%A7:      P (,%A8) NEXT ENTRY                                     */
*/*%A2:      P POINT TO FIRST LOCAL IN ILRDSTBL                      */
*/*%B1:      D (NO,,YES,%B2) MORE LOCALS IN ILRDSTBL?                */
*/*          D (NO,,YES,%B3) HAVE REQUIRED DATA SETS IN ILRTPARB?    */
*/*          S ILRIMMSG: ISSUE MESSAGE IEA935W                       */
*/*          R WAIT STATE 3C                                         */
*/*%B3:      P BACKSLOTS SAME AS ASMSLOTS COUNT                      */
*/*          P DECREMENT BACKSLOTS BY MASTER MEMORY SLOTS            */
*/*          R FLOW CONTINUES AT TIMESTMP                            */
*/*%B2:      D (YES,,NO,%B5) ILRTPARB FULL?                          */
*/*          S ILRIMMSG: 'DATA SET NOT ACCEPTED' MESSAGE             */
*/*          P (,%B1) MARK THIS ILRDSTBL ENTRY AS END OF  LIST       */
*/*%B5:      D (NO,,YES,%C1) MARKED DUPLICATE OR MATCH COMMON?       */
*/*%B6:      S OPEN: OPEN LOCAL                                      */
*/*          D (NO,,YES,%C2) SUCCESSFUL OPEN?                        */
*/*          D (YES,,NO,%B7) MOUNT FAIL?                             */
*/*          S ILRIMMSG: 'MOUNT FAIL' MESSAGE                        */
*/*          D (YES,,NO,%B6) OPERATOR REPLY 'IGNORE'?                */
*/*%B8:      P (,%C1) MARK ENTRY TO NOT BE USED                      */
*/*%B7:      N LOCATE FAILED                                         */
*/*%B9:      S OPENA: ASK FOR NEW NAME                               */
*/*          D (NO,,YES,%B8) REPLY 'IGNORE' TO LOCATE FAILURE?       */
*/*          N GIVEN NEW NAME                                        */
*/*          D (YES,,NO,%B6) WARM START?                             */
*/*          N NEW NAME MUST BE UNIQUE IN ILRTPARB, NOT JUST ILRDSTBL*/
*/*          P POINT TO FIRST LOCAL IN ILRTPARB                      */
*/*%C3:      D (YES,,NO,%C4) NAMES MATCH?                            */
*/*          S (,%B9) OPENB: NOT ACCEPTABLE, ASK FOR NEW NAME        */
*/*%C4:      P NEXT ILRTPARB ENTRY                                   */
*/*          D (YES,%C3,NO,%B6) MORE ILRTPARB ENTRIES?               */
*/*%C2:      P MOVE NAME FROM ILRDSTBL TO ILRTPARB                   */
*/*          S TPARPATS: FILL IN ILRTPARB ENTRY AND BUILD PAT        */
*/*          P INCREASE ASMSLOTS BY SIZE OF DATA SET                 */
*/*          P INCREASE ILRTPARB USE COUNT BY ONE                    */
*/*          P NEXT ILRTPARB ENTRY                                   */
*/*%C1:      P (,%B1) NEXT ILRDSTBL ENTRY                            */
*/*OPENLOCL: END                                                     */
*                                                                  0899
*OPENLOCL:                                                         0899
*   TPAEPTR=LOCTPTR;                /* 1ST LOCAL IN TPARB            */
OPENLOCL L     @08,LOCTPTR                                         0899
         ST    @08,TPAEPTR                                         0899
*   COUNTL=TPARUSE-INITUSE;         /* NUMBER OF LOCALS IN TPARB     */
         L     @08,TPARPTR                                         0900
         L     COUNTL,TPARUSE(,@08)                                0900
         SL    COUNTL,@CF00092                                     0900
*   PARMFLG=PARMPG;                 /* OPEN FLAG - PAGE DATA SETS    */
         MVI   PARMFLG,X'80'                                       0901
*   DO WHILE COUNTL^=ZERO;          /* PROCESS LOCALS IN TPARB       */
         B     @DE00902                                            0902
@DL00902 DS    0H                                                  0903
*     CALL LOCALN;                  /* OPEN DATA SET                 */
         BAL   @14,LOCALN                                          0903
*     IF NVTFLWS=YES THEN                                          0904
         L     @08,NVTPTR                                          0904
         TM    NVTFLWS(@08),B'00000100'                            0904
         BNO   @RF00904                                            0904
*       DO;                         /* CVIO NOT FORCED?              */
*         RFY                                                      0906
*           R15 RSTD;                                              0906
*         CALL TPARPATS;            /* FILL IN TPARB AND BUILD PAT   */
         BAL   @14,TPARPATS                                        0907
*         IF R15^=ZERO THEN                                        0908
         LTR   R15,R15                                             0908
         BZ    @RF00908                                            0908
*           DO;                     /* TPARPATS ERROR?               */
*             RFY                                                  0910
*               R15 UNRSTD;                                        0910
*             MSGID=M930I;          /* FORCE CVIO                    */
         MVC   MSGID(4),@CC02565                                   0911
*             R1=ADDR(MSGPL);       /* PARM TO ILRIMMSG              */
         LA    R1,MSGPL                                            0912
*             CALL ILRIMMSG;        /* MESSAGE MODULE                */
         L     @15,@CV02592                                        0913
         BALR  @14,@15                                             0913
*             NVTFLWS=NO;           /* NOT WARM START NOW            */
         L     @08,NVTPTR                                          0914
         NI    NVTFLWS(@08),B'11111011'                            0914
*           END;                    /* TPARPATS ERROR                */
*         ELSE                                                     0916
*           DO;                     /* TPARPATS O.K.                 */
         B     @RC00908                                            0916
@RF00908 DS    0H                                                  0917
*             ASMSLOTS=ASMSLOTS+TPAESZSL;/* TOTAL LOCAL SLOTS        */
         L     @08,CVTPTR                                          0917
         L     @08,ASMVTPTR(,@08)                                  0917
         L     @06,TPAEPTR                                         0917
         L     @03,ASMSLOTS(,@08)                                  0917
         AL    @03,TPAESZSL(,@06)                                  0917
         ST    @03,ASMSLOTS(,@08)                                  0917
*             COUNTL=COUNTL-ONE;    /* ONE LESS LOCAL TO DO          */
         BCTR  COUNTL,0                                            0918
*             TPAEPTR=TPAEPTR+LENGTH(TPARENT);/* NEXT LOCAL          */
         AL    @06,@CF00073                                        0919
         ST    @06,TPAEPTR                                         0919
*           END;                    /* TPARPATS O.K.                 */
*       END;                        /* CVIO NOT FORCED               */
*     ELSE                                                         0922
*       ;                           /* CVIO FORCED BY LOCALN         */
*                                                                  0922
@RF00904 DS    0H                                                  0923
*     /***************************************************************/
*     /*                                                             */
*     /* OPENING NEEDED LOCALS WITH SHORT PATH IN NEEDLOCL SEGMENT   */
*     /* SHOULD MAKE THE BELOW SECTION OF CODE ALMOST IMPOSSIBLE TO  */
*     /* OCCUR. IF SOME NEEDED LOCALS ARE OPEN NOW, CONTROL BLOCKS   */
*     /* HAVE ALREADY BEEN BUILT, AND WILL BE USED BY ASM. THE REST  */
*     /* OF NEEDED LOCALS WILL NOT BE OPENED, BUT IF SAME DATA SET IS*/
*     /* IN ILRDSTBL(DSTUSED = ON) IT IS MADE AVAILABLE TO BE OPENED */
*     /* FOR PROCESSING LOCALS IN WORKAREA. COUNT GOES TO ZERO, ALSO */
*     /* IS ZERO FOR OUTER LOOP.                                     */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0923
*     IF NVTFLWS=NO THEN                                           0923
@RC00904 L     @08,NVTPTR                                          0923
         TM    NVTFLWS(@08),B'00000100'                            0923
         BNZ   @RF00923                                            0923
*       DO;                         /* CVIO FORCED- LOCALN OR ABOVE? */
*         SAVECT=COUNTL;            /* SAVE THE COUNT                */
         STH   COUNTL,SAVECT                                       0925
*         PLHPTR=TPAEPTR;           /* SAVE THIS ENTRY ADDRESS       */
         L     @08,TPAEPTR                                         0926
         ST    @08,PLHPTR                                          0926
*         TPARUSE=TPARUSE-COUNTL;   /* REST OF LOCALS WILL BE ZEROED */
         L     @08,TPARPTR                                         0927
         L     @06,TPARUSE(,@08)                                   0927
         SLR   @06,COUNTL                                          0927
         ST    @06,TPARUSE(,@08)                                   0927
*         DO WHILE COUNTL^=ZERO;    /* ALL OF THE REST               */
         B     @DE00928                                            0928
@DL00928 DS    0H                                                  0929
*           SCHPTR=LOCLPTR;         /* CHECK WORKAREA FOR DUPS OF  0929
*                                      REST                          */
         L     SCHPTR,LOCLPTR                                      0929
*           DO WHILE SCHPTR->DSTDSNC^=0&SCHPTR->DSTDSN^=TPAEDSN;   0930
         B     @DE00930                                            0930
@DL00930 DS    0H                                                  0931
*             SCHPTR=SCHPTR+LENGTH(DSTENT);/* NEXT WORKAREA ENTRY    */
         AL    SCHPTR,@CF00076                                     0931
*           END;                    /* CHECK WORKAREA FOR DUPS OF  0932
*                                      REST                          */
@DE00930 CLI   DSTDSNC(SCHPTR),0                                   0932
         BE    @DC00930                                            0932
         L     @06,TPAEPTR                                         0932
         CLC   DSTDSN(44,SCHPTR),TPAEDSN(@06)                      0932
         BNE   @DL00930                                            0932
@DC00930 DS    0H                                                  0933
*           IF SCHPTR->DSTDSN=TPAEDSN THEN/* IS A DUPLICATE          */
         L     @06,TPAEPTR                                         0933
         CLC   DSTDSN(44,SCHPTR),TPAEDSN(@06)                      0933
         BNE   @RF00933                                            0933
*             SCHPTR->DSTUSED=OFF;  /* UNMARKED--ALREADY IN USE FLAG */
         NI    DSTUSED(SCHPTR),B'10111111'                         0934
*           ELSE                                                   0935
*             ;                     /* NOT DUPLICATE                 */
@RF00933 DS    0H                                                  0936
*           COUNTL=COUNTL-ONE;      /* ONE ENTRY DONE                */
         BCTR  COUNTL,0                                            0936
*           TPAEPTR=TPAEPTR+LENGTH(TPARENT);/* NEXT TPAR ENTRY       */
         LA    @08,96                                              0937
         AL    @08,TPAEPTR                                         0937
         ST    @08,TPAEPTR                                         0937
*         END;                      /* ALL OF THE REST               */
@DE00928 LTR   COUNTL,COUNTL                                       0938
         BNZ   @DL00928                                            0938
*         RFY                                                      0939
*          (R0,                                                    0939
*           R14,                                                   0939
*           R15) RSTD;              /* ZERO THE REST OF LOCALS       */
*         R0=PLHPTR;                /* FIRST ONE -- SAVED ADDRESS    */
         L     R0,PLHPTR                                           0940
*         R1=SAVECT*LENGTH(TPARENT);/* LENGTH TO ZERO                */
         LH    R1,SAVECT                                           0941
         MH    R1,@CH00073                                         0941
*         R15=ZERO;                                                0942
         SLR   R15,R15                                             0942
*         MVCL(R0,R14);             /* ZEROED                        */
         MVCL  R0,R14                                              0943
*         RFY                                                      0944
*          (R0,                                                    0944
*           R14,                                                   0944
*           R15) UNRSTD;                                           0944
*         TPAEPTR=PLHPTR;           /* RESET NEXT TPARB ENTRY TO USE */
         L     @08,PLHPTR                                          0945
         ST    @08,TPAEPTR                                         0945
*       END;                        /* CVIO FORCED BY LOCALN OR HERE */
*     ELSE                                                         0947
*       ;                           /* CVIO NOT FORCED -- ALREADY  0947
*                                      DONE                          */
@RF00923 DS    0H                                                  0948
*   END;                            /* PROCESS LOCALS IN TPARB       */
@DE00902 LTR   COUNTL,COUNTL                                       0948
         BNZ   @DL00902                                            0948
*   NEEDEDL=OFF;                    /* DONE PROCESSING NEEDED LOCALS */
         NI    NEEDEDL,B'11111101'                                 0949
*                                                                  0950
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCESS LOCALS IN WORKAREA                                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0950
*   DSTEPTR=LOCLPTR;                /* 1ST LOCAL IN WORKAREA         */
         L     DSTEPTR,LOCLPTR                                     0950
*   DO WHILE DSTDSNC^=0;            /* DO ALL LOCALS IN WORKAREA     */
         B     @DE00951                                            0951
@DL00951 DS    0H                                                  0952
*     IF TPARUSE=ENTSTPAR THEN                                     0952
         L     @08,TPARPTR                                         0952
         CLC   TPARUSE(4,@08),@CF00054                             0952
         BNE   @RF00952                                            0952
*       DO;                         /* TPARB FULL?                   */
*         MSGID=M918I;              /* DSNAME NOT ACCEPTED           */
         MVC   MSGID(4),@CC02547                                   0954
*         MSGDATA1=ADDR(DSTDSN);    /* DSNAME TO ILRIMMSG            */
         ST    DSTEPTR,MSGDATA1                                    0955
*         FLAGS=PAGEQ;              /* PAGE NOT ACCEPTED             */
         MVI   FLAGS,X'80'                                         0956
*         R1=ADDR(MSGPL);           /* PASS PARMS                    */
         LA    R1,MSGPL                                            0957
*         CALL ILRIMMSG;            /* MESSAGE MODULE                */
         L     @15,@CV02592                                        0958
         BALR  @14,@15                                             0958
*       END;                        /* TPARB FULL                    */
*     ELSE                                                         0960
*       DO;                         /* TPARB NOT FULL                */
         B     @RC00952                                            0960
@RF00952 DS    0H                                                  0961
*         IF DSTUSED=OFF&           /* NOT ALREADY IN TPARB & OPEN   */
*             DSTDSN^=COMTPTR->DSTDSN THEN/* NOT USED AS COMMON D.S. */
         TM    DSTUSED(DSTEPTR),B'01000000'                        0961
         BNZ   @RF00961                                            0961
         L     @08,COMTPTR                                         0961
         CLC   DSTDSN(44,DSTEPTR),DSTDSN(@08)                      0961
         BE    @RF00961                                            0961
*           DO;                                                    0962
*REDO:                                                             0963
*             PARMDSN=DSTDSN;       /* PUT IN WORKAREA NAME          */
REDO     MVC   PARMDSN(44),DSTDSN(DSTEPTR)                         0963
*             RFY                                                  0964
*               R15 RSTD;                                          0964
*             CALL OPEN;            /* OPEN SUBROUTINE               */
         BAL   @14,OPEN                                            0965
*             IF R15^=ZERO THEN                                    0966
         LTR   R15,R15                                             0966
         BZ    @RF00966                                            0966
*               DO;                 /* NOT OPEN SUCCESSFULLY         */
*                 IF R15=NOVOLMNT THEN                             0968
         C     R15,@CF00056                                        0968
         BNE   @RF00968                                            0968
*                   DO;             /* MOUNT FAILED?                 */
*                     MSGID=M923D;  /* ASK TO MOUNT                  */
         MVC   MSGID(4),@CC02555                                   0970
*                     MSGDATA1=ADDR(VOLSER);/* VOL SER               */
         LA    @14,PARMDSN                                         0971
         LA    @14,VOLSER(,@14)                                    0971
         ST    @14,MSGDATA1                                        0971
*                     FLAGS=PAGEQ;  /* TYPE OF D.S. IS PAGE          */
         MVI   FLAGS,X'80'                                         0972
*                     R1=ADDR(MSGPL);/* PARM TO ILRIMMSG             */
         LA    R1,MSGPL                                            0973
*                     CALL ILRIMMSG;/* MESSAGE MODULE                */
         L     @15,@CV02592                                        0974
         BALR  @14,@15                                             0974
*                     IF R1->MSGBUF(1:LENGTH(IGNORE))^=IGNORE THEN 0975
         CLC   MSGBUF(6,R1),@CC02477                               0975
         BNE   @RT00975                                            0975
*                       GOTO REDO;  /* DID NOT SAY IGNORE            */
*                     ELSE                                         0977
*                       DSTNUSED=ON;/* OPER SAID IGNORE(NOT TO USE)  */
         OI    DSTNUSED(DSTEPTR),B'00100000'                       0977
*                   END;            /* MOUNT FAILED                  */
*                 ELSE                                             0979
*                   DO;             /* LOCATE FAILED                 */
         B     @RC00968                                            0979
@RF00968 DS    0H                                                  0980
*NAMEASK:                                                          0980
*                     CALL OPENA;   /* ASK FOR A DIFFERENT NAME      */
NAMEASK  BAL   @14,OPENA                                           0980
*                     IF R15=IGNORVOL THEN                         0981
         C     R15,@CF00069                                        0981
         BNE   @RF00981                                            0981
*                       DO;         /* OPER SAID IGNORE?             */
*                         RFY                                      0983
*                           R15 UNRSTD;                            0983
*                         DSTNUSED=ON;/* MARK AS NOT TO USE          */
         OI    DSTNUSED(DSTEPTR),B'00100000'                       0984
*                       END;        /* OPER SAID IGNORE              */
*/*             UNIQUE NEW NAME IN WORKAREA -- CHECK UNIQUE IN TPARB */
*/*             IF THERE ARE LOCALS BECAUSE OF WARM START            */
*                                                                  0986
*                     ELSE                                         0986
*                       DO;         /* UNIQUE NAME                   */
         B     @RC00981                                            0986
@RF00981 DS    0H                                                  0987
*                         IF NVTFLWS=YES THEN                      0987
         L     @08,NVTPTR                                          0987
         TM    NVTFLWS(@08),B'00000100'                            0987
         BNO   @RF00987                                            0987
*                           DO;     /* LOCALS TO CHECK?              */
*                             SCHPTR=LOCTPTR;/* 1ST LOCAL IN TPARB   */
         L     SCHPTR,LOCTPTR                                      0989
*                             COUNT=TPARUSE-INITUSE;/* COUNT OF    0990
*                                      LOCALS                        */
         L     @06,TPARPTR                                         0990
         L     @06,TPARUSE(,@06)                                   0990
         SL    @06,@CF00092                                        0990
         STH   @06,COUNT                                           0990
*                             DO WHILE COUNT^=ZERO&SCHPTR->TPAEDSN^=
*                                   DSTDSN;                        0991
         B     @DE00991                                            0991
@DL00991 DS    0H                                                  0992
*                               COUNT=COUNT-ONE;/* ONE LESS LOCAL TO
*                                      DO                            */
         LH    @06,COUNT                                           0992
         BCTR  @06,0                                               0992
         STH   @06,COUNT                                           0992
*                               SCHPTR=SCHPTR+LENGTH(TPARENT);/* NEXT*/
         AL    SCHPTR,@CF00073                                     0993
*                             END;  /* END OF SEARCH FOR MATCH       */
@DE00991 LH    @06,COUNT                                           0994
         LTR   @06,@06                                             0994
         BZ    @DC00991                                            0994
         CLC   TPAEDSN(44,SCHPTR),DSTDSN(DSTEPTR)                  0994
         BNE   @DL00991                                            0994
@DC00991 DS    0H                                                  0995
*                             IF COUNT^=ZERO THEN                  0995
         LH    @08,COUNT                                           0995
         LTR   @08,@08                                             0995
         BZ    @RF00995                                            0995
*                               DO; /* FOUND A MATCH?                */
*                                 CALL OPENB;/* BAD AND ASK AGAIN    */
         BAL   @14,OPENB                                           0997
*                                 GOTO NAMEASK;/* CHECK OPER REPLY   */
         B     NAMEASK                                             0998
*                               END;/* FOUND A MATCH IN TPARB        */
*                             ELSE                                 1000
*                               GOTO REDO;/* NAME UNIQUE IN TPARB TOO*/
*                           END;    /* LOCALS TO CHECK               */
*                         ELSE                                     1002
*                           GOTO REDO;/* NOT LOCALS TO CHECK         */
*                       END;        /* UNIQUE NAME                   */
*                   END;            /* LOCATE FAILED                 */
*               END;                /* NOT OPEN SUCCESSFULLY         */
*             ELSE                                                 1006
*               DO;                 /* OPENED O.K.                   */
         B     @RC00966                                            1006
@RF00966 DS    0H                                                  1007
*                 TPAEDSN=DSTDSN;   /* PUT IN NAME                   */
         L     @08,TPAEPTR                                         1007
         MVC   TPAEDSN(44,@08),DSTDSN(DSTEPTR)                     1007
*                 TPAEDSNL=DSTLNG;  /* PUT IN LENGTH                 */
         IC    @06,DSTLNG(,DSTEPTR)                                1008
         STC   @06,TPAEDSNL(,@08)                                  1008
*                 TPAELOCL=ON;      /* MARK AS LOCAL                 */
         OI    TPAELOCL(@08),B'00010000'                           1009
*                 CALL TPARPATS;    /* FILL IN TPARB ENTRY & BUILD 1010
*                                      PAT                           */
         BAL   @14,TPARPATS                                        1010
*                 ASMSLOTS=ASMSLOTS+TPAESZSL;/* ADD TO TOTAL LOCAL 1011
*                                      SLOT                          */
         L     @08,CVTPTR                                          1011
         L     @08,ASMVTPTR(,@08)                                  1011
         L     @06,TPAEPTR                                         1011
         L     @00,ASMSLOTS(,@08)                                  1011
         AL    @00,TPAESZSL(,@06)                                  1011
         ST    @00,ASMSLOTS(,@08)                                  1011
*                 TPAEPTR=TPAEPTR+LENGTH(TPARENT);/* NEXT TPARB ENTRY*/
         AL    @06,@CF00073                                        1012
         ST    @06,TPAEPTR                                         1012
*                 TPARUSE=TPARUSE+ONE;/* ONE MORE ENTRY IS USED      */
         L     @08,TPARPTR                                         1013
         LA    @06,1                                               1013
         AL    @06,TPARUSE(,@08)                                   1013
         ST    @06,TPARUSE(,@08)                                   1013
*               END;                /* OPENED O.K                    */
*           END;                    /* NOT ALREADY IN TPARB & OPEN   */
*         ELSE                                                     1016
*           ;                       /* ALREADY IN TPARB & OPEN       */
@RF00961 DS    0H                                                  1017
*       END;                        /* TPARB NOT FULL                */
@RC00961 DS    0H                                                  1018
*     DSTEPTR=DSTEPTR+LENGTH(DSTENT);/* NEXT WORKAREA ENTRY          */
@RC00952 AL    DSTEPTR,@CF00076                                    1018
*   END;                            /* DO ALL LOCALS IN WORKAREA     */
@DE00951 CLI   DSTDSNC(DSTEPTR),0                                  1019
         BNE   @DL00951                                            1019
*   IF TPARUSE<MINPGSC THEN                                        1020
         L     @08,TPARPTR                                         1020
         L     @08,TPARUSE(,@08)                                   1020
         C     @08,@CF00069                                        1020
         BNL   @RF01020                                            1020
*     DO;                           /* NOT ENOUGH DATA SETS?         */
*       MSGID=M935W;                /* NEEDED RESOURCES              */
         MVC   MSGID(4),@CC02567                                   1022
*       R1=ADDR(MSGPL);             /* PARM TO ILRIMMSG              */
         LA    R1,MSGPL                                            1023
*       CALL ILRIMMSG;              /* MESSAGE MODULE                */
         L     @15,@CV02592                                        1024
         BALR  @14,@15                                             1024
*     END;                          /* NOT ENOUGH DATA SETS          */
*   ELSE                            /* ENOUGH DATA SETS              */
*     ASMBKSLT=ASMSLOTS;            /* INITIALIZE BACKING SLOTS      */
         B     @RC01020                                            1026
@RF01020 L     @08,CVTPTR                                          1026
         L     @08,ASMVTPTR(,@08)                                  1026
         L     @00,ASMSLOTS(,@08)                                  1026
         ST    @00,ASMBKSLT(,@08)                                  1026
*                                                                  1027
*/********************************************************************/
*/*                                                                  */
*/* TIMESTMP: SEGMENT TO DO NECESSARY UNIQUE MARKING OF ILRTPARB,    */
*/*           ILRQSRCD, AND DUPLEX DATA SET.                         */
*/*                                                                  */
*/* INPUT: ILRTPARB,ILRQSTCD, OPENED COMMON DATA SET,                */
*/*        AND OPENED DUPLEX DATA SET(IF DUPLEXING)                  */
*/*                                                                  */
*/* PROCESS: ENTRY FROM OPENLOCL SEGMENT. TYPE OF IPL WILL NO LONGER */
*/*          CHANGE IN ILRASRIM.  SINCE ILRTMI00 EXECUTES AFTER NVT  */
*/*          (IPL FLAGS) IS AVAILABLE, WARM OR NOT WARM START IS     */
*/*          INDICATED IN ILRTPARB.  TIMESTAMPS ARE DEPENDENT ON     */
*/*          TYPE OF IPL.  IF WARM START, LEAVE TIMESTAMPS ALONE.    */
*/*          IF COLD START ALL FOUR  MUST BE MARKED.  IF CVIO        */
*/*          (QUICK START), PLPA RELATED ITEMS ARE UNCHANGED. ONLY   */
*/*          ILRTPARB IS MARKED.                                     */
*/*                                                                  */
*/* OUTPUT: WARM START-  ILRTPARB INDICATES WARM START               */
*/*         CVIO-        ILRTPARB HAS NEW TIMESTAMP                  */
*/*         CLPA-        ILRTPARB, ILRQSRCD, COMMON DATA SET, AND    */
*/*                          DUPLEX DATA SET HAVE A TIMESTAMP.       */
*/*                                                                  */
*/********************************************************************/
*/*TIMESTMP: CHART                                                   */
*/*HEADER                                                          1027
*/*  TIMESTMP SEGMENT                                                */
*/*TIMESTMP: E ENTRY TO DO NECESSARY TIMESTAMPING                    */
*/*          D (YES,,NO,%A1) WARM START?                             */
*/*          P MARK WARM START IN ILRTPARB                           */
*/*          P MARK NO LOCALS USEABLE (ASMVT)                        */
*/*%A2:      R FLOW CONTINUES AT MOVEPCT                             */
*/*%A1:      P TIMESTAMP ILRTPARB                                    */
*/*          D (NO,,YES,%A3) TIMESTAMP O.K.?                         */
*/*          S ILRIMMSG:ISSUE 'BAD CLOCK' MESSAGE                    */
*/*          R WAIT STATE                                            */
*/*%A3:      D (YES,,NO,%A2) COLD START?                             */
*/*          P COPY TIMESTAMP TO ILRQSRCD                            */
*/*          P ZERO 4K BUFFER AND PUT IN TIMESTAMP                   */
*/*          S ILRPREAD: WRITE TIMESTAMP TO COMMON                   */
*/*          D (NO,,YES,%A4) WRITE O.K.?                             */
*/*          S ILRIMMSG: BAD COMMON TIMESTAMP                        */
*/*          S ILRIMMSG: NEEDED RESOURCE                             */
*/*          R WAIT STATE                                            */
*/*%A4:      D (YES,,NO,%A2) DUPLEX THIS IPL?                        */
*/*          S ILRPREAD: WRITE BUFFER TO 1ST SLOT ON DUPLEX D.S.     */
*/*          D (NO,,YES,%A2) WRITE O.K.?                             */
*/*          S ILRIMMSG: ISSUE 'NO DUPLEXING' MESSAGE                */
*/*          P ZERO DUPLEX NAME IN ILRTPARB                          */
*/*          P MARK ENTRY AS TO BE SKIPPED                           */
*/*          P (,%A2) TURN OFF ASMVT DUPLEX FLAG                     */
*/*TIMESTMP: END                                                     */
*                                                                  1027
*                                                                  1027
*/*       TIMESTAMP ILRTPARB,ILRQSRCD,DUPLEX D.S. & COMMON D.S       */
*                                                                  1027
*   IF NVTFLWS=YES THEN                                            1027
@RC01020 L     @08,NVTPTR                                          1027
         TM    NVTFLWS(@08),B'00000100'                            1027
         BNO   @RF01027                                            1027
*     DO;                           /* WARM START?                   */
*       TPARWARM=ON;                /* MARK WARM START IN TPARB (TMI)*/
         L     @08,TPARPTR                                         1029
         OI    TPARWARM(@08),B'10000000'                           1029
*       ASMQUICK=ON;                /* MARK QUICK START IN ASMVT     */
*       ASMWARM=ON;                 /* MARK WARM START IN ASMVT      */
         L     @08,CVTPTR                                          1031
         L     @08,ASMVTPTR(,@08)                                  1031
         OI    ASMQUICK(@08),B'00001100'                           1031
*       ASMNOLCL=ON;                /* MARK NO LOCALS AVAILABLE (TMI)*/
         OI    ASMNOLCL(@08),B'00100000'                           1032
*     END;                          /* WARM START                    */
*   ELSE                                                           1034
*     DO;                           /* COLD OR QUICK(CVIO) START     */
         B     @RC01027                                            1034
@RF01027 DS    0H                                                  1035
*       RFY                                                        1035
*         R15 RSTD;                                                1035
*       R15=TPARPTR;                /* ADDRESS TPARTBLE FOR STCK     */
         L     R15,TPARPTR                                         1036
*       GEN SETS(TPARTIME);                                        1037
*                                 /* TIMESTAMP ILRTPARB             */
   STCK TPARTIME(15)              REG 15 IS TPARPTR
*       BC(12,GOODCLK);             /* BIT0 OR BIT1 SET IS O.K.(CC)  */
         BC    12,GOODCLK                                          1038
*       MSGID=M945W;                /* BAD CLOCK MESSAGE             */
         MVC   MSGID(4),@CC02585                                   1039
*       R1=ADDR(MSGPL);             /* PARM TO ILRIMMSG              */
         LA    R1,MSGPL                                            1040
*       CALL ILRIMMSG;              /* WAIT STATE                    */
         L     @15,@CV02592                                        1041
         BALR  @14,@15                                             1041
*GOODCLK:                           /* STCK SUCCESSFUL               */
*       IF NVTFLQS=NO THEN                                         1042
GOODCLK  L     @14,NVTPTR                                          1042
         TM    NVTFLQS(@14),B'00001000'                            1042
         BNZ   @RF01042                                            1042
*         DO;                       /* COLD START?- STAMP PLPA ITEMS */
*           QSRSYNCH=TPARTIME;      /* TIMESTAMP ILRQSRCD            */
*                                                                  1044
         L     @14,QSRPTR                                          1044
         L     @08,TPARPTR                                         1044
         MVC   QSRSYNCH(8,@14),TPARTIME(@08)                       1044
*           /*********************************************************/
*           /*                                                       */
*           /* TIME STAMP COMMON AND DUPLEX D.S.                     */
*           /*                                                       */
*           /*********************************************************/
*                                                                  1045
*           RFY                                                    1045
*            (R0,                                                  1045
*             R14) RSTD;            /* ZERO ENTIRE BUFFER            */
*           R0=BUFFPTR;             /* FOURK BUFFER                  */
         L     R0,BUFFPTR                                          1046
*           R1=FOURK;                                              1047
         L     R1,@CF02516                                         1047
*           R15=ZERO;                                              1048
         SLR   R15,R15                                             1048
*           MVCL(R0,R14);           /* ZEROED                        */
         MVCL  R0,R14                                              1049
*           RFY                                                    1050
*            (R0,                                                  1050
*             R14,                                                 1050
*             R15) UNRSTD;                                         1050
*           BUFFPTR->TIMEBUF=TPARTIME;/* PUT TIMESTAMP IN BUFFER     */
         L     @08,BUFFPTR                                         1051
         L     @15,TPARPTR                                         1051
         MVC   TIMEBUF(8,@08),TPARTIME(@15)                        1051
*           PWRITE=ON;              /* A WRITE REQUEST               */
*           PTPARB=ON;              /* USE ILRTPARB ENTRY ADDRESS    */
         OI    PWRITE,B'11000000'                                  1053
*           PSLOTNO=ONE;            /* ONE SLOT TO DO                */
         MVI   PSLOTNO,X'01'                                       1054
*           PSLOT=''B;              /* RELATIVE SLOT ZERO            */
         SLR   @00,@00                                             1055
         STH   @00,PSLOT                                           1055
*           PENTRY=COMTPTR;         /* COMMON D.S. ENTRY             */
         L     @00,COMTPTR                                         1056
         ST    @00,PENTRY                                          1056
*           PBUFF=BUFFPTR;          /* BUFFER ADDRESS                */
         ST    @08,PBUFF                                           1057
*           R1=ADDR(READPARM);      /* PARM TO ILRPREAD              */
         LA    R1,READPARM                                         1058
*           RFY                                                    1059
*             R15 RSTD;                                            1059
*           CALL ILRPREAD;          /* CALL ILRPREAD                 */
         L     @15,RDWTPTR                                         1060
         BALR  @14,@15                                             1060
*           IF R15^=ZERO THEN                                      1061
         LTR   R15,R15                                             1061
         BZ    @RF01061                                            1061
*             DO;                   /* FAIL?                         */
*               MSGID=M937I;        /* COMMON HAS BAD TIMESTAMP      */
         MVC   MSGID(4),@CC02569                                   1063
*               R1=ADDR(MSGPL);     /* PARM TO ILRIMMSG              */
         LA    R1,MSGPL                                            1064
*               CALL ILRIMMSG;      /* MESSAGE MODULE                */
         L     @15,@CV02592                                        1065
         BALR  @14,@15                                             1065
*               MSGID=M935W;        /* NEED RESOURCE PROBLEM         */
         MVC   MSGID(4),@CC02567                                   1066
*               R1=ADDR(MSGPL);     /* PARM TO ILRIMMSG              */
         LA    R1,MSGPL                                            1067
*               CALL ILRIMMSG;      /* WAIT STATE                    */
         L     @15,@CV02592                                        1068
         BALR  @14,@15                                             1068
*             END;                  /* FAIL                          */
*           ELSE                                                   1070
*             DO;                   /* IS O.K.                       */
         B     @RC01061                                            1070
@RF01061 DS    0H                                                  1071
*               IF ASMDUPLX=YES THEN                               1071
         L     @14,CVTPTR                                          1071
         L     @14,ASMVTPTR(,@14)                                  1071
         TM    ASMDUPLX(@14),B'10000000'                           1071
         BNO   @RF01071                                            1071
*                 DO;               /* DUPLEXING THIS IPL?           */
*                   PENTRY=DPLTPTR; /* CHANGE PARM TO DUPLEX D.S   1073
*                                      ENTRY                         */
         L     @14,DPLTPTR                                         1073
         ST    @14,PENTRY                                          1073
*                   R1=ADDR(READPARM);/* PARM TO ILRPREAD            */
         LA    R1,READPARM                                         1074
*                   CALL ILRPREAD;  /* CALL ILRPREAD                 */
         L     @15,RDWTPTR                                         1075
         BALR  @14,@15                                             1075
*                   IF R15^=ZERO THEN                              1076
         LTR   R15,R15                                             1076
         BZ    @RF01076                                            1076
*                     DO;           /* FAIL?                         */
*                       RFY                                        1078
*                         R15 UNRSTD;                              1078
*                       MSGID=M942I;/* DUPLEX HAS BAD TIMESTAMP      */
         MVC   MSGID(4),@CC02579                                   1079
*                       MSGDATA1=ADDR(BADCLCK);/* PART OF MESSAGE    */
         LA    @08,BADCLCK                                         1080
         ST    @08,MSGDATA1                                        1080
*                       R1=ADDR(MSGPL);/* PARM TO ILRIMMSG           */
         LA    R1,MSGPL                                            1081
*                       CALL ILRIMMSG;/* MESSAGE MODULE              */
         L     @15,@CV02592                                        1082
         BALR  @14,@15                                             1082
*                       DPLTPTR->TPARENT=''B;/* ZERO DUPLEX D.S.   1083
*                                      ENTRY                         */
         L     @08,DPLTPTR                                         1083
         XC    TPARENT(96,@08),TPARENT(@08)                        1083
*                       DPLTPTR->TPAEDPLX=ON;/* FLAG AS DUPLEX       */
         OI    TPAEDPLX(@08),B'00100000'                           1084
*                       DPLTPTR->TPAESKIP=ON;/* FLAG AS ENTRY TO SKIP*/
         OI    TPAESKIP(@08),B'00010000'                           1085
*                       ASMDUPLX=NO;/* DUPLEXING NO MORE             */
         L     @08,CVTPTR                                          1086
         L     @08,ASMVTPTR(,@08)                                  1086
         NI    ASMDUPLX(@08),B'01111111'                           1086
*                     END;          /* FAIL                          */
*                   ELSE                                           1088
*                     ;             /* O.K.                          */
@RF01076 DS    0H                                                  1089
*                 END;              /* DUPLEXING THIS IPL            */
*               ELSE                                               1090
*                 ;                 /* NOT DUPLEXING THIS IPL        */
@RF01071 DS    0H                                                  1091
*             END;                  /* COMMON WRITE O.K.             */
*         END;                      /* COLD START                    */
*       ELSE                                                       1093
*         ASMQUICK=ON;              /* QUICK START (MARK IN ASMVT)   */
         B     @RC01042                                            1093
@RF01042 L     @08,CVTPTR                                          1093
         L     @08,ASMVTPTR(,@08)                                  1093
         OI    ASMQUICK(@08),B'00001000'                           1093
*     END;                          /* COLD OR QUICK(CVIO START      */
@RC01042 DS    0H                                                  1095
*                                                                  1095
*/********************************************************************/
*/*                                                                  */
*/* MOVEPCT: SEGMENT TO MOVE PCT'S TO SQA AREA AND UPDATE POINTERS   */
*/*          IN ILRTPARB ENTRIES                                     */
*/*                                                                  */
*/* INPUT: DEVTAB - HARDCODED AREA IN ILRASRIM WHOSE ENTRIES ARE PCTS*/
*/*        ILRTPARB                                                  */
*/*                                                                  */
*/* PROCESS: ENTRY FROM TIMESTMP.  LOOP THROUGH ILRTPARB FOR EACH    */
*/*          DEVTAB ENTRY (PCT).  CHANGE POINTER TO PCT FOR          */
*/*          ALL ILRTPARB ENTRIES THAT ARE THIS DEVICE.              */
*/*             PCTS WILL BE CHAINED AND ADDRESS OF FIRST IN ILRTPARB*/
*/*                                                                  */
*/* OUTPUT: PCTS FOR THIS IPL IN SQA, CHAINED(FAST TO SLOW DEVICE    */
*/*            ORDER), AND POINTED TO BY ILRTPARB                    */
*/*         ILRTPARB ENTRIES POINT TO PCTS IN SQA                    */
*/*                                                                  */
*/********************************************************************/
*/*MOVEPCT: CHART                                                    */
*/*HEADER                                                          1095
*/*  MOVEPCT SEGMENT                                                 */
*/*MOVEPCT: E ENTRY TO COPY PCT'S                                    */
*/*         L UNCONDITIONAL GETMAIN AREA FOR ALL PCT'S               */
*/*         P ADDRESS OF PCT AREA IN TPARPCTQ                        */
*/*         P SAVE END ADDRESS OF PCT AREA                           */
*/*         P POINT TO FIRST DEVTAB ENTRY                            */
*/*%A1:     P POINT TO FIRST ILRTPARB ENTRY                          */
*/*         P MATCH INDICATOR IS OFF                                 */
*/*%A2:     D (YES,,NO,%A3) DEVICE TYPE MATCH?                       */
*/*         D (YES,,NO,%A4) FIRST MATCH?                             */
*/*         P MATCH INDICATOR IS ON                                  */
*/*         P COPY PCT FROM DEVTAB TO SQA                            */
*/*         P FILL IN NEXT PCT ADDRESS                               */
*/*%A4:     P UPDATE PCT ADDRESS IN ILRTPARB ENTRY                   */
*/*%A3:     P NEXT ILRTPARB ENTRY                                    */
*/*         D (NO,,YES,%A2) MORE ILRTPARB ENTRIES?                   */
*/*         P NEXT DEVTAB ENTRY                                      */
*/*         D (YES,,NO,%A5) MORE DEVTAB ENTRIES?                     */
*/*         P (,%A1) NEXT PCT AREA                                   */
*/*%A5:     P MARK PCT AS END OF PCT CHAIN                           */
*/*         P CALCULATE REMAINDER OF PCT AREA                        */
*/*         L FREEMAIN REMAINDER OF PCT AREA                         */
*/*         R FLOW CONTINUES AT BLDPART                              */
*/*MOVEPCT: END                                                      */
*                                                                  1095
*                                                                  1095
*   /*****************************************************************/
*   /*                                                               */
*   /* MOVEPCT                                                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1095
*   ENDPTR=ZERO;                    /* ZERO LENGTH                   */
@RC01027 SLR   ENDPTR,ENDPTR                                       1095
*   DO I=1 TO DVTHEC BY 1;          /* TOTAL PCT LENGTH              */
         LA    I,1                                                 1096
         B     @DE01096                                            1096
@DL01096 DS    0H                                                  1097
*     ENDPTR=ENDPTR+DVTLNG(I);      /* ADD LENGTH OF PCT             */
         LR    @08,I                                               1097
         SLA   @08,2                                               1097
         AL    ENDPTR,DVTLNG-4(@08)                                1097
*   END;                            /* TOTAL PCT LENGTH              */
         AL    I,@CF00059                                          1098
@DE01096 CH    I,DVTHEC                                            1098
         BNH   @DL01096                                            1098
*   RFY                                                            1099
*     R0 RSTD;                                                     1099
*   R0=ENDPTR;                      /* LENGTH TO GETMAIN             */
         LR    R0,ENDPTR                                           1100
*   DO;                             /* GETMAIN (RU) LV(R0)         1101
*                                      SP(SQASPID)                   */
*     RESPECIFY                                                    1102
*      (GPR01F,                                                    1102
*       GPR15F,                                                    1102
*       GPR00F) RESTRICTED;                                        1102
*     GPR01F=0;                     /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       1103
*     GPR15F=2;                     /* RU-TYPE GETMAIN               */
         LA    GPR15F,2                                            1104
*     GPR00F=R0;                    /* LENGTH REQUESTED              */
*     GPR15F=GPR15F×((SQASPID)*256);/* SP IN BYTE 2                  */
         O     GPR15F,@CF02881                                     1106
*     SVC(120);                     /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 1107
*     RESPECIFY                                                    1108
*      (GPR01F,                                                    1108
*       GPR15F,                                                    1108
*       GPR00F) UNRESTRICTED;                                      1108
*   END;                            /* GETMAIN (RU) LV(R0)         1109
*                                      SP(SQASPID)                   */
*   RFY                                                            1110
*     R0 UNRSTD;                                                   1110
*   PCTPTR=R1;                      /* 1ST PCT IN SQA                */
         ST    R1,PCTPTR                                           1111
*   ENDPTR=PCTPTR+ENDPTR;           /* END OF AREA GOTTEN            */
         L     @06,PCTPTR                                          1112
         ALR   ENDPTR,@06                                          1112
*   SCHPTR=ADDR(DVTENT);            /* 1ST DEVTAB PCT                */
         LA    SCHPTR,DVTENT                                       1113
*   DO J=1 TO DVTHEC;               /* EVERY DEVTAB PCT              */
         LA    J,1                                                 1114
         B     @DE01114                                            1114
@DL01114 DS    0H                                                  1115
*     TPAEPTR=ADDR(TPARPENT);       /* 1ST ILRTPARB ENTRY            */
         L     @06,TPARPTR                                         1115
         LA    @03,TPARPENT(,@06)                                  1115
         ST    @03,TPAEPTR                                         1115
*     ENTRIES=TPARUSE;              /* ALL TPARB ENTRIES             */
         L     @06,TPARUSE(,@06)                                   1116
         STH   @06,ENTRIES                                         1116
*     MATCH=NO;                     /* USE TO MARK FIRST MATCH OF DEV*/
         NI    MATCH,B'01111111'                                   1117
*     DO WHILE ENTRIES^=ZERO;       /* SEARCH ALL ILRTPARB ENTRIES   */
         B     @DE01118                                            1118
@DL01118 DS    0H                                                  1119
*       IF TPAEPCT=SCHPTR THEN                                     1119
         L     @06,TPAEPTR                                         1119
         C     SCHPTR,TPAEPCT(,@06)                                1119
         BNE   @RF01119                                            1119
*         DO;                       /* FOUND RIGHT PCT?              */
*           IF MATCH=NO THEN                                       1121
         TM    MATCH,B'10000000'                                   1121
         BNZ   @RF01121                                            1121
*             DO;                   /* 1ST TIME FOUND?               */
*               MATCH=YES;          /* MARK AS FOUND                 */
         OI    MATCH,B'10000000'                                   1123
*               RFY                                                1124
*                (R0,                                              1124
*                 R14,                                             1124
*                 R15) RSTD;                                       1124
*               R0=PCTPTR;          /* SQA POINTER                   */
         L     R0,PCTPTR                                           1125
*               R14=SCHPTR;         /* HARDCODED PCT POINTER         */
         LR    R14,SCHPTR                                          1126
*               R1=DVTLNG(J);       /* LENGTH OF PCT                 */
         LR    @06,J                                               1127
         SLA   @06,2                                               1127
         L     R1,DVTLNG-4(@06)                                    1127
*               R15=R1;             /* LENGTH OF PCT                 */
         LR    R15,R1                                              1128
*               MVCL(R0,R14);       /* COPY HARDCODED PCT TO SQA     */
         MVCL  R0,R14                                              1129
*               RFY                                                1130
*                (R0,                                              1130
*                 R14,                                             1130
*                 R15) UNRSTD;                                     1130
*               PCTNEXT=TPARPCTQ;   /* CHAIN TO PREVIOUS SQA PCT     */
         L     @06,PCTPTR                                          1131
         L     @03,TPARPTR                                         1131
         L     @00,TPARPCTQ(,@03)                                  1131
         ST    @00,PCTNEXT(,@06)                                   1131
*               TPARPCTQ=PCTPTR;    /* FASTEST DEVICE PCT IN TPARB   */
         ST    @06,TPARPCTQ(,@03)                                  1132
*               PCTPTR=PCTPTR+DVTLNG(J);/* NEXT SQA PTR              */
         LR    @03,J                                               1133
         SLA   @03,2                                               1133
         AL    @06,DVTLNG-4(@03)                                   1133
         ST    @06,PCTPTR                                          1133
*             END;                  /* 1ST TIME FOUND                */
*           ELSE                                                   1135
*             ;                     /* MORE TIMES FOUND - NO COPY    */
@RF01121 DS    0H                                                  1136
*           TPAEPCT=TPARPCTQ;       /* POINT TO LAST SQA PCT BUILT   */
         L     @06,TPARPTR                                         1136
         L     @06,TPARPCTQ(,@06)                                  1136
         L     @03,TPAEPTR                                         1136
         ST    @06,TPAEPCT(,@03)                                   1136
*         END;                      /* FOUND RIGHT PCT               */
*       ELSE                                                       1138
*         ;                         /* NOT RIGHT PCT                 */
@RF01119 DS    0H                                                  1139
*       TPAEPTR=TPAEPTR+LENGTH(TPARENT);/* NEXT TPARB ENTRY          */
         LA    @06,96                                              1139
         AL    @06,TPAEPTR                                         1139
         ST    @06,TPAEPTR                                         1139
*       ENTRIES=ENTRIES-ONE;        /* ONE ENTRY SEARCHED            */
         LH    @06,ENTRIES                                         1140
         BCTR  @06,0                                               1140
         STH   @06,ENTRIES                                         1140
*     END;                          /* SEARCH ALL ILRTPARB ENTRIES   */
@DE01118 LH    @06,ENTRIES                                         1141
         LTR   @06,@06                                             1141
         BNZ   @DL01118                                            1141
*     SCHPTR=SCHPTR+DVTLNG(J);      /* NEXT DEVTAB ENTRY (PCT)       */
         LR    @06,J                                               1142
         SLA   @06,2                                               1142
         AL    SCHPTR,DVTLNG-4(@06)                                1142
*   END;                            /* EVERY DEVTAB PCT              */
         AL    J,@CF00059                                          1143
@DE01114 CH    J,DVTHEC                                            1143
         BNH   @DL01114                                            1143
*   IF PCTPTR^=ENDPTR THEN                                         1144
         L     @08,PCTPTR                                          1144
         CR    @08,ENDPTR                                          1144
         BE    @RF01144                                            1144
*     DO;                           /* GETMAIN AREA LEFT OVER?       */
*       PCTPTR=((PCTPTR+SEVEN)/EIGHT)*EIGHT;/* DWORD BOUNDARY TO FREE*/
         LR    @02,@08                                             1146
         AL    @02,@CF00061                                        1146
         SRDA  @02,32                                              1146
         D     @02,@CF00056                                        1146
         SLA   @03,3                                               1146
         ST    @03,PCTPTR                                          1146
*       DO;                         /* FREEMAIN(RU)                1147
*                                      LV(ENDPTR-PCTPTR)A(PCT)     1147
*                                      SP(SQASPID)                   */
*         RESPECIFY                                                1148
*          (GPR01F,                                                1148
*           GPR15F,                                                1148
*           GPR00F) RESTRICTED;                                    1148
*         GPR01F=0;                 /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       1149
*         GPR15F=3;                 /* SET TYPE                      */
         LA    GPR15F,3                                            1150
*         GPR00F=ENDPTR-PCTPTR;     /* LENGTH REQUESTED              */
         LR    GPR00F,ENDPTR                                       1151
         SLR   GPR00F,@03                                          1151
*         GPR01F=ADDR(PCT);         /* SET REGISTER ONE              */
         LR    GPR01F,@03                                          1152
*         GPR15F=GPR15F+((SQASPID)*256);/* SUBPOOL VALUE             */
         AL    GPR15F,@CF02881                                     1153
*         SVC(120);                 /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 1154
*         RESPECIFY                                                1155
*          (GPR01F,                                                1155
*           GPR15F,                                                1155
*           GPR00F) UNRESTRICTED;                                  1155
*       END;                        /* FREEMAIN(RU)                1156
*                                      LV(ENDPTR-PCTPTR)A(PCT)     1156
*                                      SP(SQASPID)                   */
*     END;                          /* GETMAIN AREA LEFT OVER        */
*   ELSE                                                           1158
*     ;                             /* NO AREA LEFT OVER             */
@RF01144 DS    0H                                                  1159
*                                                                  1159
*/********************************************************************/
*/*                                                                  */
*/* BLDPART: SEGMENT TO BUILD ILRPART FROM ILRTPARB                  */
*/*                                                                  */
*/* INPUT: ILRTPARB                                                  */
*/*        PLPASUSE COUNT AND DUPXSUSE COUNT                         */
*/*        IHANVT,ILRASMVT                                           */
*/*                                                                  */
*/* PROCESS: OBTAIN AREA FOR ILRPART. MOVE MOST INFORMATION IN       */
*/*          ILRTPARB ENTRY TO ILRPART ENTRY. ILRPART WILL NOT HAVE  */
*/*          THE DATA SET NAMES AND WILL ONLY HAVE ENOUGH ENTRIES    */
*/*          FOR THIS IPL.  CHAIN THE ILRPART ENTIES TOGETHER IN     */
*/*          ORDER TO PRODUCE BEST PERFORMANCE IN EXECUTING PAGING.  */
*/*                                                                  */
*/* OUTPUT: ILRPART INITIALIZED COMPLETELY                           */
*/*                                                                  */
*/********************************************************************/
*/*BLDPART: CHART                                                    */
*/*HEADER                                                          1159
*/*  BLDPART SEGMENT                                                 */
*/*BLDPART: E ENTRY TO BUILD ILRPART                                 */
*/*         L UNCONDITIONAL GETMAIN CORRECT AREA FOR PART            */
*/*         P ZERO SPACE                                             */
*/*         P ADDRESS OF PART IN ASMVT                               */
*/*         P ADDRESS OF TPAR IN PART                                */
*/*         P FILL IN BURST TIME (ASMVT)                             */
*/*         P FILL IN ASM BURST TIME (ASMVT)                         */
*/*         P FILL IN PART HEADER                                    */
*/*         P POINT TO FIRST ENTRY IN BOTH TPARB AND PART            */
*/*%A1:     D (YES,,NO,%A2) MORE TPARB ENTRIES?                      */
*/*         P NUMBER PART ENTRY                                      */
*/*         D (YES,,NO,%A3) SKIP FLAG IN TPARB ON?                   */
*/*         P MARK ENTRY NOT IN USE                                  */
*/*         P (,%A5) MARK PART ENTRY AS DUPLEX'S                     */
*/*%A3:     P FILL IN MOST OF PART ENTRY                             */
*/*         D (YES,,NO,%A4) DUPLEX ENTRY IN TPARB?                   */
*/*         P MARK PART ENTRY AS DUPLEX'S                            */
*/*         P DECREASE AVAILABLE SLOTS (DUPLEX USE)                  */
*/*         P (,%A5) FILL IN WRITE QUEUE ADDRESS                     */
*/*%A4:     D (YES,,NO,%A6) PLPA ENTRY IN TPARB?                     */
*/*         P MARK PART ENTRY AS PLPA'S                              */
*/*         P DECREASE AVAILABLE SLOTS (PLPA USE COUNT)              */
*/*         D (YES,,NO,%A5) COLD START?                              */
*/*         P (,%A5) FILL IN WRITE QUEUE ADDRESS (COMMON)            */
*/*%A6:     D (YES,,NO,%A7) COMMON ENTRY IN TPARB?                   */
*/*         P MARK PART ENTRY AS COMMON'S                            */
*/*         D (NO,,YES,%A5) COLD START?                              */
*/*         P (,%A5) FILL IN WRITE QUEUE ADDRESS                     */
*/*%A7:     P MARK PART ENTRY AS A LOCAL                             */
*/*         P FILL IN WRITE QUEUE ADDRESS                            */
*/*%A5:     P NEXT TPAR ENTRY                                        */
*/*         P (,%A1) NEXT PART ENTRY                                 */
*/*%A2:     P CHAIN PART ENTRIES                                     */
*/*         D (YES,,NO,%A8) COLD START?                              */
*/*         R FLOW CONTINUES AT QSRTPARB                             */
*/*%A8:     R FLOW CONTINUES AT INITSART                             */
*/*BLDPART: END                                                      */
*                                                                  1159
*                                                                  1159
*   /*****************************************************************/
*   /*                                                               */
*   /* BLDPART                                                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1159
*   IF TPARUSE+TPAREXPD>ENTSTPAR THEN                              1159
         LA    @08,64                                              1159
         L     @15,TPARPTR                                         1159
         L     @00,TPARUSE(,@15)                                   1159
         AL    @00,TPAREXPD(,@15)                                  1159
         CR    @00,@08                                             1159
         BNH   @RF01159                                            1159
*     ENTRIES=ENTSTPAR;             /* SET TO MAXIMUM ENTRIES        */
         STH   @08,ENTRIES                                         1160
*   ELSE                                                           1161
*     ENTRIES=TPARUSE+TPAREXPD;     /* NUMBER OF ENTRIES TO OBTAIN   */
         B     @RC01159                                            1161
@RF01159 L     @08,TPARPTR                                         1161
         L     @00,TPARUSE(,@08)                                   1161
         AL    @00,TPAREXPD(,@08)                                  1161
         STH   @00,ENTRIES                                         1161
*   RFY                                                            1162
*     R0 RSTD;                                                     1162
@RC01159 DS    0H                                                  1163
*   R0=LENGTH(PARTHDR)+ENTRIES*LENGTH(PARTENT);                    1163
         LH    R0,ENTRIES                                          1163
         SLA   R0,6                                                1163
         AL    R0,@CF00238                                         1163
*   DO;                             /* GETMAIN (RU) LV(R0)         1164
*                                      SP(SQASPID)                   */
*     RESPECIFY                                                    1165
*      (GPR01F,                                                    1165
*       GPR15F,                                                    1165
*       GPR00F) RESTRICTED;                                        1165
*     GPR01F=0;                     /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       1166
*     GPR15F=2;                     /* RU-TYPE GETMAIN               */
         LA    GPR15F,2                                            1167
*     GPR00F=R0;                    /* LENGTH REQUESTED              */
*     GPR15F=GPR15F×((SQASPID)*256);/* SP IN BYTE 2                  */
         O     GPR15F,@CF02881                                     1169
*     SVC(120);                     /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 1170
*     RESPECIFY                                                    1171
*      (GPR01F,                                                    1171
*       GPR15F,                                                    1171
*       GPR00F) UNRESTRICTED;                                      1171
*   END;                            /* GETMAIN (RU) LV(R0)         1172
*                                      SP(SQASPID) GETMAIN PART    1172
*                                      --NEVER FREED                 */
*   PARTPTR=R1;                     /* SAVE RETURNED ADDRESS         */
         LR    PARTPTR,R1                                          1173
*   RFY                                                            1174
*    (R14,                                                         1174
*     R15) RSTD;                    /* ZERO THE PART                 */
*   R0=PARTPTR;                     /* PART ADDRESS                  */
         LR    R0,PARTPTR                                          1175
*   R1=LENGTH(PARTHDR)+ENTRIES*LENGTH(PARTENT);/* LENGTH OF PART     */
         LH    R1,ENTRIES                                          1176
         SLA   R1,6                                                1176
         AL    R1,@CF00238                                         1176
*   R15=ZERO;                                                      1177
         SLR   R15,R15                                             1177
*   MVCL(R0,R14);                   /* ZERO THE PART                 */
         MVCL  R0,R14                                              1178
*   RFY                                                            1179
*    (R0,                                                          1179
*     R14,                                                         1179
*     R15) UNRSTD;                                                 1179
*   ASMPART=PARTPTR;                /* PART ADDRESS IN ASMVT         */
         L     @08,CVTPTR                                          1180
         L     @08,ASMVTPTR(,@08)                                  1180
         ST    PARTPTR,ASMPART(,@08)                               1180
*   PARTIDEN=PARID;                 /* FILL IN PART HEADER           */
         MVC   PARTIDEN(4,PARTPTR),@CC02489                        1181
*   PARTSIZE=ENTRIES;               /* NUMBER OF PART ENTRIES        */
         LH    @08,ENTRIES                                         1182
         ST    @08,PARTSIZE(,PARTPTR)                              1182
*   PARTEUSE=TPARUSE;               /* NUMBER OF ENTRIES IN USE      */
         L     @08,TPARPTR                                         1183
         L     @06,TPARUSE(,@08)                                   1183
         ST    @06,PARTEUSE(,PARTPTR)                              1183
*   PARTLCNT=PARTEUSE-INITUSE;      /* NUMBER OF LOCAL D.S.'S IN USE */
         SL    @06,@CF00092                                        1184
         STH   @06,PARTLCNT(,PARTPTR)                              1184
*   PARTTPAR=TPARPTR;               /* ADDRESS OF ILRTPARB           */
         ST    @08,PARTTPAR(,PARTPTR)                              1185
*   PARTPCTQ=TPARPCTQ;              /* 1ST PCCW IN CHAIN             */
         L     @06,TPARPCTQ(,@08)                                  1186
         ST    @06,PARTPCTQ(,PARTPTR)                              1186
*                                                                  1187
*   /*****************************************************************/
*   /*                                                               */
*   /* FILL IN PART ENTRIES                                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1187
*   TPAEPTR=ADDR(TPARPENT);         /* 1ST TPAR ENTRY                */
         LA    @08,TPARPENT(,@08)                                  1187
         ST    @08,TPAEPTR                                         1187
*   PAREPTR=ADDR(PARTENTS);         /* 1ST PART ENTRY                */
         LA    PAREPTR,PARTENTS(,PARTPTR)                          1188
*   COUNT=ZERO;                     /* COUNT 0 TO ONE LESS THAN IN 1189
*                                      USE                           */
         SLR   @08,@08                                             1189
         STH   @08,COUNT                                           1189
*   DO WHILE COUNT<TPARUSE;         /* DO ALL ENTRIES IN USE         */
         B     @DE01190                                            1190
@DL01190 DS    0H                                                  1191
*     PARENN=COUNT;                 /* PART NUMBER IN ENTRY          */
         LH    @08,COUNT                                           1191
         STH   @08,PARENN(,PAREPTR)                                1191
*     IF TPAESKIP=ON THEN                                          1192
         L     @08,TPAEPTR                                         1192
         TM    TPAESKIP(@08),B'00010000'                           1192
         BNO   @RF01192                                            1192
*       DO;                         /* ENTRY NOT ACTIVE?             */
*         PAREDPLX=ON;              /* IS DUPLEX ENTRY               */
         OI    PAREDPLX(PAREPTR),B'00100000'                       1194
*         PARENUSE=ON;              /* ENTRY NOT REALLY IN USE       */
         OI    PARENUSE(PAREPTR),B'10000000'                       1195
*       END;                        /* ENTRY NOT ACTIVE              */
*     ELSE                                                         1197
*       DO;                         /* ENTRY IS ACTIVE AND IN USE    */
         B     @RC01192                                            1197
@RF01192 DS    0H                                                  1198
*         PAREPCTP=TPAEPCT;         /* PCT ADDRESS FOR DEVICE        */
         L     @06,TPAEPTR                                         1198
         L     @03,TPAEPCT(,@06)                                   1198
         ST    @03,PAREPCTP(,PAREPTR)                              1198
*         PAREPATP=TPAEPATP;        /* PAT ADDRESS FOR DATA SET      */
         L     @00,TPAEPATP(,@06)                                  1199
         ST    @00,PAREPATP(,PAREPTR)                              1199
*         PARESZSL=TPAESZSL;        /* NUMBER OF SLOTS               */
         L     @15,TPAESZSL(,@06)                                  1200
         ST    @15,PARESZSL(,PAREPTR)                              1200
*         PARESLTA=PARESZSL;        /* ALL SLOTS AVAILABLE           */
         ST    @15,PARESLTA(,PAREPTR)                              1201
*         PAREEDBP=TPAEEDB;         /* EDB ADDRESS FOR DATA SET      */
         L     @15,TPAEEDB(,@06)                                   1202
         ST    @15,PAREEDBP(,PAREPTR)                              1202
*         PAREUCBP=TPAEUCB;         /* UCB ADDRESS FOR DATA SET      */
         L     @15,TPAEUCB(,@06)                                   1203
         ST    @15,PAREUCBP(,PAREPTR)                              1203
*         PARERQTM=TPAEPCT->PCTRQTIM;/* SERVICE BURST VALUE          */
         L     @03,PCTRQTIM(,@03)                                  1204
         ST    @03,PARERQTM(,PAREPTR)                              1204
*         PAREIORN=TPAEIORB->IORNUM;/* NUMBER OF IORBS               */
         L     @06,TPAEIORB(,@06)                                  1205
         IC    @03,IORNUM(,@06)                                    1205
         STC   @03,PAREIORN(,PAREPTR)                              1205
*         PAREIORB=TPAEIORB;        /* IORB ADDRESS                  */
         ST    @06,PAREIORB(,PAREPTR)                              1206
*         PAREPATP->PATPART=PAREPTR;/* PAT BACKWARD POINT TO PARTE   */
         LR    @03,@00                                             1207
         ST    PAREPTR,PATPART(,@03)                               1207
*         SCHPTR=PAREIORB;          /* POINT TO FIRST IORB           */
         LR    SCHPTR,@06                                          1208
*         DO M=1 TO PAREIORN;       /* ALL IORBS                     */
         LA    @06,1                                               1209
         B     @DE01209                                            1209
@DL01209 DS    0H                                                  1210
*           SCHPTR->IORPARTE=PAREPTR;/* BACK CHAIN TO PART ENTRY     */
         ST    PAREPTR,IORPARTE(,SCHPTR)                           1210
*           SCHPTR=SCHPTR->IORIORB; /* GET NEXT IORB ADDRESS         */
         L     SCHPTR,IORIORB(,SCHPTR)                             1211
*         END;                      /* ALL IORBS                     */
         AL    @06,@CF00059                                        1212
@DE01209 ST    @06,M                                               1212
         SLR   @03,@03                                             1212
         IC    @03,PAREIORN(,PAREPTR)                              1212
         CR    @06,@03                                             1212
         BNH   @DL01209                                            1212
*         IF TPAELOCL=ON THEN                                      1213
         L     @08,TPAEPTR                                         1213
         TM    TPAELOCL(@08),B'00010000'                           1213
         BNO   @RF01213                                            1213
*           DO;                     /* LOCAL ENTRY?                  */
*             PARELOCL=ON;          /* MARK AS A LOCAL DATA SET      */
         OI    PARELOCL(PAREPTR),B'00010000'                       1215
*             PAREWTQE=ADDR(PARTLOCQ);/* POINT TO LOCAL WRITE      1216
*                                      REQUESTS                      */
         LA    @08,PARTLOCQ(,PARTPTR)                              1216
         ST    @08,PAREWTQE(,PAREPTR)                              1216
*           END;                    /* LOCAL ENTRY                   */
*         ELSE                                                     1218
*           DO;                     /* NOT LOCAL ENTRY               */
         B     @RC01213                                            1218
@RF01213 DS    0H                                                  1219
*             IF TPAEPLPA=ON THEN                                  1219
         L     @08,TPAEPTR                                         1219
         TM    TPAEPLPA(@08),B'10000000'                           1219
         BNO   @RF01219                                            1219
*               DO;                 /* PLPA DATA SET?                */
*                 PAREPLPA=ON;      /* MARK AS PLPA DATA SET         */
         OI    PAREPLPA(PAREPTR),B'10000000'                       1221
*                 PARESLTA=PARESLTA-PLPASUSE;/* SLOTS NOT AVAILABLE  */
         L     @08,PARESLTA(,PAREPTR)                              1222
         SL    @08,PLPASUSE                                        1222
         ST    @08,PARESLTA(,PAREPTR)                              1222
*                 IF NVTFLQS=OFF THEN                              1223
         L     @08,NVTPTR                                          1223
         TM    NVTFLQS(@08),B'00001000'                            1223
         BNZ   @RF01223                                            1223
*                   PAREWTQE=ADDR(PARTCOMQ);/* WRITE PLPA ON COLD  1224
*                                      START                         */
         LA    @08,PARTCOMQ(,PARTPTR)                              1224
         ST    @08,PAREWTQE(,PAREPTR)                              1224
*                 ELSE                                             1225
*                   PAREWTQE=ADDR(PARTSPLQ);/* WRITE COMMON OVERFLOW */
         B     @RC01223                                            1225
@RF01223 LA    @08,PARTSPLQ(,PARTPTR)                              1225
         ST    @08,PAREWTQE(,PAREPTR)                              1225
*               END;                /* PLPA DATA SET                 */
*             ELSE                                                 1227
*               DO;                 /* NOT PLPA DATA SET             */
         B     @RC01219                                            1227
@RF01219 DS    0H                                                  1228
*                 IF TPAECOMM=ON THEN                              1228
         L     @08,TPAEPTR                                         1228
         TM    TPAECOMM(@08),B'01000000'                           1228
         BNO   @RF01228                                            1228
*                   DO;             /* COMMON DATA SET?              */
*                     PARECOMM=ON;  /* MARK AS COMMON DATA SET       */
         OI    PARECOMM(PAREPTR),B'01000000'                       1230
*                     PARESLTA=PARESLTA-COMMSUSE;/* SLOTS NOT      1231
*                                      AVAILABLE                     */
         L     @08,PARESLTA(,PAREPTR)                              1231
         SL    @08,COMMSUSE                                        1231
         ST    @08,PARESLTA(,PAREPTR)                              1231
*                     IF NVTFLQS=ON THEN/* WRITE IF NOT COLD         */
         L     @08,NVTPTR                                          1232
         TM    NVTFLQS(@08),B'00001000'                            1232
         BNO   @RF01232                                            1232
*                       PAREWTQE=ADDR(PARTCOMQ);/* START             */
         LA    @08,PARTCOMQ(,PARTPTR)                              1233
         ST    @08,PAREWTQE(,PAREPTR)                              1233
*                     ELSE                                         1234
*                       ;           /* IS COLD START                 */
@RF01232 DS    0H                                                  1235
*                   END;            /* COMMON DATA SET               */
*                 ELSE                                             1236
*                   DO;             /* NOT COMMON DATA SET           */
         B     @RC01228                                            1236
@RF01228 DS    0H                                                  1237
*                     PAREDPLX=ON;  /* MARK AS DUPLEX DATA SET       */
         OI    PAREDPLX(PAREPTR),B'00100000'                       1237
*                     PARESLTA=PARESLTA-DUPXSUSE;/* SLOTS NOT      1238
*                                      AVAILABLE                     */
         L     @08,PARESLTA(,PAREPTR)                              1238
         SL    @08,DUPXSUSE                                        1238
         ST    @08,PARESLTA(,PAREPTR)                              1238
*                     PAREWTQE=ADDR(PARTDUPQ);/* POINT TO DUPLEX   1239
*                                      WRITE REQS                    */
         LA    @08,PARTDUPQ(,PARTPTR)                              1239
         ST    @08,PAREWTQE(,PAREPTR)                              1239
*                   END;            /* NOT COMMON DATA SET           */
*               END;                /* NOT PLPA DATA SET             */
@RC01228 DS    0H                                                  1242
*           END;                    /* NOT LOCAL ENTRY               */
@RC01219 DS    0H                                                  1243
*       END;                        /* ENTRY IS ACTIVE AND IN USE    */
@RC01213 DS    0H                                                  1244
*     TPAEPTR=TPAEPTR+LENGTH(TPARENT);/* NEXT TPAR ENTRY             */
@RC01192 LA    @08,96                                              1244
         AL    @08,TPAEPTR                                         1244
         ST    @08,TPAEPTR                                         1244
*     PAREPTR=PAREPTR+LENGTH(PARTENT);/* NEXT PART ENTRY             */
         AL    PAREPTR,@CF00054                                    1245
*     COUNT=COUNT+ONE;              /* ONE MORE ENTRY COMPLETE       */
         LH    @08,COUNT                                           1246
         LA    @08,1(,@08)                                         1246
         STH   @08,COUNT                                           1246
*   END;                            /* DO ALL ENTRIES IN USE         */
@DE01190 LH    @08,COUNT                                           1247
         L     @06,TPARPTR                                         1247
         C     @08,TPARUSE(,@06)                                   1247
         BL    @DL01190                                            1247
*                                                                  1248
*   /*****************************************************************/
*   /*                                                               */
*   /* CHAIN THE PART ENTRIES FOR PERFORMANCE GAIN                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1248
*   PAREPTR=ADDR(PARTENTS);         /* PLPA DATA SET                 */
         LA    PAREPTR,PARTENTS(,PARTPTR)                          1248
*   PAREPARE=PAREPTR+LENGTH(PARTENT);/* CHAIN PLPA TO COMMON         */
         LA    @08,64                                              1249
         LR    @06,PAREPTR                                         1249
         ALR   @06,@08                                             1249
         ST    @06,PAREPARE(,PAREPTR)                              1249
*   PAREPTR=PAREPARE;               /* POINT TO COMMON DATA SET      */
         LR    PAREPTR,@06                                         1250
*   IF(PAREPTR+LENGTH(PARTENT))->PARENUSE=OFF/* DUPLEXING?           */
*     THEN                                                         1251
         ALR   @08,PAREPTR                                         1251
         TM    PARENUSE(@08),B'10000000'                           1251
         BNZ   @RF01251                                            1251
*     PAREPARE=PAREPTR+LENGTH(PARTENT);/* CHAIN COMMON TO DUP        */
         ST    @08,PAREPARE(,PAREPTR)                              1252
*   ELSE                                                           1253
*     ;                             /* END CHAIN WITH COMMON D.S.    */
*                                                                  1253
@RF01251 DS    0H                                                  1254
*   /*****************************************************************/
*   /*                                                               */
*   /* TWO CHAINS OF LOCALS                                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1254
*   COUNT=PARTLCNT;                 /* NUMBER OF LOCAL DATA SETS     */
         LH    @08,PARTLCNT(,PARTPTR)                              1254
         STH   @08,COUNT                                           1254
*   PCTPTR=PARTPCTQ;                /* POINT FASTEST DEVICE IN USE   */
         L     @08,PARTPCTQ(,PARTPTR)                              1255
         ST    @08,PCTPTR                                          1255
*   LSTFPTR=ADDR(PARTCIR1);         /* POINT FIRST FIXED DEVICE      */
         LA    @08,PARTCIR1(,PARTPTR)                              1256
         ST    @08,LSTFPTR                                         1256
*   LSTMPTR=ADDR(PARTCIR2);         /* POINT FIRST MOVEABLE DEVICE   */
         LA    @08,PARTCIR2(,PARTPTR)                              1257
         ST    @08,LSTMPTR                                         1257
*   DO WHILE PCTPTR^=ZERO;          /* ALL DEVICES IN USE(FAST -   1258
*                                      SLOW)                         */
         B     @DE01258                                            1258
@DL01258 DS    0H                                                  1259
*     PAREPTR=ADDR(PARTENTS(PARTLOCN+ONE));/* 1ST LOCAL IN PART      */
         LA    PAREPTR,PARTENTS+192(,PARTPTR)                      1259
*     DO K=1 TO COUNT BY ONE;       /* SEARCH ALL LOCALS FOR THIS DEV*/
         LA    K,1                                                 1260
         B     @DE01260                                            1260
@DL01260 DS    0H                                                  1261
*       IF PAREPCTP=PCTPTR THEN                                    1261
         L     @08,PCTPTR                                          1261
         C     @08,PAREPCTP(,PAREPTR)                              1261
         BNE   @RF01261                                            1261
*         DO;                       /* FOUND THAT DEVICE?            */
*           IF PCTDTYPE=D23051ET×PCTDTYPE=D23052ET THEN            1263
         CLC   PCTDTYPE(6,@08),D23051ET                            1263
         BE    @RT01263                                            1263
         CLC   PCTDTYPE(6,@08),D23052ET                            1263
         BNE   @RF01263                                            1263
@RT01263 DS    0H                                                  1264
*             DO;                   /* FIXED?                        */
*               LSTFPTR->NEXTPTR=PAREPTR;/* POINT TO FIXED HEAD ENTRY*/
         L     @08,LSTFPTR                                         1265
         ST    PAREPTR,NEXTPTR(,@08)                               1265
*               LSTFPTR=ADDR(PAREPARE);/* WHERE TO PUT NEXT FIXED    */
         ST    PAREPTR,LSTFPTR                                     1266
*             END;                  /* FIXED HEAD DEVICE FOUND       */
*           ELSE                                                   1268
*             DO;                   /* MOVEABLE HEAD DEVICE FOUND    */
         B     @RC01263                                            1268
@RF01263 DS    0H                                                  1269
*               LSTMPTR->NEXTPTR=PAREPTR;/* POINT TO MOVEABLE HEAD 1269
*                                      ENT                           */
         L     @08,LSTMPTR                                         1269
         ST    PAREPTR,NEXTPTR(,@08)                               1269
*               LSTMPTR=ADDR(PAREPARE);/* WHERE TO PUT NEXT MOVEABLE */
         ST    PAREPTR,LSTMPTR                                     1270
*             END;                  /* MOVEABLE HEAD DEVICE FOUND    */
*         END;                      /* FOUND THAT DEVICE             */
*       ELSE                                                       1273
*         ;                         /* NOT THAT DEVICE               */
@RF01261 DS    0H                                                  1274
*       PAREPTR=PAREPTR+LENGTH(PARTENT);/* TRY NEXT PART ENTRY       */
@RC01261 AL    PAREPTR,@CF00054                                    1274
*     END;                          /* SEARCH ALL LOCALS FOR THIS DEV*/
         AL    K,@CF00059                                          1275
@DE01260 CH    K,COUNT                                             1275
         BNH   @DL01260                                            1275
*     PCTPTR=PCTNEXT;               /* NEXT DEVICE IN USE            */
         L     @08,PCTPTR                                          1276
         L     @08,PCTNEXT(,@08)                                   1276
         ST    @08,PCTPTR                                          1276
*   END;                            /* ALL DEVICES IN USE(FAST -   1277
*                                      SLOW)                         */
@DE01258 L     @08,PCTPTR                                          1277
         LTR   @08,@08                                             1277
         BNZ   @DL01258                                            1277
*   LSTFPTR->NEXTPTR=PARTCIR1;      /* COMPLETE FIXED HEAD CIRCLE    */
         L     @08,PARTCIR1(,PARTPTR)                              1278
         L     @06,LSTFPTR                                         1278
         ST    @08,NEXTPTR(,@06)                                   1278
*   LSTMPTR->NEXTPTR=PARTCIR2;      /* COMPLETE MOVE HEAD CIRCLE     */
*                                                                  1279
         L     @08,PARTCIR2(,PARTPTR)                              1279
         L     @06,LSTMPTR                                         1279
         ST    @08,NEXTPTR(,@06)                                   1279
*   /*****************************************************************/
*   /*                                                               */
*   /* WHERE TO EXECUTE NEXT                                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1280
*   IF NVTFLQS=NO                   /* QSRTPARB DONE BY ILRQSRIT     */
*     THEN                                                         1280
         L     @08,NVTPTR                                          1280
         TM    NVTFLQS(@08),B'00001000'                            1280
         BZ    @RT01280                                            1280
*     GOTO INITSART;                /* COLD START                    */
*   ELSE                                                           1282
*     ;                             /* MUST DO QSRTPARB WORK         */
*                                                                  1283
*/********************************************************************/
*/*                                                                  */
*/* QSRTPARB: SEGMENT TO FREE QSR AND WRITE TPAR TO PLPA DATA SET,   */
*/*           IF QUICK OR WARM START                                 */
*/*                                                                  */
*/* INPUT: ILRQSRCD AND ILRTPARB                                     */
*/*                                                                  */
*/* PROCESS: IF QUICK OR WARM START, FREE AREA OF ILRQSRCD AND WRITE */
*/*          ILRTPARB TO FIRST SLOTS IN PLPA DATA SET. ON COLD       */
*/*          START, ILRQSRIT WRITES ILRTPARB AND ILRQSRCD TOGETHER   */
*/*          TO PLPA DATA SET AND FREES ILRQSRCD STORAGE.            */
*/*                                                                  */
*/* OUTPUT: ILRTPARB COPIED TO PLPA DATA SET       OR NOTHING        */
*/*                                                                  */
*/********************************************************************/
*/*QSRTPARB: CHART                                                   */
*/*HEADER                                                          1283
*/*   QSRTPARB SEGMENT                                               */
*/*QSRTPARB: E ENTRY TO FREE QSR AND WRITE TPARB                     */
*/*          L FREEMAIN ILRQSRCD                                     */
*/*          P PREPARE INPUT TO ILRPREAD                             */
*/*          S ILRPREAD: WRITE TPARB TO PLPA DATA SET                */
*/*          D (YES,,NO,%A1) WRITE FAIL?                             */
*/*          P MARK TPARTBLE AS BAD (ASMVT)                          */
*/*          S ILRIMMSG: ISSUE 'FUTURE IPL'S PROBLEM' MESSAGE        */
*/*          P TURN ON ASMNOTPT --TPARTBLE NO GOOD                   */
*/*%A1:      R FLOW CONTINUES AT INITSART                            */
*/*QSRTPARB: END                                                     */
*                                                                  1283
*                                                                  1283
*   /*****************************************************************/
*   /*                                                               */
*   /* QSRTPARB (QUICK OR WARM)                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1283
*   DO;                             /* FREEMAIN(RU)                1283
*                                      LV(LENGTH(QSR))A(QSR)       1283
*                                      SP(SQASPID)                   */
*     RESPECIFY                                                    1284
*      (GPR01F,                                                    1284
*       GPR15F,                                                    1284
*       GPR00F) RESTRICTED;                                        1284
*     GPR01F=0;                     /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       1285
*     GPR15F=3;                     /* SET TYPE                      */
         LA    GPR15F,3                                            1286
*     GPR00F=LENGTH(QSR);           /* LENGTH REQUESTED              */
         L     GPR00F,@CF02874                                     1287
*     GPR01F=ADDR(QSR);             /* SET REGISTER ONE              */
         L     GPR01F,QSRPTR                                       1288
*     GPR15F=GPR15F+((SQASPID)*256);/* SUBPOOL VALUE                 */
         AL    GPR15F,@CF02881                                     1289
*     SVC(120);                     /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 1290
*     RESPECIFY                                                    1291
*      (GPR01F,                                                    1291
*       GPR15F,                                                    1291
*       GPR00F) UNRESTRICTED;                                      1291
*   END;                            /* FREEMAIN(RU)                1292
*                                      LV(LENGTH(QSR))A(QSR)       1292
*                                      SP(SQASPID)                   */
*   RFY                                                            1293
*     R0 UNRSTD;                                                   1293
*   NVTQSBUF=''B;                   /* NO QSR ADDRESS ANYMORE        */
*                                                                  1294
         SLR   @08,@08                                             1294
         L     @06,NVTPTR                                          1294
         ST    @08,NVTQSBUF(,@06)                                  1294
*   /*****************************************************************/
*   /*                                                               */
*   /* WRITE ILRTPARB TO PLPA DATA SET                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1295
*   PBUFF=TPARPTR;                  /* WHAT TO WRITE                 */
         L     @06,TPARPTR                                         1295
         ST    @06,PBUFF                                           1295
*   PWRITE=ON;                      /* WRITE                         */
*   PTPARB=OFF;                     /* PASS PART ENTRY               */
         OI    PWRITE,B'10000000'                                  1297
         NI    PTPARB,B'10111111'                                  1297
*   PSLOTNO=LENGTH(TPARTBLE)/FOURK; /* SLOTS TO WRITE                */
         MVI   PSLOTNO,X'02'                                       1298
*   PSLOT=''B;                      /* RELATIVE SLOT ZERO            */
         STH   @08,PSLOT                                           1299
*   PENTRY=ADDR(PARTENTS);          /* PLPA PART ENTRY               */
         LA    @08,PARTENTS(,PARTPTR)                              1300
         ST    @08,PENTRY                                          1300
*   R1=ADDR(READPARM);              /* PARM TO ILRPREAD              */
         LA    R1,READPARM                                         1301
*   RFY                                                            1302
*     R15 RSTD;                                                    1302
*   CALL ILRPREAD;                  /* ILRPREAD                      */
         L     @15,RDWTPTR                                         1303
         BALR  @14,@15                                             1303
*   IF R15^=ZERO THEN                                              1304
         LTR   R15,R15                                             1304
         BZ    @RF01304                                            1304
*     DO;                           /* ILRPREAD FAIL?                */
*       RFY                                                        1306
*         R15 UNRSTD;                                              1306
*       MSGID=M944I;                /* QUICK AND WARM RISKY          */
         MVC   MSGID(4),@CC02583                                   1307
*       R1=ADDR(MSGPL);             /* PARM TO ILRIMMSG              */
         LA    R1,MSGPL                                            1308
*       CALL ILRIMMSG;              /* MESSAGE MODULE                */
         L     @15,@CV02592                                        1309
         BALR  @14,@15                                             1309
*       ASMNOTPT=YES;               /* TPARTBLE UNUSEABLE NOW        */
         L     @08,CVTPTR                                          1310
         L     @08,ASMVTPTR(,@08)                                  1310
         OI    ASMNOTPT(@08),B'00010000'                           1310
*     END;                          /* ILRPREAD FAIL                 */
*   ELSE                                                           1312
*     ;                             /* ILRPREAD O.K.                 */
@RF01304 DS    0H                                                  1313
*                                                                  1313
*/********************************************************************/
*/*                                                                  */
*/* INITSART: SEGMENT TO PREPARE TO INITIALIZE SWAP CONTROL BLOCKS   */
*/*                                                                  */
*/* INPUT: HARDCODED ILRSDCT                                         */
*/*        ADDRESS OF NVT                                            */
*/*        DSTBLPTR POINT TO ILRDSTBL                                */
*/*                                                                  */
*/* PROCESS: GETMAIN AREA FOR ILRSDCT ADN COPY HARDCODED ON TO IT.   */
*/*          PARSE SWAP DATA SET NAMES FOUND VIA PARMTAB.  GETMAIN   */
*/*          AREA FOR ILRSART.  IF NO SWAP DATA SETS, ONLY THE       */
*/*          EXPANSION ENTRIES ARE NEEDED, OTHERWISE MAXIMUM SIZE IS */
*/*          OBTAINED (FREE EXTRA AFTER PROCESS DATA SETS)           */
*/*                                                                  */
*/* OUTPUT: ILRSDCT IN SQA                                           */
*/*         SWAP DATA SETS, IF ANY, IN ILRDSTBL                      */
*/*         ILRSART AREA OBTAINED AND SOME UPDATING                  */
*/*                                                                  */
*/********************************************************************/
*/*INITSART: CHART                                                   */
*/*HEADER                                                          1313
*/*  INITSART SEGMENT                                                */
*/*INITSART: E ENTRY TO BEGIN SWAP CONTROL BLOCKS                    */
*/*          P TURN SWAP SWITCH ON                                   */
*/*          S PARSE: SWAP DATA SETS IN ILRDSTBL                     */
*/*          D (YES,,NO,%A1) ANY DATA SETS?                          */
*/*          L UNCONDITIONAL GETMAIN FOR MAXIMUM SART                */
*/*          P ZERO SPACE                                            */
*/*          P COMPLETE SART HEADER                                  */
*/*          P (,%A2) SART ADDRESS IN ASMVT                          */
*/*%A1:      L UNCONDITIONAL GETMAIN FOR EXPANSION ONLY SART         */
*/*          P ZERO SPACE                                            */
*/*          P COMPLETE SART HEADER                                  */
*/*          P SART ADDRESS IN ASMVT                                 */
*/*          D (YES,,NO,%A2) EXPANSION IS ZERO?                      */
*/*          R FLOW CONTINUES AT LGVTSRB                             */
*/*%A2:      L UNCONDITIONAL GETMAIN FOR ILRSDCT                     */
*/*          P COPY HARDCODED SDCT TO AREA                           */
*/*          P SDCT ADDRESS IN SART                                  */
*/*          D (YES,,NO,%A3) ANY DATA SETS?                          */
*/*          R FLOW CONTINUES AT OPENSWAP                            */
*/*%A3:      R FLOW CONTINUES AT INITSCCW                            */
*/*INITSART: END                                                     */
*                                                                  1313
*INITSART:                                                         1313
*   SWAPSW=ON;                      /* DOING SWAP, NOT PAGE          */
INITSART OI    SWAPSW,B'00001000'                                  1313
*/*      MOVE  SDCT TO SQA                                           */
*                                                                  1314
*   DO;                             /* GETMAIN (RU) LV(LENGTH(HSDCT))
*                                      SP(SQASPID)                   */
*     RESPECIFY                                                    1315
*      (GPR01F,                                                    1315
*       GPR15F,                                                    1315
*       GPR00F) RESTRICTED;                                        1315
*     GPR01F=0;                     /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       1316
*     GPR15F=2;                     /* RU-TYPE GETMAIN               */
         LA    GPR15F,2                                            1317
*     GPR00F=LENGTH(HSDCT);         /* LENGTH REQUESTED              */
         LA    GPR00F,128                                          1318
*     GPR15F=GPR15F×((SQASPID)*256);/* SP IN BYTE 2                  */
         O     GPR15F,@CF02881                                     1319
*     SVC(120);                     /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 1320
*     RESPECIFY                                                    1321
*      (GPR01F,                                                    1321
*       GPR15F,                                                    1321
*       GPR00F) UNRESTRICTED;                                      1321
*   END;                            /* GETMAIN (RU) LV(LENGTH(HSDCT))
*                                      SP(SQASPID) AREA FOR SDCT     */
*   SDCTPTR=R1;                     /* SAVE SDCT ADDRESS             */
         ST    R1,SDCTPTR                                          1323
*   MVC(SDCT,HSDCT);                /* COPY HARDCODED TO SQA SDCT    */
         L     @08,SDCTPTR                                         1324
         MVC   SDCT(128,@08),HSDCT                                 1324
*   CALL PARSE;                     /* GET SWAP D.S. SPECIFIED       */
         BAL   @14,PARSE                                           1325
*   IF DSTBLPTR->DSTDSNC=0 THEN     /* NONE SPECIFIED?               */
         L     @08,DSTBLPTR                                        1326
         CLI   DSTDSNC(@08),0                                      1326
         BNE   @RF01326                                            1326
*     NUMBER=SWAPEXP;               /* EXPANDABLE SART ENTRIES       */
         LH    NUMBER,SWAPEXP                                      1327
*   ELSE                                                           1328
*     NUMBER=ENTSART;               /* MAXIMUM SART ENTRIES          */
         B     @RC01326                                            1328
@RF01326 LA    NUMBER,25                                           1328
*   GETREQ=LENGTH(SARTHDR)+(NUMBER*(LENGTH(SARTE)));/* LENGTH OF SART*/
@RC01326 LR    GETREQ,NUMBER                                       1329
         MH    GETREQ,@CH00076                                     1329
         AL    GETREQ,@CF00238                                     1329
*   DO;                             /* GETMAIN (RU) LV(GETREQ)     1330
*                                      SP(SQASPID)                   */
*     RESPECIFY                                                    1331
*      (GPR01F,                                                    1331
*       GPR15F,                                                    1331
*       GPR00F) RESTRICTED;                                        1331
*     GPR01F=0;                     /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       1332
*     GPR15F=2;                     /* RU-TYPE GETMAIN               */
         LA    GPR15F,2                                            1333
*     GPR00F=GETREQ;                /* LENGTH REQUESTED              */
         LR    GPR00F,GETREQ                                       1334
*     GPR15F=GPR15F×((SQASPID)*256);/* SP IN BYTE 2                  */
         O     GPR15F,@CF02881                                     1335
*     SVC(120);                     /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 1336
*     RESPECIFY                                                    1337
*      (GPR01F,                                                    1337
*       GPR15F,                                                    1337
*       GPR00F) UNRESTRICTED;                                      1337
*   END;                            /* GETMAIN (RU) LV(GETREQ)     1338
*                                      SP(SQASPID)                   */
*   SARTPTR=R1;                     /* SAVE SART ADDRESS             */
         ST    R1,SARTPTR                                          1339
*   RFY                                                            1340
*    (R0,                                                          1340
*     R14,                                                         1340
*     R15) RSTD;                    /* ZERO SART                     */
*   R0=SARTPTR;                                                    1341
         L     @08,SARTPTR                                         1341
         LR    R0,@08                                              1341
*   R1=GETREQ;                                                     1342
         LR    R1,GETREQ                                           1342
*   R15=ZERO;                                                      1343
         SLR   R15,R15                                             1343
*   MVCL(R0,R14);                                                  1344
         MVCL  R0,R14                                              1344
*   RFY                                                            1345
*    (R0,                                                          1345
*     R14,                                                         1345
*     R15) UNRSTD;                                                 1345
*   ASMSART=SARTPTR;                /* SART ADDRESS IN ASMVT         */
         L     @08,SARTPTR                                         1346
         L     @15,CVTPTR                                          1346
         L     @15,ASMVTPTR(,@15)                                  1346
         ST    @08,ASMSART(,@15)                                   1346
*   SARSDCT=SDCTPTR;                /* SDCT ADDRESS IN SART          */
         L     @00,SDCTPTR                                         1347
         ST    @00,SARSDCT(,@08)                                   1347
*   SARID=SARTID;                   /* PUT IN IDENTIFIER             */
         MVC   SARID(4,@08),@CC02485                               1348
*   SARSETSZ=SETSZ;                 /* SWAP SET SIZE CONSTANT        */
         MVC   SARSETSZ(4,@08),@CF01569                            1349
*   IF DSTBLPTR->DSTDSNC=0 THEN                                    1350
         L     @15,DSTBLPTR                                        1350
         CLI   DSTDSNC(@15),0                                      1350
         BNE   @RF01350                                            1350
*     DO;                           /* NO SWAP DATA SET SPECIFIED    */
*       SARSIZE=SWAPEXP;            /* TOTAL SIZE IS EXPANSION       */
         LH    @00,SWAPEXP                                         1352
         ST    @00,SARSIZE(,@08)                                   1352
*       GOTO INITSCCW;              /* CREATE SCCW'S                 */
         B     INITSCCW                                            1353
*     END;                          /* NO SWAP DATA SET SPECIFIED    */
*   ELSE                                                           1355
*     ;                             /* SWAP DATA SETS SPECIFIED      */
@RF01350 DS    0H                                                  1356
*                                                                  1356
*/********************************************************************/
*/*                                                                  */
*/* OPENSWAP: SEGMENT TO BUILD ILRSART, OPEN SWAP DATA SETS, AND     */
*/*           BUILD ILRSAT'S.                                        */
*/*                                                                  */
*/* INPUT: ILRDSTBL WITH SWAP DATA SET NAMES                         */
*/*        ILRSART,ILRSDCT, AND ILRTPARB                             */
*/*                                                                  */
*/* PROCESS: LOOP THROUGH ILRDSTBL ATTEMPTING TO OPEN DATA SETS.     */
*/*          IF OPEN, FIND SDCT ENTRY, BUILD SAT, FILL IN SART ENTRY,*/
*/*          FILL IN CONTROL INTERVAL INFO IN TPARB, AND FREEMAIN    */
*/*          REMAINING AREA OF SART.                                 */
*/*                                                                  */
*/* OUTPUT: SART ENTRIES COMPLETE                                    */
*/*         SAT'S COMPLETE                                           */
*/*         TPARB UPDATED WITH SWAP CONTROL INTERVALS                */
*/*                                                                  */
*/********************************************************************/
*/*OPENSWAP: CHART                                                   */
*/*HEADER                                                          1356
*/*  OPENSWAP SEGMENT                                                */
*/*OPENSWAP: E ENTRY TO OPEN SWAP DATA SETS                          */
*/*          P ENTRY COUNT ZEROED                                    */
*/*          P POINT TO FIRST SART AND TPAS ENTRIES                  */
*/*%A1:      D (YES,,NO,%A2) MORE DATA SET NAMES?                    */
*/*          D (YES,,NO,%A4) SART ALREADY FULL?                      */
*/*          S ILRIMMSG: THIS DATA SET INVALID                       */
*/*          P (,%A1) MARK AS NO MORE DATA SETS                      */
*/*%A4:      S OPEN: OPEN DATA SET                                   */
*/*          D (NO,,YES,%E1) SUCCESSFUL OPEN?                        */
*/*          D (YES,,NO,%A5) MOUNT FAIL?                             */
*/*          S ILRIMMSG: SWAP MOUNT FAILED MESSAGE                   */
*/*          D (YES,,NO,%A4) REPLIED 'IGNORE'?                       */
*/*%A6:      P (,%A7) MARK DSTBL ENTRY AS NOT USED                   */
*/*%A5:      N LOCATE FAILED                                         */
*/*          S OPENA: ASK FOR REPLACEMENT DATA SET                   */
*/*%A8:      D (NO,,YES,%A6) 'IGNORE' TO LOCATE FAIL?                */
*/*          N (,%A4) GIVEN NEW NAME                                 */
*/*%E1:      P LOCATE SDCT FOR THIS DEVICE                           */
*/*          P PUT ADDRESS OF SDCT IN SART ENTRY                     */
*/*          P FILL IN OPEN INFO IN SART ENTRY                       */
*/*          P UPDATE COUNTS IN SART HEADER                          */
*/*          P PUT NAME AND CONTROL INTERVAL INFO IN TPAS            */
*/*          P CALCULATE CYLINDERS AND MAP WORDS                     */
*/*          P CALCULATE LENGTH OF SAT                               */
*/*          L UNCONDITIONAL GETMAIN FOR SAT                         */
*/*          P PUT SATPTR IN SART ENTRY                              */
*/*          P ZERO AND FILL IN SAT HEADER                           */
*/*          P COPY DEVICE MASK TO ALL MAP WORDS                     */
*/*          P INCREMENT ENTRY COUNT                                 */
*/*          P LSTPTR THIS SART ENTRY                                */
*/*          P NEXT TPAS ENTRY                                       */
*/*          P NEXT SART ENTRY                                       */
*/*%A7:      P (,%A1) NEXT DSTBL ENTRY                               */
*/*%A2:      D (YES,,NO,%A9) OPEN AT LEAST ONE DATA SET?             */
*/*          P PUT 1ST SART ENTRY ADDRESS IN SART HDR                */
*/*          P POINT LAST ENTRY TO THE FIRST ENTRY                   */
*/*%A9:      P MARK LAST TPAS ENTRY AS LAST                          */
*/*          P CALCULATE SART SIZE                                   */
*/*          L FREEMAIN ANY REMAINING SART                           */
*/*          R FLOW CONTINUES AT INITSCCW                            */
*/*OPENSWAP: END                                                     */
*                                                                  1356
*                                                                  1356
*   /*****************************************************************/
*   /*                                                               */
*   /* OPENSWAP                                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1356
*   PARMFLG=PARMSW;                 /* SET FLAG IN ILROPS00 PARM     */
         MVI   PARMFLG,X'00'                                       1356
*   ENTRIES=0;                      /* INITIALIZE COUNT OF SWAP D.S. */
         SLR   @08,@08                                             1357
         STH   @08,ENTRIES                                         1357
*   DSTEPTR=DSTBLPTR;               /* FIRST SWAP SPECIFIED          */
         L     DSTEPTR,DSTBLPTR                                    1358
*   SAREPTR=ADDR(SARENTS);          /* FIRST ENTRY IN SART           */
         L     @08,SARTPTR                                         1359
         LA    SAREPTR,SARENTS(,@08)                               1359
*   TPASPTR=ADDR(TPARSENT);         /* FIRST TPARB SWAP ENTRY        */
         L     @06,TPARPTR                                         1360
         AL    @06,@CF02914                                        1360
         ST    @06,TPASPTR                                         1360
*   LSTFPTR=ADDR(SARFXDNX);         /* CHAIN FOR FIXED HEAD DEVICES  */
         LA    @06,SARFXDNX(,@08)                                  1361
         ST    @06,LSTFPTR                                         1361
*   LSTMPTR=ADDR(SARMOVNX);         /* CHAIN FOR MOVEABLE HEAD     1362
*                                      DEVICES                       */
         LA    @08,SARMOVNX(,@08)                                  1362
         ST    @08,LSTMPTR                                         1362
*   DO WHILE DSTDSNC^=0;            /* DO WHILE MORE SWAPS SPECIFIED */
         B     @DE01363                                            1363
@DL01363 DS    0H                                                  1364
*     IF SARUSE=ENTSART THEN                                       1364
         L     @08,SARTPTR                                         1364
         CLC   SARUSE(4,@08),@CF00075                              1364
         BNE   @RF01364                                            1364
*       DO;                         /* SART FULL?                    */
*         MSGID=M918I;              /* UNABLE TO PROCESS DATA SET    */
         MVC   MSGID(4),@CC02547                                   1366
*         MSGDATA1=ADDR(DSTDSN);    /* SEND DATA SET NAME            */
         ST    DSTEPTR,MSGDATA1                                    1367
*         FLAGS=SWAPEQ;             /* SWAP DATA SET                 */
         MVI   FLAGS,X'40'                                         1368
*         R1=ADDR(MSGPL);           /* PARM TO MESSAGE MODULE        */
         LA    R1,MSGPL                                            1369
*         CALL ILRIMMSG;            /* MESSAGE MODULE                */
         L     @15,@CV02592                                        1370
         BALR  @14,@15                                             1370
*       END;                        /* SART FULL                     */
*     ELSE                                                         1372
*       DO;                         /* ROOM IN SART                  */
         B     @RC01364                                            1372
@RF01364 DS    0H                                                  1373
*REDOSWAP:                                                         1373
*         PARMDSN=DSTDSN;           /* DATA SET NAME TO OPEN ROUTINE */
REDOSWAP MVC   PARMDSN(44),DSTDSN(DSTEPTR)                         1373
*         RFY                                                      1374
*           R15 RSTD;                                              1374
*         CALL OPEN;                /* OPEN SUBROUTINE               */
         BAL   @14,OPEN                                            1375
*         IF R15^=0 THEN                                           1376
         LTR   R15,R15                                             1376
         BZ    @RF01376                                            1376
*           DO;                     /* NOT OPEN?                     */
*             IF R15=NOVOLMNT THEN                                 1378
         C     R15,@CF00056                                        1378
         BNE   @RF01378                                            1378
*               DO;                 /* MOUNT FAIL?                   */
*                 MSGID=M923D;      /* MOUNT FAIL ON SWAP            */
         MVC   MSGID(4),@CC02555                                   1380
*                 MSGDATA1=ADDR(VOLSER);/* SEND VOLID                */
         LA    @14,PARMDSN                                         1381
         LA    @14,VOLSER(,@14)                                    1381
         ST    @14,MSGDATA1                                        1381
*                 FLAGS=SWAPEQ;     /* SWAP DATA SET                 */
         MVI   FLAGS,X'40'                                         1382
*                 R1=ADDR(MSGPL);   /* SEND PARM TO MESSAGE MODULE   */
         LA    R1,MSGPL                                            1383
*                 CALL ILRIMMSG;    /* MESSAGE MODULE                */
         L     @15,@CV02592                                        1384
         BALR  @14,@15                                             1384
*                 IF R1->MSGBUF(1:LENGTH(IGNORE))^=IGNORE THEN     1385
         CLC   MSGBUF(6,R1),@CC02477                               1385
         BNE   @RT01385                                            1385
*                   GOTO REDOSWAP;  /* SAID TO TRY AGAIN             */
*                 ELSE                                             1387
*                   DSTNUSED=ON;    /* OPERATOR SAID IGNORE          */
         OI    DSTNUSED(DSTEPTR),B'00100000'                       1387
*               END;                /* MOUNT FAILED                  */
*             ELSE                                                 1389
*               DO;                 /* LOCATE FAILED                 */
         B     @RC01378                                            1389
@RF01378 DS    0H                                                  1390
*                 CALL OPENA;       /* ASK FOR A NEW NAME            */
         BAL   @14,OPENA                                           1390
*                 IF R15=IGNORVOL THEN                             1391
         C     R15,@CF00069                                        1391
         BNE   @RF01391                                            1391
*                   DO;             /* NO NEW NAME?                  */
*                     RFY                                          1393
*                       R15 UNRSTD;                                1393
*                     DSTNUSED=ON;  /* MARK AS NOT TO USE            */
         OI    DSTNUSED(DSTEPTR),B'00100000'                       1394
*                   END;            /* NO NEW NAME                   */
*                 ELSE                                             1396
*                   GOTO REDOSWAP;  /* NEW UNIQUE SWAP D.S. NAME     */
*               END;                /* LOCATE FAILED                 */
*           END;                    /* NOT OPEN                      */
*         ELSE                                                     1399
*           DO;                     /* OPENED SUCCESSFUL             */
         B     @RC01376                                            1399
@RF01376 DS    0H                                                  1400
*             SDCTEPTR=ADDR(SDCENTS);/* SEARCH FOR CORRECT SDCTE     */
         L     @08,SDCTPTR                                         1400
         LA    @06,SDCENTS(,@08)                                   1400
         ST    @06,SDCTEPTR                                        1400
*             COUNTER=SDCSIZE;      /* NUMBER TO SEARCH              */
         LH    COUNTER,SDCSIZE(,@08)                               1401
         N     COUNTER,@CF02910                                    1401
*             DO WHILE COUNTER^=0&DEVTYP^=SDCDTYPX;/* FIND OR NO MORE*/
         B     @DE01402                                            1402
@DL01402 DS    0H                                                  1403
*               COUNTER=COUNTER-ONE;/* NOT THIS ONE                  */
         BCTR  COUNTER,0                                           1403
*               SDCTEPTR=SDCTEPTR+LENGTH(SDCTE);/* TRY NEXT SDCTE    */
         LA    @08,20                                              1404
         AL    @08,SDCTEPTR                                        1404
         ST    @08,SDCTEPTR                                        1404
*             END;                  /* FIND OR NO MORE               */
@DE01402 LTR   COUNTER,COUNTER                                     1405
         BZ    @DC01402                                            1405
         LA    @08,PARMDSN                                         1405
         L     @06,SDCTEPTR                                        1405
         CLC   DEVTYP(2,@08),SDCDTYPX(@06)                         1405
         BNE   @DL01402                                            1405
@DC01402 DS    0H                                                  1406
*             IF COUNTER=0 THEN     /* NOT A SUPPORTED DEVICE?       */
         LTR   COUNTER,COUNTER                                     1406
         BNZ   @RF01406                                            1406
*               DSTNUSED=ON;        /* MARK AS NOT TO USE            */
         OI    DSTNUSED(DSTEPTR),B'00100000'                       1407
*                                                                  1408
*             /*******************************************************/
*             /*                                                     */
*             /* FILL IN SART ENTRY ,SART HEADER, TPAS, & CHAIN ENT. */
*             /*                                                     */
*             /*******************************************************/
*                                                                  1408
*             ELSE                                                 1408
*               DO;                 /* DEVICE SUPPORTED              */
         B     @RC01406                                            1408
@RF01406 DS    0H                                                  1409
*                 SRESDCTE=SDCTEPTR;/* PUT SDCTE IN SARTE            */
         L     @06,SDCTEPTR                                        1409
         ST    @06,SRESDCTE(,SAREPTR)                              1409
*                 SRENN=ENTRIES;    /* SARTE # (ZERO ORIGIN)         */
         LH    @06,ENTRIES                                         1410
         STH   @06,SRENN(,SAREPTR)                                 1410
*                 SREIORB=RTNIORBP; /* IORB RETURN FROM OPEN ROUTINE */
         LA    @06,PARMDSN                                         1411
         L     @03,RTNIORBP(,@06)                                  1411
         ST    @03,SREIORB(,SAREPTR)                               1411
*                 SREEDB=RTNEDBP;   /* EDB RETURNED                  */
         L     @00,RTNEDBP(,@06)                                   1412
         ST    @00,SREEDB(,SAREPTR)                                1412
*                 SREUCB=RTNUCBP;   /* UCB RETURNED                  */
         L     @06,RTNUCBP(,@06)                                   1413
         ST    @06,SREUCB(,SAREPTR)                                1413
*                 SCHPTR=SREIORB;   /* POINT TO FIRST IORB           */
         LR    SCHPTR,@03                                          1414
*                 DO UNTIL SCHPTR=0;/* DO ALL IORBS ON CHAIN         */
@DL01415 DS    0H                                                  1416
*                   SCHPTR->IORPARTE=SAREPTR;/* BACK POINT TO SARTE  */
         ST    SAREPTR,IORPARTE(,SCHPTR)                           1416
*                   SCHPTR=SCHPTR->IORIORB;/* POINT TO NEXT IORB     */
         L     SCHPTR,IORIORB(,SCHPTR)                             1417
*                 END;              /* DO ALL IORBS ON CHAIN         */
*                                                                  1418
@DE01415 LTR   SCHPTR,SCHPTR                                       1418
         BNZ   @DL01415                                            1418
*                 /***************************************************/
*                 /*                                                 */
*                 /* CALCULATING NUMBER OF SWAP SETS AVAILABLE.      */
*                 /* CANNOT SIMPLY DIVIDE SLOT NUMBER BY SWAP SET    */
*                 /* SIZE. EXTRA SLOTS IN A CYLINDER ARE NOT USED.   */
*                 /* DROP REMAINDERS.                                */
*                 /*                                                 */
*                 /***************************************************/
*                                                                  1419
*                 SRETOTSL=(SLOTNBR/SDCCYLSZ)*(SDCCYLSZ/SETSZ);/*  1419
*                                      CYLS MULTIPLIED BY SWAP SETS
*                                      PER CYLINDER                  */
         LA    @08,PARMDSN                                         1419
         L     @06,SDCTEPTR                                        1419
         LH    @03,SDCCYLSZ(,@06)                                  1419
         N     @03,@CF02910                                        1419
         L     @05,SLOTNBR(,@08)                                   1419
         SLR   @04,@04                                             1419
         DR    @04,@03                                             1419
         LR    @15,@03                                             1419
         SLR   @14,@14                                             1419
         D     @14,@CF01569                                        1419
         MR    @04,@15                                             1419
         ST    @05,SRETOTSL(,SAREPTR)                              1419
*                 SREAVLSL=SRETOTSL;/* ALL SWAP SETS AVAILABLE       */
         ST    @05,SREAVLSL(,SAREPTR)                              1420
*                 SARSETCT=SARSETCT+SRETOTSL;/* ADD TO ALL SWAP SETS */
         L     @08,SARTPTR                                         1421
         AL    @05,SARSETCT(,@08)                                  1421
         ST    @05,SARSETCT(,@08)                                  1421
*                 SARUSE=SARUSE+ONE;/* ONE MORE SWAP DATA SET        */
         LA    @03,1                                               1422
         AL    @03,SARUSE(,@08)                                    1422
         ST    @03,SARUSE(,@08)                                    1422
*                 IF SDCDEVTP=H23051TP×SDCDEVTP=H23052TP THEN      1423
         CLC   SDCDEVTP(6,@06),H23051TP                            1423
         BE    @RT01423                                            1423
         CLC   SDCDEVTP(6,@06),H23052TP                            1423
         BNE   @RF01423                                            1423
@RT01423 DS    0H                                                  1424
*                   DO;             /* FIXED?                        */
*                     SREFIXED=ON;  /* MARK AS FIXED HEAD DEVICE     */
         OI    SREFIXED(SAREPTR),B'00010000'                       1425
*                     LSTFPTR->NEXTPTR=SAREPTR;/* PUT IN FIXED CHAIN */
         L     @08,LSTFPTR                                         1426
         ST    SAREPTR,NEXTPTR(,@08)                               1426
*                     LSTFPTR=ADDR(SRENEXT);/* NEXT CHAIN ADDRESS  1427
*                                      LOCATION                      */
         ST    SAREPTR,LSTFPTR                                     1427
*                   END;            /* FIXED                         */
*                 ELSE                                             1429
*                   DO;             /* MOVEABLE HEAD DEVICE          */
         B     @RC01423                                            1429
@RF01423 DS    0H                                                  1430
*                     LSTMPTR->NEXTPTR=SAREPTR;/* PUT IN MOVEABLE  1430
*                                      CHAIN                         */
         L     @08,LSTMPTR                                         1430
         ST    SAREPTR,NEXTPTR(,@08)                               1430
*                     LSTMPTR=ADDR(SRENEXT);/* NEXT CHAIN ADDRESS  1431
*                                      LOCATION                      */
         ST    SAREPTR,LSTMPTR                                     1431
*                   END;            /* MOVEABLE HEAD DEVICE          */
*                 TPASDSN=DSTDSN;   /* D.S. IN TPARTBLE FOR TMI      */
*                                                                  1433
@RC01423 L     @06,TPASPTR                                         1433
         MVC   TPASDSN(44,@06),DSTDSN(DSTEPTR)                     1433
*                 /***************************************************/
*                 /*                                                 */
*                 /* BUILD SAT                                       */
*                 /*                                                 */
*                 /***************************************************/
*                                                                  1434
*                 CYLS=SLOTNBR/SDCCYLSZ;/* CYLINDERS IN DATA SET     */
         LA    @06,PARMDSN                                         1434
         L     @15,SDCTEPTR                                        1434
         L     @05,SLOTNBR(,@06)                                   1434
         SLR   @04,@04                                             1434
         LH    CYLS,SDCCYLSZ(,@15)                                 1434
         N     CYLS,@CF02910                                       1434
         DR    @04,CYLS                                            1434
         LR    CYLS,@05                                            1434
*                 CYLMB=1;          /* PREPARE TO MULTIPLY BY EXP    */
         LA    CYLMB,1                                             1435
*                 SLL(CYLMB,SDCMPEXP);/* NUMBER OF BYTES TO MAP CYL
*                                      SAT LENGTH ROUNDED DWORD      */
         SLR   @06,@06                                             1436
         IC    @06,SDCMPEXP(,@15)                                  1436
         SLL   CYLMB,0(@06)                                        1436
*                 LEN=LENGTH(SATHDR)+((CYLS*CYLMB+7)/8)*8;         1437
         LR    @05,CYLMB                                           1437
         MR    @04,CYLS                                            1437
         LR    @14,@05                                             1437
         AL    @14,@CF00061                                        1437
         SRDA  @14,32                                              1437
         D     @14,@CF00056                                        1437
         SLA   @15,3                                               1437
         AL    @15,@CF00120                                        1437
         ST    @15,LEN                                             1437
*                 DO;               /* GETMAIN (RU) LV(LEN)        1438
*                                      SP(SQASPID)                   */
*                   RESPECIFY                                      1439
*                    (GPR01F,                                      1439
*                     GPR15F,                                      1439
*                     GPR00F) RESTRICTED;                          1439
*                   GPR01F=0;       /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       1440
*                   GPR15F=2;       /* RU-TYPE GETMAIN               */
         LA    GPR15F,2                                            1441
*                   GPR00F=LEN;     /* LENGTH REQUESTED              */
         L     @14,LEN                                             1442
         LR    GPR00F,@14                                          1442
*                   GPR15F=GPR15F×((SQASPID)*256);/* SP IN BYTE 2    */
         O     GPR15F,@CF02881                                     1443
*                   SVC(120);       /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 1444
*                   RESPECIFY                                      1445
*                    (GPR01F,                                      1445
*                     GPR15F,                                      1445
*                     GPR00F) UNRESTRICTED;                        1445
*                 END;              /* GETMAIN (RU) LV(LEN)        1446
*                                      SP(SQASPID) SAT AREA          */
*                                                                  1446
*                 /***************************************************/
*                 /*                                                 */
*                 /* USED R1 AS SATPTR TO AVOID A PLS PROBLEM        */
*                 /*                                                 */
*                 /***************************************************/
*                                                                  1447
*                 SRESAT=SATPTR;    /* PUT IN SARTE                  */
         ST    SATPTR,SRESAT(,SAREPTR)                             1447
*                 SATHDR=''B;       /* ZERO SAT HEADER (INIT MAP)    */
         XC    SATHDR(32,SATPTR),SATHDR(SATPTR)                    1448
*                 SATID=SATIDNT;    /* PUT IN IDENTIFIER             */
         MVC   SATID(4,SATPTR),@CC02487                            1449
*                 SATBYTCL=SDCMPEXP;/* EXPONENT OF 2 TO MAP CYL      */
         L     @06,SDCTEPTR                                        1450
         SLR   @00,@00                                             1450
         IC    @00,SDCMPEXP(,@06)                                  1450
         STH   @00,SATBYTCL(,SATPTR)                               1450
*                 SATSARTE=SAREPTR; /* POINT BACK TO SARTE           */
         ST    SAREPTR,SATSARTE(,SATPTR)                           1451
*                 SATMAPLN=CYLS*CYLMB;/* BYTES IN MAP ACTUALLY TO USE*/
         LR    @05,CYLMB                                           1452
         MR    @04,CYLS                                            1452
         STH   @05,SATMAPLN(,SATPTR)                               1452
*                 SATSCAN=ADDR(SATMAPS);/* WHERE TO BEGIN SCAN OF  1453
*                                      MAPS                          */
*                                                                  1453
         LA    @06,SATMAPS(,SATPTR)                                1453
         ST    @06,SATSCAN(,SATPTR)                                1453
*                 /***************************************************/
*                 /*                                                 */
*                 /* INITIALIZE SAT MAP AREA WITH SATCYLMP AND       */
*                 /* SDCCMASK AT FOUR BYTES, LARGEST BYTCL HANDLED IS*/
*                 /* 2. IF EVER A DEVICE WITH LARGER MAP REQUIREMENT */
*                 /* SO BYTCL GREATER THAN 2, NEED TO CHANGE FIELDS. */
*                 /*                                                 */
*                 /***************************************************/
*                                                                  1454
*                 SATCYLA=ADDR(SATMAPS);/* START WITH 1ST SAT MAP    */
         LR    SATCYLA,@06                                         1454
*                 ENDSAT=SATPTR+LEN;/* END OF SAT MAPS               */
         LR    ENDSAT,SATPTR                                       1455
         AL    ENDSAT,LEN                                          1455
*                 DO WHILE SATCYLA<ENDSAT;/* DO ALL SAT MAPS         */
         B     @DE01456                                            1456
@DL01456 DS    0H                                                  1457
*                   SATCYLMP=SDCCMASK;/* MASK THE FIRST MAP(WORD)    */
         L     @06,SDCTEPTR                                        1457
         L     @06,SDCCMASK(,@06)                                  1457
         ST    @06,SATCYLMP(,SATCYLA)                              1457
*                   SATCYLA=SATCYLA+LENGTH(SATCYLMP);/* NEXT       1458
*                                      MAP(WORD)                     */
         AL    SATCYLA,@CF00069                                    1458
*                 END;              /* DO ALL SAT MAPS               */
@DE01456 CR    SATCYLA,ENDSAT                                      1459
         BL    @DL01456                                            1459
*                 TPASPTR=TPASPTR+LENGTH(TPARSENT);/* NEXT TPAS      */
         LA    @08,48                                              1460
         L     @06,TPASPTR                                         1460
         ALR   @06,@08                                             1460
         ST    @06,TPASPTR                                         1460
*                 ENTRIES=ENTRIES+ONE;/* COMPLETED ONE SARTE         */
         LH    @06,ENTRIES                                         1461
         LA    @06,1(,@06)                                         1461
         STH   @06,ENTRIES                                         1461
*                 SAREPTR=SAREPTR+LENGTH(SARTE);/* NEXT SARTE        */
         ALR   SAREPTR,@08                                         1462
*               END;                /* DEVICE SUPPORTED              */
*           END;                    /* OPEN SUCCESSFULLY             */
@RC01406 DS    0H                                                  1465
*       END;                        /* ROOM IN SART                  */
@RC01376 DS    0H                                                  1466
*     DSTEPTR=DSTEPTR+LENGTH(DSTENT);/* NEXT SWAP SPECIFIED          */
@RC01364 AL    DSTEPTR,@CF00076                                    1466
*   END;                            /* DO WHILE MORE SWAPS SPECIFIED */
@DE01363 CLI   DSTDSNC(DSTEPTR),0                                  1467
         BNE   @DL01363                                            1467
*                                                                  1468
*   /*****************************************************************/
*   /*                                                               */
*   /* HOUSEKEEP OF OPENSWAP                                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1468
*   IF SARUSE>0 THEN                                               1468
         L     @08,SARTPTR                                         1468
         L     @03,SARUSE(,@08)                                    1468
         LTR   @03,@03                                             1468
         BNP   @RF01468                                            1468
*     DO;                           /* ANY SWAP DATA SETS COMPLETE?  */
*       LSTFPTR->NEXTPTR=SARFXDNX;  /* COMPLETE FIXED CHAIN CIRCLE   */
         L     @03,SARFXDNX(,@08)                                  1470
         L     @15,LSTFPTR                                         1470
         ST    @03,NEXTPTR(,@15)                                   1470
*       LSTMPTR->NEXTPTR=SARMOVNX;  /* COMPLETE MOVEABLE CHAIN CIRCLE*/
         L     @08,SARMOVNX(,@08)                                  1471
         L     @03,LSTMPTR                                         1471
         ST    @08,NEXTPTR(,@03)                                   1471
*     END;                          /* ANY SWAP DATA SETS COMPLETE   */
*   ELSE                                                           1473
*     ;                             /* NO SWAP DATAS COMPLETED       */
@RF01468 DS    0H                                                  1474
*   ENTLEFT=ENTSART-SARUSE;         /* SARTE'S EMPTY                 */
         L     @08,SARTPTR                                         1474
         L     @15,SARUSE(,@08)                                    1474
         LA    ENTLEFT,25                                          1474
         SLR   ENTLEFT,@15                                         1474
*   IF ENTLEFT>SWAPEXP THEN                                        1475
         LH    @14,SWAPEXP                                         1475
         CR    ENTLEFT,@14                                         1475
         BNH   @RF01475                                            1475
*     DO;                           /* MORE EMPTY THAN EXTRAS NEEDED?*/
*       SARSIZE=SARUSE+SWAPEXP;     /* SIZE OF SART                  */
         ALR   @15,@14                                             1477
         ST    @15,SARSIZE(,@08)                                   1477
*       ENTLEFT=ENTLEFT-SWAPEXP;    /* NOW WHAT LEFT TO FREE         */
         SLR   ENTLEFT,@14                                         1478
*       SAREPTR=SAREPTR+(SWAPEXP*(LENGTH(SARTE)));/* WHAT TO FREE    */
         LA    @08,48                                              1479
         LR    @05,@14                                             1479
         MR    @04,@08                                             1479
         ALR   SAREPTR,@05                                         1479
*       DO;                         /* FREEMAIN(RU) LV(ENTLEFT*LENGTH
*                                      (SARTE))A(SARTE) SP(SQASPID)  */
*         RESPECIFY                                                1481
*          (GPR01F,                                                1481
*           GPR15F,                                                1481
*           GPR00F) RESTRICTED;                                    1481
*         GPR01F=0;                 /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       1482
*         GPR15F=3;                 /* SET TYPE                      */
         LA    GPR15F,3                                            1483
*         GPR00F=ENTLEFT*LENGTH(SARTE);/* LENGTH REQUESTED           */
         LR    @05,@08                                             1484
         MR    @04,ENTLEFT                                         1484
         LR    GPR00F,@05                                          1484
*         GPR01F=ADDR(SARTE);       /* SET REGISTER ONE              */
         LR    GPR01F,SAREPTR                                      1485
*         GPR15F=GPR15F+((SQASPID)*256);/* SUBPOOL VALUE             */
         AL    GPR15F,@CF02881                                     1486
*         SVC(120);                 /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 1487
*         RESPECIFY                                                1488
*          (GPR01F,                                                1488
*           GPR15F,                                                1488
*           GPR00F) UNRESTRICTED;                                  1488
*       END;                        /* FREEMAIN(RU) LV(ENTLEFT*LENGTH
*                                      (SARTE))A(SARTE) SP(SQASPID)  */
*     END;                          /* MORE EMPTY THAN EXTRAS NEEDED */
*   ELSE                                                           1491
*     SARSIZE=ENTSART;              /* SIZE OF SART(MAX)             */
         B     @RC01475                                            1491
@RF01475 L     @08,SARTPTR                                         1491
         MVC   SARSIZE(4,@08),@CF00075                             1491
*                                                                  1492
*/********************************************************************/
*/*                                                                  */
*/* INITSCCW: SEGMENT TO COMPLETE SART AND BUILD SCCW'S              */
*/*                                                                  */
*/* INPUT: SART AND ASMVT                                            */
*/*                                                                  */
*/* PROCESS: IF SARSIZE IS ZERO THERE WILL BE NO SWAP DATA SETS THIS */
*/*          IPL, SO NO SCCW'S ARE CREATED. OTHERWISE, AREA OBTAINED */
*/*          FROM NUCLEUS BUFFER FOR SCCWS.  CALCULATE HOW MANY AND  */
*/*          PUT POINTER OF FIRST IN SART HEADER.  INITIALIZE THE    */
*/*          SCCWS, CHAIN TOGETHER.                                  */
*/*                                                                  */
*/* OUTPUT: COMPLETED SART                                           */
*/*         INITIALIZED SCCW'S                                       */
*/*         ADDRESS OF FIRST SCCW IN SART                            */
*/*                                                                  */
*/********************************************************************/
*/*INITSCCW: CHART                                                   */
*/*HEADER                                                          1492
*/*  INITSCCW SEGMENT                                                */
*/*INITSCCW: E ENTRY TO INIT SCCW'S                                  */
*/*          D (NO,,YES,%A1) MORE SWAP DATA SETS THAN MINIMUM?       */
*/*          P (,%A2) NUMBER IS MINIMUM                              */
*/*%A1:      D (NO,,YES,%A6) LESS SWAP D.S. THAN MAXIMUM?            */
*/*          P (,%A2) NUMBER IS MAXIMUM                              */
*/*%A6:      P NUMBER IS NUMBER OF SWAP DATA SETS                    */
*/*%A2:      P LENGTH OF SCCW MULTIPLIED BY NUMBER                   */
*/*          P GET NUCLEUS BUFFER SPACE FOR SCCW'S                   */
*/*          D (NO,,YES,%A5) ENOUGH NUCLEUS BUFFER SPACE?            */
*/*          S ILRIMMSG: ISSUE MESSAGE IEA340I                       */
*/*          R WAIT STATE 38                                         */
*/*%A5:      P PUT ADDRESS OF FIRST IN SART                          */
*/*%A3:      D (NO,,YES,%A4) NUMBER IS ZERO?                         */
*/*          P FILL IN A SCCW                                        */
*/*          P SAVE THIS SCCW ADDRESS                                */
*/*          P PUT ADDRESS OF NEXT SCCW IN THIS SCCW                 */
*/*          P NEXT SCCW                                             */
*/*          P (,%A3) DECREMENT NUMBER                               */
*/*%A4:      P LAST SCCW POINTS TO ZEROES (END CHAIN)                */
*/*          R FLOW CONTINUES AT LGVTSRB                             */
*/*INITSCCW: END                                                     */
*                                                                  1492
*INITSCCW:                          /* SWAP CHANNEL CONTROL WORDS    */
*   IF SARSIZE^=ZERO THEN                                          1492
@RC01475 DS    0H                                                  1492
INITSCCW L     @08,SARTPTR                                         1492
         L     @00,SARSIZE(,@08)                                   1492
         LTR   @00,@00                                             1492
         BZ    @RF01492                                            1492
*     DO;                           /* NEED TO CREATE SCCWS          */
*       IF SARUSE<=3 THEN                                          1494
         L     @08,SARUSE(,@08)                                    1494
         C     @08,@CF00092                                        1494
         BH    @RF01494                                            1494
*         NUMBER=6;                 /* LOW LIMIT OF SCCW'S?          */
         LA    NUMBER,6                                            1495
*       ELSE                                                       1496
*         IF SARUSE>5 THEN                                         1496
         B     @RC01494                                            1496
@RF01494 L     @08,SARTPTR                                         1496
         L     @08,SARUSE(,@08)                                    1496
         C     @08,@CF01215                                        1496
         BNH   @RF01496                                            1496
*           NUMBER=10;              /* HIGH LIMIT OF SCCW'S?         */
         LA    NUMBER,10                                           1497
*         ELSE                                                     1498
*           NUMBER=2*SARUSE;        /* OTHERWISE 2 FOR EACH D.S.     */
         B     @RC01496                                            1498
@RF01496 L     @08,SARTPTR                                         1498
         L     NUMBER,SARUSE(,@08)                                 1498
         ALR   NUMBER,NUMBER                                       1498
*       LEN=NUMBER*LENGTH(SCCW);    /* LENGTH NEEDED FOR SCCW'S      */
*                                                                  1499
@RC01496 DS    0H                                                  1499
@RC01494 LR    @08,NUMBER                                          1499
         MH    @08,@CH01553                                        1499
         ST    @08,LEN                                             1499
*       /*************************************************************/
*       /*                                                           */
*       /* SAVE ADDRESS OF NEXT AVAILABLE                            */
*       /*                                                           */
*       /*************************************************************/
*                                                                  1500
*       NVTNUCND=(NVTNUCND+SEVEN)/EIGHT*EIGHT;/* ROUND TO DOUBLEWORD */
         L     @06,NVTPTR                                          1500
         LA    @02,7                                               1500
         AL    @02,NVTNUCND(,@06)                                  1500
         SRDA  @02,32                                              1500
         D     @02,@CF00056                                        1500
         SLA   @03,3                                               1500
         ST    @03,NVTNUCND(,@06)                                  1500
*       IF NVTNBFND-NVTNUCND<LEN THEN                              1501
         LCR   @03,@03                                             1501
         AL    @03,NVTNBFND(,@06)                                  1501
         CR    @03,@08                                             1501
         BNL   @RF01501                                            1501
*         DO;                       /* STORAGE SHORT?                */
*           MSGID=M340I;            /* MESSAGE.SHORT OF NUCLEUS    1503
*                                      BUFFER                        */
         MVC   MSGID(4),@CC02541                                   1503
*           R1=ADDR(MSGPL);         /* PARM TO MESSAGE MODULE        */
         LA    R1,MSGPL                                            1504
*           CALL ILRIMMSG;          /* WAIT STATE                    */
         L     @15,@CV02592                                        1505
         BALR  @14,@15                                             1505
*         END;                      /* STORAGE SHORT                 */
*       ELSE                                                       1507
*         ;                         /* CONTINUE                      */
@RF01501 DS    0H                                                  1508
*       SCCWPTR=NVTNUCND;           /* FIRST SCCW IN NUCLEUS BUFFER  */
         L     @08,NVTPTR                                          1508
         L     @06,NVTNUCND(,@08)                                  1508
         LR    SCCWPTR,@06                                         1508
*       NVTNUCND=NVTNUCND+LEN;      /* NEW AVAILABLE POINTER         */
         L     @03,LEN                                             1509
         ALR   @06,@03                                             1509
         ST    @06,NVTNUCND(,@08)                                  1509
*       SARSCCWQ=SCCWPTR;           /* ANCHOR SCCW CHAIN IN SART     */
         L     @08,SARTPTR                                         1510
         ST    SCCWPTR,SARSCCWQ(,@08)                              1510
*       RFY                                                        1511
*        (R0,                                                      1511
*         R14,                                                     1511
*         R15) RSTD;                                               1511
*       R0=SCCWPTR;                 /* START ZEROING HERE            */
         LR    R0,SCCWPTR                                          1512
*       R1=LEN;                     /* ZERO THIS LENGTH              */
         LR    R1,@03                                              1513
*       R15=ZERO;                   /* CHARACTER ZERO                */
         SLR   R15,R15                                             1514
*       MVCL(R0,R14);               /* ZEROED                        */
         MVCL  R0,R14                                              1515
*       DO L=1 TO NUMBER;           /* INITIALIZE ALL SCCW'S         */
         LA    L,1                                                 1516
         B     @DE01516                                            1516
@DL01516 DS    0H                                                  1517
*         R0=SCCWPTR;               /* FILL IN SCCW CONSTANTS        */
         LR    R0,SCCWPTR                                          1517
*         R1=LENGTH(SCCW);          /* LENGTH TO FILL IN             */
         LA    @06,400                                             1518
         LR    R1,@06                                              1518
*         R14=ADDR(SKELETON);       /* WHERE TO GET CONSTANTS        */
         LA    R14,SKELETON                                        1519
*         R15=LENGTH(SKELETON);     /* LENGTH OF CONSTANTS           */
         LR    R15,@06                                             1520
*         MVCL(R0,R14);             /* ACTUAL MOVE OF CONSTANTS      */
         MVCL  R0,R14                                              1521
*         SCCWSROP(1)='31'X;        /* 1ST SEARCH IS NOT MULTI-TRACK */
         MVI   SCCWSROP(SCCWPTR),X'31'                             1522
*         SCCWSKAD=ADDR(SCCWBB);    /* INIT SEEK ARGUMENT            */
         LA    @06,SCCWBB(,SCCWPTR)                                1523
         STCM  @06,7,SCCWSKAD(SCCWPTR)                             1523
*         SCCWSSAD=ADDR(SCCWSECT);  /* INIT SET SECTOR ARGUMENT      */
         LA    @06,SCCWSECT(,SCCWPTR)                              1524
         STCM  @06,7,SCCWSSAD(SCCWPTR)                             1524
*         DO M=1 TO SETSZ;          /* EACH SLOT IN SWAP SET         */
         LA    @06,1                                               1525
         ST    @06,M                                               1525
@DL01525 DS    0H                                                  1526
*           SCCWSRAD(M)=ADDR(SCCWCC(M));/* INIT SEARCH ID ARGUMENT   */
         LR    @03,@06                                             1526
         MH    @03,@CH00063                                        1526
         LR    @05,@06                                             1526
         MH    @05,@CH01215                                        1526
         LA    @05,SCCWCC-5(@05,SCCWPTR)                           1526
         ST    @03,@TF00001                                        1526
         ALR   @03,SCCWPTR                                         1526
         STCM  @05,7,SCCWSRAD-24(@03)                              1526
*           SCCWTIAD(M)=ADDR(SCCWSRCH(M));/* INIT TIC ADDRESS        */
         L     @03,@TF00001                                        1527
         LA    @03,SCCWSRCH-24(@03,SCCWPTR)                        1527
         LR    @05,SCCWPTR                                         1527
         AL    @05,@TF00001                                        1527
         STCM  @03,7,SCCWTIAD-24(@05)                              1527
*         END;                      /* EACH SLOT IN SWAP SET         */
         AL    @06,@CF00059                                        1528
         ST    @06,M                                               1528
         C     @06,@CF01569                                        1528
         BNH   @DL01525                                            1528
*         SCCWLCCW=ADDR(SCCWRW(SETSZ));/* ADDRESS OF LAST CCW IN SCCW*/
         LA    @06,SCCWRW+264(,SCCWPTR)                            1529
         ST    @06,SCCWLCCW(,SCCWPTR)                              1529
*         SCCWSCCW=SCCWPTR+LENGTH(SCCW);/* CHAIN TO NEXT SCCW        */
         LA    @06,400                                             1530
         ALR   @06,SCCWPTR                                         1530
         ST    @06,SCCWSCCW(,SCCWPTR)                              1530
*         SCCWPTR=SCCWSCCW;         /* NEXT SCCW                     */
         LR    SCCWPTR,@06                                         1531
*       END;                        /* INITIALIZE ALL SCCW'S         */
         AL    L,@CF00059                                          1532
@DE01516 CR    L,NUMBER                                            1532
         BNH   @DL01516                                            1532
*       RFY                                                        1533
*        (R0,                                                      1533
*         R14,                                                     1533
*         R15) UNRSTD;                                             1533
*       SCCWPTR=SCCWPTR-LENGTH(SCCW);/* BACK ONE SCCW'S              */
         SL    SCCWPTR,@CF01553                                    1534
*       SCCWSCCW=0;                 /* MARK END OF SCCW CHAIN        */
         SLR   @08,@08                                             1535
         ST    @08,SCCWSCCW(,SCCWPTR)                              1535
*     END;                          /* NEED TO CREATE SCCWS          */
*                                                                  1537
*/********************************************************************/
*/*                                                                  */
*/* LGVTSRB: SEGMENT TO INITIALIZE LGVT AND TWO SRB CONTROL BLOCKS   */
*/*          ALSO DELETE ILROPS00 AND ILRPREAD                       */
*/*                                                                  */
*/* INPUT: POINTER TO BUFFER WITH ILRDSTBL FOLLOWING IT IN SQA       */
*/*        LGVT SIZE AND NUMBER OF ENTRIES                           */
*/*        ILRASMVT                                                  */
*/*                                                                  */
*/* PROCESS: USING BUFFER AREA, BUILD LGVT IN FIRST K OF BUFFER.     */
*/*          INITIALIZE TWO SRBS IN AREA FOLLOWING LGVT. PUT POINTER */
*/*          OF LGVT AND ONE SRB IN ASMVT. PUT POINTER OF OTHER SRB  */
*/*          IN SART. INITIALIZE ALL LGVT ENTRIES AS AVAILABLE.      */
*/*                                                                  */
*/* OUTPUT: POINTER TO LGVT AND ONE SRB IN ILRASMVT                  */
*/*         LGVT AND LGVT ENTRIES INITIALIZED                        */
*/*         POINTER TO OTHER SRB IN ILRSART                          */
*/*         ILROPS00 AND ILRPREAD DELETED                            */
*/*         PLHPTR POINT TO NEXT AVAILABLE SPOT IN AREA              */
*/********************************************************************/
*/*LGVTSRB: CHART                                                    */
*/*HEADER                                                          1537
*/*  LGVTSRB SEGMENT                                                 */
*/*LGVTSRB: E ENTRY TO INITIALIZE LGVT AND SRB'S                     */
*/*         M DELETE ILROPS00 AND ILRPREAD                           */
*/*         P ZERO 8K OF ILRDSTBL AND BUFFER                         */
*/*         P PUT POINTER OF LGVT IN ILRASMVT                        */
*/*         P PUT POINTER OF ON SRB IN ASMVT                         */
*/*         P ENTRY POINT TO ILRPTM00 IN SRB                         */
*/*         P PUT POINTER OF OTHER SRB IN SART                       */
*/*         P ENTRY POINT TO ILRSWPDR IN SRB                         */
*/*         P SAVE POINTER TO NEXT AREA AVAILABLE                    */
*/*         P FILL IN SRB ID'S, ASCB, ASID, PRIOR                    */
*/*         P FILL IN LGVT HEADER                                    */
*/*         P SET ENTRY COUNT TO ZERO                                */
*/*         P POINT TO FIRST ENTRY                                   */
*/*%A1:     P FILL IN ENTRY                                          */
*/*         D (YES,,NO,%A2) COMPLETED LGVTE'S?                       */
*/*         P POINTER TO NEXT LGVTE IS ZERO                          */
*/*         R FLOW CONTINUES AT MSGBUF                               */
*/*%A2:     P INCREMENT ENTRY COUNT                                  */
*/*         P (,%A1) NEXT LGVTE                                      */
*/*LGVTSRB: END                                                      */
*                                                                  1537
*LGVTSRB:                           /* BUILD LGVT & 2 SRB'S          */
*   DO;                             /* DELETE EP('ILROPS00')         */
@RF01492 DS    0H                                                  1537
LGVTSRB  DS    0H                                                  1538
*     RESPECIFY                                                    1538
*      (GPR00P) RESTRICTED;                                        1538
*     GPR00P=ADDR('ILROPS00');      /* ->ENTRY NAME                  */
         LA    GPR00P,@CC02762                                     1539
*     SVC(9);                       /* DELETE SVC                    */
         SVC   9                                                   1540
*     RESPECIFY                                                    1541
*      (GPR00P) UNRESTRICTED;                                      1541
*   END;                            /* DELETE EP('ILROPS00') DONE  1542
*                                      OPENING DATA SETS             */
*   DO;                             /* DELETE EP('ILRPREAD')         */
*     RESPECIFY                                                    1544
*      (GPR00P) RESTRICTED;                                        1544
*     GPR00P=ADDR('ILRPREAD');      /* ->ENTRY NAME                  */
         LA    GPR00P,@CC02764                                     1545
*     SVC(9);                       /* DELETE SVC                    */
         SVC   9                                                   1546
*     RESPECIFY                                                    1547
*      (GPR00P) UNRESTRICTED;                                      1547
*   END;                            /* DELETE EP('ILRPREAD') DONE  1548
*                                      READING AND WRITING           */
*   RFY                                                            1549
*    (R0,                                                          1549
*     R14,                                                         1549
*     R15) RSTD;                    /* USE DSTBL AND BUFFER AREAS    */
*   R0=BUFFPTR;                     /* ZERO STARTING AT DSTBL        */
         L     R0,BUFFPTR                                          1550
*   R1=FOURK+LENGTH(DSTBL);         /* LENGTH                        */
         L     R1,@CF02873                                         1551
*   R15=ZERO;                                                      1552
         SLR   R15,R15                                             1552
*   MVCL(R0,R14);                   /* ZEROED                        */
         MVCL  R0,R14                                              1553
*   RFY                                                            1554
*    (R0,                                                          1554
*     R14,                                                         1554
*     R15) UNRSTD;                                                 1554
*   LGVTPTR=BUFFPTR;                /* LGVT 1ST K IN DSTBL           */
         L     LGVTPTR,BUFFPTR                                     1555
*   ASMLGVT=LGVTPTR;                /* POINTER IN ASMVT              */
         L     @08,CVTPTR                                          1556
         L     @08,ASMVTPTR(,@08)                                  1556
         ST    LGVTPTR,ASMLGVT(,@08)                               1556
*   ASMPSRB=LGVTPTR+LNGLGVT;        /* PTM00 SRB POINTER IN ASMVT    */
         LA    @06,1024                                            1557
         ALR   @06,LGVTPTR                                         1557
         ST    @06,ASMPSRB(,@08)                                   1557
*   SARSRBP=ASMPSRB+LENGTH(SRB);    /* SWAP DR SRB POINTER IN SART   */
         LA    @08,44                                              1558
         LR    @03,@06                                             1558
         ALR   @03,@08                                             1558
         L     @15,SARTPTR                                         1558
         ST    @03,SARSRBP(,@15)                                   1558
*   PLHPTR=SARSRBP+LENGTH(SRB);     /* INITIALIZE SRB'S              */
*                                                                  1559
         ALR   @03,@08                                             1559
         ST    @03,PLHPTR                                          1559
*   /*****************************************************************/
*   /*                                                               */
*   /* INITIALIZE SRBS                                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1560
*   SRBPTR=ASMPSRB;                 /* POINT TO FIRST SRB            */
         LR    SRBPTR,@06                                          1560
*   COUNT=ZERO;                     /* FLAG FOR COMPLETED            */
         SLR   @08,@08                                             1561
         STH   @08,COUNT                                           1561
*   DO WHILE COUNT=ZERO;            /* DO UNTIL FLAG IS ON           */
         B     @DE01562                                            1562
@DL01562 DS    0H                                                  1563
*     SRBID=SRBIDNT;                /* PUT IN IDENT                  */
         MVC   SRBID(4,SRBPTR),@CC02493                            1563
*     SRBASCB=ASCBPTR;              /* MASTER'S ASCB                 */
         L     @08,ASCBPTR                                         1564
         ST    @08,SRBASCB(,SRBPTR)                                1564
*     SRBPRIOR=NONQ;                /* NON- QUIESCABLE PRIORITY      */
         MVI   SRBPRIOR(SRBPTR),X'04'                              1565
*     SRBPASID=ASCBASID;            /* MASTER'S ASID                 */
         LH    @08,ASCBASID(,@08)                                  1566
         N     @08,@CF02910                                        1566
         STH   @08,SRBPASID(,SRBPTR)                               1566
*     SRBRMTR=ASMPSRMT;             /* ADDR OF RMTR TO GET CONTROL   */
         L     @08,CVTPTR                                          1567
         L     @08,ASMVTPTR(,@08)                                  1567
         L     @06,ASMPSRMT(,@08)                                  1567
         ST    @06,SRBRMTR(,SRBPTR)                                1567
*     IF SRBPTR=SARSRBP THEN                                       1568
         L     @06,SARTPTR                                         1568
         C     SRBPTR,SARSRBP(,@06)                                1568
         BNE   @RF01568                                            1568
*       DO;                         /* SWAP DRIVER'S SRB?            */
*         SRBEP=ASMPSWPD;           /* ENTRY POINT IS SWAP DRIVER    */
         L     @08,ASMPSWPD(,@08)                                  1570
         ST    @08,SRBEP(,SRBPTR)                                  1570
*         COUNT=ONE;                /* COMPLETION FLAG ON            */
         MVC   COUNT(2),@CH00059                                   1571
*       END;                        /* SWAP DRIVER'S SRB             */
*     ELSE                                                         1573
*       DO;                         /* ILRPTM00'S SRB                */
         B     @RC01568                                            1573
@RF01568 DS    0H                                                  1574
*         SRBEP=ASMPTM;             /* ENTRY POINT IS ILRPTM         */
         L     @08,CVTPTR                                          1574
         L     @08,ASMVTPTR(,@08)                                  1574
         L     @08,ASMPTM(,@08)                                    1574
         ST    @08,SRBEP(,SRBPTR)                                  1574
*         SRBPTR=SARSRBP;           /* POINT TO SWAP DRIVER SRB      */
         L     @08,SARTPTR                                         1575
         L     SRBPTR,SARSRBP(,@08)                                1575
*       END;                        /* ILRPTM00'S SRB                */
*   END;                            /* DO UNTIL FLAG IS ON           */
*                                                                  1577
@RC01568 DS    0H                                                  1577
@DE01562 LH    @08,COUNT                                           1577
         LTR   @08,@08                                             1577
         BZ    @DL01562                                            1577
*   /*****************************************************************/
*   /*                                                               */
*   /* INITIALIZE LGVT                                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1578
*   LGVIDENT=LGVTID;                /* INITIALIZE LGVT (ID)          */
         MVC   LGVIDENT(4,LGVTPTR),@CC02491                        1578
*   LGVLGVEP=ADDR(LGVENTRS)+LENGTH(LGVTE);/* VIO CANNOT HANDLE A LGID
*                                      OF ZERO --FIRST LGVTE         */
         LA    @08,LGVENTRS(,LGVTPTR)                              1579
         AL    @08,@CF00056                                        1579
         ST    @08,LGVLGVEP(,LGVTPTR)                              1579
*   LGVMAXLG=ENTLGVT-ONE;           /* HIGHEST LGN (ZERO ORIGIN)     */
         MVC   LGVMAXLG(4,LGVTPTR),@CF02512                        1580
*   LGVSIZE=LNGLGVT;                /* SIZE OF LGVT                  */
         MVC   LGVSIZE(4,LGVTPTR),@CF02514                         1581
*   COUNT=ONE;                      /* LGN STARTS AT ZERO            */
         MVC   COUNT(2),@CH00059                                   1582
*   LGVTEPTR=LGVLGVEP;              /* POINT TO FIRST ENTRY TO USE   */
         LR    LGVTEPTR,@08                                        1583
*   DO WHILE COUNT<=LGVMAXLG;       /* DO ALL ENTRIES                */
         B     @DE01584                                            1584
@DL01584 DS    0H                                                  1585
*     LGVENEXT=LGVTEPTR+LENGTH(LGVTE);/* CHAIN ENTRY TO NEXT         */
         LA    @08,8                                               1585
         ALR   @08,LGVTEPTR                                        1585
         ST    @08,LGVENEXT(,LGVTEPTR)                             1585
*     LGVELGID=COUNT;               /* PUT IN LGN                    */
         LH    @15,COUNT                                           1586
         ST    @15,LGVELGID(,LGVTEPTR)                             1586
*     LGVTEPTR=LGVENEXT;            /* NEXT ENTRY                    */
         LR    LGVTEPTR,@08                                        1587
*     COUNT=COUNT+ONE;              /* NEXT LGN                      */
         LA    @15,1(,@15)                                         1588
         STH   @15,COUNT                                           1588
*   END;                            /* DO ALL ENTRIES                */
@DE01584 LH    @08,COUNT                                           1589
         C     @08,LGVMAXLG(,LGVTPTR)                              1589
         BNH   @DL01584                                            1589
*   LGVTEPTR=LGVTEPTR-LENGTH(LGVTE);/* BACK TO LAST ONE BUILT        */
         LA    @08,8                                               1590
         SLR   LGVTEPTR,@08                                        1590
*   LGVENEXT=''B;                   /* CHAIN OF LAST ENTRY IS ZERO   */
         SLR   @06,@06                                             1591
         ST    @06,LGVENEXT(,LGVTEPTR)                             1591
*                                                                  1592
*/********************************************************************/
*/*                                                                  */
*/* MSGBUF: SEGMENT TO INITIALIZE ASM MESSAGE BUFFER                 */
*/*                                                                  */
*/* INPUT: PLHPTR POINTER FROM LGVTSRB SEGMENT                       */
*/*                                                                  */
*/* PROCESS: MOVE PLHPTR DISTANCE OF MESSAGE BUFFER                  */
*/*          INITIALIZE AND CHAIN BUFFER TO ASMVT                    */
*/*                                                                  */
*/* OUTPUT: INITIALIZED BUFFER                                       */
*/*         PLHPTR POINTS TO NEXT AVAILABLE AREA                     */
*/*                                                                  */
*/********************************************************************/
*/*MSGBUF: CHART                                                     */
*/*HEADER                                                          1592
*/*  MSGBUF SEGMENT                                                1592
*/*MSGBUF: E ENTRY TO INITIALIZE BUFFER                              */
*/*        P SET PLHPTR ON DOUBLEWORD BOUNDARY                       */
*/*        P INIT THE POINTS IN MSGBUF HEADER                        */
*/*        N BUFFERS ARE ZERO (AREA ZEROED)                          */
*/*        R FLOW CONTINUES AT BLDCELLS                              */
*/*MSGBUF: END                                                       */
*                                                                  1592
*   PLHPTR=((PLHPTR+SEVEN)/EIGHT)*EIGHT;/* DOUBLEWORD BOUNDARY       */
         LA    @02,7                                               1592
         AL    @02,PLHPTR                                          1592
         SRDA  @02,32                                              1592
         DR    @02,@08                                             1592
         SLA   @03,3                                               1592
         ST    @03,PLHPTR                                          1592
*   ASMMSGBF=PLHPTR;                /* WHERE MSGBUFFER BEGINS        */
         L     @08,CVTPTR                                          1593
         L     @08,ASMVTPTR(,@08)                                  1593
         ST    @03,ASMMSGBF(,@08)                                  1593
*   MSGCURR=ADDR(MSGBFRS);          /* POINT TO FIRST BUFFER         */
         LA    @06,MSGBFRS(,@03)                                   1594
         ST    @06,MSGCURR(,@03)                                   1594
*   MSGFIRST=MSGCURR;               /* CURRENT SET TO FIRST          */
         ST    @06,MSGFIRST(,@03)                                  1595
*   MSGLAST=ADDR(MSGBFRS(DIM(MSGBFRS)));/* POINT TO LAST BUFFER      */
         LA    @06,MSGBFRS+160(,@03)                               1596
         ST    @06,MSGLAST(,@03)                                   1596
*   MSGTERM=ADDR(MSGTBFR);          /* POINT TO TERMINATION BUFFER   */
         LA    @06,MSGTBFR(,@03)                                   1597
         ST    @06,MSGTERM(,@03)                                   1597
*   PLHPTR=PLHPTR+LENGTH(MSGBUFER); /* NEXT AVAILABLE AREA           */
         AL    @03,@CF02432                                        1598
         ST    @03,PLHPTR                                          1598
*                                                                  1599
*/********************************************************************/
*/*                                                                  */
*/* BLDCELLS: SEGMENT TO BUILD CELLPOOLS AND UPDATE ILRASMVT         */
*/*                                                                  */
*/* INPUT: DECLARES WITH FACTS ABOUT CELLS                           */
*/*        ILRASMVT (CELLPOOL AREAS)                                 */
*/*        PLHPTR POINT TO AREA TO BUILD CELLPOOLS                   */
*/*                                                                  */
*/* PROCESS: USE SAME CODE TO BUILD THREE CELLPOOLS (IOE, BWK,       */
*/*          AND ACE).       CALCULATE NUMBER OF IOES NEEDED THIS    */
*/*          IPL. CALCULATE LENGTH OF CELLPOOL AND USE EITHER ROOM   */
*/*          IN REST OF BUFFER AREA AND ILRDSTBL OR DO A GETMAIN FOR */
*/*          THE POOL.  INITIALIZE CELLS.  IF ACE POOL, INITIALIZE   */
*/*          RESERVE CELLS AND COMPLETE ASMVT.                       */
*/*                                                                  */
*/* OUTPUT: ASMVT CELL AREAS INITIALIZED WITH INFORMATION AND POINTER*/
*/*            TO FIRST CELL FOR CELLPOOL                            */
*/*         ASMVT ACE CELLPOOL HAVE A POINTER TO THE FIRST RESERVE   */
*/*            CELL ALSO                                             */
*/*         ALL CELLS INITIALIZED, CORRECT SIZE AND FIRST WORD       */
*/*             POINTING TO NEXT CELL IN CELLPOOL                    */
*/*                                                                  */
*/********************************************************************/
*/*BLDCELLS: CHART                                                   */
*/*HEADER                                                          1599
*/*  BLDCELLS SEGMENT                                                */
*/*BLDCELLS: E ENTRY TO BUILD CELLPOOLS                              */
*/*          P CALCULATE NUMBER OF IOES (CELLNUM)                    */
*/*          P POINT TO REST OF BUFFER AND DSTBL                     */
*/*          P START WITH LAST CELLPOOL                              */
*/*%A4:      P CALCULATE CELLPOOL LENGTH                             */
*/*          D (NO,,YES,%A1) ROOM IN BUFFER?                         */
*/*          P UNCONDITIONAL GETMAIN FOR POOL                        */
*/*          P CLEAR AREA                                            */
*/*%A1:      P FILL IN 8 BYTE HEADER OF CELLPOOL                     */
*/*          P POINT TO FIRST CELL IN CELLPOOL                       */
*/*          P POINT TO CORRECT CELLPOOL IN ASMVT                    */
*/*          P FILL IN ASMVT                                         */
*/*          P SET CELL COUNT TO ZERO                                */
*/*%A2:      D (NO,,YES,%A3) COMPLETED CELLS?                        */
*/*          P POINTER TO NEXT CELL IN THIS CELL                     */
*/*          P SAVE POINTER TO THIS CELL                             */
*/*          P NEXT CELL                                             */
*/*          P (,%A2) INCREMENT CELL COUNT                           */
*/*%A3:      P LAST CELL POINTS TO ZERO                              */
*/*          D (YES,,NO,%A8) RESERVE CELLS?                          */
*/*          P FILL IN ASMVT FOR RESERVE CELLS                       */
*/*          P SET CELL COUNT TO ZERO                                */
*/*%A5:      D (YES,,NO,%A6) COMPLETED RESERVE CELLS?                */
*/*          P POINT TO NEXT CELL IN THIS CELL                       */
*/*          P SAVE POINTER TO THIS CELL                             */
*/*          P NEXT CELL                                             */
*/*          P (,%A5) INCREMENT CELL COUNT                           */
*/*%A6:      P LAST CELL POINTS TO ZERO                              */
*/*%A8:      P DECREMENT CELLPOOL COUNT                              */
*/*          D (NO,,YES,%A4) MORE CELLPOOLS?                         */
*/*          D (YES,,NO,%A7) MORE ROOM IN BUFFER,DSTBL?              */
*/*          P FREE THE EXTRA AREA                                   */
*/*%A7:      R FLOW CONTINUES AT LISTMSG                             */
*/*BLDCELLS: END                                                     */
*                                                                  1599
*                                                                  1599
*   /*****************************************************************/
*   /*                                                               */
*   /* CALCULATE NUMBER OF IOE'S IN IOE POOL                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1599
*   CELLNUM(1)=(ASMPCCWN*IOEMPYN)/IOEMPYD;/* NUMBER OF IOE'S         */
*                                                                  1599
         SLR   @03,@03                                             1599
         IC    @03,IOEMPYN                                         1599
         M     @02,ASMPCCWN(,@08)                                  1599
         SLR   @06,@06                                             1599
         IC    @06,IOEMPYD                                         1599
         DR    @02,@06                                             1599
         ST    @03,CELLNUM                                         1599
*   /*****************************************************************/
*   /*                                                               */
*   /* BUILD CELLPOOLS FROM BUFFER AND DSTBL                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1600
*   ENDPTR=DSTBLPTR+LENGTH(DSTBL);  /* END OF BUFFER AREA            */
         L     ENDPTR,@CF02516                                     1600
         AL    ENDPTR,DSTBLPTR                                     1600
*   POOLADDR(1)=ADDR(ASMIOEPC);     /* FIRST POOL ADDRESS            */
         LA    @06,ASMIOEPC(,@08)                                  1601
         ST    @06,POOLADDR                                        1601
*   POOLADDR(2)=ADDR(ASMBWKPC);     /* SECOND POOL ADDRESS IN ASMVT  */
         LA    @06,ASMBWKPC(,@08)                                  1602
         ST    @06,POOLADDR+4                                      1602
*   POOLADDR(3)=ADDR(ASMACEPC);     /* FOURTH POOL ADDRESS IN ASMVT  */
         LA    @08,ASMACEPC(,@08)                                  1603
         ST    @08,POOLADDR+8                                      1603
*   DO J=DIM(CELLTYP) TO 1 BY-1;    /* ALL CELL POOLS                */
         LA    J,3                                                 1604
@DL01604 DS    0H                                                  1605
*     LEN=LENGTH(CELLTYP)+(POOLADDR(J)->ASMCPSIZ)*(CELLNUM(J)+CELLRESV(
*         J));                      /* LENGTH OF CELL POOL           */
         LR    @08,J                                               1605
         SLA   @08,2                                               1605
         L     @06,POOLADDR-4(@08)                                 1605
         L     @03,CELLNUM-4(@08)                                  1605
         AL    @03,CELLRESV-4(@08)                                 1605
         MH    @03,ASMCPSIZ(,@06)                                  1605
         AL    @03,@CF00056                                        1605
         ST    @03,LEN                                             1605
*     IF PLHPTR+LEN>ENDPTR THEN                                    1606
         L     @08,PLHPTR                                          1606
         ALR   @08,@03                                             1606
         CR    @08,ENDPTR                                          1606
         BNH   @RF01606                                            1606
*       DO;                         /* NOT FIT IN BUFFER,DSTBL?      */
*         DO;                       /* GETMAIN (RU) LV(LEN)        1608
*                                      SP(SQASPID)                   */
*           RESPECIFY                                              1609
*            (GPR01F,                                              1609
*             GPR15F,                                              1609
*             GPR00F) RESTRICTED;                                  1609
*           GPR01F=0;               /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       1610
*           GPR15F=2;               /* RU-TYPE GETMAIN               */
         LA    GPR15F,2                                            1611
*           GPR00F=LEN;             /* LENGTH REQUESTED              */
         LR    GPR00F,@03                                          1612
*           GPR15F=GPR15F×((SQASPID)*256);/* SP IN BYTE 2            */
         O     GPR15F,@CF02881                                     1613
*           SVC(120);               /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 1614
*           RESPECIFY                                              1615
*            (GPR01F,                                              1615
*             GPR15F,                                              1615
*             GPR00F) UNRESTRICTED;                                1615
*         END;                      /* GETMAIN (RU) LV(LEN)        1616
*                                      SP(SQASPID) GET SQA SPACE FOR
*                                      IT                            */
*         SAVEADDR=R1;              /* SAVE ADDRESS OF AREA          */
         LR    SAVEADDR,R1                                         1617
*         RFY                                                      1618
*          (R0,                                                    1618
*           R14,                                                   1618
*           R15) RSTD;                                             1618
*         R0=SAVEADDR;              /* WHERE TO START ZEROING        */
         LR    R0,SAVEADDR                                         1619
*         R1=LEN;                   /* HOW MUCH TO ZERO              */
         L     R1,LEN                                              1620
*         R15=ZERO;                 /* PADDING CHARACTER             */
         SLR   R15,R15                                             1621
*         MVCL(R0,R14);             /* ZERO IT                       */
         MVCL  R0,R14                                              1622
*         RFY                                                      1623
*          (R0,                                                    1623
*           R14,                                                   1623
*           R15) UNRSTD;                                           1623
*         R1=SAVEADDR;              /* PUT ADDRESS IN REGISTER ONE   */
         LR    R1,SAVEADDR                                         1624
*       END;                        /* NOT FIT IN BUFFER,DSTBL       */
*     ELSE                                                         1626
*       DO;                         /* USE BUFFER,DSTBL              */
         B     @RC01606                                            1626
@RF01606 DS    0H                                                  1627
*         R1=PLHPTR;                /* PUT ADDRESS IN REGISTER ONE   */
         L     @08,PLHPTR                                          1627
         LR    R1,@08                                              1627
*         PLHPTR=PLHPTR+LEN;        /* MOVE AVAILABLE AREA POINT     */
         AL    @08,LEN                                             1628
         ST    @08,PLHPTR                                          1628
*       END;                        /* USE BUFFER,DSTBL              */
*     R1->AREA(1:LENGTH(CELLTYP))=CELLTYP(J);/* PUT IN HEADER        */
@RC01606 LR    @08,J                                               1630
         SLA   @08,3                                               1630
         LA    @06,CELLTYP-8(@08)                                  1630
         MVC   AREA(8,R1),0(@06)                                   1630
*     CELLPTR=R1+LENGTH(CELLTYP);   /* 1ST CELL JUST BEYOND HEADER   */
         LA    CELLPTR,8                                           1631
         ALR   CELLPTR,R1                                          1631
*     POOLPTR=POOLADDR(J);          /* POINT TO POOL IN ASMVT        */
         LR    @08,J                                               1632
         SLA   @08,2                                               1632
         L     POOLPTR,POOLADDR-4(@08)                             1632
*     ASMCPAVL=CELLPTR;             /* FIRST AVAILABLE CELL          */
         ST    CELLPTR,ASMCPAVL(,POOLPTR)                          1633
*     DO K=1 TO CELLNUM(J);         /* DO ALL CELLS IN THIS POOL     */
         LA    K,1                                                 1634
         B     @DE01634                                            1634
@DL01634 DS    0H                                                  1635
*       CELLNXT=CELLPTR+ASMCPSIZ;   /* CHAIN TO NEXT CELL            */
         LR    @08,CELLPTR                                         1635
         AH    @08,ASMCPSIZ(,POOLPTR)                              1635
         ST    @08,CELLNXT(,CELLPTR)                               1635
*       LSTPTR=CELLPTR;             /* SAVE ADDRESS OF THIS CELL     */
         ST    CELLPTR,LSTPTR                                      1636
*       CELLPTR=CELLNXT;            /* NEXT CELL                     */
         LR    CELLPTR,@08                                         1637
*     END;                          /* DO ALL CELLS IN THIS POOL     */
         AL    K,@CF00059                                          1638
@DE01634 LR    @08,J                                               1638
         SLA   @08,2                                               1638
         C     K,CELLNUM-4(@08)                                    1638
         BNH   @DL01634                                            1638
*     LSTPTR->CELLNXT=''B;          /* END CHAIN OF CELLS THIS POOL  */
         SLR   @08,@08                                             1639
         L     @06,LSTPTR                                          1639
         ST    @08,CELLNXT(,@06)                                   1639
*     IF CELLRESV(J)^=0 THEN                                       1640
         LR    @08,J                                               1640
         SLA   @08,2                                               1640
         L     @08,CELLRESV-4(@08)                                 1640
         LTR   @08,@08                                             1640
         BZ    @RF01640                                            1640
*       DO;                         /* RESERVE CELLS?                */
*                                                                  1641
*         /***********************************************************/
*         /*                                                         */
*         /* CELLPOOL HAS RESERVE CELLS                              */
*         /*                                                         */
*         /***********************************************************/
*                                                                  1642
*         ASMCPRES=CELLPTR;         /* 1ST AVAILABLE RESERVE CELL    */
         ST    CELLPTR,ASMCPRES(,POOLPTR)                          1642
*         DO K=1 TO CELLRESV(J);    /* DO ALL RESERVE CELLS          */
         LA    K,1                                                 1643
         B     @DE01643                                            1643
@DL01643 DS    0H                                                  1644
*           CELLNXT=CELLPTR+ASMCPSIZ;/* CHAIN TO NEXT CELL           */
         LR    @08,CELLPTR                                         1644
         AH    @08,ASMCPSIZ(,POOLPTR)                              1644
         ST    @08,CELLNXT(,CELLPTR)                               1644
*           LSTPTR=CELLPTR;         /* SAVE THIS CELL ADDRESS        */
         ST    CELLPTR,LSTPTR                                      1645
*           CELLPTR=CELLNXT;        /* NEXT CELL                     */
         LR    CELLPTR,@08                                         1646
*         END;                      /* DO ALL CELLS                  */
         AL    K,@CF00059                                          1647
@DE01643 LR    @08,J                                               1647
         SLA   @08,2                                               1647
         C     K,CELLRESV-4(@08)                                   1647
         BNH   @DL01643                                            1647
*         LSTPTR->CELLNXT=''B;      /* END CHAIN                     */
         SLR   @08,@08                                             1648
         L     @06,LSTPTR                                          1648
         ST    @08,CELLNXT(,@06)                                   1648
*       END;                        /* RESERVE CELLS                 */
*     ELSE                                                         1650
*       ;                           /* NO RESERVE CELLS              */
@RF01640 DS    0H                                                  1651
*   END;                            /* ALL CELL POOLS                */
         BCTR  J,0                                                 1651
         LTR   J,J                                                 1651
         BP    @DL01604                                            1651
*   IF ENDPTR>PLHPTR THEN                                          1652
         L     @08,PLHPTR                                          1652
         CR    ENDPTR,@08                                          1652
         BNH   @RF01652                                            1652
*     DO;                           /* NOT USE ALL OF BUFFER,DSTBL?  */
*       FREEPTR=((PLHPTR+7)/8)*8;   /* WHERE TO START FREEING        */
         LA    FREEPTR,7                                           1654
         ALR   FREEPTR,@08                                         1654
         SRDA  FREEPTR,32                                          1654
         D     FREEPTR,@CF00056                                    1654
         SLA   @03,3                                               1654
         LR    FREEPTR,@03                                         1654
*       DO;                         /* FREEMAIN(RU)                1655
*                                      LV(ENDPTR-PLHPTR)A(FREEAREA)
*                                      SP(SQASPID)                   */
*         RESPECIFY                                                1656
*          (GPR01F,                                                1656
*           GPR15F,                                                1656
*           GPR00F) RESTRICTED;                                    1656
*         GPR01F=0;                 /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       1657
*         GPR15F=3;                 /* SET TYPE                      */
         LA    GPR15F,3                                            1658
*         GPR00F=ENDPTR-PLHPTR;     /* LENGTH REQUESTED              */
         LCR   @08,@08                                             1659
         ALR   @08,ENDPTR                                          1659
         LR    GPR00F,@08                                          1659
*         GPR01F=ADDR(FREEAREA);    /* SET REGISTER ONE              */
         LR    GPR01F,FREEPTR                                      1660
*         GPR15F=GPR15F+((SQASPID)*256);/* SUBPOOL VALUE             */
         AL    GPR15F,@CF02881                                     1661
*         SVC(120);                 /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 1662
*         RESPECIFY                                                1663
*          (GPR01F,                                                1663
*           GPR15F,                                                1663
*           GPR00F) UNRESTRICTED;                                  1663
*       END;                        /* FREEMAIN(RU)                1664
*                                      LV(ENDPTR-PLHPTR)A(FREEAREA)
*                                      SP(SQASPID)                   */
*     END;                          /* NOT USE ALL OF BUFFER,DSTBL   */
*   ELSE                                                           1666
*     ;                             /* USED ALL OF BUFFER,DSTBL      */
@RF01652 DS    0H                                                  1667
*                                                                  1667
*/********************************************************************/
*/*                                                                  */
*/* LISTMSG: SEGMENT TO ISSUE LIST OF PAGING DATA SETS, IF REQUESTED */
*/*                                                                  */
*/* INPUT: ILRTPARB                                                  */
*/*        LIST INDICATOR USED IN PARSE SUBROUTINE                   */
*/*                                                                  */
*/* PROCESS: IF LIST INDICATOR ON, THEN ILRIMMSG IS PASSED ADDRESS   */
*/*          OF ILRTPARB TO PUT OUT A MESSAGE CONTAINING ALL PAGING  */
*/*          DATA SETS BEING USED THIS IPL.                          */
*/*                                                                  */
*/* OUTPUT: NOTHING   OR MESSAGE                                     */
*/*                                                                  */
*/********************************************************************/
*/*LISTMSG: CHART                                                    */
*/*HEADER                                                          1667
*/*  LISTMSG SEGMENT                                                 */
*/*LISTMSG: E ENTRY TO LIST PAGE DATA SETS                           */
*/*         D (YES,,NO,%A1) LIST SWITCH ON?                          */
*/*         S ILRIMMSG: 'LIST PAGE DATA SETS' MESSAGE                */
*/*%A1:     R RETURN TO IEAVNIPM                                     */
*/*LISTMSG: END                                                      */
*                                                                  1667
*   IF LIST=ON THEN                                                1667
         TM    LIST,B'01000000'                                    1667
         BNO   @RF01667                                            1667
*     DO;                           /* LIST PAGE DATA SET NAMES?     */
*       MSGID=M940I;                /* LISTING MESSAGE               */
         MVC   MSGID(4),@CC02575                                   1669
*       MSGDATA1=TPARPTR;           /* POINTER TO ILRTPARB           */
         L     @08,TPARPTR                                         1670
         ST    @08,MSGDATA1                                        1670
*       R1=ADDR(MSGPL);             /* PARM TO ILRIMMSG              */
         LA    R1,MSGPL                                            1671
*       CALL ILRIMMSG;              /* MESSAGE MODULE                */
         L     @15,@CV02592                                        1672
         BALR  @14,@15                                             1672
*     END;                          /* LIST PAGE DATA SET NAMES      */
*   ELSE                                                           1674
*     ;                             /* NO LISTING                    */
@RF01667 DS    0H                                                  1675
*   RETURN;                         /* RETURN TO IEAVNIPM            */
@EL00001 L     @13,4(,@13)                                         1675
@EF00001 DS    0H                                                  1675
@ER00001 LM    @14,@12,12(@13)                                     1675
         BR    @14                                                 1675
*                                                                  1676
*/********************************************************************/
*/*                                                                  */
*/* GGETMAIN: SUBROUTINE TO ISSUE UNCONDITIONAL GETMAIN FOR SQA      */
*/*           ON 4K BOUNDARY                                         */
*/*                                                                  */
*/* INPUT: LENGTH OF AREA REQUIRED IN REGISTER 0                     */
*/*                                                                  */
*/* PROCESS: GETMAIN SVC(120) INVOKED VIA MACRO.                     */
*/*          IF SUCCESSFUL, CONTROL IS RETURNED.                     */
*/*                                                                  */
*/* OUTPUT: ADDRESS OF GOTTEN STORAGE IN REGISTER 1.                 */
*/*                                                                  */
*/********************************************************************/
*/*GGETMAIN: CHART                                                   */
*/*HEADER                                                          1676
*/*  ILRASRIM                                                      1676
*/* GGETMAIN: GET SQA STORAGE ON 4K BOUNDARY                         */
*/*GGETMAIN: E ENTRY TO GET SQA STORAGE                              */
*/*          P SAVE ORIGINAL REQUEST                                 */
*/*          P MODIFY ORIGINAL REQUEST                               */
*/*          L ISSUE UNCONDITIONAL GETMAIN FOR SQA STORAGE           */
*/*          P MODIFY ADDRESS UP TO 4K BOUNDARY                      */
*/*          P CALCULATE FRONT PORTION OF GOTTEN STORAGE             */
*/*          L FREEMAIN FRONT PORTION                                */
*/*          P CALCULATE BACK PORTION OF GOTTEN STORAGE              */
*/*          L FREEMAIN BACK PORTION                                 */
*/*          P PUT BDY ALIGNED ADDRESS IN REGISTER ONE               */
*/*          R RETURN                                                */
*/*GGETMAIN: END                                                     */
*                                                                  1676
*GGETMAIN:                                                         1676
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1676
GGETMAIN DS    0H                                                  1677
*   RFY                                                            1677
*     R14 RSTD;                                                    1677
*   SAVER14A=R14;                   /* SAVE RETURN ADDRESS           */
         ST    R14,SAVER14A                                        1678
*   RFY                                                            1679
*     R0 RSTD;                                                     1679
*   RFY                                                            1680
*     R14 UNRSTD;                                                  1680
*   ORIGREQ=R0;                     /* SAVE ORIGINAL REQUEST         */
         ST    R0,ORIGREQ                                          1681
*   MDFDREQ=ORIGREQ+FOURK;          /* MODIFIED REQUEST              */
         L     @08,ORIGREQ                                         1682
         AL    @08,@CF02516                                        1682
         ST    @08,MDFDREQ                                         1682
*   R0=MDFDREQ;                     /* LENGTH TO GETMAIN             */
         LR    R0,@08                                              1683
*   DO;                             /* GETMAIN (RU) LV(R0)         1684
*                                      SP(SQASPID)                   */
*     RESPECIFY                                                    1685
*      (GPR01F,                                                    1685
*       GPR15F,                                                    1685
*       GPR00F) RESTRICTED;                                        1685
*     GPR01F=0;                     /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       1686
*     GPR15F=2;                     /* RU-TYPE GETMAIN               */
         LA    GPR15F,2                                            1687
*     GPR00F=R0;                    /* LENGTH REQUESTED              */
*     GPR15F=GPR15F×((SQASPID)*256);/* SP IN BYTE 2                  */
         O     GPR15F,@CF02881                                     1689
*     SVC(120);                     /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 1690
*     RESPECIFY                                                    1691
*      (GPR01F,                                                    1691
*       GPR15F,                                                    1691
*       GPR00F) UNRESTRICTED;                                      1691
*   END;                            /* GETMAIN (RU) LV(R0)         1692
*                                      SP(SQASPID)                   */
*   SAVEADDR=R1;                    /* SAVE GETMAINED ADDRESS        */
         LR    SAVEADDR,R1                                         1693
*   SRL(R1,12);                     /* RID OF THE RELATIVE BYTE IN 1694
*                                      PAGE                          */
         SRL   R1,12                                               1694
*   SLL(R1,12);                     /* MOVE BACK TO ORIGINAL PLACE   */
         SLL   R1,12                                               1695
*   IF SAVEADDR=R1 THEN                                            1696
         CR    SAVEADDR,R1                                         1696
         BNE   @RF01696                                            1696
*     BDYADDR=SAVEADDR;             /* SAVEADDR WAS PAGE BDY?        */
         LR    BDYADDR,SAVEADDR                                    1697
*   ELSE                                                           1698
*     DO;                           /* SAVEADDR WAS NOT PAGE BDY     */
         B     @RC01696                                            1698
@RF01696 DS    0H                                                  1699
*       BDYADDR=R1+FOURK;           /* SAVE PAGE BDY WITHIN AREA     */
         LR    BDYADDR,R1                                          1699
         AL    BDYADDR,@CF02516                                    1699
*       FREEPTR=SAVEADDR;           /* WHERE TO START FREEING        */
         LR    FREEPTR,SAVEADDR                                    1700
*       DO;                         /* FREEMAIN(RU) LV(BDYADDR-SAVEAD
*                                      DR)A(FREEAREA) SP(SQASPID)    */
*         RESPECIFY                                                1702
*          (GPR01F,                                                1702
*           GPR15F,                                                1702
*           GPR00F) RESTRICTED;                                    1702
*         GPR01F=0;                 /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       1703
*         GPR15F=3;                 /* SET TYPE                      */
         LA    GPR15F,3                                            1704
*         GPR00F=BDYADDR-SAVEADDR;  /* LENGTH REQUESTED              */
         LR    GPR00F,BDYADDR                                      1705
         SLR   GPR00F,SAVEADDR                                     1705
*         GPR01F=ADDR(FREEAREA);    /* SET REGISTER ONE              */
         LR    GPR01F,FREEPTR                                      1706
*         GPR15F=GPR15F+((SQASPID)*256);/* SUBPOOL VALUE             */
         AL    GPR15F,@CF02881                                     1707
*         SVC(120);                 /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 1708
*         RESPECIFY                                                1709
*          (GPR01F,                                                1709
*           GPR15F,                                                1709
*           GPR00F) UNRESTRICTED;                                  1709
*       END;                        /* FREEMAIN(RU) LV(BDYADDR-SAVEAD
*                                      DR)A(FREEAREA) SP(SQASPID)    */
*     END;                          /* SAVEADDR WAS NOT PAGE BDY     */
*   FREEPTR=BDYADDR+ORIGREQ;        /* POINTER TO AREA TO FREE       */
@RC01696 LR    FREEPTR,BDYADDR                                     1712
         AL    FREEPTR,ORIGREQ                                     1712
*   DO;                             /* FREEMAIN(RU) LV((SAVEADDR+MDFD
*                                      REQ)-FREEPTR)A(FREEAREA)    1713
*                                      SP(SQASPID)                   */
*     RESPECIFY                                                    1714
*      (GPR01F,                                                    1714
*       GPR15F,                                                    1714
*       GPR00F) RESTRICTED;                                        1714
*     GPR01F=0;                     /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       1715
*     GPR15F=3;                     /* SET TYPE                      */
         LA    GPR15F,3                                            1716
*     GPR00F=(SAVEADDR+MDFDREQ)-FREEPTR;/* LENGTH REQUESTED          */
         LR    GPR00F,SAVEADDR                                     1717
         AL    GPR00F,MDFDREQ                                      1717
         SLR   GPR00F,FREEPTR                                      1717
*     GPR01F=ADDR(FREEAREA);        /* SET REGISTER ONE              */
         LR    GPR01F,FREEPTR                                      1718
*     GPR15F=GPR15F+((SQASPID)*256);/* SUBPOOL VALUE                 */
         AL    GPR15F,@CF02881                                     1719
*     SVC(120);                     /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 1720
*     RESPECIFY                                                    1721
*      (GPR01F,                                                    1721
*       GPR15F,                                                    1721
*       GPR00F) UNRESTRICTED;                                      1721
*   END;                            /* FREEMAIN(RU) LV((SAVEADDR+MDFD
*                                      REQ)-FREEPTR)A(FREEAREA)    1722
*                                      SP(SQASPID)                   */
*   R1=BDYADDR;                     /* AREA POINTER TO RETURN TO   1723
*                                      CALLER                        */
         LR    R1,BDYADDR                                          1723
*   RFY                                                            1724
*     R0 UNRSTD;                                                   1724
*   RFY                                                            1725
*     R14 RSTD;                                                    1725
*   R14=SAVER14A;                   /* RESTORE RETURN ADDRESS        */
         L     R14,SAVER14A                                        1726
*   RFY                                                            1727
*     R14 UNRSTD;                                                  1727
*   END GGETMAIN;                                                  1728
@EL00002 DS    0H                                                  1728
@EF00002 DS    0H                                                  1728
@ER00002 BR    @14                                                 1728
*                                                                  1729
*/********************************************************************/
*/*                                                                  */
*/* PARSE: SUBROUTINE TO DEAL WITH THE PARMTAB:                      */
*/*        PAGE= DATA STRING FROM PARMLIB(IEASYSNN),                 */
*/*        PAGE= DATA STRING FROM SYSTEM PARAMETER, AND              */
*/*        SWAP= DATA STRING.                                        */
*/*                                                                  */
*/* INPUT: ADDRESS OF NVT                                            */
*/*        ADDRESS OF ILRDSTBL                                       */
*/*        INDICATOR TO PROCESS PAGE OR SWAP DATA SETS               */
*/*                                                                  */
*/* PROCESS: SUBROUTINE IS INVOKED TWICE. ONCE EACH FOR PAGE AND     */
*/*          SWAP DATA SETS.  WHENEVER WHAT IS ASSUMED TO BE A DATA  */
*/*          SET NAME IS DETECTED, SUBROUTINE NEXDSN IS INVOKED TO   */
*/*          PARSE THE NAME.                                         */
*/*          NEXDSN RETURNS WITH AN ERROR INDICATION OR WITH THE     */
*/*          ADDRESS AND LENGTH OF THE NAME.  CONTROL RETURNS TO     */
*/*          PARSE WITH THE STRING POSITION POINTER POINTING TO NEXT */
*/*          DATA SET NAME OR A STRING TERMINATING DELIMITER (RIGHT  */
*/*          PARENTHSIS OR QUOTE).  OTHERWISE A SYNTAX ERROR IS      */
*/*          ASSUMED.                                                */
*/*            NO ERROR AND THE NAME IS CHECKED FOR UNIQUENESS AND   */
*/*          MOVED INTO AN AVAILABLE ENTRY IN ILRDSTBL OR IGNORED    */
*/*          WHEN SAME NAME ALREADY IN ILRDSTBL.                     */
*/*            PARSE PROMPTS THE OPERATOR FOR A COMPLETE NEW LIST.   */
*/*            IF SYNTAX ERROR VIA NIPPRMPT. PARSE PROCESSES THE NEW */
*/*            LIST AS IF THE PRVIOUS LIST HAD NEVER EXISTED.        */
*/*                                                                  */
*/* OUTPUT: ILRDSTBL UPDATED WITH A UNIQUE LIST OF SWAP OR PAGE DATA */
*/*         SETS.  IT COULD BE EMPTY IF NO DATA SETS WERE SPECIFIED. */
*/*                                                                  */
*/********************************************************************/
*/*PARSE: CHART                                                      */
*/*HEADER                                                          1729
*/*  ILRASRIM                                                      1729
*/* PARSE: PARSE PAGE AND SWAP DATA SET NAMES                        */
*/*PARSE: E ENTRY TO PARSE PARMTAB STRING                            */
*/*       P ZERO ENTIRE ILRDSTBL                                     */
*/*       P AVLPTR IS FIRST ILRDSTBL ENTRY                           */
*/*       P LIMIT IS NEXT TO LAST ILRDSTBL ENTRY                     */
*/*       P PASS IS 1 OR FIRST PASS                                  */
*/*       D (NO,,YES,%A1) DO PAGE= PROCESS?                          */
*/*       P (,%A2) STRINGPTR POINT TO SWAP DATA SET NAMES            */
*/*%A1:   P STRINGPTR POINT TO PARMLIB PAGE DATA SET NAMES           */
*/*       P SAVEPTR POINTS TO OPERATOR PAGE DATA SET NAMES           */
*/*       P RESERVE 3RD ILRDSTBL ENTRY FOR DUPLEX D.S.               */
*/*       D (YES,,NO,%A2) LIST PAGE DATA SETS?                       */
*/*       P TURN ON LIST INDICATOR                                   */
*/*%A2:   P PLACE HOLDER IS AVLPTR                                   */
*/*       P NO PROBLEM                                               */
*/*       D (YES,,NO,%A3) PASS MARKED AS 3?                          */
*/*       P MARK END OF LIST, ZERO AVAILABLE ILRDSTBL ENTRY          */
*/*       R RETURN                                                   */
*/*%A3:   D (YES,,NO,%A4) PASS MARKED AS 2?                          */
*/*       P STRINGPTR POINT TO SAVED OPERATOR PAGE DATA SETS         */
*/*       D (YES,,NO,%A4) LIST PAGE DATA SETS?                       */
*/*       P TURN ON LIST INDICATOR                                   */
*/*%A4:   D (YES,,NO,%A5) STRING IS EMPTY?                           */
*/*%A9:   D (NO,,YES,%A6) ANOTHER STRING TO PROCESS?                 */
*/*       P (,%A2) MARK PASS AS 3                                    */
*/*%A6:   P (,%A2) MARK PASS AS 2 - ANOTHER STRING                   */
*/*%A5:   D (YES,,NO,%A7) STRING BEGIN WITH '('?                     */
*/*       P POINT TO NEXT CHAR IN STRING                             */
*/*%A7:   N DONE SCANNING STRING IF ')' OR QUOTE FOUND OR PROBLEMS   */
*/*       D (YES,,NO,%A8) DONE SCANNING?                             */
*/*       D (YES,,NO,%A9) PROBLEMS HAVE BEEN FOUND?                  */
*/*       S ILRIMMSG: ISSUE MESSAGE ABOUT PROBLEM                    */
*/*       S NIPPRMPT: PROMPT OPERATOR FOR NEW STRING                 */
*/*       P (,%A2) NEXT AVAILABLE ENTRY IS WHERE PLACE HOLDER POINTS */
*/*%A8:   N ASSUME A DATA SET NAME IS NOT '(' OR COMMA               */
*/*       D (NO,,YES,%B1) DATA SET NAME?                             */
*/*       P (,%A7) MARK AS A PROBLEM                                 */
*/*%B1:   S NEXDSN: PARSE THE DATA SET NAME                          */
*/*       D (NO,,YES,%A7) RETURNED WITH PROBLEM?                     */
*/*       N SEARCH ILRDSTBL FOR A DUPLICATE OF THIS NAME             */
*/*       N ON MATCH, AVAILABLE ENTRY WILL BE REUSED                 */
*/*       D (NO,,YES,%A7) MATCHING NAME FOUND?                       */
*/*       P NEXT AVAILABLE ENTRY                                     */
*/*       D (YES,,NO,%B2) THIS ENTRY DUPLEX ENTRY?                   */
*/*       P NEXT AVAILABLE ENTRY                                     */
*/*%B2:   D (YES,,NO,%A7) REACHED LIMIT OF ILRDSTBL?                 */
*/*       P (,%A2) MARK PASS AS 3 - DONE                             */
*/*PARSE: END                                                        */
*                                                                  1729
*PARSE:                                                            1729
*   PROC;                           /* ZERO WORKAREA                 */
PARSE    STM   @14,@12,@SA00003                                    1729
*   RFY                                                            1730
*    (R0,                                                          1730
*     R14,                                                         1730
*     R15) RSTD;                                                   1730
*   R0=DSTBLPTR;                    /* POINT TO WORKAREA             */
         L     R0,DSTBLPTR                                         1731
*   R1=LENGTH(DSTBL);               /* LENGTH OF WORKAREA            */
         L     R1,@CF02516                                         1732
*   R15=ZERO;                                                      1733
         SLR   R15,R15                                             1733
*   MVCL(R0,R14);                   /* WORKAREA ZEROED               */
         MVCL  R0,R14                                              1734
*   RFY                                                            1735
*    (R0,                                                          1735
*     R14,                                                         1735
*     R15) UNRSTD;                                                 1735
*   AVLPTR=DSTBLPTR;                /* POINTER TO FIRST ENTRY        */
         L     @08,DSTBLPTR                                        1736
         ST    @08,AVLPTR                                          1736
*   LIMIT=DSTBLPTR+LENGTH(DSTBL)-LENGTH(DSTBENT);/* NEXT TO LAST     */
         SL    @08,@CF02885                                        1737
         ST    @08,LIMIT                                           1737
*   PASS=ONE;                       /* FIRST TIME THROUGH            */
         MVI   PASS,X'01'                                          1738
*   IF SWAPSW=OFF THEN                                             1739
         TM    SWAPSW,B'00001000'                                  1739
         BNZ   @RF01739                                            1739
*     DO;                           /* PAGE STRING?                  */
*       PAGEQPTR=ADDR(PAGEP);       /* POINT TO FIRST STRING         */
         L     @08,PRMTBPTR                                        1741
         LA    @00,PAGEP(,@08)                                     1741
         ST    @00,PAGEQPTR                                        1741
*       SAVOPERD=PAGEO;             /* ADDR OF OPER NAMES            */
         L     @08,PAGEO(,@08)                                     1742
         ST    @08,SAVOPERD                                        1742
*       DUPLPTR->DSTDPLX=ON;        /* MARK ENTRY TO BE SKIPPED      */
         L     @08,DUPLPTR                                         1743
         OI    DSTDPLX(@08),B'10000000'                            1743
*       IF NIPPTLST=ON THEN                                        1744
         LR    @08,@00                                             1744
         TM    NIPPTLST(@08),B'01000000'                           1744
         BNO   @RF01744                                            1744
*         LIST=YES;                 /* INPUT TO LISTMSG SEGMENT      */
         OI    LIST,B'01000000'                                    1745
*       ELSE                                                       1746
*         ;                         /* NO LIST REQUEST               */
@RF01744 DS    0H                                                  1747
*     END;                          /* PAGE STRING                   */
*   ELSE                                                           1748
*     PAGEQPTR=ADDR(SWAP);          /* SWAP STRING                   */
         B     @RC01739                                            1748
@RF01739 L     @08,PRMTBPTR                                        1748
         LA    @08,SWAP(,@08)                                      1748
         ST    @08,PAGEQPTR                                        1748
*   PROBLEM=NO;                     /* NO PROBLEMS AT FIRST          */
@RC01739 NI    PROBLEM,B'11011111'                                 1749
*   DO WHILE PASS<THREE;            /* FINISHED IF PASS IS THREE     */
         B     @DE01750                                            1750
@DL01750 DS    0H                                                  1751
*     PLHPTR=AVLPTR;                /* SAVE 1ST ENTRY OF THIS STRING */
         L     @08,AVLPTR                                          1751
         ST    @08,PLHPTR                                          1751
*     IF PASS=TWO THEN                                             1752
         CLI   PASS,2                                              1752
         BNE   @RF01752                                            1752
*       DO;                         /* DOING OPERATOR PAGE STRING?   */
*         PAGEQPTR=ADDR(PAGEO);     /* POINT TO CORRECT PARMTAB ENTRY*/
         L     @08,PRMTBPTR                                        1754
         LA    @08,PAGEO(,@08)                                     1754
         ST    @08,PAGEQPTR                                        1754
*         IF PROBLEM=NO THEN        /* FIRST TIME THROUGH THIS PASS  */
         TM    PROBLEM,B'00100000'                                 1755
         BNZ   @RF01755                                            1755
*           PGSTRNGP=SAVOPERD;      /* RESTORE OPER PAGE STRING      */
         L     @00,SAVOPERD                                        1756
         ST    @00,PGSTRNGP(,@08)                                  1756
*         ELSE                                                     1757
*           ;                       /* USE PGSTRNGP AS IT IS         */
@RF01755 DS    0H                                                  1758
*         IF NIPPTLST=ON THEN                                      1758
         L     @08,PAGEQPTR                                        1758
         TM    NIPPTLST(@08),B'01000000'                           1758
         BNO   @RF01758                                            1758
*           LIST=YES;               /* LIST REQUEST FROM OPER?       */
         OI    LIST,B'01000000'                                    1759
*         ELSE                                                     1760
*           ;                       /* NO LIST REQUEST               */
@RF01758 DS    0H                                                  1761
*       END;                        /* DOING OPERATOR PAGE STRING    */
*     ELSE                                                         1762
*       ;                           /* SPECIAL FOR PASS ONE          */
@RF01752 DS    0H                                                  1763
*     PROBLEM=NO;                   /* NO PROBLEMS ON THIS TIME YET  */
         NI    PROBLEM,B'11011111'                                 1763
*     CHARPTR=PGSTRNGP;             /* BEGINNING OF STRING           */
         L     @08,PAGEQPTR                                        1764
         L     CHARPTR,PGSTRNGP(,@08)                              1764
*     IF CHARPTR=ZERO THEN                                         1765
         LTR   CHARPTR,CHARPTR                                     1765
         BNZ   @RF01765                                            1765
*       DO;                         /* NOTHING IN STRING?            */
*         IF SWAPSW=OFF&PASS=ONE THEN                              1767
         TM    SWAPSW,B'00001000'                                  1767
         BNZ   @RF01767                                            1767
         CLI   PASS,1                                              1767
         BNE   @RF01767                                            1767
*           PASS=TWO;               /* MORE TO DO?                   */
         MVI   PASS,X'02'                                          1768
*         ELSE                                                     1769
*           PASS=THREE;             /* DONE PROCESSING               */
         B     @RC01767                                            1769
@RF01767 MVI   PASS,X'03'                                          1769
*       END;                        /* NOTHING IN STRING             */
*     ELSE                                                         1771
*       DO;                         /* SOMETHING IN STRING           */
         B     @RC01765                                            1771
@RF01765 DS    0H                                                  1772
*         IF PTCHAR=LEFTPAR THEN                                   1772
         CLI   PTCHAR(CHARPTR),C'('                                1772
         BNE   @RF01772                                            1772
*           CHARPTR=CHARPTR+ONE;    /* PASS A '('                    */
         AL    CHARPTR,@CF00059                                    1773
*         ELSE                                                     1774
*           ;                       /* START HERE IF NO '('          */
@RF01772 DS    0H                                                  1775
*         DO WHILE PTCHAR^=RIGHTPAR&/* END SCAN ON SECOND RIGHT PAREN*/
*               PTCHAR^=QUOTE&      /* OR QUOTE(END DELIMITER)       */
*               PROBLEM=NO&PASS<THREE;/* OR PROBLEM OR DONE          */
         B     @DE01775                                            1775
@DL01775 DS    0H                                                  1776
*           IF PTCHAR=LEFTPAR×      /* EXPECT DSNAME NOT '(' OR COMMA*/
*               PTCHAR=COMMA THEN                                  1776
         CLI   PTCHAR(CHARPTR),C'('                                1776
         BE    @RT01776                                            1776
         CLI   PTCHAR(CHARPTR),C','                                1776
         BNE   @RF01776                                            1776
@RT01776 DS    0H                                                  1777
*             PROBLEM=YES;                                         1777
         OI    PROBLEM,B'00100000'                                 1777
*           ELSE                                                   1778
*             DO;                   /* EXPECT DSNAME                 */
         B     @RC01776                                            1778
@RF01776 DS    0H                                                  1779
*               CALL NEXDSN;        /* SCAN DSNAME                   */
         BAL   @14,NEXDSN                                          1779
*               IF PROBLEM=NO THEN                                 1780
         TM    PROBLEM,B'00100000'                                 1780
         BNZ   @RF01780                                            1780
*                 DO;               /* NEXDSN O.K.?                  */
*                   SCHPTR=DSTBLPTR;/* CHECK IT IS UNIQUE NAME       */
         L     SCHPTR,DSTBLPTR                                     1782
*                   AVLPTR->DSTDSN='';/* PUT NAME IN WORKAREA        */
         L     @15,AVLPTR                                          1783
         MVI   DSTDSN(@15),C' '                                    1783
         MVC   DSTDSN+1(43,@15),DSTDSN(@15)                        1783
*                   AVLPTR->DSTDSN(1:DSNLNG)=PTDSN(1:DSNLNG);      1784
         LR    @14,DSNLNG                                          1784
         BCTR  @14,0                                               1784
         L     @07,DSNPTR                                          1784
         EX    @14,@SM02915                                        1784
*                   DO WHILE SCHPTR->DSTDSN^=AVLPTR->DSTDSN;/*     1785
*                                      UNIQUE?                       */
         B     @DE01785                                            1785
@DL01785 DS    0H                                                  1786
*                     SCHPTR=SCHPTR+LENGTH(DSTENT);/* NEXT ENTRY     */
         AL    SCHPTR,@CF00076                                     1786
*                   END;            /* UNIQUE                        */
@DE01785 L     @15,AVLPTR                                          1787
         CLC   DSTDSN(44,SCHPTR),DSTDSN(@15)                       1787
         BNE   @DL01785                                            1787
*                   IF SCHPTR=AVLPTR THEN                          1788
         CR    SCHPTR,@15                                          1788
         BNE   @RF01788                                            1788
*                     DO;           /* ONLY MATCH IS ITSELF?         */
*                       AVLPTR->DSTLNG=DSNLNG;/* LENGTH OF DSNAME    */
         STC   DSNLNG,DSTLNG(,@15)                                 1790
*                       AVLPTR=AVLPTR+LENGTH(DSTENT);/* NEXT ENTRY   */
         LA    @08,48                                              1791
         ALR   @15,@08                                             1791
         ST    @15,AVLPTR                                          1791
*                       IF AVLPTR->DSTDPLX=ON THEN/* SKIP DUPLEX   1792
*                                      ENTRY                         */
         TM    DSTDPLX(@15),B'10000000'                            1792
         BNO   @RF01792                                            1792
*                         AVLPTR=AVLPTR+LENGTH(DSTENT);            1793
         ALR   @15,@08                                             1793
         ST    @15,AVLPTR                                          1793
*                       ELSE                                       1794
*                         ;         /* NOT DUPLEX ENTRY              */
@RF01792 DS    0H                                                  1795
*                       IF AVLPTR=LIMIT THEN                       1795
         CLC   AVLPTR(4),LIMIT                                     1795
         BNE   @RF01795                                            1795
*                         PASS=THREE;/* DONE?                        */
         MVI   PASS,X'03'                                          1796
*                       ELSE                                       1797
*                         ;         /* NOT DONE                      */
@RF01795 DS    0H                                                  1798
*                     END;          /* ONLY MATCH IS ITSELF          */
*                   ELSE                                           1799
*                     ;             /* IGNORE AND SCAN ON (MATCHES)  */
@RF01788 DS    0H                                                  1800
*                 END;              /* NEXDSN O.K.                   */
*               ELSE                                               1801
*                 ;                 /* PASS ON PROBLEM               */
@RF01780 DS    0H                                                  1802
*             END;                  /* EXPECT DSNAME                 */
*         END;                      /* END SCAN                      */
@RC01776 DS    0H                                                  1803
@DE01775 CLI   PTCHAR(CHARPTR),C')'                                1803
         BE    @DC01775                                            1803
         CLI   PTCHAR(CHARPTR),C''''                               1803
         BE    @DC01775                                            1803
         TM    PROBLEM,B'00100000'                                 1803
         BNZ   @DC01775                                            1803
         CLI   PASS,3                                              1803
         BL    @DL01775                                            1803
@DC01775 DS    0H                                                  1804
*         IF PROBLEM=YES THEN                                      1804
         TM    PROBLEM,B'00100000'                                 1804
         BNO   @RF01804                                            1804
*           DO;                     /* NEED NEW STRING?              */
*             IF SWAPSW=OFF THEN                                   1806
         TM    SWAPSW,B'00001000'                                  1806
         BNZ   @RF01806                                            1806
*               DO;                 /* PAGE STRING?                  */
*                 IF PASS=ONE THEN                                 1808
         CLI   PASS,1                                              1808
         BNE   @RF01808                                            1808
*                   DO;             /* SYSP PAGE STRING?             */
*                     MSGID=M915E;  /* IEASYSP SYNTAX ERROR          */
         MVC   MSGID(4),@CC02543                                   1810
*                     PAGEQPTR=ADDR(PAGEO);/* INPUT FROM OPERATOR    */
         L     @08,PRMTBPTR                                        1811
         LA    @08,PAGEO(,@08)                                     1811
         ST    @08,PAGEQPTR                                        1811
*                   END;            /* SYSP PAGE STRING              */
*                 ELSE                                             1813
*                   DO;             /* OPERATOR SPECIFIED PAGE STRING*/
         B     @RC01808                                            1813
@RF01808 DS    0H                                                  1814
*                     MSGID=M916E;  /* SYSTEM PARM ERROR             */
         MVC   MSGID(4),@CC02545                                   1814
*                     FLAGS=PAGEQ;  /* PAGE PARM                     */
         MVI   FLAGS,X'80'                                         1815
*                   END;            /* OPERATOR SPECIFIED PAGE STRING*/
*                 DATAPARM=PAGEPARM;/* PARM TO PROMPT                */
@RC01808 MVC   DATAPARM(8),PAGEPARM                                1817
*               END;                /* PAGE STRING                   */
*             ELSE                                                 1819
*               DO;                 /* SWAP STRING                   */
         B     @RC01806                                            1819
@RF01806 DS    0H                                                  1820
*                 MSGID=M916E;      /* SYSTEM PARM                   */
         MVC   MSGID(4),@CC02545                                   1820
*                 FLAGS=SWAPEQ;     /* SWAP PARM                     */
         MVI   FLAGS,X'40'                                         1821
*                 DATAPARM=SWAPPARM;/* PARM TO PROMPT                */
         MVC   DATAPARM(8),SWAPPARM                                1822
*               END;                /* SWAP STRING                   */
*             R1=ADDR(MSGPL);       /* PARM TO ILRIMMSG              */
@RC01806 LA    R1,MSGPL                                            1824
*             CALL ILRIMMSG;        /* MESSAGE MODULE                */
         L     @15,@CV02592                                        1825
         BALR  @14,@15                                             1825
*             RFY                                                  1826
*              (R2,                                                1826
*               R3) RSTD;                                          1826
*             LM(R2,R3,NIPPTRS);    /* PASS NVT & CVT TO PROMPT      */
         LM    R2,R3,NIPPTRS                                       1827
*             GEN REFS(NIPPTRS,NVTPRMPT,DATAPARM) SETS(PAGEO,SWAP);
          IEAPMNIP TYPE=PRMPT,PARAM=DATAPARM,OPT=ERROR
*             RFY                                                  1829
*              (R2,                                                1829
*               R3) UNRSTD;                                        1829
*             AVLPTR=PLHPTR;        /* RETURN AVLPTR TO 1ST THIS STRG*/
         L     @08,PLHPTR                                          1830
         ST    @08,AVLPTR                                          1830
*           END;                    /* NEED NEW STRING               */
*         ELSE                                                     1832
*           IF SWAPSW=OFF&PASS=ONE THEN                            1832
         B     @RC01804                                            1832
@RF01804 TM    SWAPSW,B'00001000'                                  1832
         BNZ   @RF01832                                            1832
         CLI   PASS,1                                              1832
         BNE   @RF01832                                            1832
*             PASS=TWO;             /* NO PROBLEMS                   */
         MVI   PASS,X'02'                                          1833
*           ELSE                                                   1834
*             PASS=THREE;           /* DONE OR SECOND PASS           */
         B     @RC01832                                            1834
@RF01832 MVI   PASS,X'03'                                          1834
*       END;                        /* SOMETHING IN STRING           */
@RC01832 DS    0H                                                  1835
@RC01804 DS    0H                                                  1836
*   END;                            /* FINISHED IF PASS IS THREE     */
@RC01765 DS    0H                                                  1836
@DE01750 CLI   PASS,3                                              1836
         BL    @DL01750                                            1836
*   AVLPTR->DSTENT=''B;             /* ZERO ENTRY TO MARK END OF LIST*/
         L     @08,AVLPTR                                          1837
         XC    DSTENT(48,@08),DSTENT(@08)                          1837
*   END PARSE;                                                     1838
@EL00003 DS    0H                                                  1838
@EF00003 DS    0H                                                  1838
@ER00003 LM    @14,@12,@SA00003                                    1838
         BR    @14                                                 1838
*                                                                  1839
*/********************************************************************/
*/*                                                                  */
*/* NEXDSN: SUBROUTINE TO PARSE A DATA SET NAME                      */
*/*                                                                  */
*/* INPUT: CHARPTR POINTING TO FIRST CHARACTER OF NAME               */
*/*        PROBLEM INDICATOR OFF                                     */
*/*                                                                  */
*/* PROCESS: NEXDSN IS INVOKED BY PARSE OR OPENA SUBROUTINES.        */
*/*          SCAN UNTIL QUOTE, RIGHT PARENTHSIS, OR COMMA IS FOUND.  */
*/*           CHECKS FOR VALID LENGTH.                               */
*/*                                                                  */
*/* OUTPUT: PROBLEM INDICATOR ON                                     */
*/*        OR                                                        */
*/*         CHARPTR POINTS AT QUORE OR JUST BEYOND COMMA OR RIGHT    */
*/*            PARENTHSIS                                            */
*/*         DSNPTR POINT TO NAME                                     */
*/*         DSNLNG CONTAINS LENGTH OF NAME                           */
*/*                                                                  */
*/********************************************************************/
*/*NEXDSN: CHART                                                     */
*/*HEADER                                                          1839
*/*  ILRASRIM                                                      1839
*/* NEXDSN: PARSE DATA SET NAME                                      */
*/*NEXDSN: E ENTRY TO PARSE DATA SET NAME                            */
*/*        P DSNPTR IS CHARPTR                                       */
*/*%A4:    D (NO,,YES,%A1) CHAR IS QUOTE, ')', OR COMMA?             */
*/*        P (,%A4) NEXT CHAR                                        */
*/*%A1:    P CALCULATE NAME LENGTH                                   */
*/*        D (YES,,NO,%A2) VALID LENGTH?                             */
*/*        D (NO,,YES,%A3) CHAR IS QUOTE?                            */
*/*        P (,%A3) NEXT CHARACTER                                   */
*/*%A2:    P MARK AS PROBLEM                                         */
*/*%A3:    R RETURN                                                  */
*/*NEXDSN: END                                                       */
*                                                                  1839
*NEXDSN:                                                           1839
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1839
NEXDSN   DS    0H                                                  1840
*   RFY                                                            1840
*     R14 RSTD;                                                    1840
*   SAVER14A=R14;                   /* SAVE RETURN ADDRESS           */
         ST    R14,SAVER14A                                        1841
*   RFY                                                            1842
*     R14 UNRSTD;                                                  1842
*   DSNPTR=CHARPTR;                 /* BEGIN DSNAME                  */
         ST    CHARPTR,DSNPTR                                      1843
*   DO WHILE PTCHAR^=COMMA&         /* FIND DELIMITOR                */
*         PTCHAR^=RIGHTPAR&PTCHAR^=QUOTE;                          1844
         B     @DE01844                                            1844
@DL01844 DS    0H                                                  1845
*     CHARPTR=CHARPTR+ONE;          /* NEXT CHARACTER                */
         AL    CHARPTR,@CF00059                                    1845
*   END;                            /* FIND DELIMITOR                */
@DE01844 CLI   PTCHAR(CHARPTR),C','                                1846
         BE    @DC01844                                            1846
         CLI   PTCHAR(CHARPTR),C')'                                1846
         BE    @DC01844                                            1846
         CLI   PTCHAR(CHARPTR),C''''                               1846
         BNE   @DL01844                                            1846
@DC01844 DS    0H                                                  1847
*   DSNLNG=CHARPTR-DSNPTR;          /* LENGTH OF DSNAME              */
         LR    DSNLNG,CHARPTR                                      1847
         SL    DSNLNG,DSNPTR                                       1847
*   IF DSNLNG>44×DSNLNG=0 THEN                                     1848
         C     DSNLNG,@CF00102                                     1848
         BH    @RT01848                                            1848
         LTR   DSNLNG,DSNLNG                                       1848
         BNZ   @RF01848                                            1848
@RT01848 DS    0H                                                  1849
*     PROBLEM=YES;                  /* INVALID LENGTH?               */
         OI    PROBLEM,B'00100000'                                 1849
*   ELSE                                                           1850
*     IF PTCHAR^=QUOTE THEN         /* VALID, BUT NOT END OF STRING? */
         B     @RC01848                                            1850
@RF01848 CLI   PTCHAR(CHARPTR),C''''                               1850
         BE    @RF01850                                            1850
*       CHARPTR=CHARPTR+ONE;        /* NEXT CHARACTER                */
         AL    CHARPTR,@CF00059                                    1851
*     ELSE                                                         1852
*       ;                           /* END OF STRING IS QUOTE        */
@RF01850 DS    0H                                                  1853
*   RFY                                                            1853
*     R14 RSTD;                                                    1853
@RC01848 DS    0H                                                  1854
*   R14=SAVER14A;                   /* RESTORE RETURN ADDRESS        */
         L     R14,SAVER14A                                        1854
*   RFY                                                            1855
*     R14 UNRSTD;                                                  1855
*   END NEXDSN;                                                    1856
@EL00004 DS    0H                                                  1856
@EF00004 DS    0H                                                  1856
@ER00004 BR    @14                                                 1856
*                                                                  1857
*/********************************************************************/
*/*                                                                  */
*/* OPEN: SUBROUTINE TO CALL ILROPS00 (OPEN MODULE) AND PROCESS AND  */
*/*        HANDLE RESULTS UPON RETURN                                */
*/*                                                                  */
*/* INPUT: FILLED IN ILROPS00 PARAMETER LIST, ALL CASES              */
*/*        DSTEPTR TO POINT TO 44 CHARACTER DATA SET NAME            */
*/*          (DO NOT ASSUME A VALID ILRDSTBL ENTRY, ALTHOUGH IT IS   */
*/*           EXCEPT WHEN PROCESSING NEEDED LOCAL DATA SETS)         */
*/*        SWAP, NEEDEDL, AND DUPLEX INDICATORS                      */
*/*                                                                  */
*/* PROCESS: CALL ILROPS00 AND HANDLE THE POSSIBLE RETURN CODES      */
*/*                                                                  */
*/* OUTPUT: NO MORE NUCLEUS BUFFER SPACE- ISSUE MESSAGE IEA340I AND  */
*/*                WAIT STATE SYSTEM WITH CODE 38                    */
*/*         NO MORE SQA SPACE- ISSUE MESSAGE IEA938W AND WAIT STATE  */
*/*                SYSTEM WITH CODE 63                               */
*/*         MOUNT FAILURE- RETURN TO CALLER WITH ILROPS00'S RETURN   */
*/*                CODE (08)                                         */
*/*         LOCATE FAILURE- ISSUE MESSAGE IEA920I AND RETURN TO      */
*/*               CALLER WITH ILROPS12'S RETURN CODE(00)             */
*/*         OPEN O.K.- RETURN TO CALLER WITH ILROPS00'S RETURN       */
*/*               CODE (00)                                          */
*/*                                                                  */
*/********************************************************************/
*/*OPEN: CHART                                                       */
*/*HEADER                                                          1857
*/*  ILRASRIM                                                      1857
*/* OPEN: OPEN SWAP AND PAGE DATA SETS                               */
*/*OPEN: E ENTRY TO HANDLE OPEN RETURN CONDITIONS                    */
*/*      S ILROPS00: LOCATE, MOUNT, AND OPEN DATA SET                */
*/*      D (YES,,NO,%A1) NUCLEUS BUFFER PROBLEM?                     */
*/*      S ILRIMMSG:ISSUE MESSAGE IEA340I                            */
*/*      R WAIT STATE 38                                             */
*/*%A1:  D (YES,,NO,%A2) SQA PROBLEM?                                */
*/*      S ILRIMMSG: ISSUE MESSAGE IEA938W                           */
*/*      R WAIT STATE 63                                             */
*/*%A2:  D (YES,,NO,%A3) MOUNT FAIL?                                 */
*/*%A4:  R RETURN WITH ILROPS00'S RETURN CODE                        */
*/*%A3:  D (YES,,NO,%A4) LOCATE FAIL?                                */
*/*      S (,%A4) ILRIMMSG: ISSUE MESSAGE IEA920I                    */
*/*OPEN: END                                                         */
*                                                                  1857
*OPEN:                                                             1857
*   PROC;                           /* OPEN SUBROUTINE               */
OPEN     STM   @14,@12,@SA00005                                    1857
*   RFY                                                            1858
*    (R2,                                                          1858
*     R3) RSTD;                                                    1858
*   LM(R2,R3,NIPPTRS);              /* PUT NVT AND CVT POINTERS IN   */
         LM    R2,R3,NIPPTRS                                       1859
*   R1=PARMPTR;                     /* PARMS TO ILROPS00             */
         L     R1,PARMPTR                                          1860
*   CALL ILROPS00;                  /* CALL ILROPS00                 */
         L     @15,OPENPTR                                         1861
         BALR  @14,@15                                             1861
*   RFY                                                            1862
*    (R2,                                                          1862
*     R3) UNRSTD;                                                  1862
*   RFY                                                            1863
*     R15 RSTD;                     /* SAVE RETURN CODE              */
*   IF R15^=ZERO THEN                                              1864
         LTR   R15,R15                                             1864
         BZ    @RF01864                                            1864
*     DO;                           /* OPEN FAILED?                  */
*       IF R15=NONUCSTG THEN                                       1866
         C     R15,@CF00267                                        1866
         BNE   @RF01866                                            1866
*         DO;                       /* NO NUCLEUS BUFFER SPACE?      */
*           MSGID=M340I;            /* BUFFER PROBLEM                */
         MVC   MSGID(4),@CC02541                                   1868
*           R1=ADDR(MSGPL);         /* PARM TO ILRIMMSG              */
         LA    R1,MSGPL                                            1869
*           CALL ILRIMMSG;          /* WAIT STATE                    */
         L     @15,@CV02592                                        1870
         BALR  @14,@15                                             1870
*         END;                      /* BUFFER PROBLEM                */
*       ELSE                                                       1872
*         ;                         /* NOT NUCLEUS BUFFER PROBLEM    */
@RF01866 DS    0H                                                  1873
*       IF R15=NOSQASTG THEN                                       1873
         C     R15,@CF00111                                        1873
         BNE   @RF01873                                            1873
*         DO;                       /* NO SQA CONTROL BLOCK STORAGE? */
*           MSGID=M938W;            /* SQA SHORTAGE                  */
         MVC   MSGID(4),@CC02571                                   1875
*           R1=ADDR(MSGPL);         /* PARM TO ILRIMMSG              */
         LA    R1,MSGPL                                            1876
*           CALL ILRIMMSG;          /* WAIT STATE                    */
         L     @15,@CV02592                                        1877
         BALR  @14,@15                                             1877
*         END;                      /* NO SQA                        */
*       ELSE                                                       1879
*         ;                         /* NOT SQA PROBLEM               */
@RF01873 DS    0H                                                  1880
*       IF R15=LOCFAIL THEN                                        1880
         C     R15,@CF01569                                        1880
         BNE   @RF01880                                            1880
*         DO;                       /* LOCATE FAILED?                */
*           MSGID=M920I;            /* LOCATE FAIL                   */
         MVC   MSGID(4),@CC02549                                   1882
*           IF NEEDEDL=ON THEN      /* NEEDED LOCAL NAME IN ILRTPARB */
         TM    NEEDEDL,B'00000010'                                 1883
         BNO   @RF01883                                            1883
*             MSGDATA1=ADDR(TPAEDSN);                              1884
         L     @14,TPAEPTR                                         1884
         LA    @14,TPAEDSN(,@14)                                   1884
         ST    @14,MSGDATA1                                        1884
*           ELSE                                                   1885
*             MSGDATA1=DSTEPTR;     /* DSNAME THAT FAILED            */
         B     @RC01883                                            1885
@RF01883 ST    DSTEPTR,MSGDATA1                                    1885
*           IF SWAPSW=OFF THEN                                     1886
@RC01883 TM    SWAPSW,B'00001000'                                  1886
         BNZ   @RF01886                                            1886
*             DO;                   /* NOT SWAP DATA SET?            */
*               IF DUPLEXSW=ON THEN                                1888
         TM    DUPLEXSW,B'00000100'                                1888
         BNO   @RF01888                                            1888
*                 FLAGS=DUPEQ;      /* PUT DUPLEX IN MESSAGE         */
         MVI   FLAGS,X'20'                                         1889
*               ELSE                                               1890
*                 FLAGS=PAGEQ;      /* PUT PAGE IN MESSAGE           */
         B     @RC01888                                            1890
@RF01888 MVI   FLAGS,X'80'                                         1890
*             END;                                                 1891
*           ELSE                                                   1892
*             FLAGS=SWAPEQ;         /* SWAP DATA SET                 */
         B     @RC01886                                            1892
@RF01886 MVI   FLAGS,X'40'                                         1892
*           R1=ADDR(MSGPL);         /* PARM TO ILRIMMSG              */
@RC01886 LA    R1,MSGPL                                            1893
*           CALL ILRIMMSG;          /* MESSAGE MODULE                */
         L     @15,@CV02592                                        1894
         BALR  @14,@15                                             1894
*           R15=LOCFAIL;            /* RESET--CLOBBERED BY ILRIMMSG  */
         LA    R15,12                                              1895
*         END;                      /* LOCATE FAILED                 */
*       ELSE                                                       1897
*         ;                         /* MOUNT FAIL                    */
@RF01880 DS    0H                                                  1898
*     END;                          /* OPEN FAILED                   */
*   ELSE                                                           1899
*     ;                             /* OPEN SUCCESSFULLY             */
@RF01864 DS    0H                                                  1900
*   RETURN CODE(R15);               /* RETURN ILROPS00 R.C.          */
         L     @14,@SA00005                                        1900
         LM    @00,@12,@SA00005+8                                  1900
         BR    @14                                                 1900
*   RFY                                                            1901
*     R15 UNRSTD;                                                  1901
*   END OPEN;                                                      1902
*                                                                  1903
*/********************************************************************/
*/*                                                                  */
*/* OPENA: SUBROUTINE TO OBTAIN A NEW DATA SET (RESPECIFICATION)     */
*/*                                                                  */
*/* INPUT: DSTEPTR POINTING TO ILRDSTBL ENTRY TO USE                 */
*/*        SWAP INDICATOR                                            */
*/*                                                                  */
*/* PROCESS: INVOKED WHEN:                                           */
*/*              1. TPARPATS FAILS FOR PAGE DATA SETS OTHER THAN     */
*/*                    PLPA, PREVIOUS DUPLEX, OR NEEDED LOCALS       */
*/*              2. MOUNT FAILS FOR PLPA OR COMMON AND OPERATOR      */
*/*                    REPLIES IGNORE TO IEA924D.                    */
*/*              3. LOCATE FAILS FOR PAGE DATA SETS OTHER THAN       */
*/*                    PREVIOUS DUPLEX OR NEEDED LOCALS              */
*/*              4. LOCATE FAILS FOR SWAP DATA SET                   */
*/*              5. MAIN LINE HAS JUST RETURNED FROM OPENB           */
*/*           OPENA ASKS OPERATOR FOR A DIFFERENT DATA SET NAME,     */
*/*           PARSES NAME, AND CHECKS ILRDSTBL FOR THE SAME NAME     */
*/*           ALREADY THERE.                                         */
*/*                                                                  */
*/* OUTPUT: RETURN CODE 4-  OPERATOR REPLIED IGNORE TO REQUEST OF    */
*/*            NEW NAME                                              */
*/*         RETURN CODE 16- NEW UNIQUE NAME IN ILRDSTBL ENTRY        */
*/*                                                                  */
*/********************************************************************/
*/*OPENA: CHART                                                      */
*/*HEADER                                                          1903
*/*  ILRASRIM                                                      1903
*/* OPENA: HAVE OPERATOR RESPECIFY DATA SET NAME                     */
*/*OPENA:  E ENTRY TO DATA SET RESPECIFICATION                       */
*/*%A2:    S ILRIMMSG: ASK OPERATOR FOR NAME                         */
*/*        D (NO,,YES,%A1) GIVE A NAME?                              */
*/*        P (,%A5) RETURN CODE IS 4                                 */
*/*%A1:    P SETUP INPUT TO NEXDSN                                   */
*/*        S NEXDSN: PARSE THE NAME                                  */
*/*        D (YES,,NO,%A2) NO PROBLEM AND NEXT CHAR IS QUOTE?        */
*/*        P PUT NAME IN ILRDSTBL ENTRY                              */
*/*        N CHECK NAME IS UNIQUE                                    */
*/*        P POINT TO FIRST ILRDSTBL ENTRY                           */
*/*%A3:    D (NO,,YES,%A4) ENTRY NOT BEING USED?                     */
*/*        D (NO,,YES,%A6) MATCHES NEW NAME?                         */
*/*%A4:    P NEXT ENTRY                                              */
*/*        D (YES,,NO,%A3) NAME(THIS ENTRY) IS ZERO?                 */
*/*        D (NO,,YES,%A4) MORE ENTRIES?                             */
*/*        P NEW NAME IS O.K.,R.C.16                                 */
*/*%A5:    R RETURN                                                  */
*/*%A6:    S (,%A2) OPENB: NOT ACCEPTED DSNAME                       */
*/*OPENA:  END                                                       */
*                                                                  1903
*OPENA:                                                            1903
*   PROC;                           /* ASK FOR NEW NAME              */
OPENA    STM   @14,@12,@SA00006                                    1903
*OPENAAGN:                                                         1904
*   MSGID=M922D;                                                   1904
OPENAAGN MVC   MSGID(4),@CC02553                                   1904
*   R1=ADDR(MSGPL);                 /* PARM TO ILRIMMSG              */
         LA    R1,MSGPL                                            1905
*   CALL ILRIMMSG;                  /* MESSAGE MODULE                */
         L     @15,@CV02592                                        1906
         BALR  @14,@15                                             1906
*   IF R1->MSGBUF(1:LENGTH(IGNORE))^=IGNORE THEN                   1907
         CLC   MSGBUF(6,R1),@CC02477                               1907
         BE    @RF01907                                            1907
*     DO;                           /* NOT IGNORE?                   */
*       PROBLEM=NO;                 /* PREPARE FOR NEXDSN- NO PROBLEM*/
         NI    PROBLEM,B'11011111'                                 1909
*       CHARPTR=R1+LENGTH(DSNEQ);   /* EXPECT DSNAME                 */
         LA    CHARPTR,4                                           1910
         ALR   CHARPTR,R1                                          1910
*       CALL NEXDSN;                /* SCAN DSNAME                   */
         BAL   @14,NEXDSN                                          1911
*       IF PROBLEM=NO&              /* NO PROBLEMS IN REPLY          */
*           PTCHAR=QUOTE THEN                                      1912
         TM    PROBLEM,B'00100000'                                 1912
         BNZ   @RF01912                                            1912
         CLI   PTCHAR(CHARPTR),C''''                               1912
         BNE   @RF01912                                            1912
*         DO;                                                      1913
*           DSTDSN='';              /* PUT INFO IN WORKAREA          */
         MVI   DSTDSN(DSTEPTR),C' '                                1914
         MVC   DSTDSN+1(43,DSTEPTR),DSTDSN(DSTEPTR)                1914
*           DSTDSN(1:DSNLNG)=PTDSN(1:DSNLNG);                      1915
         LR    @06,DSNLNG                                          1915
         BCTR  @06,0                                               1915
         L     @02,DSNPTR                                          1915
         EX    @06,@SM02917                                        1915
*           DSTLNG=DSNLNG;                                         1916
         STC   DSNLNG,DSTLNG(,DSTEPTR)                             1916
*           SCHPTR=DSTBLPTR;        /* CHECK NEW NAME IS UNIQUE      */
         L     SCHPTR,DSTBLPTR                                     1917
*           DO WHILE                /* NOT MATCH AND NOT END OF LIST */
*                 (SCHPTR->DSTDSN^=DSTDSN&SCHPTR->DSTDSNC^=0)×DSTEPTR=
*                 SCHPTR×           /* SAME ENTRY                    */
*                 SCHPTR->DSTNUSED=ON×/* TOLD TO IGNORE THIS ONE   1918
*                                      BEFORE                        */
*                 (SCHPTR->DSTDPLX=ON&SCHPTR->DSTDSNC=0);/* NO DUPLEX*/
         B     @DE01918                                            1918
@DL01918 DS    0H                                                  1919
*             SCHPTR=SCHPTR+LENGTH(DSTENT);/* NEXT ENTRY             */
         AL    SCHPTR,@CF00076                                     1919
*           END;                    /* CHECK UNIQUE                  */
@DE01918 CLC   DSTDSN(44,SCHPTR),DSTDSN(DSTEPTR)                   1920
         BE    @GL00042                                            1920
         CLI   DSTDSNC(SCHPTR),0                                   1920
         BNE   @DL01918                                            1920
@GL00042 CR    DSTEPTR,SCHPTR                                      1920
         BE    @DL01918                                            1920
         TM    DSTNUSED(SCHPTR),B'00100000'                        1920
         BO    @DL01918                                            1920
         TM    DSTDPLX(SCHPTR),B'10000000'                         1920
         BNO   @DC01918                                            1920
         CLI   DSTDSNC(SCHPTR),0                                   1920
         BE    @DL01918                                            1920
@DC01918 DS    0H                                                  1921
*           IF SCHPTR->DSTDSNC^=0 THEN                             1921
         CLI   DSTDSNC(SCHPTR),0                                   1921
         BE    @RF01921                                            1921
*             DO;                   /* FOUND A MATCH? BAD            */
*               CALL OPENB;         /* NOT ACCEPTABLE DSNAME         */
         BAL   @14,OPENB                                           1923
*               GOTO OPENAAGN;      /* ASK AGAIN                     */
         B     OPENAAGN                                            1924
*             END;                  /* FOUND A MATCH                 */
*           ELSE                                                   1926
*             DO;                   /* END OF LIST --NO MATCH        */
@RF01921 DS    0H                                                  1927
*               IF SWAPSW=OFF THEN                                 1927
         TM    SWAPSW,B'00001000'                                  1927
         BNZ   @RF01927                                            1927
*                 LIST=ON;          /* CHANGED--ISSUE IEA940I        */
         OI    LIST,B'01000000'                                    1928
*               RETURN CODE(SIXTEEN);/* NEW NAME RETURN CODE         */
@RF01927 LA    @15,16                                              1929
         L     @14,@SA00006                                        1929
         LM    @00,@12,@SA00006+8                                  1929
         BR    @14                                                 1929
*             END;                  /* END OF LIST -- NO MATCH       */
*         END;                      /* NO PROBLEMS IN REPLY          */
*       ELSE                                                       1932
*         GOTO OPENAAGN;            /* ARE PROBLEMS IN REPLY         */
*     END;                          /* NOT IGNORE                    */
*   ELSE                                                           1934
*     RETURN CODE(IGNORVOL);        /* SAID IGNORE                   */
@RF01907 LA    @15,4                                               1934
         L     @14,@SA00006                                        1934
         LM    @00,@12,@SA00006+8                                  1934
         BR    @14                                                 1934
*   END OPENA;                                                     1935
*                                                                  1936
*/********************************************************************/
*/*                                                                  */
*/* OPENB: SUBROUTINE TO PUT OUT MESSAGE                             */
*/*                                                                  */
*/* INPUT: DSTEPTR POINTING TO ILRDSTBL ENTRY TO USE                 */
*/*        SWAP AND DUPLEX INDICATORS                                */
*/*                                                                  */
*/* PROCESS: CAN BE INVOKED BY: OPENA SUBROUTINE                     */
*/*                             MAIN ROUTINE:                        */
*/*                1. COLD START AND SPECIFY NON-UNIQUE DUPLEX D.S.  */
*/*                2. WARM START- UPON RESPECIFYING COMMON DATA SET  */
*/*                    UNIQUE IN ILRDSTBL, BUT MATCHES A NEEDED      */
*/*                    LOCAL DATA SET.  ALSO PREVIOUS COMMON HAS     */
*/*                    ATTEMPTED THIS IPL TOO.                       */
*/*               PUTS OUT MESSAGE IEA918I                           */
*/*                                                                  */
*/* OUTPUT: MESSAGE IEA918I                                          */
*/*                                                                  */
*/********************************************************************/
*/*OPENB: CHART                                                      */
*/*HEADER                                                          1936
*/*  ILRASRIM                                                      1936
*/* OPENB: PUT OUT MESSAGE IEA918I BEFORE OPENA CALLED               */
*/*OPENB:  E ENTRY TO ISSUE IEA918I                                  */
*/*        S ILRIMMSG: ISSUE MESSAGES IEA918I                        */
*/*        R RETURN TO CALLER                                        */
*/*OPENB: END                                                        */
*                                                                  1936
*OPENB:                                                            1936
*   PROC;                           /* ISSUE MESSAGE IEA918I         */
OPENB    STM   @14,@12,@SA00007                                    1936
*   MSGID=M918I;                    /* MSG ID                        */
         MVC   MSGID(4),@CC02547                                   1937
*   MSGDATA1=DSTEPTR;               /* DSNAME                        */
         ST    DSTEPTR,MSGDATA1                                    1938
*   IF SWAPSW=ON THEN                                              1939
         TM    SWAPSW,B'00001000'                                  1939
         BNO   @RF01939                                            1939
*     FLAGS=SWAPEQ;                 /* SWAP IN MESSAGE               */
         MVI   FLAGS,X'40'                                         1940
*   ELSE                                                           1941
*     DO;                           /* NOT SWAP                      */
         B     @RC01939                                            1941
@RF01939 DS    0H                                                  1942
*       IF DUPLEXSW=ON THEN                                        1942
         TM    DUPLEXSW,B'00000100'                                1942
         BNO   @RF01942                                            1942
*         FLAGS=DUPEQ;              /* DUPLEX IN MESSAGE             */
         MVI   FLAGS,X'20'                                         1943
*       ELSE                                                       1944
*         FLAGS=PAGEQ;              /* PAGE IN MESSAGE               */
         B     @RC01942                                            1944
@RF01942 MVI   FLAGS,X'80'                                         1944
*     END;                          /* NOT SWAP                      */
@RC01942 DS    0H                                                  1946
*   R1=ADDR(MSGPL);                 /* PARM TO ILRIMMSG              */
@RC01939 LA    R1,MSGPL                                            1946
*   CALL ILRIMMSG;                  /* MESSAGE MODULE                */
         L     @15,@CV02592                                        1947
         BALR  @14,@15                                             1947
*   END OPENB;                                                     1948
@EL00007 DS    0H                                                  1948
@EF00007 DS    0H                                                  1948
@ER00007 LM    @14,@12,@SA00007                                    1948
         BR    @14                                                 1948
*                                                                  1949
*/****************************************************************** */
*/*                                                                  */
*/* TPARPATS: SUBROUTINE TO FILL IN ILRTPARB ENTRY WITH OPEN         */
*/*           INFORMATION AND INITIALIZE ILRPAT FOR DATA SET         */
*/*                                                                  */
*/* INPUT: TPAEPTR POINTING TO ILRTPAR ENTRY TO USE                  */
*/*        RETURN PARAMETER LIST FROM ILROPS00                       */
*/*        DSTEPTR POINTS TO DUPLEX ENTRY OF ILRDSTBL, IF DUPLEX D.S.*/
*/*                                                                  */
*/* PROCESS: PUT INFORMATION ABOUT THE DATA SET IN ILRTPARB ENTRY.   */
*/*          VERIFY SOME INFORMATION IF DATA SET USED PREVIOUSLY AND */
*/*          ISSUE MESSAGE RELATING TO PROBLEMS.  GETMAIN AND        */
*/*          INITIALIZE ILRPAT FOR THE DATA SET.  UPDATE FLAGS IN    */
*/*          ILRTPARB ENTRY.                                         */
*/*                                                                  */
*/* OUTPUT: COMPLETED ILRTPARB ENTRY                                 */
*/*         INITIALIZED ILRPAT FOR THE ENTRY                         */
*/*         IF ERROR, A NON-ZERO RETURN CODE AND NONE OF THE ABOVE   */
*/*                                                                  */
*/********************************************************************/
*/*TPARPATS: CHART                                                   */
*/*HEADER                                                          1949
*/*  ILRASRIM                                                      1949
*/* TPARPATS: FILL IN ILRTPARB ENTRY AND ILRPAT FOR A DATA SET       */
*/*TPARPATS: E ENTRY TO DO ILRTPARB ENTRY AND BUILD PAT              */
*/*          P PUT DATA SET INFO INTO ILRTPARB ENTRY                 */
*/*          N SCAN HARDCODED DEVTAB FOR PCT FOR THIS DEVICE         */
*/*          D (YES,,NO,%A1) FOUND DEVICE INFO(PCT)?                 */
*/*          N CHECK SLOTS OF PREVIOUS PLPA, DUPLEX, OR LOCAL D.S.   */
*/*          D (NO,,YES,%A2) NO NEED TO CHECK SLOTS OR SLOTS O.K.?   */
*/*%A1:      S ILRIMMSG: ISSUE MESSAGE IEA921I                       */
*/*          P (,%A4) RETURN CODE IS 4                               */
*/*%A2:      P PUT NUMBER OF SLOTS IN TPARB ENTRY                    */
*/*          P CALCULATE SIZE OF ILRPAT                              */
*/*          L UNCONDITIONAL GETMAIN FOR PAT                         */
*/*          P ZERO AND FILL IN PAT HEADER                           */
*/*          P INITIALIZE CYLINDER MAPS IN PAT                       */
*/*          P INCREASE ACTIVE DATA SET COUNT                        */
*/*          P VALIDATE ENTRY                                        */
*/*          D (YES,,NO,%A3) IS NOT PREVIOUSLY USED DATA SET?        */
*/*          P MARK ENTRY AS SPECIFIED BY PARAMETERS                 */
*/*%A3:      P RETURN CODE 0                                         */
*/*%A4:      R RETURN                                                */
*/*TPARPATS: END                                                     */
*                                                                  1949
*TPARPATS:                                                         1949
*   PROC;                           /* FILL IN TPAE & BUILD PAT      */
TPARPATS STM   @14,@12,@SA00008                                    1949
*   TPAEIORB=RTNIORBP;              /* IORB POINTER                  */
         L     @08,TPAEPTR                                         1950
         LA    @06,PARMDSN                                         1950
         L     @00,RTNIORBP(,@06)                                  1950
         ST    @00,TPAEIORB(,@08)                                  1950
*   TPAEEDB=RTNEDBP;                /* EDB POINTER                   */
         L     @00,RTNEDBP(,@06)                                   1951
         ST    @00,TPAEEDB(,@08)                                   1951
*   TPAEUCB=RTNUCBP;                /* UCB POINTER                   */
         L     @00,RTNUCBP(,@06)                                   1952
         ST    @00,TPAEUCB(,@08)                                   1952
*   TPAETYPE=DEVTYP;                /* DEVICE TYPE                   */
         MVC   TPAETYPE(2,@08),DEVTYP(@06)                         1953
*   PCTPTR=ADDR(DVTENT);            /* 1ST PCT IN DEVTAB             */
         LA    @08,DVTENT                                          1954
         ST    @08,PCTPTR                                          1954
*   COUNT=ONE;                      /* NUMBER OF PCTS TO SEARCH      */
         MVC   COUNT(2),@CH00059                                   1955
*   DO WHILE COUNT<=DVTHEC&PCTDTYPX^=TPAETYPE;/* ALL OR FIND DEV TYPE*/
         B     @DE01956                                            1956
@DL01956 DS    0H                                                  1957
*     PCTPTR=PCTPTR+DVTLNG(COUNT);  /* NEXT DEVTAB ENTRY (PCT)       */
         LH    @08,COUNT                                           1957
         LR    @06,@08                                             1957
         SLA   @06,2                                               1957
         L     @00,PCTPTR                                          1957
         AL    @00,DVTLNG-4(@06)                                   1957
         ST    @00,PCTPTR                                          1957
*     COUNT=COUNT+ONE;              /* LOOKED AT ONE DEVICE          */
         LA    @08,1(,@08)                                         1958
         STH   @08,COUNT                                           1958
*   END;                            /* ALL OR FIND DEVICE TYPE       */
@DE01956 LH    @08,COUNT                                           1959
         CH    @08,DVTHEC                                          1959
         BH    @DC01956                                            1959
         L     @08,PCTPTR                                          1959
         L     @06,TPAEPTR                                         1959
         CLC   PCTDTYPX(2,@08),TPAETYPE(@06)                       1959
         BNE   @DL01956                                            1959
@DC01956 DS    0H                                                  1960
*   IF COUNT>DVTHEC×                /* PROBLEMS-NOT VALID DEVICE TYPE*/
*       (TPAEPRVI=ON&TPAESZSL^=SLOTNBR) THEN                       1960
         LH    @08,COUNT                                           1960
         CH    @08,DVTHEC                                          1960
         BH    @RT01960                                            1960
         L     @08,TPAEPTR                                         1960
         TM    TPAEPRVI(@08),B'01000000'                           1960
         BNO   @RF01960                                            1960
         LA    @06,PARMDSN                                         1960
         CLC   TPAESZSL(4,@08),SLOTNBR(@06)                        1960
         BE    @RF01960                                            1960
@RT01960 DS    0H                                                  1961
*     DO;                           /* OR SLOTS NOT SAME             */
*       IF DUPLEXSW=ON THEN                                        1962
         TM    DUPLEXSW,B'00000100'                                1962
         BNO   @RF01962                                            1962
*         MSGDATA1=ADDR(DSTDSN);    /* NOT IN TPARB                  */
         ST    DSTEPTR,MSGDATA1                                    1963
*       ELSE                                                       1964
*         MSGDATA1=ADDR(TPAEDSN);   /* NAME HAS BEEN PUT IN TPARB    */
         B     @RC01962                                            1964
@RF01962 L     @08,TPAEPTR                                         1964
         LA    @08,TPAEDSN(,@08)                                   1964
         ST    @08,MSGDATA1                                        1964
*       MSGID=M921I;                /* DATA SET INVALID              */
@RC01962 MVC   MSGID(4),@CC02551                                   1965
*       R1=ADDR(MSGPL);             /* PARM TO MESSAGE MODULE        */
         LA    R1,MSGPL                                            1966
*       CALL ILRIMMSG;              /* MESSAGE MODULE                */
         L     @15,@CV02592                                        1967
         BALR  @14,@15                                             1967
*       RETURN CODE(4);             /* FLAG AS ERROR                 */
         LA    @15,4                                               1968
         L     @14,@SA00008                                        1968
         LM    @00,@12,@SA00008+8                                  1968
         BR    @14                                                 1968
*     END;                          /* PROBLEMS                      */
*   ELSE                                                           1970
*     DO;                           /* NO PROBLEMS                   */
@RF01960 DS    0H                                                  1971
*       TPAEPCT=PCTPTR;             /* POINTER TO MATCHING DEVTAB ENT*/
         L     @06,PCTPTR                                          1971
         L     @03,TPAEPTR                                         1971
         ST    @06,TPAEPCT(,@03)                                   1971
*       TPAESZSL=SLOTNBR;           /* SIZE IS NUMBER OF SLOTS       */
         LA    @15,PARMDSN                                         1972
         L     @15,SLOTNBR(,@15)                                   1972
         ST    @15,TPAESZSL(,@03)                                  1972
*       CYLS=SLOTNBR/PCTCYLSZ;      /* SLOTS/ SLOTS PER CYLINDER     */
         LH    @06,PCTCYLSZ(,@06)                                  1973
         SLR   @14,@14                                             1973
         DR    @14,@06                                             1973
         LR    CYLS,@15                                            1973
*       RFY                                                        1974
*        (R14,                                                     1974
*         R15) RSTD;                                               1974
*       R14=0;                      /* CLEAR EVEN REGISTER           */
         SLR   R14,R14                                             1975
*       R15=PCTCYLSZ;               /* SLOTS PER CYL                 */
         LR    R15,@06                                             1976
*       R1=N32;                     /* BITS IN A WORD                */
         LA    R1,32                                               1977
*       GENERATE REFS(R1,R14,R15) SETS(R14,R15);                   1978
    DR R14,R1
*       CYLMW=R15;                  /* WORDS NEEDED TO MAP A CYLINDER*/
         LR    CYLMW,R15                                           1979
*       IF R14^=0 THEN                                             1980
         LTR   R14,R14                                             1980
         BZ    @RF01980                                            1980
*         CYLMW=CYLMW+ONE;          /* MAP THE REMAINDER             */
         AL    CYLMW,@CF00059                                      1981
*       RFY                                                        1982
*        (R14,                                                     1982
*         R15) UNRSTD;                                             1982
@RF01980 DS    0H                                                  1983
*       RFY                                                        1983
*        (R0) RSTD;                                                1983
*                                                                  1983
*/*  LENGTH OF PAT IS PAT HEADER + PATMAP (IN BYTES IN NEAREST DWORD)*/
*                                                                  1984
*       R0=LENGTH(PATHDR)+((CYLS*FOUR*CYLMW+SEVEN)/EIGHT)*EIGHT;   1984
         LR    @05,CYLS                                            1984
         SLA   @05,2                                               1984
         MR    @04,CYLMW                                           1984
         LR    @14,@05                                             1984
         AL    @14,@CF00061                                        1984
         SRDA  @14,32                                              1984
         D     @14,@CF00056                                        1984
         SLA   @15,3                                               1984
         AL    @15,@CF00111                                        1984
         LR    R0,@15                                              1984
*       TPAEPATB=R0;                /* PUT LENGTH OF PAT IN TPARB    */
         L     @06,TPAEPTR                                         1985
         ST    R0,TPAEPATB(,@06)                                   1985
*       DO;                         /* GETMAIN (RU) LV(R0)         1986
*                                      SP(SQASPID)                   */
*         RESPECIFY                                                1987
*          (GPR01F,                                                1987
*           GPR15F,                                                1987
*           GPR00F) RESTRICTED;                                    1987
*         GPR01F=0;                 /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       1988
*         GPR15F=2;                 /* RU-TYPE GETMAIN               */
         LA    GPR15F,2                                            1989
*         GPR00F=R0;                /* LENGTH REQUESTED              */
*         GPR15F=GPR15F×((SQASPID)*256);/* SP IN BYTE 2              */
         O     GPR15F,@CF02881                                     1991
*         SVC(120);                 /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 1992
*         RESPECIFY                                                1993
*          (GPR01F,                                                1993
*           GPR15F,                                                1993
*           GPR00F) UNRESTRICTED;                                  1993
*       END;                        /* GETMAIN (RU) LV(R0)         1994
*                                      SP(SQASPID)                   */
*       RFY                                                        1995
*        (R0) UNRSTD;                                              1995
*       TPAEPATP=R1;                /* POINTER TO PAT                */
         L     @06,TPAEPTR                                         1996
         ST    R1,TPAEPATP(,@06)                                   1996
*       PATPTR=TPAEPATP;            /* INIT PAT ADDRESS              */
         L     @03,TPAEPTR                                         1997
         L     @03,TPAEPATP(,@03)                                  1997
         ST    @03,PATPTR                                          1997
*       PATHDR=''B;                 /* ZERO PAT HEADER               */
         XC    PATHDR(16,@03),PATHDR(@03)                          1998
*       PATIDENT=PATID;             /* PAT IDENTIFIER                */
         MVC   PATIDENT(4,@03),@CC02479                            1999
*       PATCYLNO=CYLS;              /* NUMBER OF CYLINDERS           */
         STH   CYLS,PATCYLNO(,@03)                                 2000
*       PATCYLSZ=PCTCYLSZ;          /* SLOTS IN CYLINDER             */
         L     @15,PCTPTR                                          2001
         LH    @00,PCTCYLSZ(,@15)                                  2001
         STH   @00,PATCYLSZ(,@03)                                  2001
*       PATCYLMW=CYLMW;             /* NUMBER OF WORDS TO MAP A CYL  */
         STH   CYLMW,PATCYLMW(,@03)                                2002
*/*    INITIALIZE THE PAT MAP AREA                                   */
*                                                                  2003
*       PATCYLA=ADDR(PATCYLS(1));   /* ADDRESS OF FIRST MAP          */
         LA    PATCYLA,PATCYLS(,@03)                               2003
*       ENDPAT=PATPTR+TPAEPATB;     /* END OF PAT                    */
         AL    @03,TPAEPATB(,@06)                                  2004
         LR    ENDPAT,@03                                          2004
*       DO WHILE PATCYLA^=ENDPAT;   /* DO ALL OF PAT MAP             */
         B     @DE02005                                            2005
@DL02005 DS    0H                                                  2006
*         PATCYLMP=PCTDMASK;        /* COPY IN 8 BYTE MASK FOR DEVICE*/
         L     @06,PCTPTR                                          2006
         MVC   PATCYLMP(8,PATCYLA),PCTDMASK(@06)                   2006
*         PATCYLA=PATCYLA+LENGTH(PATCYLMP);/* NEXT 8 BYTES           */
         AL    PATCYLA,@CF00056                                    2007
*       END;                        /* DO ALL OF PAT MAP             */
@DE02005 CR    PATCYLA,ENDPAT                                      2008
         BNE   @DL02005                                            2008
*       TPARNPGS=TPARNPGS+ONE;      /* ONE MORE ACTIVE DATA SET      */
         L     @08,TPARPTR                                         2009
         LA    @06,1                                               2009
         AL    @06,TPARNPGS(,@08)                                  2009
         ST    @06,TPARNPGS(,@08)                                  2009
*       TPAEVALD=YES;               /* DATA SET IS VALID             */
         L     @08,TPAEPTR                                         2010
         OI    TPAEVALD(@08),B'00001000'                           2010
*       IF TPAEPRVI=OFF THEN                                       2011
         TM    TPAEPRVI(@08),B'01000000'                           2011
         BNZ   @RF02011                                            2011
*         TPAEPARM=ON;              /* IF NOT LAST IPL , THIS IPL    */
         OI    TPAEPARM(@08),B'10000000'                           2012
*       ELSE                                                       2013
*         ;                         /* LAST IPL                      */
@RF02011 DS    0H                                                  2014
*       RETURN CODE(0);             /* RETURN SUCCESSFULLY           */
         SLR   @15,@15                                             2014
         L     @14,@SA00008                                        2014
         LM    @00,@12,@SA00008+8                                  2014
         BR    @14                                                 2014
*     END;                          /* NO PROBLEMS                   */
*   END TPARPATS;                                                  2016
*                                                                  2017
*/****************************************************************** */
*/*                                                                  */
*/* LOCALN: SUBROUTINE TO OPEN NEEDED LOCAL PAGE DATA SETS ON A WARM */
*/*         START                                                    */
*/*                                                                  */
*/* INPUT: PARAMETER LIST FILLED IN FOR ROUTINE ILROPS00             */
*/*                                                                  */
*/* PROCESS: INVOKED DURING NEEDLOCL AND OPENLOCL PROCESSING         */
*/*          CALL OPEN SUBROUTINE AND PROCESS THE RETURN CODES       */
*/*          ACCORDING TO NEEDED LOCALS REQUIREMENTS.                */
*/*                                                                  */
*/* OUTPUT: EITHER DATA SET OPENED SATISFACTORILY OR IPL IS NOW A    */
*/*         QUICK(CVIO) START                                        */
*/*                                                                  */
*/********************************************************************/
*/*LOCALN: CHART                                                     */
*/*HEADER                                                          2017
*/*  ILRASRIM                                                      2017
*/* LOCALN: MOUNT OR OPEN NEEDED LOCALS ON WARM START                */
*/*LOCALN: E ENTRY TO MOUNT OR OPEN NEEDED LOCALS                    */
*/*%A1:    S OPEN: COMMON SUBROUTINE TO CALL ILROPS00                */
*/*        D (NO,,YES,%A3) SUCCESSFUL?                               */
*/*        D (YES,,NO,%A2) MOUNT FAIL?                               */
*/*        S ILRIMMSG: ISSUE MESSAGE IEA925D                         */
*/*        D (YES,,NO,%A1) OPERATOR REPLIED 'IGNORE'?                */
*/*%A2:    N LOCATE FAILED OR 'IGNORE' TO MOUNT FAIL                 */
*/*        P CHANGE IPL INDICATORS IN IHANVT                         */
*/*        S ILRIMMSG: ISSUE MESSAGE IEA930I(FORCE CVIO)             */
*/*%A3:    R RETURN, SUCCESSFUL OR CVIO                              */
*/*LOCALN: END                                                       */
*                                                                  2017
*LOCALN:                                                           2017
*   PROC;                           /* OPEN NEEDED LOCALS            */
LOCALN   STM   @14,@12,@SA00009                                    2017
*REDOL:                                                            2018
*   PARMDSN=TPAEDSN;                /* DATA SET NAME (OVERLAID BY  2018
*                                      OPS)                          */
REDOL    L     @08,TPAEPTR                                         2018
         MVC   PARMDSN(44),TPAEDSN(@08)                            2018
*   RFY                                                            2019
*     R15 RSTD;                                                    2019
*   CALL OPEN;                      /* OPEN SUBROUTINE               */
         BAL   @14,OPEN                                            2020
*   IF R15^=ZERO THEN                                              2021
         LTR   R15,R15                                             2021
         BZ    @RF02021                                            2021
*     DO;                           /* NOT SUCCESSFUL?               */
*       IF R15=NOVOLMNT THEN                                       2023
         C     R15,@CF00056                                        2023
         BNE   @RF02023                                            2023
*         DO;                       /* MOUNT FAILED?                 */
*           RFY                                                    2025
*             R15 UNRSTD;                                          2025
*           MSGID=M925D;            /* ASK TO MOUNT                  */
         MVC   MSGID(4),@CC02559                                   2026
*           MSGDATA1=ADDR(VOLSER);  /* VOL SER                       */
         LA    @08,PARMDSN                                         2027
         LA    @08,VOLSER(,@08)                                    2027
         ST    @08,MSGDATA1                                        2027
*           R1=ADDR(MSGPL);         /* PARM TO ILRIMMSG              */
         LA    R1,MSGPL                                            2028
*           CALL ILRIMMSG;          /* MESSAGE MODULE                */
         L     @15,@CV02592                                        2029
         BALR  @14,@15                                             2029
*           IF R1->MSGBUF(1:LENGTH(IGNORE))^=IGNORE THEN           2030
         CLC   MSGBUF(6,R1),@CC02477                               2030
         BNE   @RT02030                                            2030
*             GOTO REDOL;                                          2031
*           ELSE                                                   2032
*             ;                     /* OPER SAID IGNORE              */
*         END;                      /* MOUNT FAILED                  */
*       ELSE                                                       2034
*         ;                         /* LOCATE FAILED                 */
*                                                                  2034
@RF02023 DS    0H                                                  2035
*       /*************************************************************/
*       /*                                                           */
*       /* EITHER OPER SAID IGNORE OR LOCATE FAILED , FORCE CVIO     */
*       /*                                                           */
*       /*************************************************************/
*                                                                  2035
*       MSGID=M930I;                /* FORCE CVIO                    */
         MVC   MSGID(4),@CC02565                                   2035
*       R1=ADDR(MSGPL);             /* PARM TO ILRIMMSG              */
         LA    R1,MSGPL                                            2036
*       CALL ILRIMMSG;              /* MESSAGE MODULE                */
         L     @15,@CV02592                                        2037
         BALR  @14,@15                                             2037
*       NVTFLWS=NO;                 /* NOT WARM START NOW            */
         L     @08,NVTPTR                                          2038
         NI    NVTFLWS(@08),B'11111011'                            2038
*     END;                          /* NOT SUCCESSFUL                */
*   ELSE                                                           2040
*     ;                             /* SUCCESSFUL                    */
@RF02021 DS    0H                                                  2041
*   END LOCALN;                                                    2041
@EL00009 DS    0H                                                  2041
@EF00009 DS    0H                                                  2041
@ER00009 LM    @14,@12,@SA00009                                    2041
         BR    @14                                                 2041
*                                                                  2042
*/********************************************************************/
*/*                                                                  */
*/* BADDUP: SUBROUTINE TO PUT OUT MESSAGE IEA942I AND                */
*/*         SHUT OFF DUPLEXING THIS IPL                              */
*/*                                                                  */
*/* INPUT: BADDS SWITCH                                              */
*/*                                                                  */
*/* PROCESS: TURN OFF DUPLEXING IN ASMVT.  MARK TPARB ENTRY TO BE    */
*/*          SHIPPED THIS IPL.  ON COLD START, REMOVE DUPLEX NAME    */
*/*          FROM ILRDSTBL, SO IT IS NOT USED LATER WHEN CHECKING    */
*/*          FOR DUPLICATES. PUT OUT MESSAGE TO INFORM OPERATOR OF   */
*/*          ACTION.                                                 */
*/*                                                                  */
*/* OUTPUT: DUPLEXING OFF FOR THIS IPL                               */
*/*         MESSAGE IEA942I ISSUED                                   */
*/*                                                                  */
*/********************************************************************/
*                                                                  2042
*BADDUP:                                                           2042
*   PROC;                                                          2042
BADDUP   STM   @14,@12,@SA00010                                    2042
*   IF BADDS=YES THEN                                              2043
         TM    BADDS,B'00000001'                                   2043
         BNO   @RF02043                                            2043
*     MSGDATA1=ADDR(NODATST);       /* DIDNOT GET GOOD DS            */
         LA    @08,NODATST                                         2044
         ST    @08,MSGDATA1                                        2044
*   ELSE                                                           2045
*     MSGDATA1=ADDR(BADCLCK);       /* BAD TIMESTAMP                 */
         B     @RC02043                                            2045
@RF02043 LA    @08,BADCLCK                                         2045
         ST    @08,MSGDATA1                                        2045
*   TPAESKIP=ON;                    /* SKIP TPARB ENTRY              */
@RC02043 L     @08,TPAEPTR                                         2046
         OI    TPAESKIP(@08),B'00010000'                           2046
*   ASMDUPLX=OFF;                   /* NO LONGER DUPLEXING           */
         L     @08,CVTPTR                                          2047
         L     @08,ASMVTPTR(,@08)                                  2047
         NI    ASMDUPLX(@08),B'01111111'                           2047
*   IF NVTFLQS=OFF THEN                                            2048
         L     @08,NVTPTR                                          2048
         TM    NVTFLQS(@08),B'00001000'                            2048
         BNZ   @RF02048                                            2048
*     DSTDSN=''B;                   /* WILL NEVER USE DATA SET       */
         XC    DSTDSN(44,DSTEPTR),DSTDSN(DSTEPTR)                  2049
*   ELSE                                                           2050
*     ;                             /* QUICK OR WARM                 */
@RF02048 DS    0H                                                  2051
*   MSGID=M942I;                    /* NO MORE DUPLEX                */
         MVC   MSGID(4),@CC02579                                   2051
*   R1=ADDR(MSGPL);                 /* PARM TO ILRIMMSG              */
         LA    R1,MSGPL                                            2052
*   CALL ILRIMMSG;                  /* MESSAGE MODULE                */
         L     @15,@CV02592                                        2053
         BALR  @14,@15                                             2053
*   END BADDUP;                                                    2054
@EL00010 DS    0H                                                  2054
@EF00010 DS    0H                                                  2054
@ER00010 LM    @14,@12,@SA00010                                    2054
         BR    @14                                                 2054
*                                                                  2055
*/********************************************************************/
*/*                                                                  */
*/* COMMCOLD: SUBROUTINE TO FORCE A COLD START AFTER ILRTPARB AND    */
*/*           ILRQSRCD ARE ALREADY INITIALIZED, BUT LOCALS HAVE NOT  */
*/*           BEEN PROCESSED.                                        */
*/*                                                                  */
*/* INPUT: NVT                                                       */
*/*        ILRTPARB                                                  */
*/*        ILRQSRCD                                                  */
*/*                                                                  */
*/* PROCESS: ISSUE MESSAGE IEA929I. REMOVE ANY NEEDED LOCALS IN      */
*/*          ILRTPARB AND RESET TPARUSE. REINITIALIZE ILRQSRCD       */
*/*          HEADER. UPDATE NVT FLAGS AND PLPA RANGE FIELDS.         */
*/*                                                                  */
*/* OUTPUT: UPDATED NVT, ILRTPARB, ILRQSRCD                          */
*/*         MESSAGE IEA929I                                          */
*/********************************************************************/
*/*COMMCOLD: CHART                                                   */
*/*HEADER                                                          2055
*/*  ILRASRIM                                                      2055
*/* COMMCOLD: FORCE COLD START                                       */
*/*COMMCOLD: E ENTRY TO FORCE COLD START                             */
*/*          S ILRIMMSG: FORCE COLD START                            */
*/*          D (YES,,NO,%A1) LOCALS IN TPARB?                        */
*/*          P ZERO TPARB LOCAL ENTRIES                              */
*/*          P RESET TPARB ENTRIES COUNT                             */
*/*%A1:      P REINIT QSR HEADER                                     */
*/*          P REINIT PLPA INFO IN QSR                               */
*/*          P REINIT NVT IPL FLAGS                                  */
*/*COMMCOLD: END                                                     */
*                                                                  2055
*COMMCOLD:                                                         2055
*   PROC;                                                          2055
COMMCOLD STM   @14,@12,@SA00011                                    2055
*   MSGID=M929I;                    /* COLD START FORCED             */
         MVC   MSGID(4),@CC02563                                   2056
*   R1=ADDR(MSGPL);                 /* PARM TO ILRIMMSG              */
         LA    R1,MSGPL                                            2057
*   CALL ILRIMMSG;                  /* MESSAGE MODULE                */
         L     @15,@CV02592                                        2058
         BALR  @14,@15                                             2058
*   IF NVTFLWS=YES THEN                                            2059
         L     @08,NVTPTR                                          2059
         TM    NVTFLWS(@08),B'00000100'                            2059
         BNO   @RF02059                                            2059
*     DO;                           /* LOCALS IN TPARB?              */
*       RFY                                                        2061
*        (R0,                                                      2061
*         R14,                                                     2061
*         R15) RSTD;                                               2061
*                                                                  2061
*/*                   ZERO ALL LOCAL ENTRIES FROM LAST IPL           */
*                                                                  2062
*       R0=LOCTPTR;                 /* 1ST LOCAL IN ILRTPARB 1ST     */
         L     R0,LOCTPTR                                          2062
*       R1=(TPARUSE-INITUSE)*(LENGTH(TPARENT));/* LENGTH             */
         L     @08,TPARPTR                                         2063
         L     R1,TPARUSE(,@08)                                    2063
         SL    R1,@CF00092                                         2063
         MH    R1,@CH00073                                         2063
*       R15=ZERO;                                                  2064
         SLR   R15,R15                                             2064
*       MVCL(R0,R14);               /* ZEROES ALL PREVIOUS LOCALS    */
         MVCL  R0,R14                                              2065
*       RFY                                                        2066
*        (R0,                                                      2066
*         R14,                                                     2066
*         R15) UNRSTD;                                             2066
*       TPARUSE=INITUSE;            /* ENTRIES IN USE NOW            */
         L     @08,TPARPTR                                         2067
         MVC   TPARUSE(4,@08),@CF00092                             2067
*     END;                          /* LOCALS IN TPARB               */
*   ELSE                                                           2069
*     ;                             /* COLD OR QUICK START           */
@RF02059 DS    0H                                                  2070
*   QSRHDR=''B;                     /* ZERO HEADER                   */
         L     @08,QSRPTR                                          2070
         XC    QSRHDR(32,@08),QSRHDR(@08)                          2070
*   QSRIDNT=QSRID;                  /* PUT IN IDENTIFIER             */
         MVC   QSRIDNT(8,@08),@CC02483                             2071
*   NVTLPALO=''B;                   /* LPA NOT WRITTEN               */
         SLR   @08,@08                                             2072
         L     @15,NVTPTR                                          2072
         ST    @08,NVTLPALO(,@15)                                  2072
*   NVTLPAND=''B;                   /* HIGH RANGE                    */
         ST    @08,NVTLPAND(,@15)                                  2073
*   NVTLPAHA=''B;                   /* NO HASH VALUE                 */
         ST    @08,NVTLPAHA(,@15)                                  2074
*   NVTFLQS=NO;                     /* FORCED COLD START             */
*   NVTFLWS=NO;                     /* FORCED COLD START             */
         NI    NVTFLQS(@15),B'11110011'                            2076
*   END COMMCOLD;                                                  2077
@EL00011 DS    0H                                                  2077
@EF00011 DS    0H                                                  2077
@ER00011 LM    @14,@12,@SA00011                                    2077
         BR    @14                                                 2077
*                                                                  2078
*/********************************************************************/
*/*                                                                  */
*/* MARKPAT: MARK ONE BIT ON IN A ILRPAT                             */
*/*                                                                  */
*/* INPUT: PATPTR AND RELATIVE SLOT IN AREA CALLED SLOT              */
*/*                                                                  */
*/* PROCESS: CALCULATE THE CORRECT PAT MAP WORD AND THE RELATIVE     */
*/*          BIT IN THAT WORD. USE MACRO ILRBITMM TO TURN THE BIT ON */
*/*                                                                  */
*/* OUTPUT: ONE BIT ON IN THE PAT SPECIFIED                          */
*/*                                                                  */
*/********************************************************************/
*/*MARKPAT: CHART                                                    */
*/*HEADER                                                          2078
*/*  ILRASRIM                                                      2078
*/* MARKPAT: TURN ON A BIT IN A PAT                                  */
*/*MARKPAT: E ENTRY TO MARK A SLOT IN USE                            */
*/*         P CALCULATE THE CORRECT CYLINDER MAP                     */
*/*         D (NO,,YES,%A1) BIT IN FIRST WORD OF MAP                 */
*/*         P MOVE TO THE SECOND WORD                                */
*/*         P SUBTRACT ONE WORD OF BITS                              */
*/*%A1:     M ILRBITMM THE BIT IN THIS WORD                          */
*/*         R RETURN                                                 */
*/*MARKPAT: END                                                      */
*                                                                  2078
*MARKPAT:                                                          2078
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               2078
MARKPAT  DS    0H                                                  2079
*   RFY                                                            2079
*    (R14,                                                         2079
*     R15) RSTD;                                                   2079
*   SAVER14A=R14;                   /* SAVE RETURN ADDRESS           */
         ST    R14,SAVER14A                                        2080
*   R14=0;                          /* CLEAR EVEN REGISTER           */
         SLR   R14,R14                                             2081
*   R15=SLOT;                       /* RELATIVE SLOT                 */
         LR    R15,SLOT                                            2082
*   R1=PATCYLSZ;                    /* SLOTS PER CYL                 */
         L     @06,PATPTR                                          2083
         LH    R1,PATCYLSZ(,@06)                                   2083
*   GENERATE REFS(R1,R14,R15) SETS(R14,R15);                       2084
   DR  R14,R1
*   R1=ADDR(PATCYLS(R15*PATCYLMW+1));/* CORRECT CYL MAP              */
         L     @06,PATPTR                                          2085
         LR    @05,R15                                             2085
         MH    @05,PATCYLMW(,@06)                                  2085
         SLA   @05,2                                               2085
         LA    R1,PATCYLS(@05,@06)                                 2085
*   IF R14>=N32 THEN                                               2086
         LA    @06,32                                              2086
         CR    R14,@06                                             2086
         BL    @RF02086                                            2086
*     DO;                           /* BIGGER THAN A WORD?           */
*       R14=R14-N32;                /* REMAINDER OVER ONE WORD       */
         SLR   R14,@06                                             2088
*       R1=R1+FOUR;                 /* POINT TO NEXT WORD            */
         AL    R1,@CF00069                                         2089
*     END;                          /* BIGGER THAN A WORD            */
*   ELSE                                                           2091
*     ;                             /* NOT BIGGER                    */
@RF02086 DS    0H                                                  2092
*   R15=R14;                        /* REMAINDER(DISPLACEMENT) IN REG
*                                      15                            */
         LR    R15,R14                                             2092
*/*   ILRBITMM INVOCATION                                          2093
*       BITMAP(R1,ONEWRD)SET(ON,NOMP)BIT(R15)                        */
*                                                                  2093
*   DCL                                                            2093
*     BITMMCB1 BIT(32) CONSTANT('80000000'X);                      2093
*   DCL                                                            2094
*     BITMMWRD FIXED(31) BDY(WORD) BASED(R1);                      2094
*   DCL                                                            2095
*     BITMSK31 FIXED(8) CONSTANT(31);                              2095
*   DCL                                                            2096
*     BITMMC32 FIXED(8) CONSTANT(32);                              2096
*   DO;                                                            2097
*     RFY                                                          2098
*      (R0,                                                        2098
*       R1,                                                        2098
*       R2,                                                        2098
*       R14,                                                       2098
*       R15) RSTD;                  /* RESTRICT WORK REGS    @Z40WPWG*/
*     R14=BITMMCB1;                 /* BUILD MASK                    */
         L     R14,@CF01386                                        2099
*     GEN(SRL   R14,0(R15));                                       2100
         SRL   R14,0(R15)
*     BITMMWRD=BITMMWRD×R14;        /* TURN BIT ON                   */
         L     @06,BITMMWRD(,R1)                                   2101
         OR    @06,R14                                             2101
         ST    @06,BITMMWRD(,R1)                                   2101
*BITMMX37:                                                         2102
*     RFY                                                          2102
*      (R0,                                                        2102
*       R1,                                                        2102
*       R2,                                                        2102
*       R14,                                                       2102
*       R15) UNRSTD;                /* RELEASE WRK REGS      @Z40WPWG*/
BITMMX37 DS    0H                                                  2103
*   END;                            /* END OF ILRBITMM PROCESSING  2103
*                                      TURN ON BIT                   */
*   RFY                                                            2104
*     R14 RSTD;                                                    2104
*   R14=SAVER14A;                   /* RESTORE RETURN ADDRESS        */
         L     R14,SAVER14A                                        2105
*   END MARKPAT;                                                   2106
@EL00012 DS    0H                                                  2106
@EF00012 DS    0H                                                  2106
@ER00012 BR    @14                                                 2106
*   DECLARE                         /* GENERAL PURPOSE REGISTERS     */
*     GPR00F FIXED(31) REG(0),                                     2107
*     GPR01F FIXED(31) REG(1),                                     2107
*     GPR15F FIXED(31) REG(15),                                    2107
*     GPR00P PTR(31) REG(0),                                       2107
*     GPR01P PTR(31) REG(1);                                       2107
*   DECLARE                         /* COMMON VARIABLES              */
*     I256C CHAR(256) BASED,                                       2108
*     I031F FIXED(31) BASED,                                       2108
*     I031P PTR(31) BASED,                                         2108
*     I015F FIXED(15) BASED,                                       2108
*     I015P PTR(15) BASED,                                         2108
*     I008P PTR(8) BASED,                                          2108
*     I001C CHAR(1) BASED;                                         2108
*   END ILRASRIM                                                   2109
*                                                                  2109
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (ILRTPARB)                                       */
*/*%INCLUDE SYSLIB  (ILRQSRCD)                                       */
*/*%INCLUDE SYSLIB  (ILRASMVT)                                       */
*/*%INCLUDE SYSLIB  (IHANVT  )                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IEAPPNIP)                                       */
*/*%INCLUDE SYSLIB  (IHAXPTE )                                       */
*/*%INCLUDE SYSLIB  (ILRPCT  )                                       */
*/*%INCLUDE SYSLIB  (ILRPAT  )                                       */
*/*%INCLUDE SYSLIB  (ILRPART )                                       */
*/*%INCLUDE SYSLIB  (ILRIORB )                                       */
*/*%INCLUDE SYSLIB  (ILRSDCT )                                       */
*/*%INCLUDE SYSLIB  (ILRSART )                                       */
*/*%INCLUDE SYSLIB  (ILRSAT  )                                       */
*/*%INCLUDE SYSLIB  (ILRSCCW )                                       */
*/*%INCLUDE SYSLIB  (ILRLGVT )                                       */
*/*%INCLUDE SYSLIB  (IHASRB  )                                       */
*/*%INCLUDE SYSLIB  (IHAASCB )                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (ILRDVTAB)                                       */
*                                                                  2109
*       ;                                                          2109
@DATA    DS    0H
@CH00063 DC    H'24'
@SM02904 MVC   DSTDSN(0,DSTEPTR),PTDSN(@06)
@SM02915 MVC   DSTDSN(0,@15),PTDSN(@07)
@SM02917 MVC   DSTDSN(0,DSTEPTR),PTDSN(@02)
         DS    0F
@SA00001 DS    18F
@SA00003 DS    15F
@SA00005 DS    15F
@SA00006 DS    15F
@SA00008 DS    15F
@SA00009 DS    15F
@SA00011 DS    0F
@SA00010 DS    0F
@SA00007 DS    0F
         DS    15F
@TF00001 DS    F
         DS    0F
@CF00059 DC    F'1'
@CH00059 EQU   @CF00059+2
@CF00092 DC    F'3'
@CF00069 DC    F'4'
@CF01215 DC    F'5'
@CH01215 EQU   @CF01215+2
@CF00061 DC    F'7'
@CF00056 DC    F'8'
@CF01569 DC    F'12'
@CF00111 DC    F'16'
@CH00111 EQU   @CF00111+2
@CF00267 DC    F'20'
@CF00075 DC    F'25'
@CF00120 DC    F'32'
@CF00102 DC    F'44'
@CF00076 DC    F'48'
@CH00076 EQU   @CF00076+2
@CF00054 DC    F'64'
@CF00238 DC    F'80'
@CF00073 DC    F'96'
@CH00073 EQU   @CF00073+2
@CF02512 DC    F'125'
@CF02432 DC    F'376'
@CF01553 DC    F'400'
@CH01553 EQU   @CF01553+2
@CF02514 DC    F'1024'
@CF02516 DC    F'4096'
@CF02914 DC    F'6208'
@CF02873 DC    F'8192'
@CF02874 DC    F'16384'
@CF02877 DC    F'32768'
@CF02525 DC    F'50000'
@CF02881 DC    F'62720'
@CF02518 DC    F'65536'
@CF02885 DC    F'-4048'
@CF01386 DC    XL4'80000000'
@CF02910 DC    XL4'0000FFFF'
@CV02592 DC    V(ILRIMMSG)
@CV02597 DC    V(IEAVNPB5)
         DS    0D
TPARPTR  DS    A
TPAEPTR  DS    A
TPASPTR  DS    A
QSRPTR   DS    A
XPTEPTR  DS    A
PCTPTR   DS    A
PATPTR   DS    A
SDCTPTR  DS    A
SDCTEPTR DS    A
SARTPTR  DS    A
SEGMASK  DC    XL4'00FF0000'
MASK     DC    XL4'80000000'
PRMTBPTR DS    A
SAVER14A DS    A
OPENPTR  DS    A
RDWTPTR  DS    A
AVLPTR   DS    A
PLHPTR   DS    A
LSTPTR   DS    A
LSTFPTR  DS    A
LSTMPTR  DS    A
BUFFPTR  DS    A
SEGMAD   DS    A
LIMIT    DS    A
PLPTPTR  DS    A
COMTPTR  DS    A
DPLTPTR  DS    A
LOCTPTR  DS    A
COMMPTR  DS    A
DUPLPTR  DS    A
LOCLPTR  DS    A
FDPGPTR  DS    A
ORIGREQ  DS    F
MDFDREQ  DS    F
M        DS    F
PLPASUSE DC    F'0'
DUPXSUSE DC    F'0'
COMMSUSE DC    F'0'
LEN      DS    F
DSNPTR   DS    A
PAGEQPTR DS    A
SAVOPERD DS    A
DSTBLPTR DS    A
PARMPTR  DC    AL4(OPSPARM)
PAGEEXP  DS    H
SWAPEXP  DS    H
PAGECTR  DS    H
COUNT    DS    H
SAVECT   DS    H
ENTRIES  DS    H
PASS     DS    FL1
IOEMPYN  DC    AL1(3)
IOEMPYD  DC    AL1(2)
@CC02481 DC    C'TPARTBLE'
@CC02483 DC    C'QSRECORD'
@CC02762 DC    C'ILROPS00'
@CC02764 DC    C'ILRPREAD'
@CC02477 DC    C'IGNORE'
@CC02479 DC    C'PAT '
@CC02485 DC    C'SART'
@CC02487 DC    C'SAT '
@CC02489 DC    C'PART'
@CC02491 DC    C'LGVT'
@CC02493 DC    C'SRB '
@CC02541 DC    C'340I'
@CC02543 DC    C'915E'
@CC02545 DC    C'916E'
@CC02547 DC    C'918I'
@CC02549 DC    C'920I'
@CC02551 DC    C'921I'
@CC02553 DC    C'922D'
@CC02555 DC    C'923D'
@CC02557 DC    C'924D'
@CC02559 DC    C'925D'
@CC02561 DC    C'927I'
@CC02563 DC    C'929I'
@CC02565 DC    C'930I'
@CC02567 DC    C'935W'
@CC02569 DC    C'937I'
@CC02571 DC    C'938W'
@CC02573 DC    C'939D'
@CC02575 DC    C'940I'
@CC02577 DC    C'941D'
@CC02579 DC    C'942I'
@CC02581 DC    C'943W'
@CC02583 DC    C'944I'
@CC02585 DC    C'945W'
         DS    CL3
DVTAB    DS    CL1004
         ORG   DVTAB
DVTHDR   DS    CL36
         ORG   DVTHDR
DVTABID  DC    CL4'DVTB'
DVTHEC   DC    H'7'
@NM00134 DS    CL2
DVTLNG   DC    AL4(52)
         DC    AL4(48)
         DC    AL4(272)
         DC    AL4(272)
         DC    AL4(92)
         DC    AL4(92)
         DC    AL4(140)
         ORG   DVTAB+36
DVTENT   DS    CL968
         ORG   DVTENT
D2314    DS    CL52
         ORG   D2314
D2314ID  DC    CL4'PCT'
D2314ET  DC    CL6'2314'
D2314MS  DC    AL2(6000)
D2314HT  DC    X'2008'
D2314SC  DC    H'30'
D2314CH  DC    A(0)
D2314MK  DC    X'0000000300000003'
D2314PW  DC    H'5'
D2314SS  DC    H'3'
D2314MT  DC    F'16666'
D2314RT  DC    XL2'1800'
D2314BV  DC    AL2(432)
D2314ST  DC    X'00000000'
         DC    X'81001000'
         DC    X'02000800'
         ORG   DVTENT+52
D3340    DS    CL48
         ORG   D3340
D3340ID  DC    CL4'PCT'
D3340ET  DC    CL6'3340'
D3340MS  DC    AL2(16704)
D3340HT  DC    X'200A'
D3340SC  DC    H'24'
D3340CH  DC    A(0)
D3340MK  DC    X'000000FF000000FF'
D3340PW  DC    H'15'
D3340SS  DC    H'2'
D3340MT  DC    F'5000'
D3340RT  DC    XL2'2000'
D3340BV  DC    AL2(432)
D3340ST  DC    X'00020000'
         DC    X'01201000'
         ORG   DVTENT+100
D3330    DS    CL272
         ORG   D3330
D3330ID  DC    CL4'PCT'
D3330ET  DC    CL6'3330'
D3330MS  DC    AL2(23432)
D3330HT  DC    X'2009'
D3330SC  DC    H'58'
D3330CH  DC    A(0)
D3330MK  DC    X'000000000000003F'
D3330PW  DC    H'30'
D3330SS  DC    H'58'
D3330MT  DC    F'5000'
D3330RT  DC    XL2'30D8'
D3330BV  DC    AL2(432)
D3330ST  DC    X'00020000'
         DC    X'012A1000'
         DC    X'02532000'
         DC    X'837B3000'
         DC    X'04280F28'
         DC    X'05501F28'
         DC    X'86792F28'
         DC    X'07260E50'
         DC    X'084E1E50'
         DC    X'89772E50'
         DC    X'0A240D78'
         DC    X'0B4C1D78'
         DC    X'8C752D78'
         DC    X'0D220CA0'
         DC    X'0E4A1CA0'
         DC    X'8F732CA0'
         DC    X'10200BC8'
         DC    X'11481BC8'
         DC    X'92712BC8'
         DC    X'131E0AF0'
         DC    X'14461AF0'
         DC    X'956E2AF0'
         DC    X'161C0A18'
         DC    X'17441A18'
         DC    X'986C2A18'
         DC    X'191A0940'
         DC    X'1A421940'
         DC    X'9B6A2940'
         DC    X'1C180868'
         DC    X'1D401868'
         DC    X'9E682868'
         DC    X'1F160790'
         DC    X'203E1790'
         DC    X'A1662790'
         DC    X'221406B8'
         DC    X'233C16B8'
         DC    X'A46426B8'
         DC    X'251205E0'
         DC    X'263A15E0'
         DC    X'A76225E0'
         DC    X'280F0508'
         DC    X'29381508'
         DC    X'AA602508'
         DC    X'2B0D0430'
         DC    X'2C361430'
         DC    X'AD5E2430'
         DC    X'2E0B0358'
         DC    X'2F341358'
         DC    X'B05C2358'
         DC    X'31090280'
         DC    X'32321280'
         DC    X'B35A2280'
         DC    X'340701A8'
         DC    X'353011A8'
         DC    X'B65821A8'
         DC    X'370500D0'
         DC    X'382D10D0'
         DC    X'395620D0'
         ORG   DVTENT+372
D33301   DS    CL272
         ORG   D33301
D33301ID DC    CL4'PCT'
D33301ET DC    CL6'3330-1'
D33301MS DC    AL2(46864)
D33301HT DC    X'200D'
D33301SC DC    H'58'
D33301CH DC    A(0)
D33301MK DC    X'000000000000003F'
D33301PW DC    H'35'
D33301SS DC    H'58'
D33301MT DC    F'5000'
D33301RT DC    XL2'30D8'
D33301BV DC    AL2(432)
D33301ST DC    X'00020000'
         DC    X'012A1000'
         DC    X'02532000'
         DC    X'837B3000'
         DC    X'04280F28'
         DC    X'05501F28'
         DC    X'86792F28'
         DC    X'07260E50'
         DC    X'084E1E50'
         DC    X'89772E50'
         DC    X'0A240D78'
         DC    X'0B4C1D78'
         DC    X'8C752D78'
         DC    X'0D220CA0'
         DC    X'0E4A1CA0'
         DC    X'8F732CA0'
         DC    X'10200BC8'
         DC    X'11481BC8'
         DC    X'92712BC8'
         DC    X'131E0AF0'
         DC    X'14461AF0'
         DC    X'956E2AF0'
         DC    X'161C0A18'
         DC    X'17441A18'
         DC    X'986C2A18'
         DC    X'191A0940'
         DC    X'1A421940'
         DC    X'9B6A2940'
         DC    X'1C180868'
         DC    X'1D401868'
         DC    X'9E682868'
         DC    X'1F160790'
         DC    X'203E1790'
         DC    X'A1662790'
         DC    X'221406B8'
         DC    X'233C16B8'
         DC    X'A46426B8'
         DC    X'251205E0'
         DC    X'263A15E0'
         DC    X'A76225E0'
         DC    X'280F0508'
         DC    X'29381508'
         DC    X'AA602508'
         DC    X'2B0D0430'
         DC    X'2C361430'
         DC    X'AD5E2430'
         DC    X'2E0B0358'
         DC    X'2F341358'
         DC    X'B05C2358'
         DC    X'31090280'
         DC    X'32321280'
         DC    X'B35A2280'
         DC    X'340701A8'
         DC    X'353011A8'
         DC    X'B65821A8'
         DC    X'370500D0'
         DC    X'382D10D0'
         DC    X'395620D0'
         ORG   DVTENT+644
D3350    DS    CL92
         ORG   D3350
D3350ID  DC    CL4'PCT'
D3350ET  DC    CL6'3350'
D3350MS  DC    AL2(65520)
D3350HT  DC    X'200B'
D3350SC  DC    H'26'
D3350CH  DC    A(0)
D3350MK  DC    X'0000003F0000003F'
D3350PW  DC    H'50'
D3350SS  DC    H'13'
D3350MT  DC    F'3500'
D3350RT  DC    XL2'4556'
D3350BV  DC    AL2(432)
D3350ST  DC    X'00020000'
         DC    X'011D1000'
         DC    X'02392000'
         DC    X'03543000'
         DC    X'84704000'
         DC    X'05150AAA'
         DC    X'06301AAA'
         DC    X'074C2AAA'
         DC    X'88673AAA'
         DC    X'090C0554'
         DC    X'0A271554'
         DC    X'0B432554'
         DC    X'0C5E3554'
         ORG   DVTENT+736
D23052   DS    CL92
         ORG   D23052
D23052ID DC    CL4'PCT'
D23052ET DC    CL6'2305-2'
D23052MS DC    AL2(2496)
D23052HT DC    X'2007'
D23052SC DC    H'26'
D23052CH DC    A(0)
D23052MK DC    X'0000003F0000003F'
D23052PW DC    H'100'
D23052SS DC    H'13'
D23052MT DC    F'3070'
D23052RT DC    XL2'3400'
D23052BV DC    AL2(432)
D23052ST DC    X'00030000'
         DC    X'01361000'
         DC    X'026A2000'
         DC    X'839D3000'
         DC    X'042A0C00'
         DC    X'055D1C00'
         DC    X'86912C00'
         DC    X'071E0800'
         DC    X'08511800'
         DC    X'89842800'
         DC    X'0A120400'
         DC    X'0B451400'
         DC    X'0C782400'
         ORG   DVTENT+828
D23051   DS    CL140
         ORG   D23051
D23051ID DC    CL4'PCT'
D23051ET DC    CL6'2305-1'
D23051MS DC    AL2(1200)
D23051HT DC    X'2006'
D23051SC DC    H'25'
D23051CH DC    A(0)
D23051MK DC    X'0000007F0000007F'
D23051PW DC    H'175'
D23051SS DC    H'25'
D23051MT DC    F'1600'
D23051RT DC    XL2'3200'
D23051BV DC    AL2(432)
D23051ST DC    X'00030000'
         DC    X'011E1000'
         DC    X'02392000'
         DC    X'83543000'
         DC    X'041B0E00'
         DC    X'05361E00'
         DC    X'86512E00'
         DC    X'07180C00'
         DC    X'08331C00'
         DC    X'894E2C00'
         DC    X'0A150A00'
         DC    X'0B301A00'
         DC    X'8C4B2A00'
         DC    X'0D120800'
         DC    X'0E2D1800'
         DC    X'8F482800'
         DC    X'100F0600'
         DC    X'112A1600'
         DC    X'92452600'
         DC    X'130C0400'
         DC    X'14271400'
         DC    X'95422400'
         DC    X'16090200'
         DC    X'17241200'
         DC    X'183F2200'
         ORG   DVTAB+1004
HSDCT    DS    CL128
         ORG   HSDCT
HSDCHDR  DS    CL8
         ORG   HSDCHDR
HSDCID   DC    CL4'SDCT'
HSDCSIZE DC    AL2(6)
HSDCRSV1 DC    AL2(0)
         ORG   HSDCT+8
H3340    DS    CL20
         ORG   H3340
H3340TP  DC    CL6'3340'
H3340TX  DC    X'200A'
H3340TK  DC    AL2(2)
H3340SC  DC    AL2(24)
H3340MK  DC    XL4'3F3F3F3F'
H3340SS  DC    XL1'02'
H3340XP  DC    AL1(0)
H3340RV  DC    X'0000'
         ORG   HSDCT+28
H3330    DS    CL20
         ORG   H3330
H3330TP  DC    CL6'3330'
H3330TX  DC    X'2009'
H3330TK  DC    AL2(3)
H3330SC  DC    AL2(57)
H3330MK  DC    XL4'0F0F0F0F'
H3330SS  DC    XL1'02'
H3330XP  DC    AL1(0)
H3330RV  DC    X'0000'
         ORG   HSDCT+48
H33301   DS    CL20
         ORG   H33301
H33301TP DC    CL6'3330-1'
H33301TX DC    X'200D'
H33301TK DC    AL2(3)
H33301SC DC    AL2(57)
H33301MK DC    XL4'0F0F0F0F'
H33301SS DC    XL1'02'
H33301XP DC    AL1(0)
H33301R  DC    X'0000'
         ORG   HSDCT+68
H3350    DS    CL20
         ORG   H3350
H3350TP  DC    CL6'3350'
H3350TX  DC    X'200B'
H3350TK  DC    AL2(4)
H3350SC  DC    AL2(120)
H3350MK  DC    XL4'003F003F'
H3350SS  DC    XL1'02'
H3350XP  DC    AL1(1)
H3350RV  DC    X'0000'
         ORG   HSDCT+88
H23052   DS    CL20
         ORG   H23052
H23052TP DC    CL6'2305-2'
H23052TX DC    X'2007'
H23052TK DC    AL2(3)
H23052SC DC    AL2(24)
H23052MK DC    XL4'3F3F3F3F'
H23052SS DC    XL1'03'
H23052XP DC    AL1(0)
H23052R  DC    X'0000'
         ORG   HSDCT+108
H23051   DS    CL20
         ORG   H23051
H23051TP DC    CL6'2305-1'
H23051TX DC    X'2006'
H23051TK DC    AL2(3)
H23051SC DC    AL2(24)
H23051MK DC    XL4'3F3F3F3F'
H23051SS DC    XL1'03'
H23051XP DC    AL1(0)
H23051R  DC    X'0000'
         ORG   HSDCT+128
SKELETON DS    CL400
         ORG   SKELETON
SKELID   DC    X'87'
SKELZERO DC    XL87'0'
SKELSEEK DC    X'0B00000040000006'
SKELSSEC DC    X'2300000040000001'
SKELSLOT DS    CL24
         ORG   SKELSLOT+0
SKELSRCH DC    X'B100000040000005'
SKELTIC  DC    X'0800000040000000'
SKELRW   DC    X'0500000040001000'
         ORG   SKELSLOT+24
         ORG   SKELSLOT+24
         DC    X'B100000040000005'
         DC    X'0800000040000000'
         DC    X'0500000040001000'
         ORG   SKELSLOT+48
         ORG   SKELSLOT+48
         DC    X'B100000040000005'
         DC    X'0800000040000000'
         DC    X'0500000040001000'
         ORG   SKELSLOT+72
         ORG   SKELSLOT+72
         DC    X'B100000040000005'
         DC    X'0800000040000000'
         DC    X'0500000040001000'
         ORG   SKELSLOT+96
         ORG   SKELSLOT+96
         DC    X'B100000040000005'
         DC    X'0800000040000000'
         DC    X'0500000040001000'
         ORG   SKELSLOT+120
         ORG   SKELSLOT+120
         DC    X'B100000040000005'
         DC    X'0800000040000000'
         DC    X'0500000040001000'
         ORG   SKELSLOT+144
         ORG   SKELSLOT+144
         DC    X'B100000040000005'
         DC    X'0800000040000000'
         DC    X'0500000040001000'
         ORG   SKELSLOT+168
         ORG   SKELSLOT+168
         DC    X'B100000040000005'
         DC    X'0800000040000000'
         DC    X'0500000040001000'
         ORG   SKELSLOT+192
         ORG   SKELSLOT+192
         DC    X'B100000040000005'
         DC    X'0800000040000000'
         DC    X'0500000040001000'
         ORG   SKELSLOT+216
         ORG   SKELSLOT+216
         DC    X'B100000040000005'
         DC    X'0800000040000000'
         DC    X'0500000040001000'
         ORG   SKELSLOT+240
         ORG   SKELSLOT+240
         DC    X'B100000040000005'
         DC    X'0800000040000000'
         DC    X'0500000040001000'
         ORG   SKELSLOT+264
         ORG   SKELSLOT+264
         DC    X'B100000040000005'
         DC    X'0800000040000000'
         DC    X'0500000040001000'
         ORG   SKELETON+392
SKELLTIC DC    X'0300000020000001'
         ORG   SKELETON+400
SWAPPARM DC    CL8'SWAP'
DPLXPARM DC    CL8'DUPLEX'
PAGEPARM DC    CL8'PAGE'
PAGNUMPM DC    CL8'PAGNUM'
DATAPARM DC    CL8' '
BADCLCK  DC    CL13'BAD TIMESTAMP'
NODATST  DC    CL13'NO DATA SET'
ZERODSN  DC    X'000000000000000000000000000000000000000000000000000000C
               0000000000000000000000000000000000'
         ORG   ZERODSN
ZERODW   DS    CL8
         ORG   ZERODSN+44
PAGEZONE DC    CL2'00'
SWAPZONE DC    CL2'00'
         DS    CL6
WORKAREA DS    CL8
RMPATCH  DC    XL200'0'
READPARM DS    CL12
         ORG   READPARM
PFLAG    DS    BL1
         ORG   PFLAG
PWRITE   DS    BL1
PTPARB   EQU   PFLAG+0
         ORG   READPARM+1
PSLOTNO  DS    FL1
PSLOT    DS    FL2
PENTRY   DS    AL4
PBUFF    DS    AL4
         ORG   READPARM+12
MSGPL    DS    CL24
         ORG   MSGPL
MSGID    DS    CL4
NIPPTRS  DS    CL8
         ORG   NIPPTRS
NVTPTR   DS    AL4
CVTPTR   DS    AL4
         ORG   MSGPL+12
MSGDATA1 DS    AL4
MSGDATA2 DS    AL4
         ORG   MSGDATA2
FLAGS    DS    FL1
         ORG   MSGPL+20
MSGDATA3 DS    AL4
         ORG   MSGPL+24
OPSPARM  DS    CL48
         ORG   OPSPARM
PARMFLG  DS    FL1
@NM00137 DS    CL3
PARMDSN  DS    CL44
         ORG   OPSPARM+48
WRKFLGS  DC    X'0000'
         ORG   WRKFLGS
MATCH    DS    BL1
LIST     EQU   WRKFLGS+0
PROBLEM  EQU   WRKFLGS+0
OLDCOM   EQU   WRKFLGS+0
SWAPSW   EQU   WRKFLGS+0
DUPLEXSW EQU   WRKFLGS+0
NEEDEDL  EQU   WRKFLGS+0
BADDS    EQU   WRKFLGS+0
@NM00138 DS    BL1
         ORG   WRKFLGS+2
CELLTYP  DC    CL8'IOE POOL'
         DC    CL8'BWK POOL'
         DC    CL8'ACE POOL'
         DS    CL2
POOLADDR DC    A(0)
         DC    A(0)
         DC    A(0)
CELLNUM  DC    F'0'
         DC    F'8'
         DC    F'50'
CELLRESV DC    F'0'
         DC    F'0'
         DC    F'10'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
CELLPTR  EQU   @03
DSTEPTR  EQU   @07
DSNLNG   EQU   @03
CHARPTR  EQU   @02
NUMBER   EQU   @07
L        EQU   @08
K        EQU   @04
J        EQU   @02
I        EQU   @02
ENTLEFT  EQU   @03
COUNTER  EQU   @03
COUNTL   EQU   @02
SLOT     EQU   @02
GETREQ   EQU   @02
CYLMB    EQU   @03
CYLMW    EQU   @02
CYLS     EQU   @08
ENDPTR   EQU   @07
FREEPTR  EQU   @02
PLPAPTR  EQU   @02
SCHPTR   EQU   @08
SWAPPTR  EQU   @03
PAGEPTR  EQU   @03
BDYADDR  EQU   @07
SAVEADDR EQU   @08
ENDSAT   EQU   @08
ENDPAT   EQU   @08
SATCYLA  EQU   @03
PATCYLA  EQU   @02
DVTPTR   EQU   @02
POOLPTR  EQU   @05
SRBPTR   EQU   @07
LGVTEPTR EQU   @03
LGVTPTR  EQU   @02
SCCWPTR  EQU   @02
SAREPTR  EQU   @02
PAREPTR  EQU   @02
PARTPTR  EQU   @07
QSREPTR  EQU   @08
R9       EQU   @09
R10      EQU   @10
R11      EQU   @11
R12      EQU   @12
R0       EQU   @00
R1       EQU   @01
R2       EQU   @02
R3       EQU   @03
R14      EQU   @14
R15      EQU   @15
SATPTR   EQU   @01
RNVT     EQU   @02
GPR00P   EQU   @00
GPR01P   EQU   @01
GPR01F   EQU   @01
GPR15F   EQU   @15
GPR00F   EQU   @00
RCVT     EQU   @03
RENTRY   EQU   @15
REXIT    EQU   @14
RPARM    EQU   @01
R13      EQU   @13
R4       EQU   @04
R5       EQU   @05
R6       EQU   @06
R7       EQU   @07
R8       EQU   @08
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSAAOLD  EQU   PSA+548
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
TPARTBLE EQU   0
TPARHEAD EQU   TPARTBLE
TPARIDNT EQU   TPARHEAD
TPARFLAG EQU   TPARHEAD+8
TPARWARM EQU   TPARFLAG
TPARUSE  EQU   TPARHEAD+12
TPARNPGS EQU   TPARHEAD+16
TPAREXPD EQU   TPARHEAD+20
TPARPCTQ EQU   TPARHEAD+24
TPARTIME EQU   TPARHEAD+32
TPARPENT EQU   TPARTBLE+64
TPARSENT EQU   TPARTBLE+6208
TPARENT  EQU   0
TPAETYPE EQU   TPARENT
TPAESTAT EQU   TPARENT+2
TPAEPARM EQU   TPAESTAT
TPAEPRVI EQU   TPAESTAT
TPAESKIP EQU   TPAESTAT
TPAEVALD EQU   TPAESTAT
TPAECLAS EQU   TPARENT+3
TPAEPLPA EQU   TPAECLAS
TPAECOMM EQU   TPAECLAS
TPAEDPLX EQU   TPAECLAS
TPAELOCL EQU   TPAECLAS
TPAEDSNL EQU   TPARENT+4
TPAEDSN  EQU   TPARENT+8
TPAEEDB  EQU   TPARENT+52
TPAEUCB  EQU   TPARENT+56
TPAEPCT  EQU   TPARENT+60
TPAESZSL EQU   TPARENT+64
TPAEPATB EQU   TPARENT+68
TPAEPATP EQU   TPARENT+72
TPAEIORB EQU   TPARENT+76
TPASENT  EQU   0
TPASDSN  EQU   TPASENT+4
QSR      EQU   0
QSRHDR   EQU   QSR
QSRIDNT  EQU   QSRHDR
QSRLPAHA EQU   QSRHDR+8
QSRLPALO EQU   QSRHDR+12
QSRLPAHI EQU   QSRHDR+16
QSRFLAGS EQU   QSRHDR+20
QSRPLPAF EQU   QSRFLAGS
QSRCOMMF EQU   QSRFLAGS
QSRSYNCH EQU   QSRHDR+24
QSRMAP   EQU   QSR+32
QSRENTRY EQU   0
QSRLSID  EQU   QSRENTRY
QSRPTNN  EQU   QSRLSID+1
QSRSLOT  EQU   QSRLSID+2
QSRLSID2 EQU   QSRENTRY+4
QSRPTNN2 EQU   QSRLSID2+1
QSRSLOT2 EQU   QSRLSID2+2
ASMVT    EQU   0
ASMFLAG1 EQU   ASMVT
ASMDUPLX EQU   ASMFLAG1
ASMNOLCL EQU   ASMFLAG1
ASMPLPAF EQU   ASMFLAG1
ASMCOMMF EQU   ASMFLAG1
ASMPLPAS EQU   ASMFLAG1
ASMFLAG2 EQU   ASMVT+1
ASMNOTPT EQU   ASMFLAG2
ASMQUICK EQU   ASMFLAG2
ASMWARM  EQU   ASMFLAG2
ASMDSSFS EQU   ASMVT+2
ASMSART  EQU   ASMVT+4
ASMPART  EQU   ASMVT+8
ASMMSGBF EQU   ASMVT+24
ASMSTAGQ EQU   ASMVT+32
ASMPCCWQ EQU   ASMVT+64
ASMPCCWN EQU   ASMVT+72
ASMBURST EQU   ASMVT+76
ASMPSRB  EQU   ASMVT+88
ASMBKSLT EQU   ASMVT+108
ASMSLOTS EQU   ASMVT+112
ASMLGVT  EQU   ASMVT+132
ASMLSAI  EQU   ASMVT+144
ASMGOSQS EQU   ASMVT+152
ASMPTM   EQU   ASMVT+204
ASMPSWPD EQU   ASMVT+208
ASMPSRMT EQU   ASMVT+212
ASMIOEPC EQU   ASMVT+296
ASMBWKPC EQU   ASMVT+312
ASMACEPC EQU   ASMVT+344
ASMWKSA1 EQU   ASMVT+368
ASMWKSA2 EQU   ASMVT+448
ASMWKSA3 EQU   ASMVT+528
ASMWKSA4 EQU   ASMVT+608
ASMWKSA5 EQU   ASMVT+688
ASMPOOLS EQU   0
ASMCPSIZ EQU   ASMPOOLS+4
ASMCPAVQ EQU   ASMPOOLS+8
ASMCPAVL EQU   ASMCPAVQ
ASMCPRSQ EQU   ASMPOOLS+16
ASMCPRES EQU   ASMCPRSQ+4
NVT      EQU   0
NVTNPATR EQU   NVT+54
NVTNPREN EQU   NVTNPATR
NVTFLLB  EQU   NVT+55
NVTABSAV EQU   NVT+140
NVTNUCND EQU   NVT+180
NVTNBFND EQU   NVT+184
NVTFLCN  EQU   NVT+211
NVTWTPSW EQU   NVT+224
NVTWPSW2 EQU   NVTWTPSW+4
NVTFLWSC EQU   NVTWPSW2+3
NVTLOAD  EQU   NVT+232
NVTSENSE EQU   NVT+236
NVTSWAIT EQU   NVT+240
NVTTIME  EQU   NVT+244
NVTUCBFN EQU   NVT+248
NVTWTO   EQU   NVT+252
NVTWTOR  EQU   NVT+256
NVTWTOR2 EQU   NVT+260
NVTOPEN  EQU   NVT+264
NVTMOUNT EQU   NVT+268
NVTPRMPT EQU   NVT+272
NVTVIRT  EQU   NVT+276
NVTREAL  EQU   NVT+280
NVTSCHED EQU   NVT+284
NVTOPIO  EQU   NVT+288
NVTPTAB  EQU   NVT+372
NVTQSBUF EQU   NVT+376
NVTXCTL  EQU   NVT+428
NVTLOCAT EQU   NVT+436
NVTLPAND EQU   NVT+476
NVTFLPO  EQU   NVT+528
NVTFLQS  EQU   NVTFLPO
NVTFLWS  EQU   NVTFLPO
NVTLPALO EQU   NVT+544
NVTLPAHA EQU   NVT+548
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIOQET EQU   CVTMAP+120
CVTIERLC EQU   CVTMAP+144
CVTHEAD  EQU   CVTMAP+160
CVTSV76C EQU   CVTHEAD
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
NIPPAHDR EQU   0
NIPPAREA EQU   0
NIPPABDL EQU   NIPPAREA+12
NIPPABDH EQU   NIPPABDL
NIPPAIOD EQU   NIPPAREA+32
NIPPAECB EQU   NIPPAIOD+84
PARMTAB  EQU   0
PAGEP    EQU   PARMTAB+184
PAGEO    EQU   PARMTAB+192
@NM00077 EQU   PARMTAB+272
NIPPAFLG EQU   @NM00077
SWAP     EQU   PARMTAB+288
PAGNUM   EQU   PARMTAB+296
DUPLEX   EQU   PARMTAB+304
NIPPTE   EQU   0
NIPPTOPF EQU   NIPPTE+4
NIPPTLST EQU   NIPPTOPF
NIPPTATF EQU   NIPPTE+5
XPTE     EQU   0
XPTFLAGS EQU   XPTE+2
XPTXAV   EQU   XPTFLAGS
XPTFLAG2 EQU   XPTE+3
XPTVALID EQU   XPTFLAG2
XPTLPID  EQU   XPTE+4
XPTLGN   EQU   XPTLPID
XPTLPN   EQU   XPTLPID+4
PCT      EQU   0
PCTDTYPE EQU   PCT+4
PCTDTYPX EQU   PCT+12
PCTCYLSZ EQU   PCT+14
PCTNEXT  EQU   PCT+16
PCTDMASK EQU   PCT+20
PCTRQTIM EQU   PCT+32
PCTABLE  EQU   PCT+40
PCTSECT  EQU   PCTABLE
PCTSLTNM EQU   PCTSECT
PAT      EQU   0
PATHDR   EQU   PAT
PATIDENT EQU   PATHDR
PATPART  EQU   PATHDR+4
PATCYLNO EQU   PATHDR+8
PATCYLSZ EQU   PATHDR+10
PATCYLMW EQU   PATHDR+12
PATMAP   EQU   PAT+16
PATCYLS  EQU   PATMAP
PATCYLMP EQU   0
PART     EQU   0
PARTHDR  EQU   PART
PARTIDEN EQU   PARTHDR
PARTSIZE EQU   PARTHDR+4
PARTEUSE EQU   PARTHDR+8
PARTCIR1 EQU   PARTHDR+16
PARTCIR2 EQU   PARTHDR+20
PARTTPAR EQU   PARTHDR+24
PARTPCTQ EQU   PARTHDR+28
PARTLCNT EQU   PARTHDR+32
PARTCOMQ EQU   PARTHDR+48
PARTSPLQ EQU   PARTHDR+56
PARTDUPQ EQU   PARTHDR+64
PARTLOCQ EQU   PARTHDR+72
PARTENTS EQU   PART+80
PARTENT  EQU   0
PAREPARE EQU   PARTENT
PARELKUP EQU   PARTENT+4
PARELKFL EQU   PARELKUP
PAREIORN EQU   PARELKUP+1
PARETYPE EQU   PARTENT+8
PAREPLPA EQU   PARETYPE
PARECOMM EQU   PARETYPE
PAREDPLX EQU   PARETYPE
PARELOCL EQU   PARETYPE
PAREFLG1 EQU   PARTENT+9
PARENUSE EQU   PAREFLG1
PARENN   EQU   PARTENT+10
PARESZSL EQU   PARTENT+16
PARESLTA EQU   PARTENT+20
PAREIORB EQU   PARTENT+28
PAREPATP EQU   PARTENT+32
PAREPCTP EQU   PARTENT+36
PAREEDBP EQU   PARTENT+40
PAREUCBP EQU   PARTENT+44
PAREWTQE EQU   PARTENT+52
PARERQTM EQU   PARTENT+56
IORB     EQU   0
IORNUM   EQU   IORB+1
IORFLGS  EQU   IORB+3
IORAPND  EQU   IORFLGS
IORIORB  EQU   IORB+4
IORPCCW  EQU   IORB+8
IORPARTE EQU   IORB+32
SDCT     EQU   0
SDCHDR   EQU   SDCT
SDCSIZE  EQU   SDCHDR+4
SDCENTS  EQU   SDCT+8
SDCTE    EQU   0
SDCDEVTP EQU   SDCTE
SDCDTYPX EQU   SDCTE+6
SDCCYLSZ EQU   SDCTE+10
SDCCMASK EQU   SDCTE+12
SDCMPEXP EQU   SDCTE+17
SART     EQU   0
SARTHDR  EQU   SART
SARID    EQU   SARTHDR
SARSIZE  EQU   SARTHDR+4
SARUSE   EQU   SARTHDR+8
SARFXDNX EQU   SARTHDR+16
SARMOVNX EQU   SARTHDR+20
SARSDCT  EQU   SARTHDR+28
SARSCCWQ EQU   SARTHDR+32
SARSETCT EQU   SARTHDR+36
SARWAITQ EQU   SARTHDR+40
SARSRBP  EQU   SARTHDR+48
SARSETSZ EQU   SARTHDR+56
SARENTS  EQU   SART+80
SARTE    EQU   0
SRENEXT  EQU   SARTE
SREFLG   EQU   SARTE+9
SREFIXED EQU   SREFLG
SRENN    EQU   SARTE+10
SRETOTSL EQU   SARTE+16
SREAVLSL EQU   SARTE+20
SREIORB  EQU   SARTE+28
SRESAT   EQU   SARTE+32
SRESDCTE EQU   SARTE+36
SREEDB   EQU   SARTE+40
SREUCB   EQU   SARTE+44
SAT      EQU   0
SATHDR   EQU   SAT
SATID    EQU   SATHDR
SATSARTE EQU   SATHDR+4
SATMAPLN EQU   SATHDR+8
SATBYTCL EQU   SATHDR+10
SATSCAN  EQU   SATHDR+16
SATMAPS  EQU   SAT+32
SATCYLMP EQU   0
SCCW     EQU   0
SCCWHDR  EQU   SCCW
SCCWSECT EQU   SCCWHDR+1
SCCWFLAG EQU   SCCWHDR+2
SCCWSCCW EQU   SCCWHDR+4
SCCWSARG EQU   SCCWHDR+16
SCCWBB   EQU   SCCWSARG+1
SCCWSRH  EQU   SCCWSARG+3
SCCWCCHH EQU   SCCWSRH
SCCWCC   EQU   SCCWCCHH
SCCWLCCW EQU   SCCWHDR+80
SCCWCCW  EQU   SCCW+88
SCCWSEEK EQU   SCCWCCW
SCCWSKAD EQU   SCCWSEEK+1
SCCWSSEC EQU   SCCWCCW+8
SCCWSSAD EQU   SCCWSSEC+1
SCCWSLOT EQU   SCCWCCW+16
SCCWSRCH EQU   SCCWSLOT
SCCWSROP EQU   SCCWSRCH
SCCWSRAD EQU   SCCWSRCH+1
SCCWTIC  EQU   SCCWSLOT+8
SCCWTIAD EQU   SCCWTIC+1
SCCWRW   EQU   SCCWSLOT+16
SCCWLTIC EQU   SCCWCCW+304
LGVT     EQU   0
LGVIDENT EQU   LGVT
LGVLGVEP EQU   LGVT+4
LGVMAXLG EQU   LGVT+8
LGVSIZE  EQU   LGVT+12
LGVENTRS EQU   LGVT+16
LGVTE    EQU   0
LGVLGVTE EQU   LGVTE
LGVELGEP EQU   LGVLGVTE
LGVENEXT EQU   LGVELGEP
LGVEASCB EQU   LGVLGVTE+4
LGVELGID EQU   LGVEASCB
SRBSECT  EQU   0
SRB      EQU   SRBSECT
SRBID    EQU   SRB
SRBASCB  EQU   SRB+8
SRBFLC   EQU   SRB+12
SRBPASID EQU   SRBFLC+2
SRBEP    EQU   SRB+20
SRBRMTR  EQU   SRB+24
SRBPRIOR EQU   SRB+37
ASCB     EQU   0
ASCBSUPC EQU   ASCB+16
ASCBASID EQU   ASCB+36
ASCBRSM  EQU   ASCB+52
ASCBRSMF EQU   ASCBRSM
ASCBFW1  EQU   ASCB+100
ASCBRCTF EQU   ASCBFW1+2
ASCBFLG1 EQU   ASCBFW1+3
ASCBDSP1 EQU   ASCB+114
ASCBFLG2 EQU   ASCB+115
ASCBLKGP EQU   ASCB+128
ASCBSRQ  EQU   ASCB+180
ASCBSRQ1 EQU   ASCBSRQ
ASCBSRQ2 EQU   ASCBSRQ+1
ASCBSRQ3 EQU   ASCBSRQ+2
ASCBSRQ4 EQU   ASCBSRQ+3
MSGBUFER EQU   0
MSGCURR  EQU   MSGBUFER
MSGFIRST EQU   MSGBUFER+4
MSGLAST  EQU   MSGBUFER+8
MSGTERM  EQU   MSGBUFER+12
MSGBFRS  EQU   MSGBUFER+16
MSGTBFR  EQU   MSGBUFER+256
ILROPS00 EQU   0
ILRPREAD EQU   0
IEAVFP1  EQU   0
NEXTPTR  EQU   0
MSGBUF   EQU   0
TIMEBUF  EQU   0
AREA     EQU   0
EXPAN    EQU   0
FREEAREA EQU   0
PTCHAR   EQU   0
PTDSN    EQU   0
PGSTRNGP EQU   0
DSTBL    EQU   0
DSTBENT  EQU   DSTBL
DSTENT   EQU   0
DSTDSN   EQU   DSTENT
DSTDSNC  EQU   DSTDSN
DSTLNG   EQU   DSTENT+44
DSTFLG   EQU   DSTENT+45
DSTDPLX  EQU   DSTFLG
DSTUSED  EQU   DSTFLG
DSTNUSED EQU   DSTFLG
CELL     EQU   0
CELLNXT  EQU   CELL
OPNRTNPL EQU   0
RTNIORBP EQU   OPNRTNPL
RTNUCBP  EQU   OPNRTNPL+4
RTNEDBP  EQU   OPNRTNPL+8
SLOTNBR  EQU   OPNRTNPL+12
DEVTYP   EQU   OPNRTNPL+16
VOLSER   EQU   OPNRTNPL+18
BITMMWRD EQU   0
I001C    EQU   0
I008P    EQU   0
I015F    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
I256C    EQU   0
PATCYL   EQU   0
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTASMVT EQU   CVTS01+356
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTVFP   EQU   CVTS01+464
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
ASMVTPTR EQU   CVTASMVT
ASM1WKSV EQU   ASMWKSA1
ASM1RGSV EQU   ASM1WKSV
ASM1WRKA EQU   ASM1WKSV+60
ASM2WKSV EQU   ASMWKSA2
ASM2WRKA EQU   ASM2WKSV+52
ASM2FLGS EQU   ASM2WRKA+12
ASM3WKSV EQU   ASMWKSA3
ASM4WKSV EQU   ASMWKSA4
ASM4RGSV EQU   ASM4WKSV
ASM5WKSV EQU   ASMWKSA5
ASM5RGSV EQU   ASM5WKSV
IORBPTR  EQU   TPAEIORB
ASCBPTR  EQU   PSAAOLD
PSARSVTE EQU   PSARSVT
FLC      EQU   PSA
SCCWSK   EQU   SCCWSARG
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
ASM5FLGS EQU   ASM5WKSV+64
ASM5AIA  EQU   ASM5WKSV+60
ASM5GCTR EQU   ASM5WKSV+56
ASM5SR14 EQU   ASM5WKSV+52
@NM00018 EQU   ASM5RGSV+4
ASM5RG2  EQU   ASM5RGSV
@NM00017 EQU   ASM4RGSV+4
ASM4RG2  EQU   ASM4RGSV
ASM3SR13 EQU   ASM3WKSV+28
ASM3R14B EQU   ASM3WKSV+24
ASM3R14A EQU   ASM3WKSV+20
ASM3GRPA EQU   ASM3WKSV+16
ASM3TMPA EQU   ASM3WKSV+12
ASM3PIOP EQU   ASM3WKSV+8
ASM3GENQ EQU   ASM3WKSV+4
ASM3SWPQ EQU   ASM3WKSV
ASM2SR14 EQU   ASM2WRKA+16
@NM00016 EQU   ASM2WRKA+13
ASM2WFLG EQU   ASM2FLGS
ASM2RFLG EQU   ASM2FLGS
ASM2DUPQ EQU   ASM2WRKA+8
ASM2CAQ  EQU   ASM2WRKA+4
ASM2PAQ  EQU   ASM2WRKA
ASM2RGSV EQU   ASM2WKSV
ASM1NXTA EQU   ASM1WRKA+4
ASM1ASCB EQU   ASM1WRKA
ASM1RG15 EQU   ASM1RGSV+56
@NM00015 EQU   ASM1RGSV+4
ASM1RG1  EQU   ASM1RGSV
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTSUSP  EQU   CVTS01+692
CVTT6SVC EQU   CVTS01+688
CVTCDAL  EQU   CVTS01+684
CVTTCTL  EQU   CVTS01+680
CVTRSUME EQU   CVTS01+676
CVTJTERM EQU   CVTS01+672
CVTASMRM EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
@NM00136 EQU   DSTENT+46
@NM00135 EQU   DSTBL+4080
ASCBEND  EQU   ASCB+208
ASCBSRBT EQU   ASCB+200
ASCBSWTL EQU   ASCB+196
ASCBRS14 EQU   ASCB+195
ASCBSMCT EQU   ASCB+194
ASCBRS12 EQU   ASCB+192
ASCBPCTT EQU   ASCB+188
ASCBVGTT EQU   ASCB+184
ASCBRV43 EQU   ASCBSRQ4
ASCBRV42 EQU   ASCBSRQ4
ASCBRV41 EQU   ASCBSRQ4
ASCBRV40 EQU   ASCBSRQ4
ASCBRV39 EQU   ASCBSRQ4
ASCBRV38 EQU   ASCBSRQ4
ASCBRV37 EQU   ASCBSRQ4
ASCBRV36 EQU   ASCBSRQ4
ASCBRV35 EQU   ASCBSRQ3
ASCBRV34 EQU   ASCBSRQ3
ASCBRV33 EQU   ASCBSRQ3
ASCBRV32 EQU   ASCBSRQ3
ASCBRV31 EQU   ASCBSRQ3
ASCBRV30 EQU   ASCBSRQ3
ASCBRV29 EQU   ASCBSRQ3
ASCBRV28 EQU   ASCBSRQ3
ASCBRV27 EQU   ASCBSRQ2
ASCBRV26 EQU   ASCBSRQ2
ASCBRV25 EQU   ASCBSRQ2
ASCBRV24 EQU   ASCBSRQ2
ASCBRV23 EQU   ASCBSRQ2
ASCBRV22 EQU   ASCBSRQ2
ASCBRV21 EQU   ASCBSRQ2
ASCBRV20 EQU   ASCBSRQ2
ASCBRV19 EQU   ASCBSRQ1
ASCBRV18 EQU   ASCBSRQ1
ASCBRV17 EQU   ASCBSRQ1
ASCBRV16 EQU   ASCBSRQ1
ASCBRV15 EQU   ASCBSRQ1
ASCBRV14 EQU   ASCBSRQ1
ASCBRV13 EQU   ASCBSRQ1
ASCBSTA  EQU   ASCBSRQ1
ASCBJBNS EQU   ASCB+176
ASCBJBNI EQU   ASCB+172
ASCBMCC  EQU   ASCB+168
ASCBRTWA EQU   ASCB+164
ASCBIQEA EQU   ASCB+160
ASCBXMPQ EQU   ASCB+156
ASCBRS01 EQU   ASCB+154
ASCBFMCT EQU   ASCB+152
ASCBOUXB EQU   ASCB+148
ASCBOUCB EQU   ASCB+144
ASCBMECB EQU   ASCB+140
ASCBQECB EQU   ASCB+136
ASCBLSQH EQU   ASCBLKGP+4
ASCBLOCK EQU   ASCBLKGP
ASCBTCBS EQU   ASCB+124
ASCBNVSC EQU   ASCB+122
ASCBVSC  EQU   ASCB+120
ASCBSRBS EQU   ASCB+118
ASCBSSRB EQU   ASCB+116
ASCBRV06 EQU   ASCBFLG2
ASCBRV05 EQU   ASCBFLG2
ASCBRV04 EQU   ASCBFLG2
ASCBSNQS EQU   ASCBFLG2
ASCBS2S  EQU   ASCBFLG2
ASCBCEXT EQU   ASCBFLG2
ASCBPXMT EQU   ASCBFLG2
ASCBXMPT EQU   ASCBFLG2
ASCBRF07 EQU   ASCBDSP1
ASCBRF06 EQU   ASCBDSP1
ASCBRF05 EQU   ASCBDSP1
ASCBRF04 EQU   ASCBDSP1
ASCBRF03 EQU   ASCBDSP1
ASCBRF02 EQU   ASCBDSP1
ASCBFAIL EQU   ASCBDSP1
ASCBNOQ  EQU   ASCBDSP1
ASCBSWCT EQU   ASCB+112
ASCBASXB EQU   ASCB+108
ASCBTMCH EQU   ASCB+104
ASCBNSWP EQU   ASCBFLG1
ASCBTYP1 EQU   ASCBFLG1
ASCBSTND EQU   ASCBFLG1
ASCBABNT EQU   ASCBFLG1
ASCBTERM EQU   ASCBFLG1
ASCBS3S  EQU   ASCBFLG1
ASCBCMSH EQU   ASCBFLG1
ASCBTOFF EQU   ASCBFLG1
ASCBRF01 EQU   ASCBRCTF
ASCBTMLW EQU   ASCBRCTF
ASCBOUT  EQU   ASCBRCTF
ASCBWAIT EQU   ASCBRCTF
ASCBRV08 EQU   ASCBRCTF
ASCBFQU  EQU   ASCBRCTF
ASCBFRS  EQU   ASCBRCTF
ASCBTMNO EQU   ASCBRCTF
ASCBAFFN EQU   ASCBFW1
ASCBDUMP EQU   ASCB+96
ASCBRV44 EQU   ASCB+92
ASCBUBET EQU   ASCB+88
ASCBECB  EQU   ASCB+84
ASCBJSTL EQU   ASCB+80
ASCBEWST EQU   ASCB+72
ASCBEJST EQU   ASCB+64
ASCBTSB  EQU   ASCB+60
ASCBCSCB EQU   ASCB+56
ASCBRSMA EQU   ASCBRSM+1
ASCBRV54 EQU   ASCBRSMF
ASCBRV53 EQU   ASCBRSMF
ASCBRV52 EQU   ASCBRSMF
ASCBRV51 EQU   ASCBRSMF
ASCBVEQR EQU   ASCBRSMF
ASCBN2LP EQU   ASCBRSMF
ASCB1LPU EQU   ASCBRSMF
ASCB2LPU EQU   ASCBRSMF
ASCBLDA  EQU   ASCB+48
ASCBSTOR EQU   ASCB+44
ASCBDP   EQU   ASCB+43
ASCBRV07 EQU   ASCB+42
ASCBIOSM EQU   ASCB+40
ASCBSEQN EQU   ASCB+38
ASCBCPUS EQU   ASCB+32
ASCBSPL  EQU   ASCB+28
ASCBIOSP EQU   ASCB+24
ASCBSYNC EQU   ASCBSUPC+4
ASCBSVRB EQU   ASCBSUPC
ASCBCMSF EQU   ASCB+12
ASCBBWDP EQU   ASCB+8
ASCBFWDP EQU   ASCB+4
ASCBASCB EQU   ASCB
ASCBEGIN EQU   ASCB
@NM00109 EQU   SRB+40
@NM00108 EQU   SRB+38
SRBPKF   EQU   SRB+36
SRBSAVE  EQU   SRB+32
SRBPARM  EQU   SRB+28
SRBPTCB  EQU   SRBFLC+4
SRBCPAFF EQU   SRBFLC
SRBFLNK  EQU   SRB+4
@NM00107 EQU   SCCWLTIC+4
SCCWLTAD EQU   SCCWLTIC+1
SCCWLTOP EQU   SCCWLTIC
SCCWRWCT EQU   SCCWRW+6
@NM00106 EQU   SCCWRW+5
SCCWRWFL EQU   SCCWRW+4
SCCWRWAD EQU   SCCWRW+1
SCCWRWOP EQU   SCCWRW
@NM00105 EQU   SCCWTIC+4
SCCWTIOP EQU   SCCWTIC
SCCWSRCT EQU   SCCWSRCH+6
@NM00104 EQU   SCCWSRCH+5
SCCWSRFL EQU   SCCWSRCH+4
SCCWFLCT EQU   SCCWSSEC+4
SCCWSSOP EQU   SCCWSSEC
SCCWFGCT EQU   SCCWSEEK+4
SCCWSKOP EQU   SCCWSEEK
SCCWSVOA EQU   SCCWHDR+84
SCCWRSV1 EQU   SCCWSARG+63
SCCWR    EQU   SCCWSRH+4
SCCWHH   EQU   SCCWCCHH+2
SCCWM    EQU   SCCWSARG
SCCWIORB EQU   SCCWHDR+12
SCCWAIA  EQU   SCCWHDR+8
@NM00103 EQU   SCCWHDR+3
@NM00102 EQU   SCCWFLAG
SCCWERR  EQU   SCCWFLAG
SCCWID   EQU   SCCWHDR
@NM00101 EQU   SATHDR+28
SATASGN  EQU   SATHDR+24
SATSLTNO EQU   SATHDR+20
@NM00100 EQU   SATHDR+15
SATMASK  EQU   SATHDR+14
SATOFFST EQU   SATHDR+12
SRERRCNT EQU   SARTE+24
SRESCCW  EQU   SARTE+12
@NM00099 EQU   SREFLG
SREDRIVE EQU   SREFLG
SREDSBD  EQU   SREFLG
SRENUSE  EQU   SREFLG
@NM00098 EQU   SARTE+8
SRELOCK  EQU   SARTE+4
@NM00097 EQU   SARTHDR+60
SARSRBCT EQU   SARTHDR+52
SARWAITL EQU   SARWAITQ+4
SARWAITF EQU   SARWAITQ
SARDSNL  EQU   SARTHDR+24
@NM00096 EQU   SARTHDR+12
SDCRESV  EQU   SDCTE+18
SDCSSECT EQU   SDCTE+16
SDCSLTRK EQU   SDCTE+8
@NM00095 EQU   SDCT+128
SDCRSV1  EQU   SDCHDR+6
SDCID    EQU   SDCHDR
@NM00094 EQU   IORB+40
IORRSV   EQU   IORB+36
IORTSMP  EQU   IORB+24
IORERR   EQU   IORB+20
IORSAVE  EQU   IORB+16
IORIOSB  EQU   IORB+12
IORSCCW  EQU   IORPCCW
IORFAE   EQU   IORAPND
IORFNE   EQU   IORAPND
IORFDI   EQU   IORAPND
IORSWAP  EQU   IORFLGS
@NM00093 EQU   IORFLGS
IORFRPS  EQU   IORFLGS
IORFUSE  EQU   IORFLGS
IORRQSZ  EQU   IORB+2
IORID    EQU   IORB
@NM00092 EQU   PARTENT+62
PARELCYL EQU   PARTENT+60
PARENODE EQU   PARTENT+48
PARERRCT EQU   PARTENT+24
PAREIOEQ EQU   PARTENT+12
@NM00091 EQU   PAREFLG1
PAREINCP EQU   PAREFLG1
PAREDSBD EQU   PAREFLG1
@NM00090 EQU   PARETYPE
PARECPCT EQU   PARELKUP+2
@NM00089 EQU   PARELKFL
PAREFSIP EQU   PARELKFL
PARTLOCL EQU   PARTLOCQ+4
PARTLOCF EQU   PARTLOCQ
PARTDUPL EQU   PARTDUPQ+4
PARTDUPF EQU   PARTDUPQ
PARTSPLL EQU   PARTSPLQ+4
PARTSPLF EQU   PARTSPLQ
PARTCOML EQU   PARTCOMQ+4
PARTCOMF EQU   PARTCOMQ
PARTLOCK EQU   PARTHDR+44
PARTLKUP EQU   PARTHDR+40
@NM00088 EQU   PARTHDR+34
PARTDSNL EQU   PARTTPAR
PARTAIAE EQU   PARTHDR+12
PATRSV1  EQU   PATHDR+14
PCTTRBA  EQU   PCTSECT+2
PCTSECNM EQU   PCTSECT+1
PCTSLOT  EQU   PCTSLTNM
PCTFOVFL EQU   PCTSLTNM
PCTMSSB  EQU   PCT+38
PCTMAXTK EQU   PCT+36
PCTSSECN EQU   PCT+30
PCTDPGWT EQU   PCT+28
PCTSMAX  EQU   PCT+10
PCTID    EQU   PCT
XPTLSID2 EQU   XPTLPN
XPTLSID  EQU   XPTLGN
@NM00087 EQU   XPTFLAG2
XPTIOERR EQU   XPTFLAG2
XPTPOINP EQU   XPTFLAG2
XPTRES1  EQU   XPTFLAG2
XPTRSV4  EQU   XPTFLAGS
XPTDEFER EQU   XPTFLAGS
XPTRES2  EQU   XPTFLAGS
XPTVIO   EQU   XPTFLAGS
@NM00086 EQU   XPTFLAGS
XPTCKF   EQU   XPTFLAGS
XPTVIOLP EQU   XPTFLAGS
XPTRSV1  EQU   XPTE+1
XPTPROT  EQU   XPTE
NIPPTSID EQU   NIPPTE+6
@NM00085 EQU   NIPPTATF
NIPPTMRG EQU   NIPPTATF
@NM00084 EQU   NIPPTOPF
NIPPTCAN EQU   NIPPTOPF
NIPPTOPI EQU   NIPPTOPF
NIPPTADR EQU   NIPPTE
PTABEND  EQU   PARMTAB+312
@NM00083 EQU   PARMTAB+308
@NM00082 EQU   PARMTAB+300
@NM00081 EQU   PARMTAB+292
@NM00080 EQU   PARMTAB+284
RSU      EQU   PARMTAB+280
@NM00079 EQU   @NM00077+1
@NM00078 EQU   NIPPAFLG
NIPPAFL1 EQU   NIPPAFLG
@NM00076 EQU   PARMTAB+268
PURGE    EQU   PARMTAB+264
@NM00075 EQU   PARMTAB+260
WTORPLY  EQU   PARMTAB+256
@NM00074 EQU   PARMTAB+252
WTOBFRS  EQU   PARMTAB+248
@NM00073 EQU   PARMTAB+244
VRREGN   EQU   PARMTAB+240
@NM00072 EQU   PARMTAB+236
VAL      EQU   PARMTAB+232
@NM00071 EQU   PARMTAB+228
SYSP     EQU   PARMTAB+224
@NM00070 EQU   PARMTAB+220
SQA      EQU   PARMTAB+216
@NM00069 EQU   PARMTAB+212
SMF      EQU   PARMTAB+208
@NM00068 EQU   PARMTAB+204
REAL     EQU   PARMTAB+200
@NM00067 EQU   PARMTAB+196
@NM00066 EQU   PARMTAB+188
@NM00065 EQU   PARMTAB+180
OPT      EQU   PARMTAB+176
@NM00064 EQU   PARMTAB+172
OPI      EQU   PARMTAB+168
@NM00063 EQU   PARMTAB+164
NUCMAP   EQU   PARMTAB+160
@NM00062 EQU   PARMTAB+156
MLPA     EQU   PARMTAB+152
@NM00061 EQU   PARMTAB+148
MAXUSER  EQU   PARMTAB+144
@NM00060 EQU   PARMTAB+140
LOGLMT   EQU   PARMTAB+136
@NM00059 EQU   PARMTAB+132
LOGCLS   EQU   PARMTAB+128
@NM00058 EQU   PARMTAB+124
LNK      EQU   PARMTAB+120
@NM00057 EQU   PARMTAB+116
IPS      EQU   PARMTAB+112
@NM00056 EQU   PARMTAB+108
HARDCPY  EQU   PARMTAB+104
@NM00055 EQU   PARMTAB+100
FIX      EQU   PARMTAB+96
@NM00054 EQU   PARMTAB+92
DUMP     EQU   PARMTAB+88
@NM00053 EQU   PARMTAB+84
CVIO     EQU   PARMTAB+80
@NM00052 EQU   PARMTAB+76
CSA      EQU   PARMTAB+72
@NM00051 EQU   PARMTAB+68
CPQE     EQU   PARMTAB+64
@NM00050 EQU   PARMTAB+60
CONT     EQU   PARMTAB+56
@NM00049 EQU   PARMTAB+52
CMD      EQU   PARMTAB+48
@NM00048 EQU   PARMTAB+44
CLPA     EQU   PARMTAB+40
@NM00047 EQU   PARMTAB+36
BLDLF    EQU   PARMTAB+32
@NM00046 EQU   PARMTAB+28
BLDL     EQU   PARMTAB+24
@NM00045 EQU   PARMTAB+20
APG      EQU   PARMTAB+16
@NM00044 EQU   PARMTAB+12
APF      EQU   PARMTAB+8
PTABSTRT EQU   PARMTAB
NIPPABUF EQU   NIPPAREA+572
NIPPAPTB EQU   NIPPAREA+252
@NM00043 EQU   NIPPAREA+248
NIPPARCD EQU   NIPPAIOD+136
NIPPADEB EQU   NIPPAIOD+88
@NM00042 EQU   NIPPAECB+1
NIPPAECC EQU   NIPPAECB
NIPPADCB EQU   NIPPAIOD+80
NIPPAIOB EQU   NIPPAIOD+40
@NM00041 EQU   NIPPAIOD+37
NIPPASID EQU   NIPPAIOD+32
NIPPATXT EQU   NIPPAIOD
@NM00040 EQU   NIPPAREA+30
@NM00039 EQU   NIPPABDL+15
NIPPATTR EQU   NIPPABDL+12
NIPPANAM EQU   NIPPABDL+4
NIPPA2BF EQU   NIPPABDH
NIPPARC  EQU   NIPPAREA+8
@NM00038 EQU   NIPPAREA
NIPPABYT EQU   NIPPAHDR+4
NIPPAQ   EQU   NIPPAHDR
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00037 EQU   CVTFIX+248
@NM00036 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTRSV99 EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTLDEV  EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTSV76Q EQU   CVTSV76C
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTSV76M EQU   CVTIOQET
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
NVTRMSG  EQU   NVT+540
NVTRLOCK EQU   NVT+536
NVTRCODE EQU   NVT+532
@NM00035 EQU   NVT+529
@NM00034 EQU   NVTFLPO
@NM00033 EQU   NVTFLPO
NVTSYSP  EQU   NVTFLPO
NVTFLLST EQU   NVTFLPO
NVTRSV48 EQU   NVT+524
NVTRSV47 EQU   NVT+520
NVTRSV46 EQU   NVT+516
@NM00032 EQU   NVT+512
NVTREALR EQU   NVT+508
NVTFASVT EQU   NVT+504
NVTRSV45 EQU   NVT+496
NVTVRLNG EQU   NVT+492
NVTVRREG EQU   NVT+488
NVTLVIRT EQU   NVT+484
NVTRSV4A EQU   NVT+480
NVTRMSS  EQU   NVT+472
NVTRPQE  EQU   NVT+468
NVTRLLE  EQU   NVT+464
NVTRJPQ  EQU   NVT+460
NVTVMSS  EQU   NVT+456
NVTVPQE  EQU   NVT+452
NVTVLLE  EQU   NVT+448
NVTVJPQ  EQU   NVT+444
NVTLSEC  EQU   NVTLOCAT+4
NVTLFST  EQU   NVTLOCAT
NVTXSEC  EQU   NVTXCTL+4
NVTXFST  EQU   NVTXCTL
@NM00031 EQU   NVT+425
NVTLPACT EQU   NVT+424
NVTCSLPG EQU   NVT+420
NVTCSIOB EQU   NVT+416
NVTCSLNM EQU   NVT+412
NVTCSLIB EQU   NVT+408
NVTBLDL  EQU   NVT+404
NVTVRBLD EQU   NVT+400
@NM00030 EQU   NVT+392
NVTVRTCB EQU   NVT+388
NVTVVTCB EQU   NVT+384
NVTSPUCB EQU   NVT+382
NVTRSV44 EQU   NVT+380
NVTPAREA EQU   NVT+368
NVTRSV43 EQU   NVT+364
@NM00029 EQU   NVT+363
NVTABWS1 EQU   NVT+362
NVTABCD1 EQU   NVT+360
@NM00028 EQU   NVT+358
NVTCPUAD EQU   NVT+356
NVTTOD   EQU   NVT+352
NVTSPE   EQU   NVT+344
NVTMBEND EQU   NVT+340
NVTMBUF  EQU   NVT+336
NVTDCBSN EQU   NVT+332
NVTDCBOC EQU   NVT+328
NVTDCBIC EQU   NVT+324
@NM00027 EQU   NVT+308
NVTNMBLD EQU   NVT+304
NVTNIPM  EQU   NVT+292
NVTIX    EQU   NVTFLWSC
NVTFLWS1 EQU   NVTWPSW2+2
NVTIDPSW EQU   NVTWPSW2
NVTWPSW1 EQU   NVTWTPSW
NVTMCPSW EQU   NVT+216
@NM00026 EQU   NVT+212
@NM00025 EQU   NVTFLCN
NVTFLRAC EQU   NVTFLCN
NVTFLNCK EQU   NVTFLCN
NVTFLNHC EQU   NVTFLCN
NVTFLASM EQU   NVTFLCN
NVTMP    EQU   NVTFLCN
NVTFLIOC EQU   NVTFLCN
NVTFLAC  EQU   NVTFLCN
NVTFLSG  EQU   NVT+210
NVTTRACE EQU   NVT+208
NVTNXPTR EQU   NVT+204
NVTNXSIZ EQU   NVT+202
@NM00024 EQU   NVT+200
NVTSGPSA EQU   NVT+196
NVTN0MSG EQU   NVT+192
NVTVVPG1 EQU   NVT+188
NVTSTMAP EQU   NVT+176
NVTRTMSA EQU   NVT+172
NVTMFASA EQU   NVT+168
NVTLSPQE EQU   NVT+164
NVTALSQA EQU   NVT+160
NVTPQSAV EQU   NVT+156
NVTSVC60 EQU   NVT+148
NVTABSEC EQU   NVTABSAV+4
NVTABFST EQU   NVTABSAV
NVTNVSQA EQU   NVT+138
NVTRSVMN EQU   NVT+136
NVTNBMIN EQU   NVT+134
NVTRGNAV EQU   NVT+132
NVTLSQNO EQU   NVT+130
NVTSQANO EQU   NVT+128
NVTLSQAS EQU   NVT+124
NVTLNGFX EQU   NVT+120
NVTIGXER EQU   NVT+116
@NM00023 EQU   NVT+112
NVTRSV49 EQU   NVT+108
NVTNVRSZ EQU   NVT+104
NVTMFA   EQU   NVT+100
NVTDSSNG EQU   NVT+96
NVTMSLNK EQU   NVT+92
NVTVVMDI EQU   NVT+88
NVTIGCER EQU   NVT+84
NVTVBLDL EQU   NVT+80
NVTSVCTB EQU   NVT+76
NVTRSV42 EQU   NVT+72
NVTRSV41 EQU   NVT+68
NVTMASCB EQU   NVT+64
NVTCMTCB EQU   NVT+60
NVTMSTCB EQU   NVT+56
@NM00022 EQU   NVTFLLB
NVTFLSLB EQU   NVTFLLB
@NM00021 EQU   NVTNPATR
NVTNPREU EQU   NVTNPREN
@NM00020 EQU   NVTNPREN
NVTNPSFX EQU   NVT+53
@NM00019 EQU   NVT+52
NVTNPSUF EQU   NVT
ASMCPTAK EQU   ASMCPRSQ
ASMCPCNT EQU   ASMCPAVQ+4
ASMCPEXT EQU   ASMPOOLS+6
ASMCPID  EQU   ASMPOOLS
ASMRSV12 EQU   ASMVT+1000
ASMSAVE  EQU   ASMVT+928
ASMWKSA7 EQU   ASMVT+848
ASMWKSA6 EQU   ASMVT+768
ASMSWKPC EQU   ASMVT+328
ASMRSV10 EQU   ASMVT+280
ASMPVACE EQU   ASMVT+276
ASMPIOFR EQU   ASMVT+272
ASMPVACQ EQU   ASMVT+268
ASMPMSGS EQU   ASMVT+264
ASMPMSG0 EQU   ASMVT+260
ASMPFRLG EQU   ASMVT+256
ASMPRLG  EQU   ASMVT+252
ASMPACT  EQU   ASMVT+248
ASMPSAV  EQU   ASMVT+244
ASMPCMP  EQU   ASMVT+240
ASMPCMPA EQU   ASMVT+236
ASMPCMPN EQU   ASMVT+232
ASMPCMPD EQU   ASMVT+228
ASMPEX   EQU   ASMVT+224
ASMVRMTR EQU   ASMVT+220
ASMPSRBC EQU   ASMVT+216
ASMPFRSW EQU   ASMVT+200
ASMPFRSL EQU   ASMVT+196
ASMPQIOE EQU   ASMVT+192
ASMRSV8  EQU   ASMVT+188
ASMVSAMW EQU   ASMVT+184
ASMTASCB EQU   ASMVT+180
ASMRLGWQ EQU   ASMVT+176
ASMRLGRQ EQU   ASMVT+172
ASMTMECB EQU   ASMVT+168
ASMTCBPT EQU   ASMVT+164
ASMREQCT EQU   ASMVT+160
ASMGOSWK EQU   ASMGOSQS+4
ASMGOSWT EQU   ASMGOSQS
ASMLSAIH EQU   ASMLSAI+4
ASMLSAIL EQU   ASMLSAI
ASMCINV  EQU   ASMVT+140
ASMSTGXA EQU   ASMVT+136
ASMSLOTV EQU   ASMVT+128
ASMERRS  EQU   ASMVT+124
ASMNVSC  EQU   ASMVT+120
ASMVSC   EQU   ASMVT+116
ASMRSV7  EQU   ASMVT+92
ASMSRBCT EQU   ASMVT+84
ASMIOCNT EQU   ASMVT+80
ASMPCCWC EQU   ASMPCCWQ+4
ASMPCCWA EQU   ASMPCCWQ
ASMRSV6  EQU   ASMVT+48
ASMIORQC EQU   ASMVT+44
ASMIORQR EQU   ASMVT+40
ASMSTAGL EQU   ASMSTAGQ+4
ASMSTAGF EQU   ASMSTAGQ
ASMRSV5  EQU   ASMVT+28
ASMEREC  EQU   ASMVT+20
ASMTRPAG EQU   ASMVT+16
ASMGOS   EQU   ASMVT+12
ASMNOTMR EQU   ASMFLAG2
ASMNOSAV EQU   ASMFLAG2
ASMCALLQ EQU   ASMFLAG2
ASMNODPX EQU   ASMFLAG1
ASMRSV1  EQU   ASMFLAG1
ASMNOCWQ EQU   ASMFLAG1
QSRZERO2 EQU   QSRLSID2
QSRZERO  EQU   QSRLSID
@NM00014 EQU   QSR+16032
@NM00013 EQU   QSRHDR+21
@NM00012 EQU   QSRFLAGS
@NM00011 EQU   TPASENT+1
TPASFLAG EQU   TPASENT
@NM00010 EQU   TPARENT+80
@NM00009 EQU   TPARENT+5
@NM00008 EQU   TPAECLAS
@NM00007 EQU   TPAESTAT
TPAEXPND EQU   TPAESTAT
@NM00006 EQU   TPARTBLE+8192
@NM00005 EQU   TPARTBLE+7408
@NM00004 EQU   TPARHEAD+40
@NM00003 EQU   TPARHEAD+28
@NM00002 EQU   TPARHEAD+9
@NM00001 EQU   TPARFLAG
@NM00133 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00132 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSALITA  EQU   PSA+764
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00131 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00130 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSARV013 EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAANEW  EQU   PSA+544
PSATOLD  EQU   PSA+540
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00129 EQU   FLCFSA
@NM00128 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00127 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00126 EQU   FLCIOA
@NM00125 EQU   FLCMCLA+15
@NM00124 EQU   FLCMCLA+14
@NM00123 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00122 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00121 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00120 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00119 EQU   FLCPER
@NM00118 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00117 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00116 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00115 EQU   FLCPIILC
@NM00114 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00113 EQU   FLCSVILC
@NM00112 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00111 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00110 EQU   FLCICCW2+4
FLCCVT   EQU   FLCICCW2
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00211 EQU   @RC00207
@RC00234 EQU   @RC00230
@RF00302 EQU   REDOPLPA
@RF00299 EQU   REDOPLPA
@RF00314 EQU   REDOPLPA
@RC00292 EQU   @RC00290
@RC00379 EQU   @RC00377
@RC00339 EQU   @RC00325
@RF00434 EQU   DUPCOMP
@RC00434 EQU   @RC00432
@RF00529 EQU   OPENDP
@RF00540 EQU   OPENDP
@RC00523 EQU   @RC00521
@RC00537 EQU   @RC00521
@RC00557 EQU   @RC00555
@RC00643 EQU   @RC00642
@RT00709 EQU   CHKCOMM
@RF00712 EQU   OPENCM
@RC00691 EQU   @RC00671
@RC00746 EQU   @RC00736
@RT00771 EQU   OPENLOCL
@RT00857 EQU   OPENLOCL
@RC00908 EQU   @RC00904
@RT00975 EQU   REDO
@RF00995 EQU   REDO
@RF00987 EQU   REDO
@RC00966 EQU   @RC00961
@RC01061 EQU   @RC01042
@RC01223 EQU   @RC01219
@RC01263 EQU   @RC01261
@RT01280 EQU   INITSART
@RT01385 EQU   REDOSWAP
@RF01391 EQU   REDOSWAP
@RC01378 EQU   @RC01376
@RC01767 EQU   @RC01765
@RC01888 EQU   @RC01886
@RF01912 EQU   OPENAAGN
@RT02030 EQU   REDOL
@RC00214 EQU   @RC00211
@RC00237 EQU   @RC00234
@RC00442 EQU   @RC00434
@RC00567 EQU   @RC00557
@RC00968 EQU   @RC00966
@RC00981 EQU   @RC00966
@RC00216 EQU   @RC00214
@RC00240 EQU   @RC00237
@RC00444 EQU   @RC00442
@RC00570 EQU   @RC00567
@RC00219 EQU   @RC00216
@ENDDATA EQU   *
         END   ILRASRIM,(C'PLS0913',0701,77272)
