         TITLE 'ILRGOS - GROUP OPERATIONS STARTER                      *
                        '
ILRGOS   CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00001-@MAINENT)
         DC    AL1(16)                                             0001
         DC    C'ILRGOS    76.087'                                 0001
ILRFRELG DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00711-ILRFRELG)
         ENTRY ILRFRELG
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @06,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@06                                         0001
         AH    @15,4(,@15)                                         0001
         BR    @15                                                 0001
@EP00001 DS    0H                                                  0002
         USING     @DATD,WKSAV@
*   ACAPTR=R1;                      /* OBTAIN ADDRESSIBILITY TO THE
*                                      ACA                           */
         LR    ACAPTR,R1                                           0058
*   RFY                                                            0059
*     R1 UNRSTD;                                                   0059
*   IF ACAASID^=PSAAOLD->ASCBASID THEN                             0060
         L     @14,PSAAOLD                                         0060
         LH    @14,ASCBASID(,@14)                                  0060
         N     @14,@CF01812                                        0060
         CH    @14,ACAASID(,ACAPTR)                                0060
         BE    @RF00060                                            0060
*     RETURN CODE(CODE04);          /* REQUEST NOT FOR THIS ADDRESS
*                                      SPACE, GET OUT IMMEDIATELY    */
         LA    @15,4                                               0061
         L     @14,12(,@13)                                        0061
         LM    @00,@12,20(@13)                                     0061
         BR    @14                                                 0061
*   ASMVTPTR=CVTASMVT;              /* OBTAIN ADDRESS OF ASMVT       */
@RF00060 L     @14,CVTPTR                                          0062
         L     ASMVTPTR,CVTASMVT(,@14)                             0062
*                                                                  0063
*   /*****************************************************************/
*   /*                                                               */
*   /* SAVE OR ACTIVATE REQUEST, LOCAL LOCK IS NOT HELD, GETMAIN     */
*   /* WORK-SAVE AREA, AND ESTABLISH ESTAE RECOVERY                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0063
*   IF ACAOP=ACESVLGN×ACAOP=ACEACT THEN                            0063
         CLI   ACAOP(ACAPTR),16                                    0063
         BE    @RT00063                                            0063
         CLI   ACAOP(ACAPTR),20                                    0063
         BNE   @RF00063                                            0063
@RT00063 DS    0H                                                  0064
*     DO;                           /* SAVE OR ACTIVATE REQ.         */
*       IF ASMSTGXA=ZERO×(ACAOP=ACESVLGN&ASMNOSAV=ON) THEN         0065
         L     @14,ASMSTGXA(,ASMVTPTR)                             0065
         LTR   @14,@14                                             0065
         BZ    @RT00065                                            0065
         CLI   ACAOP(ACAPTR),16                                    0065
         BNE   @RF00065                                            0065
         TM    ASMNOSAV(ASMVTPTR),B'01000000'                      0065
         BNO   @RF00065                                            0065
@RT00065 DS    0H                                                  0066
*         RETURN CODE(CODE20);      /* NO ACB FOR STORAGE INDEX, OR
*                                      SAVE REQUEST AND STORAGE INDEX
*                                      UNAVAILABLE THEN CODE20,    0066
*                                      UNABLE TO USE STGINDEX        */
*                                                                  0066
         LA    @15,20                                              0066
         L     @14,12(,@13)                                        0066
         LM    @00,@12,20(@13)                                     0066
         BR    @14                                                 0066
*       /*************************************************************/
*       /*                                                           */
*       /* OBTAIN A WORK-SAVE AREA, BUFFER CONTROL AREA, ATA AND     */
*       /* EPATH                                                     */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0067
*       RFY                                                        0067
*        (R10,                                                     0067
*         R11,                                                     0067
*         R1AREA) RSTD;                                            0067
@RF00065 DS    0H                                                  0068
*       R10=LENGTH(WKAREA);         /* OBTAIN LENGTH TO BE GETMAINED */
         LA    R10,256                                             0068
*       GEN SETS(R1AREA,R15) REFS(WKSAV@);                         0069
*                                  /* GET SQA SPACE FROM SUBPOOL 245*/
        GETMAIN RC,LV=(R10),SP=245
*       IF R15^=CODE00 THEN                                        0070
         LTR   R15,R15                                             0070
         BZ    @RF00070                                            0070
*         RETURN CODE(CODE28);      /* NO STORAGE AVAILABLE          */
         LA    @15,28                                              0071
         L     @14,12(,@13)                                        0071
         LM    @00,@12,20(@13)                                     0071
         BR    @14                                                 0071
*       WKSAV@=R1AREA;              /* ADDRESSIBILITY TO WORK AREA   */
@RF00070 LR    WKSAV@,R1AREA                                       0072
*       WKAREA=''B;                 /* CLEAR THE WORK-SAVE AREA      */
         XC    WKAREA(256,WKSAV@),WKAREA(WKSAV@)                   0073
*       ATAPTR=ADDR(WKATA);         /* ATA IN WORK SAVE AREA ON    0074
*                                      UNLOCKED PATHS                */
         LA    ATAPTR,WKATA                                        0074
*       R11=ADDR(ILRCGOSE);         /* ADDR ESTAE RECOVERY ROUTINE   */
         L     R11,@CV01708                                        0075
*       GEN REFS(R11,ATAPTR);                                      0076
        ESTAE (11),PARAM=(4),MF=(E,ESTAELST),TERM=YES,PURGE=NONE,     **
               ASYNCH=YES
*       IF R15^=CODE00 THEN                                        0077
         LTR   R15,R15                                             0077
         BZ    @RF00077                                            0077
*         DO;                       /* ESTAE ERROR                   */
*           GEN REFS(R10,WKSAV@);                                  0079
*                     /* FREE WORK AREA JUST GETMAINED */
        FREEMAIN RC,LV=(R10),A=(WKSAV@),SP=245
*           RETURN CODE(CODE44);    /* INDETERMINENT ERROR           */
         LA    @15,44                                              0080
         L     @14,12(,@13)                                        0080
         LM    @00,@12,20(@13)                                     0080
         BR    @14                                                 0080
*         END;                      /* END ESTAE ERROR DO            */
*       RFY                                                        0082
*        (R10,                                                     0082
*         R11,                                                     0082
*         R15) UNRSTD;                                             0082
@RF00077 DS    0H                                                  0083
*     END;                          /* END SAVE OR ACTIVATE DO       */
*                                                                  0084
*   /*****************************************************************/
*   /*                                                               */
*   /* RELEASE OR ASSIGN REQUEST, LOCAL LOCK IS HELD, OBTAIN         */
*   /* WORK-SAVE AREA VIA ILRGMA MACRO, AND ESTABLISH FRR RECOVERY   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0084
*   ELSE                                                           0084
*     DO;                           /* RELEASE OR ASSIGN REQUEST OR
*                                      INVALID OPERATION TYPE        */
         B     @RC00063                                            0084
@RF00063 DS    0H                                                  0085
*       IF ACAOP^=ASSIGN&ACAOP^=ACERELLG THEN                      0085
         CLI   ACAOP(ACAPTR),8                                     0085
         BE    @RF00085                                            0085
         CLI   ACAOP(ACAPTR),12                                    0085
         BE    @RF00085                                            0085
*         RETURN CODE(CODE32);      /* INVALID OPERATION TYPE        */
*                                                                  0086
         LA    @15,32                                              0086
         L     @14,12(,@13)                                        0086
         LM    @00,@12,20(@13)                                     0086
         BR    @14                                                 0086
*       /*************************************************************/
*       /*                                                           */
*       /* ASSIGN OR RELEASE REQUEST BEGIN ILRGMA MACRO EXPANSION    */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0087
*       DO;                         /* ILRGMA GET                  0087
*                                      CELL(BWK)WORKREGS(R11,R12)    */
@RF00085 DS    0H                                                  0088
*         DECLARE                   /* ASMVT VECTOR TO ILRPEX        */
*           ILRPEX ENTRY BASED(ASMPEX) VALRG(0);                   0088
*         DECLARE                   /* MAP FOR CELL CONTROL WORDS    */
*           1 GMACELL BASED BDY(WORD),                             0089
*            2 GMANEXT PTR(31);     /* PTR NEXT FREE CELL            */
*         RESPECIFY                                                0090
*          (R0,                                                    0090
*           R1,                                                    0090
*           R11,                                                   0090
*           R12,                                                   0090
*           R14,                                                   0090
*           R15) RESTRICTED;                                       0090
*         RESPECIFY                                                0091
*           ASMPOOLS BASED(R11);                                   0091
*         RESPECIFY                                                0092
*           GMACELL BASED(R14);                                    0092
*         R11=ADDR(ASMBWKPC);                                      0093
         LA    R11,ASMBWKPC(,ASMVTPTR)                             0093
*         LM(R14,R15,ASMCPAVQ);     /* GET ADDR OF 1ST CELL          */
         LM    R14,R15,ASMCPAVQ(R11)                               0094
*GMA00010:                                                         0095
*         IF R14^=0 THEN            /* TEST CELL POOL                */
GMA00010 LTR   R14,R14                                             0095
         BZ    @RF00095                                            0095
*           DO;                     /* CELL AVAILABLE, REMOVE CELL   */
*             R0=GMANEXT;                                          0097
         L     R0,GMANEXT(,R14)                                    0097
*             R1=R15-1;                                            0098
         LR    R1,R15                                              0098
         BCTR  R1,0                                                0098
*             CDS(R14,R0,ASMCPAVQ);                                0099
         CDS   R14,R0,ASMCPAVQ(R11)                                0099
*             BC(7,GMA00010);                                      0100
         BC    7,GMA00010                                          0100
*             R1=R14;                                              0101
         LR    R1,R14                                              0101
*           END;                                                   0102
*         ELSE                                                     0103
*           DO;                     /* CELL POOL EMPTY               */
         B     @RC00095                                            0103
@RF00095 DS    0H                                                  0104
*             R1=R11;               /* PREPARE TO CALL PEX           */
         LR    R1,R11                                              0104
*             CALL ILRPEX;          /* EXTEND THE POOL               */
         L     @15,ASMPEX(,ASMVTPTR)                               0105
         BALR  @14,@15                                             0105
*           END;                                                   0106
*         RESPECIFY                                                0107
*          (R0,                                                    0107
*           R1,                                                    0107
*           R11,                                                   0107
*           R12,                                                   0107
*           R14,                                                   0107
*           R15) UNRESTRICTED;                                     0107
@RC00095 DS    0H                                                  0108
*       END;                        /* ILRGMA GET                  0108
*                                      CELL(BWK)WORKREGS(R11,R12)    */
*                                                                  0108
*       /*************************************************************/
*       /*                                                           */
*       /* END ILRGMA MACRO EXPANSION                                */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0109
*       IF R1AREA=ZERO THEN                                        0109
         LTR   R1AREA,R1AREA                                       0109
         BNZ   @RF00109                                            0109
*         RETURN CODE(CODE28);      /* GMA UNSUCCESSFUL, NOT ENOUGH
*                                      STORAGE                       */
         LA    @15,28                                              0110
         L     @14,12(,@13)                                        0110
         LM    @00,@12,20(@13)                                     0110
         BR    @14                                                 0110
*       WKSAV@=R1AREA;              /* OBTAIN ADDRESSIBILITY TO WORK
*                                      AREA                          */
@RF00109 LR    WKSAV@,R1AREA                                       0111
*       WKAREA=''B;                 /* CLEAR THE WORK-SAVE AREA      */
         XC    WKAREA(256,WKSAV@),WKAREA(WKSAV@)                   0112
*       R1=ADDR(ILRGOS01);          /* OBTAIN FUNCTIONAL RECOVERY  0113
*                                      ROUTINE ADDR                  */
         L     R1,@CV01709                                         0113
*       GEN REFS(R1) SETS(ATAPTR,R11,R12);                         0114
       SETFRR A,FRRAD=(R1),PARMAD=(ATAPTR),WRKREGS=(R11,R12),         **
               RELATED=(SETFRR,ILRGOS)   ADD RECOVERY
*     END;                          /* END ASSIGN, RELEASE, OR     0115
*                                      INVALID TYPE                  */
*   RFY                                                            0116
*    (R1AREA,                                                      0116
*     R10) UNRSTD;                                                 0116
@RC00063 DS    0H                                                  0117
*                                                                  0117
*   /*****************************************************************/
*   /*                                                               */
*   /* COMMON PROCESSING FOR ALL REQUESTS DETERMINED TO BE VALID AND */
*   /* FOR WHICH A WORK-SAVE AREA HAS BEEN OBTAINED AND A RECOVERY   */
*   /* ROUTINE ESTABLISHED                                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0117
*   GEN REFS(R13) SETS(R11);                                       0117
*                        /* SET SAVE AREA LINKAGE */
       LA   R11,SAVAREA         GET ADDR OF SAVE AREA
       ST   R13,4(R11)          STORE ADDR CALLERS SAVE AREA
       ST   R11,8(R13)          STORE ADDR GOS SAVE AREA
*   RFY                                                            0118
*     R13 UNRSTD;                                                  0118
*   ATAMODID=ATAMGOS;               /* RRR-SET MODID IN ATA-RRR      */
         MVI   ATAMODID(ATAPTR),X'06'                              0119
*   ATAEPATH=ADDR(EPATH);           /* RRR-SET EPATH ADDR IN ATA-RRR */
         LA    @12,EPATH                                           0120
         ST    @12,ATAEPATH(,ATAPTR)                               0120
*   ATAWORKA=WKSAV@;                /* RRR-SET WORK SAVE AREA ADDR IN
*                                      ATA-RRR                       */
         ST    WKSAV@,ATAWORKA(,ATAPTR)                            0121
*   RSMHDPTR=PSAAOLD->ASCBRSM;      /* OBTAIN RSM HEADER ADDR WHICH
*                                      ALSO GIVES ADDRESSIBILITY TO
*                                      THE ASM HEADER                */
         L     @12,PSAAOLD                                         0122
         L     RSMHDPTR,ASCBRSM(,@12)                              0122
*   RTNCODE=CODE00;                 /* CLEAR RETURN CODE             */
         SLR   @12,@12                                             0123
         ST    @12,RTNCODE                                         0123
*                                                                  0124
*   /*****************************************************************/
*   /*                                                               */
*   /* ASSIGN REQUEST PROCESSING, DETERMINE THE SLOTS NEEDED TO BACK */
*   /* THIS REQUEST AND CALL THE ASSIGN SUBROUTINE TO BUILD A LGE, AN*/
*   /* ASPCT, AND OBTAIN A LGN. THE LGE IS THEN QUEUED TO THE ASM    */
*   /* HEADER LGE Q.                                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0124
*   IF ACAOP=ASSIGN THEN                                           0124
         CLI   ACAOP(ACAPTR),8                                     0124
         BNE   @RF00124                                            0124
*     DO;                           /* ASSIGN REQUEST                */
*       EPAACASR=ON;                /* RRR-INDICATE ASSIGN OR      0126
*                                      ACTIVATE REQUEST-RRR          */
         OI    EPAACASR,B'00001000'                                0126
*       IF ACAMAXPN<INVLDRPN THEN                                  0127
         L     @15,ACAMAXPN(,ACAPTR)                               0127
         C     @15,@CF01675                                        0127
         BNL   @RF00127                                            0127
*         DO;                       /* PAGE NUMBER IS VALID          */
*           IF SLOTV=ZERO THEN                                     0129
         L     @01,ASMSLOTV(,ASMVTPTR)                             0129
         C     @12,SLOTV(,@01)                                     0129
         BNE   @RF00129                                            0129
*             SLOTS=ACAMAXPN;       /* DEFAULTS SLOTS TO MAX. VALUE  */
         ST    @15,SLOTS                                           0130
*           ELSE                                                   0131
*             SLOTS=ACAMAXPN/SLOTV; /* OBTAIN SLOTS NEEDED TO BACK 0131
*                                      THIS LG                       */
         B     @RC00129                                            0131
@RF00129 L     @12,ASMSLOTV(,ASMVTPTR)                             0131
         L     @00,ACAMAXPN(,ACAPTR)                               0131
         SRDA  @00,32                                              0131
         D     @00,SLOTV(,@12)                                     0131
         ST    @01,SLOTS                                           0131
*           RFY                                                    0132
*            (R0,                                                  0132
*             R1) RSTD;                                            0132
@RC00129 DS    0H                                                  0133
*           R0=ASMBKSLT;            /* GET ASMVT BACKING SLOT COUNT  */
         L     R0,ASMBKSLT(,ASMVTPTR)                              0133
*UPDATSLT:                                                         0134
*           IF R0>=SLOTS THEN                                      0134
UPDATSLT L     @12,SLOTS                                           0134
         CR    R0,@12                                              0134
         BL    @RF00134                                            0134
*             DO;                   /* ENOUGH SLOTS AVAILABLE        */
*               R1=R0-SLOTS;        /* DECR COUNT                    */
         LCR   @12,@12                                             0136
         ALR   @12,R0                                              0136
         LR    R1,@12                                              0136
*               CS(R0,R1,ASMBKSLT); /* PUT COUNT IN ASMVT            */
         CS    R0,@01,ASMBKSLT(ASMVTPTR)                           0137
*               BC(NE,UPDATSLT);    /* NOT SUCCESSFUL, TRY AGAIN     */
         BC    7,UPDATSLT                                          0138
*               RFY                                                0139
*                (R0,                                              0139
*                 R1) UNRSTD;                                      0139
*               EPABKSLT=SLOTS;     /* RRR-TRACK SLOTS NEEDED IN   0140
*                                      EPATH-RRR                     */
         L     @12,SLOTS                                           0140
         ST    @12,EPABKSLT                                        0140
*               EPAASGN=ON;         /* RRR-INDICATE BACKING SLOTS HAS
*                                      BEEN UPDATED-RRR              */
         OI    EPAASGN,B'00000100'                                 0141
*               REQASPCT=ON;        /* INDICATE ASPCT NEEDED         */
         OI    REQASPCT,B'10000000'                                0142
*               CALL ASSIGNLG;      /* ASSIGN AN LGN AND BUILD A LGE
*                                      AND AN ASPCT                  */
         BAL   @14,ASSIGNLG                                        0143
*               RFY                                                0144
*                 ASPCTPTR RSTD;                                   0144
*               IF RTNCODE=ZERO THEN                               0145
         L     @15,RTNCODE                                         0145
         LTR   @15,@15                                             0145
         BNZ   @RF00145                                            0145
*                 DO;               /* ASSIGN SUBROUTINE SUCCESSFUL  */
*                   ASPCTPTR=SAVASPCT;/* RESTORE ASPCT ADDR OBTAINED
*                                      IN ASSIGN                     */
         L     ASPCTPTR,SAVASPCT                                   0147
*                   ASPMAXPN=ACAMAXPN;/* SET MAX PG NUMBER IN ASPCT  */
         L     @15,ACAMAXPN(,ACAPTR)                               0148
         ST    @15,ASPMAXPN(,ASPCTPTR)                             0148
*                   ASPBKSLT=SLOTS; /* SET NUMBER OF SLOTS REMOVED 0149
*                                      FOR THIS LG                   */
         L     @15,SLOTS                                           0149
         ST    @15,ASPBKSLT(,ASPCTPTR)                             0149
*                   RFY                                            0150
*                     ASPCTPTR UNRSTD;                             0150
*                   ACALGID=LGELGID;/* LGN ASSIGNED IS RETURNED VIA
*                                      THE ACA                       */
         L     @12,LGELGID(,LGEPTR)                                0151
         ST    @12,ACALGID(,ACAPTR)                                0151
*                 END;              /* END DO FOR SUCCESSFUL ASSIGN  */
*               ELSE                                               0153
*                 DO;               /* ASSIGN SUBROUTINE           0153
*                                      UNSUCCESSFUL, NOT ENOUGH    0153
*                                      STORAGE AVAILABLE             */
         B     @RC00145                                            0153
@RF00145 DS    0H                                                  0154
*                   RFY                                            0154
*                    (R0,                                          0154
*                     R1) RSTD;                                    0154
*                   R0=ASMBKSLT;    /* GET ASMVT BACKING SLOT COUNT  */
         L     R0,ASMBKSLT(,ASMVTPTR)                              0155
*RESTRSLT:                                                         0156
*                   R1=R0+SLOTS;    /* RESTORE COUNT                 */
RESTRSLT LR    R1,R0                                               0156
         AL    R1,SLOTS                                            0156
*                   CS(R0,R1,ASMBKSLT);/* PUT COUNT IN ASMVT         */
         CS    R0,@01,ASMBKSLT(ASMVTPTR)                           0157
*                   BC(NE,RESTRSLT);/* NOT SUCCESSFUL, TRY AGAIN     */
         BC    7,RESTRSLT                                          0158
*                   EPAASGN=OFF;    /* RRR-BACKING SLOTS HAS BEEN  0159
*                                      RESTORED-RRR                  */
         NI    EPAASGN,B'11111011'                                 0159
*                   RFY                                            0160
*                    (R0,                                          0160
*                     R1) UNRSTD;                                  0160
*                 END;              /* END UNSUCCESSFUL ASSIGN       */
*             END;                  /* END ENOUGH SLOTS AVAILABLE    */
*           ELSE                                                   0163
*             RTNCODE=CODE28;       /* NOT ENOUGH STORAGE AVAILABLE  */
         B     @RC00134                                            0163
@RF00134 MVC   RTNCODE(4),@CF00438                                 0163
*         END;                      /* END PROCESSING FOR VALID PAGE
*                                      NUMBER                        */
*       ELSE                                                       0165
*         RTNCODE=CODE28;           /* MAX PAGE NUMBER IS TOO LARGE  */
         B     @RC00127                                            0165
@RF00127 MVC   RTNCODE(4),@CF00438                                 0165
*     END;                          /* END ASSIGN PROCESSING         */
*                                                                  0167
*   /*****************************************************************/
*   /*                                                               */
*   /* NOT AN ASSIGN REQUEST, OBTAIN AND INITIALIZE AN ACE           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0167
*   ELSE                                                           0167
*     DO;                           /* RELEASE, ACTIVATE, SAVE COMMON
*                                      PROCESSING                    */
         B     @RC00124                                            0167
@RF00124 DS    0H                                                  0168
*       RFY                                                        0168
*         R1AREA RSTD;                                             0168
*                                                                  0168
*       /*************************************************************/
*       /*                                                           */
*       /* BEGIN ILRGMA MACRO EXPANSION                              */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0169
*       DO;                         /* ILRGMA GET                  0169
*                                      CELL(ACE)WORKREGS(R11,R12)    */
*         RESPECIFY                                                0170
*          (R0,                                                    0170
*           R1,                                                    0170
*           R11,                                                   0170
*           R12,                                                   0170
*           R14,                                                   0170
*           R15) RESTRICTED;                                       0170
*         RESPECIFY                                                0171
*           ASMPOOLS BASED(R11);                                   0171
*         RESPECIFY                                                0172
*           GMACELL BASED(R14);                                    0172
*         R11=ADDR(ASMACEPC);                                      0173
         LA    R11,ASMACEPC(,ASMVTPTR)                             0173
*         LM(R14,R15,ASMCPAVQ);     /* GET ADDR OF 1ST CELL          */
         LM    R14,R15,ASMCPAVQ(R11)                               0174
*GMA00020:                                                         0175
*         IF R14^=0 THEN            /* TEST CELL POOL                */
GMA00020 LTR   R14,R14                                             0175
         BZ    @RF00175                                            0175
*           DO;                     /* CELL AVAILABLE, REMOVE CELL   */
*             R0=GMANEXT;                                          0177
         L     R0,GMANEXT(,R14)                                    0177
*             R1=R15-1;                                            0178
         LR    R1,R15                                              0178
         BCTR  R1,0                                                0178
*             CDS(R14,R0,ASMCPAVQ);                                0179
         CDS   R14,R0,ASMCPAVQ(R11)                                0179
*             BC(7,GMA00020);                                      0180
         BC    7,GMA00020                                          0180
*             R1=R14;                                              0181
         LR    R1,R14                                              0181
*           END;                                                   0182
*         ELSE                                                     0183
*           DO;                     /* CELL POOL EMPTY               */
         B     @RC00175                                            0183
@RF00175 DS    0H                                                  0184
*             R1=R11;               /* PREPARE TO CALL PEX           */
         LR    R1,R11                                              0184
*             CALL ILRPEX;          /* EXTEND THE POOL               */
         L     @15,ASMPEX(,ASMVTPTR)                               0185
         BALR  @14,@15                                             0185
*           END;                                                   0186
*         RESPECIFY                                                0187
*          (R0,                                                    0187
*           R1,                                                    0187
*           R11,                                                   0187
*           R12,                                                   0187
*           R14,                                                   0187
*           R15) UNRESTRICTED;                                     0187
@RC00175 DS    0H                                                  0188
*       END;                        /* ILRGMA GET                  0188
*                                      CELL(ACE)WORKREGS(R11,R12)    */
*                                                                  0188
*       /*************************************************************/
*       /*                                                           */
*       /* END ILRGMA MACRO EXPANSION                                */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0189
*       IF R1AREA=ZERO THEN                                        0189
         LTR   R1AREA,R1AREA                                       0189
         BNZ   @RF00189                                            0189
*         RTNCODE=CODE28;           /* STORAGE UNAVAILABLE           */
         MVC   RTNCODE(4),@CF00438                                 0190
*       ELSE                                                       0191
*         DO;                       /* ILRGMA GET SUCCESSFUL, CLEAR
*                                      AND INITALIZE THE ACE, PROCESS
*                                      THE REQUEST                   */
         B     @RC00189                                            0191
@RF00189 DS    0H                                                  0192
*           ACEPTR=R1AREA;          /* OBTAIN ADDRESSIBILITY TO ACE  */
         LR    ACEPTR,R1AREA                                       0192
*           ACE=''B;                /* CLEAR THE ACE                 */
         XC    ACE(40,ACEPTR),ACE(ACEPTR)                          0193
*           EPAACE=ACEPTR;          /* RRR-CHECKPOINT THE ACE IN THE
*                                      EPATH-RRR                     */
         ST    ACEPTR,EPAACE                                       0194
*           ACEOP=ACAOP;            /* PROPAGATE OP CODE             */
         IC    @12,ACAOP(,ACAPTR)                                  0195
         STC   @12,ACEOP(,ACEPTR)                                  0195
*           ACELGN=ACALGN;          /* PROPAGATE THE LOGICAL GROUP 0196
*                                      NUMBER                        */
         MVC   ACELGN(8,ACEPTR),ACALGN(ACAPTR)                     0196
*           ACESYM=ACASYM;          /* PROPAGATE THE 'S' SYMBOL      */
         MVC   ACESYM(8,ACEPTR),ACASYM(ACAPTR)                     0197
*           ACEGRPRQ=ON;            /* INDICATE A GROUP OP REQUEST   */
         OI    ACEGRPRQ(ACEPTR),B'10000000'                        0198
*           IF ACAOP=ACERELLG&ACAFSYM=ON THEN                      0199
         CLI   ACAOP(ACAPTR),12                                    0199
         BNE   @RF00199                                            0199
         TM    ACAFSYM(ACAPTR),B'00001000'                         0199
         BNO   @RF00199                                            0199
*             ACEUSYM=ON;           /* INDICATES 'S' SYMBOL        0200
*                                      IDENTIFIES THE LOGICAL GROUP
*                                      BEING RELEASED                */
         OI    ACEUSYM(ACEPTR),B'10000000'                         0200
*                                                                  0201
*           /*********************************************************/
*           /*                                                       */
*           /* INPUT WAS DETERMINED TO BE A SAVE OR RELEASE REQUEST, */
*           /* DETERMINES IF A RELEASE 'S' SYMBOL AND FINDS LGID IF  */
*           /* ONE EXISTS FOR THIS REQUEST                           */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0201
*           IF ACEOP^=ACEACT THEN                                  0201
@RF00199 CLI   ACEOP(ACEPTR),20                                    0201
         BE    @RF00201                                            0201
*             DO;                   /* NOT AN ACTIVATE REQUEST,    0202
*                                      PROCESSING FOR SAVE AND     0202
*                                      RELEASE                       */
*               CALL GETLOCK;       /* OBTAIN THE ASM CLASS LOCK     */
         BAL   @14,GETLOCK                                         0203
*               IDEXISTS=ON;        /* INTERNAL FLAG, INITIALIZED ON
*                                      INDICATING THE LGID EXISTS FOR
*                                      THE REQUEST                   */
         OI    IDEXISTS,B'01000000'                                0204
*               IF ACEUSYM=ON THEN                                 0205
         TM    ACEUSYM(ACEPTR),B'10000000'                         0205
         BNO   @RF00205                                            0205
*                 DO;               /* RELEASE 'S' SYMBOL            */
*                   IDEXISTS=OFF;   /* TURN FLAG OFF UNTIL THE LGE IS
*                                      FOUND ON THE LGE Q            */
         NI    IDEXISTS,B'10111111'                                0207
*                   IF ASHLGEQ^=ZERO THEN                          0208
         L     @12,ASHLGEQ(,RSMHDPTR)                              0208
         LTR   @12,@12                                             0208
         BZ    @RF00208                                            0208
*                     DO;           /* ASMH LGE Q IS NOT EMPTY       */
*                       LGEPTR=ASHLGEQ;/* OBTAIN ADDR FIRST ELEMENT
*                                      ON Q                          */
*                                                                  0210
         LR    LGEPTR,@12                                          0210
*                       /*********************************************/
*                       /*                                           */
*                       /* SEARCH THE LGE Q FOR THE LGE OF ASPCT WITH*/
*                       /* 'S' SYMBOL TO BE RELEASED                 */
*                       /*                                           */
*                       /*********************************************/
*                                                                  0211
*                       DO UNTIL LGEPTR=ZERO×IDEXISTS=ON;/* UNTIL  0211
*                                      THERE ARE NO MORE LGES OR THE
*                                      LGE WITH THE CORRECT 'S'    0211
*                                      SYMBOL HAS BEEN FOUND         */
@DL00211 DS    0H                                                  0212
*                         IF LGEASPCT=ZERO×LGEASPCT->ASPSSYM^=ACESYM
*                           THEN                                   0212
         L     @12,LGEASPCT(,LGEPTR)                               0212
         LTR   @12,@12                                             0212
         BZ    @RT00212                                            0212
         CLC   ASPSSYM(8,@12),ACESYM(ACEPTR)                       0212
         BE    @RF00212                                            0212
@RT00212 DS    0H                                                  0213
*                           LGEPTR=LGENEXT;/* ASPCT DOES NOT EXIST OR
*                                      THE 'S' OF THE ASPCT IS NOT 0213
*                                      THE CORRECT ONE               */
         L     LGEPTR,LGENEXT(,LGEPTR)                             0213
*                         ELSE                                     0214
*                           DO;     /* 'S' SYMBOL TO BE RELEASED WAS
*                                      FOUND                         */
         B     @RC00212                                            0214
@RF00212 DS    0H                                                  0215
*                             ACELGID=LGELGID;/* MOVE THE LGID OF THE
*                                      LG TO BE RELEASED TO THE ACE  */
         L     @12,LGELGID(,LGEPTR)                                0215
         ST    @12,ACELGID(,ACEPTR)                                0215
*                             IDEXISTS=ON;/* INDICATE LOOP TO END, LG
*                                      TO BE RELEASED WAS FOUND      */
         OI    IDEXISTS,B'01000000'                                0216
*                           END;    /* END DO FOR 'S' FOUND          */
*                       END;        /* END LOOP THRU LGES            */
@RC00212 DS    0H                                                  0218
@DE00211 LTR   LGEPTR,LGEPTR                                       0218
         BZ    @DC00211                                            0218
         TM    IDEXISTS,B'01000000'                                0218
         BNO   @DL00211                                            0218
@DC00211 DS    0H                                                  0219
*                     END;          /* END DO FOR NON-EMPTY ASMH LGE
*                                      Q                             */
*                 END;              /* END RELEASE 'S' REQUEST       */
*                                                                  0221
*               /*****************************************************/
*               /*                                                   */
*               /* RELEASE LG AND SAVE REQUEST COMMON PROCESSING     */
*               /* CHECKS FOR INVALID LGN AND INVALID IDENTIFIER     */
*               /* TYPE, ACTIVATE AND RELEASE 'S' REQUESTS WILL NOT  */
*               /* COME HERE                                         */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0221
*               ELSE                                               0221
*                 DO;               /* RELEASE LG OR SAVE REQUEST  0221
*                                      PROCESSING                    */
         B     @RC00205                                            0221
@RF00205 DS    0H                                                  0222
*                   RFY                                            0222
*                     LGVTPTR RSTD;                                0222
*                   LGVTPTR=ASMLGVT;/* OBTAIN ADDR OF THE LGVT       */
         L     LGVTPTR,ASMLGVT(,ASMVTPTR)                          0223
*                   IF ACELGID>LGVMAXLG THEN                       0224
         L     @12,ACELGID(,ACEPTR)                                0224
         C     @12,LGVMAXLG(,LGVTPTR)                              0224
         BNH   @RF00224                                            0224
*                     DO;           /* LGN VALUE NOT IN LGVT         */
*                       RTNCODE=CODE04;/* LGN INVALID                */
         MVC   RTNCODE(4),@CF00051                                 0226
*                       CALL FREELOCK;/* FREE THE ASM CLASS LOCK     */
         BAL   @14,FREELOCK                                        0227
*                       GO TO FREEACE;/* GET OUT IMMEDIATELY         */
         B     FREEACE                                             0228
*                     END;                                         0229
*                   RFY                                            0230
*                     LGVTEPTR RSTD;                               0230
@RF00224 DS    0H                                                  0231
*                   LGVTEPTR=ADDR(LGVENTRS(ACELGID+ONE));/* LGID   0231
*                                      GIVES OFFSET INTO LGVT ENTRIES
*                                      FOR PROPER LGVTE              */
         L     @12,ACELGID(,ACEPTR)                                0231
         LR    @15,@12                                             0231
         SLA   @15,3                                               0231
         LA    LGVTEPTR,LGVENTRS(@15,LGVTPTR)                      0231
*                   IF LGVELGID=ACELGID THEN                       0232
         C     @12,LGVELGID(,LGVTEPTR)                             0232
         BNE   @RF00232                                            0232
*                     DO;           /* LGID NOT ASSIGNED             */
*                       RTNCODE=CODE04;/* INVALID LGN                */
         MVC   RTNCODE(4),@CF00051                                 0234
*                       CALL FREELOCK;/* FREE THE ASM CLASS LOCK     */
         BAL   @14,FREELOCK                                        0235
*                       GO TO FREEACE;/* GET OUT IMMEDIATELY         */
         B     FREEACE                                             0236
*                     END;                                         0237
*                   LGEPTR=LGVELGEP;/* OBTAIN LGE ADDR               */
@RF00232 L     LGEPTR,LGVELGEP(,LGVTEPTR)                          0238
*                   RFY                                            0239
*                    (LGVTPTR,                                     0239
*                     LGVTEPTR) UNRSTD;                            0239
*                   IF ACEOP=ACERELLG&LGEASPCT->ASPSSYM^=DOUBLE00 THEN
         CLI   ACEOP(ACEPTR),12                                    0240
         BNE   @RF00240                                            0240
         L     @12,LGEASPCT(,LGEPTR)                               0240
         CLC   ASPSSYM(8,@12),@CB01681                             0240
         BE    @RF00240                                            0240
*                     DO;           /* RELEASE REQUESTED AND 'S'   0241
*                                      SYMBOL NEEDED BUT IT WAS NOT
*                                      SUPPLIED IN THE ACE AS      0241
*                                      INDICATED BY ACEUSYM          */
*                       RTNCODE=CODE40;/* INVALID INDENTIFIER TYPE   */
         MVC   RTNCODE(4),@CF00507                                 0242
*                       CALL FREELOCK;/* FREE THE ASM CLASS LOCK     */
         BAL   @14,FREELOCK                                        0243
*                       GOTO FREEACE;/* GET OUT IMMEDITATELY         */
         B     FREEACE                                             0244
*                     END;                                         0245
*                 END;              /* END RELEASE LG AND SAVE       */
@RF00240 DS    0H                                                  0247
*                                                                  0247
*               /*****************************************************/
*               /*                                                   */
*               /* RELEASE 'S' SYMBOL PROCESSING FOR WHICH THE LGID  */
*               /* HAS BEEN FOUND AND SAVE AND RELEASE LG PROCESSING */
*               /* COMES HERE                                        */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0247
*               IF IDEXISTS=ON THEN                                0247
@RC00205 TM    IDEXISTS,B'01000000'                                0247
         BNO   @RF00247                                            0247
*                 DO;               /* SAVE & RELEASE PROCESSING FOR
*                                      EXISTING LG                   */
*                   IF LGERELLG=ON THEN                            0249
         TM    LGERELLG(LGEPTR),B'00100000'                        0249
         BNO   @RF00249                                            0249
*                     DO;           /* RELEASE HAS ALREADY BEEN    0250
*                                      REQUESTED FOR THE LG          */
*                       RTNCODE=CODE04;/* LGN NOT VALID FOR REQUEST  */
         MVC   RTNCODE(4),@CF00051                                 0251
*                       CALL FREELOCK;/* FREE THE ASM CLASS LOCK     */
         BAL   @14,FREELOCK                                        0252
*                       GOTO FREEACE;/* GET OUT IMMEDIATELY          */
         B     FREEACE                                             0253
*                     END;                                         0254
*                   IF ACEOP=ACERELLG THEN                         0255
@RF00249 CLI   ACEOP(ACEPTR),12                                    0255
         BNE   @RF00255                                            0255
*                     LGERELLG=ON;  /* INIDCATE RELEASE REQUESTED FOR
*                                      LG                            */
         OI    LGERELLG(LGEPTR),B'00100000'                        0256
*                   ELSE                                           0257
*                     DO;           /* SAVE REQUEST                  */
         B     @RC00255                                            0257
@RF00255 DS    0H                                                  0258
*                       RFY                                        0258
*                         ASPCTPTR RSTD;                           0258
*                       ASPCTPTR=LGEASPCT;/* OBTAIN ADDR ASPCT       */
         L     ASPCTPTR,LGEASPCT(,LGEPTR)                          0259
*                       IF ASPSSYM=DOUBLE00 THEN/* ASPCT HAS NOT BEEN
*                                      PREVIOUSLY SAVED              */
         CLC   ASPSSYM(8,ASPCTPTR),@CB01681                        0260
         BNE   @RF00260                                            0260
*                         DO;       /* GENERATE 'S' SYMBOL FOR THE 0261
*                                      ASPCT, USE CS                 */
*                           RFY                                    0262
*                            (R0,                                  0262
*                             R1,                                  0262
*                             R14,                                 0262
*                             R15) RSTD;                           0262
*                           LM(R14,R15,ASMLSAI);/* OBTAIN THE ASM  0263
*                                      LOCATOR SYMBOL                */
         LM    R14,R15,ASMLSAI(ASMVTPTR)                           0263
*TRYAGAIN:                                                         0264
*                           R0=R14+ONE;/* INCR LOW PART OF LOC SYMBOL*/
TRYAGAIN LA    R0,1                                                0264
         ALR   R0,R14                                              0264
*                           IF R0>ASMCINV THEN                     0265
         C     R0,ASMCINV(,ASMVTPTR)                               0265
         BNH   @RF00265                                            0265
*                             DO;   /* IF MAX. NUMBER CONTROL      0266
*                                      INTERVALS REACHED             */
*                               R0=ZERO;/* RESET LOW PART OF LOC   0267
*                                      SYMBOL                        */
         SLR   R0,R0                                               0267
*                               R1=R15-ONE;/* DECR HIGH PART OF LOC
*                                      SYMBOL                        */
         LR    R1,R15                                              0268
         BCTR  R1,0                                                0268
*                             END;                                 0269
*                           ELSE                                   0270
*                             R1=R15;/* OBTAIN THE HIGH PART OF LOC
*                                      SYMBOL                        */
         B     @RC00265                                            0270
@RF00265 LR    R1,R15                                              0270
*                           CDS(R14,R0,ASMLSAI);/* STORE LOC SYMBOL  */
@RC00265 CDS   R14,R0,ASMLSAI(ASMVTPTR)                            0271
*                           BC(NE,TRYAGAIN);/* NOT SUCCESSFUL, TRY 0272
*                                      AGAIN                         */
         BC    7,TRYAGAIN                                          0272
*                           STM(R0,R1,ASPSSYM);/* STORE SYMBOL     0273
*                                      ASSIGNED IN THE ASPCT         */
         STM   R0,R1,ASPSSYM(ASPCTPTR)                             0273
*                           RFY                                    0274
*                            (ASPCTPTR,                            0274
*                             R0,                                  0274
*                             R1,                                  0274
*                             R14,                                 0274
*                             R15) UNRSTD;                         0274
*                         END;      /* END DO FOR ASSIGNING 'S'    0275
*                                      SYMBOL                        */
*                     END;          /* END SAVE REQUEST              */
*                 END;              /* END IDEXISTS DO               */
*               ELSE                                               0278
*                 CALL FREELOCK;    /* RELEASE 'S' SYMBOL AND LGID 0278
*                                      NOT FOUND, RELEASE THE ASM  0278
*                                      CLASS LOCK                    */
         B     @RC00247                                            0278
@RF00247 BAL   @14,FREELOCK                                        0278
*             END;                  /* END DO FOR NOT AN ACTIVATE  0279
*                                      REQUEST                       */
*                                                                  0280
*           /*********************************************************/
*           /*                                                       */
*           /* RELEASE 'S' REQUESTS FOR WHICH THE LGID COULD NOT BE  */
*           /* FOUND AND ACTIVATE REQUESTS ARE PROCESSED BY CALLING  */
*           /* THE ASSIGN SUBROUTINE TO ASSIGN AN LG AND BUILD AN    */
*           /* LGE, THE LGE IS THEN QUEUED TO THE ASM HEADER LGE     */
*           /* QUEUE                                                 */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0280
*           ELSE                                                   0280
*             EPAACASR=ON;          /* RRR-INDICATE ASSIGN OR      0280
*                                      ACTIVATE PROCESSING-RRR       */
         B     @RC00201                                            0280
@RF00201 OI    EPAACASR,B'00001000'                                0280
*           IF ACEOP=ACEACT×IDEXISTS=OFF THEN                      0281
@RC00201 CLI   ACEOP(ACEPTR),20                                    0281
         BE    @RT00281                                            0281
         TM    IDEXISTS,B'01000000'                                0281
         BNZ   @RF00281                                            0281
@RT00281 DS    0H                                                  0282
*             DO;                   /* ACTIVATE REQUEST OR LGID DOES
*                                      NOT EXIST                     */
*               REQASPCT=OFF;       /* NO ASPCT NEEDED, TAKEN CARE OF
*                                      BY GROUP OPERATOR             */
         NI    REQASPCT,B'01111111'                                0283
*               CALL ASSIGNLG;      /* BUILD LGE AND ASSIGN A LGN    */
         BAL   @14,ASSIGNLG                                        0284
*               IF RTNCODE=ZERO THEN                               0285
         L     @12,RTNCODE                                         0285
         LTR   @12,@12                                             0285
         BNZ   @RF00285                                            0285
*                 DO;               /* ASSIGN SUBROUTINE SUCCESSFUL  */
*                   RFY                                            0287
*                     R15 UNRSTD;                                  0287
*                   CALL GETLOCK;   /* OBTAIN THE ASM CLASS LOCK     */
         BAL   @14,GETLOCK                                         0288
*                   ACELGID=LGELGID;/* PLACE THE LGN ASSIGNED IN THE
*                                      ACE                           */
         L     @12,LGELGID(,LGEPTR)                                0289
         ST    @12,ACELGID(,ACEPTR)                                0289
*                   IF ACEOP=ACERELLG THEN                         0290
         CLI   ACEOP(ACEPTR),12                                    0290
         BNE   @RF00290                                            0290
*                     LGERELLG=ON;  /* INDICATE RELEASE REQUEST FOR
*                                      LG                            */
         OI    LGERELLG(LGEPTR),B'00100000'                        0291
*                 END;              /* END SUCCESSFUL ASSIGN       0292
*                                      SUBROUTINE                    */
*               ELSE                                               0293
*                 GOTO FREEACE;     /* ASSIGN UNSUCCESSFUL, RETURN 0293
*                                      ACE AND GET OUT IMMEDIATELY   */
*             END;                  /* END ACTIVATE, LGID DOES NOT 0294
*                                      EXIST                         */
@RC00285 DS    0H                                                  0295
*                                                                  0295
*           /*********************************************************/
*           /*                                                       */
*           /* QUEUE THE ACE TO THE LGE PROCESS Q, ALL VALID REQUESTS*/
*           /* EXCEPT THAT FOR ASSIGN COME HERE                      */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0295
*           ACELGE=LGEPTR;          /* STORE THE LGE ADDR IN THE ACE */
@RF00281 ST    LGEPTR,ACELGE(,ACEPTR)                              0295
*           IF LGEPROCF=ZERO THEN                                  0296
         L     @12,LGEPROCF(,LGEPTR)                               0296
         LTR   @12,@12                                             0296
         BNZ   @RF00296                                            0296
*             DO;                   /* NOTHING ON THE LGE PROCESS  0297
*                                      QUEUE                         */
*               LGEPROCF=ACEPTR;    /* SET FIRST AND LAST QUEUE      */
         ST    ACEPTR,LGEPROCF(,LGEPTR)                            0298
*               LGEPROCL=ACEPTR;    /* POINTERS TO ACE ADDR          */
         ST    ACEPTR,LGEPROCL(,LGEPTR)                            0299
*               LGEGRINP=ON;        /* SET GROUP OP IN PROGRESS FLAG */
         OI    LGEGRINP(LGEPTR),B'01000000'                        0300
*               CALL FREELOCK;      /* FREE THE ASM CLASS LOCK       */
         BAL   @14,FREELOCK                                        0301
*               IF ACEOP=ACERELLG THEN                             0302
         CLI   ACEOP(ACEPTR),12                                    0302
         BNE   @RF00302                                            0302
*                 DO;               /* RELEASE REQUEST, Q EMPTY      */
*                   LGESLTCT=ZERO;  /* CLEAR THE SLOT COUNT FOR    0304
*                                      RETURN BY RELEASE GROUP OP    */
         SLR   @12,@12                                             0304
         STH   @12,LGESLTCT(,LGEPTR)                               0304
*                   RFY                                            0305
*                    (R1,                                          0305
*                     R15,                                         0305
*                     R13) RSTD;                                   0305
*                   R4SAVE=ATAPTR;  /* SAVE R4, GROUP OPERATOR CANNOT
*                                      USE ATA                       */
         ST    ATAPTR,R4SAVE                                       0306
*                   R4=ADDR(EPATH); /* SET EPATH ADDR FOR GROUP    0307
*                                      OPERATOR                      */
         LA    R4,EPATH                                            0307
*                   R13=ADDR(SAVAREA);/* ADDR SAVE AREA FOR RELEASE
*                                      GROUP OP                      */
         LA    R13,SAVAREA                                         0308
*                   R1=ACEPTR;      /* ADDR ACE CONTAINING LGID TO BE
*                                      RELEASED                      */
         LR    R1,ACEPTR                                           0309
*                   CALL ILRRLG;    /* RELEASE GROUP OPERATOR WILL 0310
*                                      RELEASE THE LG                */
         L     @15,ASMPRLG(,ASMVTPTR)                              0310
         BALR  @14,@15                                             0310
*                   ATAPTR=R4SAVE;  /* RESTORE ATA ADDR              */
         L     ATAPTR,R4SAVE                                       0311
*                   RTNCODE=R15;    /* SAVE THE RETURN CODE          */
         ST    R15,RTNCODE                                         0312
*                   RFY                                            0313
*                    (R1,                                          0313
*                     R15,                                         0313
*                     R13) UNRSTD;                                 0313
*                 END;              /* END RELEASE REQUEST, Q EMPTY  */
*             END;                  /* END LGE PROCESS Q EMPTY       */
*           ELSE                                                   0316
*             DO;                   /* LGE PROCESS Q NOT EMPTY       */
         B     @RC00296                                            0316
@RF00296 DS    0H                                                  0317
*               LGEPROCL->ACEFQPA=ACEPTR;/* Q ACE TO LAST ACE ON Q   */
         L     @12,LGEPROCL(,LGEPTR)                               0317
         ST    ACEPTR,ACEFQPA(,@12)                                0317
*               ACEBQPA=LGEPROCL;   /* POINT BACK TO PREVIOUS ACE ON
*                                      Q                             */
         ST    @12,ACEBQPA(,ACEPTR)                                0318
*               LGEPROCL=ACEPTR;    /* MAKE LAST Q ELEMENT THE ACE   */
         ST    ACEPTR,LGEPROCL(,LGEPTR)                            0319
*               LGEWRKPD=ON;        /* WORK PENDING FOR THIS LG      */
         OI    LGEWRKPD(LGEPTR),B'10000000'                        0320
*               CALL FREELOCK;      /* FREE THE ASM CLASS LOCK       */
         BAL   @14,FREELOCK                                        0321
*                                                                  0322
*               /*****************************************************/
*               /*                                                   */
*               /* REQUEST MUST BE FOR SAVE OR RELEASE, SINCE AN LGE */
*               /* HAS JUST BEEN ASSIGNED ON AN ACTIVATE REQUEST,    */
*               /* THUS ITS PROCESS Q IS EMPTY                       */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0322
*               IF ACEOP=ACESVLGN THEN                             0322
         CLI   ACEOP(ACEPTR),16                                    0322
         BNE   @RF00322                                            0322
*                 DO;               /* SAVE REQUEST, Q NOT EMPTY     */
*                   LGESAVRQ=ON;    /* SET SAVE REQUEST FLAG IN LGE  */
         OI    LGESAVRQ(LGEPTR),B'00010000'                        0324
*                   RFY                                            0325
*                     ECBPTR RSTD;                                 0325
*                   ECBPTR=ADDR(ACEECB);/* ADDR ECB TO BE WAITED ON  */
         LA    ECBPTR,ACEECB(,ACEPTR)                              0326
*                   GEN REFS(ECBPTR);                              0327
       WAIT ECB=(ECBPTR)   POSTED BY SRB CONTROLLER
*                   RFY                                            0328
*                     ECBPTR UNRSTD;                               0328
*                   ACEECB=''B;     /* CLEAR THE ACEECB, POSTED BY 0329
*                                      SRBC                          */
         SLR   @12,@12                                             0329
         ST    @12,ACEECB(,ACEPTR)                                 0329
*                 END;              /* END SAVE REQUEST, Q NOT EMPTY */
*             END;                  /* LGE PROCESS Q NOT EMPTY       */
@RF00322 DS    0H                                                  0332
*                                                                  0332
*           /*********************************************************/
*           /*                                                       */
*           /* ALL SAVE OR ACTIVATE REQUESTS COME HERE, THE ASMVT    */
*           /* BUFFER COUNT IS DECREMENTED OR A BUFFER CONTROL BLOCK */
*           /* IS BUILT AND QUEUED TO THE ASMVT VSAM BUFFER WAITING Q*/
*           /*                                                       */
*           /*********************************************************/
*                                                                  0332
*           IF ACAOP^=ACERELLG THEN                                0332
@RC00296 CLI   ACAOP(ACAPTR),12                                    0332
         BE    @RF00332                                            0332
*             DO;                   /* SAVE OR ACTIVATE REQUEST      */
*               RFY                                                0334
*                (R11,                                             0334
*                 R12) RSTD;                                       0334
*               R12=ASMREQCT;       /* OBTAIN VSAM BUFFER REQUEST  0335
*                                      COUNT                         */
         L     R12,ASMREQCT(,ASMVTPTR)                             0335
*REDOIT:                                                           0336
*               IF R12=ZERO THEN                                   0336
REDOIT   LTR   R12,R12                                             0336
         BNZ   @RF00336                                            0336
*                 DO;               /* NO VSAM BUFFERS AVAILABLE     */
*                   BUFPTR=ADDR(WKBUFCON);/* OBTAIN THE ADDR OF THE
*                                      BUFFER CONTROL BLOCK TO BE  0338
*                                      BUILT IN WORK-SAVE AREA       */
         LA    BUFPTR,WKBUFCON                                     0338
*                   BUFASCB=PSAAOLD;/* PUT ADDR THIS ASCB IN CONTROL
*                                      BLOCK                         */
         L     @10,PSAAOLD                                         0339
         ST    @10,BUFASCB(,BUFPTR)                                0339
*                   BUFACE=ACEPTR;  /* PUT ADDR THIS ACE IN CONTROL
*                                      BLOCK                         */
         ST    ACEPTR,BUFACE(,BUFPTR)                              0340
*                   RFY                                            0341
*                     R0 RSTD;                                     0341
*                   R0=ASMGOSWT;    /* ADDR OF THE VSAM BUFFER     0342
*                                      WAITING Q                     */
         L     R0,ASMGOSWT(,ASMVTPTR)                              0342
*AGAIN:                                                            0343
*                   BUFCHAIN=R0;    /* CHAIN WAITING Q TO THE CONTROL
*                                      BLOCK                         */
AGAIN    ST    R0,BUFCHAIN(,BUFPTR)                                0343
*                   CS(R0,BUFPTR,ASMGOSWT);/* MAKE CONTROL BLOCK   0344
*                                      FIRST ELEMENT ON WAITING Q    */
         CS    R0,@12,ASMGOSWT(ASMVTPTR)                           0344
*                   BC(NE,AGAIN);   /* NOT SUCCESSFUL, TRY AGAIN     */
         BC    7,AGAIN                                             0345
*                   RFY                                            0346
*                     R0 UNRSTD;                                   0346
*                   RFY                                            0347
*                     ECBPTR RSTD;                                 0347
*                   ECBPTR=ADDR(ACEECB);/* ADDRESS ECB TO BE WAITED
*                                      ON                            */
         LA    ECBPTR,ACEECB(,ACEPTR)                              0348
*                   GEN REFS(ECBPTR);                              0349
        WAIT ECB=(ECBPTR)   XMPOSTED BY GOS
*                   ACEECB=''B;     /* CLEAR ACEECB POSTED BY GOS    */
         SLR   @10,@10                                             0350
         ST    @10,ACEECB(,ACEPTR)                                 0350
*                 END;              /* NO VSAM BUFFER                */
*               ELSE                                               0352
*                 DO;               /* VSAM BUFFERS AVAILABLE        */
         B     @RC00336                                            0352
@RF00336 DS    0H                                                  0353
*                   R11=R12-ONE;    /* DECR VSAM BUFFER COUNT        */
         LR    R11,R12                                             0353
         BCTR  R11,0                                               0353
*                   CS(R12,R11,ASMREQCT);/* STORE DECREMENTED COUNT,
*                                      IF POSSIBLE                   */
         CS    R12,@11,ASMREQCT(ASMVTPTR)                          0354
*                   BC(NE,REDOIT);  /* NOT SUCCESSFUL, TRY AGAIN     */
         BC    7,REDOIT                                            0355
*                   RFY                                            0356
*                    (R11,                                         0356
*                     R12) UNRSTD;                                 0356
*                 END;              /* VSAM BUFFERS AVAILABLE        */
*                                                                  0358
*               /*****************************************************/
*               /*                                                   */
*               /* THE SLOT COUNT IS CLEARED, THE PROPER OPERATOR IS */
*               /* CALLED, AND THE PROPER BUFFER CONTROL FUNCTIONS   */
*               /* PERFORMED                                         */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0358
*               LGESLTCT=ZERO;      /* CLEAR THE SLOT COUNT FOR THE
*                                      GROUP OPERATOR                */
@RC00336 SLR   @12,@12                                             0358
         STH   @12,LGESLTCT(,LGEPTR)                               0358
*               RFY                                                0359
*                (R1,                                              0359
*                 R13,                                             0359
*                 R15) RSTD;                                       0359
*               R4SAVE=ATAPTR;      /* SAVE R4, GROUP OPERATOR CANNOT
*                                      USE ATA                       */
         ST    ATAPTR,R4SAVE                                       0360
*               R4=ADDR(EPATH);     /* SET EPATH ADDR FOR GROUP    0361
*                                      OPERATOR                      */
         LA    R4,EPATH                                            0361
*               R13=ADDR(SAVAREA);  /* ADDR SAVE AREA FOR GROUP    0362
*                                      OPERATOR                      */
         LA    R13,SAVAREA                                         0362
*               R1=ACEPTR;          /* ADDR ACE CONTAINING SAVE,   0363
*                                      ACTIVATE REQUEST              */
         LR    R1,ACEPTR                                           0363
*               IF ACEOP=ACEACT THEN                               0364
         CLI   ACEOP(ACEPTR),20                                    0364
         BNE   @RF00364                                            0364
*                 CALL ILRACT;      /* ACTIVATE GROUP OPERATOR NEEDED*/
         L     @15,ASMPACT(,ASMVTPTR)                              0365
         BALR  @14,@15                                             0365
*               ELSE                                               0366
*                 CALL ILRSAV;      /* SAVE GROUP OPERATOR NEEDED    */
         B     @RC00364                                            0366
@RF00364 L     @15,ASMPSAV(,ASMVTPTR)                              0366
         BALR  @14,@15                                             0366
*               ATAPTR=R4SAVE;      /* RESTORE ATA ADDR              */
@RC00364 L     ATAPTR,R4SAVE                                       0367
*               RTNCODE=R15;        /* SAVE GROUP OPERATOR           */
         ST    R15,RTNCODE                                         0368
*               RFY                                                0369
*                 R13 UNRSTD;                                      0369
*               RFY                                                0370
*                (R0,                                              0370
*                 R11,                                             0370
*                 R12,                                             0370
*                 R14) RSTD;                                       0370
*LOOP:                                                             0371
*               LM(R14,R15,ASMGOSQS);/* OBTAIN THE WAITING AND WORK
*                                      QUEUES RESPECTIVELY           */
LOOP     LM    R14,R15,ASMGOSQS(ASMVTPTR)                          0371
*REPEAT:                                                           0372
*               IF R15=ZERO&R14=ZERO THEN                          0372
REPEAT   SLR   @10,@10                                             0372
         CR    R15,@10                                             0372
         BNE   @RF00372                                            0372
         CR    R14,@10                                             0372
         BNE   @RF00372                                            0372
*                 DO;               /* VSAM BUFFER QUES EMPTY        */
*                   RFY                                            0374
*                    (R11,                                         0374
*                     R12) RSTD;                                   0374
*                   R12=ASMREQCT;   /* VSAM BUFFER REQUEST COUNT     */
         L     R12,ASMREQCT(,ASMVTPTR)                             0375
*                   R11=R12+ONE;    /* INCR REQUEST COUNT            */
         LA    R11,1                                               0376
         ALR   R11,R12                                             0376
*                   CS(R12,R11,ASMREQCT);/* STORE INCREMENTED COUNT,
*                                      IF POSSIBLE                   */
         CS    R12,@11,ASMREQCT(ASMVTPTR)                          0377
*                   BC(NE,LOOP);    /* NOT SUCCESSFUL, TRY AGAIN     */
         BC    7,LOOP                                              0378
*                 END;              /* VSAM BUFFER Q'S EMPTY         */
*               ELSE                                               0380
*                 DO;               /* BUFFER QUEUES NOT EMPTY       */
         B     @RC00372                                            0380
@RF00372 DS    0H                                                  0381
*                   IF R15=ZERO THEN                               0381
         LTR   R15,R15                                             0381
         BNZ   @RF00381                                            0381
*                     DO;           /* WORK Q EMPTY, WAITING Q NOT 0382
*                                      EMPTY                         */
*                                                                  0382
*                       /*********************************************/
*                       /*                                           */
*                       /* COMPARE AND SWAP THE BUFFER WAITING Q TO  */
*                       /* THE BUFFER WORK Q                         */
*                       /*                                           */
*                       /*********************************************/
*                                                                  0383
*                       RFY                                        0383
*                        (R0,                                      0383
*                         R14) RSTD;                               0383
*                       R1=R14;     /* TO MOVE WAITING Q TO WORK Q   */
         LR    R1,R14                                              0384
*                       R0=ZERO;    /* TO ZERO THE WAITING Q         */
         SLR   R0,R0                                               0385
*                       CDS(R14,R0,ASMGOSQS);/* MOVE WAITING Q TO  0386
*                                      WORK Q                        */
         CDS   R14,R0,ASMGOSQS(ASMVTPTR)                           0386
*                       BC(NE,REPEAT);/* NOT SUCCESSFUL, TRY AGAIN   */
         BC    7,REPEAT                                            0387
*                       R15=R1;     /* OBTAIN NEW WORK QUEUE ADDR    */
         LR    R15,R1                                              0388
*                     END;          /* END WAITING Q TO WORK Q       */
*                                                                  0389
*                   /*************************************************/
*                   /*                                               */
*                   /* COMPARE AND SWAP THE FIRST ELEMENT OFF THE    */
*                   /* BUFFER WORK Q                                 */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0390
*                   BUFPTR=R15;     /* ADDR OF THE FIRST ELEMENT ON
*                                      THE VSAM BUFFER WORK Q        */
@RF00381 LR    BUFPTR,R15                                          0390
*                   R0=BUFCHAIN;    /* OBTAIN NEXT BUFFER WORK Q   0391
*                                      ELEMENT                       */
         L     R0,BUFCHAIN(,BUFPTR)                                0391
*                   CS(BUFPTR,R0,ASMGOSWK);/* UPDATE WORK Q TO NEXT
*                                      ELEMENT ON Q                  */
         CS    BUFPTR,@00,ASMGOSWK(ASMVTPTR)                       0392
*                   BC(NE,LOOP);    /* NOT SUCCESSFUL, TRY AGAIN     */
         BC    7,LOOP                                              0393
*                   RFY                                            0394
*                    (R0,                                          0394
*                     R1,                                          0394
*                     R14,                                         0394
*                     R15) UNRSTD;                                 0394
*                   RFY                                            0395
*                     ASCBPTR RSTD;                                0395
*                   ECBPTR=ADDR(BUFACE->ACEECB);/* OBTAIN ECB TO BE
*                                      POSTED                        */
         L     ECBPTR,BUFACE(,BUFPTR)                              0396
         LA    ECBPTR,ACEECB(,ECBPTR)                              0396
*                   ASCBPTR=BUFASCB;/* OBTAIN ASCB OF WAITING ADDRESS
*                                      SPACE                         */
         L     ASCBPTR,BUFASCB(,BUFPTR)                            0397
*                   R12=ADDR(CVTBRET);/* ADDR ROUTINE GIVEN CONTROL
*                                      ON POST ERROR                 */
         L     R12,CVTPTR                                          0398
         LA    R12,CVTBRET(,R12)                                   0398
*                   GEN REFS(ASCBPTR,ECBPTR);                      0399
*                         /* POST ECB WAITED ON IN ANOTHER
*    ADDRESS SPACE, XMPOST THE ACEECB */
         POST (ECBPTR),ASCB=(ASCBPTR),ERRET=(R12),MF=(E,POSTLIST)
*                   RFY                                            0400
*                    (R11,                                         0400
*                     ASCBPTR,                                     0400
*                     R12) UNRSTD;                                 0400
*                 END;              /* BUFFER QUEUES NOT EMPTY       */
*             END;                  /* SAVE OR ACTIVATE REQUEST      */
@RC00372 DS    0H                                                  0403
*                                                                  0403
*           /*********************************************************/
*           /*                                                       */
*           /* COMMON BACKEND PROCESSING FOR SAVE OR ACTIVATE        */
*           /* REQUESTS, OR A RELEASE REQUEST WITH RETURN CODE OF 28 */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0403
*           IF ACAOP^=ACERELLG×RTNCODE=CODE28 THEN                 0403
@RF00332 CLI   ACAOP(ACAPTR),12                                    0403
         BNE   @RT00403                                            0403
         CLC   RTNCODE(4),@CF00438                                 0403
         BNE   @RF00403                                            0403
@RT00403 DS    0H                                                  0404
*             DO;                   /* SAVE OR ACTIVATE, OR RELEASE
*                                      CODE28 REQUESTS               */
*               CALL GETLOCK;       /* OBTAIN THE ASM CLASS LOCK     */
*                                                                  0405
         BAL   @14,GETLOCK                                         0405
*               /*****************************************************/
*               /*                                                   */
*               /* DEQUEUE THE ACE FROM THE LGE PROCESS QUEUE        */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0406
*               IF ACEPTR=LGEPROCF&ACEPTR=LGEPROCL THEN            0406
         C     ACEPTR,LGEPROCF(,LGEPTR)                            0406
         BNE   @RF00406                                            0406
         C     ACEPTR,LGEPROCL(,LGEPTR)                            0406
         BNE   @RF00406                                            0406
*                 DO;               /* ACE IS BOTH FIRST AND LAST ON
*                                      THE QUEUE                     */
*                   LGEPROCF=ZERO;  /* ZERO FIRST ACE ADDR           */
         SLR   @12,@12                                             0408
         ST    @12,LGEPROCF(,LGEPTR)                               0408
*                   LGEPROCL=ZERO;  /* ZERO LAST ACE ADDR            */
         ST    @12,LGEPROCL(,LGEPTR)                               0409
*                 END;                                             0410
*               ELSE                                               0411
*                 IF ACEPTR=LGEPROCF THEN                          0411
         B     @RC00406                                            0411
@RF00406 C     ACEPTR,LGEPROCF(,LGEPTR)                            0411
         BNE   @RF00411                                            0411
*                   DO;             /* ACE IS FIRST ON Q BUT NOT THE
*                                      ONLY QUEUE ELEMENT            */
*                     LGEPROCF=ACEFQPA;/* SET FIRST ACE ADDR TO NEXT
*                                      ACE ON QUEUE                  */
         L     @12,ACEFQPA(,ACEPTR)                                0413
         ST    @12,LGEPROCF(,LGEPTR)                               0413
*                     ACEFQPA->ACEBQPA=ZERO;/* CLEAR BACK POINTER OF
*                                      NEXT ACE                      */
         SLR   @10,@10                                             0414
         ST    @10,ACEBQPA(,@12)                                   0414
*                   END;                                           0415
*                 ELSE                                             0416
*                   DO;             /* ACE WAS NOT FIRST             */
*                                                                  0416
         B     @RC00411                                            0416
@RF00411 DS    0H                                                  0417
*                     /***********************************************/
*                     /*                                             */
*                     /* AN IMPOSSIBLE SITUATION EXISTS, ERROR MUST  */
*                     /* BE RECORDED, ACE POINTER CLEARED, AND RETURN*/
*                     /* CODE SET                                    */
*                     /*                                             */
*                     /***********************************************/
*                                                                  0417
*                     CALL FREELOCK;/* FREE THE ASM CLASS LOCK       */
         BAL   @14,FREELOCK                                        0417
*                     ATARCODE=REACOD12;/* REASON CODE FOR C0D ABEND */
         MVI   ATARCODE(ATAPTR),X'0C'                              0418
*                     EPARTYRG=ADDR(RTRYRGSV);/* ADDR RETRY REGISTERS*/
         LA    @12,RTRYRGSV                                        0419
         ST    @12,EPARTYRG                                        0419
*                     STM(R0,R14,RTRYRGSV);/* SAVE RETRY REGS        */
         STM   R0,R14,RTRYRGSV                                     0420
*                     GEN(ABEND    X'C0D',,,SYSTEM);/* ISSUE C0D   0421
*                                      RECORD ONLY ABEND             */
         ABEND    X'C0D',,,SYSTEM
*                     ACEPTR=ZERO;  /* CLEAR THE ACE POINTER         */
         SLR   ACEPTR,ACEPTR                                       0422
*                     RTNCODE=CODE44;/* INDETERMINENT ERROR, ACE NOT
*                                      FIRST ON Q                    */
         MVC   RTNCODE(4),@CF01405                                 0423
*                     GO TO FREEWK; /* FREE THE WORK-SAVE AREA AND 0424
*                                      GET OUT IMMEDIATELY           */
         B     FREEWK                                              0424
*                   END;            /* ACE WAS NOT FIRST             */
*                                                                  0426
*               /*****************************************************/
*               /*                                                   */
*               /* PROCESSING FOR A RELEASE REQUEST FOR WHICH ILRRLG */
*               /* HAS RETURNED WITH A CODE28, NO STORAGE AVAILABLE. */
*               /* THE LGE IS FREED IF THERE IS NO ASPCT, ELSE PROPER*/
*               /* LGE FLAGS ARE RESET.                              */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0426
*               IF ACEOP=ACERELLG THEN                             0426
@RC00411 DS    0H                                                  0426
@RC00406 CLI   ACEOP(ACEPTR),12                                    0426
         BNE   @RF00426                                            0426
*                 DO;               /* RELEASE, CODE28               */
*                   IF LGEASPCT=ZERO THEN/* AN ASPCT DOES NOT EXIST
*                                      FOR THIS LG                   */
*                                                                  0428
         L     @12,LGEASPCT(,LGEPTR)                               0428
         LTR   @12,@12                                             0428
         BNZ   @RF00428                                            0428
*                     /***********************************************/
*                     /*                                             */
*                     /* THE ADDR OF THE LGE TO BE FREED IS IN       */
*                     /* LGEPTR. FRELG WILL RELEASE THE ASM CLASS    */
*                     /* LOCK.                                       */
*                     /*                                             */
*                     /***********************************************/
*                                                                  0429
*                     CALL FRELG;   /* DEQUEUES AND FREES THE LGE, 0429
*                                      AND PUTS THE LGVTE BACK ON THE
*                                      AVAILABLE QUEUE               */
         BAL   @14,FRELG                                           0429
*                   ELSE                                           0430
*                     DO;           /* ASPCT DOES EXIST              */
         B     @RC00428                                            0430
@RF00428 DS    0H                                                  0431
*                       LGERELLG=OFF;/* RESET RELEASE LG REQUEST FLAG*/
*                       LGEGRINP=OFF;/* RESET GROUP OP IN PROGRESS 0432
*                                      FLAG                          */
         NI    LGERELLG(LGEPTR),B'10011111'                        0432
*                       CALL FREELOCK;/* FREE THE ASM CLASS LOCK     */
         BAL   @14,FREELOCK                                        0433
*                     END;          /* ASPCT DOES EXIST              */
*                 END;              /* RELEASE, CODE28               */
*                                                                  0436
*               /*****************************************************/
*               /*                                                   */
*               /* PROCESSING FOR SAVES AND ACTIVATES, THE VIO SLOT  */
*               /* COUNT IS UPDATED, GROUP OP IN PROGRESS FLAG RESET,*/
*               /* AND THE SRB CONTROLLER SCHEDULED IF WORK IS       */
*               /* PENDING. ALSO, FOR SAVES, THE SAVE REQUEST FLAG IS*/
*               /* RESET IF NO OTHER SAVE REQUESTS ARE ON THE QUEUE. */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0436
*               ELSE                                               0436
*                 DO;               /* SAVE OR ACTIVATE BACKEND      */
         B     @RC00426                                            0436
@RF00426 DS    0H                                                  0437
*                   IF ACEOP=ACESVLGN THEN                         0437
         CLI   ACEOP(ACEPTR),16                                    0437
         BNE   @RF00437                                            0437
*                     DO;           /* SAVE LGN REQUEST              */
*                       LGESAVRQ=OFF;/* RESET SAVE REQUEST FLAG      */
         NI    LGESAVRQ(LGEPTR),B'11101111'                        0439
*                       RFY                                        0440
*                         FOUNDACE RSTD;                           0440
*                       FOUNDACE=LGEPROCF;/* OBTAIN ADDR FIRST ACE ON
*                                      PROCESS Q                     */
         L     FOUNDACE,LGEPROCF(,LGEPTR)                          0441
*                       DO WHILE FOUNDACE^=ZERO&FOUNDACE->ACEOP^=  0442
*                             ACESVLGN;/* SEARCH FOR A SAVE REQUEST
*                                      ACE                           */
         B     @DE00442                                            0442
@DL00442 DS    0H                                                  0443
*                         FOUNDACE=FOUNDACE->ACEFQPA;/* OBTAIN ADDR
*                                      NEXT ACE ON PROCESS QUEUE     */
         L     FOUNDACE,ACEFQPA(,FOUNDACE)                         0443
*                       END;                                       0444
@DE00442 LTR   FOUNDACE,FOUNDACE                                   0444
         BZ    @DC00442                                            0444
         CLI   ACEOP(FOUNDACE),16                                  0444
         BNE   @DL00442                                            0444
@DC00442 DS    0H                                                  0445
*                       IF FOUNDACE^=ZERO THEN                     0445
         LTR   FOUNDACE,FOUNDACE                                   0445
         BZ    @RF00445                                            0445
*                         LGESAVRQ=ON;/* IF A SAVE REQUEST ACE IS  0446
*                                      FOUND TURN THE FLAG BACK ON   */
         OI    LGESAVRQ(LGEPTR),B'00010000'                        0446
*                       RFY                                        0447
*                         FOUNDACE UNRSTD;                         0447
@RF00445 DS    0H                                                  0448
*                     END;          /* SAVE LGN REQUEST              */
*                   LGEGRINP=OFF;   /* RESET GROUP-OP IN PROGRESS  0449
*                                      FLAG                          */
@RF00437 NI    LGEGRINP(LGEPTR),B'10111111'                        0449
*                   IF LGEWRKPD=ON THEN                            0450
         TM    LGEWRKPD(LGEPTR),B'10000000'                        0450
         BNO   @RF00450                                            0450
*                     IF ASHSCHED=OFF THEN                         0451
         TM    ASHSCHED(RSMHDPTR),B'10000000'                      0451
         BNZ   @RF00451                                            0451
*                       DO;         /* SCHEDULE THE SRB CONTROLLER 0452
*                                      SINCE WORK IS PENDING AND SRBC
*                                      HAS NOT BEEN SCHEDULED        */
*                         RFY                                      0453
*                           R10 RSTD;                              0453
*                         R10=ASHVSRBP;/* ADDR SRB TO BE SCHEDULED   */
         L     R10,ASHVSRBP(,RSMHDPTR)                             0454
*                         GEN REFS(R10);                           0455
      SCHEDULE SRB=(10),SCOPE=GLOBAL    SCHEDULES SRB CONTROLLER
*                         ASHSCHED=ON;/* SET SRB SCHEDULED FLAG      */
         OI    ASHSCHED(RSMHDPTR),B'10000000'                      0456
*                       END;        /* END SCHEDULE SRBC             */
*                   ASCBPTR=PSAAOLD;/* OBTAIN ADDR ASCB              */
@RF00451 DS    0H                                                  0458
@RF00450 L     ASCBPTR,PSAAOLD                                     0458
*                   ASCBVSC=ASCBVSC+LGESLTCT;/* UPDATE THE VIO SLOT
*                                      COUNT BY THE SLOT COUNT     0459
*                                      RETURNED BY THE GROUP OPERATOR*/
         LH    @12,ASCBVSC(,ASCBPTR)                               0459
         AH    @12,LGESLTCT(,LGEPTR)                               0459
         STH   @12,ASCBVSC(,ASCBPTR)                               0459
*                   RFY                                            0460
*                     R10 UNRSTD;                                  0460
*                   IF RTNCODE=CODE00 THEN                         0461
         L     @12,RTNCODE                                         0461
         LTR   @12,@12                                             0461
         BNZ   @RF00461                                            0461
*                     CALL FREELOCK;/* GOOD RETURN FROM SAVE OR    0462
*                                      ACTIVATE, FREE THE ASM CLASS
*                                      LOCK                          */
         BAL   @14,FREELOCK                                        0462
*                   ELSE                                           0463
*                     DO;           /* ERROR RETURN FROM SAVE OR   0463
*                                      ACTIVATE                      */
         B     @RC00461                                            0463
@RF00461 DS    0H                                                  0464
*                       IF ACEOP=ACEACT THEN                       0464
         CLI   ACEOP(ACEPTR),20                                    0464
         BNE   @RF00464                                            0464
*                         DO;       /* ACTIVATE ERROR                */
*                           ACELGID=FOXES;/* INVALIDATE THE LGID FOR
*                                      VBP                           */
         MVC   ACELGID(4,ACEPTR),@CF01677                          0466
*                           EPALGEP=ZERO;/* RRR-STOP TRACKING LGE TO
*                                      BE FREED-RRR                  */
*                                                                  0467
         SLR   @12,@12                                             0467
         ST    @12,EPALGEP                                         0467
*                           /*****************************************/
*                           /*                                       */
*                           /* THE ADDR OF THE LGE TO BE FREED IS IN */
*                           /* LGEPTR. FRELG WILL RELEASE THE ASM    */
*                           /* CLASS LOCK.                           */
*                           /*                                       */
*                           /*****************************************/
*                                                                  0468
*                           CALL FRELG;/* DEQUEUE AND FREE THE LGE,
*                                      MAKE LGVTE AVAILIABLE         */
         BAL   @14,FRELG                                           0468
*                         END;      /* ACTIVATE ERROR                */
*                       ELSE                                       0470
*                         DO;       /* SAVE ERROR                    */
         B     @RC00464                                            0470
@RF00464 DS    0H                                                  0471
*                           LGEASPCT->ASPSSYM=''B;/* CLEAR 'S' SYMBOL
*                                      IN ASPCT                      */
         L     @12,LGEASPCT(,LGEPTR)                               0471
         XC    ASPSSYM(8,@12),ASPSSYM(@12)                         0471
*                           ACESYM=''B;/* CLEAR 'S' SYMBOL IN ACE    */
         XC    ACESYM(8,ACEPTR),ACESYM(ACEPTR)                     0472
*                           CALL FREELOCK;/* FREE THE ASM CLASS LOCK */
         BAL   @14,FREELOCK                                        0473
*                         END;      /* END SAVE ERROR                */
*                     END;          /* END ERROR RETURN FROM SAVE OR
*                                      ACTIVATE                      */
*                                                                  0475
@RC00464 DS    0H                                                  0476
*                   /*************************************************/
*                   /*                                               */
*                   /* THE ACA IS IN USER'S STORAGE AND THUS MAY BE  */
*                   /* PAGEABLE SO THE ACA CANNOT BE REFERENCED WHILE*/
*                   /* HOLDING THE ASM CLASS LOCK                    */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0476
*                   IF ACEOP=ACEACT THEN                           0476
@RC00461 CLI   ACEOP(ACEPTR),20                                    0476
         BNE   @RF00476                                            0476
*                     ACALGN=ACELGN;/* ACTIVATE, MOVE THE LGN TO THE
*                                      ACA                           */
         MVC   ACALGN(8,ACAPTR),ACELGN(ACEPTR)                     0477
*                   ELSE                                           0478
*                     ACASYM=ACESYM;/* SAVE, MOVE THE 'S' SYMBOL TO
*                                      THE ACA                       */
         B     @RC00476                                            0478
@RF00476 MVC   ACASYM(8,ACAPTR),ACESYM(ACEPTR)                     0478
*                 END;              /* SAVE OR ACTIVATE BACKEND      */
@RC00476 DS    0H                                                  0480
*                                                                  0480
*               /*****************************************************/
*               /*                                                   */
*               /* AT THIS POINT THE ACE IS FREED VIA THE ILRGMA     */
*               /* MACRO. ALL REQUESTS FOR WHICH AN ACE WAS OBTAINED */
*               /* COME HERE, EXCEPT A VALID RELEASE REQUEST FOR     */
*               /* WHICH THE RELEASE GROUP OPERATOR WAS NOT CALLED OR*/
*               /* FOR WHICH THE RELEASE GROUP OPERATOR WAS CALLED   */
*               /* AND A RETURN CODE OF 28 WAS NOT RECEIVED.         */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0480
*               RFY                                                0480
*                 R1AREA RSTD;                                     0480
@RC00426 DS    0H                                                  0481
*FREEACE:                                                          0481
*               R1AREA=ACEPTR;      /* OBTAIN ADDR ACE TO BE FREED   */
FREEACE  LR    R1AREA,ACEPTR                                       0481
*               EPAACE=ZERO;        /* RRR-CLEAR THE ACE ADDR TRACKED
*                                      IN EPATH-RRR                  */
*                                                                  0482
         SLR   @12,@12                                             0482
         ST    @12,EPAACE                                          0482
*               /*****************************************************/
*               /*                                                   */
*               /* BEGIN ILRGMA MACRO EXPANSION                      */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0483
*               DO;                 /* ILRGMA FREE                 0483
*                                      CELL(ACE)WORKREGS(R11,R12)    */
*                 RESPECIFY                                        0484
*                  (R0,                                            0484
*                   R1,                                            0484
*                   R11,                                           0484
*                   R12,                                           0484
*                   R14,                                           0484
*                   R15) RESTRICTED;                               0484
*                 RESPECIFY                                        0485
*                   ASMPOOLS BASED(R11);                           0485
*                 RESPECIFY                                        0486
*                   GMACELL BASED(R1);                             0486
*                 R11=ADDR(ASMACEPC);                              0487
         LA    R11,ASMACEPC(,ASMVTPTR)                             0487
*                 LM(R14,R15,ASMCPRSQ);/* GET CONTENTS OF Q          */
         LM    R14,R15,ASMCPRSQ(R11)                               0488
*GMA00031:                                                         0489
*                 IF R14^=0 THEN    /* TEST RESERVE Q                */
GMA00031 LTR   R14,R14                                             0489
         BZ    @RF00489                                            0489
*                   DO;             /* REPLENISH ACE RESERVE Q       */
*                     R0=R14-1;     /* SET UP FOR COMPARE AND SWAP   */
         LR    R0,R14                                              0491
         BCTR  R0,0                                                0491
*                     GMANEXT=R15;  /* CELL TO FREE IN R1            */
         ST    R15,GMANEXT(,R1)                                    0492
*                     CDS(R14,R0,ASMCPRSQ);/* ADD CELL TO RESERVE Q  */
         CDS   R14,R0,ASMCPRSQ(R11)                                0493
*                     BC(7,GMA00031);                              0494
         BC    7,GMA00031                                          0494
*                   END;                                           0495
*                 ELSE                                             0496
*                   DO;             /* RETURN ACE TO NORMAL Q        */
         B     @RC00489                                            0496
@RF00489 DS    0H                                                  0497
*                     R14=ASMCPAVL;                                0497
         L     R14,ASMCPAVL(,R11)                                  0497
*GMA00032:                                                         0498
*                     GMANEXT=R14;  /* PUT ADDR CURRENT FIRST IN   0498
*                                      INPUT CELL                    */
GMA00032 ST    R14,GMANEXT(,R1)                                    0498
*                     CS(R14,R1,ASMCPAVL);/* ADD INPUT CELL TO POOL  */
         CS    R14,@01,ASMCPAVL(R11)                               0499
*                     BC(7,GMA00032);                              0500
         BC    7,GMA00032                                          0500
*                   END;            /* ACE RETURNED TO NORMAL Q      */
*                 RESPECIFY                                        0502
*                  (R0,                                            0502
*                   R1,                                            0502
*                   R11,                                           0502
*                   R12,                                           0502
*                   R14,                                           0502
*                   R15) UNRESTRICTED;                             0502
@RC00489 DS    0H                                                  0503
*               END;                /* ILRGMA FREE                 0503
*                                      CELL(ACE)WORKREGS(R11,R12)    */
*                                                                  0503
*               /*****************************************************/
*               /*                                                   */
*               /* END ILRGMA MACRO EXPANSION                        */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0504
*             END;                  /* SAVE OR ACTIVATE, OR RELEASE
*                                      CODE 28 REQUESTS              */
*         END;                      /* ILRGMA GET SUCCESSFUL         */
@RF00403 DS    0H                                                  0506
*     END;                          /* RELEASE, ACTIVATE, SAVE     0506
*                                      PROCESSING                    */
@RC00189 DS    0H                                                  0507
*                                                                  0507
*   /*****************************************************************/
*   /*                                                               */
*   /* ALL PROCESSING FOR WHICH A WORK-SAVE AREA WAS OBTAINED COMES  */
*   /* HERE, EXCEPT FOR AN ESTAE ERROR IN WHICH CASE THE WORK-SAVE   */
*   /* AREA HAS ALREADY BEEN DELETED.                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0507
*   RFY                                                            0507
*     R13 RSTD;                                                    0507
@RC00124 DS    0H                                                  0508
*FREEWK:                                                           0508
*   GEN SETS(R11,R13);                                             0508
FREEWK   DS    0H                                                  0508
*                          /* RESTORE THE CALLERS SAVE AREA ADDR */
       LA    R11,SAVAREA        ADDR SAVE AREA
       L     R13,4(R11)         RESTORE ADDR CALLERS SAVE AREA
       MVC   16(4,R13),RTNCODE  SET RETURN CODE IN CALLERS SAVE AREA
*   IF ACAOP=ASSIGN×ACAOP=ACERELLG THEN                            0509
         CLI   ACAOP(ACAPTR),8                                     0509
         BE    @RT00509                                            0509
         CLI   ACAOP(ACAPTR),12                                    0509
         BNE   @RF00509                                            0509
@RT00509 DS    0H                                                  0510
*     DO;                           /* DELETE RECOVERY AND FREE    0510
*                                      WORK-SAVE AREA FOR LOCKED   0510
*                                      PATHS                         */
*       GEN REFS(R11,R12);                                         0511
     SETFRR D,WRKREGS=(R11,R12),RELATED=(SETFRR,ILRGOS)
*       R1AREA=WKSAV@;              /* OBTAIN ADDR WORK AREA TO BE 0512
*                                      FREED                         */
*                                                                  0512
         LR    R1AREA,WKSAV@                                       0512
*       /*************************************************************/
*       /*                                                           */
*       /* BEGIN ILRGMA MACRO EXPANSION                              */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0513
*       DO;                         /* ILRGMA FREE                 0513
*                                      CELL(BWK)WORKREGS(R11,R12)    */
*         RESPECIFY                                                0514
*          (R0,                                                    0514
*           R1,                                                    0514
*           R11,                                                   0514
*           R12,                                                   0514
*           R14,                                                   0514
*           R15) RESTRICTED;                                       0514
*         RESPECIFY                                                0515
*           ASMPOOLS BASED(R11);                                   0515
*         RESPECIFY                                                0516
*           GMACELL BASED(R1);                                     0516
*         R11=ADDR(ASMBWKPC);                                      0517
         LA    R11,ASMBWKPC(,ASMVTPTR)                             0517
*         R14=ASMCPAVL;                                            0518
         L     R14,ASMCPAVL(,R11)                                  0518
*GMA00042:                                                         0519
*         GMANEXT=R14;              /* PUT ADDR CURRENT FIRST IN   0519
*                                      INPUT CELL                    */
GMA00042 ST    R14,GMANEXT(,R1)                                    0519
*         CS(R14,R1,ASMCPAVL);      /* ADD INPUT CELL TO POOL        */
         CS    R14,@01,ASMCPAVL(R11)                               0520
*         BC(7,GMA00042);                                          0521
         BC    7,GMA00042                                          0521
*         RESPECIFY                                                0522
*          (R0,                                                    0522
*           R1,                                                    0522
*           R11,                                                   0522
*           R12,                                                   0522
*           R14,                                                   0522
*           R15) UNRESTRICTED;                                     0522
*       END;                        /* ILRGMA FREE                 0523
*                                      CELL(BWK)WORKREGS(R11,R12)    */
*                                                                  0523
*       /*************************************************************/
*       /*                                                           */
*       /* END ILRGMA MACRO EXPANSION                                */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0524
*     END;                          /* END LOCKED PATHS EXITING      */
*   ELSE                                                           0525
*     DO;                           /* DELETE REOCVERY AND FREE    0525
*                                      WORK-SAVE AREA FOR UNLOCKED 0525
*                                      PATHS                         */
         B     @RC00509                                            0525
@RF00509 DS    0H                                                  0526
*       RFY                                                        0526
*         R11 RSTD;                                                0526
*       R11=LENGTH(WKAREA);         /* OBTAIN LENGTH AREA TO BE FREED*/
         LA    R11,256                                             0527
*       GEN REFS(R11,WKSAV@) SETS(R1);                             0528
*                              /* CANCEL ESTAE AND FREE WORK AREA */
         ESTAE 0        CANCEL ESTAE
         FREEMAIN  RC,LV=(R11),A=(WKSAV@),SP=245
*     END;                          /* END UNLOCKED PATHS EXITING    */
*GOSEND:                                                           0530
*   RETURN;                         /* RESTORE REGS AND RETURN TO  0530
*                                      CALLER                        */
@EL00001 DS    0H                                                  0530
@EF00001 DS    0H                                                  0530
@ER00001 LM    @14,@12,12(@13)                                     0530
         BR    @14                                                 0530
*                                                                  0531
*   /*****************************************************************/
*   /*                                                               */
*   /* GETLOCK WILL OBTAIN THE ASM CLASS LOCK UNCONDITIONALLY.       */
*   /* REGISTERS R2-R4 ARE STANDARD AS UNDER MAPPING MACRO POINTERS. */
*   /* R14 CONTAINS THE RETURN ADDR.                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0531
*GETLOCK:                                                          0531
*   PROCEDURE OPTIONS(NOSAVE,NOSAVEAREA);                          0531
GETLOCK  DS    0H                                                  0532
*   RFY                                                            0532
*    (R11,                                                         0532
*     R10,                                                         0532
*     R14) RSTD;                                                   0532
*   R10=R14;                        /* MAINTAIN RETURN ADDR          */
         LR    R10,R14                                             0533
*   R11=ADDR(ASHLOCK);              /* OBTAIN ADDR ASM LOCKWORD      */
         LA    R11,ASHLOCK(,RSMHDPTR)                              0534
*   GEN REFS(R11);                                                 0535
GETASM1  SETLOCK OBTAIN,TYPE=ASM,ADDR=(11),MODE=UNCOND,               **
               RELATED=(VIO,ILRGOS(FREASM1))
*   R14=R10;                        /* RESTORE RETURN ADDR           */
         LR    R14,R10                                             0536
*   RFY                                                            0537
*    (R11,                                                         0537
*     R10) UNRSTD;                                                 0537
*   END GETLOCK;                                                   0538
@EL00002 DS    0H                                                  0538
@EF00002 DS    0H                                                  0538
@ER00002 BR    @14                                                 0538
*                                                                  0539
*   /*****************************************************************/
*   /*                                                               */
*   /* FREELOCK WILL FREE THE ASM CLASS LOCK. REGISTERS R2-R4 ARE    */
*   /* STANDARD AS UNDER MAPPING MACRO POINTERS. R14 CONTAINS THE    */
*   /* RETURN ADDR.                                                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0539
*FREELOCK:                                                         0539
*   PROCEDURE OPTIONS(NOSAVE,NOSAVEAREA);                          0539
FREELOCK DS    0H                                                  0540
*   RFY                                                            0540
*    (R11,                                                         0540
*     R10,                                                         0540
*     R14) RSTD;                                                   0540
*   R10=R14;                        /* MAINTAIN RETURN ADDR          */
         LR    R10,R14                                             0541
*   R11=ADDR(ASHLOCK);              /* OBTAIN ADDR ASM LOCKWORD      */
         LA    R11,ASHLOCK(,RSMHDPTR)                              0542
*   GEN REFS(R11);                                                 0543
FREASM1  SETLOCK RELEASE,TYPE=ASM,ADDR=(11),                          **
               RELATED=(VIO,ILRGOS(GETASM1))
*   R14=R10;                        /* RESTORE RETURN ADDR           */
         LR    R14,R10                                             0544
*   RFY                                                            0545
*    (R11,                                                         0545
*     R10) UNRSTD;                                                 0545
*   END FREELOCK;                                                  0546
@EL00003 DS    0H                                                  0546
@EF00003 DS    0H                                                  0546
@ER00003 BR    @14                                                 0546
*ASSIGNLG:                                                         0547
*   PROCEDURE OPTIONS(NOSAVE,NOSAVEAREA);                          0547
*                                                                  0547
ASSIGNLG DS    0H                                                  0548
*/********************************************************************/
*/*                                                                  */
*/* THE ASSIGNLG ROUTINE WILL OBTAIN STORAGE FOR AND BUILD AN LGE    */
*/* AND ASSIGN AN LGID. IT WILL ALSO OBTAIN STORAGE FOR AND BUILD A  */
*/* LGVT IF NEEDED AND AN ASPCT IF REQUESTED. ALSO IF AN SRB DOES    */
*/* NOT EXIST FOR THIS ADDRESS SPACE, IT WILL BUILD ONE.             */
*/*                                                                  */
*/* INPUT: R2 THRU R4 STANDARD, REQASPCT TO INDICATE WHETHER AN ASPCT*/
*/*        SHOULD BE BUILT OR NOT.                                   */
*/*                                                                  */
*/* OUTPUT: THE PROPER CONTROL BLOCKS ARE BUILT AND INITIALIZED AS   */
*/*         DESCRIBED ABOVE. THE LGID ASSIGNED IS PLACED IN THE      */
*/*         LGELGID AND THE LGE IS RETURNED TO THE MAINLINE OF GOS.  */
*/*                                                                  */
*/********************************************************************/
*/********************************************************************/
*/*ASSIGNLG: CHART (AREF)                                            */
*/*        HEADER                                                  0548
*/*        ILRGOS                                                  0548
*/* ASSIGNLG - ASSIGN LGN, BUILD LGE ROUTINE                         */
*/*ASSIGNLG: E ENTRY                                                 */
*/*        P SAVE RETURN ADDRESS                                     */
*/*        P MAINTAIN ASMVT PTR AND ASM HDR PTR                      */
*/*        L SETLOCK:   UNCONDITIONAL OBTAIN SALLOC LOCK             */
*/*        P INITIALIZE GETMAIN SIZE TO THE LGE LENGTH               */
*/*        D (N,,Y,%GOS62) ANY AVAILIABLE LGVT ENTRIES               */
*/*        P INCR GET MAIN SIZE BY LGVSIZE + EXPANSION INCR          */
*/*%GOS62: D (N,,Y,%GOS63) SRB EXISTS (ASHSRBP)                      */
*/*        P INCREMENT GETMAIN SIZE BY SRB LENGTH                    */
*/*%GOS63: P INITIALIZE REGS FOR GETMAIN                             */
*/*        L GETMAIN: OBTAIN SQA SPACE FOR LGE, SRB AND LGVT         */
*/*        D (N,,Y,%GOS65) RETURN CODE = 0                           */
*/*        P (,%GOS73) SAVE RETURN CODE                              */
*/*%GOS65: P CHECKPOINT CONTROL BLOCKS IN EPATH                      */
*/*        P SAVE ADDR SPACE OBTAINED IN SQALEFT                     */
*/*        P ZERO SQA SPACE                                          */
*/*        D (Y,,N,%GOS67) ASPCT REQUIRED (REQASPCT)                 */
*/*        P INITIALIZE REGS FOR GETMAIN                             */
*/*        L GETMAIN: OBTAIN LSQA SPACE FOR ASPCT                    */
*/*        D (N,,Y,%GOS66) RETURN CODE = 0                           */
*/*        P SAVE RETURN CODE                                        */
*/*        P INITIALIZE REGS FOR FREEMAIN                            */
*/*        L (,%GOS73) FREEMAIN: FREE SQA SPACE OBTAINED EARLIER     */
*/*%GOS66: P ZERO LSQA SPACE                                         */
*/*        P ASPCT PTR = ADDR LSQA SPACE                             */
*/*%GOS67: D (Y,,N,%GOS70) LGVT TO BE EXPANDED (LGVLGVEP)            */
*/*        P MOVE LGVT INTO SQA SPACE OBTAINED                       */
*/*        P FIRST AVAILABLE LGVTE (LGVLGVEP) = LGVT ADDR + LGVSIZE  */
*/*        P LGVTE ADDR = FIRST AVAILABLE LGVTE                      */
*/*        P LGVTE LGID (LGVELGID) = MAX LGN (LGVMAXLG) + 1          */
*/*%GOS68: D (Y,,N,%GOS69) LGID < NUMBER LGVTES IN EXPANDED LGVT     */
*/*        P LGVENEXT = LGVTE ADDR + LGVTE LENGTH                    */
*/*        P INCR LGVELGID IN LGVENEXT                               */
*/*        P (,%GOS68) LGVTE ADDR = LGVENEXT                         */
*/*%GOS69: P LGVENEXT = 0, INDICATES LAST LGVTE                      */
*/*        P INCR MAX LGN (LGVMAXLG) BY NUMBER LGVTES IN AN EXPANSION*/
*/*        P INCR LGVT SIZE (LGVSIZE) BY EXPANSION SIZE              */
*/*        P LGVT ADDR (ASMLGVTP) = ADDR SQA GETMAINED               */
*/*        P INITIALIZE REGS. FOR FREEMAIN                           */
*/*        P ZERO LGVT PTR, E PATH, IN ATA                           */
*/*        L FREEMAIN: FREE OLD LGVT                                 */
*/*        P INCR SQALEFT BY LGVT SIZE (LGVSIZE)                     */
*/*%GOS70: P SET LGVTE ADDR = FIRST AVAILABLE LGVTE (LGVLGVEP)       */
*/*        P FIRST AVAILABLE LGVTE = NEXT LGVTE (LGVNEXT)            */
*/*        D (N,,Y,%GOS71) SRB EXISTS (ASHSRBP)                      */
*/*        P SRBPTR = SQALEFT + LENGTH OF THE LGE                    */
*/*        P INITIALIZE SRB FIELDS: ASCB, ASID, EP, ID, RTMR         */
*/*        P ADDR SRB (ASHVSRBP) = SRBPTR                            */
*/*%GOS71: D (Y,,N,%GOS72) ASPCT REQUIRED (REQASPCT)                 */
*/*        P INITIALIZE ASPCT FIELDS: IDENT, LGID, LGE, ASCB         */
*/*        P LGEASPCT = ASPCT PTR                                    */
*/*%GOS72: L SETLOCK: UNCONDITIONAL OBTAIN ASM LOCK                  */
*/*        P LGEPTR = SQALEFT                                        */
*/*        P LGELGID = LGVELGID                                      */
*/*        P LGVTE LGE PTR (LGVELGEP) = LGE PTR                      */
*/*        P LGVEASCB = CURRENT ASCB                                 */
*/*        N Q THE LGE TO THE ASMHD LGE Q                            */
*/*        P LGENEXT = ASHLGEQ                                       */
*/*        P ASHLGEQ = ADDR LGE OBTAINED                             */
*/*        L SETLOCK: RELEASE THE ASM CLASS LOCK                     */
*/*%GOS73: L SETLOCK: RELEASE THE SALLOC LOCK                        */
*/*        R RETURN                                                  */
*/*ASSIGNLG: END                                                     */
*/********************************************************************/
*                                                                  0548
*                                                                  0548
*   /*****************************************************************/
*   /*                                                               */
*   /* THE SALLOC LOCK IS OBTAINED, SQA CONTROL BLOCKS NEEDED ARE    */
*   /* DETERMINED, THE GETMAIN SIZE IS SET ACCORDINGLY, AND THE      */
*   /* STORAGE OBTAINED                                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0548
*   RFY                                                            0548
*     R14 RSTD;                                                    0548
*   RTNADDR=R14;                    /* MAINTAIN THE RETURN ADDR      */
         ST    R14,RTNADDR                                         0549
*   RFY                                                            0550
*     R14 UNRSTD;                                                  0550
*   GEN;                                                           0551
*    /* OBTAIN THE SALLOC LOCK */
GETSAL1   SETLOCK  OBTAIN,TYPE=SALLOC,MODE=UNCOND,                    **
               RELATED=(VIO,ILRGOS(FRESAL1))
*   RFY                                                            0552
*     GETSIZE RSTD;                                                0552
*   GETSIZE=LENGTH(LGE);            /* INITIALIZED TO LGE LENGTH     */
         LA    GETSIZE,24                                          0553
*   RFY                                                            0554
*     LGVTPTR RSTD;                                                0554
*   LGVTPTR=ASMLGVT;                /* OBTAIN ADDR OF THE LGVT       */
         L     LGVTPTR,ASMLGVT(,ASMVTPTR)                          0555
*   IF LGVLGVEP=ZERO THEN                                          0556
         L     @10,LGVLGVEP(,LGVTPTR)                              0556
         LTR   @10,@10                                             0556
         BNZ   @RF00556                                            0556
*     GETSIZE=GETSIZE+LGVSIZE+EXPSIZE;/* IF NO AVAILABLE LGVTES INCR
*                                      SIZE BY CURRENT LGVT SIZE AND
*                                      EXPANSION INCREMENT           */
         LR    @10,GETSIZE                                         0557
         AL    @10,LGVSIZE(,LGVTPTR)                               0557
         AL    @10,@CF01282                                        0557
         LR    GETSIZE,@10                                         0557
*   IF ASHVSRBP=ZERO THEN                                          0558
@RF00556 L     @10,ASHVSRBP(,RSMHDPTR)                             0558
         LTR   @10,@10                                             0558
         BNZ   @RF00558                                            0558
*     GETSIZE=GETSIZE+LENGTH(SRB);  /* INCR SIZE BY THE SRB SIZE, NO
*                                      SRB FOR THIS ADDRESS SPACE    */
         AL    GETSIZE,@CF01405                                    0559
*   R4SAVE=R4;                      /* STORE R4, DESTROYED IN GETMAIN*/
@RF00558 ST    R4,R4SAVE                                           0560
*   RFY                                                            0561
*    (R15,                                                         0561
*     R1AREA) RSTD;                                                0561
*   GEN REFS(GETSIZE,R3,R4) SETS(R1AREA,R15);                      0562
*                                         /* OBTAIN SPACE FOR
*      LGE AND/OR SRB, LGVT */
       GETMAIN  RC,LV=(GETSIZE),SP=245,BRANCH=(YES,GLOBAL)
*   ASMVTPTR=CVTASMVT;              /* RESTORE R3, DESTROYED IN    0563
*                                      GETMAIN                       */
         L     @14,CVTPTR                                          0563
         L     ASMVTPTR,CVTASMVT(,@14)                             0563
*   R4=R4SAVE;                      /* RESTORE R4, DESTROYED IN    0564
*                                      GETMAIN                       */
         L     R4,R4SAVE                                           0564
*   IF R15^=ZERO THEN                                              0565
         LTR   R15,R15                                             0565
         BZ    @RF00565                                            0565
*     DO;                           /* GETMAIN UNSUCCESSFUL, RETURN
*                                      TO CALLER                     */
*       RTNCODE=CODE28;             /* INDICATE NOT ENOUGH STORAGE   */
         MVC   RTNCODE(4),@CF00438                                 0567
*       RFY                                                        0568
*         R15 UNRSTD;                                              0568
*     END;                          /* UNSUCCESSFUL SQA GETMAIN      */
*                                                                  0570
*   /*****************************************************************/
*   /*                                                               */
*   /* GETMAIN SUCCESSFUL, CLEAR THE STORAGE OBTAINED, DETERMINE IF  */
*   /* AN ASPCT NEEDED AND OBTAIN AND CLEAR ITS STORAGE IF NECESSARY.*/
*   /* ALSO CHEKPOINT CONTROL BLOCKS AND THEIR LENGTHS IN THE EPATH  */
*   /* IF NEEDED.                                                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0570
*   ELSE                                                           0570
*     DO;                           /* SQA GETMAIN SUCCESSFUL        */
         B     @RC00565                                            0570
@RF00565 DS    0H                                                  0571
*       IF LGVLGVEP=ZERO THEN                                      0571
         L     @10,LGVLGVEP(,LGVTPTR)                              0571
         LTR   @10,@10                                             0571
         BNZ   @RF00571                                            0571
*         DO;                       /* CHECKPOINT NEW LGVT, ITS SIZE
*                                      AND THE LGE IN EPATH          */
*           EPALGVTP=R1AREA;        /* RRR-CHECKPOINT LGVT-RRR       */
         ST    R1AREA,EPALGVTP                                     0573
*           EPALSIZE=LGVSIZE+EXPSIZE;/* RRR-CHECKPOINT LGVT SIZE-RRR */
         LA    @10,512                                             0574
         AL    @10,LGVSIZE(,LGVTPTR)                               0574
         STH   @10,EPALSIZE                                        0574
*           EPALGEP=R1AREA+EPALSIZE;/* RRR-CHECKPOINT LGE-RRR        */
         ALR   @10,R1AREA                                          0575
         ST    @10,EPALGEP                                         0575
*         END;                                                     0576
*       ELSE                                                       0577
*         EPALGEP=R1AREA;           /* RRR-CHECKPOINT LGE, NO LGVT 0577
*                                      NEEDED-RRR                    */
         B     @RC00571                                            0577
@RF00571 ST    R1AREA,EPALGEP                                      0577
*       IF ASHVSRBP=ZERO THEN                                      0578
@RC00571 L     @10,ASHVSRBP(,RSMHDPTR)                             0578
         LTR   @10,@10                                             0578
         BNZ   @RF00578                                            0578
*         EPASRB=EPALGEP+LENGTH(LGE);/* RRR-CHECK POINT THE SRB ADDR
*                                      IN THE EPATH-RRR              */
         LA    @10,24                                              0579
         AL    @10,EPALGEP                                         0579
         ST    @10,EPASRB                                          0579
*       SQALEFT=R1AREA;             /* SAVE ADDR OF SQA SPACE      0580
*                                      OBTAINED                      */
*                                                                  0580
@RF00578 ST    R1AREA,SQALEFT                                      0580
*       /*************************************************************/
*       /*                                                           */
*       /* CLEAR THE SQA SPACE OBTAINED                              */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0581
*       RFY                                                        0581
*        (R0,                                                      0581
*         R14,                                                     0581
*         R15) RSTD;                                               0581
*       R0=R1AREA;                  /* ADDR AREA TO BE CLEARED       */
         LR    R0,R1AREA                                           0582
*       R1=GETSIZE;                 /* LENGTH AREA TO BE CLEARED     */
         LR    R1,GETSIZE                                          0583
*       R15=ZERO;                   /* ZERO PADDING CHARACTER AND  0584
*                                      FROM LENGTH                   */
         SLR   R15,R15                                             0584
*       MVCL(R0,R14);               /* CLEAR THE SQA SPACE OBTAINED  */
         MVCL  R0,R14                                              0585
*       RFY                                                        0586
*        (R14,                                                     0586
*         R0) UNRSTD;                                              0586
*                                                                  0587
*       /*************************************************************/
*       /*                                                           */
*       /* AN ASPCT WAS REQUESTED OBTAIN AND CLEAR LSQA STORAGE FOR  */
*       /* IT                                                        */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0587
*       IF REQASPCT=ON THEN                                        0587
         TM    REQASPCT,B'10000000'                                0587
         BNO   @RF00587                                            0587
*         DO;                       /* STORAGE FOR AN ASPCT IS NEEDED*/
*           RFY                                                    0589
*             R10 RSTD;                                            0589
*           R10=LENGTH(ASPCT);      /* OBTAIN THE LENGTH FOR GETMAIN */
         LA    R10,1088                                            0590
*           R4SAVE=R4;              /* STORE R4, USED IN GETMAIN     */
         ST    R4,R4SAVE                                           0591
*           R7SAVE=R7;              /* STORE R7, USED IN GETMAIN     */
         ST    R7,R7SAVE                                           0592
*           R4=PSATOLD;             /* LOAD TCB ADDR                 */
         L     R4,PSATOLD                                          0593
*           R7=PSAAOLD;             /* LOAD ASCB ADDR                */
         L     R7,PSAAOLD                                          0594
*           GEN REFS(R10,R4,R7) SETS(R1AREA,R15,R3);               0595
*                                         /* OBTAIN SPACE FOR ASPCT */
    GETMAIN RC,LV=(R10),SP=255,BRANCH=YES     GET LSQA SPACE
*           ASMVTPTR=CVTASMVT;      /* RESTORE R3, DESTROYED IN    0596
*                                      GETMAIN                       */
         L     @14,CVTPTR                                          0596
         L     ASMVTPTR,CVTASMVT(,@14)                             0596
*           R4=R4SAVE;              /* RESTORE R4, DESTROYED IN    0597
*                                      GETMAIN                       */
         L     R4,R4SAVE                                           0597
*           R7=R7SAVE;              /* RESTORE R7, DESTROYED IN    0598
*                                      GETMAIN                       */
         L     R7,R7SAVE                                           0598
*           IF R15^=ZERO THEN                                      0599
         SLR   @14,@14                                             0599
         CR    R15,@14                                             0599
         BE    @RF00599                                            0599
*             DO;                   /* GETMAIN UNSUCCESSFUL, FREE SQA
*                                      AND RETURN                    */
*               RTNCODE=CODE28;     /* INDICATE NOT ENOUGH STORAGE   */
         MVC   RTNCODE(4),@CF00438                                 0601
*               R1AREA=SQALEFT;     /* ADDRESS AREA TO BE FREED      */
         L     R1AREA,SQALEFT                                      0602
*               R4SAVE=R4;          /* STORE R4, DESTROYED IN      0603
*                                      FREEMAIN                      */
         ST    R4,R4SAVE                                           0603
*               EPASRB=ZERO;        /* RRR-STOP TRACKING SRB ADDR IN
*                                      EPATH-RRR                     */
         ST    @14,EPASRB                                          0604
*               EPALGVTP=ZERO;      /* RRR-CLEAR LGVT ADDR IN      0605
*                                      EPATH-RRR                     */
         ST    @14,EPALGVTP                                        0605
*               EPALSIZE=ZERO;      /* RRR-CLEAR LGVT SIZE IN      0606
*                                      EPATH-RRR                     */
         STH   @14,EPALSIZE                                        0606
*               EPALGEP=ZERO;       /* RRR-CLEAR LGE ADDR IN       0607
*                                      EPATH-RRR                     */
         ST    @14,EPALGEP                                         0607
*               GEN REFS(GETSIZE,R1AREA);                          0608
*                         /* FREE SQA OBTAINED EARLIER */
       FREEMAIN  RC,LV=(GETSIZE),SP=245,A=(R1AREA),BRANCH=(YES,GLOBAL)
*               RFY                                                0609
*                 GETSIZE UNRSTD;                                  0609
*               ASMVTPTR=CVTASMVT;  /* RESTORE R3, DESTROYED IN    0610
*                                      FREEMAIN                      */
         L     @14,CVTPTR                                          0610
         L     ASMVTPTR,CVTASMVT(,@14)                             0610
*               R4=R4SAVE;          /* RESTORE R4, DESTROYED IN    0611
*                                      FREEMAIN                      */
         L     R4,R4SAVE                                           0611
*             END;                  /* LSQA GETMAIN UNSUCCESSFUL     */
*           ELSE                                                   0613
*             DO;                   /* LSQA GETMAIN SUCCESSFUL       */
         B     @RC00599                                            0613
@RF00599 DS    0H                                                  0614
*               EPARBASP=R1AREA;    /* RRR-TRACK ASPCT IN EPATH-RRR  */
         ST    R1AREA,EPARBASP                                     0614
*               EPARSIZE=LENGTH(ASPCT);/* RRR-TRACK ASPCT SIZE IN  0615
*                                      EPATH-RRR                     */
         MVC   EPARSIZE(2),@CH01810                                0615
*               SAVASPCT=R1AREA;    /* SAVE ADDR ASPCT TO BE BUILT   */
         ST    R1AREA,SAVASPCT                                     0616
*               RFY                                                0617
*                (R0,                                              0617
*                 R14) RSTD;                                       0617
*               R0=R1AREA;          /* ADDR AREA TO BE CLEARED       */
         LR    R0,R1AREA                                           0618
*               R1=R10;             /* LENGTH AREA TO BE CLEARED     */
         LR    R1,R10                                              0619
*               R15=ZERO;           /* ZERO PADDING CHARACTER AND  0620
*                                      FROM LENGTH                   */
         SLR   R15,R15                                             0620
*               MVCL(R0,R14);       /* CLEAR THE LSQA OBTAINED       */
         MVCL  R0,R14                                              0621
*               RFY                                                0622
*                (R0,                                              0622
*                 R1,                                              0622
*                 R14,                                             0622
*                 R15) UNRSTD;                                     0622
*             END;                  /* LSQA GETMAIN SUCCESSFUL       */
*         END;                      /* ASPCT NEEDED                  */
@RC00599 DS    0H                                                  0625
*     END;                          /* SQA GETMAIN SUCCESSFUL        */
@RF00587 DS    0H                                                  0626
*                                                                  0626
*   /*****************************************************************/
*   /*                                                               */
*   /* IF GETMAIN(S) ARE SUCCESSFUL PROCESSING COMES HERE WHERE THE  */
*   /* LGVT IS EXPANDED IF NECESSARY AND A LGVTE OBTAINED            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0626
*   IF RTNCODE=ZERO THEN                                           0626
@RC00565 SLR   @12,@12                                             0626
         C     @12,RTNCODE                                         0626
         BNE   @RF00626                                            0626
*     DO;                           /* NO GETMAIN ERRORS             */
*       IF LGVLGVEP=ZERO THEN                                      0628
         C     @12,LGVLGVEP(,LGVTPTR)                              0628
         BNE   @RF00628                                            0628
*         DO;                       /* EXPAND THE LGVT               */
*           RFY                                                    0630
*            (R0,                                                  0630
*             R1,                                                  0630
*             R14,                                                 0630
*             R15) RSTD;                                           0630
*           R0=SQALEFT;             /* MOVE TO ADDR                  */
         L     R0,SQALEFT                                          0631
*           R1=LGVSIZE;             /* MOVE TO LENGTH                */
         L     @12,LGVSIZE(,LGVTPTR)                               0632
         LR    R1,@12                                              0632
*           R14=LGVTPTR;            /* MOVE FROM ADDR                */
         LR    R14,LGVTPTR                                         0633
*           R15=LGVSIZE;            /* MOVE FROM LENGTH              */
         LR    R15,@12                                             0634
*           MVCL(R0,R14);           /* MOVE THE LGVT TO NEW AREA   0635
*                                      GETMAINED                     */
         MVCL  R0,R14                                              0635
*           RFY                                                    0636
*            (R0,                                                  0636
*             R1,                                                  0636
*             R14,                                                 0636
*             R15) UNRSTD;                                         0636
*           LGVTPTR=SQALEFT;        /* ADDR NEW LGVT                 */
         L     LGVTPTR,SQALEFT                                     0637
*           LGVLGVEP=LGVTPTR+LGVSIZE;/* SET FIRST AVAILABLE LGVTE  0638
*                                      ADDR IN LGVT AVAILABLE QUEUE  */
         LR    @12,LGVTPTR                                         0638
         AL    @12,LGVSIZE(,LGVTPTR)                               0638
         ST    @12,LGVLGVEP(,LGVTPTR)                              0638
*           RFY                                                    0639
*             LGVTEPTR RSTD;                                       0639
*           LGVTEPTR=LGVLGVEP;      /* OBTAIN ADDRESSIBILITY TO FIRST
*                                      LGVTE                         */
         LR    LGVTEPTR,@12                                        0640
*           RFY                                                    0641
*             ENTRYCNT RSTD;                                       0641
*           ENTRYCNT=ONE;           /* COUNT OF LGVT ENTRIES QUEUED  */
*                                                                  0642
         LA    ENTRYCNT,1                                          0642
*           /*********************************************************/
*           /*                                                       */
*           /* SET THE LGID IN EACH LGVTE AND CHAIN THE ENTRIES      */
*           /* TOGETHER FOR THE AVAILABLE QUEUE                      */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0643
*           DO WHILE ENTRYCNT<EXPENTRS;/* FOR EVERY LGVTE EXCEPT THE
*                                      LAST                          */
         B     @DE00643                                            0643
@DL00643 DS    0H                                                  0644
*             LGVENEXT=LGVTEPTR+LENGTH(LGVTE);/* Q NEXT LGVTE TO   0644
*                                      AVAILABLE QUEUE               */
         LA    @00,8                                               0644
         ALR   @00,LGVTEPTR                                        0644
         ST    @00,LGVENEXT(,LGVTEPTR)                             0644
*             LGVELGID=LGVMAXLG+ENTRYCNT;/* INCR LGID IN NEXT LGVTE  */
         LR    @15,ENTRYCNT                                        0645
         AL    @15,LGVMAXLG(,LGVTPTR)                              0645
         ST    @15,LGVELGID(,LGVTEPTR)                             0645
*             LGVTEPTR=LGVENEXT;    /* UPDATE THE LGVTE ADDR         */
         LR    LGVTEPTR,@00                                        0646
*             ENTRYCNT=ENTRYCNT+ONE;/* INCR COUNT OF LGVTES QUEUED   */
         AL    ENTRYCNT,@CF00040                                   0647
*           END;                    /* END DO FOR LGVTES             */
@DE00643 LA    @15,64                                              0648
         CR    ENTRYCNT,@15                                        0648
         BL    @DL00643                                            0648
*           LGVELGID=LGVMAXLG+ENTRYCNT;/* SET LGID FOR LAST LGVTE, 0649
*                                      THE NEXT FIELD IS LEFT TO ZERO
*                                      INDICATING THE LAST LGVTE     */
         L     @14,LGVMAXLG(,LGVTPTR)                              0649
         LR    @00,ENTRYCNT                                        0649
         ALR   @00,@14                                             0649
         ST    @00,LGVELGID(,LGVTEPTR)                             0649
*           RFY                                                    0650
*             ENTRYCNT UNRSTD;                                     0650
*           LGVMAXLG=LGVMAXLG+EXPENTRS;/* INCR MAX LGID              */
         ALR   @14,@15                                             0651
         ST    @14,LGVMAXLG(,LGVTPTR)                              0651
*           R10=LGVSIZE;            /* SAVE SIZE OLD LGVT FOR      0652
*                                      FREEMAIN                      */
         L     @12,LGVSIZE(,LGVTPTR)                               0652
         LR    R10,@12                                             0652
*           LGVSIZE=LGVSIZE+EXPSIZE;/* INCR LGVT SIZE                */
         AL    @12,@CF01282                                        0653
         ST    @12,LGVSIZE(,LGVTPTR)                               0653
*           RFY                                                    0654
*             R1AREA RSTD;                                         0654
*           R1AREA=ASMLGVT;         /* SAVE ADDR OLD LGVT FOR      0655
*                                      FREEMAIN                      */
         L     R1AREA,ASMLGVT(,ASMVTPTR)                           0655
*           EPALGVTP=ZERO;          /* RRR-STOP TRACKING LGVT-RRR    */
         SLR   @12,@12                                             0656
         ST    @12,EPALGVTP                                        0656
*           EPALSIZE=ZERO;          /* RRR-STOP TRACKING LGVT      0657
*                                      SIZE-RRR                      */
         STH   @12,EPALSIZE                                        0657
*           ASMLGVT=LGVTPTR;        /* STORE ADDR NEW LGVT IN ASMVT  */
         ST    LGVTPTR,ASMLGVT(,ASMVTPTR)                          0658
*           R4SAVE=R4;              /* SAVE R4, DESTROYED IN FREEMAIN*/
         ST    R4,R4SAVE                                           0659
*           GEN REFS(R1AREA,R10,R3,R4);                            0660
*                           /* FREE OLD LGVT */
       FREEMAIN  RC,LV=(R10),SP=245,A=(R1AREA),BRANCH=(YES,GLOBAL)
*           ASMVTPTR=CVTASMVT;      /* RESTORE R3, DESTROYED IN    0661
*                                      GETMAIN                       */
         L     @12,CVTPTR                                          0661
         L     ASMVTPTR,CVTASMVT(,@12)                             0661
*           R4=R4SAVE;              /* RESTORE R4, DESTROYED IN    0662
*                                      FREEMAIN                      */
         L     R4,R4SAVE                                           0662
*           SQALEFT=SQALEFT+LGVSIZE;/* ADDR NEXT CONTROL BLOCK TO BE
*                                      BUILT                         */
         L     @12,SQALEFT                                         0663
         AL    @12,LGVSIZE(,LGVTPTR)                               0663
         ST    @12,SQALEFT                                         0663
*         END;                      /* END EXPAND LGVT               */
*                                                                  0664
*       /*************************************************************/
*       /*                                                           */
*       /* THE FIRST AVAILABLE LGVTE IS NOW OBTAINED                 */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0665
*       LGVTEPTR=LGVLGVEP;          /* OBTAIN ADDR FIRST AVAILABLE 0665
*                                      LGVTE                         */
@RF00628 L     LGVTEPTR,LGVLGVEP(,LGVTPTR)                         0665
*       LGVLGVEP=LGVENEXT;          /* MAKE THE FIRST AVAILABLE LGVTE
*                                      THE NEXT LGVTE                */
         L     @12,LGVENEXT(,LGVTEPTR)                             0666
         ST    @12,LGVLGVEP(,LGVTPTR)                              0666
*                                                                  0667
*       /*************************************************************/
*       /*                                                           */
*       /* A SRB IS CREATED IF THERE IS NONE, THE LGE IS INITIALIZED */
*       /* AND AN ASPCT IS CREATED IF REQUESTED                      */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0667
*       IF ASHVSRBP=ZERO THEN                                      0667
         SLR   @12,@12                                             0667
         C     @12,ASHVSRBP(,RSMHDPTR)                             0667
         BNE   @RF00667                                            0667
*         DO;                       /* NO SRB FOR THIS ADDRESS SPACE */
*           RFY                                                    0669
*             SRBPTR RSTD;                                         0669
*           SRBPTR=SQALEFT+LENGTH(LGE);/* OBTAIN ADDRESS OF THE SRB  */
         LA    SRBPTR,24                                           0670
         AL    SRBPTR,SQALEFT                                      0670
*           SRBASCB=PSAAOLD;        /* STORE ASCB ADDR IN ASPCT      */
         L     @15,PSAAOLD                                         0671
         ST    @15,SRBASCB(,SRBPTR)                                0671
*           SRBPASID=PSAAOLD->ASCBASID;/* ASID OF SRBRMTR            */
         LH    @00,ASCBASID(,@15)                                  0672
         N     @00,@CF01812                                        0672
         STH   @00,SRBPASID(,SRBPTR)                               0672
*           SRBEP=ASMPSRBC;         /* ADDR SRB CONTROLLER, GIVEN  0673
*                                      CONTROL WHEN SRB SCHEDULED    */
         L     @00,ASMPSRBC(,ASMVTPTR)                             0673
         ST    @00,SRBEP(,SRBPTR)                                  0673
*           SRBID=SRBK;             /* SET SRB ID IN SRB             */
         MVC   SRBID(4,SRBPTR),@CC01689                            0674
*           SRBRMTR=ASMVRMTR;       /* ADDR VIO RESOURCE MANAGER   0675
*                                      TERMINATION ROUTINE           */
         L     @00,ASMVRMTR(,ASMVTPTR)                             0675
         ST    @00,SRBRMTR(,SRBPTR)                                0675
*           SRBPRIOR=NONQ;          /* MAKE SRB PRIORITY           0676
*                                      NON-QUIESCENT                 */
         MVI   SRBPRIOR(SRBPTR),X'04'                              0676
*           EPASRB=ZERO;            /* RRR-STOP TRACKING SRB ADDR IN
*                                      EPATH-RRR                     */
         ST    @12,EPASRB                                          0677
*           ASHVSRBP=SRBPTR;        /* PUT SRB ADDR IN THE ASM HEADER*/
         ST    SRBPTR,ASHVSRBP(,RSMHDPTR)                          0678
*           RFY                                                    0679
*             SRBPTR UNRSTD;                                       0679
*         END;                      /* NO SRB                        */
*       LGEPTR=SQALEFT;             /* OBTAIN ADDR OF THE LGE        */
@RF00667 L     LGEPTR,SQALEFT                                      0681
*       IF REQASPCT=ON THEN                                        0682
         TM    REQASPCT,B'10000000'                                0682
         BNO   @RF00682                                            0682
*         DO;                       /* ASPCT NEEDED                  */
*           RFY                                                    0684
*             ASPCTPTR RSTD;                                       0684
*           ASPCTPTR=SAVASPCT;      /* OBTAIN ASPCT TO BE INITIALIZED*/
         L     ASPCTPTR,SAVASPCT                                   0685
*           ASPIDENT=ASPC;          /* PLACE ID IN ASPCT             */
         MVC   ASPIDENT(4,ASPCTPTR),@CC01687                       0686
*           ASPLGID=LGVELGID;       /* STORE LGID IN ASPCT           */
         L     @00,LGVELGID(,LGVTEPTR)                             0687
         ST    @00,ASPLGID(,ASPCTPTR)                              0687
*           ASPLGE=LGEPTR;          /* STORE LGE ADDR IN ASPCT       */
         ST    LGEPTR,ASPLGE(,ASPCTPTR)                            0688
*           ASPASCB=PSAAOLD;        /* STORE ASCB ADDR IN ASPCT      */
         L     @00,PSAAOLD                                         0689
         ST    @00,ASPASCB(,ASPCTPTR)                              0689
*           EPARBASP=ZERO;          /* RRR-STOP TRACKING THE       0690
*                                      ASPCT-RRR                     */
         SLR   @15,@15                                             0690
         ST    @15,EPARBASP                                        0690
*           EPARSIZE=ZERO;          /* RRR-STOP TRACKING ASPCT     0691
*                                      SIZE-RRR                      */
         STH   @15,EPARSIZE                                        0691
*           LGEASPCT=ASPCTPTR;      /* STORE ASPCT ADDR IN THE LGE   */
         ST    ASPCTPTR,LGEASPCT(,LGEPTR)                          0692
*         END;                      /* ASPCT NEEDED                  */
*       SAVLGVTE=LGVTEPTR;          /* STORE ADDR OF THE LGVTE ACROSS
*                                      GETLOCK                       */
@RF00682 ST    LGVTEPTR,SAVLGVTE                                   0694
*       CALL GETLOCK;               /* GET THE ASM CLASS LOCK        */
         BAL   @14,GETLOCK                                         0695
*       LGVTEPTR=SAVLGVTE;          /* RESTORE THE ADDR OF THE LGVTE */
         L     LGVTEPTR,SAVLGVTE                                   0696
*       LGELGID=LGVELGID;           /* STORE THE LGID IN LGE         */
         L     @00,LGVELGID(,LGVTEPTR)                             0697
         ST    @00,LGELGID(,LGEPTR)                                0697
*       LGVELGEP=LGEPTR;            /* STORE LGE ADDR IN LGVTE       */
         ST    LGEPTR,LGVELGEP(,LGVTEPTR)                          0698
*       LGVEASCB=PSAAOLD;           /* STORE ASCB ADDR IN LGVTE,   0699
*                                      VALIDATES THE LGVTE           */
         L     @00,PSAAOLD                                         0699
         ST    @00,LGVEASCB(,LGVTEPTR)                             0699
*       IF EPAACASR=OFF THEN                                       0700
         TM    EPAACASR,B'00001000'                                0700
         BNZ   @RF00700                                            0700
*         EPALGEP=ZERO;             /* RRR-CLEAR LGE ADDR IN EPATH ON
*                                      A RELEASE REQUEST-RRR         */
         SLR   @00,@00                                             0701
         ST    @00,EPALGEP                                         0701
*                                                                  0702
*       /*************************************************************/
*       /*                                                           */
*       /* QUEUE THE LGE TO THE ASM HEADER LGE QUEUE, RELEASE THE ASM*/
*       /* AND SALLOC LOCKS, AND RETURN TO THE CALLER                */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0702
*       LGENEXT=ASHLGEQ;            /* Q LGE Q TO LGE JUST OBTAINED  */
@RF00700 L     @00,ASHLGEQ(,RSMHDPTR)                              0702
         ST    @00,LGENEXT(,LGEPTR)                                0702
*       ASHLGEQ=LGEPTR;             /* MAKE LGE FIRST ELEMENT ON   0703
*                                      QUEUE                         */
         ST    LGEPTR,ASHLGEQ(,RSMHDPTR)                           0703
*       RFY                                                        0704
*        (LGVTPTR,                                                 0704
*         ASPCTPTR,                                                0704
*         LGVTEPTR) UNRSTD;                                        0704
*       CALL FREELOCK;              /* FREE THE ASM CLASS LOCK       */
         BAL   @14,FREELOCK                                        0705
*     END;                          /* NO GETMAIN ERRORS             */
*   GEN;                                                           0707
@RF00626 DS    0H                                                  0707
*    /* RELEASE THE SALLOC LOCK */
FRESAL1   SETLOCK  RELEASE,TYPE=SALLOC,RELATED=(VIO,ILRGOS(GETSAL1))
*   RFY                                                            0708
*     R14 RSTD;                                                    0708
*   R14=RTNADDR;                    /* RESTORE RETURN ADDR           */
         L     R14,RTNADDR                                         0709
*   END ASSIGNLG;                                                  0710
@EL00004 DS    0H                                                  0710
@EF00004 DS    0H                                                  0710
@ER00004 BR    @14                                                 0710
*ILRFRELG:                                                         0711
*   ENTRY;                                                         0711
*                                                                  0711
@EP00711 DS    0H                                                  0712
*/********************************************************************/
*/*                                                                  */
*/* FUNCTION: TO DEQUEUE THE LGE FROM THE ASM HEADER LGE QUEUE, FREE */
*/*           THE LGE, AND MAKE THE LGVTE AVAILABLE AGAIN. TO UPDATE */
*/*           THE ASCB VIO COUNT.                                    */
*/*                                                                  */
*/* INPUT: R1 - ADDR LGE TO BE FREED                                 */
*/*        R3 - ASMVT ADDR                                           */
*/*        R13 - ADDR CALLER'S SAVE AREA                             */
*/*                                                                  */
*/* OUTPUT: ASCBVSC UPDATED BY LGESLTCT                              */
*/*         LGVTE AVAILABLE Q ANCHOR (LGVLGVEP) AND LGVENEXT RESET   */
*/*                                                                  */
*/********************************************************************/
*/********************************************************************/
*/*ILRFRELG: CHART (AREF)                                            */
*/*        HEADER                                                  0712
*/*        ILRGOS                                                  0712
*/* ILRFRELG - ROUTINE TO DEQUEUE AND FREE A LGE                     */
*/*ILRFRELG: E EXTERNAL ENTRY                                        */
*/*        P SAVE CALLER'S REGS                                      */
*/*        P ESTABLISH ADDRESSIBILITY                                */
*/*        P MAINTAIN ASMHD PTR, ASMVT PTR, AND LGE PTR              */
*/*        L SETLOCK: UNCONDITIONAL OBTAIN ASM CLASS LOCK            */
*/*        P (,%GOS48) INCR ASCBVSC BY LGESLTCT                      */
*/*FRELG:  E INTERNAL ENTRY                                          */
*/*%GOS48: P SAVE RETURN ADDR                                        */
*/*        N DEQUEUE THE LGE                                         */
*/*        D (Y,,N,%GOS74) LGE TO BE FREED IS FIRST ON Q             */
*/*        P (,%GOS49) LGE Q (ASHLGEQ) = NEXT LGE (LGENEXT)          */
*/*%GOS74: P SEARCH LGE Q FOR LGE TO BE FREED (LGEPTR)               */
*/*        P SAVE PREVIOUS LGE ADDR DURING SEARCH                    */
*/*        D (Y,,N,%GOS76) LGE TO BE FREED WAS FOUND                 */
*/*        P LGENEXT OF PREVIOUS LGE = LGENEXT OF LGEPTR             */
*/*%GOS49: P CLEAR FIRST AND LAST AIA/ACE PTRS                       */
*/*        L SETLOCK: UNCONDITIONAL RELEASE ASM CLASS LOCK           */
*/*        L SETLOCK: UNCONDITIONAL OBTAIN SALLOC LOCK               */
*/*        P CALCULATE THE LGVTE ADDR                                */
*/*        P LGVELGID = LGELGID                                      */
*/*        P LGVENEXT = FIRST AVAILABLE LGVTE (LGVLGVEP)             */
*/*        P FIRST AVAILABLE LGVTE = LGVTE ADDR                      */
*/*        P INITIALIZE REGS FOR FREEMAIN                            */
*/*        L FREEMAIN: FREE SQA SPACE CONTAINING THE LGE             */
*/*        L (,%GOS77) SETLOCK: RELEASE THE SALLOC LOCK              */
*/*%GOS76: P SET RTN CODE = '04', INVALID LGN                        */
*/*        L SETLOCK: UNCONDITIONAL RELEASE ASM CLASS LOCK           */
*/*%GOS77: D (N,,Y,%GOS50) INTERNAL ENTRY                            */
*/*        P RESTORE CALLER'S REGS                                   */
*/*        R RETURN TO ILRRLG                                        */
*/*%GOS50: P RESTORE RETURN ADDRESS                                  */
*/*        R RETURN                                                  */
*/*ILRFRELG: END                                                     */
*/********************************************************************/
*                                                                  0712
*                                                                  0712
*   /*****************************************************************/
*   /*                                                               */
*   /* ILRFRELG IS CALLED BY ILRRLG AND ILRGOS01. THE ASM CLASS LOCK */
*   /* IS OBTAINED AND THE VIO SLOT COUNT UPDATED BY THE AMOUNT      */
*   /* SPECIFIED BY THE CALLING ROUTINE. FRELG IS THEN CALLED TO     */
*   /* PERFORM THE ACTUAL PROCESSING. SINCE ILRFRELG IS AN EXTERNAL  */
*   /* ENTRY NEITHER IT OR THE SUBROUTINE FRELG CAN USE ILRGOS       */
*   /* WORK-SAVE AREA.                                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0712
*   RFY                                                            0712
*    (R1,                                                          0712
*     R11,                                                         0712
*     R13) RSTD;                                                   0712
*   R8=R13;                         /* SAVE ADDR CALLERS SAVE AREA   */
         LR    R8,R13                                              0713
*   LGEPTR=R1;                      /* OBTAIN THE ADDR OF THE LGE TO
*                                      BE FREED                      */
         LR    LGEPTR,R1                                           0714
*   RFY                                                            0715
*     ASCBPTR RSTD;                                                0715
*   ASCBPTR=PSAAOLD;                /* OBTAIN ADDR ASCB              */
         L     ASCBPTR,PSAAOLD                                     0716
*   RSMHDPTR=ASCBRSM;               /* OBTAIN ADDR RSM HEADER        */
         L     RSMHDPTR,ASCBRSM(,ASCBPTR)                          0717
*   R11=ADDR(ASHLOCK);              /* OBTAIN ASM LOCKWORD           */
         LA    R11,ASHLOCK(,RSMHDPTR)                              0718
*   GEN REFS(R11);                                                 0719
*              /* OBTAIN THE ASM CLASS LOCK */
GETASM2  SETLOCK  OBTAIN,TYPE=ASM,ADDR=(11),MODE=UNCOND,              **
               RELATED=(VIO,ILRGOS(FREASM2/3))
*   RFY                                                            0720
*     R11 UNRSTD;                                                  0720
*   ASCBVSC=ASCBVSC+LGESLTCT;       /* UPDATE THE VIO SLOT COUNT BY
*                                      COUNT RETURNED BY THE RELEASE
*                                      GROUP OPERATOR                */
         LH    @15,ASCBVSC(,ASCBPTR)                               0721
         AH    @15,LGESLTCT(,LGEPTR)                               0721
         STH   @15,ASCBVSC(,ASCBPTR)                               0721
*   RFY                                                            0722
*     ASCBPTR UNRSTD;                                              0722
*   CALL FRELG;                     /* TO PREFORM ACTUAL FREE      0723
*                                      PROCESSING                    */
         BAL   @14,FRELG                                           0723
*FRELGEND:                                                         0724
*   R13=R8;                         /* RESTORE CALLERS SAVE AREA ADDR*/
FRELGEND LR    R13,R8                                              0724
*   RFY                                                            0725
*     R15 RSTD;                                                    0725
*   RETURN CODE(R15);               /* RESTORE REGS AND RETURN TO  0726
*                                      CALLER                        */
         L     @14,12(,@13)                                        0726
         LM    @00,@12,20(@13)                                     0726
         BR    @14                                                 0726
*   RFY                                                            0727
*     R15 UNRSTD;                                                  0727
*                                                                  0728
*   /*****************************************************************/
*   /*                                                               */
*   /* FRELG IS CALLED BY THE MAINLINE OF GOS AND ILRFRELG TO DEQUEUE*/
*   /* AND FREE AN LGE AND TO REINITIALIZE THE LGVTE AND PUT IT BACK */
*   /* ON THE AVAILABLE QUEUE.                                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0728
*FRELG:                                                            0728
*   PROCEDURE OPTIONS(NOSAVE,NOSAVEAREA);                          0728
FRELG    DS    0H                                                  0729
*   RFY                                                            0729
*    (R14,                                                         0729
*     R15,                                                         0729
*     R10) RSTD;                                                   0729
*   R10=R14;                        /* SAVE RETURN ADDR              */
         LR    R10,R14                                             0730
*   IF ASHLGEQ=ZERO THEN                                           0731
         L     @12,ASHLGEQ(,RSMHDPTR)                              0731
         LTR   @12,@12                                             0731
         BNZ   @RF00731                                            0731
*     R15=CODE04;                   /* ASMHD LGE QUEUE EMPTY         */
         LA    R15,4                                               0732
*   ELSE                                                           0733
*     DO;                           /* ASMHD LGE Q IS NOT EMPTY      */
         B     @RC00731                                            0733
@RF00731 DS    0H                                                  0734
*       R15=CODE00;                 /* INTIALIZE RETURN CODE TO ZERO */
         SLR   R15,R15                                             0734
*       IF ASHLGEQ=LGEPTR THEN                                     0735
         C     LGEPTR,ASHLGEQ(,RSMHDPTR)                           0735
         BNE   @RF00735                                            0735
*         ASHLGEQ=LGENEXT;          /* IF THE LGE IS THE FIRST ON THE
*                                      Q SET THE Q ANCHOR TO THE NEXT
*                                      LGE                           */
*                                                                  0736
         L     @12,LGENEXT(,LGEPTR)                                0736
         ST    @12,ASHLGEQ(,RSMHDPTR)                              0736
*       /*************************************************************/
*       /*                                                           */
*       /* SEARCH THE ASM HEADER QUEUE FOR THE LGE TO BE FREED       */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0737
*       ELSE                                                       0737
*         DO;                       /* LGE NOT FIRST ON Q            */
         B     @RC00735                                            0737
@RF00735 DS    0H                                                  0738
*           RFY                                                    0738
*             FOUNDLGE RSTD;                                       0738
*           RFY                                                    0739
*             LGE BASED(FOUNDLGE);                                 0739
*           FOUNDLGE=ASHLGEQ;       /* OBTAIN ADDR FIRST ELEMENT ON Q*/
         L     FOUNDLGE,ASHLGEQ(,RSMHDPTR)                         0740
*           DO WHILE LGENEXT^=LGEPTR&LGENEXT^=ZERO;/* LOOP THRU THE
*                                      LGES UNTIL THE ONE TO BE    0741
*                                      RELEASED IS FOUND OR NONE ARE
*                                      LEFT                          */
         B     @DE00741                                            0741
@DL00741 DS    0H                                                  0742
*             FOUNDLGE=LGENEXT;     /* OBTAIN ADDR NEXT LGE          */
         L     FOUNDLGE,LGENEXT(,FOUNDLGE)                         0742
*           END;                    /* LOOP THRU LGES                */
@DE00741 L     @00,LGENEXT(,FOUNDLGE)                              0743
         CR    @00,LGEPTR                                          0743
         BE    @DC00741                                            0743
         LTR   @00,@00                                             0743
         BNZ   @DL00741                                            0743
@DC00741 DS    0H                                                  0744
*           IF LGENEXT^=ZERO THEN                                  0744
         L     @00,LGENEXT(,FOUNDLGE)                              0744
         LTR   @00,@00                                             0744
         BZ    @RF00744                                            0744
*             LGENEXT=LGEPTR->LGENEXT;/* DEQUEUES THE LGE, SETS NEXT
*                                      OF PREVIOUS LGE TO NEXT OF LGE*/
         L     @00,LGENEXT(,LGEPTR)                                0745
         ST    @00,LGENEXT(,FOUNDLGE)                              0745
*           ELSE                                                   0746
*             R15=CODE04;           /* LGE NOT FOUND                 */
         B     @RC00744                                            0746
@RF00744 LA    R15,4                                               0746
*           RFY                                                    0747
*             FOUNDLGE UNRSTD;                                     0747
@RC00744 DS    0H                                                  0748
*         END;                      /* LGE NOT FIRST ON Q            */
*     END;                          /* ASMHD LGE Q IS NOT EMPTY      */
@RC00735 DS    0H                                                  0750
*   IF R15=CODE04 THEN                                             0750
@RC00731 C     R15,@CF00051                                        0750
         BNE   @RF00750                                            0750
*     DO;                           /* LGE NOT FOUND OR Q IS EMPTY   */
*       RFY                                                        0752
*         R11 RSTD;                                                0752
*       R11=ADDR(ASHLOCK);          /* OBTAIN ASM LOCKWORD           */
         LA    R11,ASHLOCK(,RSMHDPTR)                              0753
*       GEN REFS(R11);                                             0754
*              /* FREE THE ASM CLASS LOCK */
FREASM2  SETLOCK  RELEASE,TYPE=ASM,ADDR=(11),                         **
               RELATED=(VIO,ILRGOS(GETASM1/2))
*       RFY                                                        0755
*         R11 UNRSTD;                                              0755
*     END;                          /* END LGE NOT FOUND OR Q IS   0756
*                                      EMPTY                         */
*                                                                  0757
*   /*****************************************************************/
*   /*                                                               */
*   /* THE LGE WAS FOUND AND DEQUEUED. THE SALLOC LOCK IS OBTAINED.  */
*   /* THE LGVTE IS DETERMINED AND RESTORED TO THE LGVT AVAILABLE    */
*   /* QUEUE. THE LGE IS THEN FREED.                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0757
*   ELSE                                                           0757
*     DO;                           /* LGE WAS FOUND                 */
         B     @RC00750                                            0757
@RF00750 DS    0H                                                  0758
*       RFY                                                        0758
*         LGE BASED(LGEPTR);                                       0758
*       LGEPROCF=ZERO;              /* CLEAR THE FIRST AND           */
         SLR   @12,@12                                             0759
         ST    @12,LGEPROCF(,LGEPTR)                               0759
*       LGEPROCL=ZERO;              /* LAST AIA POINTERS OF THE LGE  */
*                                                                  0760
         ST    @12,LGEPROCL(,LGEPTR)                               0760
*       /*************************************************************/
*       /*                                                           */
*       /* RELEASE THE ASM LOCK AND OBTAIN THE SALLOC LOCK. R13 WILL */
*       /* INDICATE WHETHER THE SALLOC LOCK WAS OBTAINED HERE, OR    */
*       /* HELD BY THE CALLER AS WHEN RECOVERY INVOKES THIS ROUTINE. */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0761
*       RFY                                                        0761
*        (R11,                                                     0761
*         R13) RSTD;                                               0761
*       R11=ADDR(ASHLOCK);          /* OBTAIN ADDR ASM LOCKWORD      */
         LA    R11,ASHLOCK(,RSMHDPTR)                              0762
*       GEN REFS(R11);                                             0763
*              /* RELEASE ASM LOCK OBTAIN SALLOC LOCK */
FREASM3  SETLOCK  RELEASE,TYPE=ASM,ADDR=(11),                         **
               RELATED=(VIO,ILRGOS(GETASM1/2))
GETSAL2  SETLOCK  OBTAIN,TYPE=SALLOC,MODE=UNCOND,                     **
               RELATED=(VIO,ILRGOS(FRESAL2))
*       R14=R10;                    /* RESTORE RETURN ADDR           */
         LR    R14,R10                                             0764
*       RFY                                                        0765
*        (LGVTPTR,                                                 0765
*         LGVTEPTR) RSTD;                                          0765
*                                                                  0765
*       /*************************************************************/
*       /*                                                           */
*       /* INITIALIZE THE LGVTE AND MAKE IT AVAILABLE AGAIN. FREE THE*/
*       /* LGE AND RETURN TO THE CALLER.                             */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0766
*       LGVTPTR=ASMLGVT;            /* OBTAIN ADDR LGVT              */
         L     LGVTPTR,ASMLGVT(,ASMVTPTR)                          0766
*       LGVTEPTR=ADDR(LGVENTRS(LGELGID+ONE));/* LGID GIVES OFFSET  0767
*                                      INTO LGVT                     */
         L     @12,LGELGID(,LGEPTR)                                0767
         LR    @00,@12                                             0767
         SLA   @00,3                                               0767
         LR    LGVTEPTR,@00                                        0767
         LA    LGVTEPTR,LGVENTRS(LGVTEPTR,LGVTPTR)                 0767
*       LGVELGID=LGELGID;           /* PUT THE LGID IN THE LGVTE     */
         ST    @12,LGVELGID(,LGVTEPTR)                             0768
*       LGVENEXT=LGVLGVEP;          /* Q THE AVAILABLE Q TO THE LGVTE*/
         L     @12,LGVLGVEP(,LGVTPTR)                              0769
         ST    @12,LGVENEXT(,LGVTEPTR)                             0769
*       LGVLGVEP=LGVTEPTR;          /* MAKE THE LGVTE THE FIRST    0770
*                                      ELEMENT ON THE AVAILABLE QUEUE*/
         ST    LGVTEPTR,LGVLGVEP(,LGVTPTR)                         0770
*       RFY                                                        0771
*        (LGVTPTR,                                                 0771
*         LGVTEPTR) UNRSTD;                                        0771
*       RFY                                                        0772
*        (R1AREA,                                                  0772
*         R12) RSTD;                                               0772
*       R1AREA=LGEPTR;              /* ADDR AREA TO BE FREED         */
         LR    R1AREA,LGEPTR                                       0773
*       R12=LENGTH(LGE);            /* OBTAIN LENGTH AREA TO BE FREED*/
         LA    R12,24                                              0774
*       R10=R14;                    /* STORE RETURN ADDR ACROSS    0775
*                                      SETLOCK                       */
         LR    R10,R14                                             0775
*       R11=R4;                     /* STORE R4, DESTROYED IN      0776
*                                      FREEMAIN                      */
         LR    R11,R4                                              0776
*       GEN REFS(R1AREA,R12,R13) SETS(R3,R4);                      0777
*                                     /* FREE LGE AND RELEASE SALLOC *
         FREEMAIN RC,LV=(R12),A=(R1AREA),SP=245,BRANCH=(YES,GLOBAL)
         LR       R4,R11   RESTORE R4, DESTROYED IN FREEMAIN
         LTR      R13,R13  THE SALLOC LOCK IS ONLY RELEASED IF IT WAS
         BNZ      SKIPREL  OBTAINED IN THIS ROUTINE, INDICATED BY R13
FRESAL2  SETLOCK  RELEASE,TYPE=SALLOC,RELATED=(VIO,ILRGOS(GETSAL2))
SKIPREL  DS       0H
*       RFY                                                        0778
*        (R1AREA,                                                  0778
*         R12,                                                     0778
*         R13) UNRSTD;                                             0778
*       ASMVTPTR=CVTASMVT;          /* RESTORE R3, DESTROYED IN    0779
*                                      FREEMAIN                      */
         L     @12,CVTPTR                                          0779
         L     ASMVTPTR,CVTASMVT(,@12)                             0779
*       R15=CODE00;                 /* ZERO RETURN CODE              */
         SLR   R15,R15                                             0780
*     END;                          /* LGE WAS FOUND                 */
*   RFY                                                            0782
*     R14 RSTD;                                                    0782
@RC00750 DS    0H                                                  0783
*   R14=R10;                        /* RESTORE THE RETURN ADDR       */
         LR    R14,R10                                             0783
*   END FRELG;                                                     0784
@EL00005 DS    0H                                                  0784
@EF00005 DS    0H                                                  0784
@ER00005 BR    @14                                                 0784
*   END ILRGOS                                                     0785
*                                                                  0785
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (ILRACA  )                                       */
*/*%INCLUDE SYSLIB  (ILRACE  )                                       */
*/*%INCLUDE SYSLIB  (IHAASCB )                                       */
*/*%INCLUDE SYSLIB  (IHARSMHD)                                       */
*/*%INCLUDE SYSLIB  (ILRASMHD)                                       */
*/*%INCLUDE SYSLIB  (ILRASMVT)                                       */
*/*%INCLUDE SYSLIB  (ILRASPCT)                                       */
*/*%INCLUDE SYSLIB  (ILRATA  )                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (ILREPATH)                                       */
*/*%INCLUDE SYSLIB  (IHAFRRS )                                       */
*/*%INCLUDE SYSLIB  (ILRLGE  )                                       */
*/*%INCLUDE SYSLIB  (ILRLGVT )                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (IHASRB  )                                       */
*/*%INCLUDE SYSLIB  (IHAWSAVT)                                       */
*                                                                  0785
*       ;                                                          0785
         B     @EL00001                                            0785
@DATA    DS    0H
@CH01810 DC    H'1088'
@DATD    DSECT
         DS    0F
ILRGOS   CSECT
         DS    0F
@CF00040 DC    F'1'
@CF00051 DC    F'4'
@CF00438 DC    F'28'
@CF00507 DC    F'40'
@CF01405 DC    F'44'
@CF01282 DC    F'512'
@CF01675 DC    XL4'00040000'
@CF01677 DC    XL4'FFFFFFFF'
@CF01812 DC    XL4'0000FFFF'
@DATD    DSECT
         DS    0D
SLOTS    DS    F
RTNADDR  DS    A
RTNCODE  DS    F
SAVASPCT DS    A
SAVLGVTE DS    A
SQALEFT  DS    A
R4SAVE   DS    F
R7SAVE   DS    F
EPATH    DS    CL52
         ORG   EPATH
EPAVSAM  DS    CL52
         ORG   EPAVSAM
EPAOWKA  DS    AL4
EPAVWKA  DS    AL4
         ORG   EPAVWKA
EPATMWKA DS    AL4
         ORG   EPATMWKA
EPASWKA  DS    AL4
         ORG   EPAVSAM+8
EPAAASP  DS    AL4
         ORG   EPAAASP
EPADSLST DS    AL4
         ORG   EPAVSAM+12
EPABASP  DS    AL4
         ORG   EPABASP
EPATMIBA DS    AL4
         ORG   EPAVSAM+16
EPARASP  DS    AL4
         ORG   EPARASP
EPATMACB DS    AL4
         ORG   EPAVSAM+20
EPARTYRG DS    AL4
         ORG   EPARTYRG
EPABKSLT DS    FL4
         ORG   EPABKSLT
EPATMISV DS    AL4
         ORG   EPAVSAM+24
EPAFLAG1 DS    BL1
         ORG   EPAFLAG1
EPAVSAMI DS    BL1
EPAGRPOP EQU   EPAFLAG1+0
         ORG   EPAGRPOP
EPARLG   EQU   EPAGRPOP+0
EPASAVE  EQU   EPAGRPOP+0
EPAACT   EQU   EPAGRPOP+0
         ORG   EPAFLAG1+0
EPAACASR EQU   EPAFLAG1+0
EPAASGN  EQU   EPAFLAG1+0
EPAUNSAV EQU   EPAFLAG1+0
EPARPLB  EQU   EPAFLAG1+0
         ORG   EPAVSAM+25
EPAFLAG2 DS    BL1
         ORG   EPAFLAG2
EPATMXIT DS    BL1
EPAWARM  EQU   EPAFLAG2+0
EPACOLD  EQU   EPAFLAG2+0
EPABUILD EQU   EPAFLAG2+0
EPAMAST  EQU   EPAFLAG2+0
EPATMI   EQU   EPAFLAG2+0
EPARECUR EQU   EPAFLAG2+0
@NM00019 EQU   EPAFLAG2+0
         ORG   EPAVSAM+26
EPALSIZE DS    FL2
EPALGVTP DS    AL4
EPALGEP  DS    AL4
EPASRB   DS    AL4
EPAACE   DS    AL4
EPARBASP DS    AL4
EPARSIZE DS    FL2
@NM00020 DS    FL2
         ORG   EPATH+52
SAVAREA  DS    CL72
WKATA    DS    CL24
WKBUFCON DS    CL12
INTFLAG  DS    CL1
         ORG   INTFLAG
REQASPCT DS    BL1
IDEXISTS EQU   INTFLAG+0
@NM00051 EQU   INTFLAG+0
         ORG   INTFLAG+1
ILRGOS   CSECT
         NOPR  ((@ENDDATD-@DATD)/257*16)
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV01708 DC    V(ILRCGOSE)
@CV01709 DC    V(ILRGOS01)
         DS    0D
@CC01687 DC    C'ASPC'
@CC01689 DC    C'SRB '
@CB01681 DC    X'0000000000000000'
@DATD    DSECT
ESTAELST ESTAE MF=L            LIST FORM OF ESTAE
POSTLIST POST  MF=L            LIST FORM OF POST
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
ILRGOS   CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
ACAPTR   EQU   @09
ACEPTR   EQU   @07
ASCBPTR  EQU   @10
RSMHDPTR EQU   @02
ASMVTPTR EQU   @03
ASPCTPTR EQU   @12
ATAPTR   EQU   @04
LGEPTR   EQU   @05
LGVTPTR  EQU   @11
LGVTEPTR EQU   @10
SRBPTR   EQU   @11
R6BASE   EQU   @06
WKSAV@   EQU   @08
BUFPTR   EQU   @12
GETSIZE  EQU   @12
ECBPTR   EQU   @11
ENTRYCNT EQU   @12
FOUNDLGE EQU   @12
FOUNDACE EQU   @10
R1AREA   EQU   @01
R0       EQU   @00
R1       EQU   @01
R3       EQU   @03
R4       EQU   @04
R7       EQU   @07
R8       EQU   @08
R10      EQU   @10
R11      EQU   @11
R12      EQU   @12
R13      EQU   @13
R14      EQU   @14
R15      EQU   @15
R2       EQU   @02
R5       EQU   @05
R6       EQU   @06
R9       EQU   @09
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
FLCCVT   EQU   FLCICCW2
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSATOLD  EQU   PSA+540
PSAAOLD  EQU   PSA+548
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
ACA      EQU   0
ACAOP    EQU   ACA
ACAFLG1  EQU   ACA+1
ACAFSYM  EQU   ACAFLG1
ACAASID  EQU   ACA+2
ACALGN   EQU   ACA+8
ACALPID  EQU   ACALGN
ACALGID  EQU   ACALPID
ACARPN   EQU   ACALPID+4
ACASYM   EQU   ACA+16
ACATOLP  EQU   ACASYM
ACATOLGI EQU   ACATOLP
ACAMAXPN EQU   ACATOLGI
ACE      EQU   0
ACEFQPA  EQU   ACE
ACEBQPA  EQU   ACE+4
ACEOP    EQU   ACE+8
ACEFLG1  EQU   ACE+9
ACEUSYM  EQU   ACEFLG1
ACEFLG3  EQU   ACE+11
ACEGRPRQ EQU   ACEFLG3
ACELGE   EQU   ACE+12
ACELGN   EQU   ACE+16
ACELGID  EQU   ACELGN
ACERPN   EQU   ACELGN+4
ACESYM   EQU   ACE+24
ACESRCID EQU   ACESYM
ACEECB   EQU   ACE+32
ASCB     EQU   0
ASCBSUPC EQU   ASCB+16
ASCBASID EQU   ASCB+36
ASCBRSM  EQU   ASCB+52
ASCBFW1  EQU   ASCB+100
ASCBRCTF EQU   ASCBFW1+2
ASCBFLG1 EQU   ASCBFW1+3
ASCBDSP1 EQU   ASCB+114
ASCBFLG2 EQU   ASCB+115
ASCBVSC  EQU   ASCB+120
ASCBLKGP EQU   ASCB+128
ASCBSRQ  EQU   ASCB+180
ASCBSRQ1 EQU   ASCBSRQ
ASCBSRQ2 EQU   ASCBSRQ+1
ASCBSRQ3 EQU   ASCBSRQ+2
ASCBSRQ4 EQU   ASCBSRQ+3
RSMHD    EQU   0
RSMFLG1  EQU   RSMHD+12
RSMQS    EQU   RSMHD+20
RSMLFQ   EQU   RSMQS
RSMLSQA  EQU   RSMQS+4
RSMLIOQ  EQU   RSMQS+8
RSMASMHD EQU   RSMHD+40
ASMVT    EQU   0
ASMFLAG1 EQU   ASMVT
ASMFLAG2 EQU   ASMVT+1
ASMNOSAV EQU   ASMFLAG2
ASMSTAGQ EQU   ASMVT+32
ASMPCCWQ EQU   ASMVT+64
ASMBKSLT EQU   ASMVT+108
ASMSLOTV EQU   ASMVT+128
ASMLGVT  EQU   ASMVT+132
ASMSTGXA EQU   ASMVT+136
ASMCINV  EQU   ASMVT+140
ASMLSAI  EQU   ASMVT+144
ASMGOSQS EQU   ASMVT+152
ASMGOSWT EQU   ASMGOSQS
ASMGOSWK EQU   ASMGOSQS+4
ASMREQCT EQU   ASMVT+160
ASMPSRBC EQU   ASMVT+216
ASMVRMTR EQU   ASMVT+220
ASMPEX   EQU   ASMVT+224
ASMPSAV  EQU   ASMVT+244
ASMPACT  EQU   ASMVT+248
ASMPRLG  EQU   ASMVT+252
ASMBWKPC EQU   ASMVT+312
ASMACEPC EQU   ASMVT+344
ASMWKSA1 EQU   ASMVT+368
ASMWKSA2 EQU   ASMVT+448
ASMWKSA3 EQU   ASMVT+528
ASMWKSA4 EQU   ASMVT+608
ASMWKSA5 EQU   ASMVT+688
ASMPOOLS EQU   0
ASMCPAVQ EQU   ASMPOOLS+8
ASMCPAVL EQU   ASMCPAVQ
ASMCPRSQ EQU   ASMPOOLS+16
ASPCT    EQU   0
ASPHDR   EQU   ASPCT
ASPIDENT EQU   ASPHDR
ASPLGID  EQU   ASPHDR+4
ASPBKEY  EQU   ASPHDR+8
ASPSSYM  EQU   ASPBKEY
ASPASCB  EQU   ASPHDR+20
ASPLGE   EQU   ASPHDR+24
ASPFLAG  EQU   ASPHDR+28
ASPMAXPN EQU   ASPHDR+32
ASPBKSLT EQU   ASPHDR+36
ASPEXTSN EQU   0
ASPEHDR  EQU   ASPEXTSN
ASPEXKEY EQU   ASPEHDR+8
ASPSECTA EQU   ASPEXTSN+64
ASPEXPTR EQU   0
ASPLPME  EQU   0
ASPLPFLG EQU   ASPLPME
ASPVLSID EQU   ASPLPME+1
LPMEPTR  EQU   0
ATA      EQU   0
ATAMODID EQU   ATA
ATASFLGS EQU   ATA+1
ATARFLGS EQU   ATA+4
ATARCRSN EQU   ATA+6
ATARCODE EQU   ATA+7
ATACLEAR EQU   ATA+8
ATAWORKA EQU   ATACLEAR
ATAEPATH EQU   ATACLEAR+4
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTBRET  EQU   CVTMAP+82
CVTDCB   EQU   CVTMAP+116
CVTIERLC EQU   CVTMAP+144
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
FRRS     EQU   0
FRRSHEAD EQU   FRRS
FRRSPTR  EQU   0
FRRSENTR EQU   0
FRRSFLGS EQU   FRRSENTR+4
FRRSFLG1 EQU   FRRSFLGS
FRREPTR  EQU   0
LGE      EQU   0
LGEPROCQ EQU   LGE
LGEPROCF EQU   LGEPROCQ
LGEPROCL EQU   LGEPROCQ+4
LGEFLAG1 EQU   LGE+8
LGEWRKPD EQU   LGEFLAG1
LGEGRINP EQU   LGEFLAG1
LGERELLG EQU   LGEFLAG1
LGESAVRQ EQU   LGEFLAG1
LGESLTCT EQU   LGE+10
LGEASPCT EQU   LGE+12
LGENEXT  EQU   LGE+16
LGELGID  EQU   LGE+20
LGVT     EQU   0
LGVLGVEP EQU   LGVT+4
LGVMAXLG EQU   LGVT+8
LGVSIZE  EQU   LGVT+12
LGVENTRS EQU   LGVT+16
LGVTE    EQU   0
LGVLGVTE EQU   LGVTE
LGVELGEP EQU   LGVLGVTE
LGVENEXT EQU   LGVELGEP
LGVEASCB EQU   LGVLGVTE+4
LGVELGID EQU   LGVEASCB
SRBSECT  EQU   0
SRB      EQU   SRBSECT
SRBID    EQU   SRB
SRBASCB  EQU   SRB+8
SRBFLC   EQU   SRB+12
SRBPASID EQU   SRBFLC+2
SRBEP    EQU   SRB+20
SRBRMTR  EQU   SRB+24
SRBPRIOR EQU   SRB+37
WSAG     EQU   0
ILRSAV   EQU   0
ILRACT   EQU   0
ILRRLG   EQU   0
WKAREA   EQU   0
BUFCONBK EQU   0
BUFCHAIN EQU   BUFCONBK
BUFASCB  EQU   BUFCONBK+4
BUFACE   EQU   BUFCONBK+8
SLOTV    EQU   0
ILRPEX   EQU   0
GMACELL  EQU   0
GMANEXT  EQU   GMACELL
DUMMY    EQU   RSMASMHD
ASMHD    EQU   DUMMY
ASHFLAG1 EQU   ASMHD
ASHFLAG2 EQU   ASMHD+1
ASHSCHED EQU   ASHFLAG2
ASHLOCK  EQU   ASMHD+20
ASHVSRBP EQU   ASMHD+24
ASHLGEQ  EQU   ASMHD+28
ASM1WKSV EQU   ASMWKSA1
ASM1RGSV EQU   ASM1WKSV
ASM1WRKA EQU   ASM1WKSV+60
ASM2WKSV EQU   ASMWKSA2
ASM2WRKA EQU   ASM2WKSV+52
ASM2FLGS EQU   ASM2WRKA+12
ASM3WKSV EQU   ASMWKSA3
ASM4WKSV EQU   ASMWKSA4
ASM4RGSV EQU   ASM4WKSV
ASM5WKSV EQU   ASMWKSA5
ASM5RGSV EQU   ASM5WKSV
ASPASST  EQU   ASPSECTA
CVTPTR   EQU   FLCCVT
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTSPSA  EQU   CVTS01+336
CVTASMVT EQU   CVTS01+356
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
PSARSVTE EQU   PSARSVT
RTRYRGSV EQU   SAVAREA+12
ASPLPMEE EQU   ASPSECTA
FLC      EQU   PSA
*                                      START UNREFERENCED COMPONENTS
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTSUSP  EQU   CVTS01+692
CVTT6SVC EQU   CVTS01+688
CVTCDAL  EQU   CVTS01+684
CVTTCTL  EQU   CVTS01+680
CVTRSUME EQU   CVTS01+676
CVTJTERM EQU   CVTS01+672
CVTASMRM EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
ASPASSTE EQU   ASPASST
ASM5FLGS EQU   ASM5WKSV+64
ASM5AIA  EQU   ASM5WKSV+60
ASM5GCTR EQU   ASM5WKSV+56
ASM5SR14 EQU   ASM5WKSV+52
@NM00007 EQU   ASM5RGSV+4
ASM5RG2  EQU   ASM5RGSV
@NM00006 EQU   ASM4RGSV+4
ASM4RG2  EQU   ASM4RGSV
ASM3SR13 EQU   ASM3WKSV+28
ASM3R14B EQU   ASM3WKSV+24
ASM3R14A EQU   ASM3WKSV+20
ASM3GRPA EQU   ASM3WKSV+16
ASM3TMPA EQU   ASM3WKSV+12
ASM3PIOP EQU   ASM3WKSV+8
ASM3GENQ EQU   ASM3WKSV+4
ASM3SWPQ EQU   ASM3WKSV
ASM2SR14 EQU   ASM2WRKA+16
@NM00005 EQU   ASM2WRKA+13
ASM2WFLG EQU   ASM2FLGS
ASM2RFLG EQU   ASM2FLGS
ASM2DUPQ EQU   ASM2WRKA+8
ASM2CAQ  EQU   ASM2WRKA+4
ASM2PAQ  EQU   ASM2WRKA
ASM2RGSV EQU   ASM2WKSV
ASM1NXTA EQU   ASM1WRKA+4
ASM1ASCB EQU   ASM1WRKA
ASM1RG15 EQU   ASM1RGSV+56
@NM00004 EQU   ASM1RGSV+4
ASM1RG1  EQU   ASM1RGSV
ASHCAPQ  EQU   ASMHD+16
ASHSWAPQ EQU   ASMHD+12
ASHIOCNT EQU   ASMHD+8
ASHBKSLT EQU   ASMHD+4
ASHSWPCT EQU   ASMHD+2
ASHRSV12 EQU   ASHFLAG2
ASHRSV11 EQU   ASHFLAG2
ASHRSV10 EQU   ASHFLAG2
ASHRSV9  EQU   ASHFLAG2
ASHRSV8  EQU   ASHFLAG2
ASHRSV7  EQU   ASHFLAG2
ASHRSV13 EQU   ASHFLAG2
ASHRSV6  EQU   ASHFLAG1
ASHRSV5  EQU   ASHFLAG1
ASHRSV4  EQU   ASHFLAG1
ASHRSV3  EQU   ASHFLAG1
ASHRSV2  EQU   ASHFLAG1
ASHPERME EQU   ASHFLAG1
ASHCAPER EQU   ASHFLAG1
ASHSWPOT EQU   ASHFLAG1
WSAGSCHE EQU   WSAG+40
WSAGREST EQU   WSAG+36
WSAGNQDQ EQU   WSAG+32
WSAGMEMT EQU   WSAG+28
WSAGOPTM EQU   WSAG+24
WSAGSTAT EQU   WSAG+20
WSAGEMS0 EQU   WSAG+16
WSAGSSRS EQU   WSAG+12
WSAGRSM  EQU   WSAG+8
WSAGGMFM EQU   WSAG+4
WSAGPGIO EQU   WSAG
@NM00050 EQU   SRB+40
@NM00049 EQU   SRB+38
SRBPKF   EQU   SRB+36
SRBSAVE  EQU   SRB+32
SRBPARM  EQU   SRB+28
SRBPTCB  EQU   SRBFLC+4
SRBCPAFF EQU   SRBFLC
SRBFLNK  EQU   SRB+4
LGVIDENT EQU   LGVT
@NM00024 EQU   LGE+24
@NM00023 EQU   LGE+9
LGERSV5  EQU   LGEFLAG1
LGERSV4  EQU   LGEFLAG1
LGERSV3  EQU   LGEFLAG1
LGERSV2  EQU   LGEFLAG1
FRRSPARM EQU   FRRSENTR+8
@NM00022 EQU   FRRSFLGS+1
@NM00021 EQU   FRRSFLG1
FRRSNEST EQU   FRRSFLG1
FRRSRCUR EQU   FRRSFLG1
FRRSFRRA EQU   FRRSENTR
FRRSENTS EQU   FRRS+84
FRRSRTMW EQU   FRRS+16
FRRSCURR EQU   FRRSHEAD+12
FRRSELEN EQU   FRRSHEAD+8
FRRSLAST EQU   FRRSHEAD+4
FRRSEMP  EQU   FRRSHEAD
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00018 EQU   CVTFIX+248
@NM00017 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTRSV99 EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTRSV28 EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTHEAD  EQU   CVTMAP+160
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTIOQET EQU   CVTMAP+120
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
ATAWORD2 EQU   ATACLEAR+12
ATAWORD1 EQU   ATACLEAR+8
ATARCRF8 EQU   ATARCRSN
ATARCRF7 EQU   ATARCRSN
ATARCRF6 EQU   ATARCRSN
ATARCRF5 EQU   ATARCRSN
ATARCRF4 EQU   ATARCRSN
ATARCRF3 EQU   ATARCRSN
ATARCRF2 EQU   ATARCRSN
ATARCRF1 EQU   ATARCRSN
ATARSV2  EQU   ATARFLGS
ATABADPK EQU   ATARFLGS
ATASCCWP EQU   ATARFLGS
ATASGNST EQU   ATARFLGS
ATARSV1  EQU   ATASFLGS+1
ATASRT   EQU   ATASFLGS+1
ATASWPDR EQU   ATASFLGS+1
ATATRPAG EQU   ATASFLGS+1
ATASWAP  EQU   ATASFLGS+1
ATAPAGCM EQU   ATASFLGS
ATAPAGIO EQU   ATASFLGS
ATAPOS   EQU   ATASFLGS
ATAPCOMP EQU   ATASFLGS
ATAVIOCM EQU   ATASFLGS
ATASCOMP EQU   ATASFLGS
ATASLSQA EQU   ATASFLGS
ATAQIOE  EQU   ATASFLGS
ASPSLOT  EQU   ASPVLSID+1
ASPPRTNN EQU   ASPVLSID
@NM00016 EQU   ASPLPFLG
ASPLSVRP EQU   ASPLPFLG
ASPLIOER EQU   ASPLPFLG
ASPLOPIN EQU   ASPLPFLG
ASPLSAVE EQU   ASPLPFLG
ASPLVALD EQU   ASPLPFLG
@NM00015 EQU   ASPEXTSN+1088
@NM00014 EQU   ASPEHDR+24
ASPASSTI EQU   ASPEHDR+22
@NM00013 EQU   ASPEHDR+21
ASPASSTN EQU   ASPEHDR+20
ASPEXTNM EQU   ASPEXKEY+8
ASPESSYM EQU   ASPEXKEY
@NM00012 EQU   ASPEHDR+4
ASPEIDNT EQU   ASPEHDR
@NM00011 EQU   ASPCT+1088
ASPLPMES EQU   ASPCT+64
ASPASSTP EQU   ASPCT+48
ASPAEXCT EQU   ASPHDR+46
ASPLEXCT EQU   ASPHDR+44
ASPSAVCT EQU   ASPHDR+40
@NM00010 EQU   ASPHDR+29
@NM00009 EQU   ASPFLAG
ASPSAVRP EQU   ASPFLAG
ASPSAVED EQU   ASPFLAG
@NM00008 EQU   ASPBKEY+8
ASMCPRES EQU   ASMCPRSQ+4
ASMCPTAK EQU   ASMCPRSQ
ASMCPCNT EQU   ASMCPAVQ+4
ASMCPEXT EQU   ASMPOOLS+6
ASMCPSIZ EQU   ASMPOOLS+4
ASMCPID  EQU   ASMPOOLS
ASMRSV12 EQU   ASMVT+1000
ASMSAVE  EQU   ASMVT+928
ASMWKSA7 EQU   ASMVT+848
ASMWKSA6 EQU   ASMVT+768
ASMSWKPC EQU   ASMVT+328
ASMIOEPC EQU   ASMVT+296
ASMRSV10 EQU   ASMVT+280
ASMPVACE EQU   ASMVT+276
ASMPIOFR EQU   ASMVT+272
ASMPVACQ EQU   ASMVT+268
ASMPMSGS EQU   ASMVT+264
ASMPMSG0 EQU   ASMVT+260
ASMPFRLG EQU   ASMVT+256
ASMPCMP  EQU   ASMVT+240
ASMPCMPA EQU   ASMVT+236
ASMPCMPN EQU   ASMVT+232
ASMPCMPD EQU   ASMVT+228
ASMPSRMT EQU   ASMVT+212
ASMPSWPD EQU   ASMVT+208
ASMPTM   EQU   ASMVT+204
ASMPFRSW EQU   ASMVT+200
ASMPFRSL EQU   ASMVT+196
ASMPQIOE EQU   ASMVT+192
ASMRSV8  EQU   ASMVT+184
ASMTASCB EQU   ASMVT+180
ASMRLGWQ EQU   ASMVT+176
ASMRLGRQ EQU   ASMVT+172
ASMTMECB EQU   ASMVT+168
ASMTCBPT EQU   ASMVT+164
ASMLSAIH EQU   ASMLSAI+4
ASMLSAIL EQU   ASMLSAI
ASMERRS  EQU   ASMVT+124
ASMNVSC  EQU   ASMVT+120
ASMVSC   EQU   ASMVT+116
ASMSLOTS EQU   ASMVT+112
ASMRSV7  EQU   ASMVT+92
ASMPSRB  EQU   ASMVT+88
ASMSRBCT EQU   ASMVT+84
ASMIOCNT EQU   ASMVT+80
ASMBURST EQU   ASMVT+76
ASMPCCWN EQU   ASMVT+72
ASMPCCWC EQU   ASMPCCWQ+4
ASMPCCWA EQU   ASMPCCWQ
ASMRSV6  EQU   ASMVT+48
ASMIORQC EQU   ASMVT+44
ASMIORQR EQU   ASMVT+40
ASMSTAGL EQU   ASMSTAGQ+4
ASMSTAGF EQU   ASMSTAGQ
ASMRSV5  EQU   ASMVT+28
ASMMSGBF EQU   ASMVT+24
ASMEREC  EQU   ASMVT+20
ASMTRPAG EQU   ASMVT+16
ASMGOS   EQU   ASMVT+12
ASMPART  EQU   ASMVT+8
ASMSART  EQU   ASMVT+4
ASMRSV4  EQU   ASMVT+2
ASMWARM  EQU   ASMFLAG2
ASMQUICK EQU   ASMFLAG2
ASMNOTPT EQU   ASMFLAG2
ASMNOTMR EQU   ASMFLAG2
ASMCALLQ EQU   ASMFLAG2
ASMPLPAS EQU   ASMFLAG1
ASMCOMMF EQU   ASMFLAG1
ASMPLPAF EQU   ASMFLAG1
ASMNODPX EQU   ASMFLAG1
ASMRSV1  EQU   ASMFLAG1
ASMNOLCL EQU   ASMFLAG1
ASMNOCWQ EQU   ASMFLAG1
ASMDUPLX EQU   ASMFLAG1
RSMFOEQ  EQU   RSMHD+36
RSMLIOQL EQU   RSMLIOQ+4
RSMLIOQF EQU   RSMLIOQ
RSMLSQAL EQU   RSMLSQA+2
RSMLSQAF EQU   RSMLSQA
RSMLFQL  EQU   RSMLFQ+2
RSMLFQF  EQU   RSMLFQ
RSMRSV2  EQU   RSMHD+16
RSMCNTFX EQU   RSMHD+14
RSMRSV1  EQU   RSMHD+13
@NM00003 EQU   RSMFLG1
RSMFAIL  EQU   RSMFLG1
RSMGFADD EQU   RSMFLG1
RSMCPNC  EQU   RSMFLG1
RSMCPNU  EQU   RSMFLG1
RSMGFAD  EQU   RSMFLG1
RSMIOCPC EQU   RSMFLG1
RSMIOCPU EQU   RSMFLG1
RSMASCB  EQU   RSMHD+8
RSMSPCT  EQU   RSMHD+4
RSMVSTO  EQU   RSMHD
ASCBEND  EQU   ASCB+208
ASCBSRBT EQU   ASCB+200
ASCBSWTL EQU   ASCB+196
ASCBRS14 EQU   ASCB+195
ASCBSMCT EQU   ASCB+194
ASCBRS12 EQU   ASCB+192
ASCBPCTT EQU   ASCB+188
ASCBVGTT EQU   ASCB+184
ASCBRV43 EQU   ASCBSRQ4
ASCBRV42 EQU   ASCBSRQ4
ASCBRV41 EQU   ASCBSRQ4
ASCBRV40 EQU   ASCBSRQ4
ASCBRV39 EQU   ASCBSRQ4
ASCBRV38 EQU   ASCBSRQ4
ASCBRV37 EQU   ASCBSRQ4
ASCBRV36 EQU   ASCBSRQ4
ASCBRV35 EQU   ASCBSRQ3
ASCBRV34 EQU   ASCBSRQ3
ASCBRV33 EQU   ASCBSRQ3
ASCBRV32 EQU   ASCBSRQ3
ASCBRV31 EQU   ASCBSRQ3
ASCBRV30 EQU   ASCBSRQ3
ASCBRV29 EQU   ASCBSRQ3
ASCBRV28 EQU   ASCBSRQ3
ASCBRV27 EQU   ASCBSRQ2
ASCBRV26 EQU   ASCBSRQ2
ASCBRV25 EQU   ASCBSRQ2
ASCBRV24 EQU   ASCBSRQ2
ASCBRV23 EQU   ASCBSRQ2
ASCBRV22 EQU   ASCBSRQ2
ASCBRV21 EQU   ASCBSRQ2
ASCBRV20 EQU   ASCBSRQ2
ASCBRV19 EQU   ASCBSRQ1
ASCBRV18 EQU   ASCBSRQ1
ASCBRV17 EQU   ASCBSRQ1
ASCBRV16 EQU   ASCBSRQ1
ASCBRV15 EQU   ASCBSRQ1
ASCBRV14 EQU   ASCBSRQ1
ASCBRV13 EQU   ASCBSRQ1
ASCBSTA  EQU   ASCBSRQ1
ASCBJBNS EQU   ASCB+176
ASCBJBNI EQU   ASCB+172
ASCBMCC  EQU   ASCB+168
ASCBRTWA EQU   ASCB+164
ASCBIQEA EQU   ASCB+160
ASCBXMPQ EQU   ASCB+156
ASCBRS01 EQU   ASCB+154
ASCBFMCT EQU   ASCB+152
ASCBOUXB EQU   ASCB+148
ASCBOUCB EQU   ASCB+144
ASCBMECB EQU   ASCB+140
ASCBQECB EQU   ASCB+136
ASCBLSQH EQU   ASCBLKGP+4
ASCBLOCK EQU   ASCBLKGP
ASCBTCBS EQU   ASCB+124
ASCBNVSC EQU   ASCB+122
ASCBSRBS EQU   ASCB+118
ASCBSSRB EQU   ASCB+116
ASCBRV06 EQU   ASCBFLG2
ASCBRV05 EQU   ASCBFLG2
ASCBRV04 EQU   ASCBFLG2
ASCBSNQS EQU   ASCBFLG2
ASCBS2S  EQU   ASCBFLG2
ASCBCEXT EQU   ASCBFLG2
ASCBPXMT EQU   ASCBFLG2
ASCBXMPT EQU   ASCBFLG2
ASCBRF07 EQU   ASCBDSP1
ASCBRF06 EQU   ASCBDSP1
ASCBRF05 EQU   ASCBDSP1
ASCBRF04 EQU   ASCBDSP1
ASCBRF03 EQU   ASCBDSP1
ASCBRF02 EQU   ASCBDSP1
ASCBFAIL EQU   ASCBDSP1
ASCBNOQ  EQU   ASCBDSP1
ASCBSWCT EQU   ASCB+112
ASCBASXB EQU   ASCB+108
ASCBTMCH EQU   ASCB+104
ASCBNSWP EQU   ASCBFLG1
ASCBTYP1 EQU   ASCBFLG1
ASCBSTND EQU   ASCBFLG1
ASCBABNT EQU   ASCBFLG1
ASCBTERM EQU   ASCBFLG1
ASCBS3S  EQU   ASCBFLG1
ASCBCMSH EQU   ASCBFLG1
ASCBTOFF EQU   ASCBFLG1
ASCBRF01 EQU   ASCBRCTF
ASCBTMLW EQU   ASCBRCTF
ASCBOUT  EQU   ASCBRCTF
ASCBWAIT EQU   ASCBRCTF
ASCBRV08 EQU   ASCBRCTF
ASCBFQU  EQU   ASCBRCTF
ASCBFRS  EQU   ASCBRCTF
ASCBTMNO EQU   ASCBRCTF
ASCBAFFN EQU   ASCBFW1
ASCBDUMP EQU   ASCB+96
ASCBRV44 EQU   ASCB+92
ASCBUBET EQU   ASCB+88
ASCBECB  EQU   ASCB+84
ASCBJSTL EQU   ASCB+80
ASCBEWST EQU   ASCB+72
ASCBEJST EQU   ASCB+64
ASCBTSB  EQU   ASCB+60
ASCBCSCB EQU   ASCB+56
ASCBLDA  EQU   ASCB+48
ASCBSTOR EQU   ASCB+44
ASCBDP   EQU   ASCB+43
ASCBRV07 EQU   ASCB+42
ASCBIOSM EQU   ASCB+40
ASCBSEQN EQU   ASCB+38
ASCBCPUS EQU   ASCB+32
ASCBSPL  EQU   ASCB+28
ASCBIOSP EQU   ASCB+24
ASCBSYNC EQU   ASCBSUPC+4
ASCBSVRB EQU   ASCBSUPC
ASCBCMSF EQU   ASCB+12
ASCBBWDP EQU   ASCB+8
ASCBFWDP EQU   ASCB+4
ASCBASCB EQU   ASCB
ASCBEGIN EQU   ASCB
@NM00002 EQU   ACE+40
ACESRBWK EQU   ACE+36
ACEAIAPT EQU   ACESYM+4
ACEVLSID EQU   ACESRCID+1
@NM00001 EQU   ACESRCID
ACETLPME EQU   ACERPN
ACERSV10 EQU   ACEFLG3
ACERSV9  EQU   ACEFLG3
ACERSV8  EQU   ACEFLG3
ACELPMEC EQU   ACEFLG3
ACERSV7  EQU   ACEFLG3
ACERSV6  EQU   ACEFLG3
ACEPRINO EQU   ACEFLG3
ACEFLG2  EQU   ACE+10
ACERSV5  EQU   ACEFLG1
ACERSV4  EQU   ACEFLG1
ACERSV3  EQU   ACEFLG1
ACERSV2  EQU   ACEFLG1
ACENOACT EQU   ACEFLG1
ACEOVRID EQU   ACEFLG1
ACETRPWT EQU   ACEFLG1
ACATORPN EQU   ACATOLP+4
ACAAIAP  EQU   ACARPN
ACAFLSID EQU   ACALGID
ACARSV4  EQU   ACA+4
ACARSV3  EQU   ACAFLG1
ACARSV2  EQU   ACAFLG1
ACARSV1  EQU   ACAFLG1
ACAFSPL  EQU   ACAFLG1
ACAFFIX  EQU   ACAFLG1
ACARSV5  EQU   ACAFLG1
ACAFMEM  EQU   ACAFLG1
@NM00048 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00047 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSALITA  EQU   PSA+764
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00046 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00045 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSARV013 EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAANEW  EQU   PSA+544
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00044 EQU   FLCFSA
@NM00043 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00042 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00041 EQU   FLCIOA
@NM00040 EQU   FLCMCLA+15
@NM00039 EQU   FLCMCLA+14
@NM00038 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00037 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00036 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00035 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00034 EQU   FLCPER
@NM00033 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00032 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00031 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00030 EQU   FLCPIILC
@NM00029 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00028 EQU   FLCSVILC
@NM00027 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00026 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00025 EQU   FLCICCW2+4
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
*                                      END UNREFERENCED COMPONENTS
@RC00127 EQU   @RC00124
@RF00208 EQU   @RC00205
@RC00247 EQU   @RC00201
@RF00290 EQU   @RC00285
@RF00285 EQU   FREEACE
@RF00302 EQU   @RC00296
@RC00428 EQU   @RC00426
@RC00509 EQU   @EL00001
GOSEND   EQU   @EL00001
@RC00134 EQU   @RC00127
@RC00255 EQU   @RC00247
@RF00260 EQU   @RC00247
@RC00145 EQU   @RC00134
@ENDDATA EQU   *
         END   ILRGOS,(C'PLS1220',0701,76087)
