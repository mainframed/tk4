         TITLE 'ILRGOS01- GROUP OPERATORS RECOVERY ROUTINE             *
                        '
ILRGOS01 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'ILRGOS01  76.315'                                 0001
         DROP  @15
@PROLOG  BALR  @10,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@10                                         0001
*                                      RETURN ADDRESS                */
*   DATARG=R0;                      /* SET UP ADDRESS OF DATA AREA   */
         LR    DATARG,R0                                           0070
*   RFY                                                            0071
*    (R0) UNRSTD;                   /* RELEASE REG 0                 */
*   SDWAPARM->ATAWORD1=R14;         /* SAVE REG14 THROUGHOUT MODULE  */
         L     @15,SDWAPARM(,SDWAPTR)                              0072
         ST    R14,ATAWORD1(,@15)                                  0072
*   RFY                                                            0073
*     R14 UNRSTD;                   /* RELEASE REG 14                */
*   SDWACOMP=INDFRR;                /* SET FRR INDICATOR IN SDWA     */
         SLR   @12,@12                                             0074
         ST    @12,SDWACOMP(,SDWAPTR)                              0074
*   DO;                             /* SETRP                       0075
*                                      FRELOCK(ASM(ASHLOCK),SALLOC)  */
*     RESPECIFY                                                    0076
*      (GPR00P,                                                    0076
*       GPR01P,                                                    0076
*       GPR14P,                                                    0076
*       GPR15P) RSTD;                                              0076
*     GPR01P->SDWARCDE=0;           /* SAVE RC VALUE                 */
         MVI   SDWARCDE(GPR01P),X'00'                              0077
*     GPR01P->SDWAAPLW=ADDR(ASHLOCK);/* INITIALIZE ASMPAT LOCKWORD   */
         L     @12,ASCBPTR                                         0078
         L     @12,RSMHDPTR(,@12)                                  0078
         LA    @12,ASHLOCK(,@12)                                   0078
         ST    @12,SDWAAPLW(,GPR01P)                               0078
*     GPR01P->SDWAACF3=GPR01P->SDWAACF3×'00001100'B;/* INITIALIZE  0079
*                                      LOCK FLAGS                    */
         OI    SDWAACF3(GPR01P),B'00001100'                        0079
*     RESPECIFY                                                    0080
*      (GPR00P,                                                    0080
*       GPR01P,                                                    0080
*       GPR14P,                                                    0080
*       GPR15P) UNRSTD;                                            0080
*   END;                            /* INDICATE FREE SALLOC AND ASM
*                                      CLASS LOCK                    */
*   GOTO COMMON;                    /* SKIP ESTAE ENTRY CODE AND   0082
*                                      START COMMON PROCESSING       */
         B     COMMON                                              0082
*                                                                  0083
*/********************************************************************/
*/*                                                                  */
*/*       ILRCGOSE: ESTAE ENTRY POINT                                */
*/*                                                                  */
*/*       INPUT: REG 0= INDICATOR IF SDWA OBTAINED                   */
*/*                  12 IF NO SDWA OBTAINED                          */
*/*              REG 1= ADDRESS OF SDWA, IF R0 DOES NOT CONTAIN A 12 */
*/*                     COMPLETION CODE IF NO SDWA OBTAINED          */
*/*              REG 2= UNPREDICTABLE IF SDWA OBTAINED               */
*/*                     ADDRESS OF ATA IF SDWA NOT OBTAINED          */
*/*              REG13= ADDRESS OF 72 BYTE SAVEAREA IF SDWA OBTAINED */
*/*                     UNPREDICTABLE IF NO SDWA OBTAINED            */
*/*              REG14= RETURN ADDRESS                               */
*/*              REG15= ILRCGOSE ENTRY POINT ADDRESS                 */
*/*                                                                  */
*/*       PROCESS: HANDLE ERRORS FOR SAVE OR ACTIVATE REQUESTS       */
*/*                                                                  */
*/*       NOTE: ENTRY CODE GENERATED BECAUSE INTERFACE IS            */
*/*             DIFFERENT FROM FRR ENTRY AND PLS MUST NOT USE        */
*/*             ANY REGISTERS BEFORE REGISTERS ARE SAVED.            */
*/*             COMMON MODULE ADDRESSABILITY MUST BE SET UP          */
*/*             BEFORE ALLOWING PLS TO GENERATE INSTRUCTIONS.        */
*/*                                                                  */
*/********************************************************************/
*                                                                  0083
*   RFY                                                            0083
*     SAVEPTR RSTD;                 /* RESTRICT CRITICAL REGISTER- 0083
*                                      REG13                         */
*   RFY                                                            0084
*    (R0,                                                          0084
*     R12,                                                         0084
*     R14,                                                         0084
*     R15) RSTD;                    /* RESTRICT INTERFACE REGS       */
*   GENERATE DEFS(ILRCGOSE,GOTSDWA) /* ESTAE ENTRY POINT             */
*       REFS(NOSDWA,BASEADDR,RESTORE,R0,R10,R12,SAVEPTR,R14,R15);  0085
ILRCGOSE DS    0H                ESTAE ENTRY POINT
         ENTRY ILRCGOSE
         USING *,R15              SET UP TEMPORARY BASE REGISTER
         C     R0,NOSDWA           SDWA OBTAINED
         BNE   GOTSDWA             YES, BRANCH TO CONTINUE
         LA    R15,0              NO, INDICATE CONT WITH TERMINATION
         BR    R14                RETURN TO RTM
GOTSDWA  DS    0H                 SDWA OBTAINED, CAN ATTEMPT RECOVERY
         STM   R14,R12,RESTORE(SAVEPTR) SAVE RTM REGISTERS
         L     R10,BASEADDR       PICK UP COMMON BASE REG VALUE
         DROP  R15                STOP TEMPORARY ADDRESSABILITY
*   RFY                                                            0086
*    (R0,                                                          0086
*     R12,                                                         0086
*     R14,                                                         0086
*     R15) UNRSTD;                  /* RELEASE REGS                  */
*   SDWACOMP=SAVEPTR;               /* SAVE REG13 THROUGHOUT MODULE  */
         ST    SAVEPTR,SDWACOMP(,SDWAPTR)                          0087
*   RFY                                                            0088
*     SAVEPTR UNRSTD;               /* RELEASE REG 13- PTR HAS BEEN
*                                      SAVED                         */
*                                                                  0089
*   /*****************************************************************/
*   /*                                                               */
*   /* COMMON PROCESSING FOR ESTAE AND FRR ENTRY POINTS              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0089
*COMMON:                                                           0089
*   ;                                                              0089
COMMON   DS    0H                                                  0090
*   DO;                             /* SETRP                       0090
*                                      RC(0)RECPARM(MODID)RECORD(YES)*/
*     RESPECIFY                                                    0091
*      (GPR00P,                                                    0091
*       GPR01P,                                                    0091
*       GPR14P,                                                    0091
*       GPR15P) RSTD;                                              0091
*     GPR01P->SDWARCDE=0;           /* SAVE RC VALUE                 */
         MVI   SDWARCDE(GPR01P),X'00'                              0092
*     GPR01P->SDWARCRD='1'B;        /* TURN ON RECORD INDICATOR      */
         OI    SDWARCRD(GPR01P),B'10000000'                        0093
*     GPR15P=ADDR(MODID);           /* ACCESS RECORD PARAMETER LIST  */
         LA    GPR15P,MODID                                        0094
*     GPR01P->SDWARECP=GPR15P->I256C(1:24);/* COPY RECORD PARAMETERS */
         MVC   SDWARECP(24,GPR01P),I256C(GPR15P)                   0095
*     RESPECIFY                                                    0096
*      (GPR00P,                                                    0096
*       GPR01P,                                                    0096
*       GPR14P,                                                    0096
*       GPR15P) UNRSTD;                                            0096
*   END;                            /* RECORD DEFAULT PARMS IN SDWA-
*                                      RECORD ERROR, CONTINUE WITH 0097
*                                      TERMINATION, RECORD MODULE  0097
*                                      NAMES                         */
*   RFY                                                            0098
*     ATAPTR RSTD;                  /* RESTRICT ATA REGISTER         */
*   ATAPTR=SDWAPARM;                /* SET UP ADDRESS OF ATA         */
         L     ATAPTR,SDWAPARM(,SDWAPTR)                           0099
*   SDWAVRA(1:LENGTH(ATA))=ATA;     /* RECORD ATA IN SDWA            */
         MVC   SDWAVRA(24,SDWAPTR),ATA(ATAPTR)                     0100
*   SDWAURAL=LENGTH(ATA);           /* UPDATE LENGTH OF DATA IN    0101
*                                      RECORDING AREA                */
         MVI   SDWAURAL(SDWAPTR),X'18'                             0101
*   IF ATAEPATH=ZERO                /* EPATH CHECKPOINTED?           */
*     THEN                                                         0102
         SLR   @12,@12                                             0102
         L     @11,ATAEPATH(,ATAPTR)                               0102
         CR    @11,@12                                             0102
         BE    @RT00102                                            0102
*     GOTO EXIT;                    /* NO, RETURN TO RTM. NO RECOVERY
*                                      CAN BE DONE                   */
*   RFY                                                            0104
*     EPAPTR RSTD;                  /* RESTRICT EPATH REGISTER       */
*   EPAPTR=ATAEPATH;                /* SET UP POINTER TO EPATH       */
         LR    EPAPTR,@11                                          0105
*   RFY                                                            0106
*     ATAPTR UNRSTD;                /* RELEASE ATA REGISTER          */
*   RFY                                                            0107
*     RECPTR RSTD;                  /* RESTRICT REG                  */
*   RECPTR=ADDR(SDWAVRA)+URAL;      /* SET UP POINTER TO AVAILABLE 0108
*                                      SPACE IN RECORDING AREA       */
         LA    RECPTR,SDWAVRA(,SDWAPTR)                            0108
         SLR   @11,@11                                             0108
         IC    @11,URAL(,SDWAPTR)                                  0108
         ALR   RECPTR,@11                                          0108
*   RECAREA(1:LENGTH(EPATH))=EPATH; /* RECORD EPATH IN SDWA          */
         MVC   RECAREA(52,RECPTR),EPATH(EPAPTR)                    0109
*   RFY                                                            0110
*     RECPTR UNRSTD;                /* RELEASE REG                   */
*   URAL=URAL+LENGTH(EPATH);        /* UPDATE LENGTH OF DATA IN    0111
*                                      RECORDING AREA                */
         AH    @11,@CH00376                                        0111
         STC   @11,URAL(,SDWAPTR)                                  0111
*                                                                  0112
*   /*****************************************************************/
*   /*                                                               */
*   /* RECORD APPROPRIATE MODULE NAMES IN SDWA                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0112
*   IF SDWACOMP^=INDFRR             /* ESTAE ENTRY POINT ?           */
*     THEN                                                         0112
         C     @12,SDWACOMP(,SDWAPTR)                              0112
         BE    @RF00112                                            0112
*     SDWAREXN=NGOSE;               /* CHANGE RECOVERY NAME TO     0113
*                                      ILRCGOSE                      */
         MVC   SDWAREXN(8,SDWAPTR),NGOSE                           0113
*   IF EPAVSAMI=ON                  /* ILRVSAMI IN CONTROL ?         */
*     THEN                                                         0114
@RF00112 TM    EPAVSAMI(EPAPTR),B'10000000'                        0114
         BNO   @RF00114                                            0114
*     SDWACSCT=NVSAMI;              /* INDICATE ILRVSAMI IN CONTROL
*                                      AT TIME OF ERROR              */
         MVC   SDWACSCT(8,SDWAPTR),NVSAMI                          0115
*   ELSE                                                           0116
*     IF EPASAVE=ON                 /* ILRSAV IN CONTROL ?           */
*       THEN                                                       0116
         B     @RC00114                                            0116
@RF00114 TM    EPASAVE(EPAPTR),B'00100000'                         0116
         BNO   @RF00116                                            0116
*       SDWACSCT=NSAVE;             /* INDICATE ILRSAV IN CONTROL AT
*                                      TIME OF ERROR                 */
         MVC   SDWACSCT(8,SDWAPTR),NSAVE                           0117
*     ELSE                                                         0118
*       IF EPAACT=ON                /* ILRACT IN CONTROL ?           */
*         THEN                                                     0118
         B     @RC00116                                            0118
@RF00116 TM    EPAACT(EPAPTR),B'00010000'                          0118
         BNO   @RF00118                                            0118
*         SDWACSCT=NACT;            /* INDICATE ILRACT IN CONTROL AT
*                                      TIME OF ERROR                 */
         MVC   SDWACSCT(8,SDWAPTR),NACT                            0119
*       ELSE                                                       0120
*         IF EPARLG=ON              /* ILRRLG IN CONTROL?            */
*           THEN                                                   0120
         B     @RC00118                                            0120
@RF00118 TM    EPARLG(EPAPTR),B'01000000'                          0120
         BNO   @RF00120                                            0120
*           SDWACSCT=NRLG;          /* INDICATE ILRRLG IN CONTROL AT
*                                      TIME OF ERROR                 */
         MVC   SDWACSCT(8,SDWAPTR),NRLG                            0121
*         ELSE                                                     0122
*           ;                       /* ILRGOS IN CONTROL, NAME     0122
*                                      ALREADY SET IN SDWA           */
@RF00120 DS    0H                                                  0123
*                                                                  0123
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCESS RECORD ONLY ABEND                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0123
*   RFY                                                            0123
*     COMPCODE RSTD;                /* RESTRICT REG                  */
@RC00118 DS    0H                                                  0123
@RC00116 DS    0H                                                  0123
@RC00114 DS    0H                                                  0124
*   COMPCODE=SDWAABCC&COMPCLR;      /* ISOLATE COMPLETION CODE       */
         L     COMPCODE,SDWAABCC(,SDWAPTR)                         0124
         N     COMPCODE,COMPCLR                                    0124
*   IF(SDWACLUP^=ON)&               /* ABLE TO RETRY AND RECORD ONLY
*                                      ABEND?                        */
*       ((COMPCODE=C085)×           /* X'085' ABEND ?                */
*       (COMPCODE=C086)×            /* OR X'086' ABEND?              */
*       (COMPCODE=C087)×            /* OR X'087' ABEND?              */
*       (COMPCODE=CC0D))            /* OR X'C0D' ABEND?              */
*     THEN                                                         0125
         TM    SDWACLUP(SDWAPTR),B'10000000'                       0125
         BO    @RF00125                                            0125
         CL    COMPCODE,@CF02138                                   0125
         BE    @RT00125                                            0125
         CL    COMPCODE,@CF02140                                   0125
         BE    @RT00125                                            0125
         CL    COMPCODE,@CF02142                                   0125
         BE    @RT00125                                            0125
         CL    COMPCODE,@CF02144                                   0125
         BNE   @RF00125                                            0125
@RT00125 DS    0H                                                  0126
*     DO;                           /* RECORD ONLY ABEND, RECORD & 0126
*                                      RETRY                         */
*       SDWASRSV(1:RECRGLN)=RECRGS; /* SET UP RETRY IN SDWA FROM DATA
*                                      IN EPATH                      */
         L     @12,EPARTYRG(,EPAPTR)                               0127
         MVC   SDWASRSV(60,SDWAPTR),RECRGS(@12)                    0127
*       DO;                         /* SETRP RC(4)RETREGS(YES)RETADDR
*                                      (RETRYLBL)                    */
*         RESPECIFY                                                0129
*          (GPR00P,                                                0129
*           GPR01P,                                                0129
*           GPR14P,                                                0129
*           GPR15P) RSTD;                                          0129
*         GPR01P->SDWARCDE=4;       /* STORE RC INTO SDWA            */
         MVI   SDWARCDE(GPR01P),X'04'                              0130
*         GPR01P->SDWARTYA=ADDR(RETRYLBL);/* SAVE RETRY ADDRESS      */
         MVC   SDWARTYA(4,GPR01P),SDWANXT1(SDWAPTR)                0131
*         GPR01P->SDWAUPRG='1'B;    /* TURN ON RETREGS INDICATOR     */
         OI    SDWAUPRG(GPR01P),B'00001000'                        0132
*         RESPECIFY                                                0133
*          (GPR00P,                                                0133
*           GPR01P,                                                0133
*           GPR14P,                                                0133
*           GPR15P) UNRSTD;                                        0133
*       END;                        /* INDICATE RETRY AT NEXT      0134
*                                      SEQUENTIAL INSTRUCTION,     0134
*                                      SPECIFY REGS FOR RETRY, AND 0134
*                                      INDICATE RETRY                */
*       GOTO EXIT;                  /* RETURN TO RTM                 */
         B     EXIT                                                0135
*     END;                          /* END OF PROCESSING FOR RECORD
*                                      ONLY ABEND                    */
*   RFY                                                            0137
*     COMPCODE UNRSTD;              /* RELEASE REG                   */
@RF00125 DS    0H                                                  0138
*                                                                  0138
*   /*****************************************************************/
*   /*                                                               */
*   /* FRR ENTRY POINT- DETERMINE IF ASM CLASS LOCK ALREADY HELD     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0138
*   IF SDWACOMP=INDFRR              /* FRR ENTRY POINT ?             */
*     THEN                                                         0138
         ICM   @12,15,SDWACOMP(SDWAPTR)                            0138
         BNZ   @RF00138                                            0138
*     DO;                           /* FRR ENTRY POINT               */
*       RFY                                                        0140
*        (R11,                                                     0140
*         R12,                                                     0140
*         LOCKCODE,                                                0140
*         R14) RSTD;                /* RESTRICT INTERFACE REGS       */
*       GENERATE REFS(PSALITA,GETSALLC);                           0141
TESTASM  SETLOCK TEST,TYPE=ASM,BRANCH=(NOTHELD,GETSALLC),             **
               RELATED=(VIO-FRR-ONLY,ILRGOS01)
COBTSALC SETLOCK OBTAIN,TYPE=SALLOC,MODE=COND,                        **
               RELATED=(VIO-FRR-ONLY,IEAVTRTS)
*       IF LOCKCODE=NOOBT           /* UNABLE TO OBTAIN SALLOC WHILE
*                                      HOLDING ASM CLASS LOCK?       */
*         THEN                      /* YES, RETURN TO RTM- NO      0142
*                                      RECOVERY                      */
         CH    LOCKCODE,@CH00035                                   0142
         BE    @RT00142                                            0142
*         GOTO EXIT;                /* RETURN TO RTM                 */
*       RFY                                                        0144
*        (R11,                                                     0144
*         R12,                                                     0144
*         LOCKCODE,                                                0144
*         R14) UNRSTD;              /* RELEASE INTERFACE REGS        */
*     END;                          /* END OF SPECIAL PROCESSING FOR
*                                      FRR                           */
*                                                                  0146
*   /*****************************************************************/
*   /*                                                               */
*   /* ESTAE ENTRY POINT- MUST GET 200 BYTE WORKAREA & LOCAL LOCK    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0146
*   ELSE                                                           0146
*     DO;                           /* ESTAE ENTRY POINT             */
         B     @RC00138                                            0146
@RF00138 DS    0H                                                  0147
*       RFY                                                        0147
*         SAVERG RSTD;              /* RESTRICT SPECIAL REG          */
*       SAVERG=SDWAPTR;             /* SAVE SDWA ADDRESS ACROSS    0148
*                                      GETMAIN                       */
         LR    SAVERG,SDWAPTR                                      0148
*       RFY                                                        0149
*        (R0,                                                      0149
*         R1,                                                      0149
*         R14,                                                     0149
*         RETCODE) RSTD;            /* RESTRICT INTERFACE REGS       */
*       GENERATE;                                                  0150
*                                        /* ISSUE SVC GETMAIN */
         GETMAIN RC,LV=200,SP=245,                                    **
               RELATED=(SP245-200,ILRCGOSE)
*       IF RETCODE^=ZERO            /* GETMAIN SUCCESSFUL?           */
*         THEN                                                     0151
         LTR   RETCODE,RETCODE                                     0151
         BNZ   @RT00151                                            0151
*         GOTO PREEXIT;             /* NO, RETURN TO RTM- CANNOT   0152
*                                      RECOVER                       */
*       DATARG=R1;                  /* SAVE ADDRESS OF DATA AREA     */
*                                                                  0153
         LR    DATARG,R1                                           0153
*       /*************************************************************/
*       /*                                                           */
*       /* ADDRESSABILITY TO AUTOMATIC DATA AREA NOT SET UP UNTIL    */
*       /* COMMON ADDRESSABILITY SET UP FOR BOTH ESTAE AND FRR ENTRY */
*       /* POINTS                                                    */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0154
*       RFY                                                        0154
*        (R0,                                                      0154
*         R1,                                                      0154
*         R14,                                                     0154
*         RETCODE) UNRSTD;          /* RELEASE INTERFACE REGS        */
*                                                                  0155
*       /*************************************************************/
*       /*                                                           */
*       /* - ILRVSAMI IN CONTROL - MUST DETERMINE IF ENDREQ TO BE    */
*       /* ISSUED AND ISSUE REQUEST BEFORE ANY LOCKS ARE OBTAINED    */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0155
*       RFY                                                        0155
*         IFGRPL BASED(EPAVWKA);    /* SET UP ADDRESSABILITY TO RPL  */
*       IF EPAVSAMI=ON&             /* ILRVSAMI IN CONTROL AT TIME OF
*                                      ERROR AND                     */
*           EPARPLB=ON&             /* RPL ALREADY SET UP AND        */
*           SAVERG->SDWAPERC=ON     /* PERCOLATED TO FROM ANOTHER RTN
*                                      ?                             */
*         THEN                                                     0156
         TM    EPAVSAMI(EPAPTR),B'10000001'                        0156
         BNO   @RF00156                                            0156
         TM    SDWAPERC(SAVERG),B'00010000'                        0156
         BNO   @RF00156                                            0156
*         DO;                       /* YES, ISSUE ENDREQ             */
*           RFY                                                    0158
*            (R0,                                                  0158
*             R1,                                                  0158
*             R14,                                                 0158
*             R15) RSTD;            /* RESTRICT INTERFACE REGS       */
*           RFY                                                    0159
*             SAVEPTR RSTD;         /* RESTRICT PTR TO SAVEAREA    0159
*                                                            @ZM43073*/
*           SAVEPTR=DATARG;         /* USE BEGINNING OF WORKAREA FOR
*                                      SAVEAREA              @ZM43073*/
         LR    SAVEPTR,DATARG                                      0160
*           R1=EPAVWKA;             /* SET UP ADDRESS OF RPL         */
         L     R1,EPAVWKA(,EPAPTR)                                 0161
*           GEN( ENDREQ RPL=(1));   /* CLEAN UP VSAM RESOURCES       */
          ENDREQ RPL=(1)
*           RFY                                                    0163
*            (R0,                                                  0163
*             R1,                                                  0163
*             R14,                                                 0163
*             R15) UNRSTD;          /* RELEASE REGS                  */
*           RFY                                                    0164
*             SAVEPTR UNRSTD;       /* RELEASE REG FOR SAVEAREA    0164
*                                                            @ZM43073*/
*         END;                      /* END OF ILRVSAMI SPECIAL     0165
*                                      PROCESSING                    */
*                                                                  0166
*       /*************************************************************/
*       /*                                                           */
*       /* BEFORE PERFORMING ESTAE RECOVERY, WHICH WILL OBTAIN THE   */
*       /* SALLOC AND ASM LOCKS, THE SDWA MUST BE PAGEFIXED TO       */
*       /* PREVENT GOS01 FROM SUFFERING A PAGE FAULT WHILE HOLDING A */
*       /* GLOBAL LOCK. IF AN ERROR OCCURS DURING THE PAGEFIX        */
*       /* PROCESSING, NO FURTHER RECOVERY WILL TAKE PLACE.          */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0166
*       RFY                                                        0166
*         FIXECB BASED(DATARG);     /* USE FIRST WORD OF WORKAREA FOR
*                                      ECB                           */
@RF00156 DS    0H                                                  0167
*       FIXECB=ZERO;                /* INITIALIZE ECB TO ZERO        */
         SLR   @12,@12                                             0167
         ST    @12,FIXECB(,DATARG)                                 0167
*       RFY                                                        0168
*         ENDADDR RSTD;             /* RESTRICT REG TO CONTAIN ADDR
*                                      OF SDWA END                   */
*       ENDADDR=SAVERG+LENGTH(SDWA);/* CALCULATE ADDR OF SDWA END, 0169
*                                      SAVERG CONTAINS SDWA ADDR     */
         LA    ENDADDR,512                                         0169
         ALR   ENDADDR,SAVERG                                      0169
*       RFY                                                        0170
*         RETCODE RSTD;             /* RESTRICT REG FOR RETURN CODE  */
*       GEN;                                                       0171
*        /* PAGEFIX SDWA */
FIXSDWA  PGFIX R,A=(SAVERG),ECB=(DATARG),EA=(ENDADDR),LONG=N,         **
               RELATED=(SDWA,ILRGOS01(FREESDWA))
*       IF RETCODE^=ZERO THEN       /* IF RETURN CODE IS 0 PAGEFIX 0172
*                                      COMPLETED SUCCESSFULLY - NO 0172
*                                      NEED TO WAIT                  */
         LTR   RETCODE,RETCODE                                     0172
         BZ    @RF00172                                            0172
*         DO;                       /* IF RETURN CODE IS NOT 0,    0173
*                                      EITHER PAGEFIX FAILED OR HAS
*                                      NOT COMPLETED                 */
*           IF RETCODE^=EIGHT THEN  /* IF RETURN CODE IS NOT 8,    0174
*                                      PAGEFIX ABENDED - GOS01 CANNOT
*                                      RECOVER                       */
         CH    RETCODE,@CH00035                                    0174
         BNE   @RT00174                                            0174
*             GOTO PREEXIT;         /* SIMPLY RETURN TO RTM          */
*           GEN(WAIT  ECB=(DATARG));/* WAIT FOR PAGEFIX TO COMPLETE  */
         WAIT  ECB=(DATARG)
*           IF(FIXECB&ECBMASK)^=ZERO THEN/* IF THE COMPLETION CODE IN
*                                      THE ECB IS 0, PAGEFIX WAS   0177
*                                      SUCCESSFUL                    */
         L     @14,FIXECB(,DATARG)                                 0177
         N     @14,@CF02146                                        0177
         LTR   @14,@14                                             0177
         BNZ   @RT00177                                            0177
*             GOTO PREEXIT;         /* IF ECB COMPLETION CODE IS NOT
*                                      0, PAGEFIX FAILED - GOS01   0178
*                                      CANNOT RECOVER, RETURN TO RTM */
*         END;                      /* END OF POST PAGEFIX PROCESSING*/
*       RFY                                                        0180
*        (ENDADDR,                                                 0180
*         RETCODE) UNRSTD;          /* RELEASE REGS                  */
@RF00172 DS    0H                                                  0181
*       SDWAPTR=SAVERG;             /* RESTORE SDWA ADDRESS          */
         LR    SDWAPTR,SAVERG                                      0181
*       RFY                                                        0182
*         SAVERG UNRSTD;            /* RELEASE SPECIAL REG           */
*       RFY                                                        0183
*        (R11,                                                     0183
*         R12,                                                     0183
*         R13,                                                     0183
*         R14) RSTD;                /* RESTRICT INTERFACE REGS       */
*       GENERATE REFS(PSALITA);                                    0184
*                            /* OBTAIN LOCAL LOCK */
OBTLOCAL SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                       **
               RELATED=(VIO,ILRGOS01(ILRCGOSE,RELLOCK))
*       RFY                                                        0185
*        (R11,                                                     0185
*         R12,                                                     0185
*         R13,                                                     0185
*         R14) UNRSTD;              /* RELEASE INTERFACE REGS        */
*     END;                          /* END OF ESTAE PROCESSING       */
*                                                                  0187
*   /*****************************************************************/
*   /*                                                               */
*   /* SET UP COMMON ADDRESSABILITY AND COMMON LOCK STATUS           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0187
*GETSALLC:                                                         0187
*   ;                               /* LABEL FOR BRANCH ON SETLOCK 0187
*                                      TEST                          */
@RC00138 DS    0H                                                  0187
GETSALLC DS    0H                                                  0188
*   RFY                                                            0188
*    (R11,                                                         0188
*     R12,                                                         0188
*     R13,                                                         0188
*     R14) RSTD;                    /* RESTRICT INTERFACE REGS       */
*   GENERATE REFS(PSALITA);                                        0189
OBTSALLC SETLOCK OBTAIN,TYPE=SALLOC,MODE=UNCOND,                      **
               RELATED=(VIO,ILRGOS01(RELLOCK))
*   R11=ADDR(ASHLOCK);              /* SET UP ASM CLASS LOCK LOCK  0190
*                                      WORD                          */
         L     @15,ASCBPTR                                         0190
         L     R11,RSMHDPTR(,@15)                                  0190
         LA    R11,ASHLOCK(,R11)                                   0190
*   GENERATE REFS(PSALITA);                                        0191
*                            /* OBTAIN ASM CLASS LOCK */
OBTASM   SETLOCK OBTAIN,TYPE=ASM,ADDR=(11),MODE=UNCOND,               **
               RELATED=(VIO,ILRGOS01(RELLOCK))
*   RFY                                                            0192
*    (R11,                                                         0192
*     R12,                                                         0192
*     R13,                                                         0192
*     R14) UNRSTD;                  /* RELEASE INTERFACE REGS        */
*                                                                  0192
*   /*****************************************************************/
*   /*                                                               */
*   /* SET UP COMMON ADDRESSABILITY TO AUTOMATIC DATA AREA           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0193
*   GEN( USING @DATD,DATARG);       /* SET UP ADDRESSABILITY TO DATA
*                                      AREA                          */
          USING @DATD,DATARG
*   DATARG->RECAREA(1:LNDATA)=''B;  /* ZERO DATA AREA                */
         XC    RECAREA(200,DATARG),RECAREA(DATARG)                 0194
*   SAVESDWA=SDWAPTR;               /* SAVE SDWA ADDRESS             */
         ST    SDWAPTR,SAVESDWA                                    0195
*                                                                  0196
*   /*****************************************************************/
*   /*                                                               */
*   /* VERIFY COMMON CHECKPOINTED ITEMS- ACE, ACTIVE ASPCT, AND LGE  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0196
*   LGEPTR=ZERO;                    /* INITIALIZE INTERNAL LGE     0196
*                                      ADDRESS                       */
*                                                                  0196
         SLR   @12,@12                                             0196
         ST    @12,LGEPTR                                          0196
*   /*****************************************************************/
*   /*                                                               */
*   /* VALIDITY CHECK CURRENT ACE                                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0197
*   RFY                                                            0197
*    (ELEMENT,                                                     0197
*     R14,                                                         0197
*     RETCODE) RSTD;                /* RESTRICT INTERFACE REGISTERS  */
*   ELEMENT=EPAACE;                 /* SET UP ADDRESS OF ACE         */
         L     ELEMENT,EPAACE(,EPAPTR)                             0198
*   RFY                                                            0199
*    (R2,                                                          0199
*     R3,                                                          0199
*     R4,                                                          0199
*     R5,                                                          0199
*     R6,                                                          0199
*     R7) RSTD;                     /* REGS 2-7 DESTROYED ACROSS CALL*/
*   CALL ILRVACE;                   /* CALL ACE VERIFICATION RTN     */
         L     @15,@CV02190                                        0200
         BALR  @14,@15                                             0200
*   RFY                                                            0201
*    (R2,                                                          0201
*     R3,                                                          0201
*     R4,                                                          0201
*     R5,                                                          0201
*     R6,                                                          0201
*     R7) UNRSTD;                   /* RELEASE REGS                  */
*   IF RETCODE^=ZERO                /* ACE VALIDITY CHECK OK ?       */
*     THEN                                                         0202
         SLR   @12,@12                                             0202
         CR    RETCODE,@12                                         0202
         BE    @RF00202                                            0202
*     EPAACE=ZERO;                  /* NO, DO NOT USE ACE ADDRESS    */
         ST    @12,EPAACE(,EPAPTR)                                 0203
*   ELSE                                                           0204
*     LGEPTR=ACELGE;                /* YES, SET INTERNAL LGE ADDRESS */
         B     @RC00202                                            0204
@RF00202 L     @12,ACEPTR(,EPAPTR)                                 0204
         MVC   LGEPTR(4),ACELGE(@12)                               0204
*   RFY                                                            0205
*    (ELEMENT,                                                     0205
*     R14,                                                         0205
*     RETCODE) UNRSTD;              /* RELEASE INTERFACE REGS        */
@RC00202 DS    0H                                                  0206
*                                                                  0206
*   /*****************************************************************/
*   /*                                                               */
*   /* VALIDITY CHECK ACTIVE ASPCT                                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0206
*   IF EPAAASP^=ZERO                /* ACTIVE ASPCT CHECKPOINTED?    */
*     THEN                                                         0206
         L     @12,EPAAASP(,EPAPTR)                                0206
         LTR   @12,@12                                             0206
         BZ    @RF00206                                            0206
*     DO;                           /* YES, ADDRESS VERIFY STORAGE   */
*       RFY                                                        0208
*        (STORLN,                                                  0208
*         VERADDR,                                                 0208
*         R3) RSTD;                 /* RESTRICT INTERFACE REGS       */
*       RFY                                                        0209
*        (R14,                                                     0209
*         RETCODE) RSTD;            /* RESTRICT INTERFACE REGS       */
*       STORLN=LENGTH(ASPCT);       /* SET UP LENGTH OF STORAGE TO BE
*                                      ADDRESS VERIFIED              */
         LA    STORLN,1088                                         0210
*       VERADDR=EPAAASP;            /* SET UP ADDRESS OF ACTIVE ASPCT*/
         LR    VERADDR,@12                                         0211
*       CALL IEAVEADV;              /* CALL ADDRESS VERIFICATION     */
         L     @15,@CV02192                                        0212
         BALR  @14,@15                                             0212
*       RFY                                                        0213
*        (STORLN,                                                  0213
*         VERADDR,                                                 0213
*         R3) UNRSTD;               /* RELEASE REGS                  */
*       IF RETCODE^=ZERO            /* ASPCT ADDRESS VERIFY OK ?     */
*         THEN                                                     0214
         SLR   @12,@12                                             0214
         CR    RETCODE,@12                                         0214
         BE    @RF00214                                            0214
*         EPAAASP=ZERO;             /* NO, DO NOT USE ASPCT ADDR     */
         ST    @12,EPAAASP(,EPAPTR)                                0215
*       ELSE                                                       0216
*         LGEPTR=EPAAASP->ASPLGE;   /* YES, SET INTERNAL LGE ADDR    */
         B     @RC00214                                            0216
@RF00214 L     @12,EPAAASP(,EPAPTR)                                0216
         MVC   LGEPTR(4),ASPLGE(@12)                               0216
*       RFY                                                        0217
*        (R14,                                                     0217
*         RETCODE) UNRSTD;          /* RELEASE REGS                  */
@RC00214 DS    0H                                                  0218
*     END;                          /* END OF ACTIVE ASPCT PROCESSING*/
*                                                                  0219
*   /*****************************************************************/
*   /*                                                               */
*   /* VALIDITY CHECK LGE AND LGE PROCESS QUEUE                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0219
*   RFY                                                            0219
*    (ELEMENT,                                                     0219
*     QWKAREAP,                                                    0219
*     R14,                                                         0219
*     RETCODE) RSTD;                /* RESTRICT INTERFACE REGISTERS  */
@RF00206 DS    0H                                                  0220
*   QWKAREAP=ADDR(QWKAREA);         /* SET UP ADDRESS OF WORK AREA 0220
*                                      FOR VERIFICATION RTN          */
         LA    QWKAREAP,QWKAREA                                    0220
*   ELEMENT=LGEPTR;                 /* SET UP ADDRESS OF LGE         */
         L     ELEMENT,LGEPTR                                      0221
*   RFY                                                            0222
*    (R5,                                                          0222
*     R6,                                                          0222
*     R7) RSTD;                     /* REGS 5-7 DESTROYED ACROSS CALL*/
*   RFY                                                            0223
*     SAVEPTR RSTD;                 /* RESTRICT PTR TO SAVEAREA      */
*   SAVEPTR=ADDR(SAVERGS);          /* SET UP SAVEAREA ADDR          */
         LA    SAVEPTR,SAVERGS                                     0224
*   CALL ILRVLPRQ;                  /* VERIFY LGE AND PROCESS QUEUE  */
         L     @15,@CV02193                                        0225
         BALR  @14,@15                                             0225
*   RFY                                                            0226
*     SAVEPTR UNRSTD;               /* RELEASE REG                   */
*   RFY                                                            0227
*    (R5,                                                          0227
*     R6,                                                          0227
*     R7) UNRSTD;                   /* RELEASE REGS                  */
*   EPAPTR=SDWAPARM->ATAEPATH;      /* RESTORE EPATH ADDRESS         */
         L     @12,SDWAPARM(,SDWAPTR)                              0228
         L     EPAPTR,ATAEPATH(,@12)                               0228
*   IF RETCODE=INVLGE               /* LGE VALID?                    */
*     THEN                                                         0229
         CH    RETCODE,@CH00349                                    0229
         BNE   @RF00229                                            0229
*     LGEPTR=ZERO;                  /* NO, DO NOT USE LGE ADDRESS    */
         SLR   @12,@12                                             0230
         ST    @12,LGEPTR                                          0230
*   RFY                                                            0231
*    (ELEMENT,                                                     0231
*     QWKAREAP,                                                    0231
*     R14,                                                         0231
*     RETCODE) UNRSTD;              /* RELEASE REGS                  */
@RF00229 DS    0H                                                  0232
*                                                                  0232
*   /*****************************************************************/
*   /*                                                               */
*   /* SPECIAL PROCESSING FOR EACH GROUP OPERATOR IF IN CONTROL AT   */
*   /* TIME OF ERROR - ILRACT OR ILRSAV IN CONTROL                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0232
*   IF EPAACT=ON×                   /* ILRACT IN CONTROL OR          */
*       EPASAVE=ON                  /* ILRSAV IN CONTROL?            */
*     THEN                                                         0232
         TM    EPAACT(EPAPTR),B'00110000'                          0232
         BZ    @RF00232                                            0232
*     DO;                           /* YES, UPDATE BUFFER COUNT      */
*       RFY                                                        0234
*        (COMPV,                                                   0234
*         REPLV) RSTD;              /* RESTRICT REGS FOR C&S         */
*       COMPV=ASMREQCT;             /* PICK UP CURRENT BUFFER CT     */
         L     @12,CVTPTR                                          0235
         L     @12,ASMVTPTR(,@12)                                  0235
         L     COMPV,ASMREQCT(,@12)                                0235
*RETRY1:                                                           0236
*       ;                           /* RETRY POINT FOR C&S           */
RETRY1   DS    0H                                                  0237
*       REPLV=COMPV+ONE;            /* INCREMENT COUNT               */
         LA    REPLV,1                                             0237
         ALR   REPLV,COMPV                                         0237
*       CS(COMPV,REPLV,ASMREQCT);   /* UPDATE BUFFER COUNT BY ONE    */
         L     @12,CVTPTR                                          0238
         L     @12,ASMVTPTR(,@12)                                  0238
         CS    COMPV,@05,ASMREQCT(@12)                             0238
*       BC(NE,RETRY1);              /* RETRY IF NOT SUCCESSFUL       */
         BC    7,RETRY1                                            0239
*       RFY                                                        0240
*        (REPLV,                                                   0240
*         COMPV) UNRSTD;            /* RELEASE REGS                  */
*     END;                          /* END OF SPECIAL ACTIVATE & SAVE
*                                      PROCESSING                    */
*                                                                  0242
*   /*****************************************************************/
*   /*                                                               */
*   /* SAVEREC- SPECIAL PROCESSING IF ILRSAV IN CONTROL AT TIME OF   */
*   /* ERROR                                                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0242
*   IF EPASAVE=ON                   /* ILRSAV IN CONTROL?            */
*     THEN                                                         0242
@RF00232 TM    EPASAVE(EPAPTR),B'00100000'                         0242
         BNO   @RF00242                                            0242
*     DO;                           /* YES, REMOVE ALL TRACES OF   0243
*                                      REQUEST                       */
*       IF EPAAASP^=ZERO            /* ACTIVE ASPCT STILL          0244
*                                      CHECKPOINTED                  */
*         THEN                                                     0244
         L     @12,EPAAASP(,EPAPTR)                                0244
         LTR   @12,@12                                             0244
         BZ    @RF00244                                            0244
*         DO;                       /* RESET FIELDS IN ASPCT         */
*           ASPCTPTR=EPAAASP;       /* SET UP ASPCT ADDRESS          */
         LR    ASPCTPTR,@12                                        0246
*           IF ASPSAVED=OFF         /* ASPCT MARKED SAVE             */
*             THEN                                                 0247
         TM    ASPSAVED(ASPCTPTR),B'10000000'                      0247
         BNZ   @RF00247                                            0247
*             ASPSSYM=''B;          /* NO, ZERO 'S' SYMBOL           */
         XC    ASPSSYM(8,ASPCTPTR),ASPSSYM(ASPCTPTR)               0248
*           IF EPAUNSAV=ON×         /* IN UNSAVE PROCESSING?         */
*               ASPSAVED=OFF        /* OR ASPCT NOT MARKED SAVE      */
*             THEN                                                 0249
@RF00247 TM    EPAUNSAV(EPAPTR),B'00000010'                        0249
         BO    @RT00249                                            0249
         TM    ASPSAVED(ASPCTPTR),B'10000000'                      0249
         BNZ   @RF00249                                            0249
@RT00249 DS    0H                                                  0250
*             DO;                   /* YES, MARK LPMES UNSAVED       */
*               RFY                                                0251
*                (ELEMENT,                                         0251
*                 R1,                                              0251
*                 R14,                                             0251
*                 R15) RSTD;        /* RESTRICT INTERFACE REGISTERS  */
*               ELEMENT=EPAAASP;    /* SET UP ADDR OF ASPCT          */
         L     ELEMENT,EPAAASP(,EPAPTR)                            0252
*               CALL ILRALS00;      /* CALL PROC TO LOOP THROUGH ALL
*                                      LPMES                         */
         BAL   @14,ILRALS00                                        0253
*               RFY                                                0254
*                (ELEMENT,                                         0254
*                 R1,                                              0254
*                 R14,                                             0254
*                 R15) UNRSTD;      /* RELEASE REGS                  */
*               SDWAPTR=SAVESDWA;   /* RESTORE SDWA ADDRESS-       0255
*                                      DESTROYED BY ILRALS00         */
         L     SDWAPTR,SAVESDWA                                    0255
*               EPAPTR=SDWAPARM->ATAEPATH;/* RESTORE EPATH ADDRESS IN
*                                      CASE IT HAS BEEN DESTROYED BY
*                                      ILRALS00                      */
         L     @12,SDWAPARM(,SDWAPTR)                              0256
         L     EPAPTR,ATAEPATH(,@12)                               0256
*             END;                  /* END OF PROCESSING TO MARK ALL
*                                      LPMES UNSAVED                 */
*         END;                      /* END OF PROCESSING ASPCT FOR 0258
*                                      SAVE                          */
@RF00249 DS    0H                                                  0259
*       EPAAASP=ZERO;               /* ZERO ACTIVE ASPCT POINTER SO
*                                      THAT ASPCT WILL NOT BE FREED
*                                      IN FINAL CLEANUP              */
@RF00244 SLR   @12,@12                                             0259
         ST    @12,EPAAASP(,EPAPTR)                                0259
*     END;                          /* END OF SPECIAL PROCESSING FOR
*                                      ILRSAV                        */
*                                                                  0261
*   /*****************************************************************/
*   /*                                                               */
*   /* SPECIAL PROCESSING IF ASSIGN REQUEST AND BACKING SLOTS COUNT  */
*   /* HAS BEEN UPDATED                                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0261
*   ELSE                                                           0261
*     IF EPAASGN=ON                 /* BACKING SLOTS COUNT NEED    0261
*                                      UPDATING                      */
*       THEN                                                       0261
         B     @RC00242                                            0261
@RF00242 TM    EPAASGN(EPAPTR),B'00000100'                         0261
         BNO   @RF00261                                            0261
*       DO;                         /* USE VALUE IN EPATH TO UPDATE
*                                      ASMBKSLT                      */
*         RFY                                                      0263
*          (COMPV,                                                 0263
*           REPLV) RSTD;            /* RESTRICT REGS DURING C&S      */
*         COMPV=ASMBKSLT;           /* PICK UP CURRENT BACKING SLOTS
*                                      COUNT                         */
         L     @12,CVTPTR                                          0264
         L     @12,ASMVTPTR(,@12)                                  0264
         L     COMPV,ASMBKSLT(,@12)                                0264
*RETRY2:                                                           0265
*         ;                         /* RETRY POINT FOR C&S           */
RETRY2   DS    0H                                                  0266
*         REPLV=COMPV+EPABKSLT;     /* UPDATE BACKING SLOTS BY VALUE
*                                      CHECKPOINTED IN EPATH         */
         LR    REPLV,COMPV                                         0266
         AL    REPLV,EPABKSLT(,EPAPTR)                             0266
*         CS(COMPV,REPLV,ASMBKSLT); /* UPDATE ASMBKSLT               */
         L     @12,CVTPTR                                          0267
         L     @12,ASMVTPTR(,@12)                                  0267
         CS    COMPV,@05,ASMBKSLT(@12)                             0267
*         BC(NE,RETRY2);            /* RETRY IF UNSUCCESSFUL         */
         BC    7,RETRY2                                            0268
*         RFY                                                      0269
*          (COMPV,                                                 0269
*           REPLV) UNRSTD;          /* RELEASE REGS                  */
*       END;                        /* END OF PROCESSING BACKING   0270
*                                      SLOTS COUNT                   */
*                                                                  0271
*   /*****************************************************************/
*   /*                                                               */
*   /* SPECIAL PROCESSING IF RELEASE LOGICAL GROUP IN CONTROL- ACE IS*/
*   /* NOT TO BE FREED                                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0271
*     ELSE                                                         0271
*       IF EPARLG=ON                /* ILRRLG IN CONTROL?            */
*         THEN                                                     0271
         B     @RC00261                                            0271
@RF00261 TM    EPARLG(EPAPTR),B'01000000'                          0271
         BNO   @RF00271                                            0271
*         EPAACE=ZERO;              /* YES, ZERO ACE ADDRESS SO THAT
*                                      IT WILL NOT BE FREED IN     0272
*                                      GENERAL CLEANUP               */
         SLR   @12,@12                                             0272
         ST    @12,EPAACE(,EPAPTR)                                 0272
*                                                                  0273
*   /*****************************************************************/
*   /*                                                               */
*   /* GENERAL CLEANUP OF RESOURCES AND STORAGE. FIRST CLEANUP THE   */
*   /* FLAGS IN THE LGE AND DEQUEUE THE ACE FROM THE LGEPROCQ. THE   */
*   /* ACE SHOULD EITHER BE FIRST ON THE QUEUE, IF A GROUP OPERATOR  */
*   /* WAS PROCESSING, OR LAST ON THE QUEUE, IF GOS WAS PROCESSING.  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0273
*   IF LGEPTR^=ZERO THEN            /* IS THE INTERNAL LGE PTR VALID?*/
@RF00271 DS    0H                                                  0273
@RC00261 DS    0H                                                  0273
@RC00242 L     @12,LGEPTR                                          0273
         SLR   @11,@11                                             0273
         CR    @12,@11                                             0273
         BE    @RF00273                                            0273
*     DO;                           /* YES, CLEANUP LGE FLAGS AND TRY
*                                      TO DEQUEUE ACE FROM THE     0274
*                                      LGEPROCQ                      */
*       LGEGRINP=OFF;               /* TURN OFF GROUP OP IN PROCESS
*                                      FLAG IN LGE                   */
*       LGESAVRQ=OFF;               /* TURN OFF 'SAVE REQUEST QUEUED'
*                                      FLAG IN LGE                   */
         NI    LGEGRINP(@12),B'10101111'                           0276
*       IF EPAACE^=ZERO THEN        /* IS AN ACE STILL CHECKPOINTED  */
         L     @15,EPAACE(,EPAPTR)                                 0277
         CR    @15,@11                                             0277
         BE    @RF00277                                            0277
*         DO;                       /* YES, TRY TO DEQUEUE IT FROM 0278
*                                      LGEPROCQ                      */
*           LGERELLG=OFF;           /* TURN OFF 'RELEASE LG        0279
*                                      REQUESTED' FLAG IN LGE, IF THE
*                                      ACE HAD BEEN FOR A RELEASE LG
*                                      REQUEST, THIS WILL BE DONE  0279
*                                      ONLY IF THE ERROR HAD OCCURRED
*                                      IN GOS BEFORE RLG WAS CALLED.
*                                      IN OTHER CASES ON A RELEASE LG
*                                      REQUEST, EPAACE IS ZEROED BY
*                                      RLG OR GOS01.                 */
         NI    LGERELLG(@12),B'11011111'                           0279
*           IF LGEPROCF=EPAACE THEN /* IS ACE FIRST ON PROCQ, TRUE 0280
*                                      WHEN GROUP OP IS IN PROCESS   */
         C     @15,LGEPROCF(,@12)                                  0280
         BNE   @RF00280                                            0280
*             DO;                   /* YES, CONTINUE WITH DEQUEUEING */
*               LGEPROCF=ACEFQPA;   /* POINT PROCESS QUEUE TO NEXT 0282
*                                      ACE/AIA, MAY BE ZERO          */
         L     @15,ACEPTR(,EPAPTR)                                 0282
         L     @00,ACEFQPA(,@15)                                   0282
         ST    @00,LGEPROCF(,@12)                                  0282
*               IF LGEPROCF=ZERO THEN/* IF PROCQ IS NOW EMPTY, ACE 0283
*                                      DEQUEUED WAS ONLY WORK ON   0283
*                                      QUEUE                         */
         CR    @00,@11                                             0283
         BNE   @RF00283                                            0283
*                 LGEPROCL=ZERO;    /* MAKE LAST POINTER ALSO ZERO   */
         ST    @11,LGEPROCL(,@12)                                  0284
*               ELSE                /* IF ACE WAS NOT ONLY WORK ON 0285
*                                      QUEUE                         */
*                 LGEPROCF->ACEBQPA=ZERO;/* ZERO BACK POINTER OF NEW
*                                      LAST ELEMENT                  */
         B     @RC00283                                            0285
@RF00283 L     @12,LGEPTR                                          0285
         L     @12,LGEPROCF(,@12)                                  0285
         SLR   @11,@11                                             0285
         ST    @11,ACEBQPA(,@12)                                   0285
*             END;                  /* END OF DEQUEUEING PROCESS     */
*           ELSE                    /* ACE IS NOT FIRST ON THE QUEUE,
*                                      SEE IF ACE IS LAST            */
*             IF LGEPROCL=EPAACE THEN/* IS ACE LAST ON QUEUE?        */
         B     @RC00280                                            0287
@RF00280 L     @12,LGEPTR                                          0287
         CLC   LGEPROCL(4,@12),EPAACE(EPAPTR)                      0287
         BNE   @RF00287                                            0287
*               DO;                 /* YES, CONTINUE WITH DEQUEUEING */
*                 LGEPROCL=ACEBQPA; /* MAKE LAST POINTER POINT TO  0289
*                                      PRIOR ELEMENT                 */
         L     @11,ACEPTR(,EPAPTR)                                 0289
         L     @11,ACEBQPA(,@11)                                   0289
         ST    @11,LGEPROCL(,@12)                                  0289
*                 LGEPROCL->ACEFQPA=ZERO;/* ZERO FORWARD POINTER OF
*                                      NEW LAST ELEMENT              */
         SLR   @12,@12                                             0290
         ST    @12,ACEFQPA(,@11)                                   0290
*               END;                /* END OF DEQUEUEING PROCESS     */
*         END;                      /* END OF PROCESSING OF ACE      */
@RF00287 DS    0H                                                  0292
@RC00280 DS    0H                                                  0293
*       IF EPARLG=OFF THEN          /* IF ILRRLG WAS NOT IN CONTROL
*                                      AT THE TIME OF THE ERROR,   0293
*                                      CHECK THE PROCQ FOR MORE WORK */
@RF00277 TM    EPARLG(EPAPTR),B'01000000'                          0293
         BNZ   @RF00293                                            0293
*         IF LGEPROCF^=ZERO THEN    /* SEE IF THERE IS ADDITIONAL  0294
*                                      WORK ON THE PROCQ             */
         L     @12,LGEPTR                                          0294
         L     @11,LGEPROCF(,@12)                                  0294
         LTR   @11,@11                                             0294
         BZ    @RF00294                                            0294
*           DO;                     /* YES, SEE IF THERE IS A SAVE 0295
*                                      REQUEST ON QUEUE              */
*             LGEWRKPD=ON;          /* TURN ON WORK PENDING FLAG IN
*                                      LGE                           */
         OI    LGEWRKPD(@12),B'10000000'                           0296
*             FOUNDACE=LGEPROCF;    /* START SEARCH FOR SAVE ACE WITH
*                                      FIRST ACE ON PROCQ            */
         LR    FOUNDACE,@11                                        0297
*             DO WHILE(FOUNDACE^=ZERO)&(FOUNDACE->ACEOP^=ACESVLGN);/*
*                                      SEARCH PROCESS QUEUE FOR    0298
*                                      ANOTHER SAVE ACE              */
         B     @DE00298                                            0298
@DL00298 DS    0H                                                  0299
*               FOUNDACE=FOUNDACE->ACEFQPA;/* INCREMENT PTR TO NEXT
*                                      ACE ON QUEUE                  */
         L     FOUNDACE,ACEFQPA(,FOUNDACE)                         0299
*             END;                  /* END OF SEARCH FOR SAVE ACE    */
@DE00298 LTR   FOUNDACE,FOUNDACE                                   0300
         BZ    @DC00298                                            0300
         CLI   ACEOP(FOUNDACE),16                                  0300
         BNE   @DL00298                                            0300
@DC00298 DS    0H                                                  0301
*             IF FOUNDACE^=ZERO THEN/* IF A SAVE ACE WAS FOUND ON THE
*                                      PROCESS QUEUE                 */
         LTR   FOUNDACE,FOUNDACE                                   0301
         BZ    @RF00301                                            0301
*               LGESAVRQ=ON;        /* TURN ON 'SAVE REQUEST QUEUED'
*                                      FLAG IN THE LGE               */
         L     @12,LGEPTR                                          0302
         OI    LGESAVRQ(@12),B'00010000'                           0302
*             IF ASHSCHED=OFF THEN  /* TEST IF THE SRB FOR SRB     0303
*                                      CONTROLLER IS ALREADY       0303
*                                      SCHEDULED                     */
@RF00301 L     @12,ASCBPTR                                         0303
         L     @12,RSMHDPTR(,@12)                                  0303
         TM    ASHSCHED(@12),B'10000000'                           0303
         BNZ   @RF00303                                            0303
*               DO;                 /* IF NOT, SCHEDULE THE SRB SINCE
*                                      THE WORK PENDING FLAG IN THE
*                                      LGEWAS JUST SET               */
*                 ASHSCHED=ON;      /* INDICATE THAT THE SRB IS    0305
*                                      SCHEDULED                     */
         OI    ASHSCHED(@12),B'10000000'                           0305
*                 RFY                                              0306
*                   R1 RSTD;        /* RESTRICT REG TO POINT TO SRB  */
*                 R1=ASHVSRBP;      /* GET ADDR OF SRB CONTROLLER SRB*/
         L     R1,ASHVSRBP(,@12)                                   0307
*                 GEN(SCHEDULE SRB=(1),SCOPE=GLOBAL)               0308
*                 REFS(CVTGSMQ,SRBFLNK,SRBSECT);/* SCHEDULE SRB      */
         SCHEDULE SRB=(1),SCOPE=GLOBAL
*                 RFY                                              0309
*                   R1 UNRSTD;      /* RELEASE REG                   */
*                 SDWAPTR=SAVESDWA; /* RESTORE SDWA ADDRESS -      0310
*                                      DESTROYED BY SCHEDULE         */
         L     SDWAPTR,SAVESDWA                                    0310
*               END;                /* END OF SCHEDULE OF SRB      0311
*                                      CONTROLLER                    */
*           END;                    /* END OF PROCESSING REMAINING 0312
*                                      WORK ON PROCQ                 */
*     END;                          /* END OF PROCESSING FOR LGE     */
*   ELSE                            /* IN CASE EPAACE IS NOT 0, BUT
*                                      LGEPTR IS 0, ZERO EPAACE SO 0314
*                                      THAT THE CELL WILL NOT BE   0314
*                                      FREED WHILE IT MAY REMAIN ON
*                                      SOME LGEPROCQ                 */
*     EPAACE=ZERO;                  /* ZERO EPAACE                   */
         B     @RC00273                                            0314
@RF00273 SLR   @12,@12                                             0314
         ST    @12,EPAACE(,EPAPTR)                                 0314
*                                                                  0315
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCESS LGE ADDRESS CHECKPOINTED IN EPALGEP- THIS LGE         */
*   /* GETMAINED IN ASSIGN PROCESSING IN ILRGOS                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0315
*   RFY                                                            0315
*    (R0,                                                          0315
*     R1,                                                          0315
*     R14,                                                         0315
*     RETCODE) RSTD;                /* RESTRICT INTERFACE REGS       */
@RC00273 DS    0H                                                  0316
*   R0=EPALGEP;                     /* SET UP ADDRESS OF LGE         */
         L     R0,EPALGEP(,EPAPTR)                                 0316
*   RFY                                                            0317
*    (R2,                                                          0317
*     R3,                                                          0317
*     R4,                                                          0317
*     R5,                                                          0317
*     R6,                                                          0317
*     R7) RSTD;                     /* REGS 2-7 DESTROYED ACROSS CALL*/
*   CALL ILRVLGE;                   /* CALL ROUTINE TO VALIDITY CHECK
*                                      LGE                           */
         L     @15,@CV02194                                        0318
         BALR  @14,@15                                             0318
*   RFY                                                            0319
*    (R2,                                                          0319
*     R3,                                                          0319
*     R4,                                                          0319
*     R5,                                                          0319
*     R6,                                                          0319
*     R7) UNRSTD;                   /* RELEASE REGS                  */
*   IF RETCODE=ZERO                 /* LGE OK?                       */
*     THEN                                                         0320
         LTR   RETCODE,RETCODE                                     0320
         BNZ   @RF00320                                            0320
*     DO;                           /* YES, TRY TO FREE LGE          */
*       RFY                                                        0322
*        (R3,                                                      0322
*         SAVEPTR) RSTD;            /* RESTRICT INTERFACE REGS       */
*       R3=ASMVTPTR;                /* SET UP ASMVT ADDRESS IN REG 3 */
         L     @12,CVTPTR                                          0323
         L     R3,ASMVTPTR(,@12)                                   0323
*       SAVEPTR=ADDR(SAVERGS);      /* SET UP SAVEAREA ADDRESS       */
         LA    SAVEPTR,SAVERGS                                     0324
*       R1=EPALGEP;                 /* SET UP LGE POINTER IN REG 1   */
         L     R1,EPALGEP(,EPAPTR)                                 0325
*       CALL ILRFRELG;              /* FREE LGE AND LGVTE            */
         L     @15,@CV02191                                        0326
         BALR  @14,@15                                             0326
*       RFY                                                        0327
*        (R3,                                                      0327
*         SAVEPTR) UNRSTD;          /* RELEASE REGS                  */
*       IF RETCODE^=ZERO            /* ILRFRELG DID NOT FIND LGE ON
*                                      QUEUE                         */
*         THEN                                                     0328
         LTR   RETCODE,RETCODE                                     0328
         BZ    @RF00328                                            0328
*         DO;                       /* THEN ISSUE FREEMAIN FOR     0329
*                                      STORAGE                       */
*           RFY                                                    0330
*             R2 RSTD;              /* RESTRICT REG FOR SUBPOOL ID   */
*           R0=LENGTH(LGE);         /* SET UP LENGTH OF FREEMAIN     */
         LA    R0,24                                               0331
*           R1=EPALGEP;             /* SET UP ADDRESS FOR FREEMAIN   */
         L     R1,EPALGEP(,EPAPTR)                                 0332
*           R2=SPID245;             /* SET UP SUBPOOL ID FOR FREEMAIN*/
         LA    R2,245                                              0333
*           RFY                                                    0334
*            (R3,                                                  0334
*             R4,                                                  0334
*             R7) RSTD;             /* RESTRICT INTERFACE REGS       */
*           CALL FREESTOR;          /* ISSUE FREEMAIN FOR SP245      */
         BAL   @14,FREESTOR                                        0335
*           RFY                                                    0336
*            (R3,                                                  0336
*             R4,                                                  0336
*             R7) UNRSTD;           /* RELEASE INTERFACE REGS        */
*         END;                      /* END OF LAST ATTEMPT TO FREE 0337
*                                      LGE STORAGE                   */
*     END;                          /* END OF PROCESSING VALID LGE   */
@RF00328 DS    0H                                                  0339
*                                                                  0339
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCESS LGVT ADDRESS CHECKPOINTED IN EPALGVTP- THIS LGVT      */
*   /* GETMAINED IN ASSIGN PROCESSING IN ILRGOS                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0339
*   IF EPALGVTP^=ZERO               /* LGVT CHECKPOINTED             */
*     THEN                                                         0339
@RF00320 L     @12,EPALGVTP(,EPAPTR)                               0339
         LTR   @12,@12                                             0339
         BZ    @RF00339                                            0339
*     DO;                           /* SET UP TO FREE STORAGE        */
*       R0=EPALSIZE;                /* SET UP LENGTH FOR FREEMAIN    */
         LH    R0,EPALSIZE(,EPAPTR)                                0341
*       R1=EPALGVTP;                /* SET UP ADDRESS OF LGVT        */
         LR    R1,@12                                              0342
*       R2=SPID245;                 /* SET UP SUBPOOL ID FOR FREEMAIN*/
         LA    R2,245                                              0343
*       RFY                                                        0344
*        (R3,                                                      0344
*         R4,                                                      0344
*         R7) RSTD;                 /* RESTRICT INTERFACE REGS       */
*       CALL FREESTOR;              /* ISSUE FREEMAIN FOR SQA        */
         BAL   @14,FREESTOR                                        0345
*       RFY                                                        0346
*        (R3,                                                      0346
*         R4,                                                      0346
*         R7) UNRSTD;               /* RELEASE INTERFACE REGS        */
*     END;                          /* END OF PROCESSING FOR LGVT    */
*                                                                  0348
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCESS SRB CHECKPOINTED IN EPASRB - THIS SRB GETMAINED IN    */
*   /* ASSIGN PROCESSING IN ILRGOS                                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0348
*   IF EPASRB^=ZERO                 /* SRB CHECKPOINTED?             */
*     THEN                                                         0348
@RF00339 L     @12,EPASRB(,EPAPTR)                                 0348
         LTR   @12,@12                                             0348
         BZ    @RF00348                                            0348
*     DO;                           /* YES, SET UP TO FREE SRB       */
*       R0=LENGTH(SRB);             /* SET UP LENGTH FOR FREEMAIN    */
         LA    R0,44                                               0350
*       R1=EPASRB;                  /* SET UP ADDRESS OF SRB         */
         LR    R1,@12                                              0351
*       R2=SPID245;                 /* SET UP SUBPOOL ID FOR FREEMAIN*/
         LA    R2,245                                              0352
*       RFY                                                        0353
*        (R3,                                                      0353
*         R4,                                                      0353
*         R7) RSTD;                 /* RESTRICT INTERFACE REGS       */
*       CALL FREESTOR;              /* ISSUE FREEMAIN FOR SQA        */
         BAL   @14,FREESTOR                                        0354
*       RFY                                                        0355
*        (R3,                                                      0355
*         R4,                                                      0355
*         R7) UNRSTD;               /* RELEASE INTERFACE REGS        */
*     END;                          /* END OF PROCESSING FOR SRB     */
*                                                                  0357
*   /*****************************************************************/
*   /*                                                               */
*   /* FREELCL- GENERAL CLEANUP FOR LOCAL STORAGE - PROCESS BUFFER   */
*   /* ASPCT CHECKPOINTED IN EPABASP - USED BY ILRVSAMI FOR I/O      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0357
*   IF EPABASP^=ZERO                /* BUFFER ASPCT CHECKPOINTED?    */
*     THEN                                                         0357
@RF00348 L     @12,EPABASP(,EPAPTR)                                0357
         LTR   @12,@12                                             0357
         BZ    @RF00357                                            0357
*     DO;                           /* YES, FREE STORAGE             */
*       R0=TWOK;                    /* LENGTH IS 2K                  */
         LA    R0,2048                                             0359
*       R1=EPABASP;                 /* SET UP ADDRESS OF BUFFER ASPCT*/
         LR    R1,@12                                              0360
*       R2=SPID230;                 /* SET UP SUBPOOL ID FOR FREEMAIN*/
         LA    R2,230                                              0361
*       RFY                                                        0362
*        (R3,                                                      0362
*         R4,                                                      0362
*         R7) RSTD;                 /* RESTRICT INTERFACE REGS       */
*       CALL FREESTOR;              /* ISSUE FREEMAIN                */
         BAL   @14,FREESTOR                                        0363
*       RFY                                                        0364
*        (R3,                                                      0364
*         R4,                                                      0364
*         R7) UNRSTD;               /* RELEASE REGS                  */
*     END;                          /* END OF PROCESSING FOR BUFFER
*                                      ASPCT                         */
*                                                                  0366
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCESS REBUILT ASPCT CHECKPOINTED IN EPARBASP- REBUILT ASPCT */
*   /* USED BY GROUP OPERATORS AND ASSIGN PROCESSING IN ILRGOS       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0366
*   IF EPARBASP^=ZERO               /* REBUILT ASPCT CHECKPOINTED?   */
*     THEN                                                         0366
@RF00357 L     @12,EPARBASP(,EPAPTR)                               0366
         LTR   @12,@12                                             0366
         BZ    @RF00366                                            0366
*     DO;                           /* YES, FREE STORAGE             */
*       R0=EPARSIZE;                /* SET UP LENGTH                 */
         LH    R0,EPARSIZE(,EPAPTR)                                0368
*       R1=EPARBASP;                /* SET UP ADDRESS OF REBUILT   0369
*                                      ASPCT                         */
         LR    R1,@12                                              0369
*       R2=SPID255;                 /* SET UP SUBPOOL ID FOR FREEMAIN*/
         LA    R2,255                                              0370
*       RFY                                                        0371
*        (R3,                                                      0371
*         R4,                                                      0371
*         R7) RSTD;                 /* RESTRICT INTERFACE REGS       */
*       CALL FREESTOR;              /* ISSUE FREEMAIN FOR SUBPOOL 255*/
         BAL   @14,FREESTOR                                        0372
*       RFY                                                        0373
*        (R3,                                                      0373
*         R4,                                                      0373
*         R7) UNRSTD;               /* RELEASE REGS                  */
*       RFY                                                        0374
*         R2 UNRSTD;                /* RELEASE REG                   */
*     END;                          /* END OF PROCESSING REBUILT   0375
*                                      ASPCT                         */
*                                                                  0376
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCESS ACTIVE ASPCT CHECKPOINTED IN EPAAASP                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0376
*   IF EPAAASP^=ZERO                /* ACTIVE ASPCT CHECKPOINTED     */
*     THEN                                                         0376
@RF00366 SLR   @12,@12                                             0376
         C     @12,EPAAASP(,EPAPTR)                                0376
         BE    @RF00376                                            0376
*     DO;                           /* YES, FREE ACTIVE ASPCT        */
*       IF LGEPTR^=ZERO             /* VALID LGE POINTER AVAILABLE   */
*         THEN                                                     0378
         L     @11,LGEPTR                                          0378
         CR    @11,@12                                             0378
         BE    @RF00378                                            0378
*         LGEASPCT=ZERO;            /* ZERO ASPCT POINTER            */
         ST    @12,LGEASPCT(,@11)                                  0379
*       R0=LENGTH(ASPCT);           /* SET UP LENGTH OF ASPCT        */
@RF00378 LA    R0,1088                                             0380
*       R1=EPAAASP;                 /* SET UP ADDRESS OF ACTIVE ASPCT*/
         L     R1,EPAAASP(,EPAPTR)                                 0381
*       CALL ILRAFS00;              /* FREE ASPCT AND ALL EXTS       */
         BAL   @14,ILRAFS00                                        0382
*       SDWAPTR=SAVESDWA;           /* RESTORE SDWA ADDRESS-       0383
*                                      DESTROYED BY CALL TO ILRAFS00 */
         L     SDWAPTR,SAVESDWA                                    0383
*       EPAPTR=SDWAPARM->ATAEPATH;  /* RESTORE EPATH ADDRESS IN CASE
*                                      PTR DESTROYED BY ILRAFS00     */
         L     @12,SDWAPARM(,SDWAPTR)                              0384
         L     EPAPTR,ATAEPATH(,@12)                               0384
*     END;                          /* END OF PROCESSING FOR ACTIVE
*                                      ASPCT                         */
*                                                                  0386
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCESSING FOR RETRIEVED ASPCT CHECKPOINTED IN EPARASP- USED  */
*   /* BY ILRVSAMI FOR CHAIN OF ASPCTS THAT I/O HAS COMPLETED FOR    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0386
*   IF EPARASP^=ZERO                /* RETRIEVED ASPCT CHECKPOINTED  */
*     THEN                                                         0386
@RF00376 L     @12,EPARASP(,EPAPTR)                                0386
         LTR   @12,@12                                             0386
         BZ    @RF00386                                            0386
*     DO;                           /* YES, ADDRESS VERIFY, THEN FREE*/
*       R0=TWOK;                    /* SET UP LENGTH OF RETRIEVED  0388
*                                      ASPCT                         */
         LA    R0,2048                                             0388
*       SDWAPTR=SAVESDWA;           /* RESTORE SDWA ADDRESS          */
         L     SDWAPTR,SAVESDWA                                    0389
*       RFY                                                        0390
*        (VERADDR,                                                 0390
*         R3) RSTD;                 /* RESTRICT INTERFACE REG        */
*       VERADDR=EPARASP;            /* SET UP ADDRESS OF RETRIEVED 0391
*                                      ASPCT                         */
         LR    VERADDR,@12                                         0391
*       CALL IEAVEADV;              /* CALL ADDRESS VERIFICATION     */
         L     @15,@CV02192                                        0392
         BALR  @14,@15                                             0392
*       RFY                                                        0393
*        (VERADDR,                                                 0393
*         R3) UNRSTD;               /* RELEASE INTERFACE REG         */
*       IF RETCODE=ZERO             /* ASPCT VERIFY OK               */
*         THEN                                                     0394
         LTR   RETCODE,RETCODE                                     0394
         BNZ   @RF00394                                            0394
*         DO;                       /* YES, CALL ILRAFS00 TO FREE  0395
*                                      STORAGE                       */
*           R1=EPARASP;             /* SET UP ADDRESS OF ASPCT       */
         L     R1,EPARASP(,EPAPTR)                                 0396
*           CALL ILRAFS00;          /* CALL ILRAFS00 TO FREE BASE  0397
*                                      ASPCT AND ITS EXTS            */
         BAL   @14,ILRAFS00                                        0397
*           SDWAPTR=SAVESDWA;       /* RESTORE SDWA ADDRESS-       0398
*                                      DESTROYED BY CALL TO ILRAFS00 */
         L     SDWAPTR,SAVESDWA                                    0398
*           EPAPTR=SDWAPARM->ATAEPATH;/* RESTORE EPATH ADDRESS IN  0399
*                                      CASE PTR DESTROYED BY ILRAFS00*/
         L     @12,SDWAPARM(,SDWAPTR)                              0399
         L     EPAPTR,ATAEPATH(,@12)                               0399
*         END;                      /* END OF PROCESSING GOOD ASPCT  */
*     END;                          /* END OF PROCESSING FOR       0401
*                                      RETRIEVED ASPCT               */
@RF00394 DS    0H                                                  0402
*   RFY                                                            0402
*    (R0,                                                          0402
*     R1,                                                          0402
*     R14,                                                         0402
*     RETCODE) UNRSTD;              /* RELEASE REGS                  */
@RF00386 DS    0H                                                  0403
*                                                                  0403
*   /*****************************************************************/
*   /*                                                               */
*   /* FREEWKA- GENERAL CLEANUP FOR WORKAREAS                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0403
*   RFY                                                            0403
*    (R0,                                                          0403
*     R1,                                                          0403
*     R14,                                                         0403
*     RETCODE) RSTD;                /* RESTRICT INTERFACE REGS       */
*                                                                  0403
*   /*****************************************************************/
*   /*                                                               */
*   /* RETURN ACE TO ACE POOL                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0404
*   IF EPAACE^=ZERO                 /* ACE STILL CHECKPOINTED?       */
*     THEN                                                         0404
         L     @12,EPAACE(,EPAPTR)                                 0404
         LTR   @12,@12                                             0404
         BZ    @RF00404                                            0404
*     DO;                           /* YES, RETURN ACE TO POOL       */
*       R1=EPAACE;                  /* SET UP ADDRESS OF ACE         */
         LR    R1,@12                                              0406
*       RFY                                                        0407
*        (R11,                                                     0407
*         R12) RSTD;                /* RESTRICT WORK REGS FOR GMA    */
*                                                                  0407
*       /*************************************************************/
*       /*                                                           */
*       /* BEGIN ILRGMA MACRO EXPANSION                              */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0408
*       DO;                         /* ILRGMA FREE                 0408
*                                      CELL(ACE)WORKREGS(R11,R12)    */
*         DECLARE                   /* ASMVT VECTOR TO ILRPEX        */
*           ILRPEX ENTRY BASED(ASMPEX) VALRG(0);                   0409
*         DECLARE                   /* MAP FOR CELL CONTROL WORDS    */
*           1 GMACELL BASED BDY(WORD),                             0410
*            2 GMANEXT PTR(31);     /* PTR NEXT FREE CELL            */
*         RESPECIFY                                                0411
*          (R0,                                                    0411
*           R1,                                                    0411
*           R11,                                                   0411
*           R12,                                                   0411
*           R14,                                                   0411
*           R15) RESTRICTED;                                       0411
*         RESPECIFY                                                0412
*           ASMPOOLS BASED(R11);                                   0412
*         RESPECIFY                                                0413
*           GMACELL BASED(R1);                                     0413
*         R11=ADDR(ASMACEPC);                                      0414
         L     @07,CVTPTR                                          0414
         L     R11,ASMVTPTR(,@07)                                  0414
         LA    R11,ASMACEPC(,R11)                                  0414
*         LM(R14,R15,ASMCPRSQ);     /* GET CONTENTS OF Q             */
         LM    R14,R15,ASMCPRSQ(R11)                               0415
*GMA00071:                                                         0416
*         IF R14^=0 THEN            /* TEST RESERVE Q                */
GMA00071 LTR   R14,R14                                             0416
         BZ    @RF00416                                            0416
*           DO;                     /* REPLENISH ACE RESERVE Q       */
*             R0=R14-1;             /* SET UP FOR COMPARE AND SWAP   */
         LR    R0,R14                                              0418
         BCTR  R0,0                                                0418
*             GMANEXT=R15;          /* CELL TO FREE IN R1            */
         ST    R15,GMANEXT(,R1)                                    0419
*             CDS(R14,R0,ASMCPRSQ); /* ADD CELL TO RESERVE Q         */
         CDS   R14,R0,ASMCPRSQ(R11)                                0420
*             BC(7,GMA00071);                                      0421
         BC    7,GMA00071                                          0421
*           END;                                                   0422
*         ELSE                                                     0423
*           DO;                     /* RETURN ACE TO NORMAL Q        */
         B     @RC00416                                            0423
@RF00416 DS    0H                                                  0424
*             R14=ASMCPAVL;                                        0424
         L     R14,ASMCPAVL(,R11)                                  0424
*GMA00072:                                                         0425
*             GMANEXT=R14;          /* PUT ADDR CURRENT FIRST IN   0425
*                                      INPUT CELL                    */
GMA00072 ST    R14,GMANEXT(,R1)                                    0425
*             CS(R14,R1,ASMCPAVL);  /* ADD INPUT CELL TO POOL        */
         CS    R14,@01,ASMCPAVL(R11)                               0426
*             BC(7,GMA00072);                                      0427
         BC    7,GMA00072                                          0427
*           END;                    /* ACE RETURNED TO NORMAL Q      */
*         RESPECIFY                                                0429
*          (R0,                                                    0429
*           R1,                                                    0429
*           R11,                                                   0429
*           R12,                                                   0429
*           R14,                                                   0429
*           R15) UNRESTRICTED;                                     0429
@RC00416 DS    0H                                                  0430
*       END;                        /* ILRGMA FREE                 0430
*                                      CELL(ACE)WORKREGS(R11,R12)    */
*                                                                  0430
*       /*************************************************************/
*       /*                                                           */
*       /* END ILRGMA MACRO EXPANSION                                */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0431
*                                   /* USE GMA TO FREE ACE           */
*       RFY                                                        0431
*        (R11,                                                     0431
*         R12) UNRSTD;              /* RELEASE WORK REGS             */
*     END;                          /* END OF PROCESSING FOR ACE     */
*   RFY                                                            0433
*    (R0,                                                          0433
*     R1,                                                          0433
*     R14,                                                         0433
*     R15) UNRSTD;                  /* RELEASE REGS                  */
@RF00404 DS    0H                                                  0434
*                                                                  0434
*   /*****************************************************************/
*   /*                                                               */
*   /* RETURN ILRVSAMI WORKAREA TO SWK POOL                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0434
*   RFY                                                            0434
*    (R0,                                                          0434
*     R1,                                                          0434
*     R14,                                                         0434
*     R15) RSTD;                    /* RESTRICT INTERFACE REGS       */
*   IF EPAVSAMI=ON                  /* ILRVSAMI IN CONTROL?          */
*       &EPAVWKA^=ZERO              /* AND WORKAREA CHECKPOINTED     */
*     THEN                                                         0435
         TM    EPAVSAMI(EPAPTR),B'10000000'                        0435
         BNO   @RF00435                                            0435
         L     @12,EPAVWKA(,EPAPTR)                                0435
         LTR   @12,@12                                             0435
         BZ    @RF00435                                            0435
*     DO;                           /* YES, RETURN WORKAREA TO POOL  */
*       R0=SWKLN;                   /* SET UP LENGTH OF WORKAREA     */
         LA    R0,512                                              0437
*       SDWAPTR=SAVESDWA;           /* RESTORE SDWA ADDRESS          */
         L     SDWAPTR,SAVESDWA                                    0438
*       RFY                                                        0439
*        (VERADDR,                                                 0439
*         R3) RSTD;                 /* RESTRICT INTERFACE REG        */
*       VERADDR=EPAVWKA;            /* SET UP ADDRESS OF WORKAREA    */
         LR    VERADDR,@12                                         0440
*       CALL IEAVEADV;              /* ADDRESS VERIFY STORAGE        */
         L     @15,@CV02192                                        0441
         BALR  @14,@15                                             0441
*       RFY                                                        0442
*        (VERADDR,                                                 0442
*         R3) UNRSTD;               /* RELEASE INTERFACE REG         */
*       IF RETCODE=ZERO             /* STORAGE VERIFY OK?            */
*         THEN                                                     0443
         LTR   RETCODE,RETCODE                                     0443
         BNZ   @RF00443                                            0443
*         DO;                       /* YES, FREE STORAGE             */
*           R1=EPAVWKA;             /* SET UP ADDRESS OF WORK AREA   */
         L     R1,EPAVWKA(,EPAPTR)                                 0445
*           RFY                                                    0446
*            (R11,                                                 0446
*             R12) RSTD;            /* RESTRICT WORK REGS            */
*                                                                  0446
*           /*********************************************************/
*           /*                                                       */
*           /* BEGIN ILRGMA MACRO EXPANSION                          */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0447
*           DO;                     /* ILRGMA FREE                 0447
*                                      CELL(SWK)WORKREGS(R11,R12)    */
*             RESPECIFY                                            0448
*              (R0,                                                0448
*               R1,                                                0448
*               R11,                                               0448
*               R12,                                               0448
*               R14,                                               0448
*               R15) RESTRICTED;                                   0448
*             RESPECIFY                                            0449
*               ASMPOOLS BASED(R11);                               0449
*             RESPECIFY                                            0450
*               GMACELL BASED(R1);                                 0450
*             R11=ADDR(ASMSWKPC);                                  0451
         L     @07,CVTPTR                                          0451
         L     R11,ASMVTPTR(,@07)                                  0451
         LA    R11,ASMSWKPC(,R11)                                  0451
*             R14=ASMCPAVL;                                        0452
         L     R14,ASMCPAVL(,R11)                                  0452
*GMA00082:                                                         0453
*             GMANEXT=R14;          /* PUT ADDR CURRENT FIRST IN   0453
*                                      INPUT CELL                    */
GMA00082 ST    R14,GMANEXT(,R1)                                    0453
*             CS(R14,R1,ASMCPAVL);  /* ADD INPUT CELL TO POOL        */
         CS    R14,@01,ASMCPAVL(R11)                               0454
*             BC(7,GMA00082);                                      0455
         BC    7,GMA00082                                          0455
*             RESPECIFY                                            0456
*              (R0,                                                0456
*               R1,                                                0456
*               R11,                                               0456
*               R12,                                               0456
*               R14,                                               0456
*               R15) UNRESTRICTED;                                 0456
*           END;                    /* ILRGMA FREE                 0457
*                                      CELL(SWK)WORKREGS(R11,R12)    */
*                                                                  0457
*           /*********************************************************/
*           /*                                                       */
*           /* END ILRGMA MACRO EXPANSION                            */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0458
*                                   /* ISSUE GMA TO RETURN WORKAREA
*                                      TO POOL                       */
*           RFY                                                    0458
*            (R11,                                                 0458
*             R12) UNRSTD;          /* RELEASE WORK REGS             */
*         END;                      /* END OF FREEING WORKAREA       */
*     END;                          /* END OF PROCESSING VSAMI     0460
*                                      WORKAREA                      */
@RF00443 DS    0H                                                  0461
*   RFY                                                            0461
*    (R0,                                                          0461
*     R1,                                                          0461
*     R14,                                                         0461
*     R15) UNRSTD;                  /* RELEASE REGS                  */
@RF00435 DS    0H                                                  0462
*                                                                  0462
*   /*****************************************************************/
*   /*                                                               */
*   /* RETURN GROUP OPERATORS WORKAREA TO BWK POOL                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0462
*   RFY                                                            0462
*    (R0,                                                          0462
*     R1,                                                          0462
*     R14,                                                         0462
*     R15) RSTD;                    /* RESTRICT INTERFACE REGS       */
*   IF EPAGRPOP^=NONE               /* ANY GROUP OPERATOR IN CONTROL?*/
*       &EPAOWKA^=ZERO              /* AND WORKAREA CHECKPOINTED     */
*     THEN                                                         0463
         TM    EPAGRPOP(EPAPTR),B'01110000'                        0463
         BZ    @RF00463                                            0463
         L     @12,EPAOWKA(,EPAPTR)                                0463
         LTR   @12,@12                                             0463
         BZ    @RF00463                                            0463
*     DO;                           /* YES, RETURN WORKAREA TO POOL  */
*       R0=BWKLN;                   /* SET UP LENGTH OF WORKAREA     */
         LA    R0,256                                              0465
*       SDWAPTR=SAVESDWA;           /* RESTORE SDWA ADDRESS          */
         L     SDWAPTR,SAVESDWA                                    0466
*       RFY                                                        0467
*        (VERADDR,                                                 0467
*         R3) RSTD;                 /* RESTRICT INTERFACE REG        */
*       VERADDR=EPAOWKA;            /* SET UP ADDRESS OF WORKAREA    */
         LR    VERADDR,@12                                         0468
*       CALL IEAVEADV;              /* ADDRESS VERIFY WORKAREA       */
         L     @15,@CV02192                                        0469
         BALR  @14,@15                                             0469
*       RFY                                                        0470
*        (VERADDR,                                                 0470
*         R3) UNRSTD;               /* RELEASE INTERFACE REG         */
*       IF RETCODE=ZERO             /* STORAGE VERIFY OK             */
*         THEN                                                     0471
         LTR   RETCODE,RETCODE                                     0471
         BNZ   @RF00471                                            0471
*         DO;                       /* FREE WORKAREA                 */
*           R1=EPAOWKA;             /* SET UP ADDRESS OF WORKAREA    */
         L     R1,EPAOWKA(,EPAPTR)                                 0473
*           RFY                                                    0474
*            (R11,                                                 0474
*             R12) RSTD;            /* RESTRICT WORK REGS            */
*                                                                  0474
*           /*********************************************************/
*           /*                                                       */
*           /* BEGIN ILRGMA MACRO EXPANSION                          */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0475
*           DO;                     /* ILRGMA FREE                 0475
*                                      CELL(BWK)WORKREGS(R11,R12)    */
*             RESPECIFY                                            0476
*              (R0,                                                0476
*               R1,                                                0476
*               R11,                                               0476
*               R12,                                               0476
*               R14,                                               0476
*               R15) RESTRICTED;                                   0476
*             RESPECIFY                                            0477
*               ASMPOOLS BASED(R11);                               0477
*             RESPECIFY                                            0478
*               GMACELL BASED(R1);                                 0478
*             R11=ADDR(ASMBWKPC);                                  0479
         L     @07,CVTPTR                                          0479
         L     R11,ASMVTPTR(,@07)                                  0479
         LA    R11,ASMBWKPC(,R11)                                  0479
*             R14=ASMCPAVL;                                        0480
         L     R14,ASMCPAVL(,R11)                                  0480
*GMA00092:                                                         0481
*             GMANEXT=R14;          /* PUT ADDR CURRENT FIRST IN   0481
*                                      INPUT CELL                    */
GMA00092 ST    R14,GMANEXT(,R1)                                    0481
*             CS(R14,R1,ASMCPAVL);  /* ADD INPUT CELL TO POOL        */
         CS    R14,@01,ASMCPAVL(R11)                               0482
*             BC(7,GMA00092);                                      0483
         BC    7,GMA00092                                          0483
*             RESPECIFY                                            0484
*              (R0,                                                0484
*               R1,                                                0484
*               R11,                                               0484
*               R12,                                               0484
*               R14,                                               0484
*               R15) UNRESTRICTED;                                 0484
*           END;                    /* ILRGMA FREE                 0485
*                                      CELL(BWK)WORKREGS(R11,R12)    */
*                                                                  0485
*           /*********************************************************/
*           /*                                                       */
*           /* END ILRGMA MACRO EXPANSION                            */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0486
*                                   /* USE GMA TO RETURN WORKAREA TO
*                                      POOL                          */
*           RFY                                                    0486
*            (R11,                                                 0486
*             R12) UNRSTD;          /* RELEASE WORK REGS             */
*         END;                      /* END OF FREEING WORKAREA       */
*     END;                          /* END OF PROCESSING GROUP     0488
*                                      OPERATOR WORKAREA             */
@RF00471 DS    0H                                                  0489
*   RFY                                                            0489
*    (R0,                                                          0489
*     R1,                                                          0489
*     R14,                                                         0489
*     R15) UNRSTD;                  /* RELEASE REGS                  */
@RF00463 DS    0H                                                  0490
*                                                                  0490
*   /*****************************************************************/
*   /*                                                               */
*   /* FREE ILRGOS RESOURCES                                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0490
*   RFY                                                            0490
*     SAVERG RSTD;                  /* RESTRICT SPECIAL REG          */
*   SAVERG=SAVESDWA;                /* SAVE SDWA ADDRESS ACROSS    0491
*                                      FREEMAIN FOR WORKAREA         */
         L     SAVERG,SAVESDWA                                     0491
*   RFY                                                            0492
*     EPAPTR UNRSTD;                /* RELEASE EPATH REG             */
*   RFY                                                            0493
*     ATAPTR RSTD;                  /* RESTRICT ATA ADDRESS          */
*   ATAPTR=SAVERG->SDWAPARM;        /* SET UP ATA ADDRESS            */
         L     ATAPTR,SDWAPARM(,SAVERG)                            0494
*                                                                  0495
*   /*****************************************************************/
*   /*                                                               */
*   /* FREE ILRGOS WORKAREA                                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0495
*   IF ATAWORKA^=ZERO               /* YES, CHECK IF WORKAREA      0495
*                                      CHECKPOINTED?                 */
*     THEN                                                         0495
         SLR   @14,@14                                             0495
         L     @12,ATAWORKA(,ATAPTR)                               0495
         CR    @12,@14                                             0495
         BE    @RF00495                                            0495
*     IF SAVERG->SDWACOMP=INDFRR    /* FRR ENTRY POINT?              */
*       THEN                                                       0496
         C     @14,SDWACOMP(,SAVERG)                               0496
         BNE   @RF00496                                            0496
*       DO;                         /* YES, USE GMA TO FREE WORKAREA */
*                                                                  0497
*         /***********************************************************/
*         /*                                                         */
*         /* FRR- RETURN ILRGOS WORKAREA TO BWK POOL                 */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0498
*         RFY                                                      0498
*          (R0,                                                    0498
*           R1,                                                    0498
*           R14,                                                   0498
*           R15) RSTD;              /* RESTRICT INTERFACE REGS       */
*         R0=BWKLN;                 /* SET UP LENGTH OF WORKAREA     */
         LA    R0,256                                              0499
*         RFY                                                      0500
*          (VERADDR,                                               0500
*           R3) RSTD;               /* RESTRICT INTERFACE REG        */
*         VERADDR=ATAWORKA;         /* SET UP ADDRESS OF WORKAREA    */
         LR    VERADDR,@12                                         0501
*         CALL IEAVEADV;            /* ADDRESS VERIFY WORKAREA       */
         L     @15,@CV02192                                        0502
         BALR  @14,@15                                             0502
*         RFY                                                      0503
*          (VERADDR,                                               0503
*           R3) UNRSTD;             /* RELEASE INTERFACE REG         */
*         IF RETCODE=ZERO           /* STORAGE CHECK OK              */
*           THEN                                                   0504
         LTR   RETCODE,RETCODE                                     0504
         BNZ   @RF00504                                            0504
*           DO;                     /* YES, RETURN WORKAREA TO POOL  */
*             R1=ATAWORKA;          /* SET UP WORKAREA ADDRESS       */
         L     R1,ATAWORKA(,ATAPTR)                                0506
*             RFY                                                  0507
*              (R11,                                               0507
*               R12) RSTD;          /* RESTRICT WORK REGS            */
*                                                                  0507
*             /*******************************************************/
*             /*                                                     */
*             /* BEGIN ILRGMA MACRO EXPANSION                        */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0508
*             DO;                   /* ILRGMA FREE                 0508
*                                      CELL(BWK)WORKREGS(R11,R12)    */
*               RESPECIFY                                          0509
*                (R0,                                              0509
*                 R1,                                              0509
*                 R11,                                             0509
*                 R12,                                             0509
*                 R14,                                             0509
*                 R15) RESTRICTED;                                 0509
*               RESPECIFY                                          0510
*                 ASMPOOLS BASED(R11);                             0510
*               RESPECIFY                                          0511
*                 GMACELL BASED(R1);                               0511
*               R11=ADDR(ASMBWKPC);                                0512
         L     @07,CVTPTR                                          0512
         L     R11,ASMVTPTR(,@07)                                  0512
         LA    R11,ASMBWKPC(,R11)                                  0512
*               R14=ASMCPAVL;                                      0513
         L     R14,ASMCPAVL(,R11)                                  0513
*GMA00102:                                                         0514
*               GMANEXT=R14;        /* PUT ADDR CURRENT FIRST IN   0514
*                                      INPUT CELL                    */
GMA00102 ST    R14,GMANEXT(,R1)                                    0514
*               CS(R14,R1,ASMCPAVL);/* ADD INPUT CELL TO POOL        */
         CS    R14,@01,ASMCPAVL(R11)                               0515
*               BC(7,GMA00102);                                    0516
         BC    7,GMA00102                                          0516
*               RESPECIFY                                          0517
*                (R0,                                              0517
*                 R1,                                              0517
*                 R11,                                             0517
*                 R12,                                             0517
*                 R14,                                             0517
*                 R15) UNRESTRICTED;                               0517
*             END;                  /* ILRGMA FREE                 0518
*                                      CELL(BWK)WORKREGS(R11,R12)    */
*                                                                  0518
*             /*******************************************************/
*             /*                                                     */
*             /* END ILRGMA MACRO EXPANSION                          */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0519
*                                   /* USE GMA TO RETURN WORKAREA TO
*                                      POOL                          */
*             RFY                                                  0519
*              (R11,                                               0519
*               R12) UNRSTD;        /* RELEASE REGS                  */
*           END;                    /* END OF FREEING WORKAREA       */
*         RFY                                                      0521
*          (R0,                                                    0521
*           R1,                                                    0521
*           R14,                                                   0521
*           R15) UNRSTD;            /* RELEASE REGS                  */
@RF00504 DS    0H                                                  0522
*       END;                        /* END OF PROCESSING WORKAREA    */
*     ELSE                                                         0523
*       DO;                         /* ESTAE ENTRY POINT             */
*                                                                  0523
         B     @RC00496                                            0523
@RF00496 DS    0H                                                  0524
*         /***********************************************************/
*         /*                                                         */
*         /* ESTAE- ISSUE FREEMAIN FOR ILRGOS WORKAREA               */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0524
*         RFY                                                      0524
*          (R0,                                                    0524
*           R1,                                                    0524
*           R14,                                                   0524
*           R15) RSTD;              /* RESTRICT INTERFACE REGS       */
*         RFY                                                      0525
*           R2 RSTD;                /* RESTRICT REG FOR SUBPOOL ID   */
*         R1=ATAWORKA;              /* SET UP ADDRESS OF WORKAREA    */
         L     R1,ATAWORKA(,ATAPTR)                                0526
*         R0=BWKLN;                 /* SET UP LENGTH OF FREEMAIN     */
         LA    R0,256                                              0527
*         R2=SPID245;               /* SET UP SUBPOOL ID FOR FREEMAIN*/
         LA    R2,245                                              0528
*         RFY                                                      0529
*          (R3,                                                    0529
*           R4,                                                    0529
*           R7) RSTD;               /* RESTRICT INTERFACE REGS       */
*         CALL FREESTOR;            /* ISSUE FREEMAIN FOR SUBPOOL 245*/
         BAL   @14,FREESTOR                                        0530
*         RFY                                                      0531
*          (R3,                                                    0531
*           R4,                                                    0531
*           R7) UNRSTD;             /* RELEASE REGS                  */
*                                                                  0532
*         /***********************************************************/
*         /*                                                         */
*         /* FREE AUTOMATIC DATA AREA OBTAINED FOR ESTAE ENTRY POINT-*/
*         /* ADDRESSABILITY NO LONGER AVAILABLE FOR VARIABLES IN     */
*         /* AUTOMATIC DATA AREA                                     */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0532
*         R0=LNDATA;                /* SET UP LENGTH OF DATAAREA     */
         LA    R0,200                                              0532
*         R1=DATARG;                /* SET UP ADDRESS OF DATA AREA   */
         LR    R1,DATARG                                           0533
*         R2=SPID245;               /* SET UP SUBPOOL ID FOR FREEMAIN*/
         LA    R2,245                                              0534
*         RFY                                                      0535
*          (R3,                                                    0535
*           R4,                                                    0535
*           R7) RSTD;               /* RESTRICT INTERFACE REGS       */
*         CALL FREESTOR;            /* ISSUE FREEMAIN FOR SUBPOOL 245*/
         BAL   @14,FREESTOR                                        0536
*         RFY                                                      0537
*          (R3,                                                    0537
*           R4,                                                    0537
*           R7) UNRSTD;             /* RELEASE REGS                  */
*         RFY                                                      0538
*           R2 UNRSTD;              /* RELEASE REG                   */
*         RFY                                                      0539
*          (R0,                                                    0539
*           R1,                                                    0539
*           R14,                                                   0539
*           R15) UNRSTD;            /* RELEASE REGS                  */
*         RFY                                                      0540
*          (R11,                                                   0540
*           R12,                                                   0540
*           R13,                                                   0540
*           R14) RSTD;              /* RESTRICT INTERFACE REGS       */
*                                                                  0540
*         /***********************************************************/
*         /*                                                         */
*         /* FREE ALL LOCKS HELD DURING ESTAE ENTRY POINT            */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0541
*         GENERATE REFS(PSALITA,PSAMPSW);                          0541
*                                  /* RELEASE ALL LOCKS HELD */
RELLOCK SETLOCK RELEASE,TYPE=ALL,                                     **
               RELATED=(VIO-ESTAE-ONLY,ILRGOS01(OBTLOCAL))
*         RFY                                                      0542
*          (R11,                                                   0542
*           R12,                                                   0542
*           R13,                                                   0542
*           R14) UNRSTD;            /* RELEASE REGS                  */
*         RFY                                                      0543
*           ENDADDR RSTD;           /* RESTRICT REG FOR ADDR OF SDWA
*                                      END                           */
*         ENDADDR=SAVERG+LENGTH(SDWA);/* CALCULATE END ADDR OF SDWA  */
         LA    ENDADDR,512                                         0544
         ALR   ENDADDR,SAVERG                                      0544
*         GEN;                                                     0545
*        /* PAGEFREE SDWA */
FREESDWA PGFREE R,A=(SAVERG),EA=(ENDADDR),                            **
               RELATED=(SDWA,ILRGOS01(FIXSDWA))
*         RFY                                                      0546
*           ENDADDR UNRSTD;         /* RELEASE REG                   */
*       END;                        /* END OF ESTAE PROCESSING       */
*                                                                  0548
*   /*****************************************************************/
*   /*                                                               */
*   /* SET UP FOR EXIT                                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0548
*   RFY                                                            0548
*     ATAPTR UNRSTD;                /* RELEASE ATA REGISTER          */
@RC00496 DS    0H                                                  0548
@RF00495 DS    0H                                                  0549
*   RFY                                                            0549
*    (R0,                                                          0549
*     R1,                                                          0549
*     R14,                                                         0549
*     RETCODE) UNRSTD;              /* RELEASE INTERFACE REGS        */
*PREEXIT:                                                          0550
*   ;                               /* RESTORE SDWA ADDRESS BEFORE 0550
*                                      EXIT                          */
PREEXIT  DS    0H                                                  0551
*   SDWAPTR=SAVERG;                 /* RESTORE SDWA ADDRESS-       0551
*                                      DESTROYED DURING LAST FREEMAIN
*                                      OR ILRGMA                     */
         LR    SDWAPTR,SAVERG                                      0551
*   RFY                                                            0552
*     SAVERG UNRSTD;                /* RELEASE REG                   */
*                                                                  0553
*/********************************************************************/
*/*                                                                  */
*/*       EXIT: COMMON EXIT PROCESSING                               */
*/*                                                                  */
*/*       INPUT: REG 1= ADDRESS SDWA                                 */
*/*                                                                  */
*/*       PROCESS: RETURN TO RTM                                     */
*/*                                                                  */
*/********************************************************************/
*                                                                  0553
*EXIT:                                                             0553
*   ;                               /* EXIT PROCESSING FOR MODULE    */
EXIT     DS    0H                                                  0554
*   RFY                                                            0554
*     R14 RSTD;                     /* RESTRICT REG 14               */
*   IF SDWACOMP=INDFRR              /* FRR ENTRY POINT?              */
*     THEN                          /* YES, RESTORE R14 AND RETURN   */
         ICM   @15,15,SDWACOMP(SDWAPTR)                            0555
         BNZ   @RF00555                                            0555
*     R14=SDWAPARM->ATAWORD1;       /* RESTORE REG 14                */
         L     @12,SDWAPARM(,SDWAPTR)                              0556
         L     R14,ATAWORD1(,@12)                                  0556
*   ELSE                                                           0557
*     DO;                           /* ESTAE ENTRY POINT             */
         B     @RC00555                                            0557
@RF00555 DS    0H                                                  0558
*       RFY                                                        0558
*         SAVEPTR RSTD;             /* RESTRICT SAVE AREA POINTER    */
*       SAVEPTR=SDWACOMP;           /* RESTORE SAVEAREA ADDRESS      */
         L     SAVEPTR,SDWACOMP(,SDWAPTR)                          0559
*       RFY                                                        0560
*        (R14,                                                     0560
*         R12) RSTD;                /* RESTRICT REFERENCED REGS      */
*       LM(R14,R12,RESTORE);        /* RESTORE REGS                  */
         LM    R14,R12,RESTORE(SAVEPTR)                            0561
*     END;                          /* END OF ESTAE PROCESSING       */
*   RETURN;                         /* RETURN TO RTM                 */
@EL00001 DS    0H                                                  0563
@EF00001 DS    0H                                                  0563
@ER00001 BR    @14                                                 0563
*   RFY                                                            0564
*    (SAVERG,                                                      0564
*     R14,                                                         0564
*     R12) UNRSTD;                  /* RELEASE REGS                  */
*                                                                  0565
*/********************************************************************/
*/*                                                                  */
*/*       FREESTOR: FREE STORAGE USING FREEMAIN                      */
*/*                                                                  */
*/*       INPUT: REG 0= SUBPOOL ID AND LENGTH OF STORAGE             */
*/*              REG 1= ADDRESS OF STORAGE TO BE FREED               */
*/*                                                                  */
*/*       PROCESS: ISSUE FREEMAIN MACRO FOR SPECIFIED STORAGE        */
*/*                                                                  */
*/*       OUTPUT: NONE- FREEMAIN RETURN CODE NOT CHECKED             */
*/*                                                                  */
*/********************************************************************/
*                                                                  0565
*FREESTOR:                                                         0565
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/* ISSUE FREEMAIN RTN            */
         B     @EL00001                                            0565
FREESTOR DS    0H                                                  0566
*   RFY                                                            0566
*    (R0,                                                          0566
*     R1,                                                          0566
*     R14,                                                         0566
*     R15) RSTD;                    /* RESTRICT INTERFACE REGS       */
*   RFY                                                            0567
*     R2 RSTD;                      /* RESTRICT INTERFACE REG        */
*   RFY                                                            0568
*     SAVE14 RSTD;                  /* RESTRICT REG                  */
*   SAVE14=R14;                     /* SAVE RETURN ADDRESS ACROSS  0569
*                                      FREEMAIN                      */
         LR    SAVE14,R14                                          0569
*   RFY                                                            0570
*    (R3,                                                          0570
*     R4,                                                          0570
*     R7) RSTD;                     /* RESTRICT INTERFACE REGS       */
*   R4=PSATOLD;                     /* SET UP CURRENT TCB ADDRESS    */
         L     R4,PSATOLD                                          0571
*   R7=PSAAOLD;                     /* SET UP CURRENT ASCB ADDRESS   */
         L     R7,PSAAOLD                                          0572
*   GENERATE;                                                      0573
*                    /* ISSUE FREEMAIN */
         FREEMAIN RC,A=(1),LV=(0),SP=(2),BRANCH=YES,                  **
               RELATED=(ILRGOS01)
*   RFY                                                            0574
*    (R3,                                                          0574
*     R4,                                                          0574
*     R7) UNRSTD;                   /* RELEASE REGS                  */
*   R14=SAVE14;                     /* RESTORE RETURN ADDRESS        */
         LR    R14,SAVE14                                          0575
*   RFY                                                            0576
*     R2 UNRSTD;                    /* RELEASE INTERFACE REG         */
*   RFY                                                            0577
*    (R0,                                                          0577
*     R1,                                                          0577
*     R14,                                                         0577
*     R15,                                                         0577
*     SAVE14) UNRSTD;               /* RELEASE REGS                  */
*   END FREESTOR;                   /* END OF FREE STORAGE ROUTINE   */
@EL00002 DS    0H                                                  0578
@EF00002 DS    0H                                                  0578
@ER00002 BR    @14                                                 0578
*                                                                  0579
*/********************************************************************/
*/*                                                                  */
*/*       ALSPROC: FLAG LPMES AS UNSAVED.                            */
*/*                                                                  */
*/*       INPUT: REG 0= CORRESPONDING RPN                            */
*/*              REG 1= ADDRESS OF LPME                              */
*/*                                                                  */
*/*       PROCESS: TURN OFF SAVE FLAG IN LPME                        */
*/*                                                                  */
*/*       OUTPUT: LPME MARKED UNSAVED                                */
*/*                                                                  */
*/********************************************************************/
*                                                                  0579
*ALSPROC:                                                          0579
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0579
ALSPROC  DS    0H                                                  0580
*   RFY                                                            0580
*    (R14,                                                         0580
*     R1) RSTD;                     /* RESTRICT INTERFACE REGS       */
*   R1->ASPLSAVE=OFF;               /* MARK LPME UNSAVED             */
         NI    ASPLSAVE(R1),B'10111111'                            0581
*   END ALSPROC;                                                   0582
@EL00003 DS    0H                                                  0582
@EF00003 DS    0H                                                  0582
@ER00003 BR    @14                                                 0582
*   RFY                                                            0583
*    (R14,                                                         0583
*     R1) UNRSTD;                                                  0583
*                                                                  0584
*/*  MACCOMP Y-4SC1CW/PZD81                                          */
*/*  MACSTAT Y-475082/415304                                         */
*/********************************************************************/
*/*                                                                  */
*/*  NAME:  ILRAFS00                                                 */
*/*                                                                  */
*/*  STATUS:  OS/VS2 RELEASE 4.1, LEVEL 0                            */
*/*                                                                  */
*/*  ENTRY POINT:  ILRAFS00                                          */
*/*                                                                  */
*/*  FUNCTION:  THIS SUBROUTINE FREES AN ASPCT.                      */
*/*                                                                  */
*/*  INPUT:  ADDRESS OF ASPCT IN REGISTER 1.                         */
*/*          LENGTH OF ASPCT IN REGISTER 0.                          */
*/*                                                                  */
*/*  PROCESS:  TWO LOOPS, ONE TO FREE ASST EXTENSIONS AND ONE TO     */
*/*            FREE LPME EXTENSIONS, ARE EXECUTED.  EACH USES THE    */
*/*            SUBROUTINE AFSFREE TO INVOKE FREEMAIN.  A FINAL CALL  */
*/*            TO AFSFREE FREES THE BASE ASPCT EXTN.                 */
*/*                                                                  */
*/*  OUTPUT:  RETURN CODE IN REGISTER 15.                            */
*/*             00 = NORMAL RETURN                                   */
*/*             44 = FREEMAIN FAILURE                                */
*/*                                                                  */
*/*  EXIT-NORMAL:  RETURN TO CALLER WITH RETURN CODE (SEE OUTPUT)    */
*/*                                                                  */
*/*  EXIT-ERROR:  NONE                                               */
*/*                                                                  */
*/*  EXTERNAL REFERENCES:  FREEMAIN                                  */
*/*                                                                  */
*/*  REGISTERS CLOBBERED:  0 AND 1, 14 AND 15                        */
*/*                                                                  */
*/*  MAPPING MACROS USED:  ILRASPCT                                  */
*/*                                                                  */
*/*  NOTES:  DUE TO PLS OPTIMIZATION, RESTRICT ALL NECESSARY         */
*/*          REGISTERS AROUND THIS ROUTINE.                          */
*/*          INVOKING ROUTINE MUST HOLD THE LOCAL LOCK, OR HAVE      */
*/*          SPECIFIED %AFSSVC=YES.                                  */
*/*          ALL LABELS AND DATA AREAS CREATED BY THIS ROUTINE BEGIN */
*/*          WITH THE THREE CHARACTERS 'AFS'.  THE CALLING MODULE    */
*/*          MUST INCLUDE SUFFICIENT WORKSPACE FOR THIS ROUTINE'S    */
*/*          DATA AREAS.  THIS AMOUNT IS COMPILER DEPENDENT WITH A   */
*/*          MAXIMUM REQUIREMENT OF 46 BYTES.  THIS ROUTINE ALSO     */
*/*          REQUIRES THAT THE CALLING MODULE DECLARES REGISTERS     */
*/*          R0-R15.  THE MAPPING MACRO LISTED ABOVE MUST BE         */
*/*          INCLUDED.  THE BASE POINTER FOR THE ASPCT IS NOT        */
*/*          REQUIRED BY THIS SUBROUTINE.                            */
*/*                                                                  */
*/*  METHOD OF ACCESS:                                               */
*/*          %AFSSVC='YES' IF THE INVOKING ROUTINE MUST USE AN SVC   */
*/*          %AFSSVC='NO' IF BRANCH ENTRY REQUIRED                   */
*/*          %INCLUDE SYSLIB(ILRAFS00)                               */
*/********************************************************************/
*/*ILRAFS00: CHART (AREF)                                            */
*/*HEADER                                                          0584
*/*            ILRAFS00 - FREE ASPCT STORAGE                         */
*/*ILRAFS00: E ENTRY                                                 */
*/*         P  SAVE THE RETURN ADDRESS                               */
*/*         P  SAVE PTR TO ASPCT BASE                                */
*/*         P  SAVE THE LENGTH OF ASPCT                              */
*/*         D  (YES,,NO,%AFS01A) SPECIFIED LENGTH THAT OF ASPCT?     */
*/*         P  (,%AFS01B) SET SUBPOOL ID TO 255                      */
*/*%AFS01A: P  SET SUBPOOL ID TO 230                                 */
*/*%AFS01B: D  (YES,,NO,%AFS06) ARE THERE ANY EXTENSIONS?            */
*/*         P  INITIALIZE BASE ARRAY SUBSCRIPT TO ONE                */
*/*         P  INITIALIZE ASST EXT ARRAY SUBSCRIPT TO TWO            */
*/*%AFS01:  P  GET PTR TO ASST EXTENSION                             */
*/*%AFS02:  P  GET PTR TO LPME EXTENSION                             */
*/*%AFS02A: S  AFSFREE: FREE AN LPME EXTENSION                       */
*/*         D  (YES,%AFS03,NO,) RETURN CODE ZERO?                    */
*/*         P  INCREMENT THE ASST EXT ARRAY SUBSCRIPT                */
*/*         D  (YES,%AFS04,NO,) REACHED END OF ASST EXT ARRAY?       */
*/*         D  (YES,,NO,%AFS04) ANYMORE LPME EXTENSIONS?             */
*/*         P  SET PTR TO LPME EXTENSION                             */
*/*         D  (YES,%AFS02A,NO,%AFS04) IS THIS AN LPME EXTENSION?    */
*/*%AFS03:  P  INCREMENT THE ASST EXT ARRAY SUBSCRIPT                */
*/*         D  (YES,%AFS04,NO,) REACHED END OF ASST EXT ARRAY?       */
*/*         D  (YES,%AFS02,NO,) ANYMORE LPME EXTENSIONS?             */
*/*%AFS04:  P  SET WORK PTR TO ASST EXT                              */
*/*         S  AFSFREE: FREE AN ASST EXTENSION                       */
*/*         D  (YES,%AFS05,NO,) RETURN CODE ZERO?                    */
*/*         P  INCREMENT THE BASE ARRAY SUBSCRIPT                    */
*/*         D  (YES,%AFS06,NO,) REACHED END OF BASE ARRAY?           */
*/*         D  (YES,,NO,%AFS06) ANYMORE ASST EXTENSIONS?             */
*/*         P  GET PTR TO ASST EXTENSION                             */
*/*         D  (YES,,NO,%AFS06) IS THIS AN ASST EXTENSION            */
*/*         P  (,%AFS02) RESET ASST EXT ARRAY SUBSCRIPT TO ONE       */
*/*%AFS05:  P  INCREMENT THE BASE ARRAY SUBSCRIPT                    */
*/*         D  (YES,%AFS06,NO,) REACHED END OF BASE ARRAY            */
*/*         D  (YES,,NO,%AFS06) ANYMORE ASST EXTENSIONS?             */
*/*         P  (,%AFS01) RESET ASST EXT ARRAY SUBSCRIPT TO ONE       */
*/*%AFS06:  P  SET THE WORK PTR TO ASPCT BASE                        */
*/*         S  AFSFREE: FREE THE ASPCT BASE                          */
*/*         R  RETURN TO CALLER                                      */
*                                                                  0584
         EJECT
*ILRAFS00:                                                         0584
*   PROCEDURE OPTIONS(NOSAVE,NOSAVEAREA);                          0584
*                                                                  0584
ILRAFS00 DS    0H                                                  0585
*/*A-000000-999999                                           @Z40WPWH*/
*                                                                  0585
*   DECLARE                                                        0585
*     AFSASPCT PTR(31),             /* PTR TO ASPCT BASE             */
*     AFSEXPTR PTR(31),             /* PTR TO ASPCT EXTENSIONS       */
*     AFSLNGTH FIXED(31),           /* FREEMAIN LENGTH               */
*     AFSWORK PTR(31),              /* FREEMAIN ADDRESS              */
*     AFSRET1 FIXED(31),            /* INTERNAL RETURN CODE          */
*     AFSRET2 FIXED(31),            /* INTERNAL RETURN CODE          */
*     AFSA FIXED(31),               /* ASST EXT ARRAY SUBSCRIPT      */
*     AFSSPID FIXED(31),            /* SUBPOOL ID FOR FREEMAIN       */
*     AFSB FIXED(15),               /* BASE ARRAY SUBSCRIPT          */
*     AFSZERO FIXED(31) CONSTANT(0),                               0585
*     AFSSP230 FIXED(31) CONSTANT(230),                            0585
*     AFSSP255 FIXED(31) CONSTANT(255),                            0585
*     AFS257 FIXED(31) CONSTANT(257),                              0585
*     AFSONE FIXED(15) CONSTANT(1),                                0585
*     AFS44 FIXED(31) CONSTANT(44),                                0585
*     AFSTWO FIXED(15) CONSTANT(2),                                0585
*     AFSFIVE FIXED(15) CONSTANT(5);                               0585
*   RFY                                                            0586
*    (R0,                                                          0586
*     R1,                                                          0586
*     R14) RSTD;                                                   0586
*   AFSRET1=R14;                    /* SAVE THE RETURN ADDRESS       */
         ST    R14,AFSRET1                                         0587
*   AFSASPCT=R1;                    /* SAVE PTR TO ASPCT BASE        */
         LR    AFSASPCT,R1                                         0588
*   AFSLNGTH=R0;                    /* SAVE INPUT LENGTH             */
         LR    AFSLNGTH,R0                                         0589
*   RFY                                                            0590
*    (R0,                                                          0590
*     R1,                                                          0590
*     R14) UNRSTD;                                                 0590
*   IF AFSLNGTH=LENGTH(ASPCT)       /* CHECK WHICH SUBPOOL TO USE    */
*     THEN                          /* ACTIVE ASPCT                  */
         CH    AFSLNGTH,@CH02327                                   0591
         BNE   @RF00591                                            0591
*     AFSSPID=AFSSP255;             /* SET SUBPOOL FOR LSQA          */
         MVC   AFSSPID(4),@CF02165                                 0592
*   ELSE                            /* I/O BUFFERS                   */
*     AFSSPID=AFSSP230;             /* SET SUBPOOL FOR USER KEY      */
         B     @RC00591                                            0593
@RF00591 MVC   AFSSPID(4),@CF02169                                 0593
         EJECT
*                                                                  0594
*/********************************************************************/
*/*                                                                  */
*/*  A TEST IS NOW MADE FOR EXTENSIONS. IF THERE ARE EXTENSIONS,     */
*/*  THEY ARE FREED FIRST. FIRST ALL LPME EXTENSIONS FOR A PARTICULAR*/
*/*  ASST EXTENSION ARE FREED, THEN THAT ASST EXTENSION IS FREED.    */
*/*  THIS PROCESS IS REPEATED UNTIL ALL EXTENSIONS ARE FREED.        */
*/*                                                                  */
*/********************************************************************/
*                                                                  0594
*   IF AFSASPCT->ASPAEXCT^=AFSZERO  /* ARE THERE ANY EXTENSIONS?     */
*     THEN                                                         0594
@RC00591 ICM   @08,3,ASPAEXCT(AFSASPCT)                            0594
         BZ    @RF00594                                            0594
*     DO;                           /* YES                           */
*       AFSB=AFSONE;                /* SET BASE SUBSCRIPT FOR FIRST
*                                      ASST EXTENSION                */
         LA    AFSB,1                                              0596
*       AFSA=AFSTWO;                /* SET ASST SUBSCRIPT FOR FIRST
*                                      LPME EXTENSION OFF FIRST ASST
*                                      EXTENSION. GET PTR TO FIRST 0597
*                                      ASST EXT                      */
         LA    AFSA,2                                              0597
*       AFSEXPTR=AFSASPCT->ASPASSTP(AFSB);                         0598
         LR    @04,AFSB                                            0598
         SLA   @04,2                                               0598
         L     AFSEXPTR,ASPASSTP-4(@04,AFSASPCT)                   0598
*       DO WHILE AFSEXPTR^=AFSZERO; /* LOOP UNTIL WE HAVE PROCESSED
*                                      ALL ASST EXTENSIONS GET PTR TO
*                                      LPME EXT                      */
         B     @DE00599                                            0599
@DL00599 DS    0H                                                  0600
*         AFSWORK=AFSEXPTR->ASPASSTE(AFSA);                        0600
         LR    @04,AFSA                                            0600
         SLA   @04,2                                               0600
         L     AFSWORK,ASPASSTE-4(@04,AFSEXPTR)                    0600
*         DO WHILE AFSWORK^=AFSZERO;/* LOOP UNTIL WE HAVE PROCESSED
*                                      ALL LPME EXTENSIONS FOR A   0601
*                                      PARTICULAR ASST EXTENSION     */
         B     @DE00601                                            0601
@DL00601 DS    0H                                                  0602
*           CALL AFSFREE;           /* FREE AN LPME EXTENSION        */
         BAL   @14,AFSFREE                                         0602
*           RFY                                                    0603
*             R15 RSTD;                                            0603
*           IF R15=AFSZERO          /* SUCCESSFUL FREEMAIN?          */
*             THEN                                                 0604
         LTR   R15,R15                                             0604
         BNZ   @RF00604                                            0604
*             DO;                   /* YES                           */
*               RFY                                                0606
*                 R15 UNRSTD;                                      0606
*               AFSA=AFSA+AFSONE;   /* INCREMENT ASST SUBSCRIPT      */
         AH    AFSA,@CH00055                                       0607
*               IF AFSA<AFS257      /* REACHED END OF ARRAY          */
*                 THEN              /* NO, GET PTR TO NEXT LPME EX   */
         CH    AFSA,@CH02288                                       0608
         BNL   @RF00608                                            0608
*                 AFSWORK=AFSEXPTR->ASPASSTE(AFSA);                0609
         LR    @04,AFSA                                            0609
         SLA   @04,2                                               0609
         L     AFSWORK,ASPASSTE-4(@04,AFSEXPTR)                    0609
*               ELSE                /* YES, FORCE EXIT FROM LOOP     */
*                 AFSWORK=AFSZERO;                                 0610
         B     @RC00608                                            0610
@RF00608 SLR   AFSWORK,AFSWORK                                     0610
*             END;                  /* THIS IS THE LOGICAL END OF THE
*                                      DO WHILE LOOP FOR LPME      0611
*                                      EXTENSIONS. PHYSICAL END IS 0611
*                                      AFTER THE ERROR CODE PROCESS
*                                      ING FOR A NON-ZERO RETURN FROM
*                                      AFSFREE.                      */
         EJECT
*                                                                  0612
*/********************************************************************/
*/* THIS SECTION WILL PROCESS A NON-ZERO RETURN CODE FROM AFSFREE    */
*/* FOR LPME EXTENSIONS. PROCESSING CONSISTS OF GETTING THE POINTER  */
*/* TO THE NEXT LPME EXTENSION, AND VERIFYING THAT IT IS AN LPME     */
*/* EXTENSION. IF IT IS WE WILL CONTINUE FREEING LPME EXTENSIONS,    */
*/* IF NOT, WE WILL FORCE AN EXIT FROM THE LOOP.                     */
*/********************************************************************/
*                                                                  0612
*           ELSE                                                   0612
*             DO;                   /* NON-ZERO RETURN FROM AFSFREE  */
         B     @RC00604                                            0612
@RF00604 DS    0H                                                  0613
*               AFSA=AFSA+AFSONE;   /* INCREMENT ASST SUBSCRIPT      */
         AH    AFSA,@CH00055                                       0613
*               IF AFSA<AFS257      /* REACHED END OF ASST ARRAY?    */
*                 THEN                                             0614
         CH    AFSA,@CH02288                                       0614
         BNL   @RF00614                                            0614
*                 DO;               /* NO GET PTR TO NEXT LPME EXT   */
*                   AFSWORK=AFSEXPTR->ASPASSTE(AFSA);/* IS THIS A  0616
*                                      VALID LPME EXT?               */
         LR    @04,AFSA                                            0616
         SLA   @04,2                                               0616
         L     AFSWORK,ASPASSTE-4(@04,AFSEXPTR)                    0616
*                   IF AFSWORK->ASPEIDNT^='LPME' THEN/* NO           */
         CLC   ASPEIDNT(4,AFSWORK),@CC02294                        0617
         BE    @RF00617                                            0617
*                     AFSWORK=AFSZERO;/* FORCE LOOP EXIT             */
         SLR   AFSWORK,AFSWORK                                     0618
*                 END;                                             0619
*               ELSE                /* YES, REACHED END OF ARRAY     */
*                 AFSWORK=AFSZERO;  /* FORCE LOOP EXIT               */
         B     @RC00614                                            0620
@RF00614 SLR   AFSWORK,AFSWORK                                     0620
*             END;                                                 0621
@RC00614 DS    0H                                                  0622
*         END;                      /* THIS IS THE PHYSICAL END OF 0622
*                                      THE DO WHILE LOOP FOR LPME  0622
*                                      EXTENSIONS.                   */
@RC00604 DS    0H                                                  0622
@DE00601 LTR   AFSWORK,AFSWORK                                     0622
         BNZ   @DL00601                                            0622
         EJECT
*                                                                  0623
*/********************************************************************/
*/* THIS SECTION PROCESSES THE ASST EXTENSIONS                       */
*/********************************************************************/
*                                                                  0623
*         AFSWORK=AFSEXPTR;         /* SET FREEMAIN POINTER TO AN  0623
*                                      ASST EXTENSION                */
         LR    AFSWORK,AFSEXPTR                                    0623
*         CALL AFSFREE;             /* FREE THE ASST EXTENSION       */
         BAL   @14,AFSFREE                                         0624
*         RFY                                                      0625
*           R15 RSTD;                                              0625
*         IF R15=AFSZERO            /* FREEMAIN SUCCESSFUL?          */
*           THEN                                                   0626
         LTR   R15,R15                                             0626
         BNZ   @RF00626                                            0626
*           DO;                     /* YES                           */
*             RFY                                                  0628
*               R15 UNRSTD;                                        0628
*             AFSB=AFSB+AFSONE;     /* INCREMENT BASE SUBSCRIPT      */
         LA    @04,1                                               0629
         ALR   AFSB,@04                                            0629
*             IF AFSB<AFSFIVE       /* REACHED END OF ARRAY?         */
*               THEN                                               0630
         CH    AFSB,@CH01287                                       0630
         BNL   @RF00630                                            0630
*               DO;                 /* NO GET PTR TO NEXT ASST EXT   */
*                 AFSEXPTR=AFSASPCT->ASPASSTP(AFSB);               0632
         LR    @15,AFSB                                            0632
         SLA   @15,2                                               0632
         L     AFSEXPTR,ASPASSTP-4(@15,AFSASPCT)                   0632
*                 AFSA=AFSONE;      /* RESET ASST SUBSCRIPT          */
         LR    AFSA,@04                                            0633
*               END;                                               0634
*             ELSE                  /* YES, REACHED END OF ARRAY     */
*               AFSEXPTR=AFSZERO;   /* FORCE LOOP EXIT               */
         B     @RC00630                                            0635
@RF00630 SLR   AFSEXPTR,AFSEXPTR                                   0635
*           END;                    /* THIS THE LOGICAL END OF THE DO
*                                      WHILE LOOP FOR ASST         0636
*                                      EXTENSIONS. PHYSICAL END IS 0636
*                                      AFTER THE ERROR CODE PROCESS
*                                      ING FOR A NON-ZERO RETURN FROM
*                                      AFSFREE                       */
         EJECT
*                                                                  0637
*/********************************************************************/
*/* THIS SECTION WILL PROCESS A NON-ZERO RETURN CODE FROM AFSFREE    */
*/* FOR ASST EXTENSIONS. PROCESSING CONSISTS OF GETTING THE POINTER  */
*/* TO THE NEXT ASST EXTENSION, AND VERIFYING THAT IT IS AN ASST     */
*/* EXTENSION. IF IT IS WE WILL CONTINUE FREEING ASST EXTENSIONS,    */
*/* IF NOT, WE WILL FORCE AN EXIT FROM THE LOOP.                     */
*/********************************************************************/
*                                                                  0637
*         ELSE                                                     0637
*           DO;                     /* NON-ZERO RETURN CODE FROM   0637
*                                      AFSFREE                       */
         B     @RC00626                                            0637
@RF00626 DS    0H                                                  0638
*             AFSB=AFSB+AFSONE;     /* INCREMENT BASE SUBSCRIPT      */
         LA    @04,1                                               0638
         ALR   AFSB,@04                                            0638
*             IF AFSB<AFSFIVE       /* REACHED END OF ARRAY          */
*               THEN                                               0639
         CH    AFSB,@CH01287                                       0639
         BNL   @RF00639                                            0639
*               DO;                 /* GET PTR TO NEXT ASST          */
*                 AFSEXPTR=AFSASPCT->ASPASSTP(AFSB);/* VALID ASST  0641
*                                      EXTENSION?                    */
         LR    @15,AFSB                                            0641
         SLA   @15,2                                               0641
         L     AFSEXPTR,ASPASSTP-4(@15,AFSASPCT)                   0641
*                 IF AFSEXPTR->ASPEIDNT='ASST' THEN/* YES            */
         CLC   ASPEIDNT(4,AFSEXPTR),@CC02295                       0642
         BNE   @RF00642                                            0642
*                   AFSA=AFSONE;    /* RESET ASST SUBSCRIPT          */
         LR    AFSA,@04                                            0643
*                 ELSE              /* NO                            */
*                   AFSEXPTR=AFSZERO;/* FORCE LOOP EXIT              */
         B     @RC00642                                            0644
@RF00642 SLR   AFSEXPTR,AFSEXPTR                                   0644
*               END;                                               0645
*             ELSE                  /* YES, REACHED END OF ARRAY     */
*               AFSEXPTR=AFSZERO;   /* FORCE LOOP EXIT               */
         B     @RC00639                                            0646
@RF00639 SLR   AFSEXPTR,AFSEXPTR                                   0646
*           END;                                                   0647
@RC00639 DS    0H                                                  0648
*       END;                        /* PHYSICAL END OF DO WHILE LOOP
*                                      FOR ASST EXTENSIONS           */
@RC00626 DS    0H                                                  0648
@DE00599 LTR   AFSEXPTR,AFSEXPTR                                   0648
         BNZ   @DL00599                                            0648
*     END;                                                         0649
         EJECT
*                                                                  0650
*/********************************************************************/
*/* THIS SECTION FREES THE ASPCT BASE                                */
*/********************************************************************/
*                                                                  0650
*   AFSWORK=AFSASPCT;               /* GET PTR TO THE ASPCT BASE     */
@RF00594 LR    AFSWORK,AFSASPCT                                    0650
*   CALL AFSFREE;                   /* FREE THE BASE                 */
         BAL   @14,AFSFREE                                         0651
*   RFY                                                            0652
*     R14 RSTD;                                                    0652
*   R14=AFSRET1;                    /* GET RETURN ADDRESS            */
         L     R14,AFSRET1                                         0653
*   RETURN;                         /* RETURN TO CALLER              */
@EL00004 DS    0H                                                  0654
@EF00004 DS    0H                                                  0654
@ER00004 BR    @14                                                 0654
*   RFY                                                            0655
*     R14 UNRSTD;                                                  0655
         EJECT
         EJECT
*                                                                  0656
*/********************************************************************/
*/*                                                                  */
*/*  AFSFREE:  FREE ASPCT EXTN OF STORAGE                            */
*/*                                                                  */
*/*  INPUT:  ADDRESS OF EXTN IN REGISTER 1                           */
*/*                                                                  */
*/*  PROCESS:  SET UP REGS, ISSUE FREEMAIN MACRO TO FREE ASPCT EXTN. */
*/*                                                                  */
*/*  OUTPUT:  RETURN CODE IN REGISTER 15                             */
*/*             00 - NORMAL RETURN                                   */
*/*             44 - FREEMAIN RETURNED ERROR CODE                    */
*/*                                                                  */
*/********************************************************************/
*/*AFSFREE: CHART (AREF)                                             */
*/*HEADER                                                          0656
*/*  ILRAFS00                                                      0656
*/* AFSFREE - FREEMAIN THE ASPCT                                     */
*/*AFSFREE: E  ENTRY                                                 */
*/*         P  SAVE THE RETURN ADDRESS                               */
*/*         N  THIS NEXT TEST AND RESULTING LEGS OF CODE, IS A MACRO */
*/*         N  PASS TEST AND EXPANSION.                              */
*/*         D  (YES,,NO,%AFS07) SVC OK?                              */
*/*         P  LOAD REG 14 WITH SUBPOOL ID                           */
*/*         P  LOAD REG 0 WITH LENGTH                                */
*/*         P  LOAD REG 1 WITH ADDRESS OF AREA TO BE FREED           */
*/*         S  (,%AFS08) FREEMAIN: FREE THE ASPCT                    */
*/*%AFS07:  P  LOAD REG 0 WITH LENTH                                 */
*/*         P  LOAD REG 1 WITH ADDRESS OF AREA TO BE FREED           */
*/*         P  LOAD REG 4 WITH CURRENT TCB ADDRESS                   */
*/*         P  LOAD REG 7 WITH CURRENT ASCB ADDRESS                  */
*/*         P  LOAD REG 3 WITH SUBPOOL ID                            */
*/*         S  IEAVGM00: FREE THE ASPCT                              */
*/*%AFS08:  D  (YES,%AFS09,NO,) ZERO RETURN CODE?                    */
*/*         P  SAVE FREEMAINS RETURN CODE                            */
*/*         P  SET RETURN CODE TO 68                                 */
*/*%AFS09:  R  RETURN TO MAINLINE                                    */
*                                                                  0656
         EJECT
*AFSFREE:                           /* FREEMAIN AN EXTN OF ASPCT     */
*   PROCEDURE OPTIONS(NOSAVE,NOSAVEAREA);                          0656
AFSFREE  DS    0H                                                  0657
*   RFY                                                            0657
*     R14 RSTD;                                                    0657
*   AFSRET2=R14;                    /* SAVE THE RETURN ADDRESS       */
         ST    R14,AFSRET2                                         0658
*   RFY                                                            0659
*    (R0,                                                          0659
*     R1,                                                          0659
*     R3,                                                          0659
*     R4,                                                          0659
*     R7) RSTD;                                                    0659
*   R0=AFSLNGTH;                    /* GET THE LENGTH OF AREA TO BE
*                                      FREED                         */
         LR    R0,AFSLNGTH                                         0660
*   R1=AFSWORK;                     /* GET ADDRESS OF AREA TO FREE   */
         LR    R1,AFSWORK                                          0661
*   R4=PSATOLD;                     /* GET CURRENT TCB ADDRESS       */
         L     R4,PSATOLD                                          0662
*   R7=PSAAOLD;                     /* GET CURRENT ASCB ADDRESS      */
         L     R7,PSAAOLD                                          0663
*   R3=AFSSPID;                     /* GET SUBPOOL ID                */
         L     R3,AFSSPID                                          0664
*   GENERATE REFS(R0,R1,R3,R4,R7,CVTCRMN,CVTMAP);                  0665
        FREEMAIN RC,A=(1),LV=(0),SP=(3),BRANCH=YES
*   RFY                                                            0666
*    (R0,                                                          0666
*     R1,                                                          0666
*     R3,                                                          0666
*     R4,                                                          0666
*     R7,                                                          0666
*     R14) UNRSTD;                                                 0666
*   RFY                                                            0667
*    (R14,                                                         0667
*     R15) RSTD;                                                   0667
*   IF R15^=AFSZERO                 /* FREEMAIN SUCCESSFUL?          */
*     THEN                          /* NO                            */
         LTR   R15,R15                                             0668
         BZ    @RF00668                                            0668
*     R15=AFS44;                    /* SET RETURN CODE TO 44         */
         LA    R15,44                                              0669
*   R14=AFSRET2;                    /* GET RETURN ADDRESS            */
@RF00668 L     R14,AFSRET2                                         0670
*   RFY                                                            0671
*    (R14,                                                         0671
*     R15) UNRSTD;                                                 0671
*   END AFSFREE;                                                   0672
@EL00005 DS    0H                                                  0672
@EF00005 DS    0H                                                  0672
@ER00005 BR    @14                                                 0672
*   END ILRAFS00;                                                  0673
*                                                                  0674
*/*  MACCOMP Y-4SC1CW/PZD81                                          */
*/*  MACSTAT Y-475082/415304                                         */
*/********************************************************************/
*/*                                                                  */
*/*  NAME:  ILRALS00                                                 */
*/*                                                                  */
*/*  STATUS:  OS/VS2 RELEASE 4, LEVEL 0                              */
*/*                                                                  */
*/*  ENTRY POINT:  ILRALS00                                          */
*/*                                                                  */
*/*  FUNCTION:  THIS SUBROUTINE SEARCHES THE LPME SECTORS OF A GIVEN */
*/*             ASPCT AND CALLS A PROCESSING ROUTINE (ALSPROC) FOR   */
*/*             EVERY VALID LSID IT FINDS.                           */
*/*                                                                  */
*/*  INPUT:  ADDRESS OF ASPCT IN REGISTER 0.                         */
*/*                                                                  */
*/*  PROCESS:  FOR EACH LPME EXTENSION, FIND ALL LPMES CONTAINING    */
*/*            VALID LSIDS AND SEND THEIR ADDRESSES, ONE AT A TIME   */
*/*            (ALONG WITH THE INPUT CONTROL INFORMATION), TO ALSPROC*/
*/*              ALSPROC INPUT -                                     */
*/*                REGISTER 0 = RPN OF LPME PASSED                   */
*/*                REGISTER 1 = ADDRESS OF LPME                      */
*/*                                                                  */
*/*  OUTPUT:  NONE                                                   */
*/*                                                                  */
*/*  EXIT-NORMAL:  RETURN TO CALLER                                  */
*/*                                                                  */
*/*  EXIT-ERROR:  NONE                                               */
*/*                                                                  */
*/*  EXTERNAL REFERENCES:  NONE                                      */
*/*                                                                  */
*/*  REGISTERS CLOBBERED:  0 AND 1, 14 AND 15                        */
*/*                                                                  */
*/*  MAPPING MACROS USED:  ILRASPCT                                  */
*/*                                                                  */
*/*   NOTES:  DUE TO PLS OPTIMIZATION, RESTRICT ALL NECESSARY        */
*/*          REGISTERS AROUND THIS ROUTINE.                          */
*/*          ALL LABELS AND DATA AREAS CREATED BY THIS ROUTINE BEGIN */
*/*          WITH THE THREE CHARACTERS 'ALS'.  THE CALLING MODULE    */
*/*          MUST INCLUDE SUFFICIENT WORKSPACE FOR THIS ROUTINE'S    */
*/*          DATA AREAS.  THIS AMOUNT IS COMPILER DEPENDENT WITH A   */
*/*          MAXIMUM REQUIREMENT OF 44 BYTES.  THIS ROUTINE ALSO     */
*/*          REQUIRES THAT THE CALLING MODULE DECLARES REGISTERS     */
*/*          R0-R15.                                                 */
*/*          MAPPING MACROS LISTED ABOVE MUST BE INCLUDED IN THE     */
*/*          CALLING MODULE.  THE PROCEDURE ALSPROC MUST BE DEFINED  */
*/*          BY THE CALLING MODULE.  THE PL/S MACRO FACILITY CAN BE  */
*/*          USED TO CHANGE THIS NAME, IF DESIRED.                   */
*/*                                                                  */
*/*  CHANGE-ACTIVITY:  LINE 052480 DELETED FOR APAR OZ15336          */
*/*                                                                  */
*/********************************************************************/
*/*ILRALS00: CHART (AREF)                                            */
*/*HEADER                                                          0674
*/*           ILRALS00 - FIND ALL VALID LSIDS (& RPNS) IN AN ASPCT   */
*/*ILRALS00: E ENTRY                                                 */
*/*         P  SAVE THE RETURN ADDRESS                               */
*/*         P  SAVE PTR TO ASPCT BASE                                */
*/*         P  INITIALIZE BASE ARRAY SUBSCRIPT TO ONE                */
*/*         P  INITIALIZE ASST EXT ARRAY SUBSCRIPT TO TWO            */
*/*         P  INITIALIZE LPME EXT ARRAY SUBSCRIPT TO ONE            */
*/*         P  INITIALIZE RPN VALUE TO ZERO                          */
*/*         P  GET THE NUMBER OF LPME EXTS FROM BASE                 */
*/*         P  GET PTR TO BASE LPME EXTENSION                        */
*/*         P  GET PTR TO FIRST LPME                                 */
*/*%ALS01:  D  (YES,%ALS02,NO,) LPME VALID?                          */
*/*         D  (YES,,NO,%ALS03) RELEASED AFTER SAVE?                 */
*/*%ALS02:  P  LOAD REG 0 WITH RPN                                   */
*/*         P  LOAD REG 1 WITH PTR TO LPME                           */
*/*         S  ALSPROC: CALL USER'S ROUTINE                          */
*/*%ALS03:  P  INCREMENT THE RPN                                     */
*/*         P  INCREMENT THE LPME EXT ARRAY SUBSCRIPT                */
*/*         P  GET PTR TO NEXT LPME                                  */
*/*         D  (YES,%ALS04,NO,) REACHED END OF ARRAY?                */
*/*         D  (YES,,NO,%ALS01) LPME ZERO?                           */
*/*%ALS04:  P  RESET LPME EXT SUBSCRIPT TO ONE                       */
*/*         D  (YES,%ALS05,NO,) ARE THERE ANY EXTENSIONS?            */
*/*         R  RETURN TO CALLER                                      */
*/*%ALS05:  D  (YES,,NO,%ALS07) REACHED END OF ASST EXT ARRAY?       */
*/*         P  RESET ASST EXT ARRAY SUBSCRIPT                        */
*/*         P  INCREMENT THE BASE ARRAY SUBSCRIPT                    */
*/*         D  (YES,%ALS06,NO,) REACHED END OF BASE ARRAY            */
*/*         D  (YES,%ALS07,NO,) ANYMORE ASST EXTS?                   */
*/*%ALS06:  R  RETURN TO CALLER                                      */
*/*%ALS07:  P  GET PTR TO NEXT ASST EXTENSION                        */
*/*         P  GET PTR TO NEXT LPME EXTENSION                        */
*/*         P  GET PTR TO FIRST LPME IN EXTENSION                    */
*/*         P  (,%ALS01) INCREMENT ASST EXT ARRAY SUBSCRIPT          */
*                                                                  0674
*ILRALS00:                          /* LPME SEARCH                   */
*   PROCEDURE OPTIONS(NOSAVE,NOSAVEAREA);                          0674
*                                                                  0674
ILRALS00 DS    0H                                                  0675
*/*A-000000-999999                                           @Z40WPWH*/
*                                                                  0675
*   DCL                                                            0675
*     ALSRETRN FIXED(31),           /* RETURN ADDRESS SAVE AREA      */
*     ALSASPCT PTR(31),             /* PTR TO ASPCT BASE             */
*     ALSEXPTR PTR(31),             /* PTR TO ASST EXTENSION         */
*     ALSLEPTR PTR(31),             /* PTR TO LPME EXTENSION         */
*     ALSLPME PTR(31),              /* PTR TO INDIVIDUAL LPME        */
*     ALSRPN FIXED(31),             /* RELATIVE PAGE NUMBER          */
*     ALSA FIXED(31),               /* ASST ARRAY SUBSCRIPT          */
*     ALSL FIXED(31),               /* LPME ARRAY SUBSCRIPT          */
*     ALSB FIXED(31),               /* BASE ARRAY SUBSCRIPT          */
*     ALSCNTL FIXED(8);             /* LOOP CONTROLLER               */
*   DCL                                                            0676
*     ALSZERO FIXED(31) CONSTANT(0),                               0676
*     ALSONE FIXED(31) CONSTANT(1),                                0676
*     ALSTWO FIXED(31) CONSTANT(2),                                0676
*     ALSFIVE FIXED(31) CONSTANT(5),                               0676
*     ALS257 FIXED(31) CONSTANT(257),                              0676
*     ALSLPMEL FIXED(31) INIT(LENGTH(ASPLPME)),                    0676
*     ALSON BIT(1) CONSTANT('1'B);                                 0676
*   RFY                                                            0677
*    (R0,                                                          0677
*     R14) RSTD;                                                   0677
*   ALSRETRN=R14;                   /* SAVE RETURN ADDRESS           */
         ST    R14,ALSRETRN                                        0678
*   ALSASPCT=R0;                    /* SAVE PTR TO ASPCT BASE        */
         LR    ALSASPCT,R0                                         0679
*   RFY                                                            0680
*    (R0,                                                          0680
*     R14) UNRSTD;                                                 0680
*   ALSB=ALSONE;                    /* INIT BASE SUBSCRIPT TO FIRST
*                                      ASST EXTENSION                */
         LA    @12,1                                               0681
         LR    ALSB,@12                                            0681
*   ALSA=ALSTWO;                    /* INIT ASST SUBSCRIPT TO FIRST
*                                      LPME EXTENSION                */
         LA    ALSA,2                                              0682
*   ALSL=ALSONE;                    /* INIT LPME SUBSCRIPT TO FIRST
*                                      LPME                          */
         LR    ALSL,@12                                            0683
*   ALSRPN=ALSZERO;                 /* INIT THE RPN                  */
         SLR   ALSRPN,ALSRPN                                       0684
*   ALSCNTL=ALSONE;                 /* INIT LOOP CONTROLLER GET PTR
*                                      TO LPME'S IN BASE             */
         LR    ALSCNTL,@12                                         0685
*   ALSLPME=ADDR(ALSASPCT->ASPLPMES(ALSL));                        0686
         LR    @12,ALSL                                            0686
         SLA   @12,2                                               0686
         LA    ALSLPME,ASPLPMES-4(@12,ALSASPCT)                    0686
*   DO WHILE ALSCNTL^=ALSZERO;                                     0687
         B     @DE00687                                            0687
@DL00687 DS    0H                                                  0688
*     DO WHILE ALSL<ALS257;         /* IS THE LPME VALID OR HAS IT 0688
*                                      BEEN RELEASED AFTER SAVE?     */
         B     @DE00688                                            0688
@DL00688 DS    0H                                                  0689
*       IF ALSLPME->ASPLVALD=ALSON×ALSLPME->ASPLSVRP=ALSON THEN    0689
         TM    ASPLVALD(ALSLPME),B'10001000'                       0689
         BZ    @RF00689                                            0689
*         DO;                       /* YES                           */
*           RFY                                                    0691
*            (R0,                                                  0691
*             R1) RSTD;                                            0691
*           R0=ALSRPN;              /* LOAD REG0 WITH CURRENT RPN    */
         LR    R0,ALSRPN                                           0692
*           R1=ALSLPME;             /* LOAD REG1 WITH PTR TO LPME    */
         LR    R1,ALSLPME                                          0693
*           CALL ALSPROC;           /* CALL USER'S PROC TO PERFORM   */
         BAL   @14,ALSPROC                                         0694
*           RFY                                                    0695
*            (R0,                                                  0695
*             R1) UNRSTD;           /* USER'S FUNCTION               */
*         END;                                                     0696
*       ELSE                                                       0697
*         ;                                                        0697
@RF00689 DS    0H                                                  0698
*       ALSRPN=ALSRPN+ALSONE;       /* INCREMENT RPN FOR NEXT LPME   */
         LA    @12,1                                               0698
         ALR   ALSRPN,@12                                          0698
*       ALSLPME=ALSLPME+ALSLPMEL;   /* INCREMENT LPME PTR TO NEXT  0699
*                                      LPME                          */
         AL    ALSLPME,ALSLPMEL                                    0699
*       ALSL=ALSL+ALSONE;           /* INCREMENT LPME SUBSCRIPT      */
         ALR   ALSL,@12                                            0700
*     END;                          /* ARE THERE ANY EXTENSIONS?     */
@DE00688 CH    ALSL,@CH02288                                       0701
         BL    @DL00688                                            0701
*     IF ALSASPCT->ASPAEXCT=ALSZERO THEN/* NO                        */
         ICM   @12,3,ASPAEXCT(ALSASPCT)                            0702
         BNZ   @RF00702                                            0702
*       ALSCNTL=ALSZERO;            /* FORCE LOOP EXIT               */
         SLR   ALSCNTL,ALSCNTL                                     0703
*     ELSE                                                         0704
*       DO;                         /* YES, PROCESS ALL LPME'S IN  0704
*                                      EXTENSIONS                    */
         B     @RC00702                                            0704
@RF00702 DS    0H                                                  0705
*         ALSL=ALSONE;              /* RESET LPME SUBSCRIPT          */
         LA    ALSL,1                                              0705
*         IF ALSA<ALS257            /* REACHED END OF ASST ARRAY     */
*           THEN                                                   0706
         CH    ALSA,@CH02288                                       0706
         BNL   @RF00706                                            0706
*           DO;                     /* NO ANYMORE ASST EXTS?         */
*             IF ALSASPCT->ASPASSTP(ALSB)=ALSZERO THEN/* NO          */
         LR    @12,ALSB                                            0708
         SLA   @12,2                                               0708
         L     @12,ASPASSTP-4(@12,ALSASPCT)                        0708
         LTR   @12,@12                                             0708
         BNZ   @RF00708                                            0708
*               ALSCNTL=ALSZERO;    /* FORCE LOOP EXIT               */
         SLR   ALSCNTL,ALSCNTL                                     0709
*             ELSE                                                 0710
*               DO;                 /* YES GET PTR TO NEXT ASST EXT  */
         B     @RC00708                                            0710
@RF00708 DS    0H                                                  0711
*ALSLOOP:                                                          0711
*                 ALSEXPTR=ALSASPCT->ASPASSTP(ALSB);               0711
*                                                                  0711
ALSLOOP  LR    @11,ALSB                                            0711
         SLA   @11,2                                               0711
         L     ALSEXPTR,ASPASSTP-4(@11,ALSASPCT)                   0711
*                 /***************************************************/
*                 /*                                                 */
*                 /* IF THERE ARE ANYMORE LPME EXTENSIONS, GET THE   */
*                 /* POINTER TO THE LPME EXTENSION, POINTER TO THE   */
*                 /* LPME, AND INCREMENT THE ASST ARRAY SUBSCRIPT    */
*                 /*                                                 */
*                 /***************************************************/
*                                                                  0712
*                 IF ALSEXPTR->ASPSECTA(ALSA)^=ALSZERO THEN        0712
         LR    @11,ALSA                                            0712
         SLA   @11,2                                               0712
         L     @11,ASPSECTA-4(@11,ALSEXPTR)                        0712
         LTR   @11,@11                                             0712
         BZ    @RF00712                                            0712
*                   DO;                                            0713
         ST    @11,@TF00001                                        0713
*                     ALSLEPTR=ALSEXPTR->ASPSECTA(ALSA);           0714
         L     ALSLEPTR,@TF00001                                   0714
*                     ALSLPME=ADDR(ALSLEPTR->ASPLPMEE(ALSL));      0715
         LR    @12,ALSL                                            0715
         SLA   @12,2                                               0715
         LA    ALSLPME,ASPLPMEE-4(@12,ALSLEPTR)                    0715
*                     ALSA=ALSA+ALSONE;                            0716
         AH    ALSA,@CH00055                                       0716
*                   END;                                           0717
*                 ELSE                                             0718
*                   ALSCNTL=ALSZERO;                               0718
         B     @RC00712                                            0718
@RF00712 SLR   ALSCNTL,ALSCNTL                                     0718
*               END;                                               0719
*           END;                                                   0720
*         ELSE                                                     0721
*           DO;                                                    0721
         B     @RC00706                                            0721
@RF00706 DS    0H                                                  0722
*             ALSA=ALSONE;          /* RESET ASST SUBSCRIPT          */
         LA    @12,1                                               0722
         LR    ALSA,@12                                            0722
*             ALSB=ALSB+ALSONE;     /* INCREMENT BASE SUBSCRIPT ARE
*                                      THERE ANYMORE ASST EXT        */
         ALR   ALSB,@12                                            0723
*             IF ALSB<ALSFIVE&ALSASPCT->ASPASSTP(ALSB)^=ALSZERO THEN
         CH    ALSB,@CH01287                                       0724
         BNL   @RF00724                                            0724
         LR    @12,ALSB                                            0724
         SLA   @12,2                                               0724
         L     @12,ASPASSTP-4(@12,ALSASPCT)                        0724
         LTR   @12,@12                                             0724
         BNZ   @RT00724                                            0724
*                                   /* YES                           */
*               GOTO ALSLOOP;       /* CONTINUE LOOPING              */
*             ELSE                  /* NO                            */
*               ALSCNTL=ALSZERO;    /* FORCE LOOP EXIT               */
@RF00724 SLR   ALSCNTL,ALSCNTL                                     0726
*           END;                                                   0727
*       END;                                                       0728
@RC00706 DS    0H                                                  0729
*   END;                                                           0729
@RC00702 DS    0H                                                  0729
@DE00687 CH    ALSCNTL,@CH00088                                    0729
         BNE   @DL00687                                            0729
*   RFY                                                            0730
*     R14 RSTD;                                                    0730
*   R14=ALSRETRN;                                                  0731
         L     R14,ALSRETRN                                        0731
*   RFY                                                            0732
*     R14 UNRSTD;                                                  0732
*   END ILRALS00;                                                  0733
@EL00006 DS    0H                                                  0733
@EF00006 DS    0H                                                  0733
@ER00006 BR    @14                                                 0733
*   DECLARE                         /* GENERAL PURPOSE REGISTERS     */
*     GPR00P PTR(31) REG(0),                                       0734
*     GPR01P PTR(31) REG(1),                                       0734
*     GPR14P PTR(31) REG(14),                                      0734
*     GPR15P PTR(31) REG(15);                                      0734
*   DECLARE                         /* COMMON VARIABLES              */
*     I256C CHAR(256) BASED,                                       0735
*     I031F FIXED(31) BASED,                                       0735
*     I031P PTR(31) BASED,                                         0735
*     I015F FIXED(15) BASED,                                       0735
*     I015P PTR(15) BASED,                                         0735
*     I008P PTR(8) BASED,                                          0735
*     I001C CHAR(1) BASED;          /* FOR PLS MACROS                */
*   END ILRGOS01                    /* END OF RECOVERY ROUTINE -   0736
*                                      RETURN TO RTM                 */
*                                                                  0736
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (ILRACE  )                                       */
*/*%INCLUDE SYSLIB  (IHAASCB )                                       */
*/*%INCLUDE SYSLIB  (ILRASMHD)                                       */
*/*%INCLUDE SYSLIB  (ILRASMVT)                                       */
*/*%INCLUDE SYSLIB  (ILRASPCT)                                       */
*/*%INCLUDE SYSLIB  (ILRATA  )                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (ILREPATH)                                       */
*/*%INCLUDE SYSLIB  (ILRLGE  )                                       */
*/*%INCLUDE SYSLIB  (ILRLGVT )                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (IFGRPL  )                                       */
*/*%INCLUDE SYSLIB  (IHARSMHD)                                       */
*/*%INCLUDE SYSLIB  (IHASDWA )                                       */
*/*%INCLUDE SYSLIB  (IHASRB  )                                       */
*/*%INCLUDE SYSLIB  (ILRAFS00)                                       */
*/*%INCLUDE SYSLIB  (ILRALS00)                                       */
*                                                                  0736
*       ;                                                          0736
@DATA    DS    0H
@CH00088 DC    H'0'
@CH00055 DC    H'1'
@CH01287 DC    H'5'
@CH00035 DC    H'8'
@CH00349 DC    H'24'
@CH00376 DC    H'52'
@CH02288 DC    H'257'
@CH02327 DC    H'1088'
@DATD    DSECT
         DS    0F
@TF00001 DS    F
ILRGOS01 CSECT
         DS    0F
@CF02169 DC    F'230'
@CF02165 DC    F'255'
@CF02138 DC    XL4'00085000'
@CF02140 DC    XL4'00086000'
@CF02142 DC    XL4'00087000'
@CF02144 DC    XL4'00C0D000'
@CF02146 DC    XL4'00FFFFFF'
@DATD    DSECT
         DS    0D
LGEPTR   DS    A
SAVESDWA DS    A
AFSRET1  DS    F
AFSRET2  DS    F
AFSSPID  DS    F
ALSRETRN DS    F
SAVERGS  DS    CL72
QWKAREA  DS    CL92
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
ILRGOS01 CSECT
         NOPR  ((@ENDDATD-@DATD)/201*16)
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV02190 DC    V(ILRVACE)
@CV02191 DC    V(ILRFRELG)
@CV02192 DC    V(IEAVEADV)
@CV02193 DC    V(ILRVLPRQ)
@CV02194 DC    V(ILRVLGE)
         DS    0D
NOSDWA   DC    F'12'
BASEADDR DC    AL4(@PSTART)
ALSLPMEL DC    AL4(4)
@CC02294 DC    C'LPME'
@CC02295 DC    C'ASST'
         DS    CL4
@NM00101 DS    CL64
         ORG   @NM00101
MODID    DS    CL24
         ORG   MODID
@NM00102 DC    CL8'ILRGOS  '
NGOS     DC    CL8'ILRGOS  '
@NM00103 DC    CL8'ILRGOS01'
         ORG   @NM00101+24
NGOSE    DC    CL8'ILRCGOSE'
NVSAMI   DC    CL8'ILRVSAMI'
NSAVE    DC    CL8'ILRSAV  '
NACT     DC    CL8'ILRACT  '
NRLG     DC    CL8'ILRRLG  '
         ORG   @NM00101+64
COMPCLR  DC    X'00FFF000'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
ALSCNTL  EQU   @03
ALSB     EQU   @04
ALSL     EQU   @02
ALSA     EQU   @05
ALSRPN   EQU   @08
ALSLPME  EQU   @06
ALSLEPTR EQU   @11
ALSEXPTR EQU   @12
ALSASPCT EQU   @07
AFSB     EQU   @08
AFSA     EQU   @05
AFSWORK  EQU   @06
AFSLNGTH EQU   @11
AFSEXPTR EQU   @02
AFSASPCT EQU   @12
FOUNDACE EQU   @02
ASPCTPTR EQU   @02
ATAPTR   EQU   @08
EPAPTR   EQU   @08
SDWAPTR  EQU   @01
R0       EQU   @00
ELEMENT  EQU   @00
STORLN   EQU   @00
R1       EQU   @01
R2       EQU   @02
ENDADDR  EQU   @02
VERADDR  EQU   @02
R3       EQU   @03
R4       EQU   @04
COMPV    EQU   @04
R5       EQU   @05
REPLV    EQU   @05
SAVE14   EQU   @05
R6       EQU   @06
RECPTR   EQU   @06
SAVERG   EQU   @06
R7       EQU   @07
COMPCODE EQU   @07
QWKAREAP EQU   @08
DATARG   EQU   @09
R10      EQU   @10
R11      EQU   @11
R12      EQU   @12
R13      EQU   @13
SAVEPTR  EQU   @13
LOCKCODE EQU   @13
R14      EQU   @14
R15      EQU   @15
RETCODE  EQU   @15
GPR00P   EQU   @00
GPR01P   EQU   @01
GPR14P   EQU   @14
GPR15P   EQU   @15
R8       EQU   @08
R9       EQU   @09
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
FLCCVT   EQU   FLCICCW2
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSATOLD  EQU   PSA+540
PSAAOLD  EQU   PSA+548
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSAMPSW  EQU   PSA+592
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSALITA  EQU   PSA+764
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
ACE      EQU   0
ACEFQPA  EQU   ACE
ACEBQPA  EQU   ACE+4
ACEOP    EQU   ACE+8
ACEFLG1  EQU   ACE+9
ACEFLG3  EQU   ACE+11
ACELGE   EQU   ACE+12
ACELGN   EQU   ACE+16
ACERPN   EQU   ACELGN+4
ACESYM   EQU   ACE+24
ACESRCID EQU   ACESYM
ASCB     EQU   0
ASCBSUPC EQU   ASCB+16
ASCBRSM  EQU   ASCB+52
ASCBFW1  EQU   ASCB+100
ASCBRCTF EQU   ASCBFW1+2
ASCBFLG1 EQU   ASCBFW1+3
ASCBDSP1 EQU   ASCB+114
ASCBFLG2 EQU   ASCB+115
ASCBLKGP EQU   ASCB+128
ASCBSRQ  EQU   ASCB+180
ASCBSRQ1 EQU   ASCBSRQ
ASCBSRQ2 EQU   ASCBSRQ+1
ASCBSRQ3 EQU   ASCBSRQ+2
ASCBSRQ4 EQU   ASCBSRQ+3
ASMVT    EQU   0
ASMFLAG1 EQU   ASMVT
ASMFLAG2 EQU   ASMVT+1
ASMSTAGQ EQU   ASMVT+32
ASMPCCWQ EQU   ASMVT+64
ASMBKSLT EQU   ASMVT+108
ASMLSAI  EQU   ASMVT+144
ASMGOSQS EQU   ASMVT+152
ASMREQCT EQU   ASMVT+160
ASMPEX   EQU   ASMVT+224
ASMBWKPC EQU   ASMVT+312
ASMSWKPC EQU   ASMVT+328
ASMACEPC EQU   ASMVT+344
ASMWKSA1 EQU   ASMVT+368
ASMWKSA2 EQU   ASMVT+448
ASMWKSA3 EQU   ASMVT+528
ASMWKSA4 EQU   ASMVT+608
ASMWKSA5 EQU   ASMVT+688
ASMPOOLS EQU   0
ASMCPAVQ EQU   ASMPOOLS+8
ASMCPAVL EQU   ASMCPAVQ
ASMCPRSQ EQU   ASMPOOLS+16
ASPCT    EQU   0
ASPHDR   EQU   ASPCT
ASPBKEY  EQU   ASPHDR+8
ASPSSYM  EQU   ASPBKEY
ASPLGE   EQU   ASPHDR+24
ASPFLAG  EQU   ASPHDR+28
ASPSAVED EQU   ASPFLAG
ASPAEXCT EQU   ASPHDR+46
ASPASSTP EQU   ASPCT+48
ASPLPMES EQU   ASPCT+64
ASPEXTSN EQU   0
ASPEHDR  EQU   ASPEXTSN
ASPEIDNT EQU   ASPEHDR
ASPEXKEY EQU   ASPEHDR+8
ASPSECTA EQU   ASPEXTSN+64
ASPEXPTR EQU   0
ASPLPME  EQU   0
ASPLPFLG EQU   ASPLPME
ASPLVALD EQU   ASPLPFLG
ASPLSAVE EQU   ASPLPFLG
ASPLSVRP EQU   ASPLPFLG
ASPVLSID EQU   ASPLPME+1
LPMEPTR  EQU   0
ATA      EQU   0
ATASFLGS EQU   ATA+1
ATARFLGS EQU   ATA+4
ATARCRSN EQU   ATA+6
ATACLEAR EQU   ATA+8
ATAWORKA EQU   ATACLEAR
ATAEPATH EQU   ATACLEAR+4
ATAWORD1 EQU   ATACLEAR+8
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIERLC EQU   CVTMAP+144
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
EPATH    EQU   0
EPAVSAM  EQU   EPATH
EPAOWKA  EQU   EPAVSAM
EPAVWKA  EQU   EPAVSAM+4
EPATMWKA EQU   EPAVWKA
EPAAASP  EQU   EPAVSAM+8
EPABASP  EQU   EPAVSAM+12
EPARASP  EQU   EPAVSAM+16
EPARTYRG EQU   EPAVSAM+20
EPABKSLT EQU   EPARTYRG
EPAFLAG1 EQU   EPAVSAM+24
EPAVSAMI EQU   EPAFLAG1
EPAGRPOP EQU   EPAFLAG1
EPARLG   EQU   EPAGRPOP
EPASAVE  EQU   EPAGRPOP
EPAACT   EQU   EPAGRPOP
EPAASGN  EQU   EPAFLAG1
EPAUNSAV EQU   EPAFLAG1
EPARPLB  EQU   EPAFLAG1
EPAFLAG2 EQU   EPAVSAM+25
EPALSIZE EQU   EPAVSAM+26
EPALGVTP EQU   EPAVSAM+28
EPALGEP  EQU   EPAVSAM+32
EPASRB   EQU   EPAVSAM+36
EPAACE   EQU   EPAVSAM+40
EPARBASP EQU   EPAVSAM+44
EPARSIZE EQU   EPAVSAM+48
LGE      EQU   0
LGEPROCQ EQU   LGE
LGEPROCF EQU   LGEPROCQ
LGEPROCL EQU   LGEPROCQ+4
LGEFLAG1 EQU   LGE+8
LGEWRKPD EQU   LGEFLAG1
LGEGRINP EQU   LGEFLAG1
LGERELLG EQU   LGEFLAG1
LGESAVRQ EQU   LGEFLAG1
LGEASPCT EQU   LGE+12
LGVT     EQU   0
LGVTPTR  EQU   0
LGVTE    EQU   0
LGVLGVTE EQU   LGVTE
LGVELGEP EQU   LGVLGVTE
LGVEASCB EQU   LGVLGVTE+4
LGVTEPTR EQU   0
IFGRPL   EQU   0
RPLCOMN  EQU   IFGRPL
RPLIDWD  EQU   RPLCOMN
RPLLEN   EQU   RPLIDWD+3
RPLECB   EQU   RPLCOMN+8
RPLFDBWD EQU   RPLCOMN+12
RPLFDBK  EQU   RPLFDBWD+1
RPLRTNCD EQU   RPLFDBK
RPLCNDCD EQU   RPLFDBK+1
RPLCMPON EQU   RPLCNDCD
RPLFDB2  EQU   RPLCMPON
RPLERRCD EQU   RPLCNDCD+1
RPLFDB3  EQU   RPLERRCD
RPLKEYLE EQU   RPLCOMN+16
RPLARG   EQU   RPLCOMN+36
RPLOPTCD EQU   RPLCOMN+40
RPLOPT1  EQU   RPLOPTCD
RPLECBSW EQU   RPLOPT1
RPLOPT2  EQU   RPLOPTCD+1
RPLADR   EQU   RPLOPT2
RPLOPT3  EQU   RPLOPTCD+2
RPLNXTRP EQU   RPLCOMN+44
RPLOPTC2 EQU   RPLCOMN+56
RPLOPT5  EQU   RPLOPTC2
RPLWRTYP EQU   RPLOPT5
RPLOPT6  EQU   RPLOPTC2+1
RPLUNTYP EQU   RPLOPT6
RPLOPT7  EQU   RPLOPTC2+2
RPLCNOPT EQU   RPLOPT7
RPLOPT8  EQU   RPLOPTC2+3
RPLRBAR  EQU   RPLCOMN+60
RPLAIXID EQU   RPLRBAR+2
RPLEXTDS EQU   RPLCOMN+68
RPLEXTD1 EQU   RPLEXTDS
RSMHD    EQU   0
RSMFLG1  EQU   RSMHD+12
RSMQS    EQU   RSMHD+20
RSMLFQ   EQU   RSMQS
RSMLSQA  EQU   RSMQS+4
RSMLIOQ  EQU   RSMQS+8
RSMASMHD EQU   RSMHD+40
SDWA     EQU   0
SDWAPARM EQU   SDWA
SDWAFIOB EQU   SDWA+4
SDWAABCC EQU   SDWAFIOB
SDWACMPF EQU   SDWAABCC
SDWACTL1 EQU   SDWA+8
SDWACMKA EQU   SDWACTL1
SDWAMWPA EQU   SDWACTL1+1
SDWAPMKA EQU   SDWACTL1+4
SDWACTL2 EQU   SDWA+16
SDWACMKP EQU   SDWACTL2
SDWAMWPP EQU   SDWACTL2+1
SDWAPMKP EQU   SDWACTL2+4
SDWAGRSV EQU   SDWA+24
SDWANAME EQU   SDWA+88
SDWAEC1  EQU   SDWA+104
SDWAEMK1 EQU   SDWAEC1
SDWAMWP1 EQU   SDWAEC1+1
SDWAINT1 EQU   SDWAEC1+2
SDWANXT1 EQU   SDWAEC1+4
SDWAAEC1 EQU   SDWA+112
SDWAILC1 EQU   SDWAAEC1+1
SDWAINC1 EQU   SDWAAEC1+2
SDWAICD1 EQU   SDWAINC1+1
SDWAEC2  EQU   SDWA+120
SDWAEMK2 EQU   SDWAEC2
SDWAMWP2 EQU   SDWAEC2+1
SDWAINT2 EQU   SDWAEC2+2
SDWANXT2 EQU   SDWAEC2+4
SDWAAEC2 EQU   SDWA+128
SDWAILC2 EQU   SDWAAEC2+1
SDWAINC2 EQU   SDWAAEC2+2
SDWAICD2 EQU   SDWAINC2+1
SDWASRSV EQU   SDWA+136
SDWAIDNT EQU   SDWA+200
SDWAMCH  EQU   SDWA+204
SDWASTCK EQU   SDWAMCH
SDWAMCHI EQU   SDWAMCH+8
SDWAMCHS EQU   SDWAMCHI
SDWAMCHD EQU   SDWAMCHI+1
SDWARSR1 EQU   SDWAMCH+12
SDWARSR2 EQU   SDWAMCH+13
SDWAFLGS EQU   SDWA+232
SDWAERRA EQU   SDWAFLGS
SDWAERRB EQU   SDWAFLGS+1
SDWAERRC EQU   SDWAFLGS+2
SDWAPERC EQU   SDWAERRC
SDWAERRD EQU   SDWAFLGS+3
SDWACLUP EQU   SDWAERRD
SDWAIOFS EQU   SDWA+238
SDWARTYA EQU   SDWA+240
SDWACPUA EQU   SDWA+248
SDWAPARQ EQU   SDWA+252
SDWARCDE EQU   SDWAPARQ
SDWAACF2 EQU   SDWAPARQ+1
SDWARCRD EQU   SDWAACF2
SDWAUPRG EQU   SDWAACF2
SDWAACF3 EQU   SDWAPARQ+2
SDWAACF4 EQU   SDWAPARQ+3
SDWALKWA EQU   SDWA+256
SDWALKWS EQU   SDWALKWA
SDWAAPLW EQU   SDWALKWS+16
SDWARECP EQU   SDWA+292
SDWACSCT EQU   SDWARECP+8
SDWAREXN EQU   SDWARECP+16
SDWASNPA EQU   SDWA+320
SDWADUMP EQU   SDWASNPA
SDWADPFS EQU   SDWADUMP+1
SDWADDAT EQU   SDWASNPA+4
SDWASDAT EQU   SDWADDAT
SDWAPDAT EQU   SDWADDAT+2
SDWADPSA EQU   SDWA+328
SDWADPSL EQU   SDWADPSA
SDWACOMP EQU   SDWA+392
SDWARA   EQU   SDWA+400
SDWADPVA EQU   SDWARA+2
SDWAURAL EQU   SDWARA+3
SDWAVRA  EQU   SDWARA+4
SRBSECT  EQU   0
SRB      EQU   SRBSECT
SRBFLNK  EQU   SRB+4
SRBFLC   EQU   SRB+12
SRBPTR   EQU   0
FIXECB   EQU   0
RECAREA  EQU   0
@NM00104 EQU   0
RESTORE  EQU   @NM00104+12
RECRGS   EQU   0
RETRYLBL EQU   0
I256C    EQU   0
GMACELL  EQU   0
GMANEXT  EQU   GMACELL
ILRPEX   EQU   0
I001C    EQU   0
I008P    EQU   0
I015F    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
ACEPTR   EQU   EPAACE
ASCBPTR  EQU   PSAAOLD
DUMASMHD EQU   RSMASMHD
ASMHD    EQU   DUMASMHD
ASHFLAG1 EQU   ASMHD
ASHFLAG2 EQU   ASMHD+1
ASHSCHED EQU   ASHFLAG2
ASHLOCK  EQU   ASMHD+20
ASHVSRBP EQU   ASMHD+24
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTCRMN  EQU   CVTS01+156
CVTGSMQ  EQU   CVTS01+264
CVTASMVT EQU   CVTS01+356
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
ASMVTPTR EQU   CVTASMVT
ASM1WKSV EQU   ASMWKSA1
ASM1RGSV EQU   ASM1WKSV
ASM1WRKA EQU   ASM1WKSV+60
ASM2WKSV EQU   ASMWKSA2
ASM2WRKA EQU   ASM2WKSV+52
ASM2FLGS EQU   ASM2WRKA+12
ASM3WKSV EQU   ASMWKSA3
ASM4WKSV EQU   ASMWKSA4
ASM4RGSV EQU   ASM4WKSV
ASM5WKSV EQU   ASMWKSA5
ASM5RGSV EQU   ASM5WKSV
ASPLPMEE EQU   ASPSECTA
ASPASST  EQU   ASPSECTA
ASPASSTE EQU   ASPASST
CVTPTR   EQU   FLCCVT
PSARSVTE EQU   PSARSVT
RSMHDPTR EQU   ASCBRSM
URAL     EQU   SDWAURAL
FLC      EQU   PSA
RPLPTR   EQU   EPAVWKA
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
ASM5FLGS EQU   ASM5WKSV+64
ASM5AIA  EQU   ASM5WKSV+60
ASM5GCTR EQU   ASM5WKSV+56
ASM5SR14 EQU   ASM5WKSV+52
@NM00006 EQU   ASM5RGSV+4
ASM5RG2  EQU   ASM5RGSV
@NM00005 EQU   ASM4RGSV+4
ASM4RG2  EQU   ASM4RGSV
ASM3SR13 EQU   ASM3WKSV+28
ASM3R14B EQU   ASM3WKSV+24
ASM3R14A EQU   ASM3WKSV+20
ASM3GRPA EQU   ASM3WKSV+16
ASM3TMPA EQU   ASM3WKSV+12
ASM3PIOP EQU   ASM3WKSV+8
ASM3GENQ EQU   ASM3WKSV+4
ASM3SWPQ EQU   ASM3WKSV
ASM2SR14 EQU   ASM2WRKA+16
@NM00004 EQU   ASM2WRKA+13
ASM2WFLG EQU   ASM2FLGS
ASM2RFLG EQU   ASM2FLGS
ASM2DUPQ EQU   ASM2WRKA+8
ASM2CAQ  EQU   ASM2WRKA+4
ASM2PAQ  EQU   ASM2WRKA
ASM2RGSV EQU   ASM2WKSV
ASM1NXTA EQU   ASM1WRKA+4
ASM1ASCB EQU   ASM1WRKA
ASM1RG15 EQU   ASM1RGSV+56
@NM00003 EQU   ASM1RGSV+4
ASM1RG1  EQU   ASM1RGSV
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTSUSP  EQU   CVTS01+692
CVTT6SVC EQU   CVTS01+688
CVTCDAL  EQU   CVTS01+684
CVTTCTL  EQU   CVTS01+680
CVTRSUME EQU   CVTS01+676
CVTJTERM EQU   CVTS01+672
CVTASMRM EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
ASHLGEQ  EQU   ASMHD+28
ASHCAPQ  EQU   ASMHD+16
ASHSWAPQ EQU   ASMHD+12
ASHIOCNT EQU   ASMHD+8
ASHBKSLT EQU   ASMHD+4
ASHSWPCT EQU   ASMHD+2
ASHRSV12 EQU   ASHFLAG2
ASHRSV11 EQU   ASHFLAG2
ASHRSV10 EQU   ASHFLAG2
ASHRSV9  EQU   ASHFLAG2
ASHRSV8  EQU   ASHFLAG2
ASHRSV7  EQU   ASHFLAG2
ASHRSV13 EQU   ASHFLAG2
ASHRSV6  EQU   ASHFLAG1
ASHRSV5  EQU   ASHFLAG1
ASHRSV4  EQU   ASHFLAG1
ASHRSV3  EQU   ASHFLAG1
ASHRSV2  EQU   ASHFLAG1
ASHPERME EQU   ASHFLAG1
ASHCAPER EQU   ASHFLAG1
ASHSWPOT EQU   ASHFLAG1
@NM00105 EQU   @NM00104
@NM00100 EQU   SRB+40
@NM00099 EQU   SRB+38
SRBPRIOR EQU   SRB+37
SRBPKF   EQU   SRB+36
SRBSAVE  EQU   SRB+32
SRBPARM  EQU   SRB+28
SRBRMTR  EQU   SRB+24
SRBEP    EQU   SRB+20
SRBPTCB  EQU   SRBFLC+4
SRBPASID EQU   SRBFLC+2
SRBCPAFF EQU   SRBFLC
SRBASCB  EQU   SRB+8
SRBID    EQU   SRB
@NM00098 EQU   SDWA+512
@NM00097 EQU   SDWADPVA
SDWAEBC  EQU   SDWADPVA
SDWAHEX  EQU   SDWADPVA
SDWAVRAL EQU   SDWARA
@NM00096 EQU   SDWA+396
SDWARCPL EQU   SDWA+364
@NM00095 EQU   SDWADPSA+32
SDWATO4  EQU   SDWADPSL+28
SDWAFRM4 EQU   SDWADPSL+24
SDWATO3  EQU   SDWADPSL+20
SDWAFRM3 EQU   SDWADPSL+16
SDWATO2  EQU   SDWADPSL+12
SDWAFRM2 EQU   SDWADPSL+8
SDWATO1  EQU   SDWADPSL+4
SDWAFRM1 EQU   SDWADPSL
@NM00094 EQU   SDWADDAT+3
@NM00093 EQU   SDWAPDAT
SDWAUSPL EQU   SDWAPDAT
SDWADPSW EQU   SDWAPDAT
SDWATJPA EQU   SDWAPDAT
SDWATLPA EQU   SDWAPDAT
SDWADREG EQU   SDWAPDAT
SDWADSAH EQU   SDWAPDAT
SDWADSAS EQU   SDWAPDAT
@NM00092 EQU   SDWADDAT+1
@NM00091 EQU   SDWASDAT
SDWAQQS  EQU   SDWASDAT
SDWACBS  EQU   SDWASDAT
SDWAGTF  EQU   SDWASDAT
SDWASWA  EQU   SDWASDAT
SDWALSQA EQU   SDWASDAT
SDWASQA  EQU   SDWASDAT
SDWANUC  EQU   SDWASDAT
@NM00090 EQU   SDWADUMP+2
@NM00089 EQU   SDWADPFS
SDWASLST EQU   SDWADPFS
@NM00088 EQU   SDWADPFS
SDWADLST EQU   SDWADPFS
SDWADPT  EQU   SDWADPFS
SDWADPID EQU   SDWADUMP
SDWADPLA EQU   SDWA+316
SDWAMODN EQU   SDWARECP
@NM00087 EQU   SDWA+290
SDWAASID EQU   SDWA+288
SDWATALW EQU   SDWALKWS+28
SDWATDLW EQU   SDWALKWS+24
SDWATNLW EQU   SDWALKWS+20
SDWAIPLW EQU   SDWALKWS+12
SDWAILLW EQU   SDWALKWS+8
SDWAIULW EQU   SDWALKWS+4
SDWAICLW EQU   SDWALKWS
SDWAFLLK EQU   SDWAACF4
SDWACMS  EQU   SDWAACF4
SDWAOPTM EQU   SDWAACF4
SDWATADB EQU   SDWAACF4
SDWATDNB EQU   SDWAACF4
SDWATNCB EQU   SDWAACF4
SDWAILCH EQU   SDWAACF4
SDWAIUCB EQU   SDWAACF4
SDWAICAT EQU   SDWAACF3
SDWAIPRG EQU   SDWAACF3
SDWASALL EQU   SDWAACF3
SDWAASMP EQU   SDWAACF3
SDWADISP EQU   SDWAACF3
@NM00086 EQU   SDWAACF3
@NM00085 EQU   SDWAACF2
SDWAFREE EQU   SDWAACF2
@NM00084 EQU   SDWAACF2
SDWASPIN EQU   SDWAACF2
@NM00083 EQU   SDWAACF2
SDWALCPU EQU   SDWACPUA+2
@NM00082 EQU   SDWACPUA
SDWARECA EQU   SDWA+244
@NM00081 EQU   SDWA+239
@NM00080 EQU   SDWAIOFS
SDWANIOP EQU   SDWAIOFS
SDWANOIO EQU   SDWAIOFS
SDWAIOHT EQU   SDWAIOFS
SDWAIOQR EQU   SDWAIOFS
SDWAFMID EQU   SDWA+236
@NM00079 EQU   SDWAERRD
SDWAMCIV EQU   SDWAERRD
SDWARPIV EQU   SDWAERRD
SDWAMABD EQU   SDWAERRD
SDWACTS  EQU   SDWAERRD
SDWASTAE EQU   SDWAERRD
SDWANRBE EQU   SDWAERRD
@NM00078 EQU   SDWAERRC
SDWAEAS  EQU   SDWAERRC
SDWAIRB  EQU   SDWAERRC
SDWASTAI EQU   SDWAERRC
SDWASTAF EQU   SDWAERRC
SDWASRBM EQU   SDWAERRB
SDWALDIS EQU   SDWAERRB
SDWAENRB EQU   SDWAERRB
SDWATYP1 EQU   SDWAERRB
@NM00077 EQU   SDWAERRB
SDWAPGIO EQU   SDWAERRA
SDWATEXC EQU   SDWAERRA
SDWASVCE EQU   SDWAERRA
SDWAABTM EQU   SDWAERRA
SDWASVCD EQU   SDWAERRA
SDWARKEY EQU   SDWAERRA
SDWAPCHK EQU   SDWAERRA
SDWAMCHK EQU   SDWAERRA
SDWATIME EQU   SDWAMCH+20
SDWARFSA EQU   SDWAMCH+16
@NM00076 EQU   SDWAMCH+14
SDWAVEQR EQU   SDWARSR2
SDWAPGFX EQU   SDWARSR2
SDWAFLSQ EQU   SDWARSR2
SDWAFSQA EQU   SDWARSR2
SDWANUCL EQU   SDWARSR2
SDWASPER EQU   SDWARSR2
SDWAINTC EQU   SDWARSR2
SDWAOFLN EQU   SDWARSR2
SDWACHNG EQU   SDWARSR1
SDWAMSER EQU   SDWARSR1
@NM00075 EQU   SDWARSR1
SDWACPID EQU   SDWAMCH+10
SDWATERR EQU   SDWAMCHD
SDWAFPRX EQU   SDWAMCHD
SDWAINSF EQU   SDWAMCHD
SDWAACR  EQU   SDWAMCHD
SDWASCK  EQU   SDWAMCHD
SDWAPSWU EQU   SDWAMCHD
SDWAREGU EQU   SDWAMCHD
SDWASKYF EQU   SDWAMCHD
@NM00074 EQU   SDWAMCHS
SDWARSRF EQU   SDWAMCHS
SDWARSRC EQU   SDWAMCHS
SDWAINVP EQU   SDWAMCHS
SDWATSVL EQU   SDWAMCHS
SDWARCDF EQU   SDWAMCHS
SDWASRVL EQU   SDWAMCHS
SDWASCKE EQU   SDWASTCK+4
SDWASCKB EQU   SDWASTCK
SDWALNTH EQU   SDWAIDNT+1
SDWASPID EQU   SDWAIDNT
SDWASR15 EQU   SDWASRSV+60
SDWASR14 EQU   SDWASRSV+56
SDWASR13 EQU   SDWASRSV+52
SDWASR12 EQU   SDWASRSV+48
SDWASR11 EQU   SDWASRSV+44
SDWASR10 EQU   SDWASRSV+40
SDWASR09 EQU   SDWASRSV+36
SDWASR08 EQU   SDWASRSV+32
SDWASR07 EQU   SDWASRSV+28
SDWASR06 EQU   SDWASRSV+24
SDWASR05 EQU   SDWASRSV+20
SDWASR04 EQU   SDWASRSV+16
SDWASR03 EQU   SDWASRSV+12
SDWASR02 EQU   SDWASRSV+8
SDWASR01 EQU   SDWASRSV+4
SDWASR00 EQU   SDWASRSV
SDWATRN2 EQU   SDWAAEC2+4
SDWAIPC2 EQU   SDWAICD2
SDWAIMC2 EQU   SDWAICD2
SDWAIPR2 EQU   SDWAICD2
@NM00073 EQU   SDWAINC2
@NM00072 EQU   SDWAILC2
SDWAIL2  EQU   SDWAILC2
@NM00071 EQU   SDWAILC2
@NM00070 EQU   SDWAAEC2
SDWAADD2 EQU   SDWANXT2+1
@NM00069 EQU   SDWANXT2
@NM00068 EQU   SDWAEC2+3
SDWASGN2 EQU   SDWAINT2
SDWAEXP2 EQU   SDWAINT2
SDWADEC2 EQU   SDWAINT2
SDWAFPO2 EQU   SDWAINT2
SDWACC2  EQU   SDWAINT2
@NM00067 EQU   SDWAINT2
SDWAPGM2 EQU   SDWAMWP2
SDWAWAT2 EQU   SDWAMWP2
SDWAMCK2 EQU   SDWAMWP2
SDWAECT2 EQU   SDWAMWP2
SDWAKEY2 EQU   SDWAMWP2
SDWAEXT2 EQU   SDWAEMK2
SDWAIO2  EQU   SDWAEMK2
SDWATRM2 EQU   SDWAEMK2
@NM00066 EQU   SDWAEMK2
SDWAPER2 EQU   SDWAEMK2
@NM00065 EQU   SDWAEMK2
SDWATRAN EQU   SDWAAEC1+4
SDWAIPC1 EQU   SDWAICD1
SDWAIMC1 EQU   SDWAICD1
SDWAIPR1 EQU   SDWAICD1
@NM00064 EQU   SDWAINC1
@NM00063 EQU   SDWAILC1
SDWAIL1  EQU   SDWAILC1
@NM00062 EQU   SDWAILC1
@NM00061 EQU   SDWAAEC1
SDWAADD1 EQU   SDWANXT1+1
@NM00060 EQU   SDWANXT1
@NM00059 EQU   SDWAEC1+3
SDWASGN1 EQU   SDWAINT1
SDWAEXP1 EQU   SDWAINT1
SDWADEC1 EQU   SDWAINT1
SDWAFPO1 EQU   SDWAINT1
SDWACC1  EQU   SDWAINT1
@NM00058 EQU   SDWAINT1
SDWAPGM1 EQU   SDWAMWP1
SDWAWAT1 EQU   SDWAMWP1
SDWAMCK1 EQU   SDWAMWP1
SDWAECT1 EQU   SDWAMWP1
SDWAKEY1 EQU   SDWAMWP1
SDWAEXT1 EQU   SDWAEMK1
SDWAIO1  EQU   SDWAEMK1
SDWATRM1 EQU   SDWAEMK1
@NM00057 EQU   SDWAEMK1
SDWAPER1 EQU   SDWAEMK1
@NM00056 EQU   SDWAEMK1
SDWAIOBR EQU   SDWA+100
SDWAEPA  EQU   SDWA+96
@NM00055 EQU   SDWANAME+4
SDWARBAD EQU   SDWANAME
SDWAGR15 EQU   SDWAGRSV+60
SDWAGR14 EQU   SDWAGRSV+56
SDWAGR13 EQU   SDWAGRSV+52
SDWAGR12 EQU   SDWAGRSV+48
SDWAGR11 EQU   SDWAGRSV+44
SDWAGR10 EQU   SDWAGRSV+40
SDWAGR09 EQU   SDWAGRSV+36
SDWAGR08 EQU   SDWAGRSV+32
SDWAGR07 EQU   SDWAGRSV+28
SDWAGR06 EQU   SDWAGRSV+24
SDWAGR05 EQU   SDWAGRSV+20
SDWAGR04 EQU   SDWAGRSV+16
SDWAGR03 EQU   SDWAGRSV+12
SDWAGR02 EQU   SDWAGRSV+8
SDWAGR01 EQU   SDWAGRSV+4
SDWAGR00 EQU   SDWAGRSV
SDWANXTP EQU   SDWACTL2+5
SDWASGP  EQU   SDWAPMKP
SDWAEUP  EQU   SDWAPMKP
SDWADOP  EQU   SDWAPMKP
SDWAFPP  EQU   SDWAPMKP
SDWACCP  EQU   SDWAPMKP
SDWAILP  EQU   SDWAPMKP
SDWAINTP EQU   SDWACTL2+2
SDWASPVP EQU   SDWAMWPP
SDWAWATP EQU   SDWAMWPP
SDWAMCKP EQU   SDWAMWPP
@NM00054 EQU   SDWAMWPP
SDWAKEYP EQU   SDWAMWPP
SDWAEXTP EQU   SDWACMKP
SDWAIOP  EQU   SDWACMKP
SDWANXTA EQU   SDWACTL1+5
SDWASGA  EQU   SDWAPMKA
SDWAEUA  EQU   SDWAPMKA
SDWADOA  EQU   SDWAPMKA
SDWAFPA  EQU   SDWAPMKA
SDWACCA  EQU   SDWAPMKA
SDWAILA  EQU   SDWAPMKA
SDWAINTA EQU   SDWACTL1+2
SDWASPVA EQU   SDWAMWPA
SDWAWATA EQU   SDWAMWPA
SDWAMCKA EQU   SDWAMWPA
@NM00053 EQU   SDWAMWPA
SDWAKEYA EQU   SDWAMWPA
SDWAEXTA EQU   SDWACMKA
SDWAIOA  EQU   SDWACMKA
SDWACMPC EQU   SDWAABCC+1
@NM00052 EQU   SDWACMPF
SDWASTCC EQU   SDWACMPF
@NM00051 EQU   SDWACMPF
SDWASTEP EQU   SDWACMPF
SDWAREQ  EQU   SDWACMPF
RSMFOEQ  EQU   RSMHD+36
RSMLIOQL EQU   RSMLIOQ+4
RSMLIOQF EQU   RSMLIOQ
RSMLSQAL EQU   RSMLSQA+2
RSMLSQAF EQU   RSMLSQA
RSMLFQL  EQU   RSMLFQ+2
RSMLFQF  EQU   RSMLFQ
RSMRSV2  EQU   RSMHD+16
RSMCNTFX EQU   RSMHD+14
RSMRSV1  EQU   RSMHD+13
@NM00050 EQU   RSMFLG1
RSMFAIL  EQU   RSMFLG1
RSMGFADD EQU   RSMFLG1
RSMCPNC  EQU   RSMFLG1
RSMCPNU  EQU   RSMFLG1
RSMGFAD  EQU   RSMFLG1
RSMIOCPC EQU   RSMFLG1
RSMIOCPU EQU   RSMFLG1
RSMASCB  EQU   RSMHD+8
RSMSPCT  EQU   RSMHD+4
RSMVSTO  EQU   RSMHD
RPLERMSA EQU   RPLCOMN+72
RPLEMLEN EQU   RPLCOMN+70
RPLACTIV EQU   RPLCOMN+69
RPLBRANC EQU   RPLEXTD1
RPLNIB   EQU   RPLEXTD1
@NM00049 EQU   RPLEXTD1
RPLEXIT  EQU   RPLEXTD1
RPLNEXIT EQU   RPLEXTD1
RPLEXSCH EQU   RPLEXTD1
RPLDDDD  EQU   RPLRBAR+4
@NM00048 EQU   RPLRBAR+3
@NM00047 EQU   RPLAIXID
RPLAXPKP EQU   RPLAIXID
RPLAIXPC EQU   RPLRBAR
RPLRSV88 EQU   RPLOPT8
RPLUNCON EQU   RPLOPT8
RPLACTV  EQU   RPLOPT8
RPLSESS  EQU   RPLOPT8
RPLPEND  EQU   RPLOPT8
RPLODPRM EQU   RPLOPT8
RPLODACP EQU   RPLOPT8
RPLODACQ EQU   RPLOPT8
RPLRSV78 EQU   RPLOPT7
RPLRSV77 EQU   RPLOPT7
RPLRLSOP EQU   RPLOPT7
RPLTPOST EQU   RPLOPT7
RPLQOPT  EQU   RPLOPT7
RPLCNIMM EQU   RPLCNOPT
RPLCNANY EQU   RPLCNOPT
RPLCNALL EQU   RPLCNOPT
RPLRSV68 EQU   RPLOPT6
RPLRSV67 EQU   RPLOPT6
RPLLOCK  EQU   RPLOPT6
RPLNCOND EQU   RPLOPT6
RPLCOND  EQU   RPLOPT6
RPLEOT   EQU   RPLUNTYP
RPLEOM   EQU   RPLUNTYP
RPLEOB   EQU   RPLUNTYP
RPLWROPT EQU   RPLOPT5
RPLNODE  EQU   RPLOPT5
RPLERACE EQU   RPLWRTYP
RPLEAU   EQU   RPLWRTYP
RPLNERAS EQU   RPLWRTYP
RPLPSOPT EQU   RPLOPT5
RPLSSNIN EQU   RPLOPT5
RPLDLGIN EQU   RPLOPT5
RPLBUFL  EQU   RPLCOMN+52
RPLRLEN  EQU   RPLCOMN+48
RPLCHAIN EQU   RPLNXTRP
RPLOPT4  EQU   RPLOPTCD+3
RPLALIGN EQU   RPLOPT3
RPLFMT   EQU   RPLOPT3
RPLFLD   EQU   RPLOPT3
RPLVFY   EQU   RPLOPT3
RPLBLK   EQU   RPLOPT3
RPLSFORM EQU   RPLOPT3
RPLEODS  EQU   RPLOPT3
RPLNSP   EQU   RPLOPT2
RPLUPD   EQU   RPLOPT2
@NM00046 EQU   RPLOPT2
RPLLRD   EQU   RPLOPT2
RPLBWD   EQU   RPLOPT2
RPLCNV   EQU   RPLOPT2
RPLADD   EQU   RPLADR
RPLKEY   EQU   RPLOPT2
RPLECBIN EQU   RPLECBSW
RPLGEN   EQU   RPLOPT1
RPLKGE   EQU   RPLOPT1
RPLASY   EQU   RPLOPT1
RPLSKP   EQU   RPLOPT1
RPLSEQ   EQU   RPLOPT1
RPLDIR   EQU   RPLOPT1
RPLLOC   EQU   RPLOPT1
RPLDAF   EQU   RPLARG+2
RPLSAF   EQU   RPLARG
RPLAREA  EQU   RPLCOMN+32
RPLTCBPT EQU   RPLCOMN+28
RPLDACB  EQU   RPLCOMN+24
RPLCCHAR EQU   RPLCOMN+20
RPLSTRID EQU   RPLCOMN+18
RPLKEYL  EQU   RPLKEYLE
RPLRDSOH EQU   RPLFDB3
RPLRLG   EQU   RPLFDB3
RPLLGFRC EQU   RPLFDB3
RPLREOT  EQU   RPLFDB3
RPLREOM  EQU   RPLFDB3
RPLREOB  EQU   RPLFDB3
RPLSV32  EQU   RPLFDB3
RPLUINPT EQU   RPLFDB3
RPLSTSAV EQU   RPLFDB2
RPLCUERR EQU   RPLFDB2
RPLDLGFL EQU   RPLFDB2
RPLIOERR EQU   RPLFDB2
RPLDVUNS EQU   RPLFDB2
RPLATND  EQU   RPLFDB2
RPLRVID  EQU   RPLFDB2
RPLERLK  EQU   RPLFDB2
RPLERREG EQU   RPLRTNCD
RPLSTAT  EQU   RPLFDBWD
RPLPOST  EQU   RPLECB
RPLWAIT  EQU   RPLECB
RPLPLHPT EQU   RPLCOMN+4
RPLLEN2  EQU   RPLLEN
RPLREQ   EQU   RPLIDWD+2
RPLSTYP  EQU   RPLIDWD+1
RPLID    EQU   RPLIDWD
LGVELGID EQU   LGVEASCB
LGVENEXT EQU   LGVELGEP
LGVENTRS EQU   LGVT+16
LGVSIZE  EQU   LGVT+12
LGVMAXLG EQU   LGVT+8
LGVLGVEP EQU   LGVT+4
LGVIDENT EQU   LGVT
@NM00021 EQU   LGE+24
LGELGID  EQU   LGE+20
LGENEXT  EQU   LGE+16
LGESLTCT EQU   LGE+10
@NM00020 EQU   LGE+9
LGERSV5  EQU   LGEFLAG1
LGERSV4  EQU   LGEFLAG1
LGERSV3  EQU   LGEFLAG1
LGERSV2  EQU   LGEFLAG1
@NM00019 EQU   EPAVSAM+50
@NM00018 EQU   EPAFLAG2
EPARECUR EQU   EPAFLAG2
EPATMI   EQU   EPAFLAG2
EPAMAST  EQU   EPAFLAG2
EPABUILD EQU   EPAFLAG2
EPACOLD  EQU   EPAFLAG2
EPAWARM  EQU   EPAFLAG2
EPATMXIT EQU   EPAFLAG2
EPAACASR EQU   EPAFLAG1
EPATMISV EQU   EPABKSLT
EPATMACB EQU   EPARASP
EPATMIBA EQU   EPABASP
EPADSLST EQU   EPAAASP
EPASWKA  EQU   EPATMWKA
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00017 EQU   CVTFIX+248
@NM00016 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTRSV99 EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTLDEV  EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTHEAD  EQU   CVTMAP+160
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTIOQET EQU   CVTMAP+120
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
ATAWORD2 EQU   ATACLEAR+12
ATARCODE EQU   ATA+7
ATARCRF8 EQU   ATARCRSN
ATARCRF7 EQU   ATARCRSN
ATARCRF6 EQU   ATARCRSN
ATARCRF5 EQU   ATARCRSN
ATARCRF4 EQU   ATARCRSN
ATARCRF3 EQU   ATARCRSN
ATARCRF2 EQU   ATARCRSN
ATARCRF1 EQU   ATARCRSN
ATARSV2  EQU   ATARFLGS
ATABADPK EQU   ATARFLGS
ATASCCWP EQU   ATARFLGS
ATASGNST EQU   ATARFLGS
ATARSV1  EQU   ATASFLGS+1
ATASRT   EQU   ATASFLGS+1
ATASWPDR EQU   ATASFLGS+1
ATATRPAG EQU   ATASFLGS+1
ATASWAP  EQU   ATASFLGS+1
ATAPAGCM EQU   ATASFLGS
ATAPAGIO EQU   ATASFLGS
ATAPOS   EQU   ATASFLGS
ATAPCOMP EQU   ATASFLGS
ATAVIOCM EQU   ATASFLGS
ATASCOMP EQU   ATASFLGS
ATASLSQA EQU   ATASFLGS
ATAQIOE  EQU   ATASFLGS
ATAMODID EQU   ATA
ASPSLOT  EQU   ASPVLSID+1
ASPPRTNN EQU   ASPVLSID
@NM00015 EQU   ASPLPFLG
ASPLIOER EQU   ASPLPFLG
ASPLOPIN EQU   ASPLPFLG
@NM00014 EQU   ASPEXTSN+1088
@NM00013 EQU   ASPEHDR+24
ASPASSTI EQU   ASPEHDR+22
@NM00012 EQU   ASPEHDR+21
ASPASSTN EQU   ASPEHDR+20
ASPEXTNM EQU   ASPEXKEY+8
ASPESSYM EQU   ASPEXKEY
@NM00011 EQU   ASPEHDR+4
@NM00010 EQU   ASPCT+1088
ASPLEXCT EQU   ASPHDR+44
ASPSAVCT EQU   ASPHDR+40
ASPBKSLT EQU   ASPHDR+36
ASPMAXPN EQU   ASPHDR+32
@NM00009 EQU   ASPHDR+29
@NM00008 EQU   ASPFLAG
ASPSAVRP EQU   ASPFLAG
ASPASCB  EQU   ASPHDR+20
@NM00007 EQU   ASPBKEY+8
ASPLGID  EQU   ASPHDR+4
ASPIDENT EQU   ASPHDR
ASMCPRES EQU   ASMCPRSQ+4
ASMCPTAK EQU   ASMCPRSQ
ASMCPCNT EQU   ASMCPAVQ+4
ASMCPEXT EQU   ASMPOOLS+6
ASMCPSIZ EQU   ASMPOOLS+4
ASMCPID  EQU   ASMPOOLS
ASMRSV12 EQU   ASMVT+1000
ASMSAVE  EQU   ASMVT+928
ASMWKSA7 EQU   ASMVT+848
ASMWKSA6 EQU   ASMVT+768
ASMIOEPC EQU   ASMVT+296
ASMRSV10 EQU   ASMVT+280
ASMPVACE EQU   ASMVT+276
ASMPIOFR EQU   ASMVT+272
ASMPVACQ EQU   ASMVT+268
ASMPMSGS EQU   ASMVT+264
ASMPMSG0 EQU   ASMVT+260
ASMPFRLG EQU   ASMVT+256
ASMPRLG  EQU   ASMVT+252
ASMPACT  EQU   ASMVT+248
ASMPSAV  EQU   ASMVT+244
ASMPCMP  EQU   ASMVT+240
ASMPCMPA EQU   ASMVT+236
ASMPCMPN EQU   ASMVT+232
ASMPCMPD EQU   ASMVT+228
ASMVRMTR EQU   ASMVT+220
ASMPSRBC EQU   ASMVT+216
ASMPSRMT EQU   ASMVT+212
ASMPSWPD EQU   ASMVT+208
ASMPTM   EQU   ASMVT+204
ASMPFRSW EQU   ASMVT+200
ASMPFRSL EQU   ASMVT+196
ASMPQIOE EQU   ASMVT+192
ASMRSV8  EQU   ASMVT+184
ASMTASCB EQU   ASMVT+180
ASMRLGWQ EQU   ASMVT+176
ASMRLGRQ EQU   ASMVT+172
ASMTMECB EQU   ASMVT+168
ASMTCBPT EQU   ASMVT+164
ASMGOSWK EQU   ASMGOSQS+4
ASMGOSWT EQU   ASMGOSQS
ASMLSAIH EQU   ASMLSAI+4
ASMLSAIL EQU   ASMLSAI
ASMCINV  EQU   ASMVT+140
ASMSTGXA EQU   ASMVT+136
ASMLGVT  EQU   ASMVT+132
ASMSLOTV EQU   ASMVT+128
ASMERRS  EQU   ASMVT+124
ASMNVSC  EQU   ASMVT+120
ASMVSC   EQU   ASMVT+116
ASMSLOTS EQU   ASMVT+112
ASMRSV7  EQU   ASMVT+92
ASMPSRB  EQU   ASMVT+88
ASMSRBCT EQU   ASMVT+84
ASMIOCNT EQU   ASMVT+80
ASMBURST EQU   ASMVT+76
ASMPCCWN EQU   ASMVT+72
ASMPCCWC EQU   ASMPCCWQ+4
ASMPCCWA EQU   ASMPCCWQ
ASMRSV6  EQU   ASMVT+48
ASMIORQC EQU   ASMVT+44
ASMIORQR EQU   ASMVT+40
ASMSTAGL EQU   ASMSTAGQ+4
ASMSTAGF EQU   ASMSTAGQ
ASMRSV5  EQU   ASMVT+28
ASMMSGBF EQU   ASMVT+24
ASMEREC  EQU   ASMVT+20
ASMTRPAG EQU   ASMVT+16
ASMGOS   EQU   ASMVT+12
ASMPART  EQU   ASMVT+8
ASMSART  EQU   ASMVT+4
ASMDSSFS EQU   ASMVT+2
ASMWARM  EQU   ASMFLAG2
ASMQUICK EQU   ASMFLAG2
ASMNOTPT EQU   ASMFLAG2
ASMNOTMR EQU   ASMFLAG2
ASMNOSAV EQU   ASMFLAG2
ASMCALLQ EQU   ASMFLAG2
ASMPLPAS EQU   ASMFLAG1
ASMCOMMF EQU   ASMFLAG1
ASMPLPAF EQU   ASMFLAG1
ASMNODPX EQU   ASMFLAG1
ASMRSV1  EQU   ASMFLAG1
ASMNOLCL EQU   ASMFLAG1
ASMNOCWQ EQU   ASMFLAG1
ASMDUPLX EQU   ASMFLAG1
ASCBEND  EQU   ASCB+208
ASCBSRBT EQU   ASCB+200
ASCBSWTL EQU   ASCB+196
ASCBRS14 EQU   ASCB+195
ASCBSMCT EQU   ASCB+194
ASCBRS12 EQU   ASCB+192
ASCBPCTT EQU   ASCB+188
ASCBVGTT EQU   ASCB+184
ASCBRV43 EQU   ASCBSRQ4
ASCBRV42 EQU   ASCBSRQ4
ASCBRV41 EQU   ASCBSRQ4
ASCBRV40 EQU   ASCBSRQ4
ASCBRV39 EQU   ASCBSRQ4
ASCBRV38 EQU   ASCBSRQ4
ASCBRV37 EQU   ASCBSRQ4
ASCBRV36 EQU   ASCBSRQ4
ASCBRV35 EQU   ASCBSRQ3
ASCBRV34 EQU   ASCBSRQ3
ASCBRV33 EQU   ASCBSRQ3
ASCBRV32 EQU   ASCBSRQ3
ASCBRV31 EQU   ASCBSRQ3
ASCBRV30 EQU   ASCBSRQ3
ASCBRV29 EQU   ASCBSRQ3
ASCBRV28 EQU   ASCBSRQ3
ASCBRV27 EQU   ASCBSRQ2
ASCBRV26 EQU   ASCBSRQ2
ASCBRV25 EQU   ASCBSRQ2
ASCBRV24 EQU   ASCBSRQ2
ASCBRV23 EQU   ASCBSRQ2
ASCBRV22 EQU   ASCBSRQ2
ASCBRV21 EQU   ASCBSRQ2
ASCBRV20 EQU   ASCBSRQ2
ASCBRV19 EQU   ASCBSRQ1
ASCBRV18 EQU   ASCBSRQ1
ASCBRV17 EQU   ASCBSRQ1
ASCBRV16 EQU   ASCBSRQ1
ASCBRV15 EQU   ASCBSRQ1
ASCBRV14 EQU   ASCBSRQ1
ASCBRV13 EQU   ASCBSRQ1
ASCBSTA  EQU   ASCBSRQ1
ASCBJBNS EQU   ASCB+176
ASCBJBNI EQU   ASCB+172
ASCBMCC  EQU   ASCB+168
ASCBRTWA EQU   ASCB+164
ASCBIQEA EQU   ASCB+160
ASCBXMPQ EQU   ASCB+156
ASCBRS01 EQU   ASCB+154
ASCBFMCT EQU   ASCB+152
ASCBOUXB EQU   ASCB+148
ASCBOUCB EQU   ASCB+144
ASCBMECB EQU   ASCB+140
ASCBQECB EQU   ASCB+136
ASCBLSQH EQU   ASCBLKGP+4
ASCBLOCK EQU   ASCBLKGP
ASCBTCBS EQU   ASCB+124
ASCBNVSC EQU   ASCB+122
ASCBVSC  EQU   ASCB+120
ASCBSRBS EQU   ASCB+118
ASCBSSRB EQU   ASCB+116
ASCBRV06 EQU   ASCBFLG2
ASCBRV05 EQU   ASCBFLG2
ASCBRV04 EQU   ASCBFLG2
ASCBSNQS EQU   ASCBFLG2
ASCBS2S  EQU   ASCBFLG2
ASCBCEXT EQU   ASCBFLG2
ASCBPXMT EQU   ASCBFLG2
ASCBXMPT EQU   ASCBFLG2
ASCBRF07 EQU   ASCBDSP1
ASCBRF06 EQU   ASCBDSP1
ASCBRF05 EQU   ASCBDSP1
ASCBRF04 EQU   ASCBDSP1
ASCBRF03 EQU   ASCBDSP1
ASCBRF02 EQU   ASCBDSP1
ASCBFAIL EQU   ASCBDSP1
ASCBNOQ  EQU   ASCBDSP1
ASCBSWCT EQU   ASCB+112
ASCBASXB EQU   ASCB+108
ASCBTMCH EQU   ASCB+104
ASCBNSWP EQU   ASCBFLG1
ASCBTYP1 EQU   ASCBFLG1
ASCBSTND EQU   ASCBFLG1
ASCBABNT EQU   ASCBFLG1
ASCBTERM EQU   ASCBFLG1
ASCBS3S  EQU   ASCBFLG1
ASCBCMSH EQU   ASCBFLG1
ASCBTOFF EQU   ASCBFLG1
ASCBRF01 EQU   ASCBRCTF
ASCBTMLW EQU   ASCBRCTF
ASCBOUT  EQU   ASCBRCTF
ASCBWAIT EQU   ASCBRCTF
ASCBRV08 EQU   ASCBRCTF
ASCBFQU  EQU   ASCBRCTF
ASCBFRS  EQU   ASCBRCTF
ASCBTMNO EQU   ASCBRCTF
ASCBAFFN EQU   ASCBFW1
ASCBDUMP EQU   ASCB+96
ASCBRV44 EQU   ASCB+92
ASCBUBET EQU   ASCB+88
ASCBECB  EQU   ASCB+84
ASCBJSTL EQU   ASCB+80
ASCBEWST EQU   ASCB+72
ASCBEJST EQU   ASCB+64
ASCBTSB  EQU   ASCB+60
ASCBCSCB EQU   ASCB+56
ASCBLDA  EQU   ASCB+48
ASCBSTOR EQU   ASCB+44
ASCBDP   EQU   ASCB+43
ASCBRV07 EQU   ASCB+42
ASCBIOSM EQU   ASCB+40
ASCBSEQN EQU   ASCB+38
ASCBASID EQU   ASCB+36
ASCBCPUS EQU   ASCB+32
ASCBSPL  EQU   ASCB+28
ASCBIOSP EQU   ASCB+24
ASCBSYNC EQU   ASCBSUPC+4
ASCBSVRB EQU   ASCBSUPC
ASCBCMSF EQU   ASCB+12
ASCBBWDP EQU   ASCB+8
ASCBFWDP EQU   ASCB+4
ASCBASCB EQU   ASCB
ASCBEGIN EQU   ASCB
@NM00002 EQU   ACE+40
ACESRBWK EQU   ACE+36
ACEECB   EQU   ACE+32
ACEAIAPT EQU   ACESYM+4
ACEVLSID EQU   ACESRCID+1
@NM00001 EQU   ACESRCID
ACETLPME EQU   ACERPN
ACELGID  EQU   ACELGN
ACERSV10 EQU   ACEFLG3
ACERSV9  EQU   ACEFLG3
ACERSV8  EQU   ACEFLG3
ACELPMEC EQU   ACEFLG3
ACERSV7  EQU   ACEFLG3
ACERSV6  EQU   ACEFLG3
ACEPRINO EQU   ACEFLG3
ACEGRPRQ EQU   ACEFLG3
ACEFLG2  EQU   ACE+10
ACERSV5  EQU   ACEFLG1
ACERSV4  EQU   ACEFLG1
ACERSV3  EQU   ACEFLG1
ACERSV2  EQU   ACEFLG1
ACENOACT EQU   ACEFLG1
ACEOVRID EQU   ACEFLG1
ACETRPWT EQU   ACEFLG1
ACEUSYM  EQU   ACEFLG1
@NM00045 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00044 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00043 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00042 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSARV013 EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAANEW  EQU   PSA+544
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00041 EQU   FLCFSA
@NM00040 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00039 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00038 EQU   FLCIOA
@NM00037 EQU   FLCMCLA+15
@NM00036 EQU   FLCMCLA+14
@NM00035 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00034 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00033 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00032 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00031 EQU   FLCPER
@NM00030 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00029 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00028 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00027 EQU   FLCPIILC
@NM00026 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00025 EQU   FLCSVILC
@NM00024 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00023 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00022 EQU   FLCICCW2+4
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00102 EQU   EXIT
@RT00142 EQU   EXIT
@RT00151 EQU   PREEXIT
@RT00174 EQU   PREEXIT
@RT00177 EQU   PREEXIT
@RC00283 EQU   @RC00280
@RF00294 EQU   @RC00273
@RF00293 EQU   @RC00273
@RF00303 EQU   @RC00273
@RC00555 EQU   @EL00001
@RC00608 EQU   @RC00604
@RF00617 EQU   @RC00614
@RC00630 EQU   @RC00626
@RC00642 EQU   @RC00639
@RC00708 EQU   @RC00706
@RC00712 EQU   @RC00706
@RT00724 EQU   ALSLOOP
@ENDDATA EQU   *
         END   ILRGOS01,(C'PLS0816',0701,76315)
