         TITLE 'ILRFMTPG   ASM PAGE CONTROL-BLOCK FORMATTING MODULE    *
                        '
ILRFMTPG CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'ILRFMTPG  76.170'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @09,0                                               0001
@PSTART  LA    @10,4095(,@09)                                      0001
         USING @PSTART,@09                                         0001
         USING @PSTART+4095,@10                                    0001
         ST    @13,@SA00001+4                                      0001
         LA    @14,@SA00001                                        0001
         ST    @14,8(,@13)                                         0001
         LR    @13,@14                                             0001
*   ABDPLPTR=R1;                    /* SET PRINTDUMP PARM LIST PTR 0049
*                                      FROM INPUT REG                */
         LR    ABDPLPTR,R1                                         0049
*   ASMVTPTR=R3;                    /* SET ASMVT BASE FROM INPUT   0050
*                                      REGISTER                      */
         LR    ASMVTPTR,R3                                         0050
*   RFY                                                            0051
*    (R1,                                                          0051
*     R3) UNRSTD;                                                  0051
*   DO;                             /* ILRMACCS (PART) VIA(ASMPART)  */
*     RFY                                                          0053
*      (R0,                                                        0053
*       R1,                                                        0053
*       R14,                                                       0053
*       R15) RSTD;                                                 0053
*     R1=ABDPLPTR;                                                 0054
         LR    R1,ABDPLPTR                                         0054
*     R0=ADDR(ASMPART);             /* ADDR OF CELL WITH PTR         */
         LA    R0,ASMPART(,ASMVTPTR)                               0055
*     CALL ACCESS;                  /* ACCESS PTR TO PART            */
         L     @15,ADPLMEMA(,ABDPLPTR)                             0056
         BALR  @14,@15                                             0056
*     IF R15=GOOD THEN                                             0057
         LTR   R15,R15                                             0057
         BNZ   @RF00057                                            0057
*       DO;                         /* FOUND PTR - NOW FIND BLOCK    */
*         R14=R0;                   /* CANNOT USE R0 AS BASE REG     */
         LR    R14,R0                                              0059
*         R0=CURRENT;               /* POINTER ITSELF                */
         L     R0,CURRENT(,R14)                                    0060
*         PARTPTR=R0;               /* SAVE POINTER                  */
         ST    R0,PARTPTR                                          0061
*         CALL ACCESS;              /* ACCESS PART ITSELF            */
         L     @15,ADPLMEMA(,ABDPLPTR)                             0062
         BALR  @14,@15                                             0062
*         IF R15^=GOOD THEN                                        0063
         SLR   @12,@12                                             0063
         CR    R15,@12                                             0063
         BE    @RF00063                                            0063
*           PARTPTR=NULLPTR;                                       0064
         ST    @12,PARTPTR                                         0064
*       END;                                                       0065
*     ELSE                                                         0066
*       PARTPTR=NULLPTR;                                           0066
         B     @RC00057                                            0066
@RF00057 SLR   @12,@12                                             0066
         ST    @12,PARTPTR                                         0066
*     RFY                                                          0067
*      (R0,                                                        0067
*       R1,                                                        0067
*       R14,                                                       0067
*       R15) UNRSTD;                                               0067
@RC00057 DS    0H                                                  0068
*   END;                            /* GET ADDRESS OF PART   @ZA11398*/
*   IF PARTPTR^=NULLPTR THEN        /* ACCESS WAS SUCCESSFUL         */
         ICM   @14,15,PARTPTR                                      0069
         BZ    @RF00069                                            0069
*     DO;                                                          0070
*       CALL FMTPART;               /* CALL SEGMENT TO FORMAT PART   */
         BAL   @14,FMTPART                                         0071
*       IF R15=ZERO THEN            /* SUCCESSFULLY FORMAT THE PART? */
         LTR   R15,R15                                             0072
         BNZ   @RF00072                                            0072
*         DO;                       /* CONTINUE                      */
*           DO;                     /* ILRMACCS (PCTPTR)           0074
*                                      FROM(PARTPCTQ)                */
*             RFY                                                  0075
*              (R0,                                                0075
*               R1,                                                0075
*               R14,                                               0075
*               R15) RSTD;                                         0075
*             R0=ADDR(PARTPCTQ);                                   0076
         L     @12,PARTPTR                                         0076
         LA    R0,PARTPCTQ(,@12)                                   0076
*             R1=ABDPLPTR;          /* POINT TO PARM LIST            */
         LR    R1,ABDPLPTR                                         0077
*             CALL ACCESS;          /* ACCESS DATA                   */
         L     @15,ADPLMEMA(,ABDPLPTR)                             0078
         BALR  @14,@15                                             0078
*             R14=R0;               /* CANNOT USE R0 AS BASE         */
         LR    R14,R0                                              0079
*             IF R15=GOOD THEN      /* CHECK ACCESS                  */
         LTR   R15,R15                                             0080
         BNZ   @RF00080                                            0080
*               PCTPTR=CURRENT;     /* GET REQUESTED FIELD           */
         MVC   PCTPTR(4),CURRENT(R14)                              0081
*             ELSE                  /* ACCESS NO GOOD                */
*               PCTPTR=ZERO;        /* ZERO FIELD                    */
         B     @RC00080                                            0082
@RF00080 SLR   @12,@12                                             0082
         ST    @12,PCTPTR                                          0082
*             RFY                                                  0083
*              (R0,                                                0083
*               R1,                                                0083
*               R14,                                               0083
*               R15) UNRSTD;                                       0083
@RC00080 DS    0H                                                  0084
*           END;                    /* GET ADDR OF PCT Q             */
*           IF PCTPTR^=NULLPTR THEN /* ACCESS WAS SUCCESSFUL         */
         ICM   @14,15,PCTPTR                                       0085
         BZ    @RF00085                                            0085
*             CALL FMTPCT;          /* CALL SEGMENT TO FMT PCT       */
         BAL   @14,FMTPCT                                          0086
*           ELSE                                                   0087
*             ;                     /* PCTPTR WAS NULL               */
*                                                                  0087
@RF00085 DS    0H                                                  0088
*           /*********************************************************/
*           /*                                                       */
*           /* NOTE: THE FOLLOWING INSTRUCTION TO OR IN THE RETURN   */
*           /* CODE ORS IN EITHER ACCESS RC OR FMTPCTS RETURN CODE   */
*           /* DEPENDING ON THE CONTENTS OF PCTPTR. THIS METHOD IS   */
*           /* USED THROUGOUT THE MODULE.                            */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0088
*           CUMRC=CUMRC×R15;        /* OR IN RET CODE                */
         L     @14,CUMRC                                           0088
         OR    @14,R15                                             0088
         ST    @14,CUMRC                                           0088
*                                                                  0089
*/********************************************************************/
*/* ACCESS AND FORMAT THE AIA ERROR QUEUE.  IF THE ACCESS IS GOOD    */
*/*  AND THE QUEUE POINTER IS NOT ZERO, SET UP ANCHOR, CALL SEGMENT  */
*/*  TO FORMAT AIA QUEUE AND OR IN RETURN CODE.   IF THE QUEUE WAS   */
*/*  EMPTY, SKIP THE PROCESSING.  IF THE ACCESS FAILED, SKIP THE     */
*/* PROCESSING AND SET BAD RETURN CODE.                              */
*/********************************************************************/
*                                                                  0089
*           DO;                     /* ILRMACCS (AIAPTR)           0089
*                                      FROM(PARTAIAE)                */
*             RFY                                                  0090
*              (R0,                                                0090
*               R1,                                                0090
*               R14,                                               0090
*               R15) RSTD;                                         0090
*             R0=ADDR(PARTAIAE);                                   0091
         L     @12,PARTPTR                                         0091
         LA    R0,PARTAIAE(,@12)                                   0091
*             R1=ABDPLPTR;          /* POINT TO PARM LIST            */
         LR    R1,ABDPLPTR                                         0092
*             CALL ACCESS;          /* ACCESS DATA                   */
         L     @15,ADPLMEMA(,ABDPLPTR)                             0093
         BALR  @14,@15                                             0093
*             R14=R0;               /* CANNOT USE R0 AS BASE         */
         LR    R14,R0                                              0094
*             IF R15=GOOD THEN      /* CHECK ACCESS                  */
         LTR   R15,R15                                             0095
         BNZ   @RF00095                                            0095
*               AIAPTR=CURRENT;     /* GET REQUESTED FIELD           */
         L     AIAPTR,CURRENT(,R14)                                0096
*             ELSE                  /* ACCESS NO GOOD                */
*               AIAPTR=ZERO;        /* ZERO FIELD                    */
         B     @RC00095                                            0097
@RF00095 SLR   AIAPTR,AIAPTR                                       0097
*             RFY                                                  0098
*              (R0,                                                0098
*               R1,                                                0098
*               R14,                                               0098
*               R15) UNRSTD;                                       0098
@RC00095 DS    0H                                                  0099
*           END;                                                   0099
*           IF AIAPTR^=NULLPTR THEN /* QUEUE NOT EMPTY               */
         LTR   AIAPTR,AIAPTR                                       0100
         BZ    @RF00100                                            0100
*             DO;                                                  0101
*               ANCHTXT=ANCH;       /* ANCHORED TEXT                 */
         L     @14,ADPLBUF(,ABDPLPTR)                              0102
         MVC   ANCHTXT(11,@14),ANCH                                0102
*               ANCHNAME=ANCHAIA2;  /* NAME OF ANCHOR                */
         MVC   ANCHNAME(8,@14),ANCHAIA2                            0103
*               RFY                                                0104
*                (R0,                                              0104
*                 R1,                                              0104
*                 R2) RSTD;                                        0104
*               R0=AIAPTR;          /* SET UP INTERFACE TO ILRFAIA   */
         LR    R0,AIAPTR                                           0105
*               R2=PARMFAIA;        /* PROCESS PARM FOR ILRFAIA      */
         LA    R2,1                                                0106
*               CALL ILRFAIA;       /* CALL SEGMENT TO FMT AIA Q     */
         L     @15,@CV00491                                        0107
         BALR  @14,@15                                             0107
*               RFY                                                0108
*                (R0,                                              0108
*                 R1,                                              0108
*                 R2) UNRSTD;                                      0108
*             END;                                                 0109
*           ELSE                                                   0110
*             ;                     /* THE QUEUE WAS EMPTY           */
@RF00100 DS    0H                                                  0111
*           CUMRC=CUMRC×R15;        /* OR IN APPROPRIATE RET CODE    */
         L     @14,CUMRC                                           0111
         OR    @14,R15                                             0111
         ST    @14,CUMRC                                           0111
*                                                                  0112
*/********************************************************************/
*/* ACCESS AND FORMAT FOUR QUEUES OF IOES FROM PARTCOMQ, PARTSPLQ,   */
*/*  PARTDUPQ, AND PARTLOCQ.  IF ACCESS IS SUCCESSFUL AND THE        */
*/*  QUEUE POINTER IS NOT ZERO, THEN SET UP HEADER ANCHOR, CALL      */
*/*  SEGMENT TO FORMAT IOE QUEUE AND OR IN RETURN CODE.   IF THE     */
*/*  QUEUE POINTER WAS ZERO, SKIP THAT PROCESSING.  IF THE ACCESS    */
*/*  FAILED, SKIP THE PROCESSING AND SET BAD RETURN CODE.            */
*/********************************************************************/
*                                                                  0112
*           DO;                     /* ILRMACCS (IOEPTR)           0112
*                                      FROM(PARTCOMQ)                */
*             RFY                                                  0113
*              (R0,                                                0113
*               R1,                                                0113
*               R14,                                               0113
*               R15) RSTD;                                         0113
*             R0=ADDR(PARTCOMQ);                                   0114
         L     @12,PARTPTR                                         0114
         LA    R0,PARTCOMQ(,@12)                                   0114
*             R1=ABDPLPTR;          /* POINT TO PARM LIST            */
         LR    R1,ABDPLPTR                                         0115
*             CALL ACCESS;          /* ACCESS DATA                   */
         L     @15,ADPLMEMA(,ABDPLPTR)                             0116
         BALR  @14,@15                                             0116
*             R14=R0;               /* CANNOT USE R0 AS BASE         */
         LR    R14,R0                                              0117
*             IF R15=GOOD THEN      /* CHECK ACCESS                  */
         LTR   R15,R15                                             0118
         BNZ   @RF00118                                            0118
*               IOEPTR=CURRENT;     /* GET REQUESTED FIELD           */
         MVC   IOEPTR(4),CURRENT(R14)                              0119
*             ELSE                  /* ACCESS NO GOOD                */
*               IOEPTR=ZERO;        /* ZERO FIELD                    */
         B     @RC00118                                            0120
@RF00118 SLR   @12,@12                                             0120
         ST    @12,IOEPTR                                          0120
*             RFY                                                  0121
*              (R0,                                                0121
*               R1,                                                0121
*               R14,                                               0121
*               R15) UNRSTD;                                       0121
@RC00118 DS    0H                                                  0122
*           END;                                                   0122
*           IF IOEPTR^=NULLPTR THEN /* QUEUE NOT EMPTY               */
         ICM   @14,15,IOEPTR                                       0123
         BZ    @RF00123                                            0123
*             DO;                                                  0124
*               ANCHTXT=ANCH;       /* ANCHORED TEXT                 */
         L     @14,ADPLBUF(,ABDPLPTR)                              0125
         MVC   ANCHTXT(11,@14),ANCH                                0125
*               ANCHNAME=ANCHIOE1;  /* SET UP CORRECT ANCHOR         */
         MVC   ANCHNAME(8,@14),ANCHIOE1                            0126
*               CALL FMTIOE;        /* CALL SEGMENT TO FMT IOE Q     */
         BAL   @14,FMTIOE                                          0127
*             END;                                                 0128
*           ELSE                                                   0129
*             ;                     /* THE QUEUE WAS EMPTY           */
@RF00123 DS    0H                                                  0130
*           CUMRC=CUMRC×R15;        /* OR IN APPROPRIATE RET CODE    */
         L     @14,CUMRC                                           0130
         OR    @14,R15                                             0130
         ST    @14,CUMRC                                           0130
*           DO;                     /* ILRMACCS (IOEPTR)           0131
*                                      FROM(PARTSPLQ)                */
*             RFY                                                  0132
*              (R0,                                                0132
*               R1,                                                0132
*               R14,                                               0132
*               R15) RSTD;                                         0132
*             R0=ADDR(PARTSPLQ);                                   0133
         L     @12,PARTPTR                                         0133
         LA    R0,PARTSPLQ(,@12)                                   0133
*             R1=ABDPLPTR;          /* POINT TO PARM LIST            */
         LR    R1,ABDPLPTR                                         0134
*             CALL ACCESS;          /* ACCESS DATA                   */
         L     @15,ADPLMEMA(,ABDPLPTR)                             0135
         BALR  @14,@15                                             0135
*             R14=R0;               /* CANNOT USE R0 AS BASE         */
         LR    R14,R0                                              0136
*             IF R15=GOOD THEN      /* CHECK ACCESS                  */
         LTR   R15,R15                                             0137
         BNZ   @RF00137                                            0137
*               IOEPTR=CURRENT;     /* GET REQUESTED FIELD           */
         MVC   IOEPTR(4),CURRENT(R14)                              0138
*             ELSE                  /* ACCESS NO GOOD                */
*               IOEPTR=ZERO;        /* ZERO FIELD                    */
         B     @RC00137                                            0139
@RF00137 SLR   @12,@12                                             0139
         ST    @12,IOEPTR                                          0139
*             RFY                                                  0140
*              (R0,                                                0140
*               R1,                                                0140
*               R14,                                               0140
*               R15) UNRSTD;                                       0140
@RC00137 DS    0H                                                  0141
*           END;                                                   0141
*           IF IOEPTR^=NULLPTR THEN /* QUEUE NOT EMPTY               */
         ICM   @14,15,IOEPTR                                       0142
         BZ    @RF00142                                            0142
*             DO;                                                  0143
*               ANCHTXT=ANCH;       /* ANCHORED TEXT                 */
         L     @14,ADPLBUF(,ABDPLPTR)                              0144
         MVC   ANCHTXT(11,@14),ANCH                                0144
*               ANCHNAME=ANCHIOE2;  /* NAME OF ANCHOR                */
         MVC   ANCHNAME(8,@14),ANCHIOE2                            0145
*               CALL FMTIOE;        /* CALL SEGMENT TO FMT IOE Q     */
         BAL   @14,FMTIOE                                          0146
*             END;                                                 0147
*           ELSE                                                   0148
*             ;                     /* THE QUEUE WAS ENPTY           */
@RF00142 DS    0H                                                  0149
*           CUMRC=CUMRC×R15;        /* OR IN APPROPRIATE RET CODE    */
         L     @14,CUMRC                                           0149
         OR    @14,R15                                             0149
         ST    @14,CUMRC                                           0149
*           DO;                     /* ILRMACCS (IOEPTR)           0150
*                                      FROM(PARTDUPQ)                */
*             RFY                                                  0151
*              (R0,                                                0151
*               R1,                                                0151
*               R14,                                               0151
*               R15) RSTD;                                         0151
*             R0=ADDR(PARTDUPQ);                                   0152
         L     @12,PARTPTR                                         0152
         LA    R0,PARTDUPQ(,@12)                                   0152
*             R1=ABDPLPTR;          /* POINT TO PARM LIST            */
         LR    R1,ABDPLPTR                                         0153
*             CALL ACCESS;          /* ACCESS DATA                   */
         L     @15,ADPLMEMA(,ABDPLPTR)                             0154
         BALR  @14,@15                                             0154
*             R14=R0;               /* CANNOT USE R0 AS BASE         */
         LR    R14,R0                                              0155
*             IF R15=GOOD THEN      /* CHECK ACCESS                  */
         LTR   R15,R15                                             0156
         BNZ   @RF00156                                            0156
*               IOEPTR=CURRENT;     /* GET REQUESTED FIELD           */
         MVC   IOEPTR(4),CURRENT(R14)                              0157
*             ELSE                  /* ACCESS NO GOOD                */
*               IOEPTR=ZERO;        /* ZERO FIELD                    */
         B     @RC00156                                            0158
@RF00156 SLR   @12,@12                                             0158
         ST    @12,IOEPTR                                          0158
*             RFY                                                  0159
*              (R0,                                                0159
*               R1,                                                0159
*               R14,                                               0159
*               R15) UNRSTD;                                       0159
@RC00156 DS    0H                                                  0160
*           END;                                                   0160
*           IF IOEPTR^=NULLPTR THEN /* QUEUE NOT EMPTY               */
         ICM   @14,15,IOEPTR                                       0161
         BZ    @RF00161                                            0161
*             DO;                                                  0162
*               ANCHTXT=ANCH;       /* ANCHORED TEXT                 */
         L     @14,ADPLBUF(,ABDPLPTR)                              0163
         MVC   ANCHTXT(11,@14),ANCH                                0163
*               ANCHNAME=ANCHIOE3;  /* NAME OF ANCHOR                */
         MVC   ANCHNAME(8,@14),ANCHIOE3                            0164
*               CALL FMTIOE;        /* CALL SEGMENT TO FMT IOE Q     */
         BAL   @14,FMTIOE                                          0165
*             END;                                                 0166
*           ELSE                                                   0167
*             ;                     /* QUEUE WAS EMPTY               */
@RF00161 DS    0H                                                  0168
*           CUMRC=CUMRC×R15;        /* OR IN APPROPRIATE RET CODE    */
         L     @14,CUMRC                                           0168
         OR    @14,R15                                             0168
         ST    @14,CUMRC                                           0168
*           DO;                     /* ILRMACCS (IOEPTR)           0169
*                                      FROM(PARTLOCQ)                */
*             RFY                                                  0170
*              (R0,                                                0170
*               R1,                                                0170
*               R14,                                               0170
*               R15) RSTD;                                         0170
*             R0=ADDR(PARTLOCQ);                                   0171
         L     @12,PARTPTR                                         0171
         LA    R0,PARTLOCQ(,@12)                                   0171
*             R1=ABDPLPTR;          /* POINT TO PARM LIST            */
         LR    R1,ABDPLPTR                                         0172
*             CALL ACCESS;          /* ACCESS DATA                   */
         L     @15,ADPLMEMA(,ABDPLPTR)                             0173
         BALR  @14,@15                                             0173
*             R14=R0;               /* CANNOT USE R0 AS BASE         */
         LR    R14,R0                                              0174
*             IF R15=GOOD THEN      /* CHECK ACCESS                  */
         LTR   R15,R15                                             0175
         BNZ   @RF00175                                            0175
*               IOEPTR=CURRENT;     /* GET REQUESTED FIELD           */
         MVC   IOEPTR(4),CURRENT(R14)                              0176
*             ELSE                  /* ACCESS NO GOOD                */
*               IOEPTR=ZERO;        /* ZERO FIELD                    */
         B     @RC00175                                            0177
@RF00175 SLR   @12,@12                                             0177
         ST    @12,IOEPTR                                          0177
*             RFY                                                  0178
*              (R0,                                                0178
*               R1,                                                0178
*               R14,                                               0178
*               R15) UNRSTD;                                       0178
@RC00175 DS    0H                                                  0179
*           END;                                                   0179
*           IF IOEPTR^=NULLPTR THEN /* QUEUE NOT EMPTY               */
         ICM   @14,15,IOEPTR                                       0180
         BZ    @RF00180                                            0180
*             DO;                                                  0181
*               ANCHTXT=ANCH;       /* ANCHORED TEXT                 */
         L     @14,ADPLBUF(,ABDPLPTR)                              0182
         MVC   ANCHTXT(11,@14),ANCH                                0182
*               ANCHNAME=ANCHIOE4;  /* NAME OF ANCHOR                */
         MVC   ANCHNAME(8,@14),ANCHIOE4                            0183
*               CALL FMTIOE;        /* CALL SEGMENT TO FMT IOE Q     */
         BAL   @14,FMTIOE                                          0184
*             END;                                                 0185
*           ELSE                                                   0186
*             ;                     /* THE QUEUE WAS EMPTY           */
@RF00180 DS    0H                                                  0187
*           CUMRC=CUMRC×R15;        /* OR IN APPROPRIATE RET CODE    */
         L     @14,CUMRC                                           0187
         OR    @14,R15                                             0187
         ST    @14,CUMRC                                           0187
*                                                                  0188
*/********************************************************************/
*/* THIS SECTION PROCESSES THE PART ENTRY:                           */
*/*   1. GET THE NUMBER OF PART ENTRIES                              */
*/*   2. INITIALIZE:  -DATA SET NAME LIST ADDRESS                    */
*/*                   -PART ENTRY COUNTER                            */
*/*                   -ADDRESS OF FIRST ENTRY                        */
*/*  FOR EACH ENTRY:                                                 */
*/*   3. CALL SEGMENT TO FORMAT PARTE                                */
*/*   4. INCREMENT COUNTER                                           */
*/*   5. CALCULATE NEXT ENTRY ADDRESS AND NEXT DSNAME ADDRESS        */
*/********************************************************************/
*                                                                  0188
*           DO;                     /* ILRMACCS (NUMPARTE)         0188
*                                      FROM(PARTSIZE)                */
*             RFY                                                  0189
*              (R0,                                                0189
*               R1,                                                0189
*               R14,                                               0189
*               R15) RSTD;                                         0189
*             R0=ADDR(PARTSIZE);                                   0190
         L     @12,PARTPTR                                         0190
         LA    R0,PARTSIZE(,@12)                                   0190
*             R1=ABDPLPTR;          /* POINT TO PARM LIST            */
         LR    R1,ABDPLPTR                                         0191
*             CALL ACCESS;          /* ACCESS DATA                   */
         L     @15,ADPLMEMA(,ABDPLPTR)                             0192
         BALR  @14,@15                                             0192
*             R14=R0;               /* CANNOT USE R0 AS BASE         */
         LR    R14,R0                                              0193
*             IF R15=GOOD THEN      /* CHECK ACCESS                  */
         LTR   R15,R15                                             0194
         BNZ   @RF00194                                            0194
*               NUMPARTE=CURRENT;   /* GET REQUESTED FIELD           */
         MVC   NUMPARTE(4),CURRENT(R14)                            0195
*             ELSE                  /* ACCESS NO GOOD                */
*               NUMPARTE=ZERO;      /* ZERO FIELD                    */
         B     @RC00194                                            0196
@RF00194 SLR   @12,@12                                             0196
         ST    @12,NUMPARTE                                        0196
*             RFY                                                  0197
*              (R0,                                                0197
*               R1,                                                0197
*               R14,                                               0197
*               R15) UNRSTD;                                       0197
@RC00194 DS    0H                                                  0198
*           END;                    /* GET NUM PART ENTRIES          */
*           IF NUMPARTE^=ZERO THEN  /* ACCESS WAS GOOD               */
         ICM   @14,15,NUMPARTE                                     0199
         BZ    @RF00199                                            0199
*             DO;                                                  0200
*               DO;                 /* ILRMACCS (DSNLPARM)         0201
*                                      FROM(PARTDSNL)                */
*                 RFY                                              0202
*                  (R0,                                            0202
*                   R1,                                            0202
*                   R14,                                           0202
*                   R15) RSTD;                                     0202
*                 R0=ADDR(PARTDSNL);                               0203
         L     @12,PARTPTR                                         0203
         LA    R0,PARTDSNL(,@12)                                   0203
*                 R1=ABDPLPTR;      /* POINT TO PARM LIST            */
         LR    R1,ABDPLPTR                                         0204
*                 CALL ACCESS;      /* ACCESS DATA                   */
         L     @15,ADPLMEMA(,ABDPLPTR)                             0205
         BALR  @14,@15                                             0205
*                 R14=R0;           /* CANNOT USE R0 AS BASE         */
         LR    R14,R0                                              0206
*                 IF R15=GOOD THEN  /* CHECK ACCESS                  */
         LTR   R15,R15                                             0207
         BNZ   @RF00207                                            0207
*                   DSNLPARM=CURRENT;/* GET REQUESTED FIELD          */
         L     DSNLPARM,CURRENT(,R14)                              0208
*                 ELSE              /* ACCESS NO GOOD                */
*                   DSNLPARM=ZERO;  /* ZERO FIELD                    */
         B     @RC00207                                            0209
@RF00207 SLR   DSNLPARM,DSNLPARM                                   0209
*                 RFY                                              0210
*                  (R0,                                            0210
*                   R1,                                            0210
*                   R14,                                           0210
*                   R15) UNRSTD;                                   0210
@RC00207 DS    0H                                                  0211
*               END;                                               0211
*               IF DSNLPARM^=NULLPTR THEN                          0212
         LTR   DSNLPARM,DSNLPARM                                   0212
         BZ    @RF00212                                            0212
*                 DO;               /* DSN TABLE EXIST?      @ZA11398*/
*                   RFY                                            0214
*                    (R0,                                          0214
*                     R1,                                          0214
*                     R15) RSTD;    /*                       @ZA11398*/
*                   R0=DSNLPARM;    /* INPUT TO ACCESS       @ZA11398*/
         LR    R0,DSNLPARM                                         0215
*                   R1=ABDPLPTR;    /* INPUT TO ACCESS       @ZA11398*/
         LR    R1,ABDPLPTR                                         0216
*                   CALL ACCESS;    /* DSN TABLE ACCESSIBLE? @ZA11398*/
         L     @15,ADPLMEMA(,ABDPLPTR)                             0217
         BALR  @14,@15                                             0217
*                   IF R15^=GOOD THEN                              0218
         LTR   R15,R15                                             0218
         BZ    @RF00218                                            0218
*                     DSNLPARM=NULLPTR;/* NO                 @ZA11398*/
         SLR   DSNLPARM,DSNLPARM                                   0219
*                   RFY                                            0220
*                    (R0,                                          0220
*                     R1,                                          0220
*                     R15) UNRSTD;  /*                       @ZA11398*/
@RF00218 DS    0H                                                  0221
*                 END;              /* DSN TABLE EXIST       @ZA11398*/
*               CUMRC=CUMRC×R15;    /* OR IN ACCESS RET CODE         */
@RF00212 L     @14,CUMRC                                           0222
         OR    @14,R15                                             0222
         ST    @14,CUMRC                                           0222
*/* PARTDSNL COULD BE ZERO - FMTPARTE WILL CHECK FOR THAT            */
*                                                                  0223
*               PAREPTR=ADDR(PARTENTS);/* ADDR OF FIRST PART ENTRY   */
         L     @14,PARTPTR                                         0223
         LA    @14,PARTENTS(,@14)                                  0223
         ST    @14,PAREPTR                                         0223
*               DO PARTECTR=1 TO NUMPARTE;/* UNTIL ALL ENTRIES     0224
*                                      PROCESSED                     */
         LA    @14,1                                               0224
         B     @DE00224                                            0224
@DL00224 DS    0H                                                  0225
*                 CALL FMTPARTE;    /* CALL SEGMENT OT FMT PARTE     */
         BAL   @14,FMTPARTE                                        0225
*                 CUMRC=CUMRC×R15;  /* OR IN RETURN CODE             */
         L     @14,CUMRC                                           0226
         OR    @14,R15                                             0226
         ST    @14,CUMRC                                           0226
*                 IF DSNLPARM^=NULLPTR THEN/* DSNAME EXISTS          */
         LTR   DSNLPARM,DSNLPARM                                   0227
         BZ    @RF00227                                            0227
*                   DSNLPARM=DSNLPARM+LENGTH(DSNAME);              0228
         AH    DSNLPARM,@CH00607                                   0228
*                 ELSE                                             0229
*                   ;               /* DSNLPARM WAS ZERO             */
@RF00227 DS    0H                                                  0230
*                 PAREPTR=PAREPTR+LENGTH(PARTENT);/* INCR TO NEXT  0230
*                                      PARTE ADDR                    */
         LA    @14,64                                              0230
         AL    @14,PAREPTR                                         0230
         ST    @14,PAREPTR                                         0230
*               END;                /* END 1 TO PARTECNT             */
         LA    @14,1                                               0231
         AL    @14,PARTECTR                                        0231
@DE00224 ST    @14,PARTECTR                                        0231
         C     @14,NUMPARTE                                        0231
         BNH   @DL00224                                            0231
*             END;                  /* END FORMAT PARTES- ACCESS GOOD
*                                      FOR PART SIZE                 */
*           ELSE                    /* ACCESS FAILED FOR PART SIZE   */
*             CUMRC=4;              /* SET BAD RET CODE              */
         B     @RC00199                                            0233
@RF00199 MVC   CUMRC(4),@CF00139                                   0233
*         END;                      /* END PART FORMATTING           */
*       ELSE                                                       0235
*         CUMRC=8;                  /* PART NOT FORMATTED          0235
*                                      SUCCESSFULLY                  */
         B     @RC00072                                            0235
@RF00072 MVC   CUMRC(4),@CF00040                                   0235
*     END;                          /* END PART PROCESSING           */
*   ELSE                            /* ACCESS FAILED FOR APRT        */
*     CUMRC=8;                                                     0237
         B     @RC00069                                            0237
@RF00069 MVC   CUMRC(4),@CF00040                                   0237
*   RETURN CODE(CUMRC);             /* RETURN TO CALLER              */
@RC00069 L     @15,CUMRC                                           0238
         L     @13,4(,@13)                                         0238
         L     @14,12(,@13)                                        0238
         LM    @00,@12,20(@13)                                     0238
         BR    @14                                                 0238
*                                                                  0239
*/********************************************************************/
*/*                                                                  */
*/* FMTPART: SEGMENT TO FORMAT THE PAGE ACTIVITY REFERENCE TABLE     */
*/*                                                                  */
*/* INPUT:   VIRTUAL ADDRESS OF PART IN PARTPTR                      */
*/*                                                                  */
*/* PROCESS: FORMAT FOUR LINES OF PART USING ILRMLINE AND ILRMFRMT.  */
*/*                                                                  */
*/* OUTPUT:  PART CONTROL BLOCK FORMATTED.                           */
*/*                                                                  */
*/* RETURN CODES: 0 - PART FORMATTED SUCCESSFULLY                    */
*/*               4 - AT LEAST 1 ERROR OCCURRED WHILE FORMATTING     */
*/*                     THE PART.                                    */
*/*                                                                  */
*/********************************************************************/
*                                                                  0239
*FMTPART:                                                          0239
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0239
FMTPART  DS    0H                                                  0240
*                                                                  0240
*   /*****************************************************************/
*   /*                                                               */
*   /* PAR1:ILRMLINE ((TIDEN,ASIS),TSIZE,TEUSE,TAIAE,TCIR1) OF(PART) */
*   /* LABEL VARIABLES REFERENCED IN FORMAT PATTERNS                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0240
*   DCL                                                            0240
*     PAR1LB1 CHAR(LENGTH('TIDEN')) INIT('TIDEN');                 0240
*   DCL                                                            0241
*     PAR1LB2 CHAR(LENGTH('TSIZE')) INIT('TSIZE');                 0241
*   DCL                                                            0242
*     PAR1LB3 CHAR(LENGTH('TEUSE')) INIT('TEUSE');                 0242
*   DCL                                                            0243
*     PAR1LB4 CHAR(LENGTH('TAIAE')) INIT('TAIAE');                 0243
*   DCL                                                            0244
*     PAR1LB5 CHAR(LENGTH('TCIR1')) INIT('TCIR1');                 0244
*                                                                  0244
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OF OUTPUT                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0245
*   DCL                                                            0245
*     1 PAR1PTS BDY(WORD),                                         0245
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00101111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PARTIDEN)-1+16*LENGTH('TIDEN
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(5),                                      0245
*       3 * FIXED(8) INIT(11),                                     0245
*       3 * PTR(31) INIT(ADDR(PAR1LB1)),/* SEE PTTLBPTR              */
*       3 PAR1DT1 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PARTSIZE)-1+16*LENGTH('TSIZE
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(15+8),                                   0245
*       3 * FIXED(8) INIT(21+8),                                   0245
*       3 * PTR(31) INIT(ADDR(PAR1LB2)),/* SEE PTTLBPTR              */
*       3 PAR1DT2 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PARTEUSE)-1+16*LENGTH('TEUSE
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(25+8+8),                                 0245
*       3 * FIXED(8) INIT(31+8+8),                                 0245
*       3 * PTR(31) INIT(ADDR(PAR1LB3)),/* SEE PTTLBPTR              */
*       3 PAR1DT3 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PARTAIAE)-1+16*LENGTH('TAIAE
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(35+8+8+8),                               0245
*       3 * FIXED(8) INIT(41+8+8+8),                               0245
*       3 * PTR(31) INIT(ADDR(PAR1LB4)),/* SEE PTTLBPTR              */
*       3 PAR1DT4 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PARTCIR1)-1+16*LENGTH('TCIR1
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(45+8+8+8+8),                             0245
*       3 * FIXED(8) INIT(51+8+8+8+8),                             0245
*       3 * PTR(31) INIT(ADDR(PAR1LB5)),/* SEE PTTLBPTR              */
*       3 PAR1DT5 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * FIXED(31) INIT(0);       /* END OF FORMAT PATTERNS        */
*                                                                  0246
*   /*****************************************************************/
*   /*                                                               */
*   /* PAR2:ILRMLINE (TCIR2,TDSNL,TPCTQ,TLCNT,TLKUP) LABEL VARIABLES */
*   /* REFERENCED IN FORMAT PATTERNS                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0246
*   DCL                                                            0246
*     PAR2LB1 CHAR(LENGTH('TCIR2')) INIT('TCIR2');                 0246
*   DCL                                                            0247
*     PAR2LB2 CHAR(LENGTH('TDSNL')) INIT('TDSNL');                 0247
*   DCL                                                            0248
*     PAR2LB3 CHAR(LENGTH('TPCTQ')) INIT('TPCTQ');                 0248
*   DCL                                                            0249
*     PAR2LB4 CHAR(LENGTH('TLCNT')) INIT('TLCNT');                 0249
*   DCL                                                            0250
*     PAR2LB5 CHAR(LENGTH('TLKUP')) INIT('TLKUP');                 0250
*                                                                  0250
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OF OUTPUT                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0251
*   DCL                                                            0251
*     1 PAR2PTS BDY(WORD),                                         0251
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PARTCIR2)-1+16*LENGTH('TCIR2
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(5),                                      0251
*       3 * FIXED(8) INIT(11),                                     0251
*       3 * PTR(31) INIT(ADDR(PAR2LB1)),/* SEE PTTLBPTR              */
*       3 PAR2DT1 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PARTDSNL)-1+16*LENGTH('TDSNL
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(15+8),                                   0251
*       3 * FIXED(8) INIT(21+8),                                   0251
*       3 * PTR(31) INIT(ADDR(PAR2LB2)),/* SEE PTTLBPTR              */
*       3 PAR2DT2 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PARTPCTQ)-1+16*LENGTH('TPCTQ
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(25+8+8),                                 0251
*       3 * FIXED(8) INIT(31+8+8),                                 0251
*       3 * PTR(31) INIT(ADDR(PAR2LB3)),/* SEE PTTLBPTR              */
*       3 PAR2DT3 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PARTLCNT)-1+16*LENGTH('TLCNT
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(35+8+8+8),                               0251
*       3 * FIXED(8) INIT(41+8+8+8),                               0251
*       3 * PTR(31) INIT(ADDR(PAR2LB4)),/* SEE PTTLBPTR              */
*       3 PAR2DT4 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PARTLKUP)-1+16*LENGTH('TLKUP
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(45+8+8+8+8),                             0251
*       3 * FIXED(8) INIT(51+8+8+8+8),                             0251
*       3 * PTR(31) INIT(ADDR(PAR2LB5)),/* SEE PTTLBPTR              */
*       3 PAR2DT5 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * FIXED(31) INIT(0);       /* END OF FORMAT PATTERNS        */
*                                                                  0252
*   /*****************************************************************/
*   /*                                                               */
*   /* PAR3:ILRMLINE (TLOCK,TCOMF,TCOML,TSPLF,TSPLL) LABEL VARIABLES */
*   /* REFERENCED IN FORMAT PATTERNS                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0252
*   DCL                                                            0252
*     PAR3LB1 CHAR(LENGTH('TLOCK')) INIT('TLOCK');                 0252
*   DCL                                                            0253
*     PAR3LB2 CHAR(LENGTH('TCOMF')) INIT('TCOMF');                 0253
*   DCL                                                            0254
*     PAR3LB3 CHAR(LENGTH('TCOML')) INIT('TCOML');                 0254
*   DCL                                                            0255
*     PAR3LB4 CHAR(LENGTH('TSPLF')) INIT('TSPLF');                 0255
*   DCL                                                            0256
*     PAR3LB5 CHAR(LENGTH('TSPLL')) INIT('TSPLL');                 0256
*                                                                  0256
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OF OUTPUT                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0257
*   DCL                                                            0257
*     1 PAR3PTS BDY(WORD),                                         0257
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PARTLOCK)-1+16*LENGTH('TLOCK
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(5),                                      0257
*       3 * FIXED(8) INIT(11),                                     0257
*       3 * PTR(31) INIT(ADDR(PAR3LB1)),/* SEE PTTLBPTR              */
*       3 PAR3DT1 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PARTCOMF)-1+16*LENGTH('TCOMF
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(15+8),                                   0257
*       3 * FIXED(8) INIT(21+8),                                   0257
*       3 * PTR(31) INIT(ADDR(PAR3LB2)),/* SEE PTTLBPTR              */
*       3 PAR3DT2 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PARTCOML)-1+16*LENGTH('TCOML
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(25+8+8),                                 0257
*       3 * FIXED(8) INIT(31+8+8),                                 0257
*       3 * PTR(31) INIT(ADDR(PAR3LB3)),/* SEE PTTLBPTR              */
*       3 PAR3DT3 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PARTSPLF)-1+16*LENGTH('TSPLF
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(35+8+8+8),                               0257
*       3 * FIXED(8) INIT(41+8+8+8),                               0257
*       3 * PTR(31) INIT(ADDR(PAR3LB4)),/* SEE PTTLBPTR              */
*       3 PAR3DT4 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PARTSPLL)-1+16*LENGTH('TSPLL
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(45+8+8+8+8),                             0257
*       3 * FIXED(8) INIT(51+8+8+8+8),                             0257
*       3 * PTR(31) INIT(ADDR(PAR3LB5)),/* SEE PTTLBPTR              */
*       3 PAR3DT5 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * FIXED(31) INIT(0);       /* END OF FORMAT PATTERNS        */
*                                                                  0258
*   /*****************************************************************/
*   /*                                                               */
*   /* PAR4:ILRMLINE (TDUPF,TDUPL,TLOCF,TLOCL) LABEL VARIABLES       */
*   /* REFERENCED IN FORMAT PATTERNS                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0258
*   DCL                                                            0258
*     PAR4LB1 CHAR(LENGTH('TDUPF')) INIT('TDUPF');                 0258
*   DCL                                                            0259
*     PAR4LB2 CHAR(LENGTH('TDUPL')) INIT('TDUPL');                 0259
*   DCL                                                            0260
*     PAR4LB3 CHAR(LENGTH('TLOCF')) INIT('TLOCF');                 0260
*   DCL                                                            0261
*     PAR4LB4 CHAR(LENGTH('TLOCL')) INIT('TLOCL');                 0261
*                                                                  0261
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OF OUTPUT                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0262
*   DCL                                                            0262
*     1 PAR4PTS BDY(WORD),                                         0262
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PARTDUPF)-1+16*LENGTH('TDUPF
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(5),                                      0262
*       3 * FIXED(8) INIT(11),                                     0262
*       3 * PTR(31) INIT(ADDR(PAR4LB1)),/* SEE PTTLBPTR              */
*       3 PAR4DT1 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PARTDUPL)-1+16*LENGTH('TDUPL
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(15+8),                                   0262
*       3 * FIXED(8) INIT(21+8),                                   0262
*       3 * PTR(31) INIT(ADDR(PAR4LB2)),/* SEE PTTLBPTR              */
*       3 PAR4DT2 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PARTLOCF)-1+16*LENGTH('TLOCF
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(25+8+8),                                 0262
*       3 * FIXED(8) INIT(31+8+8),                                 0262
*       3 * PTR(31) INIT(ADDR(PAR4LB3)),/* SEE PTTLBPTR              */
*       3 PAR4DT3 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PARTLOCL)-1+16*LENGTH('TLOCL
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(35+8+8+8),                               0262
*       3 * FIXED(8) INIT(41+8+8+8),                               0262
*       3 * PTR(31) INIT(ADDR(PAR4LB4)),/* SEE PTTLBPTR              */
*       3 PAR4DT4 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * FIXED(31) INIT(0);       /* END OF FORMAT PATTERNS        */
*                                                                  0263
*   /*****************************************************************/
*   /*                                                               */
*   /* FOLLOWING ROUTINE USES ABOVE PATTERNS TO FORMAT THE PART      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0263
*   RFY                                                            0263
*     R14 RSTD;                                                    0263
*   RTNADDR1=R14;                   /* SAVE RETURN ADDRESS           */
         ST    R14,RTNADDR1                                        0264
*   RFY                                                            0265
*     R14 UNRSTD;                                                  0265
*   ANCHNAME=ANCHPART;              /* SET UP HEADER                 */
         L     @14,ADPLBUF(,ABDPLPTR)                              0266
         MVC   ANCHNAME(8,@14),ANCHPART                            0266
*   ANCHTXT=ANCH;                   /* ANCHORED IN TEXT              */
         MVC   ANCHTXT(11,@14),ANCH                                0267
*   RFY                                                            0268
*    (R0,                                                          0268
*     R1) RSTD;                                                    0268
*   R0=ADDR(PARTPTR);               /* PTR TO BE FORMATTED.          */
         LA    R0,PARTPTR                                          0269
*   R1=ADDR(PARTNAM);               /* LABEL                         */
         LA    R1,PARTNAM                                          0270
*   CALL ILRFPRTH;                  /* FORMAT AND PRINT HEADING      */
         L     @15,@CV00488                                        0271
         BALR  @14,@15                                             0271
*   RFY                                                            0272
*    (R0,                                                          0272
*     R1) UNRSTD;                                                  0272
*   DO;                             /* ILRMFRMT (PART) LINES(PAR1,PAR
*                                      2,PAR3,PAR4)SPACE             */
*     FORMRC=0;                     /* ZERO THE RETURN CODE          */
         SLR   FORMRC,FORMRC                                       0274
*     PAR1DT1=ADDR(PARTIDEN);                                      0275
         L     @14,PARTPTR                                         0275
         ST    @14,PAR1DT1                                         0275
*     PAR1DT2=ADDR(PARTSIZE);                                      0276
         LA    @12,PARTSIZE(,@14)                                  0276
         ST    @12,PAR1DT2                                         0276
*     PAR1DT3=ADDR(PARTEUSE);                                      0277
         LA    @12,PARTEUSE(,@14)                                  0277
         ST    @12,PAR1DT3                                         0277
*     PAR1DT4=ADDR(PARTAIAE);                                      0278
         LA    @12,PARTAIAE(,@14)                                  0278
         ST    @12,PAR1DT4                                         0278
*     PAR1DT5=ADDR(PARTCIR1);                                      0279
         LA    @14,PARTCIR1(,@14)                                  0279
         ST    @14,PAR1DT5                                         0279
*     RFY                                                          0280
*      (R0,                                                        0280
*       R1) RSTD;                                                  0280
*     R0=ADDR(PAR1PTS);                                            0281
         LA    R0,PAR1PTS                                          0281
*     R1=ABDPLPTR;                  /* GET PARM ADDR                 */
         LR    R1,ABDPLPTR                                         0282
*     CALL FORMAT;                  /* FORMAT THE LINE               */
         L     @15,ADPLFRMT(,ABDPLPTR)                             0283
         BALR  @14,@15                                             0283
*     RFY                                                          0284
*       R15 RSTD;                                                  0284
*     FORMRC=FORMRC×R15;            /* SAVE RETURN CODE              */
         OR    FORMRC,R15                                          0285
*     RFY                                                          0286
*       R15 UNRSTD;                                                0286
*     CALL PRINT;                   /* CALL PRINT ROUTINE            */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0287
         BALR  @14,@15                                             0287
*     RFY                                                          0288
*      (R0,                                                        0288
*       R1) UNRSTD;                                                0288
*     PAR2DT1=ADDR(PARTCIR2);                                      0289
         L     @14,PARTPTR                                         0289
         LA    @12,PARTCIR2(,@14)                                  0289
         ST    @12,PAR2DT1                                         0289
*     PAR2DT2=ADDR(PARTDSNL);                                      0290
         LA    @12,PARTDSNL(,@14)                                  0290
         ST    @12,PAR2DT2                                         0290
*     PAR2DT3=ADDR(PARTPCTQ);                                      0291
         LA    @12,PARTPCTQ(,@14)                                  0291
         ST    @12,PAR2DT3                                         0291
*     PAR2DT4=ADDR(PARTLCNT);                                      0292
         LA    @12,PARTLCNT(,@14)                                  0292
         ST    @12,PAR2DT4                                         0292
*     PAR2DT5=ADDR(PARTLKUP);                                      0293
         LA    @14,PARTLKUP(,@14)                                  0293
         ST    @14,PAR2DT5                                         0293
*     RFY                                                          0294
*      (R0,                                                        0294
*       R1) RSTD;                                                  0294
*     R0=ADDR(PAR2PTS);                                            0295
         LA    R0,PAR2PTS                                          0295
*     R1=ABDPLPTR;                  /* GET PARM ADDR                 */
         LR    R1,ABDPLPTR                                         0296
*     CALL FORMAT;                  /* FORMAT THE LINE               */
         L     @15,ADPLFRMT(,ABDPLPTR)                             0297
         BALR  @14,@15                                             0297
*     RFY                                                          0298
*       R15 RSTD;                                                  0298
*     FORMRC=FORMRC×R15;            /* SAVE RETURN CODE              */
         OR    FORMRC,R15                                          0299
*     RFY                                                          0300
*       R15 UNRSTD;                                                0300
*     CALL PRINT;                   /* CALL PRINT ROUTINE            */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0301
         BALR  @14,@15                                             0301
*     RFY                                                          0302
*      (R0,                                                        0302
*       R1) UNRSTD;                                                0302
*     PAR3DT1=ADDR(PARTLOCK);                                      0303
         L     @14,PARTPTR                                         0303
         LA    @12,PARTLOCK(,@14)                                  0303
         ST    @12,PAR3DT1                                         0303
*     PAR3DT2=ADDR(PARTCOMF);                                      0304
         LA    @12,PARTCOMF(,@14)                                  0304
         ST    @12,PAR3DT2                                         0304
*     PAR3DT3=ADDR(PARTCOML);                                      0305
         LA    @12,PARTCOML(,@14)                                  0305
         ST    @12,PAR3DT3                                         0305
*     PAR3DT4=ADDR(PARTSPLF);                                      0306
         LA    @12,PARTSPLF(,@14)                                  0306
         ST    @12,PAR3DT4                                         0306
*     PAR3DT5=ADDR(PARTSPLL);                                      0307
         LA    @14,PARTSPLL(,@14)                                  0307
         ST    @14,PAR3DT5                                         0307
*     RFY                                                          0308
*      (R0,                                                        0308
*       R1) RSTD;                                                  0308
*     R0=ADDR(PAR3PTS);                                            0309
         LA    R0,PAR3PTS                                          0309
*     R1=ABDPLPTR;                  /* GET PARM ADDR                 */
         LR    R1,ABDPLPTR                                         0310
*     CALL FORMAT;                  /* FORMAT THE LINE               */
         L     @15,ADPLFRMT(,ABDPLPTR)                             0311
         BALR  @14,@15                                             0311
*     RFY                                                          0312
*       R15 RSTD;                                                  0312
*     FORMRC=FORMRC×R15;            /* SAVE RETURN CODE              */
         OR    FORMRC,R15                                          0313
*     RFY                                                          0314
*       R15 UNRSTD;                                                0314
*     CALL PRINT;                   /* CALL PRINT ROUTINE            */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0315
         BALR  @14,@15                                             0315
*     RFY                                                          0316
*      (R0,                                                        0316
*       R1) UNRSTD;                                                0316
*     PAR4DT1=ADDR(PARTDUPF);                                      0317
         L     @14,PARTPTR                                         0317
         LA    @12,PARTDUPF(,@14)                                  0317
         ST    @12,PAR4DT1                                         0317
*     PAR4DT2=ADDR(PARTDUPL);                                      0318
         LA    @12,PARTDUPL(,@14)                                  0318
         ST    @12,PAR4DT2                                         0318
*     PAR4DT3=ADDR(PARTLOCF);                                      0319
         LA    @12,PARTLOCF(,@14)                                  0319
         ST    @12,PAR4DT3                                         0319
*     PAR4DT4=ADDR(PARTLOCL);                                      0320
         LA    @14,PARTLOCL(,@14)                                  0320
         ST    @14,PAR4DT4                                         0320
*     RFY                                                          0321
*      (R0,                                                        0321
*       R1) RSTD;                                                  0321
*     R0=ADDR(PAR4PTS);                                            0322
         LA    R0,PAR4PTS                                          0322
*     R1=ABDPLPTR;                  /* GET PARM ADDR                 */
         LR    R1,ABDPLPTR                                         0323
*     CALL FORMAT;                  /* FORMAT THE LINE               */
         L     @15,ADPLFRMT(,ABDPLPTR)                             0324
         BALR  @14,@15                                             0324
*     RFY                                                          0325
*       R15 RSTD;                                                  0325
*     FORMRC=FORMRC×R15;            /* SAVE RETURN CODE              */
         OR    FORMRC,R15                                          0326
*     RFY                                                          0327
*       R15 UNRSTD;                                                0327
*     CALL PRINT;                   /* CALL PRINT ROUTINE            */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0328
         BALR  @14,@15                                             0328
*     RFY                                                          0329
*      (R0,                                                        0329
*       R1) UNRSTD;                                                0329
*     RFY                                                          0330
*       R1 RSTD;                                                   0330
*     R1=ABDPLPTR;                  /* GET PARM ADDR                 */
         LR    R1,ABDPLPTR                                         0331
*     CALL PRINT;                   /* CALL PRINT ROUTINE            */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0332
         BALR  @14,@15                                             0332
*     RFY                                                          0333
*       R1 UNRSTD;                                                 0333
*     RFY                                                          0334
*       R15 RSTD;                                                  0334
*     R15=FORMRC;                   /* SAVE RETURN CODE FROM FORMAT  */
         LR    R15,FORMRC                                          0335
*     RFY                                                          0336
*       R15 UNRSTD;                                                0336
*   END;                            /* ILRMFRMT (PART) LINES(PAR1,PAR
*                                      2,PAR3,PAR4)SPACE             */
*   RFY                                                            0338
*     R14 RSTD;                                                    0338
*   R14=RTNADDR1;                   /* RESTORE RETURN ADDRESS        */
         L     R14,RTNADDR1                                        0339
*   RFY                                                            0340
*     R14 UNRSTD;                                                  0340
*                                                                  0340
*/* R15 ALREADY INDICATES FMTPARTS CUMULATIVE RC FROM FORMAT MACRO.  */
*                                                                  0341
*   END FMTPART;                    /* RETURN TO CALLER              */
@EL00002 DS    0H                                                  0341
@EF00002 DS    0H                                                  0341
@ER00002 BR    @14                                                 0341
*                                                                  0342
*/********************************************************************/
*/*                                                                  */
*/* FMTPCT:  SEGMENT TO FORMAT A QUEUE OF PCT'S                      */
*/*                                                                  */
*/* INPUT:   VIRTUAL ADDRESS OF FIRST PCT ON QUEUE IN PCTPTR         */
*/*                                                                  */
*/* PROCESS: FORMAT THE HEADER SECTION OF THE PCT. FOLLOW            */
*/*           THE CHAIN UNTIL THE NEXT PCT ADDRESS IS ZERO OR        */
*/*           THE MAXIMUM IS EXCEEDED.                               */
*/*                                                                  */
*/* OUTPUT:  FORMATTED PERFORMANCE CHARACTERISTICS TABLES            */
*/*                                                                  */
*/* RETURN CODES: 0 - ALL PCTS FORMATTED SUCCESSFULLY                */
*/*               4 - AT LEAST ONE ERROR WAS ENCOUTERED WHILE        */
*/*                     FORMATTING PCTS.                             */
*/*                                                                  */
*/********************************************************************/
*                                                                  0342
*FMTPCT:                                                           0342
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0342
FMTPCT   DS    0H                                                  0343
*                                                                  0343
*   /*****************************************************************/
*   /*                                                               */
*   /* PCT1:ILRMLINE ((ID,ASIS),(DTYPE,ASIS),SMAX,DTYPX,CYLSZ,NEXT)  */
*   /* OF(PCT) LABEL VARIABLES REFERENCED IN FORMAT PATTERNS         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0343
*   DCL                                                            0343
*     PCT1LB1 CHAR(LENGTH('ID')) INIT('ID');                       0343
*   DCL                                                            0344
*     PCT1LB2 CHAR(LENGTH('DTYPE')) INIT('DTYPE');                 0344
*   DCL                                                            0345
*     PCT1LB3 CHAR(LENGTH('SMAX')) INIT('SMAX');                   0345
*   DCL                                                            0346
*     PCT1LB4 CHAR(LENGTH('DTYPX')) INIT('DTYPX');                 0346
*   DCL                                                            0347
*     PCT1LB5 CHAR(LENGTH('CYLSZ')) INIT('CYLSZ');                 0347
*   DCL                                                            0348
*     PCT1LB6 CHAR(LENGTH('NEXT')) INIT('NEXT');                   0348
*                                                                  0348
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OF OUTPUT                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0349
*   DCL                                                            0349
*     1 PCT1PTS BDY(WORD),                                         0349
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00101111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PCTID)-1+16*LENGTH('ID')-16)
*         ,                         /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(5),                                      0349
*       3 * FIXED(8) INIT(11),                                     0349
*       3 * PTR(31) INIT(ADDR(PCT1LB1)),/* SEE PTTLBPTR              */
*       3 PCT1DT1 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00101111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PCTDTYPE)-1+16*LENGTH('DTYPE
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(15+8),                                   0349
*       3 * FIXED(8) INIT(21+8),                                   0349
*       3 * PTR(31) INIT(ADDR(PCT1LB2)),/* SEE PTTLBPTR              */
*       3 PCT1DT2 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PCTSMAX)-1+16*LENGTH('SMAX')
*             -16),                 /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(25+8+8),                                 0349
*       3 * FIXED(8) INIT(31+8+8),                                 0349
*       3 * PTR(31) INIT(ADDR(PCT1LB3)),/* SEE PTTLBPTR              */
*       3 PCT1DT3 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PCTDTYPX)-1+16*LENGTH('DTYPX
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(35+8+8+8),                               0349
*       3 * FIXED(8) INIT(41+8+8+8),                               0349
*       3 * PTR(31) INIT(ADDR(PCT1LB4)),/* SEE PTTLBPTR              */
*       3 PCT1DT4 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PCTCYLSZ)-1+16*LENGTH('CYLSZ
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(45+8+8+8+8),                             0349
*       3 * FIXED(8) INIT(51+8+8+8+8),                             0349
*       3 * PTR(31) INIT(ADDR(PCT1LB5)),/* SEE PTTLBPTR              */
*       3 PCT1DT5 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PCTNEXT)-1+16*LENGTH('NEXT')
*             -16),                 /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(55+8+8+8+8+8),                           0349
*       3 * FIXED(8) INIT(61+8+8+8+8+8),                           0349
*       3 * PTR(31) INIT(ADDR(PCT1LB6)),/* SEE PTTLBPTR              */
*       3 PCT1DT6 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * FIXED(31) INIT(0);       /* END OF FORMAT PATTERNS        */
*                                                                  0350
*   /*****************************************************************/
*   /*                                                               */
*   /* LINE 2 OF PCT IS HARD CODED PATTERNS DUE TO PCTDMASK LENGTH OF*/
*   /* 8 BYTES. NOTE THIS PATTERN SUSCEPTABLE TO CHANGES IN THE PCT. */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0350
*   DCL                                                            0350
*     PCT2LB1 CHAR(25) INIT('DMASKDPGWTSSECNRQTIMMAXTK');/* LABELS 0350
*                                      FOR LINE 2 OF PCT             */
*   DCL                                                            0351
*     1 PCT2PTS BDY(WORD),          /* PATTERNS FOR LINE 2 OF PCT    */
*      2 * CHAR(12),                                               0351
*       3 * BIT(8) INIT('00001111'B),                              0351
*       3 * FIXED(8) INIT(LENGTH(PCTDMASK)-1+16*LENGTH('DMASK')-16),
*       3 * FIXED(8) INIT(5),                                      0351
*       3 * FIXED(8) INIT(11),                                     0351
*       3 * PTR(31) INIT(ADDR(PCT2LB1)),                           0351
*       3 PCT2DT1 PTR(31) INIT(0),                                 0351
*      2 * CHAR(4),                                                0351
*       3 * BIT(8) INIT('00000101'B),                              0351
*       3 * FIXED(8) INIT(LENGTH(PCTDPGWT)-1+16*LENGTH('DPGWT')-16),
*       3 * FIXED(8) INIT(41),                                     0351
*       3 * FIXED(8) INIT(47),                                     0351
*      2 * CHAR(4),                                                0351
*       3 * BIT(8) INIT('00000101'B),                              0351
*       3 * FIXED(8) INIT(LENGTH(PCTSSECN)-1+16*LENGTH('SSECN')-16),
*       3 * FIXED(8) INIT(59),                                     0351
*       3 * FIXED(8) INIT(65),                                     0351
*      2 * CHAR(4),                                                0351
*       3 * BIT(8) INIT('00000101'B),                              0351
*       3 * FIXED(8) INIT(LENGTH(PCTRQTIM)-1+16*LENGTH('RQTIM')-16),
*       3 * FIXED(8) INIT(77),                                     0351
*       3 * FIXED(8) INIT(83),                                     0351
*      2 * CHAR(4),                                                0351
*       3 * BIT(8) INIT('00000101'B),                              0351
*       3 * FIXED(8) INIT(LENGTH(PCTMAXTK)-1+16*LENGTH('MAXTK')-16),
*       3 * FIXED(8) INIT(95),                                     0351
*       3 * FIXED(8) INIT(101),                                    0351
*      2 * FIXED(31) INIT(0);       /* END OF PATTERNS FOR LINE 2 OF
*                                      PCT                           */
*                                                                  0352
*   /*****************************************************************/
*   /*                                                               */
*   /* PCT3:ILRMLINE (MSSB) LABEL VARIABLES REFERENCED IN FORMAT     */
*   /* PATTERNS                                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0352
*   DCL                                                            0352
*     PCT3LB1 CHAR(LENGTH('MSSB')) INIT('MSSB');                   0352
*                                                                  0352
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OF OUTPUT                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0353
*   DCL                                                            0353
*     1 PCT3PTS BDY(WORD),                                         0353
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PCTMSSB)-1+16*LENGTH('MSSB')
*             -16),                 /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(5),                                      0353
*       3 * FIXED(8) INIT(11),                                     0353
*       3 * PTR(31) INIT(ADDR(PCT3LB1)),/* SEE PTTLBPTR              */
*       3 PCT3DT1 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * FIXED(31) INIT(0);       /* END OF FORMAT PATTERNS        */
*                                                                  0354
*   /*****************************************************************/
*   /*                                                               */
*   /* FOLLOWING ROUTINE USES ABOVE PATTERNS TO FORMAT THE PCT       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0354
*   RFY                                                            0354
*     R14 RSTD;                                                    0354
*   RTNADDR1=R14;                   /* SAVE RETURN ADDRESS           */
         ST    R14,RTNADDR1                                        0355
*   RFY                                                            0356
*     R14 UNRSTD;                                                  0356
*   MAXCTR=0;                       /* INIT MAX COUNTER              */
         SLR   MAXCTR,MAXCTR                                       0357
*   CUMPCTRC=0;                     /* INIT FMTPCTS CUMULATIVE RC    */
         SLR   CUMPCTRC,CUMPCTRC                                   0358
*   ANCHTXT=ANCH;                   /* ANCHORED TEXT                 */
         L     @14,ADPLBUF(,ABDPLPTR)                              0359
         MVC   ANCHTXT(11,@14),ANCH                                0359
*   ANCHNAME=ANCHPCT;               /* NAME OF ANCHOR                */
         MVC   ANCHNAME(8,@14),ANCHPCT                             0360
*   DO WHILE MAXCTR<PCTNUMBR&       /* UNTIL MAX IS EXCEEDED         */
*         PCTPTR^=NULLPTR;          /* ACCESS FAILS OR QUEUE END   0361
*                                      REACHED                       */
         B     @DE00361                                            0361
@DL00361 DS    0H                                                  0362
*     RFY                                                          0362
*      (R0,                                                        0362
*       R1) RSTD;                                                  0362
*     R0=ADDR(PCTPTR);              /* PTR TO BE FORMATTED           */
         LA    R0,PCTPTR                                           0363
*     R1=ADDR(PCTNAM);              /* LABEL                         */
         LA    R1,PCTNAM                                           0364
*     CALL ILRFPRTH;                /* FORMAT & PRINT HEADING        */
         L     @15,@CV00488                                        0365
         BALR  @14,@15                                             0365
*     RFY                                                          0366
*      (R0,                                                        0366
*       R1) UNRSTD;                                                0366
*     DO;                           /* ILRMFRMT (PCT) LINES(PCT1)    */
*       FORMRC=0;                   /* ZERO THE RETURN CODE          */
         SLR   FORMRC,FORMRC                                       0368
*       PCT1DT1=ADDR(PCTID);                                       0369
         L     @14,PCTPTR                                          0369
         ST    @14,PCT1DT1                                         0369
*       PCT1DT2=ADDR(PCTDTYPE);                                    0370
         LA    @11,PCTDTYPE(,@14)                                  0370
         ST    @11,PCT1DT2                                         0370
*       PCT1DT3=ADDR(PCTSMAX);                                     0371
         LA    @11,PCTSMAX(,@14)                                   0371
         ST    @11,PCT1DT3                                         0371
*       PCT1DT4=ADDR(PCTDTYPX);                                    0372
         LA    @11,PCTDTYPX(,@14)                                  0372
         ST    @11,PCT1DT4                                         0372
*       PCT1DT5=ADDR(PCTCYLSZ);                                    0373
         LA    @11,PCTCYLSZ(,@14)                                  0373
         ST    @11,PCT1DT5                                         0373
*       PCT1DT6=ADDR(PCTNEXT);                                     0374
         LA    @14,PCTNEXT(,@14)                                   0374
         ST    @14,PCT1DT6                                         0374
*       RFY                                                        0375
*        (R0,                                                      0375
*         R1) RSTD;                                                0375
*       R0=ADDR(PCT1PTS);                                          0376
         LA    R0,PCT1PTS                                          0376
*       R1=ABDPLPTR;                /* GET PARM ADDR                 */
         LR    R1,ABDPLPTR                                         0377
*       CALL FORMAT;                /* FORMAT THE LINE               */
         L     @15,ADPLFRMT(,ABDPLPTR)                             0378
         BALR  @14,@15                                             0378
*       RFY                                                        0379
*         R15 RSTD;                                                0379
*       FORMRC=FORMRC×R15;          /* SAVE RETURN CODE              */
         OR    FORMRC,R15                                          0380
*       RFY                                                        0381
*         R15 UNRSTD;                                              0381
*       CALL PRINT;                 /* CALL PRINT ROUTINE            */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0382
         BALR  @14,@15                                             0382
*       RFY                                                        0383
*        (R0,                                                      0383
*         R1) UNRSTD;                                              0383
*       RFY                                                        0384
*         R15 RSTD;                                                0384
*       R15=FORMRC;                 /* SAVE RETURN CODE FROM FORMAT  */
         LR    R15,FORMRC                                          0385
*       RFY                                                        0386
*         R15 UNRSTD;                                              0386
*     END;                          /* ILRMFRMT (PCT) LINES(PCT1)    */
*     CUMPCTRC=CUMPCTRC×R15;        /* OR IN RETURN CODE             */
         OR    CUMPCTRC,R15                                        0388
*                                                                  0389
*     /***************************************************************/
*     /*                                                             */
*     /* THE SECOND LINE OF THE PCT IS FORMATTED WITH A HARD CODED   */
*     /* FORMAT PATTERN AND DIRECT CALL TO FORMAT BECAUSE ONE OF THE */
*     /* FIELDS IN THE SECOND LINE HAS A LENGTH OF 8 BYTES. THE      */
*     /* ILRMLINE AND ILRMFRMT MACROS EXPECT 4 BYTE FIELDS.          */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0389
*     PCT2DT1=ADDR(PCTDMASK);       /* SET DATA PTR FOR 2ND PCT LINE
*                                      IN HARDCODED FORMAT PATTERN   */
         L     @14,PCTPTR                                          0389
         LA    @14,PCTDMASK(,@14)                                  0389
         ST    @14,PCT2DT1                                         0389
*     RFY                                                          0390
*      (R0,                                                        0390
*       R1) RSTD;                                                  0390
*     R0=ADDR(PCT2PTS);             /* PATTERN ADDRESS               */
         LA    R0,PCT2PTS                                          0391
*     R1=ABDPLPTR;                  /* PARMLIST ADDRESS              */
         LR    R1,ABDPLPTR                                         0392
*     CALL FORMAT;                  /* FORMAT THE LINE               */
         L     @15,ADPLFRMT(,ABDPLPTR)                             0393
         BALR  @14,@15                                             0393
*     CUMPCTRC=CUMPCTRC×R15;        /* OR IN FORMATS RET CODE        */
         OR    CUMPCTRC,R15                                        0394
*     CALL PRINT;                   /* PRINT IT                      */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0395
         BALR  @14,@15                                             0395
*     RFY                                                          0396
*      (R0,                                                        0396
*       R1) UNRSTD;                                                0396
*                                                                  0396
*     /***************************************************************/
*     /*                                                             */
*     /* BACK TO ILRMLINE AND ILRMFRMT MACROS TO FORMAT 3RD LINE     */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0397
*     DO;                           /* ILRMFRMT LINES(PCT3)SPACE     */
*       FORMRC=0;                   /* ZERO THE RETURN CODE          */
         SLR   FORMRC,FORMRC                                       0398
*       PCT3DT1=ADDR(PCTMSSB);                                     0399
         L     @14,PCTPTR                                          0399
         LA    @14,PCTMSSB(,@14)                                   0399
         ST    @14,PCT3DT1                                         0399
*       RFY                                                        0400
*        (R0,                                                      0400
*         R1) RSTD;                                                0400
*       R0=ADDR(PCT3PTS);                                          0401
         LA    R0,PCT3PTS                                          0401
*       R1=ABDPLPTR;                /* GET PARM ADDR                 */
         LR    R1,ABDPLPTR                                         0402
*       CALL FORMAT;                /* FORMAT THE LINE               */
         L     @15,ADPLFRMT(,ABDPLPTR)                             0403
         BALR  @14,@15                                             0403
*       RFY                                                        0404
*         R15 RSTD;                                                0404
*       FORMRC=FORMRC×R15;          /* SAVE RETURN CODE              */
         OR    FORMRC,R15                                          0405
*       RFY                                                        0406
*         R15 UNRSTD;                                              0406
*       CALL PRINT;                 /* CALL PRINT ROUTINE            */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0407
         BALR  @14,@15                                             0407
*       RFY                                                        0408
*        (R0,                                                      0408
*         R1) UNRSTD;                                              0408
*       RFY                                                        0409
*         R1 RSTD;                                                 0409
*       R1=ABDPLPTR;                /* GET PARM ADDR                 */
         LR    R1,ABDPLPTR                                         0410
*       CALL PRINT;                 /* CALL PRINT ROUTINE            */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0411
         BALR  @14,@15                                             0411
*       RFY                                                        0412
*         R1 UNRSTD;                                               0412
*       RFY                                                        0413
*         R15 RSTD;                                                0413
*       R15=FORMRC;                 /* SAVE RETURN CODE FROM FORMAT  */
         LR    R15,FORMRC                                          0414
*       RFY                                                        0415
*         R15 UNRSTD;                                              0415
*     END;                          /* ILRMFRMT LINES(PCT3)SPACE     */
*                                                                  0416
*     /***************************************************************/
*     /*                                                             */
*     /* OBTAIN NEXT PCT FROM PCTNEXT                                */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0417
*     DO;                           /* ILRMACCS (PCTPTR)           0417
*                                      FROM(PCTNEXT)                 */
*       RFY                                                        0418
*        (R0,                                                      0418
*         R1,                                                      0418
*         R14,                                                     0418
*         R15) RSTD;                                               0418
*       R0=ADDR(PCTNEXT);                                          0419
         L     @11,PCTPTR                                          0419
         LA    R0,PCTNEXT(,@11)                                    0419
*       R1=ABDPLPTR;                /* POINT TO PARM LIST            */
         LR    R1,ABDPLPTR                                         0420
*       CALL ACCESS;                /* ACCESS DATA                   */
         L     @15,ADPLMEMA(,ABDPLPTR)                             0421
         BALR  @14,@15                                             0421
*       R14=R0;                     /* CANNOT USE R0 AS BASE         */
         LR    R14,R0                                              0422
*       IF R15=GOOD THEN            /* CHECK ACCESS                  */
         LTR   R15,R15                                             0423
         BNZ   @RF00423                                            0423
*         PCTPTR=CURRENT;           /* GET REQUESTED FIELD           */
         MVC   PCTPTR(4),CURRENT(R14)                              0424
*       ELSE                        /* ACCESS NO GOOD                */
*         PCTPTR=ZERO;              /* ZERO FIELD                    */
         B     @RC00423                                            0425
@RF00423 SLR   @11,@11                                             0425
         ST    @11,PCTPTR                                          0425
*       RFY                                                        0426
*        (R0,                                                      0426
*         R1,                                                      0426
*         R14,                                                     0426
*         R15) UNRSTD;                                             0426
@RC00423 DS    0H                                                  0427
*     END;                                                         0427
*     CUMPCTRC=CUMPCTRC×R15;        /* OR IN ACCESS RETURN CODE      */
         OR    CUMPCTRC,R15                                        0428
*     MAXCTR=MAXCTR+1;              /* INCREMENT COUNTER             */
         AH    MAXCTR,@CH00043                                     0429
*   END;                            /* END PCT PROCESSING            */
@DE00361 CH    MAXCTR,@CH00351                                     0430
         BNL   @DC00361                                            0430
         ICM   @14,15,PCTPTR                                       0430
         BNZ   @DL00361                                            0430
@DC00361 DS    0H                                                  0431
*   IF PCTPTR^=NULLPTR THEN         /* MAX WAS EXCEEDED              */
         ICM   @14,15,PCTPTR                                       0431
         BZ    @RF00431                                            0431
*     DO;                                                          0432
*       RFY                                                        0433
*         R1 RSTD;                                                 0433
*       R1=LOOPMSG;                 /* CODE OF ERROR MSG             */
         LA    R1,15                                               0434
*       CALL ILRFMSG;               /* GO TO MESSAGE SEGMENT         */
         L     @15,@CV00489                                        0435
         BALR  @14,@15                                             0435
*       RFY                                                        0436
*         R1 UNRSTD;                                               0436
*       CUMPCTRC=4;                 /* SET BAD RETURN CODE           */
         LA    CUMPCTRC,4                                          0437
*     END;                                                         0438
*   ELSE                                                           0439
*     ;                             /* NORMAL END OF PROCESSING      */
@RF00431 DS    0H                                                  0440
*   RFY                                                            0440
*     R14 RSTD;                                                    0440
*   R14=RTNADDR1;                   /* RESTORE RETURN ADDRESS        */
         L     R14,RTNADDR1                                        0441
*   R15=CUMPCTRC;                   /* SET CUMULATIVE RC IN R15      */
         LR    R15,CUMPCTRC                                        0442
*   RFY                                                            0443
*     R14 UNRSTD;                                                  0443
*   END FMTPCT;                     /* RETURN TO CALLER              */
@EL00003 DS    0H                                                  0444
@EF00003 DS    0H                                                  0444
@ER00003 BR    @14                                                 0444
*                                                                  0445
*/********************************************************************/
*/*                                                                  */
*/* FMTIOE:  SEGMENT TO FORMAT A QUEUE OF IOES                       */
*/*                                                                  */
*/* INPUT:   VIRTUAL ADDRESS OF FIRST IOE ON QUEUE IN IOEPTR         */
*/*                                                                  */
*/* PROCESS: LOOP THROUGH THE QUEUE OF IOES UNTIL THE NEXT IOE PTR   */
*/*           IS ZERO, OR THE MAXIMUM NUMBER IS EXCEEDED             */
*/*                                                                  */
*/* OUTPUT:  FORMATTED I/O REQUEST ELEMENTS                          */
*/*                                                                  */
*/* RETURN CODES: 0 - ALL IOES FORMATTED SUCCESSFULLY                */
*/*               4 - AT LEAST ONE ERROR WAS ENCOUNTERED WHILE       */
*/*                     FORMATTING IOES.                             */
*/*                                                                  */
*/********************************************************************/
*                                                                  0445
*FMTIOE:                                                           0445
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0445
FMTIOE   DS    0H                                                  0446
*                                                                  0446
*   /*****************************************************************/
*   /*                                                               */
*   /* IOE1:ILRMLINE (NXT,LSIDA,AIA,WORK) OF(IOE) LABEL VARIABLES    */
*   /* REFERENCED IN FORMAT PATTERNS                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0446
*   DCL                                                            0446
*     IOE1LB1 CHAR(LENGTH('NXT')) INIT('NXT');                     0446
*   DCL                                                            0447
*     IOE1LB2 CHAR(LENGTH('LSIDA')) INIT('LSIDA');                 0447
*   DCL                                                            0448
*     IOE1LB3 CHAR(LENGTH('AIA')) INIT('AIA');                     0448
*   DCL                                                            0449
*     IOE1LB4 CHAR(LENGTH('WORK')) INIT('WORK');                   0449
*                                                                  0449
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OF OUTPUT                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0450
*   DCL                                                            0450
*     1 IOE1PTS BDY(WORD),                                         0450
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(IOENXT)-1+16*LENGTH('NXT')-
*             16),                  /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(5),                                      0450
*       3 * FIXED(8) INIT(11),                                     0450
*       3 * PTR(31) INIT(ADDR(IOE1LB1)),/* SEE PTTLBPTR              */
*       3 IOE1DT1 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(IOELSIDA)-1+16*LENGTH('LSIDA
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(15+8),                                   0450
*       3 * FIXED(8) INIT(21+8),                                   0450
*       3 * PTR(31) INIT(ADDR(IOE1LB2)),/* SEE PTTLBPTR              */
*       3 IOE1DT2 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(IOEAIA)-1+16*LENGTH('AIA')-
*             16),                  /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(25+8+8),                                 0450
*       3 * FIXED(8) INIT(31+8+8),                                 0450
*       3 * PTR(31) INIT(ADDR(IOE1LB3)),/* SEE PTTLBPTR              */
*       3 IOE1DT3 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(IOEWORK)-1+16*LENGTH('WORK')
*             -16),                 /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(35+8+8+8),                               0450
*       3 * FIXED(8) INIT(41+8+8+8),                               0450
*       3 * PTR(31) INIT(ADDR(IOE1LB4)),/* SEE PTTLBPTR              */
*       3 IOE1DT4 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * FIXED(31) INIT(0);       /* END OF FORMAT PATTERNS        */
*                                                                  0451
*   /*****************************************************************/
*   /*                                                               */
*   /* FOLLOWING ROUTINE WITH ABOVE PATTERNS FORMATS IOES            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0451
*   RFY                                                            0451
*     R14 RSTD;                                                    0451
*   RTNADDR2=R14;                   /* SAVE RETURN ADDRESS           */
         ST    R14,RTNADDR2                                        0452
*   RFY                                                            0453
*     R14 UNRSTD;                                                  0453
*   MAXCTR=0;                       /* INITIALIZE LOOP CTR           */
         SLR   MAXCTR,MAXCTR                                       0454
*   CUMIOERC=0;                     /* INIT FMTIOE CUMULATIVE RC     */
         SLR   CUMIOERC,CUMIOERC                                   0455
*   DO WHILE IOEPTR^=NULLPTR&       /* ACCESS FAILS, Q ENDED -OR-    */
*         MAXCTR<MAXIOES;           /* MAXIMUM EXCEEDED              */
         B     @DE00456                                            0456
@DL00456 DS    0H                                                  0457
*     RFY                                                          0457
*      (R0,                                                        0457
*       R1) RSTD;                                                  0457
*     R0=ADDR(IOEPTR);              /* PTR TO BE FORMATTED           */
         LA    R0,IOEPTR                                           0458
*     R1=ADDR(IOENAM);              /* LABEL                         */
         LA    R1,IOENAM                                           0459
*     CALL ILRFPRTH;                /* FORMAT AND PRINT HEADING      */
         L     @15,@CV00488                                        0460
         BALR  @14,@15                                             0460
*     RFY                                                          0461
*      (R0,                                                        0461
*       R1) UNRSTD;                                                0461
*     DO;                           /* ILRMFRMT (IOE)              0462
*                                      LINES(IOE1)SPACE              */
*       FORMRC=0;                   /* ZERO THE RETURN CODE          */
         SLR   FORMRC,FORMRC                                       0463
*       IOE1DT1=ADDR(IOENXT);                                      0464
         L     @14,IOEPTR                                          0464
         ST    @14,IOE1DT1                                         0464
*       IOE1DT2=ADDR(IOELSIDA);                                    0465
         LA    @06,IOELSIDA(,@14)                                  0465
         ST    @06,IOE1DT2                                         0465
*       IOE1DT3=ADDR(IOEAIA);                                      0466
         LA    @06,IOEAIA(,@14)                                    0466
         ST    @06,IOE1DT3                                         0466
*       IOE1DT4=ADDR(IOEWORK);                                     0467
         LA    @14,IOEWORK(,@14)                                   0467
         ST    @14,IOE1DT4                                         0467
*       RFY                                                        0468
*        (R0,                                                      0468
*         R1) RSTD;                                                0468
*       R0=ADDR(IOE1PTS);                                          0469
         LA    R0,IOE1PTS                                          0469
*       R1=ABDPLPTR;                /* GET PARM ADDR                 */
         LR    R1,ABDPLPTR                                         0470
*       CALL FORMAT;                /* FORMAT THE LINE               */
         L     @15,ADPLFRMT(,ABDPLPTR)                             0471
         BALR  @14,@15                                             0471
*       RFY                                                        0472
*         R15 RSTD;                                                0472
*       FORMRC=FORMRC×R15;          /* SAVE RETURN CODE              */
         OR    FORMRC,R15                                          0473
*       RFY                                                        0474
*         R15 UNRSTD;                                              0474
*       CALL PRINT;                 /* CALL PRINT ROUTINE            */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0475
         BALR  @14,@15                                             0475
*       RFY                                                        0476
*        (R0,                                                      0476
*         R1) UNRSTD;                                              0476
*       RFY                                                        0477
*         R1 RSTD;                                                 0477
*       R1=ABDPLPTR;                /* GET PARM ADDR                 */
         LR    R1,ABDPLPTR                                         0478
*       CALL PRINT;                 /* CALL PRINT ROUTINE            */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0479
         BALR  @14,@15                                             0479
*       RFY                                                        0480
*         R1 UNRSTD;                                               0480
*       RFY                                                        0481
*         R15 RSTD;                                                0481
*       R15=FORMRC;                 /* SAVE RETURN CODE FROM FORMAT  */
         LR    R15,FORMRC                                          0482
*       RFY                                                        0483
*         R15 UNRSTD;                                              0483
*     END;                          /* ILRMFRMT (IOE)              0484
*                                      LINES(IOE1)SPACE FORMAT IOE   */
*     CUMIOERC=CUMIOERC×R15;        /* OR IN FORMATS RET CODE        */
*                                                                  0485
         OR    CUMIOERC,R15                                        0485
*     /***************************************************************/
*     /*                                                             */
*     /* OBTAIN THE NEXT IOE FROM IOENXT                             */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0486
*     DO;                           /* ILRMACCS (IOEPTR) FROM(IOENXT)*/
*       RFY                                                        0487
*        (R0,                                                      0487
*         R1,                                                      0487
*         R14,                                                     0487
*         R15) RSTD;                                               0487
*       R0=ADDR(IOENXT);                                           0488
         L     R0,IOEPTR                                           0488
*       R1=ABDPLPTR;                /* POINT TO PARM LIST            */
         LR    R1,ABDPLPTR                                         0489
*       CALL ACCESS;                /* ACCESS DATA                   */
         L     @15,ADPLMEMA(,ABDPLPTR)                             0490
         BALR  @14,@15                                             0490
*       R14=R0;                     /* CANNOT USE R0 AS BASE         */
         LR    R14,R0                                              0491
*       IF R15=GOOD THEN            /* CHECK ACCESS                  */
         LTR   R15,R15                                             0492
         BNZ   @RF00492                                            0492
*         IOEPTR=CURRENT;           /* GET REQUESTED FIELD           */
         MVC   IOEPTR(4),CURRENT(R14)                              0493
*       ELSE                        /* ACCESS NO GOOD                */
*         IOEPTR=ZERO;              /* ZERO FIELD                    */
         B     @RC00492                                            0494
@RF00492 SLR   @06,@06                                             0494
         ST    @06,IOEPTR                                          0494
*       RFY                                                        0495
*        (R0,                                                      0495
*         R1,                                                      0495
*         R14,                                                     0495
*         R15) UNRSTD;                                             0495
@RC00492 DS    0H                                                  0496
*     END;                          /* GET NEXT IOE ON QUEUE         */
*     CUMIOERC=CUMIOERC×R15;        /* OR IN ACCESS RET CODE         */
         OR    CUMIOERC,R15                                        0497
*     MAXCTR=MAXCTR+1;              /* INCREMENT COUNTER             */
         AH    MAXCTR,@CH00043                                     0498
*   END;                            /* END IOE PROCESSING            */
@DE00456 ICM   @14,15,IOEPTR                                       0499
         BZ    @DC00456                                            0499
         CH    MAXCTR,@CH00552                                     0499
         BL    @DL00456                                            0499
@DC00456 DS    0H                                                  0500
*   IF IOEPTR^=NULLPTR THEN         /* MAXIMUM WAS EXCEEDED          */
         ICM   @14,15,IOEPTR                                       0500
         BZ    @RF00500                                            0500
*     DO;                                                          0501
*       RFY                                                        0502
*         R1 RSTD;                                                 0502
*       R1=LOOPMSG;                 /* CODE OF ERROR MESSAGE         */
         LA    R1,15                                               0503
*       CALL ILRFMSG;               /* GO TO MESSAGE SEGMENT         */
         L     @15,@CV00489                                        0504
         BALR  @14,@15                                             0504
*       RFY                                                        0505
*         R1 UNRSTD;                                               0505
*       CUMIOERC=4;                 /* SET BAD RET CODE              */
         LA    CUMIOERC,4                                          0506
*     END;                                                         0507
*   ELSE                                                           0508
*     ;                             /* NO ERROR                      */
@RF00500 DS    0H                                                  0509
*   RFY                                                            0509
*     R14 RSTD;                                                    0509
*   R14=RTNADDR2;                   /* RESTORE RETURN ADDRESS        */
         L     R14,RTNADDR2                                        0510
*   R15=CUMIOERC;                   /* SET CUMULATIVE RC IN R15      */
         LR    R15,CUMIOERC                                        0511
*   RFY                                                            0512
*     R14 UNRSTD;                                                  0512
*   END FMTIOE;                     /* RETURN TO CALLER              */
@EL00004 DS    0H                                                  0513
@EF00004 DS    0H                                                  0513
@ER00004 BR    @14                                                 0513
*                                                                  0514
*/********************************************************************/
*/*                                                                  */
*/* FMTPARTE: SEGMENT TO FORMAT A PART ENTRY AND ITS ASSOCIATED      */
*/*           CONTROL BLOCKS                                         */
*/*                                                                  */
*/* INPUT:    VIRTUAL ADDRESS OF PARTE IN PAREPTR                    */
*/*                                                                  */
*/* PROCESS:  IF THE DATA SET NAME LIST EXISTS, FOR EACH PART        */
*/*            ENTRY, PUT THE CORRESPONDING DATA SET NAME            */
*/*            INTO THE HEADER. (FOR UNUSED PARTES, THE DSNAME       */
*/*            WILL BE BLANKS.)  IF THE ACCESS FOR PARTDSNL FAILS    */
*/*            OR ITS CONTENTS IS ZERO, PUT 'DSNAME NOT AVAILABLE'   */
*/*            INTO THE HEADER LINE.  THEN, FORMAT THE ENTRY. NEXT   */
*/*            CALL SEGMENTS TO FORMAT THE PAT, IOE QUEUES AND       */
*/*            IORB QUEUES (WHICH INCLUDE IOSB AND PCCW QUEUES).     */
*/*                                                                  */
*/* OUTPUT:   ALL PARTES AND THE ASSOCIATED CONTROL BLOCKS           */
*/*             FOMATTED.                                            */
*/*                                                                  */
*/* RETURN CODES: 0 - ALL PARTES AND ASSOCIATED CONTROL BLOCKS       */
*/*                     FORMATTED SUCCESSFULLY.                      */
*/*               4 - AT LEAST 1 ERROR OCCURRED WHILE FORMATTING     */
*/*                     PARTES AND ASSOCIATED BLOCKS.                */
*/*                                                                  */
*/********************************************************************/
*                                                                  0514
*FMTPARTE:                                                         0514
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0514
FMTPARTE DS    0H                                                  0515
*                                                                  0515
*   /*****************************************************************/
*   /*                                                               */
*   /* PAR5:ILRMLINE (EPARE,ELKUP,ETYPE,EFLG1,ENN,EIOEQ) OF(PART)    */
*   /* LABEL VARIABLES REFERENCED IN FORMAT PATTERNS                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0515
*   DCL                                                            0515
*     PAR5LB1 CHAR(LENGTH('EPARE')) INIT('EPARE');                 0515
*   DCL                                                            0516
*     PAR5LB2 CHAR(LENGTH('ELKUP')) INIT('ELKUP');                 0516
*   DCL                                                            0517
*     PAR5LB3 CHAR(LENGTH('ETYPE')) INIT('ETYPE');                 0517
*   DCL                                                            0518
*     PAR5LB4 CHAR(LENGTH('EFLG1')) INIT('EFLG1');                 0518
*   DCL                                                            0519
*     PAR5LB5 CHAR(LENGTH('ENN')) INIT('ENN');                     0519
*   DCL                                                            0520
*     PAR5LB6 CHAR(LENGTH('EIOEQ')) INIT('EIOEQ');                 0520
*                                                                  0520
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OF OUTPUT                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0521
*   DCL                                                            0521
*     1 PAR5PTS BDY(WORD),                                         0521
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PAREPARE)-1+16*LENGTH('EPARE
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(5),                                      0521
*       3 * FIXED(8) INIT(11),                                     0521
*       3 * PTR(31) INIT(ADDR(PAR5LB1)),/* SEE PTTLBPTR              */
*       3 PAR5DT1 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PARELKUP)-1+16*LENGTH('ELKUP
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(15+8),                                   0521
*       3 * FIXED(8) INIT(21+8),                                   0521
*       3 * PTR(31) INIT(ADDR(PAR5LB2)),/* SEE PTTLBPTR              */
*       3 PAR5DT2 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PARETYPE)-1+16*LENGTH('ETYPE
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(25+8+8),                                 0521
*       3 * FIXED(8) INIT(31+8+8),                                 0521
*       3 * PTR(31) INIT(ADDR(PAR5LB3)),/* SEE PTTLBPTR              */
*       3 PAR5DT3 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PAREFLG1)-1+16*LENGTH('EFLG1
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(35+8+8+8),                               0521
*       3 * FIXED(8) INIT(41+8+8+8),                               0521
*       3 * PTR(31) INIT(ADDR(PAR5LB4)),/* SEE PTTLBPTR              */
*       3 PAR5DT4 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PARENN)-1+16*LENGTH('ENN')-
*             16),                  /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(45+8+8+8+8),                             0521
*       3 * FIXED(8) INIT(51+8+8+8+8),                             0521
*       3 * PTR(31) INIT(ADDR(PAR5LB5)),/* SEE PTTLBPTR              */
*       3 PAR5DT5 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PAREIOEQ)-1+16*LENGTH('EIOEQ
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(55+8+8+8+8+8),                           0521
*       3 * FIXED(8) INIT(61+8+8+8+8+8),                           0521
*       3 * PTR(31) INIT(ADDR(PAR5LB6)),/* SEE PTTLBPTR              */
*       3 PAR5DT6 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * FIXED(31) INIT(0);       /* END OF FORMAT PATTERNS        */
*                                                                  0522
*   /*****************************************************************/
*   /*                                                               */
*   /* PAR6:ILRMLINE (ESZSL,ESLTA,ERRCT,EIORB,EPATP,EPCTP) LABEL     */
*   /* VARIABLES REFERENCED IN FORMAT PATTERNS                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0522
*   DCL                                                            0522
*     PAR6LB1 CHAR(LENGTH('ESZSL')) INIT('ESZSL');                 0522
*   DCL                                                            0523
*     PAR6LB2 CHAR(LENGTH('ESLTA')) INIT('ESLTA');                 0523
*   DCL                                                            0524
*     PAR6LB3 CHAR(LENGTH('ERRCT')) INIT('ERRCT');                 0524
*   DCL                                                            0525
*     PAR6LB4 CHAR(LENGTH('EIORB')) INIT('EIORB');                 0525
*   DCL                                                            0526
*     PAR6LB5 CHAR(LENGTH('EPATP')) INIT('EPATP');                 0526
*   DCL                                                            0527
*     PAR6LB6 CHAR(LENGTH('EPCTP')) INIT('EPCTP');                 0527
*                                                                  0527
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OF OUTPUT                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0528
*   DCL                                                            0528
*     1 PAR6PTS BDY(WORD),                                         0528
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PARESZSL)-1+16*LENGTH('ESZSL
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(5),                                      0528
*       3 * FIXED(8) INIT(11),                                     0528
*       3 * PTR(31) INIT(ADDR(PAR6LB1)),/* SEE PTTLBPTR              */
*       3 PAR6DT1 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PARESLTA)-1+16*LENGTH('ESLTA
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(15+8),                                   0528
*       3 * FIXED(8) INIT(21+8),                                   0528
*       3 * PTR(31) INIT(ADDR(PAR6LB2)),/* SEE PTTLBPTR              */
*       3 PAR6DT2 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PARERRCT)-1+16*LENGTH('ERRCT
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(25+8+8),                                 0528
*       3 * FIXED(8) INIT(31+8+8),                                 0528
*       3 * PTR(31) INIT(ADDR(PAR6LB3)),/* SEE PTTLBPTR              */
*       3 PAR6DT3 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PAREIORB)-1+16*LENGTH('EIORB
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(35+8+8+8),                               0528
*       3 * FIXED(8) INIT(41+8+8+8),                               0528
*       3 * PTR(31) INIT(ADDR(PAR6LB4)),/* SEE PTTLBPTR              */
*       3 PAR6DT4 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PAREPATP)-1+16*LENGTH('EPATP
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(45+8+8+8+8),                             0528
*       3 * FIXED(8) INIT(51+8+8+8+8),                             0528
*       3 * PTR(31) INIT(ADDR(PAR6LB5)),/* SEE PTTLBPTR              */
*       3 PAR6DT5 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PAREPCTP)-1+16*LENGTH('EPCTP
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(55+8+8+8+8+8),                           0528
*       3 * FIXED(8) INIT(61+8+8+8+8+8),                           0528
*       3 * PTR(31) INIT(ADDR(PAR6LB6)),/* SEE PTTLBPTR              */
*       3 PAR6DT6 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * FIXED(31) INIT(0);       /* END OF FORMAT PATTERNS        */
*                                                                  0529
*   /*****************************************************************/
*   /*                                                               */
*   /* PAR7:ILRMLINE (EEDBP,EUCBP,ENODE,EWTQE,ERQTM,ELCYL) LABEL     */
*   /* VARIABLES REFERENCED IN FORMAT PATTERNS                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0529
*   DCL                                                            0529
*     PAR7LB1 CHAR(LENGTH('EEDBP')) INIT('EEDBP');                 0529
*   DCL                                                            0530
*     PAR7LB2 CHAR(LENGTH('EUCBP')) INIT('EUCBP');                 0530
*   DCL                                                            0531
*     PAR7LB3 CHAR(LENGTH('ENODE')) INIT('ENODE');                 0531
*   DCL                                                            0532
*     PAR7LB4 CHAR(LENGTH('EWTQE')) INIT('EWTQE');                 0532
*   DCL                                                            0533
*     PAR7LB5 CHAR(LENGTH('ERQTM')) INIT('ERQTM');                 0533
*   DCL                                                            0534
*     PAR7LB6 CHAR(LENGTH('ELCYL')) INIT('ELCYL');                 0534
*                                                                  0534
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OF OUTPUT                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0535
*   DCL                                                            0535
*     1 PAR7PTS BDY(WORD),                                         0535
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PAREEDBP)-1+16*LENGTH('EEDBP
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(5),                                      0535
*       3 * FIXED(8) INIT(11),                                     0535
*       3 * PTR(31) INIT(ADDR(PAR7LB1)),/* SEE PTTLBPTR              */
*       3 PAR7DT1 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PAREUCBP)-1+16*LENGTH('EUCBP
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(15+8),                                   0535
*       3 * FIXED(8) INIT(21+8),                                   0535
*       3 * PTR(31) INIT(ADDR(PAR7LB2)),/* SEE PTTLBPTR              */
*       3 PAR7DT2 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PARENODE)-1+16*LENGTH('ENODE
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(25+8+8),                                 0535
*       3 * FIXED(8) INIT(31+8+8),                                 0535
*       3 * PTR(31) INIT(ADDR(PAR7LB3)),/* SEE PTTLBPTR              */
*       3 PAR7DT3 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PAREWTQE)-1+16*LENGTH('EWTQE
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(35+8+8+8),                               0535
*       3 * FIXED(8) INIT(41+8+8+8),                               0535
*       3 * PTR(31) INIT(ADDR(PAR7LB4)),/* SEE PTTLBPTR              */
*       3 PAR7DT4 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PARERQTM)-1+16*LENGTH('ERQTM
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(45+8+8+8+8),                             0535
*       3 * FIXED(8) INIT(51+8+8+8+8),                             0535
*       3 * PTR(31) INIT(ADDR(PAR7LB5)),/* SEE PTTLBPTR              */
*       3 PAR7DT5 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PARELCYL)-1+16*LENGTH('ELCYL
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(55+8+8+8+8+8),                           0535
*       3 * FIXED(8) INIT(61+8+8+8+8+8),                           0535
*       3 * PTR(31) INIT(ADDR(PAR7LB6)),/* SEE PTTLBPTR              */
*       3 PAR7DT6 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * FIXED(31) INIT(0);       /* END OF FORMAT PATTERNS        */
*                                                                  0536
*   /*****************************************************************/
*   /*                                                               */
*   /* FOLLOWING ROUTINE WITH ABOVE PATTERNS FORMATS PARTES AND      */
*   /* ASSOCIATED BLOCKS.                                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0536
*   RFY                                                            0536
*     R14 RSTD;                                                    0536
*   RTNADDR1=R14;                   /* SAVE RETURN ADDRESS           */
         ST    R14,RTNADDR1                                        0537
*   RFY                                                            0538
*     R14 UNRSTD;                                                  0538
*   CUMPTERC=0;                     /* INITIALIZE FMTPARTES        0539
*                                      CUMULATIVE RET CODE           */
         SLR   CUMPTERC,CUMPTERC                                   0539
*   IF DSNLPARM=NULLPTR THEN        /* IF THERE IS NO DSNAME THEN    */
         LTR   DSNLPARM,DSNLPARM                                   0540
         BNZ   @RF00540                                            0540
*     BUFFER(24:24+LENGTH(DSNLNA))=DSNLNA;/* MOVE DSNAME LIST NOT  0541
*                                      AVAILABLE REMARK TO HEADER    */
         L     @14,ADPLBUF(,ABDPLPTR)                              0541
         MVI   BUFFER+43(@14),C' '                                 0541
         MVC   BUFFER+23(20,@14),DSNLNA                            0541
*   ELSE                            /* DSNAME EXISTS FOR ENTRY       */
*     DO;                           /* MOVE DSNAME TO HEADER LINE    */
         B     @RC00540                                            0542
@RF00540 DS    0H                                                  0543
*       DSNDT=DSNLPARM;             /* SET DATA PTR FOR PARTE DSNAME
*                                      FORMAT PATTERN                */
         ST    DSNLPARM,DSNDT                                      0543
*       RFY                                                        0544
*        (R0,                                                      0544
*         R1) RSTD;                                                0544
*       R0=ADDR(DSNPTRNS);          /* ADDRESS OF FORMAT PTRN FOR  0545
*                                      FORMAT RTN                    */
         LA    R0,DSNPTRNS                                         0545
*       R1=ABDPLPTR;                /* FORMAT PARM LIST              */
         LR    R1,ABDPLPTR                                         0546
*       CALL FORMAT;                /* FORMAT DSNAME INTO OUTPUT   0547
*                                      BUFFER FOR HEADER             */
         L     @15,ADPLFRMT(,ABDPLPTR)                             0547
         BALR  @14,@15                                             0547
*       RFY                                                        0548
*        (R0,                                                      0548
*         R1) UNRSTD;                                              0548
*       CUMPTERC=CUMPTERC×R15;      /* OR IN FORMAT RET CODE         */
         OR    CUMPTERC,R15                                        0549
*     END;                                                         0550
*   RFY                                                            0551
*    (R0,                                                          0551
*     R1) RSTD;                                                    0551
@RC00540 DS    0H                                                  0552
*   R0=ADDR(PAREPTR);               /* PTR TO BE FORMATTED           */
         LA    R0,PAREPTR                                          0552
*   R1=ADDR(PARENAM);               /* LABEL                         */
         LA    R1,PARENAM                                          0553
*   CALL ILRFPRTH;                  /* FORMAT & PRINT HEADING        */
         L     @15,@CV00488                                        0554
         BALR  @14,@15                                             0554
*   RFY                                                            0555
*    (R0,                                                          0555
*     R1) UNRSTD;                                                  0555
*   DO;                             /* ILRMFRMT (PART)             0556
*                                      LINES(PAR5,PAR6,PAR7)SPACE    */
*     FORMRC=0;                     /* ZERO THE RETURN CODE          */
         SLR   FORMRC,FORMRC                                       0557
*     PAR5DT1=ADDR(PAREPARE);                                      0558
         L     @14,PAREPTR                                         0558
         ST    @14,PAR5DT1                                         0558
*     PAR5DT2=ADDR(PARELKUP);                                      0559
         LA    @12,PARELKUP(,@14)                                  0559
         ST    @12,PAR5DT2                                         0559
*     PAR5DT3=ADDR(PARETYPE);                                      0560
         LA    @12,PARETYPE(,@14)                                  0560
         ST    @12,PAR5DT3                                         0560
*     PAR5DT4=ADDR(PAREFLG1);                                      0561
         LA    @12,PAREFLG1(,@14)                                  0561
         ST    @12,PAR5DT4                                         0561
*     PAR5DT5=ADDR(PARENN);                                        0562
         LA    @12,PARENN(,@14)                                    0562
         ST    @12,PAR5DT5                                         0562
*     PAR5DT6=ADDR(PAREIOEQ);                                      0563
         LA    @14,PAREIOEQ(,@14)                                  0563
         ST    @14,PAR5DT6                                         0563
*     RFY                                                          0564
*      (R0,                                                        0564
*       R1) RSTD;                                                  0564
*     R0=ADDR(PAR5PTS);                                            0565
         LA    R0,PAR5PTS                                          0565
*     R1=ABDPLPTR;                  /* GET PARM ADDR                 */
         LR    R1,ABDPLPTR                                         0566
*     CALL FORMAT;                  /* FORMAT THE LINE               */
         L     @15,ADPLFRMT(,ABDPLPTR)                             0567
         BALR  @14,@15                                             0567
*     RFY                                                          0568
*       R15 RSTD;                                                  0568
*     FORMRC=FORMRC×R15;            /* SAVE RETURN CODE              */
         OR    FORMRC,R15                                          0569
*     RFY                                                          0570
*       R15 UNRSTD;                                                0570
*     CALL PRINT;                   /* CALL PRINT ROUTINE            */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0571
         BALR  @14,@15                                             0571
*     RFY                                                          0572
*      (R0,                                                        0572
*       R1) UNRSTD;                                                0572
*     PAR6DT1=ADDR(PARESZSL);                                      0573
         L     @14,PAREPTR                                         0573
         LA    @12,PARESZSL(,@14)                                  0573
         ST    @12,PAR6DT1                                         0573
*     PAR6DT2=ADDR(PARESLTA);                                      0574
         LA    @12,PARESLTA(,@14)                                  0574
         ST    @12,PAR6DT2                                         0574
*     PAR6DT3=ADDR(PARERRCT);                                      0575
         LA    @12,PARERRCT(,@14)                                  0575
         ST    @12,PAR6DT3                                         0575
*     PAR6DT4=ADDR(PAREIORB);                                      0576
         LA    @12,PAREIORB(,@14)                                  0576
         ST    @12,PAR6DT4                                         0576
*     PAR6DT5=ADDR(PAREPATP);                                      0577
         LA    @12,PAREPATP(,@14)                                  0577
         ST    @12,PAR6DT5                                         0577
*     PAR6DT6=ADDR(PAREPCTP);                                      0578
         LA    @14,PAREPCTP(,@14)                                  0578
         ST    @14,PAR6DT6                                         0578
*     RFY                                                          0579
*      (R0,                                                        0579
*       R1) RSTD;                                                  0579
*     R0=ADDR(PAR6PTS);                                            0580
         LA    R0,PAR6PTS                                          0580
*     R1=ABDPLPTR;                  /* GET PARM ADDR                 */
         LR    R1,ABDPLPTR                                         0581
*     CALL FORMAT;                  /* FORMAT THE LINE               */
         L     @15,ADPLFRMT(,ABDPLPTR)                             0582
         BALR  @14,@15                                             0582
*     RFY                                                          0583
*       R15 RSTD;                                                  0583
*     FORMRC=FORMRC×R15;            /* SAVE RETURN CODE              */
         OR    FORMRC,R15                                          0584
*     RFY                                                          0585
*       R15 UNRSTD;                                                0585
*     CALL PRINT;                   /* CALL PRINT ROUTINE            */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0586
         BALR  @14,@15                                             0586
*     RFY                                                          0587
*      (R0,                                                        0587
*       R1) UNRSTD;                                                0587
*     PAR7DT1=ADDR(PAREEDBP);                                      0588
         L     @14,PAREPTR                                         0588
         LA    @12,PAREEDBP(,@14)                                  0588
         ST    @12,PAR7DT1                                         0588
*     PAR7DT2=ADDR(PAREUCBP);                                      0589
         LA    @12,PAREUCBP(,@14)                                  0589
         ST    @12,PAR7DT2                                         0589
*     PAR7DT3=ADDR(PARENODE);                                      0590
         LA    @12,PARENODE(,@14)                                  0590
         ST    @12,PAR7DT3                                         0590
*     PAR7DT4=ADDR(PAREWTQE);                                      0591
         LA    @12,PAREWTQE(,@14)                                  0591
         ST    @12,PAR7DT4                                         0591
*     PAR7DT5=ADDR(PARERQTM);                                      0592
         LA    @12,PARERQTM(,@14)                                  0592
         ST    @12,PAR7DT5                                         0592
*     PAR7DT6=ADDR(PARELCYL);                                      0593
         LA    @14,PARELCYL(,@14)                                  0593
         ST    @14,PAR7DT6                                         0593
*     RFY                                                          0594
*      (R0,                                                        0594
*       R1) RSTD;                                                  0594
*     R0=ADDR(PAR7PTS);                                            0595
         LA    R0,PAR7PTS                                          0595
*     R1=ABDPLPTR;                  /* GET PARM ADDR                 */
         LR    R1,ABDPLPTR                                         0596
*     CALL FORMAT;                  /* FORMAT THE LINE               */
         L     @15,ADPLFRMT(,ABDPLPTR)                             0597
         BALR  @14,@15                                             0597
*     RFY                                                          0598
*       R15 RSTD;                                                  0598
*     FORMRC=FORMRC×R15;            /* SAVE RETURN CODE              */
         OR    FORMRC,R15                                          0599
*     RFY                                                          0600
*       R15 UNRSTD;                                                0600
*     CALL PRINT;                   /* CALL PRINT ROUTINE            */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0601
         BALR  @14,@15                                             0601
*     RFY                                                          0602
*      (R0,                                                        0602
*       R1) UNRSTD;                                                0602
*     RFY                                                          0603
*       R1 RSTD;                                                   0603
*     R1=ABDPLPTR;                  /* GET PARM ADDR                 */
         LR    R1,ABDPLPTR                                         0604
*     CALL PRINT;                   /* CALL PRINT ROUTINE            */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0605
         BALR  @14,@15                                             0605
*     RFY                                                          0606
*       R1 UNRSTD;                                                 0606
*     RFY                                                          0607
*       R15 RSTD;                                                  0607
*     R15=FORMRC;                   /* SAVE RETURN CODE FROM FORMAT  */
         LR    R15,FORMRC                                          0608
*     RFY                                                          0609
*       R15 UNRSTD;                                                0609
*   END;                            /* ILRMFRMT (PART)             0610
*                                      LINES(PAR5,PAR6,PAR7)SPACE    */
*   CUMPTERC=CUMPTERC×R15;          /* OR IN RETURN CODE             */
         OR    CUMPTERC,R15                                        0611
*                                                                  0612
*   /*****************************************************************/
*   /*                                                               */
*   /* FOLLOWING SECTION FORMATS THE PAT AND PATMAP                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0612
*   DO;                             /* ILRMACCS (PATPTR)           0612
*                                      FROM(PAREPATP)                */
*     RFY                                                          0613
*      (R0,                                                        0613
*       R1,                                                        0613
*       R14,                                                       0613
*       R15) RSTD;                                                 0613
*     R0=ADDR(PAREPATP);                                           0614
         L     @12,PAREPTR                                         0614
         LA    R0,PAREPATP(,@12)                                   0614
*     R1=ABDPLPTR;                  /* POINT TO PARM LIST            */
         LR    R1,ABDPLPTR                                         0615
*     CALL ACCESS;                  /* ACCESS DATA                   */
         L     @15,ADPLMEMA(,ABDPLPTR)                             0616
         BALR  @14,@15                                             0616
*     R14=R0;                       /* CANNOT USE R0 AS BASE         */
         LR    R14,R0                                              0617
*     IF R15=GOOD THEN              /* CHECK ACCESS                  */
         LTR   R15,R15                                             0618
         BNZ   @RF00618                                            0618
*       PATPTR=CURRENT;             /* GET REQUESTED FIELD           */
         MVC   PATPTR(4),CURRENT(R14)                              0619
*     ELSE                          /* ACCESS NO GOOD                */
*       PATPTR=ZERO;                /* ZERO FIELD                    */
         B     @RC00618                                            0620
@RF00618 SLR   @12,@12                                             0620
         ST    @12,PATPTR                                          0620
*     RFY                                                          0621
*      (R0,                                                        0621
*       R1,                                                        0621
*       R14,                                                       0621
*       R15) UNRSTD;                                               0621
@RC00618 DS    0H                                                  0622
*   END;                            /* GET PAT PTR                   */
*   IF PATPTR^=NULLPTR THEN         /* ACCESS WAS GOOD               */
         ICM   @14,15,PATPTR                                       0623
         BZ    @RF00623                                            0623
*     CALL FMTPAT;                  /* CALL SEGMENT TO FMT PAT       */
         BAL   @14,FMTPAT                                          0624
*   ELSE                                                           0625
*     ;                             /* PATPTR WAS NULL               */
@RF00623 DS    0H                                                  0626
*   CUMPTERC=CUMPTERC×R15;          /* OR IN APPROPRIATE RET CODE    */
         OR    CUMPTERC,R15                                        0626
*                                                                  0627
*   /*****************************************************************/
*   /*                                                               */
*   /* FOLLOWING SECTION FORMATS THE PARTE UNSORTED READ QUEUE       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0627
*   DO;                             /* ILRMACCS (IOEPTR)           0627
*                                      FROM(PAREIOEQ)                */
*     RFY                                                          0628
*      (R0,                                                        0628
*       R1,                                                        0628
*       R14,                                                       0628
*       R15) RSTD;                                                 0628
*     R0=ADDR(PAREIOEQ);                                           0629
         L     @12,PAREPTR                                         0629
         LA    R0,PAREIOEQ(,@12)                                   0629
*     R1=ABDPLPTR;                  /* POINT TO PARM LIST            */
         LR    R1,ABDPLPTR                                         0630
*     CALL ACCESS;                  /* ACCESS DATA                   */
         L     @15,ADPLMEMA(,ABDPLPTR)                             0631
         BALR  @14,@15                                             0631
*     R14=R0;                       /* CANNOT USE R0 AS BASE         */
         LR    R14,R0                                              0632
*     IF R15=GOOD THEN              /* CHECK ACCESS                  */
         LTR   R15,R15                                             0633
         BNZ   @RF00633                                            0633
*       IOEPTR=CURRENT;             /* GET REQUESTED FIELD           */
         MVC   IOEPTR(4),CURRENT(R14)                              0634
*     ELSE                          /* ACCESS NO GOOD                */
*       IOEPTR=ZERO;                /* ZERO FIELD                    */
         B     @RC00633                                            0635
@RF00633 SLR   @12,@12                                             0635
         ST    @12,IOEPTR                                          0635
*     RFY                                                          0636
*      (R0,                                                        0636
*       R1,                                                        0636
*       R14,                                                       0636
*       R15) UNRSTD;                                               0636
@RC00633 DS    0H                                                  0637
*   END;                            /* FET IOE PTR                   */
*   IF IOEPTR^=NULLPTR THEN         /* QUEUE IS NOT EMPTY            */
         ICM   @14,15,IOEPTR                                       0638
         BZ    @RF00638                                            0638
*     DO;                                                          0639
*       ANCHTXT=ANCH;               /* ANCHORED TEXT                 */
         L     @14,ADPLBUF(,ABDPLPTR)                              0640
         MVC   ANCHTXT(11,@14),ANCH                                0640
*       ANCHNAME=ANCHIOE5;          /* NAME OF ANCHOR                */
         MVC   ANCHNAME(8,@14),ANCHIOE5                            0641
*       CALL FMTIOE;                /* CALL SEGMENT TO FMT IOE       */
         BAL   @14,FMTIOE                                          0642
*     END;                                                         0643
*   ELSE                                                           0644
*     ;                             /* THE QUEUE IS EMPTY            */
@RF00638 DS    0H                                                  0645
*   CUMPTERC=CUMPTERC×R15;          /* OR IN APPROPRIATE RET CODE    */
         OR    CUMPTERC,R15                                        0645
*                                                                  0646
*   /*****************************************************************/
*   /*                                                               */
*   /* FOLLOWING SECTION FORMATS THE IORBS AND RELATED BLOCKS        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0646
*   DO;                             /* ILRMACCS (IORBPTR)          0646
*                                      FROM(PAREIORB)                */
*     RFY                                                          0647
*      (R0,                                                        0647
*       R1,                                                        0647
*       R14,                                                       0647
*       R15) RSTD;                                                 0647
*     R0=ADDR(PAREIORB);                                           0648
         L     @12,PAREPTR                                         0648
         LA    R0,PAREIORB(,@12)                                   0648
*     R1=ABDPLPTR;                  /* POINT TO PARM LIST            */
         LR    R1,ABDPLPTR                                         0649
*     CALL ACCESS;                  /* ACCESS DATA                   */
         L     @15,ADPLMEMA(,ABDPLPTR)                             0650
         BALR  @14,@15                                             0650
*     R14=R0;                       /* CANNOT USE R0 AS BASE         */
         LR    R14,R0                                              0651
*     IF R15=GOOD THEN              /* CHECK ACCESS                  */
         LTR   R15,R15                                             0652
         BNZ   @RF00652                                            0652
*       IORBPTR=CURRENT;            /* GET REQUESTED FIELD           */
         L     IORBPTR,CURRENT(,R14)                               0653
*     ELSE                          /* ACCESS NO GOOD                */
*       IORBPTR=ZERO;               /* ZERO FIELD                    */
         B     @RC00652                                            0654
@RF00652 SLR   IORBPTR,IORBPTR                                     0654
*     RFY                                                          0655
*      (R0,                                                        0655
*       R1,                                                        0655
*       R14,                                                       0655
*       R15) UNRSTD;                                               0655
@RC00652 DS    0H                                                  0656
*   END;                                                           0656
*   IF IORBPTR^=NULLPTR THEN        /* ACCESS WAS GOOD               */
         LTR   IORBPTR,IORBPTR                                     0657
         BZ    @RF00657                                            0657
*     DO;                                                          0658
*       ANCHTXT=ANCH;               /* ANCHORED TEXT                 */
         L     @14,ADPLBUF(,ABDPLPTR)                              0659
         MVC   ANCHTXT(11,@14),ANCH                                0659
*       ANCHNAME=ANCHIOR1;          /* NAME OF ANCHOR                */
         MVC   ANCHNAME(8,@14),ANCHIOR1                            0660
*       RFY                                                        0661
*        (R0,                                                      0661
*         R1) RSTD;                                                0661
*       R0=IORBPTR;                 /* SET UP INTERFACE TO ILRFIORB  */
         LR    R0,IORBPTR                                          0662
*       R1=ABDPLPTR;                                               0663
         LR    R1,ABDPLPTR                                         0663
*       CALL ILRFIORB;              /* CALL SEGMENT TO FMT IORB Q    */
         L     @15,@CV00490                                        0664
         BALR  @14,@15                                             0664
*     END;                          /* END IORB PROCESSING           */
*   ELSE                                                           0666
*     ;                             /* QUEUE WAS EMPTY               */
@RF00657 DS    0H                                                  0667
*   CUMPTERC=CUMPTERC×R15;          /* OR IN APPROPRIATE RET CODE    */
         OR    CUMPTERC,R15                                        0667
*   RFY                                                            0668
*     R14 RSTD;                                                    0668
*   R15=CUMPTERC;                   /* SET RET CODE REG              */
         LR    R15,CUMPTERC                                        0669
*   R14=RTNADDR1;                   /* RESTORE RETURN ADDRESS        */
         L     R14,RTNADDR1                                        0670
*   RFY                                                            0671
*     R14 UNRSTD;                                                  0671
*   END FMTPARTE;                   /* RETURN TO CALLER              */
@EL00005 DS    0H                                                  0672
@EF00005 DS    0H                                                  0672
@ER00005 BR    @14                                                 0672
*                                                                  0673
*/********************************************************************/
*/*                                                                  */
*/* FMTPAT:  SEGMENT TO FORMAT THE PAGE ALLOCATION TABLE             */
*/*                                                                  */
*/* INPUT:   VIRTUAL ADDRESS IN PATPTR                               */
*/*                                                                  */
*/* PROCESS: FORMAT THE PAT HEADER SECTION, CALCULATE THE SIZE       */
*/*           OF THE PATMAP AND FORMAT THE PATMAP                    */
*/*                                                                  */
*/* OUTPUT:  PAT AND PATMAPS FORMATTED.                              */
*/*                                                                  */
*/* RETURN CODES: 0 - PAT FORMATTED SUCCESSFULLY                     */
*/*               4 - AT LEAST ONE ERROR OCCURRED WHILE FORMATTING   */
*/*                     THE PAT OR PATMAPS.                          */
*/*                                                                  */
*/********************************************************************/
*                                                                  0673
*FMTPAT:                                                           0673
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0673
FMTPAT   DS    0H                                                  0674
*                                                                  0674
*   /*****************************************************************/
*   /*                                                               */
*   /* PAT1:ILRMLINE ((IDENT,ASIS),PART,CYLNO,CYLSZ,CYLMW,RSV1)      */
*   /* OF(PAT) LABEL VARIABLES REFERENCED IN FORMAT PATTERNS         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0674
*   DCL                                                            0674
*     PAT1LB1 CHAR(LENGTH('IDENT')) INIT('IDENT');                 0674
*   DCL                                                            0675
*     PAT1LB2 CHAR(LENGTH('PART')) INIT('PART');                   0675
*   DCL                                                            0676
*     PAT1LB3 CHAR(LENGTH('CYLNO')) INIT('CYLNO');                 0676
*   DCL                                                            0677
*     PAT1LB4 CHAR(LENGTH('CYLSZ')) INIT('CYLSZ');                 0677
*   DCL                                                            0678
*     PAT1LB5 CHAR(LENGTH('CYLMW')) INIT('CYLMW');                 0678
*   DCL                                                            0679
*     PAT1LB6 CHAR(LENGTH('RSV1')) INIT('RSV1');                   0679
*                                                                  0679
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OF OUTPUT                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0680
*   DCL                                                            0680
*     1 PAT1PTS BDY(WORD),                                         0680
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00101111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PATIDENT)-1+16*LENGTH('IDENT
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(5),                                      0680
*       3 * FIXED(8) INIT(11),                                     0680
*       3 * PTR(31) INIT(ADDR(PAT1LB1)),/* SEE PTTLBPTR              */
*       3 PAT1DT1 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PATPART)-1+16*LENGTH('PART')
*             -16),                 /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(15+8),                                   0680
*       3 * FIXED(8) INIT(21+8),                                   0680
*       3 * PTR(31) INIT(ADDR(PAT1LB2)),/* SEE PTTLBPTR              */
*       3 PAT1DT2 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PATCYLNO)-1+16*LENGTH('CYLNO
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(25+8+8),                                 0680
*       3 * FIXED(8) INIT(31+8+8),                                 0680
*       3 * PTR(31) INIT(ADDR(PAT1LB3)),/* SEE PTTLBPTR              */
*       3 PAT1DT3 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PATCYLSZ)-1+16*LENGTH('CYLSZ
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(35+8+8+8),                               0680
*       3 * FIXED(8) INIT(41+8+8+8),                               0680
*       3 * PTR(31) INIT(ADDR(PAT1LB4)),/* SEE PTTLBPTR              */
*       3 PAT1DT4 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PATCYLMW)-1+16*LENGTH('CYLMW
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(45+8+8+8+8),                             0680
*       3 * FIXED(8) INIT(51+8+8+8+8),                             0680
*       3 * PTR(31) INIT(ADDR(PAT1LB5)),/* SEE PTTLBPTR              */
*       3 PAT1DT5 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PATRSV1)-1+16*LENGTH('RSV1')
*             -16),                 /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(55+8+8+8+8+8),                           0680
*       3 * FIXED(8) INIT(61+8+8+8+8+8),                           0680
*       3 * PTR(31) INIT(ADDR(PAT1LB6)),/* SEE PTTLBPTR              */
*       3 PAT1DT6 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * FIXED(31) INIT(0);       /* END OF FORMAT PATTERNS        */
*                                                                  0681
*   /*****************************************************************/
*   /*                                                               */
*   /* PAT2:ILRMARRY (CYL,8) FORMAT PATTERNS FOR ONE LINE OF OUTPUT  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0681
*   DCL                                                            0681
*     1 PAT2PTS BDY(WORD),                                         0681
*      2 * CHAR(8) BDY(WORD),       /* ONE FORMAT PATTERN            */
*       3 * BIT(8) INIT('00001100'B),/* SEE PTTFLGS                  */
*         5 * BIT(2),                                              0681
*         5 * BIT(6),                                              0681
*       3 * BIT(8) INIT(16*0+LENGTH(PATCYL)-1),/* SEE PTTLBLGH AND 0681
*                                      PTTDTLGH                      */
*       3 * FIXED(8) INIT(0),       /* SEE PTTLBOFF                  */
*       3 * FIXED(8) INIT(5),       /* SEE PTTDTOFF                  */
*       3 PAT2DT1 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(8) BDY(WORD),       /* ONE FORMAT PATTERN            */
*       3 * BIT(8) INIT('00001100'B),/* SEE PTTFLGS                  */
*         5 * BIT(2),                                              0681
*         5 * BIT(6),                                              0681
*       3 * BIT(8) INIT(16*0+LENGTH(PATCYL)-1),/* SEE PTTLBLGH AND 0681
*                                      PTTDTLGH                      */
*       3 * FIXED(8) INIT(0),       /* SEE PTTLBOFF                  */
*       3 * FIXED(8) INIT(17),      /* SEE PTTDTOFF                  */
*       3 PAT2DT2 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(8) BDY(WORD),       /* ONE FORMAT PATTERN            */
*       3 * BIT(8) INIT('00001100'B),/* SEE PTTFLGS                  */
*         5 * BIT(2),                                              0681
*         5 * BIT(6),                                              0681
*       3 * BIT(8) INIT(16*0+LENGTH(PATCYL)-1),/* SEE PTTLBLGH AND 0681
*                                      PTTDTLGH                      */
*       3 * FIXED(8) INIT(0),       /* SEE PTTLBOFF                  */
*       3 * FIXED(8) INIT(29),      /* SEE PTTDTOFF                  */
*       3 PAT2DT3 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(8) BDY(WORD),       /* ONE FORMAT PATTERN            */
*       3 * BIT(8) INIT('00001100'B),/* SEE PTTFLGS                  */
*         5 * BIT(2),                                              0681
*         5 * BIT(6),                                              0681
*       3 * BIT(8) INIT(16*0+LENGTH(PATCYL)-1),/* SEE PTTLBLGH AND 0681
*                                      PTTDTLGH                      */
*       3 * FIXED(8) INIT(0),       /* SEE PTTLBOFF                  */
*       3 * FIXED(8) INIT(41),      /* SEE PTTDTOFF                  */
*       3 PAT2DT4 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(8) BDY(WORD),       /* ONE FORMAT PATTERN            */
*       3 * BIT(8) INIT('00001100'B),/* SEE PTTFLGS                  */
*         5 * BIT(2),                                              0681
*         5 * BIT(6),                                              0681
*       3 * BIT(8) INIT(16*0+LENGTH(PATCYL)-1),/* SEE PTTLBLGH AND 0681
*                                      PTTDTLGH                      */
*       3 * FIXED(8) INIT(0),       /* SEE PTTLBOFF                  */
*       3 * FIXED(8) INIT(53),      /* SEE PTTDTOFF                  */
*       3 PAT2DT5 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(8) BDY(WORD),       /* ONE FORMAT PATTERN            */
*       3 * BIT(8) INIT('00001100'B),/* SEE PTTFLGS                  */
*         5 * BIT(2),                                              0681
*         5 * BIT(6),                                              0681
*       3 * BIT(8) INIT(16*0+LENGTH(PATCYL)-1),/* SEE PTTLBLGH AND 0681
*                                      PTTDTLGH                      */
*       3 * FIXED(8) INIT(0),       /* SEE PTTLBOFF                  */
*       3 * FIXED(8) INIT(65),      /* SEE PTTDTOFF                  */
*       3 PAT2DT6 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(8) BDY(WORD),       /* ONE FORMAT PATTERN            */
*       3 * BIT(8) INIT('00001100'B),/* SEE PTTFLGS                  */
*         5 * BIT(2),                                              0681
*         5 * BIT(6),                                              0681
*       3 * BIT(8) INIT(16*0+LENGTH(PATCYL)-1),/* SEE PTTLBLGH AND 0681
*                                      PTTDTLGH                      */
*       3 * FIXED(8) INIT(0),       /* SEE PTTLBOFF                  */
*       3 * FIXED(8) INIT(77),      /* SEE PTTDTOFF                  */
*       3 PAT2DT7 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(8) BDY(WORD),       /* ONE FORMAT PATTERN            */
*       3 * BIT(8) INIT('00001100'B),/* SEE PTTFLGS                  */
*         5 * BIT(2),                                              0681
*         5 * BIT(6),                                              0681
*       3 * BIT(8) INIT(16*0+LENGTH(PATCYL)-1),/* SEE PTTLBLGH AND 0681
*                                      PTTDTLGH                      */
*       3 * FIXED(8) INIT(0),       /* SEE PTTLBOFF                  */
*       3 * FIXED(8) INIT(89),      /* SEE PTTDTOFF                  */
*       3 PAT2DT8 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * FIXED(31) INIT(0);       /* END OF FORMAT PATTERNS        */
*                                                                  0682
*   /*****************************************************************/
*   /*                                                               */
*   /* FOLLOWING ROUTINE WITH ABOVE PATTERNS FORMATS PAT AND PATMAP  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0682
*   RFY                                                            0682
*     R14 RSTD;                                                    0682
*   RTNADDR2=R14;                   /* SAVE RETURN ADDRESS           */
         ST    R14,RTNADDR2                                        0683
*   RFY                                                            0684
*     R14 UNRSTD;                                                  0684
*   CUMPATRC=0;                     /* INITIALIZE FMTPATS CUMULATIVE
*                                      RET CODE                      */
         SLR   @14,@14                                             0685
         ST    @14,CUMPATRC                                        0685
*   ANCHTXT=ANCH;                   /* ANCHORED TEXT                 */
         L     @14,ADPLBUF(,ABDPLPTR)                              0686
         MVC   ANCHTXT(11,@14),ANCH                                0686
*   ANCHNAME=ANCHPAT;               /* NAME OF ANCHOR                */
         MVC   ANCHNAME(8,@14),ANCHPAT                             0687
*   RFY                                                            0688
*    (R0,                                                          0688
*     R1) RSTD;                                                    0688
*   R0=ADDR(PATPTR);                /* PTR TO BE FORMATTED           */
         LA    R0,PATPTR                                           0689
*   R1=ADDR(PATNAM);                /* LABEL                         */
         LA    R1,PATNAM                                           0690
*   CALL ILRFPRTH;                  /* FORMAT AND PRINT HEADING      */
         L     @15,@CV00488                                        0691
         BALR  @14,@15                                             0691
*   RFY                                                            0692
*    (R0,                                                          0692
*     R1) UNRSTD;                                                  0692
*   DO;                             /* ILRMFRMT (PAT) LINES(PAT1)    */
*     FORMRC=0;                     /* ZERO THE RETURN CODE          */
         SLR   FORMRC,FORMRC                                       0694
*     PAT1DT1=ADDR(PATIDENT);                                      0695
         L     @14,PATPTR                                          0695
         ST    @14,PAT1DT1                                         0695
*     PAT1DT2=ADDR(PATPART);                                       0696
         LA    @12,PATPART(,@14)                                   0696
         ST    @12,PAT1DT2                                         0696
*     PAT1DT3=ADDR(PATCYLNO);                                      0697
         LA    @12,PATCYLNO(,@14)                                  0697
         ST    @12,PAT1DT3                                         0697
*     PAT1DT4=ADDR(PATCYLSZ);                                      0698
         LA    @12,PATCYLSZ(,@14)                                  0698
         ST    @12,PAT1DT4                                         0698
*     PAT1DT5=ADDR(PATCYLMW);                                      0699
         LA    @12,PATCYLMW(,@14)                                  0699
         ST    @12,PAT1DT5                                         0699
*     PAT1DT6=ADDR(PATRSV1);                                       0700
         LA    @14,PATRSV1(,@14)                                   0700
         ST    @14,PAT1DT6                                         0700
*     RFY                                                          0701
*      (R0,                                                        0701
*       R1) RSTD;                                                  0701
*     R0=ADDR(PAT1PTS);                                            0702
         LA    R0,PAT1PTS                                          0702
*     R1=ABDPLPTR;                  /* GET PARM ADDR                 */
         LR    R1,ABDPLPTR                                         0703
*     CALL FORMAT;                  /* FORMAT THE LINE               */
         L     @15,ADPLFRMT(,ABDPLPTR)                             0704
         BALR  @14,@15                                             0704
*     RFY                                                          0705
*       R15 RSTD;                                                  0705
*     FORMRC=FORMRC×R15;            /* SAVE RETURN CODE              */
         OR    FORMRC,R15                                          0706
*     RFY                                                          0707
*       R15 UNRSTD;                                                0707
*     CALL PRINT;                   /* CALL PRINT ROUTINE            */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0708
         BALR  @14,@15                                             0708
*     RFY                                                          0709
*      (R0,                                                        0709
*       R1) UNRSTD;                                                0709
*     RFY                                                          0710
*       R15 RSTD;                                                  0710
*     R15=FORMRC;                   /* SAVE RETURN CODE FROM FORMAT  */
         LR    R15,FORMRC                                          0711
*     RFY                                                          0712
*       R15 UNRSTD;                                                0712
*   END;                            /* ILRMFRMT (PAT) LINES(PAT1)    */
*   IF R15^=ZERO THEN               /* IF PAT HEADER FORMATTING BLEW
*                                      UP,                           */
         LTR   R15,R15                                             0714
         BZ    @RF00714                                            0714
*     CUMPATRC=4;                   /* SET BAD RETURN CODE AND SKIP
*                                      PAT MAPS THIS PAT             */
         MVC   CUMPATRC(4),@CF00139                                0715
*                                                                  0716
*   /*****************************************************************/
*   /*                                                               */
*   /* FOLLOWING SECTION FORMATS THE PATMAPS IF FORMAT OF HEADER     */
*   /* SECTION WAS SUCCESSFUL                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0716
*   ELSE                            /* OTHERWISE GO AHEAD AND FORMAT
*                                      PAT MAPS FOR THIS PAT         */
*     DO;                                                          0716
         B     @RC00714                                            0716
@RF00714 DS    0H                                                  0717
*       BUFFER(1:LENGTH(MAPNAM))=MAPNAM;/* SET HEADING FOR PAT MAPS  */
         L     @14,ADPLBUF(,ABDPLPTR)                              0717
         MVC   BUFFER(7,@14),MAPNAM                                0717
*       RFY                                                        0718
*         R1 RSTD;                                                 0718
*       R1=ABDPLPTR;                /* SET UP FOR PRINT              */
         LR    R1,ABDPLPTR                                         0719
*       CALL PRINT;                 /* PRINT HEADER FOR PAT MAPS     */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0720
         BALR  @14,@15                                             0720
*       RFY                                                        0721
*         R1 UNRSTD;                                               0721
*       DO;                         /* ILRMACCS (CYLS) FROM(PATCYLNO)*/
*         RFY                                                      0723
*          (R0,                                                    0723
*           R1,                                                    0723
*           R14,                                                   0723
*           R15) RSTD;                                             0723
*         R0=ADDR(PATCYLNO);                                       0724
         L     @12,PATPTR                                          0724
         LA    R0,PATCYLNO(,@12)                                   0724
*         R1=ABDPLPTR;              /* POINT TO PARM LIST            */
         LR    R1,ABDPLPTR                                         0725
*         CALL ACCESS;              /* ACCESS DATA                   */
         L     @15,ADPLMEMA(,ABDPLPTR)                             0726
         BALR  @14,@15                                             0726
*         R14=R0;                   /* CANNOT USE R0 AS BASE         */
         LR    R14,R0                                              0727
*         IF R15=GOOD THEN          /* CHECK ACCESS                  */
         LTR   R15,R15                                             0728
         BNZ   @RF00728                                            0728
*           CYLS=CURRENT;           /* GET REQUESTED FIELD           */
         L     CYLS,CURRENT(,R14)                                  0729
*         ELSE                      /* ACCESS NO GOOD                */
*           CYLS=ZERO;              /* ZERO FIELD                    */
         B     @RC00728                                            0730
@RF00728 SLR   CYLS,CYLS                                           0730
*         RFY                                                      0731
*          (R0,                                                    0731
*           R1,                                                    0731
*           R14,                                                   0731
*           R15) UNRSTD;                                           0731
@RC00728 DS    0H                                                  0732
*       END;                                                       0732
*       DO;                         /* ILRMACCS (MAPWRDS)          0733
*                                      FROM(PATCYLMW)                */
*         RFY                                                      0734
*          (R0,                                                    0734
*           R1,                                                    0734
*           R14,                                                   0734
*           R15) RSTD;                                             0734
*         R0=ADDR(PATCYLMW);                                       0735
         L     @06,PATPTR                                          0735
         LA    R0,PATCYLMW(,@06)                                   0735
*         R1=ABDPLPTR;              /* POINT TO PARM LIST            */
         LR    R1,ABDPLPTR                                         0736
*         CALL ACCESS;              /* ACCESS DATA                   */
         L     @15,ADPLMEMA(,ABDPLPTR)                             0737
         BALR  @14,@15                                             0737
*         R14=R0;                   /* CANNOT USE R0 AS BASE         */
         LR    R14,R0                                              0738
*         IF R15=GOOD THEN          /* CHECK ACCESS                  */
         LTR   R15,R15                                             0739
         BNZ   @RF00739                                            0739
*           MAPWRDS=CURRENT;        /* GET REQUESTED FIELD           */
         L     MAPWRDS,CURRENT(,R14)                               0740
*         ELSE                      /* ACCESS NO GOOD                */
*           MAPWRDS=ZERO;           /* ZERO FIELD                    */
         B     @RC00739                                            0741
@RF00739 SLR   MAPWRDS,MAPWRDS                                     0741
*         RFY                                                      0742
*          (R0,                                                    0742
*           R1,                                                    0742
*           R14,                                                   0742
*           R15) UNRSTD;                                           0742
@RC00739 DS    0H                                                  0743
*       END;                                                       0743
*       SRL(CYLS,16);               /* RIGHT JUSTIFY HALFWORD NUM OF
*                                      CYLS IN THE FULLWORD          */
         SRL   CYLS,16                                             0744
*       SRL(MAPWRDS,16);            /* DITTO FOR NUM OF MAP WORDS /
*                                      CYL                           */
         SRL   MAPWRDS,16                                          0745
*       MAPSIZE=CYLS*MAPWRDS;       /* CALCULATE PATMAP SIZE         */
         LR    @01,MAPWRDS                                         0746
         MR    @00,CYLS                                            0746
         ST    @01,MAPSIZE                                         0746
*       CTR=MAPSIZE/LWRDS;          /* DETERMINE HOW MAY LINES       */
         LR    @04,@01                                             0747
         SRDA  @04,32                                              0747
         D     @04,@CF00040                                        0747
         ST    @05,CTR                                             0747
*       REM=MAPSIZE//LWRDS;         /* OF PATMAP TO PRINT            */
         LR    @04,@01                                             0748
         SRDA  @04,32                                              0748
         D     @04,@CF00040                                        0748
         LR    REM,@04                                             0748
*       MAPPTR=ADDR(PATMAP);        /* INIT PAT MAP BASE             */
         L     MAPPTR,PATPTR                                       0749
         LA    MAPPTR,PATMAP(,MAPPTR)                              0749
*       RFY                                                        0750
*         PATCYL BASED(MAPPTR);                                    0750
*                                                                  0750
*       /*************************************************************/
*       /*                                                           */
*       /* LOOP TO FORMAT PATMAP FULL LINES WILL NOT BE EXECUTED IF  */
*       /* CYLS OR MAPWRDS IS ZERO (A POSSIBILITY IN THE DUMP).      */
*       /* COMPILER WILL NOT EXEC LOOP IF DO 1 TO CTR AND CTR IS 0   */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0751
*       DO LINECTR=1 TO CTR;        /* FORMAT AND PRINT PATMAP       */
         LA    @14,1                                               0751
         B     @DE00751                                            0751
@DL00751 DS    0H                                                  0752
*         DO;                       /* ILRMFRMT ARRAY(PAT2)          */
*           FORMRC=0;               /* ZERO THE RETURN CODE          */
         SLR   FORMRC,FORMRC                                       0753
*           PAT2DT1=ADDR(PATCYL)+00*LENGTH(PATCYL);                0754
         ST    MAPPTR,PAT2DT1                                      0754
*           PAT2DT2=ADDR(PATCYL)+01*LENGTH(PATCYL);                0755
         LA    @14,4                                               0755
         ALR   @14,MAPPTR                                          0755
         ST    @14,PAT2DT2                                         0755
*           PAT2DT3=ADDR(PATCYL)+02*LENGTH(PATCYL);                0756
         LA    @14,8                                               0756
         ALR   @14,MAPPTR                                          0756
         ST    @14,PAT2DT3                                         0756
*           PAT2DT4=ADDR(PATCYL)+03*LENGTH(PATCYL);                0757
         LA    @14,12                                              0757
         ALR   @14,MAPPTR                                          0757
         ST    @14,PAT2DT4                                         0757
*           PAT2DT5=ADDR(PATCYL)+04*LENGTH(PATCYL);                0758
         LA    @14,16                                              0758
         ALR   @14,MAPPTR                                          0758
         ST    @14,PAT2DT5                                         0758
*           PAT2DT6=ADDR(PATCYL)+05*LENGTH(PATCYL);                0759
         LA    @14,20                                              0759
         ALR   @14,MAPPTR                                          0759
         ST    @14,PAT2DT6                                         0759
*           PAT2DT7=ADDR(PATCYL)+06*LENGTH(PATCYL);                0760
         LA    @14,24                                              0760
         ALR   @14,MAPPTR                                          0760
         ST    @14,PAT2DT7                                         0760
*           PAT2DT8=ADDR(PATCYL)+07*LENGTH(PATCYL);                0761
         LA    @14,28                                              0761
         ALR   @14,MAPPTR                                          0761
         ST    @14,PAT2DT8                                         0761
*           RFY                                                    0762
*            (R0,                                                  0762
*             R1) RSTD;                                            0762
*           R0=ADDR(PAT2PTS);       /* POINT TO FORMAT PATTERN       */
         LA    R0,PAT2PTS                                          0763
*           R1=ABDPLPTR;            /* GET PARM ADDR                 */
         LR    R1,ABDPLPTR                                         0764
*           CALL FORMAT;            /* FORMAT THE LINE               */
         L     @15,ADPLFRMT(,ABDPLPTR)                             0765
         BALR  @14,@15                                             0765
*           RFY                                                    0766
*             R15 RSTD;                                            0766
*           FORMRC=FORMRC×R15;      /* SAVE RETURN CODE              */
         OR    FORMRC,R15                                          0767
*           RFY                                                    0768
*             R15 UNRSTD;                                          0768
*           CALL PRINT;             /* CALL PRINT ROUTINE            */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0769
         BALR  @14,@15                                             0769
*           RFY                                                    0770
*            (R0,                                                  0770
*             R1) UNRSTD;                                          0770
*           RFY                                                    0771
*             R15 RSTD;                                            0771
*           R15=FORMRC;             /* SAVE RETURN CODE FROM FORMAT  */
         LR    R15,FORMRC                                          0772
*           RFY                                                    0773
*             R15 UNRSTD;                                          0773
*         END;                      /* ILRMFRMT ARRAY(PAT2)          */
*         CUMPATRC=CUMPATRC×R15;    /* OR IN RETURN CODE             */
         L     @14,CUMPATRC                                        0775
         OR    @14,R15                                             0775
         ST    @14,CUMPATRC                                        0775
*         MAPPTR=MAPPTR+LWRDS*LENGTH(PATCYL);/* NEXT SET OF WORDS IN
*                                      PAT MAP                       */
         AH    MAPPTR,@CH00084                                     0776
*       END;                        /* PRINTED ALL COMPLETE LINES    */
         LA    @14,1                                               0777
         AL    @14,LINECTR                                         0777
@DE00751 ST    @14,LINECTR                                         0777
         C     @14,CTR                                             0777
         BNH   @DL00751                                            0777
*       IF REM^=ZERO THEN           /* PARTIAL LINE TO FORMAT?       */
         LTR   REM,REM                                             0778
         BZ    @RF00778                                            0778
*         DO;                       /* YES-                          */
*           PPTRNPTR=ADDR(PAT2PTS); /* GET PATTERN FOR PAT           */
         LA    PPTRNPTR,PAT2PTS                                    0780
*           RFY                                                    0781
*             PTTRNS BASED(PPTRNPTR);                              0781
*           DO WHILE(REM>0);        /* BUILD PATTERNS                */
         B     @DE00782                                            0782
@DL00782 DS    0H                                                  0783
*             PTTLBPTR=MAPPTR;      /* STORE PTR TO NEXT MAPWORD     */
         ST    MAPPTR,PTTLBPTR(,PPTRNPTR)                          0783
*             PPTRNPTR=PPTRNPTR+LENGTH(PTTSTOP)+LENGTH(PTTDTPTR);/*
*                                      POINT TO PATTERN FOR NEXT   0784
*                                      PATMAP WORD                   */
         AL    PPTRNPTR,@CF00040                                   0784
*             MAPPTR=MAPPTR+LENGTH(PATCYL);/* PT TO NEXT PAT MAPWORD */
         AL    MAPPTR,@CF00139                                     0785
*             REM=REM-1;            /* DECR COUNT OF PATMAP WORDS  0786
*                                      LEFT TO FORMAT                */
         BCTR  REM,0                                               0786
*           END;                    /* END BUILD PATTERNS            */
@DE00782 SLR   @14,@14                                             0787
         CR    REM,@14                                             0787
         BH    @DL00782                                            0787
*           SAVPTR=PTTSTOP;         /* SAVE PATTERN FORMAT TEMP      */
         L     SAVPTR,PTTSTOP(,PPTRNPTR)                           0788
*           PTTSTOP=ZERO;           /* ZERO ENDS FORMAT PATTERNS     */
         ST    @14,PTTSTOP(,PPTRNPTR)                              0789
*           RFY                                                    0790
*            (R0,                                                  0790
*             R1) RSTD;                                            0790
*           R0=ADDR(PAT2PTS);                                      0791
         LA    R0,PAT2PTS                                          0791
*           R1=ABDPLPTR;                                           0792
         LR    R1,ABDPLPTR                                         0792
*           CALL FORMAT;                                           0793
         L     @15,ADPLFRMT(,ABDPLPTR)                             0793
         BALR  @14,@15                                             0793
*           CUMPATRC=CUMPATRC×R15;  /* OR IN FORMATS RET CODE        */
         L     @14,CUMPATRC                                        0794
         OR    @14,R15                                             0794
         ST    @14,CUMPATRC                                        0794
*           CALL PRINT;                                            0795
         L     @15,ADPLPRNT(,ABDPLPTR)                             0795
         BALR  @14,@15                                             0795
*           CALL PRINT;             /* SPACE A LINE                  */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0796
         BALR  @14,@15                                             0796
*           RFY                                                    0797
*            (R0,                                                  0797
*             R1) UNRSTD;                                          0797
*           PTTSTOP=SAVPTR;         /* RESTORE PAT FORMAT PATTERN    */
         ST    SAVPTR,PTTSTOP(,PPTRNPTR)                           0798
*           RFY                                                    0799
*             PTTRNS;                                              0799
*         END;                      /* END FORMAT PARTIAL LINE       */
*       ELSE                                                       0801
*         ;                         /* NO PARTIAL LINES              */
@RF00778 DS    0H                                                  0802
*     END;                          /* END FORMAT PAT MAPS           */
*   RFY                                                            0803
*     R14 RSTD;                                                    0803
@RC00714 DS    0H                                                  0804
*   R14=RTNADDR2;                   /* RESTORE RETURN ADDRESS        */
         L     R14,RTNADDR2                                        0804
*   R15=CUMPATRC;                   /* SET CUMULATIVE RET CODE       */
         L     R15,CUMPATRC                                        0805
*   RFY                                                            0806
*     R14 UNRSTD;                                                  0806
*   END FMTPAT;                     /* RETURN TO CALLER              */
@EL00006 DS    0H                                                  0807
@EF00006 DS    0H                                                  0807
@ER00006 BR    @14                                                 0807
*   END ILRFMTPG                                                   0808
*                                                                  0808
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (ILRAIA  )                                       */
*/*%INCLUDE SYSLIB  (IHAABDPL)                                       */
*/*%INCLUDE SYSLIB  (ILRASMVT)                                       */
*/*%INCLUDE SYSLIB  (ILRIOE  )                                       */
*/*%INCLUDE SYSLIB  (ILRIORB )                                       */
*/*%INCLUDE SYSLIB  (ILRPART )                                       */
*/*%INCLUDE SYSLIB  (ILRPAT  )                                       */
*/*%INCLUDE SYSLIB  (ILRPCCW )                                       */
*/*%INCLUDE SYSLIB  (ILRPCT  )                                       */
*                                                                  0808
*       ;                                                          0808
@DATA    DS    0H
@CH00043 DC    H'1'
@CH00351 DC    H'7'
@CH00084 DC    H'32'
@CH00607 DC    H'44'
@CH00552 DC    H'200'
         DS    0F
@SA00001 DS    18F
         DS    0F
@CF00139 DC    F'4'
@CF00040 DC    F'8'
@CV00488 DC    V(ILRFPRTH)
@CV00489 DC    V(ILRFMSG)
@CV00490 DC    V(ILRFIORB)
@CV00491 DC    V(ILRFAIA)
         DS    0D
IOEPTR   DS    A
PARTPTR  DS    A
PAREPTR  DS    A
PATPTR   DS    A
PCCWPTR  DS    A
PCTPTR   DS    A
RTNADDR1 DS    A
RTNADDR2 DS    A
CTR      DS    F
CUMRC    DC    F'0'
CUMPATRC DS    F
MAPSIZE  DS    F
LINECTR  DS    F
PARTECTR DS    F
NUMPARTE DS    F
DSNPTRNS DS    CL20
         ORG   DSNPTRNS
@NM00023 DS    CL8
         ORG   @NM00023
@NM00024 DC    B'00101100'
@NM00025 DC    AL1(15)
@NM00026 DC    AL1(0)
@NM00027 DC    AL1(23)
DSNDT    DC    A(0)
         ORG   DSNPTRNS+8
@NM00028 DS    CL4
         ORG   @NM00028
@NM00029 DC    B'00100100'
@NM00030 DC    AL1(15)
@NM00031 DC    AL1(0)
@NM00032 DC    AL1(39)
         ORG   DSNPTRNS+12
@NM00033 DS    CL4
         ORG   @NM00033
@NM00034 DC    B'00100100'
@NM00035 DC    AL1(11)
@NM00036 DC    AL1(0)
@NM00037 DC    AL1(55)
         ORG   DSNPTRNS+16
@NM00038 DC    F'0'
         ORG   DSNPTRNS+20
ANCH     DC    CL11'ANCHORED IN'
ANCHAIA2 DC    CL8'PARTAIAE'
ANCHIOE1 DC    CL8'PARTCOMQ'
ANCHIOE2 DC    CL8'PARTSPLQ'
ANCHIOE3 DC    CL8'PARTDUPQ'
ANCHIOE4 DC    CL8'PARTLOCQ'
ANCHIOE5 DC    CL8'PAREIOEQ'
ANCHIOR1 DC    CL8'PAREIORB'
ANCHPART DC    CL8'ASMPART'
ANCHPAT  DC    CL8'PAREPATP'
ANCHPCT  DC    CL8'PARTPCTQ'
IOENAM   DC    CL7'IOE'
PATNAM   DC    CL7'PAT'
PARTNAM  DC    CL7'PART'
PARENAM  DC    CL7'PARTE'
MAPNAM   DC    CL7'PATMAP'
PCTNAM   DC    CL7'PCT'
DSNLNA   DC    CL20'DSNAME NOT AVAILABLE'
PAR1LB1  DC    CL5'TIDEN'
PAR1LB2  DC    CL5'TSIZE'
PAR1LB3  DC    CL5'TEUSE'
PAR1LB4  DC    CL5'TAIAE'
PAR1LB5  DC    CL5'TCIR1'
         DS    CL2
PAR1PTS  DS    CL64
         ORG   PAR1PTS
@NM00039 DS    CL12
         ORG   @NM00039
@NM00040 DC    B'00101111'
@NM00041 DC    AL1(4-1+16*5-16)
@NM00042 DC    AL1(5)
@NM00043 DC    AL1(11)
@NM00044 DC    AL4(PAR1LB1)
PAR1DT1  DC    A(0)
         ORG   PAR1PTS+12
@NM00045 DS    CL12
         ORG   @NM00045
@NM00046 DC    B'00001111'
@NM00047 DC    AL1(4-1+16*5-16)
@NM00048 DC    AL1(15+8)
@NM00049 DC    AL1(21+8)
@NM00050 DC    AL4(PAR1LB2)
PAR1DT2  DC    A(0)
         ORG   PAR1PTS+24
@NM00051 DS    CL12
         ORG   @NM00051
@NM00052 DC    B'00001111'
@NM00053 DC    AL1(4-1+16*5-16)
@NM00054 DC    AL1(25+8+8)
@NM00055 DC    AL1(31+8+8)
@NM00056 DC    AL4(PAR1LB3)
PAR1DT3  DC    A(0)
         ORG   PAR1PTS+36
@NM00057 DS    CL12
         ORG   @NM00057
@NM00058 DC    B'00001111'
@NM00059 DC    AL1(4-1+16*5-16)
@NM00060 DC    AL1(35+8+8+8)
@NM00061 DC    AL1(41+8+8+8)
@NM00062 DC    AL4(PAR1LB4)
PAR1DT4  DC    A(0)
         ORG   PAR1PTS+48
@NM00063 DS    CL12
         ORG   @NM00063
@NM00064 DC    B'00001111'
@NM00065 DC    AL1(4-1+16*5-16)
@NM00066 DC    AL1(45+8+8+8+8)
@NM00067 DC    AL1(51+8+8+8+8)
@NM00068 DC    AL4(PAR1LB5)
PAR1DT5  DC    A(0)
         ORG   PAR1PTS+60
@NM00069 DC    F'0'
         ORG   PAR1PTS+64
PAR2LB1  DC    CL5'TCIR2'
PAR2LB2  DC    CL5'TDSNL'
PAR2LB3  DC    CL5'TPCTQ'
PAR2LB4  DC    CL5'TLCNT'
PAR2LB5  DC    CL5'TLKUP'
         DS    CL3
PAR2PTS  DS    CL64
         ORG   PAR2PTS
@NM00070 DS    CL12
         ORG   @NM00070
@NM00071 DC    B'00001111'
@NM00072 DC    AL1(4-1+16*5-16)
@NM00073 DC    AL1(5)
@NM00074 DC    AL1(11)
@NM00075 DC    AL4(PAR2LB1)
PAR2DT1  DC    A(0)
         ORG   PAR2PTS+12
@NM00076 DS    CL12
         ORG   @NM00076
@NM00077 DC    B'00001111'
@NM00078 DC    AL1(4-1+16*5-16)
@NM00079 DC    AL1(15+8)
@NM00080 DC    AL1(21+8)
@NM00081 DC    AL4(PAR2LB2)
PAR2DT2  DC    A(0)
         ORG   PAR2PTS+24
@NM00082 DS    CL12
         ORG   @NM00082
@NM00083 DC    B'00001111'
@NM00084 DC    AL1(4-1+16*5-16)
@NM00085 DC    AL1(25+8+8)
@NM00086 DC    AL1(31+8+8)
@NM00087 DC    AL4(PAR2LB3)
PAR2DT3  DC    A(0)
         ORG   PAR2PTS+36
@NM00088 DS    CL12
         ORG   @NM00088
@NM00089 DC    B'00001111'
@NM00090 DC    AL1(2-1+16*5-16)
@NM00091 DC    AL1(35+8+8+8)
@NM00092 DC    AL1(41+8+8+8)
@NM00093 DC    AL4(PAR2LB4)
PAR2DT4  DC    A(0)
         ORG   PAR2PTS+48
@NM00094 DS    CL12
         ORG   @NM00094
@NM00095 DC    B'00001111'
@NM00096 DC    AL1(4-1+16*5-16)
@NM00097 DC    AL1(45+8+8+8+8)
@NM00098 DC    AL1(51+8+8+8+8)
@NM00099 DC    AL4(PAR2LB5)
PAR2DT5  DC    A(0)
         ORG   PAR2PTS+60
@NM00100 DC    F'0'
         ORG   PAR2PTS+64
PAR3LB1  DC    CL5'TLOCK'
PAR3LB2  DC    CL5'TCOMF'
PAR3LB3  DC    CL5'TCOML'
PAR3LB4  DC    CL5'TSPLF'
PAR3LB5  DC    CL5'TSPLL'
         DS    CL3
PAR3PTS  DS    CL64
         ORG   PAR3PTS
@NM00101 DS    CL12
         ORG   @NM00101
@NM00102 DC    B'00001111'
@NM00103 DC    AL1(4-1+16*5-16)
@NM00104 DC    AL1(5)
@NM00105 DC    AL1(11)
@NM00106 DC    AL4(PAR3LB1)
PAR3DT1  DC    A(0)
         ORG   PAR3PTS+12
@NM00107 DS    CL12
         ORG   @NM00107
@NM00108 DC    B'00001111'
@NM00109 DC    AL1(4-1+16*5-16)
@NM00110 DC    AL1(15+8)
@NM00111 DC    AL1(21+8)
@NM00112 DC    AL4(PAR3LB2)
PAR3DT2  DC    A(0)
         ORG   PAR3PTS+24
@NM00113 DS    CL12
         ORG   @NM00113
@NM00114 DC    B'00001111'
@NM00115 DC    AL1(4-1+16*5-16)
@NM00116 DC    AL1(25+8+8)
@NM00117 DC    AL1(31+8+8)
@NM00118 DC    AL4(PAR3LB3)
PAR3DT3  DC    A(0)
         ORG   PAR3PTS+36
@NM00119 DS    CL12
         ORG   @NM00119
@NM00120 DC    B'00001111'
@NM00121 DC    AL1(4-1+16*5-16)
@NM00122 DC    AL1(35+8+8+8)
@NM00123 DC    AL1(41+8+8+8)
@NM00124 DC    AL4(PAR3LB4)
PAR3DT4  DC    A(0)
         ORG   PAR3PTS+48
@NM00125 DS    CL12
         ORG   @NM00125
@NM00126 DC    B'00001111'
@NM00127 DC    AL1(4-1+16*5-16)
@NM00128 DC    AL1(45+8+8+8+8)
@NM00129 DC    AL1(51+8+8+8+8)
@NM00130 DC    AL4(PAR3LB5)
PAR3DT5  DC    A(0)
         ORG   PAR3PTS+60
@NM00131 DC    F'0'
         ORG   PAR3PTS+64
PAR4LB1  DC    CL5'TDUPF'
PAR4LB2  DC    CL5'TDUPL'
PAR4LB3  DC    CL5'TLOCF'
PAR4LB4  DC    CL5'TLOCL'
PAR4PTS  DS    CL52
         ORG   PAR4PTS
@NM00132 DS    CL12
         ORG   @NM00132
@NM00133 DC    B'00001111'
@NM00134 DC    AL1(4-1+16*5-16)
@NM00135 DC    AL1(5)
@NM00136 DC    AL1(11)
@NM00137 DC    AL4(PAR4LB1)
PAR4DT1  DC    A(0)
         ORG   PAR4PTS+12
@NM00138 DS    CL12
         ORG   @NM00138
@NM00139 DC    B'00001111'
@NM00140 DC    AL1(4-1+16*5-16)
@NM00141 DC    AL1(15+8)
@NM00142 DC    AL1(21+8)
@NM00143 DC    AL4(PAR4LB2)
PAR4DT2  DC    A(0)
         ORG   PAR4PTS+24
@NM00144 DS    CL12
         ORG   @NM00144
@NM00145 DC    B'00001111'
@NM00146 DC    AL1(4-1+16*5-16)
@NM00147 DC    AL1(25+8+8)
@NM00148 DC    AL1(31+8+8)
@NM00149 DC    AL4(PAR4LB3)
PAR4DT3  DC    A(0)
         ORG   PAR4PTS+36
@NM00150 DS    CL12
         ORG   @NM00150
@NM00151 DC    B'00001111'
@NM00152 DC    AL1(4-1+16*5-16)
@NM00153 DC    AL1(35+8+8+8)
@NM00154 DC    AL1(41+8+8+8)
@NM00155 DC    AL4(PAR4LB4)
PAR4DT4  DC    A(0)
         ORG   PAR4PTS+48
@NM00156 DC    F'0'
         ORG   PAR4PTS+52
PCT1LB1  DC    CL2'ID'
PCT1LB2  DC    CL5'DTYPE'
PCT1LB3  DC    CL4'SMAX'
PCT1LB4  DC    CL5'DTYPX'
PCT1LB5  DC    CL5'CYLSZ'
PCT1LB6  DC    CL4'NEXT'
         DS    CL3
PCT1PTS  DS    CL76
         ORG   PCT1PTS
@NM00157 DS    CL12
         ORG   @NM00157
@NM00158 DC    B'00101111'
@NM00159 DC    AL1(4-1+16*2-16)
@NM00160 DC    AL1(5)
@NM00161 DC    AL1(11)
@NM00162 DC    AL4(PCT1LB1)
PCT1DT1  DC    A(0)
         ORG   PCT1PTS+12
@NM00163 DS    CL12
         ORG   @NM00163
@NM00164 DC    B'00101111'
@NM00165 DC    AL1(6-1+16*5-16)
@NM00166 DC    AL1(15+8)
@NM00167 DC    AL1(21+8)
@NM00168 DC    AL4(PCT1LB2)
PCT1DT2  DC    A(0)
         ORG   PCT1PTS+24
@NM00169 DS    CL12
         ORG   @NM00169
@NM00170 DC    B'00001111'
@NM00171 DC    AL1(2-1+16*4-16)
@NM00172 DC    AL1(25+8+8)
@NM00173 DC    AL1(31+8+8)
@NM00174 DC    AL4(PCT1LB3)
PCT1DT3  DC    A(0)
         ORG   PCT1PTS+36
@NM00175 DS    CL12
         ORG   @NM00175
@NM00176 DC    B'00001111'
@NM00177 DC    AL1(2-1+16*5-16)
@NM00178 DC    AL1(35+8+8+8)
@NM00179 DC    AL1(41+8+8+8)
@NM00180 DC    AL4(PCT1LB4)
PCT1DT4  DC    A(0)
         ORG   PCT1PTS+48
@NM00181 DS    CL12
         ORG   @NM00181
@NM00182 DC    B'00001111'
@NM00183 DC    AL1(2-1+16*5-16)
@NM00184 DC    AL1(45+8+8+8+8)
@NM00185 DC    AL1(51+8+8+8+8)
@NM00186 DC    AL4(PCT1LB5)
PCT1DT5  DC    A(0)
         ORG   PCT1PTS+60
@NM00187 DS    CL12
         ORG   @NM00187
@NM00188 DC    B'00001111'
@NM00189 DC    AL1(4-1+16*4-16)
@NM00190 DC    AL1(55+8+8+8+8+8)
@NM00191 DC    AL1(61+8+8+8+8+8)
@NM00192 DC    AL4(PCT1LB6)
PCT1DT6  DC    A(0)
         ORG   PCT1PTS+72
@NM00193 DC    F'0'
         ORG   PCT1PTS+76
PCT2LB1  DC    CL25'DMASKDPGWTSSECNRQTIMMAXTK'
         DS    CL3
PCT2PTS  DS    CL32
         ORG   PCT2PTS
@NM00194 DS    CL12
         ORG   @NM00194
@NM00195 DC    B'00001111'
@NM00196 DC    AL1(8-1+16*5-16)
@NM00197 DC    AL1(5)
@NM00198 DC    AL1(11)
@NM00199 DC    AL4(PCT2LB1)
PCT2DT1  DC    A(0)
         ORG   PCT2PTS+12
@NM00200 DS    CL4
         ORG   @NM00200
@NM00201 DC    B'00000101'
@NM00202 DC    AL1(2-1+16*5-16)
@NM00203 DC    AL1(41)
@NM00204 DC    AL1(47)
         ORG   PCT2PTS+16
@NM00205 DS    CL4
         ORG   @NM00205
@NM00206 DC    B'00000101'
@NM00207 DC    AL1(2-1+16*5-16)
@NM00208 DC    AL1(59)
@NM00209 DC    AL1(65)
         ORG   PCT2PTS+20
@NM00210 DS    CL4
         ORG   @NM00210
@NM00211 DC    B'00000101'
@NM00212 DC    AL1(4-1+16*5-16)
@NM00213 DC    AL1(77)
@NM00214 DC    AL1(83)
         ORG   PCT2PTS+24
@NM00215 DS    CL4
         ORG   @NM00215
@NM00216 DC    B'00000101'
@NM00217 DC    AL1(2-1+16*5-16)
@NM00218 DC    AL1(95)
@NM00219 DC    AL1(101)
         ORG   PCT2PTS+28
@NM00220 DC    F'0'
         ORG   PCT2PTS+32
PCT3LB1  DC    CL4'MSSB'
PCT3PTS  DS    CL16
         ORG   PCT3PTS
@NM00221 DS    CL12
         ORG   @NM00221
@NM00222 DC    B'00001111'
@NM00223 DC    AL1(2-1+16*4-16)
@NM00224 DC    AL1(5)
@NM00225 DC    AL1(11)
@NM00226 DC    AL4(PCT3LB1)
PCT3DT1  DC    A(0)
         ORG   PCT3PTS+12
@NM00227 DC    F'0'
         ORG   PCT3PTS+16
IOE1LB1  DC    CL3'NXT'
IOE1LB2  DC    CL5'LSIDA'
IOE1LB3  DC    CL3'AIA'
IOE1LB4  DC    CL4'WORK'
         DS    CL1
IOE1PTS  DS    CL52
         ORG   IOE1PTS
@NM00228 DS    CL12
         ORG   @NM00228
@NM00229 DC    B'00001111'
@NM00230 DC    AL1(4-1+16*3-16)
@NM00231 DC    AL1(5)
@NM00232 DC    AL1(11)
@NM00233 DC    AL4(IOE1LB1)
IOE1DT1  DC    A(0)
         ORG   IOE1PTS+12
@NM00234 DS    CL12
         ORG   @NM00234
@NM00235 DC    B'00001111'
@NM00236 DC    AL1(4-1+16*5-16)
@NM00237 DC    AL1(15+8)
@NM00238 DC    AL1(21+8)
@NM00239 DC    AL4(IOE1LB2)
IOE1DT2  DC    A(0)
         ORG   IOE1PTS+24
@NM00240 DS    CL12
         ORG   @NM00240
@NM00241 DC    B'00001111'
@NM00242 DC    AL1(4-1+16*3-16)
@NM00243 DC    AL1(25+8+8)
@NM00244 DC    AL1(31+8+8)
@NM00245 DC    AL4(IOE1LB3)
IOE1DT3  DC    A(0)
         ORG   IOE1PTS+36
@NM00246 DS    CL12
         ORG   @NM00246
@NM00247 DC    B'00001111'
@NM00248 DC    AL1(4-1+16*4-16)
@NM00249 DC    AL1(35+8+8+8)
@NM00250 DC    AL1(41+8+8+8)
@NM00251 DC    AL4(IOE1LB4)
IOE1DT4  DC    A(0)
         ORG   IOE1PTS+48
@NM00252 DC    F'0'
         ORG   IOE1PTS+52
PAR5LB1  DC    CL5'EPARE'
PAR5LB2  DC    CL5'ELKUP'
PAR5LB3  DC    CL5'ETYPE'
PAR5LB4  DC    CL5'EFLG1'
PAR5LB5  DC    CL3'ENN'
PAR5LB6  DC    CL5'EIOEQ'
PAR5PTS  DS    CL76
         ORG   PAR5PTS
@NM00253 DS    CL12
         ORG   @NM00253
@NM00254 DC    B'00001111'
@NM00255 DC    AL1(4-1+16*5-16)
@NM00256 DC    AL1(5)
@NM00257 DC    AL1(11)
@NM00258 DC    AL4(PAR5LB1)
PAR5DT1  DC    A(0)
         ORG   PAR5PTS+12
@NM00259 DS    CL12
         ORG   @NM00259
@NM00260 DC    B'00001111'
@NM00261 DC    AL1(4-1+16*5-16)
@NM00262 DC    AL1(15+8)
@NM00263 DC    AL1(21+8)
@NM00264 DC    AL4(PAR5LB2)
PAR5DT2  DC    A(0)
         ORG   PAR5PTS+24
@NM00265 DS    CL12
         ORG   @NM00265
@NM00266 DC    B'00001111'
@NM00267 DC    AL1(1-1+16*5-16)
@NM00268 DC    AL1(25+8+8)
@NM00269 DC    AL1(31+8+8)
@NM00270 DC    AL4(PAR5LB3)
PAR5DT3  DC    A(0)
         ORG   PAR5PTS+36
@NM00271 DS    CL12
         ORG   @NM00271
@NM00272 DC    B'00001111'
@NM00273 DC    AL1(1-1+16*5-16)
@NM00274 DC    AL1(35+8+8+8)
@NM00275 DC    AL1(41+8+8+8)
@NM00276 DC    AL4(PAR5LB4)
PAR5DT4  DC    A(0)
         ORG   PAR5PTS+48
@NM00277 DS    CL12
         ORG   @NM00277
@NM00278 DC    B'00001111'
@NM00279 DC    AL1(2-1+16*3-16)
@NM00280 DC    AL1(45+8+8+8+8)
@NM00281 DC    AL1(51+8+8+8+8)
@NM00282 DC    AL4(PAR5LB5)
PAR5DT5  DC    A(0)
         ORG   PAR5PTS+60
@NM00283 DS    CL12
         ORG   @NM00283
@NM00284 DC    B'00001111'
@NM00285 DC    AL1(4-1+16*5-16)
@NM00286 DC    AL1(55+8+8+8+8+8)
@NM00287 DC    AL1(61+8+8+8+8+8)
@NM00288 DC    AL4(PAR5LB6)
PAR5DT6  DC    A(0)
         ORG   PAR5PTS+72
@NM00289 DC    F'0'
         ORG   PAR5PTS+76
PAR6LB1  DC    CL5'ESZSL'
PAR6LB2  DC    CL5'ESLTA'
PAR6LB3  DC    CL5'ERRCT'
PAR6LB4  DC    CL5'EIORB'
PAR6LB5  DC    CL5'EPATP'
PAR6LB6  DC    CL5'EPCTP'
         DS    CL2
PAR6PTS  DS    CL76
         ORG   PAR6PTS
@NM00290 DS    CL12
         ORG   @NM00290
@NM00291 DC    B'00001111'
@NM00292 DC    AL1(4-1+16*5-16)
@NM00293 DC    AL1(5)
@NM00294 DC    AL1(11)
@NM00295 DC    AL4(PAR6LB1)
PAR6DT1  DC    A(0)
         ORG   PAR6PTS+12
@NM00296 DS    CL12
         ORG   @NM00296
@NM00297 DC    B'00001111'
@NM00298 DC    AL1(4-1+16*5-16)
@NM00299 DC    AL1(15+8)
@NM00300 DC    AL1(21+8)
@NM00301 DC    AL4(PAR6LB2)
PAR6DT2  DC    A(0)
         ORG   PAR6PTS+24
@NM00302 DS    CL12
         ORG   @NM00302
@NM00303 DC    B'00001111'
@NM00304 DC    AL1(4-1+16*5-16)
@NM00305 DC    AL1(25+8+8)
@NM00306 DC    AL1(31+8+8)
@NM00307 DC    AL4(PAR6LB3)
PAR6DT3  DC    A(0)
         ORG   PAR6PTS+36
@NM00308 DS    CL12
         ORG   @NM00308
@NM00309 DC    B'00001111'
@NM00310 DC    AL1(4-1+16*5-16)
@NM00311 DC    AL1(35+8+8+8)
@NM00312 DC    AL1(41+8+8+8)
@NM00313 DC    AL4(PAR6LB4)
PAR6DT4  DC    A(0)
         ORG   PAR6PTS+48
@NM00314 DS    CL12
         ORG   @NM00314
@NM00315 DC    B'00001111'
@NM00316 DC    AL1(4-1+16*5-16)
@NM00317 DC    AL1(45+8+8+8+8)
@NM00318 DC    AL1(51+8+8+8+8)
@NM00319 DC    AL4(PAR6LB5)
PAR6DT5  DC    A(0)
         ORG   PAR6PTS+60
@NM00320 DS    CL12
         ORG   @NM00320
@NM00321 DC    B'00001111'
@NM00322 DC    AL1(4-1+16*5-16)
@NM00323 DC    AL1(55+8+8+8+8+8)
@NM00324 DC    AL1(61+8+8+8+8+8)
@NM00325 DC    AL4(PAR6LB6)
PAR6DT6  DC    A(0)
         ORG   PAR6PTS+72
@NM00326 DC    F'0'
         ORG   PAR6PTS+76
PAR7LB1  DC    CL5'EEDBP'
PAR7LB2  DC    CL5'EUCBP'
PAR7LB3  DC    CL5'ENODE'
PAR7LB4  DC    CL5'EWTQE'
PAR7LB5  DC    CL5'ERQTM'
PAR7LB6  DC    CL5'ELCYL'
         DS    CL2
PAR7PTS  DS    CL76
         ORG   PAR7PTS
@NM00327 DS    CL12
         ORG   @NM00327
@NM00328 DC    B'00001111'
@NM00329 DC    AL1(4-1+16*5-16)
@NM00330 DC    AL1(5)
@NM00331 DC    AL1(11)
@NM00332 DC    AL4(PAR7LB1)
PAR7DT1  DC    A(0)
         ORG   PAR7PTS+12
@NM00333 DS    CL12
         ORG   @NM00333
@NM00334 DC    B'00001111'
@NM00335 DC    AL1(4-1+16*5-16)
@NM00336 DC    AL1(15+8)
@NM00337 DC    AL1(21+8)
@NM00338 DC    AL4(PAR7LB2)
PAR7DT2  DC    A(0)
         ORG   PAR7PTS+24
@NM00339 DS    CL12
         ORG   @NM00339
@NM00340 DC    B'00001111'
@NM00341 DC    AL1(4-1+16*5-16)
@NM00342 DC    AL1(25+8+8)
@NM00343 DC    AL1(31+8+8)
@NM00344 DC    AL4(PAR7LB3)
PAR7DT3  DC    A(0)
         ORG   PAR7PTS+36
@NM00345 DS    CL12
         ORG   @NM00345
@NM00346 DC    B'00001111'
@NM00347 DC    AL1(4-1+16*5-16)
@NM00348 DC    AL1(35+8+8+8)
@NM00349 DC    AL1(41+8+8+8)
@NM00350 DC    AL4(PAR7LB4)
PAR7DT4  DC    A(0)
         ORG   PAR7PTS+48
@NM00351 DS    CL12
         ORG   @NM00351
@NM00352 DC    B'00001111'
@NM00353 DC    AL1(4-1+16*5-16)
@NM00354 DC    AL1(45+8+8+8+8)
@NM00355 DC    AL1(51+8+8+8+8)
@NM00356 DC    AL4(PAR7LB5)
PAR7DT5  DC    A(0)
         ORG   PAR7PTS+60
@NM00357 DS    CL12
         ORG   @NM00357
@NM00358 DC    B'00001111'
@NM00359 DC    AL1(2-1+16*5-16)
@NM00360 DC    AL1(55+8+8+8+8+8)
@NM00361 DC    AL1(61+8+8+8+8+8)
@NM00362 DC    AL4(PAR7LB6)
PAR7DT6  DC    A(0)
         ORG   PAR7PTS+72
@NM00363 DC    F'0'
         ORG   PAR7PTS+76
PAT1LB1  DC    CL5'IDENT'
PAT1LB2  DC    CL4'PART'
PAT1LB3  DC    CL5'CYLNO'
PAT1LB4  DC    CL5'CYLSZ'
PAT1LB5  DC    CL5'CYLMW'
PAT1LB6  DC    CL4'RSV1'
PAT1PTS  DS    CL76
         ORG   PAT1PTS
@NM00364 DS    CL12
         ORG   @NM00364
@NM00365 DC    B'00101111'
@NM00366 DC    AL1(4-1+16*5-16)
@NM00367 DC    AL1(5)
@NM00368 DC    AL1(11)
@NM00369 DC    AL4(PAT1LB1)
PAT1DT1  DC    A(0)
         ORG   PAT1PTS+12
@NM00370 DS    CL12
         ORG   @NM00370
@NM00371 DC    B'00001111'
@NM00372 DC    AL1(4-1+16*4-16)
@NM00373 DC    AL1(15+8)
@NM00374 DC    AL1(21+8)
@NM00375 DC    AL4(PAT1LB2)
PAT1DT2  DC    A(0)
         ORG   PAT1PTS+24
@NM00376 DS    CL12
         ORG   @NM00376
@NM00377 DC    B'00001111'
@NM00378 DC    AL1(2-1+16*5-16)
@NM00379 DC    AL1(25+8+8)
@NM00380 DC    AL1(31+8+8)
@NM00381 DC    AL4(PAT1LB3)
PAT1DT3  DC    A(0)
         ORG   PAT1PTS+36
@NM00382 DS    CL12
         ORG   @NM00382
@NM00383 DC    B'00001111'
@NM00384 DC    AL1(2-1+16*5-16)
@NM00385 DC    AL1(35+8+8+8)
@NM00386 DC    AL1(41+8+8+8)
@NM00387 DC    AL4(PAT1LB4)
PAT1DT4  DC    A(0)
         ORG   PAT1PTS+48
@NM00388 DS    CL12
         ORG   @NM00388
@NM00389 DC    B'00001111'
@NM00390 DC    AL1(2-1+16*5-16)
@NM00391 DC    AL1(45+8+8+8+8)
@NM00392 DC    AL1(51+8+8+8+8)
@NM00393 DC    AL4(PAT1LB5)
PAT1DT5  DC    A(0)
         ORG   PAT1PTS+60
@NM00394 DS    CL12
         ORG   @NM00394
@NM00395 DC    B'00001111'
@NM00396 DC    AL1(2-1+16*4-16)
@NM00397 DC    AL1(55+8+8+8+8+8)
@NM00398 DC    AL1(61+8+8+8+8+8)
@NM00399 DC    AL4(PAT1LB6)
PAT1DT6  DC    A(0)
         ORG   PAT1PTS+72
@NM00400 DC    F'0'
         ORG   PAT1PTS+76
PAT2PTS  DS    CL68
         ORG   PAT2PTS
@NM00401 DS    CL8
         ORG   @NM00401
@NM00402 DC    B'00001100'
         ORG   @NM00402
@NM00403 DS    BL1
@NM00404 EQU   @NM00402+0
         ORG   @NM00401+1
@NM00405 DC    AL1(16*0+4-1)
@NM00406 DC    AL1(0)
@NM00407 DC    AL1(5)
PAT2DT1  DC    A(0)
         ORG   PAT2PTS+8
@NM00408 DS    CL8
         ORG   @NM00408
@NM00409 DC    B'00001100'
         ORG   @NM00409
@NM00410 DS    BL1
@NM00411 EQU   @NM00409+0
         ORG   @NM00408+1
@NM00412 DC    AL1(16*0+4-1)
@NM00413 DC    AL1(0)
@NM00414 DC    AL1(17)
PAT2DT2  DC    A(0)
         ORG   PAT2PTS+16
@NM00415 DS    CL8
         ORG   @NM00415
@NM00416 DC    B'00001100'
         ORG   @NM00416
@NM00417 DS    BL1
@NM00418 EQU   @NM00416+0
         ORG   @NM00415+1
@NM00419 DC    AL1(16*0+4-1)
@NM00420 DC    AL1(0)
@NM00421 DC    AL1(29)
PAT2DT3  DC    A(0)
         ORG   PAT2PTS+24
@NM00422 DS    CL8
         ORG   @NM00422
@NM00423 DC    B'00001100'
         ORG   @NM00423
@NM00424 DS    BL1
@NM00425 EQU   @NM00423+0
         ORG   @NM00422+1
@NM00426 DC    AL1(16*0+4-1)
@NM00427 DC    AL1(0)
@NM00428 DC    AL1(41)
PAT2DT4  DC    A(0)
         ORG   PAT2PTS+32
@NM00429 DS    CL8
         ORG   @NM00429
@NM00430 DC    B'00001100'
         ORG   @NM00430
@NM00431 DS    BL1
@NM00432 EQU   @NM00430+0
         ORG   @NM00429+1
@NM00433 DC    AL1(16*0+4-1)
@NM00434 DC    AL1(0)
@NM00435 DC    AL1(53)
PAT2DT5  DC    A(0)
         ORG   PAT2PTS+40
@NM00436 DS    CL8
         ORG   @NM00436
@NM00437 DC    B'00001100'
         ORG   @NM00437
@NM00438 DS    BL1
@NM00439 EQU   @NM00437+0
         ORG   @NM00436+1
@NM00440 DC    AL1(16*0+4-1)
@NM00441 DC    AL1(0)
@NM00442 DC    AL1(65)
PAT2DT6  DC    A(0)
         ORG   PAT2PTS+48
@NM00443 DS    CL8
         ORG   @NM00443
@NM00444 DC    B'00001100'
         ORG   @NM00444
@NM00445 DS    BL1
@NM00446 EQU   @NM00444+0
         ORG   @NM00443+1
@NM00447 DC    AL1(16*0+4-1)
@NM00448 DC    AL1(0)
@NM00449 DC    AL1(77)
PAT2DT7  DC    A(0)
         ORG   PAT2PTS+56
@NM00450 DS    CL8
         ORG   @NM00450
@NM00451 DC    B'00001100'
         ORG   @NM00451
@NM00452 DS    BL1
@NM00453 EQU   @NM00451+0
         ORG   @NM00450+1
@NM00454 DC    AL1(16*0+4-1)
@NM00455 DC    AL1(0)
@NM00456 DC    AL1(89)
PAT2DT8  DC    A(0)
         ORG   PAT2PTS+64
@NM00457 DC    F'0'
         ORG   PAT2PTS+68
FMTPATCH DC    50F'0'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
REM      EQU   @12
SAVPTR   EQU   @03
PPTRNPTR EQU   @02
MAPWRDS  EQU   @03
CYLS     EQU   @12
MAPPTR   EQU   @03
MAXCTR   EQU   @12
CUMPTERC EQU   @11
CUMIOERC EQU   @03
CUMPCTRC EQU   @03
FORMRC   EQU   @02
DSNLPARM EQU   @08
IORBPTR  EQU   @03
ASMVTPTR EQU   @12
ABDPLPTR EQU   @07
AIAPTR   EQU   @03
R0       EQU   @00
R1       EQU   @01
R2       EQU   @02
R3       EQU   @03
SAVREG   EQU   @13
R14      EQU   @14
R15      EQU   @15
RETREG   EQU   @15
R10      EQU   @10
R11      EQU   @11
R12      EQU   @12
R13      EQU   @13
R4       EQU   @04
R5       EQU   @05
R6       EQU   @06
R7       EQU   @07
R8       EQU   @08
R9       EQU   @09
AIA      EQU   0
AIAFLG1  EQU   AIA+9
AIAFLG2  EQU   AIA+10
AIAFLG3  EQU   AIA+11
AIANXAIA EQU   AIA+12
AIAID    EQU   AIA+16
AIALPID  EQU   AIAID
AIALGID  EQU   AIALPID
AIALSID  EQU   AIALGID
AIASSID  EQU   AIALSID+1
AIARPN   EQU   AIALPID+4
AIALSID2 EQU   AIARPN
AIALPMEP EQU   AIALSID2
AIAGRPSZ EQU   AIA+24
AIALGE   EQU   AIAGRPSZ
ABDPL    EQU   0
ADPLFLAG EQU   ABDPL+7
ADPLBUF  EQU   ABDPL+8
ADPLPRNT EQU   ABDPL+12
ADPLMEMA EQU   ABDPL+20
ADPLFRMT EQU   ABDPL+24
ASMVT    EQU   0
ASMFLAG1 EQU   ASMVT
ASMFLAG2 EQU   ASMVT+1
ASMPART  EQU   ASMVT+8
ASMSTAGQ EQU   ASMVT+32
ASMPCCWQ EQU   ASMVT+64
ASMLSAI  EQU   ASMVT+144
ASMGOSQS EQU   ASMVT+152
ASMWKSA1 EQU   ASMVT+368
ASMWKSA2 EQU   ASMVT+448
ASMWKSA3 EQU   ASMVT+528
ASMWKSA4 EQU   ASMVT+608
ASMWKSA5 EQU   ASMVT+688
ASMPOOLS EQU   0
ASMCPAVQ EQU   ASMPOOLS+8
ASMCPRSQ EQU   ASMPOOLS+16
IOE      EQU   0
IOENXT   EQU   IOE
IOELSIDA EQU   IOE+4
IOEAIA   EQU   IOE+8
IOEWORK  EQU   IOE+12
IORB     EQU   0
IORFLGS  EQU   IORB+3
IORAPND  EQU   IORFLGS
IORPCCW  EQU   IORB+8
PART     EQU   0
PARTHDR  EQU   PART
PARTIDEN EQU   PARTHDR
PARTSIZE EQU   PARTHDR+4
PARTEUSE EQU   PARTHDR+8
PARTAIAE EQU   PARTHDR+12
PARTCIR1 EQU   PARTHDR+16
PARTCIR2 EQU   PARTHDR+20
PARTTPAR EQU   PARTHDR+24
PARTDSNL EQU   PARTTPAR
PARTPCTQ EQU   PARTHDR+28
PARTLCNT EQU   PARTHDR+32
PARTLKUP EQU   PARTHDR+40
PARTLOCK EQU   PARTHDR+44
PARTCOMQ EQU   PARTHDR+48
PARTCOMF EQU   PARTCOMQ
PARTCOML EQU   PARTCOMQ+4
PARTSPLQ EQU   PARTHDR+56
PARTSPLF EQU   PARTSPLQ
PARTSPLL EQU   PARTSPLQ+4
PARTDUPQ EQU   PARTHDR+64
PARTDUPF EQU   PARTDUPQ
PARTDUPL EQU   PARTDUPQ+4
PARTLOCQ EQU   PARTHDR+72
PARTLOCF EQU   PARTLOCQ
PARTLOCL EQU   PARTLOCQ+4
PARTENTS EQU   PART+80
PARTENT  EQU   0
PAREPARE EQU   PARTENT
PARELKUP EQU   PARTENT+4
PARELKFL EQU   PARELKUP
PARETYPE EQU   PARTENT+8
PAREFLG1 EQU   PARTENT+9
PARENN   EQU   PARTENT+10
PAREIOEQ EQU   PARTENT+12
PARESZSL EQU   PARTENT+16
PARESLTA EQU   PARTENT+20
PARERRCT EQU   PARTENT+24
PAREIORB EQU   PARTENT+28
PAREPATP EQU   PARTENT+32
PAREPCTP EQU   PARTENT+36
PAREEDBP EQU   PARTENT+40
PAREUCBP EQU   PARTENT+44
PARENODE EQU   PARTENT+48
PAREWTQE EQU   PARTENT+52
PARERQTM EQU   PARTENT+56
PARELCYL EQU   PARTENT+60
PAT      EQU   0
PATHDR   EQU   PAT
PATIDENT EQU   PATHDR
PATPART  EQU   PATHDR+4
PATCYLNO EQU   PATHDR+8
PATCYLSZ EQU   PATHDR+10
PATCYLMW EQU   PATHDR+12
PATRSV1  EQU   PATHDR+14
PATMAP   EQU   PAT+16
PATCYL   EQU   0
PCCW     EQU   0
PCCWFLGS EQU   PCCW+2
PCCWCHHR EQU   PCCW+16
PCCWSEEK EQU   PCCW+24
PCCWSSEC EQU   PCCW+32
PCCWSRCH EQU   PCCW+40
PCCWTIC  EQU   PCCW+48
PCCWRW   EQU   PCCW+56
PCCWNOP  EQU   PCCW+64
PCT      EQU   0
PCTID    EQU   PCT
PCTDTYPE EQU   PCT+4
PCTSMAX  EQU   PCT+10
PCTDTYPX EQU   PCT+12
PCTCYLSZ EQU   PCT+14
PCTNEXT  EQU   PCT+16
PCTDMASK EQU   PCT+20
PCTDPGWT EQU   PCT+28
PCTSSECN EQU   PCT+30
PCTRQTIM EQU   PCT+32
PCTMAXTK EQU   PCT+36
PCTMSSB  EQU   PCT+38
PCTABLE  EQU   PCT+40
PCTSECT  EQU   PCTABLE
PCTSLTNM EQU   PCTSECT
ACCESS   EQU   0
FORMAT   EQU   0
PRINT    EQU   0
BUFFER   EQU   0
ANCHTXT  EQU   BUFFER+17
ANCHNAME EQU   BUFFER+29
PTTRNS   EQU   0
PTTSTOP  EQU   PTTRNS
PTTFLGS  EQU   PTTSTOP
PTTLBPTR EQU   PTTRNS+4
PTTDTPTR EQU   PTTRNS+8
CURRENT  EQU   0
DSNAME   EQU   0
PATCYLMP EQU   0
ASM1WKSV EQU   ASMWKSA1
ASM1RGSV EQU   ASM1WKSV
ASM1WRKA EQU   ASM1WKSV+60
ASM2WKSV EQU   ASMWKSA2
ASM2WRKA EQU   ASM2WKSV+52
ASM2FLGS EQU   ASM2WRKA+12
ASM3WKSV EQU   ASMWKSA3
ASM4WKSV EQU   ASMWKSA4
ASM4RGSV EQU   ASM4WKSV
ASM5WKSV EQU   ASMWKSA5
ASM5RGSV EQU   ASM5WKSV
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
ASM5FLGS EQU   ASM5WKSV+64
ASM5AIA  EQU   ASM5WKSV+60
ASM5GCTR EQU   ASM5WKSV+56
ASM5SR14 EQU   ASM5WKSV+52
@NM00007 EQU   ASM5RGSV+4
ASM5RG2  EQU   ASM5RGSV
@NM00006 EQU   ASM4RGSV+4
ASM4RG2  EQU   ASM4RGSV
ASM3SR13 EQU   ASM3WKSV+28
ASM3R14B EQU   ASM3WKSV+24
ASM3R14A EQU   ASM3WKSV+20
ASM3GRPA EQU   ASM3WKSV+16
ASM3TMPA EQU   ASM3WKSV+12
ASM3PIOP EQU   ASM3WKSV+8
ASM3GENQ EQU   ASM3WKSV+4
ASM3SWPQ EQU   ASM3WKSV
ASM2SR14 EQU   ASM2WRKA+16
@NM00005 EQU   ASM2WRKA+13
ASM2WFLG EQU   ASM2FLGS
ASM2RFLG EQU   ASM2FLGS
ASM2DUPQ EQU   ASM2WRKA+8
ASM2CAQ  EQU   ASM2WRKA+4
ASM2PAQ  EQU   ASM2WRKA
ASM2RGSV EQU   ASM2WKSV
ASM1NXTA EQU   ASM1WRKA+4
ASM1ASCB EQU   ASM1WRKA
ASM1RG15 EQU   ASM1RGSV+56
@NM00004 EQU   ASM1RGSV+4
ASM1RG1  EQU   ASM1RGSV
PTTDTOFF EQU   PTTSTOP+3
PTTLBOFF EQU   PTTSTOP+2
PTTDTLGH EQU   PTTSTOP+1
PTTLBLGH EQU   PTTSTOP+1
PTTFLBBF EQU   PTTFLGS
PTTFLBLP EQU   PTTFLGS
PTTFDTBF EQU   PTTFLGS
PTTFDATP EQU   PTTFLGS
PTTFSTR  EQU   PTTFLGS
PTTFASIS EQU   PTTFLGS
@NM00022 EQU   PTTFLGS
@NM00021 EQU   BUFFER+28
@NM00020 EQU   BUFFER+8
@NM00019 EQU   BUFFER
PCTTRBA  EQU   PCTSECT+2
PCTSECNM EQU   PCTSECT+1
PCTSLOT  EQU   PCTSLTNM
PCTFOVFL EQU   PCTSLTNM
@NM00018 EQU   PCCW+72
PCCWNCT  EQU   PCCWNOP+6
PCCWNFG  EQU   PCCWNOP+4
PCCWNAD  EQU   PCCWNOP+1
PCCWN    EQU   PCCWNOP
PCCWCNT  EQU   PCCWRW+6
PCCWRWFG EQU   PCCWRW+4
PCCWADDR EQU   PCCWRW+1
PCCWRDWT EQU   PCCWRW
PCCWTCT  EQU   PCCWTIC+6
PCCWTFG  EQU   PCCWTIC+4
PCCWTAD  EQU   PCCWTIC+1
PCCWT    EQU   PCCWTIC
PCCWSICT EQU   PCCWSRCH+6
PCCWSIFG EQU   PCCWSRCH+4
PCCWSIAD EQU   PCCWSRCH+1
PCCWSIDE EQU   PCCWSRCH
PCCWSSCT EQU   PCCWSSEC+6
PCCWSSFG EQU   PCCWSSEC+4
PCCWSSAD EQU   PCCWSSEC+1
PCCWSS   EQU   PCCWSSEC
PCCWSKCT EQU   PCCWSEEK+6
PCCWSKFG EQU   PCCWSEEK+4
PCCWSKAD EQU   PCCWSEEK+1
PCCWSK   EQU   PCCWSEEK
PCCWR    EQU   PCCWCHHR+7
PCCWHH   EQU   PCCWCHHR+5
PCCWCC   EQU   PCCWCHHR+3
PCCWBB   EQU   PCCWCHHR+1
PCCWM    EQU   PCCWCHHR
PCCWIORB EQU   PCCW+12
PCCWAIA  EQU   PCCW+8
PCCWPCCW EQU   PCCW+4
@NM00017 EQU   PCCW+3
@NM00016 EQU   PCCWFLGS
PCCWFERR EQU   PCCWFLGS
PCCWSECT EQU   PCCW+1
PCCWID   EQU   PCCW
PATCYLS  EQU   PATMAP
@NM00015 EQU   PARTENT+62
@NM00014 EQU   PAREFLG1
PAREINCP EQU   PAREFLG1
PAREDSBD EQU   PAREFLG1
PARENUSE EQU   PAREFLG1
@NM00013 EQU   PARETYPE
PARELOCL EQU   PARETYPE
PAREDPLX EQU   PARETYPE
PARECOMM EQU   PARETYPE
PAREPLPA EQU   PARETYPE
PARECPCT EQU   PARELKUP+2
PAREIORN EQU   PARELKUP+1
@NM00012 EQU   PARELKFL
PAREFSIP EQU   PARELKFL
@NM00011 EQU   PARTHDR+34
@NM00010 EQU   IORB+40
IORRSV   EQU   IORB+36
IORPARTE EQU   IORB+32
IORTSMP  EQU   IORB+24
IORERR   EQU   IORB+20
IORSAVE  EQU   IORB+16
IORIOSB  EQU   IORB+12
IORSCCW  EQU   IORPCCW
IORIORB  EQU   IORB+4
IORFAE   EQU   IORAPND
IORFNE   EQU   IORAPND
IORFDI   EQU   IORAPND
IORSWAP  EQU   IORFLGS
@NM00009 EQU   IORFLGS
IORFRPS  EQU   IORFLGS
IORFUSE  EQU   IORFLGS
IORRQSZ  EQU   IORB+2
IORNUM   EQU   IORB+1
IORID    EQU   IORB
@NM00008 EQU   IOE+16
IOEBKPTR EQU   IOEWORK
IOENXTGT EQU   IOELSIDA
IOENXTLE EQU   IOENXT
ASMCPRES EQU   ASMCPRSQ+4
ASMCPTAK EQU   ASMCPRSQ
ASMCPCNT EQU   ASMCPAVQ+4
ASMCPAVL EQU   ASMCPAVQ
ASMCPEXT EQU   ASMPOOLS+6
ASMCPSIZ EQU   ASMPOOLS+4
ASMCPID  EQU   ASMPOOLS
ASMRSV12 EQU   ASMVT+1000
ASMSAVE  EQU   ASMVT+928
ASMWKSA7 EQU   ASMVT+848
ASMWKSA6 EQU   ASMVT+768
ASMACEPC EQU   ASMVT+344
ASMSWKPC EQU   ASMVT+328
ASMBWKPC EQU   ASMVT+312
ASMIOEPC EQU   ASMVT+296
ASMRSV10 EQU   ASMVT+280
ASMPVACE EQU   ASMVT+276
ASMPIOFR EQU   ASMVT+272
ASMPVACQ EQU   ASMVT+268
ASMPMSGS EQU   ASMVT+264
ASMPMSG0 EQU   ASMVT+260
ASMPFRLG EQU   ASMVT+256
ASMPRLG  EQU   ASMVT+252
ASMPACT  EQU   ASMVT+248
ASMPSAV  EQU   ASMVT+244
ASMPCMP  EQU   ASMVT+240
ASMPCMPA EQU   ASMVT+236
ASMPCMPN EQU   ASMVT+232
ASMPCMPD EQU   ASMVT+228
ASMPEX   EQU   ASMVT+224
ASMVRMTR EQU   ASMVT+220
ASMPSRBC EQU   ASMVT+216
ASMPSRMT EQU   ASMVT+212
ASMPSWPD EQU   ASMVT+208
ASMPTM   EQU   ASMVT+204
ASMPFRSW EQU   ASMVT+200
ASMPFRSL EQU   ASMVT+196
ASMPQIOE EQU   ASMVT+192
ASMRSV8  EQU   ASMVT+184
ASMTASCB EQU   ASMVT+180
ASMRLGWQ EQU   ASMVT+176
ASMRLGRQ EQU   ASMVT+172
ASMTMECB EQU   ASMVT+168
ASMTCBPT EQU   ASMVT+164
ASMREQCT EQU   ASMVT+160
ASMGOSWK EQU   ASMGOSQS+4
ASMGOSWT EQU   ASMGOSQS
ASMLSAIH EQU   ASMLSAI+4
ASMLSAIL EQU   ASMLSAI
ASMCINV  EQU   ASMVT+140
ASMSTGXA EQU   ASMVT+136
ASMLGVT  EQU   ASMVT+132
ASMSLOTV EQU   ASMVT+128
ASMERRS  EQU   ASMVT+124
ASMNVSC  EQU   ASMVT+120
ASMVSC   EQU   ASMVT+116
ASMSLOTS EQU   ASMVT+112
ASMBKSLT EQU   ASMVT+108
ASMRSV7  EQU   ASMVT+92
ASMPSRB  EQU   ASMVT+88
ASMSRBCT EQU   ASMVT+84
ASMIOCNT EQU   ASMVT+80
ASMBURST EQU   ASMVT+76
ASMPCCWN EQU   ASMVT+72
ASMPCCWC EQU   ASMPCCWQ+4
ASMPCCWA EQU   ASMPCCWQ
ASMRSV6  EQU   ASMVT+48
ASMIORQC EQU   ASMVT+44
ASMIORQR EQU   ASMVT+40
ASMSTAGL EQU   ASMSTAGQ+4
ASMSTAGF EQU   ASMSTAGQ
ASMRSV5  EQU   ASMVT+28
ASMMSGBF EQU   ASMVT+24
ASMEREC  EQU   ASMVT+20
ASMTRPAG EQU   ASMVT+16
ASMGOS   EQU   ASMVT+12
ASMSART  EQU   ASMVT+4
ASMRSV4  EQU   ASMVT+2
ASMWARM  EQU   ASMFLAG2
ASMQUICK EQU   ASMFLAG2
ASMNOTPT EQU   ASMFLAG2
ASMNOTMR EQU   ASMFLAG2
ASMNOSAV EQU   ASMFLAG2
ASMCALLQ EQU   ASMFLAG2
ASMPLPAS EQU   ASMFLAG1
ASMCOMMF EQU   ASMFLAG1
ASMPLPAF EQU   ASMFLAG1
ASMNODPX EQU   ASMFLAG1
ASMRSV1  EQU   ASMFLAG1
ASMNOLCL EQU   ASMFLAG1
ASMNOCWQ EQU   ASMFLAG1
ASMDUPLX EQU   ASMFLAG1
ADPLEXT  EQU   ABDPL+52
ADPLFMT2 EQU   ABDPL+48
ADPLFMT1 EQU   ABDPL+44
ADPLCOM4 EQU   ABDPL+40
ADPLCOM3 EQU   ABDPL+36
ADPLCOM2 EQU   ABDPL+32
ADPLCOM1 EQU   ABDPL+28
ADPLCVT  EQU   ABDPL+16
@NM00003 EQU   ADPLFLAG
ADPLSYTM EQU   ADPLFLAG
ADPLSNPR EQU   ADPLFLAG
ADPLSBPL EQU   ABDPL+6
ADPLASID EQU   ABDPL+4
ADPLTCB  EQU   ABDPL
AIADPXCT EQU   AIALGE
AIACEPTR EQU   AIALPMEP
AIASLOT  EQU   AIASSID+1
@NM00002 EQU   AIASSID
@NM00001 EQU   AIALSID
AIARCSN  EQU   AIANXAIA+2
AIACYL   EQU   AIANXAIA
AIARSV9  EQU   AIAFLG3
AIARSV8  EQU   AIAFLG3
AIARSV7  EQU   AIAFLG3
AIALPMEC EQU   AIAFLG3
AIARSV6  EQU   AIAFLG3
AIATRPSP EQU   AIAFLG3
AIAPRINO EQU   AIAFLG3
AIARSV5  EQU   AIAFLG3
AIABADID EQU   AIAFLG2
AIAERROR EQU   AIAFLG2
AIASECER EQU   AIAFLG2
AIAPRIER EQU   AIAFLG2
AIARSV4  EQU   AIAFLG2
AIAIORTY EQU   AIAFLG2
AIATERMR EQU   AIAFLG2
AIAFRAUX EQU   AIAFLG2
AIARSV1  EQU   AIAFLG1
AIASWPFX EQU   AIAFLG1
AIAPAGDS EQU   AIAFLG1
AIALSQA  EQU   AIAFLG1
AIADUPLX EQU   AIAFLG1
AIAVIO   EQU   AIAFLG1
AIAPRIV  EQU   AIAFLG1
AIAWRITE EQU   AIAFLG1
AIAOP    EQU   AIA+8
AIABQPA  EQU   AIA+4
AIAFQPA  EQU   AIA
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00063 EQU   @RC00057
@RC00072 EQU   @RC00069
@RC00199 EQU   @RC00072
@ENDDATA EQU   *
         END   ILRFMTPG,(C'PLS1803',0701,76170)
