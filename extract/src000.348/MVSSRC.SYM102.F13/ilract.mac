         TITLE 'ILRACT, ACTIVATE A LOGICAL GROUP                       *
                        '
ILRACT   CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'ILRACT    76.087'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @10,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@10                                         0001
*/*                    END OF CVT MACRO                              */
*                                                                  0037
         EJECT
*                                                                  0037
*/*ILRACT: CHART (AREF)                                              */
*/*HEADER                                                          0037
*/*            ILRACT - ACTIVATE GROUP OPERATOR                      */
*/*ILRACT: E ENTRY                                                   */
*/*         P  SAVE CALLER'S REGISTERS                               */
*/*         S  ILRGMA: GET A WORKAREA FROM POOL                      */
*/*         D  (YES,%ACT01,NO,) ZERO RETURN CODE?                    */
*/*         P  SET RETURN CODE TO 28                                 */
*/*         R  RETURN TO CALLER                                      */
*/*%ACT01:  P  SAVE POINTER TO WORKAREA IN REGISTER 9                */
*/*         P  SETUP ENTRY REGISTERS                                 */
*/*         P  GET PTR TO EPATH FROM INPUT REG 4                     */
*/*         P  RECORD ENTRY INFORMATION IN EPATH                     */
*/*         P  RECORD PTR TO WORKAREA IN EPATH                       */
*/*         P  GET PTR TO ACE FROM INPUT REG 1                       */
*/*         P  GET PTR TO ASMVT FROM INPUT REG 3                     */
*/*         P  GET PTR TO LGE FROM ACE                               */
*/*         P  STORE PTR TO EPATH IN VSAMI PARM LIST                 */
*/*         P  STORE PTR TO 'S' SYMBOL IN VSAMI PARM LIST            */
*/*         P  SET REQUEST OP-CODE TO 01                             */
*/*         S  ILRVSAMI: GET                                         */
*/*         D  (YES,%ACT04,NO,) ZERO RETURN CODE?                    */
*/*         P  (,%ACT08) SAVE THE RETURN CODE                        */
*/*%ACT04:  P  SAVE THE POINTER TO RETRIEVED ASPCT                   */
*/*         P  COPY THE LGN TO RETRIEVED ASPCT                       */
*/*         P  RECALCULATE THE NUMBER OF BACKUP SLOTS REQUIRED       */
*/*         P  INITIALIZE ASPCT'S PTR TO ASCB                        */
*/*         P  INITIALIZE ASPCT'S PTR TO LGE                         */
*/*         S  REBUILD: REBUILD THE ASPCT IN LSQA STORAGE            */
*/*         D  (YES,%ACT08,NO,) RETURN CODE 28?                      */
*/*%ACT06:  P  ANCHOR REBUILT ASPCT IN LGE                           */
*/*         P  ZERO PTR TO LSQA STORAGE & LENGTH IN EPATH            */
*/*         P  COPY THE SAVED COUNT TO THE LGE                       */
*/*%ACT08:  P  GET CALLER'S REG 13                                   */
*/*         P  COPY INTERNAL RETURN CODE TO CALLER'S REG 15          */
*/*         S  ILRGMA: FREE THE WORKAREA                             */
*/*         P  RESTORE REGISTERS                                     */
*/*         R  RETURN TO CALLER                                      */
*/*ILRACT: END                                                       */
*                                                                  0037
         EJECT
*                                                                  0037
*/********************************************************************/
*/*  INITIALIZATION: GET A WORKAREA & ESTABLISH ADDRESSIBILITY       */
*/********************************************************************/
*                                                                  0037
*   /*****************************************************************/
*   /*                                                               */
*   /* BEGIN ILRGMA MACRO EXPANSION                                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0037
*   DO;                             /* ILRGMA GET                  0037
*                                      CELL(BWK)WORKREGS(R11,R12)    */
*     DECLARE                       /* ASMVT VECTOR TO ILRPEX        */
*       ILRPEX ENTRY BASED(ASMPEX) VALRG(0);                       0038
*     DECLARE                       /* MAP FOR CELL CONTROL WORDS    */
*       1 GMACELL BASED BDY(WORD),                                 0039
*        2 GMANEXT PTR(31);         /* PTR NEXT FREE CELL            */
*     RESPECIFY                                                    0040
*      (R0,                                                        0040
*       R1,                                                        0040
*       R11,                                                       0040
*       R12,                                                       0040
*       R14,                                                       0040
*       R15) RESTRICTED;                                           0040
*     RESPECIFY                                                    0041
*       ASMPOOLS BASED(R11);                                       0041
*     RESPECIFY                                                    0042
*       GMACELL BASED(R14);                                        0042
*     R11=ADDR(ASMBWKPC);                                          0043
         LA    R11,ASMBWKPC(,ASMVTPTR)                             0043
*     LM(R14,R15,ASMCPAVQ);         /* GET ADDR OF 1ST CELL          */
         LM    R14,R15,ASMCPAVQ(R11)                               0044
*GMA00010:                                                         0045
*     IF R14^=0 THEN                /* TEST CELL POOL                */
GMA00010 LTR   R14,R14                                             0045
         BZ    @RF00045                                            0045
*       DO;                         /* CELL AVAILABLE, REMOVE CELL   */
*         R0=GMANEXT;                                              0047
         L     R0,GMANEXT(,R14)                                    0047
*         R1=R15-1;                                                0048
         LR    R1,R15                                              0048
         BCTR  R1,0                                                0048
*         CDS(R14,R0,ASMCPAVQ);                                    0049
         CDS   R14,R0,ASMCPAVQ(R11)                                0049
*         BC(7,GMA00010);                                          0050
         BC    7,GMA00010                                          0050
*         R1=R14;                                                  0051
         LR    R1,R14                                              0051
*       END;                                                       0052
*     ELSE                                                         0053
*       DO;                         /* CELL POOL EMPTY               */
         B     @RC00045                                            0053
@RF00045 DS    0H                                                  0054
*         R1=R11;                   /* PREPARE TO CALL PEX           */
         LR    R1,R11                                              0054
*         CALL ILRPEX;              /* EXTEND THE POOL               */
         L     @15,ASMPEX(,ASMVTPTR)                               0055
         BALR  @14,@15                                             0055
*       END;                                                       0056
*     RESPECIFY                                                    0057
*      (R0,                                                        0057
*       R1,                                                        0057
*       R11,                                                       0057
*       R12,                                                       0057
*       R14,                                                       0057
*       R15) UNRESTRICTED;                                         0057
@RC00045 DS    0H                                                  0058
*   END;                            /* ILRGMA GET                  0058
*                                      CELL(BWK)WORKREGS(R11,R12)    */
*                                                                  0058
*   /*****************************************************************/
*   /*                                                               */
*   /* END ILRGMA MACRO EXPANSION                                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0059
*   RFY                                                            0059
*    (R1,                                                          0059
*     R3) RSTD;                                                    0059
         EJECT
*                                                                  0060
*/********************************************************************/
*/* IF A WORKAREA WAS NOT OBTAINED, RETURN TO ILRGOS WITH A RETURN   */
*/* CODE OF 28 TO INDICATE WE COULD NOT OBTAIN NECESSARY STORAGE.    */
*/* IF A WORKAREA WAS OBTAINED, ESTABLISH ADDRESSIBILITY TO IT,      */
*/* SETUP A SAVEAREA AND RELOAD INPUT REGISTERS 1 & 3.               */
*/********************************************************************/
*                                                                  0060
*   IF R1=ZERO                      /* DID WE GET A WORKAREA?        */
*     THEN                          /* NO, RETURN TO ILRGOS          */
         LTR   R1,R1                                               0060
         BNZ   @RF00060                                            0060
*     RETURN CODE(STORAGE);         /* RETURN INDICATING WE COULD NOT
*                                      OBTAIN STORAGE                */
         LA    @15,28                                              0061
         L     @14,12(,@13)                                        0061
         LM    @00,@12,20(@13)                                     0061
         BR    @14                                                 0061
*   ELSE                                                           0062
*     DO;                           /* YES, ESTAB. ADDRESSIBILITY    */
@RF00060 DS    0H                                                  0063
*       GENERATE REFS(R1,R13) SETS(R1,R3,R8,R9,R13);               0063
        LR    R9,R1                      GET ADDRESS OF WORKAREA
        USING @DATD,R9
        LA    R8,SAVEREGA                GET ADDRESS OF SAVEAREA
        ST    R13,4(R8)                  SET BACKWARD POINTER
        ST    R8,8(R13)                  SET FORWARD POINTER
        L     R1,24(R13)                 RESTORE INPUT REG 1
        LR    R13,R8                     ESTABLISH SAVEAREA POINTER
*     END;                                                         0064
         EJECT
*                                                                  0065
*/********************************************************************/
*/*  INITIALIZE INPUT POINTER                                        */
*/********************************************************************/
*                                                                  0065
*   ACEPTR=R1;                      /* SAVE PTR TO INPUT ACE         */
         LR    ACEPTR,R1                                           0065
*   ASMVTWPT=R3;                    /* SAVE INPUT PTR TO ASMVT       */
         ST    R3,ASMVTWPT                                         0066
*   EPATHPTR=EPAPTR;                /* SAVE INPUT PTR TO EPATH IN  0067
*                                      PARM LIST FOR ILRVSAMI        */
         ST    EPAPTR,EPATHPTR                                     0067
*   EPAACT=ON;                      /* RECORD ENTRY                  */
         OI    EPAACT(EPAPTR),B'00010000'                          0068
*   EPAOWKA=R9;                     /* RECORD WORKAREA ADDRESS       */
         ST    R9,EPAOWKA(,EPAPTR)                                 0069
*   RETCODE=ZERO;                   /* ZERO INTERNAL RETURN CODE     */
         SLR   @12,@12                                             0070
         ST    @12,RETCODE                                         0070
*   RFY                                                            0071
*    (R1,                                                          0071
*     R3,                                                          0071
*     ASMVTPTR) UNRSTD;                                            0071
*   RFY                                                            0072
*     ASMVT BASED(ASMVTWPT);                                       0072
         EJECT
*                                                                  0073
*/********************************************************************/
*/*  RECORD POINTERS, BUILD PARAMETER LIST FOR ILRVSAMI, AND         */
*/*  RETRIEVE THE ASPCT FROM SYS1.STGINDEX.                          */
*/********************************************************************/
*                                                                  0073
*   LGEPTR=ACELGE;                  /* GET POINTER TO LGE            */
         L     @12,ACELGE(,ACEPTR)                                 0073
         ST    @12,LGEPTR                                          0073
*   SSYMPTR=ADDR(ACESYM);           /* STORE PTR TO 'S' SYMBOL IN  0074
*                                      PARM LIST FOR VSAMI           */
         LA    @12,ACESYM(,ACEPTR)                                 0074
         ST    @12,SSYMPTR                                         0074
*   OPCODE=GETREQ;                  /* SET REQUEST OPCODE FOR GET    */
         MVI   OPCODE,X'01'                                        0075
*   RFY                                                            0076
*     R1 RSTD;                                                     0076
*   R1=ADDR(PARMLIST);              /* GET ADDRESS OF PARM LIST      */
         LA    R1,PARMLIST                                         0077
*   CALL ILRVSAMI;                  /* RETRIEVE THE ASPCT FROM     0078
*                                      SYS1.STGINDEX                 */
         L     @15,@CV00112                                        0078
         BALR  @14,@15                                             0078
*   RFY                                                            0079
*     R15 RSTD;                                                    0079
*   IF R15^=ZERO                    /* RETRIEVAL SUCCESSFUL?         */
*     THEN                          /* NO, SKIP TO EXIT PROCESSING   */
         LTR   R15,R15                                             0080
         BZ    @RF00080                                            0080
*     RETCODE=R15;                  /* SAVE THE RETURN CODE          */
         ST    R15,RETCODE                                         0081
*   ELSE                                                           0082
*     DO;                           /* YES                           */
         B     @RC00080                                            0082
@RF00080 DS    0H                                                  0083
*       ASPCTPTR=R1;                /* SAVE PTR TO RETRIEVED ASPCT   */
         ST    R1,ASPCTPTR                                         0083
*       RFY                                                        0084
*        (R1,                                                      0084
*         R15) UNRSTD;                                             0084
         EJECT
*                                                                  0085
*/********************************************************************/
*/*  REBUILD THE ASPCT IN USER'S MEMORY AND ANCHOR IT IN LGE         */
*/********************************************************************/
*                                                                  0085
*       ASPLGID=LGELGID;            /* COPY NEW LGID TO ASPCT      0085
*                                      RECALCULATE THE NUMBER OF   0085
*                                      SLOTS REQUIRED TO BACK THIS 0085
*                                      VIO DATASET                   */
         L     @12,ASPCTPTR                                        0085
         L     @11,LGEPTR                                          0085
         L     @11,LGELGID(,@11)                                   0085
         ST    @11,ASPLGID(,@12)                                   0085
*       IF ILRSLOTV=ZERO THEN                                      0086
         L     @11,ASMVTWPT                                        0086
         L     @11,ASMSLOTV(,@11)                                  0086
         L     @11,ILRSLOTV(,@11)                                  0086
         LTR   @11,@11                                             0086
         BNZ   @RF00086                                            0086
*         ASPBKSLT=ASPMAXPN;                                       0087
         L     @11,ASPMAXPN(,@12)                                  0087
         ST    @11,ASPBKSLT(,@12)                                  0087
*       ELSE                                                       0088
*         ASPBKSLT=ASPMAXPN/ILRSLOTV;                              0088
         B     @RC00086                                            0088
@RF00086 L     @12,ASPCTPTR                                        0088
         L     @11,ASMVTWPT                                        0088
         L     @11,ASMSLOTV(,@11)                                  0088
         L     @01,ASPMAXPN(,@12)                                  0088
         SLR   @00,@00                                             0088
         D     @00,ILRSLOTV(,@11)                                  0088
         ST    @01,ASPBKSLT(,@12)                                  0088
*       ASPASCB=PSAAOLD;            /* SET NEW ASCB POINTER          */
@RC00086 L     @12,ASPCTPTR                                        0089
         L     @11,PSAAOLD                                         0089
         ST    @11,ASPASCB(,@12)                                   0089
*       ASPLGE=LGEPTR;              /* COPY NEW LGE ADDR TO ASPCT    */
         L     @11,LGEPTR                                          0090
         ST    @11,ASPLGE(,@12)                                    0090
*       CALL REBUILD;               /* REBUILD THE ASPCT IN USER LSQA
*                                      STORAGE                       */
         BAL   @14,REBUILD                                         0091
*       RFY                                                        0092
*         R15 RSTD;                                                0092
*       IF R15^=ZERO                /* SUCCESSFULLY REBUILD ASPCT?   */
*         THEN                      /* NO,COULD NOT OBTAIN    STORAGE*/
         LTR   R15,R15                                             0093
         BZ    @RF00093                                            0093
*         RETCODE=R15;              /* SAVE THE RETURN CODE          */
         ST    R15,RETCODE                                         0094
*       ELSE                                                       0095
*         DO;                       /* YES, COMPLETE PROCESSING      */
         B     @RC00093                                            0095
@RF00093 DS    0H                                                  0096
*           LGEASPCT=REBASPCT;      /* ANCHOR THE REBUILT ASPCT IN 0096
*                                      THE LGE                       */
         L     @14,LGEPTR                                          0096
         L     @12,REBASPCT                                        0096
         ST    @12,LGEASPCT(,@14)                                  0096
*           LGESLTCT=ASPSAVCT;      /* COPY THE SAVED SLOT COUNT TO
*                                      THE LGE FOR ILRGOS TO UPDATE
*                                      THE ASCB VIO SLOT COUNT       */
         L     @12,ASPCTPTR                                        0097
         L     @12,ASPSAVCT(,@12)                                  0097
         STH   @12,LGESLTCT(,@14)                                  0097
*           EPARBASP=ZERO;          /* ZERO RECOVERYS POINTER TO     */
         SLR   @14,@14                                             0098
         ST    @14,EPARBASP(,EPAPTR)                               0098
*           EPARSIZE=ZERO;          /* THE LSQA STORAGE              */
         STH   @14,EPARSIZE(,EPAPTR)                               0099
*         END;                                                     0100
*     END;                                                         0101
@RC00093 DS    0H                                                  0102
         EJECT
*                                                                  0102
*/********************************************************************/
*/*  EXIT PROCCESING - CLEAN-UP AND RETURN TO ILRGOS                 */
*/********************************************************************/
*                                                                  0102
*   GENERATE REFS(RETCODE) SETS(R13);                              0102
@RC00080 DS    0H                                                  0102
        L     R13,4(R13)                 GET PTR TO CALLERS SAVEAREA
        MVC   16(4,R13),RETCODE          STORE RETURN CODE IN CALLERS
*                                        REGISTER 15
*   RFY                                                            0103
*    (R0,                                                          0103
*     R4,                                                          0103
*     R7,                                                          0103
*     R8) UNRSTD;                                                  0103
*   EPAOWKA=ZERO;                   /* ZERO RECOVERY'S WKA PTR       */
         SLR   @14,@14                                             0104
         ST    @14,EPAOWKA(,EPAPTR)                                0104
*   EPARTYRG=ZERO;                  /* ZERO REG SAVAREA PTR          */
         ST    @14,EPARTYRG(,EPAPTR)                               0105
*   EPAACT=OFF;                     /* TURN OFF ENTRY FLAG           */
         NI    EPAACT(EPAPTR),B'11101111'                          0106
*   RFY                                                            0107
*     R1 RSTD;                                                     0107
*   R1=R9;                          /* GET PTR TO WORKAREA           */
*                                                                  0108
         LR    R1,R9                                               0108
*   /*****************************************************************/
*   /*                                                               */
*   /* BEGIN ILRGMA MACRO EXPANSION                                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0109
*   DO;                             /* ILRGMA FREE                 0109
*                                      CELL(BWK)WORKREGS(R11,R12)    */
*     RESPECIFY                                                    0110
*      (R0,                                                        0110
*       R1,                                                        0110
*       R11,                                                       0110
*       R12,                                                       0110
*       R14,                                                       0110
*       R15) RESTRICTED;                                           0110
*     RESPECIFY                                                    0111
*       ASMPOOLS BASED(R11);                                       0111
*     RESPECIFY                                                    0112
*       GMACELL BASED(R1);                                         0112
*     R11=ADDR(ASMBWKPC);                                          0113
         L     R11,ASMVTWPT                                        0113
         LA    R11,ASMBWKPC(,R11)                                  0113
*     R14=ASMCPAVL;                                                0114
         L     R14,ASMCPAVL(,R11)                                  0114
*GMA00022:                                                         0115
*     GMANEXT=R14;                  /* PUT ADDR CURRENT FIRST IN   0115
*                                      INPUT CELL                    */
GMA00022 ST    R14,GMANEXT(,R1)                                    0115
*     CS(R14,R1,ASMCPAVL);          /* ADD INPUT CELL TO POOL        */
         CS    R14,@01,ASMCPAVL(R11)                               0116
*     BC(7,GMA00022);                                              0117
         BC    7,GMA00022                                          0117
*     RESPECIFY                                                    0118
*      (R0,                                                        0118
*       R1,                                                        0118
*       R11,                                                       0118
*       R12,                                                       0118
*       R14,                                                       0118
*       R15) UNRESTRICTED;                                         0118
*   END;                            /* ILRGMA FREE                 0119
*                                      CELL(BWK)WORKREGS(R11,R12)    */
*                                                                  0119
*   /*****************************************************************/
*   /*                                                               */
*   /* END ILRGMA MACRO EXPANSION                                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0120
*   RETURN;                         /* RETURN TO ILRGOS              */
@EL00001 DS    0H                                                  0120
@EF00001 DS    0H                                                  0120
@ER00001 LM    @14,@12,12(@13)                                     0120
         BR    @14                                                 0120
         EJECT
*                                                                  0121
*/********************************************************************/
*/*                                                                  */
*/*  REBUILD:  REBUILD THE RETRIEVED ASPCT IN USER'S LSQA            */
*/*                                                                  */
*/*  INPUT:    POINTER TO RETRIEVED ASPCT BASE                       */
*/*                                                                  */
*/*  PROCESS:  SAVE THE RETURN ADDRESS. CALCULATE THE NUMBER OF ASST */
*/*            EXTENSIONS, AND LPME EXTENSIONS. CALCULATE THE AMOUNT */
*/*            OF LSQA STORAGE NEEDED. ISSUE A CONDITIONAL GETMAIN   */
*/*            FOR THE REQUIRED LSQA. IF THE STORAGE COULD NOT BE    */
*/*            OBTAINED, INVOKE ILRAFS00 TO FREE THE RETRIEVED ASPCT */
*/*            IN I/O BUFFERS, AND SET THE INTERNAL RETURN CODE TO   */
*/*            28. IF LSQA STORAGE WAS OBTAINED, ZERO THE            */
*/*            GETMAIN'D SPACE AND COPY THE ASPCT BASE AND ALL       */
*/*            EXTENSIONS FROM THE I/O BUFFERS TO THE LSQA STORAGE.  */
*/*            INVOKE ILRAFS00 TO FREE THE I/O BUFFERS AND SET THE   */
*/*            INTERNAL RETURN CODE TO ZERO.                         */
*/*                                                                  */
*/*  OUTPUT: NORMAL - POINTER TO THE REBUILT ASPCT                   */
*/*                 - I/O BUFFERS FOR RETRIEVED ASPCT FREED          */
*/*                 - RETURN CODE SET TO ZERO                        */
*/*                                                                  */
*/*          ERROR  - ZERO POINTER TO THE REBUILT ASPCT              */
*/*                 - I/O BUFFERS FOR RETRIEVED ASPCT FREED          */
*/*                 - RETURN CODE SET TO 28                          */
*/*                                                                  */
*/********************************************************************/
*/*REBUILD: CHART (AREF)                                             */
*/*HEADER                                                          0121
*/*  ILRACT                                                        0121
*/* REBUILD: REBUILD AN ASPCT IN LSQA STORAGE                        */
*/*REBUILD: E  ENTRY                                                 */
*/*         P  SAVE THE RETURN ADDRESS                               */
*/*         P  CALCULATE THE NUMBER OF ASPCT'S                       */
*/*         P  CALCULATE THE AMOUNT OF LSQA STORAGE NEEDED           */
*/*         L  SETLOCK: UNCOND OBTAIN LOCAL LOCK                     */
*/*         P  LOAD REGISTERS FOR GETMAIN                            */
*/*         S  GETMAIN: LSQA SPACE FOR ASPC'S FROM SP255             */
*/*         D  (YES,%ACT10,NO,) ZERO RETURN CODE?                    */
*/*         P  ZERO THE EPATH PTR TO THE RETRIEVED ASPCT             */
*/*         P  LOAD REG 1 WITH ADDR OF RETRIEVED ASPCT               */
*/*         P  SET REG 0 TO LENGTH OF BUFFER                         */
*/*         S  ILRAFS00: FREE THE RETRIEVED ASPCT                    */
*/*         P  SAVE THE RETURN CODE                                  */
*/*         L  SETLOCK: UNCOND RELEASE LOCAL LOCK                    */
*/*         D  (YES,%ACT09,NO,) ZERO RETURN CODE?                    */
*/*         S  ABEND: 087                                            */
*/*%ACT09:  P  SET RETURN CODE TO 28                                 */
*/*         R  RETURN TO MAINLINE                                    */
*/*%ACT10:  P  SAVE POINTER TO GETMAIN'D AREA                        */
*/*         P  RECORD PTR TO LSQA STORAGE & LENGTH IN EPATH          */
*/*         P  COPY THE RETRIEVED ASPCT BASE TO LSQA STORAGE         */
*/*         P  UPDATE LSQA PTR BY LENGTH OF ASPCT BASE               */
*/*         D  (YES,%ACT11,NO,) ANY EXTENSIONS?                      */
*/*         P  ZERO THE EPATH PTR TO THE RETRIEVED ASPCT             */
*/*         P  LOAD REGISTERS FOR FREEMAIN                           */
*/*         S  FREEMAIN: FREE THE RETRIEVED ASPCT BASE               */
*/*         L  SETLOCK: UNCOND RELEASE LOCAL LOCK                    */
*/*         P  SET THE RETURN CODE TO ZERO                           */
*/*         R  RETURN TO MAINLINE                                    */
*/*%ACT11:  L  SETLOCK: UNCOND RELEASE LOCAL LOCK                    */
*/*%ACT11A: P  STORE LSQA PTR IN LSQA COPY OF ASPCT BASE             */
*/*         P  GET PTR TO BUFFER ASST EXTENSION                      */
*/*         P  COPY BUFFER ASST EXTENSION TO LSQA STORAGE            */
*/*         P  UPDATE THE LSQA PTR BY LENGTH OF ASST EXTENSION       */
*/*%ACT12:  P  GET PTR TO BUFFER LPME EXTENSION                      */
*/*         P  STORE LSQA PTR IN LSQA ASST EXTENSION ARRAY           */
*/*         P  COPY BUFFER LPME EXTENSION TO LSQA STORAGE            */
*/*         P  UPDATE THE LSQA PTR BY LENGTH OF LPME EXTENSION       */
*/*         D  (YES,,NO,%ACT13) ANYMORE LPME EXT THIS ASST EXT?      */
*/*         P  (,%ACT12) INCREMENT THE ASST ARRAY POINTER            */
*/*%ACT13:  D  (YES,,NO,%ACT14) ANYMORE ASST EXTENSIONS?             */
*/*         P  (,%ACT11A) INCREMENT BASE ARRAY POINTER               */
*/*%ACT14:  L  SETLOCK: UNCOND OBTAIN LOCAL LOCK                     */
*/*         P  ZERO THE EPATH PTR TO THE RETRIEVED ASPCT             */
*/*         P  LOAD REG 1 WITH ADDR OF RETRIEVED ASPCT BASE          */
*/*         P  SET REG 0 TO LENGTH OF BUFFER                         */
*/*         S  ILRAFS00: FREE THE RETRIEVED ASPCT                    */
*/*         P  SAVE THE RETURN CODE                                  */
*/*         L  SETLOCK: UNCOND RELEASE LOCAL LOCK                    */
*/*         D  (YES,%ACT15,NO,) ZERO RETURN CODE?                    */
*/*         S  ABEND: 087                                            */
*/*%ACT15:  P  SET RETURN CODE TO ZERO                               */
*/*         R  RETURN TO MAINLINE                                    */
*/*REBUILD: END                                                      */
*                                                                  0121
         EJECT
*REBUILD:                                                          0121
*   PROCEDURE OPTIONS(NOSAVE,NOSAVEAREA);                          0121
REBUILD  DS    0H                                                  0122
*   RFY                                                            0122
*     R14 RSTD;                                                    0122
*   RETADDR1=R14;                   /* SAVE THE RETURN ADDRESS       */
         ST    R14,RETADDR1                                        0123
*   RFY                                                            0124
*     R14 UNRSTD;                                                  0124
*                                                                  0124
*/********************************************************************/
*/* CALCULATE THE AMOUNT OF LSQA STORAGE NEEDED TO REBUILD THE       */
*/* ASPCT CHAIN.                                                     */
*/********************************************************************/
*                                                                  0125
*   LSQASIZE=ASPAEXCT+ASPLEXCT+ONE; /* CALCULATE THE NUMBER OF ASPCTS
*                                      IN CHAIN. TOTAL = NUMBER OF 0125
*                                      ASST EXTENSIONS + NUMBER OF 0125
*                                      LPME EXTENSIONS + ONE FOR THE
*                                      ASPCT BASE.                   */
         L     @12,ASPCTPTR                                        0125
         LH    @11,ASPAEXCT(,@12)                                  0125
         AH    @11,ASPLEXCT(,@12)                                  0125
         AL    @11,@CF00080                                        0125
         ST    @11,LSQASIZE                                        0125
*   LSQASIZE=LSQASIZE*(LENGTH(ASPCT));/* CALCULATE THE AMOUNT OF LSQA
*                                      STORAGE NEEDED BY MULTIPLING
*                                      THE TOTAL NUMBER OF ASPCTS IN
*                                      CHAIN BY THE LENGTH OF AN   0126
*                                      ASPCT.                        */
         MH    @11,@CH01429                                        0126
         ST    @11,LSQASIZE                                        0126
         EJECT
*                                                                  0127
*/********************************************************************/
*/* OBTAIN THE LOCAL LOCK AND ISSUE A GETMAIN FOR THE LSQA STORAGE   */
*/********************************************************************/
*                                                                  0127
*   RFY                                                            0127
*     R8 RSTD;                                                     0127
*   R8=R13;                         /* SAVE SAVEAREA POINTER OBTAIN
*                                      THE LOCAL LOCK                */
         LR    R8,R13                                              0128
*GET1:                                                             0129
*   DO;                             /* SETLOCK (OBTAIN) MODE(UNCOND)
*                                      TYPE(LOCAL)                 0129
*                                      RELATED(VIO,ILRACT(REL1))     */
GET1     DS    0H                                                  0130
*     RFY                                                          0130
*      (GPR11P,                                                    0130
*       GPR12P,                                                    0130
*       GPR13P,                                                    0130
*       GPR14P) RSTD;                                              0130
*     GPR13P=PSALITA;               /* ADDRESS OF LOCK INTERFACE   0131
*                                      TABLE.                        */
         L     GPR13P,PSALITA                                      0131
*     GEN(LM GPR11P,GPR13P,576(GPR13P));/* LOAD LOCKWORD, CLHT AND 0132
*                                      ENTRY ADRS.                   */
         LM GPR11P,GPR13P,576(GPR13P)
*     GEN(BALR GPR14P,GPR13P);      /* BALR TO SETLOCK RTN.          */
         BALR GPR14P,GPR13P
*     RFY                                                          0134
*      (GPR11P,                                                    0134
*       GPR12P,                                                    0134
*       GPR13P,                                                    0134
*       GPR14P) UNRSTD;                                            0134
*   END;                            /* SETLOCK (OBTAIN) MODE(UNCOND)
*                                      TYPE(LOCAL)                 0135
*                                      RELATED(VIO,ILRACT(REL1))     */
*   R13=R8;                         /* RESTORE SAVEAREA POINTER      */
         LR    R13,R8                                              0136
*   RFY                                                            0137
*     R8 UNRSTD;                                                   0137
*   RFY                                                            0138
*    (R0,                                                          0138
*     R1,                                                          0138
*     R4,                                                          0138
*     R7) RSTD;                                                    0138
*   R0=LSQASIZE;                    /* SET LENGTH OF LSQA AREA       */
         L     R0,LSQASIZE                                         0139
*   R4=PSATOLD;                     /* GET ADDRESS OF CURRENT TCB    */
         L     R4,PSATOLD                                          0140
*   R7=PSAAOLD;                     /* GET ADDRESS OF CURRENT ASCB   */
         L     R7,PSAAOLD                                          0141
*   GENERATE REFS(R0,R4,R7) SETS(R1,R3);                           0142
*                                     /* GETMAIN LSQA STORAGE       */
        GETMAIN RC,LV=(0),SP=255,BRANCH=YES
*   EPAPTR=EPATHPTR;                /* RESTORE EPATH PTR DESTROYED BY
*                                      GETMAIN                       */
         L     EPAPTR,EPATHPTR                                     0143
         EJECT
*                                                                  0144
*/********************************************************************/
*/* IF THE GETMAIN WAS SUCCESSFUL, COPY THE ASPCT BASE FROM THE I/O  */
*/* BUFFER TO LSQA STORAGE, AND INCREMENT THE LSQA BLOCK STORAGE     */
*/* POINTER BY THE LENGTH OF THE ASPCT BASE.                         */
*/********************************************************************/
*                                                                  0144
*   RFY                                                            0144
*    (R0,                                                          0144
*     R4,                                                          0144
*     R7) UNRSTD;                                                  0144
*   RFY                                                            0145
*     R15 RSTD;                                                    0145
*   IF R15=ZERO                     /* WAS GETMAIN SUCCESSFUL?       */
*     THEN                                                         0146
         LTR   R15,R15                                             0146
         BNZ   @RF00146                                            0146
*     DO;                           /* YES                           */
*       LSQAPTR=R1;                 /* SAVE PTR TO LSQA STORAGE      */
         LR    LSQAPTR,R1                                          0148
*       REBASPCT=R1;                /* ANCHOR PTR FOR REBUILDING     */
         ST    R1,REBASPCT                                         0149
*       EPARBASP=R1;                /* RECORD PTR FOR RECOVERY       */
         ST    R1,EPARBASP(,EPAPTR)                                0150
*       EPARSIZE=LSQASIZE;          /* RECORD LSQA LENGTH            */
         L     @14,LSQASIZE                                        0151
         STH   @14,EPARSIZE(,EPAPTR)                               0151
*       RFY                                                        0152
*        (R0,                                                      0152
*         R14) RSTD;                                               0152
*       R0=R1;                      /* GET ADDRESS OF LSQA AREA      */
         LR    R0,R1                                               0153
*       R1=LENGTH(ASPCT);           /* SET LENGTH OF RECEIVER        */
         LA    R1,1088                                             0154
*       R14=ASPCTPTR;               /* SET ADDR OF BUFFER ASPCT      */
         L     R14,ASPCTPTR                                        0155
*       R15=R1;                     /* SET LENGTH OF SOURCE          */
         LR    R15,R1                                              0156
*       MVCL(R0,R14);               /* COPY THE ASPCT BASE FROM      */
         MVCL  R0,R14                                              0157
*       RFY                                                        0158
*        (R0,                                                      0158
*         R1,                                                      0158
*         R14,                                                     0158
*         R15) UNRSTD;              /* BUFFER TO LSQA STORAGE        */
*       LSQAPTR=LSQAPTR+LENGTH(ASPCT);/* INCREMENT THE LSQA PTR PAST
*                                      THE ASPCT BASE                */
         AL    LSQAPTR,@CF01429                                    0159
         EJECT
*                                                                  0160
*/********************************************************************/
*/* IF THERE ARE NO EXTENSIONS - FREE THE I/O BUFFER AND RETURN      */
*/* TO MAINLINE PROCESSING.                                          */
*/********************************************************************/
*                                                                  0160
*       IF ASPAEXCT=ZERO            /* ARE THERE ANY EXTENSIONS?     */
*         THEN                                                     0160
         SLR   @12,@12                                             0160
         L     @11,ASPCTPTR                                        0160
         CH    @12,ASPAEXCT(,@11)                                  0160
         BNE   @RF00160                                            0160
*         DO;                       /* NO                            */
*           EPARASP=ZERO;           /* ZERO RECOVERY'S BUFFER PTR    */
         ST    @12,EPARASP(,EPAPTR)                                0162
*           RFY                                                    0163
*            (R0,                                                  0163
*             R1,                                                  0163
*             R4,                                                  0163
*             R7,                                                  0163
*             R8) RSTD;                                            0163
*           R0=TWOK;                /* SET LENGTH FOR 2K BUFFER      */
         LA    R0,2048                                             0164
*           R1=ASPCTPTR;            /* GET ADDRESS OF BUFFER         */
         LR    R1,@11                                              0165
*           R4=PSATOLD;             /* GET ADDRESS OF CURRENT TCB    */
         L     R4,PSATOLD                                          0166
*           R7=PSAAOLD;             /* GET ADDRESS OF CURRENT ASCB   */
         L     R7,PSAAOLD                                          0167
*           ASPCTPTR=ZERO;          /* ZERO PTR TO I/O BUFFER        */
         ST    @12,ASPCTPTR                                        0168
*           R8=R13;                 /* SAVE SAVEAREA POINTET         */
         LR    R8,R13                                              0169
*           GENERATE REFS(R0,R1,R4,R7) SETS(R3,R11,R12,R13,R14);   0170
        FREEMAIN RC,A=(1),LV=(0),SP=230,BRANCH=YES
*
REL1    SETLOCK RELEASE,TYPE=LOCAL,RELATED=(VIO,ILRACT(GET1))
*           R13=R8;                 /* RESTORE SAVEAREA POINTER      */
         LR    R13,R8                                              0171
*           EPAPTR=EPATHPTR;        /* RESTORE EPATH PTR DESTROYED BY
*                                      FREEMAIN                      */
         L     EPAPTR,EPATHPTR                                     0172
*           ASPCTPTR=REBASPCT;      /* RESET ASPCT PTR FOR MAINLINE  */
         L     @12,REBASPCT                                        0173
         ST    @12,ASPCTPTR                                        0173
*           RFY                                                    0174
*            (R14,                                                 0174
*             R15) RSTD;                                           0174
*           R15=ZERO;               /* LOAD ZERO RETURN CODE         */
         SLR   R15,R15                                             0175
*           R14=RETADDR1;           /* GET RETURN ADDRESS            */
         L     R14,RETADDR1                                        0176
*           RETURN;                 /* RETURN TO MAINLINE            */
@EL00002 DS    0H                                                  0177
@EF00002 DS    0H                                                  0177
@ER00002 BR    @14                                                 0177
*           RFY                                                    0178
*            (R0,                                                  0178
*             R1,                                                  0178
*             R4,                                                  0178
*             R7,                                                  0178
*             R8,                                                  0178
*             R14,                                                 0178
*             R15) UNRSTD;                                         0178
*         END;                                                     0179
         EJECT
*                                                                  0180
*/********************************************************************/
*/* REBUILD THE ASPCT EXTENSIONS IN LSQA STORAGE                     */
*/********************************************************************/
*                                                                  0180
*       ELSE                                                       0180
*         DO;                       /* YES, THERE ARE EXTENSIONS     */
@RF00160 DS    0H                                                  0181
*           RFY                                                    0181
*             R8 RSTD;                                             0181
*           R8=R13;                 /* SAVE SAVEAREA POINTER RELEASE
*                                      THE LOCAL LOCK                */
         LR    R8,R13                                              0182
*REL2:                                                             0183
*           DO;                     /* SETLOCK (RELEASE) TYPE(LOCAL)
*                                      RELATED(VIO,ILRACT(GET1))     */
REL2     DS    0H                                                  0184
*             RFY                                                  0184
*              (GPR11P,                                            0184
*               GPR12P,                                            0184
*               GPR13P,                                            0184
*               GPR14P) RSTD;                                      0184
*             GPR13P=PSALITA;       /* ADDRESS OF LOCK INTERFACE   0185
*                                      TABLE.                        */
         L     GPR13P,PSALITA                                      0185
*             GEN(LM GPR11P,GPR13P,588(GPR13P));/* LOAD LOCKWORD,  0186
*                                      CLHT AND ENTRY ADRS.          */
         LM GPR11P,GPR13P,588(GPR13P)
*             GEN(BALR GPR14P,GPR13P);/* BALR TO SETLOCK RTN.        */
         BALR GPR14P,GPR13P
*             RFY                                                  0188
*              (GPR11P,                                            0188
*               GPR12P,                                            0188
*               GPR13P,                                            0188
*               GPR14P) UNRSTD;                                    0188
*           END;                    /* SETLOCK (RELEASE) TYPE(LOCAL)
*                                      RELATED(VIO,ILRACT(GET1))     */
*           R13=R8;                 /* RESTORE SAVEAREA POINTER      */
         LR    R13,R8                                              0190
*           RFY                                                    0191
*             R8 UNRSTD;                                           0191
*           BASE=ONE;               /* INIT BASE ARRAY SUBSCRIPT     */
         MVC   BASE(4),@CF00080                                    0192
*           ASST=TWO;               /* INIT ASST ARRAY SUBSCRIPT     */
         MVC   ASST(4),@CF00101                                    0193
*           ASSTEXT=ASPAEXCT;       /* GET NUMBER OF ASST EXTS       */
         L     @12,ASPCTPTR                                        0194
         LH    @11,ASPAEXCT(,@12)                                  0194
         ST    @11,ASSTEXT                                         0194
*           LPMEXT=ASPLEXCT;        /* GET NUMBER OF LPME EXTS       */
         LH    @12,ASPLEXCT(,@12)                                  0195
         ST    @12,LPMEXT                                          0195
         EJECT
*                                                                  0196
*/********************************************************************/
*/*  PROCESS  ASST  EXTENSIONS                                       */
*/********************************************************************/
*                                                                  0196
*           DO WHILE ASSTEXT^=ZERO; /* STORE PTR FOR ASST EXTENSION
*                                      IN ASPCT BASE                 */
         B     @DE00196                                            0196
@DL00196 DS    0H                                                  0197
*             REBASPCT->ASPASSTP(BASE)=LSQAPTR;                    0197
         L     @11,BASE                                            0197
         SLA   @11,2                                               0197
         L     @05,REBASPCT                                        0197
         ST    LSQAPTR,ASPASSTP-4(@11,@05)                         0197
*             ASSTEPTR=LSQAPTR;     /* GET ADDR FOR ASST EXT         */
         LR    ASSTEPTR,LSQAPTR                                    0198
*             ASPEXPTR=ASPASSTP(BASE);/* GET PTR TO ASST IN BUFFER   */
         L     @05,ASPCTPTR                                        0199
         L     ASPEXPTR,ASPASSTP-4(@11,@05)                        0199
*             RFY                                                  0200
*              (R0,                                                0200
*               R1,                                                0200
*               R14,                                               0200
*               R15) RSTD;                                         0200
*             R0=LSQAPTR;           /* GET ADDRESS OF TARGET         */
         LR    R0,LSQAPTR                                          0201
*             R14=ASPEXPTR;         /* GET ADDRESS OF SOURCE         */
         LR    R14,ASPEXPTR                                        0202
*             R1=LENGTH(ASPEXTSN);  /* SET LENGTH OF TARGET          */
         LA    R1,1088                                             0203
*             R15=R1;               /* SET LENGTH OF SOURCE          */
         LR    R15,R1                                              0204
*             MVCL(R0,R14);         /* COPY THE ASST EXTENSION FROM
*                                      THE I/O BUFFER TO LSQA STORAGE*/
         MVCL  R0,R14                                              0205
*             RFY                                                  0206
*              (R0,                                                0206
*               R1,                                                0206
*               R14,                                               0206
*               R15) UNRSTD;        /* INCREMENT THE LSQA BLOCK PTR
*                                      BY LENGTH OF ASST EXTENSION   */
*             LSQAPTR=LSQAPTR+LENGTH(ASPEXTSN);                    0207
         AL    LSQAPTR,@CF01429                                    0207
*             IF LPMEXT>=ASPNLPME   /* IS THERE MORE THAN ONE ASST 0208
*                                      EXT WORTH OF LPME EXTS?       */
*               THEN                /* YES                           */
         L     @11,LPMEXT                                          0208
         C     @11,@CF00033                                        0208
         BL    @RF00208                                            0208
*               IF BASE=ONE         /* IS THIS FOR FIRST ASST EXT?   */
*                 THEN              /* YES                           */
         CLC   BASE(4),@CF00080                                    0209
         BNE   @RF00209                                            0209
*                 LPMECNTL=FIRSTAEX;/* SET LOOP CONTROLLER FOR FIRST
*                                      ASST EXTENSION                */
         LA    LPMECNTL,255                                        0210
*               ELSE                /* NO                            */
*                 LPMECNTL=ASPNLPME;/* SET LOOP CONTROLLER FOR NORMAL
*                                      ASST EXTENSION                */
         B     @RC00209                                            0211
@RF00209 LA    LPMECNTL,256                                        0211
*             ELSE                  /* NO, DOWN TO LAST ASST EXT     */
*               LPMECNTL=LPMEXT;    /* SET LOOP CONTROLLER TO      0212
*                                      REMAINING LPME EXTENSIONS     */
         B     @RC00208                                            0212
@RF00208 L     LPMECNTL,LPMEXT                                     0212
*             BASE=BASE+ONE;        /* INCREMENT BASE SUBSCRIPT      */
@RC00208 LA    @11,1                                               0213
         AL    @11,BASE                                            0213
         ST    @11,BASE                                            0213
*             ASSTEXT=ASSTEXT-ONE;  /* DECREMENT ASST EXT COUNT      */
         L     @11,ASSTEXT                                         0214
         BCTR  @11,0                                               0214
         ST    @11,ASSTEXT                                         0214
         EJECT
*                                                                  0215
*/********************************************************************/
*/*  PROCESS  LPME  EXTENSIONS  PER  ASST  EXTENSION                 */
*/********************************************************************/
*                                                                  0215
*             DO WHILE LPMECNTL^=ZERO;/* STORE PTR TO REBUILT LPME 0215
*                                      EXT IN REBUILT ASST ESTENSION */
         B     @DE00215                                            0215
@DL00215 DS    0H                                                  0216
*               ASSTEPTR->ASPASSTE(ASST)=LSQAPTR;                  0216
         L     @11,ASST                                            0216
         SLA   @11,2                                               0216
         ST    LSQAPTR,ASPASSTE-4(@11,ASSTEPTR)                    0216
*               RFY                                                0217
*                (R0,                                              0217
*                 R1,                                              0217
*                 R14,                                             0217
*                 R15) RSTD;                                       0217
*               R0=LSQAPTR;         /* GET ADDRESS OF TARGET         */
         LR    R0,LSQAPTR                                          0218
*               R14=ASPASSTE(ASST); /* GET ADDRESS OF SOURCE         */
         L     R14,ASPASSTE-4(@11,ASPEXPTR)                        0219
*               R15=LENGTH(ASPEXTSN);/* SET LENGTH OF SOURCE         */
         LA    R15,1088                                            0220
*               R1=R15;             /* SET LENGTH OF TARGET          */
         LR    R1,R15                                              0221
*               MVCL(R0,R14);       /* COPY THE LPME EXTENSION FROM
*                                      THE I/O BUFFER TO LSQA STORAGE*/
         MVCL  R0,R14                                              0222
*               RFY                                                0223
*                (R0,                                              0223
*                 R1,                                              0223
*                 R14,                                             0223
*                 R15) UNRSTD;      /* INCREMENT THE LSQA BLOCK PTR
*                                      BY LENGTH OF LPME EXTENSION   */
*               LSQAPTR=LSQAPTR+LENGTH(ASPEXTSN);                  0224
         AL    LSQAPTR,@CF01429                                    0224
*               LPMEXT=LPMEXT-ONE;  /* DECREMENT LPME EXT COUNT      */
         L     @11,LPMEXT                                          0225
         BCTR  @11,0                                               0225
         ST    @11,LPMEXT                                          0225
*               LPMECNTL=LPMECNTL-ONE;/* DECREMENT LOOP CONTROLLER   */
         BCTR  LPMECNTL,0                                          0226
*               ASST=ASST+ONE;      /* INCREMENT ASST SUBSCRIPT      */
         LA    @11,1                                               0227
         AL    @11,ASST                                            0227
         ST    @11,ASST                                            0227
*             END;                  /* END DO WHILE LOOP PROCESSING
*                                      FOR LPME EXTENSIONS           */
@DE00215 LTR   LPMECNTL,LPMECNTL                                   0228
         BNZ   @DL00215                                            0228
*             ASST=ONE;             /* RESET ASST SUBSCRIPT          */
         MVC   ASST(4),@CF00080                                    0229
*           END;                    /* END DO WHILE LOOP PROCESSING
*                                      FOR ASST EXTENSIONS           */
@DE00196 L     @12,ASSTEXT                                         0230
         LTR   @12,@12                                             0230
         BNZ   @DL00196                                            0230
         EJECT
*                                                                  0231
*/********************************************************************/
*/* OBTAIN THE LOCAL LOCK AND CALL ILRAFS00 TO FREEMAIN THE CHAIN    */
*/* OF I/O BUFFERS.                                                  */
*/********************************************************************/
*                                                                  0231
*           RFY                                                    0231
*             R8 RSTD;                                             0231
*           R8=R13;                 /* SAVE SAVEAREA POINTER OBTAIN
*                                      THE LOCAL LOCK                */
         LR    R8,R13                                              0232
*GET3:                                                             0233
*           DO;                     /* SETLOCK (OBTAIN) MODE(UNCOND)
*                                      TYPE(LOCAL)                 0233
*                                      RELATED(VIO,ILRACT(REL3))     */
GET3     DS    0H                                                  0234
*             RFY                                                  0234
*              (GPR11P,                                            0234
*               GPR12P,                                            0234
*               GPR13P,                                            0234
*               GPR14P) RSTD;                                      0234
*             GPR13P=PSALITA;       /* ADDRESS OF LOCK INTERFACE   0235
*                                      TABLE.                        */
         L     GPR13P,PSALITA                                      0235
*             GEN(LM GPR11P,GPR13P,576(GPR13P));/* LOAD LOCKWORD,  0236
*                                      CLHT AND ENTRY ADRS.          */
         LM GPR11P,GPR13P,576(GPR13P)
*             GEN(BALR GPR14P,GPR13P);/* BALR TO SETLOCK RTN.        */
         BALR GPR14P,GPR13P
*             RFY                                                  0238
*              (GPR11P,                                            0238
*               GPR12P,                                            0238
*               GPR13P,                                            0238
*               GPR14P) UNRSTD;                                    0238
*           END;                    /* SETLOCK (OBTAIN) MODE(UNCOND)
*                                      TYPE(LOCAL)                 0239
*                                      RELATED(VIO,ILRACT(REL3))     */
*           R13=R8;                 /* RESTORE SAVEAREA POINTER      */
         LR    R13,R8                                              0240
*           RFY                                                    0241
*             R8 UNRSTD;                                           0241
*           EPARASP=ZERO;           /* ZERO RECOVERY'S POINTER TO THE
*                                      RETRIEVED ASPCT'S IN I/O    0242
*                                      BUFFERS                       */
         SLR   @12,@12                                             0242
         ST    @12,EPARASP(,EPAPTR)                                0242
*           RFY                                                    0243
*            (R0,                                                  0243
*             R1) RSTD;                                            0243
*           R0=TWOK;                /* SET LENGTH FOR 2K BUFFER      */
         LA    R0,2048                                             0244
*           R1=ASPCTPTR;            /* GET PTR TO RETRIEVED BASE     */
         L     R1,ASPCTPTR                                         0245
*           CALL ILRAFS00;          /* FREE THE I/O BUFFERS          */
         BAL   @14,ILRAFS00                                        0246
*           RFY                                                    0247
*            (R8,                                                  0247
*             R15) RSTD;                                           0247
*           RETCODE1=R15;           /* SAVE THE RETURN CODE          */
         LR    RETCODE1,R15                                        0248
*           EPAPTR=EPATHPTR;        /* RESTORE EPATH PTR DESTROYED IN
*                                      FREEMAIN                      */
         L     EPAPTR,EPATHPTR                                     0249
*           R8=R13;                 /* SAVE SAVEAREA POINTER RELEASE
*                                      THE LOCAL LOCK                */
         LR    R8,R13                                              0250
*REL3:                                                             0251
*           DO;                     /* SETLOCK (RELEASE) TYPE(LOCAL)
*                                      RELATED(VIO,ILRACT(GET3))     */
REL3     DS    0H                                                  0252
*             RFY                                                  0252
*              (GPR11P,                                            0252
*               GPR12P,                                            0252
*               GPR13P,                                            0252
*               GPR14P) RSTD;                                      0252
*             GPR13P=PSALITA;       /* ADDRESS OF LOCK INTERFACE   0253
*                                      TABLE.                        */
         L     GPR13P,PSALITA                                      0253
*             GEN(LM GPR11P,GPR13P,588(GPR13P));/* LOAD LOCKWORD,  0254
*                                      CLHT AND ENTRY ADRS.          */
         LM GPR11P,GPR13P,588(GPR13P)
*             GEN(BALR GPR14P,GPR13P);/* BALR TO SETLOCK RTN.        */
         BALR GPR14P,GPR13P
*             RFY                                                  0256
*              (GPR11P,                                            0256
*               GPR12P,                                            0256
*               GPR13P,                                            0256
*               GPR14P) UNRSTD;                                    0256
*           END;                    /* SETLOCK (RELEASE) TYPE(LOCAL)
*                                      RELATED(VIO,ILRACT(GET3))     */
*           R13=R8;                 /* RESTORE SAVEAREA POINTER      */
         LR    R13,R8                                              0258
*           IF RETCODE1^=ZERO       /* WAS ILRAFS00 SUCCESSFUL?      */
*             THEN                                                 0259
         LTR   RETCODE1,RETCODE1                                   0259
         BZ    @RF00259                                            0259
*             DO;                   /* NO, RECORD FREEMAIN ERROR     */
*               EPARTYRG=ADDR(SAVREGSA);/* RECORD REG SAVEAREA PTR   */
         LA    @14,SAVREGSA                                        0261
         ST    @14,EPARTYRG(,EPAPTR)                               0261
*               STM(R0,R14,SAVREGSA);/* STORE REGS FOR RECOVERY      */
         STM   R0,R14,SAVREGSA                                     0262
*               GEN(ABEND X'87',,,SYSTEM);                         0263
         ABEND X'87',,,SYSTEM
*               RETCODE1=ZERO;      /* SET INTERNAL RETURN CODE      */
         SLR   RETCODE1,RETCODE1                                   0264
*             END;                                                 0265
*           ASPCTPTR=REBASPCT;      /* RESET ASPCT PTR FOR MAINLINE  */
@RF00259 L     @14,REBASPCT                                        0266
         ST    @14,ASPCTPTR                                        0266
*           RFY                                                    0267
*            (R0,                                                  0267
*             R1,                                                  0267
*             R8,                                                  0267
*             R15) UNRSTD;                                         0267
*         END;                      /* END EXTENSION PROCESSING      */
*     END;                          /* END RETURN CODE ZERO FROM   0269
*                                      GETMAIN PROCESSING            */
         EJECT
*                                                                  0270
*/********************************************************************/
*/* PROCESS A NON-ZERO RETURN CODE FROM GETMAIN OF THE LSQA          */
*/* STORAGE FOR REBUILDING THE ASPCT CHAIN.                          */
*/********************************************************************/
*                                                                  0270
*   ELSE                                                           0270
*     DO;                                                          0270
         B     @RC00146                                            0270
@RF00146 DS    0H                                                  0271
*       EPARASP=ZERO;               /* ZERO RECOVERY'S POINTER TO THE
*                                      RETRIEVED ASPCT IN I/O BUFFERS*/
         SLR   @12,@12                                             0271
         ST    @12,EPARASP(,EPAPTR)                                0271
*       RFY                                                        0272
*        (R0,                                                      0272
*         R1) RSTD;                                                0272
*       R0=TWOK;                    /* SET LENGTH FOR 2K BUFFER      */
         LA    R0,2048                                             0273
*       R1=ASPCTPTR;                /* GET PTR TO RETRIEVED BASE     */
         L     R1,ASPCTPTR                                         0274
*       CALL ILRAFS00;              /* FREE THE I/O BUFFERS          */
         BAL   @14,ILRAFS00                                        0275
*       RFY                                                        0276
*        (R8,                                                      0276
*         R15) RSTD;                                               0276
*       RETCODE1=R15;               /* SAVE THE RETURN CODE          */
         LR    RETCODE1,R15                                        0277
*       EPAPTR=EPATHPTR;            /* RESTORE EPATH PTR DESTROYED IN
*                                      FREEMAIN                      */
         L     EPAPTR,EPATHPTR                                     0278
*       R8=R13;                     /* SAVE SAVEAREA POINTER RELEASE
*                                      THE LOCAL LOCK                */
         LR    R8,R13                                              0279
*REL4:                                                             0280
*       DO;                         /* SETLOCK (RELEASE) TYPE(LOCAL)
*                                      RELATED(VIO,ILRACT(GET1))     */
REL4     DS    0H                                                  0281
*         RFY                                                      0281
*          (GPR11P,                                                0281
*           GPR12P,                                                0281
*           GPR13P,                                                0281
*           GPR14P) RSTD;                                          0281
*         GPR13P=PSALITA;           /* ADDRESS OF LOCK INTERFACE   0282
*                                      TABLE.                        */
         L     GPR13P,PSALITA                                      0282
*         GEN(LM GPR11P,GPR13P,588(GPR13P));/* LOAD LOCKWORD, CLHT 0283
*                                      AND ENTRY ADRS.               */
         LM GPR11P,GPR13P,588(GPR13P)
*         GEN(BALR GPR14P,GPR13P);  /* BALR TO SETLOCK RTN.          */
         BALR GPR14P,GPR13P
*         RFY                                                      0285
*          (GPR11P,                                                0285
*           GPR12P,                                                0285
*           GPR13P,                                                0285
*           GPR14P) UNRSTD;                                        0285
*       END;                        /* SETLOCK (RELEASE) TYPE(LOCAL)
*                                      RELATED(VIO,ILRACT(GET1))     */
*       R13=R8;                     /* RESTORE SAVEAREA POINTER      */
         LR    R13,R8                                              0287
*       IF RETCODE1^=ZERO           /* WAS ILRAFS00 SUCCESSFUL?      */
*         THEN                                                     0288
         LTR   RETCODE1,RETCODE1                                   0288
         BZ    @RF00288                                            0288
*         DO;                       /* NO, RECORD FREEMAIN ERROR     */
*           EPARTYRG=ADDR(SAVREGSA);/* RECORD REG SAVEAREA PTR       */
         LA    @14,SAVREGSA                                        0290
         ST    @14,EPARTYRG(,EPAPTR)                               0290
*           STM(R0,R14,SAVREGSA);   /* STORE REGS FOR RECOVERY       */
         STM   R0,R14,SAVREGSA                                     0291
*           GEN(ABEND X'87',,,SYSTEM);                             0292
         ABEND X'87',,,SYSTEM
*         END;                                                     0293
*       RETCODE1=STORAGE;           /* SET INTERNAL RETURN CODE,   0294
*                                      INDICATING WE COULD NOT OBTAIN
*                                      STORAGE                       */
@RF00288 LA    RETCODE1,28                                         0294
*       RFY                                                        0295
*        (R0,                                                      0295
*         R1,                                                      0295
*         R8,                                                      0295
*         R15) UNRSTD;                                             0295
*     END;                                                         0296
*   RFY                                                            0297
*    (R14,                                                         0297
*     R15) RSTD;                                                   0297
@RC00146 DS    0H                                                  0298
*   R14=RETADDR1;                   /* GET RETURN ADDRESS            */
         L     R14,RETADDR1                                        0298
*   R15=RETCODE1;                   /* LOAD RETURN CODE              */
         LR    R15,RETCODE1                                        0299
*   RFY                                                            0300
*    (R14,                                                         0300
*     R15) UNRSTD;                                                 0300
*   END REBUILD;                    /* RETURN TO MAINLINE            */
         B     @EL00002                                            0301
         EJECT
*                                                                  0302
*/*  MACCOMP Y-4SC1CW/PZD81                                          */
*/*  MACSTAT Y-475082/415304                                         */
*/********************************************************************/
*/*                                                                  */
*/*  NAME:  ILRAFS00                                                 */
*/*                                                                  */
*/*  STATUS:  OS/VS2 RELEASE 4.1, LEVEL 0                            */
*/*                                                                  */
*/*  ENTRY POINT:  ILRAFS00                                          */
*/*                                                                  */
*/*  FUNCTION:  THIS SUBROUTINE FREES AN ASPCT.                      */
*/*                                                                  */
*/*  INPUT:  ADDRESS OF ASPCT IN REGISTER 1.                         */
*/*          LENGTH OF ASPCT IN REGISTER 0.                          */
*/*                                                                  */
*/*  PROCESS:  TWO LOOPS, ONE TO FREE ASST EXTENSIONS AND ONE TO     */
*/*            FREE LPME EXTENSIONS, ARE EXECUTED.  EACH USES THE    */
*/*            SUBROUTINE AFSFREE TO INVOKE FREEMAIN.  A FINAL CALL  */
*/*            TO AFSFREE FREES THE BASE ASPCT EXTN.                 */
*/*                                                                  */
*/*  OUTPUT:  RETURN CODE IN REGISTER 15.                            */
*/*             00 = NORMAL RETURN                                   */
*/*             44 = FREEMAIN FAILURE                                */
*/*                                                                  */
*/*  EXIT-NORMAL:  RETURN TO CALLER WITH RETURN CODE (SEE OUTPUT)    */
*/*                                                                  */
*/*  EXIT-ERROR:  NONE                                               */
*/*                                                                  */
*/*  EXTERNAL REFERENCES:  FREEMAIN                                  */
*/*                                                                  */
*/*  REGISTERS CLOBBERED:  0 AND 1, 14 AND 15                        */
*/*                                                                  */
*/*  MAPPING MACROS USED:  ILRASPCT                                  */
*/*                                                                  */
*/*  NOTES:  DUE TO PLS OPTIMIZATION, RESTRICT ALL NECESSARY         */
*/*          REGISTERS AROUND THIS ROUTINE.                          */
*/*          INVOKING ROUTINE MUST HOLD THE LOCAL LOCK, OR HAVE      */
*/*          SPECIFIED %AFSSVC=YES.                                  */
*/*          ALL LABELS AND DATA AREAS CREATED BY THIS ROUTINE BEGIN */
*/*          WITH THE THREE CHARACTERS 'AFS'.  THE CALLING MODULE    */
*/*          MUST INCLUDE SUFFICIENT WORKSPACE FOR THIS ROUTINE'S    */
*/*          DATA AREAS.  THIS AMOUNT IS COMPILER DEPENDENT WITH A   */
*/*          MAXIMUM REQUIREMENT OF 46 BYTES.  THIS ROUTINE ALSO     */
*/*          REQUIRES THAT THE CALLING MODULE DECLARES REGISTERS     */
*/*          R0-R15.  THE MAPPING MACRO LISTED ABOVE MUST BE         */
*/*          INCLUDED.  THE BASE POINTER FOR THE ASPCT IS NOT        */
*/*          REQUIRED BY THIS SUBROUTINE.                            */
*/*                                                                  */
*/*  METHOD OF ACCESS:                                               */
*/*          %AFSSVC='YES' IF THE INVOKING ROUTINE MUST USE AN SVC   */
*/*          %AFSSVC='NO' IF BRANCH ENTRY REQUIRED                   */
*/*          %INCLUDE SYSLIB(ILRAFS00)                               */
*/********************************************************************/
*/*ILRAFS00: CHART (AREF)                                            */
*/*HEADER                                                          0302
*/*            ILRAFS00 - FREE ASPCT STORAGE                         */
*/*ILRAFS00: E ENTRY                                                 */
*/*         P  SAVE THE RETURN ADDRESS                               */
*/*         P  SAVE PTR TO ASPCT BASE                                */
*/*         P  SAVE THE LENGTH OF ASPCT                              */
*/*         D  (YES,,NO,%AFS01A) SPECIFIED LENGTH THAT OF ASPCT?     */
*/*         P  (,%AFS01B) SET SUBPOOL ID TO 255                      */
*/*%AFS01A: P  SET SUBPOOL ID TO 230                                 */
*/*%AFS01B: D  (YES,,NO,%AFS06) ARE THERE ANY EXTENSIONS?            */
*/*         P  INITIALIZE BASE ARRAY SUBSCRIPT TO ONE                */
*/*         P  INITIALIZE ASST EXT ARRAY SUBSCRIPT TO TWO            */
*/*%AFS01:  P  GET PTR TO ASST EXTENSION                             */
*/*%AFS02:  P  GET PTR TO LPME EXTENSION                             */
*/*%AFS02A: S  AFSFREE: FREE AN LPME EXTENSION                       */
*/*         D  (YES,%AFS03,NO,) RETURN CODE ZERO?                    */
*/*         P  INCREMENT THE ASST EXT ARRAY SUBSCRIPT                */
*/*         D  (YES,%AFS04,NO,) REACHED END OF ASST EXT ARRAY?       */
*/*         D  (YES,,NO,%AFS04) ANYMORE LPME EXTENSIONS?             */
*/*         P  SET PTR TO LPME EXTENSION                             */
*/*         D  (YES,%AFS02A,NO,%AFS04) IS THIS AN LPME EXTENSION?    */
*/*%AFS03:  P  INCREMENT THE ASST EXT ARRAY SUBSCRIPT                */
*/*         D  (YES,%AFS04,NO,) REACHED END OF ASST EXT ARRAY?       */
*/*         D  (YES,%AFS02,NO,) ANYMORE LPME EXTENSIONS?             */
*/*%AFS04:  P  SET WORK PTR TO ASST EXT                              */
*/*         S  AFSFREE: FREE AN ASST EXTENSION                       */
*/*         D  (YES,%AFS05,NO,) RETURN CODE ZERO?                    */
*/*         P  INCREMENT THE BASE ARRAY SUBSCRIPT                    */
*/*         D  (YES,%AFS06,NO,) REACHED END OF BASE ARRAY?           */
*/*         D  (YES,,NO,%AFS06) ANYMORE ASST EXTENSIONS?             */
*/*         P  GET PTR TO ASST EXTENSION                             */
*/*         D  (YES,,NO,%AFS06) IS THIS AN ASST EXTENSION            */
*/*         P  (,%AFS02) RESET ASST EXT ARRAY SUBSCRIPT TO ONE       */
*/*%AFS05:  P  INCREMENT THE BASE ARRAY SUBSCRIPT                    */
*/*         D  (YES,%AFS06,NO,) REACHED END OF BASE ARRAY            */
*/*         D  (YES,,NO,%AFS06) ANYMORE ASST EXTENSIONS?             */
*/*         P  (,%AFS01) RESET ASST EXT ARRAY SUBSCRIPT TO ONE       */
*/*%AFS06:  P  SET THE WORK PTR TO ASPCT BASE                        */
*/*         S  AFSFREE: FREE THE ASPCT BASE                          */
*/*         R  RETURN TO CALLER                                      */
*                                                                  0302
         EJECT
*ILRAFS00:                                                         0302
*   PROCEDURE OPTIONS(NOSAVE,NOSAVEAREA);                          0302
*                                                                  0302
ILRAFS00 DS    0H                                                  0303
*/*A-000000-999999                                           @Z40WPWH*/
*                                                                  0303
*   DECLARE                                                        0303
*     AFSASPCT PTR(31),             /* PTR TO ASPCT BASE             */
*     AFSEXPTR PTR(31),             /* PTR TO ASPCT EXTENSIONS       */
*     AFSLNGTH FIXED(31),           /* FREEMAIN LENGTH               */
*     AFSWORK PTR(31),              /* FREEMAIN ADDRESS              */
*     AFSRET1 FIXED(31),            /* INTERNAL RETURN CODE          */
*     AFSRET2 FIXED(31),            /* INTERNAL RETURN CODE          */
*     AFSA FIXED(31),               /* ASST EXT ARRAY SUBSCRIPT      */
*     AFSSPID FIXED(31),            /* SUBPOOL ID FOR FREEMAIN       */
*     AFSB FIXED(15),               /* BASE ARRAY SUBSCRIPT          */
*     AFSZERO FIXED(31) CONSTANT(0),                               0303
*     AFSSP230 FIXED(31) CONSTANT(230),                            0303
*     AFSSP255 FIXED(31) CONSTANT(255),                            0303
*     AFS257 FIXED(31) CONSTANT(257),                              0303
*     AFSONE FIXED(15) CONSTANT(1),                                0303
*     AFS44 FIXED(31) CONSTANT(44),                                0303
*     AFSTWO FIXED(15) CONSTANT(2),                                0303
*     AFSFIVE FIXED(15) CONSTANT(5),                               0303
*     AFSREG3 FIXED(31),            /* REGISTER 3 SAVEAREA           */
*     AFSREG4 FIXED(31),            /* REGISTER 4 SAVEAREA           */
*     AFSREG7 FIXED(31);            /* REGISTER 7 SAVEAREA           */
*   RFY                                                            0304
*    (R0,                                                          0304
*     R1,                                                          0304
*     R3,                                                          0304
*     R4,                                                          0304
*     R7,                                                          0304
*     R14) RSTD;                                                   0304
*   AFSRET1=R14;                    /* SAVE THE RETURN ADDRESS       */
         ST    R14,AFSRET1                                         0305
*   AFSASPCT=R1;                    /* SAVE PTR TO ASPCT BASE        */
         ST    R1,AFSASPCT                                         0306
*   AFSLNGTH=R0;                    /* SAVE INPUT LENGTH             */
         ST    R0,AFSLNGTH                                         0307
*   AFSREG3=R3;                     /* SAVE CALLER'S REG 3           */
         ST    R3,AFSREG3                                          0308
*   AFSREG4=R4;                     /* SAVE CALLER'S REG 4           */
         ST    R4,AFSREG4                                          0309
*   AFSREG7=R7;                     /* SAVE CALLER'S REG 7           */
         ST    R7,AFSREG7                                          0310
*   RFY                                                            0311
*    (R0,                                                          0311
*     R1,                                                          0311
*     R3,                                                          0311
*     R4,                                                          0311
*     R7,                                                          0311
*     R14) UNRSTD;                                                 0311
*   IF AFSLNGTH=LENGTH(ASPCT)       /* CHECK WHICH SUBPOOL TO USE    */
*     THEN                          /* ACTIVE ASPCT                  */
         L     @12,AFSLNGTH                                        0312
         C     @12,@CF01429                                        0312
         BNE   @RF00312                                            0312
*     AFSSPID=AFSSP255;             /* SET SUBPOOL FOR LSQA          */
         MVC   AFSSPID(4),@CF00105                                 0313
*   ELSE                            /* I/O BUFFERS                   */
*     AFSSPID=AFSSP230;             /* SET SUBPOOL FOR USER KEY      */
         B     @RC00312                                            0314
@RF00312 MVC   AFSSPID(4),@CF01412                                 0314
         EJECT
*                                                                  0315
*/********************************************************************/
*/*                                                                  */
*/*  A TEST IS NOW MADE FOR EXTENSIONS. IF THERE ARE EXTENSIONS,     */
*/*  THEY ARE FREED FIRST. FIRST ALL LPME EXTENSIONS FOR A PARTICULAR*/
*/*  ASST EXTENSION ARE FREED, THEN THAT ASST EXTENSION IS FREED.    */
*/*  THIS PROCESS IS REPEATED UNTIL ALL EXTENSIONS ARE FREED.        */
*/*                                                                  */
*/********************************************************************/
*                                                                  0315
*   IF AFSASPCT->ASPAEXCT^=AFSZERO  /* ARE THERE ANY EXTENSIONS?     */
*     THEN                                                         0315
@RC00312 L     @12,AFSASPCT                                        0315
         LH    @11,ASPAEXCT(,@12)                                  0315
         LTR   @11,@11                                             0315
         BZ    @RF00315                                            0315
*     DO;                           /* YES                           */
*       AFSB=AFSONE;                /* SET BASE SUBSCRIPT FOR FIRST
*                                      ASST EXTENSION                */
         LA    AFSB,1                                              0317
*       AFSA=AFSTWO;                /* SET ASST SUBSCRIPT FOR FIRST
*                                      LPME EXTENSION OFF FIRST ASST
*                                      EXTENSION. GET PTR TO FIRST 0318
*                                      ASST EXT                      */
         LA    AFSA,2                                              0318
*       AFSEXPTR=AFSASPCT->ASPASSTP(AFSB);                         0319
         L     @05,AFSASPCT                                        0319
         LR    @15,AFSB                                            0319
         SLA   @15,2                                               0319
         L     AFSEXPTR,ASPASSTP-4(@15,@05)                        0319
*       DO WHILE AFSEXPTR^=AFSZERO; /* LOOP UNTIL WE HAVE PROCESSED
*                                      ALL ASST EXTENSIONS GET PTR TO
*                                      LPME EXT                      */
         B     @DE00320                                            0320
@DL00320 DS    0H                                                  0321
*         AFSWORK=AFSEXPTR->ASPASSTE(AFSA);                        0321
         LR    @05,AFSA                                            0321
         SLA   @05,2                                               0321
         L     AFSWORK,ASPASSTE-4(@05,AFSEXPTR)                    0321
*         DO WHILE AFSWORK^=AFSZERO;/* LOOP UNTIL WE HAVE PROCESSED
*                                      ALL LPME EXTENSIONS FOR A   0322
*                                      PARTICULAR ASST EXTENSION     */
         B     @DE00322                                            0322
@DL00322 DS    0H                                                  0323
*           CALL AFSFREE;           /* FREE AN LPME EXTENSION        */
         BAL   @14,AFSFREE                                         0323
*           RFY                                                    0324
*             R15 RSTD;                                            0324
*           IF R15=AFSZERO          /* SUCCESSFUL FREEMAIN?          */
*             THEN                                                 0325
         LTR   R15,R15                                             0325
         BNZ   @RF00325                                            0325
*             DO;                   /* YES                           */
*               RFY                                                0327
*                 R15 UNRSTD;                                      0327
*               AFSA=AFSA+AFSONE;   /* INCREMENT ASST SUBSCRIPT      */
         AL    AFSA,@CF00080                                       0328
*               IF AFSA<AFS257      /* REACHED END OF ARRAY          */
*                 THEN              /* NO, GET PTR TO NEXT LPME EX   */
         C     AFSA,@CF01415                                       0329
         BNL   @RF00329                                            0329
*                 AFSWORK=AFSEXPTR->ASPASSTE(AFSA);                0330
         LR    @05,AFSA                                            0330
         SLA   @05,2                                               0330
         L     AFSWORK,ASPASSTE-4(@05,AFSEXPTR)                    0330
*               ELSE                /* YES, FORCE EXIT FROM LOOP     */
*                 AFSWORK=AFSZERO;                                 0331
         B     @RC00329                                            0331
@RF00329 SLR   AFSWORK,AFSWORK                                     0331
*             END;                  /* THIS IS THE LOGICAL END OF THE
*                                      DO WHILE LOOP FOR LPME      0332
*                                      EXTENSIONS. PHYSICAL END IS 0332
*                                      AFTER THE ERROR CODE PROCESS
*                                      ING FOR A NON-ZERO RETURN FROM
*                                      AFSFREE.                      */
         EJECT
*                                                                  0333
*/********************************************************************/
*/* THIS SECTION WILL PROCESS A NON-ZERO RETURN CODE FROM AFSFREE    */
*/* FOR LPME EXTENSIONS. PROCESSING CONSISTS OF GETTING THE POINTER  */
*/* TO THE NEXT LPME EXTENSION, AND VERIFYING THAT IT IS AN LPME     */
*/* EXTENSION. IF IT IS WE WILL CONTINUE FREEING LPME EXTENSIONS,    */
*/* IF NOT, WE WILL FORCE AN EXIT FROM THE LOOP.                     */
*/********************************************************************/
*                                                                  0333
*           ELSE                                                   0333
*             DO;                   /* NON-ZERO RETURN FROM AFSFREE  */
         B     @RC00325                                            0333
@RF00325 DS    0H                                                  0334
*               AFSA=AFSA+AFSONE;   /* INCREMENT ASST SUBSCRIPT      */
         AL    AFSA,@CF00080                                       0334
*               IF AFSA<AFS257      /* REACHED END OF ASST ARRAY?    */
*                 THEN                                             0335
         C     AFSA,@CF01415                                       0335
         BNL   @RF00335                                            0335
*                 DO;               /* NO GET PTR TO NEXT LPME EXT   */
*                   AFSWORK=AFSEXPTR->ASPASSTE(AFSA);/* IS THIS A  0337
*                                      VALID LPME EXT?               */
         LR    @05,AFSA                                            0337
         SLA   @05,2                                               0337
         L     AFSWORK,ASPASSTE-4(@05,AFSEXPTR)                    0337
*                   IF AFSWORK->ASPEIDNT^='LPME' THEN/* NO           */
         CLC   ASPEIDNT(4,AFSWORK),@CC01424                        0338
         BE    @RF00338                                            0338
*                     AFSWORK=AFSZERO;/* FORCE LOOP EXIT             */
         SLR   AFSWORK,AFSWORK                                     0339
*                 END;                                             0340
*               ELSE                /* YES, REACHED END OF ARRAY     */
*                 AFSWORK=AFSZERO;  /* FORCE LOOP EXIT               */
         B     @RC00335                                            0341
@RF00335 SLR   AFSWORK,AFSWORK                                     0341
*             END;                                                 0342
@RC00335 DS    0H                                                  0343
*         END;                      /* THIS IS THE PHYSICAL END OF 0343
*                                      THE DO WHILE LOOP FOR LPME  0343
*                                      EXTENSIONS.                   */
@RC00325 DS    0H                                                  0343
@DE00322 LTR   AFSWORK,AFSWORK                                     0343
         BNZ   @DL00322                                            0343
         EJECT
*                                                                  0344
*/********************************************************************/
*/* THIS SECTION PROCESSES THE ASST EXTENSIONS                       */
*/********************************************************************/
*                                                                  0344
*         AFSWORK=AFSEXPTR;         /* SET FREEMAIN POINTER TO AN  0344
*                                      ASST EXTENSION                */
         LR    AFSWORK,AFSEXPTR                                    0344
*         CALL AFSFREE;             /* FREE THE ASST EXTENSION       */
         BAL   @14,AFSFREE                                         0345
*         RFY                                                      0346
*           R15 RSTD;                                              0346
*         IF R15=AFSZERO            /* FREEMAIN SUCCESSFUL?          */
*           THEN                                                   0347
         LTR   R15,R15                                             0347
         BNZ   @RF00347                                            0347
*           DO;                     /* YES                           */
*             RFY                                                  0349
*               R15 UNRSTD;                                        0349
*             AFSB=AFSB+AFSONE;     /* INCREMENT BASE SUBSCRIPT      */
         LA    @08,1                                               0350
         ALR   AFSB,@08                                            0350
*             IF AFSB<AFSFIVE       /* REACHED END OF ARRAY?         */
*               THEN                                               0351
         C     AFSB,@CF00463                                       0351
         BNL   @RF00351                                            0351
*               DO;                 /* NO GET PTR TO NEXT ASST EXT   */
*                 AFSEXPTR=AFSASPCT->ASPASSTP(AFSB);               0353
         LR    @05,AFSB                                            0353
         SLA   @05,2                                               0353
         L     @01,AFSASPCT                                        0353
         L     AFSEXPTR,ASPASSTP-4(@05,@01)                        0353
*                 AFSA=AFSONE;      /* RESET ASST SUBSCRIPT          */
         LA    @05,1                                               0354
         LR    AFSA,@05                                            0354
*               END;                                               0355
*             ELSE                  /* YES, REACHED END OF ARRAY     */
*               AFSEXPTR=AFSZERO;   /* FORCE LOOP EXIT               */
         B     @RC00351                                            0356
@RF00351 SLR   AFSEXPTR,AFSEXPTR                                   0356
*           END;                    /* THIS THE LOGICAL END OF THE DO
*                                      WHILE LOOP FOR ASST         0357
*                                      EXTENSIONS. PHYSICAL END IS 0357
*                                      AFTER THE ERROR CODE PROCESS
*                                      ING FOR A NON-ZERO RETURN FROM
*                                      AFSFREE                       */
         EJECT
*                                                                  0358
*/********************************************************************/
*/* THIS SECTION WILL PROCESS A NON-ZERO RETURN CODE FROM AFSFREE    */
*/* FOR ASST EXTENSIONS. PROCESSING CONSISTS OF GETTING THE POINTER  */
*/* TO THE NEXT ASST EXTENSION, AND VERIFYING THAT IT IS AN ASST     */
*/* EXTENSION. IF IT IS WE WILL CONTINUE FREEING ASST EXTENSIONS,    */
*/* IF NOT, WE WILL FORCE AN EXIT FROM THE LOOP.                     */
*/********************************************************************/
*                                                                  0358
*         ELSE                                                     0358
*           DO;                     /* NON-ZERO RETURN CODE FROM   0358
*                                      AFSFREE                       */
         B     @RC00347                                            0358
@RF00347 DS    0H                                                  0359
*             AFSB=AFSB+AFSONE;     /* INCREMENT BASE SUBSCRIPT      */
         LA    @08,1                                               0359
         ALR   AFSB,@08                                            0359
*             IF AFSB<AFSFIVE       /* REACHED END OF ARRAY          */
*               THEN                                               0360
         C     AFSB,@CF00463                                       0360
         BNL   @RF00360                                            0360
*               DO;                 /* GET PTR TO NEXT ASST          */
*                 AFSEXPTR=AFSASPCT->ASPASSTP(AFSB);/* VALID ASST  0362
*                                      EXTENSION?                    */
         LR    @05,AFSB                                            0362
         SLA   @05,2                                               0362
         L     @01,AFSASPCT                                        0362
         L     AFSEXPTR,ASPASSTP-4(@05,@01)                        0362
*                 IF AFSEXPTR->ASPEIDNT='ASST' THEN/* YES            */
         CLC   ASPEIDNT(4,AFSEXPTR),@CC01425                       0363
         BNE   @RF00363                                            0363
*                   AFSA=AFSONE;    /* RESET ASST SUBSCRIPT          */
         LA    @05,1                                               0364
         LR    AFSA,@05                                            0364
*                 ELSE              /* NO                            */
*                   AFSEXPTR=AFSZERO;/* FORCE LOOP EXIT              */
         B     @RC00363                                            0365
@RF00363 SLR   AFSEXPTR,AFSEXPTR                                   0365
*               END;                                               0366
*             ELSE                  /* YES, REACHED END OF ARRAY     */
*               AFSEXPTR=AFSZERO;   /* FORCE LOOP EXIT               */
         B     @RC00360                                            0367
@RF00360 SLR   AFSEXPTR,AFSEXPTR                                   0367
*           END;                                                   0368
@RC00360 DS    0H                                                  0369
*       END;                        /* PHYSICAL END OF DO WHILE LOOP
*                                      FOR ASST EXTENSIONS           */
@RC00347 DS    0H                                                  0369
@DE00320 LTR   AFSEXPTR,AFSEXPTR                                   0369
         BNZ   @DL00320                                            0369
*     END;                                                         0370
         EJECT
*                                                                  0371
*/********************************************************************/
*/* THIS SECTION FREES THE ASPCT BASE                                */
*/********************************************************************/
*                                                                  0371
*   AFSWORK=AFSASPCT;               /* GET PTR TO THE ASPCT BASE     */
@RF00315 L     AFSWORK,AFSASPCT                                    0371
*   CALL AFSFREE;                   /* FREE THE BASE                 */
         BAL   @14,AFSFREE                                         0372
         EJECT
*   RFY                                                            0373
*    (R3,                                                          0373
*     R4,                                                          0373
*     R7,                                                          0373
*     R14) RSTD;                                                   0373
*   R3=AFSREG3;                     /* RESTORE CALLER'S REG 3        */
         L     R3,AFSREG3                                          0374
*   R4=AFSREG4;                     /* RESTORE CALLER'S REG 4        */
         L     R4,AFSREG4                                          0375
*   R7=AFSREG7;                     /* RESTORE CALLER'S REG 7        */
         L     R7,AFSREG7                                          0376
*   R14=AFSRET1;                    /* GET RETURN ADDRESS            */
         L     R14,AFSRET1                                         0377
*   RETURN;                         /* RETURN TO CALLER              */
@EL00003 DS    0H                                                  0378
@EF00003 DS    0H                                                  0378
@ER00003 BR    @14                                                 0378
*   RFY                                                            0379
*    (R3,                                                          0379
*     R4,                                                          0379
*     R7,                                                          0379
*     R14) UNRSTD;                                                 0379
         EJECT
*                                                                  0380
*/********************************************************************/
*/*                                                                  */
*/*  AFSFREE:  FREE ASPCT EXTN OF STORAGE                            */
*/*                                                                  */
*/*  INPUT:  ADDRESS OF EXTN IN REGISTER 1                           */
*/*                                                                  */
*/*  PROCESS:  SET UP REGS, ISSUE FREEMAIN MACRO TO FREE ASPCT EXTN. */
*/*                                                                  */
*/*  OUTPUT:  RETURN CODE IN REGISTER 15                             */
*/*             00 - NORMAL RETURN                                   */
*/*             44 - FREEMAIN RETURNED ERROR CODE                    */
*/*                                                                  */
*/********************************************************************/
*/*AFSFREE: CHART (AREF)                                             */
*/*HEADER                                                          0380
*/*  ILRAFS00                                                      0380
*/* AFSFREE - FREEMAIN THE ASPCT                                     */
*/*AFSFREE: E  ENTRY                                                 */
*/*         P  SAVE THE RETURN ADDRESS                               */
*/*         N  THIS NEXT TEST AND RESULTING LEGS OF CODE, IS A MACRO */
*/*         N  PASS TEST AND EXPANSION.                              */
*/*         D  (YES,,NO,%AFS07) SVC OK?                              */
*/*         P  LOAD REG 14 WITH SUBPOOL ID                           */
*/*         P  LOAD REG 0 WITH LENGTH                                */
*/*         P  LOAD REG 1 WITH ADDRESS OF AREA TO BE FREED           */
*/*         S  (,%AFS08) FREEMAIN: FREE THE ASPCT                    */
*/*%AFS07:  P  LOAD REG 0 WITH LENTH                                 */
*/*         P  LOAD REG 1 WITH ADDRESS OF AREA TO BE FREED           */
*/*         P  LOAD REG 4 WITH CURRENT TCB ADDRESS                   */
*/*         P  LOAD REG 7 WITH CURRENT ASCB ADDRESS                  */
*/*         P  LOAD REG 3 WITH SUBPOOL ID                            */
*/*         S  IEAVGM00: FREE THE ASPCT                              */
*/*%AFS08:  D  (YES,%AFS09,NO,) ZERO RETURN CODE?                    */
*/*         P  SAVE FREEMAINS RETURN CODE                            */
*/*         P  SET RETURN CODE TO 68                                 */
*/*%AFS09:  R  RETURN TO MAINLINE                                    */
*                                                                  0380
         EJECT
*AFSFREE:                           /* FREEMAIN AN EXTN OF ASPCT     */
*   PROCEDURE OPTIONS(NOSAVE,NOSAVEAREA);                          0380
AFSFREE  DS    0H                                                  0381
*   RFY                                                            0381
*     R14 RSTD;                                                    0381
*   AFSRET2=R14;                    /* SAVE THE RETURN ADDRESS       */
         ST    R14,AFSRET2                                         0382
*   RFY                                                            0383
*    (R0,                                                          0383
*     R1,                                                          0383
*     R3,                                                          0383
*     R4,                                                          0383
*     R7) RSTD;                                                    0383
*   R0=AFSLNGTH;                    /* GET THE LENGTH OF AREA TO BE
*                                      FREED                         */
         L     R0,AFSLNGTH                                         0384
*   R1=AFSWORK;                     /* GET ADDRESS OF AREA TO FREE   */
         LR    R1,AFSWORK                                          0385
*   R4=PSATOLD;                     /* GET CURRENT TCB ADDRESS       */
         L     R4,PSATOLD                                          0386
*   R7=PSAAOLD;                     /* GET CURRENT ASCB ADDRESS      */
         L     R7,PSAAOLD                                          0387
*   R3=AFSSPID;                     /* GET SUBPOOL ID                */
         L     R3,AFSSPID                                          0388
*   GENERATE REFS(R0,R1,R3,R4,R7,CVTCRMN,CVTMAP);                  0389
        FREEMAIN RC,A=(1),LV=(0),SP=(3),BRANCH=YES
*   RFY                                                            0390
*    (R0,                                                          0390
*     R1,                                                          0390
*     R3,                                                          0390
*     R4,                                                          0390
*     R7,                                                          0390
*     R14) UNRSTD;                                                 0390
*   RFY                                                            0391
*    (R14,                                                         0391
*     R15) RSTD;                                                   0391
*   IF R15^=AFSZERO                 /* FREEMAIN SUCCESSFUL?          */
*     THEN                          /* NO                            */
         LTR   R15,R15                                             0392
         BZ    @RF00392                                            0392
*     R15=AFS44;                    /* SET RETURN CODE TO 44         */
         LA    R15,44                                              0393
*   R14=AFSRET2;                    /* GET RETURN ADDRESS            */
@RF00392 L     R14,AFSRET2                                         0394
*   RFY                                                            0395
*    (R14,                                                         0395
*     R15) UNRSTD;                                                 0395
*   END AFSFREE;                                                   0396
@EL00004 DS    0H                                                  0396
@EF00004 DS    0H                                                  0396
@ER00004 BR    @14                                                 0396
*   END ILRAFS00;                                                  0397
*   END ILRACT                                                     0398
*                                                                  0398
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (ILRACE  )                                       */
*/*%INCLUDE SYSLIB  (ILRASMVT)                                       */
*/*%INCLUDE SYSLIB  (ILRASPCT)                                       */
*/*%INCLUDE SYSLIB  (ILREPATH)                                       */
*/*%INCLUDE SYSLIB  (ILRLGE  )                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (ILRAFS00)                                       */
*                                                                  0398
*       ;                                                          0398
@DATA    DS    0H
@DATD    DSECT
         DS    0F
ILRACT   CSECT
         DS    0F
@CF00080 DC    F'1'
@CF00101 DC    F'2'
@CF00463 DC    F'5'
@CF01412 DC    F'230'
@CF00105 DC    F'255'
@CF00033 DC    F'256'
@CF01415 DC    F'257'
@CF01429 DC    F'1088'
@CH01429 EQU   @CF01429+2
@DATD    DSECT
         DS    0D
ASMVTWPT DS    A
ASPCTPTR DS    A
LPMEPTR  DS    A
LGEPTR   DS    A
RETCODE  DS    F
RETADDR1 DS    F
REBASPCT DS    A
LSQASIZE DS    F
BASE     DS    F
ASST     DS    F
ASSTEXT  DS    F
LPMEXT   DS    F
AFSASPCT DS    A
AFSLNGTH DS    F
AFSRET1  DS    F
AFSRET2  DS    F
AFSSPID  DS    F
AFSREG3  DS    F
AFSREG4  DS    F
AFSREG7  DS    F
PARMLIST DS    CL12
         ORG   PARMLIST
@NM00001 DS    AL4
         ORG   @NM00001
OPCODE   DS    CL1
@NM00002 DS    CL3
         ORG   PARMLIST+4
SSYMPTR  DS    AL4
EPATHPTR DS    AL4
         ORG   PARMLIST+12
SAVEREGA DS    CL72
         ORG   SAVEREGA
@NM00003 DS    CL12
SAVREGSA DS    CL60
         ORG   SAVEREGA+72
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
ILRACT   CSECT
         NOPR  ((@ENDDATD-@DATD)/257*16)
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV00112 DC    V(ILRVSAMI)
         DS    0D
@CC01424 DC    C'LPME'
@CC01425 DC    C'ASST'
ACTPATCH DS    CL160
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
AFSB     EQU   @11
AFSA     EQU   @12
AFSWORK  EQU   @06
AFSEXPTR EQU   @08
ASSTEPTR EQU   @12
LPMECNTL EQU   @07
LSQAPTR  EQU   @03
RETCODE1 EQU   @03
ASPEXPTR EQU   @08
ACEPTR   EQU   @02
R0       EQU   @00
R1       EQU   @01
R3       EQU   @03
R4       EQU   @04
R7       EQU   @07
R8       EQU   @08
R9       EQU   @09
R10      EQU   @10
R11      EQU   @11
GPR11P   EQU   @11
R12      EQU   @12
GPR12P   EQU   @12
R13      EQU   @13
GPR13P   EQU   @13
R14      EQU   @14
GPR14P   EQU   @14
R15      EQU   @15
EPAPTR   EQU   @04
ASMVTPTR EQU   @03
R2       EQU   @02
R5       EQU   @05
R6       EQU   @06
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
FLCCVT   EQU   FLCICCW2
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSATOLD  EQU   PSA+540
PSAAOLD  EQU   PSA+548
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSALITA  EQU   PSA+764
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
ILRSLOTV EQU   0
ACE      EQU   0
ACEFLG1  EQU   ACE+9
ACEFLG3  EQU   ACE+11
ACELGE   EQU   ACE+12
ACELGN   EQU   ACE+16
ACERPN   EQU   ACELGN+4
ACESYM   EQU   ACE+24
ACESRCID EQU   ACESYM
ASMVT    EQU   0
ASMFLAG1 EQU   ASMVT
ASMFLAG2 EQU   ASMVT+1
ASMSTAGQ EQU   ASMVT+32
ASMPCCWQ EQU   ASMVT+64
ASMSLOTV EQU   ASMVT+128
ASMLSAI  EQU   ASMVT+144
ASMGOSQS EQU   ASMVT+152
ASMPEX   EQU   ASMVT+224
ASMBWKPC EQU   ASMVT+312
ASMWKSA1 EQU   ASMVT+368
ASMWKSA2 EQU   ASMVT+448
ASMWKSA3 EQU   ASMVT+528
ASMWKSA4 EQU   ASMVT+608
ASMWKSA5 EQU   ASMVT+688
ASMPOOLS EQU   0
ASMCPAVQ EQU   ASMPOOLS+8
ASMCPAVL EQU   ASMCPAVQ
ASMCPRSQ EQU   ASMPOOLS+16
ASPCT    EQU   0
ASPHDR   EQU   ASPCT
ASPLGID  EQU   ASPHDR+4
ASPBKEY  EQU   ASPHDR+8
ASPASCB  EQU   ASPHDR+20
ASPLGE   EQU   ASPHDR+24
ASPFLAG  EQU   ASPHDR+28
ASPMAXPN EQU   ASPHDR+32
ASPBKSLT EQU   ASPHDR+36
ASPSAVCT EQU   ASPHDR+40
ASPLEXCT EQU   ASPHDR+44
ASPAEXCT EQU   ASPHDR+46
ASPASSTP EQU   ASPCT+48
ASPEXTSN EQU   0
ASPEHDR  EQU   ASPEXTSN
ASPEIDNT EQU   ASPEHDR
ASPEXKEY EQU   ASPEHDR+8
ASPSECTA EQU   ASPEXTSN+64
ASPLPME  EQU   0
ASPLPFLG EQU   ASPLPME
ASPVLSID EQU   ASPLPME+1
EPATH    EQU   0
EPAVSAM  EQU   EPATH
EPAOWKA  EQU   EPAVSAM
EPAVWKA  EQU   EPAVSAM+4
EPATMWKA EQU   EPAVWKA
EPAAASP  EQU   EPAVSAM+8
EPABASP  EQU   EPAVSAM+12
EPARASP  EQU   EPAVSAM+16
EPARTYRG EQU   EPAVSAM+20
EPABKSLT EQU   EPARTYRG
EPAFLAG1 EQU   EPAVSAM+24
EPAGRPOP EQU   EPAFLAG1
EPAACT   EQU   EPAGRPOP
EPAFLAG2 EQU   EPAVSAM+25
EPARBASP EQU   EPAVSAM+44
EPARSIZE EQU   EPAVSAM+48
LGE      EQU   0
LGEPROCQ EQU   LGE
LGEFLAG1 EQU   LGE+8
LGESLTCT EQU   LGE+10
LGEASPCT EQU   LGE+12
LGELGID  EQU   LGE+20
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIERLC EQU   CVTMAP+144
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
ILRPEX   EQU   0
GMACELL  EQU   0
GMANEXT  EQU   GMACELL
CVTPTR   EQU   FLCCVT
ASM1WKSV EQU   ASMWKSA1
ASM1RGSV EQU   ASM1WKSV
ASM1WRKA EQU   ASM1WKSV+60
ASM2WKSV EQU   ASMWKSA2
ASM2WRKA EQU   ASM2WKSV+52
ASM2FLGS EQU   ASM2WRKA+12
ASM3WKSV EQU   ASMWKSA3
ASM4WKSV EQU   ASMWKSA4
ASM4RGSV EQU   ASM4WKSV
ASM5WKSV EQU   ASMWKSA5
ASM5RGSV EQU   ASM5WKSV
ASPASST  EQU   ASPSECTA
ASPASSTE EQU   ASPASST
PSARSVTE EQU   PSARSVT
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTCRMN  EQU   CVTS01+156
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
ASPLPMEE EQU   ASPSECTA
FLC      EQU   PSA
*                                      START UNREFERENCED COMPONENTS
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTSUSP  EQU   CVTS01+692
CVTT6SVC EQU   CVTS01+688
CVTCDAL  EQU   CVTS01+684
CVTTCTL  EQU   CVTS01+680
CVTRSUME EQU   CVTS01+676
CVTJTERM EQU   CVTS01+672
CVTASMRM EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
ASM5FLGS EQU   ASM5WKSV+64
ASM5AIA  EQU   ASM5WKSV+60
ASM5GCTR EQU   ASM5WKSV+56
ASM5SR14 EQU   ASM5WKSV+52
@NM00009 EQU   ASM5RGSV+4
ASM5RG2  EQU   ASM5RGSV
@NM00008 EQU   ASM4RGSV+4
ASM4RG2  EQU   ASM4RGSV
ASM3SR13 EQU   ASM3WKSV+28
ASM3R14B EQU   ASM3WKSV+24
ASM3R14A EQU   ASM3WKSV+20
ASM3GRPA EQU   ASM3WKSV+16
ASM3TMPA EQU   ASM3WKSV+12
ASM3PIOP EQU   ASM3WKSV+8
ASM3GENQ EQU   ASM3WKSV+4
ASM3SWPQ EQU   ASM3WKSV
ASM2SR14 EQU   ASM2WRKA+16
@NM00007 EQU   ASM2WRKA+13
ASM2WFLG EQU   ASM2FLGS
ASM2RFLG EQU   ASM2FLGS
ASM2DUPQ EQU   ASM2WRKA+8
ASM2CAQ  EQU   ASM2WRKA+4
ASM2PAQ  EQU   ASM2WRKA
ASM2RGSV EQU   ASM2WKSV
ASM1NXTA EQU   ASM1WRKA+4
ASM1ASCB EQU   ASM1WRKA
ASM1RG15 EQU   ASM1RGSV+56
@NM00006 EQU   ASM1RGSV+4
ASM1RG1  EQU   ASM1RGSV
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00048 EQU   CVTFIX+248
@NM00047 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTRSV99 EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTRSV28 EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTHEAD  EQU   CVTMAP+160
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTIOQET EQU   CVTMAP+120
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
@NM00022 EQU   LGE+24
LGENEXT  EQU   LGE+16
@NM00021 EQU   LGE+9
LGERSV5  EQU   LGEFLAG1
LGERSV4  EQU   LGEFLAG1
LGERSV3  EQU   LGEFLAG1
LGERSV2  EQU   LGEFLAG1
LGESAVRQ EQU   LGEFLAG1
LGERELLG EQU   LGEFLAG1
LGEGRINP EQU   LGEFLAG1
LGEWRKPD EQU   LGEFLAG1
LGEPROCL EQU   LGEPROCQ+4
LGEPROCF EQU   LGEPROCQ
@NM00020 EQU   EPAVSAM+50
EPAACE   EQU   EPAVSAM+40
EPASRB   EQU   EPAVSAM+36
EPALGEP  EQU   EPAVSAM+32
EPALGVTP EQU   EPAVSAM+28
EPALSIZE EQU   EPAVSAM+26
@NM00019 EQU   EPAFLAG2
EPARECUR EQU   EPAFLAG2
EPATMI   EQU   EPAFLAG2
EPAMAST  EQU   EPAFLAG2
EPABUILD EQU   EPAFLAG2
EPACOLD  EQU   EPAFLAG2
EPAWARM  EQU   EPAFLAG2
EPATMXIT EQU   EPAFLAG2
EPARPLB  EQU   EPAFLAG1
EPAUNSAV EQU   EPAFLAG1
EPAASGN  EQU   EPAFLAG1
EPAACASR EQU   EPAFLAG1
EPASAVE  EQU   EPAGRPOP
EPARLG   EQU   EPAGRPOP
EPAVSAMI EQU   EPAFLAG1
EPATMISV EQU   EPABKSLT
EPATMACB EQU   EPARASP
EPATMIBA EQU   EPABASP
EPADSLST EQU   EPAAASP
EPASWKA  EQU   EPATMWKA
ASPSLOT  EQU   ASPVLSID+1
ASPPRTNN EQU   ASPVLSID
@NM00018 EQU   ASPLPFLG
ASPLSVRP EQU   ASPLPFLG
ASPLIOER EQU   ASPLPFLG
ASPLOPIN EQU   ASPLPFLG
ASPLSAVE EQU   ASPLPFLG
ASPLVALD EQU   ASPLPFLG
@NM00017 EQU   ASPEXTSN+1088
@NM00016 EQU   ASPEHDR+24
ASPASSTI EQU   ASPEHDR+22
@NM00015 EQU   ASPEHDR+21
ASPASSTN EQU   ASPEHDR+20
ASPEXTNM EQU   ASPEXKEY+8
ASPESSYM EQU   ASPEXKEY
@NM00014 EQU   ASPEHDR+4
@NM00013 EQU   ASPCT+1088
ASPLPMES EQU   ASPCT+64
@NM00012 EQU   ASPHDR+29
@NM00011 EQU   ASPFLAG
ASPSAVRP EQU   ASPFLAG
ASPSAVED EQU   ASPFLAG
@NM00010 EQU   ASPBKEY+8
ASPSSYM  EQU   ASPBKEY
ASPIDENT EQU   ASPHDR
ASMCPRES EQU   ASMCPRSQ+4
ASMCPTAK EQU   ASMCPRSQ
ASMCPCNT EQU   ASMCPAVQ+4
ASMCPEXT EQU   ASMPOOLS+6
ASMCPSIZ EQU   ASMPOOLS+4
ASMCPID  EQU   ASMPOOLS
ASMRSV12 EQU   ASMVT+1000
ASMSAVE  EQU   ASMVT+928
ASMWKSA7 EQU   ASMVT+848
ASMWKSA6 EQU   ASMVT+768
ASMACEPC EQU   ASMVT+344
ASMSWKPC EQU   ASMVT+328
ASMIOEPC EQU   ASMVT+296
ASMRSV10 EQU   ASMVT+280
ASMPVACE EQU   ASMVT+276
ASMPIOFR EQU   ASMVT+272
ASMPVACQ EQU   ASMVT+268
ASMPMSGS EQU   ASMVT+264
ASMPMSG0 EQU   ASMVT+260
ASMPFRLG EQU   ASMVT+256
ASMPRLG  EQU   ASMVT+252
ASMPACT  EQU   ASMVT+248
ASMPSAV  EQU   ASMVT+244
ASMPCMP  EQU   ASMVT+240
ASMPCMPA EQU   ASMVT+236
ASMPCMPN EQU   ASMVT+232
ASMPCMPD EQU   ASMVT+228
ASMVRMTR EQU   ASMVT+220
ASMPSRBC EQU   ASMVT+216
ASMPSRMT EQU   ASMVT+212
ASMPSWPD EQU   ASMVT+208
ASMPTM   EQU   ASMVT+204
ASMPFRSW EQU   ASMVT+200
ASMPFRSL EQU   ASMVT+196
ASMPQIOE EQU   ASMVT+192
ASMRSV8  EQU   ASMVT+184
ASMTASCB EQU   ASMVT+180
ASMRLGWQ EQU   ASMVT+176
ASMRLGRQ EQU   ASMVT+172
ASMTMECB EQU   ASMVT+168
ASMTCBPT EQU   ASMVT+164
ASMREQCT EQU   ASMVT+160
ASMGOSWK EQU   ASMGOSQS+4
ASMGOSWT EQU   ASMGOSQS
ASMLSAIH EQU   ASMLSAI+4
ASMLSAIL EQU   ASMLSAI
ASMCINV  EQU   ASMVT+140
ASMSTGXA EQU   ASMVT+136
ASMLGVT  EQU   ASMVT+132
ASMERRS  EQU   ASMVT+124
ASMNVSC  EQU   ASMVT+120
ASMVSC   EQU   ASMVT+116
ASMSLOTS EQU   ASMVT+112
ASMBKSLT EQU   ASMVT+108
ASMRSV7  EQU   ASMVT+92
ASMPSRB  EQU   ASMVT+88
ASMSRBCT EQU   ASMVT+84
ASMIOCNT EQU   ASMVT+80
ASMBURST EQU   ASMVT+76
ASMPCCWN EQU   ASMVT+72
ASMPCCWC EQU   ASMPCCWQ+4
ASMPCCWA EQU   ASMPCCWQ
ASMRSV6  EQU   ASMVT+48
ASMIORQC EQU   ASMVT+44
ASMIORQR EQU   ASMVT+40
ASMSTAGL EQU   ASMSTAGQ+4
ASMSTAGF EQU   ASMSTAGQ
ASMRSV5  EQU   ASMVT+28
ASMMSGBF EQU   ASMVT+24
ASMEREC  EQU   ASMVT+20
ASMTRPAG EQU   ASMVT+16
ASMGOS   EQU   ASMVT+12
ASMPART  EQU   ASMVT+8
ASMSART  EQU   ASMVT+4
ASMRSV4  EQU   ASMVT+2
ASMWARM  EQU   ASMFLAG2
ASMQUICK EQU   ASMFLAG2
ASMNOTPT EQU   ASMFLAG2
ASMNOTMR EQU   ASMFLAG2
ASMNOSAV EQU   ASMFLAG2
ASMCALLQ EQU   ASMFLAG2
ASMPLPAS EQU   ASMFLAG1
ASMCOMMF EQU   ASMFLAG1
ASMPLPAF EQU   ASMFLAG1
ASMNODPX EQU   ASMFLAG1
ASMRSV1  EQU   ASMFLAG1
ASMNOLCL EQU   ASMFLAG1
ASMNOCWQ EQU   ASMFLAG1
ASMDUPLX EQU   ASMFLAG1
@NM00005 EQU   ACE+40
ACESRBWK EQU   ACE+36
ACEECB   EQU   ACE+32
ACEAIAPT EQU   ACESYM+4
ACEVLSID EQU   ACESRCID+1
@NM00004 EQU   ACESRCID
ACETLPME EQU   ACERPN
ACELGID  EQU   ACELGN
ACERSV10 EQU   ACEFLG3
ACERSV9  EQU   ACEFLG3
ACERSV8  EQU   ACEFLG3
ACELPMEC EQU   ACEFLG3
ACERSV7  EQU   ACEFLG3
ACERSV6  EQU   ACEFLG3
ACEPRINO EQU   ACEFLG3
ACEGRPRQ EQU   ACEFLG3
ACEFLG2  EQU   ACE+10
ACERSV5  EQU   ACEFLG1
ACERSV4  EQU   ACEFLG1
ACERSV3  EQU   ACEFLG1
ACERSV2  EQU   ACEFLG1
ACENOACT EQU   ACEFLG1
ACEOVRID EQU   ACEFLG1
ACETRPWT EQU   ACEFLG1
ACEUSYM  EQU   ACEFLG1
ACEOP    EQU   ACE+8
ACEBQPA  EQU   ACE+4
ACEFQPA  EQU   ACE
@NM00046 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00045 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00044 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00043 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSARV013 EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAANEW  EQU   PSA+544
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00042 EQU   FLCFSA
@NM00041 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00040 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00039 EQU   FLCIOA
@NM00038 EQU   FLCMCLA+15
@NM00037 EQU   FLCMCLA+14
@NM00036 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00035 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00034 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00033 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00032 EQU   FLCPER
@NM00031 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00030 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00029 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00028 EQU   FLCPIILC
@NM00027 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00026 EQU   FLCSVILC
@NM00025 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00024 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00023 EQU   FLCICCW2+4
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
*                                      END UNREFERENCED COMPONENTS
@RC00209 EQU   @RC00208
@RC00329 EQU   @RC00325
@RF00338 EQU   @RC00335
@RC00351 EQU   @RC00347
@RC00363 EQU   @RC00360
@ENDDATA EQU   *
         END   ILRACT,(C'PLS1507',0701,76087)
