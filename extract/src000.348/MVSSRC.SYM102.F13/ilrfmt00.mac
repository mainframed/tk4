         TITLE 'ILRFMT00   ASM CONTROL-BLOCK FORMATTING MODULE         *
                        '
ILRFMT00 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'ILRFMT00  78.136'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @09,0                                               0001
@PSTART  LA    @10,4095(,@09)                                      0001
         LA    @12,4095(,@10)                                      0001
         USING @PSTART,@09                                         0001
         USING @PSTART+4095,@10                                    0001
         USING @PSTART+8190,@12                                    0001
         ST    @13,@SA00001+4                                      0001
         LA    @14,@SA00001                                        0001
         ST    @14,8(,@13)                                         0001
         LR    @13,@14                                             0001
*   ABDPLPTR=R1;                    /* GET ADDR OF PARM LIST         */
         ST    R1,ABDPLPTR                                         0083
*   IF(ADPLSYTM^=OFF                /* MUST BE VS/2 SYSTEM           */
*       ×ADPLCVT=NULLPTR) THEN      /* CHECK FOR CVT PTR             */
         L     @11,ABDPLPTR                                        0084
         TM    ADPLSYTM(@11),B'01000000'                           0084
         BNZ   @RT00084                                            0084
         ICM   @08,15,ADPLCVT(@11)                                 0084
         BNZ   @RF00084                                            0084
@RT00084 DS    0H                                                  0085
*     DO;                                                          0085
*       R1=ENVMSG;                  /* GET ADDRESS OF ERROR MSG      */
         L     R1,ENVMSG                                           0086
*       CALL ERRMSG;                /* GO TO MESSAGE SEGMENT         */
         BAL   @14,ERRMSG                                          0087
*       RETURN CODE(0);             /* RETURN TO CALLER              */
         SLR   @15,@15                                             0088
         L     @13,4(,@13)                                         0088
         L     @14,12(,@13)                                        0088
         LM    @00,@12,20(@13)                                     0088
         BR    @14                                                 0088
*     END;                                                         0089
*                                                                  0089
*/********************************************************************/
*/*****    PRINT TITLE TO HEAD ALL PRINTED INFORMATION           *****/
*/********************************************************************/
*                                                                  0090
*   BUFFER(40:40+LENGTH(ASMTITLE))=ASMTITLE;/* SET UP BUFFER         */
@RF00084 L     @11,ABDPLPTR                                        0090
         L     @08,ADPLBUF(,@11)                                   0090
         MVI   BUFFER+69(@08),C' '                                 0090
         MVC   BUFFER+39(30,@08),ASMTITLE                          0090
*   R1=ABDPLPTR;                    /* PARM LIST PTR FOR PRINT       */
         LR    R1,@11                                              0091
*   CALL PRINT;                     /* PRINT OUT HEADER              */
         L     @15,ADPLPRNT(,@11)                                  0092
         BALR  @14,@15                                             0092
*   CALL PRINT;                     /* PRINT BLANK LINE              */
         L     @11,ABDPLPTR                                        0093
         L     @15,ADPLPRNT(,@11)                                  0093
         BALR  @14,@15                                             0093
*   CALL PRINT;                     /* PRINT BLANK LINE              */
         L     @11,ABDPLPTR                                        0094
         L     @15,ADPLPRNT(,@11)                                  0094
         BALR  @14,@15                                             0094
*   RFY                                                            0095
*     R1 UNRSTD;                                                   0095
*   CVTPTR=ADPLCVT;                 /* GET CVT PTR FROM PARMLIST     */
         L     @11,ABDPLPTR                                        0096
         L     @08,ADPLCVT(,@11)                                   0096
         ST    @08,CVTPTR                                          0096
*   DO;                             /* ILRMACCS (ASMVT) VIA(CVTASMVT)*/
*     RFY                                                          0098
*      (R0,                                                        0098
*       R1,                                                        0098
*       R14,                                                       0098
*       R15) RSTD;                                                 0098
*     R1=ABDPLPTR;                                                 0099
         LR    R1,@11                                              0099
*     R0=ADDR(CVTASMVT);            /* ADDR OF CELL WITH PTR         */
         LA    R0,CVTASMVT(,@08)                                   0100
*     CALL ACCESS;                  /* ACCESS PTR TO ASMVT           */
         L     @15,ADPLMEMA(,@11)                                  0101
         BALR  @14,@15                                             0101
*     IF R15=GOOD THEN                                             0102
         LTR   R15,R15                                             0102
         BNZ   @RF00102                                            0102
*       DO;                         /* FOUND PTR - NOW FIND BLOCK    */
*         R14=R0;                   /* CANNOT USE R0 AS BASE REG     */
         LR    R14,R0                                              0104
*         R0=CURRENT;               /* POINTER ITSELF                */
         L     R0,CURRENT(,R14)                                    0105
*         ASMVTPTR=R0;              /* SAVE POINTER                  */
         ST    R0,ASMVTPTR                                         0106
*         CALL ACCESS;              /* ACCESS ASMVT ITSELF           */
         L     @11,ABDPLPTR                                        0107
         L     @15,ADPLMEMA(,@11)                                  0107
         BALR  @14,@15                                             0107
*         IF R15^=GOOD THEN                                        0108
         SLR   @11,@11                                             0108
         CR    R15,@11                                             0108
         BE    @RF00108                                            0108
*           ASMVTPTR=NULLPTR;                                      0109
         ST    @11,ASMVTPTR                                        0109
*       END;                                                       0110
*     ELSE                                                         0111
*       ASMVTPTR=NULLPTR;                                          0111
         B     @RC00102                                            0111
@RF00102 SLR   @11,@11                                             0111
         ST    @11,ASMVTPTR                                        0111
*     RFY                                                          0112
*      (R0,                                                        0112
*       R1,                                                        0112
*       R14,                                                       0112
*       R15) UNRSTD;                                               0112
@RC00102 DS    0H                                                  0113
*   END;                            /* GET ADDR OF ASMVT             */
*   IF ASMVTPTR=NULLPTR THEN        /* IF ASMVT INACCESSIBLE         */
         ICM   @11,15,ASMVTPTR                                     0114
         BNZ   @RF00114                                            0114
*     DO;                                                          0115
*       RFY                                                        0116
*         R1 RSTD;                                                 0116
*       R1=CVTMSG;                  /* GET ADDRESS OF ERROR MSG      */
         L     R1,CVTMSG                                           0117
*       CALL ERRMSG;                /* GO TO MESSAGE SEGMENT         */
         BAL   @14,ERRMSG                                          0118
*       RETURN CODE(0);             /* RETURN TO CALLER              */
         SLR   @15,@15                                             0119
         L     @13,4(,@13)                                         0119
         L     @14,12(,@13)                                        0119
         LM    @00,@12,20(@13)                                     0119
         BR    @14                                                 0119
*       RFY                                                        0120
*         R1 UNRSTD;                                               0120
*     END;                                                         0121
*   ELSE                                                           0122
*     ;                             /* ACCESS OKAY FOR ASMVT         */
@RF00114 DS    0H                                                  0123
*                                                                  0123
*/********************************************************************/
*/*****    DETERMINE IF THIS DUMP IS THE CORRECT RELEASE         *****/
*/********************************************************************/
*                                                                  0123
*   RFY                                                            0123
*    (R0,                                                          0123
*     R1,                                                          0123
*     R15) RSTD;                                                   0123
*   R0=ASMVTPTR-24;                 /* POINT TO ASMVT MODULE ID      */
         L     R0,ASMVTPTR                                         0124
         SH    R0,@CH00198                                         0124
*   R1=ABDPLPTR;                    /* POINT TO PARM LIST            */
         L     @14,ABDPLPTR                                        0125
         LR    R1,@14                                              0125
*   CALL ACCESS;                    /* ACCESS MOD ID                 */
         L     @15,ADPLMEMA(,@14)                                  0126
         BALR  @14,@15                                             0126
*   IF R15=GOOD THEN                /* ACCESS WAS GOOD               */
         LTR   R15,R15                                             0127
         BNZ   @RF00127                                            0127
*     DO;                                                          0128
*       ASMIDPTR=R0;                /* SAVE ACCESSED ADDRESS         */
         LR    ASMIDPTR,R0                                         0129
*       IF ASMIDPTR->IDASM^=MODID THEN/* MODULE ID NOT PRESENT       */
         CLC   IDASM(8,ASMIDPTR),MODID                             0130
         BE    @RF00130                                            0130
*         DO;                                                      0131
*           R1=RELMSG;              /* GET CODE OF MESSAGE           */
         L     R1,RELMSG                                           0132
*           CALL ERRMSG;            /* GO TO MESSAGE SEGMENT         */
         BAL   @14,ERRMSG                                          0133
*           RETURN CODE(0);         /* RETURN TO CALLER              */
         SLR   @15,@15                                             0134
         L     @13,4(,@13)                                         0134
         L     @14,12(,@13)                                        0134
         LM    @00,@12,20(@13)                                     0134
         BR    @14                                                 0134
*         END;                                                     0135
*       ELSE                                                       0136
*         ;                         /* MODID OKAY - CONTINUE         */
@RF00130 DS    0H                                                  0137
*     END;                                                         0137
*   ELSE                            /* ACCESS FAILED FOR MODID       */
*     DO;                                                          0138
         B     @RC00127                                            0138
@RF00127 DS    0H                                                  0139
*       R1=CVTMSG;                  /* GET MESSAGE CODE              */
         L     R1,CVTMSG                                           0139
*       CALL ERRMSG;                /* GO TO MESSAGE SEGMENT         */
         BAL   @14,ERRMSG                                          0140
*       RETURN CODE(0);             /* RETURN TO CALLER              */
         SLR   @15,@15                                             0141
         L     @13,4(,@13)                                         0141
         L     @14,12(,@13)                                        0141
         LM    @00,@12,20(@13)                                     0141
         BR    @14                                                 0141
*     END;                                                         0142
*   RFY                                                            0143
*    (R0,                                                          0143
*     R1,                                                          0143
*     R15) UNRSTD;                                                 0143
@RC00127 DS    0H                                                  0144
*                                                                  0144
*/********************************************************************/
*/*  CALL ROUTINES TO FORMAT CONTROL BLOCKS                          */
*/********************************************************************/
*                                                                  0144
*   CALL FMTASMVT;                  /* CALL SEGMENT TO FMT ASMVT,  0144
*                                      ACES, AIAS, ERROR RECORD AND
*                                      MESSAGE BUFFER                */
         BAL   @14,FMTASMVT                                        0144
*   RFY                                                            0145
*    (R1,                                                          0145
*     R3,                                                          0145
*     R15) RSTD;                                                   0145
*   IF R15^=GOOD THEN               /* RET. CODE NOT GOOD    @ZM43074*/
         LTR   R15,R15                                             0146
         BZ    @RF00146                                            0146
*     DO;                                                          0147
*       R1=ASMVMSG;                 /* GET ADDRESS OF ERROR MSG      */
         L     R1,ASMVMSG                                          0148
*       CALL ERRMSG;                /* GO TO MESSAGE SEGMENT         */
         BAL   @14,ERRMSG                                          0149
*     END;                                                         0150
*   ELSE                                                           0151
*     ;                             /* RET CODE GOOD FROM FMTASMVT   */
@RF00146 DS    0H                                                  0152
*   R1=ABDPLPTR;                    /* SET UP PARAMETERS FOR CALL    */
         L     R1,ABDPLPTR                                         0152
*   R3=ASMVTPTR;                                                   0153
         L     R3,ASMVTPTR                                         0153
*   CALL ILRFMTPG;                  /* CALL SEGMENT TO FORMAT PAGING
*                                      RELATED CONTROL BLOCKS        */
         L     @15,@CV01270                                        0154
         BALR  @14,@15                                             0154
*   IF R15^=GOOD THEN               /* RETURN CODE NOT ZERO          */
         LTR   R15,R15                                             0155
         BZ    @RF00155                                            0155
*     DO;                                                          0156
*       IF R15=ERROR THEN           /* RETURN CODE IS FOUR           */
         CH    R15,@CH00168                                        0157
         BNE   @RF00157                                            0157
*         DO;                                                      0158
*           R1=PAGEMSG;             /* GET MESSAGE CODE              */
         L     R1,PAGEMSG                                          0159
*           CALL ERRMSG;            /* GO TO MESSAGE SEGMENT         */
         BAL   @14,ERRMSG                                          0160
*         END;                                                     0161
*       ELSE                        /* RETURN CODE IS EIGHT          */
*         DO;                                                      0162
         B     @RC00157                                            0162
@RF00157 DS    0H                                                  0163
*           R1=PARTMSG;             /* GET MESSAGE CODE              */
         L     R1,PARTMSG                                          0163
*           CALL ERRMSG;            /* GO TO MESSAGE SEGMENT         */
         BAL   @14,ERRMSG                                          0164
*         END;                                                     0165
*     END;                                                         0166
*   ELSE                                                           0167
*     ;                             /* RET CODE WAS GOOD-CONTINUE    */
@RF00155 DS    0H                                                  0168
*   R1=ABDPLPTR;                    /* SET UP PARAMETERS FOR CALL    */
@RC00155 L     R1,ABDPLPTR                                         0168
*   R3=ASMVTPTR;                                                   0169
         L     R3,ASMVTPTR                                         0169
*   CALL ILRFMTSW;                  /* CALL SEGMENT TO FORMAT      0170
*                                      SWAPPING RELATED BLOCKS       */
         L     @15,@CV01271                                        0170
         BALR  @14,@15                                             0170
*   IF R15^=GOOD THEN               /* RETURN CODE NOT ZERO          */
         LTR   R15,R15                                             0171
         BZ    @RF00171                                            0171
*     DO;                                                          0172
*       IF R15=ERROR THEN           /* RETURN CODE IS FOUR           */
         CH    R15,@CH00168                                        0173
         BNE   @RF00173                                            0173
*         DO;                                                      0174
*           R1=SWAPMSG;             /* GET MESSAGE CODE              */
         L     R1,SWAPMSG                                          0175
*           CALL ERRMSG;            /* GO TO MESSAGE SEGMENT         */
         BAL   @14,ERRMSG                                          0176
*         END;                                                     0177
*       ELSE                        /* RETURN CODE WAS EIGHT         */
*         DO;                                                      0178
         B     @RC00173                                            0178
@RF00173 DS    0H                                                  0179
*           R1=SARTMSG;             /* GET MESSAGE CODE              */
         L     R1,SARTMSG                                          0179
*           CALL ERRMSG;            /* GO TO MESSAGE SEGMENT         */
         BAL   @14,ERRMSG                                          0180
*         END;                                                     0181
*     END;                                                         0182
*   ELSE                                                           0183
*     ;                             /* RETURN CODE GOOD FROM SWAP    */
@RF00171 DS    0H                                                  0184
*   R1=ABDPLPTR;                    /* SET UP PARAMETERS FOR CALL    */
@RC00171 L     R1,ABDPLPTR                                         0184
*   CALL ILRFMTC;                   /* CALL SEGMENT TO FORMAT COMMON
*                                      SERVICE AREA PGT/XPT'S        */
         L     @15,@CV01272                                        0185
         BALR  @14,@15                                             0185
*   IF R15^=GOOD THEN               /* RETURN CODE NOT ZERO          */
         LTR   R15,R15                                             0186
         BZ    @RF00186                                            0186
*     DO;                                                          0187
*       R1=COMMSG;                  /* GET ADDRESS OF ERROR MSG      */
         L     R1,COMMSG                                           0188
*       CALL ERRMSG;                /* GO TO MESSAGE SEGMENT         */
         BAL   @14,ERRMSG                                          0189
*     END;                                                         0190
*   ELSE                                                           0191
*     ;                             /* RETURN CODE GOOD FROM COMMON  */
@RF00186 DS    0H                                                  0192
*   RFY                                                            0192
*    (R1,                                                          0192
*     R3,                                                          0192
*     R15) UNRSTD;                                                 0192
*                                                                  0193
*/********************************************************************/
*/*                                                                  */
*/* THIS SECTION CAUSES FORMATTING OF THE HEADERS AND OTHER BLOCKS   */
*/*  FOR EACH ADDRESS SPACE                                          */
*/*  1. GET THE MAXIMUM NUMBER OF ADDRESS SPACES FROM THE ASVT       */
*/*  2. THEN FOR EACH ENTRY, DO -                                    */
*/*     A. ACCESS ENTRY. IF ACCESS FAILS, PUT OUT MESSAGE AND LEAVE  */
*/*         LOOP                                                     */
*/*     B. CHECK VALID FLAG. IF ENTRY NOT VALID, GO ON TO NEXT ENTRY */
*/*     C. GET ASCB ADDRESS                                          */
*/*     D. PUT ASID INTO ABDUMP PARAMETER LIST                       */
*/*     E. GET RSMHD ADDRESS. IF UNAVAILABLE, GO ON TO NEXT ENTRY    */
*/*     F. CALL ILRFMTH TO FORMAT RSMHD, SPCT, ASMHD, AIA'S AND      */
*/*         PRIVATE AREA PGT/XPT'S.                                  */
*/*                                                                  */
*/********************************************************************/
*                                                                  0193
*   SAVEASID=ADPLASID;              /* SAVE ENTRY ASID       @ZM43066*/
         L     @11,ABDPLPTR                                        0193
         MVC   SAVEASID(2),ADPLASID(@11)                           0193
*   DO;                             /* ILRMACCS (ASVTPTR)          0194
*                                      FROM(CVTASVT)                 */
*     RFY                                                          0195
*      (R0,                                                        0195
*       R1,                                                        0195
*       R14,                                                       0195
*       R15) RSTD;                                                 0195
*     R0=ADDR(CVTASVT);                                            0196
         L     @08,CVTPTR                                          0196
         LA    R0,CVTASVT(,@08)                                    0196
*     R1=ABDPLPTR;                  /* POINT TO PARM LIST            */
         LR    R1,@11                                              0197
*     CALL ACCESS;                  /* ACCESS DATA                   */
         L     @15,ADPLMEMA(,@11)                                  0198
         BALR  @14,@15                                             0198
*     R14=R0;                       /* CANNOT USE R0 AS BASE         */
         LR    R14,R0                                              0199
*     IF R15=GOOD THEN              /* CHECK ACCESS                  */
         LTR   R15,R15                                             0200
         BNZ   @RF00200                                            0200
*       ASVTPTR=CURRENT;            /* GET REQUESTED FIELD           */
         MVC   ASVTPTR(4),CURRENT(R14)                             0201
*     ELSE                          /* ACCESS NO GOOD                */
*       ASVTPTR=ZERO;               /* ZERO FIELD                    */
         B     @RC00200                                            0202
@RF00200 SLR   @11,@11                                             0202
         ST    @11,ASVTPTR                                         0202
*     RFY                                                          0203
*      (R0,                                                        0203
*       R1,                                                        0203
*       R14,                                                       0203
*       R15) UNRSTD;                                               0203
@RC00200 DS    0H                                                  0204
*   END;                            /* GET ASVT ADDRESS              */
*   IF ASVTPTR=NULLPTR THEN         /* ACCESS FAILED                 */
         ICM   @11,15,ASVTPTR                                      0205
         BNZ   @RF00205                                            0205
*     DO;                                                          0206
*       RFY                                                        0207
*         R1 RSTD;                                                 0207
*       R1=ASVTMSG;                 /* GET MESSAGE CODE              */
         L     R1,ASVTMSG                                          0208
*       CALL ERRMSG;                /* GO TO MESSAGE SEGMENT         */
         BAL   @14,ERRMSG                                          0209
*       GOTO FMTVIO;                /* BRANCH OUT OF LOOP            */
         B     FMTVIO                                              0210
*       RFY                                                        0211
*         R1 UNRSTD;                                               0211
*     END;                                                         0212
*   ELSE                            /* GOT ASVT ADDRESS              */
*     DO;                                                          0213
@RF00205 DS    0H                                                  0214
*       DO;                         /* ILRMACCS (MAXUSER)          0214
*                                      FROM(ASVTMAXU)                */
*         RFY                                                      0215
*          (R0,                                                    0215
*           R1,                                                    0215
*           R14,                                                   0215
*           R15) RSTD;                                             0215
*         R0=ADDR(ASVTMAXU);                                       0216
         L     @11,ASVTPTR                                         0216
         LA    R0,ASVTMAXU(,@11)                                   0216
*         R1=ABDPLPTR;              /* POINT TO PARM LIST            */
         L     @11,ABDPLPTR                                        0217
         LR    R1,@11                                              0217
*         CALL ACCESS;              /* ACCESS DATA                   */
         L     @15,ADPLMEMA(,@11)                                  0218
         BALR  @14,@15                                             0218
*         R14=R0;                   /* CANNOT USE R0 AS BASE         */
         LR    R14,R0                                              0219
*         IF R15=GOOD THEN          /* CHECK ACCESS                  */
         LTR   R15,R15                                             0220
         BNZ   @RF00220                                            0220
*           MAXUSER=CURRENT;        /* GET REQUESTED FIELD           */
         L     MAXUSER,CURRENT(,R14)                               0221
*         ELSE                      /* ACCESS NO GOOD                */
*           MAXUSER=ZERO;           /* ZERO FIELD                    */
         B     @RC00220                                            0222
@RF00220 SLR   MAXUSER,MAXUSER                                     0222
*         RFY                                                      0223
*          (R0,                                                    0223
*           R1,                                                    0223
*           R14,                                                   0223
*           R15) UNRSTD;                                           0223
@RC00220 DS    0H                                                  0224
*       END;                        /* GET MAX NUMBER OF MEMORIES    */
*       IF MAXUSER=NULLPTR THEN     /* ACCESS FAILED FOR MAXUSER     */
         LTR   MAXUSER,MAXUSER                                     0225
         BNZ   @RF00225                                            0225
*         DO;                                                      0226
*           RFY                                                    0227
*             R1 RSTD;                                             0227
*           R1=ASVTMSG;             /* GET MESSAGE CODE              */
         L     R1,ASVTMSG                                          0228
*           CALL ERRMSG;            /* GO TO MESSAGE SEGMENT         */
         BAL   @14,ERRMSG                                          0229
*           GOTO FMTVIO;            /* BRANCH OUT OF LOOP            */
         B     FMTVIO                                              0230
*           RFY                                                    0231
*             R1 UNRSTD;                                           0231
*         END;                                                     0232
*       ELSE                        /* GOT NUMBER MEMORIES           */
*         DO I=1 TO MAXUSER;        /* UNTIL ALL ADDR SPCS PROCESSD  */
@RF00225 LA    I,1                                                 0233
         B     @DE00233                                            0233
@DL00233 DS    0H                                                  0234
*           RFY                                                    0234
*            (R0,                                                  0234
*             R1,                                                  0234
*             R15) RSTD;                                           0234
*           ENTRYPTR=ADDR(ASVTENTY(I));/* ADDRESS OF ENTRY           */
         LR    @14,I                                               0235
         SLA   @14,2                                               0235
         L     ENTRYPTR,ASVTPTR                                    0235
         LA    ENTRYPTR,ASVTENTY-4(@14,ENTRYPTR)                   0235
*           R0=ENTRYPTR;            /* SET UP PARMS FOR ACCESS       */
         LR    R0,ENTRYPTR                                         0236
*           R1=ABDPLPTR;                                           0237
         L     @14,ABDPLPTR                                        0237
         LR    R1,@14                                              0237
*           CALL ACCESS;            /* GET THE ENTRY                 */
         L     @15,ADPLMEMA(,@14)                                  0238
         BALR  @14,@15                                             0238
*           IF R15=GOOD THEN        /* ACCESS WAS OKAY               */
         LTR   R15,R15                                             0239
         BNZ   @RF00239                                            0239
*             DO;                                                  0240
*               ENTRYPTR=R0;        /* SAVE ACCESSED ADDRESS         */
         LR    ENTRYPTR,R0                                         0241
*               IF VALIDFLG=OFF THEN/* ADDRESS SPACE IS IN USE       */
         TM    VALIDFLG(ENTRYPTR),B'10000000'                      0242
         BNZ   @RF00242                                            0242
*                 DO;                                              0243
*                   ADPLASID=I;     /* PUT ASID INTO PARM LIST       */
         L     @14,ABDPLPTR                                        0244
         STH   I,ADPLASID(,@14)                                    0244
*                   ASCBPTR=PTRASCB;/* GET ASCB ADDRESS FROM ENTRY   */
         SLR   ASCBPTR,ASCBPTR                                     0245
         ICM   ASCBPTR,7,PTRASCB(ENTRYPTR)                         0245
*                   DO;             /* ILRMACCS (RSMHD) VIA(ASCBRSM) */
*                     RFY                                          0247
*                      (R0,                                        0247
*                       R1,                                        0247
*                       R14,                                       0247
*                       R15) RSTD;                                 0247
*                     R1=ABDPLPTR;                                 0248
         L     @03,ABDPLPTR                                        0248
         LR    R1,@03                                              0248
*                     R0=ADDR(ASCBRSM);/* ADDR OF CELL WITH PTR      */
         LA    R0,ASCBRSM(,ASCBPTR)                                0249
*                     CALL ACCESS;  /* ACCESS PTR TO RSMHD           */
         L     @15,ADPLMEMA(,@03)                                  0250
         BALR  @14,@15                                             0250
*                     IF R15=GOOD THEN                             0251
         LTR   R15,R15                                             0251
         BNZ   @RF00251                                            0251
*                       DO;         /* FOUND PTR - NOW FIND BLOCK    */
*                         R14=R0;   /* CANNOT USE R0 AS BASE REG     */
         LR    R14,R0                                              0253
*                         R0=CURRENT;/* POINTER ITSELF               */
         L     R0,CURRENT(,R14)                                    0254
*                         RSMHDPTR=R0;/* SAVE POINTER                */
         LR    RSMHDPTR,R0                                         0255
*                         CALL ACCESS;/* ACCESS RSMHD ITSELF         */
         L     @03,ABDPLPTR                                        0256
         L     @15,ADPLMEMA(,@03)                                  0256
         BALR  @14,@15                                             0256
*                         IF R15^=GOOD THEN                        0257
         LTR   R15,R15                                             0257
         BZ    @RF00257                                            0257
*                           RSMHDPTR=NULLPTR;                      0258
         SLR   RSMHDPTR,RSMHDPTR                                   0258
*                       END;                                       0259
*                     ELSE                                         0260
*                       RSMHDPTR=NULLPTR;                          0260
         B     @RC00251                                            0260
@RF00251 SLR   RSMHDPTR,RSMHDPTR                                   0260
*                     RFY                                          0261
*                      (R0,                                        0261
*                       R1,                                        0261
*                       R14,                                       0261
*                       R15) UNRSTD;                               0261
@RC00251 DS    0H                                                  0262
*                   END;            /*                       @ZA11398
*                                      GET RSMHD ADDRESS             */
*                   IF RSMHDPTR^=NULLPTR THEN/* PTR IS GOOD          */
         LTR   RSMHDPTR,RSMHDPTR                                   0263
         BZ    @RF00263                                            0263
*                     DO;                                          0264
*                       RFY                                        0265
*                        (R1,                                      0265
*                         R3,                                      0265
*                         R15) RSTD;                               0265
*                       R1=ABDPLPTR;/* SET UP PARMS FOR ILRFMTH      */
         L     R1,ABDPLPTR                                         0266
*                       R3=RSMHDPTR;                               0267
         LR    R3,RSMHDPTR                                         0267
*                       RFY                                        0268
*                         R3 UNRSTD;                               0268
*                       CALL ILRFMTH;/* GO TO HEADER ROUTINE         */
         L     @15,@CV01273                                        0269
         BALR  @14,@15                                             0269
*                       IF R15^=GOOD THEN/* RETURN CODE BAD          */
         LTR   R15,R15                                             0270
         BZ    @RF00270                                            0270
*                         DO;                                      0271
*                           R1=HEADMSG;/* GET MESSAGE CODE           */
         L     R1,HEADMSG                                          0272
*                           CALL ERRMSG;/* GO TO MESSAGE SGMT        */
         BAL   @14,ERRMSG                                          0273
*                         END;                                     0274
*                       ELSE                                       0275
*                         ;         /* ALL'S FINE WITH HEADER        */
@RF00270 DS    0H                                                  0276
*                     END;          /* END WHEN RSMHDPTR GOOD        */
*                   ELSE                                           0277
*                     ;             /* RSMHD PTR WAS BAD             */
@RF00263 DS    0H                                                  0278
*                   ADPLASID=SAVEASID;/* RESTORE ENTRY ASID  @ZM43066*/
         L     @14,ABDPLPTR                                        0278
         MVC   ADPLASID(2,@14),SAVEASID                            0278
*                 END;              /* END WHEN ADDR SPC IN USE      */
*               ELSE                                               0280
*                 ;                 /* ASCB NOT IN USE               */
@RF00242 DS    0H                                                  0281
*             END;                  /* WHEN ACCESS FOR MAXUSER GOOD  */
*           ELSE                    /* ACCESS FAILED FOR ENTRY       */
*             DO;                                                  0282
         B     @RC00239                                            0282
@RF00239 DS    0H                                                  0283
*               R1=ASVTMSG;         /* GET MESSAGE CODE              */
         L     R1,ASVTMSG                                          0283
*               CALL ERRMSG;        /* GO TO MESSAGE SEGMENT         */
         BAL   @14,ERRMSG                                          0284
*               GOTO FMTVIO;        /* BRANCH OUT OF LOOP            */
         B     FMTVIO                                              0285
*             END;                                                 0286
*         END;                      /* END 1 TO MAXUSER              */
@RC00239 AH    I,@CH00042                                          0287
@DE00233 CR    I,MAXUSER                                           0287
         BNH   @DL00233                                            0287
*     END;                          /* END WHEN GOT ASVT PTR         */
*   RFY                                                            0289
*    (R0,                                                          0289
*     R1,                                                          0289
*     R15) UNRSTD;                                                 0289
*                                                                  0290
*/********************************************************************/
*/*  CALL ROUTINE TO FORMAT VIO RELATED CONTROL BLOCKS               */
*/********************************************************************/
*                                                                  0290
*FMTVIO:                                                           0290
*   RFY                                                            0290
*    (R1,                                                          0290
*     R3,                                                          0290
*     R15) RSTD;                                                   0290
FMTVIO   DS    0H                                                  0291
*   R1=ABDPLPTR;                    /* SET UP PARAMETERS FOR CALL    */
         L     R1,ABDPLPTR                                         0291
*   R3=ASMVTPTR;                                                   0292
         L     R3,ASMVTPTR                                         0292
*   CALL ILRFMTV;                   /* CALL ROUTINE TO FORMAT VIO  0293
*                                      RELATED CONTROL BLOCKS        */
         L     @15,@CV01274                                        0293
         BALR  @14,@15                                             0293
*   IF R15^=GOOD THEN               /* RETURN CODE NOT ZERO          */
         LTR   R15,R15                                             0294
         BZ    @RF00294                                            0294
*     DO;                                                          0295
*       IF R15=ERROR THEN           /* RETURN CODE IS FOUR           */
         CH    R15,@CH00168                                        0296
         BNE   @RF00296                                            0296
*         DO;                                                      0297
*           R1=VIOMSG;              /* GET MESSAGE CODE              */
         L     R1,VIOMSG                                           0298
*           CALL ERRMSG;            /* GO TO MESSAGE SEGMENT         */
         BAL   @14,ERRMSG                                          0299
*         END;                                                     0300
*       ELSE                        /* RETURN CODE IS EIGHT          */
*         DO;                                                      0301
         B     @RC00296                                            0301
@RF00296 DS    0H                                                  0302
*           R1=LGVTMSG;             /* GET MESSAGE CODE              */
         L     R1,LGVTMSG                                          0302
*           CALL ERRMSG;            /* GO TO MESSAGE SEGMENT         */
         BAL   @14,ERRMSG                                          0303
*         END;                                                     0304
*     END;                                                         0305
*   ELSE                                                           0306
*     ;                             /* RETURN CODE GOOD FROM VIO     */
@RF00294 DS    0H                                                  0307
*   RETURN CODE(0);                 /* RETURN TO CALLER              */
@RC00294 SLR   @15,@15                                             0307
         L     @13,4(,@13)                                         0307
         L     @14,12(,@13)                                        0307
         LM    @00,@12,20(@13)                                     0307
         BR    @14                                                 0307
*                                                                  0308
*/********************************************************************/
*/*                                                                  */
*/* ERRMSG:  SEGMENT TO PRINT ERROR MESSAGE                          */
*/*                                                                  */
*/* INPUT:   R1 = MESSAGE NUMBER                                     */
*/*                                                                  */
*/* PROCESS: PUT MESSAGE INTO BUFFER.  CALL PRINT.                   */
*/*                                                                  */
*/* OUTPUT:   NONE                                                   */
*/*                                                                  */
*/********************************************************************/
*                                                                  0308
*ERRMSG:                                                           0308
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0308
ERRMSG   DS    0H                                                  0309
*   RFY                                                            0309
*     R14 RSTD;                                                    0309
*   RTNADDR8=R14;                   /* SAVE RETURN ADDRESS           */
         ST    R14,RTNADDR8                                        0310
*   RFY                                                            0311
*     R14 UNRSTD;                                                  0311
*   RFY                                                            0312
*     R1 RSTD;                                                     0312
*   BUFFER(1:1+LENGTH(MESSAGE))=MSGTAB(R1);/* PUT MESSAGE INTO BUFFER*/
         L     @14,ABDPLPTR                                        0313
         L     @07,ADPLBUF(,@14)                                   0313
         MVI   BUFFER+44(@07),C' '                                 0313
         LR    @06,R1                                              0313
         MH    @06,@CH01405                                        0313
         LA    @05,MSGTAB-44(@06)                                  0313
         MVC   BUFFER(44,@07),0(@05)                               0313
*   R1=ABDPLPTR;                    /* SET PTR TO INPUT PARM LIST    */
         LR    R1,@14                                              0314
*   CALL PRINT;                     /* PRINT MESSAGE                 */
         L     @15,ADPLPRNT(,@14)                                  0315
         BALR  @14,@15                                             0315
*   CALL PRINT;                     /* SPACE ONE LINE                */
         L     @14,ABDPLPTR                                        0316
         L     @15,ADPLPRNT(,@14)                                  0316
         BALR  @14,@15                                             0316
*   RFY                                                            0317
*     R1 UNRSTD;                                                   0317
*   RFY                                                            0318
*     R14 RSTD;                                                    0318
*   R14=RTNADDR8;                   /* RESTORE RETURN ADDRESS        */
         L     R14,RTNADDR8                                        0319
*   RFY                                                            0320
*     R14 UNRSTD;                                                  0320
*   END ERRMSG;                                                    0321
@EL00002 DS    0H                                                  0321
@EF00002 DS    0H                                                  0321
@ER00002 BR    @14                                                 0321
*                                                                  0322
*/********************************************************************/
*/*                                                                  */
*/* PRTHED:  SEGMENT TO FORMAT AND PRINT CTL-BLK HEADING             */
*/*                                                                  */
*/* INPUT:   R0 = ADDR OF CONTROL-BLOCK POINTER (I.E., DATA)         */
*/*          R1 = ADDR OF CONTROL-BLOCK NAME (I.E., LABEL)           */
*/*                                                                  */
*/* PROCESS: STORE INPUT REGISTERS IN FORMAT PATTERN USED FOR HEADING*/
*/*           THIS PATTERN IS PASSED TO FORMAT ROUTINE.  THEN THE    */
*/*           PRINT ROUTINE IS CALLED TO PRINT THE HEADING LINE.     */
*/*                                                                  */
*/* OUTPUT:  NONE, DIRECTLY                                          */
*/********************************************************************/
*                                                                  0322
*PRTHED:                                                           0322
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0322
PRTHED   DS    0H                                                  0323
*   RFY                                                            0323
*     R14 RSTD;                                                    0323
*   RTNADDR9=R14;                   /* SAVE RETURN ADDRESS           */
         LR    RTNADDR9,R14                                        0324
*   RFY                                                            0325
*     R14 UNRSTD;                                                  0325
*   RFY                                                            0326
*    (R0,                                                          0326
*     R1) RSTD;                                                    0326
*   HDDTPTR=R0;                     /* 'DATA' IS BLOCK PTR           */
         ST    R0,HDDTPTR                                          0327
*   HDLBPTR=R1;                     /* 'LABEL' IS BLOCK NAME         */
         ST    R1,HDLBPTR                                          0328
*   R0=ADDR(HDPTRN);                /* ADDRESS OF FORMAT PATTERN     */
         LA    R0,HDPTRN                                           0329
*   R1=ABDPLPTR;                    /* POINT TO PARM LIST INPUT      */
         L     @14,ABDPLPTR                                        0330
         LR    R1,@14                                              0330
*   CALL FORMAT;                                                   0331
         L     @15,ADPLFRMT(,@14)                                  0331
         BALR  @14,@15                                             0331
*   CALL PRINT;                                                    0332
         L     @14,ABDPLPTR                                        0332
         L     @15,ADPLPRNT(,@14)                                  0332
         BALR  @14,@15                                             0332
*   RFY                                                            0333
*    (R0,                                                          0333
*     R1) UNRSTD;                                                  0333
*   RFY                                                            0334
*     R14 RSTD;                                                    0334
*   R14=RTNADDR9;                   /* RESTORE RETURN ADDRESS        */
         LR    R14,RTNADDR9                                        0335
*   RFY                                                            0336
*     R14 UNRSTD;                                                  0336
*   END PRTHED;                                                    0337
@EL00003 DS    0H                                                  0337
@EF00003 DS    0H                                                  0337
@ER00003 BR    @14                                                 0337
*                                                                  0338
*/********************************************************************/
*/*                                                                  */
*/* FMTASMVT: SEGMENT TO FORMAT THE ASMVT AND OTHER BLOCKS           */
*/*                                                                  */
*/* INPUT:    VIRTUAL ADDRESS OF ASMVT IN ASMVTPTR                   */
*/*                                                                  */
*/* PROCESS:  USE FORMAT TO PRINT THE ASMVT WITH THE POOL CONTROLLERS*/
*/*           AND WORK SAVE AREAS.  ALSO, CALL SEGMENTS TO PRINT THE */
*/*           BAD SLOT ERROR RECORD, MESSAGE BUFFER, AIA'S ON THE    */
*/*           I/O STAGING QUEUE, AND TWO  QUEUES OF ACES.            */
*/*                                                                  */
*/* OUTPUT:   RETURN CODE = 0 IF ALL FORMATS AND ACCESSES WERE       */
*/*           SUCCESSFUL, ELSE RETURN CODE NOT ZERO.                 */
*/*                                                                  */
*/********************************************************************/
*                                                                  0338
*FMTASMVT:                                                         0338
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0338
FMTASMVT DS    0H                                                  0339
*                                                                  0339
*   /*****************************************************************/
*   /*                                                               */
*   /* ASM1:((FLAG1,,BIT),FLAG1,,BIT),DSSFS,SART,PART,GOS)   @ZA14260*/
*   /* LABEL VARIABLES REFERENCED IN FMT PTTRNS                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0339
*   DCL                                                            0339
*     ASM1LB1 CHAR(LENGTH('+  0')) INIT('+  0'),                   0339
*     ASM1LB2 CHAR(LENGTH('FLAG1')) INIT('FLAG1'),                 0339
*     * CHAR(LENGTH('FLAG2')) INIT('FLAG2'),                       0339
*     * CHAR(LENGTH('DSSFS')) INIT('DSSFS'),/*               @ZA14260*/
*     * CHAR(LENGTH('SART')) INIT('SART'),                         0339
*     * CHAR(LENGTH('PART')) INIT('PART'),                         0339
*     * CHAR(LENGTH('GOS')) INIT('GOS');                           0339
*                                                                  0339
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OF OUTPUT (HAND CODED)           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0340
*   DCL                                                            0340
*     1 ASM1PTS BDY(WORD),          /* FORMAT PATTERNS - SEE PTTRNS  */
*      2 * CHAR(8) BDY(WORD),                                      0340
*       3 * BIT(8) BDY(BYTE) INIT('00000011'B),                    0340
*       3 * FIXED(8) INIT(16*LENGTH('+  0')-16),                   0340
*       3 * FIXED(8) INIT(0),                                      0340
*       3 * FIXED(8) INIT(0),                                      0340
*       3 * PTR(31) INIT(ADDR(ASM1LB1)),                           0340
*      2 * CHAR(12) BDY(WORD),                                     0340
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),                    0340
*       3 * FIXED(8) INIT(LENGTH(ASMFLAG1)/8-1+16*LENGTH('FLAG1')-16),
*       3 * FIXED(8) INIT(5),                                      0340
*       3 * FIXED(8) INIT(11),                                     0340
*       3 * PTR(31) INIT(ADDR(ASM1LB2)),                           0340
*       3 ASM1DT2 PTR(31) INIT(ADDR(ASMFLAG1)),                    0340
*      2 * CHAR(4) BDY(WORD),                                      0340
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0340
*       3 * FIXED(8) INIT(LENGTH(ASMFLAG2)/8-1+16*LENGTH('FLAG2')-16),
*       3 * FIXED(8) INIT(23),                                     0340
*       3 * FIXED(8) INIT(29),                                     0340
*      2 * CHAR(4) BDY(WORD),                                      0340
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0340
*       3 * FIXED(8) INIT(LENGTH(ASMDSSFS)-1+16*LENGTH('DSSFS')-16),
*                                   /*                       @ZA14260*/
*       3 * FIXED(8) INIT(41),                                     0340
*       3 * FIXED(8) INIT(47),                                     0340
*      2 * CHAR(4) BDY(WORD),                                      0340
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0340
*       3 * FIXED(8) INIT(LENGTH(ASMSART)-1+16*LENGTH('SART')-16), 0340
*       3 * FIXED(8) INIT(59),                                     0340
*       3 * FIXED(8) INIT(65),                                     0340
*      2 * CHAR(4) BDY(WORD),                                      0340
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0340
*       3 * FIXED(8) INIT(LENGTH(ASMPART)-1+16*LENGTH('PART')-16), 0340
*       3 * FIXED(8) INIT(77),                                     0340
*       3 * FIXED(8) INIT(83),                                     0340
*      2 * CHAR(4) BDY(WORD),                                      0340
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0340
*       3 * FIXED(8) INIT(LENGTH(ASMGOS)-1+16*LENGTH('GOS')-16),   0340
*       3 * FIXED(8) INIT(95),                                     0340
*       3 * FIXED(8) INIT(101),                                    0340
*      2 * FIXED(31) INIT(0);                                      0340
*                                                                  0341
*   /*****************************************************************/
*   /*                                                               */
*   /* ASM2: (TRPAG,EREC,MSGBF,RSV5,STAGF,STAGL) LABEL VARIABLES     */
*   /* REFERENCED IN FORMAT PTTRNS                                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0341
*   DCL                                                            0341
*     ASM2LB1 CHAR(LENGTH('+ 10')) INIT('+ 10'),                   0341
*     ASM2LB2 CHAR(LENGTH('TRPAG')) INIT('TRPAG'),                 0341
*     * CHAR(LENGTH('EREC')) INIT('EREC'),                         0341
*     * CHAR(LENGTH('MSGBF')) INIT('MSGBF'),                       0341
*     * CHAR(LENGTH('RSV5')) INIT('RSV5'),                         0341
*     * CHAR(LENGTH('STAGF')) INIT('STAGF'),                       0341
*     * CHAR(LENGTH('STAGL')) INIT('STAGL');                       0341
*                                                                  0341
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OF OUTPUT (HAND CODED)           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0342
*   DCL                                                            0342
*     1 ASM2PTS BDY(WORD),          /* FORMAT PATTERNS - SEE PTTRNS  */
*      2 * CHAR(8) BDY(WORD),                                      0342
*       3 * BIT(8) BDY(BYTE) INIT('00000011'B),                    0342
*       3 * FIXED(8) INIT(16*LENGTH('+ 10')-16),                   0342
*       3 * FIXED(8) INIT(0),                                      0342
*       3 * FIXED(8) INIT(0),                                      0342
*       3 * PTR(31) INIT(ADDR(ASM2LB1)),                           0342
*      2 * CHAR(8) BDY(WORD),                                      0342
*       3 * BIT(8) BDY(BYTE) INIT('00000111'B),                    0342
*       3 * FIXED(8) INIT(LENGTH(ASMTRPAG)-1+16*LENGTH('TRPAG')-16),
*       3 * FIXED(8) INIT(5),                                      0342
*       3 * FIXED(8) INIT(11),                                     0342
*       3 * PTR(31) INIT(ADDR(ASM2LB2)),                           0342
*      2 * CHAR(4) BDY(WORD),                                      0342
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0342
*       3 * FIXED(8) INIT(LENGTH(ASMEREC)-1+16*LENGTH('EREC')-16), 0342
*       3 * FIXED(8) INIT(23),                                     0342
*       3 * FIXED(8) INIT(29),                                     0342
*      2 * CHAR(4) BDY(WORD),                                      0342
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0342
*       3 * FIXED(8) INIT(LENGTH(ASMMSGBF)-1+16*LENGTH('MSGBF')-16),
*       3 * FIXED(8) INIT(41),                                     0342
*       3 * FIXED(8) INIT(47),                                     0342
*      2 * CHAR(4) BDY(WORD),                                      0342
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0342
*       3 * FIXED(8) INIT(LENGTH(ASMRSV5)-1+16*LENGTH('RSV5')-16), 0342
*       3 * FIXED(8) INIT(59),                                     0342
*       3 * FIXED(8) INIT(65),                                     0342
*      2 * CHAR(4) BDY(WORD),                                      0342
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0342
*       3 * FIXED(8) INIT(LENGTH(ASMSTAGF)-1+16*LENGTH('STAGF')-16),
*       3 * FIXED(8) INIT(77),                                     0342
*       3 * FIXED(8) INIT(83),                                     0342
*      2 * CHAR(4) BDY(WORD),                                      0342
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0342
*       3 * FIXED(8) INIT(LENGTH(ASMSTAGL)-1+16*LENGTH('STAGL')-16),
*       3 * FIXED(8) INIT(95),                                     0342
*       3 * FIXED(8) INIT(101),                                    0342
*      2 * FIXED(31) INIT(0);                                      0342
*                                                                  0343
*   /*****************************************************************/
*   /*                                                               */
*   /* ASM3: (IORQR,IORQC,RSV6) LABEL VARIABLES REFERENCED IN FMT    */
*   /* PATTRNS                                                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0343
*   DCL                                                            0343
*     ASM3LB1 CHAR(LENGTH('+ 28')) INIT('+ 28'),                   0343
*     ASM3LB2 CHAR(LENGTH('IORQR')) INIT('IORQR'),                 0343
*     * CHAR(LENGTH('IORQC')) INIT('IORQC'),                       0343
*     * CHAR(LENGTH('RSV6')) INIT('RSV6');                         0343
*                                                                  0343
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OF OUTPUT (HAND CODED)           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0344
*   DCL                                                            0344
*     1 ASM3PTS BDY(WORD),          /* FORMAT PATTERNS - SEE PTTRNS  */
*      2 * CHAR(8) BDY(WORD),                                      0344
*       3 * BIT(8) BDY(BYTE) INIT('00000011'B),                    0344
*       3 * FIXED(8) INIT(16*LENGTH('+ 28')-16),                   0344
*       3 * FIXED(8) INIT(0),                                      0344
*       3 * FIXED(8) INIT(0),                                      0344
*       3 * PTR(31) INIT(ADDR(ASM3LB1)),                           0344
*      2 * CHAR(8) BDY(WORD),                                      0344
*       3 * BIT(8) BDY(BYTE) INIT('00000111'B),                    0344
*       3 * FIXED(8) INIT(LENGTH(ASMIORQR)-1+16*LENGTH('IORQR')-16),
*       3 * FIXED(8) INIT(5),                                      0344
*       3 * FIXED(8) INIT(11),                                     0344
*       3 * PTR(31) INIT(ADDR(ASM3LB2)),                           0344
*      2 * CHAR(4) BDY(WORD),                                      0344
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0344
*       3 * FIXED(8) INIT(LENGTH(ASMIORQC)-1+16*LENGTH('IORQC')-16),
*       3 * FIXED(8) INIT(23),                                     0344
*       3 * FIXED(8) INIT(29),                                     0344
*      2 * CHAR(4) BDY(WORD),                                      0344
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0344
*       3 * FIXED(8) INIT(LENGTH(ASMRSV5)-1+16*LENGTH('RSV6')-16), 0344
*       3 * FIXED(8) INIT(41),                                     0344
*       3 * FIXED(8) INIT(47),                                     0344
*      2 * CHAR(4) BDY(WORD),                                      0344
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0344
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0344
*       3 * FIXED(8) INIT(59),                                     0344
*       3 * FIXED(8) INIT(65),                                     0344
*      2 * CHAR(4) BDY(WORD),                                      0344
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0344
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0344
*       3 * FIXED(8) INIT(0),                                      0344
*       3 * FIXED(8) INIT(83),                                     0344
*      2 * CHAR(4) BDY(WORD),                                      0344
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0344
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0344
*       3 * FIXED(8) INIT(0),                                      0344
*       3 * FIXED(8) INIT(101),                                    0344
*      2 * FIXED(31) INIT(0);                                      0344
*                                                                  0345
*   /*****************************************************************/
*   /*                                                               */
*   /* ASM4: (PCCWA,PCCWC,PCCWN,BURST,IOCNT,SRBCT), LABEL VARIABLES  */
*   /* REFERENCED IN FMT PTTRNS                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0345
*   DCL                                                            0345
*     ASM4LB1 CHAR(LENGTH('+ 40')) INIT('+ 40'),                   0345
*     ASM4LB2 CHAR(LENGTH('PCCWA')) INIT('PCCWA'),                 0345
*     * CHAR(LENGTH('PCCWC')) INIT('PCCWC'),                       0345
*     * CHAR(LENGTH('PCCWN')) INIT('PCCWN'),                       0345
*     * CHAR(LENGTH('BURST')) INIT('BURST'),                       0345
*     * CHAR(LENGTH('IOCNT')) INIT('IOCNT'),                       0345
*     * CHAR(LENGTH('SRBCT')) INIT('SRBCT');                       0345
*                                                                  0345
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OF OUTPUT (HAND CODED)           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0346
*   DCL                                                            0346
*     1 ASM4PTS BDY(WORD),          /* FORMAT PATTERNS - SEE PTTRNS  */
*      2 * CHAR(8) BDY(WORD),                                      0346
*       3 * BIT(8) BDY(BYTE) INIT('00000011'B),                    0346
*       3 * FIXED(8) INIT(16*LENGTH('+ 40')-16),                   0346
*       3 * FIXED(8) INIT(0),                                      0346
*       3 * FIXED(8) INIT(0),                                      0346
*       3 * PTR(31) INIT(ADDR(ASM4LB1)),                           0346
*      2 * CHAR(8) BDY(WORD),                                      0346
*       3 * BIT(8) BDY(BYTE) INIT('00000111'B),                    0346
*       3 * FIXED(8) INIT(LENGTH(ASMPCCWA)-1+16*LENGTH('PCCWA')-16),
*       3 * FIXED(8) INIT(5),                                      0346
*       3 * FIXED(8) INIT(11),                                     0346
*       3 * PTR(31) INIT(ADDR(ASM4LB2)),                           0346
*      2 * CHAR(4) BDY(WORD),                                      0346
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0346
*       3 * FIXED(8) INIT(LENGTH(ASMPCCWC)-1+16*LENGTH('PCCWC')-16),
*       3 * FIXED(8) INIT(23),                                     0346
*       3 * FIXED(8) INIT(29),                                     0346
*      2 * CHAR(4) BDY(WORD),                                      0346
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0346
*       3 * FIXED(8) INIT(LENGTH(ASMPCCWN)-1+16*LENGTH('PCCWN')-16),
*       3 * FIXED(8) INIT(41),                                     0346
*       3 * FIXED(8) INIT(47),                                     0346
*      2 * CHAR(4) BDY(WORD),                                      0346
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0346
*       3 * FIXED(8) INIT(LENGTH(ASMBURST)-1+16*LENGTH('BURST')-16),
*       3 * FIXED(8) INIT(59),                                     0346
*       3 * FIXED(8) INIT(65),                                     0346
*      2 * CHAR(4) BDY(WORD),                                      0346
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0346
*       3 * FIXED(8) INIT(LENGTH(ASMIOCNT)-1+16*LENGTH('IOCNT')-16),
*       3 * FIXED(8) INIT(77),                                     0346
*       3 * FIXED(8) INIT(83),                                     0346
*      2 * CHAR(4) BDY(WORD),                                      0346
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0346
*       3 * FIXED(8) INIT(LENGTH(ASMSRBCT)-1+16*LENGTH('SRBCT')-16),
*       3 * FIXED(8) INIT(95),                                     0346
*       3 * FIXED(8) INIT(101),                                    0346
*      2 * FIXED(31) INIT(0);                                      0346
*                                                                  0347
*   /*****************************************************************/
*   /*                                                               */
*   /* ASM5: (PSRB,RSV7,BKSLT) LABEL VARIABLES REFERENCED IN FMT     */
*   /* PTTRNS                                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0347
*   DCL                                                            0347
*     ASM5LB1 CHAR(LENGTH('+ 58')) INIT('+ 58'),                   0347
*     ASM5LB2 CHAR(LENGTH('PSRB')) INIT('PSRB'),                   0347
*     * CHAR(LENGTH('RSV7')) INIT('RSV7'),                         0347
*     * CHAR(LENGTH('BKSLT')) INIT('BKSLT');                       0347
*                                                                  0347
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OF OUTPUT (HAND CODED)           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0348
*   DCL                                                            0348
*     1 ASM5PTS BDY(WORD),          /* FORMAT PATTERNS - SEE PTTRNS  */
*      2 * CHAR(8) BDY(WORD),                                      0348
*       3 * BIT(8) BDY(BYTE) INIT('00000011'B),                    0348
*       3 * FIXED(8) INIT(16*LENGTH('+ 58')-16),                   0348
*       3 * FIXED(8) INIT(0),                                      0348
*       3 * FIXED(8) INIT(0),                                      0348
*       3 * PTR(31) INIT(ADDR(ASM5LB1)),                           0348
*      2 * CHAR(8) BDY(WORD),                                      0348
*       3 * BIT(8) BDY(BYTE) INIT('00000111'B),                    0348
*       3 * FIXED(8) INIT(LENGTH(ASMPSRB)-1+16*LENGTH('PSRB')-16), 0348
*       3 * FIXED(8) INIT(5),                                      0348
*       3 * FIXED(8) INIT(11),                                     0348
*       3 * PTR(31) INIT(ADDR(ASM5LB2)),                           0348
*      2 * CHAR(4) BDY(WORD),                                      0348
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0348
*       3 * FIXED(8) INIT(LENGTH(ASMRSV5)-1+16*LENGTH('RSV7')-16), 0348
*       3 * FIXED(8) INIT(23),                                     0348
*       3 * FIXED(8) INIT(29),                                     0348
*      2 * CHAR(4) BDY(WORD),                                      0348
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0348
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0348
*       3 * FIXED(8) INIT(41),                                     0348
*       3 * FIXED(8) INIT(47),                                     0348
*      2 * CHAR(4) BDY(WORD),                                      0348
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0348
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0348
*       3 * FIXED(8) INIT(59),                                     0348
*       3 * FIXED(8) INIT(65),                                     0348
*      2 * CHAR(4) BDY(WORD),                                      0348
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0348
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0348
*       3 * FIXED(8) INIT(77),                                     0348
*       3 * FIXED(8) INIT(83),                                     0348
*      2 * CHAR(4) BDY(WORD),                                      0348
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0348
*       3 * FIXED(8) INIT(LENGTH(ASMBKSLT)-1+16*LENGTH('BKSLT')-16),
*       3 * FIXED(8) INIT(95),                                     0348
*       3 * FIXED(8) INIT(101),                                    0348
*      2 * FIXED(31) INIT(0);                                      0348
*                                                                  0349
*   /*****************************************************************/
*   /*                                                               */
*   /* ASM6: (SLOTS,VSC,NVSC,ERRS,SLOTV,LGVT) LABEL VARIABLES        */
*   /* REFERENCED IN FMT PATTRNS                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0349
*   DCL                                                            0349
*     ASM6LB1 CHAR(LENGTH('+ 70')) INIT('+ 70'),                   0349
*     ASM6LB2 CHAR(LENGTH('SLOTS')) INIT('SLOTS'),                 0349
*     * CHAR(LENGTH('VSC')) INIT('VSC'),                           0349
*     * CHAR(LENGTH('NVSC')) INIT('NVSC'),                         0349
*     * CHAR(LENGTH('ERRS')) INIT('ERRS'),                         0349
*     * CHAR(LENGTH('SLOTV')) INIT('SLOTV'),                       0349
*     * CHAR(LENGTH('LGVT')) INIT('LGVT');                         0349
*                                                                  0349
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OF OUTPUT (HAND CODED)           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0350
*   DCL                                                            0350
*     1 ASM6PTS BDY(WORD),          /* FORMAT PATTERNS - SEE PTTRNS  */
*      2 * CHAR(8) BDY(WORD),                                      0350
*       3 * BIT(8) BDY(BYTE) INIT('00000011'B),                    0350
*       3 * FIXED(8) INIT(16*LENGTH('+ 70')-16),                   0350
*       3 * FIXED(8) INIT(0),                                      0350
*       3 * FIXED(8) INIT(0),                                      0350
*       3 * PTR(31) INIT(ADDR(ASM6LB1)),                           0350
*      2 * CHAR(8) BDY(WORD),                                      0350
*       3 * BIT(8) BDY(BYTE) INIT('00000111'B),                    0350
*       3 * FIXED(8) INIT(LENGTH(ASMSLOTS)-1+16*LENGTH('SLOTS')-16),
*       3 * FIXED(8) INIT(5),                                      0350
*       3 * FIXED(8) INIT(11),                                     0350
*       3 * PTR(31) INIT(ADDR(ASM6LB2)),                           0350
*      2 * CHAR(4) BDY(WORD),                                      0350
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0350
*       3 * FIXED(8) INIT(LENGTH(ASMVSC)-1+16*LENGTH('VSC')-16),   0350
*       3 * FIXED(8) INIT(23),                                     0350
*       3 * FIXED(8) INIT(29),                                     0350
*      2 * CHAR(4) BDY(WORD),                                      0350
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0350
*       3 * FIXED(8) INIT(LENGTH(ASMNVSC)-1+16*LENGTH('NVSC')-16), 0350
*       3 * FIXED(8) INIT(41),                                     0350
*       3 * FIXED(8) INIT(47),                                     0350
*      2 * CHAR(4) BDY(WORD),                                      0350
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0350
*       3 * FIXED(8) INIT(LENGTH(ASMERRS)-1+16*LENGTH('ERRS')-16), 0350
*       3 * FIXED(8) INIT(59),                                     0350
*       3 * FIXED(8) INIT(65),                                     0350
*      2 * CHAR(4) BDY(WORD),                                      0350
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0350
*       3 * FIXED(8) INIT(LENGTH(ASMSLOTV)-1+16*LENGTH('SLOTV')-16),
*       3 * FIXED(8) INIT(77),                                     0350
*       3 * FIXED(8) INIT(83),                                     0350
*      2 * CHAR(4) BDY(WORD),                                      0350
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0350
*       3 * FIXED(8) INIT(LENGTH(ASMLGVT)-1+16*LENGTH('LGVT')-16), 0350
*       3 * FIXED(8) INIT(95),                                     0350
*       3 * FIXED(8) INIT(101),                                    0350
*      2 * FIXED(31) INIT(0);                                      0350
*                                                                  0351
*   /*****************************************************************/
*   /*                                                               */
*   /* ASM7: (STGXA,CONV,LSAIL,LSAIH,GOSWT,GOSWK) LABEL VARIABLES    */
*   /* REFERINCED IN FMT PTTRNS                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0351
*   DCL                                                            0351
*     ASM7LB1 CHAR(LENGTH('+ 88')) INIT('+ 88'),                   0351
*     ASM7LB2 CHAR(LENGTH('STGXA')) INIT('STGXA'),                 0351
*     * CHAR(LENGTH('CINV')) INIT('CINV'),                         0351
*     * CHAR(LENGTH('LSAIL')) INIT('LSAIL'),                       0351
*     * CHAR(LENGTH('LSAIH')) INIT('LSAIH'),                       0351
*     * CHAR(LENGTH('GOSWT')) INIT('GOSWT'),                       0351
*     * CHAR(LENGTH('GOSWK')) INIT('GOSWK');                       0351
*                                                                  0351
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OF OUTPUT (HAND CODED)           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0352
*   DCL                                                            0352
*     1 ASM7PTS BDY(WORD),          /* FORMAT PATTERNS 0 SEE PTTRNS  */
*      2 * CHAR(8) BDY(WORD),                                      0352
*       3 * BIT(8) BDY(BYTE) INIT('00000011'B),                    0352
*       3 * FIXED(8) INIT(16*LENGTH('+ 88')-16),                   0352
*       3 * FIXED(8) INIT(0),                                      0352
*       3 * FIXED(8) INIT(0),                                      0352
*       3 * PTR(31) INIT(ADDR(ASM7LB1)),                           0352
*      2 * CHAR(8) BDY(WORD),                                      0352
*       3 * BIT(8) BDY(BYTE) INIT('00000111'B),                    0352
*       3 * FIXED(8) INIT(LENGTH(ASMSTGXA)-1+16*LENGTH('STGXA')-16),
*       3 * FIXED(8) INIT(5),                                      0352
*       3 * FIXED(8) INIT(11),                                     0352
*       3 * PTR(31) INIT(ADDR(ASM7LB2)),                           0352
*      2 * CHAR(4) BDY(WORD),                                      0352
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0352
*       3 * FIXED(8) INIT(LENGTH(ASMCINV)-1+16*LENGTH('CINV')-16), 0352
*       3 * FIXED(8) INIT(23),                                     0352
*       3 * FIXED(8) INIT(29),                                     0352
*      2 * CHAR(4) BDY(WORD),                                      0352
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0352
*       3 * FIXED(8) INIT(LENGTH(ASMLSAIL)-1+16*LENGTH('LSAIL')-16),
*       3 * FIXED(8) INIT(41),                                     0352
*       3 * FIXED(8) INIT(47),                                     0352
*      2 * CHAR(4) BDY(WORD),                                      0352
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0352
*       3 * FIXED(8) INIT(LENGTH(ASMLSAIH)-1+16*LENGTH('LSAIH')-16),
*       3 * FIXED(8) INIT(59),                                     0352
*       3 * FIXED(8) INIT(65),                                     0352
*      2 * CHAR(4) BDY(WORD),                                      0352
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0352
*       3 * FIXED(8) INIT(LENGTH(ASMGOSWT)-1+16*LENGTH('GOSWT')-16),
*       3 * FIXED(8) INIT(77),                                     0352
*       3 * FIXED(8) INIT(83),                                     0352
*      2 * CHAR(4) BDY(WORD),                                      0352
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0352
*       3 * FIXED(8) INIT(LENGTH(ASMGOSWK)-1+16*LENGTH('GOSWK')-16),
*       3 * FIXED(8) INIT(95),                                     0352
*       3 * FIXED(8) INIT(101),                                    0352
*      2 * FIXED(31) INIT(0);                                      0352
*                                                                  0353
*   /*****************************************************************/
*   /*                                                               */
*   /* ASM8: (REQCT,TCBPT,TMECB,RLGRQ,RLGWQ,TASCB) LABEL VARIABLES   */
*   /* REFERENCED IN FMT PATTRNS                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0353
*   DCL                                                            0353
*     ASM8LB1 CHAR(LENGTH('+ A0')) INIT('+ A0'),                   0353
*     ASM8LB2 CHAR(LENGTH('REQCT')) INIT('REQCT'),                 0353
*     * CHAR(LENGTH('TCBPT')) INIT('TCBPT'),                       0353
*     * CHAR(LENGTH('TMECB')) INIT('TMECB'),                       0353
*     * CHAR(LENGTH('RLGRQ')) INIT('RLGRQ'),                       0353
*     * CHAR(LENGTH('RLGWQ')) INIT('RLGWQ'),                       0353
*     * CHAR(LENGTH('TASCB')) INIT('TASCB');                       0353
*                                                                  0353
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OF OUTPUT (HAND CODED)           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0354
*   DCL                                                            0354
*     1 ASM8PTS BDY(WORD),          /* FORMAT PATTERNS - SEE PTTRNS  */
*      2 * CHAR(8) BDY(WORD),                                      0354
*       3 * BIT(8) BDY(BYTE) INIT('00000011'B),                    0354
*       3 * FIXED(8) INIT(16*LENGTH('+ A0')-16),                   0354
*       3 * FIXED(8) INIT(0),                                      0354
*       3 * FIXED(8) INIT(0),                                      0354
*       3 * PTR(31) INIT(ADDR(ASM8LB1)),                           0354
*      2 * CHAR(8) BDY(WORD),                                      0354
*       3 * BIT(8) BDY(BYTE) INIT('00000111'B),                    0354
*       3 * FIXED(8) INIT(LENGTH(ASMREQCT)-1+16*LENGTH('REQCT')-16),
*       3 * FIXED(8) INIT(5),                                      0354
*       3 * FIXED(8) INIT(11),                                     0354
*       3 * PTR(31) INIT(ADDR(ASM8LB2)),                           0354
*      2 * CHAR(4) BDY(WORD),                                      0354
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0354
*       3 * FIXED(8) INIT(LENGTH(ASMTCBPT)-1+16*LENGTH('TCBPT')-16),
*       3 * FIXED(8) INIT(23),                                     0354
*       3 * FIXED(8) INIT(29),                                     0354
*      2 * CHAR(4) BDY(WORD),                                      0354
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0354
*       3 * FIXED(8) INIT(LENGTH(ASMTMECB)-1+16*LENGTH('TMECB')-16),
*       3 * FIXED(8) INIT(41),                                     0354
*       3 * FIXED(8) INIT(47),                                     0354
*      2 * CHAR(4) BDY(WORD),                                      0354
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0354
*       3 * FIXED(8) INIT(LENGTH(ASMRLGRQ)-1+16*LENGTH('RLGRQ')-16),
*       3 * FIXED(8) INIT(59),                                     0354
*       3 * FIXED(8) INIT(65),                                     0354
*      2 * CHAR(4) BDY(WORD),                                      0354
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0354
*       3 * FIXED(8) INIT(LENGTH(ASMRLGWQ)-1+16*LENGTH('RLGWQ')-16),
*       3 * FIXED(8) INIT(77),                                     0354
*       3 * FIXED(8) INIT(83),                                     0354
*      2 * CHAR(4) BDY(WORD),                                      0354
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0354
*       3 * FIXED(8) INIT(LENGTH(ASMTASCB)-1+16*LENGTH('TASCB')-16),
*       3 * FIXED(8) INIT(95),                                     0354
*       3 * FIXED(8) INIT(101),                                    0354
*      2 * FIXED(31) INIT(0);                                      0354
*                                                                  0355
*   /*****************************************************************/
*   /*                                                               */
*   /* ASM9: (RSV8,PQIOE,PFRSL,PFRSW,PTM00) LABEL VARIABLES          */
*   /* REFERENCED IN FMT PTTRNS                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0355
*   DCL                                                            0355
*     ASM9LB1 CHAR(LENGTH('+ B8')) INIT('+ B8'),                   0355
*     ASM9LB2 CHAR(LENGTH('RSV8')) INIT('RSV8'),                   0355
*     * CHAR(LENGTH('PQIOE')) INIT('PQIOE'),                       0355
*     * CHAR(LENGTH('PFRSL')) INIT('PFRSL'),                       0355
*     * CHAR(LENGTH('PFRSW')) INIT('PFRSW'),                       0355
*     * CHAR(LENGTH('PTM')) INIT('PTM');                           0355
*                                                                  0355
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OF OUTPUT (HAND CODED)           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0356
*   DCL                                                            0356
*     1 ASM9PTS BDY(WORD),          /* FORMAT PATTERNS - SEE PTTRNS  */
*      2 * CHAR(8) BDY(WORD),                                      0356
*       3 * BIT(8) BDY(BYTE) INIT('00000011'B),                    0356
*       3 * FIXED(8) INIT(16*LENGTH('+ B8')-16),                   0356
*       3 * FIXED(8) INIT(0),                                      0356
*       3 * FIXED(8) INIT(0),                                      0356
*       3 * PTR(31) INIT(ADDR(ASM9LB1)),                           0356
*      2 * CHAR(8) BDY(WORD),                                      0356
*       3 * BIT(8) BDY(BYTE) INIT('00000111'B),                    0356
*       3 * FIXED(8) INIT(LENGTH(ASMRSV5)-1+16*LENGTH('RSV8')-16), 0356
*       3 * FIXED(8) INIT(5),                                      0356
*       3 * FIXED(8) INIT(11),                                     0356
*       3 * PTR(31) INIT(ADDR(ASM9LB2)),                           0356
*      2 * CHAR(4) BDY(WORD),                                      0356
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0356
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0356
*       3 * FIXED(8) INIT(23),                                     0356
*       3 * FIXED(8) INIT(29),                                     0356
*      2 * CHAR(4) BDY(WORD),                                      0356
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0356
*       3 * FIXED(8) INIT(LENGTH(ASMPQIOE)-1+16*LENGTH('PQIOE')-16),
*       3 * FIXED(8) INIT(41),                                     0356
*       3 * FIXED(8) INIT(47),                                     0356
*      2 * CHAR(4) BDY(WORD),                                      0356
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0356
*       3 * FIXED(8) INIT(LENGTH(ASMPFRSL)-1+16*LENGTH('PFRSL')-16),
*       3 * FIXED(8) INIT(59),                                     0356
*       3 * FIXED(8) INIT(65),                                     0356
*      2 * CHAR(4) BDY(WORD),                                      0356
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0356
*       3 * FIXED(8) INIT(LENGTH(ASMPFRSW)-1+16*LENGTH('PFRSW')-16),
*       3 * FIXED(8) INIT(77),                                     0356
*       3 * FIXED(8) INIT(83),                                     0356
*      2 * CHAR(4) BDY(WORD),                                      0356
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0356
*       3 * FIXED(8) INIT(LENGTH(ASMPTM)-1+16*LENGTH('PTM')-16),   0356
*       3 * FIXED(8) INIT(95),                                     0356
*       3 * FIXED(8) INIT(101),                                    0356
*      2 * FIXED(31) INIT(0);                                      0356
*                                                                  0357
*   /*****************************************************************/
*   /*                                                               */
*   /* ASM10: (PSWPD,PSRMT,PSRBC,VRMTR,PEX,PIOD) LABEL VARIABLES     */
*   /* REFERENCED IN FMT PTTRNS                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0357
*   DCL                                                            0357
*     ASM10LB1 CHAR(LENGTH('+ D0')) INIT('+ D0'),                  0357
*     ASM10LB2 CHAR(LENGTH('PSWPD')) INIT('PSWPD'),                0357
*     * CHAR(LENGTH('PSRMT')) INIT('PSRMT'),                       0357
*     * CHAR(LENGTH('PSRBC')) INIT('PSRBC'),                       0357
*     * CHAR(LENGTH('VRMTR')) INIT('VRMTR'),                       0357
*     * CHAR(LENGTH('PEX')) INIT('PEX'),                           0357
*     * CHAR(LENGTH('PCMPD')) INIT('PCMPD');                       0357
*                                                                  0357
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OF OUTPUT (HAND CODED)           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0358
*   DCL                                                            0358
*     1 ASM10PTS BDY(WORD),         /* FORMAT PATTERNS - SEE PTTRNS  */
*      2 * CHAR(8) BDY(WORD),                                      0358
*       3 * BIT(8) BDY(BYTE) INIT('00000011'B),                    0358
*       3 * FIXED(8) INIT(16*LENGTH('+ D0')-16),                   0358
*       3 * FIXED(8) INIT(0),                                      0358
*       3 * FIXED(8) INIT(0),                                      0358
*       3 * PTR(31) INIT(ADDR(ASM10LB1)),                          0358
*      2 * CHAR(8) BDY(WORD),                                      0358
*       3 * BIT(8) BDY(BYTE) INIT('00000111'B),                    0358
*       3 * FIXED(8) INIT(LENGTH(ASMPSWPD)-1+16*LENGTH('PSWPD')-16),
*       3 * FIXED(8) INIT(5),                                      0358
*       3 * FIXED(8) INIT(11),                                     0358
*       3 * PTR(31) INIT(ADDR(ASM10LB2)),                          0358
*      2 * CHAR(4) BDY(WORD),                                      0358
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0358
*       3 * FIXED(8) INIT(LENGTH(ASMPSRMT)-1+16*LENGTH('PSRMT')-16),
*       3 * FIXED(8) INIT(23),                                     0358
*       3 * FIXED(8) INIT(29),                                     0358
*      2 * CHAR(4) BDY(WORD),                                      0358
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0358
*       3 * FIXED(8) INIT(LENGTH(ASMPSRBC)-1+16*LENGTH('PSRBC')-16),
*       3 * FIXED(8) INIT(41),                                     0358
*       3 * FIXED(8) INIT(47),                                     0358
*      2 * CHAR(4) BDY(WORD),                                      0358
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0358
*       3 * FIXED(8) INIT(LENGTH(ASMVRMTR)-1+16*LENGTH('VRMTR')-16),
*       3 * FIXED(8) INIT(59),                                     0358
*       3 * FIXED(8) INIT(65),                                     0358
*      2 * CHAR(4) BDY(WORD),                                      0358
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0358
*       3 * FIXED(8) INIT(LENGTH(ASMPEX)-1+16*LENGTH('PEX')-16),   0358
*       3 * FIXED(8) INIT(77),                                     0358
*       3 * FIXED(8) INIT(83),                                     0358
*      2 * CHAR(4) BDY(WORD),                                      0358
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0358
*       3 * FIXED(8) INIT(LENGTH(ASMPCMPD)-1+16*LENGTH('PCMPD')-16),
*       3 * FIXED(8) INIT(95),                                     0358
*       3 * FIXED(8) INIT(101),                                    0358
*      2 * FIXED(31) INIT(0);                                      0358
*                                                                  0359
*   /*****************************************************************/
*   /*                                                               */
*   /* ASM11: (PION,PIOA,PIOC,PSAV,PACT,PRLG) LABEL VARIABLES        */
*   /* REFERENCED IN FMT PTTRNS                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0359
*   DCL                                                            0359
*     ASM11LB1 CHAR(LENGTH('+ E8')) INIT('+ E8'),                  0359
*     ASM11LB2 CHAR(LENGTH('PCMPN')) INIT('PCMPN'),                0359
*     * CHAR(LENGTH('PCMPA')) INIT('PCMPA'),                       0359
*     * CHAR(LENGTH('PCMP')) INIT('PCMP'),                         0359
*     * CHAR(LENGTH('PSAV')) INIT('PSAV'),                         0359
*     * CHAR(LENGTH('PACT')) INIT('PACT'),                         0359
*     * CHAR(LENGTH('PRLG')) INIT('PRLG');                         0359
*                                                                  0359
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OF OUTPUT (HAND CODED)           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0360
*   DCL                                                            0360
*     1 ASM11PTS BDY(WORD),         /* FORMAT PATTERNS - SEE PTTRNS  */
*      2 * CHAR(8) BDY(WORD),                                      0360
*       3 * BIT(8) BDY(BYTE) INIT('00000011'B),                    0360
*       3 * FIXED(8) INIT(16*LENGTH('+ E8')-16),                   0360
*       3 * FIXED(8) INIT(0),                                      0360
*       3 * FIXED(8) INIT(0),                                      0360
*       3 * PTR(31) INIT(ADDR(ASM11LB1)),                          0360
*      2 * CHAR(8) BDY(WORD),                                      0360
*       3 * BIT(8) BDY(BYTE) INIT('00000111'B),                    0360
*       3 * FIXED(8) INIT(LENGTH(ASMPCMPN)-1+16*LENGTH('PCMPN')-16),
*       3 * FIXED(8) INIT(5),                                      0360
*       3 * FIXED(8) INIT(11),                                     0360
*       3 * PTR(31) INIT(ADDR(ASM11LB2)),                          0360
*      2 * CHAR(4) BDY(WORD),                                      0360
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0360
*       3 * FIXED(8) INIT(LENGTH(ASMPCMPA)-1+16*LENGTH('PCMPA')-16),
*       3 * FIXED(8) INIT(23),                                     0360
*       3 * FIXED(8) INIT(29),                                     0360
*      2 * CHAR(4) BDY(WORD),                                      0360
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0360
*       3 * FIXED(8) INIT(LENGTH(ASMPCMP)-1+16*LENGTH('PCMP')-16), 0360
*       3 * FIXED(8) INIT(41),                                     0360
*       3 * FIXED(8) INIT(47),                                     0360
*      2 * CHAR(4) BDY(WORD),                                      0360
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0360
*       3 * FIXED(8) INIT(LENGTH(ASMPSAV)-1+16*LENGTH('PSAV')-16), 0360
*       3 * FIXED(8) INIT(59),                                     0360
*       3 * FIXED(8) INIT(65),                                     0360
*      2 * CHAR(4) BDY(WORD),                                      0360
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0360
*       3 * FIXED(8) INIT(LENGTH(ASMPACT)-1+16*LENGTH('PACT')-16), 0360
*       3 * FIXED(8) INIT(77),                                     0360
*       3 * FIXED(8) INIT(83),                                     0360
*      2 * CHAR(4) BDY(WORD),                                      0360
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0360
*       3 * FIXED(8) INIT(LENGTH(ASMPRLG)-1+16*LENGTH('PRLG')-16), 0360
*       3 * FIXED(8) INIT(95),                                     0360
*       3 * FIXED(8) INIT(101),                                    0360
*      2 * FIXED(31) INIT(0);                                      0360
*                                                                  0361
*   /*****************************************************************/
*   /*                                                               */
*   /* ASM12: (PFRLG,PMSG0,PMSGS,PMRH,PIOFR,PVACE) LABEL VARIABLES   */
*   /* REFERENCED IN FMT PTTRNS                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0361
*   DCL                                                            0361
*     ASM12LB1 CHAR(LENGTH('+100')) INIT('+100'),                  0361
*     ASM12LB2 CHAR(LENGTH('PFRLG')) INIT('PFRLG'),                0361
*     * CHAR(LENGTH('PMSG0')) INIT('PMSG0'),                       0361
*     * CHAR(LENGTH('PMSGS')) INIT('PMSGS'),                       0361
*     * CHAR(LENGTH('PVACQ')) INIT('PVACQ'),                       0361
*     * CHAR(LENGTH('PIOFR')) INIT('PIOFR'),                       0361
*     * CHAR(LENGTH('PVACE')) INIT('PVACE');                       0361
*                                                                  0361
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OF OUTPUT (HAND-CODED)           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0362
*   DCL                                                            0362
*     1 ASM12PTS BDY(WORD),         /* FORMAT PATTERNS - SEE PTTRNS  */
*      2 * CHAR(8) BDY(WORD),                                      0362
*       3 * BIT(8) BDY(BYTE) INIT('00000011'B),                    0362
*       3 * FIXED(8) INIT(16*LENGTH('+100')-16),                   0362
*       3 * FIXED(8) INIT(0),                                      0362
*       3 * FIXED(8) INIT(0),                                      0362
*       3 * PTR(31) INIT(ADDR(ASM12LB1)),                          0362
*      2 * CHAR(8) BDY(WORD),                                      0362
*       3 * BIT(8) BDY(BYTE) INIT('00000111'B),                    0362
*       3 * FIXED(8) INIT(LENGTH(ASMPFRLG)-1+16*LENGTH('PFRLG')-16),
*       3 * FIXED(8) INIT(5),                                      0362
*       3 * FIXED(8) INIT(11),                                     0362
*       3 * PTR(31) INIT(ADDR(ASM12LB2)),                          0362
*      2 * CHAR(4) BDY(WORD),                                      0362
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0362
*       3 * FIXED(8) INIT(LENGTH(ASMPMSG0)-1+16*LENGTH('PMSG0')-16),
*       3 * FIXED(8) INIT(23),                                     0362
*       3 * FIXED(8) INIT(29),                                     0362
*      2 * CHAR(4) BDY(WORD),                                      0362
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0362
*       3 * FIXED(8) INIT(LENGTH(ASMPMSGS)-1+16*LENGTH('PMSGS')-16),
*       3 * FIXED(8) INIT(41),                                     0362
*       3 * FIXED(8) INIT(47),                                     0362
*      2 * CHAR(4) BDY(WORD),                                      0362
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0362
*       3 * FIXED(8) INIT(LENGTH(ASMPVACQ)-1+16*LENGTH('PVACQ')-16),
*       3 * FIXED(8) INIT(59),                                     0362
*       3 * FIXED(8) INIT(65),                                     0362
*      2 * CHAR(4) BDY(WORD),                                      0362
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0362
*       3 * FIXED(8) INIT(LENGTH(ASMPIOFR)-1+16*LENGTH('PIOFR')-16),
*       3 * FIXED(8) INIT(77),                                     0362
*       3 * FIXED(8) INIT(83),                                     0362
*      2 * CHAR(4) BDY(WORD),                                      0362
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0362
*       3 * FIXED(8) INIT(LENGTH(ASMPVACE)-1+16*LENGTH('PVACE')-16),
*       3 * FIXED(8) INIT(95),                                     0362
*       3 * FIXED(8) INIT(101),                                    0362
*      2 * FIXED(31) INIT(0);                                      0362
*                                                                  0363
*   /*****************************************************************/
*   /*                                                               */
*   /* ASM13: (RSV10) LABEL VARIABLES REFERENCED IN FMT PTTRNS       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0363
*   DCL                                                            0363
*     ASM13LB1 CHAR(LENGTH('+118')) INIT('+118'),                  0363
*     ASM13LB2 CHAR(LENGTH('RSV10')) INIT('RSV10');                0363
*                                                                  0363
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OF OUTPUT (HAND CODED)           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0364
*   DCL                                                            0364
*     1 ASM13PTS BDY(WORD),         /* FORMAT PATTERNS - SEE PTTRNS  */
*      2 * CHAR(8) BDY(WORD),                                      0364
*       3 * BIT(8) BDY(BYTE) INIT('00000011'B),                    0364
*       3 * FIXED(8) INIT(16*LENGTH('+118')-16),                   0364
*       3 * FIXED(8) INIT(0),                                      0364
*       3 * FIXED(8) INIT(0),                                      0364
*       3 * PTR(31) INIT(ADDR(ASM13LB1)),                          0364
*      2 * CHAR(8) BDY(WORD),                                      0364
*       3 * BIT(8) BDY(BYTE) INIT('00000111'B),                    0364
*       3 * FIXED(8) INIT(LENGTH(ASMRSV5)-1+16*LENGTH('RSV10')-16),
*       3 * FIXED(8) INIT(5),                                      0364
*       3 * FIXED(8) INIT(11),                                     0364
*       3 * PTR(31) INIT(ADDR(ASM13LB2)),                          0364
*      2 * CHAR(4) BDY(WORD),                                      0364
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0364
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0364
*       3 * FIXED(8) INIT(0),                                      0364
*       3 * FIXED(8) INIT(29),                                     0364
*      2 * CHAR(4) BDY(WORD),                                      0364
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0364
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0364
*       3 * FIXED(8) INIT(0),                                      0364
*       3 * FIXED(8) INIT(47),                                     0364
*      2 * CHAR(4) BDY(WORD),                                      0364
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0364
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0364
*       3 * FIXED(8) INIT(0),                                      0364
*       3 * FIXED(8) INIT(65),                                     0364
*      2 * FIXED(31) INIT(0);                                      0364
*                                                                  0365
*   /*****************************************************************/
*   /*                                                               */
*   /* ASM14: (IOE POOL CONTROLLER) (CPID,CPSIZ,CPEXT,CPAVL,CPCNT)   */
*   /* LABEL VARIABLES REFERENCED IN FMT PTTRNS                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0365
*   DCL                                                            0365
*     ASM14LB1 CHAR(LENGTH('+128')) INIT('+128'),                  0365
*     ASM14LB2 CHAR(LENGTH('CPID')) INIT('CPID'),                  0365
*     * CHAR(LENGTH('CPSIZ')) INIT('CPSIZ'),                       0365
*     * CHAR(LENGTH('CPEXT')) INIT('CPEXT'),                       0365
*     * CHAR(LENGTH('CPAVL')) INIT('CPAVL'),                       0365
*     * CHAR(LENGTH('CPCNT')) INIT('CPCNT');                       0365
*                                                                  0365
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OF OUTPUT (HAND CODED)           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0366
*   DCL                                                            0366
*     1 ASM14PTS BDY(WORD),         /* FORMAT PATTERNS - SEE PTTRNS  */
*      2 * CHAR(8) BDY(WORD),                                      0366
*       3 * BIT(8) BDY(BYTE) INIT('00000011'B),                    0366
*       3 * FIXED(8) INIT(16*LENGTH('+128')-16),                   0366
*       3 * FIXED(8) INIT(0),                                      0366
*       3 * FIXED(8) INIT(0),                                      0366
*       3 * PTR(31) INIT(ADDR(ASM14LB1)),                          0366
*      2 * CHAR(12) BDY(WORD),                                     0366
*       3 * BIT(8) BDY(BYTE) INIT('00101111'B),                    0366
*       3 * FIXED(8) INIT(LENGTH(ASMCPID)-1+16*LENGTH('CPID')-16), 0366
*       3 * FIXED(8) INIT(5),                                      0366
*       3 * FIXED(8) INIT(11),                                     0366
*       3 * PTR(31) INIT(ADDR(ASM14LB2)),                          0366
*       3 ASM14DT3 PTR(31) INIT(0),                                0366
*      2 * CHAR(4) BDY(WORD),                                      0366
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0366
*       3 * FIXED(8) INIT(LENGTH(ASMCPSIZ)-1+16*LENGTH('CPSIZ')-16),
*       3 * FIXED(8) INIT(19),                                     0366
*       3 * FIXED(8) INIT(25),                                     0366
*      2 * CHAR(4) BDY(WORD),                                      0366
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0366
*       3 * FIXED(8) INIT(LENGTH(ASMCPEXT)-1+16*LENGTH('CPEXT')-16),
*       3 * FIXED(8) INIT(33),                                     0366
*       3 * FIXED(8) INIT(39),                                     0366
*      2 * CHAR(4) BDY(WORD),                                      0366
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0366
*       3 * FIXED(8) INIT(LENGTH(ASMCPAVL)-1+16*LENGTH('CPAVL')-16),
*       3 * FIXED(8) INIT(47),                                     0366
*       3 * FIXED(8) INIT(53),                                     0366
*      2 * CHAR(4) BDY(WORD),                                      0366
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0366
*       3 * FIXED(8) INIT(LENGTH(ASMCPCNT)-1+16*LENGTH('CPCNT')-16),
*       3 * FIXED(8) INIT(65),                                     0366
*       3 * FIXED(8) INIT(71),                                     0366
*      2 * FIXED(31) INIT(0);                                      0366
*                                                                  0367
*   /*****************************************************************/
*   /*                                                               */
*   /* ASM15: (BWK POOL CONTROLLER)                                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0367
*   DCL                                                            0367
*     ASM15LB1 CHAR(LENGTH('+138')) INIT('+138');                  0367
*                                                                  0367
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OF OUTPUT (HAND CODED)           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0368
*   DCL                                                            0368
*     1 ASM15PTS BDY(WORD),         /* FORMAT PATTERNS - SEE PTTRNS  */
*      2 * CHAR(8) BDY(WORD),                                      0368
*       3 * BIT(8) BDY(BYTE) INIT('00000011'B),                    0368
*       3 * FIXED(8) INIT(16*LENGTH('+138')-16),                   0368
*       3 * FIXED(8) INIT(0),                                      0368
*       3 * FIXED(8) INIT(0),                                      0368
*       3 * PTR(31) INIT(ADDR(ASM15LB1)),                          0368
*      2 * CHAR(4) BDY(WORD),                                      0368
*       3 * BIT(8) BDY(BYTE) INIT('00100100'B),                    0368
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMCPID)-1),                 0368
*       3 * FIXED(8) INIT(0),                                      0368
*       3 * FIXED(8) INIT(11),                                     0368
*      2 * CHAR(4) BDY(WORD),                                      0368
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0368
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMCPSIZ)-1),                0368
*       3 * FIXED(8) INIT(0),                                      0368
*       3 * FIXED(8) INIT(25),                                     0368
*      2 * CHAR(4) BDY(WORD),                                      0368
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0368
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMCPEXT)-1),                0368
*       3 * FIXED(8) INIT(0),                                      0368
*       3 * FIXED(8) INIT(39),                                     0368
*      2 * CHAR(4) BDY(WORD),                                      0368
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0368
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMCPAVL)-1),                0368
*       3 * FIXED(8) INIT(0),                                      0368
*       3 * FIXED(8) INIT(53),                                     0368
*      2 * CHAR(4) BDY(WORD),                                      0368
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0368
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMCPCNT)-1),                0368
*       3 * FIXED(8) INIT(0),                                      0368
*       3 * FIXED(8) INIT(71),                                     0368
*      2 * FIXED(31) INIT(0);                                      0368
*                                                                  0369
*   /*****************************************************************/
*   /*                                                               */
*   /* ASM16: (SWK POOL CONTROLLER)                                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0369
*   DCL                                                            0369
*     ASM16LB1 CHAR(LENGTH('+148')) INIT('+148');                  0369
*                                                                  0369
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OF OUTPUT (HAND CODED)           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0370
*   DCL                                                            0370
*     1 ASM16PTS BDY(WORD),                                        0370
*      2 * CHAR(8) BDY(WORD),                                      0370
*       3 * BIT(8) BDY(BYTE) INIT('00000011'B),                    0370
*       3 * FIXED(8) INIT(16*LENGTH('+148')-16),                   0370
*       3 * FIXED(8) INIT(0),                                      0370
*       3 * FIXED(8) INIT(0),                                      0370
*       3 * PTR(31) INIT(ADDR(ASM16LB1)),                          0370
*      2 * CHAR(4) BDY(WORD),                                      0370
*       3 * BIT(8) BDY(BYTE) INIT('00100100'B),                    0370
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMCPID)-1),                 0370
*       3 * FIXED(8) INIT(0),                                      0370
*       3 * FIXED(8) INIT(11),                                     0370
*      2 * CHAR(4) BDY(WORD),                                      0370
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0370
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMCPSIZ)-1),                0370
*       3 * FIXED(8) INIT(0),                                      0370
*       3 * FIXED(8) INIT(25),                                     0370
*      2 * CHAR(4) BDY(WORD),                                      0370
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0370
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMCPEXT)-1),                0370
*       3 * FIXED(8) INIT(0),                                      0370
*       3 * FIXED(8) INIT(39),                                     0370
*      2 * CHAR(4) BDY(WORD),                                      0370
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0370
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMCPAVL)-1),                0370
*       3 * FIXED(8) INIT(0),                                      0370
*       3 * FIXED(8) INIT(53),                                     0370
*      2 * CHAR(4) BDY(WORD),                                      0370
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0370
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMCPCNT)-1),                0370
*       3 * FIXED(8) INIT(0),                                      0370
*       3 * FIXED(8) INIT(71),                                     0370
*      2 * FIXED(31) INIT(0);                                      0370
*                                                                  0371
*   /*****************************************************************/
*   /*                                                               */
*   /* ASM17: (ACE POOL CONTROLLER) (CPTAK,CPRES) LABEL VARIABLES    */
*   /* REFERENCED IN FMT PTTRNS                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0371
*   DCL                                                            0371
*     ASM17LB1 CHAR(LENGTH('+158')) INIT('+158'),                  0371
*     ASM17LB7 CHAR(LENGTH('CPTAK')) INIT('CPTAK'),                0371
*     * CHAR(LENGTH('CPRES')) INIT('CPRES');                       0371
*                                                                  0371
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OF OUTPUT (HAND CODED)           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0372
*   DCL                                                            0372
*     1 ASM17PTS BDY(WORD),         /* FORMAT PATTERNS - SEE PTTRNS  */
*      2 * CHAR(8) BDY(WORD),                                      0372
*       3 * BIT(8) BDY(BYTE) INIT('00000011'B),                    0372
*       3 * FIXED(8) INIT(16*LENGTH('+158')-16),                   0372
*       3 * FIXED(8) INIT(0),                                      0372
*       3 * FIXED(8) INIT(0),                                      0372
*       3 * PTR(31) INIT(ADDR(ASM17LB1)),                          0372
*      2 * CHAR(4) BDY(WORD),                                      0372
*       3 * BIT(8) BDY(BYTE) INIT('00100100'B),                    0372
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMCPID)-1),                 0372
*       3 * FIXED(8) INIT(0),                                      0372
*       3 * FIXED(8) INIT(11),                                     0372
*      2 * CHAR(4) BDY(WORD),                                      0372
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0372
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMCPSIZ)-1),                0372
*       3 * FIXED(8) INIT(0),                                      0372
*       3 * FIXED(8) INIT(25),                                     0372
*      2 * CHAR(4) BDY(WORD),                                      0372
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0372
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMCPEXT)-1),                0372
*       3 * FIXED(8) INIT(0),                                      0372
*       3 * FIXED(8) INIT(39),                                     0372
*      2 * CHAR(4) BDY(WORD),                                      0372
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0372
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMCPAVL)-1),                0372
*       3 * FIXED(8) INIT(0),                                      0372
*       3 * FIXED(8) INIT(53),                                     0372
*      2 * CHAR(4) BDY(WORD),                                      0372
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0372
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMCPCNT)-1),                0372
*       3 * FIXED(8) INIT(0),                                      0372
*       3 * FIXED(8) INIT(71),                                     0372
*      2 * CHAR(8) BDY(WORD),                                      0372
*       3 * BIT(8) BDY(BYTE) INIT('00000111'B),                    0372
*       3 * FIXED(8) INIT(LENGTH(ASMCPTAK)-1+16*LENGTH('CPTAK')-16),
*       3 * FIXED(8) INIT(83),                                     0372
*       3 * FIXED(8) INIT(89),                                     0372
*       3 * PTR(31) INIT(ADDR(ASM17LB7)),                          0372
*      2 * CHAR(4) BDY(WORD),                                      0372
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0372
*       3 * FIXED(8) INIT(LENGTH(ASMCPRES)-1+16*LENGTH('CPRES')-16),
*       3 * FIXED(8) INIT(101),                                    0372
*       3 * FIXED(8) INIT(107),                                    0372
*      2 * FIXED(31) INIT(0);                                      0372
*                                                                  0373
*   /*****************************************************************/
*   /*                                                               */
*   /* WORK SAVE AREAS - USED BY ILRPAGIO                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0373
*   DCL                                                            0373
*     ASMALB1 CHAR(4) INIT('+170'),                                0373
*     ASMALB2 CHAR(9) INIT('PAGIO    ');                           0373
*                                                                  0373
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OUTPUT (HAND-CODED)              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0374
*   DCL                                                            0374
*     1 ASMAPTS BDY(WORD),                                         0374
*      2 * CHAR(8) BDY(WORD),                                      0374
*       3 * BIT(8) BDY(BYTE) INIT('00000011'B),                    0374
*       3 * FIXED(8) INIT(16*LENGTH('+170')-16),                   0374
*       3 * FIXED(8) INIT(0),                                      0374
*       3 * FIXED(8) INIT(0),                                      0374
*       3 * PTR(31) INIT(ADDR(ASMALB1)),                           0374
*      2 * CHAR(8) BDY(WORD),                                      0374
*       3 * BIT(8) BDY(BYTE) INIT('00000011'B),                    0374
*       3 * FIXED(8) INIT(16*LENGTH('PAGIO    ')-16),              0374
*       3 * FIXED(8) INIT(5),                                      0374
*       3 * FIXED(8) INIT(0),                                      0374
*       3 * PTR(31) INIT(ADDR(ASMALB2)),                           0374
*      2 * CHAR(8) BDY(WORD),                                      0374
*       3 * BIT(8) BDY(BYTE) INIT('00001100'B),                    0374
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0374
*       3 * FIXED(8) INIT(0),                                      0374
*       3 * FIXED(8) INIT(15),                                     0374
*       3 ASMADT3 PTR(31) INIT(0),                                 0374
*      2 * CHAR(4) BDY(WORD),                                      0374
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0374
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0374
*       3 * FIXED(8) INIT(0),                                      0374
*       3 * FIXED(8) INIT(25),                                     0374
*      2 * CHAR(4) BDY(WORD),                                      0374
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0374
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0374
*       3 * FIXED(8) INIT(0),                                      0374
*       3 * FIXED(8) INIT(35),                                     0374
*      2 * CHAR(4) BDY(WORD),                                      0374
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0374
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0374
*       3 * FIXED(8) INIT(0),                                      0374
*       3 * FIXED(8) INIT(45),                                     0374
*      2 * CHAR(4) BDY(WORD),                                      0374
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0374
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0374
*       3 * FIXED(8) INIT(0),                                      0374
*       3 * FIXED(8) INIT(55),                                     0374
*      2 * CHAR(4) BDY(WORD),                                      0374
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0374
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0374
*       3 * FIXED(8) INIT(0),                                      0374
*       3 * FIXED(8) INIT(65),                                     0374
*      2 * CHAR(4) BDY(WORD),                                      0374
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0374
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0374
*       3 * FIXED(8) INIT(0),                                      0374
*       3 * FIXED(8) INIT(75),                                     0374
*      2 * CHAR(4) BDY(WORD),                                      0374
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0374
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0374
*       3 * FIXED(8) INIT(0),                                      0374
*       3 * FIXED(8) INIT(85),                                     0374
*      2 * CHAR(4) BDY(WORD),                                      0374
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0374
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0374
*       3 * FIXED(8) INIT(0),                                      0374
*       3 * FIXED(8) INIT(95),                                     0374
*      2 * CHAR(4) BDY(WORD),                                      0374
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0374
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0374
*       3 * FIXED(8) INIT(0),                                      0374
*       3 * FIXED(8) INIT(105),                                    0374
*      2 * FIXED(31) INIT(0);                                      0374
*                                                                  0375
*   /*****************************************************************/
*   /*                                                               */
*   /* WORK SAVE AREAS - USED BY ILRPAGIO                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0375
*   DCL                                                            0375
*     ASMBLB1 CHAR(4) INIT('+198');                                0375
*                                                                  0375
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OUTPUT (HAND-CODED)              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0376
*   DCL                                                            0376
*     1 ASMBPTS BDY(WORD),                                         0376
*      2 * CHAR(8) BDY(WORD),                                      0376
*       3 * BIT(8) BDY(BYTE) INIT('00000011'B),                    0376
*       3 * FIXED(8) INIT(16*LENGTH('+198')-16),                   0376
*       3 * FIXED(8) INIT(0),                                      0376
*       3 * FIXED(8) INIT(0),                                      0376
*       3 * PTR(31) INIT(ADDR(ASMBLB1)),                           0376
*      2 * CHAR(4) BDY(WORD),                                      0376
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0376
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0376
*       3 * FIXED(8) INIT(0),                                      0376
*       3 * FIXED(8) INIT(15),                                     0376
*      2 * CHAR(4) BDY(WORD),                                      0376
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0376
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0376
*       3 * FIXED(8) INIT(0),                                      0376
*       3 * FIXED(8) INIT(25),                                     0376
*      2 * CHAR(4) BDY(WORD),                                      0376
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0376
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0376
*       3 * FIXED(8) INIT(0),                                      0376
*       3 * FIXED(8) INIT(35),                                     0376
*      2 * CHAR(4) BDY(WORD),                                      0376
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0376
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0376
*       3 * FIXED(8) INIT(0),                                      0376
*       3 * FIXED(8) INIT(45),                                     0376
*      2 * CHAR(4) BDY(WORD),                                      0376
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0376
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0376
*       3 * FIXED(8) INIT(0),                                      0376
*       3 * FIXED(8) INIT(55),                                     0376
*      2 * CHAR(4) BDY(WORD),                                      0376
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0376
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0376
*       3 * FIXED(8) INIT(0),                                      0376
*       3 * FIXED(8) INIT(65),                                     0376
*      2 * CHAR(4) BDY(WORD),                                      0376
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0376
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0376
*       3 * FIXED(8) INIT(0),                                      0376
*       3 * FIXED(8) INIT(75),                                     0376
*      2 * CHAR(4) BDY(WORD),                                      0376
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0376
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0376
*       3 * FIXED(8) INIT(0),                                      0376
*       3 * FIXED(8) INIT(85),                                     0376
*      2 * CHAR(4) BDY(WORD),                                      0376
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0376
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0376
*       3 * FIXED(8) INIT(0),                                      0376
*       3 * FIXED(8) INIT(95),                                     0376
*      2 * CHAR(4) BDY(WORD),                                      0376
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0376
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0376
*       3 * FIXED(8) INIT(0),                                      0376
*       3 * FIXED(8) INIT(105),                                    0376
*      2 * FIXED(31) INIT(0);                                      0376
*                                                                  0377
*   /*****************************************************************/
*   /*                                                               */
*   /* WORK SAVE AREAS - USED BY ILRQIOE                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0377
*   DCL                                                            0377
*     ASMCLB1 CHAR(4) INIT('+1C0'),                                0377
*     ASMCLB2 CHAR(9) INIT('QIOE     ');                           0377
*                                                                  0377
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OUTPUT (HAND-CODED)              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0378
*   DCL                                                            0378
*     1 ASMCPTS BDY(WORD),                                         0378
*      2 * CHAR(8) BDY(WORD),                                      0378
*       3 * BIT(8) BDY(BYTE) INIT('00000011'B),                    0378
*       3 * FIXED(8) INIT(16*LENGTH('+1C0')-16),                   0378
*       3 * FIXED(8) INIT(0),                                      0378
*       3 * FIXED(8) INIT(0),                                      0378
*       3 * PTR(31) INIT(ADDR(ASMCLB1)),                           0378
*      2 * CHAR(8) BDY(WORD),                                      0378
*       3 * BIT(8) BDY(BYTE) INIT('00000011'B),                    0378
*       3 * FIXED(8) INIT(16*LENGTH('QIOE     ')-16),              0378
*       3 * FIXED(8) INIT(5),                                      0378
*       3 * FIXED(8) INIT(0),                                      0378
*       3 * PTR(31) INIT(ADDR(ASMCLB2)),                           0378
*      2 * CHAR(4) BDY(WORD),                                      0378
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0378
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0378
*       3 * FIXED(8) INIT(0),                                      0378
*       3 * FIXED(8) INIT(15),                                     0378
*      2 * CHAR(4) BDY(WORD),                                      0378
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0378
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0378
*       3 * FIXED(8) INIT(0),                                      0378
*       3 * FIXED(8) INIT(25),                                     0378
*      2 * CHAR(4) BDY(WORD),                                      0378
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0378
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0378
*       3 * FIXED(8) INIT(0),                                      0378
*       3 * FIXED(8) INIT(35),                                     0378
*      2 * CHAR(4) BDY(WORD),                                      0378
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0378
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0378
*       3 * FIXED(8) INIT(0),                                      0378
*       3 * FIXED(8) INIT(45),                                     0378
*      2 * CHAR(4) BDY(WORD),                                      0378
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0378
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0378
*       3 * FIXED(8) INIT(0),                                      0378
*       3 * FIXED(8) INIT(55),                                     0378
*      2 * CHAR(4) BDY(WORD),                                      0378
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0378
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0378
*       3 * FIXED(8) INIT(0),                                      0378
*       3 * FIXED(8) INIT(65),                                     0378
*      2 * CHAR(4) BDY(WORD),                                      0378
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0378
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0378
*       3 * FIXED(8) INIT(0),                                      0378
*       3 * FIXED(8) INIT(75),                                     0378
*      2 * CHAR(4) BDY(WORD),                                      0378
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0378
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0378
*       3 * FIXED(8) INIT(0),                                      0378
*       3 * FIXED(8) INIT(95),                                     0378
*      2 * CHAR(4) BDY(WORD),                                      0378
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0378
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0378
*       3 * FIXED(8) INIT(0),                                      0378
*       3 * FIXED(8) INIT(85),                                     0378
*      2 * CHAR(4) BDY(WORD),                                      0378
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0378
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0378
*       3 * FIXED(8) INIT(0),                                      0378
*       3 * FIXED(8) INIT(105),                                    0378
*      2 * FIXED(31) INIT(0);                                      0378
*                                                                  0379
*   /*****************************************************************/
*   /*                                                               */
*   /* WORK SAVE AREAS - USED BY ILRQIOE                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0379
*   DCL                                                            0379
*     ASMDLB1 CHAR(4) INIT('+1E8');                                0379
*                                                                  0379
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OUTPUT (HAND-CODED)              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0380
*   DCL                                                            0380
*     1 ASMDPTS BDY(WORD),                                         0380
*      2 * CHAR(8) BDY(WORD),                                      0380
*       3 * BIT(8) BDY(BYTE) INIT('00000011'B),                    0380
*       3 * FIXED(8) INIT(16*LENGTH('+1E8')-16),                   0380
*       3 * FIXED(8) INIT(0),                                      0380
*       3 * FIXED(8) INIT(0),                                      0380
*       3 * PTR(31) INIT(ADDR(ASMDLB1)),                           0380
*      2 * CHAR(4) BDY(WORD),                                      0380
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0380
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0380
*       3 * FIXED(8) INIT(0),                                      0380
*       3 * FIXED(8) INIT(15),                                     0380
*      2 * CHAR(4) BDY(WORD),                                      0380
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0380
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0380
*       3 * FIXED(8) INIT(0),                                      0380
*       3 * FIXED(8) INIT(25),                                     0380
*      2 * CHAR(4) BDY(WORD),                                      0380
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0380
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0380
*       3 * FIXED(8) INIT(0),                                      0380
*       3 * FIXED(8) INIT(35),                                     0380
*      2 * CHAR(4) BDY(WORD),                                      0380
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0380
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0380
*       3 * FIXED(8) INIT(0),                                      0380
*       3 * FIXED(8) INIT(45),                                     0380
*      2 * CHAR(4) BDY(WORD),                                      0380
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0380
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0380
*       3 * FIXED(8) INIT(0),                                      0380
*       3 * FIXED(8) INIT(55),                                     0380
*      2 * CHAR(4) BDY(WORD),                                      0380
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0380
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0380
*       3 * FIXED(8) INIT(0),                                      0380
*       3 * FIXED(8) INIT(65),                                     0380
*      2 * CHAR(4) BDY(WORD),                                      0380
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0380
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0380
*       3 * FIXED(8) INIT(0),                                      0380
*       3 * FIXED(8) INIT(75),                                     0380
*      2 * CHAR(4) BDY(WORD),                                      0380
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0380
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0380
*       3 * FIXED(8) INIT(0),                                      0380
*       3 * FIXED(8) INIT(85),                                     0380
*      2 * CHAR(4) BDY(WORD),                                      0380
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0380
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0380
*       3 * FIXED(8) INIT(0),                                      0380
*       3 * FIXED(8) INIT(95),                                     0380
*      2 * CHAR(4) BDY(WORD),                                      0380
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0380
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0380
*       3 * FIXED(8) INIT(0),                                      0380
*       3 * FIXED(8) INIT(105),                                    0380
*      2 * FIXED(31) INIT(0);                                      0380
*                                                                  0381
*   /*****************************************************************/
*   /*                                                               */
*   /* WORK SAVE AREAS - USED BY ILRPAGCM                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0381
*   DCL                                                            0381
*     ASMELB1 CHAR(4) INIT('+210'),                                0381
*     ASMELB2 CHAR(9) INIT('PAGCM    ');                           0381
*                                                                  0381
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OUTPUT (HAND-CODED)              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0382
*   DCL                                                            0382
*     1 ASMEPTS BDY(WORD),                                         0382
*      2 * CHAR(8) BDY(WORD),                                      0382
*       3 * BIT(8) BDY(BYTE) INIT('00000011'B),                    0382
*       3 * FIXED(8) INIT(16*LENGTH('+210')-16),                   0382
*       3 * FIXED(8) INIT(0),                                      0382
*       3 * FIXED(8) INIT(0),                                      0382
*       3 * PTR(31) INIT(ADDR(ASMELB1)),                           0382
*      2 * CHAR(8) BDY(WORD),                                      0382
*       3 * BIT(8) BDY(BYTE) INIT('00000011'B),                    0382
*       3 * FIXED(8) INIT(16*LENGTH('PAGCM    ')-16),              0382
*       3 * FIXED(8) INIT(5),                                      0382
*       3 * FIXED(8) INIT(0),                                      0382
*       3 * PTR(31) INIT(ADDR(ASMELB2)),                           0382
*      2 * CHAR(4) BDY(WORD),                                      0382
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0382
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0382
*       3 * FIXED(8) INIT(0),                                      0382
*       3 * FIXED(8) INIT(15),                                     0382
*      2 * CHAR(4) BDY(WORD),                                      0382
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0382
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0382
*       3 * FIXED(8) INIT(0),                                      0382
*       3 * FIXED(8) INIT(25),                                     0382
*      2 * CHAR(4) BDY(WORD),                                      0382
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0382
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0382
*       3 * FIXED(8) INIT(0),                                      0382
*       3 * FIXED(8) INIT(35),                                     0382
*      2 * CHAR(4) BDY(WORD),                                      0382
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0382
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0382
*       3 * FIXED(8) INIT(0),                                      0382
*       3 * FIXED(8) INIT(45),                                     0382
*      2 * CHAR(4) BDY(WORD),                                      0382
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0382
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0382
*       3 * FIXED(8) INIT(0),                                      0382
*       3 * FIXED(8) INIT(55),                                     0382
*      2 * CHAR(4) BDY(WORD),                                      0382
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0382
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0382
*       3 * FIXED(8) INIT(0),                                      0382
*       3 * FIXED(8) INIT(65),                                     0382
*      2 * CHAR(4) BDY(WORD),                                      0382
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0382
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0382
*       3 * FIXED(8) INIT(0),                                      0382
*       3 * FIXED(8) INIT(75),                                     0382
*      2 * CHAR(4) BDY(WORD),                                      0382
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0382
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0382
*       3 * FIXED(8) INIT(0),                                      0382
*       3 * FIXED(8) INIT(85),                                     0382
*      2 * CHAR(4) BDY(WORD),                                      0382
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0382
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0382
*       3 * FIXED(8) INIT(0),                                      0382
*       3 * FIXED(8) INIT(95),                                     0382
*      2 * CHAR(4) BDY(WORD),                                      0382
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0382
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0382
*       3 * FIXED(8) INIT(0),                                      0382
*       3 * FIXED(8) INIT(105),                                    0382
*      2 * FIXED(31) INIT(0);                                      0382
*                                                                  0383
*   /*****************************************************************/
*   /*                                                               */
*   /* WORK SAVE AREAS - USED BY ILRPAGCM                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0383
*   DCL                                                            0383
*     ASMFLB1 CHAR(4) INIT('+218');                                0383
*                                                                  0384
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OUTPUT (HAND-CODED)              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0384
*   DCL                                                            0384
*     1 ASMFPTS BDY(WORD),                                         0384
*      2 * CHAR(8) BDY(WORD),                                      0384
*       3 * BIT(8) BDY(BYTE) INIT('00000011'B),                    0384
*       3 * FIXED(8) INIT(16*LENGTH('+218')-16),                   0384
*       3 * FIXED(8) INIT(0),                                      0384
*       3 * FIXED(8) INIT(0),                                      0384
*       3 * PTR(31) INIT(ADDR(ASMFLB1)),                           0384
*      2 * CHAR(4) BDY(WORD),                                      0384
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0384
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0384
*       3 * FIXED(8) INIT(0),                                      0384
*       3 * FIXED(8) INIT(15),                                     0384
*      2 * CHAR(4) BDY(WORD),                                      0384
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0384
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0384
*       3 * FIXED(8) INIT(0),                                      0384
*       3 * FIXED(8) INIT(25),                                     0384
*      2 * CHAR(4) BDY(WORD),                                      0384
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0384
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0384
*       3 * FIXED(8) INIT(0),                                      0384
*       3 * FIXED(8) INIT(35),                                     0384
*      2 * CHAR(4) BDY(WORD),                                      0384
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0384
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0384
*       3 * FIXED(8) INIT(0),                                      0384
*       3 * FIXED(8) INIT(45),                                     0384
*      2 * CHAR(4) BDY(WORD),                                      0384
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0384
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0384
*       3 * FIXED(8) INIT(0),                                      0384
*       3 * FIXED(8) INIT(55),                                     0384
*      2 * CHAR(4) BDY(WORD),                                      0384
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0384
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0384
*       3 * FIXED(8) INIT(0),                                      0384
*       3 * FIXED(8) INIT(65),                                     0384
*      2 * CHAR(4) BDY(WORD),                                      0384
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0384
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0384
*       3 * FIXED(8) INIT(0),                                      0384
*       3 * FIXED(8) INIT(75),                                     0384
*      2 * CHAR(4) BDY(WORD),                                      0384
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0384
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0384
*       3 * FIXED(8) INIT(0),                                      0384
*       3 * FIXED(8) INIT(85),                                     0384
*      2 * CHAR(4) BDY(WORD),                                      0384
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0384
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0384
*       3 * FIXED(8) INIT(0),                                      0384
*       3 * FIXED(8) INIT(95),                                     0384
*      2 * CHAR(4) BDY(WORD),                                      0384
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0384
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0384
*       3 * FIXED(8) INIT(0),                                      0384
*       3 * FIXED(8) INIT(105),                                    0384
*      2 * FIXED(31) INIT(0);                                      0384
*                                                                  0385
*   /*****************************************************************/
*   /*                                                               */
*   /* WORK SAVE AREAS - USED BY ILRSWAP                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0385
*   DCL                                                            0385
*     ASMGLB1 CHAR(4) INIT('+260'),                                0385
*     ASMGLB2 CHAR(9) INIT('SWAP     ');                           0385
*                                                                  0385
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OUTPUT (HAND-CODED)              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0386
*   DCL                                                            0386
*     1 ASMGPTS BDY(WORD),                                         0386
*      2 * CHAR(8) BDY(WORD),                                      0386
*       3 * BIT(8) BDY(BYTE) INIT('00000011'B),                    0386
*       3 * FIXED(8) INIT(16*LENGTH('+260')-16),                   0386
*       3 * FIXED(8) INIT(0),                                      0386
*       3 * FIXED(8) INIT(0),                                      0386
*       3 * PTR(31) INIT(ADDR(ASMGLB1)),                           0386
*      2 * CHAR(8) BDY(WORD),                                      0386
*       3 * BIT(8) BDY(BYTE) INIT('00000011'B),                    0386
*       3 * FIXED(8) INIT(16*LENGTH('SWAP     ')-16),              0386
*       3 * FIXED(8) INIT(5),                                      0386
*       3 * FIXED(8) INIT(0),                                      0386
*       3 * PTR(31) INIT(ADDR(ASMGLB2)),                           0386
*      2 * CHAR(4) BDY(WORD),                                      0386
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0386
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0386
*       3 * FIXED(8) INIT(0),                                      0386
*       3 * FIXED(8) INIT(15),                                     0386
*      2 * CHAR(4) BDY(WORD),                                      0386
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0386
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0386
*       3 * FIXED(8) INIT(0),                                      0386
*       3 * FIXED(8) INIT(25),                                     0386
*      2 * CHAR(4) BDY(WORD),                                      0386
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0386
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0386
*       3 * FIXED(8) INIT(0),                                      0386
*       3 * FIXED(8) INIT(35),                                     0386
*      2 * CHAR(4) BDY(WORD),                                      0386
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0386
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0386
*       3 * FIXED(8) INIT(0),                                      0386
*       3 * FIXED(8) INIT(45),                                     0386
*      2 * CHAR(4) BDY(WORD),                                      0386
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0386
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0386
*       3 * FIXED(8) INIT(0),                                      0386
*       3 * FIXED(8) INIT(55),                                     0386
*      2 * CHAR(4) BDY(WORD),                                      0386
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0386
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0386
*       3 * FIXED(8) INIT(0),                                      0386
*       3 * FIXED(8) INIT(65),                                     0386
*      2 * CHAR(4) BDY(WORD),                                      0386
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0386
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0386
*       3 * FIXED(8) INIT(0),                                      0386
*       3 * FIXED(8) INIT(75),                                     0386
*      2 * CHAR(4) BDY(WORD),                                      0386
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0386
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0386
*       3 * FIXED(8) INIT(0),                                      0386
*       3 * FIXED(8) INIT(85),                                     0386
*      2 * CHAR(4) BDY(WORD),                                      0386
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0386
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0386
*       3 * FIXED(8) INIT(0),                                      0386
*       3 * FIXED(8) INIT(95),                                     0386
*      2 * CHAR(4) BDY(WORD),                                      0386
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0386
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0386
*       3 * FIXED(8) INIT(0),                                      0386
*       3 * FIXED(8) INIT(105),                                    0386
*      2 * FIXED(31) INIT(0);                                      0386
*                                                                  0387
*   /*****************************************************************/
*   /*                                                               */
*   /* WORK SAVE AREAS - USED BY ILRSWAP                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0387
*   DCL                                                            0387
*     ASMHLB1 CHAR(4) INIT('+288');                                0387
*                                                                  0387
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OUTPUT (HAND-CODED)              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0388
*   DCL                                                            0388
*     1 ASMHPTS BDY(WORD),                                         0388
*      2 * CHAR(8) BDY(WORD),                                      0388
*       3 * BIT(8) BDY(BYTE) INIT('00000011'B),                    0388
*       3 * FIXED(8) INIT(16*LENGTH('+288')-16),                   0388
*       3 * FIXED(8) INIT(0),                                      0388
*       3 * FIXED(8) INIT(0),                                      0388
*       3 * PTR(31) INIT(ADDR(ASMHLB1)),                           0388
*      2 * CHAR(4) BDY(WORD),                                      0388
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0388
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0388
*       3 * FIXED(8) INIT(0),                                      0388
*       3 * FIXED(8) INIT(15),                                     0388
*      2 * CHAR(4) BDY(WORD),                                      0388
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0388
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0388
*       3 * FIXED(8) INIT(0),                                      0388
*       3 * FIXED(8) INIT(25),                                     0388
*      2 * CHAR(4) BDY(WORD),                                      0388
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0388
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0388
*       3 * FIXED(8) INIT(0),                                      0388
*       3 * FIXED(8) INIT(35),                                     0388
*      2 * CHAR(4) BDY(WORD),                                      0388
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0388
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0388
*       3 * FIXED(8) INIT(0),                                      0388
*       3 * FIXED(8) INIT(45),                                     0388
*      2 * CHAR(4) BDY(WORD),                                      0388
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0388
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0388
*       3 * FIXED(8) INIT(0),                                      0388
*       3 * FIXED(8) INIT(55),                                     0388
*      2 * CHAR(4) BDY(WORD),                                      0388
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0388
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0388
*       3 * FIXED(8) INIT(0),                                      0388
*       3 * FIXED(8) INIT(65),                                     0388
*      2 * CHAR(4) BDY(WORD),                                      0388
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0388
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0388
*       3 * FIXED(8) INIT(0),                                      0388
*       3 * FIXED(8) INIT(75),                                     0388
*      2 * CHAR(4) BDY(WORD),                                      0388
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0388
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0388
*       3 * FIXED(8) INIT(0),                                      0388
*       3 * FIXED(8) INIT(85),                                     0388
*      2 * CHAR(4) BDY(WORD),                                      0388
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0388
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0388
*       3 * FIXED(8) INIT(0),                                      0388
*       3 * FIXED(8) INIT(95),                                     0388
*      2 * CHAR(4) BDY(WORD),                                      0388
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0388
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0388
*       3 * FIXED(8) INIT(0),                                      0388
*       3 * FIXED(8) INIT(105),                                    0388
*      2 * FIXED(31) INIT(0);                                      0388
*                                                                  0389
*   /*****************************************************************/
*   /*                                                               */
*   /* WORK SAVE AREAS - USED BY ILRSLSQA                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0389
*   DCL                                                            0389
*     ASMILB1 CHAR(4) INIT('+2B0'),                                0389
*     ASMILB2 CHAR(9) INIT('SLSQA    ');                           0389
*                                                                  0389
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OUTPUT (HAND-CODED)              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0390
*   DCL                                                            0390
*     1 ASMIPTS BDY(WORD),                                         0390
*      2 * CHAR(8) BDY(WORD),                                      0390
*       3 * BIT(8) BDY(BYTE) INIT('00000011'B),                    0390
*       3 * FIXED(8) INIT(16*LENGTH('+2B0')-16),                   0390
*       3 * FIXED(8) INIT(0),                                      0390
*       3 * FIXED(8) INIT(0),                                      0390
*       3 * PTR(31) INIT(ADDR(ASMILB1)),                           0390
*      2 * CHAR(8) BDY(WORD),                                      0390
*       3 * BIT(8) BDY(BYTE) INIT('00000011'B),                    0390
*       3 * FIXED(8) INIT(16*LENGTH('SLSQA    ')-16),              0390
*       3 * FIXED(8) INIT(5),                                      0390
*       3 * FIXED(8) INIT(0),                                      0390
*       3 * PTR(31) INIT(ADDR(ASMILB2)),                           0390
*      2 * CHAR(4) BDY(WORD),                                      0390
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0390
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0390
*       3 * FIXED(8) INIT(0),                                      0390
*       3 * FIXED(8) INIT(15),                                     0390
*      2 * CHAR(4) BDY(WORD),                                      0390
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0390
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0390
*       3 * FIXED(8) INIT(0),                                      0390
*       3 * FIXED(8) INIT(25),                                     0390
*      2 * CHAR(4) BDY(WORD),                                      0390
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0390
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0390
*       3 * FIXED(8) INIT(0),                                      0390
*       3 * FIXED(8) INIT(35),                                     0390
*      2 * CHAR(4) BDY(WORD),                                      0390
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0390
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0390
*       3 * FIXED(8) INIT(0),                                      0390
*       3 * FIXED(8) INIT(45),                                     0390
*      2 * CHAR(4) BDY(WORD),                                      0390
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0390
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0390
*       3 * FIXED(8) INIT(0),                                      0390
*       3 * FIXED(8) INIT(55),                                     0390
*      2 * CHAR(4) BDY(WORD),                                      0390
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0390
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0390
*       3 * FIXED(8) INIT(0),                                      0390
*       3 * FIXED(8) INIT(65),                                     0390
*      2 * CHAR(4) BDY(WORD),                                      0390
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0390
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0390
*       3 * FIXED(8) INIT(0),                                      0390
*       3 * FIXED(8) INIT(75),                                     0390
*      2 * CHAR(4) BDY(WORD),                                      0390
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0390
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0390
*       3 * FIXED(8) INIT(0),                                      0390
*       3 * FIXED(8) INIT(85),                                     0390
*      2 * CHAR(4) BDY(WORD),                                      0390
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0390
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0390
*       3 * FIXED(8) INIT(0),                                      0390
*       3 * FIXED(8) INIT(95),                                     0390
*      2 * CHAR(4) BDY(WORD),                                      0390
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0390
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0390
*       3 * FIXED(8) INIT(0),                                      0390
*       3 * FIXED(8) INIT(105),                                    0390
*      2 * FIXED(31) INIT(0);                                      0390
*                                                                  0391
*   /*****************************************************************/
*   /*                                                               */
*   /* WORK SAVE AREAS - USED BY ILRSLSQA                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0391
*   DCL                                                            0391
*     ASMJLB1 CHAR(4) INIT('+2D8');                                0391
*                                                                  0391
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OUTPUT (HAND-CODED)              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0392
*   DCL                                                            0392
*     1 ASMJPTS BDY(WORD),                                         0392
*      2 * CHAR(8) BDY(WORD),                                      0392
*       3 * BIT(8) BDY(BYTE) INIT('00000011'B),                    0392
*       3 * FIXED(8) INIT(16*LENGTH('+2D8')-16),                   0392
*       3 * FIXED(8) INIT(0),                                      0392
*       3 * FIXED(8) INIT(0),                                      0392
*       3 * PTR(31) INIT(ADDR(ASMJLB1)),                           0392
*      2 * CHAR(4) BDY(WORD),                                      0392
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0392
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0392
*       3 * FIXED(8) INIT(0),                                      0392
*       3 * FIXED(8) INIT(15),                                     0392
*      2 * CHAR(4) BDY(WORD),                                      0392
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0392
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0392
*       3 * FIXED(8) INIT(0),                                      0392
*       3 * FIXED(8) INIT(25),                                     0392
*      2 * CHAR(4) BDY(WORD),                                      0392
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0392
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0392
*       3 * FIXED(8) INIT(0),                                      0392
*       3 * FIXED(8) INIT(35),                                     0392
*      2 * CHAR(4) BDY(WORD),                                      0392
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0392
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0392
*       3 * FIXED(8) INIT(0),                                      0392
*       3 * FIXED(8) INIT(45),                                     0392
*      2 * CHAR(4) BDY(WORD),                                      0392
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0392
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0392
*       3 * FIXED(8) INIT(0),                                      0392
*       3 * FIXED(8) INIT(55),                                     0392
*      2 * CHAR(4) BDY(WORD),                                      0392
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0392
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0392
*       3 * FIXED(8) INIT(0),                                      0392
*       3 * FIXED(8) INIT(65),                                     0392
*      2 * CHAR(4) BDY(WORD),                                      0392
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0392
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0392
*       3 * FIXED(8) INIT(0),                                      0392
*       3 * FIXED(8) INIT(75),                                     0392
*      2 * CHAR(4) BDY(WORD),                                      0392
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0392
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0392
*       3 * FIXED(8) INIT(0),                                      0392
*       3 * FIXED(8) INIT(85),                                     0392
*      2 * CHAR(4) BDY(WORD),                                      0392
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0392
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0392
*       3 * FIXED(8) INIT(0),                                      0392
*       3 * FIXED(8) INIT(95),                                     0392
*      2 * CHAR(4) BDY(WORD),                                      0392
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0392
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0392
*       3 * FIXED(8) INIT(0),                                      0392
*       3 * FIXED(8) INIT(105),                                    0392
*      2 * FIXED(31) INIT(0);                                      0392
*                                                                  0393
*   /*****************************************************************/
*   /*                                                               */
*   /* WORK SAVE AREAS - USED BY ILRPOS AND ILRVIOCM                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0393
*   DCL                                                            0393
*     ASMKLB1 CHAR(4) INIT('+300'),                                0393
*     ASMKLB2 CHAR(9) INIT('POS/VIOCM');                           0393
*                                                                  0393
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OUTPUT (HAND-CODED)              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0394
*   DCL                                                            0394
*     1 ASMKPTS BDY(WORD),                                         0394
*      2 * CHAR(8) BDY(WORD),                                      0394
*       3 * BIT(8) BDY(BYTE) INIT('00000011'B),                    0394
*       3 * FIXED(8) INIT(16*LENGTH('+300')-16),                   0394
*       3 * FIXED(8) INIT(0),                                      0394
*       3 * FIXED(8) INIT(0),                                      0394
*       3 * PTR(31) INIT(ADDR(ASMKLB1)),                           0394
*      2 * CHAR(8) BDY(WORD),                                      0394
*       3 * BIT(8) BDY(BYTE) INIT('00000011'B),                    0394
*       3 * FIXED(8) INIT(16*LENGTH('POS/VIOCM')-16),              0394
*       3 * FIXED(8) INIT(5),                                      0394
*       3 * FIXED(8) INIT(0),                                      0394
*       3 * PTR(31) INIT(ADDR(ASMKLB2)),                           0394
*      2 * CHAR(4) BDY(WORD),                                      0394
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0394
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0394
*       3 * FIXED(8) INIT(0),                                      0394
*       3 * FIXED(8) INIT(15),                                     0394
*      2 * CHAR(4) BDY(WORD),                                      0394
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0394
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0394
*       3 * FIXED(8) INIT(0),                                      0394
*       3 * FIXED(8) INIT(25),                                     0394
*      2 * CHAR(4) BDY(WORD),                                      0394
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0394
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0394
*       3 * FIXED(8) INIT(0),                                      0394
*       3 * FIXED(8) INIT(35),                                     0394
*      2 * CHAR(4) BDY(WORD),                                      0394
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0394
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0394
*       3 * FIXED(8) INIT(0),                                      0394
*       3 * FIXED(8) INIT(45),                                     0394
*      2 * CHAR(4) BDY(WORD),                                      0394
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0394
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0394
*       3 * FIXED(8) INIT(0),                                      0394
*       3 * FIXED(8) INIT(55),                                     0394
*      2 * CHAR(4) BDY(WORD),                                      0394
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0394
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0394
*       3 * FIXED(8) INIT(0),                                      0394
*       3 * FIXED(8) INIT(65),                                     0394
*      2 * CHAR(4) BDY(WORD),                                      0394
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0394
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0394
*       3 * FIXED(8) INIT(0),                                      0394
*       3 * FIXED(8) INIT(75),                                     0394
*      2 * CHAR(4) BDY(WORD),                                      0394
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0394
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0394
*       3 * FIXED(8) INIT(0),                                      0394
*       3 * FIXED(8) INIT(85),                                     0394
*      2 * CHAR(4) BDY(WORD),                                      0394
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0394
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0394
*       3 * FIXED(8) INIT(0),                                      0394
*       3 * FIXED(8) INIT(95),                                     0394
*      2 * CHAR(4) BDY(WORD),                                      0394
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0394
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0394
*       3 * FIXED(8) INIT(0),                                      0394
*       3 * FIXED(8) INIT(105),                                    0394
*      2 * FIXED(31) INIT(0);                                      0394
*                                                                  0395
*   /*****************************************************************/
*   /*                                                               */
*   /* WORK SAVE AREAS - USED BY ILRPOS AND ILRVIOCM                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0395
*   DCL                                                            0395
*     ASMLLB1 CHAR(4) INIT('+328');                                0395
*                                                                  0395
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OUTPUT (HAND-CODED)              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0396
*   DCL                                                            0396
*     1 ASMLPTS BDY(WORD),                                         0396
*      2 * CHAR(8) BDY(WORD),                                      0396
*       3 * BIT(8) BDY(BYTE) INIT('00000011'B),                    0396
*       3 * FIXED(8) INIT(16*LENGTH('+328')-16),                   0396
*       3 * FIXED(8) INIT(0),                                      0396
*       3 * FIXED(8) INIT(0),                                      0396
*       3 * PTR(31) INIT(ADDR(ASMLLB1)),                           0396
*      2 * CHAR(4) BDY(WORD),                                      0396
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0396
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0396
*       3 * FIXED(8) INIT(0),                                      0396
*       3 * FIXED(8) INIT(15),                                     0396
*      2 * CHAR(4) BDY(WORD),                                      0396
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0396
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0396
*       3 * FIXED(8) INIT(0),                                      0396
*       3 * FIXED(8) INIT(25),                                     0396
*      2 * CHAR(4) BDY(WORD),                                      0396
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0396
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0396
*       3 * FIXED(8) INIT(0),                                      0396
*       3 * FIXED(8) INIT(35),                                     0396
*      2 * CHAR(4) BDY(WORD),                                      0396
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0396
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0396
*       3 * FIXED(8) INIT(0),                                      0396
*       3 * FIXED(8) INIT(45),                                     0396
*      2 * CHAR(4) BDY(WORD),                                      0396
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0396
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0396
*       3 * FIXED(8) INIT(0),                                      0396
*       3 * FIXED(8) INIT(55),                                     0396
*      2 * CHAR(4) BDY(WORD),                                      0396
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0396
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0396
*       3 * FIXED(8) INIT(0),                                      0396
*       3 * FIXED(8) INIT(65),                                     0396
*      2 * CHAR(4) BDY(WORD),                                      0396
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0396
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0396
*       3 * FIXED(8) INIT(0),                                      0396
*       3 * FIXED(8) INIT(75),                                     0396
*      2 * CHAR(4) BDY(WORD),                                      0396
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0396
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0396
*       3 * FIXED(8) INIT(0),                                      0396
*       3 * FIXED(8) INIT(85),                                     0396
*      2 * CHAR(4) BDY(WORD),                                      0396
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0396
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0396
*       3 * FIXED(8) INIT(0),                                      0396
*       3 * FIXED(8) INIT(95),                                     0396
*      2 * CHAR(4) BDY(WORD),                                      0396
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0396
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0396
*       3 * FIXED(8) INIT(0),                                      0396
*       3 * FIXED(8) INIT(105),                                    0396
*      2 * FIXED(31) INIT(0);                                      0396
*                                                                  0397
*   /*****************************************************************/
*   /*                                                               */
*   /* WORK SAVE AREAS - USED BY ILRPEX AND ILRMSG00                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0397
*   DCL                                                            0397
*     ASMMLB1 CHAR(4) INIT('+350'),                                0397
*     ASMMLB2 CHAR(9) INIT('PEX/MSG00');                           0397
*                                                                  0397
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OUTPUT (HAND-CODED)              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0398
*   DCL                                                            0398
*     1 ASMMPTS BDY(WORD),                                         0398
*      2 * CHAR(8) BDY(WORD),                                      0398
*       3 * BIT(8) BDY(BYTE) INIT('00000011'B),                    0398
*       3 * FIXED(8) INIT(16*LENGTH('+350')-16),                   0398
*       3 * FIXED(8) INIT(0),                                      0398
*       3 * FIXED(8) INIT(0),                                      0398
*       3 * PTR(31) INIT(ADDR(ASMMLB1)),                           0398
*      2 * CHAR(8) BDY(WORD),                                      0398
*       3 * BIT(8) BDY(BYTE) INIT('00000011'B),                    0398
*       3 * FIXED(8) INIT(16*LENGTH('PEX/MSG00')-16),              0398
*       3 * FIXED(8) INIT(5),                                      0398
*       3 * FIXED(8) INIT(0),                                      0398
*       3 * PTR(31) INIT(ADDR(ASMMLB2)),                           0398
*      2 * CHAR(4) BDY(WORD),                                      0398
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0398
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0398
*       3 * FIXED(8) INIT(0),                                      0398
*       3 * FIXED(8) INIT(15),                                     0398
*      2 * CHAR(4) BDY(WORD),                                      0398
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0398
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0398
*       3 * FIXED(8) INIT(0),                                      0398
*       3 * FIXED(8) INIT(25),                                     0398
*      2 * CHAR(4) BDY(WORD),                                      0398
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0398
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0398
*       3 * FIXED(8) INIT(0),                                      0398
*       3 * FIXED(8) INIT(35),                                     0398
*      2 * CHAR(4) BDY(WORD),                                      0398
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0398
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0398
*       3 * FIXED(8) INIT(0),                                      0398
*       3 * FIXED(8) INIT(45),                                     0398
*      2 * CHAR(4) BDY(WORD),                                      0398
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0398
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0398
*       3 * FIXED(8) INIT(0),                                      0398
*       3 * FIXED(8) INIT(55),                                     0398
*      2 * CHAR(4) BDY(WORD),                                      0398
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0398
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0398
*       3 * FIXED(8) INIT(0),                                      0398
*       3 * FIXED(8) INIT(65),                                     0398
*      2 * CHAR(4) BDY(WORD),                                      0398
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0398
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0398
*       3 * FIXED(8) INIT(0),                                      0398
*       3 * FIXED(8) INIT(75),                                     0398
*      2 * CHAR(4) BDY(WORD),                                      0398
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0398
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0398
*       3 * FIXED(8) INIT(0),                                      0398
*       3 * FIXED(8) INIT(85),                                     0398
*      2 * CHAR(4) BDY(WORD),                                      0398
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0398
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0398
*       3 * FIXED(8) INIT(0),                                      0398
*       3 * FIXED(8) INIT(95),                                     0398
*      2 * CHAR(4) BDY(WORD),                                      0398
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0398
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0398
*       3 * FIXED(8) INIT(0),                                      0398
*       3 * FIXED(8) INIT(105),                                    0398
*      2 * FIXED(31) INIT(0);                                      0398
*                                                                  0399
*   /*****************************************************************/
*   /*                                                               */
*   /* WORK SAVE AREAS - USED BY ILRPEX00                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0399
*   DCL                                                            0399
*     ASMNLB1 CHAR(4) INIT('+378');                                0399
*                                                                  0399
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OUTPUT (HAND-CODED)              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0400
*   DCL                                                            0400
*     1 ASMNPTS BDY(WORD),                                         0400
*      2 * CHAR(8) BDY(WORD),                                      0400
*       3 * BIT(8) BDY(BYTE) INIT('00000011'B),                    0400
*       3 * FIXED(8) INIT(16*LENGTH('+378')-16),                   0400
*       3 * FIXED(8) INIT(0),                                      0400
*       3 * FIXED(8) INIT(0),                                      0400
*       3 * PTR(31) INIT(ADDR(ASMNLB1)),                           0400
*      2 * CHAR(4) BDY(WORD),                                      0400
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0400
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0400
*       3 * FIXED(8) INIT(0),                                      0400
*       3 * FIXED(8) INIT(15),                                     0400
*      2 * CHAR(4) BDY(WORD),                                      0400
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0400
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0400
*       3 * FIXED(8) INIT(0),                                      0400
*       3 * FIXED(8) INIT(25),                                     0400
*      2 * CHAR(4) BDY(WORD),                                      0400
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0400
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0400
*       3 * FIXED(8) INIT(0),                                      0400
*       3 * FIXED(8) INIT(35),                                     0400
*      2 * CHAR(4) BDY(WORD),                                      0400
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0400
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0400
*       3 * FIXED(8) INIT(0),                                      0400
*       3 * FIXED(8) INIT(45),                                     0400
*      2 * CHAR(4) BDY(WORD),                                      0400
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0400
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0400
*       3 * FIXED(8) INIT(0),                                      0400
*       3 * FIXED(8) INIT(55),                                     0400
*      2 * CHAR(4) BDY(WORD),                                      0400
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0400
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0400
*       3 * FIXED(8) INIT(0),                                      0400
*       3 * FIXED(8) INIT(65),                                     0400
*      2 * CHAR(4) BDY(WORD),                                      0400
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0400
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0400
*       3 * FIXED(8) INIT(0),                                      0400
*       3 * FIXED(8) INIT(75),                                     0400
*      2 * CHAR(4) BDY(WORD),                                      0400
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0400
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0400
*       3 * FIXED(8) INIT(0),                                      0400
*       3 * FIXED(8) INIT(85),                                     0400
*      2 * CHAR(4) BDY(WORD),                                      0400
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0400
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0400
*       3 * FIXED(8) INIT(0),                                      0400
*       3 * FIXED(8) INIT(95),                                     0400
*      2 * CHAR(4) BDY(WORD),                                      0400
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0400
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0400
*       3 * FIXED(8) INIT(0),                                      0400
*       3 * FIXED(8) INIT(105),                                    0400
*      2 * FIXED(31) INIT(0);                                      0400
*                                                                  0401
*   /*****************************************************************/
*   /*                                                               */
*   /* STANDARD SAVE AREA                                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0401
*   DCL                                                            0401
*     ASMOLB1 CHAR(4) INIT('+3A0'),                                0401
*     ASMOLB2 CHAR(9) INIT('STANDARD ');                           0401
*                                                                  0401
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OUTPUT (HAND-CODED)              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0402
*   DCL                                                            0402
*     1 ASMOPTS BDY(WORD),                                         0402
*      2 * CHAR(8) BDY(WORD),                                      0402
*       3 * BIT(8) BDY(BYTE) INIT('00000011'B),                    0402
*       3 * FIXED(8) INIT(16*LENGTH('+3A0')-16),                   0402
*       3 * FIXED(8) INIT(0),                                      0402
*       3 * FIXED(8) INIT(0),                                      0402
*       3 * PTR(31) INIT(ADDR(ASMOLB1)),                           0402
*      2 * CHAR(8) BDY(WORD),                                      0402
*       3 * BIT(8) BDY(BYTE) INIT('00000011'B),                    0402
*       3 * FIXED(8) INIT(16*LENGTH('STANDARD ')-16),              0402
*       3 * FIXED(8) INIT(5),                                      0402
*       3 * FIXED(8) INIT(0),                                      0402
*       3 * PTR(31) INIT(ADDR(ASMOLB2)),                           0402
*      2 * CHAR(4) BDY(WORD),                                      0402
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0402
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0402
*       3 * FIXED(8) INIT(0),                                      0402
*       3 * FIXED(8) INIT(15),                                     0402
*      2 * CHAR(4) BDY(WORD),                                      0402
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0402
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0402
*       3 * FIXED(8) INIT(0),                                      0402
*       3 * FIXED(8) INIT(25),                                     0402
*      2 * CHAR(4) BDY(WORD),                                      0402
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0402
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0402
*       3 * FIXED(8) INIT(0),                                      0402
*       3 * FIXED(8) INIT(35),                                     0402
*      2 * CHAR(4) BDY(WORD),                                      0402
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0402
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0402
*       3 * FIXED(8) INIT(0),                                      0402
*       3 * FIXED(8) INIT(45),                                     0402
*      2 * CHAR(4) BDY(WORD),                                      0402
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0402
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0402
*       3 * FIXED(8) INIT(0),                                      0402
*       3 * FIXED(8) INIT(55),                                     0402
*      2 * CHAR(4) BDY(WORD),                                      0402
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0402
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0402
*       3 * FIXED(8) INIT(0),                                      0402
*       3 * FIXED(8) INIT(65),                                     0402
*      2 * CHAR(4) BDY(WORD),                                      0402
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0402
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0402
*       3 * FIXED(8) INIT(0),                                      0402
*       3 * FIXED(8) INIT(75),                                     0402
*      2 * CHAR(4) BDY(WORD),                                      0402
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0402
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0402
*       3 * FIXED(8) INIT(0),                                      0402
*       3 * FIXED(8) INIT(85),                                     0402
*      2 * CHAR(4) BDY(WORD),                                      0402
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0402
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0402
*       3 * FIXED(8) INIT(0),                                      0402
*       3 * FIXED(8) INIT(95),                                     0402
*      2 * FIXED(31) INIT(0);                                      0402
*                                                                  0403
*   /*****************************************************************/
*   /*                                                               */
*   /* STANDARD SAVE AREA                                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0403
*   DCL                                                            0403
*     ASMPLB1 CHAR(4) INIT('+3C4');                                0403
*                                                                  0403
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OUTPUT (HAND-CODED)              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0404
*   DCL                                                            0404
*     1 ASMPPTS BDY(WORD),                                         0404
*      2 * CHAR(8) BDY(WORD),                                      0404
*       3 * BIT(8) BDY(BYTE) INIT('00000011'B),                    0404
*       3 * FIXED(8) INIT(16*LENGTH('+3C4')-16),                   0404
*       3 * FIXED(8) INIT(0),                                      0404
*       3 * FIXED(8) INIT(0),                                      0404
*       3 * PTR(31) INIT(ADDR(ASMPLB1)),                           0404
*      2 * CHAR(4) BDY(WORD),                                      0404
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0404
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0404
*       3 * FIXED(8) INIT(0),                                      0404
*       3 * FIXED(8) INIT(15),                                     0404
*      2 * CHAR(4) BDY(WORD),                                      0404
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0404
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0404
*       3 * FIXED(8) INIT(0),                                      0404
*       3 * FIXED(8) INIT(25),                                     0404
*      2 * CHAR(4) BDY(WORD),                                      0404
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0404
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0404
*       3 * FIXED(8) INIT(0),                                      0404
*       3 * FIXED(8) INIT(35),                                     0404
*      2 * CHAR(4) BDY(WORD),                                      0404
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0404
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0404
*       3 * FIXED(8) INIT(0),                                      0404
*       3 * FIXED(8) INIT(45),                                     0404
*      2 * CHAR(4) BDY(WORD),                                      0404
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0404
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0404
*       3 * FIXED(8) INIT(0),                                      0404
*       3 * FIXED(8) INIT(55),                                     0404
*      2 * CHAR(4) BDY(WORD),                                      0404
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0404
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0404
*       3 * FIXED(8) INIT(0),                                      0404
*       3 * FIXED(8) INIT(65),                                     0404
*      2 * CHAR(4) BDY(WORD),                                      0404
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0404
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0404
*       3 * FIXED(8) INIT(0),                                      0404
*       3 * FIXED(8) INIT(75),                                     0404
*      2 * CHAR(4) BDY(WORD),                                      0404
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0404
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0404
*       3 * FIXED(8) INIT(0),                                      0404
*       3 * FIXED(8) INIT(85),                                     0404
*      2 * CHAR(4) BDY(WORD),                                      0404
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0404
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0404
*       3 * FIXED(8) INIT(0),                                      0404
*       3 * FIXED(8) INIT(95),                                     0404
*      2 * FIXED(31) INIT(0);                                      0404
*                                                                  0405
*   /*****************************************************************/
*   /*                                                               */
*   /* RESERVED SPACE                                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0405
*   DCL                                                            0405
*     ASMQLB1 CHAR(4) INIT('+3E8');                                0405
*                                                                  0405
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OUTPUT (HAND-CODED)              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0406
*   DCL                                                            0406
*     1 ASMQPTS BDY(WORD),                                         0406
*      2 * CHAR(8) BDY(WORD),                                      0406
*       3 * BIT(8) BDY(BYTE) INIT('00000011'B),                    0406
*       3 * FIXED(8) INIT(16*LENGTH('+3E8')-16),                   0406
*       3 * FIXED(8) INIT(0),                                      0406
*       3 * FIXED(8) INIT(0),                                      0406
*       3 * PTR(31) INIT(ADDR(ASMQLB1)),                           0406
*      2 * CHAR(4) BDY(WORD),                                      0406
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0406
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0406
*       3 * FIXED(8) INIT(0),                                      0406
*       3 * FIXED(8) INIT(15),                                     0406
*      2 * CHAR(4) BDY(WORD),                                      0406
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0406
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0406
*       3 * FIXED(8) INIT(0),                                      0406
*       3 * FIXED(8) INIT(25),                                     0406
*      2 * CHAR(4) BDY(WORD),                                      0406
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0406
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0406
*       3 * FIXED(8) INIT(0),                                      0406
*       3 * FIXED(8) INIT(35),                                     0406
*      2 * CHAR(4) BDY(WORD),                                      0406
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0406
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0406
*       3 * FIXED(8) INIT(0),                                      0406
*       3 * FIXED(8) INIT(45),                                     0406
*      2 * CHAR(4) BDY(WORD),                                      0406
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0406
*       3 * FIXED(8) INIT(16*0+LENGTH(ASMRSV5)-1),                 0406
*       3 * FIXED(8) INIT(0),                                      0406
*       3 * FIXED(8) INIT(55),                                     0406
*      2 * FIXED(31) INIT(0);                                      0406
*                                                                  0407
*/********************************************************************/
*/*  BEGINNING OF EXECUTABLE CODE FOR FMTASMVT                       */
*/********************************************************************/
*                                                                  0407
*   RFY                                                            0407
*     R14 RSTD;                                                    0407
*   RTNADDR1=R14;                   /* SAVE RETURN ADDRESS           */
         ST    R14,RTNADDR1                                        0408
*   RFY                                                            0409
*     R14 UNRSTD;                                                  0409
*   ANCHNAME=ANCHASM;               /* SET UP HEADER                 */
         L     @14,ABDPLPTR                                        0410
         L     @14,ADPLBUF(,@14)                                   0410
         MVC   ANCHNAME(8,@14),ANCHASM                             0410
*   ANCHTXT=ANCH;                                                  0411
         MVC   ANCHTXT(11,@14),ANCH                                0411
*   RFY                                                            0412
*    (R0,                                                          0412
*     R1) RSTD;                                                    0412
*   R0=ADDR(ASMVTPTR);              /* DATA FOR HEADER               */
         LA    R0,ASMVTPTR                                         0413
*   R1=ADDR(ASMVTNAM);              /* LABEL FOR HEADER              */
         LA    R1,ASMVTNAM                                         0414
*   CALL PRTHED;                    /* PRINT HEADER                  */
         BAL   @14,PRTHED                                          0415
*   RFY                                                            0416
*    (R0,                                                          0416
*     R1) UNRSTD;                                                  0416
*                                                                  0416
*/********************************************************************/
*/*     ****  FORMAT HEADER SECTION OF ASMVT  ****                   */
*/********************************************************************/
*                                                                  0417
*   ASM1DT2=ADDR(ASMFLAG1);         /* SET FIRST DATA PTR FOR FORMAT */
         MVC   ASM1DT2(4),ASMVTPTR                                 0417
*   RFY                                                            0418
*    (R0,                                                          0418
*     R1,                                                          0418
*     R15) RSTD;                                                   0418
*   DO I=1 TO DIM(HDRTAB);                                         0419
         LA    I,1                                                 0419
@DL00419 DS    0H                                                  0420
*     R0=HDRTAB(I);                 /* ADDRESS OF FORMAT PATTERN     */
         LR    @14,I                                               0420
         SLA   @14,2                                               0420
         L     R0,HDRTAB-4(@14)                                    0420
*     R1=ABDPLPTR;                  /* PARM LIST PTR                 */
         L     @14,ABDPLPTR                                        0421
         LR    R1,@14                                              0421
*     CALL FORMAT;                  /* FORMAT LINES                  */
         L     @15,ADPLFRMT(,@14)                                  0422
         BALR  @14,@15                                             0422
*     RCOD1=RCOD1×R15;              /* OR IN RETURN CODE             */
         L     @14,RCOD1                                           0423
         OR    @14,R15                                             0423
         ST    @14,RCOD1                                           0423
*     CALL PRINT;                   /* PRINT LINE                    */
         L     @11,ABDPLPTR                                        0424
         L     @15,ADPLPRNT(,@11)                                  0424
         BALR  @14,@15                                             0424
*   END;                                                           0425
         AH    I,@CH00042                                          0425
         CH    I,@CH01472                                          0425
         BNH   @DL00419                                            0425
*   CALL PRINT;                     /* SPACE ONE LINE                */
         L     @11,ABDPLPTR                                        0426
         L     @15,ADPLPRNT(,@11)                                  0426
         BALR  @14,@15                                             0426
*   RFY                                                            0427
*    (R0,                                                          0427
*     R1,                                                          0427
*     R15) UNRSTD;                                                 0427
*                                                                  0427
*/********************************************************************/
*/*        **** FORMAT POOL CONTROLLERS  ****                        */
*/********************************************************************/
*                                                                  0428
*   BUFFER(1:1+LENGTH(POOLHDR))=POOLHDR;/* SET UP SUB-HDR            */
         L     @11,ABDPLPTR                                        0428
         L     @08,ADPLBUF(,@11)                                   0428
         MVI   BUFFER+16(@08),C' '                                 0428
         MVC   BUFFER(16,@08),POOLHDR                              0428
*   CALL PRINT;                     /* PRINT SUB HEADER              */
         L     @15,ADPLPRNT(,@11)                                  0429
         BALR  @14,@15                                             0429
*   ASM14DT3=ADDR(ASMIOEPC);        /* SET 1ST DATA PTR FOR FORMAT   */
         L     @11,ASMVTPTR                                        0430
         LA    @11,ASMIOEPC(,@11)                                  0430
         ST    @11,ASM14DT3                                        0430
*   RFY                                                            0431
*    (R0,                                                          0431
*     R1,                                                          0431
*     R15) RSTD;                                                   0431
*   DO I=1 TO DIM(POOLTAB);                                        0432
         LA    I,1                                                 0432
@DL00432 DS    0H                                                  0433
*     R0=POOLTAB(I);                /* ADDRESS OF FORMAT PATTERN     */
         LR    @14,I                                               0433
         SLA   @14,2                                               0433
         L     R0,POOLTAB-4(@14)                                   0433
*     R1=ABDPLPTR;                  /* PARM LIST PTR                 */
         L     @14,ABDPLPTR                                        0434
         LR    R1,@14                                              0434
*     CALL FORMAT;                  /* FORMAT LINE                   */
         L     @15,ADPLFRMT(,@14)                                  0435
         BALR  @14,@15                                             0435
*     RCOD1=RCOD1×R15;              /* OR IN RETURN CODE             */
         L     @14,RCOD1                                           0436
         OR    @14,R15                                             0436
         ST    @14,RCOD1                                           0436
*     CALL PRINT;                   /* PRINT LINE                    */
         L     @11,ABDPLPTR                                        0437
         L     @15,ADPLPRNT(,@11)                                  0437
         BALR  @14,@15                                             0437
*   END;                                                           0438
         AH    I,@CH00042                                          0438
         CH    I,@CH00168                                          0438
         BNH   @DL00432                                            0438
*   CALL PRINT;                     /* SPACE ONE LINE                */
         L     @11,ABDPLPTR                                        0439
         L     @15,ADPLPRNT(,@11)                                  0439
         BALR  @14,@15                                             0439
*   RFY                                                            0440
*    (R0,                                                          0440
*     R1,                                                          0440
*     R15) UNRSTD;                                                 0440
*                                                                  0440
*/********************************************************************/
*/*        **** FORMAT WORK SAVE AREAS   ****                        */
*/********************************************************************/
*                                                                  0441
*   BUFFER(1:1+LENGTH(SAVEHDR))=SAVEHDR;/* SET UP SUB-HDR            */
         L     @11,ABDPLPTR                                        0441
         L     @08,ADPLBUF(,@11)                                   0441
         MVI   BUFFER+15(@08),C' '                                 0441
         MVC   BUFFER(15,@08),SAVEHDR                              0441
*   CALL PRINT;                     /* PRINT SUB HEADER              */
         L     @15,ADPLPRNT(,@11)                                  0442
         BALR  @14,@15                                             0442
*   ASMADT3=ADDR(ASMWKSA1);         /* SET 1ST DATA PTR FOR FORMAT   */
         L     @11,ASMVTPTR                                        0443
         LA    @11,ASMWKSA1(,@11)                                  0443
         ST    @11,ASMADT3                                         0443
*   RFY                                                            0444
*    (R0,                                                          0444
*     R1,                                                          0444
*     R15) RSTD;                                                   0444
*   DO I=1 TO DIM(SAVETAB);                                        0445
         LA    I,1                                                 0445
@DL00445 DS    0H                                                  0446
*     R0=SAVETAB(I);                /* ADDRESS OF FORMAT PATTERN     */
         LR    @14,I                                               0446
         SLA   @14,2                                               0446
         L     R0,SAVETAB-4(@14)                                   0446
*     R1=ABDPLPTR;                  /* PARM LIST PTR                 */
         L     @14,ABDPLPTR                                        0447
         LR    R1,@14                                              0447
*     CALL FORMAT;                  /* FORMAT LINE                   */
         L     @15,ADPLFRMT(,@14)                                  0448
         BALR  @14,@15                                             0448
*     RCOD1=RCOD1×R15;              /* OR IN RETURN CODE             */
         L     @14,RCOD1                                           0449
         OR    @14,R15                                             0449
         ST    @14,RCOD1                                           0449
*     CALL PRINT;                   /* PRINT LINE                    */
         L     @11,ABDPLPTR                                        0450
         L     @15,ADPLPRNT(,@11)                                  0450
         BALR  @14,@15                                             0450
*   END;                                                           0451
         AH    I,@CH00042                                          0451
         CH    I,@CH01478                                          0451
         BNH   @DL00445                                            0451
*   CALL PRINT;                     /* PUT SPACE AT END OF BLOCK     */
         L     @11,ABDPLPTR                                        0452
         L     @15,ADPLPRNT(,@11)                                  0452
         BALR  @14,@15                                             0452
*   CALL PRINT;                                                    0453
         L     @11,ABDPLPTR                                        0453
         L     @15,ADPLPRNT(,@11)                                  0453
         BALR  @14,@15                                             0453
*   RFY                                                            0454
*    (R0,                                                          0454
*     R1,                                                          0454
*     R15) UNRSTD;                                                 0454
*                                                                  0455
*/********************************************************************/
*/* GET THE ADDRESS OF THE BAD SLOT ERROR RECORD.  IF THE            */
*/*  ACCESS IS GOOD AND THE POINTER NOT EQUAL ZERO, THEN CALL        */
*/*  SEGMENT TO FORMAT THE ERROR RECORD, OTHERWISE, SKIP ALL         */
*/*  EREC PROCESSING.                                                */
*/********************************************************************/
*                                                                  0455
*   DO;                             /* ILRMACCS (ERECPTR)          0455
*                                      FROM(ASMEREC)                 */
*     RFY                                                          0456
*      (R0,                                                        0456
*       R1,                                                        0456
*       R14,                                                       0456
*       R15) RSTD;                                                 0456
*     R0=ADDR(ASMEREC);                                            0457
         L     @11,ASMVTPTR                                        0457
         LA    R0,ASMEREC(,@11)                                    0457
*     R1=ABDPLPTR;                  /* POINT TO PARM LIST            */
         L     @11,ABDPLPTR                                        0458
         LR    R1,@11                                              0458
*     CALL ACCESS;                  /* ACCESS DATA                   */
         L     @15,ADPLMEMA(,@11)                                  0459
         BALR  @14,@15                                             0459
*     R14=R0;                       /* CANNOT USE R0 AS BASE         */
         LR    R14,R0                                              0460
*     IF R15=GOOD THEN              /* CHECK ACCESS                  */
         LTR   R15,R15                                             0461
         BNZ   @RF00461                                            0461
*       ERECPTR=CURRENT;            /* GET REQUESTED FIELD           */
         MVC   ERECPTR(4),CURRENT(R14)                             0462
*     ELSE                          /* ACCESS NO GOOD                */
*       ERECPTR=ZERO;               /* ZERO FIELD                    */
         B     @RC00461                                            0463
@RF00461 SLR   @11,@11                                             0463
         ST    @11,ERECPTR                                         0463
*     RFY                                                          0464
*      (R0,                                                        0464
*       R1,                                                        0464
*       R14,                                                       0464
*       R15) UNRSTD;                                               0464
@RC00461 DS    0H                                                  0465
*   END;                            /* ADDRESS OF BAD SLOT ERROR   0465
*                                      RECORD                        */
*   IF ERECPTR^=NULLPTR THEN        /* THERE ARE ENTRIES IN THE ERROR
*                                      RECORD                        */
         L     @11,ERECPTR                                         0466
         LTR   @11,@11                                             0466
         BZ    @RF00466                                            0466
*     DO;                                                          0467
*       RFY                                                        0468
*        (R0,                                                      0468
*         R1,                                                      0468
*         R15) RSTD;                /*                       @ZA11398*/
*       R0=ERECPTR;                 /* INPUT TO ACCESS       @ZA11398*/
         LR    R0,@11                                              0469
*       R1=ABDPLPTR;                /* INPUT TO ACCESS       @ZA11398*/
         L     @14,ABDPLPTR                                        0470
         LR    R1,@14                                              0470
*       CALL ACCESS;                /* RECORD ACCESSIBLE?    @ZA11398*/
         L     @15,ADPLMEMA(,@14)                                  0471
         BALR  @14,@15                                             0471
*       IF R15=GOOD THEN                                           0472
         LTR   R15,R15                                             0472
         BNZ   @RF00472                                            0472
*         CALL FMTEREC;             /* CALL SEGMENT TO FORMAT THE  0473
*                                      ERROR RECORD          @ZA11398*/
         BAL   @14,FMTEREC                                         0473
*       ELSE                                                       0474
*         ;                         /*                       @ZA11398*/
@RF00472 DS    0H                                                  0475
*       RFY                                                        0475
*        (R0,                                                      0475
*         R1) UNRSTD;               /*                       @ZA11398*/
*     END;                                                         0476
*   ELSE                                                           0477
*     ;                             /* PTR WAS BAD                   */
@RF00466 DS    0H                                                  0478
*   RCOD1=RCOD1×R15;                /* OR IN RETURN CODE             */
         L     @14,RCOD1                                           0478
         OR    @14,R15                                             0478
         ST    @14,RCOD1                                           0478
*   RFY                                                            0479
*     R15 UNRSTD;                                                  0479
*                                                                  0480
*/********************************************************************/
*/* GET THE ADDRESS OF THE MESSAGE BUFFER.  IF THE ACCESS            */
*/*  IS GOOD, CALL SEGMENT TO FORMAT THE MESSAGE BUFFER,             */
*/*  OTHERWISE, SKIP MSGBF PROCESSING.                               */
*/********************************************************************/
*                                                                  0480
*   DO;                             /* ILRMACCS (MSGBF) VIA(ASMMSGBF)*/
*     RFY                                                          0481
*      (R0,                                                        0481
*       R1,                                                        0481
*       R14,                                                       0481
*       R15) RSTD;                                                 0481
*     R1=ABDPLPTR;                                                 0482
         L     @11,ABDPLPTR                                        0482
         LR    R1,@11                                              0482
*     R0=ADDR(ASMMSGBF);            /* ADDR OF CELL WITH PTR         */
         L     @08,ASMVTPTR                                        0483
         LA    R0,ASMMSGBF(,@08)                                   0483
*     CALL ACCESS;                  /* ACCESS PTR TO MSGBF           */
         L     @15,ADPLMEMA(,@11)                                  0484
         BALR  @14,@15                                             0484
*     IF R15=GOOD THEN                                             0485
         LTR   R15,R15                                             0485
         BNZ   @RF00485                                            0485
*       DO;                         /* FOUND PTR - NOW FIND BLOCK    */
*         R14=R0;                   /* CANNOT USE R0 AS BASE REG     */
         LR    R14,R0                                              0487
*         R0=CURRENT;               /* POINTER ITSELF                */
         L     R0,CURRENT(,R14)                                    0488
*         MSGBFPTR=R0;              /* SAVE POINTER                  */
         ST    R0,MSGBFPTR                                         0489
*         CALL ACCESS;              /* ACCESS MSGBF ITSELF           */
         L     @11,ABDPLPTR                                        0490
         L     @15,ADPLMEMA(,@11)                                  0490
         BALR  @14,@15                                             0490
*         IF R15^=GOOD THEN                                        0491
         SLR   @11,@11                                             0491
         CR    R15,@11                                             0491
         BE    @RF00491                                            0491
*           MSGBFPTR=NULLPTR;                                      0492
         ST    @11,MSGBFPTR                                        0492
*       END;                                                       0493
*     ELSE                                                         0494
*       MSGBFPTR=NULLPTR;                                          0494
         B     @RC00485                                            0494
@RF00485 SLR   @11,@11                                             0494
         ST    @11,MSGBFPTR                                        0494
*     RFY                                                          0495
*      (R0,                                                        0495
*       R1,                                                        0495
*       R14,                                                       0495
*       R15) UNRSTD;                                               0495
@RC00485 DS    0H                                                  0496
*   END;                            /* GET MSGBF ADDR        @ZA11398*/
*   RFY                                                            0497
*     R15 RSTD;                                                    0497
*   IF MSGBFPTR^=NULLPTR THEN       /* ACCESS WAS OKAY               */
         ICM   @14,15,MSGBFPTR                                     0498
         BZ    @RF00498                                            0498
*     DO;                                                          0499
*       CALL FMTMSGBF;              /* CALL SEGMENT TO FORMAT THE  0500
*                                      MESSAGE BUFFER                */
         BAL   @14,FMTMSGBF                                        0500
*     END;                                                         0501
*   ELSE                                                           0502
*     ;                             /* PTR WAS BAD                   */
@RF00498 DS    0H                                                  0503
*   RCOD1=RCOD1×R15;                /* OR IN RETURN CODE             */
         L     @14,RCOD1                                           0503
         OR    @14,R15                                             0503
         ST    @14,RCOD1                                           0503
*   RFY                                                            0504
*     R15 UNRSTD;                                                  0504
*                                                                  0505
*/********************************************************************/
*/* FORMAT THE QUEUE OF AIAS POINTED IN ASMSTAGQ.  IF THE ACCESS IS  */
*/*  GOOD AND THE POINTER IS NOT ZERO, SET UP THE CORRECT ANCHOR     */
*/*  AND CALL THE SEGMENT TO FORMAT AIAS.  OTHERWISE, SKIP           */
*/*  PROCESSING FOR THE QUEUE                                        */
*/********************************************************************/
*                                                                  0505
*   DO;                             /* ILRMACCS (AIAPTR)           0505
*                                      FROM(ASMSTAGF)                */
*     RFY                                                          0506
*      (R0,                                                        0506
*       R1,                                                        0506
*       R14,                                                       0506
*       R15) RSTD;                                                 0506
*     R0=ADDR(ASMSTAGF);                                           0507
         L     @11,ASMVTPTR                                        0507
         LA    R0,ASMSTAGF(,@11)                                   0507
*     R1=ABDPLPTR;                  /* POINT TO PARM LIST            */
         L     @11,ABDPLPTR                                        0508
         LR    R1,@11                                              0508
*     CALL ACCESS;                  /* ACCESS DATA                   */
         L     @15,ADPLMEMA(,@11)                                  0509
         BALR  @14,@15                                             0509
*     R14=R0;                       /* CANNOT USE R0 AS BASE         */
         LR    R14,R0                                              0510
*     IF R15=GOOD THEN              /* CHECK ACCESS                  */
         LTR   R15,R15                                             0511
         BNZ   @RF00511                                            0511
*       AIAPTR=CURRENT;             /* GET REQUESTED FIELD           */
         L     AIAPTR,CURRENT(,R14)                                0512
*     ELSE                          /* ACCESS NO GOOD                */
*       AIAPTR=ZERO;                /* ZERO FIELD                    */
         B     @RC00511                                            0513
@RF00511 SLR   AIAPTR,AIAPTR                                       0513
*     RFY                                                          0514
*      (R0,                                                        0514
*       R1,                                                        0514
*       R14,                                                       0514
*       R15) UNRSTD;                                               0514
@RC00511 DS    0H                                                  0515
*   END;                            /* GET AIA QUEUE                 */
*   RFY                                                            0516
*     R15 RSTD;                                                    0516
*   IF AIAPTR^=NULLPTR THEN         /* THERE ARE AIAS ON THIS Q      */
         LTR   AIAPTR,AIAPTR                                       0517
         BZ    @RF00517                                            0517
*     DO;                                                          0518
*       ANCHNAME=ANCHAIA1;          /* SET UP CORRECT ANCHOR         */
         L     @14,ABDPLPTR                                        0519
         L     @14,ADPLBUF(,@14)                                   0519
         MVC   ANCHNAME(8,@14),ANCHAIA1                            0519
*       ANCHTXT=ANCH;                                              0520
         MVC   ANCHTXT(11,@14),ANCH                                0520
*       RFY                                                        0521
*        (R0,                                                      0521
*         R1,                                                      0521
*         R2) RSTD;                                                0521
*       R0=AIAPTR;                  /* DATA FOR HEADER               */
         LR    R0,AIAPTR                                           0522
*       R1=ADDR(AIANAM);            /* LABEL FOR HEADER              */
         LA    R1,AIANAM                                           0523
*       R2=NEXT;                    /* INDICATE CHAINED VIA NXAIA    */
         LA    R2,1                                                0524
*       CALL FMTAIA;                /* CALL SGMT THAT FMTS AIAS      */
         BAL   @14,FMTAIA                                          0525
*       RFY                                                        0526
*        (R0,                                                      0526
*         R1,                                                      0526
*         R2) UNRSTD;                                              0526
*     END;                          /* END PROCESS IF ACCESS GOOD    */
*   ELSE                                                           0528
*     ;                             /* PTR WAS BAD                   */
@RF00517 DS    0H                                                  0529
*   RCOD1=RCOD1×R15;                /* OR IN RETURN CODE             */
         L     @14,RCOD1                                           0529
         OR    @14,R15                                             0529
         ST    @14,RCOD1                                           0529
*   RFY                                                            0530
*     R15 UNRSTD;                                                  0530
*                                                                  0531
*/********************************************************************/
*/* FORMAT TWO QUEUES OF ACES POINTED IN 'ASMRLGRQ' AND 'ASMRLGWQ'   */
*/*  IN EACH CASE, IF THE ACCESS IS GOOD AND THE POINTER IS NOT      */
*/*  ZERO, SET UP THE CORRECT ANCHOR AND CALL SEGMENT TO FORMAT      */
*/*  ACES.  OTHERWISE, SKIP PROCESSING FOR THAT QUEUE                */
*/********************************************************************/
*                                                                  0531
*   DO;                             /* ILRMACCS (ACEPTR)           0531
*                                      FROM(ASMRLGRQ)                */
*     RFY                                                          0532
*      (R0,                                                        0532
*       R1,                                                        0532
*       R14,                                                       0532
*       R15) RSTD;                                                 0532
*     R0=ADDR(ASMRLGRQ);                                           0533
         L     @11,ASMVTPTR                                        0533
         LA    R0,ASMRLGRQ(,@11)                                   0533
*     R1=ABDPLPTR;                  /* POINT TO PARM LIST            */
         L     @11,ABDPLPTR                                        0534
         LR    R1,@11                                              0534
*     CALL ACCESS;                  /* ACCESS DATA                   */
         L     @15,ADPLMEMA(,@11)                                  0535
         BALR  @14,@15                                             0535
*     R14=R0;                       /* CANNOT USE R0 AS BASE         */
         LR    R14,R0                                              0536
*     IF R15=GOOD THEN              /* CHECK ACCESS                  */
         LTR   R15,R15                                             0537
         BNZ   @RF00537                                            0537
*       ACEPTR=CURRENT;             /* GET REQUESTED FIELD           */
         MVC   ACEPTR(4),CURRENT(R14)                              0538
*     ELSE                          /* ACCESS NO GOOD                */
*       ACEPTR=ZERO;                /* ZERO FIELD                    */
         B     @RC00537                                            0539
@RF00537 SLR   @11,@11                                             0539
         ST    @11,ACEPTR                                          0539
*     RFY                                                          0540
*      (R0,                                                        0540
*       R1,                                                        0540
*       R14,                                                       0540
*       R15) UNRSTD;                                               0540
@RC00537 DS    0H                                                  0541
*   END;                            /* GET ACE QUEUE                 */
*   RFY                                                            0542
*     R15 RSTD;                                                    0542
*   IF ACEPTR^=NULLPTR THEN         /* THERE ARE ACES ON THIS Q      */
         ICM   @14,15,ACEPTR                                       0543
         BZ    @RF00543                                            0543
*     DO;                                                          0544
*       ANCHNAME=ANCHACE1;          /* SET UP CORRECT ANCHOR         */
         L     @14,ABDPLPTR                                        0545
         L     @14,ADPLBUF(,@14)                                   0545
         MVC   ANCHNAME(8,@14),ANCHACE1                            0545
*       ANCHTXT=ANCH;                                              0546
         MVC   ANCHTXT(11,@14),ANCH                                0546
*       SINGLE=OFF;                 /* NOT A SINGLE BLK REQUEST      */
         NI    SINGLE,B'01111111'                                  0547
*       CALL FMTACE;                /* CALL SEGMENT TO FMT ACES      */
         BAL   @14,FMTACE                                          0548
*     END;                          /* END PROCESS IF ACCESS GOOD    */
*   ELSE                                                           0550
*     ;                             /* PTR WAS NOT GOOD              */
@RF00543 DS    0H                                                  0551
*   RCOD1=RCOD1×R15;                /* OR IN RETURN CODE             */
         L     @14,RCOD1                                           0551
         OR    @14,R15                                             0551
         ST    @14,RCOD1                                           0551
*   RFY                                                            0552
*     R15 UNRSTD;                                                  0552
*   DO;                             /* ILRMACCS (ACEPTR)           0553
*                                      FROM(ASMRLGWQ)                */
*     RFY                                                          0554
*      (R0,                                                        0554
*       R1,                                                        0554
*       R14,                                                       0554
*       R15) RSTD;                                                 0554
*     R0=ADDR(ASMRLGWQ);                                           0555
         L     @11,ASMVTPTR                                        0555
         LA    R0,ASMRLGWQ(,@11)                                   0555
*     R1=ABDPLPTR;                  /* POINT TO PARM LIST            */
         L     @11,ABDPLPTR                                        0556
         LR    R1,@11                                              0556
*     CALL ACCESS;                  /* ACCESS DATA                   */
         L     @15,ADPLMEMA(,@11)                                  0557
         BALR  @14,@15                                             0557
*     R14=R0;                       /* CANNOT USE R0 AS BASE         */
         LR    R14,R0                                              0558
*     IF R15=GOOD THEN              /* CHECK ACCESS                  */
         LTR   R15,R15                                             0559
         BNZ   @RF00559                                            0559
*       ACEPTR=CURRENT;             /* GET REQUESTED FIELD           */
         MVC   ACEPTR(4),CURRENT(R14)                              0560
*     ELSE                          /* ACCESS NO GOOD                */
*       ACEPTR=ZERO;                /* ZERO FIELD                    */
         B     @RC00559                                            0561
@RF00559 SLR   @11,@11                                             0561
         ST    @11,ACEPTR                                          0561
*     RFY                                                          0562
*      (R0,                                                        0562
*       R1,                                                        0562
*       R14,                                                       0562
*       R15) UNRSTD;                                               0562
@RC00559 DS    0H                                                  0563
*   END;                            /* GET ACE QUEUE                 */
*   RFY                                                            0564
*     R15 RSTD;                                                    0564
*   IF ACEPTR^=NULLPTR THEN         /* THERE ARE ACES ON THIS Q      */
         ICM   @14,15,ACEPTR                                       0565
         BZ    @RF00565                                            0565
*     DO;                                                          0566
*       ANCHNAME=ANCHACE2;          /* SET UP CORRECT ANCHOR         */
         L     @14,ABDPLPTR                                        0567
         L     @14,ADPLBUF(,@14)                                   0567
         MVC   ANCHNAME(8,@14),ANCHACE2                            0567
*       ANCHTXT=ANCH;                                              0568
         MVC   ANCHTXT(11,@14),ANCH                                0568
*       SINGLE=OFF;                 /* NOT A SINGLE BLK REQUEST      */
         NI    SINGLE,B'01111111'                                  0569
*       CALL FMTACE;                /* CALL SEGMENT THAT FMTS ACES   */
         BAL   @14,FMTACE                                          0570
*     END;                          /* END PROCESS IF ACCESS GOOD    */
*   ELSE                                                           0572
*     ;                             /* THE PTR WAS ZERO              */
@RF00565 DS    0H                                                  0573
*   RCOD1=RCOD1×R15;                /* OR IN RETURN CODE             */
         L     @14,RCOD1                                           0573
         OR    @14,R15                                             0573
         ST    @14,RCOD1                                           0573
*   R15=RCOD1;                      /* SET RETURN CODE FOR CALLER    */
         LR    R15,@14                                             0574
*   RFY                                                            0575
*     R14 RSTD;                                                    0575
*   R14=RTNADDR1;                   /* RESTORE RETURN ADDRESS        */
         L     R14,RTNADDR1                                        0576
*   RFY                                                            0577
*    (R14,                                                         0577
*     R15) UNRSTD;                                                 0577
*   END FMTASMVT;                   /* RETURN TO CALLER              */
@EL00004 DS    0H                                                  0578
@EF00004 DS    0H                                                  0578
@ER00004 BR    @14                                                 0578
*                                                                  0579
*/********************************************************************/
*/*                                                                  */
*/* FMTEREC:  SEGMENT THAT FORMAT THE BAD SLOT ERROR RECORD          */
*/*                                                                  */
*/* INPUT:    VIRTUAL ADDRESS OF EREC IN ERECPTR                     */
*/*                                                                  */
*/* PROCESS:  FORMAT THE HEADER SECTION, THEN THE RECORD ITSELF      */
*/*            IS DUMPED  EIGHT ENTRIES TO A LINE PRECEDED BY        */
*/*            ADDRESSES                                             */
*/*                                                                  */
*/* OUTPUT:   RETURN CODE = 0 IF ACCESSES AND FORMAT WERE            */
*/*            SUCCESSFUL.  ELSE, RETURN GREATER THAN ZERO           */
*/*                                                                  */
*/********************************************************************/
*                                                                  0579
*FMTEREC:                                                          0579
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0579
FMTEREC  DS    0H                                                  0580
*                                                                  0580
*   /*****************************************************************/
*   /*                                                               */
*   /* ERE1:ILRMLINE (CURNT,CFRST,CLAST) OF(EREC) LABEL VARIABLES    */
*   /* REFERENCED IN FORMAT PATTERNS                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0580
*   DCL                                                            0580
*     ERE1LB1 CHAR(LENGTH('CURNT')) INIT('CURNT');                 0580
*   DCL                                                            0581
*     ERE1LB2 CHAR(LENGTH('CFRST')) INIT('CFRST');                 0581
*   DCL                                                            0582
*     ERE1LB3 CHAR(LENGTH('CLAST')) INIT('CLAST');                 0582
*                                                                  0582
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OF OUTPUT                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0583
*   DCL                                                            0583
*     1 ERE1PTS BDY(WORD),                                         0583
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(ERECURNT)-1+16*LENGTH('CURNT
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(5),                                      0583
*       3 * FIXED(8) INIT(11),                                     0583
*       3 * PTR(31) INIT(ADDR(ERE1LB1)),/* SEE PTTLBPTR              */
*       3 ERE1DT1 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(ERECFRST)-1+16*LENGTH('CFRST
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(15+8),                                   0583
*       3 * FIXED(8) INIT(21+8),                                   0583
*       3 * PTR(31) INIT(ADDR(ERE1LB2)),/* SEE PTTLBPTR              */
*       3 ERE1DT2 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(ERECLAST)-1+16*LENGTH('CLAST
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(25+8+8),                                 0583
*       3 * FIXED(8) INIT(31+8+8),                                 0583
*       3 * PTR(31) INIT(ADDR(ERE1LB3)),/* SEE PTTLBPTR              */
*       3 ERE1DT3 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * FIXED(31) INIT(0);       /* END OF FORMAT PATTERNS        */
*/********************************************************************/
*/*                                                                  */
*/*        FORMAT PATTERNS FOR ONE LINE OF OUTPUT  (HAND CODED)      */
*/*                                                                  */
*/********************************************************************/
*                                                                  0584
*   DCL                                                            0584
*     1 ERE2PTS BDY(WORD),                                         0584
*      2 * CHAR(8) BDY(WORD),                                      0584
*       3 * BIT(8) BDY(BYTE) INIT('00011100'B),                    0584
*       3 * FIXED(8) INIT('03'X),                                  0584
*       3 * FIXED(8) INIT(0),                                      0584
*       3 * FIXED(8) INIT(0),                                      0584
*       3 ERE2DT1 PTR(31) INIT(0),                                 0584
*      2 * CHAR(8) BDY(WORD),                                      0584
*       3 * BIT(8) BDY(BYTE) INIT('00001100'B),                    0584
*       3 * FIXED(8) INIT('03'X),                                  0584
*       3 * FIXED(8) INIT(0),                                      0584
*       3 * FIXED(8) INIT(16),                                     0584
*       3 ERE2DT2 PTR(31) INIT(0),                                 0584
*      2 * CHAR(4) BDY(WORD),                                      0584
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0584
*       3 * FIXED(8) INIT('03'X),                                  0584
*       3 * FIXED(8) INIT(0),                                      0584
*       3 * FIXED(8) INIT(28),                                     0584
*      2 * CHAR(4) BDY(WORD),                                      0584
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0584
*       3 * FIXED(8) INIT('03'X),                                  0584
*       3 * FIXED(8) INIT(0),                                      0584
*       3 * FIXED(8) INIT(40),                                     0584
*      2 * CHAR(4) BDY(WORD),                                      0584
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0584
*       3 * FIXED(8) INIT('03'X),                                  0584
*       3 * FIXED(8) INIT(0),                                      0584
*       3 * FIXED(8) INIT(52),                                     0584
*      2 * CHAR(4) BDY(WORD),                                      0584
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0584
*       3 * FIXED(8) INIT('03'X),                                  0584
*       3 * FIXED(8) INIT(0),                                      0584
*       3 * FIXED(8) INIT(64),                                     0584
*      2 * CHAR(4) BDY(WORD),                                      0584
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0584
*       3 * FIXED(8) INIT('03'X),                                  0584
*       3 * FIXED(8) INIT(0),                                      0584
*       3 * FIXED(8) INIT(76),                                     0584
*      2 * CHAR(4) BDY(WORD),                                      0584
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0584
*       3 * FIXED(8) INIT('03'X),                                  0584
*       3 * FIXED(8) INIT(0),                                      0584
*       3 * FIXED(8) INIT(88),                                     0584
*      2 * CHAR(4) BDY(WORD),                                      0584
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0584
*       3 * FIXED(8) INIT('03'X),                                  0584
*       3 * FIXED(8) INIT(0),                                      0584
*       3 * FIXED(8) INIT(100),                                    0584
*      2 * FIXED(31) INIT(0);                                      0584
*                                                                  0585
*/********************************************************************/
*/*                                                                  */
*/*        FORMAT PATTERNS FOR ONE LINE OF OUTPUT  (HAND CODED)      */
*/*                                                                  */
*/********************************************************************/
*                                                                  0585
*   DCL                                                            0585
*     1 ERE3PTS BDY(WORD),                                         0585
*      2 * CHAR(8) BDY(WORD),                                      0585
*       3 * BIT(8) BDY(BYTE) INIT('00011100'B),                    0585
*       3 * FIXED(8) INIT('03'X),                                  0585
*       3 * FIXED(8) INIT(0),                                      0585
*       3 * FIXED(8) INIT(0),                                      0585
*       3 ERE3DT1 PTR(31) INIT(0),                                 0585
*      2 * CHAR(8) BDY(WORD),                                      0585
*       3 * BIT(8) BDY(BYTE) INIT('00001100'B),                    0585
*       3 * FIXED(8) INIT('03'X),                                  0585
*       3 * FIXED(8) INIT(0),                                      0585
*       3 * FIXED(8) INIT(16),                                     0585
*       3 ERE3DT2 PTR(31) INIT(0),                                 0585
*      2 * CHAR(4) BDY(WORD),                                      0585
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0585
*       3 * FIXED(8) INIT('03'X),                                  0585
*       3 * FIXED(8) INIT(0),                                      0585
*       3 * FIXED(8) INIT(28),                                     0585
*      2 * CHAR(4) BDY(WORD),                                      0585
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0585
*       3 * FIXED(8) INIT('03'X),                                  0585
*       3 * FIXED(8) INIT(0),                                      0585
*       3 * FIXED(8) INIT(40),                                     0585
*      2 * CHAR(4) BDY(WORD),                                      0585
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0585
*       3 * FIXED(8) INIT('03'X),                                  0585
*       3 * FIXED(8) INIT(0),                                      0585
*       3 * FIXED(8) INIT(52),                                     0585
*      2 * CHAR(4) BDY(WORD),                                      0585
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0585
*       3 * FIXED(8) INIT('03'X),                                  0585
*       3 * FIXED(8) INIT(0),                                      0585
*       3 * FIXED(8) INIT(64),                                     0585
*      2 * FIXED(31) INIT(0);                                      0585
*                                                                  0586
*/********************************************************************/
*/*  BEGINNING OF EXECUTABLE CODE FOR FMTEREC                        */
*/********************************************************************/
*                                                                  0586
*   RFY                                                            0586
*     R14 RSTD;                                                    0586
*   RTNADDR2=R14;                   /* SAVE RETURN ADDRESS           */
         ST    R14,RTNADDR2                                        0587
*   RFY                                                            0588
*     R14 UNRSTD;                                                  0588
*   ANCHNAME=ANCHEREC;              /* SET UP HEADER                 */
         L     @11,ABDPLPTR                                        0589
         L     @11,ADPLBUF(,@11)                                   0589
         MVC   ANCHNAME(8,@11),ANCHEREC                            0589
*   ANCHTXT=ANCH;                                                  0590
         MVC   ANCHTXT(11,@11),ANCH                                0590
*   RFY                                                            0591
*    (R0,                                                          0591
*     R1,                                                          0591
*     R15) RSTD;                                                   0591
*   R0=ADDR(ERECPTR);               /* DATA FOR HEADER               */
         LA    R0,ERECPTR                                          0592
*   R1=ADDR(ERECNAM);               /* LABEL FOR HEADER              */
         LA    R1,ERECNAM                                          0593
*   CALL PRTHED;                    /* PRINT HEADER                  */
         BAL   @14,PRTHED                                          0594
*   RFY                                                            0595
*    (R0,                                                          0595
*     R1) UNRSTD;                                                  0595
*   DO;                             /* ILRMFRMT (EREC) LINES(ERE1)   */
*     FORMRC=0;                     /* ZERO THE RETURN CODE          */
         SLR   FORMRC,FORMRC                                       0597
*     ERE1DT1=ADDR(ERECURNT);                                      0598
         L     @14,ERECPTR                                         0598
         ST    @14,ERE1DT1                                         0598
*     ERE1DT2=ADDR(ERECFRST);                                      0599
         LA    @11,ERECFRST(,@14)                                  0599
         ST    @11,ERE1DT2                                         0599
*     ERE1DT3=ADDR(ERECLAST);                                      0600
         LA    @14,ERECLAST(,@14)                                  0600
         ST    @14,ERE1DT3                                         0600
*     RFY                                                          0601
*      (R0,                                                        0601
*       R1) RSTD;                                                  0601
*     R0=ADDR(ERE1PTS);                                            0602
         LA    R0,ERE1PTS                                          0602
*     R1=ABDPLPTR;                  /* GET PARM ADDR                 */
         L     @14,ABDPLPTR                                        0603
         LR    R1,@14                                              0603
*     CALL FORMAT;                  /* FORMAT THE LINE               */
         L     @15,ADPLFRMT(,@14)                                  0604
         BALR  @14,@15                                             0604
*     RFY                                                          0605
*       R15 RSTD;                                                  0605
*     FORMRC=FORMRC×R15;            /* SAVE RETURN CODE              */
         OR    FORMRC,R15                                          0606
*     RFY                                                          0607
*       R15 UNRSTD;                                                0607
*     CALL PRINT;                   /* CALL PRINT ROUTINE            */
         L     @11,ABDPLPTR                                        0608
         L     @15,ADPLPRNT(,@11)                                  0608
         BALR  @14,@15                                             0608
*     RFY                                                          0609
*      (R0,                                                        0609
*       R1) UNRSTD;                                                0609
*     RFY                                                          0610
*       R15 RSTD;                                                  0610
*     R15=FORMRC;                   /* SAVE RETURN CODE FROM FORMAT  */
         LR    R15,FORMRC                                          0611
*     RFY                                                          0612
*       R15 UNRSTD;                                                0612
*   END;                            /* ILRMFRMT (EREC) LINES(ERE1) 0613
*                                      FORMAT POINTERS               */
*   RFY                                                            0614
*     R15 RSTD;                                                    0614
*   RCOD2=RCOD2×R15;                /* OR IN RETURN CODE             */
         L     @14,RCOD2                                           0615
         OR    @14,R15                                             0615
         ST    @14,RCOD2                                           0615
*                                                                  0616
*/********************************************************************/
*/*  FORMAT THE ERROR RECORDS THEMSELVES.  THERE WILL BE EIGHT       */
*/*   RECORDS TO A LINE, WITH THE ADDRESS OF THE FIRST RECORD OF     */
*/*   THAT LINE LEADING THE LINE.                                    */
*/********************************************************************/
*                                                                  0616
*   ERECPTR=ADDR(ERECLIST);         /* BEGINNING OF ERROR RECORDS    */
         L     @14,ERECPTR                                         0616
         LA    @14,ERECLIST(,@14)                                  0616
         ST    @14,ERECPTR                                         0616
*   RFY                                                            0617
*    (R0,                                                          0617
*     R1) RSTD;                                                    0617
*   R0=ADDR(ERE2PTS);               /* ADDR OF FORMAT PATTERNS       */
         LA    R0,ERE2PTS                                          0618
*   R1=ABDPLPTR;                    /* ADDR OF PARM LIST             */
         L     R1,ABDPLPTR                                         0619
*   RFY                                                            0620
*    (R0,                                                          0620
*     R1) UNRSTD;                                                  0620
*   DO I=1 TO MAXLINES;             /* PRINT ALL LINES               */
         LA    I,1                                                 0621
         B     @DE00621                                            0621
@DL00621 DS    0H                                                  0622
*     ERE2DT1=ADDR(ERECPTR);                                       0622
         LA    @14,ERECPTR                                         0622
         ST    @14,ERE2DT1                                         0622
*     ERE2DT2=ERECPTR;                                             0623
         MVC   ERE2DT2(4),ERECPTR                                  0623
*     CALL FORMAT;                  /* FORMAT ONE LINE               */
         L     @11,ABDPLPTR                                        0624
         L     @15,ADPLFRMT(,@11)                                  0624
         BALR  @14,@15                                             0624
*     RCOD2=RCOD2×R15;              /* OR IN RETURN CODE             */
         L     @14,RCOD2                                           0625
         OR    @14,R15                                             0625
         ST    @14,RCOD2                                           0625
*     CALL PRINT;                   /* PRINT ONE LINE                */
         L     @11,ABDPLPTR                                        0626
         L     @15,ADPLPRNT(,@11)                                  0626
         BALR  @14,@15                                             0626
*     ERECPTR=ERECPTR+LWRDS*LENGTH(ERECENTY);/* POINT TO NEXT SET OF
*                                      RECORDS                       */
         LA    @14,32                                              0627
         AL    @14,ERECPTR                                         0627
         ST    @14,ERECPTR                                         0627
*   END;                                                           0628
         AH    I,@CH00042                                          0628
@DE00621 C     I,MAXLINES                                          0628
         BNH   @DL00621                                            0628
*   ERE3DT1=ADDR(ERECPTR);          /* SET DATA PTRS FOR LAST LINE   */
         LA    @14,ERECPTR                                         0629
         ST    @14,ERE3DT1                                         0629
*   ERE3DT2=ERECPTR;                                               0630
         MVC   ERE3DT2(4),ERECPTR                                  0630
*   RFY                                                            0631
*     R0 RSTD;                                                     0631
*   R0=ADDR(ERE3PTS);               /* ADDR OF FORMAT PATTERNS       */
         LA    R0,ERE3PTS                                          0632
*   RFY                                                            0633
*     R0 UNRSTD;                                                   0633
*   CALL FORMAT;                    /* FORMAT LAST LINE              */
         L     @11,ABDPLPTR                                        0634
         L     @15,ADPLFRMT(,@11)                                  0634
         BALR  @14,@15                                             0634
*   RCOD2=RCOD2×R15;                /* OR IN RETURN CODE             */
         L     @14,RCOD2                                           0635
         OR    @14,R15                                             0635
         ST    @14,RCOD2                                           0635
*   CALL PRINT;                     /* PRINT LAST LINE               */
         L     @11,ABDPLPTR                                        0636
         L     @15,ADPLPRNT(,@11)                                  0636
         BALR  @14,@15                                             0636
*   CALL PRINT;                     /* SPACE AT END OF BLOCK         */
         L     @11,ABDPLPTR                                        0637
         L     @15,ADPLPRNT(,@11)                                  0637
         BALR  @14,@15                                             0637
*   RFY                                                            0638
*     R14 RSTD;                                                    0638
*   R15=RCOD2;                      /* SET RETURN CODE FOR CALLER    */
         L     R15,RCOD2                                           0639
*   R14=RTNADDR2;                   /* RESTORE RETURN ADDRESS        */
         L     R14,RTNADDR2                                        0640
*   RFY                                                            0641
*    (R14,                                                         0641
*     R15) UNRSTD;                                                 0641
*   END FMTEREC;                    /* RETURN TO CALLER              */
@EL00005 DS    0H                                                  0642
@EF00005 DS    0H                                                  0642
@ER00005 BR    @14                                                 0642
*                                                                  0643
*/********************************************************************/
*/*                                                                  */
*/* FMTMSGBF: SEGMENT TO FORMAT THE MESSAGE BUFFER                   */
*/*                                                                  */
*/* INPUT:    VIRTUAL ADDRESS OF MESSAGE BUFFER IN MSGBFPTR          */
*/*                                                                  */
*/* PROCESS:  FORMAT THE HEADER SECTION, THEN THE  THREE BUFFERS     */
*/*            AND THE TERMINATION BUFFER                            */
*/*                                                                  */
*/* OUTPUT:   RETURN CODE = 0 IF ACCESSES AND FORMATS WERE           */
*/*            SUCCESSFUL.  ELSE, RETURN CODE NOT ZERO.              */
*/*                                                                  */
*/********************************************************************/
*                                                                  0643
*FMTMSGBF:                                                         0643
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0643
FMTMSGBF DS    0H                                                  0644
*                                                                  0644
*   /*****************************************************************/
*   /*                                                               */
*   /* MSG1:ILRMLINE (CURNT,FIRST,LAST,TERM) OF(MSGBF) LABEL         */
*   /* VARIABLES REFERENCED IN FORMAT PATTERNS                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0644
*   DCL                                                            0644
*     MSG1LB1 CHAR(LENGTH('CURNT')) INIT('CURNT');                 0644
*   DCL                                                            0645
*     MSG1LB2 CHAR(LENGTH('FIRST')) INIT('FIRST');                 0645
*   DCL                                                            0646
*     MSG1LB3 CHAR(LENGTH('LAST')) INIT('LAST');                   0646
*   DCL                                                            0647
*     MSG1LB4 CHAR(LENGTH('TERM')) INIT('TERM');                   0647
*                                                                  0647
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OF OUTPUT                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0648
*   DCL                                                            0648
*     1 MSG1PTS BDY(WORD),                                         0648
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(MSGCURNT)-1+16*LENGTH('CURNT
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(5),                                      0648
*       3 * FIXED(8) INIT(11),                                     0648
*       3 * PTR(31) INIT(ADDR(MSG1LB1)),/* SEE PTTLBPTR              */
*       3 MSG1DT1 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(MSGFIRST)-1+16*LENGTH('FIRST
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(15+8),                                   0648
*       3 * FIXED(8) INIT(21+8),                                   0648
*       3 * PTR(31) INIT(ADDR(MSG1LB2)),/* SEE PTTLBPTR              */
*       3 MSG1DT2 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(MSGLAST)-1+16*LENGTH('LAST')
*             -16),                 /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(25+8+8),                                 0648
*       3 * FIXED(8) INIT(31+8+8),                                 0648
*       3 * PTR(31) INIT(ADDR(MSG1LB3)),/* SEE PTTLBPTR              */
*       3 MSG1DT3 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(MSGTERM)-1+16*LENGTH('TERM')
*             -16),                 /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(35+8+8+8),                               0648
*       3 * FIXED(8) INIT(41+8+8+8),                               0648
*       3 * PTR(31) INIT(ADDR(MSG1LB4)),/* SEE PTTLBPTR              */
*       3 MSG1DT4 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * FIXED(31) INIT(0);       /* END OF FORMAT PATTERNS        */
*/********************************************************************/
*/*                                                                  */
*/*                                                                  */
*/*   FORMAT PATTERNS FOR ONE LINE OF OUTPUT   (HAND CODED)          */
*/*                                                                  */
*/********************************************************************/
*                                                                  0649
*   DCL                                                            0649
*     1 MSG2PTS BDY(WORD),          /* FORMAT PATTERNS - SEE PTTRNS  */
*      2 * CHAR(8) BDY(WORD),                                      0649
*       3 * BIT(8) BDY(BYTE) INIT('00011100'B),                    0649
*       3 * FIXED(8) INIT(16*0+LENGTH(MSGFIRST)-1),                0649
*       3 * FIXED(8) INIT(0),                                      0649
*       3 * FIXED(8) INIT(0),                                      0649
*       3 MSG2DT1 PTR(31) INIT(0),                                 0649
*      2 * CHAR(8) BDY(WORD),                                      0649
*       3 * BIT(8) BDY(BYTE) INIT('00001100'B),                    0649
*       3 * FIXED(8) INIT(16*0+LENGTH(MSGFIRST)-1),                0649
*       3 * FIXED(8) INIT(0),                                      0649
*       3 * FIXED(8) INIT(15),                                     0649
*       3 MSG2DT2 PTR(31) INIT(0),                                 0649
*      2 * CHAR(4) BDY(WORD),                                      0649
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0649
*       3 * FIXED(8) INIT(16*0+LENGTH(MSGFIRST)-1),                0649
*       3 * FIXED(8) INIT(0),                                      0649
*       3 * FIXED(8) INIT(25),                                     0649
*      2 * CHAR(4) BDY(WORD),                                      0649
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0649
*       3 * FIXED(8) INIT(16*0+LENGTH(MSGFIRST)-1),                0649
*       3 * FIXED(8) INIT(0),                                      0649
*       3 * FIXED(8) INIT(35),                                     0649
*      2 * CHAR(4) BDY(WORD),                                      0649
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0649
*       3 * FIXED(8) INIT(16*0+LENGTH(MSGFIRST)-1),                0649
*       3 * FIXED(8) INIT(0),                                      0649
*       3 * FIXED(8) INIT(45),                                     0649
*      2 * CHAR(4) BDY(WORD),                                      0649
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0649
*       3 * FIXED(8) INIT(16*0+LENGTH(MSGFIRST)-1),                0649
*       3 * FIXED(8) INIT(0),                                      0649
*       3 * FIXED(8) INIT(55),                                     0649
*      2 * CHAR(4) BDY(WORD),                                      0649
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0649
*       3 * FIXED(8) INIT(16*0+LENGTH(MSGFIRST)-1),                0649
*       3 * FIXED(8) INIT(0),                                      0649
*       3 * FIXED(8) INIT(65),                                     0649
*      2 * CHAR(4) BDY(WORD),                                      0649
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0649
*       3 * FIXED(8) INIT(16*0+LENGTH(MSGFIRST)-1),                0649
*       3 * FIXED(8) INIT(0),                                      0649
*       3 * FIXED(8) INIT(75),                                     0649
*      2 * CHAR(4) BDY(WORD),                                      0649
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0649
*       3 * FIXED(8) INIT(16*0+LENGTH(MSGFIRST)-1),                0649
*       3 * FIXED(8) INIT(0),                                      0649
*       3 * FIXED(8) INIT(85),                                     0649
*      2 * CHAR(4) BDY(WORD),                                      0649
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0649
*       3 * FIXED(8) INIT(16*0+LENGTH(MSGFIRST)-1),                0649
*       3 * FIXED(8) INIT(0),                                      0649
*       3 * FIXED(8) INIT(95),                                     0649
*      2 * CHAR(4) BDY(WORD),                                      0649
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0649
*       3 * FIXED(8) INIT(16*0+LENGTH(MSGFIRST)-1),                0649
*       3 * FIXED(8) INIT(0),                                      0649
*       3 * FIXED(8) INIT(105),                                    0649
*      2 * FIXED(31) INIT(0);                                      0649
*                                                                  0650
*/********************************************************************/
*/*                                                                  */
*/*   FORMAT PATTERNS FOR ONE LINE OF OUTPUT   (HAND CODED)          */
*/*                                                                  */
*/********************************************************************/
*                                                                  0650
*   DCL                                                            0650
*     1 MSG3PTS BDY(WORD),          /* FORMAT PATTERNS - SEE PTTRNS  */
*      2 * CHAR(4) BDY(WORD),                                      0650
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0650
*       3 * FIXED(8) INIT(16*0+LENGTH(MSGFIRST)-1),                0650
*       3 * FIXED(8) INIT(0),                                      0650
*       3 * FIXED(8) INIT(15),                                     0650
*      2 * CHAR(4) BDY(WORD),                                      0650
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0650
*       3 * FIXED(8) INIT(16*0+LENGTH(MSGFIRST)-1),                0650
*       3 * FIXED(8) INIT(0),                                      0650
*       3 * FIXED(8) INIT(25),                                     0650
*      2 * CHAR(4) BDY(WORD),                                      0650
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0650
*       3 * FIXED(8) INIT(16*0+LENGTH(MSGFIRST)-1),                0650
*       3 * FIXED(8) INIT(0),                                      0650
*       3 * FIXED(8) INIT(35),                                     0650
*      2 * CHAR(4) BDY(WORD),                                      0650
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0650
*       3 * FIXED(8) INIT(16*0+LENGTH(MSGFIRST)-1),                0650
*       3 * FIXED(8) INIT(0),                                      0650
*       3 * FIXED(8) INIT(45),                                     0650
*      2 * CHAR(4) BDY(WORD),                                      0650
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0650
*       3 * FIXED(8) INIT(16*0+LENGTH(MSGFIRST)-1),                0650
*       3 * FIXED(8) INIT(0),                                      0650
*       3 * FIXED(8) INIT(55),                                     0650
*      2 * CHAR(4) BDY(WORD),                                      0650
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0650
*       3 * FIXED(8) INIT(16*0+LENGTH(MSGFIRST)-1),                0650
*       3 * FIXED(8) INIT(0),                                      0650
*       3 * FIXED(8) INIT(65),                                     0650
*      2 * CHAR(4) BDY(WORD),                                      0650
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0650
*       3 * FIXED(8) INIT(16*0+LENGTH(MSGFIRST)-1),                0650
*       3 * FIXED(8) INIT(0),                                      0650
*       3 * FIXED(8) INIT(75),                                     0650
*      2 * CHAR(4) BDY(WORD),                                      0650
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0650
*       3 * FIXED(8) INIT(16*0+LENGTH(MSGFIRST)-1),                0650
*       3 * FIXED(8) INIT(0),                                      0650
*       3 * FIXED(8) INIT(85),                                     0650
*      2 * CHAR(4) BDY(WORD),                                      0650
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0650
*       3 * FIXED(8) INIT(16*0+LENGTH(MSGFIRST)-1),                0650
*       3 * FIXED(8) INIT(0),                                      0650
*       3 * FIXED(8) INIT(95),                                     0650
*      2 * CHAR(4) BDY(WORD),                                      0650
*       3 * BIT(8) BDY(BYTE) INIT('00000100'B),                    0650
*       3 * FIXED(8) INIT(16*0+LENGTH(MSGFIRST)-1),                0650
*       3 * FIXED(8) INIT(0),                                      0650
*       3 * FIXED(8) INIT(105),                                    0650
*      2 * FIXED(31) INIT(0);                                      0650
*                                                                  0651
*/********************************************************************/
*/*  SAVE RETURN ADDRESS, SET UP ANCHOR, CALL ILRFPRTH AND FORMAT    */
*/*   HEADER SECTION OF THE MESSAGE BUFFER.                          */
*/********************************************************************/
*                                                                  0651
*   RFY                                                            0651
*     R14 RSTD;                                                    0651
*   RTNADDR3=R14;                   /* SAVE RETURN ADDRESS           */
         LR    RTNADDR3,R14                                        0652
*   RFY                                                            0653
*     R14 UNRSTD;                                                  0653
*   ANCHNAME=ANCHMSG;               /* SET UP HEADER                 */
         L     @11,ABDPLPTR                                        0654
         L     @11,ADPLBUF(,@11)                                   0654
         MVC   ANCHNAME(8,@11),ANCHMSG                             0654
*   ANCHTXT=ANCH;                                                  0655
         MVC   ANCHTXT(11,@11),ANCH                                0655
*   RFY                                                            0656
*    (R0,                                                          0656
*     R1,                                                          0656
*     R15) RSTD;                                                   0656
*   R0=ADDR(MSGBFPTR);              /* DATA FOR HEADER               */
         LA    R0,MSGBFPTR                                         0657
*   R1=ADDR(MSGNAM);                /* LABEL FOR HEADER              */
         LA    R1,MSGNAM                                           0658
*   CALL PRTHED;                    /* PRINT HEADER                  */
         BAL   @14,PRTHED                                          0659
*   DO;                             /* ILRMFRMT (MSGBF) LINES(MSG1)  */
*     FORMRC=0;                     /* ZERO THE RETURN CODE          */
         SLR   FORMRC,FORMRC                                       0661
*     MSG1DT1=ADDR(MSGCURNT);                                      0662
         L     @14,MSGBFPTR                                        0662
         ST    @14,MSG1DT1                                         0662
*     MSG1DT2=ADDR(MSGFIRST);                                      0663
         LA    @11,MSGFIRST(,@14)                                  0663
         ST    @11,MSG1DT2                                         0663
*     MSG1DT3=ADDR(MSGLAST);                                       0664
         LA    @11,MSGLAST(,@14)                                   0664
         ST    @11,MSG1DT3                                         0664
*     MSG1DT4=ADDR(MSGTERM);                                       0665
         LA    @14,MSGTERM(,@14)                                   0665
         ST    @14,MSG1DT4                                         0665
*     RFY                                                          0666
*      (R0,                                                        0666
*       R1) RSTD;                                                  0666
*     R0=ADDR(MSG1PTS);                                            0667
         LA    R0,MSG1PTS                                          0667
*     R1=ABDPLPTR;                  /* GET PARM ADDR                 */
         L     @14,ABDPLPTR                                        0668
         LR    R1,@14                                              0668
*     CALL FORMAT;                  /* FORMAT THE LINE               */
         L     @15,ADPLFRMT(,@14)                                  0669
         BALR  @14,@15                                             0669
*     RFY                                                          0670
*       R15 RSTD;                                                  0670
*     FORMRC=FORMRC×R15;            /* SAVE RETURN CODE              */
         OR    FORMRC,R15                                          0671
*     RFY                                                          0672
*       R15 UNRSTD;                                                0672
*     CALL PRINT;                   /* CALL PRINT ROUTINE            */
         L     @11,ABDPLPTR                                        0673
         L     @15,ADPLPRNT(,@11)                                  0673
         BALR  @14,@15                                             0673
*     RFY                                                          0674
*      (R0,                                                        0674
*       R1) UNRSTD;                                                0674
*     RFY                                                          0675
*       R15 RSTD;                                                  0675
*     R15=FORMRC;                   /* SAVE RETURN CODE FROM FORMAT  */
         LR    R15,FORMRC                                          0676
*     RFY                                                          0677
*       R15 UNRSTD;                                                0677
*   END;                            /* ILRMFRMT (MSGBF) LINES(MSG1)
*                                      FORMAT HEADER SECTION         */
*   RFY                                                            0679
*     R15 RSTD;                                                    0679
*   RCOD3=RCOD3×R15;                /* OR IN RETURN CODE             */
         L     @14,RCOD3                                           0680
         OR    @14,R15                                             0680
         ST    @14,RCOD3                                           0680
*   RFY                                                            0681
*     R15 UNRSTD;                                                  0681
*                                                                  0682
*/********************************************************************/
*/*  FORMAT ALL OF THE REGULAR MESSAGE BUFFERS, PLUS THE TERMINATION */
*/*   BUFFER.                                                        */
*/********************************************************************/
*                                                                  0682
*   RFY                                                            0682
*    (R0,                                                          0682
*     R1,                                                          0682
*     R15) RSTD;                                                   0682
*   MSGBFPTR=ADDR(MSGBUFFR);        /* PTR TO ACTUAL BUFFER          */
         L     @14,MSGBFPTR                                        0683
         LA    @14,MSGBUFFR(,@14)                                  0683
         ST    @14,MSGBFPTR                                        0683
*   DO I=1 TO NUMBUFS;              /* PRINT ALL BUFFERS             */
         LA    I,1                                                 0684
         B     @DE00684                                            0684
@DL00684 DS    0H                                                  0685
*     MSG2DT1=ADDR(MSGBFPTR);       /* SET DATA PTRS                 */
         LA    @14,MSGBFPTR                                        0685
         ST    @14,MSG2DT1                                         0685
*     MSG2DT2=MSGBFPTR;                                            0686
         MVC   MSG2DT2(4),MSGBFPTR                                 0686
*     R0=ADDR(MSG2PTS);             /* FORMAT PATTERN ADDRESS        */
         LA    R0,MSG2PTS                                          0687
*     R1=ABDPLPTR;                  /* PARM LIST PTR                 */
         L     @14,ABDPLPTR                                        0688
         LR    R1,@14                                              0688
*     CALL FORMAT;                  /* FORMAT LINE                   */
         L     @15,ADPLFRMT(,@14)                                  0689
         BALR  @14,@15                                             0689
*     RCOD3=RCOD3×R15;              /* OR IN RETURN CODE             */
         L     @14,RCOD3                                           0690
         OR    @14,R15                                             0690
         ST    @14,RCOD3                                           0690
*     CALL PRINT;                   /* PRINT LINE                    */
         L     @11,ABDPLPTR                                        0691
         L     @15,ADPLPRNT(,@11)                                  0691
         BALR  @14,@15                                             0691
*     R0=ADDR(MSG3PTS);             /* FORMAT PATTERN ADDRESS        */
         LA    R0,MSG3PTS                                          0692
*     CALL FORMAT;                  /* FORMAT LINE                   */
         L     @11,ABDPLPTR                                        0693
         L     @15,ADPLFRMT(,@11)                                  0693
         BALR  @14,@15                                             0693
*     RCOD3=RCOD3×R15;              /* OR IN RETURN CODE             */
         L     @14,RCOD3                                           0694
         OR    @14,R15                                             0694
         ST    @14,RCOD3                                           0694
*     CALL PRINT;                   /* PRINT LINE                    */
         L     @11,ABDPLPTR                                        0695
         L     @15,ADPLPRNT(,@11)                                  0695
         BALR  @14,@15                                             0695
*     MSGBFPTR=MSGBFPTR+LENGTH(MSGBUFFR)/NUMBUFS;/* POINT TO NEXT  0696
*                                      BUFFER                        */
         LA    @05,240                                             0696
         SLR   @04,@04                                             0696
         D     @04,NUMBUFS                                         0696
         AL    @05,MSGBFPTR                                        0696
         ST    @05,MSGBFPTR                                        0696
*   END;                                                           0697
         AH    I,@CH00042                                          0697
@DE00684 C     I,NUMBUFS                                           0697
         BNH   @DL00684                                            0697
*   BUFFER(1:1+LENGTH(TERMBUF))=TERMBUF;/* SET UP SUB-HEADER         */
         L     @14,ABDPLPTR                                        0698
         L     @11,ADPLBUF(,@14)                                   0698
         MVI   BUFFER+18(@11),C' '                                 0698
         MVC   BUFFER(18,@11),TERMBUF                              0698
*   CALL PRINT;                     /* PRINT SUB-HEADER              */
         L     @15,ADPLPRNT(,@14)                                  0699
         BALR  @14,@15                                             0699
*   MSG2DT1=ADDR(MSGBFPTR);         /* SET DATA PTRS                 */
         LA    @14,MSGBFPTR                                        0700
         ST    @14,MSG2DT1                                         0700
*   MSG2DT2=MSGBFPTR;                                              0701
         MVC   MSG2DT2(4),MSGBFPTR                                 0701
*   R0=ADDR(MSG2PTS);               /* FORMAT PATTERN ADDRESS        */
         LA    R0,MSG2PTS                                          0702
*   R1=ABDPLPTR;                    /* PARM LIST PTR                 */
         L     @14,ABDPLPTR                                        0703
         LR    R1,@14                                              0703
*   CALL FORMAT;                    /* FORMAT ONE LINE               */
         L     @15,ADPLFRMT(,@14)                                  0704
         BALR  @14,@15                                             0704
*   RCOD3=RCOD3×R15;                /* OR IN RETURN CODE             */
         L     @14,RCOD3                                           0705
         OR    @14,R15                                             0705
         ST    @14,RCOD3                                           0705
*   CALL PRINT;                     /* PRINT ONE LINE                */
         L     @11,ABDPLPTR                                        0706
         L     @15,ADPLPRNT(,@11)                                  0706
         BALR  @14,@15                                             0706
*   R0=ADDR(MSG3PTS);               /* NEXT FMT PATTERN ADDR         */
         LA    R0,MSG3PTS                                          0707
*   CALL FORMAT;                    /* FORMAT ONE LINE               */
         L     @11,ABDPLPTR                                        0708
         L     @15,ADPLFRMT(,@11)                                  0708
         BALR  @14,@15                                             0708
*   RCOD3=RCOD3×R15;                /* OR IN RETURN CODE             */
         L     @14,RCOD3                                           0709
         OR    @14,R15                                             0709
         ST    @14,RCOD3                                           0709
*   CALL PRINT;                     /* PRINT ONE LINE                */
         L     @11,ABDPLPTR                                        0710
         L     @15,ADPLPRNT(,@11)                                  0710
         BALR  @14,@15                                             0710
*   R0=ADDR(MSG3PTS);               /* FORMAT PATTERN ADDRESS        */
         LA    R0,MSG3PTS                                          0711
*   CALL FORMAT;                    /* FORMAT LAST LINE              */
         L     @11,ABDPLPTR                                        0712
         L     @15,ADPLFRMT(,@11)                                  0712
         BALR  @14,@15                                             0712
*   RCOD3=RCOD3×R15;                /* OR IN RETURN CODE             */
         L     @14,RCOD3                                           0713
         OR    @14,R15                                             0713
         ST    @14,RCOD3                                           0713
*   CALL PRINT;                     /* PRINT LAST LINE               */
         L     @11,ABDPLPTR                                        0714
         L     @15,ADPLPRNT(,@11)                                  0714
         BALR  @14,@15                                             0714
*   CALL PRINT;                     /* SPACE ONE LINE                */
         L     @11,ABDPLPTR                                        0715
         L     @15,ADPLPRNT(,@11)                                  0715
         BALR  @14,@15                                             0715
*   R15=RCOD3;                      /* SET RETURN CODE FOR CALLER    */
         L     R15,RCOD3                                           0716
*   RFY                                                            0717
*    (R0,                                                          0717
*     R1,                                                          0717
*     R15) UNRSTD;                                                 0717
*   RFY                                                            0718
*     R14 RSTD;                                                    0718
*   R14=RTNADDR3;                   /* RESTORE RETURN ADDRESS        */
         LR    R14,RTNADDR3                                        0719
*   RFY                                                            0720
*    (R14,                                                         0720
*     R15) UNRSTD;                                                 0720
*   END FMTMSGBF;                   /* RETURN TO CALLER              */
@EL00006 DS    0H                                                  0721
@EF00006 DS    0H                                                  0721
@ER00006 BR    @14                                                 0721
*                                                                  0722
*/********************************************************************/
*/*                                                                  */
*/* FMTAIA:   SEGMENT TO FORMAT A QUEUE OF AIA'S OR AIA/ACE'S        */
*/*                                                                  */
*/* INPUT:    VIRTUAL ADDRESS OF AIA OR ACE IN AIAPTR                */
*/*                                                                  */
*/* PROCESS:  IF AIAPTR POINTS TO AN ACE, CALL FMTACE.  IF AIAPTR    */
*/*            POINTS TO AIA, FORMAT PCB AND AIA AND CONTINUE        */
*/*            ALONG THE CHAIN UNTIL NEXT AIA IS 0 OR MAX IS EXCEEDED*/
*/*                                                                  */
*/* OUTPUT:   RETURN CODE = 0 IF ACCESSES AND FORMATS WERE           */
*/*            SUCCESSFUL AND RETURN CODE FROM FMTACE WAS 0.         */
*/*            OTHERWISE, RETURN CODE NOT ZERO.                      */
*/*                                                                  */
*/********************************************************************/
*                                                                  0722
*FMTAIA:                                                           0722
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0722
FMTAIA   DS    0H                                                  0723
*                                                                  0723
*   /*****************************************************************/
*   /*                                                               */
*   /* AIA1:ILRMLINE                                                 */
*   /* (FQPA,BQPA,OP,(FLG1,,BIT),(FLG2,,BIT),(FLG3,,BIT)) OF(AIA)    */
*   /* LABEL VARIABLES REFERENCED IN FORMAT PATTERNS                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0723
*   DCL                                                            0723
*     AIA1LB1 CHAR(LENGTH('FQPA')) INIT('FQPA');                   0723
*   DCL                                                            0724
*     AIA1LB2 CHAR(LENGTH('BQPA')) INIT('BQPA');                   0724
*   DCL                                                            0725
*     AIA1LB3 CHAR(LENGTH('OP')) INIT('OP');                       0725
*   DCL                                                            0726
*     AIA1LB4 CHAR(LENGTH('FLG1')) INIT('FLG1');                   0726
*   DCL                                                            0727
*     AIA1LB5 CHAR(LENGTH('FLG2')) INIT('FLG2');                   0727
*   DCL                                                            0728
*     AIA1LB6 CHAR(LENGTH('FLG3')) INIT('FLG3');                   0728
*                                                                  0728
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OF OUTPUT                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0729
*   DCL                                                            0729
*     1 AIA1PTS BDY(WORD),                                         0729
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(AIAFQPA)-1+16*LENGTH('FQPA')
*             -16),                 /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(5),                                      0729
*       3 * FIXED(8) INIT(11),                                     0729
*       3 * PTR(31) INIT(ADDR(AIA1LB1)),/* SEE PTTLBPTR              */
*       3 AIA1DT1 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(AIABQPA)-1+16*LENGTH('BQPA')
*             -16),                 /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(15+8),                                   0729
*       3 * FIXED(8) INIT(21+8),                                   0729
*       3 * PTR(31) INIT(ADDR(AIA1LB2)),/* SEE PTTLBPTR              */
*       3 AIA1DT2 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(AIAOP)-1+16*LENGTH('OP')-16)
*         ,                         /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(25+8+8),                                 0729
*       3 * FIXED(8) INIT(31+8+8),                                 0729
*       3 * PTR(31) INIT(ADDR(AIA1LB3)),/* SEE PTTLBPTR              */
*       3 AIA1DT3 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(AIAFLG1)/8-1+16*LENGTH('FLG1
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(35+8+8+8),                               0729
*       3 * FIXED(8) INIT(41+8+8+8),                               0729
*       3 * PTR(31) INIT(ADDR(AIA1LB4)),/* SEE PTTLBPTR              */
*       3 AIA1DT4 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(AIAFLG2)/8-1+16*LENGTH('FLG2
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(45+8+8+8+8),                             0729
*       3 * FIXED(8) INIT(51+8+8+8+8),                             0729
*       3 * PTR(31) INIT(ADDR(AIA1LB5)),/* SEE PTTLBPTR              */
*       3 AIA1DT5 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(AIAFLG3)/8-1+16*LENGTH('FLG3
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(55+8+8+8+8+8),                           0729
*       3 * FIXED(8) INIT(61+8+8+8+8+8),                           0729
*       3 * PTR(31) INIT(ADDR(AIA1LB6)),/* SEE PTTLBPTR              */
*       3 AIA1DT6 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * FIXED(31) INIT(0);       /* END OF FORMAT PATTERNS        */
*                                                                  0729
*   /*****************************************************************/
*   /*                                                               */
*   /* AIA2: (NXAIA,ID,GRPSZ/LGE/DPXCT) LABEL VARIABLES REFERENCED IN*/
*   /* FMT PTTRNS                                                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0730
*   DCL                                                            0730
*     AIA2LB1 CHAR(LENGTH('NXAIA')) INIT('NXAIA'),                 0730
*     * CHAR(LENGTH('ID')) INIT('ID'),                             0730
*     * CHAR(LENGTH('GRPSZ')) INIT('GRPSZ'),                       0730
*     * CHAR(LENGTH('/LGE/')) INIT('/LGE/'),                       0730
*     * CHAR(LENGTH('DPXCT')) INIT('DPXCT');                       0730
*                                                                  0730
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OF OUTPUT (HAND CODED)           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0731
*/********************************************************************/
*                                                                  0731
*   DCL                                                            0731
*     1 AIA2PTS BDY(WORD),          /* FORMAT PATTERNS - SEE PTTRNS  */
*      2 * CHAR(12) BDY(WORD),                                     0731
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),                    0731
*       3 * FIXED(8) INIT(LENGTH(AIANXAIA)-1+16*LENGTH('NXAIA')-16),
*       3 * FIXED(8) INIT(5),                                      0731
*       3 * FIXED(8) INIT(11),                                     0731
*       3 * PTR(31) INIT(ADDR(AIA2LB1)),                           0731
*       3 AIA2DT1 PTR(31) INIT(0),                                 0731
*      2 * CHAR(4) BDY(WORD),                                      0731
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0731
*       3 * FIXED(8) INIT(LENGTH(AIAID)-1+16*LENGTH('ID')-16),     0731
*       3 * FIXED(8) INIT(23),                                     0731
*       3 * FIXED(8) INIT(29),                                     0731
*      2 * CHAR(4) BDY(WORD),                                      0731
*       3 * BIT(8) BDY(BYTE) INIT('00000001'B),                    0731
*       3 * FIXED(8) INIT(16*LENGTH('GRPSZ')-16),                  0731
*       3 * FIXED(8) INIT(51),                                     0731
*       3 * FIXED(8) INIT(0),                                      0731
*      2 * CHAR(4) BDY(WORD),                                      0731
*       3 * BIT(8) BDY(BYTE) INIT('00000001'B),                    0731
*       3 * FIXED(8) INIT(16*LENGTH('/LGE/')-16),                  0731
*       3 * FIXED(8) INIT(56),                                     0731
*       3 * FIXED(8) INIT(0),                                      0731
*      2 * CHAR(4) BDY(WORD),                                      0731
*       3 * BIT(8) BDY(BYTE) INIT('00000101'B),                    0731
*       3 * FIXED(8) INIT(LENGTH(AIADPXCT)-1+16*LENGTH('DPXCT')-16),
*       3 * FIXED(8) INIT(61),                                     0731
*       3 * FIXED(8) INIT(67),                                     0731
*      2 * FIXED(31) INIT(0);                                      0731
*                                                                  0732
*/********************************************************************/
*/*  SAVE PARAMETERS PASSED AND INITIALIZE VARIABLES, THEN PROCESS   */
*/* A QUEUE OF AIA'S                                                 */
*/********************************************************************/
*                                                                  0732
*   RFY                                                            0732
*     R14 RSTD;                                                    0732
*   RTNADDR7=R14;                   /* SAVE RETURN ADDRESS           */
         ST    R14,RTNADDR7                                        0733
*   RFY                                                            0734
*     R14 UNRSTD;                                                  0734
*   MAXCTR=ZERO;                    /* INITIALIZE COUNTER            */
         SLR   @08,@08                                             0735
         ST    @08,MAXCTR                                          0735
*   RCOD4=GOOD;                     /* SET CUMULATIVE RC TO ZERO     */
         ST    @08,RCOD4                                           0736
*   RFY                                                            0737
*    (R0,                                                          0737
*     R1,                                                          0737
*     R2) RSTD;                                                    0737
*   AIAPTR=R0;                      /* GET ADDRESS OF BLOCK          */
         LR    AIAPTR,R0                                           0738
*   SAVEAIA=R0;                     /* SAVE ADDR OF FIRST BLOCK      */
         ST    R0,SAVEAIA                                          0739
*   CHAIN=R2;                       /* CODE TO TELL KIND OF CHAIN    */
         ST    R2,CHAIN                                            0740
*   RFY                                                            0741
*     R2 UNRSTD;                                                   0741
*   DO WHILE MAXCTR<MAXAIAS&        /* UNTIL MAX EXCEEDED -OR-       */
*         AIAPTR^=NULLPTR;          /* ACCESS FAILS -OR- QUEUE END IS
*                                      REACHED                       */
         B     @DE00742                                            0742
@DL00742 DS    0H                                                  0743
*     MAXCTR=MAXCTR+1;              /* INCREMENT MAX COUNTER         */
         LA    @08,1                                               0743
         AL    @08,MAXCTR                                          0743
         ST    @08,MAXCTR                                          0743
*                                                                  0744
*     /***************************************************************/
*     /*                                                             */
*     /* ACCESS OPERATION FIELD. IF CURRENT BLOCK IS AN AIA, THEN    */
*     /* CALL ROUTINE TO FORMAT PCB, AND FORMAT THE AIA              */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0744
*     R0=ADDR(AIAOP);               /* ADDR OF FIELD TO ACCESS       */
         LA    R0,AIAOP(,AIAPTR)                                   0744
*     R1=ABDPLPTR;                  /* PARM LIST ADDR                */
         L     @08,ABDPLPTR                                        0745
         LR    R1,@08                                              0745
*     CALL ACCESS;                  /* ACCESS DATA                   */
         L     @15,ADPLMEMA(,@08)                                  0746
         BALR  @14,@15                                             0746
*     OPPTR=R0;                     /* PUT DATA INTO ANOTHER AREA    */
         LR    OPPTR,R0                                            0747
*     RFY                                                          0748
*       R15 RSTD;                                                  0748
*     IF R15=GOOD THEN                                             0749
         LTR   R15,R15                                             0749
         BNZ   @RF00749                                            0749
*       DO;                                                        0750
*         IF OPBYTE=ACEIO THEN      /* THIS IS AN AIA                */
         CLI   OPBYTE(OPPTR),X'00'                                 0751
         BNE   @RF00751                                            0751
*           DO;                                                    0752
*             DO;                                                  0753
*               PCBPTR=AIAPTR-(LENGTH(PCB)-LENGTH(AIA));/* CALCULATE
*                                      ADDR OF PCB                   */
         LR    @14,AIAPTR                                          0754
         SH    @14,@CH04158                                        0754
         ST    @14,PCBPTR                                          0754
*               R0=ADDR(PCBPTR);    /* DATA FOR PRTHED               */
         LA    R0,PCBPTR                                           0755
*               R1=ADDR(AIANAM);    /* ADDR OF BLOCK LABEL           */
         LA    R1,AIANAM                                           0756
*               CALL PRTHED;        /* PRINT HEADER                  */
         BAL   @14,PRTHED                                          0757
*               BUFFER(1:4)='PCB';  /* SET UP PCB SUB-HEADER         */
         L     @14,ABDPLPTR                                        0758
         L     @08,ADPLBUF(,@14)                                   0758
         MVI   BUFFER+3(@08),C' '                                  0758
         MVC   BUFFER(3,@08),@CC03791                              0758
*               RFY                                                0759
*                 R1 RSTD;                                         0759
*               R1=ABDPLPTR;        /* PARM LIST PTR FOR PRINT       */
         LR    R1,@14                                              0760
*               CALL PRINT;         /* PRINT PCB SUB-HEADER          */
         L     @15,ADPLPRNT(,@14)                                  0761
         BALR  @14,@15                                             0761
*               CALL FMTPCB;        /* FORMAT PCB                    */
         BAL   @14,FMTPCB                                          0762
*               BUFFER(1:4)='AIA';  /* SET UP AIA SUB-HEADER         */
         L     @14,ABDPLPTR                                        0763
         L     @08,ADPLBUF(,@14)                                   0763
         MVI   BUFFER+3(@08),C' '                                  0763
         MVC   BUFFER(3,@08),@CC03793                              0763
*               CALL PRINT;         /* PRINT AIA SUB-HEADER          */
         L     @15,ADPLPRNT(,@14)                                  0764
         BALR  @14,@15                                             0764
*               DO;                 /* ILRMFRMT (AIA) LINES(AIA1)    */
*                 FORMRC=0;         /* ZERO THE RETURN CODE          */
         SLR   FORMRC,FORMRC                                       0766
*                 AIA1DT1=ADDR(AIAFQPA);                           0767
         ST    AIAPTR,AIA1DT1                                      0767
*                 AIA1DT2=ADDR(AIABQPA);                           0768
         LA    @14,AIABQPA(,AIAPTR)                                0768
         ST    @14,AIA1DT2                                         0768
*                 AIA1DT3=ADDR(AIAOP);                             0769
         LA    @14,AIAOP(,AIAPTR)                                  0769
         ST    @14,AIA1DT3                                         0769
*                 AIA1DT4=ADDR(AIAFLG1);                           0770
         LA    @14,AIAFLG1(,AIAPTR)                                0770
         ST    @14,AIA1DT4                                         0770
*                 AIA1DT5=ADDR(AIAFLG2);                           0771
         LA    @14,AIAFLG2(,AIAPTR)                                0771
         ST    @14,AIA1DT5                                         0771
*                 AIA1DT6=ADDR(AIAFLG3);                           0772
         LA    @14,AIAFLG3(,AIAPTR)                                0772
         ST    @14,AIA1DT6                                         0772
*                 RFY                                              0773
*                  (R0,                                            0773
*                   R1) RSTD;                                      0773
*                 R0=ADDR(AIA1PTS);                                0774
         LA    R0,AIA1PTS                                          0774
*                 R1=ABDPLPTR;      /* GET PARM ADDR                 */
         L     @14,ABDPLPTR                                        0775
         LR    R1,@14                                              0775
*                 CALL FORMAT;      /* FORMAT THE LINE               */
         L     @15,ADPLFRMT(,@14)                                  0776
         BALR  @14,@15                                             0776
*                 RFY                                              0777
*                   R15 RSTD;                                      0777
*                 FORMRC=FORMRC×R15;/* SAVE RETURN CODE              */
         OR    FORMRC,R15                                          0778
*                 RFY                                              0779
*                   R15 UNRSTD;                                    0779
*                 CALL PRINT;       /* CALL PRINT ROUTINE            */
         L     @08,ABDPLPTR                                        0780
         L     @15,ADPLPRNT(,@08)                                  0780
         BALR  @14,@15                                             0780
*                 RFY                                              0781
*                  (R0,                                            0781
*                   R1) UNRSTD;                                    0781
*                 RFY                                              0782
*                   R15 RSTD;                                      0782
*                 R15=FORMRC;       /* SAVE RETURN CODE FROM FORMAT  */
         LR    R15,FORMRC                                          0783
*                 RFY                                              0784
*                   R15 UNRSTD;                                    0784
*               END;                /* ILRMFRMT (AIA) LINES(AIA1)  0785
*                                      FORMAT AIA                    */
*               RFY                                                0786
*                (R0,                                              0786
*                 R1,                                              0786
*                 R15) RSTD;                                       0786
*               RCOD4=RCOD4×R15;    /* OR IN RETURN CODE             */
         L     @14,RCOD4                                           0787
         OR    @14,R15                                             0787
         ST    @14,RCOD4                                           0787
*               AIA2DT1=ADDR(AIANXAIA);                            0788
         LA    @14,AIANXAIA(,AIAPTR)                               0788
         ST    @14,AIA2DT1                                         0788
*               R0=ADDR(AIA2PTS);   /* PTR TO FORMAT PATTERN         */
         LA    R0,AIA2PTS                                          0789
*               R1=ABDPLPTR;        /* PARM LIST PTR                 */
         L     @14,ABDPLPTR                                        0790
         LR    R1,@14                                              0790
*               CALL FORMAT;        /* FMT AIA LINE 2                */
         L     @15,ADPLFRMT(,@14)                                  0791
         BALR  @14,@15                                             0791
*               RCOD4=RCOD4×R15;    /* OR IN RETURN CODE             */
         L     @14,RCOD4                                           0792
         OR    @14,R15                                             0792
         ST    @14,RCOD4                                           0792
*               CALL PRINT;         /* PRINT AIA LINE 2              */
         L     @08,ABDPLPTR                                        0793
         L     @15,ADPLPRNT(,@08)                                  0793
         BALR  @14,@15                                             0793
*               CALL PRINT;         /* PRINT BLANK LINE              */
         L     @08,ABDPLPTR                                        0794
         L     @15,ADPLPRNT(,@08)                                  0794
         BALR  @14,@15                                             0794
*               RFY                                                0795
*                (R0,                                              0795
*                 R1,                                              0795
*                 R15) UNRSTD;                                     0795
*             END;                                                 0796
*                                                                  0797
*             /*******************************************************/
*             /*                                                     */
*             /* IF THIS QUEUE IS CHAINED BY AIANXAIA ONLY, ACCESS   */
*             /* THE NEXT BLOCK FROM AIANXAIA AND RETURN TO THE TOP  */
*             /* OF THE LOOP.                                        */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0797
*             IF CHAIN=NEXT THEN    /* CHAINED VIA NXAIA             */
         CLC   CHAIN(4),@CF00042                                   0797
         BNE   @RF00797                                            0797
*               DO;                                                0798
*                 DO;               /* ILRMACCS (AIAPTR)           0799
*                                      FROM(AIANXAIA)                */
*                   RFY                                            0800
*                    (R0,                                          0800
*                     R1,                                          0800
*                     R14,                                         0800
*                     R15) RSTD;                                   0800
*                   R0=ADDR(AIANXAIA);                             0801
         LA    R0,AIANXAIA(,AIAPTR)                                0801
*                   R1=ABDPLPTR;    /* POINT TO PARM LIST            */
         L     @11,ABDPLPTR                                        0802
         LR    R1,@11                                              0802
*                   CALL ACCESS;    /* ACCESS DATA                   */
         L     @15,ADPLMEMA(,@11)                                  0803
         BALR  @14,@15                                             0803
*                   R14=R0;         /* CANNOT USE R0 AS BASE         */
         LR    R14,R0                                              0804
*                   IF R15=GOOD THEN/* CHECK ACCESS                  */
         LTR   R15,R15                                             0805
         BNZ   @RF00805                                            0805
*                     AIAPTR=CURRENT;/* GET REQUESTED FIELD          */
         L     AIAPTR,CURRENT(,R14)                                0806
*                   ELSE            /* ACCESS NO GOOD                */
*                     AIAPTR=ZERO;  /* ZERO FIELD                    */
         B     @RC00805                                            0807
@RF00805 SLR   AIAPTR,AIAPTR                                       0807
*                   RFY                                            0808
*                    (R0,                                          0808
*                     R1,                                          0808
*                     R14,                                         0808
*                     R15) UNRSTD;                                 0808
@RC00805 DS    0H                                                  0809
*                 END;                                             0809
*                 RFY                                              0810
*                   R15 RSTD;                                      0810
*                 RCOD4=RCOD4×R15;  /* OR IN RETURN CODE             */
         L     @14,RCOD4                                           0811
         OR    @14,R15                                             0811
         ST    @14,RCOD4                                           0811
*                 RFY                                              0812
*                   R15 UNRSTD;                                    0812
*               END;                                               0813
*                                                                  0814
*             /*******************************************************/
*             /*                                                     */
*             /* IF THIS QUEUE IS CHAINED BY AIANXAIA AND AIAFQPA,   */
*             /* CONTINUE PROCESSING ALONG THE FQPA CHAIN UNTIL      */
*             /* AIAFQPA = ZERO.                                     */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0814
*             ELSE                                                 0814
*               DO;                                                0814
         B     @RC00797                                            0814
@RF00797 DS    0H                                                  0815
*                 IF CHAIN=DOUBLE THEN/* CHAINED VIA NXAIA & FQPA    */
         CLC   CHAIN(4),@CF00107                                   0815
         BNE   @RF00815                                            0815
*                   DO;                                            0816
*                     DO;           /* ILRMACCS (AIAPTR)           0817
*                                      FROM(AIAFQPA)                 */
*                       RFY                                        0818
*                        (R0,                                      0818
*                         R1,                                      0818
*                         R14,                                     0818
*                         R15) RSTD;                               0818
*                       R0=ADDR(AIAFQPA);                          0819
         LR    R0,AIAPTR                                           0819
*                       R1=ABDPLPTR;/* POINT TO PARM LIST            */
         L     @11,ABDPLPTR                                        0820
         LR    R1,@11                                              0820
*                       CALL ACCESS;/* ACCESS DATA                   */
         L     @15,ADPLMEMA(,@11)                                  0821
         BALR  @14,@15                                             0821
*                       R14=R0;     /* CANNOT USE R0 AS BASE         */
         LR    R14,R0                                              0822
*                       IF R15=GOOD THEN/* CHECK ACCESS              */
         LTR   R15,R15                                             0823
         BNZ   @RF00823                                            0823
*                         AIAPTR=CURRENT;/* GET REQUESTED FIELD      */
         L     AIAPTR,CURRENT(,R14)                                0824
*                       ELSE        /* ACCESS NO GOOD                */
*                         AIAPTR=ZERO;/* ZERO FIELD                  */
         B     @RC00823                                            0825
@RF00823 SLR   AIAPTR,AIAPTR                                       0825
*                       RFY                                        0826
*                        (R0,                                      0826
*                         R1,                                      0826
*                         R14,                                     0826
*                         R15) UNRSTD;                             0826
@RC00823 DS    0H                                                  0827
*                     END;                                         0827
*                     RFY                                          0828
*                       R15 RSTD;                                  0828
*                     IF R15=ERROR THEN/* ACCESS FAILED              */
         LA    @14,4                                               0829
         CR    R15,@14                                             0829
         BNE   @RF00829                                            0829
*                       RCOD4=ERROR;/* SET ERROR INDICATION          */
         ST    @14,RCOD4                                           0830
*                     ELSE                                         0831
*                       DO;                                        0831
         B     @RC00829                                            0831
@RF00829 DS    0H                                                  0832
*                         IF AIAPTR=NULLPTR THEN/* FQPA IS NOW ZERO  */
         SLR   @14,@14                                             0832
         CR    AIAPTR,@14                                          0832
         BNE   @RF00832                                            0832
*                           DO;                                    0833
*                             IF SAVEAIA^=NULLPTR THEN/* NEXTPTR NOT
*                                      ZERO                          */
         L     @08,SAVEAIA                                         0834
         CR    @08,@14                                             0834
         BE    @RF00834                                            0834
*                               DO;                                0835
*                                 AIAPTR=SAVEAIA;/* FIRST BLOCK ON 0836
*                                      FQPA CHAIN                    */
         LR    AIAPTR,@08                                          0836
*                                 DO;/* ILRMACCS (AIAPTR)          0837
*                                      FROM(AIANXAIA)                */
*                                   RFY                            0838
*                                    (R0,                          0838
*                                     R1,                          0838
*                                     R14,                         0838
*                                     R15) RSTD;                   0838
*                                   R0=ADDR(AIANXAIA);             0839
         LA    R0,AIANXAIA(,AIAPTR)                                0839
*                                   R1=ABDPLPTR;/* POINT TO PARM LIST*/
         L     @11,ABDPLPTR                                        0840
         LR    R1,@11                                              0840
*                                   CALL ACCESS;/* ACCESS DATA       */
         L     @15,ADPLMEMA(,@11)                                  0841
         BALR  @14,@15                                             0841
*                                   R14=R0;/* CANNOT USE R0 AS BASE  */
         LR    R14,R0                                              0842
*                                   IF R15=GOOD THEN/* CHECK ACCESS  */
         LTR   R15,R15                                             0843
         BNZ   @RF00843                                            0843
*                                    AIAPTR=CURRENT;/* GET REQUESTED
*                                      FIELD                         */
         L     AIAPTR,CURRENT(,R14)                                0844
*                                   ELSE/* ACCESS NO GOOD            */
*                                    AIAPTR=ZERO;/* ZERO FIELD       */
         B     @RC00843                                            0845
@RF00843 SLR   AIAPTR,AIAPTR                                       0845
*                                   RFY                            0846
*                                    (R0,                          0846
*                                     R1,                          0846
*                                     R14,                         0846
*                                     R15) UNRSTD;                 0846
@RC00843 DS    0H                                                  0847
*                                 END;/* NEXT BLOCK ON NXAIA CHAIN   */
*                                 SAVEAIA=AIAPTR;/* SAVE AS 1ST ON 0848
*                                      FQPA CHAIN                    */
         ST    AIAPTR,SAVEAIA                                      0848
*                                 RFY                              0849
*                                   R15 RSTD;                      0849
*                                 RCOD4=RCOD4×R15;/* OR IN RETURN  0850
*                                      CODE                          */
         L     @14,RCOD4                                           0850
         OR    @14,R15                                             0850
         ST    @14,RCOD4                                           0850
*                               END;                               0851
*                             ELSE                                 0852
*                               ;   /* SAVEAIA = ZERO                */
@RF00834 DS    0H                                                  0853
*                           END;                                   0853
*                         ELSE                                     0854
*                           ;       /* AIAPTR = ZERO                 */
@RF00832 DS    0H                                                  0855
*                       END;                                       0855
*                     RFY                                          0856
*                       R15 UNRSTD;                                0856
@RC00829 DS    0H                                                  0857
*                   END;                                           0857
*                                                                  0858
*                 /***************************************************/
*                 /*                                                 */
*                 /* IF CHAINED BY AIAFQPA ONLY, GO TO SECTION OF    */
*                 /* CODE THAT ACCESSES THE NEXT BLOCK FROM AIAFQPA. */
*                 /*                                                 */
*                 /***************************************************/
*                                                                  0858
*                 ELSE                                             0858
*                   DO;             /* CHAINED VIA FQPA ONLY         */
         B     @RC00815                                            0858
@RF00815 DS    0H                                                  0859
*                     IF CHAIN=FQPA THEN                           0859
         CLC   CHAIN(4),@CF00156                                   0859
         BE    @RT00859                                            0859
*                       GOTO ACCFQPA;                              0860
*                                                                  0860
*                     /***********************************************/
*                     /*                                             */
*                     /* IF CHAINED BY NOTHING (ONLY ONE AIA)        */
*                     /*                                             */
*                     /***********************************************/
*                                                                  0861
*                     ELSE                                         0861
*                       AIAPTR=NULLPTR;/* NO MORE AIAS               */
         SLR   AIAPTR,AIAPTR                                       0861
*                   END;                                           0862
*               END;                                               0863
*           END;                                                   0864
*                                                                  0865
*/********************************************************************/
*/* WHEN THE BLOCK IS AN ACE,                                        */
*/*   1. SET THE SWITCH TO INDICATE A SINGLE BLOCK REQUEST           */
*/*   2. SET UP CORRECT HEADER ANCHOR                                */
*/*   3. PUT BLOCK ADDRESS IN ACEPTR                                 */
*/*   4. CALL SEGMENT TO FORMAT ACE.   OR IN RETURN CODE             */
*/*   5. GET THE BLOCK POINTED TO BY ACEFQPA                         */
*/*   6. INCREMENT MAXCTR                                            */
*/*   7. RETURN TO BEGINNING OF PROCESSING                           */
*/********************************************************************/
*                                                                  0865
*         ELSE                      /* THIS IS AN ACE                */
*           DO;                                                    0865
         B     @RC00751                                            0865
@RF00751 DS    0H                                                  0866
*             SINGLE=ON;            /* SET SWITCH FOR SINGLE BLK     */
         OI    SINGLE,B'10000000'                                  0866
*             ANCHNAME=ANCHAIA8;    /* SET UP HEADER                 */
         L     @08,ABDPLPTR                                        0867
         L     @08,ADPLBUF(,@08)                                   0867
         MVC   ANCHNAME(8,@08),ANCHAIA8                            0867
*             ANCHTXT=ANCH;                                        0868
         MVC   ANCHTXT(11,@08),ANCH                                0868
*             ACEPTR=AIAPTR;        /* PUT ADDR OF BLK INTO ACEPTR   */
         ST    AIAPTR,ACEPTR                                       0869
*             CALL FMTACE;          /* CALL SEGMENT TO FMT ACE       */
         BAL   @14,FMTACE                                          0870
*             RFY                                                  0871
*               R15 RSTD;                                          0871
*             RCOD4=RCOD4×R15;      /* OR IN RETURN CODE             */
         L     @14,RCOD4                                           0872
         OR    @14,R15                                             0872
         ST    @14,RCOD4                                           0872
*             RFY                                                  0873
*               R15 UNRSTD;                                        0873
*ACCFQPA:                                                          0874
*             DO;                   /* ILRMACCS (AIAPTR)           0874
*                                      FROM(AIAFQPA)                 */
ACCFQPA  DS    0H                                                  0875
*               RFY                                                0875
*                (R0,                                              0875
*                 R1,                                              0875
*                 R14,                                             0875
*                 R15) RSTD;                                       0875
*               R0=ADDR(AIAFQPA);                                  0876
         LR    R0,AIAPTR                                           0876
*               R1=ABDPLPTR;        /* POINT TO PARM LIST            */
         L     @11,ABDPLPTR                                        0877
         LR    R1,@11                                              0877
*               CALL ACCESS;        /* ACCESS DATA                   */
         L     @15,ADPLMEMA(,@11)                                  0878
         BALR  @14,@15                                             0878
*               R14=R0;             /* CANNOT USE R0 AS BASE         */
         LR    R14,R0                                              0879
*               IF R15=GOOD THEN    /* CHECK ACCESS                  */
         LTR   R15,R15                                             0880
         BNZ   @RF00880                                            0880
*                 AIAPTR=CURRENT;   /* GET REQUESTED FIELD           */
         L     AIAPTR,CURRENT(,R14)                                0881
*               ELSE                /* ACCESS NO GOOD                */
*                 AIAPTR=ZERO;      /* ZERO FIELD                    */
         B     @RC00880                                            0882
@RF00880 SLR   AIAPTR,AIAPTR                                       0882
*               RFY                                                0883
*                (R0,                                              0883
*                 R1,                                              0883
*                 R14,                                             0883
*                 R15) UNRSTD;                                     0883
@RC00880 DS    0H                                                  0884
*             END;                  /* GET PTR TO NEXT BLK           */
*             RFY                                                  0885
*               R15 RSTD;                                          0885
*             RCOD4=RCOD4×R15;      /* OR IN RETURN CODE             */
         L     @14,RCOD4                                           0886
         OR    @14,R15                                             0886
         ST    @14,RCOD4                                           0886
*             RFY                                                  0887
*               R15 UNRSTD;                                        0887
*           END;                                                   0888
*       END;                        /* END WHEN ACC GOOD FOR AIAOP   */
*     ELSE                          /* ACCESS FAILED FOR AIAOP       */
*       DO;                                                        0890
         B     @RC00749                                            0890
@RF00749 DS    0H                                                  0891
*         RCOD4=ERROR;              /* SET ERROR CONDITION           */
         MVC   RCOD4(4),@CF00168                                   0891
*         AIAPTR=NULLPTR;           /* RESET PTR TO LEAVE LOOP       */
         SLR   AIAPTR,AIAPTR                                       0892
*       END;                                                       0893
*   END;                            /* END ALL PROCESSING            */
@RC00749 DS    0H                                                  0894
@DE00742 L     @08,MAXCTR                                          0894
         C     @08,MAXAIAS                                         0894
         BNL   @DC00742                                            0894
         LTR   AIAPTR,AIAPTR                                       0894
         BNZ   @DL00742                                            0894
@DC00742 DS    0H                                                  0895
*                                                                  0895
*/********************************************************************/
*/*  THIS SECTION DETERMINES IF WE FELL OUT OF THE PROCESS LOOP      */
*/*   BECAUSE END OF QUEUE WAS REACHED, OR THE MAXIMUM NUMBER OF     */
*/*   BLOCKS PRINTED WAS REACHED.  IF THE LATTER CASE, ILRFMSG IS    */
*/*   CALLED TO PRINT 'POSSIBLE LOOP IN CHAIN'.                      */
*/********************************************************************/
*                                                                  0895
*   IF MAXCTR>=MAXAIAS THEN         /* MAX WAS EXCEEDED              */
         L     @11,MAXCTR                                          0895
         C     @11,MAXAIAS                                         0895
         BL    @RF00895                                            0895
*     DO;                                                          0896
*       RFY                                                        0897
*         R1 RSTD;                                                 0897
*       R1=LOOPMSG;                 /* ADDRESS OF MESSAGE            */
         L     R1,LOOPMSG                                          0898
*       CALL ERRMSG;                /* GO TO MESSAGE SEGMENT         */
         BAL   @14,ERRMSG                                          0899
*       RCOD4=ERROR;                /* SET RETURN CODE TO FOUR       */
         MVC   RCOD4(4),@CF00168                                   0900
*     END;                                                         0901
*   ELSE                                                           0902
*     ;                             /* ALL'S OKAY                    */
@RF00895 DS    0H                                                  0903
*   RFY                                                            0903
*    (R14,                                                         0903
*     R15) RSTD;                                                   0903
*   R15=RCOD4;                      /* SET RETURN CODE FOR CALL      */
         L     R15,RCOD4                                           0904
*   R14=RTNADDR7;                   /* RESTORE RETURN ADDRESS        */
         L     R14,RTNADDR7                                        0905
*   RFY                                                            0906
*    (R14,                                                         0906
*     R15) UNRSTD;                                                 0906
*FMTPCB:                                                           0907
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0907
         B     @PB00008                                            0907
FMTPCB   DS    0H                                                  0908
*                                                                  0908
*   /*****************************************************************/
*   /*                                                               */
*   /* PCB1:ILRMLINE (CQN,FQPA,BQPA,(FL1,,BIT),RTPA) OF(PCB) LABEL   */
*   /* VARIABLES REFERENCED IN FORMAT PATTERNS                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0908
*   DCL                                                            0908
*     PCB1LB1 CHAR(LENGTH('CQN')) INIT('CQN');                     0908
*   DCL                                                            0909
*     PCB1LB2 CHAR(LENGTH('FQPA')) INIT('FQPA');                   0909
*   DCL                                                            0910
*     PCB1LB3 CHAR(LENGTH('BQPA')) INIT('BQPA');                   0910
*   DCL                                                            0911
*     PCB1LB4 CHAR(LENGTH('FL1')) INIT('FL1');                     0911
*   DCL                                                            0912
*     PCB1LB5 CHAR(LENGTH('RTPA')) INIT('RTPA');                   0912
*                                                                  0912
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OF OUTPUT                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0913
*   DCL                                                            0913
*     1 PCB1PTS BDY(WORD),                                         0913
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PCBCQN)-1+16*LENGTH('CQN')-
*             16),                  /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(5),                                      0913
*       3 * FIXED(8) INIT(11),                                     0913
*       3 * PTR(31) INIT(ADDR(PCB1LB1)),/* SEE PTTLBPTR              */
*       3 PCB1DT1 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PCBFQPA)-1+16*LENGTH('FQPA')
*             -16),                 /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(15+8),                                   0913
*       3 * FIXED(8) INIT(21+8),                                   0913
*       3 * PTR(31) INIT(ADDR(PCB1LB2)),/* SEE PTTLBPTR              */
*       3 PCB1DT2 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PCBBQPA)-1+16*LENGTH('BQPA')
*             -16),                 /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(25+8+8),                                 0913
*       3 * FIXED(8) INIT(31+8+8),                                 0913
*       3 * PTR(31) INIT(ADDR(PCB1LB3)),/* SEE PTTLBPTR              */
*       3 PCB1DT3 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PCBFL1)/8-1+16*LENGTH('FL1')
*             -16),                 /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(35+8+8+8),                               0913
*       3 * FIXED(8) INIT(41+8+8+8),                               0913
*       3 * PTR(31) INIT(ADDR(PCB1LB4)),/* SEE PTTLBPTR              */
*       3 PCB1DT4 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PCBRTPA)-1+16*LENGTH('RTPA')
*             -16),                 /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(45+8+8+8+8),                             0913
*       3 * FIXED(8) INIT(51+8+8+8+8),                             0913
*       3 * PTR(31) INIT(ADDR(PCB1LB5)),/* SEE PTTLBPTR              */
*       3 PCB1DT5 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * FIXED(31) INIT(0);       /* END OF FORMAT PATTERNS        */
*                                                                  0914
*   /*****************************************************************/
*   /*                                                               */
*   /* PCB2:ILRMLINE (FXC,RLPA,(FL2,,BIT),XPTA,(FL3,,BIT),PGTA) LABEL*/
*   /* VARIABLES REFERENCED IN FORMAT PATTERNS                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0914
*   DCL                                                            0914
*     PCB2LB1 CHAR(LENGTH('FXC')) INIT('FXC');                     0914
*   DCL                                                            0915
*     PCB2LB2 CHAR(LENGTH('RLPA')) INIT('RLPA');                   0915
*   DCL                                                            0916
*     PCB2LB3 CHAR(LENGTH('FL2')) INIT('FL2');                     0916
*   DCL                                                            0917
*     PCB2LB4 CHAR(LENGTH('XPTA')) INIT('XPTA');                   0917
*   DCL                                                            0918
*     PCB2LB5 CHAR(LENGTH('FL3')) INIT('FL3');                     0918
*   DCL                                                            0919
*     PCB2LB6 CHAR(LENGTH('PGTA')) INIT('PGTA');                   0919
*                                                                  0919
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OF OUTPUT                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0920
*   DCL                                                            0920
*     1 PCB2PTS BDY(WORD),                                         0920
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PCBFXC)-1+16*LENGTH('FXC')-
*             16),                  /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(5),                                      0920
*       3 * FIXED(8) INIT(11),                                     0920
*       3 * PTR(31) INIT(ADDR(PCB2LB1)),/* SEE PTTLBPTR              */
*       3 PCB2DT1 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PCBRLPA)-1+16*LENGTH('RLPA')
*             -16),                 /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(15+8),                                   0920
*       3 * FIXED(8) INIT(21+8),                                   0920
*       3 * PTR(31) INIT(ADDR(PCB2LB2)),/* SEE PTTLBPTR              */
*       3 PCB2DT2 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PCBFL2)/8-1+16*LENGTH('FL2')
*             -16),                 /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(25+8+8),                                 0920
*       3 * FIXED(8) INIT(31+8+8),                                 0920
*       3 * PTR(31) INIT(ADDR(PCB2LB3)),/* SEE PTTLBPTR              */
*       3 PCB2DT3 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PCBXPTA)-1+16*LENGTH('XPTA')
*             -16),                 /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(35+8+8+8),                               0920
*       3 * FIXED(8) INIT(41+8+8+8),                               0920
*       3 * PTR(31) INIT(ADDR(PCB2LB4)),/* SEE PTTLBPTR              */
*       3 PCB2DT4 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PCBFL3)/8-1+16*LENGTH('FL3')
*             -16),                 /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(45+8+8+8+8),                             0920
*       3 * FIXED(8) INIT(51+8+8+8+8),                             0920
*       3 * PTR(31) INIT(ADDR(PCB2LB5)),/* SEE PTTLBPTR              */
*       3 PCB2DT5 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PCBPGTA)-1+16*LENGTH('PGTA')
*             -16),                 /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(55+8+8+8+8+8),                           0920
*       3 * FIXED(8) INIT(61+8+8+8+8+8),                           0920
*       3 * PTR(31) INIT(ADDR(PCB2LB6)),/* SEE PTTLBPTR              */
*       3 PCB2DT6 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * FIXED(31) INIT(0);       /* END OF FORMAT PATTERNS        */
*                                                                  0921
*   /*****************************************************************/
*   /*                                                               */
*   /* PCB3:ILRMLINE ((RBN,,BIT),(VBN,,BIT),SRB,ASCB) LABEL VARIABLES*/
*   /* REFERENCED IN FORMAT PATTERNS                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0921
*   DCL                                                            0921
*     PCB3LB1 CHAR(LENGTH('RBN')) INIT('RBN');                     0921
*   DCL                                                            0922
*     PCB3LB2 CHAR(LENGTH('VBN')) INIT('VBN');                     0922
*   DCL                                                            0923
*     PCB3LB3 CHAR(LENGTH('SRB')) INIT('SRB');                     0923
*   DCL                                                            0924
*     PCB3LB4 CHAR(LENGTH('ASCB')) INIT('ASCB');                   0924
*                                                                  0924
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OF OUTPUT                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0925
*   DCL                                                            0925
*     1 PCB3PTS BDY(WORD),                                         0925
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PCBRBN)/8-1+16*LENGTH('RBN')
*             -16),                 /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(5),                                      0925
*       3 * FIXED(8) INIT(11),                                     0925
*       3 * PTR(31) INIT(ADDR(PCB3LB1)),/* SEE PTTLBPTR              */
*       3 PCB3DT1 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PCBVBN)/8-1+16*LENGTH('VBN')
*             -16),                 /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(15+8),                                   0925
*       3 * FIXED(8) INIT(21+8),                                   0925
*       3 * PTR(31) INIT(ADDR(PCB3LB2)),/* SEE PTTLBPTR              */
*       3 PCB3DT2 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PCBSRB)-1+16*LENGTH('SRB')-
*             16),                  /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(25+8+8),                                 0925
*       3 * FIXED(8) INIT(31+8+8),                                 0925
*       3 * PTR(31) INIT(ADDR(PCB3LB3)),/* SEE PTTLBPTR              */
*       3 PCB3DT3 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(PCBASCB)-1+16*LENGTH('ASCB')
*             -16),                 /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(35+8+8+8),                               0925
*       3 * FIXED(8) INIT(41+8+8+8),                               0925
*       3 * PTR(31) INIT(ADDR(PCB3LB4)),/* SEE PTTLBPTR              */
*       3 PCB3DT4 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * FIXED(31) INIT(0);       /* END OF FORMAT PATTERNS        */
*                                                                  0926
*/********************************************************************/
*/*  SAVE RETURN ADDRESS, FORMAT 3 LINES OF PCB, OR IN RETURN CODE,  */
*/*   RESTORE RETURN ADDRESS, RETURN TO CALLER.                      */
*/********************************************************************/
*                                                                  0926
*   RFY                                                            0926
*     R14 RSTD;                                                    0926
*   RTNADDR4=R14;                   /* SAVE RETURN ADDRESS           */
         LR    RTNADDR4,R14                                        0927
*   RFY                                                            0928
*     R14 UNRSTD;                                                  0928
*   DO;                             /* ILRMFRMT (PCB)              0929
*                                      LINES(PCB1,PCB2,PCB3)         */
*     FORMRC=0;                     /* ZERO THE RETURN CODE          */
         SLR   FORMRC,FORMRC                                       0930
*     PCB1DT1=ADDR(PCBCQN);                                        0931
         L     @15,PCBPTR                                          0931
         ST    @15,PCB1DT1                                         0931
*     PCB1DT2=ADDR(PCBFQPA);                                       0932
         LA    @00,PCBFQPA(,@15)                                   0932
         ST    @00,PCB1DT2                                         0932
*     PCB1DT3=ADDR(PCBBQPA);                                       0933
         LA    @00,PCBBQPA(,@15)                                   0933
         ST    @00,PCB1DT3                                         0933
*     PCB1DT4=ADDR(PCBFL1);                                        0934
         LA    @00,PCBFL1(,@15)                                    0934
         ST    @00,PCB1DT4                                         0934
*     PCB1DT5=ADDR(PCBRTPA);                                       0935
         LA    @00,PCBRTPA(,@15)                                   0935
         ST    @00,PCB1DT5                                         0935
*     RFY                                                          0936
*      (R0,                                                        0936
*       R1) RSTD;                                                  0936
*     R0=ADDR(PCB1PTS);                                            0937
         LA    R0,PCB1PTS                                          0937
*     R1=ABDPLPTR;                  /* GET PARM ADDR                 */
         L     @15,ABDPLPTR                                        0938
         LR    R1,@15                                              0938
*     CALL FORMAT;                  /* FORMAT THE LINE               */
         L     @15,ADPLFRMT(,@15)                                  0939
         BALR  @14,@15                                             0939
*     RFY                                                          0940
*       R15 RSTD;                                                  0940
*     FORMRC=FORMRC×R15;            /* SAVE RETURN CODE              */
         OR    FORMRC,R15                                          0941
*     RFY                                                          0942
*       R15 UNRSTD;                                                0942
*     CALL PRINT;                   /* CALL PRINT ROUTINE            */
         L     @14,ABDPLPTR                                        0943
         L     @15,ADPLPRNT(,@14)                                  0943
         BALR  @14,@15                                             0943
*     RFY                                                          0944
*      (R0,                                                        0944
*       R1) UNRSTD;                                                0944
*     PCB2DT1=ADDR(PCBFXC);                                        0945
         L     @15,PCBPTR                                          0945
         LA    @14,PCBFXC(,@15)                                    0945
         ST    @14,PCB2DT1                                         0945
*     PCB2DT2=ADDR(PCBRLPA);                                       0946
         LA    @14,PCBRLPA(,@15)                                   0946
         ST    @14,PCB2DT2                                         0946
*     PCB2DT3=ADDR(PCBFL2);                                        0947
         LA    @14,PCBFL2(,@15)                                    0947
         ST    @14,PCB2DT3                                         0947
*     PCB2DT4=ADDR(PCBXPTA);                                       0948
         LA    @14,PCBXPTA(,@15)                                   0948
         ST    @14,PCB2DT4                                         0948
*     PCB2DT5=ADDR(PCBFL3);                                        0949
         LA    @14,PCBFL3(,@15)                                    0949
         ST    @14,PCB2DT5                                         0949
*     PCB2DT6=ADDR(PCBPGTA);                                       0950
         LA    @15,PCBPGTA(,@15)                                   0950
         ST    @15,PCB2DT6                                         0950
*     RFY                                                          0951
*      (R0,                                                        0951
*       R1) RSTD;                                                  0951
*     R0=ADDR(PCB2PTS);                                            0952
         LA    R0,PCB2PTS                                          0952
*     R1=ABDPLPTR;                  /* GET PARM ADDR                 */
         L     @15,ABDPLPTR                                        0953
         LR    R1,@15                                              0953
*     CALL FORMAT;                  /* FORMAT THE LINE               */
         L     @15,ADPLFRMT(,@15)                                  0954
         BALR  @14,@15                                             0954
*     RFY                                                          0955
*       R15 RSTD;                                                  0955
*     FORMRC=FORMRC×R15;            /* SAVE RETURN CODE              */
         OR    FORMRC,R15                                          0956
*     RFY                                                          0957
*       R15 UNRSTD;                                                0957
*     CALL PRINT;                   /* CALL PRINT ROUTINE            */
         L     @14,ABDPLPTR                                        0958
         L     @15,ADPLPRNT(,@14)                                  0958
         BALR  @14,@15                                             0958
*     RFY                                                          0959
*      (R0,                                                        0959
*       R1) UNRSTD;                                                0959
*     PCB3DT1=ADDR(PCBRBN);                                        0960
         L     @15,PCBPTR                                          0960
         LA    @14,PCBRBN(,@15)                                    0960
         ST    @14,PCB3DT1                                         0960
*     PCB3DT2=ADDR(PCBVBN);                                        0961
         LA    @14,PCBVBN(,@15)                                    0961
         ST    @14,PCB3DT2                                         0961
*     PCB3DT3=ADDR(PCBSRB);                                        0962
         LA    @14,PCBSRB(,@15)                                    0962
         ST    @14,PCB3DT3                                         0962
*     PCB3DT4=ADDR(PCBASCB);                                       0963
         LA    @15,PCBASCB(,@15)                                   0963
         ST    @15,PCB3DT4                                         0963
*     RFY                                                          0964
*      (R0,                                                        0964
*       R1) RSTD;                                                  0964
*     R0=ADDR(PCB3PTS);                                            0965
         LA    R0,PCB3PTS                                          0965
*     R1=ABDPLPTR;                  /* GET PARM ADDR                 */
         L     @15,ABDPLPTR                                        0966
         LR    R1,@15                                              0966
*     CALL FORMAT;                  /* FORMAT THE LINE               */
         L     @15,ADPLFRMT(,@15)                                  0967
         BALR  @14,@15                                             0967
*     RFY                                                          0968
*       R15 RSTD;                                                  0968
*     FORMRC=FORMRC×R15;            /* SAVE RETURN CODE              */
         OR    FORMRC,R15                                          0969
*     RFY                                                          0970
*       R15 UNRSTD;                                                0970
*     CALL PRINT;                   /* CALL PRINT ROUTINE            */
         L     @14,ABDPLPTR                                        0971
         L     @15,ADPLPRNT(,@14)                                  0971
         BALR  @14,@15                                             0971
*     RFY                                                          0972
*      (R0,                                                        0972
*       R1) UNRSTD;                                                0972
*     RFY                                                          0973
*       R15 RSTD;                                                  0973
*     R15=FORMRC;                   /* SAVE RETURN CODE FROM FORMAT  */
         LR    R15,FORMRC                                          0974
*     RFY                                                          0975
*       R15 UNRSTD;                                                0975
*   END;                            /* ILRMFRMT (PCB)              0976
*                                      LINES(PCB1,PCB2,PCB3)         */
*   RFY                                                            0977
*    (R14,                                                         0977
*     R15) RSTD;                                                   0977
*   RCOD4=RCOD4×R15;                /* OR IN RETURN CODE             */
         L     @02,RCOD4                                           0978
         OR    @02,R15                                             0978
         ST    @02,RCOD4                                           0978
*   R14=RTNADDR4;                   /* RESTORE RETURN ADDRESS        */
         LR    R14,RTNADDR4                                        0979
*   RFY                                                            0980
*     R14 UNRSTD;                                                  0980
*   END FMTPCB;                                                    0981
@EL00008 DS    0H                                                  0981
@EF00008 DS    0H                                                  0981
@ER00008 BR    @14                                                 0981
*   END FMTAIA;                                                    0982
@EL00007 DS    0H                                                  0982
@EF00007 DS    0H                                                  0982
@ER00007 BR    @14                                                 0982
*                                                                  0983
*/********************************************************************/
*/*                                                                  */
*/* FMTACE:  SEGMENT TO FORMAT A SINGLE ACE OR A QUEUE OF ACES       */
*/*                                                                  */
*/* INPUT:   VIRTUAL ADDRESS OF ACE IN ACEPTR                        */
*/*                                                                  */
*/* PROCESS: IF SINGLE BLOCK REQUEST, FORMAT ACE POINTED TO IN       */
*/*           ACEPTR. ELSE, FORMAT ACES UNTIL ACEFQPA(NEXT ACE) = 0  */
*/*           OR MAXIMUM IS EXCEEDED.                                */
*/*                                                                  */
*/* OUTPUT:  RETURN CODE = 0 IF ACCESSES AND FORMATS WERE SUCCESSFUL.*/
*/*           ELSE RETURN CODE NOT ZERO                              */
*/*                                                                  */
*/********************************************************************/
*                                                                  0983
*FMTACE:                                                           0983
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0983
FMTACE   DS    0H                                                  0984
*                                                                  0984
*   /*****************************************************************/
*   /*                                                               */
*   /* ACE1:ILRMLINE                                                 */
*   /* (FQPA,BQPA,OP,(FLG1,,BIT),(FLG2,,BIT),(FLG3,,BIT)) OF(ACE)    */
*   /* LABEL VARIABLES REFERENCED IN FORMAT PATTERNS                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0984
*   DCL                                                            0984
*     ACE1LB1 CHAR(LENGTH('FQPA')) INIT('FQPA');                   0984
*   DCL                                                            0985
*     ACE1LB2 CHAR(LENGTH('BQPA')) INIT('BQPA');                   0985
*   DCL                                                            0986
*     ACE1LB3 CHAR(LENGTH('OP')) INIT('OP');                       0986
*   DCL                                                            0987
*     ACE1LB4 CHAR(LENGTH('FLG1')) INIT('FLG1');                   0987
*   DCL                                                            0988
*     ACE1LB5 CHAR(LENGTH('FLG2')) INIT('FLG2');                   0988
*   DCL                                                            0989
*     ACE1LB6 CHAR(LENGTH('FLG3')) INIT('FLG3');                   0989
*                                                                  0989
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OF OUTPUT                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0990
*   DCL                                                            0990
*     1 ACE1PTS BDY(WORD),                                         0990
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(ACEFQPA)-1+16*LENGTH('FQPA')
*             -16),                 /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(5),                                      0990
*       3 * FIXED(8) INIT(11),                                     0990
*       3 * PTR(31) INIT(ADDR(ACE1LB1)),/* SEE PTTLBPTR              */
*       3 ACE1DT1 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(ACEBQPA)-1+16*LENGTH('BQPA')
*             -16),                 /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(15+8),                                   0990
*       3 * FIXED(8) INIT(21+8),                                   0990
*       3 * PTR(31) INIT(ADDR(ACE1LB2)),/* SEE PTTLBPTR              */
*       3 ACE1DT2 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(ACEOP)-1+16*LENGTH('OP')-16)
*         ,                         /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(25+8+8),                                 0990
*       3 * FIXED(8) INIT(31+8+8),                                 0990
*       3 * PTR(31) INIT(ADDR(ACE1LB3)),/* SEE PTTLBPTR              */
*       3 ACE1DT3 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(ACEFLG1)/8-1+16*LENGTH('FLG1
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(35+8+8+8),                               0990
*       3 * FIXED(8) INIT(41+8+8+8),                               0990
*       3 * PTR(31) INIT(ADDR(ACE1LB4)),/* SEE PTTLBPTR              */
*       3 ACE1DT4 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(ACEFLG2)/8-1+16*LENGTH('FLG2
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(45+8+8+8+8),                             0990
*       3 * FIXED(8) INIT(51+8+8+8+8),                             0990
*       3 * PTR(31) INIT(ADDR(ACE1LB5)),/* SEE PTTLBPTR              */
*       3 ACE1DT5 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(ACEFLG3)/8-1+16*LENGTH('FLG3
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(55+8+8+8+8+8),                           0990
*       3 * FIXED(8) INIT(61+8+8+8+8+8),                           0990
*       3 * PTR(31) INIT(ADDR(ACE1LB6)),/* SEE PTTLBPTR              */
*       3 ACE1DT6 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * FIXED(31) INIT(0);       /* END OF FORMAT PATTERNS        */
*                                                                  0991
*   /*****************************************************************/
*   /*                                                               */
*   /* ACE2:ILRMLINE (LGE,LGID,RPN,SYM,ECB) LABEL VARIABLES          */
*   /* REFERENCED IN FORMAT PATTERNS                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0991
*   DCL                                                            0991
*     ACE2LB1 CHAR(LENGTH('LGE')) INIT('LGE');                     0991
*   DCL                                                            0992
*     ACE2LB2 CHAR(LENGTH('LGID')) INIT('LGID');                   0992
*   DCL                                                            0993
*     ACE2LB3 CHAR(LENGTH('RPN')) INIT('RPN');                     0993
*   DCL                                                            0994
*     ACE2LB4 CHAR(LENGTH('SYM')) INIT('SYM');                     0994
*   DCL                                                            0995
*     ACE2LB5 CHAR(LENGTH('ECB')) INIT('ECB');                     0995
*                                                                  0995
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OF OUTPUT                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0996
*   DCL                                                            0996
*     1 ACE2PTS BDY(WORD),                                         0996
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(ACELGE)-1+16*LENGTH('LGE')-
*             16),                  /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(5),                                      0996
*       3 * FIXED(8) INIT(11),                                     0996
*       3 * PTR(31) INIT(ADDR(ACE2LB1)),/* SEE PTTLBPTR              */
*       3 ACE2DT1 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(ACELGID)-1+16*LENGTH('LGID')
*             -16),                 /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(15+8),                                   0996
*       3 * FIXED(8) INIT(21+8),                                   0996
*       3 * PTR(31) INIT(ADDR(ACE2LB2)),/* SEE PTTLBPTR              */
*       3 ACE2DT2 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(ACERPN)-1+16*LENGTH('RPN')-
*             16),                  /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(25+8+8),                                 0996
*       3 * FIXED(8) INIT(31+8+8),                                 0996
*       3 * PTR(31) INIT(ADDR(ACE2LB3)),/* SEE PTTLBPTR              */
*       3 ACE2DT3 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(ACESYM)-1+16*LENGTH('SYM')-
*             16),                  /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(35+8+8+8),                               0996
*       3 * FIXED(8) INIT(41+8+8+8),                               0996
*       3 * PTR(31) INIT(ADDR(ACE2LB4)),/* SEE PTTLBPTR              */
*       3 ACE2DT4 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(ACEECB)-1+16*LENGTH('ECB')-
*             16),                  /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(45+8+8+8+8),                             0996
*       3 * FIXED(8) INIT(51+8+8+8+8),                             0996
*       3 * PTR(31) INIT(ADDR(ACE2LB5)),/* SEE PTTLBPTR              */
*       3 ACE2DT5 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * FIXED(31) INIT(0);       /* END OF FORMAT PATTERNS        */
*                                                                  0997
*   /*****************************************************************/
*   /*                                                               */
*   /* ACE3:ILRMLINE (SRBWK) LABEL VARIABLES REFERENCED IN FORMAT    */
*   /* PATTERNS                                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0997
*   DCL                                                            0997
*     ACE3LB1 CHAR(LENGTH('SRBWK')) INIT('SRBWK');                 0997
*                                                                  0997
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OF OUTPUT                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0998
*   DCL                                                            0998
*     1 ACE3PTS BDY(WORD),                                         0998
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(ACESRBWK)-1+16*LENGTH('SRBWK
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(5),                                      0998
*       3 * FIXED(8) INIT(11),                                     0998
*       3 * PTR(31) INIT(ADDR(ACE3LB1)),/* SEE PTTLBPTR              */
*       3 ACE3DT1 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * FIXED(31) INIT(0);       /* END OF FORMAT PATTERNS        */
*                                                                  0999
*/********************************************************************/
*/*  BEGINNING OF PROCESSING FOR FMTACE                              */
*/********************************************************************/
*                                                                  0999
*   RFY                                                            0999
*     R14 RSTD;                                                    0999
*   RTNADDR5=R14;                   /* SAVE RETURN ADDRESS           */
         ST    R14,RTNADDR5                                        1000
*   RFY                                                            1001
*     R14 UNRSTD;                                                  1001
*   RCOD5=GOOD;                     /* INITIALIZE VARIABLES          */
         SLR   @14,@14                                             1002
         ST    @14,RCOD5                                           1002
*   MAXCNT=ZERO;                                                   1003
         ST    @14,MAXCNT                                          1003
*   DO WHILE ACEPTR^=NULLPTR&       /* UNTIL ACCESS FAILS -OR- UNTIL
*                                      NEXT ACE = 0 -OR-             */
*         MAXCNT<MAXACES;           /* UNTIL MAXIMUM EXCEEDED        */
         B     @DE01004                                            1004
@DL01004 DS    0H                                                  1005
*     MAXCNT=MAXCNT+1;              /* INCREMENT MAX COUNTER         */
         LA    @14,1                                               1005
         AL    @14,MAXCNT                                          1005
         ST    @14,MAXCNT                                          1005
*     RFY                                                          1006
*      (R0,                                                        1006
*       R1) RSTD;                                                  1006
*     R0=ADDR(ACEPTR);              /* DATA FOR HEADER               */
         LA    R0,ACEPTR                                           1007
*     R1=ADDR(ACENAM);              /* LABEL FOR HEADER              */
         LA    R1,ACENAM                                           1008
*     RFY                                                          1009
*      (R0,                                                        1009
*       R1) UNRSTD;                                                1009
*     CALL PRTHED;                  /* PRINT ACE HEADER              */
         BAL   @14,PRTHED                                          1010
*     RFY                                                          1011
*      (R0,                                                        1011
*       R1,                                                        1011
*       R15) RSTD;                                                 1011
*     R0=ADDR(ACEOP);               /* ADDR OF FIELD TO ACCESS       */
         L     @14,ACEPTR                                          1012
         LA    R0,ACEOP(,@14)                                      1012
*     R1=ABDPLPTR;                  /* PARM LIST PTR                 */
         L     @14,ABDPLPTR                                        1013
         LR    R1,@14                                              1013
*     CALL ACCESS;                  /* ACCESS DATA                   */
         L     @15,ADPLMEMA(,@14)                                  1014
         BALR  @14,@15                                             1014
*     OPPTR=R0;                     /* PUT DATA INTO ANOTHER AREA    */
         LR    OPPTR,R0                                            1015
*     RFY                                                          1016
*      (R0,                                                        1016
*       R1) UNRSTD;                                                1016
*     IF R15^=ERROR THEN            /* ACCESS WAS GOOD               */
         CH    R15,@CH00168                                        1017
         BE    @RF01017                                            1017
*       DO;                                                        1018
*         DO;                                                      1019
*           IF OPBYTE=ACEOP THEN    /* IF THIS IS A REGULAR ACE (NOT
*                                      FOR TRANSFER PAGE OPERATION),
*                                      FORMAT REGULAR LINES          */
         L     @14,ACEPTR                                          1020
         CLC   OPBYTE(1,OPPTR),ACEOP(@14)                          1020
         BNE   @RF01020                                            1020
*             DO;                   /* ILRMFRMT (ACE)              1021
*                                      LINES(ACE1,ACE2,ACE3)SPACE    */
*               FORMRC=0;           /* ZERO THE RETURN CODE          */
         SLR   FORMRC,FORMRC                                       1022
*               ACE1DT1=ADDR(ACEFQPA);                             1023
         ST    @14,ACE1DT1                                         1023
*               ACE1DT2=ADDR(ACEBQPA);                             1024
         LA    @08,ACEBQPA(,@14)                                   1024
         ST    @08,ACE1DT2                                         1024
*               ACE1DT3=ADDR(ACEOP);                               1025
         LA    @08,ACEOP(,@14)                                     1025
         ST    @08,ACE1DT3                                         1025
*               ACE1DT4=ADDR(ACEFLG1);                             1026
         LA    @08,ACEFLG1(,@14)                                   1026
         ST    @08,ACE1DT4                                         1026
*               ACE1DT5=ADDR(ACEFLG2);                             1027
         LA    @08,ACEFLG2(,@14)                                   1027
         ST    @08,ACE1DT5                                         1027
*               ACE1DT6=ADDR(ACEFLG3);                             1028
         LA    @14,ACEFLG3(,@14)                                   1028
         ST    @14,ACE1DT6                                         1028
*               RFY                                                1029
*                (R0,                                              1029
*                 R1) RSTD;                                        1029
*               R0=ADDR(ACE1PTS);                                  1030
         LA    R0,ACE1PTS                                          1030
*               R1=ABDPLPTR;        /* GET PARM ADDR                 */
         L     @14,ABDPLPTR                                        1031
         LR    R1,@14                                              1031
*               CALL FORMAT;        /* FORMAT THE LINE               */
         L     @15,ADPLFRMT(,@14)                                  1032
         BALR  @14,@15                                             1032
*               RFY                                                1033
*                 R15 RSTD;                                        1033
*               FORMRC=FORMRC×R15;  /* SAVE RETURN CODE              */
         OR    FORMRC,R15                                          1034
*               RFY                                                1035
*                 R15 UNRSTD;                                      1035
*               CALL PRINT;         /* CALL PRINT ROUTINE            */
         L     @08,ABDPLPTR                                        1036
         L     @15,ADPLPRNT(,@08)                                  1036
         BALR  @14,@15                                             1036
*               RFY                                                1037
*                (R0,                                              1037
*                 R1) UNRSTD;                                      1037
*               ACE2DT1=ADDR(ACELGE);                              1038
         L     @08,ACEPTR                                          1038
         LA    @15,ACELGE(,@08)                                    1038
         ST    @15,ACE2DT1                                         1038
*               ACE2DT2=ADDR(ACELGID);                             1039
         LA    @15,ACELGID(,@08)                                   1039
         ST    @15,ACE2DT2                                         1039
*               ACE2DT3=ADDR(ACERPN);                              1040
         LA    @15,ACERPN(,@08)                                    1040
         ST    @15,ACE2DT3                                         1040
*               ACE2DT4=ADDR(ACESYM);                              1041
         LA    @15,ACESYM(,@08)                                    1041
         ST    @15,ACE2DT4                                         1041
*               ACE2DT5=ADDR(ACEECB);                              1042
         LA    @08,ACEECB(,@08)                                    1042
         ST    @08,ACE2DT5                                         1042
*               RFY                                                1043
*                (R0,                                              1043
*                 R1) RSTD;                                        1043
*               R0=ADDR(ACE2PTS);                                  1044
         LA    R0,ACE2PTS                                          1044
*               R1=ABDPLPTR;        /* GET PARM ADDR                 */
         L     @08,ABDPLPTR                                        1045
         LR    R1,@08                                              1045
*               CALL FORMAT;        /* FORMAT THE LINE               */
         L     @15,ADPLFRMT(,@08)                                  1046
         BALR  @14,@15                                             1046
*               RFY                                                1047
*                 R15 RSTD;                                        1047
*               FORMRC=FORMRC×R15;  /* SAVE RETURN CODE              */
         OR    FORMRC,R15                                          1048
*               RFY                                                1049
*                 R15 UNRSTD;                                      1049
*               CALL PRINT;         /* CALL PRINT ROUTINE            */
         L     @08,ABDPLPTR                                        1050
         L     @15,ADPLPRNT(,@08)                                  1050
         BALR  @14,@15                                             1050
*               RFY                                                1051
*                (R0,                                              1051
*                 R1) UNRSTD;                                      1051
*               ACE3DT1=ADDR(ACESRBWK);                            1052
         L     @08,ACEPTR                                          1052
         LA    @08,ACESRBWK(,@08)                                  1052
         ST    @08,ACE3DT1                                         1052
*               RFY                                                1053
*                (R0,                                              1053
*                 R1) RSTD;                                        1053
*               R0=ADDR(ACE3PTS);                                  1054
         LA    R0,ACE3PTS                                          1054
*               R1=ABDPLPTR;        /* GET PARM ADDR                 */
         L     @08,ABDPLPTR                                        1055
         LR    R1,@08                                              1055
*               CALL FORMAT;        /* FORMAT THE LINE               */
         L     @15,ADPLFRMT(,@08)                                  1056
         BALR  @14,@15                                             1056
*               RFY                                                1057
*                 R15 RSTD;                                        1057
*               FORMRC=FORMRC×R15;  /* SAVE RETURN CODE              */
         OR    FORMRC,R15                                          1058
*               RFY                                                1059
*                 R15 UNRSTD;                                      1059
*               CALL PRINT;         /* CALL PRINT ROUTINE            */
         L     @08,ABDPLPTR                                        1060
         L     @15,ADPLPRNT(,@08)                                  1060
         BALR  @14,@15                                             1060
*               RFY                                                1061
*                (R0,                                              1061
*                 R1) UNRSTD;                                      1061
*               RFY                                                1062
*                 R1 RSTD;                                         1062
*               R1=ABDPLPTR;        /* GET PARM ADDR                 */
         L     @08,ABDPLPTR                                        1063
         LR    R1,@08                                              1063
*               CALL PRINT;         /* CALL PRINT ROUTINE            */
         L     @15,ADPLPRNT(,@08)                                  1064
         BALR  @14,@15                                             1064
*               RFY                                                1065
*                 R1 UNRSTD;                                       1065
*               RFY                                                1066
*                 R15 RSTD;                                        1066
*               R15=FORMRC;         /* SAVE RETURN CODE FROM FORMAT  */
         LR    R15,FORMRC                                          1067
*               RFY                                                1068
*                 R15 UNRSTD;                                      1068
*             END;                  /* ILRMFRMT (ACE)              1069
*                                      LINES(ACE1,ACE2,ACE3)SPACE    */
*           ELSE                    /* FORMAT LINES FOR THE TRANSFER
*                                      PAGE ACE                      */
*             CALL XPGACE;          /* RTN TO FMT LINES FOR TRPAG    */
         B     @RC01020                                            1070
@RF01020 BAL   @14,XPGACE                                          1070
*           RFY                                                    1071
*             R15 RSTD;                                            1071
@RC01020 DS    0H                                                  1072
*           RCOD5=RCOD5×R15;        /* OR IN RETURN CODE             */
         L     @14,RCOD5                                           1072
         OR    @14,R15                                             1072
         ST    @14,RCOD5                                           1072
*           IF SINGLE=OFF THEN      /* THIS IS NOT A SINGLE BLOCK  1073
*                                      REQUEST                       */
         TM    SINGLE,B'10000000'                                  1073
         BNZ   @RF01073                                            1073
*             DO;                                                  1074
*               DO;                 /* ILRMACCS (ACEPTR)           1075
*                                      FROM(ACEFQPA)                 */
*                 RFY                                              1076
*                  (R0,                                            1076
*                   R1,                                            1076
*                   R14,                                           1076
*                   R15) RSTD;                                     1076
*                 R0=ADDR(ACEFQPA);                                1077
         L     R0,ACEPTR                                           1077
*                 R1=ABDPLPTR;      /* POINT TO PARM LIST            */
         L     @08,ABDPLPTR                                        1078
         LR    R1,@08                                              1078
*                 CALL ACCESS;      /* ACCESS DATA                   */
         L     @15,ADPLMEMA(,@08)                                  1079
         BALR  @14,@15                                             1079
*                 R14=R0;           /* CANNOT USE R0 AS BASE         */
         LR    R14,R0                                              1080
*                 IF R15=GOOD THEN  /* CHECK ACCESS                  */
         LTR   R15,R15                                             1081
         BNZ   @RF01081                                            1081
*                   ACEPTR=CURRENT; /* GET REQUESTED FIELD           */
         MVC   ACEPTR(4),CURRENT(R14)                              1082
*                 ELSE              /* ACCESS NO GOOD                */
*                   ACEPTR=ZERO;    /* ZERO FIELD                    */
         B     @RC01081                                            1083
@RF01081 SLR   @08,@08                                             1083
         ST    @08,ACEPTR                                          1083
*                 RFY                                              1084
*                  (R0,                                            1084
*                   R1,                                            1084
*                   R14,                                           1084
*                   R15) UNRSTD;                                   1084
@RC01081 DS    0H                                                  1085
*               END;                /* GET NEXT PTR                  */
*               RFY                                                1086
*                 R15 RSTD;                                        1086
*               RCOD5=RCOD5×R15;    /* OR IN RETURN CODE             */
         L     @14,RCOD5                                           1087
         OR    @14,R15                                             1087
         ST    @14,RCOD5                                           1087
*             END;                                                 1088
*           ELSE                    /* SINGLE BLOCK REQUEST          */
*             DO;                                                  1089
         B     @RC01073                                            1089
@RF01073 DS    0H                                                  1090
*               SINGLE=OFF;         /* RESET SWITCH                  */
         NI    SINGLE,B'01111111'                                  1090
*               ACEPTR=NULLPTR;     /* RESET PTR TO LEAVE LOOP FOR 1091
*                                      SINGLE BLOCK REQUEST          */
         SLR   @14,@14                                             1091
         ST    @14,ACEPTR                                          1091
*             END;                                                 1092
*         END;                      /* END OF ACE Q PROCESSING       */
@RC01073 DS    0H                                                  1094
*       END;                                                       1094
*     ELSE                                                         1095
*       RCOD5=ERROR;                /* ACCESS FAILED                 */
         B     @RC01017                                            1095
@RF01017 MVC   RCOD5(4),@CF00168                                   1095
*     RFY                                                          1096
*       R15 UNRSTD;                                                1096
@RC01017 DS    0H                                                  1097
*   END;                            /* END ALL PROCESSING            */
@DE01004 ICM   @14,15,ACEPTR                                       1097
         BZ    @DC01004                                            1097
         L     @14,MAXCNT                                          1097
         C     @14,MAXACES                                         1097
         BL    @DL01004                                            1097
@DC01004 DS    0H                                                  1098
*   IF MAXCNT>=MAXACES THEN         /* MAX WAS EXCEEDED              */
         L     @08,MAXCNT                                          1098
         C     @08,MAXACES                                         1098
         BL    @RF01098                                            1098
*     DO;                                                          1099
*       RFY                                                        1100
*         R1 RSTD;                                                 1100
*       R1=LOOPMSG;                 /* GET CODE OF MESSAGE           */
         L     R1,LOOPMSG                                          1101
*       CALL ERRMSG;                /* GO TO MESSAGE SEGMENT         */
         BAL   @14,ERRMSG                                          1102
*       RCOD5=RCOD5×ERROR;          /* OR 4 TO RETURN CODE           */
         L     @08,RCOD5                                           1103
         O     @08,@CF00168                                        1103
         ST    @08,RCOD5                                           1103
*       RFY                                                        1104
*         R1 UNRSTD;                                               1104
*     END;                                                         1105
*   ELSE                                                           1106
*     ;                             /* ALL WAS FINE                  */
@RF01098 DS    0H                                                  1107
*   RFY                                                            1107
*    (R14,                                                         1107
*     R15) RSTD;                                                   1107
*   R15=RCOD5;                      /* PASS RETURN CODE TO CALLER    */
         L     R15,RCOD5                                           1108
*   R14=RTNADDR5;                   /* RESTORE RETURN ADDRESS        */
         L     R14,RTNADDR5                                        1109
*   RFY                                                            1110
*    (R14,                                                         1110
*     R15) UNRSTD;                                                 1110
*XPGACE:                                                           1111
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1111
         B     @PB00010                                            1111
XPGACE   DS    0H                                                  1112
*                                                                  1112
*   /*****************************************************************/
*   /*                                                               */
*   /* ACE4:ILRMLINE                                                 */
*   /* (FQPA,BQPA,OP,(FLG1,,BIT),(FLG2,,BIT),(FLG3,,BIT)) OF(ACE)    */
*   /* LABEL VARIABLES REFERENCED IN FORMAT PATTERNS                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1112
*   DCL                                                            1112
*     ACE4LB1 CHAR(LENGTH('FQPA')) INIT('FQPA');                   1112
*   DCL                                                            1113
*     ACE4LB2 CHAR(LENGTH('BQPA')) INIT('BQPA');                   1113
*   DCL                                                            1114
*     ACE4LB3 CHAR(LENGTH('OP')) INIT('OP');                       1114
*   DCL                                                            1115
*     ACE4LB4 CHAR(LENGTH('FLG1')) INIT('FLG1');                   1115
*   DCL                                                            1116
*     ACE4LB5 CHAR(LENGTH('FLG2')) INIT('FLG2');                   1116
*   DCL                                                            1117
*     ACE4LB6 CHAR(LENGTH('FLG3')) INIT('FLG3');                   1117
*                                                                  1117
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OF OUTPUT                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1118
*   DCL                                                            1118
*     1 ACE4PTS BDY(WORD),                                         1118
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(ACEFQPA)-1+16*LENGTH('FQPA')
*             -16),                 /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(5),                                      1118
*       3 * FIXED(8) INIT(11),                                     1118
*       3 * PTR(31) INIT(ADDR(ACE4LB1)),/* SEE PTTLBPTR              */
*       3 ACE4DT1 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(ACEBQPA)-1+16*LENGTH('BQPA')
*             -16),                 /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(15+8),                                   1118
*       3 * FIXED(8) INIT(21+8),                                   1118
*       3 * PTR(31) INIT(ADDR(ACE4LB2)),/* SEE PTTLBPTR              */
*       3 ACE4DT2 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(ACEOP)-1+16*LENGTH('OP')-16)
*         ,                         /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(25+8+8),                                 1118
*       3 * FIXED(8) INIT(31+8+8),                                 1118
*       3 * PTR(31) INIT(ADDR(ACE4LB3)),/* SEE PTTLBPTR              */
*       3 ACE4DT3 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(ACEFLG1)/8-1+16*LENGTH('FLG1
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(35+8+8+8),                               1118
*       3 * FIXED(8) INIT(41+8+8+8),                               1118
*       3 * PTR(31) INIT(ADDR(ACE4LB4)),/* SEE PTTLBPTR              */
*       3 ACE4DT4 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(ACEFLG2)/8-1+16*LENGTH('FLG2
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(45+8+8+8+8),                             1118
*       3 * FIXED(8) INIT(51+8+8+8+8),                             1118
*       3 * PTR(31) INIT(ADDR(ACE4LB5)),/* SEE PTTLBPTR              */
*       3 ACE4DT5 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(ACEFLG3)/8-1+16*LENGTH('FLG3
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(55+8+8+8+8+8),                           1118
*       3 * FIXED(8) INIT(61+8+8+8+8+8),                           1118
*       3 * PTR(31) INIT(ADDR(ACE4LB6)),/* SEE PTTLBPTR              */
*       3 ACE4DT6 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * FIXED(31) INIT(0);       /* END OF FORMAT PATTERNS        */
*                                                                  1119
*   /*****************************************************************/
*   /*                                                               */
*   /* ACE5:ILRMLINE (LGE,LGID,SRCID,AIAPT,ECB) LABEL VARIABLES      */
*   /* REFERENCED IN FORMAT PATTERNS                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1119
*   DCL                                                            1119
*     ACE5LB1 CHAR(LENGTH('LGE')) INIT('LGE');                     1119
*   DCL                                                            1120
*     ACE5LB2 CHAR(LENGTH('LGID')) INIT('LGID');                   1120
*   DCL                                                            1121
*     ACE5LB3 CHAR(LENGTH('SRCID')) INIT('SRCID');                 1121
*   DCL                                                            1122
*     ACE5LB4 CHAR(LENGTH('AIAPT')) INIT('AIAPT');                 1122
*   DCL                                                            1123
*     ACE5LB5 CHAR(LENGTH('ECB')) INIT('ECB');                     1123
*                                                                  1123
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OF OUTPUT                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1124
*   DCL                                                            1124
*     1 ACE5PTS BDY(WORD),                                         1124
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(ACELGE)-1+16*LENGTH('LGE')-
*             16),                  /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(5),                                      1124
*       3 * FIXED(8) INIT(11),                                     1124
*       3 * PTR(31) INIT(ADDR(ACE5LB1)),/* SEE PTTLBPTR              */
*       3 ACE5DT1 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(ACELGID)-1+16*LENGTH('LGID')
*             -16),                 /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(15+8),                                   1124
*       3 * FIXED(8) INIT(21+8),                                   1124
*       3 * PTR(31) INIT(ADDR(ACE5LB2)),/* SEE PTTLBPTR              */
*       3 ACE5DT2 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(ACESRCID)-1+16*LENGTH('SRCID
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(25+8+8),                                 1124
*       3 * FIXED(8) INIT(31+8+8),                                 1124
*       3 * PTR(31) INIT(ADDR(ACE5LB3)),/* SEE PTTLBPTR              */
*       3 ACE5DT3 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(ACEAIAPT)-1+16*LENGTH('AIAPT
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(35+8+8+8),                               1124
*       3 * FIXED(8) INIT(41+8+8+8),                               1124
*       3 * PTR(31) INIT(ADDR(ACE5LB4)),/* SEE PTTLBPTR              */
*       3 ACE5DT4 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(ACEECB)-1+16*LENGTH('ECB')-
*             16),                  /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(45+8+8+8+8),                             1124
*       3 * FIXED(8) INIT(51+8+8+8+8),                             1124
*       3 * PTR(31) INIT(ADDR(ACE5LB5)),/* SEE PTTLBPTR              */
*       3 ACE5DT5 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * FIXED(31) INIT(0);       /* END OF FORMAT PATTERNS        */
*                                                                  1125
*   /*****************************************************************/
*   /*                                                               */
*   /* ACE6:ILRMLINE (SRBWK) LABEL VARIABLES REFERENCED IN FORMAT    */
*   /* PATTERNS                                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1125
*   DCL                                                            1125
*     ACE6LB1 CHAR(LENGTH('SRBWK')) INIT('SRBWK');                 1125
*                                                                  1125
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT PATTERNS FOR ONE LINE OF OUTPUT                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1126
*   DCL                                                            1126
*     1 ACE6PTS BDY(WORD),                                         1126
*      2 * CHAR(12) BDY(WORD),      /* FORMAT PATTERN SEE PTTRNS     */
*       3 * BIT(8) BDY(BYTE) INIT('00001111'B),/* SEE PTTFLGS        */
*       3 * FIXED(8) BDY(BYTE) INIT(LENGTH(ACESRBWK)-1+16*LENGTH('SRBWK
*             )-16),                /* SEE PTTLBLGH AND PTTDTLGH     */
*       3 * FIXED(8) INIT(5),                                      1126
*       3 * FIXED(8) INIT(11),                                     1126
*       3 * PTR(31) INIT(ADDR(ACE6LB1)),/* SEE PTTLBPTR              */
*       3 ACE6DT1 PTR(31) INIT(0),  /* SEE PTTDTPTR                  */
*      2 * FIXED(31) INIT(0);       /* END OF FORMAT PATTERNS        */
*                                                                  1127
*/********************************************************************/
*/*  SAVE RETURN ADDRESS, FORMAT LINES FOR TRANSFER PAGE ACE,        */
*/*   OR IN RETURN CODE FROM FORMAT, RESTORE RETURN ADDRESS, RETURN. */
*/********************************************************************/
*                                                                  1127
*   RFY                                                            1127
*     R14 RSTD;                                                    1127
*   RTNADDR6=R14;                   /* SAVE RETURN ADDRESS           */
         LR    RTNADDR6,R14                                        1128
*   RFY                                                            1129
*     R14 UNRSTD;                                                  1129
*   DO;                             /* ILRMFRMT (ACE)              1130
*                                      LINES(ACE4,ACE5,ACE6)SPACE    */
*     FORMRC=0;                     /* ZERO THE RETURN CODE          */
         SLR   FORMRC,FORMRC                                       1131
*     ACE4DT1=ADDR(ACEFQPA);                                       1132
         L     @15,ACEPTR                                          1132
         ST    @15,ACE4DT1                                         1132
*     ACE4DT2=ADDR(ACEBQPA);                                       1133
         LA    @14,ACEBQPA(,@15)                                   1133
         ST    @14,ACE4DT2                                         1133
*     ACE4DT3=ADDR(ACEOP);                                         1134
         LA    @14,ACEOP(,@15)                                     1134
         ST    @14,ACE4DT3                                         1134
*     ACE4DT4=ADDR(ACEFLG1);                                       1135
         LA    @14,ACEFLG1(,@15)                                   1135
         ST    @14,ACE4DT4                                         1135
*     ACE4DT5=ADDR(ACEFLG2);                                       1136
         LA    @14,ACEFLG2(,@15)                                   1136
         ST    @14,ACE4DT5                                         1136
*     ACE4DT6=ADDR(ACEFLG3);                                       1137
         LA    @15,ACEFLG3(,@15)                                   1137
         ST    @15,ACE4DT6                                         1137
*     RFY                                                          1138
*      (R0,                                                        1138
*       R1) RSTD;                                                  1138
*     R0=ADDR(ACE4PTS);                                            1139
         LA    R0,ACE4PTS                                          1139
*     R1=ABDPLPTR;                  /* GET PARM ADDR                 */
         L     @15,ABDPLPTR                                        1140
         LR    R1,@15                                              1140
*     CALL FORMAT;                  /* FORMAT THE LINE               */
         L     @15,ADPLFRMT(,@15)                                  1141
         BALR  @14,@15                                             1141
*     RFY                                                          1142
*       R15 RSTD;                                                  1142
*     FORMRC=FORMRC×R15;            /* SAVE RETURN CODE              */
         OR    FORMRC,R15                                          1143
*     RFY                                                          1144
*       R15 UNRSTD;                                                1144
*     CALL PRINT;                   /* CALL PRINT ROUTINE            */
         L     @14,ABDPLPTR                                        1145
         L     @15,ADPLPRNT(,@14)                                  1145
         BALR  @14,@15                                             1145
*     RFY                                                          1146
*      (R0,                                                        1146
*       R1) UNRSTD;                                                1146
*     ACE5DT1=ADDR(ACELGE);                                        1147
         L     @15,ACEPTR                                          1147
         LA    @14,ACELGE(,@15)                                    1147
         ST    @14,ACE5DT1                                         1147
*     ACE5DT2=ADDR(ACELGID);                                       1148
         LA    @14,ACELGID(,@15)                                   1148
         ST    @14,ACE5DT2                                         1148
*     ACE5DT3=ADDR(ACESRCID);                                      1149
         LA    @14,ACESRCID(,@15)                                  1149
         ST    @14,ACE5DT3                                         1149
*     ACE5DT4=ADDR(ACEAIAPT);                                      1150
         LA    @14,ACEAIAPT(,@15)                                  1150
         ST    @14,ACE5DT4                                         1150
*     ACE5DT5=ADDR(ACEECB);                                        1151
         LA    @15,ACEECB(,@15)                                    1151
         ST    @15,ACE5DT5                                         1151
*     RFY                                                          1152
*      (R0,                                                        1152
*       R1) RSTD;                                                  1152
*     R0=ADDR(ACE5PTS);                                            1153
         LA    R0,ACE5PTS                                          1153
*     R1=ABDPLPTR;                  /* GET PARM ADDR                 */
         L     @15,ABDPLPTR                                        1154
         LR    R1,@15                                              1154
*     CALL FORMAT;                  /* FORMAT THE LINE               */
         L     @15,ADPLFRMT(,@15)                                  1155
         BALR  @14,@15                                             1155
*     RFY                                                          1156
*       R15 RSTD;                                                  1156
*     FORMRC=FORMRC×R15;            /* SAVE RETURN CODE              */
         OR    FORMRC,R15                                          1157
*     RFY                                                          1158
*       R15 UNRSTD;                                                1158
*     CALL PRINT;                   /* CALL PRINT ROUTINE            */
         L     @14,ABDPLPTR                                        1159
         L     @15,ADPLPRNT(,@14)                                  1159
         BALR  @14,@15                                             1159
*     RFY                                                          1160
*      (R0,                                                        1160
*       R1) UNRSTD;                                                1160
*     ACE6DT1=ADDR(ACESRBWK);                                      1161
         L     @01,ACEPTR                                          1161
         LA    @15,ACESRBWK(,@01)                                  1161
         ST    @15,ACE6DT1                                         1161
*     RFY                                                          1162
*      (R0,                                                        1162
*       R1) RSTD;                                                  1162
*     R0=ADDR(ACE6PTS);                                            1163
         LA    R0,ACE6PTS                                          1163
*     R1=ABDPLPTR;                  /* GET PARM ADDR                 */
         L     @15,ABDPLPTR                                        1164
         LR    R1,@15                                              1164
*     CALL FORMAT;                  /* FORMAT THE LINE               */
         L     @15,ADPLFRMT(,@15)                                  1165
         BALR  @14,@15                                             1165
*     RFY                                                          1166
*       R15 RSTD;                                                  1166
*     FORMRC=FORMRC×R15;            /* SAVE RETURN CODE              */
         OR    FORMRC,R15                                          1167
*     RFY                                                          1168
*       R15 UNRSTD;                                                1168
*     CALL PRINT;                   /* CALL PRINT ROUTINE            */
         L     @14,ABDPLPTR                                        1169
         L     @15,ADPLPRNT(,@14)                                  1169
         BALR  @14,@15                                             1169
*     RFY                                                          1170
*      (R0,                                                        1170
*       R1) UNRSTD;                                                1170
*     RFY                                                          1171
*       R1 RSTD;                                                   1171
*     R1=ABDPLPTR;                  /* GET PARM ADDR                 */
         L     @15,ABDPLPTR                                        1172
         LR    R1,@15                                              1172
*     CALL PRINT;                   /* CALL PRINT ROUTINE            */
         L     @15,ADPLPRNT(,@15)                                  1173
         BALR  @14,@15                                             1173
*     RFY                                                          1174
*       R1 UNRSTD;                                                 1174
*     RFY                                                          1175
*       R15 RSTD;                                                  1175
*     R15=FORMRC;                   /* SAVE RETURN CODE FROM FORMAT  */
         LR    R15,FORMRC                                          1176
*     RFY                                                          1177
*       R15 UNRSTD;                                                1177
*   END;                            /* ILRMFRMT (ACE)              1178
*                                      LINES(ACE4,ACE5,ACE6)SPACE  1178
*                                      FORMAT LINES FOR TRANSFER PAGE
*                                      ACE                           */
*   RFY                                                            1179
*     R14 RSTD;                                                    1179
*   R14=RTNADDR6;                   /* RESTORE RETURN ADDRESS        */
         LR    R14,RTNADDR6                                        1180
*   RFY                                                            1181
*     R14 UNRSTD;                                                  1181
*   END XPGACE;                     /* RETURN TO CALLER              */
@EL00010 DS    0H                                                  1182
@EF00010 DS    0H                                                  1182
@ER00010 BR    @14                                                 1182
*   END FMTACE;                     /* RETURN TO CALLER              */
@EL00009 DS    0H                                                  1183
@EF00009 DS    0H                                                  1183
@ER00009 BR    @14                                                 1183
*                                                                  1184
*/********************************************************************/
*/*  ENTRY AND EXIT LOGIC FOR ILRFAIA.  BRANCHES AND LINKS TO FMTAIA */
*/********************************************************************/
*                                                                  1184
*   GENERATE REFS(FAIASAVE);                                       1184
          ENTRY ILRFAIA             EXTERNAL ENTRY POINT
          USING *,15                SET UP TEMPORARY ADDRESSABILITY
ILRFAIA   STM   14,12,12(13)        SAVE CALLERS REGISTERS
          LR    9,15                RESET ORIGINAL BASE REGISTERS
          LA    15,ILRFAIA-@PSTART
          SR    9,15
          LA    10,4095(9)
          LA    12,4095(10)
          DROP  15
          ST    13,FAIASAVE+4       CHAIN SAVE AREA PTRS
          LA    14,FAIASAVE
          ST    14,8(13)
          LR    13,14
          BAL   14,FMTAIA           GO TO FMTAIA RTN
          L     13,4(13)            ON RETURN, RESTORE REGISTERS
          L     14,12(13)
          LM    0,12,20(13)
          BR    14                  RETURN TO CALLER
*                                                                  1185
*/********************************************************************/
*/*  ENTRY AND EXIT LOGIC FOR ILRFMSG.  BRANCHES AND LINKS TO ERRMSG */
*/********************************************************************/
*                                                                  1185
*   GENERATE REFS(FMSGSAVE);                                       1185
          ENTRY ILRFMSG             EXTERNAL ENTRY POINT
          USING *,15                SET UP TEMPORARY ADDRESSABILITY
ILRFMSG   STM   14,12,12(13)        SAVE CALLERS REGISTERS
          LR    9,15                RESET ORIGINAL BASE REGISTERS
          LA    15,ILRFMSG-@PSTART
          SR    9,15
          LA    10,4095(9)
          LA    12,4095(10)
          DROP  15
          ST    13,FMSGSAVE+4       CHAIN SAVE AREA PTRS
          LA    14,FMSGSAVE
          ST    14,8(13)
          LR    13,14
          BAL   14,ERRMSG           GO TO ERRMSG RTN
          L     13,4(13)            ON RETURN, RESTORE REGISTERS
          L     14,12(13)
          LM    0,12,20(13)
          BR    14                  RETURN TO CALLER
*                                                                  1186
*/********************************************************************/
*/*  ENTRY AND EXIT LOGIC FOR ILRFPRTH.  BRANCHES AND LINKS TO PRTHED*/
*/********************************************************************/
*                                                                  1186
*   GENERATE REFS(FPRTSAVE);                                       1186
          ENTRY ILRFPRTH            EXTERNAL ENTRY POINT
          USING *,15                SET UP TEMPORARY ADDRESSABILITY
ILRFPRTH  STM   14,12,12(13)        SAVE CALLERS REGISTERS
          LR    9,15                RESET ORIGINAL BASE REGISTERS
          LA    15,ILRFPRTH-@PSTART
          SR    9,15
          LA    10,4095(9)
          LA    12,4095(10)
          DROP  15
          ST    13,FPRTSAVE+4       CHAIN SAVE AREA PTRS
          LA    14,FPRTSAVE
          ST    14,8(13)
          LR    13,14
          BAL   14,PRTHED           GO TO PRTHED RTN
          L     13,4(13)            ON RETURN, RESTORE REGISTERS
          L     14,12(13)
          LM    0,12,20(13)
          BR    14                  RETURN TO CALLER
*   END ILRFMT00                                                   1187
*                                                                  1187
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IHAABDPL)                                       */
*/*%INCLUDE SYSLIB  (ILRACE  )                                       */
*/*%INCLUDE SYSLIB  (ILRAIA  )                                       */
*/*%INCLUDE SYSLIB  (IHAASCB )                                       */
*/*%INCLUDE SYSLIB  (ILRASMVT)                                       */
*/*%INCLUDE SYSLIB  (IHAASVT )                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IHAPCB  )                                       */
*/*%INCLUDE SYSLIB  (IHARSMHD)                                       */
*                                                                  1187
*       ;                                                          1187
@EL00001 L     @13,4(,@13)                                         1187
@EF00001 DS    0H                                                  1187
@ER00001 LM    @14,@12,12(@13)                                     1187
         BR    @14                                                 1187
@DATA    DS    0H
@CH01472 DC    H'13'
@CH01478 DC    H'17'
@CH00198 DC    H'24'
@CH04158 DC    H'36'
@CH01405 DC    H'44'
         DS    0F
@SA00001 DS    18F
         DS    0F
@CF00042 DC    F'1'
@CH00042 EQU   @CF00042+2
@CF00156 DC    F'2'
@CF00107 DC    F'3'
@CF00168 DC    F'4'
@CH00168 EQU   @CF00168+2
@CV01270 DC    V(ILRFMTPG)
@CV01271 DC    V(ILRFMTSW)
@CV01272 DC    V(ILRFMTC)
@CV01273 DC    V(ILRFMTH)
@CV01274 DC    V(ILRFMTV)
@CV01275 DC    V(ILRFAIA)
@CV01277 DC    V(ILRFMSG)
@CV01276 DC    V(ILRFPRTH)
         DS    0D
ABDPLPTR DC    A(0)
ACEPTR   DS    A
ASMVTPTR DS    A
ASVTPTR  DS    A
CVTPTR   DS    A
PCBPTR   DS    A
ERECPTR  DS    A
MSGBFPTR DS    A
SAVEAIA  DS    A
CHAIN    DS    F
RCOD1    DC    F'0'
RCOD2    DC    F'0'
RCOD3    DC    F'0'
RCOD4    DC    F'0'
RCOD5    DC    F'0'
RTNADDR1 DS    F
RTNADDR2 DS    F
RTNADDR5 DS    F
RTNADDR7 DS    F
RTNADDR8 DS    F
MAXACES  DC    F'100'
MAXAIAS  DC    F'256'
MAXCTR   DC    F'0'
MAXCNT   DC    F'0'
MAXLINES DC    F'31'
NUMBUFS  DC    F'3'
ASMVMSG  DC    F'1'
PARTMSG  DC    F'2'
PAGEMSG  DC    F'3'
SARTMSG  DC    F'4'
SWAPMSG  DC    F'5'
PVTMSG   DC    F'6'
COMMSG   DC    F'7'
ASVTMSG  DC    F'8'
ASCBMSG  DC    F'9'
SGTMSG   DC    F'10'
RSMMSG   DC    F'11'
HEADMSG  DC    F'12'
LGVTMSG  DC    F'13'
VIOMSG   DC    F'14'
LOOPMSG  DC    F'15'
ENVMSG   DC    F'16'
RELMSG   DC    F'17'
CVTMSG   DC    F'18'
SAVEASID DS    H
@CC03791 DC    C'PCB'
@CC03793 DC    C'AIA'
FAIASAVE DS    CL72
FMSGSAVE DS    CL72
FPRTSAVE DS    CL72
ASMTITLE DC    CL30'* * * FORMAT OF ASM DATA * * *'
INTFLAGS DS    BL1
         ORG   INTFLAGS
SINGLE   DS    BL1
@NM00023 EQU   INTFLAGS+0
         ORG   INTFLAGS+1
ANCH     DC    CL11'ANCHORED IN'
ANCHASM  DC    CL8'CVTASMVT'
ANCHACE1 DC    CL8'ASMRLGRQ'
ANCHACE2 DC    CL8'ASMRLGWQ'
ANCHAIA1 DC    CL8'ASMSTAGQ'
ANCHAIA8 DC    CL8'LGEPROCQ'
ANCHEREC DC    CL8'ASMEREC'
ANCHMSG  DC    CL8'ASMMSGBF'
ASMVTNAM DC    CL7'ASMVT'
ACENAM   DC    CL7'ACE'
AIANAM   DC    CL7'PCB/AIA'
ERECNAM  DC    CL7'EREC'
MSGNAM   DC    CL7'MSGBF'
MODID    DC    CL8'ILRASM00'
POOLHDR  DC    CL16'POOL CONTROLLERS'
SAVEHDR  DC    CL15'WORK SAVE AREAS'
TERMBUF  DC    CL18'TERMINATION BUFFER'
         DS    CL2
HDPTRN   DS    CL16
         ORG   HDPTRN
@NM00024 DC    B'00011111'
@NM00025 DC    AL1(16*6+3)
@NM00026 DC    AL1(0)
@NM00027 DC    AL1(8)
HDLBPTR  DS    AL4
HDDTPTR  DS    AL4
@NM00028 DC    F'0'
         ORG   HDPTRN+16
ASM1PTS  DS    CL44
         ORG   ASM1PTS
@NM00034 DS    CL8
         ORG   @NM00034
@NM00035 DC    B'00000011'
@NM00036 DC    AL1(16*4-16)
@NM00037 DC    AL1(0)
@NM00038 DC    AL1(0)
@NM00039 DC    AL4(ASM1LB1)
         ORG   ASM1PTS+8
@NM00040 DS    CL12
         ORG   @NM00040
@NM00041 DC    B'00001111'
@NM00042 DC    AL1(8/8-1+16*5-16)
@NM00043 DC    AL1(5)
@NM00044 DC    AL1(11)
@NM00045 DC    AL4(ASM1LB2)
ASM1DT2  DC    AL4(ASMFLAG1)
         ORG   ASM1PTS+20
@NM00046 DS    CL4
         ORG   @NM00046
@NM00047 DC    B'00000101'
@NM00048 DC    AL1(8/8-1+16*5-16)
@NM00049 DC    AL1(23)
@NM00050 DC    AL1(29)
         ORG   ASM1PTS+24
@NM00051 DS    CL4
         ORG   @NM00051
@NM00052 DC    B'00000101'
@NM00053 DC    AL1(2-1+16*5-16)
@NM00054 DC    AL1(41)
@NM00055 DC    AL1(47)
         ORG   ASM1PTS+28
@NM00056 DS    CL4
         ORG   @NM00056
@NM00057 DC    B'00000101'
@NM00058 DC    AL1(4-1+16*4-16)
@NM00059 DC    AL1(59)
@NM00060 DC    AL1(65)
         ORG   ASM1PTS+32
@NM00061 DS    CL4
         ORG   @NM00061
@NM00062 DC    B'00000101'
@NM00063 DC    AL1(4-1+16*4-16)
@NM00064 DC    AL1(77)
@NM00065 DC    AL1(83)
         ORG   ASM1PTS+36
@NM00066 DS    CL4
         ORG   @NM00066
@NM00067 DC    B'00000101'
@NM00068 DC    AL1(4-1+16*3-16)
@NM00069 DC    AL1(95)
@NM00070 DC    AL1(101)
         ORG   ASM1PTS+40
@NM00071 DC    F'0'
         ORG   ASM1PTS+44
ASM2PTS  DS    CL40
         ORG   ASM2PTS
@NM00077 DS    CL8
         ORG   @NM00077
@NM00078 DC    B'00000011'
@NM00079 DC    AL1(16*4-16)
@NM00080 DC    AL1(0)
@NM00081 DC    AL1(0)
@NM00082 DC    AL4(ASM2LB1)
         ORG   ASM2PTS+8
@NM00083 DS    CL8
         ORG   @NM00083
@NM00084 DC    B'00000111'
@NM00085 DC    AL1(4-1+16*5-16)
@NM00086 DC    AL1(5)
@NM00087 DC    AL1(11)
@NM00088 DC    AL4(ASM2LB2)
         ORG   ASM2PTS+16
@NM00089 DS    CL4
         ORG   @NM00089
@NM00090 DC    B'00000101'
@NM00091 DC    AL1(4-1+16*4-16)
@NM00092 DC    AL1(23)
@NM00093 DC    AL1(29)
         ORG   ASM2PTS+20
@NM00094 DS    CL4
         ORG   @NM00094
@NM00095 DC    B'00000101'
@NM00096 DC    AL1(4-1+16*5-16)
@NM00097 DC    AL1(41)
@NM00098 DC    AL1(47)
         ORG   ASM2PTS+24
@NM00099 DS    CL4
         ORG   @NM00099
@NM00100 DC    B'00000101'
@NM00101 DC    AL1(4-1+16*4-16)
@NM00102 DC    AL1(59)
@NM00103 DC    AL1(65)
         ORG   ASM2PTS+28
@NM00104 DS    CL4
         ORG   @NM00104
@NM00105 DC    B'00000101'
@NM00106 DC    AL1(4-1+16*5-16)
@NM00107 DC    AL1(77)
@NM00108 DC    AL1(83)
         ORG   ASM2PTS+32
@NM00109 DS    CL4
         ORG   @NM00109
@NM00110 DC    B'00000101'
@NM00111 DC    AL1(4-1+16*5-16)
@NM00112 DC    AL1(95)
@NM00113 DC    AL1(101)
         ORG   ASM2PTS+36
@NM00114 DC    F'0'
         ORG   ASM2PTS+40
ASM3PTS  DS    CL40
         ORG   ASM3PTS
@NM00117 DS    CL8
         ORG   @NM00117
@NM00118 DC    B'00000011'
@NM00119 DC    AL1(16*4-16)
@NM00120 DC    AL1(0)
@NM00121 DC    AL1(0)
@NM00122 DC    AL4(ASM3LB1)
         ORG   ASM3PTS+8
@NM00123 DS    CL8
         ORG   @NM00123
@NM00124 DC    B'00000111'
@NM00125 DC    AL1(4-1+16*5-16)
@NM00126 DC    AL1(5)
@NM00127 DC    AL1(11)
@NM00128 DC    AL4(ASM3LB2)
         ORG   ASM3PTS+16
@NM00129 DS    CL4
         ORG   @NM00129
@NM00130 DC    B'00000101'
@NM00131 DC    AL1(4-1+16*5-16)
@NM00132 DC    AL1(23)
@NM00133 DC    AL1(29)
         ORG   ASM3PTS+20
@NM00134 DS    CL4
         ORG   @NM00134
@NM00135 DC    B'00000101'
@NM00136 DC    AL1(4-1+16*4-16)
@NM00137 DC    AL1(41)
@NM00138 DC    AL1(47)
         ORG   ASM3PTS+24
@NM00139 DS    CL4
         ORG   @NM00139
@NM00140 DC    B'00000100'
@NM00141 DC    AL1(16*0+4-1)
@NM00142 DC    AL1(59)
@NM00143 DC    AL1(65)
         ORG   ASM3PTS+28
@NM00144 DS    CL4
         ORG   @NM00144
@NM00145 DC    B'00000100'
@NM00146 DC    AL1(16*0+4-1)
@NM00147 DC    AL1(0)
@NM00148 DC    AL1(83)
         ORG   ASM3PTS+32
@NM00149 DS    CL4
         ORG   @NM00149
@NM00150 DC    B'00000100'
@NM00151 DC    AL1(16*0+4-1)
@NM00152 DC    AL1(0)
@NM00153 DC    AL1(101)
         ORG   ASM3PTS+36
@NM00154 DC    F'0'
         ORG   ASM3PTS+40
ASM4PTS  DS    CL40
         ORG   ASM4PTS
@NM00160 DS    CL8
         ORG   @NM00160
@NM00161 DC    B'00000011'
@NM00162 DC    AL1(16*4-16)
@NM00163 DC    AL1(0)
@NM00164 DC    AL1(0)
@NM00165 DC    AL4(ASM4LB1)
         ORG   ASM4PTS+8
@NM00166 DS    CL8
         ORG   @NM00166
@NM00167 DC    B'00000111'
@NM00168 DC    AL1(4-1+16*5-16)
@NM00169 DC    AL1(5)
@NM00170 DC    AL1(11)
@NM00171 DC    AL4(ASM4LB2)
         ORG   ASM4PTS+16
@NM00172 DS    CL4
         ORG   @NM00172
@NM00173 DC    B'00000101'
@NM00174 DC    AL1(4-1+16*5-16)
@NM00175 DC    AL1(23)
@NM00176 DC    AL1(29)
         ORG   ASM4PTS+20
@NM00177 DS    CL4
         ORG   @NM00177
@NM00178 DC    B'00000101'
@NM00179 DC    AL1(4-1+16*5-16)
@NM00180 DC    AL1(41)
@NM00181 DC    AL1(47)
         ORG   ASM4PTS+24
@NM00182 DS    CL4
         ORG   @NM00182
@NM00183 DC    B'00000101'
@NM00184 DC    AL1(4-1+16*5-16)
@NM00185 DC    AL1(59)
@NM00186 DC    AL1(65)
         ORG   ASM4PTS+28
@NM00187 DS    CL4
         ORG   @NM00187
@NM00188 DC    B'00000101'
@NM00189 DC    AL1(4-1+16*5-16)
@NM00190 DC    AL1(77)
@NM00191 DC    AL1(83)
         ORG   ASM4PTS+32
@NM00192 DS    CL4
         ORG   @NM00192
@NM00193 DC    B'00000101'
@NM00194 DC    AL1(4-1+16*5-16)
@NM00195 DC    AL1(95)
@NM00196 DC    AL1(101)
         ORG   ASM4PTS+36
@NM00197 DC    F'0'
         ORG   ASM4PTS+40
ASM5PTS  DS    CL40
         ORG   ASM5PTS
@NM00200 DS    CL8
         ORG   @NM00200
@NM00201 DC    B'00000011'
@NM00202 DC    AL1(16*4-16)
@NM00203 DC    AL1(0)
@NM00204 DC    AL1(0)
@NM00205 DC    AL4(ASM5LB1)
         ORG   ASM5PTS+8
@NM00206 DS    CL8
         ORG   @NM00206
@NM00207 DC    B'00000111'
@NM00208 DC    AL1(4-1+16*4-16)
@NM00209 DC    AL1(5)
@NM00210 DC    AL1(11)
@NM00211 DC    AL4(ASM5LB2)
         ORG   ASM5PTS+16
@NM00212 DS    CL4
         ORG   @NM00212
@NM00213 DC    B'00000101'
@NM00214 DC    AL1(4-1+16*4-16)
@NM00215 DC    AL1(23)
@NM00216 DC    AL1(29)
         ORG   ASM5PTS+20
@NM00217 DS    CL4
         ORG   @NM00217
@NM00218 DC    B'00000100'
@NM00219 DC    AL1(16*0+4-1)
@NM00220 DC    AL1(41)
@NM00221 DC    AL1(47)
         ORG   ASM5PTS+24
@NM00222 DS    CL4
         ORG   @NM00222
@NM00223 DC    B'00000100'
@NM00224 DC    AL1(16*0+4-1)
@NM00225 DC    AL1(59)
@NM00226 DC    AL1(65)
         ORG   ASM5PTS+28
@NM00227 DS    CL4
         ORG   @NM00227
@NM00228 DC    B'00000100'
@NM00229 DC    AL1(16*0+4-1)
@NM00230 DC    AL1(77)
@NM00231 DC    AL1(83)
         ORG   ASM5PTS+32
@NM00232 DS    CL4
         ORG   @NM00232
@NM00233 DC    B'00000101'
@NM00234 DC    AL1(4-1+16*5-16)
@NM00235 DC    AL1(95)
@NM00236 DC    AL1(101)
         ORG   ASM5PTS+36
@NM00237 DC    F'0'
         ORG   ASM5PTS+40
ASM6PTS  DS    CL40
         ORG   ASM6PTS
@NM00243 DS    CL8
         ORG   @NM00243
@NM00244 DC    B'00000011'
@NM00245 DC    AL1(16*4-16)
@NM00246 DC    AL1(0)
@NM00247 DC    AL1(0)
@NM00248 DC    AL4(ASM6LB1)
         ORG   ASM6PTS+8
@NM00249 DS    CL8
         ORG   @NM00249
@NM00250 DC    B'00000111'
@NM00251 DC    AL1(4-1+16*5-16)
@NM00252 DC    AL1(5)
@NM00253 DC    AL1(11)
@NM00254 DC    AL4(ASM6LB2)
         ORG   ASM6PTS+16
@NM00255 DS    CL4
         ORG   @NM00255
@NM00256 DC    B'00000101'
@NM00257 DC    AL1(4-1+16*3-16)
@NM00258 DC    AL1(23)
@NM00259 DC    AL1(29)
         ORG   ASM6PTS+20
@NM00260 DS    CL4
         ORG   @NM00260
@NM00261 DC    B'00000101'
@NM00262 DC    AL1(4-1+16*4-16)
@NM00263 DC    AL1(41)
@NM00264 DC    AL1(47)
         ORG   ASM6PTS+24
@NM00265 DS    CL4
         ORG   @NM00265
@NM00266 DC    B'00000101'
@NM00267 DC    AL1(4-1+16*4-16)
@NM00268 DC    AL1(59)
@NM00269 DC    AL1(65)
         ORG   ASM6PTS+28
@NM00270 DS    CL4
         ORG   @NM00270
@NM00271 DC    B'00000101'
@NM00272 DC    AL1(4-1+16*5-16)
@NM00273 DC    AL1(77)
@NM00274 DC    AL1(83)
         ORG   ASM6PTS+32
@NM00275 DS    CL4
         ORG   @NM00275
@NM00276 DC    B'00000101'
@NM00277 DC    AL1(4-1+16*4-16)
@NM00278 DC    AL1(95)
@NM00279 DC    AL1(101)
         ORG   ASM6PTS+36
@NM00280 DC    F'0'
         ORG   ASM6PTS+40
ASM7PTS  DS    CL40
         ORG   ASM7PTS
@NM00286 DS    CL8
         ORG   @NM00286
@NM00287 DC    B'00000011'
@NM00288 DC    AL1(16*4-16)
@NM00289 DC    AL1(0)
@NM00290 DC    AL1(0)
@NM00291 DC    AL4(ASM7LB1)
         ORG   ASM7PTS+8
@NM00292 DS    CL8
         ORG   @NM00292
@NM00293 DC    B'00000111'
@NM00294 DC    AL1(4-1+16*5-16)
@NM00295 DC    AL1(5)
@NM00296 DC    AL1(11)
@NM00297 DC    AL4(ASM7LB2)
         ORG   ASM7PTS+16
@NM00298 DS    CL4
         ORG   @NM00298
@NM00299 DC    B'00000101'
@NM00300 DC    AL1(4-1+16*4-16)
@NM00301 DC    AL1(23)
@NM00302 DC    AL1(29)
         ORG   ASM7PTS+20
@NM00303 DS    CL4
         ORG   @NM00303
@NM00304 DC    B'00000101'
@NM00305 DC    AL1(4-1+16*5-16)
@NM00306 DC    AL1(41)
@NM00307 DC    AL1(47)
         ORG   ASM7PTS+24
@NM00308 DS    CL4
         ORG   @NM00308
@NM00309 DC    B'00000101'
@NM00310 DC    AL1(4-1+16*5-16)
@NM00311 DC    AL1(59)
@NM00312 DC    AL1(65)
         ORG   ASM7PTS+28
@NM00313 DS    CL4
         ORG   @NM00313
@NM00314 DC    B'00000101'
@NM00315 DC    AL1(4-1+16*5-16)
@NM00316 DC    AL1(77)
@NM00317 DC    AL1(83)
         ORG   ASM7PTS+32
@NM00318 DS    CL4
         ORG   @NM00318
@NM00319 DC    B'00000101'
@NM00320 DC    AL1(4-1+16*5-16)
@NM00321 DC    AL1(95)
@NM00322 DC    AL1(101)
         ORG   ASM7PTS+36
@NM00323 DC    F'0'
         ORG   ASM7PTS+40
ASM8PTS  DS    CL40
         ORG   ASM8PTS
@NM00329 DS    CL8
         ORG   @NM00329
@NM00330 DC    B'00000011'
@NM00331 DC    AL1(16*4-16)
@NM00332 DC    AL1(0)
@NM00333 DC    AL1(0)
@NM00334 DC    AL4(ASM8LB1)
         ORG   ASM8PTS+8
@NM00335 DS    CL8
         ORG   @NM00335
@NM00336 DC    B'00000111'
@NM00337 DC    AL1(4-1+16*5-16)
@NM00338 DC    AL1(5)
@NM00339 DC    AL1(11)
@NM00340 DC    AL4(ASM8LB2)
         ORG   ASM8PTS+16
@NM00341 DS    CL4
         ORG   @NM00341
@NM00342 DC    B'00000101'
@NM00343 DC    AL1(4-1+16*5-16)
@NM00344 DC    AL1(23)
@NM00345 DC    AL1(29)
         ORG   ASM8PTS+20
@NM00346 DS    CL4
         ORG   @NM00346
@NM00347 DC    B'00000101'
@NM00348 DC    AL1(4-1+16*5-16)
@NM00349 DC    AL1(41)
@NM00350 DC    AL1(47)
         ORG   ASM8PTS+24
@NM00351 DS    CL4
         ORG   @NM00351
@NM00352 DC    B'00000101'
@NM00353 DC    AL1(4-1+16*5-16)
@NM00354 DC    AL1(59)
@NM00355 DC    AL1(65)
         ORG   ASM8PTS+28
@NM00356 DS    CL4
         ORG   @NM00356
@NM00357 DC    B'00000101'
@NM00358 DC    AL1(4-1+16*5-16)
@NM00359 DC    AL1(77)
@NM00360 DC    AL1(83)
         ORG   ASM8PTS+32
@NM00361 DS    CL4
         ORG   @NM00361
@NM00362 DC    B'00000101'
@NM00363 DC    AL1(4-1+16*5-16)
@NM00364 DC    AL1(95)
@NM00365 DC    AL1(101)
         ORG   ASM8PTS+36
@NM00366 DC    F'0'
         ORG   ASM8PTS+40
ASM9PTS  DS    CL40
         ORG   ASM9PTS
@NM00371 DS    CL8
         ORG   @NM00371
@NM00372 DC    B'00000011'
@NM00373 DC    AL1(16*4-16)
@NM00374 DC    AL1(0)
@NM00375 DC    AL1(0)
@NM00376 DC    AL4(ASM9LB1)
         ORG   ASM9PTS+8
@NM00377 DS    CL8
         ORG   @NM00377
@NM00378 DC    B'00000111'
@NM00379 DC    AL1(4-1+16*4-16)
@NM00380 DC    AL1(5)
@NM00381 DC    AL1(11)
@NM00382 DC    AL4(ASM9LB2)
         ORG   ASM9PTS+16
@NM00383 DS    CL4
         ORG   @NM00383
@NM00384 DC    B'00000100'
@NM00385 DC    AL1(16*0+4-1)
@NM00386 DC    AL1(23)
@NM00387 DC    AL1(29)
         ORG   ASM9PTS+20
@NM00388 DS    CL4
         ORG   @NM00388
@NM00389 DC    B'00000101'
@NM00390 DC    AL1(4-1+16*5-16)
@NM00391 DC    AL1(41)
@NM00392 DC    AL1(47)
         ORG   ASM9PTS+24
@NM00393 DS    CL4
         ORG   @NM00393
@NM00394 DC    B'00000101'
@NM00395 DC    AL1(4-1+16*5-16)
@NM00396 DC    AL1(59)
@NM00397 DC    AL1(65)
         ORG   ASM9PTS+28
@NM00398 DS    CL4
         ORG   @NM00398
@NM00399 DC    B'00000101'
@NM00400 DC    AL1(4-1+16*5-16)
@NM00401 DC    AL1(77)
@NM00402 DC    AL1(83)
         ORG   ASM9PTS+32
@NM00403 DS    CL4
         ORG   @NM00403
@NM00404 DC    B'00000101'
@NM00405 DC    AL1(4-1+16*3-16)
@NM00406 DC    AL1(95)
@NM00407 DC    AL1(101)
         ORG   ASM9PTS+36
@NM00408 DC    F'0'
         ORG   ASM9PTS+40
ASM10PTS DS    CL40
         ORG   ASM10PTS
@NM00414 DS    CL8
         ORG   @NM00414
@NM00415 DC    B'00000011'
@NM00416 DC    AL1(16*4-16)
@NM00417 DC    AL1(0)
@NM00418 DC    AL1(0)
@NM00419 DC    AL4(ASM10LB1)
         ORG   ASM10PTS+8
@NM00420 DS    CL8
         ORG   @NM00420
@NM00421 DC    B'00000111'
@NM00422 DC    AL1(4-1+16*5-16)
@NM00423 DC    AL1(5)
@NM00424 DC    AL1(11)
@NM00425 DC    AL4(ASM10LB2)
         ORG   ASM10PTS+16
@NM00426 DS    CL4
         ORG   @NM00426
@NM00427 DC    B'00000101'
@NM00428 DC    AL1(4-1+16*5-16)
@NM00429 DC    AL1(23)
@NM00430 DC    AL1(29)
         ORG   ASM10PTS+20
@NM00431 DS    CL4
         ORG   @NM00431
@NM00432 DC    B'00000101'
@NM00433 DC    AL1(4-1+16*5-16)
@NM00434 DC    AL1(41)
@NM00435 DC    AL1(47)
         ORG   ASM10PTS+24
@NM00436 DS    CL4
         ORG   @NM00436
@NM00437 DC    B'00000101'
@NM00438 DC    AL1(4-1+16*5-16)
@NM00439 DC    AL1(59)
@NM00440 DC    AL1(65)
         ORG   ASM10PTS+28
@NM00441 DS    CL4
         ORG   @NM00441
@NM00442 DC    B'00000101'
@NM00443 DC    AL1(4-1+16*3-16)
@NM00444 DC    AL1(77)
@NM00445 DC    AL1(83)
         ORG   ASM10PTS+32
@NM00446 DS    CL4
         ORG   @NM00446
@NM00447 DC    B'00000101'
@NM00448 DC    AL1(4-1+16*5-16)
@NM00449 DC    AL1(95)
@NM00450 DC    AL1(101)
         ORG   ASM10PTS+36
@NM00451 DC    F'0'
         ORG   ASM10PTS+40
ASM11PTS DS    CL40
         ORG   ASM11PTS
@NM00457 DS    CL8
         ORG   @NM00457
@NM00458 DC    B'00000011'
@NM00459 DC    AL1(16*4-16)
@NM00460 DC    AL1(0)
@NM00461 DC    AL1(0)
@NM00462 DC    AL4(ASM11LB1)
         ORG   ASM11PTS+8
@NM00463 DS    CL8
         ORG   @NM00463
@NM00464 DC    B'00000111'
@NM00465 DC    AL1(4-1+16*5-16)
@NM00466 DC    AL1(5)
@NM00467 DC    AL1(11)
@NM00468 DC    AL4(ASM11LB2)
         ORG   ASM11PTS+16
@NM00469 DS    CL4
         ORG   @NM00469
@NM00470 DC    B'00000101'
@NM00471 DC    AL1(4-1+16*5-16)
@NM00472 DC    AL1(23)
@NM00473 DC    AL1(29)
         ORG   ASM11PTS+20
@NM00474 DS    CL4
         ORG   @NM00474
@NM00475 DC    B'00000101'
@NM00476 DC    AL1(4-1+16*4-16)
@NM00477 DC    AL1(41)
@NM00478 DC    AL1(47)
         ORG   ASM11PTS+24
@NM00479 DS    CL4
         ORG   @NM00479
@NM00480 DC    B'00000101'
@NM00481 DC    AL1(4-1+16*4-16)
@NM00482 DC    AL1(59)
@NM00483 DC    AL1(65)
         ORG   ASM11PTS+28
@NM00484 DS    CL4
         ORG   @NM00484
@NM00485 DC    B'00000101'
@NM00486 DC    AL1(4-1+16*4-16)
@NM00487 DC    AL1(77)
@NM00488 DC    AL1(83)
         ORG   ASM11PTS+32
@NM00489 DS    CL4
         ORG   @NM00489
@NM00490 DC    B'00000101'
@NM00491 DC    AL1(4-1+16*4-16)
@NM00492 DC    AL1(95)
@NM00493 DC    AL1(101)
         ORG   ASM11PTS+36
@NM00494 DC    F'0'
         ORG   ASM11PTS+40
ASM12PTS DS    CL40
         ORG   ASM12PTS
@NM00500 DS    CL8
         ORG   @NM00500
@NM00501 DC    B'00000011'
@NM00502 DC    AL1(16*4-16)
@NM00503 DC    AL1(0)
@NM00504 DC    AL1(0)
@NM00505 DC    AL4(ASM12LB1)
         ORG   ASM12PTS+8
@NM00506 DS    CL8
         ORG   @NM00506
@NM00507 DC    B'00000111'
@NM00508 DC    AL1(4-1+16*5-16)
@NM00509 DC    AL1(5)
@NM00510 DC    AL1(11)
@NM00511 DC    AL4(ASM12LB2)
         ORG   ASM12PTS+16
@NM00512 DS    CL4
         ORG   @NM00512
@NM00513 DC    B'00000101'
@NM00514 DC    AL1(4-1+16*5-16)
@NM00515 DC    AL1(23)
@NM00516 DC    AL1(29)
         ORG   ASM12PTS+20
@NM00517 DS    CL4
         ORG   @NM00517
@NM00518 DC    B'00000101'
@NM00519 DC    AL1(4-1+16*5-16)
@NM00520 DC    AL1(41)
@NM00521 DC    AL1(47)
         ORG   ASM12PTS+24
@NM00522 DS    CL4
         ORG   @NM00522
@NM00523 DC    B'00000101'
@NM00524 DC    AL1(4-1+16*5-16)
@NM00525 DC    AL1(59)
@NM00526 DC    AL1(65)
         ORG   ASM12PTS+28
@NM00527 DS    CL4
         ORG   @NM00527
@NM00528 DC    B'00000101'
@NM00529 DC    AL1(4-1+16*5-16)
@NM00530 DC    AL1(77)
@NM00531 DC    AL1(83)
         ORG   ASM12PTS+32
@NM00532 DS    CL4
         ORG   @NM00532
@NM00533 DC    B'00000101'
@NM00534 DC    AL1(4-1+16*5-16)
@NM00535 DC    AL1(95)
@NM00536 DC    AL1(101)
         ORG   ASM12PTS+36
@NM00537 DC    F'0'
         ORG   ASM12PTS+40
ASM13PTS DS    CL32
         ORG   ASM13PTS
@NM00538 DS    CL8
         ORG   @NM00538
@NM00539 DC    B'00000011'
@NM00540 DC    AL1(16*4-16)
@NM00541 DC    AL1(0)
@NM00542 DC    AL1(0)
@NM00543 DC    AL4(ASM13LB1)
         ORG   ASM13PTS+8
@NM00544 DS    CL8
         ORG   @NM00544
@NM00545 DC    B'00000111'
@NM00546 DC    AL1(4-1+16*5-16)
@NM00547 DC    AL1(5)
@NM00548 DC    AL1(11)
@NM00549 DC    AL4(ASM13LB2)
         ORG   ASM13PTS+16
@NM00550 DS    CL4
         ORG   @NM00550
@NM00551 DC    B'00000100'
@NM00552 DC    AL1(16*0+4-1)
@NM00553 DC    AL1(0)
@NM00554 DC    AL1(29)
         ORG   ASM13PTS+20
@NM00555 DS    CL4
         ORG   @NM00555
@NM00556 DC    B'00000100'
@NM00557 DC    AL1(16*0+4-1)
@NM00558 DC    AL1(0)
@NM00559 DC    AL1(47)
         ORG   ASM13PTS+24
@NM00560 DS    CL4
         ORG   @NM00560
@NM00561 DC    B'00000100'
@NM00562 DC    AL1(16*0+4-1)
@NM00563 DC    AL1(0)
@NM00564 DC    AL1(65)
         ORG   ASM13PTS+28
@NM00565 DC    F'0'
         ORG   ASM13PTS+32
ASM14PTS DS    CL40
         ORG   ASM14PTS
@NM00570 DS    CL8
         ORG   @NM00570
@NM00571 DC    B'00000011'
@NM00572 DC    AL1(16*4-16)
@NM00573 DC    AL1(0)
@NM00574 DC    AL1(0)
@NM00575 DC    AL4(ASM14LB1)
         ORG   ASM14PTS+8
@NM00576 DS    CL12
         ORG   @NM00576
@NM00577 DC    B'00101111'
@NM00578 DC    AL1(4-1+16*4-16)
@NM00579 DC    AL1(5)
@NM00580 DC    AL1(11)
@NM00581 DC    AL4(ASM14LB2)
ASM14DT3 DC    A(0)
         ORG   ASM14PTS+20
@NM00582 DS    CL4
         ORG   @NM00582
@NM00583 DC    B'00000101'
@NM00584 DC    AL1(2-1+16*5-16)
@NM00585 DC    AL1(19)
@NM00586 DC    AL1(25)
         ORG   ASM14PTS+24
@NM00587 DS    CL4
         ORG   @NM00587
@NM00588 DC    B'00000101'
@NM00589 DC    AL1(2-1+16*5-16)
@NM00590 DC    AL1(33)
@NM00591 DC    AL1(39)
         ORG   ASM14PTS+28
@NM00592 DS    CL4
         ORG   @NM00592
@NM00593 DC    B'00000101'
@NM00594 DC    AL1(4-1+16*5-16)
@NM00595 DC    AL1(47)
@NM00596 DC    AL1(53)
         ORG   ASM14PTS+32
@NM00597 DS    CL4
         ORG   @NM00597
@NM00598 DC    B'00000101'
@NM00599 DC    AL1(4-1+16*5-16)
@NM00600 DC    AL1(65)
@NM00601 DC    AL1(71)
         ORG   ASM14PTS+36
@NM00602 DC    F'0'
         ORG   ASM14PTS+40
ASM15PTS DS    CL32
         ORG   ASM15PTS
@NM00603 DS    CL8
         ORG   @NM00603
@NM00604 DC    B'00000011'
@NM00605 DC    AL1(16*4-16)
@NM00606 DC    AL1(0)
@NM00607 DC    AL1(0)
@NM00608 DC    AL4(ASM15LB1)
         ORG   ASM15PTS+8
@NM00609 DS    CL4
         ORG   @NM00609
@NM00610 DC    B'00100100'
@NM00611 DC    AL1(16*0+4-1)
@NM00612 DC    AL1(0)
@NM00613 DC    AL1(11)
         ORG   ASM15PTS+12
@NM00614 DS    CL4
         ORG   @NM00614
@NM00615 DC    B'00000100'
@NM00616 DC    AL1(16*0+2-1)
@NM00617 DC    AL1(0)
@NM00618 DC    AL1(25)
         ORG   ASM15PTS+16
@NM00619 DS    CL4
         ORG   @NM00619
@NM00620 DC    B'00000100'
@NM00621 DC    AL1(16*0+2-1)
@NM00622 DC    AL1(0)
@NM00623 DC    AL1(39)
         ORG   ASM15PTS+20
@NM00624 DS    CL4
         ORG   @NM00624
@NM00625 DC    B'00000100'
@NM00626 DC    AL1(16*0+4-1)
@NM00627 DC    AL1(0)
@NM00628 DC    AL1(53)
         ORG   ASM15PTS+24
@NM00629 DS    CL4
         ORG   @NM00629
@NM00630 DC    B'00000100'
@NM00631 DC    AL1(16*0+4-1)
@NM00632 DC    AL1(0)
@NM00633 DC    AL1(71)
         ORG   ASM15PTS+28
@NM00634 DC    F'0'
         ORG   ASM15PTS+32
ASM16PTS DS    CL32
         ORG   ASM16PTS
@NM00635 DS    CL8
         ORG   @NM00635
@NM00636 DC    B'00000011'
@NM00637 DC    AL1(16*4-16)
@NM00638 DC    AL1(0)
@NM00639 DC    AL1(0)
@NM00640 DC    AL4(ASM16LB1)
         ORG   ASM16PTS+8
@NM00641 DS    CL4
         ORG   @NM00641
@NM00642 DC    B'00100100'
@NM00643 DC    AL1(16*0+4-1)
@NM00644 DC    AL1(0)
@NM00645 DC    AL1(11)
         ORG   ASM16PTS+12
@NM00646 DS    CL4
         ORG   @NM00646
@NM00647 DC    B'00000100'
@NM00648 DC    AL1(16*0+2-1)
@NM00649 DC    AL1(0)
@NM00650 DC    AL1(25)
         ORG   ASM16PTS+16
@NM00651 DS    CL4
         ORG   @NM00651
@NM00652 DC    B'00000100'
@NM00653 DC    AL1(16*0+2-1)
@NM00654 DC    AL1(0)
@NM00655 DC    AL1(39)
         ORG   ASM16PTS+20
@NM00656 DS    CL4
         ORG   @NM00656
@NM00657 DC    B'00000100'
@NM00658 DC    AL1(16*0+4-1)
@NM00659 DC    AL1(0)
@NM00660 DC    AL1(53)
         ORG   ASM16PTS+24
@NM00661 DS    CL4
         ORG   @NM00661
@NM00662 DC    B'00000100'
@NM00663 DC    AL1(16*0+4-1)
@NM00664 DC    AL1(0)
@NM00665 DC    AL1(71)
         ORG   ASM16PTS+28
@NM00666 DC    F'0'
         ORG   ASM16PTS+32
ASM17PTS DS    CL44
         ORG   ASM17PTS
@NM00668 DS    CL8
         ORG   @NM00668
@NM00669 DC    B'00000011'
@NM00670 DC    AL1(16*4-16)
@NM00671 DC    AL1(0)
@NM00672 DC    AL1(0)
@NM00673 DC    AL4(ASM17LB1)
         ORG   ASM17PTS+8
@NM00674 DS    CL4
         ORG   @NM00674
@NM00675 DC    B'00100100'
@NM00676 DC    AL1(16*0+4-1)
@NM00677 DC    AL1(0)
@NM00678 DC    AL1(11)
         ORG   ASM17PTS+12
@NM00679 DS    CL4
         ORG   @NM00679
@NM00680 DC    B'00000100'
@NM00681 DC    AL1(16*0+2-1)
@NM00682 DC    AL1(0)
@NM00683 DC    AL1(25)
         ORG   ASM17PTS+16
@NM00684 DS    CL4
         ORG   @NM00684
@NM00685 DC    B'00000100'
@NM00686 DC    AL1(16*0+2-1)
@NM00687 DC    AL1(0)
@NM00688 DC    AL1(39)
         ORG   ASM17PTS+20
@NM00689 DS    CL4
         ORG   @NM00689
@NM00690 DC    B'00000100'
@NM00691 DC    AL1(16*0+4-1)
@NM00692 DC    AL1(0)
@NM00693 DC    AL1(53)
         ORG   ASM17PTS+24
@NM00694 DS    CL4
         ORG   @NM00694
@NM00695 DC    B'00000100'
@NM00696 DC    AL1(16*0+4-1)
@NM00697 DC    AL1(0)
@NM00698 DC    AL1(71)
         ORG   ASM17PTS+28
@NM00699 DS    CL8
         ORG   @NM00699
@NM00700 DC    B'00000111'
@NM00701 DC    AL1(4-1+16*5-16)
@NM00702 DC    AL1(83)
@NM00703 DC    AL1(89)
@NM00704 DC    AL4(ASM17LB7)
         ORG   ASM17PTS+36
@NM00705 DS    CL4
         ORG   @NM00705
@NM00706 DC    B'00000101'
@NM00707 DC    AL1(4-1+16*5-16)
@NM00708 DC    AL1(101)
@NM00709 DC    AL1(107)
         ORG   ASM17PTS+40
@NM00710 DC    F'0'
         ORG   ASM17PTS+44
ASMAPTS  DS    CL64
         ORG   ASMAPTS
@NM00711 DS    CL8
         ORG   @NM00711
@NM00712 DC    B'00000011'
@NM00713 DC    AL1(16*4-16)
@NM00714 DC    AL1(0)
@NM00715 DC    AL1(0)
@NM00716 DC    AL4(ASMALB1)
         ORG   ASMAPTS+8
@NM00717 DS    CL8
         ORG   @NM00717
@NM00718 DC    B'00000011'
@NM00719 DC    AL1(16*9-16)
@NM00720 DC    AL1(5)
@NM00721 DC    AL1(0)
@NM00722 DC    AL4(ASMALB2)
         ORG   ASMAPTS+16
@NM00723 DS    CL8
         ORG   @NM00723
@NM00724 DC    B'00001100'
@NM00725 DC    AL1(16*0+4-1)
@NM00726 DC    AL1(0)
@NM00727 DC    AL1(15)
ASMADT3  DC    A(0)
         ORG   ASMAPTS+24
@NM00728 DS    CL4
         ORG   @NM00728
@NM00729 DC    B'00000100'
@NM00730 DC    AL1(16*0+4-1)
@NM00731 DC    AL1(0)
@NM00732 DC    AL1(25)
         ORG   ASMAPTS+28
@NM00733 DS    CL4
         ORG   @NM00733
@NM00734 DC    B'00000100'
@NM00735 DC    AL1(16*0+4-1)
@NM00736 DC    AL1(0)
@NM00737 DC    AL1(35)
         ORG   ASMAPTS+32
@NM00738 DS    CL4
         ORG   @NM00738
@NM00739 DC    B'00000100'
@NM00740 DC    AL1(16*0+4-1)
@NM00741 DC    AL1(0)
@NM00742 DC    AL1(45)
         ORG   ASMAPTS+36
@NM00743 DS    CL4
         ORG   @NM00743
@NM00744 DC    B'00000100'
@NM00745 DC    AL1(16*0+4-1)
@NM00746 DC    AL1(0)
@NM00747 DC    AL1(55)
         ORG   ASMAPTS+40
@NM00748 DS    CL4
         ORG   @NM00748
@NM00749 DC    B'00000100'
@NM00750 DC    AL1(16*0+4-1)
@NM00751 DC    AL1(0)
@NM00752 DC    AL1(65)
         ORG   ASMAPTS+44
@NM00753 DS    CL4
         ORG   @NM00753
@NM00754 DC    B'00000100'
@NM00755 DC    AL1(16*0+4-1)
@NM00756 DC    AL1(0)
@NM00757 DC    AL1(75)
         ORG   ASMAPTS+48
@NM00758 DS    CL4
         ORG   @NM00758
@NM00759 DC    B'00000100'
@NM00760 DC    AL1(16*0+4-1)
@NM00761 DC    AL1(0)
@NM00762 DC    AL1(85)
         ORG   ASMAPTS+52
@NM00763 DS    CL4
         ORG   @NM00763
@NM00764 DC    B'00000100'
@NM00765 DC    AL1(16*0+4-1)
@NM00766 DC    AL1(0)
@NM00767 DC    AL1(95)
         ORG   ASMAPTS+56
@NM00768 DS    CL4
         ORG   @NM00768
@NM00769 DC    B'00000100'
@NM00770 DC    AL1(16*0+4-1)
@NM00771 DC    AL1(0)
@NM00772 DC    AL1(105)
         ORG   ASMAPTS+60
@NM00773 DC    F'0'
         ORG   ASMAPTS+64
ASMBPTS  DS    CL52
         ORG   ASMBPTS
@NM00774 DS    CL8
         ORG   @NM00774
@NM00775 DC    B'00000011'
@NM00776 DC    AL1(16*4-16)
@NM00777 DC    AL1(0)
@NM00778 DC    AL1(0)
@NM00779 DC    AL4(ASMBLB1)
         ORG   ASMBPTS+8
@NM00780 DS    CL4
         ORG   @NM00780
@NM00781 DC    B'00000100'
@NM00782 DC    AL1(16*0+4-1)
@NM00783 DC    AL1(0)
@NM00784 DC    AL1(15)
         ORG   ASMBPTS+12
@NM00785 DS    CL4
         ORG   @NM00785
@NM00786 DC    B'00000100'
@NM00787 DC    AL1(16*0+4-1)
@NM00788 DC    AL1(0)
@NM00789 DC    AL1(25)
         ORG   ASMBPTS+16
@NM00790 DS    CL4
         ORG   @NM00790
@NM00791 DC    B'00000100'
@NM00792 DC    AL1(16*0+4-1)
@NM00793 DC    AL1(0)
@NM00794 DC    AL1(35)
         ORG   ASMBPTS+20
@NM00795 DS    CL4
         ORG   @NM00795
@NM00796 DC    B'00000100'
@NM00797 DC    AL1(16*0+4-1)
@NM00798 DC    AL1(0)
@NM00799 DC    AL1(45)
         ORG   ASMBPTS+24
@NM00800 DS    CL4
         ORG   @NM00800
@NM00801 DC    B'00000100'
@NM00802 DC    AL1(16*0+4-1)
@NM00803 DC    AL1(0)
@NM00804 DC    AL1(55)
         ORG   ASMBPTS+28
@NM00805 DS    CL4
         ORG   @NM00805
@NM00806 DC    B'00000100'
@NM00807 DC    AL1(16*0+4-1)
@NM00808 DC    AL1(0)
@NM00809 DC    AL1(65)
         ORG   ASMBPTS+32
@NM00810 DS    CL4
         ORG   @NM00810
@NM00811 DC    B'00000100'
@NM00812 DC    AL1(16*0+4-1)
@NM00813 DC    AL1(0)
@NM00814 DC    AL1(75)
         ORG   ASMBPTS+36
@NM00815 DS    CL4
         ORG   @NM00815
@NM00816 DC    B'00000100'
@NM00817 DC    AL1(16*0+4-1)
@NM00818 DC    AL1(0)
@NM00819 DC    AL1(85)
         ORG   ASMBPTS+40
@NM00820 DS    CL4
         ORG   @NM00820
@NM00821 DC    B'00000100'
@NM00822 DC    AL1(16*0+4-1)
@NM00823 DC    AL1(0)
@NM00824 DC    AL1(95)
         ORG   ASMBPTS+44
@NM00825 DS    CL4
         ORG   @NM00825
@NM00826 DC    B'00000100'
@NM00827 DC    AL1(16*0+4-1)
@NM00828 DC    AL1(0)
@NM00829 DC    AL1(105)
         ORG   ASMBPTS+48
@NM00830 DC    F'0'
         ORG   ASMBPTS+52
ASMCPTS  DS    CL60
         ORG   ASMCPTS
@NM00831 DS    CL8
         ORG   @NM00831
@NM00832 DC    B'00000011'
@NM00833 DC    AL1(16*4-16)
@NM00834 DC    AL1(0)
@NM00835 DC    AL1(0)
@NM00836 DC    AL4(ASMCLB1)
         ORG   ASMCPTS+8
@NM00837 DS    CL8
         ORG   @NM00837
@NM00838 DC    B'00000011'
@NM00839 DC    AL1(16*9-16)
@NM00840 DC    AL1(5)
@NM00841 DC    AL1(0)
@NM00842 DC    AL4(ASMCLB2)
         ORG   ASMCPTS+16
@NM00843 DS    CL4
         ORG   @NM00843
@NM00844 DC    B'00000100'
@NM00845 DC    AL1(16*0+4-1)
@NM00846 DC    AL1(0)
@NM00847 DC    AL1(15)
         ORG   ASMCPTS+20
@NM00848 DS    CL4
         ORG   @NM00848
@NM00849 DC    B'00000100'
@NM00850 DC    AL1(16*0+4-1)
@NM00851 DC    AL1(0)
@NM00852 DC    AL1(25)
         ORG   ASMCPTS+24
@NM00853 DS    CL4
         ORG   @NM00853
@NM00854 DC    B'00000100'
@NM00855 DC    AL1(16*0+4-1)
@NM00856 DC    AL1(0)
@NM00857 DC    AL1(35)
         ORG   ASMCPTS+28
@NM00858 DS    CL4
         ORG   @NM00858
@NM00859 DC    B'00000100'
@NM00860 DC    AL1(16*0+4-1)
@NM00861 DC    AL1(0)
@NM00862 DC    AL1(45)
         ORG   ASMCPTS+32
@NM00863 DS    CL4
         ORG   @NM00863
@NM00864 DC    B'00000100'
@NM00865 DC    AL1(16*0+4-1)
@NM00866 DC    AL1(0)
@NM00867 DC    AL1(55)
         ORG   ASMCPTS+36
@NM00868 DS    CL4
         ORG   @NM00868
@NM00869 DC    B'00000100'
@NM00870 DC    AL1(16*0+4-1)
@NM00871 DC    AL1(0)
@NM00872 DC    AL1(65)
         ORG   ASMCPTS+40
@NM00873 DS    CL4
         ORG   @NM00873
@NM00874 DC    B'00000100'
@NM00875 DC    AL1(16*0+4-1)
@NM00876 DC    AL1(0)
@NM00877 DC    AL1(75)
         ORG   ASMCPTS+44
@NM00878 DS    CL4
         ORG   @NM00878
@NM00879 DC    B'00000100'
@NM00880 DC    AL1(16*0+4-1)
@NM00881 DC    AL1(0)
@NM00882 DC    AL1(95)
         ORG   ASMCPTS+48
@NM00883 DS    CL4
         ORG   @NM00883
@NM00884 DC    B'00000100'
@NM00885 DC    AL1(16*0+4-1)
@NM00886 DC    AL1(0)
@NM00887 DC    AL1(85)
         ORG   ASMCPTS+52
@NM00888 DS    CL4
         ORG   @NM00888
@NM00889 DC    B'00000100'
@NM00890 DC    AL1(16*0+4-1)
@NM00891 DC    AL1(0)
@NM00892 DC    AL1(105)
         ORG   ASMCPTS+56
@NM00893 DC    F'0'
         ORG   ASMCPTS+60
ASMDPTS  DS    CL52
         ORG   ASMDPTS
@NM00894 DS    CL8
         ORG   @NM00894
@NM00895 DC    B'00000011'
@NM00896 DC    AL1(16*4-16)
@NM00897 DC    AL1(0)
@NM00898 DC    AL1(0)
@NM00899 DC    AL4(ASMDLB1)
         ORG   ASMDPTS+8
@NM00900 DS    CL4
         ORG   @NM00900
@NM00901 DC    B'00000100'
@NM00902 DC    AL1(16*0+4-1)
@NM00903 DC    AL1(0)
@NM00904 DC    AL1(15)
         ORG   ASMDPTS+12
@NM00905 DS    CL4
         ORG   @NM00905
@NM00906 DC    B'00000100'
@NM00907 DC    AL1(16*0+4-1)
@NM00908 DC    AL1(0)
@NM00909 DC    AL1(25)
         ORG   ASMDPTS+16
@NM00910 DS    CL4
         ORG   @NM00910
@NM00911 DC    B'00000100'
@NM00912 DC    AL1(16*0+4-1)
@NM00913 DC    AL1(0)
@NM00914 DC    AL1(35)
         ORG   ASMDPTS+20
@NM00915 DS    CL4
         ORG   @NM00915
@NM00916 DC    B'00000100'
@NM00917 DC    AL1(16*0+4-1)
@NM00918 DC    AL1(0)
@NM00919 DC    AL1(45)
         ORG   ASMDPTS+24
@NM00920 DS    CL4
         ORG   @NM00920
@NM00921 DC    B'00000100'
@NM00922 DC    AL1(16*0+4-1)
@NM00923 DC    AL1(0)
@NM00924 DC    AL1(55)
         ORG   ASMDPTS+28
@NM00925 DS    CL4
         ORG   @NM00925
@NM00926 DC    B'00000100'
@NM00927 DC    AL1(16*0+4-1)
@NM00928 DC    AL1(0)
@NM00929 DC    AL1(65)
         ORG   ASMDPTS+32
@NM00930 DS    CL4
         ORG   @NM00930
@NM00931 DC    B'00000100'
@NM00932 DC    AL1(16*0+4-1)
@NM00933 DC    AL1(0)
@NM00934 DC    AL1(75)
         ORG   ASMDPTS+36
@NM00935 DS    CL4
         ORG   @NM00935
@NM00936 DC    B'00000100'
@NM00937 DC    AL1(16*0+4-1)
@NM00938 DC    AL1(0)
@NM00939 DC    AL1(85)
         ORG   ASMDPTS+40
@NM00940 DS    CL4
         ORG   @NM00940
@NM00941 DC    B'00000100'
@NM00942 DC    AL1(16*0+4-1)
@NM00943 DC    AL1(0)
@NM00944 DC    AL1(95)
         ORG   ASMDPTS+44
@NM00945 DS    CL4
         ORG   @NM00945
@NM00946 DC    B'00000100'
@NM00947 DC    AL1(16*0+4-1)
@NM00948 DC    AL1(0)
@NM00949 DC    AL1(105)
         ORG   ASMDPTS+48
@NM00950 DC    F'0'
         ORG   ASMDPTS+52
ASMEPTS  DS    CL60
         ORG   ASMEPTS
@NM00951 DS    CL8
         ORG   @NM00951
@NM00952 DC    B'00000011'
@NM00953 DC    AL1(16*4-16)
@NM00954 DC    AL1(0)
@NM00955 DC    AL1(0)
@NM00956 DC    AL4(ASMELB1)
         ORG   ASMEPTS+8
@NM00957 DS    CL8
         ORG   @NM00957
@NM00958 DC    B'00000011'
@NM00959 DC    AL1(16*9-16)
@NM00960 DC    AL1(5)
@NM00961 DC    AL1(0)
@NM00962 DC    AL4(ASMELB2)
         ORG   ASMEPTS+16
@NM00963 DS    CL4
         ORG   @NM00963
@NM00964 DC    B'00000100'
@NM00965 DC    AL1(16*0+4-1)
@NM00966 DC    AL1(0)
@NM00967 DC    AL1(15)
         ORG   ASMEPTS+20
@NM00968 DS    CL4
         ORG   @NM00968
@NM00969 DC    B'00000100'
@NM00970 DC    AL1(16*0+4-1)
@NM00971 DC    AL1(0)
@NM00972 DC    AL1(25)
         ORG   ASMEPTS+24
@NM00973 DS    CL4
         ORG   @NM00973
@NM00974 DC    B'00000100'
@NM00975 DC    AL1(16*0+4-1)
@NM00976 DC    AL1(0)
@NM00977 DC    AL1(35)
         ORG   ASMEPTS+28
@NM00978 DS    CL4
         ORG   @NM00978
@NM00979 DC    B'00000100'
@NM00980 DC    AL1(16*0+4-1)
@NM00981 DC    AL1(0)
@NM00982 DC    AL1(45)
         ORG   ASMEPTS+32
@NM00983 DS    CL4
         ORG   @NM00983
@NM00984 DC    B'00000100'
@NM00985 DC    AL1(16*0+4-1)
@NM00986 DC    AL1(0)
@NM00987 DC    AL1(55)
         ORG   ASMEPTS+36
@NM00988 DS    CL4
         ORG   @NM00988
@NM00989 DC    B'00000100'
@NM00990 DC    AL1(16*0+4-1)
@NM00991 DC    AL1(0)
@NM00992 DC    AL1(65)
         ORG   ASMEPTS+40
@NM00993 DS    CL4
         ORG   @NM00993
@NM00994 DC    B'00000100'
@NM00995 DC    AL1(16*0+4-1)
@NM00996 DC    AL1(0)
@NM00997 DC    AL1(75)
         ORG   ASMEPTS+44
@NM00998 DS    CL4
         ORG   @NM00998
@NM00999 DC    B'00000100'
@NM01000 DC    AL1(16*0+4-1)
@NM01001 DC    AL1(0)
@NM01002 DC    AL1(85)
         ORG   ASMEPTS+48
@NM01003 DS    CL4
         ORG   @NM01003
@NM01004 DC    B'00000100'
@NM01005 DC    AL1(16*0+4-1)
@NM01006 DC    AL1(0)
@NM01007 DC    AL1(95)
         ORG   ASMEPTS+52
@NM01008 DS    CL4
         ORG   @NM01008
@NM01009 DC    B'00000100'
@NM01010 DC    AL1(16*0+4-1)
@NM01011 DC    AL1(0)
@NM01012 DC    AL1(105)
         ORG   ASMEPTS+56
@NM01013 DC    F'0'
         ORG   ASMEPTS+60
ASMFPTS  DS    CL52
         ORG   ASMFPTS
@NM01014 DS    CL8
         ORG   @NM01014
@NM01015 DC    B'00000011'
@NM01016 DC    AL1(16*4-16)
@NM01017 DC    AL1(0)
@NM01018 DC    AL1(0)
@NM01019 DC    AL4(ASMFLB1)
         ORG   ASMFPTS+8
@NM01020 DS    CL4
         ORG   @NM01020
@NM01021 DC    B'00000100'
@NM01022 DC    AL1(16*0+4-1)
@NM01023 DC    AL1(0)
@NM01024 DC    AL1(15)
         ORG   ASMFPTS+12
@NM01025 DS    CL4
         ORG   @NM01025
@NM01026 DC    B'00000100'
@NM01027 DC    AL1(16*0+4-1)
@NM01028 DC    AL1(0)
@NM01029 DC    AL1(25)
         ORG   ASMFPTS+16
@NM01030 DS    CL4
         ORG   @NM01030
@NM01031 DC    B'00000100'
@NM01032 DC    AL1(16*0+4-1)
@NM01033 DC    AL1(0)
@NM01034 DC    AL1(35)
         ORG   ASMFPTS+20
@NM01035 DS    CL4
         ORG   @NM01035
@NM01036 DC    B'00000100'
@NM01037 DC    AL1(16*0+4-1)
@NM01038 DC    AL1(0)
@NM01039 DC    AL1(45)
         ORG   ASMFPTS+24
@NM01040 DS    CL4
         ORG   @NM01040
@NM01041 DC    B'00000100'
@NM01042 DC    AL1(16*0+4-1)
@NM01043 DC    AL1(0)
@NM01044 DC    AL1(55)
         ORG   ASMFPTS+28
@NM01045 DS    CL4
         ORG   @NM01045
@NM01046 DC    B'00000100'
@NM01047 DC    AL1(16*0+4-1)
@NM01048 DC    AL1(0)
@NM01049 DC    AL1(65)
         ORG   ASMFPTS+32
@NM01050 DS    CL4
         ORG   @NM01050
@NM01051 DC    B'00000100'
@NM01052 DC    AL1(16*0+4-1)
@NM01053 DC    AL1(0)
@NM01054 DC    AL1(75)
         ORG   ASMFPTS+36
@NM01055 DS    CL4
         ORG   @NM01055
@NM01056 DC    B'00000100'
@NM01057 DC    AL1(16*0+4-1)
@NM01058 DC    AL1(0)
@NM01059 DC    AL1(85)
         ORG   ASMFPTS+40
@NM01060 DS    CL4
         ORG   @NM01060
@NM01061 DC    B'00000100'
@NM01062 DC    AL1(16*0+4-1)
@NM01063 DC    AL1(0)
@NM01064 DC    AL1(95)
         ORG   ASMFPTS+44
@NM01065 DS    CL4
         ORG   @NM01065
@NM01066 DC    B'00000100'
@NM01067 DC    AL1(16*0+4-1)
@NM01068 DC    AL1(0)
@NM01069 DC    AL1(105)
         ORG   ASMFPTS+48
@NM01070 DC    F'0'
         ORG   ASMFPTS+52
ASMGPTS  DS    CL60
         ORG   ASMGPTS
@NM01071 DS    CL8
         ORG   @NM01071
@NM01072 DC    B'00000011'
@NM01073 DC    AL1(16*4-16)
@NM01074 DC    AL1(0)
@NM01075 DC    AL1(0)
@NM01076 DC    AL4(ASMGLB1)
         ORG   ASMGPTS+8
@NM01077 DS    CL8
         ORG   @NM01077
@NM01078 DC    B'00000011'
@NM01079 DC    AL1(16*9-16)
@NM01080 DC    AL1(5)
@NM01081 DC    AL1(0)
@NM01082 DC    AL4(ASMGLB2)
         ORG   ASMGPTS+16
@NM01083 DS    CL4
         ORG   @NM01083
@NM01084 DC    B'00000100'
@NM01085 DC    AL1(16*0+4-1)
@NM01086 DC    AL1(0)
@NM01087 DC    AL1(15)
         ORG   ASMGPTS+20
@NM01088 DS    CL4
         ORG   @NM01088
@NM01089 DC    B'00000100'
@NM01090 DC    AL1(16*0+4-1)
@NM01091 DC    AL1(0)
@NM01092 DC    AL1(25)
         ORG   ASMGPTS+24
@NM01093 DS    CL4
         ORG   @NM01093
@NM01094 DC    B'00000100'
@NM01095 DC    AL1(16*0+4-1)
@NM01096 DC    AL1(0)
@NM01097 DC    AL1(35)
         ORG   ASMGPTS+28
@NM01098 DS    CL4
         ORG   @NM01098
@NM01099 DC    B'00000100'
@NM01100 DC    AL1(16*0+4-1)
@NM01101 DC    AL1(0)
@NM01102 DC    AL1(45)
         ORG   ASMGPTS+32
@NM01103 DS    CL4
         ORG   @NM01103
@NM01104 DC    B'00000100'
@NM01105 DC    AL1(16*0+4-1)
@NM01106 DC    AL1(0)
@NM01107 DC    AL1(55)
         ORG   ASMGPTS+36
@NM01108 DS    CL4
         ORG   @NM01108
@NM01109 DC    B'00000100'
@NM01110 DC    AL1(16*0+4-1)
@NM01111 DC    AL1(0)
@NM01112 DC    AL1(65)
         ORG   ASMGPTS+40
@NM01113 DS    CL4
         ORG   @NM01113
@NM01114 DC    B'00000100'
@NM01115 DC    AL1(16*0+4-1)
@NM01116 DC    AL1(0)
@NM01117 DC    AL1(75)
         ORG   ASMGPTS+44
@NM01118 DS    CL4
         ORG   @NM01118
@NM01119 DC    B'00000100'
@NM01120 DC    AL1(16*0+4-1)
@NM01121 DC    AL1(0)
@NM01122 DC    AL1(85)
         ORG   ASMGPTS+48
@NM01123 DS    CL4
         ORG   @NM01123
@NM01124 DC    B'00000100'
@NM01125 DC    AL1(16*0+4-1)
@NM01126 DC    AL1(0)
@NM01127 DC    AL1(95)
         ORG   ASMGPTS+52
@NM01128 DS    CL4
         ORG   @NM01128
@NM01129 DC    B'00000100'
@NM01130 DC    AL1(16*0+4-1)
@NM01131 DC    AL1(0)
@NM01132 DC    AL1(105)
         ORG   ASMGPTS+56
@NM01133 DC    F'0'
         ORG   ASMGPTS+60
ASMHPTS  DS    CL52
         ORG   ASMHPTS
@NM01134 DS    CL8
         ORG   @NM01134
@NM01135 DC    B'00000011'
@NM01136 DC    AL1(16*4-16)
@NM01137 DC    AL1(0)
@NM01138 DC    AL1(0)
@NM01139 DC    AL4(ASMHLB1)
         ORG   ASMHPTS+8
@NM01140 DS    CL4
         ORG   @NM01140
@NM01141 DC    B'00000100'
@NM01142 DC    AL1(16*0+4-1)
@NM01143 DC    AL1(0)
@NM01144 DC    AL1(15)
         ORG   ASMHPTS+12
@NM01145 DS    CL4
         ORG   @NM01145
@NM01146 DC    B'00000100'
@NM01147 DC    AL1(16*0+4-1)
@NM01148 DC    AL1(0)
@NM01149 DC    AL1(25)
         ORG   ASMHPTS+16
@NM01150 DS    CL4
         ORG   @NM01150
@NM01151 DC    B'00000100'
@NM01152 DC    AL1(16*0+4-1)
@NM01153 DC    AL1(0)
@NM01154 DC    AL1(35)
         ORG   ASMHPTS+20
@NM01155 DS    CL4
         ORG   @NM01155
@NM01156 DC    B'00000100'
@NM01157 DC    AL1(16*0+4-1)
@NM01158 DC    AL1(0)
@NM01159 DC    AL1(45)
         ORG   ASMHPTS+24
@NM01160 DS    CL4
         ORG   @NM01160
@NM01161 DC    B'00000100'
@NM01162 DC    AL1(16*0+4-1)
@NM01163 DC    AL1(0)
@NM01164 DC    AL1(55)
         ORG   ASMHPTS+28
@NM01165 DS    CL4
         ORG   @NM01165
@NM01166 DC    B'00000100'
@NM01167 DC    AL1(16*0+4-1)
@NM01168 DC    AL1(0)
@NM01169 DC    AL1(65)
         ORG   ASMHPTS+32
@NM01170 DS    CL4
         ORG   @NM01170
@NM01171 DC    B'00000100'
@NM01172 DC    AL1(16*0+4-1)
@NM01173 DC    AL1(0)
@NM01174 DC    AL1(75)
         ORG   ASMHPTS+36
@NM01175 DS    CL4
         ORG   @NM01175
@NM01176 DC    B'00000100'
@NM01177 DC    AL1(16*0+4-1)
@NM01178 DC    AL1(0)
@NM01179 DC    AL1(85)
         ORG   ASMHPTS+40
@NM01180 DS    CL4
         ORG   @NM01180
@NM01181 DC    B'00000100'
@NM01182 DC    AL1(16*0+4-1)
@NM01183 DC    AL1(0)
@NM01184 DC    AL1(95)
         ORG   ASMHPTS+44
@NM01185 DS    CL4
         ORG   @NM01185
@NM01186 DC    B'00000100'
@NM01187 DC    AL1(16*0+4-1)
@NM01188 DC    AL1(0)
@NM01189 DC    AL1(105)
         ORG   ASMHPTS+48
@NM01190 DC    F'0'
         ORG   ASMHPTS+52
ASMIPTS  DS    CL60
         ORG   ASMIPTS
@NM01191 DS    CL8
         ORG   @NM01191
@NM01192 DC    B'00000011'
@NM01193 DC    AL1(16*4-16)
@NM01194 DC    AL1(0)
@NM01195 DC    AL1(0)
@NM01196 DC    AL4(ASMILB1)
         ORG   ASMIPTS+8
@NM01197 DS    CL8
         ORG   @NM01197
@NM01198 DC    B'00000011'
@NM01199 DC    AL1(16*9-16)
@NM01200 DC    AL1(5)
@NM01201 DC    AL1(0)
@NM01202 DC    AL4(ASMILB2)
         ORG   ASMIPTS+16
@NM01203 DS    CL4
         ORG   @NM01203
@NM01204 DC    B'00000100'
@NM01205 DC    AL1(16*0+4-1)
@NM01206 DC    AL1(0)
@NM01207 DC    AL1(15)
         ORG   ASMIPTS+20
@NM01208 DS    CL4
         ORG   @NM01208
@NM01209 DC    B'00000100'
@NM01210 DC    AL1(16*0+4-1)
@NM01211 DC    AL1(0)
@NM01212 DC    AL1(25)
         ORG   ASMIPTS+24
@NM01213 DS    CL4
         ORG   @NM01213
@NM01214 DC    B'00000100'
@NM01215 DC    AL1(16*0+4-1)
@NM01216 DC    AL1(0)
@NM01217 DC    AL1(35)
         ORG   ASMIPTS+28
@NM01218 DS    CL4
         ORG   @NM01218
@NM01219 DC    B'00000100'
@NM01220 DC    AL1(16*0+4-1)
@NM01221 DC    AL1(0)
@NM01222 DC    AL1(45)
         ORG   ASMIPTS+32
@NM01223 DS    CL4
         ORG   @NM01223
@NM01224 DC    B'00000100'
@NM01225 DC    AL1(16*0+4-1)
@NM01226 DC    AL1(0)
@NM01227 DC    AL1(55)
         ORG   ASMIPTS+36
@NM01228 DS    CL4
         ORG   @NM01228
@NM01229 DC    B'00000100'
@NM01230 DC    AL1(16*0+4-1)
@NM01231 DC    AL1(0)
@NM01232 DC    AL1(65)
         ORG   ASMIPTS+40
@NM01233 DS    CL4
         ORG   @NM01233
@NM01234 DC    B'00000100'
@NM01235 DC    AL1(16*0+4-1)
@NM01236 DC    AL1(0)
@NM01237 DC    AL1(75)
         ORG   ASMIPTS+44
@NM01238 DS    CL4
         ORG   @NM01238
@NM01239 DC    B'00000100'
@NM01240 DC    AL1(16*0+4-1)
@NM01241 DC    AL1(0)
@NM01242 DC    AL1(85)
         ORG   ASMIPTS+48
@NM01243 DS    CL4
         ORG   @NM01243
@NM01244 DC    B'00000100'
@NM01245 DC    AL1(16*0+4-1)
@NM01246 DC    AL1(0)
@NM01247 DC    AL1(95)
         ORG   ASMIPTS+52
@NM01248 DS    CL4
         ORG   @NM01248
@NM01249 DC    B'00000100'
@NM01250 DC    AL1(16*0+4-1)
@NM01251 DC    AL1(0)
@NM01252 DC    AL1(105)
         ORG   ASMIPTS+56
@NM01253 DC    F'0'
         ORG   ASMIPTS+60
ASMJPTS  DS    CL52
         ORG   ASMJPTS
@NM01254 DS    CL8
         ORG   @NM01254
@NM01255 DC    B'00000011'
@NM01256 DC    AL1(16*4-16)
@NM01257 DC    AL1(0)
@NM01258 DC    AL1(0)
@NM01259 DC    AL4(ASMJLB1)
         ORG   ASMJPTS+8
@NM01260 DS    CL4
         ORG   @NM01260
@NM01261 DC    B'00000100'
@NM01262 DC    AL1(16*0+4-1)
@NM01263 DC    AL1(0)
@NM01264 DC    AL1(15)
         ORG   ASMJPTS+12
@NM01265 DS    CL4
         ORG   @NM01265
@NM01266 DC    B'00000100'
@NM01267 DC    AL1(16*0+4-1)
@NM01268 DC    AL1(0)
@NM01269 DC    AL1(25)
         ORG   ASMJPTS+16
@NM01270 DS    CL4
         ORG   @NM01270
@NM01271 DC    B'00000100'
@NM01272 DC    AL1(16*0+4-1)
@NM01273 DC    AL1(0)
@NM01274 DC    AL1(35)
         ORG   ASMJPTS+20
@NM01275 DS    CL4
         ORG   @NM01275
@NM01276 DC    B'00000100'
@NM01277 DC    AL1(16*0+4-1)
@NM01278 DC    AL1(0)
@NM01279 DC    AL1(45)
         ORG   ASMJPTS+24
@NM01280 DS    CL4
         ORG   @NM01280
@NM01281 DC    B'00000100'
@NM01282 DC    AL1(16*0+4-1)
@NM01283 DC    AL1(0)
@NM01284 DC    AL1(55)
         ORG   ASMJPTS+28
@NM01285 DS    CL4
         ORG   @NM01285
@NM01286 DC    B'00000100'
@NM01287 DC    AL1(16*0+4-1)
@NM01288 DC    AL1(0)
@NM01289 DC    AL1(65)
         ORG   ASMJPTS+32
@NM01290 DS    CL4
         ORG   @NM01290
@NM01291 DC    B'00000100'
@NM01292 DC    AL1(16*0+4-1)
@NM01293 DC    AL1(0)
@NM01294 DC    AL1(75)
         ORG   ASMJPTS+36
@NM01295 DS    CL4
         ORG   @NM01295
@NM01296 DC    B'00000100'
@NM01297 DC    AL1(16*0+4-1)
@NM01298 DC    AL1(0)
@NM01299 DC    AL1(85)
         ORG   ASMJPTS+40
@NM01300 DS    CL4
         ORG   @NM01300
@NM01301 DC    B'00000100'
@NM01302 DC    AL1(16*0+4-1)
@NM01303 DC    AL1(0)
@NM01304 DC    AL1(95)
         ORG   ASMJPTS+44
@NM01305 DS    CL4
         ORG   @NM01305
@NM01306 DC    B'00000100'
@NM01307 DC    AL1(16*0+4-1)
@NM01308 DC    AL1(0)
@NM01309 DC    AL1(105)
         ORG   ASMJPTS+48
@NM01310 DC    F'0'
         ORG   ASMJPTS+52
ASMKPTS  DS    CL60
         ORG   ASMKPTS
@NM01311 DS    CL8
         ORG   @NM01311
@NM01312 DC    B'00000011'
@NM01313 DC    AL1(16*4-16)
@NM01314 DC    AL1(0)
@NM01315 DC    AL1(0)
@NM01316 DC    AL4(ASMKLB1)
         ORG   ASMKPTS+8
@NM01317 DS    CL8
         ORG   @NM01317
@NM01318 DC    B'00000011'
@NM01319 DC    AL1(16*9-16)
@NM01320 DC    AL1(5)
@NM01321 DC    AL1(0)
@NM01322 DC    AL4(ASMKLB2)
         ORG   ASMKPTS+16
@NM01323 DS    CL4
         ORG   @NM01323
@NM01324 DC    B'00000100'
@NM01325 DC    AL1(16*0+4-1)
@NM01326 DC    AL1(0)
@NM01327 DC    AL1(15)
         ORG   ASMKPTS+20
@NM01328 DS    CL4
         ORG   @NM01328
@NM01329 DC    B'00000100'
@NM01330 DC    AL1(16*0+4-1)
@NM01331 DC    AL1(0)
@NM01332 DC    AL1(25)
         ORG   ASMKPTS+24
@NM01333 DS    CL4
         ORG   @NM01333
@NM01334 DC    B'00000100'
@NM01335 DC    AL1(16*0+4-1)
@NM01336 DC    AL1(0)
@NM01337 DC    AL1(35)
         ORG   ASMKPTS+28
@NM01338 DS    CL4
         ORG   @NM01338
@NM01339 DC    B'00000100'
@NM01340 DC    AL1(16*0+4-1)
@NM01341 DC    AL1(0)
@NM01342 DC    AL1(45)
         ORG   ASMKPTS+32
@NM01343 DS    CL4
         ORG   @NM01343
@NM01344 DC    B'00000100'
@NM01345 DC    AL1(16*0+4-1)
@NM01346 DC    AL1(0)
@NM01347 DC    AL1(55)
         ORG   ASMKPTS+36
@NM01348 DS    CL4
         ORG   @NM01348
@NM01349 DC    B'00000100'
@NM01350 DC    AL1(16*0+4-1)
@NM01351 DC    AL1(0)
@NM01352 DC    AL1(65)
         ORG   ASMKPTS+40
@NM01353 DS    CL4
         ORG   @NM01353
@NM01354 DC    B'00000100'
@NM01355 DC    AL1(16*0+4-1)
@NM01356 DC    AL1(0)
@NM01357 DC    AL1(75)
         ORG   ASMKPTS+44
@NM01358 DS    CL4
         ORG   @NM01358
@NM01359 DC    B'00000100'
@NM01360 DC    AL1(16*0+4-1)
@NM01361 DC    AL1(0)
@NM01362 DC    AL1(85)
         ORG   ASMKPTS+48
@NM01363 DS    CL4
         ORG   @NM01363
@NM01364 DC    B'00000100'
@NM01365 DC    AL1(16*0+4-1)
@NM01366 DC    AL1(0)
@NM01367 DC    AL1(95)
         ORG   ASMKPTS+52
@NM01368 DS    CL4
         ORG   @NM01368
@NM01369 DC    B'00000100'
@NM01370 DC    AL1(16*0+4-1)
@NM01371 DC    AL1(0)
@NM01372 DC    AL1(105)
         ORG   ASMKPTS+56
@NM01373 DC    F'0'
         ORG   ASMKPTS+60
ASMLPTS  DS    CL52
         ORG   ASMLPTS
@NM01374 DS    CL8
         ORG   @NM01374
@NM01375 DC    B'00000011'
@NM01376 DC    AL1(16*4-16)
@NM01377 DC    AL1(0)
@NM01378 DC    AL1(0)
@NM01379 DC    AL4(ASMLLB1)
         ORG   ASMLPTS+8
@NM01380 DS    CL4
         ORG   @NM01380
@NM01381 DC    B'00000100'
@NM01382 DC    AL1(16*0+4-1)
@NM01383 DC    AL1(0)
@NM01384 DC    AL1(15)
         ORG   ASMLPTS+12
@NM01385 DS    CL4
         ORG   @NM01385
@NM01386 DC    B'00000100'
@NM01387 DC    AL1(16*0+4-1)
@NM01388 DC    AL1(0)
@NM01389 DC    AL1(25)
         ORG   ASMLPTS+16
@NM01390 DS    CL4
         ORG   @NM01390
@NM01391 DC    B'00000100'
@NM01392 DC    AL1(16*0+4-1)
@NM01393 DC    AL1(0)
@NM01394 DC    AL1(35)
         ORG   ASMLPTS+20
@NM01395 DS    CL4
         ORG   @NM01395
@NM01396 DC    B'00000100'
@NM01397 DC    AL1(16*0+4-1)
@NM01398 DC    AL1(0)
@NM01399 DC    AL1(45)
         ORG   ASMLPTS+24
@NM01400 DS    CL4
         ORG   @NM01400
@NM01401 DC    B'00000100'
@NM01402 DC    AL1(16*0+4-1)
@NM01403 DC    AL1(0)
@NM01404 DC    AL1(55)
         ORG   ASMLPTS+28
@NM01405 DS    CL4
         ORG   @NM01405
@NM01406 DC    B'00000100'
@NM01407 DC    AL1(16*0+4-1)
@NM01408 DC    AL1(0)
@NM01409 DC    AL1(65)
         ORG   ASMLPTS+32
@NM01410 DS    CL4
         ORG   @NM01410
@NM01411 DC    B'00000100'
@NM01412 DC    AL1(16*0+4-1)
@NM01413 DC    AL1(0)
@NM01414 DC    AL1(75)
         ORG   ASMLPTS+36
@NM01415 DS    CL4
         ORG   @NM01415
@NM01416 DC    B'00000100'
@NM01417 DC    AL1(16*0+4-1)
@NM01418 DC    AL1(0)
@NM01419 DC    AL1(85)
         ORG   ASMLPTS+40
@NM01420 DS    CL4
         ORG   @NM01420
@NM01421 DC    B'00000100'
@NM01422 DC    AL1(16*0+4-1)
@NM01423 DC    AL1(0)
@NM01424 DC    AL1(95)
         ORG   ASMLPTS+44
@NM01425 DS    CL4
         ORG   @NM01425
@NM01426 DC    B'00000100'
@NM01427 DC    AL1(16*0+4-1)
@NM01428 DC    AL1(0)
@NM01429 DC    AL1(105)
         ORG   ASMLPTS+48
@NM01430 DC    F'0'
         ORG   ASMLPTS+52
ASMMPTS  DS    CL60
         ORG   ASMMPTS
@NM01431 DS    CL8
         ORG   @NM01431
@NM01432 DC    B'00000011'
@NM01433 DC    AL1(16*4-16)
@NM01434 DC    AL1(0)
@NM01435 DC    AL1(0)
@NM01436 DC    AL4(ASMMLB1)
         ORG   ASMMPTS+8
@NM01437 DS    CL8
         ORG   @NM01437
@NM01438 DC    B'00000011'
@NM01439 DC    AL1(16*9-16)
@NM01440 DC    AL1(5)
@NM01441 DC    AL1(0)
@NM01442 DC    AL4(ASMMLB2)
         ORG   ASMMPTS+16
@NM01443 DS    CL4
         ORG   @NM01443
@NM01444 DC    B'00000100'
@NM01445 DC    AL1(16*0+4-1)
@NM01446 DC    AL1(0)
@NM01447 DC    AL1(15)
         ORG   ASMMPTS+20
@NM01448 DS    CL4
         ORG   @NM01448
@NM01449 DC    B'00000100'
@NM01450 DC    AL1(16*0+4-1)
@NM01451 DC    AL1(0)
@NM01452 DC    AL1(25)
         ORG   ASMMPTS+24
@NM01453 DS    CL4
         ORG   @NM01453
@NM01454 DC    B'00000100'
@NM01455 DC    AL1(16*0+4-1)
@NM01456 DC    AL1(0)
@NM01457 DC    AL1(35)
         ORG   ASMMPTS+28
@NM01458 DS    CL4
         ORG   @NM01458
@NM01459 DC    B'00000100'
@NM01460 DC    AL1(16*0+4-1)
@NM01461 DC    AL1(0)
@NM01462 DC    AL1(45)
         ORG   ASMMPTS+32
@NM01463 DS    CL4
         ORG   @NM01463
@NM01464 DC    B'00000100'
@NM01465 DC    AL1(16*0+4-1)
@NM01466 DC    AL1(0)
@NM01467 DC    AL1(55)
         ORG   ASMMPTS+36
@NM01468 DS    CL4
         ORG   @NM01468
@NM01469 DC    B'00000100'
@NM01470 DC    AL1(16*0+4-1)
@NM01471 DC    AL1(0)
@NM01472 DC    AL1(65)
         ORG   ASMMPTS+40
@NM01473 DS    CL4
         ORG   @NM01473
@NM01474 DC    B'00000100'
@NM01475 DC    AL1(16*0+4-1)
@NM01476 DC    AL1(0)
@NM01477 DC    AL1(75)
         ORG   ASMMPTS+44
@NM01478 DS    CL4
         ORG   @NM01478
@NM01479 DC    B'00000100'
@NM01480 DC    AL1(16*0+4-1)
@NM01481 DC    AL1(0)
@NM01482 DC    AL1(85)
         ORG   ASMMPTS+48
@NM01483 DS    CL4
         ORG   @NM01483
@NM01484 DC    B'00000100'
@NM01485 DC    AL1(16*0+4-1)
@NM01486 DC    AL1(0)
@NM01487 DC    AL1(95)
         ORG   ASMMPTS+52
@NM01488 DS    CL4
         ORG   @NM01488
@NM01489 DC    B'00000100'
@NM01490 DC    AL1(16*0+4-1)
@NM01491 DC    AL1(0)
@NM01492 DC    AL1(105)
         ORG   ASMMPTS+56
@NM01493 DC    F'0'
         ORG   ASMMPTS+60
ASMNPTS  DS    CL52
         ORG   ASMNPTS
@NM01494 DS    CL8
         ORG   @NM01494
@NM01495 DC    B'00000011'
@NM01496 DC    AL1(16*4-16)
@NM01497 DC    AL1(0)
@NM01498 DC    AL1(0)
@NM01499 DC    AL4(ASMNLB1)
         ORG   ASMNPTS+8
@NM01500 DS    CL4
         ORG   @NM01500
@NM01501 DC    B'00000100'
@NM01502 DC    AL1(16*0+4-1)
@NM01503 DC    AL1(0)
@NM01504 DC    AL1(15)
         ORG   ASMNPTS+12
@NM01505 DS    CL4
         ORG   @NM01505
@NM01506 DC    B'00000100'
@NM01507 DC    AL1(16*0+4-1)
@NM01508 DC    AL1(0)
@NM01509 DC    AL1(25)
         ORG   ASMNPTS+16
@NM01510 DS    CL4
         ORG   @NM01510
@NM01511 DC    B'00000100'
@NM01512 DC    AL1(16*0+4-1)
@NM01513 DC    AL1(0)
@NM01514 DC    AL1(35)
         ORG   ASMNPTS+20
@NM01515 DS    CL4
         ORG   @NM01515
@NM01516 DC    B'00000100'
@NM01517 DC    AL1(16*0+4-1)
@NM01518 DC    AL1(0)
@NM01519 DC    AL1(45)
         ORG   ASMNPTS+24
@NM01520 DS    CL4
         ORG   @NM01520
@NM01521 DC    B'00000100'
@NM01522 DC    AL1(16*0+4-1)
@NM01523 DC    AL1(0)
@NM01524 DC    AL1(55)
         ORG   ASMNPTS+28
@NM01525 DS    CL4
         ORG   @NM01525
@NM01526 DC    B'00000100'
@NM01527 DC    AL1(16*0+4-1)
@NM01528 DC    AL1(0)
@NM01529 DC    AL1(65)
         ORG   ASMNPTS+32
@NM01530 DS    CL4
         ORG   @NM01530
@NM01531 DC    B'00000100'
@NM01532 DC    AL1(16*0+4-1)
@NM01533 DC    AL1(0)
@NM01534 DC    AL1(75)
         ORG   ASMNPTS+36
@NM01535 DS    CL4
         ORG   @NM01535
@NM01536 DC    B'00000100'
@NM01537 DC    AL1(16*0+4-1)
@NM01538 DC    AL1(0)
@NM01539 DC    AL1(85)
         ORG   ASMNPTS+40
@NM01540 DS    CL4
         ORG   @NM01540
@NM01541 DC    B'00000100'
@NM01542 DC    AL1(16*0+4-1)
@NM01543 DC    AL1(0)
@NM01544 DC    AL1(95)
         ORG   ASMNPTS+44
@NM01545 DS    CL4
         ORG   @NM01545
@NM01546 DC    B'00000100'
@NM01547 DC    AL1(16*0+4-1)
@NM01548 DC    AL1(0)
@NM01549 DC    AL1(105)
         ORG   ASMNPTS+48
@NM01550 DC    F'0'
         ORG   ASMNPTS+52
ASMOPTS  DS    CL56
         ORG   ASMOPTS
@NM01551 DS    CL8
         ORG   @NM01551
@NM01552 DC    B'00000011'
@NM01553 DC    AL1(16*4-16)
@NM01554 DC    AL1(0)
@NM01555 DC    AL1(0)
@NM01556 DC    AL4(ASMOLB1)
         ORG   ASMOPTS+8
@NM01557 DS    CL8
         ORG   @NM01557
@NM01558 DC    B'00000011'
@NM01559 DC    AL1(16*9-16)
@NM01560 DC    AL1(5)
@NM01561 DC    AL1(0)
@NM01562 DC    AL4(ASMOLB2)
         ORG   ASMOPTS+16
@NM01563 DS    CL4
         ORG   @NM01563
@NM01564 DC    B'00000100'
@NM01565 DC    AL1(16*0+4-1)
@NM01566 DC    AL1(0)
@NM01567 DC    AL1(15)
         ORG   ASMOPTS+20
@NM01568 DS    CL4
         ORG   @NM01568
@NM01569 DC    B'00000100'
@NM01570 DC    AL1(16*0+4-1)
@NM01571 DC    AL1(0)
@NM01572 DC    AL1(25)
         ORG   ASMOPTS+24
@NM01573 DS    CL4
         ORG   @NM01573
@NM01574 DC    B'00000100'
@NM01575 DC    AL1(16*0+4-1)
@NM01576 DC    AL1(0)
@NM01577 DC    AL1(35)
         ORG   ASMOPTS+28
@NM01578 DS    CL4
         ORG   @NM01578
@NM01579 DC    B'00000100'
@NM01580 DC    AL1(16*0+4-1)
@NM01581 DC    AL1(0)
@NM01582 DC    AL1(45)
         ORG   ASMOPTS+32
@NM01583 DS    CL4
         ORG   @NM01583
@NM01584 DC    B'00000100'
@NM01585 DC    AL1(16*0+4-1)
@NM01586 DC    AL1(0)
@NM01587 DC    AL1(55)
         ORG   ASMOPTS+36
@NM01588 DS    CL4
         ORG   @NM01588
@NM01589 DC    B'00000100'
@NM01590 DC    AL1(16*0+4-1)
@NM01591 DC    AL1(0)
@NM01592 DC    AL1(65)
         ORG   ASMOPTS+40
@NM01593 DS    CL4
         ORG   @NM01593
@NM01594 DC    B'00000100'
@NM01595 DC    AL1(16*0+4-1)
@NM01596 DC    AL1(0)
@NM01597 DC    AL1(75)
         ORG   ASMOPTS+44
@NM01598 DS    CL4
         ORG   @NM01598
@NM01599 DC    B'00000100'
@NM01600 DC    AL1(16*0+4-1)
@NM01601 DC    AL1(0)
@NM01602 DC    AL1(85)
         ORG   ASMOPTS+48
@NM01603 DS    CL4
         ORG   @NM01603
@NM01604 DC    B'00000100'
@NM01605 DC    AL1(16*0+4-1)
@NM01606 DC    AL1(0)
@NM01607 DC    AL1(95)
         ORG   ASMOPTS+52
@NM01608 DC    F'0'
         ORG   ASMOPTS+56
ASMPPTS  DS    CL48
         ORG   ASMPPTS
@NM01609 DS    CL8
         ORG   @NM01609
@NM01610 DC    B'00000011'
@NM01611 DC    AL1(16*4-16)
@NM01612 DC    AL1(0)
@NM01613 DC    AL1(0)
@NM01614 DC    AL4(ASMPLB1)
         ORG   ASMPPTS+8
@NM01615 DS    CL4
         ORG   @NM01615
@NM01616 DC    B'00000100'
@NM01617 DC    AL1(16*0+4-1)
@NM01618 DC    AL1(0)
@NM01619 DC    AL1(15)
         ORG   ASMPPTS+12
@NM01620 DS    CL4
         ORG   @NM01620
@NM01621 DC    B'00000100'
@NM01622 DC    AL1(16*0+4-1)
@NM01623 DC    AL1(0)
@NM01624 DC    AL1(25)
         ORG   ASMPPTS+16
@NM01625 DS    CL4
         ORG   @NM01625
@NM01626 DC    B'00000100'
@NM01627 DC    AL1(16*0+4-1)
@NM01628 DC    AL1(0)
@NM01629 DC    AL1(35)
         ORG   ASMPPTS+20
@NM01630 DS    CL4
         ORG   @NM01630
@NM01631 DC    B'00000100'
@NM01632 DC    AL1(16*0+4-1)
@NM01633 DC    AL1(0)
@NM01634 DC    AL1(45)
         ORG   ASMPPTS+24
@NM01635 DS    CL4
         ORG   @NM01635
@NM01636 DC    B'00000100'
@NM01637 DC    AL1(16*0+4-1)
@NM01638 DC    AL1(0)
@NM01639 DC    AL1(55)
         ORG   ASMPPTS+28
@NM01640 DS    CL4
         ORG   @NM01640
@NM01641 DC    B'00000100'
@NM01642 DC    AL1(16*0+4-1)
@NM01643 DC    AL1(0)
@NM01644 DC    AL1(65)
         ORG   ASMPPTS+32
@NM01645 DS    CL4
         ORG   @NM01645
@NM01646 DC    B'00000100'
@NM01647 DC    AL1(16*0+4-1)
@NM01648 DC    AL1(0)
@NM01649 DC    AL1(75)
         ORG   ASMPPTS+36
@NM01650 DS    CL4
         ORG   @NM01650
@NM01651 DC    B'00000100'
@NM01652 DC    AL1(16*0+4-1)
@NM01653 DC    AL1(0)
@NM01654 DC    AL1(85)
         ORG   ASMPPTS+40
@NM01655 DS    CL4
         ORG   @NM01655
@NM01656 DC    B'00000100'
@NM01657 DC    AL1(16*0+4-1)
@NM01658 DC    AL1(0)
@NM01659 DC    AL1(95)
         ORG   ASMPPTS+44
@NM01660 DC    F'0'
         ORG   ASMPPTS+48
ASMQPTS  DS    CL32
         ORG   ASMQPTS
@NM01661 DS    CL8
         ORG   @NM01661
@NM01662 DC    B'00000011'
@NM01663 DC    AL1(16*4-16)
@NM01664 DC    AL1(0)
@NM01665 DC    AL1(0)
@NM01666 DC    AL4(ASMQLB1)
         ORG   ASMQPTS+8
@NM01667 DS    CL4
         ORG   @NM01667
@NM01668 DC    B'00000100'
@NM01669 DC    AL1(16*0+4-1)
@NM01670 DC    AL1(0)
@NM01671 DC    AL1(15)
         ORG   ASMQPTS+12
@NM01672 DS    CL4
         ORG   @NM01672
@NM01673 DC    B'00000100'
@NM01674 DC    AL1(16*0+4-1)
@NM01675 DC    AL1(0)
@NM01676 DC    AL1(25)
         ORG   ASMQPTS+16
@NM01677 DS    CL4
         ORG   @NM01677
@NM01678 DC    B'00000100'
@NM01679 DC    AL1(16*0+4-1)
@NM01680 DC    AL1(0)
@NM01681 DC    AL1(35)
         ORG   ASMQPTS+20
@NM01682 DS    CL4
         ORG   @NM01682
@NM01683 DC    B'00000100'
@NM01684 DC    AL1(16*0+4-1)
@NM01685 DC    AL1(0)
@NM01686 DC    AL1(45)
         ORG   ASMQPTS+24
@NM01687 DS    CL4
         ORG   @NM01687
@NM01688 DC    B'00000100'
@NM01689 DC    AL1(16*0+4-1)
@NM01690 DC    AL1(0)
@NM01691 DC    AL1(55)
         ORG   ASMQPTS+28
@NM01692 DC    F'0'
         ORG   ASMQPTS+32
FMTPATCH DC    X'00'
         DC    XL199'0'
ASM1LB1  DC    CL4'+  0'
ASM1LB2  DC    CL5'FLAG1'
@NM00029 DC    CL5'FLAG2'
@NM00030 DC    CL5'DSSFS'
@NM00031 DC    CL4'SART'
@NM00032 DC    CL4'PART'
@NM00033 DC    CL3'GOS'
ASM2LB1  DC    CL4'+ 10'
ASM2LB2  DC    CL5'TRPAG'
@NM00072 DC    CL4'EREC'
@NM00073 DC    CL5'MSGBF'
@NM00074 DC    CL4'RSV5'
@NM00075 DC    CL5'STAGF'
@NM00076 DC    CL5'STAGL'
ASM3LB1  DC    CL4'+ 28'
ASM3LB2  DC    CL5'IORQR'
@NM00115 DC    CL5'IORQC'
@NM00116 DC    CL4'RSV6'
ASM4LB1  DC    CL4'+ 40'
ASM4LB2  DC    CL5'PCCWA'
@NM00155 DC    CL5'PCCWC'
@NM00156 DC    CL5'PCCWN'
@NM00157 DC    CL5'BURST'
@NM00158 DC    CL5'IOCNT'
@NM00159 DC    CL5'SRBCT'
ASM5LB1  DC    CL4'+ 58'
ASM5LB2  DC    CL4'PSRB'
@NM00198 DC    CL4'RSV7'
@NM00199 DC    CL5'BKSLT'
ASM6LB1  DC    CL4'+ 70'
ASM6LB2  DC    CL5'SLOTS'
@NM00238 DC    CL3'VSC'
@NM00239 DC    CL4'NVSC'
@NM00240 DC    CL4'ERRS'
@NM00241 DC    CL5'SLOTV'
@NM00242 DC    CL4'LGVT'
ASM7LB1  DC    CL4'+ 88'
ASM7LB2  DC    CL5'STGXA'
@NM00281 DC    CL4'CINV'
@NM00282 DC    CL5'LSAIL'
@NM00283 DC    CL5'LSAIH'
@NM00284 DC    CL5'GOSWT'
@NM00285 DC    CL5'GOSWK'
ASM8LB1  DC    CL4'+ A0'
ASM8LB2  DC    CL5'REQCT'
@NM00324 DC    CL5'TCBPT'
@NM00325 DC    CL5'TMECB'
@NM00326 DC    CL5'RLGRQ'
@NM00327 DC    CL5'RLGWQ'
@NM00328 DC    CL5'TASCB'
ASM9LB1  DC    CL4'+ B8'
ASM9LB2  DC    CL4'RSV8'
@NM00367 DC    CL5'PQIOE'
@NM00368 DC    CL5'PFRSL'
@NM00369 DC    CL5'PFRSW'
@NM00370 DC    CL3'PTM'
ASM10LB1 DC    CL4'+ D0'
ASM10LB2 DC    CL5'PSWPD'
@NM00409 DC    CL5'PSRMT'
@NM00410 DC    CL5'PSRBC'
@NM00411 DC    CL5'VRMTR'
@NM00412 DC    CL3'PEX'
@NM00413 DC    CL5'PCMPD'
ASM11LB1 DC    CL4'+ E8'
ASM11LB2 DC    CL5'PCMPN'
@NM00452 DC    CL5'PCMPA'
@NM00453 DC    CL4'PCMP'
@NM00454 DC    CL4'PSAV'
@NM00455 DC    CL4'PACT'
@NM00456 DC    CL4'PRLG'
ASM12LB1 DC    CL4'+100'
ASM12LB2 DC    CL5'PFRLG'
@NM00495 DC    CL5'PMSG0'
@NM00496 DC    CL5'PMSGS'
@NM00497 DC    CL5'PVACQ'
@NM00498 DC    CL5'PIOFR'
@NM00499 DC    CL5'PVACE'
ASM13LB1 DC    CL4'+118'
ASM13LB2 DC    CL5'RSV10'
ASM14LB1 DC    CL4'+128'
ASM14LB2 DC    CL4'CPID'
@NM00566 DC    CL5'CPSIZ'
@NM00567 DC    CL5'CPEXT'
@NM00568 DC    CL5'CPAVL'
@NM00569 DC    CL5'CPCNT'
ASM15LB1 DC    CL4'+138'
ASM16LB1 DC    CL4'+148'
ASM17LB1 DC    CL4'+158'
ASM17LB7 DC    CL5'CPTAK'
@NM00667 DC    CL5'CPRES'
ASMALB1  DC    CL4'+170'
ASMALB2  DC    CL9'PAGIO    '
ASMBLB1  DC    CL4'+198'
ASMCLB1  DC    CL4'+1C0'
ASMCLB2  DC    CL9'QIOE     '
ASMDLB1  DC    CL4'+1E8'
ASMELB1  DC    CL4'+210'
ASMELB2  DC    CL9'PAGCM    '
ASMFLB1  DC    CL4'+218'
ASMGLB1  DC    CL4'+260'
ASMGLB2  DC    CL9'SWAP     '
ASMHLB1  DC    CL4'+288'
ASMILB1  DC    CL4'+2B0'
ASMILB2  DC    CL9'SLSQA    '
ASMJLB1  DC    CL4'+2D8'
ASMKLB1  DC    CL4'+300'
ASMKLB2  DC    CL9'POS/VIOCM'
ASMLLB1  DC    CL4'+328'
ASMMLB1  DC    CL4'+350'
ASMMLB2  DC    CL9'PEX/MSG00'
ASMNLB1  DC    CL4'+378'
ASMOLB1  DC    CL4'+3A0'
ASMOLB2  DC    CL9'STANDARD '
ASMPLB1  DC    CL4'+3C4'
ASMQLB1  DC    CL4'+3E8'
ERE1LB1  DC    CL5'CURNT'
ERE1LB2  DC    CL5'CFRST'
ERE1LB3  DC    CL5'CLAST'
         DS    CL1
ERE1PTS  DS    CL40
         ORG   ERE1PTS
@NM01693 DS    CL12
         ORG   @NM01693
@NM01694 DC    B'00001111'
@NM01695 DC    AL1(4-1+16*5-16)
@NM01696 DC    AL1(5)
@NM01697 DC    AL1(11)
@NM01698 DC    AL4(ERE1LB1)
ERE1DT1  DC    A(0)
         ORG   ERE1PTS+12
@NM01699 DS    CL12
         ORG   @NM01699
@NM01700 DC    B'00001111'
@NM01701 DC    AL1(4-1+16*5-16)
@NM01702 DC    AL1(15+8)
@NM01703 DC    AL1(21+8)
@NM01704 DC    AL4(ERE1LB2)
ERE1DT2  DC    A(0)
         ORG   ERE1PTS+24
@NM01705 DS    CL12
         ORG   @NM01705
@NM01706 DC    B'00001111'
@NM01707 DC    AL1(4-1+16*5-16)
@NM01708 DC    AL1(25+8+8)
@NM01709 DC    AL1(31+8+8)
@NM01710 DC    AL4(ERE1LB3)
ERE1DT3  DC    A(0)
         ORG   ERE1PTS+36
@NM01711 DC    F'0'
         ORG   ERE1PTS+40
ERE2PTS  DS    CL48
         ORG   ERE2PTS
@NM01712 DS    CL8
         ORG   @NM01712
@NM01713 DC    B'00011100'
@NM01714 DC    XL1'03'
@NM01715 DC    AL1(0)
@NM01716 DC    AL1(0)
ERE2DT1  DC    A(0)
         ORG   ERE2PTS+8
@NM01717 DS    CL8
         ORG   @NM01717
@NM01718 DC    B'00001100'
@NM01719 DC    XL1'03'
@NM01720 DC    AL1(0)
@NM01721 DC    AL1(16)
ERE2DT2  DC    A(0)
         ORG   ERE2PTS+16
@NM01722 DS    CL4
         ORG   @NM01722
@NM01723 DC    B'00000100'
@NM01724 DC    XL1'03'
@NM01725 DC    AL1(0)
@NM01726 DC    AL1(28)
         ORG   ERE2PTS+20
@NM01727 DS    CL4
         ORG   @NM01727
@NM01728 DC    B'00000100'
@NM01729 DC    XL1'03'
@NM01730 DC    AL1(0)
@NM01731 DC    AL1(40)
         ORG   ERE2PTS+24
@NM01732 DS    CL4
         ORG   @NM01732
@NM01733 DC    B'00000100'
@NM01734 DC    XL1'03'
@NM01735 DC    AL1(0)
@NM01736 DC    AL1(52)
         ORG   ERE2PTS+28
@NM01737 DS    CL4
         ORG   @NM01737
@NM01738 DC    B'00000100'
@NM01739 DC    XL1'03'
@NM01740 DC    AL1(0)
@NM01741 DC    AL1(64)
         ORG   ERE2PTS+32
@NM01742 DS    CL4
         ORG   @NM01742
@NM01743 DC    B'00000100'
@NM01744 DC    XL1'03'
@NM01745 DC    AL1(0)
@NM01746 DC    AL1(76)
         ORG   ERE2PTS+36
@NM01747 DS    CL4
         ORG   @NM01747
@NM01748 DC    B'00000100'
@NM01749 DC    XL1'03'
@NM01750 DC    AL1(0)
@NM01751 DC    AL1(88)
         ORG   ERE2PTS+40
@NM01752 DS    CL4
         ORG   @NM01752
@NM01753 DC    B'00000100'
@NM01754 DC    XL1'03'
@NM01755 DC    AL1(0)
@NM01756 DC    AL1(100)
         ORG   ERE2PTS+44
@NM01757 DC    F'0'
         ORG   ERE2PTS+48
ERE3PTS  DS    CL36
         ORG   ERE3PTS
@NM01758 DS    CL8
         ORG   @NM01758
@NM01759 DC    B'00011100'
@NM01760 DC    XL1'03'
@NM01761 DC    AL1(0)
@NM01762 DC    AL1(0)
ERE3DT1  DC    A(0)
         ORG   ERE3PTS+8
@NM01763 DS    CL8
         ORG   @NM01763
@NM01764 DC    B'00001100'
@NM01765 DC    XL1'03'
@NM01766 DC    AL1(0)
@NM01767 DC    AL1(16)
ERE3DT2  DC    A(0)
         ORG   ERE3PTS+16
@NM01768 DS    CL4
         ORG   @NM01768
@NM01769 DC    B'00000100'
@NM01770 DC    XL1'03'
@NM01771 DC    AL1(0)
@NM01772 DC    AL1(28)
         ORG   ERE3PTS+20
@NM01773 DS    CL4
         ORG   @NM01773
@NM01774 DC    B'00000100'
@NM01775 DC    XL1'03'
@NM01776 DC    AL1(0)
@NM01777 DC    AL1(40)
         ORG   ERE3PTS+24
@NM01778 DS    CL4
         ORG   @NM01778
@NM01779 DC    B'00000100'
@NM01780 DC    XL1'03'
@NM01781 DC    AL1(0)
@NM01782 DC    AL1(52)
         ORG   ERE3PTS+28
@NM01783 DS    CL4
         ORG   @NM01783
@NM01784 DC    B'00000100'
@NM01785 DC    XL1'03'
@NM01786 DC    AL1(0)
@NM01787 DC    AL1(64)
         ORG   ERE3PTS+32
@NM01788 DC    F'0'
         ORG   ERE3PTS+36
MSG1LB1  DC    CL5'CURNT'
MSG1LB2  DC    CL5'FIRST'
MSG1LB3  DC    CL4'LAST'
MSG1LB4  DC    CL4'TERM'
         DS    CL2
MSG1PTS  DS    CL52
         ORG   MSG1PTS
@NM01789 DS    CL12
         ORG   @NM01789
@NM01790 DC    B'00001111'
@NM01791 DC    AL1(4-1+16*5-16)
@NM01792 DC    AL1(5)
@NM01793 DC    AL1(11)
@NM01794 DC    AL4(MSG1LB1)
MSG1DT1  DC    A(0)
         ORG   MSG1PTS+12
@NM01795 DS    CL12
         ORG   @NM01795
@NM01796 DC    B'00001111'
@NM01797 DC    AL1(4-1+16*5-16)
@NM01798 DC    AL1(15+8)
@NM01799 DC    AL1(21+8)
@NM01800 DC    AL4(MSG1LB2)
MSG1DT2  DC    A(0)
         ORG   MSG1PTS+24
@NM01801 DS    CL12
         ORG   @NM01801
@NM01802 DC    B'00001111'
@NM01803 DC    AL1(4-1+16*4-16)
@NM01804 DC    AL1(25+8+8)
@NM01805 DC    AL1(31+8+8)
@NM01806 DC    AL4(MSG1LB3)
MSG1DT3  DC    A(0)
         ORG   MSG1PTS+36
@NM01807 DS    CL12
         ORG   @NM01807
@NM01808 DC    B'00001111'
@NM01809 DC    AL1(4-1+16*4-16)
@NM01810 DC    AL1(35+8+8+8)
@NM01811 DC    AL1(41+8+8+8)
@NM01812 DC    AL4(MSG1LB4)
MSG1DT4  DC    A(0)
         ORG   MSG1PTS+48
@NM01813 DC    F'0'
         ORG   MSG1PTS+52
MSG2PTS  DS    CL56
         ORG   MSG2PTS
@NM01814 DS    CL8
         ORG   @NM01814
@NM01815 DC    B'00011100'
@NM01816 DC    AL1(16*0+4-1)
@NM01817 DC    AL1(0)
@NM01818 DC    AL1(0)
MSG2DT1  DC    A(0)
         ORG   MSG2PTS+8
@NM01819 DS    CL8
         ORG   @NM01819
@NM01820 DC    B'00001100'
@NM01821 DC    AL1(16*0+4-1)
@NM01822 DC    AL1(0)
@NM01823 DC    AL1(15)
MSG2DT2  DC    A(0)
         ORG   MSG2PTS+16
@NM01824 DS    CL4
         ORG   @NM01824
@NM01825 DC    B'00000100'
@NM01826 DC    AL1(16*0+4-1)
@NM01827 DC    AL1(0)
@NM01828 DC    AL1(25)
         ORG   MSG2PTS+20
@NM01829 DS    CL4
         ORG   @NM01829
@NM01830 DC    B'00000100'
@NM01831 DC    AL1(16*0+4-1)
@NM01832 DC    AL1(0)
@NM01833 DC    AL1(35)
         ORG   MSG2PTS+24
@NM01834 DS    CL4
         ORG   @NM01834
@NM01835 DC    B'00000100'
@NM01836 DC    AL1(16*0+4-1)
@NM01837 DC    AL1(0)
@NM01838 DC    AL1(45)
         ORG   MSG2PTS+28
@NM01839 DS    CL4
         ORG   @NM01839
@NM01840 DC    B'00000100'
@NM01841 DC    AL1(16*0+4-1)
@NM01842 DC    AL1(0)
@NM01843 DC    AL1(55)
         ORG   MSG2PTS+32
@NM01844 DS    CL4
         ORG   @NM01844
@NM01845 DC    B'00000100'
@NM01846 DC    AL1(16*0+4-1)
@NM01847 DC    AL1(0)
@NM01848 DC    AL1(65)
         ORG   MSG2PTS+36
@NM01849 DS    CL4
         ORG   @NM01849
@NM01850 DC    B'00000100'
@NM01851 DC    AL1(16*0+4-1)
@NM01852 DC    AL1(0)
@NM01853 DC    AL1(75)
         ORG   MSG2PTS+40
@NM01854 DS    CL4
         ORG   @NM01854
@NM01855 DC    B'00000100'
@NM01856 DC    AL1(16*0+4-1)
@NM01857 DC    AL1(0)
@NM01858 DC    AL1(85)
         ORG   MSG2PTS+44
@NM01859 DS    CL4
         ORG   @NM01859
@NM01860 DC    B'00000100'
@NM01861 DC    AL1(16*0+4-1)
@NM01862 DC    AL1(0)
@NM01863 DC    AL1(95)
         ORG   MSG2PTS+48
@NM01864 DS    CL4
         ORG   @NM01864
@NM01865 DC    B'00000100'
@NM01866 DC    AL1(16*0+4-1)
@NM01867 DC    AL1(0)
@NM01868 DC    AL1(105)
         ORG   MSG2PTS+52
@NM01869 DC    F'0'
         ORG   MSG2PTS+56
MSG3PTS  DS    CL44
         ORG   MSG3PTS
@NM01870 DS    CL4
         ORG   @NM01870
@NM01871 DC    B'00000100'
@NM01872 DC    AL1(16*0+4-1)
@NM01873 DC    AL1(0)
@NM01874 DC    AL1(15)
         ORG   MSG3PTS+4
@NM01875 DS    CL4
         ORG   @NM01875
@NM01876 DC    B'00000100'
@NM01877 DC    AL1(16*0+4-1)
@NM01878 DC    AL1(0)
@NM01879 DC    AL1(25)
         ORG   MSG3PTS+8
@NM01880 DS    CL4
         ORG   @NM01880
@NM01881 DC    B'00000100'
@NM01882 DC    AL1(16*0+4-1)
@NM01883 DC    AL1(0)
@NM01884 DC    AL1(35)
         ORG   MSG3PTS+12
@NM01885 DS    CL4
         ORG   @NM01885
@NM01886 DC    B'00000100'
@NM01887 DC    AL1(16*0+4-1)
@NM01888 DC    AL1(0)
@NM01889 DC    AL1(45)
         ORG   MSG3PTS+16
@NM01890 DS    CL4
         ORG   @NM01890
@NM01891 DC    B'00000100'
@NM01892 DC    AL1(16*0+4-1)
@NM01893 DC    AL1(0)
@NM01894 DC    AL1(55)
         ORG   MSG3PTS+20
@NM01895 DS    CL4
         ORG   @NM01895
@NM01896 DC    B'00000100'
@NM01897 DC    AL1(16*0+4-1)
@NM01898 DC    AL1(0)
@NM01899 DC    AL1(65)
         ORG   MSG3PTS+24
@NM01900 DS    CL4
         ORG   @NM01900
@NM01901 DC    B'00000100'
@NM01902 DC    AL1(16*0+4-1)
@NM01903 DC    AL1(0)
@NM01904 DC    AL1(75)
         ORG   MSG3PTS+28
@NM01905 DS    CL4
         ORG   @NM01905
@NM01906 DC    B'00000100'
@NM01907 DC    AL1(16*0+4-1)
@NM01908 DC    AL1(0)
@NM01909 DC    AL1(85)
         ORG   MSG3PTS+32
@NM01910 DS    CL4
         ORG   @NM01910
@NM01911 DC    B'00000100'
@NM01912 DC    AL1(16*0+4-1)
@NM01913 DC    AL1(0)
@NM01914 DC    AL1(95)
         ORG   MSG3PTS+36
@NM01915 DS    CL4
         ORG   @NM01915
@NM01916 DC    B'00000100'
@NM01917 DC    AL1(16*0+4-1)
@NM01918 DC    AL1(0)
@NM01919 DC    AL1(105)
         ORG   MSG3PTS+40
@NM01920 DC    F'0'
         ORG   MSG3PTS+44
AIA1LB1  DC    CL4'FQPA'
AIA1LB2  DC    CL4'BQPA'
AIA1LB3  DC    CL2'OP'
AIA1LB4  DC    CL4'FLG1'
AIA1LB5  DC    CL4'FLG2'
AIA1LB6  DC    CL4'FLG3'
         DS    CL2
AIA1PTS  DS    CL76
         ORG   AIA1PTS
@NM01921 DS    CL12
         ORG   @NM01921
@NM01922 DC    B'00001111'
@NM01923 DC    AL1(4-1+16*4-16)
@NM01924 DC    AL1(5)
@NM01925 DC    AL1(11)
@NM01926 DC    AL4(AIA1LB1)
AIA1DT1  DC    A(0)
         ORG   AIA1PTS+12
@NM01927 DS    CL12
         ORG   @NM01927
@NM01928 DC    B'00001111'
@NM01929 DC    AL1(4-1+16*4-16)
@NM01930 DC    AL1(15+8)
@NM01931 DC    AL1(21+8)
@NM01932 DC    AL4(AIA1LB2)
AIA1DT2  DC    A(0)
         ORG   AIA1PTS+24
@NM01933 DS    CL12
         ORG   @NM01933
@NM01934 DC    B'00001111'
@NM01935 DC    AL1(1-1+16*2-16)
@NM01936 DC    AL1(25+8+8)
@NM01937 DC    AL1(31+8+8)
@NM01938 DC    AL4(AIA1LB3)
AIA1DT3  DC    A(0)
         ORG   AIA1PTS+36
@NM01939 DS    CL12
         ORG   @NM01939
@NM01940 DC    B'00001111'
@NM01941 DC    AL1(8/8-1+16*4-16)
@NM01942 DC    AL1(35+8+8+8)
@NM01943 DC    AL1(41+8+8+8)
@NM01944 DC    AL4(AIA1LB4)
AIA1DT4  DC    A(0)
         ORG   AIA1PTS+48
@NM01945 DS    CL12
         ORG   @NM01945
@NM01946 DC    B'00001111'
@NM01947 DC    AL1(8/8-1+16*4-16)
@NM01948 DC    AL1(45+8+8+8+8)
@NM01949 DC    AL1(51+8+8+8+8)
@NM01950 DC    AL4(AIA1LB5)
AIA1DT5  DC    A(0)
         ORG   AIA1PTS+60
@NM01951 DS    CL12
         ORG   @NM01951
@NM01952 DC    B'00001111'
@NM01953 DC    AL1(8/8-1+16*4-16)
@NM01954 DC    AL1(55+8+8+8+8+8)
@NM01955 DC    AL1(61+8+8+8+8+8)
@NM01956 DC    AL4(AIA1LB6)
AIA1DT6  DC    A(0)
         ORG   AIA1PTS+72
@NM01957 DC    F'0'
         ORG   AIA1PTS+76
AIA2LB1  DC    CL5'NXAIA'
@NM01958 DC    CL2'ID'
@NM01959 DC    CL5'GRPSZ'
@NM01960 DC    CL5'/LGE/'
@NM01961 DC    CL5'DPXCT'
         DS    CL2
AIA2PTS  DS    CL32
         ORG   AIA2PTS
@NM01962 DS    CL12
         ORG   @NM01962
@NM01963 DC    B'00001111'
@NM01964 DC    AL1(4-1+16*5-16)
@NM01965 DC    AL1(5)
@NM01966 DC    AL1(11)
@NM01967 DC    AL4(AIA2LB1)
AIA2DT1  DC    A(0)
         ORG   AIA2PTS+12
@NM01968 DS    CL4
         ORG   @NM01968
@NM01969 DC    B'00000101'
@NM01970 DC    AL1(8-1+16*2-16)
@NM01971 DC    AL1(23)
@NM01972 DC    AL1(29)
         ORG   AIA2PTS+16
@NM01973 DS    CL4
         ORG   @NM01973
@NM01974 DC    B'00000001'
@NM01975 DC    AL1(16*5-16)
@NM01976 DC    AL1(51)
@NM01977 DC    AL1(0)
         ORG   AIA2PTS+20
@NM01978 DS    CL4
         ORG   @NM01978
@NM01979 DC    B'00000001'
@NM01980 DC    AL1(16*5-16)
@NM01981 DC    AL1(56)
@NM01982 DC    AL1(0)
         ORG   AIA2PTS+24
@NM01983 DS    CL4
         ORG   @NM01983
@NM01984 DC    B'00000101'
@NM01985 DC    AL1(4-1+16*5-16)
@NM01986 DC    AL1(61)
@NM01987 DC    AL1(67)
         ORG   AIA2PTS+28
@NM01988 DC    F'0'
         ORG   AIA2PTS+32
PCB1LB1  DC    CL3'CQN'
PCB1LB2  DC    CL4'FQPA'
PCB1LB3  DC    CL4'BQPA'
PCB1LB4  DC    CL3'FL1'
PCB1LB5  DC    CL4'RTPA'
         DS    CL2
PCB1PTS  DS    CL64
         ORG   PCB1PTS
@NM01989 DS    CL12
         ORG   @NM01989
@NM01990 DC    B'00001111'
@NM01991 DC    AL1(1-1+16*3-16)
@NM01992 DC    AL1(5)
@NM01993 DC    AL1(11)
@NM01994 DC    AL4(PCB1LB1)
PCB1DT1  DC    A(0)
         ORG   PCB1PTS+12
@NM01995 DS    CL12
         ORG   @NM01995
@NM01996 DC    B'00001111'
@NM01997 DC    AL1(3-1+16*4-16)
@NM01998 DC    AL1(15+8)
@NM01999 DC    AL1(21+8)
@NM02000 DC    AL4(PCB1LB2)
PCB1DT2  DC    A(0)
         ORG   PCB1PTS+24
@NM02001 DS    CL12
         ORG   @NM02001
@NM02002 DC    B'00001111'
@NM02003 DC    AL1(4-1+16*4-16)
@NM02004 DC    AL1(25+8+8)
@NM02005 DC    AL1(31+8+8)
@NM02006 DC    AL4(PCB1LB3)
PCB1DT3  DC    A(0)
         ORG   PCB1PTS+36
@NM02007 DS    CL12
         ORG   @NM02007
@NM02008 DC    B'00001111'
@NM02009 DC    AL1(8/8-1+16*3-16)
@NM02010 DC    AL1(35+8+8+8)
@NM02011 DC    AL1(41+8+8+8)
@NM02012 DC    AL4(PCB1LB4)
PCB1DT4  DC    A(0)
         ORG   PCB1PTS+48
@NM02013 DS    CL12
         ORG   @NM02013
@NM02014 DC    B'00001111'
@NM02015 DC    AL1(3-1+16*4-16)
@NM02016 DC    AL1(45+8+8+8+8)
@NM02017 DC    AL1(51+8+8+8+8)
@NM02018 DC    AL4(PCB1LB5)
PCB1DT5  DC    A(0)
         ORG   PCB1PTS+60
@NM02019 DC    F'0'
         ORG   PCB1PTS+64
PCB2LB1  DC    CL3'FXC'
PCB2LB2  DC    CL4'RLPA'
PCB2LB3  DC    CL3'FL2'
PCB2LB4  DC    CL4'XPTA'
PCB2LB5  DC    CL3'FL3'
PCB2LB6  DC    CL4'PGTA'
         DS    CL3
PCB2PTS  DS    CL76
         ORG   PCB2PTS
@NM02020 DS    CL12
         ORG   @NM02020
@NM02021 DC    B'00001111'
@NM02022 DC    AL1(1-1+16*3-16)
@NM02023 DC    AL1(5)
@NM02024 DC    AL1(11)
@NM02025 DC    AL4(PCB2LB1)
PCB2DT1  DC    A(0)
         ORG   PCB2PTS+12
@NM02026 DS    CL12
         ORG   @NM02026
@NM02027 DC    B'00001111'
@NM02028 DC    AL1(3-1+16*4-16)
@NM02029 DC    AL1(15+8)
@NM02030 DC    AL1(21+8)
@NM02031 DC    AL4(PCB2LB2)
PCB2DT2  DC    A(0)
         ORG   PCB2PTS+24
@NM02032 DS    CL12
         ORG   @NM02032
@NM02033 DC    B'00001111'
@NM02034 DC    AL1(8/8-1+16*3-16)
@NM02035 DC    AL1(25+8+8)
@NM02036 DC    AL1(31+8+8)
@NM02037 DC    AL4(PCB2LB3)
PCB2DT3  DC    A(0)
         ORG   PCB2PTS+36
@NM02038 DS    CL12
         ORG   @NM02038
@NM02039 DC    B'00001111'
@NM02040 DC    AL1(3-1+16*4-16)
@NM02041 DC    AL1(35+8+8+8)
@NM02042 DC    AL1(41+8+8+8)
@NM02043 DC    AL4(PCB2LB4)
PCB2DT4  DC    A(0)
         ORG   PCB2PTS+48
@NM02044 DS    CL12
         ORG   @NM02044
@NM02045 DC    B'00001111'
@NM02046 DC    AL1(8/8-1+16*3-16)
@NM02047 DC    AL1(45+8+8+8+8)
@NM02048 DC    AL1(51+8+8+8+8)
@NM02049 DC    AL4(PCB2LB5)
PCB2DT5  DC    A(0)
         ORG   PCB2PTS+60
@NM02050 DS    CL12
         ORG   @NM02050
@NM02051 DC    B'00001111'
@NM02052 DC    AL1(3-1+16*4-16)
@NM02053 DC    AL1(55+8+8+8+8+8)
@NM02054 DC    AL1(61+8+8+8+8+8)
@NM02055 DC    AL4(PCB2LB6)
PCB2DT6  DC    A(0)
         ORG   PCB2PTS+72
@NM02056 DC    F'0'
         ORG   PCB2PTS+76
PCB3LB1  DC    CL3'RBN'
PCB3LB2  DC    CL3'VBN'
PCB3LB3  DC    CL3'SRB'
PCB3LB4  DC    CL4'ASCB'
         DS    CL3
PCB3PTS  DS    CL52
         ORG   PCB3PTS
@NM02057 DS    CL12
         ORG   @NM02057
@NM02058 DC    B'00001111'
@NM02059 DC    AL1(16/8-1+16*3-16)
@NM02060 DC    AL1(5)
@NM02061 DC    AL1(11)
@NM02062 DC    AL4(PCB3LB1)
PCB3DT1  DC    A(0)
         ORG   PCB3PTS+12
@NM02063 DS    CL12
         ORG   @NM02063
@NM02064 DC    B'00001111'
@NM02065 DC    AL1(16/8-1+16*3-16)
@NM02066 DC    AL1(15+8)
@NM02067 DC    AL1(21+8)
@NM02068 DC    AL4(PCB3LB2)
PCB3DT2  DC    A(0)
         ORG   PCB3PTS+24
@NM02069 DS    CL12
         ORG   @NM02069
@NM02070 DC    B'00001111'
@NM02071 DC    AL1(4-1+16*3-16)
@NM02072 DC    AL1(25+8+8)
@NM02073 DC    AL1(31+8+8)
@NM02074 DC    AL4(PCB3LB3)
PCB3DT3  DC    A(0)
         ORG   PCB3PTS+36
@NM02075 DS    CL12
         ORG   @NM02075
@NM02076 DC    B'00001111'
@NM02077 DC    AL1(4-1+16*4-16)
@NM02078 DC    AL1(35+8+8+8)
@NM02079 DC    AL1(41+8+8+8)
@NM02080 DC    AL4(PCB3LB4)
PCB3DT4  DC    A(0)
         ORG   PCB3PTS+48
@NM02081 DC    F'0'
         ORG   PCB3PTS+52
ACE1LB1  DC    CL4'FQPA'
ACE1LB2  DC    CL4'BQPA'
ACE1LB3  DC    CL2'OP'
ACE1LB4  DC    CL4'FLG1'
ACE1LB5  DC    CL4'FLG2'
ACE1LB6  DC    CL4'FLG3'
         DS    CL2
ACE1PTS  DS    CL76
         ORG   ACE1PTS
@NM02082 DS    CL12
         ORG   @NM02082
@NM02083 DC    B'00001111'
@NM02084 DC    AL1(4-1+16*4-16)
@NM02085 DC    AL1(5)
@NM02086 DC    AL1(11)
@NM02087 DC    AL4(ACE1LB1)
ACE1DT1  DC    A(0)
         ORG   ACE1PTS+12
@NM02088 DS    CL12
         ORG   @NM02088
@NM02089 DC    B'00001111'
@NM02090 DC    AL1(4-1+16*4-16)
@NM02091 DC    AL1(15+8)
@NM02092 DC    AL1(21+8)
@NM02093 DC    AL4(ACE1LB2)
ACE1DT2  DC    A(0)
         ORG   ACE1PTS+24
@NM02094 DS    CL12
         ORG   @NM02094
@NM02095 DC    B'00001111'
@NM02096 DC    AL1(1-1+16*2-16)
@NM02097 DC    AL1(25+8+8)
@NM02098 DC    AL1(31+8+8)
@NM02099 DC    AL4(ACE1LB3)
ACE1DT3  DC    A(0)
         ORG   ACE1PTS+36
@NM02100 DS    CL12
         ORG   @NM02100
@NM02101 DC    B'00001111'
@NM02102 DC    AL1(8/8-1+16*4-16)
@NM02103 DC    AL1(35+8+8+8)
@NM02104 DC    AL1(41+8+8+8)
@NM02105 DC    AL4(ACE1LB4)
ACE1DT4  DC    A(0)
         ORG   ACE1PTS+48
@NM02106 DS    CL12
         ORG   @NM02106
@NM02107 DC    B'00001111'
@NM02108 DC    AL1(8/8-1+16*4-16)
@NM02109 DC    AL1(45+8+8+8+8)
@NM02110 DC    AL1(51+8+8+8+8)
@NM02111 DC    AL4(ACE1LB5)
ACE1DT5  DC    A(0)
         ORG   ACE1PTS+60
@NM02112 DS    CL12
         ORG   @NM02112
@NM02113 DC    B'00001111'
@NM02114 DC    AL1(8/8-1+16*4-16)
@NM02115 DC    AL1(55+8+8+8+8+8)
@NM02116 DC    AL1(61+8+8+8+8+8)
@NM02117 DC    AL4(ACE1LB6)
ACE1DT6  DC    A(0)
         ORG   ACE1PTS+72
@NM02118 DC    F'0'
         ORG   ACE1PTS+76
ACE2LB1  DC    CL3'LGE'
ACE2LB2  DC    CL4'LGID'
ACE2LB3  DC    CL3'RPN'
ACE2LB4  DC    CL3'SYM'
ACE2LB5  DC    CL3'ECB'
ACE2PTS  DS    CL64
         ORG   ACE2PTS
@NM02119 DS    CL12
         ORG   @NM02119
@NM02120 DC    B'00001111'
@NM02121 DC    AL1(4-1+16*3-16)
@NM02122 DC    AL1(5)
@NM02123 DC    AL1(11)
@NM02124 DC    AL4(ACE2LB1)
ACE2DT1  DC    A(0)
         ORG   ACE2PTS+12
@NM02125 DS    CL12
         ORG   @NM02125
@NM02126 DC    B'00001111'
@NM02127 DC    AL1(4-1+16*4-16)
@NM02128 DC    AL1(15+8)
@NM02129 DC    AL1(21+8)
@NM02130 DC    AL4(ACE2LB2)
ACE2DT2  DC    A(0)
         ORG   ACE2PTS+24
@NM02131 DS    CL12
         ORG   @NM02131
@NM02132 DC    B'00001111'
@NM02133 DC    AL1(4-1+16*3-16)
@NM02134 DC    AL1(25+8+8)
@NM02135 DC    AL1(31+8+8)
@NM02136 DC    AL4(ACE2LB3)
ACE2DT3  DC    A(0)
         ORG   ACE2PTS+36
@NM02137 DS    CL12
         ORG   @NM02137
@NM02138 DC    B'00001111'
@NM02139 DC    AL1(8-1+16*3-16)
@NM02140 DC    AL1(35+8+8+8)
@NM02141 DC    AL1(41+8+8+8)
@NM02142 DC    AL4(ACE2LB4)
ACE2DT4  DC    A(0)
         ORG   ACE2PTS+48
@NM02143 DS    CL12
         ORG   @NM02143
@NM02144 DC    B'00001111'
@NM02145 DC    AL1(4-1+16*3-16)
@NM02146 DC    AL1(45+8+8+8+8)
@NM02147 DC    AL1(51+8+8+8+8)
@NM02148 DC    AL4(ACE2LB5)
ACE2DT5  DC    A(0)
         ORG   ACE2PTS+60
@NM02149 DC    F'0'
         ORG   ACE2PTS+64
ACE3LB1  DC    CL5'SRBWK'
         DS    CL3
ACE3PTS  DS    CL16
         ORG   ACE3PTS
@NM02150 DS    CL12
         ORG   @NM02150
@NM02151 DC    B'00001111'
@NM02152 DC    AL1(4-1+16*5-16)
@NM02153 DC    AL1(5)
@NM02154 DC    AL1(11)
@NM02155 DC    AL4(ACE3LB1)
ACE3DT1  DC    A(0)
         ORG   ACE3PTS+12
@NM02156 DC    F'0'
         ORG   ACE3PTS+16
ACE4LB1  DC    CL4'FQPA'
ACE4LB2  DC    CL4'BQPA'
ACE4LB3  DC    CL2'OP'
ACE4LB4  DC    CL4'FLG1'
ACE4LB5  DC    CL4'FLG2'
ACE4LB6  DC    CL4'FLG3'
         DS    CL2
ACE4PTS  DS    CL76
         ORG   ACE4PTS
@NM02157 DS    CL12
         ORG   @NM02157
@NM02158 DC    B'00001111'
@NM02159 DC    AL1(4-1+16*4-16)
@NM02160 DC    AL1(5)
@NM02161 DC    AL1(11)
@NM02162 DC    AL4(ACE4LB1)
ACE4DT1  DC    A(0)
         ORG   ACE4PTS+12
@NM02163 DS    CL12
         ORG   @NM02163
@NM02164 DC    B'00001111'
@NM02165 DC    AL1(4-1+16*4-16)
@NM02166 DC    AL1(15+8)
@NM02167 DC    AL1(21+8)
@NM02168 DC    AL4(ACE4LB2)
ACE4DT2  DC    A(0)
         ORG   ACE4PTS+24
@NM02169 DS    CL12
         ORG   @NM02169
@NM02170 DC    B'00001111'
@NM02171 DC    AL1(1-1+16*2-16)
@NM02172 DC    AL1(25+8+8)
@NM02173 DC    AL1(31+8+8)
@NM02174 DC    AL4(ACE4LB3)
ACE4DT3  DC    A(0)
         ORG   ACE4PTS+36
@NM02175 DS    CL12
         ORG   @NM02175
@NM02176 DC    B'00001111'
@NM02177 DC    AL1(8/8-1+16*4-16)
@NM02178 DC    AL1(35+8+8+8)
@NM02179 DC    AL1(41+8+8+8)
@NM02180 DC    AL4(ACE4LB4)
ACE4DT4  DC    A(0)
         ORG   ACE4PTS+48
@NM02181 DS    CL12
         ORG   @NM02181
@NM02182 DC    B'00001111'
@NM02183 DC    AL1(8/8-1+16*4-16)
@NM02184 DC    AL1(45+8+8+8+8)
@NM02185 DC    AL1(51+8+8+8+8)
@NM02186 DC    AL4(ACE4LB5)
ACE4DT5  DC    A(0)
         ORG   ACE4PTS+60
@NM02187 DS    CL12
         ORG   @NM02187
@NM02188 DC    B'00001111'
@NM02189 DC    AL1(8/8-1+16*4-16)
@NM02190 DC    AL1(55+8+8+8+8+8)
@NM02191 DC    AL1(61+8+8+8+8+8)
@NM02192 DC    AL4(ACE4LB6)
ACE4DT6  DC    A(0)
         ORG   ACE4PTS+72
@NM02193 DC    F'0'
         ORG   ACE4PTS+76
ACE5LB1  DC    CL3'LGE'
ACE5LB2  DC    CL4'LGID'
ACE5LB3  DC    CL5'SRCID'
ACE5LB4  DC    CL5'AIAPT'
ACE5LB5  DC    CL3'ECB'
ACE5PTS  DS    CL64
         ORG   ACE5PTS
@NM02194 DS    CL12
         ORG   @NM02194
@NM02195 DC    B'00001111'
@NM02196 DC    AL1(4-1+16*3-16)
@NM02197 DC    AL1(5)
@NM02198 DC    AL1(11)
@NM02199 DC    AL4(ACE5LB1)
ACE5DT1  DC    A(0)
         ORG   ACE5PTS+12
@NM02200 DS    CL12
         ORG   @NM02200
@NM02201 DC    B'00001111'
@NM02202 DC    AL1(4-1+16*4-16)
@NM02203 DC    AL1(15+8)
@NM02204 DC    AL1(21+8)
@NM02205 DC    AL4(ACE5LB2)
ACE5DT2  DC    A(0)
         ORG   ACE5PTS+24
@NM02206 DS    CL12
         ORG   @NM02206
@NM02207 DC    B'00001111'
@NM02208 DC    AL1(4-1+16*5-16)
@NM02209 DC    AL1(25+8+8)
@NM02210 DC    AL1(31+8+8)
@NM02211 DC    AL4(ACE5LB3)
ACE5DT3  DC    A(0)
         ORG   ACE5PTS+36
@NM02212 DS    CL12
         ORG   @NM02212
@NM02213 DC    B'00001111'
@NM02214 DC    AL1(4-1+16*5-16)
@NM02215 DC    AL1(35+8+8+8)
@NM02216 DC    AL1(41+8+8+8)
@NM02217 DC    AL4(ACE5LB4)
ACE5DT4  DC    A(0)
         ORG   ACE5PTS+48
@NM02218 DS    CL12
         ORG   @NM02218
@NM02219 DC    B'00001111'
@NM02220 DC    AL1(4-1+16*3-16)
@NM02221 DC    AL1(45+8+8+8+8)
@NM02222 DC    AL1(51+8+8+8+8)
@NM02223 DC    AL4(ACE5LB5)
ACE5DT5  DC    A(0)
         ORG   ACE5PTS+60
@NM02224 DC    F'0'
         ORG   ACE5PTS+64
ACE6LB1  DC    CL5'SRBWK'
         DS    CL3
ACE6PTS  DS    CL16
         ORG   ACE6PTS
@NM02225 DS    CL12
         ORG   @NM02225
@NM02226 DC    B'00001111'
@NM02227 DC    AL1(4-1+16*5-16)
@NM02228 DC    AL1(5)
@NM02229 DC    AL1(11)
@NM02230 DC    AL4(ACE6LB1)
ACE6DT1  DC    A(0)
         ORG   ACE6PTS+12
@NM02231 DC    F'0'
         ORG   ACE6PTS+16
MSGTAB   DC    CL44'ERROR OCCURRED FORMATTING ASMVT, ETC.'
         DC    CL44'PART INACCESSIBLE'
         DC    CL44'ERROR ENCOUNTERED FORMATTING PAGING BLOCKS'
         DC    CL44'SART INACCESSIBLE'
         DC    CL44'ERROR ENCOUNTERED FORMATTING SWAPPING BLOCKS'
         DC    CL44'PVT INACCESSIBLE'
         DC    CL44'ERROR ENCOUNTERED FORMATTING CSA PGT/XPTS'
         DC    CL44'ASVT INACCESSIBLE'
         DC    CL44'ASCB INACCESSIBLE'
         DC    CL44'MASTER SEGMENT TABLE INACCESSIBLE'
         DC    CL44'RSMHD -OR- ASMHD INACCESSIBLE'
         DC    CL44'ERROR ENCOUNTERED FORMATTING HEADER BLOCKS '
         DC    CL44'LGVT INACCESSIBLE'
         DC    CL44'ERROR ENCOUNTERED FORMATTING VIO BLOCKS'
         DC    CL44'POSSIBLE LOOP IN CHAIN'
         DC    CL44'NOT VS/2 DUMP -OR- NO CVT PTR'
         DC    CL44'DUMP IS INCORRECT RELEASE'
         DC    CL44'CVT -OR- ASMVT INACCESSIBLE'
HDRTAB   DC    AL4(ASM1PTS)
         DC    AL4(ASM2PTS)
         DC    AL4(ASM3PTS)
         DC    AL4(ASM4PTS)
         DC    AL4(ASM5PTS)
         DC    AL4(ASM6PTS)
         DC    AL4(ASM7PTS)
         DC    AL4(ASM8PTS)
         DC    AL4(ASM9PTS)
         DC    AL4(ASM10PTS)
         DC    AL4(ASM11PTS)
         DC    AL4(ASM12PTS)
         DC    AL4(ASM13PTS)
POOLTAB  DC    AL4(ASM14PTS)
         DC    AL4(ASM15PTS)
         DC    AL4(ASM16PTS)
         DC    AL4(ASM17PTS)
SAVETAB  DC    AL4(ASMAPTS)
         DC    AL4(ASMBPTS)
         DC    AL4(ASMCPTS)
         DC    AL4(ASMDPTS)
         DC    AL4(ASMEPTS)
         DC    AL4(ASMFPTS)
         DC    AL4(ASMGPTS)
         DC    AL4(ASMHPTS)
         DC    AL4(ASMIPTS)
         DC    AL4(ASMJPTS)
         DC    AL4(ASMKPTS)
         DC    AL4(ASMLPTS)
         DC    AL4(ASMMPTS)
         DC    AL4(ASMNPTS)
         DC    AL4(ASMOPTS)
         DC    AL4(ASMPPTS)
         DC    AL4(ASMQPTS)
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
I        EQU   @02
RTNADDR9 EQU   @02
RTNADDR6 EQU   @08
RTNADDR4 EQU   @08
RTNADDR3 EQU   @08
FORMRC   EQU   @02
MAXUSER  EQU   @08
OPPTR    EQU   @02
ASMIDPTR EQU   @02
ENTRYPTR EQU   @03
RSMHDPTR EQU   @11
ASCBPTR  EQU   @11
AIAPTR   EQU   @11
R0       EQU   @00
R1       EQU   @01
R2       EQU   @02
R3       EQU   @03
R14      EQU   @14
R15      EQU   @15
R10      EQU   @10
R11      EQU   @11
R12      EQU   @12
R13      EQU   @13
R4       EQU   @04
R5       EQU   @05
R6       EQU   @06
R7       EQU   @07
R8       EQU   @08
R9       EQU   @09
ABDPL    EQU   0
ADPLASID EQU   ABDPL+4
ADPLFLAG EQU   ABDPL+7
ADPLSYTM EQU   ADPLFLAG
ADPLBUF  EQU   ABDPL+8
ADPLPRNT EQU   ABDPL+12
ADPLCVT  EQU   ABDPL+16
ADPLMEMA EQU   ABDPL+20
ADPLFRMT EQU   ABDPL+24
ACE      EQU   0
ACEFQPA  EQU   ACE
ACEBQPA  EQU   ACE+4
ACEOP    EQU   ACE+8
ACEFLG1  EQU   ACE+9
ACEFLG2  EQU   ACE+10
ACEFLG3  EQU   ACE+11
ACELGE   EQU   ACE+12
ACELGN   EQU   ACE+16
ACELGID  EQU   ACELGN
ACERPN   EQU   ACELGN+4
ACESYM   EQU   ACE+24
ACESRCID EQU   ACESYM
ACEAIAPT EQU   ACESYM+4
ACEECB   EQU   ACE+32
ACESRBWK EQU   ACE+36
AIA      EQU   0
AIAFQPA  EQU   AIA
AIABQPA  EQU   AIA+4
AIAOP    EQU   AIA+8
AIAFLG1  EQU   AIA+9
AIAFLG2  EQU   AIA+10
AIAFLG3  EQU   AIA+11
AIANXAIA EQU   AIA+12
AIAID    EQU   AIA+16
AIALPID  EQU   AIAID
AIALGID  EQU   AIALPID
AIALSID  EQU   AIALGID
AIASSID  EQU   AIALSID+1
AIARPN   EQU   AIALPID+4
AIALSID2 EQU   AIARPN
AIALPMEP EQU   AIALSID2
AIAGRPSZ EQU   AIA+24
AIALGE   EQU   AIAGRPSZ
AIADPXCT EQU   AIALGE
ASCB     EQU   0
ASCBSUPC EQU   ASCB+16
ASCBRSM  EQU   ASCB+52
ASCBRSMF EQU   ASCBRSM
ASCBFW1  EQU   ASCB+100
ASCBRCTF EQU   ASCBFW1+2
ASCBFLG1 EQU   ASCBFW1+3
ASCBDSP1 EQU   ASCB+114
ASCBFLG2 EQU   ASCB+115
ASCBLKGP EQU   ASCB+128
ASCBSRQ  EQU   ASCB+180
ASCBSRQ1 EQU   ASCBSRQ
ASCBSRQ2 EQU   ASCBSRQ+1
ASCBSRQ3 EQU   ASCBSRQ+2
ASCBSRQ4 EQU   ASCBSRQ+3
ASMVT    EQU   0
ASMFLAG1 EQU   ASMVT
ASMFLAG2 EQU   ASMVT+1
ASMDSSFS EQU   ASMVT+2
ASMSART  EQU   ASMVT+4
ASMPART  EQU   ASMVT+8
ASMGOS   EQU   ASMVT+12
ASMTRPAG EQU   ASMVT+16
ASMEREC  EQU   ASMVT+20
ASMMSGBF EQU   ASMVT+24
ASMRSV5  EQU   ASMVT+28
ASMSTAGQ EQU   ASMVT+32
ASMSTAGF EQU   ASMSTAGQ
ASMSTAGL EQU   ASMSTAGQ+4
ASMIORQR EQU   ASMVT+40
ASMIORQC EQU   ASMVT+44
ASMPCCWQ EQU   ASMVT+64
ASMPCCWA EQU   ASMPCCWQ
ASMPCCWC EQU   ASMPCCWQ+4
ASMPCCWN EQU   ASMVT+72
ASMBURST EQU   ASMVT+76
ASMIOCNT EQU   ASMVT+80
ASMSRBCT EQU   ASMVT+84
ASMPSRB  EQU   ASMVT+88
ASMBKSLT EQU   ASMVT+108
ASMSLOTS EQU   ASMVT+112
ASMVSC   EQU   ASMVT+116
ASMNVSC  EQU   ASMVT+120
ASMERRS  EQU   ASMVT+124
ASMSLOTV EQU   ASMVT+128
ASMLGVT  EQU   ASMVT+132
ASMSTGXA EQU   ASMVT+136
ASMCINV  EQU   ASMVT+140
ASMLSAI  EQU   ASMVT+144
ASMLSAIL EQU   ASMLSAI
ASMLSAIH EQU   ASMLSAI+4
ASMGOSQS EQU   ASMVT+152
ASMGOSWT EQU   ASMGOSQS
ASMGOSWK EQU   ASMGOSQS+4
ASMREQCT EQU   ASMVT+160
ASMTCBPT EQU   ASMVT+164
ASMTMECB EQU   ASMVT+168
ASMRLGRQ EQU   ASMVT+172
ASMRLGWQ EQU   ASMVT+176
ASMTASCB EQU   ASMVT+180
ASMPQIOE EQU   ASMVT+192
ASMPFRSL EQU   ASMVT+196
ASMPFRSW EQU   ASMVT+200
ASMPTM   EQU   ASMVT+204
ASMPSWPD EQU   ASMVT+208
ASMPSRMT EQU   ASMVT+212
ASMPSRBC EQU   ASMVT+216
ASMVRMTR EQU   ASMVT+220
ASMPEX   EQU   ASMVT+224
ASMPCMPD EQU   ASMVT+228
ASMPCMPN EQU   ASMVT+232
ASMPCMPA EQU   ASMVT+236
ASMPCMP  EQU   ASMVT+240
ASMPSAV  EQU   ASMVT+244
ASMPACT  EQU   ASMVT+248
ASMPRLG  EQU   ASMVT+252
ASMPFRLG EQU   ASMVT+256
ASMPMSG0 EQU   ASMVT+260
ASMPMSGS EQU   ASMVT+264
ASMPVACQ EQU   ASMVT+268
ASMPIOFR EQU   ASMVT+272
ASMPVACE EQU   ASMVT+276
ASMIOEPC EQU   ASMVT+296
ASMWKSA1 EQU   ASMVT+368
ASMWKSA2 EQU   ASMVT+448
ASMWKSA3 EQU   ASMVT+528
ASMWKSA4 EQU   ASMVT+608
ASMWKSA5 EQU   ASMVT+688
ASMPOOLS EQU   0
ASMCPID  EQU   ASMPOOLS
ASMCPSIZ EQU   ASMPOOLS+4
ASMCPEXT EQU   ASMPOOLS+6
ASMCPAVQ EQU   ASMPOOLS+8
ASMCPAVL EQU   ASMCPAVQ
ASMCPCNT EQU   ASMCPAVQ+4
ASMCPRSQ EQU   ASMPOOLS+16
ASMCPTAK EQU   ASMCPRSQ
ASMCPRES EQU   ASMCPRSQ+4
ASVT     EQU   0
ASVTMAXU EQU   ASVT+516
ASVTFRST EQU   ASVT+524
ASVTENTY EQU   ASVT+528
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIOQET EQU   CVTMAP+120
CVTIERLC EQU   CVTMAP+144
CVTHEAD  EQU   CVTMAP+160
CVTSV76C EQU   CVTHEAD
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
PCB      EQU   0
PCBFQP   EQU   PCB
PCBCQN   EQU   PCBFQP
PCBFQPA  EQU   PCBFQP+1
PCBBQP   EQU   PCB+4
PCBBQPA  EQU   PCBBQP
PCBRTP   EQU   PCB+8
PCBFL1   EQU   PCBRTP
PCBRTPA  EQU   PCBRTP+1
PCBRLP   EQU   PCB+12
PCBFXC   EQU   PCBRLP
PCBRLPA  EQU   PCBRLP+1
PCBXPT   EQU   PCB+16
PCBFL2   EQU   PCBXPT
PCBXPTA  EQU   PCBXPT+1
PCBPGT   EQU   PCB+20
PCBFL3   EQU   PCBPGT
PCBPGTA  EQU   PCBPGT+1
PCBRBN   EQU   PCB+24
PCBVBN   EQU   PCB+26
PCBBLOCK EQU   PCB+28
PCBSRB   EQU   PCBBLOCK
PCBRB    EQU   PCBSRB
PCBASCB  EQU   PCB+32
RSMHD    EQU   0
RSMFLG1  EQU   RSMHD+12
RSMQS    EQU   RSMHD+20
RSMLFQ   EQU   RSMQS
RSMLSQA  EQU   RSMQS+4
RSMLIOQ  EQU   RSMQS+8
EREC     EQU   0
ERECURNT EQU   EREC
ERECFRST EQU   EREC+4
ERECLAST EQU   EREC+8
ERECLIST EQU   EREC+12
ERECENTY EQU   0
MSGBF    EQU   0
MSGCURNT EQU   MSGBF
MSGFIRST EQU   MSGBF+4
MSGLAST  EQU   MSGBF+8
MSGTERM  EQU   MSGBF+12
MSGBUFFR EQU   MSGBF+16
ENTASVT  EQU   0
ENTFLAGS EQU   ENTASVT
VALIDFLG EQU   ENTFLAGS
PTRASCB  EQU   ENTASVT+1
ACCESS   EQU   0
FORMAT   EQU   0
PRINT    EQU   0
BUFFER   EQU   0
ANCHTXT  EQU   BUFFER+17
ANCHNAME EQU   BUFFER+29
PTTRNS   EQU   0
PTTSTOP  EQU   PTTRNS
PTTFLGS  EQU   PTTSTOP
OPBYTE   EQU   0
CURRENT  EQU   0
IDASM    EQU   0
MESSAGE  EQU   0
ASM1WKSV EQU   ASMWKSA1
ASM1RGSV EQU   ASM1WKSV
ASM1WRKA EQU   ASM1WKSV+60
ASM2WKSV EQU   ASMWKSA2
ASM2WRKA EQU   ASM2WKSV+52
ASM2FLGS EQU   ASM2WRKA+12
ASM3WKSV EQU   ASMWKSA3
ASM4WKSV EQU   ASMWKSA4
ASM4RGSV EQU   ASM4WKSV
ASM5WKSV EQU   ASMWKSA5
ASM5RGSV EQU   ASM5WKSV
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTASVT  EQU   CVTS01+208
CVTASMVT EQU   CVTS01+356
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTSUSP  EQU   CVTS01+692
CVTT6SVC EQU   CVTS01+688
CVTCDAL  EQU   CVTS01+684
CVTTCTL  EQU   CVTS01+680
CVTRSUME EQU   CVTS01+676
CVTJTERM EQU   CVTS01+672
CVTASMRM EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTHSM   EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
ASM5FLGS EQU   ASM5WKSV+64
ASM5AIA  EQU   ASM5WKSV+60
ASM5GCTR EQU   ASM5WKSV+56
ASM5SR14 EQU   ASM5WKSV+52
@NM00009 EQU   ASM5RGSV+4
ASM5RG2  EQU   ASM5RGSV
@NM00008 EQU   ASM4RGSV+4
ASM4RG2  EQU   ASM4RGSV
ASM3SR13 EQU   ASM3WKSV+28
ASM3R14B EQU   ASM3WKSV+24
ASM3R14A EQU   ASM3WKSV+20
ASM3GRPA EQU   ASM3WKSV+16
ASM3TMPA EQU   ASM3WKSV+12
ASM3PIOP EQU   ASM3WKSV+8
ASM3GENQ EQU   ASM3WKSV+4
ASM3SWPQ EQU   ASM3WKSV
ASM2SR14 EQU   ASM2WRKA+16
@NM00007 EQU   ASM2WRKA+13
ASM2WFLG EQU   ASM2FLGS
ASM2RFLG EQU   ASM2FLGS
ASM2DUPQ EQU   ASM2WRKA+8
ASM2CAQ  EQU   ASM2WRKA+4
ASM2PAQ  EQU   ASM2WRKA
ASM2RGSV EQU   ASM2WKSV
ASM1NXTA EQU   ASM1WRKA+4
ASM1ASCB EQU   ASM1WRKA
ASM1RG15 EQU   ASM1RGSV+56
@NM00006 EQU   ASM1RGSV+4
ASM1RG1  EQU   ASM1RGSV
PTTDTPTR EQU   PTTRNS+8
PTTLBPTR EQU   PTTRNS+4
PTTDTOFF EQU   PTTSTOP+3
PTTLBOFF EQU   PTTSTOP+2
PTTDTLGH EQU   PTTSTOP+1
PTTLBLGH EQU   PTTSTOP+1
PTTFLBBF EQU   PTTFLGS
PTTFLBLP EQU   PTTFLGS
PTTFDTBF EQU   PTTFLGS
PTTFDATP EQU   PTTFLGS
PTTFSTR  EQU   PTTFLGS
PTTFASIS EQU   PTTFLGS
@NM00022 EQU   PTTFLGS
@NM00021 EQU   BUFFER+28
@NM00020 EQU   BUFFER+8
@NM00019 EQU   BUFFER
MSGTBUFR EQU   MSGBF+256
@NM00018 EQU   ERECENTY+1
ERECID   EQU   ERECENTY
RSMASMHD EQU   RSMHD+40
RSMFOEQ  EQU   RSMHD+36
RSMLIOQL EQU   RSMLIOQ+4
RSMLIOQF EQU   RSMLIOQ
RSMLSQAL EQU   RSMLSQA+2
RSMLSQAF EQU   RSMLSQA
RSMLFQL  EQU   RSMLFQ+2
RSMLFQF  EQU   RSMLFQ
RSMRSV2  EQU   RSMHD+16
RSMCNTFX EQU   RSMHD+14
RSMRSV1  EQU   RSMHD+13
@NM00017 EQU   RSMFLG1
RSMFAIL  EQU   RSMFLG1
RSMGFADD EQU   RSMFLG1
RSMCPNC  EQU   RSMFLG1
RSMCPNU  EQU   RSMFLG1
RSMGFAD  EQU   RSMFLG1
RSMIOCPC EQU   RSMFLG1
RSMIOCPU EQU   RSMFLG1
RSMASCB  EQU   RSMHD+8
RSMSPCT  EQU   RSMHD+4
RSMVSTO  EQU   RSMHD
PCBEND   EQU   PCB+64
PCBAIA   EQU   PCB+36
PCBSPCTE EQU   PCBRB
PCBSWPS2 EQU   PCBFL3
@NM00016 EQU   PCBFL3
PCBNOREC EQU   PCBFL3
PCBDFRLS EQU   PCBFL3
PCBSWPLS EQU   PCBFL3
PCBSWPS1 EQU   PCBFL3
PCBSWPIN EQU   PCBFL3
PCBSWPOT EQU   PCBFL3
@NM00015 EQU   PCBFL2
@NM00014 EQU   PCBFL2
PCBVIO   EQU   PCBFL2
PCBSUPRS EQU   PCBFL2
PCBRESET EQU   PCBFL2
PCBIOERR EQU   PCBFL2
PCBGFAD  EQU   PCBFL2
PCBFREAL EQU   PCBFL2
PCBIOCMP EQU   PCBFL1
PCBIOI   EQU   PCBFL1
PCBROOT  EQU   PCBFL1
PCBLFR   EQU   PCBFL1
PCBLLHLD EQU   PCBFL1
PCBSRBMD EQU   PCBFL1
PCBPEX   EQU   PCBFL1
@NM00013 EQU   PCBFL1
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00012 EQU   CVTFIX+248
@NM00011 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTCCVT  EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTLDEV  EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTSV76Q EQU   CVTSV76C
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTSV76M EQU   CVTIOQET
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
ASVTEND  EQU   ASVT+528
ASVTAVAL EQU   ASVTENTY
ASVTAVAI EQU   ASVTFRST
ASVTRS00 EQU   ASVT+520
ASVTASVT EQU   ASVT+512
ASVTBEGN EQU   ASVT+512
@NM00010 EQU   ASVT
ASMRSV12 EQU   ASMVT+1000
ASMSAVE  EQU   ASMVT+928
ASMWKSA7 EQU   ASMVT+848
ASMWKSA6 EQU   ASMVT+768
ASMACEPC EQU   ASMVT+344
ASMSWKPC EQU   ASMVT+328
ASMBWKPC EQU   ASMVT+312
ASMRSV10 EQU   ASMVT+280
ASMRSV8  EQU   ASMVT+188
ASMVSAMW EQU   ASMVT+184
ASMRSV7  EQU   ASMVT+92
ASMRSV6  EQU   ASMVT+48
ASMWARM  EQU   ASMFLAG2
ASMQUICK EQU   ASMFLAG2
ASMNOTPT EQU   ASMFLAG2
ASMNOTMR EQU   ASMFLAG2
ASMNOSAV EQU   ASMFLAG2
ASMCALLQ EQU   ASMFLAG2
ASMPLPAS EQU   ASMFLAG1
ASMCOMMF EQU   ASMFLAG1
ASMPLPAF EQU   ASMFLAG1
ASMNODPX EQU   ASMFLAG1
ASMRSV1  EQU   ASMFLAG1
ASMNOLCL EQU   ASMFLAG1
ASMNOCWQ EQU   ASMFLAG1
ASMDUPLX EQU   ASMFLAG1
ASCBEND  EQU   ASCB+208
ASCBSRBT EQU   ASCB+200
ASCBSWTL EQU   ASCB+196
ASCBRS14 EQU   ASCB+195
ASCBSMCT EQU   ASCB+194
ASCBRS12 EQU   ASCB+192
ASCBPCTT EQU   ASCB+188
ASCBVGTT EQU   ASCB+184
ASCBRV43 EQU   ASCBSRQ4
ASCBRV42 EQU   ASCBSRQ4
ASCBRV41 EQU   ASCBSRQ4
ASCBRV40 EQU   ASCBSRQ4
ASCBRV39 EQU   ASCBSRQ4
ASCBRV38 EQU   ASCBSRQ4
ASCBRV37 EQU   ASCBSRQ4
ASCBRV36 EQU   ASCBSRQ4
ASCBRV35 EQU   ASCBSRQ3
ASCBRV34 EQU   ASCBSRQ3
ASCBRV33 EQU   ASCBSRQ3
ASCBRV32 EQU   ASCBSRQ3
ASCBRV31 EQU   ASCBSRQ3
ASCBRV30 EQU   ASCBSRQ3
ASCBRV29 EQU   ASCBSRQ3
ASCBRV28 EQU   ASCBSRQ3
ASCBRV27 EQU   ASCBSRQ2
ASCBRV26 EQU   ASCBSRQ2
ASCBRV25 EQU   ASCBSRQ2
ASCBRV24 EQU   ASCBSRQ2
ASCBRV23 EQU   ASCBSRQ2
ASCBRV22 EQU   ASCBSRQ2
ASCBRV21 EQU   ASCBSRQ2
ASCBRV20 EQU   ASCBSRQ2
ASCBRV19 EQU   ASCBSRQ1
ASCBRV18 EQU   ASCBSRQ1
ASCBRV17 EQU   ASCBSRQ1
ASCBRV16 EQU   ASCBSRQ1
ASCBRV15 EQU   ASCBSRQ1
ASCBRV14 EQU   ASCBSRQ1
ASCBRV13 EQU   ASCBSRQ1
ASCBSTA  EQU   ASCBSRQ1
ASCBJBNS EQU   ASCB+176
ASCBJBNI EQU   ASCB+172
ASCBMCC  EQU   ASCB+168
ASCBRTWA EQU   ASCB+164
ASCBIQEA EQU   ASCB+160
ASCBXMPQ EQU   ASCB+156
ASCBRS01 EQU   ASCB+154
ASCBFMCT EQU   ASCB+152
ASCBOUXB EQU   ASCB+148
ASCBOUCB EQU   ASCB+144
ASCBMECB EQU   ASCB+140
ASCBQECB EQU   ASCB+136
ASCBLSQH EQU   ASCBLKGP+4
ASCBLOCK EQU   ASCBLKGP
ASCBTCBS EQU   ASCB+124
ASCBNVSC EQU   ASCB+122
ASCBVSC  EQU   ASCB+120
ASCBSRBS EQU   ASCB+118
ASCBSSRB EQU   ASCB+116
ASCBRV06 EQU   ASCBFLG2
ASCBRV05 EQU   ASCBFLG2
ASCBRV04 EQU   ASCBFLG2
ASCBSNQS EQU   ASCBFLG2
ASCBS2S  EQU   ASCBFLG2
ASCBCEXT EQU   ASCBFLG2
ASCBPXMT EQU   ASCBFLG2
ASCBXMPT EQU   ASCBFLG2
ASCBRF07 EQU   ASCBDSP1
ASCBRF06 EQU   ASCBDSP1
ASCBRF05 EQU   ASCBDSP1
ASCBRF04 EQU   ASCBDSP1
ASCBRF03 EQU   ASCBDSP1
ASCBRF02 EQU   ASCBDSP1
ASCBFAIL EQU   ASCBDSP1
ASCBNOQ  EQU   ASCBDSP1
ASCBSWCT EQU   ASCB+112
ASCBASXB EQU   ASCB+108
ASCBTMCH EQU   ASCB+104
ASCBNSWP EQU   ASCBFLG1
ASCBTYP1 EQU   ASCBFLG1
ASCBSTND EQU   ASCBFLG1
ASCBABNT EQU   ASCBFLG1
ASCBTERM EQU   ASCBFLG1
ASCBS3S  EQU   ASCBFLG1
ASCBCMSH EQU   ASCBFLG1
ASCBTOFF EQU   ASCBFLG1
ASCBRF01 EQU   ASCBRCTF
ASCBTMLW EQU   ASCBRCTF
ASCBOUT  EQU   ASCBRCTF
ASCBWAIT EQU   ASCBRCTF
ASCBRV08 EQU   ASCBRCTF
ASCBFQU  EQU   ASCBRCTF
ASCBFRS  EQU   ASCBRCTF
ASCBTMNO EQU   ASCBRCTF
ASCBAFFN EQU   ASCBFW1
ASCBDUMP EQU   ASCB+96
ASCBRV44 EQU   ASCB+92
ASCBUBET EQU   ASCB+88
ASCBECB  EQU   ASCB+84
ASCBJSTL EQU   ASCB+80
ASCBEWST EQU   ASCB+72
ASCBEJST EQU   ASCB+64
ASCBTSB  EQU   ASCB+60
ASCBCSCB EQU   ASCB+56
ASCBRSMA EQU   ASCBRSM+1
ASCBRV54 EQU   ASCBRSMF
ASCBRV53 EQU   ASCBRSMF
ASCBRV52 EQU   ASCBRSMF
ASCBRV51 EQU   ASCBRSMF
ASCBVEQR EQU   ASCBRSMF
ASCBN2LP EQU   ASCBRSMF
ASCB1LPU EQU   ASCBRSMF
ASCB2LPU EQU   ASCBRSMF
ASCBLDA  EQU   ASCB+48
ASCBSTOR EQU   ASCB+44
ASCBDP   EQU   ASCB+43
ASCBRV07 EQU   ASCB+42
ASCBIOSM EQU   ASCB+40
ASCBSEQN EQU   ASCB+38
ASCBASID EQU   ASCB+36
ASCBCPUS EQU   ASCB+32
ASCBSPL  EQU   ASCB+28
ASCBIOSP EQU   ASCB+24
ASCBSYNC EQU   ASCBSUPC+4
ASCBSVRB EQU   ASCBSUPC
ASCBCMSF EQU   ASCB+12
ASCBBWDP EQU   ASCB+8
ASCBFWDP EQU   ASCB+4
ASCBASCB EQU   ASCB
ASCBEGIN EQU   ASCB
AIACEPTR EQU   AIALPMEP
AIASLOT  EQU   AIASSID+1
@NM00005 EQU   AIASSID
@NM00004 EQU   AIALSID
AIARCSN  EQU   AIANXAIA+2
AIACYL   EQU   AIANXAIA
AIARSV9  EQU   AIAFLG3
AIARSV8  EQU   AIAFLG3
AIARSV7  EQU   AIAFLG3
AIALPMEC EQU   AIAFLG3
AIARSV6  EQU   AIAFLG3
AIATRPSP EQU   AIAFLG3
AIAPRINO EQU   AIAFLG3
AIARSV5  EQU   AIAFLG3
AIABADID EQU   AIAFLG2
AIAERROR EQU   AIAFLG2
AIASECER EQU   AIAFLG2
AIAPRIER EQU   AIAFLG2
AIARSV4  EQU   AIAFLG2
AIAIORTY EQU   AIAFLG2
AIATERMR EQU   AIAFLG2
AIAFRAUX EQU   AIAFLG2
AIARSV1  EQU   AIAFLG1
AIASWPFX EQU   AIAFLG1
AIAPAGDS EQU   AIAFLG1
AIALSQA  EQU   AIAFLG1
AIADUPLX EQU   AIAFLG1
AIAVIO   EQU   AIAFLG1
AIAPRIV  EQU   AIAFLG1
AIAWRITE EQU   AIAFLG1
@NM00003 EQU   ACE+40
ACEVLSID EQU   ACESRCID+1
@NM00002 EQU   ACESRCID
ACETLPME EQU   ACERPN
ACERSV10 EQU   ACEFLG3
ACERSV9  EQU   ACEFLG3
ACERSV8  EQU   ACEFLG3
ACELPMEC EQU   ACEFLG3
ACERSV7  EQU   ACEFLG3
ACERSV6  EQU   ACEFLG3
ACEPRINO EQU   ACEFLG3
ACEGRPRQ EQU   ACEFLG3
ACERSV5  EQU   ACEFLG1
ACERSV4  EQU   ACEFLG1
ACERSV3  EQU   ACEFLG1
ACERSV2  EQU   ACEFLG1
ACENOACT EQU   ACEFLG1
ACEOVRID EQU   ACEFLG1
ACETRPWT EQU   ACEFLG1
ACEUSYM  EQU   ACEFLG1
ADPLEXT  EQU   ABDPL+52
ADPLFMT2 EQU   ABDPL+48
ADPLFMT1 EQU   ABDPL+44
ADPLCOM4 EQU   ABDPL+40
ADPLCOM3 EQU   ABDPL+36
ADPLCOM2 EQU   ABDPL+32
ADPLCOM1 EQU   ABDPL+28
@NM00001 EQU   ADPLFLAG
ADPLSNPR EQU   ADPLFLAG
ADPLSBPL EQU   ABDPL+6
ADPLTCB  EQU   ABDPL
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00108 EQU   @RC00102
@RC00157 EQU   @RC00155
@RC00173 EQU   @RC00171
@RF00257 EQU   @RC00251
@RC00296 EQU   @RC00294
@RF00491 EQU   @RC00485
@RT00859 EQU   ACCFQPA
@RC00751 EQU   @RC00749
@PB00008 EQU   @EL00007
@PB00010 EQU   @EL00009
@RC00797 EQU   @RC00751
@RC00815 EQU   @RC00751
@ENDDATA EQU   *
         END   ILRFMT00,(C'PLS1952',0701,78136)
