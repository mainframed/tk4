         TITLE 'TEST STEP CONDITION CODES                              *
                        '
IEFBB402 CSECT ,                                                01S0001
@MAINENT DS    0H                                               01S0001
         USING *,@15                                            01S0001
         B     @PROLOG                                          01S0001
         DC    AL1(16)                                          01S0001
         DC    C'IEFBB402  74.318'                              01S0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                  01S0001
         BALR  @12,0                                            01S0001
@PSTART  DS    0H                                               01S0001
         USING @PSTART,@12                                      01S0001
         L     @00,@SIZDATD                                     01S0001
         MODESET EXTKEY=SCHED,SAVEKEY=(2)
         GSPACE   R,LV=(0)
         LR    @11,@01                                          01S0001
         USING @DATD,@11                                        01S0001
         ST    @13,@SA00001+4                                   01S0001
         STC   @02,@OLDKEY                                      01S0001
         MODESET KEYADDR=(2)
         LM    @00,@02,20(@13)                                  01S0001
         ST    @11,8(,@13)                                      01S0001
         LR    @13,@11                                          01S0001
         MODESET EXTKEY=ZERO
         MVC   @PC00001(8),0(@01)                               01S0001
         MODESET EXTKEY=SCHED
*RETCODE = ZERO;                       /*INIT RETURN CODE FIELD      */
         SLR   RETCODE,RETCODE                                  01S0021
*EPACORE = EPACORE && EPACORE;         /*CLEAR SWA EPA CORE          */
         XC    EPACORE(16),EPACORE                              01S0022
*SWEPAPTR = ADDR(EPACORE);             /*INIT PTR TO SWA EPA         */
         LA    @10,EPACORE                                      01S0023
         ST    @10,SWEPAPTR                                     01S0023
*SCTPTR = LCTSCTAD;                    /*PTR TO SCT                  */
         L     @10,@PC00001                                     01S0024
         L     @10,LCTPTR(,@10)                                 01S0024
         L     SCTPTR,LCTSCTAD(,@10)                            01S0024
*SAVESCTP = SCTPTR;                    /*SAVE AREA FOR SCT PTR       */
         LR    SAVESCTP,SCTPTR                                  01S0025
*JCTPTR = LCTJCTAD;                    /*PTR TO JCT                  */
         L     JCTPTR,LCTJCTAD(,@10)                            01S0026
*STOPSW = OFF;                         /*INIT STOP PROCESSING SWITCH */
         NI    STOPSW,B'11110111'                               01S0027
*IF JCTABEND = ON THEN                 /*ABEND HAS OCCURRED          */
         TM    JCTABEND(JCTPTR),B'00001000'                     01S0028
         BNO   @RF00028                                         01S0028
*  DO;                                                          01S0029
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - ABENDCHK                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - PROCESS EVEN/ONLY IF ABEND OCCURRED           */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*   THIS ROUTINE IS ENTERED IF THE JCT INDICATES THAT AN ABEND HAS */
*/*   OCCURRED. IT DETERMINES WHETHER THE CURRENT STEP SHOULD BE     */
*/*   RUN OR BYPASSED.                                               */
*/*                                                                  */
*/*   OPERATION -                                                    */
*/*     THIS ROUTINE DETERMINES THAT A STEP SHOULD BE BYPASSED IF:   */
*/*       .A TIMER ABEND OCCURRED AND THERE IS NO STEP TIME LEFT     */
*/*       .EVEN OR ONLY WAS NOT SPECIFIED                            */
*/*     THIS ROUTINE DETERMINES THAT A STEP SHOULD BE RUN IF EVEN    */
*/*     OR ONLY WAS SPECIFIED AND THERE ARE NO OTHER CONDITION       */
*/*     CODES.                                                       */
*/*     IF EVEN OR ONLY WAS SPECIFIED AND CONDITION CODES            */
*/*     EXIST, FURTHER PROCESSING IS NECESSARY.                      */
*/*                                                                  */
*/* ENTRY - IN-LINE SEGMENT                                          */
*/*                                                                  */
*/*   PURPOSE - TO DETERMINE IF THE STEP SHOULD BE RUN OR BYPASSED   */
*/*             IF AN ABEND OCCURRED                                 */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*     SCT OF STEP BEING PROCESSED                                  */
*/*     STOPSW - TURNED ON IF NO FURTHER PROCESSING IS NECESSARY     */
*/*                                                                  */
*/* EXITS -                                                          */
*/*                                                                  */
*/*   CONDITIONS -                                                   */
*/*     STEP SHOULD BE BYPASSED BECAUSE EVEN OR ONLY WERE NOT        */
*/*     SPECIFIED OR BECAUSE THERE IS NO STEP TIME LEFT              */
*/*   OUTPUT -                                                       */
*/*     SCT UPDATED -                                                */
*/*       SCTABCAN SET TO 1                                          */
*/*       INCMSSTS SET TO 1                                          */
*/*     STOPSW SET TO 1 TO INDICATE NO FURTHER PROCESSING NEEDED     */
*/*   RETURN CODE - 8                                                */
*/*                                                                  */
*/*   CONDITIONS -                                                   */
*/*     STEP SHOULD BE RUN(EVEN/ONLY SPECIFIED & NO MORE COND CODES) */
*/*   OUTPUT -                                                       */
*/*     STOPSW SET TO 1 TO INDICATE NO FURTHER PROCESSING NEEDED     */
*/*   RETURN CODE - 0                                                */
*/*                                                                  */
*/*   CONDITIONS -                                                   */
*/*     EVEN/ONLY SPECIFIED BUT MORE COND CODES EXIST WHICH MUST     */
*/*     BE PROCESSED                                                 */
*/*   OUTPUT - NONE                                                  */
*/*   RETURN CODE - 0                                                */
*/*                                                                  */
*/********************************************************************/
*CANSW = OFF;                          /*INIT CANCEL STEP SWITCH     */
         NI    CANSW,B'10111111'                                02S0030
*IF LCTTSTR3 = ZERO24 &                /*TIMER ABEND                 */
*   LCTTSTL3 = ZERO24 THEN             /*AND NO TIME LEFT FOR STEP   */
         CLC   LCTTSTR3(3,@10),ZERO24                           02S0031
         BNE   @RF00031                                         02S0031
         CLC   LCTTSTL3(3,@10),ZERO24                           02S0031
         BNE   @RF00031                                         02S0031
*  CANSW = ON;                         /*INDICATE TO CANCEL STEP     */
         OI    CANSW,B'01000000'                                02S0032
*ELSE                                  /*NOT TIMER ABEND OR TIME LEFT*/
*  IF SCTSDPOP(8) ^= OFF8 ×                                     02S0033
*      (SCTEVEN = OFF &                                         02S0033
*      SCTONLY = OFF) THEN             /*EVEN OR ONLY NOT SPECIFIED  */
         B     @RC00031                                         02S0033
@RF00031 CLI   SCTSDPOP+42(SCTPTR),B'00000000'                  02S0033
         BNE   @RT00033                                         02S0033
         LA    @10,SCTCDENT(,SCTPTR)                            02S0033
         TM    SCTEVEN+42(@10),B'00000011'                      02S0033
         BNZ   @RF00033                                         02S0033
@RT00033 DS    0H                                               02S0034
*    CANSW = ON;                       /*INDICATE TO CANCEL STEP     */
         OI    CANSW,B'01000000'                                02S0034
*  ELSE                                /*EVEN OR ONLY SPECIFIED      */
*    IF SCTSDPOP(1) = ZEROOP THEN      /*ANY COND CODES SPECIFIED    */
         B     @RC00033                                         02S0035
@RF00033 CLI   SCTSDPOP(SCTPTR),B'00000000'                     02S0035
         BNE   @RF00035                                         02S0035
*      STOPSW = ON;                    /*NO,PROCESSING COMPLETE      */
         OI    STOPSW,B'00001000'                               02S0036
*    ELSE;                             /*COND CODES TO BE PROCESSED  */
@RF00035 DS    0H                                               02S0038
*IF CANSW = ON THEN                    /*STEP TO BE CANCELLED        */
@RC00033 DS    0H                                               02S0038
@RC00031 TM    CANSW,B'01000000'                                02S0038
         BNO   @RF00038                                         02S0038
*  DO;                                                          02S0039
*    STOPSW = ON;                      /*INDICATE PROCESSING DONE    */
         OI    STOPSW,B'00001000'                               02S0040
*    SCTSDPOP(8) = SCTSDPOP(8) && SCTSDPOP(8); /*0 8TH COND CODE SLOT*/
         XC    SCTSDPOP+42(1,SCTPTR),SCTSDPOP+42(SCTPTR)        02S0041
*    SCTABCAN = ON;                    /*INDICATE STEP CANCELLED     */
         LA    @10,SCTCDENT(,SCTPTR)                            02S0042
         OI    SCTABCAN+42(@10),B'00010000'                     02S0042
*    INCMSSTS = ON;                    /*INDICATE STEP BYPASSED      */
         OI    INCMSSTS(SCTPTR),B'00000001'                     02S0043
*    RETCODE = BYPASS;                 /*SET BYPASS RETURN CODE      */
         LA    RETCODE,8                                        02S0044
*  END;                                                         02S0045
*  END;                                                         01S0046
*ELSE                                  /*JOB DID NOT ABEND           */
*  IF SCTSDPOP(8) = OFF8 THEN          /*EVEN/ONLY INFO SUPPLIED     */
         B     @RC00028                                         01S0047
@RF00028 CLI   SCTSDPOP+42(SCTPTR),B'00000000'                  01S0047
         BNE   @RF00047                                         01S0047
*    IF SCTONLY = ON THEN              /*ONLY SPECIFIED              */
         LA    @10,SCTCDENT(,SCTPTR)                            01S0048
         AL    @10,@CF00400                                     01S0048
         TM    SCTONLY(@10),B'00000001'                         01S0048
         BNO   @RF00048                                         01S0048
*      DO;                             /*CANCEL STEP                 */
*        STOPSW = ON;                  /*INDICATE TO STOP PROCESSING */
         OI    STOPSW,B'00001000'                               01S0050
*        SCTONLYC = ON;                /*STEP CANCELLED DUE TO ONLY  */
         OI    SCTONLYC(@10),B'00001000'                        01S0051
*        FAILCODE = ONLYCANC;          /*SET STEP REASON CODE 21     */
         L     @10,@PC00001+4                                   01S0052
         MVC   FAILCODE(2,@10),@CH00085                         01S0052
*        RETCODE = BYPASS;             /*SET RETURN CODE 8           */
         LA    RETCODE,8                                        01S0053
*      END;                                                     01S0054
*    ELSE;                             /*ONLY NOT SPECIFIED          */
@RF00048 DS    0H                                               01S0056
*  ELSE;                               /*NO EVEN/ONLY INFO SUPPLIED  */
@RF00047 DS    0H                                               01S0057
*IF STOPSW = OFF THEN                  /*MORE PROCESSING TO DO       */
@RC00028 TM    STOPSW,B'00001000'                               01S0057
         BNZ   @RF00057                                         01S0057
*  IF SCTSDPOP(1) ^= ZEROOP THEN       /*COND CODES SUPPLIED         */
         CLI   SCTSDPOP(SCTPTR),B'00000000'                     01S0058
         BE    @RF00058                                         01S0058
*    DO;                                                        01S0059
*      IF SCTSNAME = CKPTRSRT THEN     /*CHECKPOINT/RESTART STEP     */
         CLC   SCTSNAME(8,SCTPTR),@CC00073                      01S0060
         BNE   @RF00060                                         01S0060
*        STOPSW = ON;                  /*DO NOT PROCESS FURTHER      */
         OI    STOPSW,B'00001000'                               01S0061
*      IF SCTDISKA = JCTSDKAD THEN     /*THIS IS FIRST STEP          */
@RF00060 CLC   SCTDISKA(3,SCTPTR),JCTSDKAD(JCTPTR)              01S0062
         BNE   @RF00062                                         01S0062
*        STOPSW = ON;                  /*DO NOT PROCESS FURTHER      */
         OI    STOPSW,B'00001000'                               01S0063
*      IF STOPSW = OFF THEN            /*MORE PROCESSING TO DO       */
@RF00062 TM    STOPSW,B'00001000'                               01S0064
         BNZ   @RF00064                                         01S0064
*        DO;                           /*SET UP TO CHECK COND CODES  */
*          ALLSTEP = OFF;              /*INIT LOOP CONTROL SWITCH    */
         NI    ALLSTEP,B'01111111'                              01S0066
*          LOOPCTR = EIGHT;            /*EIGHT POSSIBLE COND CODES   */
         LA    LOOPCTR,8                                        01S0067
*          DO CTR = 1 TO LOOPCTR       /*CHECK COND CODES            */
*             WHILE(ALLSTEP = OFF & SCTSDPOP(CTR) ^= ZEROOP);   01S0068
         LA    CTR,1                                            01S0068
         B     @DE00068                                         01S0068
@DL00068 TM    ALLSTEP,B'10000000'                              01S0068
         BNZ   @DC00068                                         01S0068
         LR    @10,CTR                                          01S0068
         MH    @10,@CH00385                                     01S0068
         ST    @10,@TF00001                                     01S0068
         ALR   @10,SCTPTR                                       01S0068
         CLI   SCTSDPOP-6(@10),B'00000000'                      01S0068
         BE    @DC00068                                         01S0068
*            IF SCTSDPSA(CTR) = ZERO24 THEN /*CHECK CODE AGAINST ALL
*                                           PREVIOUSLY RUN STEPS?    */
         LR    @10,SCTPTR                                       01S0069
         AL    @10,@TF00001                                     01S0069
         CLC   SCTSDPSA-6(3,@10),ZERO24                         01S0069
         BNE   @RF00069                                         01S0069
*              ALLSTEP = ON;           /*YES,EXIT LOOP               */
         OI    ALLSTEP,B'10000000'                              01S0070
*          END;                                                 01S0071
@RF00069 AL    CTR,@CF00053                                     01S0071
@DE00068 CR    CTR,LOOPCTR                                      01S0071
         BNH   @DL00068                                         01S0071
@DC00068 DS    0H                                               01S0072
*          IF ALLSTEP =ON THEN         /*AT LEAST 1 COND CODE TO BE
*                                        CHECKED AGAINST ALL STEPS   */
         TM    ALLSTEP,B'10000000'                              01S0072
         BNO   @RF00072                                         01S0072
*            DO;                                                01S0073
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - CHKCOND1                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - CHECK COND CODES AGAINST ALL STEPS            */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*   THIS ROUTINE CHECKS ALL PREVIOUSLY RUN STEPS TO DETERMINE IF   */
*/*   A COND CODE TEST SHOULD BE MADE, AND IF SO, IT CALLS A         */
*/*   SUBROUTINE TO MAKE THE TEST.                                   */
*/*                                                                  */
*/*   OPERATION -                                                    */
*/*     THIS ROUTINE IS ENTERED IF AT LEAST ONE OF THE CONDITION     */
*/*     CODES SPECIFIED MUST BE CHECKED AGAINST THE COND CODES       */
*/*     RETURNED BY ALL PREVIOUSLY RUN STEPS. IT READS IN THE SCT    */
*/*     OF EACH PREVIOUSLY RUN STEP AND FOR EACH:                    */
*/*       .DETERMINES IF A COND CODE TEST IS REQUIRED. THE TEST      */
*/*        SHOULD BE MADE IF (1) THE COND CODE IS TO BE CHECKED      */
*/*        AGAINST ALL STEPS(SCTSDPSA=0) OR THE COND CODE IS TO      */
*/*        BE CHECKED AGAINST THIS SPECIFIC STEP(SCTSDPSA=SVA OF THE */
*/*        SCT THAT WAS READ IN), AND (2) THE STEP REPRESENTED BY THE*/
*/*        SCT THAT WAS READ IN WAS NOT CANCELLED, WAS RUN, AND DID  */
*/*        NOT ABEND.                                                */
*/*       .IF THE TEST SHOULD BE MADE,CALLS SUBROUTINE TESTCODE FOR  */
*/*        EACH CONDITION CODE THAT MUST BE CHECKED AGAINST THE STEP.*/
*/*                                                                  */
*/* ENTRY - IN-LINE SUBROUTINE                                       */
*/*                                                                  */
*/*   PURPOSE - SEE FUNCTION                                         */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*     SCT OF CURRENT STEP                                          */
*/*     LOOPCTR - MAXIMUM NUMBER OF COND CODES FOR CURRENT STEP      */
*/*     JCT - FOR PTR TO FIRST SCT SVA                               */
*/*                                                                  */
*/* EXITS -                                                          */
*/*   SEE SPECIFICATION OF SEGMENT TESTCODE FOR POSSIBLE EXIT        */
*/*   CONDITIONS                                                     */
*/*                                                                  */
*/********************************************************************/
*ENDSW = OFF;                          /*INIT NO MORE STEPS SWITCH   */
         NI    ENDSW,B'11011111'                                02S0074
*SVASCT = JCTSDKAD;                    /*PTR TO FIRST SCT SVA        */
         MVC   SVASCT(3),JCTSDKAD(JCTPTR)                       02S0075
*SAVSCTAD = SCTDISKA;                  /*SAVE CURRENT SCT SVA        */
         SLR   SAVSCTAD,SAVSCTAD                                02S0076
         ICM   SAVSCTAD,7,SCTDISKA(SCTPTR)                      02S0076
*DO WHILE(ENDSW=OFF & RETCODE = ZERO); /*PROCESS STEP COND CODES     */
         B     @DE00077                                         02S0077
@DL00077 DS    0H                                               02S0078
*  CALL READSCT;                       /*READ SCT INTO CORE          */
         BAL   @14,READSCT                                      02S0078
*  SCTPTR = SCTP;                      /*POINT TO READ IN SCT        */
         L     SCTPTR,SCTP                                      02S0079
*  IF SCTSTSRT = ON &                                           02S0080
*     SCTSTPND = ON &                  /*STEP WAS RUN                */
*     INCMSSTS = OFF &                 /*STEP WAS NOT CANCELLED      */
*     (SCTSDPOP(8) ^= OFF8 ×                                    02S0080
*      SCTABEND=OFF) THEN              /*STEP DID NOT ABEND          */
         TM    SCTSTSRT(SCTPTR),B'11000000'                     02S0080
         BNO   @RF00080                                         02S0080
         TM    INCMSSTS(SCTPTR),B'00000001'                     02S0080
         BNZ   @RF00080                                         02S0080
         CLI   SCTSDPOP+42(SCTPTR),B'00000000'                  02S0080
         BNE   @RT00080                                         02S0080
         LA    @10,SCTCDENT(,SCTPTR)                            02S0080
         TM    SCTABEND+42(@10),B'00000100'                     02S0080
         BNZ   @RF00080                                         02S0080
@RT00080 DS    0H                                               02S0081
*    DO;                                                        02S0081
*      SCTPTR = SAVESCTP;              /*RESTORE PTR TO CURRENT SCT  */
         LR    SCTPTR,SAVESCTP                                  02S0082
*      DO CTR = 1 TO LOOPCTR           /*PROCESS ALL COND CODES      */
*         WHILE(RETCODE=ZERO & SCTSDPOP(CTR)^=ZEROOP);          02S0083
         LA    CTR,1                                            02S0083
         B     @DE00083                                         02S0083
@DL00083 LTR   RETCODE,RETCODE                                  02S0083
         BNZ   @DC00083                                         02S0083
         LR    @10,CTR                                          02S0083
         MH    @10,@CH00385                                     02S0083
         ST    @10,@TF00001                                     02S0083
         ALR   @10,SCTPTR                                       02S0083
         CLI   SCTSDPOP-6(@10),B'00000000'                      02S0083
         BE    @DC00083                                         02S0083
*        IF SCTSDPSA(CTR) = ZERO24 ×   /*PROCESS ALL PREVIOUS STEPS  */
*          SCTSDPSA(CTR) = SVASCT THEN /*OR PROCESS THIS STEP ONLY   */
         LR    @10,SCTPTR                                       02S0084
         AL    @10,@TF00001                                     02S0084
         CLC   SCTSDPSA-6(3,@10),ZERO24                         02S0084
         BE    @RT00084                                         02S0084
         LR    @10,SCTPTR                                       02S0084
         AL    @10,@TF00001                                     02S0084
         CLC   SCTSDPSA-6(3,@10),SVASCT                         02S0084
         BNE   @RF00084                                         02S0084
@RT00084 DS    0H                                               02S0085
*          CALL TESTCODE;              /*TEST CONDITION CODE         */
         BAL   @14,TESTCODE                                     02S0085
*        ELSE;                         /*DON'T PROCESS THIS STEP     */
@RF00084 DS    0H                                               02S0087
*      END;                                                     02S0087
         AL    CTR,@CF00053                                     02S0087
@DE00083 CR    CTR,LOOPCTR                                      02S0087
         BNH   @DL00083                                         02S0087
@DC00083 DS    0H                                               02S0088
*    END;                                                       02S0088
*  ELSE                                /*DO NOT PROCESS THIS STEP    */
*    SCTPTR = SAVESCTP;                /*RESTORE PTR TO CURRENT SCT  */
         B     @RC00080                                         02S0089
@RF00080 LR    SCTPTR,SAVESCTP                                  02S0089
*  IF SCTP->SCTANSCT = SAVSCTAD THEN   /*NEXT SCT IS FOR CURRENT STEP*/
@RC00080 L     @10,SCTP                                         02S0090
         SLR   @09,@09                                          02S0090
         ICM   @09,7,SCTANSCT(@10)                              02S0090
         CR    SAVSCTAD,@09                                     02S0090
         BNE   @RF00090                                         02S0090
*    ENDSW = ON;                       /*INDICATE PROCESSING COMPLETE*/
         OI    ENDSW,B'00100000'                                02S0091
*  ELSE                                /*NEXT SCT NOT CURRENT SCT    */
*    SVASCT = SCTP->SCTANSCT;          /*GET SVA OF NEXT SCT FOR READ*/
         B     @RC00090                                         02S0092
@RF00090 L     @10,SCTP                                         02S0092
         MVC   SVASCT(3),SCTANSCT(@10)                          02S0092
*END;                                                           02S0093
@RC00090 DS    0H                                               02S0093
@DE00077 TM    ENDSW,B'00100000'                                02S0093
         BNZ   @DC00077                                         02S0093
         LTR   RETCODE,RETCODE                                  02S0093
         BZ    @DL00077                                         02S0093
@DC00077 DS    0H                                               02S0094
*            END;                                               01S0094
*          ELSE                        /*NO CHECKS AGAINST ALL STEPS */
*            DO;                                                01S0095
         B     @RC00072                                         01S0095
@RF00072 DS    0H                                               01S0096
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - CHKCOND2                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - CHECK COND CODES AGAINST SPECIFIED STEPS      */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*   THIS ROUTINE CHECKS THE STEPS SPECIFIED BY THE USER TO         */
*/*   DETERMINE IF A COND CODE TEST SHOULD BE MADE. IF SO, IT CALLS  */
*/*   A SUBROUTINE TO MAKE THE TEST                                  */
*/*                                                                  */
*/*   OPERATION -                                                    */
*/*     THIS ROUTINE IS ENTERED IF EVERY COND CODE SPECIFIED IS TO   */
*/*     BE CHECKED AGAINST A SPECIFIC STEP (AS OPPOSED TO ALL        */
*/*     PREVIOUSLY RUN STEPS). FOR EACH COND CODE, THE REQUIRED SCT  */
*/*     IS READ INTO CORE. IF THE STEP WAS RUN, DID NOT ABEND, AND   */
*/*     WAS NOT CANCELLED, A SUBROUTINE IS CALLED TO TEST THE COND   */
*/*     CODE.                                                        */
*/*                                                                  */
*/*     NOTE: IF THE STEP TO BE TESTED FOR COND CODE(X+1) IS THE     */
*/*     SAME AS THE STEP TESTED FOR COND CODE(X), THE SAME SCT IS    */
*/*     USED AND, THEREFORE, READ SCT PROCESSING IS BYPASSED.        */
*/*                                                                  */
*/* ENTRY - IN-LINE SEGMENT                                          */
*/*                                                                  */
*/*   PURPOSE - SEE FUNCTION                                         */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*     SCT OF CURRENT STEP                                          */
*/*     LOOPCTR - MAXIMUM NUMBER OF COND CODES FOR CURRENT STEP      */
*/*                                                                  */
*/* EXITS -                                                          */
*/*   SEE SPECIFICATION OF SEGMENT TESTCODE FOR POSSIBLE EXIT        */
*/*   CONDITIONS                                                     */
*/*                                                                  */
*/********************************************************************/
*NOREAD = OFF;                         /*INIT DON'T READ SCT SWITCH  */
         NI    NOREAD,B'11101111'                               02S0096
*DO CTR = 1 TO LOOPCTR                 /*CHECK ALL COND CODES        */
*   WHILE(RETCODE=ZERO & SCTSDPOP(CTR) ^= ZEROOP);              02S0097
         LA    CTR,1                                            02S0097
         B     @DE00097                                         02S0097
@DL00097 LTR   RETCODE,RETCODE                                  02S0097
         BNZ   @DC00097                                         02S0097
         LR    @10,CTR                                          02S0097
         MH    @10,@CH00385                                     02S0097
         ST    @10,@TF00001                                     02S0097
         ALR   @10,SCTPTR                                       02S0097
         CLI   SCTSDPOP-6(@10),B'00000000'                      02S0097
         BE    @DC00097                                         02S0097
*  SVASCT = SCTSDPSA(CTR);             /*SCT SVA OF STEP TO BE TESTED*/
         LR    @10,SCTPTR                                       02S0098
         AL    @10,@TF00001                                     02S0098
         MVC   SVASCT(3),SCTSDPSA-6(@10)                        02S0098
*  IF NOREAD = OFF THEN                /*SCT NOT ALREADY READ IN     */
         TM    NOREAD,B'00010000'                               02S0099
         BNZ   @RF00099                                         02S0099
*    DO;                               /*READ IN SCT                 */
*      TESTSW = OFF;                   /*INIT PERFORM TEST SWITCH    */
         NI    TESTSW,B'11111011'                               02S0101
*      CALL READSCT;                   /*READ SCT RTN                */
         BAL   @14,READSCT                                      02S0102
*      SCTPTR = SCTP;                  /*POINT TO READ IN SCT        */
         L     SCTPTR,SCTP                                      02S0103
*      IF SCTSTSRT = ON &                                       02S0104
*         SCTSTPND = ON &              /*STEP WAS RUN                */
*         INCMSSTS = OFF &             /*STEP WAS NOT CANCELLED      */
*         (SCTSDPOP(8) ^= OFF8 ×                                02S0104
*          SCTABEND=OFF) THEN          /*STEP DID NOT ABEND          */
         TM    SCTSTSRT(SCTPTR),B'11000000'                     02S0104
         BNO   @RF00104                                         02S0104
         TM    INCMSSTS(SCTPTR),B'00000001'                     02S0104
         BNZ   @RF00104                                         02S0104
         CLI   SCTSDPOP+42(SCTPTR),B'00000000'                  02S0104
         BNE   @RT00104                                         02S0104
         LA    @10,SCTCDENT(,SCTPTR)                            02S0104
         TM    SCTABEND+42(@10),B'00000100'                     02S0104
         BNZ   @RF00104                                         02S0104
@RT00104 DS    0H                                               02S0105
*         TESTSW = ON;                                          02S0105
         OI    TESTSW,B'00000100'                               02S0105
*      ELSE;                           /*DONT PROCESS THIS STEP      */
@RF00104 DS    0H                                               02S0107
*      SCTPTR = SAVESCTP;              /*RESTORE PTR TO CURRENT SCT  */
         LR    SCTPTR,SAVESCTP                                  02S0107
*    END;                                                       02S0108
*  ELSE;                               /*SCT READ IN ALREADY         */
@RF00099 DS    0H                                               02S0110
*  IF TESTSW = ON THEN                 /*OK TO TEST STEP COND CODE   */
         TM    TESTSW,B'00000100'                               02S0110
         BNO   @RF00110                                         02S0110
*    CALL TESTCODE;                    /*TEST CONDITION CODE         */
         BAL   @14,TESTCODE                                     02S0111
*  IF CTR ^= LOOPCTR THEN              /*NOT PROCESSING LAST COND
*                                        CODE SLOT                   */
@RF00110 CR    CTR,LOOPCTR                                      02S0112
         BE    @RF00112                                         02S0112
*    IF SCTSDPSA(CTR+1)=SCTSDPSA(CTR) THEN /*NXT CHK AGAINST SAME SCT*/
         LR    @10,CTR                                          02S0113
         MH    @10,@CH00385                                     02S0113
         ST    @10,@TF00001                                     02S0113
         ALR   @10,SCTPTR                                       02S0113
         LR    @02,SCTPTR                                       02S0113
         AL    @02,@TF00001                                     02S0113
         CLC   SCTSDPSA(3,@10),SCTSDPSA-6(@02)                  02S0113
         BNE   @RF00113                                         02S0113
*      NOREAD = ON;                    /*INDICATE NOT TO REREAD SCT  */
         OI    NOREAD,B'00010000'                               02S0114
*    ELSE                              /*NOT SAME SCT        @ZA02128*/
*      NOREAD = OFF;                   /*READ NEXT SCT       @ZA02128*/
         B     @RC00113                                         02S0115
@RF00113 NI    NOREAD,B'11101111'                               02S0115
*END;                                                           02S0116
@RC00113 DS    0H                                               02S0116
@RF00112 AL    CTR,@CF00053                                     02S0116
@DE00097 CR    CTR,LOOPCTR                                      02S0116
         BNH   @DL00097                                         02S0116
@DC00097 DS    0H                                               02S0117
*            END;                                               01S0117
*        END;                                                   01S0118
*      ELSE;                           /*DISCONTINUE PROCESSING      */
@RF00064 DS    0H                                               01S0120
*    END;                                                       01S0120
*  ELSE;                               /*NO COND CODES TO PROCESS    */
@RF00058 DS    0H                                               01S0122
*ELSE;                                 /*DISCONTINUE PROCESSING      */
@RF00057 DS    0H                                               01S0123
*  IF RETCODE = BYPASS THEN            /*STEP TO BE BYPASSED         */
@RC00057 C     RETCODE,@CF00049                                 01S0123
         BNE   @RF00123                                         01S0123
*    LCTTSTR3 = LCTTSTL3;              /*MAKE FAILING STEPS TIME
*                                        AVAILABLE TO INITIATOR      */
         L     @10,@PC00001                                     01S0124
         L     @10,LCTPTR(,@10)                                 01S0124
         MVC   LCTTSTR3(3,@10),LCTTSTL3(@10)                    01S0124
*RETURN CODE(RETCODE);                 /*RETURN RETCODE              */
@RF00123 IC    @02,@OLDKEY                                      01S0125
         L     @13,4(,@13)                                      01S0125
         L     @00,@SIZDATD                                     01S0125
         LR    @01,@11                                          01S0125
         FSPACE   R,LV=(0),A=(1)
         MODESET KEYADDR=(2)
         LR    @15,@05                                          01S0125
         L     @14,12(,@13)                                     01S0125
         LM    @00,@12,20(@13)                                  01S0125
         BR    @14                                              01S0125
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - READSCT                                           */
*/*                                                                  */
*/* DESCRIPTIVE NAME - READ IN SCT                                   */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*   THIS ROUTINE INTERFACES WITH IEFAB4F7 IN ORDER TO READ IN AN   */
*/*   SCT FROM SWA.                                                  */
*/*                                                                  */
*/*   OPERATION - THE OPERATION IS DOCUMENTED BY THE CODE            */
*/*                                                                  */
*/* ENTRY - CLOSED INTERNAL PROCEDURE                                */
*/*                                                                  */
*/*   PURPOSE - SEE FUNCTION                                         */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*     SCTINFO FIELD -                                              */
*/*       SVASCT - ADDRESS OF BLOCK TO BE READ IN                    */
*/*       IDSCT - BLOCK ID - INITIALIZED BY THIS ROUTINE             */
*/*                                                                  */
*/* EXITS -                                                          */
*/*                                                                  */
*/*   CONDITIONS - SCT SUCCESSFULLY READ IN                          */
*/*                                                                  */
*/*     OUTPUT -                                                     */
*/*       SCTP - PTR TO SCT IN CORE                                  */
*/*                                                                  */
*/*     RETURN CODE - NONE                                           */
*/*                                                                  */
*/********************************************************************/
*READSCT: PROC;                                                 02S0126
@EL00001 IC    @02,@OLDKEY                                      02S0126
         L     @13,4(,@13)                                      02S0126
@EF00001 L     @00,@SIZDATD                                     02S0126
         LR    @01,@11                                          02S0126
         FSPACE   R,LV=(0),A=(1)
         MODESET KEYADDR=(2)
@ER00001 LM    @14,@12,12(@13)                                  02S0126
         BR    @14                                              02S0126
READSCT  STM   @14,@12,@SA00002                                 02S0126
*SWACTLS = SWACTLS && SWACTLS;         /*CLEAR IEFAB4F7 FUNCTION MAP */
         LH    @10,SWACTLS                                      02S0127
         N     @10,@CF00569                                     02S0127
         LR    @15,@10                                          02S0127
         XR    @15,@10                                          02S0127
         STH   @15,SWACTLS                                      02S0127
*SWREAD = ON;                          /*INDICATE READ FUNCTION      */
*SWMOD = ON;                           /*INDICATE EPA SUPPLIED       */
         OI    SWREAD,B'00100010'                               02S0129
*CALL IEFAB4F7(SWACTLS,SWEPAPTR,0,ADDR(SCTINFO),ADDR(SCTP),0,ONE); /*
*                                         CALL IEFAB4F7              */
         LA    @10,SWACTLS                                      02S0130
         ST    @10,@AL00001                                     02S0130
         LA    @10,SWEPAPTR                                     02S0130
         ST    @10,@AL00001+4                                   02S0130
         LA    @10,@CF00087                                     02S0130
         ST    @10,@AL00001+8                                   02S0130
         LA    @10,SCTINFO                                      02S0130
         ST    @10,@TF00001                                     02S0130
         LA    @10,@TF00001                                     02S0130
         ST    @10,@AL00001+12                                  02S0130
         LA    @10,SCTP                                         02S0130
         ST    @10,@TF00002                                     02S0130
         LA    @10,@TF00002                                     02S0130
         ST    @10,@AL00001+16                                  02S0130
         LA    @10,@CF00087                                     02S0130
         ST    @10,@AL00001+20                                  02S0130
         LA    @10,@CF00053                                     02S0130
         ST    @10,@AL00001+24                                  02S0130
         L     @15,@CV00056                                     02S0130
         LA    @01,@AL00001                                     02S0130
         BALR  @14,@15                                          02S0130
*END READSCT;                                                   02S0131
@EL00002 DS    0H                                               02S0131
@EF00002 DS    0H                                               02S0131
@ER00002 LM    @14,@12,@SA00002                                 02S0131
         BR    @14                                              02S0131
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - TESTCODE                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - TEST STEP CONDITION CODES                     */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*   THIS ROUTINE COMPARES THE CONDITION CODE OF A PREVIOUSLY RUN   */
*/*   STEP (SCTP->SCTSEXEC) AGAINST THE CONDITION CODE OF THE        */
*/*   CURRENT STEP (SCTSDPCD(CTR)). THE TESTS WHICH MUST BE MADE     */
*/*   (GREATER THAN, LESS THAN, EQUAL) ARE DETERMINED BY THE         */
*/*   DEPENDENCY OPERATOR FIELD IN THE CURRENT SCT (SCTSDPOP(CTR)).  */
*/*                                                                  */
*/*   OPERATION - THE OPERATION IS DOCUMENTED BY THE CODE            */
*/*                                                                  */
*/* ENTRY - CLOSED INTERNAL PROCEDURE                                */
*/*                                                                  */
*/*   PURPOSE - SEE FUNCTION                                         */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*     SCTPTR - PTR TO CURRENT SCT                                  */
*/*     SCTP - PTR TO PREVIOUSLY RUN SCT                             */
*/*     RETCODE - RETURN CODE AREA                                   */
*/*     FAILCODE - REASON CODE AREA                                  */
*/*                                                                  */
*/* EXITS -                                                          */
*/*                                                                  */
*/* EXITS -                                                          */
*/*                                                                  */
*/*   CONDITIONS - ALL TESTS FALSE (NOT SATISFIED)                   */
*/*                                                                  */
*/*     OUTPUT - NONE                                                */
*/*                                                                  */
*/*     RETURN CODE - 0                                              */
*/*                                                                  */
*/*   CONDITIONS - A TEST WAS TRUE                                   */
*/*                                                                  */
*/*     OUTPUT - REASON CODE 22 SET IN FAILCODE                      */
*/*                                                                  */
*/*     RETURN CODE - 8                                              */
*/*                                                                  */
*/********************************************************************/
*TESTCODE: PROC OPTIONS(NOSAVEAREA,NOSAVE);                     02S0132
TESTCODE DS    0H                                               02S0133
*RFY (REG14) RSTD;                                              02S0133
*IF EQUAL = ON &                       /*TEST FOR EQUAL              */
*   SCTSDPCD(CTR) = SCTP->SCTSEXEC THEN /*TEST SATISFIED             */
         LR    @15,CTR                                          02S0134
         MH    @15,@CH00385                                     02S0134
         LA    @10,SCTSDPOP-6(@15,SCTPTR)                       02S0134
         TM    EQUAL(@10),B'10000000'                           02S0134
         BNO   @RF00134                                         02S0134
         ALR   @15,SCTPTR                                       02S0134
         L     @10,SCTP                                         02S0134
         CLC   SCTSDPCD-6(2,@15),SCTSEXEC(@10)                  02S0134
         BNE   @RF00134                                         02S0134
*  RETCODE = BYPASS;                   /*BYPASS THE STEP             */
         LA    RETCODE,8                                        02S0135
*ELSE                                  /*NOT TEST FOR EQUAL          */
*  IF GREATER = ON &                   /*TEST FOR GREATER THAN       */
*     SCTSDPCD(CTR) > SCTP->SCTSEXEC THEN /*TEST SATISFIED           */
         B     @RC00134                                         02S0136
@RF00134 LR    @15,CTR                                          02S0136
         MH    @15,@CH00385                                     02S0136
         LA    @10,SCTSDPOP-6(@15,SCTPTR)                       02S0136
         TM    GREATER(@10),B'00100000'                         02S0136
         BNO   @RF00136                                         02S0136
         ALR   @15,SCTPTR                                       02S0136
         L     @10,SCTP                                         02S0136
         CLC   SCTSDPCD-6(2,@15),SCTSEXEC(@10)                  02S0136
         BNH   @RF00136                                         02S0136
*    RETCODE = BYPASS;                 /*BYPASS THE STEP             */
         LA    RETCODE,8                                        02S0137
*  ELSE                                /*NOT TEST FOR EQ OR GT       */
*    IF LESSTHAN = ON &                /*TEST FOR LESS THAN          */
*       SCTSDPCD(CTR) < SCTP->SCTSEXEC THEN /*TEST SATISFIED         */
         B     @RC00136                                         02S0138
@RF00136 LR    @15,CTR                                          02S0138
         MH    @15,@CH00385                                     02S0138
         LA    @10,SCTSDPOP-6(@15,SCTPTR)                       02S0138
         TM    LESSTHAN(@10),B'01000000'                        02S0138
         BNO   @RF00138                                         02S0138
         ALR   @15,SCTPTR                                       02S0138
         L     @10,SCTP                                         02S0138
         CLC   SCTSDPCD-6(2,@15),SCTSEXEC(@10)                  02S0138
         BNL   @RF00138                                         02S0138
*      RETCODE = BYPASS;               /*BYPASS THE STEP             */
         LA    RETCODE,8                                        02S0139
*    ELSE;                             /*NOT TEST FOR EQ OR GT OR LT */
@RF00138 DS    0H                                               02S0141
*IF RETCODE = BYPASS THEN              /*STEP TO BE BYPASSED         */
@RC00136 DS    0H                                               02S0141
@RC00134 C     RETCODE,@CF00049                                 02S0141
         BNE   @RF00141                                         02S0141
*  FAILCODE = CONDFAIL;                /*SET STEP REASON CODE 22     */
         L     @15,@PC00001+4                                   02S0142
         MVC   FAILCODE(2,@15),@CH00075                         02S0142
*RFY (REG14) UNRSTD;                                            02S0143
*END TESTCODE;                                                  02S0144
@EL00003 DS    0H                                               02S0144
@EF00003 DS    0H                                               02S0144
@ER00003 BR    @14                                              02S0144
*END IEFBB402                                                   01S0145
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (B402SPEC)                                        *
*/*%INCLUDE SYSLIB  (B402DATA)                                        *
*/*%INCLUDE SYSLIB  (IEFALLCT)                                        *
*/*%INCLUDE SYSLIB  (IEFASCTB)                                        *
*/*%INCLUDE SYSLIB  (IEFAJCTB)                                        *
*/*%INCLUDE SYSLIB  (IEFZB436)                                        *
*/*%INCLUDE SYSLIB  (IEFZB505)                                        *
*/*%INCLUDE SYSLIB  (ABENDCHK)                                        *
*/*%INCLUDE SYSLIB  (ABENDSPC)                                        *
*/*%INCLUDE SYSLIB  (CHKCOND1)                                        *
*/*%INCLUDE SYSLIB  (CHK1SPEC)                                        *
*/*%INCLUDE SYSLIB  (CHKCOND2)                                        *
*/*%INCLUDE SYSLIB  (CHK2SPEC)                                        *
*/*%INCLUDE SYSLIB  (READSCT )                                        *
*/*%INCLUDE SYSLIB  (READSPEC)                                        *
*/*%INCLUDE SYSLIB  (TESTCODE)                                        *
*/*%INCLUDE SYSLIB  (TESTSPEC)                                        *
*;                                                              01S0145
@DATA    DS    0H
@CH00385 DC    H'6'
@CH00085 DC    H'21'
@CH00075 DC    H'22'
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    2F
@SA00002 DS    0F
         DS    15F
@AL00001 DS    7A
@TF00001 DS    F
@TF00002 DS    F
IEFBB402 CSECT
         DS    0F
@CF00087 DC    F'0'
@CF00053 DC    F'1'
@CF00049 DC    F'8'
@CF00400 DC    F'42'
@CF00569 DC    XL4'0000FFFF'
@DATD    DSECT
         DS    0D
SCTP     DS    A
SWEPAPTR DS    A
SWACTLS  DS    FL2
         ORG   SWACTLS
SWASN    DS    BL1
SWDEL    EQU   SWACTLS+0
SWREAD   EQU   SWACTLS+0
SWWRT    EQU   SWACTLS+0
SWNEW    EQU   SWACTLS+0
SWFREE   EQU   SWACTLS+0
SWMOD    EQU   SWACTLS+0
SWOLD    EQU   SWACTLS+0
SWCHN    DS    BL1
@NM00120 EQU   SWACTLS+1
         ORG   SWACTLS+2
         DS    CL2
SCTINFO  DS    CL4
         ORG   SCTINFO
SVASCT   DS    CL3
@NM00001 DS    BL1
         ORG   SCTINFO+4
SWITCHES DS    BL1
         ORG   SWITCHES
ALLSTEP  DS    BL1
CANSW    EQU   SWITCHES+0
ENDSW    EQU   SWITCHES+0
NOREAD   EQU   SWITCHES+0
STOPSW   EQU   SWITCHES+0
TESTSW   EQU   SWITCHES+0
         ORG   SWITCHES+1
         DS    CL7
EPACORE  DS    CL16
@OLDKEY  DS    AL1
IEFBB402 CSECT
         DS    0F
@SIZDATD DC    AL1(230)
         DC    AL3(@ENDDATD-@DATD)
@CV00056 DC    V(IEFAB4F7)
         DS    0D
@CC00073 DC    C'IEFDSDRP'
ZERO24   DC    X'000000'
IEFBB402 CSECT
         DS   0H
B402PTCH DC ((@DATA-@PSTART)/20)X'00'
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IEFBB402 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
RETCODE  EQU   @05
LOOPCTR  EQU   @06
CTR      EQU   @04
SCTPTR   EQU   @03
SAVSCTAD EQU   @08
SAVESCTP EQU   @07
JCTPTR   EQU   @02
REG14    EQU   @14
DEPOPS   EQU   0
EQUAL    EQU   DEPOPS
LESSTHAN EQU   DEPOPS
GREATER  EQU   DEPOPS
LCT      EQU   0
LCTQDRTY EQU   LCT
LCTSRTAD EQU   LCT+4
LCTTCBAD EQU   LCT+8
LCTQENTY EQU   LCT+12
@NM00008 EQU   LCTQENTY
LCTJCTAD EQU   LCT+16
LCTSCTAD EQU   LCT+20
LCTSCTDA EQU   LCT+24
LCTWORKA EQU   LCTSCTDA
LCTPSPAR EQU   LCT+28
LCTERROR EQU   LCT+32
LCTERR   EQU   LCTERROR
LCTCMCBA EQU   LCT+52
LCTNSPAD EQU   LCT+56
LCTJFCBH EQU   LCT+57
LCTSMBAD EQU   LCT+60
LCTCOMCD EQU   LCT+68
LCTRTRN  EQU   LCT+72
LCTSREG  EQU   LCTRTRN
@NM00035 EQU   LCT+76
LCTINTSW EQU   @NM00035
LCTTMWRK EQU   LCT+80
LCTTJTU4 EQU   LCTTMWRK
LCTTSTL4 EQU   LCTTMWRK+4
LCTTSTL3 EQU   LCTTSTL4+1
LCTTSTR4 EQU   LCTTMWRK+8
LCTSMF   EQU   LCTTSTR4
LCTTMBYT EQU   LCTSMF
LCTTSTR3 EQU   LCTSMF+1
LCTTSTU4 EQU   LCTTMWRK+12
LCTJOBLB EQU   LCT+96
LCTATLST EQU   LCT+100
LCTECBAD EQU   LCT+328
ECBLIST  EQU   LCTECBAD
LCTIDENT EQU   LCT+332
LCTSPIL  EQU   LCTIDENT+4
LCTALCFG EQU   LCTSPIL+2
LCTTSRB4 EQU   LCT+348
LCTENTR  EQU   LCT+352
LCTEXIT  EQU   LCTENTR
LCTOPSW1 EQU   LCTEXIT
@NM00061 EQU   LCT+356
LCTOPSW2 EQU   @NM00061
LCTJSCB  EQU   LCT+360
LCTOPSW3 EQU   LCTJSCB
LCTJCTDA EQU   LCT+408
LCTSTATA EQU   LCT+416
LCTSTATB EQU   LCT+417
LCTRFB   EQU   LCT+418
@NM00075 EQU   LCT+420
LCTINTS2 EQU   @NM00075+1
INSMSCT  EQU   0
SCTDISKA EQU   INSMSCT
SCTSSTAT EQU   INSMSCT+4
INCMSSTS EQU   SCTSSTAT
SCTSEXEC EQU   INSMSCT+8
SCTANSCT EQU   INSMSCT+20
SCTSNAME EQU   INSMSCT+52
SCTSTYPE EQU   INSMSCT+67
SCTSDPTY EQU   INSMSCT+94
SCTSTAT2 EQU   INSMSCT+104
SCTBCT   EQU   SCTSTAT2
SCTCDENT EQU   INSMSCT+118
SCTSDPCD EQU   SCTCDENT
SCTSDPOP EQU   SCTCDENT+2
SCTSDPSA EQU   SCTCDENT+3
SCTSTEND EQU   INSMSCT+172
SCTSTSRT EQU   SCTSTEND
SCTSTPND EQU   SCTSTEND
@NM00099 EQU   0
SCTABCND EQU   @NM00099
SCTABCAN EQU   SCTABCND
SCTONLYC EQU   SCTABCND
SCTABEND EQU   SCTABCND
SCTEVEN  EQU   SCTABCND
SCTONLY  EQU   SCTABCND
INJMJCT  EQU   0
JCTJSTAT EQU   INJMJCT+5
JCTABEND EQU   JCTJSTAT
INDMCTLG EQU   JCTJSTAT
JCTJBYTE EQU   INJMJCT+7
JCTJMGLV EQU   JCTJBYTE
JCTSDKAD EQU   INJMJCT+32
JCTCCODE EQU   INJMJCT+54
JCTRSW1  EQU   INJMJCT+86
JCTRSW2  EQU   INJMJCT+87
JCTJSB   EQU   INJMJCT+111
JCTSTAT2 EQU   INJMJCT+116
IEFAACTB EQU   0
SWAEPA   EQU   0
SWVAFW   EQU   SWAEPA+4
INDMDSNT EQU   0
LCTPTR   EQU   0
FAILCODE EQU   0
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
SWCHNPTR EQU   SWAEPA+12
SWLNGTH  EQU   SWAEPA+8
SWBLKID  EQU   SWVAFW+3
SWVA     EQU   SWVAFW
SWBLKPTR EQU   SWAEPA
ACTACCNT EQU   IEFAACTB+32
ACTJNFLD EQU   IEFAACTB+31
ACTJTIME EQU   IEFAACTB+28
ACTPRGNM EQU   IEFAACTB+8
@NM00119 EQU   IEFAACTB+7
ACTNEXT  EQU   IEFAACTB+4
ACTIDENT EQU   IEFAACTB+3
ACTDSKAD EQU   IEFAACTB
@NM00118 EQU   INJMJCT+175
JCTVULDP EQU   INJMJCT+172
JCTACODE EQU   INJMJCT+168
JCTPRFMF EQU   INJMJCT+167
JCTTSOID EQU   INJMJCT+160
JCTSSD   EQU   INJMJCT+157
@NM00117 EQU   INJMJCT+156
JCTSRBT  EQU   INJMJCT+152
JCTJMRJD EQU   INJMJCT+149
JCTJMRJT EQU   INJMJCT+146
JCTJMRSS EQU   INJMJCT+143
JCTJMRTL EQU   INJMJCT+140
JCTJMRCL EQU   INJMJCT+139
JCTJMROP EQU   INJMJCT+138
JCTJMRD  EQU   INJMJCT+137
JCTJMR   EQU   INJMJCT+134
JCTCKIDT EQU   INJMJCT+118
JCTCKIDL EQU   INJMJCT+117
@NM00116 EQU   JCTSTAT2
JCTBLP   EQU   JCTSTAT2
JCTPERFM EQU   JCTSTAT2
JCTSWSM  EQU   JCTSTAT2
JCTENDIT EQU   JCTSTAT2
JCTADSPC EQU   JCTSTAT2
JCTSPSYS EQU   JCTSTAT2
@NM00115 EQU   INJMJCT+115
JCTSSTR  EQU   INJMJCT+112
JCTJSBTM EQU   JCTJSB
JCTJSBEX EQU   JCTJSB
JCTJSBAL EQU   JCTJSB
JCTJSBIN EQU   JCTJSB
@NM00114 EQU   JCTJSB
JCTVOLSQ EQU   INJMJCT+110
JCTNRCKP EQU   INJMJCT+108
JCTNTRK  EQU   INJMJCT+107
JCTCKTTR EQU   INJMJCT+104
JCTDEVT  EQU   INJMJCT+100
@NM00113 EQU   INJMJCT+99
JCTSTIOT EQU   INJMJCT+96
JCTSNUMB EQU   INJMJCT+95
JCTQIDNT EQU   INJMJCT+94
JCTEQREG EQU   INJMJCT+92
@NM00112 EQU   INJMJCT+91
JCTDETDA EQU   INJMJCT+88
JCTDSDRA EQU   JCTRSW2
JCTDSOJB EQU   JCTRSW2
JCTDSOCR EQU   JCTRSW2
JCTRESTT EQU   JCTRSW2
JCTNOCKP EQU   JCTRSW2
JCTNORST EQU   JCTRSW2
JCTNARST EQU   JCTRSW2
JCTSYSCK EQU   JCTRSW2
@NM00111 EQU   JCTRSW1
JCTSTEPR EQU   JCTRSW1
JCTCKPTR EQU   JCTRSW1
JCTCKFT  EQU   JCTRSW1
JCTCONTR EQU   JCTRSW1
JCTSTERM EQU   JCTRSW1
JCTWARMS EQU   JCTRSW1
@NM00110 EQU   JCTCCODE+3
JCTJDPOP EQU   JCTCCODE+2
JCTJDPCD EQU   JCTCCODE
@NM00109 EQU   INJMJCT+53
JCTSCT   EQU   INJMJCT+52
JCTSMRBA EQU   INJMJCT+44
@NM00108 EQU   INJMJCT+43
JCTACTAD EQU   INJMJCT+40
@NM00107 EQU   INJMJCT+36
@NM00106 EQU   INJMJCT+35
JCTJCSMF EQU   INJMJCT+31
JCTGDGNT EQU   INJMJCT+28
@NM00105 EQU   INJMJCT+27
JCTPDIP  EQU   INJMJCT+24
JCTJTPTN EQU   INJMJCT+16
JCTJNAME EQU   INJMJCT+8
JCTJPRTY EQU   JCTJBYTE
INCMMGL1 EQU   JCTJMGLV
INCMMGL2 EQU   JCTJMGLV
@NM00104 EQU   JCTJMGLV
INCMALL  EQU   JCTJMGLV
JCTJMGPO EQU   INJMJCT+6
INCMNSET EQU   JCTJSTAT
INCMCAT  EQU   INDMCTLG
INCMSTS  EQU   JCTJSTAT
@NM00103 EQU   JCTJSTAT
JCTJSTPC EQU   JCTJSTAT
@NM00102 EQU   JCTJSTAT
JCTJBLBS EQU   JCTJSTAT
JCTJSRNO EQU   INJMJCT+4
JCTIDENT EQU   INJMJCT+3
JCTDSKAD EQU   INJMJCT
@NM00101 EQU   @NM00099+1
@NM00100 EQU   SCTABCND
@NM00098 EQU   INSMSCT+173
@NM00097 EQU   SCTSTEND
SCTSYSCK EQU   SCTSTEND
@NM00096 EQU   INSMSCT+168
SCTCATCT EQU   INSMSCT+166
@NM00095 EQU   INSMSCT+117
SCTPRFMF EQU   INSMSCT+116
SCTPGMNM EQU   INSMSCT+108
SCTTIOT  EQU   INSMSCT+105
@NM00094 EQU   SCTBCT
SCTJBEND EQU   SCTBCT
SCTSPSYS EQU   SCTBCT
SCTSTPLB EQU   SCTBCT
@NM00093 EQU   SCTBCT
SCTMCVOL EQU   SCTBCT
@NM00092 EQU   SCTBCT
SCTGOTTR EQU   INSMSCT+100
SCTSMF   EQU   INSMSCT+96
@NM00091 EQU   SCTSDPTY+1
SCTSDP   EQU   SCTSDPTY
SCTFSTEP EQU   SCTSDPTY
@NM00090 EQU   SCTSDPTY
@NM00089 EQU   SCTSDPTY
SCTNIUSL EQU   INSMSCT+92
@NM00088 EQU   INSMSCT+90
SCTMSSZE EQU   INSMSCT+88
SCTPCAT  EQU   INSMSCT+84
SCTLDSTB EQU   INSMSCT+80
SCTSRBT  EQU   INSMSCT+76
SCTMSADR EQU   INSMSCT+72
@NM00087 EQU   INSMSCT+71
SCTXBTTR EQU   INSMSCT+68
SCTJSCAT EQU   SCTSTYPE
SCTINITB EQU   SCTSTYPE
SCTSJFHK EQU   SCTSTYPE
SCTOUTMC EQU   SCTSTYPE
SCTINPUT EQU   SCTSTYPE
SCTGOSTP EQU   SCTSTYPE
@NM00086 EQU   INSMSCT+66
SCTNSMSG EQU   INSMSCT+65
SCTSNUMB EQU   INSMSCT+64
@NM00085 EQU   INSMSCT+62
SCTRPACT EQU   INSMSCT+60
SCTSCLPC EQU   INSMSCT+44
@NM00084 EQU   INSMSCT+43
SCTADSTB EQU   INSMSCT+40
@NM00083 EQU   INSMSCT+36
@NM00082 EQU   INSMSCT+35
SCTAFACT EQU   INSMSCT+32
SCTDDNT  EQU   INSMSCT+28
@NM00081 EQU   INSMSCT+27
SCTLSIOT EQU   INSMSCT+24
@NM00080 EQU   INSMSCT+23
@NM00079 EQU   INSMSCT+19
SCTAALOC EQU   INSMSCT+16
@NM00078 EQU   INSMSCT+15
SCTFSIOT EQU   INSMSCT+12
SCTLALOC EQU   INSMSCT+10
SCTSTIME EQU   INSMSCT+5
SCTGRPH  EQU   SCTSSTAT
SCTKEY0  EQU   SCTSSTAT
SCTDORST EQU   SCTSSTAT
SCTNOCKP EQU   SCTSSTAT
SCTNORST EQU   SCTSSTAT
EACAUSER EQU   SCTSSTAT
EAADDRBT EQU   SCTSSTAT
SCTTBLID EQU   INSMSCT+3
LCTLABEL EQU   LCT+504
LCTIWORK EQU   LCT+440
@NM00077 EQU   LCT+436
LCTIMSG  EQU   LCT+432
LCTLBWAP EQU   LCT+428
@NM00076 EQU   LCT+424
LCTSYS   EQU   LCTINTS2
LCTTSIZ  EQU   @NM00075
LCTRFB1  EQU   LCT+419
@NM00074 EQU   LCTRFB
LCTRFBRP EQU   LCTRFB
LCTRFBEF EQU   LCTRFB
LCTRFBMS EQU   LCTRFB
LCTRFBDC EQU   LCTRFB
LCTRFBRV EQU   LCTRFB
LCTRFBCR EQU   LCTRFB
LCTRFBSM EQU   LCTRFB
LCTMFTIO EQU   LCTSTATB
LCTNPKEY EQU   LCTSTATB
LCTSBPOL EQU   LCTSTATB
LCTNREAD EQU   LCTSTATB
LCTWRITE EQU   LCTSTATB
LCTNOATC EQU   LCTSTATB
LCTNOREG EQU   LCTSTATB
LCTECBPB EQU   LCTSTATB
LCTCPART EQU   LCTSTATA
LCTNOGCB EQU   LCTSTATA
LCTNOSDP EQU   LCTSTATA
LCTJCPIB EQU   LCTSTATA
LCTNECBL EQU   LCTSTATA
LCTBTJOB EQU   LCTSTATA
LCTSNOWK EQU   LCTSTATA
LCTSUSPD EQU   LCTSTATA
LCTTIOTI EQU   LCT+412
@NM00073 EQU   LCTJCTDA+3
LCTJCTVA EQU   LCTJCTDA
LCTSSOBA EQU   LCT+404
LCTSTEPL EQU   LCT+400
@NM00072 EQU   LCT+364
@NM00071 EQU   LCTJSCB+1
@NM00070 EQU   LCTOPSW3
@NM00069 EQU   LCTOPSW3
LCTALERR EQU   LCTOPSW3
LCTJNLF  EQU   LCTOPSW3
@NM00068 EQU   LCTOPSW3
LCTNSYS  EQU   LCTOPSW3
LCTRDER  EQU   LCTOPSW3
@NM00067 EQU   LCTOPSW3
@NM00066 EQU   @NM00061+1
LCTENQU  EQU   LCTOPSW2
LCTNORC  EQU   LCTOPSW2
@NM00065 EQU   LCTOPSW2
@NM00064 EQU   LCTOPSW2
@NM00063 EQU   LCTOPSW2
@NM00062 EQU   LCTOPSW2
LCTCRF   EQU   LCTOPSW2
LCTTIMEF EQU   LCTOPSW2
@NM00060 EQU   LCTEXIT+1
@NM00059 EQU   LCTOPSW1
@NM00058 EQU   LCTOPSW1
LCTONEJF EQU   LCTOPSW1
LCTCANF  EQU   LCTOPSW1
@NM00057 EQU   LCTOPSW1
@NM00056 EQU   LCTOPSW1
LCTDWFF  EQU   LCTOPSW1
LCTDPSWA EQU   LCTOPSW1
LCTTSRB3 EQU   LCTTSRB4+1
@NM00055 EQU   LCTTSRB4
@NM00054 EQU   LCT+340
@NM00053 EQU   LCTSPIL+3
@NM00052 EQU   LCTALCFG
@NM00051 EQU   LCTALCFG
@NM00050 EQU   LCTALCFG
@NM00049 EQU   LCTALCFG
@NM00048 EQU   LCTALCFG
@NM00047 EQU   LCTALCFG
LCTMSGWT EQU   LCTALCFG
LCTODSFL EQU   LCTALCFG
LCTDSBCT EQU   LCTSPIL
LCTPIB   EQU   LCTIDENT
@NM00046 EQU   ECBLIST+1
@NM00045 EQU   ECBLIST
LCTJMRAD EQU   LCT+324
LCTASCBA EQU   LCT+320
@NM00044 EQU   LCT+284
QMGR1    EQU   LCT+248
REGSAVE  EQU   LCT+104
@NM00043 EQU   LCTATLST+1
@NM00042 EQU   LCTATLST
@NM00041 EQU   LCTJOBLB+1
@NM00040 EQU   LCTJOBLB
LCTTSTU3 EQU   LCTTSTU4+1
@NM00039 EQU   LCTTSTU4
LCTTTIFJ EQU   LCTTMBYT
@NM00038 EQU   LCTTSTL4
LCTTJTU3 EQU   LCTTJTU4+1
@NM00037 EQU   LCTTJTU4
@NM00036 EQU   @NM00035+1
LCTNDSI  EQU   LCTINTSW
LCTABEND EQU   LCTINTSW
LCTSTOP  EQU   LCTINTSW
LCTSTART EQU   LCTINTSW
LCTMINRG EQU   LCTINTSW
LCTPPAA  EQU   LCTINTSW
LCTPRIV  EQU   LCTINTSW
LCTINPPT EQU   LCTINTSW
@NM00034 EQU   LCTSREG+1
@NM00033 EQU   LCTSREG
LCTCOMD2 EQU   LCTCOMCD+2
LCTCOMD1 EQU   LCTCOMCD
LCTBATMN EQU   LCT+64
@NM00032 EQU   LCTSMBAD+1
@NM00031 EQU   LCTSMBAD
LCTACTON EQU   LCT+59
LCTSNUMB EQU   LCT+58
@NM00030 EQU   LCTJFCBH
@NM00029 EQU   LCTJFCBH
@NM00028 EQU   LCTJFCBH
@NM00027 EQU   LCTJFCBH
@NM00026 EQU   LCTJFCBH
LCTS2FES EQU   LCTJFCBH
LCTS2COP EQU   LCTJFCBH
LCTS2PEM EQU   LCTJFCBH
LCTSTIND EQU   LCTNSPAD
@NM00025 EQU   LCTCMCBA+1
@NM00024 EQU   LCTCMCBA
LCTPARM4 EQU   LCT+48
LCTPARM3 EQU   LCT+44
LCTPARM2 EQU   LCT+40
LCTPARM1 EQU   LCT+36
LCTJCFAL EQU   LCTERR
LCTACOMP EQU   LCTERR
LCTSFAIL EQU   LCTERR
LCTPALCD EQU   LCTERR
LCTSALCD EQU   LCTERR
LCTJFAIL EQU   LCTERR
@NM00023 EQU   LCTPSPAR+1
@NM00022 EQU   LCTPSPAR
@NM00021 EQU   LCTWORKA+3
LCTSCTVA EQU   LCTWORKA
@NM00020 EQU   LCTSCTAD+1
@NM00019 EQU   LCTSCTAD
@NM00018 EQU   LCTJCTAD+1
@NM00017 EQU   LCTJCTAD
@NM00016 EQU   LCTQENTY+1
LCTERRM  EQU   @NM00008
@NM00015 EQU   @NM00008
@NM00014 EQU   @NM00008
@NM00013 EQU   @NM00008
@NM00012 EQU   @NM00008
@NM00011 EQU   @NM00008
@NM00010 EQU   @NM00008
@NM00009 EQU   @NM00008
@NM00007 EQU   LCTTCBAD+1
@NM00006 EQU   LCTTCBAD
@NM00005 EQU   LCTSRTAD+1
@NM00004 EQU   LCTSRTAD
@NM00003 EQU   LCTQDRTY+1
@NM00002 EQU   LCTQDRTY
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00038 EQU   @RC00028
@RC00058 EQU   @RC00057
@RF00141 EQU   @EL00003
@RC00064 EQU   @RC00058
@RC00072 EQU   @RC00064
@ENDDATA EQU   *
         END   IEFBB402,(C'PLS2035',0603,74318)
