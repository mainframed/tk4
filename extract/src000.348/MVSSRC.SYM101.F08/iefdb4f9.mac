         TITLE 'IEFDB4F9 - SMF DYNAMIC DD ROUTINE                      *
                        '
IEFDB4F9 CSECT ,                                                01S0001
@MAINENT DS    0H                                               01S0001
         USING *,@15                                            01S0001
         B     @PROLOG                                          01S0001
         DC    AL1(16)                                          01S0001
         DC    C'IEFDB4F9  75.024'                              01S0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                  01S0001
         BALR  @10,0                                            01S0001
@PSTART  LA    @11,4095(,@10)                                   01S0001
         USING @PSTART,@10                                      01S0001
         USING @PSTART+4095,@11                                 01S0001
         L     @00,@SIZDATD                                     01S0001
         GSPACE   R,LV=(0)
         LR    @09,@01                                          01S0001
         USING @DATD,@09                                        01S0001
         ST    @13,@SA00001+4                                   01S0001
         LM    @00,@01,20(@13)                                  01S0001
         ST    @09,8(,@13)                                      01S0001
         LR    @13,@09                                          01S0001
         MVC   @PC00001(24),0(@01)                              01S0001
JSCBDISP EQU 188
JSCBAOS1 EQU  72
JSCBAOS2 EQU 192
*IF TCBTCT ^= ZERO THEN                /*IF TCT EXISTS               */
         SLR   @12,@12                                          01S0075
         L     @08,@PC00001+4                                   01S0075
         L     @03,TCBPTR(,@08)                                 01S0075
         L     @03,TCBTCT(,@03)                                 01S0075
         CR    @03,@12                                          01S0075
         BE    @RF00075                                         01S0075
*  DO;                                                          01S0076
*    FRRPARMP = ADDR(FRRCORE);         /*PTR TO FRR PARMS            */
         LA    @15,FRRCORE                                      01S0077
         ST    @15,FRRPARMP                                     01S0077
*    FRRCORE = FRRCORE && FRRCORE;     /*CLEAR FRR PARM LIST CORE    */
         XC    FRRCORE(141),FRRCORE                             01S0078
*    TCTPTR = TCBTCT;                  /*TCB PTR TO ESTAE PARMS      */
         ST    @03,TCTPTR(,@15)                                 01S0079
*    DESTAPTR = ADDR(DEPARMS);         /*PTR TO ESTAE PARMS          */
         L     @14,@PC00001+12                                  01S0080
         ST    @14,DESTAPTR(,@15)                               01S0080
*    FREEPTR = ZERO;                   /*INITIALIZE PTR              */
         ST    @12,FREEPTR                                      01S0081
*    SWCHBYT1 = SWCHBYT1 && SWCHBYT1;  /*INITIALIZE INTERNAL SWITCH  */
         XC    SWCHBYT1(1),SWCHBYT1                             01S0082
*    IF TCTIOTBL ^= ZERO THEN          /*IF TCTIOT EXISTS            */
         L     @03,TCTIOTBL(,@03)                               01S0083
         CR    @03,@12                                          01S0083
         BE    @RF00083                                         01S0083
*      DO;                                                      01S0084
*        TCTIOP = TCTIOTBL;              /*PTR TO TCTIOT TO FRR PARMS*/
         ST    @03,TCTIOP(,@15)                                 01S0085
*        TCTIOLN = TCTSZEXT;             /*SIZE OF TCTIOT TO FRR PRMS*/
         LH    @12,TCTSZEXT(,@03)                               01S0086
         ST    @12,TCTIOLN(,@15)                                01S0086
*        TCTIOLN = TCTIOLN × SUBPLNUM;   /*SUBPOOL TO FRR PARMS      */
         O     @12,@CF00191                                     01S0087
         ST    @12,TCTIOLN(,@15)                                01S0087
*        RETCODE = RETCODE&&RETCODE;   /*CLEAR INTERNAL RETCODE      */
         XR    RETCODE,RETCODE                                  01S0088
*        IF FUNCMAP = ALLOCATE THEN    /*IF ALLOCATE REQUEST         */
         L     @12,@PC00001                                     01S0089
         CLI   FUNCMAP(@12),X'01'                               01S0089
         BNE   @RF00089                                         01S0089
*          DO;                                                  01S0090
*            CALL IEFDB4F8(TCBPTR,LIST,FRRPARMP);  /*ALLOC PROCESSING*/
         ST    @08,@AL00001                                     01S0091
         L     @12,@PC00001+8                                   01S0091
         ST    @12,@AL00001+4                                   01S0091
         LA    @12,FRRPARMP                                     01S0091
         ST    @12,@AL00001+8                                   01S0091
         L     @15,@CV01729                                     01S0091
         LA    @01,@AL00001                                     01S0091
         BALR  @14,@15                                          01S0091
*          END;                                                 01S0092
*        ELSE                          /*NOT ALLOCATE REQUEST        */
*          DO;                                                  01S0093
         B     @RC00089                                         01S0093
@RF00089 DS    0H                                               01S0094
*            IF FUNCMAP = UNALLOC THEN /*IF UNALLOCATE REQUEST       */
         L     @12,@PC00001                                     01S0094
         CLI   FUNCMAP(@12),X'02'                               01S0094
         BNE   @RF00094                                         01S0094
*              DO;                                              01S0095
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - B4F9UNAL                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - UNALLOCATE TCTIOT DD ENTRY.                   */
*/*                                                                  */
*/* FUNCTION - TO PROCESS EACH ENTRY IN A LIST OF TIOT ENTRY         */
*/*            POINTERS REPRESENTING UNALLOCATED DDS AS FOLLOWS:     */
*/*            - SCAN THE TCTIOT L/U TABLE FOR A TIOT OFFSET         */
*/*              CORRESPONDING TO THE TIOT ENTRY.                    */
*/*            - CALCULATE THE SIZE NEEDED TO BUILD AN SMF RECORD    */
*/*              40 FOR THE UNALLOCATED TIOT ENTRY.                  */
*/*            - GET THE SPACE FOR THE SMF RECORD                    */
*/*            - CALL AN INTERNAL PROCEDURE (BUILDREC) WHICH WILL    */
*/*              BUILD THE RECORD.                                   */
*/*            - REMOVE THE UNALLOCATED L/U TABLE ENTRY AND DD ENTRY */
*/*              FROM THE TCTIOT.                                    */
*/*                                                                  */
*/*                                                                  */
*/*   OPERATION - OPERATION IS DOCUMENTED BY THE CODE.               */
*/*                                                                  */
*/*                                                                  */
*/* ENTRY POINT -(INLINE SUBROUTINE - ENTERED AT THE TOP)            */
*/*                                                                  */
*/*   PURPOSE - SEE FUNCTION                                         */
*/*                                                                  */
*/*                                                                  */
*/* INPUT - LIST - LIST OF UNALLOCATED TIOT ENTRY POINTERS           */
*/*                                                                  */
*/* EXIT - NORMAL - (INLINE SUBROUTINE - EXITS AT BOTTOM)            */
*/*                                                                  */
*/*   CONDITION - UNALLOCATED DD'S PROCESSED AS DESCRIBED UNDER      */
*/*               FUNCTION                                           */
*/*                                                                  */
*/*   OUTPUT - SMF RECORD 40 FOR EACH UNALLOCATED DD                 */
*/*          - COMPRESSED TCTIOT(UNALLOCATED L/U TABLE ENTRY         */
*/*            AND DD ENTRY REMOVED)                                 */
*/*                                                                  */
*/*   RETURN CODE - NONE                                             */
*/*                                                                  */
*/* EXIT - ERROR                                                     */
*/*                                                                  */
*/*   CONDITION - UNABLE TO OBTAIN SPACE FOR RECORD FOR ONE OR MORE  */
*/*               UNALLOCATED DDS.                                   */
*/*                                                                  */
*/*   OUTPUT - COMPRESSED TCTIOT(UNALLOCATED L/U TABLE ENTRY         */
*/*            AND DD ENTRY REMOVED)                                 */
*/*                                                                  */
*/*   RETURN CODE - NONE                                             */
*/*                                                                  */
*/********************************************************************/
*TCTLUENP = TCTIOTBL + LENGTH(TCTTIOT); /*FIRST L/U TABLE ENTRY      */
         L     @12,@PC00001+4                                   02S0096
         L     @12,TCBPTR(,@12)                                 02S0096
         L     @12,TCBTCT(,@12)                                 02S0096
         LA    @08,8                                            02S0096
         AL    @08,TCTIOTBL(,@12)                               02S0096
         ST    @08,TCTLUENP                                     02S0096
*EXITSW = OFF;                                                  02S0097
         NI    EXITSW,B'01111111'                               02S0097
*DO I = ONE BY ONE                     /*PROCESS LIST OF TIOT ENTRIES*/
*  WHILE(EXITSW = OFF);                /*UNTIL LAST ENTRY            */
         LA    @12,1                                            02S0098
         ST    @12,I                                            02S0098
         B     @DE00098                                         02S0098
@DL00098 DS    0H                                               02S0099
*  LOOPSW = OFF;                       /*INITIALIZE SWITCH           */
         NI    LOOPSW,B'11011111'                               02S0099
*  DO OFFSET = ONE BY ONE              /*SCAN TCTIOT L/U TABLE       */
*    WHILE(LOOPSW = OFF);                                       02S0100
         LA    @12,1                                            02S0100
         ST    @12,OFFSET                                       02S0100
         B     @DE00100                                         02S0100
@DL00100 DS    0H                                               02S0101
*    IF TCTIOTO(OFFSET) =                                       02S0101
*       TIOTENTP(I) - TCBTIO THEN      /*IF TIOT OFFSETS MATCH       */
         L     @12,TCTLUENP                                     02S0101
         L     @08,OFFSET                                       02S0101
         SLA   @08,2                                            02S0101
         L     @15,I                                            02S0101
         MH    @15,@CH00049                                     02S0101
         L     @14,@PC00001+8                                   02S0101
         L     @07,@PC00001+4                                   02S0101
         L     @07,TCBPTR(,@07)                                 02S0101
         AL    @14,@CF01771                                     02S0101
         L     @06,TIOTENTP(@15,@14)                            02S0101
         SL    @06,TCBTIO(,@07)                                 02S0101
         ST    @08,@TF00001                                     02S0101
         ALR   @08,@12                                          02S0101
         AL    @08,@CF01772                                     02S0101
         SLR   @15,@15                                          02S0101
         ICM   @15,3,TCTIOTO(@08)                               02S0101
         CR    @06,@15                                          02S0101
         BNE   @RF00101                                         02S0101
*      DO;                                                      02S0102
*        NUMDDS = ONE;                 /*NO.DD ENTRIES FOR SMF RECORD*/
         MVC   NUMDDS(4),@CF00048                               02S0103
*        TCTDVENP = TCTCNTEO(OFFSET) + TCTIOTBL;/*ADDRESS DD ENTRY   */
         L     @08,TCTLUENP                                     02S0104
         L     @15,@PC00001+4                                   02S0104
         L     @15,TCBPTR(,@15)                                 02S0104
         L     @01,TCBTCT(,@15)                                 02S0104
         AL    @08,@TF00001                                     02S0104
         AL    @08,@CF01773                                     02S0104
         SLR   TCTDVENP,TCTDVENP                                02S0104
         ICM   TCTDVENP,3,TCTCNTEO-2(@08)                       02S0104
         AL    TCTDVENP,TCTIOTBL(,@01)                          02S0104
*        SIZEUCBS = TCTDSCTR(1) * LENGTH(TCTDVENT); /*SIZE OF   02S0105
*                                        VARIABLE PART SMF RECORD    */
         SLR   @08,@08                                          02S0105
         IC    @08,TCTDSCTR(,TCTDVENP)                          02S0105
         SLA   @08,3                                            02S0105
         ST    @08,SIZEUCBS                                     02S0105
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - GETREC                                            */
*/*                                                                  */
*/* DESCRIPTIVE NAME - GET SPACE FOR SMF DYNAMIC DD RECORD.          */
*/*                                                                  */
*/* FUNCTION - ISSUES GETSTORG MACRO TO OBTAIN SPACE FOR AN SMF      */
*/*            RECORD, WHICH IT CHAINS INTO ANY PRIOR        @ZA02706*/
*/*            RECORDS.                                      @ZA02706*/
*/*                                                                  */
*/*   OPERATION - OPERATION IS DOCUMENTED BY THE CODE.               */
*/*                                                                  */
*/*                                                                  */
*/* ENTRY POINT -(INLINE SUBROUTINE - ENTERED AT THE TOP)            */
*/*                                                                  */
*/*   PURPOSE - SEE FUNCTION                                         */
*/*                                                                  */
*/*                                                                  */
*/* INPUT -                                                          */
*/*   SIZEUCBS - SIZE OF THE VARIABLE PART OF THE RECORD (DEVICE     */
*/*              ENTRIES).                                           */
*/*   BUFPARMS - PTR TO FIRST AND LAST BUFFERS ON CHAIN      @ZA02706*/
*/*                                                                  */
*/*                                                                  */
*/* EXIT - NORMAL - (INLINE SUBROUTINE - EXITS AT BOTTOM)            */
*/*                                                                  */
*/*   CONDITION - SPACE FOR RECORD OBTAINED.                         */
*/*                                                                  */
*/*   OUTPUT -                                                       */
*/*      SMF40PTR - PTR TO SPACE FOR SMF RECORD                      */
*/*      BUFPARMS - UPDATE AS APPROPRIATE                    @ZA02706*/
*/*                                                                  */
*/*   RETURN CODE - RETCODE = ZERO                                   */
*/*                                                                  */
*/* EXIT - ERROR - THIS CODE IS AN INLINE SUBROUTINE - EXITS AT      */
*/*                BOTTOM.                                           */
*/*                                                                  */
*/*   CONDITION - UNABLE TO OBTAIN SPACE FOR RECORD.                 */
*/*                                                                  */
*/*   OUTPUT - NONE                                                  */
*/*                                                                  */
*/*   RETURN CODE - RETCODE = NON-ZERO VALUE.                        */
*/*                                                                  */
*/********************************************************************/
*RECSIZE = SIZEUCBS + LENGTH(SMFRCD40); /*RECORD SIZE EQUALS SPACE
*                                         FOR DEVICE ENTRIES PLUS
*                                         LENGTH OF FIXED RECORD     */
         AH    @08,@CH01767                                     03S0106
         ST    @08,RECSIZE                                      03S0106
*CORESIZE = RECSIZE + LENGTH(NXTSMFP); /*ADD CHAIN PTR       @ZA02706*/
         AH    @08,@CH00132                                     03S0107
         ST    @08,CORESIZE                                     03S0107
* /* ?GETSTORG (SPRECORD,CORESIZE,SMFCOREP);*/                  03S0108
*   /* DEFINITIONS OF GETMAIN PARMS */                          03S0108
*   DCL                                                         03S0108
*     GTSTR0   FIXED(31) REG(0),/*GTMN PARM REG*/               03S0108
*     GTSTR1   FIXED(31) REG(1),/*GTMN PARM REG*/               03S0108
*     GTSTR2   PTR(31)   REG(2),/*GTMN PARM REG*/               03S0108
*     GTSTR15  FIXED(31) REG(15),/*GTMN RET COD*/               03S0108
*     GTSTRTCD FIXED(31); /* GETMAIN RTN CODE  */               03S0108
*   DCL                                                         03S0109
*     GTSTR3   FIXED(31) REG(3),/* CLEARING REG*/               03S0109
*     GTSTR4   FIXED(31) REG(4),/* CLEARING REG*/               03S0109
*     GTSTR5   FIXED(31) REG(5),/* CLEARING REG*/               03S0109
*     GTSTR6   FIXED(31) REG(6),/* CLEARING REG*/               03S0109
*     GTSTR7   FIXED(31) REG(7),/* CLEARING REG*/               03S0109
*     GTSTR8   FIXED(31) REG(8),/* CLEARING REG*/               03S0109
*     GTSTZERO FIXED(31) INIT(0),                               03S0109
*     GTST253  FIXED(31) CONSTANT(253);                         03S0109
*   RFY (GTSTR0,GTSTR1,GTSTR2) RSTD; /*SAVE RGS*/               03S0110
*   GTSTR0 = CORESIZE; /* SET AMOUNT*/                          03S0111
         LR    GTSTR0,@08                                       03S0111
*   GTSTR2 = SPRECORD; /* SET SUBPOOL*/                         03S0112
         LA    GTSTR2,230                                       03S0112
*   GENERATE CODE;                                              03S0113
     GETMAIN RC,LV=(0),SP=(2)  DO GETMAIN
*   GTSTRTCD = GTSTR15; /* SAVE GETMAIN RET COD*/               03S0114
         ST    GTSTR15,GTSTRTCD                                 03S0114
*   SMFCOREP = GTSTR1; /* ADDR OF GOTN STORG*/                  03S0115
         LR    SMFCOREP,GTSTR1                                  03S0115
*   RFY (GTSTR0,GTSTR1,GTSTR2) UNRSTD; /*RLSE */                03S0116
*   IF GTSTRTCD = 0 THEN /*GETMAIN SUCCESSFUL? */               03S0117
         L     @08,GTSTRTCD                                     03S0117
         LTR   @08,@08                                          03S0117
         BNZ   @RF00117                                         03S0117
*     DO;               /* YES, CLEAR STORAGE.*/                03S0118
*       RFY (GTSTR2,GTSTR4,GTSTR5,GTSTR6,                       03S0119
*                          GTSTR7,GTSTR8) RSTD;                 03S0119
*       GTSTR4 = SMFCOREP; /*STORG PTR*/                        03S0120
         LR    GTSTR4,SMFCOREP                                  03S0120
*       GTSTR5 = CORESIZE; /*STORG AMNT*/                       03S0121
         L     GTSTR5,CORESIZE                                  03S0121
*       GTSTR7 = '00000000'X; /*PAD CHAR & LNTH*/               03S0122
         SLR   GTSTR7,GTSTR7                                    03S0122
*       IF SPRECORD = GTST253 THEN                              03S0123
         B     @RF00123                                         03S0123
*      GEN                                                      03S0124
*   (MODESET KEYADDR=GTSTZERO,SAVEKEY=(2),WORKREG=8);           03S0124
         MODESET KEYADDR=GTSTZERO,SAVEKEY=(2),WORKREG=8
*       GEN REFS(GTSTR4,GTSTR6);                                03S0125
@RF00123 DS    0H                                               03S0125
          MVCL  GTSTR4,GTSTR6 CLEAR GOTTEN STORG
*       IF SPRECORD = GTST253 THEN                              03S0126
         B     @RF00126                                         03S0126
*         GEN (MODESET KEYADDR=(2));                            03S0127
         MODESET KEYADDR=(2)
*       RFY (GTSTR2,GTSTR4,GTSTR5,GTSTR6,                       03S0128
*                          GTSTR7,GTSTR8) UNRSTD;               03S0128
@RF00126 DS    0H                                               03S0129
*     END;       /* STORAGE CLEARING COMPLETED */               03S0129
*   ELSE                                                        03S0130
*   SMFCOREP= 0;   /* CLEAR RETURN ADDR. */                     03S0130
         B     @RC00117                                         03S0130
@RF00117 SLR   SMFCOREP,SMFCOREP                                03S0130
*   GTSTR15 = GTSTRTCD;    /* GTMN RETURN CODE */               03S0131
@RC00117 L     GTSTR15,GTSTRTCD                                 03S0131
*                                      /* RESTORE LIST PRINT STATUS  */
*/*GET SMF CORE       @ZA02706*/                                03S0132
*RETCODE = REG15;                      /*PICK UP RETURN CODE         */
         LR    RETCODE,REG15                                    03S0132
*IF RETCODE = SUCCESS THEN             /*RECORD GOTTEN       @ZA02706*/
         SLR   @08,@08                                          03S0133
         CR    RETCODE,@08                                      03S0133
         BNE   @RF00133                                         03S0133
*  DO;                                 /*DO CHAINING         @ZA02706*/
*    IF BUF1PTR = ZERO THEN            /*IF THIS IS FIRST    @ZA02706*/
         L     @03,@PC00001+20                                  03S0135
         C     @08,BUF1PTR(,@03)                                03S0135
         BNE   @RF00135                                         03S0135
*      BUF1PTR = SMFCOREP;             /*SET FIRST PTR       @ZA02706*/
         ST    SMFCOREP,BUF1PTR(,@03)                           03S0136
*    ELSE                              /*NOT FIRST           @ZA02706*/
*      BUFLPTR -> NXTSMFP = SMFCOREP;  /*CHAIN TO PRIOR LAST @ZA02706*/
         B     @RC00135                                         03S0137
@RF00135 L     @08,@PC00001+20                                  03S0137
         L     @08,BUFLPTR(,@08)                                03S0137
         ST    SMFCOREP,NXTSMFP(,@08)                           03S0137
*    BUFLPTR = SMFCOREP;               /*UPDATE CURRENT LAST @ZA02706*/
@RC00135 L     @08,@PC00001+20                                  03S0138
         ST    SMFCOREP,BUFLPTR(,@08)                           03S0138
*    NXTSMFP = ZERO;                   /*ZERO NEW NEXTPTR    @ZA02706*/
         SLR   @08,@08                                          03S0139
         ST    @08,NXTSMFP(,SMFCOREP)                           03S0139
*    SMF40PTR = ADDR(RECORD40);        /*SET RECORD BASE     @ZA02706*/
         LA    @08,RECORD40(,SMFCOREP)                          03S0140
         ST    @08,SMF40PTR                                     03S0140
*  END;                                /*END IF GETMAIN OK   @ZA02706*/
*        IF RETCODE = SUCCESS THEN     /*IF RECORD SPACE OBTAINED    */
@RF00133 LTR   RETCODE,RETCODE                                  02S0142
         BNZ   @RF00142                                         02S0142
*          CALL BUILDREC;              /*BUILD SMF RECORD            */
         BAL   @14,BUILDREC                                     02S0143
*         DO; /*MODESET  KEYADDR(ZERO)*/                        02S0144
@RF00142 DS    0H                                               02S0145
*           SPKA (ZERO); /*SET PSW KEY*/                        02S0145
         SLR   @12,@12                                          02S0145
         SPKA  0(@12)                                           02S0145
*         END; /*MODESET  KEYADDR(ZERO)*/       /*GET KEY ZERO  02S0146
*      */                                                       02S0146
*         RFY (R11,R12,R13,R14) RSTD;SV13=R13;GEN REFS(PSALITA);
         LR    SV13,R13                                         02S0148
          SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                      XX
               REGS=USE,RELATED=(TCTIOT,IEFDB4F9(B4F9UNAL))
          SETLOCK OBTAIN,TYPE=CMS,MODE=UNCOND,                        XX
               REGS=USE,RELATED=(TCTIOT,IEFDB4F9(B4F9UNAL))
*         R13=SV13;RFY (R11,R12,R13,R14) UNRSTD;      /*GET LOCAL AND C
*S LOCK      */                                                 02S0150
         LR    R13,SV13                                         02S0150
*        FRRZERO = ON;                 /*CLEAR PTR TO TCTIOT IF ABEND*/
         L     @12,FRRPARMP                                     02S0152
         OI    FRRZERO(@12),B'10000000'                         02S0152
*        RFY (REG2,REG3,REG4) RSTD;                             02S0153
*        REG2 = ADDR(IEFDB403);        /*PTR TO FRR RTN              */
         L     REG2,@CV01730                                    02S0154
*        GEN;                                                   02S0155
        SETFRR A,FRRAD=(2),PARMAD=(3),WRKREGS=(3,4)
*        PARMFRRP = REG3;              /*PTR TO FRR SUPPLIED PARMS   */
         LR    PARMFRRP,REG3                                    02S0156
*        RFY (REG2,REG3,REG4) UNRSTD;                           02S0157
*        FRRP = FRRPARMP;              /*PTR TO FRR USER PARMS       */
         MVC   FRRP(4,PARMFRRP),FRRPARMP                        02S0158
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - COMPRESS                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - COMPRESS TCTIOT                               */
*/*                                                                  */
*/* FUNCTION - TO COMPRESS OUT THE LOOK-UP TABLE ENTRY AND THE CNTR. */
*/*            TABLE ENTRY FOR THE UNALLOCATED DD IN THE TCTIOT.THE  */
*/*            TCTIOT DD ENTRY OFFSETS IN THE TCTIOT L/U TABLE ARE   */
*/*            UPDATED TO CORRESPOND TO THE COMPRESSED TCTIOT.THE    */
*/*            TOTAL DEVICE ENTRY SIZE FIELD IN THE TCTIOT IS        */
*/*            DECREMENTED TO ACCOUNT FOR THE REMOVED DD.            */
*/*   OPERATION - ANY L/U TABLE ENTRY PRIOR TO THE UNALLOCATED L/U   */
*/*               TABLE ENTRY IN THE TCTIOT L/U TABLE WILL HAVE ITS  */
*/*               TCTIOT DD ENTRY OFFSET DECREMENTED BY THE LENGTH OF*/
*/*               UNALLOCATED L/U TABLE ENTRY.                       */
*/*               L/U TABLE ENTRIES AFTER THE UNALLOCATED L/U TABLE  */
*/*               ENTRY WILL HAVE THEIR TCTIOT DD ENTRY OFFSETS      */
*/*               DECREMENTED BY THE LENGTH OF THE UNALLOCATED L/U   */
*/*               TABLE ENTRY PLUS THE LENGTH OF THE UNALLOCATED     */
*/*               TCTIOT DD ENTRY.                                   */
*/*               NOTE: AN ENTRY IS COMPRESSED OUT BY MOVING THE     */
*/*                     SECTION OF THE TCTIOT, FOLLOWING THE ENTRY,  */
*/*                     ON TOP OF THE ENTRY.                         */
*/*                                                                  */
*/* ENTRY POINT -(INLINE SUBROUTINE - ENTERED AT THE TOP)            */
*/*                                                                  */
*/*   PURPOSE - SEE FUNCTION.                                        */
*/*                                                                  */
*/*                                                                  */
*/* INPUT      - SIZEUCBS - LENGTH DEVICE ENTRIES IN UNALLOCATED DD  */
*/*                         ENTRY                                    */
*/*              OFFSET  - INDEX OR RELATIVE POSITION OF UNALLOCATED */
*/*                        L/U TABLE ENTRY                           */
*/*                                                                  */
*/*                                                                  */
*/*                                                                  */
*/* EXIT - NORMAL - (INLINE SUBROUTINE - EXITS AT BOTTOM)            */
*/*                                                                  */
*/*   CONDITION - UNALLOCATED DD ENTRY COMPRESSED OUT OF TCTIOT      */
*/*                                                                  */
*/*   OUTPUT      - COMPRESSED TCTIOT                                */
*/*                 TCTIOT DD ENTRY OFFSETS IN L/U TABLE UPDATED     */
*/*                 TO REFLECT REMOVAL OF UNALLOCATED L/U TABLE      */
*/*                 ENTRY AND DD ENTRY.                              */
*/*                 TCTSZLKP - TCTIOT DEVICE ENTRY SIZE DECREMENTED  */
*/*                            BY SIZE OF UNALLOCATED DEVICE ENTRIES.*/
*/*                                                                  */
*/*   RETURN CODE - NONE                                             */
*/*                                                                  */
*/********************************************************************/
*TCTDVENP = TCTCNTEO(OFFSET) + TCTIOTBL;/*PTR TO 1ST DEV ENTRY IN
*                                        UNALLOCATED DD ENTRY        */
         L     @12,OFFSET                                       03S0159
         SLA   @12,2                                            03S0159
         L     @08,@PC00001+4                                   03S0159
         L     @08,TCBPTR(,@08)                                 03S0159
         L     @08,TCBTCT(,@08)                                 03S0159
         L     @01,TCTLUENP                                     03S0159
         ALR   @01,@12                                          03S0159
         AL    @01,@CF01773                                     03S0159
         SLR   TCTDVENP,TCTDVENP                                03S0159
         ICM   TCTDVENP,3,TCTCNTEO-2(@01)                       03S0159
         AL    TCTDVENP,TCTIOTBL(,@08)                          03S0159
*DO N = ONE TO OFFSET-1 BY ONE;        /*SCAN L/U TABLE UP TO UNALL-
*                                        OCATED ENTRY                */
         LA    N,1                                              03S0160
         B     @DE00160                                         03S0160
@DL00160 DS    0H                                               03S0161
*  TCTCNTEO(N) = TCTCNTEO(N) - LENGTH(TCTLUENT); /*BACK UP OFFSET TO
*                                        ACCT FOR UNALLOC'D L/U TABLE
*                                        ENTRY                       */
         L     @12,TCTLUENP                                     03S0161
         LR    @08,N                                            03S0161
         SLA   @08,2                                            03S0161
         ST    @08,@TF00001                                     03S0161
         ALR   @08,@12                                          03S0161
         AL    @08,@CF01773                                     03S0161
         SLR   @06,@06                                          03S0161
         ICM   @06,3,TCTCNTEO-2(@08)                            03S0161
         SH    @06,@CH00132                                     03S0161
         L     @08,@TF00001                                     03S0161
         AL    @12,@CF01773                                     03S0161
         STH   @06,TCTCNTEO-2(@08,@12)                          03S0161
*END;                                                           03S0162
         AH    N,@CH00048                                       03S0162
@DE00160 L     @12,OFFSET                                       03S0162
         BCTR  @12,0                                            03S0162
         CR    N,@12                                            03S0162
         BNH   @DL00160                                         03S0162
*OUTSW = OFF;                          /*INITIALIZE SWITCH           */
         NI    OUTSW,B'11101111'                                03S0163
*CNTRSIZE = LENGTH(TCTLUENT) + SIZEUCBS                         03S0164
*           + LENGTH(TCTOUTLM);        /*DISTANCE CNTR TAB ENTRY
*                                        MOVED                       */
         LA    CNTRSIZE,12                                      03S0164
         AL    CNTRSIZE,SIZEUCBS                                03S0164
*DO ENTCTR = OFFSET + ONE BY ONE       /*SCAN REMAINDER OF TCTIOT L/U*/
*  WHILE(OUTSW = OFF);                 /*TABLE                       */
         LA    ENTCTR,1                                         03S0165
         AL    ENTCTR,OFFSET                                    03S0165
         B     @DE00165                                         03S0165
@DL00165 DS    0H                                               03S0166
*   IF TCTIOTO(ENTCTR) = ZERO THEN     /*IF END OF L/U TABLE FIELD   */
         LR    @12,ENTCTR                                       03S0166
         SLA   @12,2                                            03S0166
         L     @08,TCTLUENP                                     03S0166
         ALR   @08,@12                                          03S0166
         AL    @08,@CF01772                                     03S0166
         SLR   @12,@12                                          03S0166
         ICM   @12,3,TCTIOTO(@08)                               03S0166
         LTR   @12,@12                                          03S0166
         BNZ   @RF00166                                         03S0166
*     DO;                                                       03S0167
*       CURRDDNO = ENTCTR - ONE;       /*NO.CURRENT TCTIOT DD ENTRIES*/
         LR    @12,ENTCTR                                       03S0168
         BCTR  @12,0                                            03S0168
         ST    @12,CURRDDNO                                     03S0168
*       OUTSW = ON;                    /*EXIT LOOP                   */
         OI    OUTSW,B'00010000'                                03S0169
*     END;                                                      03S0170
*   ELSE                                                        03S0171
*     TCTCNTEO(ENTCTR) = TCTCNTEO(ENTCTR) -   /*BACK UP DD ENT.OFFSET*/
*               CNTRSIZE;              /*DISTANCE DD ENTRY MOVED     */
*                                                               03S0171
         B     @RC00166                                         03S0171
@RF00166 L     @12,TCTLUENP                                     03S0171
         LR    @08,ENTCTR                                       03S0171
         SLA   @08,2                                            03S0171
         ST    @08,@TF00001                                     03S0171
         ALR   @08,@12                                          03S0171
         AL    @08,@CF01773                                     03S0171
         SLR   @06,@06                                          03S0171
         ICM   @06,3,TCTCNTEO-2(@08)                            03S0171
         SLR   @06,CNTRSIZE                                     03S0171
         L     @08,@TF00001                                     03S0171
         AL    @12,@CF01773                                     03S0171
         STH   @06,TCTCNTEO-2(@08,@12)                          03S0171
*END;                                                           03S0172
@RC00166 AH    ENTCTR,@CH00048                                  03S0172
@DE00165 TM    OUTSW,B'00010000'                                03S0172
         BZ    @DL00165                                         03S0172
*MOVELEN = (LENGTH(TCTLUENT) * (CURRDDNO -  OFFSET)) /*LEN L/U TABLE
*                                        AFTER UNALLOC ENTRY         */
*       + LENGTH(TCTDCBLE)             /*END L/U TABLE FIELD         */
*       + TCTSZLKP                     /*SIZE OF DEVICE ENTRIES      */
*       + (CURRDDNO * LENGTH(TCTOUTLM));/*LEN OF OUTLIM ENTRIES      */
         LA    @15,4                                            03S0173
         L     @14,CURRDDNO                                     03S0173
         L     @05,OFFSET                                       03S0173
         LR    MOVELEN,@14                                      03S0173
         SLR   MOVELEN,@05                                      03S0173
         SLA   MOVELEN,2                                        03S0173
         ALR   MOVELEN,@15                                      03S0173
         L     @04,@PC00001+4                                   03S0173
         L     @01,TCBPTR(,@04)                                 03S0173
         L     @01,TCBTCT(,@01)                                 03S0173
         L     @01,TCTIOTBL(,@01)                               03S0173
         AH    MOVELEN,TCTSZLKP(,@01)                           03S0173
         SLA   @14,3                                            03S0173
         ALR   MOVELEN,@14                                      03S0173
*MOVETPTR = ADDR(TCTLUENT(OFFSET));    /*ADDRESS UNALLOCATED L/U
*                                        TABLE ENTRY                 */
         SLA   @05,2                                            03S0174
         L     MOVETPTR,TCTLUENP                                03S0174
         AL    MOVETPTR,@CF01772                                03S0174
         LA    MOVETPTR,TCTLUENT(@05,MOVETPTR)                  03S0174
*MOVEFPTR = MOVETPTR + LENGTH(TCTLUENT); /*MOVE FROM LOCATION PTR    */
         ALR   @15,MOVETPTR                                     03S0175
         LR    MOVEFPTR,@15                                     03S0175
*RFY (REG2,REG3,REG4,REG5) RSTD;                                03S0176
*REG2 = MOVETPTR;                      /*MOVE TO LOCATION            */
         LR    REG2,MOVETPTR                                    03S0177
*REG3 = MOVELEN;                       /*MOVE SIZE                   */
         LR    REG3,MOVELEN                                     03S0178
*REG4 = MOVEFPTR;                      /*MOVE FROM LOCATION          */
         LR    REG4,MOVEFPTR                                    03S0179
*REG5 = MOVELEN;                       /*MOVE SIZE                   */
         LR    REG5,MOVELEN                                     03S0180
*GEN (MVCL 2,4);                                                03S0181
         MVCL 2,4
*RFY (REG2,REG3,REG4,REG5) UNRSTD;                              03S0182
*MOVETPTR = TCTDVENP - LENGTH(TCTLUENT); /*BACK UP PTR TO UNALLOCATED
*                                          TCTIOT DD ENTRY           */
         LR    MOVETPTR,TCTDVENP                                03S0183
         SH    MOVETPTR,@CH00132                                03S0183
*MOVEFPTR = MOVETPTR +                 /*MOVED FROM LOCATION         */
*           SIZEUCBS + LENGTH(TCTOUTLM);/*SIZE UNALLOCATED TCTIOT DD
*                                        ENTRY                       */
         LR    MOVEFPTR,MOVETPTR                                03S0184
         AL    MOVEFPTR,SIZEUCBS                                03S0184
         AH    MOVEFPTR,@CH00119                                03S0184
*MOVELEN = (ADDR(TCTLUENT(OFFSET))+MOVELEN) - MOVEFPTR;/*LEN TO MOVE */
         L     @15,OFFSET                                       03S0185
         SLA   @15,2                                            03S0185
         L     @01,TCTLUENP                                     03S0185
         AL    @01,@CF01772                                     03S0185
         LA    @15,TCTLUENT(@15,@01)                            03S0185
         ALR   @15,MOVELEN                                      03S0185
         SLR   @15,MOVEFPTR                                     03S0185
         LR    MOVELEN,@15                                      03S0185
*RFY (REG2,REG3,REG4,REG5) RSTD;                                03S0186
*REG2 = MOVETPTR;                      /*MOVE TO LOCATION            */
         LR    REG2,MOVETPTR                                    03S0187
*REG3 = MOVELEN;                       /*MOVE SIZE                   */
         LR    REG3,MOVELEN                                     03S0188
*REG4 = MOVEFPTR;                      /*MOVE FROM LOCATION          */
         LR    REG4,MOVEFPTR                                    03S0189
*REG5 = MOVELEN;                       /*MOVE SIZE                   */
         LR    REG5,MOVELEN                                     03S0190
*GEN (MVCL 2,4);                                                03S0191
         MVCL 2,4
*RFY (REG2,REG3,REG4,REG5) UNRSTD;                              03S0192
*TCTSZLKP = TCTSZLKP - SIZEUCBS;       /*DECREMENT TOT DEV ENTRY SIZE*/
         L     @12,@PC00001+4                                   03S0193
         L     @12,TCBPTR(,@12)                                 03S0193
         L     @12,TCBTCT(,@12)                                 03S0193
         L     @12,TCTIOTBL(,@12)                               03S0193
         LH    @08,TCTSZLKP(,@12)                               03S0193
         SL    @08,SIZEUCBS                                     03S0193
         STH   @08,TCTSZLKP(,@12)                               03S0193
*        FRRZERO = OFF;                /*CLEAR FRR INDICATOR         */
         L     @12,FRRPARMP                                     02S0194
         NI    FRRZERO(@12),B'01111111'                         02S0194
*        RFY (REG2,REG3) RSTD;                                  02S0195
*        GEN( SETFRR D,WRKREGS=(2,3) );                         02S0196
          SETFRR D,WRKREGS=(2,3)
*        RFY (REG2,REG3) UNRSTD;                                02S0197
*         RFY (R11,R12,R13,R14) RSTD;SV13=R13;GEN;              02S0198
         LR    SV13,R13                                         02S0199
          SETLOCK RELEASE,TYPE=CMS,                                   XX
               REGS=USE,RELATED=(TCTIOT,IEFDB4F9(B4F9UNAL))
          SETLOCK RELEASE,TYPE=LOCAL,                                 XX
               REGS=USE,RELATED=(TCTIOT,IEFDB4F9(B4F9UNAL))
*         R13=SV13;RFY (R11,R12,R13,R14) UNRSTD;    /*RELEASE LOCAL AND
*CMS LOCK  */                                                   02S0201
         LR    R13,SV13                                         02S0201
*         DO; /*MODESET  EXTKEY(SCHED)*/                        02S0203
*           SPKA (16); /*SET PSW KEY*/                          02S0204
         LA    @12,16                                           02S0204
         SPKA  0(@12)                                           02S0204
*         END; /*MODESET  EXTKEY(SCHED)*/       /*GET SCHED KEY 02S0205
*      */                                                       02S0205
*        LOOPSW = ON;                  /*EXIT SEARCH LOOP            */
         OI    LOOPSW,B'00100000'                               02S0206
*      END;                                                     02S0207
*    ELSE                              /*TIOT OFFSETS DON'T MATCH    */
*      DO;                                                      02S0208
         B     @RC00101                                         02S0208
@RF00101 DS    0H                                               02S0209
*        IF TCTIOTO(OFFSET) = ZERO THEN/*IF END OF L/U TABLE         */
         L     @12,OFFSET                                       02S0209
         SLA   @12,2                                            02S0209
         L     @08,TCTLUENP                                     02S0209
         ALR   @08,@12                                          02S0209
         AL    @08,@CF01772                                     02S0209
         SLR   @12,@12                                          02S0209
         ICM   @12,3,TCTIOTO(@08)                               02S0209
         LTR   @12,@12                                          02S0209
         BNZ   @RF00209                                         02S0209
*          LOOPSW = ON;                /*EXIT SEARCH LOOP            */
         OI    LOOPSW,B'00100000'                               02S0210
*      END;                                                     02S0211
@RF00209 DS    0H                                               02S0212
*  END;                                                         02S0212
@RC00101 LA    @12,1                                            02S0212
         AL    @12,OFFSET                                       02S0212
         ST    @12,OFFSET                                       02S0212
@DE00100 TM    LOOPSW,B'00100000'                               02S0212
         BZ    @DL00100                                         02S0212
*  IF LASTINDC(I) = ON THEN            /*IF LAST TIOT ENTRY IN LIST  */
         L     @12,I                                            02S0213
         MH    @12,@CH00049                                     02S0213
         L     @08,@PC00001+8                                   02S0213
         ALR   @08,@12                                          02S0213
         AL    @08,@CF01778                                     02S0213
         TM    LASTINDC-4(@08),B'10000000'                      02S0213
         BNO   @RF00213                                         02S0213
*    EXITSW = ON;                      /*EXIT LIST PROCESSING LOOP   */
         OI    EXITSW,B'10000000'                               02S0214
*END;                                                           02S0215
@RF00213 LA    @12,1                                            02S0215
         AL    @12,I                                            02S0215
         ST    @12,I                                            02S0215
@DE00098 TM    EXITSW,B'10000000'                               02S0215
         BZ    @DL00098                                         02S0215
*              END;                                             01S0216
*            ELSE                      /*NOT UNALLOCATE REQUEST      */
*              DO;                                              01S0217
         B     @RC00094                                         01S0217
@RF00094 DS    0H                                               01S0218
*                IF FUNCMAP = CONCAT ×     /*IF CONCAT REQUEST       */
*                  FUNCMAP = DECONC THEN   /*OR DECONCATE REQUEST    */
         L     @12,@PC00001                                     01S0218
         CLI   FUNCMAP(@12),X'03'                               01S0218
         BE    @RT00218                                         01S0218
         CLI   FUNCMAP(@12),X'04'                               01S0218
         BNE   @RF00218                                         01S0218
@RT00218 DS    0H                                               01S0219
*                    DO;                                        01S0219
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - B4F9CONC                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - CONCAT/DECONCAT PROCESSSING RTN.              */
*/*                                                                  */
*/* FUNCTION - TO PROCESS CONCAT AND DECONCAT REQUESTS AS FOLLOWS:   */
*/*              1)SEARCH TCTIOT L/U TABLE TO OBTAIN NUMBER OF DD    */
*/*                ENTRIES                                           */
*/*              2)SET UP INPUT PARAMETER TO CALL AN INTERNAL PROC   */
*/*                BUILDREC WHICH WILL BUILD A SMF RECORD TYPE 40    */
*/*                AND IF DECONCAT ZERO TCTIOT EXCP COUNTS           */
*/*                                                                  */
*/*   OPERATION - OPERATION IS DOCUMENTED BY THE CODE.               */
*/*                                                                  */
*/* ENTRY POINT -(INLINE SUBROUTINE - ENTERED AT THE TOP)            */
*/*                                                                  */
*/*   PURPOSE - SEE FUNCTION                                         */
*/*                                                                  */
*/*                                                                  */
*/* INPUT - TCTIOTBL - PTR TO TCTIOT                                 */
*/*         FUNCMAP  - FUNCTION INDICATOR(CONCAT OR DECONCAT)        */
*/*                                                                  */
*/*                                                                  */
*/*                                                                  */
*/* EXIT - NORMAL - (INLINE SUBROUTINE - EXITS AT BOTTOM)            */
*/*                                                                  */
*/*   CONDITION - CONCAT/DECONCAT REQUESTS PROCESSED                 */
*/*                                                                  */
*/*   OUTPUT - SMF RECORD TYPE 40 BUILT                      @ZA02706*/
*/*            TCTIOT REBUILT IF CONCAT                              */
*/*            EXCP COUNTS IN TCTIOT ZEROED IF DECONCAT              */
*/*   RETURN CODE - NONE                                             */
*/*                                                                  */
*/********************************************************************/
*OFFSET = ONE;                         /*INITIALIZE DD ENTRY OFFSET  */
         LA    @12,1                                            02S0220
         ST    @12,OFFSET                                       02S0220
*TCTLUENP = TCTIOTBL + LENGTH(TCTTIOT); /*FIRST L/U TABLE ENTRY      */
         L     @08,@PC00001+4                                   02S0221
         L     @08,TCBPTR(,@08)                                 02S0221
         L     @08,TCBTCT(,@08)                                 02S0221
         LA    @15,8                                            02S0221
         AL    @15,TCTIOTBL(,@08)                               02S0221
         ST    @15,TCTLUENP                                     02S0221
*EXITSW = OFF;                                                  02S0222
         NI    EXITSW,B'01111111'                               02S0222
*DO COUNT = ONE BY ONE                 /*SCAN L/U TABLE ENTRIES      */
*  WHILE(EXITSW = OFF);                                         02S0223
         LR    COUNT,@12                                        02S0223
         B     @DE00223                                         02S0223
@DL00223 DS    0H                                               02S0224
*  IF TCTIOTO(COUNT) = ZEROHALF THEN   /*IF END-OF-L/U TABLE FIELD   */
         LR    @12,COUNT                                        02S0224
         SLA   @12,2                                            02S0224
         L     @08,TCTLUENP                                     02S0224
         ALR   @08,@12                                          02S0224
         AL    @08,@CF01772                                     02S0224
         SLR   @12,@12                                          02S0224
         ICM   @12,3,TCTIOTO(@08)                               02S0224
         LTR   @12,@12                                          02S0224
         BNZ   @RF00224                                         02S0224
*    DO;                                                        02S0225
*      NUMDDS = COUNT - ONE;           /*NO.DD ENTRIES IN TCTIOT     */
         LR    @12,COUNT                                        02S0226
         BCTR  @12,0                                            02S0226
         ST    @12,NUMDDS                                       02S0226
*      EXITSW = ON;                    /*EXIT LOOP                   */
         OI    EXITSW,B'10000000'                               02S0227
*    END;                                                       02S0228
*  ELSE;                               /*NOT END OF L/U TABLE        */
@RF00224 DS    0H                                               02S0230
*END;                                                           02S0230
         AH    COUNT,@CH00048                                   02S0230
@DE00223 TM    EXITSW,B'10000000'                               02S0230
         BZ    @DL00223                                         02S0230
*TCTDVENP = TCTLUENP +                 /*PTR TO FIRST DEVICE ENTRY   */
*          (LENGTH(TCTLUENT) *         /*EQUALS START OF L/U TABLE   */
*           (NUMDDS + ONE));           /*PLUS SIZE OF L/U TABLE      */
         LA    TCTDVENP,1                                       02S0231
         AL    TCTDVENP,NUMDDS                                  02S0231
         SLA   TCTDVENP,2                                       02S0231
         AL    TCTDVENP,TCTLUENP                                02S0231
*SIZEUCBS = TCTSZLKP;                  /*SIZE VARIABLE PART REC 40   */
         L     @08,@PC00001+4                                   02S0232
         L     @08,TCBPTR(,@08)                                 02S0232
         L     @08,TCBTCT(,@08)                                 02S0232
         L     @08,TCTIOTBL(,@08)                               02S0232
         LH    @08,TCTSZLKP(,@08)                               02S0232
         ST    @08,SIZEUCBS                                     02S0232
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - GETREC                                            */
*/*                                                                  */
*/* DESCRIPTIVE NAME - GET SPACE FOR SMF DYNAMIC DD RECORD.          */
*/*                                                                  */
*/* FUNCTION - ISSUES GETSTORG MACRO TO OBTAIN SPACE FOR AN SMF      */
*/*            RECORD, WHICH IT CHAINS INTO ANY PRIOR        @ZA02706*/
*/*            RECORDS.                                      @ZA02706*/
*/*                                                                  */
*/*   OPERATION - OPERATION IS DOCUMENTED BY THE CODE.               */
*/*                                                                  */
*/*                                                                  */
*/* ENTRY POINT -(INLINE SUBROUTINE - ENTERED AT THE TOP)            */
*/*                                                                  */
*/*   PURPOSE - SEE FUNCTION                                         */
*/*                                                                  */
*/*                                                                  */
*/* INPUT -                                                          */
*/*   SIZEUCBS - SIZE OF THE VARIABLE PART OF THE RECORD (DEVICE     */
*/*              ENTRIES).                                           */
*/*   BUFPARMS - PTR TO FIRST AND LAST BUFFERS ON CHAIN      @ZA02706*/
*/*                                                                  */
*/*                                                                  */
*/* EXIT - NORMAL - (INLINE SUBROUTINE - EXITS AT BOTTOM)            */
*/*                                                                  */
*/*   CONDITION - SPACE FOR RECORD OBTAINED.                         */
*/*                                                                  */
*/*   OUTPUT -                                                       */
*/*      SMF40PTR - PTR TO SPACE FOR SMF RECORD                      */
*/*      BUFPARMS - UPDATE AS APPROPRIATE                    @ZA02706*/
*/*                                                                  */
*/*   RETURN CODE - RETCODE = ZERO                                   */
*/*                                                                  */
*/* EXIT - ERROR - THIS CODE IS AN INLINE SUBROUTINE - EXITS AT      */
*/*                BOTTOM.                                           */
*/*                                                                  */
*/*   CONDITION - UNABLE TO OBTAIN SPACE FOR RECORD.                 */
*/*                                                                  */
*/*   OUTPUT - NONE                                                  */
*/*                                                                  */
*/*   RETURN CODE - RETCODE = NON-ZERO VALUE.                        */
*/*                                                                  */
*/********************************************************************/
*RECSIZE = SIZEUCBS + LENGTH(SMFRCD40); /*RECORD SIZE EQUALS SPACE
*                                         FOR DEVICE ENTRIES PLUS
*                                         LENGTH OF FIXED RECORD     */
         AH    @08,@CH01767                                     03S0233
         ST    @08,RECSIZE                                      03S0233
*CORESIZE = RECSIZE + LENGTH(NXTSMFP); /*ADD CHAIN PTR       @ZA02706*/
         AH    @08,@CH00132                                     03S0234
         ST    @08,CORESIZE                                     03S0234
* /* ?GETSTORG (SPRECORD,CORESIZE,SMFCOREP);*/                  03S0235
*   RFY (GTSTR0,GTSTR1,GTSTR2) RSTD; /*SAVE RGS*/               03S0235
*   GTSTR0 = CORESIZE; /* SET AMOUNT*/                          03S0236
         LR    GTSTR0,@08                                       03S0236
*   GTSTR2 = SPRECORD; /* SET SUBPOOL*/                         03S0237
         LA    GTSTR2,230                                       03S0237
*   GENERATE CODE;                                              03S0238
     GETMAIN RC,LV=(0),SP=(2)  DO GETMAIN
*   GTSTRTCD = GTSTR15; /* SAVE GETMAIN RET COD*/               03S0239
         ST    GTSTR15,GTSTRTCD                                 03S0239
*   SMFCOREP = GTSTR1; /* ADDR OF GOTN STORG*/                  03S0240
         LR    SMFCOREP,GTSTR1                                  03S0240
*   RFY (GTSTR0,GTSTR1,GTSTR2) UNRSTD; /*RLSE */                03S0241
*   IF GTSTRTCD = 0 THEN /*GETMAIN SUCCESSFUL? */               03S0242
         L     @08,GTSTRTCD                                     03S0242
         LTR   @08,@08                                          03S0242
         BNZ   @RF00242                                         03S0242
*     DO;               /* YES, CLEAR STORAGE.*/                03S0243
*       RFY (GTSTR2,GTSTR4,GTSTR5,GTSTR6,                       03S0244
*                          GTSTR7,GTSTR8) RSTD;                 03S0244
*       GTSTR4 = SMFCOREP; /*STORG PTR*/                        03S0245
         LR    GTSTR4,SMFCOREP                                  03S0245
*       GTSTR5 = CORESIZE; /*STORG AMNT*/                       03S0246
         L     GTSTR5,CORESIZE                                  03S0246
*       GTSTR7 = '00000000'X; /*PAD CHAR & LNTH*/               03S0247
         SLR   GTSTR7,GTSTR7                                    03S0247
*       IF SPRECORD = GTST253 THEN                              03S0248
         B     @RF00248                                         03S0248
*      GEN                                                      03S0249
*   (MODESET KEYADDR=GTSTZERO,SAVEKEY=(2),WORKREG=8);           03S0249
         MODESET KEYADDR=GTSTZERO,SAVEKEY=(2),WORKREG=8
*       GEN REFS(GTSTR4,GTSTR6);                                03S0250
@RF00248 DS    0H                                               03S0250
          MVCL  GTSTR4,GTSTR6 CLEAR GOTTEN STORG
*       IF SPRECORD = GTST253 THEN                              03S0251
         B     @RF00251                                         03S0251
*         GEN (MODESET KEYADDR=(2));                            03S0252
         MODESET KEYADDR=(2)
*       RFY (GTSTR2,GTSTR4,GTSTR5,GTSTR6,                       03S0253
*                          GTSTR7,GTSTR8) UNRSTD;               03S0253
@RF00251 DS    0H                                               03S0254
*     END;       /* STORAGE CLEARING COMPLETED */               03S0254
*   ELSE                                                        03S0255
*   SMFCOREP= 0;   /* CLEAR RETURN ADDR. */                     03S0255
         B     @RC00242                                         03S0255
@RF00242 SLR   SMFCOREP,SMFCOREP                                03S0255
*   GTSTR15 = GTSTRTCD;    /* GTMN RETURN CODE */               03S0256
@RC00242 L     GTSTR15,GTSTRTCD                                 03S0256
*                                      /* RESTORE LIST PRINT STATUS  */
*/*GET SMF CORE       @ZA02706*/                                03S0257
*RETCODE = REG15;                      /*PICK UP RETURN CODE         */
         LR    RETCODE,REG15                                    03S0257
*IF RETCODE = SUCCESS THEN             /*RECORD GOTTEN       @ZA02706*/
         SLR   @08,@08                                          03S0258
         CR    RETCODE,@08                                      03S0258
         BNE   @RF00258                                         03S0258
*  DO;                                 /*DO CHAINING         @ZA02706*/
*    IF BUF1PTR = ZERO THEN            /*IF THIS IS FIRST    @ZA02706*/
         L     @03,@PC00001+20                                  03S0260
         C     @08,BUF1PTR(,@03)                                03S0260
         BNE   @RF00260                                         03S0260
*      BUF1PTR = SMFCOREP;             /*SET FIRST PTR       @ZA02706*/
         ST    SMFCOREP,BUF1PTR(,@03)                           03S0261
*    ELSE                              /*NOT FIRST           @ZA02706*/
*      BUFLPTR -> NXTSMFP = SMFCOREP;  /*CHAIN TO PRIOR LAST @ZA02706*/
         B     @RC00260                                         03S0262
@RF00260 L     @08,@PC00001+20                                  03S0262
         L     @08,BUFLPTR(,@08)                                03S0262
         ST    SMFCOREP,NXTSMFP(,@08)                           03S0262
*    BUFLPTR = SMFCOREP;               /*UPDATE CURRENT LAST @ZA02706*/
@RC00260 L     @08,@PC00001+20                                  03S0263
         ST    SMFCOREP,BUFLPTR(,@08)                           03S0263
*    NXTSMFP = ZERO;                   /*ZERO NEW NEXTPTR    @ZA02706*/
         SLR   @08,@08                                          03S0264
         ST    @08,NXTSMFP(,SMFCOREP)                           03S0264
*    SMF40PTR = ADDR(RECORD40);        /*SET RECORD BASE     @ZA02706*/
         LA    @08,RECORD40(,SMFCOREP)                          03S0265
         ST    @08,SMF40PTR                                     03S0265
*  END;                                /*END IF GETMAIN OK   @ZA02706*/
* DO; /*MODESET  KEYADDR(ZERO)*/                                02S0267
@RF00258 DS    0H                                               02S0268
*   SPKA (ZERO); /*SET PSW KEY*/                                02S0268
         SLR   @12,@12                                          02S0268
         SPKA  0(@12)                                           02S0268
* END; /*MODESET  KEYADDR(ZERO)*/               /*GET KEY ZERO  02S0269
*      */                                                       02S0269
* RFY (R11,R12,R13,R14) RSTD;SV13=R13;GEN REFS(PSALITA);        02S0270
         LR    SV13,R13                                         02S0271
  SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                              XX
               REGS=USE,RELATED=(TCTIOT,IEFDB4F9(B4F9CONC))
  SETLOCK OBTAIN,TYPE=CMS,MODE=UNCOND,                                XX
               REGS=USE,RELATED=(TCTIOT,IEFDB4F9(B4F9CONC))
* R13=SV13;RFY (R11,R12,R13,R14) UNRSTD;              /*GET LOCAL AND C
*S LOCKS     */                                                 02S0273
         LR    R13,SV13                                         02S0273
*IF RETCODE = SUCCESS THEN             /*IF RECORD SPACE OBTAINED    */
         LTR   RETCODE,RETCODE                                  02S0275
         BNZ   @RF00275                                         02S0275
*  CALL BUILDREC;                      /*BUILD SMF RECORD            */
         BAL   @14,BUILDREC                                     02S0276
*IF FUNCMAP = CONCAT THEN                                       02S0277
@RF00275 L     @12,@PC00001                                     02S0277
         CLI   FUNCMAP(@12),X'03'                               02S0277
         BNE   @RF00277                                         02S0277
*  DO;                                                          02S0278
*    LOCKSW = ON;                      /*LOCK HELD                   */
         OI    LOCKSW,B'00001000'                               02S0279
*    CALL REBUILD;                     /*REBUILD TCTIOT              */
         BAL   @14,REBUILD                                      02S0280
*  END;                                                         02S0281
*ELSE;                                 /*NOT CONCAT                  */
@RF00277 DS    0H                                               02S0283
* RFY (R11,R12,R13,R14) RSTD;SV13=R13;GEN;                      02S0283
         LR    SV13,R13                                         02S0284
  SETLOCK RELEASE,TYPE=CMS,                                           XX
               REGS=USE,RELATED=(TCTIOT,IEFDB4F9(B4F9CONC))
  SETLOCK RELEASE,TYPE=LOCAL,                                         XX
               REGS=USE,RELATED=(TCTIOT,IEFDB4F9(B4F9CONC))
* R13=SV13;RFY (R11,R12,R13,R14) UNRSTD;            /*RELEASE LOCAL AND
*CMS LOCKS */                                                   02S0286
         LR    R13,SV13                                         02S0286
* DO; /*MODESET  EXTKEY(SCHED)*/                                02S0288
*   SPKA (16); /*SET PSW KEY*/                                  02S0289
         LA    @12,16                                           02S0289
         SPKA  0(@12)                                           02S0289
* END; /*MODESET  EXTKEY(SCHED)*/               /*GET SCHED KEY 02S0290
*      */                                                       02S0290
*                    END;                                       01S0291
*                ELSE                  /*NOT CONCAT/DECONCAT @ZA02706*/
*                  IF FUNCMAP = WRITE THEN /*WRITE REQUEST?  @ZA02706*/
         B     @RC00218                                         01S0292
@RF00218 L     @12,@PC00001                                     01S0292
         CLI   FUNCMAP(@12),X'05'                               01S0292
         BNE   @RF00292                                         01S0292
*                    DO;               /*                    @ZA02706*/
*/********************************************************** @ZA02706*/
*/*                                                          @ZA02706*/
*/* SEGMENT NAME - B4F9WRIT                                  @ZA02706*/
*/*                                                          @ZA02706*/
*/* DESCRIPTIVE NAME - WRITE RECORD RTN.                     @ZA02706*/
*/*                                                          @ZA02706*/
*/* FUNCTION -  WRITE ANY SMF RECORDS THAT HAVE BEEN         @ZA02706*/
*/*             BUILT, FREEING THE BUFFER CORE.              @ZA02706*/
*/*                                                          @ZA02706*/
*/* ENTRY POINT -(INLINE SUBROUTINE - ENTERED AT THE TOP)    @ZA02706*/
*/*                                                          @ZA02706*/
*/*   PURPOSE - SEE FUNCTION                                 @ZA02706*/
*/*                                                          @ZA02706*/
*/*   INPUT -                                                @ZA02706*/
*/*     BUF1PTR - PTR TO FIRST SMF RECORD BUFFER             @ZA02706*/
*/*                                                          @ZA02706*/
*/* EXIT - NORMAL - (INLINE SUBROUTINE - EXITS AT BOTTOM)    @ZA02706*/
*/*                                                          @ZA02706*/
*/*   CONDITION - RECORDS WRITTEN                            @ZA02706*/
*/*                                                          @ZA02706*/
*/*   OUTPUT - SMF RECORD40 CHAIN WRITTEN OUT                @ZA02706*/
*/*          - BUFFER CORE FREED                             @ZA02706*/
*/*                                                          @ZA02706*/
*/*   RETURN CODE - NONE                                     @ZA02706*/
*/*                                                          @ZA02706*/
*/********************************************************** @ZA02706*/
*SMFCOREP = BUF1PTR;                   /*POINT TO 1ST BUFFER @ZA02706*/
         L     @08,@PC00001+20                                  02S0294
         L     SMFCOREP,BUF1PTR(,@08)                           02S0294
*DO WHILE SMFCOREP ^= ZERO;            /*PROCESS ALL RECORDS @ZA02706*/
         B     @DE00295                                         02S0295
@DL00295 DS    0H                                               02S0296
*  RFY(REG0,REG1) RSTD;                /*                    @ZA02706*/
*  REG1 = ADDR(RECORD40);              /*GET RECORD TO WRITE @ZA02706*/
         LA    REG1,RECORD40(,SMFCOREP)                         02S0297
*  GEN(SMFWTM (1));                    /*WRITE SMF RECORD 40 @ZA02706*/
         SMFWTM (1)
*  SMF40PTR = ADDR(RECORD40);          /*SET BASE PTR        @ZA02706*/
         LA    @08,RECORD40(,SMFCOREP)                          02S0299
         ST    @08,SMF40PTR                                     02S0299
*  REG0 = TDDRLEN + LENGTH(NXTSMFP);   /*LENGTH TO FREE      @ZA02706*/
         LA    REG0,4                                           02S0300
         AH    REG0,TDDRLEN(,@08)                               02S0300
*  REG0 = REG0 × SUBPOOLR;             /*CORRECT SUBPOOL     @ZA02706*/
         O     REG0,@CF00193                                    02S0301
*  REG1 = SMFCOREP;                    /*PTR TO CORE         @ZA02706*/
         LR    REG1,SMFCOREP                                    02S0302
*  SMFCOREP = NXTSMFP;                 /*GET NEXT            @ZA02706*/
         L     SMFCOREP,NXTSMFP(,SMFCOREP)                      02S0303
*  GEN(FREEMAIN R,LV=(0),A=(1));       /*FREE THE  CORE      @ZA02706*/
         FREEMAIN R,LV=(0),A=(1)
*  RFY (REG0,REG1) UNRSTD;             /*                    @ZA02706*/
*END;                                  /*END PROCESS LOOP    @ZA02706*/
@DE00295 LTR   SMFCOREP,SMFCOREP                                02S0306
         BNZ   @DL00295                                         02S0306
*                    END;              /*                    @ZA02706*/
*                  ELSE;               /*NOT VALID VERBCODE  @ZA02706*/
@RF00292 DS    0H                                               01S0309
*              END;                                             01S0309
*          END;                                                 01S0310
*      END;                                                     01S0311
*    ELSE                              /*NO CURRENT TCTIOT           */
*      DO;                                                      01S0312
         B     @RC00083                                         01S0312
@RF00083 DS    0H                                               01S0313
*         DO; /*MODESET  KEYADDR(ZERO)*/                        01S0313
*           SPKA (ZERO); /*SET PSW KEY*/                        01S0314
         SLR   @12,@12                                          01S0314
         SPKA  0(@12)                                           01S0314
*         END; /*MODESET  KEYADDR(ZERO)*/       /*GET KEY ZERO  01S0315
*      */                                                       01S0315
*        NUMDDS = ZERO;                /*NO DDS                      */
         ST    @12,NUMDDS                                       01S0316
*        CALL REBUILD;                 /*BUILD TCTIOT                */
         BAL   @14,REBUILD                                      01S0317
*         DO; /*MODESET  EXTKEY(SCHED)*/                        01S0318
*           SPKA (16); /*SET PSW KEY*/                          01S0319
         LA    @12,16                                           01S0319
         SPKA  0(@12)                                           01S0319
*         END; /*MODESET  EXTKEY(SCHED)*/       /*GET SCHED KEY 01S0320
*      */                                                       01S0320
*      END;                                                     01S0321
*    IF FREEPTR ^= ZERO THEN           /*IF TCTIOT TO FREE           */
@RC00083 L     @12,FREEPTR                                      01S0322
         LTR   @12,@12                                          01S0322
         BZ    @RF00322                                         01S0322
*      DO;                                                      01S0323
*        RFY (REG0,REG1) RSTD;                                  01S0324
*        REG0 = FREEPTR -> TCTPLEXT;   /*SUBPOOL & LEN. TCTIOT       */
         L     REG0,TCTPLEXT(,@12)                              01S0325
*        REG1 = FREEPTR;               /*PTR OLD TCTIOT              */
         LR    REG1,@12                                         01S0326
*        GEN (FREEMAIN R,LV=(0),A=(1));/*FREE OLD TCTIOT             */
         FREEMAIN R,LV=(0),A=(1)
*        RFY (REG0,REG1) UNRSTD;                                01S0328
*      END;                                                     01S0329
*  END;                                                         01S0330
@RF00322 DS    0H                                               01S0331
*RETURN CODE(ZERO);                    /*RETURN TO CALLER            */
@RF00075 L     @13,4(,@13)                                      01S0331
         L     @00,@SIZDATD                                     01S0331
         LR    @01,@09                                          01S0331
         FSPACE   R,LV=(0),A=(1)
         SLR   @15,@15                                          01S0331
         L     @14,12(,@13)                                     01S0331
         LM    @00,@12,20(@13)                                  01S0331
         BR    @14                                              01S0331
*BUILDREC: PROC;                                                02S0332
@EL00001 L     @13,4(,@13)                                      02S0332
@EF00001 L     @00,@SIZDATD                                     02S0332
         LR    @01,@09                                          02S0332
         FSPACE   R,LV=(0),A=(1)
@ER00001 LM    @14,@12,12(@13)                                  02S0332
         BR    @14                                              02S0332
BUILDREC STM   @14,@12,12(@13)                                  02S0332
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - BUILDREC                                          */
*/*                                                                  */
*/* DESCRIPTIVE NAME - BUILD SMF DYNAMIC DD RECORD                   */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*   THIS SUBROUTINE BUILDS THE SMF DYNAMIC DD RECORD(TYPE 40)      */
*/*                                                                  */
*/*   OPERATION -                                                    */
*/*     UPON ENTRY A POINTER TO THE FIRST DEVICE ENTRY IN THE FIRST  */
*/*     DD TO BE INCLUDED IN THE RECORD 40 WILL BE PROVIDED.ALSO     */
*/*     PROVIDED WILL BE THE TOTAL NUMBER OF DD ENTRIES AND THE SIZE */
*/*     OF VARIABLE PART OF THE RECORD.                              */
*/*       - THE NON-VARIABLE FIELDS IN THE RECORD WILL BE FILLED IN. */
*/*       - ALL DEVICE ENTRY FIELDS FOR THE DD ARE INITIALIZED IN THE*/
*/*         RECORD. IF UCBTYPE INDICATES A VIRTUAL DEVICE    @Y30LPPE*/
*/*         THEN THE DEVICE ENTRY FLAGS WILL BE SET TO       @Y30LPPE*/
*/*         INDICATE A VIRTUAL DEVICE.                       @Y30LPPE*/
*/*       - IF THE NUMBER OF DD ENTRIES IS GREATER THAN ONE THE NEXT */
*/*         CONTIGUOUS DD ENTRY IN THE TCTIOT IS PROCESSED AND SO ON.*/
*/*         (NOTE FOR UNALLOCATION THE DD ENTRY COUNT WILL BE ONE)   */
*/*                                                                  */
*/* ENTRY - THIS CODE IS AN INTERNAL PROCEDURE WHICH IS ENTERED      */
*/*         BY A CALL(BUILDREC)                                      */
*/*                                                                  */
*/*   PURPOSE - SEE FUNCTION.                                        */
*/*                                                                  */
*/*   INPUT -                                                        */
*/*     NUMDDS - NUMBER OF DD ENTRIES TO BE INCORPORATED INTO RECORD.*/
*/*     RECSIZE - SMF RECORD LENGTH                                  */
*/*     OFFSET   - INDEX OF FIRST TCTIOT DD ENTRY TO BE PROCESSED.   */
*/*     SIZEUCBS - SIZE OF THE VARIABLE PART OF THE RECORD(DEVICE    */
*/*                ENTRIES).                                         */
*/*     TCTLUENT - TCTIOT L/U TABLE                                  */
*/*     TCTIEX - BIT ON IF ERROR IN TCTIOT I/O COUNTS.               */
*/*     UCBRVDEV - VIRTUAL DEVICE INDICATOR                  @Y30LPPE*/
*/*     NOTE: CALLER MUST LOCK AND UNLOCK(CMS AND LOCAL) (FOR        */
*/*           CONCAT/DECONCAT)                                       */
*/*                                                                  */
*/* EXIT - NORMAL - THIS CODE IS AN INTERNAL PROCEDURE - RETURN TO   */
*/*                 CALLER                                           */
*/*                                                                  */
*/*   CONDITION - RECORD BUILT                                       */
*/*                                                                  */
*/*   OUTPUT -                                                       */
*/*     SMF DYNAMIC DD RECORD.                                       */
*/*     TCTDDCTR - TCTIOT EXCP COUNTER ZEROED FOR DECONCAT           */
*/*                                                                  */
*/*   RETURN CODE - NONE                                             */
*/*                                                                  */
*/********************************************************************/
*TDDRLEN = RECSIZE;                    /*ASSIGN RECORD LENGTH        */
         L     @12,SMF40PTR                                     02S0333
         MVC   TDDRLEN(2,@12),RECSIZE+2                         02S0333
*TDDRCDTY = REC40;                     /*ASSIGN RECORD 40            */
         MVI   TDDRCDTY(@12),X'28'                              02S0334
*TDDCPUID = JMRCPUID;                  /*ASSIGN CPU ID               */
         L     @08,@PC00001+4                                   02S0335
         L     @08,TCBPTR(,@08)                                 02S0335
         L     @08,TCBTCT(,@08)                                 02S0335
         L     @15,TCTJMR(,@08)                                 02S0335
         MVC   TDDCPUID(4,@12),JMRCPUID(@15)                    02S0335
*TDDUIF = JMRJOB;                      /*JOBNAME                     */
         MVC   TDDUIF(8,@12),JMRJOB(@15)                        02S0336
*TDDONTME = JMRENTRY;                  /*LOGON TIME                  */
         MVC   TDDONTME(4,@12),JMRENTRY(@15)                    02S0337
*TDDONDTE = JMREDATE;                  /*LOGON DATE                  */
         MVC   TDDONDTE(4,@12),JMREDATE(@15)                    02S0338
*TDDUDATA = JMRUSEID;                  /*USER ID                     */
         MVC   TDDUDATA(8,@12),JMRUSEID(@15)                    02S0339
*TDDINVSQ = JMRSTEP;                   /*STEP NO.                    */
         MVC   TDDINVSQ(1,@12),JMRSTEP(@15)                     02S0340
*TDDFLG = FUNCMAP;                     /*ASSIGN FUNCTION CODE        */
         L     @15,@PC00001                                     02S0341
         MVC   TDDFLG(1,@12),FUNCMAP(@15)                       02S0341
*IF TCTIEX = ON THEN                   /*ERROR IN TCTIOT I/O COUNTS  */
         TM    TCTIEX(@08),B'01000000'                          02S0342
         BNO   @RF00342                                         02S0342
*  TDDIEX = ON;                        /*SET ERROR INDICATOR         */
         OI    TDDIEX(@12),B'00000001'                          02S0343
*TDDVAR = SIZEUCBS + LENGTH(TDDVAR);   /*SIZE EXCP PORTION OF RECRD  */
@RF00342 L     @12,SMF40PTR                                     02S0344
         LA    @08,2                                            02S0344
         L     @15,SIZEUCBS                                     02S0344
         ALR   @15,@08                                          02S0344
         STH   @15,TDDVAR(,@12)                                 02S0344
*TDDDEVP = ADDR(TDDVAR) + LENGTH(TDDVAR); /*PTR TO 1ST DEV ENTRY
*                                        IN RECORD                   */
         LA    TDDDEVP,TDDVAR(,@12)                             02S0345
         ALR   TDDDEVP,@08                                      02S0345
*DEVENT = ONE;                         /*INDEX TO DEV ENTRY IN RECORD*/
         LA    @12,1                                            02S0346
         LR    DEVENT,@12                                       02S0346
*DO J = ONE TO NUMDDS;                 /*PROCESS FOR EACH DD ENTRY   */
         LR    J,@12                                            02S0347
         B     @DE00347                                         02S0347
@DL00347 DS    0H                                               02S0348
*  TCTDVENP = TCTCNTEO(OFFSET + J - 1) + TCTIOTBL; /*PTR TO FIRST
*                                        DEV ENTRY IN THIS DD ENTRY  */
         LR    @12,J                                            02S0348
         AL    @12,OFFSET                                       02S0348
         SLA   @12,2                                            02S0348
         L     @08,@PC00001+4                                   02S0348
         L     @08,TCBPTR(,@08)                                 02S0348
         L     @08,TCBTCT(,@08)                                 02S0348
         L     @01,TCTLUENP                                     02S0348
         ALR   @01,@12                                          02S0348
         AL    @01,@CF01781                                     02S0348
         SLR   TCTDVENP,TCTDVENP                                02S0348
         ICM   TCTDVENP,3,TCTCNTEO-2(@01)                       02S0348
         AL    TCTDVENP,TCTIOTBL(,@08)                          02S0348
*  DO K = ONE TO TCTDSCTR(1);          /*PROCESS EACH UCB THIS DD    */
         LA    K,1                                              02S0349
         B     @DE00349                                         02S0349
@DL00349 DS    0H                                               02S0350
*  UCBPTR = TCTDUCBP(K);               /*ADDRESS UCB                 */
         LR    @12,K                                            02S0350
         SLA   @12,3                                            02S0350
         ST    @12,@TF00001                                     02S0350
         ALR   @12,TCTDVENP                                     02S0350
         AL    @12,@CF01782                                     02S0350
         SLR   UCBPTR,UCBPTR                                    02S0350
         ICM   UCBPTR,3,TCTDUCBP(@12)                           02S0350
*    IF UCBPTR ^= ZERO THEN            /*UCB ADDRESS NOT ZERO        */
         LTR   UCBPTR,UCBPTR                                    02S0351
         BZ    @RF00351                                         02S0351
*      DO;                                                      02S0352
*        TDNEXCP(DEVENT) = TCTDDCTR(K);     /*ASSIGN EXCP COUNT      */
         LR    @12,DEVENT                                       02S0353
         SLA   @12,3                                            02S0353
         ST    @12,@TF00002                                     02S0353
         ALR   @12,TDDDEVP                                      02S0353
         AL    @12,@CF01772                                     02S0353
         LR    @08,TCTDVENP                                     02S0353
         AL    @08,@TF00001                                     02S0353
         AL    @08,@CF01772                                     02S0353
         MVC   TDNEXCP-4(4,@12),TCTDDCTR-4(@08)                 02S0353
*        TDCUAD(DEVENT) = UCBCHA;      /*ASSIGN CHANNEL ADDRESS      */
         SLR   @12,@12                                          02S0354
         IC    @12,UCBCHA(,UCBPTR)                              02S0354
         L     @08,@TF00002                                     02S0354
         AL    @08,@CF01781                                     02S0354
         STC   @12,TDCUAD-2(@08,TDDDEVP)                        02S0354
*        TDUNAD(DEVENT) = UCBUA;       /*ASSIGN UNIT ADDRESS         */
         SLR   @12,@12                                          02S0355
         IC    @12,UCBUA(,UCBPTR)                               02S0355
         L     @08,@TF00002                                     02S0355
         AL    @08,@CF01771                                     02S0355
         STC   @12,TDUNAD-3(@08,TDDDEVP)                        02S0355
*        IF UCBRVDEV=ON &              /*IF DEVICE           @Y30LPPE*/
*           UCBTYP(3:4)=THRTY330 THEN  /*IS A VIRTUAL 3330,  @Y30LPPE*/
         TM    UCBRVDEV(UCBPTR),B'00001000'                     02S0356
         BNO   @RF00356                                         02S0356
         CLC   UCBTYP+2(2,UCBPTR),@CB00198                      02S0356
         BNE   @RF00356                                         02S0356
*          DO;                         /*                    @Y30LPPE*/
*            SMF40VRT(DEVENT)=ON;      /*TURN VIRTUAL BIT ON @Y30LPPE*/
         LR    @12,TDDDEVP                                      02S0358
         AL    @12,@TF00002                                     02S0358
         AL    @12,@CF01781                                     02S0358
         OI    SMF40VRT-2(@12),B'10000000'                      02S0358
*          END;                        /*IN DEVENTRY FLAGS.  @Y30LPPE*/
*        TDEVC(DEVENT) = UCBTBYT3;     /*DEVICE CLASS                */
@RF00356 LR    @12,DEVENT                                       02S0360
         SLA   @12,3                                            02S0360
         ST    @12,@TF00001                                     02S0360
         ALR   @12,TDDDEVP                                      02S0360
         AL    @12,@CF01782                                     02S0360
         MVC   TDEVC(1,@12),UCBTBYT3(UCBPTR)                    02S0360
*        TDUTYP(DEVENT) = UCBTBYT4;    /*DEVICE TYPE                 */
         LR    @12,TDDDEVP                                      02S0361
         AL    @12,@TF00001                                     02S0361
         AL    @12,@CF01783                                     02S0361
         MVC   TDUTYP-1(1,@12),UCBTBYT4(UCBPTR)                 02S0361
*      END;                                                     02S0362
*    ELSE                                                       02S0363
*      DO;                                                      02S0363
         B     @RC00351                                         02S0363
@RF00351 DS    0H                                               02S0364
*        IF TCTFLAG3(K) = ON THEN      /*IF VAM ENTRY                */
         LR    @12,K                                            02S0364
         SLA   @12,3                                            02S0364
         ST    @12,@TF00001                                     02S0364
         ALR   @12,TCTDVENP                                     02S0364
         AL    @12,@CF01771                                     02S0364
         TM    TCTFLAG3-3(@12),B'01000000'                      02S0364
         BNO   @RF00364                                         02S0364
*          DO;                                                  02S0365
*            TDCUNAD(DEVENT) = VAMCODE;   /*VAM INDICATOR IN CHANNEL
*                                        AND UNIT ADDRESS FIELD      */
         LR    @12,DEVENT                                       02S0366
         SLA   @12,3                                            02S0366
         ST    @12,@TF00002                                     02S0366
         ALR   @12,TDDDEVP                                      02S0366
         AL    @12,@CF01781                                     02S0366
         MVC   TDCUNAD-2(2,@12),VAMCODE                         02S0366
*            TDNEXCP(DEVENT) = TCTDDCTR(K);   /*EXCP COUNT           */
         LR    @12,TDDDEVP                                      02S0367
         AL    @12,@TF00002                                     02S0367
         AL    @12,@CF01772                                     02S0367
         LR    @08,TCTDVENP                                     02S0367
         AL    @08,@TF00001                                     02S0367
         AL    @08,@CF01772                                     02S0367
         MVC   TDNEXCP-4(4,@12),TCTDDCTR-4(@08)                 02S0367
*          END;                                                 02S0368
*        ELSE                          /*NOT VAM ENTRY               */
*          TDEXCP(DEVENT) = TDEXCP(DEVENT) /*CLEAR DEVICE ENTRY      */
*           && TDEXCP(DEVENT);                                  02S0369
         B     @RC00364                                         02S0369
@RF00364 LR    @12,DEVENT                                       02S0369
         SLA   @12,3                                            02S0369
         ALR   @12,TDDDEVP                                      02S0369
         AL    @12,@CF01782                                     02S0369
         XC    TDEXCP(8,@12),TDEXCP(@12)                        02S0369
*      END;                                                     02S0370
@RC00364 DS    0H                                               02S0371
*    IF FUNCMAP = DECONC THEN          /*IF DECONCAT                 */
@RC00351 L     @12,@PC00001                                     02S0371
         CLI   FUNCMAP(@12),X'04'                               02S0371
         BNE   @RF00371                                         02S0371
*      TCTDDCTR(K) = ZERO;             /*CLEAR EXCP COUNT            */
         LR    @12,K                                            02S0372
         SLA   @12,3                                            02S0372
         SLR   @08,@08                                          02S0372
         AL    @12,@CF01772                                     02S0372
         ST    @08,TCTDDCTR-4(@12,TCTDVENP)                     02S0372
*      DEVENT = DEVENT + ONE;          /*UPDATE TO NEXT DEVICE ENTRY
*                                        IN RECORD                   */
@RF00371 AH    DEVENT,@CH00048                                  02S0373
*  END;                                                         02S0374
         AH    K,@CH00048                                       02S0374
@DE00349 SLR   @12,@12                                          02S0374
         IC    @12,TCTDSCTR(,TCTDVENP)                          02S0374
         CR    K,@12                                            02S0374
         BNH   @DL00349                                         02S0374
*END;                                                           02S0375
         AH    J,@CH00048                                       02S0375
@DE00347 C     J,NUMDDS                                         02S0375
         BNH   @DL00347                                         02S0375
*RETURN;                                                        02S0376
@EL00002 DS    0H                                               02S0376
@EF00002 DS    0H                                               02S0376
@ER00002 LM    @14,@12,12(@13)                                  02S0376
         BR    @14                                              02S0376
*END BUILDREC;                                                  02S0377
*REBUILD: PROC;                                                 02S0378
REBUILD  STM   @14,@12,@SA00003                                 02S0378
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - REBUILD                                           */
*/*                                                                  */
*/* DESCRIPTIVE NAME - REBUILD TCTIOT                                */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*           1 - IF THE NUMBER OF DD ENTRIES IN THE TIOT DOESN'T    */
*/*               MATCH THE NUMBER IN THE TIOT THEN SPACE FOR A NEW  */
*/*               TCTIOT WILL BE OBTAINED. THIS SITUATION IS THE     */
*/*               RESULT OF EITHER:                                  */
*/*                 A) A DYNAMIC ALLOCATION HAS JUST BEEN PERFORMED  */
*/*                    AND NO TCTIOT EXISTS.                         */
*/*                 B) DD ENTRIES ARE MISSING IN THE TCTIOT (IF ONE  */
*/*                    EXISTS) BECAUSE OF A PRIOR TCTIOT UPDATING    */
*/*                    FAILURE.                                      */
*/*               IF THE NUMBER OF DD ENTRIES IN THE TCTIOT MATCHES  */
*/*               THE NUMBER IN THE TIOT (AND IS NOT ZERO) THEN ENTRY*/
*/*               HAS BEEN FOR CONCAT AND THE ENTIRE TCTIOT EXCLUDING*/
*/*               HEADER PORTION WILL BE ZEROED SO THAT IT CAN BE    */
*/*               REBUILT IN ITS EXISTING SPACE.                     */
*/*           2 - INITIALIZES TCTIOT WITH LOOK-UP TABLE AND DD       */
*/*               ENTRIES CORRESPONDING TO THE TIOT OFFSETS IN THE   */
*/*               REARRANGED TIOT.                                   */
*/*                                                                  */
*/*                                                                  */
*/*   OPERATION -                                                    */
*/*              1 - SCANS DSAB CHAIN TO FIND NO. OF ACTIVE DD'S     */
*/*                  IN TIOT.                                        */
*/*              2 - CLEARS ALL ENTRIES IN CURRENT TCTIOT.           */
*/*              3 - PUTS TIOT DD ENTRY OFFSET AND CORRESPONDING     */
*/*                  TCTIOT DD ENTRY OFFSET IN TCTIOT LOOK-UP TABLE. */
*/*              4 - INITIALIZES TCTIOT DEVICE ENTRIES WITH UCB PTR  */
*/*                  FROM CORRESPONDING TIOT ENTRY, OR WITH VAM UCB  */
*/*                  INDICATOR IF VAM.                               */
*/*                                                                  */
*/*                                                                  */
*/* ENTRY POINT - REBUILD (INTERNAL PROCEDURE)                       */
*/*                                                                  */
*/*   PURPOSE - SEE FUNCTION                                         */
*/*                                                                  */
*/*                                                                  */
*/* INPUT -                                                          */
*/*   QDBPTR - PTR TO DSAB QDB                                       */
*/*   TCTIOTBL - PTR TO CURRENT TCTIOT(ZERO IF NO TCTIOT)            */
*/*   NUMDDS - NO. DDS IN CURRENT TCTIOT(ZERO IF NO TCTIOT)          */
*/*   LOCKSW - ON WHEN LOCAL AND CMS LOCKS ARE HELD (TRUE WHEN       */
*/*            ENTERED FROM CONCAT AND TCTIOT EXISTS).               */
*/*                                                                  */
*/* EXIT - NORMAL - (INLINE SUBROUTINE - EXITS AT BOTTOM)            */
*/*                                                                  */
*/*   CONDITION - TCTIOT ENTRIES CLEARED AND REINITIALIZED.          */
*/*                                                                  */
*/*   OUTPUT - TCTIOT L/U TABLE ENTRIES AND COUNTER TABLE            */
*/*            ENTRIES INITIALIZED.                                  */
*/*          - TCTSZLKP - LEN. OF DEVICE ENTRIES IN TCTIOT           */
*/*          - TCTIOT IF ONE DID NOT EXIST ON ENTRY                  */
*/*                                                                  */
*/*   RETURN CODE - NONE                                             */
*/*                                                                  */
*/* EXIT - ERROR - (INLINE SUBROUTINE - EXITS AT BOTTOM)             */
*/*                                                                  */
*/*   CONDITION - GETMAIN FOR TCTIOT FAILS                           */
*/*                                                                  */
*/*   OUTPUT - TCTIEX SET TO ONE TO INDICATE TCTIOT I/O              */
*/*            COUNT DATA LOST                                       */
*/*                                                                  */
*/*   RETURN CODE - NONE                                             */
*/*                                                                  */
*/********************************************************************/
*DEVENTNO = DEVENTNO && DEVENTNO;      /*INITIALIZE DEVICE COUNTER   */
         L     @12,DEVENTNO                                     02S0379
         LR    @08,@12                                          02S0379
         XR    @08,@12                                          02S0379
         ST    @08,DEVENTNO                                     02S0379
*DSABPTR = QDBFELMP;                   /*POINT TO FIRST DSAB         */
         L     @12,@PC00001+16                                  02S0380
         L     @12,QDBPTR(,@12)                                 02S0380
         L     DSABPTR,QDBFELMP(,@12)                           02S0380
*DDCOUNT = ZERO;                       /*INITIALIZE COUNTER          */
         SLR   @12,@12                                          02S0381
         STH   @12,DDCOUNT                                      02S0381
*DO WHILE(DSABPTR ^= ZERO);            /*SCAN DSAB CHAIN             */
         B     @DE00382                                         02S0382
@DL00382 DS    0H                                               02S0383
*  DEVENTNO = DEVENTNO + TIOEWTCT;     /*COUNT DEVICE ENTRIES        */
         L     @12,DSABTIOT(,DSABPTR)                           02S0383
         SLR   @08,@08                                          02S0383
         IC    @08,TIOEWTCT(,@12)                               02S0383
         AL    @08,DEVENTNO                                     02S0383
         ST    @08,DEVENTNO                                     02S0383
*  DSABPTR = DSABFCHN;                 /*POINT TO NEXT DSAB          */
         L     DSABPTR,DSABFCHN(,DSABPTR)                       02S0384
*  DDCOUNT = DDCOUNT + ONE;            /*DD ENTRY COUNT              */
         LA    @12,1                                            02S0385
         AH    @12,DDCOUNT                                      02S0385
         STH   @12,DDCOUNT                                      02S0385
*END;                                                           02S0386
@DE00382 SLR   @12,@12                                          02S0386
         CR    DSABPTR,@12                                      02S0386
         BNE   @DL00382                                         02S0386
*SPACEPTR = ZERO;                      /*INITIALIZE PTR              */
         ST    @12,SPACEPTR                                     02S0387
*GETCODE = SUCCESS;                    /*INITIALIZE GETCODE          */
         LR    GETCODE,@12                                      02S0388
*IF NUMDDS ^= DDCOUNT THEN             /*IF CURRENT TCTIOT DOESN'T
*                                        MATCH TIOT                  */
         LH    @08,DDCOUNT                                      02S0389
         C     @08,NUMDDS                                       02S0389
         BE    @RF00389                                         02S0389
*  DO;                                                          02S0390
*    GETSIZE = LENGTH(TCTTIOT)         /*HEADER                      */
*              + LENGTH(TCTDCBLE)      /*END L/U TAB FIELD           */
*              + (DDCOUNT * LENGTH(TCTLUENT))  /*L/U TABLE ENTRIES   */
*              + (DDCOUNT * LENGTH(TCTOUTLM))  /*OUTLIM FIELDS       */
*              + (DEVENTNO * LENGTH(TCTDVENT));  /*DEVICE ENTRIES    */
         LR    @15,@08                                          02S0391
         SLA   @15,2                                            02S0391
         AH    @15,@CH01768                                     02S0391
         SLA   @08,3                                            02S0391
         ALR   @15,@08                                          02S0391
         L     @08,DEVENTNO                                     02S0391
         SLA   @08,3                                            02S0391
         ALR   @15,@08                                          02S0391
         ST    @15,GETSIZE                                      02S0391
*    GETSIZE = MAX(GETSIZE,EXTRSPAC);  /*GET LARGER OF NEEDED SIZE OR
*                                        DEFAULT SIZE                */
         LA    @08,200                                          02S0392
         CR    @15,@08                                          02S0392
         BNL   *+6
         LR    @15,@08                                          02S0392
         ST    @15,GETSIZE                                      02S0392
*    IF TCTIOTBL ^= ZERO               /*IF OLD TCTIOT EXISTS        */
*       & LOCKSW = ON THEN             /*AND LOCKED                  */
         L     @08,@PC00001+4                                   02S0393
         L     @08,TCBPTR(,@08)                                 02S0393
         L     @08,TCBTCT(,@08)                                 02S0393
         L     @15,TCTIOTBL(,@08)                               02S0393
         CR    @15,@12                                          02S0393
         BE    @RF00393                                         02S0393
         TM    LOCKSW,B'00001000'                               02S0393
         BNO   @RF00393                                         02S0393
*      DO;                                                      02S0394
*        FREEPTR = TCTIOTBL;           /*OLD TCTIOT PTR              */
         ST    @15,FREEPTR                                      02S0395
*        TCTIOTBL = ZERO;              /*ZERO TCTIOT PTR             */
         ST    @12,TCTIOTBL(,@08)                               02S0396
*         RFY (R11,R12,R13,R14) RSTD;SV13=R13;GEN;              02S0397
         LR    SV13,R13                                         02S0398
          SETLOCK RELEASE,TYPE=CMS,                                   XX
               REGS=USE,RELATED=(TCTIOT,IEFDB4F9(B4F9CONC))
          SETLOCK RELEASE,TYPE=LOCAL,                                 XX
               REGS=USE,RELATED=(TCTIOT,IEFDB4F9(B4F9CONC))
*         R13=SV13;RFY (R11,R12,R13,R14) UNRSTD;    /*RELEASE LOCAL & C
*S LOCKS   */                                                   02S0400
         LR    R13,SV13                                         02S0400
*      END;                                                     02S0402
*     /* ?GETSTORG (SPTCTIOT,GETSIZE,SPACEPTR);*/               02S0403
*       RFY (GTSTR0,GTSTR1,GTSTR2) RSTD; /*SAVE RGS*/           02S0403
@RF00393 DS    0H                                               02S0404
*       GTSTR0 = GETSIZE; /* SET AMOUNT*/                       02S0404
         L     GTSTR0,GETSIZE                                   02S0404
*       GTSTR2 = SPTCTIOT; /* SET SUBPOOL*/                     02S0405
         LA    GTSTR2,255                                       02S0405
*       GENERATE CODE;                                          02S0406
         GETMAIN RC,LV=(0),SP=(2)  DO GETMAIN
*       GTSTRTCD = GTSTR15; /* SAVE GETMAIN RET COD*/           02S0407
         ST    GTSTR15,GTSTRTCD                                 02S0407
*       SPACEPTR = GTSTR1; /* ADDR OF GOTN STORG*/              02S0408
         ST    GTSTR1,SPACEPTR                                  02S0408
*       RFY (GTSTR0,GTSTR1,GTSTR2) UNRSTD; /*RLSE */            02S0409
*       IF GTSTRTCD = 0 THEN /*GETMAIN SUCCESSFUL? */           02S0410
         L     @12,GTSTRTCD                                     02S0410
         LTR   @12,@12                                          02S0410
         BNZ   @RF00410                                         02S0410
*         DO;               /* YES, CLEAR STORAGE.*/            02S0411
*           RFY (GTSTR2,GTSTR4,GTSTR5,GTSTR6,                   02S0412
*                              GTSTR7,GTSTR8) RSTD;             02S0412
*           GTSTR4 = SPACEPTR; /*STORG PTR*/                    02S0413
         L     @12,SPACEPTR                                     02S0413
         LR    GTSTR4,@12                                       02S0413
*           GTSTR5 = GETSIZE; /*STORG AMNT*/                    02S0414
         L     GTSTR5,GETSIZE                                   02S0414
*           GTSTR7 = '00000000'X; /*PAD CHAR & LNTH*/           02S0415
         SLR   GTSTR7,GTSTR7                                    02S0415
*           IF SPTCTIOT = GTST253 THEN                          02S0416
         B     @RF00416                                         02S0416
*          GEN                                                  02S0417
*       (MODESET KEYADDR=GTSTZERO,SAVEKEY=(2),WORKREG=8);       02S0417
         MODESET KEYADDR=GTSTZERO,SAVEKEY=(2),WORKREG=8
*           GEN REFS(GTSTR4,GTSTR6);                            02S0418
@RF00416 DS    0H                                               02S0418
              MVCL  GTSTR4,GTSTR6 CLEAR GOTTEN STORG
*           IF SPTCTIOT = GTST253 THEN                          02S0419
         B     @RF00419                                         02S0419
*             GEN (MODESET KEYADDR=(2));                        02S0420
         MODESET KEYADDR=(2)
*           RFY (GTSTR2,GTSTR4,GTSTR5,GTSTR6,                   02S0421
*                              GTSTR7,GTSTR8) UNRSTD;           02S0421
@RF00419 DS    0H                                               02S0422
*         END;       /* STORAGE CLEARING COMPLETED */           02S0422
*       ELSE                                                    02S0423
*       SPACEPTR= 0;   /* CLEAR RETURN ADDR. */                 02S0423
         B     @RC00410                                         02S0423
@RF00410 SLR   @12,@12                                          02S0423
         ST    @12,SPACEPTR                                     02S0423
*       GTSTR15 = GTSTRTCD;    /* GTMN RETURN CODE */           02S0424
@RC00410 L     GTSTR15,GTSTRTCD                                 02S0424
*                                      /* RESTORE LIST PRINT STATUS  */
*/*GET NEW TCTIOT          */                                   02S0425
*    GETCODE = REG15;                  /*PICK UP RETURN CODE         */
         LR    GETCODE,REG15                                    02S0425
*    IF GETCODE ^= SUCCESS THEN                                 02S0426
         LTR   GETCODE,GETCODE                                  02S0426
         BZ    @RF00426                                         02S0426
*      TCTIEX = ON;                    /*IF GETMAIN FAILURE     02S0427
*                                        INDICATING TCTIOT I/O COUNT
*                                        DATA LOST                   */
         L     @12,@PC00001+4                                   02S0427
         L     @12,TCBPTR(,@12)                                 02S0427
         L     @12,TCBTCT(,@12)                                 02S0427
         OI    TCTIEX(@12),B'01000000'                          02S0427
*    IF LOCKSW = ON THEN               /*IF LOCK REQUIRED            */
@RF00426 TM    LOCKSW,B'00001000'                               02S0428
         BNO   @RF00428                                         02S0428
*      DO;                                                      02S0429
*         RFY (R11,R12,R13,R14) RSTD;SV13=R13;GEN REFS(PSALITA);
         LR    SV13,R13                                         02S0431
          SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                      XX
               REGS=USE,RELATED=(TCTIOT,IEFDB4F9(B4F9CONC))
          SETLOCK OBTAIN,TYPE=CMS,MODE=UNCOND,                        XX
               REGS=USE,RELATED=(TCTIOT,IEFDB4F9(B4F9CONC))
*         R13=SV13;RFY (R11,R12,R13,R14) UNRSTD;      /*OBTAIN LOCAL &
*MS LOCKS    */                                                 02S0433
         LR    R13,SV13                                         02S0433
*      END;                                                     02S0435
*  END;                                                         02S0436
*ELSE                                  /*TCTIOT MATCHES TIOT         */
*  DO;                                                          02S0437
         B     @RC00389                                         02S0437
@RF00389 DS    0H                                               02S0438
*    FRRZERO = ON;                     /*ZERO PTR TO TCTIOT IF ABEND */
         L     @12,FRRPARMP                                     02S0438
         OI    FRRZERO(@12),B'10000000'                         02S0438
*    SPACEPTR = TCTIOTBL;              /*SAVE TCTIOT PTR             */
         L     @12,@PC00001+4                                   02S0439
         L     @12,TCBPTR(,@12)                                 02S0439
         L     @12,TCBTCT(,@12)                                 02S0439
         MVC   SPACEPTR(4),TCTIOTBL(@12)                        02S0439
*  END;                                                         02S0440
*IF GETCODE = SUCCESS                  /*IF VALID TCTIOT EXISTS      */
*   & DDCOUNT ^= ZERO THEN                                      02S0441
@RC00389 SLR   @12,@12                                          02S0441
         CR    GETCODE,@12                                      02S0441
         BNE   @RF00441                                         02S0441
         CH    @12,DDCOUNT                                      02S0441
         BE    @RF00441                                         02S0441
*  DO;                                                          02S0442
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME - UPDATE                                            */
*/*                                                                  */
*/* DESCRIPTIVE NAME - UPDATE TCTIOT                                 */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*          .IF AN OLD TCTIOT IS BEING USED, THE WHOLE TCTIOT,      */
*/*           EXCLUDING THE HEADER PORTION WILL BE ZEROED.           */
*/*                                                                  */
*/*          .THE TCTIOT L/U TABLE AND DEVICE ENTRY SECTION ARE      */
*/*           INITIALIZED WITH DATA OBTAINED FROM THE TIOT.          */
*/*                                                                  */
*/*          .IF A NEW TCTIOT HAS BEEN OBTAINED THEN THE TCTIOT      */
*/*           HEADER IS INITIALIZED WITH TCTIOT LENGTH, SUBPOOL      */
*/*           AND TOTAL LENGTH OF DEVICE ENTRIES.                    */
*/*                                                                  */
*/*   OPERATION - OPERATION IS DOCUMENTED BY THE CODE                */
*/*                                                                  */
*/* ENTRY POINT - (INLINE SUBROUTINE - ENTERED AT TOP)               */
*/*                                                                  */
*/*   PURPOSE - SEE FUNCTION                                         */
*/*                                                                  */
*/* INPUT -                                                          */
*/*       - TCTIOTBL - PTR TO OLD TCTIOT (ZERO IF NEW TCTIOT JUST    */
*/*                    OBTAINED)                                     */
*/*       - SPACEPTR - PTR TO TCTIOT BEING INITIALIZED               */
*/*       - QDBFELMP - PTR TO FIRST DSAB ON CHAIN                    */
*/*       - LOCKSW   - IF = 1 THEN LOCAL AND CMS LOCK HELD           */
*/*                                                                  */
*/* EXIT - NORMAL - (INLINE SUBROUTINE EXITS AT BOTTOM)              */
*/*                                                                  */
*/*   CONDITION - TCTIOT INITIALIZED WITH L/U TABLE AND DEVICE       */
*/*               ENTRY INFORMATION                                  */
*/*                                                                  */
*/*   OUTPUT - TCTIOT LOOK-UP TABLE AND DEVICE ENTRY INFORMATION     */
*/*            INITIALIZED                                           */
*/*          - IF COMPLETELY NEW TCTIOT THEN TCTIOT HEADER UPDATED   */
*/*            WITH TCTIOT LENGTH, SUBPOOL AND TOTAL LENGTH OF       */
*/*            DEVICE ENTRIES.                                       */
*/*                                                                  */
*/*   RETURN CODE - NONE                                             */
*/*                                                                  */
*/********************************************************************/
*    RFY TCTTIOT BASED(SPACEPTR);                               03S0443
*IF FREEPTR ^= ZERO THEN                                        03S0444
         L     @08,FREEPTR                                      03S0444
         CR    @08,@12                                          03S0444
         BE    @RF00444                                         03S0444
*  DO;                                 /*ESTABLISH FRR PROTECTION    */
*    EXTCTIOP = FREEPTR;               /*PTR TO RESTORE IN TCT IF
*                                        ABEND TO FRR PARM LIST      */
         L     @12,FRRPARMP                                     03S0446
         ST    @08,EXTCTIOP(,@12)                               03S0446
*    TCTIOP = SPACEPTR;                /*TCTIOT PTR TO FRR PARMS     */
         MVC   TCTIOP(4,@12),SPACEPTR                           03S0447
*    TCTIOLN = GETSIZE;                /*LENGTH TO FRR PARMS         */
         L     @08,GETSIZE                                      03S0448
         ST    @08,TCTIOLN(,@12)                                03S0448
*    TCTIOLN = TCTIOLN × SUBPLNUM;     /*SUBPOOL TO FRR PARMS        */
         O     @08,@CF00191                                     03S0449
         ST    @08,TCTIOLN(,@12)                                03S0449
*  END;                                                         03S0450
*IF LOCKSW = ON THEN                   /*CODE UNDER LOCK             */
@RF00444 TM    LOCKSW,B'00001000'                               03S0451
         BNO   @RF00451                                         03S0451
*  DO;                                 /*ESTABLISH FRR PROTECTION    */
*    RFY (REG2,REG3,REG4) RSTD;                                 03S0453
*    REG2 = ADDR(IEFDB403);            /*ADDR OF FRR RTN             */
         L     REG2,@CV01730                                    03S0454
*    FRRSW = ON;                       /*INDICATE FRR ISSUED         */
         OI    FRRSW,B'01000000'                                03S0455
*    GEN;                                                       03S0456
    SETFRR A,PARMAD=(3),FRRAD=(2),WRKREGS=(3,4)
*    PARMFRRP = REG3;                  /*PTR TO FRR SUPPLIED PARMS   */
         LR    PARMFRRP,REG3                                    03S0457
*    RFY (REG2,REG3,REG4) UNRSTD;                               03S0458
*    FRRP = FRRPARMP;                  /*PTR TO FRR USER PARMS       */
         MVC   FRRP(4,PARMFRRP),FRRPARMP                        03S0459
*  END;                                                         03S0460
*ELSE                                  /*NEW TCTIOT CREATED          */
*  DO;                                                          03S0461
         B     @RC00451                                         03S0461
@RF00451 DS    0H                                               03S0462
*    DETCTIOP = SPACEPTR;              /*TCTIOT PTR TO ESTAE PARMS   */
         L     @12,@PC00001+12                                  03S0462
         MVC   DETCTIOP(4,@12),SPACEPTR                         03S0462
*    DETCTIOL = GETSIZE;               /*TCTIOT LENGTH TO ESTAE PARMS*/
         L     @08,GETSIZE                                      03S0463
         ST    @08,DETCTIOL(,@12)                               03S0463
*    DETCTIOL = DETCTIOL × SUBPLNUM;   /*SUBPOOL NUMGER TO ESTAE LIST*/
         O     @08,@CF00191                                     03S0464
         ST    @08,DETCTIOL(,@12)                               03S0464
*  END;                                                         03S0465
*IF TCTIOTBL ^= ZERO THEN              /*IF OLD TCTIOT BEING USED    */
@RC00451 L     @12,@PC00001+4                                   03S0466
         L     @12,TCBPTR(,@12)                                 03S0466
         L     @12,TCBTCT(,@12)                                 03S0466
         ICM   @08,15,TCTIOTBL(@12)                             03S0466
         BZ    @RF00466                                         03S0466
*  DO;                                                          03S0467
*    RFY (REG2,REG3,REG4,REG5) RSTD;                            03S0468
*    REG2 = SPACEPTR +LENGTH(TCTTIOT); /*PTR TCTIOT ENTRIES          */
         L     @12,SPACEPTR                                     03S0469
         LA    @08,8                                            03S0469
         LR    REG2,@12                                         03S0469
         ALR   REG2,@08                                         03S0469
*    REG3 = TCTSZEXT-LENGTH(TCTTIOT);  /*TCTIOT ENTRY SIZE           */
         LCR   @08,@08                                          03S0470
         AH    @08,TCTSZEXT(,@12)                               03S0470
         LR    REG3,@08                                         03S0470
*    REG4 = REG4 && REG4;                                       03S0471
         XR    REG4,REG4                                        03S0471
*    REG5 = REG5 && REG5;                                       03S0472
         XR    REG5,REG5                                        03S0472
*    GEN (MVCL 2,4);                   /*CLEAR TCTIOT                */
         MVCL 2,4
*    RFY (REG2,REG3,REG4,REG5) UNRSTD;                          03S0474
*  END;                                                         03S0475
*TCTLUENP = SPACEPTR + LENGTH(TCTTIOT);/*PTR TO FIRST L/U ENTRY      */
@RF00466 LA    @12,8                                            03S0476
         AL    @12,SPACEPTR                                     03S0476
         ST    @12,TCTLUENP                                     03S0476
*TCTDVENP =                            /*PTR TO FIRST TCTIOT DEV.ENT */
*           TCTLUENP                   /*FIRST L/U ENTRY LOCATION    */
*         + LENGTH(TCTDCBLE)           /*END L/U TABLE FIELD         */
*         + (LENGTH(TCTLUENT)          /*PLUS SIZE L/U ENTRY SECTION */
*         * DDCOUNT);                                           03S0477
         AH    @12,@CH00132                                     03S0477
         LH    TCTDVENP,DDCOUNT                                 03S0477
         SLA   TCTDVENP,2                                       03S0477
         ALR   @12,TCTDVENP                                     03S0477
         LR    TCTDVENP,@12                                     03S0477
*DSABPTR = QDBFELMP;                   /*PTR TO FIRST DSAB ON CHAIN  */
         L     @12,@PC00001+16                                  03S0478
         L     @12,QDBPTR(,@12)                                 03S0478
         L     DSABPTR,QDBFELMP(,@12)                           03S0478
*DO I = ONE TO DDCOUNT BY ONE;         /*UPDATE TCTIOT               */
         LA    @12,1                                            03S0479
         ST    @12,I                                            03S0479
         B     @DE00479                                         03S0479
@DL00479 DS    0H                                               03S0480
*  TCTIOTO(I) = DSABTIOT - TCBTIO;     /*OFFSET TIOT DD ENTRY FROM
*                                        BEGINNING OF TIOT           */
         L     @08,TCTLUENP                                     03S0480
         SLA   @12,2                                            03S0480
         L     @06,DSABTIOT(,DSABPTR)                           03S0480
         L     @03,@PC00001+4                                   03S0480
         L     @03,TCBPTR(,@03)                                 03S0480
         LR    @15,@06                                          03S0480
         SL    @15,TCBTIO(,@03)                                 03S0480
         LA    @03,0(@12,@08)                                   03S0480
         AL    @03,@CF01772                                     03S0480
         STH   @15,TCTIOTO(,@03)                                03S0480
*  TCTCNTEO(I) = TCTDVENP              /*OFFSET TCTIOT DD ENTRY FROM */
*               - SPACEPTR;            /*BEGINNING TCTIOT            */
         LR    @03,TCTDVENP                                     03S0481
         SL    @03,SPACEPTR                                     03S0481
         AL    @08,@CF01773                                     03S0481
         STH   @03,TCTCNTEO-2(@12,@08)                          03S0481
*  TCTDSCTR(1) = TIOEWTCT;             /*NO.DEVICES THIS DD          */
         MVC   TCTDSCTR(1,TCTDVENP),TIOEWTCT(@06)               03S0482
*  DO COUNT = ONE TO TIOEWTCT BY ONE;  /*PROCESS TCTIOT DD ENTRY     */
         LA    COUNT,1                                          03S0483
         B     @DE00483                                         03S0483
@DL00483 DS    0H                                               03S0484
*    IF DSABVAM = OFF THEN             /*IF NOT VAM DATA SET         */
         TM    DSABVAM(DSABPTR),B'00100000'                     03S0484
         BNZ   @RF00484                                         03S0484
*      TCTDUCBP(COUNT) = TIOUCBP(COUNT); /*ASSIGN TIOT UCB TO TCTIOT */
         LR    @12,COUNT                                        03S0485
         SLA   @12,3                                            03S0485
         LR    @08,COUNT                                        03S0485
         SLA   @08,2                                            03S0485
         L     @06,DSABTIOT(,DSABPTR)                           03S0485
         L     @08,TIOUCBP-5(@08,@06)                           03S0485
         LA    @08,0(,@08)                                      03S0485
         AL    @12,@CF01782                                     03S0485
         STH   @08,TCTDUCBP(@12,TCTDVENP)                       03S0485
*    ELSE                              /*VAM DATA SET                */
*      DO;                                                      03S0486
         B     @RC00484                                         03S0486
@RF00484 DS    0H                                               03S0487
*        TCTDUCBP(COUNT) =             /*VAM UCB PTR ZEROED          */
*        TCTDUCBP(COUNT) && TCTDUCBP(COUNT);                    03S0487
         LR    @12,COUNT                                        03S0487
         SLA   @12,3                                            03S0487
         ST    @12,@TF00001                                     03S0487
         ALR   @12,TCTDVENP                                     03S0487
         AL    @12,@CF01782                                     03S0487
         XC    TCTDUCBP(2,@12),TCTDUCBP(@12)                    03S0487
*        TCTFLAG3(COUNT) = ON;         /*VAM INDICATOR IN TCTIOT     */
         LR    @12,TCTDVENP                                     03S0488
         AL    @12,@TF00001                                     03S0488
         AL    @12,@CF01771                                     03S0488
         OI    TCTFLAG3-3(@12),B'01000000'                      03S0488
*      END;                                                     03S0489
*  END;                                                         03S0490
@RC00484 AH    COUNT,@CH00048                                   03S0490
@DE00483 L     @12,DSABTIOT(,DSABPTR)                           03S0490
         SLR   @08,@08                                          03S0490
         IC    @08,TIOEWTCT(,@12)                               03S0490
         CR    COUNT,@08                                        03S0490
         BNH   @DL00483                                         03S0490
*  TCTDVENP = TCTDVENP                 /*UPDATE DD ENTRY PTR BY      */
*            + LENGTH(TCTOUTLM)        /*LEN. OUTLIM FIELD           */
*            + (TIOEWTCT               /*LENGTH DEVICE ENTRIES       */
*            * LENGTH(TCTDVENT));                               03S0491
         LA    @12,8                                            03S0491
         ALR   @12,TCTDVENP                                     03S0491
         L     @08,DSABTIOT(,DSABPTR)                           03S0491
         SLR   @06,@06                                          03S0491
         IC    @06,TIOEWTCT(,@08)                               03S0491
         SLA   @06,3                                            03S0491
         ALR   @12,@06                                          03S0491
         LR    TCTDVENP,@12                                     03S0491
*  DSABPTR = DSABFCHN;                 /*POINT TO NEXT DSAB ENTRY    */
         L     DSABPTR,DSABFCHN(,DSABPTR)                       03S0492
*END;                                                           03S0493
         LA    @12,1                                            03S0493
         AL    @12,I                                            03S0493
         ST    @12,I                                            03S0493
@DE00479 CH    @12,DDCOUNT                                      03S0493
         BNH   @DL00479                                         03S0493
*IF TCTIOTBL = ZERO THEN               /*NEW TCTIOT OBTAINED         */
         L     @12,@PC00001+4                                   03S0494
         L     @12,TCBPTR(,@12)                                 03S0494
         L     @12,TCBTCT(,@12)                                 03S0494
         ICM   @08,15,TCTIOTBL(@12)                             03S0494
         BNZ   @RF00494                                         03S0494
*  DO;                                                          03S0495
*    TCTSZEXT = GETSIZE;               /*LEN NEW TCTIOT              */
         L     @12,SPACEPTR                                     03S0496
         MVC   TCTSZEXT(2,@12),GETSIZE+2                        03S0496
*    TCTSPOOL = SPTCTIOT;              /*SUBPOOL TCTIOT              */
         MVI   TCTSPOOL(@12),X'FF'                              03S0497
*    TCTSZLKP = DEVENTNO * LENGTH(TCTDVENT);  /*LEN DEVICE ENTRIES   */
         L     @08,DEVENTNO                                     03S0498
         SLA   @08,3                                            03S0498
         STH   @08,TCTSZLKP(,@12)                               03S0498
*    IF LOCKSW = OFF THEN              /*IS LOCK NEEDED              */
         TM    LOCKSW,B'00001000'                               03S0499
         BNZ   @RF00499                                         03S0499
*      DO;                                                      03S0500
*         RFY (R11,R12,R13,R14) RSTD;SV13=R13;GEN REFS(PSALITA);
         LR    SV13,R13                                         03S0502
          SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                      XX
               REGS=USE,RELATED=(TCTIOT,IEFDB4F9(REBUILD))
          SETLOCK OBTAIN,TYPE=CMS,MODE=UNCOND,                        XX
               REGS=USE,RELATED=(TCTIOT,IEFDB4F9(REBUILD))
*         R13=SV13;RFY (R11,R12,R13,R14) UNRSTD;       /*OBTAIN LOCAL &
*CMS LOCKS    */                                                03S0504
         LR    R13,SV13                                         03S0504
*        TCTIOTBL = SPACEPTR;          /*TCTIOT PTR                  */
         L     @12,@PC00001+4                                   03S0506
         L     @12,TCBPTR(,@12)                                 03S0506
         L     @12,TCBTCT(,@12)                                 03S0506
         MVC   TCTIOTBL(4,@12),SPACEPTR                         03S0506
*         RFY (R11,R12,R13,R14) RSTD;SV13=R13;GEN;              03S0507
         LR    SV13,R13                                         03S0508
          SETLOCK RELEASE,TYPE=CMS,                                   XX
               REGS=USE,RELATED=(TCTIOT,IEFDB4F9(REBUILD))
          SETLOCK RELEASE,TYPE=LOCAL,                                 XX
               REGS=USE,RELATED=(TCTIOT,IEFDB4F9(REBUILD))
*         R13=SV13;RFY (R11,R12,R13,R14) UNRSTD;     /*RELEASE LOCAL &
*MS LOCKS   */                                                  03S0510
         LR    R13,SV13                                         03S0510
*      END;                                                     03S0512
*    ELSE                              /*ALREADY LOCKED              */
*      TCTIOTBL = SPACEPTR;            /*TCTIOT PTR                  */
         B     @RC00499                                         03S0513
@RF00499 L     @12,@PC00001+4                                   03S0513
         L     @12,TCBPTR(,@12)                                 03S0513
         L     @12,TCBTCT(,@12)                                 03S0513
         MVC   TCTIOTBL(4,@12),SPACEPTR                         03S0513
*  END;                                                         03S0514
*ELSE;                                 /*NO NEW TCTIOT               */
@RF00494 DS    0H                                               03S0516
*IF FRRSW = ON THEN                    /*FRR ISSUED                  */
@RC00494 TM    FRRSW,B'01000000'                                03S0516
         BNO   @RF00516                                         03S0516
*  DO;                                 /*CANCEL FRR                  */
*    RFY (REG2,REG3) RSTD;                                      03S0518
*    GEN( SETFRR D,WRKREGS=(2,3) );                             03S0519
          SETFRR D,WRKREGS=(2,3)
*    RFY (REG2,REG3) UNRSTD;                                    03S0520
*  END;                                                         03S0521
*DETCTIOP = ZERO;                      /*CLEAR PTR IN ESTAE PARMS    */
@RF00516 SLR   @12,@12                                          03S0522
         L     @08,@PC00001+12                                  03S0522
         ST    @12,DETCTIOP(,@08)                               03S0522
*DETCTIOL = ZERO;                      /*CLEAR LENGTH IN ESTAE PARMS */
         ST    @12,DETCTIOL(,@08)                               03S0523
*RFY TCTTIOT BASED(TCTIOTBL);                                   03S0524
*  END;                                                         02S0525
*END REBUILD;                                                   02S0526
@EL00003 DS    0H                                               02S0526
@EF00003 DS    0H                                               02S0526
@ER00003 LM    @14,@12,@SA00003                                 02S0526
         BR    @14                                              02S0526
*                                                               01S0527
*                                                               01S0527
* DECLARE /* COMMON VARIABLES */                                01S0527
*   I256C CHAR(256) BASED,                                      01S0527
*   I031F FIXED(31) BASED,                                      01S0527
*   I031P PTR(31)   BASED,                                      01S0527
*   I015F FIXED(15) BASED,                                      01S0527
*   I015P PTR(15)   BASED,                                      01S0527
*   I008P PTR(8)    BASED,                                      01S0527
*   I001C CHAR(1)   BASED;                                      01S0527
*END IEFDB4F9                                                   01S0528
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (D4F9SPEC)                                        *
*/*%INCLUDE SYSLIB  (D4F9DATA)                                        *
*/*%INCLUDE SYSLIB  (IEFJMR  )                                        *
*/*%INCLUDE SYSLIB  (IEFTCT  )                                        *
*/*%INCLUDE SYSLIB  (IEFTIOT1)                                        *
*/*%INCLUDE SYSLIB  (IEFUCBOB)                                        *
*/*%INCLUDE SYSLIB  (IEFZB4D9)                                        *
*/*%INCLUDE SYSLIB  (IEZJSCB )                                        *
*/*%INCLUDE SYSLIB  (IFASMFR )                                        *
*/*%INCLUDE SYSLIB  (IHAQDB  )                                        *
*/*%INCLUDE SYSLIB  (IKJTCB  )                                        *
*/*%INCLUDE SYSLIB  (IHADSAB )                                        *
*/*%INCLUDE SYSLIB  (IHAFRRS )                                        *
*/*%INCLUDE SYSLIB  (IEFZB451)                                        *
*/*%INCLUDE SYSLIB  (IHAPSA  )                                        *
*/*%INCLUDE SYSLIB  (B4F9UNAL)                                        *
*/*%INCLUDE SYSLIB  (UNALSPEC)                                        *
*/*%INCLUDE SYSLIB  (GETREC  )                                        *
*/*%INCLUDE SYSLIB  (GETREC  )                                        *
*/*%INCLUDE SYSLIB  (GETSPEC )                                        *
*/*%INCLUDE SYSLIB  (GETSPEC )                                        *
*/*%INCLUDE SYSLIB  (COMPRESS)                                        *
*/*%INCLUDE SYSLIB  (CMPRSPEC)                                        *
*/*%INCLUDE SYSLIB  (B4F9CONC)                                        *
*/*%INCLUDE SYSLIB  (CONCSPEC)                                        *
*/*%INCLUDE SYSLIB  (B4F9WRIT)                                        *
*/*%INCLUDE SYSLIB  (B4F9WRTS)                                        *
*/*%INCLUDE SYSLIB  (BUILDREC)                                        *
*/*%INCLUDE SYSLIB  (BLDRSPEC)                                        *
*/*%INCLUDE SYSLIB  (REBUILD )                                        *
*/*%INCLUDE SYSLIB  (RBLDSPEC)                                        *
*/*%INCLUDE SYSLIB  (UPDATE  )                                        *
*/*%INCLUDE SYSLIB  (UPDTSPEC)                                        *
*;                                                              01S0528
@DATA    DS    0H
@CH00132 DC    H'4'
@CH00049 DC    H'5'
@CH00119 DC    H'8'
@CH01768 DC    H'12'
@CH01767 DC    H'66'
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    6F
@SA00003 DS    15F
@AL00001 DS    3A
@TF00001 DS    F
@TF00002 DS    F
IEFDB4F9 CSECT
         DS    0F
@CF00048 DC    F'1'
@CH00048 EQU   @CF00048+2
@CF01782 DC    F'-8'
@CF01783 DC    F'-7'
@CF01781 DC    F'-6'
@CF01771 DC    F'-5'
@CF01772 DC    F'-4'
@CF01773 DC    F'-2'
@CF01778 DC    F'-1'
@CF00191 DC    XL4'FF000000'
@CF00193 DC    XL4'E6000000'
@DATD    DSECT
         DS    0D
FREEPTR  DS    A
FRRPARMP DS    A
SMF40PTR DS    A
SPACEPTR DS    A
TCTLUENP DS    A
CORESIZE DS    F
CURRDDNO DS    F
DEVENTNO DS    F
GETSIZE  DS    F
I        DS    F
NUMDDS   DS    F
OFFSET   DS    F
RECSIZE  DS    F
SIZEUCBS DS    F
TIOTPTR  DS    A
FRRSPTR  DS    A
FRREPTR  DS    A
GTSTRTCD DS    F
ENDPTR   DS    A
R        DS    F
TCTIOTP  DS    A
TIOTDDP  DS    A
DDCOUNT  DS    H
TCTOUTLM DS    CL8
SWCHBYT1 DS    CL1
         ORG   SWCHBYT1
EXITSW   DS    BL1
FRRSW    EQU   SWCHBYT1+0
LOOPSW   EQU   SWCHBYT1+0
OUTSW    EQU   SWCHBYT1+0
LOCKSW   EQU   SWCHBYT1+0
@NM00012 EQU   SWCHBYT1+0
         ORG   SWCHBYT1+1
         DS    CL5
FRRCORE  DS    CL141
IEFDB4F9 CSECT
         DS    0F
@SIZDATD DC    AL1(230)
         DC    AL3(@ENDDATD-@DATD)
@CV01729 DC    V(IEFDB4F8)
@CV01730 DC    V(IEFDB403)
         DS    0D
GTSTZERO DC    F'0'
@CB00198 DC    X'2009'
VAMCODE  DC    X'0FFF'
IEFDB4F9 CSECT
         DS   0H
PATCHLOC DC ((@DATA-@PSTART)/20)X'00'
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IEFDB4F9 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
SV13     EQU   @07
RETCODE  EQU   @02
N        EQU   @02
MOVELEN  EQU   @06
K        EQU   @05
J        EQU   @06
GETCODE  EQU   @02
ENTCTR   EQU   @02
DEVENT   EQU   @02
COUNT    EQU   @03
CNTRSIZE EQU   @03
UCBPTR   EQU   @04
TDDDEVP  EQU   @03
TCTDVENP EQU   @07
SMFCOREP EQU   @12
PARMFRRP EQU   @05
MOVETPTR EQU   @12
MOVEFPTR EQU   @08
DSABPTR  EQU   @02
REG0     EQU   @00
REG1     EQU   @01
REG2     EQU   @02
REG3     EQU   @03
REG4     EQU   @04
REG5     EQU   @05
REG15    EQU   @15
R11      EQU   @11
R12      EQU   @12
R13      EQU   @13
R14      EQU   @14
GTSTR0   EQU   @00
GTSTR1   EQU   @01
GTSTR2   EQU   @02
GTSTR15  EQU   @15
GTSTR4   EQU   @04
GTSTR5   EQU   @05
GTSTR6   EQU   @06
GTSTR7   EQU   @07
GTSTR8   EQU   @08
GTSTR3   EQU   @03
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSALITA  EQU   PSA+764
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
PARMFRR  EQU   0
FRRP     EQU   PARMFRR
SMFBUFF  EQU   0
NXTSMFP  EQU   SMFBUFF
RECORD40 EQU   SMFBUFF+4
TCTDVENT EQU   0
TCTDUCBP EQU   TCTDVENT
TCTDSCTR EQU   TCTDVENT+2
TCTFLAGS EQU   TCTDVENT+3
TCTFLAG3 EQU   TCTFLAGS
TCTDDCTR EQU   TCTDVENT+4
TCTLUENT EQU   0
TCTIOTO  EQU   TCTLUENT
TCTCNTEO EQU   TCTLUENT+2
TDEXCP   EQU   0
TDEVC    EQU   TDEXCP
TDUTYP   EQU   TDEXCP+1
TDCUNAD  EQU   TDEXCP+2
TDCUAD   EQU   TDCUNAD
SMF40VRT EQU   TDCUAD
TDUNAD   EQU   TDCUNAD+1
TDNEXCP  EQU   TDEXCP+4
TIOPREFX EQU   0
JMR      EQU   0
JMRJOB   EQU   JMR
JMRENTRY EQU   JMR+8
JMREDATE EQU   JMR+12
JMRCPUID EQU   JMR+16
JMRUSEID EQU   JMR+20
JMRSTEP  EQU   JMR+28
JMRFLG   EQU   JMR+30
JMROPT   EQU   JMR+54
SMFTCT   EQU   0
TCTSW    EQU   SMFTCT+3
TCTIEX   EQU   TCTSW
TCTCRTBL EQU   SMFTCT+8
TCTIOTBL EQU   SMFTCT+12
TCTPOOL  EQU   SMFTCT+16
TCTJMR   EQU   SMFTCT+28
TCTJSTX  EQU   SMFTCT+36
TCTTJLM  EQU   SMFTCT+40
TCTPGSMF EQU   SMFTCT+64
TCTPGIN  EQU   TCTPGSMF
TCTPGOUT EQU   TCTPGSMF+4
TCTCORE  EQU   0
TCTTIOT  EQU   0
TCTPLEXT EQU   TCTTIOT
TCTSZEXT EQU   TCTPLEXT+2
TCTSZLKP EQU   TCTTIOT+4
TIOT1    EQU   0
TIOENTRY EQU   0
TIOESTTA EQU   TIOENTRY+1
TIOERLOC EQU   TIOENTRY+2
TIOEWTCT EQU   TIOERLOC
TIOELINK EQU   TIOERLOC+1
TIOESYOT EQU   TIOELINK
TIOESTTC EQU   TIOENTRY+15
TIOESTTB EQU   TIOENTRY+16
POOLSTAR EQU   TIOENTRY+20
UCB      EQU   0
UCBOB    EQU   0
UCBJBNR  EQU   UCBOB
UCBFL5   EQU   UCBOB+1
UCBAF    EQU   UCBFL5
UCBSTAT  EQU   UCBOB+3
UCBCHAN  EQU   UCBOB+4
UCBCHA   EQU   UCBCHAN
UCBUA    EQU   UCBCHAN+1
UCBSFLS  EQU   UCBOB+6
UCBFLA   EQU   UCBSFLS
UCBFL1   EQU   UCBFLA
UCBBSY   EQU   UCBFL1
UCBNRY   EQU   UCBFL1
UCBPST   EQU   UCBFL1
UCBCUB   EQU   UCBFL1
UCBFLB   EQU   UCBSFLS+1
UCBCHM   EQU   UCBOB+8
UCBCHM1  EQU   UCBCHM
UCBPTH0  EQU   UCBCHM1
UCBPTH1  EQU   UCBCHM1
UCBWGT   EQU   UCBOB+12
UCBTYP   EQU   UCBOB+16
UCBTBYT1 EQU   UCBTYP
UCB1FEA5 EQU   UCBTBYT1
UCB1FEA6 EQU   UCBTBYT1
UCBTBYT2 EQU   UCBTYP+1
UCB2OPT2 EQU   UCBTBYT2
UCBDUDN1 EQU   UCB2OPT2
UCB2OPT3 EQU   UCBTBYT2
UCBDUDN2 EQU   UCB2OPT3
UCB2OPT4 EQU   UCBTBYT2
UCBRWTAU EQU   UCB2OPT4
UCBRVDEV EQU   UCBRWTAU
UCB2OPT6 EQU   UCBTBYT2
UCB2OPT7 EQU   UCBTBYT2
UCBTBYT3 EQU   UCBTYP+2
UCBDVCLS EQU   UCBTBYT3
UCBTBYT4 EQU   UCBTYP+3
UCBEXTPT EQU   UCBOB+20
UCBFLC   EQU   UCBEXTPT
UCBDEV   EQU   UCBOB+24
UCBCMEXT EQU   0
UCBATI   EQU   UCBCMEXT+3
@NM00026 EQU   UCBATI
UCBFLP1  EQU   UCBCMEXT+5
UCBMT    EQU   0
UCBOCR   EQU   0
UCB3540X EQU   0
UCBDKBYT EQU   UCB3540X+6
UCBUCS   EQU   0
UCBUCSOP EQU   UCBUCS+4
UCBFCBOP EQU   UCBUCS+5
IEZJSCB  EQU   0
JSCBSEC1 EQU   IEZJSCB+188
JSCHPCE  EQU   JSCBSEC1+4
JSCBDCB  EQU   JSCBSEC1+36
JSCBOPTS EQU   JSCBSEC1+48
JSCBSWT1 EQU   JSCBSEC1+55
JSCBWTP  EQU   JSCBSEC1+64
JSCBWTFG EQU   JSCBWTP
JSCBEND1 EQU   IEZJSCB+260
SMFRCD40 EQU   0
TDDRLEN  EQU   SMFRCD40
TDDRCDTY EQU   SMFRCD40+5
TDDCPUID EQU   SMFRCD40+14
TDDUIF   EQU   SMFRCD40+18
TDDONTME EQU   SMFRCD40+26
TDDONDTE EQU   SMFRCD40+30
TDDUDATA EQU   SMFRCD40+34
TDDINVSQ EQU   SMFRCD40+42
TDDFLG   EQU   SMFRCD40+43
TDDRIN   EQU   SMFRCD40+44
TDDIEX   EQU   TDDRIN
TDDVAR   EQU   SMFRCD40+64
TDDEXCP  EQU   0
TDDCUT   EQU   TDDEXCP
TDDDEVC  EQU   TDDCUT
TDDUTYP  EQU   TDDCUT+1
TDDCUAD  EQU   TDDEXCP+2
TDDNEXCP EQU   TDDEXCP+4
QDB      EQU   0
QDBFELMP EQU   QDB+12
TCBFIX   EQU   0
TCBFRS   EQU   TCBFIX
TCB      EQU   0
TCBPIE   EQU   TCB+4
TCBPMASK EQU   TCBPIE
TCBTIO   EQU   TCB+12
TCBCMP   EQU   TCB+16
TCBCMPF  EQU   TCBCMP
TCBCPP   EQU   TCBCMPF
TCBSTCC  EQU   TCBCMPF
TCBCDBL  EQU   TCBCMPF
TCBCWTO  EQU   TCBCMPF
TCBCIND  EQU   TCBCMPF
TCBCMSG  EQU   TCBCMPF
TCBTRN   EQU   TCB+20
TCBABF   EQU   TCBTRN
TCBMSS   EQU   TCB+24
TCBPKF   EQU   TCB+28
TCBFLGS  EQU   TCB+29
TCBFLGS1 EQU   TCBFLGS
TCBFLGS2 EQU   TCBFLGS+1
TCBFLGS3 EQU   TCBFLGS+2
TCBFLGS4 EQU   TCBFLGS+3
TCBFLGS5 EQU   TCBFLGS+4
TCBABWF  EQU   TCBFLGS5
TCBJPQ   EQU   TCB+44
TCBPURGE EQU   TCBJPQ
TCBGRS   EQU   TCB+48
TCBFSA   EQU   TCB+112
TCBTME   EQU   TCB+120
TCBJSTCB EQU   TCB+124
TCBTSFLG EQU   TCB+148
TCBTSTSK EQU   TCBTSFLG
TCBSTAB  EQU   TCB+160
TCBNSTAE EQU   TCBSTAB
TCBTCT   EQU   TCB+164
TCBTCTGF EQU   TCBTCT
TCBSCNDY EQU   TCB+172
TCBNDSP  EQU   TCBSCNDY
TCBNDSP1 EQU   TCBNDSP+1
TCBNDSP2 EQU   TCBNDSP+2
TCBNDSP3 EQU   TCBNDSP+3
TCBJSCB  EQU   TCB+180
TCBRECDE EQU   TCBJSCB
TCBEXT1  EQU   TCB+196
TCBBITS  EQU   TCB+200
TCBNDSP4 EQU   TCBBITS
TCBNDSP5 EQU   TCBBITS+1
TCBFLGS6 EQU   TCBBITS+2
TCBFLGS7 EQU   TCBBITS+3
TCBDAR   EQU   TCB+204
TCBDARC  EQU   TCBDAR
TCBEXT2  EQU   TCB+208
TCBFOE   EQU   TCB+244
TCBESTAE EQU   TCB+264
TCBESTRM EQU   TCBESTAE+1
TCBFBYT1 EQU   TCB+276
TCBFBYT2 EQU   TCB+277
TCBRV124 EQU   TCB+278
TCBRV133 EQU   TCB+279
TCBXTNT2 EQU   0
TCBGTF   EQU   TCBXTNT2
TCBTFLG  EQU   TCBGTF
TCBRV146 EQU   TCBXTNT2+28
TCBRV155 EQU   TCBXTNT2+29
TCBRV164 EQU   TCBXTNT2+30
TCBRV173 EQU   TCBXTNT2+31
DSAB     EQU   0
DSABFCHN EQU   DSAB+4
DSABTIOT EQU   DSAB+16
DSABGIDP EQU   DSAB+24
DSABANMP EQU   DSAB+28
DSABORG  EQU   DSAB+32
DSABORG1 EQU   DSABORG
DSABORG2 EQU   DSABORG+1
DSABFLG1 EQU   DSAB+34
DSABFLG2 EQU   DSAB+35
DSABFLG3 EQU   DSAB+36
DSABVAM  EQU   DSABFLG3
DSABFLG4 EQU   DSAB+37
DSABANMI EQU   0
DSABGIDL EQU   0
FRRS     EQU   0
FRRSHEAD EQU   FRRS
FRRSENTR EQU   0
FRRSFLGS EQU   FRRSENTR+4
FRRSFLG1 EQU   FRRSFLGS
FRRPARMS EQU   0
FRRPARM  EQU   FRRPARMS+120
TCTPTR   EQU   FRRPARM
DESTAPTR EQU   FRRPARM+4
TCTIOP   EQU   FRRPARM+8
TCTIOLN  EQU   FRRPARM+12
EXTCTIOP EQU   FRRPARM+16
FRRFLAGS EQU   FRRPARM+20
FRRZERO  EQU   FRRFLAGS
I001C    EQU   0
I008P    EQU   0
I015F    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
I256C    EQU   0
MOVEFLOC EQU   0
MOVETLOC EQU   0
UCBBGN   EQU   0
FUNCMAP  EQU   0
TCBPTR   EQU   0
LIST     EQU   0
TIOTENTP EQU   LIST
LISTFLAG EQU   LIST+4
LASTINDC EQU   LISTFLAG
DEPARMS  EQU   0
DENQRETN EQU   DEPARMS+232
DEDMYEPA EQU   DEPARMS+240
DEDMYAS  EQU   DEPARMS+260
DETCTIOP EQU   DEPARMS+296
DETCTIOL EQU   DEPARMS+300
QDBPTR   EQU   0
BUFPARMS EQU   0
BUF1PTR  EQU   BUFPARMS
BUFLPTR  EQU   BUFPARMS+4
TCTSPOOL EQU   TCTPLEXT
TCTIODSP EQU   TCTPLEXT+8
TCTDCBTD EQU   TCTIODSP
TCTIOTSD EQU   TCTIODSP+2
TCTDCBLE EQU   TCTIODSP+4
TCTDDENT EQU   TCTDCBLE+4
TCTUCBP  EQU   TCTDDENT
TCTSCTR  EQU   TCTDDENT+2
TCTFLGS  EQU   TCTDDENT+3
TCTDCTR  EQU   TCTDDENT+4
TIOEDEVE EQU   TIOESTTB
TIOSTTB  EQU   TIOEDEVE
TIOUCBP  EQU   TIOEDEVE+1
UCBOBS01 EQU   UCBDEV
UCBSTAB  EQU   UCBOBS01+10
UCBBSVL  EQU   UCBSTAB
UCBPRSRS EQU   UCBSTAB
UCBDMCT  EQU   UCBOBS01+11
UCBFL4   EQU   UCBOBS01+13
UCBOBS02 EQU   UCBDEV
UCBTFL1  EQU   UCBOBS02+19
UCBXTN   EQU   UCBOBS02+20
UCBVOPT  EQU   UCBXTN
UCBOBS03 EQU   UCBDEV
UCBXTADR EQU   UCBOBS03
UCBOBS04 EQU   UCBDEV
UCBBTA   EQU   UCBOBS04+12
UCBOBS06 EQU   UCBDEV
UCBAOF   EQU   UCBOBS06
UCBAOF1  EQU   UCBAOF
UCBAOF2  EQU   UCBAOF+1
@NM00025 EQU   UCBOBS06+3
UCBIRB   EQU   UCBOBS06+4
UCBGRAF  EQU   UCBIRB
UCBLDNCA EQU   UCBOBS06+8
UCBRDYQ  EQU   UCBLDNCA
UCBIRLN  EQU   UCBRDYQ
UCBLDNCB EQU   UCBRDYQ+1
UCBCTLNK EQU   UCBOBS06+12
UCBOBS07 EQU   UCBDEV
UCBOBS08 EQU   UCBDEV
UCBOBS09 EQU   UCBDEV
JSCBSEC2 EQU   JSCBEND1
JSCBSEC3 EQU   JSCBEND1
JSCBJCT  EQU   JSCBSEC3
JSCBJCTA EQU   JSCBJCT+1
JSCBASID EQU   JSCBSEC3+8
JSCBJNL  EQU   JSCBSEC3+28
JSCBJJSB EQU   JSCBJNL
JSCBSUB  EQU   JSCBSEC3+40
JSCSCT   EQU   JSCBSEC3+68
JSCTMCOR EQU   JSCBSEC3+72
JSCRSV35 EQU   JSCBSEC3+96
JSCRSV36 EQU   JSCRSV35
JSCRSV37 EQU   JSCRSV35+2
JSCRSV45 EQU   JSCBSEC3+112
JSCRSV46 EQU   JSCRSV45
JSCRSV47 EQU   JSCRSV45+2
PSARSVTE EQU   PSARSVT
FLC      EQU   PSA
*                                      START UNREFERENCED COMPONENTS
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
JSCBEND3 EQU   JSCBSEC3+120
JSCRSV52 EQU   JSCBSEC3+116
JSCRSV51 EQU   JSCRSV47+1
JSCRSV50 EQU   JSCRSV47
JSCRSV49 EQU   JSCRSV46+1
JSCRSV48 EQU   JSCRSV46
JSCRSV44 EQU   JSCBSEC3+108
JSCRSV43 EQU   JSCBSEC3+104
JSCRSV42 EQU   JSCBSEC3+100
JSCRSV41 EQU   JSCRSV37+1
JSCRSV40 EQU   JSCRSV37
JSCRSV39 EQU   JSCRSV36+1
JSCRSV38 EQU   JSCRSV36
JSCBUFPT EQU   JSCBSEC3+92
JSCBACT  EQU   JSCBSEC3+88
JSCBSWSP EQU   JSCBSEC3+87
JSCRSV33 EQU   JSCBSEC3+86
JSCDDNUM EQU   JSCBSEC3+84
JSCRSV53 EQU   JSCBSEC3+82
JSCDDNNO EQU   JSCBSEC3+80
JSCBVATA EQU   JSCBSEC3+76
JSCSCTP  EQU   JSCSCT+1
JSCRSV55 EQU   JSCSCT
JSCRSV54 EQU   JSCBSEC3+64
JSCDSABQ EQU   JSCBSEC3+60
JSCBSSIB EQU   JSCBSEC3+56
JSCBFRBA EQU   JSCBSEC3+48
JSCRSV28 EQU   JSCBSEC3+46
JSCBSONO EQU   JSCBSEC3+44
JSCBSUBA EQU   JSCBSUB+1
JSCRSV31 EQU   JSCBSUB
JSCBSMLR EQU   JSCBSEC3+36
JSCBJNLR EQU   JSCBSEC3+32
JSCBJNLA EQU   JSCBJNL+1
JSCBJSBT EQU   JSCBJJSB
JSCBJSBX EQU   JSCBJJSB
JSCBJSBA EQU   JSCBJJSB
JSCBJSBI EQU   JSCBJJSB
@NM00033 EQU   JSCBJJSB
JSCBJNLE EQU   JSCBJJSB
JSCBJNLF EQU   JSCBJJSB
JSCBJNLN EQU   JSCBJJSB
@NM00032 EQU   JSCBSEC3+24
JSCBJRBA EQU   JSCBSEC3+16
JSCBIECB EQU   JSCBSEC3+12
JSCRSV25 EQU   JSCBSEC3+10
JSCBTJID EQU   JSCBASID
JSCBPSCB EQU   JSCBSEC3+4
JSCJCTP  EQU   JSCBJCTA
JSCRSV24 EQU   JSCBJCT
JSCBEND2 EQU   JSCBSEC2
UCBRV066 EQU   UCBOBS09+4
UCBIOSBA EQU   UCBOBS09
UCBRV042 EQU   UCBOBS08+5
UCBCTCF1 EQU   UCBOBS08+4
UCBCTCAD EQU   UCBOBS08
UCBICNCB EQU   UCBOBS07+4
UCBRV040 EQU   UCBOBS07
UCBCTLNA EQU   UCBCTLNK+1
UCBRLN   EQU   UCBCTLNK
UCBRDYQA EQU   UCBLDNCB
UCBINRLN EQU   UCBIRLN
UCBIRBA  EQU   UCBIRB+1
UCBRV039 EQU   UCBGRAF
UCBDWNR  EQU   UCBGRAF
UCBRPND  EQU   UCBGRAF
UCBUPM   EQU   UCBGRAF
UCBBTAM  EQU   UCBGRAF
UCBDRNO  EQU   UCBGRAF
UCBDRO   EQU   UCBGRAF
UCBOIP   EQU   UCBGRAF
UCBATRCD EQU   @NM00025
UCBSKPFG EQU   @NM00025
UCBRIPND EQU   @NM00025
UCBRTIAC EQU   @NM00025
UCBRSV79 EQU   @NM00025
UCBRSV78 EQU   @NM00025
UCBRSV77 EQU   @NM00025
UCBOLTEP EQU   @NM00025
UCBATNCT EQU   UCBOBS06+2
UCBRSV76 EQU   UCBAOF2
UCBRSV75 EQU   UCBAOF2
UCBRSV74 EQU   UCBAOF2
UCBRSV73 EQU   UCBAOF2
UCBRSV72 EQU   UCBAOF2
UCBRSV71 EQU   UCBAOF2
UCBRSV70 EQU   UCBAOF2
UCBRSV69 EQU   UCBAOF2
UCBRSV68 EQU   UCBAOF1
UCBRSV67 EQU   UCBAOF1
UCBRSV66 EQU   UCBAOF1
UCBRSV65 EQU   UCBAOF1
UCBRSV64 EQU   UCBAOF1
UCBOFNL  EQU   UCBAOF1
UCBOFSP  EQU   UCBAOF1
UCBOFMCR EQU   UCBAOF1
UCBBTB   EQU   UCBBTA+1
UCBDI    EQU   UCBBTA
UCBSNS   EQU   UCBOBS04+8
UCBTEB   EQU   UCBOBS04+4
UCBGCB   EQU   UCBOBS04+3
UCBOPEN  EQU   UCBOBS04+2
UCBSTART EQU   UCBOBS04
UCBXTNB  EQU   UCBXTN+1
UCBRSV22 EQU   UCBVOPT
UCBRSV21 EQU   UCBVOPT
UCBRSV20 EQU   UCBVOPT
UCBESVE  EQU   UCBVOPT
UCBERPC  EQU   UCBVOPT
UCBESVC  EQU   UCBVOPT
UCBEVA   EQU   UCBVOPT
UCBESV   EQU   UCBVOPT
UCBRV009 EQU   UCBTFL1
UCBRV008 EQU   UCBTFL1
UCBRV007 EQU   UCBTFL1
UCBRV006 EQU   UCBTFL1
UCBRV005 EQU   UCBTFL1
UCBRV038 EQU   UCBTFL1
UCBNSLTP EQU   UCBTFL1
UCBNLTP  EQU   UCBTFL1
UCBRES1B EQU   UCBOBS02+18
UCBFSER  EQU   UCBOBS02+12
@NM00024 EQU   UCBOBS02+4
UCBFSEQ  EQU   UCBOBS02+2
UCBFSCT  EQU   UCBOBS02
UCBNEXP  EQU   UCBOBS01+20
UCBBASE  EQU   UCBOBS01+16
UCBRES1A EQU   UCBOBS01+15
UCBUSER  EQU   UCBOBS01+14
UCBFL47  EQU   UCBFL4
UCBFL46  EQU   UCBFL4
UCBFL45  EQU   UCBFL4
UCBRV065 EQU   UCBFL4
UCBDSS   EQU   UCBFL4
UCBRV028 EQU   UCBFL4
UCBWDAV  EQU   UCBFL4
UCBDAVV  EQU   UCBFL4
UCBSQC   EQU   UCBOBS01+12
UCBDATP  EQU   UCBOBS01+12
UCBDMC   EQU   UCBDMCT
UCBMOUNT EQU   UCBDMCT
UCBBNUL  EQU   UCBSTAB
UCBSHAR  EQU   UCBSTAB
UCBBSTR  EQU   UCBSTAB
UCBBPUB  EQU   UCBSTAB
UCBBPRV  EQU   UCBSTAB
UCBBALB  EQU   UCBPRSRS
UCBPGFL  EQU   UCBSTAB
UCBDVSHR EQU   UCBBSVL
UCBVOLI  EQU   UCBOBS01+4
UCBVTOC  EQU   UCBOBS01
TIOVERF  EQU   TIOSTTB
TIOUNLD  EQU   TIOSTTB
TIOMNTD  EQU   TIOSTTB
TIOSETU  EQU   TIOSTTB
TIOVLSR  EQU   TIOSTTB
TIOPVIO  EQU   TIOSTTB
TIOREQD  EQU   TIOSTTB
TIOUSED  EQU   TIOSTTB
TCTTKRLD EQU   TCTDDENT+13
TCTEXRLD EQU   TCTDDENT+12
TCTRSV10 EQU   TCTDDENT+8
TCTRSV26 EQU   TCTFLGS
TCTRSV25 EQU   TCTFLGS
TCTRSV24 EQU   TCTFLGS
TCTRSV23 EQU   TCTFLGS
TCTRSV22 EQU   TCTFLGS
TCTRSV21 EQU   TCTFLGS
TCTVAMDS EQU   TCTFLGS
TCTDDIND EQU   TCTFLGS
@NM00029 EQU   DEPARMS+304
DETDQLST EQU   DEPARMS+280
DEALASTP EQU   DEPARMS+276
DEASGNP  EQU   DEDMYAS+12
@NM00028 EQU   DEDMYAS
DEWLASTP EQU   DEPARMS+256
DEWRITP  EQU   DEDMYEPA+12
@NM00027 EQU   DEDMYEPA
DEDSNQRC EQU   DENQRETN+4
DEDSNQEN EQU   DENQRETN
DECPYLEN EQU   DEPARMS+228
DECPYLOC EQU   DEPARMS+224
DEJSCB   EQU   DEPARMS+220
DESCT    EQU   DEPARMS+216
DEJCT    EQU   DEPARMS+212
DESIOT   EQU   DEPARMS+208
DETCB    EQU   DEPARMS+204
DEALFMAP EQU   DEPARMS+200
DECORE   EQU   DEPARMS
@NM00001 EQU   LISTFLAG
VAMINDC  EQU   LISTFLAG
@NM00047 EQU   FRRFLAGS
FRRAUTO  EQU   FRRPARMS
FRRSPARM EQU   FRRSENTR+8
@NM00046 EQU   FRRSFLGS+1
@NM00045 EQU   FRRSFLG1
FRRSNEST EQU   FRRSFLG1
FRRSRCUR EQU   FRRSFLG1
FRRSFRRA EQU   FRRSENTR
FRRSENTS EQU   FRRS+84
FRRSRTMW EQU   FRRS+16
FRRSCURR EQU   FRRSHEAD+12
FRRSELEN EQU   FRRSHEAD+8
FRRSLAST EQU   FRRSHEAD+4
FRRSEMP  EQU   FRRSHEAD
DSABGRID EQU   DSABGIDL+4
DSABLLEN EQU   DSABGIDL
DSABANAM EQU   DSABANMI+1
DSABANML EQU   DSABANMI
DSABRS04 EQU   DSAB+68
DSABSIOT EQU   DSAB+64
DSABRS03 EQU   DSAB+62
DSABDCBM EQU   DSAB+56
DSABSSCM EQU   DSAB+52
DSABSSNM EQU   DSAB+48
DSABPTTR EQU   DSAB+44
DSABTCBP EQU   DSAB+40
DSABRS02 EQU   DSAB+38
@NM00044 EQU   DSABFLG4
DSABCKSI EQU   DSABFLG4
DSABCKVL EQU   DSABFLG4
DSABCKDS EQU   DSABFLG4
@NM00043 EQU   DSABFLG3
DSABJSCT EQU   DSABFLG3
DSABCATL EQU   DSABFLG3
DSABVMSC EQU   DSABFLG3
DSABPASS EQU   DSABFLG3
DSABDEFR EQU   DSABFLG3
@NM00042 EQU   DSABFLG2
DSABUNAL EQU   DSABFLG2
DSABIRM  EQU   DSABFLG2
DSABOPEN EQU   DSABFLG2
DSABNUSE EQU   DSABFLG1
DSABCATM EQU   DSABFLG1
DSABPCAT EQU   DSABFLG1
DSABDCAT EQU   DSABFLG1
DSABCONV EQU   DSABFLG1
DSABDCNV EQU   DSABFLG1
DSABPALC EQU   DSABFLG1
DSABDALC EQU   DSABFLG1
@NM00041 EQU   DSABORG2
DSABTR   EQU   DSABORG2
DSABAM   EQU   DSABORG2
@NM00040 EQU   DSABORG2
DSABTQ   EQU   DSABORG2
DSABTX   EQU   DSABORG2
DSABGS   EQU   DSABORG2
DSABU    EQU   DSABORG1
DSABPO   EQU   DSABORG1
DSABMQ   EQU   DSABORG1
DSABCQ   EQU   DSABORG1
DSABCX   EQU   DSABORG1
DSABDA   EQU   DSABORG1
DSABPS   EQU   DSABORG1
DSABIS   EQU   DSABORG1
DSABSSVA EQU   DSAB+21
DSABRS01 EQU   DSAB+20
DSABOPCT EQU   DSAB+14
DSABLNTH EQU   DSAB+12
DSABBCHN EQU   DSAB+8
DSABID   EQU   DSAB
@NM00039 EQU   TCBXTNT2+32
TCBRV181 EQU   TCBRV173
TCBRV180 EQU   TCBRV173
TCBRV179 EQU   TCBRV173
TCBRV178 EQU   TCBRV173
TCBRV177 EQU   TCBRV173
TCBRV176 EQU   TCBRV173
TCBRV175 EQU   TCBRV173
TCBRV174 EQU   TCBRV173
TCBRV172 EQU   TCBRV164
TCBRV171 EQU   TCBRV164
TCBRV170 EQU   TCBRV164
TCBRV169 EQU   TCBRV164
TCBRV168 EQU   TCBRV164
TCBRV167 EQU   TCBRV164
TCBRV166 EQU   TCBRV164
TCBRV165 EQU   TCBRV164
TCBRV163 EQU   TCBRV155
TCBRV162 EQU   TCBRV155
TCBRV161 EQU   TCBRV155
TCBRV160 EQU   TCBRV155
TCBRV159 EQU   TCBRV155
TCBRV158 EQU   TCBRV155
TCBRV157 EQU   TCBRV155
TCBRV156 EQU   TCBRV155
TCBRV154 EQU   TCBRV146
TCBRV153 EQU   TCBRV146
TCBRV152 EQU   TCBRV146
TCBRV151 EQU   TCBRV146
TCBRV150 EQU   TCBRV146
TCBRV149 EQU   TCBRV146
TCBRV148 EQU   TCBRV146
TCBRV147 EQU   TCBRV146
TCBRV145 EQU   TCBXTNT2+26
TCBRV144 EQU   TCBXTNT2+24
TCBRV143 EQU   TCBXTNT2+20
TCBRV142 EQU   TCBXTNT2+16
TCBRSV49 EQU   TCBXTNT2+12
TCBEVENT EQU   TCBXTNT2+8
TCBRCMP  EQU   TCBXTNT2+5
TCBRSVAB EQU   TCBXTNT2+4
TCBGTFA  EQU   TCBGTF+1
TCBRSV47 EQU   TCBTFLG
TCBRSV46 EQU   TCBTFLG
TCBRSV45 EQU   TCBTFLG
TCBRSV44 EQU   TCBTFLG
TCBRSV43 EQU   TCBTFLG
TCBDSPIT EQU   TCBTFLG
TCBERRTN EQU   TCBTFLG
TCBASYNC EQU   TCBTFLG
@NM00038 EQU   TCB+296
TCBRV185 EQU   TCB+292
TCBSWASA EQU   TCB+288
TCBDBTB  EQU   TCB+284
TCBRPT   EQU   TCB+280
TCBRV141 EQU   TCBRV133
TCBRV140 EQU   TCBRV133
TCBRV139 EQU   TCBRV133
TCBRV138 EQU   TCBRV133
TCBRV137 EQU   TCBRV133
TCBRV136 EQU   TCBRV133
TCBRV135 EQU   TCBRV133
TCBRV134 EQU   TCBRV133
TCBRV132 EQU   TCBRV124
TCBRV131 EQU   TCBRV124
TCBRV130 EQU   TCBRV124
TCBRV129 EQU   TCBRV124
TCBRV128 EQU   TCBRV124
TCBRV127 EQU   TCBRV124
TCBRV126 EQU   TCBRV124
TCBRV125 EQU   TCBRV124
TCBRV123 EQU   TCBFBYT2
TCBRV122 EQU   TCBFBYT2
TCBECBNV EQU   TCBFBYT2
TCBSSSYN EQU   TCBFBYT2
TCBFPRAP EQU   TCBFBYT2
TCBFDW   EQU   TCBFBYT2
TCBFMW   EQU   TCBFBYT2
TCBCNCB  EQU   TCBFBYT2
TCBLLH   EQU   TCBFBYT1
TCBRV113 EQU   TCBFBYT1
TCBEOT   EQU   TCBFBYT1
TCBRTM2  EQU   TCBFBYT1
TCBPGNLY EQU   TCBFBYT1
TCBNDIOS EQU   TCBFBYT1
TCBACTIV EQU   TCBFBYT1
TCBEOTFM EQU   TCBFBYT1
TCBAFFN  EQU   TCB+274
TCBCCPVI EQU   TCB+272
TCBUKYSP EQU   TCB+268
TCBMODE  EQU   TCBESTAE+3
TCBERTYP EQU   TCBESTAE+2
TCBRV314 EQU   TCBESTRM
TCBRV313 EQU   TCBESTRM
TCBRV312 EQU   TCBESTRM
TCBRV311 EQU   TCBESTRM
TCBRV310 EQU   TCBESTRM
TCBRV309 EQU   TCBESTRM
TCBRV308 EQU   TCBESTRM
TCBETERM EQU   TCBESTRM
TCBSCBKY EQU   TCBESTAE
TCBRTM12 EQU   TCB+260
TCBTCBID EQU   TCB+256
TCBRSV96 EQU   TCB+252
TCBSWA   EQU   TCB+248
TCBFOEA  EQU   TCBFOE+1
TCBRSV42 EQU   TCBFOE
TCBRV306 EQU   TCB+240
TCBRSV41 EQU   TCB+239
TCBTID   EQU   TCB+238
TCBRSVAA EQU   TCB+237
TCBABCUR EQU   TCB+236
TCBTMSAV EQU   TCB+232
TCBIOTIM EQU   TCB+228
TCBRTWA  EQU   TCB+224
TCBBACK  EQU   TCB+220
TCBTIRB  EQU   TCB+216
TCBAECB  EQU   TCB+212
TCBEXT2A EQU   TCBEXT2+1
TCBRSV39 EQU   TCBEXT2
TCBSTMCT EQU   TCB+207
TCBSYSCT EQU   TCB+206
TCBRSV37 EQU   TCB+205
TCBEXSVC EQU   TCBDAR
TCBDARMS EQU   TCBDAR
TCBDARWT EQU   TCBDAR
TCBDARO  EQU   TCBDAR
TCBDARMC EQU   TCBDARC
TCBDARD  EQU   TCBDAR
TCBDARS  EQU   TCBDAR
TCBDARP  EQU   TCBDAR
TCBGTOFM EQU   TCBFLGS7
TCBADMP  EQU   TCBFLGS7
TCBRSTSK EQU   TCBFLGS7
TCBRSV35 EQU   TCBFLGS7
TCBSTACK EQU   TCBFLGS7
TCBRSV34 EQU   TCBFLGS7
TCBRSV33 EQU   TCBFLGS7
TCBGPECB EQU   TCBFLGS7
TCBNTJS  EQU   TCBFLGS6
TCBAPG   EQU   TCBFLGS6
TCBMIGR  EQU   TCBFLGS6
TCBRV303 EQU   TCBFLGS6
TCBSPVLK EQU   TCBFLGS6
TCBCPU   EQU   TCBFLGS6
TCBPIE17 EQU   TCBFLGS6
TCBRV    EQU   TCBFLGS6
TCBRSV79 EQU   TCBNDSP5
TCBRSV78 EQU   TCBNDSP5
TCBRSV77 EQU   TCBNDSP5
TCBRSV76 EQU   TCBNDSP5
TCBRSV75 EQU   TCBNDSP5
TCBRSV74 EQU   TCBNDSP5
TCBRSV95 EQU   TCBNDSP5
TCBRSV94 EQU   TCBNDSP5
TCBRSV93 EQU   TCBNDSP4
TCBRSV92 EQU   TCBNDSP4
TCBRSV91 EQU   TCBNDSP4
TCBRSV90 EQU   TCBNDSP4
TCBRSV89 EQU   TCBNDSP4
TCBRSV88 EQU   TCBNDSP4
TCBRSV87 EQU   TCBNDSP4
TCBRSV86 EQU   TCBNDSP4
TCBEXT1A EQU   TCBEXT1+1
TCBRSV32 EQU   TCBEXT1
TCBEXCPD EQU   TCB+192
TCBIOBRC EQU   TCB+188
TCBDDWTC EQU   TCB+186
TCBDDEXC EQU   TCB+184
TCBJSCBB EQU   TCBJSCB+1
@NM00037 EQU   TCBRECDE
TCBREC   EQU   TCBRECDE
TCBMDIDS EQU   TCB+176
TCBNDINT EQU   TCBNDSP3
TCBRSV27 EQU   TCBNDSP3
TCBRSV26 EQU   TCBNDSP3
TCBRSV25 EQU   TCBNDSP3
TCBRSV24 EQU   TCBNDSP3
TCBSRBND EQU   TCBNDSP3
TCBRV302 EQU   TCBNDSP3
TCBLJSND EQU   TCBNDSP3
TCBABE   EQU   TCBNDSP2
TCBDSS   EQU   TCBNDSP2
TCBOWAIT EQU   TCBNDSP2
TCBIWAIT EQU   TCBNDSP2
TCBNDTS  EQU   TCBNDSP2
TCBNDSVC EQU   TCBNDSP2
TCBSTPP  EQU   TCBNDSP2
TCBABD   EQU   TCBNDSP2
TCBRSV22 EQU   TCBNDSP1
TCBPIEND EQU   TCBNDSP1
TCBTPSP  EQU   TCBNDSP1
TCBDDRND EQU   TCBNDSP1
TCBRSPND EQU   TCBNDSP1
TCBRSTND EQU   TCBNDSP1
TCBDARPN EQU   TCBNDSP1
TCBDARTN EQU   TCBNDSP1
TCBNDSP0 EQU   TCBNDSP
TCBUSER  EQU   TCB+168
TCBTCTB  EQU   TCBTCT+1
TCBRSV9C EQU   TCBTCTGF
TCBRSV9B EQU   TCBTCTGF
TCBRSV9A EQU   TCBTCTGF
TCBRSV99 EQU   TCBTCTGF
TCBRSV98 EQU   TCBTCTGF
TCBRSV97 EQU   TCBTCTGF
TCBRSV20 EQU   TCBTCTGF
TCBSMFGF EQU   TCBTCTGF
TCBSTABB EQU   TCBSTAB+1
TCBSTCUR EQU   TCBNSTAE
TCBRV301 EQU   TCBNSTAE
TCBSYNCH EQU   TCBNSTAE
TCBHALT  EQU   TCBNSTAE
TCBPPSUP EQU   TCBNSTAE
TCB33E   EQU   TCBNSTAE
TCBQUIES EQU   TCBNSTAE
TCBSTABE EQU   TCBNSTAE
TCBAQE   EQU   TCB+156
TCBPQE   EQU   TCB+152
TCBTSDP  EQU   TCB+151
TCBTSLP  EQU   TCB+150
TCBSTPCT EQU   TCB+149
TCBCPUBN EQU   TCBTSFLG
TCBDYDSP EQU   TCBTSFLG
TCBRSV18 EQU   TCBTSFLG
TCBRSV17 EQU   TCBTSFLG
TCBTIOTG EQU   TCBTSFLG
TCBATT   EQU   TCBTSFLG
TCBSTPPR EQU   TCBTSFLG
TCBRV300 EQU   TCBTSTSK
TCBECB   EQU   TCB+144
TCBIQE   EQU   TCB+140
TCBLTC   EQU   TCB+136
TCBOTC   EQU   TCB+132
TCBNTC   EQU   TCB+128
TCBJSTCA EQU   TCBJSTCB+1
TCBRSV16 EQU   TCBJSTCB
TCBTQET  EQU   TCBTME
TCBTCB   EQU   TCB+116
TCBFSAB  EQU   TCBFSA+1
TCBQEL   EQU   TCBFSA
TCBGRS15 EQU   TCBGRS+60
TCBGRS14 EQU   TCBGRS+56
TCBGRS13 EQU   TCBGRS+52
TCBGRS12 EQU   TCBGRS+48
TCBGRS11 EQU   TCBGRS+44
TCBGRS10 EQU   TCBGRS+40
TCBGRS9  EQU   TCBGRS+36
TCBGRS8  EQU   TCBGRS+32
TCBGRS7  EQU   TCBGRS+28
TCBGRS6  EQU   TCBGRS+24
TCBGRS5  EQU   TCBGRS+20
TCBGRS4  EQU   TCBGRS+16
TCBGRS3  EQU   TCBGRS+12
TCBGRS2  EQU   TCBGRS+8
TCBGRS1  EQU   TCBGRS+4
TCBGRS0  EQU   TCBGRS
TCBJPQB  EQU   TCBJPQ+1
TCBRSV15 EQU   TCBPURGE
TCBRSV14 EQU   TCBPURGE
TCBRSV13 EQU   TCBPURGE
TCBRSV12 EQU   TCBPURGE
TCBRSV11 EQU   TCBPURGE
TCBRSV10 EQU   TCBPURGE
TCBRSV09 EQU   TCBPURGE
TCBJPQF  EQU   TCBPURGE
TCBJLB   EQU   TCB+40
TCBLLS   EQU   TCB+36
TCBDSP   EQU   TCB+35
TCBLMP   EQU   TCB+34
TCBPNDSP EQU   TCBFLGS5
TCBFCD1  EQU   TCBFLGS5
TCBSTP   EQU   TCBFLGS5
TCBSYS   EQU   TCBFLGS5
TCBANDSP EQU   TCBFLGS5
TCBPAGE  EQU   TCBFLGS5
TCBUXNDF EQU   TCBABWF
TCBFC    EQU   TCBFLGS5
TCBONDSP EQU   TCBFLGS4
TCBMPCND EQU   TCBFLGS4
TCBMPCVQ EQU   TCBFLGS4
TCBUXNDV EQU   TCBFLGS4
TCBHNDSP EQU   TCBFLGS4
TCBRQENA EQU   TCBFLGS4
TCBSER   EQU   TCBFLGS4
TCBNDUMP EQU   TCBFLGS4
TCBDWSTA EQU   TCBFLGS3
TCBRSV08 EQU   TCBFLGS3
TCBRSV07 EQU   TCBFLGS3
TCBRSV06 EQU   TCBFLGS3
TCBABGM  EQU   TCBFLGS3
TCBABTRM EQU   TCBFLGS3
TCBADINP EQU   TCBFLGS3
TCBFSM   EQU   TCBFLGS3
TCBFTS   EQU   TCBFLGS2
TCBFETXR EQU   TCBFLGS2
TCBFDSOP EQU   TCBFLGS2
TCBFJMC  EQU   TCBFLGS2
TCBFSMC  EQU   TCBFLGS2
TCBFABOP EQU   TCBFLGS2
TCBFSTI  EQU   TCBFLGS2
TCBFOINP EQU   TCBFLGS2
TCBFX    EQU   TCBFLGS1
TCBFS    EQU   TCBFLGS1
TCBFT    EQU   TCBFLGS1
TCBPDUMP EQU   TCBFLGS1
TCBRSV04 EQU   TCBFLGS1
TCBFERA  EQU   TCBFLGS1
TCBFE    EQU   TCBFLGS1
TCBFA    EQU   TCBFLGS1
TCBZERO  EQU   TCBPKF
TCBFLAG  EQU   TCBPKF
TCBMSSB  EQU   TCBMSS+1
TCBRSV03 EQU   TCBMSS
TCBTRNB  EQU   TCBTRN+1
TCBRSV02 EQU   TCBABF
TCBOLTEP EQU   TCBABF
TCBTCP   EQU   TCBABF
TCBTCPP  EQU   TCBABF
TCBRSV01 EQU   TCBABF
TCBGRPH  EQU   TCBABF
TCBNOCHK EQU   TCBABF
TCBMOD91 EQU   TCBABF
TCBCMPC  EQU   TCBCMP+1
TCBRV318 EQU   TCBCMSG
TCBRV317 EQU   TCBCIND
TCBRV316 EQU   TCBCWTO
TCBCASID EQU   TCBCDBL
TCBNOCC  EQU   TCBSTCC
TCBDMPO  EQU   TCBCPP
TCBCSTEP EQU   TCBCMPF
TCBCREQ  EQU   TCBCMPF
TCBDEB   EQU   TCB+8
TCBPIEA  EQU   TCBPIE+1
TCBPM    EQU   TCBPMASK
@NM00036 EQU   TCBPMASK
TCBRBP   EQU   TCB
TCBFRS6  EQU   TCBFRS+24
TCBFRS4  EQU   TCBFRS+16
TCBFRS2  EQU   TCBFRS+8
TCBFRS0  EQU   TCBFRS
QDBRV002 EQU   QDB+28
QDBPRDS  EQU   QDB+26
QDBPRSZ  EQU   QDB+24
QDBBPTDS EQU   QDB+22
QDBFPTDS EQU   QDB+20
QDBLELMP EQU   QDB+16
QDBNELMS EQU   QDB+8
QDBRV001 EQU   QDB+6
QDBATTR  EQU   QDB+4
QDBQDB   EQU   QDB
SMF40VDV EQU   TDDCUAD
TDDRVA   EQU   SMFRCD40+46
@NM00035 EQU   TDDRIN+1
@NM00034 EQU   TDDRIN
TDDUID   EQU   TDDUIF
TDDRCDTE EQU   SMFRCD40+10
TDDRCDTS EQU   SMFRCD40+6
TDDRFLG  EQU   SMFRCD40+4
TDDRSEG  EQU   SMFRCD40+2
JSCBCSCB EQU   JSCBSEC1+68
JSCBPMG  EQU   JSCBWTP+2
JSCBWTSP EQU   JSCBWTP+1
JSCRSV23 EQU   JSCBWTFG
JSCRSV22 EQU   JSCBWTFG
JSCRSV21 EQU   JSCBWTFG
JSCRSV20 EQU   JSCBWTFG
JSCRSV19 EQU   JSCBWTFG
JSCRSV18 EQU   JSCBWTFG
JSCBRET  EQU   JSCBWTFG
JSCBIOFG EQU   JSCBWTFG
@NM00031 EQU   JSCBSEC1+60
JSCBQMPI EQU   JSCBSEC1+56
JSCBPMSG EQU   JSCBSWT1
JSCRSV16 EQU   JSCBSWT1
JSCRSV15 EQU   JSCBSWT1
JSCRSV14 EQU   JSCBSWT1
JSCRSV13 EQU   JSCBSWT1
JSCRSV12 EQU   JSCBSWT1
JSCRSV11 EQU   JSCBSWT1
JSCBPASS EQU   JSCBSWT1
JSCBTTTR EQU   JSCBSEC1+52
JSCRSV10 EQU   JSCBSEC1+49
JSCBAUTH EQU   JSCBOPTS
JSCSIOTS EQU   JSCBOPTS
JSCRSV08 EQU   JSCBOPTS
JSCRSV07 EQU   JSCBOPTS
JSCRSV06 EQU   JSCBOPTS
JSCBLONG EQU   JSCBOPTS
JSCRSV05 EQU   JSCBOPTS
JSCRSV04 EQU   JSCBOPTS
JSCBSECB EQU   JSCBSEC1+44
JSCRSV03 EQU   JSCBSEC1+41
JSCBSTEP EQU   JSCBSEC1+40
JSCBDCBA EQU   JSCBDCB+1
JSCRSV02 EQU   JSCBDCB
JSCBID   EQU   JSCBSEC1+32
JSCBDBTB EQU   JSCBSEC1+28
JSCBIJSC EQU   JSCBSEC1+24
JSCBTCBP EQU   JSCBSEC1+20
JSCBPCC  EQU   JSCBSEC1+16
JSCBTCP  EQU   JSCBSEC1+12
JSCBSHR  EQU   JSCBSEC1+8
JSCHPCEA EQU   JSCHPCE+1
JSCRSV32 EQU   JSCHPCE
JSCRSV01 EQU   JSCBSEC1
@NM00030 EQU   IEZJSCB
UCBERADR EQU   UCBUCS+12
UCBFCBID EQU   UCBUCS+8
UCBERCNT EQU   UCBUCS+7
UCBRSV51 EQU   UCBUCS+6
UCBRSV50 EQU   UCBFCBOP
UCBRSV49 EQU   UCBFCBOP
UCBRSV48 EQU   UCBFCBOP
UCBRSV47 EQU   UCBFCBOP
UCBRSV46 EQU   UCBFCBOP
UCBRSV45 EQU   UCBFCBOP
UCBRSV44 EQU   UCBFCBOP
UCBFCBO1 EQU   UCBFCBOP
UCBUCSPE EQU   UCBUCSOP
UCBRSV43 EQU   UCBUCSOP
UCBRSV42 EQU   UCBUCSOP
UCBRSV41 EQU   UCBUCSOP
UCBRSV40 EQU   UCBUCSOP
UCBRSV39 EQU   UCBUCSOP
UCBUCSO2 EQU   UCBUCSOP
UCBUCSO1 EQU   UCBUCSOP
UCBUCSID EQU   UCBUCS
UCBRV073 EQU   UCB3540X+7
UCBRV072 EQU   UCBDKBYT
UCBRV071 EQU   UCBDKBYT
UCBRV070 EQU   UCBDKBYT
UCBRV069 EQU   UCBDKBYT
UCBRV068 EQU   UCBDKBYT
UCBRV067 EQU   UCBDKBYT
UCBVLVER EQU   UCBDKBYT
UCBDKAMX EQU   UCBDKBYT
UCBVLSER EQU   UCB3540X
UCBRDATA EQU   UCBOCR+4
UCBFRID  EQU   UCBOCR
UCBCLN   EQU   UCBMT+14
UCBERG   EQU   UCBMT+12
UCBMS    EQU   UCBMT+11
UCBNB    EQU   UCBMT+10
UCBPW    EQU   UCBMT+9
UCBPR    EQU   UCBMT+8
UCBSIO   EQU   UCBMT+6
UCBTW    EQU   UCBMT+5
UCBTR    EQU   UCBMT+4
UCBTWT   EQU   UCBMT+3
UCBTRT   EQU   UCBMT+2
UCBCTD   EQU   UCBMT
UCBWTOID EQU   UCBCMEXT+17
UCBRV043 EQU   UCBCMEXT+16
UCBASID  EQU   UCBCMEXT+14
UCBMFCNT EQU   UCBCMEXT+12
UCBPMSK  EQU   UCBCMEXT+10
UCBCCWOF EQU   UCBCMEXT+8
UCBRV041 EQU   UCBCMEXT+6
UCBRV036 EQU   UCBFLP1
UCBRV035 EQU   UCBFLP1
UCBRV034 EQU   UCBFLP1
UCBRV033 EQU   UCBFLP1
UCBRV032 EQU   UCBFLP1
UCBRV031 EQU   UCBFLP1
UCBSHRUP EQU   UCBFLP1
UCBNSRCH EQU   UCBFLP1
UCBSNSCT EQU   UCBCMEXT+4
UCBHPDV  EQU   @NM00026
UCBHALI  EQU   @NM00026
UCBRSV09 EQU   @NM00026
UCBRSV08 EQU   @NM00026
UCBRSV07 EQU   @NM00026
UCBRSV06 EQU   @NM00026
UCBRSV05 EQU   @NM00026
UCBRSV04 EQU   @NM00026
UCBDTI   EQU   UCBCMEXT+2
UCBSTI   EQU   UCBCMEXT+1
UCBETI   EQU   UCBCMEXT
UCBEXTP  EQU   UCBEXTPT+1
UCBDDRSW EQU   UCBFLC
UCBTICBT EQU   UCBFLC
UCBIVRR  EQU   UCBFLC
UCBIVRS  EQU   UCBFLC
UCBITF   EQU   UCBFLC
UCBUDE   EQU   UCBFLC
UCBWAA   EQU   UCBFLC
UCBATTP  EQU   UCBFLC
UCBUNTYP EQU   UCBTBYT4
UCBRSV11 EQU   UCBDVCLS
UCBRSV10 EQU   UCBDVCLS
UCB3CHAR EQU   UCBDVCLS
UCB3UREC EQU   UCBDVCLS
UCB3DISP EQU   UCBDVCLS
UCB3DACC EQU   UCBDVCLS
UCB3COMM EQU   UCBDVCLS
UCB3TAPE EQU   UCBDVCLS
UCBDVPWR EQU   UCB2OPT7
UCBVLPWR EQU   UCB2OPT6
UCB2OPT5 EQU   UCBTBYT2
UCBRPS   EQU   UCBDUDN2
UCBRR    EQU   UCBDUDN1
UCB2OPT1 EQU   UCBTBYT2
UCB2OPT0 EQU   UCBTBYT2
UCB1FEA7 EQU   UCBTBYT1
UCBD6250 EQU   UCB1FEA6
UCBD1600 EQU   UCB1FEA5
UCB1FEA4 EQU   UCBTBYT1
UCB1FEA3 EQU   UCBTBYT1
UCB1FEA2 EQU   UCBTBYT1
UCB1FEA1 EQU   UCBTBYT1
UCB1FEA0 EQU   UCBTBYT1
UCBNAME  EQU   UCBOB+13
UCBRV029 EQU   UCBWGT
UCBVHRSN EQU   UCBWGT
UCBVORSN EQU   UCBWGT
UCBMTPXP EQU   UCBWGT
UCBREW   EQU   UCBWGT
UCBPUB   EQU   UCBWGT
UCBOUT   EQU   UCBWGT
UCBIN    EQU   UCBWGT
UCBCPU   EQU   UCBOB+11
UCBLCI   EQU   UCBOB+10
UCBCNT   EQU   UCBOB+9
UCBRV017 EQU   UCBCHM1
UCBRV016 EQU   UCBCHM1
UCBRV015 EQU   UCBCHM1
UCBRV014 EQU   UCBCHM1
UCBSPB   EQU   UCBPTH1
UCBPPB   EQU   UCBPTH1
UCBSPA   EQU   UCBPTH0
UCBPPA   EQU   UCBPTH0
UCBFLB7  EQU   UCBFLB
UCBVALPH EQU   UCBFLB
UCBCRHSN EQU   UCBFLB
UCBCRHRV EQU   UCBFLB
UCBRESVH EQU   UCBFLB
UCBSPST  EQU   UCBFLB
UCBASNS  EQU   UCBFLB
UCBIORST EQU   UCBFLB
UCBQISCE EQU   UCBFL1
UCBACTV  EQU   UCBFL1
UCBSAP   EQU   UCBFL1
UCBNOTRC EQU   UCBCUB
UCBPSNS  EQU   UCBFL1
UCBUSING EQU   UCBPST
UCBNOTRD EQU   UCBNRY
UCBBUSYD EQU   UCBBSY
UCBDADI  EQU   UCBSTAT
UCBSYSR  EQU   UCBSTAT
UCBPRES  EQU   UCBSTAT
UCBALOC  EQU   UCBSTAT
UCBUNLD  EQU   UCBSTAT
UCBRESV  EQU   UCBSTAT
UCBCHGS  EQU   UCBSTAT
UCBONLI  EQU   UCBSTAT
UCBID    EQU   UCBOB+2
UCBALTPH EQU   UCBFL5
UCBALTCU EQU   UCBFL5
UCBNALOC EQU   UCBFL5
UCBENVRD EQU   UCBFL5
UCBVSDR  EQU   UCBFL5
UCBSASK  EQU   UCBFL5
UCBAMV   EQU   UCBAF
UCBDCC   EQU   UCBFL5
UCBMONT  EQU   UCBJBNR
UCBRV011 EQU   UCBJBNR
UCBRSV02 EQU   UCBJBNR
UCBOLDSM EQU   UCBJBNR
UCBRV003 EQU   UCBJBNR
UCBRV002 EQU   UCBJBNR
UCBJES3  EQU   UCBJBNR
UCBVRDEV EQU   UCBJBNR
UCBCMSEG EQU   UCBOB
UCBPFXND EQU   UCB+512
UCBIOQ   EQU   UCB+508
UCBLOCK  EQU   UCB+504
UCBPXST  EQU   UCB+504
@NM00023 EQU   UCB
TIOTFEND EQU   POOLSTAR+16
TIOPSLOT EQU   POOLSTAR+13
TIOPSTTB EQU   POOLSTAR+12
TIOPPOOL EQU   POOLSTAR+4
TIOPNSRT EQU   POOLSTAR+3
@NM00022 EQU   POOLSTAR+2
TIOPNSLT EQU   POOLSTAR+1
@NM00021 EQU   POOLSTAR
TIOEFSRT EQU   TIOENTRY+17
TIOSVERF EQU   TIOESTTB
TIOSUNLD EQU   TIOESTTB
TIOSMNTD EQU   TIOESTTB
TIOSSETU EQU   TIOESTTB
TIOSVLSR EQU   TIOESTTB
TIOSPVIO EQU   TIOESTTB
TIOSREQD EQU   TIOESTTB
TIOSUSED EQU   TIOESTTB
TIOSBALS EQU   TIOESTTC
TIOSBALP EQU   TIOESTTC
TIOSVOLS EQU   TIOESTTC
TIOSVOLP EQU   TIOESTTC
TIOSAFFS EQU   TIOESTTC
TIOSAFFP EQU   TIOESTTC
TIOSDEFR EQU   TIOESTTC
TIOSDKCR EQU   TIOESTTC
TIOEJFCB EQU   TIOENTRY+12
TIOEDDNM EQU   TIOENTRY+4
TIOTREM  EQU   TIOELINK
TIOESSDS EQU   TIOESYOT
TIOESYIN EQU   TIOELINK
TIOEQNAM EQU   TIOELINK
TIOEDYNM EQU   TIOELINK
TIOTTERM EQU   TIOELINK
TIOTRV01 EQU   TIOELINK
TIOSYOUT EQU   TIOELINK
TIOSDSP2 EQU   TIOESTTA
TIOSDSP1 EQU   TIOESTTA
TIOSLABL EQU   TIOESTTA
TIOSDADS EQU   TIOESTTA
TIOSJBLB EQU   TIOESTTA
TIOSPLTS EQU   TIOESTTA
TIOSPLTP EQU   TIOESTTA
TIOSLTYP EQU   TIOESTTA
TIOELNGH EQU   TIOENTRY
TIOCSTEP EQU   TIOT1+8
TIOCNJOB EQU   TIOT1
TCTRSV11 EQU   TCTTIOT+6
@NM00020 EQU   TCTPLEXT
TCTLCS   EQU   TCTCORE+16
TCTRBA   EQU   TCTCORE+12
TCTRSZ   EQU   TCTCORE+10
TCTMINC  EQU   TCTCORE+8
TCTHWM   EQU   TCTCORE+4
TCTLWM   EQU   TCTCORE
TCTSOUT  EQU   TCTPGSMF+16
TCTSIN   EQU   TCTPGSMF+12
TCTRGNS  EQU   TCTPGSMF+8
TCTACT   EQU   TCTPGOUT
TCTAJS   EQU   TCTPGIN
TCTPPST  EQU   SMFTCT+60
TCTAST   EQU   SMFTCT+56
TCTLOUT  EQU   SMFTCT+52
TCTLIN   EQU   SMFTCT+48
TCTWLMT  EQU   SMFTCT+44
TCTSACT  EQU   TCTTJLM
TCTSTOF  EQU   TCTJSTX
TCTRSV08 EQU   SMFTCT+32
TCTUDATA EQU   SMFTCT+24
TCTUTL   EQU   SMFTCT+20
TCTSZE   EQU   TCTPOOL+2
@NM00019 EQU   TCTPOOL
TCTTCB   EQU   SMFTCT+4
TCTRSV07 EQU   TCTSW
TCTRSV06 EQU   TCTSW
TCTRSV05 EQU   TCTSW
TCTRSV04 EQU   TCTSW
TCTRSV03 EQU   TCTSW
TCTRSV02 EQU   TCTSW
TCTJSTI  EQU   TCTSW
TCTQA    EQU   SMFTCT
JMRJCLCP EQU   JMR+72
JMRJCLP  EQU   JMR+68
JMRJOBP  EQU   JMR+64
@NM00018 EQU   JMR+62
JMRJCLCD EQU   JMR+61
JMRSYSOC EQU   JMR+56
@NM00017 EQU   JMR+55
JMRFIND  EQU   JMROPT
@NM00016 EQU   JMROPT
JMRXONLY EQU   JMROPT
JMREXITS EQU   JMROPT
JMRSTPSW EQU   JMROPT
JMRJOBSW EQU   JMROPT
JMRRDR   EQU   JMR+52
JMRJOBIN EQU   JMR+48
JMRDRSTP EQU   JMR+40
JMRUJVP  EQU   JMR+36
JMRUCOM  EQU   JMR+32
@NM00015 EQU   JMR+31
@NM00014 EQU   JMRFLG
JMRWARM  EQU   JMRFLG
@NM00013 EQU   JMRFLG
JMRCNRS  EQU   JMRFLG
JMRCHRS  EQU   JMRFLG
JMRSTRS  EQU   JMRFLG
JMRINDC  EQU   JMR+29
TIOINUSL EQU   TIOPREFX+22
@NM00011 EQU   TIOPREFX+20
@NM00010 EQU   TIOPREFX+16
@NM00009 EQU   TIOPREFX+12
@NM00008 EQU   TIOPREFX+8
@NM00007 EQU   TIOPREFX+4
@NM00006 EQU   TIOPREFX
@NM00005 EQU   TCTFLAGS
@NM00004 EQU   TCTFLAGS
@NM00003 EQU   PARMFRR+8
@NM00002 EQU   PARMFRR+4
@NM00071 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00070 EQU   PSA+1040
PSAUSEND EQU   PSA+1040
PSARV062 EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00069 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00068 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSARV013 EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSARV011 EQU   PSASUP3
PSARV010 EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSAIPCRP EQU   PSASUP1
PSAIPCDR EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAAOLD  EQU   PSA+548
PSAANEW  EQU   PSA+544
PSATOLD  EQU   PSA+540
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00067 EQU   FLCFSA
@NM00066 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00065 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00064 EQU   FLCIOA
@NM00063 EQU   FLCMCLA+15
@NM00062 EQU   FLCMCLA+14
@NM00061 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00060 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00059 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00058 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00057 EQU   FLCPER
@NM00056 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00055 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00054 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00053 EQU   FLCPIILC
@NM00052 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00051 EQU   FLCSVILC
@NM00050 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00049 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00048 EQU   FLCICCW2+4
FLCCVT   EQU   FLCICCW2
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
*                                      END UNREFERENCED COMPONENTS
@RC00089 EQU   @RC00083
@RC00094 EQU   @RC00083
@RC00218 EQU   @RC00083
@RF00428 EQU   @RC00389
@RC00499 EQU   @RC00494
@RF00441 EQU   @EL00003
@ENDDATA EQU   *
         END   IEFDB4F9,(C'PLS0106',0603,75024)
