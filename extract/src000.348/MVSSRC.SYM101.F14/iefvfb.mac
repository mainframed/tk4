***********************************************************************
*                                                                     *
*  MODULE NAME - IEFVFB                                               *
*                                                                     *
*  DESCRIPTIVE NAME - SYMBOLIC PARAMETER ROUTINE                      *
*                                                                     *
*  COPYRIGHT - N/A                                                    *
*                                                                     *
*  STATUS - OS/VS2 RELEASE 3.0 AND 3.7 PTF                     @ZA18227
*                                                                     *
*  FUNCTION -  1. PROCESS EXEC PROCEDURE STATEMENTS  WHICH ASSIGN     *
*                 VALUES TO  SYMBOLIC PARAMETERS.   SYMBOLIC  AND     *
*                 VALUE ARE ENTERED IN A DICTIONARY FOR  SYMBOLIC     *
*                 PARAMETERS.  (SYMBUF)                               *
*                                                                     *
*              2. PROCESS SYMBOLIC PARAMETERS APPEARING ON STATE-     *
*                 MENTS IN A CATALOGUED PROCEDURE.  VALUE ASSIGN-     *
*                 MENTS ARE SUBSTITUTED WHERE SYMBOLICS  APPEAR.      *
*                                                                     *
*                                                                     *
*  OPERATION - THERE ARE TWO BASIC FLOWS THROUGH THE RTN.  (1) TO     *
*              PROCESS SYMBOLIC PARAMETER  VALUE ASSIGNMENTS FROM     *
*              EXEC PROCEDURE STATEMENTS OR PROC VERB  STATEMENTS     *
*              AND (2) TO PROCESS THE  SYMBOLIC  PARAMETERS WHICH     *
*              APPEAR ON DD AND EXEC  STATEMENTS  IN A CATALOGUED     *
*              PROCEDURE.                                             *
*                                                                     *
*              1. VALUE ASSIGNMENTS ON EXEC PROCEDURE  STATEMENTS     *
*                                                                     *
*                 A. AFTER  MODULE  INITIALIZATION, THE  SYMBOLIC     *
*                    PARAMETER  DICTIONARY (SYMBUF)  IS  SEARCHED     *
*                    USING THE SYMBOLIC AS SEARCH ARGUMENT.    IF     *
*                    THE SYMBOLIC IS FOUND ( INDICATING THE PARAM     *
*                    WAS PREVIOUSLY DEFINED ) RETURN IS  TO  SCAN     *
*                    ROUTINE WITH NO ENTRY  BEING MADE IN SYMBUF.     *
*                    IF THE SYMBOLIC PARAMETER WAS NOT PREVIOUSLY     *
*                    DEFINED,  IT IS ENTERED INTO THE DICTIONARY.     *
*                                                                     *
*                 B. VALUE ASSIGNMENTS ASSOCIATED WITH  THE PARAM     *
*                    ARE ALSO  ENTERED INTO  THE  DICTIONARY.         *
*                                                                     *
*                 C. POINTERS ARE SET FOR SCAN ROUTINE  TO RESUME     *
*                    PROCESSING OF THE INPUT STATEMENT.               *
*                                                                     *
*                 D. RETURNS TO SCAN ROUTINE VIA REG 14               *
*                                                                     *
*                                                                     *
*              2. SYMBOLIC PARAMETERS ON STATEMENTS IN A PROC         *
*                                                                     *
*                 A. SYMBOLIC  PARAMS ARE  PROCESSED BY  BUILDING     *
*                    INTERMEDIATE TEXT COMPOSED OF VALUE  ENTRIES     *
*                    TAKEN FROM THE SYMBOLIC PARAMETER DICTIONARY     *
*                    IN COMBINATION WITH TEXT CONCATENATED IN THE     *
*                    INPUT STATEMENT.                                 *
*                                                                     *
*                 B. POINTERS ARE SET CAUSING SCAN RTN TO PROCESS     *
*                    THE INTERMEDIATE TEXT.   ( WHEN INTERMEDIATE     *
*                    TEXT IS PROCESSED  BY SCAN RTN, POINTERS ARE     *
*                    RESET BACK TO THE INPUT STATEMENT  AND  SCAN     *
*                    CONTINUES. )                                     *
*                                                                     *
*                                                                     *
*  NOTES - THE HIGH ORDER BIT OF THE 'LENGTH OF PARM ' FIELD IS SET   *
*          WHEN VALUE ASSIGNMENT IS MADE.   THE BIT IS CLEARED WHEN   *
*          THE VALUE FIELD IS MOVED TO THE INTERMEDIATE BUFFER.       *
*          THE BIT FOR EACH ENTRY IS CHECKED IN THE CONVERTER PROC    *
*          EOF ROUTINE.   ANY BITS LEFT ON(MEANING SYMBOLICS HAVE     *
*          NOT BEEN USED) RESULTS IN AN ERROR CONDITION WHICH         *
*          CAUSES JOB FAILURE.                                        *
*                                                                     *
*
*     CHARACTER CODE DEPENDENCIES - EBCDIC                            *
*     DEPENDENCIES - NONE                                             *
*     RESTRICTIONS - NONE                                             *
*     REGISTER CONVENTIONS - REG 12 PTR TO CONVERTER WORK AREA        *
*     PATCH-LABEL - PATCH                                             *
*                                                                     *
*
*  MODULE TYPE - BAL                                                  *
*     PROCESSOR - ASSEMBLER                                           *
*     ATTRIBUTES - REFRESHABLE,PRIVILEGED,KEY 0, PAGEABLE LPA         *
*                                                                     *
*
*
*  ENTRY POINT - IEFVFB FROM IEFVFA                                   *
*     PURPOSE - TO SAVE SYMBOLIC PARAMETER VALUES AND WHEN NECESSARY  *
*               MAKE SUBSTITUTIONS IN PROCEDURE STATEMENTS.           *
*     LINKAGE - BALR                                                  *
*     INPUT -                                                         *
*               REGISTER 1 - DELIMETER POINTER                        *
*               REGISTER 8 - PTR TO SCAN LOCAL WORK AREA              *
*               REGISTER 12 - PTR TO CONVERTER WORK AREA              *
*               REGISTER 13 - PTR TO REGISTER SAVE AREA               *
*     REGISTERS SAVED - REG14-REG12                                   *
*     REGISTER CONTENTS DURING PROCESSING -                           *
*               R0  - WORK REG                                        *
*               R1  - DELIMETER PTR                                   *
*               R2  - MSG CODE AND WORK REG                          *
*               R3  - WORK REG                                        *
*               R4  - PTR TO CURRENT SYMBUF ENTRY                     *
*               R5  - RETURN ADDR FOR SUBROUTINES                     *
*               R6  - WORK REG                                        *
*               R7  - PTR TO PARM VALUE                               *
*               R8  - PTR TO SCAN LOCAL WORK AREA                     *
*               R9  - LINKAGE REG TO SUBROUTINES                      *
*               R10 - WORK REG                                        *
*               R11 - IEFVFB BASE REG                                 *
*               R12 - PTR TO CONVERTER WORK AREA                      *
*               R13 - PTR TO REG SAVE AREA                            *
*               R14 - RETURN REG                                      *
*               R15 - LINKAGE REG                                     *
*     REGISTERS RESTORED - REG14-REG12                                *
*                                                                     *
*
*  EXIT-NORMAL - BR 14 TO CALLER                                      *
*     CONDITIONS - SYMBOLIC PARM SAVED OR SUBSTITUTED                 *
*     OUTPUT - SYMBOLIC PARM DICTIONARY TO SWA                        *
*              PTR TO SUBSTITUTED VALUE                               *
*     RETURN CODES - NONE                                             *
*                                                                     *
*
*  EXIT-ERROR - BR 14 TO CALLER'S ERROR ROUTINE                       *
*     CONDITIONS - INVALID SYMBOLIC PARAMETER                         *
*     OUPUT - REG 2 CONTAINS ERROR MESSAGE CODE                       *
*     RETURN CODES - NONE                                             *
*                                                                     *
*
*  EXTERNAL REFERENCES - SWA MANAGER INTERFACE                        *
*     ROUTINES - IEFVHQ                                               *
*     DATA AREAS - CONVERTER WORK AREA, SCAN LOCAL WORK AREA,         *
*                  SYMBOLIC PARM DICTIONARY,STMT BUFFERS              *
*     CONTROL BLOCKS - QMPA                                      *
*     TABLES - CONVERTER/INTERPRETER KEYS(IEFVKEYS)                   *
*     MACROS - SAVE,IEFSAVER,IEFRELSE,RETURN,SCSW,GETMAIN,FREEMAIN    *
*     ENQUEUE RESOURCES - NONE                                        *
*     CHANGE LEVEL - Y02668(MVM C/I),OZ05366,ZA08218,ZA18227  @ZA18227*
*                                                                     *
*
*  MESSAGES -                                                         *
*            IEF630I UNIDENTIFIED KEYWORD                             *
*            IEF618I OPERAND FIELD NOT TERMINATED IN COMMA OR BLANK   *
*            IEF623I SOURCE TEXT CONTAINS UNDEFINED OR ILLEGAL        *
*                    CHARACTERS                                       *
*            IEF642I EXCESSIVE PARAMETER LENGTH                       *
*            IEF647I NON-ALPHA FIRST CHARACTER                        *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*  FORMAT OF ENTRIES IN SYMBOLIC  PARAMETER  DICTIONARY  (SYMBUF)     *
*                                                                     *
*  *****************************************************************  *
*  *        *        *        *        *          *        *       *  *
*  * TTR OF * TTR OF * LENGTH * LENGTH *          * LENGTH *       *  *
*  *  THIS  *  NEXT  *   OF   *   OF   * SYMBOLIC *   OF   * VALUE *  *
*  * BUFFER * BUFFER *  ENTRY *  PARAM *  PARAM   *  VALUE *       *  *
*  *        *        *  (LE)  *  (LP)  *          *  (LV)  *       *  *
*  *        *        *        *        *          *        *       *  *
*  *****************************************************************  *
*                                                                     *
*   4 BYTES  4 BYTES   1 BYTE   1 BYTE   VARIABLE   1 BYTE  VARIABLE  *
*                                         LENGTH             LENGTH   *
***********************************************************************
         EJECT
         IEFQMNGR
         EJECT
         IEFVKEYS
         EJECT
         IEFCOMWA                                                Y02668
         IEFCVRWA                                                Y02668
         EJECT
         IEFVMSWA
         SPACE
*   FB EQUATES
FEQUAL   EQU   C'='               EQUAL
FAPOST   EQU   C''''              APOST
FBLANK   EQU   C' '               BLANK
FCOMMA   EQU   C','               COMMA
FAMP     EQU   C'&&'              AMPERSAND
FPERIOD  EQU   C'.'               PERIOD                         A37550
FRPAREN  EQU   C')'               RIGHT PAREN.                   A51024
FBSMAX   EQU   7                  MAX LENGTH OF SYMBOLIC PARAMETER
ITBL     EQU   120                MAX LENGTH OF TEXT IN INTBUF
MSGMAX   EQU   120                MAX LENGTH OF MSG TEXT
TWO7     EQU   27                 LENGTH OF MSG HEA&ER.          A37550
ONE      EQU   1                  DISPLACEMENT.                  A37550
SIX9     EQU   69                 MAX LENGTH FOR MOVE1          YM01591
BUFLNGTH EQU   TWO7+SIX9+ITBL     SIZE OF MAX BUFFER REQ'D      YM01591
FBFOUR   EQU   4             LENGTH VALUE OF FOUR                Y02621
*   FB ERROR MESSAGE CODES
ERMSB01  EQU   X'1E' UNDIENTIFIED KEYWORD
*
ERMSB03  EQU   X'12' OPERAND FIELD NOT TERM IN COMMA OR BLANK
ERMSB04  EQU   X'17' SOURCE TEXT CONTAINS UNIDENTIFIED CHARACTERS
ERMSB05  EQU   X'2A' EXCESSIVE PARAMETER LENGTH -TOO MANY INTBUF CHARS
*
ERMSB06  EQU   X'2F' NON ALPH FIRST CHARACTER
ERMSB07  EQU   X'2A' EXCESSIVE PARAMETER LENGTH
*     FB  SECONDARY MESSAGE CODES
*
SMSGS    EQU   INTKEY1             SYMBOLIC PARAMETER             19874
SMSGP    EQU   INTKEY2             VALUE FIELD OF THE .....       19874
SMSGV    EQU   INTKEY3             ON THE PROC STATEMENT          19874
FBSVN    EQU   7                  DISPLACEMENT CONSTANT          Y02621
SYMBUFID EQU   X'25'              ID FOR WRITING SYMBUF RECORD.  Y02621
NUMB     EQU   X'01'               DISP TO COUNT FIELD IN TEXT.  Y02668
RECNO1   EQU   X'01'                                             Y02668
RECNO2   EQU   X'20'                                             Y02668
         SPACE 2
IEFVFB   CSECT
* ADDED STATEMENT AFTER LABEL FBCHN                            @ZA05366
* CODE & COMMENTS CHANGED NEAR LABELS AROUND & FBDEL02X,       @ZA08218
*  BUILDING MULTIPLE SUBSTITUTION                              @ZA08218
*  JCL MESSAGE                                                 @ZA08218
* ADDED CODE TO DETECT DUMM= AFTER LABEL FBDEL02               @ZA18227
DASBIT   EQU   16                  **********TEMP************   YM01590
         SAVE  (14,12)            SAVE REGISTERS
         BALR  RB,R0 FB BASE
         USING *,RB
*****************************************************************Y02668
* MODULE TRACE CODE - FOR TESTING.                               Y02668
         L     RF,TRACEV           LOAD TRACE RTNE ADDR.         Y02668
         BALR  RE,RF               ENTER MOD ID IN TRACE RECORD. Y02668
TRACEV   DC    V(TRACE)            TRACE RTNE ADDR.              Y02668
         DC    C'VFB '             MOD ID USED BY TRACE.         Y02668
* TRACE RETURNS HERE.                                            Y02668
*****************************************************************Y02668
         B     VFB01               BRANCH AROUND ID              Y02668
         MODID BR=NO                                             Y02668
         DC    C'SPLT'                                           Y02668
         DC    C'04'               LEVEL NUMBER (SWA SUPPORT).   Y02668
         DC    C'REL3PTF'     PTF UZ01541 0B0-C IN VHA READING @ZA05366
*        DC    C'01'          DICTIONARY NOT WRITTEN TO SWA    @ZA05366
*        DC    C'02'          ALLOW AS MANY IEF653I SUBSTITUTION JCL
*                             MSGS AS NEEDED TO SHOW ALL
*                             SUBSTITUTIONS                    @ZA08218
         DC    C'03'  CHANGE DUMM= TO DUMMY IN SUBSTITUTION    @ZA18227
*                     JCL MESSAGE                              @ZA18227
VFB01    DS    0H                                                Y02668
         EJECT
***********************************************************************
*                                                                     *
*   INITIALIZATION                                                    *
*                                                                     *
*        R1 = POINTER TO STATEMENT DELIMITER                          *
*        R4 = CURRENT ENTRY IN SYMBUF                                 *
*                                                                     *
***********************************************************************
         SPACE
         LA    R4,SYMBUF+8        CURRENT SYMBUF ENTRY
         L     R7,CBSYP           CHAR STRING PTR
*
*   CHECK IF FROM KEYWORD RTN
*
         CLI   0(R1),FEQUAL       IS DELIMITER AN EQUAL SIGN
         BE    FBB                YES- PROCESS TO ASSIGN A VALUE
         CLI   0(R1),C'.'         NO - IS THIS INCORRECT USE OF PERIOD
         BNE   FBC                NO - PROCESS FOR SUBSTITUTION
         LA    R2,ERMES10         GET ERROR CODE
         B     FBERR              ERROR RETURN
*
***********************************************************************
*                                                                     *
*   PROCESSING RTN TO ASSIGN A VALUE TO A SYMBOLIC PARAMETER          *
*                                                                     *
*    ROUTINE FIRST TEST FOR EXEC PROC STATEMENT                       *
*                                                                     *
***********************************************************************
         SPACE
FBB      DS    0H
         L     R5,TBEGP            GET PTR TO VERB KEY           Y02668
         CLI   1(R5),NUMB          Q. EXEC VERB HAVE OVER 1 PARM Y02668
         BH    FBB0               YES - GO SET PROC SW
         LA    R6,PROCEK          NO  - CHECK FOR PROC= KEY
         BAL   R9,FBI             HAVE FBI CHECK ON IT
         LA    R6,KEYTAB(R6)      OFFSET TO KEY TABLE
         EX    R2,FBB010          IS PROC KEY BIT ON
*                                    R2 HAS BIT PATTERN FOR PROC
*                                    R6 HAS OFFSET TO KEYTAB
         BZ    FBB020             TRANSFER BIT OFF - ERROR
FBB0     DS    0H
         SCSW  S,PROCSWZ          THIS IS EXEC PROC - SET INDICATOR
         OC    SYMTTR(FBFOUR),SYMTTR   DOES SYMBUF HAVE A TTR?   Y02621
         BNE   FBB030             YES - GO TO SEARCH FIRST BUFFER
         XC    SYMBUF(176),SYMBUF NO  - CLEAR THE BUFFER
*
*   ASSIGN TTR TO SYMBUF AND SAVE TTR  IN SYMTTR
*
*
         XC    QLINKWA(8),QLINKWA  CLEAR PARMLIST                Y02668
         LA    R3,QLINKWA          GET ADDR OF EXTERNAL PARMLIST Y02668
         ST    R3,QPARM+QMPCL-QMNAM SAVE PTR IN QMPA             Y02668
         MVI   QPARM+QMPCM-QMNAM,RECNO2 ASSIGN TWO SVA'S(ONE FOR Y02668
*                                  SYMBUF AND THE OTHER FOR A    Y02668
*                                  SYMBUF EXTENSION              Y02668
         MVI   QPARM+QMPOP-QMNAM,QMASGN
         BAL   R6,FBQMAN02        GO TO ASSIGN TTR
         L     R3,QPARM+QMPCL-QMNAM
         MVC   TNEXT(4),0(R3)     SAVE ASSIGNED TTR
         MVC   SYMBUF(4),4(R3)     INSERT SVA IN SYMBUF          Y02668
         MVC   SYMTTR(4),4(R3)     ALSO SAVE IT IN THE CWA FOR   Y02668
*                                  VFA AND VHA TO CHECK. A NON - Y02668
*                                  ZERO VALUE HERE INDICATES     Y02668
*                                  SYMBOLICS WERE PRESENT IN A   Y02668
*                                  PROCEDURE                     Y02668
         B     FBB030
FBB010   DS    0H                 EXECUTED
         TM    0(R6),0            TEST BIT
FBB020   DS    0H
         LA    R2,ERMSB01
         B     FBERR              GO TO ERROR RTN
         SPACE 2
***********************************************************************
*                                                                     *
*   STATEMENT IS EXEC PROC - SEARCH SYMBUF FOR SYMBOLIC PARAM         *
*                                                                     *
*        FOUND = DO NOT MAKE ENTRIES IN SYMBUF                        *
*        NOT FOUND = OK (ENTER SYMBOLIC IN TABLE)                     *
*                                                                     *
***********************************************************************
         SPACE
FBB030   DS    0H
         BAL   R5,FBSCH           GO TO TABLE SEARCH ROUTINE
         LTR   RF,RF              IS SYMBOLIC ALREADY IN TABLE
         BZ    FBB1               NO - GO ENTER SYMBOLIC
         SCSW  S,FBFLUSHZ         SET FLUSH SW - NO UPDATE OF SYMBUF
*
*
*   CHECK SYMBOLIC FOR FIRST CHARACTER ALPHA
*
FBB1     DS    0H
         LTR   RA,RA              NULL SYMBOLIC
         BZ    FBB020             TRANSFER NULL  - ERROR
         MVI   MSGKEY,SMSGS       SECONDARY MESSAGE
         MVC   FAWA4(1),0(R7)     MOVE FIRST CHAR TO WORK AREA
         NI    FAWA4,X'F0'        ZERO LOW ORDER BITS
         XI    FAWA4,C'0'         TEST FOR DIFFERENCE IN ZONE BITS
         BC    7,FBB102           TRANSFER - NOT NUMERIC
         LA    R2,ERMSB06         ERROR MSG NUMBER
         B     FBERR0
FBB102   DS    0H
*
*   CHECK SYMBOLIC FOR SPECIAL CHARACTERS AND MAX LENGTH
*
         LA    R5,FBSMAX          MAX LENGTH
         CLR   RA,R5              RA HAS LENGTH OF THIS SYMBOLIC
         BNH   FBB104             TRANSFER - SYMBOLIC NOT TOO LONG
         LA    R2,ERMSB07         ERROR MSG NUMBER
         B     FBERR0
FBB104   DS    0H
         BAL   R9,FBSCR           GO TO TRANSLATE SYMBOLIC
*                                 NO ERROR - CONTINUE PROCESSING
         SPACE 2
***********************************************************************
*                                                                     *
*   GO TO TABLE BUILD RTN TO ENTER SYMBOLIC IN SYMBUF                 *
*                                                                     *
*        R1 = DELIMITER PTR                                           *
*        R4 = CURRENT SYMBUF ENTRY                                    *
*        R5 = RETURN ADDRESS                                          *
*        R7 = POINTER TO FIRST CHARACTER                              *
*                                                                     *
***********************************************************************
         SPACE 2
FBB110   DS    0H
         BAL   R5,FBBLD           GO TO TABLE BUILD RTN (RF=0)
*                                 SYMBOLIC IS IN SYMBUF
         OI    1(R4),HONE         SET FLAG IN LP BYTE
*
*   CHECK IF VALUE IS ENCLOSED IN APOST
*
         LA    R1,1(R1)
         LR    R7,R1              UPDATE STRING PTR
         CLI   0(R1),FAPOST       IS FIRST CHAR = APOST
         BE    FBB2               YES-TRANSFER FOR SPECIAL CHARS
*
*   PROCESSING  FOR  VALUE NOT IN APOSTS
*
FBB120   DS    0H
         LA    R3,1               COUNT FOR MOVE RTN
         LR    R2,R1              PTR FOR MOVE RTN
         CLI   0(R1),FBLANK       BLANK
         BE    FBB130             YES- TRANSFER
         CLI   0(R1),FCOMMA       NO - COMMA
         BE    FBB130             YES- TRANSFER
         BAL   R5,FBMVC           NO - MOVE CHAR TO INTBUF
         LA    R1,1(R1)           BUMP CHARACTER POINTER
         B     FBB120             LOOP
*
*   SPECIAL CHARACTER CHECK
*
FBB130   DS    0H
         MVI   MSGKEY,SMSGP       SECONDARY MESSAGE
         BAL   R9,FBSCR           GO TO SPECIAL CHARACTER ROUTINE
         B     FBB3               GO TO MOVE VALUE TO SYMBUF
*
*   PROCESSING FOR VALUE IN APOSTS
*
FBB2     DS    0H
         LA    R1,1(R1)           FIRST CHAR OF VALUE
FBB220   DS    0H
         CLI   0(R1),FAPOST       IS THIS APOST
         BE    FBB240             YES  TRANSFER
*                                 NO   MOVE THIS CHAR TO INTBUF
FBB230   DS    0H
         LA    R3,1               COUNT FOR MOVE RTN
         LR    R2,R1
         CL    R2,CENDP           DOES OPERAND GO INTO COL 72      AACA
         BH    FBTRR07             BR IF INTO COL 72 - ERROR       AACA
         BAL   R5,FBMVC           MOVE BYTE TO INTBUF
         B     FBB2               LOOP
FBB240   DS    0H
         LA    R1,1(R1)           BUMP CHAR PTR
         CLI   0(R1),FAPOST       IS THIS TWO APOST
         BE    FBB230             YES  MOVE ONE TO INTBUF
         CLI   0(R1),FBLANK       IS CHARACTER A BLANK?          A51024
         BE    FBB3               YES, MOVE VALUE TO SYMBUF.     A51024
         CLI   0(R1),FCOMMA       IS CHARACTER A COMMA?          A51024
         BE    FBB3               YES, MOVE VALUE TO SYMBUF      A51024
         CLI   0(R1),FRPAREN      IS CHARACTER A RIGHT PAREN?    A51024
         BE    FBB3               YES, MOVE VALUE TO SYMBUF.     A51024
         LA    R2,ERMES6          GET ERROR CODE.                A51024
         B     FBERR              ERROR RETURN.                  A51024
*                                 NO   END OF VALUE
         SPACE 2
***********************************************************************
*                                                                     *
*   PREPARE TO MOVE VALUE TO SYMBUF                                   *
*                                                                     *
*        R1 = PTR TO DELIMITER                                        *
*        R4 = CURRENT SYMBUF PTR                                      *
*        R5 = RET ADDRESS                                             *
*        R7 = PTR TO FIRST CHARACTER                                  *
*                                                                     *
***********************************************************************
         SPACE
FBB3     DS    0H
         LA    R7,INTBUF+1        FIRST CHAR  OF VALUE
         ST    R1,CESYP           SAVE DELIMITER FOR SCAN RTN
         BCTR  R1,R0
         ST    R1,CSTRP
         SR    R1,R1
         IC    R1,INTBUF
         LA    R1,INTBUF+1(R1)    DELIMITER POINTER FOR BUILD RTN
         BAL   R5,FBBLD           GO TO TABLE BUILD RTN
*
*   VALUE IS IN TABLE - RETURN TO SCAN ROUTINE
*
FBB440   DS    0H
         OI    SRCHSW1,SRCHF8     NO TEXT INTO TEXTBUF           A32730
         B     FBRET
         EJECT
***********************************************************************
*                                                                     *
*   PROCESSING RTN TO DEFINE A SYMBOLIC PARAMETER                     *
*                                                                     *
*        BUILDS INTERMEDIATE TEXT IN INTBUF                           *
*                                                                     *
***********************************************************************
         SPACE
FBC      DS    0H
         MVI   INTBUF+1,C' '
         MVC   INTBUF+2(ITBL-1),INTBUF+1 BLANK INTBUF
         MVC   INTBUF-ITBMSGL(ITBMSGL),FBCMSG1 INITIALIZE MSG BUFFER
         MVI   INTBUF,0           ZERO COUNT FIELD
         SCSW  Z,VERBCSWZ,FBC02   TRANSFER NOT A PROC VERB
         MVI   MSGKEY,SMSGV       INITIALIZE SECONDARY ERROR MESSAGE
FBC02    DS    0H
         TM    SWE,PROC+PREF     IS THIS STATEMENT IN A PROC    YA02705
         BC    5,FBAMR           YES - GO TO PROCESS AMPERSAND  YA02705
         SCSW  O,POVRDZ,FBAMR     NO  - TRANSFER IF OVERRIDE DD
         B     FBRET              RETURN
         SPACE 2
*
*    FOLLOWING TEXT PRECEDES THE INTBUF.  THE MESSAGE AND
*        THE VARIABLE LENGTH TEXT IN INTBUF ARE PRINTED
*        IF A JCL ERROR IS DETECTED WHILE THE INTBUF
*        IS BEING SCANNED.
*   NOTE - IF THE TEXT OF MSG IS CHANGED AND LENGTH IS ALTERED,
*        THE EQUATE 'ITBMSGL' MUST BE CHANGED ACCORDINGLY.
*
FBCMSG1  DS    0H
         DC    C'IEF653I SUBSTITUTION JCL - '                      I68
         EJECT
***********************************************************************
*                                                                     *
*   TRANSLATE AND TEST ROUTINE          R1= CHARACTER STRING PTR      *
*                                                                     *
***********************************************************************
         SPACE
FBTRR0   DS    0H
         LA    R1,1(R1)           BUMP PTR
FBTRR    DS    0H
         L     R3,FATRP           ADDRESS OF TRANSLATE TABLE
         L     R5,CENDP           END OF STATEMENT
         LA    R5,1(R5)           BUMP ONE TO ACCEPT COL. 72 PTM122
         SR    R2,R2
         SR    R5,R1              IS TEXT TOO LONG
         BC    12,FBTRR06         YES - ERROR
         EX    R5,FBTRR04         EXECUTE TRANSLATE INSTRUCTION
         BC    6,FBTRR02-4(R2)
FBTRR02  DS    0H
         B     FBBKR              BLANK
         B     FBPRR              PERIOD
         B     FBTTR              ILLEGAL
         B     FBLPR              LEFT PAREN
         B     FBPLR              PLUS
         B     FBAMR              AMPERSAND
         B     FBASR              ASTERISK
         B     FBRPR              RIGHT PAREN
         B     FBCOR              COMMA
         B     FBAPR              APOST
         B     FBEQR              EQUAL
         B     FBMIR              MINUS
         B     FBSLR              SLASH
FBTRR04  DS    0H
         TRT   0(0,R1),0(R3)
*
FBTRR06  DS    0H
         SCSW  Z,FBLITRLZ,FBTRR08 TRANSFER NO LITERAL
         BCTR  R1,R0
         SCSW  C,FBLITRLZ         CLEAR THE LITERAL INDICATOR
         B     FBDEL02          GO PREPARE FOR RET TO SCAN RTN
FBTRR07  DS    0H
         MVI   INTBUF,0            INDICATE NO TEXT IN BUFFER      AACA
FBTRR08  DS    0H
         LA    R2,ERMSB03
         MVI   MSGKEY,0           ZERO SECONDARY MSG
         B     FBERR
         EJECT
*
*   ROUTINE TO PROCESS AMPERSAND
*
FBAMR    DS    0H                 AMPERSAND
         BAL   R9,FBTXT           TEXT RTN
         LR    R7,R1              BUMP STRING PTR (& NOT PART OF TEXT)
         CLI   0(R1),FAMP         DOUBLE AMPERSANDS
         BE    FBTRR0             YES - RETURN TO BUMP PTR
         SCSW  S,AMPSWZ           NO  - SET SW TO INDICATE SYMBOLIC
         B     FBTRR              RETURN TO TRANSLATE RTN
         SPACE 2
*
*   ROUTINE TO PROCESS APOST
*
FBAPR    DS    0H                 APOST
         CLI   1(R1),FAPOST       DOUBLE APOST
         BE    FBAPR01            YES - TRANSFER
         XI    FBLITRLZ,FBLITRL   NO  - FLIP THE LITERAL INDICATOR
         B     FBSPR
FBAPR01  DS    0H
         BAL   R9,FBTXT           GO TO TEXT RTN
         B     FBTRR0             RETURN TO TRANSLATE
         SPACE 2
*
*   ROUTINE TO PROCESS PERIOD
*
FBPRR    DS    0H                 PERIOD
         SCSW  Z,AMPSWZ,FBTRR0    TRANSFER TEXT NOT CONCATENATED
         BAL   R9,FBTXT           TEXT ROUTINE
         LR    R7,R1              DO NOT ALLOW PERIOD INTO TEXT
         B     FBTRR              RETURN TO TRANSLATE
         SPACE 2
*
*   ROUTINE TO PROCESS LEFT PAREN
*
FBLPR    DS    0H                 LEFT PAREN
         SCSW  Z,AMPSWZ,FBTRR0    TRANSFER NO SYMBOLIC BEFORE LPRA41170
         BAL   R9,FBTXT           TEXT ROUTINE FOR SYMBOLIC      A41170
         B     FBTRR              RETURN TO TRANSLATE NEXT CHAR  A41170
         SPACE 2
*
*   ROUTINE TO PROCESS SPECIAL CHARACTERS
*
FBSPR    DS    0H                 SPECIAL CHARACTER
FBTTR    DS    0H                 ILLEGAL
FBPLR    DS    0H                 PLUS
FBASR    DS    0H                 ASTERISK
FBRPR    DS    0H                 RIGHT PAREN
FBEQR    DS    0H                 EQUAL
FBMIR    DS    0H                 MINUS
FBSLR    DS    0H                 SLASH
FBCOR    DS    0H                 COMMA
         BAL   R9,FBTXT           TEXT ROUTINE
         B     FBTRR              RETURN TO TRANSLATE
         SPACE 2
*
*   ROUTINE TO PROCESS DELIMITERS  (BLANK AND COMMA)
*
FBDEL    DS    0H                 DELIMITERS
FBBKR    DS    0H                 BLANK
         SCSW  O,FBLITRLZ,FBSPR   TRANSFER IF IN A LITERAL -SET BY SCAN
         BAL   R9,FBTXT           MOVE TEXT
         LR    R7,R1
         BCTR  R7,R0
         BAL   R9,FBTXT           MOVE DELIMITER TO INTBUF
*
*   RESET POINTERS TO CAUSE SCAN RTN TO SCAN INTBUF
*
FBDEL02  DS    0H
         LA    R2,INTBUF
         ST    R2,CSTRP
         LA    R2,INTBUF+ITBL+1   NEW END OF TEXT
         ST    R2,CENDP
         SCSW  C,RPRSWW           CLEAR RT PAREN SW
         TM    SWY2,DASBIT         DONE ANY SUBSTITUTION?       YM01590
         BZ    FBRET               NO, RETURN TO SCAN           YM01590
         NI    SWY2,255-DASBIT     YES, RESET BIT AND CONTINUE  YM01590
         TM    IWAJMSGL,AOMSGLV1   MSGLEVEL=1?                   Y02668
         BZ    FBRET                                               I68
         LA    R0,BUFLNGTH   GET SIZE OF WORK BUFFER            YM01591
         GETMAIN R,LV=(0)    GET 216 BYTE BUFFER                YM01591
        LR    R9,R1         R9=PTR BEG WKBUF                       I68
         MVC   0(ITBMSGL,R9),INTBUF-ITBMSGL  MSG HDR TO WKBUF      I68
         LA    R5,ITBMSGL(R9)  R5 PTR TO NEXT FREE SPACE           I68
         SR    R3,R3                                               I68
         L     R2,DELPTR     PTR TO STMT PTR                       I68
         IC    R3,LISTPTR(R2)     OFFSET TO OPERAND FIELD          I68
         L     R2,0(R2)           ADDR OF STMT                     I68
         AR    R2,R3         R2 PTR TO OPER TO BE MOVED            I68
         LA    R4,79                                               I68
         SR    R4,R3         LENGTH-1 OF FLD TO BE MOVED           I68
         EX    R4,MOVE1                                            I68
         CLC   FBDUMM(5),0(R5)     IS THIS DUMM= KEYWORD       @ZA18227
         BNE   FBDEL03             NO, BRANCH AROUND           @ZA18227
         MVI   4(R5),C'Y'          YES, OVERLAY '=' WITH 'Y'   @ZA18227
*                                  FOR SUBSTITUTION MSG        @ZA18227
FBDEL03  L     R4,CBSYP      PTR TO 1ST &
         SR    R4,R2         LENTH OF 1ST OPERAND IN PROC          I68
         AR    R5,R4                                               I68
         SR    R3,R3                                               I68
         IC    R3,INTBUF     TEXT LENGTH                           I68
         LR    RF,R3              --PUT ACTUAL LENGTH IN RF        I68
         SPACE
FBDEL04  DS    0H                                                  I68
         BCTR  RF,R0               DECREMENT FOR MOVE              I68
         EX    RF,MOVE2           MOVE SUBSTITUTED TEXT            I68
         LA    R4,ITBMSGL(R3,R4)   CALCULATE LENGTH OF MSG NOW     I68
*                                           IN WORKBUFFER          I68
         EJECT
**************************************************************** A37550
*                                                              * A37550
*        APAR 37550 CONCERNED THE INCOMPLETE REPRESENTATION    * A37550
*        OF SYMBOLIC PARAMETER SUBSTITUTION IN MESSAGE IEF653I * A37550
*        DUE TO THE LENGTH OF THE SUBSTITUTIONS.               * A37550
*        THE CODE ADDED FOR APAR 37550 WILL CREATE AS MANY     @ZA08218
*        IEF653I MESSAGE NEEDED TO SHOW ALL SUBSTITUTIONS MADE.@ZA08218
*                                                              * A37550
**************************************************************** A37550
         SPACE 2
         LR    R7,R9         SAVE PTR TO WORKBUFFER.             A37550
         LA    R5,MSGMAX           120 COMPERAND                 A37550
         CR    R5,R4               MSG LONGER THAN 120 BYTES     A37550
         BNL   FBNORMAL      NO-CONTINUE                         A37550
         OI    SRCHSW1,SRCHF5 SET SECOND MSG INDICATOR           A37550
         LA    R2,TWO7       SET COUNTER.                        A37550
LOOP     LA    R3,0(R2,R9)   SET UP TO SCAN WORKBUFFER.          A37550
         CLI   0(R3),FCOMMA  IS CHARACTER A COMMA .              A37550
         BE    SETUP         YES-SAVE POINTER TO CHARACTER.      A37550
         CLI   0(R3),FPERIOD IS CHARACTER A PERIOD.              A37550
         BE    SETUP         YES-SAVE POINTER TO CHARACTER.      A37550
         CLI   0(R3),FEQUAL  IS CHARACTER AN EQUAL SIGN.         A37550
         BNE   BACK          NO,LOOK AT NEXT CHARACTER.          A37550
SETUP    LR    RF,R3         ADDRESS OF SEPARATOR.               A37550
BACK     CR    R2,R5         REACHED 120 YET.                    A37550
         BNL   AROUND                                            A37550
         LA    R2,ONE(R2)    INCREMENT COUNTER.                  A37550
         B     LOOP          CONTINUE SCAN                       A37550
AROUND   SR    RF,R9         LENGTH OF FIRST MESSAGE             A37550
NEXTMSG  EQU   *                                               @ZA08218
         LA    R3,0(RF,R9)   BEGINNING OF NEXT MESSAGE.          A37550
         LA    R2,TWO7       SUBTRACT HEADER LENGTH FOR          A37550
         SR    R3,R2         ADDRESS OF BEGINNING OF NEXT MSG.   A37550
         SR    R4,RF         LENGTH OF NEXT MESSAGE.             A37550
         STC   RF,IWAMSLEN   STORE LENGTH OF MESSAGE.            A37550
         B     FBDEL02X                                          A37550
FBNORMAL STC   R4,IWAMSLEN   STORE ACTUAL LENGTH.                A37550
FBDEL02X  DS   0H                                                A37550
         SR    R2,R2                                             A37550
         OI    AOSW1,AOVFBSW       SET VFB SWITCH FOR VGM        Y02668
         IEFSAVER SAVEPTR                                        A37550
         L     RF,IEFVGMV     MESSAGE MODULE ADDRESS             A37550
         BALR  RE,RF          PUT MESSAGE IN SMB                 A37550
         IEFRELSE SAVEPTR                                        A37550
         TM    SRCHSW1,SRCHF5   SECOND MESSAGE TO CONSTRUCT.     A37550
         BZ    FBMSGOUT       NO - FREE WORKBUFFER AND RETURN.   A37550
         MVC   0(ITBMSGL,R3),INTBUF-ITBMSGL  MOVE IN HEADER.     A37550
         LR    R9,R3         UPDATE PTR TO WORKBUF MSG AREA.     A37550
         LA    R4,TWO7(R4)   INCLUDE HEADER IN MSG LENGTH.       A37550
         LA    R5,MSGMAX          MAXIMUM LENGTH OF MESSAGE    @ZA08218
         CR    R4,R5              ANOTHER MSG AFTER CURRENT MSG@ZA08218
         BH    SETUPMSG           SET FOR CURRENT & NEXT MSG   @ZA08218
         NI    SRCHSW1,SRCHCLR-SRCHF5 NEXT MESSAGE INDICATOR OFF A37550
         B     FBNORMAL      WRITE LAST MESSAGE.               @ZA08218
SETUPMSG EQU   *                                               @ZA08218
         LR    RF,R5              MAXIMUM MSG LENGTH FOR CURRENT
*                                 MESSAGE                      @ZA08218
         B     NEXTMSG                                         @ZA08218
FBMSGOUT DS    0H                                                A37550
         LR    R1,R7           PTR TO WORKBUFFER                 A37550
         LA    R0,BUFLNGTH        GET SIZE OF WORK BUFFER       YM01591
         FREEMAIN R,LV=(0),A=(1)                                   I68
         MVI   IWAMSLEN,X'5A'      RESTORE LENGTH TO NINETY     YM02715
         B     FBRET              RETURN TO SCAN ROUTINE
MOVE1    MVC   0(0,R5),0(R2)  MOVE OPERAND FLD FROM PROC TO WKBUF  I68
MOVE2    MVC   0(0,R5),INTBUF+1  OVERLAY WITH SUBSTIT STRING       I68
         EJECT
*
*   SELECTS BITS TO TEST FOR PROC IN KEYTAB
*        INPUT (R6= ONE BYTE KEY)
*        OUTPUT (R2= BIT PATTERN)
*               (R6= OFFSET INTO TABLE)
*        R9 = RETURN REG
*
FBI      DS    0H
         LA    R3,X'07'
         NR    R3,R6
         LA    R2,X'80'
         SRL   R2,0(R3)
         SRL   R6,3
         BR    R9
         SPACE 2
*
*   SPECIAL CHARACTER CHECK ROUTINE
*
FBSCR    DS    0H
         LR    RA,R1              SAVE DELIMITER
         LR    R5,R1
         LR    R1,R7              STRING POINTER
         SR    R5,R7              COMPUTE STRING LENGTH
         BZ    FBSCR01            TRANSFER NULL VALUE
         BCTR  R5,R0
         L     R3,FATRP           ADDRESS OF TRANSLATE TABLE
         EX    R5,FBTRR04         EXECUTE TRAN
         BC    7,FBSCR02          SPECIAL CHARS
FBSCR01  DS    0H
         LR    R1,RA              RESTORE DELIMITER PTR
         BR    R9                 RETURN - NO SPECIAL CHARACTERS
FBSCR02  DS    0H
         LA    R2,ERMSB04         ERROR MSG NUMBER
         B     FBERR0
         EJECT
***********************************************************************
*                                                                     *
*   TEXT ROUTINE    MOVES TEXT TO INTBUF FROM EITHER                  *
*                   THE VALUE FIELD IN SYMBUF OR                      *
*                   FROM INPUT STATEMENT                              *
*        R1 = DELIMITER PTR                                           *
*        R4 = CURRENT SYMBUF ENTRY                                    *
*        R7 = CHARACTER STRING PTR                                    *
*        R9 = RETURN ADDR                                             *
*                                                                     *
***********************************************************************
         SPACE
FBTXT    DS    0H
         SCSW  O,AMPSWZ,FBTXT10   TRANSFER IF SYMBOLIC
*
*   CHECK FOR NULL VALUE
*
         CLR   R7,R1              NULL
         BNE   FBTXT02            NO  - TRANSFER
         LA    R1,1(R1)
         BR    R9                 YES - RETURN
FBTXT02  DS    0H
         LR    R2,R7              NO  - PTR FOR MOVE RTN
         LR    R3,R1
         SR    R3,R7              LENGTH FOR MOVE
         BAL   R5,FBMVC           MOVE TEXT TO INTBUF
         B     FBTXT22            RETURN
*
*   ENTRY TO SEARCH TABLE FOR SYMBOLIC
*
FBTXT10  DS    0H
         BAL   R5,FBSCH           GO TO TABLE SEARCH ROUTINE
         LTR   RF,RF              SYMBOLIC FOUND
         BNE   FBTXT12            YES - TRANSFER
*                                 NO - MOVE SYMBOLIC TO INTBUF
         BCTR  R7,R0              POINTER TO AMPERSAND
         LR    R2,R7              POINTER FOR MOVE RTN
*                                 NOTE - RA = LENGTH OF SYMBOLIC
         LA    R3,1(RA)           GET LENGTH OF SYMBOLIC(INCLUDING &)
*                                       FOR MOVE RTN
         B     FBTXT16            GO MOVE SYMBOLIC TO INTBUF
FBTXT12  DS    0H
         NI    1(R4),255-HONE     HIT - CLEAR HIGH ORDER BIT LP BYTE
         OI    SWY2,DASBIT      INDICATE SUBSTITUTION OCCURRED  YM01590
*
*   GET POINTER TO VALUE IN R2 FOR MOVE ROUTINE
*       AND LENGTH OF TEXT IN R3
*
*                                 LENGTH OF PARAM IN RA
         LA    R2,2(R4,RA)        PTR TO LV BYTE
         IC    RA,0(R2)           LV IN RA
         LTR   R3,RA              IS VALUE A NULL (R3=LENGTH FOR MOVE)
         BZ    FBTXT20            YES - RETURN
         LA    R2,1(R2)           NO  - PTR TO VALUE IN R2
FBTXT16  DS    0H
         BAL   R5,FBMVC           MOVE RTN
FBTXT20  DS    0H
         SCSW  C,AMPSWZ           CLEAR SW
*
FBTXT22  DS    0H
         LR    R7,R1
         LA    R1,1(R1)
         BR    R9
         SPACE 2
*
***********************************************************************
*                                                                     *
*   MOVE ROUTINE   GETS POINTER TO NEXT OPEN BYTE IN INTBUF           *
*                  UPDATES INTBUF COUNT BYTE                          *
*                                                                     *
*        REGS ON ENTRY        R3 = LENGTH OF TEXT TO BE MOVED         *
*                             R2 = PTR TO TEXT                        *
*                             R5 = RETURN REG                         *
*                                                                     *
***********************************************************************
         SPACE
FBMVC    DS    0H
         SCSW  O,FBFLUSHZ,FBMVC01 TRANSFER IF IN FLUSH MODE
         SR    R6,R6
         IC    R6,INTBUF          LENGTH OF TEXT IN INTBUF
         LA    RA,INTBUF+1(R6)    FIRST OPEN BYTE
         AR    R6,R3
         CH    R6,FBMVC06         DOES LENGTH EXCEED MAX
         BH    FBMVC04            YES - TRANSFER
*                                 NO  - UPDATE LENGTH BYTE
         STC   R6,INTBUF          NEW LENGTH BYTE
         BCTR  R3,R0              DECREMENT FOR EXECUTE
         EX    R3,FBMVC02
FBMVC01  DS    0H
         BR    R5
FBMVC02  DS    0H
         MVC   0(0,RA),0(R2)
FBMVC04  DS    0H
         LA    R2,ERMSB05
         MVI   MSGKEY,SMSGS       SECONDARY MSG NUMBER
         B     FBERR
FBMVC06  DS    0H
         DC    AL2(ITBL)
         EJECT
***********************************************************************
*                                                                     *
*   ROUTINE TO SEARCH SYMBUF FOR SYMBOLIC PARAMETER                   *
*                                                                     *
*        R1 = PTR TO DELIMITER                                        *
*        R4 = CURRENT ENTRY IN AMPBUF                                 *
*        R5 = RETURN REG                                              *
*        R7 = PTR TO FIRST CHARACTER OF SEARCH ARGUMENT               *
*                                                                     *
***********************************************************************
         SPACE
FBSCH    DS    0H
         LR    RA,R1              SAVE DELIMITER PTR
         SR    RA,R7              LENGTH OF FIELD IN RA
         BZ    FBSCH14            ZERO LENGTH - GO INDICATE NO HIT
*
*   CHECK IF SYMBUF HAS TTR
*
FBSCH01  DS    0H
         OC    SYMTTR(FBFOUR),SYMTTR  IS THERE A TTR FOR SYMBUF? Y02621
         BZ    FBSCH14            NO  - RETURN                   Y02621
*
*   CHECK IF FIRST SYMBUF IS IN CORE
*
FBSCH02  DS    0H
         CLC   SYMBUF(4),SYMTTR   IS THIS THE FIRST SYMBUF
         BE    FBSCH04            YES - TRANSFER
         L     R2,SYMTTR          NO  - GET TTR OF FIRST BUFFER
         OC    SYMBUF(FBFOUR),SYMBUF  DOES THIS ONE HAVE A TTR?  Y02621
         BZ    FBSCH05            NO  - TRANSFER TO READ ONLY
*                                 YES - WRITE THIS ONE OUT
FBSCH03  DS    0H
         L     R0,SYMBUF          TTR OF THIS BUFFER
         MVI   QPARM+QMPOP-QMNAM,QMWRTE
         MVI   QPARM+QMPNC-QMNAM,RECNO1 SET WRITE OF 1 REC.     YM00370
         BAL   R6,FBQMAN          WRITE OUT THIS BUFFER
FBSCH05  DS    0H
         LR    R0,R2              TTR OF BUFFER TO BE READ IN
         MVI   QPARM+QMPOP-QMNAM,QMREAD
         MVI   QPARM+QMPNC-QMNAM,RECNO1 SET READ  OF 1 REC.     YM00370
         BAL   R6,FBQMAN          GO TO Q MANAGER INTERFACE
*
*   CURRENT SYMBUF IN OK - NOW SEARCH FOR SYMBOLIC
*
FBSCH04  DS    0H
         LA    R4,SYMBUF+8        FIRST ENTRY
         SR    R3,R3
         LA    R2,HONE+1
         LCR   R2,R2
FBSCH06  DS    0H
         CLI   0(R4),0            IS THERE AN ENTRY
         BE    FBSCH12            NO  - TRANSFER
         IC    R3,1(R4)           YES - GET LP BYTE
         NR    R3,R2              CLEAR HIGH ORDER FLAG BIT
         CLR   RA,R3              IS LENGTH SAME AS SEARCH ARGUMENT
         BNE   FBSCH08            NO  - TRANSFER   DO NOT COMPARE
         BCTR  R3,R0              DECREMENT LENGTH FOR EXECUTE
         EX    R3,FBSCH10         COMPARE - IS THIS THE SYMBOLIC
         BE    FBSCH16            THIS IS THE ONE
FBSCH08  DS    0H                 ENTRY FOR NO HIT
         IC    R3,0(R4)           LENGTH OF ENTRY IN SYMBUF
         AR    R4,R3              R4 POINTS TO NEXT ENTRY
         B     FBSCH06
FBSCH10  DS    0H
         CLC   2(0,R4),0(R7)
*
*   IS THERE ANOTHER SYMBOLIC  PARAM TABLE BUFFER
*
FBSCH12  DS    0H
         OC    SYMBUF+FBFOUR(FBFOUR),SYMBUF+FBFOUR   IS THE NEXT Y02621
*              SYMBUF POINTER IN SYMBUF ZERO?                    Y02621
         BZ    FBSCH14            YES- NO NEXT SYMBUF EXISTS     Y02621
         L     R2,SYMBUF+4        YES- TTR OF NEXT BUFFER
         B     FBSCH03            GO WRITE THIS ONE OUT, READ IN NEXT
*
*   SYMBOLIC NOT FOUND - INDICATE NO HIT - RF = 0
*
FBSCH14  DS    0H
         SR    RF,RF
         BR    R5                 RETURN
*
*   SYMBOLIC FOUND     - INDICATE HIT    - RF = 4
*
FBSCH16  DS    0H
         LA    RF,4
         BR    R5                 RETURN - R4 IS PTR TO SYMBUF ENTRY
         EJECT
***********************************************************************
*                                                                     *
*   SYMBOLIC PARAMETER TABLE BUILD ROUTINE                            *
*                                                                     *
*        R1= DELIMITER POINTER                                        *
*        R7= POINTER TO FIRST CHAR                                    *
*        R5= RETURN REG                                               *
*        R4= CURRENT SYMBUF ENTRY                                     *
*                                                                     *
***********************************************************************
         SPACE
FBBLD    DS    0H
         SCSW  O,FBFLUSHZ,FBBLD26 TRANSFER IF FLUSH MODE
         LR    RA,R1              DELIM PTR
         SR    RA,R7              LENGTH OF FIELD
         BZ    FBBLD26            ZERO LENGTH - RETURN
         SR    R2,R2
         IC    R2,0(R4)           LE BYTE
         LA    R3,4(R2,RA)        COMPUTE NEW END OF TEXT IN SYMBUF
         AR    R3,R4              ADD PTR TO CURRENT ENTRY
         LA    R6,SYMBUF+175      END OF BUFFER
         CLR   R3,R6              IS THERE ROOM FOR TEXT
         BNH   FBBLD20            YES - TRANSFER
*
*   NO ROOM IN THIS BUFFER  -  WRITE IT OUT, CHAIN BUFFERS,
*                              INITIALIZE ANOTHER BUFFER
*
         CLI   0(R4),0            IS THIS AN ENTRY FOR SYMBOLIC
         BNE   FBBLD10            NO  - TRANS TO PROCESS 'VALUE' SPILL
*                                 YES - PROCESS 'PARAM' SPILL
*
*   SPILL ROUTINE FOR SYMBOLIC 'PARAM'
*
         BAL   R9,FBCHN           GO TO CHAIN RTN
         XC    SYMBUF+4(172),SYMBUF+4 CLEAR ALL BUT TTR FIELD
         LA    R4,SYMBUF+8        INITIALIZE CURRENT ENTRY PTR
         B     FBBLD20            GO TO MOVE TEXT
*
*   SPILL ROUTINE FOR 'VALUE'          R2 = CONTENTS OF LE BYTE
*
FBBLD10  DS    0H
         MVI   0(R4),0            ZERO LE BYTE IN SPILLED BUFFER
         BAL   R9,FBCHN           GO TO CHAIN RTN
         STC   R2,SYMBUF+8         LE BYTE
         BCTR  R2,R0
         EX    R2,FBBLD12         MOVE IN LP BYTE AND PARAM
         LA    R4,SYMBUF+8        INITIALIZE CURRENT ENTRY
         LA    R9,1(R2,R4)        FIRST BYTE TO BE CLEARED
         LA    R3,SYMBUF+174
         SR    R3,R9              DECREMENTED COUNT IN R3
         EX    R3,FBBLD14         CLEAR REMAINDER OF BUFFER
         B     FBBLD20            GO TO MOVE TEXT
FBBLD12  DS    0H
         MVC   SYMBUF+9(0),1(R4)
FBBLD14  DS    0H
         XC    0(0,R9),0(R9)
*
*
*   BUFFERS OK - MOVE TEXT TO SYMBUF     RA = LENGTH OF FIELD
*
FBBLD20  DS    0H
         SR    R3,R3
         IC    R3,0(R4)           LE BYTE
         LTR   R3,R3              IS LE BYTE ZERO  (IS THIS PARAM TEXT)
         BNE   FBBLD22            NO  - TRANSFER FOR VALUE
         STC   RA,1(R4)           YES - ENTER LP BYTE
         LA    R6,3(RA)           COMPUTE LENGTH OF ENTRY (LE) BYTE
*                                      ( LE INCLUDES A NULL LV BYTE)
         STC   R6,0(R4)           ENTER LE BYTE
         LA    R6,2(R4)           PARAM FIELD PTR
         B     FBBLD24
FBBLD22  DS    0H                 ENTRY FOR VALUE
         LA    R6,0(RA,R3)        COMPUTE NEW LENGTH OF ENTRY
         STC   R6,0(R4)           NEW LE BYTE
         LA    R6,0(R3,R4)
         BCTR  R6,R0              PTR TO NEW LV BYTE
         STC   RA,0(R6)           NEW LV BYTE
         LA    R6,1(R6)           PTR TO VALUE FIELD
FBBLD24  DS    0H
         BCTR  RA,R0
         EX    RA,FBBLD30         MOVE TEXT TO SYMBUF
         MVI   INTBUF,0           ZERO COUNT BYTE
FBBLD26  DS    0H
         BR    R5
FBBLD30  DS    0H
         MVC   0(0,R6),0(R7)
         EJECT
*
*   BUFFER CHAIN ROUTINE       WRITES CURRENT BUFFER TO QUEUE,
*                              CHAINS BUFFERS
FBCHN    DS    0H
         MVC   SYMBUF+4(4),TNEXT  TTR OF NEXT BUFFER
         L     R0,SYMBUF          TTR OF THIS BUFFER
         MVI   QPARM+QMPOP-QMNAM,QMWRTA SET WRITE AND ASSIGN.   YM00370
         MVI   QPARM+QMPNC-QMNAM,RECNO1 SET WRITE OF 1 REC.     YM00370
         OI    QPARM+QMPCM-QMNAM,X'10' SET ASSIGN OF 1 REC.     YM00370
         BAL   R6,FBQMAN          GO TO QUEUE INTERFACE RTN
         OI    AOSW2,X'80'   INDICATE SYMBOLIC WRITE TO SWA    @ZA05366
*
*   INITIALIZE NEW BUFFER
*
         MVC   SYMBUF(4),TNEXT    CHAIN
         MVC   TNEXT(4),0(R3)     SAVE ASSIGNED TTR
         XC    SYMBUF+4(4),SYMBUF+4 CLEAR CHAIN TTR FIELD
         BR    R9
         EJECT
***********************************************************************
*                                                                     *
*   QUEUE MANAGER INTERFACE ROUTINE                                   *
*        R6 = RETURN REG                                              *
*        R0 = TTR OF RECORD TO READ OR WRITE                          *
*                                                                     *
***********************************************************************
         SPACE
FBQMAN   DS    0H
         LA    R3,QLINKWA          GET ADDR OF EXTERNAL PARMLIST Y02668
         ICM   R3,8,QPARM+QMPNC-QMNAM INSERT RECORD COUNT, TO   YM00370*
                                     AVOID OVERLAYING IT.       YM00370
         ST    R3,QPARM+QMPNC-QMNAM SAVE CT AND LISTPTR IN QMPA YM00370
         ST    R0,4(R3)           TTR THIS RECORD (FOR READ AND WRITE)
         MVI   FBSVN(R3),SYMBUFID  ID USED FOR WRITE,IGNORED     Y02621
*                                  FOR READ.ONLY WRITE SYMBUF    Y02621
         LA    R0,SYMBUF
         ST    R0,0(R3)           POINTER TO RECORD ( READ AND WRITE)
FBQMAN02 DS    0H                 ENTRY FOR ASSIGN
         ST    R1,SAVEP           SAVE R1
         IEFSAVER  SAVEPTR
         L     RF,FBIEFVHQ
         BALR  RE,RF              QUEUE MANAGER
         IEFRELSE  SAVEPTR
         L     R1,SAVEP           RESTORE R1
         BR    R6                 RETURN
FBDUMM   DC    C'DUMM='                                        @ZA18227
FBIEFVHQ DC    V(IEFVHQ)          QUEUE MANAGER
IEFVGMV  DC    V(IEFVGM)      MESSAGE MODULE                       I68
         EJECT
***********************************************************************
*                                                                     *
*   ERROR RETURN         R2 = ERROR MESSAGE NUMBER                    *
*                                                                     *
***********************************************************************
         SPACE
FBERR0   DS    0H
         MVI   INTBUF,0           INDICATE NO TEXT IN INTBUF
FBERR    DS    0H
         L     RE,FERRP           PTR TO SCAN ERROR RTN
         ST    RE,12(RD)
         ST    R2,28(RD)          ERROR MSG NUMBER
*
*   RETURN TO SCAN
*
FBRET    DS    0H
         SCSW  C,FBFLUSHZ         CLEAR FLUSH SW
FBRET02  DS    0H
         RETURN (14,12)
*
PATCH    DC    25F'0'              **********PATCH SPACE*********Y02668
         END
