         TITLE 'IEFVGS - JCT'
GSJCT    DSECT
         IEFAJCTB
         TITLE 'IEFVGS - IEFQMNGR'
         IEFQMNGR
         TITLE 'IEFVGS - IWA'
         IEFCOMWA
         IEFVMIWA
         TITLE 'IEFVGS - EWA'
         IEFVMEWA                                               A36294
         TITLE 'IEFVGS - CSECT'
*                                                                     *
***********************************************************************
*                                                                     *
*              EQUATES.                                               *
*                                                                     *
***********************************************************************
*                                                                     *
GSR48    EQU   X'28'   IEF640I EXCESSIVE NBR OF POS. SUBPARAMETERS.
GSR4F    EQU   X'2D'   IEF645I INVALID REFERBACK.
FF       EQU   X'FF'              ALL ONES.
GSEXPROC EQU   X'80'              PROC ENTRY INDICATOR.
GSEXPGM  EQU   X'40'              PGM ENTRY INDICATOR.
GSEXPPGM EQU   X'20'              PGM/PROC ENTRY INDICATOR.
GSEXDD   EQU   X'10'              DD ENTRY INDICATOR.
GSJBFLAG EQU   X'80'              JOBLIB FLAG IN JCT.
GSDIS24  EQU   24       DISPLACEMENT 24                          A47261
         EJECT
IEFVGS   CSECT
* D STATEMENTS NEAR LABEL GSRCH4A                              @ZA11828
***********************************************************************
*                                                                     *
*        INPUT TO THIS ROUTINE.                                       *
*                                                                     *
*              R3 = POINTS TO LENGTH OF STEPNAME/DDNAME.              *
*              RA = ADDRESS OF AUXILIARY WORK AREA.                   *
*              RC = ADDRESS OF INTERPRETER WORK AREA.                 *
*              RD = ADDRESS OF CURRENT REGISTER SAVE AREA.            *
*              RE = RETURN ADDRESS.                                   *
*                                                                     *
***********************************************************************
*
         STM   14,12,12(13)       SAVE REGISTERS.
         SPACE
         BALR  RB,0               REG 11 IS THE BASE REGISTER
         USING *,RB                    OF THE SEARCH ROUTINE.
*****************************************************************Y02668
* MODULE TRACE CODE - FOR TESTING.                               Y02668
         L     RF,TRACEV           LOAD TRACE RTN ADDR.          Y02668
         BALR  RE,RF               ENTER MOD ID IN TRACE RECORD. Y02668
TRACEV   DC    V(TRACE)            TRACE RTNE ADDR.              Y02668
         DC    C'VGS '             MOD ID USED BY TRACE          Y02668
* TRACE RETURNS HERE.                                            Y02668
*****************************************************************Y02668
         SPACE
         B     GSA1                BRANCH ARROUND ID             Y02668
         MODID BRANCH=NO                                         Y02668
*        DC    C'REL4'              FUNCTION ID AND            @Z40MPTH
*        DC    C'02'  LEV #(RACF)                              @Z40RPSM
*        DC    C'03'          STEPNAME.PROCSTEP IDENTIFICATION @ZA11828
         DC    C'04'  LEV #(MERGE SU4,10,16 CODE TO 037 PTF)   @ZA27750
GSA1     DS    0H                                                Y02668
         SPACE
         LA    R9,DREFB           DICT 2 ADDRESS TO R9.
         SPACE
         MVC   SRCHREL(8),RELPROC SAVE RELPROC & RELPGM.
         SPACE
         SR    R0,R0              ZERO FOR COMPARE.
         SR    R6,R6              ZERO FOR IC INSTRUCTIONS.
         SPACE
         LR    R5,R3              MOVE POINTER TO SEARCH ARGUMENT.
         BCTR  R5,0               LOOK AT PRECEDING BYTE.
         CLI   0(R5),C'*'         IS IT AN ASTERISK.
         BE    GSC4               YES. GO TO POINT AT NBR OF PARAMS.
*   NOT *. PICK UP NBR PARAMS FROM BYTE IMMEDIATELY PRECEEDING LENGTH.
         IC    R6,0(R5)           PICK UP NBR.
         B     GSE3               GO TO PROCESS PARAMS.
         SPACE
GSC4     BCTR  R5,0
         BCTR  R5,0               LOOK AT NBR BYTE.
         IC    R6,0(R5)           PICK UP NBR.
         BCTR  R6,0               DECREMENT BY ONE.
         SPACE
GSE3     DS    0H
         N     R6,GS7F            AND OUT HIGH ORDER BIT.
         SPACE
         STC   R6,SRCHNBR         SAVE NBR PARAMS FOR CLI INSTS.
*
*   CHECK FOR ONE SEARCH ARGUMENT.
*
         CLI   SRCHNBR,X'01'      IS NBR SA'S EQUAL ONE.
         BE    GSF4               ONLY STEPNAME/DDNAME GIVEN.
*
*   CHECK FOR TWO SEARCH ARGUMENTS.
*
         CLI   SRCHNBR,X'02'      IS NBR SA'S EQUAL TWO.
         BE    GSG2               YES. TWO SEARCH ARGUMENTS.
*
*   CHECK FOR THREE SEARCH ARGUMENTS.
*
         CLI   SRCHNBR,X'03'      IS NBR SA'S EQUAL THREE.
         BE    GSJ3               YES. THREE SEARCH ARGUMENTS.
*
*   ERROR - MORE THAN THREE SEARCH ARGUMENTS.
*
         MVI   MSGSEC,GSR48       SET MSG NBR - TOO MANY PARAMETERS -
         B     GSERROR            GO TO ERROR RETURN
         EJECT
*
*   SEARCH ON ONE ARGUMENT.
*
GSF4     DS    0H
         TM    SRCHSW1,SRCHF2     SIOT OR SCT SEARCH.
         BO    GSF5               SCT. GO TO SEARCH STEPNAMES.
*
*   SEARCH FOR DDNAME ONLY.  (DDNAME)
*
GSG4     DS    0H
         CLC   0(7,R3),GSJOBLIB   REFERBACK TO JOBLIB.
         BNE   GSG4A              NO. GO TO NORMAL SEARCH.
         TM    JCT+JCTJSTAT-GSJCT,GSJBFLAG  YES. IS THERE A JOBLIB.
         BZ    GSERRNF            NO. ERROR - INVALID REFERBACK.
         MVC   SRCHTTR(3),TSREFB  MOVE TTR OF 1ST DICT TO SEARCH TTR.
         BAL   RE,GSGET           LINK TO READ IN 1ST DICT.
         B     GSEXIT             GO TO EXIT.
GSG4A    DS    0H
         BAL   RE,GSRCH2          LINK TO SEARCH FOR DDNAME.
         SPACE
         B     GSEXIT             FOUND.  GO TO EXIT.
*
*   SEARCH ON STEPNAME.  (STEPNAME)
*
GSF5     DS    0H
         OI    SRCHSW1,SRCHF3     RETRY AND LAST ARGUMENT        YM4022
         BAL   RE,GSRCH4          SEARCH UNDER PROCEDURE.
         B     GSEXIT             FOUND GO TO EXIT.
GSG5     DS    0H
         BAL   RE,GSRCH1          NOT FOUND. SEARCH FROM TOP.
         B     GSEXIT             FOUND GO TO EXIT.
*
*   SEARCH ON TWO ARGUMENTS.
*
GSG2     DS    0H
         TM    SRCHSW1,SRCHF2     IS IT A SEARCH FOR SCT TTR.
         BO    GSG1               YES.  GO TO SEARCH SCT.
*
*   SEARCH SIOT TTR. (STEPNAME.DDNAME).
*
         OI    SRCHSW1,SRCHF3     INDICATE RETRY IF NOT FOUND.
         BAL   RE,GSRCH4          LINK TO SEARCH FOR SCT FROM PROC.
         B     GSG4               FOUND - GO TO SEARCH DDNAME.
         B     GSJ5               NOT FOUND - GO TO SEARCH STEPNAME(TOP
*
*   SEARCH FOR SCT TTR  (STEPNAME.PROCSTEP).
*
GSG1     DS    0H
         OI    SRCHSW1,SRCHF3     INDICATE RETRY IF NOT FOUND.
         BAL   RE,GSRCH3          LINK TO SEARCH PROC STEPNAME (TOP).
         B     GSH1               FOUND - GO TO SEARCH PROCSTEP.
         B     GSJ1               NOT FOUND - GO TO TEST F1.
GSH1     DS    0H
         TM    SRCHSW1,SRCHF1     IS THIS A CONDITIONALLY QUAL STEPNAME
         BZ    GSH1A              NO. GO TO SEARCH FOR EXACT NAME.
         OI    SRCHSW1,SRCHF3     YES. INDICATE RETRY & NO INDEX.
GSH1A    DS    0H
         BAL   RE,GSRCH4          LINK TO SEARCH PGM WITHIN PROC.
         B     GSEXIT             FOUND - GO TO EXIT.
GSJ1     DS    0H
         TM    SRCHSW1,SRCHF1     IS IT MATCH OR ERROR.
         BO    GSG5               NO. GO TO RETRY ON STEPNAME FROM TOP.
         B     GSERRNF            YES. NO MATCH - ERROR -
*
*   SEARCH FOR SIOT TTR. (STEPNAME.PROCSTEP.DDNAME).
*
GSJ3     DS    0H
         TM    SRCHSW1,SRCHF1     IS A RETRY INDICATED.
         BO    GSJ4               YES. GO TO SET RETRY.
         BAL   RE,GSRCH3          NO. SEARCH PROC STEPNAME FROM TOP.
GSK4     DS    0H
         BAL   RE,GSRCH4          FOUND.  SEARCH STEP WITHIN PROC.
         B     GSG4               FOUND. GO TO SEARCH DDNAME.
GSJ4     DS    0H
         OI    SRCHSW1,SRCHF3     INDICATE RETRY IF NOT FOUND
         BAL   RE,GSRCH3          LINK TO SEARCH PROC STEPNAME (TOP).
         B     GSK4               FOUND. GO TO SEARCH PROCSTEP.
*                                 NOT FOUND. FALL THRU TO SEARCH STPNM.
GSJ5     DS    0H
         BAL   RE,GSRCH1          LINK TO SEARCH STEPNAME FROM TOP.
         B     GSG4               FOUND.  GO TO SEARCH DDNAME.
         SPACE
*
*   ERROR EXIT.
*
GSERRNF  DS    0H
         MVI   MSGSEC,GSR4F       SET ERROR MSG NBR.
GSERROR  DS    0H
         MVC   12(4,RD),TCLEANUP  MOVE CLEANUP ADDR TO RE SAVE.
         SPACE
*
*   EXIT.
*
GSEXIT   DS    0H
         ST    R1,24(RD)          POINT R1 AT ENTRY.
         MVC   RELPROC(8),SRCHREL RESTORE RELPROC AND RELPGM.
         MVI   SRCHSW1,X'00'      CLEAR SWITCHES.
         LM    RE,RC,12(RD)       RESTORE REGS.
         BR    RE                 RETURN.
         EJECT
***********************************************************************
*
*   SEARCH 1 - STEPNAME (PGM) FROM TOP OF DICTIONARY.
*
***********************************************************************
GSRCH1   DS    0H
         ST    RE,SRCHL1          SAVE RETURN ADDRESS.
         MVC   SRCHTTR(3),TSREFB  SET TTR FOR FIRST DICT.
         BAL   RE,GSGET           LINK TO READ IN FIRST DICT.
GSRCH1A  DS    0H
         TM    1(R1),GSEXPGM      IS THIS ENTRY AN EXEC PGM ENTRY.
         BZ    GSRCH1B            NO. GO TO GET NEXT ENTRY.
GSRCH1A1 DS    0H
         LA    R2,5(R1)           POINT AT ENTRY NAME.
         BAL   RE,GSCOMPAR        LINK TO CHECK ENTRY VS ARGUMENT.
         B     GSRCH1B            UNEQUAL COMPARE.  GO GET NEXT ENTRY.
*
*   FOUND SCT ENTRY - SET RELPGM TO FIND DDNAME.
*
         LR    R4,R1
         SR    R4,R9              COMPUTE OFFSET TO SCT ENTRY.
         STC   R4,RELPGM          SET RELATIVE OFFSET.
         MVC   RELPGM+1(3),0(R9)  MOVE IN TTR.
         B     GSRETN1            RETURN TO CALLING ROUTINE.
*
*   CHECK FOR END OF ENTRIES.
GSRCH1B  DS    0H
         BAL   RE,GSENDCK         LINK TO CHECK END OF ENTRY.
         SPACE
         TM    SRCHSW1,SRCHF4     IS THIS A PROC.
         BO    GSRCH4A            YES.  GO TO PROCESS PGM IN PROC.
         SPACE
         B     GSRCH1A            NO. GO TO TEST NEW ENTRY.
         EJECT
***********************************************************************
*
*   SEARCH 2 - DDNAME FROM PGM ENTRY.
*
***********************************************************************
GSRCH2   DS    0H
         ST    RE,SRCHL1          SAVE LEVEL 1 RETURN REGISTER.
         SPACE
         MVC   SRCHTTR(3),RELPGM+1     SET TTR OF RELPGM DICT TO GET.
         BAL   RE,GSGET           LINK TO GET PGM DICTIONARY.
         SPACE
         IC    R6,RELPGM          *
         LA    R1,0(R6,R9)        *    POINT AT FIRST DD ENTRY UNDER
         IC    R6,0(R1)           *         CURRENT STEP ENTRY.
         LA    R1,0(R6,R1)        *
         BAL   RE,GSENDCK1            CHECK FOR END OF DICT
GSRCH2A  DS    0H
         TM    1(R1),GSEXDD       IS THIS A DD ENTRY.
         BZ    GSRTNF             NO. GO TO NOT FOUND RETURN.
         SPACE
         LA    R2,8(R1)           YE. POINT R2 AT ENTRY NAME.
         SPACE
         BAL   RE,GSCOMPAR        LINK TO COMPARE ENTRY VS ARGUE.
         SPACE
         B     GSRCH2B            NOT EQUAL.  GO GET NEXT ENTRY.
         B     GSRETN1            EQUAL.  GO TO RETURN 1.
GSRCH2B  DS    0H
         SPACE
         BAL   RE,GSENDCK         CHECK FOR END OF DD'S, GET NEXT ENTRY
         SPACE
         B     GSRCH2A            GO PROCESS ENTRY.
         EJECT
***********************************************************************
*
*   SEARCH 3 - PROCEDURE STEPNAME FROM TOP.
*
***********************************************************************
GSRCH3   DS    0H
         ST    RE,SRCHL1          SAVE LEVEL 1 RETURN REGISTER.
         SPACE
         MVC   SRCHTTR(3),TSREFB  SET TTR TO 1ST DICT.
         BAL   RE,GSGET           LINK TO GET FIRST DICTIONARY.
         SPACE
GSRCH3A  DS    0H
         TM    1(R1),GSEXPROC     IS THIS A PROC ENTRY.
         BZ    GSRCH3B            NO.  GO TO GET NEXT ENTRY.
         SPACE
         LA    R2,2(R1)           POINT AT ENTRY NAME.
         BAL   RE,GSCOMPAR        LINK TO COMPARE ENTRY VS ARGUE.
         SPACE
         B     GSRCH3B            NOT EQUAL. GO TO GET NEXT ENTRY.
*                                 EQUAL - SET RELPROC & RETURN.
         LR    R4,R1              COMPUTE RELATIVE OFFSET TO THE
         SR    R4,R9                   PROCEDURE ENTRY.
         STC   R4,RELPROC         SET RELATIVE OFFSET.
         MVC   RELPROC+1(3),0(R9) MOVE IN TTR.
         B     GSRETN1            RETURN TO CALLING ROUTINE.
         SPACE
GSRCH3B  DS    0H
         BAL   RE,GSENDCK         LINK TO GET NEXT ENTRY.
         B     GSRCH3A            GO TO PROCESS ENTRY.
         EJECT
***********************************************************************
*
*   SEARCH 4 - PGM STEPNAME WITH A PROCEDURE.
*
***********************************************************************
GSRCH4   DS    0H
         ST    RE,SRCHL1          SAVE LEVEL 1 RETURN REGISTER.
         OI    SRCHSW1,SRCHF4     INDICATE SEARCH ON PGM WITHIN PROC.
         SPACE
         SR    R0,R0              CLEAR REGISTER FOR COMPARE    PTM4030
         C     R0,RELPROC         IS THERE A PROCEDURE ENTRY.
         BE    GSRTNF             NO. GO TO RTN ON NOT FOUND.
         SPACE
         MVC   SRCHTTR(3),RELPROC+1    SET TTR FOR GET.
         BAL   RE,GSGET           GET PROC DICTIONARY.
         IC    R6,RELPROC         GET RELATIVE OFFSET OF PROC ENTRY.
         LA    R1,0(R6,R9)        POINT R1 AT OFFSET.
         BAL   RE,GSENDCK             CHECK FOR END OF DICT
GSRCH4A  DS    0H
         TM    1(R1),GSEXPPGM     IS THIS A PGM ENTRY (WITHIN A PROC).
         BO    GSRCH1A1           YES. GO TO COMPARE NAMES.
         SPACE
         TM    1(R1),GSEXPGM      THIS A PGM ENTRY NOT IN PROC  YA01401
         BO    GSRTNF             YES GO TO RTN ON NOT FOUND    YA01401
         TM    1(R1),GSEXPROC     IS THIS ANOTHER PROC          YA01401
         BO    GSRTNF             YES GO TO RTN ON NOT FOUND    YA01401
         B     GSRCH1B            NO. GO TO GET NEXT DICT ENTRY.
         EJECT
***********************************************************************
*
*   SUBROUTINE TO COMPARE DICT ENTRY VS ARGUMENT.
*
***********************************************************************
GSCOMPAR DS    0H
         LR    R4,R2              PTR TO ENTRY NAME TO R4.
         SR    R4,R1              DIFFERENCE BETWEEN BEGIN & ENTRY NAME
         IC    R6,0(R1)           TOTAL LENGTH OF ENTRY.
         SR    R6,R4              LENGTH OF ENTRY NAME.
         IC    R4,0(R3)           LENGTH OF ARGUMENT NAME.
         CLR   R6,R4              ARE THE LENGTHS EQUAL.
         BNE   0(RE)              NO. RETURN.
         BCTR  R4,0               YES. DECREMENT LENGTH FOR EX INSTRUCT
         SR    R0,R0               CLEAR REGISTER FOR COMPARE   PTM4030
         CR    R4,R0              IS LENGTH LESS THAN ZERO       A20647
         BL    GSCOMP2            YES.  BRANCH                   A20647
         EX    R4,GSCOMP1         COMPARE ENTRY NAME VS ARGUMENT NAME.
         BNE   0(RE)              NO. RETURN.
GSCOMP2  EQU   *                                                 A20647
         LA    RE,4(RE)           EQUAL. SET RE TO RETURN TO FOUND.
         BR    RE                 RETURN.
         SPACE 2
GSCOMP1  CLC   1(1,R3),0(R2)
         EJECT
***********************************************************************
*
*   RETURNS FROM LEVEL 2 TO LEVEL 1.  (NOTFOUND/NORMAL).
*
***********************************************************************
GSRTNF   DS    0H
*   NOT FOUND RETURN.
         TM    SRCHSW1,SRCHF3     IS THIS A RETRY.
         BZ    GSERRNF            NO. ERROR -GO TO ERROR EXIT.
*   RETRY
         L     RE,SRCHL1          *
         LA    RE,4(RE)           *    SET RETURN REG FOR RETRY.
         ST    RE,SRCHL1          *
         SPACE
         TM    SRCHSW1,SRCHF1     INDEX TO NEXT ARGUMENT.
         BO    GSRETN1A           YES. GO TO POINT R3 AT NEXT ARGUMENT.
         BZ    GSRETN1B           NO.  GO TO TURN OFF F3 & F4 & RETURN.
*
*   NORMAL LEVEL 2 RETURN TO LEVEL 1.
*
GSRETN1  DS    0H
GSRETN1A DS    0H
         TM    SRCHSW1,SRCHF1+SRCHF2+SRCHF3+SRCHF4  CHECK FOR SEARCH
*                                 ON CONDITIONALLY QUALIFIED STEPNAME.
         BO    GSRETN1B           ALL FLAGS ON INDICATE NO INDEXING.
         IC    R6,0(R3)           POINT R3 AT LENGTH BYTE OF     YM4022
         LA    R3,1(R6,R3)          THE SEARCH ARGUMENT          YM4022
GSRETN1B DS    0H
         NI    SRCHSW1,FF-SRCHF3-SRCHF4     TURN OFF F3 AND F4.
         L     RE,SRCHL1          RESTORE LEVEL 1 RETURN REG.
         BR    RE                 RETURN TO LEVEL ONE.
         EJECT
***********************************************************************
*
*   CHECK FOR END OF DICTIONARY AND GET NEXT ENTRY.
*
***********************************************************************
GSENDCK  DS    0H
         SPACE
         IC    R6,0(R1)           *    POINT R1 AT THE LENGTH BYTE OF
         LA    R1,0(R6,R1)        *         THE NEXT DICT ENTRY.
GSENDCK1 DS    0H                 ENTRY, R1 POINTS TO NEXT DIST ENTRY
         ST    RE,SRCHL2          SAVE LEVEL 2 RETURN REG.
         SPACE
         CLI   0(R1),X'00'        IS THIS THE END OF THIS DICT.
         BNE   0(RE)              NO. RETURN TO LEVEL 2 , R1 = ENTRY.
         SPACE
         CLC   4(3,R9),GS7F       IS THERE A CHAIN TTR FOR THIS DICT.
         BE    GSRTNF             NO. GO TO NOT FOUND RETURN.
         SPACE
         MVC   SRCHTTR(3),4(R9)   DICT IS CHAINED. GET NEXT DICTIONARY.
         BAL   RE,GSGET           LINK TO GET NEXT DICTIONARY.
         SPACE
         L     RE,SRCHL2          RESTORE LEVEL 2 RETURN REG.
         BR    RE                 RETURN TO LEVEL 2.
         EJECT
***********************************************************************
*
*   SUBROUTINE TO GET NEXT/FIRST DICTIONARY FOR LEVEL 2 OR LEVEL 3.
*
***********************************************************************
GSGET    DS    0H
         STM   RE,R0,SRCHL3       SAVE REGS 14,15 AND 0.
         SPACE
         CLC   SRCHTTR(3),GS7F    DOES TTR PASSED EQUAL ZERO.
         BE    GSGET1             YES. ONLY ONE DICT-MVC DICT1 TO DICT2
         SPACE
         CLC   SRCHTTR(3),SREFB   IS DICT IN DICT 1 SLOT.
         BE    GSGET1             YES. GO TO MOVE DICT1 TO DICT2.
*
*   MUST GET DICT FROM DISK. SET UP LINKAGE TO Q MANAGER.
*
         LA    R8,QPARM           Q-MANAGER PARAMETER AREA ADDRESS.
         USING IOPARAMS,R8
         L     R4,QMPCL           ADDRESS OF QMPCA/QMPEX.
         ST    R9,0(R4)           DICT 2 ADDRESS TO QMPCA.
         MVC   4(3,R4),SRCHTTR    TTR TO QMPEX.
         MVI   QMPOP,QMREAD       INDICATE READ ONLY.
         IEFSAVER SAVEPTR         GET NEW REGISTER SAVE AREA.
         SPACE
         L     RF,GSVHQ           IEFVHQ ADDRESS TO RF.
         BALR  RE,RF              LINK TO Q-MANAGER INTERFACE MODULE.
         SPACE
         IEFRELSE SAVEPTR         FREE NEW REGISTER SAVE AREA.
         SPACE
         B     GSGET2             GO TO POINT TO FIRST DICT ENTRY.
         SPACE
*
*   DICT ASKED FOR IS DICT 1.
*
GSGET1   DS    0H
         MVC   DREFB(176),SREFB   SHIFT DICT 1 TO SEARCH.
         SPACE
GSGET2   DS    0H
         LA    R1,7(R9)           POINT R1 AT FIRST DICT ENTRY.
         SPACE
         LM    RE,R0,SRCHL3       RESTORE R14,R15 & R0.
         BR    RE                 RETURN.
         EJECT
***********************************************************************
*                                                                     *
*              CONSTANTS.                                             *
*                                                                     *
***********************************************************************
**                                                                    *
GSJOBLIB DC    X'06'              CHECK FOR JOBLIB REFERBACK.
         DC    C'JOBLIB'
GS7F     DC    F'127'             MASK TO TURN OFF HIGH ORDER BIT -1ST
*                                      3 BYTES ALSO TO CK TTRS.
GSVHQ    DC    V(IEFVHQ)          Q-MANAGER INTERFACE MODULE.
LCONT    EQU   X'FD'                                             YM4022
GSVGK    DC    V(IEFVGK)           GET KEY ROUTINE               F36294
PATCH    DC    25F'0'              ************PATCH SPACE*******Y02668
         END
