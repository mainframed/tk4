         TITLE '    %DCL                                               *
                        '
IEFNB901 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IEFNB901  78.055'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @11,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@11                                         0001
         L     @00,@SIZDATD                                        0001
         GETMAIN  R,LV=(0)
         LR    @08,@01                                             0001
         USING @DATD,@08                                           0001
         ST    @13,@SA00001+4                                      0001
         LM    @00,@01,20(@13)                                     0001
         ST    @08,8(,@13)                                         0001
         LR    @13,@08                                             0001
         MVC   @PC00001(4),0(@01)                                  0001
****************************************************************Y02668
*MODULE TRACE CODE - FOR TESTING.                               Y02668
        L     15,TRACEV           LOAD TRACE RTNE ADDR.         Y02668
        CNOP  2,4                                               Y02668
        BALR  14,15               ENTER MOD ID IN TRACE RECORD. Y02668
TRACEV  DC    V(TRACE)            TRACE RTNE ADDR.              Y02668
        DC    C'B901'             MOD ID USED BY TRACE.         Y02668
*TRACE RETURNS HERE.                                            Y02668
****************************************************************Y02668
*   REGSAVE = R1;                   /* SAVE REG 1 CONTENTS           */
         ST    R1,REGSAVE                                          0055
*   LWAPTR = R10;                   /* EST. ADDR. TO LWA             */
         LR    LWAPTR,R10                                          0056
*   AMPRMPTR = ADDR(AMPRMLST);      /* INIT @ OF PARM LIST           */
         LA    AMPRMPTR,AMPRMLST                                   0057
*   DATACT = TEXTNUM;               /* SAVE TEXT COUNT OF SUBPARMS   */
         L     @14,TNUMPX(,LWAPTR)                                 0058
         MVC   DATACT(1),TEXTNUM(@14)                              0058
*   AMPRMLST = AMPRMLST &&AMPRMLST; /* CLEAR PARM LIST               */
         XC    AMPRMLST(24),AMPRMLST                               0059
*   TOTLNGTH = TOTLNGTH && TOTLNGTH;                               0060
         LH    @14,TOTLNGTH                                        0060
         LR    @09,@14                                             0060
         XR    @09,@14                                             0060
         STH   @09,TOTLNGTH                                        0060
*   SWITCHES = SWITCHES && SWITCHES; /* CLEAR INTERNAL SWITCHES      */
         XC    SWITCHES(1),SWITCHES                                0061
*   INTXTLPT = TLENPX;              /* @ OF FIRST LENGTH BYTE IN   0062
*                                      INTERNAL TEXT                 */
*                                                                  0062
         L     INTXTLPT,TLENPX(,LWAPTR)                            0062
*   /*****************************************************************/
*   /*                                                               */
*   /* THE FOLLOWING CODE CHECKS FOR A NULL AMP PARAMETER. IF THE JCL*/
*   /* TEXT COUNT FIELD IS ZERO THEN AMP='' WAS SPECIFIED. IN THIS   */
*   /* CASE THE NEXT LOOP IS BYPASSED SINCE NO DATA HAS TO BE MOVED  */
*   /* FOR THE EXIT BUFFER. THE LENGTH OF ZERO IN THE EXIT DATA      */
*   /* BUFFER INDICATES A NULL PARAMETER TO THE EXIT ROUTINE         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0063
*   IF DATALEN = 0 THEN                                            0063
         CLI   DATALEN(INTXTLPT),0                                 0063
         BNE   @RF00063                                            0063
*     DO;                                                          0064
*       R0 = 16;                                                   0065
         LA    R0,16                                               0065
*       GEN (GETMAIN R,LV=(0));     /* GET CORE FOR AMP BUFFER       */
         GETMAIN R,LV=(0)
*       AMDATAPT = R1;                                             0067
         ST    R1,AMDATAPT                                         0067
*       R1 = REGSAVE;                                              0068
         L     R1,REGSAVE                                          0068
*       FREELEN = 16;     /* SAVE LENGTH FOR FREEMAIN AFTER EXIT */
         LA    FREELEN,16                                          0069
*       DBUFLEN = 0;                                               0070
         L     @14,AMDATAPT                                        0070
         SLR   @09,@09                                             0070
         STH   @09,DBUFLEN(,@14)                                   0070
*       GO TO CALLEXIT;                                            0071
         B     CALLEXIT                                            0071
*     END;                                                         0072
*                                                                  0072
*MOVEDATA:                                                         0073
*                                                                  0073
*   /*****************************************************************/
*   /*                                                               */
*   /* MOVEDATA LOOP IS EXECUTED TWICE FOR EACH INTERNAL TEXT COUNT. */
*   /* THE FIRST TIME THROUGH THE TOTAL LENGTH OF ALL AMP            */
*   /* SUBPARAMETERS ( A JCL CONTINUATION IS COUNTED AS A            */
*   /* SUBPARAMETER IN JCL INTERNAL TEXT) IS CALCULATED. THEN A      */
*   /* GETMAIN IS ISSUED FOR THE TOTAL LENGTH OF THE AMP PARAMETER   */
*   /* DATA PLUS A 2 BYTE LENGTH FIELD. ON THE SECOND PASS THROUGH   */
*   /* THE LOOP THE AMP DATA IS MOVED FROM THE JCL INTERNAL TEXT     */
*   /* BUFFER(S) INTO THE OBTAINED CORE. THIS BUFFER IS THEN POINTED */
*   /* TO FROM THE FIRST WORD OF THE INTERFACE WITH THE EXIT RTN.    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0073
*   DO I = DATACT + DATACT TO 2 BY -1;                             0073
@RF00063 DS    0H                                                  0073
MOVEDATA SLR   @14,@14                                             0073
         IC    @14,DATACT                                          0073
         LR    I,@14                                               0073
         ALR   I,@14                                               0073
         B     @DE00073                                            0073
@DL00073 DS    0H                                                  0074
*     TOTLNGTH=TOTLNGTH+DATALEN+1;  /* PLUS ONE FOR COMMA            */
*                                                                  0074
         LA    @14,1                                               0074
         SLR   @09,@09                                             0074
         IC    @09,DATALEN(,INTXTLPT)                              0074
         AH    @09,TOTLNGTH                                        0074
         ALR   @09,@14                                             0074
         STH   @09,TOTLNGTH                                        0074
*     /***************************************************************/
*     /*                                                             */
*     /* OBTAIN SPACE FOR AMP DATA BUFFER                            */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0075
*     IF I = DATACT +1 THEN                                        0075
         SLR   @05,@05                                             0075
         IC    @05,DATACT                                          0075
         ALR   @14,@05                                             0075
         CR    I,@14                                               0075
         BNE   @RF00075                                            0075
*       DO;                                                        0076
*         TOTLNGTH=TOTLNGTH-1;      /*  -1 NO COMMA ON THE END       */
         BCTR  @09,0                                               0077
         STH   @09,TOTLNGTH                                        0077
*         R0 = TOTLNGTH + 2;        /* LENGTH OF ALL AMP DATA +    0078
*                                      LENGTH FIELD                  */
         AH    @09,@CH00143                                        0078
         LR    R0,@09                                              0078
*         GEN (GETMAIN  R,LV=(0));  /* GET CORE FOR AMP DATA BUFFER  */
         GETMAIN  R,LV=(0)
*         AMDATAPT = R1;                                           0080
         ST    R1,AMDATAPT                                         0080
*         R1 = REGSAVE;                                            0081
         L     R1,REGSAVE                                          0081
*         INTXTLPT = TLENPX;                                       0082
         L     INTXTLPT,TLENPX(,LWAPTR)                            0082
*         DBUFLEN = TOTLNGTH;                                      0083
         L     @14,AMDATAPT                                        0083
         MVC   DBUFLEN(2,@14),TOTLNGTH                             0083
*         DATADISP = '03'X;                                        0084
         LA    @14,3                                               0084
         STH   @14,DATADISP                                        0084
*       END;                                                       0085
*                                                                  0085
*     /***************************************************************/
*     /*                                                             */
*     /* THIS CODE MOVES ONE AMP SUBPARM INTO BUFFER FOR EXIT        */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0086
*     IF I <= DATACT + 1 THEN                                      0086
@RF00075 LA    @14,1                                               0086
         SLR   @09,@09                                             0086
         IC    @09,DATACT                                          0086
         ALR   @09,@14                                             0086
         CR    I,@09                                               0086
         BH    @RF00086                                            0086
*       DO;                         /* MOVE AMP DATA                 */
*         DATABUF (DATADISP:DATADISP+DATALEN-1) = AMEQTEXT;        0088
         L     @09,AMDATAPT                                        0088
         LH    @05,DATADISP                                        0088
         ALR   @05,@09                                             0088
         BCTR  @05,0                                               0088
         SLR   @07,@07                                             0088
         IC    @07,DATALEN(,INTXTLPT)                              0088
         LR    @06,@07                                             0088
         BCTR  @06,0                                               0088
         LR    @09,INTXTLPT                                        0088
         ALR   @09,@14                                             0088
         EX    @06,@SM00843                                        0088
*         DATADISP = DATADISP + DATALEN; /* INCR OFFSET INTO AMP DATA
*                                      BUFF                          */
         LH    @09,DATADISP                                        0089
         ALR   @09,@07                                             0089
         STH   @09,DATADISP                                        0089
*         IF I > 2 THEN             /* IF NOT LAST SUBPARAMETER      */
         CH    I,@CH00143                                          0090
         BNH   @RF00090                                            0090
*           DO;                     /* THEN EXECUTE THE FOLLOWING    */
*             DATABUF(DATADISP:DATADISP)=','; /* INSERT COMMA        */
         L     @05,AMDATAPT                                        0092
         ALR   @05,@09                                             0092
         BCTR  @05,0                                               0092
         MVI   DATABUF(@05),C','                                   0092
*             DATADISP=DATADISP+1;  /* UPDATE POINTER PAST COMMA     */
         ALR   @09,@14                                             0093
         STH   @09,DATADISP                                        0093
*           END;                                                   0094
*       END;                                                       0095
*                                                                  0095
@RF00090 DS    0H                                                  0096
*     /***************************************************************/
*     /*                                                             */
*     /* THIS CODE RESETS POINTERS IN LWA FOR VGK TO FIND NEXT KEY   */
*     /*       .RESET @ OF TEXT LENGTH BYTE (TLENPX).                */
*     /*       .RESET LENGTH OF CURRENT TEXT FIELD (TLEN)            */
*     /*       .RESET COUNT OF NUMBER OF SUBPARAMETERS TO PROCESS    */
*     /* (TCT)                                                       */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0096
*     IF I = '02'X THEN                                            0096
@RF00086 CH    I,@CH00825                                          0096
         BNE   @RF00096                                            0096
*       DO;                                                        0097
*         TLENPX = INTXTLPT;                                       0098
         ST    INTXTLPT,TLENPX(,LWAPTR)                            0098
*         TLEN = DATALEN;                                          0099
         SLR   @14,@14                                             0099
         IC    @14,DATALEN(,INTXTLPT)                              0099
         ST    @14,TLEN(,LWAPTR)                                   0099
*         TCT = TNUM;                                              0100
         MVC   TCT(4,LWAPTR),TNUM(LWAPTR)                          0100
*       END;                                                       0101
*     INTXTLPT = INTXTLPT + DATALEN + 1;                           0102
@RF00096 LR    @14,INTXTLPT                                        0102
         SLR   @09,@09                                             0102
         IC    @09,DATALEN(,INTXTLPT)                              0102
         ALR   @14,@09                                             0102
         AH    @14,@CH00101                                        0102
         LR    INTXTLPT,@14                                        0102
*   END MOVEDATA;                                                  0103
         BCTR  I,0                                                 0103
@DE00073 CH    I,@CH00143                                          0103
         BNL   @DL00073                                            0103
*   FREELEN = DBUFLEN+'02'X;/* SAVE LENGTH FOR FREEMAIN AFTER EXIT */
*                                                                  0104
         LA    FREELEN,2                                           0104
         L     @14,AMDATAPT                                        0104
         AH    FREELEN,DBUFLEN(,@14)                               0104
*CALLEXIT:                                                         0105
*   CNBLKPTR = ADDR(JFCB);          /* INIT @ OF CONTROL BLOCK       */
*                                                                  0105
CALLEXIT LA    @14,JFCB(,LWAPTR)                                   0105
         ST    @14,CNBLKPTR                                        0105
*   /*****************************************************************/
*   /*                                                               */
*   /* EXIT TO AMP KEYWORD PROCESSSING ROUTINE                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0106
*   GENERATE;                                                      0106
        LOAD  EP=IEFVAMP       LOAD AMP INTERPRETER
*   AMPADDR = R0;                   /* SET UP ADDR TO CALL EXIT      */
         LR    AMPADDR,R0                                          0107
*   CALL IEFNB902 (AMPRMLST);       /* GO TO AM= INTERPRETER         */
         LA    @14,AMPRMLST                                        0108
         ST    @14,@AL00001                                        0108
         LR    @15,AMPADDR                                         0108
         LA    @01,@AL00001                                        0108
         BALR  @14,@15                                             0108
*   RETCODE = RF;                   /* SAVE RETURN CODE              */
         ST    RF,RETCODE                                          0109
*   GENERATE;                                                      0110
        DELETE  EP=IEFVAMP    DELETE AMP INTERPRETER
*   R1 = REGSAVE;                                                  0111
*                                                                  0111
         L     R1,REGSAVE                                          0111
*   /*****************************************************************/
*   /*                                                               */
*   /* UPON RETURN FROM THE DATA MANAGEMENT INTERPRETER ROUTINE:     */
*   /*       .FREE THE BUFFER FOR THE AM= JCL DATA.                  */
*   /*       .PUT OUT ANY MESSAGES IN MESSAGE LIST.                  */
*   /*       .FREE EACH MESSAGE BUFFER IN LIST.                      */
*   /*       .IF EXTENSION BLOCKS EXIST ASSIGN A TTR FOR EACH, AND   */
*   /* CHAIN IT FROM THE JFCB ACCORDING TO THE OFFSET ADDRESS IN THE */
*   /* PARAMETER LIST.                                               */
*   /*       ..WRITE ANY EXTENSION BLOCKS TO THE QUEUE.              */
*   /*       ..FREE THE IN CORE BUFFER FOR THE EXTENSION BLOCK.      */
*   /*       .IF THE RETURN CODE IN REGISTER 15 IS NON-ZERO THE      */
*   /* JOBFAIL BIT IS SET IN THE IWA.                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0112
*   R0 = FREELEN;               /* SET LENGTH OF DATA BUFFER     */
         LR    R0,FREELEN                                          0112
*   R1 = AMDATAPT;                  /* INIT @ OF DATA BUFFER         */
         L     R1,AMDATAPT                                         0113
*   GENERATE;                                                      0114
         FREEMAIN R,LV=(0),A=(1) FREE JCL DATA BUFFER
*   R1 = REGSAVE;                   /* RESTORE CONTENTS OF REG 1     */
*                                                                  0115
         L     R1,REGSAVE                                          0115
*   /*****************************************************************/
*   /*                                                               */
*   /* DO WHILE MSGBUFPT ^= 0 LOOP THROUGH MESSAGE LIST. GO TO MSG   */
*   /* RTN FOR EACH MESSAGE IN LIST. FREE MSG BUFFER UPON RETURN FROM*/
*   /* MSG RTN                                                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0116
*                                                                  0116
*DOWHILE1:                                                         0116
*   IF MSGBUFPT ^= 0 THEN                                          0116
DOWHILE1 L     @14,MSGBUFPT                                        0116
         LTR   @14,@14                                             0116
         BZ    @RF00116                                            0116
*     DO;                           /* MESSAGES EXIST IF NON-ZERO    */
*       RFY R9 RSTD;                /*                        YM1547*/
*       R9=MSGBUFPT+8;              /* GET POINTER TO MSG     YM1547*/
         AH    @14,@CH00033                                        0119
         LR    R9,@14                                              0119
*       IWAMSLEN=80;                /* PUT MESSAGE LTH IN IWA YM1547*/
         MVI   IWAMSLEN(WAPTR),X'50'                               0120
*       AOVFBSW='1'B;               /* TELL VGM TO PUT MSG    YM1547*/
         OI    AOVFBSW(WAPTR),B'00100000'                          0121
*       CALL IEFVGM;                /* GO TO MESSAGE ROUTINE         */
         L     @15,@CV00830                                        0122
         BALR  @14,@15                                             0122
*       RFY R9 UNRSTD;              /*                        YM1547*/
*       R0 = MSGLEN;                                               0124
         L     @14,MSGBUFPT                                        0124
         LH    R0,MSGLEN(,@14)                                     0124
*       R1 = MSGBUFPT;              /* @ OF MESSAGE BUFFER TO BE   0125
*                                      FREED                         */
         LR    R1,@14                                              0125
*       MSGBUFPT = MSGNEXT;         /* SAVE @ OF NEXT MSG BUFFER/ OR
*                                      ZERO                          */
         L     @14,MSGNEXT(,@14)                                   0126
         ST    @14,MSGBUFPT                                        0126
*       GENERATE;                                                  0127
        FREEMAIN R,LV=(0),A=(1)   FREE MESSAGE BUFFER
*       R1 = REGSAVE;                                              0128
         L     R1,REGSAVE                                          0128
*       GOTO DOWHILE1;              /* IF MSGBUFPT IS NOW ZERO LOOP
*                                      EXIT WILL OCCUR               */
         B     DOWHILE1                                            0129
*     END;                          /* END OF DOWHILE1 LOOP          */
*   OVFBLKPT = ADDR(JFCB);          /* INIT FOR NEXT LOOP IF NEEDED  */
@RF00116 LA    OVFBLKPT,JFCB(,LWAPTR)                              0131
*   ONCESW = '1'B;                  /* INIT 1ST TIME SW FOR NEXT LOOP*/
*                                                                  0132
         OI    ONCESW,B'00000010'                                  0132
*/*      DO WHILE CHNBLKPT ^= 0                                      */
*                                                                  0133
*                                                                  0133
*DOWHILE2:                                                         0133
*                                                                  0133
*   /*****************************************************************/
*   /*                                                               */
*   /* GET CHN OFFSET @ INTO JFCB FROM THE PARAMETER LIST, ASSIGN A  */
*   /* TTR, AND PLACE IT INTO THE JFCB CHAIN TTR FIELD. PUT THE SAME */
*   /* TTR INTO THE SELF-TTR FIELD OF THE CHAINED (TO JFCB) CONTROL  */
*   /* BLOCK. WRITE THE CONTROL BLOCK TO THE QUE, AND FREE CORE SPACE*/
*   /* USED FOR THE CHAINED CONTROL BLOCK.                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0133
*   IF CHNBLKPT ^= 0 THEN                                          0133
DOWHILE2 ICM   @14,15,CHNBLKPT                                     0133
         BZ    @RF00133                                            0133
*     DO;                           /* NO EXT BLK IF PTR STILL ZERO  */
*       IF ONCESW = '1'B THEN                                      0135
         TM    ONCESW,B'00000010'                                  0135
         BNO   @RF00135                                            0135
*         DO;                       /* CHAIN BLOCK TO JFCB           */
*           OVFBLOCK (CHNOFFPT:CHNOFFPT+3) = TNEXT2; /* MOVE TTR TO
*                                      CHAIN FIELD                   */
         LH    @14,CHNOFFPT                                        0137
         L     @09,TNEXT2(,WAPTR)                                  0137
         BCTR  @14,0                                               0137
         ST    @09,OVFBLOCK(@14,OVFBLKPT)                          0137
*           SAVTBUF = TNEXT2;       /* SAVE CURRENT TTR              */
         ST    @09,SAVTBUF                                         0138
*           QMPOP = '01'X;                                         0139
         LA    @14,248                                             0139
         ALR   @14,WAPTR                                           0139
         MVI   QMPOP(@14),X'01'                                    0139
*           QMPCMNC = '10'X;        /* SET FOR ONE ASSIGN            */
         MVI   QMPCMNC(@14),X'10'                                  0140
*           CALL IEFVHQ;            /* ASSIGN ONE TTR                */
         L     @15,@CV00835                                        0141
         BALR  @14,@15                                             0141
*           TNEXT2 = QLINKWA (1:4); /* RESTORE NEXT TTR              */
         MVC   TNEXT2(4,WAPTR),QLINKWA(LWAPTR)                     0142
*         END;                                                     0143
*       ONCESW = '0'B;              /* TURN OFF 1ST TIME SWITCH      */
*                                                                  0144
@RF00135 NI    ONCESW,B'11111101'                                  0144
*       /*************************************************************/
*       /*                                                           */
*       /* CHAIN OVERFLOW BLOCK TO JFCB ON FIRST TIME THROUGH, TO    */
*       /* PRIOR OVERFLOW BLOCKS ON SUBSEQUENT LOOPS.                */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0145
*       OVFBLKPT = CHNBLKPT;        /* POINT BASE AT CURRENT OVERFLOW
*                                      BLOCK                         */
         L     @14,CHNBLKPT                                        0145
         LR    OVFBLKPT,@14                                        0145
*       QLINKWA (5:8) = SAVTBUF;    /* MOVE TTR FOR WRITE            */
         MVC   QLINKWA+4(4,LWAPTR),SAVTBUF                         0146
*       QLINKWA (1:4) = CHNBLKPT;   /* @ OF BUFFER TO BE WRITTEN     */
         ST    @14,QLINKWA(,LWAPTR)                                0147
*       QLINKWA(8:8)='28'X;         /*AMP OVERFLOW BLOCK ID  Y02668  */
         MVI   QLINKWA+7(LWAPTR),X'28'                             0148
*       FREEBKPT = CHNBLKPT;        /* SAVE @ TO FREE BUFFER SPACE 0149
*                                      LATER                         */
         LR    FREEBKPT,@14                                        0149
*       CHNBLKPT = CHAINADR;        /* SAVE @ OF NEXT BLOCK IN CHAIN */
         L     @14,CHAINADR(,OVFBLKPT)                             0150
         ST    @14,CHNBLKPT                                        0150
*       IF CHNBLKPT ^= 0 THEN                                      0151
         LTR   @14,@14                                             0151
         BZ    @RF00151                                            0151
*         OVFBLOCK (CHNOFPT2:CHNOFPT2+3) = TNEXT2; /* SET NEXT TTR   */
         LH    @14,CHNOFPT2                                        0152
         L     @09,TNEXT2(,WAPTR)                                  0152
         BCTR  @14,0                                               0152
         ST    @09,OVFBLOCK(@14,OVFBLKPT)                          0152
*       ELSE                                                       0153
*         OVFBLOCK (CHNOFPT2:CHNOFPT2+3) = 0; /* FLAG END OF CHAIN   */
         B     @RC00151                                            0153
@RF00151 LH    @14,CHNOFPT2                                        0153
         SLR   @09,@09                                             0153
         BCTR  @14,0                                               0153
         ST    @09,OVFBLOCK(@14,OVFBLKPT)                          0153
*       CHAINADR = SAVTBUF;         /* SET SELF-TTR IN OVERFLOW BLOCK*/
@RC00151 MVC   CHAINADR(4,OVFBLKPT),SAVTBUF                        0154
*       SAVTBUF = TNEXT2;           /* SAVE NEXT TTR                 */
         MVC   SAVTBUF(4),TNEXT2(WAPTR)                            0155
*       SELFID = OVFBLKID;          /* SET ID FIELD OF OVERFLOW BLOCK*/
         MVC   SELFID(1,OVFBLKPT),OVFBLKID                         0156
*       QMPOP = '02'X;              /* SET WRITE & ASSIGN FLAGS      */
         LA    @14,248                                             0157
         ALR   @14,WAPTR                                           0157
         MVI   QMPOP(@14),X'02'                                    0157
*       QMPCMNC = '11'X;            /* SET QMPA FOR 1 WRITE & 1 ASGN */
         MVI   QMPCMNC(@14),X'11'                                  0158
*       CALL IEFVHQ;                /* WRITE OUT OVERFLOW BLOCK      */
         L     @15,@CV00835                                        0159
         BALR  @14,@15                                             0159
*       TNEXT2 = QLINKWA(1:4);      /* RESTORE NEXT TTR              */
         MVC   TNEXT2(4,WAPTR),QLINKWA(LWAPTR)                     0160
*       CHNOFFPT = CHNOFPT2;        /* RESET OFFSET WHERE CHAINING IS
*                                      DONE FROM SO THAT IT WILL BE
*                                      DONE FROM CHAIN FIELD IN    0161
*                                      EXTENSION BLOCK               */
         MVC   CHNOFFPT(2),CHNOFPT2                                0161
*       R0 = 176;                                                  0162
         LA    R0,176                                              0162
*       R1 = FREEBKPT;              /* SET TO @ OF BLOCK JUST WRITTEN
*                                      OUT                           */
         LR    R1,FREEBKPT                                         0163
*       GENERATE;                                                  0164
        FREEMAIN R,LV=(0),A=(1)  FREE OVERFLOW BLOCK BUFFER
*       R1 = REGSAVE;                                              0165
         L     R1,REGSAVE                                          0165
*       GO TO DOWHILE2;             /* COMPLETE SIMULATED DOWHILE  0166
*                                      LOOP                          */
         B     DOWHILE2                                            0166
*     END;                                                         0167
*   IF RETCODE ^= 0 THEN                                           0168
@RF00133 ICM   @14,15,RETCODE                                      0168
         BZ    @RF00168                                            0168
*     DO;                           /* NORMAL RETURN IS ZERO         */
*                                                                  0169
*       /*************************************************************/
*       /*                                                           */
*       /* SET JOBFAIL BIT IN IWA                                    */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0170
*       INCMSTS = '1'B;                                            0170
         OI    INCMSTS+920(WAPTR),B'00000100'                      0170
*     END;                                                         0171
*   END IEFNB901                                                   0172
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (IEFCOMWA)                                        *
*/*%INCLUDE SYSLIB  (IEFVMIWA)                                        *
*/*%INCLUDE SYSLIB  (IEFQMNGR)                                        *
*/*%INCLUDE SYSLIB  (IEFAJCTB)                                        *
*/*%INCLUDE SYSLIB  (IEFJFCBN)                                        *
*;                                                                 0172
@EL00001 L     @13,4(,@13)                                         0172
@EF00001 L     @00,@SIZDATD                                        0172
         LR    @01,@08                                             0172
         FREEMAIN R,LV=(0),A=(1)
@ER00001 LM    @14,@12,12(@13)                                     0172
         BR    @14                                                 0172
@DATA    DS    0H
@CH00101 DC    H'1'
@CH00143 DC    H'2'
@CH00033 DC    H'8'
@CH00825 DC    XL2'02'
@SM00843 MVC   DATABUF(0,@05),AMEQTEXT(@09)
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    1F
@AL00001 DS    1A
IEFNB901 CSECT
         DS    0F
@DATD    DSECT
         DS    0D
SAVTBUF  DS    A
REGSAVE  DS    F
RETCODE  DS    F
SAVEREG9 DS    A
TOTLNGTH DS    H
DATADISP DS    H
DATACT   DS    AL1
         DS    CL3
AMPRMLST DS    CL24
         ORG   AMPRMLST
AMDATAPT DS    AL4
CNBLKPTR DS    AL4
MSGBUFPT DS    AL4
CHNBLKPT DS    AL4
CHNOFFPT DS    FL2
CHNOFPT2 DS    FL2
@NM00054 DS    CL2
OVFBLKID DS    CL1
SUBPLNUM DS    AL1
         ORG   AMPRMLST+24
SWITCHES DS    BL1
         ORG   SWITCHES
@NM00057 DS    BL1
ONCESW   EQU   SWITCHES+0
TBUFOVF  EQU   SWITCHES+0
         ORG   SWITCHES+1
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IEFNB901 CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV00830 DC    V(IEFVGM)
@CV00835 DC    V(IEFVHQ)
         DS    0D
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
I        EQU   @04
FREELEN  EQU   @02
AMPADDR  EQU   @04
OVFBLKPT EQU   @02
FREEBKPT EQU   @04
INTXTLPT EQU   @02
AMPRMPTR EQU   @02
LWAPTR   EQU   @03
WAPTR    EQU   @12
R1       EQU   @01
R0       EQU   @00
R9       EQU   @09
R10      EQU   @10
RF       EQU   @15
R2       EQU   @02
R3       EQU   @03
R4       EQU   @04
R5       EQU   @05
R6       EQU   @06
R7       EQU   @07
R8       EQU   @08
COMWA    EQU   0
CWAL     EQU   COMWA
CWAID    EQU   COMWA+4
CWACONID EQU   COMWA+8
TNEXT2   EQU   COMWA+36
IWAIOSA  EQU   COMWA+88
WARPL    EQU   COMWA+160
QPARM    EQU   COMWA+248
CWARET   EQU   COMWA+344
CWAMCSCA EQU   COMWA+346
CWAMSLEN EQU   COMWA+360
IWAMSLEN EQU   CWAMSLEN
AOSW1    EQU   COMWA+361
AOVFBSW  EQU   AOSW1
AOSW4    EQU   COMWA+362
SWE      EQU   COMWA+363
SWH      EQU   COMWA+364
SWI      EQU   COMWA+365
SWY2     EQU   COMWA+366
INTWA    EQU   0
IWAEXTS  EQU   INTWA+179
SWA      EQU   INTWA+180
SWC      EQU   INTWA+181
SWD      EQU   INTWA+182
SWF      EQU   INTWA+183
SWG      EQU   INTWA+184
IWAINTS8 EQU   INTWA+185
CRSW1    EQU   INTWA+189
DDSWX1   EQU   INTWA+192
SDDNSWA  EQU   DDSWX1
AOSW2    EQU   INTWA+194
JCT      EQU   INTWA+548
LWA      EQU   0
QLINKWA  EQU   LWA
TNUMPX   EQU   LWA+72
TLEN     EQU   LWA+76
TLENPX   EQU   LWA+80
TNUM     EQU   LWA+88
TCT      EQU   LWA+92
JFCB     EQU   LWA+392
QMPA     EQU   0
QMNAM    EQU   QMPA
QMPOP    EQU   QMPA+8
QMSTA    EQU   QMPA+16
QMPCL    EQU   QMPA+32
QMPCMNC  EQU   QMPCL
QMPACL   EQU   QMPCL+1
SWAQMPA  EQU   0
INJMJCT  EQU   0
JCTJSTAT EQU   INJMJCT+5
INCMSTS  EQU   JCTJSTAT
INDMCTLG EQU   JCTJSTAT
JCTJBYTE EQU   INJMJCT+7
JCTJMGLV EQU   JCTJBYTE
JCTCCODE EQU   INJMJCT+54
JCTRSW1  EQU   INJMJCT+86
JCTRSW2  EQU   INJMJCT+87
JCTJSB   EQU   INJMJCT+111
JCTSTAT2 EQU   INJMJCT+116
IEFAACTB EQU   0
INFMJFCB EQU   0
JFCBDSNM EQU   INFMJFCB
JFCBELNM EQU   INFMJFCB+44
JFCBTSDM EQU   INFMJFCB+52
JFCFCBID EQU   INFMJFCB+56
JFCBFRID EQU   JFCFCBID
JFCBLTYP EQU   INFMJFCB+66
JFCBOTTR EQU   INFMJFCB+67
JFCBUFOF EQU   JFCBOTTR
JFCBFLSQ EQU   JFCBOTTR+1
JFCFUNC  EQU   JFCBFLSQ
JFCBMASK EQU   INFMJFCB+72
JFCBFLG1 EQU   JFCBMASK+5
JFCOPEN  EQU   JFCBFLG1
JFCBFLG2 EQU   JFCBMASK+6
JFCDEFER EQU   JFCBFLG2
JFCBIND1 EQU   INFMJFCB+86
JFCBIND2 EQU   INFMJFCB+87
JFCAMPTR EQU   INFMJFCB+88
JFCBUFRQ EQU   JFCAMPTR
JFCBUFNO EQU   JFCBUFRQ
JFCBGNCP EQU   JFCAMPTR+1
JFCBHIAR EQU   JFCBGNCP
JFCBFALN EQU   JFCBHIAR
JFCBFTEK EQU   JFCBFALN
JFCBBFTA EQU   JFCBFTEK
JFCEROPT EQU   INFMJFCB+92
JFCTRTCH EQU   INFMJFCB+93
QMPEXPTR EQU   0
MSGBUF   EQU   0
MSGLEN   EQU   MSGBUF
MSGNEXT  EQU   MSGBUF+4
TEXTNUM  EQU   0
DATALEN  EQU   0
DATABUF  EQU   0
DBUFLEN  EQU   DATABUF
AMEQTEXT EQU   0
OVFBLOCK EQU   0
CHAINADR EQU   OVFBLOCK
SELFID   EQU   CHAINADR+3
IEFNB902 EQU   0
NEXTKEY  EQU   0
QMPEX    EQU   0
INPUT    EQU   0
JFCKEYLE EQU   JFCTRTCH
JFCCODE  EQU   JFCKEYLE
JFCSTACK EQU   JFCTRTCH
JFCMODE  EQU   JFCSTACK
JFCSPPRT EQU   JFCTRTCH
JFCBABFS EQU   JFCSPPRT+2
JFCLIMCT EQU   JFCBABFS
JFCDSORG EQU   JFCSPPRT+5
JFCDSRG1 EQU   JFCDSORG
JFCDSRG2 EQU   JFCDSORG+1
JFCRECFM EQU   JFCSPPRT+7
JFCRCFM  EQU   JFCRECFM
JFCOPTCD EQU   JFCSPPRT+8
JFCWVCSP EQU   JFCOPTCD
JFCWVCIS EQU   JFCWVCSP
JFCWVCBD EQU   JFCWVCIS
JFCALLOW EQU   JFCOPTCD
JFCRSV17 EQU   JFCALLOW
JFCOVER  EQU   JFCRSV17
JFCPCIBT EQU   JFCOPTCD
JFCMAST  EQU   JFCPCIBT
JFCEXT   EQU   JFCMAST
JFCBCKPT EQU   JFCOPTCD
JFCIND   EQU   JFCBCKPT
JFCRSV18 EQU   JFCOPTCD
JFCCYL   EQU   JFCRSV18
JFCACT   EQU   JFCCYL
JFCREDUC EQU   JFCOPTCD
JFCRSV19 EQU   JFCREDUC
JFCRSV20 EQU   JFCRSV19
JFCRSV21 EQU   JFCOPTCD
JFCDEL   EQU   JFCRSV21
JFCOPTJ  EQU   JFCOPTCD
JFCREORG EQU   JFCOPTJ
JFCBLKSI EQU   JFCSPPRT+9
JFCBUFSI EQU   JFCBLKSI
JFCAMSYN EQU   JFCSPPRT+11
JFCNCP   EQU   JFCAMSYN+2
JFCNTM   EQU   JFCAMSYN+3
JFCBFSEQ EQU   JFCNTM
JFCPCI   EQU   JFCBFSEQ
JFCRESRV EQU   JFCAMSYN+4
JFCUCSEG EQU   JFCRESRV
JFCUCSOP EQU   JFCUCSEG+4
JFCOUTLI EQU   JFCUCSEG+5
JFCTHRSH EQU   JFCOUTLI
JFCCPRI  EQU   JFCTHRSH
JFCBVOLS EQU   JFCUCSEG+10
JFCBS001 EQU   JFCBVOLS
JFCBPQTY EQU   JFCBS001+34
JFCBCTRI EQU   JFCBS001+37
JFCBSQTY EQU   JFCBS001+38
JFCFLGS1 EQU   JFCBS001+41
JFCBSPNM EQU   JFCBS001+45
JFCBFLG3 EQU   JFCBSPNM
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
JFCBEND  EQU   JFCBS001+58
JFCBSPTN EQU   JFCBS001+57
JFCBVLCT EQU   JFCBS001+56
JFCBDRLH EQU   JFCBS001+53
JFCBSBNM EQU   JFCBS001+50
JFCBABST EQU   JFCBS001+48
JFCBRV08 EQU   JFCBSPNM+1
JFCBRV07 EQU   JFCBFLG3
JFCBRV06 EQU   JFCBFLG3
JFCBRV05 EQU   JFCBFLG3
JFCBRV04 EQU   JFCBFLG3
JFCBRV03 EQU   JFCBFLG3
JFCBRV02 EQU   JFCBFLG3
JFCBEXP  EQU   JFCBFLG3
JFCDQDSP EQU   JFCBFLG3
JFCBDQTY EQU   JFCBS001+42
JFCBUAFF EQU   JFCFLGS1
JFCRSV45 EQU   JFCFLGS1
JFCVRDS  EQU   JFCFLGS1
JFCBCEOV EQU   JFCFLGS1
JFCRSV42 EQU   JFCFLGS1
JFCBADSP EQU   JFCFLGS1
JFCTOPEN EQU   JFCFLGS1
JFCBDLET EQU   JFCFLGS1
JFCRQID  EQU   JFCBSQTY
JFCROUND EQU   JFCBCTRI
JFCALX   EQU   JFCBCTRI
JFCMIXG  EQU   JFCBCTRI
JFCONTIG EQU   JFCBCTRI
JFCRSV29 EQU   JFCBCTRI
JFCBMSGP EQU   JFCBCTRI
JFCBSPAC EQU   JFCBCTRI
JFCRUNIT EQU   JFCBPQTY
JFCBEXAD EQU   JFCBS001+31
JFCBEXTL EQU   JFCBS001+30
JFCMSVGP EQU   JFCBS001+22
@NM00053 EQU   JFCBS001
JFCAVOLS EQU   JFCBVOLS
JFCBNVOL EQU   JFCUCSEG+9
JFCBNTCS EQU   JFCUCSEG+8
JFCSOWA  EQU   JFCOUTLI+1
JFCSEND  EQU   JFCCPRI
JFCEQUAL EQU   JFCCPRI
JFCRECV  EQU   JFCCPRI
JFCRSV34 EQU   JFCCPRI
JFCRSV33 EQU   JFCCPRI
JFCRSV55 EQU   JFCCPRI
JFCRSV54 EQU   JFCCPRI
JFCRSV53 EQU   JFCCPRI
JFCRSV27 EQU   JFCUCSOP
JFCRSV26 EQU   JFCUCSOP
JFCFCBVR EQU   JFCUCSOP
JFCFCBAL EQU   JFCUCSOP
JFCVER   EQU   JFCUCSOP
JFCRSV25 EQU   JFCUCSOP
JFCFOLD  EQU   JFCUCSOP
JFCBEXTP EQU   JFCUCSOP
JFCUCSID EQU   JFCUCSEG
JFCINTVL EQU   JFCSPPRT+19
JFCDBUFN EQU   JFCRESRV+3
JFCCYLOF EQU   JFCRESRV+2
JFCRKP   EQU   JFCRESRV
JFCPCIR2 EQU   JFCPCI
JFCPCIR1 EQU   JFCPCI
JFCPCIN2 EQU   JFCPCI
JFCPCIN1 EQU   JFCPCI
JFCPCIA2 EQU   JFCPCI
JFCPCIA1 EQU   JFCPCI
JFCPCIX2 EQU   JFCPCI
JFCPCIX1 EQU   JFCPCI
JFCBUFMX EQU   JFCNCP
JFCLRECL EQU   JFCAMSYN
JFCBAXBF EQU   JFCBUFSI
JFCREL   EQU   JFCREORG
JFCRSV22 EQU   JFCDEL
JFCSRCHD EQU   JFCRSV20
JFCOPTQ  EQU   JFCACT
JFCFEED  EQU   JFCIND
JFCCBWU  EQU   JFCEXT
JFCWUMSG EQU   JFCOVER
JFCSDNAM EQU   JFCWVCBD
@NM00052 EQU   JFCRECFM
JFCCHAR  EQU   JFCRECFM
JFCRFS   EQU   JFCRECFM
JFCRFB   EQU   JFCRECFM
JFCRFO   EQU   JFCRCFM
JFCFMREC EQU   JFCRCFM
JFCRSV16 EQU   JFCDSRG2
JFCRSV15 EQU   JFCDSRG2
JFCORGTR EQU   JFCDSRG2
JFCORGAM EQU   JFCDSRG2
JFCRSV13 EQU   JFCDSRG2
JFCORGTQ EQU   JFCDSRG2
JFCORGTX EQU   JFCDSRG2
JFCORGGS EQU   JFCDSRG2
JFCORGU  EQU   JFCDSRG1
JFCORGPO EQU   JFCDSRG1
JFCORGMQ EQU   JFCDSRG1
JFCORGCQ EQU   JFCDSRG1
JFCORGCX EQU   JFCDSRG1
JFCORGDA EQU   JFCDSRG1
JFCORGPS EQU   JFCDSRG1
JFCORGIS EQU   JFCDSRG1
JFCTRKBL EQU   JFCLIMCT+1
@NM00051 EQU   JFCLIMCT
JFCDEN   EQU   JFCSPPRT+1
JFCPRTSP EQU   JFCSPPRT
JFCONE   EQU   JFCMODE
JFCTWO   EQU   JFCMODE
JFCRSV07 EQU   JFCMODE
JFCRSV06 EQU   JFCMODE
JFCMODER EQU   JFCMODE
JFCMODEO EQU   JFCMODE
JFCEBCD  EQU   JFCMODE
JFCBIN   EQU   JFCMODE
JFCRSV32 EQU   JFCCODE
JFCTTY   EQU   JFCCODE
JFCASCII EQU   JFCCODE
JFCNCR   EQU   JFCCODE
JFCBUR   EQU   JFCCODE
JFCFRI   EQU   JFCCODE
JFCBCD   EQU   JFCCODE
JFCNOCON EQU   JFCCODE
@NM00056 EQU   OVFBLOCK+4
SELFTTR  EQU   CHAINADR
@NM00055 EQU   DATABUF+2
MSGBUFF  EQU   MSGBUF+8
MSGZERO  EQU   MSGBUF+2
JFCRSV05 EQU   JFCEROPT
JFCRSV04 EQU   JFCEROPT
JFCRSV03 EQU   JFCEROPT
JFCRSV02 EQU   JFCEROPT
JFCTOPT  EQU   JFCEROPT
JFCABN   EQU   JFCEROPT
JFCSKP   EQU   JFCEROPT
JFCACC   EQU   JFCEROPT
JFCBUFL  EQU   JFCAMPTR+2
JFCFWORD EQU   JFCBFTEK
JFCDWORD EQU   JFCBFTEK
JFCHIER1 EQU   JFCBFTEK
JFCDYN   EQU   JFCBFTEK
JFCEXC   EQU   JFCBFTEK
JFCBBFTR EQU   JFCBBFTA
JFCSIM   EQU   JFCBBFTA
JFCHIER  EQU   JFCBFTEK
JFCBFOUT EQU   JFCBUFNO
JFCBUFIN EQU   JFCBUFNO
JFCTEMP  EQU   JFCBIND2
JFCREQ   EQU   JFCBIND2
JFCENT   EQU   JFCBIND2
JFCSHARE EQU   JFCBIND2
JFCSECUR EQU   JFCBIND2
JFCDISP  EQU   JFCBIND2
JFCPDS   EQU   JFCBIND1
JFCGDG   EQU   JFCBIND1
JFCADDED EQU   JFCBIND1
JFCLOC   EQU   JFCBIND1
JFCRLSE  EQU   JFCBIND1
JFCBXPDT EQU   INFMJFCB+83
JFCBCRDT EQU   INFMJFCB+80
JFCBOPS2 EQU   JFCBMASK+7
JFCRCTLG EQU   JFCBFLG2
JFCBBUFF EQU   JFCBFLG2
JFCTRACE EQU   JFCBFLG2
JFCSDRPS EQU   JFCBFLG2
JFCMODNW EQU   JFCBFLG2
JFCNRPS  EQU   JFCDEFER
JFCOUTOP EQU   JFCBFLG2
JFCINOP  EQU   JFCBFLG2
JFCBPWBP EQU   JFCOPEN
@NM00050 EQU   JFCOPEN
JFCDUAL  EQU   JFCBFLG1
JFCSLDES EQU   JFCBFLG1
JFCSLCRE EQU   JFCBFLG1
JFCSTAND EQU   JFCBFLG1
JFCBOPS1 EQU   JFCBMASK
JFCBVLSQ EQU   INFMJFCB+70
JFCRSV31 EQU   JFCFUNC
JFCFNCBT EQU   JFCFUNC
JFCFNCBX EQU   JFCFUNC
JFCFNCBD EQU   JFCFUNC
JFCFNCBW EQU   JFCFUNC
JFCFNCBP EQU   JFCFUNC
JFCFNCBR EQU   JFCFUNC
JFCFNCBI EQU   JFCFUNC
JFCBFOFL EQU   JFCBUFOF
JFCNL    EQU   JFCBLTYP
JFCSL    EQU   JFCBLTYP
JFCNSL   EQU   JFCBLTYP
JFCSUL   EQU   JFCBLTYP
JFCBLP   EQU   JFCBLTYP
JFCBLTM  EQU   JFCBLTYP
JFCBAL   EQU   JFCBLTYP
JFCRSV38 EQU   JFCBLTYP
JFCVINDX EQU   INFMJFCB+64
JFCNLREC EQU   INFMJFCB+62
JFCBADBF EQU   INFMJFCB+60
JFCAMSTR EQU   JFCBFRID+2
JFCAMCRO EQU   JFCBFRID
JFCBDSCB EQU   INFMJFCB+53
JFCPAT   EQU   JFCBTSDM
JFCNDCB  EQU   JFCBTSDM
JFCNDSCB EQU   JFCBTSDM
JFCNWRIT EQU   JFCBTSDM
JFCTTR   EQU   JFCBTSDM
JFCSDS   EQU   JFCBTSDM
JFCVSL   EQU   JFCBTSDM
JFCCAT   EQU   JFCBTSDM
JFCIPLTX EQU   JFCBELNM
JFCBQNAM EQU   JFCBDSNM
ACTACCNT EQU   IEFAACTB+32
ACTJNFLD EQU   IEFAACTB+31
ACTJTIME EQU   IEFAACTB+28
ACTPRGNM EQU   IEFAACTB+8
@NM00049 EQU   IEFAACTB+7
ACTNEXT  EQU   IEFAACTB+4
ACTIDENT EQU   IEFAACTB+3
ACTDSKAD EQU   IEFAACTB
@NM00048 EQU   INJMJCT+175
JCTVULDP EQU   INJMJCT+172
JCTACODE EQU   INJMJCT+168
JCTPRFMF EQU   INJMJCT+167
JCTUSER  EQU   INJMJCT+160
JCTSSD   EQU   INJMJCT+157
@NM00047 EQU   INJMJCT+156
JCTSRBT  EQU   INJMJCT+152
JCTJMRJD EQU   INJMJCT+149
JCTJMRJT EQU   INJMJCT+146
JCTJMRSS EQU   INJMJCT+143
JCTJMRTL EQU   INJMJCT+140
JCTJMRCL EQU   INJMJCT+139
JCTJMROP EQU   INJMJCT+138
JCTJMRD  EQU   INJMJCT+137
JCTJMR   EQU   INJMJCT+134
JCTCKIDT EQU   INJMJCT+118
JCTCKIDL EQU   INJMJCT+117
@NM00046 EQU   JCTSTAT2
JCTBLP   EQU   JCTSTAT2
JCTPERFM EQU   JCTSTAT2
JCTSWSM  EQU   JCTSTAT2
JCTENDIT EQU   JCTSTAT2
JCTADSPC EQU   JCTSTAT2
JCTSPSYS EQU   JCTSTAT2
@NM00045 EQU   INJMJCT+115
JCTSSTR  EQU   INJMJCT+112
JCTJSBTM EQU   JCTJSB
JCTJSBEX EQU   JCTJSB
JCTJSBAL EQU   JCTJSB
JCTJSBIN EQU   JCTJSB
@NM00044 EQU   JCTJSB
JCTVOLSQ EQU   INJMJCT+110
JCTNRCKP EQU   INJMJCT+108
JCTNTRK  EQU   INJMJCT+107
JCTCKTTR EQU   INJMJCT+104
JCTDEVT  EQU   INJMJCT+100
@NM00043 EQU   INJMJCT+99
JCTSTIOT EQU   INJMJCT+96
JCTSNUMB EQU   INJMJCT+95
JCTQIDNT EQU   INJMJCT+94
JCTEQREG EQU   INJMJCT+92
@NM00042 EQU   INJMJCT+91
JCTDETDA EQU   INJMJCT+88
JCTDSDRA EQU   JCTRSW2
JCTDSOJB EQU   JCTRSW2
JCTDSOCR EQU   JCTRSW2
JCTRESTT EQU   JCTRSW2
JCTNOCKP EQU   JCTRSW2
JCTNORST EQU   JCTRSW2
JCTNARST EQU   JCTRSW2
JCTSYSCK EQU   JCTRSW2
@NM00041 EQU   JCTRSW1
JCTSTEPR EQU   JCTRSW1
JCTCKPTR EQU   JCTRSW1
JCTCKFT  EQU   JCTRSW1
JCTCONTR EQU   JCTRSW1
JCTSTERM EQU   JCTRSW1
JCTWARMS EQU   JCTRSW1
@NM00040 EQU   JCTCCODE+3
JCTJDPOP EQU   JCTCCODE+2
JCTJDPCD EQU   JCTCCODE
@NM00039 EQU   INJMJCT+53
JCTSCT   EQU   INJMJCT+52
JCTSMRBA EQU   INJMJCT+44
@NM00038 EQU   INJMJCT+43
JCTACTAD EQU   INJMJCT+40
@NM00037 EQU   INJMJCT+39
JCTJCTX  EQU   INJMJCT+36
@NM00036 EQU   INJMJCT+35
JCTSDKAD EQU   INJMJCT+32
JCTJCSMF EQU   INJMJCT+31
JCTGDGNT EQU   INJMJCT+28
@NM00035 EQU   INJMJCT+27
JCTPDIP  EQU   INJMJCT+24
JCTJTPTN EQU   INJMJCT+16
JCTJNAME EQU   INJMJCT+8
JCTJPRTY EQU   JCTJBYTE
INCMMGL1 EQU   JCTJMGLV
INCMMGL2 EQU   JCTJMGLV
@NM00034 EQU   JCTJMGLV
INCMALL  EQU   JCTJMGLV
JCTJMGPO EQU   INJMJCT+6
INCMNSET EQU   JCTJSTAT
INCMCAT  EQU   INDMCTLG
JCTABEND EQU   JCTJSTAT
@NM00033 EQU   JCTJSTAT
JCTJSTPC EQU   JCTJSTAT
@NM00032 EQU   JCTJSTAT
JCTJBLBS EQU   JCTJSTAT
JCTJSRNO EQU   INJMJCT+4
JCTIDENT EQU   INJMJCT+3
JCTDSKAD EQU   INJMJCT
QMRBN    EQU   SWAQMPA+12
@NM00031 EQU   SWAQMPA+1
QMSWSP   EQU   SWAQMPA
QMPNC    EQU   QMPCMNC
QMPCM    EQU   QMPCMNC
QMEIA    EQU   QMPA+28
QMWTQ    EQU   QMPA+24
QMRSD1   EQU   QMPA+22
QMTID    EQU   QMPA+20
QMLNK    EQU   QMPA+18
QMPRI    EQU   QMPA+17
@NM00030 EQU   QMSTA
QMSJNL   EQU   QMSTA
@NM00029 EQU   QMSTA
QMTPY    EQU   QMPA+15
QMNOT    EQU   QMPA+14
QMTLN    EQU   QMPA+12
QMTST    EQU   QMPA+11
QMFLT    EQU   QMPA+9
QMPEB    EQU   QMNAM+4
QMCAN    EQU   QMNAM
JFCBX    EQU   LWA+568
@NM00028 EQU   LWA+176
@NM00027 EQU   LWA+96
TPDTSAVE EQU   LWA+84
TKEYPX   EQU   LWA+68
TSP2     EQU   LWA+67
TSP1     EQU   LWA+66
@NM00026 EQU   LWA+60
TCLEANUP EQU   LWA+56
TBEGPX   EQU   LWA+52
TRR1     EQU   LWA+48
@NM00025 EQU   LWA+42
MSGKEY   EQU   LWA+41
MSGSEC   EQU   LWA+40
AOQLOCEX EQU   INTWA+1448
RFULLE   EQU   INTWA+1444
IWALWLGN EQU   INTWA+1440
IWAJSCBA EQU   INTWA+1436
IWAJSCBF EQU   INTWA+1432
RBLOCK   EQU   INTWA+1352
SPSAV    EQU   INTWA+1332
DSNAME   EQU   INTWA+1156
SCT      EQU   INTWA+980
@NM00024 EQU   INTWA+978
DNRT     EQU   INTWA+900
JCTX     EQU   INTWA+724
DREFB    EQU   INTWA+372
SREF     EQU   INTWA+196
@NM00023 EQU   INTWA+195
AODFLTKW EQU   AOSW2
AOMAXERR EQU   AOSW2
AONOREAD EQU   AOSW2
@NM00022 EQU   AOSW2
IWASNUMB EQU   INTWA+193
@NM00021 EQU   SDDNSWA
IWASCAT2 EQU   SDDNSWA
IWASCAT  EQU   SDDNSWA
IWAJCAT  EQU   SDDNSWA
@NM00020 EQU   SDDNSWA
SDDNSW   EQU   SDDNSWA
DDINO    EQU   INTWA+191
IWANELEN EQU   INTWA+190
@NM00019 EQU   CRSW1
CPDUM    EQU   CRSW1
@NM00018 EQU   CRSW1
IWAJBADR EQU   INTWA+188
IWAWRNMS EQU   INTWA+187
JBCONCAT EQU   INTWA+186
@NM00017 EQU   IWAINTS8
JOBRDR   EQU   IWAINTS8
JOBRDNC  EQU   IWAINTS8
JOBRDNR  EQU   IWAINTS8
@NM00016 EQU   IWAINTS8
ORFLG2SW EQU   SWG
@NM00015 EQU   SWG
ORSDPOR  EQU   SWG
ORRDOR   EQU   SWG
ORADDROR EQU   SWF
ORREGOR  EQU   SWF
ORACTOR  EQU   SWF
ORTIME0  EQU   SWF
ORTIMEOR EQU   SWF
ORCONDOR EQU   SWF
ORPARMBL EQU   SWF
ORPARMOR EQU   SWF
TIMDFPRC EQU   SWD
DCTFST   EQU   SWD
@NM00014 EQU   SWD
DBFST    EQU   SWD
FDDRCV   EQU   SWD
FEXRCV   EQU   SWD
JOBREGNS EQU   SWD
JOBADDRF EQU   SWD
@NM00013 EQU   SWC
VOLREF   EQU   SWC
DSNTQ    EQU   SWC
@NM00012 EQU   SWC
@NM00011 EQU   SWA
SCTTQ    EQU   SWA
JCTTQ    EQU   SWA
JHS      EQU   SWA
@NM00010 EQU   SWA
IWAQENTR EQU   IWAEXTS
@NM00009 EQU   IWAEXTS
DINBPLP1 EQU   INTWA+178
DJBCLAS  EQU   INTWA+177
IWACATCT EQU   INTWA+176
DDINTNO  EQU   INTWA+174
JCTXS    EQU   INTWA+172
JFCBES   EQU   INTWA+170
ACTS     EQU   INTWA+168
POVRRDS  EQU   INTWA+166
DREFBS   EQU   INTWA+164
SREFBS   EQU   INTWA+162
DSNAMES  EQU   INTWA+160
JFCBXS   EQU   INTWA+158
JFCBS    EQU   INTWA+156
SIOTS    EQU   INTWA+154
JACTS    EQU   INTWA+152
SCTS     EQU   INTWA+150
JCTS     EQU   INTWA+148
JEDSWS   EQU   INTWA+146
UNNU     EQU   INTWA+144
@NM00008 EQU   INTWA+143
UNQNAME  EQU   INTWA+120
ORIDSNM  EQU   INTWA+112
AOJRNLEX EQU   INTWA+104
IWASAVPT EQU   INTWA+100
DSNTPSA  EQU   INTWA+96
IWAJFCBP EQU   INTWA+92
IWASIOTP EQU   INTWA+88
IWASCTAD EQU   INTWA+84
IWAJSIOT EQU   INTWA+80
TSAVEP   EQU   INTWA+72
IWAJMRPT EQU   INTWA+68
IWANXTSV EQU   INTWA+64
IWAEXPNO EQU   INTWA+60
IWASTAPL EQU   INTWA+56
IWAJOBS6 EQU   INTWA+52
IWAJOBS3 EQU   INTWA+44
IWAJOBS1 EQU   INTWA+36
DSENQTP  EQU   INTWA+32
RELPGM   EQU   INTWA+28
RELPROC  EQU   INTWA+24
TPROC    EQU   INTWA+20
TACT     EQU   INTWA+16
TSREFB   EQU   INTWA+12
TJOBLIB  EQU   INTWA+8
TSIOT    EQU   INTWA+4
IWAINTS5 EQU   INTWA
RBYTE5   EQU   COMWA+371
RBYTE4   EQU   COMWA+370
RBYTE3   EQU   COMWA+369
RBYTE2   EQU   COMWA+368
RBYTE1   EQU   COMWA+367
@NM00007 EQU   SWY2
KEYNXTSW EQU   SWY2
DYNAMSW  EQU   SWY2
DUMMYSW  EQU   SWY2
@NM00006 EQU   SWI
DSNLIT   EQU   SWI
BLKMLTER EQU   SWI
@NM00005 EQU   SWI
IWADDNM  EQU   SWI
WAWRNWTO EQU   SWI
BLKPRC   EQU   SWI
@NM00004 EQU   SWH
CPSTPFL  EQU   SWH
PROCSW   EQU   SWH
CPFLGXX  EQU   SWH
CPSYSFLG EQU   SWH
@NM00003 EQU   SWH
SEQUENCE EQU   SWE
POVRX    EQU   SWE
POVRD    EQU   SWE
CONCAT   EQU   SWE
PRCV     EQU   SWE
PREF     EQU   SWE
GPI      EQU   SWE
PROCPLS  EQU   SWE
CWATERM  EQU   AOSW4
AODFWMSG EQU   AOSW4
AOSWALOC EQU   AOSW4
AOMSGTXT EQU   AOSW4
AOWRNREQ EQU   AOSW4
@NM00002 EQU   AOSW4
AOTXTWRT EQU   AOSW1
AOPRTSW  EQU   AOSW1
AONOPLIB EQU   AOSW1
AOILGLOP EQU   AOSW1
AOIOERR  EQU   AOSW1
AOENDKSW EQU   AOSW1
AOFSTPOS EQU   AOSW1
RHALF5   EQU   COMWA+358
RHALF4   EQU   COMWA+356
RHALF3   EQU   COMWA+354
RHALF2   EQU   COMWA+352
RHALF1   EQU   COMWA+350
WASTMTNO EQU   COMWA+348
CWALABEL EQU   CWAMCSCA+1
IWAMCSCA EQU   CWAMCSCA
IWARET   EQU   CWARET
AOLOCPL  EQU   COMWA+340
AOSUBSYS EQU   COMWA+336
AOSSOB   EQU   COMWA+332
AOSSIB   EQU   COMWA+328
AOQLOCEP EQU   COMWA+324
WAEXCPFX EQU   COMWA+316
WAJOBPFX EQU   COMWA+308
WAJBNAME EQU   COMWA+300
WAEXCRBA EQU   COMWA+292
WAJOBRBA EQU   COMWA+284
WAWRKLTH EQU   COMWA+244
WAMSGBUF EQU   COMWA+240
WANELPTR EQU   COMWA+236
RPLADDR  EQU   WARPL
@NM00001 EQU   IWAIOSA+8
IWASACHN EQU   IWAIOSA+4
TRSAVE   EQU   IWAIOSA
AOEPWORK EQU   COMWA+80
AOSTAPRM EQU   COMWA+76
AOJMRGEP EQU   COMWA+72
NEXTPTR  EQU   COMWA+68
BUFEND   EQU   COMWA+64
BUFADDR  EQU   COMWA+60
AOWSTMT  EQU   COMWA+56
TERMRTN  EQU   COMWA+52
TBUFCOPY EQU   COMWA+48
TEXTBUFP EQU   COMWA+44
JACTLPTR EQU   COMWA+40
TNEXT    EQU   COMWA+32
IWAINTS0 EQU   COMWA+28
QMGRP    EQU   COMWA+24
CTRLWAP  EQU   COMWA+20
SAVEPTR  EQU   COMWA+16
QPARMP   EQU   COMWA+12
IWACONID EQU   CWACONID
IWAID    EQU   CWAID
IWAL     EQU   CWAL
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00168 EQU   @EL00001
@ENDDATA EQU   *
         END   IEFNB901,(C'PLS2130',0701,78055)
