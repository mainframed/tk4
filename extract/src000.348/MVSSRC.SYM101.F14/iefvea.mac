***********************************************************************
*
*   MODULE NAME= IEFVEA
*
*   DESCRIPTIVE NAME= EXECUTE STATEMENT PROCESSOR
*
*   COPYRIGHT= N/A
*
*   STATUS= REL 037 PTF                                        @ZA29589
*
*   FUNCTION= GENERAL DESCRIPTION
*             IEFVEA IS THE MAIN PROCESSOR FOR EXECUTE CARDS.
*             IT CREATES THE SCT FOR THE STEP WHILE ALSO CREATING
*             OVERRIDE TABLES FOR STEP OVERRIDES,AND REFERBACK TABLES
*             FOR STEP REFERBACKS.
*             IT CONVERTS KEYWORD INTERNAL TEXT TO CONTROL BLOCK
*             REPRESENTATIONS.
*             IT CHAINS THE JOBLIB SIOT AND JFCB,AND ANY CONCATEN-
*             ATIONS INTO THE SCT - SIOT CHAIN.
*
*             AM/0 SUPPORT
*             IF THE CONVERTER FINDS A STEPCAT CARD IN THE
*             JCL INPUT IT WILL INTERROGATE THE INTERNAL TEXT
*             TO FIND THE EXEC CARD FOR THAT STEP.WHEN
*             THE EXEC CARD TEXT IS FOUND,A BIT WILL BE
*             TURNED ON IN THE PREFIX TO SIGNAL THAT A STEPCAT EXISTS.
*             IEFVEA WILL TEST THIS BIT (STRESTPC) TO
*             DETERMINE WHETHER TO CHAIN THE JOBCAT SIOT AND JFCB
*             INTO THE CHAIN OFF THE PRESENT STEP SCT.
*             THE BIT ON SIGNALS NOT TO CHAIN THE JOBCAT BLOCKS.
*
*             THE SCTCAT AND SCTCATR FIELDS IN THE SCT HAVE BEEN
*             COMBINED INTO ONE FIELD.(SCTPCAT)
*
*             SWA SUPPORT
*             ALL REFERENCES TO THE 3RD BYTE OF A TTR HAS BEEN
*             REMOVED.USING THAT TEST TO DETERMINE IF A CONTROL
*             BLOCK EXISTS IS NOT VALID WITH SWA VIRTUAL ADDRESSES
*
*      OPERATION=
*                 IEFVEA USES IEFVGK TO POINT TO THE NEXT PIECE
*                 OF DATA IN THE TEXT CREATED BY IEFVFA.IT THEN
*                 GAINS CONTROL FROM IEFVGK VIA THE BRANCH TABLE
*                 IF IT IS A NEW KEYWORD BEING PROCESSED,OR TO
*                 THE NEXT EXECUTABLE INSTRUCTION IF PROCESSING
*                 POSITIONAL DATA.
*                 EACH KEYWORD HAS A KEYWORD SUBROUTINE TO HANDLE
*                 ANY SPECIAL PROCESSING.MOST OF THE PROCESSING
*                 IS HANDLED BY GOING TO IEFVGT TO TEST AND STORE
*                 ACCORDING TO THE PDT ENTRIES FOR THE KEYWORD.
*                 WHEN THE LAST PIECE OF DATA HAS BEEN HANDLED,
*                 IEFVGK GOES TO IEFVEA'S CLEANUP ROUTINE WHERE
*                 HOUSEKEEPING IS PERFORMED.
*                 IF AN ERROR OCCURS,IEFVEA LOADS AN ERROR CODE
*                 AND GOES TO IEFVGM TO PUT OUT A MESSAGE.IT
*                 REGAINS CONTROL AND EXITS TO IEFVHE.
*
*   NOTES
*      CHARACTER CODE DEPENDENCIES= EBCDIC
*      DEPENDENCIES= NONE
*      RESTRICTIONS= NONE
*      REGISTER CONVENTIONS= REGISTERS AFTER INITIALIZATION:
*             R0- WORK REGISTER
*             R1- WORK REGISTER
*             R2- WORK REGISTER
*             R3- WORK REGISTER
*             R4- WORK REGISTER
*             R5- PTR TO SWA MANAGER REMOTE PARAM LIST
*             R6- ADDRESS OF IEFVHQ
*             R7-
*             R8- ADDRESS OF IEFVGT
*             R9- ADDRESS OF IEFVGK
*             RA- LOCAL WORK AREA POINTER
*             RB- BASE REGISTER
*             RC- IWA POINTER
*             RD- SAVE AREA POINTER
*             RE- WORK REGISTER
*             RF- WORK REGISTER
*
*      PATCH-LABEL= PATCH
*
*   MODULE TYPE= PROCEDURE
*      PROCESSOR= ASSEMBLER
*      MODULE SIZE= N/A
*      ATTRIBUTES= NCAL,LET,LIST,XREF,RENT,REFR,PAGED LPA
*
*   ENTRY POINT= IEFVEA
*      PURPOSE= TO PROCESS EXEC CARD TEXT
*      LINKAGE= BRANCH
*      INPUT DATA= IWA
*      REGISTERS SAVED= 14-12
*      REGISTER CONTENTS DURING PROCESSING= SEE REGISTER CONVENTIONS
*      REGISTERS RESTORED= 14-12
*
*   EXIT - NORMAL= IEFVHE
*      CONDITIONS= EXEC CARD PROCESSING COMPLETED
*      OUTPUT DATA= CONTROL BLOCKS CREATED.
*      RETURN CODES= NONE
*
*   EXIT - ERROR= IEFVHE
*      CONDITIONS= AFTER AN ERROR IS DETECTED.
*                  AN EXIT IS TAKEN TO IEFVGM WITH A MESSAGE CODE
*                  AND THE MESSAGE IS PUT INTO THE MESSAGE
*                  DATA SET.CONTROL IS GIVEN BACK TO IEFVEA
*                  AND AFTER CLEANUP IT GOES TO IEFVHE.
*      OUTPUT DATA= ERROR MESSAGE
*      RETURN CODES= NONE
*
*   EXTERNAL REFERENCES=
*      ROUTINES= IEFVGI,IEFVGS,IEFVGT,IEFVGK,IEFVHQ,IEFVHF,IEFVGM
*      DATA AREAS= IWA.EWA,ORWA,QMPA
*      CONTROL BLOCKS= JCT,SCT,SIOT,QMPA,JFCB
*      TABLE= IEFVKEYS
*      MACROS= IEFAJCTB, IEFASCTB, IEFQMNGR, IEFJFCB, IEFSIOT
*      ENQUEUE RESOURCES= NONE
*      CHANGE LEVEL= Y02668,ZA03866,Z40MPTH,Z40RPSM,
*                    ZA07749,OZ07749,ZA08776,OZ09444
*                    OZ10064,OZ12397,OZ16392,OZ15772,OZ27750
*                    OZ30305,OZ29589                           @ZA29589
*
*  MESSAGES= IEF632I - FORMAT ERROR 'COND'                            *
*            IEF637I - EXCESSIVE ACCOUNT FIELD LENGTH                 *
*            IEF613I - PROCEDURE WITHIN PROCEDURE                     *
*            IEF639I - INVALID O'RIDE KEYWORD                         *
*            IEF632I - FORMAT ERROR 'PGM'                             *
*            IEF615I - EXCESSIVE PROCSTEP NAME                        *
*            IEF642I - EXCESSIVE PARAMETER LENGTH                     *
*            IEF632I - FORMAT ERROR 'TIME'                            *
*            IEF638I - SPECIFIED NUMBER EXCEEDS MAX                   *
*            IEF645I - INVALID REFERBACK                              *
*            IEF646I - REQUIRED POSITIONAL PARAMETER MISSING          *
*            IEF670I - NO VALUE ASSIGNED TO SYMBOLIC PARAMETER        *
*                      ON PROC STATEMENT VIA EXEC STMT                *
*
*
***********************************************************************
*                                                                     *
         EJECT
         MACRO
&A       KKK   &B,&C,&D,&E
&A       EQU   *
         DC    FL1'&B'            NBR PARAMS THIS KEY.
         DC    BL1'&C'      1 MEANS SUBPARAM OK THIS POSITION
         DC    Y(&D-EABASE)   OFFSET TO KEY PROCESSOR.
         DC    Y(&E-EABASE)    OFFSET TO PDT.
         SPACE
         MEND
         MACRO
         CCC   &A,&B
         DC    XL1'32'                 CONTROL INFO/COMPARE BYTES.
         DC    C'&A'                   COMPARE PATTERN.
         DC    XL1'00'                 FUNCT/TABLE - OR/EWA.
         DC    AL1(EATEMP1+2-EAWORK)   OFFSET IN EWA.
         DC    AL1(&B)               BIT PATTERN.
         MEND
         TITLE 'IEFVEA - NEL'
EANEL    DSECT
         IEFNEL SUBCOM=I                                         Y02668
         TITLE 'IEFVEA - KEYS'
         IEFVKEYS
         TITLE 'IEFVEA - JCT'
EAJCT    DSECT
         IEFAJCTB
         TITLE 'IEFVEA - IEFQMNGR'
         IEFQMNGR
         TITLE 'IEFVEA - SIOT'
EASIOT   DSECT
         IEFASIOT
         TITLE 'IEFVEA - JFCB'
EAJFCB   DSECT
         IEFJFCBN
         TITLE 'IEFVEA - SCT'
EASCT    DSECT
         IEFASCTB
         TITLE 'IEFVEA - IWA'
         IEFCOMWA
         IEFVMIWA
         IEFTXTFT                                                Y02668
         TITLE 'IEFVEA - EWA'
         IEFVMEWA
EAWORK   EQU   EWA
SIOT     EQU   ACT
JFCB     EQU   EAAUXWK
         TITLE 'IEFVEA - ORWA'
ORTABLE  DSECT
         IEFVORWA
         TITLE 'IEFVEA - DSNT'
DDDSNT   DSECT                                                 @ZA15772
         IEFDSNT                                               @ZA15772
         EJECT
         TITLE 'IEFVEA - EQUATES'
*                                                                     *
***********************************************************************
*                                                                     *
*        ERROR MESSAGE NUMBERS                                        *
*                                                                     *
***********************************************************************
*                                                                     *
EAR40    EQU   X'20'              IEF632I FORMAT ERROR 'COND'.
EAR45    EQU   X'25'              IEF637I EXCESSIVE ACCT FIELD LENGTH.
EAR50    EQU   X'0D'              IEF613I PROCEDURE WITHIN PROCEDURE.
EAR51    EQU   X'0C'              IEF612I PROCEDURE NOT FOUND IN PROC.
EAR52    EQU   X'0E'              IEF614I I/O ERROR SEARCHING FOR PRO.
EAR53    EQU   X'09'              IEF639I INVALID O'RIDE KEYWORD.
EAR54    EQU   X'20'              IEF632I FORMAT ERROR 'PGM'
EAR55    EQU   X'0F'              IEF615I EXCESSIVE PROCSTEP NAME.
EAR56    EQU   X'2A'              IEF642I EXCESSIVE PARAMETER LENGTH.
EAR57    EQU   X'20'              IEF632I FORMAT ERROR 'TIME'.
EAR58    EQU   X'26'              EIF638I SPECIFIED NUMERIC EXCEEDS MAX
EAR59    EQU   X'2D'              IEF645I INVALID REFERBACK.        394
EAR60    EQU   X'2E'              IEF646I REQUIRED POS. PARAM MISSING.
EAR61    EQU   X'46'              IEF670I NO VALUE ASSIGNED TO    21016
*                                 SYMBOLIC PARAM. ON PROC         21016
*                                 STMT VIA EXEC STMT              21016
EAR62    EQU   X'49'              IEF673I ADDRSPC=REAL INVALID   Y01029
WRNMSG04 EQU   X'02'              IEF674I - INVALID DYNAMNBR     Y02670
WRNMSG03 EQU   X'04'                                             Y02655
WRNMSG05 EQU   X'13'              IEF675I PERFORM VALUE UNDEF'D YM00368
         SPACE
*                                                                     *
***********************************************************************
*                                                                     *
*        OTHER EQUATED SYMBOLS.                                       *
*                                                                     *
***********************************************************************
*                                                                     *
DICTLEN  EQU   0             LENGTH OF DICTIONARY ENTRY.        YM01882
DICTID   EQU   1             ENTRY IDENTIFIER.                  YM01882
DICTSIOT EQU   2             3 BYTE SVA OF SIOT FOR ENTRY..     YM01882
DICTJFCB EQU   5             3 BYTE SVA OF NEW JFCB FOR ENTRY   YM01882
DICTNAME EQU   8             NAME OF DD CARD FOR ENTRY.         YM01882
DDVERB   EQU   X'10'         DD CARD ID FOR DICTIONARY ENTRY..  YM01882
DENLEN   EQU   14            LENGTH OF JOBCAT ENTRY IN DICTIONARYM01882
EASCTID  EQU   X'02'              SCT ID.
EASMBLST EQU   173                OFFSET TO LAST SMB PTR IN SCT.   AACA
EABIT5   EQU   4                  BIT-5  FOR SYSFLGS - CHECK POINT.AACA
EABIT6   EQU   2                  BIT-6  FOR SYSFLGS - ABEND.      AACA
EAJBLIB  EQU   128                JOBLIB BIT IN JCT.
EADCTPRC EQU   X'80'              EXEC PROC DICT INDICATOR.
EADCTPGM EQU   X'40'              EXEC PGM DICT INDICATOR.
EADCTPPM EQU   X'20'              PGM WITHIN PROC DICT INDICATOR.
EAJCTREG EQU   92                 REGION OFFSET IN JCT.
VOLTID   EQU   X'06'              ID OF VOLUME TABLE.
EAJFNEW  EQU   X'C0'              DISP = NEW BIT SETTING IN JFCB.
EASINEW  EQU   X'04'              DISP = NEW BIT SETTING IN SIOT.
EAJFOLD  EQU   X'40'              DISP = OLD BIT SETTING IN JFCB. 010
EASIOLD  EQU   X'01'              DISP = OLD BIT SETTING IN SIOT.
EAJFSHR  EQU   X'08'              DISP = SHR  BIT SETTING IN JFCB. 010
EASIPAS  EQU   X'10'              DISP = PASS BIT IN SIOT.          010
EASYSOUT EQU   X'08'              SYSOUT BIT IN SCTSBYT3 OF SIOT.   394
EASDISPC EQU   X'10'    MASK TO CLEAR ALL DISP SETTINGS BUT PASS Y02113
EASBYTE3 EQU   X'F9'    MASK TO CLEAR NEW MOD DISP SETTING.      Y02113
VOLAFOFF EQU   X'DF'    MASK TO TURN VOL.AFF. OFF              @ZA02726
SCTSTEND EQU   INSMSCT+172         STEP START AND END BYTE         AACA
STEPEND  EQU   X'40'                                               AACA
ONE      EQU   1                                                   I283
EVEN     EQU   X'01'                                               I283
E3       EQU   3
E6       EQU   6
E7       EQU   7
E16      EQU   16                                                  I283
E8       EQU   8
LCSBIT   EQU   X'04'                                               I283
E182     EQU   182                                                 I283
E0       EQU   0                                                 Y01029
E1       EQU   1                                                 Y01029
E2       EQU   2                                                   I283
E4       EQU   4                                                   I283
STMINSEC EQU   X'03'              TIME KEYWORD CONTAINS STEP,    A49826
TJOBCAT  EQU   IWAJSIOT           TTR OF JOBCAT SIOT             Y01113
*                                 MINUTE AND SECOND PARAMETERS.  A49826
MINUTES  EQU   X'01'              TIME KEYWORD CONTAINS MINUTE   A49826
*                                 PARAMETER ONLY.                A49826
ZERO     EQU   X'00'              SECOND PARAMETER IN TIME       A49826
*                                 KEYWORD HAS ZERO VALUE.        A49826
JCATSWZ  EQU   DDSWX1         AM/0 SWITCH FIELD                  Y01113
JCATSW   EQU   IWAJCAT            JOBCAT SWITCH                  Y01113
ORBYT2KY EQU   PRFMEEK             1ST KEYWD IN ORID FL BYTE 2. YM00368
DISPLID  EQU   7     DISPLACEMENT OF BLOCK ID IN REMOTE LIST     Y02621
PROCORID EQU   X'0A'  ID OF PROC OVERRIDE TABLE FOR SWA WRITES   Y02621
JFCBSID  EQU   X'1C'   ID OF JFCB FOR SWA WRITES                 Y02621
DICTRYID EQU   X'25'              ID OF REFERBACK DISTIONARY   @ZA12397
ORDYNMOR EQU   16                                                Y02670
EADYNM   EQU   X'04'              DYNAMNBR FLAG                  Y02670
EAPRFM   EQU   X'02'              PERFORM FLAG                  YM00368
ORPRFMOR EQU   32                                                Y02655
SWADSNT  EQU   TWORK              DSNT SVA SAVE AREA           @ZA15772
DSNCOUNT EQU   TWORK+4            COUNT OF DSNT BLOCKS         @ZA15772
         EJECT
         TITLE 'IEFVEA - EXECUTE ROUTINE'
IEFVEA   CSECT
*
*A 026510,077430,077460,247310                                 @ZA02726
*C 030000,030100,078080                                        @ZA02726
* AFTER EAREG4 CHANGE BRANCH TARGET                            @ZA03866
* DEFINE SWITCH FOR FIRST STEP EXEC ON DEFERRED STP RSTRT      @ZA07749
* NEAR- EAPGM001 - SET SW WHEN RESTART FIRST STEP FOUND        @ZA07749
* AT -EARWA21B -TEST AND CLEAR SWITCH BEFORE PROCESSING JOBLIB @ZA07749
* AFTER EAPGM85 INSERT ONE INSTRUCTION TO INIT.ACT ID          @ZA08776
* D DO NOT RESET EAFRSTEP UNTIL CLEARED BY INITIALIZATION      @ZA09444
* CODE AFTER LABELS EAPRFMP & EAPRFME MOVED AFTER EAPRFM3      @ZA10064
* A EQU FOR DICTRYID AND CODE AT LABELS EARWA6 AND EARWA60     @ZA12397
* CHANGED BRANCH TARGET TO EARWA6 NEAR EARWA21A                @ZA12397
* CHANGED R5 TO R6 AFTER LABEL EARWA6                          @ZA16392
* ADDED CODE AFTER LABEL EARWA6                                @ZA15772
* DELETE INSTREAM PROCS AND DCB DSECTS                         @ZA18864
* MERGE SU4,10,16 CODE TO REL 037 BASE PTF                     @ZA27750
* SET FIRST EXEC PGM= RECEIVED SWITCH                          @ZA30305
* UPDATE JOBLIB SVA IN VOL=REF=*.JOBLIB SIOT                   @ZA29589
*
*********************************************************************
*                       INPUT TO THIS ROUTINE                       *
*                                                                   *
*                  RC = ADDRESS OF INTERPRETER WORK AREA            *
*                  RD = CURRENT REGISTER SAVE AREA                  *
*                                                                   *
*********************************************************************
         BALR  RB,0               REGISTER 11 IS THE BASE REGISTER
         USING *,RB,R8
EABASE   EQU   *                                                  O106
EASNBS0  DS    0H
*****************************************************************Y02668
* MODULE TRACE CODE - FOR TESTING.                               Y02668
         L     RF,TRACEV           LOAD TRACE RTNE ADDR.         Y02668
         BALR  RE,RF               ENTER MOD ID IN TRACE RECORD. Y02668
TRACEV   DC    V(TRACE)            TRACE RTNE ADDR.              Y02668
         DC    C'VEA '             MOD ID USED BY TRACE.         Y02668
* TRACE RETURNS HERE.                                            Y02668
*****************************************************************Y02668
         L     R8,EASNBS1              SECOND BASE                O106
         B     EAA1                    BRANCH AROUND ID           O106
EASNBS1  DC    A(EASNBS0+MAX)          VALUE OF SECOND BASE
         MODID BR=NO                                             Y01886
         DC    C'SU10'              FUNCTION ID AND            @Z40MPTH
*        DC    C'02' LEV # (PROC O'RIDE OF PERFORM KWRD ON EXEC@ZA10064
*              (WITH PERFORM KEYWORD ON JOB CARD ALSO)         @ZA10064
*        DC    C'03' LEV # (SEARCH,UPDATE,REWRITE JOBLIB DICT
*              ON DEFERRED STEP RESTART WITH JOBLIB DD)        @ZA12397
*        DC    C'04' LEV # (LOCATION 0 OVERLAY FIXED)          @ZA16392
*        DC    C'05' LEV # (SUPPORT VOL REF TO DSN ON JOBLIB)  @ZA15772
*        DC    C'06' LEV # (DELETE UNUSED DSECTS)              @ZA18864
*        DC    C'07' LEV # (MERGE SU4,10,16 TO 037 PTF)        @ZA27750
*        DC    C'08' LEV # (SET FIRST EXEC RECEIVED SWITCH     @ZA30305
         DC    C'09' LEV # (UPDATE JOBLIB SVA FOR VOL=REF)     @ZA29589
         EJECT
***********************************************************************
**                                                                   **
**             HEADER PORTION OF EXEC ROUTINE.                       **
**                                                                   **
***********************************************************************
*
*        REGISTER USAGE.
*
*
*              R8 = SCT ADDRESS.
*              R9 = TEST AND STORE ADDRESS.
*              RA = LOCAL AND GET/T+S WORK AREA.
*              RB = EXEC ROUTINE BASE REGISTER.
*              RC = INTERPRETER WORK AREA.
*              RD = CURRENT REGISTER SAVE AREA.
*              RE = LINK RETURN REGISTER.
*              RF = ADDRESS OF GET KEY/POS ROUTINE.
*
         SPACE 2
EAA1     DS    0H
         L     RA,CTRLWAP         WORK AREA
         USING EAWORK,RA          LWA ADDRESSING.
         L     R9,EATESTOR        TEST & STORE ADDRESSING.
         L     RF,EAGETKEP        GET KEY/POS ADDRESSING.
*
         NI    SCT+SCTSTAT2-INSMSCT,FF-SCTSPSYS INITIALIZE SYSIN A41722
*              BIT IN SCT TO ZERO FOR EACH NEW SCT.              A41722
*
* ZERO OUT ANY STEPCAT INDICATORS LEFT IN THE SCT AND IWA FROM   Y01113
* THE PREVIOUS STEP TO INSURE THAT THEY ARE NOT PROPOGATED TO    Y01113
* SUCCEEDING STEPS                                               Y01113
         XC    SCT+SCTPCAT-INSMSCT(MVTHREE),SCT+SCTPCAT-INSMSCT  Y02113*
                                   ZERO FIRST PRIVATE CATALOG    Y02113*
                                   POINTER IN SCT.               Y02113
* CLEAR LAST SIOT FIELD IN CASE THERE ARE NO DD'S FOR THIS STEP. Y02668
         XC    SCT+SCTLSIOT-INSMSCT(4),SCT+SCTLSIOT-INSMSCT      Y02668*
                                   CASE NO DD'S FOR THIS STEP.   Y02668
         XC    SCT+SCTCATCT-INSMSCT(E2),SCT+SCTCATCT-INSMSCT
*                                 ZERO CAT COUNT                 Y02668
         NI    DDSWX1,FF-IWASCAT            ZERO THE STEPCAT     Y01113
*              INDICATOR IN THE IWA                              Y01113
*   INITIALIZE WORK AREA.
*
         XC    0(EAREGSV-EWA,RA),0(RA) CLEAR EWA                   AACA
         MVC   EASNSV(8),EABLANK  BLANK STEPNAME.
         MVC   EAPCSV(8),EABLANK  BLANK PROCNAME.
         MVC   EAPRSV(8),EABLANK  BLANK OVERRIDDEN PROCSTEP.
         LA    R7,SIOT                                           Y02668
         ST    R7,IWASIOTP                                       Y02668
         LA    R7,JFCB                                           Y02668
         ST    R7,IWAJFCBP                                       Y02668
*
*   INITIALIZE CORE FOR GET KEY/POS AND TEST & STORE.
*
         LA    R7,EACLEANP        CLEANUP ADDRESS.
         ST    R7,TCLEANUP
         LA    R7,EABRANCH        BRANCH TABLE.
         ST    R7,TBRANCH
         NI    SWD,FF-FDDRCV      CLEAR FIRST DD RECEIVED SWITCH.
         TM    SWH,CPSYSFLG       IS THIS CHCKPT/RSTRT EXEC STMT.  AACA
         BO    EAA2A              YES. CONTINUE                    AACA
         OC    JCT+JCTSDKAD-INJMJCT(MVFOUR),JCT+JCTSDKAD-INJMJCT Y02621
*              DOES AN SCT CHAIN EXIST OFF THIS JCT?             Y02621
         BNZ   EAE3    YES,CONTINUE-NO CHAIN ONE IT              Y02621
*                                                                  AACA
*   FIRST EXEC- POINT JCTSDKAD AT SCT TTR, IF NO RESTART POINT     AACA
*        JCTSSTR AT SCT TTR ALSO.                                  AACA
*                                                                  AACA
         MVC   JCT+JCTSDKAD-INJMJCT(MVTHREE),SCT+SCTANSCT-INSMSCT O106
*                                      CHAIN IN FIRST STEP        O106
         OC    JCT+JCTSSTR-INJMJCT(MVFOUR),JCT+JCTSSTR-INJMJCT   Y02621
*              IS THERE A FIRST STEP TO RESTART ALREADY IN JCT?  Y02621
         BNZ   EAE3                    YES. CONTINUE.            Y02621
EAA2A    DS    0H                                                  AACA
         MVC   JCT+JCTSSTR-INJMJCT(MVTHREE),SCT+SCTANSCT-INSMSCT  O106
*                                      NO,MOVE FIRST STEP TO STRT O106
*
*   CHECK FOR PROCLIB BEING USED.
*
EAE3     DS    0H
         TM    SWE,PROC           PROCLIB BEING USED.
         BO    EAG3               YES.GO TO GET FIRST KEY/POS.
*
*   PROCLIB NOT BEING USED. EXEC SWITCHES OFF, CLEAR CALLING
*        STEPNAME IN SCT.
*
         XC    SWF(1),SWF          CLEAR OVERRIDE FLAGS.         Y02668
         NI    SWG,FF-ORRDOR-ORSDPOR-ORDYNMOR-ORPRFMOR          YM00368
*                                 CLEAR O'RIDE FLAGS            YM00368
         MVC   SCT+SCTSCLPC-INSMSCT(MVEIGHT),EABLANK              O106
*                                      BLANK CALLING STEPNAME IN  O106
*                                      SCT                        O106
*
*   GET FIRST KEY.
*
EAG3     DS    0H
         BALR  RE,RF              LINK TO IEFVGK.
         EJECT
***********************************************************************
*                                                                     *
*              EXEC KEY PROCESSING.                                   *
*                                                                     *
***********************************************************************
EAEXEC   DS    0H
*
*   STEPNAME - CHECK FOR FIRST CHAR ALPHA AND MOVE TO EASNSV IN EAWORK.
*
         L     R6,TKEYPX          GET KEY ADDRESS.             @ZA30305
         LA    R6,1(R6)           POINT AT NUMBER BYTE.        @ZA30305
         CLI   0(R6),X'02'        EXEC PROC STATEMENT          @ZA30305
         BE    EAEXEC2            YES. EXEC PROCEDURE STMT.    @ZA30305
         LA    R6,1(R2,R3)        POINT AT NEXT KEY            @ZA30305
         CLI   0(R6),PGMEK        IS NEXT KEY PGM=             @ZA30305
         BE    EAEXEC1            YES GO GET IT.                    438
         CLI   0(R6),PROCEK       IS NEXT KEY PROC=            @ZA30305
         BNE   EAPGM10            NO - FORMAT ERROR.                438
         BE    EAEXEC2                                         @ZA30305
EAEXEC1  DS    0H                                                   438
         TM    SWD,FEXRCV         IS THIS FIRST EXEC PGM=      @ZA30305
         BO    EAEXEC2            NO, BRANCH                   @ZA30305
         OI    SWD,FEXRCV         YES, SET INDICATOR           @ZA30305
EAEXEC2  DS    0H                                              @ZA30305
         BALR  RE,9               TEST AND STORE STEPNAME      @ZA30305
         STC   R2,EASNSVL         STORE STEPNAME LENGTH        @ZA30305
*                                                                     *
*   GET NEXT KEY OR PROCNAME.
*
         BALR  RE,RF              GET KEY/POS.
         SPACE
         L     R4,PROCBADD         POINT PDT REG TO PROC PDT BY  Y02668
         AR    R4,RB               ADDING BASE AND DISPACEMENT.  Y02668
         B     EAPROC             IF PROCNAME. GO TO PROCESS.
         EJECT
***********************************************************************
*                                                                     *
*              PROC KEY PROCESSING.                                   *
*                                                                     *
***********************************************************************
EAPROC   DS    0H
*
         NI    SCT+SCTSSTAT-INSMSCT,ZEROPRKY  TURN OFF ZERO PRO-  O106
*                                      TECT KEY                   O106
*
*
*   CHECK FOR SYMBOLIC PARAMETER DEFAULT OPTION.
*
         L     RE,TEXTBUFP         ADDR OF TEXT STRING PFX.     YM01546
         USING TEXT,RE             PREFIX ADDRESSABILITY.       YM01563
         TM    STRINDCS,PROCSTR    PROC STATEMENT?               Y02668
         BO    EAPROC2             YES, CHECK FOR CONFLICTING KEYY02668
         DROP  RE                                               YM01563
* GET NEXT KEY. EXEC PROC HAS BEEN HANDLED IN VFA.               Y02668
EAPROC0  DS    0H                                                Y02668
         SPACE
         SR    R6,R6
         IC    R6,EASNSVL         PICK UP LENGTH OF STEPNAME.
         EX    R6,EAMVC1          MOVE TO WORK SPACE FOR DICT BUILD.
         MVI   EAREGSV+1,EADCTPRC SET INDICATOR FOR EXEC PROC.
         LA    R6,2(R6)           INCREMENT TO GET LENGTH OF DICT ENTRY
         STC   R6,EAREGSV         SET LENGTH.
         LA    R1,EAREGSV         POINT TO START OF DICT ENTRY.
         L     R6,EAINPUT         LOAD DICT BUILD ROUTINE ADDRESS.
         SPACE
         BALR  RE,R6              LINK TO ENTER EXEC PROC INTO DICT.
         SPACE
         SPACE
         MVC   SCT+SCTSCLPC-INSMSCT(MVEIGHT),EASNSV               O106
*                                      MOVE CALLING STEPNAME      O106
*                                      TO SCT                     O106
         SPACE
         LA    R6,EAORTABL        ORIDE TABLE ADDRESS TO R6.
         XC    0(176,R6),0(R6)    ZERO OVERRIDE TABLE.
         BALR  RE,RF               EXEC PROC HANDLED IN VFA. GET Y02668*
                                   NEXT KEY.                     Y02668
         SPACE
         SPACE
*
*   SYMBOLIC PROC STATEMENT - CHECK FOR ANY EXEC KEYWORDS ON STATEMENT
*        BY TESTING FOR ENDKEY IN TEXTBUFFER.  ALSO, TURN OFF SYMBOLIC
*        PROC STMT FLAG IN IWA.
*
EAPROC2  DS    0H
         TM    SWE,PROC           PROC SWITCH ON                   AABA
         BZ    EAPROC0             BRANCH NO TO TEST AND STORE.  Y02668
         LA    R6,1(R2,R3)         POINT AT NEXT KEYWORD.
         CLI   0(R6),ENDK          IS IT AN ENDKEY.
         BE    EAEXITHF           YES. EXIT TO IEFVHF              AACA
*
*   SYMBOLIC KEYWORD ERROR - FAIL JOB ISSUE MESSAGE              A47546
*
         MVI   MSGKEY,X'00'        SET NO SECONDARY MESSAGE.      21016
         MVI   MSGSEC,EAR61        SET ERROR MESSAGE.
         B     EAERRTN             ISSUE MSG AND FAIL JOB.       A47546
         SPACE 2
EAMVC1   MVC   EAREGSV+1(1),EASNSVL    MOVE NAME OF STEP TO DICT BUILD.
         EJECT
***********************************************************************
*                                                                     *
*              PGM KEYWORD ROUTINE.                                   *
*                                                                     *
***********************************************************************
EAPGM    DS    0H
         LTR   R2,R2              PGMNAME PRESENT.                 438
         BZ    EAPGM10            PROGRAM NAME MISSING.            438
         IC    R6,IWASNUMB         MOVE IN STEP NO. FROM IWA     Y02668
         LA    R6,1(R6)            INCREMENT STEP NUMBER         Y02668
         STC   R6,IWASNUMB         PUT UPDATED STEP NO. IN IWA   Y02668
         STC   R6,SCT+SCTSNUMB-INSMSCT STEP NO. PUT IN SCT       Y02668
         OI    SWA,SCTTQ           INDICATE SCT TO BE PUT TO Q.  Y02668
*   MOVE NEXT SCT TTR TO SCTDISKA, SET SCT ID=2, ADD ONE TO SCTCNT IN
*        IWA &  CLEAR REST OF SCT EXCEPT SCTINPVL(PARM),SCTSTIME(TIME),
*        SCTSDPCD(COND) ABD BYTES 167 &168 (REGION SLOT).
*
         MVC   SCT+SCTDISKA-INSMSCT(MVTHREE),SCT+SCTANSCT-INSMSCT O106
*                                      MOVE NEXT TTR TO NEW SCT   O106
         MVI   SCT+SCTTBLID-INSMSCT,EASCTID  SET SCT ID TO TWO    O106
*
*   ENTER STEPNAME AND SCT TTR INTO DICTIONARY.
*
         SR    R6,R6
         IC    R6,EASNSVL         GET LENGTH OF STEPNAME.
         EX    R6,EAMVC2          MOVE TO WORK SPACE FOR DICT BUILD.
         MVI   EAREGSV+1,EADCTPGM SET INDICATOR FOR EXEC PGM.
         TM    SWE,PROC           IS THIS A PROCEDURE.
         BZ    EAPGM0             NO. GO TO MOVE SCT TTR TO DICT.
         MVI   EAREGSV+1,EADCTPPM YES. OVERLAY PGM IND WITH PROC PGM.
EAPGM0   DS    0H
         MVC   EAREGSV+DISPLTWO(MVTHREE),SCT+SCTDISKA-INSMSCT     O106
*                                      MOVE SCT TTR TO DICT BUILD O106
         LA    R6,5(R6)           INCREMENT FOR PROPER LENGTH OF DICT
         STC   R6,EAREGSV              ENTRY.
         LA    R1,EAREGSV         POINT TO START OF DICTIONARY ENTRY.
         L     R6,EAINPUT         GET DICT BUILD ROUTINE ADDRESS.
         SPACE
         BALR  RE,R6              LINK TO ENTER PGM INTO DICTIONARY.
         SPACE
*
*   CLEAR SCT.
*
         XC    SCT+SCTLALOC-INSMSCT(CLTHIRTN),SCT+SCTLALOC-INSMSCT O106
         SR    R6,R6
         ST    R6,SCT+SCTAFACT-INSMSCT  CLEAR ACT TTR             O106
*  CLEAR FIELDS FOR NEXT STEP.                                  YM00366
         XC    SCT+SCTNSMSG-INSMSCT(1),SCT+SCTNSMSG-INSMSCT     YM00366
         XC    SCT+SCTSTYPE-INSMSCT(1),SCT+SCTSTYPE-INSMSCT     YM00366
         STH   R6,SCT+SCTRPACT-INSMSCT CLEAR RELATIVE PTR TOACT   O106
*                                      STEP ENTRY                 O106
         MVC   SCT+SCTSNAME-INSMSCT(MVEIGHT),EABLANK BLANK STEPNAMEO106
         TM    SWE,PROC           READING FROM PROCLIB.             248
         BO    EAPGM00            YES.                              248
         MVC   SCT+SCTSCLPC-INSMSCT(MVEIGHT),EABLANK  NO BLANK    O106
*                                      CALLING STEP NAME          O106
         MVI   SCT+SCTSSTAT-INSMSCT,INITBLK  CLEAR INTERNAL STEP  O106
*                                      STATUS                     O106
EAPGM00  DS    0H                                                   248
         MVC   SCT+SCTPGMNM-INSMSCT(MVEIGHT),EABLANK BLANK PGMNM  O106
         OI    EASW1,EAERLYER     INDICATE FAKE SCT NOT NEEDED.
*                                                                  AACA
*   CHECK FOR STEPFLUSH - IF STEPNAME OF THIS STEP MATCHES         AACA
*        STEPNAME FROM RESTART PARAMETER ON THE JOB STATEMENT,     AACA
*        INDICATE STEP FOUND BY TURNING OFF CPSTPFL IN SWH OF IWA. AACA
*        IF CHECKID WAS SPECIFIED LINK TO EARSTSUB TO REARRANGE    AACA
*        SCT/SMB CHAIN.  IF NOT, MOVE THIS SCT TTR TO JCTSSTR.     AACA
         TM    SWH,CPSTPFL         FLUSHING TO A SPECIFIC STEP? YM00371
         BZ    EAPGM005            NO, CONTINUE.                YM00371
         CLI   IWAJOBS3,C'*'       RESTART THIS STEP? (REST=*). YM00371
         BNE   EAPGM001            BR NO TO CHECK STEPNAMES.    YM00371
*  RESTART AT FIRST STEP - RESTART=*.                           YM00371
         NI    SWH,255-CPSTPFL     CLEAR C/R FLUSH FLAG.        YM00371
         B     EAPGM005            TREAT AS IF NO RESTART FOR   YM00371*
                                   CHAINING PURPOSES.           YM00371
EAPGM001 DS    0H                                               YM00371
         CLC   IWAJOBS1(MVEIGHT),SCT+SCTSCLPC-INSMSCT  IS THE     O106
*                                      CALLING STEPNAME           O106
*              THE SAME AS THE ONE SPECIFIED IN THE JOB RESTART    AACA
*              PARAMETER.  (IN THE CASE OF A NON-PROCEDURE STEP    AACA
*              BOTH FIELDS ARE BLANK.)                             AACA
         BNE   EAPGM004            NO CONTINUE                     AACA
         CLC   IWAJOBS3(8),EASNSV YES. ARE THE STEPNAMES THE SAME. AACA
         BNE   EAPGM004            NO CONTINUE                     AACA
*                                                                  AACA
*   RESTART STEP FOUND                                             AACA
*                                                                  AACA
         NI    SWH,FF-CPSTPFL     INDICATE RESTART STEP FOUND      AACA
         MVC   JCTSNUMB+JCT-INJMJCT,IWASNUMB MOVE RESTART STEP  YA01834
         OI    EASW2,EACLCOND      THIS SWITCH INDICATES        YM00371
* TO THE SUBRTN WHICH CONNECTS JOBLIB SIOTS TO THIS SCT THAT       AACA
* THIS WILL BE THE 1ST STEP RUN IN THE RESTARTED JOB AND THAT      AACA
* THE STEP CONDITION CODES ARE TO BE ZEROED IN THE CLEAN-UP RTN.   AACA
         OI    EASW2,EAFRSTEP     INDICATE FIRST STEP FOR A    @ZA07749
*                                 DEFERRED STEP RESTART        @ZA07749
         CLI   JCT+JCTCKIDL-INJMJCT,X'00'   IS CHECKID PRESENT.    AACA
         BE    EAPGM003           NO GO TO MOVE SCT TTR TO JCTSSTR AACA
         IC    R6,JCTSNUMB+JCT-INJMJCT  YES...DECREMENT THE     YA01834
         BCTR  R6,0                     JCT RESTART STEP        YA01834
         STC   R6,JCTSNUMB+JCT-INJMJCT  NUMBER BY ONE           YA01834
*                                                                  AACA
         BAL   RE,EARSTSUB        FOUND THE RESTART STEP - LINK TO AACA
*                                      CHAIN SCT + SMB TTRS.       AACA
         B     EAPGM005           CONTINUE                         AACA
EAPGM003 DS    0H                                                  AACA
         MVC   JCT+JCTSSTR-INJMJCT(MVTHREE),SCT+SCTDISKA-INSMSCT  O106
*                                      SCT TTR TO JCTSSTR         O106
*              TO INDICATE TO INITIATOR THAT THIS IS THE FIRSTSTEP AACA
*              OF THE JOB TO BE RUN WHEN IT IS RESTARTED.          AACA
         B     EAPGM005            CONTINUE                        AACA
EAPGM004 DS 0H
         OI    SCT+SCTSTEND-INSMSCT,STEPEND  SET STEP ENDED BIT   O106
*                                      IN SCT.  BIT MUST BE SET   O106
*                                      FOR WARM START             O106
         SPACE
EAPGM005 DS    0H
*
         XC    EATEMP3(E4),EATEMP3   ZERO 1ST JOBCAT PTR FILED   Y02113
         SR    R0,R0              SETUP R0 FOR JOBCAT COUNT      Y02113
         SR    R6,R6              CLEAR REG FOR JOBLIB COUNT     Y02113
         CLI   SCT+SCTSNUMB-INSMSCT,FRSTSTEP   1ST STEP?       @ZA02726
         BE    SKIP      YES-BRANCH AROUND CLEAR DSNT INSTRS.  @ZA02726
*      I N I T I A L I Z E  C O M M O N  S C T  F I E L D S      Y02113
         XC    SCT+SCTLDSTB-INSMSCT(E4),SCT+SCTLDSTB-INSMSCT     Y02668
*                                      CLEAR LEN OF DSNAME TABLE Y02113
         XC    SCT+SCTADSTB-INSMSCT(CLFOUR),SCT+SCTADSTB-INSMSCT Y02668
*              CLEAR DSN POINTER IN SCT.                         Y02668
*  INITIALIZATION OF SCT FIELDS IS COMPLETE.                    YM04927
*  CHECK IF SCT IS FOR CHECKPT/RESTART EXEC - PGM=IEFDSDRP.     YM04927
SKIP     TM    SWH,CPSYSFLG        THIS A CHECKPT/RESTART EXEC @ZA02726
         BO    EAPGM011            BR YES, BYPASS CHAINING.     YM04927
*  STANDARD EXEC. CHAIN JOBLIB/JOBCAT SIOTS, IF ANY.            YM04927
*
         TM    JCT+JCTJSTAT-INJMJCT,EAJBLIB  DOES A JOBLIB
*                                            EXIST               Y02113
         BZ    EAPGM010     NO,NO JOBLIB SIOTS TO CHAIN TO STEP. Y02113
*                           YES,SET UP TO CHAIN JOBLIB SIOTS.    Y02113
         MVC   EATTRSV(MVFOUR),TJOBLIB  MOVE JOBLIB POINTER TO   Y02113
*              START READING FROM FIRST JOBLIB SIOT THRU COUNT.  Y02113
         IC    R6,JBCONCAT    GET THE NUMBER OF JOBLIB SIOTS.    Y02113
         L     R5,TEXTBUFP   LOAD ADDRESS OF TEXT BUFFER TO SET  Y02113
         USING TEXT,R5
         TM    STREINDC,ETXSTPCT   DOES STEP HAVE A STEPCAT DD?  Y02668
         BO    EAPGM007    YES,DO NOT INCLUDE JOBCAT SIOT COUNT. Y02113
EAPGM006 DS    0H                                                Y02668
         IC    R0,IWACATCT  GET THE NUMBER OF JOBCAT SIOTS.      Y02113
EAPGM007 DS    0H                                                Y02668
         DROP  R5                                                Y02668
*        CALCULATE THE NUMBER OF SIOTS TO BE READ AND CHAINED    Y02113
*   JOBLIB. SET SCTLALOG, AND DDINTNO = NBR JOBLIB SIOTS.        Y02668
*        SCT AND IWA.                                            Y02113
*                                                                Y02113
         AR    R6,R0  ADD THE JOBLIB AND JOBCAT COUNTS TO GET    Y02113
*              TOTAL NUMBER OF SIOTS THAT WILL BE READ IN.       Y02113
         STH   R0,SCT+SCTCATCT-INSMSCT SET CATALOG SIOT COUNT    Y02668
         STH   R6,SCT+SCTLALOC-INSMSCT  SET NUMBER OF SIOTS FOR  Y02113
*              CALCULATION OF ALLOCATE WORK AREA.                Y02113
         STH   R6,DDINTNO         DD INTERNAL NBR.               Y02668
         MVC   SCT+SCTFSIOT-INSMSCT(MVFOUR),TSIOT  SET UP FOR    Y02113
*              STARTING SIOT CHAIN FROM FIRST SIOT CREATED NO    Y02113
*              MATTER WHICH ONE IT WILL BE.                      Y02113
EAPGM008 DS    0H                                                Y02668
*        READ CHAIN AND WRITE CODE.THE SUBROUTINE USED WILL READ Y02113
*        CHAIN AND WRITE OUT AGAIN JOBLIB AND JOBCAT SIOTS.THE   Y02113
*        ORIGINAL JOBCAT AND /OR JOBLIB SIOTS ARE USED AS MODELS.Y02113
         SPACE
         SR    R5,R5     ZERO IN REGISTER 5 INDICATES READ.      Y02113
         SPACE
         BAL   RE,EARWA  READ IN THE SIOT AND JFCB AND CHAIN.    Y02113
*        JOBLIB AND JOBCAT DSNAMES MUST BE CHECKED FOR DSENQ     Y02668
*        ENTRIES TO BE BUILT,IF THEY DON'T EXIST                 Y02668
         L     R5,EAVDBSD         ADDR OF DSENQ TABLE ROUTINE.   Y02668
         BALR  RE,R5              CHECK DSNAME IN DSENQ TABLE    Y02668
         SPACE
*        LAST JOBLIB OR JOBCAT SIOT IN STEP,IF NO OTHER DD CARDS Y02668
*        EXIST FOR STEP,MUST HAVE A ZERO NEXT SIOT POINTER.      Y02668
         LA    R5,E1     LOAD A ONE INTO REGISTER 5.             Y02668
         CR    R6,R5     HAVE WE READ IN THE LAST SIOT TO BE     Y02668
*              CHAINED TO THIS STEP?                             Y02668
         BNE   EAWRITES  NO,CONTINUE NORMAL PROCESSING.          Y02668
         LA    R5,WAEXCPFX  LOAD ADDRESS OF EXEC CARD PREFIX     Y02668
         USING TEXT,R5
         TM    STREINDC,ETXNODD  IS THE NO DD INDICATOR ON FOR   Y02668
*                                THIS STEP?(NO DD CARDS).        Y02668
         DROP  R5                                                Y02668
         BZ    EAWRITES  NO,THEN DD CARDS FOLLOW FOR STEP        Y02668
         CLI   E1(R3),C'*'         IS THIS PGM=*. ?             YM00365
         BE    EAWRITES         YES.  DO NOT ZERO NEXT SOIT PTR YM00365
         LA    R5,SIOT     LOAD ADDRESS OF CURRENT SIOT.         Y02668
         USING INDMSIOT,R5                                       Y02668
         XC    SCTPSIOT(MVFOUR),SCTPSIOT                         Y02668
*              ZERO THE NEXT SIOT POINTER TO SIGNAL LAST SIOT    Y02668
*              FOR THE STEP.                                     Y02668
         DROP  R5                                                Y02668
         SPACE
EAWRITES DS    0H    WRITE NEXT SIOT/JFCB OUT                    Y02668
         LA    R5,E4     4 IN REGISTER 5 INDICATES WRITE,ASSIGN. Y02113
         SPACE
         BAL   RE,EARWA  WRITE AND ASSIGN SIOT AND ITS JFCB.     Y02113
         SPACE
         BCT   R6,EAPGM008  CONTINUE READING AND CHAINING UNTIL  Y02113
*              CALCULATED NUMBER OF SIOTS HAS BEEN PROCESSED.    Y02113
*
         OC    EATEMP3(MVFOUR),EATEMP3 WAS A JOBCAT SIOT FOUND   Y02113
*              DURING THE READ,CHAIN,WRITE PROCESS?              Y02113
         BZ    EAPGM009  NO,DO NOT SET UP JOBCAT POINTERS.       Y02113
         MVC   SCT+SCTPCAT-INSMSCT(MVFOUR),EATEMP3  MOVE IN      Y02113
*              FIRST SIOT POINTER FOR STEPCAT                    Y02113
         OI    SCT+SCTSTYPE-INSMSCT,SCTJSCAT  TURN ON JOBCAT BIT Y02113
*
EAPGM009 DS    0H                                                Y02668
         TM    SWD,FEXRCV  IS THIS THE FIRST STEP FOR THE JOB.   Y02113
         BZ    EAPGM22     YES,PROCESS FIRST STEP LOGIC.         Y02113
         B     EAPGM5      NO,FIRST STEP ALREADY ENCOUNTERED.    Y02113
*
EAPGM010 DS    0H                                                Y02668
         TM    JCATSWZ,JCATSW    DOES A JOBCAT EXIST?            Y02113
         BZ    EAPGM011    NO,NO CHAINING OF JOBCAT OR JOBLIB.   Y02113
         L     R5,TEXTBUFP        LOAD POINTER TO EXEC CARD TEXT Y02113
         USING TEXT,R5                                           Y02668
         TM    STREINDC,ETXSTPCT   DOES STEP HAVE A STEPCAT DD?  Y02668
         DROP  R5                                                Y02668
         BO    EAPGM011            YES,IGNORE JOBCAT CHAINING.   Y02113
*        JOBCAT EXISTS,START CHAINING FROM FIRST JOBCAT SIOT.    Y02113
         MVC   EATTRSV(MVFOUR),TJOBCAT SET UP TO CHAIN FROM FIRSTY02113
         B     EAPGM006   GET JOBCAT COUNT AND READ,CHAIN,WRITE. Y02113
*
EAPGM011 DS    0H                                                Y02668
*        NO JOBCAT OR JOBLIB SIOTS ARE TO BE CHAINED FROM THE    Y02113
*        SCT.INITIALIZATION HAS BEEN DONE.                       Y02113
*                                                                Y02113
         XC    DDINTNO(2),DDINTNO   NO. CLEAR NBR SIOTS IN IWA.  Y02668
         LA    R5,WAEXCPFX         GET SAVED EXEC PFX BASE       Y02668
         USING TEXT,R5             SET ADDRESSABILITY            Y02668
         TM    STREINDC,ETXNODD    ANY DD'S IN THIS STEP?        Y02668
         DROP  R5                                                Y02668
         BO    EAPGM009            YES  DON'T SET SIOT PTR       Y02668
         MVC   SCT+SCTFSIOT-INSMSCT(MVFOUR),TSIOT  PUT NEXT SIOT Y02113
*              AS FIRST SIOT TO START CHAINING STEP'S DD CARDS.  Y02113
         B     EAPGM009 TEST FOR FIRST STEP AND CONTINUE.        Y02113
         SPACE
EAPGM22  DS   0H                                                 Y02113
         TM    SWH,CPSTPFL        FLUSHING TO A SPECIFIC STEP      AACA
         BZ    EAPGM4             NO. CONTINUE                     AACA
*                                                                  AACA
         L     RF,EAGETKEP        RESTORE GET KEY/POS ADDRESS.     AACA
EAPGM4   DS    0H
         OI    SWD,FEXRCV         SET FIRST EXEC RECVD THIS JOB SWITCH.
*
*   CHECK FOR OVERRIDES.
EAPGM5   DS    0H
*
*   PARM O'RIDE CHECK.
*
         TM    SWF,ORPARMOR       CHECK PARM O'RIDE.
         BO    EAPGM5A            YES. GO TO SWITCHES SET.
         SPACE
         XC    SCT+SCTXBTTR-INSMSCT(CLTHREE),SCT+SCTXBTTR-INSMSCT O106
*                                      NO, ZERO PARM TTR          O106
         XC    SCT+SCTSEXEC-INSMSCT(CLTWO),SCT+SCTSEXEC-INSMSCT   O106
*                                      CLEAR LENGTH OF PARM FIELD O106
         B     EAPGM6             GO TO CHECK COND O'RIDE.
EAPGM5A  DS    0H
         OI    SWF,ORPARMBL       PARM BLOCK ON.
         NI    SWF,FF-ORPARMOR    PARM O'RIDE OFF.
*
*   COND O'RIDE CHECK.
*
EAPGM6   DS    0H
         TM    SWF,ORCONDOR       COND O'RIDE ON.
         BO    EAPGM7             YES. GO TO TIME O'RIDE CHECK.
         XC    SCT+SCTSDPCD-INSMSCT(CL48),SCT+SCTSDPCD-INSMSCT    O106
*                                      NO, ZERO COND FIELDS IN SC<O106
*
*   TIME O'RIDE CHECK.
*
EAPGM7   DS    0H
         TM    SWF,ORTIMEOR       TIME O'RIDE ON.
         BO    EAPGM7A            YES. GO TO SET TIME SWITCHES.
         TM    SWF,ORTIME0        NO. IS TIME ZERO ON.
         BO    EAPGM7B            YES. GO TO ZERO STEP TIME IN SCT.
         B     EAPGM8             GO TO CHECK ACCT O'RIDE.
EAPGM7A  DS    0H
         OI    SWF,ORTIME0        TIME ZERO ON.
         TM    SWH,CPSTPFL             STEP FLUSH SW ON          A30886
         BO    EAPGM8                  YES,TIME FROM PRIOR SCT   A30886
         NI    SWF,FF-ORTIMEOR    TIME O'RIDE OFF.
         B     EAPGM8             GO TO CHECK ACCT O'RIDE.
EAPGM7B  DS    0H
         XC    SCT+SCTSTIME-INSMSCT(CLTHREE),SCT+SCTSTIME-INSMSCT O106
*                                      ZERO STEP EXECUTION TIME   O106
*                                      IN SCT                     O106
*
*   ACCT O'RIDE CHECK.
*
EAPGM8   DS    0H
         TM    SWF,ORACTOR        ACCT O'RIDE ON.
         BZ    EAPGM8A            NO. GO TO CHECK REGION O'RIDE.
         TM    EASW2,EAEACCTE          IS ACCT=  SWITCH SET ON   A22206
         BZ    EAPGM85                 NO, BR TO CREATE A ACT    A22206
         NI    EASW2,FF-EAEACCTE       TURN OFF ACCT=  SWITCH    A22206
         MVC   SCT+SCTAFACT-INSMSCT(E4),TACT                 A22206O106
***  MOVE TTR OF OVERRIDE ACT TO SCT FOR FIRST PROCSTEP ONLY.    A38608
         B     EAPGM8A                 BR TO REGION O'RIDE CHECK A22206
EAPGM85  DS    0H                                                A22206
***   FOR REMAINING PROCSTEPS,READ OVERRIDE ACT,OBTAIN NEXT      A38608
***   AVAILABLE TTR FOR NEW ACT,CHAIN NEW ACT TO PROCSTEP'S      A38608
***   SCT,AND WRITE COPY OF OVERRIDE ACT AS PROCSTEP'S ACT.      A38608
         LA    R7,QPARM                QMGR PARAMETER AREA       A22206
         USING IOPARAMS,R7                                       A22206
         L     R6,QMPCL                QMPCA ADDRESS             A22206
         LA    R5,EAAUXWK              AUX. WORKAREA ADDRESS     A22206
         ST    R5,0(R6)                TO QMPCA                  A22206
         MVC   4(4,R6),TACT            MOVE ACT TTR TO QMPEX     A22206
         MVI   QMPOP,QMREAD            INDICATE READ FUNCTION    A22206
         L     R5,EAVHQ                IEFVHQ ADDRESS            A22206
         BALR  RE,R5                   LINK TO QMGR TO READ      A22206
         MVC   E4(E4,R6),TNEXT       MOVE NEXT AVAILABLE TTR TO  A38608
*                                    QMPEX FOR WRITE.            A38608
         MVC   SCT+SCTAFACT-INSMSCT(E4),TNEXT CHAIN TO SCT       A38608
         LA    R5,EAAUXWK              AUX. WORKAREA ADDRESS     A22206
         USING ACTDSKAD,R5                                       A22206
         MVC   ACTDSKAD(E4),TNEXT      UPDATE SELF TTR NEW ACT   A38608
         MVI   ACTIDENT,ACTID        SET SWA BLOCK ID FOR ACT  @ZA08776
         L     R5,EAVHQ                IEFVHQ ADDRESS            A22206
         BALR  RE,R5                   LINK TO QMGR TO WRITE/ASN A22206
         MVC   TNEXT(4),0(R6)          UPDATE TNEXT TTR          A22206
*   FALL THRU TO EAPGM8A
*
*   REGION O'RIDE CHECK.
*
EAPGM8A  DS    0H
         TM    SWF,ORREGOR        REGION O'RIDE ON.
         BO    EAPGM8B            YES. GO TO SET EXEC REGION FLAG.  354
         XC    SCT+SCTMSSZE-INSMSCT(E2),SCT+SCTMSSZE-INSMSCT     Y02668
*                                      NO, ZERO REGION SIOT       O106
         B     EAPGM8H            GO TO CONTINUE CHECK           Y02670
EAPGM8B  DS    0H                                                   354
         OI    EASW2,EAREGION     TURN ON REGION SPECIFIED FLAG.
*                                                                Y02670
*   DYNAMNBR O'RIDE CHECK                                        Y02670
*                                                                Y02670
EAPGM8H  DS    0H                                                Y02670
         TM    SWG,ORDYNMOR       DYNAMNBR O'RIDE ON?            Y02670
         BO    EAPGM8I            YES, CONTINUE                  Y02670
         XC    SCT+SCTNIUSL-INSMSCT(E2),SCT+SCTNIUSL-INSMSCT     Y02670
*                                 CLEAR DYNAMNBR FIELD           Y02670
         B     EAPGM8M                                          YM00368
EAPGM8I  DS    0H                                                Y02670
         OI    EASW2,EADYNM       TURN ON DYNAMNBR FLAG          Y02670
*                                                               YM00368
*    PERFORM O'RIDE CHECK                                       YM00368
*                                                               YM00368
EAPGM8M  DS    0H                                               YM00368
         TM    SWG,ORPRFMOR       PERFORM O'RIDE ON?            YM00368
         BO    EAPGM8L            YES GO SET PERFORM EXEC FLAG  YM00368
         XC    SCT+SCTPRFMF-INSMSCT(E1),SCT+SCTPRFMF-INSMSCT    YM00368
         B    EAPGM8C             CONTINUE                      YM00368
EAPGM8L  DS    0H                                               YM00368
         OI    EASW2,EAPRFM       SET EXEC PERFORM FLAG         YM00368
*
*   ADDRSPC O'RIDE CHECK.                                        Y01029
*
EAPGM8C  DS    0H                                                Y01029
         TM    SWF,ORADDROR          ADDRSPC OVERRIDE ON?        Y01029
         BO    EAPGM8D               YES, SET EXEC ADDRSPC FLAG  Y01029
         NI    SCT+SCTSSTAT-INSMSCT,FF-EAADDRBT                  Y01029
*                                 NO, CLEAR ADDRSPC FLAG         Y01029
         B     EAPGM8E            CONTINUE.                      Y01029
EAPGM8D  DS    0H                                                Y01029
         OI    EASW2,EAADDR       SET EXEC ADDRSPC FLAG.         Y01029
*                                                                  AACA
*   RD O'RIDE CHECK                                                AACA
*                                                                  AACA
EAPGM8E  DS    0H
         TM    SWG,ORRDOR         RD O'RIDE ON.                    AACA
         BO    EAPGM8F            YES. CONTINUE                    AACA
         NI    SCT+SCTSSTAT-INSMSCT,CLFLAGS  NO CLEAR FLAGS       O106
*                                                                  I241
*   SDP O'RIDE CHECK                                               I241
*                                                                  I241
EAPGM8F  DS    0H                                                  I241
         TM    SWG,ORSDPOR         SDP O'RIDE ON                   I241
         BO    EAPGM8G             YES, CONTINUE                   I241
         OI    SCT+SCTSDP-INSMSCT,INIT1   INITIALIZE FIELD        O106
         NI    SCT+SCTSDP-INSMSCT,INIT2   INITIALIZE FIELD        O106
         NI    SCT+SCTSDP-INSMSCT+DISPLONE,INIT3 INIT FIELD       O106
         OI    SCT+SCTSDP-INSMSCT+DISPLONE,INIT4 INIT FIELD       O106
EAPGM8G  DS    0H                                                  I241
*                                                                  I241
*   MOVE STEPNAME (OR BLANKS) TO SCT.
*
         MVC   SCT+SCTSNAME-INSMSCT(MVEIGHT),EASNSV STEPNAME TO SCTO106
*
*   LINK TO TEST & STORE. CHECK FOR *. - SET EAPGMSDF FLAG IN LWA.
*        IF NOT *.- CHECK PGMNM FOR 8 CHAR & ALPHA & MVC TO SCT.
*        AND SET EAPGMEF IN LWA.
*
         BALR  RE,R9              LINK TO TEST & STORE
         SPACE
         TM    EASW1,EAPGMSDF     TEST FOR *.
         BZ    EAPGM9             NO. GO TO GET NEXT KEY.
*
*   PGM=*.  LINK TO SEARCH DICTIONARY ROUTINE.  R1 = PTR TO DICT. ENTRY
*
         BALR RE,RF               GET STEPNAME.
         SPACE
         L     R6,EASEARCH
         BALR RE,R6               LINK TO SEARCH DICTIONARY.
         SPACE
         MVC   EATTRSV(3),2(R1)   MOVE SIOT TTR TO TEMP SAVE AREA.
         SPACE
*
*   LINK TO READ IN PGM= *. SIOT.   ASSIGN A NEW TTR.
*
         SR    R5,R5              SET R5 FOR READ.
         BAL   RE,EARWA           LINK TO QMGR READ INTERFACE.
         L     R5,EAVDBSD         ADDR OF DSENQ TABLE ROUTINE.   Y02668
         BALR  RE,R5              CHECK DSNAME IN DSENQ TABLE    Y02668
         SPACE
         LA    R4,SIOT            SIOT ADDRESSING.
         USING INDMSIOT,R4
         MVC   SCT+SCTGOTTR-INSMSCT(MVTHREE),EATEMP1  SAVE TTR OF O106
*                                      REF SIOT                   O106
         OC    SCT+SCTFSIOT-INSMSCT(MVFOUR),SCT+SCTFSIOT-INSMSCT       *
                                   1ST SIOT PTR INITIALIZED?    YM01562
         BNZ   EAPGM8K       FIRST SIOT PTR INIT,CONTINUE...    YM00365
         MVC   SCT+SCTFSIOT-INSMSCT(MVTHREE),SIOTDSKA MOVE SIOT YM01562
*              SVA TO FIRST SIOT PTR IN SCT.                    YM01562
EAPGM8K  DS    0H                                               YM00365
         LA    R5,WAEXCPFX   LOAD ADDRESS OF EXEC PREFIX.       YM01562
         USING TEXT,R5                                          YM01562
         TM    STREINDC,ETXNODD    ANY DD CARDS IN STEP ?       YM01562
         DROP  R5                                               YM01562
         BZ    EAPGM8J       YES,DON'T ZERO NEXT SIOT PTR...    YM01586
         XC    SCTPSIOT(MVFOUR),SCTPSIOT    ZERO NEXT SIOT PTR, YM01562
*              BECAUSE READ ROUTINE INITIALIZED IT WITH TNEXT+4 YM01562
EAPGM8J  DS    0H                                               YM01562
         OI    SCT+SCTSTYPE-INSMSCT,GOSTEP  SCTGOSTP IN SCT ON    O106
         SR    R2,R2
         LA    R3,1
         LH    R2,SCT+SCTLALOC-INSMSCT                           Y02668
         AR    R2,R3              *    ADD ONE TO SCTLALOC.
         STH   R2,SCT+SCTLALOC-INSMSCT                           Y02668
         LH    R2,DDINTNO         *                              Y02668
         AR    R2,R3              *    ADD ONE TO DDINTNO.       Y02668
         STH   R2,DDINTNO         *                              Y02668
         STH   R2,SCTDDINO        SET DD INTERNAL NBR IN SIOT.   Y02668
         MVC   SCTDDNAM(8),EAPGMSD MOVE 'PGM=*.DD' TO DDNAME FIELD.
         NI    SCTSBYT2,SCTUNLBD+SCTRECVD                        A32757
         NI    SCTSBYT1,SCTDUMMY                                 A32757
*
*   WRITE AND ASSIGN SIOT   UPDATE TNEXT.
*
         LA    R5,4               SET R5 FOR WRITE & ASSIGN.
         BAL   RE,EARWA           LINK TO QMGR W&A INTERFACE.
*
*   GET NEXT KEYWORD.
*
         BALR  RE,RF              *    MAKE GET ROUTINE STEP THRU TO
         BALR  RE,RF              *         END OF PGM=*. PARAMETERS.
EAPGM9   DS    0H
         BALR  RE,RF              LINK TO GET KEY.
EAPGM10  DS    0H
         SPACE
         MVI   MSGSEC,EAR54       - ERROR - PGM FIELD FORMAT ERROR.
         B     EACLEANP           GO TO FAIL JOB & PUT OUTMSG.
         SPACE
EAPGM11  DS    0H                                                   438
         MVI   MSGKEY,EXECK       SET SECONDARY ERROR MSG TO EXEC.  438
         B     EAPGM10            GO SET FORMAT ERROR.              438
         SPACE 2
EAMVC2   MVC   EAREGSV+4(1),EASNSVL    MOVE NAME OF STEP TO DICT BUILD.
         EJECT
         EJECT
***********************************************************************
*                                                                     *
*              ACCT/ACCT. KEYWORD ROUTINE.                            *
*                                                                     *
***********************************************************************
EAACTP   DS    0H                 (ACCT.) KEYWORD.
         SPACE
         BAL   RE,EAORIDE         LINK TO UPDATE O'RIDE TABLES AND SET
*                                      ACT O'RIDE FLAG IN TABLE.
         BALR  RE,RF              LINK TO GET 1ST ACCT FIELD.
         L     R6,TNUM            R6 (CNTR2) MAINTAINS TOTAL LENGTH 220
         BCTR  R6,0               EACH ACCNT FIELD + NBR ACCT FLDS. 220
         B     EAACT2             GO TO MOVE ACTNG INFO TO ACT.
         SPACE 2
EAACTE   DS    0H                 (ACCT) KEYWORD.
         SPACE
         L     R6,TNUM            R6 (CNTR2) = TOTAL LENG ACT FLD.  220
         TM    SWE,PRCV           IS PRIME PROC BUFFER SW ON.
         BZ    EAACT1             NO.  GO TO CHECK ACCT ORIDE SW.
         OI    SWF,ORACTOR        YES.  PUT ON ACT O'RIDE SW.
         OI    EASW2,EAEACCTE          SET ACCT=  SWITCH         A22206
         B     EAACT2             GO TO MOVE ACTNG INFO TO ACT.
         SPACE
EAACT1   DS    0H
         TM    SWF,ORACTOR        IS ACT O'RIDE FLAG ON.
         BZ    EAACT2             NO.  GO TO MOVE ACTNG INFO TO ACT.
         OI    EASW1,EAACTORF     SET FLAG TO INDICATE O'RIDE FLAG ON.
*
*   ACCOUNTING INFORMATION TO BE MOVED TO ACT.
*
EAACT2   DS    0H
         LA    R1,ACT             STEP ACT ADDRESS.
         XC    0(176,R1),0(R1)    CLEAR ACT.
         LA    R7,ACTJNFLD-ACTDSKAD+1(R1)   ACT FLD ADDRESS TO R7.
         SR    R5,R5         R5 = CNTR1. - NBR ACTNG FIELDS.
EAACT3   DS    0H
         AR    R6,R2              INCREMENT CNTR 2 BY ACTNG FLD LEN.
         LA    R0,144
         CLR   R6,R0              DOES ACCTNG INFO EXCEED 144 BYTES.
         BH    EAACT4A            YES. GO TO SET ERROR MESSAGE.
         SPACE
         LTR   R2,R2              IS THIS A NULL PARAMETER.
         BZ    EAACT4             YES. GO TO CHECK FOR LAST PARAM.
         SPACE
         EX    R2,EAACTMV1        MOVE ACCOUNTING INFO TO ACT.
         SPACE
EAACT4   DS    0H                                                   220
         LA    R5,1(R5,0)         ADD ONE TO CNTR /.
         LA    R7,1(R7,R2)        POINT TO NEXT ACT STORE POSITION.
         CLC   TNUM(4),TCT        ACCTNG FIELDS COMPLETED.
         BE    EAACT5             YES. GO TO SET NBR ACT FIELDS.
         SPACE
         BALR  RE,RF              GET NEXT ACCNTG INFO.
         SPACE
         B     EAACT3             GO TO CHECK NEXT ACCTNG INFO.
         SPACE
*   ERROR - ACTNG FIELD EXCEEDS 144 CHARACTERS.
EAACT4A  DS    0H
         MVI   MSGSEC,EAR45       MOVE MSG NBR TO IWA.
         B     EAERRTN            GO TO ERROR RETURN.
         SPACE
EAACT5   DS    0H
         STC   R5,ACTJNFLD-ACTDSKAD(R1)     STORE NBR ACT FLDS.
         SPACE
         TM    EASW1,EAACTORF     WAS THIS AN OVERRIDE ACT.
         BO    EAACTXIT           YES. GO TO GET NEXT KEY.
*
*   PUT ACT IN Q.  WRITE AND ASSIGN.
*
         LA    R7,QPARM           QMANAGER PARAMETER AREA.
         USING IOPARAMS,R7
         L     R6,QMPCL           QMPCA ADDRESS TO R6.
         ST    R1,0(R6)           ACT ADDRESS TO QMPCA.
         MVC   4(4,R6),TNEXT      TTR TO QMPEX.
         MVC   0(3,R1),TNEXT      TTR TO ACT.
         MVI   3(R1),ACTID        SET ACT ID.
         SPACE
         L     RF,EAVHQ           IEFVHQ ADDRESS TO R15.
         BALR  RE,RF              LINK TO QMANAGER INTERFACE.
         SPACE
         L     RF,EAGETKEP        RESTORE GET KEY/POS ADDRESS.
         SPACE
         TM    EASW1,EAPGMSDF+EAPGMEF  IS THIS PGM= OR PGM=*.     17583
         BZ    EAACT6             NO. GO TO CHECK FOR ACT./ACT.
         MVC   SCT+SCTAFACT-INSMSCT(MVFOUR),TNEXT  YES, MOVE ACT  O106
*                                      TTR TO SCT                 O106
         B     EAACT8             GO TO UPDATE TNEXT.
EAACT6   DS    0H
         CLI   MSGKEY,ACCTPEK     IS THIS AN ACT. KEY.
         BNE   EAACT7             NO (ACT) GO TO MOVE ACT TTR TO IWA.
         LA    R4,EAORTABL        O'RIDE TABLE ADDRESSING.
         USING ORTABLE,R4
         MVC   ORACTTTR(3),TNEXT  (ACT.)-MOVE ACT TTR TO O'RIDE TABLE.
         B     EAACT8             GO TO UPDATE TNEXT.
         SPACE
EAACT7   DS    0H
         MVC   TACT(4),TNEXT      (ACT) MOVE ACT TTR TO TACT OF IWA.
EAACT8   DS    0H
         MVC   TNEXT(4),0(R6)     UPDATE TNEXT.
EAACTXIT DS    0H
         BALR  RE,RF              GO GET NEXT KEY.
         SPACE 2
EAACTMV1 MVC   0(1,R7),0(R3)      ACTNG FIELD & LENGTH TO ACT. EXECUTED
         EJECT
***********************************************************************
*                                                                     *
*              PARM/PARM. KEYWORD ROUTINE.                            *
*                                                                     *
***********************************************************************
         SPACE
EAPARMP  DS    0H                 (PARM.) KEYWORD.
         SPACE
         BAL   RE,EAORIDE         LINK TO UPDATE O'RIDE TABLES AND SET
*                                      PARM O'RIDE FLAG IN TABLE.
         BALR  RE,RF              LINK TO GET PARM FIELD.
         SPACE
         MVC   EAORTABL+ORPARM-ORTABLE(3),TNEXT  SET UP TTR FOR PARM X
         LA    R5,EAORTABL+ORPARMSZ-ORTABLE PARM SIZE ADDR TO R5.
         B     EAPARM2A           GO TO ENTER PARM IN O'RIDE TABLE.
         SPACE 2
EAPARME  DS    0H                 (PARM) KEYWORD.
         SPACE
         TM    SWE,PRCV           PRIME PROCEDURE BUFFER.
         BO    EAPARM1            YES. GO TO PUT PARM O'RIDE ON IN IWA.
         SPACE
         TM    SWF,ORPARMBL       IS PARM BLOCK SET.
         BZ    EAPARM2            NO.  GO TO ENTER PARM IN SCT.
         B     EAPARM4            YES. GO TO GET NEXT KEY.
         SPACE
EAPARM1  DS    0H
         OI    SWF,ORPARMOR       TURN ON PARM O'RIDE FLAG.
EAPARM2  DS    0H
         MVC   SCT+SCTXBTTR-INSMSCT(MVTHREE),TNEXT  SET UP TTR FOR O106
*                                      PARM EXTENSION             O106
         LA    R5,SCT+SCTSEXEC-INSMSCT ADDR OF PARM SIZE SLOT IN  O106
*                                      SCT                        O106
EAPARM2A DS    0H
         SR    R6,R6              SET R6 FOR LENGTH OF PARM FIELD.
         XC    EAAUXWK(176),EAAUXWK     CLEAR PARM TABLE           AACA
         MVC   EAAUXWK(3),TNEXT         TTR TO PARM TABLE          AACA
         MVI   EAAUXWK+3,EAPXID   MOVE IN PARM EXT ID              AACA
         LA    R7,EAAUXWK+4                                        AACA
         NI    EASW1,FF-EAPARMF1  TURN OFF POSIBLE PREVIOUS BYPASS SW.
EAPARM2B DS    0H
         AR    R6,R2              R6 = LENGTH OF PARM FIELD.
         LA    R0,100             MAX LENGTH=100                   AACA
         CLR   R6,R0              DOES PARM FIELD EXCEED MAXIMUM.
         BH    EAPARM3            YES. GO TO SET ERROR MESSAGE.
         SPACE
         TM    EASW1,EAPARMF1     BYPASS STORE SWITCH ON.
         BO    EAPARM2D           YES. GO TO CHECK LENGTH & GET KEY.
         SPACE
         LTR   R2,R2              NULL PARAMETER.
         BZ    EAPARM2C           YES. GO TO CHECK OF FIELD.
         SPACE
         BCTR  R2,0
         EX    R2,EAPARMV1        MOVE PARM FIELD TO TABLE.
         LA    R7,1(R2,R7)         POINT TO NEXT STORAGE LOC      RE511
         SPACE
EAPARM2C DS    0H
         CLC   TNUM(4),TCT        END OF PARM FIELD.
         BE    EAPARM2E           YES. GO TO MOVE IN PARM FIELD LENGTH.
         SPACE
         MVI   0(R7),C','         RESTORE COMMA.
         LA    R7,1(0,R7)         POINT TO NEXT STORE LOCATION.
         SPACE
EAPARM2D DS    0H
         LA    R6,1(0,R6)         INDEX R6 FOR COMMA COUNT.
         SPACE
         BALR  RE,RF              LINK TO GET NEXT PARAM/KEY.
         SPACE
         B     EAPARM2B           GO TO ERROR CHECK & STORE PARM FIELD.
         SPACE
EAPARM2E DS    0H
         ST    R6,EATEMP1         STORE PARM FIELD LENGTH INTO SCT.
         MVC   0(2,R5),EATEMP1+2       OR O'RIDE TABLE.
         LA    R7,QPARM                                            AACA
         USING IOPARAMS,R7                                         AACA
         L     R6,QMPCL                 REMOTE LIST ADDRESS        AACA
         LA    R5,EAAUXWK               PARM TABLE ADDRESS         AACA
         ST    R5,0(R6)                 PARM ADDR TO REMOTE LIST   AACA
         MVC   4(4,R6),TNEXT            TTR TO REMOTE LIST         AACA
         SPACE
         L     R5,EAVHQ                 LINK TO IEFVHQ             AACA
         BALR  RE,R5                                               AACA
         SPACE
         MVC   TNEXT(4),0(R6)           REPLACE TNEXT              AACA
         BALR  RE,RF              GO GET NEXT KEY.
         SPACE
EAPARM3  DS    0H
         MVI   MSGSEC,EAR56       PARM FIELD FORMAT ERROR.
         B     EACLEANP
         SPACE
EAPARM4  DS    0H
         SR    R6,R6              SET R6 FOR LENGTH OF PARM FIELD.
         OI    EASW1,EAPARMF1     SET PARM STORE BYPASS SWITCH.
         B     EAPARM2B           GO TO STEP THRU PARM FIELDS.
         SPACE 2
EAPARMV1 MVC   0(1,R7),1(R3)      PARM FIELD TO SCT/O'RIDE (EXECUTED).
         EJECT
***********************************************************************
*                                                                     *
*              TIME./TIME KEYWORD ROUTINE.                            *
*                                                                     *
***********************************************************************
         SPACE
EATIMEP  DS    0H                 (TIME.) KEYWORD.
         SPACE
         BAL   RE,EAORIDE         LINK TO O'RIDE ROUTINE TO UPDATE
*                                      TABLE & TURN ON TIME O'RIDE FLAG
         BALR  RE,RF              LINK TO GET TIME FIELD.
         B     EATIME2            GO TO CONVERT TIME.
         SPACE 2
EATIMEE  DS    0H                 (TIME) KEYWORD.
         SPACE
         TM    SWE,PRCV           PRIME PROC BUFFER.
         BZ    EATIME1            NO. GO TO CHECK FOR TIME 0.
         OI    SWF,ORTIMEOR       YES. PUT ON TIME O'RIDE FLAG IN IWA.
         B     EATIME2            GO TO CONVERT TIME.
EATIME1  DS    0H
         TM    SWF,ORTIME0        TIME ZERO ON.
         BO    EATIME4A           YES. GO TO GET NEXT KEY.
*  FALL THROUGH TO CONVERT TIME.                                YM01546
*
EATIME2  DS    0H
*
*   CONVERT (MINS,SECONDS) TO 100THS OF SECONDS.
         XC    EATEMP1(8),EATEMP1 ZERO TEMPORARY SLOTS TO SAVE TIMES.
         SPACE
         BALR  RE,R9              CONVERT MINS TO BINARY,MVC TO TEMP1.
         SPACE
         CLC   TNUM(4),TCT        ARE THERE SECONDS TO CONVERT.
         BE    EATIME3            NO. GO TO STORE MINUTES.
         SPACE
         BALR  RE,RF              GET SECONDS.
         SPACE
         BALR  RE,R9              CONVERT SECS TO BINARY, MVC TO TEMP2.
         SPACE
         L     R6,EATEMP2         *
         MH    R6,EA100           *    CONVERT SECS TO 100THS SECS.
         ST    R6,EATEMP2         *
         SPACE
EATIME3  DS    0H
         L     R6,EATEMP1         CONVERT MINUTES TO
         MH    R6,EA6000               100THS SECONDS.
         SPACE
         AL    R6,EATEMP2         ADD SECONDS TO MINUTES.
         SPACE
         ST    R6,EATEMP1         SAVE CONVERTED TIME.
*
*   CHECK FOR (TIME/TIME.).
*
EATIME3A EQU   *                       CHECK FOR (TIME/TIME.).  A49826
*                                                               A49826
         CLI   MSGKEY,TIMEEEK     IS THIS A (TIME) KEY.
         BNE   EATIME4            NO. (TIME.) GO TO MOVE TIME TO O'RIDE
*
*   (TIME) KEY - PUT TIME IN SCT.
*
         MVC   SCT+SCTSTIME-INSMSCT(MVTHREE),EATEMP1+DISPLONE     O106
*                                      MOVE TIME TO SCT           O106
         B     EATIME5            GO TO GET NEXT KEY.
*
*   (TIME.) - PUT TIME IN O'RIDE TABLE.
*
EATIME4  DS    0H
         LA    R6,EAORTABL        O'RIDE PABLE ADDRESS TO R6.
         USING ORTABLE,R6
         MVC   ORMAXTIM(3),EATEMP1+1   MOVE TIME TO O'RIDE TABLE.
         DROP  R6
         B     EATIME5            GO TO GET NEXT KEY.
*
*   TIME ZERO - LINK TO STEP THRU MINS.
*
EATIME4A DS    0H
         BALR  RE,RF              LINK TO STEP THRU MINS.
*
*   TIME EXIT - GET NEXT KEYWORD.
*
EATIME5  DS    0H
         BALR  RE,RF              LINK TO GET NEXT KEY.
*
*   ERROR - GET SHOULD NOT RETURN HERE.  FORMAT ERROR.
*
         MVI   MSGSEC,EAR57       TIME FIELD FORMAT ERROR.
         B     EACLEANP           GO TO CLEANUP.
         EJECT
***********************************************************************
*                                                                     *
*              COND/COND. KEYWORD ROUTINE.                            *
*                                                                     *
***********************************************************************
         SPACE
EACONDP  DS    0H                 (COND.) KEYWORD.
         SPACE
         BAL   RE,EAORIDE         LINK TO O'RIDE ROUTINE TO UPDATE
*                                      TABLE & TURN ON COND O'RIDE FLAG
         BALR  RE,RF              LINK TO GET COND FIELD.
         B     EACOND2            GO TO SET UP PTR TO O'RIDE TABLE.
         SPACE 2
EACONDE  DS    0H                 (COND) KEYWORD.
*
*   CHECK FOR PRIME PROC BUFFER.
*
         TM    SWE,PRCV           IS PRCV ON.
         BO    EACOND1            YES. GO TO SET COND O'RIDE SW IN IWA.
*
*   NOT PRIME PROC BUFFER - CHECK FOR COND O'RIDE SW ON IN IWA.
*
         TM    SWF,ORCONDOR       IS ORCONDOR ON.
         BO    EACOND4            YES. GO TO SET COND STORE BYPASS SW.
*
*   NOT PRIME PROC BUFFER - NOT COND O'RIDE - SET TO STORE INTO SCT.
*        IF PRIME PROC BUFFER - SET TO STORE INTO DUMMY SCT.
*
EACOND0  DS    0H
         LA    R7,SCT+SCTSDPCD-INSMSCT POINT R7 TO SCT DEPENDENCY CODE
*                                          STORE LOCATION.
         B     EACOND3            GO TO PROCESS COND FIELDS.
*
*
*   COND WITH PRCV ON - SET COND O'RIDE SWITCH IN IWA.
*
EACOND1  DS    0H
         OI    SWF,ORCONDOR       SET COND O'RIDE SW IN IWA.
         B     EACOND0            GO TO SET R7 = DUMMY SCT ADDRESS.
*
*   SET R7 TO STORE COND PARAMETERS INTO O'RIDE TABLE.
*
EACOND2  DS    0H
         LA    R7,EAORTABL+ORCONDCD-ORTABLE R7=STORE ADDR IN O'RIDE TAB
*
*   CLEAR OLD COND FIELDS IN SCT (O'RIDE COND FIELDS ALREADY CLEARED)
*   TURN OFF EACONORF - BYPASS STORE FLAG.
*
EACOND3  DS    0H
         XC    0(48,R7),0(R7)     CLEAR OLD SCT COND FIELDS.
         NI    EASW1,FF-EACONORF  TURN OFF BYPASS STORE FLAG.
         SPACE
         B     EACOND5            GO TO PROCESS COND FIELDS.
*
*   COND - PRCV OFF - COND O'RIDE SW ON - SET STORE BYPASS SWITCH.
*
EACOND4  DS    0H
         OI    EASW1,EACONORF     SET BYPASS STORE SWITCH.
*
*   PROCESS COND PARAMETERS - EVEN,ONLY,(CODE,OPERATOR,STEPNAME.   HW16
*                                                       PROCSTEP)  HW16
*
EACOND5  DS    0H
         XC    EATEMP1(6),EATEMP1 CLEAR TEMP SAVE FOR DEPENDENCIES.
         MVI   MSGSEC,EAR40       SET ERROR CODE IF EXIT THRU GET
*                                      OCCURS BEFORE COND IS COMPLETE.
         LTR   R2,R2               IS IT NULL PARAMETER            3974
         BNZ   EACOND5A            NO, OK                          3974
*                                  IF THERE IS A NULL PARAMETER,   3974
*                                    THE NUMBER OF SUCH PARAMETERS 3974
*                                    MUST BE ZERO (COND.STEP=BLANK)3974
*                                    OR ONE (COND=BLANK)           3974
         CLI   TNUM1+3,X'01'       IS THE NUMBER OF SUBPARAMETERS  3974
*                                    ZERO OR ONE                   3974
         BH    EAERRTN             NO, COND FIELD FORMAT ERROR     3974
         MVI   MSGSEC,X'00'        CLEAR ERROR CODE                3974
         BALR  RE,RF               GO GET NEXT KEYWORD             3974
EACOND5A EQU   *                                                   3974
*                                                                  HW16
*   CHECK EVEN OR ONLY PARAMETERS, SET INDICATORS IN SCT           HW16
*                                                                  HW16
         CLC   0(5,R3),EAEVEN      TEST FOR EVEN PARAMETER         HW16
         BE    EACOND9B            YES, GO SET SCT EVEN BIT        HW16
*                                                                  HW16
         CLC   0(5,R3),EAONLY      TEST FOR ONLY PARAMETER         HW16
         BE    EACOND9C            YES, GO SET SCT ONLY BIT        HW16
*                                                                  HW16
*   PROCESS (CODE,OPERATOR,STEPNAME.PROCSTEP) PARAMETER            HW16
*                                                                  HW16
*
*   CODE - CVB, CHECK FOR 4095 MAX AND MOVE TO EATEMP1(2).
*
         BALR  RE,R9              LINK TO TEST & STORE CODE.
*
*   CHECK FOR PROPER FORMAT FOR CONDITION FIELDS.
*
         BCTR  R3,0               POINT TO SUBPARAMETER INDICATOR BYTE.
         TM    0(R3),X'80'        IS HIGH ORDER BIT ON.             438
         BZ    EAERRTN            NO.- COND FIELD FORMAT ERROR.
*
*   GET OPERATOR.
*
         BALR  RE,RF              LINK TO GET OPERATOR.
         LTR   R2,R2              IS THERE AN OPERATOR.
         BZ    EAERRTN            NO.  ERROR.
*
*   OPERATOR - CHECK OPERATOR SPELLING AND MOVE HEX BIT PATTERN
*        TO EATEMP1+2(1).
*
         BALR  RE,R9              LINK TO TEST & STORE OPERATOR.
*
*   CHECK FOR STEPNAME.
*
         CLC   TNUM1(4),TCT1      IS THERE A STEPNAME AFTER OPERATOR.
         BE    EACOND17           NO. GO TO PUT IN ZERO TTR.
*
*   GET STEPNAME.
*
         BALR  RE,RF              LINK TO GET STEPNAME.
*
*
*   BLANK 8 CHAR SLOT IN WORK AREA & SAVE STEPNAME (THRU T&S) FOR
*        FUTURE REFERENCE.
*
         MVC   EAREGSV(8),EABLANK BLANK WORK SPACE.
         BALR  RE,R9              LINK TO MOVE STEPNAME TO EAREGSV.
         SPACE
*
*   CHECK FOR STEPNAME.PROCSTEP.
*
         CLC   TNUM1(4),TCT1      DOES PROCSTEP FOLLOW STEPNAME.
         BE    EACOND7            NO. GO TO CHECK PROCEDURE.
*
         OI    EASW1,EACNDF1      INDICATE PROCSTEP FOLLOWS STEP YM4022
*                                                                YM4022
         LA    R0,2               SET UP NBR OF ARGUMENTS FOR    YM4022
*                                 SEARCH.                        YM4022
*     SET UP NBR OF ARGUMENTS, INDICATE SEARCH FOR SCT AND       YM4022
*        LOAD R4 WITH ADDRESS OF SEARCH ROUTINE.
*
EACOND6  DS    0H
         LR    R1,R3              LENGTH PTR TO R1.
         BCTR  R1,0               POINT BYTE BEFORE LENGTH.
         STC   R0,0(R1)           SET NBR OF PARAMETERS.
         OI    SRCHSW1,SRCHF2     INDICATE SCT SEARCH.
         L     R4,EASEARCH        SEARCH ADDRESS TO R4.
         B     EACOND9            GO TO CHECK BYPASS.
*
*   NO PROCSTEP - CHECK FOR PRCV ON.
*
EACOND7  DS    0H
         CLI   MSGKEY,CONDPEK     IS THIS A (COND.).
         BE    EACOND8            YES. GO TO SET QUALIFYING INDICATOR.
         CLC   EAREGSV(8),EASNSV  IS STEPNAME IN COND FIELD       M1726
*                                 SAME AS NAME OF THIS STEP       M1726
         BE    EAERRTN            YES,FORMAT ERROR IN COND FIELD  M1726
         SPACE
         LA    R0,1               SET NBR PARAMETERS = 1.
         B     EACOND6            GO TO SET UP SEARCH PARAMS.
*
*   STEPNAME ONLY - PRCV ON - INDICATE PROCEDURE STEPNAME IS TO BE
*        USED TO QUALIFY REFER BACK.
*
EACOND8  DS    0H
         OI    EASW1,EACNDF2      SET QUALIFY INDICATOR.
*   FALL THRU FOR NEXT TWO TESTS - TAKE BRANCH TO EACOND10 IF THE
*        BYPASS STORE SWITCH IS NOT ON.
         SPACE
*
*   CHECK FOR BYPASS STORE SWITCH.
*
EACOND9  DS    0H
         TM    EASW1,EACONORF     IS BYPASS SWITCH ON.
         BO    EACOND15           YES. GO TO GET NEXT KEY.
*
*   CHECK FOR (COND.) KEY - SEARCH DICT IF NOT AND MOVE SCT TTR + CODE
*        AND OPERATOR TO SCT. (OR DUMMY SCT).
*
         CLI   MSGKEY,CONDPEK     IS THIS A (COND.).
         BE    EACOND10           YES. GO TO CHECK QUALIFYING STEPNAMES
         SPACE
         BALR  RE,R4              LINK TO SEARCH FOR SCT TTR.
         SPACE
         MVC   EATEMP1+3(3),2(R1) MOVE SCT TTR TO TEMP SAVE.
*
*   MOVE CODE, OPERATOR & TTR TO SCT.
*
EACOND9A DS    0H
         MVC   0(6,R7),EATEMP1    MOVE CODE,OPERATOR & TTR TO SCT.
         LA    R7,6(R7)           INCREMENT SCT STORE POINTER.
         B     EACOND15           GO TO CYCLE THRU AGAIN.
EACOND9B DS    0H                                                  HW16
         OI    EATEMP1,SCTEVEN     SET EVEN INDICATOR IN EATEMP1   HW16
         B     EACOND9D            CONTINUE                        HW16
EACOND9C DS    0H                                                  HW16
         OI    EATEMP1,SCTONLY     SET ONLY INDICATOR IN EATEMP1   HW16
EACOND9D DS    0H                                                  HW16
         CLI   MSGKEY,CONDPEK      O'RIDE IN PROGRESS?             HW16
         BE    EACOND9E            YES, STORE INTO O'RIDE TABLE    HW16
*                                                                  HW16
*   STORE EATEMP1 IN SCT (EIGHTH COND SLOT) - EVEN OR ONLY         HW16
*                                                                  HW16
         TM    EASW1,EACONORF      TEST BYPASS STORE SWITCH        HW16
         BO    EACOND15            IF ON, GET NEXT PARAM/KEY       HW16
*                                  IF OFF, PROCEED                 HW16
         OC    SCT+SCTABCND-INSMSCT(OC6),SCT+SCTABCND-INSMSCT     O106
*                                      IF SLOT IS NON ZERO        O106
*              EITHER TOO MANY COND OR MULTIPLE EVEN'S/ONLY'S      HW16
         BC    7,EAERRTN           GO TO ERROR ROUTINE             HW16
         OC    SCT+SCTABCND-INSMSCT(OC6),EATEMP1                  O106
*                                      EVEN OR ONLY INTO SLOT     O106
         B     EACOND15            GET NEXT PARAMETER / KEY        HW16
EACOND9E DS    0H                                                  HW16
*                                                                  HW16
*   STORE EATEMP1 IN O'RIDE TABLE (EIGHTH COND SLOT) - EVEN OR ONLYHW16
*                                                                  HW16
         OC    EAORTABL+ORCONDCD-ORTABLE+84(12),EAORTABL+ORCONDCD-ORTABX
               LE+84               IF THIS FIELD ALREADY NON-ZERO, HW16
*              EITHER TOO MANY COND OR MULTIPLE EVEN'S/ONLY'S      HW16
         BC    7,EAERRTN           GO TO ERROR ROUTINE             HW16
         OC    EAORTABL+ORCONDCD-ORTABLE+84(1),EATEMP1      PUT    HW16
*                                  EVEN OR ONLY INTO O'RIDE TABLE  HW16
         B     EACOND15            GET NEXT PARAMETER / KEY        HW16
*
*   CHECK FOR REFERENCES WITHIN CALLING PROCEDURE. - IF NOT SEARCH DICT
*
EACOND10 DS    0H
         CLC   EAREGSV(8),EASNSV  IS STEPNAME IN COND FIELD SAME AS
*                                      THE NAME OF THIS STEP.
         BE    EACOND11           YES. GO TO GET PROCSTEP.
         SPACE
         TM    EASW1,EACNDF2      IS STEPNAME TO BE QUALIFIED.
         BO    EACOND14           YES. GO TO QUALIFY SINGLE STEPNAME.
         SPACE
         BALR  RE,R4              LINK TO SEARCH DICTIONARY.
         SPACE
         MVC   EATEMP1+3(3),2(R1) MOVE SCT TTR TO TEMP SAVE.
*
*   MOVE CODE, OPERATOR & TTR TO O'RIDE TABLE.
*
EACOND1A DS    0H
         MVC   0(6,R7),EATEMP1    MOVE CODE,OPERATOR & TTR TO O'RIDE.
         B     EACOND13           GO TO INCREMENT O'RIDE PTR.
*
*   GET PROCSTEP AND WITHIN THIS PROCEDURE.
*
EACOND11 DS    0H
         TM    EASW1,EACNDF1      IS THE NAME OF THIS PROCEDURE THE
*                                      ONLY NAME IN COND FIELD.
         BZ    EACOND14            GO TO QUALIFY SINGLE NAME    YA02850
         SPACE
         BALR  RE,RF              GET PROCSTEP.
         NI    EASW1,FF-EACNDF1   TURN OFF EACNDF1.
*
*   STORE PARAMETERS IN ORIDE TABLE.
*
EACOND12 DS    0H
         MVC   11(1,R7),0(R3)     STORE LENGTH.
         MVC   0(3,R7),EATEMP1    STORE CODE & OPERATOR.
         MVC   3(8,R7),1(R3)      STORE STEPNAME.
         LA    RE,EAORTABL        START OF O'RIDE TABLE ADDR TO RE.
         MVC   ORSTEPL-ORTABLE(9,RE),EASNSVL  MOVE PROC STEPNAME TO TAB
*
*   INCREMENT O'RIDE STORE POINTER.
*
EACOND13 DS    0H
         LA    R7,12(R7)          POINT R7 TO NEXT O'RIDE STORE.
         B     EACOND15           GO TO CYCLE THRU AGAIN.
*
*   SET HIGH ORDER BIT OF LENGTH BYTE TO INDICATE QUALIFYING CONDITONAL
*        STEPNAME.
*
EACOND14 DS    0H
         OI    0(R3),X'80'        SET HIGH ORDER BIT OF LENGTH.
         B     EACOND12           GO TO STORE INTO O'RIDE TABLE.
*
*   SET UP PARAMETERS TO GET NEXT COND OR NEXT KEY.
*
EACOND15 DS    0H
         TM    EASW1,EACNDF1      IS THERE A PROCSTEP.           YM4022
         BZ    EACOND16           NO GO TO CLEAR FLAGS           YM4022
         BALR  RE,RF              YES POINT TO PROCSTEP          YM4022
EACOND16 DS    0H                                                YM4022
         ST    RB,TPDTP           FORCE TEST & STORE TO RE-CYCLE.
         NI    EASW1,FF-EACNDF1-EACNDF2   TURN OFF HSKPNG FLAGS.
         MVI   MSGSEC,X'00'       CLEAR ERROR MSG SLOT.
         BALR  RE,RF              GET NEXT KEY OR NEXT COND.
         B     EACOND5            COND - GO TO RE-CYCLE.
*
*   NO STEPNAME AFTER OPERATOR - INDICATE DEPENDENCY ON COMPLETION
*        CODES OF ALL PREVIOUS STEPS.
*
EACOND17 DS    0H
         TM    EASW1,EACONORF     ARE WE BYPASSING STORE.
         BO    EACOND15           YES GO TO RE-CYCLE.
         SPACE
         CLI   MSGKEY,CONDPEK      IS THIS A (COND.) KEYWORD       HW16
         BE    EACOND1A           YES. GO TO MOVE CODE, OPERATOR &
*                                           ZERO TTR TO O'RIDE TABLE.
         B     EACOND9A           NOT PROC. GO TO MOVE CODE,OPERATOR &
*                                  ZERO TTR TO SCT
         EJECT
***********************************************************     YM00368
*                                                         *     YM00368
*              PERFORM./PERFORM KEYWORD ROUTINE           *     YM00368
*                                                         *     YM00368
***********************************************************     YM00368
*                                                         *     YM00368
*  THE EXEC PERFORM VALUE IS USED ONLY IF THE PERFORM     *     YM00368
*  KEYWORD WAS NOT SPECIFIED ON THE JOB STMT. IF SPECIFIED*     YM00368
*  THE JOB PERFORM VALUE (OR A DEFAULT IF THE JOB VALUE   *     YM00360
*  NULL OR INVALID) OVERRIDES EXEC PERFORM SPECIFICATIONS.*     YM00368
*                                                         *     YM00368
*  IF THE PERFORM KEYWORD WAS NOT SPECIFIED ON THE JOB    *     YM00368
*  STMT, IEFVJA OBTAINS A DEFAULT VALUE FOR USE BY IEFVEA *     YM00368
*  IN THE EVENT EXEC PERFORM VALUES WERE OMITTED OR       *     YM00368
*  INVALID.                                               *     YM00368
*                                                         *     YM00368
***********************************************************     YM00368
EAPRFMP  DS    0H                                               YM00368
         OI    SWG,ORFLG2SW        SET NEW KEYWORD O'RIDE FLAG. YM00368
         BAL   RE,EAORIDE         LINK TO O'RIDE RTNE TO UPDATE  Y02655
*                                 TABLE & TURN ON PERFORM O'RIDE Y02655
*                                 FLAG                           Y02655
         BALR  RE,RF              LINK TO GET PERFORM FIELD      Y02655
         LA    R7,EAORTABL+ORPRMVAL-ORTABLE POINT TO PERFORM     Y02655
*                                 IN O'RIDE                      Y02655
         B     EAPRFM3                                           Y02655
EAPRFME  DS    0H                 (PERFORM) KEYWORD              Y02655
         TM    SWE,PRCV            STMT INVOKE A PROCEDURE?     YM00368
         BO    EAPRFM1            YES GO TURN ON PERFORM O'RIDE  Y02655
*                                 IN IWA                         Y02655
         TM    SWG,ORPRFMOR       IS IWA O'RIDE FLAG ON?         Y02655
         BZ    EAPRFM2            NO GO ENTER PERFORM INTO SCT   Y02655
         BALR  RE,RF              YES GO GET NEXT KEY            Y02655
EAPRFM1  DS    0H                                                Y02655
         OI    SWG,ORPRFMOR       TURN ON IWA O'RIDE FLAG        Y02655
EAPRFM2  DS    0H                                                Y02655
         LA    R7,SCT+SCTPRFMF-INSMSCT PERFORM ADDR IN SCT       Y02655
EAPRFM3  DS    0H                                                Y02655
         TM    JCT+JCTSTAT2-INJMJCT,JCTPERFM PERFORM ON JOBCARD@ZA10064
         BO    EAPRFM9            YES, BRANCH TO EXIT          @ZA10064
         MVI   EATEMP1,E0         ZERO TEMP STORAGE             YM00368
         MVI   SCT+SCTPRFMF-INSMSCT,E0 ZERO PERFORM FIELD       YM00368
         LTR   R2,R2              PERFORM VALUE SPEC'D?         YM00368
         BZ    EAPRFM7            NO, BYPASS KEY PROCESSING     YM00368
         BALR  RE,R9               GO TO TEST AND STORE.        YM00368
         CLI   MSGSEC,E0           VGT ENTERS MSG CODE IF ERROR.YM00368
         BNE   EAPRFM7             BRANCH ON ERROR.             YM00368
*  IEFVGT WILL ACCEPT VALUES IN THE RANGE OF 0-255.             YM00368
         CLI   EATEMP1,E0         ZERO SPEC'D?                   Y02655
         BE    EAPRFM7             BRANCH YES, ZERO IS INVALID. YM00368
         SR    R1,R1              CLEAR REGISTER                 Y02655
         IC    R1,EATEMP1         LOAD VALUE FOR SYSEVENT        Y02655
         SYSEVENT VERIFYPG                                       Y02655
         L     RF,EAGETKEP        GET KEY ADDRESS                Y02655
*  SRM RETURNS ZERO IN BYTE 2 IF SPECIFIED VALUE IS DEFINED TO  YM00368
*  SYSTEM, OR A DEFAULT VALUE IF SPECIFIED VALUE IS UNDEFINED.  YM00368
         CLM   R1,E2,CONHZERO      ZERO RETURN CODE?            YM00376
         BE    EAPRFM6             BRANCH YES, VALID VALUE.     YM00368
         STCM  R1,E2,EATEMP1       SAVE DEFAULT VALUE.          YM00376
         MVC   E0(E1,R7),EATEMP1  PUT VALUE IN SCT/O'RIDE TABLE  Y02655
         LA    R2,WRNMSG05         PRF VALUE UNDEFINED MSG CODE.YM00368
         B     EAPRFM8             BR TO ISSUE WARNING MSG.     YM00368
EAPRFM6  DS    0H                                               YM00368
         MVC   0(1,R7),EATEMP1     PUT VAL IN SCT/O'RIDE TABLE. YM00368
         BALR  RE,RF               GO GET NEXT KEY.             YM00368
*  ERROR ENTRY - PERFORM VALUE INVALID OR OMITTED.              YM00368
EAPRFM7  DS    0H                                               YM00368
*  PERFORM ERROR.
*  ERROR MAY BE ON EXEC PGM OR EXEC PROC STMT. A WARNING MSG IS YM00368
*  ISSUED AND A DEFAULT VALUE IS UNCONDITIONALLY ENTERED IN     YM00368
*  BOTH THE OVERRIDE TABLE AND THE SCT, TO COVER BOTH CASES.    YM00368
         MVC   EAORTABL+ORPRMVAL-ORTABLE(1),JCT+JCTPRFMF-INJMJCT
*                                  DEFAULT FOR PERFORM.STEP=    YM00368
         MVC   SCT+SCTPRFMF-INSMSCT(1),JCT+JCTPRFMF-INJMJCT     YM00368
*                                  DFLT FOR PERF= ON EXEC PROC  YM00368
         LA    R2,WRNMSG03         PRF VAL INVALID/OMITTED MSG. YM00368
EAPRFM8  DS    0H                                               YM00368
         MVI   MSGKEY,E0          CLEAR SECONDARY MSG FIELD     YM00368
         L     R5,EAVGM            MESSAGE MODULE ADDRESS.      YM00368
         BALR  RE,R5               ISSUE WARNING MSG. JOB IS    YM00368
*                                  NOT FAILED.                  YM00368
EAPRFM9  DS    0H                                               YM00368
         MVI   MSGSEC,0            CLEAR MSG CODE FOR NEXT TIME YM00368
         BALR  RE,RF               GO GET NEXT KEY.             YM00368
         EJECT
************************************************************     Y02670
*                                                          *     Y02670
*        DYNAMNBR./DYNAMNBR KEYWORD ROUTINE                *     Y02670
*                                                          *     Y02670
************************************************************     Y02670
         SPACE
EADYNMP  DS    0H                 (DYNAMNBR.) KEYWORD            Y02670
         OI    SWG,ORFLG2SW       TURN ON NEW O'RIDE KEY FLAG    Y02670
         BAL   RE,EAORIDE         LINK TO O'RIDE ROUTINE TO UP-  Y02670
*                                 DATE TABLE AND TURN ON DYNAMNBRY02670
*                                 O'RIDE FLAG                    Y02670
         BALR  RE,RF              LINK TO GET DYNAMNBR FIELD     Y02670
         LA    R7,EAORTABL+ORDYNVAL-ORTABLE POINT TO DYNAMNBR    Y02670
*                                 IN O'RIDE                      Y02670
         B     EADYNM3                                           Y02670
EADYNME  DS    0H                 (DYNAMNBR) KEYWORD             Y02670
         TM    SWE,PRCV           PRIME PROCEDURE BUFFER?        Y02670
         BO    EADYNM1            YES GO TURN ON DYNAMNBR O'RIDE Y02670
*                                 IN IWA                         Y02670
         TM    SWG,ORDYNMOR       IS O'RIDE FLAG ON IN IWA       Y02670
         BZ    EADYNM2            YES GO TO GET NEXT KEY         Y02670
         BALR  RE,RF              GO GET NEXT KEY                Y02670
EADYNM1  DS    0H                                                Y02670
         OI    SWG,ORDYNMOR       TURN ON IWA O'RIDE FLAG        Y02670
EADYNM2  DS    0H                                                Y02670
         LA    R7,SCT+SCTNIUSL-INSMSCT DYNAMNBR ADDR IN SCT      Y02670
EADYNM3  DS    0H                                                Y02670
         LTR   R2,R2              DYNAMNBR SPEC'D?               Y02670
         BZ    EADYNM5            NO, GO TO GET NEXT KEY         Y02670
         XC    EATEMP1(E2),EATEMP1 ZERO TEMP STORAGE             Y02670
         XC    SCT+SCTNIUSL-INSMSCT(E2),SCT+SCTNIUSL-INSMSCT     Y02670
*                                 CLEAR DYNAMNBR FIELD           Y02670
         BALR  RE,R9              GO TO TEST & STORE             Y02670
         CLI   MSGSEC,E0          ERROR DETECTED?                Y02670
         BE    EADYNM4            NO GO MOVE IN VALUE            Y02670
         MVI   MSGSEC,E0          CLEAR MSG FIELD                Y02670
         MVI   MSGKEY,E0          CLEAR SECONDARY MSG FIELD     YM00369
         LA    R2,WRNMSG04        LOAD WRN MSG FOR VGM          YM00369
         L     R5,EAVGM           GET MSG MODULE ADDR            Y02670
         BALR  RE,R5              GO PRINT MSG                   Y02670
         B     EADYNM5                                           Y02670
EADYNM4  DS    0H                                                Y02670
         MVC   E0(E2,R7),EATEMP1 PUT VALUE IN SCT/O'RIDE TABLE   Y02670
EADYNM5  DS    0H                                                Y02670
         BALR  RE,RF              GO GET NEXT KEY                Y02670
         EJECT
***********************************************************************
*                                                                     *
*              REGION./REGION KEYWORD ROUTINE.                        *
*                                                                     *
***********************************************************************
         SPACE
EAREGP   DS    0H                 (REGION.) KEYWORD.
         SPACE
         BAL   RE,EAORIDE         LINK TO O'RIDE ROUTINE TO UPDATE TAB
*                                      AND TURN ON REGION O'RIDE FLAG.
         BALR  RE,RF              LINK TO GET REGION FIELD.
         SPACE
         LA    R7,EAORTABL+ORREG-ORTABLE POINT AT REGION IN O'RIDE AACA
         B     EAREG3             GO TO ENTER REGION INTO O'RIDE TABLE.
         SPACE 2
EAREGE   DS    0H                 (REGION) KEYWORD.
         SPACE
         TM    SWE,PRCV           PRIME PROCEDURE BUFFER.
         BO    EAREG1             YES. GO TURN ON REGION O'RIDE IN IWA.
         SPACE
         TM    SWF,ORREGOR        IS REGION O'RIDE FLAG ON IN IWA.
         BZ    EAREG2             NO. GO TO ENTER REGION IN SCT.
         BALR  RE,RF              YES. GO GET NEXT KEY.
         SPACE
EAREG1   DS    0H
         OI    SWF,ORREGOR        TURN ON REGION O'RIDE FLAG IN IWA.
EAREG2   DS    0H
         XC    SCT+SCTMSSZE-INSMSCT(E2),SCT+SCTMSSZE-INSMSCT     Y02668
*                                 CLEAR REGION REQ FLDS IN SCT.  A41178
         LA    R7,SCT+SCTMSSZE-INSMSCT ADDR OF REGION SLOT IN SCT O106
         SPACE
EAREG3   DS    0H
         XC    EATEMP2(E2),EATEMP2      ZERO FLAG FIELD          Y01029
         LTR   R2,R2              IS PRIMARY REGION SPECIFIED.     AACA
         BZ    EAREG5             NO. GO TO SET UP LCS.            AACA
EAREG3A  DS    0H                                                  AACA
         LA    R6,0(R2,R3)        POINT TO LAST CHAR. IN REGION FIELD.
         CLI   0(R6),C'K'         IS IT A 'K'.
         BNE   EAPGM10            NO. -FORMAT ERROR (REGION)-  @ZA03866
         SPACE
EAREG4   DS    0H
         BCTR  R2,0               DECREMENT R2 TO GET NBRS ONLY.
         LTR   R2,R2         WAS 'K' ONLY SOECIFICATION?        YA02009
         BZ    EAPGM10       YES,FORMAT ERROR IN REGION FIELD.. YA02009
         BALR  RE,R9              LINK TO CVB AND MVC TO EATEMP1.
         SPACE
         TM    EATEMP2,EAREGION   FIRST PASS ?                   Y01029
         BZ    EAREG4A            YES, MVC INTO SCT/O'RIDE       Y01029
         SPACE
         AH    R5,EATEMP1          NO,ADD H1 TO H0               Y01029
         C     R5,MAXVAL           MAX REGION SPECIFIED?         Y01029
         BH    REGERR              YES, ERROR                    Y01029
         STH    R5,E0(R7)         SCT/O'RIDE REGION SIZE         Y01029
         B     EAREG5             CONTINUE REGION PROCESSING     Y01029
         SPACE
EAREG4A  LH    R5,EATEMP1         H0 - LATER COMPUTE H0 + H1     Y01029
         MVC   E0(E2,R7),EATEMP1  MOVE H0 REGION TO SCT/O'RIDE   Y01029
         OI    EATEMP2,EAREGION   FIRST PASS - H0 SPECIFIED      Y01029
         SPACE
EAREG5   DS    0H
         OI    EASW2,EAREGION     REGION SPECIFIED ON EXEC       Y01029
         BALR  RE,RF              LINK TO GET NEXT KEY.
         SPACE
EAREG6   DS    0H                                                  AACA
         ST    RB,TPDTP           SET PDT TO TOP.                  AACA
         B     EAREG3A            GO TO PROCESS LCS REGION.        AACA
REGERR   MVI  MSGSEC,EAR58        MOVE IN REGION ERROR NUM       Y01029
         B    EAERRTN             PROCESS ERROR MSG              Y01029
         EJECT
***********************************************************************
*                                                                     *
*              ROLL./ROLL KEYWORD ROUTINE.                            *
*                                                                     *
***********************************************************************
EAROLLP  DS    0H                 (ROLL.) KEYWORD.
EAROLLE  DS    0H                 (ROLL) KEYWORD.
         BALR  RE,RF              LINK TO GET NEXT KEY.
         B     EAROLLP                                           Y01029
         EJECT
***********************************************************************
*                                                                    **
*             ADDRSPC./ADDRSPC= KEYWORD ROUTINE                      **
*                                                                    **
***********************************************************************
EAADDRP  DS    0H                 (ADDRSPC.) KEYWORD             Y01029
         SPACE
         BAL   RE,EAORIDE         LINK TO O'RIDE RTN TO UP TAB   Y01029
         BALR  RE,RF              LINK TO GET ADDRSPC FIELD      Y01029
         LA    R7,EAORTABL+ORADDR-ORTABLE                        Y01029
*                                 ADDRSPC LOC IN O;RIDE TAB      Y01029
         B     EAADDR3            PUT ADDRSPC FLAGS IN TAB       Y01029
EAADDRE  DS    0H                 (ADDRSPC) KEYWORD              Y01029
         SPACE
         TM    SWE,PRCV           PRIME PROCEDURE BUFFER         Y01029
         BO    EAADDR1            YES, TURN ON O'RIDE IN IWA     Y01029
         TM    SWF,ORADDROR       ADDRSPC O'RIDE IN IWA ?        Y0102
         BZ    EAADDR2            NO, ENTER ADDRSPC IN SCT       Y01029
         BALR  RE,RF              GET NEXT KEY                   Y01029
EAADDR1  DS    0H
         OI    SWF,ORADDROR       TURN ON ADDRSPC O'RIDE IN IWA  Y01029
EAADDR2  DS    0H                                                Y01029
         LA    R7,SCT+SCTSSTAT-INSMSCT                           Y01029
*                                 ADDRESS OF ADDRSPC FLAG IN SCT
EAADDR3  DS    0H                                                Y01029
         LTR   R2,R2              ADDRSPC KEY SPECIFIED?         Y01029
         BZ    EAGETK             GET  NEXT KEY(NULLIFY)         Y01029
         MVI   EATEMP1,E0         CLEAR TEMP STORAGE             Y01029
         BALR  RE,R9              TEST AND STORE                 Y01029
EAADDR4  DS    0H                                                Y01029
         TM    EATEMP1,EAADDRBT   ADDRSPC = REAL?                Y01029
         BZ    EAADDR6            NO, INDICATE ADDRSPC ON EXEC   Y01029
         L     R3,WANELPTR         ADDRESS OF NEL.               Y02668
         USING EANEL,R3           NEL ADDRESSABILITY             Y01029
         TM    NELOPSW2,NELADSPC  IS THIS A TSO USER ?           Y01029
         BO    EAADRER1           YES, NOT PERMITTED - ERROR MSG Y01029
         DROP  R3
         TM    SWD,JOBADDRF       ADDRSPC SPECIFIED ON JOB ?     Y01029
         BO    EAADDR6            YES, SET ADDRSPC ON EXEC       Y01029
         OI    JCT+JCTSTAT2-INJMJCT,JCTADSPC   SET JCT ADDR = REAL
EAADDR5  DS    0H                                                Y01029
         OC    E0(E1,R7),EATEMP1  SET ADDRSPC INFO IN SCT/O'RIDE TABLE
         SPACE
EAADDR6  DS    0H                                                Y01029
         OI    EASW2,EAADDR       INDICATE ADDRSPC ON EXEC       Y01029
EAGETK   DS    0H                                                Y01029
         BALR  RE,RF              GET KEY                        Y01029
EAADRER1 DS    0H                                                Y01029
         MVI   MSGSEC,EAR62       ADDRSPC=REAL INVALID           Y01029
         MVI   MSGKEY,EXECK       ON EXEC STATEMENT              Y01029
         B     EAERRTN                                           Y01029
EAADRERR DS    0H                                                Y01029
         MVI   MSGSEC,EAR60        REQ. PARM MISSING             Y01029
         B     EAERRTN             GO TO ERROR RTN               Y01029
***********************************************************************
*                                                                 *AACA
*              RD./RD KEYWORD ROUTINE                             *AACA
*                                                                 *AACA
*******************************************************************AACA
EARDP    DS    0H                 (RD.) KEYWORD                    AACA
         SPACE
         BAL   RE,EAORIDE         LINK TO O'RIDE ROUTINE TO UPDATE AACA
*                                 TABLE AND TURN ON RD O'RIDE      AACA
*                                 FLAG.                            AACA
         BALR  RE,RF              LINK TO GET RD FIELD.            AACA
         SPACE
         LA    R7,EAORTABL+ORRD-ORTABLE POINT AT RD FIELD IN TABLE AACA
         B     EARD3              ENTER RD FLAGS IN O'RIDE TABLE   AACA
         SPACE 3
EARDE    DS    0H                 (RD) KEYWORD                     AACA
         SPACE
         TM    SWE,PRCV           PRIME PROCEDURE BUFFER           AACA
         BO    EARD1              YES GO TURN ON RD O'RIDE IN IWA  AACA
         SPACE
         TM    SWG,ORRDOR         RD O'RIDE ON IN IWA.             AACA
         BZ    EARD2              NO. GO TO ENTER RD FLAGS IN SCT. AACA
         BALR  RE,RF              YES. GO TO GET NEXT KEY          AACA
         SPACE
EARD1    DS    0H                                                  AACA
         OI    SWG,ORRDOR         SET RD O'RIDE FLAG IN IWA        AACA
EARD2    DS    0H                                                  AACA
         LA    R7,SCT+SCTSSTAT-INSMSCT POINT AT R0 FLAGS IN SCT   O106
         SPACE 3
EARD3    DS    0H                                                  AACA
         MVI   EATEMP1,X'00'      CLEAR TEMP STORAGE.              AACA
         SPACE
         BALR  RE,R9              LINK TO GT TO SET BITS IN TEMP1  AACA
         SPACE
         OC    0(1,R7),EATEMP1    SET BITS IN SCT/O'RIDE TABLE     AACA
         SPACE
         BALR  RE,RF              LINK TO GK TO GET NEXT KEY       AACA
         EJECT                                                     7777
*******************************************************************I241
*                                                                  I241
*              SDP./SDP KEYWORD ROUTINE                            I241
*                                                                  I241
*******************************************************************I241
EASDPP   DS    0H                  (SDP.) KEYWORD                  I241
         BAL   RE,EAORIDE          LINK TO O'RIDE ROUTINE TO UPDATEI241
*                                     TABLE AND TURN ON SDP O'RIDE I241
*                                     FLAG                         I241
         BALR  RE,RF               LINK TO GET SDP FIELD           I241
         LA    R7,EAORTABL+ORSDP-ORTABLE POINT AT SDP IN O'RIDE    I241
         B     EASDP3              GO TO ENTER SDP IN O'RIDE TABLE I241
EASDPE   DS    0H                  (SDP) KEYWORD                   I241
         TM    SWE,PRCV            IS THIS PROC STATEMENT          I241
         BO    EASDP1              YES, GO TURN ON SDP O'RIDE IN   I241
*                                     IWA                          I241
         TM    SWG,ORSDPOR         IS SDP O'RIDE FLAG ON IN IWA    I241
         BZ    EASDP2              NO, GO ENTER SDP INTO SCT       I241
EASDP6   DS    0H                                                  I241
         BALR  RE,RF               YES, GO GET NEXT KEY            I241
         B     EASDP6              GO GET NEXT KEY                 I241
EASDP1   DS    0H                                                  I241
         OI    SWG,ORSDPOR         TURN ON SDP O'RIDE FLAG IN IWA  I241
EASDP2   DS    0H                                                  I241
         LA    R7,SCT+SCTSDP-INSMSCT   ADDR OF SDP IN SCT         O106
EASDP3   DS    0H                                                  I241
         OI    0(R7),X'10'         SET NO PRTY BIT                 I241
         MVI   1(R7),X'0B'         SET DEFAULT                     I241
         LTR   R2,R2               IS THERE PRTY SPECIFIED         I241
         BNZ   EASDP4              YES, GO CONVERT                 I241
         CLC   TNUM(4),TCT         NUMBER PARAMETERS EQUAL TO      I241
*                                     NUMBER PROCESSED             I241
         BE    EASDP6              YES, GO GET NEXT KEY            I241
EASDP4   DS    0H                                                  I241
         NI    0(R7),B'11101111'   TURN OFF NO PARM  BIT           I241
         LTR   R2,R2                    IS THERE PRTY SPECIFIED    I241
         BZ    EASDP5                   NO, GO GET NEXT KEY        I241
         MVI   EATEMP1,X'00'       CLEAR TEMP FIELD                I241
         BALR  RE,R9                    LINK TO CVB AND MVC TO TEMPI241
         MVN   0(1,R7),EATEMP1          MOVE SDP TO SCT OR O'RIDE  I241
EASDP5   DS    0H                                                  I241
         BALR  RE,RF                    LINK TO GET NEXT KEY       I241
         ST    RB,TPDTP                 SET PDT TO TOP             I241
         LA    R7,1(R7)                 POINT R7 AT NEXT SAVE SLOT I241
         B     EASDP4                   GO PROCESS SECOND FIELD    I241
         EJECT                                                     I241
*******************************************************************I241
*                                                                  I241
*              READ/WRITE & ASSIGN.                                   *
*                                                                     *
*                 R5 = 0  READ IN SIOT & JFCB USING EATTRSV.          *
*                         ASSIGN:                                     *
*                            1. TSIOT TO SIOT.                        *
*                            2. TNEXT TO JFCB.                        *
*                            3. MVC TNEXT+4 TO TSIOT & TO SCTPSIOT.   *
*                                                                     *
*                 R5 = 4  WRITE AND ASSIGN SIOT & JFCB.               *
*                         UPDATE TNEXT & TNEXT+4.                     *
*                                                                     *
***********************************************************************
EARWA    DS    0H
         STM   RE,R7,EAREGSV      SAVE REGS 14 - 7.
         SPACE
         LA    R7,QPARM           QMANAGER PARAMETER
         USING IOPARAMS,R7             LIST ADDRESSING.
         L     R3,EAVHQ           QMNGR (IEFVHQ) ADDRESS.
         L     R6,QMPCL           DATA RECORD POINTER.
         LA    R4,SIOT            SIOT ADDRESS.
         USING INDMSIOT,R4             ADDRESSING.
         ST    R4,0(R6)           SIOT ADDRESS TO QMPCA.
         LA    R2,JFCB            JFCB ADDRESS.
         USING EAJFCB,R2
*
*   CHECK FOR READ / WRITE & ASSIGN.
*
         B     *+4(R5)
         B     EARWA2             READ.
*
*   WRITE AND ASSIGN.
*
EARWA1   DS    0H
         MVI   DISPLID(R6),ZERO     ZERO OUT BLOCK ID IN QMPA    Y02621
*              FOR WRITE OF SIOT                                 Y02621
         MVC   4(3,R6),SIOTDSKA   MOVE SIOT TTR TO QMPEX.
         MVC   SCT+SCTLSIOT-INSMSCT(MVTHREE),SIOTDSKA            Y02668
*                                  MOVE SIOT TTR TO SCT          Y02668
*
*   WRITE AND ASSIGN SIOT.
*
         BALR  RE,R3              LINK TO QMGR. W&A SIOT.
         SPACE
         MVC   TNEXT(4),0(R6)     MOVE NEW TTR TO TNEXT.
         SPACE
         TM    EASW1,EAPGMSDF     PGM = *.
         BO    EARWA3             YES. RETURN.
         MVC   4(4,R6),SCTPJFCB   JFCB TTR TO QMPEX.
         MVI   DISPLID(R6),JFCBSID BLOCK ID TO REMOTE LIST       Y02621
         ST    R2,0(R6)           JFCB ADDR TO QMPCA.
*
*   WRITE AND ASSIGN JFCB.
*
         BALR  RE,R3              LINK TO QMGR. W&A JFCB.
         SPACE
         MVC   TNEXT+4(4),0(R6)   MOVE NEW TTR TO TNEXT+4.
         SPACE
         B     EARWA3             GO TO RESTORE REGS & RETURN.
         SPACE
*
*   READ.
*
EARWA2   DS    0H
         MVC   4(4,R6),EATTRSV    MOVE SIOT TTR TO QMPEX.
         MVI   QMPOP,QMREAD       SET QMPOP TO READ.
*
*   READ SIOT.
*
         BALR  RE,R3              LINK TO QMGR. READ SIOT.
         TM    EASW1,EAPGMSDF      IS THIS A PGM=*. REF ?       YA56859
         BZ    EARWA2A             NO  BYPASS SYSIN SYSOUT TEST YA56859
         TM    SCTSBYT3,EASYSOUT  IS THIS REFERENCE TO A SYSOUT DD. 394
         BO    EARWA4             YES. ERROR.                       394
         TM    SCTSBYT1,SCTSYSIN  IS THIS REFERENCE TO A SYSIN DD.  394
         BO    EARWA4             YES. ERROR.                       394
EARWA2A  DS    0H                                               YA56859
         MVC   EATEMP1(3),SIOTDSKA     MOVE SIOT TTR FOR PGM=*.
         MVC   EATTRSV(4),SCTPSIOT     MOVE TTR OF NEXT SIOT TO SAVE.
         MVC   SIOTDSKA(3),TSIOT  ASSIGN NEW TTR TO THIS SIOT.
         MVC   TSIOT(4),TNEXT     UPDATE POINTER TO NEXT SIOT
         MVC   SCTPSIOT(4),TNEXT       IN IWA & IN THIS SIOT.
         CLC   SCTDDNAM(8),EARWA50  IS THIS FIRST JOBCAT SIOT    Y01113
         BNE   EARWA20              IF NO, BYPASS SAVING TTR     Y01113
         MVC   EATEMP3(3),SIOTDSKA  SAV TTR OF 1ST JBCAT         Y01113
EARWA20  DS     0H                                               Y01113
         TM    EASW1,EAPGMSDF     PGM=*.                           AACA
         BO    EARWA22            YES. GO TO READ JFCB           Y02668
EARWA21  DS    0H                                                  AACA
         TM    SIOTALTD,SIOJCATS   IS THIS A JOBCAT SIOT         Y01113
         BZ    EARWA21A      NO,CHECK FOR FIRST STEP FOR JOBLIB YM01882
*        SETUP TO ENTER JOBCAT INTO REFERBACK DICTIONARY...     YM01882
         LA    R1,DICTDD        AREA TO BUILD DICT. ENTRY.      YM01882
         MVI   DICTLEN(R1),DENLEN  MOVE IN ENTRY LENGTH...      YM01882
         MVI   DICTID(R1),DDVERB  IDENTIFY ENTRY AS DD CARD.    YM01882
         MVC   DICTSIOT(E3,R1),SIOTDSKA  MOVE SIOT SVA TO ENTRY YM01882
         MVC   DICTJFCB(E3,R1),TNEXT+4  MOVE JFCB SVA TO ENTRY  YM01882
         MVC   DICTNAME(E6,R1),EARWA50  MOVE NAME TO ENTRY..    YM01882
         L     RF,EAINPUT    ADDRESS OF IEFVGI,DICTIONARY INSERTYM01882
         BALR  RE,RF         GO TO IEFVGI...                    YM01882
         B     EARWA22       CONTINUE PROCESSING..              YM01882
EARWA21A DS    0H                                               YM01882
         CLI   SCT+SCTSNUMB-INSMSCT,FRSTSTEP  THIS THE FIRST STEPY02113
         BE    EARWA5      POINT JOBLIB DICT. ENTRY TO NEW SIOT YM01882
         TM    EASW2,EAFRSTEP     CHECK FOR FIRST STEP OF A    @ZA07749
*                                 DEFERRED STEP RESTART        @ZA07749
         BO    EARWA6             PROCESS JOBLIB FOR 1ST STEP  @ZA12397
         OI    SCTSDISP,EASIPAS   TURN ON PASS INDICATOR-JOBLIB  Y02113
         NI    SCTSDISP,EASDISPC  CLEAR OTHER DISP SETTINGIN BYTEY02113
         OI    SCTSBYT2,SCTJOBLB  TURN ON JOBLIB INDICATOR       Y02113
         OI    SCTSBYT3,EASIOLD   TURN ON OLD INDICATOR-JOBLIB   Y02113
         NI    SCTSBYT3,EASBYTE3  CLEAR NEW,MOD SETTING IN FIELD Y02113
         NI    SCTSBYT2,VOLAFOFF     TURN VOL AFFINITY OFF     @ZA02726
         XC    SCTVOLCT(1),SCTVOLCT  ZERO VOL COUNT FIELD       YM00396
         MVC   SCTUTYPE(8),EABLANK   BLANK UNIT TYPE                010
EARWA22  DS    0H                                                  AACA
***************************************************************@ZA29589
**                                                             @ZA29589
**       IF VOL=REF=*.JOBLIB IS SPECIFIED ON A DD THAT IS      @ZA29589
**       CONCATENATED TO JOBLIB, WE MUST INSURE THAT THE SVA   @ZA29589
**       OF REFERED TO SIOT IS UPDATED TO POINT TO THE NEWLY   @ZA29589
**       CREATED JOBLIB SIOT.                                  @ZA29589
**                                                             @ZA29589
***************************************************************@ZA29589
         TM    SCTSBYT2,SCTJOBLB        JOBLIB?                @ZA29589
         BNO   EARWA22A                 NO,READ JFCB           @ZA29589
         TM    SCTSBYT1,SIOTCCAT        JOBLIB CONCATENATION?  @ZA29589
         BNO   EARWA22A                 NO,READ JFCB           @ZA29589
         TM    SCTSBYT3,SCTVREF         VOL=REF=*.JOBLIB ?     @ZA29589
         BNO   EARWA22A                 NO,READ JFCB           @ZA29589
**
***************************************************************@ZA29589
**
**       THERE ARE TWO INCORE BUFFERS FOR THE REFERBACK DICT-  @ZA29589
**       IONARY. THEY ARE POINTED TO BY SREFB AND DREFB. WHEN  @ZA29589
**       THE FIRST BUFFER IS FULL, IT IS WRITTEN OUT AND THE   @ZA29589
**       BUFFER SPACE POINTED TO BY SREFB WILL NOW BE USED TO  @ZA29589
**       CONTAIN THE THIRD SECTION OF THE DICTIONARY. SINCE    @ZA29589
**       THE JOBLIB DD ENTRY ALWAYS THE FIRST ENTRY IN THE     @ZA29589
**       FIRST SECTION OF THE DICTIONARY, WE MUST SEARCH THE   @ZA29589
**       DICTIONARY FOR THE JOBLIB ENTRY. WHEN THE SEARCH IS   @ZA29589
**       COMPLETE,DREFB WILL CONTAIN THE POINTER TO THE BUFFER @ZA29589
**
***************************************************************@ZA29589
**
         LA    R3,EARWA60+1             SET UP TO REREAD THE   @ZA29589
         L     RF,EASEARCH              REFERBACK DICTIONARY   @ZA29589
         BALR  RE,RF                    CALL VGS TO SEARCH     @ZA29589
         LA    R1,DREFB+E7              POINT TO JOBLIB SVA    @ZA29589
         MVC   SIOTVRSB(E3),DICTSIOT(R1) COPY JOBLIB SVA       @ZA29589
         L     R3,EAVHQ                 RELOAD QMGR INTERFACE  @ZA29589
EARWA22A DS    0H
         MVC   4(4,R6),SCTPJFCB   MOVE JFCB TTR TO QMPEX.
         ST    R2,0(R6)           JFCB ADDRESS TO QMPCA.
         MVI   QMPOP,QMREAD       SET QMPOP TO READ.
*
*   READ JFCB.
*
         BALR  RE,R3              LINK TO QMGR. READ JFCB.
         TM    EASW1,EAPGMSDF     PGM=*.?                        Y02668
         BO    EARWA3             YES, GO TO RETURN              Y02668
         SPACE
         MVC   SCTPJFCB(4),TNEXT+4     ASSIGN NEW TTR TO JFCB.
         SPACE
*
*   RESTORE REGISTERS - RETURN.
*
EARWA3   DS    0H
         LM    RE,R7,EAREGSV      RESTORE REGISTERS 14 - 7.
         SPACE
         BR    RE                 RETURN.
         SPACE
*
*   INVALID REFERBACK TO A SYSOUT/SYSIN DD STATEMENT.               394
*
EARWA4   DS    0H                                                   394
         MVI   MSGSEC,EAR59       SET ERROR MESSAGE CODE.           394
         B     EAERRTN            GO TO CLEANUP.                    394
EARWA5   DS    0H
         TM    SCTSBYT1,SIOTCCAT  CONCATENATION TO JOBLIB ?     YM07752
         BO    EARWA22       YES,BYPASS UPDATE OF SVA IN DICT.  YM07752
*        CHANGE  REFERBACK DICTIONARY FOR NEW JOBLIB SVAS       YM01882
         LA    R1,SREFB+E7   POINT TO INPUT  DISCTIONARY JOBLIB YM01882
         MVC   DICTSIOT(E3,R1),SIOTDSKA SIOT SVA TO ENTRY       YM01882
         MVC   DICTJFCB(E3,R1),TNEXT+E4   JFCB SVA TO DICT ENTRYYM01882
         B     EARWA22       CONTINUE WITH NORMAL PROCESS       YM01882
EARWA6   DS    0H                                              @ZA12397
*  THE FOLLOWING CODE WAS ADDED TO SUPPORT VOL REF TO DSNAME   @ZA15772
*  ON JOBLIB FOR DEFERRED RESTART                              @ZA15772
         TM    SCTSBYT3,SCTDSNRF  VOL REF TO DSNAME PRESENT    @ZA15772
         BZ    EARWA603           NO, CONTINUE                 @ZA15772
         TM    SCTSBYT1,SIOTCCAT  CONCATENATION TO JOBLIB      @ZA15772
         BZ    EARWA600           NO, READ 1ST STEP SCT        @ZA15772
         L     R5,SCT+SCTADSTB-INSMSCT  GET SVA OF DSNT        @ZA15772
         ST    R5,SWADSNT        SET TO READ IN DSNT IF NEEDED @ZA15772
         LTR   R5,R5              HAVE WE FOUND DSNT CHAIN YET?@ZA15772
         BNZ   EARWA601           YES, BYPASS READ OF SCT      @ZA15772
EARWA600 EQU   *                                               @ZA15772
*  READ IN 1ST STEP SCT TO FIND VALID DSNT CHAIN ADDR          @ZA15772
         MVC   E4(E4,R6),JCT+JCTSDKAD-INJMJCT  SVA OF 1ST SCT  @ZA15772
         ST    R2,E0(R6)          SET TO READ INTO JFCB SLOT   @ZA15772
         MVI   QMPOP,QMREAD       SET SWA PARM TO READ         @ZA15772
         BALR  RE,R3              GO TO VHQ TO READ IN 1ST SCT @ZA15772
         XC    TWORK(E8),TWORK    CLEAR TEMPORARY WORK AREA    @ZA15772
*  THIS CODE MOVES HEAD OF DSNT CHAIN FROM 1ST STEP SCT TO     @ZA15772
*  CURRENT STEP SCT (1ST STEP OF DEFERRED RESTART)             @ZA15772
         MVC   SCT+SCTADSTB-INSMSCT(E4),JFCB+SCTADSTB-INSMSCT  DSNT SVA
*                                  TO CURRENT SCT              @ZA15772
         MVC   SWADSNT(E4),JFCB+SCTADSTB-INSMSCT  SAVE DSNT SVA@ZA15772
EARWA601 EQU   *                  ENTER FOR JOBLIB CONCAT. AND @ZA15772
         LA    R5,DSNAME                                       @ZA15772
         USING DSNTABLE,R5                                     @ZA15772
         OI    SWC,DSNTQ          TELL VHH TO WRITE LAST DSNT  @ZA15772
*                                                              @ZA15772
*  LOOP TO READ IN LAST DSNT FOR JOBLIB.  THERE MAY BE ADDED   @ZA15772
*  VOL REFS TO DSNAME IN NON-JOBLIB DDS IN RESTART STEP TO BE  @ZA15772
*  ADDED TO LAST DSNT.                                         @ZA15772
*                                                              @ZA15772
         LH    R0,SIOVDSNT        GET OFFSET TO DSNT ENTRY     @ZA15772
         SRDA  R0,32              SET UP TO DIVIDE BY 168      @ZA15772
         D     R0,DSNTLEN                                      @ZA15772
*  R1=QUOTIENT.  NUMBER BLOCKS, MINUS 1, FOR CURRENT ENTRY     @ZA15772
*  R0=REMAINDER. THIS IS OFFSET TO CURRENT DSNAME ENTRY.       @ZA15772
         LA    R1,E1(R1)          INCREMENT READ COUNT         @ZA15772
         STH   R1,DSNCOUNT        SAVE COUNT OF DSNTS TO READ  @ZA15772
         SR    R1,R1              CLEAR REG FOR LOOP CONTROL   @ZA15772
EARWA602 EQU   *                                               @ZA15772
         MVC   E4(E4,R6),SWADSNT  DSNT SVA INTO EXT PARM       @ZA15772
         ST    R5,E0(R6)          READ INTO DSNT BUFFER        @ZA15772
         MVI   QMPOP,QMREAD       SET TO READ                  @ZA15772
         BALR  RE,R3              GO TO VHQ TO READ IN DSNT    @ZA15772
         MVC   SWADSNT(E4),DSNTNSVA    SAVE ADDR NEXT DSNT     @ZA15772
         LA    R1,E1(R1)          INCREMENT COUNT OF BLOCKS    @ZA15772
         CH    R1,DSNCOUNT        HAS CORRECT BLOCK BEEN READ? @ZA15772
         BL    EARWA602           NO, GO READ NEXT ONE         @ZA15772
         SR    R1,R1              CLEAR REG                    @ZA15772
         IC    R1,SIOVDSNL        GET LENGTH DSN IN VOL REF    @ZA15772
         AH    R1,SIOVDSNT        ADD OFFSET TO DSN ENTRY      @ZA15772
         ST    R1,SCT+SCTLDSTB-INSMSCT  UPDATE DSNT REL LENGTH @ZA15772
EARWA603 EQU   *                  NON VOL REF ON JOBLIB ENTRY  @ZA15772
         XR    RF,RF               ZERO REG                    @ZA12397
         CL    RF,TSREFB           HAS 1ST DICT BEEN WRITTEN   @ZA12397
*                                  OUT TO SWA?                 @ZA12397
         BE    EARWA5              NO, 1ST DICT IN INPUT BUFFER@ZA12397
         TM    SCTSBYT1,SIOTCCAT   CONCATENATION TO JOBLIB?    @ZA12397
         BO    EARWA22             YES, BYPASS UPDATE OF SVA   @ZA12397
         LA    R3,EARWA60+1        POINT TO LENGTH BYTE        @ZA12397
         L     RF,EASEARCH         LOAD VGS VCON               @ZA12397
         BALR  RE,RF               GO TO SEARCH FOR JOBLIB     @ZA12397
         LA    R1,DREFB+E7         POINT TO SEARCH DICT. JOBLIB@ZA12397
         MVC   DICTSIOT(E3,R1),SIOTDSKA SIOT SVA TO ENTRY      @ZA12397
         MVC   DICTJFCB(E3,R1),TNEXT+E4 JFCB SVA TO ENTRY      @ZA12397
         LA    R1,DREFB            POINT TO BEGINNING OF DICT. @ZA12397
         ST    R1,E0(R6)           ADDR TO REMOTE PARM LIST    @ZA16392
         MVI   QPARM+QMPOP-QMNAM,QMWRTE INDICATE WRITE         @ZA12397
         MVC   E4(E3,R6),TSREFB   REWRITING FIRST DICT.        @ZA16392
         MVI   E7(R6),DICTRYID    INDICATE ID FOR DICTIONARY   @ZA16392
         L     R3,EAVHQ           LOAD VHQ VCON                @ZA12397
         BALR  RE,R3              LINK TO VHQ TO WRITE BACK    @ZA12397
*                                 UPDATED DICTIONARY           @ZA12397
         B     EARWA22            CONTINUE WITH NORMAL PROCESS @ZA12397
         DROP  R2
         DROP  R4
         DROP  R7
EARWA50  DS    0H                                                Y01113
         DC    CL8'JOBCAT  '       FOR COMPARE WITH SIOT DDNAME  Y01113
EARWA60  DC    FL1'1'              ONE SEARCH ARGUMENT         @ZA12397
         DC    FL1'6'              LENGTH OF 6                 @ZA12397
         DC    CL6'JOBLIB'         SEARCH ARGUMENT = JOBLIB    @ZA12397
         EJECT
***********************************************************************
*                                                                     *
*              O'RIDE TABLES HANDLING.                                *
*                                                                     *
***********************************************************************
EAORIDE  DS    0H
         SPACE
         STM   RE,R7,EAREGSV      SAVE REGISTERS 14THRU 7.
         ST    RB,TPDTP           INITIALIZE TO START AT PDT TOP.
         SPACE
         TM    EASW1,EAPGMSDF+EAPGMEF  IS THIS AN EXEC PGM STATEMENT.
         BM    EAPGM10            YES. ERROR.
         SPACE
         CLI   0(R3),X'08'        DOES PROCSTEP EXCEED 8 BYTES.
         BH    EAORIDE4           YES -ERROR-.
         LTR   R2,R2               DOES PROCSTEP NAME FOLLOW      18053
         BNE   EAORIDE8            THE OVERRIDE.  YES             18053
         MVI   MSGSEC,EAR60        PROCSTEP NAME LENGTH IS ZERO   180
         B     EAERRTN             SET POSITIONAL PARAM MISSING
*
EAORIDE8 DS    0H                                                 18053
         LA    R7,EAORTABL        ORIDE TABLE ADDRESS.
         USING ORTABLE,R7
*
*   SET UP QMANAGER PARAMETER AREA.
*
         LA    R6,QPARM           QMANAGER PARAMETER
         USING IOPARAMS,R6             LIST ADDRESSING.
         L     R5,QMPCL           QMPCA ADDRESS TO R5.
         SPACE
*
*   INITIALIZE WORK SPACE AND SET R4 = PDT O'RIDE SLOT.
*
         BCTR  R4,0               POINT TO O'RIDE FLAG FOR THIS KEY.
         SPACE
         L     RF,EAVHQ           SET RF TO IEFVHQ ADDRESS
         MVC   EAPRSV(8),EABLANK  BLANK OUT PROCSTEP TEMP SAVE.
         BCTR  R2,0
         EX    R2,EAORIDMV        MOVE PROCSTEP TO TEMP SAVE.
         SPACE
*
*   CHECK FOR FIRST ENTRY INTO O'RIDE TABLE.
*
         CLI   ORNMNXST,X'00'     STEPNAME IN O'RIDE TABLE EQUAL ZERO.
         BE    EAORIDE2           YES. GO TO INITIALIZE TABLE.
*
*   CHECK FOR MATCHING STEPNAMES.
*
         CLC   ORNMNXST(8),EAPRSV IS STEP TO BE O'RIDDEN SAME AS STEP
*                                      ALREADY ENTERED IN O'RIDE TABLE.
         BE    EAORIDE3           YES. GO TO CHECK FOR DUPLICATE KEYS.
*
*   NEW STEPNAME - PUT OUT PREVIOUS OVERRIDE TABLE.
*
         MVC   ORNMNXST(8),EAPRSV PUT THIS STEPNAME INTO O'RIDE TABLE
*                                      SLOT 'NEXT STEP TO BE O'RIDDEN'.
         MVC   ORCHAIN(3),TNEXT   MOVE TNEXT TO CHAIN TTR.
         ST    R7,0(R5)           O'RIDE TABLE ADDRESS TO QMPCA.
         MVC   4(3,R5),ORTTR      O'RIDE TABLE TTR TO QMPEX.
         MVI   DISPLID(R5),PROCORID    BLOCK ID TO REMOTE LIST   Y02621
*
*   LINK TO IEFVHQ TO WRITE & ASSIGN PREVIOUS O'RIDE TABLE.
*
         BALR  RE,RF              LINK TO QMANAGER INTERFACE MODULE.
         SPACE
         MVC   TNEXT(4),0(R5)     UPDATE TNEXT.
*
*   MOVE O'RIDE CHAIN TTR TO BE TTR OF NEW O'RIDE TABLE, ZERO REST OF
*        O'RIDE TABLE AND PUT IN NEW STEPNAME.
*
         MVC   ORTTR(3),ORCHAIN   MOVE CHAIN TTR TO THIS TTR.
         XC    ORCHAIN(ORTABEND-ORCHAIN),ORCHAIN ZERO REST OF TABLE.
         MVC   ORNMNXST(8),EAPRSV MOVE STEPNAME TO O'RIDE TABLE.
         MVI   EAPRSVF,X'00'      CLEAR DUPLICATE FLAG SW.          303
         MVI   EAPRSVF2,0          CLEAR DUPLIC FLAG BYTE 2.    YM00368
*
*   SET OVERRIDE FLAG IN TABLE, RESTORE REGS & RETURN.
*
EAORIDE1 DS    0H
         TM    SWG,ORFLG2SW       NEW O'RIDE KEYWORD?            Y02668
         BZ    EAORID1A           NO, CONTINUE PROCESSING        Y02668
         NI    SWG,FF-ORFLG2SW    TURN NEW O'RIDE FLAG OFF       Y02668
         OC    ORFLAGS2(1),0(R4)  SET UP O'RIDE FLAG FOR KEY     Y02668
         OC    EAPRSVF2(1),ORFLAGS2 SET UP BYTE 2 DUPLIC CHECK. YM00368
         B     EAORID2A           GO TO RETURN                   Y02668
EAORID1A DS    0H                                                Y02668
         OC    ORFLAGS(1),0(R4)   SET O'RIDE FLAGS FOR THIS KEY.
         OC    EAPRSVF(1),ORFLAGS SET UP DUPLICATE CHECK.           303
EAORID2A DS    0H                                                Y02668
         LM    RE,R7,EAREGSV      RESTORE REGISTERS.
         BR    RE                 RETURN.
         SPACE
*
*   FIRST ENTRY INTO O'RIDE TABLE. MOVE STEPNAME TO O'RIDE TABLE AND
*        TO ORIDSNM IN IWA.  ASSIGN A TTR TO THE O'RIDE TABLE AND SAVE
*        IT IN TPROC OF THE IWA.  SET POVRX IN IWA.  SET O'RIDE ID.
*
EAORIDE2 DS    0H
         XC    ORTABLE(176),ORTABLE    BE SURE O'RIDE TABLE SLOT CLEAR.
         MVI   QMPOP,QMASGN       SET QMPOP TO ASSIGN TTR.
         SPACE
         BALR  RE,RF              LINK TO QMANAGER INTERFACE (IEFVHQ).
         SPACE
         MVC   TPROC(4),0(R5)     MOVE TTR TO IWA.
         MVC   ORTTR(3),0(R5)     MOVE TTR TO O'RIDE TABLE.
         MVI   ORID,ORIDFLAG      SET PROCEDURE O'RIDE TABLE ID.
         MVC   ORNMNXST(8),EAPRSV MOVE STEPNAME TO O'RIDE TABLE.
         MVC   ORIDSNM(8),EAPRSV  MOVE STEPNAME TO IWA.
         OI    SWE,POVRX          SET O'RIDE PROC EXEC STMT SW IN IWA.
         B     EAORIDE1           GO TO SET O'RIDE FLAG &RETURN.
*
*   STEPNAME = STEPNAME IN O'RIDE TABLE-CHECK FOR DUPLICATE USE OF
*        KEYWORDS.
*
EAORIDE3 DS    0H
         CLI   MSGKEY,ORBYT2KY     ORIDE FLAG FOR THIS KEYWD    YM00368*
                                   IN FLAG BYTE 2?              YM00368
         BH    EAORID3A            BRANCH NO.                   YM00368
         NC    EAPRSVF2(1),0(R4)   CHECK FOR DUPLIC ORIDE IN    YM00368*
                                   FLAG BYTE 2.                 YM00368
         BC    8,EAORIDE1          NO DUP, BRANCH TO EXIT.      YM00368
         B     EAORID3G            YES DUP, BR TO ISSUE ERR MSG.YM00368
EAORID3A DS    0H                                               YM00368
         NC    EAPRSVF(1),0(R4)   CHECK FOR DUPLICATE OVERRIDE.     303
         BC    8,EAORIDE1         NO. - OK. GO TO RESTORE REGS &EXIT.
*
*   ERROR -DUPLICATE USE OF KEYWORD-
*
EAORID3G DS    0H                                               YM00368
         MVI   MSGSEC,EAR53       SET ERROR MSG NBR.
         B     EACLEANP           GO TO CLEANUP ROUTINE.
         SPACE
*
*   ERROR -PROCSTEP EXCEEDS EIGHT CHARACTERS-
*
EAORIDE4 DS    0H
         MVI   MSGSEC,EAR55       SET ERROR MSG NBR.
         B     EACLEANP           GO TO CLEANUP ROUTINE.
         SPACE 2
EAORIDMV MVC   EAPRSV(1),1(R3)    MOVE PROCSTEP TO TEMP SAVE.(EXECUTED)
         EJECT
*******************************************************************AACA
*                                                                 *AACA
*              CHECKPOINT/RESTART SCT/SMB CHAINING SUBROUTINE.    *AACA
*                                                                 *AACA
*******************************************************************AACA
EARSTSUB DS    0H                                                  AACA
         STM   RE,R7,EAREGSV      SAVE REGISTERS 14 THRU 7.        AACA
         SPACE
         L     R5,QPARM+QMPCL-IOPARAMS  REMOTE LIST ADDRESS        AACA
         LA    R6,EAAUXWK         SPACE FOR C/R SCT.               AACA
         ST    R6,0(R5)           ADDR TO REMOTE LIST              AACA
         MVC   4(3,R5),JCT+JCTSSTR-INJMJCT C/R SCT TTR             AACA
         MVI   7(R5),X'00'        JUST TO BE SURE LAST BYTE ZERO   AACA
         MVI   QPARM+QMPOP-IOPARAMS,QMREAD  SET TO READ.           AACA
         L     R7,EAVHQ           ADDR OF QMNGR INTERFACE -IEFVHQ  AACA
         SPACE
         BALR  RE,R7              LINK TO QMNGR - READ IN C/R SCT  AACA
         SPACE
         MVC   EAAUXWK+SCTANSCT-INSMSCT(MVTHREE),SCT+SCTDISKA-INSMSCT
*                                      CHAIN R/I C/R SCT          O106
*                                                   TO THIS STEP.  AACA
         SPACE
         MVI   QPARM+QMPOP-IOPARAMS,QMWRTE  SET TO WRITE C/R SCT.  AACA
         SPACE
         BALR  RE,R7              LINK TO QMNGR - WRITE C/R SCT.   AACA
         SPACE
         LM    RE,R7,EAREGSV      RESTORE REGS.                    AACA
         BR    RE                 RETURN.                          AACA
         EJECT
*******************************************************************AACA
**                                                                   **
**             CLEANUP PORTION OF EXECUTE ROUTINE.                   **
**                                                                   **
***********************************************************************
EAERRTN0 DS    0H
         MVI   MSGKEY,X'00'       CLEAR SECONDARY MESSAGE SLOT.
EACLEANP DS    0H
EAERRTN  EQU   *
         LA    R7,JCT             JCT ADDRESSING.
         USING EAJCT,R7
         SPACE
         LA    R4,EAORTABL        O'RIDE TABLE ADDRESS TO R4.
         USING ORTABLE,R4
         SPACE
         LA    R6,QPARM           Q-MANAGER PARAMETER
         USING IOPARAMS,R6             AREA ADDRESSING.
         L     R5,QMPCL           QMPCA ADDRESS TO R5.
         ST    R4,0(R5)           O'RIDE TABLE ADDRESS TO QMPCA.
         SPACE
         CLI   MSGSEC,X'00'       HAS AN ERROR OCCURRED.
         BNE   EAERRTNA           YES. GO TO FAIL JOB AND PUT OUT MSG.
EAERRTN1 DS    0H                                               YM00382
*
*   NO ERRORS.  CHECK FOR POVRX ON AND O'RIDES FOR THIS STEP.
*
         TM    SWE,POVRX          O'RIDE PROC EXEC STMT.
         BZ    EAEXIT             NO.  EXIT TO IEFVHF.
*
*        POVRX ON - ARE THERE OVERRIDES.
*
         TM    SWE,PROC            STATEMENT FROM A PROC?        Y02668
         BZ    EACL1              NO-CANNOT BE OVERRIDDEN         17163
         CLC   ORIDSNM(8),EASNSV  IS THERE AN OVERRIDE TABLE FOR STEP.
         BNE   EACL1               NO. DO NOT READ IN POT       YM08035
         CLC   TPROC(3),EAENDOR    IS POT PTR ZERO ?            YM08035
         BNE   EACL4               NO. GO TO READ IN POT        YM08035
*
*   NO O'RIDES - CHECK FOR PRIME PROC BUFF & PUT OUT LAST O'RIDE TABLE.
*
EACL1    DS    0H
         TM    SWE,PRCV            STATEMENT INVOKE A PROC?      Y02668
         BZ    EAEXIT              BR NO, NO O'RIDE TABLE BUILT. Y02668
*
*   PUT OUT LAST O'RIDE TABLE.
*
EACL2    DS    0H
         TM    JCTJSTAT,INCMSTS   CHECK FOR JOB FAILED.
         BZ    EACL3              JOB OK - GO TO PUT OUT TABLE.
*        FAILED JOB - ZERO O'RIDE FLAGS.
         MVI   ORFLAGS,X'00'      ZERO O'RIDE FLAGS.
         MVI   ORFLAGS2,X'00'     ZERO NEW O'RIDE FLAGS         YM00368
         SPACE
*        Q-MANAGER LINK.
EACL3    DS    0H
         MVC   4(3,R5),ORTTR      TTR TO QMPEX.
         MVI   DISPLID(R5),PROCORID    BLOCK ID TO REMOTE LIST   Y02621
         MVI   QMPOP,QMWRTE       SET QMPOP FOR WRITE ONLY.
         SPACE
         L     RF,EAVHQ           IEFVHQ ADDRESS.
         BALR  RE,RF              LINK TO Q-MANAGER INTERFACE.
         B     EAEXIT             GO TO EXIT.
*
*   O'RIDE TABLE IN AND MOVE PARAMETERS TO SCT.
*
EACL4    DS    0H
         SPACE
         MVC   4(3,R5),TPROC      MOVE TTR OF PROC O'RIDE TABLE TO
*                                      Q-MANAGER PARAM AREA (QMPEX).
         MVI   QMPOP,QMREAD       INDICATE READ.
         SPACE
         L     RF,EAVHQ           IEFVHQ ADDRESS.
         BALR  RE,RF              LINK TO IEFVHQ (Q-MNGR INTERFACE).
         SPACE
         MVC   TPROC(3),ORCHAIN   MOVE TTR OF NEXT O'RIDE TABLE TO IWA.
         MVC   ORIDSNM(8),ORNMNXST     MOVE NAME OF NEXT STEP TO IWA.
         SPACE
*
*   CHECK FOR COND OVERRIDES.
*
         TM    ORFLAGS,EACONDOR   ARE THERE COND O'RIDES.
         BZ    EACL5              NO. GO TO CHECK FOR PARM O'RIDES.
         SPACE
         MVI   MSGKEY,CONDPEK     YES. SET SECONDARY MSG NBR.
         XC    SCT+SCTSDPCD-INSMSCT(MV48),SCT+SCTSDPCD-INSMSCT    O106
*                                      ZERO OUT SCT DEPENDENCIES  O106
         LA    R3,SCT+SCTSDPCD-INSMSCT SCT STORE LOCATION         O106
         LA    R2,ORCONDCD        O'RIDE TABLE PICK UP ADDRESS.
*                                                                  HW16
*   EVEN OR ONLY TO EIGHTH COND SLOT IN SCT                        HW16
*                                                                  HW16
         MVC   42(1,R3),84(R2)     MOVE SCTABCND BYTE,             HW16
*                                  WHETHER SPECIFIED OR NOT        HW16
*                                                                  HW16
         SPACE
EACL4A   DS    0H
         CLI   2(R2),X'00'        HAVE WE FINISHED ALL CONDS.
         BE    EACL5              YES. GO TO CHECK FOR PARM O'RIDES.
         SPACE
         CLI   11(R2),X'00'       IS LENGTH ZERO/SCT TTR RESOLVED.
         BNE   EACL4C             NO. GO TO SEARCH DICT FOR SCT TTR.
*
*   SCT TTR RESOLVED - MOVE O'RIDE COND FIELD TO SCT.
*
EACL4B   DS    0H
         SPACE
         MVC   0(6,R3),0(R2)      MOVE O'RIDE COND FIELD TO SCT.
         SPACE
         LA    R2,12(R2)          POINT R2 AT NEXT O'RIDE COND FIELD.
         LA    R3,6(R3)           POINT R3 AT NEXT SCT COND FIELD.
         B     EACL4A             GO TO CHECK FOR MORE COND FIELDS.
*
*   SEARCH DICTIONARY TO RESOLVE SCT TTR.
*
EACL4C   DS    0H
         SPACE
         SR    R1,R1
         IC    R1,ORSTEPL         *    SET UP NAME OF PROCEDURE FOR
         EX    R1,EACLMV1         *         SEARCH. LENGTH+STEPNAME.
         SPACE
         LA    RE,EAREGSV+2(R1)   POINT AT NEXT STORE BYTE.
*
*   CHECK FOR CONDITIONAL SEARCH ON PROCEDURE STEPNAME.
*
         IC    R1,11(R2)          PICK UP PROCSTEP LENGTH BYTE.
         STC   R1,EATEMP2         PUT COPY OF LENGTH IN TEMP FOR TEST.
         NI    EATEMP2,X'80'      CHECK FOR HIGH ORDER BIT ON.
         BC    8,EACL4D           NO. GO TO SET UP UNCONDITIONAL SEARCH
*
*   CONDITIONAL SEARCH ON (STEPNAME).PROCSTEP - PROCSTEP MAY BE OUTSIDE
*        THE PROCEDURE NAMED BY (STEPNAME).  THIS IS USED SO THAT A
*        REFERENCE CAN BE MADE TO A STEP OF A PROCEDURE WITHOUT
*        NAMING THE PROCEDURE.
*
         STC   R1,EATEMP2         COPY OF LENGTH TO TEMP TO TURN OFF
         NI    EATEMP2,X'7F'           HIGH ORDER BIT.
         IC    R1,EATEMP2         PICK UP LENGTH ONLY.
         OI    SRCHSW1,SRCHF1     INDICATE CONDITIONAL SEARCH.
         B     EACL4E             GO TO SEARCH.
*
*   UNCONDITIONAL SEARCH ON STEPNAME.PROCSTEP.
*
EACL4D   DS    0H
*
*   SET UP REGS AND LINK TO SEARCH DICTIONARY FOR SCT TTR.
*
EACL4E   DS    0H
         EX    R1,EACLMV2         MOVE PROCSTEP TO SEARCH SETUP.
         STC   R1,0(RE)           PUT IN PROCSTEP LENGTH.
         ST    R3,EATEMP1         SAVE R3.
         LA    R3,EAREGSV+1       POINT R3 AT STEPNAME.PROCSTEP.
         MVI   EAREGSV,X'02'      INDICATE NBR PARAMETERS.
         OI    SRCHSW1,SRCHF2     INDICATE SEARCH FOR SCT.
         SPACE
         L     RF,EASEARCH        LINK TO SEARCH.
         BALR  RE,RF
         SPACE
         MVC   3(3,R2),2(R1)      MOVE TTR FROM DICT TO O'RIDE.
         L     R3,EATEMP1         RESTORE R3.
         B     EACL4B             GO TO MOVE O'RIDE ENTRY TO SCT.
         SPACE 2
EACLMV1  MVC   EAREGSV+1(1),ORSTEPL
EACLMV2  MVC   1(1,RE),3(R2)
         SPACE 2
*
*   PARM O'RIDE CHECK.
*
EACL5    DS    0H
         TM    ORFLAGS,EAPARMOR   ARE THERE PARM O'RIDES.
         BZ    EACL6              NO. GO TO CHECK FOR TIME O'RIDES.
         SPACE
         MVC   SCT+SCTXBTTR-INSMSCT(MVTHREE),ORPARM               O106
*                                      MOVE PARM ORIDES TTRO TO SCTO106
         MVC   SCT+SCTSEXEC-INSMSCT(MVTWO),ORPARMSZ               O106
*                                      MOVE PARM SIZE TO SCT      O106
         SPACE
*
*   TIME O'RIDE CHECK.
*
EACL6    DS    0H
         TM    ORFLAGS,EATIMEOR   ARE THERE TIME O'RIDES.
         BZ    EACL7              NO. GO TO CHECK FOR ACT O'RIDES.
         SPACE
         MVC   SCT+SCTSTIME-INSMSCT(MVTHREE),ORMAXTIM             O106
*                                      MOVE TIME O'RIDES TO SCT   O106
         SPACE
*
*   ACT O'RIDES CHECK.
*
EACL7    DS    0H
         TM    ORFLAGS,EAACCTOR   ARE THERE ACT O'RIDES.
         BZ    EACL8              NO. GO TO CHECK REGION O'RIDES.
         SPACE
         MVC   SCT+SCTAFACT-INSMSCT(MVTHREE),ORACTTTR             O106
*                                      MOVE ACT TTR TO SCT        O106
         SPACE
*
*   REGION O'RIDES CHECK.
*
EACL8    DS    0H
         TM    ORFLAGS,EAREGOR    IS THERE A REGION O'RIDE.
         BZ    EACL9              NO. GO TO CHECK FOR ADDRSPC O'RIDES.
         SPACE
         MVC   SCT+SCTMSSZE-INSMSCT(E2),ORREG                    Y02668
*                                 MOVE REGION PARM TO SCT    O106
         OI    EASW2,EAREGION     INDICATE REGION ON EXEC STMT.
         SPACE
*
*   ADDRSPC O'RIDES CHECK.
*
EACL9    DS    0H
         TM    ORFLAGS,EAADDROR   IS THERE  ADDRSPC O'RIDE?.     Y01029
         BZ    EACL10             NO. GO TO CHECK RD O'RIDES       AACA
         NI    SCT+SCTSSTAT-INSMSCT,FF-EAADDRBT                  Y01029
*                                 CLEAR SCTSSTAT                 Y01029
         OC    SCT+SCTSSTAT-INSMSCT(OC1),ORADDR                  Y01029
*                                 SET  ADDRSPC O'RIDE FLAGS
         OI    EASW2,EAADDR       SET ADDRSPC ON EXEC STMT FLAG. Y01029
*                                                                  AACA
*   RD O'RIDES CHECK                                               AACA
*                                                                  AACA
EACL10   DS    0H                                                  AACA
         TM    ORFLAGS,EARDOR     IS THERE A RD O'RIDE             AACA
         BZ    EACL11             NO. CONTINUE                     AACA
         NI    SCT+SCTSSTAT-INSMSCT,CLFLAGS   CLEAR RD FLAGS      O106
         OC    SCT+SCTSSTAT-INSMSCT(OC1),ORRD SET RD O'RIDE FLAGS O106
*                                                                  I241
*   SDP O'RIDES CHECK                                              I241
EACL11   DS    0H                                                  I241
         TM    ORFLAGS,EASDPOR     IS THERE AN SDP O'RIDE          I241
         BZ    EACL12              NO, CONTINUE                    I241
         NI    SCT+SCTSDP-INSMSCT,ZERSDP  ZERO SDP FIELD          O106
         OC    SCT+SCTSDP-INSMSCT(OC1),ORSDP  MOVE IN O'RIDES     O106
         MVC   SCT+SCTSDP-INSMSCT+DISPLONE(MVONE),ORSDP+DISPLONE  O106
*                                      MOVE IN O'RIDES            O106
*                                                                Y02655
*    PERFORM O'RIDES CHECK                                       Y02655
EACL12   DS    0H                                                Y02655
         TM    ORFLAGS2,EAPRFMOR IS THERE PERFORM O'RIDE         Y02655
         BZ    EACL13             NO CONTINUE                    Y02655
         MVC   SCT+SCTPRFMF-INSMSCT(MVONE),ORPRMVAL              Y02655
*                                 MOVE IN O'RIDE                 Y02655
*                                                                Y02670
*    DYNAMNBR O'RIDES CHECK                                      Y02670
EACL13   DS    0H                                                Y02670
         TM    ORFLAGS2,EADYNMOR  IS THERE DYNAMNBR O'RIDE       Y02670
         BZ    EACL14             NO, CONTINUE                   Y02670
         MVC   SCT+SCTNIUSL-INSMSCT(MVTWO),ORDYNVAL              Y02670
*                                 MOVE IN O'RIDE                 Y02670
EACL14   DS    0H                                                Y02668
*   CHECK FOR END OF OVERRIDE CHAIN.
*
         CLC   ORCHAIN(3),EAENDOR IS THE CHAIN TTR ZERO.
         BNE   EAEXIT             NO. GO TO EXIT.
         SPACE
         NI    SWE,FF-POVRX       END OF O'RIDE CHAIN - TURN OFF FLAG
*                                      INDICATING O'RIDE PROC EXEC STMT
         SPACE 3
EAEXIT   DS    0H                                                  I283
*************************************************************** YM02711
*        STEP DEFAULTS FOR REGION AND ADDRSPC                   YM02711
*************************************************************** YM02711
*  ADDRSPC=REAL AND NO REGION SPECIFIED ON JOB OR EXEC          YM02711
*  REGION LEFT ZERO                                             YM02711
*************************************************************** YM02711
         TM    SWD,JOBADDRF        ADDRSPC ON JOB STMT ?        YM02711
         BZ    EAEXIT2             NO - CHECK JOB REGION        YM02711
         NI    SCT+SCTSSTAT-INSMSCT,FF-EAADDRBT                 YM02711
*                                  CLEAR POSSIBLE EXEC SETTING  YM02711
         TM    IWAJBADR,JCTADSPC   JOB ADDRSPC=REAL ?           YM02711
         BZ    EAEXIT2             NO - CHECK FOR JOB REGION    YM02711
         OI    SCT+SCTSSTAT-INSMSCT,EAADDRBT                    YM02711
*                                  SET SCT ADDRSPC=REAL         YM02711
EAEXIT2  DS    0H                                               YM02711
         LA    RF,WAJOBPFX         ADDR OF PSEUDO JOB PFX       YM02711
         USING TEXT,RF             TEXT PREFIX ADDRESSABILITY   YM02711
         TM    STRJINDC,JTXREGDF   IS JOB REGION A DEFAULT ?    YM02711
         BZ    EAEXIT2A            NO - MOVE JOB REGION         YM02711
         DROP  RF                                               YM02711
         CLC   SCT+SCTMSSZE-INSMSCT(E2),EAENDOR REGION ON EXEC  YM02711
         BNE   EAEXIT3             YES - CHECK FOR JOB RD       YM02711
         TM    SCT+SCTSSTAT-INSMSCT,EAADDRBT ADRSPC=REAL IN SCT YM02711
         BO    EAEXIT3             NO - CHECK FOR JOB RD        YM02711
EAEXIT2A DS    0H                                               YM02711
         MVC   SCT+SCTMSSZE-INSMSCT(E2),IWAJOBS6                YM02711
*                                  MOVE IN JOB REGION           YM02711
EAEXIT3  DS    0H
         TM    IWAINTS8,JOBRDNR+JOBRDNC+JOBRDR  RD ON JOB STMT.    AACA
         BZ    EAEXIT4            NO. GO TO EXIT                   AACA
         NI    SCT+SCTSSTAT-INSMSCT,CLFLAGS CLEAR SCTSSTAT        O106
         OC    SCT+SCTSSTAT-INSMSCT(OC1),IWAINTS8  SET JOB RD FLG O106
EAEXIT4  DS    0H                                                  AACA
         TM    SWH,CPSYSFLG       IS THIS CHCKPT/RSTRT EXEC STMT   AACA
         BZ    EAEXIT5            NO. CONTINUE.                    AACA
         OI    SCT+SCTSSTAT-INSMSCT,PROTKEY  ALLOW DSDRP PROTECT  O106
*                                      KEY OF ZERO                O106
EAEXIT5  DS    0H                                                  AACA
         TM    EASW2,EACLCOND      Q. RESTARTING JOB               AACA
         BZ    EAEXIT6              BR - NO                        AACA
         XC    SCT+SCTSDPCD-INSMSCT(CL48),SCT+SCTSDPCD-INSMSCT    O106
*                                      CLEAR STEP CONDITION CODES O106
         NI    EASW2,255-EACLCOND  CLEAR COND. CODE SW.            AACA
EAEXIT6  EQU   *                                                   AACA
         SPACE 3
EAEXITHF DS    0H                                                  AACA
*  PERFORM KEYWORD CHECK.                                       YM00368
         L     RE,TEXTBUFP        ADDR TEXT STRING PREFIX       YM00368
         USING TEXT,RE            PREFIX ADDRESSABILITY         YM00368
         TM    STRINDCS,PROCSTR   PROC STMT?                    YM00368
         BO    EAEXITB            YES, SKIP PERF PROCESSING.    YM00368
         TM    STREINDC,ETXPRCV    STMT INVOKE A PROCEDURE?     YM00368
         BO    EAEXITB             BR YES,PRF ALREADY PROCESSED YM00368*
                                   IN PERFORM ROUTINE.          YM00368
         DROP  RE
         CLI   SCT+SCTPRFMF-INSMSCT,E0 PERFORM SPEC'D ON EXEC?  YM00368
         BNE   EAEXITB            YES, CONTINUE                 YM00368
*  ENTER PERFORM VALUE SPECIFIED ON JOB STMT, OR DEFAULT IF     YM00368
*  JOB VALUE INVALID OR OMITTED.                                YM00368
         MVC   SCT+SCTPRFMF-INSMSCT(E1),JCT+JCTPRFMF-INJMJCT    YM00376
EAEXITB  DS    0H                                               YM00368
         L     RF,EAVHE           SET EXIT                      YM00368
         BR    RF                  TO ROUTER.                   YM00368
*                                                               YM00368
*  ERROR - FAIL JOB AND ISSUE ERROR MESSAGE.                    YM00368
*                                                               YM00368
EAERRTNA DS    0H
         SR    R2,R2
         IC    R2,MSGSEC          ERROR MESSAGE NBR TO R2.
         OI    JCTJSTAT,INCMSTS   FAIL JOB.
         L     RF,EAVGM           LINK TO PUT OUT
         BALR  RE,RF                   ERROR MESSAGE.
         B     EAERRTN1            CONTINUE CLEANUP             YM00382
*********************************************************************
*                                                                   *
*                    CONSTANTS                                      *
*                                                                   *
*********************************************************************
         SPACE
FF       EQU   X'FF'                   ALL ONES
         DS    0F
EABLANK  DC    CL8'        '           8 BLANKS
EATESTOR DC    V(IEFVGT)               TEST AND STORE
EAGETKEP DC    V(IEFVGK)               GET KEY/POS
EAVGM    DC    V(IEFVGM)               MESSAGE MODULE
EAINPUT  DC    V(IEFVGI)               DICTIONARY INPUT ROUTINE
EASEARCH DC    V(IEFVGS)               DICTIONARY SEARCH ROUTINE
EAVHQ    DC    V(IEFVHQ)               Q-MANAGER INTERFACE
EAVHE    DC    V(IEFVHE)           ROUTER.                       Y02668
EAVDBSD  DC    V(IEFVDBSD)        ADDRESS OF DSENQ TABLE RTNE,   Y02668
EAVHR    DC    V(IEFVHR)               ERROR MSG WTO ROUTINE
PROCBADD DC    A(EAPROCB-EABASE)   DISPLACEMENT OF PROC PDT.     Y02668
EA100    DC    H'100'                  CONVERSION OF SECS TO 100THS
*                                      SECS
EA6000   DC    H'6000'                 CONVERSION OF MINS TO 100THS
*                                      SECS
CONHZERO DC    H'0'                HALFWORD ZERO.               YM00368
EAENDOR  DC    XL3'000000'             INDICATES END OF COND FIELDS
EAPGMSD  DC    C'PGM=*.DD'             DDNAME INTO PGM=*.SIOT
EAEVEN   DC    XL5'04C5E5C5D5'         TEXT BUFFER COND 'EVEN' ENTRY
EAONLY   DC    XL5'04D6D5D3E8'         TEXT BUFFER COND 'ONLY' ENTRY
         DS    0F
MAXVAL   DC    XL4'00003FFF'           MAX REGION SIZE           Y01029
EASIOTBT DS    0C                      MASK FOR DISP=(OLD,PASS) NOT
*                                      EQUAL JOBLIB
         DC    AL1(EASIPAS)            SCTSDISP  DISP=  PASS
         DC    X'00'                   SCTSBYT1
         DC    AL1(SCTJOBLB)           SCRSBYT2 JOBLIB
         DC    AL1(EASIOLD)            SCTSBYT3  DISP=  OLD
         DC    X'00'                   SCTBYT4
DSNTLEN  DC    F'168'                  USED TO DIVIDE DSNT REL LEN
*                                                              @ZA15772
EAPXID   EQU   X'0C'                   PARM FIELD EXTENSION ID
MVONE    EQU   1                       LENGTH OF MOVE             O106
MVTWO    EQU   2                       LENGTH OF MOVE             O106
MVTHREE  EQU   3                       LENGTH OF MOVE             O106
MVFOUR   EQU   4                       LENGTH OF MOVE             O106
MVEIGHT  EQU   8                       LENGTH OF MOVE             O106
MV48     EQU   48                      LENGTH OF MOVE             O106
ZEROPRKY EQU   X'FB'                   ZERO PROTECT KEY BIT       O106
INSTPROC EQU   X'80'                                              M4763
DISPLONE EQU   1                       DISPLACEMENT               O106
DISPLZER EQU    0                      DISPLACEMENT                4327
DISPLTWO EQU   2                       DISPLACEMENT               O106
DISPLFOR EQU   4                       DISPLACEMENT             O106
DISPLATE EQU   8                       DISPLACEMENT                4327
DISPLELE EQU   11                      DISPLACEMENT                4327
COMPATE  EQU   8                       LENGTH OF COMPARE           4327
CLTWO    EQU   2                       LENGTH OF CLEAR            O106
CLTHREE  EQU   3                       LENGTH OF CLEAR            O106
CLFOUR   EQU   4                       LENGTH OF CLEAR            O106
CLEIGHT  EQU   8                       LENGTH OF CLEAR            O106
CLTHIRTN EQU   13                      LENGTH OF CLEAR            O106
CL48     EQU   48                      LENGTH OF CLEAR            O106
OC1      EQU   1                                                  O106
OC6      EQU   6                       CHECK FOR TOO MANY COND OR O106
*                                      MULTIPLE OF EVENHS/ONLYS'S O106
COMTWO   EQU   2                       LENGTH OF COMPARE          O106
FRSTSTEP EQU   X'01'         TEST FOR FIRST STEP IN SCT.         Y02113
INITBLK  EQU   X'00'                   INITIALIZE TO ZEROS        O106
CLFLAGS  EQU   X'C7'                   CLEAR FLAGS IN SCTSSTWAT   O106
INIT1    EQU   B'00010000'                                        O106
INIT2    EQU   B'11110000'                                        O106
MAX      EQU   4096                    VALUE OF SECOND BASE       O106
INIT3    EQU   X'0'                                               O106
INIT4    EQU   X'0B'                                              O106
GOSTEP   EQU   X'80'                   EQU IN SCT,SCTGOSTP        O106
ZERSDP   EQU   X'E0'                   ZERO SDP FIELD             O106
LCSREG   EQU   X'01'                   LCS REGION                 O106
PROTKEY  EQU   X'04'                   DSDRP PROTECT KEY          O106
CZERO    DC    CL2'00'
         EJECT
***********************************************************************
**                                                                   **
**             TABLES FOR EXEC ROUTINE                               **
**                                                                   **
***********************************************************************
*
*   BRANCHING TABLE FOR GET KEY/POS.
*
EABRANCH DS    0H
         SPACE
*   EXEC KEY
EAEXECA  KKK   02,0,EAEXEC,EAEXECB
*   TIME= KEY
EATIMEEA KKK   02,0,EATIMEE,EATIMEEB
*   PARM= KEY
EAPARMEA KKK   100,0,EAPARME,EAPARMEB                              AACA
*   COND= KEY
EACONDEA KKK   08,11111111,EACONDE,EACONDEB
*   ACCT= KEY
EAACTEA  KKK   72,0,EAACTE,EAACTEB
*   TIME. KEY
EATIMEPA KKK   03,0,EATIMEP,EATIMEPB
*   PARM. KEY
EAPARMPA KKK   101,0,EAPARMP,EAPARMPB                              AACA
*   COND. KEY
EACONDPA KKK   09,11111111,EACONDP,EACONDPB
*   ACCT. KEY
EAACTPA  KKK   73,0,EAACTP,EAACTPB
*   PROC KEY
EAPROCA  KKK   01,00000000,EAPROC,EAPROCB
*   PGM KEY
EAPGMA   KKK   01,10000000,EAPGM,EAPGMB
*   REGION= KEY
EAREGEA  KKK   02,0,EAREGE,EAREGEB                                 AACA
*   REGION. KEY
EAREGPA  KKK   03,0,EAREGP,EAREGPB                                 AACA
*   ROLL= KEY
EAROLLEA KKK   02,0,EAROLLE,EAROLLEB
*   ROLL. KEY
EAROLLPA KKK   03,0,EAROLLP,EAROLLPB
*   RD. KEY                                                        AACA
EARDPA   KKK   02,0,EARDP,EARDPB                                   AACA
*   RD= KEY                                                        AACA
EARDEA   KKK   01,0,EARDE,EARDEB                                   AACA
*************************DUMMY ENTRY*****************************Y02668
         DC    XL6'0'                                            Y02668
*****************************************************************Y02668
         SPACE                                                     7777
*   SDP= KEY                                                       I241
EASDPEA  KKK   02,0,EASDPE,EASDPEB                                 I241
         SPACE
*   SDP. KEY                                                       I241
EASDPPA  KKK   03,0,EASDPP,EASDPPB                                 I241
         SPACE
*    ADDRSPC= KEY                                                Y01029
EAADDREA KKK   01,0,EAADDRE,EAADDREB                             Y01029
         SPACE
*     ADDRSPC. KEY                                               Y01029
EAADDRPA KKK   02,0,EAADDRP,EAADDRPB                             Y01029
*    PERFORM= KEY                                                Y02655
EAPRFMEA KKK  01,0,EAPRFME,EAPRFMEB                              Y02655
*    PERFORM.= KEY                                               Y02655
EAPRFMPA KKK   02,0,EAPRFMP,EAPRFMPB                             Y02655
*    DYNAMNBR= KEY                                               Y02670
EADYNMEA KKK   01,0,EADYNME,EADYNMEB                             Y02670
*    DYNAMNBR.= KEY                                              Y02670
EADYNMPA KKK   02,0,EADYNMP,EADYNMPB                             Y02670
         EJECT
*
*   PARAMETER DESCRIPTER TABLE FOR TEST & STORE.
*
         SPACE 2
***********************************************************************
*
*****    EXEC  KEYWORD PARAMETER DESCRIPTER TABLE.
*
EAEXECB  EQU   *                  EXEC PDT.
         DC    AL1(EAENDK1-EAEXECB)    LENGTH OF EXEC PDT.
*   STEPNAME - MAX LENGTH = 8 - 1ST CHAR ALPHA - MVC TO EAWORK.
EAST1    EQU   *
         DC    AL1(EAEND1-EAST1)       LENGTH OF STEPNAME PDT.
         DC    XL1'20'                 BYTES CNTRL INFO/BYTES TO COMP.
         DC    FL1'8'                  MAX PARAMETER LENGTH.
         DC    XL1'60'                 FUNCT/TABLE.
         DC    AL1(EASNSV-EAWORK)      OFFSET IN TABLE.
EAEND1   EQU   *                       END STEPNAME POS PDT.
EAENDK1  EQU   *                       END EXEC KEY PDT.
***********************************************************************
         SPACE 2
***********************************************************************
*
*****    PROC  KEYWORD PARAMETER DESCRIPTER TABLE.
*
EAPROCB  EQU   *                  PROC PDT.
         DC    AL1(EAENDK2-EAPROCB)    LENGTH OF PROC PDT.
*   PROCNAME - MAX LENGTH = 8 - 1ST CHAR ALPHA - MOVE TO EAWORK.
EAST2    EQU   *
         DC    AL1(EAEND2-EAST2)       LENGTH OF 1ST PROCNAME PDT.
         DC    XL1'20'                 CONTROL INFO/COMPARE BYTES.
         DC    FL1'8'                  MAXIMUM LENGTH OF PROCNAME.
         DC    XL1'60'                 FUNCT/TABLE.
         DC    AL1(EAPCSV-EAWORK)      OFFSET IN TABLE.
EAEND2   EQU   *
EAENDK2  EQU   *
***********************************************************************
         SPACE 2
***********************************************************************
*
*****    PGM   KEYWORD PARAMETER DESCRIPTER TABLE.
*
EAPGMB   EQU   *                  PGM PDT.
         DC    AL1(EAENDK3-EAPGMB)     LENGTH OF PGM PDT.
*   PROGRAMNAME - CHECK FOR *. - NOT *. MAX LENGTH=8 - MVC TO SCT.
EAST4    EQU   *
         DC    AL1(EAEND4-EAST4)       LENGTH OF 1ST PGMNM PDT.
         DC    XL1'31'                 CONTROL INFO/COMPARE BYTES.
         DC    C'*'                    COMPARE PATTERN.
         DC    XL1'00'                 FUNCT/TABLE.  OR/LWA
         DC    AL1(EASW1-EAWORK)       OFFSET IN TABLE.
         DC    AL1(EAPGMSDF)           BIT PATTERN.
         DC    XL1'50'                 CONTROL INFO/COMPARE BYTES.
         DC    FL1'8'                  MAXIMUM PARAM LENGTH.
         DC    XL1'62'                 FUNCT/TABLE. 1ST ALPHA & MVC/SCT
         DC    AL1(SCTPGMNM-INSMSCT)   OFFSET IN TABLE.
         DC    XL1'00'                 FUNCT/TABLE.  OR/LWA.
         DC    AL1(EASW1-EAWORK)       OFFSET IN TABLE.
         DC    AL1(EAPGMEF)            BIT PATTERN.
EAEND4   EQU   *
EAENDK3  EQU   *
*******************************************************************AABA
         SPACE 2
         SPACE 2
*******************************************************************AABA
*
*****    ACCT  KEYWORD PARAMETER DESCRIPTER TABLE.
*****    ACCT. KEYWORD PARAMETER DESCRIPTER TABLE.
*
         DC    AL1(EAACCTOR)      ACT O'RIDE FLAG (USED BY EAORIDE).
EAACTPB  EQU   *
EAACTEB  EQU   *             (ACT) PDT.  ** NOT USED FOR TEST & STORE**
***********************************************************************
         SPACE 2
***********************************************************************
*
*****    PARM  KEYWORD PARAMETER DESCRIPTER TABLE.
*****    PARM. KEYWORD PARAMETER DESCRIPTER TABLE.
*
         DC    AL1(EAPARMOR)      PARM O'RIDE FLAG (USED BY EAORIDE).
EAPARMPB EQU   *
EAPARMEB EQU   *             (PARM) PDT.
***********************************************************************
         SPACE 2
***********************************************************************
*
*****    TIME  KEYWORD PARAMETER DESCRIPTER TABLE.
*****    TIME. KEYWORD PARAMETER DESCRIPTER TABLE.
*
         DC    AL1(EATIMEOR)      TIME O'RIDE FLAG (USED BY EAORIDE).
EATIMEPB EQU   *
EATIMEEB EQU   *
         DC    AL1(EAENDK6-EATIMEPB)   LENGTH OF (TIME/TIME.) PDT.
*   MINS - CONVERT TO BINARY MOVE TO EATEMP1+1.
EAST7    EQU   *
         DC    AL1(EAEND7-EAST7)       LENGTH OF MINS PDT.
         DC    XL1'50'            BYTES CONTROL INFO/COMPARE BYTES
         DC    FL1'4'             MAXIMUM PARAMETER LENGTH.
         DC    XL1'30'            FUNCT/TABLE. (CVB(3)/EWA)
         DC    AL1(EATEMP1+1-EAWORK)   OFFSET IN EWA.
         DC    FL3'1440'          MAXIMUM NUMBER OF MINUTES.
EAEND7   EQU   *
EAST8    EQU   *
         DC    AL1(EAEND8-EAST8)       LENGTH OF SECS PDT.
         DC    XL1'50'            BYTES CONTROL INFO/COMPARE BYTES
         DC    FL1'2'             MAXIMUM PARAMETER LENGTH.
         DC    XL1'30'            FUNCT/TABLE. (CVB(3)/EWA)
         DC    AL1(EATEMP2+1-EAWORK)   OFFSET IN EWA.
         DC    FL3'59'            MAX NBR CVB.
EAEND8   EQU   *
EAENDK6  EQU   *
***********************************************************************
         SPACE 2
***********************************************************************
*
*****    COND  KEYWORD PARAMETER DESCRIPTER TABLE.
*****    COND. KEYWORD PARAMETER DESCRIPTER TABLE.
*
*   OPERATOR BIT PATTERNS FOR COND KEYWORD.
EAGT     EQU   X'20'              GT OPERATOR.
EAGE     EQU   X'B0'              GE OPERATOR.
EAEQ     EQU   X'80'              EQ OPERATOR.
EANE     EQU   X'70'              NE OPERATOR.
EALE     EQU   X'D0'              LE OPERATOR.
EALT     EQU   X'40'              LT OPERATOR.
*
         DC    AL1(EACONDOR)      COND O'RIDE FLAG (USED BY EAORIDE).
EACONDPB EQU   *
EACONDEB EQU   *
         DC    AL1(EAENDK7-EACONDPB)   LENGTH OF (COND/COND.) PDT.
*   CODE - CONVERT TO BINARY MVC TO EATEMP1(2).
EAST9    EQU   *
         DC    AL1(EAEND9-EAST9)       LENGTH OF CODE PDT.
         DC    XL1'40'                 BYTES CONTROL INFO/COMPARE BYTES
         DC    FL1'4'                  MAXIMUM PARAMETER LENGTH.
         DC    XL1'20'                 FUNCT/TABLE - CVB(2)/EWA.
         DC    AL1(EATEMP1-EAWORK)     OFFSET IN EWA.
         DC    FL2'4095'               MAXIMUM NUMBER FOR CODE.
EAEND9   EQU   *
         SPACE
*   OPERATORS - SEARCH FOR OPERATOR - MVC HEX PATTERN TO EATEMP1+2.
EAST10   EQU   *
         DC    AL1(EAEND10-EAST10)     LENGTH OF OPERATORS PDT.
*   GT
         CCC   GT,EAGT
*   GE
         CCC   GE,EAGE
*   EQ
         CCC   EQ,EAEQ
*   NE
         CCC   NE,EANE
*   LE
         CCC   LE,EALE
*   LT
         CCC   LT,EALT
EAEND10  EQU   *
         SPACE
*   STEPNAME - MOVE TO WORK AREA.
EAST11   EQU   *
         DC    AL1(EAEND11-EAST11)     LENGTH OF STEPNAME PDT.
         DC    XL1'20'                 CONTROL BYTES/COMPARE BYTES.
         DC    FL1'8'                  MAXIMUM PARAMETER LENGTH.
         DC    XL1'50'                 FUNCT/TABLE. (MVC/EWA).
         DC    AL1(EAREGSV-EAWORK)     OFFSET IN EWA.
EAEND11  EQU   *
EAENDK7  EQU   *
***********************************************************************
         SPACE 2
***********************************************************************
*
*****    REGION  KEYWORD PARAMETER DESCRIPTER TABLE.
*****    REGION. KEYWORD PARAMETER DESCRIPTER TABLE.
*
         DC    AL1(EAREGOR)       REGION O'RIDE FLAG (USED BY EAORIDE).
EAREGPB  EQU   *
EAREGEB  EQU   *
         DC    AL1(EAENDK8-EAREGPB)    LENGTH OF (REGION/REGION.) PDT.
*   CONVERT TO BINARY - MVC TO SCT.
EAST12   EQU   *
         DC    AL1(EAEND12-EAST12)     LENGTH OF REGION PDT.
         DC    XL1'40'                 BYTES CONTROL INFO/COMPARE BYTES
         DC    FL1'5'                  MAXIMUM PARAMETER LENGTH.
         DC    XL1'20'                 FUNCT/TABLE. (CVB(2)/EWA)
         DC    AL1(EATEMP1-EAWORK)     OFFSET IN EWA.
         DC    XL2'3FFF'          16383 - MAXIMUM K FOR REGION     1500
EAEND12 EQU    *
EAENDK8 EQU    *
***********************************************************************
         SPACE 3
***********************************************************************
*
*****    ROLL= KEYWORD PARAMETER DESCRIPTER TABLE.               Y01029
*****    ROLL. KEYWORD PARAMETER DESCRIPTER TABLE.
*
EAROLLEB EQU   *
EAROLLPB EQU   *
         DC    AL1(EAENDK9-EAROLLPB)
EAEND14  EQU   *
EAENDK9  EQU   *
*******************************************************************AACA
         SPACE 2
*******************************************************************AACA
*                                                                  AACA
****   RD= KEYWORD PARAMETER DESCRIPTOR TABLE                      AACA
****   RD. KEYWORD PARAMETER DESCRIPTOR TABLE                      AACA
*                                                                  AACA
         DC    AL1(EARDOR)  RD O'RIDE FLAG (USED BY EAORIDE)       AACA
EARDEB   EQU   *                                                   AACA
EARDPB   EQU   *                                                   AACA
         DC    AL1(EAENDK10-EARDPB)  LENGTH OF (RD/RD.) PDT        AACA
EAST15   EQU   *                                                   AACA
         DC    AL1(EAEND15-EAST15)   LENGTH OF POSITIONAL PDT      AACA
         DC    XL1'31'               CTRL BYTES/COMPARE BYTES      AACA
         DC    C'R'                  COMPARE PATTERN               AACA
         DC    XL1'00'               OR / EWA                      AACA
         DC    AL1(EATEMP1-EAWORK)   OFFSET                        AACA
         DC    AL1(SCTDORST)           BIT.  CR                    AACA
         DC    XL1'32'               CTRL/COMPARE                  AACA
         DC    C'NR'                 COMPARE PATTERN               AACA
         DC    XL1'00'               OR/EWA                        AACA
         DC    AL1(EATEMP1-EAWORK)   OFFSET                        AACA
         DC    AL1(SCTNORST)           BIT.  CR                    AACA
         DC    XL1'32'               CTRL/COMPARE                  AACA
         DC    C'NC'                 COMPARE PATTERN               AACA
         DC    XL1'00'               OR/EWA                        AACA
         DC    AL1(EATEMP1-EAWORK)   OFFSET                        AACA
         DC    AL1(SCTNOCKP)           BIT.  CR                    AACA
         DC    XL1'63'               CTRL/COMPARE                  AACA
         DC    C'RNC'                COMPARE PATTERN               AACA
         DC    XL1'00'               OR/EWA                        AACA
         DC    AL1(EATEMP1-EAWORK)   OFFSET                        AACA
         DC    AL1(SCTNOCKP)           BIT.  CR                    AACA
         DC    XL1'00'               OR/EWA                        AACA
         DC    AL1(EATEMP1-EAWORK)   OFFSET                        AACA
         DC    AL1(SCTDORST)           BIT.  CR                    AACA
EAEND15  EQU   *                                                   AACA
EAENDK10 EQU   *                                                   AACA
         SPACE                                                     7777
*******************************************************************I241
*                                                                  I241
*****    SDP  KEYWORD PAPAMETER DESCRIPTER TABLE                   I241
*****    SDP.  KEWORD PAPAMETER DESCRIPTER TABLE                   I241
*                                                                  I241
         DC    AL1(EASDPOR)       SDP O'RIDE FLAG (USED BY EAORIDE)I241
EASDPEB  EQU   *                                                   I241
EASDPPB  EQU   *                                                   I241
         DC    AL1(EAENDK12-EASDPEB) LENGTH OF (SDP/SDP.) PDT      I241
*   CONVERT TO BINARY - CHECK MAXIMUM                              I241
EAST17   EQU   *                                                   I241
         DC    AL1(EAEND17-EAST17) LENGTH OF SDP PDT               I241
         DC    XL1'30'             BYTES CONTROL INFO/COMPARE BYTESI241
         DC    FL1'2'              MAXIMUM PARAMETER LENGTH        I241
         DC    XL1'10'             FUNCTION/TABLE  (CVB(1)/EWA)    I241
         DC    AL1(EATEMP1-EAWORK) OFFSET IN EWA                   I241
         DC    XL1'0F'             MAXIMUM  PRIORITY NUMBER        I241
EAEND17  EQU   *                                                   I241
EAENDK12 EQU   *                                                   I241
         EJECT                                                     I241
*******************************************************************I241
*******************************************************************I241
*          ADDRSPC= KEYWORD PARAMETER DESCRIPTOR TABLE           Y01029
*          ADDRSPC. KEYWORD PARAMETER DESCRIPTOR TABLE           Y01029
*****************************************************************Y01029
         DC    AL1(EAADDROR)      ADDRSPC O'RIDE FLAG            Y01029
EAADDRPB EQU   *                                                 Y01029
EAADDREB EQU   *                                                 Y01029
         DC    AL1(EAENDK13-EAADDRPB)                            Y01029
*                                 LENGTH POSITIONAL PDT
EAST18   EQU   *
         DC    AL1(EAEND18-EAST18)
*                                 LENGTH POSITIONAL PDT
         DC    XL1'34'            CONTROL INFO BYTES
         DC    C'REAL'            COMPARE PATTERN
         DC    XL1'00'            FUNC-TABLE (OR/EWA)
         DC    AL1(EATEMP1-EAWORK)
*                                 OFFSET IN EWA
         DC    AL1(EAADDRBT)      BIT PATTERN
         DC    XL1'04'            CONTROL INFO/COMPARE BYTE
         DC    C'VIRT'            COMPARE PATTERN
EAEND18  EQU   *
EAENDK13 EQU   *
         EJECT
         DC    AL1(EAPRFMOR)                                     Y02655
EAPRFMPB EQU   *                                                 Y02655
EAPRFMEB EQU   *                                                 Y02655
         DC   AL1(EAENDK14-EAPRFMPB) LENGTH POSITIONAL PARAMETER Y02655
EAST19   EQU   *                                                 Y02655
         DC    AL1(EAEND19-EAST19) LENGTH POSITIONAL PARAMETER   Y02655
         DC    XL1'30'            CONTROL INFO/COMPARE BYTES     Y02655
         DC    FL1'3'             MAX PARAMETER LENGTH           Y02655
         DC    XL1'10'            FUNCTION/TABLE                 Y02655
         DC    AL1(EATEMP1-EAWORK) OFFSET IN EWA                 Y02655
         DC    XL1'FF'            MAX NUMBER                     Y02655
EAEND19  EQU   *                                                 Y02655
EAENDK14 EQU   *                                                 Y02655
         EJECT
************************************************************     Y02670
*        DYNAMNBR= KEYWORD PARAMETER DESCRIPTOR TABLE      *     Y02670
*        DYNAMNBR. KEYWORD PARAMETER DESCRIPTOR TABLE      *     Y02670
************************************************************     Y02670
         SPACE
         DC    AL1(EADYNMOR)                                     Y02670
EADYNMPB EQU   *                                                 Y02670
EADYNMEB EQU   *                                                 Y02670
         DC    AL1(EAENDK15-EADYNMPB) LENGTH POSITIONAL PDT      Y02670
EAST20   EQU   *                                                 Y02670
         DC    AL1(EAEND20-EAST20) LENGTH POSITIONAL PDT         Y02670
         DC    XL1'40'            CONTROL INFO/COMPARE BYTES     Y02670
         DC    FL1'4'             MAX PARAMETER LENGTH           Y02670
         DC    XL1'20'            FUNCTION/TABLE                 Y02670
         DC    AL1(EATEMP1-EAWORK) OFFSET IN EWA                 Y02670
         DC    XL2'0663'          MAX NBR                        Y02670
EAEND20  EQU   *                                                 Y02670
EAENDK15 EQU   *                                                 Y02670
PATCH    DC    25F'0'             **********PATCH SPACE**********Y02668
         END
