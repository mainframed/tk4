         TITLE 'INTERPRETER ESTAE RECOVERY ROUTINE                     *
                        '
IEFNB9IR CSECT ,                                                   0001
@MAINENT BALR  @15,0                                               0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IEFNB9IR  73.331'                                 0001
         DROP  @15
@PROLOG  BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
*   SAVER14=REG14;                  /* SAVE REGISTER 14 ON ENTRY     */
         LR    SAVER14,REG14                                       0007
*/* IF REGISTER 0 HAS A CODE OF 12 IN IT,THEN AN SDWA IS NOT       0008
*   AVAILABLE.IN THIS CASE NO PROCESSING IS DONE BECAUSE THE       0008
*   ABEND,OR PROBLEM ENCOUNTERED CANNOT BE HANDLED PROPERLY.         */
*                                                                  0008
*   IF REG0^=TWELVE THEN                                           0008
         SLR   @15,@15                                             0008
         IC    @15,TWELVE                                          0008
         CR    REG0,@15                                            0008
         BE    @RF00008                                            0008
*     DO;                                                          0009
*       SDWAPTR=REG1;               /* SET UP PTR TO WORK AREA       */
         LR    SDWAPTR,REG1                                        0010
*       EREPLPTR=SDWAPARM;          /* PTR TO USER PARAMETERS        */
         L     EREPLPTR,SDWAPARM(,SDWAPTR)                         0011
*/* INITIALIZE RECORD AREA IN SDWA WITH PERTINENT INFORMATION        */
*                                                                  0012
*       SDWAREXN=RTNAME;            /* MOVE EXIT NAME TO SDWA        */
         MVC   SDWAREXN(8,SDWAPTR),RTNAME                          0012
*       SDWAMODN=BLANK8;            /* BLANK MODULE NAME INVOLVED    */
         MVC   SDWAMODN(8,SDWAPTR),BLANK8                          0013
*       SDWACSCT=BLANK8;            /* BLANK CSECT NAME INVOLVED     */
         MVC   SDWACSCT(8,SDWAPTR),BLANK8                          0014
*/* SET UP TO INITIALIZE DUMP FUNCTION                               */
*                                                                  0015
*       REG0=LENDUMP;               /* LENGTH OF DUMP LIST WITH HIGH
*                                      ORDER BYTE OF ZERO SERVING AS
*                                      SUBPOOL NUMBER                */
         L     REG0,LENDUMP                                        0015
*       GEN(GETMAIN R,LV=(0));      /* GET CORE FOR DUMP LIST        */
         GETMAIN R,LV=(0)
*       DUMPLIST=REG1;              /* POINTER TO CORE FOR LIST      */
         LR    DUMPLIST,REG1                                       0017
*/* MOVE DUMP LIST FROM CSECT TO GOTTEN CORE FOR EXECUTE FORMAT      */
*                                                                  0018
*       DUMPCORE(1:LENDUMP)=DUMPMAC(1:LENDUMP);                    0018
*                                                                  0018
         L     @15,LENDUMP                                         0018
         BCTR  @15,0                                               0018
         EX    @15,@SM00468                                        0018
*/* DUMP FUNCTION IS NOW INITIALIZED AND READY FOR SDUMP ISSUANCE    */
*                                                                  0019
*                                                                  0019
*/*P E R C O L A T I O N                                             */
*                                                                  0019
*       IF SDWAPERC=ON THEN         /* WAS THIS ROUTINE PERCOLATED 0019
*                                      TO?                           */
         TM    SDWAPERC(SDWAPTR),B'00010000'                       0019
         BNO   @RF00019                                            0019
*/* ISSUE SETRP MACRO FOR PERCOLATION AND RETURN                     */
*                                                                  0020
*         DO;                       /* SETRP WKAREA(SDWAPTR) DUMP(NO)
*                                      RC(0) RECORD(NO)              */
*           RESPECIFY                                              0021
*            (GPR00P,                                              0021
*             GPR01P,                                              0021
*             GPR14P,                                              0021
*             GPR15P) RSTD;                                        0021
*           GPR01P=SDWAPTR;                                        0022
         LR    GPR01P,SDWAPTR                                      0022
*           GPR01P->SDWARCDE=0;     /* SAVE RC VALUE                 */
         MVI   SDWARCDE(GPR01P),X'00'                              0023
*           GPR01P->SDWARCRD='0'B;  /* TURN OFF RECORD INDICATOR     */
         NI    SDWARCRD(GPR01P),B'01111111'                        0024
*           GPR01P->SDWAREQ='0'B;   /* TURN OFF DUMP INDICATOR       */
         NI    SDWAREQ(GPR01P),B'01111111'                         0025
*           RESPECIFY                                              0026
*            (GPR00P,                                              0026
*             GPR01P,                                              0026
*             GPR14P,                                              0026
*             GPR15P) UNRSTD;                                      0026
*         END;                                                     0027
*       ELSE                        /* NO,CONTINUE PROCESSING        */
*         DO;                                                      0028
         B     @RC00019                                            0028
@RF00019 DS    0H                                                  0029
*                                                                  0029
*/* R E C U R S I O N                                                */
*                                                                  0029
*           IF EREPRCUR=ON THEN     /* RECURSION WITHIN ESTAE      0029
*                                      ENVIRONMENT?                  */
         TM    EREPRCUR(EREPLPTR),B'10000000'                      0029
         BNO   @RF00029                                            0029
*/* ISSUE SETRP MACRO FOR RECURSION AND RETURN                       */
*                                                                  0030
*             DO;                   /* SETRP WKAREA(SDWAPTR) DUMP(NO)
*                                      RC(0) RECORD(YES)             */
*               RESPECIFY                                          0031
*                (GPR00P,                                          0031
*                 GPR01P,                                          0031
*                 GPR14P,                                          0031
*                 GPR15P) RSTD;                                    0031
*               GPR01P=SDWAPTR;                                    0032
         LR    GPR01P,SDWAPTR                                      0032
*               GPR01P->SDWARCDE=0; /* SAVE RC VALUE                 */
         MVI   SDWARCDE(GPR01P),X'00'                              0033
*               GPR01P->SDWARCRD='1'B;/* TURN ON RECORD INDICATOR    */
         OI    SDWARCRD(GPR01P),B'10000000'                        0034
*               GPR01P->SDWAREQ='0'B;/* TURN OFF DUMP INDICATOR      */
         NI    SDWAREQ(GPR01P),B'01111111'                         0035
*               RESPECIFY                                          0036
*                (GPR00P,                                          0036
*                 GPR01P,                                          0036
*                 GPR14P,                                          0036
*                 GPR15P) UNRSTD;                                  0036
*             END;                                                 0037
*           ELSE                                                   0038
*                                                                  0038
*/*      TURN ON THE RECURSION BIT IN THE USER AREA.THIS WILL      0038
*        SIGNAL THAT AN ABEND OCCURRED DURING RECOVERY PROCESSING    */
*                                                                  0038
*             DO;                                                  0038
         B     @RC00029                                            0038
@RF00029 DS    0H                                                  0039
*               EREPRCUR=ON;        /* TURN ON RECURSION BIT       0039
*                                                                    */
         OI    EREPRCUR(EREPLPTR),B'10000000'                      0039
*                                                                  0040
*/*R E S T A R T  I N T E R R U P T                                  */
*                                                                  0040
*               IF SDWARKEY=ON THEN /* EXTERNAL INTERRUPT SIGNALLING
*                                      RESTART                       */
         TM    SDWARKEY(SDWAPTR),B'00100000'                       0040
         BNO   @RF00040                                            0040
*                 DO;                                              0041
*                                                                  0041
*/* ISSUE SETRP MACRO FOR RESTART INTERRUPT                          */
*                                                                  0042
*                   DO;             /* SETRP WKAREA(SDWAPTR) DUMP(NO)
*                                      RC(0) RECORD(YES)             */
*                     RESPECIFY                                    0043
*                      (GPR00P,                                    0043
*                       GPR01P,                                    0043
*                       GPR14P,                                    0043
*                       GPR15P) RSTD;                              0043
*                     GPR01P=SDWAPTR;                              0044
         LR    GPR01P,SDWAPTR                                      0044
*                     GPR01P->SDWARCDE=0;/* SAVE RC VALUE            */
         MVI   SDWARCDE(GPR01P),X'00'                              0045
*                     GPR01P->SDWARCRD='1'B;/* TURN ON RECORD      0046
*                                      INDICATOR                     */
         OI    SDWARCRD(GPR01P),B'10000000'                        0046
*                     GPR01P->SDWAREQ='0'B;/* TURN OFF DUMP INDICATOR*/
         NI    SDWAREQ(GPR01P),B'01111111'                         0047
*                     RESPECIFY                                    0048
*                      (GPR00P,                                    0048
*                       GPR01P,                                    0048
*                       GPR14P,                                    0048
*                       GPR15P) UNRSTD;                            0048
*                   END;                                           0049
*                   RESPECIFY                                      0050
*                     SDWA BASED(SDWAPTR);                         0050
*                                                                  0050
*/* ISSUE SDUMP FOR DEBUGGING PURPOSES AND RETURN                    */
*                                                                  0051
*                   GEN;                                           0051
        SDUMP HDR='RESTART INTERRUPT IN INTERPRETER**IEFNB9IR**',MF=(E,,
               (9))
*                 END;                                             0052
*               ELSE                /* NO CONTINUE PROCESSING        */
*                 DO;                                              0053
         B     @RC00040                                            0053
@RF00040 DS    0H                                                  0054
*                                                                  0054
*/* U N E X P E C T E D  E R R O R S                                 */
*/* ONLY THE 0B0 ABEND AND PROGRAM CHECKS ARE EXPECTED ERRORS FOR  0054
*   THIS RECOVERY ROUTINE.IF IT IS NEITHER,THEN THE SETRP IS       0054
*   ISSUED AND A RETURN IS MADE.                                     */
*                                                                  0054
*                   IF(SDWACMPC^=ZEROB0)&(SDWAPCHK=OFF) THEN       0054
*                                                                  0054
         CLC   SDWACMPC(3,SDWAPTR),ZEROB0                          0054
         BE    @RF00054                                            0054
         TM    SDWAPCHK(SDWAPTR),B'01000000'                       0054
         BNZ   @RF00054                                            0054
*/* ISSUE SETRP AND ERROR MESSAGE FOR UNEXPECTED ERRORS              */
*                                                                  0055
*                     DO;           /* SETRP WKAREA(SDWAPTR) DUMP(NO)
*                                      RC(0) RECORD(YES)             */
*                       RESPECIFY                                  0056
*                        (GPR00P,                                  0056
*                         GPR01P,                                  0056
*                         GPR14P,                                  0056
*                         GPR15P) RSTD;                            0056
*                       GPR01P=SDWAPTR;                            0057
         LR    GPR01P,SDWAPTR                                      0057
*                       GPR01P->SDWARCDE=0;/* SAVE RC VALUE          */
         MVI   SDWARCDE(GPR01P),X'00'                              0058
*                       GPR01P->SDWARCRD='1'B;/* TURN ON RECORD    0059
*                                      INDICATOR                     */
         OI    SDWARCRD(GPR01P),B'10000000'                        0059
*                       GPR01P->SDWAREQ='0'B;/* TURN OFF DUMP      0060
*                                      INDICATOR                     */
         NI    SDWAREQ(GPR01P),B'01111111'                         0060
*                       RESPECIFY                                  0061
*                        (GPR00P,                                  0061
*                         GPR01P,                                  0061
*                         GPR14P,                                  0061
*                         GPR15P) UNRSTD;                          0061
*                     END;                                         0062
*                   ELSE                                           0063
*                                                                  0063
*/* 0 B 0  ABEND , E X P E C T E D  E R R O R S                      */
*                                                                  0063
*                     DO;                                          0063
         B     @RC00054                                            0063
@RF00054 DS    0H                                                  0064
*                       RESPECIFY                                  0064
*                        (REG4,                                    0064
*                         COUNT,                                   0064
*                         REG6,                                    0064
*                         REG7) RSTD;                              0064
*                                                                  0064
*/* ISSUE SETRP MACRO FOR EXPECTED ERRORS @YM02460                   */
*                                                                  0065
*                       DO;         /* SETRP WKAREA(SDWAPTR) DUMP(NO)
*                                      RC(4) FRESDWA(YES) RECORD(YES)
*                                      RETADDR(IEFNB9IT)             */
*                         RESPECIFY                                0066
*                          (GPR00P,                                0066
*                           GPR01P,                                0066
*                           GPR14P,                                0066
*                           GPR15P) RSTD;                          0066
*                         GPR01P=SDWAPTR;                          0067
         LR    GPR01P,SDWAPTR                                      0067
*                         GPR01P->SDWARCDE=4;/* STORE RC INTO SDWA   */
         MVI   SDWARCDE(GPR01P),X'04'                              0068
*                         GPR01P->SDWARTYA=ADDR(IEFNB9IT);/* SAVE  0069
*                                      RETRY ADDRESS                 */
         L     @11,@CV00422                                        0069
         ST    @11,SDWARTYA(,GPR01P)                               0069
*                         GPR01P->SDWAFREE='1'B;/* SET FLAG TO FREE
*                                      SDWA                          */
*                         GPR01P->SDWARCRD='1'B;/* TURN ON RECORD  0071
*                                      INDICATOR                     */
         OI    SDWAFREE(GPR01P),B'10000100'                        0071
*                         GPR01P->SDWAREQ='0'B;/* TURN OFF DUMP    0072
*                                      INDICATOR                     */
         NI    SDWAREQ(GPR01P),B'01111111'                         0072
*                         RESPECIFY                                0073
*                          (GPR00P,                                0073
*                           GPR01P,                                0073
*                           GPR14P,                                0073
*                           GPR15P) UNRSTD;                        0073
*                       END;                                       0074
*                       RESPECIFY                                  0075
*                         SDWA BASED(SDWAPTR);                     0075
*                                                                  0075
*/* ISSUE SDUMP FOR DEBUGGING PURPOSES                               */
*                                                                  0076
*                       GEN                                        0076
*(SDUMP HDR='EXPECTED INTERPRETER ABEND**IEFNB9IR**',MF=(E,(9)));  0076
         SDUMP HDR='EXPECTED INTERPRETER ABEND**IEFNB9IR**',MF=(E,(9))
*                     END;                                         0077
*                                                                  0078
*/* I S S U E  E R R O R  M S G.  I E F 6 8 3 I                      */
*/* CORE MUST BE GOTTEN FOR THE LIST FORM OF THE WRITE TO OPERATOR 0078
*   PARAMETER LIST.IT IS REQUESTED IN SUBPOOL ZERO.                  */
*                                                                  0078
*                   REG0=WTOLEN;    /* ADCON FOR THE LENGTH OF THE 0078
*                                      LIST ALSO HAS A ZERO HIGH   0078
*                                      ORDER BYTE THAT SERVES AS   0078
*                                      SUBPOOL NUMBER.               */
@RC00054 L     REG0,WTOLEN                                         0078
*                   GEN(GETMAIN R,LV=(0));/* GET CORE FOR LIST       */
         GETMAIN R,LV=(0)
*                   REG4=REG1;      /* SETUP ADDRESSABILITY TO LIST  */
         LR    REG4,REG1                                           0080
*/* THE MESSAGE LIST DEFINED IN THE CSECT MUST BE MOVED INTO THE   0081
*   GOTTEN CORE.                                                     */
*                                                                  0081
*                   WTOCORE(1:WTOLEN)=WTOCSECT(1:WTOLEN);          0081
*                                                                  0081
         L     @15,WTOLEN                                          0081
         BCTR  @15,0                                               0081
         EX    @15,@SM00472                                        0081
*/* THE THREE 4 BIT DIGITS OF THE COMPLETION CODE ARE PLACED INTO THE
*   THREE BYTE COMPLETION CODE FIELD IN THE MESSAGE.THE 4 BIT CHARACT-
*   ERS ARE TRANSLATED INTO 8 BIT PRINTABLE CHARACTERS WITHIN THE  0082
*   MESSAGE ITSELF.THEN THE MESSAGE IS ISSUED.                       */
*                                                                  0082
*                   REG7=SDWAABCC;  /* ABEND CODE TO LIST            */
         L     REG7,SDWAABCC(,SDWAPTR)                             0082
*                   GEN(SLL REG7,8(0));                            0083
         SLL REG7,8(0)
*                   DO COUNT=0 TO 2;/* TRANSLATE ABEND CODE INTO MSG */
         SLR   COUNT,COUNT                                         0084
@DL00084 DS    0H                                                  0085
*                     GEN CODE REFS(COUNT,CHARSTRG);               0085
       SR    REG6,REG6     ZERO REG6 FOR NEXT CHARACTER.
       SLDL  REG6,4(0)     SHIFT THE 4 BIT MEMBER OF CODE INTO REG6
       IC    REG6,CHARSTRG(REG6)      PICK PRINTABLE CHARACTER
       STC   REG6,43(COUNT,REG4)     INSERT INTO MESSAGE TO PRINT
*                   END;                                           0086
*                                                                  0086
         AH    COUNT,@CH00040                                      0086
         CH    COUNT,@CH00061                                      0086
         BNH   @DL00084                                            0086
*/* ISSUE THE WRITE TO OPERATOR MESSAGE DESCRIBING ABEND.            */
*                                                                  0087
*                   GEN(WTO MF=(E,(4)));                           0087
*                                                                  0087
         WTO MF=(E,(4))
*/* FREE THE CORE GOTTEN FOR THE WTO LIST.                           */
*                                                                  0088
*                   REG0=WTOLEN;    /* LENGTH AND SUBPOOL NUMBER     */
         L     REG0,WTOLEN                                         0088
*                   REG1=REG4;      /* ADDRESS OF WTO LIST           */
         LR    REG1,REG4                                           0089
*                   GEN(FREEMAIN R,LV=(0),A=(1));/* FREE CORE        */
         FREEMAIN R,LV=(0),A=(1)
*                   RESPECIFY                                      0091
*                    (REG4,                                        0091
*                     COUNT,                                       0091
*                     REG6,                                        0091
*                     REG7) UNRSTD;                                0091
*                 END;                                             0092
*             END;                                                 0093
@RC00040 DS    0H                                                  0094
*         END;                                                     0094
@RC00029 DS    0H                                                  0095
*                                                                  0095
*/* FREE THE GOTTEN DUMP LIST                                        */
*                                                                  0095
*       REG0=LENDUMP;               /* LENGTH OF DUMP LIST WITH HIGH
*                                      ORDER BYTE OF ZERO SERVING AS
*                                      SUBPOOL NUMBER                */
@RC00019 L     REG0,LENDUMP                                        0095
*       REG1=DUMPLIST;              /* ADDRESS OF DUMP LIST IN CORE  */
         LR    REG1,DUMPLIST                                       0096
*       GEN(FREEMAIN R,LV=(0),A=(1));/* FREE THE CORE                */
         FREEMAIN R,LV=(0),A=(1)
*     END;                                                         0098
*                                                                  0098
*/* SET UP TO RETURN                                                 */
*                                                                  0099
*   REG14=SAVER14;                  /* RESTORE REGISTER 14 TO RETURN
*                                      TO RTM                        */
@RF00008 LR    REG14,SAVER14                                       0099
*/* RETURN CODE OF ZERO IS ALWAYS PASSED BACK IN REGISTER 15.      0100
*   UNDER NORMAL CONDITIONS RTM IGNORES REGISTER 15.IF NO SDWA     0100
*   WAS PASSED ,REGISTER 15 WITH A ZERO CODE SIGNALS NO RETRY        */
*                                                                  0100
*   RETURN CODE(0);                                                0100
         SLR   @15,@15                                             0100
@EL00001 DS    0H                                                  0100
@EF00001 DS    0H                                                  0100
@ER00001 BR    @14                                                 0100
*   DECLARE                         /* GENERAL PURPOSE REGISTERS     */
*     GPR00P PTR(31) REG(0),                                       0101
*     GPR01P PTR(31) REG(1),                                       0101
*     GPR14P PTR(31) REG(14),                                      0101
*     GPR15P PTR(31) REG(15);                                      0101
*   DECLARE                         /* COMMON VARIABLES              */
*     I256C CHAR(256) BASED,                                       0102
*     I031F FIXED(31) BASED,                                       0102
*     I031P PTR(31) BASED,                                         0102
*     I015F FIXED(15) BASED,                                       0102
*     I015P PTR(15) BASED,                                         0102
*     I008P PTR(8) BASED,                                          0102
*     I001C CHAR(1) BASED;                                         0102
*   END IEFNB9IR                                                   0103
*                                                                  0103
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IHASDWA )                                       */
*/*%INCLUDE SYSLIB  (IEFZB9RD)                                       */
*                                                                  0103
*       ;                                                          0103
@DATA    DS    0H
@CH00040 DC    H'1'
@CH00061 DC    H'2'
@SM00468 MVC   DUMPCORE(0,DUMPLIST),DUMPMAC
@SM00472 MVC   WTOCORE(0,REG4),WTOCSECT
@DATD    DSECT
         DS    0F
IEFNB9IR CSECT
         DS    0F
@DATD    DSECT
         DS    0D
IEFNB9IR CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV00422 DC    V(IEFNB9IT)
         DS    0D
         DS    CL1
ZEROB0   DC    XL3'0B0000'
NBIRPTCH DS    CL25
         ORG   NBIRPTCH
@NM00052 DC    25X'00'
         ORG   NBIRPTCH+25
         DS    CL3
CHARSTRG DC    CL16'0123456789ABCDEF'
TWELVE   DC    X'0C'
RTNAME   DC    CL8'IEFNB9IR'
BLANK8   DC    CL8'        '
IEFNB9IR CSECT
WTOCSECT WTO  'IEF683I INTERPRETER TERMINATED DUE TO S    ABEND',DESC=66
               ,ROUTCDE=2,MF=L
WTOLEN   DC   A(*-WTOCSECT)
DUMPMAC SDUMP BUFFER=NO,QUIESCE=YES,SDATA=(SQA,LSQA,SWA,RGN,LPA),MF=L
LENDUMP  DC   A(*-DUMPMAC)
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IEFNB9IR CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
SDWAPTR  EQU   @02
EREPLPTR EQU   @03
REG0     EQU   @00
REG1     EQU   @01
REG4     EQU   @04
COUNT    EQU   @05
REG6     EQU   @06
REG7     EQU   @07
SAVER14  EQU   @08
DUMPLIST EQU   @09
REG14    EQU   @14
GPR00P   EQU   @00
GPR01P   EQU   @01
GPR14P   EQU   @14
GPR15P   EQU   @15
SDWA     EQU   0
SDWAPARM EQU   SDWA
SDWAFIOB EQU   SDWA+4
SDWAABCC EQU   SDWAFIOB
SDWACMPF EQU   SDWAABCC
SDWAREQ  EQU   SDWACMPF
SDWACMPC EQU   SDWAABCC+1
SDWACTL1 EQU   SDWA+8
SDWACMKA EQU   SDWACTL1
SDWAMWPA EQU   SDWACTL1+1
SDWAPMKA EQU   SDWACTL1+4
SDWACTL2 EQU   SDWA+16
SDWACMKP EQU   SDWACTL2
SDWAMWPP EQU   SDWACTL2+1
SDWAPMKP EQU   SDWACTL2+4
SDWAGRSV EQU   SDWA+24
SDWANAME EQU   SDWA+88
SDWAEC1  EQU   SDWA+104
SDWAEMK1 EQU   SDWAEC1
SDWAMWP1 EQU   SDWAEC1+1
SDWAINT1 EQU   SDWAEC1+2
SDWANXT1 EQU   SDWAEC1+4
SDWAAEC1 EQU   SDWA+112
SDWAILC1 EQU   SDWAAEC1+1
SDWAINC1 EQU   SDWAAEC1+2
SDWAICD1 EQU   SDWAINC1+1
SDWAEC2  EQU   SDWA+120
SDWAEMK2 EQU   SDWAEC2
SDWAMWP2 EQU   SDWAEC2+1
SDWAINT2 EQU   SDWAEC2+2
SDWANXT2 EQU   SDWAEC2+4
SDWAAEC2 EQU   SDWA+128
SDWAILC2 EQU   SDWAAEC2+1
SDWAINC2 EQU   SDWAAEC2+2
SDWAICD2 EQU   SDWAINC2+1
SDWASRSV EQU   SDWA+136
SDWAIDNT EQU   SDWA+200
SDWAMCH  EQU   SDWA+204
SDWASTCK EQU   SDWAMCH
SDWAMCHI EQU   SDWAMCH+8
SDWAMCHS EQU   SDWAMCHI
SDWAMCHD EQU   SDWAMCHI+1
SDWARSR1 EQU   SDWAMCH+12
SDWARSR2 EQU   SDWAMCH+13
SDWAFLGS EQU   SDWA+232
SDWAERRA EQU   SDWAFLGS
SDWAPCHK EQU   SDWAERRA
SDWARKEY EQU   SDWAERRA
SDWAERRB EQU   SDWAFLGS+1
SDWAERRC EQU   SDWAFLGS+2
SDWAPERC EQU   SDWAERRC
SDWAERRD EQU   SDWAFLGS+3
SDWAIOFS EQU   SDWA+238
SDWARTYA EQU   SDWA+240
SDWACPUA EQU   SDWA+248
SDWAPARQ EQU   SDWA+252
SDWARCDE EQU   SDWAPARQ
SDWAACF2 EQU   SDWAPARQ+1
SDWARCRD EQU   SDWAACF2
SDWAFREE EQU   SDWAACF2
SDWAACF3 EQU   SDWAPARQ+2
SDWAACF4 EQU   SDWAPARQ+3
SDWALKWA EQU   SDWA+256
SDWALKWS EQU   SDWALKWA
SDWARECP EQU   SDWA+292
SDWAMODN EQU   SDWARECP
SDWACSCT EQU   SDWARECP+8
SDWAREXN EQU   SDWARECP+16
SDWASNPA EQU   SDWA+320
SDWADUMP EQU   SDWASNPA
SDWADPFS EQU   SDWADUMP+1
SDWADDAT EQU   SDWASNPA+4
SDWASDAT EQU   SDWADDAT
SDWAPDAT EQU   SDWADDAT+2
SDWADPSA EQU   SDWA+328
SDWADPSL EQU   SDWADPSA
SDWARA   EQU   SDWA+400
SDWADPVA EQU   SDWARA+2
EREPL    EQU   0
EREPFLGS EQU   EREPL+12
EREPFLG1 EQU   EREPFLGS
EREPRCUR EQU   EREPFLG1
WTOCORE  EQU   0
DUMPCORE EQU   0
I001C    EQU   0
I008P    EQU   0
I015F    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
I256C    EQU   0
*                                      START UNREFERENCED COMPONENTS
@NM00051 EQU   EREPL+16
@NM00050 EQU   EREPFLGS+1
@NM00049 EQU   EREPFLG1
EREPLRSV EQU   EREPL+8
EREPLIWA EQU   EREPL+4
EREPLCWA EQU   EREPL
@NM00048 EQU   SDWA+512
SDWAVRA  EQU   SDWARA+4
SDWAURAL EQU   SDWARA+3
@NM00047 EQU   SDWADPVA
SDWAEBC  EQU   SDWADPVA
SDWAHEX  EQU   SDWADPVA
SDWAVRAL EQU   SDWARA
@NM00046 EQU   SDWA+396
SDWACOMP EQU   SDWA+392
SDWARCPL EQU   SDWA+364
@NM00045 EQU   SDWADPSA+32
SDWATO4  EQU   SDWADPSL+28
SDWAFRM4 EQU   SDWADPSL+24
SDWATO3  EQU   SDWADPSL+20
SDWAFRM3 EQU   SDWADPSL+16
SDWATO2  EQU   SDWADPSL+12
SDWAFRM2 EQU   SDWADPSL+8
SDWATO1  EQU   SDWADPSL+4
SDWAFRM1 EQU   SDWADPSL
@NM00044 EQU   SDWADDAT+3
@NM00043 EQU   SDWAPDAT
SDWAUSPL EQU   SDWAPDAT
SDWADPSW EQU   SDWAPDAT
SDWATJPA EQU   SDWAPDAT
SDWATLPA EQU   SDWAPDAT
SDWADREG EQU   SDWAPDAT
SDWADSAH EQU   SDWAPDAT
SDWADSAS EQU   SDWAPDAT
@NM00042 EQU   SDWADDAT+1
@NM00041 EQU   SDWASDAT
SDWAQQS  EQU   SDWASDAT
SDWACBS  EQU   SDWASDAT
SDWAGTF  EQU   SDWASDAT
SDWASWA  EQU   SDWASDAT
SDWALSQA EQU   SDWASDAT
SDWASQA  EQU   SDWASDAT
SDWANUC  EQU   SDWASDAT
@NM00040 EQU   SDWADUMP+2
@NM00039 EQU   SDWADPFS
SDWASLST EQU   SDWADPFS
@NM00038 EQU   SDWADPFS
SDWADLST EQU   SDWADPFS
SDWADPT  EQU   SDWADPFS
SDWADPID EQU   SDWADUMP
SDWADPLA EQU   SDWA+316
@NM00037 EQU   SDWALKWA+32
SDWATALW EQU   SDWALKWS+28
SDWATDLW EQU   SDWALKWS+24
SDWATNLW EQU   SDWALKWS+20
SDWAAPLW EQU   SDWALKWS+16
SDWAIPLW EQU   SDWALKWS+12
SDWAILLW EQU   SDWALKWS+8
SDWAIULW EQU   SDWALKWS+4
SDWAICLW EQU   SDWALKWS
SDWAFLLK EQU   SDWAACF4
SDWACMS  EQU   SDWAACF4
SDWAOPTM EQU   SDWAACF4
SDWATADB EQU   SDWAACF4
SDWATDNB EQU   SDWAACF4
SDWATNCB EQU   SDWAACF4
SDWAILCH EQU   SDWAACF4
SDWAIUCB EQU   SDWAACF4
SDWAICAT EQU   SDWAACF3
SDWAIPRG EQU   SDWAACF3
SDWASALL EQU   SDWAACF3
SDWAASMP EQU   SDWAACF3
SDWADISP EQU   SDWAACF3
@NM00036 EQU   SDWAACF3
@NM00035 EQU   SDWAACF2
SDWAUPRG EQU   SDWAACF2
@NM00034 EQU   SDWAACF2
SDWASPIN EQU   SDWAACF2
@NM00033 EQU   SDWAACF2
SDWALCPU EQU   SDWACPUA+2
@NM00032 EQU   SDWACPUA
SDWARECA EQU   SDWA+244
@NM00031 EQU   SDWA+239
@NM00030 EQU   SDWAIOFS
SDWANIOP EQU   SDWAIOFS
SDWANOIO EQU   SDWAIOFS
SDWAIOHT EQU   SDWAIOFS
SDWAIOQR EQU   SDWAIOFS
SDWAFMID EQU   SDWA+236
@NM00029 EQU   SDWAERRD
SDWAMCIV EQU   SDWAERRD
SDWARPIV EQU   SDWAERRD
SDWAMABD EQU   SDWAERRD
SDWACTS  EQU   SDWAERRD
SDWASTAE EQU   SDWAERRD
SDWANRBE EQU   SDWAERRD
SDWACLUP EQU   SDWAERRD
@NM00028 EQU   SDWAERRC
SDWAEAS  EQU   SDWAERRC
SDWAIRB  EQU   SDWAERRC
SDWASTAI EQU   SDWAERRC
SDWASTAF EQU   SDWAERRC
SDWASRBM EQU   SDWAERRB
SDWALDIS EQU   SDWAERRB
SDWAENRB EQU   SDWAERRB
SDWATYP1 EQU   SDWAERRB
@NM00027 EQU   SDWAERRB
SDWAPGIO EQU   SDWAERRA
SDWATEXC EQU   SDWAERRA
SDWASVCE EQU   SDWAERRA
SDWAABTM EQU   SDWAERRA
SDWASVCD EQU   SDWAERRA
SDWAMCHK EQU   SDWAERRA
SDWATIME EQU   SDWAMCH+20
SDWARFSA EQU   SDWAMCH+16
@NM00026 EQU   SDWAMCH+14
SDWAVEQR EQU   SDWARSR2
SDWAPGFX EQU   SDWARSR2
SDWAFLSQ EQU   SDWARSR2
SDWAFSQA EQU   SDWARSR2
SDWANUCL EQU   SDWARSR2
SDWASPER EQU   SDWARSR2
SDWAINTC EQU   SDWARSR2
SDWAOFLN EQU   SDWARSR2
SDWACHNG EQU   SDWARSR1
SDWAMSER EQU   SDWARSR1
@NM00025 EQU   SDWARSR1
SDWACPID EQU   SDWAMCH+10
SDWATERR EQU   SDWAMCHD
SDWAFPRX EQU   SDWAMCHD
SDWAINSF EQU   SDWAMCHD
SDWAACR  EQU   SDWAMCHD
SDWASCK  EQU   SDWAMCHD
SDWAPSWU EQU   SDWAMCHD
SDWAREGU EQU   SDWAMCHD
SDWASKYF EQU   SDWAMCHD
@NM00024 EQU   SDWAMCHS
SDWARSRF EQU   SDWAMCHS
SDWARSRC EQU   SDWAMCHS
SDWAINVP EQU   SDWAMCHS
SDWATSVL EQU   SDWAMCHS
SDWARCDF EQU   SDWAMCHS
SDWASRVL EQU   SDWAMCHS
SDWASCKE EQU   SDWASTCK+4
SDWASCKB EQU   SDWASTCK
SDWALNTH EQU   SDWAIDNT+1
SDWASPID EQU   SDWAIDNT
SDWASR15 EQU   SDWASRSV+60
SDWASR14 EQU   SDWASRSV+56
SDWASR13 EQU   SDWASRSV+52
SDWASR12 EQU   SDWASRSV+48
SDWASR11 EQU   SDWASRSV+44
SDWASR10 EQU   SDWASRSV+40
SDWASR09 EQU   SDWASRSV+36
SDWASR08 EQU   SDWASRSV+32
SDWASR07 EQU   SDWASRSV+28
SDWASR06 EQU   SDWASRSV+24
SDWASR05 EQU   SDWASRSV+20
SDWASR04 EQU   SDWASRSV+16
SDWASR03 EQU   SDWASRSV+12
SDWASR02 EQU   SDWASRSV+8
SDWASR01 EQU   SDWASRSV+4
SDWASR00 EQU   SDWASRSV
SDWATRN2 EQU   SDWAAEC2+4
SDWAIPC2 EQU   SDWAICD2
SDWAIMC2 EQU   SDWAICD2
SDWAIPR2 EQU   SDWAICD2
@NM00023 EQU   SDWAINC2
@NM00022 EQU   SDWAILC2
SDWAIL2  EQU   SDWAILC2
@NM00021 EQU   SDWAILC2
@NM00020 EQU   SDWAAEC2
SDWAADD2 EQU   SDWANXT2+1
@NM00019 EQU   SDWANXT2
@NM00018 EQU   SDWAEC2+3
SDWASGN2 EQU   SDWAINT2
SDWAEXP2 EQU   SDWAINT2
SDWADEC2 EQU   SDWAINT2
SDWAFPO2 EQU   SDWAINT2
SDWACC2  EQU   SDWAINT2
@NM00017 EQU   SDWAINT2
SDWAPGM2 EQU   SDWAMWP2
SDWAWAT2 EQU   SDWAMWP2
SDWAMCK2 EQU   SDWAMWP2
SDWAECT2 EQU   SDWAMWP2
SDWAKEY2 EQU   SDWAMWP2
SDWAEXT2 EQU   SDWAEMK2
SDWAIO2  EQU   SDWAEMK2
SDWATRM2 EQU   SDWAEMK2
@NM00016 EQU   SDWAEMK2
SDWAPER2 EQU   SDWAEMK2
@NM00015 EQU   SDWAEMK2
SDWATRAN EQU   SDWAAEC1+4
SDWAIPC1 EQU   SDWAICD1
SDWAIMC1 EQU   SDWAICD1
SDWAIPR1 EQU   SDWAICD1
@NM00014 EQU   SDWAINC1
@NM00013 EQU   SDWAILC1
SDWAIL1  EQU   SDWAILC1
@NM00012 EQU   SDWAILC1
@NM00011 EQU   SDWAAEC1
SDWAADD1 EQU   SDWANXT1+1
@NM00010 EQU   SDWANXT1
@NM00009 EQU   SDWAEC1+3
SDWASGN1 EQU   SDWAINT1
SDWAEXP1 EQU   SDWAINT1
SDWADEC1 EQU   SDWAINT1
SDWAFPO1 EQU   SDWAINT1
SDWACC1  EQU   SDWAINT1
@NM00008 EQU   SDWAINT1
SDWAPGM1 EQU   SDWAMWP1
SDWAWAT1 EQU   SDWAMWP1
SDWAMCK1 EQU   SDWAMWP1
SDWAECT1 EQU   SDWAMWP1
SDWAKEY1 EQU   SDWAMWP1
SDWAEXT1 EQU   SDWAEMK1
SDWAIO1  EQU   SDWAEMK1
SDWATRM1 EQU   SDWAEMK1
@NM00007 EQU   SDWAEMK1
SDWAPER1 EQU   SDWAEMK1
@NM00006 EQU   SDWAEMK1
SDWAIOBR EQU   SDWA+100
SDWAEPA  EQU   SDWA+96
@NM00005 EQU   SDWANAME+4
SDWARBAD EQU   SDWANAME
SDWAGR15 EQU   SDWAGRSV+60
SDWAGR14 EQU   SDWAGRSV+56
SDWAGR13 EQU   SDWAGRSV+52
SDWAGR12 EQU   SDWAGRSV+48
SDWAGR11 EQU   SDWAGRSV+44
SDWAGR10 EQU   SDWAGRSV+40
SDWAGR09 EQU   SDWAGRSV+36
SDWAGR08 EQU   SDWAGRSV+32
SDWAGR07 EQU   SDWAGRSV+28
SDWAGR06 EQU   SDWAGRSV+24
SDWAGR05 EQU   SDWAGRSV+20
SDWAGR04 EQU   SDWAGRSV+16
SDWAGR03 EQU   SDWAGRSV+12
SDWAGR02 EQU   SDWAGRSV+8
SDWAGR01 EQU   SDWAGRSV+4
SDWAGR00 EQU   SDWAGRSV
SDWANXTP EQU   SDWACTL2+5
SDWASGP  EQU   SDWAPMKP
SDWAEUP  EQU   SDWAPMKP
SDWADOP  EQU   SDWAPMKP
SDWAFPP  EQU   SDWAPMKP
SDWACCP  EQU   SDWAPMKP
SDWAILP  EQU   SDWAPMKP
SDWAINTP EQU   SDWACTL2+2
SDWASPVP EQU   SDWAMWPP
SDWAWATP EQU   SDWAMWPP
SDWAMCKP EQU   SDWAMWPP
@NM00004 EQU   SDWAMWPP
SDWAKEYP EQU   SDWAMWPP
SDWAEXTP EQU   SDWACMKP
SDWAIOP  EQU   SDWACMKP
SDWANXTA EQU   SDWACTL1+5
SDWASGA  EQU   SDWAPMKA
SDWAEUA  EQU   SDWAPMKA
SDWADOA  EQU   SDWAPMKA
SDWAFPA  EQU   SDWAPMKA
SDWACCA  EQU   SDWAPMKA
SDWAILA  EQU   SDWAPMKA
SDWAINTA EQU   SDWACTL1+2
SDWASPVA EQU   SDWAMWPA
SDWAWATA EQU   SDWAMWPA
SDWAMCKA EQU   SDWAMWPA
@NM00003 EQU   SDWAMWPA
SDWAKEYA EQU   SDWAMWPA
SDWAEXTA EQU   SDWACMKA
SDWAIOA  EQU   SDWACMKA
@NM00002 EQU   SDWACMPF
SDWASTCC EQU   SDWACMPF
@NM00001 EQU   SDWACMPF
SDWASTEP EQU   SDWACMPF
*                                      END UNREFERENCED COMPONENTS
@ENDDATA EQU   *
         END   IEFNB9IR
