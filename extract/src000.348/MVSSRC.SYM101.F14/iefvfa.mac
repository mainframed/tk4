***********************************************************************
*
*   MODULE NAME= IEFVFA
*
*   DESCRIPTIVE NAME= SCAN ROUTINE
*
*   COPYRIGHT= N/A
*
*   STATUS= VS2 REL037 PTF                                     @ZA31145
*
*   FUNCTION= 1. SCANS JCL CARD IMAGE FOR SYNTAX ERRORS.
*             2. CONVERTS JCL STATEMENT TO INTERNAL TEXT.
*     OPERATION= 1. AT ENTRY, MODULE CHECKS IF THE STATEMENT IS
*                   CONTINUED ON ANOTHER CARD. IF IT IS, THE CONTINU-
*                   ATION EXPECTED SWITCH IS SET ON, AND THE SCAN
*                   STARTS WITH THE STATEMENT NAME. IF THE CARD IMAGE
*                   IS ITSELF A CONTINUATION, THE SCAN IS CONTINUED
*                   AT THE OPERAND FIELD.
*                2. THE MODULE SCANS ACROSS GROUPINGS OF ALPHANUMERIC
*                   AND NATIONAL CHARACTERS TERMINATING IN A DELIMITER.
*                   CONTROL IS PASSED TO THE ROUTINE FOR THE
*                   PARTICULAR DELIMITER ENCOUNTERED.
*                3. GROUPINGS TERMINATING IN THE '=' DELIMITER ARE
*                   CHECKED AGAINST A DICTIONARY OF VALID KEYWORDS.
*                   WHEN A VALID KEYWORD HAS BEEN IDENTIFIED, THE
*                   CHARACTERS FOLLOWING ARE CHECKED FOR CORRECT
*                   SYNTAX. INVALID KEYWORDS, AND VALID KEYWORDS WHOSE
*                   OPERANDS ARE NOT SYNTACTICALLY CORRECT, CAUSE THE
*                   JOB TO BE FAILED AND ERROR MESSAGES TO BE ISSUED.
*                4. WHEN AN AMPERSAND IS ENCOUNTERED, THE MODULE
*                   ASSUMES A SYMBOLIC PARAMETER FOLLOWS, AND BRANCHES
*                   TO THE SYMBOLIC PARAMETER ROUTINE (IEFVFB) TO
*                   PROCESS IT.
*                5. FOR A JOB STATEMENT, A CHECK IS MADE FOR THE SPECI-
*                   FICATION OF KEYWORDS FOR WHICH DEFAULTS MAY BE
*                   SUPPLIED VIA THE NEL (E.G., MSGLEVEL, MSGCLASS,
*                   ETC.). FOR THOSE OMITTED, PREBUILT TEXT, INTO WHICH
*                   THE DEFAULT VALUES ARE PLUGGED, IS APPENDED TO THE
*                   TEXT STRING FOR THE STATEMENT.
*                6. FOR A JOB STATEMENT, AFTER TEXT FOR THE STATEMENT
*                   HAS BEEN COMPLETED, THE TEXT IS SEARCHED FOR THE
*                   MSGLEVEL KEY. FLAGS INDICATING THE MSGLEVEL
*                   SPECIFIED ARE SET FOR USE BY THE PRESCAN ROUTINE.
*                7. FOR AN EXEC STATEMENT A CHECK IS MADE FOR THE
*                   SPECIFICATION OF A PROCEDURE NAME. IF ONE HAS BEEN
*                   SPECIFIED, THE MODULE PERFORMS A 'FIND' ON THE
*                   PROCEDURE IN THE PROCEDURE LIBRARY, AND SETS
*                   APPROPRIATE SWITCHES TO CAUSE READS FROM THE
*                   PROCEDURE LIBRARY.
*                8. CORRECT PARAMETERS ARE CONVERTED TO INTERNAL TEXT.
*                   THIS CONTINUES UNTIL THE ENTIRE STATEMENT HAS BEEN
*                   SCANNED, OR AN ERROR HAS BEEN ENCOUNTERED. AN ERROR
*                   CAUSES TERMINATION OF THE SCAN AND GENERATION
*                   OF INTERNAL TEXT.
*                9. FOR A DD STATEMENT (AFTER THE INTERNAL     @G29AN2E
*                   TEXT HAS BEEN CREATED) A CHECK IS MADE FOR @G29AN2E
*                   THE SPECIFICATION OF THE SUBSYS KEYWORD. IF@G29AN2E
*                   IT HAS BEEN SPECIFIED THE SUBSYS NAME IS   @G29AN2E
*                   CHECKED FOR VALID CHARACTERS.  IF THE      @G29AN2E
*                   CHARACTERS ARE VALID THE SUBSYSTEM INTER-  @G29AN2E
*                   FACE REQUEST ROUTINE REQUESTS THE SUBSYSTEM@G29AN2E
*                   TO CHECK THE INTERNAL TEXT OF THE SUBSYS   @G29AN2E
*                   PARAMETER.                                 @G29AN2E
*
*   NOTES
*      CHARACTER CODE DEPENDENCIES= EBCDIC
*      DEPENDENCIES= NONE
*      RESTRICTIONS= NONE
*      REGISTER CONVENTIONS=
*                            R2- ERROR MESSAGE CODE WHEN ERROR FOUND
*                            R9- CARD IMAGE SCAN POINTER
*                            RA- BASE REGISTER 2
*                            RB- BASE REGISTER 1
*                            RC- CONVERTER WORK AREA POINTER
*                            RD- SAVE AREA POINTER
*      PATCH-LABEL= PATCH
*
*   MODULE TYPE= BAL
*      PROCESSOR= ASSEMBLER
*      ATTRIBUTES= NCAL,LET,LIST,XREF,REFR,RENT
*
*   ENTRY POINT= IEFVFA
*      PURPOSE= SCAN STATEMENT
*      LINKAGE= BRANCH ON REGISTER
*      INPUT DATA= JCL STATEMENT
*                  CONVERTER WORK AREA
*                  R9- ADDRESS OF JCL STATEMENT
*                  RA- ADDRESS OF STATEMENT PARAMETER LIST
*                  RC- ADDRESS OF CWA
*      REGISTERS SAVED= RA
*      REGISTER CONTENTS DURING PROCESSING= SEE REGISTER CONVERNTIONS
*      REGISTERS RESTORED= NONE
*
*   EXIT - NORMAL= BRANCH TO IEFVHF
*      CONDITIONS= BLANK DELIMITER FOUND
*      OUTPUT DATA= UPDATED FIELDS IN CWA
*                   INTERNAL TEXT FOR STATEMENT
*      RETURN CODES= NONE
*
*   EXIT - ERROR= BRANCH TO IEFVHF
*      CONDITIONS= ERROR FOUND
*      OUTPUT DATA= UPDATED FIELDS IN CWA (JOB FAILED BIT ON)
*                   INTERNAL TEXT FOR CORRECT PARAMETERS
*                   ERROR MESSAGE WRITTEN TO MESSAGE DATA SET
*      RETURN CODES= NONE
*
*   EXTERNAL REFERENCES=
*      ROUTINES= IEFVGM VIA BRANCH - WRITE ERROR MSG TO MSG DATA SET
*                IEFVHR VIA BRANCH - WRITE I/O ERROR MSG TO CONSOLE
*                IEFVHQ VIA BRANCH - WRITE SYMBOLIC PARAMETER TABLE
*                                    TO SWA
*                IEFVFB VIA BRANCH - PROCESS SYMBOLIC PARAMETERS
*                IEFACT VIA BRANCH - POST SCAN EXIT TO USER ROUTINE
*                IEFNB900 VIA BRANCH - SEARCH INTERNAL TEXT FOR SPECFIC
*                                      KEYWORD KEYS
*      DATA AREAS= CONVERTER WORK AREA
*                  JCL DATA SET INPUT BUFFER
*                  PROCEDURE LIBRARY INPUT BUFFER
*                  INTERNAL TEXT BUFFER
*      CONTROL BLOCKS= QMPA,SSOB,SSIB                          @G29AN2E
*      TABLES= NONE
*      MACROS= IEFZB900,IEFQMNGR,IEFVKEYS,IEFVMCWA,IEFJMR,CVT,
*              IEFSSREQ,IEFJESCT                               @G29AN2E
*      ENQUEUE RESOURCES= NONE
*       CHANGE LEVEL=Y30LPSB,Y30OPSB,Y30LPTD,Y30OPTD,Z30JPSF,
*                    Z40MPTH,OZ03299,OZ05366,ZA04797,ZA06243
*                    Z40RPTH,Z40RPSM,ZA10120,ZA11328,G29AN2E   @G29AN2E
*                    G32HPPJ,ZA12458,ZA13371,ZA13424,ZA13667   @G32HPPJ
*                    ZA13844,ZA14268,ZA15003,ZA16422,ZA20640   @ZA20640
*                    ZA24749,ZA26148,ZA27753,ZA31145           @ZA31145
*
*   MESSAGES=
*             IEF601I INVALID STATEMENT IN PROCEDURE
*             IEF609I INVALID OVERRIDE KEYWORD
*             IEF612I PROCEDURE NOT FOUND
*             IEF613I PROCEDURE WITHIN A PROCEDURE
*             IEF614I I/O ERROR SEARCHING FOR PROCEDURE
*             IEF616I SUBLIST WITHIN SUBLIST INCORRECT
*             IEF618I OPERAND FIELD NOT TERMINATED IN COMMA OR BLANK
*             IEF620I CONTINUATION INVALID ON DD *
*             IEF622I UNBALANCED PARENTHESES
*             IEF623I SOURCE TEXT CONTAINS UNDEFINED CHARACTERS
*             IEF624I INCORRECT USE OF PERIOD
*             IEF625I INCORRECT USE OF LEFT PAREN
*             IEF626I INCORRECT USE OF PLUS
*             IEF627I INCORRECT USE OF AMPERSAND
*             IEF628I INCORRECT USE OF ASTERISK
*             IEF629I INCORRECT USE OF APOSTROPHE
*             IEF630I UNIDENTIFIED KEYWORD
*             IEF632I FORMAT ERROR
*             IEF639I INVALID CLASS DESIGNATION
*             IEF640I EXCESSIVE NUMBER OF POSITIONAL PARAMETERS
*             IEF641I IMPROPER SUBPARAMETER LIST               @G29AN2E
*             IEF646I REQUIRED POSITIONAL PARAMETER MISSING    @ZA13367
*             IEF647I NON-ALPHABETIC FIRST CHARACTER
*             IEF650I INCORRECT USE OF SLASH
*             IEF651I INCORRECT USE OF MINUS
*             IEF652I MUTUALLY EXCLUSIVE KEYWORDS
*             IEF677I WARNING MESSAGE(S) FOR JOB JJJ ISSUED    @G29AN2E
*             IEF744I SUBSYSTEM NOT SPECIFIED                  @G29AN2E
*             IEF745I SUBSYSTEM SSSS DOES NOT EXIST            @G29AN2E
*             IEF746I SUBSYSTEM SSSS IS NOT OPERATIONAL        @G29AN2E
*             IEF747I SUBSYSTEM SSSS DOES NOT SUPPORT JCL      @G29AN2E
*                     PARAMETERS                               @G29AN2E
*             IEF748I SUBSYSTEM NAME INVALID                   @G29AN2E
*             IEF749I JCL STATEMENT BUFFER CAPACITY EXCEEDED   @G29AN2E
*             IEF750I SYSTEM ERROR IN PROCESSING SUBSYS        @G29AN2E
*                     DD PARAMETER                             @G29AN2E
*
*
***********************************************************************
         EJECT
         MACRO
         JCLD
**************************************************
*
* ANY MAJOR DD KEYWORD THAT IS ADDED TO THIS MACRO SHOULD      OCIP39A
*   ALSO BE ADDED TO IEEVSTAR, WHICH CONTAINS A TABLE OF       OCIP39A
*   DD MAJOR KEYWORDS. THE REASON FOR THIS IS THE FOLLOWING:   OCIP39A
*        WHEN USING SYMBOLIC PARAMETERS ON THE START COMMAND,  OCIP39A
*        MAJOR DD KEYWORDS PARAMETERS CANNOT BE USED TO        OCIP39A
*        DEFINE SYMBOLIC PARAMETERS                            OCIP39A
*
**************************************************
*        EACH GROUP OF KEYWORDS IS TERMINATED WITH 'ETEND' IN     20002
*        THE LAST PARAMETER OF THE LAST DENT MACRO IN THE GROUP   20002
******************************************************************20002
J5L      DENT  (COND),(CONDJK)
         DENT  (ADDRSPC),(ADRSPJK)                               Y01029
         DENT  (PRTY),(PRTYJK)
         DENT  (PERFORM),(PRFMJK)                                Y02655
         DENT  (TYPRUN),(TYPRUNJK)
         DENT  (CLASS),(CLASSJK)                                   AAAA
         DENT  (ROLL),(ROLLJK)                                     AAAA
         DENT  (RESTART),(RESTARJK)                                AACA
         DENT  (RD),(RDJK)                                         AACA
         DENT  (REGION),(REGINJK)
         DENT  (MSGCLASS),(MSGCLAJK)
         DENT  (TIME),(TIMEJK)
         DENT  (NOTIFY),(NOTIFYJK)                                20001
         DENT  (USER),(USERK)                                  @Z40RPTH
         DENT  (PASSWORD),(PASWORDK)                           @Z40RPSM
         DENT  (GROUP),(GROUPK)                                @Z40RPSM
         DENT  (MSGLEVEL),(MSGLEVJK),,(ETEND)
E4L      DENT  (PGM),(PGMEK,PROCEK)
         DENT  (PROC),(PROCEK,PGMEK)
         DENT  (ACCT),(ACCTEEK,ACCTPEK)
         DENT  (COND),(CONDEEK,CONDPEK)
         DENT  (RD),(RDEEK,RDPEK)                                  AACA
         DENT  (RD,.),(RDPEK,RDEEK)                                AACA
         DENT  (PARM),(PARMEEK,PARMPEK)
         DENT  (PERFORM),(PRFMEEK,PRFMPEK)                       Y02655
         DENT  (PERFORM,.),(PRFMPEK,PRFMEEK)                     Y02655
         DENT  (DYNAMNBR),(DYNMEEK,DYNMPEK)                      Y02670
         DENT  (DYNAMNBR,.),(DYNMPEK,DYNMEEK)                    Y02670
         DENT  (TIME),(TIMEEEK,TIMEPEK)
         DENT  (ACCT,.),(ACCTPEK,ACCTEEK)
         DENT  (COND,.),(CONDPEK,CONDEEK)
         DENT  (PARM,.),(PARMPEK,PARMEEK)
         DENT  (TIME,.),(TIMEPEK,TIMEEEK)
         DENT  (DPRTY,.),(SDPPEK,SDPEEK)                           I241
         DENT  (DPRTY),(SDPEEK,SDPPEK)                             I241
         DENT  (ROLL),(ROLLEEK,ROLLPEK)                            AAAA
         DENT  (ROLL,.),(ROLLPEK,ROLLEEK)                          AAAA
         DENT  (ADDRSPC,.),(ADRSPPEK,ADRSPEEK)                   Y01029
         DENT  (ADDRSPC),(ADRSPEEK,ADRSPPEK)                     Y01029
         DENT  (REGION),(REGINEEK,REGINPEK)
         DENT  (REGION,.),(REGINPEK,REGINEEK),,(ETEND)
D4L      DENT  (AFF),(AFFK,SEPK,DDNAMEK,SYSOUTK,COPIESK,BURSTK, Z40MPTHX
               MODIFYK,FLASHK,CHARSK)                           Z40MPTH
         DENT  (SEP),(SEPK,AFFK,DDNAMEK,SYSOUTK,COPIESK,BURSTK, Z40MPTHX
               MODIFYK,FLASHK,CHARSK)                           Z40MPTH
         DENT  (DCB),(DCBK,AMPK)                                   AABA
         DENT  (DLM),(DLMK,DDNAMEK,PROTECTK,QNAMEK)            @ZA24749
         DENT  (HOLD),(HOLDK,DDNAMEK,QNAMEK)                   @ZA24749
         DENT  (DSN),(DSNAMEK,DDNAMEK,QNAMEK,IPLTXIDK,COPIESK, @Z40MPTHX
               BURSTK,MODIFYK,FLASHK,CHARSK)                   @Z40MPTH
         DENT  (VOL),(VOLUMEK,DDNAMEK,SYSOUTK,COPIESK,BURSTK,  @Z40MPTHX
               MODIFYK,FLASHK,CHARSK,QNAMEK),(SERMK,REFMK)     @ZA24749
         DENT  (MSVGP),(MSVGPK,SERMK,BURSTK,MODIFYK,CHARSK,     Y30LPTDX
               FLASHK,DSIDK,SYSOUTK,COPIESK,QNAMEK,DDNAMEK)     Y30LPTD
         DENT  (DSID),(DSIDK,BURSTK,FLASHK,MODIFYK,CHARSK,      Y30OPTDX
               DDNAMEK,MSVGPK,QNAMEK)                          @ZA24749
         DENT  (BURST),(BURSTK,DSNAMEK,LABELK,VOLUMEK,MSVGPK,  @Z40MPTHX
               DSIDK,QNAMEK,DISPK,AFFK,SEPK,SPLITK,SUBALLOK,   @Z40MPTHX
               AMPK,DDNAMEK,PROTECTK)                          @G32HPPJ
         DENT  (MODIFY),(MODIFYK,DSNAMEK,LABELK,VOLUMEK,MSVGPK, Z40MPTHX
               DSIDK,QNAMEK,DISPK,AFFK,SEPK,SPLITK,SUBALLOK,   @Z40MPTHX
               AMPK,DDNAMEK,PROTECTK)                          @G32HPPJ
         DENT  (FLASH),(FLASHK,DSNAMEK,LABELK,VOLUMEK,MSVGPK,   Z40MPTHX
               DSIDK,QNAMEK,DISPK,AFFK,SEPK,SPLITK,SUBALLOK,   @Z40MPTHX
               AMPK,DDNAMEK,PROTECTK)                          @G32HPPJ
         DENT  (CHARS),(CHARSK,DSNAMEK,LABELK,VOLUMEK,MSVGPK,  @Z40MPTHX
               DSIDK,QNAMEK,DISPK,AFFK,SEPK,SPLITK,SUBALLOK,   @Z40MPTHX
               AMPK,DDNAMEK,PROTECTK)                          @G32HPPJ
         DENT  (UNIT),(UNITK,DDNAMEK,QNAMEK),(AFFMK,SEPMK)     @ZA24749
         DENT  (DISP),(DISPK,SYSOUTK,DDNAMEK,BURSTK,MODIFYK,   @Z40MPTHX
               FLASHK,CHARSK,COPIESK,QNAMEK)                   @ZA24749
         DENT  (SPACE),(SPACEK,SPLITK,SUBALLOK,DDNAMEK,AMPK,QNAMEK)
*                                                              @ZA24749
         DENT  (AMP),(AMPK,DYNAK,UCSK,FCBK,  AM/O KEYWORD KEY   YA03225X
               TERMK,DCBK,SYSOUTK,QNAMEK,SPACEK,SPLITK,         YA03225X
               SUBALLOK,BFALNMK,BFTEKMK,BLKSIZMK,BUFLMK,        YA03225X
               BUFNOMK,BUFRQMK,CODEMK,CPRIMK,CYLOFLMK,HIARCHMK, YA03225X
               DENMK,DIAGNSK,DSORGMK,EROPTMK,INTVLMK,KEYLENMK,  YA03225X
               LIMCTMK,LRECLMK,MODEMK,NCPMK,NTMMK,OPTCDMK),,,  @ZA11328X
               (PRTSPMK,RECFMMK,RKPMK,SOWAMK,STACKMK,TRTCHMK,  @ZA11328X
               GNCPMK,GDSORGMK,BUFOFFMK,BUFINMK,BUFOUTMK,       YA03225X
               BUFMAXMK,BUFSIZMK,PCIMK,RESERVMK,THRESHMK,       YA03225X
               IPLTXIDK,BURSTK,MODIFYK,FLASHK,CHARSK,COPIESK)  @Z40MPTH
         DENT  (LABEL),(LABELK,DDNAMEK,SYSOUTK,BURSTK,MODIFYK, @Z40MPTHX
               FLASHK,CHARSK,COPIESK,QNAMEK),(EXPDTMK,RETPDMK) @ZA24749
         DENT  (SPLIT),(SPLITK,SPACEK,SUBALLOK,DDNAMEK,AMPK,   @Z40MPTHX
               SYSOUTK,BURSTK,MODIFYK,FLASHK,CHARSK,COPIESK,QNAMEK)
*                                                              @ZA24749
         DENT  (COPIES),(COPIESK,DSNAMEK,LABELK,VOLUMEK,MSVGPK, Z40MPTHX
               QNAMEK,DISPK,AFFK,SEPK,SPLITK,SUBALLOK,         @Z40MPTHX
               AMPK,DDNAMEK)                                   @Z40MPTH
         DENT  (DEST),(DESTK,DDNAMEK,QNAMEK)                   @ZA24749
         DENT  (FREE),(FREEK,DDNAMEK,QNAMEK)                   @ZA24749
         DENT  (DSNAME),(DSNAMEK,DDNAMEK,QNAMEK,IPLTXIDK,      @Z40MPTHX
               COPIESK,BURSTK,MODIFYK,FLASHK,CHARSK)           @Z40MPTH
         DENT  (SUBSYS),(SUBSYSK,SYSOUTK,DDNAMEK,QNAMEK)       @ZA24749
         DENT  (DUMM),(DUMMK,DYNAK,DDNAMEK,QNAMEK)             @ZA24749
         DENT  (DYNA),(DYNAK,DUMMK,DSNAMEK,DDNAMEK,VOLUMEK,UNITK, M3131*
               DISPK,SPACEK,DCBK,LABELK,SPLITK,AFFK,SEPK,SYSOUTK, M3131*
               UCSK,SUBALLOK,TERMK,QNAMEK,OUTLIMK,FCBK,DLMK,    YM02710*
               AMPK,COPIESK,DESTK,HOLDK,FREEK,MSVGPK,DSIDK,    @Y30OPSB*
               CHKPTK,BURSTK,MODIFYK,FLASHK,CHARSK,PROTECTK)   @G32HPPJ
         DENT  (TERM),(TERMK,AMPK,DDNAMEK,PROTECTK,QNAMEK)     @ZA24749
         DENT  (PROTECT),(PROTECTK,MODIFYK,QNAMEK,UCSK,FCBK,DDNAMEK,   *
               SYSOUTK,TERMK,DYNAK,DLMK,CHARSK,FLASHK,BURSTK)  @G32HPPJ
         DENT  (SYSOUT),(SYSOUTK,DISPK,DDNAMEK,AFFK,SEPK,VOLUMEK,      C
               LABELK,SPLITK,SUBALLOK,MSVGPK,SUBSYSK,          @G29AN2EC
               QNAMEK,AMPK,CHKPTK,PROTECTK)                    @G32HPPJ
         DENT  (VOLUME),(VOLUMEK,DDNAMEK,SYSOUTK,COPIESK,      @Z40MPTHX
               BURSTK,MODIFYK,FLASHK,CHARSK,QNAMEK),(SERMK,REFMK)
*                                                              @ZA24749
         DENT  (CHKPT),(CHKPTK,SYSOUTK,DDNAMEK,QNAMEK)         @ZA24749
*  DDNAME IS MUTUALLY EXCLUSIVE WITH THE SAME DD KEYWORDS AS    YM02710
*  THOSE WITH WHICH DD */DATA ARE MUTUALLY EXCLUSIVE. MUTUAL    YM02710
*  EXCLUSIVITY FOR DDNAME IS DETERMINED BY MEANS OF A BIT TABLE YM02710
*  (DASTAB) RATHER THAN BY CHECKING DICTIONARY ENTRIES.         YM02710
         DENT  (DDNAME),(DDNAMEK,UNITK,LABELK,VOLUMEK,AFFK,SEPK,DISPK,S1
               PACEK,SPLITK,DSNAMEK,SYSOUTK,SUBALLOK,UCSK,        O0101X
               QNAMEK,FCBK,FUNCMK,FREEK,SUBSYSK,PROTECTK)      @G32HPPJ
         DENT  (FCB),(FCBK,DDNAMEK,RKPMK,CYLOFLMK,INTVLMK,AMPK,  Y01113X
               FRIDMK,PROTECTK,QNAMEK)                         @ZA24749
         DENT  (UCS),(UCSK,RKPMK,CYLOFLMK,INTVLMK,DDNAMEK,        20002X
               RESERVMK,AMPK,PROTECTK,QNAMEK)                  @ZA24749
         DENT  (QNAME),(QNAMEK,DDNAMEK,DSNAMEK,SYSOUTK,AMPK,   @Z40MPTHX
               IPLTXIDK,MSVGPK,BURSTK,MODIFYK,FLASHK,CHARSK,   @Z40MPTHX
               COPIESK,PROTECTK,CHKPTK,DESTK,DISPK,DLMK,       @ZA24749C
               DSIDK,DUMMK,FCBK,FREEK,HOLDK,LABELK,OUTLIMK,    @ZA24749C
               SPACEK,TERMK,UCSK,UNITK,VOLUMEK,SUBSYSK,        @ZA24749C
               SPLITK,SUBALLOK)                                @ZA24749
         DENT  (OUTLIM),(OUTLIMK,DDNAMEK,QNAMEK,CPRIMK,        @ZA31145X
               THRESHMK)                                       @ZA31145
         DENT  (SUBALLOC),(SUBALLOK,SPACEK,SPLITK,DDNAMEK,     @Z40MPTHX
               SYSOUTK,AMPK,BURSTK,MODIFYK,FLASHK,CHARSK,      @Z40MPTHX
               COPIESK,QNAMEK),,(ETEND)                        @ZA24749
D4LD     DENT  (DEN),(DENMK,DDNAMEK)                               AABA
         DENT  (FRID),(FRIDMK,FCBK,DDNAMEK)                     YM02710
         DENT  (NCP),(NCPMK,DDNAMEK,BUFMAXMK)                     20002
         DENT  (NTM),(NTMMK,DDNAMEK,PCIMK)                        20002
         DENT  (RKP),(RKPMK,UCSK,DDNAMEK,RESERVMK,FCBK)           20202
         DENT  (GDSORG),(GDSORGMK,DDNAMEK)                         AABA
         DENT  (GNCP),(GNCPMK,BFTEKMK,BFALNMK,HIARCHMK,DDNAMEK)  A30036
         DENT  (BUFL),(BUFLMK,DDNAMEK)                             AABA
         DENT  (CODE),(CODEMK,KEYLENMK,MODEMK,PRTSPMK,STACKMK,DDNAMEK, C
               TRTCHMK)                                           19373
         DENT  (CPRI),(CPRIMK,DDNAMEK,THRESHMK,OUTLIMK)        @ZA31145
         DENT  (MODE),(MODEMK,CODEMK,KEYLENMK,PRTSPMK,DDNAMEK,TRTCHMK)
*                                                                19373*
         DENT  (SOWA),(SOWAMK,DDNAMEK)                             AABA
         DENT  (BFALN),(BFALNMK,GNCPMK,DDNAMEK)                  A30036
         DENT  (BFTEK),(BFTEKMK,GNCPMK,DDNAMEK)                  A30036
         DENT  (BUFNO),(BUFNOMK,BUFRQMK,BUFINMK,BUFOUTMK)         20002
         DENT  (BUFOFF),(BUFOFFMK,DDNAMEK)                        19200
         DENT  (BUFRQ),(BUFRQMK,BUFNOMK,DDNAMEK,BUFINMK,BUFOUTMK) 20002
         DENT  (DIAGNS),(DIAGNSK)                                 21042
         DENT  (DSORG),(DSORGMK,DDNAMEK)                           AABA
         DENT  (EROPT),(EROPTMK,DDNAMEK)                           AABA
         DENT  (INTVL),(INTVLMK,UCSK,DDNAMEK,FCBK)                20202
         DENT  (LIMCT),(LIMCTMK,DDNAMEK)                           AABA
         DENT  (LRECL),(LRECLMK,DDNAMEK)                           AABA
         DENT  (OPTCD),(OPTCDMK,DDNAMEK)                           AABA
         DENT  (PRTSP),(PRTSPMK,CODEMK,KEYLENMK,MODEMK,STACKMK,DDNAMEK,C
               TRTCHMK)                                           19373
         DENT  (RECFM),(RECFMMK,DDNAMEK)                           AABA
         DENT  (STACK),(STACKMK,CODEMK,KEYLENMK,PRTSPMK,DDNAMEK,       C
               TRTCHMK)                                           19373
         DENT  (TRTCH),(TRTCHMK,DDNAMEK,KEYLENMK,MODEMK,CODEMK,STACKMK,C
               PRTSPMK)                                           19373
         DENT  (CYLOFL),(CYLOFLMK,UCSK,DDNAMEK,RESERVMK,FCBK)     20202
         DENT  (KEYLEN),(KEYLENMK,CODEMK,MODEMK,PRTSPMK,STACKMK,       C
               DDNAMEK,TRTCHMK)                                   19373
         DENT  (BUFIN),(BUFINMK,BUFNOMK,BUFRQMK,DDNAMEK)          20002
         DENT  (BUFOUT),(BUFOUTMK,BUFNOMK,BUFRQMK,DDNAMEK)        20002
         DENT  (BUFMAX),(BUFMAXMK,NCPMK,DDNAMEK)                  20002
         DENT  (BUFSIZE),(BUFSIZMK,BLKSIZMK,DDNAMEK)              20002
         DENT  (PCI),(PCIMK,NTMMK,DDNAMEK)                        20002
         DENT  (RESERVE),(RESERVMK,RKPMK,UCSK,CYLOFLMK,DDNAMEK)   20002
         DENT  (THRESH),(THRESHMK,CPRIMK,DDNAMEK,OUTLIMK)      @ZA31145
         DENT  (IPLTXID),(IPLTXIDK,DDNAMEK,DSNAMEK,QNAMEK)       Y01948
         DENT  (HIARCHY),(HIARCHMK,GNCPMK,DDNAMEK)               A30036
         DENT  (FUNC),(FUNCMK,DDNAMEK)                            21088
         DENT  (BLKSIZE),(BLKSIZMK,BUFSIZMK),,(ETEND)             20002
D4LUS    DENT  (SEP),(SEPMK,AFFMK)
D4LUA    DENT  (AFF),(AFFMK,SEPMK),,(ETEND)
D4LV     DENT  (REF),(REFMK,SERMK)
         DENT  (SER),(SERMK,REFMK,MSVGPK),,(ETEND)             @Y30LPSB
D6LL     DENT  (EXPDT),(EXPDTMK,RETPDMK)
         DENT  (RETPD),(RETPDMK,EXPDTMK),,(ETEND)
         MEND
         EJECT
         MACRO
&L       DENT  &A,&B,&C,&D,&E 5TH PARM CONTIN. FOR 2ND PARM    @ZA11328
         LCLA  &Y,&Z
         LCLC  &X
A&SYSNDX DS    0C
&L       DC    AL1(B&SYSNDX-A&SYSNDX)
&X       SETC  '='
         AIF   (N'&A LE 1).L1
&X       SETC  '&A(2)'
.L1      ANOP
         DC    C'&A(1)&X'
.L2      ANOP
&Y       SETA  &Y+1
         DC    AL1(&B(&Y))
         AIF   (&Y LT N'&B).L2
         AIF   (N'&E LT 1).L2B IF NO 5TH PARM., PROCESS 3RD    @ZA11328
&Y       SETA  0                                               @ZA11328
.L2A     ANOP                                                  @ZA11328
&Y       SETA  &Y+1            INCREMENT LOOP CONTROL          @ZA11328
         DC    AL1(&E(&Y))                                     @ZA11328
         AIF   (&Y LT N'&E).L2A LOOP IF ALL 5TH NOT DONE       @ZA11328
.L2B     ANOP                                                  @ZA11328
&Y       SETA  128
.L3      AIF   (&Z GE N'&C).L4
&Z       SETA  &Z+1
         DC    AL1(&Y+&C(&Z))
         AGO   .L3
.L4      ANOP
B&SYSNDX DS    0C
         AIF   ('&D' EQ '').L5
         DC    AL1(ETEND)
.L5      ANOP
         MEND
         EJECT
         MACRO
&L       JTRT  &A,&B,&C,&D
         LCLA  &X
BK       EQU   4                   BLANK CHARACTER.
PR       EQU   8                   PERIOD CHARACTER.
TT       EQU   12                  ILLEGAL CHARACTER.
LP       EQU  16                 LEFT PAREN CHARACTER.
PL       EQU   20                 PLUS CHARACTER.
AM      EQU   24                 AMPERSAND CHARACTER.
AS       EQU   28                 ASTERICK CHARACTER.
RP      EQU   32                 RIGHT PAREN CHARACTER.
MI       EQU   48                 MINUS CHARACTER
SL       EQU   52                 SLASH CHARACTER
CO       EQU   36                 COMMA CHARACTER.
AP       EQU   40                 APOST CHARACTER.
EQ      EQU   44                 EQUAL CHARACTER.
AL      EQU   0                  ALPHA CHARACTER.
NC       EQU   0                  NUMERIC CHARACTER.
&L      DC    AL1(&A)            ILLEGAL.
         DC    255AL1(&A)         ILLEGAL.
         ORG   &L+C' '                 BLANK.
         DC    AL1(&B(1))
         ORG   &L+C'.'                 PERIOD.
         DC    AL1(&B(2))
         ORG   &L+C'('
         DC    AL1(&B(3))
         ORG   &L+C'+'                 PLUS.
         DC    AL1(&B(4))
         ORG   &L+C'&&'                AMPERSAND.
         DC    AL1(&B(5))
         ORG   &L+C'*'                 ASTERICK.
         DC    AL1(&B(6))
         ORG   &L+C')'                 RIGHT PAREN.
         DC    AL1(&B(7))
         ORG   &L+C'-'                 MINUS.
         DC    AL1(&B(8))
         ORG   &L+C'/'                 SLASH.
         DC    AL1(&B(9))
         ORG   &L+C','                 COMMA.
         DC    AL1(&B(10))
         ORG   &L+C''''                APOST.
         DC    AL1(&B(11))
         ORG   &L+C'='                 EQUAL.
         DC    AL1(&B(12))
         ORG   &L+C'$'                 ALPHA.
         DC    AL1(&C)
         ORG   &L+C'#'
         DC    AL1(&C)
         ORG   &L+C'@'
         DC    AL1(&C)
&X       SETA  0
         ORG   &L+C'A'                 ALPHA.
.L2      ANOP
&X       SETA  &X+1
         DC    AL1(&C)
         AIF   (&X LT 9).L2
&X       SETA  0
         ORG   &L+C'J'                 ALPHA.
.L3      ANOP
&X       SETA  &X+1
         DC    AL1(&C)
         AIF   (&X LT 9).L3
&X       SETA  0
         ORG   &L+C'S'                 ALPHA.
.L4      ANOP
&X       SETA  &X+1
         DC    AL1(&C)
         AIF   (&X LT 8).L4
&X       SETA  0
         ORG   &L+C'0'                 NUMERIC.
.L5      ANOP
&X       SETA  &X+1
         DC    AL1(&D)
         AIF   (&X LT 10).L5
         MEND
         EJECT
         MACRO
&L       SCSW  &A,&B,&C
         GBLB  &Z
         LCLA  &X
         LCLC  &Y
         AIF   (&Z).T1
O        EQU   1                   ONES.
M        EQU   4                   MIXED.
Z        EQU   8                   ZEROS.
&Z       SETB  1
.T1      ANOP
&X       SETA  K'&B-1
&Y       SETC  '&B'(1,&X)
         AIF   ('&A' EQ 'C').L1
         AIF   ('&A' EQ 'S').L2
&L       TM    &B,&Y
         BC    &A,&C
         MEXIT
.L1      ANOP
&L       NI    &B,255-&Y
         MEXIT
.L2      ANOP
&L       OI    &B,&Y
         MEND
         EJECT
         IEFQMNGR
         EJECT                                                    19874
         IEFVKEYS                                                 19874
         EJECT
WORKAREA DSECT                                                   Y02668
         USING WORKAREA,R7                                       Y02668
WKTTR    DS    CL4                     POINTER TO NEXT RECORD    Y02668
WKQMPAPT DS    CL4                     ADDRESS OF QMPA           Y02668
WKRECORD DS    CL168                   COMPRESSED RECORD         Y02668
WKPTR1   DS    CL4                     POINTER TO ITSELF         Y02668
WKCT     DS    CL1                     NUMBER OF ENTRIES MADE IN Y02668
WKPTR2   DS    CL3                     HOLDER FOR TTR ASSIGNED FRY02668
*                                      THE QUEUE MANAGER         Y02668
WKPROCN1 DS    CL8                     PROCEDURE NAME            Y02668
WKTTR1   DS    CL3                     TTR OF FIRST RECORD       Y02668
WKPROCN2 DS    CL8                     PROCEDURE NAME            Y02668
WKTTR2   DS    CL3                     TTR OF FIRST RECORD       Y02668
WKPROCN3 DS    CL8                     PROCEDURE NAME            Y02668
WKTTR3   DS    CL3                     TTR OF FIRST RECORD       Y02668
WKPROCN4 DS    CL8                     PROCEDURE NAME            Y02668
WKTTR4   DS    CL3                     TTR OF FIRST RECORD       Y02668
WKPROCN5 DS    CL8                     PROCEDURE NAME            Y02668
WKTTR5   DS    CL3                     TTR OF FIRST RECORD       Y02668
WKPROCN6 DS    CL8                     PROCEDURE NAME            Y02668
WKTTR6   DS    CL3                     TTR OF FIRST RECORD       Y02668
WKPROCN7 DS    CL8                     PROCEDURE NAME            Y02668
WKTTR7   DS    CL3                     TTR OF FIRST RECORD       Y02668
WKPROCN8 DS    CL8                     PROCEDURE NAME            Y02668
WKTTR8   DS    CL3                     TTR OF FIRST RECORD       Y02668
WKPROCN9 DS    CL8                     PROCEDURE NAME            Y02668
WKTTR9   DS    CL3                     TTR OF FIRST RECORD       Y02668
WKPROCNA DS    CL8                     PROCEDURE NAME            Y02668
WKTTRA   DS    CL3                     TTR OF FIRST RECORD       Y02668
WKPROCNB DS    CL8                     PROCEDURE NAME            Y02668
WKTTRB   DS    CL3                     TTR OF FIRST RECORD       Y02668
WKPROCNC DS    CL8                     PROCEDURE NAME            Y02668
WKTTRC   DS    CL3                     TTR OF FIRST RECORD       Y02668
WKPROCND DS    CL8                     PROCEDURE NAME            Y02668
WKTTRD   DS    CL3                     TTR OF FIRST RECORD       Y02668
WKPROCNE DS    CL8                     PROCEDURE NAME            Y02668
WKTTRE   DS    CL3                     TTR OF FIRST RECORD       Y02668
WKPROCNF DS    CL8                     PROCEDURE NAME            Y02668
WKTTRF   DS    CL3                     TTR OF FIRST RECORD       Y02668
         EJECT
NEL      DSECT
         IEFNEL  SUBCOM=C
         EJECT
         IEFCOMWA                                                Y02668
         IEFCVRWA
         EJECT
         IEFVMSWA
CVT      DSECT
         CVT
         EJECT
         IEFJMR
         EJECT
         IEFTXTFT
         EJECT
         IEFJSSOB (CI)                                         @G29AN2E
         EJECT                                                 @G29AN2E
         IEFJSSIB                                              @G29AN2E
         EJECT                                                 @G29AN2E
         IEFJESCT                                              @G29AN2E
         EJECT                                                 @G29AN2E
         IHASUBIT                                              @G29AN2E
         EJECT                                                 @G29AN2E
IEFVFA   CSECT
*C209181                                                       @ZA01934
*A209182,210410-210720                                         @ZA01934
*C258484                                                       @ZA01931
* ADDED CODE NEAR LABEL PRR0                                   @ZA10120
* ADDED MACRO CODE FOR PROPER ASSEMBLY                         @ZA11328
* ADDED CODE AFTER LABELS AOFECHCK AOFDERR3                    @ZA13367
* ADDED STMTS NEAR LABEL FA9 AND BKR3                          @ZA12458
* CHANGED MVC TO OC WHEN DDNAME= KEY FOUND AFTER LABEL EQRF    @ZA13371
* CHANGED BNE TO BL NEAR LABEL AOFACC5                         @ZA13424
* MOVE OI INSTRUCTION FROM COMMA ROUTINE TO EQUAL ROUTINE      @ZA14268
* CHANGE COMMENT IN MIR ROUTINE                                @ZA14268
* ADDED CODE AFTER LABEL FAFF1                                 @ZA13844
* ADDED CODE AFTER LABEL E3                                    @ZA15003
* SU32 RACF PROTECT SUPPORT                                    @G32HPPJ
* DELETED 3 INSTRUCTIONS AFTER LABEL T102                      @ZA16422
* CHANGED CODE IN PERIOD ROUTINE                               @ZA20640
* CHANGED DENT MACRO FOR QNAME                                 @ZA24749
* CHANGED AND ADDED CODE AFTER LABEL E3                        @ZA25564
* ADDED CODE BEFORE AND AFTER LABEL FA32                       @ZA26148
* MERGE SU4,10,16 CODE TO RELEASE 037 PTF                      @ZA27753
* CHANGED DENT MACRO FOR OUTLIM,CPRI AND THRESH                @ZA31145
* ADDED PARAMETERS TO THE DENT MACRO INVOCATIONS FOR OUTLIM,   @ZA31145
*   THRESH, AND CPRI TO MAKE THEM MUTUALLY EXCLUSIVE WITH EACH @ZA31145
*   OTHER                                                      @ZA31145
* ERROR MESSAGE CODES -                                          Y02668
ERMSG601 EQU   X'01'               IEF601I-INVALID STMT IN PROC. Y02668
ERMSG612 EQU   X'0C'               IEF612I - PROCEDURE NOT FOUND.Y02668
ERMSG613 EQU   X'0D'               IEF613I - PROC WITHIN A PROC. Y02668
ERMSG614 EQU   X'0E'               IEF614I - I/O ERR SEARCHING   Y02668*
                                             FOR PROC.           Y02668
ERMSG632 EQU   X'20'               IEF632I - FORMAT ERR - 'PGM'. Y02668
ERMSG639 EQU   X'27'               IEF639I-INVALID CLASS DESIG. YM01546
ERMSG609 EQU   X'09'               IEF609I - INVALID O'RIDE KEYWDY02668
ERMSG640 EQU   X'28'               IEF640I - EXCESS # POS PARAM YM03459
ERMSG641 EQU   X'29'               IEF641I - IMPROPER SUBP LST @G29AN2E
ERMSG642 EQU   X'2A'               IEF642I - EXCESSIVE PARM LTH YM03459
ERMSG646 EQU   X'2E'               IEF646I - REQ'D POSIT PARM MISSING
*                                                              @ZA13367
ERMSG647 EQU   X'2F'               IEF647I - NON-ALPHA 1ST CHAR. Y02668
ERMSG744 EQU   X'4C'               IEF744I - SUBSYS. NOT SPEC. @G29AN2E
ERMSG748 EQU   X'4D'               IEF748I - SUBSYS. NAME INV. @G29AN2E
ERMSG749 EQU   X'4E'               IEF749I - BUFFER CAPACITY EX@G29AN2E
ERMSG750 EQU   X'4F'               IEF750I - SYSTEM ERROR      @G29AN2E
ERWTO417 EQU   X'02'               PROCLIB DEVICE I/O ERROR      Y02668
INSTPROC EQU   X'80'               PROCESSING INSTREAM PROC BIT. Y02668
AOMSLONE EQU   C'1'                MSGLEVEL CODE 1.              Y02668
AOMSLTWO EQU   C'2'                MSGLEVEL CODE 2.              Y02668
DISPLID  EQU   7                  DISPLACEMENT OF BLOCK ID IN    Y02621
*                                 SWA QMPA REMOTE LIST.          Y02621
SYMBUFID EQU   X'25'              ID OF SYMBUF BLOCKS IN SWA     Y02621
TXTBUFID EQU   X'25'              ID OF TEXTBUF BLOCKS IN SWA    Y02621
ENDLISTK EQU   X'00'                                             Y02668
D12      EQU   12                                                  I272
LAST     EQU   X'80'               TO TURN HI-ORDER BIT ON         I272
SWAWTOFF EQU   X'7F'               TO TURN OFF AOSWAWRT        @ZA05366
VFA4     EQU   4             COUNT OF FOUR                       Y02621
NOKEY    EQU   X'00'               NO SECONDARY MSG            @G29AN2E
OFFNUM   EQU   1                   OFFSET TO NUM BYTE          @G29AN2E
OFFLEN   EQU   2                   OFFSET TO LENGTH BYTE       @G29AN2E
OFFSSNM  EQU   3                   OFFSET TO SSNAME            @G29AN2E
TWLVZERO EQU   X'C0'               12/0 MULTIPUNCH             @G29AN2E
M745OO   EQU   0                   OFFSET TO MSG IEF745I       @G29AN2E
M745OL   EQU   2                   OFFSET TO LEN FOR IEF745I   @G29AN2E
M746OO   EQU   4                   OFFSET TO MSG IEF746I       @G29AN2E
M746OL   EQU   6                   OFFSET TO LEN FOR IEF746I   @G29AN2E
M747OO   EQU   8                   OFFSET TO MSG IEF747I       @G29AN2E
M747OL   EQU   10                  OFFSET TO LEN FOR IEF747I   @G29AN2E
L3       EQU   3                   LENGTH 3                    @G29AN2E
AOLEN    EQU   8                   OFFSET TO LENGTH AREA       @G29AN2E
AOTXT    EQU   10                  OFFSET TO TEXT AREA         @G29AN2E
AOTXT1   EQU   11                  OFFSET TO TEXT AREA +1      @G29AN2E
SSNAMEL  EQU   4                   MAX LENGTH OF SSNAME        @G29AN2E
AOSSNM   EQU   28                  OFFSET TO SSNAME AREA       @G29AN2E
         EXTRN VGM90TXT                                        @G29AN2E
         EXTRN VGM90MOT                                        @G29AN2E
         SPACE 1                                                 Y0266
         BALR  RB,0                BASE FOR SCAN CODE.           Y02668
         USING *,RB,RA             ESTABLISH ADDRESSABILITY.     Y02668
VFA01    DS    0H                                                  AADA
*****************************************************************Y02668
* MODULE TRACE CODE - FOR TESTING.                               Y02668
         L     RF,TRACEV           LOAD TRACE RTNE ADDR.         Y02668
         BALR  RE,RF               ENTER MOD ID IN TRACE RECORD. Y02668
TRACEV   DC    V(TRACE)            TRACE RTNE ADDR.              Y02668
         DC    C'VFA '             MOD ID USED BY TRACE.         Y02668
* TRACE RETURNS HERE.                                            Y02668
*****************************************************************Y02668
         B     FA1                 TRANSFER.
VFA02    DC    A(VFA01+4096)            SECOND BASE                AADA
         MODID BRANCH=NO                                         Y02668
*        DC    C'SU32'            FUNCTION ID                  @G32HPPJ
*        DC    C'01'              LEVEL # (PROTECT)            @G32HPPJ
*        DC    C'02'        REMOVE UNNEEDED INSTRUCTIONS IN    @ZA16422
*                           PAREN ROUTINE                      @ZA16422
*        DC    C'03'        EQUAL FOLLOWED BY PERIOD SHOULD BE @ZA20640
*                           AN ERROR                           @ZA20640
*        DC    C'04'     QNAME MUTUAL EXCLUSIVITY FIX          @ZA24749
*        DC    C'05'     DO NOT CLEAR SYMBUF IF ERROR ON EXEC
*                        STATEMENT WITHIN A PROC.              @ZA25564
*                        (REMOVES PART OF ZA15003)             @ZA25564
*        DC    C'06'     JCL ERROR IF NON-ALPHA CHAR IN NAME
*                        WITH EMBEDDED PERIOD                  @ZA26148
*        DC    C'07'      MERGE SU4,10,16 CODE TO 037 PTF      @ZA27753
         DC    C'08'  OUTLIM,THRESH & CPRI MUTUAL EXCLUSIVE FIX@ZA31145
*
         EJECT
*          **********************************************************
*          *                                                        *
*          *   ENTERED  FROM INTERP CONTROL RTNS.     INITIALIZES   *
*          *   POINTERS,  CHECKS COL 72 FOR  NONBLANK  CHARACTER.   *
*          *                                                        *
*          **********************************************************
FA1      DS    0H                 START OF SCAN.
         L     R8,CTRLWAP            LOCAL WORK AREA POINTER
         ST    RA,DELPTR           RA IS PTR TO 'RSTMT' OR         AADA
*                                     'PSTMT' IN IWA.              AADA
*                                      SAVE RA IN LOCAL WORK AREA  AADA
*                                      TO FREE IT FOR USE AS BASE. AADA
         L     RA,VFA02            LOAD BASE.                      AADA
         MVI   DLMFBYTE,INITVAL    INITIALIZE THE DELIMITER FUNC-  7821
*                                  TION BYTE.  X'7F' IS NOT EQUAL  7821
*                                  TO ANY OF THE FUNCTION BYTE     7821
*                                  VALUES IN THE TRT TABLE USED BY 7821
*                                  THE FB1 ROUTINE.  NOTE THAT THE 7821
*                                  HIGH ORDER BIT OR EQUAL SIGN    7821
*                                  DELIMITER(EQDELSW) IS TURNED    7821
*                                  OFF ALSO.                       7821
         ST    R9,CBEGP            SAVE POINTER TO START OF CARD AREA.
         LR    R7,R9               SAVE POINTER.
         LA    R7,SVO(R7)          COMPUTE CARD COLUMN 72.
         MVC   FAWA1(1),0(R7)     SAVE PUNCH IN COL 72
         SCSW  C,COLSTY            ZERO COLUMN 72 SW.
         SCSW  O,CXPNZ,FA3        TRANSFER CONTIN NOT RCVD
         CLI   0(R7),C' '          IS COLUMN 72 BLANK.
         BC    EQUAL,FA3           YES TRANSFER.
         SCSW  S,COLSTY            NO SET COLUMN 72 SW ON.
         MVI   0(R7),C' '         BLANK COL 72
FA3      DS    0H                  ENTRY.
*          **********************************************************
*          *                                                        *
*          *   TRANSFER TO PREPARE  FOR  CONTINUE OF SCAN IF CON-   *
*          *   TINUATION OF  PRECEDING CARD IS EXPECTED.   OTHER-   *
*          *   WISE  ZERO LOCAL SWITCHES.   TRANSFER  TO SCAN  IF   *
*          *   CARD IS FROM PROC AND IS TO BE OVERRIDDEN,  IF NOT   *
*          *   FROM PROC ETC, CLEAR DUPLICATE TABLE (DUPTB),  AND   *
*          *   PROCESS THIS CARD.                                   *
*          *                                                        *
*          **********************************************************
         ST    R7,CENDP            SAVE END POINTER FOR LENGTH.
         L     R7,AFB7            ADDRESS OF TRANSLATE TABLE
         ST    R7,FATRP           SAVE FOR SYMBOLIC PARAM RTN
         LA    R7,E1              ADDRESS OF SCAN ERROR RTN
         ST    R7,FERRP           SAVE FOR SYMBOLIC PARAMETER RTN
         MVI   INTBUF,0           ZERO LENGTH OF INTERMEDIATE BUFFER
         SR    R7,R7
         ST    R7,INTBUF-ITBMSGL  CLEAR TTR FIELD OF BUFFER
*                                      USED BY INTBUF (INTBUF EQUATE)
         L     RF,DELPTR                GET PTR SAVED ON ENTRY TO  AADA
*                                         THIS ROUTINE.            AADA
         IC    R7,LISTPTR(RF)           GET OFFSET TO OPERANDS     AADA
         BCTR  R7,R0               DECREMENT OFF SET BY ONE.
         AR    R7,R9               COMPUTE STRING POINTER.
         ST    R7,CSTRP            SAVE STRING POINTER.
         MVC   MSGKEY(1),FAWA2     GET MOST RECENT KEY FOR         AACA
*                                      SECONDARY MESSAGE           AACA
         SCSW  O,CXPZ,FA9          TRANSFER CONT EXP SW ON.
         SCSW  C,CLEARSWW         ZERO SWITCHES.
         NI    SWY2,255-KEYNXTSW  CLEAR SW FOR NO MORE POSITIONAL M0297
         TM    DDOVZ,DDOV         IS IT OVERRIDDEN PROCEDURE      M0297
         BO    FA3001              YES, NO NEED FOR NEW PREFIX.  Y02668
* NOT CONTINUTATION AND NOT OVERRIDE - START OF NEW TEXT STRING. Y02668
         BAL   RE,AOPX             CREATE TEXT STRING PREFIX.    Y02668
FA3001   DS    0H                                                 M0297
         NI    ENDKYSWP,255-ENDKYSW TURN OFF SWITCH               M0482
         CLI   VERB(RF),4               IS VERB DD                 AADA
         BNE   FA3B                NO THEN TRANSFER               20033
*
*        IF THE OPERAND FIELD BEGINS WITH A SYMBOLIC PARAMETER
*        GO TO IEFVFB TO BUILD TEXT IN INTBUF.  (IF FIRST SYMBOLIC
*        IS DUMMY IT WILL BE CHANGED TO A KEYWORD, DUMM=).
*
         SPACE
         OC    SYMTTR(VFA4),SYMTTR   DOES SYMBUF HAVE A TTR?     Y02621
         BZ    FA3002              NO - THEREFOR.NO SYMBOLICS    Y02621
         SPACE
         CLI   1(R7),C'&&'        IS FIRST CHAR = AMPERSAND
         BNE   FA3002             NO  - TRANSFER, NO SYMBOLIC
         NI    AMPSWZ,255-AMPSW   TURN OFF SYMBOLIC BIT          A27310
         LA    R1,1(R7)           YES- GET PTR TO AMPERSAND
         XC    SYMBUF(VFA4),SYMBUF  INDICATE NO TTR IN SYMBUF    Y02621
         ST    R1,CBSYP           POINTER FOR SYMBOLIC PARAM RTN
         L     RF,FIEFVFB         GET SYMBOLIC PARAM RTN
         BALR  RE,RF              GO TO SYMBOLIC PARAM RTN
         L     R7,CSTRP           RESTORE REGISTER
FA3002   DS    0H
         L     R1,TEXTBUFP         ADDR OF TEXT STRING.          Y02668
         USING TEXT,R1             PREFIX ADDRESSABILITY.        Y02668
         CLC   FAI(5),1(R7)       IS OPERAND DUMMY
         BC    NOT-EQUAL,FA3A     NO - CONTINUE
         OI    STRDINDC,DTXDUMMY   INDICATE DUMMY DD FOR IEFVDA. Y02668
         MVI   5(R7),C'='         YES - MAKE DUMMY A KEYWORD
FA3A     DS    0H
         CLC   FAJ(5),1(R7)        IS OPERAND DYNAM               20033
         BC    NOT-EQUAL,FA3B      NO CONTINUE                    20033
         SCSW  Z,DDOVZ,FA3A01      TRANSFER NOT O'RIDDEN PROC  @ZA04797
         SCSW  S,FLUSHSWW          FLUSH DYNAM IF PROC O'RIDE  @ZA04797
         B     FA3B                BYPASS DYNAM                @ZA04797
FA3A01   DS    0H                                              @ZA04797
         OI    STRDINDC,DTXDYNAM   SET DYNAM BIT.                Y02668
         DROP  R1                                                Y02668
         MVI   5(R7),C'='          YES MAKE IT A KEYWORD          20033
FA3B     DS    0H                                                 20033
         SCSW  Z,DDOVZ,FA31       TRANSFER NOT OVERRIDDEN PROC
         SCSW  Z,PROCERRZ,FA91    TRANSFER NO ERROR THIS STATEMENT
         SCSW  S,CMTZ             YES- SET COMMENT SW
         SCSW  S,FERRORA             - SET DD ERROR
         B     FAC
FA31     DS    0H                 ENTRY NO OVERRIDE
         OI    LPBYSWZ,LPBYSW     INITIALIZE TO ON                 AACA
*                                      ( LEFT PAREN CHECK NOT      AACA
*                                        MADE FOR VERB KEYS )      AACA
         SCSW  C,CLEARVZ          ZERO SWITCHES
         SCSW  C,PROCSWZ          CLEAR EXEC PROC INDICATOR
         CLI   INTBUF,0           IS TEXT IN INTBUF
         BNE   FA3102             YES - TRANSFER
         XC    SYMBUF(VFA4),SYMBUF  INDICATE NO TTR IN SYMBUF    Y02621
*              BY ZEROING TTR FIELD IN SYMBOLIC BUFFER           Y02621
FA3102   DS    0H
         XC    DUPTAB(L'KEYTAB+L'DUPTAB),DUPTAB     INITIALIZE  YM02705
*                                 THE DUPTAB AND KEYTAB TABLES. YM02705
         SR    R7,R7               CLEAR REGISTER.
         STH   R7,CURLE            ZERO CURRENT LEVEL.
         STH   R7,LASLE            ZERO LAST LEVEL.
         L     R6,TBEGP            GET TEXT BEGIN POINTER.
         ST    R6,TKEYP            SET TEXT KEY POINTER.
         ST    R6,TLENP            INITIALIZE WITH KEY ADDR. KEY Y02668*
                                   RTNE (K1) MAKES IT COME OUT OKY02668
         LA    R6,1(R6)            BUMP BY ONE TO INIT.
         ST    R6,TNUMP            SET TEXT NUMBER POINTER.
         LA    R6,1(R6)            BUMP BY ONE TO INIT.
         STC   R7,0(R6)            ZERO TLENP BYTE.
         LA    R6,2(R9)            BUMP CHAR BEG POINTER.
         L     RF,DELPTR                GET PTR SAVED ON ENTRY     AADA
         IC    R7,NAMEL(RF)                                        AADA
         LA    R5,0(R7,R6)        COMPUTE CHARACTER END SYMBOL POINTER.
         ST    R5,CESYP           SAVE POINTER.
*          **********************************************************
*          *                                                        *
*          *   EXAMINE  LABEL AND SET POINTER (CBSYP) AS FOLLOWS:   *
*          *                                                        *
*          *   CARD IMAGE=//     - CBSYP POINTS TO COL. 3           *
*          *             =//A    -                 CHAR 'A'         *
*          *             =//A.B  -                 CHAR 'B'         *
*          *                                                        *
*          **********************************************************
         CLI   0(R6),C'A'         IS 1ST CHAR ALPHA-NUMERIC    @ZA26148
         BC    LOW,FA32B          NO,CHECK OTHER VALID CHARS   @ZA26148
FA32     DS    0H                 FOR LOOP.
         CLI   0(R6),C'.'         IS CHARACTER PERIOD.
         BNE   FA32A              NO,CONTINUE                     22553
         SCSW  C,VERBSWY          CLEAR VERB SWITCHES             22553
         TM    VERB(RF),4         IS VERB 'DD'                   A27940
         BNO   FA33               NO, INCLUDE PERIOD IN LABEL    A27940
         B     FA34               YES,PROCESS LABEL AFTER '.'    A27940
FA32A    CLI   0(R6),C' '         IS CHARACTER BLANK.             22553
         BC    EQUAL,FA33         YES TRANSFER.
         LA    R6,1(R6)           NO BUMP POINTER.
         B     FA32               TRANSFER BACK.
FA32B    CLI   0(R6),C' '         NAME FIELD BLANK?            @ZA26148
         BE    FA32               YES,CONTINUE                 @ZA26148
         CLI   0(R6),C'$'         NATIONAL CHARACTER?          @ZA26148
         BE    FA32               YES,OK                       @ZA26148
         CLI   0(R6),C'#'         NATIONAL CHARACTER?          @ZA26148
         BE    FA32               YES,OK                       @ZA26148
         CLI   0(R6),C'@'         NATIONAL CHARACTER?          @ZA26148
         BE    FA32               YES,OK                       @ZA26148
         LA    R2,ERMSG647        NON-ALPHA 1ST CHAR OF NAME   @ZA26148
         B     E1                 BRANCH TO ERROR ROUTINE      @ZA26148
FA33     DS    0H                 ENTER.
         LA    R6,1(R9)           RESTORE POINTER BEFORE LABEL.
*          **********************************************************
*          *                                                        *
*          *   IDENTIFY VERB AND SET APPROPRIATE   SWITCH.          *
*          *                                                        *
*          **********************************************************
FA34     DS    0H                 ENTER.
         LA    R6,1(R6)           BUMP POINTER TO 1ST CHARACTER LABEL.
         ST    R6,CBSYP           SAVE CHARACTER BEGIN SYM POINTER.
         SCSW  C,VERBSWY           CLEAR VERB SWITCHES.
         CLI   VERB(RF),X'08'           IS THIS PROC VERB          AADA
         BE    FA402                    YES-  GO PROCESS AS EXEC   AADA
         CLI   VERB(RF),2               NO -  COMPARE TO CODE FOR EXEC
         BC    HIGH,FA5            TRANSFER DD CARD.
         BC    EQUAL,FA4           TRANSFER EXEC CARD.
         SCSW  S,JOBSWY            SET JOB CARD SWITCH.
         MVI   IWAJMSGL,AOMSGLV1   INITIALIZE TO MSGLEVEL=1 TO  YM06865*
                                   PRINT COMMENT CARDS BETWEEN  YM06865*
                                   JOB CARD CONTINUATIONS.      YM06865
         LA    R7,JOBK             GET JOB KEY.
         B     FA6                 TRANSFER.
FA402    DS    0H
         SCSW  S,VERBCSWZ         INDICATE A PROC VERB
FA4      DS    0H                  ENTRY FOR EXEC CARD.
         SCSW  S,EXECSWY           SET EXEC CARD SWITCH.
         NI    AOSW2,255-AOPROCNM  CLEAR POSITIONAL PROCNM SW.   Y02668
         L     R7,TEXTBUFP         TEXT STRING ADDRESS.         YM00379
         USING TEXT,R7             TEXT PREFIX ADDRESSABILITY.  YM00379
         TM    SWH,CPSYSFLG        CHECKPT/RESTART EXEC?        YM00379
         BZ    FA406               BRANCH NO.                   YM00379
         OI    STREINDC,ETXCPFLG   SET C/R FLAG IN PREFIX.       Y02668
         NI    SWH,255-CPSYSFLG    CLEAR C/R EXEC FLAG.         YM00371
FA406    DS    0H                                                Y02668
         TM    SWE,PROC            EXEC READ FROM PROC?          Y02668
         BZ    FA404               BRANCH NO.                    Y02668
         OI    STREINDC,ETXPROC    SET PROC BIT IN PREFIX.       Y02668
         DROP  R7                                                Y02668
FA404    DS    0H                                                Y02668
         TM    SWE,PREF            IS THIS PROC END OF FILE ?   YA02705
         BZ    FA408               NO - DO NOT RESET PROC SW    YA02705
         NI    SWE,255-PROC-GPI-PREF-PRCV-CONCAT-POVRD-POVRX-SEQUENCE
*      EXEC ENCOUNTERED NOT FROM PROC  CLEAR PROC SWITCH        YA02705
         XC    SYMTTR(VFA4),SYMTTR CLEAR BUFFER FOR NEXT PROC   YM02713
         NI    AOSW2,SWAWTOFF      CLEAR INDICATOR FOR IEFVHA  @ZA05366
FA408    DS    0H                                               YM02705
         LA    R7,EXECK            GET EXEC KEY.
         B     FA6                 TRANSFER.
FA5      DS    0H                  ENTRY FOR DD CARD.
         SCSW  S,DDSWY             SET DD CARD SWITCH.
         LA    R7,DDK              GET DD KEY.
*          **********************************************************
*          *                                                        *
*          *   PUT VERB KEY INTO TEXT BUFFER,   TRANSLATE   LABEL   *
*          *   FOR VALIDITY,  AND  PUT LABEL IN  TEXT  BUFFER.      *
*          *                                                        *
*          **********************************************************
FA6      DS    0H                  ENTRY.
         BAL   R9,K1               PUT KEY IN TEXT.
         SCSW  Z,VERBCSWZ,FA60    TRANSFER NOT PROC VERB
         MVI   MSGKEY,PSECMSG      PROC SECONDARY MSG CODE        19874
FA60     DS    0H
         L     R1,CBSYP           GET BEGIN SYMBOL POINTER FOR LABEL.
         SR    R2,R2              CLEAR REGISTER.
         L     R3,AFB7            GET ADDRESS OF TRANSLATE TABLE.
         L     R5,CESYP           GET END SYMBOL POINTER FOR LABEL.
         SR    R5,R1              COMPUTE LENGTH OF LABEL.
         EX    R5,FB6             EXECUTE TRANSLATE.
         BC    13,FA61            IS LAST FUNCTION BYTE NONZERO.
         LA    R1,4               YES LOAD REGISTER WITH FOUR.
         CLR   R1,R2              IS DELIMITER A BLANK.
         BC    EQUAL,FA62         YES TRANSFER.
FA61     DS    0H                 ENTRY FOR ERROR.
         LA    R2,ERMES4          GET ERROR NUMBER.
         B     E1                 GO TO ERROR ROUTINE.
FA62     DS    0H                 ENTER.
         SCSW  S,LDLX              SET SWITCH FOR SUBLIST.
         BAL   R7,T1               PUT LABEL IN TEXT.
*          **********************************************************
*          *                                                        *
*          *   TRANSFER TO BEGIN SCAN IF JOB OR EXEC CARD           *
*          *                                                        *
*          **********************************************************
         SCSW  Z,DDSWY,FA91        TRANSFER FOR JOB OR EXEC CARD.
         L     R7,TKEYP           LOAD POINTER TO DD KEY IN TEXT.Y02113
         LA    R7,2(R7)           ADD 2 TO POINT TO NAME LENGTH. Y02113
         CLI   0(R7),STPCTLEN     IS LENGTH OF NAME 7?           Y02113
         BNE   FA63               NO,CANNOT BE STEPCAT DD CARD.  Y02113
         LA    R7,1(R7)           ADD 1 TO POINT TO NAME ITSELF. Y02113
         CLC   0(7,R7),STEPCATN   IS THE NAME STEPCAT?           Y02113
         BNE   FA63               NO,CONTINUE NORMAL DD PROCESS. Y02113
         LA    R7,WAEXCPFX       YES,ADDRESS OF EXEC CARD PREFIX Y02113
         USING TEXT,R7
         OI    STREINDC,ETXSTPCT   INDICATE STEP HAS STEPCAT DD. Y02668
         DROP  R7
FA63     DS    0H                                                Y02113
         L     R7,CSTRP            GET CHARACTER STRING POINTER.
         CLI   1(R7),C'*'        IS THIS DD*                       AABA
         BE    FA7                YES- GO PROCESS DD*              AABA
         CLC   1(4,R7),FAG        NO - CHECK FOR DD DATA           AABA
         BNE   FA91               TRANSFER NOT * OR DATA           AABA
         LA    R7,3(R7)           ADJUST R7 FOR THE COMPARE BELOW  AABA
FA7      DS    0H                                                  AABA
         CLI   2(R7),C' '          DELIMITER A BLANK?            Y02668
         BE    FA701               BRANCH YES.                   Y02668
         CLI   2(R7),C','          DELIMITER A COMMA?            Y02668
         BNE   FA91                BR TO TRANSLATE. ERROR, BUT   Y02668*
                                   WILL BE CAUGHT FURTHER ON.    Y02668
* DD */DATA STATEMENT.                                           Y02668
FA701    DS    0H                                                Y02668
         TM    SWE,GPI             PROC INPUT SWITCH ON?         Y02668
         BZ    FA702               BRANCH NO TO CONTINUE SCAN.   Y02668
* DD */DATA FOUND IN PROCEDURE - ERROR.                          Y02668
         LA    R2,ERMSG601         LOAD MESSAGE CODE.            Y02668
         B     E1                  BRANCH TO ERROR ROUTINE.      Y02668
FA702    DS    0H                                                Y02668
         L     R1,TEXTBUFP         TEXT STRING ADDRESS.          Y02668
         USING TEXT,R1             PREFIX ADDRESSABILITY.        Y02668
         OI    STRDINDC,DTXSYSIN   SET SYSIN BIT.                Y02668
         DROP  R1                                                Y02668
         MVC   DUPTAB(EDASTAB-DASTAB),DASTAB SET BITS IN DUPTAB    AABA
*                                            FOR ALL KEYWORDS      AABA
*                                            MUTUALLY EXCLUSIVE    AABA
*                                            WITH DD* OR DATA.     AABA
         B     FA91                                                AABA
*                                                                  AABA
         EJECT
DASTAB   DS    0H                                                  AABA
*        DASTAB IS A TABLE OF BITS USED TO REPLACE THE DD          AABA
*        KEYWORD ENTIRES IN THE DUPLICATE TABLE.  EACH BIT         AABA
*        CORRESPONDS TO HEX VALUE FOR A KEYWORD AS ASSIGNED        AABA
*        IN THE IEFVKEYS MACRO.  THOSE BITS CORRESPONDING TO       AABA
*        KEYWORDS PERMITTED ON DD* STATEMENTS ARE SET TO ZERO.     AABA
*        THOSE MUTUALLY EXCLUSIVE WITH DD* ARE SET TO ONE.         AABA
*                                                                  AABA
         SPACE
*  KEYS                                KEYWORDS ALLOWED ON DD*     AABA
*  -----                                -------- ------- -- ---    AABA
         SPACE
*  00-07 **************************                                AABA
         DC    BL1'11111111'                                       AABA
         SPACE
*  08-0F **************************                                AABA
         DC    BL1'11111111'                                      19874
         SPACE
*  10-17 **************************                                AABA
         DC    BL1'11111111'                                       AABA
         SPACE
*  18-1F **************************                                AABA
         DC    BL1'11111111'                                       AABA
         SPACE
*  20-27 **************************                                AABA
         DC    BL1'10111111'     DSID                          @Y30OPSB
         SPACE
*  28-2F **************************                                AABA
         DC    BL1'11101111'       DLM                          YM02719
         SPACE
*  30-37
         DC    BL1'11111111'                                       AABA
         SPACE
*  38-3F
         DC    BL1'11111111'                                       AABA
*    40-47 ************                                           19874
         DC    BL1'01101111'      DCB,VOL                      @Y30OPSB
*    48-4F ************                                           19874
         DC    BL1'11111110'      SER                          @Y30OPSB
*    50-57 ************                                           19874
         DC    BL1'11111010' BLKSIZE,BUFNO                        19874
*    58-5F ************                                           19874
         DC    BL1'11111111'                                      19874
*    60-67 ************                                           19874
         DC    BL1'11101111'      LRECL                        @Y30OPSB
*    68-6F ************                                           19874
         DC    BL1'11111111'                                      19874
         SPACE
EDASTAB  DS    0H END OF TABLE                                     AABA
         EJECT                                                  YM02719
DASTAB1  DS    0H                                               YM02719
*        DASTAB1 TABLE IS A BIT MASK REPRESENTING THE           YM02719
*        MUTUALLY EXCLUSIVE BIT SETTINGS IN DUPTAB FOR          YM02719
*        THE DDNAME KEYWORD.                                    YM02719
*                                                               YM02719
* KEYS                             KEYWORDS ALLOWED ON DDNAME   YM02719
*                                                               YM02719
* 00-07                                                         YM02719
         DC    BL1'11111111'                                    YM02719
* 08-0F                                                         YM02719
         DC    BL1'11111111'                                    YM02719
* 10-17                                                         YM02719
         DC    BL1'11111111'                                    YM02719
* 18-1F                                                         YM02719
         DC    BL1'11111111'                                    YM02719
* 20-27                                                         YM02719
         DC    BL1'11111111'                                    YM02719
* 28-2F                                                         YM02719
         DC    BL1'11011111'       DIAGNS                       YM02719
* 30-37                                                         YM02719
         DC    BL1'11111111'                                    YM02719
* 38-3F                                                         YM02719
         DC    BL1'11111111'                                    YM02719
* 40-47                                                         YM02719
         DC    BL1'01111111'       DCB                          YM02719
* 48-4F                                                         YM02719
         DC    BL1'11111111'                                    YM02719
* 50-57                                                         YM02719
         DC    BL1'11111010'       BLKSIZE,BUFNO                YM02719
* 58-5F                                                         YM02719
         DC    BL1'11111111'                                    YM02719
* 60-67                                                         YM02719
         DC    BL1'11111111'                                    YM02719
* 68-6F                                                         YM02719
         DC    BL1'11111111'                                    YM02719
         SPACE 1                                                YM02719
EDASTAB1 DS    0H                  END OF TABLE                 YM02719
         EJECT                                                  YM02719
*          **********************************************************
*          *                                                        *
*          *   ENTRY IF CARD IS AN EXPECTED CONTINUATION.           *
*          *                                                        *
*          **********************************************************
FA9      DS    0H                  ENTRY.
         SCSW  C,CXPOPZ            TURN OFF CONT EXP OPERAND   @ZA12458
         SCSW  C,CXPZ              TURN OFF CONT EXP SWITCH.
         SCSW  S,ENDSZ             TURN ON END SCAN SWITCH.
         SCSW  O,CMTZ,FAC          TRANSFER COMMENT SWITCH ON.
         SCSW  O,CXPNZ,E1         CONTIN EXPECTED - NOT RCVD
         SCSW  Z,CXPCZ,FA91       TRANSFER NOT CONT EXP & CANC     AACA
        LA    R7,ENDK            GET END KEY                       AACA
        BAL   R9,K1              PUT END KEY IN TEXT               AACA
        B     FAB                                                  AACA
*          **********************************************************
*          *                                                        *
*          *   ENTRY TO PREPARE FOR SCAN.                           *
*          *                                                        *
*          **********************************************************
FA91     DS    0H                  ENTRY.
         SCSW  C,ENDSZ             TURN OFF END SCAN SWITCH.
         TM    JOBSWY,JOBSW       IS THIS A JOB CARD?            A49636
         BZ    FB1                NO. GO TO ELEMENT SCAN.        A49636
*                                 YES. TEST FOR OPERANDS.        A49636
         L     R1,CSTRP           GET CHAR. STRING PTR.          A49636
         LA    R1,DEC1(R1)        ADJUST PLUS ONE.               A49636
         L     R5,CENDP           GET COL. 72 LOCATION.          A49636
         LA    R5,DEC0(R5)        CLEAR HI ORDER BYTE.           A49636
         CR    R5,R1              IS CSTRP NOW AT COL. 72?       A49636
         BE    BKR2               YES. NO OPERANDS EXIST.        A49636
*                                 GO SET END KEY.                A49636
         B     FB1                NO. GO TO ELEMENT SCAN.        A49636
         EJECT
*          *********************************************************
*          *                                                       *
*          *      SCAN EXIT ROUTINE                                *
*          *                                                       *
*          *********************************************************
FAA      DS    0H                  RETURN FOR ELEMENT SCAN ROUTINES.
         SCSW  Z,ENDSZ,FAC         TRANSFER END SCAN SW OFF.
FAB      DS    0H                  ENTRY FOR CONT EXP & CANCELLED.
         SR    R7,R7               CLEAR REGISTER.
         AH    R7,CURLE            IS CURRENT LEVEL ZERO.
         BC    ZERO,FAC            TRANSFER CURRENT LEVEL ZERO.
         LA    R2,ERMES7           GET ERROR MESSAGE NUMBER.
         L     R5,TBEGP            GET VERB KEY FOR THIS STMT.   Y02668
         MVC   MSGKEY(1),0(R5)     FOR ENTRY IN SECONDARY MSG.   Y02668
         B     E1                 TRANSFER ERROR
FAC      DS    0H                  ENTRY.
         SCSW  Z,COLSTY,FAD        TRANSFER COL 72 BLANK.
         SCSW  S,CXPZ              TURN ON CONT EXP SW.
         SCSW  Z,ENDSZ,FAE         TRANSFER END SCAN SW OFF.
         SCSW  S,CMTZ              TURN ON COMMENT SWITCH.
         B     FAE                 TRANSFER.
FAD      DS    0H                  ENTRY.
         SCSW  C,CMTZ              TURN OFF COMMENT SWITCH.
FAD1     DS    0H                 ENTRY FROM ERROR RTN FOR CXPN
         L     RF,QPARM+QMPCL-QMNAM REMOTE LIST ADDRESS            AADA
         OC    SYMBUF(VFA4),SYMBUF IS THERE  A SYMBUF TO WRITE?  Y02621
         BZ    FAFF                IF ZERO FIELD NO - TRANSFER   Y02621
         MVC   4(4,RF),SYMBUF      YES- GET SYMBUF TTR             AADA
         MVI   DISPLID(RF),SYMBUFID  BLOCK ID INTO REMOTE LIST   Y02621
         LA    R9,SYMBUF              AND PTR TO SYMBUF
         ST    R9,0(RF)                    TO REMOTE LIST          AADA
         MVI   QPARM+QMPOP-QMNAM,QMWRTE WRITE ONLY
         L     RF,FIEFVHQ          Q-MNGR ADDRESS                  AADA
         BALR  RE,RF              GO TO Q MANAGER TO WRITE SYMBUF
FAFF     DS    0H
         SCSW  Z,POVRDZ,FAF        TRANSFER NO DD OVER RIDE.
         SCSW  S,DDOVZ             TURN ON DD OVER RIDE FOR SCAN.
*                                 CLEAR THE COMMENT SW THAT WAS
         SCSW  C,CMTZ                  SET BY BKR RTN
FAE      DS    0H                  ENTRY TO GET ANOTHER CARD
         L     R7,CBEGP
         LA    R7,SVO(R7)         COMPUTE COL 72.
         MVC   0(1,R7),FAWA1      RESTORE PUNCH IN COL 72
         MVC   FAWA2(1),MSGKEY     SAVE MOST RECENT KEY            AACA
*                                      FOR SECONDARY MSG           AACA
         B     AOEXIT              BR TO GET REMAINDER OF STMT.  Y02668
FAF      DS    0H                  ENTRY TO GO PROCESS TEXT.
         SCSW  C,DDOVZ             TURN OFF SCAN DD OVER RIDE SW.
         SCSW  Z,FERRORA,FASUB    ERROR SWITCH ZERO TRANSFER   @G29AN2E
         SCSW  C,FERRORA          CLEAR ERROR SWITCH
         B     FAE                TRANSFER DO NOT PASS INTERNAL TEXT
         EJECT
***************************************************************@G29AN2E
*                                                             *@G29AN2E
*        SUBSYS KEYWORD EXIT                                  *@G29AN2E
*                                                             *@G29AN2E
***************************************************************@G29AN2E
*                                                             *@G29AN2E
*    A CHECK IS MADE FOR THE SUBSYS KEY.  IF IT DOES NOT      *@G29AN2E
*    EXIST THE POST SCAN EXIT IS TAKEN IMMEDIATELY.  OTHER-   *@G29AN2E
*    WISE AN SSOB IS BUILT SO THAT SUBSYS PROCESSING CAN BE   *@G29AN2E
*    DONE BY THE SUBSYSTEM.  THE SSNAME IS CHECKED FOR VALID  *@G29AN2E
*    CHARACTERS, THE SSOB AND SSIB ARE INITIALIZED, AND THE   *@G29AN2E
*    SUBSYSTEM INTERFACE REQUEST ROUTINE IS CALLED TO CALL    *@G29AN2E
*    THE APPROPRIATE SUBSYSTEM.  ON RETURN, THE RETURN CODES  *@G29AN2E
*    ARE CHECKED AND ERROR MESSAGES ARE ISSUED AS NECESSARY.  *@G29AN2E
*    IF NO ERRORS HAVE BEEN FOUND THE POST SCAN EXIT IS       *@G29AN2E
*    TAKEN.                                                   *@G29AN2E
*                                                             *@G29AN2E
*                                                             *@G29AN2E
*        REGISTERS ARE USED AS FOLLOWS:                       *@G29AN2E
*              R1=WORK REG                                    *@G29AN2E
*              R5=PTR TO SSOB                                 *@G29AN2E
*              R6=PTR TO SUBSYS KEY IN INTERNAL TEXT          *@G29AN2E
*              R7=WORK REG                                    *@G29AN2E
*              R8=WORK REG                                    *@G29AN2E
*                                                             *@G29AN2E
FASUB    DS    0H                                              @G29AN2E
*          ****************************************************@G29AN2E
*          *                                                  *@G29AN2E
*          *   CHECK IF SUBSYS PROCESSING IS REQUIRED. IF IT  *@G29AN2E
*          *   IS PROCEED WITH BUILDING THE SSOB, OTHERWISE   *@G29AN2E
*          *   GO TO POST SCAN EXIT.                          *@G29AN2E
*          *                                                  *@G29AN2E
*          ****************************************************@G29AN2E
         L     R1,TEXTBUFP        ESTABLISH ADDRESSABILITY     @G29AN2E
         USING TEXT,R1            TO INTERNAL TEXT             @G29AN2E
         TM    STRINDCS,DDSTR     IS THIS A DD CARD?           @G29AN2E
         BNO   FAFF1              NO,GO TO POST SCAN EXIT      @G29AN2E
         TM    STRDINDC,DTXSUBSK  WAS SUBSYS SPECIFIED         @G29AN2E
         BNO   FAFF1              NO, GO TO POST SCAN EXIT     @G29AN2E
         DROP  R1                                              @G29AN2E
         BAL   RE,AOTXTLTH        GO UPDATE TEXT LENGTH        @G29AN2E
         CLC   AOSTRLTH,TXTBFLEN  HAS BUFFER OVERFLOWED?       @G29AN2E
         BNH   FASUB0             NO, PROCEED WITH SSOB        @G29AN2E
         LA    R2,ERMSG749        BUFFER CAPACITY EXCEEDED     @G29AN2E
         MVI   MSGKEY,NOKEY       INDICATE NO SECONDARY MSG    @G29AN2E
         B     E1                 ISSUE ERROR MESSAGE          @G29AN2E
FASUB0   DS    0H                                              @G29AN2E
         L     R5,AOSSOB          GET ADDR OF SSOB             @G29AN2E
         USING SSOB,R5            ESTABLISH ADDR. FOR SSOB     @G29AN2E
         XC    SSOB(SSOBLN19),SSOB CLEAR ENTIRE SSOB           @G29AN2E
         MVC   SSOBID,SSOBCHAR    SET SSOB IDENTIFIER          @G29AN2E
         MVI   SSOBLEN+1,SSOBHSIZ  INIT LEN OF SSOB HEADER     @G29AN2E
         MVI   SSOBFUNC+1,SSOBCONV INIT SSOB FUNCTION ID       @G29AN2E
         LA    R7,SSCIBGN         GET ADDR OF CONV SUBSYS EXT. @G29AN2E
         ST    R7,SSOBINDV        INIT FUNCTION AREA PTR       @G29AN2E
         MVI   SSCILEN+1,SSCISIZE INIT LENGTH FIELD            @G29AN2E
         MVI   SSCISSNM,C' '      BEGIN BLANK OUT OF NAME      @G29AN2E
         MVC   SSCISSNM+1(L3),SSCISSNM PROPAGATE BLANK         @G29AN2E
         MVC   SSOBSSIB,AOSSIB    INIT PTR TO SSIB             @G29AN2E
         MVC   SSCIINTP,TEXTBUFP  SET INTERNAL TEXT PTR        @G29AN2E
*                                 IN SSCI                      @G29AN2E
*          ****************************************************@G29AN2E
*          *                                                  *@G29AN2E
*          *   CHECK THAT AT LEAST ONE PARAMETER HAS BEEN     *@G29AN2E
*          *   SPECIFIED.  CHECK FOR VALID NUMBER OF CHARS IN *@G29AN2E
*          *   THE SUBSYS NAME.                               *@G29AN2E
*          *                                                  *@G29AN2E
*          ****************************************************@G29AN2E
         L     R6,AOSUBSYS        POINT TO SUBSYS KEY          @G29AN2E
         XR    R7,R7              CLEAR WORK REG               @G29AN2E
         IC    R7,OFFNUM(R6)      GET NUMBER OF PARMS          @G29AN2E
         CH    R7,ONE             NO. OF PARMS GREATER/= TO 1  @G29AN2E
         BL    FASERR1            NO- 0 PARMS SPECIFIED        @G29AN2E
         BCTR  R7,0               FIND NO. OF SSPARMS          @G29AN2E
         STH   R7,SSCINPRM        SAVE NO. OF SSPARMS IN SSCI  @G29AN2E
         IC    R7,OFFLEN(R6)      GET LENGTH OF SSNAME         @G29AN2E
         CH    R7,MAXSSNML        IS LENGTH OF SSNAME NO MORE  @G29AN2E
*                                 THAN 4 CHARS?                @G29AN2E
         BH    FASERR2            NO, TOO MANY CHARS.          @G29AN2E
         CH    R7,ONE             IS THERE AT LEAST ONE CHAR   @G29AN2E
         BL    FASERR1            NO, SSNAME NOT SPECIFIED     @G29AN2E
         LA    RE,OFFSSNM(R6)     GET ADDR OF SSNAME           @G29AN2E
         AR    R7,RE              R7 NOW POINTS TO 1 BYTE      @G29AN2E
*                                 BEYOND SSNAME                @G29AN2E
         ST    R7,SSCISUBS        SAVE ADDR OF FIRST           @G29AN2E
*                                 LEN-SSPARM PAIR              @G29AN2E
         SPACE 2
*        ******************************************************@G29AN2E
*        *                                                    *@G29AN2E
*        *   CHECK FOR VALID CHARACTERS IN SSNAME             *@G29AN2E
*        * (TEST IS BASED ON THE FACT THAT ONLY ALPHA/NUMERIC *@G29AN2E
*        * CHARS AND CERTAIN SPECIAL CHARS ARE ALLOWED THROUGH*@G29AN2E
*        * THE SCAN ROUTINE)                                  *@G29AN2E
*        *                                                    *@G29AN2E
*        ******************************************************@G29AN2E
         SPACE 1
FASUB1   DS    0H                                              @G29AN2E
         BCTR  R7,0               GET ADDR OF LAST BYTE        @G29AN2E
*                                 OF SSNAME                    @G29AN2E
         CLI   0(R7),C'*'         ASTERISK?                    @G29AN2E
         BE    FASERR2            YES,ERROR                    @G29AN2E
         CLI   0(R7),C'/'         SLASH?                       @G29AN2E
         BE    FASERR2            YES,ERROR                    @G29AN2E
         CLI   0(R7),C'+'         PLUS?                        @G29AN2E
         BE    FASERR2            YES,ERROR                    @G29AN2E
         CLI   0(R7),C'-'         MINUS?                       @G29AN2E
         BE    FASERR2            YES,ERROR                    @G29AN2E
         CLI   0(R7),C' '         BLANK?                       @G29AN2E
         BE    FASERR2            YES,ERROR                    @G29AN2E
         CLI   0(R7),TWLVZERO     12/0 MULTIPUNCH?             @G29AN2E
         BE    FASERR2            YES,ERROR                    @G29AN2E
         CLI   0(R7),C','         COMMA?                       @G29AN2E
         BE    FASERR2            YES,ERROR                    @G29AN2E
         CLI   0(R7),C'.'         PERIOD?                      @G29AN2E
         BE    FASERR2            YES,ERROR                    @G29AN2E
         CLI   0(R7),C'('         LEFT PAREN?                  @G29AN2E
         BE    FASERR2            YES,ERROR                    @G29AN2E
         CLI   0(R7),C')'         RIGHT PAREN?                 @G29AN2E
         BE    FASERR2            YES,ERROR                    @G29AN2E
         CLI   0(R7),C'&&'        AMPERSAND?                   @G29AN2E
         BE    FASERR2            YES,ERROR                    @G29AN2E
         CLI   0(R7),C'='         EQUAL SIGN?                  @G29AN2E
         BE    FASERR2            YES,ERROR                    @G29AN2E
         CR    R7,RE              IS THIS THE FIRST CHAR       @G29AN2E
*                                 IN SSNAME?                   @G29AN2E
         BE    FASUB2             YES, TEST FOR NUMERIC        @G29AN2E
         B     FASUB1             CHECK PRECEDING CHAR         @G29AN2E
         SPACE 1
FASUB2   DS    0H                                              @G29AN2E
         MVC   SSNMWA(1),0(RE)    MOVE FIRST CHAR TO WORKSPACE @G29AN2E
         NI    SSNMWA,X'F0'       ZERO LOW ORDER BITS          @G29AN2E
         XI    SSNMWA,C'0'        TEST FOR DIFFERENCE IN ZONE  @G29AN2E
         BZ    FASERR2            ERROR, NUMERICS INVALID      @G29AN2E
         XR    RE,RE              ZERO WORK REG                @G29AN2E
         IC    RE,OFFLEN(R6)      GET LENGTH                   @G29AN2E
         BCTR  RE,0               DECREMENT FOR EXECUTE        @G29AN2E
         EX    RE,FASNMVE1        MOVE NAME FROM INTERNAL      @G29AN2E
*                                 TEXT INTO SSOB               @G29AN2E
         L     R7,AOSSIB          ESTABLISH ADDR               @G29AN2E
         USING SSIB,R7            FOR SSIB                     @G29AN2E
         XC    SSIB(SSIBSIZE),SSIB CLEAR ENTIRE SSIB           @G29AN2E
         MVC   SSIBID,SSIBCHAR    SET SSIB IDENTIFIER          @G29AN2E
         MVI   SSIBLEN+1,SSIBSIZE INIT SSIB LENGTH             @G29AN2E
         MVC   SSIBSSNM,SSCISSNM  GET NAME FORM SSOB           @G29AN2E
         DROP  R7                                              @G29AN2E
         L     R1,WAMSGBUF        GET ADDR OF MSG BUFFER       @G29AN2E
         LA    R1,AOLEN(R1)       ALLOW FOR EIGHT BYTE OFFSET  @G29AN2E
         ST    R1,SSCIMPTR        SAVE ADDR IN SSOB            @G29AN2E
         MVC   SSCIMLEN,MLEN      STORE MAX. MSG LENGTH        @G29AN2E
         OI    AOSSOB,X'80'       SET HIGH ORDER BIT FOR       @G29AN2E
*                                 JESSSREQ                     @G29AN2E
         LA    R1,AOSSOB          POINT TO ADDR OF SSOB        @G29AN2E
         IEFSSREQ                                              @G29AN2E
         NI    AOSSOB,X'FF'-X'80' TURN OFF HIGH ORDER BIT      @G29AN2E
*          ****************************************************@G29AN2E
*          *   CHECK RETURN CODE FROM SUBSYSTEM INTERFACE     *@G29AN2E
*          *   REQUEST ROUTINE.  IF SUCCESSFUL COMPLETION     *@G29AN2E
*          *   CODE IS RETURNED, THEN TEST RETURN CODE FROM   *@G29AN2E
*          *   THE SUBSYSTEM.  OTHERWISE, ISSUE ERROR MESSAGE *@G29AN2E
*          *   AND FAIL JOB.                                  *@G29AN2E
*          *                                                  *@G29AN2E
*          ****************************************************@G29AN2E
         SPACE 1
         B     *+4(RF)                                         @G29AN2E
         B     FASUB3             SUCCESSFUL RETURN CODE       @G29AN2E
         B     FASERR3            SUBSYS KEY NOT SUPPORTED     @G29AN2E
         B     FASERR5            SUBSYSTEM NOT OPERATIONAL    @G29AN2E
         B     FASERR4            SUBSYSTEM DOES NOT EXIST     @G29AN2E
         B     FASERR6            SYSTEM ERROR/FUNC NOT COMP.  @G29AN2E
         B     FASERR6            SYSTEM ERROR/LOGICAL         @G29AN2E
*          ****************************************************@G29AN2E
*          *                                                  *@G29AN2E
*          *   CHECK RETURN CODE FROM SUBSYSTEM PASSED IN THE *@G29AN2E
*          *   SSOB.  IF EQUAL TO ZERO, GO TO POST SCAN EXIT. *@G29AN2E
*          *   IF > 0 GO TO VGM TO ISSUE MSG RETURNED BY SUB- *@G29AN2E
*          *   SYSTEM.  IF RETURN CODE =4 OR 8 ALSO ISSUE     *@G29AN2E
*          *   WARNING MESSAGE.  THE JOB IS FAILED IF THE     *@G29AN2E
*          *   SUBSYSTEM HAS FOUND A SYNTAX ERROR, SYSTEM     *@G29AN2E
*          *   ERROR, OR UNKNOWN PROBLEM.                     *@G29AN2E
*          *                                                  *@G29AN2E
*          ****************************************************@G29AN2E
         SPACE 1
FASUB3   DS    0H                                              @G29AN2E
         NC    SSOBRETN,SSOBRETN  SET CONDITION CODE           @G29AN2E
         BZ    FAFF1              SUCCESSFUL SYNTAX CHECK      @G29AN2E
         LA    R2,SSCICMOD        GET TEXT MOD. RETURN CODE    @G29AN2E
         C     R2,SSOBRETN        CHECK FOR TEXT MODIFIED      @G29AN2E
         BE    FASWARN            GO SET UP FOR WARNING        @G29AN2E
         LA    R2,SSCISYNC        GET SYNTAX ERROR-CONT. CODE  @G29AN2E
         C     R2,SSOBRETN        CHECK FOR SYNTAX ERROR-CONT. @G29AN2E
         BE    FASWARN            GO SET UP FOR WARNING        @G29AN2E
         OI    AOSW4,AOMSGTXT     INDICATE TEXT IS PASSED      @G29AN2E
         XR    R2,R2              CLEAR REGISTER               @G29AN2E
         L     RF,IEFVGMV         LOAD VCON                    @G29AN2E
         BALR  RE,RF              GO TO ISSUE MSG FROM SUBSYS  @G29AN2E
         NI    AOSW4,X'FF'-AOMSGTXT RESET FLAG                 @G29AN2E
         LA    R2,SSCISYNT        GET SYNTAX ERROR- TERMINATE  @G29AN2E
         C     R2,SSOBRETN        CHECK FOR SYNTAX ERR-TERM    @G29AN2E
         BE    E102               TERMINATE JOB                @G29AN2E
         B     FASERR6            SYSTEM ERROR                 @G29AN2E
FASERR1  DS    0H                                              @G29AN2E
         LA    R2,ERMSG744        SUBSYSTEM NOT SPECIFIED      @G29AN2E
         B     FASUB4                                          @G29AN2E
FASERR2  DS    0H                                              @G29AN2E
         LA    R2,ERMSG748        SUBSYSTEM NAME INVALID       @G29AN2E
         B     FASUB4                                          @G29AN2E
FASERR6  DS    0H                                              @G29AN2E
         LA    R2,ERMSG750        SYSTEM ERROR IN PROCESSING   @G29AN2E
*                                 SUBSYS DD PARAMETER          @G29AN2E
FASUB4   DS    0H                                              @G29AN2E
         MVI   MSGKEY,NOKEY       INDICATE NO SECONDARY MSG    @G29AN2E
         B     E1                 ISSUE ERROR MESSAGE          @G29AN2E
FASERR3  DS    0H                                              @G29AN2E
         L     R2,AVGM90OT        GET ADDR OF VGM90 MSG OFFSET @G29AN2E
*                                 TABLE                        @G29AN2E
         LH    R7,M745OO(R2)      GET OFFSET TO MSG TEXT       @G29AN2E
         LH    RE,M745OL(R2)      GET LENGTH OF MSG            @G29AN2E
         B     FASSM1                                          @G29AN2E
FASERR4  DS    0H                                              @G29AN2E
         L     R2,AVGM90OT        GET ADDR OF VGM90 MSG OFFSET @G29AN2E
*                                 TABLE                        @G29AN2E
         LH    R7,M746OO(R2)      GET OFFSET TO MSG TEXT       @G29AN2E
         LH    RE,M746OL(R2)      GET LENGTH OF MSG            @G29AN2E
         B     FASSM1                                          @G29AN2E
FASERR5  DS    0H                                              @G29AN2E
         L     R2,AVGM90OT        GET ADDR OF VGM90 MSG OFFSET @G29AN2E
*                                 TABLE                        @G29AN2E
         LH    R7,M747OO(R2)      GET OFFSET TO MSG TEXT       @G29AN2E
         LH    RE,M747OL(R2)      GET LENGTH OF MSG            @G29AN2E
*          ****************************************************@G29AN2E
*          *                                                  *@G29AN2E
*          *   INITIALIZE MESSAGE BUFFER FOR MESSAGES         *@G29AN2E
*          *   IEF745I-IEF747I.  MOVE THE SSNAME FROM THE     *@G29AN2E
*          *   SSIB POINTED TO BY THE SSOB TO THE MESSAGE     *@G29AN2E
*          *   BUFFER                                         *@G29AN2E
*          *                                                  *@G29AN2E
*          ****************************************************@G29AN2E
         SPACE 1
FASSM1   DS    0H                                              @G29AN2E
         L     R1,WAMSGBUF        GET ADDR OF MSG BUFFER       @G29AN2E
         MVI   AOTXT(R1),C' '     MOVE BLANK TO POSITION OF    @G29AN2E
*                                 TEXT AREA                    @G29AN2E
         MVC   AOTXT1(149,R1),AOTXT(R1) BLANK REST OF TEXT AREA@G29AN2E
         MVC   AOLEN(2,R1),MLEN   INDICATE MAX LENGTH          @G29AN2E
         L     R2,AVGM90TX        GET ADDR OF VGM90 TEXT TABLE @G29AN2E
         AR    R2,R7              ADD OFFSET OF MSG TO GET     @G29AN2E
*                                 ADDR OF MSG                  @G29AN2E
         BCTR  RE,0               DECREMENT FOR EXECUTE        @G29AN2E
         EX    RE,FASNMVE2        MOVE MSG TO BUFFER           @G29AN2E
         L     R7,AOSSOB          GET ADDR OF SSOB             @G29AN2E
         USING SSOB,R7            ESTABLISH ADDRESSABILITY     @G29AN2E
         L     R2,SSOBSSIB        GET ADDR OF SSIB             @G29AN2E
         DROP  R7                                              @G29AN2E
         USING SSIB,R2            ESTABLISH ADDR TO SSIB       @G29AN2E
         MVC   AOSSNM(SSNAMEL,R1),SSIBSSNM MOVE SSNAME FROM    @G29AN2E
*                                 SSIB TO CORRECT POISTION IN  @G29AN2E
*                                 MESSAGE                      @G29AN2E
         OI    AOSW4,AOMSGTXT     INDICATE TEXT IS PASSED      @G29AN2E
         XR    R2,R2              CLEAR REG 2                  @G29AN2E
         L     RF,IEFVGMV         LOAD VCON                    @G29AN2E
         BALR  RE,RF              GO ISSUE MESSAGE             @G29AN2E
         NI    AOSW4,X'FF'-AOMSGTXT                            @G29AN2E
         B     E102               GO SET JOB FAIL              @G29AN2E
*          ****************************************************@G29AN2E
*          *                                                  *@G29AN2E
*          *   SET UP TO ISSUE WARNING MESSAGE.  GO TO        *@G29AN2E
*          *   VGM THEN TO POST SCAN EXIT.                    *@G29AN2E
*          *                                                  *@G29AN2E
*          ****************************************************@G29AN2E
FASWARN  DS    0H                                              @G29AN2E
         LH    R2,ONE             PLACE DUMMY WARNING NO IN REG@G29AN2E
         OI    AOSW4,AOWRNREQ     WARNING ONLY                 @G29AN2E
         OI    AOSW4,AOMSGTXT     TEXT IS BEING PASSED         @G29AN2E
         L     RF,IEFVGMV         LOAD VCON                    @G29AN2E
         BALR  RE,RF              GO ISSUE WARNING             @G29AN2E
         NI    AOSW4,X'FF'-AOMSGTXT TURN OFF TEXT INDICATOR    @G29AN2E
         B     FAFF1              TAKE POST SCAN EXIT          @G29AN2E
         SPACE 2
***** SUBSYS PROCESSING STORAGE                                @G29AN2E
FASNMVE1 MVC   SSCISSNM(0),OFFSSNM(R6) MOVE NAME FROM INTERNAL @G29AN2E
*                                 TEXT INTO SSOB               @G29AN2E
FASNMVE2 MVC   AOTXT(0,R1),0(R2)  MOVE MSG INTO VGM BUFFER     @G29AN2E
ONE      DC    H'1'               ONE                          @G29AN2E
MAXSSNML DC    H'4'               MAXIMUM SSNAME LENGTH        @G29AN2E
MLEN     DC    H'110'             MAX MSG LENGTH               @G29AN2E
SSOBCHAR DC    C'SSOB'            SSOB IDENTIFIER              @G29AN2E
SSIBCHAR DC    C'SSIB'            SSIB IDENTIFIER              @G29AN2E
AVGM90OT DC    A(VGM90MOT)        ADDR OF MESSAGE OFFSET TABLE @G29AN2E
AVGM90TX DC    A(VGM90TXT)        ADDR OF MESSAGE OFFSET TABLE @G29AN2E
TXTBFLEN DC    H'8192'             INTERNAL TEXT BUFFER LENGTH @G29AN2E
         DROP  R5                                              @G29AN2E
         EJECT
FAFF1    DS    0H                 ENTER
*****************************************************************Y02668
*          *                                                    *Y02668
*          *  POST SCAN EXIT - TAKEN BY JOB ENTRY SUBSYSTEM     *Y02668
*          *                                                    *Y02668
*****************************************************************Y02668
         SPACE 2                                                 Y02668
         BAL   RE,AOTXTLTH         GO TO UPDATE TEXT LENGTH      Y02668
* CHECK IF PGM=KEY IN EXEC TEXT STRING                         @ZA13844
         TM    SWZ,EXECSW          IS THIS AN EXEC STMT?       @ZA13844
         BZ    FACC1               BRANCH IF NOT               @ZA13844
         MVI   AOSCHKYS,PGMEK      PGM=KEY IN SEARCH LIST      @ZA13844
         MVI   AOSCHKYS+1,ENDLISTK  FLAG END OF SEARCH LIST    @ZA13844
         BAL   RE,AOKSRCHR         FIND PGM=KEY IN TEXT        @ZA13844
* R9 HAS ADDR OF PGM=KEY IF FOUND, ZERO IF NOT FOUND           @ZA13844
         LTR   R9,R9               PGM= KEY FOUND              @ZA13844
         BNZ   FACC1               YES, BRANCH                 @ZA13844
* EXEC TEST IS FOR PROCNAME, PROC= , OR ERROR CONDITION        @ZA13844
         L     RF,TEXTBUFP         TEXT STRING ADDRESS         @ZA13844
         USING TEXT,RF             PREFIX ADDRESSABILITY       @ZA13844
         OI    STREINDC,ETXPRCV    INDICATE STMT INVOKES PROC  @ZA13844
         DROP  RF                                              @ZA13844
* JES2 REQUIRES TEXT PREFIX INTERFACE                          @ZA13844
FACC1    DS    0H                                              @ZA13844
         L     RF,CWATXTEX         GET PTR TO POST SCAN RTN      Y02668
*                                  ENTRY IN NEL EXIT LIST        Y02668
         LTR   RF,RF               WAS AN ENTRY FOUND IN VH1     Y02668
         BZ    FACC3               NO, BYPASS EXIT               Y02668
         LA    R1,TEXTBUFP         GET PARM LIST PTR            YM00373
*                                  CONTAINING A 1 WORD TEXT PTR YM00373
         TM    0(RF),X'40'        Q. ADDR. DEFINITION              AAAA
         BO    FACC2               BR - YES                        AAAA
         LA    R3,CWAPSENM         GET PTR TO EXIT NAME         YM00373
         L     RF,CWALINK          GET LINK LIST FORM PTR       YM00373
         LINK  EPLOC=(3),MF=(E,(1)),SF=(E,(15)) TAKE NAME EXIT  YM00373
         B     FACC3                                               AAAA
FACC2    DS    0H                                                  AAAA
         L     RF,4(RF)           TAKE ADDR. EXIT                  AAAA
         BALR  RE,RF                                               AAAA
         EJECT                                                   Y02668
FACC3    DS    0H                                                  AAAA
         SCSW  Z,JOBSWY,AOMS01     BRANCH IF NOT JOB CARD        Y02668
         MVI   AOSCHKYS,MSGLEVJK   PUT MSGLEVEL KEY IN SEARCH    Y02668
*                                  PARMLIST                      Y02668
         MVI   AOSCHKYS+1,ENDLISTK INDICATE END OF LIST          Y02668
         BAL   RE,AOKSRCHR         FIND PTR TO MSGLEVEL KEY      Y02668
         LTR   R9,R9               WAS MSGLEVEL FOUND?           Y02668
         BZ    AOMS01              NO, BR. TO NORM PROCESSING    Y02668
         LA    R9,2(R9)            BUMP PTR TO PARM VALUE        Y02668
AOMS02   DS    0H                                                Y02668
         CLI   1(R9),AOMSLONE      IS MSGLEVEL=1?                Y02668
         BL    AOMS04              MSGLEVEL IS 0                 Y02668
         BH    AOMS03              MSGLEVEL IS 2                 Y02668
         MVI   IWAJMSGL,AOMSGLV1   SET BIT FOR MSGLEVEL=1.       Y02668
         B     AOMS01              BRANCH TO NORM PROCESSING     Y02668
AOMS03   DS    0H                                                Y02668
         CLI   1(R9),AOMSLTWO      MSGLEVEL>2 ?                  Y02668
         BH    AOMS01              YES, LEAVE IN DEFAULT         Y02668
         MVI   IWAJMSGL,AOMSGLV2   SET BIT FOR MSGLEVEL=2.       Y02668
         B     AOMS01              BRANCH TO NORM PROCESSING     Y02668
AOMS04   DS    0H                                                Y02668
         MVI   IWAJMSGL,AOMSGLV0   SET BIT FOR MSGLEVEL=0.       Y02668
AOMS01   DS    0H                                                Y02668
* CHECK IF RESTART= SPECIFIED.                                   Y02668
         MVI   AOSCHKYS,RESTARJK   RESTART KEY IN SEARCH LIST.   Y02668
         MVI   AOSCHKYS+1,ENDLISTK END OF LIST INDICATOR.        Y02668
         BAL   RE,AOKSRCHR         FIND RESTART KEY IN TEXT.     Y02668
* AOKSRCHR RETURNS ADDR IN R9 IF KEY FOUND, ZERO IF NOT FOUND.   Y02668
         LTR   R9,R9               RESTART KEY FOUND?            Y02668
         BZ    AOFACC5             BRANCH NO.                    Y02668
* RESTART= HAS BEEN SPECIFIED.                                   Y02668
* FORMAT IS - RESTART=(STEPNAME,CHECKID).                        Y02668
         OI    SWH,CPFLGXX         SET RESTART FLAG             YM01573
         L     RE,TEXTBUFP         GET PTR TO PREFIX            YM01573
         USING TEXT,RE             ADDRESS JOB PREFIX           YM01573
         OI    STRJINDC,JTXCPSTF   FLUSH JOB 'TIL RESTART STEP  YM01573
*                                  IS FOUND                     YM01573
         DROP  RE
         CLI   2(R9),0             STEPNAME SPECIFIED?          YM01573
         BE    AORST09             NO, --ERROR, NEED STEPNAME   YM01573
* STEPNAME HAS BEEN SUPPLIED                                    YM01573
         CLI   3(R9),C'*'          RESTART FOR FIRST STEP?       Y02668
         BNE   AORST01             BR NO - ACTUAL NAME SPECIFIED.Y02668
         CLI   2(R9),1             IS '*' PART OF A STEPNAME?    Y02668
         BNE   AORST09             BR YES - ERROR. '*' MUST      Y02668*
                                   BE SPECIFIED ALONE.           Y02668
* RESTART=* HAS BEEN SPECIFIED.                                  Y02668
         OI    CRSW1,CRRES1        INDICATE RESTART FIRST STEP.  Y02668
* CHECK FOR CHECKID (CHECKPOINT NAME).                           Y02668
AORST01  DS    0H                                                Y02668
         CLI   1(R9),2             CHECKID SPECIFIED?            Y02668
         BNE   AOFACC5             EXIT IF NOT.                  Y02668
* CHECKID HAS BEEN SPECIFIED.                                    Y02668
         SR    R1,R1               CLEAR LENGTH REG.             Y02668
         IC    R1,2(R9)            INSERT STEPNAME LENGTH.       Y02668
         LA    R9,3(R1,R9)         COMPUTE ADDR OF CHECKID -     Y02668*
                                   (ADDR = 3 (KEY+NUMBER+LENGTH  Y02668*
                                   BYTES + LENGTH OF STEPNAME).  Y02668
         MVC   CWACHIDL(1),0(R9)   SAVE CHECKID LENGTH.          Y02668
         B     AOFACC5             EXIT FROM RESTART CHECK.      Y02668
*                                                                Y02668
* ENTRY FOR RESTART FORMAT ERRORS.                               Y02668
AORST09  DS    0H                                                Y02668
         MVI   MSGKEY,RESTARJK      RESTART KEY FOR SECONDRY MSG.Y02668
         LA    R2,ERMSG632         LOAD MESSAGE NUMBER.          Y02668
         B     E1                                                Y02668
*                                                                Y02668
* END OF RESTART PROCESSING.                                     Y02668
*                                                                Y02668
AOFACC5  DS    0H                                                Y02668
         TM    SWZ,EXECSW          PROCESSING AN EXEC STMT?      Y02668
         BNO   FAC1                NOT AN EXEC CARD-NO FIND.     Y02668
* EXEC STATEMENT.                                                Y02668
         TM    PSTMT+4,X'08'       EXEC CONVERTED FROM PROC STMT?Y02668
         BO    FAC1                DUMMY EXEC, DON'T TRY FIND.   Y02668
         L     R9,TBEGP            POINT TO BASE KEY.            Y02668
         LA    R9,1(R9)            POINT TO PARAM COUNT.         Y02668
         CLI   0(R9),2             TWO PARAMS? EXEC PROC HAS 2.  Y02668
         BL    AOFDSRCH            BRANCH IF LESS THAN 2 TO CHECK
*                                  FOR PROC=PROCNAME CONDITION.@ZA13424
* EXEC PROCNAME STATEMENT.                                       Y02668
         LA    R9,1(R9)            STEP TO STEPNAME LTH BYTE.    Y02668
         SR    R1,R1               CLEAR FOR INSERTION OF        Y02668
         IC    R1,0(R9)            STEPNAME LTH.                 Y02668
         LA    R9,1(R9)            POINT TO STEPNAME.            Y02668
         AR    R9,R1               POINT TO PROCNAME LTH BYTE.   Y02668
         B     AOFDCHCK            ERROR CHECK PROCNAME.         Y02668
* CHECK FOR EXEC PROC=PROCNAME STATEMENT.                        Y02668
AOFDSRCH DS    0H                                                Y02668
         MVI   AOSCHKYS,PROCEK     PROC= KEY IN PARM LIST.       Y02668
         MVI   AOSCHKYS+1,ENDLISTI SET END OF LIST INDICATOR.    Y02668
         BAL   RE,AOKSRCHR         SEARCH FOR KEY IN TEXT.       Y02668
* AOKSRCHR RETURNS ADDRESS OF FOUND KEY IN R9, ZERO IF KEY       Y02668
* NOT FOUND.                                                     Y02668
         LTR   R9,R9               CHECK IF KEY FOUND.           Y02668
         BZ    FAC1                BRANCH NOT FOUND.             Y02668
* EXEC PROC=PROCNAME STATEMENT.                                  Y02668
* R9 POINTS TO PROC= KEY.                                        Y02668
         LA    R9,2(R9)            POINT TO PROCNAME LTH.        Y02668
* CHECK PROCEDURE NAME LENGTH.                                   Y02668
AOFDCHCK DS    0H                                                Y02668
         CLI   0(R9),8             LENGTH EXCEED MAX?            Y02668
         BH    AOFDERR2            BRANCH YES TO ISSUE IEF642I.  Y02668
         CLI   0(R9),0             IS PROC NAME MISSING?       @ZA13367
         BE    AOFDERR4            YES,ISSUE ERROR MSG IEF646I @ZA13367
         MVC   TWORK(1),1(R9)      VALIDITY CHECK 1ST CHAR. MUST Y02668*
                                   BE ALPHABETIC.                Y02668
         NI    TWORK,X'F0'         ZERO LOW ORDER BITS.          Y02668
         XI    TWORK,C'0'          TEST FOR NUMERIC ZONE BITS.   Y02668
         BE    AOFDERR3            NUMERIC - ISSUE IEF644I.      Y02668
         CLI   1(R9),C'*'          ASTERISK?                     Y02668
         BE    AOFDERR3            YES, ERROR.                   Y02668
         CLI   1(R9),C'/'          SLASH?                        Y02668
         BE    AOFDERR3            YES, ERROR.                   Y02668
         CLI   1(R9),C'+'          PLUS?                         Y02668
         BE    AOFDERR3            YES, ERROR.                   Y02668
         CLI   1(R9),C'-'          MINUS?                        Y02668
         BE    AOFDERR3            YES, ERROR.                   Y02668
         SR    R1,R1               CLEAR FOR INSERTION OF        Y02668
         IC    R1,0(R9)            PROCNAME LTH.                 Y02668
         BCTR  R1,0                DECREMENT FOR EXECUTED MOVE   Y02668
         MVC   AOFDPCSV(8),AOPCSVBL BLANK PROCNAME AREA.         Y02668
         EX    R1,AOFDMOVE         MOVE PROCNAME TO BUF FOR FIND.Y02668
         MVC   AOFDPCL(1),0(R9)    MOVE NAME LTH TO BUF FOR FIND.Y02668
         TM    SWE,PROC            PROC SWITCH ON?               Y02668
         BZ    AOFDIST1            BR NO TO PROCESS PROCEDURE.   Y02668
* PROCEDURE WITHIN PROCEDURE ERROR.                              Y02668
         LA    R2,ERMSG613         LOAD ERR MSG CODE.            Y02668
         B     E1                  BRANCH TO PROCESS ERROR.      Y02668
AOFDIST1 DS    0H                                                Y02668
         L     R7,IWAWKBF          ADDRESS OF INSTRM WORK AREA.  Y02668
         LTR   R7,R7               INSTRM WORK AREA ?           YM06865
         BZ    AOFDIST3            NO - GO TO FIND RTN.         YM06865
         USING WORKAREA,R7                                       Y02668
         SR    R1,R1               CHECK                         Y02668
         IC    R1,WKCT             IF ANY INSTREAM PROCS         Y02668
         LTR   R1,R1               ARE LISTED IN THE DIRECTORY.  Y02668
         BZ    AOFDIST3            NONE LISTED.                  Y02668
* SEARCH THE DIRECTORY FOR THE PROCEDURE NAME.                   Y02668
         LA    R6,WKPROCN1         LOAD ADDR OF 1ST PROCNAME.    Y02668
AOFDIST2 DS    0H                                                Y02668
         CLC   0(8,R6),AOFDPCSV    INSTREAM PROC?                Y02668
         BE    AOFDIST4            BR YES TO BUILD PARM LIST FOR Y02668*
                                   EXPAND RTNE.                  Y02668
         LA    R6,11(R6)           POINT TO NEXT PROCNAME.       Y02668
         BCT   R1,AOFDIST2         CHECK NEXT ENTRY.             Y02668
AOFDIST3 DS    0H                                                Y02668
         LA    R0,AOFDPCSV         LOAD PROCNAME ADDRESS.        Y02668
         L     R1,PDCBP            LOAD PROC DCB ADDRESS.        Y02668
         TM    IWAEXTS,IWASFIND    SPECIAL FIND EXIT SPECIFIED?  Y02668
         BO    AOFDSPFD            BRANCH YES.                   Y02668
         FIND  (1),(0),D                                         Y02668
AOFDBRNC DS    0H                                                Y02668
         B     *+4(RF)             BRNACH ON RETURN CODE.        Y02668
         B     AOFDSWCH            PROCEDURE FOUND.              Y02668
         B     AOFDERR1            PROCEDURE NOT FOUND.          Y02668
         LA    R5,2                PROC LIB DEVICE I/O ERROR    YM02700
         L     RF,IEFVHRV          ISSUE                         Y02668
         BALR  RE,RF               WTO ERROR MESSAGE.            Y02668
         LA    R2,ERMSG614         LOAD ERR MSG CODE.            Y02668
         B     E1                  ISSUED ON SYSOUT.             Y02668
AOFDERR1 DS    0H                                                Y02668
         XC    SYMTTR(VFA4),SYMTTR CLEAR PTR TO SYMBOLIC PARAMETER
*                                  TABLE                       @ZA06243
         LA    R2,ERMSG612         LOAD ERR MSG CODE.            Y02668
         B     E1                  ISSUED ON SYSOUT.             Y02668
AOFDERR2 DS    0H                                                Y02668
         LA    R2,ERMSG632         LOAD ERR MSG CODE.            Y02668
         B     E1                  BRANCH TO ERROR EXIT.         Y02668
AOFDERR3 DS    0H                                                Y02668
         LA    R2,ERMSG647         LOAD ERR MSG CODE.            Y02668
         B     E1                  ERROR EXIT.                   Y02668
AOFDERR4 DS    0H                  PROC NAME MISSING           @ZA13367
         LA    R2,ERMSG646         ERROR MSG CODE.             @ZA13367
         B     E1                  ERROR EXIT.                 @ZA13367
AOFDIST4 DS    0H                                                Y02668
         MVC   WKPTR2(3),8(R6)     MOVE TTR OF INSTREAM PROC.    Y02668
         OI    IWAPARM,INSTPROC    SET INSTR PROC SWITCH.        Y02668
         XR    RF,RF               INDICATE PROC FOUND.          Y02668
         B     AOFDBRNC            BRANCH TO CHECK RETURN CODE.  Y02668
AOFDMOVE MVC   AOFDPCSV(0),1(R9)   EXECUTED MOVE - PROCNM TO BUF.Y02668
*                                                                Y02668
*  SPECIAL FIND ROUTINE - SAVE INTERFACE AS FIND SVC.            Y02668
*                                                                Y02668
AOFDSPFD DS    0H                                                Y02668
         XC    AOFDTMP1(4),AOFDTMP1 CLAAR LOAD SPACE             Y02668
         MVC   AOFDTMP1+1(3),IWAFINDP MOVE PTR FOR LOAD.         Y02668
         L     RF,AOFDTMP1         LOAD PTR TO SPECIAL FIND RTNE.Y02668
         BALR  RE,RF               BRANCH TO RTNE.               Y02668
         B     AOFDBRNC            BRANCH TO CHECK RETURN CODE.  Y02668
*                                                                Y02668
*  PROCEDURE FOUND - SET PROC (PROCLIB BEING USED) AND PRCV      Y02668
*     (PRIME PROCEDURE BUFFER) SWITCHES IN THE IWA.              Y02668
*                                                                Y02668
AOFDSWCH DS    0H
         MVI   SWE,PROC+PRCV       INIT PROC SWITCHES           YM02703
         XC    PDNM(L'PDNM+L'PSNM+L'RDNM+L'RSNM+L'PPSN),PDNM    YM02703
*                                  CLEAR O'RIDE WORK AREA       YM02703
         OI    SWC,PEXP            SET PROC EXEC STMT EXPECTED.  Y02668
         L     RF,TEXTBUFP         TEXT STRING ADDRESS.          Y02668
         USING TEXT,RF             PREFIX ADDRESSABILITY.        Y02668
         OI    STREINDC,ETXPRCV    INDICATE STMT INVOKES PROC.   Y02668
         DROP  RF                                                Y02668
FAC1     DS    0H                                                Y02668
         TM    SWA,DLM             DLM FOUND THIS CARD ?        YM03459
         BZ    AOEXIT              NO. GO TO EXIT               YM03459
         MVI   AOSCHKYS,DLMK       PUT DLM KEY IN SEARCH LIST   YM03459
         MVI   AOSCHKYS+1,ENDLISTK INDICATE END OF LIST         YM03459
         BAL   RE,AOKSRCHR         GO TO FIND DLM KEY           YM03459
         LTR   R9,R9               WAS DLM KEY FOUND ?          YM03459
         BZ    AOEXIT              NO. GO TO EXIT               YM03459
         CLI   1(R9),X'01'         DLM PARAMETER EXCEED 1 ?     YM03459
         BNH   FAC2                NO. GO CHECK FOR DLM LTH     YM03459
         LA    R2,ERMSG640         SET EXCESSIVE PARMS MSG CODE YM03459
         B     FAC3                GO TO PUT OUT MSG            YM03459
FAC2     DS    0H                                               YM03459
         CLI   2(R9),X'02'         DLM OPERAND GREATER THAN 2 ? YM03459
         BNH   AOEXIT              NO. GO TO EXIT               YM03459
         LA    R2,ERMSG642         SET EXCESSIVE PARM LTH CODE  YM03459
FAC3     DS    0H                                               YM03459
         MVI   MSGKEY,DLMK         SET DLM SECONDARY MSG CODE   YM03459
         B     E1                  GO TO ERROR EXIT             YM06094
         EJECT
AOEXIT   DS    0H                                                Y02668
         L     RF,IEFVHFHA         RETURN                        Y02668
         BR    RF                  TO VHF.                       Y02668
         DS    0H                                                Y02668
TBUFLTH  DC    H'2000'             CONSTANT FOR TEXTBUF LENGTH.  Y02668
FAG      DC    C'DATA'
FAI      DC    C'DUMMY '          CONSTANT FOR DD.
FAJ      DC    C'DYNAM'            CONSTANT FOR DD                20033
STPCTLEN EQU   X'07'              LENGTH OF STEPCAT NAME.        Y02113
STEPCATN DC    C'STEPCAT'         NAME FOR COMPARE.              Y02113
         EJECT
*          **********************************************************
*          *                                                        *
*          *   THIS ROUTINE MOVES PARAMETERS AND SUBPARAMETERS      *
*          *   FROM THE JCL STATEMENT INTO THE TEXT BUFFER.         *
*          *                                                        *
*          **********************************************************
T1       DS    0H
         LM    R2,R5,TKEYP         GET TEXT PTRS
*                                  R2= TKEYP
*                                  R3=TNUMP ( NOT USED )
*                                  R4=TLENP
*                                  R5=TENDP
*                                                                  AACA
         SCSW  O,LPBYSWZ,T102     BR IF BYPASS SW ON               AACA
*   NOW CHECK FOR MORE THAN ONE PARAM                              AACA
*                                                                  AACA
         CLI   1(R2),1             IS THERE AT LEAST ONE PARAM     AACA
         BL    T102                NO, BYPASS FURTHER CHECKS       AACA
*                                                                  AACA
*   MORE THAN ONE PARAM - CHECK IF IN PARENS                       AACA
*                                                                  AACA
         LH    R3,CURLE            CHECK IF CURRENT LEVEL OF PARENSAACA
         LTR   R3,R3                   IS MORE THAN ONE            AACA
         BNZ   T102                OK, BYPASS                      AACA
*
         XI    FPRNSWZ,FPRNSW      FLIP THE LEFT PAREN BIT         AACA
         BZ    T102                RESULT=0 LAST PARAMETER IN PARENS
*                                  RESULT=1 ERROR OUTSIDE PARENS   AACA
*
         LA    R2,ERMES19          FORMAT ERROR
         B     E1
         SPACE
T102     DS    0H
         LM    R2,R3,CBSYP    GET CHAR STRING PTRS
         SR    R3,R2               COMPUTE LENGTH OF SYMBOL
*  THREE INSTRUCTIONS DELETED HERE                             @ZA16422
         L     R5,TNUMP            GET NUMBER POINTER.
         CLI   0(R5),X'FF'         IS PARAM CT ALREADY AT 255?   Y02668
         BL    AOT1                BRANCH NO.                    Y02668
* PARAMETERS EXCEED ONE BYTE MAXIMUM COUNT OF 255.               Y02668
         LA    R2,ERMES3           SET CODE FOR EXCESSIVE PARAMS.Y02668
         B     E1                  TAKE ERROR EXIT.              Y02668
AOT1     DS    0H                                                Y02668
         SCSW  O,PDASSWW,T3        PERIOD AND AST SWITCHES ON.
         SCSW  Z,LDLX,T6           LAST DEL SWITCH OFF.
         SR    R6,R6               CLEAR REGISTER.
         AH    R6,CURLE            CURRENT LEVEL.
         SH    R6,LASLE            LAST LEVEL.
         BC    EQUAL+LOW,T6        TRANSFER.
         L     R6,TKEYP            GET TEXT KEY POINTER.
         LA    R6,1(R6)            BUMP POINTER.
         SR    R6,R5               TKEYP EQUAL TO TNUMP.
         BNH   T3A                 TRANS TNUMP NOT HIGH        @G29AN2E
         LA    R2,ERMES1           GET ERROR NUMBER.
         B     E1                  GO TO ERROR ROUTINE.
T3       DS    0H                  ENTRY FOR PERD AND AST.
         SCSW  O,JGCY,T6           SWITCH ON TRANSFER.
         SCSW  S,JGCY              SET SWITCH ON.
T3A      DS    0H                                              @G29AN2E
         L     R5,TKEYP            GET ADDR OF KEY             @G29AN2E
         CLI   0(R5),SUBSYSK       IS IT THE SUBSYS KEY        @G29AN2E
         BNE   T4                  NO, PROCEED NORMALLY        @G29AN2E
         LA    R2,ERMSG641         IMPROPER SUBPARM. LIST      @G29AN2E
         MVI   MSGKEY,SUBSYSK      IN THE SUBSYS FIELD         @G29AN2E
         B     E1                  GO ISSUE MESSAGE            @G29AN2E
T4       DS    0H                  ENTRY
         L     R5,TKEYP            INSURE REG. 5 POINTS TO      YA24040
         LA    R5,1(R5)            REAL NBR BYTE, NOT SUBLIST.  YA24040
         IC    R6,0(R5)            GET TEXT NUMBER BYTE
         LA    R6,1(R6)            ADD ONE TO NUMBER BYTE.
         STC   R6,0(R5)            PUT NUMBER BYTE BACK.
         OI    0(R4),HONE          OR HIGH ONE IN LENGTH BYTE.
         SR    R6,R6               CLEAR REGISTER.
         LR    R5,R4               SET REG WITH TNUMP.
         LA    R4,1(R4)            BUMP TO NEW TLENP.
         STC   R6,0(R4)            ZERO TEXT LENGTH BYTE.
T6       DS    0H                  ENTRY
         STC   R3,0(R4)            PUT LENGTH IN TEXT LENGTH BYTE.
         LA    R4,1(R4)            BUMP TLENP BY ONE.
         LPR   R6,R3               SAVE LENGTH
         BC    8,T7                TRANSFER LENGTH IS ZERO
         BCTR  R3,R0              DECREMENT LENGTH.
         EX    R3,T8               EXECUTE MOVE.
T7       DS    0H                  ENTRY.
         AR    R4,R6               COMPUTE NEW LENGTH BYTE.
         SR    R6,R6               CLEAR REGISTER
         STC   R6,0(R4)            ZERO NEW LENGTH BYTE.
         ST    R4,TLENP            SAVE LENGTH ADDRESS.
         IC    R6,0(R5)            GET NUMBER BYTE.
         LA    R6,1(R6)            ADD ONE TO NUMBER BYTE.
         STC   R6,0(R5)            PUT BACK NUMBER BYTE
         SR    R6,R6               CLEAR REGISTER.
         AH    R6,CURLE            CURRENT LEVEL.
         SH    R6,LASLE            LAST LEVEL.
         BC    NOT-LOW,T71         TRANSFER HIGH AND EQUAL.
         L     R5,TKEYP            GET TEXT KEY POINTER.
         LA    R5,1(R5)            BUMP POINTER.
T71      DS    0H                  ENTRY.
         ST    R5,TNUMP            SAVE TEXT NUMBER POINTER.
         SR    R6,R6
         AH    R6,CURLE
         STH   R6,LASLE
         BR    R7                  RETURN.
T8       MVC   0(0,R4),0(R2)
         EJECT
*          ******************************************************Y02668
*          *                                                    *Y02668
*          *                 AOTXTLTH                           *Y02668
*          *                                                    *Y02668
*          *   THIS ROUTINE CALCULATES THE LENGTH OF AN         *Y02668
*          *   INTERNAL TEXT STRING(INCLUDING PREFIX). IT THEN  *Y02668
*          *   PLACES THIS LENGTH INTO THE STRLTH FIELD OF THE  *Y02668
*          *   PREFIX.                                          *Y02668
*          *                                                    *Y02668
*          ******************************************************Y02668
         SPACE 2
AOTXTLTH DS    0H                                                Y02668
         L     R5,TEXTBUFP         SET UP ADDRESSABILITY FOR     Y02668
         USING TEXT,R5             TEXT STRING PREFIX            Y02668
         L     R1,TLENP            GET THE END OF TEXT STRING    Y02668
         LA    R1,1(R1)            PLUS END KEY                  Y02668
         SR    R1,R5               CALC TEXT STRING LENGTH       Y02668
         STH   R1,AOSTRLTH         MOVE TEXT STRING LENGTH       Y02668
         MVC   STRLTH(AONUML),AOSTRLTH  INTO TEXT PREFIX         Y02668
         DROP  R5                                                Y02668
         BR    RE                  RETURN TO CALLER              Y02668
         EJECT
*          **********************************************************
*          *                                                        *
*          *   THIS ROUTINE INSERTS KEY INTO TEXT BUFFER AND        *
*          *   STORES ZERO IN THE NUMBER AND LENGTH BYTES.          *
*          *   ALSO CHECK FOR BUFFER OVERFLOW AND TRANSFERS         *
*          *   TO B1 ROUTINE IF OVERFLOW OCCURS.                    *
*          *                                                        *
*          **********************************************************
K1       DS    0H
         L     R4,TLENP            GET ADDRESS OF LENGTH BYTE.
         L     R6,TENDP            GET ADDRESS OF END BYTE.
         LA    R3,1(R4)            COMP ADDR OF NEW LTH BYTE     Y02668
         STC   R7,0(R4)            ENTER KEY IN KEY BYTE.        Y02668
         CLI   0(R4),ENDK          WAS IT AN END KEY?            Y02668
         BC    NOT-EQUAL,K4        THIS STATEMENT. NO, CONTINUE. Y02668
* END OF TEXT FOR STATEMENT.                                     Y02668
         TM    SWZ,JOBSW+EXECSW    JOB OR EXEC STATEMENT?       YM01546
         BZ    AOK10               BRANCH IF NEITHER.           YM01546
         SCSW  O,VERBCSWZ,AOK10    BR IF PROC STMT-NO DEFAULTS. YM01546
         LA    R6,WAJOBPFX         ADDRESS OF PSEUEDO JOB PFX.   Y02668
         USING TEXT,R6             PREFIX ADDRESSABILITY.        Y02668
         TM    STRJINDC,JTXJOBFL   WAS JOB FAILED?               Y02668
         BO    AOK10               BR YES, BYPASS DEFAULT RTNE.  Y02668
* JOB OR EXEC STATEMENT AND JOB HAS NOT BEEN FAILED.            YM01546
* CHECK FOR OMITTED PARAMETERS FOR WHICH DEFAULTS ARE SUPPLIED.  Y02668
         BAL   R6,AODFAULT         PERFORM DEFAULT PROCESSING.   Y02668
         L     R6,TEXTBUFP         ADDR OF TEXT PREFIX.         YM01546
         TM    STRJINDC,JTXJOBFL   JOB FAILED BY DEFAULT RTNE?   Y02668
         BO    E1                  BR YES, ERR CODES ALL SET UP. Y02668
         DROP  R6                                                Y02668
AOK10    DS    0H                                                Y02668
         XC    MSGKEY,MSGKEY       TELL VGM NO SECONDARY MSG    YM00393
         OI    AOSW1,AOTXTWRT      SET TEXT WRITE SW. FOR VHCB   Y02668
         ST    R4,TLENP            SET PTR FOR NEXT VERB KEY     Y02668
*                                 IN CASE E1 ENTERS ON DFLT ERR YM01536
         BR    R9                  RETURN.                      YM01536
         SPACE 1                                                 Y02668
* TEXT STRING NOT YET COMPLETED. ENTER NEXT KEY.                 Y02668
K4       DS    0H                                                Y02668
         STC   R7,MSGKEY           SAVE KEY FOR SECONDARY MSG.   Y02668
         ST    R4,TKEYP            SAVE POINTER FOR NEXT KEY.    Y02668
         XC    1(2,R4),1(R4)       ZERO NUMBER AND LENGTH BYTES. Y02668
         LA    R4,2(R4)            POINT TO LENGTH BYTE AND      Y02668
         ST    R4,TLENP            SAVE POINTER.                 Y02668
         BCTR  R4,0                POINT TO NUMBER BYTE AND      Y02668
         ST    R4,TNUMP            SAVE POINTER.                 Y02668
         BR    R9                  RETURN.                       Y02668
         EJECT
*          *******************************************************
*          *                                                    *Y02668
*          *            TEXT STRING PREFIX CREATION             *Y02668
*          *                                                    *Y02668
*          *******************************************************
         SPACE 2
AOPX     DS    0H                                                Y02668
         ST    RE,AODSPCSA         SAVE RETURN ADDR              Y02668
         L     R1,TEXTBUFP         GET BEGINNING OF TEXT BUFFER  Y02668
         USING TEXT,R1             TEXT STRING ADDRESS ABILITY   Y02668
         L     R0,TENDP            GET ADDR OF TEXT BUF END      Y02668
         CLI   VERB(RF),JOB        Q. JOB VERB                   Y02668
         BNE   AOPX2               NO, CHECK FOR EXEC            Y02668
         XC    STRLTH(STRJPFXL),STRLTH ZERO PREFIX BYTES         Y02668
         OI    STRINDCS,JOBSTR     INDICATE JOB STNT IN PREFIX   Y02668
         LA    R1,STRJPFXL(R1)     BUMP PTR BY JOB PREFIX LTH    Y02668
         B     AOPX10              STORE UPDATED TBEGP           Y02668
AOPX2    DS    0H                                                Y02668
         CLI   VERB(RF),PROCV      Q. PROC VERB                  Y02668
         BNE   AOPX3               NO, CHECK FOR EXEC            Y02668
         XC    STRLTH(STREPFXL),STRLTH ZERO PREFIX               Y02668
         OI    STRINDCS,PROCSTR    INDICATE PROC STMT, IN PREFIX Y02668
         OI    STREINDC,ETXPRCV    IND POSSIBLE PROC O'RIDES    YM00382
         LA    R1,STREPFXL(R1)     BUMP PTR BY PROC/EXEC PFX LTH Y02668
         B     AOPX10              STORE UPDATED TBEGP           Y02668
AOPX3    DS    0H                                                Y02668
         CLI   VERB(RF),EXEC       Q. EXEC VERB                  Y02668
         BNE   AOPX5               NO, ASSUME DD STMT            Y02668
         XC    STRLTH(STREPFXL),STRLTH ZERO PREFIX               Y02668
         OI    STRINDCS,EXECSTR    INDICATE EXEC STMT,IN PREFIX  Y02668
         LA    R1,STREPFXL(R1)     BUMP PTR BY PROC/EXEC PFX LTH Y02668
         B     AOPX10              STORE UPDATED TBEGP           Y02668
AOPX5    DS    0H                                                Y02668
         XC    STRLTH(STRDPFXL),STRLTH  ZERO PREFIX              Y02668
         OI    STRINDCS,DDSTR      INDICATE DD STMT IN PREFIX    Y02668
         LA    R1,STRDPFXL(R1)     BUMP PTR BY DD PFX LTH        Y02668
AOPX10   DS    0H                                                Y02668
         ST    R1,TBEGP            SET PTR TO BYTE AT WHICH      Y02668
*                                  VERB KEY WILL BE INSERTED     Y02668
         L     RE,AODSPCSA         RESTORE RETURN ADDR           Y02668
         BR    RE                  RETURN TO CALLER              Y02668
         DROP  R1                                                Y02668
         EJECT                                                   Y02668
*          ******************************************************Y02668
*          *                                                    *Y02668
*          * AODFAULT - DEFAULT PROCESSING ROUTINE.             *Y02668
*          *                                                    *Y02668
*          * AODFAULT IS ENTERED AFTER ALL THE JCL PARAMETERS   *Y02668
*          * FOR A JOB STATEMENT HAVE BEEN PROCESSED AND CON-   *Y02668
*          * VERTED TO INTERNAL TEXT. AODFAULT CHECKS IF PARTI- *Y02668
*          * CULAR PARAMS HAVE BEEN SPECIFIED ON THE STATEMENT. *Y02668
*          *                                                    *Y02668
*          * FOR THOSE PARAMS WHICH HAVE BEEN OMITTED,  AODFAULT*Y02668
*          * SUPPLIES A DEFAULT IN THE FOLLOWING WAY: A PREBUILT*Y02668
*          * TEXT SEGMENT FOR A PARTICULAR PARAM IS APPENDED TO *Y02668
*          * THE TEXT STRING FOR THE STATEMENT. THE ACTUAL      *Y02668
*          * DEFAULT VALUE FOR THE PARAM IS THEN OBTAINED FROM  *Y02668
*          * THE NEL AND IS ENTERED IN THE APPROPRIATE PLACE IN *Y02668
*          * THE APPENDED SEGMENT. THE TEXT POINTER IS UPDATED  *Y02668
*          * WITH EACH ADDITION OF DEFAULT TEXT. AFTER ALL      *Y02668
*          * DEFAULT PROCESSING IS COMPLETE, THE K1 ROUTINE     *Y02668
*          * ENTERS AN END KEY IN TEXT AFTER THE LAST APPENDED  *Y02668
*          * SEGMENT.                                           *Y02668
*          *                                                    *Y02668
*          * IN ADDITION, THE ACCOUNT NUMBER AND PROGRAMMER NAME*Y02668
*          * OPTIONS, IF SPECIFIED, ARE PROPAGATED FROM THE NEL *Y02668
*          * TO THE JOB STRING PREFIX, FOR PROCESSING BY THE    *Y02668
*          * INTERPRETER (IEFVJA).                              *Y02668
*          *                                                    *Y02668
*          * INPUT -                                            *Y02668
*          * .R4 - ADDRESS FOR APPENDED TEXT.                   *Y02668
*          *                                                    *Y02668
*          * OUTPUT -                                           *Y02668
*          * .R4 - ADDRESS FOR END KEY.                         *Y02668
*          *                                                    *Y02668
*          * NOTES -                                            *Y02668
*          * .AODFAULT USES THE AOPRMCHK RTNE TO CHECK IF A    *YM01546
*          *  VALUE HAS BEEN SPECIFIED IN JCL FOR A PARTICULAR *YM01546
*          *  KEYWORD.                                         *YM01546
*          *  INPUT TO AOPRMCHK IS THE KEYWORD CODE IN R3.     *YM01546
*          *  OUTPUT FROM AOPRMCHK IS A ZERO IN R9 IF A VALUE  *YM01546
*          *  HAS NOT BEEN SPECIFIED.                          *YM01546
*          * .CONTENTS OF R4 ARE PLACED IN R7, AND R7 IS USED  *YM08105
*          *  IN APPENDING DEFAULT TEXT TO THE TEXT STRING.    *YM08105
*          *                                                    *Y02668
*          ******************************************************Y02668
         SPACE 2                                                 Y02668
* R4 POINTS TO NEXT KEY BYTE IN THE TEXT  BUFFER.                Y02668
AODFAULT DS    0H                                                Y02668
         STM   R1,R7,AODFLTSA      SAVE CALLER'S REGS.           Y02668
         ST    R9,AODSPCSA         SAVE K1 CALLER'S RETURN REG. YM01546
         LR    R7,R4               MOVE KEY BYTE ADD TO SAFE REG.Y02668
         L     R1,WANELPTR         LOAD NEL ADDRESS.             Y02668
         USING NEL,R1              NEL ADDRESSABILITY.           Y02668
         SCSW  O,EXECSWY,AOEDFL10  BRANCH IF EXEC STMT.         YM01546
* JOB STATEMENT. PERFORM JOB DEFAULT PROCESSING.                YM01546
* MSGCLASS CHECK.                                                Y02668
         LA    R3,MSGCLAJK         LOAD KEY.                     Y02668
         BAL   R6,AOPRMCHK         CHECK IF DEFAULT REQUIRED.   YM01546
* AOPRMCHK RETURNS WITH ZERO IN R9 IF DEFAULT TEXT TO BE ADDED. YM01546
         LTR   R9,R9               DEFAULT REQUIRED?            YM01546
         BNZ   AODFLT10            NO, BRANCH TO TRY NEXT.      YM01546
* MSGCLASS VALUE NOT SPECIFIED ON JCL. DEFAULT IS SUPPLIED.     YM01546
         MVC   0(AOMGCLTH,R7),AOMSGCTX APPEND PREBUILT TEXT.     Y02668
         MVC   AOMGCDSP(1,R7),NELMSGCL ENTER DEFAULT.            Y02668
         LA    R7,AOMGCLTH(R7)     ADD TEXT LTH TO KEY BYTE PTR. Y02668
         MVI   0(R7),ENDK          SET END KEY FOR TEXT SEARCH. YM01546
* MSGLEVEL CHECK.                                                Y02668
AODFLT10 DS    0H                                                Y02668
*  INITIALIZE WORK AREA WITH DEFAULTS. THESE WILL BE REPLACED   YM08105
*  BY VALUES ON THE JOB CARD, IF ANY WERE SPECIFIED.            YM08105
         MVC   WAMSGL1(1),NELMSGL1 JCL MSGL DEFAULT TO WK AREA. YM08105
         MVC   WAMSGL2(1),NELMSGL2 ALC MSGL DEFAULT TO WK AREA. YM08105
         LA    R3,MSGLEVJK         LOAD KEY.                     Y02668
         BAL   R6,AOPRMCHK         CHECK IF DEFAULT REQUIRED.   YM00154
         LTR   R9,R9               DEFAULT REQUIRED?            YM00154
         BZ    AODFLT15            BR YES TO SUPPLY BOTH DFLTS. YM08105
*  KEYWORD NOT NULL, BUT ONLY ONE PRM OR AN EXCESSIVE NUMBER OF YM08105
*  PRMS MAY HAVE BEEN SPECIFIED. CHECK FOR BOTH.                YM08105
         CLI   1(R9),2             MORE THAN 2 PRMS?            YM08105
         BNH   AODFLT12            BRANCH NO.                   YM08105
*  MORE THAN 2 PRMS. FAIL JOB AND ISSUE ERROR MESSAGE.          YM08105
         MVI   MSGKEY,MSGLEVJK     SET KEY FOR SECONDARY MSG.   YM08105
         LA    R2,ERMES3           EXCESSIVE PARAM MSG CODE.    YM08105
         B     AODFLT69            BR TO FAIL JOB, ISSUE MSG.   YM08105
*                                                               YM08105
*  LEGAL NUMBER OF PRMS.                                        YM08105
AODFLT12 DS    0H                                               YM08105
         BAL   RE,AOMGL1DF         CHECK IF ONE DEFAULT OMITTED.YM08105
*  AOMGL1DF WILL REPLACE DEFAULTS IN THE WORK AREA WITH ANY     YM08105
*  VALUES SPECIFIED ON THE JOB STATEMENT.                       YM08105
AODFLT15 DS    0H                                               YM08105
*  MOVE MSGLEVEL VALUES (SPECIFIED OR DEFAULTS) FROM WA TO TEXT.YM08105
         MVC   0(AOMGLLTH,R7),AOMSGLTX APPEND PREBUILT TEXT.     Y02668
         MVC   AOMGLDP1(1,R7),WAMSGL1 ENTER WA VALUE IN TEXT.   YM08105
         MVC   AOMGLDP2(1,R7),WAMSGL2 ENTER WA VALUE IN TEXT.   YM08105
         LA    R7,AOMGLLTH(R7)     ADD TEXT LTH TO KEY BYTE PTR. Y02668
         MVI   0(R7),ENDK          SET END KEY FOR TEXT SEARCH. YM01546
* PRTY     CHECK.                                                Y02668
AODFLT20 DS    0H                                                Y02668
         LA    R3,PRTYJK           LOAD KEY.                     Y02668
         BAL   R6,AOPRMCHK         CHECK IF DEFAULT REQUIRED.   YM00154
         LTR   R9,R9               DEFAULT REQUIRED?            YM00154
         BNZ   AODFLT30            NO, BRANCH TO TRY NEXT.      YM00154
* PRTY     VALUE NOT SPECIFIED ON JCL. DEFAULT IS SUPPLIED.     YM00154
         MVC   0(AOPRTLTH,R7),AOPRTYTX APPEND PREBUILT TEXT.     Y02668
         MVC   AOPRTDSP(2,R7),NELJPRTY ENTER DEFAULT.            Y02668
         LA    R7,AOPRTLTH(R7)     ADD TEXT LTH TO KEY BYTE PTR. Y02668
         MVI   0(R7),ENDK          SET END KEY FOR TEXT SEARCH. YM01546
* REGION   CHECK.                                                Y02668
AODFLT30 DS    0H                                                Y02668
         L     RF,TEXTBUFP         ADDRESS OF TEXT STRING.      YM01546
         USING TEXT,RF             TEXT ADDRESSABILITY.         YM01546
         LA    R3,REGINJK          LOAD KEY.                     Y02668
         BAL   R6,AOPRMCHK         CHECK IF DEFAULT REQUIRED.   YM00154
         LTR   R9,R9               DEFAULT REQUIRED?            YM00154
         BNZ   AODFLT50            NO, BRANCH TO TRY NEXT.      YM00154
* REGION   VALUE NOT SPECIFIED ON JCL. DEFAULT IS SUPPLIED.     YM00154
         MVC   0(AOREGLTH,R7),AOREGNTX APPEND PREBUILT TEXT.     Y02668
         MVC   AOREGDSP(3,R7),NELREG ENTER DEFAULT.              Y02668
         OI    STRJINDC,JTXREGDF   INDICATE REGION IS A DEFAULT. Y02668
         LA    R7,AOREGLTH(R7)     ADD TEXT LTH TO KEY BYTE PTR. Y02668
         MVI   0(R7),ENDK          SET END KEY FOR TEXT SEARCH. YM01546
*****************************************************************Y02668
*                                                               *Y02668
* PROPAGATE OPTIONS  TO THE JOB TEXT PREFIX, FOR PROCESSING     *Y02668
* BY THE INTERPRETER (IEFVJA).                                  *Y02668
*                                                               *Y02668
*****************************************************************Y02668
AODFLT50 DS    0H                                                Y02668
         TM    NELPARMO,NELPGMN    PROGR NAME REQUIRED OPTION?   Y02668
         BZ    AODFLT54            BRANCH NO.                    Y02668
         OI    STRJINDC,JTXPROGN   YES, PROPAGATE OPTION TO PFX. Y02668
AODFLT54 DS    0H                                                Y02668
         TM    NELPARMO,NELACCT    ACCT # REQUIRED OPTION ?      Y02668
         BZ    AODFLT60            BRANCH NO.                    Y02668
         OI    STRJINDC,JTXACCTN   YES, PROPAGATE OPTION TO PFX. Y02668
* LABEL CHECK.                                                   Y02668
*****************************************************************Y02668
*                                                               *Y02668
* LABEL DEFAULT PROCESSING IS AN EXCEPTIONAL CASE. THE ACTUAL   *Y02668
* CHECK FOR THE SPECIFICATION OF LABEL PROCESSING PARAMETERS IS *Y02668
* MADE IN THE INTERPRETER (IEFVDA). WHAT THIS ROUTINE DOES IS   *Y02668
* MERELY TRANSMIT TO THE INTERPRETER THE LABEL PROCESSING       *Y02668
* DEFAULTS SUPPLIED IN THE NEL. THIS IS DONE BY MEANS OF LABEL  *Y02668
* FLAGS IN THE PREFIX OF THE JOB STATEMENT TEXT STRING, RATHER  *Y02668
* THAN BY APPENDING PREBUILT LABEL TEXT, TO RETAIN COMPATIBILITY*Y02668
* WITH EXISTING CODE IN IEFVDA.                                 *Y02668
*                                                               *Y02668
*****************************************************************Y02668
AODFLT60 DS    0H                                                Y02668
         CLI   NELLABEL,C'0'       CHAR EQUAL 0?                 Y02668
         BNE   AODFLT64            NO, CHECK FOR 1.              Y02668
* CHARACTER IS 0.                                                Y02668
         MVI   STRJLABD,JTXLABNL   SET BIT FOR NL.               Y02668
         B     AODFLT70            EXIT.                         Y02668
AODFLT64 DS    0H                                                Y02668
         CLI   NELLABEL,C'1'       CHAR EQUAL 1?                 Y02668
         BNE   AODFLT68            NO,INVALID SPECIFICATION.     Y02668
* CHARACTER IS 1.                                                Y02668
         MVI   STRJLABD,JTXLABLP   SET BIT FOR BLP.              Y02668
         B     AODFLT70            EXIT.                         Y02668
*  NEITHER 0 NOR 1 - INVALID CHARACTER.                          Y02668
AODFLT68 DS    0H                                                Y02668
         MVI   MSGKEY,LABELK       SET KEY FOR SECONDARY MSG.    Y02668
         LA    R2,ERMSG639         'INVALID CLASS' MSG CODE.     Y02668
*                                                               YM08105
*  COMMON ERROR ENTRY FOR SETTING JOB FAIL BIT AND ENTERING     YM08105
*  ERROR MSG CODE IN REG 2 FOR IEFVGM.                          YM08105
AODFLT69 DS    0H                                               YM08105
         L     RF,TEXTBUFP         ADDRESS OF JOB TEXT STRING.  YM08105
         OI    STRJINDC,JTXJOBFL   SET JOB FAIL SWITCH FOR K1.  YM08105
         DROP  RF                                               YM08105
         ST    R2,AODFLTSA+4       SET ERR CODE IN R2 SLOT.     YM01546
         B     AODFLT70            EXIT.                        YM01546
         EJECT                                                  YM01546
****************************************************************YM01546
*                                                              *YM01546
* EXEC STATEMENT DEFAULT PROCESSING -                          *YM01546
*                                                              *YM01546
* .SPECIFICATION OF A PARAMETER ON AN EXEC STATEMENT INVOKING  *YM01546
*  A PROCEDURE (EXEC PROC) RESULTS IN AN OVERRIDE OF THE VALUE *YM01546
*  SPECIFIED ON THE EXEC STATEMENT (EXEC PGM) CONTAINED IN THE *YM01546
*  PROCEDURE.                                                  *YM01546
* .SPECIFICATION OF A NULL PARAMETER (KEYWORD=,) ON THE EXEC   *YM01546
*  PROC STATEMENT, RESULTS IN AN OVERRIDE WITH A DEFAULT VALUE,*YM01546
*  OF THE VALUE SPECIFIED ON THE EXEC PGM STATEMENT.           *YM01546
* .ABSENCE OF A PARTICULAR KEYWORD FROM BOTH THE EXEC PROC AND *YM01546
*  THE EXEC PGM STATEMENTS, RESULTS IN THE ASSIGNMENT OF A     *YM01546
*  DEFAULT VALUE FOR THE KEYWORD.                              *YM01546
* .ABSENCE OF THE TIME KEYWORD FORM THE EXEC PROC STMT RESULTS *YM01546
*  IN THE ASSIGNMENT OF THE TIME VALUE SPECIFIED ON THE EXEC   *YM01546
*  PGM STMT. IF NONE WAS SPECIFIED, THE TIME DEFAULT VALUE     *YM01546
*  IS THEN ASSIGNED.                                           *YM01546
*                                                              *YM01546
****************************************************************YM01546
*                                                               YM01546
* CHECK IF TIME KEYWORD SPECIFIED.                              YM01546
AOEDFL10 DS    0H                                               YM01546
         TM    PSTMT+4,8           EXEC CONVERTED FROM PROC ST? YM01546
         BO    AOEDFL90            YES, BYPASS DEFAULTS.        YM01546
         L     R6,TBEGP            POINT TO BASE KEY.           YM01546
         LA    R6,1(R6)            POINT TO PARAM COUNT.        YM01546
         CLI   0(R6),2             TWO PRMS? EXEC PROC HAS 2.   YM01546
         BE    AOEDFL15            BR YES TO EXEC PROC CODE.    YM01546
* ONE PARAM - STMT MAY BE EXEC PROC=PROCNAME OR PGM=PROGNM.     YM01546
* CHECK FOR PROC= KEY.                                          YM01546
         MVI   AOSCHKYS,PROCEK     ENTER KEY IN SEARCH LIST.    YM01546
         MVI   AOSCHKYS+1,ENDLISTI END OF LIST INDICATOR.       YM01546
         BAL   RE,AOKSRCHR         SEARCH FOR KEY IN TEXT.      YM01546
* AOKSRCHR RETURNS ADDR OF FOUND KEY IN R9, ZERO IF NOT FOUND.  YM01546
         LTR   R9,R9               PROC= KEY FOUND?             YM01546
         BZ    AOEDFL30            BR NO, EXEC PGM.             YM01546
*                                                               YM01546
*  STATEMENT INVOKES PROC. IF NULL TIME SPECIFIED (TIME=,) THE  YM01546
*  DEFAULT IS SUPPLIED, TO OVERRIDE TIME VALUES SPECIFIED ON    YM01546
*  THE EXEC STMTS IN THE PROC. IF TIME KEYWORD WAS NOT          YM01546
*  SPECIFIED, NO DEFAULT IS SUPPLIED, TO PERMIT TIME VALUES     YM01546
*  SPECIFIED ON THE EXEC STMTS IN THE PROC TO TAKE EFFECT.      YM01546
*                                                               YM01546
AOEDFL15 DS    0H                                               YM01546
         MVI   AOSCHKYS,TIMEEEK    ENTER KEY IN SEARCH LIST.    YM01546
         MVI   AOSCHKYS+1,ENDLISTK END OF LIST INDICATOR.       YM01546
         LR    R3,R7               SAVE R7. AOKSRCHR SAVES R3.  YM01546
         BAL   RE,AOKSRCHR         SEARCH TEXT FOR KEY.         YM01546
         LR    R7,R3               RESTORE R7.                  YM01546
* AOKSRCHR RETURNS ADDR IN R9 IF KEY FOUND, ZERO IF NOT FOUND.  YM01546
         LTR   R9,R9               KEY FOUND?                   YM01546
         BZ    AOEDFL90            BR NO TO EXIT, NO DEFAULTS.  YM01546
* KEY FOUND. FALL THROUGH TO CHECK FOR NULL VALUE.              YM01546
AOEDFL30 DS    0H                                               YM01546
         LA    R3,TIMEEEK          LOAD KEY.                    YM01546
         BAL   R6,AOPRMCHK         CHECK IF DEFAULT REQUIRED.   YM01546
* AOPRMCHK RETURNS WITH ZERO IN R9 IF DEFAULT TEXT TO BE ADDED. YM01546
         LTR   R9,R9               DEFAULT REQUIRED?            YM01546
         BNZ   AOEDFL90            BRANCH NO TO EXIT.           YM01546
* TIME NOT SPECIFIED ON STATEMENT, OR TIME PARAM WAS NULL -     YM01546
* I.E., 'TIME=,'.                                               YM01546
* R7 CONTAINS  POINTER TO END OF TEXT + 1.                      YM01546
         MVC   0(AOTIMLTH,R7),AOTIMETX APPEND PREBUILT TEXT.    YM01546
         MVC   AOTIMDP1(4,R7),NELTIME ENTER MINUTES DEFAULT.    YM01546
         MVC   AOTIMDP2(2,R7),NELTIME+4 ENTER SECONDS DEFAULT.  YM01546
         DROP  R1                                               YM01546
         LA    R7,AOTIMLTH(R7)     ADD TEXT LTH TO KEY BYTE PTR.YM01546
         MVI   0(R7),ENDK          SET END KEY FOR STRING.      YM01546
AOEDFL90 DS    0H                                               YM01546
* FALL THROUGH TO EXIT.                                         YM01546
         EJECT                                                  YM01546
* ALL CHECKS COMPLETED. EXIT FROM DEFAULT PROCESSING.           YM01546
AODFLT70 DS    0H                                               YM01546
         ST    R7,AODFLTSA+12      REPLACE OLD KEY BYTE PTR(R4) YM01546*
                                   WITH UPDATED POINTER.        YM01546
         LM    R1,R7,AODFLTSA      RESTORE CALLER'S REGS.       YM01546
         L     R9,AODSPCSA         RESTORE K1 CALLER'S RET REG. YM01546
         BR    R6                  RETURN.                      YM01546
         EJECT                                                  YM01546
****************************************************************YM01546
*          *                                                   *YM01546
*          * AOPRMCHK - PARAMETER CHECK ROUTINE.               *YM01546
*          *                                                   *YM01546
*          * AOPRMCHK CHECKS TO SEE IF THE KEY FOR A PARTICULAR*YM01546
*          * KEYWORD EXISTS IN TEXT, AND IF SO, WHETHER AN     *YM01546
*          * ACTUAL  OR NULL PARAMETER HAS BEEN SUPPLIED.      *YM01546
*          * SPECIFICATION OF A NULL PARAMETER REPRESENTS, IN  *YM01546
*          * EFFECT, A REQUEST FOR THE ASSIGNMENT OF A DEFAULT *YM01546
*          * VALUE FOR THE KEYWORD.                            *YM01546
*          *                                                   *YM01546
*          * INPUT -                                           *YM01546
*          * .R3 - KEY FOR WHICH SEARCH IS TO BE MADE.         *YM01546
*          * .R7 - PTR TO END OF TEXT + 1.                     *YM01546
*          *                                                   *YM01546
*          * OUTPUT -                                          *YM01546
*          * .R9 - NON-ZERO IF PARAMETER SPECIFIED,            *YM01546
*          *       ZERO IF KEYWORD NOT SPECIFIED, OR SPECIFIED *YM01546
*          *       WITH NULL PARAMETER.                        *YM01546
*          *                                                   *YM01546
*          * NOTES -                                           *YM01546
*          * .AOPRMCHK USES AOKSRCHR TO FIND THE KEY IN TEXT.  *YM01546
*          * .AOPRMCHK SAVES R7 IN R3, TO INSURE ITS SAFETY,   *YM01546
*          *  SINCE AOKSRCHR SAVES ONLY RE THROUGH R6.         *YM01546
*          * .R6 IS THE BRANCH AND RETURN REG FOR THIS RTNE.   *YM01546
*          * .R3 AND R9 ARE USED AND NOT SAVED BY THIS RTNE.   *YM01546
*          * .AOPCHK2 IS AN ALTERNATE ENTRY POINT, IF ONLY THE *YM08105
*          *  TEXT OVERLAY FUNCTION OF AOPRMCHK IS DESIRED.    *YM08105
*          *                                                   *YM08105
****************************************************************YM08105
*                                                               YM08105
AOPRMCHK DS    0H                                               YM08105
         STC   R3,AOSCHKYS         ENTER KEY IN SEARCH LIST.    YM01546
         MVI   AOSCHKYS+1,ENDLISTK END OF LIST INDICATOR.       YM01546
         LR    R3,R7               SAVE R7. AOKSRCHR SAVES R3.  YM01546
         BAL   RE,AOKSRCHR         SEARCH TEXT FOR KEY.         YM01546
         LR    R7,R3               RESTORE R7.                  YM01546
* AOKSRCHR RETURNS ADDR IN R9 IF KEY FOUND, ZERO IF NOT FOUND.  YM01546
         LTR   R9,R9               KEY FOUND?                   YM01546
         BZ    AOPCHK10            BR NO TO RETURN.             YM01546
* KEYWORD WAS SPECIFIED. CHECK FOR NULL PARAM (I.E., KEYWORD=,).YM01546
         CLI   1(R9),1             ONE PARAMETER?               YM01546
         BH    AOPCHK10            MORE THAN 1 MEANS PARM VALID YM01546*
                                   OR JCL ERROR.                YM01546
         CLI   2(R9),0             IS PARAM LTH ZERO?           YM01546
         BNE   AOPCHK10            NON-ZERO LTH MEANS PRM VALID YM01546
****************************************************************YM01546
* NULL PARAMETER WAS SPECIFIED. ELIMINATE TEXT FOR KEYWORD, SO  YM01546
* THAT APPENDED DEFAULT TEXT WILL NOT REPRESENT DUPLICATION OF  YM01546
* TEXT FOR THE KEYWORD. THIS IS ACCOMPLISHED BY OVERLAYING THE  YM01546
* THREE BYTES OF TEXT FOR THE NULL PARAM WITH THE REMAINDER OF  YM01546
* THE TEXT STRING.                                              YM01546
****************************************************************YM01546
         LA    R2,3                LTH OF TEXT TO BE OVERLAID.  YM08105
*  R2 = LENGTH OF TEXT TO BE OVERLAID.                          YM08105
*  R7 = ADDRESS OF END OF TEXT +1                               YM08105
*  R9 = ADDRESS OF TEXT SEGMENT TO BE OVERLAID.                 YM08105
AOPCHK2  DS    0H                  ENTRY FOR TEXT OVERLAY.      YM08105
         STM   R4,R7,IWAIOSA       SAVE REGS USED BELOW.        YM01546
         LR    R4,R9               INITIALIZE TARGET REG.       YM01546
         LR    R5,R7               COPY EOTEXT +1 ADDRESS.      YM01546
         LA    R6,0(R2,R4)         ADD LTH TO TARGET PTR TO GET YM01546*
                                   SOURCE ADDR(TEXT AFTER NULL) YM01546
         SR    R5,R6               COMPUTE LTH OF MOVE -        YM01546*
                                   LTH=EOTEXT ADDR-SOURCE ADDR. YM01546
         MVCL  R4,R6               OVERLAY NULL PARAM TEXT.     YM01546
         LM    R4,R7,IWAIOSA       RESTORE REGS.                YM01546
         SR    R7,R2               UPDATE EOTEXT ADDRESS TO     YM08105*
                                   REFLECT NEW TEXT STRING LTH. YM01546
         SR    R9,R9               INDICATE DEFAULT REQUIRED.   YM01546
AOPCHK10 DS    0H                                               YM01546
         BR    R6                  RETURN.                      YM01546
*                                                               YM01546
         EJECT
****************************************************************YM08105
*          *                                                   *YM08105
*          *  MSGLEVEL KEYWORD SPECIFIED IN NON-NULL FORM. THIS*YM08105
*          *  ROUTINE CHECKS IF BOTH PRMS HAVE BEEN SPECIFIED. *YM08105
*          *  IF THERE HAS BEEN AN OMISSION, A DEFAULT IS      *YM08105
*          *  SUPPLIED.                                        *YM08105
*          *  LISTED BELOW ARE MSGLEVEL VARIATIONS FOR WHICH   *YM08105
*          *  THIS ROUTINE CHECKS, AND THE DEFAULTS SUPPLIED.  *YM08105
*          *                                                   *YM08105
*          *  A. MSGLEVEL=X      ALLOC DEFAULT.                *YM08105
*          *  B. MSGLEVEL=(X,)   ALLOC DEFAULT.                *YM08105
*          *  C. MSGLEVEL=(X,Y)  NO DEFAULT.                   *YM08105
*          *  D. MSGLEVEL=(,Y)   JCL DEFAULT.                  *YM08105
*          *  E. MSGLEVEL=(,)    JCL AND ALLOC DEFAULTS.       *YM08105
*          *                                                   *YM08105
****************************************************************YM08105
*  R9 = ADDRESS OF MSGLEVEL KEY IN TEXT STRING.                 YM08105
*  R2 = POINTER TO MSGLEVEL TEXT CONTROL FIELDS.                YM08105
*  RE = BRANCH AND RETURN REG.                                  YM08105
AOMGL1DF DS    0H                                               YM08105
         LA    R2,2(R9)            SET PTR TO JCL PRM LTH.      YM08105
         CLI   0(R2),1             NON-NULL, LEGAL JCL LTH?     YM08105
         BH    AOMSGL90            BR EXCESSIVE PRM LTH.        YM08105
         BL    AOMSGL50            BR NULL TO CHECK ALLOC PRM.  YM08105
*  NON-NULL JCL PRM - VAR A, B OR C.                            YM08105
         LA    R2,1(R2)            SET PTR TO JCL VALUE.        YM08105
         MVC   WAMSGL1(1),0(R2)    JCL VALUE FROM TEXT TO WA.   YM08105
*                                                               YM08105
*  CHECK ALLOC PRM.                                             YM08105
AOMSGL50 DS    0H                                               YM08105
         CLI   1(R9),2             ALLOC PRM INDICATED?         YM08105
         BL    AOMSGL70            BR NO TO OVERLAY TEXT-VAR A. YM08105
*  ALLOC PRM INDICATED - VAR B THRU E.                          YM08105
         LA    R2,1(R2)            SET PTR TO ALLOC LTH.        YM08105
         CLI   0(R2),1             NON-NULL, VALID ALLOC LTH?   YM08105
         BH    AOMSGL90            BR EXCESSIVE PRM LTH.        YM08105
         BL    AOMSGL70            BR NULL ALLOC PRM.           YM08105
*  NON-NULL ALLOC PRM - VAR C OR D.                             YM08105
         LA    R2,1(R2)            SET PTR TO ALLOC VALUE.      YM08105
         MVC   WAMSGL2(1),0(R2)    ALLOC VALUE FROM TEXT TO WA. YM08105
*                                                               YM08105
*  ENTRY TO OVERLAY EXISTING MSGLEVEL TEXT AND APPEND           YM08105
*  DEFAULT TEXT.                                                YM08105
*  R2 POINTS TO LAST BYTE OF MSGLEVEL TEXT.                     YM08105
AOMSGL70 DS    0H                                               YM08105
         LA    R2,1(R2)            ADD 1 FOR LAST BYTE.         YM08105
         SR    R2,R9               COMPUTE LTH OF MSGLEVEL TEXT.YM08105
         BAL   R6,AOPCHK2          BR TO OVERLAY EXISTING TEXT. YM08105
         BR    RE                  RETURN.                      YM08105
*                                                               YM08105
*  ENTRY FOR EXCESSIVE PRM LENGTH ERROR.                        YM08105
AOMSGL90 DS    0H                                               YM08105
         LA    R2,ERMSG642         EXCESSIVE PRM LTH MSG CODE.  YM08105
         MVI   MSGKEY,MSGLEVJK     SET KEY FOR SECONDARY MSG.   YM08105
         B     AODFLT69            BR TO FAIL JOB, ISSUE MSG.   YM08105
         EJECT
*          ******************************************************Y02668
*          *                                                    *Y02668
*          * PREBUILT TEXT SEGMENTS FOR PARAMETERS FOR WHICH    *Y02668
*          * DEFAULTS ARE SUPPLIED BY THE SYSTEM.               *Y02668
*          *                                                    *Y02668
*          ******************************************************Y02668
         SPACE 2                                                 Y02668
* MSGCLASS TEXT.                                                 Y02668
AOMSGCTX DS    0C                                                Y02668
         DC    AL1(MSGCLAJK)       MSGCLASS KEY.                 Y02668
         DC    AL1(1)              NUMBER OF PARAMS.             Y02668
         DC    AL1(1)              PARAM LENGTH                  Y02668
AOMGCDFL DC    AL1(0)              NULL PARAM - DEFAULT SLOT.    Y02668
AOMGCEND DS    0C                  END OF TEXT.                  Y02668
AOMGCLTH EQU   AOMGCEND-AOMSGCTX   LTH OF TEXT.                  Y02668
AOMGCDSP EQU   AOMGCDFL-AOMSGCTX   DISPLACEMENT FOR DEFAULT.     Y02668
*                                                                Y02668
* MSGLEVEL TEXT.                                                 Y02668
AOMSGLTX DS    0C                                                Y02668
         DC    AL1(MSGLEVJK)       MSGLEVEL KEY.                 Y02668
         DC    AL1(2)              NUMBER OF PARAMS.             Y02668
         DC    AL1(1)              FIRST PARAM LTH.              Y02668
AOMGLDF1 DC    AL1(0)              NULL PARAM - DEFAULT SLOT.    Y02668
         DC    AL1(1)              SECOND PARAM LTH.             Y02668
AOMGLDF2 DC    AL1(0)              NULL PARAM - DEFAULT SLOT.    Y02668
AOMGLEND DS    0C                  END OF TEXT.                  Y02668
AOMGLLTH EQU   AOMGLEND-AOMSGLTX   LTH OF TEXT.                  Y02668
AOMGLDP1 EQU   AOMGLDF1-AOMSGLTX   DISPLACEMENT FOR DEFAULT.     Y02668
AOMGLDP2 EQU   AOMGLDF2-AOMSGLTX   DISPLACEMENT FOR DEFAULT.     Y02668
*                                                                Y02668
* PRTY TEXT.                                                     Y02668
AOPRTYTX DS    0C                                                Y02668
         DC    AL1(PRTYJK)         PRTY KEY.                     Y02668
         DC    AL1(1)              NUMBER OF PARAMS.             Y02668
         DC    AL1(2)              PARAM LENGTH                  Y02668
AOPRTDFL DC    AL2(0)              NULL PARAM - DEFAULT SLOT.    Y02668
AOPRTEND DS    0C                  END OF TEXT.                  Y02668
AOPRTLTH EQU   AOPRTEND-AOPRTYTX   LTH OF TEXT.                  Y02668
AOPRTDSP EQU   AOPRTDFL-AOPRTYTX   DISPLACEMENT FOR DEFAULT.     Y02668
*                                                                Y02668
* REGION TEXT.                                                   Y02668
AOREGNTX DS    0C                                                Y02668
         DC    AL1(REGINJK)        REGION KEY.                   Y02668
         DC    AL1(1)              NUMBER OF PARAMS.             Y02668
         DC    AL1(4)              PARAM LENGTH.                 Y02668
AOREGDFL DC    AL3(0)              NULL PARAM - DEFAULT SLOT.    Y02668
         DC    C'K'                REGION IDENTIFIER.            Y02668
AOREGEND DS    0C                  END OF TEXT.                  Y02668
AOREGLTH EQU   AOREGEND-AOREGNTX   LTH OF TEXT.                  Y02668
AOREGDSP EQU   AOREGDFL-AOREGNTX   DISPLACEMENT FOR DEFAULT.     Y02668
*                                                                Y02668
* TIME TEXT.                                                     Y02668
AOTIMETX DS    0C                                                Y02668
         DC    AL1(TIMEEEK)        TIME KEY.                    YM01546
         DC    AL1(2)              NUMBER OF PARAMS.             Y02668
         DC    AL1(4)              FIRST PARAM LTH.              Y02668
AOTIMDF1 DC    AL4(0)              NULL PARAM - DEFAULT SLOT.    Y02668
         DC    AL1(2)              SECOND PARAM LTH.             Y02668
AOTIMDF2 DC    AL2(0)              NULL PARAM - DEFAULT SLOT.    Y02668
AOTIMEND DS    0C                  END OF TEXT.                  Y02668
AOTIMLTH EQU   AOTIMEND-AOTIMETX   LTH OF TEXT.                  Y02668
AOTIMDP1 EQU   AOTIMDF1-AOTIMETX   DISPLACEMENT FOR DEFAULT.     Y02668
AOTIMDP2 EQU   AOTIMDF2-AOTIMETX   DISPLACEMENT FOR DEFAULT.     Y02668
WAMSGL1  EQU   AOHEBSA             JCL PRM VALUE FOR MSGLEVEL.  YM08105
WAMSGL2  EQU   AOHEBSA+1           ALC PRM VALUE FOR MSGLEVEL.  YM08105
         EJECT
*          **********************************************************
*          *                                                        *
*          *   ERROR ROUTINE                                        *
*          *       SETS SWITCH TO FAIL JOB                          *
*          *       SETS ERROR SWITCH FOR DD STATEMENT               *
*          *       MOVES FAKE JOB TEXT FOR JOB STATEMENT            *
*          *       MOVES FAKE EXEC TEXT FOR EXEC STATEMENT          *
*          *       USES MESSAGE MODULE TO ISSUE ERROR MESSAGE       *
*          *       GOES TO SCAN EXIT ROUTINE                        *
*          *                                                        *
*          **********************************************************
E1       DS    0H                  ENTRY TO ERROR ROUTINE.
         L     RF,IEFVGMV         LOAD VCON
         SCSW  O,CXPNZ,E102        CTL RTNE ISSUES MSG          YM00393
         BALR  RE,RF               GO TO ISSUE MSG              YM00393
E102     DS    0H
         SCSW  S,PROCERRZ         SET ERROR INDICATOR FOR PROC O RIDE
         LA    R1,WAJOBPFX         ADDRESS OF PSEUEDO JOB PFX.   Y02668
         USING TEXT,R1             PREFIX ADDRESSABILITY.        Y02668
         OI    STRJINDC,JTXJOBFL   SET JOB FAILED BIT.           Y02668
         DROP  R1                                                Y02668
         SCSW  O,VERBCSWZ,E104    TRANSFER PROC VERB
         SCSW  O,JOBSWY,E2        TRANSFER JOB.
         SCSW  O,EXECSWY,E3       TRANSFER EXEC.
E104     DS    0H
         SCSW  S,FERRORA          SET ERROR FOR DD AND PROC VERB
         B     E4                 TRANSFER.
E2       DS    0H                 ENTER FOR JOB.
         MVC   WAJBNAME(8),DUMNAME CHANGE JOBNAME TO 'JOBFAIL',  Y02668
         LA    R1,DUMMYJCT         POINTER TO CANNED JOBFAIL TXT.Y02668
         LA    R5,JOTEXLEN         LOAD LENGTH OF TEXT.          Y02668
         B     E33                 MOVE FAIL TEXT TO TEXT BUFFER.Y02668
E3       DS    0H                 ENTER FOR EXEC.
         NI    SRCHSW1,SRCHCLR-SRCHF8        TURN OFF SYMBOLIC @ZA03299
*                                      BYPASS SW. SO THAT IT IS@ZA03299
*                                      NOT APPLIED TO THE NEXT @ZA03299
*                                      STMT.  NORMALLY TURNED  @ZA03299
*                                      OFF IN COMMA OR BLANKS  @ZA03299
*                                      ROUTINE.                @ZA03299
         L     R1,TEXTBUFP         PREFIX ADDRESSABILITY       @ZA25564
         USING TEXT,R1                                         @ZA25564
         TM    STREINDC,ETXPROC    IS STATEMENT FROM A PROC    @ZA25564
         DROP  R1                                              @ZA25564
         BO    E31                 YES,DO NOT CLEAR SYMBUF PTR @ZA25564
         XC    SYMTTR(VFA4),SYMTTR CLEAR PTR TO SYMBUF         @ZA15003
E31      DS    0H                                              @ZA15003
         LA    R1,DUMMYSCT         PTR TO CANNED EXEC FAIL TEXT. Y02668
         LA    R5,EXTEXLEN         LOAD LENGTH OF TEXT.          Y02668
E33      DS    0H                                                Y02668
         L     R4,TEXTBUFP         POINT TO START OF BAD TEXT    Y02668
         BCTR  R5,0                REDUCE TEXT LTH FOR MOVE.     Y02668
         EX    R5,DUMTXTMV         MOVE FAIL TEXT OVER BAD TEXT. Y02668
         LA    R5,0(R4,R5)         ADD START ADDR AND TEXT LTH-1.Y02668
         LA    R5,1(R5)            ADD 1 TO GET ADDR OF NEXT     Y02668
         ST    R5,TLENP            AVAILABLE BYTE IN TEXT BUF.   Y02668
E4       DS    0H                 ENTER FOR ALL.
         BAL   RE,AOTXTLTH         GO TO UPDATE TEXT LENGTH      Y02668
         LA    R7,ENDK             ENTER END KEY FOR             Y02668
         BAL   R9,K1               TEXT STRING IN ERROR.         Y02668
         SCSW  O,CXPNZ,FAD1       CONTRL RTN ISSUES CONTIN NOT RCVD MSG
         OI    CMTZ,CMT+ENDS      TURN ON COMMENT AND END SCAN SWS AACA
         B     FAC                TRANSFER.
DUMTXTMV MVC   0(0,R4),0(R1)       EXECUTED MV-FAIL TEXT TO BUF. Y02668
DUMMYJCT DS    0C                  FAKE JOB TEXT.
         DC    AL2(ENDDJCT-DUMMYJCT) LTH OF JOBFAIL TEXT.        Y02668
         DC    AL1(JOBSTR)         PREFIX - JOB STMT BIT ON      Y02668
         DC    AL1(JTXJOBFL+JTXMHEDR) IND JOB FAILED & MSG WRTN  Y02668
         DC    X'00'                                             Y02668
         DC    X'00'                                             Y02668
         DC    AL1(JOBK)          JOB KEY.
         DC    X'03'              NUMBER BYTE.
         DC    X'08'              LENGTH BYTE.
DUMNAME  DS    0C
         DC     C'JOBFAIL '       LABEL
         DC    X'08'              LENGTH BYTE.
         DC    C'JOBFAILB'        ACCOUNT NUMBER.
         DC    X'08'              LENGTH BYTE.
         DC    C'JOBFAILC'        PROGRAMMER NAME.
         DC    AL1(MSGLEVJK)      MSGLEVEL KEY
         DC    X'01'              NUMBER BYTE
         DC    X'01'              LENGTH BYTE
         DC    C'1'               MSGLEVEL =1
ENDDJCT  DS    0C                  END OF FAKE TEXT.
DUMMYSCT DS    0C                  FAKE EXEC TEXT.
         DC    AL2(ENDDSCT-DUMMYSCT) LTH OF EXECFAIL TEXT.       Y02668
         DC    AL1(EXECSTR)        INDICATE EXEC TEXT STRING     Y02668
         DC    X'00'                                             Y02668
         DC    AL1(EXECK)         EXEC KEY.
         DC    X'01'              NUMBER BYTE.
         DC    X'08'              LENGTH BYTE.
         DC    C'EXECFAIL'        EXEC LABEL.
         DC    AL1(PGMEK)         PGM EQUAL KEY.
         DC    X'01'              NUMBER BYTE.
         DC    X'08'              LENGTH BYTE.
         DC    C'EXECNONE'        PROGRAM NAME.
ENDDSCT  DS    0C                  END OF FAKE EXEC TEXT.
JOTEXLEN EQU   (ENDDJCT-DUMMYJCT)  JOBFAIL TEXT LENGTH           Y02668
EXTEXLEN EQU   (ENDDSCT-DUMMYSCT)  EXECFAIL TEXT LENGTH.         Y02668
         EJECT
*          **********************************************************
*          *                                                        *
*          *   BRANCH ROUTINE                                       *
*          *       TRANSLATES JCL STATEMENT AND BRANCHES TO         *
*          *       ROUTINE TO PROCESS DELIMITER.                    *
*          *                                                        *
*          **********************************************************
FB1      DS    0H                  ENTRY TO BRANCH ROUTINE.
         L     R1,CSTRP            GET CHARACTER STRING POINTER.
FB2      DS    0H                  ENTRY TO BRANCH ROUTINE.
         LA    R1,1(R1)            BUMP CHARACTER STRING POINTER.
         ST    R1,CBSYP            SAVE CHARACTER STRING POINTER.
         L     R3,AFB7            GET ADDRESS OF TRANSLATE TABLE
         B     FB4                 TRANSFER.
FB3      DS    0H                  SECONDARY ENTRY TO BRANCH ROUTINE.
         LA    R1,1(R1)            BUMP CHARACTER STRING POINTER.
FB4      DS    0H                  ENTRY FROM ABOVE
         L     R5,CENDP            GET END POINTER.
         SR    R2,R2              ZERO REGISTER.
         SR    R5,R1              COMPUTE LENGTH CHARACTER STRING.
         BC    12,BKR             TRANSFER TO BLANK RTN
         EX    R5,FB6              EXECUTE TRT INSTRUCTION
         LM    R5,R6,TKEYP         R5= TKEYP
*                                  R6= TNUMP
         BC    9,BKR          TRANSFER TO BLANK ROUTINE.           7821
         TM    ENDKYSWP,ENDKYSW    IS KEYWORD DELIMITER EXPECTED A28668
         BZ    FB41                NO - TRANSFER                 A28668
         CLI   0(R1),C'='          IS DLIMITER EQUAL             A28668
         BE    EQR                 YES. BRANCH TO EQUAL ROUTINE  A28668
         CLI   0(R1),C'.'          IS DELIMITER PERIOD           A28668
         BE    FB41                YEW. BRANCH TO CONTINUE       A28668
         CLI   0(R1),C'&&'         IS DELIMITER AMPERSAND        A28668
         BE    FB41                YES. TRANSFER TO CONTINUE     A28668
         CLI   0(R1),C' '          IS DELIMITER BLANK            A28668
         BNE   FB401               NO  TRANSFER ERROR            A28668
         BCTR  R1,R0               DECREMENT CSTRP               A28668
         CLI   0(R1),C','          WAS LAST CHARACTER COMMA      A28668
         BE    BKR3                YES, TRANSFER CONTINUATION    A28668
FB401    DS    0H                                                A28668
         LA    R2,ERMES19          NO. DELIMITER NOT FOR KEYWORD A28668
         B     E1                  GO TO ERROR RTN.
FB41     DS    0H                                                A28668
         LA    R0,EQ          EQUAL SIGN FUNCTION BYTE VALUE.      7821
         CR    R2,R0          WAS DELIMITER AN '='.                7821
         BE    EQR            YES-BRANCH TO EQUAL SIGN ROUTINE.    7821
         STC   R2,DLMFBYTE    NO-SAVE DELIMITER FUNCTION BYTE.     7821
         B     FB5-4(R2)      BRANCH TO PROPER ROUTINE.            7821
FB5      DS    0H                  BRANCH TABLE.
         B     BKR                 BLANK ROUTINE.
         B     PRR                 PERIOD ROUTINE.
         B     TTR                 ILLEGAL AND SLASH ROUTINE.
         B     LPR                 LEFT PAREN ROUTINE
         B     PLR                PLUS ROUTINE
         B     AMR                 AMPERSAND ROUTINE.
         B     ASR                 ASTERICK ROUTINE
         B     RPR                 RIGHT PAREN ROUTINE.
         B     COR                 COMMA ROUTINE.
         B     APR                 APOST ROUTINE
         B     EQR                 EQUAL ROUTINE.
         B     MIR                MINUS ROUTINE
         B     SLR                SLASH ROUTINE
FB6      DS    0H                  LABEL FOR TRANSLATE.
         TRT   0(0,R1),0(R3)       EXECUTES THE TRANSLATE TABLE.
         EJECT
TTR      DS    0H                  ENTRY FOR ILLEGAL ROUTINE.
         SPACE
*   THE 'PLUS 0' CHARACTER ( 12-0 MULTIPUNCH ) IS USED IN SOME DATAAACA
*        MNGMT MODULE NAMES.  A CHECK IS MADE HERE TO DETERMINE IF AACA
*        THE CHARACTER IS  1). A PLUS 0 AND  2). IN DSN FIELD.     AACA
         SPACE
         CLI   0(R1),X'C0'         IS THIS PLUS 0                  AACA
         BNE   TTR08               NO - ERROR                      AACA
         SPACE
         BAL   RE,ORRTN           GO SEE IF THIS KEY IS O'RIDDEN   AACA
         SPACE
         CLI   0(R5),DSNAMEK       IS IT DSN                       AACA
         BE    FB3                 YES - RET TO SCAN               AACA
         CLI   0(R5),DSIDK        IS IT THE DSID KEY?          @Y30OPSB
         BE    FB3      YES,12/0 OK WITH DSID AS WELL...       @Y30OPSB
TTR08    DS    0H                  NO  - ERROR                     AACA
         LA    R2,ERMES8           LOAD ERROR NUMBER
         B     E1                  TRANSFER TO ERROR ROUTINE.
         EJECT
BKR      DS    0H                  ENTRY TO BLANK ROUTINE
         BCTR  R1,R0               DECREMENT CSTRP.
         CLI   0(R1),C','          IS LAST DELIMITER COMMA.
         BC    EQUAL,BKR3          YES TRANSFER
         SCSW  O,COLSTY,BKR4      TRANSFER COL 72 NON BLANK
BKR11    DS    0H
         LA    R1,1(R1)            RESTORE CSTRP.
         SCSW  O,FLUSHSWW,BKR2     TRANSFER FLUSH SW ON.
         TM    SRCHSW1,SRCHF8     SYMBOLIC TO BE BYPASSED        A32730
         BO    BKR21              YES - BRANCH                   A32730
         SCSW  O,RPRSWW,BKR1       TRANSFER RT PAREN SW ON.
         ST    R1,CESYP            SAVE CHARACTER END SYMBOL POINTER.
BKR1     DS    0H                  ENTRY
         L     R7,DELPTR           GET RSTMT/PSTMT POINTER      YM00399
* IF THERE IS NO OPERAND, THE OPER DISPLACEMENT IS 71 (COL 71). YM0399
         CLI   LISTPTR(R7),71      IS THERE AN OPERAND?         YM00399
         BE    BKR1A               NO  DO NOT ENTER TEXT        YM02708
         BAL   R7,T1               ENTER TEXT.
BKR1A    DS    0H                                               YM02708
         SCSW  Z,POVRDZ,BKR2      TRANSFER NO DD OVERRIDE
*                                 SET COMMENT SW TO HANDLE POSSIBILITY
*                                      THAT THIS OVERRIDE IS
*                                      FOLLOWED BY A COMMENT
*                                      CONTINUATION.  THE SW
*                                      IS CLEARED WHEN ALL
*                                      COMMENT CONTINS ARE
         SCSW  S,CMTZ                  PROCESSED.
         B     FAB                GO TO SCAN EXIT
BKR21    NI    SRCHSW1,SRCHCLR-SRCHF8 SYMBOLIC BYPASS SWITCH OFF A32730
BKR2     DS    0H                  ENTRY
         LA    R7,ENDK             GET END KEY
         BAL   R9,K1               ENTER END KEY.
         SCSW  C,CLEARSWW          CLEAR SWITCHES
         SCSW  S,ENDSZ             SET END SCAN SWITCH ON.
         B     FAA                 TRANSFER
BKR3     DS    0H                  ENTRY
        SCSW  S,COLSTY           SET COL 72 SW ON                  AACA
         SCSW  S,CXPOPZ           SET CONT EXP FOR OPERANDS    @ZA12458
         B     FAA                                                 AACA
BKR4     DS    0H                 ENTRY TO CHECK FOR DELIMITER
         L     R7,CENDP
         BCTR  R7,R0              PTR TO COL 71
         CLR   R7,R1              IS OPERAND FIELD LESS THAN COL 72
         BC    HIGH,BKR11         YES  -  CONTINUE
         CLI   0(R7),C' '         IS  COL 71 BLANK
         BC    EQUAL,BKR11        YES - CONTINUE  PROCESSING
         LA    R2,ERMES6          OPERAND FIELD NOT TERM IN COMMA
         MVI   MSGKEY,0           CLEAR SECONDARY MSG
         B     E1
         EJECT
PRR      DS    0H                  ENTRY TO PERIOD ROUTINE.
         SCSW  O,PROCSWZ,PRR0      TRANS-EXEC PROC OR PROC VERB   20978
         BAL   RE,ORRTN           GO SEE IF THIS KEY IS O'RIDDEN   AACA
PRR0     DS    0H                                                 20978
         MVI   MSGSVE,ERMES10     ERROR NUMBER FOR POSSIBLE ERROR
*                                      DETECTED BY EQUAL RTN
         CLC   1(1,R1),0(R1)       PERIOD THEN A PERIOD          A33203
         BE    PRR13               CHECK IF PROGRAMMER NAME FLD   M0745
         SCSW  O,RPRSWW,PRR4       TRANSFER PERIOD ERROR.
*        R5= TKEYP                                                 AACA
         SCSW  O,PDASSWW,PRR3      TRANSFER PERIOD DEL & AST SW ON
         BCTR  R1,0                LOOK AT PRIOR BYTE IN BUFFER@ZA10120
         CLI   0(R1),C'='          IS IT '=.' CONDITION?       @ZA20640
         LA    R1,1(R1)            RESTORE SCAN REG TO NORMAL  @ZA10120
         BC    NOT-EQUAL,PRR01     TRANSFER IF NOT '=.'        @ZA20640
         LA    R2,ERMES10          INCORRECT USE OF PERIOD     @ZA20640
         B     E1                  GO TO ERROR ROUTINE         @ZA10120
PRR01    EQU   *                                               @ZA10120
         CLI   0(R5),SUBALLOK      IS KEY SUBALLOC.
         BC    NOT-EQUAL,PRR1      NO TRANSFER.
         LA    R7,1(R5)            SET POINTER TO BASE NUMBER BYTE
         CLI   0(R7),2             IS NUMBER TWO.
         BC    NOT-EQUAL,PRR1      NO TRANSFER
         SCSW  S,PDASSWW           TURN ON PERIOD DEL & AST SW.
         SCSW  S,LPBYSWZ          SET LEFT PAREN SW                AACA
         B     PRR3                TRANSFER FOR TEXT ENTRY.
PRR1     DS    0H                  ENTRY.
*        R6= TNUMP                                                 AACA
         CLI   0(R6),X'82'         IS NUMBER UP A LEVEL AT TWO.
         BC    NOT-EQUAL,PRR11     NO.
         CLI   0(R5),CONDPEK       YES IS KEY EXEC COND PERIOD.
         BC    EQUAL,PRR3          YES TRANSFER FOR TEXT ENTRY.
         CLI   0(R5),CONDEEK       NO IS KEY EXEC COND EQUAL.
         BC    EQUAL,PRR3          YES TRANSFER FOR TEXT ENTRY.
PRR11    DS    0H
         CLI   0(R6),2             TRANSFER IF NO. OF POSITIONAL  M0745
         BC    NOT-EQUAL,PRR12     PARAMETERS IS NOT EQUAL TO TWO M0745
         CLI   0(R5),JOBK          TRANSFER IF THIS IS NOT        M0745
         BC    EQUAL,FB3           A JOB STATEMENT.               M0745
PRR12    DS    0H
         CLI   0(R6),0             TRANSFER IF NO. OF POSITIONAL  M0745
         BC    NOT-EQUAL,PRR2      PARAMETERS IS NOTEQUAL TO ZERO M0745
         CLI   0(R5),PGMEK         IS THIS THE PGM= KEY           M0745
         BC    EQUAL,PRR4          TRANSFER - ERROR - IF PGM KEY  M0745
         SCSW  O,PDELSWW,FB3       TRANSFER IF PERIOD IS EXPECTED M0745
PRR2     DS    0H                  NO ENTRY FOR DICT LOOK UP.
         TM    EXECSWY,EXECSW     IS THIS AN EXEC STMT           A33229
         BNO   PRR4               IF NOT THEN AN ERROR           A33229
         OI    ENDKYSWP,ENDKYSW   SET END KEY SWITCH             A33229
         OI    SWY2,KEYNXTSW      SET NEXT KEY SWITCH            A33229
         B     EQR11              GO SEARCH SCAN DICT.           A33229
***********************************************************************
*                                                                 M0745
*  THIS PTM WAS WRITTEN TO ALLOW A PERIOD TO BE FOLLOWED BY A     M0745
*  PERIOD IN THE PROGRAMMER NAME FIELD ON THE JOB STATEMENT       M0745
*                                                                 M0745
***********************************************************************
PRR13    DS    0H                                                 M0745
         CLI   0(R6),2             TRANSFER IF NO. OF POSITIONAL  M0745
         BC    NOT-EQUAL,PRR4      PARAMETERS IS NOT EQUAL TO TWO M0745
         CLI   0(R5),JOBK          TRANSFER IF THIS IS            M0745
         BC    EQUAL,FB3           A JOB STATEMENT.               M0745
         B     PRR4                TRANSFER  ERROR                M0745
PRR3     DS    0H                  ENTRY FOR TEXT.
         ST    R1,CESYP            SAVE END SYMBOL POINTER
         ST    R1,CSTRP
         BAL   R7,T1               ENTER TEXT
         SCSW  S,LDLX              TURN ON LAST DEL SW
         B     FB1                 TRANSFER TO BRANCH ROUTINE.
PRR4     DS    0H                  ENTRY FOR ERROR
         LA    R2,ERMES10          GET ERROR NUMBER
         B     E1                  TRANSFER TO ERROR ROUTINE
         EJECT
LPR      DS    0H                  ENTRY TO LEFT PAREN ROUTINE
         LH    R4,CURLE            GET CURRENT LEVEL OF PARENS     AACA
         SCSW  S,FPRNSWZ           SET LEFT PAREN INDICATOR        AACA
         LA    R4,1(R4)            BUMP LEVEL BY ONE FOR LEFT PAREN
         STH   R4,CURLE            SAVE CURRENT LEVEL
         CL    R1,CBSYP            IS PTR STILL EQ TO STRING PTR   AACA
         BE    LPR3               CHECK FOR ILLEGAL LEFT PAREN   A36292
LPRORRTN TM    FLUSHSWW,FLUSHSW        IS THIS KEY OVERRIDDEN    A20874
         BC    ZERO,LPR2          BRANCH AROUND IF NOT OVERRIDE  A20874
         B     FB2                 RETURN TO SCAN                A28667
LPR2     DS    0H                                                A20874
         SCSW  O,RPRSWW,LPR1       NO TRANSFER IF RT PAREN SW ON.
*        R5= TKEYP                                                 AACA
         CLI   0(R5),DSNAMEK       IS KEY DSNAME
         BC    NOT-EQUAL,LPR1      NO TRANSFER FOR LEFT PAREN ERROR
*        R6= TNUMP                                                 AACA
         CLI   0(R6),0
         BC    NOT-EQUAL,LPR1      NO TRANSFER FOR LEFT PAREN ERROR
         ST    R1,CESYP            SAVE END SYMBOL POINTER.
         ST    R1,CSTRP
         BAL   R7,T1               ENTER TEXT.
         SCSW  C,PDASSWW           TURN OFF PERIOD DEL & AST SW.
         B     FB1                 TRANSFER TO BRANCH ROUTINE
LPR1     DS    0H                  ENTRY FOR ERRORS
         LA    R2,ERMES11          LOAD ERROR NUMBER.
         B     E1                  TRANSFER TO ERROR ROUTINE
LPR3     CLI   0(R5),DSNAMEK       IS KEY DSNAME                 A36292
         BC    NOT-EQUAL,FB2       RETURN TO SCAN NOT DSNAME     A36292
         SCSW  O,FLUSHSWW,FB2      RETURN IF KEY OVERRIDEN        M6150
         BCTR  R1,0                BACK UP TO PREVIOUS CHARACTER A36292
         CLI   0(R1),C'='          WAS LAST CHARACTER EQUAL SIGN A36292
         LA    R1,1(R1)            RESTORE SCAN REG TO NORMAL    A36292
         BE    LPR1                EQUAL SIGN LEFT PAREN ERROR   A36292
         B     FB2                 RETURN TO SCAN                A36292
         EJECT
PLR      DS    0H                 ENTRY FOR PLUS RTN
         BAL   RE,ORRTN           GO SEE IF THIS KEY IS O'RIDDEN   AACA
         SCSW  O,RPRSWW,PLR1       TRANSFER ERROR.
*        R5= TKEYP                                                 AACA
*        R6= TNUMP                                                 AACA
         CLI   0(R5),DSNAMEK      IS KEY DSNAME.
         BC    NOT-EQUAL,PLR1     NO TRANSFER
*                  SYNTAX CHECK FOR + IN THE WRONG POSITION        3565
         CLI   0(R6),X'81'        IS THIS SECOND OPERAND           3565
         BNE   PLR1               NO, ERROR                        3565
         CL    R1,CBSYP           IS IT FIRST CHARACTER            3565
         BNE   PLR1               NO, ERROR                        3565
         ST    R1,CBSYP           YES SET BEGIN SYMBOL POINTER
         B     FB3                GO BACK TO SCAN
PLR1     DS    0H                  ENTRY FOR ERRORS
         LA    R2,ERMES12          LOAD ERROR NUMBER.
         B     E1                  TRANSFER TO ERROR ROUTINE.
         EJECT
MIR      DS    0H                 ENTRY FOR MINUS ROUTINE
         BAL   RE,ORRTN           GO SEE IF THIS KEY IS O'RIDDEN   AACA
         SCSW  O,RPRSWW,MIR1      ERROR
*        R5= TKEYP                                                 AACA
*        R6= TNUMP                                                 AACA
         SPACE
         LA    RF,MIRTAB
         BAL   RE,XKRTN
         CLI   0(RF),0            WAS KEY FOUND IN TABLE?        Y02668
         BE    MIRA               NO, CONTINUE                   Y02668
         CLI   0(RF),JOBK         JOB KEY?                       Y02668
         BNE   FB3                BRANCH TO CONTINUE PROCESSING  Y02668
         TM    AOSW1,AOFSTPOS     2ND POSITIONAL RECEIVED?     @ZA14268
         BO    MIR1               YES, ERROR                     Y02668
         B     FB3                BRANCH TO CONTINUE PROCESSING  Y02668
MIRA     DS    0H
         CLI   0(R5),UNITK        IS IT UNIT KEY
         BC    NOT-EQUAL,MIR1     NO TRANSFER ERROR
         CLI   0(R6),0            YES IS NUMBER ZERO
         BC    EQUAL,FB3          CONTINUE SCAN
MIR1     DS    0H                 ENTRY FOR ERROR
         LA    R2,ERMES18         LOAD ERROR NUMBER
         B     E1                 TRANSFER TO ERROR RTN
         EJECT
AMR      DS    0H                  ENTRY TO AMPERSAND ROUTINE
         CLI   1(R1),C'&&'        IS THIS DOUBLE AMPERSANDS
         BE    AMR02              YES - TRANSFER
         CLI   INTBUF,0           NO  - IS AMPERSAND IN INTBUF
         BNE   AMR03              YES - DO NOT PROCESS AS SYMBOLIC
         SCSW  O,VERBCSWZ,AMR1     AMP ON PROC VERB IS ERROR       AACA
         OC    SYMTTR(VFA4),SYMTTR DOES SYMBUF HAVE A TTR?       Y02621
         BZ    AMR03               NO - THERE ARE NO SYMBOLICS   Y02621
         L     RF,FIEFVFB         GET SYMBOLIC PARAMETER RTN
         BALR  RE,RF
         CLI   INTBUF,0           IS TEXT IN INTBUF
         BE    AMR03              NO  - PROCESS AS NO SYMBOLIC
         B     FB1                YES - GO TO SCAN INTBUF
AMR02    DS    0H
         L     R6,CBSYP           BUMP BEGIN POINTER
         LA    R6,1(R6)
         ST    R6,CBSYP
         LA    R1,1(R1)           BUMP TO SECOND AMPERSAND
*
*   NOTE -  DD PROCESSING ROUTINE SYMTAX CHECKS DSNAME FIELD
*
AMR03    DS    0H
         BAL   RE,ORRTN           GO SEE IF THIS KEY IS O'RIDDEN   AACA
         SCSW  O,FBLITRLZ,APR8    BR- INCOMPLETE LITERAL EXPRESSION
         LM    R5,R6,TKEYP
         CLI   0(R5),DSNAMEK       IS KEY DSNAME.
         BC    NOT-EQUAL,AMR1      NO TRANSFER FOR ERROR
         CLI   0(R6),0             IS NUMBER ZERO.
         BC    NOT-EQUAL,AMR1      NO TRANSFER FOR ERROR
         SCSW  C,PDELSWW           TURN OFF PER DEL SW.
         B     FB3                 TRANSFER TO BRANCH ROUTINE
AMR1     DS    0H                  ENTRY FOR ERRORS
         LA    R2,ERMES13          LOAD ERROR NUMBER.
         B     E1                  TRANSFER TO ERROR ROUTINE.
         EJECT
SLR      DS    0H                 ENTRY FOR SLASH ROUTINE
         BAL   RE,ORRTN           GO SEE IF THIS KEY IS O'RIDDEN   AACA
         SCSW  O,RPRSWW,SLR1      TRANSFER ERROR
*        R5= TKEYP                                                 AACA
*        R6= TNUMP                                                 AACA
         CLI   0(R5),UNITK        IS KEY UNIT
         BC    NOT-EQUAL,SLR1     NO ERROR
         CLI   0(R6),0            YES IS NUMBER BYTE ZERO
         BC    EQUAL,FB3          YES CONTINUE SCAN
SLR1     DS    0H                 ENTRY FOR ERROR
         LA    R2,ERMES17         LOAD ERROR NUMBER
         B     E1                 TRANSFER TO ERROR RTN
         EJECT
ASR      DS    0H                  ENTRY TO ASTERICK ROUTINE
         BAL   RE,ORRTN           GO SEE IF THIS KEY IS O'RIDDEN   AACA
*        R5= TKEYP                                                 AACA
         CLI   0(R5),DDK          IS THIS DD* STATEMENT            AABA
         BE    FB3                YES - RET TO TRANSLATE           AABA
         CLI   0(R5),RESTARJK      IS IT RESTART=                  AAAA
         BE    FB3                 YES- RETURN TO TRANSLATE RTN    AAAA
         CLI   0(R5),SYSOUTK       IS IT SYSOUT=  ?             YM03227
         BE    FB3                 YES  RETURN TO TRANSLATE     YM03227
         SCSW  O,RPRSWW,ASR1       TRANSFER ERROR
         SCSW  Z,PDELSWW,ASR1      TRANSFER ERROR
         SCSW  O,ASTSWW,ASR1       TRANSFER ERROR
*                  SYNTAX CHECK FOR * IN THE WRONG POSITION        3565
*        R6= TNUMP                                                 AACA
         CLI   0(R6),0            IS IT FIRST OPERAND              3565
         BNE   ASR1               NO, ERROR                        3565
         CL    R1,CBSYP           IS IT FIRST CHARACTER            3565
         BNE   ASR1               NO, ERROR                        3565
         CLI   1(R1),C' '          IF LAST CHARACTER (FOLLOWED   M18103
         BE    ASR1                BY BLANK), IT'S AN ERROR      M18103
         SCSW  S,ASTSWW            TURN ON AST SW
         SCSW  S,LPBYSWZ           SET LEFT PAREN BYPASS           AACA
         B     FB3                GO CONTINUE SCAN
ASR1     DS    0H                  ENTRY FOR ERROR
         LA    R2,ERMES14          LOAD ERROR NUMBER
         B     E1                  TRANSFER TO ERROR ROUTINE
         EJECT
RPR      DS    0H                  ENTRY FOR RIGHT PAREN ROUTINE.
         SR    R4,R4               CLEAR REGISTER.
         AH    R4,CURLE            GET CURRENT LEVEL.
         BP    RPR02              TRANSFER CURLE HIGH - OK
         LA    R2,ERMES7          CURLE NOT HIGH - NG
         B     E1                 GO TO ERROR RTN
RPR02    DS    0H
DEC1     EQU   1                                                  22520
DEC0     EQU   0                                                  22520
         LA    R5,DEC1(R1)         GET PTR TO NEXT CHARACTER      22520
         LA    RF,RPRTAB           PT TO LAST TABLE ENTRY         22520
         BAL   RE,XKRTN            GO TO SEARCH TABLE             22520
         CLI   DEC0(RF),DEC0                                      22520
         BNE   RP06                YES, CONTINUE.              @ZA01934
RP03     DS    0H                                              @ZA01934
         LA    R2,ERMES19          NO, ERROR                      22520
         B     E1                  GO TO ERROR ROUTINE            22520
RP04     DS    0H                                                 22520
         CLI   DEC0(RF),AMPERSAN   IS NEXT CHAR SYMBOLIC?        A45828
         BE    RP05                YES,SKIP UPDATING PAREN       A45828
*                                  CURLE,ON RETURN FROM VFB WILL A45828
*                                  SCAN SAME PAREN AGAIN.        A45828
         BCTR  R4,R0               DECREMENT CURRENT LEVEL FOR RIGHT P.
         STH   R4,CURLE            SAVE CURRENT LEVEL.
RP05     BAL   RE,ORRTN           GO SEE IF THIS KEY IS O'RIDDEN A45828
         SCSW  O,RPRSWW,FB3        TRANSFER RIGHT PAREN SW ON.
         ST    R1,CESYP            SAVE END SYMBOL POINTER
         SCSW  S,RPRSWW            SET RIGHT PAREN SWITCH ON.
         B     FB3                 TRANSFER TO BRANCH ROUTINE.
RP06     DS    0H                                              @ZA01934
         SR    R4,R4              CLEAR REGISTER               @ZA01934
RP07     DS    0H                                              @ZA01934
         CLI   DEC0(RF),RPARENT   IS NEXT CHAR RT PAREN?       @ZA01934
         BNE   RP08               NO,CONTINUE.                 @ZA01934
         LA    R4,DEC1(R4)        BUMP COUNT                   @ZA01934
         LA    R5,DEC1(R5)        GET PTR TO NEXT CHARACTER    @ZA01934
         LA    RF,RPRTAB          PT TO LAST TABLE ENTRY       @ZA01934
         BAL   RE,XKRTN           GO SEARCH TABLE
         CLI   DEC0(RF),DEC0      VALID CHARACTER?             @ZA01934
         BE    RP03               NO, ERROR                    @ZA01934
         B     RP07               CONTINUE RT PAREN SEARCH     @ZA01934
RP08     DS    0H                                              @ZA01934
         SR    R5,R4              RESTORE CHAR POINTER         @ZA01934
         SR    R4,R4              CLEAR REGISTER               @ZA01934
         AH    R4,CURLE           GET CURRENT LEVEL            @ZA01934
         B     RP04               CONTINUE                     @ZA01934
         EJECT
COR      DS    0H                  ENTRY TO COMMA ROUTINE
         ST    R1,CSTRP           SAVE CHARACTER STRING POINTER.
         SCSW  O,FLUSHSWW,FB1     TRANSFER FLUSH SWITCH ON.
         TM    SRCHSW1,SRCHF8     SYMBOLIC TO BE BYPASSED?       A32730
         BO    COR4               YES - BRANCH                   A32730
         SCSW  O,RPRSWW,COR1       TRANSFER RT PAREN SW ON.
         ST    R1,CESYP            SAVE CHAR END SYMBOL POINTER.
COR1     DS    0H                  ENTRY
         ST    R1,CSTRP            SAVE CHAR STRING PT.
COR2     DS    0H                  ENTRY FROM APOST ROUTINE.
         SR    R6,R6               CLEAR REGISTER                Y02668
         AH    R6,CURLE            GET CURRENT PAREN LEVEL       Y02668
         BNZ   COR3                TRANSFER PARAMETER NOT ENDED  Y02668
         TM    SWY2,KEYNXTSW       HAS FIRST KEYWORD BEEN RCVD   A28668
         BZ    COR3                NO. TRANSFER TO CONTINUE      A28668
         OI    ENDKYSWP,ENDKYSW    SET SWITCH FOR END OF PARAM   A28668
*                                  NEW KEYWORD  SHOULD FOLLOW    A28668
COR3     DS    0H                                                A28668
         BAL   R7,T1               ENTER TEXT
         SCSW  Z,EXECSWY,COR3A     CHECK FOR EXEC STMT.          Y02668
* ON EXEC, FIRST POSITIONAL IS A PROCNAME - //S  EXEC  PROCNAME,.Y02668
         OI    AOSW2,AOPROCNM      INDICATE POSITIONAL PROCNAME. Y02668
         OI    SWH,PROCSW          SET PROC INVOKED SWITCH.      Y02668
COR3A    DS    0H                                                Y02668
         SCSW  C,RPASWW            TURN OFF RT PAREN AST & PER DEL
         SCSW  S,LDLX              TURN ON LAST DEL SW.
         SCSW  Z,JGCY,FB1
         SCSW  C,JGCY
         L     R5,TKEYP
         LA    R5,1(R5)
         ST    R5,TNUMP
         B     FB1
COR4     NI    SRCHSW1,SRCHCLR-SRCHF8 SYMBOLIC BYPASS SWITCH OFF A32730
         B     FB1                RETURN TO TRT ROUTINE          A32730
         EJECT
APR      DS    0H                  ENTRY TO APOST ROUTINE.
*        R5= TKEYP                                                 AACA
*        R6= TNUMP                                                 AACA
         CL    R1,CBSYP           ERROR.  INTERVENING TEXT BETWEEN AACA
         BNE   APR6                       LAST DELIM AND APOST.    AACA
         B     APROVRD            BRANCH TO OVERRIDE RTN.        A33221
APR0     DS    0H                                                A33221
         SPACE
         LA    RF,APRTAB           ARRD OF TABLE
         BAL   RE,XKRTN
         CLI   0(RF),0             WAS KEY IN TABLE                AACA
         BNE   APR1                YES - OK
         CLI   0(R5),DSNAMEK       DSN                             AACA
         BC    NOT-EQUAL,APR6      NO TRANSFER
         L     R7,TEXTBUFP         ADDR OF TEXT STRING.          Y02668
         USING TEXT,R7             PREFIX ADDRESSABILITY.        Y02668
         OI    STRDINDC,DTXDSNLT   SET DSN LITERAL BIT.          Y02668
         DROP  R7                                                Y02668
APR1     DS    0H                  ENTRY
         SCSW  S,FBLITRLZ         SET SW TO INDICATE LITERAL
         ST    R1,SAVEP           SAVE STRING PTR
         LA    R1,1(R1)            BUMP CSTRP.
         ST    R1,CBSYP            SAVE CHARACTER BEGIN POINTER
         LR    R4,R1               LOAD POINTER FOR CREATED SYMBOL.
         L     R7,CENDP            GET CHARACTER END POINTER.
         B     APR3                TRANSFER.
APR2     DS    0H                  ENTRY.
         LA    R4,1(R4)            BUMP POINTER
         LA    R1,1(R1)            BUMP POINTER
APR3     DS    0H                  ENTRY
         CLR   R1,R7               IS CSTRP ABOVE COL 71.
         BC    HIGH+EQUAL,APR6     YES TRANSFER.
         CLI   0(R1),C''''         IS CHARACTER APOST.
         BC    EQUAL,APR5          YES TRANSFER.
         CLI   0(R1),C'&&'        IS IT AMPERSAND
         BC    EQUAL,APR7         YES TRANSFER
APR4     DS    0H                  ENTRY
         MVC   0(0,R4),0(R1)       MOVE A CHARACTER.
         B     APR2                TRANSFER.
APR5     DS    0H                  ENTRY.
         LA    R1,1(R1)            BUMP POINTER
         CLR   R1,R7               IS CSTRP ABOVE COL 71.
         BC    HIGH,APR6          YES TRANSFER                  378
         CLI   0(R1),C''''         IS CHARACTER APOST.
         BC    EQUAL,APR4          YES GO BACK
         ST    R1,CSTRP            SAVE CHARACTER STRING POINTER
         ST    R4,CESYP            SAVE END CHARACTER SYMBOL POINTER.
         SCSW  C,FBLITRLZ         CLEAR  SW
         CLI   0(R1),C' '          IS CHARACTER BLANK.
         BC    EQUAL,BKR1          YES TRANSFER.
         CLI   0(R1),C','          IS CHARACTER COMMA.
         BC    EQUAL,COR2          YES TRANSFER
         SCSW  S,RPRSWW           SET RT. PAREN SW                 AAAA
         CLI   0(R1),C')'          IS CHAR RT PAREN
         BC    EQUAL,RPR           YES - TRANSFER
APR6     DS    0H                  ENTRY FOR ERROR
         LA    R2,ERMES15          GET ERROR NUMBER
         B     E1                  TRANSFER TO ERROR ROUTINE.
         SPACE
APR7     DS    0H
         LA    R1,1(R1)           BUMP PTR
         CLR   R1,R7              IS CSTRP ABOVE COL 71
         BC    HIGH,APR6          YES TRANSFER
         CLI   0(R1),C'&&'        IS CHAR AMPERSAND
         BC    EQUAL,APR4         YES GO BACK
         BCTR  R1,R0
         CLI   0(R5),PARMEEK      PARM KEYWORD ALLOWS            A39526
         BE    APR70              SYMBOLIC IN QUOTES             A39526
         CLI   0(R5),PARMPEK      NO OTHER KEYWORD DOES          A39526
         BE    APR70                                             A39526
         B     APR4               ALLOW SINGLE AMPERSAND IN TEXT  M0702
APR70    DS    0H                 PARM KEYWORD                   A39526
         CLI   INTBUF,0           IS TEXT IN INTBUF
         BNE   APR4               GO BACK - NOT A SYMBOLIC PARAM
         L     R7,SAVEP           A SYMBOLIC - RESET PTR
         ST    R7,CBSYP
         B     AMR                GO TO AMPERSAND RTN
APR8     DS    0H                 ENTRY HERE MEANS THE
*                                 LITERAL CONTAINS A SINGLE
*                                 AMPERSAND.  HOWEVER, SYMBOLIC
*                                 PARAMETERS ARE NOT ALLOWED
*                                 ON THIS STATEMENT - AS DETERMINED
*                                 BY THE SYMBOLIC PARAM RTN.
*
         L     R7,SAVEP           RESTORE CBSYP TO BEFORE        A33221
         LA    R7,1(R7)           TRANSFER TO AMR TTN.           A33221
         ST    R7,CBSYP           THE SINGLE AMPER. IS TREATED   A33221
         L     R7,CENDP           AS IF DOUBLE AMPER. HAD        A33221
         B     APR4               BEEN CODED.                    A33221
APROVRD  DS    0H                                                A33221
         TM    FLUSHSWW,FLUSHSW   IS THIS FIELD OVERRIDDEN       A33221
         BC    ZERO,APR0          NO - CONTINUE NORMAL PROCEDURE A33221
         L     R7,CENDP           COLUMN 72 POINTER              A33221
APROVRD1 LA    R1,1(R1)           INCREMENT STRING POINTER       A33221
         CLR   R1,R7              IS CSTRP BEYOND COL. 71        A33221
         BC    HIGH+EQUAL,APR6    YES - ERROR ROUTINE            A33221
         CLI   0(R1),C''''        CLOSING APOSTROPHE FOUND       A33221
         BC    NOT-EQUAL,APROVRD1 NO - CONTINUE SCAN             A33221
         CLI   1(R1),C''''        WAS IT SINGLE CLOSING APOS.    A33221
         BC    NOT-EQUAL,APROVRD2  YES - STORE POINTERS          A33221
         LA    R1,1(R1)           NO - INCREMENT POINTER         A33221
         B     APROVRD1           AND REENTER SCAN LOOP          A33221
APROVRD2 DS    0H                                                A33221
         ST    R1,CESYP           YES - STORE END POINTER        A33221
         LA    R1,1(R1)           INCREMENT STRING POINTER       A33221
         ST    R1,CSTRP           SAVE CHARACTER STRING POINTER  A33221
         B     FB4                RETURN TO TRT ROUTINE          A33221
         EJECT
EQR      DS    0H                 ENTRY TO EQUAL ROUTINE
         OI    SWY2,KEYNXTSW       SET FIRST EQUAL RECEIVED. NO  A28668
*                                 MORE POSITIONAL PARAMETERS EXPECTED
         OI    AOSW1,AOFSTPOS     TURN OFF SWITCH FOR JOB CARD @ZA14268
*                                 SECOND POSITIONAL            @ZA14268
         NI    ENDKYSWP,255-ENDKYSW TURN OFF KEYWORD EXPECTED    A28668
         MVC   LASLE,CURLE        RESET LASLE, IN THE EVENT IT   A27943
*                                 HASN'T BEEN RESET IN THE TEXT  A27943
*   BUILD ROUTINE (T1) WHERE IT IS NORMALLY DONE. LASLE WILL NOT A27943
*   BE RESET IN T1 IN CASES WHERE THE SUBPARAMETER IMMEDIATELY   A27943
*   PRECEDING A RIGHT PAREN HAS BEEN OVERRIDDEN - E.G., THE DEN  A27943
*   SUBPARAMETER IN THE STRING DCB=(...,DEN=2). FAILURE TO RESET A27943
*   LASLE MAY CAUSE AN ERROR IN THE BUILDING OF SUBLIST TEXT FOR A27943
*   THE PARAMETERS WHICH FOLLOW.                                 A27943
*                                                                A27943
         SR    R4,R4              CLEAR REGISTER
         IC    R4,DLMFBYTE    GET PREVIOUS DELIMITER FUNCTION BYTE.7821
         CR    R2,R4          IS THE CURRENT DELIMITER FUNCTION    7821
*                             BYTE(X'2C' IN R2) EQUAL TO THE       7821
*                             PREVIOUS DELIMITER FUNCTION BYTE(IN  7821
*                             R4).  I.E. DO WE HAVE THE 'KEYWORD=  7821
*                             KEYWORD=' SITUATION.                 7821
         BNE   EQR04          NO-BRANCH.                         A49940
         OI    DLMFBYTE,EQDELSW  YES-TURN THE EQDELSW SWITCH       7821
*                              ('KEYWORD=KEYWORD=' INDICATOR) ON.  7821
         B     EQR010         IT IS NOT NECESSARY TO STORE THE     7821
*                             CURRENT DELIMITER FUNCTION BYTE INTO 7821
*                             THE 'DLMFBYTE' SINCE THEY ARE        7821
*                             ALREADY EQUAL AT THIS POINT.         7821
         SPACE
EQR04    EQU   *                                                 A49940
         CLI   DLMFBYTE,PR        IS PREVIOUS A PERIOD?          A49940
         BNE   EQR05              NO, CONTINUE.                  A49940
         TM    DDSWY,DDSW         IS THIS A DD STATEMENT?        A49940
         BNO   EQR05              NO, CONTINUE.                  A49940
         LA    R2,ERMES16         YES, LOAD MSG. NUMBER.         SM4180
         B     E1                 GO TO ERROR ROUTINE.           A49940
EQR05    DS    0H                                                  7821
         STC   R2,DLMFBYTE    STORE THE CURRENT DELIMITER FUNCTION 7821
*                             BYTE OVER THE PREVIOUS ONE.          7821
EQR010   DS    0H                                                  7821
         SR    R4,R4          CLEAR REGISTER.                      7821
         MVI   MSGSVE,ERMES16     ERROR NUMBER FOR POSSIBLE LATER USE
         SCSW  O,DDSWY,EQR3       TRANSFER DD
         AH    R4,CURLE           IS CURRENT LEVEL ZERO
         BC    NOT-EQUAL,EQRL5    TRANSFER CURRENT LEVEL NOT ZERO
         SCSW  O,EXECSWY,EQR1     TRANSFER EXEC SW ON
         L     RF,AJ5L             ADDR OF JOB KEYWORDS            AADA
         B     EQRD               TRANSFER
EQR1     DS    0H                 ENTRY
         CLI   0(R6),0            IS THIS FIRST OPERAND
         BC    NOT-EQUAL,EQR11     BRANCH NO.                    Y02668
         CLI   0(R5),PROCEK        IS KEY PROC?                  Y02668
         BNE   EQR10               BRANCH NO.                    Y02668
         OI    SWH,PROCSW          SET PROC INVOKED SWITCH.      Y02668
EQR10    DS    0H                                                Y02668
         LA    RF,XKTAB            ADDR OF TABLE TO SEARCH.      Y02668
         BAL   RE,XKRTN            SEE IF KEY IS EXEC O'RIDE       AACA
         CLI   0(RF),0
         BNE   EQR2                YES - GO PROCESS O'RIDE         AACA
EQR11    DS    0H                 ENTRY FOR EXEC PERIOD KEYS
         L     RF,AE4L             ADDR OF EXEC KEYWORDS           AADA
         B     EQRD               TRANSFER
EQR2     DS    0H                 ENTRY
         SCSW  S,LPBYSWZ           SET LEFT PAREN BYPASS SW        AACA
         ST    R1,CSTRP           SAVE CHAR STRING POINTER
         ST    R1,CESYP           SAVE CHAR END SYMBOL POINTER
         BAL   R7,T1              ENTER TEXT
         L     R5,TKEYP           GET TEXT KEY POINTER
         CLI   0(R5),CONDPEK      LAST KEY COND PERIOD
         BC    NOT-EQUAL,FB1      NO TRANSFER
         SCSW  S,LDLX             TURN ON LAST DELIMITER SWITCH
         B     FB1                TRANSFER
EQR3     DS    0H                 ENTRY
         SCSW  Z,OVKEYSWZ,EQR31   TRANSFER PREVIOUS KEY NOT O'RIDDEN
         CLI   OVKEYSVE,DCBK           WAS OVERRIDEN KEY DCB =    16368
         BNE   EQR304                                            A24421
         AH    R4,CURLE                                          A24421
         BC    HIGH,EQRB                                         A24421
         B     EQR301                                            A24421
EQR304   DS    0H
         CLI   OVKEYSVE,UNITK     WAS PREVIOUS O'RIDDEN KEY UNIT=
         BC    NOT-EQUAL,EQR301   NO -CHECK ALL DD KEYS
         L     R9,CSTRP
         CLI   0(R9),C'='         YES -  IS UNIT AFF POSSIBLE
         BC    EQUAL,EQR30               YES - SEARCH UNIT MINOR KEYS
         AH    R4,CURLE                  NO  - IS UNIT SEP POSSIBLE
         BC    NOT-HIGH,EQR301                 NO - CHECK ALL KEYS
EQR30    DS    0H                 ENTRY TO SEARCH UNIT MINOR KEYS
         L     RF,AD4LUS           ADDR OF UNIT MINOR KEYWORDS     AADA
         B     EQRD
EQR301   DS    0H                 ENTRY TO CHECK ALL DD KEYS
         L     RF,AD4L             ADDR OF DD MAJORS               AADA
         B     EQRD
EQR31    DS    0H                 ENTRY - PREVIOUS KEY NOT O'RIDDEN
         AH    R4,CURLE           IS CURRENT LEVEL ZERO
         BC    HIGH,EQR5          TRANSFER CURRENT LEVEL HIGH
         CLI   0(R6),0            IS TEXT LENGTH ZERO
         BC    EQUAL,EQR4         YES TRANSFER
         B     EQRC                                               16505
EQR4     DS    0H                 ENTRY FROM ABOVE
         CLI   0(R5),UNITK        IS KEY UNIT
         BC    NOT-EQUAL,EQR6     NO TRANSFER                     19200
         L     RF,AD4LUA           ADDR OF UNIT AFF KEYWORD        AADA
         B     EQRD               TRANSFER
EQR5     DS    0H                 ENTRY CURRENT LEVEL HIGH
         CLI   0(R5),UNITK        IS KEY UNIT
         BC    NOT-EQUAL,EQR50    NO TRANSFER                    Y01113
         L     RF,AD4LUS           ADDR OF UNIT MINOR KEYWORDS     AADA
         B     EQRD               TRANSFER
EQR50    DS    0H                 ENTRY KEY NOT UNIT             Y01113
         CLI   0(R5),AMPK         IS KEY AMP?                    Y01113
         BE    EQRL5              ISSUE UNBALANCED PARENS MSG    Y01113
EQR6     DS    0H                 ENTRY KEY NOT UNIT
         LA    RF,DCBTAB          ADDR. OF DCB MINOR TABLE        19200
         BAL   RE,XKRTN           TABLE SEARCH ROURINE            19200
         CLI   0(RF),0            IF ZERO  NOT IN DCB MINOR TABLE 19200
         BNE   EQRB               IN TABLE THEN TAKE BRANCH       19200
         CLI   0(R5),VOLUMEK      IS KEY VOLUME
         BC    NOT-EQUAL,EQR8     NO TRANSFER
         L     RF,AD4LV            ADDR OF VOL MINOR KEYWORDS      AADA
         B     EQRD               TRANSFER
EQR8     DS    0H                 ENTRY KEY NOT VOLUME
         CLI   0(R5),LABELK       IS KEY LABEL
         BC    NOT-EQUAL,EQRA     NO TRANSFER
         L     RF,AD6LL            ADDR OF LABEL MINOR KEYWORDS    AADA
         B     EQRD               TRANSFER
EQRA     DS    0H                 ENTRY KEY NOT LABEL
         CLI   0(R5),DCBK         IS KEY DCB
         BC    NOT-EQUAL,EQRC     NO TRANSFER
EQRB     DS    0H                 ENTRY
         L     RF,AD4LD            ADDR OF DCB MINOR KEYWORDS      AADA
         B     EQRD               TRANSFER
EQRC     DS    0H                 ENTRY KEY NOT DCB
         L     RF,AD4L             ADDR OF DD MAJOR KEYWORDS       AADA
         SR    R9,R9                                              20664
         AH    R9,CURLE                                           20664
         BZ    EQRD05                                             20664
         LA    R2,ERMES7                                          20664
         B     E1                                                 20664
EQRD05   DS    0H                                                 20664
EQRD     DS    0H                 ENTRY
         NI    SWV,255-FPRNSW-LPBYSW CLEAR LEFT PAREN SW AND       AACA
*                                           BYPASS SW              AACA
         ST    R1,CSTRP           SAVE CHAR STRING POINTER
         L     R9,CBSYP           GET CHAR END SYMBOL POINTER
         SR    R1,R9              COMPUTE CHAR LENGTH
         SR    R4,R4              CLEAR REGISTER
         B     EQRD3              TRANSFER
EQRD1    DS    0H                 ENTRY
         CLC   1(0,RF),0(R9)       IS KEYWORD IN TABLE             AADA
EQRD2    DS    0H
         AR    RF,R4               BUMP TO NEXT KEYWORD            AADA
EQRD3    DS    0H
         IC    R4,0(RF)            GET KEYWORD LENGTH              AADA
         LTR   R4,R4              TABLE END
         BC    ZERO,EQRL          YES TRANSFER
         EX    R1,EQRD1           EXECUTE KEY WORD COMPARE
         BC    NOT-EQUAL,EQRD2    TRANSFER BACK NOT FOUND
         LR    R9,RF               SAVE RF IN R9                   AADA
         TM    DLMFBYTE,EQDELSW   DO WE HAVE 'KEYWORD=KEYWORD='    7821
*                                 CONDITION.                       7821
         BZ    EQRE      NO-CONTINUE NORMAL PROCESSING.            7821
         SPACE
*       IF THE EQDELSW IS ON IT MEANS WE HAVE A 'KEYWORD=KEYWORD=' 7821
*   SITUATION IN THE JCL.  THE ONLY TIME THIS CONDITION IS PERMIS- 7821
*   SABLE IS WHEN EITHER VOL,DCB,UNIT, OR LABEL IS SPECIFIED.      7821
*   THESE KEYWORDS WILL BE CHECKED AND IF NONE ARE FOUND AN ERROR  7821
*   MESSAGE (IEF632I FORMAT ERROR) WILL BE ISSUED.                 7821
         SPACE
         LA    RF,KEYEQTAB    ADDRESS OF TABLE CONTAINING THE KEYS 7821
*                             OF VOL,DCB,UNIT, AND LABEL.          7821
         L     R5,TKEYP       POINTER TO TEXT KEY(NOT OVERRIDDEN). 7821
         TM    OVKEYSWZ,OVKEYSW    HAS KEY BEEN OVERRIDDEN.        7821
         BZ    EQRD5               NO-BRANCH.                      7821
         LA    R5,OVKEYSVE         YES-GET ADDRESS OF OVERRIDDEN   7821
*                                  KEY.                            7821
EQRD5    DS    0H                                                  7821
         BAL   RE,XKRTN       ROUTINE TO SEARCH KEYS.              7821
         CLI   0(RF),0        WAS KEY FOUND.                       7821
         BE    EQRD6          NO-ERROR CONDITION.                  7821
         NI    DLMFBYTE,255-EQDELSW  TURN OFF EQDELSW SWITCH(HIGH  7821
*                                    ORDER BIT).                   7821
         B     EQRE           CONTINUE NORMAL PROCESSING.          7821
EQRD6    DS    0H                                                  7821
         LA    R2,ERMES19     GET ERROR MESSAGE NUMBER.            7821
         B     E1             ERROR PROCESSOR.                     7821
EQRE     DS    0H                 ENTRY FOUND
         LR    RF,R9               RESTORE RF SAVED IN R9          AADA
         SCSW  C,OVKEYSWZ         CLEAR OVERRIDDEN KEY SW
         LA    R9,2(R1,RF)         GET POINTER TO KEY              AADA
         SR    R3,R3              CLEAR REGISTER
         IC    R3,0(R9)           GET KEY
         AR    RF,R4               BUMP POINTER TO NEXT KEYWORD    AADA
         LR    R7,R3              KEY FOR K1 ROUTINE
         BAL   R6,I1              GET PTR TO BYTE IN DUPTB TO TEST BIT
         EX    R5,EQRE1           IS THE BIT ON IN DUPTB
         BC    O,EQRJ             YES TRANSFER TO CHECK FOR OVERRIDE
         ST    R9,SAVEP           SAVE PTR TO KEY
         LA    R3,KEYTAB-DUPTAB(R3)  BUMP TO KEYTAB               19874
         EX    R5,EQRF1           SET BIT IN KEYTAB
         ST    RF,WORK1           SAVE VALUE OF RF               A26796
         BAL   R9,K1              PUT KEY IN TEXT
         L     RF,WORK1           RESTORE VALUE OF RF            A26796
         L     R9,SAVEP           RESTORE PTR TO KEY
EQRF     DS    0H
         L     R3,TEXTBUFP        ADDR OF TEXT STRING.         @G29AN2E
         USING TEXT,R3            PREFIX ADDRESSABILITY.       @G29AN2E
         CLI   0(R9),DDNAMEK      IS THIS DDNAME KEYWORD           AABA
         BNE   EQRF03             BR NO                        @G29AN2E
         OC    DUPTAB(EDASTAB1-DASTAB1),DASTAB1  SET ALL BITS  @ZA13371
*                                 FOR KEYS MUTUALLY EXCLUSIVE  @ZA13371
*                                 WITH DDNAME WHILE PRESERVING @ZA13371
*                                 OVERRIDING DCB VALUES.       @ZA13371
         OI    STRDINDC,DTXDDNM    SET DDNAME SWITCH.            Y02668
***************************************************************@G32HPPJ
*                                                              @G32HPPJ
*  IN AN SU ENVIRONMENT IT IS NECESSARY TO CHECK TO SEE IF THE @G32HPPJ
*  SU BIT IS ON WHEN A KEYWORD WHICH IS NEW FOR AN SU IS FOUND @G32HPPJ
*  IF THE SU BIT IS NOT ON FOR THE PARTICULAR KEYWORD, THEN THE@G32HPPJ
*  KEYWORD SHOULD BE TREATED AS AN INVALID                     @G32HPPJ
*                                                              @G32HPPJ
***************************************************************@G32HPPJ
EQRF03   DS    0H                                              @G32HPPJ
         L     RE,16              GET ADDRESS OF CVT           @G32HPPJ
         USING CVTMAP,RE          ESTABLISH ADDR. TO CVT       @G32HPPJ
         L     R2,CVTIHASU        GET ADDR INSTALLED SU BITS   @G32HPPJ
         USING SUBITS,R2          SU BIT MAPPING               @G32HPPJ
         CLI   0(R9),SUBSYSK      IS THIS SUBSYS KEY    ?      @G32HPPJ
         BNE   EQRF040            NO CHECK NEXT                @G32HPPJ
         TM    SUBYTE4,SU29BIT    YES,IS SU29 INSTALLED ?      @G32HPPJ
         BO    EQRF055            YES PROCESS SUBSYS           @G32HPPJ
EQRF035  DS    0H                                              @G32HPPJ
         MVI   MSGKEY,DDK         NO, INDICATE DD STMT         @G32HPPJ
         LA    R2,ERMES16         ISSUE UNIDENTIFIED KEYWORD   @G32HPPJ
         B     E1                                              @G32HPPJ
EQRF040  DS    0H                                              @G32HPPJ
         CLI   0(R9),PROTECTK     IS THIS PROTECT KEY?         @G32HPPJ
         BE    EQRF045            NO CONTINUE                  @G32HPPJ
         CLI   0(R9),CHARSK       IS THIS CHARS KEY?           @G16APPJ
         BE    EQRF050            CHECK FOR SU10               @G16APPJ
         CLI   0(R9),BURSTK       IS THIS BURST KEY            @G16APPJ
         BE    EQRF050            CHECK FOR SU10               @G16APPJ
         CLI   0(R9),MODIFYK      IS THIS MODIFY KEY?          @G16APPJ
         BE    EQRF050            CHECK FOR SU10               @G16APPJ
         CLI   0(R9),FLASHK       IS THIS FLASH KEY ?          @G16APPJ
         BE    EQRF050            CHECK FOR SU10               @G16APPJ
         B     EQRF04             CONTINUE PROCESSING          @G16APPJ
EQRF045  TM    SUBYTE5,SU32BIT    YES, IS SU32 INSTALLED?      @G16APPJ
         BNO   EQRF035            NO, ISSUE ERROR MESSAGE      @G32HPPJ
         B     EQRF04             YES, CONTINUE PROCESSING     @G32HPPJ
EQRF050  DS    0H                                              @G16APPJ
         TM    SUBYTE2,SU10BIT    IS SU10 INSTALLED  ?         @G16APPJ
         BNO   EQRF035            NO ISSUE ERROR MSG           @G16APPJ
         B     EQRF04             YES CONTINUE PROCESSING      @G16APPJ
EQRF055  DS    0H                 PROCESSING FOR SUBSYS KEY    @G32HPPJ
         MVC   AOSUBSYS,TKEYP     SAVE ADDR OF SUBSYS KEY      @G32HPPJ
         OI    STRDINDC,DTXSUBSK  SET SUBSYS KEY SWITCH        @G32HPPJ
         DROP  RE                                              @G32HPPJ
         DROP  R2                                              @G32HPPJ
         DROP  R3                                              @G29AN2E
EQRF04   DS    0H                                                  AABA
         SR    R3,R3              CLEAR REGISTER
         IC    R3,0(R9)           GET KEY
         BAL   R6,I1              GET PTR TO BYTE IN DUPTB TO SET BIT
         EX    R5,EQRF1           SET BIT ON IN DUPTB
         LA    R9,1(R9)           BUMP TO NEXT KEY
         TM    SWZ,DDSW            IS THIS A DD CARD?             19874
         BC    ZERO,EQRF5          NO,BYPASS OVERRIDE TEST        19874
         TM    0(R9),X'80'        IS IT OVERRIDDEN KEY
         BC    O,EQRG             YES TRANSFER
EQRF5    DS    0H                                                 19874
         CLR   R9,RF               END OF SCAN DICT ENTRY          AADA
         BC    LOW,EQRF04         NO  CONTINUE PROCESSING          AABA
EQRG     DS    0H                 ENTRY FOR OVERRIDDEN KEY
         SCSW  C,FLUSHSWW         CLEAR FLUSHSW
         L     R5,TKEYP           GET POINTER TO KEY
         CLI   0(R5),CONDEEK      IS KEY COND EQUAL
         BC    EQUAL,EQRG1        YES TRANSFER
         CLI   0(R5),CONDJK       IS KEY JOB COND
         BC    NOT-EQUAL,EQRH     NO TRANSFER
EQRG1    DS    0H
         SCSW  S,LDLX             TURN ON LAST DELIMITER SW
         B     FB1                TRANSFER
EQRE1    DS    0H
         TM    0(R3),0            TEST FOR BIT IN DUPTB
EQRF1    DS    0H
         OI    0(R3),0            TURN ON BIT IN DUPTB
EQRH     DS    0H
         SCSW  C,LDLX             CLEAR LAST DELIMITER SW
         CLI   0(R5),DSNAMEK      IS KEY DSNAME
         BC    EQUAL,EQRI         YES TRANSFER
         CLI   0(R5),REFMK        IS KEY REF
         BC    EQUAL,EQRI         YES TRANSFER
         CLI   0(R5),PGMEK        IS KEY PGM EQUAL
         BC    NOT-EQUAL,EQRH1     BRANCH NO.                    Y02668
         NI    SWC,255-PEXP        CLEAR PROC EXEC EXPECTED SW.  Y02668
         TM    AOSW2,AOPROCNM      POSITIONAL PROCNAME SPECIFIED?Y02668
         BZ    EQRI                BRANCH NO.                    Y02668
* ERROR - BOTH A POSITIONAL PROCNAME AND PGM= SPECIFIED.         Y02668
         LA    R2,ERMSG632         'FORMAT ERROR' MSG CODE.      Y02668
         B     E1                  BR TO ERROR ROUTINE.          Y02668
EQRH1    DS    0H                                                Y02668
         CLI   0(R5),RESTARJK      IS IT RESTART                   AAAA
         BE    EQRI0              YES - TRANSFER                   AAAA
         CLI   0(R5),DCBK         IS KEY DCB
         BC    NOT-EQUAL,EQRI01   NO TRANSFER
         SCSW  S,DCBSWW           TURN ON DCB SWITCH
EQRI     DS    0H
         SCSW  S,LDLX             SET LAST DELIMITER SW            AAAA
EQRI0    DS    0H                                                  AAAA
         SCSW  S,PDELSWW          TURN ON PERIOD DELIMITER SWITCH
         B     FB1                TRANSFER
EQRI01   DS    0H
         L     RF,TEXTBUFP         ADDR OF TEXT STRING.          Y02668
         USING TEXT,RF             PREFIX ADDRESSABILITY.        Y02668
         CLI   0(R5),SYSOUTK      IS KEY SYSOUT
         BC    NOT-EQUAL,EQRI02   NO TRANSFER
         L     R1,CSTRP           RESTORE CHAR STRING PTR.       A39022
         CLI   1(R1),COMMA        IS SYSOUT BEING NULLIFIED      A39022
         BC    EQUAL,EQRI02       YES-TRANSFER DO NOT SET SWITCH A39022
         CLI   1(R1),BLANK        IS SYSOUT BEING NULLIFIED      A39022
         BC    EQUAL,EQRI02       YES-TRANSFER DO NOT SET SWITCH A39022
         OI    STRDINDC,DTXSYOUT   SET SYSPUT SWITCH.            Y02668
         B     FB1                TRANSFER
EQRI02   DS    0H
         SPACE
* IF DLM APPEARS ON A DD STM. OTHER THAN DD * OR DD DATA,         21009
* MUTUAL EXCLUSIVE ERROR MESSAGE IS GIVEN                         21009
         SPACE
         CLI   0(R5),DLMK          IS THIS A DLM KEY?             21009
         BC    NOT-EQUAL,EQRI04    NO, NORMAL PROCESSING          21009
         OI    SWA,DLM             DLM FOUND THIS CARD ?        YM03459
         LR    R9,R5               STORE KEY FOR MESSAGE          21009
         TM    STRDINDC,DTXSYSIN   THIS A DD */DATA STMT?        Y02668
         BC    Z,EQRL1             NO, MUTUAL EXCLUSIVE ERROR  @ZA01931
         DROP  RF                                                Y02668
EQRI04   DS    0H                                                 21009
          SPACE
         LA    RF,XKTAB
         BAL   RE,XKRTN            CHECK IF EXEC O'RIDE
         CLI   0(RF),0             KEY IN TABLE
         BE    FB1                 NO - NOT EXEC O'RIDE
EQRI03   DS    0H
         SR    R3,R3              CLEAR REGISTER
         IC    R3,0(R5)           GET KEY
         BAL   R6,I1              GET PTR TO BYTE IN DUPTB
         LCR   R5,R5              EXPRESS AS TWO'S COMPLEMENT
         BCTR  R5,R0              DECREMENT REGISTER
         EX    R5,D3              TURN OFF BITS IN DUPTB
         B     FB1                TRANSFER
D3       NI    0(R3),0                                            16368
EQRJ     DS    0H
         SCSW  Z,DDOVZ,EQRL1      TRANSFER OVERRIDE SW OFF - ERROR
         SCSW  S,FLUSHSWW         SET FLUSH SWITCH
         SCSW  S,OVKEYSWZ         SET OVERRIDDEN KEY SW
         STC   R7,OVKEYSVE        SAVE OVERRIDDEN KEY
EQRK     DS    0H
         SR    R3,R3              CLEAR REGISTER
         IC    R3,0(R9)           GET THE KEY
         TM    SWZ,DDSW                IS THIS A DD CARD          19874
         BC    ZERO,EQRK1          NO, LEAVE HIGH ORDER BIT SET   19874
         LA    R4,X'7F'           LOAD MASK FOR AND
         NR    R3,R4              AND OUT HIGH ORDER BIT
EQRK1    EQU   *                                                  19874
         BAL   R6,I1              GET PTR TO BYTE IN DUPTB
         EX    R5,EQRF1           TURN ON BIT IN DUPTB
         LA    R9,1(R9)           BUMP TO NEXT KEY
         CLR   R9,RF               END OF SCAN DICT ENTRY          AADA
         BC    LOW,EQRK           NO CONTINUE PROCESSING
         B     FB1                TRANSFER
EQRL     DS    0H
         SCSW  Z,EXECSWY,EQRLA1   TRANSFER NOT EXEC VERB
         L     R1,CSTRP           POINTER FOR SYMBOLIC PARAM RTN
         L     RF,FIEFVFB         GET SYMBOLIC PARAMETER RTN
         BALR  RE,RF
         B     FB1                RETURN TO STATEMENT SCAN
EQRLA1   DS    0H
         SCSW  O,OVKEYSWZ,EQRLB   TRANSFER LAST KEY OVERRIDDEN
EQRLA    DS    0H
         SR    R2,R2
         IC    R2,MSGSVE          ERROR MSG NUMBER
         B     E1
EQRLB    DS    0H
         L     R5,AD6LL           PTR TO LAST OF DD KEYS
         CLR   RF,R5               IS THIS THE END                 AADA
         BC    HIGH,EQRLA         YES  - ISSUE ERROR MSG
         LA    RF,1(RF)            NO-  BUMP PTR                   AADA
         B     EQRD3              CONTINUE SEARCH
EQRL1    DS    0H                 ENTRY FOR MUTUALLY EXCLUSIVE ERROR
         MVC   MSGKEY(1),0(R9)    KEY FOR SECONDARY MESSAGE
         LA    R2,ERMES2          ERROR MESSAGE NUMBER
         L     RF,IEFVGMV
         BALR  RE,RF              ISSUE MSG
EQRL2    DS    0H                 ENTRY FOR SECOND HALF OF MESSAGE
         L     R5,TBEGP            GET VERB KEY FOR THIS STMT    Y02668
         MVC   MSGKEY(1),0(R5)     FOR ENTRY IN SECONDARY MSG.   Y02668
         SCSW  Z,VERBCSWZ,EQRL3    TRANSFER NOT PROC VERB          AABA
         MVI   MSGKEY,PSECMSG      GET PROC SECONDARY MSG          AABA
EQRL3    DS    0H
         MVI   INTBUF,0                                            AABA
         LA    R2,ERMES2B                                          AABA
         B     E1                  GO TO ERROR RTN
EQRL5    DS    0H                 ENTRY FOR INVALID SUBPARAM
         LA    R2,X'29'
         B     E1
         EJECT
*                                                                  AACA
*     THIS RTN CHECKS IF THE PARAMS FOR THE KEYWORD ARE BEING      AACA
*        FLUSHED (IGNORED) DUE TO A DD O'RIDE                      AACA
ORRTN    DS    0H
         SPACE
         SCSW  O,FLUSHSWW,FB3      RET TO TRANS RTN IF O'RIDE      AACA
         BR    RE                  RET IF NO O'RIDE                AACA
         SPACE
*                                                                  AACA
XKRTN    DS    0H
*                                                                  AACA
*   THIS RTN SEARCHES A TABLE OF ONE BYTE KEYS                     AACA
*
*       INPUT- R5  PTR TO SEARCH ARGUMENT                          AACA
*              R14 RET REG                                         AACA
*              R15 PTR TO LAST TABLE ENTRY                         AACA
*
*              OUTPUT- R5  UNCHANGED                               AACA
*                      R14 UNCHANGED                               AACA
*                      R15 PTR TO FOUND ENTRY OR ZERO ENTRY        AACA
*
*
XKRTN01  DS    0H
         CLI   0(RF),0             IS ENTRY 0
         BE    XKRTN05             KEY NOT FOUND
         CLC   0(1,RF),0(R5)       COMP TO SEARCH ARG
         BE    XKRTN05             FOUND - RETURN                  AACA
         BCT   RF,XKRTN01          CHECK NEXT
XKRTN05  DS    0H
         BR    RE                  RETURN
* TABLE OF O'RIDE KEYS
         DC    AL1(0)
         DC    AL1(ACCTPEK)
         DC    AL1(PRFMPEK)                                      Y02655
         DC    AL1(CONDPEK)
         DC    AL1(DYNMPEK)                                      Y02670
         DC    AL1(PARMPEK)
         DC    AL1(TIMEPEK)
         DC    AL1(ROLLPEK)
         DC    AL1(ADRSPPEK)
         DC    AL1(RDPEK)
         DC    AL1(SDPPEK)                                         I241
XKTAB    DC    AL1(REGINPEK)
         SPACE
* TABLE OF KEYS WHERE PARAMS MAY BE IN QUOTES
         DC    AL1(0)
         DC    AL1(SUBSYSK)                                    @G29AN2E
         DC    AL1(DLMK)                                          21009
         DC    AL1(JOBK)
         DC    AL1(ACCTEEK)
         DC    AL1(PARMEEK)
         DC    AL1(ACCTPEK)
         DC    AL1(AMPK)                                         Y01113
         DC    AL1(PARMPEK)
         DC    AL1(SERMK)
APRTAB   DC    AL1(RESTARJK)
*                                                                  AACA
* TABLE OF KEYS WHERE HYPHEN IS OK                                 AACA
         DC    AL1(0)
         DC    AL1(DSIDK)                                      @Y30OPSB
         DC    AL1(SERMK)
         DC    AL1(JOBK)
         DC    AL1(ACCTEEK)
         DC    AL1(ACCTPEK)
MIRTAB   DC    AL1(DSNAMEK)
*                                                                  7821
* TABLE OF KEYS WHERE 'KEYWORD=KEYWORD=' IS ALLOWABLE.             7821
         DC    AL1(0)                                              7821
         DC    AL1(DCBK)                                           7821
         DC    AL1(VOLUMEK)                                        7821
         DC    AL1(UNITK)                                          7821
KEYEQTAB DC    AL1(LABELK)                                         7821
         EJECT
*          **********************************************************
*    TABLE OF CHARTERS APPEARING AFTER RIGHT PAREN.               22520
         DC    AL1(0)                                             22520
         DC    AL1(COMMA)                                         22520
         DC    AL1(BLANK)                                         22520
         DC    AL1(AMPERSAN)                                      22520
RPRTAB   DC    AL1(RPARENT)                                       22520
COMMA    EQU   C','                                               22520
BLANK    EQU   C' '                                               22520
AMPERSAN EQU   C'&&'                                              22520
RPARENT  EQU   C')'                                               22520
*          **********************************************************
*          *                                                        *
*          *   ROUTINE TO SELECT BITS IN DUPLICATE TABLE.           *
*          *                                                        *
*          **********************************************************
AOKEYBIT DS    0H                                                Y02668
         LA    R2,KEYTAB           TEST THE BITS IN KEYTAB       Y02668
         B     AOKSI5                                            Y02668
I1       DS    0H                                                Y02668
         LA    R2,DUPTAB           TEST THE BITS IN DUPTAB       Y02668
AOKSI5   DS    0H                                                Y02668
         LA    R4,X'07'
         NR    R4,R3
         LA    R5,X'80'
         SRL   R5,0(R4)
         SRL   R3,3
         LA    R3,0(R2,R3)         BIT @ IN REQUESTED TABLE      Y02668
         BR    R6
         EJECT
*        *********************************************************19200
*                                                                 19200
* TABLE OF DCB MINOR KEYWORDS                                     19200
         DC    AL1(0)                                             19200
         DC    AL1(BFALNMK)                                       19200
         DC    AL1(BFTEKMK)                                       19200
         DC    AL1(BLKSIZMK)                                      19200
         DC    AL1(BUFLMK)                                        19200
         DC    AL1(BUFNOMK)                                       19200
         DC    AL1(BUFRQMK)                                       19200
         DC    AL1(CODEMK)                                        19200
         DC    AL1(CPRIMK)                                        19200
         DC    AL1(CYLOFLMK)                                      19200
         DC    AL1(HIARCHMK)                                      19200
         DC    AL1(DENMK)                                         19200
         DC    AL1(DIAGNSK)                                       21042
         DC    AL1(DSORGMK)                                       19200
         DC    AL1(EROPTMK)                                       19200
         DC    AL1(FRIDMK)                                       Y02668
         DC    AL1(INTVLMK)                                       19200
         DC    AL1(KEYLENMK)                                      19200
         DC    AL1(LIMCTMK)                                       19200
         DC    AL1(LRECLMK)                                       19200
         DC    AL1(MODEMK)                                        19200
         DC    AL1(NCPMK)                                         19200
         DC    AL1(NTMMK)                                         19200
         DC    AL1(OPTCDMK)                                       19200
         DC    AL1(PRTSPMK)                                       19200
         DC    AL1(RECFMMK)                                       19200
         DC    AL1(RKPMK)                                         19200
         DC    AL1(SOWAMK)                                        19200
         DC    AL1(STACKMK)                                       19200
         DC    AL1(TRTCHMK)                                       19200
         DC    AL1(GNCPMK)                                        19200
         DC    AL1(GDSORGMK)                                      19200
         DC    AL1(BUFOFFMK)                                      19200
         DC    AL1(BUFINMK)                                       20002
         DC    AL1(BUFOUTMK)                                      20002
         DC    AL1(BUFMAXMK)                                      20002
         DC    AL1(BUFSIZMK)                                      20002
         DC    AL1(PCIMK)                                         20002
         DC    AL1(RESERVMK)                                      20002
         DC    AL1(THRESHMK)                                      20002
         DC    AL1(IPLTXIDK)                                     Y01948
DCBTAB   DS    0C                  END OF DCB MINOR KEYS
         DC    AL1(FUNCMK)                                        21088
*        *********************************************************19200
AOPCSVBL DC    CL8' '                                            Y02668
         EJECT
*          ******************************************************Y02668
*          *                                                    *Y02668
*          * AOKSRCHR - TEXT KEY SEARCH ROUTINE.                *Y02668
*          *                                                    *Y02668
*          * AOKSRCHR SEARCHES A TEXT STRING TO FIND A KEY      *Y02668
*          * PROVIDED AS A SEARCH ARGUMENT BY ITS CALLER. IT    *Y02668
*          * CHECKS FOR A MATCH ON THE BASE KEY. IF THERE IS NO *Y02668
*          * MATCH, IT PASSES THE ADDRESS OF THE KEY TO ROUTINE *Y02668
*          * AOKSR1, WHICH THEN COMPUTES THE ADDRESS OF THE     *Y02668
*          * NEXT KEY IN TEXT.                                  *Y02668
*          *                                                    *Y02668
*          * ON RETURN FROM AOKSR1, AOKSRCHR PERFORMS THE       *Y02668
*          * FOLLOWING LOGIC:                                   *Y02668
*          *                                                    *Y02668
*          * .CHECKS IF THE NEXT KEY IS A TEXT ENDING KEY (ENDK,*Y02668
*          *  JENDK) OR A KEYWORD KEY.                          *Y02668
*          * .IF A TEXT ENDING KEY, SETS R9 TO ZERO AND RETURNS *Y02668
*          *  TO CALLER.                                        *Y02668
*          * .IF A KEYWORD KEY, CHECKS IF KEY MATCHES THE       *Y02668
*          *  SEARCH KEY.                                       *Y02668
*          * .IF KEYS MATCH, RETURNS TO CALLER WITH ADDRESS OF  *Y02668
*          *  KEY IN R9.                                        *Y02668
*          * .IF KEYS DO NOT MATCH, BRANCHES TO AOKSR1 TO OBTAIN*Y02668
*          *  ADDRESS OF NEXT KEY IN TEXT, AND PERFORMS THE     *Y02668
*          *  ABOVE LOGIC AGAIN.                                *Y02668
*          *                                                    *Y02668
*          * INPUT -                                            *Y02668
*          * .R9 - ADDRESS OF TEXT STRING TO BE SEARCHED.       *Y02668
*          * .AOSCHKEY - KEY WHICH IS TO BE LOCATED IN THE      *Y02668
*          *  TEXT STRING.                                      *Y02668
*          *                                                    *Y02668
*          * OUTPUT -                                           *Y02668
*          *                                                    *Y02668
*          * .R9 - ADDRESS OF KEY, IF FOUND. ZERO IF KEY NOT    *Y02668
*          *  FOUND.                                            *Y02668
*          *                                                    *Y02668
*          * NOTES -                                            *Y02668
*          * .AOKSRCHR USES SUBROUTINE AOKSR1 FOR SKIPPING FROM *Y02668
*          *  KEY TO KEY IN TEXT.                               *Y02668
*          *                                                    *Y02668
*          ******************************************************Y02668
         SPACE 2                                                 Y02668
AOKSRCHR DS    0H                                                Y02668
         STM   RE,R5,AOKSCHSA      SAVE CALLER'S REGS.          YM01546
         L     R9,TEXTBUFP         POINT TO PREFIX FOR SEARCH.  YM01546
         USING TEXT,R9             SET TEXT STRNG ADDRESSABILITY.Y02668
         TM    STRINDCS,JOBSTR     JOB STRING?                   Y02668
         BZ    AOKS03              BRANCH NO.                    Y02668
         LA    R9,STRJPFXL(R9)     POINT TO JOB BASE KEY.        Y02668
         B     AOKS010             BRANCH TO SEARCH.             Y02668
AOKS03   DS    0H                                                Y02668
         TM    STRINDCS,EXECSTR+PROCSTR EXEC OR PROC STRING?     Y02668
         BZ    AOKS06              BRANCH IF NEITHER.            Y02668
         LA    R9,STREPFXL(R9)     POINT TO BASE KEY - PREFIX    Y02668*
                                   IS SAME LENGTH FOR BOTH.      Y02668
         B     AOKS010             BRANCH TO SEARCH.             Y02668
* ONLY DD STRING LEFT.                                           Y02668
AOKS06   DS    0H                                                Y02668
         LA    R9,STRDPFXL(R9)     POINT TO BASE DD KEY.         Y02668
* SEARCH KEY IS IN AOSCHKYS. MAY BE KEYWORD OR STRING END KEYS.  Y02668
AOKS010  DS    0H                                                Y02668
         LA    RF,AOSCHKYS         ADDRESS OF SEARCH LIST.       Y02668
AOKS020  DS    0H                                                Y02668
         CLI   0(RF),ENDLISTI      END OF SEARCH LIST?           Y02668
         BE    AOKS030             BR YES, GET NEXT KEY IN TEXT. Y02668
* MORE SEARCH LIST ENTRIES TO GO.                                Y02668
         CLC   0(1,RF),0(R9)       ENTRY MATCH CURRENT KEY?      Y02668
         BE    AOKS060             BRANCH YES, KEY FOUND.        Y02668
         LA    RF,1(RF)            STEP TO NEXT LIST ENTRY.      Y02668
         B     AOKS020             BR TO COMPARE NEXT ENTRY.     Y02668
* CURRENT KEY IN TEXT DOES NOT MATCH ANY ENTRIES IN SEARCH KIST. Y02668
AOKS030  DS    0H                                                Y02668
         CLI   0(R9),ENDK          CURRENT KEY 'END OF STRING'?  Y02668
         BE    AOKS080             BRANCH YES.                   Y02668
* CURRENT KEY IS NOT A TEXT ENDING KEY. MORE KEYS TO GO.         Y02668
         BAL   RE,AOKSR1           SKIP TO NEXT KEY IN TEXT.     Y02668
         B     AOKS010             COMPARE NEXT KEY TO LIST.     Y02668
* MATCH FOUND TO SEARCH LIST ENTRY.                              Y02668
* RF POINTS TO MATCHING LIST ENTRY, R9 TO MATCHING KEY IN TEXT.  Y02668
* THE MATCHING ENTRY IS MOVED TO THE TOP OF THE LIST.            Y02668
AOKS060  DS    0H                                                Y02668
         LA    RE,AOSCHKYS         GET ADDR OF 1ST LIST ENTRY.   Y02668
         CR    RF,RE               MATCHING ENTRY ALREADY FIRST? Y02668
         BE    AOKS090             BRANCH YES.                   Y02668
* MATCHING ENTRY NOT THE FIRST ENTRY.                            Y02668
* ENTRIES ABOVE ARE MOVED DOWN OVER THE MATCHING ENTRY, AND      Y02668
* THE MATCHING ENTRY IS PLACED IN THE FIRST SLOT.                Y02668
         IC    R0,0(RF)            LOAD  MATCHING ENTRY.         Y02668
         LR    R1,RF               COPY ADDR OF MATCHING ENTRY.  Y02668
         SR    R1,RE               GET DISPLACEMENT OF ENTRY.    Y02668
         BCTR  RF,0                POINT TO 1ST ENTRY ABOVE      Y02668*
                                   MATCHING ENTRY.               Y02668
         EX    R1,AOKS100          MOVE LIST DOWN 1 SLOT OVER    Y02668*
                                   MATCHING ENTRY. AN EXTRA BYTE Y02668*
                                   IS MOVED, BUT NO HARM DONE.   Y02668
         STC   R0,AOSCHKYS         PLACE MATCHING ENTRY AT TOP.  Y02668
         B     AOKS090             BR TO EXIT. R9 CONTAINS ADDR  Y02668*
                                   OF MATCHING KEY IN TEXT.      Y02668
* END OF TEXT HAS BEEN REACHED AND NO MATCHES FOUND.             Y02668
AOKS080  DS    0H                                                Y02668
         SR    R9,R9               SET CODE FOR KEY(S) NOT FOUND.Y02668
AOKS090  DS    0H                                                Y02668
         LM    RE,R5,AOKSCHSA      RESTORE REGS.                YM01546
         BR    RE                  AND RETURN.                   Y02668
         SPACE 2                                                 Y02668
AOKS100  MVC   1(0,RF),0(RF)       EX MOVE OVER MATCHING ENTRY.  Y02668
ENDLISTI EQU   X'00'               END OF LIST INDICATOR.        Y02668
         EJECT
*          ******************************************************Y02668
*          *                                                    *Y02668
*          * AOKSR1 - KEY SEARCH SERVICE ROUTINE.               *Y02668
*          *                                                    *Y02668
*          * AOKSR1 IS ENTERED TO FIND THE NEXT KEY IN A TEXT   *Y02668
*          * STRING. THE CALLING ROUTINE PROVIDES A SEARCH      *Y02668
*          * STARTING ADDRESS, AND PARAMETERS NECESSARY FOR     *Y02668
*          * SEARCHING THROUGH TEXT. AOKSR1 RETURNS THE ADDRESS *Y02668
*          * OF THE KEY.                                        *Y02668
*          *                                                    *Y02668
*          * INPUT -                                            *Y02668
*          * .R9 - ADDRESS OF KEY WHOSE TEXT IS TO BE SKIPPED   *Y02668
*          *                                                    *Y02668
*          * OUTPUT -                                           *Y02668
*          * .R9 - ADDRESS OF KEY AT WHICH SEARCH WAS STOPPED.  *Y02668
*          *  ENDING KEY MAY BE A TEXT ENDING KEY OR KEYWORD KEY*Y02668
*          *                                                    *Y02668
*          * NOTES -                                            *Y02668
*          * .AOKSR1 MOVES DATA FROM TEXT INTO THE FOLLOWING    *Y02668
*          *  WORK AREAS:                                       *Y02668
*          * .AOKSRPRM - TWO BYTE PARAMETER LIST COMPRISING -   *Y02668
*          * .AOKSRNBR - NUMBER OF PARAMS LEFT FOR THIS KEYWORD.*Y02668
*          * .AOKSRSCT - CONTENTS OF THE BYTE IN TEXT FOLLOWING *Y02668
*          *  THE NUMBER BYTE. CONTENTS MAY BE -                *Y02668
*          *                           SUBLIST COUNT            *Y02668
*          *                           LENGTH OF NEXT PARAMETER.*Y02668
*          * .AOKSRBY3 - CONTENTS OF THE 2ND BYTE IN TEXT FOLLOW*Y02668
*          *  ING THE NUMBER BYTE. IF AOKSRSCT CONTAINS A SUB-  *Y02668
*          *  LIST COUNT, THEN AOKSRBY3 CONTAINS THE LTH OF THE *Y02668
*          *  FIRST PARAM IN THE SUBLIST.                       *Y02668
*          *  OTHERWISE THE BYTE IS IGNORED.                    *Y02668
*          *                                                    *Y02668
*          ******************************************************Y02668
         SPACE 2                                                 Y02668
AOKSR1   DS    0H                                                Y02668
* R9 POINTS TO KEY BYTE. NUMBER BYTE FOLLOWS.                    Y02668
         MVC   AOKSRPRM(3),1(R9)   MOVE NBR, LTH AND LTH+1 BYTES Y02668*
                                   FOR THIS KEY, TO WORK AREA.   Y02668
         LA    R9,2(R9)            POINT TO LENGTH BYTE.         Y02668
         CLI   AOKSRNBR,0          IS PARAM NBR ZERO?            Y02668
         BC    8,0(RE)             RETURN IF YES. ZERO PARAM NBR Y02668*
                                   IS KEYWORD=KEYWORD CASE.      Y02668
* NON-ZERO PARAM NUMBER. INITIALIZE FOR SEARCH.                  Y02668
         STM   RE,RF,AOKSR1SA      SAVE REGS.                    Y02668
         SR    RE,RE               ZERO PARAM NUMBER             Y02668
         SR    RF,RF               AND PARAM LENGTH REGS.        Y02668
* ENTRY FROM WITHIN LOOP.                                        Y02668
AOKSR110 DS    0H                                                Y02668
         IC    RE,AOKSRNBR         LOAD PARAM NUMBER.            Y02668
         XC    AOKSRNBR(1),AOKSRNBR ZERO NBR FIELD TO INDICATE   Y02668
*                                  NO SUBLIST BEING PROCESSED.   Y02668
AOKSR120 DS    0H                                                Y02668
         IC    RF,AOKSRSCT         LOAD PRESUMED LENGTH.         Y02668
         TM    AOKSRSCT,SUBLST     SUBLIST BIT ON?               Y02668
         BZ    AOKSR150            BRANCH NO.                    Y02668
* SUBLIST BIT IS ON. LENGTH BYTE CONTAINS A SUBLIST COUNT        Y02668
* INSTEAD OF AN ACTUAL LENGTH VALUE.                             Y02668
         BCTR  RE,0                REDUCE NBR BY 1 FOR SUBLIST.  Y02668
         STC   RE,AOKSRNBR         SAVE REMAINING NUMBER.        Y02668
         IC    RE,AOKSRSCT         LOAD SUBLIST CT IN NBR REG,   Y02668*
                                   TO BE USED AS NUMBER.         Y02668
         IC    RF,AOKSRBY3         LOAD ACTUAL LTH FROM BYTE 3.  Y02668
         N     RE,AOSBLOFF         CLEAR SUBLIST BIT TO GET      Y02668*
                                   USABLE COUNT.                 Y02668
         LA    R9,1(R9)            POINT TO LENGTH BYTE.         Y02668
* LENGTH BYTE CONTAINS VALID LENGTH VALUE.                       Y02668
AOKSR150 DS    0H                                                Y02668
         LA    R9,1(RF,R9)         ADD PARAM LTH, PLUS 1 FOR LTH Y02668*
                                   BYTE, TO POINT TO NEXT        Y02668*
                                   CONTROL BYTE.                 Y02668
         MVC   AOKSRSCT(2),0(R9)   MOVE NEW LENGTH AND BYTE      Y02668
*                                  FOLLOWING, TO TEST AREA.      Y02668
         BCTR  RE,0                REDUCE NBR FOR THIS PARAM.    Y02668
         LTR   RE,RE               ANY MORE PARAMS TO GO?        Y02668
         BNZ   AOKSR120            BRANCH YES .                  Y02668
* NUMBER REG IS ZERO. TEST IF SUBLIST WAS BEING PROCESSED.       Y02668
         CLI   AOKSRNBR,0          WAS PARM NBR SAVED BEFORE?    Y02668
         BNE   AOKSR110            BRANCH YES TO PROCESS NBR.    Y02668
* NUMBER REG IS ZERO AND NO SUBLIST WAS BEING PROCESSED.         Y02668
AOKSR190 DS    0H                                                Y02668
         LM    RE,RF,AOKSR1SA      RESTORE REGS                  Y02668
         BR    RE                  AND RETURN.                   Y02668
         SPACE 2                                                 Y02668
AOSBLOFF DC    A(255-SUBLST)       MASK TO TURN OFF SUBLIST BIT. Y02668
SUBLST   EQU   X'80'               SUBLIST SWITCH.               Y02668
         EJECT
*              **************************************************
*              *                                                *
*              *    A AND V ADDRESS CONSTANT TABLE.             *
*              *                                                *
*              **************************************************
*
*                       V ADDRESS CONSTANTS.
*
IEFVHFHA DC    V(IEFVHF)          CONTROL ROUTINE.
IEFVGMV  DC    V(IEFVGM)          MESSAGE ROUTINE.
IEFVHRV  DC    V(IEFVHR)           WTO ROUTINE.                  Y02668
FIEFVHQ  DC    V(IEFVHQ)          Q MANAGER.
FIEFVFB  DC    V(IEFVFB)          SYMBOLIC PARAMETER ROUTINE.
*
*                       A ADDRESS CONSTANTS
*
AFB7     DC    A(FB7)             ADDRESS OF TRANSLATE TABLE.
AJ5L     DC    A(J5L)             ADDRESS FOR JOB KEY WORDS.
AE4L     DC    A(E4L)             ADDRESS FOR EXEC KEY WORDS.
AD4L     DC    A(D4L)             ADDRESS FOR DD MAJOR KEY WORDS.
AD4LD    DC    A(D4LD)            ADDRESS FOR DD DCB MINOR KEY WORDS.
AD4LUS   DC    A(D4LUS)           ADDRESS FOR DD UNIT MINOR KEY WORDS.
AD4LUA   DC    A(D4LUA)           ADDRESS FOR DD UNIT AFF KEY WORD.
AD4LV    DC    A(D4LV)            ADDRESS FOR DD VOLUME MINOR KEY WORDS
AD6LL    DC    A(D6LL)            ADDRESS FOR DD LABEL MINOR KEY WORDS.
*
NULLFILE DC    C'NULLFILE'         TEST FOR DUMMY DSNAME       @ZA26370
         SPACE 2
*********************PREFIX EQUATES *****************************Y02668
JOB      EQU   1                                                 Y02668
EXEC     EQU   2                                                 Y02668
PROCV    EQU   8                                                 Y02668
AONUML   EQU   2                                                 Y02668
*********************PATCH SPACE ******************************@G29AN2E
         DC    C'PTCH'                  PATCH SPACE IDENTIFIER @G29AN2E
PATCH    DC    110F'0'                  PATCH SPACE            @G29AN2E
         EJECT                                                 @G29AN2E
DICT     JCLD
         EJECT
FB7      JTRT  TT,(BK,PR,LP,PL,AM,AS,RP,MI,SL,CO,AP,EQ),AL,NC
         END
