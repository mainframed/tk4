*
**********************************************************************
*
*MODULE NAME= IEFVDA
*
*DESCRIPTIVE NAME= DD CARD PROCESSOR
*
*COPYRIGHT= N/A
*
*STATUS= VS2 REL 037 PTF                                       @ZA32059
*
*FUNCTION= GENERAL DESCRIPTION
*          IEFVDA IS THE MAIN PROCESSING MODULE FOR DD STATEMENTS.
*          IT 1. INITIALIZES AND CREATES TABLES AND CONTROL BLOCKS.
*             2. CHECKS VALIDITY OF DD CARD KEYWORDS AND IN SOME
*             CASES THEIR VALUES.
*             3. SETS JOB-FAIL BIT FOR INVALID KEYWORDS.
*
*          AM/0 SUPPORT
*
*          *JOBCAT,STEPCAT ASSOCIATION BITS(SIOTJSCT,SIOTCATL)
*          WHEN A CARD IS IDENTIFIED AS A JOBCAT STEPCAT OR
*          A CONTINUATION OF EITHER,THE SIOTJSCT BIT IS TURNED
*          ON TO SIGNAL THE RELATIONSHIP.THE SIOTCATL BIT IS
*          ALSO TURNED ON TO INDICATE THAT THE SIOT DEFINES
*          A CATALOG DATA SET.
*          (THE SIOTCATL BIT WILL BE TURNED ON BY DYNAMIC ALLOC-
*          ATION WHEN IT CREATES A CATALOG DD DEFINITION,THE
*          SIOTJSCT BIT WILL NOT BE TURNED ON BY THEM.)
*
*          * UNIQUE DD NAME FOR JOBCAT,STEPCAT CONCATENATIONS.
*          A UNIQUE DD NAME IS GENERATED FOR THOSE DATA SETS
*          CONCATENATED TO JOBCAT AND STEPCAT DD CARDS.DURING
*          THE CLEANUP OPERATION,A TEST IS MADE OF THE SIOTCATL AND
*          SIOTJSCT BITS.IF BOTH ARE ON AND THE DDNAME IS BLANK
*          IN THE SIOT,THE UNIQUE NAME WILL BE GENERATED AND
*          PLACED IN THE SIOT DDNAME FIELD.
*          THE FORMAT OF THE UNIQUE NAME IS:
*                       HEX ' 7C0000DD40404040 '
*          DD=DD NUMBER(UNIQUE TO EACH STEP)
*          LENGTH OF NAME IS 8 BYTES.
*
*          * QUALIFIED DSNAMES SIGNALED BY BIT(SIOTQDSN)
*          IF A PERIOD IS ENCOUNTERED IN A DSNAME OTHER THAN
*          A LITERAL,OR A TEMPORARY DSNAME IS CREATED,THE SIOTQDSN
*          IN THE SIOT WILL BE TURNED ON.
*          IF A REFERBACK IS MADE TO A QUALIFIED DSNAME,THE SIOTQDSN
*          BIT WILL BE TURNED ON IN THE SIOT BEING CREATED.
*          THE REFERBACK APPLIES NOT ONLY TO DSNAME REFERBACKS,
*          BUT ALSO TO DCB DSNAME REFERBACKS.
*
*          *MERGE OF SCTPCAT AND SCTPCATR FIELDS
*          THE SPLIT DEFINITION OF THE PRIVATE CATALOG SIOT
*          POSITION IN SWA WILL BE MERGED INTO ONE FIELD NAMED
*          SCTPCAT.
*OPERATION= IT RECEIVES THE INTERNAL TEXT AND USES IT TO CREATE THE
*          CONTROL BLOCKS NECESSARY TO ALLOCATE THE DATA SETS
*          DESCRIBED BY THE DD CARDS.
*          THE INTERNAL TEXT IS THEN PROCESSED BY THE APPROPRIATE
*          KEYWORD ROUTINE. EXTERNAL ROUTINES IEFVGT AND IEFVGK
*          PROCESS THE PARAMETER DESCRIPTOR TABLE (PDT) AND THE
*          KEYWORD BRANCH TABLE, RESPECTIVELY.
*          IF THE KEYWORD IS INVALID, THE PROCESSING ROUTINE GOES
*          TO THE CLEANUP ROUTINE WHICH SETS THE JOB-FAIL BIT IN
*          THE JCT AND PLACES THE APPROPRIATE ERROR MESSAGE IN
*          MSGSEC.
*NOTES
*    CHARACTER-CODE DEPENDENCIES= EBCDIC
*    DEPENDENCIES=  NONE
*    RESTRICTIONS=   NONE
*    REGISTER-CONVENTIONS=   AFTER INITIALIZATION:
*                            R0-R4 WORK REGISTERS FOR TEXT.
*                            R5- PTR TO REMOTE PARAM LIST OF Q-MGR
*                            R6- VCON TO IEFVHQ,Q-MGR ROUTINE.
*                            R7- SECOND BASE REGISTER.
*                            R8- VCON TO IEFVGT,TEST AND STORE RTNE.
*                            R9- VCON TO IEFVGK,GET KEY ROUTINE.
*                            RA- LOCAL WORKAREA POINTER,IEFVMDWA
*                            RB- BASE REGISTER FOR IEFVDA.
*                            RC- INTERPRETER WORKAREA PTR,IEFVMIWA.
*                            RD- SAVEAREA POINTER.
*                            RE-RF- WORK REGISTERS.
*    PATCH-LABEL= N/A
*MODULE TYPE=  PROCEDURE
*    PROCESSOR= ASSEMBLER
*    MODULE SIZE= N/A
*    ATTRIBUTES=
*
*ENTRY POINT=  IEFVDA
*    PURPOSE=  MAIN ENTRY
*    LINKAGE=  NONE
*    INPUT DATA=  INTERNAL TEXT,IWA INFORMATION
*    REGISTERS SAVED=  NONE
*    REGISTER CONTENTS DURING PROCESSING=
*                            R0-R4 WORK REGISTERS FOR TEXT.
*                            R5- PTR TO REMOTE PARAM LIST OF Q-MGR
*                            R6- VCON TO IEFVHQ,Q-MGR ROUTINE.
*                            R7- SECOND BASE REGISTER.
*                            R8- VCON TO IEFVGT,TEST AND STORE RTNE.
*                            R9- VCON TO IEFVGK,GET KEY ROUTINE.
*                            RA- LOCAL WORKAREA POINTER,IEFVMDWA
*                            RB- BASE REGISTER FOR IEFVDA.
*                            RC- INTERPRETER WORKAREA PTR,IEFVMIWA.
*                            RD- SAVEAREA POINTER.
*                            RE-RF- WORK REGISTERS.
*    REGISTERS RESTORED=  NONE
*
*EXIT - NORMAL=  IEFVHE
*    CONDITIONS=  WHEN PROCESSING FOR DD CARD COMPLETED.
*    OUTPUT DATA=  CONTROL BLOCKS FOR ALLOCATION.
*    RETURN CODES=  NONE
*
*EXIT - ERROR=  IEFVHE
*   CONDITIONS=  AFTER AN ERROR HAS BEEN DETECTED.
*                MODULE BRANCHES TO IEFVGM TO ISSUE AN ERROR
*                MESSAGE,AND THE JOB FAILED BIT IS TURNED ON IN THE
*                JCT IN THE IWA.
*   OUTPUT DATA=  AN ERROR MESSAGE AFTER THE CARD IMAGE IN SYSOUT.
*   RETURN CODES=  NONE
*
*EXTERNAL REFERENCES=
*   ROUTINES=  IEFVHQ,IEFVGS,IEFVGT,IEFVGK,IEFVGI,IEFVGM
*              IEFVDBSD
*   DATA AREAS=  IWA,LWA,NEL
*   CONTROL BLOCKS=  JCT - U,M
*                    SCT - U,M
*                    SIOT - C,U,M
*                    JFCB - C,U,M
*                    QMPA - U,M
*                    DSNT - C,U,M
*                    NEL - U
*                    TIOT - U
*                    UCB - U
*                    ACT - C,U,M
*                    SSWA - C,U,M                              @G29AN2E
*                    CVT  - U                                  @G24LPSJ
*                    SUBIT - U                                 @G24LPSJ
*       KEY:  C=CREATE,U=USED,M=MODIFIED,D=DELETE
*   TABLES=  TABLE OF VALID KEYS.
*   MACROS= GETMAIN,FREEMAIN                                     Y02668
*        ENQUEUE RESOURCES=  NONE
*   CHANGE LEVEL= Z40MPTH, ZM40101,ZD03010,ZA03532,ZM40103,ZM40457,
*                 Z40RPSM,ZA06978,ZA07483,ZA07503,ZA05806,ZA08159,
*                 ZA08690,ZA08164,ZA08756,ZA08746,ZA10112,     @ZA10112
*                 ZA10487,ZA10649,G29AN2E,G24LPSJ,G32HPPJ      @G32HPPJ
*                 ZA14270,ZA14276,ZA15012,ZA15344,ZM44657
*                 ZA15388,ZA16387,ZA1641Y,ZA16056,ZA20550,     @ZA20550
*                 ZA20610,ZA24607,ZA27071,ZA27750,ZA28079,     @ZA28079
*                 ZA31245,ZA32059                              @ZA32059
*
*          IEF606I- MISPLACED DD STATEMENT                     @ZA14276
*          IEF617I- NUMBER NAMES ON 1ST DD STMT AFTER EXEC STMT
*          IEF624I- INCORRECT USE OF PERIOD
*          IEF627I- INCORRECT USE OF AMPERSAND                 @ZA14270
*          IEF630I- UNIDENTIFIED KEYWORD
*          IEF631I- NUMBER OF DDNAMES EXCEEDS MAXIMUM
*          IEF632I- FORMAT ERROR
*          IEF636I- MISPLACED JOBLIB STATEMENT
*          IEF640I- EXCESSIVE NUMBER OF POSITIONAL PARAMETERS
*          IEF642I- EXCESSIVE PARAMETER LENGTH
*          IEF643I- UNIDENTIFIED POSITIONAL PARAMETER
*          IEF645I- INVALID REFERBACK
*          IEF646I- REQUIRED POSITIONAL PARAMETER MISSING
*          IEF647I- NON ALPHABETIC 1ST CHARACTER OF NAME
*          IEF648I- INVALID DISP FIELD
*          IEF649I- EXCESSIVE NUMBER OF DD STATEMENTS
*          IEF654I- MULTIPLE DDNAMES REFER TO ONE DD STMT
*          IEF655I- DSNAME INVALID WHEN SYSOUT SPECIFIED
*          IEF659I- MISPLACED SYSCHK DD STATEMENT
*          IEF757I- ILLEGAL DATASET NAME ON JCL STATEMENT      @ZA16056
*          SOME OF THE ABOVE MESSAGES ARE FOLLOWED BY SECONDARY
*          MESSAGES THAT KEY OFF THE KEYWORD'S 'KEY'.
         EJECT
         IEFQMNGR
         EJECT
DDJCT    DSECT
         IEFAJCTB
         EJECT
DDSCT    DSECT
         IEFASCTB
         EJECT
DDSIOT   DSECT
         IEFASIOT
         EJECT
DDJFCB   DSECT
         IEFJFCBN  LIST=YES                                     YM00362
*                                                                 M0491
         EJECT
         IEFJFCBE                                              @Z40MPTH
         EJECT
DDDSNT   DSECT                                                   Y02668
         IEFDSNT                                                 Y02668
         IEFVKEYS
         EJECT
         IEFCOMWA
         IEFVMIWA
***********************************************************************
*
*
*  THE FOLLOWING DSECT MAPS A WORKAREA USED BY THE SPLIT PROCESSOR
*
*
***********************************************************************
DSPLIT   DSECT
         DS    0D
SPLITBLK EQU   *                                                 Y02661
SPLITBLN DS    CL3                      AVG BLOCK LENGTH REQUEST Y02661
SPLITPQY DS    CL3                      PRIMARY QUANITY OF SPACE Y02661
SPLITRSV DS    CL1                      RESERVED                 Y02661
SPLITSQY DS    CL3                      SECONDARY QUANITY SPACE  Y02661
SPLITBYT DS    CL1                      INDICATOR BYTE           Y02661
SPLITCYL EQU   X'C0'                    CYLINDER REQUEST         Y02661
SPLITAVB EQU   X'40'                    AVERAGE BLOCK LENGTH REQ.Y02661
SPLITMTR DS    CL3                      MODEL TTR                Y02661
SPLITBY2 DS    CL1                      INDICATOR BYTE 2         Y02661
SPLITMDL EQU   X'C0'                    MODEL SPLIT DD           Y02661
SPLITNML EQU   X'40'                    SPLIT SUB-DD             Y02661
CLEARBY2 EQU   X'00'                    CLEAR BYTE               Y02661
SPLITTRK DS    XL1                      NO. TRKS(OR %)/CYL.      Y02661
SPLITWKA DS    CL4                      WORK AREA                Y02661
SPLITLST EQU   *                                                 Y02661
INEMJFCX EQU   SPLITBLK                 START JFCBX AREA         Y02661
         EJECT
         IEFVMDWA
VDANEL   DSECT                                                   A26488
         IEFNEL SUBCOM=I                                         Y02668
         EJECT                                                   A26488
         EJECT                                                   A26488
         IEFTXTFT
         EJECT                                                   A26488
         IEFZB505                                              @G29AN2E
         EJECT
         IEFJSSWA                                              @G29AN2E
         EJECT
         CVT   DSECT=YES               CVT MAP                 @G24LPSJ
         EJECT                                                 @G24LPSJ
         IHASUBIT                      SUBIT MAP               @G24LPSJ
         EJECT                                                 @G24LPSJ
*             ****************************************************
*             ****************************************************
*             **                                                **
*             **             DD ROUTINE DEFINITIONS             **
*             **                                                **
*             ****************************************************
*             ****************************************************
         SPACE 3
         SPACE 2
*                       OPERATION DEFINITIONS.
*
OR1      EQU   X'00'              OR ONE BYTE.
CVB1     EQU   X'01'              CONVERT ONE BYTE.
CVB2     EQU   X'02'              CONVERT TWO BYTES.
CVB3     EQU   X'03'              CONVERT THREE BYTES.
AND1     EQU   X'04'              AND ONE BYTE.
MVCN     EQU   X'05'              MOVE CHARACTERS.
AMVCN    EQU   X'06'              FIRST CHARACTER ALPHA & MOVE.
AMVCN1   EQU   X'07'              FIRST CHAR ALPHA NUMERIC & MOVE   060
AMVCN2  EQU   X'08'               ALL CHARACTER ALPHA/NUMERIC &
*                                 NATIONAL CHECK & MVC         @ZA20550
*
*                       TABLE DEFINITIONS.
*
INAM     EQU   X'00'              DD ROUTINE WORK AREA.
INDM     EQU   X'04'              SIOT TABLE.
INFM     EQU   X'05'              JFCB TABLE.
INEM     EQU   X'06'                    JFCBX TABLE              Y02661
INGM     EQU   X'0C'              JFCBE DEFINITION...          @Z40MPTH
INIM     EQU   X'0F'              INTERPRETOR WORK AREA.
*                                                                  AADA
INIMIWA  EQU   COMWA               START OF WORK AREA.           Y02668
INGMJFCE EQU   JFCBE         START OF JFCBE... FOR PDT DEFIN.  @Z40MPTH
*                                                                  AADA
*
*                       MISCELLANEOUS DEFINITIONS.
CVTADDR  EQU   16                      CVT ADDRESS             @G24LPSJ
*                                                              @G24LPSJ
*
*                       NUMBERS USED
DD0      EQU   0
DD1      EQU   1
DD2      EQU   2
DD3      EQU   3
DD4      EQU   4
DD5      EQU   5
DD6      EQU   6
DD7      EQU   7
DD8      EQU   8
DD10     EQU   10
DD11     EQU   11
DD12     EQU   12
DD14     EQU   14
DD15     EQU   15
DD16     EQU   16
DD20     EQU   20
DD23     EQU   23
DD24     EQU   24
DD29     EQU   29
DD32     EQU   32                                              @Z40MPTH
DD43     EQU   43
DD44     EQU   44
DD51     EQU   51
DD62     EQU   62                                                A26488
DD128    EQU   128
DD129    EQU   129
DD130    EQU   130
DD131    EQU   131
DD168    EQU   168
DD255    EQU   255
DD366    EQU   366                                                21615
DD365    EQU   365
DISPLID  EQU   7        DISPLACEMENT OF BLOCK ID -FIRST BLOCK    Y02621
DISPL2ID EQU   15       DISPLACEMENT OF BLOCK ID -SECOND BLOCK   Y02621
*
*                            REMOTE LIST CONTROL BLOCK ID'S      Y02621
JFCBSID  EQU   X'1C'         ID FOR WRITING JFCB TO SWA          Y02621
JFCBXID  EQU   X'1D'         ID FOR WRITING JFCBX TO SWA         Y02621
JFCBEID  EQU   X'29'    ID FOR WRITING JFCBE TO SWA...         @Z40MPTH
NULLID   EQU   X'00'              NULL ID FOR SWA MGR.           Y02621
QMDFLT   EQU   X'11'    DEFAULT-WRITE 1,ASSIGN 1 RECORD...     @YA00900
*
*                            FOR CONDITION TESTS
HIGH     EQU   DD2
LOW      EQU   DD4
EQUAL    EQU   DD8
ZERO     EQU   DD8
NOT      EQU   DD15
HIOREQ   EQU   DD10
*                            CHARACTERS USED
DDBLANK  EQU   C' '
DDPERIOD EQU   C'.'
DDPLUS   EQU   C'+'
DDAMP    EQU   C'&&'
DDASTER  EQU   C'*'
DDMINUS  EQU   C'-'
DDCK     EQU   C'K'
DDCL     EQU   C'L'
DDCR     EQU   C'R'
DDN0     EQU   C'0'
DDCA     EQU   C'A'                                                3565
DDN9     EQU   C'9'
*                            FOR PPT TABLE
HEX      EQU   DD16
*
*                       IEFVMDWA
LDWA     EQU   DDWA8-DWA          LENGTH OF DA WORK AREA
*
*                       ERROR MESSAGE NUMBERS.
*
ERMES27  EQU   X'1B'     INCORRECT USE OF AMPERSAND            @ZA14270
ERMES36  EQU   X'24'
ERMES17  EQU   X'11'
ERMES43  EQU   X'2B'
ERMES46  EQU   X'2E'
ERMES42  EQU   X'2A'
ERMES40  EQU   X'28'
ERMES48  EQU   X'30'
ERMES31  EQU   X'1F'
ERMES06  EQU   X'06'
ERMES49  EQU   X'31'
ERMES54  EQU   X'36'     MULTIPLE DDNAMES REFER TO ONE DD
ERMES55  EQU   X'37'     DSNAME INVALID WHEN SYSOUT SPECIFIED
ERMES24  EQU   X'18'    INCORRECT USE OF PERIOD                    3565
ERMES47  EQU   X'2F'    NON-ALPHA FIRST CHARACTER OF NAME          3565
ERMES45  EQU   X'2D'         INVALID REFERBACK TO DUMMY DS        16670
ERMES30  EQU   X'1E'               INVALID KEYWORD                19874
ERMES110 EQU   X'6E'               ON THE DD STATEMENT           A40259
ERMES69  EQU   X'45'    INVALID REFER FORWARD TO DYNAM DS         20029
ERMES19  EQU   X'13'         NO IEFDATA CARD IN RDR PROC.        A30585
ERMES32  EQU   X'20'    FORMAT ERROR                              21009
ERMES133 EQU   X'47'              MISPLACED JOBCAT ERROR MSSG    Y01113
ERMES134 EQU   X'48'              DUPLICATE STEPCAT IN STEP MSSG Y01113
ERMES135 EQU   X'2C'              INVALID NUMERICS               Y02668
ERMES67  EQU   X'43'              ILLEGAL DATASET NAME         @ZA16056
*                                 ON JCL STATEMENT - IEF757I   @ZA16056
WRNMSG01 EQU   X'42'              FREE VALUE INVALID             Y02668
WRNMSG02 EQU   X'38'              INVALID COPIES VALUE           Y02668
WRNMSG06 EQU   X'4A'              HOLD VALUE INVALID             Y02668
*
*                       KEY WORD DEFINITIONS.
*
JJCT2    EQU   X'80'              BIT FOR JOBLIB.
*
JDICTI1  EQU   X'10'              BIT FOR DD VERB
JDICTI2  EQU   X'08'              BIT FOR DCB DSNAME
JDICTI3  EQU   X'04'              BIT FOR DDNAME SWITCH
JDICTI5  EQU   X'01'              BIT FOR ABSTR.
*
DDN      EQU   X'01'         MAXIMUM NUMBER OF DD PARAMETERS.    Y02028
DDS      EQU   X'00'              SUBLIST DD KEY.
JDDT1    EQU   X'08'              MAX LENGTH OF DD LABEL.
JDDT2    EQU   X'01'              BIT FOR * IN SIOT AT SCTSBYT3.
JDDT4    EQU   X'04'              BIT FOR * IN SIOT AT SCTSDISP.
JDDT5    EQU   X'20'               BIT FOR * IN JFCB AT JFCBTSDM   AACA
JDDT6    EQU   X'40'               BIT FOR * IN JFCB AT JFCBIND2.Y02668
*
TRTCHN   EQU   X'01'              NUMBER TRTCH KEY PARAMETERS.
TRTCHS   EQU   X'00'              SUBLIST TRTCH KEY.
*
STACKN   EQU   X'01'              NUMBER STACK KEY PARAMETERS.
STACKS   EQU   X'00'              SUBLIST STACK KEY.
DDMS1    EQU   X'F0'
*
SOWAN    EQU   X'01'              NUMBER SOWA KEY PARAMETERS.
SOWAS    EQU   X'00'              SUBLIST SOWA KEY.
JSOWA1   EQU   32767              MAX VALUE SOWA IN JFCB AT JFCSOWA.
*
RKPN     EQU   X'01'              NUMBER RKP KEY PARAMETERS.
RKPS     EQU   X'00'              SUBLIST RKP KEY.
JRKP1    EQU   65535              MAX VALUE RKP IN JFCB AT JFCRKP.
*
IPLTXIDN EQU   X'01'              NUMBER OF IPLTXID KEY PARAMS.  Y01948
IPLTXIDS EQU   X'00'               SUBLIST IPLTXID KEYWORD.      Y01948
JIPLTXID EQU   X'07'              MAX NAME LENGTH FOR IPLTXID KEYY01948
FUNCN    EQU   X'01'               NUMBER FUNC KEY PARAMETERS     21088
FUNCS    EQU   X'00'              SUBLIST FUNC KEY                21088
JFUNC1   EQU   X'80'              BIT FOR FUNC=I IN JFCB, JFCBFUNC21088
JFUNC2   EQU   X'40'              BIT FOR FUNC=R IN JFCB, JFCBFUNC21088
JFUNC3   EQU   X'20'              BIT FOR FUNC=P IN JFCB, JFCBFUNC21088
JFUNC4   EQU   X'10'              BIT FOR FUNC=W IN JFCB, JFCBFUNC21088
JFUNC5   EQU   X'12'              FUNC=WT IN JFCB AT JFCBFUNC     21088
JFUNC6   EQU   X'16'              FUNC=WXT IN JFCB AT JFCBFUNC    21088
JFUNC7   EQU   X'60'              FUNC=RP IN JFCB AT JFCBFUNC     21088
JFUNC8   EQU   X'68'              FUNC=RPD IN JFCB AT JFCBFUNC    21088
JFUNC9   EQU   X'50'              FUNC=RW IN JFCB AT JFCBFUNC     21088
JFUNC10  EQU   X'52'              FUNC=RWT IN JFCB AT JFCBFUNC    21088
JFUNC11  EQU   X'56'              FUNC=RWXT IN JFCB AT JFCBFUNC   21088
JFUNC12  EQU   X'30'              FUNC=PW IN JFCB AT JFCBFUNC     21088
JFUNC13  EQU   X'34'              FUNC=PWX IN JFCB AT JFCBFUNC    21088
JFUNC14  EQU   X'36'              FUNC=PWXT IN JFCB AT JFCBFUNC   21088
JFUNC15  EQU   X'70'              FUNC=RPW IN JFCB AT JFCBFUNC    21088
JFUNC16  EQU   X'74'              FUNC=RPWX IN JFCB AT JFCBFUNC   21088
JFUNC17  EQU   X'76'              FUNC=RPWXT IN JFCB AT JFCBFUNC  21088
JFUNC18  EQU   X'78'              FUNC=RPWD IN JFCB AT JFCBFUNC   21088
JFUNC19  EQU   X'14'              FUNC=WX IN JFCB AT JFCBFUNC     21088
JFUNC20  EQU   X'54'              FUNC=RWX IN JFCB AT JFCBFUNC    21088
*
RECFMN   EQU   X'01'              NUMBER RECFM KEY PARAMETERS.
RECFMS   EQU   X'00'              SUBLIST RECFM KEY.
JRECFM1  EQU   X'80'              BIT FOR RECFM=F IN JFCB AT JFCRECFM.
JRECFM2  EQU   X'40'              BIT FOR RECFM=V IN JFCB AT JFCRECFM.
JRECFM3  EQU   X'C0'              BITS FOR RECFM=U IN JFCB AT JFCRECFM.
JRECFM4  EQU   X'20'              BIT FOR RECFM=T IN JFCB AT JFCRECFM.
JRECFM5  EQU   X'10'              BIT FOR RECFM=B IN JFCB AT JFCRECFM.
JRECFM6  EQU   X'08'              BIT FOR RECFM=S IN JFCB AT JFCRECFM.
JRECFM7  EQU   X'04'              BIT FOR RECFM=A IN JFCB AT JFCRECFM.
JRECFM9  EQU   X'02'              BIT FOR RECFM=M IN JFCB AT JFCRECFM.
JRECFMB  EQU   X'01'              BIT FOR RECFM=K IN JFCB AT JFCRECFM.
JRECFMC  EQU   X'20'              BIT FOR RECFM=D AT JFCRECFM     19200
*
PRTSPN   EQU   X'01'              NUMBER PRTSP KEY PARAMETERS.
PRTSPS   EQU   X'00'              SUBLIST PRTSP KEY.
*
OPTCDN   EQU   X'01'              NUMBER OPTCD KEY PARAMETERS.
OPTCDS   EQU   X'00'              SUBLIST OPTCD KEY.
JOPTCD1  EQU   X'80'              BIT FOR OPTCD=W IN JFCB AT JFCOPTCD.
JOPTCD2  EQU   X'20'              BIT FOR OPTCD=P IN JFCB AT JFCOPTCD.
JOPTCD3  EQU   X'20'              BIT FOR OPTCD=M IN JFCB AT JFCOPTCD.
JOPTCD4  EQU   X'20'              BIT FOR OPTCD=E IN JFCB AT JFCOPTCD.
JOPTCD5  EQU   X'10'              BIT FOR OPTCD=I IN JFCB AT JFCOPTCD.
JOPTCD6  EQU   X'10'              BIT FOR OPTCD=F IN JFCB AT JFCOPTCD.
JOPTCD7  EQU   X'20'              BIT FOR OPTCD=C AT JFCDPTCD   PTM111
JOPTCD8  EQU   X'08'              BIT FOR OPTCD=A IN JFCB AT JFCOPTCD.
JOPTCD9  EQU   X'02'              BIT FOR OPTCD=L IN JFCB AT JFCOPTCD.
JOPTCDA  EQU   X'01'              BIT FOR OPTCD=R IN JFCB AT JFCOPTCD.
JOPTCDB  EQU   X'08'
JOPTCDC  EQU   X'40'
JPTCDD   EQU   X'04'               BIT FOR OPTCD=Z IN JFCB AT JFCOPTD.
JPTCDE   EQU   X'02'               BIT FOR OPTCD=T IN JFCB AT JFCOPTD
JPTCDH   EQU   X'08'              BIT FOR OPTCD=Q AT JFCOPTCD     19200
JPTCDI   EQU   JFCOPTJ             BIT FOR OPTCD=J IN JFCDPTCD @Z40MPTH
*                                      FOLLOWING TWO PATTERNS  EC 19017
*                                      ADDED FOR OCR SUPPORT   EC 19017
*                                      FORUSE WITH BSAM AND    EC 19017
*                                      QSAM RESPECTIVELY.      EC 19017
JPTCDF   EQU   X'10'         BIT FOR OPTCD=H IN JFCB AT JFCOPTCD  19017
JPTCDG   EQU   X'10'         BIT FOR OPTCD=O IN JFCB AT JFCOPTCD  19017
*
NTMN     EQU   X'01'              NUMBER NTM KEY PARAMETERS.
NTMS     EQU   X'00'              SUBLIST NTM KEY.
JNTM1    EQU   99                 MAX VALUE NTM IN JFCB AT JFCNTM.
*
NCPN     EQU   X'01'              NUMBER NCP KEY PARAMETERS.
NCPS     EQU   X'00'              SUBLIST NCP KEY.
JNCP1    EQU   99                 MAX VALUE NCP IN JFCB AT JFCNCP.
*
GNCPN    EQU   X'01'              NUMBER GNCP KEY PARAMS
GNCPS    EQU   X'00'              SUBLISTS
JGNCP1   EQU   99                 MAX VALUE NCP IN JFCB AT JFCBFTEK
*
MODEN    EQU   X'01'              NUMBER MODE KEY PARAMETERS.
MODES    EQU   X'00'              SUBLIST MODE KEY.
JMODE1   EQU   X'80'              BIT FOR MODE=C IN JFCB AT JFCMODE.
JMODE2   EQU   X'40'              BIT FOR MODE=E IN JFCB AT JFCMODE.
JMODE3   EQU   X'A0'              MODE=CO IN JFCB AT JFCMODE      21088
JMODE4   EQU   X'90'              MODE=CR IN JFCB AT JFCMODE      21088
JMODE5   EQU   X'60'              MODE=EO IN JFCB AT JFCMODE      21088
JMODE6   EQU   X'50'              MODE=ER IN JFCB AT JFCMODE      21088
DDMS2    EQU   255-DDMS1
*
LRECLN   EQU   X'01'              NUMBER LRECL KEY PARAMETERS.
LRECLS   EQU   X'00'              SUBLIST LRECL KEY.
JLRECL1  EQU   32760              MAX VALUE LRECL IN JFCB / JFCLRECL.
JLRECLX  EQU   C'X'               LRECL EXCEPTION PARAMETER        AAAA
JLRECLXN EQU   1                   NUMBER OF CHARS / LRECL EXCEPTION
*
LIMCTN   EQU   X'01'              NUMBER LIMCT KEY PARAMETERS.
LIMCTS   EQU   X'00'              SUBLIST LIMCT KEY.
JLIMCT1  EQU   32760              MAX VALUE LIMCT IN JFCB / JFCLIMCT.
*
KEYLENN  EQU   X'01'              NUMBER KEYLEN KEY PARAMETERS.
KEYLENS  EQU   X'00'              SUBLIST KEYLEN KEY.
JKEYLEN1 EQU   255                MAX VALUE KEYLEN IN JFCB / JFCKEYLE.
*
INTVLN   EQU   X'01'              NUMBER INTVL KEY PARAMETERS.
INTVLS   EQU   X'00'              SUBLIST INTVL KEY.
JINTVL1  EQU   255                MAX VALUE INTVL IN JFCB / JFCINTVL.
*
FRIDN    EQU   X'01'              NUMBER FRID KEY PARAMETERS     Y02670
FRIDS    EQU   X'00'              SUBLIST FRID KEY               Y02670
JFRID1   EQU   4                  MAXIMUM LENGTH OF FRID         Y02670
*
MSVGPN   EQU   X'02'              NUMBER OF MSVGP PARAMETERS   @G24LPSJ
MSVGPS   EQU   X'00'              SUBLIST CODE-NO SUBLIST      @Y30LPSB
MSVGPLN  EQU   X'08'              MAXIMUM LENGTH OF MSVGP ID   @Y30LPSB
*                                                              @Y30LPSB
EROPTN   EQU   X'01'              NUMBER EROPT KEY PARAMETERS.
EROPTS   EQU   X'00'              SUBLIST EROPT KEY.
JEROPT4  EQU   X'08'              BIT FOR EROPT=CLS IN JFCB / JFCEROPT.
*
DSORGN   EQU   X'01'              NUMBER DSORG KEY PARAMETERS.
DSORGS   EQU   X'00'              SUBLIST DSORG KEY.
JDSORG1  EQU   X'81'              BIT FOR DSORG=ISU IN JFCB / JFCDSORG.
JDSORG2  EQU   X'80'              BIT FOR DSORG=IS IN JFCB / JFCDSORG.
JDSORG3  EQU   X'41'              BIT FOR DSORG=PSU IN JFCB / JFCDSORG.
JDSORG4  EQU   X'40'              BIT FOR DSORG=PS IN JFCB / JFCDSORG.
JDSORG5  EQU   X'21'              BIT FOR DSORG=DAU IN JFCB / JFCDSORG.
JDSORG6  EQU   X'20'              BIT FOR DSORG=DA IN JFCB / JFCDSORG.
JDSORG7  EQU   X'10'              BIT FOR DSORG=CX IN JFCB / JFCDSORG.
JDSORG8  EQU   X'08'              BIT FOR DSORG=CQ IN JFCB / JFCDSORG.
JDSORG9  EQU   X'04'              BIT FOR DSORG=MQ IN JFCB / JFCDSORG.
JDSORGA  EQU   X'03'              BIT FOR DSORG=POR IN JFCB / JFCDSORG.
JDSORGB  EQU   X'02'              BIT FOR DSORG=PO IN JFCB / JFCDSORG.
*                                                                  AAAA
HIARCHYN EQU   X'01'              NUMBER HIARCHY KEY PARAMS        AAAA
HIARCHYS EQU   X'00'              SUBLISTS                         AAAA
JHIAR1   EQU   X'00'              BIT FOR HIARCHY=0                AABA
JHIAR2   EQU   X'04'              BIT FOR HIARCHY=1                AABA
JHIAR3   EQU   255-JHIAR1-JHIAR2  BIT PATTERN TO CLEAR HIARCHY BITSAABA
*
DENN     EQU   X'01'              NUMBER DEN KEY PARAMETERS.
DENS     EQU   X'00'              SUBLIST KEY.
*
CYLOFLN  EQU   X'01'              NUMBER CYLOFL KEY PARAMETERS.
CYLOFLS  EQU   X'00'              SUBLIST CYLOFL KEY.
JCYLOFL1 EQU   99                 MAX VALUE CYLOFL IN JFCB AT JFCCYLOF.
*
CPRIN    EQU   X'01'              NUMBER CPRI KEY PARAMETERS.
CPRIS    EQU   X'00'              SUBLIST CPRI KEY.
JCPRI1   EQU   X'04'              BIT FOR CPRI=R IN JFCB AT JFCCPRI 696
JCPRI2   EQU   X'02'              BIT FOR CPRI=E IN JFCB AT JFCCPRI 696
JCPRI3   EQU   X'01'              BIT FOR CPRI=S IN JFCB AT JFCCPRI 696
*
CODEN    EQU   X'01'              NUMBER CODE KEY PARAMETERS.
CODES    EQU   X'00'              SUBLIST CODE KEY.
*
HOLDN    EQU   X'01'              NUMBER HOLD KEY PARAMETERS     Y02668
HOLDS    EQU   X'00'              SUBLIST HOLD KEY               Y02668
*                                                                Y02668
BUFRQN   EQU   X'01'              NUMBER BUFRQ KEY PARAMETERS.
BUFRQS   EQU   X'00'              SUBLIST BUFRQ KEY.
JBUFRQ1  EQU   255                MAX VALUE BUFRQ IN JFCB AT JFCBUFRQ.
*
BUFNON   EQU   X'01'              NUMBER BUFNO KEY PARAMETERS.
BUFNOS   EQU   X'00'              SUBLIST BUFNO KEY.
JBUFNO1  EQU   255                MAX VALUE BUFNO IN JFCB AT JFCBUFNO.
*
BUFLN    EQU   X'01'              NUMBER BUFLN KEY PARAMETERS.
BUFLS    EQU   X'00'              SUBLIST BUFLN KEY.
JBUFL1   EQU   32760              MAX VALUR BUFL IN JFCB AT JFCBUFL.
*
BLKSIZEN EQU   X'01'              NUMBER BLKSIZE KEY PARAMETERS.
BLKSIZES EQU   X'00'              SUBLIST BLKSIZE KEY.
JBLKSIZ1 EQU   32760              MAX VALUE BLKSIZE IN JFCB / JFCBLKSI.
*
BFTEKN   EQU   X'01'              NUMBER BFTEK KEY PARAMETERS.
BFTEKS   EQU   X'00'              SUBLIST BFTEK KEY.
JBFTEK4  EQU   X'80'              BIT FOR BFTEK=B IN JFCB AT JFCBFTEK.
JBFTEK5  EQU   X'60'    BIT FOR BFTEK=A IN JFCB AT JFCBFTEK       19015
JBFTEK6  EQU   X'20'    BIT FOR BFTEK=R IN JFCB AT JFCBFTEK.      19015
*                                                                A30036
JBFTEK7  EQU   (255-JFCSIM-JFCEXC-JFCDYN-JBFTEK4-JBFTEK5-JBFTEK6)
*              CLEAR THE PROPER BITS CONNECTED TO THIS DCB PARM  A30036
BFALNN   EQU   X'01'              NUMBER BFALN KEY PARAMETERS.
BFALNS   EQU   X'00'              SUBLIST BFALN KEY.
JBFALN3  EQU   (255-JFCFWORD-JFCDWORD) TO ZERO OUT THE PROPER    A30036
*                                      BITS FOR THIS DCB PARAMET A30036
*
RETPDN   EQU   X'01'              NUMBER RETPD KEY PARAMETERS.
RETPDS   EQU   X'00'              SUBLIST RETPD KEY.
JRETPD1  EQU   9999               MAX VALUE RETPD IN DDWA / DDETPD
*
COPIESN  EQU   X'02'              NUMBER OF COPIES PARAMETERS  @Z40MPTH
COPIESS  EQU   X'40'         SUBLIST CODE,SUBLIST ALLOWED IN   @Z40MPTH
*                                 SECOND POSITION....          @Z40MPTH
JCOPIES1 EQU  255                 MAXIMUM NUMBER OF COPIES       Y02668
JCOPIES2 EQU   X'01'              DEFAULT NO. OF COPIES          Y02668
*
DESTN    EQU   X'01'              NUMBER DEST KEY PARAMETERS     Y02668
DESTS    EQU   X'00'              SUBLIST DEST KEY               Y02668
JDEST1   EQU   8                  MAXIMUM LENGTH OF DEST       @ZA03532
*
EXPDTN   EQU   X'01'              NUMBER EXPDT KEY PARAMETERS.
EXPDTS   EQU   X'00'              SUBLIST EXPDT KEY.
JEXPDT1  EQU   99                 MAX VALUE EXPDT IN JFCB AT JFCBXPDT.
JEXPDT2  EQU   366                MAX VALUE EXPDT IN JFCB/JFCBXPDT+1
JEXTEST  EQU   X'03'              IF BITS 0,1 OR 2 ON THEN YEAR  A46693
*                                 NOT DIVISIBLE BY 4,THEREFORE   A46693
*                                 NOT LEAP YEAR.                 A46693
*
FLASHN   EQU   X'02'               NUMBER FLASH KEY PARAMETERS @Z40MPTH
FLASHS   EQU   X'00'               SUBLISTS FLASH KEY          @Z40MPTH
FLASL    EQU   X'04'               LENGTH OF FLASH ID FIELD    @Z40MPTH
FLASHCNT EQU   X'FF'               MAXIMUM COUNT - 255         @Z40MPTH
*                                                              @Z40MPTH
BURSTN   EQU   X'01'               NUMBER BURST KEY PARAMETERS @Z40MPTH
BURSTS   EQU   X'00'               SUBLISTS BURST KEY          @Z40MPTH
*                                                              @Z40MPTH
MODIFYN  EQU   X'02'               NUMBER MODIFY KEY PARAMETERS@Z40MPTH
MODIFYS  EQU   X'00'               SUBLISTS MODIFY KEY         @Z40MPTH
MODIFL   EQU   X'04'               LENGTH OF MODIFY ID FIELD   @Z40MPTH
MODFYTRC EQU   X'03'               MAXIMUM TRC - 3             @Z40MPTH
CHARSN   EQU   X'04'               NUMBER CHARS KEY PARAMETERS @Z40MPTH
*                                                              @Z40MPTH
CHARSS   EQU   X'00'               SUBLISTS CHARS KEY          @Z40MPTH
CHARSL   EQU   X'04'               LENGTH OF CHARS ID FIELD    @Z40MPTH
*                                                              @Z40MPTH
SUBSYSN  EQU   X'FF'              NUMBER SUBSYS KEY PARAMETERS @G29AN2E
SUBSYSS  EQU   X'00'              SUBLISTS SUBSYS KEY          @G29AN2E
JSUBSYS1 EQU   4                  MAXIMUM LENGTH OF SSNAME     @G29AN2E
PROTECTN EQU   X'01'              NUMBER OF PROTECT KEY PARMS  @G32HPPJ
PROTECTS EQU   X'00'              SUBLISTS FOR PROTECT         @G32HPPJ
REFN     EQU   X'01'              NUMBER REF KEY PARAMETERS.
REFS     EQU   X'80'              SUBLIST REF KEY.
*
SERN     EQU   X'FF'              NUMBER SER KEY PARAMETERS.
SERS     EQU   X'00'              SUBLIST SER KEY.
*
SEPMN    EQU   X'08'              NUMBER SEP MINOR KEY PARAMETERS.
SEPMS    EQU   X'00'              SUBLIST SEP MINOR KEY.
JSEPM1   EQU   0                  VALUE FOR UNCONDITIONAL BIT SET.
*
AFFMN    EQU   X'01'              NUMBER AFF MINOR KEY PARAMETERS.
AFFMS    EQU   X'00'              SUBLIST AFF MINOR KEY.
JAFFM1   EQU   0                  VALUE FOR UNCONDITIONAL BIT SET.
*
SUBALLON EQU   X'03'              NUMBER SUBALLOC KEY PARAMETERS.
SUBALLOS EQU   X'60'              SUBLIST SUBALLOC KEY.
JSUBAL1  EQU   0                  VALUE FOR UNCONDITIONAL BIT SET.
JSUBAL6  EQU   5                  MAX LENGTH OF AVERAGE RECORD
JSUBAL8  EQU   65535              MAX VALUE FOR AVERAGE RECORD.
JSUBAL9  EQU   8                  MAX LENGTH OF PRIMARY QUANTITY.
JSUBAL10 EQU   16777215           MAX VALUE FOR PRIMARY QUANTITY.
JSUBAL11 EQU   8                  MAX LENGTH OF SECONDARY QUANTITY.
JSUBAL12 EQU   16777215           MAX VALUE FOR SECONDARY QUANTITY.
JSUBAL13 EQU   8                  MAX LENGTH OF DIRECTORY QUANTITY.
JSUBAL14 EQU   16777215           MAX VALUE FOR DIRECTORY QUANTITY.
*
SYSOUTN  EQU   X'03'              NUMBER SYSOUT KEY PARAMETERS.
SYSOUTS  EQU   X'00'              SUBLIST SYSOUT KEY.
JSYSOUT3 EQU   X'08'              BIT FOR SYSOUT SIOT / SCTSBYT3
JSYSOUT6 EQU   X'02'              BIT FOR SYSOUT JFCB / JFCBLTYP.
JSYSOUT7 EQU   1                  MAX LENGTH CLASSNAME SIOT / SCTOUTPN.
JSYSOUT8 EQU   8                  MAX LENGTH PGM NAME SIOT / SCTOUTNM.
JSYSOUT9 EQU   4                  MAX LENGTH FORM SIOT / SCTOUTNO.
JSYSOUT0 EQU   X'20'              BIT FOR SYSOUT JFCB / JFCBTSDM.
*
DSNAMEN  EQU   X'02'              NUMBER DSNAME KEY PARAMETERS.
DSNAMES1 EQU   X'80'              SUBLIST DSNAME KEY.
JDSNAME1 EQU   44                 MAX LENGTH OF DSNAME
JDSNAME2 EQU   8                  MAX LENGTH OF ELEMENT NAME
JDSNAME3 EQU   8                  MAX LENGTH OF GENERATION NUMBER
JDSNAME4 EQU   X'80'              BIT FOR GENERATION NUMBER.
JDSNAME5 EQU   X'01'              BIT FOR PDS JFCB / JFCBIND1
JDSNAME6 EQU   X'02'              BIT FOR GDG  JFCB/JFCBIND1     210271
*
QNAMEN   EQU   X'01'     NUMBER OF QNAME KEY PARAMS               20002
QNAMES   EQU  X'00'     SUBLIST QNAME KEY                         20002
JQNAME1  EQU   8          MAX LENGTH OF QNAME                     20002
*                                                                 20002
DDNAMEN  EQU   X'01'              NUMBER DDNAME KEY PARAMETERS.
DDNAMES  EQU   X'00'              SUBLIST DDNAME KEY.
*
SPLITN   EQU   X'03'              NUMBER SPLIT KEY PARAMETERS.
SPLITS   EQU   X'20'              SUBLIST SPLIT KEY.
JSPLIT5  EQU   3                  MAX LENGTH OF SPLIT=N
JSPLIT6  EQU   255                MAX VALUE SPLIT=
JSPLIT8  EQU   5                  MAX LENGTH OF AVERAGE RECORD
JSPLIT9  EQU   65535              MAX VALUE FOR AVERAGE RECORD
JSPLIT10 EQU   8                  MAX LENGTH OF PRIMARY QUANTITY.
JSPLIT11 EQU   16777215           MAX VALUE FOR PRIMARY QUANTITY.
JSPLIT12 EQU   8                  MAX LENGTH OF SECONDARY QUANTITY.
JSPLIT13 EQU   16777215           MAX VALUE FOR SECONDARY QUANTITY.
*
SPACEN   EQU   X'05'              NUMBER SPACE KEY PARAMETERS.
SPACES   EQU   X'40'              SUBLIST SPACE KEY.
JSPACE06 EQU   5                  MAX LENGTH OF AVERAGE RECORD.
JSPACE07 EQU   65535              MAX VALUE FOR AVERAGE RECORD.
JSPACE08 EQU   8                  MAX LENGTH OF PRIMARY QUANTITY.
JSPACE09 EQU   16777215           MAX VALUE FOR PRIMARY QUANTITY.
JSPACE10 EQU   8                  MAX LENGTH OF SECONDARY QUANTITY.
JSPACE11 EQU   16777215           MAX VALUE FOR SECONDARY QUANTITY.
JSPACE12 EQU   8                  MAX LENGTH OF DIRECTORY QUANTITY.
JSPACE13 EQU   16777215           MAX VALUE FOR DIRECTORY QUANTITY.
JSPACE19 EQU   8                  MAX LENGTH OF QUANTITY
JSPACE20 EQU   16777215           MAX VALUE FOR QUANTITY
JSPACE21 EQU   5                  MAX LENGTH OF BEGINNING ADDRESS.
JSPACE22 EQU   65535              MAX VALUE FOR BEGINNING ADDRESS.
JSPACE23 EQU   8                  MAX LENGTH OF DIRECTORY QUANTITY
JSPACE24 EQU   16777215           MAX VALUE FOR DIRECTORY QUANTITY.
*
DISPN    EQU   X'03'              NUMBER OF DISP KEY PARAMETERS    000B
DISPS    EQU   X'00'              SUBLIST DISP KEY.
JDISP2   EQU   X'04'              BIT FOR DISP=NEW SIOT / SCTSBYT3.
JDISP4   EQU   X'01'              BIT FOR DISP=OLD SIOT / SCTSBYT3.
JDISP6   EQU   X'02'              BIT FOR DISP=MOD SIOT / SCTSBYT3.
JDISP8   EQU   X'01'              BIT FOR DISP=SHARE SIOT / SCTSBYT3.
JDISP9   EQU   X'04'              BIT FOR DISP=DELETE SIOT / SCTSDISP.
JDISP10  EQU   X'08'              BIT FOR DISP=KEEP SIOT / SCTSDISP.
JDISP11  EQU   X'10'              BIT FOR DISP=PASS SIOT / SCTSDISP.
JDISP12  EQU   X'02'              BIT FOR DISP=CATLG SIOT / SCTSDISP.
JDISP13  EQU   X'01'              BIT FOR DISP=UNCATLG SIOT / SCTSDISP.
JDISP14  EQU   JDISP2+JDISP4+JDISP6 BITS FOR NEW OLD MOD AND SHARE.
JDISP15  EQU   JDISP9+JDISP10+JDISP11+JDISP12+JDISP13 2ND OPERAND BITS.
JDISP17  EQU   JDISP9+JDISP11     BITS FOR DELETE PASS.
JDISP18  EQU   JDISP4             BITS FOR OLD AND SHARE.
*
JSTORE   EQU   X'02'              STORAGE BIT IN JFCB / JFCBIND2   892
JSTORE1  EQU   X'24'              BITS FOR PRIVATE, DELETE       A23901
JSTORE2  EQU   X'1B'              BITS FOR PASS,KEEP,CATLG,UNCATLG 892
*
DSIDN    EQU   X'02'              NUMBER OF DSID KEY PARAMETER @Y30OPSB
DSIDS    EQU   X'00'              CODE FOR NO SUBLISTS IN KEY  @Y30OPSB
DSIDLEN  EQU   X'08'              MAXIMUM LENGTH OF DSID ID..  @Y30OPSB
DSIDWORK EQU   SPLITBLK           USE JFCBX AREA TO MOVE DSID  @Y30OPSB
*                                 ID.THIS ENABLES USE OF PDT.. @Y30OPSB
SEPN     EQU   X'08'              NUMBER SEP KEY PARAMETERS.
SEPS     EQU   X'00'              SUBLIST SEP KEY.
JSEP1    EQU   0                  VALUE FOR UNCONDITIONAL BIT SET.
*
AFFN     EQU   X'01'              NUMBER AFF KEY PARAMETERS.
AFFS     EQU   X'00'              SUBLIST AFF KEY.
JAFF1    EQU   0                  VALUE FOR UNCONDITIONAL BIT SET.
*
VOLUMEN  EQU   X'04'              NUMBER VOLUME KEY PARAMETERS.
VOLUMES  EQU   X'00'              SUBLIST VOLUME KEY.
JVOLUMT1 EQU   X'A0'               FOR PRIVATE BIT                16875
JVOLUMT2 EQU   X'40'              BIT FOR VOLUME=RETAIN SIOT SCTSDISP.
JVOLUMT3 EQU   4                  MAX LENGTH VOL SEQ NUM JFCB JFCBVLSQ.
JVOLUMT4 EQU   255                MAX VALUE VOL SEQ NUM JFCBVLSQ A29152
JVOLUMT5 EQU   3                  MAX LENGTH VOL COUNT JFCB JFCBVLCT.
JVOLUMT6 EQU   255                MAX VALUE VOL COUNT JFCB JFCBVLCT.
*
LABELN   EQU   X'04'              NUMBER OF LABEL PARAMETERS       AADA
LABELS   EQU   X'00'              SUBLIST LABEL KEY.
JLABEL1  EQU   4                  MAX LENGTH OF FILE SEQUENCE NUMBER
JLABEL2  EQU   9999               MAX VALUE FOR FILE SEQUENCE NUMBER.
JLABEL3  EQU   X'08'              BIT SET FOR LABEL=NL SIOT / SCTSBYT2.
JLABEL6  EQU   4                   BIT SET FOR LABEL=SIOT/SCTSBYT2 000D
JLABEL8  EQU   X'08'              BIT SET FOR LABEL=SUL JFCB / JFCBLTYP
*                                  JFCB/JFCBIND2                   RWPW
JLABELA  EQU   X'08'              BIT SET FOR LABEL=BLP SIOT / SCTSBYT2
JLABELD1 EQU   X'FD'              USED TO TURN OFF SL DEFAULT     19200
JLABELE  EQU   X'10'              BIT FOR LABEL=AL AT SCTSBYT4    19200
JLABELF  EQU   X'48'               BIT FOR LABEL=AUL AT JFCBLTYP  M0254
JLABELF1 EQU   X'FD'              USED TO TURN OFF SL DEFAULT     19200
JLABELG  EQU   X'10'              BIT FOR LABEL=AUL AT SCTSBYT4   19200
JLABLTM  EQU   X'21'              LABEL=LTM  JFCB/JFCBLTYP       210271
*
UNITN    EQU   X'03'              NUMBER UNIT KEY PARAMETERS.
UNITS    EQU   X'00'              SUBLIST UNIT KEY.
JUNIT3   EQU   8                  MAX LENGTH OF UNIT NAME.
JUNIT4   EQU   X'04'              BIT FOR UNIT=P SIOT / SCTSBYT1.
JUNIT5   EQU   3                  MAX LENGTH OF NUMBER OF UNITS.
JUNIT6   EQU   59        MAX NUMBER OF UNITS.                      000G
JUNIT7   EQU   X'02'              BIT FOR UNIT=DEFER SIOT / SCTSBYT2.
*
DCBN     EQU   X'01'              NUMBER DCB KEY PARAMETERS.
DCBS     EQU   X'80'              SUBLIST DCB KEY
JDCB1    EQU   44                 MAX LENGTH DSNAME IN SIOT / SIOTDCBR.
*
CHKPTN   EQU   X'01'              NUMBER CHKPT KEY PARAMETERS. @Z30JPSF
CHKPTS   EQU   X'00'              SUBLIST CHKPT KEY.           @Z30JPSF
*                                                                 21009
DLMN     EQU   X'01'              NUMBER OF DLM PARAMETERS        21009
DLMS     EQU   X'00'              SUBLIST OF DLM                  21009
JDLMT1   EQU   2                  MAX LENGTH OF DLM
*
FREEN    EQU   X'01'              NUMBER FREE KEY PARAMETERS     Y02670
FREES    EQU   X'00'              SUBLIST FREE KEY               Y02670
*
DUMMYN   EQU   X'01'              NUMBER OF DUMMY PARAMETERS
DUMMYS   EQU   X'00'              SUBLISTS FOR DUMMY
*
DYNAMN   EQU   X'01'              KEY PARAMETERS
DYNAMS   EQU   X'00'              SUBLISTS FOR DYNAM
*
TERMN    EQU   X'01'              KEY PARAMETERS
TERMS    EQU   X'00'              SUBLISTS FOR TERM
*
UCSN     EQU   X'03'              NUMBER OF UCS PARAMETERS
UCSS     EQU   X'00'              SUBLISTS FOR UCS
JUCS1    EQU   4                  MAX LENGTH CHARACTER SET ID FOR UCS
JUCS2    EQU   X'40'              BIT FOR UCS=FOLD AT JFCB/JFCINTVL
JUCS3    EQU   X'10'              BIT FOR UCS=VERIFY IN JFCB/JFCINTVL
FCBN     EQU   X'02'               NUMBER FCB KEY PARAMETERS      20202
FCBS     EQU   X'00'               SUBLIST FCB                    20202
JAFCB1   EQU   4                   MAX LEN OF ID                  20202
JAFCB2   EQU   X'08'               ALIGN BIT                      20202
JAFCB3   EQU   X'04'               VERIFY BIT                     20202
BUFOFFN  EQU   X'01'               NUMBER OF BUFFER PARAMETERS    19200
BUFOFFS  EQU   X'00'              SUBLIST MASK                    19200
JFCBUFSW EQU   JFCBMASK+6         BIT TO INDICATE BUFOFF          M2050
JBUFOFF1 EQU   X'02'              BUFOFF FIELD MAX LENGTH         19200
JBUFOFF2 EQU   X'63'              BUFOFF MAX VALUE                19200
JBUFOFF3 EQU   X'80'                   JFCB BUFFER OFFSET MASK    M4321
JBUFOFF4 EQU   X'02'              TO INDICATE BUFOFF SPECIFIED    M2050
*                                                                 O0101
*                                                                 19028
OUTLIMN  EQU   X'01'              NUMBER OF PARAMETERS (OUTLIM)   19028
OUTLIMS  EQU   X'00'              SUBLISTS FOR OUTLIM (NONE)      19028
JOUTLIM1 EQU   8                  MAX. PARAMETER LENGTH JFCB/     19028
JOUTLIM2 EQU   16777215           MAX. PARAMETER VALUE  JFCB/     19028
DIAGNSN  EQU   X'01'              NUMBER DIAGNS PARAMETERS       I21042
DIAGNSS  EQU   X'00'              SUBLIST DIAGNS KEY             I21042
*                       JCT TABLE SWITCHES.
BUFINN   EQU   X'01'                   NUMBER BUFIN PARAMETERS    20002
BUFINS   EQU   X'00'                   SUBLIST BUFIN KEY          20002
JBUFINT1 EQU   15                      MAX VALUE BUFIN,OUT,MAX    20002
BUFOUTN  EQU   X'01'                   NUMBER BUFOUT PARAMETERS   20002
BUFOUTS  EQU   X'00'                   SUNLIST BUFOUT KEY         20002
BUFMAXN  EQU   X'01'                   NUMBER BUFMAX PARAMETERS   20002
BUFMAXS  EQU   X'00'                   SUBLIST BUFMAX KEY         20002
BUFSIZEN EQU   X'01'                   NUMBER BUFSIZE PARAMETERS  20002
BUFSIZES EQU   X'00'                   SUBLIST BUFSIZE KEY        20002
JBUFSIZE EQU   65535                   MAX VALUE BUFSIZE          20002
PCIN     EQU   X'02'                   NUMBER PCI PARAMETERS      20002
PCIS     EQU   X'00'                   SUBLIST PCI KEY            20002
JPCI1    EQU   X'20'                   A-FIRST PARAMETER          20002
JPCI2    EQU   X'10'                   A-SECOND PARAMETER         20002
JPCI3    EQU   X'08'                   N-FIRST PARAMETER          20002
JPCI4    EQU   X'04'                   N-SECOND PARAMETER         20002
JPCI5    EQU   X'02'                   R-FIRST PARAMETER          20002
JPCI6    EQU   X'01'                   R-SECOND PARAMETER         20002
JPCI7    EQU   X'80'              X-FIRST PARAMETER              Y01948
JPCI8    EQU   X'40'              X-SECOND PARAMETER             Y01948
RESERVEN EQU X'02'                NUMBER RESERVE PARAMETERS      Y02668
RESERVES EQU   X'00'                   SUBLIST RESERVE KEY        20002
JRESERV1 EQU   3                       MAX LENGTH INTEGER-RESERVE 20002
JRESERV2 EQU   255                     MAX VALUE INTEGER-RESERVE  20002
THRESHN  EQU   X'01'                   NUMBER THRESH PARAMETERS   20002
THRESHS  EQU   X'00'                   SUBLIST THRESH KEY         20002
JTHRESHT EQU   100                     MAX VALUE THRESH           20002
AMPN     EQU   X'15'              AMP PARAMETER EQUATES FOR KBT  Y01113
AMPS     EQU   X'80'                                             Y01113
SYSINCTN EQU   X'01'               NUMBER OF PARMS ALLOWED       Y02668
SYSINCTS EQU   X'00'               SUBLISTS ALLOWED FOR SYSIN CT Y02668
JOBFAILA EQU   JCT+JCTJSTAT-INJMJCT BYTE FOR JOB FAIL SWITCH.
JBLBSW   EQU   JJCT2              BIT FOR JOBLIB SWITCH
*                       DICTIONARY INDICATOR SWITCHES
ABSTR    EQU   JDICTI5            ABSTR BIT.
DCBCNT   EQU   X'30'              CONTROL BYTES FOR DCB MINOR PDT
DCBINIT  EQU   X'00'              INDICATE CLEAR BYTE FOR DCB MINORS
* THE FOLLOWING ARE BIT SETTINGS FOR DDSWA FLAG BYTE IN DWA    @ZM44657
DSDUMSW  EQU   128                DSNAME/DUMMY SWITCH
*
DDSUBSW  EQU   64                SUBSYS KEYWORD PROCESSED      @ZM44657
*                                                                 M0491
DDSPSW   EQU   32                SWITCH FOR SPACE KEYWORD PRESENT M0491
DDUNSW   EQU   16                     UNIT=(,,,AFF=DDNAME,,)      M0491
DSSYSSW  EQU   8                  OVERRIDE DUMMY AND DYNAM        20029
* END OF BIT SETTINGS FOR DDSWA FLAG BYTE IN DWA               @ZM44657
SUBPASS  EQU   INTKEY4           'PASS SUBSTITUTED' SECONDARY MSG 19874
SUBKEEP  EQU   INTKEY5           'KEEP SUBSTITUTED' SECONDARY MSG 19874
DWRNMSG  EQU   DDWAA              1 BYTE FOR WARNING MSG CODES     AABA
DWRNKEY  EQU   DDWAA+1            WARNING SECONDARY MSG CODE       AABA
HIOFF    EQU   X'7F'             TO TURN OFF HIGH ORDER BIT      A27935
NUMBYTE  EQU   TNUM1+3     POINTS TO NUM SUBPARAMS THIS KEYWORD  A39041
SCTSPMNT EQU   4                   PARALLEL MOUNT BIT FOR SIOT   Y02668
SIOTDREF EQU 128                   DCB REFERBACK WITHIN        @ZA06978
*                                  STEP - FOR SIOT             @ZA06978
ATSIGN   EQU   X'7C'       ATSIGN FOR MOVE INTO UNIQUE NAME.     Y02113
IEFVDA   CSECT                                                   A34497
* A-252370-252510,252900, C-337915                             @ZA01890
* A-040370,378204-378264  C-376884                             @YA00900
* D-600800                                                     @ZA02144
* A-140659,140719                                              @ZA06978
* CODE ADDED TO DCB KEYWORD PROCESSING ROUTINE                 @ZA06978
* CODE CHANGED IN REF KEYWORD PROCESSING ROUTINE               @ZA06978
* CODE ADDED TO AND CHANGED IN SYSOUT KEYWORD                  @ZA07483
*  PROCESSING ROUTINE                                          @ZA07483
* ADD CODE AFTER LABEL-CLEAN02A                                @ZA07503
* ADDED LABEL-CLEAN02B                                         @ZA07503
* CHANGED CODE AFTER LABEL-CLEAN02A                            @ZA07503
* DELETED TWO LINES OF CODE AFTER LABEL 'SERP'                 @ZA08159
* ADDED CODE AFTER LABEL CLEAN015                              @ZA08690
* ADDED CODE AFTER LABEL SERP22                                @ZA08164
* ADDED CODE TO SYSOUT KEYWORD ROUTINE                         @ZA08756
* ADDED CODE TO UNIT KEYWORD ROUTINE                           @ZA08746
* ADDED CODE TO AFF KEYWORD ROUTINE                            @ZA08746
* ADDED CODE TO SYSOUT KEYWORD ROUTINE                         @ZA10112
* ADDED CODE TO CONVERT SUBALLOC TO NORMAL SPACE REQUEST       @ZA10487
* ADDED CODE AFTER LABEL REFP01                                @ZA10649
* ADDED CODE AFTER LABEL DSNP011 AND EQU FOR ERMSG27           @ZA14270
* ADDED CODE AFTER LABEL DDP                                   @ZA14276
* ADDED CODE TO SYSOUT KEYWORD ROUTINE                         @ZA15012
* ADDED CODE AFTER LABEL SUB08                                 @ZA15344
* ADDED CODE AFTER LABEL DCBP05                                @ZA15388
* ADDED CODE AFTER LABEL DCBP02                                @ZA16387
* CHANGED FUNCTION BYTE IN PDT FOR DEST                        @ZA16418
* ADDED CODE AFTER LABEL DSNAMEP                               @ZA16056
* CHANGED PDT FUNCTION BYTE FOR SYSOUT 3RD POSITION            @ZA20550
* ADDITION TO PDT FOR DSID KEYWORD                             @ZA20610
* CHANGED PDT FOR RECFM KEYWORD                                @ZA24607
* ADDED CODE IN EXPDT ROUTINE                                  @ZA27071
* ADDED CODE TO SER KEYWORD ROUTINE                            @ZA28079
* ADDED CODE TO REF KEYWORD ROUTINE                            @ZA31245
* CHANGED MASK AND BRANCH VALUES AT DDP01                      @ZA32059
         BALR  RB,DD0             ESTABLISH ADDRESSABLITY.
         USING *,RB,R7     BASE REGS                               AACA
VDA1     DS    0H                                                  AACA
*****************************************************************Y02668
* MODULE TRACE CODE - FOR TESTING.                               Y02668
         L     RF,TRACEV           LOAD TRACE RTNE ADDR.         Y02668
         BALR  RE,RF               ENTER MOD ID IN TRACE RECORD. Y02668
TRACEV   DC    V(TRACE)            TRACE RTNE ADDR.              Y02668
         DC    C'VDA '             MOD ID USED BY TRACE.         Y02668
* TRACE RETURNS HERE.                                            Y02668
*****************************************************************Y02668
         L     R7,DVDA1           BASE                             AACA
         B     DAHEADER           TRANSFER TO DA HEADER ROUTINE
DVDA1    DC    A(VDA1+4096)         VALUE FOR 2ND BASE REG         AACA
         MODID  BR=NO                                          @G24LPSJ
         DC    C'SU32'            FUNCTION ID                  @G32HPPJ
*        DC    C'01'              LEVEL # (PROTECT)            @G32HPPJ
*        DC    C'02'              INTER STEP REFERBACK TO DD   @ZA15388
*                                 WITH DCB=DSNAME IS VALID     @ZA15388
*        DC    C'03'              DCB REFERBACK COPIES FUNC    @ZA16387
*                                 INFORMATION                  @ZA16387
*        DC    C'04'              ALLOW ANY CHARACTER IN FIRST
*                                 BYTE OF DEST PARAMETER       @ZA16418
*        DC    C'05'              JCL ERROR IF VTOC NAME IN JCL@ZA16056
*        DC    C'06'              JCL ERROR IF SYSOUT FORMS IS NOT
*                                 ALPHA/NUMERIC OR NATIONAL    @ZA20550
*        DC    C'07'  TURN ON SIOTDSID FOR DSID KEYWORD        @ZA20610
*                     REMOVE INVALID PARMS IN RECFM PDT        @ZA24607
*        DC    C'08'  TURN ON JFCBEXP IF EXPDT SPECIFIED       @ZA27071
*        DC    C'09'  MERGE SU4,10,16 CODE TO REL 037 PTF      @ZA27750
*        DC    C'10'  CHECK FOR FIRST POSITIONAL PARM IN SER   @ZA28079
*        DC    C'11'  CHECK FOR REF=*, ERROR                   @ZA31245
         DC    C'12'  CHECK FOR JOBLIB IN CATALOGED PROC       @ZA32059
         EJECT                                                 @G24LPSJ
*              **************************************************
*              *                                                *
*              *                  HEADER ROUTINE                *
*              *                                                *
*              *        REGISTER USAGE.                         *
*              *                                                *
*              *             RC INTERPRETOR WORK AREA.          *
*              *             RB BASE FOR DA ROUTINE.            *
*              *             RA DA WORK AREA.                   *
*              *             R9 VCON TO GET KEY.                *
*              *             R8 VCON TO TEST & STORE.           *
*              *             R7 SECOND BASE REG                 *  AACA
*              *             R6 VCON TO Q MANAGER.              *
*              *             R5 POINTER TO REMOTE PARAMETER     *
*              *                  LIST OF Q MANAGER.            *
*              *             R4 POINTER TO PARAMETER DESCRIPTOR.*
*              *                  TABLE.                        *
*              *             R3 POINTER TO LENGTH BYTE IN TEXT. *
*              *             R2 LENGTH VALUE OF LENGTH BYTE.    *
*              *                                                *
*              **************************************************
         SPACE 2
DAHEADER DS    0H                 INITIALIZE DA ROUTINE
         L     RA,CTRLWAP         ESTABLISH ADDRESSABLITY TO DA WORK.
         XC    DWA(LDWA),DWA      ZERO DA WORK AREA
         XC    SIOT(JFCB-SIOT),SIOT  ZERO SIOT
         XC    JFCB(JFCBX-JFCB),JFCB ZERO JFCB
         XC    JFCBEX(L'JFCBEX),JFCBEX   ZERO JFCBE IN LWA...  @Z40MPTH
         LA    R2,SIOT                                           Y02668
         ST    R2,IWASIOTP                                       Y02668
         LA    R2,JFCB                                           Y02668
         ST    R2,IWAJFCBP                                       Y02668
         L     R6,TEXTBUFP         ADDRESSABILITY FOR            Y02668
         L     R6,DIEFVHQ         LOAD VCONS                       AACA
         LM    R8,R9,DIEFVGT                                       AACA
*                                  R6= ADDR OF QUEUE MANAGER       AACA
*                                  R7= SECOND BASE REG             AACA
*                                  R8= ADDR OF TEST & STORE RTN    AACA
*                                  R9= ADDR OF GET KEY RTN         AACA
         LA    R5,CLEANUP         GET ADDRESS OF CLEANUP ROUTINE
         ST    R5,TCLEANUP        SAVE ADDRESS FOR TEST AND STORE.
         L     R5,ADABTABL        GET ADDRESS OF BRANCH TABLE.
         ST    R5,TBRANCH         SAVE ADDRESS FOR TEST AND STORE
         L     R5,QPARM+QMPCL-QMNAM GET REMOTE PARM ADDRESS FOR Q MAN.
         BALR  RE,R9              GO TO GET KEY
         EJECT
*              **************************************************
*              *                                                *
*              *       GENERAL KEYWORD PROCESSING ROUTINE       *
*              *                                                *
*              **************************************************
         SPACE 1
********* ENTRY FOR EACH KEYWORD LISTED.POSITIONALS ARE PROCESSED
********* BY GOING TO TEST AND STORE AND GET KEY UNTIL A NEW KEY
********* IS ENCOUNTERED.
         SPACE 2
DDNORM   DS    0H                 ENTRY.
SOWAP    DS    0H                 SOWA.
RKPP     DS    0H                 RKP.
NTMP     DS    0H                 NTM.
NCPP     DS    0H                 NCP.
LIMCTP   DS    0H                 LIMCT.
KEYLENP  DS    0H                 KEYLEN.
INTVLP   DS    0H                 INTVL.
CYLOFLP  DS    0H                 CYLOFL.
BUFRQP   DS    0H                 BUFRQ.
BUFNOP   DS    0H                 BUFNO.
BUFOFFP  DS    0H                      BUFOFF.                    19200
BUFLP    DS    0H                 BUFL.
BLKSIZEP DS    0H                 BLKSIZE.
VOLUMEP  DS    0H                 VOLUME.
LABELP   DS    0H                 LABEL.
DISPP    DS    0H                 DISP.
BURSTP   DS    0H                                              @Z40MPTH
PROTECTP DS    0H                 PROTECT.                     @G32HPPJ
GNCPP    DS    0H
BUFSIZEP DS    0H                      BUFSIZE                    20002
THRESHP  DS    0H                      THRESH                     20002
QNAMEP   DS    0H    QNAME                                        20002
OUTLIMP  DS    0H                 OUTLIM.                         19028
DIAGNSP  DS    0H                 DIAGNS.                        I21042
IPLTXIDP DS    0H                 IPLTXID.                       Y01948
FRIDP    DS    0H                 FRID                           Y02670
CHKPTP   DS    0H                 CHKPT                        @Z30JPSF
         BALR  RE,R8              GO TO TEST & STORE
         BALR  RE,R9              GO TO GET KEY.
         B     DDNORM             LOOP BACK.
***********************************************************************
*
*
*                  SPLIT PROCESSOR
*
*
*
***********************************************************************
*
*
*                  EQUATES
*
*
***********************************************************************
JFCBPRIM EQU   JFCB+JFCBPQTY-INFMJFCB                            Y02661
JFCBSECQ EQU   JFCB+JFCBSQTY-INFMJFCB                            Y02661
JFCBCNTR EQU   JFCB+JFCBCTRI-INFMJFCB                            Y02661
JFCBDBLK EQU   JFCB+JFCBDRLH-INFMJFCB                            Y02661
SPLITPRM EQU   SPSAV+SPLITPQY-SPLITBLK                           Y02661
SPLITSEC EQU   SPSAV+SPLITSQY-SPLITBLK                           Y02661
SPLITTTR EQU   SPSAV+SPLITMTR-SPLITBLK                           Y02661
PARMBYTE EQU   SWD
LASTINDC EQU   4
***********************************************************************
SPLITP   DS    0H                                                Y02661
         CLI   DD0(R3),DD0              PARM LENGTH = ZERO?      Y02661
         BZ    SPLIT04                  GET NEXT KEY             Y02661
SPLIT01  DS    0H                                                Y02661
         XC    JFCBX(DD20),JFCBX        CLEAR TEMP WORKAREA      Y02661
         BCTR  R3,R0                    POINT TO COUNT FIELD     Y02661
         CLI   DD0(R3),DD1              PARM COUNT = ONE         Y02661
         LA    R3,DD1(R3)               RESTORE POINTER          Y02661
         BE    SPLIT015                 IF ONE PARM NOT MODEL    Y02661
***********************************************************************
*
*
*   THE FOLLOWING HANDLES A MODEL REQUEST
*
***********************************************************************
         XC    SPSAV(DD20),SPSAV        CLEAR SPLIT WORK AREA    Y02661
         MVC   SPLITTTR(DD3),TSIOT      SAVE MODEL SIOT TTR      Y02661
         MVI   SPSAV+SPLITBY2-SPLITBLK,SPLITMDL INDICATE MODEL   Y02661
         B     SPLIT02                                           Y02661
*****************************************************************Y02661
*                                                               *Y02661
*  THE FOLLOWING PROCESSES A SIOT WHICH IS NOT A MODEL          *Y02661
*                                                               *Y02661
*****************************************************************Y02661
SPLIT015 DS    0H                                                Y02661
         MVI   SPSAV+SPLITBY2-SPLITBLK,SPLITNML NOT MODEL IND    Y02661
         MVC   SIOT+SIOTVRSB-INDMSIOT(DD3),SPLITTTR MDL SIOT TTR Y02661
         OI    SIOT+SCTSBYT3-INDMSIOT,SCTVREF SET VOLREF IN STP YM05425
         OI    SIOT+SCTSBYT2-INDMSIOT,SCTVOLAF  SET VOL AFFINITY Y02661
         MVI   SIOT+SCTUTYPE-INDMSIOT,DDBLANK BLANK UNIT TYPE    Y02661
         MVC   SIOT+SCTUTYPE-INDMSIOT+1(DD7),SIOT+SCTUTYPE-INDMSIOT
**********************************************************************
SPLIT02  DS    0H                                                Y02661
         BALR  RE,R8                    TEST AND STORE           Y02661
**********************************************************************
         NI    PARMBYTE,255-LASTINDC   TURN OFF LAST PARM INDC   Y02661
         LM    R0,R1,TNUM              PARAMETER COUNT           Y02661
         CLR   R0,R1                   ANY MORE PARMS            Y02661
         BNE   MORE                    YES MORE PARMS            Y02661
         LM    R0,R1,TNUM+8            SUBPARAMETER COUNT        Y02661
         CLR   R0,R1                   ANY MORE SUBPARMS         Y02661
         BNE   MORE                    YES MORE SUBPARMS         Y02661
         OI    PARMBYTE,LASTINDC       INDICATE LAST PARM        Y02661
MORE     DS    0H                                                Y02661
**********************************************************************
         TM    PARMBYTE,LASTINDC        LAST PARM ON KEYWORD     Y02661
         BO    SPLITC00                 PROCESS SPLIT KEYWORD    Y02661
SPLIT04  BALR  RE,R9                    GET NEXT PARM            Y02661
         B     SPLIT02                  PROCESS IT               Y02661
***********************************************************************
SPLITC00 DS    0H                                                Y02661
         TM    SPSAV+SPLITBY2-SPLITBLK,SPLITMDL SPLIT DD         Y02661
         BM    SPLITC20                 NOT SPLIT SUB DD         Y02661
         MVC   SPSAV(DD11),JFCBX        MOVE MODEL INFO TO SAVE  Y02661
SPLITC20 DS    0H                                                Y02661
         MVC   SPLITWRK(DD3),SPLITPRM  TOTAL SPACE FOR SPLIT DDS Y02661
         BAL   RE,SPLITC40             CALCULATE PRIM.SPACE      Y02661
         MVC   JFCBPRIM(DD3),SPLITWRK  MOVE PRIMARY SPACE        Y02661
         TM    SPSAV+SPLITBYT-SPLITBLK,SPLITCYL BLOCK REQUEST    Y02661
         BM    SPLITC30                BRANCH IF BLOCK           Y02661
         MVC   SPLITWRK(DD3),SPLITSEC  TOTAL SECONDARY SPACE     Y02661
         BAL   RE,SPLITC40             CALCULATE SEC. SPACE      Y02661
         MVC   JFCBSECQ(DD3),SPLITWRK  MOVE SECONDARY SPACE      Y02661
         B     SPLITC60                EXIT SPLIT                Y02661
SPLITC30 DS    0H                                                Y02661
         MVC   JFCBSECQ(DD3),SPLITSEC  MOVE SEC SPACE FOR BLOCK  Y02661
         B     SPLITC60                EXIT SPLIT                Y02661
***********************************************************************
SPLITWRK EQU   JFCBX+SPLITWKA-SPLITBLK+1 SPLIT WORK AREA         Y02661
***********************************************************************
SPLITC40 DS    0H                                                Y02661
         SR    R0,R0                    CLEAR REG 0              Y02661
         SR    R1,R1                    CLEAR REG 1              Y02661
         IC    R1,JFCBX+SPLITTRK-SPLITBLK   GET % OR NO. TRACKS  Y02661
         TM    SPSAV+SPLITBYT-SPLITBLK,SPLITCYL BLOCK REQUEST    Y02661
         BM    SPLIT05                    PROCESS BLK REQUEST    Y02661
         OI    JFCBCNTR,JFCBTRK           INDICATE TRK REQUEST   Y02661
         MH    R1,SPLITWRK+1            MULTIPLY TRKS TIMES CYL  Y02661
         B     SPLIT06                                           Y02661
HUNDRED  DC    F'100'                   DIVIDE CONSTANT          Y02661
**********************************************************************
*
*     PROCESS BLOCK REQUEST
*
***********************************************************************
SPLIT05  MVC   JFCBDBLK(DD3),SPSAV+SPLITBLN-SPLITBLK AVG BLK LEN Y02661
         OI    JFCBCNTR,JFCBAVR         INDIC AVG BLK REQ        Y02661
         MH    R1,SPLITWRK+1            CAL. NO. OF BLOCKS       Y02661
         D     R0,HUNDRED              AND CONVERT %             Y02661
***********************************************************************
*
SPLIT06  ST    R1,JFCBX+SPLITWKA-SPLITBLK  STORE VALUE           Y02661
         BR    RE                  RETURN VALUE                  Y02661
SPLITC60 DS    0H                                                Y02661
         B     SPLIT04
         EJECT
*              **************************************************
*              *                                                *
*              *   AFF AND SEP KEYWORD PROCESSING ROUTINE.      *
*              *                                                *
*              **************************************************
         SPACE 1
********* AFF AND SEP MAJOR KEYWORD - FOR CHANNEL SEPARATION AND
********* AFFINITY SPECIFICATION.
********* SEP MINOR KEYWORD FOR UNIT SEPARATION                 YM01578
         SPACE 2
AFFP     DS    0H                 PROCESS AFF KEY.
SEPP     DS    0H                 PROCESS SEP KEY.
SEPMP    DS    0H                                               YM01578
         LTR   R2,R2               IS REQ. PARM PRESENT           19432
         BZ    SPACE10             NO, PUT OUT ERROR MSG.       YM01578
SEPLOOP  DS    0H                                               YM01578
         BALR  RE,R9              GO TO GET KEY.
         B     SEPLOOP       TO PASS THRU SEP DATA TO NEXT KEY  YM01578
*                                                                 M0491
***********************************************************************
*                                                                 M0491
*                     UNIT  KEYWORD  PROCESSING  ROUTINE          M0491
*                                                                 M0491
***********************************************************************
UNITP    DS    0H                PROCESS UNIT KEY                 M0491
         L     RE,TEXTBUFP       LOAD TEXT STRING POINTER      @ZA08746
         USING TEXT,RE           SET ADDRESSABILITY TO PREFIX  @ZA08746
         TM    STRDINDC,DTXSYOUT WAS SYSOUT SPECIFIED?         @ZA08746
         BO    UNITP02           YES, IGNORE UNIT PARAMETER    @ZA08746
         DROP  RE                RELEASE THE REGISTER          @ZA08746
         CLI   TNUM+3,DD0        IS NUMBER BYTE = 0               M0491
         BE    UNITP01           IF = 0, TAKE BRANCH              M0491
         OI    DDSWA,DDUNSW      SET BIT SO UNITAFF MINOR KEYWORD M0491
*                                PROCESSOR CAN DETECT ERROR       M0491
*                                (POSITIONAL PARAMETERS ARE       M0491
*                                INVALID WITH UNIT=AFF=)          M0491
UNITP01  DS    0H                                                 M0491
         BALR  RE,R8             GO TO TEST & STORE ROUTINE       M0491
*                                TEST AND STORE WILL NULLIFY THE
*                                UNIT KEY IF NULL PARAMETER PASSED.
         BALR  RE,R9             GO TO GET KEY ROUTINE            M0491
         B     UNITP01           LOOP BACK TO TEST & STORE UNTIL  M0491
*                                ALL POSITIONALS ARE PROCESSED,   M0491
*                                AND A NEW KEY IS FOUND AND       M0491
*                                A BRANCH TAKEN                   M0491
UNITP02  BALR  RE,R9             GO TO KEY ROUTINE             @ZA08746
         B     UNITP02           LOOP TO GET KEY UNTIL ALL     @ZA08746
*                                POSITIONALS ARE PROCESSED AND @ZA08746
*                                A NEW KEY IS FOUND AND        @ZA08746
*                                ANOTHER BRANCH IS TAKEN       @ZA08746
         EJECT
*              **************************************************
*              *                                                *
*              *         DCB KEYWORD PROCESSING ROUTINE         *
*              *                                                *
*              **************************************************
         SPACE 2
DCBP     DS    0H                 PROCESS DCB KEY.
         CLI   DD0(R3),DD0        IS LENGTH BYTE ZERO
         BC    NOT-ZERO,DCBP01    NO TRANSFER.
         BALR  RE,R9              YES GO TO GET KEY.
DCBP01   DS    0H                 ENTER
         TM    SWI,IWADDNM        IS THERE DDNAME= THIS CARD       AABA
         BO    DCBP08             TRANS YES - ERROR                AABA
         CLI   DD1(R3),DDASTER    IS OPERAND AN ASTERICK
         BC    EQUAL,DCBP02       YES TRANSFER.
         L     RE,TNUMPX          LOAD CURRENT NUMBER POINTER     M0377
         CLI   DD0(RE),DD1        ARE THERE POSITIONAL PARMS      M0377
         BNE   DCBP01A            NO - BRANCH                     M0377
         CLI   DD1(RE),DD129      TRANSFER IF MORE THAN ONE       M0377
         BH    DCBP08             POSITIONAL SUBPARAMETER         M0377
DCBP01A  DS    0H                                                 M0377
         BAL   RE,DSNTP           GO PROCESS DSNAME TABLE        Y02668
         BALR  RE,R9              GO TO GET KEY                   M0377
DCBP02   DS    0H                 ENTER.
*
*  IF ASTERISK IS FOLLOWED BY PERIOD ( *.DD ) WHICH INDICATES
*      A REFERBACK, THE LENGTH FIELD MUST HAVE A LENGTH OF ONE.
*    IF NOT LENGTH OF ONE THEN PERIOD MUST BE MISSING.
*
         CLI   DD0(R3),X'01'                                      18768
         BNE   DCBP10                                             18768
         BCTR  R3,R0              DECREMENT TEXT POINTER
         TM    DD0(R3),DD128      IS HIGH ORDER BIT ON.
         BZ    DCBP06             YES TRANSFER ERROR.
         BAL   RE,INTRSTEP         GO CHECK TYPE OF REFERBACK  @ZA06978
*   RETURN FOR WITHIN STEP REFERBACK                           @ZA06978
         OI    SIOT+SIODDSNL-INDMSIOT,SIOTDREF                 @ZA06978
*   RETURN FOR INTER STEP REFERBACK                            @ZA06978
         BALR  RE,R9              GO TO GET KEY.
         BAL   RE,DSRTN            GO TO DICTIONARY SEARCH RTN     AACA
         MVI   QPARM+QMPOP-QMNAM,QMREAD SET READ
         MVI   QPARM+QMPNC-QMNAM,DD1 SET FOR ONE READ
         LA    RF,JFCBX           GET ADDRESS FOR JFCB
         ST    RF,DD0(R5)         PUT ADDRESS IN REMOTE PARM LIST
         MVC   DD4(DD3,R5),DD5(R1) PUT TTR OF JFCB IN REMOTE PARM LIST.
         BALR  RE,R6              GO TO Q MANAGER
         MVC   JFCB+JFCFCBID-INFMJFCB(DD4),JFCBX+JFCFCBID-INFMJFCB
*              MOVE JFCB FCB IMAGE INTO JFCB BEING BUILT....    YA61281
         MVC   JFCB+JFCBUFNO-INFMJFCB(JFCBNTCS-JFCBUFNO),JFCBX+JFCBUFNO1
               -INFMJFCB          MOVE DCB PARM.
         MVC   JFCB+JFCFUNC-INFMJFCB(DD1),JFCBX+JFCFUNC-INFMJFCB
*                                 MOVE FUNC INFORMATION        @ZA16387
         TM    JFCBX+JFCBUFSW-INFMJFCB,JFCBBUFF WAS BUFOFF CODED  M2050
*              BIT MUST BE TESTED DUE TO JFCBOTTR CONFLICT IN PCP M2050
*              IN MFT AND MVT THIS JFCBOTTR FIELD IS NEVER FILLED M2050
*              IN BEFOR THE READER FINISHES PROCESSING            M2050
*              ALL STEPS OF A JOB                                 M2050
         BZ    DCBP05             IF NOT DON'T MERG IT            M2050
         MVC   JFCB+JFCBUFOF-INFMJFCB(JFCBFLSQ-JFCBUFOF),JFCBX+JFCBUFOFX
               -INFMJFCB          MOVE BUFOFF DCB PARM            M2050
         OI    JFCB+JFCBUFSW-INFMJFCB,JFCBBUFF INDICATE BUFOFF    M2050
DCBP05   EQU   *                                                  M2050
         MVI   QPARM+QMPOP-QMNAM,QMREAD SET READ
         MVI   QPARM+QMPNC-QMNAM,DD1 SET READ FOR ONE
         LA    RF,JFCBX           GET ADDRESS FOR SIOT
         ST    RF,DD0(R5)         PUT ADDRESS IN REMOTE PARM LIST.
         MVC   DD4(DD3,R5),DD2(R1) PUT TTR OF SIOT IN REMOTE PARM LIST
         BALR  RE,R6              GO TO Q MANAGER
         MVC   SIOT+SIODSNTE-INDMSIOT(DD2),JFCBX+SIODSNTE-INDMSIOT
*              MOVE THE DISPLACEMENT INTO DSNT INTO NEW SIOT.   YA02512
         CLI   JFCBX+SIODDSNL-INDMSIOT,DD0  IF REFERBACK       @ZA15388
         BE    DCBP03              IS NOT DCB = DSNAME,BRANCH  @ZA15388
         TM    SIOT+SIODDSNL-INDMSIOT,SIOTDREF   IS INTRA STEP @ZA15388
         BO    DCBP03             BRANCH TO SKIP DSNT PROCESS  @ZA15388
         MVC   SIOT+SIODDSNL-INDMSIOT(DD1),JFCBX+SIODDSNL-INDMSIOT
*              COPY LENGTH OF NAME INTO NEW SIOT               @ZA15388
         STM   R2,R3,DDWA7        SAVE LENGTH AND PTR TO LENGTH@ZA15388
         OI    SRCHSW1,SRCHF2     INDICATE SCT SEARCH          @ZA15388
         LA    RE,DD3             WANT TO BACK UP 3 BYTES      @ZA15388
         SR    R3,RE              BACK UP TO SUBPARM # BYTE    @ZA15388
         IC    R2,0(R3)           GET SUBPARM NUMBER           @ZA15388
         BCTR  R2,R0              DECREMENT COUNT              @ZA15388
         STC   R2,0(R3)           TEMPORARILY ALTER TEXT       @ZA15388
         LM    R2,R3,DDWA7        RESTORE REGISTERS            @ZA15388
         BAL   RE,DSRTN           GO TO VGS                    @ZA15388
         LA    RE,DD3             WANT TO BACK UP 3 BYTES      @ZA15388
         SR    R3,RE              BACKUP TO SUBPARM # BYTE     @ZA15388
         IC    R2,DD0(R3)         GET SUBPARM NUMBER           @ZA15388
         LA    R2,DD1(R2)         ADD 1 TO RESTORE ORIGINAL #  @ZA15388
         STC   R2,DD0(R3)         CHANGE TEXT BACK TO ORIGINAL @ZA15388
         LM    R2,R3,DDWA7        RESTORE REGS                 @ZA15388
         MVI   QPARM+QMPOP-QMNAM,QMREAD  SET READ              @ZA15388
         LA    RF,JFCBX           GET ADDR FOR SCT             @ZA15388
         ST    RF,DD0(R5)         PUT ADDR IN REMOTE PARM LIST @ZA15388
         MVC   DD4(DD3,R5),DD2(R1)  TTR OF SCT IN REMOTE LIST  @ZA15388
         BALR  RE,R6              GO TO Q MANAGER TO READ SCT  @ZA15388
         MVI   QPARM+QMPOP-QMNAM,QMREAD  SET READ              @ZA15388
         LA    RF,JFCBX           GET ADDR OF READ IN AREA     @ZA15388
         ST    RF,DD0(R5)         PUT ADDR IN REMOTE PARM LIST @ZA15388
         MVC   DD4(DD3,R5),JFCBX+SCTADSTB-INSMSCT  PUT TTR OF  @ZA15388
*                                 DSNT IN REMOTE PARM LIST     @ZA15388
         BALR  RE,R6              GO TO Q MNGR TO READ DSNT    @ZA15388
DCBP053  DS    0H                 IS THIS CORRECT DSNT?        @ZA15388
         CLC   SIOT+SIODSNTE-INDMSIOT(DD2),DSNTLEN COMPARE 168 @ZA15388
         BL    DCBP055            IF LESS THAN 168 TO COPY NAME@ZA15388
         XR    RE,RE              CLEAR REGISTER               @ZA15388
         LH    RE,SIOT+SIODSNTE-INDMSIOT  OBTAIN OFFSET        @ZA15388
         SH    RE,DSNTLEN         SUBTRACT 168 FROM OFFSET     @ZA15388
         STH   RE,SIOT+SIODSNTE-INDMSIOT STORE ADJUSTED OFFSET @ZA15388
         MVI   QPARM+QMPOP-QMNAM,QMREAD SET READ               @ZA15388
         LA    RF,JFCBX           GET ADDR OF READ IN AREA     @ZA15388
         ST    RF,DD0(R5)         STORE IN REMOTE PARM LIST    @ZA15388
         MVC   DD4(DD3,R5),JFCBX+DSNTNSVA-DSNTABLE             @ZA15388
*                                 GET TTR OF NEXT DSNT         @ZA15388
         BALR  RE,R6              GO TO Q MNGR TO READ DSNT    @ZA15388
         B     DCBP053            CHECK FOR CORRECT DSNT       @ZA15388
DCBP055  DS    0H                 THIS IS THE CORRECT DSNT     @ZA15388
         LA    RF,JFCBX+DSNENTRY-DSNTABLE GET ADDR OF 1ST ENTRY@ZA15388
         XR    R3,R3              CLEAR REGISTER               @ZA15388
         LH    R3,SIOT+SIODSNTE-INDMSIOT OBTAIN OFFSET TO ENTRY@ZA15388
         AR    R3,RF              R3 HAS ADDR OF NAME          @ZA15388
         BCTR  R3,R0              R3 HAS ADDR WHERE LENGTH     @ZA15388
*                                 BYTE MUST BE MOVED           @ZA15388
         MVC   DD0(DD1,R3),SIOT+SIODDSNL-INDMSIOT  MOVE LENGTH @ZA15388
         XR    R2,R2              CLEAR REGISTER               @ZA15388
         IC    R2,DD0(R3)         R2 HAS LENGTH VALUE          @ZA15388
         BAL   RE,DSNTP           PROCESS DSNT                 @ZA15388
         LM    R2,R3,DDWA7        RESTORE REGISTERS            @ZA15388
         B     DCBP04             GO TO GET NEXT KEY           @ZA15388
DCBP03   DS    0H                                              @ZA15388
         MVC   SIOT+SIODDSNL-INDMSIOT(DD1),JFCBX+SIODDSNL-INDMSIOT
*              MOVE DCB DSNAME LENGTH TO NEW SIOT               YA02512
DCBP04   DS    0H                 ENTER
         BALR  RE,R9              GO TO GET KEY.
         B     DCBP04             LOOP BACK.
DCBP06   DS    0H                 ENTER
         MVI   MSGSEC,ERMES43     IMPROPER QUALIFICATION.
         B     CLEANUP            GO TO CLEANUP.
DCBP08   DS    0H                                                  AABA
         MVI   MSGSEC,ERMES40     EXCESSIVE PARAMETER              AABA
         B     CLEANUP                                             AABA
DCBP10   DS    0H                                                 18769
         MVI   MSGSEC,ERMES45                                     18768
         B     CLEANUP                                            18768
DSNTLEN  DC    H'168'    LENGTH OF DATA SET NAME AREA          @ZA15388
*                        IN DSNT                               @ZA15388
         EJECT
*              **************************************************  AAAA
*              *                                                *  AAAA
*              *    LRECL PROCESSING RTN                        *  AAAA
*              *                                                *  AAAA
*              **************************************************  AAAA
         SPACE 1
********* SPECIAL PROCESSING FOR LRECL=X SPECIFICATION.
         SPACE 2
LRECLP   DS    0H                                                  AAAA
         CLI   1(R3),JLRECLX      IS THIS THE EXCEPTION PARAMETER  AAAA
         BNE   DDNORM             NO PROCESS AS NORMAL             AAAA
         CLI   0(R3),JLRECLXN      ONE CHARACTER                   AAAA
         BNE   DDNORM              NO -TRANSFER                    AAAA
         XC   JFCB+JFCLRECL-INFMJFCB(DD2),JFCB+JFCLRECL-INFMJFCB
*              CLEAR THE TWO BYTE LRECL INDICATOR FIELD.
         OI    JFCB+JFCLRECL-INFMJFCB,DD128  SET HIGH ORDER BIT ON.
         BALR  RE,R9              GO TO GET KEY                    AAAA
         EJECT
*              **********************************************
*              *                                            *
*              *    GENERAL DCB MINOR KEYWORD PROCESSING    *
*              *                                            *
*              **********************************************
         SPACE 1
********* FIRST POSITION IN PDT CLEARS JFCB BYTE WHERE INDICATOR WILL
********* BE PLACED.PDT IS UPDATED TO NEXT POSITION.ONLY ONE PARAMTER
********* PER KEYWORD IN THIS SECTION.
         SPACE 2
DCBNORM  DS    0H                         ENTRY                  YM2366
TRTCHP   DS    0H                 PROCESS TRTCH
STACKP   DS    0H                         STACK
PRTSPP   DS    0H                         PRTSP
MODEP    DS    0H                         MODE
EROPTP   DS    0H                         EROPT
DENP     DS    0H                         DEN
CODEP    DS    0H                         CODE
BFALNP   DS    0H                         BFALN
CPRIP    DS    0H                                                   696
HIARCHYP DS    0H                                                  AABA
         BALR  RE,R8              CLEAR BYTE IN JFCB
         SR    R1,R1
         IC    R1,0(R4)           COUNT BYTE IN PDT
         LA    R4,0(R1,R4)        BUMP TEST AND STORE POINTER
         BALR  RE,R8              SET BITS
         BALR  RE,R9              GET KEY
         EJECT
*        ********************************************************YM2366
*        *                                                      *YM2366
*        *                DSORG PROCESSING                      *YM2366
*        *                                                      *YM2366
*        ********************************************************YM2366
         SPACE 1
DSORGP   DS    0H                                                YM2366
         CLC   1(2,R3),JDSORGGS  IS THIS THE GS VALUE?           YM2366
         BNE   DCBNORM           NO, CHECK FOR OTHER ACCEPTABLE  YM2366
*                                VALUES                          YM2366
         OI    JFCB+JFCDSRG2-INFMJFCB,JFCORGGS YES, SET INDICATORYM2366
         BALR  RE,R9             GO TO GET KEY                   YM2366
JDSORGGS DC    C'GS'             GS IS VALID VALUE FOR DCB=DSORG YM2366
         EJECT
*        ********************************************************Y01113
*        *                                                       Y01113
*        *             AMP KEYWORD PROCESSING ROUTINE            Y01113
*        *                                                       Y01113
*        ********************************************************Y01113
         SPACE 2
AMPP     DS    0H                                                Y01113
         L     RF,DIENB901         GET AMP PROCESSOR ADDRESS     Y02668
         BALR  RE,RF               GO TO PROCESS AMP PARM.       Y02668
         BALR  RE,R9               GO TO GET KEY                 Y02668
         EJECT
*              **************************************************
*              *                                                *
*              *         DD KEYWORD PROCESSING ROUTINE          *
*              *                                                *
*              **************************************************
         SPACE 2
DDP      DS    0H                 PROCESS DD KEY.
         TM    SWD,FEXRCV         HAS FIRST EXEC CARD BEEN RECEIVED?
         BO    DDP02              YES,CONTINUE PROCESSING.
         CLC   DD0(DD7,R3),DDP10   IS LABEL JOBLIB                 163
         BC    EQUAL,DDP01        YES TRANSFER.
*                                                                  AACA
         CLC   DD0(DD7,R3),DDP20   IS LABEL SYSCHK                 AACA
*      IF THE FIRST EXEC RCVD SW IS OFF THEN THE FOLLOWING IS TRUE
*        .  NO RESTART=  KEYWORD WAS ENCOUNTERED ON THE JOB STMT
*        .  NO PGM=IEFDSDRP STEP GENERATED BY CONVERTER         YM02717
*        .  THE SYSCHK DD STMT IS TO BE IGNORED BY THIS RTN
*                                                                  AACA
         BE    CLEAN156            YES, IGNORE DD, BYPASS       YM02717*
                                   CREATING SIOT.               YM02717
         CLC   DD0(DD7,R3),DDP17  IS LABEL JOBCAT                Y01113
         BE    DDP05              IF YES, BRANCH TO PROCESS      Y01113
         LTR   R2,R2              IS LENGTH OF LABEL NOT ZERO.
         BC    NOT-ZERO,DDP12     YES TRANSFER ERROR.
         TM    SWE,PROC           IS DD CARD IN PROC?          @ZA14276
         BO    DDP12              YES, TRANSFER ERROR          @ZA14276
         TM    DDSWX1,IWAJCAT     IF JOBCAT SW ON GO TO PROCESS  Y01113
         BO    DDP051             BRANCH IF ON.                  Y01113
         TM    JCT+JCTJBLBS-INJMJCT,JBLBSW  JOBLIB BEEN ENCOUNTERED.?
*                                 A CARD WITHOUT A NAME HAS BEEN READ.
         BZ    DDP12              NO-CANNOT BE JOBLIB CONCATINATION.
         SPACE 1
********* A CONCATENATION TO A JOBLIB HAS BEEN ENCOUNTERED.
********* UPDATE JOBLIB COUNT AND MAKE SIOT REFLECT FACT.
         OI    SIOT+SCTSBYT1-INDMSIOT,SIOTCCAT   CONCAT DD CARD  Y02668
*              HAS BLANK DD NAME BIT ON IN IT.                   Y02668
         SR    R1,R1              CLEAR REGISTER.
         IC    R1,JBCONCAT        GET JOBLIB COUNT.
         LA    R1,DD1(R1)         ADD ONE.
         STC   R1,JBCONCAT        SAVE JOBLIB COUNT.
         OI    SIOT+SCTSBYT2-INDMSIOT,SCTJOBLB SET JOBLIB BIT / SIOT
         B     DDP07              TRANSFER.
DDP01    DS    0H                 ENTER FOR JOBLIB
         TM    SWE,PROC+PRCV   BRANCH IF JOBLIB IS IN A PROC   @ZA32059
         BC    NOT-ZERO,DDP14                                  @ZA32059
         TM    JCT+JCTJBLBS-INJMJCT,JBLBSW  JOBLIB ALREADY FOUND.?
         BO    DDP14              YES ISSUE ERROR MSG IEF636I
         TM    DDSWX1,IWAJCAT     IS JOBCAT BEFORE JOBLIB        Y01113
         BO    DDP14              YES- ISSUE ERROR MSG IEF636I.
         TM    SWY2,DYNAMSW        DD DYNAM FOR JOBLIB?         YM02717
         BO    DDP03               YES,BYPASS JOBLIB PROCESSING YM02717
*                                  AS NO SIOT BUILT FOR DYNAM.  YM02717
*                                  JOBLIB PROCESSING REQUIRES   YM02717
*                                  A SIOT.                      YM02717
         OI    JCT+JCTJBLBS-INJMJCT,JBLBSW  TURN ON JOBLIB FOUND SW.
         MVI   JBCONCAT,DD1         SET JOBLIB COUNT
         MVC   TJOBLIB(DD4),TSIOT SAVE JOBLIB TTR
         OI    SIOT+SCTSBYT2-INDMSIOT,SCTJOBLB SET JOBLIB BIT / SIOT
         B     DDP03              TRANSFER
DDP02    DS    0H                 ENTER FOR FIRST EXEC RECEIVED.
         CLC   DD0(DD7,R3),DDP17  IS LABEL JOBCAT                Y01113
         BC    EQUAL,DDP19        IF YES, MISPLACED JOBCAT ERROR Y01113
         CLC   DD0(DD7,R3),DDP10   IS LABEL JOBLIB                 163
         BC    EQUAL,DDP14        YES TRANSFER ERROR.
         CLC   DD0(DD8,R3),DDP18  IS LABEL STEPCAT               Y01113
         BNE   DDP021             IF NO, BYPASS                  Y01113
         TM    DDSWX1,IWASCAT2  IF BIT IS ON THIS IS A DUPLICATE Y01113
         BO    DDP21            GO PUT OUT WARNING MSG CODE      Y01113
         MVC   SCT+SCTPCAT-INSMSCT(DD4),TSIOT   INIT DISK @      Y02668
         OI    DDSWX1,IWASCAT     SET STEPCAT PVT CAT SWITCH IWA.Y01113
         OI    SIOT+SCTSBYT1-INDMSIOT,SIOTJSCT  TURN ON JOBCAT,  Y02113
*              STEPCAT ASSOCIATION BIT FOR AM/0 D.S.             Y02113
         OI    SIOT+SCTSBYT2-INDMSIOT,SIOTCATL  TURN ON          Y02113
*              CATALOG AM/0 DATA SET BIT                         Y02113
         OI    DDSWX1,IWASCAT2    SET SW, CLEARED IN VEA         Y01113
         MVI   SCT+SCTCATCT-INSMSCT,DD0 ZERO FIRST BYTE          Y02668
         MVI   SCT+SCTCATCT-INSMSCT+1,DD1 START CONCAT COUNT     Y02668
         NI    SCT+SCTSTYPE-INSMSCT,255-SCTJSCAT  JOBCAT BIT OFF Y01113
         B     DDP023             CONTINUE TO PROCESS DD VERB    Y01113
DDP021   DS    0H                                                Y01113
         LTR   R2,R2              IS LABEL LENGTH ZERO?          Y01113
         BNZ   DDP022             ^ ZERO MEANS NO CONCATENATIONS Y01113
         TM    DDSWX1,IWASCAT     IS STEPCAT SWITCH ON?          Y01113
         BZ    DDP021A       NORMAL DD CONCATENATION-CONTINUE    Y02668
         SR    R1,R1              CLEAR REG TO INCREMENT STEPCAT Y01113
         LH    R1,SCT+SCTCATCT-INSMSCT GET CAT COUNT             Y02668
         LA    R1,DD1(R1)         INCREMENT COUNT BY 1           Y01113
         STH   R1,SCT+SCTCATCT-INSMSCT RESTORE UPDATED COUNT     Y02668
         OI    SIOT+SCTSBYT1-INDMSIOT,SIOTJSCT  TURN ON JOBCAT,  Y02113
*              STEPCAT ASSOCIATION BIT FOR AM/0 D.S.             Y02113
         OI    SIOT+SCTSBYT2-INDMSIOT,SIOTCATL  TURN ON          Y02113
*              CATALOG AM/0 DATA SET BIT                         Y02113
         B     DDP023    CONTINUE TO PROCESS DD VERB..           Y01113
DDP021A  DS    0H      NORMAL DD CONCATENATION PROCESS CODE.     Y02668
         OI    SIOT+SCTSBYT1-INDMSIOT,SIOTCCAT   CONCAT DD CARD  Y02668
*              HAS BLANK DD NAME BIT ON IN IT.                   Y02668
         B     DDP023    CONTINUE TO PROCESS DD VERB..           Y02668
DDP022   DS    0H  ENTRY TO TURN OFF STEPCAT SWITCH              Y01113
         NI    DDSWX1,255-IWASCAT  TURN OFF AT END OF CONCAT.    Y01113
DDP023   DS    0H                 CONTINUE PROCESSING DD VERB    Y01113
         TM    SWD,FDDRCV         HAS FIRST DD BEEN RECEIVED?
         BO    DDP04              YES,BRANCH TO CONTINUE.
DDP03    DS    0H                 ENTER.
         OI    SWD,FDDRCV         SET FIRST DD RECEIVED SWITCH.
         NI    SDDNSWA,255-SDDNSW CLEAR SEARCH DDNAME TABLE SWITCH.
         XC    DNRT(SCT-DNRT),DNRT ZERO DDNAME TABLE
         LTR   R2,R2              IS LABEL LENGTH ZERO.
         BC    ZERO,DDP13         YES TRANSFER ERROR.
         B     DDP07              TRANSFER
DDP04    DS    0H                 ENTER FOR FIRST DD RECEIVED
         LTR   R2,R2              IS THE NAME ZERO LENGTH          AAAA
         BZ    DDP07              TRANSFER ZERO                    AAAA
         TM    SDDNSWA,SDDNSW     SEARCH DDNAME TABLE SWITCH ON?
         BZ    DDP07              NO,GO TO SET UP NEW SIOT AND JFCB.
         XC    DDWA7(8),DDWA7     CLEAR DDNAME WORK AREA
         BCTR  R2,R0              DECREMENT LENGTH
         EX    R2,DDNAMEP3        MOVE NAME TO WORK AREA
         LA    R2,1(R2)           RESTORE LENGTH
         BAL   RE,DDNAMEPA        IS NAME IN TABLE
         B     DDP06              YES
         B     DDP07              NO
*****************************************************************Y01113
*        *          PROCESS JOBCAT LABEL FIRST TIME              Y01113
*****************************************************************Y01113
DDP05    DS    0H                 ENTRY TO PROCESS JOBCAT LABEL  Y01113
         TM    SWY2,DYNAMSW        DD DYNAM FOR JOBCAT?         YM02717
         BO    DDP03               YES,BYPASS JOBCAT PROCESSING YM02717
*                                  AS NO SIOT BUILT FOR DYNAM.  YM02717
*                                  JOBCAT PROCESSING REQUIRES   YM02717
*                                  A SIOT.                      YM02717
         TM    SWE,PROC           IS JOBCAT FROM A PROC?         Y01113
         BO    DDP19              IF YES, MISPLACED JOBCAT MSG   Y01113
         TM    DDSWX1,IWAJCAT     SWITCH ON MEANS PRIOR JOBCAT.  Y01113
         BO    DDP19              ON,ERROR CONDITION.            Y01113
         OI    DDSWX1,IWAJCAT     TURN ON JOBCAT SWITCH.         Y01113
         OI    SIOT+SCTSBYT1-INDMSIOT,SIOTJSCT  TURN ON JOBCAT,  Y02113
*              STEPCAT ASSOCIATION BIT FOR AM/0 D.S.             Y02113
         OI    SIOT+SCTSBYT2-INDMSIOT,SIOTCATL  TURN ON          Y02113
*              CATALOG AM/0 DATA SET BIT                         Y02113
         OI    SIOT+SIOTALTD-INDMSIOT,SIOJCATS  SET SIOT SW      Y01113
         MVI   IWACATCT,DD1       INIT COUNT OF JOBCAT P.C. IN   Y01113
*                   IWA SO THAT IT MAY BE PUT INTO EVERY SCT     Y01113
         MVC   IWAJSIOT,TSIOT     SAVE DISK @ OF JOBCAT SIOT     Y01113
         B     DDP03              CONTINUE TO PROCESS DD VERB    Y01113
DDP051   DS    0H                 PROCESS CONCATENATED JOBCATS   Y01113
         SR    R1,R1              CLEAR REG TO INCREMENT JCAT CT Y01113
         IC    R1,IWACATCT        GET COUNT FROM IWA             Y01113
         LA    R1,DD1(R1)         ADD ONE TO COUNT               Y01113
         STC   R1,IWACATCT        SAVE UPDATED COUNT IN IWA      Y01113
         OI    SIOT+SIOTALTD-INDMSIOT,SIOJCATS  SET SIOT SW      Y01113
         OI    SIOT+SCTSBYT1-INDMSIOT,SIOTJSCT  TURN ON JOBCAT,  Y02113
*              STEPCAT ASSOCIATION BIT FOR AM/0 D.S.             Y02113
         OI    SIOT+SCTSBYT2-INDMSIOT,SIOTCATL  TURN ON          Y02113
*              CATALOG AM/0 DATA SET BIT                         Y02113
         B     DDP07              CONTINUE TO PROCESS DD VERB    Y01113
DDP06    DS    0H                 ENTRY FOR FOUND DDNAME.
         OI    DDWA2,JDICTI3      SET DDNAME SWITCH IN LWA ON.
         MVC   DD4(DD3,R5),DD8(R1) PUT SIOT TTR IN REMOTE LIST.
         MVC   DD12(DD3,R5),DD11(R1) PUT JFCB TTR IN REMOTE LIST.
         XC    DD0(DD14,R1),DD0(R1) ZERO ENTRY IN DDNAME TABLE
         LA    R0,SIOT            GET ADDRESS OF SIOT TABLE
         ST    R0,DD0(R5)         PUT SIOT ADDRESS IN REMOTE LIST
         LA    R0,JFCB            GET ADDRESS OF JFCB TABLE
         ST    R0,DD8(R5)         PUT JFCB ADDRESS IN REMOTE LIST
         MVI   QPARM+QMPOP-QMNAM,QMREAD SET READ
         MVI   QPARM+QMPNC-QMNAM,DD2*DD1 SET FOR TWO READS.
         BALR  RE,R6              GO TO Q MANAGER
         NI    SIOT+SCTSBYT1-INDMSIOT,DD255-SCTDUMMY
*                                 CLEAR DUMMY BIT IN SIOT.
         MVI   JFCB+JFCBDSNM-INFMJFCB,DDBLANK CLEAR NULLFILE
         MVC   JFCB+JFCBDSNM-INFMJFCB+DD1(7),JFCB+JFCBDSNM-INFMJFCB
         B     AOLKDP39      STORE DD NAME INTO SIOT           @ZM40101
DDP07    DS    0H                 ENTER TO SETUP NEW SIOT & JFCB
*                                 SIOT AND JFCB WERE CLEARED IN
*                                 HEADER INITIALIZATION ROUTINE.
         MVI   SIOT+SIOTTYPE-INDMSIOT,SIOTID    SET SIOT ID.
         MVI   DDWA2,JDICTI1      SET DICTIONARY INDICATOR BIT
         LA    R1,DD8             GET LENGTH TO DICTIONARY DDNAME.
         AR    R1,R2              COMPUTE LENGTH BYTE.
         STC   R1,DDWA1           SET DICTIONARY LENGTH BYTE
         TM    SWY2,DYNAMSW        IS THIS A DD DYNAM?           Y02668
         BO    AODDP10             YES, BYPASS STATIC DD CODE.  YM02717
         LH    R1,DDINTNO         GET DD INTERNAL NUMBER         Y02668
         LH    RF,DDLIMIT         GET 1635                       Y02668
         CLR   R1,RF              IS DD INTERNAL EQUAL 1635      Y02668
         BC    EQUAL,DDP15        YES TRANSFER ERROR             Y02668
         LA    R1,DD1(R1)         BUMP DD INTERNAL NUMBER ONE
         STH   R1,DDINTNO         SAVE NUMBER.                   Y02668
         STH   R1,SCT+SCTLALOC-INSMSCT     PUT NUMBER IN SCT.    Y02668
         STH   R1,SIOT+SCTDDINO-INDMSIOT   PUT NUMBER IN SIOT.   Y02668
         MVI   SIOT+SCTDDNAM-INDMSIOT,DDBLANK BLANKS
         MVC   SIOT+SCTDDNAM-INDMSIOT+1(DD7),SIOT+SCTDDNAM-INDMSIOT
         MVC   SIOT+SCTANAME-INDMSIOT(DD8),SIOT+SCTDDNAM-INDMSIOT  I242
         MVC   SIOT+SIOTDEST-INDMSIOT(DD8),SIOT+SCTANAME-INDMSIOT
*                                 NLANK DEST FIELD               Y02668
         MVI   SIOT+SCTUTYPE-INDMSIOT,DDBLANK BLANKS
         MVC   SIOT+SCTUTYPE-INDMSIOT+1(DD20),SIOT+SCTUTYPE-INDMSIOT
         MVI   SIOT+SIOTOUTC-INDMSIOT,DD1 INIT COPIES FIELD TO 1 Y02668
         MVI   SIOT+SIOTSSNM-INDMSIOT,DDBLANK                    Y02668
         MVC   SIOT+SIOTSSNM-INDMSIOT+1(DD3),SIOT+SIOTSSNM-INDMSIOT
*                                 INIT SUBSYSTEM FIELD TO BLANKS Y02668
         MVI   JFCB+JFCBDSNM-INFMJFCB,DDBLANK BLANKS.
         MVC   JFCB+JFCBDSNM-INFMJFCB+1(DD51),JFCB+JFCBDSNM-INFMJFCB
         MVI   JFCB+JFCBVOLS-INFMJFCB,DDBLANK BLANK.
         MVC   JFCB+JFCBVOLS-INFMJFCB+DD1(DD29),JFCB+JFCBVOLS-INFMJFCB
*    INITIALIZE JFCBE CHARACTER FIELDS TO BLANKS...            @Z40MPTH
AOLKDP39 MVC   JFCBEX+JFCBMAGT-INGMJFCE(L'JFCBMAGT+L'JFCMODIF),BLANK16
*                                                              @ZM40101
         MVC   JFCBEX+JFCBTRS1-INGMJFCE(L'JFCBTRS1+L'JFCBTRS2+L'JFCBTRS*
               3+L'JFCBTRS4),BLANK16                           @Z40MPTH
         CLI   MSGSEC,DD0          IS THERE AN ERROR               163
         BNE   CLEANUP             YES GO TO CLEANUP               163
*****************************************************************Y02668
* ESTABLISH ADDRESSABILITY TO CURRENT TEXT STRING PREFIX        *Y02668
* IN ORDER TO USE DSECT FOR TEXT PREFIX.                        *Y02668
*****************************************************************Y02668
AOLKDP40 DS    0H                                                Y02028
         L     R3,TEXTBUFP         GET ADDR OF NEXT TEXT STRING. Y02668
         USING TEXT,R3             TEXT PREFIX ADDRESSABILITY.   Y02668
         TM    STRDINDC,DTXSYSIN   IS THIS A DD */DATA STMT?    YM01605
         BZ    AOLKDP45            BRANCH NO.                    Y02668
         DROP  R3                                                Y02668
* SET SPOOL FLAGS IN JCT, SCT, JFCB.                             Y02668
         OI    JCT+JCTSTAT2-INJMJCT,JCTSPSYS SPOOL FLAG - JCT.   Y02668
         OI    SCT+SCTSTAT2-INSMSCT,SCTSPSYS SPOOL FLAG - SCT.   Y02668
*                                  SET SYSIN BIT IN JFCB AND     Y02668
         OI    JFCB+JFCBTSDM-INFMJFCB,JDDT5+JDDT1 TELL OPEN NOT  Y02668
         OI    JFCB+JFCBIND2-INFMJFCB,JDDT6       TO WRITE JFCB  Y02668
         OI    SIOT+SCTSBYT1-INDMSIOT,SCTSYSIN+SCTSPMNT TO QUEUE.Y02668
         OI    SIOT+SIOTBYT0-INDMSIOT,SIOTSSDS SUBSYSTEM WILL    Y02668
*                                     PROCESS THIS DATA SET      Y02668
AOLKDP45 DS    0H                                                Y02668
         L     R3,TLENPX           RESTORE PTR FOR VGT.          Y02668
         OI    JFCB+JFCBLTYP-INFMJFCB,JFCSL     SET LABEL=SL DEFAULT
         TM    DDWA2,JDICTI3       DDNAME PROCESSING SW ON?     YM00375
         BO    AODDP10             YES, DON'T MOVE DDNAME OF    YM00375
*                                  REFERENCED DD TO SIOT, WHICH YM00375
*                                  ALREADY CONTAINS DDNAME OF   YM00375
*                                  REFERRING DD (I.E.,          YM00375
*                                  //SYSLIN  DD  DDNAME=SYSIN). YM00375
         BALR  RE,R8              GO TO TEST & STORE
AODDP10  DS    0H                                               YM00375
         BALR  RE,R9              GO TO GET KEY
DDP10    DS    0H                 NO ENTRY
         DC    X'06'               FOR JOBLIB COMPARE              163
         DC    C'JOBLIB'          FOR COMPARE
DDP12    DS    0H                 ENTER
         MVI   MSGSEC,ERMES06     IMPROPER LABEL.
         B     DDP16                                               163
DDP13    DS    0H                 ENTER.
         MVI   MSGSEC,ERMES17     IMPROPER NULL LABEL
         B     DDP16                                               163
DDP14    DS    0H                 ENTER
         MVI   MSGSEC,ERMES36     IMPROPER JOBLIB
         B     DDP16                                               163
DDP15    DS    0H                 ENTER
         OI    AOSW2,AOMAXERR     TURN ON MAX DD EXCEEDED BIT    Y02668
         MVI   MSGSEC,ERMES49     1636 DD VERB                   Y02668
         MVI   MSGKEY,DD0          CLEAR SECOND MSG                325
         B     CLEANUP               SIOT BUILT, GO TO CLEANUP     325
DDP16    DS    0H                                                  163
         MVI   MSGKEY,DD0          CLEAR SECOND MSG                163
          B     DDP07              BUILD SIOT ANS JFCB             163
DDP17    DS    0H                                                Y01113
         DC    X'06'              FOR COMPARE OF TEXT LENGTH BYTEY01113
         DC    C'JOBCAT'          AND DDNAME LABEL.              Y01113
DDP18    DS    0H                                                Y01113
         DC    X'07'              FOR COMPARE OF TEXT LENGTH BYTEY01113
         DC    C'STEPCAT'         AND DDNAME LABEL.              Y01113
DDP19    DS    0H                                                Y01113
         MVI   MSGSEC,ERMES133    CODE FOR MISPLACED JOBCAT MSG  Y01113
         B     DDP16              CONTINUE PROCESSING            Y01113
DDP20    DS    0H                                                  AAAA
         DC    X'06'                                               AAAA
         DC    C'SYSCHK'           SYSCHK COMPARE                  AAAA
DDP21    DS    0H                                                Y01113
         MVI   DWRNMSG,ERMES134    DUPLICATE STEPCAT WARNING     Y01113
         MVI   DWRNKEY,DD0        FLAG NO SECONDARY MSG          Y01113
         B     DDP07              DO NOT USE DUPLICATE STEPCAT   Y01113
*                                 FOR PRIVATE CATALOG, CONTINUE. Y01113
         EJECT
*              **************************************************
*              *                                                *
*              *       DDNAME KEYWORD PROCESSING ROUTINE        *
*              *                                                *
*              **************************************************
         SPACE 2
DDNAMEP  DS    0H                 PROCESS DDNAME KEY.
         LTR   R2,R2              IS LENGTH ZERO
         BC    ZERO,DDNAMEP4      YES  ERROR
         CLI   DD0(R3),DD8        IS LENGTH GREATER THAN 8
         BC    HIGH,DDNAMEP5      YES  ERROR
         XC    DDWA7(8),DDWA7     CLEAR DDNAME WORK AREA
         BCTR  R2,R0
         EX    R2,DDNAMEP3        MOVE NAME TO DD WORK AREA
         BAL   RE,DDNAMEPA        SEARCH DDNAME TABLE
         B     DDNAMP61           ERROR  DUPLICATE DDNAMES
         XC    DDWA7(8),DDWA7     SET FIELD TO ZERO
         BAL   RE,DDNAMEPA        FIND EMPTY SLOT IN TABLE
         B     DDNAMEP2           THERE IS ROOM
         B     DDNAMEP6           NO ROOM - ERROR
DDNAMEP2 DS    0H                 ENTRY FOR ROOM IN TABLE
         EX    R2,DDNAMEP8        MOVE DDNAME TO TABLE
* TEST IF CURRENT DD CONTAINS DDNAME= . IF THE SEQUENCE IS       A27239
*                     //DD1  DD  DDNAME=DD2                      A27239
*                     //DD2  DD  DDNAME=DD3                      A27239
* CARRY OVER THE TTR'S FOR DD1 TO DD2, SINCE NO NEW SIOT WILL    A27239
* BE CREATED FOR DD2                                             A27239
*                                  TEST IF DD2 HAS BEEN          A27239
         TM    DDWA2,JDICTI3      REFERENCED IN PREVIOUS DDNAME= PARAM
         BZ    DDNAMEPQ           NO-ENTER TTRS INTO DDNAME TABLE.
* IT HAS BEEN. MOVE DD1 TTR'S TO THE DNRT ENTRY FOR DD2          A27239
         MVC   8(DD3,R1),DD4(R5)   FIRST THE SIOT TTR,           A27239
         MVC   11(DD3,R1),DD12(R5) THEN THE ONE FOR JFCB         A27239
         B     DDNAMEPR            AND BRANCH                    A27239
DDNAMEPQ DS    0H                                                A27239
         MVC   8(DD3,R1),TSIOT    SIOT TTR TO TABLE
         MVC   11(DD3,R1),TNEXT+DD4 JFCB TTR TO TABLE
DDNAMEPR DS    0H                                                A27239
         OI    SDDNSWA,SDDNSW     SET DDNAME SEARCH SWITCH IN IWA.
         MVC   JFCB+JFCBDSNM-INFMJFCB(8),DDNAMEP9 NULLFILE
         OI    SIOT+SCTSBYT1-INDMSIOT,SCTDUMMY   SET DUMMY BIT
         BALR  RE,R9
DDNAMEP3 DS    0H
         MVC   DDWA7(DD0),DD1(R3) EXECUTED MOVE
DDNAMEP4 DS    0H
         MVI   MSGSEC,ERMES46     NULL OPERAND
         B     CLEANUP
DDNAMEP5 DS    0H
         MVI   MSGSEC,ERMES42     GREATER THAN 8 CHARS
         B     DDNAMEP7
DDNAMP61 DS    0H
         MVI   MSGSEC,ERMES54
         B     DDNAMEP7
DDNAMEP6 DS    0H
         MVI   MSGSEC,ERMES31     DUPLICATE DDNAMES
DDNAMEP7 DS    0H
         MVI   MSGKEY,DD0
         B     CLEANUP
DDNAMEP8 DS    0H                 EXECUTED
         MVC   0(0,R1),DD1(R3)    MOVE NAME TO TABLE
DDNAMEPD DC    X'08'               LENGTH OF NULL FILE CONSTANT    AACA
DDNAMEP9 DC    C'NULLFILE'
*
*     ROUTINE USED TO SEARCH DDNAME TABLE FOR DDNAME OR ZEROES
*
DDNAMEPA DS    0H                 ENTRY TO SEARCH TABLE
         LA    R1,DNRT            ADDRESS OF DDNAME TABLE
         LA    RF,DD5             SET LOOP FOR 5
DDNAMEPB DS    0H                 ENTRY FOR LOOP
         CLC   0(8,R1),DDWA7      COMPARE TABLE TO WORK AREA
         BC    EQUAL,DDNAMEPC
         LA    R1,14(R1)
         BCT   RF,DDNAMEPB        LOOP BACK
         LA    RE,4(RE)           NOT IN TABLE - RETURN NSI PLUS 4
DDNAMEPC DS    0H                 ENTRY FOR HIT IN TABLE
         BR    RE                 RETURN
         EJECT
*              ************************************************** 21009
*              *                                                * 21009
*              *     DLM PROCESSING ROUTINE                     * 21009
*              *                                                * 21009
*              ************************************************** 21009
         SPACE
DLMP     DS    0H                                                 21009
         CLI   0(R3),JDLMT1            IS PARM LENGTH = 2 ?       21009
         BNL   DDNORM                  NORMAL PROCESSING          21009
         MVI   MSGSEC,ERMES32          FORMAT ERROR               21009
         B     CLEANUP                                            21009
         EJECT
*              **************************************************
*              *                                                *
*              *        DSNAME KEYWORD PROCESSING ROUTINE.      *
*              *                                                *
*              **************************************************
         SPACE 2
DSNAMEP  DS    0H                 PROCESS DSNAME KEY
*                                  BYPASS DSNAME IF DUMMY OR      20029
         TM    DDSWA,DSDUMSW      DYNAM SPECIFIED ON CARD ALREADY.
         BO    DSNP15             DYNAM OR DUMMY SPECIFIED.BRANCH.
         OI    DDSWA,DSSYSSW      SET DSNAME SPECIFIED SW IN LWA.
         L     RF,TEXTBUFP         SET UP ADDRESSABILITY FOR     Y02668
         USING TEXT,RF             THE TEXT STRING PREFIX        Y02668
         CLC   DD0(45,R3),DSNMVTOC TRYING TO ACCESS VTOC       @ZA16056
*                                  DATA SET VIA JCL?           @ZA16056
         BNE   DSNP01              NO , CONTINUE               @ZA16056
         MVI   MSGSEC,ERMES67      YES, ILLEGAL DSNAME MSG     @ZA16056
         B     CLEANUP                                         @ZA16056
DSNP01   DS    0H                                              @ZA16056
         TM    STRDINDC,DTXSYOUT   SYSOUT SPECIFIED?             Y02668
         BO    DSNP14              YES, TAKE BRANCH              Y02668
         DROP  RF
         LTR   R2,R2              CHECK FOR ZERO LENGTH           20077
         BZ    DSNP090            GET NEXT KEY IF ZERO            20077
         CLC   0(9,R3),DDNAMEPD    DSN=NULLFILE/'NULLFILE'?     YM02716
         BNE   DSNP1               BRANCH NO.                   YM02716
         OI    SIOT+SCTSBYT1-INDMSIOT,SCTDUMMY YES, SET DUMMYSW YM02716
DSNP1    DS    0H                                               YM02716
         TM    SWI,DSNLIT          IS THIS DSN IN QUOTES           AACA
         BO    DSNP16              YES, GO DO SPECIAL PROCESSING   AACA
         SPACE
         CLI   1(R3),DDAMP        IS FIRST CHAR AMPERSAND          3565
         BE    DSNP07             TRANS YES                        3565
*                  SYNTAX CHECK FOR LENGTH                         3565
         MVC   DDWA7(1),NUMBYTE   NUMBER OF SUBFIELDS            A39041
         NI    DDWA7,HIOFF        TURN OFF HIGH ORDER BIT        A27935
         CLI   DD1(R3),DDASTER    IS 1ST CHARACTER AN ASTERISK   A39041
         BE    DSNP00             YES - BRANCH                   A27935
         CLI   DDWA7,DD2          MORE THAN TWO SUBFIELDS?       A27935
         BH    DSNP091            YES - BRANCH TO ERROR MESSAGE  A27935
DSNP00   DS    0H                                                A27935
         SR    R0,R0                                               3565
         IC    R0,DDWA7           SUBFIELD COUNT                   3565
         SR    RF,RF                                               3565
         IC    RF,0(R3)           LENGTH OF SUBFIELD               3565
         LA    R4,1(0,0)          INITIALIZE COUNT OF CHARACTERS   3565
         LA    R1,1(0,0)          INITIALIZE DISPLACEMENT          3565
DSNP011  DS    0H                                                  3565
         LR    R2,R3                                               3565
         AR    R2,R1              ALLRESS FOR COMPARE              3565
         CLC   DSNPRD(1),0(R2)    IS CHARACTER A '.'               3565
         BC    8,DSNP013                                           3565
         CLI   0(R2),DDAMP        TEST FOR AMPERSAND           @ZA14270
         BNE   DSNP0113           TRANSFER NOT AN &            @ZA14270
         MVI   MSGSEC,ERMES27     INCORRECT USE OF AMPERSAND   @ZA14270
         B     CLEANUP            WRITE MESSAGE                @ZA14270
DSNP0113 DS    0H
         CH    R4,DSNP80          EIGHT CHARACTERS                 3565
         BC    12,DSNP0112                                         3565
DSNP0110 DS    0H                                                  3565
         MVI   MSGSEC,ERMES42     EXCESSIVE PARAMETER LENGTH       3565
         B     CLEANUP            WRITE MESSAGE                    3565
DSNP0112 DS    0H                                                  3565
         CR    R1,RF              END OF FIELD                     3565
         BC    8,DSNP012          GET NEXT FIELD                   3565
         LA    R4,1(R4)           INCREMENT COUNT                  3565
         LA    R1,1(R1)           INCREMENT DISPLACEMENT           3565
         B     DSNP011                                             3565
DSNP012  DS    0H                                                  3565
         BCTR  R0,R0              DECREMENT SUBFIELD COUNT         3565
         BZ    DSNP014                                             3565
         LA    R3,1(R1,R3)        RESET BASE                       3565
         LA    R1,1(0)            RESET DISPLACEMENT               3565
         IC    RF,0(R3)           LENGTH OF NEW SUBFIELD           3565
         LA    R4,1(0)            RESET COUNT                      3565
         B     DSNP011                                             3565
DSNP013  DS    0H                                                  3565
         OI    SIOT+SCTSBYT1-INDMSIOT,SIOTQDSN TURN ON QUALIFIED Y02113
*              DSN BIT WHEN PERIOD FOUND IN DATA SET NAME.       Y02113
         CR    R1,RF              END OF FIELD                     3565
         BC    7,DSNP0132                                          3565
         MVI   MSGSEC,ERMES24     INCORRECT USE OF PERIOD          3565
         B     CLEANUP            WRITE MESSAGE                    3565
DSNP0132 DS    0H                                                  3565
         LA    R4,1(R1,R3)        ADDRESS OF CHARACTER AFTER '.'   3565
         CLI   0(R4),DDCA         COMPARE TO CHARACTER 'A'         3565
         BC    4,DSNP0134         BRANCH IF LESS THAN C'A'         3565
         CLI   0(R4),DDN0     COMPARE TO CHARACTER '0'             3565
         BC    4,DSNP0136     BRANCH IF LESS THAN C'0'             3565
DSNP0134 DS    0H                                                  3565
         CLI   0(R4),C'$'     TEST FOR NATIONAL CHAR. DOLLAR SIGNPTM617
         BE    DSNP0136                                          PTM617
         CLI   0(R4),C'#'    TEST FOR NATIONAL CHAR. POUND SIGN  PTM617
         BE    DSNP0136                                          PTM617
         CLI   0(R4),C'@'    TEST FOR NATIONAL CHAR. 'AT' SIGN   PTM617
         BE    DSNP0136                                          PTM617
         MVI   MSGSEC,ERMES47     NON-ALPHA FIRST CHARACTER OF NAME3565
         B     CLEANUP            WRITE MESSAGE                    3565
DSNP0136 DS    0H                                                  3565
         LA    R4,1(R0)           RESET COUNT                      3565
         LA    R1,1(R1)           INCREMENT DISPLACEMENT           3565
         B     DSNP011                                             3565
DSNP014  DS    0H                                                  3565
         LM    R2,R4,TLEN         RESTORE REGISTERS                3565
         CLI   DD1(R3),DDASTER    IS CHARACTER ASTERICK
         BC    EQUAL,DSNP05       YES TRANSFER
DSNP02   DS    0H                 ENTER
         BALR  RE,R8              GO TO TEST AND STORE
         BALR  RE,R9              GO TO GET KEY
         LTR   R2,R2              IS THIS A NULL PARAMETER       A51048
         BNE   DSNP021            BRANCH IF OK                   A51048
         MVI   MSGSEC,ERMES46     NULL PARAMETER                 A51048
         B     CLEANUP                                           A51048
DSNP021  DS    0H                                                A51048
         CLI   DD1(R3),DDPLUS     IS CHARACTER PLUS
         BC    EQUAL,DSNP03       YES TRANSFER
         CLI   DD1(R3),DDMINUS    IS CHARACTER MINUS
         BC    EQUAL,DSNP03       YES TRANSFER
         CLI   DD1(R3),DDN0       IS CHARACTER ZERO.
         BC    NOT-EQUAL,DSNP02   NO TRANSFER
DSNP03   DS    0H                 ENTER
         L     R1,ADSNAMT3        RESET POINTER TO PDT
         ST    R1,TCPDTP          SAVE PDT POINTER
         B     DSNP02             TRANSFER
DSNP05   DS    0H                 ENTER FOR REFER BACK.
*
*  IF ASTERISK IS FOLLOWED BY PERIOD ( *.DD ) WHICH INDICATES
*      A REFERBACK, THE LENGTH FIELD MUST HAVE A LENGTH OF ONE.
*    IF NOT LENGTH OF ONE THEN PERIOD MUST BE MISSING.
*
         CLI   DD0(R3),X'01'                                      18768
         BNE   DCBP10                                             18768
         BCTR  R3,R0              DECREMENT TEXT POINTER
         TM    DD0(R3),DD128      IS THIS A SUBLIST
         BZ    DSNP13             NO TRANSFER ERROR.
         BALR  RE,R9              GO TO GET KEY
         BAL   RE,DSRTN            GO TO DICTIONARY SEARCH RTN     AACA
         MVI   QPARM+QMPOP-QMNAM,QMREAD    SET READ
         MVI   QPARM+QMPNC-QMNAM,DD1      READ SET FOR ONE         I242
         MVC   DD4(DD3,R5),DD2(R1)    MOVE SIOT TTR TO REMOTE LIST I242
         LA    RF,JFCBX       ADDRESSOF READ AREA                  I242
         ST    RF,DD0(R5)    PUT ADDRESS IN REMOTE LIST            I242
         BALR  RE,R6       GO TO Q MANAGER                         I242
         MVC   SIOT+SCTANAME-INDMSIOT(DD8),JFCBX+SCTANAME-INDMSIOT I242
         TM    JFCBX+SCTSBYT1-INDMSIOT,SIOTQDSN IS DSNAME BEING  Y02113
*              REFERRED TO A QUALIFIED DSNAME?                   Y02113
         BZ    DSNP050   NO,DO NOT SET QUALIFIED DSN SWITCH ON.  Y02113
         OI    SIOT+SCTSBYT1-INDMSIOT,SIOTQDSN TURN ON QUALIFIED Y02113
*              DSNAME BIT IN SIOT BEING CREATED.                 Y02113
DSNP050  DS    0H                                                Y02113
         TM    JFCBX+SCTSBYT1-INDMSIOT,SIOTGDSN  IS TEMP DSNAME  Y02668
*                                     BIT ON IN REFERENCED SIOT  Y02668
         BZ    DSNP05A                NO, GO READ IN JFCB        Y02668
         OI    SIOT+SCTSBYT1-INDMSIOT,SIOTGDSN SET TEMP DSN BIT  Y02668
DSNP05A  DS    0H                                                Y02668
         TM    JFCBX+SCTSBYT1-INDMSIOT,SCTDUMMY    REFERBACK    YA57513
*                            TO A DUMMY DATA SET?               YA57513
         BZ    DSNP05B       NO,CONTINUE PROCESSING...          YA57513
         OI    SIOT+SCTSBYT1-INDMSIOT,SCTDUMMY  SET DUMMY BIT   YA57513
*                            ON IN SIOT BEING BUILT.....        YA57513
DSNP05B  DS    0H                                               YA57513
         MVI   QPARM+QMPOP-QMNAM,QMREAD SET READ                 Y02668
         MVI   QPARM+QMPNC-QMNAM,DD1 READ SET FOR ONE
         MVC   DD4(DD3,R5),DD5(R1) MOVE JFCB TTR TO REMOTE LIST
         LA    R1,JFCBX           GET ADDRESS OF AREA FOR READ
         ST    R1,DD0(R5)         PUT ADDRESS IN REMOTE LIST
         BALR  RE,R6              GO TO Q MANAGER
         MVC   JFCB+JFCBDSNM-INFMJFCB(JFCBTSDM-JFCBDSNM),JFCBX+JFCBDSNM1
               -INFMJFCB          MOVE DSNAME AND ELEMENT NAME
         CLI   JFCBX+JFCBELNM-INFMJFCB,C'+'  TEST FOR GDG          413
         BE    DSNP051                       IN THE REF'D JFCB.    413
         CLI   JFCBX+JFCBELNM-INFMJFCB,C'-'  IF IT IS A            413
         BE    DSNP051                       GDG  THEN SET THE     413
         CLI   JFCBX+JFCBELNM-INFMJFCB,C'0'  GDG BIT IN THE        413
         BNE   DSNP052                       CURRENT SIOT.         413
DSNP051  DS    0H                                                  413
         OI    SIOT+SCTSBYT4-INDMSIOT,JDSNAME4 INDICATE GDG IN SIOT 413
DSNP052  DS    0H                                                  413
         TM    JFCBX+JFCBIND1-INFMJFCB,JFCPDS  GDG OR PDS ?       7030
         BZ    DSNP054                         NOT GDG OR PDS      7030
         OI    JFCB+JFCBIND1-INFMJFCB,JFCPDS   SET GDG OR PDS BIT
*                                 IN NEW JFCB BEING BUILT FOR CARD.
         SPACE
DSNP054  DS    0H
         TM    JFCBX+JFCBIND2-INFMJFCB,JFCTEMP   TEMPORARY DSNAME BIT
*                                 OFF IN JFCB REFERRED TO BY DSNAME
         BZ    DSNP06             YES,IGNORE ANY OTHER POSITIONALS.
         OI    JFCB+JFCBIND2-INFMJFCB,JFCTEMP  SET TEMPORARY DSNAME
*                                 BIT IN NEW JFCB BEING BUILT.
DSNP06   DS    0H                 FOR LOOP.
         BALR  RE,R9              GO TO GET KEY
         B     DSNP06             LOOP.
DSNP07   DS    0H                 ENTER FOR AMPERSAND
         OI    SIOT+SCTSBYT1-INDMSIOT,SIOTGDSN  TEMP DSNAME BIT  Y02668
         OI    JFCB+JFCBIND2-INFMJFCB,JFCTEMP  SET TEMPORARY DSNAME
*                                 BIT IN NEW JFCB BEING BUILT.
         OI    SIOT+SCTSBYT1-INDMSIOT,SIOTQDSN TURN ON QUALIFIED Y02113
*              QUALIFIED DSN INDICATOR BECAUSE ALL CREATED       Y02113
*              TEMPORARY DSNAMES ARE QUALIFIED BY DEFINITION.    Y02113
         MVC   JFCB+JFCBDSNM-INFMJFCB(DD23),UNQNAME MOVE UNIQUE NAME
         LA    RF,JCT+JCTJTPTN-INJMJCT-DD1 GET LAST BYTE JOB NAME FIELD
         LA    R1,DD8             SET COUNT TO EIGHT.
DSNP08   DS    0H                 ENTER FOR LOOP
         CLI   DD0(RF),DDBLANK    IS CHARACTER BLANK
         BC    NOT-EQUAL,DSNP09   NO TRANSFER
         BCTR  RF,R0              YES DECREMENT POINTER
         BCT   R1,DSNP08          LOOP BACK.
DSNP09   DS    0H                 ENTER
         BCTR  R1,R0              DECREMENT LENGTH OF JOB NAME
         EX    R1,DSNP11          EXECUTE MOVE
         LA    R1,JFCB+JFCBDSNM-INFMJFCB+DD24(R1) SET POINTER
         MVI   DD0(R1),DDPERIOD   MOVE IN PERIOD
         CLI   DD0(R3),DD1        IS LENGTH ONE
         BC    EQUAL,DSNP10       YES TRANSFER ERROR
         BCTR  R2,R0              DECREMENT LENGTH BY ONE
         CH    R2,DSNP80          8 CHARS                          3565
         BH    DSNP0110           TRANS OVER 8                     3565
         CLI   DD2(R3),DDCA       COMPARE FOR CHARACTER 'A'.     A50808
         BL    DSNP09A            BRANCH IF LESS THAN 'A'.       A50808
         CLI   DD2(R3),DDN0       COMPARE FOR NUMERIC '0'.       A50808
         BL    DSNP09B            BRANCH IF LESS THAN '0'.       A50808
DSNP09A  DS    0H                                                A50808
         CLI   DD2(R3),C'$'       TEST FOR NATIONAL DOLLAR SIGN. A50808
         BE    DSNP09B            VALID IF EQUAL IN &DSN.        A50808
         CLI   DD2(R3),C'#'       TEST FOR NATIONAL POUND SIGN.  A50808
         BE    DSNP09B            VALID IF EQUAL IN &DSN.        A50808
         CLI   DD2(R3),C'@'       TEST FOR NATIONAL AT SIGN.     A50808
         BE    DSNP09B            VALID IF EQUAL IN &DSN         A50808
         MVI   MSGSEC,ERMES47     NON-ALPHA 1ST CHARACTER OF NAMEA50808
         B     CLEANUP            FAIL JOB WITH ABOVE MESSAGE.   A50808
DSNP09B  DS    0H                                                A50808
         BCTR  R2,R0              DO IT AGAIN
         EX    R2,DSNP12          EXECUTE MOVE
         EX    R2,DSNP125         MOVE &NAME TO SIOT               I242
         BALR  RE,R9              GO TO GET KEY
         LTR   R2,R2              IS THIS A NULL PARAMETER      YA02511
         BNE   DSNP09C            BRANCH IF OK                  YA02511
         MVI   MSGSEC,ERMES46     SET ERROR CODE                YA02511
         B     CLEANUP                                          YA02511
DSNP09C  DS    0H                                               YA02511
         L     R1,ADSNAMT1
         ST    R1,TCPDTP          SAVE PTR
         ST    R4,TPDTP           SET A PTR TO START OF PDT FOR DSNAME
         BALR  RE,R8              GO TO TEST AND STORE
DSNP090  DS    0H
         BALR  RE,R9              GO TO GET KEY
DSNP091  DS    0H                                                A27935
         MVI   MSGSEC,ERMES40     ERROR   TOO MANY PARAMS
         B     CLEANUP            GO TO CLEANUP
DSNP10   DS    0H                 ENTER
         MVI   MSGSEC,ERMES43     ERROR ONLY AMPERSAND
         B     CLEANUP            GO TO CLEANUP
DSNP11   DS    0H                 NO ENTRY
         MVC   JFCB+JFCBDSNM-INFMJFCB+DD23(DD1),JCT+JCTJNAME-INJMJCT
DSNP12   DS    0H                 NO ENTRY
         MVC   DD1(DD1,R1),DD2(R3) MOVE AMPERSAND NAME.
DSNP125  DS    0H                       NO ENTRY                   I242
      MVC   SIOT+SCTANAME-INDMSIOT(0),DD2(R3)   MOVE &NAME TO SIOT I242
DSNP13   DS    0H                 ENTER
         MVI   MSGSEC,ERMES43     ERROR NO SUBLIST.
         B     CLEANUP            GO TO CLEANUP
DSNP14   DS    0H                 ENTRY FOR SYSOUT THIS STATEMENT
         LTR   R2,R2               CHECK FOR ZERO LENGTH         Y02668
         BZ    DSNP14B             ZERO GO TO SET WARNING MSG    Y02668
         LA    R1,JDSNAME1         GET MAX LENGTH                Y02668
         CR    R2,R1               LENGTH GREATER THAN 44 ?      Y02668
         BH    DSNP14B             GREATER GO TO SET WARNING MSG Y02668
         CLI   JFCB+JFCBDSNM-INFMJFCB,DDBLANK                    Y02668
*                                  HAS DSNAME BEEN MOVED IN YET  Y02668
         BNE   DSNP14A             YES GO TO OVER LAY NAME       Y02668
         BCTR  R2,R0               DECREMENT FOR EXECUTE STMT    Y02668
         EX    R2,DSNP1604         MOVE DSNAME INTO JFCB         Y02668
         B     DSNP14C             GO TO CHECK QUAL DSN         YM01548
DSNP14A  DS    0H                                                Y02668
         MVI   JFCB+JFCBDSNM-INFMJFCB,DDBLANK  BLANK DSNAME FIELDY02668
         MVC   JFCB+JFCBDSNM-INFMJFCB+1(DD51),JFCB+JFCBDSNM-INFMJFCB
         BCTR  R2,R0               DECREMENT FOR EXECUTE STMT    Y02668
         EX    R2,DSNP1604         MOVE DSNAME INTO JFCB         Y02668
DSNP14B  DS    0H                                                Y02668
         MVI   DWRNMSG,ERMES55    SET WARNING MSG CODE             AABA
         MVI   DWRNKEY,0          CLEAR SECONDARY MSG              AABA
*                                       JOB NOT FAILED             AABA
DSNP14C  DS    0H                                               YM01548
         NI    SIOT+SCTSBYT1-INDMSIOT,255-SIOTQDSN              YM01548
*                      UNCONDITIONALLY CLEAR QUAL DSN BIT       YM01548
         LA    R1,8                GET MAX NONQUAL DSN LTH      YM01548
         CR    R2,R1               IS THIS LENGTH > 8           YM01548
         BNL   DSNP14E             YES. GO TO SET QUAL DSN BIT  YM01548
DSNP14D  DS    0H                                               YM01548
         LA    R1,0(R2,R3)         GET POINTER TO BYTE TO CHECK YM01548
         CLI   0(R1),C'.'          IS THIS A PERIOD             YM01548
         BE    DSNP14E             YES GO TO SET QUAL DSN BIT   YM01548
         BCT   R2,DSNP14D    DECREMENT LTH TO SEARCH BACKWARDS  YM01548
         B     DSNP15              NOT A QUAL DSN  CONTINUE     YM01548
DSNP14E  DS    0H                                               YM01548
         OI    SIOT+SCTSBYT1-INDMSIOT,SIOTQDSN SET QUAL DSN     YM01548
DSNP15   DS    0H                 LOOP TO BYPASS ALL DSNAME PARAMS
         NI    SWI,255-DSNLIT      CLEAR LIT SW TO AVOID DISP      AACA
*                                       CHECKS IN CLEANUP RTN.     AACA
         BALR  RE,R9              GET KEY
         B     DSNP15             BYPASS DSNAME
         SPACE 2
*                                                                  AACA
*    DSN MAY APPEAR IN QUOTES.  IF THE DSN IS IN QUOTES THEN-      AACA
*        . SCAN RTN SET 'LITERAL SW' IN IWA                        AACA
*        . QUOTES MUST ENCLOSE ENTIRE NAME                         AACA
*        . THE NAME CANNOT EXCEED 44 CHARS                         AACA
*        . ONLY SEQUENTIAL DATA SETS CAN BE SPECIFIED              AACA
*        . DISP=CATLG CANNOT BE SPECIFIED ( CHECKED IN CLEANUP RTN)AACA
         SPACE
DSNP16   DS    0H                                                  AACA
         CLI   0(R3),JDSNAME1      MAX LENGTH                      AACA
         BH    DSNP0110            NAME TOO LONG - GO TO ERR RTN   AACA
         LTR   R2,R2               NULL NAME                       AACA
         BZ    DSNP15              GO TO GET NEXT KEY              AACA
         BCTR  R2,R0               FOR EXECUTE OF MOVE             AACA
         EX    R2,DSNP1604         MOVE NAME TO JFCB               AACA
         B     DSNP090             GO GET NEXT KEY                 AACA
         SPACE
DSNP1604 MVC   JFCB+JFCBDSNM-INFMJFCB(1),1(R3)                     AACA
         SPACE 2
DSNP80   DC    H'8'                                                3565
DSNPRD   DC    AL1(DDPERIOD)                                       3565
DSNMVTOC DC    X'2C'          LENGTH OF DSNAME FIELD           @ZA16056
         DC    44X'04'        VTOC DSNAME                      @ZA16056
         EJECT
*              ************************************************** 20001
*              *                                                * 20001
*              *           PROCESSING ROUTINE FOR TERM          * 20001
*              *                   A TSO KEYWORD                * 20001
*              ************************************************** 20001
         SPACE 3
TERMP    DS    0H                                                 20001
         BALR  RE,R8               GO TO TEST AND STORE    TSO    20001
         L     RE,WANELPTR         LOAD ADDRESS OF NEL.          Y02668
         USING VDANEL,RE
         TM    NELOPSWT,NELTSOP   SHOLUD TERM BE PROCESSED        20010
         DROP  RE
         BNO   DUMMY1              NO - SKIP TERM KEYWORD  TSO    20001
         OI    SIOT+SIOTTSTC-INDMSIOT,SIOTTERM    SET TERM BIT  TSO
         B     DUMMY0        PROCESS AS DUMMY-SET DUMMY SWITCH    M4105
*                            TO PREVENT OVERLAYING NULLFILE DSNAMEM4105
*                            IF DSNAME PARAMETER IS SPECIFIED ON  M4105
*                            THE DD CARD.                         M4105
         EJECT
*              ***************************************************
*              *                                                 *
*              *      PROCESSING ROUTINE FOR DUMMY               *
*              *                                                 *
*              ***************************************************
         SPACE 2
DUMMYP   DS    0H
         TM    SWY2,DUMMYSW        LEGAL DUMMY PARM SPECIFIED?  YM02716
         BZ    COMMON              NO, DUMM= SPEC'D. JCL ERROR. YM02716
*                                  BYPASS DUMMY PROCESSING IF     20029
         TM    DDSWA,DSSYSSW      SYSOUT OR DSNAME KEYWORD SPECIFIED?
         BO    DUMMY1             YES,IGNORE DUMMY SPECIFICATION.
         TM    DDSWA,DDSUBSW       HAS SUBSYS BEEN PROCESSED?  @ZM44657
         BO    DUMMY1              YES,IGNORE DUMMY PARM       @ZM44657
DUMMY0   DS    0H                  BLANK DSNAME FIELD OF JFCB     16670
         OI    DDSWA,DSDUMSW      SET LWA SWITCH FOR DUMMY.
         MVI   JFCB+JFCBDSNM-INFMJFCB,DDBLANK                     16670
         MVC   JFCB+JFCBDSNM-INFMJFCB+1(DD51),JFCB+JFCBDSNM-INFMJFCB
         MVC   JFCB+JFCBDSNM-INFMJFCB(8),DDNAMEP9 NULLFILE TO JFCB
         OI    SIOT+SCTSBYT1-INDMSIOT,SCTDUMMY    SET DUMMY BIT
DUMMY1   DS    0H
         BALR  RE,R9              GET KEY
         B     DUMMY1
         SPACE 3
*              ************************************************** 19874
*              *                                                * 19874
*              *    ERROR PROCESSING ROUTINE FOR DUMMY - DYNAM  * 19874
*              *                                                * 19874
*              ************************************************** 19874
         SPACE 3
COMMON   DS    0H                                                 19874
         MVI   MSGSEC,ERMES30      INVALID KEYWORD                19874
         MVI   MSGKEY,ERMES110     ON THE DD STATEMENT            19874
         B     CLEANUP                                            19874
         EJECT
*              ************************************************** 20001
*              *                                                * 20001
*              *           PROCESSING ROUTINE FOR DYNAM         * 20001
*              *                                                *Y02668
*              ************************************************** 20001
         SPACE 3
DYNAMP   DS    0H                                          TSO    20001
         TM    SWY2,DYNAMSW        IEFVFA PROCESS DYNAM    TSO    20001
         BZ    COMMON              NO - KEYWORD IN ERROR   TSO    20001
*                                  BYPASS DYNAM PROCESSING IF     20029
         TM    DDSWA,DSSYSSW      SYSOUT OR DSNAME KEYWORD SPECIFIED?
         BO    DUMMY1             YES,IGNORE DYNAM SPECIFICATION
         TM    DDWA2,JDICTI3      WAS DD REFERRED TO BY DDNAME=
*                                  PARAMETER                      20029
         BO    DYNAMP1             YES, ERROR                     20029
         LH    RF,SCT+SCTNIUSL-INSMSCT GET CURRENT COUNT OF      Y02668
*                                  DYNAMS FOR THIS STEP(INCLUD   Y02668
*                                  VALUE OF DYNAMNBR)            Y02668
         LA    RF,DD1(RF)          INCREMENT COUNT FOR THIS DYNAMY02668
         STH   RF,SCT+SCTNIUSL-INSMSCT SAVE UPD COUNT IN SCT.THISY02668
*                                  FIELD IS LATER ADDED TO A     Y02668
*                                  FIELD CONTAINING THE TOTAL    Y02668
*                                  NUMBER OF STATIC DD'S IN      Y02668
*                                  A STEP(SCTLALOC)              Y02668
         BALR  RE,R9               GO TO GET NEXT KEY            Y02668
DYNAMP1  DS    0H                                                 20029
         MVI   MSGSEC,ERMES69      INVALID REFER FORWARD TO DYNAM 20029
         MVI   MSGKEY,DD0          CLEAR SECONDARY MSG            20029
         B     CLEANUP             WRITE MESSAGE                  20029
         EJECT
*              **************************************************
*              *                                                *
*              *        EXPDT KEYWORD PROCESSING ROUTINE        *
*              *                                                *
*              **************************************************
         SPACE 2
EXPDTP   DS    0H                 PROCESS EXPDT KEY.
         LTR   R2,R2              IS THERE AN OPERAND
         BC    ZERO,EXPDTP01      NO TRANSFER ERROR.
         CLI   DD0(R3),DD5        IS OPERAND LENGTH 5.
         BC    NOT-EQUAL,EXPDTP02 NO TRANSFER ERROR
         OI    JFCB+JFCBFLG3-INFMJFCB,JFCBEXP                  @ZA27071
*                 INDICATE EXPDT SPECIFIED                     @ZA27071
         LA    R2,DD2             LOAD REGISTER WITH 2
         BALR  RE,R8              GO TO TEST AND STORE
         LA    R3,DD2(R3)         BUMP TEXT POINTER
         LA    R2,DD3             LOAD REGISTER WITH 3.
         BALR  RE,R8              GO TO TEST AND STORE.
* TEST TO DETERMINE IF AN EXPDT OF ZERO WAS SPECIFIED            A23350
         OC    JFCB+JFCBXPDT-INFMJFCB(3),JFCB+JFCBXPDT-INFMJFCB  A23350
         BNZ   EXPDTP00                 IF 0 NOT STORED BRANCH   A23350
         OC    JFCB+JFCBXPDT-INFMJFCB(3),XPDTZERO SYMBOLIC 0     A23350
EXPDTP00 DS    0H                                                A23350
         BAL   R1,CLEAN20         SET CREATE DATE.
         BALR  RE,R9              GO TO GET KEY
EXPDTP01 DS    0H                 ENTER
         MVI   MSGSEC,ERMES46     ERROR NO OPERAND.
         B     CLEANUP            GO TO CLEAN UP
EXPDTP02 DS    0H                 ENTER
         MVI   MSGSEC,ERMES43     ERROR OPERAND NOT LENGTH 5
         B     CLEANUP            GO TO CLEAN UP
         EJECT
************************************************************     Y02670
*                                                          *     Y02670
*             FREE KEYWORD PROCESSING ROUTINE              *     Y02670
*                                                          *     Y02670
************************************************************     Y02670
FREEP    DS    0H                                                Y02670
         BALR  RE,R8               GO TO TEST AND STORE RTNE     Y02670
         CLI   MSGSEC,DD0          CHECK FOR ERROR MESSAGE       Y02670
         BE    FREEP1              NO MSG, GO GET NEXT KEY       Y02670
         MVI   MSGSEC,DD0          ZERO MSGSEC                   Y02670
         MVI   MSGKEY,DD0         CLEAR MSG FIELD                Y02670
         LA    R2,WRNMSG01         LOAD ERROR MSG CODE.         YM01592
         L     RF,DIEFVGM          GET MESSAGE MODULE ADDRESS    Y02670
         BALR  RE,RF               GO PRINT OUT MESSAGE          Y02670
FREEP1   BALR  RE,R9               GO GET NEXT KEY               Y02670
         EJECT
*              ********************************************************
*              *                                                      *
*              *   UCS AND FCB PROCESSING                        20202*
*              *                                                      *
*              ********************************************************
UCSP     DS    0H                 PROCESS UCS
         XC    JFCB+JFCUCSID-INFMJFCB(JFCUCSOP-JFCUCSID),JFCB+JFCUCSID-X
               INFMJFCB                CLEAR UCS ID FIELD         20202
         NI    JFCB+JFCUCSOP-INFMJFCB,255-JFCFOLD-JFCVER
*              CLEAR UCS OPERATION BITS IN THE JFCB FIELD.
         B     UCSP0A                  BRANCH AROUND FCB          20202
FCBP     DS    0H                 FCB.                            20202
         NI    JFCB+JFCUCSOP-INFMJFCB,255-JFCFCBAL-JFCFCBVR
*              CLEAR FCB OPERATION BITS IN THE JFCB FIELD
         LTR   R2,R2              IS FIRST PARAMETER NULL     @ZM40457
         BE    UCSP0B             YES,CHECK FOR OVERRIDE      @ZM40457
         MVI   JFCB+JFCFCBID-INFMJFCB,DDBLANK  MOVE 1 BLANK   @ZM40457
        MVC   JFCB+JFCFCBID-INFMJFCB+1(DD3),JFCB+JFCFCBID-INFMJFCB
*                      INITIALIZE FCB ID TO BLANKS           @ZM40457
         B     UCSP01           GO TO TEST AND STORE          @ZM40457
UCSP0A   LTR   R2,R2                   IS FIRST PARAM NULL        20202
         BNE   UCSP01             NO  - TRANS
UCSP0B   L     R1,TNUMPX          YES - GET NUMBER BYTE PTR    @ZM40457
         CLI   0(R1),1            IS IT ONE PARAM
         BE    UCSP02             YES - THIS IS O'RIDE
         MVI   MSGSEC,ERMES46     ERROR FIRST PARAM IS NULL
         B     CLEANUP
UCSP01  DS     0H
         BALR  RE,R8              TEST AND STORE
UCSP02   DS    0H
         BALR  RE,R9              GET KEY
         B     UCSP01             LOOP
         EJECT
*              *************************************************
*              *                                                *
*              *     RECFM AND OPTCD KEYWORD PROCESSING         *
*              *                                                *
*              **************************************************
         SPACE 2
RECFMP   DS    0H                 PROCESS RECFM KEY.
         CLI   DD0(R3),DD5        IS OPERAND GREATER THAN FIVE
         BC    HIGH,RECFMP04      YES TRANSFER ERROR
OPTCDP   DS    0H
BFTEKP   DS    0H                         BFTEK
         BALR  RE,R8              CLEAR BYTE IN JFCB
         SR    R1,R1
         IC    R1,0(R4)           COUNT BYTE IN PDT
         LA    R4,0(R1,R4)        BUMP TEST AND STORE POINTER
         LTR   R2,R2
         BC    ZERO,RECFMP03
         LR    R1,R2              SAVE LENGTH FOR COUNTER
         LA    R2,DD1             SET REGISTER TO ONE FOR TEST & STORE
         B     RECFMP02           TRANSFER
RECFMP01 DS    0H                 ENTER FOR LOOP.
         LA    R3,DD1(R3)         BUMP POINTER
         SR    RF,RF              CLEAR REGISTER
         ST    RF,TPDTP           SET PDT POINTER FOR TEST AND STORE.
RECFMP02 DS    0H                 ENTER
         BALR  RE,R8              GO TO TEST & STORE.
         BCT   R1,RECFMP01        LOOP BACK.
RECFMP03 DS    0H                 ENTER.
         BALR  RE,R9              GO TO GET KEY
RECFMP04 DS    0H                 ENTER
         MVI   MSGSEC,ERMES42     OPERAND TOO LONG
         B     CLEANUP            GO TO CLEANUP.
         EJECT
*              **************************************************
*              *                                                *
*              *         REF KEYWORD PROCESSING ROUTINE         *
*              *                                                *
*              **************************************************
         SPACE 2
REFP     DS    0H                 PROCESS REF KEY.
         OI    SIOT+SCTSBYT2-INDMSIOT,SCTVOLAF  SET VOL REF AFFINITY ON
         LTR   R2,R2              IS LENGTH ZERO
         BC    ZERO,REFP04        YES TRANSFER ERROR             Y02668
         CLI   DD1(R3),DDASTER    IS CHARACTER ASTERICK
         BC    NOT-EQUAL,REFP03   NO TRANSFER.
*
*  IF ASTERISK IS FOLLOWED BY PERIOD ( *.DD ) WHICH INDICATES
*      A REFERBACK, THE LENGTH FIELD MUST HAVE A LENGTH OF ONE.
*    IF NOT LENGTH OF ONE THEN PERIOD MUST BE MISSING.
*
         CLI   DD0(R3),X'01'                                      18768
         BNE   DCBP10                                             18768
         BCTR  R3,R0              DECREMENT TEXT POINTER
****                                                           @ZA31245
*  IF ASTERISK FOLLOWED BY COMMA LENGTH FIELD WILL BE ONE, BUT @ZA31245
*  COUNT FIELD WILL BE X'81' FOR A SUB-LIST WITH A COUNT OF ONE@ZA31245
*  AN ERROR MESSAGE WILL BE ISSUED FOR REF=*,                  @ZA31245
****                                                           @ZA31245
         CLI   DD0(R3),X'81'      IS COUNT ONE                 @ZA31245
         BE    DCBP10             INVALID REFERBACK ERROR MSG  @ZA31245
         BAL   RE,INTRSTEP                                     @ZA06978
*   RETURN FOR WITHIN STEP REFERBACK                           @ZA06978
         OI    SIOT+SCTSBYT3-INDMSIOT,SCTVREF SET REFBACK IN ST YM05425
*   RETURN FOR INTRASTEP REFERBACK                             @ZA06978
         SPACE
REFP01   DS    0H                 ENTER
         BALR  RE,R9              GO TO GET KEY
         BAL   RE,DSRTN            GO TO DICTIONARY SEARCH RTN     AACA
         MVC   SIOT+SIOTVRSB-INDMSIOT(DD3),DD2(R1) MOVE SIOT TTR.
         MVI   QPARM+QMPOP-QMNAM,QMREAD  SET READ                 21670
         MVI   QPARM+QMPNC-QMNAM,DD1    SET FOR ONE READ          21670
         MVC   DD4(DD3,R5),DD2(R1) PUT TTR OF SIOT IN REMOTE LIST 21670
         LA    R1,JFCBX           GET ADDRESS OF AREA FOR SIOT    21670
         ST    R1,DD0(R5)          PUT ADDRESS IN REMOTE LIST     21670
         BALR  RE,R6              GO TO Q MANAGER                 21670
         MVI   DISPLID(R5),DD0    ZERO BLOCK ID IN REMOTE LIST TO
*                                 PREVENT INCORRECT IDENTIFICATION
*                                 OF NEXT BLOCK WRITTEN.  SWA MGR USES
*                                 THIS ID, IF NONZERO.  IF ZERO, IT
*                                 USES ID AT OFFSET OF 3 BYTES IN
*                                 BLOCK WRITTEN.               @ZA10649
*  TEST SIOT TO SEE IF VOL=REF REQUESTED TO DUMMY DATA SET        21670
         TM    JFCBX+SCTSBYT1-INDMSIOT,SCTDUMMY   IS THE SIOT READ IN
*                                          BY QMGR FOR DD DUMMY   21670
         BO    DUMMY0     GO SET DUMMY BIT IF VOL=REF TO DUMMY    21670
REFP02   DS    0H                 ENTER LOOP
         BALR  RE,R9              GO TO GET KEY
         B     REFP02             LOOP BACK
         SPACE
REFP03   DS    0H                 ENTRY FOR DSNAME
         OI    SIOT+SCTSBYT3-INDMSIOT,SCTDSNRF  SET DSN VOL REF SW ON
         OI    SWC,VOLREF    SET INDICATOR FOR DSN TABLE       @ZA01890
*                            SUBROUTINE THAT CALL IS FOR       @ZA01890
*                            DSN VOL REF                       @ZA01890
         BAL   RE,DSNTP           BRANCH TO PROCESS DSN TABLE    Y02668
         NI    SWC,DD255-VOLREF TURN OFF DSN VOL REF INDICATOR @ZA01890
         BALR  RE,R9              GO GET NEXT KEY                Y02668
REFP04   DS    0H                 ENTER                          Y02668
         MVI   MSGSEC,ERMES46     ERROR NO OPERANDS
         B     CLEANUP            GO TO CLEANUP.
         EJECT
*              **************************************************
*              THIS CODE TESTS FOR INTRASTEP REFERBACK         @ZA06978
*              (*.DDNAME OR *.STEPNAME.PROCNAME.DDNAME OR      @ZA06978
*              *.STEPNAME.DDNAME). RETURN ADDRESS IS IN        @ZA06978
*              REGISTER RE. IF INTRASTEP REFERBACK, THE        @ZA06978
*              RETURN ADDRESS IS UPDATED BY 4.                 @ZA06978
*              THE JFCBX FIELD IS USED HERE AS WORK SPACE          AACA
DDPROCNM EQU   JFCBX                                               AACA
DDSTEPNM EQU   DDPROCNM+8                                          AACA
*              **************************************************
         SPACE
INTRSTEP CLI   DD0(R3),DD130       IS THIS HEX 82              @ZA06978
         BE    REFP007                 YES (*.DDNAME)          @ZA06978
         MVI   DDPROCNM,C' '           PUT BLANK IN 1ST BYTE       AACA
         MVC   DDPROCNM+1(15),DDPROCNM BLANK 4 WDS                 AACA
         SR    R2,R2                   ZERO REG2                 PTM671
         IC    R2,DD3(R3)              LENGTH OF STEPNAME        PTM671
         BCTR  R2,0                    LESS 1 FOR EXECUTE        PTM671
         CLI   DD0(R3),DD131           IS KEY=83?                PTM671
         BE    REFP003                 YES/BRANCH                PTM671
         EX    R2,BUFF1                MOVE PROCSTEPNAME         PTM671
         LA    R4,DD5(R2,R3)           POINT TO PROC STEPNAME    PTM671
         IC    R2,0(R4)                GET LENGTH OF PROCNAME    PTM671
         BCTR  R2,0                    LESS 1 FOR EXECUTE        PTM671
         EX    R2,BUFF2                MOVE STEPNAME             PTM671
         B     REFP005                                           PTM671
REFP003  DS    0H                                                PTM671
         EX    R2,BUFF3                MOVE STEPNAMETO BUFF2     PTM671
REFP005  DS    0H                                                PTM671
         CLC   SCT+SCTSNAME-INSMSCT(DD8),DDSTEPNM                  AACA
         BNE   REFP006                 STEPNAMES EQUAL NO-BR   @ZA06978
         CLC   SCT+SCTSCLPC-INSMSCT(DD8),DDPROCNM                  AACA
         BE    REFP007                 PROCSTPNAMES EQUAL,YES BR PTM671
         CLI   DDPROCNM,C' '       IS PROCSTEPNAME = BLANK         AACA
         BE    REFP007             YES - BRANCH                @ZA06978
REFP006  DS    0H                  INTRASTEP REFERBACK,        @ZA06978
         LA    RE,4(,RE)           UPDATE RETURN ADDRESS       @ZA06978
REFP007  DS    0H                                              @ZA06978
         BR    RE                  RETURN TO CALLER            @ZA06978
         SPACE
BUFF1    MVC   DDPROCNM(0),DD4(R3) CALLING STEPNAME                AACA
BUFF2    MVC   DDSTEPNM(0),DD1(R4) STEPNAME IN PROC                AACA
BUFF3    MVC   DDSTEPNM(0),DD4(R3) STEPNAME NOT IN PROC            AACA
         EJECT
*              **************************************************
*              *                                                *
*              *        RETPD KEYWORD PROCESSING ROUTINE.       *
*              *                                                *
*              **************************************************
         SPACE 2
RETPDP   DS    0H                 ENTRY FOR RETPD PROCESSING
         LTR   R2,R2              IS LENGTH ZERO
         BC    ZERO,RETPDP03      YES TRANSFER ERROR
         CLI   DD0(R3),DD4        IS LENGTH GREATER THAN 4
         BC    HIGH,RETPDP04      YES TRANSFER ERROR
         BALR  RE,R8              GO TO TEST AND STORE
         L     R4,AEXPDTT         RESET POINTER TO PDT.
         BAL   R1,CLEAN19         SET EXP AND CREATE DATE
         LH    R1,DDWA6           GET NUMBER OF DAYS
         LH    R2,JFCB+JFCBXPDT-INFMJFCB+DD1 GET DAYS
         LA    R4,JEXPDT1         DECIMAL 99 IS THE MAXIMUM      R00398
*                                 VALUE TO BE ENTERED IN THE     R00398
*                                 EXPIRATION DATE (YEAR PORTION) R00398
         AR    R2,R1              ADD DAYS
         LA    R1,DD365                                          A50000
RETPDP01 DS    0H                 FOR LOOP
         SR    R2,R1              SUBTRACT 365
         BC    LOW+ZERO,RETPDP02  TRANSFER ON ZERO OR NEGATIVE
         SR    R3,R3              R3 TO BE USED FOR YEAR         YM4003
         IC    R3,JFCB+JFCBXPDT-INFMJFCB GET YEAR
         LA    R3,DD1(R3)         ADD ONE TO YEAR
         CR    R3,R4              HAS THE MAXIMUM YEAR DATE BEEN R00398
*                                 REACHED? (JFCBXPDT=X'63')DEC99)R00398
         BNL   RETPDEFT           ASSUME THE DEFAULT RETPD=99.365R00398
         STC   R3,JFCB+JFCBXPDT-INFMJFCB PUT BACK YEAR
         B     RETPDP01           LOOP BACK
         SPACE
         SPACE
* THE FOLLOWING CODE WAS ADDED TO PREVENT DATA SETS WITH LONG  * R00398
* RETENTION PERIODS FROM HAVING EXPIRATION DATES LOWER THAN    * R00398
         SPACE
* THEIR CREATION DATE. THIS SITUATION CAN ARISE AFTER AUG 1972 * R00398
* BECAUSE WHEN THE RETENTION PERIOD OF 9999 DAYS IS ADDED TO   * R00398
* THE DATE SET AT IPL, AN EXPIRATION DATE IN THE 21ST CENTURY  * R00398
* IS CALCULATED. THE LAST TWO DIGITS OF THE YEAR ARE STORED,   * R00398
* THEREFORE, ANY DATA SET CREATED UNDER SIMILIAR CONDITIONS    * R00398
* COULD BE IMMEDIATELY SCRATCHED.                              * R00398
         SPACE
RETPDEFT DS    0H                                                R00298
         LA    R3,JEXPDT1        DEFAULT YEAR EXPIRATION DATE=99 R00398
         STC   R3,JFCB+JFCBXPDT-INFMJFCB DEFAULT DATE TO JFCB    R00398
         SR    R2,R2              DEFAULT DAYS = 365 WHEN ADDED  R00398
         SPACE
RETPDP02 DS    0H                 ENTER
         AR    R2,R1              RESTORE POSITIVE DAYS
         STH   R2,JFCB+JFCBXPDT-INFMJFCB+DD1 PUT DAYS AWAY
         BALR  RE,R9              GO TO GET KEY
RETPDP03 DS    0H                 ENTER
         MVI   MSGSEC,ERMES46     ERROR NO OPERAND
         B     CLEANUP            GO TO CLEAN UP
RETPDP04 DS    0H                 ENTER
         MVI   MSGSEC,ERMES42     ERROR OPERAND GREATER THAN 4.
         B     CLEANUP            GO TO CLEAN UP
         EJECT
************************************************************     Y02668
*                                                          *     Y02668
*              HOLD KEYWORD PROCESSING ROUTINE             *     Y02668
*                                                          *     Y02668
************************************************************     Y02668
         SPACE
HOLDP    DS    0H                 HOLD                           Y02668
         L     RF,TEXTBUFP        ESTABLISH ADDRESSIBILITY       Y02668
         USING TEXT,RF            ON THE INTERNAL TEXT STRING    Y02668
         TM    STRDINDC,DTXSYOUT  SYSOUT SPECIFIED?              Y02668
         BZ    HOLDP1             NO, IGNORE KEY                 Y02668
         BALR  RE,R8              GO TO TEST AND STORE           Y02668
         CLI   MSGSEC,DD0         CHECK FOR ERROR MSG            Y02668
         BE    HOLDP1             NO GO TO GET NEXT KEY          Y02668
         MVI   MSGSEC,DD0         CLEAR MSGSEC                   Y02668
         MVI   MSGKEY,DD0         CLEAR MSG FIELD                Y02668
         LA    R2,WRNMSG06        PUT MSG IN REG. FOR VGM        Y02668
         L     RF,DIEFVGM         GET MSG MOD ADDRESS            Y02668
         BALR  RE,RF              BRANCH TO MSG MODULE           Y02668
HOLDP1   DS    0H                                                Y02668
         BALR  RE,R9              GO TO GET NEXT KEY             Y02668
         EJECT
*              **************************************************
*              *                                                *
*              *         SER KEYWORD PROCESSING ROUTINE         *
*              *                                                *
*              **************************************************
         SPACE 2
SERP     DS    0H                 ENTRY FOR SER PROCESSING
         BCTR  R3,R0              DECREMENT POINTER
         CLI   DD0(R3),DD0        IS NUMBER BYTE ZERO
         BC    EQUAL,SERP13       YES TRANSFER ERROR
         SR    R0,R0              CLEAR REGISTER
         IC    R0,DD0(R3)         GET COUNT OF OPERANDS.
         LA    R3,DD1(R3)         RESTORE POINTER
         CLI   DD0(R3),DD0             IS LENGTH BYTE ZERO?      A34497
         BC    EQUAL,SERP001       IS LENGTH BYTE ZERO?        @ZA28079
         MVI   JFCB+JFCBVOLS-INFMJFCB,DDBLANK MOVE IN BLANK
         MVC   JFCB+JFCBVOLS-INFMJFCB+DD1(JFCBEXTL-JFCBVOLS-DD1),JFCB+J1
               FCBVOLS-INFMJFCB   PROPIGATE BLANKS IN JFCB
         B     SERP02             TRANSFER.
SERP001  DS    0H                  ENTRY FOR NEXT OPERAND      @ZA28079
         LA    R1,DD1             LOAD REGISTER WITH ONE       @ZA28079
         CLR   R0,R1              MORE THAN ONE OPERAND?       @ZA28079
         BC    HIGH,SERP13        YES ERROR                    @ZA28079
SERP01   DS    0H                  ENTER                       @ZA28079
         BALR  RE,R9              GO TO GET KEY.
SERP02   DS    0H                 ENTRY FOR FIRST TIME.
         CLI   DD0(R3),DD6        IS LENGTH GREATER THAN SIX      17006
         BC    HIGH,DSNP0110      YES ERROR                       17006
         CLI   DD0(R3),DD0        IS LENGTH BYTE ZERO.
         BC    EQUAL,SERP14       YES TRANSFER ERROR.
         BCTR  R2,R0              DECREMENT LENGTH FOR MOVE
         SR    RF,RF              CLEAR REGISTER
         IC    RF,SIOT+SCTVOLCT-INDMSIOT GET VOL SER COUNT.
         LA    R1,DD5             LOAD REGISTER WITH FIVE
         CLR   RF,R1              IS VOL SER COUNT LESS THAN FIVE
         BC    LOW,SERP07         YES TRANSFER.
         SR    RF,R1              SUBTRACT FIVE FROM VOL SER COUNT.
         BC    NOT-ZERO,SERP03    TRANSFER GREATER THAN FIVE
         BAL   R1,SERP21          SET UP FIRST EXTENT
         B     SERP06             TRANSFER
SERP03   DS    0H                 ENTER.
         LA    R1,DD15
SERP04   DS    0H                 FOR LOOR
         SR    RF,R1              SUBTRACT 28 FROM VOL SER COUNT.
         BC    LOW,SERP05         TRANSFER THERE IS SPACE.
         BC    HIGH,SERP04        LOOP BACK.
         BAL   R1,SERP22          SET UP ADDITIONAL EXTENT
         B     SERP06             TRANSFER
SERP05   DS    0H                 ENTER
         AR    RF,R1              RESTORE VOL SER COUNT.
SERP06   DS    0H                 ENTER FOR JFCBX
         BAL   RE,SERP17          SIX TIMES VOL SER COUNT
         LA    R4,JFCBX           JFCBX ADDRESS.
         LA    RF,DD4(R4,RF)      COMPUTE OFFSET INTO JFCBX
         B     SERP08              BR TO MOVE VOL SER.           Y02668
SERP07   DS    0H                 ENTER FOR JFCB
         BAL   RE,SERP17          SIX TIMES VOL SER COUNT
         LA    R4,JFCB+JFCBVOLS-INFMJFCB JFCB ADDRESS
         LA    RF,DD0(R4,RF)      COMPUTE OFF SET INTO JFCB
SERP08   DS    0H                                                Y02670
         EX    R2,SERP18           MOVE VOL SER NUMBER           Y02670
SERP11   DS    0H                 ENTER.
         SR    R1,R1              CLEAR REGISTER.
         IC    R1,SIOT+SCTVOLCT-INDMSIOT GET VOL SER COUNT FROM SIOT
         LA    R1,DD1(R1)         BUMP COUNT BY ONE
         STC   R1,SIOT+SCTVOLCT-INDMSIOT PUT VOL SER COUNT IN SIOT
         STC   R1,JFCB+JFCBNVOL-INFMJFCB PUT VOL SER COUNT IN JFCB
         BCT   R0,SERP01          LOOP BACK FOR NEXT OPERAND
         CLC   SERP20(DD3),JFCB+JFCBEXAD-INFMJFCB IS THERE JFCBX TABLE.
         BC    EQUAL,SERP12       NO TRANSFER
         BAL   R1,SERP23          WRITE JFCBX TO Q
SERP12   DS    0H                 ENTER
         BALR  RE,R9              GO TO GET KEY
SERP13   DS    0H                 ENTER
         MVI   MSGSEC,ERMES46     ERROR NO OPERAND
         B     CLEANUP            GO TO CLEANUP
SERP14   DS    0H                 ENTER
         MVI   MSGSEC,ERMES46     ERROR NULL OPERAND
         B     CLEANUP            GO TO CLEANUP.
SERP15   DS    0H                 ENTER FOR JFCBX SET UP.
         XC    JFCBX(DD8),JFCBX   CLEAR FIRST EIGHT BYTES.
         MVI   JFCBX+DD4,DDBLANK
         MVC   JFCBX+DD5(171),JFCBX+DD4 BLANK JFCBX
         BR    RE                 RETURN
SERP16   DS    0H                 ENTER FOR ASSIGN SET UP
         MVI   QPARM+QMPOP-QMNAM,QMASGN SET ASSIGN.
         MVI   QPARM+QMPNC-QMNAM,DD1*DD16 SET ONE ASSIGN
         BR    RE                 RETURN
SERP17   DS    0H                 ENTER FOR COMPUTE OF COUNT
         LR    R1,RF              PUT COUNT IN TWO REGISTERS
         SLL   RF,DD2             FOUR TIMES COUNT.
         SLL   R1,DD1             TWO TIMES COUNT
         AR    RF,R1              SIX TIMES COUNT
         BR    RE                 RETURN
SERP18   DS    0H                                                Y02670
         MVC   DD0(DD0,RF),DD1(R3) EXECUTED MOVE                 Y02670
SERP20   DS    0H
         DC    X'00000000'
SERP21   DS    0H                 SUBROUTINE FOR FIRST EXTENT
         MVC   TTRS(DD3),TNEXT    SAVE TTR FOR CHAIN
         MVC   JFCB+JFCBEXAD-INFMJFCB(DD3),TNEXT TTR IN JFCB
         BAL   RE,SERP15          FIRST JFCBX TABLE
         BAL   RE,SERP16          ASSIGN
         BALR  RE,R6              Q MANAGER
         MVC   TNEXT(DD4),DD0(R5) SAVE ASSIGNED TTR
         BR    R1                 RETURN
SERP22   DS    0H                 SUBROUTINE TO ASSIGN EXTENSION
         MVC   DD4(DD3,R5),TTRS   TTR FOR THIS EXTENSION
         MVC   TTRS(DD3),TNEXT
         MVC   JFCBX(DD3),TNEXT
         LA    R4,JFCBX
         MVI   DISPLID(R5),JFCBXID PUT BLOCK ID INTOR REMOTE   @ZA08164
*                                  LIST OF QMPA.  DESTINATION  @ZA08164
*                                  IS SWA PREFIX FOR BLOCK     @ZA08164
         ST    R4,DD0(R5)         ADDRESS TO REMOTE LIST
         BALR  RE,R6              Q MANAGER
         MVI   DISPLID(R5),DD0    CLEAR BLOCK ID FIELD         @ZA08164
*                                 PREVENT INCORRECT            @ZA08164
*                                 IDENTIFICATION OF NEXT BLOCK @ZA08164
*                                 WRITTEN                      @ZA08164
         BAL   RE,SERP15          SET UP JFCB
         MVC   TNEXT(DD4),DD0(R5) SAVE TTR
         BR    R1                 RETURN TO CALLER             @ZA08164
SERP23   DS    0H
         MVI   QPARM+QMPOP-QMNAM,QMWRTE SET WRITE
         LA    R4,JFCBX
         ST    R4,DD0(R5)         IN REMOTE LIST
         MVC   DD4(DD3,R5),TTRS         TTR IN LIST
         MVI   DISPLID(R5),JFCBXID PUT BLOCK ID INTO REMOTE LIST Y02621
         BALR  RE,R6              Q MANAGER
* AFTER BLOCK IS WRITTEN, CLEAR BLOCK ID IN REMOTE LIST TO       Y02621
* PREVENT INCORRECT IDENTIFICATION OF NEXT BLOCK WRITTEN. SWA    Y02621
* MGR USES  THIS ID IF NONZERO. IF ZERO, IT WILL USE ID IN BLOCK.Y02621
         MVI   DISPLID(R5),DD0     ZERO ID IN REMOTE LIST        Y02621
         BAL   RE,SERP15          CLEAR JFCBX BUFFER           @ZA08164
         BR    R1
         EJECT
***********************************************************      Y02668
*                                                         *      Y02668
*                DEST KEYWORD PROCESSING ROUTINE          *      Y02668
*                                                         *      Y02668
***********************************************************      Y02668
         SPACE
DESTP    DS    0H                                                Y02668
         L     RF,TEXTBUFP         ESTABLISH ADDRESSABILITY      Y02668
         USING TEXT,RF             ON INTERNAL TEXT STRING       Y02668
         TM    STRDINDC,DTXSYOUT   SYSOUT SPECIFIED?             Y02668
         BZ   DESTP1               NO, IGNORE KEY                Y02668
         DROP  RF                                                Y02668
         BALR  RE,R8               GO TO TEST AND STORE ROUTINE  Y02668
DESTP1   DS    0H                                                Y02668
         BALR  RE,R9               GO GET NEXT KEY               Y02668
         EJECT
*        ***************************************************     Y02668
*        *                                                 *     Y02668
*        *         BUFMAX KEYWORD PROCESSING ROUTINE       *     Y02668
*        *                                                 *     Y02668
*        ***************************************************     Y02668
BUFMAXP  DS    0H                                                Y02668
         BALR  RE,R8              GO TO TEST & STORE             Y02668
         CLI   JFCB+JFCBUFMX-INFMJFCB,DD2 BUFMAX LESS THAN TWO?  Y02668
         BL    BUFMAXP1           YES ERROR                      Y02668
         BALR  RE,R9              GO GET NEXT KEY                Y02668
BUFMAXP1 DS    0H                                                Y02668
         MVI   JFCB+JFCBUFMX-INFMJFCB,DD0 ZERO BUFMAX FIELD      Y02668
         MVI   MSGSEC,ERMES135    MOVE IN ERROR MSG              Y02668
         B     CLEANUP                                           Y02668
         EJECT
***********************************************************      Y02668
*                                                         *      Y02668
*              COPIES KEYWORD PROCESSING ROUTINE          *      Y02668
*                                                         *      Y02668
***********************************************************      Y02668
         SPACE
COPIESP  DS    0H                                                Y02668
         BALR  RE,R8               GO TO TEST AND STORE ROUTINE  Y02668
         CLI   MSGSEC,DD0          CHECK FOR ERROR MESSAGE       Y02668
         BE    COPIESP1           NO, GO CHECK FOR ZERO VALUE    Y02668
         MVI   MSGSEC,DD0          ZERO MSGSEC                   Y02668
         B     COPIESP2                                          Y02668
COPIESP1 DS    0H                                                Y02668
         CLI   SIOT+SIOTOUTC-INDMSIOT,DD0 ZERO VALUE SPEC'D?     Y02668
         BNE   COPIESP3           NO, GO TO GET NEXT KEY         Y02668
COPIESP2 DS    0H                                                Y02668
         MVI   SIOT+SIOTOUTC-INDMSIOT,JCOPIES2 MOVE IN DEFAULT   Y02668
         MVI   MSGKEY,DD0         CLEAR MSG FIELD                Y02668
         LA    R2,WRNMSG02        PUT MSG IN REG. FOR VGM        Y02668
         L     RF,DIEFVGM          GET MESSAGE MODULE ADDRESS    Y02668
         BALR  RE,RF               GO PRINT OUT MESSAGE          Y02668
         MVI   MSGKEY,COPIESK      RESTORE KEY FOR POSSIBLE    @Z40MPTH
*                                  ERROR MESSAGE               @Z40MPTH
COPIESP3 DS    0H                                              @Z40MPTH
         BALR  RE,R9              GET NEXT KEY OR PARAMETER    @Z40MPTH
         MVI   MSGSEC,DD0         DEFAULT PROCESSING REQUIRES  @Z40MPTH
*              THAT AN ERROR MSG BE DETECTED FROM IEFVGT.      @Z40MPTH
         SR    RF,RF              CLEAR WORK REGISTER...       @Z40MPTH
         LA    RF,JFCBEX+JFCGROUP-INGMJFCE  ADDRESS OF SUB N   @Z40MPTH
*              FIELD IN ORDER TO STEP THRU ONE AT A TIME..     @Z40MPTH
COPIESP4 DS    0H                 LOOP TO STEP THRU SUB N'S    @Z40MPTH
         LTR   R2,R2              IS SUBLIST POSIT. NULL       @Z40MPTH
         BZ    COPIESR1           YES,INVALID FORMAT ERROR..   @Z40MPTH
         BALR  RE,R8              PUT SUBLIST VALUE INTO JFCBE.@Z40MPTH
         CLI   MSGSEC,DD0         DID IEFVGT DETECT AN ERRO ?  @Z40MPTH
         BNE   CLEANUP            YES,GO TO CLEANUP WITH MSG   @Z40MPTH
*              CODE INSERTED BY IEFVGT.NO DEFAULTS FOR SUBLISTS@Z40MPTH
         CLI   DD0(RF),DD0        BINARY SUBLIST VALUE ZERO ?  @Z40MPTH
         BE    COPIESR2           YES,INVALID NUMERIC ERROR..  @Z40MPTH
         LA    RF,DD1(RF)         POINT TO NEXT STORE POSITION @Z40MPTH
         BALR  RE,R9              GET NEXT SUBLIST VALUE OR KEY@Z40MPTH
         B     COPIESP4           CONTINUE INTERROGATING THE   @Z40MPTH
*              SUBLIST VALUES UNTIL ALL ARE FINISHED.IF MORE   @Z40MPTH
*              THAN 8 PARAMETERS ARE GIVEN,IEFVGT WILL FLAG AS @Z40MPTH
*              ERROR WHEN IT RUNS OUT OF PDT ENTRIES FOR KEY.. @Z40MPTH
         SPACE 3
COPIESR1 DS    0H                                              @Z40MPTH
         MVI   MSGSEC,ERMES32     FORMAT ERROR IN COPIES KEY   @Z40MPTH
         B     CLEANUP          FAIL JOB AND EXIT....          @Z40MPTH
COPIESR2 DS    0H                                              @Z40MPTH
         MVI   MSGSEC,ERMES135    INVALID NUMERICS IN COPIES.. @Z40MPTH
         B     CLEANUP            FAIL JOB AND EXIT...         @Z40MPTH
         EJECT
*              **************************************************
*              *                                                *
*              *        SPACE KEYWORD PROCESSING ROUTINE        *
*              *                                                *
*              **************************************************
         SPACE 2
SPACEP   DS    0H                 PROCESS SPACE KEY.
         LTR   R2,R2               IS REQ. SPACE PARM PRESENT
         BZ    SPACEP09            NO
         OI    DDSWA,DDSPSW       SET SPACE INDICATOR IN LWA.
         BCTR  R3,R0              BACK UP POINTER                Y02668
         CLI   0(R3),DD2          AT LEAST TWO PARAMETERS?      YM01593
         LA    R3,DD1(R3)         RESTORE POINTER                Y02668
         BL    SPACE10            NO, ERROR                      Y02668
         SR    RE,RE              CLEAR REGISTER                YM01865
         IC    RE,0(R3)           INSERT LTH INTO REGISTER      YM01865
         LA RE,1(RE)              ADJUST TO START OF FIELD      YM01865
         AR    RE,R3              INDEX TO NEXT LTH FIELD       YM01865
         CLI   0(RE),DD0          LENGTH EQUAL TO ZERO?         YM01865
         BE    SPACE10            YES,ERROR                     YM01865
         BALR  RE,R8              GO TO TEST & STORE
SPACEP00 EQU   *                                                   4003
         BALR  RE,R9              GO TO GET KEY
         TM    DDWA2,JDICTI5      WAS ABSTR SPECIFIED AS POSITIONAL?
         BO    SPACEP07           YES,RESET PDT PTR FOR ABSTR
         LTR   R2,R2              IS PRIMARY QUANTITY PRESENT?   A47563
         BZ    SPACEP09           NO,ERROR MSG-REQ. POS. MISSING A47563
         BCTR  R3,R0              DECREMENT POINTER
         CLI   DD0(R3),DDCK       IS CHARACTER K
         BC    EQUAL,SPACEP02     YES TRANSFER
         CLI   DD0(R3),DDCL       IS CHARACTER L.
         BC    EQUAL,SPACEP02     YES TRANSFER
         CLI   DD0(R3),DDN9       IS HEX GREATER THAN NINE
         BC    HIGH,SPACEP01      YES TRANSFER
         CLI   DD0(R3),DDN0       IS HEX CHARACTER NUMERIC.
         BC    HIGH+EQUAL,SPACEP02 YES TRANSFER
SPACEP01 DS    0H                 ENTER
         CLI   DD0(R3),DD130      IS THIS SUBLIST TWO OPERANDS
         BC    EQUAL,SPACEP03     YES TRANSFER
         CLI   DD0(R3),DD131      IS THIS SUBLIST THREE OPERANDS
         BC    NOT-EQUAL,SPACEP08 NO TRANSFER ERROR
         LA    R3,DD1(R3)         RESTORE POINTER
         B     SPACEP06           TRANSFER FOR SUBLIST THREE OPERANDS
SPACEP02 DS    0H                 ENTER FOR ONE OPERAND
         LA    R3,DD1(R3)         RESTORE POINTER
         B     SPACEP04           TRANSFER FOR ONE OPERAND.
SPACEP03 DS    0H                 ENTER FOR SUBLIST TWO OPERANDS
         LA    R3,DD1(R3)         RESTORE POINTER
         BALR  RE,R8              GO TO TEST & STORE
         BALR  RE,R9              GO TO GET KEY
SPACEP04 DS    0H                 ENTER FOR ONE OPERAND
         BALR  RE,R8              GO TO TEST & STORE
         BALR  RE,R9              GO TO GET KEY
         L     R1,ASPACT18        RESET POINTER TO PDT.
SPACEP05 DS    0H                 ENTER FROM ABSTR
         ST    R1,TCPDTP          SET LOCATION FOR TEST & STORE
SPACEP06 DS    0H                 ENTER FOR SUBLIST THREE OPERANDS
         BALR  RE,R8              GO TO TEST & STORE
         BALR  RE,R9              GO TO GET KEY
         B     SPACEP06           LOOP BACK
SPACEP07 DS    0H                 ENTER FOR ABSTR
         L    R1,ASPACT32         RESET POINTER TO PDT.
         B     SPACEP05           TRANSFER
SPACEP08 DS    0H                 ENTER
         MVI   MSGSEC,ERMES40     SUBLIST HAS TOO MANY OPERANDS.
         B     CLEANUP            GO TO CLEANUP.
SPACEP09 DS    0H
         L     R1,TNUMPX           GET NUMBER BYTE PTR             4003
         CLI   0(R1),1             IS IT ONE PARAMETER             4003
         BE    SPACEP00            YES - OVERRIDE                  4003
SPACE10  EQU   *                                                 Y02668
         MVI   MSGSEC,ERMES46      REQ. POS. PARM MISSING
         B     CLEANUP
         EJECT
*              **************************************************Y02668
*              *                                                *Y02668
*              *   SYSIN COUNT PROCESSING ROUTINE               *Y02668
*              *                                                *Y02668
*              **************************************************Y02668
         SPACE 2
SYSINCTP DS    0H                  THE SYSIN COUNT KEY IS        Y02668
*                                  INTERNALLY USED TO COMMUNICATEY02668
*                                  TO THE INTERPRETER, THE       Y02668
*                                  NUMBER OF SYSIN RECORDS       Y02668
*                                  SPOOLED BY THE JOB ENTRY      Y02668
*                                  SUBSYSTEM.   JESS INSERTS THE Y02668
*                                  KEY AND VALUE IN TEXT AT THE  Y02668
*                                  POST SCAN EXIT (VFA), IN THE  Y02668
*                                  CONVERTER, FOR EACH DD*/DATA  Y02668
         CLI   DD0(R3),DD4         IS THE LENGTH OF THE SYSIN    Y02668
*                                  COUNT EQUAL TO 4?             Y02668
         BE    SYSINCT1            YES, CONTINUE                 Y02668
*   GO TO VHR    NO, THERE IS A SYSTEM ERROR - TREAT AS I/O ERRORY02668
*                                  PUT WTO                       Y02668
         MVI   IWARET+DD1,DD8      INDICATE I/O ERROR            Y02668
         L     RF,TERMRTN          GET TERMINATION ADDRESS       Y02668
         BR    RF                  GO TO TERMINATION             Y02668
*                                  INTERPRETER                   Y02668
SYSINCT1 DS    0H                                                Y02668
         L     RF,SCT+SCTSMF-INSMSCT GET CURRENT COUNT OF SYSIN  Y02668
*                                  RECORDS FOR THIS STEP         Y02668
         MVC   SCT+SCTSMF-INSMSCT(DD4),DD1(R3) OVERLAY WITH SYSINY02668
*                                  COUNT FOR THIS DD */DATA      Y02668
         A     RF,SCT+SCTSMF-INSMSCT INCREMENT CURRENT STEP COUNTY02668
*                                  WITH CURRENT DD */DATA COUNT  Y02668
         ST    RF,SCT+SCTSMF-INSMSCT SAVE UPDATED COUNT IN SCT   Y02668
*                                  THE INDIVIDUAL STEP COUNTS    Y02668
*                                  ARE LATER TOTALED AND PLACED  Y02668
*                                  IN THE JMR (VHH)              Y02668
         BALR  RE,R9               GO TO GET THE NEXT KEY        Y02668
         EJECT
*              **************************************************
*              *                                                *
*              *      SUBALLOC KEYWORD PROCESSING ROUTINE       *
*              *                                                *
*              **************************************************
         SPACE 2
SUBALLOP DS    0H                 PROCESS SUBALLOC KEY.
         CLI   DD0(R3),DD0        IS PARAMETER LENGTH ZERO?      A37598
         BZ    SUBALLO            YES, NULLIFY SUBALLOC= PARM.   A37598
         BALR  RE,R8              GO TO TEST & STORE
SUBALLO  BALR  RE,R9              GO TO GET KEY                  A37598
         BCTR  R3,R0              DECREMENT POINTER
         CLI   DD0(R3),DDCK       IS CHARACTER K.
         BC    EQUAL,SUB02        YES TRANSFER
         CLI   DD0(R3),DDCL       IS CHARACTER L.
         BC    EQUAL,SUB02        YES TRANSFER
         CLI   DD0(R3),DDN9       IS HEX GREATER THAN NINE
         BC    HIGH,SUB01         YES TRANSFER.
         CLI   DD0(R3),DDN0       IS HEX GREATER OR EQUAL ZERO.
         BC    HIGH+EQUAL,SUB02   YES TRANSFER
SUB01    DS    0H                 ENTER
         CLI   DD0(R3),DD131      IS THIS HEX 83.
         BC    EQUAL,SUB03        YES TRANSFER
         CLI   DD0(R3),DD130      IS THIS HEX 82.
         BC    NOT-EQUAL,SUB10    NO TRANSFER ERROR.
         LA    R3,DD1(R3)         RESTORE POINTER
         B     SUB04              TRANSFER
SUB02    DS    0H                 ENTER FOR ONE OPERAND
         LA    R3,DD1(R3)         RESTORE POINTER
         B     SUB05              TRANSFER
SUB03    DS    0H                 ENTER FOR SUBLIST THREE OPERANDS.
         LA    R3,DD1(R3)         RESTORE POINTER.
         BALR  RE,R8              GO TO TEST & STORE
         BALR  RE,R9              GO TO GET KEY.
SUB04    DS    0H                 ENTER TWO OPERANDS
         BALR  RE,R8              GO TO TEST & STORE
         BALR  RE,R9              GO TO GET KEY
SUB05    DS    0H                 ENTER ONE OPERAND
         BALR  RE,R8              GO TO TEST & STORE
         BALR  RE,R9              GO TO GET KEY.
         CLI   DD0(R3),DD0        IS LENGTH BYTE ZERO.
         BC    EQUAL,SUB11        YES TRANSFER ERROR.
         BCTR  R3,R0              DECREMENT POINTER
         CLI   DD0(R3),DDN9       IS CHARACTER GREATER THAN NINE
         BC    HIGH,SUB06         YES TRANSFER
         CLI   DD0(R3),DDN0       IS CHARACTER GREATER EQUAL ZERO
         BC    HIGH+EQUAL,SUB07   YES TRANSFER.
SUB06    DS    0H                 ENTER
         CLI   DD0(R3),DD130      IS THIS HEX 82.
         BC    EQUAL,SUB06A       YES, TEST IF THIS STEP         A27043
         CLI   DD0(R3),DD131      IS THIS HEX 83
         BC    NOT-EQUAL,SUB12    NO, TRANSFER ERROR             A27043
*                                 TESTING FOR STEPNMME.PROCSTEP. A27043
*                                 DDNAME                         A27043
*                                                                A27043
*                                 R2 HAS  LNGTH OF FIRST PARM    A27043
         BCTR  R2,R0              DECREMENT FOR COMPARE          A27043
*                                 THE IWA FIELDS TENDP,CURLE AND A43671
*                                 LASLE HAVE BEEN EQUATED TO     A43671
*                                 TSAVEP TO PROVIDE AN AREA FOR  A43671
*                                 THE NAME COMPARISON.           A43671
         MVC   TSAVEP(DD8),BLANKS CLEAR NAME EXPANSION FIELD.    A43671
         EX    R2,SUBMOVE         MOVE NAME TO FIELD FOR CMPR.   A43671
         CLC   SCT+SCTSCLPC-INSMSCT(DD8),TSAVEP  COMPARE NAME OF A43671
*                                 STEP WHICH CALLED PROC TO PARM A43671
         BC    NOT-EQUAL,SUB08    REFERENCE TO ANOTHER STEP      A27043
         LA    R3,DD1(R3)         RESTORE POINTER                A27043
         BALR  RE,R9              GO TO GET KEY                  A27043
         BCTR  R3,R0              DECREMENT POINTER              A27043
SUB06A   DS    0H                 TEST FOR REFERENCE THIS STEP   A27043
         BCTR  R2,R0              DECREMENT FOR COMPARE          A27043
         MVI   DD0(R3),DD130       MOVE IN HEX '82' FOR SEARCH   A27043
         MVC   TSAVEP(DD8),BLANKS CLEAR NAME COMPARISON FIELD    A43671
         EX    R2,SUBMOVE         MOVE NAME TO FIELD FOR COMPR.  A43671
         CLC   SCT+SCTSNAME-INSMSCT(DD8),TSAVEP COMPARE STEPNAME A43671
*                                 IN SCT WITH NAME IN PARAMETER. A43671
         BC    NOT-EQUAL,SUB08    REFERENCE TO ANOTHER STEP.     A43671
         LA    R3,DD1(R3)         RESTORE POINTER                A27043
         BALR  RE,R9              GO TO GET KEY                  A27043
         BCTR  R3,R0              DECREMENT POINTER              A27043
SUB07    DS    0H                 ENTER FOR REFER BACK IN STEP
         OI    SIOT+SCTSBYT3-INDMSIOT,SCTVREF SET VOLREF IN STP YM05425
         MVI   DD0(R3),DD129      MOVE IN HEX 81 FOR SEARCH
SUB08    DS    0H                 ENTER
         LA    R3,DD1(R3)         RESTORE POINTER
         BAL   RE,DSRTN            GO TO DICTIONARY SEARCH RTN     AACA
         MVC   SIOT+SIOTVRSB-INDMSIOT(DD3),DD2(R1) MOVE SIOT TTR.
**********************************************************************
*
*              CONVERT SUBALLOC TO NORMAL SPACE REQUEST
*              BY MARKING MODEL DUMMY AND SETTING VOL
*              AFFINITY BIT IN CURRENT SIOT
*
**********************************************************************
         MVI   QPARM+QMPOP-QMNAM,QMREAD SET READ                 Y02661
         MVI   QPARM+QMPNC-QMNAM,DD1   SET READ FOR ONE          Y02661
         LA    RF,JFCBX                ADDRESS SIOT READ-IN AREA Y02661
         ST    RF,DD0(R5)              STORE ADDRESS IN PARM AREAY02661
         MVC   DD4(DD3,R5),DD2(R1)     PUT SIOT TTR IN PARM AREA YO2661
         BALR  RE,R6                   Q-MNGR READ MODEL DD SIOT Y02661
**********************************************************************
         OI    JFCBX+SCTSBYT1-INDMSIOT,SCTDUMMY MARK MODEL DUMMY Y02661
         NI    JFCBX+SCTSBYT1-INDMSIOT,255-SIOTGDSN-SIOTQDSN   @ZA10487
*              SO ALLOCATION WILL NOT ENQUEUE ON NULLFILE      @ZA10487
         OI    SIOT+SCTSBYT2-INDMSIOT,SCTVOLAF  SET VOL AFFINITY Y02661
         MVI   SIOT+SCTUTYPE-INDMSIOT,DDBLANK   BLANK SIOT TYPE  Y02661
         MVC   SIOT+SCTUTYPE-INDMSIOT+1(DD7),SIOT+SCTUTYPE-INDMSIOT
         LA    R0,JFCBX                         ADDRESS OF MODEL Y02661
         ST    R0,0(R5)                         TO REMOTE LIST   Y02661
         MVI   QPARM+QMPOP-QMNAM,QMWRTE         SET WRITE        Y02661
         BALR  RE,R6                    HAVE Q-MNGR WRITE MODEL  Y02661
         MVC   DD4(DD3,R5),JFCBX+SCTPJFCB-INDMSIOT JFCB TTR TO   Y02661
*                                                  REMOTE LIST   Y02661
         LA    R0,JFCBX                MODEL JFCB READ-IN AREA   Y02661
         ST    R0,DD0(R5)              STORE IN REMOTE LIST      Y02661
         MVI   QPARM+QMPOP-QMNAM,QMREAD SET READ                 Y02661
         BALR  RE,R6           HAVE Q-MNGR READ MODEL JFCB       Y02661
         MVI   JFCBX+JFCBDSNM-INFMJFCB,DDBLANK BLANK OUT DSNAME YM05584*
                                               FOR MODEL.       YM05584
         MVC   JFCBX+JFCBDSNM-INFMJFCB+1(43),JFCBX+JFCBDSNM-INFMJFCB
         MVC   JFCBX+JFCBDSNM-INFMJFCB(8),DDNAMEP9 DSN=NULLFILE  Y02661
         CLC   JFCBX+JFCMSVGP-INFMJFCB(8),BLANKS IS MASS STORAGE VOL
*                                      GROUP SPECIFIED?        @ZA15344
         BE    SUB085                  NO,BYPASS MSVGP PROC    @ZA15344
         MVC   JFCB+JFCMSVGP-INFMJFCB(8),JFCBX+JFCMSVGP-INFMJFCB
*                                      COPY GROUP NAME FROM MODEL
*                                      JFCB TO NEW JFCB        @ZA15344
         OI    JFCB+JFCBCTRI-INFMJFCB,JFCBMSGP
*                                      REQUEST MSVGP VOL       @ZA15344
         OI    SIOT+SCTSDISP-INDMSIOT,PRIVATE REQUEST PRIVATE  @ZA15344
SUB085   DS    0H                                              @ZA15344
         LA    R0,JFCBX                MODEL JFCB LOCATION       Y02661
         ST    R0,DD0(R5)              PUT IN REMOTE LIST        Y02661
         MVI   QPARM+QMPOP-QMNAM,QMWRTE SET WRITE JFCB           Y02661
         BALR  RE,R6           HAVE Q-MNGR WRITE JFCB            Y02661
**********************************************************************
SUB09    DS    0H                 ENTER FOR LOOP
         BALR  RE,R9              GO TO GET KEY
         B     SUB09              LOOP BACK
SUBMOVE  MVC   TSAVEP(0),DD2(R3)  MOVE PARM INTO COMPARE FIELD.  A43671
SUB10    DS    0H                 ENTER
         MVI   MSGSEC,ERMES40     TOO MANY OPERANDS IN SPACE.
         B     CLEANUP            GO TO CLEANUP
SUB11    DS    0H                 ENTER
         MVI   MSGSEC,ERMES46     NULL OPERAND IN REFER BACK
         B     CLEANUP            GO TO CLEANUP
SUB12    DS    0H                 ENTER
         MVI   MSGSEC,ERMES40     TOO MANY OPERANDS IN REFER BACK
         B     CLEANUP            GO TO CLEANUP
         EJECT
*              **************************************************
*              *                                                *
*              *       SYSOUT KEYWORD PROCESSING ROUTINE        *
*              *                                                *
*              **************************************************
         SPACE  3
SYSOUTP  DS    0H                  PROCESS SYSOUT KEY             20029
*                                  BYPASS SYSOUT PROCESSING IF    20029
         TM    DDSWA,DSDUMSW      DUMMY OR DYNAM SPECIFIED ON CARD?
         BO    SYSOUTP3           YES,IGNORE SYSOUT KEYWORD.   @ZA08756
         OI    DDSWA,DSSYSSW      SET SYSOUT OVERRIDE SWITCH IN LWA.
         CLI   DD0(R3),DD0         IS LENGTH OF 1ST POSITION ZERO?
*                                                              @ZA08756
         BNZ   SYSOUTP4            NO, CLASS IS SPECIFIED      @ZA08756
         LR    RE,R3               WORK REG FOR TEXT PTR       @ZA07483
         BCTR  RE,R0              DECREMENT PTR TO LOOK        @ZA07483
* AT # OF PARMS BYTE IN TEXT                                   @ZA07483
         CLI   DD0(RE),DD1         IS SYSOUT NULLIFIED?        @ZA08756
         BE    SYSOUTP1            YES,DONT MARK AS SYSOUT     @ZA07483
* CONDITION OF SYSOUT WITH FIRST POSITION NULL AND ANOTHER     @ZA15012
* PARAMETER SPECIFIED. DEFAULT SYSOUT CLASS TO MSGCLASS        @ZA15012
         MVC   SIOT+SCTOUTPN-INDMSIOT(DD1),JCT+JCTJMGPO-INJMJCT
*                                                              @ZA15012
*                                 MOVE MSGCLASS FROM JCT       @ZA15012
         OI    SIOT+SCTSBYT3-INDMSIOT,JSYSOUT3  SYSOUT BIT ON  @ZA15012
         OI    JFCB+JFCBTSDM-INFMJFCB,JSYSOUT0  MARK JFCB      @ZA15012
         OI    JFCB+JFCBLTYP-INFMJFCB,JSYSOUT6  STANDARD LABEL @ZA15012
SYSOUTP4 DS    0H                                              @ZA08756
         OI    SIOT+SIOTBYT0-INDMSIOT,SIOTSSDS SUBSYSTEM WILL    Y02668
*                                     PROCESS THIS DATA SET      Y02668
SYSOUTP2 EQU   *                                               @ZA07483
         BALR  RE,R8               GO TO TEST AND STORE          Y02668
SYSOUTP1 BALR  RE,R9               GO TO GET KEY                 Y02668
         B     SYSOUTP2            LOOP BACK                   @ZA07483
SYSOUTP3 DS    0H                                              @ZA08756
         BALR  RE,R9               GO TO GET KEY               @ZA08756
         B     SYSOUTP3            LOOP THRU GET KEY TO SPACE  @ZA08756
*                                  BEYOND INTERNAL TEXT FOR    @ZA08756
*                                  SYSOUT WITH MULTIPLE        @ZA08756
*                                  PARAMETERS                  @ZA08756
         EJECT
*              *****************************************       @Y30OPTD
*              *                                       *       @Y30OPTD
*              *    COMMON MULTIOPERAND ROUTINE        *       @Y30OPTD
*              *    DOESN'T FLAG NULL KEYWORDS         *       @Y30OPTD
*              *    FLAGS NULL POSITIONS AS ERRORS     *       @Y30OPTD
*              *                                       *       @Y30OPTD
*              *****************************************       @Y30OPTD
         SPACE 2                                               @Z40MPTH
FLASHP   DS    0H                                              @Z40MPTH
MODIFYP  DS    0H                                              @Z40MPTH
CHARSP   DS    0H                                              @Z40MPTH
         SPACE 2                                               @Y30OPTD
DSIDP    DS    0H                                              @Y30OPSB
         LTR   R2,R2               IS OPERAND LENGTH ZERO      @Y30OPTD
         BNZ   VDACOM2             NO - GO TO PROCESS OPERAND  @Y30OPTD
         BCTR  R3,0                YES - GET PARAMETER # PTR   @Y30OPTD
         CLI   DD0(R3),DD1         IS THIS A NULL OPERAND      @Y30OPTD
         BNE   VDACOM3             NO - GO TO ERROR            @Y30OPTD
         BALR  RE,R9               YES - GO TO GET NEXT KEY    @Y30OPTD
VDACOM1  DS    0H                  LOOP TO PROCESS OPERANDS    @Y30OPTD
         LTR   R2,R2               IS OPERAND LENGTH ZERO      @Y30OPTD
         BZ    VDACOM3             YES - GO TO ERROR           @Y30OPTD
VDACOM2  DS    0H                  NO - PROCESS OPERAND        @Y30OPTD
         BALR  RE,R8               GO TO TEST & STORE          @Y30OPTD
         BALR  RE,R9               GO TO GET KEY               @Y30OPTD
         B     VDACOM1             LOOP TO PROCESS NEXT OPERAND@Y30OPTD
VDACOM3  DS    0H                  ERROR EXIT                  @Y30OPTD
         MVI   MSGSEC,ERMES43      1EF643I UNDEF. POSIT.PARAM. @Y30OPTD
         B     CLEANUP             GO TO CLEAN UP ROUTINE      @Y30OPTD
         EJECT
*              *********************************************
*              *                                           *
*              * UNIT AFF AND SEP KEYWORD PROCESSING RTN.  *
*              *                                           *
*              *********************************************
         SPACE 2
AFFMP    DS    0H                 PROCESS UNIT AFF KEY
         L     RE,TEXTBUFP        LOAD TEXT STRING POINTER     @ZA08746
         USING TEXT,RE            SET ADDRESSABILITY TO PREFIX @ZA08746
         TM    STRDINDC,DTXSYOUT  WAS SYSOUT SPECIFIED?        @ZA08746
         BO    AFFSEP02           YES, IEGNORE AFF/SEP         @ZA08746
         DROP  RE                 RELEASE THE REGISTER         @ZA08746
         TM    DDSWA,DDUNSW       INVALID UNIT AFFINITY SETUP DETECTED?
*                                 UNIT=(,,,AFF=DDNAME,,) IS EXAMPLE.
         BZ    AFF00               NO, CONTINUE NORMALLY.       YM01578
         MVI   MSGKEY,UNITK      PUT UNIT KEY IN FOR ERROR        M0491
*                                MESSAGE                          M0491
         B     SUB12             GO PUT OUT ERROR MSSG, EXCESSIVE M0491
*                                NUMBER OF POSITIONAL PARAMETERS  M0491
*                                IN UNIT PARM                     M0491
AFF00    DS    0H                                               YM01578
         LTR   R2,R2               IS REQ. PARM PRESENT           19432
         BZ    SPACEP09            NO                             19432
         LA    RF,SIOT+SCTUSADD-INDMSIOT GET ADDRESS IN SIOT
         BCTR  R3,R0              DECREMENT TEXT POINTER
         CLI   DD0(R3),DD0        IS THE NUMBER BYTE ZERO
         BC    NOT-ZERO,AFFSEP01  NO TRANSFER TO COMMON ROUTINE
         MVI   MSGSEC,ERMES46     ERROR NO OPERAND
         B     CLEANUP            GO TO CLEANUP
AFFSEP01 DS    0H                 ENTRY FOR COMMON PROCESSING.
         SR    R0,R0              CLEAR REGISTER.
         IC    R0,DD0(R3)         GET NUMBER BYTE
         LA    R3,DD1(R3)         RESTORE TEXT POINTER
         B     AFFSEP03           TRANSFER
AFFSEP02 DS    0H                 ENTRY FOR LOOP.
         BALR  RE,R9              GO TO GET KEY.
AFFSEP03 DS    0H                 FIRST ENTRY.
         CLI   DD0(R3),DD0        IS LENGTH BYTE ZERO.
         BC    EQUAL,AFFSEP04     YES TRANSFER ERROR.
         BCTR  R3,R0              DECREMENT TEXT POINTER.
         MVI   DD0(R3),DD129      PUT HEX 81 FOR DICTIONARY SEARCH.
         LA    R3,DD1(R3)         RESTORE TEXT POINTER
         BAL   RE,DSRTN            GO TO DICTIONARY SEARCH RTN     AACA
         MVI   QPARM+QMPOP-QMNAM,QMREAD SET READ
         MVI   QPARM+QMPNC-QMNAM,DD1 SET FOR ONE READ
         MVC   DD4(DD3,R5),DD2(R1) PUT TTR OF SIOT IN REMOTE LIST
         LA    R1,JFCBX           GET ADDRESS OF AREA FOR SIOT.
         ST    R1,DD0(R5)         PUT ADDRESS IN REMOTE LIST.
         BALR  RE,R6              GO TO Q MANAGER
*                            ENSURE AFF/SEP TO EARLIER DD STMT:   20602
*                            PREVENT SLIP THRU DSRTN ERROR CHECK  20602
*                            BY USE OF KEYWORD PARAMETER 'DDNAME' 20602
         CLC   SIOT+SCTDDINO-INDMSIOT(2),JFCBX+SCTDDINO-INDMSIOT Y02668
         BNH   DCBP10        TO SET UP ERRMSG & GO TO CLEANUP     20602
         MVC   DD0(DD2,RF),JFCBX+SCTDDINO-INDMSIOT MOVE DD NO.  YM00392
         LA    RF,DD1(RF)         BUMP POINTER TO SIOT
         BCT   R0,AFFSEP02        LOOP BACK FOR NEXT OPERAND.
         BALR  RE,R8               GO TO TEST AND STORE.        YM01578
         TM    SIOT+SCTSBYT1-INDMSIOT,SCTUNAFF UNIT AFF SPEC?    A42970
         BZ    AFFSEP3A           NO                             A42970
         MVC   SIOT+SCTUTYPE-INDMSIOT+5(DD3),JFCBX+SIOTDSKA-INDMSIOT   *
                                   MOVE SVA OF REFERENCED SIOT. YM00384
         MVI   SIOT+SCTUTYPE-INDMSIOT+4,X'FF'                    Y02668
*                                  INDICATE TTR PRESENT          Y02668
* TEST SIOT TO SEE IF AFF OR SEP REQUESTED TO DUMMY DATA SET      16670
AFFSEP3A TM    JFCBX+SCTSBYT1-INDMSIOT,SCTDUMMY   SIOT READ IN   A42970
*                                              BY QMGR FOR DD DUMMY6670
         BO    AFFSEP10       IF AFF OR SEP ATTEMPTED TO DUMMY    16670
AFFSEP05  DS   0H                                                 16670
         BALR  RE,R9              GO TO GET KEY
AFFSEP04 DS    0H                 ENTRY FOR ERROR
         MVI   MSGSEC,ERMES46     ERROR NULL OPERAND
         B     CLEANUP            GO TO CLEANUP.
AFFSEP10 DS    0H   SPECIAL PROCESSING FOR REFERBACK TO DD DUMMY  16670
         TM    SIOT+SCTSBYT1-INDMSIOT,SCTUNAFF    UNIT AFF SPECIFIED?
         BO    DUMMY0        GO SET DUMMY BIT IF UNIT AFF TO DUMMY16670
         B     AFFSEP05            RETURN TO NORMAL PROCESSING    16670
         EJECT
*
*    GET VCON FOR DICTIONARY SEARCH RTN AND GO THERE               AACA
*       ( RE HAS RET ADDR )                                        AACA
*
DSRTN    DS    0H
         STM   RE,RF,TSAVEP        TEMP SAVE                       AACA
         L     RF,DIEFVGS          DICTIONARY SEARCH RTN           AACA
         BALR  RE,RF               GO TO DICTIONARY SEARCH         AACA
         LM    RE,RF,TSAVEP        RESTORE                         AACA
         BR    RE                  RET                             AACA
         EJECT                                                    20002
*              ************************************************** 20002
*              *                                                * 20002
*              * BUFIN KEYWORD PROCESSING ROUTINE               * 20002
*              *                                                * 20002
*              ************************************************** 20002
BUFINP   DS    0H                                                 20002
         BALR  RE,R8                   GOTO TEST AND STORE        20002
         IC    R0,DDWA61               GET CVBED BYTE             20002
         SLL   R0,4          MOVE INTO HIGH ORDER 4 BITS          20002
         STC   R0,DDWA61               INTO WORK AREA FOR BUFIN   20002
         MVZ   JFCB+JFCBUFIN-INFMJFCB(1),DDWA61   INTO JFCB       20002
         BALR  RE,R9                   GOTO GETKEY                20002
         EJECT                                                    20002
*              ************************************************** 20002
*              *                                                * 20002
*              *BUFOUT KEYWORD PROCESSING ROUTINE               * 20002
*              *                                                * 20002
*              ************************************************** 20002
BUFOUTP  DS    0H                                                 20002
         BALR  RE,R8                   GOTO TEST AND STORE        20002
         MVN   JFCB+JFCBFOUT-INFMJFCB(1),DDWA61  LOW 4 BITS       20002
         BALR  RE,R9                   GOTO GETKEY                20002
         EJECT                                                    20002
*              ************************************************** 20002
*              *                                                  20002
*              * PCI KEYWORD PROCESSING ROUTINE                   20002
*              *                                                  20002
*              ************************************************** 20002
PCIP     DS    0H                                                 20002
*                   ZERO OUT IN JFCB TO CLEAR BYTE FOR REFERBACKS 20002
         XC    JFCB+JFCPCI-INFMJFCB(1),JFCB+JFCPCI-INFMJFCB       20002
PCIP1    BALR  RE,R8                   GOTO TEST AND STORE        20002
         BALR  RE,R9                   GOTO GETKEY                20002
         B     PCIP1              LOOP TO GET NEXT POSITIONAL PARAM.
         EJECT                                                    20002
*        ******************************************************** 20002
*        *                                                        20002
*        * RESERVE KEYWORD PROCESSING ROUTINE                     20002
*        *                                                        20002
*        ******************************************************** 20002
RESERVEP  DS   0H                                                 20002
*                  ZERO OUT FOUR BYTES IN JFCB FOR REFERBACKS     20002
         XC    JFCB+JFCRESRV-INFMJFCB(2),JFCB+JFCRESRV-INFMJFCB  Y02668
NXPARM   BALR  RE,R8                   GOTO TEST AND STORE        20002
         BALR  RE,R9                   GOTO GET KEY               20002
         B     NXPARM                  PROCESS NEXT SUBPARAMETER  20002
         EJECT
*              **************************************************21088
*              *                                                 *21088
*              *     FUNC KEYWORD PROCESSING ROUTINE             *21088
*              *                                                 *21088
*              ***************************************************21088
FUNCP    DS    0H                                                 21088
         BALR  RE,R8              CLEAR BYTE IN JFCB              21088
         LTR   R2,R2              IS PARM NULL                    21088
         BZ    FUNCP01            YES                             21088
         OI    JFCB+JFCBFLG2-INFMJFCB,JFCBBUFF SET BIT TO INDICATE21088
*                                 TO OPEN THAT A NON-ZERO VALUE   21088
*                                 IN JFCBOTTR FIELD IS NOT A      21088
*                                 TTR                             21088
FUNCP01  SR    R1,R1                                              21088
         IC    R1,0(R4)           COUNT BYTE IN PDT               21088
         LA    R4,0(R1,R4)        BUMP TEST AND STORE POINTER     21088
         BALR  RE,R8              SET BITS                        21088
         BALR  RE,R9              GET KEY                        Y02668
         EJECT
*               ***********************************************@G29AN2E
*               *                                             *@G29AN2E
*               *    SUBSYS KEYWORD PROCESSING ROUTINE        *@G29AN2E
*               *                                             *@G29AN2E
*               ***********************************************@G29AN2E
         SPACE 1
SUBSYSP  DS    0H                                              @G29AN2E
         SPACE 1
***************************************************************@G29AN2E
*                                                             *@G29AN2E
*   ON ENTRY, R2=LENGTH OF PARM                               *@G29AN2E
*             R3=POINTER TO LENGTH BYTE                       *@G29AN2E
*                                                             *@G29AN2E
*   THIS ROUTINE DETERMINES THE LENGTH OF THE SSWA THAT IS    *@G29AN2E
*   NEEDED. THE LENGTH OF THE SSWA= LENGTH OF THE SSWA HEADER *@G29AN2E
*   + THE LENGTHS OF EACH LEN-SSPARM PAIR. (THE LENGTH OF THE *@G29AN2E
*   LEN BYTE=1.  THE LENGTH OF THE SSPARM IS THE VALUE IN     *@G29AN2E
*   THE LEN BYTE.)                                            *@G29AN2E
*                                                             *@G29AN2E
*   AS INTERNAL TEXT IS SCANNED TO DETERMINE THE SIZE OF THE  *@G29AN2E
*   SSWA THE FOLLOWING INFORMATION IS GATHERED AND STORED IN  *@G29AN2E
*   THE FOLLOWING FIELDS:                                     *@G29AN2E
*                                                             *@G29AN2E
*            NUMBER OF SSPARMS - SSPRMNO                      *@G29AN2E
*            LENGTH OF SSNAME - SSNML                         *@G29AN2E
*            ADDRESS OF SSNAME - SSNMPTR                      *@G29AN2E
*            ADDRESS OF FIRST LEN-SSPARM PAIR - SSPRMPTR      *@G29AN2E
*                                                             *@G29AN2E
*   AFTER THE FIRST LEN-SSPARM PAIR IS REACHED, REGISTER USAGE*@G29AN2E
*   IS AS FOLLOWS:                                            *@G29AN2E
*             R1  COUNT OF SSPARMS REMAINING TO BE ACCOUNTED  *@G29AN2E
*             RE  RUNNING TOTAL LENGTH OF SSWA                *@G29AN2E
*             RF  MOVING POINTER TO POSITION IN INTERNAL TEXT *@G29AN2E
*                                                             *@G29AN2E
*   AFTER THE LENGTH OF THE SSWA IS DETERMINED,A PARM LIST    *@G29AN2E
*   AND AN EXTERNAL PARM AREA IS BUILT FOR THE SWA MANAGER    *@G29AN2E
*   FOR LOCATE MODE. THE SWA LOCATE MODE FLAG IS SET IN THE   *@G29AN2E
*   COMWA AND BALR TO VHQ IS TAKEN TO ASSIGN LOCATE THE SSWA. *@G29AN2E
*   ON RETURN THE SSWA IS BUILT AND WRITTEN TO SWA. THEN      *@G29AN2E
*   THE SSWA IS LINKED TO THE SIOT.                           *@G29AN2E
*                                                             *@G29AN2E
*   A BALR TO TEST AND STORE ROUTINE TO PROCESS THE PDT IS    *@G29AN2E
*   TAKEN. THE SUBSYSTEM NAME IS MOVED TO THE SIOT, THE       *@G29AN2E
*   SIOTSSGP AND SIOTSSDS FLAGS ARE TURNED ON IN THE SIOT AND *@G29AN2E
*   THE JFCSDS FLAG TURNED ON IN THE JFCB.                    *@G29AN2E
*                                                             *@G29AN2E
*   NOTE: DURING THE CLEANUP ROUTINE, IF SUBSYS HAS BEEN      *@G29AN2E
*   SPECIFIED, THE JFCBIND2 IS SET FOR MOD DISPOSITION.       *@G29AN2E
*                                                             *@G29AN2E
***************************************************************@G29AN2E
         SPACE 1
         TM    DDSWA,DSDUMSW  HAS DUMMY BEEN PROCESSED?        @ZM44657
         BO    SUBSYSP3       YES, IGNORE SUBSYS PARM          @ZM44657
         OI    DDSWA,DDSUBSW  INDICATE SUBSYS PROCESSING       @ZM44657
         XC    SUBSYSWA,SUBSYSWA CLEAR WORK AREA               @G29AN2E
         BCTR  R3,DD0         POINT TO # BYTE                  @G29AN2E
         XR    R1,R1          CLEAR WORK REG                   @G29AN2E
         IC    R1,DD0(R3)     GET TOTAL NUMBER OF PARMS        @G29AN2E
*                             (SSNAME + ALL SSPARMS)           @G29AN2E
         BCTR  R1,DD0         GET NO. OF SSPARMS               @G29AN2E
         STC   R1,SSPRMNO     SAVE NO. OF SSPARMS              @G29AN2E
         LA    R3,DD1(R3)     POINT TO LENGTH BYTE             @G29AN2E
         LR    RF,R3          GET ADDR OF LENGTH BYTE          @G29AN2E
         LA    RE,DD1(RF)     GET ADDR OF SSNAME IN INT. TEXT  @G29AN2E
         ST    RE,SSNMPTR     SAVE ADDR OF SSNAME              @G29AN2E
         STC   R2,SSNML       SAVE LENGTH OF SSNAME            @G29AN2E
         AR    RF,R2          ADD LENGTH OF THIS PARM TO ADDR  @G29AN2E
*                             OF LENGTH BYTE                   @G29AN2E
         LA    RF,DD1(RF)      ADD IN 1 TO ACCT FOR LEN BYTE   @G29AN2E
         ST    RF,SSPRMPTR     RF NOW POINTS TO FIRST LEN-PARM @G29AN2E
*                              PAIR                            @G29AN2E
         XR    RE,RE           INITIALIZE TO ZERO LENGTH       @G29AN2E
         LTR   R1,R1           ARE THERE ANY SSPARMS TO PROCESS@G29AN2E
         BZ    SUBSYSP2        NO, JUST NEED SSWA HEADER       @G29AN2E
         XR    R0,R0           CLEAR WORK REG                  @G29AN2E
SUBSYSP1 DS   0H                                               @G29AN2E
         IC    R0,DD0(RF)      GET LEN BYTE                    @G29AN2E
         AR    RE,R0           ADD LENGTH OF PARM TO TOTAL     @G29AN2E
         LA    RE,DD1(RE)      ADD IN LENGTH OF LEN BYTE       @G29AN2E
         AR    RF,R0           MOVE PTR BY NO. OF CHAR IN PARM @G29AN2E
         LA    RF,DD1(RF)      SHIFT OVER 1 MORE BYTE          @G29AN2E
*        RF NOW POINTS TO NEXT LEN-SSPARM PAIR IF IT EXISTS    @G29AN2E
         BCT   R1,SUBSYSP1     MORE TO PROCESS?                @G29AN2E
SUBSYSP2 DS   0H                                               @G29AN2E
         LA    RE,SSWAHDRL(RE) ADD LENGTH OF SSWA HEADER       @G29AN2E
*                              RE NOW HAS SIZE OF SSWA         @G29AN2E
*        REGISTER 5 POINTS TO THE REMOTE PARM LIST AREA,QLINKWA@G29AN2E
         USING ZB505,R5        SUBSYSWA=QLINKWA=SWA LOC EPA    @G29AN2E
         ST    RE,SWLNGTH      SAVE LENGTH OF SSWA             @G29AN2E
         MVI   SWBLKID,SSWAID  INDICATE SSWA TYPE              @G29AN2E
         DROP  R5                                              @G29AN2E
         MVC   LOCFNCD,AL      FUNC CODE = ASSIGN LOCATE MODE  @G29AN2E
         LA    R0,SSEPA        GET ADDR OF EPA                 @G29AN2E
         ST    R0,SSEPAP       SAVE ADDR OF EPA                @G29AN2E
         LA    R0,SSEPAP       GET ADDR OF EPAPTR              @G29AN2E
         ST    R0,SSEPAPTR     STORE ADDR OF EPAPTR            @G29AN2E
         LA    R0,LOCFNCD      GET ADDR OF FUNC CODE           @G29AN2E
         ST    R0,LOCFNCP      SAVE ADDR TO FUNC CODE          @G29AN2E
         OI    LOCFNCP,X'80'   TURN ON HIGH ORDER BIT TO       @G29AN2E
*                              SIGNIFY END OF PARMLIST         @G29AN2E
         LA    R0,LOCPLIST     GET ADDR OF PARM LIST           @G29AN2E
         ST    R0,AOLOCPL      SAVE ADDR IN COMWA              @G29AN2E
         OI    AOSW4,AOSWALOC  INDICATE LOCATE MODE TO VHQ     @G29AN2E
         BALR  RE,R6           GO TO IEFVHQ                    @G29AN2E
         USING ZB505,R5        R5 POINTS TO SUBSYSWA           @G29AN2E
         L     RF,SWBLKPTR     GET ADDR OF SSWA                @G29AN2E
         USING SSWA,RF                                         @G29AN2E
         OI    SSWATYPE+1,SSWASYST SHOW SYSTEM CREATED SSWA    @G29AN2E
         MVI   SSWASSNM,C' '   BLANK OUT FIRST BYTE            @G29AN2E
         MVC   SSWASSNM+1(DD3),SSWASSNM BLANK OUT FIELD        @G29AN2E
         L     R1,SSNMPTR      GET ADDR OF SSNAME IN INT. TEXT @G29AN2E
         XR    RE,RE           CLEAR WORK REG                  @G29AN2E
         IC    RE,SSNML        GET LENGTH OF SSNAME            @G29AN2E
         BCTR  RE,DD0          DECREMENT FOR MOVE              @G29AN2E
         EX    RE,MVCSSNM      MOVE SSNAME TO SSWA             @G29AN2E
         MVC   SSWAPRNO+1(DD1),SSPRMNO MOVE NUMBER OF SSPARMS  @G29AN2E
         LA    R0,SSWAHDRL     GET SSWA HDR LENGTH             @G29AN2E
         L     R1,SWLNGTH      GET LEN OF SSWA                 @G29AN2E
         SR    R1,R0           SUBTRACT THE LENGTH OF HEADER   @G29AN2E
         LA    R0,SSWAPREN     GET ADDR OF 'TO' MOVE POSITION  @G29AN2E
         DROP  RF                                              @G29AN2E
         LR    RF,R1           GET LENGTH TO BE MOVED          @G29AN2E
         L     RE,SSPRMPTR     GET ADDR OF 'FROM' POSITION     @G29AN2E
         MVCL  R0,RE           MOVE ALL LEN-SSPARM PAIRS       @G29AN2E
         MVC   LOCFNCD,WL      FUNC CODE = WRITE LOCATE        @G29AN2E
         OI    AOSW4,AOSWALOC  INDICATE LOCATE MODE TO VHQ     @G29AN2E
         BALR  RE,R6          GO TO IEFVHQ TO WRITE SSWA TO SWA@G29AN2E
         MVC   SIOT+SIOTSSWA-INDMSIOT(DD3),SWVA                @G29AN2E
*                              LINK SSWA TO SIOT               @G29AN2E
         BALR  RE,R8           GO TO TEST AND STORE            @G29AN2E
SUBSYSP3 DS    0H                                              @G29AN2E
         BALR  RE,R9           GO TO GET KEY ROUTINE           @G29AN2E
         B     SUBSYSP3        LOOP TO GET KEY UNTIL ALL       @G29AN2E
*                              POSITIONALS ARE PROCESSED AND A @G29AN2E
*                              NEW KEY IS FOUND AND ANOTHER    @G29AN2E
*                              BRANCH TAKEN                    @G29AN2E
         USING SSWA,RF                                         @G29AN2E
         SPACE 1                                               @G29AN2E
MVCSSNM  MVC   SSWASSNM(DD0),DD0(R1) MOVE SSNAME FROM INTERNAL @G29AN2E
*                             TEXT TO SSWA                     @G29AN2E
         DROP  R5                                              @G29AN2E
         DROP  RF                                              @G29AN2E
AL       DC    CL2'AL'         ASSIGN LOCATE FUNC CODE         @G29AN2E
WL       DC    CL2'WL'         WRITE LOCATE FUNC CODE          @G29AN2E
         EJECT                                                 @G29AN2E
************************************************************   @G24LPSJ
*                                                          *   @G24LPSJ
*         SUBROUTINE TO PROCESS MSVGP KEYWORD              *   @G24LPSJ
*                                                          *   @G24LPSJ
************************************************************   @G24LPSJ
MSVGPP   DS    0H                                              @G24LPSJ
         LR    RF,R2           SAVE LENGTH OF FIRST PARM       @G24LPSJ
         BALR  RE,R8           GO TO TEST & STORE ROUTINE      @G24LPSJ
*                              FOR PDT PROCESSING              @G24LPSJ
         BALR  RE,R9           GET NEXT KEY                    @G24LPSJ
         L     R1,CVTADDR      LOAD CVT ADDRESS                @G24LPSJ
         USING CVT,R1          ESTABLISH CVT ADDRESSIBILITY    @G24LPSJ
         L     R1,CVTIHASU     LOAD SUBMIT MASK ADDRESS        @G24LPSJ
         USING SUBITS,R1       ESTABLISH SUBIT ADDRESSABILITY  @G24LPSJ
         TM    SUBYTE4,SU24BIT TEST FOR MSS R3 (SU24)          @G24LPSJ
         BNO   MSVGP640        BRANCH TO ERROR IF NO SU24      @G24LPSJ
         LTR   RF,RF           TEST LANGTH OF 1ST PARAMETER    @G24LPSJ
         BZ    MSVGP646        BRANCH TO ERROR IF NO 1ST PARM  @G24LPSJ
         LTR   R2,R2           TEST FOR 2ND PARAMETER          @G24LPSJ
         BZ    MSVGPNKY        IF NONE, GO TO NEXT KEY         @G24LPSJ
         BCTR  R3,R0           DECREMENT TEXT POINTER          @G24LPSJ
         MVI   DD0(R3),DD129   PUT HEX 81 FOR DICTIONARY       @G24LPSJ
         LA    R3,DD1(R3)      RESTORE TEXT POINTER            @G24LPSJ
         BAL   RE,DSRTN        GO TO DICTIONARY SEARCH RTN     @G24LPSJ
         MVI   QPARM+QMPOP-QMNAM,QMREAD SET QMGR READ          @G24LPSJ
         MVI   QPARM+QMPNC-QMNAM,DD1    SET FOR ONE READ       @G24LPSJ
         MVC   DD4(DD3,R5),DD2(R1) PUT SVA ON SIOT IN REMOTE LIST
*                                                              @G24LPSJ
         LA    R1,JFCBX        GET ADDRESS OF AREA FOR SIOT    @G24LPSJ
         ST    R1,DD0(R5)      STORE ADDRESS IN REMOTE LIST    @G24LPSJ
         BALR  RE,R6           GO TO QMGR FOR READ             @G24LPSJ
         CLC   JFCBX+SCTDDINO-INDMSIOT(DD2),SIOT+SCTDDINO-INDMSIOT
*                              VERIFY REFER BACK TO EARLIER DD
*                                                              @G24LPSJ
         BNL   MSVGP645        IF NOT, GO TO ERROR             @G24LPSJ
         MVC   SIOT+SIOTVLSP-INDMSIOT(DD2),JFCBX+SCTDDINO-INDMSIOT
*                              INSERT SIOT NUMBER FOR VL SEP   @G24LPSJ
MSVGPNKY BALR  RE,R9           GO TO GET NEXT KEY              @G24LPSJ
MSVGP640 MVI   MSGSEC,ERMES40  SET IEF640I MSG KEY             @G24LPSJ
         B     CLEANUP         GO TO CLEANUP RTN               @G24LPSJ
MSVGP646 MVI   MSGSEC,ERMES46  SET IEF646I MSG KEY             @G24LPSJ
         B     CLEANUP         GO TO CLEANUP RTN               @G24LPSJ
MSVGP645 MVI   MSGSEC,ERMES45  SET IEF645I MSG KEY             @G24LPSJ
         B     CLEANUP         GO TO CLEANUP RTN               @G24LPSJ
         EJECT                                                 @G24LPSJ
************************************************************     Y02668
*                                                          *     Y02668
*         SUBROUTINE TO PROCESS DATA SET NAME TABLE        *     Y02668
*                                                          *     Y02668
************************************************************     Y02668
         SPACE
DSNTP    DS    0H                                                Y02668
         ST    RE,DSNTPSA          SAVE CALLER'S ADDRESS         Y02668
         CLI   DD0(R3),DD44       IS DSNAME LONGER THAN 44       Y02668
         BC    HIGH,DSNTP7        YES TRANSFER ERROR.            Y02668
         LA    R4,DSNAME          GET DSN TABLE ADDRESS          Y02668
         USING DSNTABLE,R4        ESTABLISH ADDRESSIBILITY       Y02668
         LA    R1,DD168           LOAD REGISTER WITH 168         Y02668
         L     RF,SCT+SCTLDSTB-INSMSCT GET RELATIVE LENGTH       Y02668
*                                       DSNAME TABLE             Y02668
         LTR   RF,RF              IS IT ZERO.                    Y02668
         BC    NOT-ZERO,DSNTP1    NO TRANSFER                    Y02668
         OI    SWC,DSNTQ          SET DSNAME TO ENQUEUE SWITCH.  Y02668
         MVC   SCT+SCTADSTB-INSMSCT(DD4),TNEXT  DSN TTR IN SCT   Y02668
         BAL   RE,DSNTP6          SET UP DSNAME TABLE            Y02668
         BAL   RE,SERP16          SET UP ASSIGN                  Y02668
         BALR  RE,R6              GO TO Q MANAGER                Y02668
         MVC   TNEXT(DD4),DD0(R5) SAVE ASSIGNED TTR              Y02668
         B     DSNTP3             TRANSFER                       Y02668
DSNTP1   DS    0H                 ENTER                          Y02668
         SR    RF,R1              SUBTRACT 168 FROM REL LENGTH   Y02668
         BC    LOW,DSNTP2         TRANSFER OUT                   Y02668
         BC    HIGH,DSNTP1        LOOP BACK                      Y02668
         MVC   DSNTNSVA,TNEXT     GET NEW DSNAME TABLE           Y02668
         ST    R4,DD0(R5)         PUT ADDR IN REMOTE PARM LIST   Y02668
         MVC   DD4(DD3,R5),DSNTSVA PUT TTR IN REMOTE LIST        Y02668
         BALR  RE,R6              GO TO Q MANAGER                Y02668
         BAL   RE,DSNTP6          SET UP DSNAME TABLE            Y02668
         MVC   TNEXT(DD4),DD0(R5) SAVE ASSIGNED TTR              Y02668
         B     DSNTP3             TRANSFER                       Y02668
DSNTP2   DS    0H                 ENTER                          Y02668
         AR    RF,R1              RESTORE LENGTH POSITIVE        Y02668
DSNTP3   DS    0H                 ENTER                          Y02668
         SR    R1,RF              GET SPACE AVAIL IN DSN TABLE.  Y02668
         CLR   R2,R1              IS ROOM IN TABLE FOR DSNAME    Y02668
         BC    LOW+EQUAL,DSNTP4   YES TRANSFER                   Y02668
         L     RF,SCT+SCTLDSTB-INSMSCT NO GET RELATIVE LENGTH    Y02668
         AR    RF,R1              ADD TO GET TO END OF TABLE     Y02668
         ST    RF,SCT+SCTLDSTB-INSMSCT RESET RELATIVE LENGTH     Y02668
         B     DSNTP              TRANSFER                       Y02668
DSNTP4   DS    0H                 ENTER                          Y02668
         LA    R1,DSNENTRY        GET ENTRY ADDRESS              Y02668
         USING DSNENTRY,R1                                       Y02668
         LA    R1,0(RF,R1)        UPDATE PTR TO NEXT ENTRY       Y02668
         BCTR  R2,R0              DECREMENT LENGTH FOR EXECUTE   Y02668
         EX    R2,DSNTP5          EXECUTE MOVE                   Y02668
         LA    R2,DD1(R2)         RESTORE LENGTH                 Y02668
         L     RF,SCT+SCTLDSTB-INSMSCT GET RELATIVE LTH FROM SCT Y02668
         AR    RF,R2              BUMP RELATIVE LENGTH           Y02668
         ST    RF,SCT+SCTLDSTB-INSMSCT PUT NEW REL LENGTH IN SCT Y02668
         SR    RF,R2         RESET TO ORIGINAL OFFSET TO STORE  YM05563
         TM    SWC,VOLREF         VOL REF DSN?                 @ZA01890
         BZ    DSNTP4C            NO, GO PROCESS DCB DSN         Y02668
         STH   RF,SIOT+SIOVDSNT-INDMSIOT    VOL REF OFFSET-SIOT YM05563
         STC   R2,SIOT+SIOVDSNL-INDMSIOT PUT LENGTH IN SIOT      Y02668
         L     RE,DSNTPSA         RESTORE CALLER'S ADDRESS       Y02668
         BR    RE                RETURN TO CALLER                Y02668
DSNTP4C  DS    0H                                                Y02668
         STH   RF,SIOT+SIODSNTE-INDMSIOT  DCB DSN OFFSET-SIOT   YM05563
         STC   R2,SIOT+SIODDSNL-INDMSIOT DCB DSN LENGTH IN SIOT  Y02668
         L     RE,DSNTPSA         RESTORE CALLER'S ADDRESS       Y02668
         BR    RE                 RETURN TO CALLER               Y02668
DSNTP5   DS    0H                 NOT ENTER                      Y02668
         MVC   DSNENTRY(DD0),DD1(R3)   EXECUTED MOVE             Y02668
DSNTP6   DS    0H                 ENTER                          Y02668
         XC    DSNTABLE(176),DSNTABLE ZERO DSNAME TABLE          Y02668
         MVC   DSNTSVA(DD3),TNEXT PUT TTR IN DSNAME TABLE        Y02668
         OI    DSNTID,DSNTTID     PUT ID IN TABLE                Y02668
         BR    RE                 RETURN                         Y02668
         DROP  R1                                                Y02668
         DROP  R4                                                Y02668
DSNTP7   DS    0H                 ENTER                          Y02668
         MVI   MSGSEC,ERMES42     ERROR DSNAME TOO LONG          Y02668
         B     CLEANUP            GO TO CLEANUP.                 Y02668
         EJECT
*              **************************************************
*              *                                                *
*              *                 CLEANUP ROUTINE                *
*              *                                                *
*              **************************************************
         SPACE 2
CLEANUP  DS    0H                 CLEAN UP PROCESSING
         SR    R2,R2              CLEAR IT                         AABA
         IC    R2,MSGSEC          GET ERROR MSG CODE               AABA
         LTR   R2,R2              IS THERE ERROR  (ZERO = NO ERROR)AABA
         BZ    CLEAN00            NO - 60 CHECK FOR WARNING MSG    AABA
         OI    JCT+JCTJSTAT-INJMJCT,INCMSTS  TURN ON JCT JOB FAIL BIT.
         L     RF,DIEFVGM         GET MESSAGE ROUTINE              AABA
         BALR  RE,RF              GO TO MSG RTN - ISSUE MSG        AABA
CLEAN00  DS    0H                 ENTRY TO CHECK FOR WARNING MSG   AABA
         IC    R2,DWRNMSG         GET WARNING MSG CODE             AABA
         LTR   R2,R2              IS THERE A WARNING MSG           AABA
         BZ    CLEAN004            NO, CONTINUE.                 Y02668
         MVC   MSGKEY(1),DWRNKEY   YES- GET SECONDARY MSG          AABA
         L     RF,DIEFVGM         GET MESSAGE ROUTINE              AABA
         BALR  RE,RF                   AND GO TO MSG ROUTINE AND   AABA
*                                      DO NOT FAIL JOB.            AABA
CLEAN004 DS    0H                  CHECK IF DD DYNAM             Y02668
         TM    SWY2,DYNAMSW        IS THIS A DD DYNAM STMT?      Y02668
         BO    CLEAN156            BR YES TO UPDATE SIOT CHAIN, YM02717*
                                   BYPASS CREATING SIOT FOR     YM02717*
                                   DYNAMIC DD.                  YM02717
*  NON-DYNAM DD.                                                YM02717
         TM    SIOT+SCTSBYT1-INDMSIOT,SIOTJSCT  IS JOBCAT,       Y02113
*             STEPCAT ASSOCIATION BIT ON.IF YES TEST FOR CATL.  Y02113
         BZ    CLEANA04    BITS BOTH NOT ON- CONTINUE NORMALLY   Y02113
         TM    SIOT+SCTSBYT2-INDMSIOT,SIOTCATL  IS THE CATALOG   Y02113
*              BIT ON.IF YES,THEN BOTH SIOTJSCT AND SIOTCATL     Y02113
*              ARE ON.                                           Y02113
         BZ    CLEANA04    BITS BOTH NOT ON- CONTINUE NORMALLY   Y02113
         CLI   SIOT+SCTDDNAM-INDMSIOT,DDBLANK IS DDNAME BLANK?   Y02113
         BNE   CLEANA04     NOT BLANK-CONTINUE NORMALLY.         Y02113
*****************************************************************Y02113
*
*              UNIQUE NAME FORMAT IS AS FOLLOWS:
*
*              HEX '7CDDDD4040404040'
*              DDDD - TWO BYTE DD NUMBER ASSIGNED TO SIOT PER STEP
*
*****************************************************************Y02113
         MVI   SIOT+SCTDDNAM-INDMSIOT,ATSIGN PUT IN SPECIAL CHAR Y02113
         MVC   SIOT+SCTDDNAM-INDMSIOT+1(DD2),SIOT+SCTDDINO-INDMSIOT
*        MOVE DD NUMBER FROM SIOT DDNUMBER FIELD TO NAME FIELD   Y02113
CLEANA04 DS    0H                                                Y02668
         TM    AOSW2,AOMAXERR      OVER 1635 STATIC DD'S  ?      Y02668
         BO    CLEAN154            YES  BYPASS CLEANUP , EXIT    Y02668
         TM    SWI,DSNLIT          IS THIS DSN IN QUOTES
         BZ    CLEAN009            NO BYPASS
         SPACE
         SR    R2,R2               INITIALIZE R2 (USED AS SWITCH)
         TM    SIOT+SIOTALTD-INDMSIOT,JDISP12  IS ALT DISP=CATLG
         BZ    CLEAN007
         LA    R2,ERMES48          INVALID DISP MSG                AACA
         MVI   SIOT+SIOTALTD-INDMSIOT,JDISP10  SET DISP TO KEEP    AACA
CLEAN007 DS    0H                                                  AACA
         TM    SIOT+SCTSDISP-INDMSIOT,JDISP12  IS DISP=CATLG       AACA
         BZ    CLEAN008                                            AACA
         LA    R2,ERMES48                                          AACA
         MVI   SIOT+SCTSDISP-INDMSIOT,JDISP10  SET DISP TO KEEP    AACA
CLEAN008 DS    0H                                                  AACA
         LTR   R2,R2               ANY DISP=CATLG DETECTED         AACA
         BZ    CLEAN009            NO                              AACA
*                                  YES- ISSUE WARNING MSG          AACA
         MVI   MSGKEY,SUBKEEP                                      AACA
         L     RF,DIEFVGM                                          AACA
         BALR  RE,RF                                               AACA
CLEAN009 DS    0H                                                  AACA
         CLI   SIOT+SCTNMBUT-INDMSIOT,DD0 IS UNIT NUMBER ZERO.
         BC    NOT-EQUAL,CLEAN011 NO TRANSFER.
         MVI   SIOT+SCTNMBUT-INDMSIOT,DD1 YES. SET UNIT NUMBER TO ONE.
CLEAN011 DS    0H                 ENTER.
         TM    SWI,IWADDNM         IS THIS DDNAME =             PTM1028
         BO    CLEAN08             YES, TRANS                   PTM1028
         CLI   JFCB+JFCBVLCT-INFMJFCB,DD1 IS VOLUME COUNT ONE
         BC    HIOREQ,CLEAN013   TRANSFER IF = OR> THAN 1        A26075
         MVI   JFCB+JFCBVLCT-INFMJFCB,DD1 ZERO SET TO ONE
CLEAN013 DS    0H                 ENTER.
         TM    JFCB+JFCBLTYP-INFMJFCB,JFCBLP  IS LABEL=BLP SPECIFIED
         BZ    CLEAN014                        NO - TRANSFER
         NI    JFCB+JFCBLTYP-INFMJFCB,255-JFCBLP   CLEAR LABEL=BLP BIT
         OC    JFCB+JFCBLTYP-INFMJFCB(1),DINBPLP1  SET BLP DEFAULT
CLEAN014 DS    0H                 ENTER.
         CLI   JFCB+JFCBCRDT-INFMJFCB,DD0 IS THERE A CREATE DATE
         BC    NOT-EQUAL,CLEAN015 YES TRANSFER.
         L     R4,AEXPDTT         RESET POINTER TO PDT
         ST    R4,TPDTP           PROCESSING IN PDT                168
         L     R1,AEXPDTT2         ADR OFCREATE DATE IN PDT        168
         ST    R1,TCPDTP                                           168
         BAL   R1,CLEAN20         SET UP CREATE DATE
CLEAN015 DS    0H                 ENTER.
*
*   CHECK IF ENOUGH JFCB EXTENSIONS HAVE BEEN ASSIGNED
*
         CLI   MSGSEC,X'00'        ARE THERE ANY ERRORS?       @ZA08690
         BNZ   CLEAN01D            YES, DON'T DO JFCBX PROC.   @ZA08690
         SR    R2,R2
         SR    R3,R3
         CLC   JFCB+JFCBVLCT-INFMJFCB(DD1),SIOT+SCTNMBUT-INDMSIOT 02668
*                                  IS THE VOL CT GREATER THAN    Y02668
*                                  THE UNIT COUNT?               Y02668
         BH    CLEAN016            YES, USE IT TO CALCULATE      Y02668
*                                  NUMBER OF JFCBX'S NEEDED      Y02668
         IC    R2,SIOT+SCTNMBUT-INDMSIOT NO,USE UNIT COUNT       Y02668
         B     CLEAN017            CHECK AGAINST VOL SER COUNT   Y02668
CLEAN016 DS    0H                                                Y02668
         IC    R2,JFCB+JFCBVLCT-INFMJFCB INSERT VOL COUNT        Y02668
CLEAN017 DS    0H                                                Y02668
         IC    R3,JFCB+JFCBNVOL-INFMJFCB VOLUME SERIAL COUNT
         CLR   R2,R3              MORE JFCB EXTENTS NEEDED
         BC    LOW+EQUAL,CLEAN01D  NO-CONTINUE CLEANUP            18931
         LA    R1,DD5             YES -  IS VOL COUNT
         SR    R2,R1                     GREATER THAN 5.
         BC    NOT-HIGH,CLEAN01D  NO -  CONTINUE CLEANUP
         SR    R3,R1              YES - HAS ONE EXTENT ALREADY
         BC    HIGH,CLEAN01A            BEEN ASSIGNED.
         BAL   R1,SERP21          NO - ASSIGN ONE
         BAL   R1,SERP23          WRITE JFCBX TO Q
CLEAN01A DS    0H                 ENTRY - AT LEAST ONE EXTENT ASSIGNED
         LA    R1,DD15
CLEAN01B DS    0H                 ENTRY FOR LOOP TO DETERMIN
         SR    R2,R1                    NUMBER OF EXTENTS
         SR    R3,R1                    ALREADY ASSIGNED.
         BC    HIGH,CLEAN01B      LOOP BACK IF VOL SER COUNT POSITIVE
         LTR   R2,R2              IS VOL COUNT (JFCBVLCT) POSITIVE
CLEAN01C DS    0H
         BC    LOW+EQUAL,CLEAN01D TRANSFER ENOUGH ASSIGNED
*                                 SET FIELD JFCBX TO CONTENTS OF A22532
*                                 PREVIOUSLY CHAINED EXTENSION TOA22532
*                                 PRESERVE CHAINED JFCBX'S DATA  A22532
         MVI   QPARM+QMPOP-QMNAM,QMREAD      SET READ            A22532
         MVI   QPARM+QMPNC-QMNAM,DD1     SET FOR 1 READ          A22532
         MVC   DD4(DD3,R5),TTRS    PUT JFCBX TTR IN REMOTE LIST  A22532
         LA    R1,JFCBX                GET ADDR OF JFCBX AREA    A22532
         ST    R1,DD0(R5)              PUT ADDR IN REMOTE LIST   A22532
         BALR  RE,R6                   GO TO Q MGR               A22532
         BAL   R1,SERP22          VOL COUNT POSITIVE - ASSIGN EXTENT
         BAL   R1,SERP23                                       @ZA08164
         LA    R1,DD15
         SR    R2,R1
         B     CLEAN01C
CLEAN01D DS    0H                 ENTRY - ALL EXTENTS ASSIGNED OK
         TM    SIOT+SCTSBYT3-INDMSIOT,JDISP14  IS FIRST DISP OPERAND?
         BM    CLEAN02            YES,CHECK DISP VALUE.
         OI    SIOT+SCTSBYT3-INDMSIOT,JDISP2   TURN ON BIT FOR NEW.
         OI    JFCB+JFCBIND2-INFMJFCB,JFCNEW   TURN ON BIT FOR NEW.
CLEAN02  DS    0H                 ENTER
         TM    SIOT+SCTSBYT3-INDMSIOT,JDISP2   DISP=NEW SPECIFIED?
         BZ    CLEAN02A           NO - CONTINUE                   18874
         TM    SIOT+SCTSDISP-INDMSIOT,JDISP15      HAS A SECONDARY
*                                 DISPOSITION BEEN SPECIFIED?
         BNZ   CLEAN02A           YES - CONTINUE                  18874
         OI    SIOT+SCTSDISP-INDMSIOT,JDISP9   TURN ON SECONDARY
*                                 DISPOSITION OF DELETE IN SIOT.
CLEAN02A   DS   0H                                                18874
         CLI   JFCB+JFCBDSNM-INFMJFCB,DDBLANK IS THERE DSNAME
         BC    EQUAL,CLEAN05      NO TRANSFER.
         CLC   JFCB+JFCBDSNM-INFMJFCB(8),UNQNAME IS THIS A         0750
*                                 A UNIQUE NAME                    0750
         BE    CLEAN08            YES TRANSFER                     0750
         TM    SIOT+SCTSBYT1-INDMSIOT,SCTDUMMY      IS THIS DUMMY?
         BNO   CLEAN02B           NO CONTINUE                  @ZA07503
         NI    JFCB+JFCBIND1-INFMJFCB,DD255-JFCGDG  TURN OFF GDG-
*                                  JFCB                        @ZA07503
         NI    SIOT+SCTSBYT4-INDMSIOT,DD255-JDSNAME4 TURN OFF GDG IN
*                                        SIOT INDICATOR        @ZA07503
         B     CLEAN08                        TRANSFER         @ZA07503
CLEAN02B TM    SIOT+SIOTBYT0-INDMSIOT,SIOTSSDS SUBSYSTEM DS?   @ZA07503
         BO    CLEAN08             YES, DO NOT ENTER IN DSENQT. YM00362
         L     RF,DIEFVDB         GET VCON FOR DATA INTEGRITY
         BALR  RE,RF              GO TO DATA INTEGRITY.
         B     CLEAN08            TRANSFER
CLEAN04  DS    0H                 NOT ENTERED BUT EXECUTED.
         MVC   JFCB+JFCBDSNM-INFMJFCB+DD23(DD1),JCT+JCTJNAME-INJMJCT
CLEAN05  DS    0H                 ENTERED
         OI    SIOT+SCTSBYT1-INDMSIOT,SIOTGDSN  TEMP DSNMAE BIT  Y02668
         CLI   SIOT+SCTOUTPN-INDMSIOT,DDBLANK IS THERE SYSOUT
         BC    NOT-EQUAL,CLEAN051 YES TRANSFER
         TM    SIOT+SCTSBYT2-INDMSIOT,JUNIT7  UNIT DEFER BIT SET?
         BO    CLEAN051           YES,BRANCH TO CONTINUE.
         TM    SIOT+SCTSBYT3-INDMSIOT,JDISP18  OLD OR SHARE SPECIFIED?
         BO    CLEAN051           YES,BRANCH TO CONTINUE.
         OI    JFCB+JFCBIND2-INFMJFCB,JFCTEMP  SET TEMP. D.S. BIT.
CLEAN051 DS    0H                 ENTER
         LH    R1,UNNU            GET UNIQUE NAME SERIAL NUMBER
         LA    R1,DD1(R1)         BUMP NUMBER
         STH   R1,UNNU            SAVE NUMBER
         CVD   R1,DDWA7           CONVERT NUMBER
         MVC   DDWA7(DD4),DDWA7+DD4 SET UP TO UNPACK
         UNPK  DDWA7(DD8),DDWA7(DD4) UNPACK NUMBER.
         MVC   JFCB+JFCBDSNM-INFMJFCB(DD23),UNQNAME MOVE UNIQUE NAME.
         LA    R1,JCT+JCTJTPTN-INJMJCT-DD1 GET END OF JOB NAME
         LA    R2,DD8             SET UP LOOP COUNT
CLEAN06  DS    0H                 ENTRY FOR LOOP.
         CLI   DD0(R1),DDBLANK    IS CHARACTER NON BLANK
         BC    NOT-EQUAL,CLEAN07  YES TRANSFER
         BCTR  R1,R0              DECREMENT POINTER
         BCT   R2,CLEAN06         LOOP BACK
CLEAN07  DS    0H                 ENTER.
         BCTR  R2,R0              DECREMENT COUNT FOR MOVE
         EX    R2,CLEAN04         EXECUTE MOVE OF JOB NAME
         LA    R2,JFCB+JFCBDSNM-INFMJFCB+DD24(R2) GET ADDRESS END NAME.
         MVI   DD0(R2),DDPERIOD   MOVE IN PERIOD
         MVI   DD1(R2),DDCR       MOVE IN CHARACTER R
         NI    DDWA7+DD7,DD15     CLEAR ZONE BITS
         OI    DDWA7+DD7,DDN0     PUT IN PROPER ZONE BITS
         MVC   DD2(DD7,R2),DDWA7+DD1 MOVE IN CONVERTED NUMBER
         OI    SIOT+SCTSBYT1-INDMSIOT,SIOTQDSN TURN ON QUALIFIED Y02113
*              QUALIFIED DSN INDICATOR BECAUSE ALL CREATED       Y02113
*              TEMPORARY DSNAMES ARE QUALIFIED BY DEFINITION.    Y02113
CLEAN08  DS    0H                 ENTER
         TM    DDWA2,JDICTI3      DDNAME SWITCH ON IN LOCAL WORK AREA?
         BO    CLEAN08C           YES,BRANCH TO CONTINUE.
         MVC   SIOT+SIOTDSKA-INDMSIOT(DD3),TSIOT PUT TTR OF SIOT / SIOT
         MVC   SCT+SCTLSIOT-INSMSCT(DD3),SIOT+SIOTDSKA-INDMSIOT  Y02668
*                               PUT TTR LAST SIOT IN STEP IN SCT Y02668
         MVC   SIOT+SCTPJFCB-INDMSIOT(DD3),TNEXT+DD4             Y02668
*                                 PUT TTR JFCB IN SIOT           Y02668
         MVC   SIOT+SCTPSIOT-INDMSIOT(DD3),TNEXT PUT TTR NEXT SIOT
         MVC   TSIOT(DD3),TNEXT    SET SVA FOR NEXT SIOT...    @Z40MPTH
         MVI   QPARM+QMPOP-QMNAM,QMASGN     SET ASSIGN CODE    @Z40MPTH
         MVI   QPARM+QMPNC-QMNAM,DD32   SET FOR TWO ASSIGNS..  @Z40MPTH
         BALR  RE,R6         GO TO THE SWA SWA MANAGER..       @Z40MPTH
         MVC   TNEXT(DD4),DD0(R5)    SAVE ASSIGNED SVA IN TNEXT@Z40MPTH
         MVC   TNEXT+DD4(DD4),DD4(R5)  SAVE ASSIGNED SVA...    @Z40MPTH
CLEAN08C DS    0H                      CHECK FOR JFCBE         @Z40MPTH
         TM    JFCB+JFCUCSOP-INFMJFCB,JFCBEXTP  HAS A JFCBE    @Z40MPTH
*              BEEN CREATED,BIT ON SIGNALS IT HAS BEEN BUILT.. @Z40MPTH
         BZ    CLEAN08B           DO NOT ASSIGN IT AN SVA..    @Z40MPTH
         MVC   JFCB+JFCBEXAD-INFMJFCB(DD3),TNEXT  SVA PTR TO EXT
*                                                              @Z40MPTH
         MVI   QPARM+QMPOP-QMNAM,QMASGN   SET ASSIGN CODE..    @Z40MPTH
         MVI   QPARM+QMPNC-QMNAM,DD16   SET TO ASSIGN ONE SVA..@Z40MPTH
         BALR  RE,R6         GO TO THE SWA MANAGER..           @Z40MPTH
         MVC   TNEXT(DD4),DD0(R5)      REPLACE SVA USED....    @Z40MPTH
CLEAN08B TM    DDWA2,JDICTI3      DDNAME SWITCH ON IN LOCAL    @Z40MPTH
*                                 WORK AREA?                   @Z40MPTH
         BO    CLEAN09            YES, TRANSFER                @Z40MPTH
CLEAN08A DS    0H                                              @Z40MPTH
         CLI   SIOT+SCTOUTPN-INDMSIOT,DDBLANK IS THIS SYSOUT ?   Y02668
         BC    NOT-EQUAL,CLEAN10   YES TRANSFER                  Y02668
         B     CLEAN13            TRANSFER.
CLEAN09  DS    0H                 ENTER.
         CLI   SIOT+SCTOUTPN-INDMSIOT,DDBLANK IS THIS SYSOUT.
         BC    EQUAL,CLEAN15      NO TRANSFER
CLEAN10  DS    0H                 ENTER.
         OI    SCT+SCTSTYPE-INSMSCT,X'20'  SET SYSOUT BIT IN SCT Y02668
         OI    JFCB+JFCBIND2-INFMJFCB,JFCMOD SET DISP=MOD IND.   Y02668
         NI    JFCB+JFCBIND2-INFMJFCB,X'BF' FOR SYSOUT JFCB.     Y02668
CLEAN13  DS    0H                 ENTER
         TM    DDWA2,JDICTI3      DDNAME SWITCH ON IN LWA.?
         BO    CLEAN15            YES,BRANCH TO CONTINUE.
         CLI   DDWA5,DD0          IS THERE A LABEL ON DD VERB
         BC    EQUAL,CLEAN15      NO TRANSFER
         CLI   SIOT+SIODDSNL-INDMSIOT,DD0 IS THERE DCB DSN?     YM00367
         BE    CLEAN13A                 NO TRANSFER              A23350
         OI    DDWA2,JDICTI2      SET DCB DSNAME SPECIFIED SWITCH.
         B     CLEAN14                                           A23350
CLEAN13A DS    0H                                                A23350
         CLC   JFCB+JFCBXPDT-INFMJFCB(3),XPDTZERO SYMBOLIC 0?    A23350
         BNE   CLEAN14                  NO TRANSFER              A23350
* IF EXPDT IS SYMBOLIC ZERO, BUT PATTERNING ISN'T SPECIFIED,     A23350
* RESET TO ABSOLUTE ZERO                                         A23350
         XC    JFCB+JFCBXPDT-INFMJFCB(3),JFCB+JFCBXPDT-INFMJFCB  A23350
CLEAN14  DS    0H                 ENTER
*        JOBCAT DD CARDS ARE ENTERED INTO REFERBACK DICTIONARY  YM01882
*        BY IEFVEA ONLY IF THEY ARE CHAINED INTO STEP..         YM01882
         TM    SIOT+SIOTALTD-INDMSIOT,SIOJCATS   IS IT A JOBCAT YM01882
         BO    CLEAN15       YES,DO NOT ENTER INTO DICTIONARY.. YM01882
         MVC   DDWA3(DD3),SIOT+SIOTDSKA-INDMSIOT    MOVE SIOT TTR DICT.
         MVC   DDWA4(DD3),SIOT+SCTPJFCB-INDMSIOT    MOVE JFCBTTR DICT
         LA    R1,DDWA1           SET REGISTER FOR DICTIONARY
         L     RF,DIEFVGI         GET VCON FOR DICTIONARY
         BALR  RE,RF              GO TO ENTER DICTIONARY
CLEAN15  DS    0H                 ENTER.
         TM    JFCB+JFCBIND2-INFMJFCB,JFCTEMP  TEMP. D.S. BIT SET?
         BZ    CLEAN152           NO,BRANCHA TO CONTINUE.
         TM    SIOT+SCTSBYT3-INDMSIOT,JDISP2   DISP NEW FOR D.S.?
         BZ    CLEAN15B           NO,BRANCH TO CONTINUE.
         TM    SIOT+SCTSDISP-INDMSIOT,JDISP15  2ND OPERAND SPECIFIED?
         BZ    CLEAN151           NO,BRANCH TO CONTINUE.
CLEAN15B DS    0H                                                   942
         TM    SIOT+SCTSDISP-INDMSIOT,JDISP17  PASS OR DELETE GIVEN?
         BM    CLEAN151           IF EITHER SET BRANCH TO CONTINUE.
         NI    SIOT+SCTSDISP-INDMSIOT,255-JDISP15
*                                 CLEAR 2ND DISP OPERAND BITS.
         OI    SIOT+SCTSDISP-INDMSIOT,JDISP11  SET PASS BIT.
         CLI   MSGSEC,0      HAS THIS STMT BEEN FAILED            21349
         BNE   CLEAN151      YES-DO NOT PRINT WARNING MESSAGE     21349
         MVI   MSGKEY,SUBPASS      PASS SUB  MSG                   AACA
         LA    R2,ERMES48          INVALID DISP MSG                AACA
         L     R3,DIEFVGM         GET VCON
         BALR  RE,R3              GO TO MESSAGE MODULE
CLEAN151 DS    0H                 ENTER
         OI    SIOT+SCTSDISP-INDMSIOT,JDISP9  SET DELETE BIT.
         TM    SIOT+SIOTALTD-INDMSIOT,X'0F'  IS THERE A COND DISP  000B
         BZ    CLEAN152           NO, BRANCH                       000B
           MVI SIOT+SIOTALTD-INDMSIOT,JDISP9  INDICATE DELETE      000B
CLEAN152 DS    0H                 ENTER
         TM    SIOT+SCTSDISP-INDMSIOT,JDISP15   SECONDARY DISPOSITION?
         BC    4,CLEAN52A                    BRANCH YES            000D
         TM    SIOT+SCTSBYT3-INDMSIOT,JDISP2  NEW SPECIFIED?
         BO    CLEAN52B                      BRANCH YES PUT TEMP ON
CLEAN52A EQU   *                                                   000D
         TM    SIOT+SCTSDISP-INDMSIOT,JDISP9  DISP=DELETE SPECIFIED?
         BZ    CLEAN52C            BR NO TO CONTINUE.          @G29AN2E
CLEAN52B EQU   *                                                   000D
         TM    SIOT+SCTSBYT4-INDMSIOT,JDSNAME4 IS THIS A GDG D.S.A49970
         BO    CLEAN52C            YES, DON'T SET TEMP DS BIT. @G29AN2E
         OI    JFCB+JFCBIND2-INFMJFCB,JFCTEMP SET TEM DS BIT ON YM02717
CLEAN52C DS    0H                                              @G29AN2E
         L     R1,TEXTBUFP         ADDRESSABILITY FOR          @G29AN2E
         USING TEXT,R1             TEXT STRING PREFIX          @G29AN2E
         TM    STRDINDC,DTXSUBSK   WAS SUBSYS SPECIFIED?       @G29AN2E
         BZ    CLEAN156            NO, PROCEED NORMALLY        @G29AN2E
         DROP  R1                                              @G29AN2E
         OI    JFCB+JFCBIND2-INFMJFCB,JFCMOD TURN ON MOD FLAG  @G29AN2E
         NI    JFCB+JFCBIND2-INFMJFCB,X'FF'-JFCOLD TURN OFF OLD@G29AN2E
CLEAN156 DS    0H                                               YM02717
         TM    JFCB+JFCUCSOP-INFMJFCB,JFCBEXTP  HAS A JFCBE    @Z40MPTH
*              BEEN CREATED,BIT ON SIGNALS IT HAS BEEN BUILT.. @Z40MPTH
         BZ    CLEAN56A           NO,DON'T WRITE IT TO SWA...  @Z40MPTH
         CLI   JFCBEX+JFCBMAGT-INGMJFCE,X'40' FLASH ID PRESENT?@Z40MPTH
         BE    CLEAN55A            NO - BYPASS FLASH DEFAULT   @Z40MPTH
         CLI   JFCBEX+JFCIMTOT-INGMJFCE,X'00' COUNT PRESENT ?  @Z40MPTH
         BNE   CLEAN55A            YES - BYPASS FLASH DEFAULT  @Z40MPTH
         MVI   JFCBEX+JFCIMTOT-INGMJFCE,FLASHCNT               @ZM40103
*                        DEFAULT FLASH COUNT TO 255            @ZM40103
CLEAN55A DS    0H                                              @Z40MPTH
         LA    R0,JFCBEX     ADDRESS OF JFCBE                  @Z40MPTH
         ST    R0,DD0(R5)    STORE JFCBE ADDRESS IN PARAM LIST @Z40MPTH
         MVC   DD4(DD3,R5),JFCB+JFCBEXAD-INFMJFCB  EXTENSION   @Z40MPTH
*              ADDRESS INTO PARAMETER LIST FOR SWA MANAGER     @Z40MPTH
         MVI   DISPLID(R5),JFCBEID   MOVE JFCBE ID INTO PARAM  @Z40MPTH
         MVI   QPARM+QMPOP-QMNAM,QMWRTE     WRITE CODE         @Z40MPTH
         MVI   QPARM+QMPNC-QMNAM,DD1   WRITE ONE BLOCK TO SWA  @Z40MPTH
         BALR  RE,R6         GO TO SWA MANAGER                 @Z40MPTH
CLEAN56A DS    0H                                              @Z40MPTH
*  INITIALIZE REMOTE LIST TO WRITE SIOT AND JFCB TO SWA.        YM02717
         LA    R0,SIOT             ADDR OF SIOT TO              YM02717
         ST    R0,0(R5)            REMOTE LIST.                 YM02717
         LA    R0,JFCB             ADDR OF JFCB                 YM02717
         ST    R0,DD8(R5)          TO REMOTE LIST.              YM02717
         MVC   DD4(DD3,R5),SIOT+SIOTDSKA-INDMSIOT MOVE SIOT TTR YM02717
         MVI   DISPLID(R5),NULLID  INSURE ZERO ID FOR SIOT       Y02621
         MVC   DD12(DD3,R5),SIOT+SCTPJFCB-INDMSIOT MVE JFCB TTR YM02717
         MVI   DISPL2ID(R5),JFCBSID BLOCK ID INTO REMOTE LIST    Y02621
         MVI   QPARM+QMPOP-QMNAM,QMWRTE SET WRITE               YM02717
         MVI   QPARM+QMPNC-QMNAM,DD2 SET TWO WRITES             YM02717
         L     R1,TEXTBUFP         ADDRESSIBILITY FOR           YM02709
         USING TEXT,R1             TEXT STRING PREFIX.          YM02709
         TM    STRINDCS,LASTSTMT   LAST DD STMT FOR THIS STEP?  YM02709
         BO    CLEAN155            BR YES TO LAST DD PROCESSING.YM02717
         DROP  R1                                               YM02717
*  NOT LAST DD. CHECK IF SIOT WAS CREATED FOR CURRENT DD.       YM02717
         OC    SIOT+SIOTDSKA-INDMSIOT(3),SIOT+SIOTDSKA-INDMSIOT YM02717
         BZ    CLEAN159      SET DEFAULTS AND EXIT ON NO       @YA00900
         B     CLEAN158            BR YES TO WRITE SIOT TO SWA. YM02717
CLEAN155 DS    0H                                               YM02717
****************************************************************YM02717
*  LAST DD FOR THE STEP PROCESSING.                            *YM02717
*  SIOTS ARE NOT CHAINED ACROSS STEPS. VDA INSURES THAT THE    *YM02717
*  NEXT SIOT PTR (SCTPSIOT) FOR THE LAST SIOT  IS ZERO.        *YM02717
****************************************************************YM02717
         OC    SCT+SCTLSIOT-INSMSCT(3),SCT+SCTLSIOT-INSMSCT     YM02717*
                                   ANY NON-DYNAM DD THIS STEP?  YM02717
         BNZ   CLEAN160            BR YES TO UPDATE SIOT CHAIN. YM02717
*  NO SIOTS FOR THIS STEP. CLEAR 1ST SIOT POINTER IN THE SCT,   YM02717
*  INITIALIZED BY VEA.                                          YM02717
         XC    SCT+SCTFSIOT-INSMSCT(3),SCT+SCTFSIOT-INSMSCT     YM02717
CLEAN159 DS    0H            RESET SWAMGR DEFAULTS WHEN NO     @YA00900
*              OPERATION IS REQUESTED AFTER QMPA SETUP...      @YA00900
         MVI   QPARM+QMPOP-QMNAM,QMWRTA   DFLT-WRITE,ASSIGN    @YA00900
         MVI   QPARM+QMPCM-QMNAM,QMDFLT   DFLT-WRITE 1,ASSIGN 1@YA00900
         B     CLEAN154            BRANCH TO EXIT.              YM02717
CLEAN160 DS    0H                                               YM02717
*  A CHECK IS MADE TO SEE IF THE LAST SIOT LOGGED IN THE SCT    YM02717
*  CORRESPONDS TO THE SIOT FOR THE DD NOW BEING PROCESSED.      YM02717
*  (THIS WILL BE TRUE FOR MOST DD'S.)                           YM02717
         CLC   SIOT+SIOTDSKA-INDMSIOT(3),SCT+SCTLSIOT-INSMSCT   YM02717
         BE    CLEAN157            BR IF CURR SIOT IS LAST SIOT-YM02717*
                                   (STANDARD NON-DYNAM DD).     YM02717
*  CURRENT SIOT IS NOT THE LAST SIOT LOGGED IN THE SCT. THIS    YM02717
*  WILL BE THE CASE FOR:                                        YM02717
*     1. A DD WHICH IS THE OBJECT OF A DDNAME PARAM ON A        YM02717
*        PREVIOUS DD STATEMENT.                                 YM02717
*     2. A DD CONTAINING THE DYNAM PARAM.                       YM02717
*     3. A SYSCHK DD WITHOUT RESTART SPECIFICATION ON JOB CARD. YM02717
*  FOR THE ABOVE CASES, NO NEW SIOT IS CREATED. THEREFORE THE   YM02717
*  LAST SIOT PTR (SCTLSIOT) CONTAINS THE SVA FOR THE SIOT OF    YM02717
*  THE DD PRIOR TO THE CURRENT DD.                              YM02717
         TM    DDWA2,JDICTI3       DD OBJECT OF DDNAME= PARAM?  YM02717
         BZ    CLEAN170            NO, GO UPDATE SIOT CHAIN.    YM02717
*  FOR A DD WHICH IS THE OBJECT OF DDNAME PARAM, THE SIOT AND   YM02717
*  JFCB OF THE REFERRING DD HAVE BEEN READ BACK AND PROCESSED.  YM02717
*  THEY ARE NOW REWRITTEN TO SWA.                               YM02717
         BALR  RE,R6               WRITE SIOT AND JFCB TO SWA.  YM02717
CLEAN170 DS    0H                                               YM02717
*  AS NO NEW SIOT HAS BEEN CREATED FOR THE SPECIAL DD'S ABOVE,  YM02717
*  THE SIOT FOR THE DD IMMEDIATELY PRECEDING THE CURRENT DD     YM02717
*  BECOMES IN FACT THE LAST DD FOR THE STEP. AS THE SIOT FOR    YM02717
*  THIS PRECEDING DD ALREADY CONTAINS A PTR TO A NEXT SIOT AND  YM02717
*  HAS BEEN WRITTEN TO SWA, IT MUST BE READ BACK AND THE NEXT   YM02717
*  SIOT PTR ZEROED.                                             YM02717
         MVI   QPARM+QMPOP-QMNAM,QMREAD SET READ CODE.          YM02717
         MVI   QPARM+QMPNC-QMNAM,DD1     SET TO READ 1          YM02709
         MVC   4(3,R5),SCT+SCTLSIOT-INSMSCT MOVE SVA FOR SIOT   YM02717*
                                   FOR PREVIOUS DD TO REM LIST. YM02717
         BALR  RE,R6               GO GET SIOT FROM SWA         YM02709
         MVI   QPARM+QMPOP-QMNAM,QMWRTE  SET WRITE              YM02709
CLEAN157 DS    0H                                               YM02709
* CLEAR NEXT SIOT PTR OF THE LAST SIOT IN THE CHAIN             YM02709
         XC    SIOT+SCTPSIOT-INDMSIOT(DD3),SIOT+SCTPSIOT-INDMSIOT
CLEAN158 DS    0H                                               YM02717
*  ENTRY FOR ALL SIOT PROCESSING - LAST DD AND NOT LAST DD'S.   YM02717
         BALR  RE,R6               WRITE SIOT AND JFCB TO SWA.  YM02717
* AFTER BLOCK IS WRITTEN, CLEAR BLOCK ID IN REMOTE LIST TO       Y02621
* PREVENT INCORRECT IDENTIFICATION OF NEXT BLOCK WRITTEN. SWA    Y02621
* MGR USES  THIS ID IF NONZERO. IF ZERO, IT WILL USE ID IN BLOCK.Y02621
         MVI   DISPL2ID(R5),0      ZERO ID IN REMOTE LIST.       Y02621
CLEAN154 DS    0H                  ENTER                           121
         L     RF,DIEFVHE          EXIT                          Y02668
         BR    RF                  TO ROUTER.                    Y02668
*
CLEAN16  DS    0H                 ENTER
         LA    R3,UNQNAME+DD2     GET YEAR
         LA    R2,DD2             SET TWO.
         B     CLEAN18            TRANSFER
CLEAN17  DS    0H                 ENTER
         LA    R3,UNQNAME+DD4     GET DAY.
         LA    R2,DD3             SET THREE
CLEAN18  DS    0H                 ENTER
         BALR  RE,R8              GO TO TEST AND STORE
         BR    RF                 RETURN
CLEAN19  DS    0H                 ENTER
         BAL   RF,CLEAN16         SET EXP YEAR.
         BAL   RF,CLEAN17         SET EXP DAY.
CLEAN20  DS    0H                 ENTER.
         BAL   RF,CLEAN16         SET CREATE YEAR
         BAL   RF,CLEAN17         SET CREATE DAY
         BR    R1                 RETURN
         DS    0H                                                Y02668
DDLIMIT  DC    X'0663'            MAX. NUMBER OF DD'S            Y02668
HWDZERO  DC    X'0000'            HALF WORD OF ZERO'S            Y02668
XPDTZERO DC    X'FFFFFF'                SYMBOLIC ZERO EXPDT      A23350
* USED TO INDICATE TO IEFVM5LS THAT A ZERO EXPDT WAS             A23350
* SPECIFICALLY REQUESTED. X'FFFFFF' CAN NOT BE A VALID EXPDT     A23350
BLANKS   DC    CL8' '             BLANKS USED TO INITIALIZE NAME  M0784
*                                 COMPARISON FIELD.              A43671
BLANK16  DC    CL16' '     BLANKS TO INITIALIZE JFCBE          @Z40MPTH
         EJECT
*              **************************************************
*              *                                                *
*              *    A AND V CONSTANT TABLE.                     *
*              *                                                *
*              **************************************************
*
*                       V CONSTANTS.
*
DIEFVHQ  DC    V(IEFVHQ)          Q MANAGER.
DIENB901 DC    V(IEFNB901)         AMP PROCESSING RTN.           Y02668
DIEFVGS  DC    V(IEFVGS)          DICTIONARY SEARCH
DIEFVGT  DC    V(IEFVGT)          TEST AND STORE
DIEFVGK  DC    V(IEFVGK)          GET KEY.
DIEFVHE  DC    V(IEFVHE)           ROUTER.                       Y02668
DIEFVDB  DC    V(IEFVDBSD)        DATA INTEGITY.
DIEFVGI  DC    V(IEFVGI)          ENTER DICTIONARY.
DIEFVGM  DC    V(IEFVGM)          MESSAGE.
DIEFVHR  DC    V(IEFVHR)           WTO/WTOR MODULE               Y02668
*
*                       A CONSTANTS.
*
ADABTABL DC    A(DABTABLE)        ADDRESS OF BRANCH TABLE.
ADSNAMT1 DC    A(DSNAMET1)        ADDRESS OF LABEL IN PDT TABLE
ADSNAMT3 DC    A(DSNAMET3)        ADDRESS OF LABEL IN PDT TABLE.
AEXPDTT  DC    A(EXPDTT)          ADDRESS OF LABEL IN PDT TABLE.
AEXPDTT2 DC    A(EXPDTT2)         ADDRESS OF LABEL IN PDT          168
ASPACT18 DC    A(SPACET18)        ADDRESS OF LABEL IN PDT TABLE.
ASPACT32 DC    A(SPACET32)        ADDRESS OF LABEL IN PDT TABLE.
ADDT1    DC    A(DDT1)            ADDRESS OF LABEL IN PDT TABLE
ADDNAMET DC    A(DDNAMET)         ADDRESS OF LABEL IN PDT TABLE.
PATCH    DC    25F'0'   ********** ZAP SPACE *******************YM02717
         EJECT
*             ****************************************************
*             ****************************************************
*             **                                                **
*             **     DD ROUTINE PARAMETER DESCRIPTOR TABLE      **
*             **                                                **
*             ****************************************************
*             ****************************************************
         SPACE 2
*              **************************************************
*              *                                                *
*              *    PARAMETER DESCRIPTION ENTRY FOR DD.         *
*              *                                                *
*              **************************************************
DDT      DS    0C                 START OF INTRY.
         DC    AL1(DDT3-DDT)       LENGTH OF ENTRY.              Y02668
*              *
*              *    FIRST POSITION FOR KEY WORD
*              *
DDT1     DS    0C                 START OF FIRST POSITONS.
         DC    AL1(DDT3-DDT1)     LENGTH OF FIRST POSTION.
         DC    AL1((DDT3-DDT2)*HEX)  CONTROL BYTE.
         DC    AL1(JDDT1)         MAX LENGTH OF DD LABEL.
DDT2     DS    0C                 START OF CONTROL BYTES.
         TAS   OR1,JFCB,JFCBLTYP,JFCSL
         TAS   AMVCN,SIOT,SCTDDNAM
         TAS   AMVCN,DDWA,DDWA5
*              *
*              *
DDT3     DS    0C                 END FIRST POSITION AND CONTROL BYTES.
         EJECT
*              **************************************************
*              *                                                *
*              *    PARAMETER DESCRIPTION ENTRY FOR TRTCH.      *
*              *                                                *
*              **************************************************
TRTCHT   DS    0C START OF ENTRY
         DC    AL1(TRTCHT04-TRTCHT) LENGHT OF ENTRY
*              *
*              *    FIRST POSITION FOR KEY WORD
*              *
TRTCHT01 DS    0C START OF POSITION
         DC    AL1(TRTCHT03-TRTCHT01) LENGTH OF POSITION
         DC    AL1(DCBCNT) NUMBER OF CONTROL BYTES
         DC    AL1(DCBINIT)
TRTCHT02 TAS   AND1,JFCB,JFCTRTCH,DD0
*        *
*        *     SECOND POSITION
*        *
TRTCHT04 DS    0C END OF ENTRY
TRTCHT03 TASCT OR1,JFCB,JFCTRTCH,                                      1
               (JFCTREV,JFCTREV,JFCCONV,JFCEVEN,JFCTRAN),              *
               (ET,TE,C,E,T)
         EJECT
*              **************************************************
*              *                                                *
*              *    PARAMETER DESCRIPTION ENTRY FOR STACK.      *
*              *                                                *
*              **************************************************
STACKT   DS    0C START OF ENTRY
         DC    AL1(STACKT04-STACKT) LENGTH OF ENTRY
*              *
*              *    FIRST POSITION FOR KEY WORD
*              *
STACKT01 DS    0C START OF POSITION
         DC    AL1(STACKT03-STACKT01) LENGTH OF POSITION
         DC    AL1(DCBCNT) NUMBER OF CONTROL BYTES
         DC    AL1(DCBINIT)
STACKT02 TAS   AND1,JFCB,JFCSTACK,DDMS1
*        *
*        *     SECOND POSITION
*        *
STACKT04 DS    0C END OF ENTRY
STACKT03 TASCT OR1,JFCB,JFCSTACK,                                      1
               (JFCONE,JFCTWO),                                        2
               (1,2)
         EJECT
*              **************************************************
*              *                                                *
*              *    PARAMETER DESCRIPTION ENTRY FOR SOWA.       *
*              *                                                *
*              **************************************************
*              *
*              *    FIRST POSITION FOR KEY WORD
*              *
SOWAT    TASCD CVB2,JFCB,JFCSOWA,JSOWA1,32767
         EJECT
*             ***********************************************    Y02668
*             *                                             *    Y02668
*             *    PARAMETER DESCRIPTION ENTRY FOR FREE     *    Y02670
*             *                                             *    Y02668
*             ***********************************************    Y02668
FREET    DS    0C                       START OF ENTRY           Y02670
         DC    AL1(FREET7-FREET)  LENGTH OF ENTRY               YM00391
FREET1   DS    0C                       START OF POSITION        Y02670
         DC    AL1(FREET7-FREET1) LENGTH OF POSITION            YM00391
         DC    AL1((FREET4-FREET3)*HEX+L'FREET2)                 Y02670
FREET2   DC    C'CLOSE'                 COMPARE BYTE             Y02670
FREET3   DS    0C                                                Y02670
         TAS   OR1,SIOT,SCTSBYT2,SIOCLUNL                        Y02670
FREET4   DS    0C                       END OF CONTROL BYTE      Y02670
         DC    AL1((FREET7-FREET6)*HEX+L'FREET5)                YM00391
FREET5    DC    C'END'            COMPARE BYTES                 YM00391
FREET6   DS    0C                                               YM00391
         TAS    OR1,SIOT,SCTSBYT2,DD0                           YM00391
FREET7   DS    0H                                               YM00391
         EJECT
*              **************************************************
*              *                                                *
*              *    PARAMETER DESCRIPTION ENTRY FOR RKP.        *
*              *                                                *
*              **************************************************
*              *
*              *    FIRST POSITION FOR KEY WORD
*              *
RKPT     TASCD CVB2,JFCB,JFCRKP,JRKP1,65535
         EJECT
*              **************************************************
*              *                                                *
*              *    PARAMETER DESCRIPTION ENTRY FOR RECFM.      *
*              *                                                *
*              **************************************************
RECFMT   DS    0C   START OF ENTRY
         DC    AL1(RECFMT04-RECFMT) LENGTH OF ENTRY
*              *
*              *    FIRST POSITION FOR KEY WORD
*              *
RECFMT01 DS    0C START OF POSITION
         DC    AL1(RECFMT03-RECFMT01) LENGTH OF POSITION
         DC    AL1(DCBCNT) NUMBER OF CONTROL BYTES
         DC    AL1(DCBINIT)
RECFMT02 TAS   AND1,JFCB,JFCRECFM,DD0
*        *
*        *     SECOND POSITION
*        *
RECFMT04 DS    0C END OF ENTRY
RECFMT03 TASCT OR1,JFCB,JFCRECFM,                                      1
               (JRECFM1,JRECFM2,JRECFM3,JRECFM4,JRECFM5,JRECFM6,JRECFM72
               ,JRECFM9,JRECFMC),                              @ZA24607C
               (F,V,U,T,B,S,A,M,D)                             @ZA24607
         EJECT                                                 @Y30OPSB
*              *********************************************   @Y30OPSB
*              *                                           *   @Y30OPSB
*              *   PARAMETER DESCRIPTION ENTRY FOR DSID    *   @Y30OPSB
*              *                                           *   @Y30OPSB
*              *********************************************   @Y30OPSB
         SPACE 2                                               @Y30OPSB
DSIDT    DS    0C            START OF ENTRY                    @Y30OPSB
         DC    AL1(DSIDT6-DSIDT)  LENGTH OF ENTRY              @Y30OPSB
*              *                                               @Y30OPSB
*              *        FIRST POSITION                         @Y30OPSB
*              *                                               @Y30OPSB
DSIDT1   DS    0C            START OF POSITION                 @Y30OPSB
         DC    AL1(DSIDT3-DSIDT1)  LENGTH OF POSITION          @Y30OPSB
         DC    AL1((DSIDT3-DSIDT2)*HEX)  CONTROL BYTE          @Y30OPSB
         DC    AL1(DSIDLEN)  MAX LENGTH OF DSID ID....         @Y30OPSB
DSIDT2   DS    0C            START OF CONTROL BYTES            @Y30OPSB
         TAS   AMVCN,JFCX,DSIDWORK                             @Y30OPSB
         TAS   OR1,SIOT,SIOTBYT3,DD8                           @ZA20610
DSIDT3   DS    0C            END OF FIRST POSITION             @Y30OPSB
*              *                                               @Y30OPSB
*              *        SECOND POSITION                        @Y30OPSB
*              *                                               @Y30OPSB
DSIDT4   DS    0C            START OF POSITION                 @Y30OPSB
         DC    AL1(DSIDT6-DSIDT4)  LENGTH OF POSITION          @Y30OPSB
         DC    AL1((DSIDT6-DSIDT6)*HEX+L'DSIDT5)  CONTROL BYTE @Y30OPSB
DSIDT5   DC    C'V'     CONPARE BYTE                           @Y30OPSB
DSIDT6   DS    0C            END OF SECOND POSITION AND ENTRY..@Y30OPSB
         EJECT
*              **************************************************
*              *                                                *
*              *    PARAMETER DESCRIPTION ENTRY FOR PRTSP.      *
*              *                                                *
*              **************************************************
PRTSPT   DS    0C START OF ENTRY
         DC    AL1(PRTSPT04-PRTSPT) LENGTH OF ENTRY
*              *
*              *    FIRST POSITION FOR KEY WORD.
*              *
PRTSPT01 DS    0C START OF POSITION
         DC    AL1(PRTSPT03-PRTSPT01) LENGTH OF POSITION
         DC    AL1(DCBCNT) NUMBER OF CONTROL BYTES
         DC    AL1(DCBINIT)
PRTSPT02 TAS   AND1,JFCB,JFCPRTSP,DD0
*        *
*        *     SECOND POSITION
*        *
PRTSPT04 DS    0C END OF ENTRY
PRTSPT03 TASCT OR1,JFCB,JFCPRTSP,                                      1
               (JFCSPNO,JFCSPONE,JFCSPTWO,JFCSPTHR),                   *
               (0,1,2,3)
         EJECT
*              **************************************************
*              *                                                *
*              *    PARAMETER DESCRIPTION ENTRY FOR OPTCD.      *
*              *                                                *
*              **************************************************
OPTCDT   DS    0C START OF POSITION
         DC    AL1(OPTCDT04-OPTCDT) LENGTH OF ENTRY
*              *
*              *    FIRST POSITION FOR KEY WORD
*              *
OPTCDT01 DS    0C START OF POSITION
         DC    AL1(OPTCDT03-OPTCDT01) LENGTH OF POSITION
         DC    AL1(DCBCNT) NUMBER OF CONTROL BYTES
         DC    AL1(DCBINIT)
OPTCDT02 TAS   AND1,JFCB,JFCOPTCD,DD0
*        *
*        *     SECOND POSITION
*        *
OPTCDT04 DS    0C END OF ENTRY
OPTCDT03 TASCT OR1,JFCB,JFCOPTCD,                                      1
               (JOPTCD1,JOPTCD3,JOPTCD4,JOPTCD5,JOPTCD6,JOPTCD7, S223672
               JOPTCD8,JOPTCD9,JOPTCDA,JOPTCDB,JOPTCDC,JOPTCDC, AS223673
               JPTCDD,JPTCDE,JPTCDF,JPTCDG,JPTCDH,JPTCDI),     @Z40MPTH4
               (W,M,E,I,F,C,A,L,R,Y,U,B,Z,T,H,O,Q,J)           @Z40MPTH
         EJECT
*              **************************************************
*              *                                                *
*              *    PARAMETER DESCRIPTION ENTRY FOR NTM.        *
*              *                                                *
*              **************************************************
*              *
*              *    FIRST POSITION FOR KEY WORD
*              *
NTMT     TASCD CVB1,JFCB,JFCNTM,JNTM1,99
         EJECT
*              **************************************************
*              *                                                *
*              *    PARAMETER DESCRIPTION ENTRY FOR NCP.        *
*              *                                                *
*              **************************************************
*              *
*              *    FIRST POSITION FOR KEY WORD
*              *
NCPT     TASCD CVB1,JFCB,JFCNCP,JNCP1,99
         EJECT
*              **************************************************
*              *                                                *
*              *      PARAMETER DESCRIPTION ENTRY FOR GNCP      *
*              *                                                *
*              **************************************************
*              *
*              *    FIRST POSITION
*              *
GNCPT    TASCD CVB1,JFCB,JFCBFTEK,JGNCP1,99
         EJECT
*              **************************************************
*              *                                                *
*              *    PARAMETER DESCRIPTION ENTRY FOR MODE.       *
*              *                                                *
*              **************************************************
MODET    DS    0C START OF POSITION
         DC    AL1(MODET04-MODET) LENGTH OF ENTRY
*              *
*              *    FIRST POSITION FOR KEY WORD
*              *
MODET01  DS    0C START OF POSITION
         DC    AL1(MODET03-MODET01) LENGTH OF POSITION
         DC    AL1(DCBCNT) NUMBER OF CONTROL BYTES
         DC    AL1(DCBINIT)
MODET02  TAS   AND1,JFCB,JFCMODE,DDMS2
*        *
*        *     SECOND POSITION
*        *
MODET04  DS    0C END OF ENTRY
MODET03  TASCT OR1,JFCB,JFCMODE,                                       1
               (JMODE1,JMODE2,JMODE3,JMODE4,JMODE5,JMODE6),       21088X
               (C,E,CO,CR,EO,ER)                                  21088
         EJECT
*              **************************************************Y01948
*              *                                                *Y01948
*              *   PARAMETER DESCRIPTION TABLE FOR IPLTXID      *Y01948
*              *                                                *Y01948
*              **************************************************Y01948
IPLTXIDT DS    0C    START OF ENTRY                              Y01948
         DC    AL1(IPLTXID5-IPLTXIDT)    LENGTH OF ENTRY        YM00383
*
*        *     FIRST POSITION FOR KEYWORD                        Y01948
*
IPLTXID1 DS    0C    START OF POSITION                           Y01948
         DC    AL1(IPLTXID3-IPLTXID1)    LENGTH OF P0SITION     YM00383
         DC    AL1(DCBCNT)          NUMBER OF CONTROL BYTE      YM00383
         DC    AL1(DCBINIT)                                     YM00383
IPLTXID2 TAS   AND1,JFCB,JFCIPLTX,DD0                           YM00383
*                                                               YM00383
*        *     SECOND POSITION                                  YM00383
*                                                               YM00383
IPLTXID3 DS    0C                   START OF POSITION           YM00383
         DC    AL1(IPLTXID5-IPLTXID3) LENGTH OF POSITION        YM00383
         DC    AL1((IPLTXID5-IPLTXID4)*HEX)   CONTROL BYTE      YM00383
         DC    AL1(JIPLTXID)    MAXIMUM LENGTH OF PARAMETER     YM00383
IPLTXID4 DS    0C    START OF CONTROL BYTES                     YM00383
         TAS   AMVCN,JFCB,JFCIPLTX                              YM00383
IPLTXID5 DS    0C    END OF ENTRY                               YM00383
         EJECT
*              ***************************************************21088
*              *                                                 *21088
*              *  PARAMETER DESCRIPTION ENTRY FOR FUNC.          *21088
*              *                                                 *21088
*              ***************************************************21088
*
FUNCT    DS    0C                 START OF POSITION               21088
         DC    AL1(FUNCT04-FUNCT) LENGTH OF ENTRY                 21088
*              *
*              *    FIRST POSITION FOR KEY WORD                   21088
*              *
FUNCT01  DS    0C                 START OF POSITION               21088
         DC    AL1(FUNCT03-FUNCT01) LENGTH OF POSITION            21088
         DC    AL1(DCBCNT)          NUMBER OF CONTROL BYTES       21088
         DC    AL1(DCBINIT)                                       21088
FUNCT02  TAS   AND1,JFCB,JFCFUNC,DD1                              21088
FUNCT04  DS    0C                    END OF FIRST ENTRY           M0083
*              *
*              *    SECOND POSITION                               21088
*              *
FUNCT03  TASCT OR1,JFCB,JFCFUNC,                                  21088X
               (JFUNC1,JFUNC2,JFUNC3,JFUNC4,JFUNC5,JFUNC6,JFUNC7,JFUNC8X
               ,JFUNC9,JFUNC10,JFUNC11,JFUNC12,JFUNC13,JFUNC14,JFUNC15,X
               JFUNC16,JFUNC17,JFUNC18,JFUNC19,JFUNC20),               X
               (I,R,P,W,WT,WXT,RP,RPD,RW,RWT,RWXT,PW,PWX,PWXT,RPW,RPWX,X
               RPWXT,RPWD,WX,RWX)                                 21088
          EJECT
*              **************************************************
*              *                                                *
*              *    PARAMETER DESCRIPTION ENTRY FOR LRECL.      *
*              *                                                *
*              **************************************************
*              *
*              *    FIRST POSITION FOR KEY WORD
*              *
LRECLT   TASCD CVB2,JFCB,JFCLRECL,JLRECL1,32760
         EJECT
*              **************************************************
*              *                                                *
*              *    PARAMETER DESCRIPTION ENTRY FOR LIMCT.      *
*              *                                                *
*              **************************************************
*              *
*              *    FIRST POSITION FOR KEY WORD
*              *
LIMCTT   TASCD CVB2,JFCB,JFCLIMCT+1,JLIMCT1,32760                  AAAA
         EJECT
*              **************************************************
*              *                                                *
*              *    PARAMETER DESCRIPTION ENTRY FOR KEYLEN.     *
*              *                                                *
*              **************************************************
*              *
*              *    FIRST POSITION FOR KEY WORD
*              *
KEYLENT  TASCD CVB1,JFCB,JFCKEYLE,JKEYLEN1,255
         EJECT
*              **************************************************
*              *                                                *
*              *    PARAMETER DESCRIPTION ENTRY FOR INTVL.      *
*              *                                                *
*              **************************************************
*              *
*              *    FIRST POSITION FOR KEY WORD
*              *
INTVLT   TASCD CVB1,JFCB,JFCINTVL,JINTVL1,255
         EJECT
*              ********************************************************
*              *                                                      *
*              *   PARAMETER DESCRIPTION ENTRY FOR UCS                *
*              *                                                      *
*              ********************************************************
UCST     DS    0C START OF ENTRY
         DC    AL1(UCST09-UCST) LENGTH ENTRY
*        *
*        *     FIRST ENTRY
*        *
UCST01   DS    0C
         DC    AL1(UCST03-UCST01) LENGTH POSITION
         DC    AL1((UCST03-UCST02)*HEX) CONTROL BYTES
         DC    AL1(JUCS1) MAX LENGTH
UCST02   DS    0C START OF CONTROL BYTES
         TAS   MVCN,JFCB,JFCRKP
*        *
*        *     SECOND ENTRY
*        *
UCST03   DS    0C START OF POSITION
         DC    AL1(UCST06-UCST03) LENGTH POSITION
         DC    AL1((UCST06-UCST05)*HEX+L'UCST04) CONTROL BYTE
UCST04   DC    C'FOLD' COMPARE BYTES
UCST05   DS    0C START CONTROL BYTES
         TAS   OR1,JFCB,JFCINTVL,JUCS2
*        *
*        *     THIRD POSITION
*        *
UCST06   DS    0C START OF POSITION
         DC    AL1(UCST09-UCST06) LENGTH OF POSITION
         DC    AL1((UCST09-UCST08)*HEX+L'UCST07) CONTROL BYTES
UCST07   DC    C'VERIFY' COMPARE BYTES
UCST08   DS    0C START OF CONTROL BYTES
         TAS   OR1,JFCB,JFCINTVL,JUCS3
UCST09   DS    0C END OF ENTRY
         EJECT
*              **************************************************
*              *                                                * 20202
*              *    PARAMETER DESCRIPTION ENTRY FOR FCB         * 20202
*              *                                                * 20202
*              ************************************************** 20202
FCBT     DS    0C                  START OF ENTRY                 20202
         DC    AL1(FCBT09-FCBT)    LENGTH OF ENTRY                20202
*              *                                                  20202
*              *    FIRST POSITION                                20202
*              *                                                  20202
FCBT01   DS    0C                  START OF POSITION              20202
         DC    AL1(FCBT03-FCBT01)  LENGTH OF POSITION             20202
         DC    AL1((FCBT03-FCBT02)*HEX) CONTROL BYTE              20202
         DC    AL1(JAFCB1)         MAXIMUM LENGTH OF ENTRY        20202
FCBT02   DS    0C                                                 20202
         TAS   MVCN,JFCB,JFCFCBID                                A50455
*              *                                                  20202
*              *    SECOND POSITION                               20202
*              *                                                  20202
FCBT03   DS    0C                  START OF POSITION              20202
         DC    AL1(FCBT09-FCBT03)  LENGTH OF POSITION             20202
         DC    AL1((FCBT06-FCBT05)*HEX+L'FCBT04) CONTROL BYTE     20202
FCBT04   DC    C'ALIGN'                                           20202
FCBT05   DS    0C                  START OF CONTROL BYTES         20202
         TAS   OR1,JFCB,JFCUCSOP,JAFCB2                           20202
FCBT06   DS    0C                                                 20202
         DC    AL1((FCBT09-FCBT08)*HEX+L'FCBT07)  CONTROL BYTE    20202
FCBT07   DC    C'VERIFY'                                          20202
FCBT08   DS    0C                  START OF CONTROL BYTES         20202
         TAS   OR1,JFCB,JFCUCSOP,JAFCB3                           20202
FCBT09   DS    0C                  END OF ENTRY                   20202
         EJECT
*              **************************************************
*              *                                                *
*              *    PARAMETER DESCRIPTION ENTRY FOR EROP.       *
*              *                                                *
*              **************************************************
EROPTT   DS    0C START OF POSITION
         DC    AL1(EROPTT04-EROPTT) LENGTH OF ENTRY
*              *
*              *    FIRST POSITION FOR KEY WORD
*              *
EROPTT01 DS    0C START OF POSITION
         DC    AL1(EROPTT03-EROPTT01) LENGTH OF POSITION
         DC    AL1(DCBCNT) NUMBER OF CONTROL BYTES
         DC    AL1(DCBINIT)
EROPTT02 TAS   AND1,JFCB,JFCEROPT,DD0
*        *
*        *     SECOND POSITION
*        *
EROPTT04 DS    0C END OF ENTRY
EROPTT03 TASCT OR1,JFCB,JFCEROPT,                                      1
               (JFCACC,JFCSKP,JFCABN,JFCTOPT),                  AS22365*
               (ACC,SKP,ABE,T)                                  AS22365
         EJECT
*              **************************************************
*              *                                                *
*              *    PARAMETER DESCRIPTION ENTRY FOR DSORG.      *
*              *                                                *
*              **************************************************
DSORGT   DS    0C START OF ENTRY
         DC    AL1(DSORGT04-DSORGT) LENGTH OF ENTRY
*              *
*              *    FIRST POSITION FOR KEY WORD
*              *
DSORGT01 DS    0C START OF POSITION
         DC    AL1(DSORGT03-DSORGT01) LENGTH OF POSITION
         DC    AL1(DCBCNT) NUMBER OF CONTROL BYTES
         DC    AL1(DCBINIT)
DSORGT02 TAS   AND1,JFCB,JFCDSORG,DD0
*        *
*        *     SECOND POSITION
*        *
DSORGT04 DS    0C END OF ENTRY
DSORGT03 TASCT OR1,JFCB,JFCDSORG,                                      1
               (JDSORG1,JDSORG2,JDSORG3,JDSORG4,JDSORG5,JDSORG6,JDSORG72
               ,JDSORG8,JDSORG9,JDSORGA,JDSORGB),                      3
               (ISU,IS,PSU,PS,DAU,DA,CX,CQ,MQ,POU,PO)
         EJECT
*              **************************************************
*              *                                                *
*              *    PARAMETER DESCRIPTION ENTRY FOR DEN.        *
*              *                                                *
*              **************************************************
DENT     DS    0C START OF ENTRY
         DC    AL1(DENT04-DENT) LENGTH OF ENTRY
*              *
*              *    FIRST POSITION FOR KEY WORD
*              *
DENT01   DS    0C START OF POSITION
         DC    AL1(DENT03-DENT01) LENGTH OF POSITION
         DC    AL1(DCBCNT) NUMBER OF CONTROL BYTES
         DC    AL1(DCBINIT)
DENT02   TAS   AND1,JFCB,JFCDEN,DD0
*        *
*        *     SECOND POSITION
*        *
DENT04   DS    0C END OF ENTRY
DENT03   TASCT OR1,JFCB,JFCDEN,                                        1
               (JFC200,JFC556,JFC800,JFC1600,JFC6250),           Y02670*
               (0,1,2,3,4)                                       Y02670
         EJECT
*              **************************************************
*              *                                                *
*              *    PARAMETER DESCRIPTION ENTRY FOR DBUFNO.     *
*              *                                                *
*              **************************************************
*              *
*              *    FIRST POSITION FOR KEY WORD
*              *
*                                                                  AAAA
*DBUFNOT TASCD CVB1,JFCB,JFCDBUFN,JDBUFNO1,255   DBUFNO NOT SUPPORTED
*                                                                  AAAA
         EJECT
*              **************************************************
*              *                                                *
*              *    PARAMETER DESCRIPTION ENTRY FOR CYLOFL.     *
*              *                                                *
*              **************************************************
*              *
*              *    FIRST POSITION FOR KEY WORD
*              *
CYLOFLT  TASCD CVB1,JFCB,JFCCYLOF,JCYLOFL1,99
         EJECT
*              **************************************************
*              *                                                *
*              *    PARAMETER DESCRIPTION ENTRY FOR CPRI.       *
*              *                                                *
*              **************************************************
CPRIT    DS    0C START OF ENTRY                                    696
         DC    AL1(CPRIT04-CPRIT) LENGTH OF ENTRY                   696
*              *
*              *    FIRST POSITION FOR KEY WORD
*              *
CPRIT01  DS    0C START OF POSITION                                 696
         DC    AL1(CPRIT03-CPRIT01) LENGTH OF ENTRY                 696
         DC    AL1(DCBCNT) NUMBER OF CONTROL BYTES                  696
         DC    AL1(DCBINIT)                                         696
CPRIT02  TAS   AND1,JFCB,JFCCPRI,DD0                                696
*        *
*        *     SECOND POSITION
*        *
CPRIT04  DS    0C END OF ENTRY                                      696
CPRIT03  TASCT OR1,JFCB,JFCCPRI,                                   696 1
               (JCPRI1,JCPRI2,JCPRI3),                             696 2
               (R,E,S)                                              696
         EJECT
*             **********************************************     Y02668
*             *                                            *     Y02668
*             *   PARAMETER DESCRIPTION ENTRY FOR HOLD     *     Y02668
*             *                                            *     Y02668
*             **********************************************     Y02668
         SPACE
HOLDT    DS    0C                 START OF ENTRY                 Y02668
         DC    AL1(HOLDT6-HOLDT)  LENGTH OF ENTRY                Y02668
HOLDT1   DS    0C                 START OF POSITION              Y02668
         DC    AL1(HOLDT6-HOLDT1) LENGTH OF POSITION             Y02668
         DC    AL1((HOLDT4-HOLDT3)*HEX+L'HOLDT2) CONTROL BYTE    Y02668
HOLDT2   DC    C'YES'             COMPARE BYTES                  Y02668
HOLDT3   DS    0C                                                Y02668
         TAS   OR1,SIOT,SIOTBYT1,SIOTHOLD                        Y02668
HOLDT4   DS    0C                 END CONTROL BYTE               Y02668
         DC    AL1((HOLDT6-HOLDT6)*HEX+L'HOLDT5)                 Y02668
HOLDT5   DC    C'NO'              COMPARE BYTE                   Y02668
HOLDT6   DS    0C                 END OF ENTRY                   Y02668
         EJECT
*              **************************************************
*              *                                                *
*              *    PARAMETER DESCRIPTION ENTRY FOR CODE.       *
*              *                                                *
*              **************************************************
CODET    DS    0C START OF ENTRY
         DC    AL1(CODET04-CODET) LENGTH OF ENTRY
*              *
*              *    FIRST POSITION FOR KEY WORD
*              *
CODET01  DS    0C START OF POSITION
         DC    AL1(CODET03-CODET01) LENGTH OF POSITION
         DC    AL1(DCBCNT) NUMBER OF CONTROL BYTES
         DC    AL1(DCBINIT)
CODET02  TAS   AND1,JFCB,JFCCODE,DD0
*        *
*        *     SECOND POSITION
*        *
CODET04  DS    0C END OF ENTRY
CODET03  TASCT OR1,JFCB,JFCCODE,                                       1
               (JFCNOCON,JFCBCD,JFCFRI,JFCBUR,JFCNCR,JFCASCII,JFCTTY), *
               (N,I,F,B,C,A,T)
         EJECT
*              **************************************************
*              *                                                *
*              *    PARAMETER DESCRIPTION ENTRY FOR BUFRQ.      *
*              *                                                *
*              **************************************************
*              *
*              *    FIRST POSITION FOR KEY WORD
*              *
BUFRQT   TASCD CVB1,JFCB,JFCBUFRQ,JBUFRQ1,255
         EJECT
*              **************************************************
*              *                                                *
*              *    PARAMETER DESCRIPTION ENTRY FOR BUFNO.      *
*              *                                                *
*              **************************************************
*              *
*              *    FIRST POSITION FOR KEY WORD
*              *
BUFNOT   TASCD CVB1,JFCB,JFCBUFNO,JBUFNO1,255
         EJECT
*              **************************************************
*              *                                                *
*              *    PARAMETER DESCRIPTION ENTRY FOR BUFL.       *
*              *                                                *
*              **************************************************
*              *
*              *    FIRST POSITION FOR KEY WORD
*              *
BUFLT    TASCD CVB2,JFCB,JFCBUFL,JBUFL1,32760
         EJECT
*              *************************************************  19200
*              *                                               *  19200
*              *    PARAMETER DESCRIPTION ENTRY FOR BUFOFF.    *  19200
*              *                                               *  19200
*              *************************************************  19200
         SPACE                                                    19200
BUFOFFT  DS    0C START OF ENTRY.                                 19200
         DC    AL1(BUFOFFT6-BUFOFFT) LENGTH OF ENTRY.             19200
*              *                                                  19200
*              *    FIRST POSITION FOR KEY WORD                   19200
*              *                                                  19200
BUFOFFT1 DS    0C START OF POSITION                               19200
         DC    AL1(BUFOFFT6-BUFOFFT1) LENGTH OF POSITION          19200
         DC    AL1((BUFOFFT4-BUFOFFT3)*HEX+L'BUFOFFT2) CONTROL    19200
BUFOFFT2 DC    C'L' COMPARE BYTE                                  19200
BUFOFFT3 DS    0C START OF CONTROL BYTES                          19200
         TAS   OR1,JFCB,JFCBUFOF,JBUFOFF3  INDICATE TYPE L        19200
         TAS   OR1,JFCB,JFCBUFSW,JBUFOFF4  INDICATE BUFOFF        M2050
BUFOFFT4 DS    0C END OF CONTROL BYTES                            19200
         DC    AL1((BUFOFFT6-BUFOFFT5)*HEX) CONTROL BYTE          19200
         DC    AL1(JBUFOFF1) MAXIMUM LENGTH                       19200
BUFOFFT5 DS    0C START OF CONTROL BYTES                          19200
         TAS   CVB1,JFCB,JFCBUFOF,JBUFOFF2                        19200
         TAS   OR1,JFCB,JFCBUFSW,JBUFOFF4  INDICATE BUFOFF        M2050
         DS    0C END OF CONTROL BYTES                            19200
         DS    0C END OF POSITION                                 19200
BUFOFFT6 DS    0C END OF ENTRY                                    19200
         EJECT                                                    19200
*              **************************************************
*              *                                                *
*              *    PARAMETER DESCRIPTION ENTRY FOR BLKSIZE.    *
*              *                                                *
*              **************************************************
*              *
*              *    FIRST POSITION FOR KEY WORD
*              *
BLKSIZET TASCD CVB2,JFCB,JFCBLKSI,JBLKSIZ1,32760
         EJECT
*              **************************************************
*              *                                                *
*              *    PARAMETER DESCRIPTION ENTRY FOR BFTEK.      *
*              *                                                *
*              **************************************************
BFTEKT   DS    0C START OF ENTRY
         DC    AL1(BFTEKT04-BFTEKT) LENGTH OF ENTRY
*              *
*              *    FIRST POSITION FOR KEY WORD
*              *
BFTEKT01 DS    0C START OF ENTRY
         DC    AL1(BFTEKT03-BFTEKT01) LENGTH OF POSITION
         DC    AL1(DCBCNT) NUMBER OF CONTROL BYTES
         DC    AL1(DCBINIT)
BFTEKT02 TAS   AND1,JFCB,JFCBFTEK,JBFTEK7                        A30036
*        *
*        *     SECOND POSITION
*        *
BFTEKT04 DS    0C END OF ENTRY
BFTEKT03 TASCT OR1,JFCB,JFCBFTEK,                                      1
               (JFCSIM,JFCEXC,JFCDYN,JBFTEK5,JBFTEK6),          AS240142
               (S,E,D,A,R)                                      AS24014
         EJECT
*              **************************************************
*              *                                                *
*              *    PARAMETER DESCRIPTION ENTRY FOR BFALN.      *
*              *                                                *
*              **************************************************
BFALNT   DS    0C START OF ENTRY
         DC    AL1(BFALNT04-BFALNT) LENGTH OF ENTRY
*              *
*              *    FIRST POSITION FOR KEY WORD
*              *
BFALNT01 DS    0C START OF ENTRY
         DC    AL1(BFALNT03-BFALNT01) LENGTH OF POSITION
         DC    AL1(DCBCNT) NUMBER OF CONTROL BYTES
         DC    AL1(DCBINIT)
BFALNT02 TAS   AND1,JFCB,JFCBFALN,JBFALN3                        A30036
*        *
*        *     SECOND POSITION
*        *
BFALNT04 DS    0C END OF ENTRY
BFALNT03 TASCT OR1,JFCB,JFCBFALN,                                      1
               (JFCDWORD,JFCFWORD),                                    2
               (D,F)
         EJECT
*              **************************************************
*              *                                                *
*              *    PARAMETER DESCRIPTION ENTRY FOR RETPD.      *
*              *                                                *
*              **************************************************
*              *
*              *    FIRST POSITION FOR KEY WORD
*              *
RETPDT   TASCD CVB2,DDWA,DDWA6,JRETPD1,9999
         EJECT
*              **************************************************
*              *                                                *
*              *    PARAMETER DESCRIPTION ENTRY FOR EXPD.       *
*              *                                                *
*              **************************************************
EXPDTT   DS    0C
         DC    AL1(EXPDTT5-EXPDTT)
*              *
*              *    FIRST POSITION FOR KEY WORD
*              *
EXPDTT1  DS    0C
         TASCE CVB1,JFCB,JFCBXPDT,JEXPDT1,99
*              *
*              *    SECOND POSITION FOR KEY WORD.
*              *
EXPDTT2  DS    0C
         TASCE CVB2,JFCB,JFCBXPDT+1,JEXPDT2,366
*              *
*              *    THIRD POSITION FOR KEY WORD.
*              *
EXPDTT3  DS    0C
         TASCE CVB1,JFCB,JFCBCRDT,JEXPDT1,99
*              *
*              *    FOURTH POSITION FOR KEY WORD.
*              *
EXPDTT4  DS    0C
         TASCE CVB2,JFCB,JFCBCRDT+1,JEXPDT2,366
EXPDTT5  DS    0C
         EJECT
*              **************************************************  AAAA
*              *                                                *  AAAA
*              *    PARAMETER DESCRIPTION TABLE HIARCHY         *  AAAA
*              *                                                *  AAAA
*              **************************************************  AAAA
HIARCHYT DS    0C START OF ENTRY                                   AABA
         DC    AL1(HIAR04-HIARCHYT) LENGTH OF ENTRY                AABA
*              *                                                   AABA
*              *    FIRST POSITION                                 AABA
*              *                                                   AABA
HIAR01   DS    0C START OF POSITION                                AABA
         DC    AL1(HIAR03-HIAR01) LENGTH OF POSITION               AABA
         DC    AL1(DCBCNT) NUMBER OF CONTROL BYTES                 AABA
         DC    AL1(DCBINIT)                                        AABA
HIAR02   TAS   AND1,JFCB,JFCBHIAR,JHIAR3                           AABA
*              *                                                   AABA
*              *    SECOND POSITION                                AABA
*              *                                                   AABA
HIAR04   DS    0C                                                  AABA
HIAR03   TASCT OR1,JFCB,JFCBHIAR,                                  AABA1
               (JHIAR1,JHIAR2),                                    AABA2
               (0,1)                                               AABA
         EJECT
*              **************************************************  AAAA
*              *                                                *
*              *    PARAMETER DESCRIPTION ENTRY FOR REF.        *
*              *                                                *
*              **************************************************
REFT     DS    0C
         EJECT
*              **************************************************
*              *                                                *
*              *    PARAMETER DESCRIPTION ENTRY FOR SER.        *
*              *                                                *
*              **************************************************
SERT     DS    0C
         EJECT
*              **************************************************
*              *                                                *
*              *    PARAMETER DESCRIPTION ENTRY FOR SEP MINOR.  *
*              *                                                *
*              **************************************************
SEPMT    DS    0C START OF ENTRY.
         DC    AL1(SEPMT3-SEPMT) LENGTH OF ENTRY.
*              *
*              *    FIRST POSITION FOR KEY WORD
*              *
SEPMT1   DS    0C START OF POSITION
         DC    AL1(SEPMT3-SEPMT1) LENGTH OF POSITION.
         DC    AL1((SEPMT3-SEPMT2)*HEX) CONTROL BYTE
         DC    AL1(JSEPM1) LENGTH ZERO.
SEPMT2   DS    0C START OF CONTROL BYTES
SEPMT3   DS    0C END OF ENTRY
         EJECT
*              **************************************************
*              *                                                *
*              *    PARAMETER DESCRIPTION ENTRY FOR AFF MINOR.  *
*              *                                                *
*              **************************************************
AFFMT    DS    0C START OF ENTRY.
         DC    AL1(AFFMT3-AFFMT) LENGTH OF ENTRY
*              *
*              *    FIRST POSITION FOR KEY WORD
*              *
AFFMT1   DS    0C START OF POSITION.
         DC    AL1(AFFMT3-AFFMT1) LENGTH OF POSITION.
         DC    AL1((AFFMT3-AFFMT2)*HEX) CONTROL BYTE
         DC    AL1(JAFFM1) LENGTH ZERO
AFFMT2   DS    0C START OF CONTROL BYTES
         TAS   OR1,SIOT,SCTSBYT1,SCTUNAFF
AFFMT3   DS    0C END OF ENTRY
         EJECT
*              **************************************************
*              *                                                *
*              *    PARAMETER DESCRIPTION ENTRY FOR SUBALLOC.   *
*              *                                                *
*              **************************************************
SUBALLOT DS    0C START OF ENTRY.
         DC    AL1(SUBALT17-SUBALLOT) LENGTH OF ENTRY
*              *
*              *    FIRST POSITION FOR KEY WORD
*              *
SUBALT03 DS    0C END OF CONTROL CONTROL BYTES
         DC    AL1(SUBALT11-SUBALT03)  LENGTH OF POSITION.
         DC    AL1((SUBALT06-SUBALT05)*HEX+L'SUBALT04) CONTROL BYTE.
SUBALT04 DC    C'TRK' COMPARE BYTES
SUBALT05 DS    0C START OF CONTROL BYTES
         TAS   OR1,JFCB,JFCBCTRI,JFCBTRK
SUBALT06 DS    0C END OF CONTROL BYTES.
         DC    AL1((SUBALT09-SUBALT08)*HEX+L'SUBALT07) CONTROL BYTE
SUBALT07 DC    C'CYL' COMPARE BYTES
SUBALT08 DS    0C START OF CONTROL BYTES.
         TAS   OR1,JFCB,JFCBCTRI,JFCBCYL
SUBALT09 DS    0C END OF CONTROL BYTES.
         DC    AL1((SUBALT11-SUBALT10)*HEX) CONTROL BYTE
         DC    AL1(JSUBAL6) MAX LENGTH.
SUBALT10 DS    0C START OF CONTROL BYTES
         TAS   OR1,JFCB,JFCBCTRI,JFCBAVR
         TAS   CVB3,JFCB,JFCBDRLH,JSUBAL8
*              *
*              *    SECOND POSITION FOR KEY WORD.
*              *
SUBALT11 DS    0C START OF POSITION.
         DC    AL1(SUBALT13-SUBALT11) LENGTH OF POSITION
         DC    AL1((SUBALT13-SUBALT12)*HEX) CONTROL BYTE.
         DC    AL1(JSUBAL9) MAX LENGTH
SUBALT12 DS    0C START OF CONTROL BYTES.
         TAS   CVB3,JFCB,JFCBPQTY,JSUBAL10
*              *
*              *    THIRD POSITION FOR KEY WORD.
*              *
SUBALT13 DS    0C START OF POSITION.
         DC    AL1(SUBALT15-SUBALT13) LENGTH OF POSITION
         DC    AL1((SUBALT15-SUBALT14)*HEX) CONTROL BYTE
         DC    AL1(JSUBAL11) MAX LENGTH.
SUBALT14 DS    0C START OF CONTROL BYTES
         TAS   CVB3,JFCB,JFCBSQTY,JSUBAL12
*              *
*              *    FOURTH POSITION FOR KEY WORD.
*              *
SUBALT15 DS    0C START OF POSITION
         DC    AL1(SUBALT17-SUBALT15) LENGTH OF POSITION
         DC    AL1((SUBALT17-SUBALT16)*HEX) CONTROL BYTE
         DC    AL1(JSUBAL13) MAX LENGTH.
SUBALT16 DS    0C START OF CONTROL BYTES
         TAS   CVB3,JFCB,JFCBDQTY,JSUBAL14
SUBALT17 DS    0C END OF ENTRY
         EJECT
*              **************************************************
*              *                                                *
*              *    PARAMETER DESCRIPTION ENTRY FOR SYSOUT.     *
*              *                                                *
*              **************************************************
SYSOUTT  DS    0C START OF ENTRY.
         DC    AL1(SYSOUT09-SYSOUTT) LENGTH OF ENTRY
*              *
*              *    FIRST POSITION FOR KEYWORD.
*              *
SYSOUT01 DS    0C START OF POSITION                                437
         DC    AL1(SYSOUT05-SYSOUT01) LENGTH OF POSITION.          437
         DC    AL1((SYSOUT05-SYSOUT02)*HEX) CONTROL BYTES.         437
         DC    AL1(JSYSOUT7) MAXIMUM LENGTH.                       437
SYSOUT02 DS    0C START OF CONTROL BYTES
         TAS   OR1,SIOT,SCTSBYT3,JSYSOUT3
         TAS   OR1,JFCB,JFCBTSDM,JSYSOUT0
         TAS   OR1,JFCB,JFCBLTYP,JSYSOUT6
         DC    AL1(AMVCN1*HEX+INDM) FUNCTION AND TABLE BYTE
         TAS   MVCN,SIOT,SCTOUTPN
*              *
*              *    SECOND POSITION FOR KEY WORD.
*              *
SYSOUT05 DS    0C START OF POSITION
         DC    AL1(SYSOUT07-SYSOUT05) LENGTH OF POSITION
         DC    AL1((SYSOUT07-SYSOUT06)*HEX) CONTROL BYTE
         DC    AL1(JSYSOUT8) MAX LENGTH.
SYSOUT06 DS    0C START OF CONTROL BYTES.
         TAS   AMVCN,SIOT,SCTOUTNM
*              *
*              *    THIRD POSITION FOR KEY WORD.
*              *
SYSOUT07 DS    0C START OF POSITION
         DC    AL1(SYSOUT09-SYSOUT08) LENGTH OF POSITION
         DC    AL1((SYSOUT09-SYSOUT08)*HEX) CONTROL BYTE
         DC    AL1(JSYSOUT9) MAX LENGTH.
SYSOUT08 DS    0C START OF CONTROL BYTES
         TAS   AMVCN2,SIOT,SCTOUTNO                            @ZA20550
SYSOUT09 DS    0C END OF ENTRY
         EJECT
*              **************************************************
*              *                                                *
*              *    PARAMETER DESCRIPTION ENTRY FOR DSNAME.     *
*              *                                                *
*              **************************************************
DSNAMET  DS    0C START OF ENTRY
         DC    AL1(DSNAMET7-DSNAMET) LENGTH OF ENTRY
*              *
*              *    FIRST POSITION FOR KEY WORD
*              *
DSNAMET1 DS    0C START OF POSITION
         DC    AL1(DSNAMET3-DSNAMET1) LENGTH OF POSITION
         DC    AL1((DSNAMET3-DSNAMET2)*HEX) CONTROL BYTE
         DC    AL1(JDSNAME1) MAX LENGTH OF DSNAME
DSNAMET2 DS    0C START OF CONTROL BYTES
         TAS   AMVCN,JFCB,JFCBDSNM
*              *
*              *    SECOND POSITION FOR KEY WORD.
*              *
DSNAMET3 DS    0C START OF POSITION
         DC    AL1(DSNAMET5-DSNAMET3) LENGTH OF POSITION
         DC    AL1((DSNAMET5-DSNAMET4)*HEX) CONTROL BYTE
         DC    AL1(JDSNAME2) MAX LENGTH OF ELEMENT NAME
DSNAMET4 DS    0C START OF CONTROL BYTES
         TAS   AMVCN,JFCB,JFCBELNM
         TAS   OR1,JFCB,JFCBIND1,JDSNAME5
*              *
*              *    THIRD POSITION FOR KEY WORD.
*              *
DSNAMET5 DS    0C START OF POSITION
         DC    AL1(DSNAMET7-DSNAMET5) LENGTH OF POSITION
         DC    AL1((DSNAMET7-DSNAMET6)*HEX) CONTROL BYTE
         DC    AL1(JDSNAME3) MAX LENGTH OF GENERATION NUMBER
DSNAMET6 DS    0C START OF CONTROL BYTES
         TAS   MVCN,JFCB,JFCBELNM
         TAS   OR1,SIOT,SCTSBYT4,JDSNAME4
         TAS   OR1,JFCB,JFCBIND1,JDSNAME6   SET GDG INDICATOR    210271
DSNAMET7 DS    0C END OF ENTRY
         EJECT
*              ************************************************** 20001
*              *                                                * 20001
*              *      PARAMETER DESCRIPTION TABLE FOR TERM      * 20001
*              *                  A TSO KEYWORD                 * 20001
*              ************************************************** 20001
         SPACE 3
TERMT    DS    0C                  START OF ENTRY          TSO    20001
         DC    AL1(TERMT03-TERMT)  LENGTH OF ENTRY         TSO    20001
TERMT01  DS    0C                  START OF POSITION       TSO    20001
         DC    AL1(TERMT03-TERMT01) LENGTH OF POSITION     TSO    20001
         DC    AL1((TERMT03-TERMT03)*HEX+L'TERMT02)        TSO    20001
TERMT02  DC    C'TS'               COMPARE BYTES           TSO    20001
TERMT03  DS    0C                  END OF ENTRY            TSO    20001
         EJECT                                                    20002
*              ************************************************** 20002
*              *                                                * 20002
*              *    PARAMETER DESCRIPTION TABLE FOR QNAME       * 20002
*              *                                                * 20002
*              ************************************************** 20002
QNAMET   DS    0C   START OF ENTRY                                20002
         DC    AL1(QNAMET3-QNAMET)  LENGTH OF ENTRY               20002
*              *                                                  20002
*              *    FIRST POSITION FOR KEYWORD                    20002
*              *                                                  20002
QNAMET1  DS   0C   START OF POSITION                              20002
         DC   AL1(QNAMET3-QNAMET1)  LENGTH OF POSITION            20002
         DC    AL1((QNAMET3-QNAMET2)*HEX)   CONTROL BYTE          20002
         DC    AL1(JQNAME1)   MAX LENGTH OF QNAME                 20002
QNAMET2  DS    0C   START OF CONTROL BYTES                        2002
         TAS   AMVCN,JFCB,JFCBDSNM                                20002
         TAS   OR1,SIOT,SIOTTSTC,SIOTQNAM  TCAM SUPPORT           20002
         TAS   OR1,SIOT,SCTSBYT1,SCTDUMMY                         20002
QNAMET3  DS    0C   END OF ENTRY                                  20002
         EJECT
*              ***************************************************
*              *                                                 *
*              *    PARAMETER DESCRIPTION TABLE FOR DUMMY        *
*              *                                                 *
*              ***************************************************
DUMMYT   DS    0C                 START OF ENTRY
         EJECT
*              ************************************************** 20001
*              *                                                * 20001
*              *     PARAMETER DESCRIPTION TABLE FOR DYNAM      * 20001
*              *                  A TSO KEYWORD                 * 20001
*              ************************************************** 20001
         SPACE 3
DYNAMT   DS    0C                  START OF ENTRY          TSO    20001
DYNAMZ   DS    0C                  END OF ENTRY            TSO    20001
         EJECT
*              **************************************************
*              *                                                *
*              *    PARAMETER DESCRIPTION ENTRY FOR CHKPT.      *
*              *                                                *
*              **************************************************
CHKPTT   DS    0C                    START OF ENTRY            @Z30JPSF
         DC    AL1(CHKPTT4-CHKPTT)   LENGTH OF ENTRY           @Z30JPSF
CHKPTT1  DS    0C                    START OF POSITION         @Z30JPSF
         DC    AL1(CHKPTT4-CHKPTT1)  LENGTH OF POSITION        @Z30JPSF
         DC    AL1((CHKPTT4-CHKPTT3)*HEX+L'CHKPTT2)   CTL      @Z30JPSF
CHKPTT2  DC    C'EOV'                COMPARE BYTES             @Z30JPSF
CHKPTT3  DS    0C                    START OF CTL BYTES        @Z30JPSF
         TAS   OR1,JFCB,JFCFLGS1,JFCBCEOV  CTL FUNCTION        @Z30JPSF
CHKPTT4  DS    0C                    END OF ENTRY              @Z30JPSF
         EJECT
*              **************************************************Y02668
*              *                                                *Y02668
*              *   PARAMETER DESCRIPTION TABLE FOR SYSIN COUNT  *Y02668
*              *                                                *Y02668
*              **************************************************Y02668
SYSINCTT DS    0C                  DUMMY PDT FOR INTERNAL KEY    Y02668
         EJECT
*              **************************************************
*              *                                                *
*              *    PARAMETER DESCRIPTION ENTRY FOR AMP.        *
*              *                                                *
*              **************************************************
         SPACE
AMPTT    DS    0C                 START OF ENTRY                 Y01113
         EJECT
*              **************************************************
*              *                                                *
*              *    PARAMETER DESCRIPTION ENTRY FOR SPLIT.      *
*              *                                                *
*              **************************************************
SPLITT   DS    0C START OF ENTRY.
         DC    AL1(SPLITT14-SPLITT) LENGTH OF ENTRY.
*              *
*              *    FIRST POSITION FOR KEY WORD
*              *
SPLITT03 DS    0C END OF CONTROL BYTES
         DC    AL1(SPLITT05-SPLITT03)  LENGTH OF POSITION.
         DC    AL1((SPLITT05-SPLITT04)*HEX) CONTROL BYTE
         DC    AL1(JSPLIT5) MAX LENGTH.
SPLITT04 DS    0C START OF CONTROL BYTES
         TAS   CVB1,JFCX,SPLITTRK,JSPLIT6                        Y02661
*              *
*              *    SECOND POSITION FOR KEY WORD.
*              *
SPLITT05 DS    0C START OF POSITION.
         DC    AL1(SPLITT10-SPLITT05) LENGTH OF POSITION
         DC    AL1((SPLITT08-SPLITT07)*HEX+L'SPLITT06) CONTROL BYTE.
SPLITT06 DC    C'CYL' COMPARE BYTES
SPLITT07 DS    0C START OF CONTROL BYTES.
         TAS   OR1,JFCX,SPLITBYT,JFCBCYL                         Y02661
SPLITT08 DS    0C END OF CONTROL BYTES.
         DC    AL1((SPLITT10-SPLITT09)*HEX) CONTROL BYTE
         DC    AL1(JSPLIT8) MAX LENGTH.
SPLITT09 DS    0C START OF CONTROL BYTES.
         TAS   CVB3,JFCX,SPLITBLN,JSPLIT9                        Y02661
         TAS   OR1,JFCX,SPLITBYT,JFCBAVR                         Y02661
*              *
*              *    THIRD POSITION FOR KEY WORD.
*              *
SPLITT10 DS    0C START OF POSITION
         DC    AL1(SPLITT12-SPLITT10) LENGTH OF POSITION
         DC    AL1((SPLITT12-SPLITT11)*HEX) CONTROL BYTE
         DC    AL1(JSPLIT10) MAX LENGTH
SPLITT11 DS    0C START OF CONTROL BYTES.
         TAS   CVB3,JFCX,SPLITPQY,JSPLIT11                       Y02661
*              *
*              *    FOURTH POSITION FOR KEY WORD.
*              *
SPLITT12 DS    0C START OF POSITIONAL
         DC    AL1(SPLITT14-SPLITT12) LENGTH OF POSITION
         DC    AL1((SPLITT14-SPLITT13)*HEX) CONTROL BYTE
         DC    AL1(JSPLIT12) MAX LENGTH
SPLITT13 DS    0C START OF CONTROL BYTES
         TAS   CVB3,JFCX,SPLITSQY,JSPLIT13                       Y02661
SPLITT14 DS    0C END OF ENTRY.
         EJECT
*              **************************************************
*              *                                                *
*              *    PARAMETER DESCRIPTION ENTRY FOR SPACE.      *
*              *                                                *
*              **************************************************
SPACET   DS    0C START OF ENTRY.
         DC    AL1(SPACET41-SPACET) LENGTH OF ENTRY
*              *
*              *    FIRST POSITION FOR KEY WORD
*              *
SPACET01 DS    0C START OF POSITION.
SPACET03 DS    0C EN
         DC    AL1(SPACET14-SPACET03)  LENGTH OF POSITION).
         DC    AL1((SPACET06-SPACET05)*HEX+L'SPACET04)
SPACET04 DC    C'TRK'
SPACET05 DS    0C
         TAS   OR1,JFCB,JFCBCTRI,JFCBTRK
SPACET06 DS    0C
         DC    AL1((SPACET09-SPACET08)*HEX+L'SPACET07)
SPACET07 DC    C'CYL'
SPACET08 DS    0C
         TAS   OR1,JFCB,JFCBCTRI,JFCBCYL
SPACET09 DS    0C
         DC    AL1((SPACET12-SPACET11)*HEX+L'SPACET10)
SPACET10 DC    C'ABSTR'
SPACET11 DS    0C
         TAS   OR1,DDWA,DDWA2,JDICTI5
SPACET12 DS    0C
         DC    AL1((SPACET14-SPACET13)*HEX)
         DC    AL1(JSPACE06)
SPACET13 DS    0C
         TAS   CVB3,JFCB,JFCBDRLH,JSPACE07
         TAS   OR1,JFCB,JFCBCTRI,JFCBAVR
*              *
*              *    SECOND POSITION FOR KEY WORD.
*              *
SPACET14 DS    0C START OF POSITION
         DC    AL1(SPACET16-SPACET14)
         DC    AL1((SPACET16-SPACET15)*HEX)
         DC    AL1(JSPACE08)
SPACET15 DS    0C
         TAS   CVB3,JFCB,JFCBPQTY,JSPACE09
SPACET16 DS    0C
         DC    AL1(SPACET18-SPACET16)
         DC    AL1((SPACET18-SPACET17)*HEX)
         DC    AL1(JSPACE10)
SPACET17 DS    0C
         TAS   CVB3,JFCB,JFCBSQTY,JSPACE11
SPACET18 DS    0C
         DC    AL1(SPACET20-SPACET18)
         DC    AL1((SPACET20-SPACET19)*HEX)
         DC    AL1(JSPACE12)
SPACET19 DS    0C
         TAS   CVB3,JFCB,JFCBDQTY,JSPACE13
*              *
*              *    THIRD POSITION FOR KEY WORD.
*              *
SPACET20 DS    0C
         DC    AL1(SPACET23-SPACET20)
         DC    AL1((SPACET23-SPACET22)*HEX+L'SPACET21)
SPACET21 DC    C'RLSE'
SPACET22 DS    0C
         TAS   OR1,JFCB,JFCBIND1,JFCRLSE
*              *
*              *    FOURTH POSITION FOR KEY WORD.
*              *
SPACET23 DS    0C
         DC    AL1(SPACET32-SPACET23)
         DC    AL1((SPACET26-SPACET25)*HEX+L'SPACET24)
SPACET24 DC    C'MXIG'
SPACET25 DS    0C
         TAS   OR1,JFCB,JFCBCTRI,JFCMIXG
SPACET26 DS    0C
         DC    AL1((SPACET29-SPACET28)*HEX+L'SPACET27)
SPACET27 DC    C'ALX'
SPACET28 DS    0C
         TAS   OR1,JFCB,JFCBCTRI,JFCALX
SPACET29 DS    0C
         DC    AL1((SPACET32-SPACET31)*HEX+L'SPACET30)
SPACET30 DC    C'CONTIG'
SPACET31 DS    0C
         TAS   OR1,JFCB,JFCBCTRI,JFCONTIG
*              *
*              *    FIFTH POSION FOR KEY WORD.
*              *
SPACET32 DS    0C
         DC    AL1(SPACET35-SPACET32)
         DC    AL1((SPACET35-SPACET34)*HEX+L'SPACET33)
SPACET33 DC    C'ROUND'
SPACET34 DS    0C
         TAS   OR1,JFCB,JFCBCTRI,JFCROUND
*              *
*              *    SECOND POSITION FOR KEY WORD.
*              *
SPACET35 DS    0C
         DC    AL1(SPACET37-SPACET35)
         DC    AL1((SPACET37-SPACET36)*HEX)
         DC    AL1(JSPACE19)
SPACET36 DS    0C
         TAS   CVB3,JFCB,JFCBPQTY,JSPACE20
*              *
*              *    THIRD POSITION FOR KEY WORD.
*              *
SPACET37 DS    0C
         DC    AL1(SPACET39-SPACET37)
         DC    AL1((SPACET39-SPACET38)*HEX)
         DC    AL1(JSPACE21)
SPACET38 DS    0C
         TAS   CVB2,JFCB,JFCBABST,JSPACE22
*              *
*              *    FOURTH POSITION FOR KEY WORD.
*              *
SPACET39 DS    0C START OF POSITION
         DC    AL1(SPACET41-SPACET39) LENGTH OF POSITION
         DC    AL1((SPACET41-SPACET40)*HEX) CONTROL BYTE.
         DC    AL1(JSPACE23) MAX LENGTH
SPACET40 DS    0C START OF CONTROL BYTES.
         TAS   CVB3,JFCB,JFCBDQTY,JSPACE24
SPACET41 DS    0C END OF ENTRY.
         EJECT                                                 @Y30LPSB
*              *********************************************** @Y30LPSB
*              *                                             * @Y30LPSB
*              *     PARAMETER DESCRIPTOR TABLE FOR MSVGP    * @Y30LPSB
*              *                                             * @Y30LPSB
*              *********************************************** @Y30LPSB
MSVGPT   DS    0C   START OF ENTRY                             @Y30LPSB
         DC    AL1(MSVGP3-MSVGPT)  LENGTH OF ENTRY             @Y30LPSB
*                   *                                          @Y30LPSB
*                   *  ONE POSITION FOR KEYWORD                @Y30LPSB
*                   *                                          @Y30LPSB
MSVGP1   DS    0C                                              @Y30LPSB
         DC    AL1(MSVGP3-MSVGP1)  START OF POSITION           @Y30LPSB
         DC    AL1((MSVGP3-MSVGP2)*HEX)  CONTROL BYTE          @Y30LPSB
         DC    AL1(MSVGPLN)  MAX LENGTH OF MSVGP ID            @Y30LPSB
MSVGP2   DS    0C    START OF CONTROL BYTES                    @Y30LPSB
         TAS   MVCN,JFCB,JFCMSVGP                              @Y30LPSB
         TAS   OR1,JFCB,JFCBCTRI,JFCBMSGP                      @Y30LPSB
         TAS   OR1,SIOT,SCTSDISP,PRIVATE                       @Y30LPSB
MSVGP3   DS    0C  END OF ENTRY                                @Y30LPSB
         EJECT
*              **************************************************
*              *                                                *
*              *    PARAMETER DESCRIPTION ENTRY FOR DISP.       *
*              *                                                *
*              **************************************************
DISPT    DS    0C START OF ENTRY.
         DC    AL1(DISPT41-DISPT)  LENGTH OF ENTRY                 000B
*              *
*              *    FIRST POSITION FOR KEY WORD
*              *
DISPT1   DS    0C START OF POSITION.
         DC    AL1(DISPT13-DISPT1) LENGTH OF POSITION.
         DC    AL1((DISPT4-DISPT3)*HEX+L'DISPT2) CONTROL BYTE.
DISPT2   DC    C'NEW' COMPARE BYTES.
DISPT3   DS    0C START OF CONTROL BYTES.
         TAS   OR1,JFCB,JFCBIND2,JFCNEW
         TAS   OR1,SIOT,SCTSBYT3,JDISP2
DISPT4   DS    0C END OF CONTROL BYTES.
         DC    AL1((DISPT7-DISPT6)*HEX+L'DISPT5) CONTROL BYTE.
DISPT5   DC    C'OLD' COMPARE BYTES.
DISPT6   DS    0C START OF CONTROL BYTES.
         TAS   OR1,JFCB,JFCBIND2,JFCOLD
         TAS   OR1,SIOT,SCTSBYT3,JDISP4
DISPT7   DS    0C END OF CONTROL BYTES.
         DC    AL1((DISPT10-DISPT9)*HEX+L'DISPT8) CONTROL BYTE.
DISPT8   DC    C'MOD' COMPARE BYTES.
DISPT9   DS    0C START OF CONTROL BYTES.
         TAS   OR1,JFCB,JFCBIND2,JFCMOD
         TAS   OR1,SIOT,SCTSBYT3,JDISP6
DISPT10  DS    0C END OF CONTROL BYTES.
DISPT91  DS    0C END OF CONTROL.
         DC    AL1((DISPT94-DISPT93)*HEX+L'DISPT92) CONTROL BYTE.
DISPT92  DC    C'SHR' COMPARE BYTES.
DISPT93  DS    0C START OF CONTROL BYTES.
         TAS   OR1,JFCB,JFCBIND2,JFCSHARE+JFCOLD
         TAS   OR1,SIOT,SCTSBYT3,JDISP8
DISPT94  DS    0C END OF CONTROL BYTES.
         DC    AL1((DISPT13-DISPT12)*HEX+L'DISPT11) CONTROL BYTE.
DISPT11  DC    C'SHARE' COMPARE BYTE.
DISPT12  DS    0C START OF CONTROL BYTES.
         TAS   OR1,JFCB,JFCBIND2,JFCSHARE+JFCOLD
         TAS   OR1,SIOT,SCTSBYT3,JDISP8
*              *
*              *    SECOND POSITION FOR KEY WORD.
*              *
DISPT13  DS    0C START OF POSITION.
         DC    AL1(DISPT28-DISPT13) LENGTH OF POSITION.
         DC    AL1((DISPT16-DISPT15)*HEX+L'DISPT14) CONTROL BYTR.
DISPT14  DC    C'DELETE' COMPARE BYTES.
DISPT15  DS    0C START OF CONTROL BYTES.
         TAS   OR1,SIOT,SCTSDISP,JDISP9
DISPT16  DS    0C END OF CONTROL BYTES.
         DC    AL1((DISPT19-DISPT18)*HEX+L'DISPT17) CONTROL BYTE.
DISPT17  DC    C'KEEP' COMPARE BYTES.
DISPT18  DS    0C START OF CONTROL BYTES.
         TAS   OR1,SIOT,SCTSDISP,JDISP10
DISPT19  DS    0C END OF CONTROL BYTES.
         DC    AL1((DISPT22-DISPT21)*HEX+L'DISPT20) CONTROL BYTE.
DISPT20  DC    C'PASS' COMPARE BYTES.
DISPT21  DS    0C START OF CONTROL BYTES.
         TAS   OR1,SIOT,SCTSDISP,JDISP11
DISPT22  DS    0C END OF CONTROL BYTES.
         DC    AL1((DISPT25-DISPT24)*HEX+L'DISPT23) CONTROL BYTE.
DISPT23  DC    C'CATLG' COMPARE BYTES.
DISPT24  DS    0C START OF CONTROL BYTES.
         TAS   OR1,SIOT,SCTSDISP,JDISP12
DISPT25  DS    0C END OF CONTROL BYTES.
         DC    AL1((DISPT28-DISPT27)*HEX+L'DISPT26) CONTROL BYTE.
DISPT26  DC    C'UNCATLG' COMPARE BYTES.
DISPT27  DS    0C START OF CONTROL BYTES.
         TAS   OR1,SIOT,SCTSDISP,JDISP13
DISPT28  DS    0C END OF ENTRY.
*              *                                                   000B
*              *         THIRD POSITION FOR KEYWORD                000B
*              *                                                   000B
DISPT29  DS    0C       STSRT OF POSITION                          000B
         DC    AL1(DISPT41-DISPT29)  LENGTH OF POSITION            000B
         DC    AL1((DISPT32-DISPT31)*HEX+L'DISPT30)  CONTROL BYTE  000B
DISPT30  DC    C'DELETE'  COMPARE BYTES                            000B
DISPT31  DS    0C  START OF CONTROL BYTES                          000B
         TAS   OR1,SIOT,SIOTALTD,JDISP9                            000B
DISPT32  DS    0C  END OF CONTROL BYTES                            000B
         DC    AL1((DISPT35-DISPT34)*HEX+L'DISPT33)  CONTROL BYTE  000B
DISPT33  DC    C'KEEP'  COMPARE BYTES                              000B
DISPT34  DS    0C  START OF CONTROL BYTES                          000B
         TAS   OR1,SIOT,SIOTALTD,JDISP10                           000B
DISPT35  DS    0C  END OF CONTROL BYTES                            000B
         DC    AL1((DISPT38-DISPT37)*HEX+L'DISPT36)  CONTROL BYTE  000B
DISPT36  DC    C'CATLG'  COMPARE BYTES                             000B
DISPT37  DS    0C  START OF CONTROL BYTES                          000B
         TAS   OR1,SIOT,SIOTALTD,JDISP12                           000B
DISPT38  DS    0C  END OF CONTROL BYTES                            000B
         DC    AL1((DISPT41-DISPT40)*HEX+L'DISPT39)  CONTROL BYTE  000B
DISPT39  DC    C'UNCATLG'  COMPARE BYTES                           000B
DISPT40  DS    0C  START OF CONTROL BYTES                          000B
         TAS   OR1,SIOT,SIOTALTD,JDISP13                           000B
DISPT41  DS    0C  END OF ENTRY                                    000B
         EJECT
*              **************************************************
*              *                                                *
*              *    PARAMETER DESCRIPTION ENTRY FOR SEP.        *
*              *                                                *
*              **************************************************
SEPT     DS    0C START OF ENTRY
         DC    AL1(SEPT3-SEPT) LENGTH OF ENTRY.
*              *
*              *    FIRST POSITION FOR KEY WORD
*              *
SEPT1    DS    0C START OF POSITION.
         DC    AL1(SEPT3-SEPT1) LENGTH OF POSITION.
         DC    AL1((SEPT3-SEPT2)*HEX) CONTROL BYTE.
         DC    AL1(JSEP1) LENGTH ZERO.
SEPT2    DS    0C START OF CONTROL BYTES
SEPT3    DS    0C END OF ENTRY.
         EJECT
*              **************************************************
*              *                                                *
*              *    PARAMETER DESCRIPTION ENTRY FOR AFF.        *
*              *                                                *
*              **************************************************
AFFT     DS    0C START OF ENTRY
         DC    AL1(AFFT3-AFFT) LENGTH OF ENTRY
*              *
*              *    FIRST POSITION FOR KEY WORD
*              *
AFFT1    DS    0C START OF POSITION.
         DC    AL1(AFFT3-AFFT1) LENGTH OF POSITION.
         DC    AL1((AFFT3-AFFT2)*HEX) CONTROL BYTE.
         DC    AL1(JAFF1) LENGTH ZERO.
AFFT2    DS    0C START OF CONTROL BYTES.
AFFT3    DS    0C END OF ENTRY.
         EJECT
*              **************************************************
*              *                                                *
*              *    PARAMETER DESCRIPTION ENTRY FOR VOLUME.     *
*              *                                                *
*              **************************************************
VOLUMET  DS    0C START OF ENTRY.
         DC    AL1(VOLUMETB-VOLUMET) LENGTH OF ENTRY.
*              *
*              *    FIRST POSITION FOR KEY WORD
*              *
VOLUMET1 DS    0C START OF POSITION
         DC    AL1(VOLUMET4-VOLUMET1) LENGTH OF POSITION.
         DC    AL1((VOLUMET4-VOLUMET3)*HEX+L'VOLUMET2) CONTROL & COMP.
VOLUMET2 DC    C'PRIVATE' COMPARE BYTES.
VOLUMET3 DS    0C START OF CONTROL BYTES.
         TAS   OR1,SIOT,SCTSDISP,PRIVATE                         Y02668
*              *
*              *    SECOND POSITION FOR KEY WORD.
*              *
VOLUMET4 DS    0C START OF POSITION.
         DC    AL1(VOLUMET7-VOLUMET4) LENGTH OF POSITION.
         DC    AL1((VOLUMET7-VOLUMET6)*HEX+L'VOLUMET5) CONTROL & COMP.
VOLUMET5 DC    C'RETAIN' COMPARE BYTES.
VOLUMET6 DS    0C START OF CONTROL BYTES.
         TAS   OR1,SIOT,SCTSDISP,SIOTRETN                      @ZD03010
         TAS   OR1,SIOT,SCTSDISP,SIOTRETN                      @ZA03600
*              *
*              *    THIRD POSITION FOR KEY WORD.
*              *
VOLUMET7 DS    0C START OF POSITION.
         DC    AL1(VOLUMET9-VOLUMET7) LENGTH OF POSITION.
         DC    AL1((VOLUMET9-VOLUMET8)*HEX) CONTROL BYTE
         DC    AL1(JVOLUMT3) MAXIMUM LENGTH.
VOLUMET8 DS    0C START OF CONTROL BYTES.
         TAS   CVB2,JFCB,JFCBVLSQ,JVOLUMT4
*              *
*              *    FOURTH POSITION FOR KEY WORD.
*              *
VOLUMET9 DS    0C START OF POSITION.
         DC    AL1(VOLUMETB-VOLUMET9) LENGTH OF POSITION.
         DC    AL1((VOLUMETB-VOLUMETA)*HEX) CONTROL BYTE.
         DC    AL1(JVOLUMT5) MAXIMUM LENGTH
VOLUMETA DS    0C START OF CONTROL BYTES.
         TAS   CVB1,JFCB,JFCBVLCT,JVOLUMT6
VOLUMETC DS    0C START OF CONTROL BYTES                            694
         TAS   CVB1,SIOT,SIOTVLCT,JVOLUMT6                          694
VOLUMETB DS    0C END OF ENTRY.
         EJECT
*              **************************************************
*              *                                                *
*              *    PARAMETER DESCRIPTION ENTRY FOR LABEL.      *
*              *                                                *
*              **************************************************
LABELT   DS    0C START OF ENTRY
         DC    AL1(LABELT24-LABELT)                                AADA
*              *
*              *    FIRST POSITION FOR KEY WORD
*              *
LABELT01 DS    0C START OF POSITION
         DC    AL1(LABELT03-LABELT01) LENGTH OF POSITION.
         DC    AL1((LABELT03-LABELT02)*HEX) CONTROL BYTE
         DC    AL1(JLABEL1) MAX LENGTH.
LABELT02 DS    0C START OF CONTROL BYTES
         TAS   CVB2,JFCB,JFCBFLSQ,JLABEL2
*              *
*              *    SECOND POSITION FOR KEY WORD.
*              *
LABELT03 DS    0C START OF POSITION.
         DC    AL1(LABELT15-LABELT03)
         DC    AL1((LABELT06-LABELT05)*HEX+L'LABELT04) CONTROL BYTE
LABELT04 DC    C'NL' COMPARE BYTES
LABELT05 DS    0C START OF CONTROL BYTES
         TAS   OR1,SIOT,SCTSBYT2,JLABEL3
         TAS   OR1,JFCB,JFCBLTYP,JFCNL
         TAS   AND1,JFCB,JFCBLTYP,DD255-JFCSL
LABELT06 DS    0C END OF CONTROL BYTES
         DC    AL1((LABELT09-LABELT08)*HEX+L'LABELT07) CONTROL BYTE
LABELT07 DC    C'SL' COMPARE BYTES.
LABELT08 DS    0C START OF CONTROL BYTES.
         TAS   OR1,JFCB,JFCBLTYP,JFCSL
LABELT09 DS    0C END OF CONTROL BYTES.
         DC    AL1((LABELT12-LABELT11)*HEX+L'LABELT10) CONTROL BYTE
LABELT10 DC    C'NSL' COMPARE BYTES
LABELT11 DS    0C START OF CONTROL BYTES
         TAS   OR1,SIOT,SCTSBYT2,JLABEL6
         TAS   OR1,JFCB,JFCBLTYP,JFCNSL
         TAS   AND1,JFCB,JFCBLTYP,DD255-JFCSL
LABELT12 DS    0C END OF CONTROL BYTES
         DC    AL1((LABELT3C-LABELT3B)*HEX+L'LABELT3A) CONTROL BYTE
LABELT3A DC    C'BLP' COMPARE BYTES
LABELT3B DS    0C START OF CONTROL BYTES
         TAS   OR1,SIOT,SCTSBYT2,JLABELA
         TAS   OR1,JFCB,JFCBLTYP,JFCBLP
         TAS   AND1,JFCB,JFCBLTYP,DD255-JFCSL
LABELT3C DS    0C END OD CONTROL BYTES
         DC    AL1((LABELT3D-LABELT14)*HEX+L'LABELT13) CONTROL    19200
LABELT13 DC    C'SUL' COMPARE BYTE
LABELT14 DS    0C START OF CONTROL BYTES.
         TAS   OR1,JFCB,JFCBLTYP,JLABEL8
LABELT3D DS    0C END OF CONTROL BYTES                            19200
         DC    AL1((LABELT3G-LABELT3F)*HEX+L'LABELT3E) CONTROL    19200
LABELT3E DC    C'AL' COMPARE BYTES                                19200
LABELT3F DS    0C START OF CONTROL BYTES.                         19200
         TAS   AND1,JFCB,JFCBLTYP,JLABELD1 REMOVE DEFAULT SL      19200
         TAS   OR1,JFCB,JFCBLTYP,JFCBAL  INDICATE USASI LABEL     19200
         TAS   OR1,SIOT,SCTSBYT4,JLABELE INDICATE USASI LABEL     19200
LABELT3G DS    0C END OF CONTROL BYTES.                           19200
         DC    AL1((LABELT3J-LABELT3I)*HEX+L'LABELT3H) CONTROL    19200
LABELT3H DC    C'AUL' COMPARE BYTES.                              19200
LABELT3I DS    0C START OF CONTROL BYTES.                         19200
         TAS   AND1,JFCB,JFCBLTYP,JLABELF1 TURN OFF SL DEFAULT    19200
         TAS   OR1,JFCB,JFCBLTYP,JLABELF INDICATE USASI LABEL     19200
         TAS   OR1,SIOT,SCTSBYT4,JLABELG INDICATE USASI LABEL     19200
LABELT3J DS    0C END OF CONTROL BYTES.                           19200
         DC    AL1((LABELT32-LABELT31)*HEX+L'LABELT30) CONTROL   210271
LABELT30 DC    C'LTM' COMPARE BYTES                              210271
LABELT31 DS    0C START OF CONTROL BYTES                         210271
         TAS   OR1,SIOT,SCTSBYT2,JLABEL3                         Y02668
         TAS   AND1,JFCB,JFCBLTYP,JLABELF1 TURN OFF SL DEFAULT   210271
         TAS   OR1,JFCB,JFCBLTYP,JLABLTM  INDICATE LTM           210271
         TAS   OR1,SIOT,SCTSBYT2,SCTUNLBD                        Y02668
LABELT32 DS    0C END OF CONTROL BYTES                           210271
*              *
*              *    THIRD POSITION FOR KEY WORD.
*              *
LABELT15 DS    0C END OF ENTRY.
         DC    AL1(LABELT18-LABELT15)
         DC    AL1((LABELT1A-LABELT17)*HEX+L'LABELT16) CONTRL BYTE RWPW
LABELT16 DC    C'PASSWORD'
LABELT17 DS    0C
         TAS   OR1,JFCB,JFCBIND2,JFCBSCTY
LABELT1A DS    0C START OF CONTROL BYTES                          M0659
         DC    AL1((LABELT18-LABELT1C)*HEX+L'LABELT1B) CONTROL    M0659
LABELT1B DC    C'NOPWREAD' COMPARE BYTE                           M0659
LABELT1C DS    0C                                                 M0659
         TAS   OR1,JFCB,JFCBIND2,JFCBRWPW                         M0659
*              *                                                   AADA
*              *     FOURTH POSITION                               AADA
*              *                                                   AADA
LABELT18 DS    0C START OF POSITION                                AADA
         DC    AL1(LABELT24-LABELT18) LENGTH OF POSITION           AADA
         DC    AL1((LABELT21-LABELT20)*HEX+L'LABELT19)             AADA
LABELT19 DC    C'IN' COMPARE BYTES                                 AADA
LABELT20 DS    0C START OF CONTROL BYTES                           AADA
         TAS    OR1,JFCB,JFCBFLG2,JFCINOP
LABELT21 DS    0C END OF CONTROL BYTES                             AADA
         DC    AL1((LABELT24-LABELT23)*HEX+L'LABELT22)             AADA
LABELT22 DC    C'OUT' COMPARE BYTES                                AADA
LABELT23 DS    0C START OF CONTROL BYTES                           AADA
         TAS    OR1,JFCB,JFCBFLG2,JFCOUTOP
LABELT24 DS    0C END OF ENTRY                                     AADA
         EJECT
*              **************************************************
*              *                                                *
*              *    PARAMETER DESCRIPTION ENTRY FOR UNIT.       *
*              *                                                *
*              **************************************************
UNITT    DS    0C START OF ENTRY.
         DC    AL1(UNITT13-UNITT) LENGTH OF ENTRY.
*              *
*              *    FIRST POSITION FOR KEY WORD
*              *
UNITT03  DS    0C END OF CONTROL BYTES
         DC    AL1(UNITT05-UNITT03) LENGTH OF POSITION.
         DC    AL1((UNITT05-UNITT04)*HEX) CONTROL BYTE
         DC    AL1(JUNIT3) MAX LENGTH
UNITT04  DS    0C START OF CONTROL BYTES
         TAS   MVCN,SIOT,SCTUTYPE
*              *
*              *    SECOND POSITION FOR KEY WORD.
*              *
UNITT05  DS    0C START OF POSITION
         DC    AL1(UNITT10-UNITT05) LENGTH OF POSITION
         DC    AL1((UNITT08-UNITT07)*HEX+L'UNITT06) CONTROL BYTE
UNITT06  DC    C'P' COMPARE BYTE
UNITT07  DS    0C START OF CONTROL BYTES
         TAS   OR1,SIOT,SCTSBYT1,JUNIT4
UNITT08  DS    0C END OF CONTROL BYTES
         DC    AL1((UNITT10-UNITT09)*HEX) CONTROL BYTE
         DC    AL1(JUNIT5) MAX LENGTH
UNITT09  DS    0C START OF CONTROL BYTES
         TAS   CVB1,SIOT,SCTNMBUT,JUNIT6
*              *
*              *    THIRD POSITION FOR KEY WORD.
*              *
UNITT10  DS    0C START OF POSITION
         DC    AL1(UNITT13-UNITT10) LENGTH OF POSITION
         DC    AL1((UNITT13-UNITT12)*HEX+L'UNITT11) CONTROL BYTE
UNITT11  DC    C'DEFER' COMPARE BYTES
UNITT12  DS    0C START OF CONTROL BYTES
         TAS   OR1,SIOT,SCTSBYT2,JUNIT7
UNITT13  DS    0C END OF ENTRY.
         EJECT
*              **************************************************
*              *                                                *
*              *    PARAMETER DESCRIPTION ENTRY FOR DCB.        *
*              *                                                *
*              **************************************************
DCBT     DS    0C START OF ENTRY.
*              *********************************************   @Z40MPTH
*              *                                           *   @Z40MPTH
*              *   PARAMETER DESCRIPTION TABLE FOR FLASH   *   @Z40MPTH
*              *                                           *   @Z40MPTH
*              *********************************************   @Z40MPTH
         SPACE 2                                               @Z40MPTH
FLASHT   DS    0C  START OF ENTRY                              @Z40MPTH
         DC    AL1(FLASH5-FLASHT)  LENGTH OF ENTRY             @Z40MPTH
*              *                                               @Z40MPTH
*              *    FIRST POSITION FOR KEYWORD                 @Z40MPTH
*              *                                               @Z40MPTH
FLASH1   DS    0C START OF POSITION                            @Z40MPTH
         DC    AL1(FLASH3-FLASH1) LENGTH OF POSITION           @Z40MPTH
         DC    AL1((FLASH3-FLASH2)*HEX) CONTROL BYTE           @Z40MPTH
         DC    AL1(FLASL)  MAX LENGTH OF FLASH ID              @Z40MPTH
FLASH2   DS    0C START OF CONTROL BYTES                       @Z40MPTH
         TAS   MVCN,JFCE,JFCBMAGT                              @Z40MPTH
         TAS   OR1,JFCB,JFCUCSOP,JFCBEXTP                      @Z40MPTH
FLASH3   DS    0C END OF FIRST ENTRY                           @Z40MPTH
*              *                                               @Z40MPTH
*              *    SECOND POSITION                            @Z40MPTH
*              *                                               @Z40MPTH
FLASH4   TASCE CVB1,JFCE,JFCIMTOT,FLASHCNT,255                 @Z40MPTH
FLASH5   DS    0C END OF ENTRY                                 @Z40MPTH
         EJECT                                                 @Z40MPTH
*              *********************************************   @Z40MPTH
*              *                                           *   @Z40MPTH
*              *   PARAMETER DESCRIPTION TABLE FOR BURST   *   @Z40MPTH
*              *                                           *   @Z40MPTH
*              *********************************************   @Z40MPTH
         SPACE 2                                               @Z40MPTH
BURSTT   DS    0C  START OF ENTRY                              @Z40MPTH
         DC    AL1(BURST7-BURSTT)  LENGTH OF ENTRY             @Z40MPTH
*              *                                               @Z40MPTH
*              *    FIRST POSITION FOR KEYWORD                 @Z40MPTH
*              *                                               @Z40MPTH
BURST1   DS    0C START OF POSITION                            @Z40MPTH
         DC    AL1(BURST7-BURST1)  LENGTH OF POSITION          @Z40MPTH
         DC    AL1((BURST4-BURST3)*HEX+L'BURST2) CONTROL BYTE  @Z40MPTH
BURST2   DC    C'Y' COMPARE BYTES                              @Z40MPTH
BURST3   DS    0C START OF CONTROL BYTES                       @Z40MPTH
         TAS   OR1,JFCB,JFCUCSOP,JFCBEXTP                      @Z40MPTH
         TAS   OR1,JFCE,JFCBFLAG,JFCBBST                       @Z40MPTH
BURST4   DS    0C END OF CONTROL BYTES                         @Z40MPTH
         DC    AL1((BURST7-BURST6)*HEX+L'BURST5) CONTROL BYTE  @Z40MPTH
BURST5   DC    C'N' COMPARE BYTES                              @Z40MPTH
BURST6   DS    0C START OF CONTROL BYTES                       @Z40MPTH
         TAS   OR1,JFCB,JFCUCSOP,JFCBEXTP                      @Z40MPTH
         TAS   OR1,JFCE,JFCBFLAG,JFCBCFS                       @Z40MPTH
BURST7   DS    0C END OF ENTRY                                 @Z40MPTH
         EJECT                                                 @Z40MPTH
*              *********************************************   @Z40MPTH
*              *                                           *   @Z40MPTH
*              *   PARAMETER DESCRIPTION TABLE FOR MODIFY  *   @Z40MPTH
*              *                                           *   @Z40MPTH
*              *********************************************   @Z40MPTH
         SPACE 2                                               @Z40MPTH
MODIFYT  DS    0C  START OF ENTRY
         DC    AL1(MODIFY5-MODIFYT) LENGTH OF ENTRY            @Z40MPTH
*              *                                               @Z40MPTH
*              *    FIRST POSITION FOR KEYWORD                 @Z40MPTH
*              *                                               @Z40MPTH
MODIFY1  DS    0C START OF POSITION                            @Z40MPTH
         DC    AL1(MODIFY3-MODIFY1) LENGTH OF POSITION         @Z40MPTH
         DC    AL1((MODIFY3-MODIFY2)*HEX) CONTROL BYTE         @Z40MPTH
         DC    AL1(MODIFL)  MAX LENGTH OF MODIFY ID            @Z40MPTH
MODIFY2  DS    0C START OF CONTROL BYTES                       @Z40MPTH
         TAS   MVCN,JFCE,JFCMODIF                              @Z40MPTH
         TAS   OR1,JFCB,JFCUCSOP,JFCBEXTP                      @Z40MPTH
MODIFY3  DS    0C END OF FIRST ENTRY                           @Z40MPTH
*              *                                               @Z40MPTH
*              *    SECOND POSITION                            @Z40MPTH
*              *                                               @Z40MPTH
MODIFY4  TASCE CVB1,JFCE,JFCIDTRC,MODFYTRC,3                   @Z40MPTH
MODIFY5  DS    0C END OF ENTRY                                 @Z40MPTH
         EJECT
*              *********************************************
*              *                                           *
*              *   PARAMETER DESCRIPTION TABLE FOR CHARS   *
*              *                                           *
*              *********************************************
         SPACE 2
CHARST   DS    0C
         DC    AL1(CHARS12-CHARST) LENGTH OF ENTRY             @Z40MPTH
*              *                                               @Z40MPTH
*              *    FIRST POSITION FOR KEYWORD                 @Z40MPTH
*              *                                               @Z40MPTH
CHARS1   DS    0C START OF POSITION                            @Z40MPTH
         DC    AL1(CHARS3-CHARS1)   LENGTH OF POSITION         @Z40MPTH
         DC    AL1((CHARS3-CHARS2)*HEX)  CONTROL BYTE          @Z40MPTH
         DC    AL1(CHARSL)  MAX LENGTH OF CHARS ID             @Z40MPTH
CHARS2   DS    0C START OF CONTROL BYTES                       @Z40MPTH
         TAS   MVCN,JFCE,JFCBTRS1                              @Z40MPTH
         TAS   OR1,JFCB,JFCUCSOP,JFCBEXTP                      @Z40MPTH
CHARS3   DS    0C END OF FIRST ENTRY                           @Z40MPTH
*              *                                               @Z40MPTH
*              *    SECOND POSITION FOR KEYWORD                @Z40MPTH
*              *                                               @Z40MPTH
CHARS4   DS    0C START OF POSITION                            @Z40MPTH
         DC    AL1(CHARS6-CHARS4) LENGTH OF POSITION           @Z40MPTH
         DC    AL1((CHARS6-CHARS5)*HEX) CONTROL BYTE           @Z40MPTH
         DC    AL1(CHARSL) MAX LENGTH OF CHARS ID              @Z40MPTH
CHARS5   DS    0C START OF CONTROL BYTES                       @Z40MPTH
         TAS   MVCN,JFCE,JFCBTRS2                              @Z40MPTH
CHARS6   DS    0C END OF SECOND ENTRY                          @Z40MPTH
*              *                                               @Z40MPTH
*              *    THIRD POSITION FOR KEYWORD                 @Z40MPTH
*              *                                               @Z40MPTH
CHARS7   DS    0C START OF POSITION                            @Z40MPTH
         DC    AL1(CHARS9-CHARS7) LENGTH OF POSITION           @Z40MPTH
         DC    AL1((CHARS9-CHARS8)*HEX) CONTROL BYTE           @Z40MPTH
         DC    AL1(CHARSL) MAX LENGTH OF CHARS ID              @Z40MPTH
CHARS8   DS    0C START OF CONTROL BYTES                       @Z40MPTH
         TAS   MVCN,JFCE,JFCBTRS3                              @Z40MPTH
CHARS9   DS    0C END OF THIRD ENTRY                           @Z40MPTH
*              *                                               @Z40MPTH
*              *    FOURTH POSITION FOR KEYWORDS               @Z40MPTH
*              *                                               @Z40MPTH
CHARS10  DS    0C START OF POSITION                            @Z40MPTH
         DC    AL1(CHARS12-CHARS10) LENGTH OF POSITION         @Z40MPTH
         DC    AL1((CHARS12-CHARS11)*HEX) CONTROL BYTE         @Z40MPTH
         DC    AL1(CHARSL) MAX LENGTH OF CHARS ID              @Z40MPTH
CHARS11  DS    0C START OF CONTROL BYTES                       @Z40MPTH
         TAS   MVCN,JFCE,JFCBTRS4                              @Z40MPTH
CHARS12  DS    0C END OF FOURTH ENTRY                          @Z40MPTH
         EJECT 1
*              ************************************************@G32HPPJ
*              *                                              *@G32HPPJ
*              *    PARAMETER DESCRIPTOR TABLE FOR PROTECT    *@G32HPPJ
*              *                                              *@G32HPPJ
*              ************************************************@G32HPPJ
PROTECTT DS    0C             START OF ENTRY                   @G32HPPJ
         DC    AL1(PROTET04-PROTECTT) LENGTH OF ENTRY          @G32HPPJ
PROTET01 DS    0C                       START OF POSITION      @G32HPPJ
         DC    AL1(PROTET04-PROTET01) LENGTH OF POSITION       @G32HPPJ
         DC    AL1((PROTET04-PROTET03)*HEX+L'PROTET02) CTL     @G32HPPJ
PROTET02 DC    C'YES'                COMPARE BYTES             @G32HPPJ
PROTET03 DS    0C                    START OF CONTROL BYTES    @G32HPPJ
         TAS   OR1,SIOT,SIOTBYT4,SIOTPROT  CTL FUNCTION        @G32HPPJ
PROTET04 DS    0C                    END OF ENTRY              @G32HPPJ
         EJECT
***************************************************************@G29AN2E
*              *                                              *@G29AN2E
*              *    PARAMETER DESCRIPTION ENTRY FOR SUBSYS    *@G29AN2E
*              *                                              *@G29AN2E
***************************************************************@G29AN2E
         SPACE 1                                               @G29AN2E
SUBSYST  DS    0C                       START OF ENTRY         @G29AN2E
         DC    AL1(SUBSYST3-SUBSYST)    LENGTH OF ENTRY        @G29AN2E
SUBSYST1 DS    0C                       START OF POSITION      @G29AN2E
         DC    AL1(SUBSYST3-SUBSYST1)   LENGTH OF POSITION     @G29AN2E
         DC    AL1((SUBSYST3-SUBSYST2)*HEX) CONTROL BYTE       @G29AN2E
         DC    AL1(JSUBSYS1)            MAX LENGTH OF FIRST    @G29AN2E
*                                       POSITION OF SUBSYS,    @G29AN2E
*                                       THE SSNAME             @G29AN2E
SUBSYST2 DS    0C                       START OF CONTROL BYTES @G29AN2E
         TAS   MVCN,SIOT,SIOTSSNM                              @G29AN2E
         TAS   OR1,SIOT,SIOTTSTC,SIOTSSGP                      @G29AN2E
         TAS   OR1,SIOT,SIOTBYT0,SIOTSSDS                      @G29AN2E
         TAS   OR1,JFCB,JFCBTSDM,JFCSDS                        @G29AN2E
SUBSYST3 DS    0C                       END OF ENTRY           @G29AN2E
         EJECT                                                 @G29AN2E
*              **********************************************    Y02668
*              *                                            *    Y02668
*              *    PARAMETER DESCRIPTION ENTRY FOR DEST    *    Y02668
*              *                                            *    Y02668
*              **********************************************    Y02668
         SPACE
DESTT    DS    0C                       START OF ENTRY           Y02668
         DC    AL1(DESTT3-DESTT)        LENGTH OF ENTRY          Y02668
DESTT1   DS    0C                       START OF POSITION        Y02668
         DC    AL1(DESTT3-DESTT1)       LENGTH OF POSITION       Y02668
         DC    AL1((DESTT3-DESTT2)*HEX) CONTROL BYTE             Y02668
         DC    AL1(JDEST1)              MAXIMUM LENGTH OF DEST   Y02668
DESTT2   DS    0C                                                Y02668
         TAS   MVCN,SIOT,SIOTDEST                              @ZA16418
DESTT3   DS    0C                                                Y02668
         EJECT
*             **********************************************     Y02670
*             *                                            *     Y02670
*             *   PARAMETER DESCRIPTION ENTRY FOR FRID     *     Y02670
*             *                                            *     Y02670
*             **********************************************     Y02670
         SPACE
FRIDT    DS    0C                       START OF ENTRY           Y02670
         DC    AL1(FRIDT03-FRIDT)       LENGTH OF ENTRY          Y02670
FRIDT01  DS    0C                       START OF POSITION        Y02670
         DC    AL1(FRIDT03-FRIDT01)     LENGTH OF POSITION       Y02670
         DC    AL1((FRIDT03-FRIDT02)*HEX) CONTROL BYTE           Y02670
         DC    AL1(JFRID1)              MAX. PARAMETER LENGTH    Y02670
FRIDT02  DS    0C                       START OF CONTROL BYTE    Y02670
         TAS   AMVCN,JFCB,JFCFCBID                               Y02670
FRIDT03  DS    0C                       END OF ENTRY             Y02670
         EJECT
*              ************************************************** 19028
*              *                                                * 19028
*              *    PARAMETER DESCRIPTION ENTRY FOR OUTLIM      * 19028
*              *                                                * 19028
*              ************************************************** 19028
OUTLIMT  DS    0C                           START OF ENTRY        19028
         DC    AL1(OUTLIMT3-OUTLIMT)        LENGTH OF ENTRY       19028
*              *                                                  19028
*              *    FIRST POSITION FOR KEYWORD                    19028
*              *                                                  19028
OUTLIMT1 DS    0C                           START OF POSITION     19028
         DC    AL1(OUTLIMT3-OUTLIMT1)       LENGTH OF POSITION    19028
         DC    AL1((OUTLIMT3-OUTLIMT2)*HEX)  CONTROL/COMPARE BYTE 19028
         DC    AL1(JOUTLIM1)                 MAX. LENGTH          19028
OUTLIMT2 DS    0C                                                 19028
         TAS   CVB3,JFCB,JFCOUTLI,JOUTLIM2                        19028
OUTLIMT3 DS    0C                                                 19028
         EJECT
*             ***********************************************    Y02668
*             *                                             *    Y02668
*             *    PARAMETER DESCRIPTION ENTRY FOR COPIES   *    Y02668
*             *                                             *    Y02668
*             ***********************************************    Y02668
         SPACE
COPIEST  DS    0C                 START OF ENTRY               @Z40MPTH
         DC    AL1(COPIES20-COPIEST)  LENGTH OF ENTRY          @Z40MPTH
*                                                              @Z40MPTH
*              FIRST POSITION--PRIMARY N VALUE                 @Z40MPTH
*                                                              @Z40MPTH
COPIES1  DS    0C                 START OF POSITION            @Z40MPTH
         DC    AL1(COPIES3-COPIES1)  LENGTH OF POSITION        @Z40MPTH
         DC    AL1((COPIES3-COPIES2)*HEX)  CONTROL BYTE        @Z40MPTH
         DC    AL1(DD3)           MAX CONVERSION LENGTH        @Z40MPTH
COPIES2  DS    0C                 START OF CONTROL BYTES       @Z40MPTH
         TAS   CVB1,SIOT,SIOTOUTC,JCOPIES1                     @Z40MPTH
COPIES3  DS    0C                 END OF FIRST POSITION        @Z40MPTH
*                                                              @Z40MPTH
*              SECOND POSITION--SUB N VALUES                   @Z40MPTH
*                                                              @Z40MPTH
COPIES4  DS    0C                 START OF FIRST SUBLIST       @Z40MPTH
         DC    AL1(COPIES6-COPIES4)  LENGTH OF POSITION        @Z40MPTH
         DC    AL1((COPIES6-COPIES5)*HEX)  CONTROL BYTE        @Z40MPTH
         DC    AL1(DD3)           MAX CONVERSION LENGTH        @Z40MPTH
COPIES5  DS    0C                 START OF CONTROL BYTES       @Z40MPTH
         TAS   CVB1,JFCE,JFCGRP1,JCOPIES1                      @Z40MPTH
         TAS   OR1,JFCB,JFCUCSOP,JFCBEXTP                      @Z40MPTH
COPIES6  DS    0C                 START OF SECOND SUBLIST      @Z40MPTH
         DC    AL1(COPIES8-COPIES6)  LENGTH OF POSITION        @Z40MPTH
         DC    AL1((COPIES8-COPIES7)*HEX)  CONTROL BYTE        @Z40MPTH
         DC    AL1(DD3)           MAX CONVERSION LENGTH        @Z40MPTH
COPIES7  DS    0C                 START OF CONTROL BYTES       @Z40MPTH
         TAS   CVB1,JFCE,JFCGRP2,JCOPIES1                      @Z40MPTH
COPIES8  DS    0C                 START OF THIRD SUBLIST       @Z40MPTH
         DC    AL1(COPIES10-COPIES8)  LENGTH OF POSITION       @Z40MPTH
         DC    AL1((COPIES10-COPIES9)*HEX)  CONTROL BYTE       @Z40MPTH
         DC    AL1(DD3)           MAX CONVERSION LENGTH        @Z40MPTH
COPIES9  DS    0C                 START OF CONTROL BYTES       @Z40MPTH
         TAS   CVB1,JFCE,JFCGRP3,JCOPIES1                      @Z40MPTH
COPIES10 DS    0C                 START OF FOURTH SUBLIST      @Z40MPTH
         DC    AL1(COPIES12-COPIES10)  LENGTH OF POSITION      @Z40MPTH
         DC    AL1((COPIES12-COPIES11)*HEX)  CONTROL BYTE      @Z40MPTH
         DC    AL1(DD3)           MAX CONVERSION LENGTH        @Z40MPTH
COPIES11 DS    0C                 START OF CONTROL BYT E       @Z40MPTH
         TAS   CVB1,JFCE,JFCGRP4,JCOPIES1                      @Z40MPTH
COPIES12 DS    0C                 START OF FIFTH SUBLIST       @Z40MPTH
         DC    AL1(COPIES14-COPIES12)  LENGTH OF POSITION      @Z40MPTH
         DC    AL1((COPIES14-COPIES13)*HEX)  CONTROL BYTE      @Z40MPTH
         DC    AL1(DD3)           MAX CONVERSION LENGTH        @Z40MPTH
COPIES13 DS    0C                 START OF CONTROL BYTES       @Z40MPTH
         TAS   CVB1,JFCE,JFCGRP5,JCOPIES1                      @Z40MPTH
COPIES14 DS    0C                 START OF SIXTH SUBLIST       @Z40MPTH
         DC    AL1(COPIES16-COPIES14)  LENGTH OF POSITION      @Z40MPTH
         DC    AL1((COPIES16-COPIES15)*HEX)  CONTROL BYTE      @Z40MPTH
         DC    AL1(DD3)           MAX CONVERSION LENGTH        @Z40MPTH
COPIES15 DS    0C                 START OF CONTROL BYTES       @Z40MPTH
         TAS   CVB1,JFCE,JFCGRP6,JCOPIES1                      @Z40MPTH
COPIES16 DS    0C                 START OF SEVENTH SUBLIST     @Z40MPTH
         DC    AL1(COPIES18-COPIES16)  LENGTH OF POSITION      @Z40MPTH
         DC    AL1((COPIES18-COPIES17)*HEX)  CONTROL BYTE      @Z40MPTH
         DC    AL1(DD3)           MAX CONVERSION LENGTH        @Z40MPTH
COPIES17 DS    0C                 START OF  CNTROL BYTES       @Z40MPTH
         TAS   CVB1,JFCE,JFCGRP7,JCOPIES1                      @Z40MPTH
COPIES18 DS    0C                 START OF EIGTH SUBLIST       @Z40MPTH
         DC    AL1(COPIES20-COPIES18)  LENGTH OF POSITION      @Z40MPTH
         DC    AL1((COPIES20-COPIES19)*HEX)  CONTROL BYTE      @Z40MPTH
         DC    AL1(DD3)           MAX CONVERSION LENGTH        @Z40MPTH
COPIES19 DS    0C                 START OF  CNTROL BYTES       @Z40MPTH
         TAS   CVB1,JFCE,JFCGRP8,JCOPIES1                      @Z40MPTH
COPIES20 DS    0C                 END OF POSITION AND ENTRY    @Z40MPTH
         EJECT
*              **************************************************
*              *                                                *
*              *    PARAMETER DESCRIPTION ENTRY FOR DDNAME.     *
*              *                                                *
*              **************************************************
DDNAMET  DS    0C
         EJECT                                                    20002
*              ************************************************** 20002
*              *                                                * 20002
*              *    PARAMETER DESCRIPTION ENTRY FOR BUFIN       * 20002
*              *                                                * 20002
*              ************************************************** 20002
*        *                                                        20002
*        *     FIRST POSITION FOR KEYWORD                         20002
*        *                                                        20002
BUFINT   TASCD CVB1,DDWA,DDWA61,JBUFINT1,15                       20002
         EJECT                                                    20002
*              ************************************************** 20002
*              *                                                * 20002
*              *    PARAMETER DESCRIPTION ENTRY FOR BUFOUT      * 20002
*              *                                                * 20002
*              ************************************************** 20002
*        *                                                        20002
*        *     FIRST POSITION FOR KEYWORD                         20002
*        *                                                        20002
BUFOUTT  TASCD CVB1,DDWA,DDWA61,JBUFINT1,15                       20002
         EJECT                                                    20002
*              ************************************************** 20002
*              *                                                * 20002
*              *    PARAMETER DESCRIPTION ENTRY FOR BUFMAX      * 20002
*              *                                                * 20002
*              ************************************************** 20002
*        *                                                        20002
*        *     FIRST POSITION FOR KEYWORD                         20002
*        *                                                        20002
BUFMAXT  TASCD CVB1,JFCB,JFCBUFMX,JBUFINT1,15                     20002
         EJECT                                                    20002
*              ************************************************** 20002
*              *                                                * 20002
*              *    PARAMETER DESCRIPTION ENTRY FOR BUFSIZE     * 20002
*              *                                                * 20002
*              ************************************************** 20002
*              *                                                * 20002
*        *     FIRST POSITION FOR KEYWORD                         20002
*              *                                                * 20002
BUFSIZET TASCD CVB2,JFCB,JFCBUFSI,JBUFSIZE,65535                  20002
         EJECT                                                    20002
*              ************************************************** 20002
*              *                                                * 20002
*              *    PARAMETER DESCRIPTION ENTRY FOR PCI         * 20002
*              *                                                * 20002
*              ************************************************** 20002
PCIT     DS    0C                      START OF ENTRY             20002
         DC    AL1(PCIT19-PCIT)        LENGTH OF ENTRY            20002
*        *                                                        20002
*        *     FIRST POSITION FOR KEYWORD                         20002
*        *                                                        20002
PCIT01   DS    0C                      START OF POSITION          20002
         DC    AL1(PCIT10-PCIT01)      LENGTH OF POSITION         20002
         DC    AL1((PCIT04-PCIT03)*HEX+L'PCIT02)  CONTROL BYTE    20002
PCIT02   DC    C'A'                    COMPARE BYTE               20002
PCIT03   DS    0C                      START OF CONTROL BYTES     20002
         TAS   OR1,JFCB,JFCPCI,JPCI1                              20002
PCIT04   DS    0C                      END OF CONTROL BYTES       20002
         DC    AL1((PCIT07-PCIT06)*HEX+L'PCIT05)  CONTROL BYTE    20002
PCIT05   DC    C'N'                    COMPARE BYTE               20002
PCIT06   DS    0C                      START OF CONTROL BYTES     20002
         TAS   OR1,JFCB,JFCPCI,JPCI3                              20002
PCIT07   DS    0C                      END OF CONTROL BYTES       20002
         DC    AL1((PCIT9A-PCIT09)*HEX+L'PCIT08)  CONTROL BYTE   Y01948
PCIT08   DC    C'R'                    COMPARE BYTE               20002
PCIT09   DS    0C                      START OF CONTROL BYTES     20002
         TAS   OR1,JFCB,JFCPCI,JPCI5                              20002
PCIT9A   DS    0C                      END OF CONTROL BYTES      Y01948
         DC    AL1((PCIT10-PCIT9C)*HEX+L'PCIT9B) CONTROL BYTE    Y01948
PCIT9B   DC    C'X'                    COMPARE BYTE              Y01948
PCIT9C   DS    0C                      START OF CONTROL BYTES    Y01948
         TAS   OR1,JFCB,JFCPCI,JPCI7                             Y01948
*        *                                                        20002
*        *     SECOND POSITION FOR KEYWORD                        20002
*        *                                                        20002
PCIT10   DS    0C                      START OF POSITION          20002
         DC    AL1(PCIT19-PCIT10)      LENGTH OF POSITION         20002
         DC    AL1((PCIT13-PCIT12)*HEX+L'PCIT11)  CONTROL BYTE    20002
PCIT11   DC    C'A'                    COMPARE BYTE               20002
PCIT12   DS    0C                      START OF CONTROL BYTES     20002
         TAS   OR1,JFCB,JFCPCI,JPCI2                              20002
PCIT13   DS    0C                      END OF CONTROL BYTES       20002
         DC    AL1((PCIT16-PCIT15)*HEX+L'PCIT14)  CONTROL BYTE    20002
PCIT14   DC    C'N'                    COMPARE BYTE               20002
PCIT15   DS    0C                      START OF CONTROL BYTES     20002
         TAS   OR1,JFCB,JFCPCI,JPCI4                              20002
PCIT16   DS    0C                      END OF CONTROL BYTES       20002
         DC    AL1((PCIT18A-PCIT18)*HEX+L'PCIT17) CONTROL BYTE   Y01948
PCIT17   DC    C'R'                    COMPARE BYTE               20002
PCIT18   DS    0C                      START OF CONTROL BYTES     20002
         TAS   OR1,JFCB,JFCPCI,JPCI6                              20002
PCIT18A  DS    0C                      END OF CONTROL BYTES      Y01948
         DC    AL1((PCIT19-PCIT18C)*HEX+L'PCIT18B) CONTROL BYTE  Y01948
PCIT18B  DC    C'X'                    COMPARE BYTE              Y01948
PCIT18C  DS    0C                      START OF CONTROL BYTES    Y01948
         TAS   OR1,JFCB,JFCPCI,JPCI8                             Y01948
PCIT19   DS    0C                      END OF ENTRY               20002
         EJECT                                                    20002
*              ************************************************** 20002
*              *                                                * 20002
*              *    PARAMETER DESCRIPTION ENTRY FOR RESERVE     * 20002
*              *                                                * 20002
*              ************************************************** 20002
RESERVET DS    0C                      START OF ENTRY             20002
         DC    AL1(RESRVT05-RESERVET) LENGTH OF ENTRY           Y02668
*        *                                                        20002
*        *     FIRST POSITION FOR KEYWORD                         20002
*        *                                                        20002
RESRVT01 DS    0C                      START OF FIRST POSITION    20002
         DC    AL1(RESRVT03-RESRVT01)  LENGTH OF FIRST POSITION   20002
         DC    AL1((RESRVT03-RESRVT02)*HEX)      CONTROL BYTE     20002
         DC    AL1(JRESERV1)           MAX LENGTH 1 PARAM         20002
RESRVT02 DS    0C                      START OF CONTROL BYTES     20002
         TAS   CVB1,JFCB,JFCRESRV,JRESERV2                        20002
*        *                                                        20002
*        *     SECOND POSITION FOR KEYWORD                        20002
*        *                                                        20002
RESRVT03 DS    0C                      END FIRST POSITION         20002
         DC    AL1(RESRVT05-RESRVT03)  LENGTH OF SECOND POSITION  20002
         DC    AL1((RESRVT05-RESRVT04)*HEX)      CONTROL BYTE     20002
         DC    AL1(JRESERV1)           MAX LENGTH 2 PARAM         20002
RESRVT04 DS    0C                      START OF CONTROL BYTES     20002
         TAS   CVB1,JFCB,JFCRESRV+1,JRESERV2                      20002
*        *                                                        20002
*        *     THIRD POSITION FOR KEYWORD                         20002
*        *                                                        20002
RESRVT05 DS    0C                      END SECOND POSITION        20002
         EJECT                                                    20002
*              ************************************************** 20002
*              *                                                * 20002
*              *    PARAMETER DESCRIPTION ENTRY FOR THRESH      * 20002
*              *                                                * 20002
*              ************************************************** 20002
THRESHT  TASCD CVB1,JFCB,JFCTHRSH,JTHRESHT,100                    20002
         EJECT
*              *************************************************  21009
*              *                                               *  21009
*              *   PARAMETER DESCRIPTION ENTRY FOR DLM.        *  21009
*              *                                               *  21009
*              ************************************************   21009
*                                                                 21009
DLMT     DS    0C                                                 21009
         DC    AL1(DLMT3-DLMT)         START OF ENTRY             21009
*              *                                                  21009
*              *    FIRST POSITION FOR KEYWORD                    21009
*              *                                                  21009
DLMT1    DS    0C                      START OF POSITION          21009
         DC    AL1(DLMT3-DLMT1)        LENGTH OF POSITION         21009
         DC    AL1((DLMT3-DLMT2)*HEX)  CONTROL / COMPARE BYTE     21009
DLMT2    DS    0C                      START OF CONTROL BYTES     21009
DLMT3    DS    0C                                                 21009
         EJECT                                                   I21042
*              **************************************************I21042
*              *                                                *I21042
*              *    PARAMETER DESCRIPTION ENTRY FOR DIAGNS      *I21042
*              *                                                *I21042
*              **************************************************I21042
DIAGNST  DS    0C                       START OF ENTRY           I21042
         DC    AL1(DIAGNST4-DIAGNST)    LENGTH OF ENTRY          I21042
DIAGNST1 DS    0C                       START OF POSITION        I21042
         DC    AL1(DIAGNST4-DIAGNST1)   LENGTH OF POSITION       I21042
         DC    AL1((DIAGNST4-DIAGNST3)*HEX+L'DIAGNST2) CNTRL BYTE M0071
DIAGNST2 DC    C'TRACE'                 COMPARE BYTES            I21042
DIAGNST3 DS    0C                       START OF CNTRL BYTES     I21042
         TAS   OR1,JFCB,JFCBFLG2,JFCTRACE                        I21042
DIAGNST4 DS    0C                       END OF ENTRY             I21042
         EJECT
*             ****************************************************
*             ****************************************************
*             **                                                **
*             **         DD ROUTINE KEYWORD BRANCH TABLE        **
*             **                                                **
*             ****************************************************
*             ****************************************************
         SPACE 3
DABTABLE DS    0H
DDL      TRAT  DDN,DDS,DDP,DDT
TRTCHL   TRAT  TRTCHN,TRTCHS,TRTCHP,TRTCHT
STACKL   TRAT  STACKN,STACKS,STACKP,STACKT
SOWAL    TRAT  SOWAN,SOWAS,SOWAP,SOWAT
RKPL     TRAT  RKPN,RKPS,RKPP,RKPT
RECFML   TRAT  RECFMN,RECFMS,RECFMP,RECFMT
PRTSPL   TRAT  PRTSPN,PRTSPS,PRTSPP,PRTSPT
OPTCDL   TRAT  OPTCDN,OPTCDS,OPTCDP,OPTCDT
NTML     TRAT  NTMN,NTMS,NTMP,NTMT
NCPL     TRAT  NCPN,NCPS,NCPP,NCPT
MODEL    TRAT  MODEN,MODES,MODEP,MODET
LRECLL   TRAT  LRECLN,LRECLS,LRECLP,LRECLT
LIMCTL   TRAT  LIMCTN,LIMCTS,LIMCTP,LIMCTT
KEYLENL  TRAT  KEYLENN,KEYLENS,KEYLENP,KEYLENT
INTVLL   TRAT  INTVLN,INTVLS,INTVLP,INTVLT
EROPTL   TRAT  EROPTN,EROPTS,EROPTP,EROPTT
DSORGL   TRAT  DSORGN,DSORGS,DSORGP,DSORGT
DENL     TRAT  DENN,DENS,DENP,DENT
*                                                                  AAAA
*                                                                  AAAA
*DBUFNOL TRAT DBUFNON,DBUFNOS,DBUFNOP,DBUFNOT  DBUFNO NOT SUPPORTED
*                                                                  AAAA
HIARCHYL TRAT  HIARCHYN,HIARCHYS,HIARCHYP,HIARCHYT                 AAAA
CYLOFLL  TRAT  CYLOFLN,CYLOFLS,CYLOFLP,CYLOFLT
CPRIL    TRAT  CPRIN,CPRIS,CPRIP,CPRIT
CODEL    TRAT  CODEN,CODES,CODEP,CODET
BUFRQL   TRAT  BUFRQN,BUFRQS,BUFRQP,BUFRQT
BUFNOL   TRAT  BUFNON,BUFNOS,BUFNOP,BUFNOT
BUFLL    TRAT  BUFLN,BUFLS,BUFLP,BUFLT
BLKSIZEL TRAT  BLKSIZEN,BLKSIZES,BLKSIZEP,BLKSIZET
BFTEKL   TRAT  BFTEKN,BFTEKS,BFTEKP,BFTEKT
BFALNL   TRAT  BFALNN,BFALNS,BFALNP,BFALNT
RETPDL   TRAT  RETPDN,RETPDS,RETPDP,RETPDT
EXPDTL   TRAT  EXPDTN,EXPDTS,EXPDTP,EXPDTT
REFL     TRAT  REFN,REFS,REFP,REFT
SERL     TRAT  SERN,SERS,SERP,SERT
SEPML    TRAT  SEPMN,SEPMS,SEPMP,SEPMT
AFFML    TRAT  AFFMN,AFFMS,AFFMP,AFFMT
SUBALLOL TRAT  SUBALLON,SUBALLOS,SUBALLOP,SUBALLOT
SYSOUTL  TRAT  SYSOUTN,SYSOUTS,SYSOUTP,SYSOUTT
DSNAMEL  TRAT  DSNAMEN,DSNAMES1,DSNAMEP,DSNAMET
DDNAMEL  TRAT  DDNAMEN,DDNAMES,DDNAMEP,DDNAMET
SPLITL   TRAT  SPLITN,SPLITS,SPLITP,SPLITT
SPACEL   TRAT  SPACEN,SPACES,SPACEP,SPACET
DISPL    TRAT  DISPN,DISPS,DISPP,DISPT
SEPL     TRAT  SEPN,SEPS,SEPP,SEPT
AFFL     TRAT  AFFN,AFFS,AFFP,AFFT
VOLUMEL  TRAT  VOLUMEN,VOLUMES,VOLUMEP,VOLUMET
LABELL   TRAT  LABELN,LABELS,LABELP,LABELT
UNITL    TRAT  UNITN,UNITS,UNITP,UNITT
DCBL     TRAT  DCBN,DCBS,DCBP,DCBT
CHKPTL   TRAT  CHKPTN,CHKPTS,CHKPTP,CHKPTT                     @Z30JPSF
DUMMYL   TRAT  DUMMYN,DUMMYS,DUMMYP,DUMMYT
UCSL     TRAT  UCSN,UCSS,UCSP,UCST
GNCPL    TRAT  GNCPN,GNCPS,GNCPP,GNCPT
         DC    X'00'      RESERVED     KEY X'3B'                 YM2366
         DC    X'00'      RESERVED     KEY X'3B'                 YM2366
         DC    X'0000'    RESERVED     KEY X'3B'                 YM2366
         DC    X'0000'    RESERVED     KEY X'3B'                 YM2366
COPIESL  TRAT  COPIESN,COPIESS,COPIESP,COPIEST                   Y02668
IPLTXIDL TRAT  IPLTXIDN,IPLTXIDS,IPLTXIDP,IPLTXIDT               Y01948
OUTLIML  TRAT  OUTLIMN,OUTLIMS,OUTLIMP,OUTLIMT                    19028
BUFOFFL  TRAT  BUFOFFN,BUFOFFS,BUFOFFP,BUFOFFT                    19200
QNAMEL   TRAT  QNAMEN,QNAMES,QNAMEP,QNAMET                        20002
DYNAML   TRAT  DYNAMN,DYNAMS,DYNAMP,DYNAMT                 TSO    20001
BUFSIZEL TRAT  BUFSIZEN,BUFSIZES,BUFSIZEP,BUFSIZET                20002
BUFINL   TRAT  BUFINN,BUFINS,BUFINP,BUFINT                        20002
BUFOUTL  TRAT  BUFOUTN,BUFOUTS,BUFOUTP,BUFOUTT                    20002
BUFMAXL  TRAT  BUFMAXN,BUFMAXS,BUFMAXP,BUFMAXT                    20002
PCIL     TRAT  PCIN,PCIS,PCIP,PCIT                                20002
RESERVEL TRAT  RESERVEN,RESERVES,RESERVEP,RESERVET                20002
THRESHL  TRAT  THRESHN,THRESHS,THRESHP,THRESHT                    20002
TERML    TRAT  TERMN,TERMS,TERMP,TERMT                     TSO    20001
FCBL     TRAT  FCBN,FCBS,FCBP,FCBT                                20202
DLML     TRAT  DLMN,DLMS,DLMP,DLMT                                21009
DIAGNSL  TRAT  DIAGNSN,DIAGNSS,DIAGNSP,DIAGNST                   I21042
FUNCL    TRAT  FUNCN,FUNCS,FUNCP,FUNCT                            21088
AMPL     TRAT  AMPN,AMPS,AMPP,AMPTT          AM/0 KEYWORD        Y01113
FREEL    TRAT  FREEN,FREES,FREEP,FREET                           Y02670
FRIDL    TRAT  FRIDN,FRIDS,FRIDP,FRIDT                           Y02670
DESTL    TRAT  DESTN,DESTS,DESTP,DESTT                           Y02668
*
SYSINCTL TRAT  SYSINCTN,SYSINCTS,SYSINCTP,SYSINCTT
HOLDL    TRAT  HOLDN,HOLDS,HOLDP,HOLDT                           Y02668
MSVGPL   TRAT  MSVGPN,MSVGPS,MSVGPP,MSVGPT                     @Y30LPSB
DSIDL    TRAT  DSIDN,DSIDS,DSIDP,DSIDT                         @Y30OPSB
BURSTL   TRAT  BURSTN,BURSTS,BURSTP,BURSTT                     @Z40MPTH
FLASHL   TRAT  FLASHN,FLASHS,FLASHP,FLASHT                     @Z40MPTH
MODIFYL  TRAT  MODIFYN,MODIFYS,MODIFYP,MODIFYT                 @Z40MPTH
CHARS    TRAT  CHARSN,CHARSS,CHARSP,CHARST                     @Z40MPTH
SUBSYSL  TRAT  SUBSYSN,SUBSYSS,SUBSYSP,SUBSYST                 @G29AN2E
PROTECTL TRAT  PROTECTN,PROTECTS,PROTECTP,PROTECTT             @G32HPPJ
         END
