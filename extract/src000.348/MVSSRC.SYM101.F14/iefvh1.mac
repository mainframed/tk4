         TITLE 'IEFVH1'
**********************************************************************
*
*
*MODULE NAME= IEFVH1
*
*DESCRIPTIVE NAME= CONVERTER INITIALIZATION ROUTINE
*
*COPYRIGHT= N/A
*
*STATUS= VS2 SU16 - IN THIS MODULE, SU 16 SUPPORTS             @G16APPK
*        VPSS SUPPORT (SU 29 - @G29AN2E).                      @G16APPK
*        MERGE SU4,10,16 CODE TO REL 037 PTF                   @ZA27753
*
*
*FUNCTION= THIS MODULE PERFORMS INITIALIZATION FOR THE CONVERTER.
*          IT SETS UP THE ESTAE ENVIRONMENT OVER THE CONVERTER.
*          IT GETS AND INITIALIZES THE CONVERTER WORK AREA,
*          AS WELL AS INITIALIZING  OTHER  CONTROL
*          BLOCKS.
*
*    OPERATION=
*             .CORE IS GOTTEN FOR THE ESTAE PARAMETER LIST
*             .CORE IS GOTTEN FOR THE USER PARAMETER LIST
*             .ESTAE LIST IS MOVED TO THE GOTTEN CORE
*             .ESTAE MACRO (EXECUTE FORM) IS ISSUED.
*             .GETS AND CLEARS CONVERTER WORK AREA
*             .INITIALIZE R12 WITH CONV WORK AREA PTR
*             .CWA ADDRESS IS STORED INTO ESTAE USER PARAM AREA
*             .INITIALIZE NEL PTR IN CONV WORK AREA
*             .SAVE CALLER'S REG SAVE AREA ADDR IN CONV WORK AREA
*             .GET INPUT STMT BUFFER AND SAVE ADDR IN CONV WORK AREA
*             .GET INTERNAL TEXT BUFFER AND SAVE ADDR IN CWA
*             .PUT PROCLIB DCB PTR IN CONV WORK AREA
*             .GET PROCEDURE STMT BUFFER AND SAVE ADDR IN CONV WORK
*              AREA
*             .GET MESSAGE BUFFER AND SAVE ADDR IN CWA FOR IEFVGM
*             .GET AND CLEAR CORE FOR LOCAL WORK AREA AND INITIALIZE
*              LWA PTR IN CWA
*             .GET , CLEAR, AND CHAIN REG SAVE AREA
*              PUT PTR TO CONVERTER REG SAVE AREA IN CWA
*             .MOVE QMPA PASSED BY CALLER INTO CWA
*             .CHECK IF SMF IS FUNCTIONAL.  IF YES,
*              GET CORE FOR JMR, MOVE JMR FOR THE JOB INTO IT
*              AND INITIALIZE SYSTEM ID AND SMF OPTION FIELDS IN IT.
*              SAVE JMR PTR IN CWA.
*             .CHECK FOR ACCOUNTING RTN EXIT; IF YES STORE PTR IN CWA
*             .CHECK FOR SPECIAL FIND EXIT; IF YES SET FLAG AND STORE
*              PTR IN CWA.
*             .CHECK FOR SPECIAL SWA-MANAGER ENTRY; IF YES, SET FLAG
*              AND STORE PTR IN CWA
*             .GET BUFFER FOR STMTS THAT ARE BEING PUT TO SYSOUT.
*              SAVE BUFFER PTR IN CWA.
*             .ALLOCATE VIRTUAL STORAGE FOR SSOB AND SSIB      @G29AN2E
*              AND STORE PTR IN CWA                            @G29AN2E
*             .INITIALIZE SSOB AND SSIB                        @G29AN2E
*             .EXIT
*
*
*NOTES
*    CHARACTER-CODE DEPENDENCIES= EBCDIC
*    DEPENDENCIES=NONE
*    RESTRICTIONS=NONE
*    REGISTER-CONVENTIONS=
*               R11 - MODULE BASE
*               R12 - CONVERTER WORK AREA PTR
*               R13 - REG SAVE AREA PTR
*    PATCH-LABEL= PATCH
*
*
*MODULE TYPE= BAL CSECT
*    PROCESSOR= ASSEMBLER
*    ATTRIBUTES=REFRESHABLE,PRIVILEGED,KEY 0, PAGEABLE LPA
*
*
*ENTRY POINT= IEFVH1 FROM JOB ENTRY SUBSYSTEM OR MASTER SUBSYSTEM
*    PURPOSE= NORMAL ENTRY TO INITIALIZE FOR CONVERTER PROCESSING
*    LINKAGE= LINK                                               Y02668
*    INPUT DATA= REG 1 POINTS TO NEL
*                REG 13 POINTS TO SUPERVISOR REG SAVE AREA
*    REGISTERS SAVED= R14-R12
*    REGISTER CONTENTS DURING PROCESSING=
*              R0  - WORK REG
*              R1  - PTR TO NEL AND WORK REG
*              R2  - WORK REG
*              R3  - NEL BASE REG
*              R4  - WORK REG
*              R5  - WORK REG
*              R6  - WORK REG
*              R7  - WORK REG
*              R8  - UNUSED
*              R9  - UNUSED
*              R10 - LOCAL WORK AREA BASE AND SUBRTN LINKAGE REG
*              R11 - MODULE BASE REG
*              R12 - CONVERTER WORK AREA PTR
*              R13 - REG SAVE AREA PTR
*              R14 - LINKAGE AND WORK REG
*              R15 - LINKAGE AND WORK REG
*    REGISTERS RESTORED= NONE
*
*
*EXIT - NORMAL= IEFVHA
*    CONDITIONS= ALL TABLES AND CONTROL BLOCKS HAVE BEEN SET UP.
*                READY TO GET 1ST STMT FROM JCL DATA SET.
*    OUTPUT DATA= REG 12 POINTS TO CWA, REG 13 POINTS TO RSA
*    RETURN CODES= NONE
*
*
*EXIT - ERROR=  N/A
*   CONDITIONS=  N/A
*   OUTPUT DATA=  N/A
*   RETURN CODES= NONE
*
*
*EXTERNAL REFERENCES
*   ROUTINES=  NONE
*   DATA AREAS=  CONVERTER WORK AREA, LOCAL WORK AREA ,ESTAE USER
*                PARAMETER LIST
*   CONTROL BLOCKS= NEL, QMPA, JMR, SSOB, SSIB                 @G29AN2E
*   TABLES=  NONE
*   MACROS= GETMAIN, CALL, FREEMAIN,  LOAD, SAVE,
*           IEFSAVER, IEFRELSE, RETURN,IEFZB9RD.
*   ENQUEUE  RESOURCES= NONE
*   CHANGE LEVEL= Y02668,Y02653,G29AN2E                        @G29AN2E
*
*
*MESSAGES=  NONE
*
***********************************************************************
         EJECT
         IEFCOMWA                                                Y02668
         IEFCVRWA                                                Y02668
         EJECT
         IEFVMEWA
ENDLAREA EQU   *
         EJECT
         IEFVMDWA   NA
         EJECT
         IEFVMJWA  NA
LNGTHAWA EQU   ENDAWA-QLINKWA           LENGTH OF AWA
LNGJACT  EQU   JACT-JASW1              RELATIVE ADDR OF ACT
LNGSIOT  EQU   SIOT-DWA            SIOT OFFSET IN DD LWA.
LNGJFCB  EQU   JFCB-DWA            JFCB OFFSET IN DD LWA.
LNGJFCBX EQU   JFCBX-DWA           JFCBX OFFSET IN DD LWA.
         EJECT
         EJECT
         EJECT
DTGM     DSECT                                                    20001
DTUNPK   DS    D                                                  20001
DTCVT    EQU   DTUNPK
DTMASK   EQU   *
DTDATE   DS    8C
DTDOT2   DS    1C                      PERIOD
DTTIME   DS    7C                       TIME
DTDOT3   DS    1C                      PERIOD
DTCTR    DS    5C                       INTERPRETER CTR
DTDOT4   DS    1C
         DCBD  DSORG=(PS)
         EJECT
         IEFQMNGR
         IFGRPL
QPARMEND DS    0D
         EJECT
         EJECT
         EJECT
         EJECT
NELHERE    DSECT
         IEFNEL   SUBCOM=C,EXITS=(TXT,RTN,QEP,SMF,IAM,FAM)
         EJECT
         IEESMCA
         EJECT
         IEFJMR
         EJECT
         IEFZB9RD
         EJECT
H1CVT    DSECT
         CVT
         EJECT
         IEFJSSIB                                              @G29AN2E
         EJECT
         IEFJSSOB (CI)                                         @G29AN2E
         EJECT
IEFVH1   CSECT
         ENTRY TRACE
*****************************************************************Y02668
*                                                                Y02668
*  STANDARD LINKAGE CONVENTIONS                                  Y02668
*                                                                Y02668
*****************************************************************Y02668
         SPACE 2                                                 Y02668
         SAVE  (14,12)                                           Y02668
         BALR  RB,0                SET UP MODULE                 Y02668
         USING *,RB                ADDRESSABILITY                Y02668
         B     VH10010                                           Y02668
         MODID BR=NO
*        DC    C'SU16'             FUNC ID                     @G16APPK
         DC    C'01'  LEV # (MERGE SU4,10,16 CODE TO 037 PTF)  @ZA27753
VH10010  DS    0H                                                Y02668
         LR    R3,R1               SAVE NEL ADDR, FOR R1         Y02668
         USING NELHERE,R3          CLOBBERED BY GETMAIN          Y02668
         MODESET  MODE=SUP         GET INTO SUPERVISOR MODE      Y02668
         EJECT
*****************************************************************Y02668
*                                                               *Y02668
*  GET CORE FOR WORK AREAS AND INITIALIZE                       *Y02668
*                                                               *Y02668
*****************************************************************Y02668
         SPACE 2                                                 Y02668
         IEFSAVER  ,               GET CONVERTER SAVE AREA       Y02668
*****************************************************************Y02668
*                                                               *Y02668
*  CALCULATE CORE NEEDED FOR CWA+LWA+JCL STMT BUFFER+SYSOUT     *Y02668
*  STMT BUFFER+MSG BUFFER+TEXTBUFFER+SSOB+SSIB AND ISSUE       @G29AN2E
*  ONE BIG GETMAIN.                                            @G29AN2E
*  THIS ENABLES CONVERTER TERMINATION TO ISSUE ON BIG FREEMAIN. *Y02668
*
*
*  THE LARGE VIRTUAL STORAGE AREA THAT IS GETMAINED IS USED   *@G29AN2E
*  FOR THE FOLLOWING IN THIS ORDER:                           *@G29AN2E
*                                                             *@G29AN2E
*        COMWA                -COMMON WORK AREA               *@G29AN2E
*        CVRWA/IWA            -CONVERTER/INTERPRETER WORKAREA *@G29AN2E
*        LWA                  -LOCAL WORKAREA (JWA/EWA/DWA)   *@G29AN2E
*        STMT BUFFER          -INPUT BUFFER FOR JCL STMT      *@G29AN2E
*        INTERNAL TEXT BUFFER                                 *@G29AN2E
*        SYSTEM OUTPUT BUFFER -OUTPUT BUFFER FOR JCL STMT     *@G29AN2E
*        MESSAGE BUFFER       -FOR ERROR MESSAGE              *@G29AN2E
*        SSOB                 -FOR SUBSYS KEY PROCESSING      *@G29AN2E
*        SSIB                 -FOR SUBSYS KEY PROCESSING      *@G29AN2E
*                                                             *@G29AN2E
*                                                             *@G29AN2E
*  JMR AND PROC BUF ARE OPTIONAL AND THEREFORE GOTTEN SEPARATELY*Y02668
*****************************************************************Y02668
         SPACE 2                                                 Y02668
         LH    R2,TXTBUFLT         GET TEXT BUFFER LENGTH        Y02668
         LA    R2,WALTH(R2)        ADD WORK AREA LENGTH.         Y02668
         LA    R2,WRKAREAS(R2)     ADD OTHER WORK AREA LENGTHS   Y02668
         LA    R2,SSOBLN19(R2)     ADD LENGTH OF SSOB          @G29AN2E
         LA    R2,SSIBSIZE(R2)     ADD LENGTH OF SSIB          @G29AN2E
         LR    R0,R2               SET UP FOR GETMAIN            Y02668
         BAL   RA,VH1GAC           GET CORE FOR WORK AREAS       Y02668
         EJECT                                                   Y02668
*****************************************************************Y02668
*                                                               *Y02668
* START INITIALIZATION - DIVIDE LARGE AREA OF GOTTEN CORE       *Y02668
*                                                               *
*****************************************************************Y02668
         SPACE 2                                                 Y02668
         LR    RC,R1               INITIALIZE R12 TO POINT TO CWAY02668
*                                  R12 PTS TO CWA THRU LIFE OF   Y02668
*                                  CONVERTER                     Y02668
         ST    R2,WAWRKLTH         SAVE GETMAIN LENGTH FOR       Y02668
*                                  WORK AREA FREEMAIN IN VHF     Y02668
         LA    R0,WALTH            LOAD WORK AREA LENGTH.        Y02668
         ST    R0,CWAL             SAVE LENGTH IN 1ST WORD       Y02668
         MVC   CWAID,ID            INITIALIZE CWA IDENTIFIER     Y02668
         ST    R3,WANELPTR         SAVE NEL PTR IN CWA           Y02668
         ST    RD,SAVEPTR          SAVE PTR TO CURRENT SAVE AREA Y02668
         MVC   CWASAVPT(WORDLEN),WORDLEN(RD)   SAVE PTR TO       Y02668
*                                  CALLER'S SAVE AREA            Y02668
         L     R0,IEFVHFV          GET PTR TO  CONVERTER         Y02668
*                                  TERMINATION ROUTINE           Y02668
         ST    R0,TERMRTN          SAVE IN CWA FOR C/I           Y02668
*                                  COMMON ROUTINES               Y02668
         L     R0,NELPROCB         GET PROCLIB DCB PTR           Y02668
         ST    R0,PDCBP            SAVE PROCLIB DCB PTR IN CWA   Y02668
         MVC   CWACONID(WORDLEN),NELCOMID INIT CWA WITH CONSOLE  Y02668
*                                  ID PTR-USED BY WTO            Y02668
         LA    R1,WALTH(RC)        CALC ADDR OF LOCAL WORK AREA. Y02668
*                                  AREA BY BUMPING PTR TO THE    Y02668
*                                  END OF THE CWA                Y02668
*                                  AND CLEAR IT                  Y02668
         ST    R1,CTRLWAP          SAVE PTR TO LWA IN CWA        Y02668
         MVC   CWALABEL(LEN1),NELLABEL   SAVE LABEL PROCESSING   Y02668
*                                  OPTION BYTE IN CWA-THIS OPTIONY02668
*                                  MUST BE PASSED TO THE INTERP  Y02668
*                                  VIA JOB STRING PREFIX         Y02668
         MVI   CWAMSLEN,MSGLEN     INDICATE MSG LENGTH TO IEFVGM Y02668
        EJECT
*****************************************************************Y02653
*                                                                Y02653
*  SETUP ESTAE ENVIRONMENT OVER CONVERTER                        Y02653
*                                                                Y02653
*****************************************************************Y02653
         SPACE 2
         L     R0,LENESTAE        GET CORE FOR ESTAE LIST FORM   Y02653
         BAL   RA,VH1GAC           GET CORE ROUTINE.             Y02653
         LR    R5,R1               ADDRESSABILITY FOR LIST FORM  Y02653
         L     R4,LENESTAE         LENGTH OF LIST FORM FOR MOVE  Y02653
         BCTR  R4,0          DECREMENT FOR MOVE INTO CORE.      YM02681
         EX    R4,MVESTAE          MOVE LIST TO GOTTEN CORE      Y02653
         LA    R0,EREPLEN          LENGHT OF USER PARAMETER AREA Y02653
         BAL   RA,VH1GAC           GET CORE FOR PARAMETER AREA   Y02653
         LR    R4,R1               ADDRESSABILITY FOR PARAM AREA Y02653
         ST    R4,AOSTAPRM         ADDRESS OF USER PARAM AREA    Y02653
         USING EREPL,R4             ADDRESSABILITY TO USER AREA  Y02653
         ST    RC,EREPLCWA      CWA ADDR IN PARAM AREA FOR ESTAE Y02653
         MVC   EREPLRSV(LEN4),CWASAVPT  ADDR OF CALLERS S/A      Y02653
         DROP  R4                  DROP REGISTER 4               Y02653
         L     R6,IEFNB9CR         ADDRESS OF ESTAE EXIT.        Y02653
*                                                                Y02653
         ESTAE (6),PARAM=(4),MF=(E,(5))                          Y02653
         LTR   RF,RF              WAS ESTAE SUCCESSFUL?          Y02653
         BZ    VH10020            YES IF REG15 IS ZERO           Y02653
*        IF ESTAE WAS NOT SUCCESSFUL. FREE THE USER PARAMETER    Y02668
*        AREA AND ZERO THE POINTER TO IT IN THE CWA              Y02668
*                                                                Y02668
         L     R1,AOSTAPRM         ADDRESS OF USER AREA GOTTEN   Y02668
         LA    R0,EREPLEN          LENGTH OF USER AREA           Y02668
         FREEMAIN R,LV=(0),A=(1)   FREE USER PARAMETER LIST      Y02668
         XC    AOSTAPRM(4),AOSTAPRM     ZERO USER PARMETER LIST  Y02653
*              POINTER TO SIGNAL THAT ESTAE DOES NOT EXIST.      Y02653
VH10020  DS    0H                                                Y02653
*        FREE ESTAE EXIT LIST IN GOTTEN CORE                     Y02668
         LR    R1,R5               ADDRESS OF LIST IN CORE       Y02668
         L     R0,LENESTAE         LENGTH OF LIST IN CORE        Y02668
         FREEMAIN R,LV=(0),A=(1)   FREE LIST                     Y02668
         EJECT                                                   Y02668
*****************************************************************Y02668
*                                                               *Y02668
*  SET UP QMPA AND JMR IN CONVERTER'S CORE                      *Y02668
*  LOAD IEFUJV                                                  *YM0581
*                                                               *Y02668
*****************************************************************Y02668
         SPACE 2                                                 Y02668
         L     R1,NELQMPA          GET POINTER TO QMPA PASSED BY Y02668
*                                  THE CONVERTER'S CALLER        Y02668
         MVC   QPARM(QMPALEN),0(R1) MOVE QMPA INTO CWA           Y02668
         LA    R0,QPARM            GET ADDR OF SWA MANAGER PARM  Y02668
*                                  AREA IN CWA                   Y02668
         ST    R0,QPARMP           INIT CWA PTR FIELD FOR VHQ    Y02668
         TM    NELOPSWT,NELSMF     IS SMF BEING USED             Y02668
         BZ    VH1IOBUF            NO, SKIP JMR PROCESSING       Y02668
         LA    R0,JMRLEN           GET JMR LENGTH                Y02668
         BAL   RA,VH1GAC           GET CORE AND CLEAR FOR JMR    Y02668
         USING JMR,R1              ADDRESS NEWLY GOTTEN CORE     Y02668
         L     RE,NELJMR           GET JMR POINTER FROM NEL      Y02668
         MVC   JMRJOB(JESSJMR),DISPL0(RE) MOVE JMR TO CONVRTR'S  Y02668
*                                  CORE-THIS IS DONE SO THAT WHENY02668
*                                  THE SMF USER EXIT IS TAKEN,   Y02668
*                                  THE USER DOES NOT LOOK AT     Y02668
*                                  JESS CORE.                    Y02668
         ST    R1,CWAJMRPT         SAVE PTR TO JMR IN CWA        Y02668
         LOAD  EP=IEFUJV           LOAD USER ROUTINE.           YM00581
         L     R1,CWAJMRPT         RESTORE R1,DESTROYED BY LOAD YM00581
         ST    R0,JMRUJVP          SAVE ADDR IN JMR.            YM00581
         MVI   JMRSTEP,STEP1       START OFF WITH STEP 1         Y02668
         DROP  R1
         EJECT                                                   Y02668
*****************************************************************Y02668
*                                                               *Y02668
*  GET I/O BUFFERS AND INITIALIZE PTRS IN CWA                   *Y02668
*                                                               *Y02668
*****************************************************************Y02668
         SPACE 2                                                 Y02668
VH1IOBUF DS    0H                                                Y02668
         L     R6,NELPROCB         GET PROCLIB DCB PTR FROM NEL  Y02668
         LTR   R6,R6               HAS A PROCLIB BEEN SPECIFIED  Y02668
*                                  FOR THIS JOB                  Y02668
         BZ    VH10100             NO, DO NOT GET PROC BUFFER    Y02668
         USING IHADCB,R6           ADDRESS DCB                   Y02668
         LH    R0,DCBBLKSI         USE MAX BLKSIZE AS PROCEDURE  Y02668
*                                  BUFFER LENGTH                 Y02668
         BAL   RA,VH1GAC           GET AND CLEAR PROC BUFFER     Y02668
         ST    R1,PSTMT            SAVE PTR IN CWA               Y02668
         ST    R1,CWABPROC         SAVE PTR TO BLOCKED PROC BUFF Y02668
         DROP  R6                                                Y02668
VH10100  DS    0H
         L     R1,CTRLWAP          GET PTR TO LOCAL WORKAREA     Y02668
         LA    R1,LEWA(R1)         CALCULATE THE END ADDR OF THE Y02668
*                                  LWA-THIS IN TURN IS THE       Y02668
*                                  BEGINNING OF THE STMT BUFFER  Y02668
         ST    R1,RSTMT            SAVE PTR IN CWA               Y02668
         LA    R1,JCLLEN(R1)       INCREMENT THE JCL STMT BUFFER Y02668
*                                  PTR BY THE BUFFER LENGTH TO   Y02668
*                                  GET A PTR TO THE TEXT BUFFER  Y02668
         LA    R2,DBLWORD(R1)      ALLOW DOUBLE WORD AT BEGINNINGY02668
*                                  OF THE TEXT BUFFER FOR AN     Y02668
*                                  IDENTIFIER AND LENGTH FIELD   Y02668
         LH    RF,TXTBUFLT         GET BUFFER LENGTH             Y02668
         ST    RF,BYTE0(R1)        PUT LENGTH IN HEADER          Y02668
         MVC   WORDLEN(WORDLEN,R1),TEXTID PUT ID IN BUFFER       Y02668
         ST    R2,TEXTBUFP         SAVE PTR TO 1ST AVAIL BYTE    Y02668
         AH    R1,TXTBUFLT         GET BUFFER END ADDRESS        Y02668
         ST    R1,TENDP            SAVE END ADDRESS              Y02668
*                                  THE END ADDRESS OF THE        Y02668
*                                  INTERNAL TEXT BUFFER IS       Y02668
*                                  THE BEGINNING ADDRESS OF      Y02668
*                                  THE SYSTEM OUTPUT BUFFER      Y02668
         ST    R1,AOWSTMT          STORE PTR IN CWA              Y02668
         LA    R1,AOWBFLTH(R1)     THE END ADDR OF THE SYSTEM    Y02668
*                                  OUTPUT BUFFER IS THE          Y02668
*                                  BEGINNING ADDR OF THE         Y02668
*                                  MESSAGE BUFFER                Y02668
         ST    R1,WAMSGBUF         SAVE PTR TO MSGBUF IN CWA     Y02668
         LA    R1,MSBUFLEN(R1)     THE END ADDR OF THE MESSAGE @G29AN2E
*                                  BUFFER IS THE BEGINNING ADDR@G29AN2E
*                                  OF THE SSOB                 @G29AN2E
         ST    R1,AOSSOB           SAVE PTR TO SSOB            @G29AN2E
         LA    R1,SSOBLN19(R1)     THE END ADDR OF THE SSOB IS @G29AN2E
*                                  THE BEGINNING OF THE SSIB   @G29AN2E
         ST    R1,AOSSIB           SAVE PTR TO SSIB            @G29AN2E
         EJECT
*****************************************************************Y02668
*                                                               *Y02668
*  EXIT LIST PROCESSING                                         *Y02668
*                                                               *Y02668
*****************************************************************Y02668
         SPACE 2                                                 Y02668
         L     R7,NELEXLST         GET PTR TO EXIT LIST FROM NEL Y02668
         USING NELEXITS,R7         ADDRESS EXIT LIST             Y02668
         LTR   R7,R7               IS THERE AN EXIT LIST         Y02668
         BZ    VH1EXEND            NO EXIT LIST - CONTINUE       Y02668
         SR    R6,R6               CLEAR REG 6 FOR LOAD          Y02668
         LH    R6,NELEXLEN         GET LENGTH OF EXIT LIST       Y02668
         DROP  R7
         SRA   R6,3                DIVIDE BY 8 TO GET            Y02668
*                                  NUMBER OF ENTRIES             Y02668
         BCTR  R6,R0               DECREMENT NO. BY ONE TO       Y02668
*                                  ACCT. FOR 8 BYTE HEADER       Y02668
VH10200  DS    0H                                                Y02668
         LA    R7,DBLWORD(R7)      BUMP PTR PASSED EXIT LIST     Y02668
*                                  HEADER                        Y02668
         CLI   EXITID(R7),NELTXTEX IS THIS THE POST SCAN TEXT    Y02668
*                                  EXIT                          Y02668
         BNE   VH10300             NO, GO TO CHECK NEXT ENTRY    Y02668
         ST    R7,CWATXTEX         YES, SAVE ENTRY PTR IN CWA    Y02668
         CLI   LINKID(R7),NELEXNAM POST SCAN EXIT BY MOD NAME ? YM00373
         BNE   VH10400             NO TXT EXIT PROCESSED        YM00373
         LA    R0,LINKLTH          YES GET LINK DATA LENGTH     YM00373
         ST    R0,CWALINKL         SAVE LENGTH FOR FREE AT TERM YM00373
         BAL   RA,VH1GAC           GET STORAGE FOR LINK         YM00373
         ST    R1,CWALINK          SAVE PTR FOR VFA             YM00373
         MVC   0(LINKLTH,R1),VH1LINK  INIT STORAGE FOR VFA LINK YM00373
         MVC   CWAPSENM(R6),EXITNAME(R7) SAVE EXIT NAME FOR VFA YM00373
         MVI   CWAPSENM+6,C' '     PAD NAME                     YM00373
         MVI   CWAPSENM+7,C' '     WITH BLANKS                  YM00373
         B     VH10400             TXT EXIT PROCESSED -         YM00385
VH10300  DS    0H                                                Y02668
         CLI   EXITID(R7),NELFAMEX IS THIS THE SPECIAL FIND RTN YM00385
*                                  EXIT                         YM00385
         BNE   VH10400             NO, CONTINUE SEARCH          YM00385
         OI    IWAEXTS,IWASFIND    INDICATE YES IN CWA          YM00385
         MVC   IWAFINDP,LEN5(R7)   MOVE FIND ENTRY POINT        YM00385
*                                  TO CWA TO BE USED BY VFA     YM00385
VH10400  DS    0H                                               YM00385
*                                  CONTINUE PROCESSING LIST     YM00385
         BCT   R6,VH10200          DECREMENT NO. OF ENTRIES BY 1 Y02668
VH1EXEND DS    0H                                                Y02668
         EJECT                                                   Y02668
*****************************************************************Y02668
*                                                               *Y02668
*  CONVERTER INITIALIZATION COMPLETE, EXIT TO GET JCL STATEMENT *Y02668
*                                                               *Y02668
*****************************************************************Y02668
         SPACE 2                                                 Y02668
         L     RF,IEFVHAV          CONVERTER GET RTN ADDR        Y02668
         BR    RF                  EXIT TO START GETTING JCL     Y02668
*                                  STATEMENTS                    Y02668
         EJECT                                                   Y02668
*****************************************************************Y02668
*                                                               *Y02668
*  ROUTINE TO GET AND CLEAR CORE                                *Y02668
*                                                               *Y02668
*****************************************************************Y02668
         SPACE 2                                                 Y02668
VH1GAC   DS    0H                                                Y02668
         STM   R4,R7,12(RD)        SAVE REGS CLOBBERED BY MVCL   Y02668
         LR    R5,R0               PUT LENGTH IN ODD REG FOR MVCLY02668
         GETMAIN  R,LV=(0)         GET REQUESTED CORE            Y02668
         LR    R4,R1               SET UP TARGET OF MVCL AND     Y02668
*                                  PRESERVE REG1 FOR RETURN      Y02668
         SR    R7,R7               INDICATE PADDING CHAR OF 0    Y02668
*                                  FOR MVCL AND OBJECT COUNT OF 0Y02668
         SR    R6,R6               INDICATE NO MVCL OBJECT ADDR  Y02668
         MVCL  R4,R6               CLEAR REQUESTED CORE          Y02668
         LM    R4,R7,12(RD)        RESTORE REGS CLOBBERED        Y02668
*                                  BY MOVE CHAR LONG(MVCL)       Y02668
         BR    RA                                                Y02668
         EJECT
**********************************************************************
*                         E Q U A T E S                              *
**********************************************************************
IWAL1    EQU   X'FFF'              IWA LENGTH.                   Y02028
TABLEN   EQU   176               LENGTH OF TABLES
EXITLEN  EQU   16                LENGTH OF NEL EXIT LIST
ENDNEL   EQU   X'80'             INDICATES END OF NEL
WORDLEN  EQU   4                 LENGTH OF FULL WORD
DBLWORD  EQU   8                 LENGTH OF DOUBLE WORD
HWORDLEN EQU   2                 LENGTH OF HALF WORD
PARMLEN  EQU   12                LENGTH OF PARM LIST FOR IEEVSMSG
ERRMSG13 EQU   13                MSG CODE FOR MSG IEE
NELLEN6  EQU   24                LENGTH OF 6 WORD NEL
SAVELEN  EQU   72                LENGTH OF SAVE AREA
QMPALEN  EQU   32                LENGTH OF QMPA
MSGLEN   EQU   90                  STMT/MSG LENGTH               Y02668
MAINUCB  EQU   X'FF'             INDICATES MAIN UCB
ERRCODE  EQU   4                 ERROR CODE FOR IEFVHN
CHARA    EQU   C'A'              DEFAULT MSG CLASS
BLANK    EQU   C' '              CHARACTER BLANK -X'40'
NAMELEN  EQU   8                 LENGTH OF NAME
ENTRYLEN EQU   8                 LENGTH OF NEL EXIT LIST ENTRIES
WORKLEN  EQU   16                LENGTH OF WORK AREA FOR EXTRACT
BITS3    EQU   3                 SHIFT 3 BITS
BITS4    EQU   4                 SHIFT 4 BITS
BITS7    EQU   7                 SHIFT 7 BITS
BITS24   EQU   24                SHIFT 24 BITS
HWORD0   EQU   0                 DISPLACEMENT
WORD0    EQU   0                 DISPLACEMENT
WORD1    EQU   4                 DISPLACEMENT
WORD2    EQU   8                 DISPLACEMENT
WORD3    EQU   12                DISPLACEMENT
WORD4    EQU   16                DISPLACEMENT
WORD6    EQU   24                DISPLACEMENT
BYTE0    EQU   0                 DISPLACEMENT
BYTE1    EQU   1                 DISPLACEMENT
BYTE2    EQU   2                 DISPLACEMENT
BYTE3    EQU   3                 DISPLACEMENT
BYTE26   EQU   26                DISPLACEMENT
BYTE27   EQU   27                DISPLACEMENT
DISPL0   EQU   0                 DISPLACEMENT
DISPL1   EQU   1                 DISPLACEMENT
DISPL3   EQU   3                 DISPLACEMENT
DISPL4   EQU   4                 DISPLACEMENT
DISPL6   EQU   6                 DISPLACEMENT
DISPL7   EQU   7                 DISPLACEMENT
LEN0     EQU   0                 LENGTH
LEN1     EQU   1                 LENGTH
LEN2     EQU   2                 LENGTH
LEN3     EQU   3                 LENGTH
LEN4     EQU   4                 LENGTH
LEN5     EQU   5                 LENGTH
LEN6     EQU   6                 LENGTH
LEN8     EQU   8                 LENGTH
LEN11    EQU   11                LENGTH
LEN12    EQU   12                LENGTH
LEN40    EQU   40                LENGTH
LEN84    EQU   84                LENGTH
NEXT     EQU   1                 UPDATE TO NEXT BYTE
BLDGLEN  EQU   48                LENGTH OF BLDG PARM LIST
V        EQU   C'V'              INDICATES MVT SYSTEM
T        EQU   C'T'              INDICATES TIME
R        EQU   C'R'              INDICATES COUNTER
PERIOD   EQU   C'.'              CHARACTER PERIOD
SIGN     EQU   X'F0'             CONVERT SIGN BITS AFTER UNPACK
BSIGN    EQU   X'0F'             CONVERT SIGN BITS BEFORE UNPACK
WKAREALN EQU   8                 LENGTH OF WORK AREA
MAX16    EQU   16                CONTROL FOR SCANNING
ROLLBITS EQU   X'C0'             ROLL OPTION BITS
COMDAUTH EQU   28                COMMAND AUTHORITY DISPLACEMENT
CODE0    EQU   0                 RETURN CODE ZERO -SUCCESSFUL
CODE4    EQU   4                 RETURN CODE OF 4 -ERROR
CLABEL0  EQU   C'0'              VALUE FOR LABEL PARM
CLABEL1  EQU   C'1'              VALUE FOR LABEL PARM
CLABEL2  EQU   C'2'              POSSIBLE VALUE FOR LABEL PARM
BLABEL1  EQU   X'10'             TREAT AS BYPASS LABEL PROCESSING
BLABEL02 EQU   X'01'             TREAT AS NON LABEL
DFLMSGL1 EQU   C'0'              DEFAULT MSGLEVEL FOR JCL MSGS
DFLMSGL2 EQU   C'1'              DEFAULT MSGLEVEL FOR ALLOC MSGS
HEX00    EQU   X'00'                                               XMCS
HEX04    EQU   X'04'                                               XMCS
HEX40    EQU   X'40'                   HEX EQUATE                   SMF
HEX80    EQU   X'80'                                               XMCS
EXITID   EQU   1                   DISPL OF EXIT TYE FIELD IN ENTRY
LINKID   EQU   0                   DISPL OF LINKAGE ID          YM00373
EXITNAME EQU   2                   DISPL OF EXIT NAME           YM00373
         SPACE 3
         EJECT
*                                                                Y02668
*  EQUATES TO CONVERT  IWA  TO CWA                               Y02668
*                                                                Y02668
JMRLEN   EQU   80                  JMR+PARLIST LENGTH            Y02668
JESSJMR  EQU   56                  JMR PASSED BY JOB ENT SUBSYS  Y02668
JCLLEN   EQU   80                                                Y02668
MSBUFLEN EQU   160                                               Y02668
AOWBFLTH EQU   90
LEN7     EQU   7
STEP1    EQU   X'01'                                             Y02668
MVESTAE  MVC   LEN0(LEN0,R5),VH1ESTAE          MOVE LIST FORM
WRKAREAS EQU   LEWA+JCLLEN+AOWBFLTH+MSBUFLEN                     Y02668
*****************************************************************Y02668
*                                                               *Y02668
*        DECLARED STORAGE                                       *Y02668
*                                                               *Y02668
*****************************************************************Y02668
         SPACE 2
EIGHTY   DC    F'80'                                             Y02668
ID       DC    X'11111111'         CWA IDENTIFIER                Y02668
TEXTID   DC    X'EEEEEEEE'         TEXT BUFFER IDENTIFIER        Y02668
TXTBUFLT DC    H'8192'             8K INTERNAL TEXT BUFFER       Y02668
IEFVHAV  DC    V(IEFVHA)           CONVERTER GET ROUTINE         Y02668
IEFVHFV  DC    V(IEFVHF)                                         Y02668
IEFNB9CR DC    V(IEFNB9CR)         ADDRESS OF ESTEA EXIT
         SPACE 1
VH1ESTAE ESTAE XCTL=NO,PURGE=NONE,ASYNCH=YES,RECORD=YES,MF=L
LENESTAE DC    A(*-VH1ESTAE)
VH1LINK  LINK SF=L                 LIST FORM OF LINK            YM00373
LINKLTH  EQU   *-VH1LINK           LENGTH OF LINK EXPANSION     YM00373
         SPACE 1
PATCH    DC    25F'0'
         EJECT
TRACE    DS    0H
         BALR  15,0                SET BASE REG.
         USING *,15
****************************************************************YM08105
         B     TRNOP               DEACTIVATE TRACE             YM08105
*                                  ZAP THIS INSTR TO '47000000' YM08105
*                                  TO TRACE MODULE FLOW.        YM08105
****************************************************************YM08105
         STM   11,1,TRSAVE         SAVE CALLER'S REGS.
* REGISTER 12 CONTAINS ADDRESS OF WORK AREA.                     Y02668
         L     1,BUFADDR           LOAD CONTENTS.
         LTR   1,1                 TRACE BUFFER OBTAINED ?
         BNZ   TR5                 BRANCH YES.
* TRACE BUFFER NOT YET OBTAINED.
         LR    11,15               SAVE BASE REGISTER.
         LH    0,BUFLTH            LOAD BUF LENTH.
         GETMAIN  R,LV=(0)
         LR    15,11               RESTORE BASE REGISTER.
         ST    1,BUFADDR           SAVE BUFFER ADDRESS.
         ST    1,NEXTPTR           INIT NEXT ENTRY PTR.
         AH    1,BUFLTH            ADD LENGTH TO
         ST    1,BUFEND            COMPUTE BUFFER END ADDR.
* TRACE BUFFER EXISTS AND PTRS ARE INITIALIZED.
TR5      DS    0H
         CLC   NEXTPTR(4),BUFEND   IS BUFFER FILLED ?
         BNE   TR10                BRANCH NO.
* BUFFER HAS BEEN FILLED. START OVER.
         MVC   NEXTPTR(4),BUFADDR  SET NEXT ENTRY TO START OF BUF.
TR10     DS    0H
         L     1,NEXTPTR           LOAD PTR TO NEXT ENTRY.
         L     14,TRSAVE+12        LOAD ADDR OF CALLER.
         MVC   0(4,1),4(14)        MOD ID IS 2ND WD AFTER CALLING      *
                                   ADDR. MOVE ID TO BUF.
         LA    1,4(1)              SET ENTRY PTR TO NEXT LOC AND
         ST    1,NEXTPTR           SAVE.
         LM    11,1,TRSAVE         RESTORE REGS.
TRNOP    DS    0H                                               YM08105
         LA    14,8(14)            PT LINK REG BEYOND PARM LIST.
         BR    14                  RETURN TO NEXT EXECUTABLE INSTR.
         SPACE 2
         DS    0H
BUFLTH   DC    AL2(2048)           BUFFER LENGTH.
         END   IEFVH1
