TJH0     TITLE 'IGTJH0 - SUBSYSTEM ALLOCATION INTERFACE ROUTINE.       *
                        '
*                                 DEFINE INITIAL GETMAIN MACRO
         MACRO
&LABEL   IGTDGSV &R,&LV=,&SP=,&INITIAL=YES
         L       APCTPTR,20(,@13)  SSCVT POINTER TO APCTREG FROM SAVE
         L       APCTPTR,SSCTSUSE-SSCT(,APCTPTR) POINTER TO APCT INITED
&LABEL   IGTYGSV &R,INITIAL=&INITIAL,SP=&SP,LV=&LV
         MEND
IGTJH0   CSECT ,                                                01S0002
@MAINENT DS    0H                                               01S0002
         USING *,@15                                            01S0002
         B     @PROLOG                                          01S0002
         DC    AL1(16)                                          01S0002
         DC    C'IGTJH0    77.230'                              01S0002
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                  01S0002
         BALR  @07,0                                            01S0002
@PSTART  LA    @08,4095(,@07)                                   01S0002
         USING @PSTART,@07                                      01S0002
         USING @PSTART+4095,@08                                 01S0002
         L     @00,@SIZDATD                                     01S0002
         IGTDGSV  R,LV=(0)
         LR    @06,@01                                          01S0002
         USING @DATD,@06                                        01S0002
         ST    @13,@SA00001+4                                   01S0002
         LM    @00,@01,20(@13)                                  01S0002
         ST    @06,8(,@13)                                      01S0002
         LR    @13,@06                                          01S0002
*                                 /* REFERENCED IN MACRO GENED PROLOG*/
RBPRFXLN EQU 64
RBPRFLNA EQU 32
PRBLEN   EQU 136
SIRBLEN  EQU 200
TIRBLEN  EQU 136
IRBLEN   EQU 128
SVRBLEN  EQU 224
         EJECT
*   ALLCWAPT=ADDR(APAW);            /* ESTABLISH POINTER TO WORK AREA*/
         LA    ALLCWAPT,APAW                                    01S0145
*/*  ESTABLISH SUBSYSTEM INTERFACE CONTROL BLOCK POINTERS            */
*                                                               01S0146
*   RFY                                                         01S0146
*    (R0P,                                                      01S0146
*     R1P) RSTD;                    /* REGISTER USED AS PARMREGS     */
*   SSOBPTR=R1P;                    /* POINTER TO THE BASIC SSOB     */
         ST    R1P,SSOBPTR                                      01S0147
*   SSCTPTR=R0P;                    /* POINTER TO SSCVT FOR SUBSYS   */
         LR    SSCTPTR,R0P                                      01S0148
*   RFY                                                         01S0149
*    (R0P,                                                      01S0149
*     R1P) UNRSTD;                  /* REGISTER USED AS PARMREGS     */
*   FIRSTARB=SSAGARBP;              /* INITIALIZE ARB POINTER        */
         L     @09,SSOBPTR                                      01S0150
         L     @09,SSOBINDV(,@09)                               01S0150
         L     @05,SSAGARBP(,@09)                               01S0150
         ST    @05,FIRSTARB                                     01S0150
*   SSDDRPTR=FIRSTARB;              /* INIT VARIABLE POINTER         */
         LR    SSDDRPTR,@05                                     01S0151
*   RFY                                                         01S0152
*     SSAGARBK BASED(SSDDRPTR);     /* POINTER TO DD/TEXT UNIT  01S0152
*                                      REQUEST                       */
*   RFY                                                         01S0153
*     SSWA BASED(SSAGSSWA);         /* PROVIDE ADDRESS OF SSWA       */
*   ALLSTAT=0;                      /* INITIALIZE STATUS INDICATORS  */
         SLR   @05,@05                                          01S0154
         ST    @05,ALLSTAT                                      01S0154
*   ALLRSRCE=0;                     /* INITIALIZE ENQ RESOURCE STATUS*/
         ST    @05,ALLRSRCE                                     01S0155
*                                                               02S0156
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SEGMENT CREATES AN ECB LIST FOR USE FOLLOWING AN ENQ WITH*/
*   /* ECB OPTION. IF A CANCEL ECB HAS NOT BEEN PROVIDED OR THE ECB  */
*   /* PROVIDED IS ALREADY BEING WAITED ON, A DUMMY CANCEL ECB IS    */
*   /* CREATED AND ITS ADDRESS IS STORED IN THE ECB LIST.            */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0156
*   DO;                             /* INSURE ENTIRE SEGMENT IS INCLD*/
*     IF SSAGCNCL=0×                /* IF CNCLECB NOT PROVIDED OR    */
*         SSAGCNCL->ECBWAITB=BON THEN/* CNCLECB IS BEING WIATED ON   */
         L     @09,SSAGCNCL(,@09)                               02S0157
         CR    @09,@05                                          02S0157
         BE    @RT00157                                         02S0157
         TM    ECBWAITB(@09),B'10000000'                        02S0157
         BNO   @RF00157                                         02S0157
@RT00157 DS    0H                                               02S0158
*       DO;                         /* AUTH. DYN REQUESTS COULD WAIT */
*         CNCLECBP=ADDR(CANCLECB);  /* PROVIDE DUMMY CANCEL ECB      */
         LA    @09,CANCLECB                                     02S0159
         ST    @09,CNCLECBP                                     02S0159
*         CANCLECB=0;               /* AND CLEAR IT                  */
         SLR   @09,@09                                          02S0160
         ST    @09,CANCLECB                                     02S0160
*       END;                                                    02S0161
*     ELSE                          /* OTHERWISE, USE THE CANCEL ECB */
*       CNCLECBP=SSAGCNCL;          /* PROVIDED BY ALLOCATION.       */
         B     @RC00157                                         02S0162
@RF00157 L     @09,SSOBPTR                                      02S0162
         L     @09,SSOBINDV(,@09)                               02S0162
         L     @09,SSAGCNCL(,@09)                               02S0162
         ST    @09,CNCLECBP                                     02S0162
*     ENQECBP=ADDR(ENQECB);         /* ADDRESS OF ENQ ECB FOR ECBLIST*/
@RC00157 LA    @09,ENQECB                                       02S0163
         ST    @09,ENQECBP                                      02S0163
*     ACNCLECB=CNCLECBP;            /* ADDR OF CANCEL ECB TO WRK AREA*/
         L     @09,CNCLECBP                                     02S0164
         ST    @09,ACNCLECB                                     02S0164
*     LASTECBI='1'B;                /* ADDRESSES SET, INDICATE LAST  */
         OI    LASTECBI,B'10000000'                             02S0165
*   END;                            /* END OF SEGMENT.               */
*   DO;                             /* BEGIN CODE SEGMENT            */
*/*   SEGMENT DETERMINES WHETHER SS ALLOCATION HAS BEEN INVOKED BY
*     DYNAMIC OR BATCH ALLOCATION AND SETS ALLDYN = BON IF THIS IS
*     AN SVC 99 DYNAMIC ALLOCAITON.                                  */
*                                                               02S0168
*     IF PSATOLD->TCBRBP->RBFTP='110'B THEN/* IF CURRENT TCB         */
         L     @09,PSATOLD                                      02S0168
         L     @09,TCBRBP(,@09)                                 02S0168
         TM    RBFTP(@09),B'11000000'                           02S0168
         BNO   @RF00168                                         02S0168
         TM    RBFTP(@09),B'00100000'                           02S0168
         BNZ   @RF00168                                         02S0168
*       ALLDYN=BON;                 /* HAS SVRB AS TOP RB - DYN      */
         OI    ALLDYN,B'10000000'                               02S0169
*   END;                            /* END OF SEGMENT                */
@RF00168 DS    0H                                               02S0171
*                                                               02S0171
*   /*****************************************************************/
*   /*                                                               */
*   /* VALIDATE SUSBSYSTEM REQUEST. INSURE THAT VPSS ALLOCATION      */
*   /* RECEIVED CONTROL FROM COMMON ALLOCATION.                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0171
*   DO;                             /* BEGIN CODE SEGMENT            */
*     IF SSOBID^='SSOB' THEN        /* INVALID ENTRY - BUT           */
         L     @09,SSOBPTR                                      02S0172
         CLC   SSOBID(4,@09),@CC03882                           02S0172
         BE    @RF00172                                         02S0172
*       DO;                         /* NOWHERE TO GO                 */
*         ALLFAIL=BON;              /* INDICATE ALLOCATION FAILS     */
         OI    ALLFAIL,B'10000000'                              02S0174
*         RETCODE=SSRTLERR;         /* INDICATE INVALID REQUEST VIA  */
         MVC   RETCODE(4),@CF00288                              02S0175
*       END;                        /* REGISTER 15 RETURN CODE,NOT
*                                      RETN                          */
*     ELSE                          /* SSOB ID IS IN FACT "SSOB"     */
*       IF SSOBFUNC^=SSOBAGRP×      /* IF NOT THE SSOB FOR GRP ALLOC
*                                      OR                            */
*           SSAGARBP=0 THEN         /* NO DD/TEXT UNIT REQUESTS MADE */
         B     @RC00172                                         02S0177
@RF00172 L     @09,SSOBPTR                                      02S0177
         CLC   SSOBFUNC(2,@09),@CH00379                         02S0177
         BNE   @RT00177                                         02S0177
         L     @09,SSOBINDV(,@09)                               02S0177
         L     @09,SSAGARBP(,@09)                               02S0177
         LTR   @09,@09                                          02S0177
         BNZ   @RF00177                                         02S0177
@RT00177 DS    0H                                               02S0178
*         DO;                       /* ALLOCATION FAILS              */
*           ALLFAIL=BON;            /* INDICATE FAILURE AND          */
         OI    ALLFAIL,B'10000000'                              02S0179
*           RETCODE=SSRTLERR;       /* VIA R15 RETURN CODE INFORM
*                                      ALLOC                         */
         MVC   RETCODE(4),@CF00288                              02S0180
*         END;                      /* OF FAILURE TO INTERFACE  02S0181
*                                      PROPERLY                      */
*       ELSE                        /* OTHERWISE, REQUEST APPEARS
*                                      VALID                         */
*         DO;                       /* INITIALIZE FOR PROCESSING     */
         B     @RC00177                                         02S0182
@RF00177 DS    0H                                               02S0183
*           ALLRQVAL=BON;           /* INDICATE THAT REQUEST IS VALID*/
         OI    ALLRQVAL,B'00000100'                             02S0183
*           SSOBRETN=SSAGRTOK;      /* SUCCESSFUL SSOBRETN           */
         SLR   @09,@09                                          02S0184
         L     @05,SSOBPTR                                      02S0184
         ST    @09,SSOBRETN(,@05)                               02S0184
*           RETCODE=0;              /* SET REGISTER 15 RETURN CODE 0 */
         ST    @09,RETCODE                                      02S0185
*         END;                      /* DO IF REQUEST VALID           */
*   END;                            /* END OF SEGMENT                */
@RC00177 DS    0H                                               02S0187
@RC00172 DS    0H                                               02S0188
*   IF ALLRQVAL='1'B THEN           /* REQUEST IS VALID - SO FAR     */
         TM    ALLRQVAL,B'00000100'                             01S0188
         BNO   @RF00188                                         01S0188
*     DO;                           /* PROCEED WITH ERR RECOV   01S0189
*                                      ENVIRONMN                     */
*       DO;                         /* START OF CODE SEGMENT         */
*                                                               02S0190
*         /***********************************************************/
*         /*                                                         */
*         /* ESTABLISH ERROR RECOVERY ENVIRONMENT. SUBSYSTEM         */
*         /* ALLOCATION REQUIRES THAT AN ERROR RECOVERY ENVIRONMENT  */
*         /* BE ESTABLISHED PRIOR TO ANY ACQUISTITON OF SYSTEM OR    */
*         /* SUBSYSTEM RESOURCES.                                    */
*         /*                                                         */
*         /***********************************************************/
*                                                               02S0191
*                                                               02S0191
*         /***********************************************************/
*         /*                                                         */
*         /* ESTABLISH RECOVERY ENVIRONMENT. THE ERROR RECOVERY EXIT */
*         /* WILL GAIN CONTROL IF AN ABEND OCCURS. A DUMP IS TAKEN,  */
*         /* THE APPROPRIATE ERROR FLAGS SET, AND CONTROL PASSED TO  */
*         /* THE CLEANUP ROUTINE TO RELEASE RESOURCES BEFORE         */
*         /* RETURNING TO THE CALLER.                                */
*         /*                                                         */
*         /***********************************************************/
*                                                               02S0191
*                                                               02S0191
*         /***********************************************************/
*         /*                                                         */
*         /* BUILD ESTAE/FRR EXIT PARAMETER LIST                     */
*         /*                                                         */
*         /***********************************************************/
*                                                               02S0191
*         GEN REFS(ESTAEL,ESTAEL2,ESTAEL2L);                    02S0191
*                                            /*
         MVC   ESTAEL(L'ESTAEL2L),ESTAEL2 MOVE LIST TO THE DYN AREA
*         APESPTR=ADDR(DAPES1);     /* POINT TO THE APES             */
         LA    @09,DAPES1                                       02S0192
         ST    @09,APESPTR                                      02S0192
*         RFY                                                   02S0193
*           R5P RSTD;               /* WILL TEMPORARILY USE FOR APES */
*         RFY                                                   02S0194
*           APES BASED(R5P);        /* PROVIDE TEMP BASING EXPRESSION*/
*         R5P=APESPTR;              /* INITIALIZE THE POINTER        */
         LR    R5P,@09                                          02S0195
*         RFY                                                   02S0196
*          (R0P,                                                02S0196
*           R1F,                                                02S0196
*           R14P,                                               02S0196
*           R15F) RSTD;             /* INITIALIZE APES BLOCK         */
*         R0P=ADDR(APES);           /* TO ZEROS                      */
         LR    R0P,R5P                                          02S0197
*         R1F=LENGTH(APES);         /* USE MVCL TO                   */
         LA    R1F,648                                          02S0198
*         R15F=0;                   /* CLEAR, SINCE FIELD            */
         SLR   R15F,R15F                                        02S0199
*         MVCL(R0P,R14P);           /* MORE THAN 216 BYTES LONG      */
         MVCL  R0P,R14P                                         02S0200
*         RFY                                                   02S0201
*          (R0P,                                                02S0201
*           R1F,                                                02S0201
*           R14P,                                               02S0201
*           R15F) UNRSTD;           /* FINISHED WITH MVCL REGS       */
*         APESID=APESIDC;           /* IN-CORE ID                    */
         MVC   APESID(4,R5P),@CC03866                           02S0202
*         APESADDR=ADDR(APES);      /* ESTAE PARM VALUE              */
         ST    R5P,APESADDR(,R5P)                               02S0203
*         APESAPMV=ADDR(CMBRXZZZ);  /* MESSAGE INDEX TABLE           */
         LA    @09,CMBRXZZZ                                     02S0204
         ST    @09,APESAPMV(,R5P)                               02S0204
*         APESMXCD=CERRN99;         /* MAXIMUM APESCODE VALUE        */
         MVI   APESMXCD(R5P),X'01'                              02S0205
*         APESFREC=BON;             /* RECORD ON LOGREC              */
*         APESFSDP=BON;             /* SDUMP ON ERROR                */
         OI    APESFREC(R5P),B'01100000'                        02S0207
*         APESMOD='IGTJH0  ';       /* MODULE IN CONTROL             */
         MVC   APESMOD(8,R5P),@CC03889                          02S0208
*         APESPROC='IGTJH0  ';      /* CSECT IN CONTROL              */
         MVC   APESPROC(8,R5P),@CC03889                         02S0209
*         APESFRR='        ';       /* NO FRR ID                     */
         MVC   APESFRR(8,R5P),@CC03890                          02S0210
*         APESREGP=ADDR(APESREGZ);  /* DEFAULT REGISTER SAVEAREA     */
         LA    @09,APESREGZ(,R5P)                               02S0211
         ST    @09,APESREGP(,R5P)                               02S0211
*         STM(R0F,R14F,APESREGZ);   /* SAVE REGISTERS FOR RETRY      */
         STM   R0F,R14F,APESREGZ(R5P)                           02S0212
*         APESCODE=CERRN99;         /* 'UNKNOWN' ERROR               */
         MVI   APESCODE(R5P),X'01'                              02S0213
*         RFY                                                   02S0214
*           R2P RSTD;               /* POINTS TO EXIT ROUTINE        */
*         R2P=ADDR(APCVZUKA);       /* (IGTUKA).                     */
         L     R2P,APCTZUKA(,APCTPTR)                           02S0215
*         APESEXRA=ADDR(JH0EXR);    /* PROVIDE EXTENDED RECOVERY EXIT*/
         LA    @15,JH0EXR                                       02S0216
         ST    @15,APESEXRA(,R5P)                               02S0216
*         APESFEXR=BON;             /* INDICATE EXTENDED ESTAE AVAIL */
         OI    APESFEXR(R5P),B'00000100'                        02S0217
*         APESRTRY=ADDR(IGTJHX);    /* PROVIDE (E)STAE RETRY ROUTINE */
         LA    @15,IGTJHX                                       02S0218
         ST    @15,APESRTRY(,@09)                               02S0218
*         GEN REFS(APESADDR,APES,R5P,APSVPTR,ESTAEL,R2P,FLCCVT,PSA,
*             CVTSV60,CVTMAP) SETS(ESTAEL);                     02S0219
*                                   /*
         IGTYSTAE (R2P),           IGTUKA IS EXIT ROUTINE              *
               PARAM=APESADDR-APES(R5P), ADDR OF APES IS PARM LIST     *
               BRANCH=NO,          SVC ENTRY                           *
               MF=(E,ESTAEL)       EXECUTE FORM OF THE MACRO
*         RFY                                                   02S0220
*          (R2P,                                                02S0220
*           R5P) UNRSTD;            /* DONE WITH EXIT PTR & TEMP APES*/
*         RFY                                                   02S0221
*           APES BASED(APESPTR);    /* REVERT TO NORMAL BASING EXP   */
*         RFY                                                   02S0222
*           R15F RSTD;              /* REGISTER USED FOR RETURN CODE */
*         IF R15F=0 THEN            /* IF ERR RECOVERY ENV ESTABLISHD*/
         LTR   R15F,R15F                                        02S0223
         BNZ   @RF00223                                         02S0223
*           ALLERREN=BON;           /* INDICATE SUCCESS .            */
         OI    ALLERREN,B'00000010'                             02S0224
*         ELSE                      /* ERROR RECOVERY ENVIRONMENT NOT*/
*           DO;                     /* ESTABLISHED. INDICATE ERROR.  */
         B     @RC00223                                         02S0225
@RF00223 DS    0H                                               02S0226
*             RFY                                               02S0226
*               R15F UNRSTD;        /* REGISTER USED FOR RETURN CODE */
*             ALLFAIL=BON;          /* JOB FAILS ALLOCATION          */
*                                                               02S0227
         OI    ALLFAIL,B'10000000'                              02S0227
*             /*******************************************************/
*             /*                                                     */
*             /* IGTYJHE ERR(480)                                    */
*             /*                                                     */
*             /*******************************************************/
*                                                               02S0228
*             RFY                                               02S0228
*               R1F RSTD;                                       02S0228
*             R1F=3;                /* PROVIDE INDEX                 */
         LA    R1F,3                                            02S0229
*             CALL APCVZJHE;        /* SPECIFY ERROR INFORMATION
*                                      PRIOR TO RETURN               */
         L     @15,APCTZJHE(,APCTPTR)                           02S0230
         BALR  @14,@15                                          02S0230
*             RFY                                               02S0231
*               R1F UNRSTD;         /* DONE WITH REG PROVIDE ERR INFO
*                                      FOR RETURN                    */
*           END;                                                02S0232
*       END;                        /* ESTAE ENVIRONMENT SET         */
@RC00223 DS    0H                                               02S0234
*       IF ALLERREN='1'B THEN       /* ERROR RECOVERY ENV ESTABLISHED*/
         TM    ALLERREN,B'00000010'                             01S0234
         BNO   @RF00234                                         01S0234
*         DO;                       /* PROCESS SSWA SUBSYS PARMS     */
*           DO;                                                 02S0236
*                                                               03S0237
*             /*******************************************************/
*             /*                                                     */
*             /* STUB FOR JCL PROCESSOR - IF NO ERRORS ARE DETECTED  */
*             /* THEN THIS MODULE RETURNS THE ADDRESS OF AN APDS     */
*             /* ELEMENT IN THE SSAGSSCM FIELD OF THE DD RELATED     */
*             /* ALLOCATION REQUEST BLOCK.                           */
*             /*                                                     */
*             /*******************************************************/
*                                                               03S0237
*/*  COUNT THE REQUESTS                                              */
*                                                               03S0237
*             DO NUMALREQ=0 BY 1 WHILE SSDDRPTR^=0;/* COUNT NUMBER OF
*                                      DD/                           */
         SLR   @09,@09                                          03S0237
         ST    @09,NUMALREQ                                     03S0237
         B     @DE00237                                         03S0237
@DL00237 DS    0H                                               03S0238
*               LASTARB=SSDDRPTR;   /* TEXT UNIT REQUESTS.           */
         ST    SSDDRPTR,LASTARB                                 03S0238
*               SSDDRPTR=SSAGNRBP;  /* ADVANCE TO NEXT.              */
         L     SSDDRPTR,SSAGNRBP(,SSDDRPTR)                     03S0239
*             END;                                              03S0240
         LA    @09,1                                            03S0240
         AL    @09,NUMALREQ                                     03S0240
         ST    @09,NUMALREQ                                     03S0240
@DE00237 LTR   SSDDRPTR,SSDDRPTR                                03S0240
         BNZ   @DL00237                                         03S0240
*             SSDDRPTR=FIRSTARB;    /* REINSTATE POINTER TO ALRB     */
*                                                               03S0241
         L     SSDDRPTR,FIRSTARB                                03S0241
*             /*******************************************************/
*             /*                                                     */
*             /* OBTAIN STORAGE FOR APDS(S) IN ANTICIPATION THAT IT  */
*             /* WILL BE NEEDED.                                     */
*             /*                                                     */
*             /*******************************************************/
*                                                               03S0242
*             RFY                                               03S0242
*               APGF BASED(ADDR(DAPGF));/* IGTUAG INPUT PARMS FORMAT */
*             APGF=APGF&&APGF;      /* INITIALIZE UNUSED FIELDS      */
         LA    @09,DAPGF                                        03S0243
         XC    APGF(16,@09),APGF(@09)                           03S0243
*             APGFXSP=APDSSP;       /* STORAGE SUBPOOL               */
         MVI   APGFXSP(@09),X'F1'                               03S0244
*             APGFXKEY=APDSKEY;     /* STORAGE KEY                   */
         MVI   APGFXKEY(@09),X'01'                              03S0245
*             APGFXLN=NUMALREQ*APDSLN;/* SIZE IS A MULTIPLE OF APDSLN*/
         L     @05,NUMALREQ                                     03S0246
         MH    @05,@CH01187                                     03S0246
         ST    @05,APGFXLN(,@09)                                03S0246
*             APGFSCLR=BON;         /* CLEAR STORAGE TO ZEROS        */
         OI    APGFSCLR(@09),B'00100000'                        03S0247
*             RFY                                               03S0248
*              (R1P,                                            03S0248
*               R15F) RSTD;         /* INPUT POINTER & R15 RETCODE   */
*             R1P=ADDR(APGF);       /* POINT TO INPUT PARM LIST      */
         LR    R1P,@09                                          03S0249
*             CALL APCVZUAG;        /* ACQUIRE STORAGE - CONDITIONAL */
         L     @15,APCTZUAG(,APCTPTR)                           03S0250
         BALR  @14,@15                                          03S0250
*             IF R15F^=0 THEN       /* IF UNABLE TO ALLOCATE,        */
         LTR   R15F,R15F                                        03S0251
         BZ    @RF00251                                         03S0251
*               DO;                 /* THEN ERROR CONDITION EXISTS   */
*                 RFY                                           03S0253
*                  (R1P,                                        03S0253
*                   R15F) UNRSTD;   /* FINISHED WITH REGISTERS       */
*                 ALLFAIL='1'B;     /* ALLOCATION FAILS              */
*                                                               03S0254
         OI    ALLFAIL,B'10000000'                              03S0254
*                 /***************************************************/
*                 /*                                                 */
*                 /* IGTYJHE ERR(481)                                */
*                 /*                                                 */
*                 /***************************************************/
*                                                               03S0255
*                 RFY                                           03S0255
*                   R1F RSTD;                                   03S0255
*                 R1F=4;            /* PROVIDE INDEX                 */
         LA    R1F,4                                            03S0256
*                 CALL APCVZJHE;    /* SPECIFY ERROR INFORMATION
*                                      PRIOR TO RETURN               */
         L     @15,APCTZJHE(,APCTPTR)                           03S0257
         BALR  @14,@15                                          03S0257
*                 RFY                                           03S0258
*                   R1F UNRSTD;     /* DONE WITH REG SET ERROR  03S0258
*                                      INDICATORS PRIOR TO RET       */
*               END;                                            03S0259
*             ELSE                  /* IF STORAGE OBTAINED           */
*               DO;                                             03S0260
         B     @RC00251                                         03S0260
@RF00251 DS    0H                                               03S0261
*                 RFY                                           03S0261
*                   APDSPTR RSTD;   /* SAVE CONTENTS OF APDSPTR      */
*                 APDSPTR=APGFXADR; /* ADDRESS OF DYNAMIC AREA       */
         LA    @09,DAPGF                                        03S0262
         L     APDSPTR,APGFXADR(,@09)                           03S0262
*                 ALLAPDS=BON;      /* INDICATE STORAGE OBTAINED     */
         OI    ALLAPDS,B'00000001'                              03S0263
*               END;                                            03S0264
*             IF ALLAPDS=BON THEN   /* IF SUCCESSFUL THEN            */
@RC00251 TM    ALLAPDS,B'00000001'                              02S0265
         BNO   @RF00265                                         02S0265
*               DO;                 /* INITIALIZE APDS               */
*                 SSDDRPTR=FIRSTARB;/* POINT TO FIRST REQUEST        */
         L     SSDDRPTR,FIRSTARB                                02S0267
*                 RFY                                           02S0268
*                   APDS BASED(APDSPTR);/* ADDRESS OF APDS           */
*                 APDSID=APDSIDC;   /* CONTROL BLOCK ID IN STORAGE   */
         MVC   APDSID(4,APDSPTR),@CC01198                       02S0269
*                 APDSSIZE=APDSLN;  /* SIZE OF THE APDS ENTRY        */
         MVC   APDSSIZE(2,APDSPTR),@CH01187                     02S0270
*                 APDSAPCT=APCTPTR; /* POINT TO MAJOR CONTROL TABLE  */
         ST    APCTPTR,APDSAPCT(,APDSPTR)                       02S0271
*                 APDSASCB=CURASCB; /* POINT TO CURRENT ACT ADDR SPC */
         L     @10,CVTPTR                                       02S0272
         L     @10,CVTTCBP(,@10)                                02S0272
         L     @10,CURASCB(,@10)                                02S0272
         ST    @10,APDSASCB(,APDSPTR)                           02S0272
*                 INITTCB=CURASCB->ASCBASXB->ASXBFTCB->/* ADDRESS OF
*                                      STC INIT                      */
*                     TCBLTC;       /* USED IN ENQ W/TCB DIRECTION   */
         L     @10,ASCBASXB(,@10)                               02S0273
         L     @10,ASXBFTCB(,@10)                               02S0273
         L     @10,TCBLTC(,@10)                                 02S0273
         ST    @10,INITTCB                                      02S0273
*                 APDSITCB=INITTCB; /* ENQ W/TCB USES INIT TCB ADDR  */
         ST    @10,APDSITCB(,APDSPTR)                           02S0274
*                 APDSDDNM=DDNAME;  /* PICK UP DDNAME FROM SSOB PTR  */
         L     @10,SSAGDDNM(,SSDDRPTR)                          02S0275
         MVC   APDSDDNM(8,APDSPTR),DDNAME(@10)                  02S0275
*                 APDSJBNM=JOBNAME; /* PICK UP JOBNAME FROM SSAG PTR */
         L     @10,SSOBPTR                                      02S0276
         L     @10,SSOBINDV(,@10)                               02S0276
         L     @10,SSAGJBNM(,@10)                               02S0276
         MVC   APDSJBNM(8,APDSPTR),JOBNAME(@10)                 02S0276
*                 SSAGSSCM=APDSPTR; /* ADDRESS OF APDS FOR SUBSYSTEM */
         ST    APDSPTR,SSAGSSCM(,SSDDRPTR)                      02S0277
*                 SSDDRPTR=SSAGNRBP;/* POINT TO NEXT REQUEST OR ZERO */
         L     SSDDRPTR,SSAGNRBP(,SSDDRPTR)                     02S0278
*                 DO WHILE SSDDRPTR^=0;/* DONE IF ONLY 1. ELSE DO
*                                      RMDR                          */
         B     @DE00279                                         02S0279
@DL00279 DS    0H                                               02S0280
*                   RFY                                         02S0280
*                     R1P RSTD;     /* NEED REG TEMPORARILY          */
*                   R1P=APDSPTR+APDSLN;/* POINT TO NEXT APDS         */
         LA    R1P,144(,APDSPTR)                                02S0281
*                   R1P->APDS=APDS; /* COPY COMMON FIELDS & SOME MORE*/
         MVC   APDS(144,R1P),APDS(APDSPTR)                      02S0282
*                   R1P->APDSDSAP=APDSPTR;/* SET NEW PREVIOUS POINTER*/
         ST    APDSPTR,APDSDSAP(,R1P)                           02S0283
*                   APDSAPDS=R1P;   /* SET OLD NEXT APDS PTR         */
         ST    R1P,APDSAPDS(,APDSPTR)                           02S0284
*                   APDSPTR=R1P;    /* RESET CURRENT APDS PTR        */
         LR    APDSPTR,R1P                                      02S0285
*                   RFY                                         02S0286
*                     R1P UNRSTD;   /* DON'T NEED IT ANYMORE         */
*                   SSAGSSCM=APDSPTR;/* AND SSOB TOO.                */
         ST    APDSPTR,SSAGSSCM(,SSDDRPTR)                      02S0287
*                   APDSDDNM=DDNAME;/* PICK UP DDNAME FROM SSOB PTR  */
         L     @10,SSAGDDNM(,SSDDRPTR)                          02S0288
         MVC   APDSDDNM(8,APDSPTR),DDNAME(@10)                  02S0288
*                   SSDDRPTR=SSAGNRBP;/* ADVANCE TO NEXT REQUEST OR 0*/
         L     SSDDRPTR,SSAGNRBP(,SSDDRPTR)                     02S0289
*                 END;                                          02S0290
@DE00279 LTR   SSDDRPTR,SSDDRPTR                                02S0290
         BNZ   @DL00279                                         02S0290
*                 FIRSTARB->SSAGSSCM->/* SAVE PTR = TO LAST IN FIRST */
*                     APDSDSAP=APDSPTR;/* FOR USE IN QUEUEING        */
         L     @10,FIRSTARB                                     02S0291
         L     @10,SSAGSSCM(,@10)                               02S0291
         ST    APDSPTR,APDSDSAP(,@10)                           02S0291
*                 RFY                                           02S0292
*                   APDSPTR UNRSTD;                             02S0292
*                 RFY                                           02S0293
*                   APDS;                                       02S0293
*                                                               02S0294
*                 /***************************************************/
*                 /*                                                 */
*                 /* APDS(S) WILL BE CHAINED TO THE APDS QUEUE AFTER */
*                 /* ACCESS TO APUB/ APDS QUEUES HAS BEEN SERIALIZED */
*                 /* VIA ENQ SUBSYSNAME/APUB,EXCL.                   */
*                 /*                                                 */
*                 /***************************************************/
*                                                               02S0294
*                                                               02S0294
*                 /***************************************************/
*                 /*                                                 */
*                 /* IGTJH3 COMPLETES THE APDS INITIALIZATION BY     */
*                 /* PROCESSING THE SUBSYS PARMS TEXT PASSED TO      */
*                 /* SUBSYS ALLOCATION IN THE SSWA                   */
*                 /*                                                 */
*                 /***************************************************/
*                                                               02S0294
*                 CALL IGTJH3;      /* PROCESS SUBSYS PARMS          */
         BAL   @14,IGTJH3                                       02S0294
*               END;                /* END ALLAPDS = BON CLAUSE      */
*           END;                                                02S0296
@RF00265 DS    0H                                               02S0297
*           IF ALLAPDS=BON&         /* IF STORAGE WAS OBTAINED FOR
*                                      APDS                          */
*               ALLJCLOK=BON THEN   /* AND IF SUBSYS PARMS WERE OK
*                                      THEN                          */
         TM    ALLAPDS,B'00010001'                              01S0297
         BNO   @RF00297                                         01S0297
*             DO;                   /* INSURE THAT SUBSYS MONITOR IS
*                                      UP                            */
*               CALL APCVZJH6;      /* MONITOR ACTIVE CHECK          */
         L     @15,APCTZJH6(,APCTPTR)                           01S0299
         BALR  @14,@15                                          01S0299
*               IF ALLMONUP='1'B THEN/* MONITOR IS UP - PROCEED WITH */
         TM    ALLMONUP,B'00100000'                             01S0300
         BNO   @RF00300                                         01S0300
*                 DO;                                           01S0301
*                   IF SSAGWAIT=BON THEN/* IF WAITING IS ALLOWED THEN*/
         L     @09,SSOBPTR                                      01S0302
         L     @09,SSOBINDV(,@09)                               01S0302
         TM    SSAGWAIT(@09),B'10000000'                        01S0302
         BNO   @RF00302                                         01S0302
*                     DO;           /* ENQ -SERIALIZE ALLOCATION     */
*                       ENQECB=0;   /* CLEAR ENQ &                   */
         SLR   @09,@09                                          02S0304
         ST    @09,ENQECB                                       02S0304
*                       RFY                                     02S0305
*                         R15P RSTD;/* NEED REGISTER FOR ENQ RETCODE */
*                       GEN REFS(APCTENQM,LOCKOUT,ENQLISTE,ENQECB,
*                           NQLISTEL) SETS(DYNQLIST);           02S0306
*                                /*
         MVC   DYNQLIST(L'NQLISTEL),ENQLISTE INITIALIZE ENQ DYN AREA
         ENQ   (APCTENQM-APCT(,APCTPTR),LOCKOUT,E,7,SYSTEM),           *
               ECB=ENQECB,MF=(E,DYNQLIST)
*                       ALLSER=BON; /* LOCKOUT ENQ RESOURCE (TO BE)
*                                      OWNED                         */
         OI    ALLSER,B'10000000'                               02S0307
*                       IF R15P^=0&ENQRC^=8 THEN/* IF TASK DOES NOT
*                                      HAVE EXCLUSIVE                */
         LTR   R15P,R15P                                        02S0308
         BZ    @RF00308                                         02S0308
         CLI   ENQRC(R15P),8                                    02S0308
         BE    @RF00308                                         02S0308
*                         DO;       /* CONTROL OF RESOURCE THEN WAIT */
*                           RFY                                 02S0310
*                             R15P UNRSTD;                      02S0310
*                           DO;     /* IGTYWAIT                 02S0311
*                                      (1)ECBLIST(ENQECBL)LONG(YES)  */
*                             RFY                               02S0312
*                              (GPR00F,                         02S0312
*                               GPR01P) RSTD;/* REGISTERS USED       */
*                             GPR01P=-ADDR(ENQECBL);/* POINT TO ECB
*                                      LIST                          */
         LA    GPR01P,ENQECBL                                   02S0313
         LCR   GPR01P,GPR01P                                    02S0313
*                             GPR00F=1×'80000000'X;/* WAIT COUNT     */
         L     GPR00F,@CF04053                                  02S0314
*                             SVC(1);/* WAIT FOR ECB POSTING         */
         SVC   1                                                02S0315
*                             RFY                               02S0316
*                              (GPR00F,                         02S0316
*                               GPR01P) UNRSTD;/* FINISHED WITH 02S0316
*                                      REGISTERS                     */
*                           END;    /* ECB WAIT COMPLETE             */
*                           RFY                                 02S0318
*                             ECB BASED(CNCLECBP);/* POINT TO CANCEL
*                                      ECB                           */
*                           IF ECBPOSTB=BON THEN/* IF CANCEL ECB
*                                      POSTED-                       */
         L     @09,CNCLECBP                                     02S0319
         TM    ECBPOSTB(@09),B'01000000'                        02S0319
         BNO   @RF00319                                         02S0319
*                             DO;                               02S0320
*                                                               02S0320
*                               /*************************************/
*                               /*                                   */
*                               /* IGTYJHE ERR(491)                  */
*                               /*                                   */
*                               /*************************************/
*                                                               02S0321
*                               RFY                             02S0321
*                                 R1F RSTD;                     02S0321
*                               R1F=10;/* PROVIDE INDEX              */
         LA    R1F,10                                           02S0322
*                               CALL APCVZJHE;/* SPECIFY ERROR  02S0323
*                                      INFORMATION PRIOR TO RETURN   */
         L     @15,APCTZJHE(,APCTPTR)                           02S0323
         BALR  @14,@15                                          02S0323
*                               RFY                             02S0324
*                                 R1F UNRSTD;/* DONE WITH REG SET
*                                      ERROR INFO &                  */
*                               ALLFAIL=BON;/* INDICATE ALLOCATION
*                                      FAILS                         */
         OI    ALLFAIL,B'10000000'                              02S0325
*                             END;                              02S0326
*                           RFY                                 02S0327
*                             ECB;  /* REVERT TO ECBPTR              */
@RF00319 DS    0H                                               02S0328
*                         END;                                  02S0328
*                       RFY                                     02S0329
*                         R15P UNRSTD;                          02S0329
@RF00308 DS    0H                                               02S0330
*                     END;                                      02S0330
*                   ELSE                                        01S0331
*                     ;                                         01S0331
@RF00302 DS    0H                                               01S0332
*                   IF ALLFAIL=BOFF THEN/* IF EVERYTHING'S OK SO FAR */
         TM    ALLFAIL,B'10000000'                              01S0332
         BNZ   @RF00332                                         01S0332
*                     DO;           /* PREPARE TO ALLOCATE           */
*                       CALL GETAPUB;/* ENQ ON "SYSZ×SUBSYSNAME"/APUB*/
         BAL   @14,GETAPUB                                      01S0334
*                       IF ALLFAIL=BOFF THEN/* APUB ENQ COMPLETED    */
         TM    ALLFAIL,B'10000000'                              01S0335
         BNZ   @RF00335                                         01S0335
*                         DO;       /* OTHERWISE ENQ ECB POSTED      */
*                           IF ALLDYN=BON THEN/* IF ALLOC'N IS  02S0337
*                                      DYNAMIC               @ZA25367*/
         TM    ALLDYN,B'10000000'                               02S0337
         BNO   @RF00337                                         02S0337
*                             IF APVUVUSE(PSAAOLD->ASCBASID)=BOFF THEN
         L     @09,PSAAOLD                                      02S0338
         LH    @09,ASCBASID(,@09)                               02S0338
         N     @09,@CF04066                                     02S0338
         SLA   @09,2                                            02S0338
         L     @05,APCTAPVU(,APCTPTR)                           02S0338
         ALR   @05,@09                                          02S0338
         TM    APVUVUSE-4(@05),B'10000000'                      02S0338
         BNZ   @RF00338                                         02S0338
*                                   /* & ADDR SPC            @ZA25367
*                                      OWNS NO VPSS RESOURCES@ZA25367*/
*                               ORIGVUSE=BOFF;/* SAVE THIS STATUS
*                                                            @ZA25367*/
         NI    ORIGVUSE,B'01111111'                             02S0339
*                             ELSE  /* ADDR SPACE OWNS VPSS  @ZA25367*/
*                               ORIGVUSE=BON;/* RESOURCES. LIKEWISE.
*                                                            @ZA25367*/
         B     @RC00338                                         02S0340
@RF00338 OI    ORIGVUSE,B'10000000'                             02S0340
*                           APVUVUSE(PSAAOLD->ASCBASID)=BON;/* IND
*                                      ADDR SPC ACTIVE       @ZA25367*/
@RC00338 DS    0H                                               02S0341
@RF00337 L     @01,PSAAOLD                                      02S0341
         LH    @11,ASCBASID(,@01)                               02S0341
         N     @11,@CF04066                                     02S0341
         SLA   @11,2                                            02S0341
         L     @01,APCTAPVU(,APCTPTR)                           02S0341
         ALR   @01,@11                                          02S0341
         LA    @15,APVUVUSE-4(,@01)                             02S0341
         LR    @14,@15                                          02S0341
         LA    @09,3                                            02S0341
         NR    @14,@09                                          02S0341
         LCR   @14,@14                                          02S0341
         ALR   @15,@14                                          02S0341
         L     @09,0(,@15)                                      02S0341
@GL00004 LR    @05,@09                                          02S0341
         O     @05,@CB04068+3(@14)                              02S0341
         CS    @09,@05,0(@15)                                   02S0341
         BNE   @GL00004                                         02S0341
*                           ALLOCNTR=APCTACTR;/* SAVE CURRENT VALUE
*                                      COUNTER. THE APCTACTR IS IN.
*                                      CREMENTED EACH TIME A RESOURCE
*                                      IS MADE AVAILABLE FOR ALLOCA-
*                                      TION                          */
         L     @09,APCTACTR(,APCTPTR)                           02S0342
         ST    @09,ALLOCNTR                                     02S0342
*                                                               03S0343
*                           /*****************************************/
*                           /*                                       */
*                           /* THIS SEGMENT ADDS A CHAIN OF ONE OR   */
*                           /* MORE APDSS TO THE APDS QUEUE ANCHORED */
*                           /* IN THE APCT. ACCESS TO THIS QUEUE WITH*/
*                           /* UPDATE INTENT IS SERIALIZED BY AN     */
*                           /* EXCLUSIVE ENQ ON SUBSYSNAME/APUB. THE */
*                           /* SEGMENT OBTAINS A POINTER TO THE      */
*                           /* (FIRST) APDS FROM THE (FIRST)         */
*                           /* SSAGARBK. IT DEPENDS ON APDSCRE8      */
*                           /* HAVING CHAINED OTHER APDS(S) IF ANY TO*/
*                           /* THE FIRST AND HAVING STORED THE       */
*                           /* ADDRESS OF THE LAST NEW APDS IN THE   */
*                           /* APDSDSAP FIELD OF THE FIRST.          */
*                           /*                                       */
*                           /*****************************************/
*                                                               03S0343
*                           RFY                                 03S0343
*                            (R1P,                              03S0343
*                             APDSPTR) RSTD;/* RESTRICT REGISTERS
*                                      REQUIRED                      */
*                           APDSPTR=FIRSTARB->SSAGSSCM;/* ADDRESS OF
*                                      FIRST APDS TO BE ADDED TO THE
*                                      QUEUE                         */
         L     @09,FIRSTARB                                     03S0344
         L     APDSPTR,SSAGSSCM(,@09)                           03S0344
*                           RFY                                 03S0345
*                             APDS BASED(APDSPTR);/* ADDRESSABILITY
*                                      PROVIDED                      */
*                           R1P=APCTDSAP;/* SAVE CURRENT LAST        */
         L     @10,APCTDSAP(,APCTPTR)                           03S0346
         LR    R1P,@10                                          03S0346
*                           FIRSAPDS=APCTAPDS;/* SAVE ADDRESS OF
*                                      CURRENT FIRST                 */
         L     @09,APCTAPDS(,APCTPTR)                           03S0347
         ST    @09,FIRSAPDS                                     03S0347
*                           LASTAPDS=APCTDSAP;/* SAVE ADDRESS OF
*                                      CURRENT LAST                  */
         ST    @10,LASTAPDS                                     03S0348
*                           ALLQADD=BON;/* INDICATE THAT WE ARE IN
*                                      THE PROCESS OF ADDING APDS(S)
*                                      TO THE QUEUE ANCHORED AT 03S0349
*                                      APCTAPDS                      */
         OI    ALLQADD,B'00100000'                              03S0349
*                           APCTDSAP=APDSDSAP;/* SET NEW LAST        */
         L     @10,APDSDSAP(,APDSPTR)                           03S0350
         ST    @10,APCTDSAP(,APCTPTR)                           03S0350
*                           APDSDSAP=R1P;/* ADDR (PREV) IS OLD LAST
*                                      OR 0                          */
         ST    R1P,APDSDSAP(,APDSPTR)                           03S0351
*                           IF R1P=0 THEN/* IF APDS QUEUE WAS PREV
*                                      EMPTY                         */
         LTR   R1P,R1P                                          03S0352
         BNZ   @RF00352                                         03S0352
*                             APCTAPDS=APDSPTR;/* THIS APDS IS NEW
*                                      FIRST                         */
         ST    APDSPTR,APCTAPDS(,APCTPTR)                       03S0353
*                           ELSE                                03S0354
*                             R1P->APDSAPDS=APDSPTR;/* OLD LAST NOW
*                                      HAS NEXT                      */
         B     @RC00352                                         03S0354
@RF00352 ST    APDSPTR,APDSAPDS(,R1P)                           03S0354
*                           RFY                                 03S0355
*                            (R1P,                              03S0355
*                             APDSPTR) UNRSTD;/* DON'T NEED THESE NOW*/
@RC00352 DS    0H                                               03S0356
*                           ALLQUE=BON;/* THE APDS(S) ARE SAFELY ON
*                                      THE QUEUE                     */
*                           ALLQADD=BOFF;/* THE PROCESS OF ADDING THE
*                                      APDS ELEMENTS IS ENDED.       */
         OI    ALLQUE,B'01000000'                               03S0357
         NI    ALLQADD,B'11011111'                              03S0357
*                           CALL APCVZJHC;/* TRY TO ALLOCATE REQUESTS*/
         L     @15,APCTZJHC(,APCTPTR)                           02S0358
         BALR  @14,@15                                          02S0358
*                           IF ALLFAIL=BON THEN/* APDS(S) WILL NOT BE*/
         TM    ALLFAIL,B'10000000'                              02S0359
         BNO   @RF00359                                         02S0359
*                             DO;   /* NEEDED. DEQUEUE THEM.         */
*                               CALL DEQAPDS;/* SUB REMOVES APDS(S)
*                                                            @ZA25367*/
         BAL   @14,DEQAPDS                                      02S0361
*                               IF((ALLDYN=BON&ORIGVUSE=BOFF)×/* IF
*                                      DYNAMIC & OWN'D@ZA25367  02S0362
*                                      NOTHING ON ENTRY      @ZA25367*/
*                                   ALLDYN=BOFF) THEN/* OR BATCH
*                                                            @ZA25367*/
         TM    ALLDYN,B'10000000'                               02S0362
         BNO   @GL00005                                         02S0362
         TM    ORIGVUSE,B'10000000'                             02S0362
         BZ    @RT00362                                         02S0362
@GL00005 TM    ALLDYN,B'10000000'                               02S0362
         BNZ   @RF00362                                         02S0362
@RT00362 DS    0H                                               02S0363
*                                 APVUVUSE(PSAAOLD->ASCBASID)=BOFF;/*
*                                      ADDR SPC ^ACTIVE      @ZA25367*/
         L     @01,PSAAOLD                                      02S0363
         LH    @11,ASCBASID(,@01)                               02S0363
         N     @11,@CF04066                                     02S0363
         SLA   @11,2                                            02S0363
         L     @01,APCTAPVU(,APCTPTR)                           02S0363
         ALR   @01,@11                                          02S0363
         LA    @15,APVUVUSE-4(,@01)                             02S0363
         LR    @14,@15                                          02S0363
         LA    @09,3                                            02S0363
         NR    @14,@09                                          02S0363
         LCR   @14,@14                                          02S0363
         ALR   @15,@14                                          02S0363
         L     @09,0(,@15)                                      02S0363
@GL00007 LR    @05,@09                                          02S0363
         N     @05,@CB04072+3(@14)                              02S0363
         CS    @09,@05,0(@15)                                   02S0363
         BNE   @GL00007                                         02S0363
*                             END;  /* DO IF ALLFAIL = BON.  @ZA25367*/
@RF00362 DS    0H                                               02S0365
*                         END;      /* END OF ATTEMPT TO ALLOCATE    */
@RF00359 DS    0H                                               02S0366
*                       DO;         /* BEGIN CODE SEGMENT            */
@RF00335 DS    0H                                               02S0367
*                         GEN REFS(APCTENQM,APUBENQR,DEQLIST1,DQLIST1L)
*                             SETS(DYNDEQLA);                   02S0367
*                                          /*
         MVC   DYNDEQLA(L'DQLIST1L),DEQLIST1 INIT ENQ LIST DYN AREA
         DEQ  (APCTENQM-APCT(,APCTPTR),APUBENQR,4,SYSTEM),             *
               RET=HAVE,           MUST CLEAR CANCELED APUB ENQ@ZA25367*
               MF=(E,DYNDEQLA)
*                         ALLAPUB=BOFF;/* NO LONGER CONTROL RESOURCE */
         NI    ALLAPUB,B'11011111'                              02S0368
*                       END;        /* END OF SEGMENT                */
*                     END;                                      01S0370
*                   IF SSAGWAIT=BON THEN/* IF WAITING IS ALLOWED THEN
*                                      MUST DEQ LOCKOUT              */
@RF00332 L     @09,SSOBPTR                                      01S0371
         L     @09,SSOBINDV(,@09)                               01S0371
         TM    SSAGWAIT(@09),B'10000000'                        01S0371
         BNO   @RF00371                                         01S0371
*                     DO;           /* BEGIN CODE SEGMENT            */
*                       GEN REFS(APCTENQM,LOCKOUT,DEQLIST1,DQLIST1L)
*                           SETS(DYNDEQLA);                     02S0373
*                                        /*
         MVC   DYNDEQLA(L'DQLIST1L),DEQLIST1 INIT DEQ DYNAMIC LIST AREA
         DEQ   (APCTENQM-APCT(,APCTPTR),LOCKOUT,7,SYSTEM),             *
               MF=(E,DYNDEQLA)
*                       ALLSER=BOFF;/* NO LONGER CONTROL RESOURCE    */
         NI    ALLSER,B'01111111'                               02S0374
*                     END;          /* END CODE SEGMENT              */
*                   IF ALLFAIL=BON THEN/* IF JOB STEP IS FAILING AND */
@RF00371 TM    ALLFAIL,B'10000000'                              01S0376
         BNO   @RF00376                                         01S0376
*                     IF ALLENQRC^=8 THEN/* THE JOB OWNS NO 3838
*                                      RESOURCES THEN DEQ ALLOCATE   */
         CLI   ALLENQRC,8                                       01S0377
         BE    @RF00377                                         01S0377
*                       DO;                                     02S0378
*                         GEN REFS(APCTENQM,ALLOCATE,INITTCB,DEQLISTT,
*                             DQLISTTL,ALLCWA,ALLCWAPT) SETS(DYNDEQLA);
*                                          /*
         MVC   DYNDEQLA(L'DQLISTTL),DEQLISTT INIT DEQ DYNAMIC LIST AREA
         DEQ   (APCTENQM-APCT(,APCTPTR),ALLOCATE,8,SYSTEM),            *
               TCB=INITTCB-ALLCWA(ALLCWAPT),MF=(E,DYNDEQLA)
*                         ALLALL=BOFF;/* NO LONGER CONTROL RESOURCE  */
         NI    ALLALL,B'10111111'                               02S0380
*                       END;                                    02S0381
*                 END;              /* END DO IF MONITOR UP          */
*               ELSE                                            01S0383
*                 ;                 /* MONITOR NOT UP                */
@RF00300 DS    0H                                               01S0384
*             END;                  /* END DO IF ALLAPDS & ALJCLOK ON*/
*           ELSE                                                01S0385
*             ;                     /* ALLAPDS × ALLJCLOK ^= BON     */
@RF00297 DS    0H                                               01S0386
*           IF ALLFAIL=BON&         /* IF ALLOCATION IS FAILING AND  */
*               ALLAPDS=BON THEN    /* STORAGE FOR APDS(S) WAS  01S0386
*                                      OBTAINED THEN FREE IT         */
@RC00297 TM    ALLFAIL,B'10000001'                              01S0386
         BNO   @RF00386                                         01S0386
*             DO;                   /* FREE STORAGE OBTAINED FOR APDS*/
*               APGFSFRE=BON;       /* SIGNAL FREEMAIN               */
         LA    @09,DAPGF                                        02S0388
         OI    APGFSFRE(@09),B'00000001'                        02S0388
*               RFY                                             02S0389
*                 R1P RSTD;         /* INPUT POINTER                 */
*               R1P=ADDR(APGF);     /* POINT TO PARM LIST            */
         LR    R1P,@09                                          02S0390
*               CALL APCVZUAG;      /* FREE STORAGE - COND           */
         L     @15,APCTZUAG(,APCTPTR)                           02S0391
         BALR  @14,@15                                          02S0391
*               RFY                                             02S0392
*                 R1P UNRSTD;       /* STORAGE IS RETURNED           */
*             END;                                              02S0393
*CANESTAE:                                                      01S0394
*           GEN REFS(ESTAEL);                                   01S0394
@RF00386 DS    0H                                               01S0394
CANESTAE DS    0H                                               01S0394
*                                   /*
         IGTYSTAE 0,                CANCEL (E)STAE ENVIRONMENT         *
               MF=(E,ESTAEL)        EXECUTE FORM
*         END;                      /* END DO IF ERR RECOV ENVMNT EST*/
*       ELSE                                                    01S0396
*         ;                         /* NO ERROR RECOVERY ENVIRONMENT */
@RF00234 DS    0H                                               01S0397
*     END;                          /* END DO IF REQUEST IS VALID    */
*   ELSE                                                        01S0398
*     ;                             /* REQUEST NOT VALID             */
@RF00188 DS    0H                                               01S0399
*JH0RETN:                           /* RETURN TO CALLER              */
*   RETURN CODE(RETCODE);                                       01S0399
JH0RETN  L     @09,RETCODE                                      01S0399
         L     @13,4(,@13)                                      01S0399
         L     @00,@SIZDATD                                     01S0399
         LR    @01,@06                                          01S0399
         IGTYFSV  R,LV=(0),A=(1)
         LR    @15,@09                                          01S0399
         L     @14,12(,@13)                                     01S0399
         LM    @00,@12,20(@13)                                  01S0399
         BR    @14                                              01S0399
         EJECT
*GETAPUB:                                                       01S0400
*   PROC;                           /* SEGMENT DOES ECB ENQ ON APUB  */
GETAPUB  STM   @14,@12,@SA00002                                 01S0400
*   ENQECB=0;                       /* CLEAR ENQ ECB                 */
         SLR   @09,@09                                          01S0401
         ST    @09,ENQECB                                       01S0401
*   RFY                                                         01S0402
*     R15P RSTD;                    /* NEED REGISTER FOR ENQ RETCODE */
*   GEN REFS(APCTENQM,APUBENQR,ENQECB,ENQLISTE,NQLISTEL) SETS(DYNQLIST)
*       ;                                                       01S0403
*                                   /*
         MVC   DYNQLIST(L'NQLISTEL),ENQLISTE INIT ENQ DYN LIST AREA
         ENQ   (APCTENQM-APCT(,APCTPTR),APUBENQR,E,4,SYSTEM),          *
               ECB=ENQECB,MF=(E,DYNQLIST)
*   IF R15P^=0&ENQRC^=8 THEN        /* IF TASK DOES NOT HAVE SHR'D   */
         LTR   R15P,R15P                                        01S0404
         BZ    @RF00404                                         01S0404
         CLI   ENQRC(R15P),8                                    01S0404
         BE    @RF00404                                         01S0404
*     DO;                           /* CONTROL OR RESOURCE THEN WAIT */
*       RFY                                                     01S0406
*         R15P UNRSTD;              /* NO LONGER NEED REGISTER       */
*       DO;                         /* IGTYWAIT                 01S0407
*                                      (1)ECBLIST(ENQECBL)LONG(NO)   */
*         RFY                                                   01S0408
*          (GPR00F,                                             01S0408
*           GPR01P) RSTD;           /* REGISTERS USED                */
*         GPR01P=-ADDR(ENQECBL);    /* POINT TO ECB LIST             */
         LA    GPR01P,ENQECBL                                   01S0409
         LCR   GPR01P,GPR01P                                    01S0409
*         GPR00F=1;                 /* WAIT COUNT                    */
         LA    GPR00F,1                                         01S0410
*         SVC(1);                   /* WAIT FOR ECB POSTING          */
         SVC   1                                                01S0411
*         RFY                                                   01S0412
*          (GPR00F,                                             01S0412
*           GPR01P) UNRSTD;         /* FINISHED WITH REGISTERS       */
*       END;                        /* ECB WAIT COMPLETE WAIT FOR ONE
*                                      TO COMPLETE                   */
*       RFY                                                     01S0414
*         ECB BASED(CNCLECBP);      /* POINT TO CANCEL ECB           */
*       IF ECBPOSTB=BON THEN        /* IF POSTED,                    */
         L     @09,CNCLECBP                                     01S0415
         TM    ECBPOSTB(@09),B'01000000'                        01S0415
         BNO   @RF00415                                         01S0415
*         DO;                       /* CANCELED. SO INDICATE.        */
*           ALLFAIL=BON;            /* ALLOCATION & JOB FAIL         */
*                                                               01S0417
         OI    ALLFAIL,B'10000000'                              01S0417
*           /*********************************************************/
*           /*                                                       */
*           /* IGTYJHE ERR(490)                                      */
*           /*                                                       */
*           /*********************************************************/
*                                                               01S0418
*           RFY                                                 01S0418
*             R1F RSTD;                                         01S0418
*           R1F=9;                  /* PROVIDE INDEX                 */
         LA    R1F,9                                            01S0419
*           CALL APCVZJHE;          /* SPECIFY ERROR INFORMATION
*                                      PRIOR TO RETURN               */
         L     @15,APCTZJHE(,APCTPTR)                           01S0420
         BALR  @14,@15                                          01S0420
*           RFY                                                 01S0421
*             R1F UNRSTD;           /* DONE WITH REG PROVIDE ERR INFO*/
*         END;                                                  01S0422
*       ELSE                        /* OTHERWISE, ENQ ECB POSTED.    */
*         ALLAPUB=BON;              /* INDICATE RESOURCE OWNED       */
         B     @RC00415                                         01S0423
@RF00415 OI    ALLAPUB,B'00100000'                              01S0423
*       RFY                                                     01S0424
*         ECB;                      /* REVERT TO ECBPTR              */
@RC00415 DS    0H                                               01S0425
*     END;                                                      01S0425
*   ELSE                            /* TASK HAS CONTROL OF RESOURCE  */
*     ALLAPUB=BON;                  /* INDICATE RESOURCE IS OWNED    */
         B     @RC00404                                         01S0426
@RF00404 OI    ALLAPUB,B'00100000'                              01S0426
*   END GETAPUB;                    /* END OF SUBROUTINE             */
@EL00002 DS    0H                                               01S0427
@EF00002 DS    0H                                               01S0427
@ER00002 LM    @14,@12,@SA00002                                 01S0427
         BR    @14                                              01S0427
         EJECT
*DEQAPDS:                                                       01S0428
*   PROC;                           /* SEGMENT REMOVES APDS(S) FROM
*                                      APDS QUEUE ANCHORED IN APCT   */
DEQAPDS  STM   @14,@12,12(@13)                                  01S0428
*DQAPDSDO:                                                      01S0429
*   DO;                                                         01S0429
DQAPDSDO DS    0H                                               01S0430
*     SSDDRPTR=FIRSTARB;            /* POINT TO 1ST REQUEST BLOCK    */
         L     @09,FIRSTARB                                     01S0430
         LR    SSDDRPTR,@09                                     01S0430
*     RFY                                                       01S0431
*       APDSPTR RSTD;               /* REGISTER NEEDED               */
*     FIRSAPDS=FIRSTARB->SSAGSSCM->APDSDSAP;/* THE APDS PREVIOUS TO
*                                      OUR FIRST                     */
         L     @10,SSAGSSCM(,@09)                               01S0432
         L     @10,APDSDSAP(,@10)                               01S0432
         ST    @10,FIRSAPDS                                     01S0432
*     LASTAPDS=LASTARB->SSAGSSCM->APDSAPDS;/* THE APDS WHICH IS NEXT
*                                      FROM OUR LAST                 */
         L     @10,LASTARB                                      01S0433
         L     @10,SSAGSSCM(,@10)                               01S0433
         L     @10,APDSAPDS(,@10)                               01S0433
         ST    @10,LASTAPDS                                     01S0433
*     ALLQRMV=BON;                  /* THE PROCESS OF REMOVING THE
*                                      APDS(S) FROM THE QUEUE HAS
*                                      BEGUN.                        */
*     ALLQUE=BOFF;                  /* THE APDS QUEUE IS NO LONGER
*                                      CERTAIN OF BEING INTACT FROM
*                                      THIS PROGRAM'S POINT OF VIEW. */
         OI    ALLQRMV,B'00010000'                              01S0435
         NI    ALLQUE,B'10111111'                               01S0435
*     DO WHILE SSDDRPTR^=0;         /* LOOP WHILE ELEMENTS REMAIN    */
         B     @DE00436                                         01S0436
@DL00436 DS    0H                                               01S0437
*       APDSPTR=SSAGSSCM;           /* POINTER TO APDS ELEMENT       */
         L     APDSPTR,SSAGSSCM(,SSDDRPTR)                      01S0437
*       IF APDSAPDS=0 THEN          /* THIS IS LAST BLK ON QUEUE     */
         SLR   @10,@10                                          01S0438
         C     @10,APDSAPDS(,APDSPTR)                           01S0438
         BNE   @RF00438                                         01S0438
*         IF APDSDSAP=0 THEN        /* THIS IS ONLY BLK ON QUEUE     */
         C     @10,APDSDSAP(,APDSPTR)                           01S0439
         BNE   @RF00439                                         01S0439
*           DO;                     /* RESET FIRST AND LAST POINTERS */
*             APCTAPDS=0;           /* FIRST = 0                     */
         ST    @10,APCTAPDS(,APCTPTR)                           01S0441
*             APCTDSAP=0;           /* LAST = 0                      */
         ST    @10,APCTDSAP(,APCTPTR)                           01S0442
*           END;                                                01S0443
*         ELSE                      /* (OTHERS BEFORE THIS ONE)      */
*           DO;                                                 01S0444
         B     @RC00439                                         01S0444
@RF00439 DS    0H                                               01S0445
*             APDSDSAP->APDSAPDS=0; /* NEW LAST HAS 0 NEXT           */
         L     @10,APDSDSAP(,APDSPTR)                           01S0445
         SLR   @09,@09                                          01S0445
         ST    @09,APDSAPDS(,@10)                               01S0445
*             APCTDSAP=APDSDSAP;    /* NEW LAST POINTER              */
         ST    @10,APCTDSAP(,APCTPTR)                           01S0446
*           END;                                                01S0447
*       ELSE                        /* (FIRST OR INTERIOR QUE BLK &  */
*         IF APDSDSAP=0 THEN        /* OTHERS FOLLOW. IF PTR TO PREV */
         B     @RC00438                                         01S0448
@RF00438 SLR   @10,@10                                          01S0448
         C     @10,APDSDSAP(,APDSPTR)                           01S0448
         BNE   @RF00448                                         01S0448
*           DO;                     /* IOUS IS ZERO THEN THIS IS 1ST */
*             APCTAPDS=APDSAPDS;    /* NEW FIRST POINTER             */
         L     @09,APDSAPDS(,APDSPTR)                           01S0450
         ST    @09,APCTAPDS(,APCTPTR)                           01S0450
*             APDSAPDS->APDSDSAP=0; /* NEW FIRST HAS NO PREVIOUS     */
         ST    @10,APDSDSAP(,@09)                               01S0451
*           END;                                                01S0452
*         ELSE                      /* (INTERIOR QUEUE BLK)          */
*           DO;                     /*                               */
         B     @RC00448                                         01S0453
@RF00448 DS    0H                                               01S0454
*             APDSDSAP->APDSAPDS=APDSAPDS;/* PREVIOUS POINTS TO NEXT */
         L     @10,APDSDSAP(,APDSPTR)                           01S0454
         L     @09,APDSAPDS(,APDSPTR)                           01S0454
         ST    @09,APDSAPDS(,@10)                               01S0454
*             APDSAPDS->APDSDSAP=APDSDSAP;/* NEXT POINTS BACK TO PREV*/
         ST    @10,APDSDSAP(,@09)                               01S0455
*           END;                                                01S0456
*       SSDDRPTR=SSAGNRBP;          /* ADVANCE TO NEXT APDS ELEMENT  */
@RC00448 DS    0H                                               01S0457
@RC00438 L     SSDDRPTR,SSAGNRBP(,SSDDRPTR)                     01S0457
*     END;                          /* END DOWHILE                   */
@DE00436 LTR   SSDDRPTR,SSDDRPTR                                01S0458
         BNZ   @DL00436                                         01S0458
*     ALLQRMV=BOFF;                 /* THE PROCESS OF REMOVING THE
*                                      APDS(S) FROM THE APDS QUEUE
*                                      COMPLETE. EXPOSURE IS OVER.   */
         NI    ALLQRMV,B'11101111'                              01S0459
*     RFY                                                       01S0460
*       APDSPTR UNRSTD;             /* REGISTER NOT NEEDED NOW       */
*   END DQAPDSDO;                                               01S0461
*   END DEQAPDS;                    /* END OF PROGRAM SEGMENT        */
@EL00003 DS    0H                                               01S0462
@EF00003 DS    0H                                               01S0462
@ER00003 LM    @14,@12,12(@13)                                  01S0462
         BR    @14                                              01S0462
         EJECT
*IGTJH3:                                                        01S0463
*   PROC;                                                       01S0463
*                                                               01S0463
IGTJH3   STM   @14,@12,@SA00004                                 01S0463
*   /*****************************************************************/
*   /*                                                               */
*   /* DYNAMIC VARIABLES                                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0464
*   DCL                                                         01S0464
*     I FIXED(31);                  /* LOOP CONTROL VARIABLE         */
*   DCL                                                         01S0465
*     JCL BIT(01);                  /* LOOP CONTROL VARIABLE         */
*   DCL                                                         01S0466
*     STRNGPTR PTR(31);             /* LENGTH OF SUBSYS TEXT PARM    */
*   DCL                                                         01S0467
*     1 MSGAREA CHAR(124) BDY(WORD),/* AREA FOR ERROR RETURN         */
*      2 MSGLNGTH FIXED(15),        /* LENGTH OF ERR MSG + 8         */
*      2 * CHAR(06),                /* SPACE USED IN VS1             */
*      2 MSGTEXT CHAR(110);         /* MESSAGE TEXT                  */
*   DCL                                                         01S0468
*     INFRCODE FIXED(15);           /* RETURN CODE FROM IGTJI3       */
*   DCL                                                         01S0469
*     NXTPTR PTR(31);               /* POINTER TO NEXT LN/PRM PAIR   */
*   DCL                                                         01S0470
*     1 * BIT(08) DEFINED(SSWAILEN),/* INDICATES SUBPARAMETERS       */
*      2 SUBPARMI BIT(01);                                      01S0470
*   DCL                                                         01S0471
*     KWDUPL CHAR(256);             /* DUPLICATE KEYWORD TABLE       */
*                                                               01S0471
*   /*****************************************************************/
*   /*                                                               */
*   /* CONSTANTS                                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0472
*   DCL                                                         01S0472
*     OK BIT(01) CONSTANT('1'B);                                01S0472
*   DCL                                                         01S0473
*     NOTOK BIT(01) CONSTANT('0'B);                             01S0473
*                                                               01S0474
*   /*****************************************************************/
*   /*                                                               */
*   /* INCLUDED UNITS                                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0474
         EJECT
*   RFY                                                         01S0474
*     APDS BASED(APDSPTR);                                      01S0474
*   RFY                                                         01S0475
*     SSAGARBK BASED(SSDDRPTR);                                 01S0475
*   RFY                                                         01S0476
*     APDSPTR RSTD;                                             01S0476
*   RFY                                                         01S0477
*     SSWA BASED(SSAGSSWA);                                     01S0477
*   SSDDRPTR=FIRSTARB;              /* BEGIN WITH FIRST REQUEST      */
         L     SSDDRPTR,FIRSTARB                                01S0478
*   JCL=OK;                         /* INIT LOOP CONTROL VARIABLE    */
         OI    JCL,B'10000000'                                  01S0479
*   DO WHILE SSDDRPTR^=0&JCL=OK;    /* DO ONCE FOR EACH REQUEST WHILE
*                                      NO ERRORS                     */
         B     @DE00480                                         01S0480
@DL00480 DS    0H                                               01S0481
*     APDSPTR=SSAGSSCM;             /* ADDRESS OF ASSOCIATED APDS TO
*                                      REGISTER 11 FOR IGTJI3        */
         L     APDSPTR,SSAGSSCM(,SSDDRPTR)                      01S0481
*     IF SSWATYPE=SSWASYST THEN     /* IF CORRECT SSWA TYPE THEN     */
         LA    @10,1                                            01S0482
         L     @09,SSAGSSWA(,SSDDRPTR)                          01S0482
         CH    @10,SSWATYPE(,@09)                               01S0482
         BNE   @RF00482                                         01S0482
*       DO;                         /* PROCESS SSWA                  */
*         KWDUPL=KWDUPL&&KWDUPL;    /* CLEAR DUPLICATE KEYWORD TABLE */
         XC    KWDUPL(256),KWDUPL                               01S0484
*         NXTPTR=ADDR(SSWAPREN);    /* POINT TO FIRST LN/PRM PAIR    */
         LA    NXTPTR,SSWAPREN(,@09)                            01S0485
*         RFY                                                   01S0486
*           SSWAIFLD BASED(NXTPTR); /* USE MOVABLE STRUCTURE         */
*         DO I=1 TO SSWAPRNO WHILE JCL=OK;/* DO FOR EACH LN/PRM PAIR */
         LR    I,@10                                            01S0487
         B     @DE00487                                         01S0487
@DL00487 TM    JCL,B'10000000'                                  01S0487
         BNO   @DC00487                                         01S0487
*           IF SUBPARMI=BON THEN    /* IF SUBPARMS ARE INDICATED     */
         TM    SUBPARMI(NXTPTR),B'10000000'                     01S0488
         BNO   @RF00488                                         01S0488
*             DO;                   /* ERROR CONDITION EXISTS        */
*               JCL=NOTOK;          /* SUBPARMS ARE NOT PROCESSED BY
*                                      SUBSYSTEM CONVERTER EXIT      */
*                                                               01S0490
         NI    JCL,B'01111111'                                  01S0490
*               /*****************************************************/
*               /*                                                   */
*               /* IGTYJHE ERR(456)                                  */
*               /*                                                   */
*               /*****************************************************/
*                                                               01S0491
*               RFY                                             01S0491
*                 R0P RSTD;                                     01S0491
*               R0P=SSDDRPTR;                                   01S0492
         LR    R0P,SSDDRPTR                                     01S0492
*               RFY                                             01S0493
*                 R1F RSTD;                                     01S0493
*               R1F=1;              /* PROVIDE INDEX                 */
         LA    R1F,1                                            01S0494
*               CALL APCVZJHE;      /* SPECIFY ERROR INFORMATION
*                                      PRIOR TO RETURN               */
         L     @15,APCTZJHE(,APCTPTR)                           01S0495
         BALR  @14,@15                                          01S0495
*               RFY                                             01S0496
*                 R1F UNRSTD;       /* DONE WITH REG                 */
*               RFY                                             01S0497
*                 R0P UNRSTD;       /* ERROR RETURN INFO             */
*             END;                                              01S0498
*           ELSE                    /* SET UP PARMS FOR IGTJI3       */
*             DO;                                               01S0499
         B     @RC00488                                         01S0499
@RF00488 DS    0H                                               01S0500
*               STRNGPTR=ADDR(SSWAIPRM);/* TEXT STRING POINTER       */
         LA    @10,SSWAIPRM(,NXTPTR)                            01S0500
         ST    @10,STRNGPTR                                     01S0500
*               CALL APCVZJI3(SSWAILEN,MSGAREA,STRNGPTR,INFRCODE,KWDUPL
*                   );                                          01S0501
         ST    NXTPTR,@AL00001                                  01S0501
         LA    @10,MSGAREA                                      01S0501
         ST    @10,@AL00001+4                                   01S0501
         LA    @10,STRNGPTR                                     01S0501
         ST    @10,@AL00001+8                                   01S0501
         LA    @10,INFRCODE                                     01S0501
         ST    @10,@AL00001+12                                  01S0501
         LA    @10,KWDUPL                                       01S0501
         ST    @10,@AL00001+16                                  01S0501
         L     @15,APCTZJI3(,APCTPTR)                           01S0501
         LA    @01,@AL00001                                     01S0501
         BALR  @14,@15                                          01S0501
*               IF INFRCODE^=0 THEN /* PROBLEM PROCESSING SSWA       */
         LH    @10,INFRCODE                                     01S0502
         LTR   @10,@10                                          01S0502
         BZ    @RF00502                                         01S0502
*                 DO;                                           01S0503
*                   JCL=NOTOK;      /* DON'T PROCESS ANY MORE        */
         NI    JCL,B'01111111'                                  01S0504
*                   SSOBRETN=SSAGDDER;/* DD RELATED ERROR            */
         L     @09,SSOBPTR                                      01S0505
         MVC   SSOBRETN(4,@09),@CF00145                         01S0505
*                   SSAGRBEC=SSAGIPRM;/* INVALID PARAMETER           */
         MVC   SSAGRBEC(2,SSDDRPTR),@CH00157                    01S0506
*                   SSAGRBIC=INFRCODE;/* INFORMATION REASON CODE     */
         STH   @10,SSAGRBIC(,SSDDRPTR)                          01S0507
*                   IF SSAGSMSG=BON THEN/* IF MSGS ARE EXPECTED THEN */
         L     @10,SSOBINDV(,@09)                               01S0508
         TM    SSAGSMSG(@10),B'01000000'                        01S0508
         BNO   @RF00508                                         01S0508
*                     DO;           /* PROVIDE THEM                  */
*                       SSAGDMGL=MSGLNGTH-8;/* LENGTH OF MESSAGE TEXT*/
         L     @10,SSAGDMGP(,SSDDRPTR)                          01S0510
         LH    @09,MSGLNGTH                                     01S0510
         SL    @09,@CF00056                                     01S0510
         STH   @09,SSAGDMGL(,@10)                               01S0510
*                       SSAGDMSG(1:SSAGDMGL)=MSGTEXT(1:SSAGDMGL);/*
*                                      TEXT                          */
         BCTR  @09,0                                            01S0511
         EX    @09,@SM04079                                     01S0511
*                     END;                                      01S0512
*                 END;              /* RCODE ^= 0                    */
*               ELSE                /* RCODE = 0                     */
*                 NXTPTR=NXTPTR+SSWAILEN+1;/* ADVANCE TO NEXT PAIR   */
         B     @RC00502                                         01S0514
@RF00502 LR    @10,NXTPTR                                       01S0514
         SLR   @09,@09                                          01S0514
         IC    @09,SSWAILEN(,NXTPTR)                            01S0514
         ALR   @10,@09                                          01S0514
         AL    @10,@CF00049                                     01S0514
         LR    NXTPTR,@10                                       01S0514
*             END;                                              01S0515
@RC00502 DS    0H                                               01S0516
*         END;                                                  01S0516
@RC00488 AL    I,@CF00049                                       01S0516
@DE00487 L     @10,SSAGSSWA(,SSDDRPTR)                          01S0516
         CH    I,SSWAPRNO(,@10)                                 01S0516
         BNH   @DL00487                                         01S0516
@DC00487 DS    0H                                               01S0517
*         IF JCL=OK THEN            /* IF PARMS WER OK,              */
         TM    JCL,B'10000000'                                  01S0517
         BNO   @RF00517                                         01S0517
*           IF APDSREG=0 THEN       /* IF REGION PARM NOT SPECIFIED  */
         L     @10,APDSREG(,APDSPTR)                            01S0518
         LTR   @10,@10                                          01S0518
         BNZ   @RF00518                                         01S0518
*             APDSREG=APCTREG;      /* USE DEFAULT FROM APCT         */
         L     @10,APCTREG(,APCTPTR)                            01S0519
         ST    @10,APDSREG(,APDSPTR)                            01S0519
*       END;                        /* SSWATYPE = SSWASYST           */
*     ELSE                          /* SSWATYPE ^= SSWASYST          */
*       DO;                                                     01S0521
         B     @RC00482                                         01S0521
@RF00482 DS    0H                                               01S0522
*         JCL=NOTOK;                /* STOP. INVALID REQUEST         */
*                                                               01S0522
         NI    JCL,B'01111111'                                  01S0522
*         /***********************************************************/
*         /*                                                         */
*         /* IGTYJHE ERR(457)                                        */
*         /*                                                         */
*         /***********************************************************/
*                                                               01S0523
*         RFY                                                   01S0523
*           R0P RSTD;                                           01S0523
*         R0P=SSDDRPTR;                                         01S0524
         LR    R0P,SSDDRPTR                                     01S0524
*         RFY                                                   01S0525
*           R1F RSTD;                                           01S0525
*         R1F=2;                    /* PROVIDE INDEX                 */
         LA    R1F,2                                            01S0526
*         CALL APCVZJHE;            /* SPECIFY ERROR INFORMATION
*                                      PRIOR TO RETURN               */
         L     @15,APCTZJHE(,APCTPTR)                           01S0527
         BALR  @14,@15                                          01S0527
*         RFY                                                   01S0528
*           R1F UNRSTD;             /* DONE WITH REG                 */
*         RFY                                                   01S0529
*           R0P UNRSTD;             /* ERROR RETURN INFO             */
*       END;                                                    01S0530
*     SSDDRPTR=SSAGNRBP;            /* ADVANCE TO NEXT REQUEST       */
@RC00482 L     SSDDRPTR,SSAGNRBP(,SSDDRPTR)                     01S0531
*   END;                                                        01S0532
@DE00480 LTR   SSDDRPTR,SSDDRPTR                                01S0532
         BZ    @DC00480                                         01S0532
         TM    JCL,B'10000000'                                  01S0532
         BO    @DL00480                                         01S0532
@DC00480 DS    0H                                               01S0533
*   IF JCL=OK THEN                  /* IF SSWA WAS OK THEN LET ALLO- */
         TM    JCL,B'10000000'                                  01S0533
         BNO   @RF00533                                         01S0533
*     ALLJCLOK=BON;                 /* CATION PROCEED .              */
         OI    ALLJCLOK,B'00010000'                             01S0534
*   ELSE                            /* OTHERWISE ALLOCATION WILL FAIL*/
*     ALLFAIL=BON;                  /* INDICATE LACK OF SUCCESS      */
         B     @RC00533                                         01S0535
@RF00533 OI    ALLFAIL,B'10000000'                              01S0535
*   RETURN;                         /* RETURN TO CALLER              */
@EL00004 DS    0H                                               01S0536
@EF00004 DS    0H                                               01S0536
@ER00004 LM    @14,@12,@SA00004                                 01S0536
         BR    @14                                              01S0536
*   END IGTJH3;                                                 01S0537
         B     @EL00004                                         01S0537
         EJECT
*                                                               01S0538
*/* SS ALLOCATION EXTENDED ESTAE EXIT ROUTINE.  THIS ROUTINE RECEIVES
*   CONTROL FROM AND GIVES UP CONTROL TO THE (E)STAE EXIT ROUTINE
*   IGTUKA.  THE REASON FOR THIS SPECIAL EXTENDED EXIT ROUTINE IS
*   TO HANDLE ERRORS/CONDITIONS WHICH WOULD TERMINATE DYNAMIC   01S0538
*   ALLOCATION UNDER CIRCUMSTANCES WHEN RETRY WOULD NOT BE PER- 01S0538
*   MITTED. (SDWACLUP = BON).                                        */
*                                                               01S0538
*JH0EXR:                                                        01S0538
*   PROC;                           /* EXTENDED ESTAE EXIT ROUTINE   */
JH0EXR   STM   @14,@12,@SA00005                                 01S0538
*   GEN(MODESET EXTKEY=SCHED)       /* RESUME NORMAL KEY             */
*   NOREFS NOSETS;                                              01S0539
         MODESET EXTKEY=SCHED
*   DCL                                                         01S0540
*     RETRY FIXED(08) CONSTANT(04), /* RETURN CODE VALUE             */
*     NORETRY FIXED(08) CONSTANT(00),/* RETURN CODE VALUE            */
*     RCODE FIXED(31);              /* RETURN CODE FROM JH0EXRS      */
*   RFY                                                         01S0541
*     SDWA BASED(SDWAPTR);          /* NEW BASING EXPRESSION FOR SDWA*/
*   RFY                                                         01S0542
*     R1P RSTD;                     /* IT'S A PARMREG                */
*   SDWAPTR=R1P;                    /* SAVE THE POINTER TO THE SDWA  */
         LR    SDWAPTR,R1P                                      01S0543
*   RFY                                                         01S0544
*     R1P UNRSTD;                   /* IT'S NOT A PARMREG            */
*   IF SDWACLUP=BON THEN            /* IF CLEAN UP ONLY IS PERMITTED */
         TM    SDWACLUP(SDWAPTR),B'10000000'                    01S0545
         BNO   @RF00545                                         01S0545
*     DO;                           /* THEN DO                       */
*       ALLERRN2=BON;               /* INDICATE SECOND ESTAE EFFECTV */
         OI    ALLERRN2,B'00000010'                             01S0547
*       APESPTR=ADDR(DAPES2);       /* ADDRESS OF SECOND APES FOR RET*/
         LA    @10,DAPES2                                       01S0548
         ST    @10,APESPTR                                      01S0548
*       RFY                                                     01S0549
*         R5P RSTD;                 /* WILL USE FOR APES TEMPORARILY */
*       RFY                                                     01S0550
*         APDS BASED(R5P);          /* PROVIDE BASING EXPRESSION     */
*       R5P=APESPTR;                /* INIT THE NEW POINTER          */
         LR    R5P,@10                                          01S0551
*                                                               01S0552
*       /*************************************************************/
*       /*                                                           */
*       /* BUILD ESTAE/FRR EXIT PARAMETER LIST                       */
*       /*                                                           */
*       /*************************************************************/
*                                                               01S0552
*       GEN REFS(ESTAEL,ESTAEL2,ESTAEL2L);                      01S0552
*                                            /*
         MVC   ESTAEL(L'ESTAEL2L),ESTAEL2 MOVE LIST TO THE DYN AREA
*       RFY                                                     01S0553
*        (R0P,                                                  01S0553
*         R1F,                                                  01S0553
*         R14P,                                                 01S0553
*         R15F) RSTD;               /* INITIALIZE APES BLOCK         */
*       R0P=ADDR(APES);             /* TO ZEROS                      */
         L     R0P,APESPTR                                      01S0554
*       R1F=LENGTH(APES);           /* USE MVCL TO                   */
         LA    R1F,648                                          01S0555
*       R15F=0;                     /* CLEAR, SINCE FIELD            */
         SLR   R15F,R15F                                        01S0556
*       MVCL(R0P,R14P);             /* MORE THAN 216 BYTES LONG      */
         MVCL  R0P,R14P                                         01S0557
*       RFY                                                     01S0558
*        (R0P,                                                  01S0558
*         R1F,                                                  01S0558
*         R14P,                                                 01S0558
*         R15F) UNRSTD;             /* FINISHED WITH MVCL REGS       */
*       APESID=APESIDC;             /* IN-CORE ID                    */
         L     @10,APESPTR                                      01S0559
         MVC   APESID(4,@10),@CC03866                           01S0559
*       APESADDR=ADDR(APES);        /* ESTAE PARM VALUE              */
         ST    @10,APESADDR(,@10)                               01S0560
*       APESAPMV=ADDR(CMBRXZZZ);    /* MESSAGE INDEX TABLE           */
         LA    @09,CMBRXZZZ                                     01S0561
         ST    @09,APESAPMV(,@10)                               01S0561
*       APESMXCD=CERRN99;           /* MAXIMUM APESCODE VALUE        */
         MVI   APESMXCD(@10),X'01'                              01S0562
*       APESFREC=BON;               /* RECORD ON LOGREC              */
*       APESFSDP=BON;               /* SDUMP ON ERROR                */
         OI    APESFREC(@10),B'01100000'                        01S0564
*       APESMOD='IGTJH0  ';         /* MODULE IN CONTROL             */
         MVC   APESMOD(8,@10),@CC03889                          01S0565
*       APESPROC='IGTJH0  ';        /* CSECT IN CONTROL              */
         MVC   APESPROC(8,@10),@CC03889                         01S0566
*       APESFRR=' IGTJHX ';         /* NO FRR ID                     */
         MVC   APESFRR(8,@10),@CC03951                          01S0567
*       APESREGP=ADDR(APESREGZ);    /* DEFAULT REGISTER SAVEAREA     */
         LA    @09,APESREGZ(,@10)                               01S0568
         ST    @09,APESREGP(,@10)                               01S0568
*       STM(R0F,R14F,APESREGZ);     /* SAVE REGISTERS FOR RETRY      */
         STM   R0F,R14F,APESREGZ(@10)                           01S0569
*       APESCODE=CERRN99;           /* 'UNKNOWN' ERROR               */
         MVI   APESCODE(@10),X'01'                              01S0570
*       RFY                                                     01S0571
*         R2P RSTD;                 /* POINTS TO EXIT ROUTINE        */
*       R2P=ADDR(APCVZUKA);         /* (IGTUKA).                     */
*                                                               01S0572
         L     R2P,APCTZUKA(,APCTPTR)                           01S0572
*       /*************************************************************/
*       /*                                                           */
*       /* APESEXRA = 0 FOR THE TIME BEING. WE DON'T WANT TO HAVE AN */
*       /* EXIT ROUTINE RECEIVE CONTROL ANY MORE -- JUST KEEP        */
*       /* RETRYING AS NECESSARY UNTIL DONE.                         */
*       /*                                                           */
*       /*************************************************************/
*                                                               01S0573
*       APESRTRY=ADDR(IGTJHX);      /* PROVIDE (E)STAE RETRY ROUTINE */
         LA    @10,IGTJHX                                       01S0573
         ST    @10,APESRTRY(,@09)                               01S0573
*       GEN REFS(APESADDR,APES,R5P,APSVPTR,ESTAEL,R2P,FLCCVT,PSA,
*           CVTSV60,CVTMAP) SETS(ESTAEL);                       01S0574
*                                   /*
         IGTYSTAE (R2P),           IGTUKA IS EXIT ROUTINE              *
               PARAM=APESADDR-APES(R5P), ADDR OF APES IS PARM LIST     *
               BRANCH=NO,          SVC ENTRY                           *
               MF=(E,ESTAEL)       EXECUTE FORM OF THE MACRO
*       RFY                                                     01S0575
*        (R2P,                                                  01S0575
*         R5P) UNRSTD;              /* DONE WITH EXIT PTR & TEMP APES*/
*       RFY                                                     01S0576
*         APES BASED(APESPTR);      /* REVERT TO USUAL BASING EXPRESS*/
*       CALL IGTJHX;                /* INVOKE RETRY ROUTINE          */
         BAL   @14,IGTJHX                                       01S0577
*       ALLERRN2=BOFF;              /* IGTJHX CANCELLED SECOND ESTAE */
         NI    ALLERRN2,B'11111101'                             01S0578
*       RCODE=NORETRY;              /* INDICATE NO RETRY TO BE PERFMD*/
         SLR   RCODE,RCODE                                      01S0579
*     END;                          /* DO IF CLEANUP ONLY OR BAD SDWA*/
*   ELSE                            /* RETRY WILL BE ALLOWED IF NECES*/
*     RCODE=RETRY;                  /* AND IT WILL BE NECESSARY      */
         B     @RC00545                                         01S0581
@RF00545 LA    RCODE,4                                          01S0581
*   GEN(MODESET EXTKEY=ZERO)        /* RESUME IGTUKA'S KEY           */
*   NOREFS NOSETS;                                              01S0582
@RC00545 DS    0H                                               01S0582
         MODESET EXTKEY=ZERO
*   RETURN CODE(RCODE);             /* GO BACK TO IGTUKA             */
         LR    @15,RCODE                                        01S0583
         L     @14,@SA00005                                     01S0583
         LM    @00,@12,@SA00005+8                               01S0583
         BR    @14                                              01S0583
*JH0EXR2:                                                       01S0584
*   PROC;                           /* THIS PROC WILL GET CONTROL
*                                      GIVE IT UP AGAIN IMMEDIATELY  */
JH0EXR2  STM   @14,@12,12(@13)                                  01S0584
*   RCODE=RETRY;                    /* INDICATE RETRY IS REQUESTED   */
         LA    RCODE,4                                          01S0585
*   RETURN CODE(RCODE);             /* RETURN TO UKA                 */
         LR    @15,RCODE                                        01S0586
         L     @14,12(,@13)                                     01S0586
         LM    @00,@12,20(@13)                                  01S0586
         BR    @14                                              01S0586
*   END JH0EXR2;                    /* END OF PROCEDURE              */
*   END JH0EXR;                     /* END OF PROCEDURE              */
         EJECT
*                                                               01S0589
*/* THIS IS THE (E)STAE RETRY ROUTINE FOR 3838 SUBSYSTEM ALLOCATION
*   IF EFFECTIVELY HAS A NUMBER OF POINTS AT WHICH IT MAY BE ENTERED,
*   AND, UPON ENTRY TO ONE POINT, THE CODE FIRST INDICATES VIA  01S0589
*   APESRTRY THAT THE NEXT SEGMENT IS THE RETRY ROUTINE WHICH IS TO
*   RECEIVE CONTROL AFTER A FAILURE IN THE CURRENT SEGMENT, IF THAT
*   SHOULD OCCUR.                                                    */
*                                                               01S0589
*IGTJHX:                                                        01S0589
*   PROC;                           /* PROCEDURE FOR CLEANUP OF ALLOC*/
IGTJHX   STM   @14,@12,@SA00007                                 01S0589
*                                                               01S0590
*/* THIS SEGMENT FREES ANY 3838 SUBSYEM RESOURCES ALLOCATED DURING
*   SUBSYSTEM ALLOCATION.                                            */
*                                                               01S0590
*   DO;                             /* BEGIN CODE SEGMENT            */
*/*   SEGMENT ATTEMPTS TO PREVENT PLS FROM PRESUMING TO KNOW WHAT IS
*     IN THE VARIOUS REGISTERS ACROSS SEGMENTS OF THE RETRY ROUTINE. */
*                                                               01S0591
*     RFY                                                       01S0591
*      (R0RSTD,                                                 01S0591
*       R1RSTD,                                                 01S0591
*       R2RSTD,                                                 01S0591
*       R3RSTD,                                                 01S0591
*       R4RSTD,                                                 01S0591
*       R5RSTD,                                                 01S0591
*       R6RSTD,                                                 01S0591
*       R7RSTD,                                                 01S0591
*       R8RSTD,                                                 01S0591
*       R9RSTD,                                                 01S0591
*       R10RSTD,                                                01S0591
*       R11RSTD,                                                01S0591
*       R12RSTD,                                                01S0591
*       R13RSTD,                                                01S0591
*       R14RSTD,                                                01S0591
*       R15RSTD) RSTD;              /* PREVENT PLS FROM ASSUMING C(R)*/
*     RFY                                                       01S0592
*      (R0RSTD,                                                 01S0592
*       R1RSTD,                                                 01S0592
*       R2RSTD,                                                 01S0592
*       R3RSTD,                                                 01S0592
*       R4RSTD,                                                 01S0592
*       R5RSTD,                                                 01S0592
*       R6RSTD,                                                 01S0592
*       R7RSTD,                                                 01S0592
*       R8RSTD,                                                 01S0592
*       R9RSTD,                                                 01S0592
*       R10RSTD,                                                01S0592
*       R11RSTD,                                                01S0592
*       R12RSTD,                                                01S0592
*       R13RSTD,                                                01S0592
*       R14RSTD,                                                01S0592
*       R15RSTD) UNRSTD;            /* PREVENT PLS FROM ASSUMING C(R)*/
*   END;                            /* END CODE SEGMENT              */
*   APESRTRY=ADDR(JHXDQAPD);        /* FIRST POINT TO NEXT SEGMENT   */
         L     @10,APESPTR                                      01S0594
         L     @09,APESREGP(,@10)                               01S0594
         LA    @05,JHXDQAPD                                     01S0594
         ST    @05,APESRTRY(,@09)                               01S0594
*   DO;                             /* ERROR RECOVERY COMPLETE       */
*     APESFPRV=BOFF;                /* RESET RECURSION FLAG.         */
         NI    APESFPRV(@10),B'10111111'                        01S0596
*     APESCODE=CERRN99;             /* RESET ERROR CODE              */
         MVI   APESCODE(@10),X'01'                              01S0597
*     APESFDMP=BON;                 /* RESET DUMP/LOG FLAGS          */
*     APESFREC=BON;                 /* TO THEIR NORMAL VALUES        */
*     APESFSDP=BON;                 /* (ALL ON)                      */
         OI    APESFDMP(@10),B'11100000'                        01S0600
*   END;                            /* ALL INDICATORS RESET          */
*   IF ALLRES=BON THEN              /* IF 3838 RESOURCES HAVE BEEN   */
         TM    ALLRES,B'00001000'                               01S0602
         BNO   @RF00602                                         01S0602
*     IF ALLAPUB=BON THEN           /* ALLOCATED AND WE OWN APUB     */
         TM    ALLAPUB,B'00100000'                              01S0603
         BNO   @RF00603                                         01S0603
*       CALL APCVZJHO;              /* THEN UNALLOCATE               */
         L     @15,APCTZJHO(,APCTPTR)                           01S0604
         BALR  @14,@15                                          01S0604
*     ELSE                          /* BUT WE DON'T OWN APUB         */
*       DO;                         /* SO WE MUST GET IT BEFORE UNALL*/
         B     @RC00603                                         01S0605
@RF00603 DS    0H                                               01S0606
*         CALL GETAPUB;             /* GET THE APUB RESOURCE         */
         BAL   @14,GETAPUB                                      01S0606
*         CALL APCVZJHO;            /* NOW UNALLOCATE THE RESOURCES  */
         L     @15,APCTZJHO(,APCTPTR)                           01S0607
         BALR  @14,@15                                          01S0607
*       END;                        /* DO IF APUB NOT OWNED          */
*   DO;                             /* BEGIN CODE SEGMENT            */
@RC00603 DS    0H                                               01S0609
@RF00602 DS    0H                                               01S0610
*/*   SEGMENT ATTEMPTS TO PREVENT PLS FROM PRESUMING TO KNOW WHAT IS
*     IN THE VARIOUS REGISTERS ACROSS SEGMENTS OF THE RETRY ROUTINE. */
*                                                               01S0610
*     RFY                                                       01S0610
*      (R0RSTD,                                                 01S0610
*       R1RSTD,                                                 01S0610
*       R2RSTD,                                                 01S0610
*       R3RSTD,                                                 01S0610
*       R4RSTD,                                                 01S0610
*       R5RSTD,                                                 01S0610
*       R6RSTD,                                                 01S0610
*       R7RSTD,                                                 01S0610
*       R8RSTD,                                                 01S0610
*       R9RSTD,                                                 01S0610
*       R10RSTD,                                                01S0610
*       R11RSTD,                                                01S0610
*       R12RSTD,                                                01S0610
*       R13RSTD,                                                01S0610
*       R14RSTD,                                                01S0610
*       R15RSTD) RSTD;              /* PREVENT PLS FROM ASSUMING C(R)*/
*     RFY                                                       01S0611
*      (R0RSTD,                                                 01S0611
*       R1RSTD,                                                 01S0611
*       R2RSTD,                                                 01S0611
*       R3RSTD,                                                 01S0611
*       R4RSTD,                                                 01S0611
*       R5RSTD,                                                 01S0611
*       R6RSTD,                                                 01S0611
*       R7RSTD,                                                 01S0611
*       R8RSTD,                                                 01S0611
*       R9RSTD,                                                 01S0611
*       R10RSTD,                                                01S0611
*       R11RSTD,                                                01S0611
*       R12RSTD,                                                01S0611
*       R13RSTD,                                                01S0611
*       R14RSTD,                                                01S0611
*       R15RSTD) UNRSTD;            /* PREVENT PLS FROM ASSUMING C(R)*/
*   END;                            /* END CODE SEGMENT              */
*/* THE NEXT SEGMENT REMOVES APDS(S) FROM THE APDS QUEUE ANCHORED IN
*   THE APCT AT APCTAPDS AND APCTDSAP.                               */
*                                                               01S0613
*JHXDQAPD:                                                      01S0613
*   ;                                                           01S0613
JHXDQAPD DS    0H                                               01S0614
*   APESRTRY=ADDR(JHXQFIX);         /* FIRST POINT TO NEXT SEGMENT   */
         L     @10,APESPTR                                      01S0614
         L     @09,APESREGP(,@10)                               01S0614
         LA    @05,JHXQFIX                                      01S0614
         ST    @05,APESRTRY(,@09)                               01S0614
*   DO;                             /* ERROR RECOVERY COMPLETE       */
*     APESFPRV=BOFF;                /* RESET RECURSION FLAG.         */
         NI    APESFPRV(@10),B'10111111'                        01S0616
*     APESCODE=CERRN99;             /* RESET ERROR CODE              */
         MVI   APESCODE(@10),X'01'                              01S0617
*     APESFDMP=BON;                 /* RESET DUMP/LOG FLAGS          */
*     APESFREC=BON;                 /* TO THEIR NORMAL VALUES        */
*     APESFSDP=BON;                 /* (ALL ON)                      */
         OI    APESFDMP(@10),B'11100000'                        01S0620
*   END;                            /* ALL INDICATORS RESET          */
*   IF ALLQUE=BON THEN              /* IF APDS QUEUE IS INTACT AS FAR*/
         TM    ALLQUE,B'01000000'                               01S0622
         BNO   @RF00622                                         01S0622
*     IF ALLAPUB=BON THEN           /* AS WE KNOW AND WE OWN APUB    */
         TM    ALLAPUB,B'00100000'                              01S0623
         BNO   @RF00623                                         01S0623
*       CALL DEQAPDS;               /* THEN DEQUEUE THE APDS(S)      */
         BAL   @14,DEQAPDS                                      01S0624
*     ELSE                          /* DON'T HAVE APUB               */
*       DO;                         /* SO WE MUST GET IT BEFORE DEQUE*/
         B     @RC00623                                         01S0625
@RF00623 DS    0H                                               01S0626
*         CALL GETAPUB;             /* GET THE APUB RESOURCE         */
         BAL   @14,GETAPUB                                      01S0626
*         CALL DEQAPDS;             /* NOW UNALLOCATE THE RESOURCES  */
         BAL   @14,DEQAPDS                                      01S0627
*       END;                        /* DO IF APUB NOT OWNED          */
*   ELSE                            /* APDS QUEUE MAY BE IN DISREPAIR*/
*     DO;                           /* EITHER NO APDS(S) ON QUEUE OR */
         B     @RC00622                                         01S0629
@RF00622 DS    0H                                               01S0630
*       IF ALLQADD=BON THEN         /* WE WERE ADDING THEM ...       */
         TM    ALLQADD,B'00100000'                              01S0630
         BNO   @RF00630                                         01S0630
*         CALL FIXQUEUE;            /* FIX THE QUEUE                 */
         BAL   @14,FIXQUEUE                                     01S0631
*       ELSE                        /* ...OR ...                     */
*         IF ALLQRMV=BON THEN       /* WE WERE REMOVING THEM         */
         B     @RC00630                                         01S0632
@RF00630 TM    ALLQRMV,B'00010000'                              01S0632
         BNO   @RF00632                                         01S0632
*           CALL FIXQUEUE;          /* FIX THE QUEUE                 */
         BAL   @14,FIXQUEUE                                     01S0633
*     END;                          /* DO IF APDS QUEUE MAY BE BAD   */
*   GOTO JHXDEQRS;                  /* BRANCH AROUND FINAL QUEUE FIX */
         B     JHXDEQRS                                         01S0635
*   DO;                             /* BEGIN CODE SEGMENT            */
*/*   SEGMENT ATTEMPTS TO PREVENT PLS FROM PRESUMING TO KNOW WHAT IS
*     IN THE VARIOUS REGISTERS ACROSS SEGMENTS OF THE RETRY ROUTINE. */
*                                                               01S0637
*     RFY                                                       01S0637
*      (R0RSTD,                                                 01S0637
*       R1RSTD,                                                 01S0637
*       R2RSTD,                                                 01S0637
*       R3RSTD,                                                 01S0637
*       R4RSTD,                                                 01S0637
*       R5RSTD,                                                 01S0637
*       R6RSTD,                                                 01S0637
*       R7RSTD,                                                 01S0637
*       R8RSTD,                                                 01S0637
*       R9RSTD,                                                 01S0637
*       R10RSTD,                                                01S0637
*       R11RSTD,                                                01S0637
*       R12RSTD,                                                01S0637
*       R13RSTD,                                                01S0637
*       R14RSTD,                                                01S0637
*       R15RSTD) RSTD;              /* PREVENT PLS FROM ASSUMING C(R)*/
*     RFY                                                       01S0638
*      (R0RSTD,                                                 01S0638
*       R1RSTD,                                                 01S0638
*       R2RSTD,                                                 01S0638
*       R3RSTD,                                                 01S0638
*       R4RSTD,                                                 01S0638
*       R5RSTD,                                                 01S0638
*       R6RSTD,                                                 01S0638
*       R7RSTD,                                                 01S0638
*       R8RSTD,                                                 01S0638
*       R9RSTD,                                                 01S0638
*       R10RSTD,                                                01S0638
*       R11RSTD,                                                01S0638
*       R12RSTD,                                                01S0638
*       R13RSTD,                                                01S0638
*       R14RSTD,                                                01S0638
*       R15RSTD) UNRSTD;            /* PREVENT PLS FROM ASSUMING C(R)*/
*   END;                            /* END CODE SEGMENT              */
*                                                               01S0640
*/* THIS SEGMENT IS ENTERED ONLY IF THE PREVIOUS SEGMENT IS NOT 01S0640
*   SUCCESSFUL IN ITS ATTEMPT TO CLEAN UP THE APDS QUEUE.  THIS 01S0640
*   SEGMENT ZEROS OUT THE APCTAPDS AND APCTDSAP ANCHOR FIELDS IN
*   THE APCT.                                                        */
*                                                               01S0640
*JHXQFIX:                                                       01S0640
*   ;                               /* FIX THE APDS QUEUE            */
JHXQFIX  DS    0H                                               01S0641
*   APESRTRY=ADDR(JHXDEQRS);        /* FIRST POINT TO NEXT SEGMENT   */
         L     @10,APESPTR                                      01S0641
         L     @09,APESREGP(,@10)                               01S0641
         LA    @05,JHXDEQRS                                     01S0641
         ST    @05,APESRTRY(,@09)                               01S0641
*   DO;                             /* ERROR RECOVERY COMPLETE       */
*     APESFPRV=BOFF;                /* RESET RECURSION FLAG.         */
         NI    APESFPRV(@10),B'10111111'                        01S0643
*     APESCODE=CERRN99;             /* RESET ERROR CODE              */
         MVI   APESCODE(@10),X'01'                              01S0644
*     APESFDMP=BON;                 /* RESET DUMP/LOG FLAGS          */
*     APESFREC=BON;                 /* TO THEIR NORMAL VALUES        */
*     APESFSDP=BON;                 /* (ALL ON)                      */
         OI    APESFDMP(@10),B'11100000'                        01S0647
*   END;                            /* ALL INDICATORS RESET          */
*   APCTDSAP='';                    /* CLEAR POINTER TO LAST         */
         SLR   @10,@10                                          01S0649
         ST    @10,APCTDSAP(,APCTPTR)                           01S0649
*   APCTAPDS='';                    /* CLEAR POINTER TO FIRST        */
         ST    @10,APCTAPDS(,APCTPTR)                           01S0650
*   DO;                             /* BEGIN CODE SEGMENT            */
*/*   SEGMENT ATTEMPTS TO PREVENT PLS FROM PRESUMING TO KNOW WHAT IS
*     IN THE VARIOUS REGISTERS ACROSS SEGMENTS OF THE RETRY ROUTINE. */
*                                                               01S0652
*     RFY                                                       01S0652
*      (R0RSTD,                                                 01S0652
*       R1RSTD,                                                 01S0652
*       R2RSTD,                                                 01S0652
*       R3RSTD,                                                 01S0652
*       R4RSTD,                                                 01S0652
*       R5RSTD,                                                 01S0652
*       R6RSTD,                                                 01S0652
*       R7RSTD,                                                 01S0652
*       R8RSTD,                                                 01S0652
*       R9RSTD,                                                 01S0652
*       R10RSTD,                                                01S0652
*       R11RSTD,                                                01S0652
*       R12RSTD,                                                01S0652
*       R13RSTD,                                                01S0652
*       R14RSTD,                                                01S0652
*       R15RSTD) RSTD;              /* PREVENT PLS FROM ASSUMING C(R)*/
*     RFY                                                       01S0653
*      (R0RSTD,                                                 01S0653
*       R1RSTD,                                                 01S0653
*       R2RSTD,                                                 01S0653
*       R3RSTD,                                                 01S0653
*       R4RSTD,                                                 01S0653
*       R5RSTD,                                                 01S0653
*       R6RSTD,                                                 01S0653
*       R7RSTD,                                                 01S0653
*       R8RSTD,                                                 01S0653
*       R9RSTD,                                                 01S0653
*       R10RSTD,                                                01S0653
*       R11RSTD,                                                01S0653
*       R12RSTD,                                                01S0653
*       R13RSTD,                                                01S0653
*       R14RSTD,                                                01S0653
*       R15RSTD) UNRSTD;            /* PREVENT PLS FROM ASSUMING C(R)*/
*   END;                            /* END CODE SEGMENT              */
*                                                               01S0655
*/* THIS SEGMENT PERFORMS A DEQ FOR ALL THE RESOURCES THAT MIGHT BE
*   OWNED BY THE CURRENT TCB EXCEPT FOR SYSZ.SUBSYSNAME/ALLOCATE.    */
*                                                               01S0655
*JHXDEQRS:                                                      01S0655
*   ;                               /* DEQ THE ENQ RESOURCES         */
JHXDEQRS DS    0H                                               01S0656
*   APESRTRY=ADDR(JHXDEQAL);        /* FIRST POINT TO NEXT SEGMENT   */
         L     @10,APESPTR                                      01S0656
         L     @09,APESREGP(,@10)                               01S0656
         LA    @05,JHXDEQAL                                     01S0656
         ST    @05,APESRTRY(,@09)                               01S0656
*   DO;                             /* ERROR RECOVERY COMPLETE       */
*     APESFPRV=BOFF;                /* RESET RECURSION FLAG.         */
         NI    APESFPRV(@10),B'10111111'                        01S0658
*     APESCODE=CERRN99;             /* RESET ERROR CODE              */
         MVI   APESCODE(@10),X'01'                              01S0659
*     APESFDMP=BON;                 /* RESET DUMP/LOG FLAGS          */
*     APESFREC=BON;                 /* TO THEIR NORMAL VALUES        */
*     APESFSDP=BON;                 /* (ALL ON)                      */
         OI    APESFDMP(@10),B'11100000'                        01S0662
*   END;                            /* ALL INDICATORS RESET          */
*   DO;                             /* SEGMENT ISSUES DEQ RET=HAVE   */
*     GEN REFS(APCTENQM,DEQLISTA,DQLISTAL,STARTUP,ALLOWAIT,APUBENQR,
*         LOCKOUT) SETS(DYNDEQLA);                              01S0665
*                                   /*
         MVC   DYNDEQLA(L'DQLISTAL),DEQLISTA INIT DEQ DYNAMIC LIST AREA
         DEQ   (APCTENQM-APCT(,APCTPTR),STARTUP,7,SYSTEM,              *
               APCTENQM-APCT(,APCTPTR),ALLOWAIT,8,SYSTEM,              *
               APCTENQM-APCT(,APCTPTR),APUBENQR,4,SYSTEM,              *
               APCTENQM-APCT(,APCTPTR),LOCKOUT,7,SYSTEM),              *
               RET=HAVE,               DID NOT DESIGN PROGRAM          *
               MF=(E,DYNDEQLA)
*   END;                            /* PROGRAM SEGMENT               */
*   DO;                             /* BEGIN CODE SEGMENT            */
*/*   SEGMENT ATTEMPTS TO PREVENT PLS FROM PRESUMING TO KNOW WHAT IS
*     IN THE VARIOUS REGISTERS ACROSS SEGMENTS OF THE RETRY ROUTINE. */
*                                                               01S0668
*     RFY                                                       01S0668
*      (R0RSTD,                                                 01S0668
*       R1RSTD,                                                 01S0668
*       R2RSTD,                                                 01S0668
*       R3RSTD,                                                 01S0668
*       R4RSTD,                                                 01S0668
*       R5RSTD,                                                 01S0668
*       R6RSTD,                                                 01S0668
*       R7RSTD,                                                 01S0668
*       R8RSTD,                                                 01S0668
*       R9RSTD,                                                 01S0668
*       R10RSTD,                                                01S0668
*       R11RSTD,                                                01S0668
*       R12RSTD,                                                01S0668
*       R13RSTD,                                                01S0668
*       R14RSTD,                                                01S0668
*       R15RSTD) RSTD;              /* PREVENT PLS FROM ASSUMING C(R)*/
*     RFY                                                       01S0669
*      (R0RSTD,                                                 01S0669
*       R1RSTD,                                                 01S0669
*       R2RSTD,                                                 01S0669
*       R3RSTD,                                                 01S0669
*       R4RSTD,                                                 01S0669
*       R5RSTD,                                                 01S0669
*       R6RSTD,                                                 01S0669
*       R7RSTD,                                                 01S0669
*       R8RSTD,                                                 01S0669
*       R9RSTD,                                                 01S0669
*       R10RSTD,                                                01S0669
*       R11RSTD,                                                01S0669
*       R12RSTD,                                                01S0669
*       R13RSTD,                                                01S0669
*       R14RSTD,                                                01S0669
*       R15RSTD) UNRSTD;            /* PREVENT PLS FROM ASSUMING C(R)*/
*   END;                            /* END CODE SEGMENT              */
*                                                               01S0671
*/* THIS SEGMENT ISSUES A DEQ FOR SYSZ.SUBSYSNAME/ALLOCATE, DIRECTED
*   TOWARD THE STC TCB.                                              */
*                                                               01S0671
*JHXDEQAL:                                                      01S0671
*   ;                               /* DEQ "SYSZ×SUBSYSNAME"/ALLOCATE*/
JHXDEQAL DS    0H                                               01S0672
*   APESRTRY=ADDR(JHXFREAP);        /* FIRST POINT TO NEXT SEGMENT   */
         L     @10,APESPTR                                      01S0672
         L     @09,APESREGP(,@10)                               01S0672
         LA    @05,JHXFREAP                                     01S0672
         ST    @05,APESRTRY(,@09)                               01S0672
*   DO;                             /* ERROR RECOVERY COMPLETE       */
*     APESFPRV=BOFF;                /* RESET RECURSION FLAG.         */
         NI    APESFPRV(@10),B'10111111'                        01S0674
*     APESCODE=CERRN99;             /* RESET ERROR CODE              */
         MVI   APESCODE(@10),X'01'                              01S0675
*     APESFDMP=BON;                 /* RESET DUMP/LOG FLAGS          */
*     APESFREC=BON;                 /* TO THEIR NORMAL VALUES        */
*     APESFSDP=BON;                 /* (ALL ON)                      */
         OI    APESFDMP(@10),B'11100000'                        01S0678
*   END;                            /* ALL INDICATORS RESET          */
*   IF ALLALL=BON&ALLENQRC^=8 THEN  /* IF ALLOCATE IS OWNED THEN     */
         TM    ALLALL,B'01000000'                               01S0680
         BNO   @RF00680                                         01S0680
         CLI   ALLENQRC,8                                       01S0680
         BE    @RF00680                                         01S0680
*     DO;                                                       01S0681
*       GEN REFS(APCTENQM,ALLOCATE,INITTCB,DEQLISTT,DQLISTTL,ALLCWA,
*           ALLCWAPT) SETS(DYNDEQLA);                           01S0682
*                                          /*
         MVC   DYNDEQLA(L'DQLISTTL),DEQLISTT INIT DEQ DYNAMIC LIST AREA
         DEQ   (APCTENQM-APCT(,APCTPTR),ALLOCATE,8,SYSTEM),            *
               TCB=INITTCB-ALLCWA(ALLCWAPT),MF=(E,DYNDEQLA)
*       ALLALL=BOFF;                /* NO LONGER CONTROL RESOURCE    */
         NI    ALLALL,B'10111111'                               01S0683
*     END;                                                      01S0684
*   DO;                             /* BEGIN CODE SEGMENT            */
@RF00680 DS    0H                                               01S0686
*/*   SEGMENT ATTEMPTS TO PREVENT PLS FROM PRESUMING TO KNOW WHAT IS
*     IN THE VARIOUS REGISTERS ACROSS SEGMENTS OF THE RETRY ROUTINE. */
*                                                               01S0686
*     RFY                                                       01S0686
*      (R0RSTD,                                                 01S0686
*       R1RSTD,                                                 01S0686
*       R2RSTD,                                                 01S0686
*       R3RSTD,                                                 01S0686
*       R4RSTD,                                                 01S0686
*       R5RSTD,                                                 01S0686
*       R6RSTD,                                                 01S0686
*       R7RSTD,                                                 01S0686
*       R8RSTD,                                                 01S0686
*       R9RSTD,                                                 01S0686
*       R10RSTD,                                                01S0686
*       R11RSTD,                                                01S0686
*       R12RSTD,                                                01S0686
*       R13RSTD,                                                01S0686
*       R14RSTD,                                                01S0686
*       R15RSTD) RSTD;              /* PREVENT PLS FROM ASSUMING C(R)*/
*     RFY                                                       01S0687
*      (R0RSTD,                                                 01S0687
*       R1RSTD,                                                 01S0687
*       R2RSTD,                                                 01S0687
*       R3RSTD,                                                 01S0687
*       R4RSTD,                                                 01S0687
*       R5RSTD,                                                 01S0687
*       R6RSTD,                                                 01S0687
*       R7RSTD,                                                 01S0687
*       R8RSTD,                                                 01S0687
*       R9RSTD,                                                 01S0687
*       R10RSTD,                                                01S0687
*       R11RSTD,                                                01S0687
*       R12RSTD,                                                01S0687
*       R13RSTD,                                                01S0687
*       R14RSTD,                                                01S0687
*       R15RSTD) UNRSTD;            /* PREVENT PLS FROM ASSUMING C(R)*/
*   END;                            /* END CODE SEGMENT              */
*                                                               01S0689
*/* THIS SEGMENT FREES STORAGE WHICH WAS AQUIRED FOR THE APDS(S)     */
*                                                               01S0689
*JHXFREAP:                                                      01S0689
*   ;                               /* FREE STORAGE ACQUIRED FOR APDS*/
JHXFREAP DS    0H                                               01S0690
*   APESRTRY=ADDR(JHXDOWTO);        /* FIRST POINT TO NEXT SEGMENT   */
         L     @10,APESPTR                                      01S0690
         L     @09,APESREGP(,@10)                               01S0690
         LA    @05,JHXDOWTO                                     01S0690
         ST    @05,APESRTRY(,@09)                               01S0690
*   DO;                             /* ERROR RECOVERY COMPLETE       */
*     APESFPRV=BOFF;                /* RESET RECURSION FLAG.         */
         NI    APESFPRV(@10),B'10111111'                        01S0692
*     APESCODE=CERRN99;             /* RESET ERROR CODE              */
         MVI   APESCODE(@10),X'01'                              01S0693
*     APESFDMP=BON;                 /* RESET DUMP/LOG FLAGS          */
*     APESFREC=BON;                 /* TO THEIR NORMAL VALUES        */
*     APESFSDP=BON;                 /* (ALL ON)                      */
         OI    APESFDMP(@10),B'11100000'                        01S0696
*   END;                            /* ALL INDICATORS RESET          */
*   IF ALLAPDS=BON THEN             /* IF THE STORAGE WAS AQUIRED    */
         TM    ALLAPDS,B'00000001'                              01S0698
         BNO   @RF00698                                         01S0698
*     DO;                           /* FREE STORAGE OBTAINED FOR APDS*/
*       APGFSFRE=BON;               /* SIGNAL FREEMAIN               */
         LA    @10,DAPGF                                        01S0700
         OI    APGFSFRE(@10),B'00000001'                        01S0700
*       RFY                                                     01S0701
*         R1P RSTD;                 /* INPUT POINTER                 */
*       R1P=ADDR(APGF);             /* POINT TO PARM LIST            */
         LR    R1P,@10                                          01S0702
*       CALL APCVZUAG;              /* FREE STORAGE - COND           */
         L     @15,APCTZUAG(,APCTPTR)                           01S0703
         BALR  @14,@15                                          01S0703
*       RFY                                                     01S0704
*         R1P UNRSTD;               /* STORAGE IS RETURNED           */
*     END;                                                      01S0705
*   DO;                             /* BEGIN CODE SEGMENT            */
@RF00698 DS    0H                                               01S0707
*/*   SEGMENT ATTEMPTS TO PREVENT PLS FROM PRESUMING TO KNOW WHAT IS
*     IN THE VARIOUS REGISTERS ACROSS SEGMENTS OF THE RETRY ROUTINE. */
*                                                               01S0707
*     RFY                                                       01S0707
*      (R0RSTD,                                                 01S0707
*       R1RSTD,                                                 01S0707
*       R2RSTD,                                                 01S0707
*       R3RSTD,                                                 01S0707
*       R4RSTD,                                                 01S0707
*       R5RSTD,                                                 01S0707
*       R6RSTD,                                                 01S0707
*       R7RSTD,                                                 01S0707
*       R8RSTD,                                                 01S0707
*       R9RSTD,                                                 01S0707
*       R10RSTD,                                                01S0707
*       R11RSTD,                                                01S0707
*       R12RSTD,                                                01S0707
*       R13RSTD,                                                01S0707
*       R14RSTD,                                                01S0707
*       R15RSTD) RSTD;              /* PREVENT PLS FROM ASSUMING C(R)*/
*     RFY                                                       01S0708
*      (R0RSTD,                                                 01S0708
*       R1RSTD,                                                 01S0708
*       R2RSTD,                                                 01S0708
*       R3RSTD,                                                 01S0708
*       R4RSTD,                                                 01S0708
*       R5RSTD,                                                 01S0708
*       R6RSTD,                                                 01S0708
*       R7RSTD,                                                 01S0708
*       R8RSTD,                                                 01S0708
*       R9RSTD,                                                 01S0708
*       R10RSTD,                                                01S0708
*       R11RSTD,                                                01S0708
*       R12RSTD,                                                01S0708
*       R13RSTD,                                                01S0708
*       R14RSTD,                                                01S0708
*       R15RSTD) UNRSTD;            /* PREVENT PLS FROM ASSUMING C(R)*/
*   END;                            /* END CODE SEGMENT              */
*                                                               01S0710
*/* THIS SEGMENT COMPLETES ANY PARTIALLY ISSUED MULTILINE WTO        */
*                                                               01S0710
*JHXDOWTO:                                                      01S0710
*   ;                               /* CANCEL LAST ESTAE             */
JHXDOWTO DS    0H                                               01S0711
*   APESRTRY=ADDR(JHXCANES);        /* FIRST POINT TO NEXT SEGMENT   */
         L     @10,APESPTR                                      01S0711
         L     @09,APESREGP(,@10)                               01S0711
         LA    @05,JHXCANES                                     01S0711
         ST    @05,APESRTRY(,@09)                               01S0711
*   DO;                             /* ERROR RECOVERY COMPLETE       */
*     APESFPRV=BOFF;                /* RESET RECURSION FLAG.         */
         NI    APESFPRV(@10),B'10111111'                        01S0713
*     APESCODE=CERRN99;             /* RESET ERROR CODE              */
         MVI   APESCODE(@10),X'01'                              01S0714
*     APESFDMP=BON;                 /* RESET DUMP/LOG FLAGS          */
*     APESFREC=BON;                 /* TO THEIR NORMAL VALUES        */
*     APESFSDP=BON;                 /* (ALL ON)                      */
         OI    APESFDMP(@10),B'11100000'                        01S0717
*   END;                            /* ALL INDICATORS RESET          */
*   IF ALLMLWTO=BON THEN            /* IF MLWTO WAS STARTED & NOT
*                                      COMPLETED, DO IT NOW          */
         TM    ALLMLWTO,B'00000100'                             01S0719
         BNO   @RF00719                                         01S0719
*     DO;                           /* DO FINAL WTO TYPE "E"         */
*       RFY                                                     01S0721
*         R0F RSTD;                 /* NEED REG FOR MSG ID           */
*       R0F=ALLMSGID;               /* PROVIDE IT TO WTO             */
         L     R0F,ALLMSGID                                     01S0722
*       GEN REFS(WTOL1,WTOL1L) SETS(WTOL);                      01S0723
*                                   /*
         MVC   WTOL(L'WTOL1L),WTOL1 INITIALIZE WTO DYNAMIC AREA
         WTO   MF=(E,WTOL)         WRITE FINAL SEGMENT
*       ALLMLWTO=BOFF;              /* INDICATE MLWTO NO LONGER IN
*                                      PROCESS OF BEING COMPLETED    */
         NI    ALLMLWTO,B'11111011'                             01S0724
*       RFY                                                     01S0725
*         R0F UNRSTD;               /* NO LONGER NEED IT             */
*     END;                          /* OF FINAL WRITE SEGMENT        */
*                                                               01S0727
*/* THIS SEGMENT CANCELS THE LAST ESTAE ISSUED FOR SUBSYS ALLOCATION */
*                                                               01S0727
*JHXCANES:                                                      01S0727
*   ;                               /* CANCEL LAST ESTAE             */
@RF00719 DS    0H                                               01S0727
JHXCANES DS    0H                                               01S0728
*   APESRTRY=ADDR(JHXRET);          /* FIRST POINT TO NEXT SEGMENT   */
         L     @10,APESPTR                                      01S0728
         L     @09,APESREGP(,@10)                               01S0728
         LA    @05,JHXRET                                       01S0728
         ST    @05,APESRTRY(,@09)                               01S0728
*   DO;                             /* ERROR RECOVERY COMPLETE       */
*     APESFPRV=BOFF;                /* RESET RECURSION FLAG.         */
         NI    APESFPRV(@10),B'10111111'                        01S0730
*     APESCODE=CERRN99;             /* RESET ERROR CODE              */
         MVI   APESCODE(@10),X'01'                              01S0731
*     APESFDMP=BON;                 /* RESET DUMP/LOG FLAGS          */
*     APESFREC=BON;                 /* TO THEIR NORMAL VALUES        */
*     APESFSDP=BON;                 /* (ALL ON)                      */
         OI    APESFDMP(@10),B'11100000'                        01S0734
*   END;                            /* ALL INDICATORS RESET          */
*   GEN REFS(ESTAEL);                                           01S0736
*                                   /*
         IGTYSTAE 0,                CANCEL (E)STAE ENVIRONMENT         *
               MF=(E,ESTAEL)        EXECUTE FORM
*   DO;                             /* BEGIN CODE SEGMENT            */
*/*   SEGMENT ATTEMPTS TO PREVENT PLS FROM PRESUMING TO KNOW WHAT IS
*     IN THE VARIOUS REGISTERS ACROSS SEGMENTS OF THE RETRY ROUTINE. */
*                                                               01S0738
*     RFY                                                       01S0738
*      (R0RSTD,                                                 01S0738
*       R1RSTD,                                                 01S0738
*       R2RSTD,                                                 01S0738
*       R3RSTD,                                                 01S0738
*       R4RSTD,                                                 01S0738
*       R5RSTD,                                                 01S0738
*       R6RSTD,                                                 01S0738
*       R7RSTD,                                                 01S0738
*       R8RSTD,                                                 01S0738
*       R9RSTD,                                                 01S0738
*       R10RSTD,                                                01S0738
*       R11RSTD,                                                01S0738
*       R12RSTD,                                                01S0738
*       R13RSTD,                                                01S0738
*       R14RSTD,                                                01S0738
*       R15RSTD) RSTD;              /* PREVENT PLS FROM ASSUMING C(R)*/
*     RFY                                                       01S0739
*      (R0RSTD,                                                 01S0739
*       R1RSTD,                                                 01S0739
*       R2RSTD,                                                 01S0739
*       R3RSTD,                                                 01S0739
*       R4RSTD,                                                 01S0739
*       R5RSTD,                                                 01S0739
*       R6RSTD,                                                 01S0739
*       R7RSTD,                                                 01S0739
*       R8RSTD,                                                 01S0739
*       R9RSTD,                                                 01S0739
*       R10RSTD,                                                01S0739
*       R11RSTD,                                                01S0739
*       R12RSTD,                                                01S0739
*       R13RSTD,                                                01S0739
*       R14RSTD,                                                01S0739
*       R15RSTD) UNRSTD;            /* PREVENT PLS FROM ASSUMING C(R)*/
*   END;                            /* END CODE SEGMENT              */
*                                                               01S0741
*/* THIS SEGMENT RETURNS EITHER TO JH0EXR, THE EXTENDED RECOVERY EXIT
*   OR RETURNS TO THE CALLER, COMMON/DYNAMIC ALLOCATION, DEPENDING ON
*   THE SETTING OF ALLERRN2, WHICH IS ON IF ONLY CLEANUP IS ALLOWED. */
*                                                               01S0741
*JHXRET:                                                        01S0741
*   ;                               /* TARGET FOR ENTRY              */
JHXRET   DS    0H                                               01S0742
*   IF ALLERRN2=BON THEN            /* IF A SUBROUTINE OF JH0EXR     */
         TM    ALLERRN2,B'00000010'                             01S0742
         BO    @RT00742                                         01S0742
*     RETURN;                       /* RETURN TO IT                  */
*   ELSE                            /* MADE IT THROUGH RETRY - RETURN*/
*     DO;                           /* BUT FIRST FILL IN ERROR INFO  */
*                                                               01S0744
*       /*************************************************************/
*       /*                                                           */
*       /* IGTYJHE ERR(486)                                          */
*       /*                                                           */
*       /*************************************************************/
*                                                               01S0745
*       RFY                                                     01S0745
*         R1F RSTD;                                             01S0745
*       R1F=16;                     /* PROVIDE INDEX                 */
         LA    R1F,16                                           01S0746
*       CALL APCVZJHE;              /* SPECIFY ERROR INFORMATION
*                                      PRIOR TO RETURN               */
         L     @15,APCTZJHE(,APCTPTR)                           01S0747
         BALR  @14,@15                                          01S0747
*       RFY                                                     01S0748
*         R1F UNRSTD;               /* DONE WITH REG PROVIDE ERROR
*                                      RETURN INFO                   */
*       GOTO JH0RETN;               /* TO CALLER OF ALLOCATION       */
         B     JH0RETN                                          01S0749
*     END;                          /* SHOULD NEVER GET THIS FAR     */
*   END IGTJHX;                     /* END OF PROGRAM SEGMENT        */
@EL00007 DS    0H                                               01S0751
@EF00007 DS    0H                                               01S0751
@ER00007 LM    @14,@12,@SA00007                                 01S0751
         BR    @14                                              01S0751
         EJECT
*FIXQUEUE:                                                      01S0752
*   PROC;                           /* SEGMENT COMPLETES ADDITION OR
*                                      REMOVAL OF APDS QUEUE ELEMENTS*/
FIXQUEUE STM   @14,@12,12(@13)                                  01S0752
*   IF ALLQADD=BON THEN             /* IF PROCESS OF ADDING TO THE   */
         TM    ALLQADD,B'00100000'                              01S0753
         BNO   @RF00753                                         01S0753
*     DO;                           /* QUEUE WAS INTERUPTED THEN     */
*       IF LASTAPDS^=0 THEN         /* IF THERE IS A NEW LAST THEN   */
         L     @10,LASTAPDS                                     01S0755
         SLR   @09,@09                                          01S0755
         CR    @10,@09                                          01S0755
         BE    @RF00755                                         01S0755
*         LASTAPDS->APDSAPDS=0;     /* IT HAS NO NEXT                */
         ST    @09,APDSAPDS(,@10)                               01S0756
*       APCTAPDS=FIRSAPDS;          /* NEW FIRST IS PREV TO OUR FIRST*/
@RF00755 L     @10,FIRSAPDS                                     01S0757
         ST    @10,APCTAPDS(,APCTPTR)                           01S0757
*       APCTAPDS=LASTAPDS;          /* NEW LAST IS NEXT TO OUR LAST  */
         L     @10,LASTAPDS                                     01S0758
         ST    @10,APCTAPDS(,APCTPTR)                           01S0758
*       ALLQADD=BOFF;               /* NO LONGER IN PROCESS OF ADDING*/
         NI    ALLQADD,B'11011111'                              01S0759
*     END;                          /* OUR APDS(S) HAVE BEEN REMOVED */
*   ELSE                            /* NOT ADDING, THEREFORE REMOVING*/
*     DO;                           /* COMPLETE THE REMOVAL OF OUR   */
         B     @RC00753                                         01S0761
@RF00753 DS    0H                                               01S0762
*       IF FIRSAPDS=0 THEN          /* OUR FIRST IS FIRST ON QUEUE   */
         SLR   @10,@10                                          01S0762
         C     @10,FIRSAPDS                                     01S0762
         BNE   @RF00762                                         01S0762
*         IF LASTAPDS=0 THEN        /* OUR LAST IS LAST ON QUEUE     */
         C     @10,LASTAPDS                                     01S0763
         BNE   @RF00763                                         01S0763
*           DO;                     /* THERE WILL BE A NULL QUEUE    */
*             APCTAPDS=0;           /* NO FIRST APDS                 */
         ST    @10,APCTAPDS(,APCTPTR)                           01S0765
*             APCTDSAP=0;           /* NO LAST APDS                  */
         ST    @10,APCTDSAP(,APCTPTR)                           01S0766
*             ALLQRMV=BOFF;         /* REMOVAL IS COMPLETE           */
         NI    ALLQRMV,B'11101111'                              01S0767
*           END;                    /* DO IF LASTAPDS = 0            */
*         ELSE                      /* OUR LAST IS NOT LAST ON QUEUE */
*           DO;                     /* HAVE TO DO IT ANYWAY          */
         B     @RC00763                                         01S0769
@RF00763 DS    0H                                               01S0770
*             RFY                                               01S0770
*              (R2P,                                            01S0770
*               R3P) RSTD;          /* WILL USE THIS FOR NEW FIRST   */
*             R3P=0;                /* USE FOR NEW FIRST'S PREVIOUS  */
         SLR   R3P,R3P                                          01S0771
*             R2P=LASTAPDS;         /* POINTER IS IN REGISTER        */
         L     R2P,LASTAPDS                                     01S0772
*             R2P->APDSDSAP=R3P;    /* FIRST HAS NO PREVIOUS         */
         ST    R3P,APDSDSAP(,R2P)                               01S0773
*             APCTAPDS=R2P;         /* OUR LAST'S NEXT IS NEW FIRST  */
         ST    R2P,APCTAPDS(,APCTPTR)                           01S0774
*             RFY                                               01S0775
*              (R2P,                                            01S0775
*               R3P) UNRSTD;        /* THROUGH WITH REGS             */
*             ALLQRMV=BOFF;         /* COMPLETED REMOVAL OF APDS(S)  */
         NI    ALLQRMV,B'11101111'                              01S0776
*           END;                    /* DO IF OUR LAST IS ^ LAST ON Q */
*       ELSE                        /* OUR FIRST IS NOT ON QUEUE     */
*         IF LASTAPDS=0 THEN        /* OUR LAST IS LAST ON QUEUE     */
         B     @RC00762                                         01S0778
@RF00762 L     @10,LASTAPDS                                     01S0778
         LTR   @10,@10                                          01S0778
         BNZ   @RF00778                                         01S0778
*           DO;                     /* THERE WILL NOT BE A NULL QUEUE*/
*             RFY                                               01S0780
*              (R2P,                                            01S0780
*               R3P) RSTD;          /* WILL USE REGISTERS TO COMPLETE*/
*             R2P=FIRSAPDS;         /* PREVIOU TO OUR FIRST IS NEW   */
         L     R2P,FIRSAPDS                                     01S0781
*             R3P=0;                /* LAST AND WILL HAVE NO NEXT    */
         SLR   R3P,R3P                                          01S0782
*             APCTDSAP=R2P;         /* NEW LAST POINTER              */
         ST    R2P,APCTDSAP(,APCTPTR)                           01S0783
*             R2P->APDSAPDS=R3P;    /* NO NEXT FOR FOR NEW LAST      */
         ST    R3P,APDSAPDS(,R2P)                               01S0784
*             ALLQRMV=BOFF;         /* COMPLETED REMOVAL OF APDS(S)  */
         NI    ALLQRMV,B'11101111'                              01S0785
*             RFY                                               01S0786
*              (R2P,                                            01S0786
*               R3P) UNRSTD;        /* THROUGH WITH REGS             */
*           END;                    /* DO IF LASTAPDS = 0            */
*         ELSE                      /* OUR APDS(S) ARE INTERIOR Q BLK*/
*           DO;                     /* NO NEW FIRST OR LAST          */
         B     @RC00778                                         01S0788
@RF00778 DS    0H                                               01S0789
*             RFY                                               01S0789
*              (R2P,                                            01S0789
*               R3P) RSTD;          /* WILL USE REGS AGAIN           */
*             R2P=FIRSAPDS;         /* PREVIOUS TO OUR FIRST         */
         L     R2P,FIRSAPDS                                     01S0790
*             R3P=LASTAPDS;         /* NEXT TO OUR LAST              */
         L     R3P,LASTAPDS                                     01S0791
*             R2P->APDSAPDS=R3P;    /* NEW NEXT FOR OUR FIRST'S PREV */
         ST    R3P,APDSAPDS(,R2P)                               01S0792
*             R3P->APDSDSAP=R2P;    /* NEW PREV FOR OUR LAST'S NEXT  */
         ST    R2P,APDSDSAP(,R3P)                               01S0793
*             ALLQRMV=BOFF;         /* DONE WITH REMOVAL             */
         NI    ALLQRMV,B'11101111'                              01S0794
*             RFY                                               01S0795
*              (R2P,                                            01S0795
*               R3P) UNRSTD;        /* AND REGS..                    */
*           END;                    /* DO IF NO NEW FIRST OR LAST    */
*     END;                          /* PROCESS OF REMOVAL            */
*   RETURN;                         /* TO CALLER                     */
@EL00008 DS    0H                                               01S0798
@EF00008 DS    0H                                               01S0798
@ER00008 LM    @14,@12,12(@13)                                  01S0798
         BR    @14                                              01S0798
*   END FIXQUEUE;                   /* END OF PROGRAM SEGMENT   01S0799
*                                      IGTXEPLG                      */
         B     @EL00008                                         01S0799
*                                                               01S0800
*   /*****************************************************************/
*   /*                                                               */
*   /* SYSTEM DECLARES                                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0800
*   DECLARE                         /* GENERAL PURPOSE REGISTERS     */
*     GPR00F FIXED(31) REG(0),                                  01S0800
*     GPR01P PTR(31) REG(1);                                    01S0800
*   DECLARE                         /* COMMON VARIABLES              */
*     I256C CHAR(256) BASED,                                    01S0801
*     I031F FIXED(31) BASED,                                    01S0801
*     I031P PTR(31) BASED,                                      01S0801
*     I015F FIXED(15) BASED,                                    01S0801
*     I015P PTR(15) BASED,                                      01S0801
*     I008P PTR(8) BASED,                                       01S0801
*     I001C CHAR(1) BASED;                                      01S0801
*                                                               01S0802
*/*   MODULE PATCH AREA                                              */
*                                                               01S0802
*   DCL                                                         01S0802
*     APPATCH CHAR(*) INT STATIC LOCAL GEND;                    01S0802
*   GENERATE DATA DEFS(APPATCH);                                01S0803
*                                                               01S0804
*   /*****************************************************************/
*   /*                                                               */
*   /* GENERAL REGISTER DECLARES                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0804
*   DCL                                                         01S0804
*     R0F FIXED(31) REG(0),                                     01S0804
*     R0P PTR(24) REG(0),                                       01S0804
*     R0RSTD PTR(31) REG(0),                                    01S0804
*     R1F FIXED(31) REG(1),                                     01S0804
*     R1P PTR(24) REG(1),                                       01S0804
*     R1RSTD PTR(31) REG(1),                                    01S0804
*     R2F FIXED(31) REG(2),                                     01S0804
*     R2P PTR(24) REG(2),                                       01S0804
*     R2RSTD PTR(31) REG(2),                                    01S0804
*     R3F FIXED(31) REG(3),                                     01S0804
*     R3P PTR(24) REG(3),                                       01S0804
*     R3RSTD PTR(31) REG(3),                                    01S0804
*     R4F FIXED(31) REG(4),                                     01S0804
*     R4P PTR(24) REG(4),                                       01S0804
*     R4RSTD PTR(31) REG(4),                                    01S0804
*     R5F FIXED(31) REG(5),                                     01S0804
*     R5P PTR(24) REG(5),                                       01S0804
*     R5RSTD PTR(31) REG(5),                                    01S0804
*     R6F FIXED(31) REG(6),                                     01S0804
*     R6P PTR(24) REG(6),                                       01S0804
*     R6RSTD PTR(31) REG(6),                                    01S0804
*     R7F FIXED(31) REG(7),                                     01S0804
*     R7P PTR(24) REG(7),                                       01S0804
*     R7RSTD PTR(31) REG(7),                                    01S0804
*     R8F FIXED(31) REG(8),                                     01S0804
*     R8P PTR(24) REG(8),                                       01S0804
*     R8RSTD PTR(31) REG(8),                                    01S0804
*     R9F FIXED(31) REG(9),                                     01S0804
*     R9P PTR(24) REG(9),                                       01S0804
*     R9RSTD PTR(31) REG(9),                                    01S0804
*     R10F FIXED(31) REG(10),                                   01S0804
*     R10P PTR(24) REG(10),                                     01S0804
*     R10RSTD PTR(31) REG(10),                                  01S0804
*     R11F FIXED(31) REG(11),                                   01S0804
*     R11P PTR(24) REG(11),                                     01S0804
*     R11RSTD PTR(31) REG(11),                                  01S0804
*     R12F FIXED(31) REG(12),                                   01S0804
*     R12P PTR(24) REG(12),                                     01S0804
*     R12RSTD PTR(31) REG(12),                                  01S0804
*     R13F FIXED(31) REG(13),                                   01S0804
*     R13P PTR(24) REG(13),                                     01S0804
*     R13RSTD PTR(31) REG(13),                                  01S0804
*     R14F FIXED(31) REG(14),                                   01S0804
*     R14P PTR(24) REG(14),                                     01S0804
*     R14RSTD PTR(31) REG(14),                                  01S0804
*     R15F FIXED(31) REG(15),                                   01S0804
*     R15P PTR(24) REG(15),                                     01S0804
*     R15RSTD PTR(31) REG(15),                                  01S0804
*                                                               01S0804
*     /***************************************************************/
*     /*                                                             */
*     /* VPSS CONTROL BLOCK POINTER DECLARES                         */
*     /*                                                             */
*     /***************************************************************/
*                                                               01S0804
*     APSMPTR PTR(24) REG(01),      /* STORAGE MANAGEMENT BLOCK 01S0804
*                                      (SUGGESTED POINTER)           */
*     APSCPTR PTR(24) REG(01),      /* STORAGE MANAGEMENT CONTROL
*                                      WORD (SUGGESTED POINTER)      */
*     APINPTR PTR(24) REG(01),      /* USER'S INPUT PARAMETER LIST
*                                      (SUGGESTED POINTER)           */
*/*                                                                  */
*                                                               01S0804
*     APDATA PTR(24) REG(06),       /* ADDRESS OF DYNAMIC DATA  01S0804
*                                      WORKAREA (DATAREG)            */
*     APCODE PTR(24) REG(07),       /* PROGRAM CODE BASE REGISTER
*                                      (CODEREG)                     */
*     APDEBPTR PTR(24) REG(08),     /* VPSS DEB (SUGGESTED POINTER)  */
*     APNPPTR PTR(24) REG(08),      /* SUBSYSTEM INITIALIZATION 01S0804
*                                      WORKAREA BLOCK (ONLY USED BY
*                                      SUBSYSTEM INITIALIZATION)     */
*     APRLPTR PTR(24) REG(08),      /* VPSS ACB REQUEST LIST    01S0804
*                                      (SUGGESTED POINTER)           */
*     APCIPTR PTR(24) REG(08),      /* 3838 CONTROL TABLE (SUGGESTED
*                                      POINTER)                      */
*     APCWPTR PTR(24) REG(08),      /* CALL INTERFACE WORKAREA  01S0804
*                                      (SUGGESTED POINTER)           */
*     APERPTR PTR(24) REG(08),      /* ERP/IO APPENDAGE WORKAREA
*                                      (SUGGESTED POINTER)           */
*     APACBPTR PTR(24) REG(09),     /* VPSS ACB (SUGGESTED POINTER)  */
*     APCQPTR PTR(24) REG(09),      /* COMMAND QUEUE ELEMENT    01S0804
*                                      (SUGGESTED POINTER)           */
*     APOTPTR PTR(24) REG(09),      /* OPTION TABLE (SUGGESTED  01S0804
*                                      POINTER)                      */
*     APIOPTR PTR(24) REG(10),      /* I/O ELEMENT (SUGGESTED   01S0804
*                                      POINTER)                      */
*     APEXLPTR PTR(24) REG(10),     /* VPSS EXLST (SUGGESTED POINTER)*/
*     APUBPTR PTR(24) REG(10),      /* UNIT BLOCK (SUGGESTED POINTER)*/
*     APAXPTR PTR(24) REG(10),      /* VPSS ACB EXTENSION (SUGGESTED
*                                      POINTER)                      */
*     APCPPTR PTR(24) REG(10),      /* VPSS CALL PROCESSING     01S0804
*                                      INDICATORS (SUGGESTED POINTER)*/
*     APOCPTR PTR(24) REG(10),      /* VPSS OPEN/CLOSE SUBSYSTEM
*                                      WORKAREA (REQUIRED POINTER)   */
*     APATPTR PTR(24) REG(11),      /* VPSS ACB TABLE (SUGGESTED
*                                      POINTER)                      */
*     APLBPTR PTR(24) REG(11),      /* LABEL RESOLUTION TABLE   01S0804
*                                      (SUGGESTED POINTER)           */
*     APUTPTR PTR(24) REG(11),      /* USER TABLE (SUGGESTED POINTER)*/
*     APDSPTR PTR(24) REG(11),      /* VPSS DATASET ENTRY (SUGGESTED
*                                      POINTER)                      */
*     APXLPTR PTR(24) REG(11),      /* TRANSLATION TABLE (SUGGESTED
*                                      POINTER)                      */
*     APDXPTR PTR(24) REG(11),      /* VPSS DEB EXTENSION (SUGGESTED
*                                      POINTER)                      */
*     APCTPTR PTR(24) REG(12) RSTD, /* CONTROL TABLE (REQUIRED  01S0804
*                                      POINTER)                      */
*     APSVPTR PTR(24) REG(13) RSTD, /* OS/VPSS SAVEAREA/WORKAREA
*                                      (REQUIRED POINTER)            */
*     APRETURN PTR(24) REG(14),     /* RETURN ADDRESS FOR SUBROUTINE
*                                      LINKAGE                       */
*     APENTRY PTR(24) REG(15),      /* SUBROUTINE ENTRY POINT LINKAGE*/
*     APRCODE PTR(24) REG(15);      /* CONTAINS SUBROUTINE RETURN
*                                      CODE                          */
*                                                               01S0805
*   /*****************************************************************/
*   /*                                                               */
*   /* USER REGISTER DECLARES                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                               01S0805
*   DCL                                                         01S0805
*     ALLCWAPT PTR(24) REG(04) RSTD;/* ADDRESS OF WORKAREA           */
*   END IGTJH0                                                  01S0806
*                                                               01S0806
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IGTXAPAW)                                       */
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                       */
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                       */
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                       */
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                       */
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                       */
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                       */
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                       */
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                       */
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                       */
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                       */
*/*%INCLUDE SYSLIB  (IGTXSYSI)                                       */
*/*%INCLUDE SYSLIB  (IGTJHM  )                                       */
*/*%INCLUDE SYSLIB  (IGTXAPCC)                                       */
*/*%INCLUDE SYSLIB  (IGTXAPCM)                                       */
*/*%INCLUDE SYSLIB  (IGTXAPCT)                                       */
*/*%INCLUDE SYSLIB  (IGTXAPDS)                                       */
*/*%INCLUDE SYSLIB  (IGTXAPUB)                                       */
*/*%INCLUDE SYSLIB  (IGTXAPSV)                                       */
*/*%INCLUDE SYSLIB  (IGTXAPCV)                                       */
*/*%INCLUDE SYSLIB  (IGTXAPGF)                                       */
*/*%INCLUDE SYSLIB  (IGTXAPVU)                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IEFJSCVT)                                       */
*/*%INCLUDE SYSLIB  (IEFJSSOB)                                       */
*/*%INCLUDE SYSLIB  (IEFSSARB)                                       */
*/*%INCLUDE SYSLIB  (IEFJSSWA)                                       */
*/*%INCLUDE SYSLIB  (IHAECB  )                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (IHAASCB )                                       */
*/*%INCLUDE SYSLIB  (IHAASXB )                                       */
*/*%INCLUDE SYSLIB  (IKJTCB  )                                       */
*/*%INCLUDE SYSLIB  (IHARB   )                                       */
*/*%INCLUDE SYSLIB  (IKJRB   )                                       */
*/*%INCLUDE SYSLIB  (IHASDWA )                                       */
*/*%INCLUDE SYSLIB  (IGTXAPES)                                       */
*/*%INCLUDE SYSUT5  (ECBLINIT)                                       */
*/*%INCLUDE SYSUT5  (DYNORBAT)                                       */
*/*%INCLUDE SYSUT5  (IGTJHV  )                                       */
*/*%INCLUDE SYSUT5  (IGTJHX  )                                       */
*/*%INCLUDE SYSUT5  (APDSCRE8)                                       */
*/*%INCLUDE SYSUT5  (GETAPDS )                                       */
*/*%INCLUDE SYSUT5  (LOCKENQ )                                       */
*/*%INCLUDE SYSUT5  (DOALLOC )                                       */
*/*%INCLUDE SYSUT5  (QUEAPDS )                                       */
*/*%INCLUDE SYSUT5  (APUBDEQ )                                       */
*/*%INCLUDE SYSUT5  (LOCKODEQ)                                       */
*/*%INCLUDE SYSUT5  (DEQALLC8)                                       */
*/*%INCLUDE SYSUT5  (DEQALLC8)                                       */
*/*%INCLUDE SYSUT5  (FREEAPDS)                                       */
*/*%INCLUDE SYSUT5  (FREEAPDS)                                       */
*/*%INCLUDE SYSUT5  (RSTREGS )                                       */
*/*%INCLUDE SYSUT5  (RSTREGS )                                       */
*/*%INCLUDE SYSUT5  (RSTREGS )                                       */
*/*%INCLUDE SYSUT5  (RSTREGS )                                       */
*/*%INCLUDE SYSUT5  (RSTREGS )                                       */
*/*%INCLUDE SYSUT5  (RSTREGS )                                       */
*/*%INCLUDE SYSUT5  (RSTREGS )                                       */
*/*%INCLUDE SYSUT5  (RSTREGS )                                       */
*/*%INCLUDE SYSUT5  (CLRSTAE )                                       */
*/*%INCLUDE SYSUT5  (CLRSTAE )                                       */
*/*%INCLUDE SYSUT5  (CLRSTAE )                                       */
*/*%INCLUDE SYSUT5  (CLRSTAE )                                       */
*/*%INCLUDE SYSUT5  (CLRSTAE )                                       */
*/*%INCLUDE SYSUT5  (CLRSTAE )                                       */
*/*%INCLUDE SYSUT5  (CLRSTAE )                                       */
*/*%INCLUDE SYSUT5  (CLRSTAE )                                       */
*/*%INCLUDE SYSUT5  (DEQALLRS)                                       */
*/*%INCLUDE SYSUT5  (CLRWTO  )                                       */
*                                                               01S0806
*       ;                                                       01S0806
@EL00001 L     @13,4(,@13)                                      01S0806
@EF00001 L     @00,@SIZDATD                                     01S0806
         LR    @01,@06                                          01S0806
         IGTYFSV  R,LV=(0),A=(1)
@ER00001 LM    @14,@12,12(@13)                                  01S0806
         BR    @14                                              01S0806
@DATA    DS    0H
@CH00157 DC    H'12'
@CH00379 DC    H'39'
@CH01187 DC    H'144'
@SM04079 MVC   SSAGDMSG(0,@10),MSGTEXT
@DATD    DSECT
         DS    0F
@SA00001 DS    20F
@SA00004 DS    15F
@SA00005 DS    15F
@SA00007 DS    15F
@SA00002 DS    15F
@AL00001 DS    5A
IGTJH0   CSECT
         DS    0F
@CF00049 DC    F'1'
@CF00145 DC    F'4'
@CF00056 DC    F'8'
@CF00288 DC    F'20'
@CF04053 DC    F'-2147483647'
@CF04066 DC    XL4'0000FFFF'
@DATD    DSECT
         DS    0D
FIRSAPDS DS    A
LASTAPDS DS    A
APESPTR  DS    A
RETCODE  DS    F
STRNGPTR DS    A
INFRCODE DS    H
         DS    CL2
DAPGF    DS    CL16
ENQECBL  DS    CL16
         ORG   ENQECBL
ENQECBP  DS    AL4
CNCLECBP DS    AL4
         ORG   CNCLECBP
@NM00008 DS    BL1
         ORG   @NM00008
LASTECBI DS    BL1
@NM00009 EQU   @NM00008+0
         ORG   ENQECBL+8
ENQECB   DS    AL4
CANCLECB DS    AL4
         ORG   ENQECBL+16
ORIGVUSE DS    BL1
         DS    CL3
APAW     DS    CL68
         ORG   APAW
SSOBPTR  DS    AL4
FIRSTARB DS    AL4
ALLSTAT  DS    BL4
         ORG   ALLSTAT
ALLSTAT0 DS    BL1
         ORG   ALLSTAT0
ALLFAIL  DS    BL1
ALLWAIT  EQU   ALLSTAT0+0
ALLMONUP EQU   ALLSTAT0+0
ALLJCLOK EQU   ALLSTAT0+0
ALLMONWT EQU   ALLSTAT0+0
ALLRQVAL EQU   ALLSTAT0+0
ALLERREN EQU   ALLSTAT0+0
ALLAPDS  EQU   ALLSTAT0+0
         ORG   ALLSTAT+1
ALLSTAT1 DS    BL1
         ORG   ALLSTAT1
ALLNLAA  DS    BL1
ALLHOLD  EQU   ALLSTAT1+0
ALLINST  EQU   ALLSTAT1+0
ALLMARK  EQU   ALLSTAT1+0
@NM00013 EQU   ALLSTAT1+0
         ORG   ALLSTAT+2
ALLSTAT2 DS    BL1
         ORG   ALLSTAT2
ALLDYN   DS    BL1
ALLQUE   EQU   ALLSTAT2+0
ALLQADD  EQU   ALLSTAT2+0
ALLQRMV  EQU   ALLSTAT2+0
ALLRES   EQU   ALLSTAT2+0
ALLMLWTO EQU   ALLSTAT2+0
ALLERRN2 EQU   ALLSTAT2+0
ALLQUE2  EQU   ALLSTAT2+0
         ORG   ALLSTAT+3
ALLSTAT3 DS    BL1
         ORG   ALLSTAT3
@NM00014 DS    BL1
         ORG   APAW+12
ALLRSRCE DS    BL4
         ORG   ALLRSRCE
ALLSER   DS    BL1
ALLALL   EQU   ALLRSRCE+0
ALLAPUB  EQU   ALLRSRCE+0
ALLSTART EQU   ALLRSRCE+0
ALLCWAIT EQU   ALLRSRCE+0
         ORG   APAW+16
INITTCB  DS    AL4
ALLENQRC DS    AL1
@NM00015 DS    CL3
ALLOCNTR DS    FL4
ACNCLECB DS    AL4
NUMALREQ DS    FL4
NUMNTSAT DS    FL2
USCUNLD  DS    FL2
USCAVAIL DS    FL2
BSUNLD   DS    FL2
BSAVAIL  DS    FL2
@NM00016 DS    FL2
EXITINFO DS    BL4
         ORG   EXITINFO
EXITINF0 DS    BL1
         ORG   EXITINF0
EXITIMPP DS    BL1
EXITIMPS EQU   EXITINF0+0
EXITALOK EQU   EXITINF0+0
EXITENRQ EQU   EXITINF0+0
EXITRCON EQU   EXITINF0+0
@NM00017 EQU   EXITINF0+0
         ORG   EXITINFO+1
EXITINF1 DS    BL1
         ORG   EXITINF1
EXITREJ  DS    BL1
EXITCOMM EQU   EXITINF1+0
EXITCANC EQU   EXITINF1+0
EXITHOLD EQU   EXITINF1+0
@NM00018 EQU   EXITINF1+0
         ORG   EXITINFO+2
EXITINF2 DS    BL1
EXITINF3 DS    BL1
         ORG   APAW+52
NPNTOT   DS    FL2
NUMIER   DS    FL2
BSRTOT   DS    FL4
ALLMSGID DS    FL4
LASTARB  DS    AL4
@NM00019 DS    0C
         ORG   APAW+68
DAPES1   DS    CL648
DAPES2   DS    CL648
JCL      DS    BL1
         DS    CL3
MSGAREA  DS    CL124
         ORG   MSGAREA
MSGLNGTH DS    FL2
@NM00206 DS    CL6
MSGTEXT  DS    CL110
         ORG   MSGAREA+124
KWDUPL   DS    CL256
IGTJH0   CSECT
         DS    0F
@SIZDATD DC    AL1(230)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
@CC03889 DC    C'IGTJH0  '
@CC03890 DC    C'        '
@CC03951 DC    C' IGTJHX '
@CC01198 DC    C'APDS'
@CC03866 DC    C'APES'
@CC03882 DC    C'SSOB'
@CB04068 DC    B'000000000000000000000000100000000000000000000000000000C
               00'
@CB04072 DC    B'111111111111111111111111011111111111111111111111111111C
               11'
         DS    CL2
CMBRXZZZ DS    CL8
         ORG   CMBRXZZZ
@NM00001 DS    CL8
         ORG   @NM00001
@NM00002 DC    H'36'
@NM00003 DC    H'0'
@NM00004 DC    AL1(0)
@NM00005 DC    AL1(8)
@NM00006 DC    H'79'
         ORG   CMBRXZZZ+8
ALLOCATE DC    CL8'ALLOCATE'
LOCKOUT  DC    CL7'LOCKOUT'
APUBENQR DC    CL4'APUB'
STARTUP  DC    CL7'STARTUP'
ALLOWAIT DC    CL8'ALLCWAIT'
IGTJH0   CSECT
ENQLISTT ENQ   (*-*,*-*,E,0,SYSTEM),RET=USE,TCB=0,MF=L
NQLISTTL EQU   ENQLISTT,*-ENQLISTT,C'C' LENGTH OF STATIC PARM LIST
ENQLISTE ENQ   (*-*,*-*,E,0,SYSTEM),ECB=*-*,MF=L
NQLISTEL EQU   ENQLISTE,*-ENQLISTE,C'C' LENGTH OF STATIC PARM LIST
IGTJH0   CSECT
*                                        /* DEFINES THE ESTAE DYN AREA
ESTAEL2  IGTYSTAE PURGE=NONE,RECORD=YES,TERM=YES,ASYNCH=YES,MF=L
ESTAEL2L EQU   ESTAEL2,*-ESTAEL2,C'C'
@DATD    DSECT
DYNQLIST ENQ   (*-*,*-*,E,0,SYSTEM),ECB=*-*,MF=L
@DATD    DSECT
*                                 /* DEFINES THE ESTAE LIST FORM
ESTAEL   IGTYSTAE PURGE=NONE,RECORD=YES,TERM=YES,ASYNCH=YES,MF=L
IGTJH0   CSECT
*                                 /*
WTOL1    WTO   (,E),                                                   *
               MF=L
WTOL1L   EQU   WTOL1,*-WTOL1,C'C'         LENGTH FOR DYN AREA INIT
@DATD    DSECT
*                                   /*
WTOL     WTO   (,E),                COMPLETE THE WTO ALREADY BEGUN     *
               MF=L
IGTJH0   CSECT
*                                        /*
DEQLISTA DEQ   (*-*,*-*,0,SYSTEM,                                      *
               *-*,*-*,0,SYSTEM,                                       *
               *-*,*-*,0,SYSTEM,                                       *
               *-*,*-*,0,SYSTEM),                                      *
               RET=HAVE,                                               *
               MF=L
DQLISTAL EQU   DEQLISTA,*-DEQLISTA,C'C'
IGTJH0   CSECT
*                                                          /*
DEQLIST1 DEQ   (*-*,*-*,0,SYSTEM),MF=L
DQLIST1L EQU   DEQLIST1,*-DEQLIST1,C'C'
DEQLISTT DEQ   (*-*,*-*,0,SYSTEM),TCB=0,MF=L
DQLISTTL EQU   DEQLISTT,*-DEQLISTT,C'C'
@DATD    DSECT
*                                   /*
DYNDEQLA DEQ   (*-*,*-*,0,SYSTEM,                                      *
               *-*,*-*,0,SYSTEM,                                       *
               *-*,*-*,0,SYSTEM,                                       *
               *-*,*-*,0,SYSTEM),                                      *
               TCB=0,MF=L
IGTJH0   CSECT
*                                /* GENERATE PATCH
         IGTXZAP ,                 GENERATE PATCH AREA
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IGTJH0   CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
RCODE    EQU   @02
NXTPTR   EQU   @02
I        EQU   @05
SDWAPTR  EQU   @02
SSDDRPTR EQU   @03
SSCTPTR  EQU   @02
APDATA   EQU   @06
APCODE   EQU   @07
R8P      EQU   @08
R15P     EQU   @15
APDSPTR  EQU   @11
APCTPTR  EQU   @12
APSVPTR  EQU   @13
ALLCWAPT EQU   @04
R0P      EQU   @00
R1P      EQU   @01
R5P      EQU   @05
R1F      EQU   @01
R14P     EQU   @14
R15F     EQU   @15
R0F      EQU   @00
R14F     EQU   @14
R2P      EQU   @02
GPR00F   EQU   @00
GPR01P   EQU   @01
R0RSTD   EQU   @00
R1RSTD   EQU   @01
R2RSTD   EQU   @02
R3RSTD   EQU   @03
R4RSTD   EQU   @04
R5RSTD   EQU   @05
R6RSTD   EQU   @06
R7RSTD   EQU   @07
R8RSTD   EQU   @08
R9RSTD   EQU   @09
R10RSTD  EQU   @10
R11RSTD  EQU   @11
R12RSTD  EQU   @12
R13RSTD  EQU   @13
R14RSTD  EQU   @14
R15RSTD  EQU   @15
R3P      EQU   @03
APACBPTR EQU   @09
APATPTR  EQU   @11
APAXPTR  EQU   @10
APCIPTR  EQU   @08
APCPPTR  EQU   @10
APCQPTR  EQU   @09
APCWPTR  EQU   @08
APDEBPTR EQU   @08
APDXPTR  EQU   @11
APENTRY  EQU   @15
APERPTR  EQU   @08
APEXLPTR EQU   @10
APINPTR  EQU   @01
APIOPTR  EQU   @10
APLBPTR  EQU   @11
APNPPTR  EQU   @08
APOCPTR  EQU   @10
APOTPTR  EQU   @09
APRCODE  EQU   @15
APRETURN EQU   @14
APRLPTR  EQU   @08
APSCPTR  EQU   @01
APSMPTR  EQU   @01
APUBPTR  EQU   @10
APUTPTR  EQU   @11
APXLPTR  EQU   @11
R10F     EQU   @10
R10P     EQU   @10
R11F     EQU   @11
R11P     EQU   @11
R12F     EQU   @12
R12P     EQU   @12
R13F     EQU   @13
R13P     EQU   @13
R2F      EQU   @02
R3F      EQU   @03
R4F      EQU   @04
R4P      EQU   @04
R5F      EQU   @05
R6F      EQU   @06
R6P      EQU   @06
R7F      EQU   @07
R7P      EQU   @07
R8F      EQU   @08
R9F      EQU   @09
R9P      EQU   @09
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
FLCCVT   EQU   FLCICCW2
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSATOLD  EQU   PSA+540
PSAAOLD  EQU   PSA+548
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
ECBPTR   EQU   0
TASKINFO EQU   0
CURASCB  EQU   TASKINFO+12
ASCBPTR  EQU   0
ASXBPTR  EQU   0
TCBPTR   EQU   0
RBSECPTR EQU   0
SSARBPTR EQU   0
DDNAME   EQU   0
JOBNAME  EQU   0
@NM00010 EQU   0
ENQRC    EQU   @NM00010+3
APDS     EQU   0
APDSID   EQU   APDS
APDSAPDS EQU   APDS+4
APDSAPCT EQU   APDS+12
APDSTD   EQU   APDS+16
APDSDDNM EQU   APDS+24
APDSASCB EQU   APDS+52
APDSREG  EQU   APDS+56
APDSDSAP EQU   APDS+60
APDSFLGS EQU   APDS+64
APDSFLG0 EQU   APDSFLGS
APDSFLG1 EQU   APDSFLGS+1
APDSITCB EQU   APDS+80
APDSJBNM EQU   APDS+84
APDSSIZE EQU   APDS+92
SSWAPTR  EQU   0
EMSGAREA EQU   0
APCT     EQU   0
APCTENQM EQU   APCT+12
APCTREG  EQU   APCT+20
APCTSMIN EQU   APCT+32
APCTSMAD EQU   APCT+36
APCTZ@@@ EQU   APCT+40
APCTU@@@ EQU   APCT+440
APCTBR14 EQU   APCT+840
APCTAPDS EQU   APCT+860
APCTDSAP EQU   APCT+872
APCTERRS EQU   APCT+876
@NM00031 EQU   APCT+936
APCTSTAT EQU   @NM00031
APCTPRSW EQU   @NM00031+1
APCTAPCQ EQU   APCT+944
APCTCQAQ EQU   APCT+952
APCTACTR EQU   APCT+1112
APCTZ@@1 EQU   APCT+1120
APCTAPVU EQU   APCT+1520
APUB     EQU   0
APUBERRS EQU   APUB+52
APUBALFG EQU   APUB+80
APUBALF0 EQU   APUBALFG
APUBALF1 EQU   APUBALFG+1
APUBALF2 EQU   APUBALFG+2
APUBALF3 EQU   APUBALFG+3
APUBSTAT EQU   APUB+84
APUBIOFG EQU   APUB+88
APUBIOF0 EQU   APUBIOFG
APUBIOF1 EQU   APUBIOFG+1
APUBIOF2 EQU   APUBIOFG+2
APUBIOF3 EQU   APUBIOFG+3
APUBDCB  EQU   APUB+96
APSV     EQU   0
APSVREGS EQU   APSV+12
APCVZUAG EQU   0
APCVZUKA EQU   0
APCVZJI3 EQU   0
APCVZJHE EQU   0
APCVZJH6 EQU   0
APCVZJHO EQU   0
APCVZJHC EQU   0
APGF     EQU   0
APGFSW   EQU   APGF
APGFSCLR EQU   APGFSW
APGFSFRE EQU   APGFSW
APGFXSP  EQU   APGF+2
APGFXKEY EQU   APGF+3
APGFXADR EQU   APGF+4
APGFXLN  EQU   APGF+8
APVU     EQU   0
APVUSPLN EQU   APVU+8
APVUAUSE EQU   APVU+3040
APVUVUSE EQU   APVUAUSE
CVTMAP   EQU   0
CVTTCBP  EQU   CVTMAP
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIOQET EQU   CVTMAP+120
CVTIERLC EQU   CVTMAP+144
CVTHEAD  EQU   CVTMAP+160
CVTSV76C EQU   CVTHEAD
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
SSCT     EQU   0
SSCTFLG1 EQU   SSCT+12
SSCTSUSE EQU   SSCT+20
SSOB     EQU   0
SSOBID   EQU   SSOB
SSOBFUNC EQU   SSOB+6
SSOBRETN EQU   SSOB+12
SSOBINDV EQU   SSOB+16
SSAG     EQU   0
SSAGEHDR EQU   SSAG
SSAGFLGS EQU   SSAGEHDR+2
SSAGWAIT EQU   SSAGFLGS
SSAGSMSG EQU   SSAGFLGS
SSAGARBP EQU   SSAGEHDR+8
SSAGCNCL EQU   SSAGEHDR+12
SSAGJBNM EQU   SSAGEHDR+16
SSAGGMGP EQU   SSAGEHDR+24
SSAGARBK EQU   0
SSAGRBEC EQU   SSAGARBK+4
SSAGRBIC EQU   SSAGARBK+6
SSAGNRBP EQU   SSAGARBK+12
SSAGDDNM EQU   SSAGARBK+16
SSAGSSWA EQU   SSAGARBK+48
SSAGSSCM EQU   SSAGARBK+52
SSAGDMGP EQU   SSAGARBK+56
SSAGDMBK EQU   0
SSAGDMGL EQU   SSAGDMBK
SSAGDMSG EQU   SSAGDMBK+2
SSAGGMBK EQU   0
SSWA     EQU   0
SSWAHDR  EQU   SSWA
SSWATYPE EQU   SSWAHDR
SSWAPRNO EQU   SSWAHDR+6
SSWAPREN EQU   SSWA+8
SSWAIFLD EQU   0
SSWAILEN EQU   SSWAIFLD
SSWAIPRM EQU   SSWAIFLD+1
ECB      EQU   0
ECBRB    EQU   ECB
ECBEVTB  EQU   ECBRB
ECBEXTB  EQU   ECBEVTB
ECBCC    EQU   ECBEXTB
ECBWAITB EQU   ECBCC
ECBPOSTB EQU   ECBCC
ECBCCCNT EQU   ECBEXTB+1
ECBRBA   EQU   ECBCCCNT
ECBEVTBA EQU   ECBRBA
ECBEXTBA EQU   ECBEVTBA
ECBBYTE3 EQU   ECBEXTBA+2
ECBEXTND EQU   ECBBYTE3
ASCB     EQU   0
ASCBSUPC EQU   ASCB+16
ASCBASID EQU   ASCB+36
ASCBFW1  EQU   ASCB+100
ASCBRCTF EQU   ASCBFW1+2
ASCBFLG1 EQU   ASCBFW1+3
ASCBASXB EQU   ASCB+108
ASCBDSP1 EQU   ASCB+114
ASCBFLG2 EQU   ASCB+115
ASCBLKGP EQU   ASCB+128
ASCBSRQ  EQU   ASCB+180
ASCBSRQ1 EQU   ASCBSRQ
ASCBSRQ2 EQU   ASCBSRQ+1
ASCBSRQ3 EQU   ASCBSRQ+2
ASCBSRQ4 EQU   ASCBSRQ+3
ASXB     EQU   0
ASXBFTCB EQU   ASXB+4
ASXBAEQ  EQU   ASXB+168
ASXBSECR EQU   ASXB+199
ASCBSFLG EQU   ASXBSECR
ASXBCASW EQU   ASXB+216
ASXBCRB1 EQU   ASXBCASW
TCBFIX   EQU   0
TCBFRS   EQU   TCBFIX
TCB      EQU   0
TCBRBP   EQU   TCB
TCBPIE   EQU   TCB+4
TCBPMASK EQU   TCBPIE
TCBCMP   EQU   TCB+16
TCBCMPF  EQU   TCBCMP
TCBCPP   EQU   TCBCMPF
TCBSTCC  EQU   TCBCMPF
TCBCDBL  EQU   TCBCMPF
TCBCWTO  EQU   TCBCMPF
TCBCIND  EQU   TCBCMPF
TCBCMSG  EQU   TCBCMPF
TCBTRN   EQU   TCB+20
TCBABF   EQU   TCBTRN
TCBMSS   EQU   TCB+24
TCBPKF   EQU   TCB+28
TCBFLGS  EQU   TCB+29
TCBFLGS1 EQU   TCBFLGS
TCBFLGS2 EQU   TCBFLGS+1
TCBFLGS3 EQU   TCBFLGS+2
TCBFLGS4 EQU   TCBFLGS+3
TCBFLGS5 EQU   TCBFLGS+4
TCBABWF  EQU   TCBFLGS5
TCBJPQ   EQU   TCB+44
TCBPURGE EQU   TCBJPQ
TCBGRS   EQU   TCB+48
TCBFSA   EQU   TCB+112
TCBTME   EQU   TCB+120
TCBJSTCB EQU   TCB+124
TCBLTC   EQU   TCB+136
TCBTSFLG EQU   TCB+148
TCBTSTSK EQU   TCBTSFLG
TCBSTAB  EQU   TCB+160
TCBNSTAE EQU   TCBSTAB
TCBTCT   EQU   TCB+164
TCBTCTGF EQU   TCBTCT
TCBSCNDY EQU   TCB+172
TCBNDSP  EQU   TCBSCNDY
TCBNDSP1 EQU   TCBNDSP+1
TCBNDSP2 EQU   TCBNDSP+2
TCBNDSP3 EQU   TCBNDSP+3
TCBJSCB  EQU   TCB+180
TCBRECDE EQU   TCBJSCB
TCBEXT1  EQU   TCB+196
TCBBITS  EQU   TCB+200
TCBNDSP4 EQU   TCBBITS
TCBNDSP5 EQU   TCBBITS+1
TCBFLGS6 EQU   TCBBITS+2
TCBFLGS7 EQU   TCBBITS+3
TCBDAR   EQU   TCB+204
TCBDARC  EQU   TCBDAR
TCBEXT2  EQU   TCB+208
TCBXSCT  EQU   TCB+240
TCBXSCT1 EQU   TCBXSCT
TCBFOE   EQU   TCB+244
TCBESTAE EQU   TCB+264
TCBESTRM EQU   TCBESTAE+1
TCBFBYT1 EQU   TCB+276
TCBFBYT2 EQU   TCB+277
TCBRV124 EQU   TCB+278
TCBRV133 EQU   TCB+279
TCBXTNT2 EQU   0
TCBGTF   EQU   TCBXTNT2
TCBTFLG  EQU   TCBGTF
TCBRV146 EQU   TCBXTNT2+28
TCBRV155 EQU   TCBXTNT2+29
TCBRV164 EQU   TCBXTNT2+30
TCBRV173 EQU   TCBXTNT2+31
RBPRFX   EQU   0
RBBASIC  EQU   0
RBEXRTNM EQU   RBBASIC
RBTMFLD  EQU   RBEXRTNM
RBSTAB   EQU   RBBASIC+10
XSTAB    EQU   RBSTAB
RBSTAB1  EQU   XSTAB
XSTAB1   EQU   RBSTAB1
RBFTCKPT EQU   XSTAB1
RBSTAB2  EQU   XSTAB+1
XSTAB2   EQU   RBSTAB2
RBTCBNXT EQU   XSTAB2
RBFACTV  EQU   XSTAB2
RBFDYN   EQU   XSTAB2
RBECBWT  EQU   XSTAB2
RBOPSW   EQU   RBBASIC+16
XRBPSW   EQU   RBOPSW
RBOPSWB2 EQU   XRBPSW+1
RBLINK   EQU   RBBASIC+28
XRBLNK   EQU   RBLINK
RBWCF    EQU   XRBLNK
RBLINKB  EQU   XRBLNK+1
RBGRSAVE EQU   RBBASIC+32
XRBREG   EQU   RBGRSAVE
RBGRS0   EQU   XRBREG
RBGRS1   EQU   XRBREG+4
RBGRS2   EQU   XRBREG+8
RBGRS3   EQU   XRBREG+12
RBGRS4   EQU   XRBREG+16
RBGRS5   EQU   XRBREG+20
RBGRS6   EQU   XRBREG+24
RBGRS7   EQU   XRBREG+28
RBGRS8   EQU   XRBREG+32
RBGRS9   EQU   XRBREG+36
RBGRS10  EQU   XRBREG+40
RBGRS11  EQU   XRBREG+44
RBGRS12  EQU   XRBREG+48
RBGRS13  EQU   XRBREG+52
RBGRS14  EQU   XRBREG+56
RBGRS15  EQU   XRBREG+60
XRBESA   EQU   RBBASIC+96
RBPREFIX EQU   0
RBRSV019 EQU   RBPREFIX+14
RBRSV028 EQU   RBPREFIX+15
RBRSV041 EQU   RBPREFIX+27
RBRSV054 EQU   RBPREFIX+39
RBRTOPSW EQU   RBPREFIX+40
RBRTPSW2 EQU   RBRTOPSW+8
RBRTICIL EQU   RBRTPSW2
RBFLAGS1 EQU   RBPREFIX+56
RBINTCDA EQU   RBPREFIX+61
RBSECT   EQU   0
RBPPSAV  EQU   RBSECT
@NM00138 EQU   RBSECT+10
@NM00139 EQU   @NM00138
RBFTP    EQU   @NM00139
RBTRSVRB EQU   @NM00139
@NM00141 EQU   @NM00138+1
RBETXR   EQU   @NM00141
RBEP     EQU   RBSECT+12
RBPGMQ   EQU   RBSECT+24
@NM00148 EQU   RBSECT+28
@NM00149 EQU   @NM00148
IRBEND   EQU   RBSECT+96
@NM00152 EQU   RBSECT+96
RBRSV138 EQU   @NM00152+7
RBSCBB   EQU   RBSECT+144
RBSPARM  EQU   RBSCBB+8
RBSFLGS1 EQU   RBSPARM
RBSIOPRC EQU   RBSFLGS1
RBSOWNR  EQU   RBSCBB+12
RBSFLGS2 EQU   RBSOWNR
RBSDATA  EQU   RBSCBB+16
RBSFLG3  EQU   RBSDATA
RBRSV150 EQU   RBSECT+167
SDWA     EQU   0
SDWAFIOB EQU   SDWA+4
SDWAABCC EQU   SDWAFIOB
SDWACMPF EQU   SDWAABCC
SDWACTL1 EQU   SDWA+8
SDWACMKA EQU   SDWACTL1
SDWAMWPA EQU   SDWACTL1+1
SDWAPMKA EQU   SDWACTL1+4
SDWACTL2 EQU   SDWA+16
SDWACMKP EQU   SDWACTL2
SDWAMWPP EQU   SDWACTL2+1
SDWAPMKP EQU   SDWACTL2+4
SDWAGRSV EQU   SDWA+24
SDWANAME EQU   SDWA+88
SDWAEC1  EQU   SDWA+104
SDWAEMK1 EQU   SDWAEC1
SDWAMWP1 EQU   SDWAEC1+1
SDWAINT1 EQU   SDWAEC1+2
SDWANXT1 EQU   SDWAEC1+4
SDWAAEC1 EQU   SDWA+112
SDWAILC1 EQU   SDWAAEC1+1
SDWAINC1 EQU   SDWAAEC1+2
SDWAICD1 EQU   SDWAINC1+1
SDWAEC2  EQU   SDWA+120
SDWAEMK2 EQU   SDWAEC2
SDWAMWP2 EQU   SDWAEC2+1
SDWAINT2 EQU   SDWAEC2+2
SDWANXT2 EQU   SDWAEC2+4
SDWAAEC2 EQU   SDWA+128
SDWAILC2 EQU   SDWAAEC2+1
SDWAINC2 EQU   SDWAAEC2+2
SDWAICD2 EQU   SDWAINC2+1
SDWASRSV EQU   SDWA+136
SDWAIDNT EQU   SDWA+200
SDWAMCH  EQU   SDWA+204
SDWASTCK EQU   SDWAMCH
SDWAMCHI EQU   SDWAMCH+8
SDWAMCHS EQU   SDWAMCHI
SDWAMCHD EQU   SDWAMCHI+1
SDWARSR1 EQU   SDWAMCH+12
SDWARSR2 EQU   SDWAMCH+13
SDWAFLGS EQU   SDWA+232
SDWAERRA EQU   SDWAFLGS
SDWAERRB EQU   SDWAFLGS+1
SDWAERRC EQU   SDWAFLGS+2
SDWAERRD EQU   SDWAFLGS+3
SDWACLUP EQU   SDWAERRD
SDWAIOFS EQU   SDWA+238
SDWACPUA EQU   SDWA+248
SDWAPARQ EQU   SDWA+252
SDWAACF2 EQU   SDWAPARQ+1
SDWAACF3 EQU   SDWAPARQ+2
SDWAACF4 EQU   SDWAPARQ+3
SDWALKWA EQU   SDWA+256
SDWALKWS EQU   SDWALKWA
SDWARECP EQU   SDWA+292
SDWASNPA EQU   SDWA+320
SDWADUMP EQU   SDWASNPA
SDWADPFS EQU   SDWADUMP+1
SDWADDAT EQU   SDWASNPA+4
SDWASDAT EQU   SDWADDAT
SDWASDA0 EQU   SDWASDAT
SDWASDA1 EQU   SDWASDAT+1
SDWAPDAT EQU   SDWADDAT+2
SDWADPSA EQU   SDWA+328
SDWADPSL EQU   SDWADPSA
SDWARA   EQU   SDWA+400
SDWADPVA EQU   SDWARA+2
APES     EQU   0
APESID   EQU   APES
APESADDR EQU   APES+8
APESAPMV EQU   APES+12
APESFLGS EQU   APES+16
APESFLG0 EQU   APESFLGS
APESFDMP EQU   APESFLG0
APESFREC EQU   APESFLG0
APESFSDP EQU   APESFLG0
APESFEXR EQU   APESFLG0
APESFLG1 EQU   APESFLGS+1
APESFPRV EQU   APESFLG1
APESSUID EQU   APES+18
APESCODE EQU   APES+19
APESMXCD EQU   APES+22
APESEXRA EQU   APES+36
APESREGP EQU   APES+44
APESREGZ EQU   APES+48
APESMOD  EQU   APES+112
APESPROC EQU   APES+120
APESFRR  EQU   APES+128
APESREGS EQU   0
APESREGF EQU   APESREGS+60
APESRTRY EQU   APESREGF
APESMV   EQU   0
APCVZDAL EQU   0
APCVZDAP EQU   0
APCVZDBK EQU   0
APCVZDDA EQU   0
APCVZDDQ EQU   0
APCVZDEQ EQU   0
APCVZDID EQU   0
APCVZDIO EQU   0
APCVZDIP EQU   0
APCVZDMD EQU   0
APCVZDMM EQU   0
APCVZDQR EQU   0
APCVZDRI EQU   0
APCVZDUA EQU   0
APCVZDUL EQU   0
APCVZDWI EQU   0
APCVZDWT EQU   0
APCVZDX1 EQU   0
APCVZDX2 EQU   0
APCVZDX3 EQU   0
APCVZDX4 EQU   0
APCVZD10 EQU   0
APCVZD20 EQU   0
APCVZD4E EQU   0
APCVZD40 EQU   0
APCVZD41 EQU   0
APCVZD42 EQU   0
APCVZD43 EQU   0
APCVZD44 EQU   0
APCVZD45 EQU   0
APCVZD46 EQU   0
APCVZD47 EQU   0
APCVZD48 EQU   0
APCVZD49 EQU   0
APCVZD60 EQU   0
APCVZD80 EQU   0
APCVZD81 EQU   0
APCVZD82 EQU   0
APCVZD83 EQU   0
APCVZJAA EQU   0
APCVZJAD EQU   0
APCVZJAG EQU   0
APCVZJAJ EQU   0
APCVZJAM EQU   0
APCVZJAP EQU   0
APCVZJAX EQU   0
APCVZJAY EQU   0
APCVZJBA EQU   0
APCVZJBD EQU   0
APCVZJBG EQU   0
APCVZJBJ EQU   0
APCVZJBM EQU   0
APCVZJDA EQU   0
APCVZJDD EQU   0
APCVZJDG EQU   0
APCVZJDJ EQU   0
APCVZJDM EQU   0
APCVZJHF EQU   0
APCVZJHQ EQU   0
APCVZJHR EQU   0
APCVZJHT EQU   0
APCVZJHW EQU   0
APCVZJH0 EQU   0
APCVZJI0 EQU   0
APCVZJJ0 EQU   0
APCVZKAA EQU   0
APCVZKBA EQU   0
APCVZKBB EQU   0
APCVZKBC EQU   0
APCVZKBD EQU   0
APCVZKBE EQU   0
APCVZKBF EQU   0
APCVZKCA EQU   0
APCVZKDA EQU   0
APCVZKGA EQU   0
APCVZKGB EQU   0
APCVZKGC EQU   0
APCVZKGD EQU   0
APCVZLCA EQU   0
APCVZLCB EQU   0
APCVZMBA EQU   0
APCVZMBD EQU   0
APCVZMBG EQU   0
APCVZMBH EQU   0
APCVZMBK EQU   0
APCVZMBM EQU   0
APCVZMIB EQU   0
APCVZMIC EQU   0
APCVZMIF EQU   0
APCVZMJB EQU   0
APCVZMJC EQU   0
APCVZMJH EQU   0
APCVZMJI EQU   0
APCVZMMA EQU   0
APCVZUAA EQU   0
APCVZUAB EQU   0
APCVZUAC EQU   0
APCVZUAD EQU   0
APCVZUAE EQU   0
APCVZUAF EQU   0
APCVZUBB EQU   0
APCVZUFA EQU   0
APCVZUHA EQU   0
APCVZUHB EQU   0
APCVZUJA EQU   0
APCV1CMD EQU   0
APCV1JAA EQU   0
APCV1JBJ EQU   0
APCV1JHC EQU   0
APCV1JHL EQU   0
APCV1JHT EQU   0
APCV1MAB EQU   0
APCV1MBD EQU   0
APCV2JHC EQU   0
APCV2JHL EQU   0
APCV2MBD EQU   0
CNCLECB  EQU   0
I001C    EQU   0
I008P    EQU   0
I015F    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
I256C    EQU   0
CMBRX    EQU   CMBRXZZZ
CVTPTR   EQU   FLCCVT
ALLCWA   EQU   APAW
APCTZ    EQU   APCTZ@@@
APCTZUAA EQU   APCTZ
APCTZUAB EQU   APCTZ+4
APCTZUAC EQU   APCTZ+8
APCTZUAD EQU   APCTZ+12
APCTZUAE EQU   APCTZ+16
APCTZUBB EQU   APCTZ+24
APCTZD10 EQU   APCTZ+28
APCTZD20 EQU   APCTZ+32
APCTZD40 EQU   APCTZ+36
APCTZD41 EQU   APCTZ+40
APCTZD42 EQU   APCTZ+44
APCTZD43 EQU   APCTZ+48
APCTZD44 EQU   APCTZ+52
APCTZD45 EQU   APCTZ+56
APCTZD46 EQU   APCTZ+60
APCTZD47 EQU   APCTZ+64
APCTZD48 EQU   APCTZ+68
APCTZD49 EQU   APCTZ+72
APCTZD60 EQU   APCTZ+76
APCTZD80 EQU   APCTZ+80
APCTZD4E EQU   APCTZ+84
APCTZMBA EQU   APCTZ+88
APCTZMBD EQU   APCTZ+92
APCTZMBG EQU   APCTZ+96
APCTZDX1 EQU   APCTZ+104
APCTZDX2 EQU   APCTZ+108
APCTZDX3 EQU   APCTZ+112
APCTZDX4 EQU   APCTZ+116
APCTZMBH EQU   APCTZ+120
APCTZMBK EQU   APCTZ+124
APCTZMBM EQU   APCTZ+128
APCTZMJB EQU   APCTZ+132
APCTZMJC EQU   APCTZ+136
APCTZMJH EQU   APCTZ+140
APCTZMMA EQU   APCTZ+144
APCTZDMD EQU   APCTZ+148
APCTZD81 EQU   APCTZ+152
APCTZDID EQU   APCTZ+156
APCTZDRI EQU   APCTZ+160
APCTZMJI EQU   APCTZ+164
APCTZDWT EQU   APCTZ+168
APCTZDMM EQU   APCTZ+172
APCTZDAL EQU   APCTZ+176
APCTZDBK EQU   APCTZ+180
APCTZDIP EQU   APCTZ+184
APCTZDDA EQU   APCTZ+188
APCTZDUL EQU   APCTZ+192
APCTZDEQ EQU   APCTZ+196
APCTZDDQ EQU   APCTZ+200
APCTZDUA EQU   APCTZ+204
APCTZUAF EQU   APCTZ+208
APCTZUAG EQU   APCTZ+212
APCTZDIO EQU   APCTZ+216
APCTZUHA EQU   APCTZ+220
APCTZUHB EQU   APCTZ+224
APCTZJAA EQU   APCTZ+232
APCTZJAD EQU   APCTZ+236
APCTZJAG EQU   APCTZ+240
APCTZJAJ EQU   APCTZ+244
APCTZJAM EQU   APCTZ+248
APCTZJAP EQU   APCTZ+252
APCTZJAY EQU   APCTZ+256
APCTZUFA EQU   APCTZ+260
APCTZUJA EQU   APCTZ+264
APCTZDAP EQU   APCTZ+268
APCTZKAA EQU   APCTZ+272
APCTZD82 EQU   APCTZ+276
APCTZMIB EQU   APCTZ+280
APCTZMIC EQU   APCTZ+284
APCTZD83 EQU   APCTZ+288
APCTZMIF EQU   APCTZ+296
APCTZJH0 EQU   APCTZ+300
APCTZJI0 EQU   APCTZ+304
APCTZJI3 EQU   APCTZ+308
APCTZJJ0 EQU   APCTZ+312
APCTZJBA EQU   APCTZ+316
APCTZJBD EQU   APCTZ+320
APCTZJBG EQU   APCTZ+324
APCTZJBJ EQU   APCTZ+328
APCTZJBM EQU   APCTZ+332
APCTZKCA EQU   APCTZ+340
APCTZKDA EQU   APCTZ+344
APCTZJDA EQU   APCTZ+356
APCTZJDJ EQU   APCTZ+360
APCTZJH6 EQU   APCTZ+364
APCTZJHO EQU   APCTZ+368
APCTZJHF EQU   APCTZ+372
APCTZJHE EQU   APCTZ+376
APCTZDQR EQU   APCTZ+380
APCTZJHR EQU   APCTZ+384
APCTZJHT EQU   APCTZ+388
APCTZJHW EQU   APCTZ+392
APCTZ1   EQU   APCTZ@@1
APCTZKBA EQU   APCTZ1
APCTZKBC EQU   APCTZ1+4
APCTZKBB EQU   APCTZ1+8
APCTZJHC EQU   APCTZ1+20
APCTZJHQ EQU   APCTZ1+24
APCTZKBD EQU   APCTZ1+28
APCTZKBE EQU   APCTZ1+40
APCTZUKA EQU   APCTZ1+56
APCTZKBF EQU   APCTZ1+60
APCTZJDD EQU   APCTZ1+64
APCTZJDG EQU   APCTZ1+68
APCTZJDM EQU   APCTZ1+72
APCTZLCA EQU   APCTZ1+76
APCTZLCB EQU   APCTZ1+80
APCTZDWI EQU   APCTZ1+84
APCTZJAX EQU   APCTZ1+88
APCTZKGA EQU   APCTZ1+92
APCTZKGB EQU   APCTZ1+96
APCTZKGC EQU   APCTZ1+100
APCTZKGD EQU   APCTZ1+104
APCTU    EQU   APCTU@@@
APCT1MAB EQU   APCTU
APCT1MBD EQU   APCTU+4
APCT2MBD EQU   APCTU+8
APCT1CMD EQU   APCTU+12
APCT1JAA EQU   APCTU+20
APCT1JHC EQU   APCTU+24
APCT2JHC EQU   APCTU+28
APCT1JHT EQU   APCTU+32
APCT1JHL EQU   APCTU+36
APCT2JHL EQU   APCTU+40
APCT1JBJ EQU   APCTU+44
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTSV60  EQU   CVTS01+228
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
PSARSVTE EQU   PSARSVT
RBSECS03 EQU   RBEP
RBCDE    EQU   RBSECS03
RBCDFLGS EQU   RBCDE
RBSECS05 EQU   RBPGMQ
RBSQE    EQU   RBSECS05
RBSECS06 EQU   RBPGMQ
RBIQE    EQU   RBSECS06
RBSECS07 EQU   RBPGMQ
RBIQE2   EQU   RBSECS07
RBSECS08 EQU   IRBEND
RBSECS09 EQU   IRBEND
@NM00207 EQU   SSWAILEN
SUBPARMI EQU   @NM00207
FLC      EQU   PSA
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
RBRSV161 EQU   RBSECS09+64
RBSIRBWA EQU   RBSECS09
RBIQEWRK EQU   RBSECS08+4
RBNEXAV  EQU   RBSECS08
RBIQEA   EQU   RBIQE2
RBIQE1   EQU   RBIQE+1
RBUSE    EQU   RBIQE
RBSQEA   EQU   RBSQE+1
@NM00153 EQU   RBSQE
RBCDE1   EQU   RBCDE+1
RBCDLOAD EQU   RBCDFLGS
RBCDXCTL EQU   RBCDFLGS
RBCDSYNC EQU   RBCDFLGS
RBCDNODE EQU   RBCDFLGS
RBRSV010 EQU   RBCDFLGS
RBCDATCH EQU   RBCDFLGS
RBRSV009 EQU   RBCDFLGS
RBNOCELL EQU   RBCDFLGS
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTSUSP  EQU   CVTS01+692
CVTT6SVC EQU   CVTS01+688
CVTCDAL  EQU   CVTS01+684
CVTTCTL  EQU   CVTS01+680
CVTRSUME EQU   CVTS01+676
CVTJTERM EQU   CVTS01+672
CVTASMRM EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
@NM00063 EQU   APCTU+48
APCT1MBM EQU   APCTU+16
@NM00062 EQU   APCTZ1+108
@NM00061 EQU   APCTZ1+52
@NM00060 EQU   APCTZ1+48
@NM00059 EQU   APCTZ1+44
@NM00058 EQU   APCTZ1+36
@NM00057 EQU   APCTZ1+32
@NM00056 EQU   APCTZ1+16
@NM00055 EQU   APCTZ1+12
@NM00054 EQU   APCTZ+396
@NM00053 EQU   APCTZ+352
@NM00052 EQU   APCTZ+348
@NM00051 EQU   APCTZ+336
@NM00050 EQU   APCTZ+292
APCTZJFA EQU   APCTZ+228
APCTZMBR EQU   APCTZ+100
@NM00049 EQU   APCTZ+20
CMBXRCN  EQU   CMBRX+6
CMBXRCT  EQU   CMBRX+5
@NM00007 EQU   CMBRX+4
CMBRKT   EQU   CMBRX+2
CMBRMT   EQU   CMBRX
@NM00205 EQU   APESMV+6
@NM00204 EQU   APESMV+4
APESMVKW EQU   APESMV+2
APESMVMS EQU   APESMV
APESREGE EQU   APESREGS+56
APESREGD EQU   APESREGS+52
APESREGC EQU   APESREGS+48
APESREGB EQU   APESREGS+44
APESREGA EQU   APESREGS+40
APESREG9 EQU   APESREGS+36
APESREG8 EQU   APESREGS+32
APESREG7 EQU   APESREGS+28
APESREG6 EQU   APESREGS+24
APESREG5 EQU   APESREGS+20
APESREG4 EQU   APESREGS+16
APESREG3 EQU   APESREGS+12
APESREG2 EQU   APESREGS+8
APESREG1 EQU   APESREGS+4
APESREG0 EQU   APESREGS
APESSDWA EQU   APES+136
APESR14S EQU   APES+40
@NM00203 EQU   APES+32
@NM00202 EQU   APES+28
@NM00201 EQU   APES+24
@NM00200 EQU   APES+23
APESCNTR EQU   APES+21
APESCOD1 EQU   APES+20
@NM00199 EQU   APESSUID
APESSU33 EQU   APESSUID
APESUPSC EQU   APESFLG1
APESFSTE EQU   APESFLG1
APESFSDI EQU   APESFLG1
APESFGM  EQU   APESFLG1
APESFXLK EQU   APESFLG1
APESFLLK EQU   APESFLG1
APESFFRR EQU   APESFLG1
@NM00198 EQU   APESFLG0
APESFRTY EQU   APESFLG0
@NM00197 EQU   APESFLG0
APESUSER EQU   APES+4
@NM00196 EQU   SDWA+512
SDWAVRA  EQU   SDWARA+4
SDWAURAL EQU   SDWARA+3
@NM00195 EQU   SDWADPVA
SDWAEBC  EQU   SDWADPVA
SDWAHEX  EQU   SDWADPVA
SDWAVRAL EQU   SDWARA
SDWAERTM EQU   SDWA+396
SDWACOMP EQU   SDWA+392
SDWARCPL EQU   SDWA+364
@NM00194 EQU   SDWADPSA+32
SDWATO4  EQU   SDWADPSL+28
SDWAFRM4 EQU   SDWADPSL+24
SDWATO3  EQU   SDWADPSL+20
SDWAFRM3 EQU   SDWADPSL+16
SDWATO2  EQU   SDWADPSL+12
SDWAFRM2 EQU   SDWADPSL+8
SDWATO1  EQU   SDWADPSL+4
SDWAFRM1 EQU   SDWADPSL
@NM00193 EQU   SDWADDAT+3
@NM00192 EQU   SDWAPDAT
SDWAUSPL EQU   SDWAPDAT
SDWADPSW EQU   SDWAPDAT
SDWATJPA EQU   SDWAPDAT
SDWATLPA EQU   SDWAPDAT
SDWADREG EQU   SDWAPDAT
SDWADSAH EQU   SDWAPDAT
SDWADSAS EQU   SDWAPDAT
@NM00191 EQU   SDWASDA1
SDWAERR  EQU   SDWASDA1
SDWAIO   EQU   SDWASDA1
SDWADM   EQU   SDWASDA0
SDWAQQS  EQU   SDWASDA0
SDWACBS  EQU   SDWASDA0
SDWAGTF  EQU   SDWASDA0
SDWASWA  EQU   SDWASDA0
SDWALSQA EQU   SDWASDA0
SDWASQA  EQU   SDWASDA0
SDWANUC  EQU   SDWASDA0
@NM00190 EQU   SDWADUMP+2
@NM00189 EQU   SDWADPFS
SDWASLST EQU   SDWADPFS
@NM00188 EQU   SDWADPFS
SDWAENSN EQU   SDWADPFS
SDWADLST EQU   SDWADPFS
SDWADPT  EQU   SDWADPFS
SDWADPID EQU   SDWADUMP
SDWADPLA EQU   SDWA+316
SDWAREXN EQU   SDWARECP+16
SDWACSCT EQU   SDWARECP+8
SDWAMODN EQU   SDWARECP
SDWASEQ# EQU   SDWA+290
SDWAASID EQU   SDWA+288
SDWATALW EQU   SDWALKWS+28
SDWATDLW EQU   SDWALKWS+24
SDWATNLW EQU   SDWALKWS+20
SDWAAPLW EQU   SDWALKWS+16
SDWAIPLW EQU   SDWALKWS+12
SDWAILLW EQU   SDWALKWS+8
SDWAIULW EQU   SDWALKWS+4
SDWAICLW EQU   SDWALKWS
SDWAFLLK EQU   SDWAACF4
SDWACMS  EQU   SDWAACF4
SDWAOPTM EQU   SDWAACF4
SDWATADB EQU   SDWAACF4
SDWATDNB EQU   SDWAACF4
SDWATNCB EQU   SDWAACF4
SDWAILCH EQU   SDWAACF4
SDWAIUCB EQU   SDWAACF4
SDWAICAT EQU   SDWAACF3
SDWAIPRG EQU   SDWAACF3
SDWASALL EQU   SDWAACF3
SDWAASMP EQU   SDWAACF3
SDWADISP EQU   SDWAACF3
@NM00187 EQU   SDWAACF3
@NM00186 EQU   SDWAACF2
SDWAFREE EQU   SDWAACF2
SDWAUPRG EQU   SDWAACF2
@NM00185 EQU   SDWAACF2
SDWASPIN EQU   SDWAACF2
@NM00184 EQU   SDWAACF2
SDWARCRD EQU   SDWAACF2
SDWARCDE EQU   SDWAPARQ
SDWALCPU EQU   SDWACPUA+2
@NM00183 EQU   SDWACPUA
SDWARECA EQU   SDWA+244
SDWARTYA EQU   SDWA+240
SDWACPUI EQU   SDWA+239
@NM00182 EQU   SDWAIOFS
SDWANIOP EQU   SDWAIOFS
SDWANOIO EQU   SDWAIOFS
SDWAIOHT EQU   SDWAIOFS
SDWAIOQR EQU   SDWAIOFS
SDWAFMID EQU   SDWA+236
SDWAERFL EQU   SDWAERRD
SDWAMCIV EQU   SDWAERRD
SDWARPIV EQU   SDWAERRD
SDWAMABD EQU   SDWAERRD
SDWACTS  EQU   SDWAERRD
SDWASTAE EQU   SDWAERRD
SDWANRBE EQU   SDWAERRD
@NM00181 EQU   SDWAERRC
SDWAEAS  EQU   SDWAERRC
SDWAPERC EQU   SDWAERRC
SDWAIRB  EQU   SDWAERRC
SDWASTAI EQU   SDWAERRC
SDWASTAF EQU   SDWAERRC
SDWASRBM EQU   SDWAERRB
SDWALDIS EQU   SDWAERRB
SDWAENRB EQU   SDWAERRB
SDWATYP1 EQU   SDWAERRB
@NM00180 EQU   SDWAERRB
SDWAPGIO EQU   SDWAERRA
SDWATEXC EQU   SDWAERRA
SDWASVCE EQU   SDWAERRA
SDWAABTM EQU   SDWAERRA
SDWASVCD EQU   SDWAERRA
SDWARKEY EQU   SDWAERRA
SDWAPCHK EQU   SDWAERRA
SDWAMCHK EQU   SDWAERRA
SDWATIME EQU   SDWAMCH+20
SDWARFSA EQU   SDWAMCH+16
@NM00179 EQU   SDWAMCH+14
SDWAVEQR EQU   SDWARSR2
SDWAPGFX EQU   SDWARSR2
SDWAFLSQ EQU   SDWARSR2
SDWAFSQA EQU   SDWARSR2
SDWANUCL EQU   SDWARSR2
SDWASPER EQU   SDWARSR2
SDWAINTC EQU   SDWARSR2
SDWAOFLN EQU   SDWARSR2
SDWACHNG EQU   SDWARSR1
SDWAMSER EQU   SDWARSR1
@NM00178 EQU   SDWARSR1
SDWACPID EQU   SDWAMCH+10
SDWATERR EQU   SDWAMCHD
SDWAFPRX EQU   SDWAMCHD
SDWAINSF EQU   SDWAMCHD
SDWAACR  EQU   SDWAMCHD
SDWASCK  EQU   SDWAMCHD
SDWAPSWU EQU   SDWAMCHD
SDWAREGU EQU   SDWAMCHD
SDWASKYF EQU   SDWAMCHD
@NM00177 EQU   SDWAMCHS
SDWARSRF EQU   SDWAMCHS
SDWARSRC EQU   SDWAMCHS
SDWAINVP EQU   SDWAMCHS
SDWATSVL EQU   SDWAMCHS
SDWARCDF EQU   SDWAMCHS
SDWASRVL EQU   SDWAMCHS
SDWASCKE EQU   SDWASTCK+4
SDWASCKB EQU   SDWASTCK
SDWALNTH EQU   SDWAIDNT+1
SDWASPID EQU   SDWAIDNT
SDWASR15 EQU   SDWASRSV+60
SDWASR14 EQU   SDWASRSV+56
SDWASR13 EQU   SDWASRSV+52
SDWASR12 EQU   SDWASRSV+48
SDWASR11 EQU   SDWASRSV+44
SDWASR10 EQU   SDWASRSV+40
SDWASR09 EQU   SDWASRSV+36
SDWASR08 EQU   SDWASRSV+32
SDWASR07 EQU   SDWASRSV+28
SDWASR06 EQU   SDWASRSV+24
SDWASR05 EQU   SDWASRSV+20
SDWASR04 EQU   SDWASRSV+16
SDWASR03 EQU   SDWASRSV+12
SDWASR02 EQU   SDWASRSV+8
SDWASR01 EQU   SDWASRSV+4
SDWASR00 EQU   SDWASRSV
SDWATRN2 EQU   SDWAAEC2+4
SDWAIPC2 EQU   SDWAICD2
SDWAIMC2 EQU   SDWAICD2
SDWAIPR2 EQU   SDWAICD2
@NM00176 EQU   SDWAINC2
@NM00175 EQU   SDWAILC2
SDWAIL2  EQU   SDWAILC2
@NM00174 EQU   SDWAILC2
@NM00173 EQU   SDWAAEC2
SDWAADD2 EQU   SDWANXT2+1
@NM00172 EQU   SDWANXT2
@NM00171 EQU   SDWAEC2+3
SDWASGN2 EQU   SDWAINT2
SDWAEXP2 EQU   SDWAINT2
SDWADEC2 EQU   SDWAINT2
SDWAFPO2 EQU   SDWAINT2
SDWACC2  EQU   SDWAINT2
@NM00170 EQU   SDWAINT2
SDWAPGM2 EQU   SDWAMWP2
SDWAWAT2 EQU   SDWAMWP2
SDWAMCK2 EQU   SDWAMWP2
SDWAECT2 EQU   SDWAMWP2
SDWAKEY2 EQU   SDWAMWP2
SDWAEXT2 EQU   SDWAEMK2
SDWAIO2  EQU   SDWAEMK2
SDWATRM2 EQU   SDWAEMK2
@NM00169 EQU   SDWAEMK2
SDWAPER2 EQU   SDWAEMK2
@NM00168 EQU   SDWAEMK2
SDWATRAN EQU   SDWAAEC1+4
SDWAIPC1 EQU   SDWAICD1
SDWAIMC1 EQU   SDWAICD1
SDWAIPR1 EQU   SDWAICD1
@NM00167 EQU   SDWAINC1
@NM00166 EQU   SDWAILC1
SDWAIL1  EQU   SDWAILC1
@NM00165 EQU   SDWAILC1
@NM00164 EQU   SDWAAEC1
SDWAADD1 EQU   SDWANXT1+1
@NM00163 EQU   SDWANXT1
@NM00162 EQU   SDWAEC1+3
SDWASGN1 EQU   SDWAINT1
SDWAEXP1 EQU   SDWAINT1
SDWADEC1 EQU   SDWAINT1
SDWAFPO1 EQU   SDWAINT1
SDWACC1  EQU   SDWAINT1
@NM00161 EQU   SDWAINT1
SDWAPGM1 EQU   SDWAMWP1
SDWAWAT1 EQU   SDWAMWP1
SDWAMCK1 EQU   SDWAMWP1
SDWAECT1 EQU   SDWAMWP1
SDWAKEY1 EQU   SDWAMWP1
SDWAEXT1 EQU   SDWAEMK1
SDWAIO1  EQU   SDWAEMK1
SDWATRM1 EQU   SDWAEMK1
@NM00160 EQU   SDWAEMK1
SDWAPER1 EQU   SDWAEMK1
@NM00159 EQU   SDWAEMK1
SDWAIOBR EQU   SDWA+100
SDWAEPA  EQU   SDWA+96
@NM00158 EQU   SDWANAME+4
SDWARBAD EQU   SDWANAME
SDWAGR15 EQU   SDWAGRSV+60
SDWAGR14 EQU   SDWAGRSV+56
SDWAGR13 EQU   SDWAGRSV+52
SDWAGR12 EQU   SDWAGRSV+48
SDWAGR11 EQU   SDWAGRSV+44
SDWAGR10 EQU   SDWAGRSV+40
SDWAGR09 EQU   SDWAGRSV+36
SDWAGR08 EQU   SDWAGRSV+32
SDWAGR07 EQU   SDWAGRSV+28
SDWAGR06 EQU   SDWAGRSV+24
SDWAGR05 EQU   SDWAGRSV+20
SDWAGR04 EQU   SDWAGRSV+16
SDWAGR03 EQU   SDWAGRSV+12
SDWAGR02 EQU   SDWAGRSV+8
SDWAGR01 EQU   SDWAGRSV+4
SDWAGR00 EQU   SDWAGRSV
SDWANXTP EQU   SDWACTL2+5
SDWASGP  EQU   SDWAPMKP
SDWAEUP  EQU   SDWAPMKP
SDWADOP  EQU   SDWAPMKP
SDWAFPP  EQU   SDWAPMKP
SDWACCP  EQU   SDWAPMKP
SDWAILP  EQU   SDWAPMKP
SDWAINTP EQU   SDWACTL2+2
SDWASPVP EQU   SDWAMWPP
SDWAWATP EQU   SDWAMWPP
SDWAMCKP EQU   SDWAMWPP
@NM00157 EQU   SDWAMWPP
SDWAKEYP EQU   SDWAMWPP
SDWAEXTP EQU   SDWACMKP
SDWAIOP  EQU   SDWACMKP
SDWANXTA EQU   SDWACTL1+5
SDWASGA  EQU   SDWAPMKA
SDWAEUA  EQU   SDWAPMKA
SDWADOA  EQU   SDWAPMKA
SDWAFPA  EQU   SDWAPMKA
SDWACCA  EQU   SDWAPMKA
SDWAILA  EQU   SDWAPMKA
SDWAINTA EQU   SDWACTL1+2
SDWASPVA EQU   SDWAMWPA
SDWAWATA EQU   SDWAMWPA
SDWAMCKA EQU   SDWAMWPA
@NM00156 EQU   SDWAMWPA
SDWAKEYA EQU   SDWAMWPA
SDWAEXTA EQU   SDWACMKA
SDWAIOA  EQU   SDWACMKA
SDWACMPC EQU   SDWAABCC+1
@NM00155 EQU   SDWACMPF
SDWASTCC EQU   SDWACMPF
@NM00154 EQU   SDWACMPF
SDWASTEP EQU   SDWACMPF
SDWAREQ  EQU   SDWACMPF
SDWAPARM EQU   SDWA
SVRBEND  EQU   RBSECT+192
RBFEPARM EQU   RBSECT+168
SIRBEND  EQU   RBSECT+168
RBRSV158 EQU   RBRSV150
RBRSV157 EQU   RBRSV150
RBRSV156 EQU   RBRSV150
RBRSV155 EQU   RBRSV150
RBRSV154 EQU   RBRSV150
RBRSV153 EQU   RBRSV150
RBRSV152 EQU   RBRSV150
RBRSV151 EQU   RBRSV150
RBRSV149 EQU   RBSECT+166
RBRSV148 EQU   RBSECT+164
RBRSV169 EQU   RBSDATA+3
RBSID    EQU   RBSDATA+2
RBSPKEY  EQU   RBSDATA+1
RBRSV168 EQU   RBSFLG3
RBSTERMO EQU   RBSFLG3
RBSBRNTR EQU   RBSFLG3
RBSPRNTR EQU   RBSFLG3
RBSCNCEL EQU   RBSFLG3
RBSRECRD EQU   RBSFLG3
RBSTERMI EQU   RBSFLG3
RBRSV167 EQU   RBSFLG3
RBSOWNRA EQU   RBSOWNR+1
RBSSUPER EQU   RBSFLGS2
RBSKEY0  EQU   RBSFLGS2
RBRSV166 EQU   RBSFLGS2
RBRSV165 EQU   RBSFLGS2
RBSINUSE EQU   RBSFLGS2
RBRSV164 EQU   RBSFLGS2
RBSXCTL2 EQU   RBSFLGS2
RBRSV163 EQU   RBSFLGS2
RBSPARMA EQU   RBSPARM+1
RBSHALT  EQU   RBSIOPRC
RBSNOIOP EQU   RBSIOPRC
RBSASYNC EQU   RBSFLGS1
RBRSV162 EQU   RBSFLGS1
RBSESTAE EQU   RBSFLGS1
RBSDUMMY EQU   RBSFLGS1
RBSSTAR  EQU   RBSFLGS1
RBSSTAI  EQU   RBSFLGS1
RBSEXIT  EQU   RBSCBB+4
RBSCHAIN EQU   RBSCBB
TIRBEND  EQU   @NM00152+8
PRBEND   EQU   @NM00152+8
RBRSV146 EQU   RBRSV138
RBRSV145 EQU   RBRSV138
RBRSV144 EQU   RBRSV138
RBRSV143 EQU   RBRSV138
RBRSV142 EQU   RBRSV138
RBRSV141 EQU   RBRSV138
RBRSV140 EQU   RBRSV138
RBRSV139 EQU   RBRSV138
RBRSV137 EQU   @NM00152+6
RBRSV136 EQU   @NM00152+4
RBRSV135 EQU   @NM00152
@NM00151 EQU   RBSECT+32
@NM00150 EQU   @NM00148+1
RBSCF    EQU   @NM00149
RBPGMQ1  EQU   RBPGMQ+1
@NM00147 EQU   RBPGMQ
@NM00146 EQU   RBSECT+16
@NM00145 EQU   @NM00141
@NM00144 EQU   @NM00141
RBIQETP  EQU   @NM00141
RBUSIQE  EQU   RBETXR
RBATTN   EQU   @NM00141
@NM00143 EQU   @NM00141
@NM00142 EQU   @NM00141
RBPMSVRB EQU   @NM00139
RBATNXIT EQU   @NM00139
@NM00140 EQU   @NM00139
RBWAITP  EQU   @NM00139
RBFNSVRB EQU   RBTRSVRB
RBSIZE   EQU   RBSECT+8
RBABOPSW EQU   RBSECT+4
RBPPSAV1 EQU   RBPPSAV+1
@NM00137 EQU   RBPPSAV
RBPRFXND EQU   RBPREFIX+64
RBINTCOD EQU   RBINTCDA+1
RBINLNTH EQU   RBINTCDA
RBWCSA   EQU   RBPREFIX+60
RBRSV004 EQU   RBPREFIX+57
RBSSSYN  EQU   RBFLAGS1
RBSCB    EQU   RBFLAGS1
RBLONGWT EQU   RBFLAGS1
RBASIR   EQU   RBFLAGS1
RBRSV159 EQU   RBFLAGS1
RBABEND  EQU   RBFLAGS1
RBXWAIT  EQU   RBFLAGS1
RBSLOCK  EQU   RBFLAGS1
RBRTRAN  EQU   RBRTPSW2+4
RBRTINCD EQU   RBRTICIL+2
RBRTILC  EQU   RBRTICIL+1
RBRSV160 EQU   RBRTICIL
RBRTPSW1 EQU   RBRTOPSW
RBRSV062 EQU   RBRSV054
RBRSV061 EQU   RBRSV054
RBRSV060 EQU   RBRSV054
RBRSV059 EQU   RBRSV054
RBRSV058 EQU   RBRSV054
RBRSV057 EQU   RBRSV054
RBRSV056 EQU   RBRSV054
RBRSV055 EQU   RBRSV054
RBRSV053 EQU   RBPREFIX+38
RBRSV052 EQU   RBPREFIX+36
RBRSV051 EQU   RBPREFIX+32
RBPRFXST EQU   RBPREFIX+32
RBRSV050 EQU   RBPREFIX+28
RBRSV049 EQU   RBRSV041
RBRSV048 EQU   RBRSV041
RBRSV047 EQU   RBRSV041
RBRSV046 EQU   RBRSV041
RBRSV045 EQU   RBRSV041
RBRSV044 EQU   RBRSV041
RBRSV043 EQU   RBRSV041
RBRSV042 EQU   RBRSV041
RBRSV040 EQU   RBPREFIX+26
RBRSV039 EQU   RBPREFIX+24
RBRSV038 EQU   RBPREFIX+20
RBRSV037 EQU   RBPREFIX+16
RBRSV036 EQU   RBRSV028
RBRSV035 EQU   RBRSV028
RBRSV034 EQU   RBRSV028
RBRSV033 EQU   RBRSV028
RBRSV032 EQU   RBRSV028
RBRSV031 EQU   RBRSV028
RBRSV030 EQU   RBRSV028
RBRSV029 EQU   RBRSV028
RBRSV027 EQU   RBRSV019
RBRSV026 EQU   RBRSV019
RBRSV025 EQU   RBRSV019
RBRSV024 EQU   RBRSV019
RBRSV023 EQU   RBRSV019
RBRSV022 EQU   RBRSV019
RBRSV021 EQU   RBRSV019
RBRSV020 EQU   RBRSV019
RBRSV018 EQU   RBPREFIX+13
RBRSV017 EQU   RBPREFIX+12
RBSRV016 EQU   RBPREFIX+11
RBRSV015 EQU   RBPREFIX+10
RBRSV014 EQU   RBPREFIX+8
RBRSV013 EQU   RBPREFIX+4
RBRSV012 EQU   RBPREFIX
RBEXSAVE EQU   XRBESA
XRBREG15 EQU   RBGRS15
XRBREG14 EQU   RBGRS14
XRBREG13 EQU   RBGRS13
XRBREG12 EQU   RBGRS12
XRBREG11 EQU   RBGRS11
XRBREG10 EQU   RBGRS10
XRBREG9  EQU   RBGRS9
XRBREG8  EQU   RBGRS8
XRBREG7  EQU   RBGRS7
XRBREG6  EQU   RBGRS6
XRBREG5  EQU   RBGRS5
XRBREG4  EQU   RBGRS4
XRBREG3  EQU   RBGRS3
XRBREG2  EQU   RBGRS2
XRBREG1  EQU   RBGRS1
XRBREG0  EQU   RBGRS0
XRBLNKA  EQU   RBLINKB
XRBWT    EQU   RBWCF
@NM00136 EQU   RBBASIC+24
RBOPSWPS EQU   RBOPSWB2
@NM00135 EQU   RBOPSWB2
@NM00134 EQU   XRBPSW
@NM00133 EQU   RBBASIC+12
XRBWAIT  EQU   RBECBWT
XRBFRRB  EQU   RBFDYN
@NM00132 EQU   XSTAB2
XRBACTV  EQU   RBFACTV
XRBTCBP  EQU   RBTCBNXT
@NM00131 EQU   XSTAB1
XRBCKPT  EQU   RBFTCKPT
@NM00130 EQU   XSTAB1
@NM00129 EQU   RBBASIC+8
@NM00128 EQU   RBEXRTNM+1
RBTMIND3 EQU   RBTMFLD
RBTMIND2 EQU   RBTMFLD
RBTMCMP  EQU   RBTMFLD
RBWLIM   EQU   RBTMFLD
RBRSV005 EQU   RBTMFLD
RBTMTOD  EQU   RBTMFLD
RBTMQUE  EQU   RBTMFLD
@NM00127 EQU   RBPRFX
@NM00126 EQU   TCBXTNT2+32
TCBRV181 EQU   TCBRV173
TCBRV180 EQU   TCBRV173
TCBRV179 EQU   TCBRV173
TCBRV178 EQU   TCBRV173
TCBRV177 EQU   TCBRV173
TCBRV176 EQU   TCBRV173
TCBRV175 EQU   TCBRV173
TCBRV174 EQU   TCBRV173
TCBRV172 EQU   TCBRV164
TCBRV171 EQU   TCBRV164
TCBRV170 EQU   TCBRV164
TCBRV169 EQU   TCBRV164
TCBRV168 EQU   TCBRV164
TCBRV167 EQU   TCBRV164
TCBRV166 EQU   TCBRV164
TCBRV165 EQU   TCBRV164
TCBRV163 EQU   TCBRV155
TCBRV162 EQU   TCBRV155
TCBRV161 EQU   TCBRV155
TCBRV160 EQU   TCBRV155
TCBRV159 EQU   TCBRV155
TCBRV158 EQU   TCBRV155
TCBRV157 EQU   TCBRV155
TCBRV156 EQU   TCBRV155
TCBRV154 EQU   TCBRV146
TCBRV153 EQU   TCBRV146
TCBRV152 EQU   TCBRV146
TCBRV151 EQU   TCBRV146
TCBRV150 EQU   TCBRV146
TCBRV149 EQU   TCBRV146
TCBRV148 EQU   TCBRV146
TCBRV147 EQU   TCBRV146
TCBRV145 EQU   TCBXTNT2+26
TCBRV144 EQU   TCBXTNT2+24
TCBRV143 EQU   TCBXTNT2+20
TCBRV142 EQU   TCBXTNT2+16
TCBRSV49 EQU   TCBXTNT2+12
TCBEVENT EQU   TCBXTNT2+8
TCBRCMP  EQU   TCBXTNT2+5
TCBRSVAB EQU   TCBXTNT2+4
TCBGTFA  EQU   TCBGTF+1
TCBRSV47 EQU   TCBTFLG
TCBRSV46 EQU   TCBTFLG
TCBRSV45 EQU   TCBTFLG
TCBRSV44 EQU   TCBTFLG
TCBRSV43 EQU   TCBTFLG
TCBDSPIT EQU   TCBTFLG
TCBERRTN EQU   TCBTFLG
TCBASYNC EQU   TCBTFLG
@NM00125 EQU   TCB+296
TCBSVCA2 EQU   TCB+292
TCBSWASA EQU   TCB+288
TCBDBTB  EQU   TCB+284
TCBRPT   EQU   TCB+280
TCBRV141 EQU   TCBRV133
TCBRV140 EQU   TCBRV133
TCBRV139 EQU   TCBRV133
TCBRV138 EQU   TCBRV133
TCBRV137 EQU   TCBRV133
TCBRV136 EQU   TCBRV133
TCBRV135 EQU   TCBRV133
TCBRV134 EQU   TCBRV133
TCBRV132 EQU   TCBRV124
TCBRV131 EQU   TCBRV124
TCBRV130 EQU   TCBRV124
TCBRV129 EQU   TCBRV124
TCBRV128 EQU   TCBRV124
TCBRV127 EQU   TCBRV124
TCBRV126 EQU   TCBRV124
TCBRV125 EQU   TCBRV124
TCBRV123 EQU   TCBFBYT2
TCBRV122 EQU   TCBFBYT2
TCBECBNV EQU   TCBFBYT2
TCBSSSYN EQU   TCBFBYT2
TCBFPRAP EQU   TCBFBYT2
TCBFDW   EQU   TCBFBYT2
TCBFMW   EQU   TCBFBYT2
TCBCNCB  EQU   TCBFBYT2
TCBLLH   EQU   TCBFBYT1
TCBRV113 EQU   TCBFBYT1
TCBEOT   EQU   TCBFBYT1
TCBRTM2  EQU   TCBFBYT1
TCBPGNLY EQU   TCBFBYT1
TCBNDIOS EQU   TCBFBYT1
TCBRV327 EQU   TCBFBYT1
TCBEOTFM EQU   TCBFBYT1
TCBAFFN  EQU   TCB+274
TCBRV326 EQU   TCB+272
TCBUKYSP EQU   TCB+268
TCBMODE  EQU   TCBESTAE+3
TCBERTYP EQU   TCBESTAE+2
TCBRV314 EQU   TCBESTRM
TCBRV313 EQU   TCBESTRM
TCBRV312 EQU   TCBESTRM
TCBRV311 EQU   TCBESTRM
TCBRV310 EQU   TCBESTRM
TCBRV309 EQU   TCBESTRM
TCBRV308 EQU   TCBESTRM
TCBETERM EQU   TCBESTRM
TCBSCBKY EQU   TCBESTAE
TCBRTM12 EQU   TCB+260
TCBTCBID EQU   TCB+256
TCBSTAWA EQU   TCB+252
TCBSWA   EQU   TCB+248
TCBFOEA  EQU   TCBFOE+1
TCBRSV42 EQU   TCBFOE
TCBCCPVI EQU   TCBXSCT+2
TCBRV325 EQU   TCBXSCT+1
TCBRV324 EQU   TCBXSCT1
TCBRV323 EQU   TCBXSCT1
TCBRV322 EQU   TCBXSCT1
TCBRV321 EQU   TCBXSCT1
TCBRV320 EQU   TCBXSCT1
TCBRV319 EQU   TCBXSCT1
TCBS3A   EQU   TCBXSCT1
TCBACTIV EQU   TCBXSCT1
TCBRSV41 EQU   TCB+239
TCBTID   EQU   TCB+238
TCBRSVAA EQU   TCB+237
TCBABCUR EQU   TCB+236
TCBTMSAV EQU   TCB+232
TCBIOTIM EQU   TCB+228
TCBRTWA  EQU   TCB+224
TCBBACK  EQU   TCB+220
TCBTIRB  EQU   TCB+216
TCBAECB  EQU   TCB+212
TCBEXT2A EQU   TCBEXT2+1
TCBRSV39 EQU   TCBEXT2
TCBSTMCT EQU   TCB+207
TCBSYSCT EQU   TCB+206
TCBRSV37 EQU   TCB+205
TCBEXSVC EQU   TCBDAR
TCBDARMS EQU   TCBDAR
TCBDARWT EQU   TCBDAR
TCBDARO  EQU   TCBDAR
TCBDARMC EQU   TCBDARC
TCBDARD  EQU   TCBDAR
TCBDARS  EQU   TCBDAR
TCBDARP  EQU   TCBDAR
TCBGTOFM EQU   TCBFLGS7
TCBADMP  EQU   TCBFLGS7
TCBRSTSK EQU   TCBFLGS7
TCBSVCS  EQU   TCBFLGS7
TCBSTACK EQU   TCBFLGS7
TCBRSV34 EQU   TCBFLGS7
TCBRSV33 EQU   TCBFLGS7
TCBGPECB EQU   TCBFLGS7
TCBNTJS  EQU   TCBFLGS6
TCBAPG   EQU   TCBFLGS6
TCBMIGR  EQU   TCBFLGS6
TCBRV303 EQU   TCBFLGS6
TCBSPVLK EQU   TCBFLGS6
TCBCPU   EQU   TCBFLGS6
TCBPIE17 EQU   TCBFLGS6
TCBRV    EQU   TCBFLGS6
TCBRSV79 EQU   TCBNDSP5
TCBRSV78 EQU   TCBNDSP5
TCBRSV77 EQU   TCBNDSP5
TCBRSV76 EQU   TCBNDSP5
TCBRSV75 EQU   TCBNDSP5
TCBRSV74 EQU   TCBNDSP5
TCBRSV95 EQU   TCBNDSP5
TCBRSV94 EQU   TCBNDSP5
TCBRSV93 EQU   TCBNDSP4
TCBRSV92 EQU   TCBNDSP4
TCBRSV91 EQU   TCBNDSP4
TCBRSV90 EQU   TCBNDSP4
TCBRSV89 EQU   TCBNDSP4
TCBRSV88 EQU   TCBNDSP4
TCBRSV87 EQU   TCBNDSP4
TCBRSV86 EQU   TCBNDSP4
TCBEXT1A EQU   TCBEXT1+1
TCBRSV32 EQU   TCBEXT1
TCBEXCPD EQU   TCB+192
TCBIOBRC EQU   TCB+188
TCBDDWTC EQU   TCB+186
TCBDDEXC EQU   TCB+184
TCBJSCBB EQU   TCBJSCB+1
@NM00124 EQU   TCBRECDE
TCBREC   EQU   TCBRECDE
TCBMDIDS EQU   TCB+176
TCBNDINT EQU   TCBNDSP3
TCBRSV27 EQU   TCBNDSP3
TCBRSV26 EQU   TCBNDSP3
TCBRSV25 EQU   TCBNDSP3
TCBRSV24 EQU   TCBNDSP3
TCBSRBND EQU   TCBNDSP3
TCBRV302 EQU   TCBNDSP3
TCBLJSND EQU   TCBNDSP3
TCBABE   EQU   TCBNDSP2
TCBDSS   EQU   TCBNDSP2
TCBOWAIT EQU   TCBNDSP2
TCBIWAIT EQU   TCBNDSP2
TCBNDTS  EQU   TCBNDSP2
TCBNDSVC EQU   TCBNDSP2
TCBSTPP  EQU   TCBNDSP2
TCBABD   EQU   TCBNDSP2
TCBRSV22 EQU   TCBNDSP1
TCBPIEND EQU   TCBNDSP1
TCBTPSP  EQU   TCBNDSP1
TCBDDRND EQU   TCBNDSP1
TCBRSPND EQU   TCBNDSP1
TCBRSTND EQU   TCBNDSP1
TCBDARPN EQU   TCBNDSP1
TCBDARTN EQU   TCBNDSP1
TCBNDSP0 EQU   TCBNDSP
TCBUSER  EQU   TCB+168
TCBTCTB  EQU   TCBTCT+1
TCBRSV9C EQU   TCBTCTGF
TCBRSV9B EQU   TCBTCTGF
TCBRSV9A EQU   TCBTCTGF
TCBRSV99 EQU   TCBTCTGF
TCBRSV98 EQU   TCBTCTGF
TCBRSV97 EQU   TCBTCTGF
TCBRSV20 EQU   TCBTCTGF
TCBSMFGF EQU   TCBTCTGF
TCBSTABB EQU   TCBSTAB+1
TCBSTCUR EQU   TCBNSTAE
TCBRV301 EQU   TCBNSTAE
TCBSYNCH EQU   TCBNSTAE
TCBHALT  EQU   TCBNSTAE
TCBPPSUP EQU   TCBNSTAE
TCB33E   EQU   TCBNSTAE
TCBQUIES EQU   TCBNSTAE
TCBSTABE EQU   TCBNSTAE
TCBAQE   EQU   TCB+156
TCBPQE   EQU   TCB+152
TCBTSDP  EQU   TCB+151
TCBTSLP  EQU   TCB+150
TCBSTPCT EQU   TCB+149
TCBCPUBN EQU   TCBTSFLG
TCBDYDSP EQU   TCBTSFLG
TCBRSV18 EQU   TCBTSFLG
TCBRSV17 EQU   TCBTSFLG
TCBTIOTG EQU   TCBTSFLG
TCBATT   EQU   TCBTSFLG
TCBSTPPR EQU   TCBTSFLG
TCBRV300 EQU   TCBTSTSK
TCBECB   EQU   TCB+144
TCBIQE   EQU   TCB+140
TCBOTC   EQU   TCB+132
TCBNTC   EQU   TCB+128
TCBJSTCA EQU   TCBJSTCB+1
TCBRSV16 EQU   TCBJSTCB
TCBTQET  EQU   TCBTME
TCBTCB   EQU   TCB+116
TCBFSAB  EQU   TCBFSA+1
TCBQEL   EQU   TCBFSA
TCBGRS15 EQU   TCBGRS+60
TCBGRS14 EQU   TCBGRS+56
TCBGRS13 EQU   TCBGRS+52
TCBGRS12 EQU   TCBGRS+48
TCBGRS11 EQU   TCBGRS+44
TCBGRS10 EQU   TCBGRS+40
TCBGRS9  EQU   TCBGRS+36
TCBGRS8  EQU   TCBGRS+32
TCBGRS7  EQU   TCBGRS+28
TCBGRS6  EQU   TCBGRS+24
TCBGRS5  EQU   TCBGRS+20
TCBGRS4  EQU   TCBGRS+16
TCBGRS3  EQU   TCBGRS+12
TCBGRS2  EQU   TCBGRS+8
TCBGRS1  EQU   TCBGRS+4
TCBGRS0  EQU   TCBGRS
TCBJPQB  EQU   TCBJPQ+1
TCBRSV15 EQU   TCBPURGE
TCBRSV14 EQU   TCBPURGE
TCBRSV13 EQU   TCBPURGE
TCBRSV12 EQU   TCBPURGE
TCBRSV11 EQU   TCBPURGE
TCBRSV10 EQU   TCBPURGE
TCBRSV09 EQU   TCBPURGE
TCBJPQF  EQU   TCBPURGE
TCBJLB   EQU   TCB+40
TCBLLS   EQU   TCB+36
TCBDSP   EQU   TCB+35
TCBLMP   EQU   TCB+34
TCBPNDSP EQU   TCBFLGS5
TCBFCD1  EQU   TCBFLGS5
TCBSTP   EQU   TCBFLGS5
TCBSYS   EQU   TCBFLGS5
TCBANDSP EQU   TCBFLGS5
TCBPAGE  EQU   TCBFLGS5
TCBUXNDF EQU   TCBABWF
TCBFC    EQU   TCBFLGS5
TCBONDSP EQU   TCBFLGS4
TCBMPCND EQU   TCBFLGS4
TCBMPCVQ EQU   TCBFLGS4
TCBUXNDV EQU   TCBFLGS4
TCBHNDSP EQU   TCBFLGS4
TCBRQENA EQU   TCBFLGS4
TCBSER   EQU   TCBFLGS4
TCBNDUMP EQU   TCBFLGS4
TCBDWSTA EQU   TCBFLGS3
TCBRSV08 EQU   TCBFLGS3
TCBRSV07 EQU   TCBFLGS3
TCBRSV06 EQU   TCBFLGS3
TCBABGM  EQU   TCBFLGS3
TCBABTRM EQU   TCBFLGS3
TCBADINP EQU   TCBFLGS3
TCBFSM   EQU   TCBFLGS3
TCBFTS   EQU   TCBFLGS2
TCBFETXR EQU   TCBFLGS2
TCBFDSOP EQU   TCBFLGS2
TCBFJMC  EQU   TCBFLGS2
TCBFSMC  EQU   TCBFLGS2
TCBFABOP EQU   TCBFLGS2
TCBFSTI  EQU   TCBFLGS2
TCBFOINP EQU   TCBFLGS2
TCBFX    EQU   TCBFLGS1
TCBFS    EQU   TCBFLGS1
TCBFT    EQU   TCBFLGS1
TCBPDUMP EQU   TCBFLGS1
TCBNONPR EQU   TCBFLGS1
TCBFERA  EQU   TCBFLGS1
TCBFE    EQU   TCBFLGS1
TCBFA    EQU   TCBFLGS1
TCBZERO  EQU   TCBPKF
TCBFLAG  EQU   TCBPKF
TCBMSSB  EQU   TCBMSS+1
TCBRSV03 EQU   TCBMSS
TCBTRNB  EQU   TCBTRN+1
TCBRSV02 EQU   TCBABF
TCBOLTEP EQU   TCBABF
TCBTCP   EQU   TCBABF
TCBTCPP  EQU   TCBABF
TCBRSV01 EQU   TCBABF
TCBGRPH  EQU   TCBABF
TCBNOCHK EQU   TCBABF
TCBMOD91 EQU   TCBABF
TCBCMPC  EQU   TCBCMP+1
TCBRV318 EQU   TCBCMSG
TCBRV317 EQU   TCBCIND
TCBRV316 EQU   TCBCWTO
TCBCASID EQU   TCBCDBL
TCBNOCC  EQU   TCBSTCC
TCBDMPO  EQU   TCBCPP
TCBCSTEP EQU   TCBCMPF
TCBCREQ  EQU   TCBCMPF
TCBTIO   EQU   TCB+12
TCBDEB   EQU   TCB+8
TCBPIEA  EQU   TCBPIE+1
TCBPM    EQU   TCBPMASK
@NM00123 EQU   TCBPMASK
TCBFRS6  EQU   TCBFRS+24
TCBFRS4  EQU   TCBFRS+16
TCBFRS2  EQU   TCBFRS+8
TCBFRS0  EQU   TCBFRS
ASXBEND  EQU   ASXB+232
ASXBRV25 EQU   ASXB+228
ASXBRV24 EQU   ASXB+224
ASXBPT0E EQU   ASXB+220
ASXBCRB4 EQU   ASXBCASW+3
ASXBCRB3 EQU   ASXBCASW+2
ASXBCRB2 EQU   ASXBCASW+1
ASXBCR06 EQU   ASXBCRB1
ASXBCR05 EQU   ASXBCRB1
ASXBCR04 EQU   ASXBCRB1
ASXBCR03 EQU   ASXBCRB1
ASXBCR02 EQU   ASXBCRB1
ASXBCR01 EQU   ASXBCRB1
ASXBTFD  EQU   ASXBCRB1
ASXBPIP  EQU   ASXBCRB1
ASXBCTDC EQU   ASXB+212
ASXBTDCB EQU   ASXB+208
ASXBRV19 EQU   ASXB+204
ASXBSENV EQU   ASXBSECR+1
ASXBRV34 EQU   ASCBSFLG
ASXBRV33 EQU   ASCBSFLG
ASXBRV32 EQU   ASCBSFLG
ASXBRV31 EQU   ASCBSFLG
ASXBRV30 EQU   ASCBSFLG
ASXBRV29 EQU   ASCBSFLG
ASXBRV28 EQU   ASCBSFLG
ASXBRV27 EQU   ASCBSFLG
ASXBUSER EQU   ASXB+192
ASXBLSRB EQU   ASXBAEQ+20
ASXBFSRB EQU   ASXBAEQ+16
ASXBLRQE EQU   ASXBAEQ+12
ASXBFRQE EQU   ASXBAEQ+8
ASXBLIQE EQU   ASXBAEQ+4
ASXBFIQE EQU   ASXBAEQ
ASXBETSK EQU   ASXB+164
ASXBSIRB EQU   ASXB+160
ASXBPSWD EQU   ASXB+152
ASXBPRG  EQU   ASXB+136
ASXBRV26 EQU   ASXB+132
ASXBOUSB EQU   ASXB+128
ASXBDDR  EQU   ASXB+124
ASXBRCTD EQU   ASXB+120
ASXBRSMD EQU   ASXB+116
ASXBSPSA EQU   ASXB+112
ASXBFRWA EQU   ASXB+108
ASXBFLSA EQU   ASXB+36
ASXBIHSA EQU   ASXB+32
ASXBRV15 EQU   ASXB+28
ASXBRV14 EQU   ASXB+24
ASXBLWA  EQU   ASXB+20
ASXBMPST EQU   ASXB+16
ASXBRS00 EQU   ASXB+14
ASXBTCBS EQU   ASXB+12
ASXBLTCB EQU   ASXB+8
ASXBASXB EQU   ASXB
ASXBEGIN EQU   ASXB
ASCBEND  EQU   ASCB+208
ASCBSRBT EQU   ASCB+200
ASCBSWTL EQU   ASCB+196
ASCBRS14 EQU   ASCB+195
ASCBSMCT EQU   ASCB+194
ASCBRS12 EQU   ASCB+192
ASCBPCTT EQU   ASCB+188
ASCBVGTT EQU   ASCB+184
ASCBRV43 EQU   ASCBSRQ4
ASCBRV42 EQU   ASCBSRQ4
ASCBRV41 EQU   ASCBSRQ4
ASCBRV40 EQU   ASCBSRQ4
ASCBRV39 EQU   ASCBSRQ4
ASCBRV38 EQU   ASCBSRQ4
ASCBRV37 EQU   ASCBSRQ4
ASCBRV36 EQU   ASCBSRQ4
ASCBRV35 EQU   ASCBSRQ3
ASCBRV34 EQU   ASCBSRQ3
ASCBRV33 EQU   ASCBSRQ3
ASCBRV32 EQU   ASCBSRQ3
ASCBRV31 EQU   ASCBSRQ3
ASCBRV30 EQU   ASCBSRQ3
ASCBRV29 EQU   ASCBSRQ3
ASCBRV28 EQU   ASCBSRQ3
ASCBRV27 EQU   ASCBSRQ2
ASCBRV26 EQU   ASCBSRQ2
ASCBRV25 EQU   ASCBSRQ2
ASCBRV24 EQU   ASCBSRQ2
ASCBRV23 EQU   ASCBSRQ2
ASCBRV22 EQU   ASCBSRQ2
ASCBRV21 EQU   ASCBSRQ2
ASCBRV20 EQU   ASCBSRQ2
ASCBRV19 EQU   ASCBSRQ1
ASCBRV18 EQU   ASCBSRQ1
ASCBRV17 EQU   ASCBSRQ1
ASCBRV16 EQU   ASCBSRQ1
ASCBRV15 EQU   ASCBSRQ1
ASCBRV14 EQU   ASCBSRQ1
ASCBRV13 EQU   ASCBSRQ1
ASCBSTA  EQU   ASCBSRQ1
ASCBJBNS EQU   ASCB+176
ASCBJBNI EQU   ASCB+172
ASCBMCC  EQU   ASCB+168
ASCBRTWA EQU   ASCB+164
ASCBIQEA EQU   ASCB+160
ASCBXMPQ EQU   ASCB+156
ASCBRS01 EQU   ASCB+154
ASCBFMCT EQU   ASCB+152
ASCBOUXB EQU   ASCB+148
ASCBOUCB EQU   ASCB+144
ASCBMECB EQU   ASCB+140
ASCBQECB EQU   ASCB+136
ASCBLSQH EQU   ASCBLKGP+4
ASCBLOCK EQU   ASCBLKGP
ASCBTCBS EQU   ASCB+124
ASCBNVSC EQU   ASCB+122
ASCBVSC  EQU   ASCB+120
ASCBSRBS EQU   ASCB+118
ASCBSSRB EQU   ASCB+116
ASCBRV06 EQU   ASCBFLG2
ASCBRV05 EQU   ASCBFLG2
ASCBRV04 EQU   ASCBFLG2
ASCBSNQS EQU   ASCBFLG2
ASCBS2S  EQU   ASCBFLG2
ASCBCEXT EQU   ASCBFLG2
ASCBPXMT EQU   ASCBFLG2
ASCBXMPT EQU   ASCBFLG2
ASCBRF07 EQU   ASCBDSP1
ASCBRF06 EQU   ASCBDSP1
ASCBRF05 EQU   ASCBDSP1
ASCBRF04 EQU   ASCBDSP1
ASCBRF03 EQU   ASCBDSP1
ASCBRF02 EQU   ASCBDSP1
ASCBFAIL EQU   ASCBDSP1
ASCBNOQ  EQU   ASCBDSP1
ASCBSWCT EQU   ASCB+112
ASCBTMCH EQU   ASCB+104
ASCBNSWP EQU   ASCBFLG1
ASCBTYP1 EQU   ASCBFLG1
ASCBSTND EQU   ASCBFLG1
ASCBABNT EQU   ASCBFLG1
ASCBTERM EQU   ASCBFLG1
ASCBS3S  EQU   ASCBFLG1
ASCBCMSH EQU   ASCBFLG1
ASCBTOFF EQU   ASCBFLG1
ASCBRF01 EQU   ASCBRCTF
ASCBTMLW EQU   ASCBRCTF
ASCBOUT  EQU   ASCBRCTF
ASCBWAIT EQU   ASCBRCTF
ASCBRV08 EQU   ASCBRCTF
ASCBFQU  EQU   ASCBRCTF
ASCBFRS  EQU   ASCBRCTF
ASCBTMNO EQU   ASCBRCTF
ASCBAFFN EQU   ASCBFW1
ASCBDUMP EQU   ASCB+96
ASCBRV44 EQU   ASCB+92
ASCBUBET EQU   ASCB+88
ASCBECB  EQU   ASCB+84
ASCBJSTL EQU   ASCB+80
ASCBEWST EQU   ASCB+72
ASCBEJST EQU   ASCB+64
ASCBTSB  EQU   ASCB+60
ASCBCSCB EQU   ASCB+56
ASCBRSM  EQU   ASCB+52
ASCBLDA  EQU   ASCB+48
ASCBSTOR EQU   ASCB+44
ASCBDP   EQU   ASCB+43
ASCBRV07 EQU   ASCB+42
ASCBIOSM EQU   ASCB+40
ASCBSEQN EQU   ASCB+38
ASCBCPUS EQU   ASCB+32
ASCBSPL  EQU   ASCB+28
ASCBIOSP EQU   ASCB+24
ASCBSYNC EQU   ASCBSUPC+4
ASCBSVRB EQU   ASCBSUPC
ASCBCMSF EQU   ASCB+12
ASCBBWDP EQU   ASCB+8
ASCBFWDP EQU   ASCB+4
ASCBASCB EQU   ASCB
ASCBEGIN EQU   ASCB
ECBEVNT  EQU   ECBEXTND
@NM00098 EQU   ECBEXTND
@NM00097 EQU   ECBBYTE3
@NM00096 EQU   ECBEXTBA
@NM00095 EQU   ECBCC
SSWAPVAL EQU   SSWAPREN+1
SSWAPLEN EQU   SSWAPREN
SSWASSNM EQU   SSWAHDR+2
SSAGGMSG EQU   SSAGGMBK+2
SSAGGMGL EQU   SSAGGMBK
SSAGJFCB EQU   SSAGARBK+44
SSAGSSNM EQU   SSAGARBK+40
SSAGADSP EQU   SSAGARBK+36
SSAGUNIT EQU   SSAGARBK+32
SSAGSOUT EQU   SSAGARBK+28
SSAGDUMY EQU   SSAGARBK+24
SSAGDISP EQU   SSAGARBK+20
@NM00094 EQU   SSAGARBK+10
SSAGDMLN EQU   SSAGARBK+8
SSAGRBFL EQU   SSAGARBK+2
SSAGRBLN EQU   SSAGARBK
SSAGGMLN EQU   SSAGEHDR+20
SSAGGPIC EQU   SSAGEHDR+6
SSAGGPEC EQU   SSAGEHDR+4
@NM00093 EQU   SSAGFLGS
SSAGLEN  EQU   SSAGEHDR
SSOBSSIB EQU   SSOB+8
SSOBLEN  EQU   SSOB+4
SSCTSSVT EQU   SSCT+16
SSCTRSV1 EQU   SSCT+13
@NM00092 EQU   SSCTFLG1
SSCTUPSS EQU   SSCTFLG1
SSCTSFOR EQU   SSCTFLG1
SSCTSNAM EQU   SSCT+8
SSCTSCTA EQU   SSCT+4
SSCTID   EQU   SSCT
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00091 EQU   CVTFIX+248
@NM00090 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTRSV99 EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTLDEV  EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTSV76Q EQU   CVTSV76C
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTSV76M EQU   CVTIOQET
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVT      EQU   CVTMAP
@NM00089 EQU   APVU+3040
@NM00088 EQU   APVUAUSE
APVUAPIO EQU   APVUAUSE
APVUMON  EQU   APVUAUSE
APVUWORK EQU   APVU+40
@NM00087 EQU   APVU+16
@NM00086 EQU   APVU+14
APVUANUM EQU   APVU+12
APVULEN  EQU   APVUSPLN+1
APVUSPNO EQU   APVUSPLN
APVUUSER EQU   APVU+4
APVUID   EQU   APVU
@NM00085 EQU   APGF+16
APGFTCB  EQU   APGF+12
APGFINIT EQU   APGF+1
APGFSUNC EQU   APGFSW
APGFSTCB EQU   APGFSW
APGFSLCK EQU   APGFSW
APGFSPGE EQU   APGFSW
APGFSINL EQU   APGFSW
APGFSINA EQU   APGFSW
APSVWORK EQU   APSV+80
@NM00084 EQU   APSV+80
APSVFREE EQU   APSV+76
APSVAPSM EQU   APSV+72
APSVRG12 EQU   APSVREGS+56
APSVRG11 EQU   APSVREGS+52
APSVRG10 EQU   APSVREGS+48
APSVRG9  EQU   APSVREGS+44
APSVRG8  EQU   APSVREGS+40
APSVRG7  EQU   APSVREGS+36
APSVRG6  EQU   APSVREGS+32
APSVRG5  EQU   APSVREGS+28
APSVRG4  EQU   APSVREGS+24
APSVRG3  EQU   APSVREGS+20
APSVRG2  EQU   APSVREGS+16
APSVRG1  EQU   APSVREGS+12
APSVRG0  EQU   APSVREGS+8
APSVRG15 EQU   APSVREGS+4
APSVRG14 EQU   APSVREGS
APSVNEXT EQU   APSV+8
APSVPREV EQU   APSV+4
APSVAPSC EQU   APSV
@NM00083 EQU   APUB+120
@NM00082 EQU   APUB+112
APUBJBNM EQU   APUB+104
APUBSIZE EQU   APUB+102
APUBRSVD EQU   APUB+100
APUBASCB EQU   APUBDCB
@NM00081 EQU   APUBIOFG+4
@NM00080 EQU   APUBIOF3
APUBISHR EQU   APUBIOF3
APUBIRIP EQU   APUBIOF3
@NM00079 EQU   APUBIOF2
APUBIEXC EQU   APUBIOF2
@NM00078 EQU   APUBIOF1
APUBIIPL EQU   APUBIOF1
APUBIERR EQU   APUBIOF1
@NM00077 EQU   APUBIOF0
APUBICNL EQU   APUBIOF0
APUBINRG EQU   APUBIOF0
APUBIDAB EQU   APUBIOF0
APUBIDWN EQU   APUBIOF0
@NM00076 EQU   APUB+85
@NM00075 EQU   APUBSTAT
APUBQISC EQU   APUBSTAT
APUBPDMP EQU   APUBSTAT
APUBFDMP EQU   APUBSTAT
APUBRIPL EQU   APUBSTAT
@NM00074 EQU   APUBALF3
APUBSCAL EQU   APUBALF3
APUBSCAV EQU   APUBALF3
APUBBIST EQU   APUBALF3
APUBBTST EQU   APUBALF3
@NM00073 EQU   APUBALF2
APUBBIER EQU   APUBALF2
APUBBOPT EQU   APUBALF2
APUBBREQ EQU   APUBALF2
APUBBYT1 EQU   APUBALF2
@NM00072 EQU   APUBALF1
APUBUNLP EQU   APUBALF1
APUBDSBP EQU   APUBALF1
APUBBERR EQU   APUBALF1
APUBUNLD EQU   APUBALF1
APUBDSBL EQU   APUBALF1
APUBZRGN EQU   APUBALF1
@NM00071 EQU   APUBALF0
APUBOWN  EQU   APUBALF0
APUBSBCH EQU   APUBALF0
APUBCPU  EQU   APUB+78
APUBINIT EQU   APUB+76
APUBIPL  EQU   APUB+74
APUBERRJ EQU   APUBERRS+20
APUBERRD EQU   APUBERRS+18
APUBERRC EQU   APUBERRS+16
APUBERRB EQU   APUBERRS+14
APUBERRA EQU   APUBERRS+12
APUBERR9 EQU   APUBERRS+10
APUBERR3 EQU   APUBERRS+8
APUBERR2 EQU   APUBERRS+6
APUBERR1 EQU   APUBERRS+4
APUBERR0 EQU   APUBERRS+2
@NM00070 EQU   APUBERRS
@NM00069 EQU   APUB+50
APUBRGN  EQU   APUB+48
APUBERRT EQU   APUB+44
APUBMSTP EQU   APUB+40
APUBUBAP EQU   APUB+36
APUBAPDS EQU   APUB+32
APUBUCB  EQU   APUB+28
APUBIOCT EQU   APUB+24
APUBAPCT EQU   APUB+20
APUBUSER EQU   APUB+16
APUBNXIO EQU   APUB+12
APUBMSTR EQU   APUB+8
APUBAPUB EQU   APUB+4
APUBID   EQU   APUB
@NM00048 EQU   APCT+1556
APCTSVCT EQU   APCT+1552
APCTDAVT EQU   APCT+1548
APCTLOGL EQU   APCT+1544
@NM00047 EQU   APCT+1540
APCTDMPU EQU   APCT+1536
APCTDMPM EQU   APCT+1532
APCTNDMP EQU   APCT+1530
APCTASID EQU   APCT+1528
APCTLGPG EQU   APCT+1526
APCTLGLN EQU   APCT+1524
APCTABR  EQU   APCT+1116
APCTLOGD EQU   APCT+1108
APCTDCLD EQU   APCT+1104
APCTIOAP EQU   APCT+1100
@NM00046 EQU   APCT+1080
@NM00045 EQU   APCT+1078
APCTKCAX EQU   APCT+1076
APCTABND EQU   APCT+1072
@NM00044 EQU   APCT+1068
APCTAPIO EQU   APCT+1064
APCTCSCT EQU   APCT+1060
APCTSTDF EQU   APCT+1056
APCTSTMX EQU   APCT+1052
APCTRGMX EQU   APCT+1048
APCTSIZE EQU   APCT+1046
APCTCTUB EQU   APCT+1045
APCTMFID EQU   APCT+1044
APCTMFSZ EQU   APCT+1040
APCTCRTN EQU   APCT+1036
APCTAPCP EQU   APCT+1032
APCTAMNA EQU   APCT+1028
APCTEMNA EQU   APCT+1024
APCTAALP EQU   APCT+1020
APCTEALP EQU   APCT+1016
@NM00043 EQU   APCT+1012
@NM00042 EQU   APCT+1008
@NM00041 EQU   APCT+1004
APCTEIPL EQU   APCT+1000
@NM00040 EQU   APCT+996
@NM00039 EQU   APCT+992
@NM00038 EQU   APCT+988
@NM00037 EQU   APCT+984
@NM00036 EQU   APCT+980
APCTECPW EQU   APCT+976
APCTEULD EQU   APCT+972
APCTECPT EQU   APCT+968
APCTEALC EQU   APCT+964
APCTECBL EQU   APCT+960
APCTECIT EQU   APCT+956
APCTCQAF EQU   APCTCQAQ
APCTCQL  EQU   APCTAPCQ+4
APCTCQF  EQU   APCTAPCQ
APCTCQLK EQU   APCT+940
@NM00035 EQU   @NM00031+2
@NM00034 EQU   APCTPRSW
APCTAPST EQU   APCTPRSW
@NM00033 EQU   APCTPRSW
@NM00032 EQU   APCTSTAT
APCTWARM EQU   APCTSTAT
APCTTERM EQU   APCTSTAT
APCTHALT EQU   APCTSTAT
APCTQSCE EQU   APCTSTAT
APCTSTRT EQU   APCTSTAT
APCTACT  EQU   APCTSTAT
APCTVUNX EQU   APCT+935
APCTSOUT EQU   APCT+934
APCTDAID EQU   APCT+933
APCTSV34 EQU   APCT+932
APCTMJOB EQU   APCT+928
APCTTCB  EQU   APCT+924
APCTASCB EQU   APCT+920
APCTDCNW EQU   APCT+918
APCTDCNR EQU   APCT+916
@NM00030 EQU   APCT+912
@NM00029 EQU   APCT+908
@NM00028 EQU   APCT+904
@NM00027 EQU   APCT+900
@NM00026 EQU   APCTERRS+22
APCTERTJ EQU   APCTERRS+20
APCTERTD EQU   APCTERRS+18
APCTERTC EQU   APCTERRS+16
APCTERTB EQU   APCTERRS+14
APCTERTA EQU   APCTERRS+12
APCTERT9 EQU   APCTERRS+10
APCTERT3 EQU   APCTERRS+8
APCTERT2 EQU   APCTERRS+6
APCTERT1 EQU   APCTERRS+4
APCTERT0 EQU   APCTERRS+2
APCTERTT EQU   APCTERRS
APCTISUB EQU   APCT+868
APCTUBAP EQU   APCT+864
APCTUBIC EQU   APCT+856
APCTUBIS EQU   APCT+852
APCTAPUB EQU   APCT+848
APCTUBLK EQU   APCT+844
APCTBR1A EQU   APCTBR14+2
@NM00025 EQU   APCTBR14
APCTSMSZ EQU   APCTSMAD+2
@NM00024 EQU   APCTSMAD+1
@NM00023 EQU   APCTSMAD
APCTSMIS EQU   APCTSMIN+2
@NM00022 EQU   APCTSMIN+1
APCTSMSP EQU   APCTSMIN
@NM00021 EQU   APCT+30
APCTLINE EQU   APCT+28
APCTLBSZ EQU   APCT+24
APCTSSID EQU   APCTENQM+4
@NM00020 EQU   APCTENQM
APCTSSVT EQU   APCT+8
APCTUSER EQU   APCT+4
APCTID   EQU   APCT
@NM00012 EQU   EMSGAREA+12
SUBSYSID EQU   EMSGAREA+8
MSGID    EQU   EMSGAREA
@NM00068 EQU   APDS+144
@NM00067 EQU   APDS+100
APDSAPEP EQU   APDS+96
@NM00066 EQU   APDS+94
APDSMSK  EQU   APDS+72
@NM00065 EQU   APDS+69
APDSIOFS EQU   APDS+68
APDSDUMP EQU   APDS+67
APDSPGFX EQU   APDS+66
@NM00064 EQU   APDSFLG1
APDSFRST EQU   APDSFLG1
APDSSLPS EQU   APDSFLG0
APDSLSR  EQU   APDSFLG0
APDSIER  EQU   APDSFLG0
APDSARS  EQU   APDSFLG0
APDSVPER EQU   APDSFLG0
APDSVLER EQU   APDSFLG0
APDSTPGM EQU   APDSFLG0
APDSOWN  EQU   APDSFLG0
APDSAPUB EQU   APDS+48
APDSPERR EQU   APDS+40
APDSLERR EQU   APDS+32
APDSDEB  EQU   APDSTD+4
APDSTCB  EQU   APDSTD
APDSUSER EQU   APDS+8
@NM00011 EQU   @NM00010
NEXTASCB EQU   TASKINFO+8
CURTCB   EQU   TASKINFO+4
NEXTTCB  EQU   TASKINFO
@NM00122 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00121 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSALITA  EQU   PSA+764
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00120 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00119 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSARV013 EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAANEW  EQU   PSA+544
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00118 EQU   FLCFSA
@NM00117 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00116 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00115 EQU   FLCIOA
@NM00114 EQU   FLCMCLA+15
@NM00113 EQU   FLCMCLA+14
@NM00112 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00111 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00110 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00109 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00108 EQU   FLCPER
@NM00107 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00106 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00105 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00104 EQU   FLCPIILC
@NM00103 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00102 EQU   FLCSVILC
@NM00101 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00100 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00099 EQU   FLCICCW2+4
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00300 EQU   @RC00297
@RC00404 EQU   @EL00002
@RC00439 EQU   @RC00438
@RF00508 EQU   @RC00502
@RF00518 EQU   @RC00482
@RF00517 EQU   @RC00482
@RC00533 EQU   @EL00004
@RC00622 EQU   JHXDEQRS
@RF00632 EQU   JHXDEQRS
@RC00630 EQU   JHXDEQRS
@RT00742 EQU   @EL00007
@RC00753 EQU   @EL00008
@RC00778 EQU   @EL00008
@RC00762 EQU   @EL00008
@RF00377 EQU   @RC00300
@RF00376 EQU   @RC00300
@RC00623 EQU   @RC00622
@RC00763 EQU   @RC00762
@ENDDATA EQU   *
         END   IGTJH0,(C'PLS2349',0701,77230)
