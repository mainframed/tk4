TFRD     TITLE 'IEAVTFRD READ ROUTINE FOR IEAVTFSD                     *
                        '
IEAVTFRD CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(22)                                             0001
         DC    C'IEAVTFRD UZ14566 77280'                           0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
         L     @00,@SIZDATD                                        0001
         GETMAIN  R,LV=(0)
         LR    @11,@01                                             0001
         USING @DATD,@11                                           0001
         ST    @13,@SA00001+4                                      0001
         LM    @00,@01,20(@13)                                     0001
         ST    @11,8(,@13)                                         0001
         LR    @13,@11                                             0001
         MVC   @PC00001(4),0(@01)                                  0001
*   CONDCODE=GOODCODE;              /* START OUT ASSUMMING SUCCESSFUL
*                                      COMPLETION                    */
         SLR   CONDCODE,CONDCODE                                   0039
*   MIAINDEX=1;                     /* BEGIN SEARCH OF MIATABLE AT 0040
*                                      THE BEGINNING                 */
         MVC   MIAINDEX(4),@CF00043                                0040
*   ABDPLPTR=R1;                    /* SAVE AMDPRDMP PARMLIST BASE   */
         LR    ABDPLPTR,R1                                         0041
*   RFY                                                            0042
*     R1 UNRSTD;                                                   0042
*                                                                  0042
*   /*****************************************************************/
*   /*                                                               */
*   /* FOR THE FIRST CALL PERFORM INITIALIZATION                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0043
*   IF ADDR(VTFRDCB)=0              /* IS THE CONTROL BLOCK BASE ZERO*/
*     THEN                          /* PERFORM INITIALIZATION        */
         ICM   @08,15,CBPTR(ABDPLPTR)                              0043
         BNZ   @RF00043                                            0043
*     DO;                                                          0044
*       RFY                                                        0045
*        (R1,                                                      0045
*         RETCODE) RSTD;                                           0045
*       DO;                         /* GETMAIN (RC)                0046
*                                      LV(LENGTH(VTFRDCB))         0046
*                                      SP(ADPLSBPL)                  */
*         RESPECIFY                                                0047
*          (GPR01F,                                                0047
*           GPR15F,                                                0047
*           GPR00F) RESTRICTED;                                    0047
*         GPR01F=0;                 /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       0048
*         GPR15F=0;                 /* RC-TYPE GETMAIN               */
         SLR   GPR15F,GPR15F                                       0049
*         GPR00F=LENGTH(VTFRDCB);   /* LENGTH REQUESTED              */
         LA    GPR00F,12                                           0050
*         GPR15F=GPR15F×((ADPLSBPL)*256);/* SP IN BYTE 2             */
         SLR   @14,@14                                             0051
         IC    @14,ADPLSBPL(,ABDPLPTR)                             0051
         SLA   @14,8                                               0051
         OR    GPR15F,@14                                          0051
*         SVC(120);                 /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 0052
*         RESPECIFY                                                0053
*          (GPR01F,                                                0053
*           GPR15F,                                                0053
*           GPR00F) UNRESTRICTED;                                  0053
*       END;                        /* GETMAIN (RC)                0054
*                                      LV(LENGTH(VTFRDCB))         0054
*                                      SP(ADPLSBPL)                  */
*       IF RETCODE^=0               /* TEST THE GETMAIN RETURN CODE  */
*         THEN                      /* IF THE GETMAIN FAILED         */
         LTR   RETCODE,RETCODE                                     0055
         BZ    @RF00055                                            0055
*         DO;                       /* TERMINATE                     */
*           CONDCODE=GETCODE;       /* INDICATE THE RETURN CODE TO BE
*                                      GIVEN AT THE END              */
         LA    CONDCODE,28                                         0057
*           GO TO EXITCODE;                                        0058
         B     EXITCODE                                            0058
*         END;                                                     0059
*       CBPTR=R1;                   /* SAVE THE STORAGE ADDRESS      */
@RF00055 ST    R1,CBPTR(,ABDPLPTR)                                 0060
*       VTFRDCB=''B;                /* INIT THE CONTROL BLOCK        */
         L     @14,CBPTR(,ABDPLPTR)                                0061
         XC    VTFRDCB(12,@14),VTFRDCB(@14)                        0061
*       RFY                                                        0062
*        (R1,                                                      0062
*         RETCODE) RSTD;                                           0062
*                                                                  0063
*       /*************************************************************/
*       /*                                                           */
*       /* LOCATE THE PSEUDO VIRTUAL ADDRESS WHERE THE SUMMARY DUMP  */
*       /* DATA SHOULD BE. THE CVT MAPPING IS BASED ON THE VIRTUAL   */
*       /* ADDRESS OF THE CVT IN THE DUMP. THE GDA MAPPING IS BASED  */
*       /* ON THE VIRTUAL ADDR OF THE GDA OBTAINED FROM THE CVT IN   */
*       /* THE DUMP. THE PRIVATE AREA STARTING ADDRESS FROM THE GDA  */
*       /* IN THE DUMP IS USED AS THE FIRST PSEUDO ADDRESS OF THE    */
*       /* SUMMARY DUMP DATA                                         */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0063
*       IF ADDR(CVT)=0              /* CHECK THE CVTPTR IN THE     0063
*                                      AMDPRDMP PARMLIST             */
*         THEN                      /* IF THERE IS A CVT ADDRESS     */
         ICM   @14,15,CVTPTR(ABDPLPTR)                             0063
         BNZ   @RF00063                                            0063
*         DO;                       /* TRY TO GET THE GDA ADDRESS    */
*           CONDCODE=NCVTCODE;      /* INDICATE NO CVT               */
         LA    CONDCODE,20                                         0065
*           GO TO EXITCODE;         /* RETURN                        */
         B     EXITCODE                                            0066
*         END;                                                     0067
*       RFY                                                        0068
*        (R0,                                                      0068
*         R1,                                                      0068
*         RETCODE) RSTD;                                           0068
@RF00063 DS    0H                                                  0069
*       R0=ADDR(CVTGDA);            /* PUT THE VIRTUAL ADDRESS OF THE
*                                      DATA TO BE RETRIEVED IN REG 0 */
         L     @14,CVTPTR(,ABDPLPTR)                               0069
         LA    R0,CVTGDA(,@14)                                     0069
*       R1=ABDPLPTR;                /* RESTORE THE PTR TO THE      0070
*                                      AMDPRDMP PARMLIST             */
         LR    R1,ABDPLPTR                                         0070
*       CALL DUMPREAD;              /* CALL AMDPRDMP DUMP ACCESS   0071
*                                      SERVICE                       */
         L     @15,ADPLMEMA(,ABDPLPTR)                             0071
         BALR  @14,@15                                             0071
*       RFY                                                        0072
*         R1 UNRSTD;                                               0072
*       IF RETCODE^=0               /* CHECK THE SUCCESS OF THE DUMP
*                                      ACCESS                        */
*         THEN                      /* IF IT FAILED                  */
         LTR   RETCODE,RETCODE                                     0073
         BZ    @RF00073                                            0073
*         DO;                                                      0074
*           CONDCODE=NCVTCODE;      /* INDICATE RETURN CODE          */
         LA    CONDCODE,20                                         0075
*           GO TO EXITCODE;         /* RETURN                        */
         B     EXITCODE                                            0076
*           RFY                                                    0077
*             RETCODE UNRSTD;                                      0077
*         END;                                                     0078
*       RFY                                                        0079
*        (R0,                                                      0079
*         R1,                                                      0079
*         RETCODE) RSTD;                                           0079
@RF00073 DS    0H                                                  0080
*       R0=ADDR(PASTRT);            /* PUT THE VIRTUAL ADDRESS OF THE
*                                      DATA TO BE RETRIEVED IN REG 0 */
         LR    @14,R0                                              0080
         L     @14,GDAPTR(,@14)                                    0080
         LA    @14,PASTRT(,@14)                                    0080
         LR    R0,@14                                              0080
*       R1=ABDPLPTR;                /* RESTORE THE PTR TO THE      0081
*                                      AMDPRDMP PARMLIST             */
         LR    R1,ABDPLPTR                                         0081
*       CALL DUMPREAD;              /* CALL AMDPRDMP DUMP ACCESS   0082
*                                      SERVICE                       */
         L     @15,ADPLMEMA(,ABDPLPTR)                             0082
         BALR  @14,@15                                             0082
*       RFY                                                        0083
*         R1 UNRSTD;                                               0083
*       IF RETCODE^=0               /* CHECK THE SUCCESS OF THE DUMP
*                                      ACCESS                        */
*         THEN                      /* IF IT FAILED                  */
         LTR   RETCODE,RETCODE                                     0084
         BZ    @RF00084                                            0084
*         DO;                                                      0085
*           CONDCODE=NGDACODE;      /* INDICATE RETURN CODE          */
         LA    CONDCODE,24                                         0086
*           GO TO EXITCODE;         /* RETURN                        */
         B     EXITCODE                                            0087
*           RFY                                                    0088
*             RETCODE UNRSTD;                                      0088
*         END;                                                     0089
*       CBNXTADR=DATAPTR;           /* USE THE PRIVATE AREA STARTING
*                                      ADDRESS FROM THE GDA IN THE 0090
*                                      DUMP AT THE BEGINNING OF THE
*                                      PSEUDO VIRTUAL ADDRESSES FOR
*                                      THE SUM DUMP DATA             */
@RF00084 L     @01,CBPTR(,ABDPLPTR)                                0090
         LR    @08,R0                                              0090
         L     @08,DATAPTR(,@08)                                   0090
         ST    @08,CBNXTADR(,@01)                                  0090
*       RFY                                                        0091
*        (R0,                                                      0091
*         R1,                                                      0091
*         RETCODE) RSTD;                                           0091
*       R0=ADDR(NEXTDATA);          /* PUT THE VIRTUAL ADDRESS OF THE
*                                      DATA TO BE RETRIEVED IN REG 0 */
         LR    R0,@08                                              0092
*       R1=ABDPLPTR;                /* RESTORE THE PTR TO THE      0093
*                                      AMDPRDMP PARMLIST             */
         LR    R1,ABDPLPTR                                         0093
*       ADPLASID=SMDPASID;          /* CHANGE THE AMDPRDMP READ ASID
*                                      TO THE PSEUDO ONE FOR SUM DUMP*/
         MVC   ADPLASID(2,ABDPLPTR),@CH00758                       0094
*       CALL DUMPREAD;              /* CALL AMDPRDMP DUMP ACCESS   0095
*                                      SERVICE                       */
         L     @15,ADPLMEMA(,ABDPLPTR)                             0095
         BALR  @14,@15                                             0095
*       RFY                                                        0096
*         R1 UNRSTD;                                               0096
*       IF RETCODE^=0               /* CHECK THE SUCCESS OF THE DUMP
*                                      ACCESS                        */
*         THEN                      /* IF IT FAILED                  */
         LTR   RETCODE,RETCODE                                     0097
         BZ    @RF00097                                            0097
*         DO;                                                      0098
*           CONDCODE=NOSDCODE;      /* INDICATE RETURN CODE          */
         LA    CONDCODE,16                                         0099
*           GO TO EXITCODE;         /* RETURN                        */
         B     EXITCODE                                            0100
*           RFY                                                    0101
*             RETCODE UNRSTD;                                      0101
*         END;                                                     0102
*       RFY                                                        0103
*         R0 UNRSTD;                                               0103
@RF00097 DS    0H                                                  0104
*     END;                          /* OF INIT                       */
*                                                                  0105
*   /*****************************************************************/
*   /*                                                               */
*   /* CHECK THE ID OF THE RECORD PREVIOUSLY RECONSTRUCTED TO SEE IF */
*   /* IT WAS THE NORMAL END OF SUMDUMP RECORD. IF IT WAS SET THE    */
*   /* PROPER RETURN CODE AND TERMINATE. CHECKING FOR THIS ID IS DONE*/
*   /* HERE TO ALLOW THE CALLER ACCESS TO THE END OF SUMDUMP RECORD  */
*   /* WITHOUT REQUIRING HIM TO BE AWARE OF IT                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0105
*   ELSE                            /* IF THIS IS NOT THE FIRST CALL
*                                      TO THIS RTN                   */
*     IF ADDR(RRA)->SMDLRID=SMDEOD  /* LOOK AT THE ID OF THE RECORD
*                                      IN THE RRA FORM THE PREVIOUS
*                                      CALL TO THIS RTN              */
*       THEN                        /* IF IT WAS AN END OF SUMDUMP 0105
*                                      DUMP RECORD                   */
         B     @RC00043                                            0105
@RF00043 L     @08,CBPTR(,ABDPLPTR)                                0105
         L     @08,CBSDRECP(,@08)                                  0105
         CLC   SMDLRID(2,@08),@CH00869                             0105
         BNE   @RF00105                                            0105
*       DO;                                                        0106
*         CONDCODE=EOSDCODE;        /* SET THE END OF SUMDUMP CODE   */
         LA    CONDCODE,8                                          0107
*         GO TO EXITCODE;           /* RETURN                        */
         B     EXITCODE                                            0108
*       END;                                                       0109
*                                                                  0110
*   /*****************************************************************/
*   /*                                                               */
*   /* ATTEMPT TO READ THE NEXT SUMMARY DUMP LOGICAL RECORD HEADER   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0110
*   TOPTR=ADDR(HEADER);             /* INDICATE WHERE THE NEXT HEADER
*                                      IS TO BE MOVED INTO           */
@RF00105 DS    0H                                                  0110
@RC00043 LA    TOPTR,HEADER                                        0110
*   FROMLEN=LENGTH(SMDLRHDR);       /* LENGTH FOR NEXT READ          */
         LA    FROMLEN,20                                          0111
*   PASSCODE=NONCODE;               /* ERROR RETURN CODE FOR NEXT  0112
*                                      READ                          */
         MVC   PASSCODE(4),@CF00790                                0112
*   CALL PDREAD;                    /* READ THE NEXT SUMDUMP RECORD
*                                      HEADER INTO THE HOLDING AREA  */
         BAL   @14,PDREAD                                          0113
*   IF CONDCODE=GOODCODE            /* CHECK THE CONDITION CODE      */
*     THEN                          /* IF NOTHING HAPPENED PROCEED   */
         LTR   CONDCODE,CONDCODE                                   0114
         BNZ   @RF00114                                            0114
*     DO;                                                          0115
*       CALL SDMSGRTN;              /* WRITE OUT MSG INDICATED BY  0116
*                                      SMDLRMSG IN THIS HEADER       */
*                                                                  0116
         BAL   @14,SDMSGRTN                                        0116
*       /*************************************************************/
*       /*                                                           */
*       /* FREE LAST RECORD RECONSTRUCTION AREA IF THERE WAS ONE AND */
*       /* GET A NEW RECORD RECONSTRUCTION AREA (RRA) LARGE ENOUGH   */
*       /* FOR THE RECORD ABOUT TO BE FORMATTED              @ZA25122*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  0117
*       IF ADDR(RRA)^=0             /* CHECK TO BE SURE THERE IS AN
*                                      OLD RECORD RECONSTRUCTION AREA*/
*         THEN                      /* IF THERE IS FREE IT           */
         L     @08,CBPTR(,ABDPLPTR)                                0117
         L     @15,CBSDRECP(,@08)                                  0117
         LTR   @15,@15                                             0117
         BZ    @RF00117                                            0117
*         DO;                                                      0118
*           DO;                     /* FREEMAIN(RU)                0119
*                                      LV(CBSDRRAL)A(RRA)            */
*             RESPECIFY                                            0120
*              (GPR01F,                                            0120
*               GPR15F,                                            0120
*               GPR00F) RESTRICTED;                                0120
*             GPR01F=0;             /* REG 1 MUST BE ZERO            */
         ST    @15,@TF00001                                        0121
         SLR   GPR01F,GPR01F                                       0121
*             GPR15F=3;             /* SET TYPE                      */
         LA    GPR15F,3                                            0122
*             GPR00F=CBSDRRAL;      /* LENGTH REQUESTED              */
         L     GPR00F,CBSDRRAL(,@08)                               0123
*             GPR01F=ADDR(RRA);     /* SET REGISTER ONE              */
         L     GPR01F,@TF00001                                     0124
*             SVC(120);             /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 0125
*             RESPECIFY                                            0126
*              (GPR01F,                                            0126
*               GPR15F,                                            0126
*               GPR00F) UNRESTRICTED;                              0126
*           END;                    /* FREEMAIN(RU)                0127
*                                      LV(CBSDRRAL)A(RRA)            */
*           CBSDRECP=0;             /* INDICATE NO RRA               */
         L     @08,CBPTR(,ABDPLPTR)                                0128
         SLR   @15,@15                                             0128
         ST    @15,CBSDRECP(,@08)                                  0128
*         END;                                                     0129
*       CBSDRRAL=((SMDLRLEN+LENGTH(SMDLRHDR)+LENGTH(MIATABLE))&RNDTOPG)
*           +PAGESIZE;              /* DETERMINE THE LENGTH OF THE 0130
*                                      NEW RECORD RECONSTRUCTION AREA
*                                      NEEDED ROUNDED UP TO A PAGE 0130
*                                      BDY                           */
@RF00117 L     @08,CBPTR(,ABDPLPTR)                                0130
         LA    @15,HEADER                                          0130
         LA    @14,28                                              0130
         AL    @14,SMDLRLEN(,@15)                                  0130
         N     @14,@CF00912                                        0130
         AL    @14,@CF00910                                        0130
         ST    @14,CBSDRRAL(,@08)                                  0130
*       RFY                                                        0131
*        (R1,                                                      0131
*         RETCODE) RSTD;                                           0131
*       DO;                         /* GETMAIN (RC) LV(CBSDRRAL)   0132
*                                      SP(ADPLSBPL)                  */
*         RESPECIFY                                                0133
*          (GPR01F,                                                0133
*           GPR15F,                                                0133
*           GPR00F) RESTRICTED;                                    0133
*         GPR01F=0;                 /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       0134
*         GPR15F=0;                 /* RC-TYPE GETMAIN               */
         SLR   GPR15F,GPR15F                                       0135
*         GPR00F=CBSDRRAL;          /* LENGTH REQUESTED              */
         LR    GPR00F,@14                                          0136
*         GPR15F=GPR15F×((ADPLSBPL)*256);/* SP IN BYTE 2             */
         SLR   @14,@14                                             0137
         IC    @14,ADPLSBPL(,ABDPLPTR)                             0137
         SLA   @14,8                                               0137
         OR    GPR15F,@14                                          0137
*         SVC(120);                 /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 0138
*         RESPECIFY                                                0139
*          (GPR01F,                                                0139
*           GPR15F,                                                0139
*           GPR00F) UNRESTRICTED;                                  0139
*       END;                        /* GETMAIN (RC) LV(CBSDRRAL)   0140
*                                      SP(ADPLSBPL)                  */
*       IF RETCODE^=0               /* CHECK THE RETURN CODE         */
*         THEN                      /* IF GETMAIN FAILED             */
         LTR   RETCODE,RETCODE                                     0141
         BZ    @RF00141                                            0141
*         DO;                                                      0142
*           CONDCODE=GETCODE;       /* INDICATE GETMAIN FAILURE      */
         LA    CONDCODE,28                                         0143
*           GO TO EXITCODE;         /* RETURN                        */
         B     EXITCODE                                            0144
*         END;                                                     0145
*       CBSDRECP=R1;                /* SAVE THE ADDRESS OF THE NEW 0146
*                                      RECONSTRUCTION AREA           */
@RF00141 L     @14,CBPTR(,ABDPLPTR)                                0146
         ST    R1,CBSDRECP(,@14)                                   0146
*       RFY                                                        0147
*        (R1,                                                      0147
*         RETCODE) UNRSTD;                                         0147
*                                                                  0148
*       /*************************************************************/
*       /*                                                           */
*       /* RECONSTRUCT RECORD                                        */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0148
*       RRA(1:LENGTH(SMDLRHDR))=SMDLRHDR;/* START OUT BY MOVING IN 0148
*                                      THE HEADER                    */
         L     @08,CBPTR(,ABDPLPTR)                                0148
         L     @08,CBSDRECP(,@08)                                  0148
         LA    @15,HEADER                                          0148
         MVC   RRA(20,@08),SMDLRHDR(@15)                           0148
*       TOPTR=ADDR(RRA)+LENGTH(SMDLRHDR);/* POINT TO THE NEXT BYTE OF
*                                      SPACE IN THE RRA WHERE THE  0149
*                                      NEXT DATA IS TO BE PUT.       */
         AH    @08,@CH00806                                        0149
         LR    TOPTR,@08                                           0149
*       RELZERO=TOPTR;              /* RELATIVE ZERO IN THE DATA   0150
*                                      PORTION OF THE RECORD IS THE
*                                      BEGINNING                     */
         ST    TOPTR,RELZERO                                       0150
*       ENDCOND=ADDR(RRA)+LENGTH(SMDLRHDR)+SMDLRLEN;/* CALCULATE THE
*                                      LOOP END CONDITION            */
         AL    @08,SMDLRLEN(,@15)                                  0151
         ST    @08,ENDCOND                                         0151
*       DO WHILE TOPTR<ENDCOND&CONDCODE=GOODCODE;/* LOOP BUILDING THE
*                                      SEGMENTS OF THE RECORD FROM 0152
*                                      DATA PRESENT AND MISSING      */
         B     @DE00152                                            0152
@DL00152 DS    0H                                                  0153
*         FROMLEN=SMDLRPL;          /* SET UP LENGTH OF NEXT DATA    */
         LA    @08,HEADER                                          0153
         L     FROMLEN,SMDLRPL(,@08)                               0153
*         PASSCODE=PARTCODE;        /* SET UP ERROR CODE TO BE USED  */
         MVC   PASSCODE(4),@CF00082                                0154
*         CALL PDREAD;              /* MOVE IN THE WHOLE NEXT GROUP
*                                      OF DATA UP TO THE END OF THE
*                                      RECORD OR A BREAK IN THE    0155
*                                      RECORD, AND INCREMENT TOPTR BY
*                                      THE NUMBER OF BYTES MOVED     */
         BAL   @14,PDREAD                                          0155
*         IF CONDCODE=GOODCODE      /* IF THERE WAS NO TROUBLE AND 0156
*                                      THE                           */
*             &TOPTR<ENDCOND        /* END OF THE TOTAL DATA RECORD
*                                      HAS NOT BEEN REACHED          */
*           THEN                    /* THEN THERE SHOULD BE A      0156
*                                      CONTINUATION HEADER, AND THE
*                                      BYTES MISSSING WILL HAVE TO BE
*                                      REPLACED                      */
         LTR   CONDCODE,CONDCODE                                   0156
         BNZ   @RF00156                                            0156
         C     TOPTR,ENDCOND                                       0156
         BNL   @RF00156                                            0156
*           DO;                                                    0157
*             SAVEPTR=TOPTR;        /* TEMPORARILY SAVE THE TOPTR  0158
*                                      VALUE                         */
         ST    TOPTR,SAVEPTR                                       0158
*             TOPTR=ADDR(HEADER);   /* AND REPLACE IT WITH THE HEADER
*                                      HOLDING AREA ADDRESS.       0159
*                                      CONTINUATION RECORD HEADERS 0159
*                                      ARE NOT RETURNED AS PART OF 0159
*                                      THE RECONSTRUCTION            */
         LA    TOPTR,HEADER                                        0159
*             FROMLEN=LENGTH(SMDLRHDR);/* SET UP LENGTH OF NEXT DATA */
         LA    FROMLEN,20                                          0160
*             PASSCODE=PARTCODE;    /* SET UP ERROR CODE TO BE USED  */
         MVC   PASSCODE(4),@CF00082                                0161
*             CALL PDREAD;          /* READ THE NEXT SUMDUMP RECORD
*                                      HEADER INTO THE HOLDING AREA  */
         BAL   @14,PDREAD                                          0162
*             TOPTR=SAVEPTR;        /* RESTORE THE TOPTR             */
         L     TOPTR,SAVEPTR                                       0163
*             IF CONDCODE=GOODCODE  /* CHECK THE RETURN CODE         */
*               THEN                /* IF NOTHING HAPPENED PROCEED   */
         LTR   CONDCODE,CONDCODE                                   0164
         BNZ   @RF00164                                            0164
*               DO;                                                0165
*                 CALL SDMSGRTN;    /* WRITE OUT MSG INDICATED BY  0166
*                                      SMDLRMSG IN THIS HEADER       */
         BAL   @14,SDMSGRTN                                        0166
*                 FROMLEN=PAD;      /* SET UP THE PADDING CHAR       */
         L     FROMLEN,PAD                                         0167
*                 TOLEN=SMDLRADR-ADDR(RRA)->SMDLRADR/*               */
*                     -(TOPTR-ADDR(ADDR(RRA)->SMDLRDAT));/* CALCULATE
*                                      THE AMOUNT OF PADDING NEEDED
*                                      IN THE RRA TO REPLACE THE   0168
*                                      MISSING DATA                  */
         LA    @08,HEADER                                          0168
         L     @01,CBPTR(,ABDPLPTR)                                0168
         L     @15,CBSDRECP(,@01)                                  0168
         L     TOLEN,SMDLRADR(,@08)                                0168
         SL    TOLEN,SMDLRADR(,@15)                                0168
         LA    @08,SMDLRDAT(,@15)                                  0168
         LCR   @08,@08                                             0168
         ALR   @08,TOPTR                                           0168
         SLR   TOLEN,@08                                           0168
*                 IF MIAINDEX<DIM(MIATABLE)/* CHECK TO BE SURE     0169
*                                      ANOTHER ENTRY WON'T OVERFLOW
*                                      THE TABLE                     */
*                   THEN                                           0169
         L     @08,MIAINDEX                                        0169
         CH    @08,@CH00135                                        0169
         BNL   @RF00169                                            0169
*                   DO;                                            0170
*                     MIABEGIN(MIAINDEX)=TOPTR-RELZERO;/* CALC     0171
*                                      DISPLACEMENT OF THIS MISSING
*                                      DATA                          */
         L     @15,ENDCOND                                         0171
         LR    @14,@08                                             0171
         SLA   @14,3                                               0171
         LR    @03,TOPTR                                           0171
         SL    @03,RELZERO                                         0171
         LA    @02,0(@14,@15)                                      0171
         AL    @02,@CF00972                                        0171
         ST    @03,MIABEGIN(,@02)                                  0171
*                     MIAEND(MIAINDEX)=TOPTR-RELZERO+TOLEN-1;/* CALC
*                                      DISPLACEMENT OF END           */
         ALR   @03,TOLEN                                           0172
         BCTR  @03,0                                               0172
         AL    @15,@CF00973                                        0172
         ST    @03,MIAEND-4(@14,@15)                               0172
*                     MIAINDEX=MIAINDEX+1;                         0173
         AL    @08,@CF00043                                        0173
         ST    @08,MIAINDEX                                        0173
*                   END;                                           0174
*                 MVCL(TOPTR,FROMPTR);/* PUT IN THE PADDING AND    0175
*                                      INCREMENT TOPTR               */
@RF00169 MVCL  TOPTR,FROMPTR                                       0175
*               END;                /* OF CONDCODE TEST              */
*           END;                                                   0177
@RF00164 DS    0H                                                  0178
*       END;                        /* END OF LOOP TO RECONSTRUCT THE
*                                      NEXT RECORD                   */
@RF00156 DS    0H                                                  0178
@DE00152 C     TOPTR,ENDCOND                                       0178
         BNL   @DC00152                                            0178
         LTR   CONDCODE,CONDCODE                                   0178
         BZ    @DL00152                                            0178
@DC00152 DS    0H                                                  0179
*       IF TOPTR<ENDCOND            /* WAS THE RECORD RECONSTRUCTION
*                                      INCOMPLETE?                   */
*         THEN                      /* YES IT WAS                    */
         L     @08,ENDCOND                                         0179
         CR    TOPTR,@08                                           0179
         BNL   @RF00179                                            0179
*         DO;                       /* SO PAD OUT TO THE PROPER    0180
*                                      LENGTH                        */
*           FROMLEN=PAD;            /* SET UP THE PADDING CHAR       */
         L     FROMLEN,PAD                                         0181
*           TOLEN=ENDCOND-TOPTR;    /* SET THE LENGTH TO WHATEVER IS
*                                      LEFT                          */
         LR    TOLEN,@08                                           0182
         SLR   TOLEN,TOPTR                                         0182
*           IF MIAINDEX<DIM(MIATABLE)/* CHECK TO BE SURE ANOTHER   0183
*                                      ENTRY WON'T OVERFLOW THE TABLE*/
*             THEN                                                 0183
         L     @15,MIAINDEX                                        0183
         CH    @15,@CH00135                                        0183
         BNL   @RF00183                                            0183
*             DO;                                                  0184
*               MIABEGIN(MIAINDEX)=TOPTR-RELZERO;/* CALC DISPLACEMENT
*                                      OF THIS MISSING DATA          */
         LR    @14,@15                                             0185
         SLA   @14,3                                               0185
         LR    @03,TOPTR                                           0185
         SL    @03,RELZERO                                         0185
         LA    @02,0(@14,@08)                                      0185
         AL    @02,@CF00972                                        0185
         ST    @03,MIABEGIN(,@02)                                  0185
*               MIAEND(MIAINDEX)=TOPTR-RELZERO+TOLEN-1;/* CALC     0186
*                                      DISPLACEMENT OF END           */
         ALR   @03,TOLEN                                           0186
         BCTR  @03,0                                               0186
         AL    @08,@CF00973                                        0186
         ST    @03,MIAEND-4(@14,@08)                               0186
*               MIAINDEX=MIAINDEX+1;                               0187
         AL    @15,@CF00043                                        0187
         ST    @15,MIAINDEX                                        0187
*             END;                                                 0188
*           MVCL(TOPTR,FROMPTR);    /* PUT IN THE PADDING            */
@RF00183 MVCL  TOPTR,FROMPTR                                       0189
*         END;                      /* OF PADDING AN INCOMPLETE    0190
*                                      RECORD                        */
*       IF MIAINDEX>1               /* WAS PART OF THIS RECORD FILLED
*                                      IN WITH PADDING?              */
*         THEN                      /* YES                           */
@RF00179 CLC   MIAINDEX(4),@CF00043                                0191
         BNH   @RF00191                                            0191
*         CONDCODE=PARTCODE;        /* SO CHANGE THE CONDITION CODE
*                                      TO PARTIAL BECAUSE IT MAY BE
*                                      GOODCODE OR NONCODE FROM THE
*                                      LAST CALL TO PDREAD           */
         LA    CONDCODE,4                                          0192
*     END;                          /* OF CONDCODE TEST FOR NONCODE  */
@RF00191 DS    0H                                                  0194
*                                                                  0194
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS IS THE COMMON EXIT CODE BRANCHED TO WHENEVER A           */
*   /* TERMINATING CONDITION IS DETECTED. FOR ALL CONDITION CODES    */
*   /* GREATER THAN 0 WRITE OUT THE CORRESPONDING MSG                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0194
*EXITCODE:                                                         0194
*   IF CONDCODE^=GOODCODE           /* CHECK TO SEE IF THERE IS A MSG
*                                      TO BE WRITTEN                 */
*     THEN                          /* IF THERE IS                   */
@RF00114 DS    0H                                                  0194
EXITCODE LTR   CONDCODE,CONDCODE                                   0194
         BZ    @RF00194                                            0194
*     DO;                                                          0195
*       MSGPTR=FRDMSG(CONDCODE/4);  /* REDUCE THE CONDITION CODE TO
*                                      AN ARRAY INDEX AND USE IT TO
*                                      PICK THE APPROPRIATE MSG    0196
*                                      ADDRESS                       */
         LR    @00,CONDCODE                                        0196
         SRDA  @00,32                                              0196
         D     @00,@CF00082                                        0196
         SLA   @01,2                                               0196
         L     @08,@CA00923                                        0196
         AL    @08,@CF00973                                        0196
         L     MSGPTR,FRDMSG-FRDMSG(@01,@08)                       0196
*       OUTBUF(1:MSGLEN)=MSGTXT(1:MSGLEN);/* MOVE IN THE MSG         */
         L     @08,ADPLBUF(,ABDPLPTR)                              0197
         SLR   @03,@03                                             0197
         IC    @03,MSGLEN(,MSGPTR)                                 0197
         BCTR  @03,0                                               0197
         EX    @03,@SM00974                                        0197
*       DO INDEX=1 TO 2;            /* PRINT THE MSG AND 1 BLANK LINE*/
         LA    INDEX,1                                             0198
@DL00198 DS    0H                                                  0199
*         RFY                                                      0199
*           R1 RSTD;                                               0199
*         R1=ADDR(ABDPL);           /* RESTORE AMDPRDMP PARMLIST PTR */
         LR    R1,ABDPLPTR                                         0200
*         CALL LINEPRNT;            /* PRINT THE OUTPUT BUFFER       */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0201
         BALR  @14,@15                                             0201
*         RFY                                                      0202
*           R1 UNRSTD;              /* NO RETURN CODE                */
*       END;                                                       0203
         AL    INDEX,@CF00043                                      0203
         CH    INDEX,@CH00101                                      0203
         BNH   @DL00198                                            0203
*     END;                                                         0204
*   SA0=ADDR(RRA);                  /* SETUP SA TO PUT RRA ADDR IN R0*/
@RF00194 LA    @08,4                                               0205
         LR    @15,R13                                             0205
         ALR   @15,@08                                             0205
         L     @01,BACKPTR(,@15)                                   0205
         L     @15,CBPTR(,ABDPLPTR)                                0205
         L     @14,CBSDRECP(,@15)                                  0205
         ST    @14,SA0+20(,@01)                                    0205
*                                                                  0206
*   /*****************************************************************/
*   /*                                                               */
*   /* IF DATA IS NOT TO BE RETURNED THE STORAGE GOTTEN MUST BE FREED*/
*   /* BEFORE RETURNING FOR THE LAST TIME                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0206
*   IF CONDCODE>DATARET             /* CHECK TO SEE IF DATA IS BEING
*                                      RETURNED                      */
*     THEN                          /* IF NOT                        */
         CR    CONDCODE,@08                                        0206
         BNH   @RF00206                                            0206
*     DO;                                                          0207
*       IF ADDR(VTFRDCB)^=0&ADDR(RRA)^=0/* CHECK FOR AN RRA          */
*         THEN                      /* IF THERE IS ONE FREE IT       */
         SLR   @08,@08                                             0208
         CR    @15,@08                                             0208
         BE    @RF00208                                            0208
         CR    @14,@08                                             0208
         BE    @RF00208                                            0208
*         DO;                       /* FREEMAIN(RU)                0209
*                                      LV(CBSDRRAL)A(RRA)            */
*           RESPECIFY                                              0210
*            (GPR01F,                                              0210
*             GPR15F,                                              0210
*             GPR00F) RESTRICTED;                                  0210
*           GPR01F=0;               /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       0211
*           GPR15F=3;               /* SET TYPE                      */
         LA    GPR15F,3                                            0212
*           GPR00F=CBSDRRAL;        /* LENGTH REQUESTED              */
         L     @08,CBPTR(,ABDPLPTR)                                0213
         L     GPR00F,CBSDRRAL(,@08)                               0213
*           GPR01F=ADDR(RRA);       /* SET REGISTER ONE              */
         LR    GPR01F,@14                                          0214
*           SVC(120);               /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 0215
*           RESPECIFY                                              0216
*            (GPR01F,                                              0216
*             GPR15F,                                              0216
*             GPR00F) UNRESTRICTED;                                0216
*         END;                      /* FREEMAIN(RU)                0217
*                                      LV(CBSDRRAL)A(RRA)            */
*       IF ADDR(VTFRDCB)^=0         /* CHECK FOR THE CONTROL BLOCK   */
*         THEN                      /* IF IT IS THERE FREE IT        */
@RF00208 L     @08,CBPTR(,ABDPLPTR)                                0218
         LTR   @08,@08                                             0218
         BZ    @RF00218                                            0218
*         DO;                       /* FREEMAIN(RU)                0219
*                                      LV(LENGTH(VTFRDCB))A(VTFRDCB) */
*           RESPECIFY                                              0220
*            (GPR01F,                                              0220
*             GPR15F,                                              0220
*             GPR00F) RESTRICTED;                                  0220
*           GPR01F=0;               /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       0221
*           GPR15F=3;               /* SET TYPE                      */
         LA    GPR15F,3                                            0222
*           GPR00F=LENGTH(VTFRDCB); /* LENGTH REQUESTED              */
         LA    GPR00F,12                                           0223
*           GPR01F=ADDR(VTFRDCB);   /* SET REGISTER ONE              */
         LR    GPR01F,@08                                          0224
*           SVC(120);               /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 0225
*           RESPECIFY                                              0226
*            (GPR01F,                                              0226
*             GPR15F,                                              0226
*             GPR00F) UNRESTRICTED;                                0226
*         END;                      /* FREEMAIN(RU)                0227
*                                      LV(LENGTH(VTFRDCB))A(VTFRDCB) */
*       CBPTR=0;                    /* ZERO THE CONTROL BLOCK BASE IN
*                                      THE AMDPRDMP PARMLIST TO SHOW
*                                      IT HAS BEEN FREED             */
@RF00218 SLR   @08,@08                                             0228
         ST    @08,CBPTR(,ABDPLPTR)                                0228
*     END;                                                         0229
*   ELSE                            /* IF DATA IS BEING RETURNED     */
*     DO;                                                          0230
         B     @RC00206                                            0230
@RF00206 DS    0H                                                  0231
*       MIABEGIN(MIAINDEX)='80000000'X;/* FLAG THE ENTRY AFTER THE 0231
*                                      LAST VALID ONE TO SHOW THE END
*                                      OF THE TABLE                  */
         L     @08,ENDCOND                                         0231
         L     @15,MIAINDEX                                        0231
         SLA   @15,3                                               0231
         L     @14,@CF00958                                        0231
         LA    @01,0(@15,@08)                                      0231
         AL    @01,@CF00972                                        0231
         ST    @14,MIABEGIN(,@01)                                  0231
*       MIAEND(MIAINDEX)=PAD;       /* AND COPY THE PADDING CHAR INTO
*                                      THE FLAGGED ENTRY             */
         L     @14,PAD                                             0232
         AL    @08,@CF00973                                        0232
         ST    @14,MIAEND-4(@15,@08)                               0232
*     END;                                                         0233
*   RETURN CODE(CONDCODE);                                         0234
@RC00206 L     @13,4(,@13)                                         0234
         L     @00,@SIZDATD                                        0234
         LR    @01,@11                                             0234
         FREEMAIN R,LV=(0),A=(1)
         LR    @15,@10                                             0234
         L     @14,12(,@13)                                        0234
         LM    @00,@12,20(@13)                                     0234
         BR    @14                                                 0234
*SDMSGRTN:                                                         0235
*   PROC;                                                          0235
*                                                                  0235
@EL00001 L     @13,4(,@13)                                         0235
@EF00001 L     @00,@SIZDATD                                        0235
         LR    @01,@11                                             0235
         FREEMAIN R,LV=(0),A=(1)
@ER00001 LM    @14,@12,12(@13)                                     0235
         BR    @14                                                 0235
SDMSGRTN STM   @14,@12,@SA00002                                    0235
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS INTERNAL PROC CHECKS THE VALUE OF THE SMDLRMSG FIELD, AND*/
*   /* WRITE THE CORRESPONDING MSG INTO THE DUMP OUTPUT ON BEHALF OF */
*   /* SUMMARY DUMP.                                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0236
*   IF SMDLRMSG>0                   /* IS THERE A MSG ID             */
*     THEN                          /* YES THERE IS                  */
         LA    @08,HEADER                                          0236
         CLI   SMDLRMSG(@08),0                                     0236
         BNH   @RF00236                                            0236
*     DO;                                                          0237
*       IF SMDLRMSG>=SDMSGMAX       /* IS THE MSG ID BEYOND THE SCOPE
*                                      OF THE SDMSG TABLE?           */
*         THEN                                                     0238
         L     @15,@CA00924                                        0238
         CLC   SMDLRMSG(1,@08),SDMSGMAX-SDMSGTAB(@15)              0238
         BL    @RF00238                                            0238
*         DO;                                                      0239
*           RFY                                                    0240
*            (R0,                                                  0240
*             R1) RSTD;                                            0240
*           R0=SDMSG(SDMSGMAX);     /* YES SO USE THE LAST ENTRY   0241
*                                      VALUE WHICH IS A FORMAT     0241
*                                      PATTERN THAT WILL PRODUCE AN
*                                      ERROR MSG                     */
         SLR   @14,@14                                             0241
         IC    @14,SDMSGMAX-SDMSGTAB(,@15)                         0241
         SLA   @14,2                                               0241
         AL    @15,@CF00976                                        0241
         L     R0,SDMSG-SDMSGTAB-1(@14,@15)                        0241
*           ADPLFMT2=ADDR(SMDLRMSG);/* POINT TO THE MSG ID TO BE   0242
*                                      FORMATTED INTO THE MSG TEXT   */
         LA    @08,SMDLRMSG(,@08)                                  0242
         ST    @08,ADPLFMT2(,ABDPLPTR)                             0242
*           R1=ADDR(ABDPL);         /* POINT TO PARMLIST             */
         LR    R1,ABDPLPTR                                         0243
*           CALL FMTSERV;           /* HAVE THE AMDPRDMP FMT SERVICE
*                                      BUILD THE MSG                 */
         L     @15,ADPLFRMT(,ABDPLPTR)                             0244
         BALR  @14,@15                                             0244
*           RFY                                                    0245
*            (R0,                                                  0245
*             R1) UNRSTD;                                          0245
*         END;                                                     0246
*       ELSE                                                       0247
*         DO;                                                      0247
         B     @RC00238                                            0247
@RF00238 DS    0H                                                  0248
*           MSGPTR=SDMSG(SMDLRMSG); /* IT IS WITHIN THE TABLE SCOPE
*                                      SO USE IT TO CHOOSE THE MSG 0248
*                                      TEXT                          */
         LA    @08,HEADER                                          0248
         SLR   @15,@15                                             0248
         IC    @15,SMDLRMSG(,@08)                                  0248
         SLA   @15,2                                               0248
         L     @08,@CA00924                                        0248
         AL    @08,@CF00976                                        0248
         L     MSGPTR,SDMSG-SDMSGTAB-1(@15,@08)                    0248
*           OUTBUF(1:MSGLEN)=MSGTXT(1:MSGLEN);/* MOVE IN THE MSG     */
         L     @08,ADPLBUF(,ABDPLPTR)                              0249
         SLR   @03,@03                                             0249
         IC    @03,MSGLEN(,MSGPTR)                                 0249
         BCTR  @03,0                                               0249
         EX    @03,@SM00974                                        0249
*         END;                                                     0250
*       DO INDEX=1 TO 2;            /* PRINT THE MSG AND 1 BLANK LINE*/
@RC00238 LA    INDEX,1                                             0251
@DL00251 DS    0H                                                  0252
*         RFY                                                      0252
*           R1 RSTD;                                               0252
*         R1=ADDR(ABDPL);           /* RESTORE AMDPRDMP PARMLIST PTR */
         LR    R1,ABDPLPTR                                         0253
*         CALL LINEPRNT;            /* PRINT THE OUTPUT BUFFER       */
         L     @15,ADPLPRNT(,ABDPLPTR)                             0254
         BALR  @14,@15                                             0254
*         RFY                                                      0255
*           R1 UNRSTD;              /* NO RETURN CODE                */
*       END;                                                       0256
         AL    INDEX,@CF00043                                      0256
         CH    INDEX,@CH00101                                      0256
         BNH   @DL00251                                            0256
*     END;                                                         0257
*   END SDMSGRTN;                                                  0258
@EL00002 DS    0H                                                  0258
@EF00002 DS    0H                                                  0258
@ER00002 LM    @14,@12,@SA00002                                    0258
         BR    @14                                                 0258
*PDREAD:                                                           0259
*   PROC OPTIONS(SAVE(14));         /* OTHER REGS ARE PASED BOTH WAYS
*                                      AND MUST NOT BE ALTERED       */
*                                                                  0259
PDREAD   ST    @14,@SA00003                                        0259
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS INTERNAL PROC READS A VARIABLE LENGTH AMOUNT OF DATA FROM*/
*   /* THE DUMP STARTING AT THE PSEUDO ADDRESS CBNXTADR AND FOR THE  */
*   /* LENGTH IN FROMLEN INTO AN AREA POINTED TO BY TOPTR. CBNXTADR  */
*   /* AND TOPTR WILL BE INCREMENTED BY FROMLEN AND FROMLEN & TOLEN  */
*   /* WILL BE SET TO 0. THE FROMPTR VALUE WILL HAVE NO MEANING.     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0260
*   TOLEN=(ADDR(NEXTDATA)&RNDTOPG)+PAGESIZE-ADDR(NEXTDATA);/*      0260
*                                      CALCULATE THE MAXIMUM NUMBER
*                                      OF BYTES AVAILABLE IN THE   0260
*                                      AMDPRDMP BUFFER TO BE COPIED
*                                      BY SUBTRACTING THE PSEUDO   0260
*                                      VIRTUAL ADDR OF THE DATA FROM
*                                      THE ADDR OF THE FIRST BYTE OF
*                                      THE NEXT SUMDUMP PSEUDO PAGE  */
         L     @08,CBPTR(,ABDPLPTR)                                0260
         L     @08,CBNXTADR(,@08)                                  0260
         LR    TOLEN,@08                                           0260
         N     TOLEN,@CF00912                                      0260
         AL    TOLEN,@CF00910                                      0260
         SLR   TOLEN,@08                                           0260
*   DO WHILE FROMLEN>0&CONDCODE=GOODCODE;/* MOVE DATA UNTIL IT IS ALL
*                                      THERE. NOTE HERE THAT THE MVCL
*                                      WILL DECREMENT FROMLEN AS DATA
*                                      IS MOVED AND LIKEWISE       0261
*                                      INCREMENT TOPTR               */
         B     @DE00261                                            0261
@DL00261 DS    0H                                                  0262
*     RFY                                                          0262
*      (R0,                                                        0262
*       R1,                                                        0262
*       RETCODE) RSTD;                                             0262
*     R0=ADDR(NEXTDATA);            /* PUT THE VIRTUAL ADDRESS OF THE
*                                      DATA TO BE RETRIEVED IN REG 0 */
         L     @14,CBPTR(,ABDPLPTR)                                0263
         L     R0,CBNXTADR(,@14)                                   0263
*     R1=ABDPLPTR;                  /* RESTORE THE PTR TO THE      0264
*                                      AMDPRDMP PARMLIST             */
         LR    R1,ABDPLPTR                                         0264
*     ADPLASID=SMDPASID;            /* CHANGE THE AMDPRDMP READ ASID
*                                      TO THE PSEUDO ONE FOR SUM DUMP*/
         MVC   ADPLASID(2,ABDPLPTR),@CH00758                       0265
*     CALL DUMPREAD;                /* CALL AMDPRDMP DUMP ACCESS   0266
*                                      SERVICE                       */
         L     @15,ADPLMEMA(,ABDPLPTR)                             0266
         BALR  @14,@15                                             0266
*     RFY                                                          0267
*       R1 UNRSTD;                                                 0267
*     IF RETCODE^=0                 /* CHECK THE SUCCESS OF THE DUMP
*                                      ACCESS                        */
*       THEN                        /* IF IT FAILED                  */
         LTR   RETCODE,RETCODE                                     0268
         BZ    @RF00268                                            0268
*       CONDCODE=PASSCODE;          /* INDICATE RETURN CODE          */
         L     CONDCODE,PASSCODE                                   0269
*     ELSE                          /* IF THERE IS MORE DATA         */
*       DO;                                                        0270
         B     @RC00268                                            0270
@RF00268 DS    0H                                                  0271
*         RFY                                                      0271
*           RETCODE UNRSTD;                                        0271
*         FROMPTR=ADDR(DATAREA);    /* POINT TO THE AMDPRDMP BUFFER
*                                      JUST READ IN                  */
         LR    FROMPTR,R0                                          0272
*         RFY                                                      0273
*           R0 UNRSTD;                                             0273
*         IF TOLEN>FROMLEN          /* AT THIS POINT TOLEN IS SET TO
*                                      COPY TO THE END OF THE      0274
*                                      AMDPRDMP BUFFER (WHICH IS A 0274
*                                      PAGE BOUNDRY IN THE SUMDUMP 0274
*                                      PSEUDO ADDR             SPACE)*/
*           THEN                    /* IF TOLEN IS GREATER THAN    0274
*                                      FROMLEN THE END OF THE DATA 0274
*                                      REQUESTED IS IN THIS AMDPRDMP
*                                      BUFFER (WHICH IS A PSEUDO PAGE
*                                      FROM THE DUMP)                */
         CR    TOLEN,FROMLEN                                       0274
         BNH   @RF00274                                            0274
*           TOLEN=FROMLEN;          /* SO TOLEN IS SET EQUAL TO    0275
*                                      FROMLEN TO PREVENT THE MVCL 0275
*                                      FROM PADDING THE RRA AND TO 0275
*                                      SERVE AS A COUNT OF THE NUMBER
*                                      OF BYTES MOVED.               */
         LR    TOLEN,FROMLEN                                       0275
*         CBNXTADR=CBNXTADR+TOLEN;  /* INCREMENT THE PSEUDO VIRTUAL
*                                      ADDRESS OF THE NEXT SUM DUMP
*                                      DATA IN THE DUMP BY THE NUMBER
*                                      OF BYTES COPIED               */
@RF00274 L     @08,CBPTR(,ABDPLPTR)                                0276
         LR    @15,TOLEN                                           0276
         AL    @15,CBNXTADR(,@08)                                  0276
         ST    @15,CBNXTADR(,@08)                                  0276
*         MVCL(TOPTR,FROMPTR);                                     0277
         MVCL  TOPTR,FROMPTR                                       0277
*         TOLEN=PAGESIZE;           /* PREPARE TO COPY THE WHOLE NEXT
*                                      AMDPRDMP BUFFER LOAD          */
         LH    TOLEN,@CH00910                                      0278
*       END;                        /* CHECK OF READ RETURN CODE     */
*   END;                            /* BRANCH BACK TO CONTINUE     0280
*                                      RECONSTRUCTING THE DATA       */
@RC00268 DS    0H                                                  0280
@DE00261 SLR   @08,@08                                             0280
         CR    FROMLEN,@08                                         0280
         BNH   @DC00261                                            0280
         CR    CONDCODE,@08                                        0280
         BE    @DL00261                                            0280
@DC00261 DS    0H                                                  0281
*   END PDREAD;                                                    0281
@EL00003 DS    0H                                                  0281
@EF00003 DS    0H                                                  0281
@ER00003 L     @14,@SA00003                                        0281
         BR    @14                                                 0281
*   DECLARE                         /* GENERAL PURPOSE REGISTERS     */
*     GPR00F FIXED(31) REG(0),                                     0282
*     GPR01F FIXED(31) REG(1),                                     0282
*     GPR15F FIXED(31) REG(15);                                    0282
*   DECLARE                         /* COMMON VARIABLES              */
*     I256C CHAR(256) BASED,                                       0283
*     I031F FIXED(31) BASED,                                       0283
*     I031P PTR(31) BASED,                                         0283
*     I015F FIXED(15) BASED,                                       0283
*     I015P PTR(15) BASED,                                         0283
*     I008P PTR(8) BASED,                                          0283
*     I001C CHAR(1) BASED;                                         0283
*   END                                                            0284
*                                                                  0284
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IHAABDPL)                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IHAGDA  )                                       */
*/*%INCLUDE SYSLIB  (IHASMDLR)                                       */
*                                                                  0284
*       ;                                                          0284
@DATA    DS    0H
@CH00101 DC    H'2'
@CH00806 DC    H'20'
@CH00135 DC    H'32'
@CH00869 DC    H'53'
@CH00758 DC    XL2'FFFA'
@SM00974 MVC   OUTBUF(0,@08),MSGTXT(MSGPTR)
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    1F
@SA00003 DS    1F
@SA00002 DS    15F
@TF00001 DS    F
IEAVTFRD CSECT
         DS    0F
@CF00043 DC    F'1'
@CF00082 DC    F'4'
@CF00790 DC    F'12'
@CF00910 DC    F'4096'
@CH00910 EQU   @CF00910+2
@CF00972 DC    F'-8'
@CF00973 DC    F'-4'
@CF00976 DC    F'-3'
@CF00912 DC    XL4'FFFFF000'
@CF00958 DC    XL4'80000000'
@DATD    DSECT
         DS    0D
PASSCODE DS    F
SAVEPTR  DS    A
ENDCOND  DS    A
RELZERO  DS    A
MIAINDEX DS    A
HEADER   DS    CL20
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IEAVTFRD CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CA00923 DC    A(FRDMSG)
@CA00924 DC    A(SDMSGTAB)
         DS    0D
PAD      DS    AL4
         ORG   PAD
@NM00007 DC    CL1'*'
@NM00008 DC    AL3(0)
         ORG   PAD+4
PATCHLOC DC    CL100'IEAVTFRD PATCH AREA. 100 BYTES LONG'
SMDWSAG  DC    AL2(6)
         DC    AL2(7)
         DC    AL2(8)
         DC    AL2(9)
         DC    AL2(10)
         DC    AL2(11)
         DC    AL2(12)
         DC    AL2(13)
         DC    AL2(14)
         DC    AL2(15)
         DC    AL2(16)
SMDWSAC  DC    AL2(17)
         DC    AL2(18)
         DC    AL2(19)
         DC    AL2(20)
         DC    AL2(21)
         DC    AL2(22)
         DC    AL2(23)
         DC    AL2(24)
         DC    AL2(25)
         DC    AL2(26)
         DC    AL2(27)
         DC    AL2(28)
         DC    AL2(29)
         DC    AL2(30)
         DC    AL2(54)
         DC    AL2(55)
SMDWSAL  DC    AL2(31)
         DC    AL2(32)
         DC    AL2(33)
         DC    AL2(34)
         DC    AL2(35)
         DC    AL2(36)
         DC    AL2(37)
         DC    AL2(38)
         DC    AL2(39)
         DC    AL2(40)
         DC    AL2(41)
         DC    AL2(42)
         DC    AL2(43)
         DC    AL2(44)
         DC    AL2(45)
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
MSGPTR   EQU   @02
INDEX    EQU   @02
ABDPLPTR EQU   @09
R13      EQU   @13
RETCODE  EQU   @15
R0       EQU   @00
R1       EQU   @01
CONDCODE EQU   @10
FROMPTR  EQU   @04
FROMLEN  EQU   @05
TOPTR    EQU   @06
TOLEN    EQU   @07
GPR01F   EQU   @01
GPR15F   EQU   @15
GPR00F   EQU   @00
         EXTRN FRDMSG
         EXTRN SDMSGTAB
ABDPL    EQU   0
ADPLASID EQU   ABDPL+4
ADPLSBPL EQU   ABDPL+6
ADPLFLAG EQU   ABDPL+7
ADPLBUF  EQU   ABDPL+8
ADPLPRNT EQU   ABDPL+12
ADPLCVT  EQU   ABDPL+16
ADPLMEMA EQU   ABDPL+20
ADPLFRMT EQU   ABDPL+24
ADPLCOM1 EQU   ABDPL+28
ADPLFMT2 EQU   ABDPL+48
CVTMAP   EQU   0
CVT      EQU   CVTMAP
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIOQET EQU   CVTMAP+120
CVTIERLC EQU   CVTMAP+144
CVTHEAD  EQU   CVTMAP+160
CVTSV76C EQU   CVTHEAD
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
GDA      EQU   0
GVSMFLAG EQU   GDA
GDAFLAGS EQU   GVSMFLAG
PASTRT   EQU   GDA+16
VRPOSTQ  EQU   GDA+32
VRWAITQ  EQU   GDA+40
SMDLR    EQU   0
SMDLRHDR EQU   SMDLR
SMDLRID  EQU   SMDLRHDR
SMDLRLEN EQU   SMDLRHDR+4
SMDLRADR EQU   SMDLRHDR+8
SMDLRPL  EQU   SMDLRHDR+12
SMDLRMSG EQU   SMDLRHDR+16
SMDLRDAT EQU   SMDLR+20
BACKPTR  EQU   0
SA0      EQU   0
DUMPREAD EQU   0
DATAREA  EQU   0
DATAPTR  EQU   DATAREA
LINEPRNT EQU   0
FMTSERV  EQU   0
OUTBUF   EQU   0
VTFRDCB  EQU   0
CBNXTADR EQU   VTFRDCB
CBSDRECP EQU   VTFRDCB+4
CBSDRRAL EQU   VTFRDCB+8
NEXTDATA EQU   0
RRA      EQU   0
MSG      EQU   0
MSGLEN   EQU   MSG
MSGTXT   EQU   MSG+1
MIATABLE EQU   0
MIABEGIN EQU   MIATABLE
MIAEND   EQU   MIATABLE+4
I001C    EQU   0
I008P    EQU   0
I015F    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
I256C    EQU   0
SDMSGMAX EQU   SDMSGTAB
SDMSG    EQU   SDMSGTAB+1
X        EQU   0
CVTPTR   EQU   ADPLCVT
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTGDA   EQU   CVTS01+212
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
GDAPTR   EQU   DATAPTR
CBPTR    EQU   ADPLCOM1
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTSUSP  EQU   CVTS01+692
CVTT6SVC EQU   CVTS01+688
CVTCDAL  EQU   CVTS01+684
CVTTCTL  EQU   CVTS01+680
CVTRSUME EQU   CVTS01+676
CVTJTERM EQU   CVTS01+672
CVTASMRM EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
MIALAST  EQU   MIABEGIN
@NM00006 EQU   SMDLRHDR+17
@NM00005 EQU   SMDLRHDR+2
GBLCELCT EQU   GDA+60
GLBLCELL EQU   GDA+56
CSASPQEP EQU   GDA+52
PFSTCPAB EQU   GDA+48
VRWLEL   EQU   VRWAITQ+4
VRWFEL   EQU   VRWAITQ
VRPLEL   EQU   VRPOSTQ+4
VRPFEL   EQU   VRPOSTQ
SQASPLFT EQU   GDA+28
SQASPQEP EQU   GDA+24
PASIZE   EQU   GDA+20
VRPQEP   EQU   GDA+12
CSAPQEP  EQU   GDA+8
VRDREG   EQU   GDA+4
RESV     EQU   GVSMFLAG+1
@NM00004 EQU   GDAFLAGS
WAITQUE  EQU   GDAFLAGS
SQATHRS2 EQU   GDAFLAGS
SQATHRS1 EQU   GDAFLAGS
GDAFLAG2 EQU   GDAFLAGS
NIPFOURK EQU   GDAFLAGS
GDAFLAG1 EQU   GDAFLAGS
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00003 EQU   CVTFIX+248
@NM00002 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTRSV99 EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTBAH   EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTRV490 EQU   CVTMAP+388
CVTSU    EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTLDEV  EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTVS1B  EQU   CVTOPTB
CVTVS1A  EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTSV76Q EQU   CVTSV76C
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTSV76M EQU   CVTIOQET
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
ADPLABDA EQU   ABDPL+56
ADPLEXT  EQU   ABDPL+52
ADPLFMT1 EQU   ABDPL+44
ADPLCOM4 EQU   ABDPL+40
ADPLCOM3 EQU   ABDPL+36
ADPLCOM2 EQU   ABDPL+32
@NM00001 EQU   ADPLFLAG
ADPLDMGT EQU   ADPLFLAG
ADPLSYTM EQU   ADPLFLAG
ADPLSNPR EQU   ADPLFLAG
ADPLTCB  EQU   ABDPL
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00236 EQU   @EL00002
@ENDDATA EQU   *
         END   IEAVTFRD,(C'PLS1934',0701,77280)
